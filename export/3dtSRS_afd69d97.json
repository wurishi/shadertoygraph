{"ver":"0.1","info":{"id":"3dtSRS","date":"1572270346","viewed":208,"name":"ShaderTober - Dizzy","username":"Flopine","description":"A small doodle with inktober's theme \"Dizzy\".\nif you can't stare at it in motion for too long, then the effect works :P ","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","fractal","noise","scanline"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, Coyhot, Alkama and YX for teaching me\n// Thanks LJ for giving me the love of shadercoding :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n#define PI 3.14192\n\nfloat hash21 (vec2 x)\n{return fract(sin(dot(x,vec2(11.1,25.4)))*1245.54);}\n\nvoid moda (inout vec2 p, float rep)\n{\n    float per = (2.*PI)/rep;\n    float a = atan(p.y,p.x);\n    float l = length(p);\n    a = mod(a,per)-per*0.5;\n    p = vec2(cos(a),sin(a))*l;\n}\n\nmat2 rot(float a)\n{return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nfloat cyl (vec3 p, float r, float h)\n{return max(length(p.xy)-r, abs(p.z)-h);}\n\nfloat cog (vec3 p, float in_r, float out_r)\n{   \n    float anim  = ((2.*PI)/3.) * (floor(iTime) + pow(fract(iTime),6.));\n    p.xy *= rot(anim);\n    float c1 = max(abs(cyl(p,in_r,0.25))-0.098, abs(p.z)-0.1);\n    moda(p.xy, 5.);\n    p.x -= in_r + out_r;\n    float c2 = cyl(p.yzx, 0.1-p.x*0.2, out_r);\n    return min(c1,c2);\n}\n\nfloat cogs (vec3 p)\n{\n    float i_r = 1.;\n    float o_r = 0.5;\n    float d = cog(p,i_r,o_r);\n    for (int i=0; i<3; i++)\n    {\n        p = abs(p)-3.;\n        i_r -= 0.2;\n        o_r -= 0.1;\n        p.xz *= rot(PI/4.);\n        moda(p.xy, 5.);\n        p.x -= (i_r + o_r)*2.;\n\n        d = min(d,cog(p, i_r, o_r));\n    }\n    return d;\n}\n\nfloat SDF (vec3 p)\n{\n    p.xy *= rot(iTime*0.5);\n    p.x += mix(0.,texture(iChannel0, p.yz).r,clamp(exp(-fract(iTime)*8.)*6.,0.,1.));\n    float per = 20.;\n    p.xy *= rot(p.z*0.05);\n\tp.z = mod(p.z, per)-per*0.5;\n    return cogs(p);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    float dither = hash21(uv); \n    \n    // scanline effect from superplek\n\tvec3 weight_G = vec3(1., 0.7, 1.);\n    vec3 weight_RB = vec3(0.7, 1., 0.7);\n    vec3 weight = mix(weight_G, weight_RB, mod(floor(fragCoord.y*iTime*5.), 2.));\n    \n    \n    vec3 ro = vec3(0.001,0.001,-10.+iTime),\n        p = ro,\n        rd = normalize(vec3(uv,1.)),\n        col = vec3(0.);\n    \n    float shad = 0.; \n    bool hit = false;\n    \n    for (float i=0.;i<64.;i++)\n    {\n        float d = SDF(p);\n        if (d<0.001)\n        {\n            hit = true;\n            shad = i/64.;\n            break;\n        }        \n        d *= 0.6+dither*0.1;\n        p += d*rd;\n    }\n    \n\tif (hit)\n    {\n        col = vec3(1.-shad)*weight;\n    }\n  \n    // Output to screen\n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}