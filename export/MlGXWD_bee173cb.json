{"ver":"0.1","info":{"id":"MlGXWD","date":"1484347539","viewed":314,"name":"Sandpile","username":"NuSan","description":"Abelian Sandpile algorithm, showing fractal behaviour with a very simple model. You can change amount of sand to make it bigger. Made just after seeing a video by Numberphile ([url]https://youtu.be/1MtEUErz7Gg[/url])","likes":12,"published":1,"flags":32,"usePreview":0,"tags":["procedural","2d","fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define defaultzoom 2.0\n#define viewmode 0\n#define clampmode\n//#define mousemove\n//#define mousezoom\n#define blur 0\n\n// Visualize sandpiles\n// To change quantity of sand, got to \"Buf A\" shader\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n        \n    vec2 center = vec2(0.5);\n    #ifdef mousemove\n    \tcenter = vec2(1.0)-iMouse.xy/iResolution.xy;\n    #endif\n    \n    float zoom = defaultzoom;\n    #ifdef mousezoom\n    \tzoom = mix(1.0,10.0,iMouse.y/iResolution.y);\n    #endif\n    uv = (uv-center)/zoom + center;\n    \n    #ifdef clampmode\n    \tuv = (floor(uv * iResolution.xy + 0.5)-0.5)/iResolution.xy;\n    #endif\n        \n    #if blur>0\n    float val = 0.0;\n    float halfblur = float(blur)/2.0;\n    for(int i=0;i<blur; ++i) {\n        vec2 offuv = vec2((float(i)-halfblur)/iResolution.x,0.0);\n        for(int j=0;j<blur; ++j) {\n            offuv.y = (float(j)-halfblur)/iResolution.y;\n        \tval += texture(iChannel0, uv + offuv*1.0 ).x;\n        }\n    }\n    val /= float(blur*blur);\n    #else\n    float val = texture(iChannel0, uv ).x;\n    #endif\n    \n    vec3 col = vec3(0.0);\n    \n    #if viewmode == 0\n    \tcol = clamp(val-vec3(0.5,1.5,2.5), 0.0, 1.0);\n    #elif viewmode == 1\n    \tcol = clamp(mod(val,3.0)-vec3(0.5,1.5,2.5), 0.0, 1.0);\n    \tcol += 1.0-clamp(pow(4.0/val,2.0),0.0,1.0);\n    #elif viewmode == 2\n    \tcol.r = clamp(pow(3.0/val,2.0),0.0,1.0);\n    \tcol.g = clamp(pow(2.0/val,2.0),0.0,1.0);\n    \tcol.b = clamp(pow(0.1/val,2.0),0.0,1.0);\n    #elif viewmode == 3\n        col.x = val*0.33;\n        col = mix(col+vec3(1.0,1.0,0.0),col, clamp(abs(val-1.5)*1.0,0.0,1.0));\n        col += pow(val*0.28,10.0)*0.4;\n        col = mix(col+vec3(0.0,0.0,1.0),col, clamp(abs(val-2.5)*2.0,0.0,1.0));\n    #endif\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Abelian Sandpile algorithm\n// A large amount of sand is put in the middle.\n// Each time a cell is above 4, it topple on the four neighbors\n// Each of the four neighbor recieve 1 sand\n// Made just after seeing a video by Numberphile (https://youtu.be/1MtEUErz7Gg)\n\n// To change zoom and view mode, go to \"Image\" shader\n\n// Need to press \"reset time\" button when changed\n#define starting_sand 50000.0\n\n// This need to be changed in all Buf A, Buf B, Buf C and Buf D\n// 4.0 is the only real interesting number it seems\n#define max_sand_amount 4.0\n\nvec4 Neigh(vec2 uv, vec2 off) {\n\treturn texture(iChannel0, uv + off / iResolution.xy );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 prev = texture(iChannel0, uv );\n    \n    // Take all 4 neighbors\n    vec4 left = Neigh(uv, vec2(-1,0));\n    vec4 right = Neigh(uv, vec2(1,0));\n    vec4 up = Neigh(uv, vec2(0,-1));\n    vec4 down = Neigh(uv, vec2(0,1));\n    \n    // remove everything above 4, by stack of 4\n    prev = mod(prev, max_sand_amount);\n    \n    // topple neighbors overflow value\n    prev += floor(left/max_sand_amount);\n    prev += floor(right/max_sand_amount);\n    prev += floor(up/max_sand_amount);\n    prev += floor(down/max_sand_amount);\n    \n    vec4 final = prev;\n    // Initialisation\n    // If you want to go fullscreen, change delay here to let you the time to go in fullscreen\n    if(iTime<0.1) {\n        vec2 vuv = (uv-vec2(0.5)) * 1.0 * iResolution.xy + 0.5;\n        float Select = 1.0-clamp((dot(vuv,vuv)-0.5)*1000.0,0.0,1.0);\n        float Sand = starting_sand;\n        final = vec4(Select * Sand,0,0,1);\n    }\n    fragColor = final;\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\n#define max_sand_amount 4.0\n\n// Same code that Buf A to try to go 4x the framerate\n\nvec4 Neight(vec2 uv, vec2 off) {\n\treturn texture(iChannel0, uv + off / iResolution.xy );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 prev = texture(iChannel0, uv );\n    \n    vec4 left = Neight(uv, vec2(-1,0));\n    vec4 right = Neight(uv, vec2(1,0));\n    vec4 up = Neight(uv, vec2(0,-1));\n    vec4 down = Neight(uv, vec2(0,1));\n    \n    prev = mod(prev, max_sand_amount);\n    prev += floor(left/max_sand_amount);\n    prev += floor(right/max_sand_amount);\n    prev += floor(up/max_sand_amount);\n    prev += floor(down/max_sand_amount);\n    \n    fragColor = prev;\n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"\n#define max_sand_amount 4.0\n\n// Same code that Buf A to try to go 4x the framerate\n\nvec4 Neight(vec2 uv, vec2 off) {\n\treturn texture(iChannel0, uv + off / iResolution.xy );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 prev = texture(iChannel0, uv );\n    \n    vec4 left = Neight(uv, vec2(-1,0));\n    vec4 right = Neight(uv, vec2(1,0));\n    vec4 up = Neight(uv, vec2(0,-1));\n    vec4 down = Neight(uv, vec2(0,1));\n    \n    prev = mod(prev, max_sand_amount);\n    prev += floor(left/max_sand_amount);\n    prev += floor(right/max_sand_amount);\n    prev += floor(up/max_sand_amount);\n    prev += floor(down/max_sand_amount);\n    \n    fragColor = prev;\n}","name":"Buf C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"\n#define max_sand_amount 4.0\n\n// Same code that Buf A to try to go 4x the framerate\n\nvec4 Neight(vec2 uv, vec2 off) {\n\treturn texture(iChannel0, uv + off / iResolution.xy );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 prev = texture(iChannel0, uv );\n    \n    vec4 left = Neight(uv, vec2(-1,0));\n    vec4 right = Neight(uv, vec2(1,0));\n    vec4 up = Neight(uv, vec2(0,-1));\n    vec4 down = Neight(uv, vec2(0,1));\n    \n    prev = mod(prev, max_sand_amount);\n    prev += floor(left/max_sand_amount);\n    prev += floor(right/max_sand_amount);\n    prev += floor(up/max_sand_amount);\n    prev += floor(down/max_sand_amount);\n    \n    fragColor = prev;\n}","name":"Buf D","description":"","type":"buffer"}]}