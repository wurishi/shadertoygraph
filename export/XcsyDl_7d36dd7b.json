{"ver":"0.1","info":{"id":"XcsyDl","date":"1721780169","viewed":48,"name":"Chessboard 3d rotation","username":"vivid_bw","description":"Inspired by Shock Megademo for ZX Spectrum by E.S.I.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["retro","chessboard"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat3 rotX(float angle) {\n  float s = sin(angle); float c = cos(angle);\n  return mat3(1., 0., 0., 0., c, s, 0., -s, c);\n}\n\nmat3 rotY(float angle) {\n  float s = sin(angle); float c = cos(angle);\n  return mat3(c, 0., -s, 0., 1., 0., s, 0.0, c);\n}\n\nmat3 rotZ(float angle) {\n  float s = sin(angle); float c = cos(angle);\n  return mat3(c, s, 0., -s, c, 0., 0., 0., 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2. * fragCoord / iResolution.xy - 1.;\n    float rTime = max(0., iTime - 3.);\n    vec3 ray = vec3(uv.x, uv.y * iResolution.y / iResolution.x,  1.);\n    ray = ray * rotX(rTime) * rotY(rTime * .9) * rotZ(rTime * .7);\n    float z = abs(1. / ray.y);    \n    vec2 chess = fract((ray.xz * z) + 3. * vec2(cos(rTime), iTime)) - .5;    \n    fragColor = vec4(sign(chess.x * chess.y)) * smoothstep(10., 1., z);\n}","name":"Image","description":"","type":"image"}]}