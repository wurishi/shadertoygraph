{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"#define PI 3.141592653589793\n#define TAU 6.283185307179586\n\nfloat rand(vec2 p){\n\treturn fract(sin(dot(p.xy, vec2(1.3295, 4.12))) * 493022.1);\n}\n\nfloat brightness_squared(vec3 color) {\n    return 0.241*color.x*color.x + 0.691*color.y*color.y + 0.068*color.z*color.z;\n}\n\nvec2 window(float n, float b) {\n\tfloat l = b * (n - 1.0);\n\tfloat r = l + 1.0;\n\treturn vec2(l, r);\n}\n\nvec3 get_color(float i) {\n\tif(i < 1.0) {\n\t\treturn vec3(1.0, 0.0, 0.0);\n\t} else if(i < 2.0) {\n\t\treturn vec3(1.0, 0.5, 0.0);\n\t} else if(i < 3.0) {\n\t\treturn vec3(1.0, 1.0, 0.0);\n\t} else if(i < 4.0) {\n\t\treturn vec3(0.0, 1.0, 0.0);\n\t} else if(i < 5.0) {\n\t\treturn vec3(0.0, 1.0, 1.0);\t\n\t} else if(i < 6.0) {\n\t\treturn vec3(0.0, 0.0, 1.0);\t\n\t} else if(i < 7.0) {\n\t\treturn vec3(1.0, 0.0, 1.0);\t\n\t} else {\n\t\treturn vec3(1.0, 0.0, 0.0);\t\n\t}\n}\n\nvec3 dither(float n, vec3 color, vec2 coord) {\n\tvec2 w = window(n, sqrt(brightness_squared(color)));\n\tfloat b = ceil(w.x) - w.x;\n\tfloat r = rand(vec2(coord.x, coord.y + iTime));\n\treturn get_color(r < b ? w.y : w.x);\n}\n\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat scale(float l0, float r0, float l1, float r1, float x) {\n\treturn (x - l0) / (r0 - l0) * (r1 - l1) + l1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = 2.0*(0.5 * iResolution.xy - fragCoord.xy) / iResolution.xx;\n\tfloat angle = atan(p.y, p.x);\n\tfloat turn = (angle + PI) / TAU;\n\tfloat radius = sqrt(p.x*p.x + p.y*p.y);\n\t\n\tfloat rotation = -0.02 * TAU * iTime;\n\tfloat turn_1 = turn + rotation;\n\t\n\tfloat n_sub = 3.0;\n\t\n\tfloat turn_sub = mod(float(n_sub) * turn_1, float(n_sub));\n\t\n\tfloat k_sine = 0.12 * sin(2.0 * iTime);\n\tfloat sine = k_sine * sin(50.0 * (pow(radius, 0.2) - 0.2 * iTime));\n\tfloat turn_sine = turn_sub + sine;\n\n\tint n_colors = 7;\n\tint i_turn = int(mod(float(n_colors) * turn_sine, float(n_colors)));\n\t\n\tfloat ir_numerator = 1.5;\n\tfloat ir_denominator = pow(radius*0.5, 0.6);\n\tfloat ir_dt = 5.0 * iTime;\n\tint i_radius = int(ir_numerator/ir_denominator + ir_dt);\n\t\t\n\tint i_color = int(mod(float(i_turn + i_radius), float(n_colors)));\n\t\n\tfloat c = 0.5/float(n_colors) + float(i_color) / float(n_colors - 0);\n\t\n\tvec3 color = vec3(c, c, c);\n\t\n\t//color *= pow(radius, 0.3)*1.0;\n\t\n\tcolor = dither(8.0, color, fragCoord);\n\t\n\tfloat ir_mod = fract(ir_numerator/ir_denominator + ir_dt);\n\tcolor *= scale(0.0, 1.0, 0.6, 1.0, pow(ir_mod, 0.5));\t\n\t\n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XsS3zR","date":"1382238643","viewed":391,"name":"rainbow spiral + random dither","username":"ahihi","description":":3","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""}}