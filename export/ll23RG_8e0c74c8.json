{"ver":"0.1","info":{"id":"ll23RG","date":"1430263625","viewed":505,"name":"poolglassbox","username":"MMGS","description":"sorry for any mistakes/possible abuse of someones code, still trying to learn.\nTried making some music, but had to surrender :3\n","likes":10,"published":1,"flags":8,"usePreview":0,"tags":["waterboxreflectionthing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"struct SHCoefficients {\n    vec3 l00, l1m1, l10, l11, l2m2, l2m1, l20, l21, l22;\n};\n\nconst SHCoefficients stpeter = SHCoefficients(\n    vec3( 0.3623915,  0.2624130,  0.2326261 ),\n    vec3( 0.1759131,  0.1436266,  0.1260569 ),\n    vec3(-0.0247311, -0.0101254, -0.0010745 ),\n    vec3( 0.0346500,  0.0223184,  0.0101350 ),\n    vec3( 0.0198140,  0.0144073,  0.0043987 ),\n    vec3(-0.0469596, -0.0254485, -0.0117786 ),\n    vec3(-0.0898667, -0.0760911, -0.0740964 ),\n    vec3( 0.0050194,  0.0038841,  0.0001374 ),\n    vec3(-0.0818750, -0.0321501,  0.0033399 )\n);\n\nvec3 calcIrradiance(vec3 nor, float sca) {\n    const SHCoefficients c = stpeter;\n    const float c1 = 0.429043;\n    const float c2 = 0.511664;\n    const float c3 = 0.743125;\n    const float c4 = 0.886227;\n    const float c5 = 0.247708;\n    return (\n        c1 * c.l22 * (nor.x * nor.x - nor.y * nor.y) +\n        c3 * c.l20 * nor.z * nor.z +\n        c4 * c.l00 -\n        c5 * c.l20 +\n        2.0 * c1 * c.l2m2 * nor.x * nor.y +\n        2.0 * c1 * c.l21  * nor.x * nor.z +\n        2.0 * c1 * c.l2m1 * nor.y * nor.z +\n        2.0 * c2 * c.l11  * nor.x +\n        2.0 * c2 * c.l1m1 * nor.y +\n        2.0 * c2 * c.l10  * nor.z\n    ) * sca;\n}\nconst float illu = 1.1;    \n\n\n//-----------------------------------------------------------------------------\n// Utils\n//-----------------------------------------------------------------------------\nvec3 rotateY(vec3 v, float x)\n{\n    return vec3(\n        cos(x)*v.x - sin(x)*v.z,\n        v.y,\n        sin(x)*v.x + cos(x)*v.z\n    );\n}\n\nvec3 rotateX(vec3 v, float x)\n{\n    return vec3(\n        v.x,\n        v.y*cos(x) - v.z*sin(x),\n        v.y*sin(x) + v.z*cos(x)\n    );\n}\n\nvec3 rotateZ(vec3 v, float x)\n{\n    return vec3(\n        v.x*cos(x) - v.y*sin(x),\n        v.x*sin(x) + v.y*cos(x),\n        v.z\n    );\n}\n\n\n\n//-----------------------------------------------------------------------------\n// Scene/Objects\n//-----------------------------------------------------------------------------\nfloat box(vec3 p, vec3 pos, vec3 size)\n{\n\treturn max(max(abs(p.x-pos.x)-size.x,abs(p.y-pos.y)-size.y),abs(p.z-pos.z)-size.z);\n}\nfloat sphere(vec3 p, vec4 spr)\n{\n\treturn length(spr.xyz-p) - spr.w;\n}\nfloat plane(vec3 p, vec4 a)\n{\n\tp*=.4;\n\treturn -p.x*a.x*0.4 - p.y*a.y - p.z*a.z + a.w;\n}\n\nfloat waveHeight(vec3 dir,vec3 p,float a,float L,float f )\n{\t   \n\tfloat pi=3.1415;\n\tfloat k = (2.0*pi)/L; \n\tfloat w = 2.0*pi*f; \n\tfloat vz = w/k; \n\tfloat wave = -a*cos(k*vz*dot(dir,p) - w*iTime);\n    return wave;\n    \n}\nfloat ground(vec3 p)\n{\n\tfloat wave = waveHeight(vec3(0.5,0,0.5),p,0.25,.74,0.47);\n    float wave2 = waveHeight(vec3(-0.2,0,0.2),p,1.05,.5,0.33);\n     float wave3 = waveHeight(vec3(-0.5,0,-0.2),p,.7,.4,0.23);\n\tfloat sumY =2.0*(sin(wave)+sin(wave2)+sin(wave3))*0.33 ;\n\n\treturn plane(p, vec4(0.1, 4.+sumY, 0.1, 0.)  );\n}\n\nfloat object1(vec3 p)\n{\n\treturn box(rotateY(rotateX(p-vec3(-0.,-7.0,.0),iTime*.025),iTime*.025),vec3(0.),vec3(1.15));\t\n}\n\nfloat object2(vec3 p)\n{\n\tfloat w = sin( ((-p.x * -p.x)*0.10 + (-p.z *- p.z)*.10 ) - iTime*1.95 )*(0.08-length(p)*0.0001)   ;\t\n\treturn sphere(p,vec4( 0.+w*0.5, .25+w*0.8, .0+w*0.5, 1.75));\t\n}\n\nvec3 NormalPlane(vec3 p, vec4 a)\n{\n\tvec3 eps = vec3(0.01,0.0,0.0);\n\treturn normalize(vec3(\n\t\tplane(p-eps.xyy,a)-plane(p+eps.xyy,a),\n\t\tplane(p-eps.yxy,a)-plane(p+eps.yxy,a),\n\t\tplane(p-eps.yyx,a)-plane(p+eps.yyx,a)\n\t));\n}\n\n\n\nfloat scene(vec3 p)\n{\n\tfloat d = ground(p);\n\t\n\td = min(d, plane(p,vec4(0., -1., 0., 6.)) );\n\td = min(d, plane(p,vec4(0., 0., -1., 3.)) );\n\td = min(d, plane(p,vec4(1., 0., 0., 3.)) );\n\td = min(d, plane(p,vec4(-1., 0., 0., 3.)) );\n\t\n\td = min(d, object1(p) );\n\td = min(d, object2(p) );\n\t\n\treturn d;\n}\n\n\n\n//-----------------------------------------------------------------------------\n// Raymarching Tools\n//-----------------------------------------------------------------------------\n//Raymarche by distance field\nvec3 Raymarche(vec3 org, vec3 dir)\n{\n\tfloat d=0.0;\n\tvec3 p=org;\n\tfloat eps = 0.001;\n\tfloat max = 5.0;\n\tfor(int i=0; i<40; i++)\n\t{\n\t\td = scene(p);\n\t\tp += d * dir;\n\t\tif(d<eps||d>max)\n\t\t\tbreak;\n\t}\n\treturn p;\n}\n//Raymarch Cheap version for reflection\nvec3 RaymarcheRef(vec3 org, vec3 dir)\n{\n\tfloat d=0.0;\n\tvec3 p=org;\n\tfloat eps = 0.01;\n\tfloat max = 5.0;\n\tfor(int i=0; i<30; i++)\n\t{\n\t\td = scene(p);\n\t\tp += d * dir;\n\t\tif(d<eps||d>max)\n\t\t\tbreak;\n\t}\n\treturn p;\n}\n//Get Normal\nvec3 getN(vec3 p)\n{\n\tvec3 eps = vec3(0.01,0.0,0.0);\n\treturn normalize(vec3(\n\t\tscene(p+eps.xyy)-scene(p-eps.xyy),\n\t\tscene(p+eps.yxy)-scene(p-eps.yxy),\n\t\tscene(p+eps.yyx)-scene(p-eps.yyx)\n\t));\n}\n\n//Get Ambiant Occlusion\nfloat AO(vec3 p, vec3 n, vec2 a)\n{\n\tfloat dlt = a.x;\n\tfloat oc = 0.0, d = a.y;\n\tfor(int i = 0; i<0; i++)\n\t{\n\t\toc += (float(i) * dlt - scene(p + n * float(i) * dlt)) / d;\n\t\td *= 2.0;\n\t}\n\treturn clamp(1.0 - oc, 0.0, 1.0);\n}\n\nvec3 cubemap( sampler2D sam, in vec3 d )\n{\n    vec3 n = abs(d);\n\n#if 0\n    // sort components (small to big)    \n    float mi = min(min(n.x,n.y),n.z);\n    float ma = max(max(n.x,n.y),n.z);\n    vec3 o = vec3( mi, n.x+n.y+n.z-mi-ma, ma );\n    return texture( sam, .1*o.xy/o.z ).xyz;\n#else\n    vec2 uv = (n.x>n.y && n.x>n.z) ? d.yz/d.x: \n              (n.y>n.x && n.y>n.z) ? d.zx/d.y:\n                                     d.xy/d.z;\n    return texture( sam, uv ).xyz;\n    \n#endif    \n}\n\nvec4 GetColor(vec3 p, vec3 n, vec3 org, vec3 dir)\n{\n\tvec4 color = vec4(0.0);\n\t vec4 backcol = texture(iChannel0, -reflect(dir,n) );\n\n    //Fake GI \n\tvec4 a = vec4(-1., 0., 0., 3.);\n\tvec4 b = vec4( 1., 0., 0., 3.);\n\tvec4 c = vec4( 0., 0.,-1., 3.);\n\tvec4 d = vec4( 0., -1.,0., 6.);\n    color += vec4(1.,.2,.2,1.)*illu * vec4( 1./( plane(p,a)*1. + 1. )) * max( dot(n,NormalPlane(p,a))*.5+.5, .0);\n    color += vec4(.2,1.,.2,1.)*illu * vec4( 1./( plane(p,b)*1. + 1. )) * max( dot(n,NormalPlane(p,b))*.5+.5, .0);\n    color += vec4(.2,.2,1.,1.)*illu * vec4( 1./( plane(p,c)*1. + 1. )) * max( dot(n,NormalPlane(p,c))*.5+.5, .0);\n    color += vec4(.8,.8,.8,.8)*illu * vec4( 1./( plane(p,d)*1. + 1. )) * max( dot(n,NormalPlane(p,d))*.5+.5, .0);\n    \n\tcolor += vec4(1.,.2,.2,1.)*illu * vec4( 1./( plane(p,a)*100. + 1. ));\n\tcolor += vec4(.2,1.,.2,1.)*illu * vec4( 1./( plane(p,b)*100. + 1. ));\n\tcolor += vec4(.2,.2,1.,1.)*illu * vec4( 1./( plane(p,c)*100. + 1. ));\n\tcolor += vec4(.8,.8,.8,.8)*illu * vec4( 1./( plane(p,d)*100. + 1. ));\n\n\tvec4 Irr = vec4(calcIrradiance(n,8.0),1.0 ); \n\tbackcol*=Irr*0.5;\n    color *= vec4( AO(p,n,vec2(.2,1.)) );\n\n\tif(object2(p)<0.1) //sphere\n    {\n    \tvec4 tex = texture(iChannel2,n.xy);\n        vec3 test = cubemap(iChannel2,n);\n    \tcolor = mix(Irr*vec4(test,1.0), color, 0.1);\n    }\n  \n    if(plane(p,a) <.1 || plane(p,b) <.1||plane(p,c) <.1||plane(p,d) <.1) //walls\n    {\n    \tcolor.xyz = mix(backcol.xyz-0.02,color.xyz,0.01);\n    }\n    \n    if(ground(p)<0.1) // plane\n    {\n    \tvec4 waterColor = vec4(vec3(0.0,0.34,0.63),1.0);\n    \tcolor = mix(waterColor, color, 0.8);\n    }\n    return clamp(color,vec4(.0),vec4(1.));\n\t\n}\n///////////////////////////////////////////////////////////////////////////////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t  vec2 p = (2.0 * gl_FragCoord.xy- iResolution.xy) / iResolution.y;\n\n    vec3 eye = vec3(0.0+sin(iMouse.y*0.01)*8.0 ,0,11.0+cos(iMouse.y*0.01)*8.0 );\n    eye.y -= 6.6;\t\n    vec3 ro = eye;\n    vec3 ta = vec3(0.0, 1.0, 0.0);\n    vec3 cw = normalize(ta - eye);\n    vec3 cu = normalize(cross(vec3(0.0, -1.0, 0.0), cw));\n    vec3 cv = normalize(cross(cw, cu));\n    mat3 cam = mat3(cu, cv, cw);\n    vec3 rd = cam * normalize(vec3(p.xy, 1.0));   \n\n   \t\n\tvec3 rayPos = Raymarche(ro,rd);\n\tvec4 color = GetColor(rayPos,getN(rayPos),ro,rd);\n\t\n\t//Reflection\n    const int bounces = 2;\n\tfor(int i=0; i<bounces;i++){\n\t\trd = reflect(rd, getN(rayPos) );\n\t    rayPos= RaymarcheRef(rayPos+rd*0.5,rd);\n\t    color = mix(color, GetColor(rayPos,getN(rayPos),ro,rd), .3);\t\n    }\n\n\tvec3 finalColor =color.xyz;\n\tfragColor = vec4(finalColor, 1.0);\n}","name":"","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Created by inigo quilez - iq/2014\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\n//----------------------------------------------------------------------------------------\n\nfloat noise( float x )\n{\n    return fract(sin(1371.1*x)*43758.5453);\n}\n\nfloat saw( float x, float a)\n{\n    float f = fract( x );\n\treturn clamp(f/a,0.0,1.0)-clamp((f-a)/(1.0-a),0.0,1.0);\n}\n\n//----------------------------------------------------------------------------------------\n\n// main instrument\nfloat instr1( float freq, float time )\n{\n freq = 250.0*pow(freq/340.0,1.03); // spread\n    \n    float ph = 2.40;\n    ph *= sin(2.2831*freq*time);\n    ph *= 2.2+1.8*max(0.5,2.0-0.1*freq);\n    ph *= exp(-time*freq);\n    \n    float y = 0.340;\n    y += 0.90*sin(1.00*6.2831*freq*time+ph)*exp(-0.5*0.007*freq*time);\n    y += 0.40*sin(2.01*6.2831*freq*time+ph)*exp(-0.5*0.011*freq*time);\n    y += 0.10*sin(3.01*6.2831*freq*time+ph)*exp(-0.5*0.015*freq*time);\n    y += 0.16*sin(4.01*6.2831*freq*time+ph)*exp(-0.5*0.018*freq*time);\n    y += 0.13*sin(5.01*6.2831*freq*time+ph)*exp(-0.5*0.021*freq*time);\n    y += 0.10*sin(6.01*6.2831*freq*time+ph)*exp(-0.5*0.027*freq*time);\n    y += 0.09*sin(8.01*6.2831*freq*time+ph)*exp(-0.5*0.030*freq*time);\n    y += 0.07*sin(9.01*6.2831*freq*time+ph)*exp(-0.5*0.033*freq*time);\n\n    y += .25*y*y*y;\n       \n    y *= .83 + 2.0*exp(-34.4-250.0*time+time);\n    y *= clamp( time/0.104, 0.0, 1.0 );\n\n    y *= 2.5-1.5*clamp( log2(freq)/10.0,0.0,1.0);\n\treturn y;\t\n}\n\nfloat instr2( float f, float t )\n{\n\treturn instr1(f,t);\n}\n\n// bass\nfloat instr3( float freq, float time )\n{\n    freq = 250.0*pow(freq/340.0,1.03); // spread\n    \n    float ph = 2.40;\n    ph *= sin(2.2831*freq*time);\n    ph *= 4.2+1.8*max(0.5,2.0-0.1*freq);\n    ph *= exp(-time*freq);\n    \n    float y = 0.340;\n    y += 0.70*sin(1.00*6.2831*freq*time+ph)*exp(-0.5*0.007*freq*time);\n    y += 0.20*sin(2.01*6.2831*freq*time+ph)*exp(-0.5*0.011*freq*time);\n    y += 0.20*sin(3.01*6.2831*freq*time+ph)*exp(-0.5*0.015*freq*time);\n    y += 0.16*sin(4.01*6.2831*freq*time+ph)*exp(-0.5*0.018*freq*time);\n    y += 0.13*sin(5.01*6.2831*freq*time+ph)*exp(-0.5*0.021*freq*time);\n    y += 0.10*sin(6.01*6.2831*freq*time+ph)*exp(-0.5*0.027*freq*time);\n    y += 0.09*sin(8.01*6.2831*freq*time+ph)*exp(-0.5*0.030*freq*time);\n    y += 0.07*sin(9.01*6.2831*freq*time+ph)*exp(-0.5*0.033*freq*time);\n\n    y += 0.45*y*y*y;\n       \n    y *= 1.0 + 1.0*exp(-50.0*time);\n    y *= clamp( time/0.104, 0.0, 1.0 );\n\n    y *= 2.5-1.5*clamp( log2(freq)/10.0,0.0,1.0);\n\treturn y;\t\n}\n\n// drum\nfloat instr4( float f, float t )\n{\n\tfloat y  = noise( t );\n\t      y *= exp(-20.0*t );\n\treturn 0.7*y;\n\t\t\n}\n\n// music data\nfloat doChannel1( float time );\nfloat doChannel2( float time );\nfloat doChannel3( float time );\nfloat doChannel4( float time );\n\n//----------------------------------------------------------------------------------------\n// sound shader entrypoint\n//\n// input: time in seconds\n// ouput: stereo wave valuie at \"time\"\n//----------------------------------------------------------------------------------------\n\nvec2 mainSound( in int samp, float time )\n{\t\n    vec2 y = vec2(0.0);\n    y += vec2(0.75,0.25)*doChannel1( time ); // main instrument\n    y += vec2(0.25,0.25)*doChannel3( time ); // bass\n    y *= .410 - smoothstep( 55.0, 60.0, time ); // fade out\n\t\n\treturn vec2( y );\n}\n\n//----------------------------------------------------------------------------------------\n\nfloat note2freq( in float x ) {\treturn 470.0*pow( 2.0, (x-72.0)/12.0 ); }\n\n#define D(u,v) b+=float(u);if(t>b){x=b;n=float(v);}\n#define B(u)   b+=float(u);if(t>b){x=b;}\n#define tint 0.0484\n\nfloat doChannel1( float t )\n{\n  float b = 0.0;\n  float n = 0.0;\n  float x = 0.0;\n  t /= tint;\n\n // D( 15,77)\n D( 5,80) D( 55,75)D( 55,77)D( 55,72)D( 55,73)D( 55,80)D( 55,73)D( 55,75)\n D( 55,80) D( 55,75)D( 55,77)D( 55,72)D( 55,73)D( 55,80)D( 55,73)D( 55,75)\n D( 55,80) D( 55,75)D( 55,77)D( 55,72)D( 55,73)D( 55,80)D( 55,73)D( 55,75)\n D( 55,80) D( 55,75)D( 55,77)D( 55,72)D( 55,73)D( 55,80)D( 55,73)D( 55,75)\n     //D( 5,91)D( 15,87)D( 8,89)D( 10,91)\n   \n  return instr1( note2freq( n ), tint*(t-x) );\n}\n\nfloat doChannel3( float t )\n{\n  float b = 0.0;\n  float n = 0.0;\n  float x = 0.0;\n  t /= tint;\n  D( 5,50) D( 55,45)D( 55,47)D( 55,42)D( 55,43)D( 55,50)D( 55,43)D( 55,45)\n  D( 55,50) D( 55,45)D( 55,47)D( 55,42)D( 55,43)D( 55,50)D( 55,43)D( 55,45)\n  D( 55,50) D( 55,45)D( 55,47)D( 55,42)D( 55,43)D( 55,50)D( 55,43)D( 55,45)\n  D( 55,50) D( 55,45)D( 55,47)D( 55,42)D( 55,43)D( 55,50)D( 55,43)D( 55,45)\n  D( 55,50) D( 55,45)D( 55,47)D( 55,42)D( 55,43)D( 55,50)D( 55,43)D( 55,45)\n  D( 55,50) D( 55,45)D( 55,47)D( 55,42)D( 55,43)D( 55,50)D( 55,43)D( 55,45)\n      \n  return instr3( note2freq( n ), tint*(t-x) );\n}\n\n","name":"","description":"","type":"sound"}]}