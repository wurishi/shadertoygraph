{"ver":"0.1","info":{"id":"lfsSzj","date":"1705474092","viewed":42,"name":"Triskelion Portal","username":"thicculus","description":"Ancient portal+ Spinning Triskelions","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["psychedelic","triskelion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette(float t){\n\n    vec3 a = vec3(0.000 ,0.500, 0.5008); \n    vec3 b = vec3(0.791, 0.555, 1.075); \n    vec3 c = vec3(5.147, 0.558, 0.485); \n    vec3 d = vec3(-0.922,-0.255, -0.422);\n    \n    //makes colors pulse inwards/outwards\n    c+= 555. * sin(5.55 * iTime) / 55555555.;\n    \n    return a + b*cos(6.28318*(c*t+d));;\n    \n    }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / (iResolution.y);\n    \n    //Keep track of original unit vector\n    vec2 uv0 = uv;\n\n    //Double unit vector before fract to center image\n    uv = fract(uv0 * 2.2) - 0.5;\n    \n    //kudos to MV10 for this code, adds some rotation to the bkg\n    const float pi_deg = 3.141592 / 180.0;\n    float angle = iTime * 5.0 / (.3 * max(uv0.x,uv0.y)) * pi_deg;\n    float s=sin(angle), c=cos(angle);\n    uv *= mat2(c, -s, s, c);\n\n   \n    float d = length(uv);\n        \n    //Creates a scrolling color pattern\n    vec3 col = palette(length(uv0) + iTime * .333 + max(uv.y/2.,uv0.x) - min(uv.x/2.,uv0.y));\n    \n    d = sin(d*3. * (sin(d * iTime / .3) + 1.3) + iTime) / 9.;\n    d = abs(d);\n    \n    //using exponential function helps colors pop (brights get brighter, darks darker)\n    d = pow(0.015 / d, 3.);\n\n    //Mix colors with b/w circle pattern\n    col*= d;\n\n    // Output to screen\n    fragColor = vec4(col,1.);\n}\n\n","name":"Image","description":"","type":"image"}]}