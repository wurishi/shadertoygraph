{"ver":"0.1","info":{"id":"WtdyDs","date":"1610226083","viewed":123,"name":"Triangle Subdivision 1","username":"mherreshoff","description":"Recursively divides up a triangle at random.  Uses circular transition wipes between the levels.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["triangle","animation","subdivision"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159\n#define hue(v) ( .6 + .6 * cos( 6.3*(v) + vec4(0,23,21,0) ) )\n#define hash21(p) fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453)\n#define hash33(p) fract(sin( (p) * mat3( 127.1,311.7,74.7 , 269.5,183.3,246.1 , 113.5,271.9,124.6) ) *43758.5453123)\n\nbool insideTriangle(vec2 a, vec2 b, vec2 c, vec2 p) {\n    vec2 q = inverse(mat2(b-a, c-a))*(p-a);\n    return q.x >= 0. && q.y >= 0. && q.x+q.y <= 1.;\n}\n\nvec3 colorize (vec3 r) {\n    int c = int(r.z*5.);\n    if (c == 0) return vec3(38, 70, 83)/255.;\n    if (c == 1) return vec3(42, 157, 143)/255.;\n    if (c == 2) return vec3(233, 196, 106)/255.;\n    if (c == 3) return vec3(244, 162, 97)/255.;\n    /* c == 4*/ return vec3(231, 111, 81)/255.;\n}\n\nvec4 render(vec2 U) {\n\n    vec2 R = iResolution.xy, pw=1./R, uv=U*pw, z=1.04*(2.0*U-R)/R.y;\n    \n    vec2 a = vec2(2./sqrt(3.), -1.), b = vec2(0,1), c = vec2(-2./sqrt(3.), -1.);\n    vec2 tmp;\n#define SWAP(_v, _w) {tmp=_v; _v=_w; _w=tmp;}\n\n    if (!insideTriangle(a,b,c,z)) {\n        return vec4(0);\n    }\n    \n    float t = fract(iTime/40.);\n    float iterations = .3+14.*(.5-abs(t-.5));\n    float fill = 1.;\n    vec3 rand = hash33(vec3(float(fill), 0, 0));\n    vec3 prevRand;\n    vec4 oldColor, newColor;\n    for (int i = 0; i < 10; i++) {\n        if (float(i) >= floor(iterations)+1.) continue;\n        if (i == 0) {\n            oldColor = vec4(0);\n            newColor = vec4(colorize(rand), 1.);\n        } else {\n            oldColor = newColor;\n            if (rand.x > .66) {\n                SWAP(a, c);\n            } else if(rand.x > .33){ \n                SWAP(a,b);\n            }\n            float div = .25+.5*rand.y+.1*sin(iTime);\n            vec2 n = mix(b, c, div);\n            fill *= 2.;\n            if (insideTriangle(a,b,n,z)) {\n                c = n; fill+=1.;\n            } else {\n                b = n;\n            }\n            prevRand = rand;\n            rand = hash33(vec3(float(fill), 0, 0));\n            newColor = vec4(colorize(rand), 1.0);\n        }\n    }\n    \n    vec2 center = (a+b+c)/3.;\n    float maxDist = max(\n        distance(a,center),\n        max(distance(b,center), distance(c,center)));\n    float f = distance(z, center) / maxDist;\n    float transition = clamp(0.,1.,.5+3.*(fract(iterations)-.5));\n    if (f < transition) {\n        return newColor;\n    } else {\n        return oldColor;\n    }\n}\nvoid mainImage( out vec4 O, in vec2 U ) {\n    vec2 d = vec2(.5,0);\n    O = (\n        render(U+d.xy)+\n        render(U-d.xy)+\n        render(U+d.yx)+\n        render(U-d.yx)\n    )*.25;\n}","name":"Image","description":"","type":"image"}]}