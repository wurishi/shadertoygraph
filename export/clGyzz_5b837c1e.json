{"ver":"0.1","info":{"id":"clGyzz","date":"1699871459","viewed":47,"name":"Dolphin_Polar_Coordinate","username":"dolphin","description":"Polar Coordinate","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["glsl"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float t;\n\nfloat drawFlowers(vec2 uv, vec2 pos, float scale){\n    uv -= pos;\n    uv /= scale;\n    // convert the cartician coordinate to polar coordinate\n    // st.x: angle\n    // st.y: distance\n    vec2 st = vec2(atan(uv.y, uv.x)+t, length(uv));\n    //st.x = st.x/(2.*3.14159)+.5; // normalize x from [-pi, 0, pi] to [0, 0.5, 1]\n    float func = (abs(sin(t))+.3)*.2*abs(sin(st.x*3.));\n    float c = 1. - smoothstep(0., fwidth(st.y - func), st.y - func);\n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord -.5*iResolution.xy)/iResolution.y;\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    t = iTime;\n    \n    float c1 = drawFlowers(uv, vec2(-.3,0.), .5);\n    float c2 = drawFlowers(uv, vec2(.2,0.1), 1.);\n    float c3 = drawFlowers(uv, vec2(-.1,-.2), .6);\n    \n    // Output to screen\n    fragColor = vec4(vec3(c1+c2+c3)*col,1.0);\n}","name":"Image","description":"","type":"image"}]}