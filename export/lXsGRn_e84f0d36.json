{"ver":"0.1","info":{"id":"lXsGRn","date":"1707080919","viewed":198,"name":"[phreax] neon crystal","username":"phreax","description":"Exploring gaz' neon fractals.\n\nAdd spectral color palette, symmetric fold, rotation, etc.\n\nBased on: https://shadertoy.com/view/tltfD4","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["fractal","neon"],"hasliked":0,"parentid":"4sXGRn","parentname":"Deform - relief tunnel"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Fractal 17_gaz\" by gaz. https://shadertoy.com/view/tltfD4\n\n#define PHI 1.61803\n#define PI 3.141592\n#define SIN(x) (.5+.5*sin(x))\n#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n\n// Zucconis Spectra color (https://www.shadertoy.com/view/cdlSzB)\nvec3 bump3y (vec3 x, vec3 yoffset)\n{\n    vec3 y = 1. - x * x;\n    y = clamp((y-yoffset), vec3(0), vec3(1));\n    return y;\n}\n\n\nvec3 zucc(float x) {\n    x = fract(x);\n    const vec3 c1 = vec3(3.54585104, 2.93225262, 2.41593945);\n    const vec3 x1 = vec3(0.69549072, 0.49228336, 0.27699880);\n    const vec3 y1 = vec3(0.02312639, 0.15225084, 0.52607955);\n    const vec3 c2 = vec3(3.90307140, 3.21182957, 3.96587128);\n    const vec3 x2 = vec3(0.11748627, 0.86755042, 0.66077860);\n    const vec3 y2 = vec3(0.84897130, 0.88445281, 0.73949448);\n    return bump3y(c1 * (x - x1), y1) + bump3y(c2 * (x - x2), y2) ;\n}\n\nmat2 rot(float a) { return mat2(cos(a), -sin(a), sin(a), cos(a)); }\n\n\nvec2 foldSym(vec2 p, float N) {\n    float t = atan(p.x,-p.y);\n    t = mod(t+PI/N,2.0*PI/N)-PI/N;\n    p = length(p.xy)*vec2(cos(t),sin(t));\n    p = abs(p)-0.25;\n    p = abs(p)-0.25;\n    return p;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    vec3 r = iResolution,p,\n         col = vec3(0);\n\n    vec2 uv = (fragCoord-.5*r.xy)/r.y;\n           \n    // motion to center\n    float dm = SIN(-.5*PI+.21*iTime);\n    \n    // line width\n    float lw = mix(.006, 0.0025, dm);\n   \n    // background color\n    col += vec3(0.082,0.106,0.118);\n    col *= mix(.3, 1., (1.3-pow(dot(uv, uv), .5))); // vignette\n  \n   \n    float g = 0., e, l, s;\n    \n    for(float t=0.; t <150.; t++\n    ) {\n        p = vec3(g*uv,g-6.+6.*dm);\n        \n  \n        p = R(p, normalize(vec3(1,3,5)),iTime*.2);\n        p = abs(p) +.1;\n           \n        p.y > p.x ? p = p.yxz : p;\n        p.z > p.x ? p = p.zyx : p;\n        p.y > p.z ? p = p.xzy : p;\n\n        p.xy = foldSym(p.xy, 5.);\n   \n        s=2.;\n        \n        for(int j=0;j++<3;) {\n        \n            s *= l = 2.2/min(dot(p,p), .8);\n            p.x = abs(p.x) - 0.01;\n            p = abs(p) * l - vec3(2. + .4*sin(iTime*.5), .1+.9*SIN(.1*iTime), 5.);\n        }\n            \n   \n        p.xy = foldSym(p.xy, PHI);\n        p.yz *= rot(.38*2.*PI);\n            \n        g += e = length(p.xz)/s;\n        \n        if(e < lw) {\n            col += mix( vec3(1), zucc(g*.8 + .15*iTime), 1.)*.9/t;\n        }\n          \n    }\n   \n    col = pow(col*1.2, vec3(1.1));\n   \n    fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}