{"ver":"0.1","info":{"id":"wdfcRN","date":"1584258496","viewed":317,"name":"MIPmap interaction","username":"rory618","description":"Computing interaction between each pair out of 1024 particles looplsessly using the cubemap.","likes":17,"published":1,"flags":32,"usePreview":0,"tags":["simulation","particles","physics","gravity"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rr","filepath":"/media/a//media/previz/cubemap00.png","previewfilepath":"/media/ap//media/previz/cubemap00.png","type":"cubemap","channel":2,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Draw top 4 particles\n\nbool keyIsDown( float key ) {\n    return texture( iChannel3, vec2(key,0.75) ).x > .5;\n}\n\nvec4 A(int i){\n    return texture(iChannel0, (vec2((i-1)%32,(i-1)/32)+.5)/R.xy);\n}\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    O = vec4(0);\n    vec4 t = texture(iChannel1, I/R.xy);\n    vec2 aD = A(cvt(t.x)).xy-I;\n    vec2 bD = A(cvt(t.y)).xy-I;\n    vec2 cD = A(cvt(t.z)).xy-I;\n    vec2 dD = A(cvt(t.w)).xy-I;\n    O += vec4(exp(-.5*dot(aD,aD)));\n    O += vec4(exp(-.5*dot(bD,bD)));\n    O += vec4(exp(-.5*dot(cD,cD)));\n    O += vec4(exp(-.5*dot(dD,dD)));\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define R iResolution\n\nint IHash(int a){\n\ta = (a ^ 61) ^ (a >> 16);\n\ta = a + (a << 3);\n\ta = a ^ (a >> 4);\n\ta = a * 0x27d4eb2d;\n\ta = a ^ (a >> 15);\n\treturn a;\n}\n\nfloat Hash(int a){\n\treturn float(IHash(a)) / float(0x7FFFFFFF);\n}\nvec4 rand4(int seed){\n    return vec4(Hash(seed^0x34F85A93),\n                Hash(seed^0x85FB93D5),\n                Hash(seed^0x6253DF84),\n                Hash(seed^0x25FC3625));\n}\nvec3 rand3(int seed){\n    return vec3(Hash(seed^0x348CD593),\n                Hash(seed^0x8593FD5),\n                Hash(seed^0x62A5D384));\n}\nvec2 rand2(int seed){\n    return vec2(Hash(seed^0x348C5F93),\n                Hash(seed^0x8593D5BB));\n}\n\n\nvec2 randn(vec2 randuniform){\n    vec2 r = randuniform;\n    r.x = sqrt(-2.*log(1e-9+abs(r.x)));\n    r.y *= 6.28318;\n    r = r.x*vec2(cos(r.y),sin(r.y));\n    return r;\n}\n\nfloat dot2(vec2 x){\n    return dot(x,x);\n}\n\nint cvt(float x){\n    return int(x);\n    //return floatBitsToInt(x) ^ 0x8593D5BB ;\n}\n\nfloat cvt(int x){\n    return float(x);\n    //return intBitsToFloat(x ^ 0x8593D5BB);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dX3Rr","filepath":"/media/a//media/previz/cubemap00.png","previewfilepath":"/media/ap//media/previz/cubemap00.png","type":"cubemap","channel":2,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Simulate newtonian particles\n\nvec4 A(int i){\n    return texture(iChannel0, (vec2((i-1)%32,(i-1)/32)+.5)/R.xy);\n}\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    O = texture(iChannel0, I/R.xy);\n    \n    //O.xy = mod(O.xy,R.xy);\n    vec4 r = rand4(int(I.x) + int(I.y)*2048 + iFrame*2048*2048);\n    if(iFrame<3){\n        O.xy = r.xy*R.xy;\n        O.zw = .25*cos(6.283*(vec2(0,.25)+r.z));\n        \n    }\n    O.zw *= .999;\n    vec4 a = texture(iChannel1, (O.xy)/R.xy);\n    \n    O.zw += randn(r.xy)/1e2;\n    if(iMouse.z>0.){\n        vec2 D = O.xy-iMouse.xy;\n        O.zw -= normalize(D)*(30./(length(D)+.03));\n    }\n    O.xy += O.zw/4.;\n    // Sum together forces with the cubemap mipmap\n    vec2 force = textureLod(iChannel2, vec3(1, 1.-(I.xy * 32.)/512.),5.).xy;\n    O.zw += force/4.;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//track the particles with 4th order voronoi tracking\n\nvec4 A(int i){\n    return texture(iChannel0, (vec2((i-1)%32,(i-1)/32)+.5)/R.xy);\n}\n\n\n\nvoid list_insert(inout ivec4 i, inout vec4 s, int i_, float s_){\n\tivec4 ri;\n    vec4 rs;\n    if(i_ == 0) return;\n    if(any(equal(ivec4(i_),i))) return;\n    if(s_<s[0]) {\n        i = ivec4(i_,i.xyz);\n        s = vec4(s_,s.xyz);\n    } else if(s_<s[1]) {\n        i = ivec4(i.x,i_,i.yz);\n        s = vec4(s.x,s_,s.yz);\n    } else if(s_<s[2]) {\n        i = ivec4(i.xy,i_,i.z);\n        s = vec4(s.xy,s_,s.z);\n    } else if(s_<s[3]) {\n        i = ivec4(i.xyz,i_);\n        s = vec4(s.xyz,s_);\n    }\n}\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    \n    int j = 1+(iFrame%5);j  *= j ;       //using a variable offset each frame prevents most fast moving particles from getting lost\n    \t\t\t\t\t\t\t\t\t\t//letting them get lost looks nicer here\n    \n    #define score(e) dot2(  mod(A(e).xy-I +R.xy/2.,R.xy)-R.xy/2. )\n    O = texture(iChannel1, I/R.xy);\n    vec4 a = texture(iChannel1, fract((I+vec2(j,0))/R.xy));\n    vec4 b = texture(iChannel1, fract((I+vec2(0,j))/R.xy));\n    vec4 c = texture(iChannel1, fract((I-vec2(j,0))/R.xy));\n    vec4 d = texture(iChannel1, fract((I-vec2(0,j))/R.xy));\n    ivec4 i = ivec4(0);\n    ivec4 i0 = ivec4(cvt(O.x),cvt(O.y),cvt(O.z),cvt(O.w));\n    ivec4 ia = ivec4(cvt(a.x),cvt(a.y),cvt(a.z),cvt(a.w));\n    ivec4 ib = ivec4(cvt(b.x),cvt(b.y),cvt(b.z),cvt(b.w));\n    ivec4 ic = ivec4(cvt(c.x),cvt(c.y),cvt(c.z),cvt(c.w));\n    ivec4 id = ivec4(cvt(d.x),cvt(d.y),cvt(d.z),cvt(d.w));\n    vec4 s = vec4(1e9);\n    vec4 s0 = vec4(score(i.x),score(i.y),score(i.z),score(i.w));\n    for(int k = 0; k < 4; k++){\n        list_insert(i, s, i0[k], score(i0[k]));\n        list_insert(i, s, ia[k], score(ia[k]));\n        list_insert(i, s, ib[k], score(ib[k]));\n        list_insert(i, s, ic[k], score(ic[k]));\n        list_insert(i, s, id[k], score(id[k]));\n    }\n    int r = IHash(int(I.x) + int(I.y)*2048 + iFrame*2048*2048);\n    int i_ = 1+r%(1024);\t\t\t\t//Modify max number of particles here\n    list_insert(i, s, i_, score(i_));\n    O = vec4(cvt(i.x),cvt(i.y),cvt(i.z),cvt(i.w));\n    \n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dX3Rr","channel":0}],"code":"//Compute force between particle A and B here\n\nvoid mainCubemap( out vec4 O, in vec2 I, in vec3 rayOri, in vec3 rayDir )\n{\n    if(rayDir.x<abs(rayDir.y)||rayDir.x<abs(rayDir.z)) return;\n    vec2 major = floor(I.yx/32.);\n    vec2 minor = floor(mod(I.yx,vec2(32.)));\n    vec4 A = texelFetch(iChannel0, ivec2(minor),0);\n    vec4 B = texelFetch(iChannel0, ivec2(major),0);\n    vec2 D = A.xy-B.xy;\n    if(length(D)>1.){\n        \n    \t//O.xy = 2e3*normalize(D)/ dot(D,D);\n    \tO.xy = 1e2*D/ dot(D,D);\n    } else {\n        O.xy = vec2(0.);\n    }\n    \n}","name":"Cube A","description":"","type":"cubemap"}]}