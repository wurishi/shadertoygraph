{"ver":"0.1","info":{"id":"cdcSWM","date":"1679872769","viewed":231,"name":"Nested Geometric Series Tiling","username":"SnoopethDuckDuck","description":"I got a bit carried away trying to make it interesting\n\nSimple version:\nhttps://www.shadertoy.com/view/mdtXDN\n\nZoom version:\nhttps://www.shadertoy.com/view/Ds3XWM","likes":21,"published":3,"flags":0,"usePreview":0,"tags":["fractal","grid","tiling","sum","geometricseries"],"hasliked":0,"parentid":"msdSW4","parentname":"Incrementally Spaced Tiling"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Geometric series:\n// sum(i=0, i <= n): r^i\n// https://www.desmos.com/calculator/qcgakoburz\n#define t iTime\n\n// Square distance\nfloat mlength( vec2 a ) { return max(abs(a.x), abs(a.y)); }\n\nvec2 tile( vec2 uv, inout float r, inout float k )\n{ \n    // dim0 is n in sum r^i, i.e. largest index in the sum\n    vec2 dim0 = log(1. - uv) / log(r);\n    dim0 = floor(dim0);\n    \n    // dim is r^n itself, i.e. last term in the sum\n    vec2 dim = pow(vec2(r), dim0);   \n    \n    // a is partial sum up to n\n    vec2 a = (1. - dim) / (1.-r);\n\n    float sc = 1. / (1.-r); \n    uv *= sc;\n\n    float md = min(dim.x, dim.y);\n    \n    // incorrect? some tiles are only half inside parent tiles\n    uv = (uv - a - 0.5 * dim) / md;\n    \n    k *= sc / md;\n    //r *= (0.85+0.15*cos(2.*3.14159*r + 0.6*t));\n    \n    return uv + 0.5;\n}\n\nvoid mainImage( out vec4 O, in vec2 px )\n{\n    vec2 res = iResolution.xy;\n    float k = 1. / res.y;\n    \n    float mx1 = 0.5 * smoothstep(11., 13., t);\n    vec2 uv = abs(px - mx1 * res) / res.y;\n\n    float mx2 = smoothstep(14., 16., t);\n    uv *= mix(1., 0.5 / sqrt(abs(0.2-dot(uv,uv))), mx2);\n    \n    float mx3 = smoothstep(17., 19., t);\n    uv = mix(uv, fract(uv), mx3);\n    \n    float mx4 = smoothstep(20., 21., t);\n    uv = mix(uv, 0.5 * fract(uv + 0.1 * t), mx4);\n    \n    // Must have: 0. <= r < 1.\n    float r = mix(0., 0.5, smoothstep(0., 10., t));\n    \n    for (int i = 0; i < 3; i++)\n        uv = tile(uv, r, k);   \n\n    uv -= 0.5;\n\n    float s = smoothstep(-k, k, 0.5 - mlength(uv));\n    vec3 col = vec3(s);\n    col.rg *= 0.5 + 0.5 * clamp(uv + 0.5, 0., 1.);\n    \n    vec2 ouv = (px - 0.5 * res) / res.y;\n    float fo = 1.- exp(-13. * abs(0.2 - dot(ouv,ouv)));\n    float mx5 = smoothstep(19., 20., t);\n    col *= mix(1., fo, mx5);\n    \n    O = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}