{"ver":"0.1","info":{"id":"Xlyyzh","date":"1534973911","viewed":158,"name":"CellTex(Noise)","username":"TinyTexel","description":"shader","likes":9,"published":1,"flags":32,"usePreview":0,"tags":["shader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// VNoise 3d\n// by TinyTexel\n// Creative Commons Attribution-ShareAlike 4.0 International Public License\n\n/*\n3d value noise using 2 texture lookups\nnoise is built by vertically stacking 2d noise layers with pseudo-random horizontal offsets\ncamera controls via mouse + shift key\n*/\n\n///////////////////////////////////////////////////////////////////////////\n//=======================================================================//\n\nstruct Cam\n{\n\tvec3 Front, Right, Up;\n\tfloat Aspect;\n\tfloat AxisLen;\t\n};\n\nCam NewCam(vec2 ang, float fov, float aspect)\n{\n    Cam cam;\n\n    float sinPhi   = sin(ang.x);\n    float cosPhi   = cos(ang.x);\n    float sinTheta = sin(ang.y);\n    float cosTheta = cos(ang.y);    \n\n    cam.Front = vec3(cosPhi * cosTheta, \n                              sinTheta, \n                     sinPhi * cosTheta);\n\n    cam.Right = vec3(-sinPhi, 0.0, cosPhi);\n    cam.Up    = cross(cam.Right, cam.Front);\n\n    cam.Aspect = aspect;\n    cam.AxisLen = aspect * tan(Pi05 - fov * 0.5);\n\n    return cam;\n}\n\n// tc [-1..1]\nvec3 NewRay(Cam cam, vec2 tc)\n{\n    tc.x *= cam.Aspect;\n\n    vec3 imgPos = cam.Front * cam.AxisLen + (cam.Right * tc.x + cam.Up * tc.y);\n    \n    vec3 dir = normalize(imgPos);\n\n    return dir;\n}\n\n\n/*\nIN:\n\trp\t\t: ray start position\n\trd\t\t: ray direction (normalized)\n\t\n\tsp2\t\t: sphere position\n\tsr2\t\t: sphere radius squared\n\t\nOUT:\n\tt\t\t: distances to intersection points (negative if in backwards direction)\n\nEXAMPLE:\t\n\tvec2 t;\n\tfloat hit = Intersect_Ray_Sphere(pos, dir, vec3(0.0), 1.0, OUT t);\n*/\nfloat Intersect_Ray_Sphere(\nvec3 rp, vec3 rd, \nvec3 sp, float sr2, \nout vec2 t)\n{\t\n\trp -= sp;\n\t\n\tfloat a = dot(rd, rd);\n\tfloat b = 2.0 * dot(rp, rd);\n\tfloat c = dot(rp, rp) - sr2;\n\t\n\tfloat D = b*b - 4.0*a*c;\n\t\n\tif(D < 0.0) return 0.0;\n\t\n\tfloat sqrtD = sqrt(D);\n\t// t = (-b + (c < 0.0 ? sqrtD : -sqrtD)) / a * 0.5;\n\tt = (-b + vec2(-sqrtD, sqrtD)) / a * 0.5;\n\t\n\t// if(start == inside) ...\n\tif(c < 0.0) t.xy = t.yx;\n\n\t// t.x > 0.0 || start == inside ? infront : behind\n\treturn t.x > 0.0 || c < 0.0 ? 1.0 : -1.0;\n}\n\nvec2 CmplxMul(vec2 c0, vec2 c1)\n{\n    return vec2(c0.x*c1.x - c0.y*c1.y, c0.y*c1.x + c0.x*c1.y);\n}\n\nvec2 CmplxMul(vec2 c0, float ang)\n{\n    vec2 c1 = vec2(cos(ang), sin(ang));\n    \n    return vec2(c0.x*c1.x - c0.y*c1.y, c0.y*c1.x + c0.x*c1.y);\n}\n\nfloat lerp(float a, float b, float l) {return a + (b - a) * l;}\n\nfloat SCurveC1(float x) {return x*x*(3.-2.*x);}\nFUNC4_FLOAT(SCurveC1)\n\nfloat SCurveC2(float x){ return ((x * 6.0 - 15.0) * x + 10.0) * x*x*x;}\nFUNC4_FLOAT(SCurveC2)\n\n    \n/////////////////////////////////////////////////////////////////////////////////////////////////////\n//=================================================================================================//\n    \nfloat VoronoiN3(vec3 x, vec3 cells)\n{\n\tvec3 ix = floor(x);\n\tvec3 fx = x - ix;\n\n\tfloat l0 = 16.0;\n\tfloat l1 = 16.0;\n    \n\tvec3 v0;\n\tvec3 v1;\n\n\tfor (float i = 0.0; i < 3.0; ++i)\n\tfor (float j = 0.0; j < 3.0; ++j)\n\tfor (float k = 0.0; k < 3.0; ++k)\n\t{\n\t\tvec3 v = vec3(i, j, k);\n\t\tvec3 c = v - 0.5;\n\t\tvec3 vp = v + ix;\n\n        vp = mod(vp, cells);// mod(x, y) == x - y * floor(x/y)    \n        vp = If(lessThan(vp, vec3(0.0)), cells + vp, vp);\n        \n\t\tfloat s0 = CheapHash(vp * 1.3287 + 0.1338);\n\t\tfloat s1 = CheapHash(vp * 0.9562 + 1.4267);\n\t\tfloat s2 = CheapHash(vp * 0.8422 + 1.0456);\n\n\t\t//float3 off = Sample::Sphere(s0, s1);\n\t\tvec3 off = normalize(vec3(s0, s1, s2));\n\n\t\tc += off * 0.396;\n\n\t\tfloat l = SqrLen(fx - c);\n\n\t\tif (l < l0)\n\t\t{\n\t\t\tl1 = l0;\n\t\t\tv1 = v0;\n\n\t\t\tl0 = l;\n\t\t\tv0 = v;\n\t\t}\n\t\telse\n\t\tif (l < l1)\n\t\t{\n\t\t\tl1 = l;\n\t\t\tv1 = v;\n\t\t}\n\t}\n\n\tfloat res = l1 - l0;\n\n\treturn res;\n}\n//=================================================================================================//\n/////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\nfloat Pattern(vec3 p)\n{\n    p *= 0.25;\n    \n    float v0 = SmplxGNoise(p, 0x71CC3107u);\n    float v1 = SmplxGNoise(p, 0x4283FD40u);\n    float v2 = SmplxGNoise(p, 0xEB51B3DDu);\n      \n    float r = VoronoiN3(vec3(v0, v1, v2) * 2.0, vec3(512.0));\n    \n    //r = mix(0.0, 2.5, r);\n    //r *= r;\n    //r = r > 1.0 ? 1.0 : 0.0;\n    //return ((v0 + v1 + v2) - min(min(v0, v1), v2) - max(max(v0, v1), v2)) * 0.5 + 0.5;\n    return r;\n}\n\nfloat Fbm(vec3 p, vec3 off)\n{\n    const float count = 6.0;\n\n    const float ang = Pi * (3.0 - sqrt(5.0));\n    const vec2 rot = vec2(cos(ang), sin(ang));\n    \n    float res = 1.0;\n    float accu_w = 0.0;\n    float w = 1.0;\n    //float aniS = 1.0;\n    \n    for(float i = 0.0; i < count; ++i)\n    {\n        float v = Pattern(p);\n        \n        res *= mix(1.0-w, 1.0, v);\n        res = 1.0 - res;\n        //res += v * w;\n        \n        accu_w += w;\n        \n        //aniS *= 1.8;        \n        w *= 0.6;\n        p *= 2.0;\n        p.xy = CmplxMul(p.xy, rot);\n        p = p.yzx;\n        p += off;\n    }\n    \n    //res /= accu_w;\n    \n    res = 1.0-res;\n    \n    //res *= res;\n    \n    return res;\n}\n\n\n//#define USE_FBM\n\nfloat EvalSceneCol(\n    vec3 rp, Cam cam, vec2 uv0, bool right)\n{\n    float col = 0.0;\n    vec2 PixelCount = iResolution.xy * vec2(0.5, 1.0);\n    \n    vec2 tex = uv0.xy / PixelCount;\n    vec2 tex21 = tex * 2.0 - vec2(1.0);\n        \n    if(right)\n    {      \n        vec3 rd = NewRay(cam, tex21);\n    \n        vec2 t; vec3 n; vec3 a;\n        float hit = Intersect_Ray_Sphere(rp, rd, vec3(0.0), 1.0, OUT t);\n    \n        \n        if(hit > 0.0)// RIGHT ----------------------------------------------------------------------\n        {\n\t\t\tvec3 p = rp + rd * t.x;           \n            \n            col = Pattern(p * 8.0);\n            \n            #ifdef USE_FBM\n            col = Fbm(p * 12.0, vec3(0.0));\n\t\t\t#endif\n        }\n        else\n        {\n           col = 0.11;           \n        }\n    }\n    else// LEFT ------------------------------------------------------------------------------------\n    { \n        uv0 -= PixelCount * 0.5;\n        uv0 *= 0.04 + length(rp)*0.04;  \n        \n        vec3 uvw;\n        uvw = uv0.x * normalize(vec3(0.5, -1.0, 0.5)) + \n              uv0.y * normalize(vec3(1.0, 0.0, -1.0));\n          \n        //uvw.xy = -uvw.xy;\n        //uvw.xy = vec2(-uvw.y, uvw.x);\n        //uvw.z = -uvw.z;\n        float n = Pattern(uvw * 0.25);\n        \n        #ifdef USE_FBM\n        n = Fbm(vec3(uv0 * .5, 0.), vec3(0.0));\n        #endif\n        \n        col = n;\n    }\n\n    col = pow(clamp01(col), 2.2);\n    return col;\n}\n\n\nvoid mainImage( out vec4 outCol, in vec2 uv0 )\n{\n    vec3 col = vec3(0.0);\n    \n    vec2 uv = uv0.xy - 0.5;\n    \n    vec2 PixelCount = iResolution.xy * vec2(0.5, 1.0);\n    \n    bool right = uv.x > PixelCount.x;\n    if(right) uv.x -= PixelCount.x;\n    \n    \n    vec4 mouseAccu = texelFetch(iChannel0, ivec2(1, 0), 0); \n    vec4 wasdAccu  = texelFetch(iChannel0, ivec2(2, 0), 0); \n\n    vec2 lightAng = vec2(Pi * 0.0, Pi * 0.5);\n    lightAng.x += (wasdAccu.y - wasdAccu.w) * 0.06; \n    lightAng.y += (wasdAccu.x - wasdAccu.z) * 0.04;    \n    \n    \n    vec2 ang = vec2(0.0, 0.0);\n    ang += mouseAccu.xy * 0.008;\n\n    Cam cam = NewCam(ang, Pi * 0.5, PixelCount.x / PixelCount.y);\n    vec3 cpos = -cam.Front * 2.0;\n    cpos = -cam.Front * (exp2(0.6 + mouseAccu.w * 0.02));\n    \n\n\t#ifdef USE_AA\n    float flip = step(0.5, fract(uv.y * 0.5));\n    \n    col += EvalSceneCol(cpos, cam, uv + vec2(abs(flip - 0.5  ), 1./6.), light, right);\n    col += EvalSceneCol(cpos, cam, uv + vec2(abs(flip - 5./6.), 0.5  ), light, right);\n    col += EvalSceneCol(cpos, cam, uv + vec2(abs(flip - 1./6.), 5./6.), light, right);    \n    \n    col /= 3.0;   \n    #else\n    col = vec3(EvalSceneCol(cpos, cam, uv, right));    \n    #endif\n    \n\n    \n    //if(col.x > 1.0) col = vec3(1.0, 0.0, 1.0);\n    //if(col.x >\n    \n\toutCol = vec4(GammaEncode(clamp01(col)), 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 col, in vec2 uv0 )\n{  \n    col = vec4(0.0);\n    \n    vec2 uv = uv0 - 0.5;\n    \n    \n    vec4 iMouseLast     = texelFetch(iChannel0, ivec2(0, 0), 0);\n    vec4 iMouseAccuLast = texelFetch(iChannel0, ivec2(1, 0), 0);\n    vec4 wasdAccuLast   = texelFetch(iChannel0, ivec2(2, 0), 0);\n\n    bool shift = texelFetch(iChannel1, ivec2(16, 0), 0).x != 0.0;\n    \n    float kW = texelFetch(iChannel1, ivec2(0x57, 0), 0).x;\n    float kA = texelFetch(iChannel1, ivec2(0x41, 0), 0).x;\n    float kS = texelFetch(iChannel1, ivec2(0x53, 0), 0).x;\n    float kD = texelFetch(iChannel1, ivec2(0x44, 0), 0).x;\n    \n    vec4 wasdAccu = wasdAccuLast + vec4(kW, kA, kS, kD);\n    \n    vec2 mouseDelta = iMouse.xy - iMouseLast.xy;\n    \n    bool cond0 = iMouse.z > 0.0 && iMouseLast.z > 0.0;\n    vec2 mouseDelta2 = cond0 && !shift ? mouseDelta.xy : vec2(0.0);\n    vec2 mouseDelta3 = cond0 &&  shift ? mouseDelta.xy : vec2(0.0);\n    \n    vec2 iMouseAccu1 = iMouseAccuLast.xy + mouseDelta2;\n    vec2 iMouseAccu2 = iMouseAccuLast.zw + mouseDelta3;\n    \n    if(uv.x == 0.0 && uv.y == 0.0) col = iMouse;  \n    if(uv.x == 1.0 && uv.y == 0.0) col = vec4(iMouseAccu1, iMouseAccu2);\n    if(uv.x == 2.0 && uv.y == 0.0) col = wasdAccu;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\n\n#define Frame float(iFrame)\n#define Time iTime\n//#define PixelCount iResolution.xy\n#define OUT\n\n#define rsqrt inversesqrt\n#define clamp01(x) clamp(x, 0.0, 1.0)\n#define If(cond, resT, resF) mix(resF, resT, cond)\n\n\nconst float Pi = 3.14159265359;\nconst float Pi2 = Pi * 2.0;\nconst float Pi05 = Pi * 0.5;\n\nfloat Pow2(float x) {return x*x;}\nfloat Pow3(float x) {return x*x*x;}\nfloat Pow4(float x) {return Pow2(Pow2(x));}\n\nvec2 AngToVec(float ang)\n{\t\n\treturn vec2(cos(ang), sin(ang));\n}\n\nfloat SqrLen(float v) {return v * v;}\nfloat SqrLen(vec2  v) {return dot(v, v);}\nfloat SqrLen(vec3  v) {return dot(v, v);}\nfloat SqrLen(vec4  v) {return dot(v, v);}\n\n\n#define FUNC4_FLOAT(f)\t\t\t\t\t\t\t\\\nvec2 f(vec2 v) {return vec2(f(v.x ), f(v.y ));}\t\\\nvec3 f(vec3 v) {return vec3(f(v.xy), f(v.z ));}\t\\\nvec4 f(vec4 v) {return vec4(f(v.xy), f(v.zw));}\t\\\n\n#define FUNC4_UINT(f)\t\t\t\t\t\t\t\t\\\nuvec2 f(uvec2 v) {return uvec2(f(v.x ), f(v.y ));}\t\\\nuvec3 f(uvec3 v) {return uvec3(f(v.xy), f(v.z ));}\t\\\nuvec4 f(uvec4 v) {return uvec4(f(v.xy), f(v.zw));}\t\\\n    \nfloat GammaEncode(float x) {return pow(x, 1.0 / 2.2);}\nFUNC4_FLOAT(GammaEncode)\n\nfloat CheapHash(float v)\n{\n    return fract(sin(v) * 43758.5453) * 2.0 - 1.0;\n}\n\nfloat CheapHash(vec2 v)\n{\n\treturn CheapHash(v.y + v.x * 12.9898);\n}\n\nfloat CheapHash(vec3 v)\n{\n\treturn CheapHash(v.xy + v.z * vec2(3.354355, 7.23432));\n}\n\nfloat CheapHash(vec4 v)\n{\n\treturn CheapHash(v.xyz + v.w * vec3(5.08452, 1.3456, 9.235621));\n}\n    \n\n#define FUNC4_UINT(f)\t\t\t\t\t\t\t\t\\\nuvec2 f(uvec2 v) {return uvec2(f(v.x ), f(v.y ));}\t\\\nuvec3 f(uvec3 v) {return uvec3(f(v.xy), f(v.z ));}\t\\\nuvec4 f(uvec4 v) {return uvec4(f(v.xy), f(v.zw));}\t\\\n    \n\n// single iteration of Bob Jenkins' One-At-A-Time hashing algorithm:\n//  http://www.burtleburtle.net/bob/hash/doobs.html\n// suggested by Spatial on stackoverflow:\n//  http://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl\nuint BJXorShift(uint x) \n{\n    x += x << 10u;\n    x ^= x >>  6u;\n    x += x <<  3u;\n    x ^= x >> 11u;\n    x += x << 15u;\n\t\n    return x;\n}\n\nFUNC4_UINT(BJXorShift)    \n    \n\n// xor-shift algorithm by George Marsaglia\n//  https://www.thecodingforums.com/threads/re-rngs-a-super-kiss.704080/\n// suggested by Nathan Reed:\n//  http://www.reedbeta.com/blog/quick-and-easy-gpu-random-numbers-in-d3d11/\nuint GMXorShift(uint x)\n{\n    x ^= x << 13u;\n    x ^= x >> 17u;\n    x ^= x <<  5u;\n    \n    return x;\n}\n\nFUNC4_UINT(GMXorShift) \n    \n// hashing algorithm by Thomas Wang \n//  http://www.burtleburtle.net/bob/hash/integer.html\n// suggested by Nathan Reed:\n//  http://www.reedbeta.com/blog/quick-and-easy-gpu-random-numbers-in-d3d11/\nuint WangHash(uint x)\n{\n    x  = (x ^ 61u) ^ (x >> 16u);\n    x *= 9u;\n    x ^= x >> 4u;\n    x *= 0x27d4eb2du;\n    x ^= x >> 15u;\n    \n    return x;\n}\n\nFUNC4_UINT(WangHash) \n\n//#define Hash BJXorShift\n#define Hash WangHash\n//#define Hash GMXorShift\n\n// \"floatConstruct\"          | renamed to \"ConstructFloat\" here \n// By so-user Spatial        | http://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl\n// used under CC BY-SA 3.0   | https://creativecommons.org/licenses/by-sa/3.0/             \n// reformatted and changed from original to extend interval from [0..1) to [-1..1) \n//-----------------------------------------------------------------------------------------\n// Constructs a float within interval [-1..1) using the low 23 bits + msb of an uint.\n// All zeroes yields -1.0, all ones yields the next smallest representable value below 1.0. \nfloat ConstructFloat(uint m) \n{\n\tfloat flt = uintBitsToFloat(m & 0x007FFFFFu | 0x3F800000u);// [1..2)\n    float sub = (m >> 31u) == 0u ? 2.0 : 1.0;\n    \n    return flt - sub;// [-1..1)             \n}\n\nvec2 ConstructFloat(uvec2 m) { return vec2(ConstructFloat(m.x), ConstructFloat(m.y)); }\nvec3 ConstructFloat(uvec3 m) { return vec3(ConstructFloat(m.xy), ConstructFloat(m.z)); }\nvec4 ConstructFloat(uvec4 m) { return vec4(ConstructFloat(m.xyz), ConstructFloat(m.w)); }\n\n\nuint Hash(uint  v, uint  r) { return Hash(v ^ r); }\nuint Hash(uvec2 v, uvec2 r) { return Hash(Hash(v.x , r.x ) ^ (v.y ^ r.y)); }\nuint Hash(uvec3 v, uvec3 r) { return Hash(Hash(v.xy, r.xy) ^ (v.z ^ r.z)); }\nuint Hash(uvec4 v, uvec4 r) { return Hash(Hash(v.xy, r.xy) ^ Hash(v.zw, r.zw)); }\n\n// Pseudo-random float value in interval [-1:1).\nfloat Hash(float v, uint  r) { return ConstructFloat(Hash(floatBitsToUint(v), r)); }\nfloat Hash(vec2  v, uvec2 r) { return ConstructFloat(Hash(floatBitsToUint(v), r)); }\nfloat Hash(vec3  v, uvec3 r) { return ConstructFloat(Hash(floatBitsToUint(v), r)); }\nfloat Hash(vec4  v, uvec4 r) { return ConstructFloat(Hash(floatBitsToUint(v), r)); }\n\n\nfloat HashFlt(uint   v, uint  r) { return ConstructFloat(Hash(v, r)); }\nfloat HashFlt(uvec2  v, uvec2 r) { return ConstructFloat(Hash(v, r)); }\nfloat HashFlt(uvec3  v, uvec3 r) { return ConstructFloat(Hash(v, r)); }\nfloat HashFlt(uvec4  v, uvec4 r) { return ConstructFloat(Hash(v, r)); }\n\nuint HashUInt(float v, uint  r) { return Hash(floatBitsToUint(v), r); }\nuint HashUInt(vec2  v, uvec2 r) { return Hash(floatBitsToUint(v), r); }\nuint HashUInt(vec3  v, uvec3 r) { return Hash(floatBitsToUint(v), r); }\nuint HashUInt(vec4  v, uvec4 r) { return Hash(floatBitsToUint(v), r); }\n\n//=======================================================================//\n///////////////////////////////////////////////////////////////////////////\n\n\n// s0 [-1..1], s1 [-1..1]\n// samples spherical cap for s1 [cosAng..1]\n// samples hemisphere if s1 [0..1]\nvec3 Sample_Sphere(float s0, float s1)\n{\n    float ang = Pi * s0;\n    float s1p = sqrt(clamp01(1.0 - s1*s1));\n    \n    return vec3(cos(ang) * s1p, \n                           s1 , \n                sin(ang) * s1p);\n}\n\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////\n//=================================================================================================//\n#define LOOP(head0, head1, head2, head3, body) {head0 body} {head1 body} {head2 body} {head3 body}\n\n// https://en.wikipedia.org/wiki/Simplex_noise\nfloat SmplxGNoise(vec3 p, uint seed)\n{\n    // const float n = 3.0;\n    const float F = 1.0 / 3.0;// (sqrt(n + 1.0) - 1.0) / n;\n    const float G = 1.0 / 6.0;// (1.0 - rsqrt(n + 1.0)) / n;\n    \n    vec3 p2 = p + (p.x + p.y + p.z) * F;\n    \n    vec3 ip = floor(p2);\n    vec3 fp = p2 - ip;\n    \n\n    float res = 0.0;\n\n    vec3 vo1, vo2;\n    {\n        float xz = step(fp.z, fp.x); \n        float yz = step(fp.z, fp.y); \n        \n        if(fp.x > fp.y)\n        {\n            vo1 = vec3(xz, 0., xz);          \n            vo2 = vec3(1., yz, yz);\n        }\n        else\n        {\n            vo1 = vec3(0., yz, yz);\n            vo2 = vec3(xz, 1., xz);\n        }\n        \n        vo1.z = 1.0 - vo1.z;\n        vo2.z = 1.0 - vo2.z;        \n    }\n\n    \n    uvec3 vSeed = uvec3(0xED347D40u, 0x90F2E7EAu, 0x432905BDu) ^ uvec3(seed);\n    \n    LOOP(vec3 vert = vec3(0.0, 0.0, 0.0);, \n         vec3 vert = vo1;,\n         vec3 vert = vo2;,          \n         vec3 vert = vec3(1.0, 1.0, 1.0);,\n        \n         #if 1\n         uint vHash = HashUInt(vert + ip, vSeed);\n\n         float h0 = HashFlt(vHash, 0xE2EE2C90u);\n         float h1 = HashFlt(vHash, 0x806C2B4Fu);\n         \n         vec3 g = Sample_Sphere(h0, h1);\n\n         #else\n         const float texDim = 64.0;\n    \t const vec2 prime = vec2(53.0, 41.0);\n    \t const float txlDim = 1.0 / texDim;\n         \n         vec3 vp = vert + ip;\n         \n         #if 1\n         vec3 vHash = textureLod(iChannel1, (vp.xz + vp.y * prime + 0.5) * txlDim, 0.0).rgb * 2.0 - 1.0; \n\t\t #else\n         vHash = vec3(PrimHash128(vp.xyz), \n                      PrimHash128(vp.yzx), \n                      PrimHash128(vp.zxy));\n         #endif\n         \n         #if 0\n         vec3 g = vHash * rsqrt(3.0);\n         #elif 1\n         vec3 g = normalize(vHash);\n         #else\n         vec3 g = Sample_Sphere(vHash.x, vHash.y);\n         #endif\n         #endif\n         \n\n        vec3 vec  = fp - vert;\n             vec -= (vec.x + vec.y + vec.z) * G;\n         \n        float w = Pow3(clamp01(1.0 - 2.0 * SqrLen(vec)));\n              //w = SCurveC2(clamp01(1.0 - sqrt(2.0)*length(vec)));        \n        \n        float v = dot(vec, g);\n        \n        res += w * v;\n\t)\n\n    //res *= 3.904;//SCurveC2\n    res *= 4.738;//Pow3\n    //res *= 6.729;//Pow4\n\n    return res;\n}\n","name":"Common","description":"","type":"common"}]}