{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"/* Lava 2.0 by Viktor Heisenberger, TheVico87, 2013.09.28.\n *\n * Uses 3d simplex noise by Nikita Miropolskiy, nikat/2013\n * (https://www.shadertoy.com/view/XsX3zB)\n *\n * This work is licensed under a \n * Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n * http://creativecommons.org/licenses/by-nc-sa/3.0/\n *  - You must attribute the work in the source code \n *  - You may not use this work for commercial purposes.\n *  - You may distribute a derivative work only under the same license.\n */\n\n/* discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n/* skew constants for 3d simplex functions */\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\n/* 3d simplex noise */\nfloat simplex3d(vec3 p) {\n\t /* 1. find current tetrahedron T and it's four vertices */\n\t /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n\t /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n\t \n\t /* calculate s and x */\n\t vec3 s = floor(p + dot(p, vec3(F3)));\n\t vec3 x = p - s + dot(s, vec3(G3));\n\t \n\t /* calculate i1 and i2 */\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t /* x1, x2, x3 */\n\t vec3 x1 = x - i1 + G3;\n\t vec3 x2 = x - i2 + 2.0*G3;\n\t vec3 x3 = x - 1.0 + 3.0*G3;\n\t \n\t /* 2. find four surflets and store them in d */\n\t vec4 w, d;\n\t \n\t /* calculate surflet weights */\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n\t w = max(0.6 - w, 0.0);\n\t \n\t /* calculate surflet components */\n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.0), x3);\n\t \n\t /* multiply d by w^4 */\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t /* 3. return the sum of the four surflets */\n\t return dot(d, vec4(52.0));\n}\n\nfloat fractal(vec3 p) {\n\tvec3 p2 = vec3(0.1 * p.xy, 0.1 * p.z);\n\n\treturn\t0.333333 * simplex3d(3.0 * p2) +\n\t\t\t0.111111 * simplex3d(9.0 * p2) +\n\t\t\t0.037037 * simplex3d(27.0 * p2);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tconst vec3 color1 = vec3(0.9,0.2,0.2);\n\tconst vec3 color2 = vec3(1.0,1.0,0.0);\n\tconst vec3 crustColor = vec3(0.478431, 0.427451, 0.396078) * 0.5;\n\t\n\tfloat iTime = iTime * 0.3;\n\t\n\tvec2 p = fragCoord.xy / iResolution.xy;\n\tvec3 p3 = vec3(p, iTime*0.025);\n\tvec3 p3_2 = vec3(p, iTime*0.045 + 5.0);\n\t\n\tfloat value;\n\t\n\n\tvalue = simplex3d(p3*28.0);\n\tvalue = 0.5 + 0.5*value;\n\tfloat crustValue = fractal(p3*28.0);\n\tcrustValue *= 5.0;\n\tcrustValue = clamp(pow(crustValue, 4.0), 0.0, 1.0);\n\n\tfragColor = vec4(\n\t\t(color1 + (color2 - color1) * value) * (1.0-crustValue) + crustColor * crustValue,\n\t\t1.0);\n\n\treturn;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MsX3WX","date":"1383303585","viewed":1084,"name":"Lava 2.0","username":"TheVico87","description":"Swirling lava viewed from top","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["procedural","noise","lava"],"hasliked":0,"parentid":"","parentname":""}}