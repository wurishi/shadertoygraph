{"ver":"0.1","info":{"id":"7ld3WB","date":"1641479774","viewed":138,"name":"Star field too much bloom","username":"ZachSaucier","description":"Inspired by: https://twitter.com/ericaofanderson/status/1457411537128284166\n\nFork of: https://www.shadertoy.com/view/4dcBRN\nBloom from: https://www.shadertoy.com/view/lsBfRc","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["domainrepetition"],"hasliked":0,"parentid":"7lt3DS","parentname":"Star field - with bloom"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define colorRange 24.0\n\n#define origColorSharpness 2.8\n\nvec3 jodieReinhardTonemap(vec3 c){\n    float l = dot(c, vec3(0.2126, 0.7152, 0.0722));\n    vec3 tc = c / (c + 1.0);\n\n    return mix(c / (l + 1.0), tc, tc);\n}\n\nvec3 bloomTile(float lod, vec2 offset, vec2 uv){\n    return texture(iChannel1, uv * exp2(-lod) + offset).rgb;\n}\n\nvec3 getBloom(vec2 uv){\n\n    vec3 blur = vec3(0.0);\n\n    blur = pow(bloomTile(2., vec2(0.0,0.0), uv),vec3(2.2))       \t   \t+ blur;\n    blur = pow(bloomTile(3., vec2(0.3,0.0), uv),vec3(2.2)) * 1.3        + blur;\n    blur = pow(bloomTile(4., vec2(0.0,0.3), uv),vec3(2.2)) * 1.6        + blur;\n    blur = pow(bloomTile(5., vec2(0.1,0.3), uv),vec3(2.2)) * 1.9 \t   \t+ blur;\n    blur = pow(bloomTile(6., vec2(0.2,0.3), uv),vec3(2.2)) * 2.2 \t   \t+ blur;\n\n    return blur * colorRange;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 color = pow(texture(iChannel0, uv).rgb * colorRange, vec3(origColorSharpness));\n    color = pow(color, vec3(origColorSharpness));\n    color += pow(getBloom(uv), vec3(origColorSharpness));\n    color = pow(color, vec3(1.0 / origColorSharpness));\n    \n    color = jodieReinhardTonemap(color);\n    \n\tfragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define RAYMARCH_STEPS 70\n#define EPS 0.001\n#define GLOW 0.5\n\n#define colorRange 24.0\n\n#define bloomStrength 2.0\n\nfloat rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(vec2 p){\n\tvec2 ip = floor(p);\n\tvec2 u = fract(p);\n\tu = u*u*(3.0-2.0*u);\n\t\n\tfloat res = mix(\n\t\tmix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),\n\t\tmix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);\n\treturn res*res;\n}\n\n\nvec2 pMod2(inout vec2 p, float size){\n\tfloat halfsize = size*0.5;\n\tvec2 c = floor((p+halfsize)/size);\n\tp = mod(p+halfsize,size)-halfsize;\n\treturn c;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat map(vec3 p){\n    vec2 index = pMod2(p.xz, 5.0);\n    float valNoise = noise(index);\n    p.y -= valNoise * 14.0;\n    float pulse = (sin(iTime * length(index) / 4.) + 1.0) / 4.0;\n\treturn sdSphere(p, valNoise + 0.2 + pulse);\n}\n\nfloat raymarch(vec3 ro, vec3 rd){\n\tfloat t = 0.0;\n    for(int i = 0; i < RAYMARCH_STEPS; ++i){\n        vec3 p = ro + rd * t; \n    \tfloat d = map(p);\n        \n        if (d < EPS){\n        \tbreak;\n        }\n        \n        t += min(d, 2.5);\n    }\n    return t;\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, in float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy = fragCoord.xy / iResolution.xy;\n\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // Ray Origin - Rotation speed & direction\n    vec3 ro = vec3(12.0*cos(iTime / 3.0), 3.0, 3.0);\n    // Look at target\n\tvec3 ta = vec3(0.0,4.0, 0.0);\n\n    mat3 cam = setCamera(ro, ta, 0.0);\n    \n    // Ray direction\n    vec3 rd = cam * normalize(vec3(uv,2.0));\n    \n    // Get distance to point\n    float dist = raymarch(ro, rd);\n    \n    // Set fog intensity based on distance\n    float fog = 1.0 / (1.0 + dist * dist * 0.001);\n    \n    // Color the spheres based on fog intensity\n    vec3 stars = fog * vec3(10.0, 27.0, 30.0) * bloomStrength;\n    \n    // Background\n    vec3 topColor = vec3(0., 0., 0.);\n    vec3 midColor = vec3(0.13, 0.21, 0.62);\n    vec3 botColor = vec3(0.03, 0.04, 0.14);\n    float h = 0.4; // Adjust position of midColor\n    vec3 gradient = mix(mix(botColor, midColor, xy.y/h), mix(midColor, topColor, (xy.y - h)/(1.0 - h)), step(h, xy.y));\n    \n    vec3 color = gradient + stars;\n    \n    // Process for bloom effect\n    fragColor = vec4(pow(color, vec3(1.0 / 2.2)) / colorRange, 1.0);\n    \n    \n    //fragColor = vec4(color, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// From https://www.shadertoy.com/view/lsBfRc\nvec3 makeBloom(float lod, vec2 offset, vec2 bCoord){\n    \n    vec2 pixelSize = 1.0 / vec2(iResolution.x, iResolution.y);\n\n    offset += pixelSize;\n\n    float lodFactor = exp2(lod);\n\n    vec3 bloom = vec3(0.0);\n    vec2 scale = lodFactor * pixelSize;\n\n    vec2 coord = (bCoord.xy-offset)*lodFactor;\n    float totalWeight = 0.0;\n\n    if (any(greaterThanEqual(abs(coord - 0.5), scale + 0.5)))\n        return vec3(0.0);\n\n    for (int i = -5; i < 5; i++) {\n        for (int j = -5; j < 5; j++) {\n\n            float wg = pow(1.0-length(vec2(i,j)) * 0.125,6.0);\n\n            bloom = pow(texture(iChannel0,vec2(i,j) * scale + lodFactor * pixelSize + coord, lod).rgb,vec3(2.2))*wg + bloom;\n            totalWeight += wg;\n\n        }\n    }\n\n    bloom /= totalWeight;\n\n    return bloom;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n\tvec3 blur = makeBloom(1.,vec2(0.0,0.0), uv);\n\t\tblur += makeBloom(2.,vec2(0.3,0.0), uv);\n\t\tblur += makeBloom(3.,vec2(0.0,0.3), uv);\n\t\tblur += makeBloom(4.,vec2(0.1,0.3), uv);\n\t\tblur += makeBloom(5.,vec2(0.2,0.3), uv);\n\n    fragColor = vec4(pow(blur, vec3(1.0 / 2.2)),1.0);\n}\n","name":"Buffer B","description":"","type":"buffer"}]}