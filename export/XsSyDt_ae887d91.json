{"ver":"0.1","info":{"id":"XsSyDt","date":"1494273634","viewed":314,"name":"Iso Ritual","username":"leon","description":"Raymarching experiment about octahedron","likes":20,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// training for modeling shapes\n// using koltes code as base https://www.shadertoy.com/view/XdByD3\n// using iq articles\n\n#define TAU 6.2831853\n#define t iTime\nmat2 rz2(float a){float c=cos(a),s=sin(a);return mat2(c,s,-s,c);}\n\nfloat sphere (vec3 p, float r) { return length(p)-r; }\nfloat cube (vec3 p, vec3 r) { return length(max(abs(p)-r,0.)); }\nfloat iso (vec3 p, float r) { return dot(p, normalize(sign(p)))-r; }\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\nfloat smin (float a, float b, float r)\n{\n    float h = clamp(.5+.5*(b-a)/r,0.,1.);\n\treturn mix(b,a,h) - r*h*(1.-h);\n}\n\nfloat map1 (vec3 p)\n{\n    float size = 1.;\n    p += vec3(0,-1.5,0);\n    float od = length(p);\n    p.xy *= rz2(t*.2);\n    p.yz *= rz2(t*.3);\n    p.xz *= rz2(t*.4);\n    float shape1 = max(-sphere(p,size+.1), iso(p,size));\n    p.xy *= rz2(t*1.2);\n    p.yz *= rz2(t*1.5);\n    p.xz *= rz2(t*2.);   \n    float shape2 = max(length(p)-size-.1, -iso(p,size));\n\treturn min(shape1, shape2);\n}\n\nfloat map2 (vec3 p)\n{\n    vec3 pr = p;\n    float count = TAU/5.;\n    float a = atan(pr.z,pr.x)+count*.5-t*.3;\n    float l = length(pr.xz)-.5;\n    a = mod(a,count)-count*.5;\n    pr.xz = vec2(cos(a),sin(a))*l;\n    float base = max(-sdBox(pr,vec3(1.7)),cube(pr,vec3(2.,1,.1)));\n    return smin(base, iso(pr-vec3(1.85,1,0),0.2),0.1);\n}\n\nfloat ripple (vec3 p)\n{\n    float a = atan(p.z,p.x);\n    float fade = 1.-smoothstep(1.,3.5,length(p));\n    float base = max(0.,p.y+(sin(a*16.+sin(length(p))*16.+t*2.))*.05*fade);\n    return max(base, -sphere(p,1.2));\n}\n\nfloat scene (vec3 p)\n{\n    float d = smin( map2(p), ripple(p), .9 );\n    d = max(sphere( p, 2.9 ), d);\n    d = min(map1( p ), d);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy-.5*iResolution.xy)/iResolution.y;\n    vec3 ro = vec3(uv,-4)+vec3(0,1,0), rd = vec3(uv, 1.), mp = ro;\n    int i = 0;\n    const int count = 50;\n    fragColor = vec4(1);\n    for (;i<count;++i) {\n        float md = scene(mp);\n        if (md<0.0001) {\n            break;\n        }\n        mp += rd*md*.5;\n    }\n    float r = float(i)/float(count);\n\tfragColor *= smoothstep(0.5,3.,length(mp));\n\tfragColor *= smoothstep(0.0,7.,length(mp-ro));\n    fragColor *= r;\n  \t//fragColor = 1.-fragColor;\n}","name":"Image","description":"","type":"image"}]}