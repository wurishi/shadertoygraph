{"ver":"0.1","info":{"id":"X3sfRS","date":"1728548850","viewed":3,"name":"raymarch voxel demo","username":"joshshin","description":"basic raymarched voxel scene. prototype for my first game engine. pls lmk if you see optimizations! would love feedback!","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarched","voxel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float f[1000] = float[1000](.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.1,.0,.0,.1,.0,.0,.0,\n.0,.0,.1,.0,.0,.0,.0,.1,.0,.0,\n.0,.1,.0,.0,.0,.0,.0,.0,.1,.0,\n.1,.0,.0,.0,.0,.0,.0,.0,.0,.1,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.1,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.1,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.1,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.1,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.1,.0,.0,.1,.0,.0,.0,\n.0,.0,.1,.0,.0,.0,.0,.1,.0,.0,\n.0,.1,.0,.0,.0,.0,.0,.0,.1,.0,\n.1,.0,.0,.0,.0,.0,.0,.0,.0,.1,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,\n.0,.0,.0,.0,.0,.0,.0,.0,.0,.0\n);\n\nfloat pi = 3.1415926535897932384626433832795;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float fovScale = 2.0;\n    float fovScale2 = 4.0;\n    \n    float x = sin(uv.x * pi / fovScale - pi / fovScale2) * cos(uv.y * pi / fovScale - pi / fovScale2);\n    float y = sin(uv.y * pi / fovScale - pi / fovScale2) * cos(uv.x * pi / fovScale - pi / fovScale2);\n    float z = cos(uv.x * pi / fovScale - pi / fovScale2) * cos(uv.y * pi / fovScale - pi / fovScale2);\n\n\n    vec3 col = vec3(0, 0, 0);\n    float ix = 5.0;\n    float iy = 5.0;\n    float iz = 0.0;\n    \n    for (int i = 0; i < 20; i++){\n        \n        float diffx = x > 0.0 ? 1.0 + floor(ix) - ix : 1.0 - ceil(ix) + ix;\n        float diffy = y > 0.0 ? 1.0 + floor(iy) - iy : 1.0 - ceil(iy) + iy;\n        float diffz = z > 0.0 ? 1.0 + floor(iz) - iz : 1.0 - ceil(iz) + iz;\n\n        float wx = abs(diffx / x);\n        float wy = abs(diffy / y);\n        float wz = abs(diffz / z);\n        \n        float minw = wx;\n        if (wy < minw) {\n            minw = wy;\n        }\n        if (wz < minw) {\n            minw = wz;\n        }\n        \n        ix += x * minw;\n        iy += y * minw;\n        iz += z * minw;\n        if (abs(ix - round(ix)) < .01) {\n            ix = round(ix);\n        }\n        if (abs(iy - round(iy)) < .01) {\n            iy = round(iy);\n        }\n        if (abs(iz - round(iz)) < .01) {\n            iz = round(iz);\n        }\n                \n        if (ix < 0.0 || ix > 10.0) {\n            break;\n        }\n        if (iy < 0.0 || iy > 10.0) {\n            break;\n        }\n        if (iz < 0.0 || iz > 10.0) {\n            break;\n        }\n\n        int ycoord = int(floor(iy));\n        int zcoord = int(floor(iz));\n        int xcoord = int(floor(ix));\n        \n        if (ix == round(ix) && x < 0.0) {\n            xcoord--;\n        }\n        if (iy == round(iy) && y < 0.0) {\n            ycoord--;\n        }\n        \n\n        if (f[ycoord * 100 + zcoord * 10 + xcoord] > 0.0) {\n            if (iz == round(iz) && ix == round(ix) || iz == round(iz) && iy == round(iy) || ix == round(ix) && iy == round(iy)) {\n                break;\n            }\n            col = vec3(x, y, z);\n            break;\n        }\n    }\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}