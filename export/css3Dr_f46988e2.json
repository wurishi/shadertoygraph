{"ver":"0.1","info":{"id":"css3Dr","date":"1665985339","viewed":72,"name":"derivative CIF2","username":"KingHashish","description":"numerically evaluated Cauchy integral formula along a circular contour on function sin(z) showing fractional derivative -- a gradual fractional phase shift.  exp(z) is invariant to differentiation.  The order of poles increases with order of differentiati","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["math","complex"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265358979323\n#define T .05\n//#define ZOOM 200.\n#define ZOOM (0.15*iResolution.y)\n\n#define tt ((iTime)/10.)\n\n\n#define hue(a) (.6 + .6*cos(2.*PI*a + vec3(0,-2.*PI/3.,2.*PI/3.)))\n#define cmul(z1, z2) (mat2(z1, -z1.y, z1.x)*z2)\n#define cdiv(z1, z2) (z1*mat2(z2, -z2.y, z2.x)/dot(z2, z2))\n#define clog(z) vec2(0.5*log(dot(z,z)), atan(z.y, z.x))\n\nvec2 cexp(vec2 z, vec2 c)\n{\n    float argz, m, a;\n    float lnz = dot(z,z);\n    \n    if (lnz == 0.) return vec2(0., 0.);\n    else {\n        lnz = 0.5*log(lnz);\n        argz = atan(z.y, z.x);\n        \n        m = exp(c.x*lnz - c.y*argz);\n        a = c.x*argz + c.y*lnz;\n        \n        return m*vec2(cos(a), sin(a));\n    }\n}\n\n\nvec3 hrgb(vec2 w)\n{\n    \n    float m = length(w);\n    float a = (PI + atan(w.y, w.x))/(2.0*PI);\n    \n    //m = log(1. + 100.*m);\n\n    float mm = fract(m);\n    float p = fract(mod(a, 1.0/16.0));\n\n    vec3 c;\n\n    c.r =  0.5 - 0.5*sin(2.0*PI*a - PI/2.0);\n    c.g = (0.5 + 0.5*sin(2.0*PI*a*1.5 - PI/2.0)) * float(a < 0.66);\n    c.b = (0.5 + 0.5*sin(2.0*PI*a*1.5 + PI/2.0)) * float(a > 0.33);\n    \n    //c = 0.5*(c + hue(a));\n    \n    c -= 0.3*mm + 2.*p;\n    \n    \n    if (//length(w) + T/2. > 1. &&\n        (fract(w.x) < T || fract(-w.x) < T ||\n         fract(w.y) < T || fract(-w.y) < T)) c -= 0.4;\n    \n    return c;\n}\n\nvec2 f(vec2 z, int n)\n{\n    vec2 w, p, q, g;\n\n    //w = cexp( vec2(exp(1.), 0.), z );\n    \n    //w = z - vec2(0.5, 0.);\n    //w = cdiv( w, (z - vec2(-0.35,-0.35)) );\n    //w = cdiv( w, (z - vec2(-0.35, 0.35)) );\n    \n    //w = cmul( (z - vec2(-0.35,-0.35)),\n    //          (z - vec2(-0.35, 0.35)) );\n    //w = cdiv( w, (z - vec2(0.5, 0.)));\n    \n    float m = 1. + tt;\n    \n    float r = 3.5;\n    \n    w = vec2(0., 0.);\n    \n    for (int i=0; i<n; i++) {\n        //C: z(t)\n        p = vec2(r*cos(float(i)*2.*PI/float(n)), \n                 r*sin(float(i)*2.*PI/float(n)));\n        \n        //f(z(t)) \n        //q = cmul(p, p); //=z^3\n        //q = cmul(p, q);\n        \n        //q = sin(p)\n        q.x = sin(p.x)*cosh(p.y);\n        q.y = cos(p.x)*sinh(p.y);\n        \n        //\n        //q = cexp(vec2(exp(1.), 0.), p);\n        \n        \n        //f(z)/(z - z0)^(m + 1)\n        g = p - z;\n        g = cexp(g, vec2(m + 1., 0.));\n        q = cdiv(q, g);\n        \n        //dz/dt\n        q = cmul(q, \n            vec2(-r*sin(float(i)*2.*PI/float(n)), \n                  r*cos(float(i)*2.*PI/float(n))));\n    \n        w += q;\n    }\n    //dt\n    w *= 2.*PI/float(n);\n    \n    //1/(2 pi i)\n    w = cmul(w, vec2(0., -1./(2.*PI)) );\n   \n    //m!\n    float gamma = sqrt(2.*PI*m)*pow(m/exp(1.), m);\n    w *= gamma;\n    \n    \n    return w;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 z, w, w1, w2, w3, w4;\n    int n = 10;\n    \n    z = fragCoord - iResolution.xy/2.;\n\n    //if (iMouse.xy != vec2(0., 0.)) //to center at origin\n    //    z -= iMouse.xy - iResolution.xy/2.;\n    \n    \n    //z /= ZOOM;\n    \n    \n    \n    //z -= vec2(0.5, 0.)*ZOOM;\n    \n    //w  = f( z/ZOOM, n );\n    //fragColor = vec4(hrgb(w), 1.0);\n    \n    \n    w1 = f( (z + vec2(-.25,-.25))/ZOOM, n );\n    w2 = f( (z + vec2(-.25, .25))/ZOOM, n );\n    w3 = f( (z + vec2( .25,-.25))/ZOOM, n );\n    w4 = f( (z + vec2( .25, .25))/ZOOM, n );\n    \n    \n    fragColor = vec4(0.2*(hrgb(w) +\n                          hrgb(w1) + hrgb(w2) + \n                          hrgb(w3) + hrgb(w4)), 1.0);\n                          \n}","name":"Image","description":"","type":"image"}]}