{"ver":"0.1","info":{"id":"XscSzM","date":"1458167026","viewed":180,"name":"The apple","username":"revers","description":"This shader is my attempt to do something similar to iq's [url=https://www.shadertoy.com/view/XdfGRn]Apple[/url]. Modeling and texturing I've done by myself. Raymarching, lighting and noise are taken from iq's shaders.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","apple"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * Created by Kamil Kolaczynski (revers) - 2016\n *\n * Licensed under Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n *\n * This shader is my attemp to do something similar to iq's \"Apple\" ( https://www.shadertoy.com/view/XdfGRn ).\n * Modeling and texturing I've done by myself. (Of course in less optimal way than iq's original \"Apple\") \n * \n * Raymarching and lighting is taken from iq's \"Raymarching - Primitives\" ( https://www.shadertoy.com/view/Xds3zN ).\n * Noise and hash functions are also taken from some iq shader (don't rembember which).\n * Thanks for sharing your great work, iq!\n * \n * The shader was created and exported from Synthclipse (http://synthclipse.sourceforge.net/)\n */\n\n#define ANTI_ALIASING\n#define BUMP_MAPPING\n\nconst vec3 LightDir = vec3(-0.4218155, -0.73880583, -0.5255833);\nconst float MarchDumping = 0.6103;\nconst float Far = 20.0;\nconst int MaxSteps = 128;\nconst float WoodPower = 3.2411995;\nconst float FOV = 0.4;\nconst float AppleRadius = 1.2858001;\nconst float BumpFactor = 0.049060002;\n\n#define PI 3.141592\n\n#define M_NONE -1.0\n#define M_APPLE 1.0\n#define M_FLOOR 2.0\n\nfloat hash(float h) {\n\treturn fract(sin(h) * 43758.5453123);\n}\n\nfloat hash(vec2 n) {\n\treturn fract(sin(dot(n, vec2(1.0, 113.0))) * 43758.5453123);\n}\n\nfloat noise(vec2 p) {\n\tvec2 i = floor(p);\n\tvec2 f = fract(p);\n\n\tvec2 u = f * f * (3.0 - 2.0 * f);\n\n\tvec2 a = vec2(0.0, 0.0);\n\tvec2 b = vec2(1.0, 0.0);\n\tvec2 c = vec2(0.0, 1.0);\n\tvec2 d = vec2(1.0, 1.0);\n\n\tfloat n0 = hash(i + a);\n\tfloat n1 = hash(i + b);\n\tfloat n2 = hash(i + c);\n\tfloat n3 = hash(i + d);\n\n\tfloat ix0 = mix(n0, n1, u.x);\n\tfloat ix1 = mix(n2, n3, u.x);\n\n\treturn mix(ix0, ix1, u.y);\n}\n\nfloat noise(vec3 x) {\n\tvec3 p = floor(x);\n\tvec3 f = fract(x);\n\tf = f * f * (3.0 - 2.0 * f);\n\n\tfloat n = p.x + p.y * 157.0 + 113.0 * p.z;\n\treturn mix(\n\t\t\tmix(mix(hash(n + 0.0), hash(n + 1.0), f.x),\n\t\t\t\t\tmix(hash(n + 157.0), hash(n + 158.0), f.x), f.y),\n\t\t\tmix(mix(hash(n + 113.0), hash(n + 114.0), f.x),\n\t\t\t\t\tmix(hash(n + 270.0), hash(n + 271.0), f.x), f.y), f.z);\n}\n\nmat3 m = mat3(0.00, 0.80, 0.60, -0.80, 0.36, -0.48, -0.60, -0.48, 0.64);\n\nfloat fbm(vec3 p) {\n\tfloat f = 0.0;\n\tf += 0.500 * noise(p);\n\tp = m * p * 2.01;\n\tf += 0.250 * noise(p);\n\tp = m * p * 2.02;\n\tf += 0.125 * noise(p);\n\tp = m * p * 2.03;\n\n\treturn f;\n}\n\nmat2 m2 = mat2(1.6, 1.2, -1.2, 1.6);\n\nfloat fbm(vec2 p) {\n\tfloat f = 0.0;\n\n\tf += 0.500 * noise(p);\n\tp = m2 * p;\n\tf += 0.250 * noise(p);\n\tp = m2 * p;\n\tf += 0.125 * noise(p);\n\n\treturn f;\n}\n\nvec2 min2(vec2 a, vec2 b) {\n\treturn a.x < b.x ? a : b;\n}\n\nfloat sdPlane(vec3 p) {\n\treturn p.y;\n}\n\nfloat sdTorus(vec3 p, vec2 t) {\n\tvec2 q = vec2(length(p.xz) - t.x, p.y);\n\treturn length(q) - t.y;\n}\n\nfloat sdApple(vec3 p, float r) {\n\tp.y *= 0.95;\n\n\tp.xz *= 1.2;\n\n\tfloat k = 0.84 + 0.16 * smoothstep(-r, r, p.y);\n\tp.xz /= k;\n\treturn sdTorus(p, vec2((0.9 / 1.25) * r, r));\n}\n\nvec2 map(vec3 p) {\n    p.y += 1.0;\n\tvec2 res = vec2(sdPlane(p), M_FLOOR);\n\tp.y -= AppleRadius;\n    \n\n\tvec2 obj = vec2(sdApple(p, AppleRadius), M_APPLE);\n\tres = min2(res, obj);\n\n\treturn res;\n}\n\nvec2 castRay(vec3 ro, vec3 rd) {\n\tfloat tmin = 0.0;\n\tfloat tmax = Far;\n\n\tfloat precis = 0.002;\n\tfloat t = tmin;\n\tfloat m = -1.0;\n\n\tfor (int i = 0; i < MaxSteps; i++) {\n\t\tvec2 res = map(ro + rd * t);\n\t\tif (res.x < precis || t > tmax) {\n\t\t\tbreak;\n\t\t}\n\t\tt += res.x * MarchDumping;\n\t\tm = res.y;\n\t}\n\tif (t > tmax) {\n\t\tm = -1.0;\n\t}\n\treturn vec2(t, m);\n}\n\nfloat softshadow(vec3 ro, vec3 rd, float mint, float tmax) {\n\tfloat res = 1.0;\n\tfloat t = mint;\n\n\tfor (int i = 0; i < 16; i++) {\n\t\tfloat h = map(ro + rd * t).x;\n\n\t\tres = min(res, 8.0 * h / t);\n\t\tt += clamp(h, 0.02, 0.10);\n\n\t\tif (h < 0.001 || t > tmax) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn clamp(res, 0.0, 1.0);\n}\n\nvec3 calcNormal(vec3 pos) {\n\tvec2 eps = vec2(0.001, 0.0);\n\n\tvec3 nor = vec3(map(pos + eps.xyy).x - map(pos - eps.xyy).x,\n\t\t\tmap(pos + eps.yxy).x - map(pos - eps.yxy).x,\n\t\t\tmap(pos + eps.yyx).x - map(pos - eps.yyx).x);\n\treturn normalize(nor);\n}\n\nfloat calcAO(vec3 pos, vec3 nor) {\n\tfloat occ = 0.0;\n\tfloat sca = 1.0;\n\n\tfor (int i = 0; i < 5; i++) {\n\t\tfloat hr = 0.01 + 0.12 * float(i) / 4.0;\n\t\tvec3 aopos = nor * hr + pos;\n\t\tfloat dd = map(aopos).x;\n\n\t\tocc += -(dd - hr) * sca;\n\t\tsca *= 0.95;\n\t}\n\treturn clamp(1.0 - 3.0 * occ, 0.0, 1.0);\n}\n\nvec3 woodColor(vec2 p) {\n\tvec2 q = p;\n\tq.x += noise(q * vec2(0.05, 0.02)) * 2.0;\n\tq.y *= 0.1;\n\tfloat f = fbm(q);\n\n\tq = p + vec2(145.424, 424.1114);\n\n\tf = mix(f, 0.5, fbm(q * vec2(0.3, 0.2)) + 0.2);\n\n\tvec3 pwr = vec3(WoodPower);\n\tvec3 colLight = pow(vec3(0.84, 0.50, 0.25), pwr);\n\tvec3 colDark = pow(vec3(0.40, 0.28, 0.17), pwr);\n\tvec3 colSpot = pow(vec3(0.38, 0.24, 0.12), pwr);\n\n\tvec3 col = mix(colDark, colLight, f);\n\n\tq = p - vec2(145.424, 424.1114);\n\tf = clamp(smoothstep(0.0, 0.8, fbm(q * vec2(0.07, 0.018))) + 0.4, 0.0, 1.0);\n\tcol = mix(colSpot, col, f);\n\n\treturn col;\n}\n\nfloat lum(vec2 uv) {\n\treturn dot(woodColor(uv), vec3(0.2126, 0.7152, 0.0722));\n}\n\nvec3 floorColor(vec3 pos, float t, inout vec3 nor) {\n#ifdef BUMP_MAPPING\n\t\tvec2 uv = pos.xz * 6.0;\n\t\tvec3 col = woodColor(uv);\n\n\t\t// Forward difference\n\t\tvec2 eps = vec2(t * 0.005, 0.0);\n\t\tfloat p = lum(uv);\n\t\tvec2 grad = vec2(lum(uv + eps.xy) - p, lum(uv + eps.yx) - p)\n\t\t\t\t/ (eps.xx);\n\t\tnor = normalize(vec3(grad.x, BumpFactor, grad.y));\n\n\t\treturn col;\n#else\n\t\tvec2 uv = pos.xz * 6.0;\n\t\treturn woodColor(uv);\n#endif\n}\n\nvec3 appleColor(vec3 pos, vec3 nor) {\n\t// noise\n\tfloat r = noise(pos * 1.0);\n\tvec3 col = mix(vec3(0.8, 0.0, 0.0), vec3(0.8, 0.4, 0.2), r) * 0.7;\n\n\t// stripes\n\tfloat rad2 = AppleRadius * 2.0;\n\tvec2 uv = vec2((pos.y - rad2) / rad2, atan(pos.z, pos.x) / PI + 0.5);\n\tuv.x *= 0.02;\n\tfloat rs = texture(iChannel0, uv, -100.0).r;\n\tcol = mix(vec3(0.561, 0.278, 0.141), col, 0.7 + 0.3 * rs);\n\n\t// dots\n\tfloat f = fbm(pos * 22.0);\n\tf = clamp(pow(smoothstep(0.66, 1.0, f), 0.1) * 20.0, 0.0, 1.0);\n\tcol *= 0.96 + 0.04 * vec3(0.929, 0.627, 0.427) * f;\n\n    return pow(col, vec3(1.5));\n}\n\nvec3 render(vec3 ro, vec3 rd) {\n\tvec3 bg = vec3(0.8, 0.9, 1.0) * (0.9 - rd.y);\n\tvec3 col = bg;\n\n\tvec2 res = castRay(ro, rd);\n\tfloat t = res.x;\n\tfloat m = res.y;\n\n\tif (m > M_NONE) {\n\t\tvec3 pos = ro + t * rd;\n\t\tvec3 nor = calcNormal(pos);\n\n\t\tif (m == M_APPLE) {\n\t\t\tcol = appleColor(pos, nor);\n\t\t} else if (m == M_FLOOR) {\n\t\t\tcol = floorColor(pos, t, nor);\n\t\t}\n\t\tvec3 ref = reflect(rd, nor);\n\t\tfloat occ = calcAO(pos, nor);\n\t\tvec3 lig = normalize(-LightDir);\n\n\t\tfloat amb = clamp(0.5 + 0.5 * nor.y, 0.0, 1.0);\n\t\tfloat dif = clamp(dot(nor, lig), 0.0, 1.0);\n\t\tfloat fre = pow(clamp(1.0 + dot(nor, rd), 0.0, 1.0), 2.0);\n\t\tfloat spe = pow(clamp(dot(ref, lig), 0.0, 1.0), 12.0);\n\n\t\tdif *= softshadow(pos, lig, 0.02, 2.5);\n\n\t\tvec3 brdf = vec3(0.0);\n\t\tbrdf += 1.2 * dif * vec3(1.0);\n\t\tbrdf += 0.5 * spe * vec3(1.0) * dif;\n\t\tbrdf += 0.5 * amb * vec3(1.0) * occ;\n\t\tbrdf += 0.4 * fre * vec3(1.0) * occ;\n\t\tbrdf += 0.02;\n\t\tcol = col * brdf;\n\t}\n\treturn vec3(clamp(col, 0.0, 1.0));\n}\n\nmat3 rotateX(float a) {\n\tfloat ca = cos(a);\n\tfloat sa = sin(a);\n\n\treturn mat3(1.0, 0.0, 0.0, 0.0, ca, -sa, 0.0, sa, ca);\n}\n\nmat3 rotateY(float a) {\n\tfloat sa = sin(a);\n\tfloat ca = cos(a);\n\treturn mat3(ca, 0.0, sa, 0.0, 1.0, 0.0, -sa, 0.0, ca);\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n\tvec2 q = fragCoord.xy / iResolution.xy;\n\tvec2 coord = 2.0 * q - 1.0;\n\tcoord.x *= iResolution.x / iResolution.y;\n\tcoord *= FOV;\n\n\n\tvec2 mouse = iMouse.xy / iResolution.xy;\n\tif (mouse.x != 0.0 && mouse.y != 0.0) {\n\t\tmouse = mouse * 2.0 - 1.0;\n\t}\n    float t = iTime * 0.25 - mouse.x * 4.0;\n\tfloat st = sin(t);\n\n\tmat3 rot = rotateY(-t * PI * 0.32) * rotateX(mouse.y * PI * 0.25);\n\n\tvec3 ro = rot * vec3(0.0, 7.0 + 0.8 * st, 4.0 - 2.0 * st);\n\n\tvec3 dir = normalize(-ro);\n\tvec3 up = rot * vec3(0.0, 1.0, 0.0);\n\tvec3 upOrtho = normalize(up - dot(dir, up) * dir);\n\tvec3 right = normalize(cross(dir, upOrtho));\n\n#ifdef ANTI_ALIASING\n\tvec2 eps = vec2(1.0) / (iResolution.xy * 2.0);\n\tvec3 rd0 = normalize(dir + (coord.x - eps.x) * right + coord.y * upOrtho);\n\tvec3 rd1 = normalize(dir + (coord.x + eps.x) * right + coord.y * upOrtho);\n\tvec3 rd2 = normalize(dir + coord.x * right + (coord.y - eps.y) * upOrtho);\n\tvec3 rd3 = normalize(dir + coord.x * right + (coord.y + eps.y) * upOrtho);\n\n\tvec3 col = (render(ro, rd0)\n\t\t\t  + render(ro, rd1)\n\t\t\t  + render(ro, rd2)\n\t\t\t  + render(ro, rd3)) / 4.0;\n#else\n\tvec3 rd = normalize(dir + coord.x * right + coord.y * upOrtho);\n\tvec3 col = render(ro, rd);\n#endif\n\n\tcol = pow(col, vec3(0.4545));\n\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}