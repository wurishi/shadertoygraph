{"ver":"0.1","info":{"id":"XdGSWV","date":"1466538052","viewed":336,"name":"Hermite w/ Line Segments","username":"micle2000","description":"Mouse X controls thickness of line\nMouse Y controls C value of hermite spline","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Ps is number of points, tts is number of line segments\n#define Ps 15\n#define tts 5\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453)-0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scale = min(iResolution.x, iResolution.y);\n\tvec2 uv = fragCoord.xy / scale;\n\tfragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n    \n    vec2 P[Ps];\n    vec2 M[Ps];\n    \n    P[0] = vec2(0.1,0.1);\n    P[Ps-1] = vec2(1.3,0.9);\n    \n    M[0] = normalize(P[Ps-1]-P[0])/5.;\n    M[Ps-1] = M[0];\n    \n    float randstep = 0.0;\n    randstep = float(floor(iTime*10.));\n    \n    // lightning bolt\n    for (int i = 1; i < Ps-1; i++) {\n        float t = float(i+1)/float(Ps-1); // how far down line\n        vec2 L = (P[Ps-1]-P[0])*t; // point on line\n        \n        vec2 A = vec2(-1,2) + vec2(2,-4)*mod(float(i),2.);\n        A =  A + vec2(cos(float(i)),sin(float(i)));\n        A = A * rand(vec2(randstep));\n        \n        P[i] = L + A/20.;\n    }\n\n    float c = iMouse.y/iResolution.y;\n    if (c < 0.1) c = 0.5;\n    \n    // calculate Ms\n    for(int i = 1; i < Ps-1; i++) {\n        M[i] = c*(P[i]-P[i-1]);\n\t}\n    \n    float d = 100000.0;\n    // calculate distances\n    for (int i = 0; i < Ps-1;i++) {\n        // hermite spline\n    \tvec2 A = 2.0*P[i]+M[i]-2.0*P[i+1]+M[i+1];\n        vec2 B = -3.0*P[i]-2.0*M[i]+3.0*P[i+1]-M[i+1];\n        vec2 C = M[i];\n        vec2 D = P[i];\n        // f = At^3 + Bt^2 + Ct + D\n        \n        // points on line\n        for (int tt = 0; tt <= tts; tt++) {\n            float T = float(tt) / float(tts);\n            vec2 f = (D + T*(C + T*(B + T*A)));\n            //d = min(d,length(uv-f));            \n        }\n        \n        // break curve into line segments\n        for (int tt = 0; tt < tts; tt++) {\n            float T = float(tt) / float(tts);\n            vec2 p1 = (D + T*(C + T*(B + T*A)));\n            T = float(tt+1) / float(tts);\n            vec2 p2 = (D + T*(C + T*(B + T*A)));\n            \n            float t = dot(uv-p1,p2-p1) / dot(p2-p1,p2-p1);\n            t = clamp(t,0.,1.);\n            T = float(tt)/float(tts) + t / float(tts);\n            vec2 f = (D + T*(C + T*(B + T*A)));\n            d = min(d,length(uv-f));\n        }\n    }\n    \n    float dscale = iMouse.x/5.;\n   \tif (dscale < 10.) dscale = 100.;\n    d = 1./d/dscale;\n    fragColor = vec4(d,d,d,1);\n    \n    // draw Ps\n    for(int i = 0; i < Ps; i++) {\n        if (length(uv-P[i]) < 0.01) {\n         \tfragColor = vec4(1,0,0,1);   \n        }\n\t}\n   \t\n}","name":"Image","description":"","type":"image"}]}