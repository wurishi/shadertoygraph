{"ver":"0.1","info":{"id":"sd2GRG","date":"1617595211","viewed":556,"name":"Talismans","username":"Kali","description":"Animated 2D fractals on dancing disks with fake 3D perspective. Rays rendered in second pass. ","likes":25,"published":1,"flags":96,"usePreview":0,"tags":["2d","fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = vec3(0.);\n    float s=1.;\n    for (float i=0.; i<100.; i++)\n    {\n        s*=.99;\n        vec3 t=texture(iChannel0,(uv-.5)*s+.5).rgb;\n        col+=t*exp(-.05*i)*.07*step(1.,length(t));\n    }\n    col+=texture(iChannel0,uv).rgb*.5;\n    \n    \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"MlXXD7","filepath":"https://soundcloud.com/home-2001/come-back-down","previewfilepath":"https://soundcloud.com/home-2001/come-back-down","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define iTime iChannelTime[0]\n\nmat2 rot(float a)\n{\n    float s=sin(a),c=cos(a);\n    return mat2(c,s,-s,c);\n}\n\nvec4 disk(vec2 p, float w)\n{\n    float t=iTime+w*6.5;\n    p*=2.+dot(p,p)*2.;\n    float s=sin(t*.1*1.585*3.1416);\n    p.x+=s*s*s;\n    p*=rot(tan(t*3.1416*1.585*.2)*.1);\n    p*=7.-atan(5.*cos(t*2.*3.1416*1.585*.25)*3.1416*1.585)*1.5;\n    float m=1000., it=0.,cir=smoothstep(7.5,7.,length(p));\n    vec2 p2=p;\n    for (int i=0; i<4; i++)\n    {\n        p*=rot(radians(45.));\n        p=abs(p*.9)-.5;\n    }\n    for (float i=0.; i<7.; i++)\n    {\n        p.x=abs(p.x)-fract(floor(t*1.585)*.1);\n        p=p/dot(p,p);\n        float l=abs(p.x)+abs(.5-fract(p.y*.2+.25*t*1.585+i*.2))*.5;\n        if (l<m)\n        {\n            m=l;\n            it=i;\n        }\n    }\n    m=.2/(.2+m*m*15.);\n    vec3 col = vec3(m,m*m,m*m*m);\n    col.xz*=rot(it*.3);\n    return vec4(abs(col)*cir,cir)+smoothstep(1.,.5,cir)*cir;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv=(fragCoord-iResolution.xy*.5)/iResolution.y;\n    vec4 f1=disk(uv,0.);\n    vec4 f2=disk(uv,1.);\n    vec3 col=mix(f2.rgb,f1.rgb,f1.w);\n    col+=smoothstep(.4,.5,abs(.5-fract(uv.y*50.)))*(1.-max(f1.w,f2.w))*.3;\n    fragColor=vec4(col,1.);\n}","name":"Buffer A","description":"","type":"buffer"}]}