{"ver":"0.1","info":{"id":"mddBWj","date":"1697662781","viewed":19,"name":"Ben-SlidingTexture","username":"bennissimo","description":"Sliding texture. Actually slides this time.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["bennissimo"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// This shader shows the dark patch artifact with a moving checkerboard pattern.\n// Drag the mouse in the window; when the mouse is in the top half, we draw a \n// rectangle with a constant color. When the mouse is in the bottom half, we draw\n// a rectangle with a checkerboard tecture with 1 pixel checkers:\n// 0 1 0 1 0 1 ..\n// 1 0 1 0 1 0 ...\n// 0 1 0 1 0 1 ...\n// ...\n//\n// IMPORTANT: turns out we see the dark region with any pixel-width features.\n// So for example, alternating vertical lines of on and off pixels, or alternating\n// horizontal lines of on and off pixels, both cause the same artifact.\n//\n//\n// For full screen mode, use a larger period like 60 frames.\n//\n// fragCoord is (0,0) in bottom left corner. X right, Y up.\n// \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Rectangle size\n    int size_x = int(0.05 * iResolution.x);\n    int size_y = int(0.08 * iResolution.y);\n    // Period for motion of moving rectangle:\n    float period = 25.0; // windowed\n    int pos_x = int((0.5 + 0.4 * cos(float(iFrame) / period)) * iResolution.x);\n    int pos_y = int(0.5 * iResolution.y);\n    \n    // Pattern to translate.\n    // Multiply one fragCoord by 1 and the other by 0 if you want to see the\n    // effect with vertical or horizontal stripes. Multiplying both by 1 gives\n    // a checkerboard.\n    int checker_size = 1;\n    int x = int(fragCoord.x) - pos_x + size_x;\n    int y = int(fragCoord.y) - pos_y + size_y;\n    int polarity = (1 * x / checker_size + 0 * y / checker_size) % 2;\n\n    int bgnd_50_50 = (int(fragCoord.x) + int(fragCoord.y)) % 2;\n\n    if (int(fragCoord.x) > pos_x - size_x &&\n        int(fragCoord.x) < pos_x + size_y &&\n        int(fragCoord.y) > pos_y - size_y && \n        int(fragCoord.y) < pos_y + size_y) {\n        fragColor = vec4(0,polarity,0,1);\n    } else {\n        fragColor = float(bgnd_50_50) * vec4(0, 1, 0, 1);\n    }\n\n}\n","name":"Image","description":"","type":"image"}]}