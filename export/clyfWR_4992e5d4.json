{"ver":"0.1","info":{"id":"clyfWR","date":"1701964801","viewed":29,"name":"Mandelbrot Learning","username":"sirjofri","description":"learning about fractals","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    fragColor = vec4(texture(iChannel0, uv).rgb, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define AA 0\n\nvec2 add(vec2 a, vec2 b) {\n    a.x += b.x;\n    a.y += b.y;\n    return a;\n}\n\nvec2 mul(vec2 a, vec2 b) {\n    vec2 r;\n    float real = a.x*b.x;\n    float add = a.y*b.y*(-1.);\n    float imag = a.x*b.y + a.y*b.x;\n    r.x = real + add;\n    r.y = imag;\n    return r;\n}\n\nint iter = 0;\nvec2 calc(int n, vec2 c) {\n    vec2 t = vec2(0.);\n    \n    for (int i = 0; i < n; i++) {\n        t = add(mul(t, t), c);\n        if (t.x >= 2. && t.y >= 2.) {\n            iter = i;\n            return t;\n        }\n    }\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 ouv = uv;\n    uv -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n    uv *= 2.;\n    uv.x -= .4;\n    \n    vec2 zoff = vec2(.72, 0.25);\n    float zval = .01;\n    \n    float z = sin(iTime*.1)/2.+.5;\n    uv *= mix(1., zval, z);\n    uv -= mix(vec2(0.), zoff, z);\n\n    vec2 t = calc(100, uv);\n    \n    float inside = 0.;\n    if (t.x < 2. && t.y < 2.)\n        inside = 1.;\n    \n    vec3 col = vec3(0., length(t), 0.);\n    if (inside < 0.5) {\n        col = vec3(float(iter)/100./pow(t.x, .1), 0., 0.);\n    }\n    \n#if AA\n    vec3 ocol = texture(iChannel0, ouv).rgb;\n    col = mix(ocol, col, .9);\n#endif\n\n    fragColor = vec4(col, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}