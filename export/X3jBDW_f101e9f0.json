{"ver":"0.1","info":{"id":"X3jBDW","date":"1729462491","viewed":30,"name":"Julia moving 1020","username":"kukovisuals","description":"Julia ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal","juliaset","juliamoving"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define PI 3.1415926535897932384626433832795\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;    \n    \n    float zoom = exp(-1.5); // zooming in and out\n    vec2 shift = vec2(0.0, 0.0) ; // shifting around central point\n    uv = (uv + shift) * zoom - shift;\n\n    uv *= 3.0;  // Scale the UV coordinates for zooming\n\n    // Rotating the view\n    float angle = iTime * 0.1; // rotate over time\n    mat2 rotMat = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n    uv = rotMat * uv;\n\n    // Julia set constant\n    vec2 c = vec2(-0.4, 0.6);\n  \n    // Additional animation for c parameter\n    c += 0.1 * vec2(sin(iTime * 0.2), cos(iTime * 0.1)); // Evolving effect\n    c = clamp(c, vec2(-0.8, -0.8), vec2(0.8, 0.8)); // Keep c within bounds\n\n    \n    vec2 z = uv;\n    float normSquare = dot(z, z);\n    float maxNormSquare = 0.0;\n    float escapeSpeed;\n    \n    int i;\n    for (i = 0; i < 40; i++)\n    {\n        if (normSquare > 256.0) break;\n        z = vec2(z.x*z.x - z.y*z.y, 2.0*z.x*z.y) + c;\n        normSquare = dot(z, z);\n        maxNormSquare = max(maxNormSquare, normSquare);\n    }\n    \n    // apply smoothstep for escaping\n    escapeSpeed = max(0.0,  1.0 - log2(sqrt(maxNormSquare)) / 8.0);\n    \n    // Color based on the escape speed\n    vec3 color = vec3(0.1, 0.5, 0.7) * escapeSpeed;\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}