{"ver":"0.1","info":{"id":"3syGRG","date":"1570388099","viewed":118,"name":"Anaglyphic cylinder","username":"TheKing","description":"This shader shows an anaglyphic cylinder using ray marching.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","anaglyph"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float cylinder(float r, float h, vec3 p) {\n    return max(length(p.xy)-r, abs(p.z)-h);\n}\n\nmat2 rot(float angle) {\n    return mat2(sin(angle), cos(angle), cos(angle), -sin(angle));\n}\n\nfloat sceneSDE(vec3 p) {\n    float h = p.y;\n    float angle1 = iTime;\n    float angle2 = iTime * 1.6;\n    p.yz *= rot(angle1);\n    p.xz *= rot(angle2);\n    return min(cylinder(1.,1.,p), h+2.);\n}\n\nvec3 rayMarch(vec3 origin, vec3 dir) {\n    vec3 p = origin;\n    while(true) {\n        float d = sceneSDE(p);\n        if (d < 0.01) { return p; }\n        if (length(p - origin) > 100.) { return p; }\n        p += dir * d;\n    }\n}\n\nfloat light(vec3 p, vec3 l) {\n    vec3 lvec = normalize(l-p);\n    if (length(rayMarch(p+0.1 * lvec, lvec)-p) < length(l-p)) { return 0.; }\n    vec2 helper = vec2(1e-5,0);\n    float d = sceneSDE(p);\n    vec3 norm = normalize(vec3(\n        sceneSDE(p + helper.xyy) - d,\n        sceneSDE(p + helper.yxy) - d,\n        sceneSDE(p + helper.yyx) - d\n        ));\n   return dot(norm, lvec);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy*0.5)/iResolution.y;\n    vec3 eye1 = vec3(-0.05,0,10);\n    vec3 eye2 = vec3(0.05,0,10);\n    vec3 l = vec3(3,10,5);\n    vec3 canvas = vec3(uv*3., 5);\n    \n    fragColor = vec4(0,0,0,1);\n\n    vec3 p = rayMarch(eye1, normalize(canvas-eye1));\n    if (length(eye1-p)>100.) { fragColor.x = 0.; }\n    else { fragColor.x = light(p, l); }\n    if (abs(p.y - -2.)<0.01) {fragColor.x *= sin(p.x+iTime)*0.4+0.5; }\n    \n    p = rayMarch(eye2, normalize(canvas-eye2));\n    if (length(eye2-p)>100.) { fragColor.y = 0.; }\n    else { fragColor.y = light(p, l); }\n    if (abs(p.y - -2.)<0.01) {fragColor.y *= sin(p.x+iTime)*0.4+0.5;}\n    fragColor.z = fragColor.y;\n}","name":"Image","description":"","type":"image"}]}