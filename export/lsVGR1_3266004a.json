{"ver":"0.1","info":{"id":"lsVGR1","date":"1453369103","viewed":168,"name":"Two Cats","username":"vrav","description":"learning/fumbling exercise from a few months ago -- wow, what a weird mess to revisit someday! sprite adjustments are baked, but pattern isn't, so inefficient","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["2d","cute","pixel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define sheetWidth 256.\n#define sheetHeight 32.\n\n#define frameWidth 40.\n#define frameCount 6.\n\n#define animSpeed 12.\n#define moveSpeed animSpeed*10.3\n#define scale 2.\n\nconst float frameFrac = frameWidth / sheetWidth;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 time = vec2(sin(iTime * 0.1), cos(iTime * 0.1));\n    vec2 q = (fragCoord.xy / iResolution.xy);\n    \n    // sprite anim reference: https://www.shadertoy.com/view/lsX3Rr\n    // resolution-independent pixel sprite on screen\n    vec2 uv = q * (iResolution.xy/vec2(frameWidth, 32.));\n\t// sprite-width per screen width\n\t// scale by resolution again to make consistent\n    uv *= (frameWidth/iResolution.x)*scale;\n    \n    float saw = 1. - fract( (iTime+1.)*(moveSpeed/scale)*.0064 ) * (scale + 1.);\n\t\n    uv += vec2(saw, sin(iTime)*.25-.3);\n    \n    uv = clamp( uv, 0.0, 1.0 );\n    float offset_x = floor( mod( iTime*animSpeed, frameCount ) );\n    uv.x = clamp( uv.x*frameFrac + offset_x*frameFrac, 0.0, 1.0 );\n    \n    \n    vec4 buf = texture( iChannel0, uv );\n    vec4 bgcol = texture( iChannel1, time + q*vec2(iResolution.x/iResolution.y, 1.) );\n    bgcol = bgcol*.2 + vec4(vec3(.5),1.);\n    \n    fragColor = mix(bgcol, buf, buf.a);\n    \n/*\t\n    // preview for pixel art editing\n    q *= vec2(.95, 4.);\n    \n    buf = texture( iChannel0,  q );\n    if( tpx.x < t ) {\n        buf.r = 1.;\n    }\n    fragColor = mix(bgcol, buf, buf.a);\n*/\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// edits the pixel art on the spritesheet.\n// only run at frame 0. base grey cat in buf A.\n\n#define frameWidth 40.\n#define frameCount 6.\n\nconst vec4 black = vec4(vec3(0.0), 1.0);\nconst vec4 grey = vec4( vec3( 153./255. ), 1. );\nconst vec4 icing = vec4( 1., 153./255., 1., 1. );\nconst vec4 sprinkles = vec4( 1., 51./255., 153./255., 1. );\nconst vec4 rosycheeks = vec4( 1., 153./255., 153./255., 1. );\nconst vec4 cookie = vec4( 1., 204./255., 153./255., 1. );\n\nbool colEq( float e, vec4 col1, vec4 col2 ) {\n    return all(greaterThanEqual( col1, col2 - e )) &&\n           all(   lessThanEqual( col1, col2 + e ))\n        ? true : false;\n}\n\n// http://stackoverflow.com/a/26697650\nfloat inRect(vec2 p, vec2 botL, vec2 topR) {\n    vec2 s = step(botL, p) - step(topR, p);\n    return s.x * s.y;\n}\n\n// subtract s.x*s.y from alpha to return misses unchanged\nfloat cutRect( vec2 p, float alpha, vec2 botL, vec2 topR ) {\n    vec2 s = step(botL, p) - step(topR, p);\n    return clamp(alpha - (s.x * s.y), 0., 1.);\n}\n\nvec4 fillRect( vec2 p, vec4 in_c, vec4 fill_c, vec2 botL, vec2 topR ) {\n    vec2 s = step(botL, p) - step(topR, p);\n    return mix(in_c, fill_c, s.x * s.y);\n}\n\nvec4 editPixelArt( vec4 col, vec2 tpx, float fstart, vec2 headshift ) {\n    // cut off top of poptart\n    if( tpx.y > (21. + headshift.y) ) {\n \t   col.a = 0.;\n    }\n    \n    // trim back\n    vec2 rectBL = vec2(fstart + 9., 17.);\n    col.a = cutRect( tpx, col.a, rectBL, rectBL + vec2( 11. + headshift.x, 16. ));\n    // trim ear pixel left\n    rectBL = vec2(fstart + 20., 20.) + headshift;\n    col.a = cutRect( tpx, col.a, rectBL, rectBL + vec2( 1. ));\n    // trim ear pixel right\n    rectBL = vec2(fstart + 23., 20.) + headshift;\n    col.a = cutRect( tpx, col.a, rectBL, rectBL + vec2( 1. ));\n    // trim low between ears\n    rectBL = vec2(fstart + 25., 18.) + headshift;\n    col.a = cutRect( tpx, col.a, rectBL, rectBL + vec2( 4., 16. ));\n    // trim mid between ears\n    rectBL = vec2(fstart + 24., 19.) + headshift;\n    col.a = cutRect( tpx, col.a, rectBL, rectBL + vec2( 6. - headshift.x, 16. ));\n    // trim tail root pixels\n    rectBL = vec2(fstart + 9., 16.);\n    col.a = cutRect( tpx, col.a, rectBL, rectBL + vec2( 2., 1. ));\n    // poke nose\n    rectBL = vec2(fstart + 28., 13.) + headshift;\n    col = fillRect( tpx, col, grey, rectBL, rectBL + vec2( 1., 1. ));\n    \n    // pet back. good kitty\n    rectBL = vec2(fstart + 11., 16.);\n    col = fillRect( tpx, col, black, rectBL, rectBL + vec2( 10., 1. ));\n    rectBL = vec2(fstart + 10., 15.);\n    col = fillRect( tpx, col, black, rectBL, rectBL + vec2( 1., 1. ));\n    \n    // color replacement\n    if( colEq( .1, col, icing ) ||\n        colEq( .1, col, sprinkles ) ||\n        colEq( .1, col, cookie ) ||\n      \tcolEq( .1, col, rosycheeks ) ) {\n        col = grey;\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    if( iFrame < 5 ) {\n        vec4 col = texture( iChannel0, uv );\n    \tvec2 tpx = uv * iChannelResolution[0].xy;\n    \tfloat frame = floor( tpx.x / frameWidth );\n    \tvec2 headshift = vec2( (frame > 0. && frame < 4.) ? 1. : 0.,\n        \t                    frame > 4. ? 1. : 0. );\n    \tfloat fstart = frameWidth*frame;\n    \n        fragColor = editPixelArt( col, tpx, fstart, headshift );\n    \treturn;\n    }\n    \n    fragColor = texture( iChannel1, uv );\n}\n\n","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// cycle different patterns into buf B.\n\n#define sheetWidth 256.\n#define sheetHeight 32.\n\n#define frameWidth 40.\n#define frameCount 6.\n\n#define animSpeed 12.\n#define moveSpeed animSpeed*10.3\n#define scale 4.\n\nconst vec4 grey = vec4( vec3( 153./255. ), 1. );\n\nbool colEq( float e, vec4 col1, vec4 col2 ) {\n    return all(greaterThanEqual( col1, col2 - e )) &&\n           all(   lessThanEqual( col1, col2 + e ))\n        ? true : false;\n}\n\nfloat inRect(vec2 p, vec2 botL, vec2 topR) {\n    vec2 s = step(botL, p) - step(topR, p);\n    return s.x * s.y;\n}\n\nvec4 tintSprite( vec4 col, vec4 pcol ) {\n    return (colEq( .1, col, grey ) ? pcol : col);\n}\n\nvec4 addPatternTexture( vec4 col, vec2 uv, vec2 tpx, float frame, float fstart, vec2 headshift ) {\n    vec2 puv = vec2( uv.x - (frame*frameWidth)/iChannelResolution[0].x, uv.y*(32./256.) )\n\t\t\t - headshift * (3.7/iChannelResolution[1].xy)\n       \t\t * ( 1.0 - inRect( tpx, vec2( fstart + 10., 9. ), vec2( fstart + 20., 16. ) ) );\n    vec4 pcol = texture( iChannel1, (iChannelResolution[0].x/iChannelResolution[1].x)*puv );\n\treturn tintSprite( col, pcol );\n}\n\nvec4 addPatternTabby( vec4 col, vec2 uv, vec2 tpx, float frame, float fstart, vec2 headshift ) {\n    float pmask = 0.;\n    \n    // tabby pattern.\n    float sx = 6.; // sprite-pixel x offset of stripes\n    float sc = 8.; // number of black stripes, single-frame\n    // floor(a+0.5) == round(); 6.4 == sheetWidth/frameWidth\n    pmask = floor(fract(.2*uv.y*-.8) + fract(uv.x*sc*6.4 - (sx/40.)) + 0.5);\n    vec4 pcol1 = vec4(.8, .8, 0., 1.);\n    vec4 pcol2 = vec4(1., .6, 0., 1.);\n    \n    vec4 pcol = mix(pcol1, pcol2, pmask);\n    return tintSprite( col, pcol );\n}\n\nvec4 addPatternSiamese( vec4 col, vec2 tpx, vec2 headshift ) {\n    // siamese pattern.\n    float pmask = 0.;\n    pmask += 1. - clamp(pow(distance(tpx-headshift, vec2(27.5,12.))/5., .8), 0., 1.);\n   \tpmask += 1. - clamp(pow(distance(tpx-headshift, vec2(27.5,20.))/8., .9), 0., 1.);\n    pmask += 1. - clamp(pow(distance(tpx, vec2( 3.,14.))/7., 3.), 0., 1.);\n    pmask = clamp(pmask, 0., 1.);\n    vec4 pcol1 = vec4(.98, .98, .85, 1.);\n    vec4 pcol2 = vec4(.9, .6, .4, 1.);\n    \n    vec4 pcol = mix(pcol1, pcol2, pmask);\n    return tintSprite( col, pcol );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    vec4 col = texture( iChannel0, uv );\n    vec2 tpx = uv * vec2(sheetWidth, sheetHeight);\n    float frame = floor( tpx.x / frameWidth );\n    vec2 headshift = vec2( (frame > 0. && frame < 4.) ? 1. : 0.,\n                          frame > 4. ? 1. : 0. );\n    float fstart = frameWidth*frame;\n\ttpx -= vec2(fstart, 0.);\n    \n    float saw = fract( (iTime+1.)*(moveSpeed/scale)*.0032 ) * (scale + 1.);\n    saw *= 2.;\n    \n    if( saw < 5. ) {\n       fragColor = addPatternTabby( col, uv, tpx, frame, fstart, headshift );\n       return;\n    } else {\n       fragColor = addPatternSiamese( col, tpx, headshift );\n       return;\n    }\n\n    fragColor = texture( iChannel1, uv );\n}\n","name":"Buf B","description":"","type":"buffer"}]}