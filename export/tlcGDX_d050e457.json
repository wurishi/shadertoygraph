{"ver":"0.1","info":{"id":"tlcGDX","date":"1577727370","viewed":241,"name":"Learning Code [02]","username":"ozu","description":"Wow, 2D Grid!\nAs FabriceNeyret2 recommended I used 1. / iResolution.y instead of 'magic number' for antialiasing.\n","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["circles","grid","packing","forloop"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int max_i = 20;\nconst int max_j = 20;\n\nfloat Circle(vec2 uv, vec2 p, float radius, float blur){\n\n    float d = length(uv - p);    \n    float c = smoothstep(blur,0.,abs(d-radius));\n   // c -= smoothstep(radius - blur, radius - 2. * blur, d);\n       \n    return c;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\n    vec2 uv = (fragCoord - .5* iResolution.xy) / iResolution.x;\n    float c = 0.;\n    vec2 p ;\n\n\n\n    float dist = 1. / float(max_i);\n    float radius = dist;\n    float speed = -2.;\n    \n    for (int i=0; i<max_i; i++){\n            p.x = float(i) * dist -.5 + dist / 2.;\n        for (int j=0; j<max_j; j++){\n\n            p.y = float(j) * dist -.5 + dist / 2.;\n       \t\tfloat t = sin(speed * iTime + float(i) * .125) * .5 +.5;\n       \t\tradius = t * (sin(float(i/max_i)) * .5 +.5) * dist;\n\t\t\tfloat blur = 1.5/ iResolution.y;\n\n            \n            float circle = Circle(uv, p, radius, blur);\n            c +=circle;\n        }\n     }\n    \n    fragColor = vec4(c, c, c,1.0);\n}","name":"Image","description":"","type":"image"}]}