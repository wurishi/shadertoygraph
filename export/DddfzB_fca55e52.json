{"ver":"0.1","info":{"id":"DddfzB","date":"1697323777","viewed":84,"name":"Algodao","username":"Elsio","description":"Fractal com cálculo de movimentação de câmera. Sempre bom deixar um shader pequeno como exemplo para futuras consultas. ","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["fractal","cotton","path","tunel","espinhos","fumaca"],"hasliked":0,"parentid":"cdycDd","parentname":"Smoke and Spikes"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R iResolution.xy\n#define t -iTime * 4.\n#define path(z) 3. * cos((z) * vec2(.13, .17) + vec2(3.14, 0))\n\nvoid mainImage(out vec4 O, vec2 u){\n    u = (u - .5 * R) / R.y; O -= O;\n\n    // camera\n    vec3 ro = vec3(0, 0, t - 1.),\n         fw = normalize(\n                 vec3(path(t) - path(t - .1), .1) \n              ),\n              \n         rt = vec3(fw.z, 0., -fw.x),\n         up = cross(fw, rt),\n         rd = fw + (u.x * rt + u.y * up) / 1.4,\n         p = ro;\n    \n    //raymarch\n    float i = 1., dd, a, d = 1., far = 50.;\n    while(i++ < 510. && dd < far && d > .01) {\n        vec3 q = p;\n        q.xy -= path(q.z);\n        d = length(path(q.z)) - length(q.xy);\n\n        a = .5;\n        while((a += a) < 128.) \n            d += abs(\n                    dot(q/q,\n                         sin(q * a * .3)) * 3.2/a);\n                     \n        dd += d * .1;\n        p += d * rd * .03;\n    }\n    \n    \n    O += dd < far\n        ? 22. / i + vec4(1, 3, 0, 0) / length(p - vec3(0, 0, t)) / 3.2\n        : vec4(65.) / i;\n}","name":"Image","description":"","type":"image"}]}