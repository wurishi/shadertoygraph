{"ver":"0.1","info":{"id":"WsGyWK","date":"1603748117","viewed":261,"name":"SciFi Tunnel","username":"fsynth","description":"Trying to copy Harrison Ellenshaw art but turned out something else.","likes":13,"published":1,"flags":32,"usePreview":0,"tags":["planedeformation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// based on IQ plane deformation discontinuity fix sketch\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y - vec2(0.75, 0.2);//vec2(sin(iTime / 2.), cos(iTime / 4.)/2.);\n    \n    float an = -iTime*0.15;\n    \n    p = mat2(cos(an),-sin(an),sin(an),cos(an)) * p;\n\n    float a = atan(p.y,p.x);\n\n    float r = length(p);\n\n    vec2 uv = vec2(0.3/r + 0.1*iTime, a/3.1415927 );\n\n    vec2 uv2 = vec2( uv.x, atan(p.y,abs(p.x))/3.1415927 );\n    vec3 col = textureGrad( iChannel0, uv, dFdx(uv2), dFdy(uv2) ).xyz;\n      \n    col *= pow(r, 1.5);\n   \n    //vec2 uv4 = fragCoord/iResolution.xy;\n    //col = texture(iChannel0, uv4).xyz;\n    \n    fragColor = vec4( col, 1.0 );\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float hash(in vec2 p, in float scale)\n{\n\t// This is tiling part, adjusts with the scale...\n\tp = mod(p, scale);\n\treturn fract(sin(dot(p, vec2(27.16898, 38.90563))) * 5151.5473453);\n}\n\n//----------------------------------------------------------------------------------------\nfloat noise(in vec2 p, in float scale )\n{\n\tvec2 f;\n\t\n\tp *= scale;\n\n\t\n\tf = fract(p);\t\t// Separate integer from fractional\n    p = floor(p);\n\t\n    f = f*f*(3.0-2.0*f);\t// Cosine interpolation approximation\n\t\n    float res = mix(mix(hash(p, \t\t\t\t scale),\n\t\t\t\t\t\thash(p + vec2(1.0, 0.0), scale), f.x),\n\t\t\t\t\tmix(hash(p + vec2(0.0, 1.0), scale),\n\t\t\t\t\t\thash(p + vec2(1.0, 1.0), scale), f.x), f.y);\n    return res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    vec3 a = vec3(0.014,0.028,0.0878) * 1.;\n    vec3 b = vec3(0.102,0.138,0.230) * 2.;\n    vec3 d = vec3(0.275,0.5,0.738) * 0.5;\n    vec3 c = mix(mix(a, b, noise(uv, 12.)), d, abs(uv.x*2.-1.));\n    \n    float bn = max(noise(uv, 1000.), 0.75) * 1.25;\n    \n    float no = noise(vec2(uv.x), 8000.)*1.5;\n    float noy2 = noise(vec2(uv.y), 10000.)*0.15;\n    float no2 = round(noise(vec2(uv.x + iTime / 10.), 20.) * 8.) / 8.;\n    float ny = round(noise(vec2(uv.y+no - iTime / 160.), 160.));\n    float no3 = round(noise(vec2(uv.x), 200.) * 160.) / 160. - ny;\n    float no3d = round(noise(vec2(uv.x-0.1), 200.) * 200.) / 200.;\n    float co3 = (max(no3, 0.5)) * 1.5;\n    float co = (max(no, 0.5)) * 1.5;\n\tfloat co2 = (max(noy2, 0.5)) * 1.5;\n    \n    c *= co;\n    c += noy2;\n    \n\tif (no3d > 0.895) {\n        c += vec3(1.);\n    } else if (no3 > 0.895) {\n        c = vec3(1.0, 1., 1.);\n    } else if (no3 > 0.885) {\n        c = vec3(1.0, 0., 0.);\n    }\n    \n    float vli = (max(noise(vec2((uv.y * no2 * co3)), 1200.), 0.975)) * 1.025;\n    float vlid = (max(noise(vec2((uv.y + no2+0.0005)), 120.), 0.925)) * 1.075;\n    float vli2 = (max(noise(vec2((uv.y + no)), 1200.), 0.95)) * 1.05;\n    float li3 = (max(noise(vec2((uv.y + no2)), 4.), 0.95)) * 1.05;\n    \n    float li = (max(noise(vec2((uv.y + ny)), 50.), 0.75)) * 1.25;\n    float lid = (max(noise(vec2((uv.y + ny + 0.004)), 50.), 0.75)) * 1.25;\n    float li2 = (max(noise(vec2((uv.y)), 750.), 0.95)) * 1.05;\n    if (li2 > 0.99995) {\n        c = vec3(1., 0., 0.);\n    } else if (vlid > 0.9995) {\n        c += 2.25;\n    } else if (li > 0.9995 || vli > 0.9995 || vli2 > 0.9995) {\n    \tc += 0.95;  \n    } else if (lid > 0.9995) {\n        c -= 0.75;\n    } else {\n       \tc *= vli;\n    }\n    \n    c *= bn;\n  \n    fragColor = vec4(c, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}