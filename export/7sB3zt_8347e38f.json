{"ver":"0.1","info":{"id":"7sB3zt","date":"1617895935","viewed":125,"name":"door","username":"szkiw","description":"my first pt","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["pt"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535f\nfloat calculateDistanceToIntersection(\n\tout vec3 outNormal,\n\tconst vec3 rayOrigin,\n\tconst vec3 rayDirection,\n\tconst float rayLength,\n\tconst vec3 triangleVertex0,\n\tconst vec3 triangleVertex1,\n\tconst vec3 triangleVertex2){\n\tvec3 v01 = triangleVertex1 - triangleVertex0;\n\tvec3 v12 = triangleVertex2 - triangleVertex1;\n\tvec3 n = normalize(cross(v01, v12));\n\tfloat denom = dot(rayDirection, n);\n\tfloat t = dot(triangleVertex0 - rayOrigin, n) / denom;\n\tif(t < 0.0f || rayLength < t){\n\t\treturn -1.0f;\n\t}\n\tvec3 x = rayOrigin + rayDirection * t;\n\tif(dot(cross(v01, x - triangleVertex0), n) < 0.0f){\n\t\treturn -1.0f;\n\t}\n\tif(dot(cross(v12, x - triangleVertex1), n) < 0.0f){\n\t\treturn -1.0f;\n\t}\n\tif(dot(cross(triangleVertex0 - triangleVertex2, x - triangleVertex2), n) < 0.0f){\n\t\treturn -1.0f;\n\t}\n\toutNormal = n;\n\treturn t;\n}\nvec3 vs[16];\nuvec3 ts[18];\nvoid traceRay_(\n\tout float outDistance,\n\tout vec3 outNormal,\n\tout vec3 outReflectance,\n\tout vec3 outEmission,\n\tconst vec3 rayOrigin,\n\tconst vec3 rayDirection){\n\tconst float rayLength = 10000.0f;\n\tfloat closestD = rayLength;\n\tvec3 closestN = vec3(0.0f, 1.0f, 0.0f);\n\tfor(int i = 0; i < 18; ++i){\n\t\tuvec3 t = ts[i];\n\t\tvec3 n;\n\t\tfloat d = calculateDistanceToIntersection(\n        \tn, rayOrigin, rayDirection, closestD, vs[t.x], vs[t.y], vs[t.z]);\n\t\tif(0.0f <= d){\n\t\t\tclosestD = d;\n\t\t\tclosestN = n;\n\t\t}\n\t}\n\tif(closestD < rayLength){\n\t\toutDistance = closestD;\n\t\toutNormal = (0.0f < dot(rayDirection, closestN)) ? -closestN : closestN;\n\t\toutReflectance = vec3(0.95f);\n\t\toutEmission = vec3(0.0f);\n\t}else{\n\t\toutDistance = -1.0f;\n\t\toutNormal = closestN;\n\t\toutReflectance = vec3(0.0f);\n\t\t//sky\n\t\tfloat t = (rayDirection.y + 1.0f) * 0.5f;\n\t\toutEmission = (1.0f - t) * vec3(1.0f) + t * vec3(0.25f, 0.49f, 1.0f);\n        outEmission *= 2.0f;\n\t}\n}\nfloat calculateRandom(const vec2 uv, const vec2 offset){\n\treturn fract(sin(dot(uv, vec2(12.9898f, 78.233f) + offset)) * 43758.5453123f);\n}\nvec3 calculateColor(\n\tconst vec3 rayOrigin, const vec3 rayDirection, const int tryIndex,\n    const vec2 uv)\n{\n\tvec3 attenuation = vec3(1.0f);\n\tvec3 color = vec3(0.0f);\n\tvec3 ro = rayOrigin;\n\tvec3 rd = rayDirection;\n\tfor(int i = 0; i < 4; ++i){\n\t\tfloat d;\n\t\tvec3 n;\n\t\tvec3 r;\n\t\tvec3 e;\n\t\ttraceRay_(d, n, r, e, ro, rd);\n\t\tcolor += e * attenuation;\n\t\tattenuation *= r;\n\t\tif(d < 0.0f){\n\t\t\tbreak;\n\t\t}else{\n\t\t\tro += rd * d;\n\t\t\t//diffuse\n\t\t\t{\n\t\t\t\tfloat r1 = 2.0f * PI * calculateRandom(uv, vec2(0.135f, -0.335f) * float(i + tryIndex));\n\t\t\t\tfloat r2 = calculateRandom(uv, vec2(0.397f, 0.7131f) * float(i * 3 + tryIndex * 5));\n\t\t\t\tfloat r2s = sqrt(r2);\n\t\t\t\tvec3 u;\n\t\t\t\tu = cross((0.1f < abs(n.x)) ? vec3(0.0f, 1.0f, 0.0f) : vec3(1.0f, 0.0f, 0.0f), n);\n\t\t\t\tu = normalize(u);\n\t\t\t\tvec3 v;\n\t\t\t\tv = cross(n, u);\n\t\t\t\tvec3 d;\n\t\t\t\td = u * cos(r1) * r2s;\n\t\t\t\td += v * sin(r1) * r2s;\n\t\t\t\td += n * sqrt(1.0f - r2);\n\t\t\t\td = normalize(d);\n\t\t\t\trd = d;\n\t\t\t}\n\t\t\tro += rd * 0.001f;\n\t\t}\n\t}\n\treturn color;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 uv = vec3(fragCoord / iResolution.xy, 1.0f);\n\tvec3 rayDirection;\n    vec3 rayOrigin;\n    vec4 doorTransforms[2];\n    int count = int(iTime * 30.0f);\n    {\n        rayDirection.x = dot(vec3(0.1056740f, 0.0012600135f, -0.013103187f), uv);\n        rayDirection.y = dot(vec3(-0.2151858e-9f, 0.064909114f, -0.037252731f), uv);\n        rayDirection.z = dot(vec3(0.046684937f, -0.0028521137f, -0.1132823f), uv);\n        rayOrigin = vec3(-2.5776574f, 1.6850278f, -5.0421361f) + rayDirection;\n        rayDirection = normalize(rayDirection);\n        float rad = (sin(float(count & 0x1ff) / 511.0f * PI * 4.0f) * 0.5f + 0.5f) * PI * 0.75f;\n        float c = cos(rad);\n        float s = sin(rad);\n        vec3 p = vec3(5.0f, -0.1f, -12.549999f);\n        doorTransforms[0] = vec4(c, 0.0f, s, -p.x * c - p.z * s + p.x);\n        doorTransforms[1] = vec4(-s, 0.0f, c, p.x * s - p.z * c + p.z);\n\t}\n\tvs[0] = vec3(-5.0f, -0.10f, 5.0f);\n\tvs[1] = vec3(-5.0f, -0.10f, -15.0f);\n\tvs[2] = vec3(5.0f, -0.10f, 5.0f);\n\tvs[3] = vec3(5.0f, -0.10f, -15.0f);\n\tvs[4] = vec3(-5.0f, 3.90f, 5.0f);\n\tvs[5] = vec3(-5.0f, 3.90f, -15.0f);\n\tvs[6] = vec3(5.0f, 3.90f, 5.0f);\n\tvs[7] = vec3(5.0f, 3.90f, -15.0f);\n\tvs[8] = vec3(5.0f, -0.10f, -12.549999f);\n\tvs[9] = vec3(5.0f, -0.10f, -13.750f);\n\tvs[10] = vec3(5.0f, 1.90f, -12.549999f);\n\tvs[11] = vec3(5.0f, 1.90f, -13.750f);\n\tvs[12] = vec3(5.0f, -0.10f, -12.549999f);\n\tvs[13] = vec3(4.1514706f, -0.10f, -11.701471f);\n\tvs[14] = vec3(5.0f, 1.90f, -12.549999f);\n\tvs[15] = vec3(4.1514706f, 1.90f, -11.701471f);\n\tts[0] = uvec3(6, 10, 7);\n\tts[1] = uvec3(5, 4, 7);\n\tts[2] = uvec3(0, 3, 1);\n\tts[3] = uvec3(2, 3, 0);\n\tts[4] = uvec3(7, 3, 5);\n\tts[5] = uvec3(5, 1, 4);\n\tts[6] = uvec3(7, 4, 6);\n\tts[7] = uvec3(5, 3, 1);\n\tts[8] = uvec3(4, 1, 0);\n\tts[9] = uvec3(11, 9, 3);\n\tts[10] = uvec3(7, 11, 3);\n\tts[11] = uvec3(7, 10, 11);\n\tts[12] = uvec3(10, 2, 8);\n\tts[13] = uvec3(6, 2, 10);\n\tts[14] = uvec3(14, 12, 15);\n\tts[15] = uvec3(15, 12, 13);\n\tts[16] = uvec3(4, 0, 6);\n\tts[17] = uvec3(6, 0, 2);\n\tfor(int i = 12; i <= 15; ++i){//rotate door\n\t\tvec4 t = vec4(vs[i - 4], 1.0f);\n\t\tvs[i].x = dot(doorTransforms[0], t);\n\t\tvs[i].z = dot(doorTransforms[1], t);\n\t}\n\tint spp = 8;\n\tvec3 c = vec3(0.0f);\n\tfor(int i = 0; i < spp; ++i){\n\t\tc += calculateColor(rayOrigin, rayDirection, i + count, uv.xy);\n\t}\n\tfragColor.xyz = c * 1.0f / float(spp);\n\tfragColor.xyz = pow(fragColor.xyz, vec3(1.0f / 2.2f));\n\tfragColor.w = 1.0f;\n}","name":"Image","description":"","type":"image"}]}