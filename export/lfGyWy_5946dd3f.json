{"ver":"0.1","info":{"id":"lfGyWy","date":"1732568789","viewed":39,"name":"trippyspin","username":"bombblob","description":"alternating spins create foreground effect","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["illusion","trippy","spin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Get normalized coordinates (-1 to 1)\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y;\n    \n    // Calculate angle and distance from the center\n    float angle = atan(uv.y, uv.x);\n    float distance = length(uv);\n    if (distance < 0.25 || distance > 0.75) {\n        angle += distance;\n    } else {\n        angle -= distance;\n        angle *= -1.;\n    }\n\n    // Spin effect over time\n    float time = iTime * 2.0;\n    angle += time;\n\n    // Create line pattern with a sine function\n    float numLines = 5.0; // Number of lines\n    float lineWidth = 2.; // Width of each line\n    float linePattern = abs(sin(angle * numLines)); // Line intensity\n\n    // Fade lines as they move away from the center\n    float fade = 1.;// smoothstep(0.9, 0.0, distance);\n\n    // Combine pattern and fade\n    float intensity = smoothstep(lineWidth, 0.0, linePattern) * fade;\n\n    // Generate rainbow colors based on angle and time\n    vec3 color = vec3(1,1,1);// 0.5 + 0.5 * cos(angle * vec3(1.0, 0.5, 0.25) + vec3(0.0, 2.0, 4.0) + time);\n\n    // Apply intensity to color\n    fragColor = vec4(color * intensity, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}