{"ver":"0.1","info":{"id":"XlGSDd","date":"1487301056","viewed":104,"name":"n-powered Mandelbrot","username":"yumcyawiz","description":"n-powered","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//math\nvec2 cmult(vec2 z1, vec2 z2) {\n    return vec2(z1.x*z2.x - z1.y*z2.y, z1.x*z2.y + z1.y*z2.x);\n}\nvec2 cpow(vec2 z, float a) {\n    float r = length(z);\n    float arg = atan(z.y, z.x);\n    \n    r = pow(r, a);\n    arg *= a;\n    \n    return vec2(r*cos(arg), r*sin(arg));\n}\n\n\nconst int maxIter = 300;\nfloat mandelbrot(vec2 c, float n) {\n    vec2 z = vec2(0.0, 0.0);\n    vec2 zd = vec2(0.0, 0.0);\n    for(int i = 0; i < maxIter; i++) {\n        if(length(z) > 10.0) break;\n        zd = n*cmult(cpow(z, n-1.0), zd) + vec2(1.0, 0.0);\n        z = cpow(z, n) + c;\n    }\n    \n    float d = 0.5*length(z)*log(length(z))/length(zd);\n    return d;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 offset = vec2(-0.749, 0.101);\n    float scale = 1.0/pow((0.01*float(iFrame)), 1.0);\n    scale = 1.0;\n\tvec2 uv = scale*(2.0*fragCoord.xy - iResolution.xy) / iResolution.y + offset;\n    \n    float d = mandelbrot(uv, float(iTime)/2.0 + 1.0);\n    float color = clamp(8.0*d/scale, 0.0, 1.0);\n    color = pow(color, 0.2);\n    \n\tfragColor = vec4(vec3(color), 1.0);\n}","name":"Image","description":"","type":"image"}]}