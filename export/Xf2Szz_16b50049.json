{"ver":"0.1","info":{"id":"Xf2Szz","date":"1705976206","viewed":75,"name":"Plaid Lava Lamp","username":"gregkrsak","description":"It's like a lava lamp, only plaid! Let it warm up a bit.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["retro","pattern","plaid","60s"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* \n * Plaid Lava Lamp\n * https://www.shadertoy.com/view/Xf2Szz\n *\n * Created by Greg M. Krsak (greg.krsak@gmail.com)\n * Jan. 22, 2024\n * Feel free to use this in your own personal or commercial projects\n *\n */\n\n\n//\n// HELPER FUNCTIONS\n//\n\n/* Shout-out to Filmic Studios for this tone map algorithm */\nvec3 filmicStudiosToneMap(vec3 rgb)\n{\n\trgb = max(vec3(0.0), rgb - vec3(0.004));\n\trgb = (rgb * (6.2 * rgb + vec3(0.5))) / \n          (rgb * (6.2 * rgb + vec3(1.7)) + vec3(0.06));\n\treturn rgb;\n}\n\n\n//\n// SHADER\n//\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Scale pixel coordinates\n    float zoom = 2000000.0;\n    vec2 newCoord = fragCoord / zoom;\n\n    // Color band modifiers\n    float bandThickness = 0.5;\n    float contrast = 5.0;\n    \n    // Wave modifiers\n    float waveScalar = 16.0;\n    float timeScalar = 10.0;\n    float coordinateScalar = timeScalar * iTime;\n    \n    // Create some waves\n    float alphaWave = waveScalar * cos(coordinateScalar * newCoord.y);\n    float betaWave = waveScalar * sin(coordinateScalar * newCoord.x);\n    float gammaWave = waveScalar * cos(coordinateScalar * (newCoord.x + newCoord.y));\n    \n    // Blend those waves together\n    float distortionWave1 = alphaWave + betaWave;\n    float distortionWave2 = betaWave + gammaWave;\n    float distortionWave3 = alphaWave + gammaWave;\n    \n    // Set the R, G, and B color bar offsets\n    float redOffset = distortionWave1;\n    float greenOffset = distortionWave2;\n    float blueOffset = distortionWave3;\n    \n    // Vectorize those three scalars\n    vec3 rgbOffset = vec3(redOffset, greenOffset, blueOffset);\n    \n    // Compute the output color\n    vec3 funkiness = cos(iDate[3] * newCoord.xyx + rgbOffset);\n    vec3 outputColor = filmicStudiosToneMap(bandThickness + contrast * funkiness);\n\n    // Output to screen\n    fragColor = vec4(outputColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}