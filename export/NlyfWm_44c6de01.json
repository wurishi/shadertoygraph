{"ver":"0.1","info":{"id":"NlyfWm","date":"1674529252","viewed":194,"name":"Pixel Windfaker Worley","username":"jsfehler","description":"Using worley noise instead of a texture for noise.\n\nTrying to replicate the more delicate lighting of complex pixel art.\n\nInspired by https://www.deviantart.com/oni1ink/art/Tutorial-How-to-draw-Water-645199166","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","water","worley","zelda","toon","pixellate","windwaker","voronoiegde"],"hasliked":0,"parentid":"sdSGzz","parentname":"Pixel Windfaker Water"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 firstColorlo = vec3(.18,.47,.86);\nvec3 middleColorlo = vec3(.16,.65,1.0);\nvec3 endColorlo = vec3(.54,1.0,1.0);\n\nvec3 firstColorlt = vec3(.08,.38,.63);\nvec3 middleColorlt = vec3(.16,.65,1.0);\nvec3 endColorlt = vec3(.54,1.0,1.0);\n\nfloat densityLayer1 = 10.0;\nfloat densityLayer2 = 6.0;\n\nint pixellateX = 5;\nint pixellateY = 4;\n\n// https://www.shadertoy.com/view/wt2cWK\nvec2 pseudoRand(vec2 p) {\n\treturn fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\n// https://www.shadertoy.com/view/sldBDs\nfloat hash( vec2 f )\n{   uvec2 x = uvec2( floatBitsToUint(f.x), floatBitsToUint(f.y) ),\n          q = 1103515245U * ( x>>1U ^ x.yx    );\n    return float( 1103515245U * (q.x ^ q.y>>3U) ) / float(0xffffffffU);\n}\n\nfloat worley(vec2 uv)\n{\n    vec2 index = floor(uv);\n    uv = fract(uv);\n\n    float minDist = 2.0;\n    for (float y = -1.0; y<=1.0; y++)\n    {\n        for (float x=-1.0; x<=1.0; x++)\n        {\n            float cellHash = hash(index + vec2(x,y));\n            float cellTime = iTime * (cellHash * 2.0 + 0.1);\n            vec2 offset = vec2(cos(cellTime + cellHash*100.0), sin(cellTime + cellHash))*0.5;\n            float dist = distance(vec2(0.5)+vec2(x,y)+offset, uv);\n\n            minDist = min(minDist, dist);\n        }\n    }\n    return minDist;\n}\n\n// https://iquilezles.org/articles/voronoilines\nvec3 vorobord( in vec2 x ) {\n    vec2 idx = floor(x);\n    vec2 pad = fract(x);\n\n\tvec2 selfcell, closecell;\n\n    float mindist = 4.0;\n    for( float x = -1.0; x <= 1.0; ++x) {\n        for(float y = -1.0; y <= 1.0; ++y) {\n            vec2 offset = vec2(x, y);\n            vec2 self = pseudoRand( idx + offset );\n            self = 0.5 + 0.5*sin( iTime * self * .5 );\n            vec2 neighbor = offset + self - pad;\n            float dist = length(neighbor);\n\n            if (dist < mindist) {\n                mindist = dist;\n                closecell = neighbor;\n                selfcell = offset;\n            }\n        }\n    }\n\n    mindist = 4.0;\n    for(float x = -2.0; x <= 2.0; ++x) {\n        for(float y = -2.0; y <= 2.0; ++y) {\n            vec2 offsetcell = selfcell + vec2(x, y);\n            vec2 self = pseudoRand(idx + offsetcell);\n            self = 0.5 + 0.5*sin(iTime * self  * 0.5);\n            vec2 neighbor = offsetcell + self - pad;\n\n            if(length(closecell - neighbor) > 0.00001){\n                mindist = sin(min(mindist, dot(0.5 * (closecell + neighbor), normalize(neighbor - closecell))));\n            }\n        }\n    }\n\n    return vec3(mindist, closecell);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    // Pixellate\n    fragCoord.x -= (float(int(fragCoord.x * 1.0) % pixellateX) / 1.0);\n    fragCoord.y -= (float(int(fragCoord.y * 1.0) % pixellateY) / 1.0);\n\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Add noise\n    float worleyNoise = worley(uv * 20.0) * worley(uv * 22.0);\n    worleyNoise = smoothstep(0.01, 1.0, worleyNoise);\n\n    // Animate the texture for a water ripple\n    float offset = smoothstep(.0, 1., sin(iTime * .25));\n \n    vec3 displ = worleyNoise + vec3(0.4, 0.23, .25) * sin(iTime + uv.y);\n    displ.x -= (offset * 5.5);\n    displ.y += (offset * 0.25);\n    \n    // Create a voronoi pattern\n    vec3 layerone = vorobord(densityLayer1 * mix(uv, displ.rg, 0.12));\n    vec3 layertwo = vorobord(densityLayer2 * mix((uv + .5), displ.rg, 0.1));\n    \n    // Color the the upper portion\n    // Based on y position, fade from white to blue\n    vec3 upperColor1 = vec3(.24, .8, 1.0);\n    upperColor1 += (uv.y/2.);\n\n    vec3 upperColor2 = vec3(.16, .65, 1.);\n    upperColor2 += (uv.y);\n\n    // Gradient a base water color\n    // Mercilessly ganked from https://www.shadertoy.com/view/ttB3Rh\n    vec2 xy = fragCoord.xy / iResolution.xy;\n    float h = 0.5; // adjust position of middleColor\n    vec3 waterColorlo = mix(mix(firstColorlo, middleColorlo, xy.y/h), mix(middleColorlo, endColorlo, (xy.y - h)/(1.0 - h)), step(h, xy.y));\n    vec3 waterColorlt = mix(mix(firstColorlt, middleColorlt, xy.y/h), mix(middleColorlt, endColorlt, (xy.y - h)/(1.0 - h)), step(h, xy.y));  \n\n    // Mix the upper layer with water color\n    vec3 locol = mix(upperColor1, waterColorlo, smoothstep(0.09, 0.1, layerone.x * 2.2));\n    locol = mix(upperColor2, locol, smoothstep(0.09, 0.1, layerone.x * 4.0));\n    \n    // Mix the lower layer with water color\n    vec3 ltcol = mix(vec3(.8,.8,1.0), vec3(1.0, 1.0, 1.0), smoothstep(0.04, 0.04, layertwo.x * 0.3));\n    ltcol = mix(waterColorlt, ltcol, smoothstep(0.09, 0.1, layertwo.x * 2.0));\n    \n    // Mix uppper water with lower water\n    vec3 vorolayers = mix(locol, ltcol, 0.3);\n\n    fragColor = vec4(vorolayers, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}