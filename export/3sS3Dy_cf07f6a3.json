{"ver":"0.1","info":{"id":"3sS3Dy","date":"1549844889","viewed":219,"name":"Guns, Lots of guns","username":"cbrpnk","description":"Everyday","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","guns"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot(float a)\n{\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat cap(vec3 p, float l, float w)\n{\n    return length(p-vec3(0., clamp(p.y, -l, l), 0.)) - w;\n}\n\nfloat torus(vec3 p, float r, float w)\n{\n    return sqrt(pow(length(p.xz)-r, 2.) + pow(p.y, 2.)) - w;\n}\n\nfloat map(vec3 p)\n{\n    \n    p.xz *= rot(iTime*.5);\n    p -= vec3(0., 0., 3.);\n    vec3 id = floor(p);\n    \n    p = mod(p+vec3(11.), 20.)-vec3(11.);\n    \n    vec3 px = vec3(abs(p.x), p.y, p.z);\n    \n    float barrel = max(max(cap(p.xzy, 1., .1), -cap(p.xzy, 2., .05)), p.z-.5);\n    vec3 hfp = px*13.;\n    hfp = mod(hfp+vec3(.5), 2.)-vec3(.5);\n    float holes = (length(hfp)-1.)/13.;\n    float grid = max(max(max(cap(p.xzy, 1., .18), -cap(p.xzy, 2., .16)), p.z-.4), -holes);\n    barrel = min(barrel, grid);\n    \n    // Body\n    vec3 bp = px.xzy;\n    bp.z *= .4;\n    float body = max(max(cap(bp-vec3(0., -.5, -.1), .5, .3)/2., (p.zy*rot(-.5)).x-.1), px.x-.18);\n    float bigBody = cap(bp-vec3(0., -3., -.2), 2.5, .4);\n    float frontHole = cap(px.xzy-vec3(0., -1.5, -.8), .6, .5);\n    float backHole = cap(px.xzy-vec3(0., -4., -.8), .6, .5); // Backhole lol\n    float topRidge = cap(px.xzy-vec3(0., -1.4, .49), 5., .08);\n    float sideRidge = cap(px.xzy-vec3(0.2, -1.8, 0.), 5., .03);\n    vec3 fdp = px;\n    fdp.xz *= rot(-.5);\n    float fing1 = cap(fdp.yxz-vec3(-.7, -1.8, -0.01), 3., .13);\n    float fing2 = cap(fdp.yxz-vec3(-.9, -1.8, -0.05), 3., .13);\n    float fing3 = cap(fdp.yxz-vec3(-1.1, -1.8, -0.1), 3., .13);\n    float fing4 = cap(fdp.yxz-vec3(-1.3, -1.8, -0.15), 3., .13);\n    float t = max(torus(p-vec3(0., -.9, -2.8), .65, .48), -p.y-1.25);\n    body = max(max(max(max(max(max(max(max(max(max(max(min(body, bigBody), (px.x-.21)), -topRidge), -sideRidge), -frontHole), -backHole), -fing1), -fing2), -fing3), -fing4), -t), -p.z-5.75);\n    \n    // Top thing\n    vec3 hp = px-vec3(0., .3, -3.6);\n    float handle = cap(hp.xzy, 2., .5);\n    float handleIndent = cap(px.xzy-vec3(0., -3.3, .95), 2., .5);\n    float inIndent = cap(px.xzy-vec3(0., -3.4, .85), 3., .3);\n    float bigInd = cap(px.xzy-vec3(0.4, -4., 0.18), 1.5, .25);\n    float backInd = cap(px-vec3(0., 1.6, -6.05), 1.5, .2);\n    float tube = cap(px-vec3(0.2, .2, -3.), .2, .05);\n    vec3 wp = px - vec3(0.25, 0., 1.);\n    wp *= 10.;\n    wp.z = mod(wp.z+2., 1.)-2.;\n    float wiggles = cap(wp-vec3(0., 5.5, -1.5), .25, .5)/10.;\n    handle = min(max(max(max(max(max(max(max(handle, hp.x-.25), -handleIndent), -inIndent), -wiggles), -bigInd), -p.z-5.9), -backInd), tube);\n    \n    // Trigger\n    vec3 tp = px;\n    float trigger = cap(px.xzy-vec3(0., -2.4, -.55), .2, .2);\n    float curve = cap(px.yxz-vec3(-.4, 0., -1.8), .2, .5);\n    float curve2 = cap(px.yxz-vec3(-.47, 0., -2.58), .2, .15);\n    float curve3 = cap(px.yxz-vec3(-.53, 0., -2.15), .2, .15);\n    trigger = max(max(max(max(trigger, -curve), px.x-.05), -curve2), -curve3);\n    \n    // Switch\n    float swit = length(p-vec3(0.2, -.4, -2.8)) -.06;\n    \n    float gun = min(min(min(min(body, barrel), handle), trigger), swit);\n    // Bullet added by scratch13764\n    float bullet = length(p - vec3(0,0,fract(iTime)*10.))-.07; return min(gun , bullet);\n    return min(gun , bullet);\n}\n\nfloat march(vec3 ro, vec3 rd)\n{\n    float t = 0.;\n    for(int i=0; i<328; ++i) {\n    \tfloat d = map(ro+rd*t);\n        if(d < .001) break;\n        if(t > 200.) return -1.;\n        t += d*.8;\n    }\n    return t;\n}\n\nvec3 getNormal(vec3 p)\n{\n    vec2 eps = vec2(0.001, 0.);\n    return normalize(vec3(\n    \tmap(p+eps.xyy) - map(p-eps.xyy),\n        map(p+eps.yxy) - map(p-eps.yxy),\n        map(p+eps.yyx) - map(p-eps.yyx)\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy - vec2(.5);\n    uv.x *= iResolution.x/iResolution.y;\n    //uv = abs(uv);\n\t\n    vec3 eye = vec3(0., -.25, 5.5);\n    vec3 dir = normalize(vec3(uv.x, uv.y, -1.));\n    eye.y += sin(iTime*.5)*.15;\n    dir.yz *= rot(cos(iTime*.5)*.15);\n    float d = march(eye, dir);\n    vec3 p = eye+dir*d;\n    \n    vec3 col;\n    if(d < 0.) {\n        col = vec3(1.);\n    } else {\n    \tvec3 normal = getNormal(p);\n        col = vec3(1.);\n        col *= vec3(.1) * max(0., dot(normal, vec3(0., 1., 1.)));\n        col += vec3(.8, .8, 1.) * .5*max(0., dot(normal, vec3(0., 1., 1.)));\n        col *= vec3(.2) * pow(max(0., dot(normal, -dir)), 20.);\n        col += vec3(.8, .8, 1.) * .1*max(0., dot(normal, vec3(1., 1., 0.)));\n    }\n\n    // Output to screen\n    col *= 1.-length(uv)*.7;\n    col = sqrt(col);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}