{"ver":"0.1","info":{"id":"ltSfRW","date":"1514791135","viewed":1118,"name":"Voronoi Stained Glass","username":"JackSH3","description":"Voronoi Stained Glass.\n\nCombined and bit modified following great codes:\n  Voronoi - distances by iq\n    https://www.shadertoy.com/view/ldl3W8\n  \n  RayTraced Bumpmaps by demofox\n    https://www.shadertoy.com/view/ldj3zz\n\n2018/1/3 add specular.","likes":45,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","refraction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright © 2017 Shuichi Hayashi\n\n// License of original voronoi implementation (https://www.shadertoy.com/view/ldl3W8)\n//\n// The MIT License\n// Copyright © 2013 Inigo Quilez\n// Permission is hereby granted, free of charge,to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Bump mapping impmentation is from https://www.shadertoy.com/view/ldj3zz written by demofox.\n// The license of this part follows the original code's one.\n\n#define ANIMATE\n//#define SHOW_REFRACTION_ONLY\n//#define SHOW_REFLECTION_ONLY\n//#define SHOW_WITHOUT_SPECULAR\nconst float ANIMATION_RADIUS = 0.4; // up to 0.5\nconst float NUM_CELLS = 10.0;\nconst float IOR = 1.5;\nconst float F0 = ((1.0-IOR)/(1.0+IOR)) * ((1.0-IOR)/(1.0+IOR));\nconst float F90 = 1.0;\nconst float BASE_SHARPNESS = 1.0;\nconst float cubemapPower = 15.0;\nconst float chromaFactor = 6.0;\nconst float toneFactor = 0.55;\nconst float voronoiColorFactor = 1.0 / cubemapPower * chromaFactor;\n\nvec2 hash( vec2 p ) { p=vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))); return fract(sin(p)*18.5453); }\nvec2 hash2( vec2 p )\n{\n\t// texture based white noise\n\t//return textureLod( iChannel0, (p+0.5)/256.0, 0.0 ).xy;\n\t\n    // procedural white noise\t\n\treturn fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nfloat rand(vec2 co) { return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }\n\n// from https://www.shadertoy.com/view/ldl3W8 (bit modified to return desired values)\n// returns,\n//   x: distance to nearest neighbor\n//   y: cell id\n//   z: distance to border\nvec3 voronoi( in vec2 x )\n{\n    vec2 n = floor(x);\n    vec2 f = fract(x);\n\n    //----------------------------------\n    // first pass: regular voronoi\n    //----------------------------------\n\tvec2 mg, mr;\n    float id;\n\n    float md = 8.0;\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2 g = vec2(float(i),float(j));\n\t\tvec2 o = hash2( n + g );\n\t\t#ifdef ANIMATE\n        vec2 ao = (1.-ANIMATION_RADIUS) + ANIMATION_RADIUS*sin( iTime + 6.2831*o );\n        #else\n        vec2 ao = o;\n        #endif\t\n        vec2 r = g + ao - f;\n        float d = dot(r,r);\n\n        if( d<md )\n        {\n            md = d;\n            mr = r;\n            mg = g;\n            id = o.x+o.y;\n        }\n    }\n\n    //----------------------------------\n    // second pass: distance to borders\n    //----------------------------------\n    md = 8.0;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = mg + vec2(float(i),float(j));\n\t\tvec2 o = hash2( n + g );\n\t\t#ifdef ANIMATE\n        o = (1.0-ANIMATION_RADIUS) + ANIMATION_RADIUS*sin( iTime + 6.2831*o );\n        #endif\t\n        vec2 r = g + o - f;\n\n        if( dot(mr-r,mr-r)>0.00001 )\n        md = min( md, dot( 0.5*(mr+r), normalize(r-mr) ) );\n    }\n\n    return vec3( length(mr), id, md );\n}\n\n// based on https://www.shadertoy.com/view/ldj3zz\nvec3 bump(vec3 surfaceNormal, vec2 uv) {\n\t// bump mapping\n\tvec3 uaxis = normalize(cross(vec3(0.0,1.0,0.0), surfaceNormal));\n\tvec3 vaxis = normalize(cross(uaxis, surfaceNormal));\n\tmat3 mattanspace = mat3\n\t(\n\t\tuaxis,\n\t\tvaxis,\n\t\tsurfaceNormal\n\t);\n\t\n\tfloat delta = -1.0/512.0;\n\tfloat A = texture(iChannel1, uv + vec2(0.0, 0.0)).x;\n\tfloat B = texture(iChannel1, uv + vec2(delta, 0.0)).x;\n    float C = texture(iChannel1, uv + vec2(0.0, delta)).x;\n\t\n    // animate sharpness\n    float sharpness = BASE_SHARPNESS;\n    float tm = mod(iTime/5.0, 3.5);\n    if (tm < 1.0) {\n\t    sharpness += 32.0 * ((cos(fract(tm)*6.2831)) * -0.5 + 0.5);\n    }\n\tvec3 norm = normalize(vec3(B - A, C - A, sharpness));\n\t//vec3 norm = normalize(vec3(B - A, C - A, 1.0));\n\t\t\n\treturn normalize(mattanspace * norm);\n}\n\n#define PI 3.1415926\n\nfloat F_Schlick(in float f0, in float f90, in float u) {\n    return f0 + (f90 - f0) * pow(1.0 - u, 5.0);\n}\n\nfloat saturate(in float x) {\n    return clamp(x, 0.0, 1.0);\n}\nvec3 saturate(in vec3 x) {\n    return clamp(x, 0.0, 1.0);\n}\n\n// Sampling 3d normal vector on a hemisphere according to parameter e.\n// distribute uniformly when e == 0\n//\n// reference:\n//   Shirley, Realistic Ray Tracing\n//   Suffern, Ray Tracing from the Ground Up, 7.3\nvec3 sampleHemisphere(in vec2 seed0, in vec2 seed1, in float e) {\n    float r1 = 2.0 * PI * rand(seed0); // phi(azimuth angle)\n    float r2 = rand(seed1); // theta(polar angle)\n    \n    float c = pow(1.0 - r2, 1.0 / (e + 1.0));\n    float s = sqrt(1.0 - c * c);\n    float rx = cos(r1) * s;\n    float ry = sin(r1) * c;\n    float rz = c;\n    return vec3(rx, ry, rz);\n}\n\n// vec3 luminance = BSDF(...) * saturate(dot(N, L)) * lightColor * att;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy/max(iResolution.x,iResolution.y); // スクリーン長辺基準で[0.0, 1.0]\n#if 0\n    fragColor= vec4(hash(floor(p*10.0)), 0, 1);\n    return;\n#endif\n\n    // compute voronoi pattern\n    vec3 c = voronoi( /*(14.0+ * sin(0.2*iTime))*/ p*NUM_CELLS );\n\n    // colorize\n    vec3 col = 0.5 + 0.5*cos( c.y*6.2831 + vec3(0.0,1.0,2.0) );\n    col *= voronoiColorFactor;\n\n    // calculate ray direction\n    vec2 pos = (fragCoord.xy*2.0 -iResolution.xy) / iResolution.xy;\n    vec3 camAt = vec3(0, 0, -4.0);\n    vec3 camTarget = vec3(0, 0.5, 0);\n    vec3 camDir = normalize(camTarget - camAt);\n    vec3 camRight = cross(camDir, vec3(0,1,0));\n    vec3 camUp = normalize(cross(camRight, camDir));\n    float focus = 1.0;\n    float aspect = iResolution.y/iResolution.x;\n    vec3 rayDir = normalize(camRight*pos.x + camUp*pos.y*aspect + camDir*focus);\n\n    // generate normal\n    vec2 seed0 = vec2(c.y*0.34567, c.y*0.78901);\n    vec2 seed1 = vec2(c.y*0.45678, c.y*0.89012);\n    //vec3 n = -camDir;\n    vec3 n = cos( c.y*6.2831 + vec3(1.0,2.0,3.0) );\n    //vec3 n = sampleHemisphere(seed0, seed1, 0.0); // random normal\n    n = normalize( normalize(n) + -20.0*camDir ); // get toward to camera\n    n = bump(n, p);\n\n// for debug\n//fragColor = vec4(0, 0, n.b*0.5+0.5, 1.0);\n//fragColor = vec4(rayDir*0.5+0.5, 1.0);\n//fragColor = vec4(refract(rayDir, n, 1.0)*0.5+0.5, 1.0);\n//fragColor = vec4(texture( iChannel0, rayDir).rgb, 1.0);\n//return;\n\n    // rotate camera and normal\n    float rot = iTime*6.2831 * -0.01;\n    mat2 mRot = mat2(cos(rot), -sin(rot), sin(rot), cos(rot));\n    rayDir.xz = mRot * rayDir.xz;\n    n.xz = mRot * n.xz;\n\t//fragColor = vec4((n+1.0)*0.5, 1.0);\n\t//return;\n\n    // transmitted color\n    vec3 tr = refract(rayDir, n, 1.0/IOR);\n    vec3 tColor = texture( iChannel0, tr ).rgb;\n#ifdef SHOW_REFRACTION_ONLY\n\tfragColor = vec4(tColor.rgb, 1.0);\n    return;\n#endif\n    float thickness = smoothstep(0.0, 0.4, c.z);\n    thickness = pow((thickness), 0.25);\n#ifdef SHOW_BORDER_ONLY\n\tfragColor = vec4(thickness, thickness, thickness, 1.0);\n\treturn;\n#endif\n    tColor = (col * thickness) * (tColor*cubemapPower);\n    // add frame\n    float frame = smoothstep(0.015, 0.06, c.z);\n    tColor.rgb *= frame;\n\n    // reflected color\n    vec3 r = reflect(rayDir, n);\n    vec3 rColor = texture(iChannel0, r).rgb;\n    rColor *= cubemapPower;\n#ifdef SHOW_REFLECTION_ONLY\n    fragColor = vec4(rColor, 1.0);\n    return;\n#endif\n    rColor.rgb *= (0.3 + 0.7*frame);\n    \n    // combine refracted and reflected colors\n    float NdotV = dot(n, -rayDir);\n    float f = F_Schlick(F0, F90, NdotV);\n#ifdef SHOW_WITHOUT_SPECULAR\n    fragColor.rgb = tColor;\n    return;\n#endif\n    fragColor.rgb = (f * rColor) + (1.0 - (f * rColor)) * tColor;\n    //fragColor.rgb = f * rColor + (1.0-f) * tColor;\n    fragColor.rgb *= toneFactor;\n    fragColor.a = 1.0;\n}\n","name":"Image","description":"","type":"image"}]}