{"ver":"0.1","info":{"id":"XfKyWW","date":"1731878602","viewed":69,"name":"interconnected axis aligned pipe","username":"jt","description":"Each voxel has a random direction (x,y,z) by hash % 3.\nIf neighbor direction orthogonal then connect pipes.\nResults in a single, connected pipe-system without dead ends.\nFive grid-queries per voxel.","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["3d","noise","grid","voxel","random","box","dda","tiling","axis","packing","bar","aligned","pipe","orthogonal","connected","cuboid","labyrinth"],"hasliked":0,"parentid":"lcGyDD","parentname":"3d labyrinth of random corridors"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/XfKyWW interconnected axis aligned pipe\n// based on https://www.shadertoy.com/view/lcGyDD 3d labyrinth of random corridors, 2024 by jt\n// related to https://www.shadertoy.com/view/XfccRX random axis aligned boxes tiling\n// renderer https://www.shadertoy.com/view/lXGGR3 raymarch voxels with color\n\n// Each voxel has a random direction (x,y,z) by hash % 3.\n// If neighbor direction orthogonal then connect pipes.\n// Results in a single, connected pipe-system without dead ends.\n// Five grid-queries per voxel.\n\n// NOTE: Interior of pipe-intersections only approximate sdf.\n\n// tags: 3d, noise, grid, voxel, random, box, dda, tiling, axis, packing, bar, aligned, pipe, orthogonal, connected, cuboid, labyrinth, inter\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2,\n// implementing Chris Wellons https://nullprogram.com/blog/2018/07/31/\nuint lowbias32(uint x)\n{\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return x;\n}\n\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2,\n// implementing Chris Wellons https://nullprogram.com/blog/2018/07/31/\nuint triple32(uint x)\n{\n    x ^= x >> 17u;\n    x *= 0xed5ad4bbu;\n    x ^= x >> 11u;\n    x *= 0xac4c1b51u;\n    x ^= x >> 15u;\n    x *= 0x31848babu;\n    x ^= x >> 14u;\n    return x;\n}\n\n//#define HASH(u) lowbias32(u)\n#define HASH(u) triple32(u)\n\nuint uhash(uvec3 v)\n{\n    return HASH(v.x + HASH(v.y + HASH(v.z)));\n}\n\n#define DIR_X 0u\n#define DIR_Y 1u\n#define DIR_Z 2u\n\nuint get_direction(ivec3 v)\n{\n    return uhash(uvec3(v)) % 3u;\n}\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\nfloat line(vec3 p, vec3 a, vec3 b) // https://iquilezles.org/articles/distfunctions/\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa,ba)/dot(ba,ba), 0.0, 1.0);\n    return length(pa - ba*h);\n}\n\nfloat checker(vec3 p)\n{\n    return step(0.0, sin(p.x*pi)*sin(p.y*pi)*sin(p.z*pi));\n}\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n#define ITER_MAX 200u\n\nstruct result\n{\n    vec3 color;\n    float dist;\n};\n\nresult combine(result a, result b)\n{\n    if(a.dist < b.dist) return a;\n    return b;\n}\n\nresult make_shell_paint_inside(result r, float thickness, vec3 inside_color)\n{\n    if(r.dist < 0.0)\n    {\n        r.dist = -r.dist;\n        r.color = inside_color;\n    }\n\n    r.dist -= thickness;\n\n    return r;\n}\n\nresult map(ivec3 v, vec3 l) // unit grid: voxel = float(position), local = fract(position)\n{\n    result r = result(vec3(0), DIST_MAX); // signal to skip this voxel\n\n    float thickness = 0.01;\n    //float radius = 0.25 - thickness;\n    float radius = mix(0.25,0.5,0.5+0.5*cos(iTime)) - thickness;\n    if(all(lessThan(abs(v*2+1),2*ivec3(6,6,3))))\n    {\n        uint direction = get_direction(v);\n\n        switch(direction) // TODO: compactify if possible\n        {\n            case DIR_X:\n            {\n                r = combine(r, result(vec3(1,0,0),line(l,vec3(0,0.5,0.5),vec3(1,0.5,0.5))-radius));\n                if(get_direction(v+ivec3(0,-1,0)) == DIR_Y)\n                    r = combine(r, result(vec3(0,1,0),line(l,vec3(0.5),vec3(0.5,0,0.5))-radius));\n                if(get_direction(v+ivec3(0,+1,0)) == DIR_Y)\n                    r = combine(r, result(vec3(0,1,0),line(l,vec3(0.5),vec3(0.5,1,0.5))-radius));\n\n                if(get_direction(v+ivec3(0,0,-1)) == DIR_Z)\n                    r = combine(r, result(vec3(0,0,1),line(l,vec3(0.5),vec3(0.5,0.5,0))-radius));\n                if(get_direction(v+ivec3(0,0,+1)) == DIR_Z)\n                    r = combine(r, result(vec3(0,0,1),line(l,vec3(0.5),vec3(0.5,0.5,1))-radius));\n\n                break;\n            }\n            case DIR_Y:\n            {\n                r = combine(r, result(vec3(0,1,0),line(l,vec3(0.5,0,0.5),vec3(0.5,1,0.5))-radius));\n                if(get_direction(v+ivec3(-1,0,0)) == DIR_X)\n                    r = combine(r, result(vec3(1,0,0),line(l,vec3(0.5),vec3(0,0.5,0.5))-radius));\n                if(get_direction(v+ivec3(+1,0,0)) == DIR_X)\n                    r = combine(r, result(vec3(1,0,0),line(l,vec3(0.5),vec3(1,0.5,0.5))-radius));\n\n                if(get_direction(v+ivec3(0,0,-1)) == DIR_Z)\n                    r = combine(r, result(vec3(0,0,1),line(l,vec3(0.5),vec3(0.5,0.5,0))-radius));\n                if(get_direction(v+ivec3(0,0,+1)) == DIR_Z)\n                    r = combine(r, result(vec3(0,0,1),line(l,vec3(0.5),vec3(0.5,0.5,1))-radius));\n\n                break;\n            }\n            case DIR_Z:\n            {\n                r = combine(r, result(vec3(0,0,1),line(l,vec3(0.5,0.5,0),vec3(0.5,0.5,1))-radius));\n                if(get_direction(v+ivec3(-1,0,0)) == DIR_X)\n                    r = combine(r, result(vec3(1,0,0),line(l,vec3(0.5),vec3(0,0.5,0.5))-radius));\n                if(get_direction(v+ivec3(+1,0,0)) == DIR_X)\n                    r = combine(r, result(vec3(1,0,0),line(l,vec3(0.5),vec3(1,0.5,0.5))-radius));\n\n                if(get_direction(v+ivec3(0,-1,0)) == DIR_Y)\n                    r = combine(r, result(vec3(0,1,0),line(l,vec3(0.5),vec3(0.5,0,0.5))-radius));\n                if(get_direction(v+ivec3(0,+1,0)) == DIR_Y)\n                    r = combine(r, result(vec3(0,1,0),line(l,vec3(0.5),vec3(0.5,1,0.5))-radius));\n\n                break;\n            }\n            default:\n            ; // this should not happen\n        }\n\n        //r = make_shell_paint_inside(r, thickness, vec3(1));\n        r = make_shell_paint_inside(r, thickness, mix(vec3(0.2),vec3(0.8),checker(l*4.0)));\n    }\n\n    return r;\n}\n\nresult map(vec3 p)\n{\n    return map(ivec3(floor(p)), fract(p));\n}\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal(vec3 p)\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return normalize(k.xyy*map(p + k.xyy*h).dist +\n                     k.yyx*map(p + k.yyx*h).dist +\n                     k.yxy*map(p + k.yxy*h).dist +\n                     k.xxx*map(p + k.xxx*h).dist);\n}\n\n// NOTE: Apparently sign fails on some systems! Thanks to spalmer for debugging this!\nvec3 sgn(vec3 v) // WORKAROUND FOR COMPILER ERROR on some systems\n{\n    return step(vec3(0), v) * 2.0 - 1.0;\n}\n\nresult trace(vec3 ro, vec3 rd, float t0, float t1) // ray-march sdf handling discontinuities between voxels  (jt)\n{\n    result h;\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++) // finite loop originally suggested by pyBlob to avoid stalling if ray parallel to surface just above EPSILON\n    {\n        vec3 p = ro + rd * t;\n        h = map(p);\n        if(h.dist < EPSILON)\n            return result(h.color, t);\n\n        // NOTE: An extra step per voxel, use if sdf discontinuous between voxels\n        //       Could make this conditional by prefixing sth. like if(voxel_changed) // suggested by spalmer, see variant below\n        // constrain step to voxels (voxel-snap ray-march plugin by jt, thanks to Shane for the idea!)\n        {\n            // NOTE: assuming unit grid\n            // sgn(rd)*0.5 are the walls in ray direction, fract(p) - 0.5 is center of voxel\n            vec3 sd = (sgn(rd)*0.5 - (fract(p) - 0.5))/rd; // distances to voxel sides / walls\n            vec3 n = step(sd.xyz, min(sd.yzx, sd.zxy)); // component true if corresponding wall is nearest (at most one component true) NOTE: originally I used lessThanEqual, min from fb39ca4/kzy then switched to step, min by iq\n            float skip = dot(sd, vec3(n)) + EPSILON; // distance to next voxel: sum up all components, weighted by the nearest flag (assuming only one component is true this selects the nearest component)\n            h.dist = min(h.dist, skip); // constrain step to at most next block to handle sdf discontinuities between voxels\n        }\n\n        t += h.dist;\n    }\n\n    //return result(h.color, t); // stop on running out of iterations\n    return result(h.color, t1); // pass on running out of iterations\n}\n\n// NOTE: Don't forget to add +normal*EPSILON to the starting position\n//       to avoid artifacts caused by getting stuck in the surface\n//       due to starting at distance < EPSILON from the surface.\n//       (normal could be calculated here but that would most likely be redundant)\n//       Thanks to spalmer for pointing that out.\nfloat shadow(vec3 ro, vec3 rd, float t0, float t1)\n{\n    return trace(ro, rd, t0, t1).dist < t1 ? 0.0 : 1.0;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor ).dist;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    I = (2.0 * I - R) / R.y; // concise scaling thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    //float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    float pitch = pi - pi * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : 4.0/3.0 * pi / 2.0;\n\n    vec3 ro = vec3(0.0, 0.0,-12.5);\n    vec3 rd = normalize(vec3(I.xy, 2.0));\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n    ro.z += !demo ? 0.0 : 1.0;\n\n    //vec3 sky_color = mix(vec3(0,0.5,0.5),vec3(0,0,1),abs(rd.z));\n    //vec3 sky_color = mix(vec3(0.25,0.5,1),vec3(0,0,0.25),sqrt(abs(rd.z)));\n    vec3 sky_color = vec3(0);\n    vec3 color = vec3(1);\n    result r = trace(ro, rd, 0.0, DIST_MAX);\n    if(r.dist < DIST_MAX)\n    {\n        color *= r.color;\n        vec3 dst = ro + rd * r.dist;\n        vec3 n = normal(dst);\n\n        if(map(dst).dist < -EPSILON) color = vec3(1); // inside object (cut)\n\n        //color *= (n * 0.5 + 0.5);\n\n        vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n        //vec3 lightdir = normalize(vec3(3.0, 2.0, 1.0));\n        vec3 ambient = vec3(0.2);\n        float brightness = max(dot(lightdir, n), 0.0)*2.0;\n        if(brightness > 0.0)\n            brightness *= shadow(ro + rd * r.dist + n * 0.01, lightdir, 0.0, DIST_MAX);\n            //brightness *= softshadow(ro + rd * r.dist + n * 0.01, lightdir, 0.0, DIST_MAX, 20.0); // requires HIGH_QUALITY\n        color *= (ambient * calcAO(dst, n) + brightness);\n\n        if(brightness > 0.0)\n        {\n            float specular = pow(max(0.0, dot(n, normalize(-rd + lightdir))), 250.0);\n            color += specular;\n        }\n\n        //vec3 fog_color = vec3(0.2);\n        vec3 fog_color = sky_color;\n        color = mix(fog_color, vec3(color), exp(-pow(r.dist/25.0, 2.0))); // fog\n    }\n    else\n    {\n        color *= sky_color;\n    }\n\n    color = tanh(color); // roll-off overly bright colors\n    color = sqrt(color); // approximate gamma\n    fragColor = vec4(color, 1);\n}\n","name":"Image","description":"","type":"image"}]}