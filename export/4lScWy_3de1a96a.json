{"ver":"0.1","info":{"id":"4lScWy","date":"1509925353","viewed":77,"name":"Tutorial 8: Estado","username":"aaecheve","description":"Tutorial sobre almacenamiento de estado para curso CC7615","likes":0,"published":1,"flags":48,"usePreview":0,"tags":["tutorial","cc7615"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float _UbicacionEstado = 1.0;\n\nvec4 readMemory(float address)\n{\n    return texture(iChannel0, vec2(address+.5)/iChannelResolution[0].xy);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 estado = readMemory(_UbicacionEstado);\n    fragColor = vec4(estado.r,0.0,0.0,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int Key_A = 65;\nconst int Key_B = 66;\n\nconst float _UbicacionEstado = 1.0;\n\nfloat estado = 0.0;\n\n//Read as ASCII\nbool readKey( int key )\n{\n\tfloat keyVal = texture( iChannel1, vec2( (float(key)+.5)/256.0, .25 ) ).x;\n\treturn (keyVal>.5)?true:false;\n}\n\nvec4 readMemory(float address)\n{\n    return texture(iChannel0, vec2(address+.5)/iChannelResolution[0].xy);\n}\n\nbool writesMemory(in vec2 fragCoords, in float idx)\n{\n \tvec2 idx2D = vec2(idx);\n   \n    return \n        fragCoords.x < (idx2D.x + 1.0) \n        && fragCoords.x > (idx2D.x - 1.0)\n        && fragCoords.y < (idx2D.y + 1.0) \n        && fragCoords.y > (idx2D.y - 1.0); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    estado = readMemory(_UbicacionEstado).r;\n    if (readKey(Key_A)) \n        estado = 1.0;\n    if (readKey(Key_B)) \n        estado = 0.0;\n    \n    bool writesEstado = writesMemory(fragCoord, _UbicacionEstado);\n    \n    if(writesEstado) fragColor = vec4(estado);\n}","name":"Buf A","description":"","type":"buffer"}]}