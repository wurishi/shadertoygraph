{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"music","id":"XsXGRr","filepath":"/media/a/d96b229eeb7a08d53adfcf1ff89e54c9ffeebed193d317d1a01cc8125c0f5cca.mp3","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"//------------------ ------------------------------------------\n// complex number operations\nvec2 cadd( vec2 a, float s ) { return vec2( a.x+s, a.y ); }\nvec2 cmul( vec2 a, vec2 b )  { return vec2( a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x ); }\nvec2 cdiv( vec2 a, vec2 b )  { float d = dot(b,b); return vec2( dot(a,b), a.y*b.x - a.x*b.y ) / d; }\nvec2 cinv( vec2 z)  { float d = dot(z,z); return vec2( z.x, -z.y ) / d; }\nvec2 csqr( vec2 a ) { return vec2(a.x*a.x-a.y*a.y, 2.0*a.x*a.y ); }\nvec2 csqrt( vec2 z ) { float m = length(z); return sqrt( 0.5*vec2(m+z.x, m-z.x) ) * vec2( 1.0, sign(z.y) ); }\nvec2 conj( vec2 z ) { return vec2(z.x,-z.y); }\nvec2 cpow( vec2 z, float n ) { float r = length( z ); float a = atan( z.y, z.x ); return pow( r, n )*vec2( cos(a*n), sin(a*n) ); }\nvec2 cexp( vec2 z) {  return exp( z.x )*vec2( cos(z.y), sin(z.y) ); }\nvec2 clog( vec2 z) {  return vec2( 0.5*log(z.x*z.x+z.y*z.y), atan(z.y,z.x)); }\nvec2 csin( vec2 z) { float r = exp(z.y); return 0.5*vec2((r+1.0/r)*sin(z.x),(r-1.0/r)*cos(z.x));}\nvec2 ccos( vec2 z) { float r = exp(z.y); return 0.5*vec2((r+1.0/r)*cos(z.x),-(r-1.0/r)*sin(z.x));}\n//------------------------------------------------------------\n\nvec2 z0;\nvec2 c;\nfloat zoom= 1.0;\nfloat preci = 1e10;\n\nfloat g = 1e20;\n\n\n\n\nvec2 f( vec2 x ){return (cpow(x+1.0*csin(z0+x),2.0*texture(iChannel0,vec2(1.0)).x-sin(iTime*0.4)*2.1))-x +z0  ;}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat eps = 1.0*sin(iTime)*1.0/preci;\n\tfloat range =3.0*zoom+sin(iTime)*0.001;\t\n    vec2 q = (fragCoord.xy-iMouse.xy) / iResolution.xy;\n    vec2 p = -0.5*range + range * q;\n    p.y *= iResolution.y/iResolution.x;\n    p=p.yx+vec2( 1.0, 0.0 );\n\t\n\t\n    c = vec2( 0.0, 0.7 ) + \n        0.08*vec2( sin(0.21*iTime), cos(0.27*iTime) ) + \n\t0.02*vec2( sin(1.17*iTime), cos(1.31*iTime) );\n\n    // iterate\t\t\n\t\n    vec2 z = p;\n    vec2 z1 = vec2(4.0,-10.0);\n    z0=p;\n    \n    float h = 4e5;\n    float k=sin(iTime*0.00001)*1140.0;\n    float dz;\n\t\n        \n    for(int i=0; i<100; i++ )\n\t{\n        vec2 prevz=z;\n       \n\n        // function\t\t\n\tz = f( z );\n\t\t\n\tg = min( g, dot(z-1.0,z-1.0) );\n        h = min( h, dot(z-z1, z-z1 ));\n        // bailout\n\tdz = dot(z-prevz,z-prevz);\n\t\n        if( dz<eps ){\n            k = dz/eps;\n            z = k*z+(1.0-k)*prevz;\n            k= k+float(i);\n            break;\n        }\n        if( dz>preci ){\n            k = preci/dz;\n            z = k*z+(1.0-k)*prevz;\n            k= k+float(i);\n            break;\n            } \n\t\t\n\t}\n\t\n\tfloat it = 1.0-k/10.0;\n\t\n\t\n\tvec3 col1 = 0.2+0.2*sin(vec3(0.0,z.x,z.x)+3.0)+ 0.6*sin(vec3(-0.5,-0.2,0.8)+2.3+log(g));\n\tvec3 col2 = 0.2+0.2*sin(vec3(0.0,z.x,z.x)+1.0)+ 0.6*sin(vec3(0.6,2.0,4.0)+log(abs(z.y*z.x))); \n\tvec3 col3 = 0.4+ 0.6*sin(vec3(0.5+z.y,1.0+z.x,1.0+z.x)/k+4.5+log(k*h));\n\tvec3 col4 = sin(vec3(-0.3,0.2,0.4)+1.5+log(g));\n\tfloat t1 = sin(iTime*0.1)*0.5+0.5;\n\tfloat t2 = sin(iTime*0.1)*0.5+0.5;\n\tvec3 col = (t1*col3+(1.0-t1)*col2)*(1.0-t2)+(col1+col2)*t2;\n\tcol = col*(0.5+it*0.5);\n\n\tfragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XsB3zw","date":"1384916185","viewed":319,"name":"FracMusic","username":"Zou","description":"Based on a iq shader with sound interaction","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""}}