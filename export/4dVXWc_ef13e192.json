{"ver":"0.1","info":{"id":"4dVXWc","date":"1467121736","viewed":191,"name":"Spritesheeting Testing","username":"chipbell4","description":"Testing out the use of shaders for spritesheeting","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["animation","spritesheet"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 globalUv = fragCoord.xy / iResolution.xy;\n    \n    struct Frame {\n        float top;\n        float right;\n        float width;\n        float height;\n        float duration;\n    };\n    \n    // TODO: Pass as uniform\n    int frameCount = 4;\n    Frame frames[4];\n    frames[0] = Frame(0.0, 0.0, 0.1, 0.1, 1.0);\n    frames[1] = Frame(0.0, 0.5, 0.5, 0.5, 1.0);\n    frames[2] = Frame(0.5, 0.0, 0.5, 0.5, 1.0);\n    frames[3] = Frame(0.5, 0.5, 0.5, 0.5, 1.0);\n    \n    // TODO: Pass as uniform\n    float totalAnimationLength = 4.0;\n    \n    // Calculate the current frame we're on\n    float percentAnimationComplete = mod(iTime, totalAnimationLength) / totalAnimationLength;\n    int currentFrameIndex = int(percentAnimationComplete * float(frameCount));\n    \n    // TODO: This will need to be procedurally built, since GLSL can't use variables to index arrays\n    Frame currentFrame = frames[0];\n    if(currentFrameIndex == 1) {\n        currentFrame = frames[1];\n    }\n    if(currentFrameIndex == 2) {\n        currentFrame = frames[2];\n    }\n    if(currentFrameIndex == 3) {\n        currentFrame = frames[3];\n    }\n    \n    // Calculate the uv coordinates for the current frame\n  \tvec2 corner = vec2(currentFrame.right, currentFrame.top);\n    vec2 dimensions = vec2(currentFrame.width, currentFrame.height);\n    vec2 frameUv = corner + dimensions * globalUv;\n    \n    // set the color\n\tfragColor = texture(iChannel0, frameUv);\n}","name":"Image","description":"","type":"image"}]}