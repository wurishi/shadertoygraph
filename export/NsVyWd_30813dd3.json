{"ver":"0.1","info":{"id":"NsVyWd","date":"1655831669","viewed":68,"name":"Pan and Zoom Specular BRDF GGX","username":"MichaelPohoreski","description":"Instructions:\n\nHold mouse button down and drag to pan/zoom viewing the BRDF","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["ibl","pbr","ggx","karis"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Pan and Zoom Specular BRDF GGX\n// Copyleft {c} 2022 Michael Pohoreski\n//\n// Reference:\n// * https://www.shadertoy.com/view/3lXXDB\n\n#define MOUSE_PAN   1\n#define MOUSE_ZOOM  1\n\n#define SHOW_GRID_X 0\n#define SHOW_GRID_Y 0\n#define HIDE_LEFT   0\n\nvec2 getGGX( vec2 uv )\n{\n#if 1\nvec2  st    = vec2(1.) - uv;\n    float d     = (st.x * st.x * 0.5) * (st.y * st.y);\n    float scale = 1.0 - d;\n    float bias  = d;\n#else // version 7\n    vec2  st    = vec2(1.) - uv;\n    float d     = (st.x * st.x * 0.75) * (st.y * st.y);\n    float scale = 1.0 - d;\n    float bias  = d;\n#endif\n    return vec2( scale, bias );\n}\n\n#define PI 3.141592653589793\n\nfloat saturate(float x) {\n    return clamp(x, 0.0, 1.0);\n}\n\n// Taken from https://github.com/SaschaWillems/Vulkan-glTF-PBR/blob/master/data/shaders/genbrdflut.frag\n// Based on http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html\nvec2 hammersley(uint i, uint N) \n{\n\t// Radical inverse based on http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html\n\tuint bits = (i << 16u) | (i >> 16u);\n\tbits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);\n\tbits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);\n\tbits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);\n\tbits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);\n\tfloat rdi = float(bits) * 2.3283064365386963e-10;\n\treturn vec2(float(i) /float(N), rdi);\n}\n\n// From the filament docs. Geometric Shadowing function\n// https://google.github.io/filament/Filament.html#toc4.4.2\nfloat G_Smith(float NoV, float NoL, float roughness)\n{\n\tfloat k = (roughness * roughness) / 2.0;\n\tfloat GGXL = NoL / (NoL * (1.0 - k) + k);\n\tfloat GGXV = NoV / (NoV * (1.0 - k) + k);\n\treturn GGXL * GGXV;\n}\n\n// From the filament docs. Geometric Shadowing function\n// https://google.github.io/filament/Filament.html#toc4.4.2\nfloat V_SmithGGXCorrelated(float NoV, float NoL, float roughness) {\n    float a2 = pow(roughness, 4.0);\n    float GGXV = NoL * sqrt(NoV * NoV * (1.0 - a2) + a2);\n    float GGXL = NoV * sqrt(NoL * NoL * (1.0 - a2) + a2);\n    return 0.5 / (GGXV + GGXL);\n}\n\n\n// Based on Karis 2014\nvec3 importanceSampleGGX(vec2 Xi, float roughness, vec3 N)\n{\n    float a = roughness * roughness;\n    // Sample in spherical coordinates\n    float Phi = 2.0 * PI * Xi.x;\n    float CosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));\n    float SinTheta = sqrt(1.0 - CosTheta * CosTheta);\n    // Construct tangent space vector\n    vec3 H;\n    H.x = SinTheta * cos(Phi);\n    H.y = SinTheta * sin(Phi);\n    H.z = CosTheta;\n    \n    // Tangent to world space\n    vec3 UpVector = abs(N.z) < 0.999 ? vec3(0.,0.,1.0) : vec3(1.0,0.,0.);\n    vec3 TangentX = normalize(cross(UpVector, N));\n    vec3 TangentY = cross(N, TangentX);\n    return TangentX * H.x + TangentY * H.y + N * H.z;\n}\n\n\n// Karis 2014\nvec2 integrateBRDF(float roughness, float NoV)\n{\n\tvec3 V;\n    V.x = sqrt(1.0 - NoV * NoV); // sin\n    V.y = 0.0;\n    V.z = NoV; // cos\n    \n    // N points straight upwards for this integration\n    const vec3 N = vec3(0.0, 0.0, 1.0);\n    \n    float A = 0.0;\n    float B = 0.0;\n    const uint numSamples = 256u; // 1024u;\n    \n    for (uint i = 0u; i < numSamples; i++) {\n        vec2 Xi = hammersley(i, numSamples);\n        // Sample microfacet direction\n        vec3 H = importanceSampleGGX(Xi, roughness, N);\n        \n        // Get the light direction\n        vec3 L = 2.0 * dot(V, H) * H - V;\n        \n        float NoL = saturate(dot(N, L));\n        float NoH = saturate(dot(N, H));\n        float VoH = saturate(dot(V, H));\n\n        const float EPSILON = 1.0e-6;\n        if(NoL > EPSILON) {\n            float V_pdf = V_SmithGGXCorrelated(NoV, NoL, roughness) * VoH * NoL / NoH;\n            float Fc = pow(1.0 - VoH, 5.0);\n            A += (1.0 - Fc) * V_pdf;\n            B += Fc * V_pdf;\n        }\n    }\n\n    return 4.0 * vec2(A, B) / float(numSamples);\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2  offset = vec2( 0.0, 0.0 );\n    vec2  scale  = vec2( 1.0, 1.0 );\n    vec2  os;\n\n    // Mouse button down lefts you scroll left\n    if( iMouse.z > 0.5)\n    {\n#if MOUSE_PAN        \n        offset.x = 2.0 * iMouse.x / iResolution.x;\n        offset.y = 2.0 * iMouse.y / iResolution.y;\n#endif\n#if MOUSE_ZOOM\n        scale.x  = 8.0 * iMouse.x / iResolution.x;\n        scale.y  = 8.0 * iMouse.y / iResolution.y;\n#endif\n    }\n\n    float minRes  = min( iResolution.x, iResolution.y );\n    float maxRes  = max( iResolution.x, iResolution.y );\n          os      = minRes*offset; // offset x in pixels\n\n    vec2  f = fragCoord;\n    vec2  g = vec2( f - os ) * scale;\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2  uv = g/minRes;\n    float a  = uv.y;\n    float mu = uv.x;\n\n#if HIDE_LEFT\n    if( uv.x < 0.0)\n    {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        return;\n    }\n#endif\n\n    // Output to screen\n    vec2 res = integrateBRDF(a, mu);\n    \n    // Single Scatter Energy\n    //fragColor = vec4(vec3(res.x + res.y), 1.0);\n    const float GRID = 128.0;\n    int gridX = int(mod( g.x, GRID));\n    int gridY = int(mod( g.y, GRID));\n#if SHOW_GRID_X\n    if ((g.x > 0.0) && (gridX == 0))\n    {\n        fragColor = vec4(0,0.5,1.0,1.0);\n        return;\n    }\n#endif\n#if SHOW_GRID_Y\n    if ((g.x > 0.0) && (gridY == 0))\n    {\n        fragColor = vec4(0,0.5,1.0,1.0);\n        return;\n    }\n#endif\n\n    // Scale and Bias for F0 (as per Karis 2014)\n    fragColor = vec4(res.x, res.y, 0.0, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}