{"ver":"0.1","info":{"id":"slKXRR","date":"1640218447","viewed":170,"name":"20211223 5 types of noise","username":"kamonumber","description":"To learn how to make noise, I made five different types of noise, referring to the article\nreference.\n\nUnityシェーダ入門】シェーダで作るノイズ５種盛り\nhttps://nn-hokuson.hatenablog.com/entry/2017/01/27/195659","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 参考にした記事\n//【Unityシェーダ入門】シェーダで作るノイズ５種盛り\n// https://nn-hokuson.hatenablog.com/entry/2017/01/27/195659\n\nvec2 rand(vec2 uv){//uvを参照してサイン波をつくりそれを拡大したものをfract()で小数部分のみにする\n    vec2 random = vec2(fract(sin(dot(uv,vec2(15.15,154.15)))*10455.487))*2.0-1.0;\n    return random;\n}\n\n\nvec2 blockNoise(vec2 uv){//randomの計算に使うuvをあらかじめfloorして整数部分だけにしておく\n    float r = 10.;\n    uv*=vec2(r,r);\n    uv=floor(uv);    \n    vec2 noise = rand(uv);\n    return noise;\n}\n\n\nvec2 valueNoise(vec2 uv){//ブロックノイズのそれぞれのマスの原点の色から間の色をなめらかに補完\n    float r = 10.;\n    uv*=vec2(r,r);\n    vec2 i = floor(uv);\n    vec2 d = fract(uv);\n    vec2 x0y0 = rand(i);\n    vec2 x0y1 = rand(i+vec2(0.,1.));\n    vec2 x1y0 = rand(i+vec2(1.,0.));\n    vec2 x1y1 = rand(i+vec2(1.,1.));\n    d = d * d * (3.0 - 2.0 * d);  //←滑らかに補完するかどうか  \n    vec2 s = mix(x0y0,x1y0,d.x);\n    vec2 t = mix(x0y1,x1y1,d.x);\n    vec2 u = mix(s,t,d.y);\n    return u;\n}\n\n\nfloat perlin(vec2 uv){//格子点\n    //float r = 10.;\n    //uv*=vec2(r,r);\n    vec2 i = floor(uv);\n    vec2 f = fract(uv);\n    vec2 u = f*f*3.0-f*f*f*2.0;\n    \n    vec2 g00 = (rand(i));\n    vec2 g01 = (rand(i+vec2(0.,1.)));\n    vec2 g10 = (rand(i+vec2(1.,0.)));\n    vec2 g11 = (rand(i+vec2(1.,1.)));\n    \n    vec2 d00 = (f);\n    vec2 d01 = (f-vec2(0.,1.));\n    vec2 d10 = (f-vec2(1.,0.));\n    vec2 d11 = (f-vec2(1.,1.));\n    \n    float m00 = dot(g00,d00);\n    float m01 = dot(g01,d01);\n    float m10 = dot(g10,d10);\n    float m11 = dot(g11,d11);\n    \n    float result = mix(mix(m00,m10,u.x),mix(m01,m11,u.x),u.y);\n    return result+0.5;\n}\n\n\nfloat fbm(vec2 uv){//perlin noiseをuvを小さくして細かくし加算する\n    float r = 10.;\n    uv*=vec2(r,r);\n    float f = 0.0;\n    f += 0.5*perlin(uv);uv*=2.0;\n    f += 0.25*perlin(uv);uv*=2.0;\n    f += 0.125*perlin(uv);uv*=2.0;\n    f += 0.0725*perlin(uv);uv*=2.0;\n    return f;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )//アウトプット\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    //vec2 tmp = rand(uv);\n    //vec2 tmp = valueNoise(uv);\n    //float tmp = perlin(uv);\n    float tmp = fbm(uv);\n    //float col = dot(tmp.x,tmp.y);\n    float col = tmp;\n\n    fragColor = vec4(col,col,col,1.0);\n}","name":"Image","description":"","type":"image"}]}