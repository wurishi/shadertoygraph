{"ver":"0.1","info":{"id":"3llcRn","date":"1591295608","viewed":87,"name":"Fluid Redux 3D","username":"spalmer","description":"just deconstructing a wyatt fluid toy to try to understand it better, maybe reformat some.\nCurrently only integrating once per frame, so the wave speed is limited.","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["3d","fluid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Spiral Waves 3D\" by wyatt at https://shadertoy.com/view/wtXcRn\n// see also 2D version at https://shadertoy.com/view/Wtlczn\n\nvoid mainImage(out vec4 Q, vec2 u)\n{\n    vec3 mi = .5*R3D // middle of volume\n    , p = vec3(0,0,-2.*R3D.y) // ray origin\n    , d = normalize(vec3((u-.5*R)/R.y,1)); // ray dir\n    // camera rotation\n    if (iMouse.z>0.) {\n \t\tp.zx *= e(6.28*iMouse.x/R.x);\n\t\td.zx *= e(6.28*iMouse.x/R.x);\n        p.yz *= e(6.28*iMouse.y/R.y);\n\t\td.yz *= e(6.28*iMouse.y/R.y);\n    } else {\n\t\tp.xz *= e(.2 *iTime);\n\t\td.xz *= e(.2 *iTime);        \n\t\tp.yz *= e(.05*iTime);\n\t\td.yz *= e(.05*iTime);\n\t}\n//    p += d * 45.;\n    Q = vec4(0); // raymarch fluid volume\n    for (int i = 0; i < 128; ++i) {\n        vec3 o = abs(p) - mi;\n        float m = length(max(o, 0.));\n        // limit sampling to the untiled volume to prevent obscuring camera view\n        if (m < .01) { //dot(p, d) >= -1.) { //\n            vec4 a = .4 * T0(p+mi).xyyy * vec4(1,3,3,1);\n            float aa = length(a), ea = exp(-aa*aa);\n            Q += (1.-ea) * abs(a);\n            p += d * (.1+ea);\n        } else p += d*m;        \n \t}\n    Q *= 6e-3;\n    Q = sqrt(Q); // gamma\n    //Q = texture(iChannel0,u/R) * .5 + .5; // debug field\n}\n\n//    mat3 rot = mat3(1); rot.zx *= ?; /// TODO simplify camera to mat3 - e rotation isn't convenient for it\n            //p = mod(p+mi,R3D)-mi;\n\t//Q = atan(Q)*.8; // wyatt's tonemap\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define N\t\t11.\n#define R\t\tiResolution.xy\n// abstract 3D sample coordinate mapping to 2D buffer locations\n// not sure I entirely understand it yet, and not sure if it's a cube or box\n#define R3D\t\tvec3(R/N,N*N)\n#define d2(q)\t((q).xy+vec2(mod(floor((q).z),N),floor(floor((q).z)/N))*R/N)\n#define d3(q)\tvec3(mod(q,R/N),floor(q/R*N).x+floor(q/R*N).y*N)\n// rotation e^(-i*pi*a)\n#define e(a)\tmat2(cos(a),-sin(a),sin(a),cos(a))\n// textures for buffers should be set to bilinear mode\n// texture single bilinear sample 3d with sampler2D ch, vec3 q\n#define T(ch,q) texture(ch, d2(q)/R)\t \n\n#define A(U)\tT(iChannel0, mod(U,R3D))\n// texture trilinear interpolate sampler2D ch, vec3 U\n#define TL(ch,u) \\\n\tmix(T(ch, vec3((u).xy,floor((u).z))) \\\n\t   ,T(ch, vec3((u).xy, ceil((u).z))), fract((u).z))\n\n#define T0(U)\tTL(iChannel0,U)\n\n        \n#define Neighborhood\tvec4 \\\n\tf = A(U+vec3(0,0,1)), \\\n\tb = A(U-vec3(0,0,1)), \\\n\tn = A(U+vec3(0,1,0)), \\\n\ts = A(U-vec3(0,1,0)), \\\n\te = A(U+vec3(1,0,0)), \\\n\tw = A(U-vec3(1,0,0));\n\n// m is the average neighbor pressure\n// pretty sure Q.x is pressure\n// but not quite sure what Q.y is?!  some filter state\nvoid FluidSim(inout vec2 Q, float m)\n{\n\tconst float // TODO figure out what all these do\n  k0 = .05  // pressure wave propagation rate? affects diffusion\n, k1 = 1e-2 // coeff of pressure calc\n, k2 = 5.   // coeff of pressure calc, something about wavelength, can't be too small\n, k3 = .1   // coeff of pressure calc\n, k4 = 20.  // coeff of pressure calc involving y term..\n, k5 = .003 // coeff of y term calc, whatever that is\n;\n    Q.x += k0*(m-Q.x)+k1*((Q.x*(k2-Q.x)*(Q.x-k3))-k4*Q.y);\n\tQ.y += k5*(Q.x-Q.y);\n}\n// almost everything is how it modifies Q.x and y\n// which seems too simple to possibly account for\n// the complex fluid behavior observed, right?\n\n// seems to me that pressure is diffused with neighbors in x\n// and somehow advected along some function of differential in y\n// y seems to be some filter of the pressure value\n// which seems mainly used to figure out which way and speed\n// the wave affecting x is travelling.  I'm not sure I quite understand.\n\n// pressure calc is the strangest polynomial I've seen recently,\n// with zeroes at 0., k2, and k3, peaking at like 18. near 3.3 !!\n\n// TODO document buffer channel allocation\n// probably pressure in x?\n// probably variance in y? some kind of differential?  not velocity, only 1 channel...\n// zw unused\n\n#define BUFFER \\\nvoid mainImage(out vec4 Q, vec2 u) { \\\n\tvec3 U = d3(u); \\\n    Neighborhood; \\\n    float m = 1./6.*(n+e+s+w+f+b).x; \\\n    Q = A(U); \\\n    FluidSim(Q.xy, m); \\\n    if (iFrame < 3 &&length(U-.5*R3D)<10.) Q.x = abs(sin(U.x))*abs(sin(U.y)); \\\n    if (iMouse.z>0.&&length(U-.5*R3D+sin(iTime)*4.)<10.) Q.x = 1.; \\\n}\n\n// init just starts a ripple at the center\n// mousedown just ripples near the mouse location\n\n// shadertoy.com main entry point decl wrapper - seems to only obscure the arguments\n//#define Main\tvoid mainImage(out vec4 Q, vec2 u)\n\n// seems unused\n//#define T1(U)\tTL(iChannel1,U)\n//#define B(U)\tT(iChannel1, mod(U,R3D))\n\n// not saving enough to be worth the obfuscation factor\n//#define Init\tif (iFrame < 1)\n\n//  Q.x += .05*(m-Q.x)+1e-2*((Q.x*(5.-Q.x)*(Q.x-.1))-20.*Q.y);\n//\tQ.y += .003*(Q.x-Q.y);\n\n\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"BUFFER\n        \n    // if you want wave propagation speed increased,\n    // simply add more Buffer tabs and copy the macro and \n    // set up texture channels in a circular chain\n\n","name":"Buffer A","description":"","type":"buffer"}]}