{"ver":"0.1","info":{"id":"cslXW8","date":"1668799834","viewed":100,"name":"Transverse Chromatic aberration","username":"jean80it","description":"Transverse Chromatic aberration","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["transversechromaticaberration"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define INVERT_Y 0\n\n\n\nfloat correctLensDistortionR(float x)\n{\n  float a = -0.01637 + 0.01;\n  float b = -0.03 + 0.01;\n  float c = -0.06489 + 0.01;\n  float d = 1.0 - (a + b + c);\n\n  return (x*x*x*x * a + x*x*x * b + x*x * c + d * x);\n}\n\nfloat correctLensDistortionG(float x)\n{\n  float a = -0.01637;\n  float b = -0.03;\n  float c = -0.06489;\n  float d = 1.0 - (a + b + c);\n\n  return (x*x*x*x * a + x*x*x * b + x*x * c + d * x);\n}\n\nfloat correctLensDistortionB(float x)\n{\n  float a = -0.01637 - 0.01;\n  float b = -0.03 - 0.01;\n  float c = -0.06489 - 0.01;\n  float d = 1.0 - (a + b + c);\n\n  return (x*x*x*x * a + x*x*x * b + x*x * c + d * x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1 for both x,y regardless of aspect)\n    vec2 uv = fragCoord/iResolution.xy;\n\n#if INVERT_Y\n    uv.y = 1.0 - uv.y;\n#endif // INVERT_Y\n    \n    // get polar coordinates\n    vec2 cart = (uv - vec2(0.5)) * 2.2;  // 0->1 to -1->1\n    cart.x *= max(iResolution.x, iResolution.y) / min(iResolution.x, iResolution.y);\n    \n    float an = atan(cart.y, cart.x);\n    float len = length(cart);\n    \n    float lenR = correctLensDistortionR(len);\n    float lenG = correctLensDistortionG(len);\n    float lenB = correctLensDistortionB(len);\n\n    // back to cartesian\n    vec2 dir = vec2(iResolution.y / iResolution.x, 1.0) *\n                vec2(cos(an), sin(an));\n                \n    vec2 modUV_R = lenR * dir  * 0.5 + vec2(0.5);\n    \n    vec2 modUV_G = lenG * dir  * 0.5 + vec2(0.5);\n    \n    vec2 modUV_B = lenB * dir  * 0.5 + vec2(0.5);\n    \n    float animSpeed = 0.5;\n    float blendFactor = sin(iTime * animSpeed) * 0.5 + 0.5;\n    \n    vec2 fetchUV_R = mix(uv, modUV_R, blendFactor);\n    vec2 fetchUV_G = mix(uv, modUV_G, blendFactor);\n    vec2 fetchUV_B = mix(uv, modUV_B, blendFactor);\n    \n    // fetch texture data\n    vec3 col = vec3( \n        texture(iChannel0, fetchUV_R).r,\n        texture(iChannel0, fetchUV_G).g,\n        texture(iChannel0, fetchUV_B).b\n    );\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}