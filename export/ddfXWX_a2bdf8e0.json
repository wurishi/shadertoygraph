{"ver":"0.1","info":{"id":"ddfXWX","date":"1669835287","viewed":158,"name":"ovals and waves","username":"garabatospr","description":"ovals and waves\n","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["waves","deform","ovals"],"hasliked":0,"parentid":"msfXWS","parentname":"Hilma"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535897932384626433832795\n#define len 5.0\n\n\n// Author: Elio Ramos (@garabatospr instagram, twitter) \n\n\n// some of the utility functions are included in the wonderful Lygia Shader Library \n// https://github.com/patriciogonzalezvivo/lygia\n\n\n\n/*\nauthor: Patricio Gonzalez Vivo\ndescription: clamp a value between 0 and 1\nuse: saturation(<float> value)\n*/\n\nfloat saturate( const in float x){ return clamp(x, 0.0, 1.0); }\n\n/*\nauthor: Johan Ismael\ndescription: Map a value between one range to another.\nuse: map(<float> value, <float> inMin, <float> inMax)\n*/\n\nfloat map( float value, float inMin, float inMax ) \n{\n  return saturate( (value-inMin)/(inMax-inMin));\n}\n\n/*\nauthor: Patricio Gonzalez Vivo\ndescription: pass a value and get some random normalize value between 0 and 1\nuse: float random[2|3](<float|vec2|vec3> value)\n*/\n\n\nfloat random(in vec2 st) {\n  return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n/*\nauthor: Patricio Gonzalez Vivo\ndescription: returns a 2x2 rotation matrix\nuse: rotate2d(<float> radians)\n*/\n\nmat2 rotate2d(in float radians)\n{\n  float c = cos(radians);\n  float s = sin(radians);\n  return mat2(c, -s, s, c);\n}\n\n// cosine based palette, 4 vec3 params\n\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n  return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\nvec2 distort(vec2 uv,float freq)\n{\n  float freq1 = 2.;\n  float freq2 = 2.;\n\n  float x = uv.x;\n  float y = uv.y;\n\n  return vec2(x + cos(freq1*y + freq*iTime)*0.1,y + cos(freq2*x + freq*iTime)*0.1);\n}\n\n\nvec3 drawOval(vec2 uv,vec2 offset,float rad,vec3 col,vec3 col1,vec3 col2)\n{\n  uv = distort(uv,1.);\n  uv -= offset;\n  uv.x *= 2.;\n  uv.y *=0.75;\n  float d = length(uv);\n  float blur = 0.05;\n  col = mix(mix(col1,col2,d) + smoothstep(rad-blur,rad,d),col,smoothstep(rad-blur,rad,d));\n  return col;\n}\n\n/*\nauthor: Inigo Quiles\ndescription:gment SDF\nuse: lineSDF(<vec2> st, <vec2> A, <vec2> B)\n*/\n\nfloat lineSDF( in vec2 st, in vec2 a, in vec2 b ) \n{\n  vec2 b_to_a = b - a;\n  vec2 to_a = st - a;\n  float h = saturate(dot(to_a, b_to_a)/dot(b_to_a, b_to_a));\n  return length(to_a - h * b_to_a );\n}\n\nvec3 drawWave(vec2 uv,vec2 offset,float rad,vec3 col,vec3 col1,vec3 col2)\n{\n  uv -= offset;\n  uv.x *= 1.;\n  uv.y *= 5.;\n  uv.y = uv.y + 0.5*sin(10.0*uv.x + 0.5*iTime);\n  float wave = lineSDF(uv,vec2(-rad,0.0),vec2(rad,0.0));\n  float blur = 0.2;\n  return mix(mix(col1,col2,wave) + smoothstep(rad-blur,rad,wave),col,smoothstep(rad-blur,rad,wave));  \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n   // Normalized pixel coordinates (from 0 to 1)\n    \n    vec2 uv = fragCoord/iResolution.xy -0.5;\n    \n    uv.x *= iResolution.x/iResolution.y;\n \n\n    uv *= 6.0; \n\n    // parameters for palette\n\n    vec3 a = vec3(0.5,0.5, 0.5);\n    vec3 b = vec3(0.5,0.5, 0.5);\n    vec3 c = vec3(1.0,1.0, 0.5);\n    vec3 d = vec3(0.80,0.90,0.30);\n    \n    vec3 col = mix(palette(0.3,a,b,c,d),palette(0.99,a,b,c,d),uv.y);\n    \n    \n    for(float x = -len;x <= len;x+=1.)\n    {\n      for(float y = -len;y <= len;y+=1.)\n      {\n      \n        vec2 pos = vec2(x,y);\n      \n        float t1X = random(pos*98676.);\n        float t2X = random(pos*123434.);\n        float t1Y = random(pos*1289893.);\n        float t2Y = random(pos*12893.);\n        float rang  = PI*(random(pos*6789789.));\n        float radOval = random(pos*945689.)*1.5;\n        float radWave = random(pos*9456.);\n        \n        uv *= rotate2d(rang);\n        \n        col = drawWave(uv,pos,radWave,col,palette(t1X,a,b,c,d),palette(t1Y,a,b,c,d));\n        \n        uv *= rotate2d(rang);\n        \n        col = drawOval(uv,pos,radOval,col,palette(t2X,a,b,c,d),palette(t2Y,a,b,c,d));\n      }\n    }  \n   \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}