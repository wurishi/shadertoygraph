{"ver":"0.1","info":{"id":"ftyfDG","date":"1665122534","viewed":124,"name":"Raymarching 2D (L2, lightcam)","username":"Envy24","description":"Drag light source with mouse.\n\nFor 3d: https://www.youtube.com/watch?v=PGtv-dBi2wE&t","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","raymarching","norm","metric","l2"],"hasliked":0,"parentid":"NtGBDG","parentname":"Raymarching 2D (L2, aa-orthocam)"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R                           iResolution\n#define AR                        ( R.x / R.y )                      // Aspect ratio (AR > 1.0).\n#define TO_CENTERED_NDC(SC)       ( ((SC)+(SC)-R.xy) / R.y )         // in range x=[-AR; AR], y=[-1.0; 1.0]\n#define NZMY                      ( (iMouse.y+iMouse.y-R.y) / R.y )  // in range [-1.0; 1.0]\n#define UNIT                      (  3. / R.y )\n#define SMAA(x)                   ( smoothstep(UNIT, 0., x) )\n#define LMB_IS_HOLD               ( iMouse.z > 0.0 )\n\nfloat find_closest_scene_object(vec2 marching_point)\n{   \n    float min_dist = 99.;\n    \n    min_dist = min(min_dist, diskSDF_L2(marching_point, rotateAroundZ(vec2(0.8, 0.4), iTime*0.4), 8.*UNIT));\n    min_dist = min(min_dist, diskSDF_L2(marching_point, rotateAroundZ(vec2(0., -0.3), iTime), 16.*UNIT));\n    \n    min_dist = min(min_dist, segmentSDF_L2(marching_point, vec2(1.5, -0.7), vec2(1.0, 0.7), 3.*UNIT));\n\n    return min_dist;\n}\n\nfloat ray_march(\n    in vec2 ray_origin,\n    in vec2 ray_direction,\n    in float max_num_steps,\n    in float max_distance,\n    in float hit_distance)\n{\n    float marched_distance = 0.;    \n    bool quit = false;\n\n    for (float s = 0.; (s < max_num_steps) && (!quit); s += 1.)\n    {\n        vec2 marching_point = ray_origin + marched_distance * ray_direction;      \n        float distance_to_closest_object = find_closest_scene_object(marching_point);\n               \n        // March (update).\n        marched_distance += distance_to_closest_object;\n        \n        quit = \n            (marched_distance > max_distance) ||         // Marched to far?\n            (distance_to_closest_object < hit_distance); // Hit something?    \n    }\n\n    return marched_distance;\n}\n\nfloat diffuse_light(\n    in vec2 hit_point,\n    in vec2 light_position,\n    in vec3 light_color)\n{\n    vec2 light_direction = normalize(light_position - hit_point);\n\n    vec2 shadow_ray_pos = hit_point + light_direction * 0.02;\n    float distance_to_light_source = ray_march(shadow_ray_pos, light_direction, 100., 100.0, 0.01);\n    \n    return\n        // \"shadow ray\" can't reach light source?\n        distance_to_light_source < length(light_position - hit_point) ?\n            0.1 : // Shadow\n            1.;\n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    vec2 NDC = TO_CENTERED_NDC(SC);\n\n    /* Light rays = camera rays */\n    vec2 light_position = \n             LMB_IS_HOLD == true ?\n                 TO_CENTERED_NDC(iMouse.xy) :\n                 vec2(0);\n    vec3 light_color = vec3(1);\n     \n    /* Vizualize hit point */\n    vec2 hit_point = NDC;\n    float diffuse = diffuse_light(hit_point, light_position, light_color);\n    float light_source_size = 0.09;\n    float fade_out = light_source_size / length(light_position - hit_point);\n    //float light_source_size = 0.8;\n    //float fade_out = 1.1*( 1.0 - clamp( 0., 1., length(light_position - hit_point) ) / light_source_size );\n    vec3 color = light_color * diffuse * fade_out;\n    \n    /* Visualize scene. */\n    color = mix( color, light_color*diffuse, SMAA(find_closest_scene_object(NDC)));\n    \n    O = vec4(color, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/* Returns sine modulated value in range [min, max]. */\nfloat sinOSC(in float min, in float max, in float T)\n{\n    float v = (sin(T) + 1.0) * 0.5; // map T to [0.0, 1.0];\n    return min + v * (max - min);   // map T to [min, max];\n}\n\nfloat segmentSDF_L2(in vec2 NDC, in vec2 B, in vec2 E, in float R)\n{\n    vec2 BP = NDC - B, BE = E - B;\n    return length(BP - BE * clamp(dot(BP, BE) / dot(BE, BE), 0.0, 1.0)) - R;\n}\n\nfloat diskSDF_L2(vec2 NDC, vec2 C, float R)\n{\n    return length(C - NDC)-R;\n}\n\nfloat circleSDF_L2(vec2 NDC, vec2 C, float R)\n{\n    return abs(length(C - NDC)-R);\n}\n\nvec2 rotateAroundZ(vec2 p, float a)\n{\n    float s = sin(a);\n    float c = cos(a);\n\n    return vec2(\n        p.x * c - p.y * s,\n        p.y * c + p.x * s);\n}","name":"Common","description":"","type":"common"}]}