{"ver":"0.1","info":{"id":"sscyzj","date":"1721983733","viewed":11,"name":"abstracttt","username":"timspik","description":"abstract","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["clouds"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int MAX_STEPS = 5000;\nconst float STEP_DISTANCE = 0.01;\n\n\nconst vec3 VOLUME_ORIGIN = vec3(-2,-2,-2);\nconst float timeSpeed = 0.2;\nvec3 VOLUME_X = vec3(1,0,0);\nvec3 VOLUME_Y = vec3(0,1,0);\nvec3 VOLUME_Z = vec3(0,0,1);\nconst float VOLUME_WIDTH = 2.;\nconst float VOLUME_HEIGHT = 2.;\nconst float VOLUME_DEPTH = 2.;\n \nvec3 sampleTex(vec2 front,vec2 side,vec2 bot){\n   float f = texture(iChannel1, front/*+iTim*e*timeSpeed*/).x;\n   float s = texture(iChannel2, side/*+iTime*timeSpeed*/).x;\n   float b = texture(iChannel3, bot/*+iTime*timeSpeed*/).x;\n   \n   vec3 pos = vec3(f,s,b);\n   return pos;\n}\nvec3 getNormal(vec3 pos,vec3 origin){\n    return normalize(pos - origin);\n}\nfloat found(vec3 rO){\n    mat3 rotator = mat3(cos(iTime*timeSpeed),0.,sin(iTime*timeSpeed),0,1.,0.,-sin(iTime*timeSpeed),0.,cos(iTime*timeSpeed));\n    mat3 mover = mat3(1,0,0,0,1,0,0,0,1);\n    //rO *= rotator; \n\n    /* LIGH */\n    vec3 lightPos = vec3(-50,-50.,-200);        \n    //lightPos *= rotator;\n    //\n\n    float x = (rO.x - VOLUME_ORIGIN.x)/VOLUME_WIDTH;\n    float y = (rO.y - VOLUME_ORIGIN.y)/VOLUME_HEIGHT;\n    float z = (rO.z - VOLUME_ORIGIN.z)/VOLUME_DEPTH;\n    if((x < 0. || y < 0. || z < 0.))\n    {\n        return 0.;\n    }\n    \n    vec2 side = vec2(z,y);\n    vec2 front = vec2(x,y);\n    vec2 bot = vec2(z,x);\n    \n    vec3 samplePosition = sampleTex(front,side,bot);\n    vec3 wP = VOLUME_ORIGIN + (VOLUME_X * samplePosition.x*VOLUME_WIDTH) + \n                              (VOLUME_Y * samplePosition.y*VOLUME_HEIGHT) +\n                              (VOLUME_Z * samplePosition.z*VOLUME_DEPTH);\n   \n     if(length(rO-wP) < abs(cos(iTime*.3)*4.) || samplePosition.x < 0. ||  samplePosition.y < 0. ||  samplePosition.z < 0.)\n        return 0.0;\n    else\n        return clamp(dot(normalize(lightPos-rO),normalize(rO)),0.05,1.);\n            \n}\n\nfloat rayMarch(vec3 rO,vec3 rD){\n\n    for(int i = 0;i < MAX_STEPS;i++){\n        rO = rO + (rD * STEP_DISTANCE/*d*/);\n        \n        vec3 col = vec3(found(rO));\n        if(length(col)!=0.){\n            return length(col); \n        }\n    }\n    \n    return 0.;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy-(.5,.5);\n    uv.x = uv.x * (iResolution.x/iResolution.y);\n    vec3 ct = vec3(uv,-4);\n    vec3 cO = vec3(0,.5,-6);\n      \n    mat3 rotator = mat3(cos(iTime),0.,sin(iTime),0,1.,0.,-sin(iTime),0.,cos(iTime));\n    //cO *= rotator;\n    //ct *= rotator; \n    \n    float c = rayMarch(cO,normalize(ct-cO));\n   \n    fragColor = vec4(c);\n}\n","name":"Image","description":"","type":"image"}]}