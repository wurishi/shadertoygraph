{"ver":"0.1","info":{"id":"XdcfWM","date":"1525288029","viewed":105,"name":"TileSketch","username":"TinyTexel","description":"shader","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["shader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// License: CC0 (https://creativecommons.org/publicdomain/zero/1.0/)\n\n/*\n\n*/\nfloat SMax_Norm2(float a, float b, float r)\n{\n\tfloat ap = a + r;\n\tfloat bp = b + r;\n\n\tfloat inner = max(ap, bp);\n\n\tfloat box = (inner <= 0.0 ? inner : length(max(vec2(ap, bp), vec2(0.0)))) - r;\n\n\treturn box;\n}\n\nfloat SMin_Norm2(float a, float b, float r) { return -SMax_Norm2(-a, -b, r); }\n\n\nfloat Box(vec2 tex, vec2 p, vec2 s, float r)\n{\n    vec2 v = abs(tex - p) - s;\n    \n    return SMax_Norm2(v.x, v.y, r);\n}\n\nfloat Dia(vec2 tex, vec2 p, vec2 s, float r)\n{\n    tex -= p;\n    \n    float l = -tex.x - s.x*0.5;\n    \n    tex = vec2(tex.x+tex.y, tex.x-tex.y) * 0.5*sqrt(2.0);\n    \n    vec2 v = abs(tex) - s;\n    \n    float res = SMax_Norm2(v.x, v.y, r);\n    \n    //res = max(res, l);\n    \n    return res;\n}\n\n\n\nbool NoiseLabel(vec2 tex)\n{\n    //tex.x += 89.0;\n        tex = vec2(tex.x+tex.y, tex.x-tex.y) * 0.5*sqrt(2.0);\n\n    return texture(iChannel0, tex.xy / 128.0 * 0.5).x < 0.3;\n}\n\nfloat Noise(vec2 tex)\n{\n    return NoiseLabel(tex) ? 0.0 : 1.0;\n}\n\n\nvoid mainImage( out vec4 outCol, in vec2 uv0 )\n{\n\tvec2 uv = uv0 - 0.5;\n    uv0 += .0;\n    \n    vec2 tex = uv0;\n    tex -= iResolution.xy * 0.5;\n    tex /= iResolution.xx * 0.5;\n\n    tex *= 8.0;\n    tex.x += 4.0;\n    tex.y += 2.0;\n\ttex += iTime * 0.4;\n    vec3 col = vec3(0.0);\n    \n\tcol = mix(vec3(1.0), vec3(0.9), Grid(tex.xy * 4.0, 0.0));        \n\tcol = mix(col, vec3(0.5), Grid(tex.xy * 1.0, 0.0));        \n\tcol = mix(col, vec3(0.125), Cross(tex.xy * 1.0, 0.)); \t\n    //col = mix(col, vec3(1.0, 0.0, 0.0), Graph(sin(tex.x * Pi)-tex.y, 0.5));        \n    //col = mix(col, vec3(0.0, .0, 1.0), Dot(tex.xy, vec2(1.0, 1.0), 0.05));        \n       \n    float v = 0.0;\n    \n    v = tex.x - 0.5;\n    v = SMax_Norm2(abs(tex.x - 0.5) - 1.0, abs(tex.y - 0.5) - 1.0, 0.0);\n    \n    float r = 0.75;\n    \n    float b0 = Box(tex, vec2(1.0), vec2(1.0), r);\n    float b1 = Box(tex, vec2(0.0, 1.0), vec2(1.0), r);\n    float b2 = Box(tex, vec2(0.5, 1.0), vec2(1.0), r);\n    float b3 = Box(tex, vec2(1.25, 1.0), vec2(1.0), r);\n    \n    float d0 = Dia(tex, vec2(1.5, 1.0), vec2(0.93), r);    \n    float d1 = Dia(tex, vec2(2.0, 0.5), vec2(0.93), r);\n\n    \n        \n    v = SMin_Norm2(b0, b1, 0.0);\n    //v = SMin_Norm2(v, b2, 0.0);\n//    v = SMin_Norm2(v, d0, 0.0);\n    v = min(min(min(b0, b0), min(b1, b1)), min(d0, d1));\n    \n    \n    //v = SMin_Norm2(v, b3, 0.0);\n    \n    //v = b0;\n\n#if 0   \n    v = 8.5;\n    //if(false)\n    {\n        vec2 ft = fract(tex);\n        vec2 it = floor(tex);\n        \n        float da = 0.93;\n        \n        vec2 off = vec2(0.0, 0.0);\n        float n = Noise(it + off);\n        if(n == 0.0) v = Box(ft, off, vec2(1.0), r);\n        \n        off = vec2(0.5, 0.0);\n        n = Noise(it + off);\n        if(n == 0.0) v = min(v, Dia(ft, off, vec2(da), r));\n        \n        off = vec2(1.0, 0.0);\n        n = Noise(it + off);\n        if(n == 0.0) v = min(v, Box(ft, off, vec2(1.0), r));\n\n        off = vec2(0.0, 0.5);\n        n = Noise(it + off);      \n        if(n == 0.0) v = min(v, Dia(ft, off, vec2(da), r));\n        \n        off = vec2(1.0, 0.5);\n        n = Noise(it + off);\n        if(n == 0.0) v = min(v, Dia(ft, off, vec2(da), r));\n        \n        off = vec2(0.0, 1.0);\n        n = Noise(it + off);\n        if(n == 0.0) v = min(v, Box(ft, off, vec2(1.0), r));\n        \n        off = vec2(0.5, 1.0);\n        n = Noise(it + off);\n        if(n == 0.0) v = min(v, Dia(ft, off, vec2(da), r));\n        \n        off = vec2(1.0, 1.0);\n        n = Noise(it + off);\n        if(n == 0.0) v = min(v, Box(ft, off, vec2(1.0), r));\n        \n        \n        off = vec2(-0.5, 0.0);\n        n = Noise(it + off);\n        if(n == 0.0) v = min(v, Dia(ft, off, vec2(da), r));\n        \n        off = vec2(1.5, 0.0);\n        n = Noise(it + off);\n        if(n == 0.0) v = min(v, Dia(ft, off, vec2(da), r));\n        \n        off = vec2(-0.5, 1.0);\n        n = Noise(it + off);\n        if(n == 0.0) v = min(v, Dia(ft, off, vec2(da), r));\n        \n        off = vec2(1.5, 1.0);\n        n = Noise(it + off);\n        if(n == 0.0) v = min(v, Dia(ft, off, vec2(da), r));\n        \n        \n        off = vec2(-0.5, 0.0).yx;\n        n = Noise(it + off);\n        if(n == 0.0) v = min(v, Dia(ft, off, vec2(da), r));\n        \n        off = vec2(1.5, 0.0).yx;\n        n = Noise(it + off);\n        if(n == 0.0) v = min(v, Dia(ft, off, vec2(da), r));\n        \n        off = vec2(-0.5, 1.0).yx;\n        n = Noise(it + off);\n        if(n == 0.0) v = min(v, Dia(ft, off, vec2(da), r));\n        \n        off = vec2(1.5, 1.0).yx;\n        n = Noise(it + off);\n        if(n == 0.0) v = min(v, Dia(ft, off, vec2(da), r));       \n        \n    }\n#endif    \n\n\n#if 1\n    v = 64.0;\n\n    {\n        vec2 ft = fract(tex);\n        vec2 it = floor(tex);\n        \n         \n        LOOP(vec2 p0 = vec2(-0.5, 0.0); vec2 off = vec2( 0.5, 0.0); float count = 3.0;,\n             vec2 p0 = vec2(-0.5, 1.0); vec2 off = vec2( 0.5, 0.0); float count = 3.0;, \n             vec2 p0 = vec2( 0.0,-0.5); vec2 off = vec2( 0.0, 0.5); float count = 3.0;, \n             vec2 p0 = vec2( 1.0,-0.5); vec2 off = vec2( 0.0, 0.5); float count = 3.0;,// \n             vec2 p0 = vec2(-0.5, 0.0); vec2 off = vec2( 0.5, 0.5); float count = 2.0;, \n             vec2 p0 = vec2( 0.0,-0.5); vec2 off = vec2( 0.5, 0.5); float count = 2.0;, \n             vec2 p0 = vec2(-0.5, 1.0); vec2 off = vec2( 0.5,-0.5); float count = 2.0;, \n             vec2 p0 = vec2( 0.0, 1.5); vec2 off = vec2( 0.5,-0.5); float count = 2.0;,             \n\n \n             vec2 p1 = p0 + off;         \n              \n             bool l0 = NoiseLabel(it + p0); \n             bool l1 = NoiseLabel(it + p1);\n             \n             if(l0 && !l1) v = min(v, XLen(p0 - ft));\n             if(!l0 && l1) { p0 = p1; }\n             if(l1) v = min(v, SqrDistToLine(ft, p0, p1));\n             \n             l0 = l1; p0 = p1;        \n             \n             for(float j = 0.0; j < count; ++j)\n             {\n                p1 += off;  l1 = NoiseLabel(it + p1);\n                \n                if(!l0 && l1) { p0 = p1; }\n                if(l1) v = min(v, SqrDistToLine(ft, p0, p1));\n                \n                l0 = l1; p0 = p1;  \n             }\n             )\n         #if 1   \n        {\n             vec2 p0 = vec2(-0.5, 0.0);                     \n             vec2 p1 = vec2( 0.0,-0.5);         \n              \n             bool l0 = NoiseLabel(it + p0); \n             bool l1 = NoiseLabel(it + p1);\n             \n             if(l0 && l1) v = min(v, SqrDistToLine(ft, p0, p1));\n        }\n        \n        {\n             vec2 p0 = vec2(-0.5, 1.0);                     \n             vec2 p1 = vec2( 0.0, 1.5);         \n              \n             bool l0 = NoiseLabel(it + p0); \n             bool l1 = NoiseLabel(it + p1);\n             \n             if(l0 && l1) v = min(v, SqrDistToLine(ft, p0, p1));\n        }\n        \n        {\n             vec2 p0 = vec2( 1.5, 0.0);                     \n             vec2 p1 = vec2( 1.0,-0.5);         \n              \n             bool l0 = NoiseLabel(it + p0); \n             bool l1 = NoiseLabel(it + p1);\n             \n             if(l0 && l1) v = min(v, SqrDistToLine(ft, p0, p1));\n        }\n        \n        {\n             vec2 p0 = vec2( 1.5, 1.0);                     \n             vec2 p1 = vec2( 1.0, 1.5);         \n              \n             bool l0 = NoiseLabel(it + p0); \n             bool l1 = NoiseLabel(it + p1);\n             \n             if(l0 && l1) v = min(v, SqrDistToLine(ft, p0, p1));\n        }        \n        #endif\n               \n    }\n    \n    v = rsqrt(rsqrt(v)) - 0.6;\n    //v = sqrt(v) - (0.75);\n#endif\n    \n    //vec2 p0_p = vec2(0.0, 0.0);\n    //vec2 p0_n = normalize(vec2(1.0, 1.0));\n    //\n    //vec2 p1_p = vec2(-1.0, 0.0);\n    //vec2 p1_n = normalize(vec2(-2.0, 1.0));\n    //\n    //vec2 tp0 = tex - p0_n * dot(tex - p0_p, p0_n);\n    //vec2 tp1 = tex - p1_n * dot(tex - p1_p, p1_n);\n    //\n    //\n    //vec2 p1_nn = normalize(p1_n - p0_n * dot(p1_n, p0_n));\n    //\n //\n    //float p0_v = dot(tex - p0_p, p0_n);    \n    //float p1_v = dot(tex - p1_p, p1_n);\n//\n    //v = max(p0_v, p1_v);\n    //\n    //float dd0 = dot(tp1 - p0_p, p0_n);\n    //float dd1 = dot(tp0 - p1_p, p1_n);\n    //\n    ////if(p0_v > 0.0 || p1_v > 0.0)\n    //if(dd0 > 0.0 && dd1 > 0.0)\n    //{     \n    //    vec2 pp = tp0 + p1_nn * dd1 / dot(p1_nn, p1_n);\n    //    \n    //    v = max(v, length(tex - pp));\n    //    \n    //    v = 0.0;\n    //}\n    \n        \n    col = mix(col, vec3(0.1), Lines(v * 12.0, 0.)); \n    col *= step(0.0, vec3(v, v > -0.25 ? -v : v, -v));\n    \n    if(false)\n    {\n        vec2 ft = fract(tex);\n        vec2 it = floor(tex);\n        \n        float ds = 0.03;\n        \n        vec2 off = vec2(0.0, 0.0);\n        float n = Noise(it + off);\n        col = mix(col, vec3(n), Dot(ft.xy, off, ds));\n        \n        off = vec2(0.5, 0.0);\n        n = Noise(it + off);\n        col = mix(col, vec3(n), Dot(ft.xy, off, ds));\n        \n        off = vec2(1.0, 0.0);\n        n = Noise(it + off);\n        col = mix(col, vec3(n), Dot(ft.xy, off, ds));\n\n        off = vec2(0.0, 0.5);\n        n = Noise(it + off);\n        col = mix(col, vec3(n), Dot(ft.xy, off, ds));         \n        \n        off = vec2(1.0, 0.5);\n        n = Noise(it + off);\n        col = mix(col, vec3(n), Dot(ft.xy, off, ds));\n        \n        off = vec2(0.0, 1.0);\n        n = Noise(it + off);\n        col = mix(col, vec3(n), Dot(ft.xy, off, ds));\n        \n        off = vec2(0.5, 1.0);\n        n = Noise(it + off);\n        col = mix(col, vec3(n), Dot(ft.xy, off, ds)); \n        \n        off = vec2(1.0, 1.0);\n        n = Noise(it + off);\n        col = mix(col, vec3(n), Dot(ft.xy, off, ds)); \n        \n    }\n\n    \n    //tex.x += 1.0;\n    col *= mix(0.5, 1.0, Noise(tex));\n    //col = vec3(length(vec2(dFdx(v), dFdy(v))));\n    \n    #if 1\n    vec2 s = (uv0/iResolution.xy*2.0-1.0);\n    s.x = 1.0-Pow2(s.x);    s.y = 1.0-Pow2(s.y);\n    col *= mix(1.0, 0.6, Pow2(1.0-sqrt(s.x*s.y)));\n    #endif\n    \n    outCol = vec4(GammaEncode(clamp01(col)), 1.0);    \n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\n#define Frame float(iFrame)\n#define Time iTime\n#define PixelCount iResolution.xy\n#define clamp01(x) clamp(x, 0.0, 1.0)\n#define rsqrt inversesqrt\n\nconst float Pi = 3.14159265359;\nconst float Pi05 = Pi * 0.5;\nconst float Pi2  = Pi * 2.0;\n\nfloat SqrLen(vec2 x) {return dot(x, x);}\nfloat SqrLen(vec3 x) {return dot(x, x);}\n\n\nfloat Pow2(float x) {return x*x;}\nfloat Pow3(float x) {return x*x*x;}\nfloat Pow4(float x) {return Pow2(Pow2(x));}\n\nfloat GammaEncode(float x) {return pow(x, 1.0 / 2.2);}\nvec2 GammaEncode(vec2 x) {return pow(x, vec2(1.0 / 2.2));}\nvec3 GammaEncode(vec3 x) {return pow(x, vec3(1.0 / 2.2));}\nvec4 GammaEncode(vec4 x) {return pow(x, vec4(1.0 / 2.2));}\n\nfloat ddxyLen(float v) { return length(vec2(dFdx(v), dFdy(v))); }\nfloat ddxyRcpLen(float v) { return rsqrt( Pow2(dFdx(v)) + Pow2(dFdy(v)) ); }\n\n\nfloat rescale(float v) { return v * ddxyRcpLen(v); }\n\nfloat XLen(vec2 vec)\n{\n    #if 1\n    vec = vec2(vec.x+vec.y, vec.x-vec.y) * sqrt(0.5);\n    #endif\n    \n    #if 1\n    return Pow4(vec.x) + Pow4(vec.y);\n    #else\n    return dot(vec, vec);\n    #endif\n}\n\nfloat SqrDistToLine(vec2 p, vec2 ls, vec2 lt)\n{\n    vec2 lvec = lt - ls;\n    \n    vec2 rvec = ls + lvec * clamp01(dot(p - ls, lvec) / dot(lvec, lvec)) - p;\n\n    return XLen(rvec);\n    //return Pow4(rvec.x) + Pow4(rvec.y);\n    return dot(rvec, rvec);\n}\n\nfloat Graph(float f, float b)\n{\n    return clamp01(1.0 - (abs(rescale(f))-0.5-b)); \n}\n\n\nfloat Line(float u, float b) { return Graph(u, b); }\nfloat Lines(float u, float b) { return Graph(sin(u * Pi), b); }\n\nfloat Grid(vec2 uv, float b)\n{\n    float xl = Lines(uv.x, b);    \n    float yl = Lines(uv.y, b);\n\n    return max(xl, yl);\n}\n\nfloat Cross(vec2 uv, float b)\n{\n    float xl = Line(uv.x, b);    \n    float yl = Line(uv.y, b);\n\n    return max(xl, yl);\n}\n\nfloat Dot(vec2 sp, vec2 dp, float dr)\n{\n    float v = length(sp - dp) - dr;\n    \n    if(v > dr) return 0.0;\n    \n    v *= ddxyRcpLen(v);\n    v = 1.0 - clamp(v * 1.0, 0.0, 1.0);\n    \n    return v;\n}\n\n#define LOOP(head0, head1, head2, head3, head4, head5, head6, head7, body) {head0 body} {head1 body} {head2 body} {head3 body} {head4 body} {head5 body} {head6 body} {head7 body}\n","name":"Common","description":"","type":"common"}]}