{"ver":"0.1","info":{"id":"7stBWX","date":"1657376270","viewed":145,"name":"Fbm SpeedAcid","username":"Mojomajor","description":"playing with circles, colors, time, fbm\n\n\nfor a Rorschach test:\nlet it run for a bit and then pause it and take a screenshot.\nWhat do you see?","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["acidfbm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define time iTime *10.0\n#define tau 6.2831853\nfloat random (in vec2 _st) {\n            return fract(sin(dot(_st.xy,\n                                vec2(12.9898*sin(time),78.233)))*\n                43758.5453123);\n        }\nfloat noise (in vec2 _st) {\n            vec2 i = floor(_st);\n            vec2 f = fract(_st);\n\n            // Four corners in 2D of a tile\n            float a = random(i);\n            float b = random(i + vec2(1.0, 0.0));\n            float c = random(i + vec2(0.0, 1.0));\n            float d = random(i + vec2(1.0, 1.0));\n\n            vec2 u = f * f * (3.0 - 2.0 * f);\n\n            return mix(a, b, u.x) +\n                    (c - a)* u.y * (1.0 - u.x) +\n                    (d - b) * u.x * u.y;\n        }\nmat2 makem2(in float theta){float c = cos(theta);float s = sin(theta);return mat2(c,-s,s,c);}\nfloat fbm(in vec2 p)\n{\t\n\tfloat z=2.;\n\tfloat rz = 0.;\n\tvec2 bp = p;\n\tfor (float i= 1.;i < 6.;i++)\n\t{\n\t\trz+= abs((noise(p)-0.5)*2.)/z;\n\t\tz = z*2.;\n\t\tp = p*2.;\n\t}\n\treturn rz;\n}\n\nfloat dualfbm(in vec2 p)\n{\n    //get two rotated fbm calls and displace the domain\n\tvec2 p2 = p*.1;\n\tvec2 basis = vec2(fbm(p2-time*1.2),fbm(p2+time*1.38));\n\tbasis = (basis-.5)*.2;\n\tp += basis;\n\t\n\t//coloring\n\treturn fbm(p*makem2(time*0.2));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // center 0\n    uv -= 0.5;\n    // aspect fix\n    uv.x *= iResolution.x/iResolution.y;\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(time+uv.xyx+vec3(0,2,4));\n    \n    // mirror\n    uv.x= abs(uv.x);\n    \n    vec4 col = vec4( 1.0);\n    \n    float d = length(uv);\n    float blur = 0.099*abs(sin(time)/10.+.5)/2.0;\n    \n    float fm = 1.;//dualfbm(uv);\n    \n    col.r = smoothstep(0.5+blur,0.49-blur,d*fm);\n    col.g = smoothstep(0.3+blur,0.29-blur,d*fm);\n    col.b = smoothstep(0.2+blur,0.19-blur,d*fm);\n    \n    col.rgb*=vec3(max(abs(sin(time)),0.5*fm));\n    \n    float fm2 = dualfbm(uv*sin(time))*0.99-.1;\n    col.rgb = mix(col.rgb,1.1 + 0.99*cos(time*.1*fm2*fm2+uv.xyx+vec3(0,2,4)), 0.5);\n    \n    // Output to screen\n    fragColor = vec4(col);\n}","name":"Image","description":"","type":"image"}]}