{"ver":"0.1","info":{"id":"DlVcR3","date":"1700492274","viewed":75,"name":"Hexagon distribution","username":"Hikagi","description":"Shader for testing random pattern distribution via hexagonal cells in comparison to regular cells. (mouse drag to switch views)\nIn a game scenario the patterns would be sampled from a texture atlas instead. (sprites need to fit circle bounds for rotation)","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["tiling","hex"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define HIDE_CELLS\n\nconst float PI = 3.1415926;\nconst float PI2 = 6.2831853;\nconst float SQRT3 = 1.7320508;\n\nfloat rand(vec2 p) {\n    return fract(sin(dot(p ,vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat mutate(float rand) {\n    return fract(rand * 3.33);\n}\n\nvec4 hexCoord(vec2 uv) {       \n    vec2 sc = vec2(1, SQRT3);\n    \n    vec2 a, b;\n    a.x = uv.x - round(uv.x);\n    a.y = uv.y - round(uv.y / SQRT3) * SQRT3;\n    \n    b.x = uv.x - (round(uv.x - 0.5) + 0.5);\n    b.y = uv.y - (round((uv.y - 1.0) / SQRT3) + 0.5) * SQRT3;\n    \n    vec2 offset = dot(a, a) < dot(b, b) ? a : b;    \n    vec2 center = uv - offset;\n\n    return vec4(offset * 2.0, center);\n}\n\nvec4 cellCoord(vec2 uv) {\n    vec2 offset = fract(uv) - 0.5;\n    vec2 center = (uv - offset);\n    \n    return vec4(offset * 2.0, center);\n}\n\nfloat flower(vec2 p) {\n    float angle = atan(p.y, p.x) / PI2;\n    float a = abs(fract(angle * 5.0) - 0.5);\n    float b = 1.0 - length(p);   \n\n    return b * (a + 0.4);\n}\n\nfloat leaf(vec2 p, float id) {\n    float a = 1.0 - abs(id > 0.5 ? p.y : p.x) * 1.5;\n    float b = 1.0 - length(p) * 2.0;\n    \n    return (a + b) * 0.5;\n}\n\nvec2 rotate (vec2 p, float angle){\t\n\tfloat sinRot = sin(angle);\n\tfloat cosRot = cos(angle);\n\tmat2x2 rotMat = mat2x2(cosRot, -sinRot, sinRot, cosRot);\n\t\n\treturn p * rotMat;\n}\n\nfloat range(float value, float min, float max) {\n    // Simplified remap taking 0-1 input\n    return min + value * (max - min);\n}\n\nvec3 distribute(vec4 uv) {\n    vec2 coord = uv.xy;    \n    float rnd = rand(uv.zw * 13.0);\n    float rnd2 = mutate(rnd);\n\n    // Primary and secondary rotation\n    float angleA = rnd * PI2;\n    float angleB = (rnd * iTime - rnd2) * 0.3 * PI * sign(rnd - 0.5);\n\n    vec2 dir = vec2(sin(angleA), cos(angleA)); // Ignoring corners of rectangular cells\n    \n    // Offset remap (determines scale)\n    float dist = range(fract(rnd2), 0.25, 0.65);\n\n    // Rotation Offset Scale\n    coord = rotate(coord, angleB);\n    coord = coord + dir * dist;\n    coord /= (1.0 - dist);\n\n    return vec3(coord, rnd);\n}\n\nfloat hexDistance(vec2 p) {\n    p = abs(p);\n    return max(dot(p, vec2(1.0, SQRT3) * 0.5), p.x);\n}\n\nfloat cellDistance(vec2 p) {\n    p = abs(p);    \n    return max(p.x, p.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord / iResolution.y) * 8.0;\n    uv += iTime * 0.5;\n    \n    // Mouse handling and hiding\n    float split = iMouse.z > 0.001 ? iMouse.x / iResolution.x : 1.1;\n\n    // Gather coordinates\n    vec2 nCoord = fragCoord.xy / iResolution.xy;\n    vec4 cCoord = nCoord.x < split ? hexCoord(uv) : cellCoord(uv);\n    vec3 distribution = distribute(cCoord);\n    vec2 coord = distribution.xy;\n    float id = distribution.z;\n    float id2 = mutate(id);\n    \n    // Shape blending\n    float weight = floor(id + 0.75);\n\n    float shape = max(mix(flower(coord), leaf(coord, id2), weight), 0.0);\n    \n    shape = floor(1.2 - shape);\n\n    vec3 flowerC = vec3(1.0, 0.75, 1.0);\n    vec3 leafC = mix(vec3(0.75, 1.0, 0.25), vec3(0.25, 0.5, 0.5), id);\n    vec3 water = vec3(0.0, 0.3, 0.4);\n\n    vec3 color = mix(flowerC, leafC, weight);   \n    color = mix(color, water, shape);\n\n    // Debug\n    float line = abs(split - nCoord.x) > 0.001 ? 0.0 : 1.0;\n    \n    #ifndef HIDE_CELLS\n        line = max(line, nCoord.x < split ? hexDistance(cCoord.xy) : cellDistance(cCoord.xy));\n    #endif\n    \n    color = line < 0.99 ? color : vec3(0.0, 0.6, 1.0);\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}