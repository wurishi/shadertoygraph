{"ver":"0.1","info":{"id":"Mtc3Ds","date":"1472399727","viewed":322,"name":"Rayleigh Phase Function","username":"nlguillemot","description":"This shows how Rayleigh scattering mostly scatters forward and backward (right and left in the image). The image is not black at the top and bottom, which shows that a decent amount of scattering still happens perpendicularly.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["rayleigh"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define M_PI 3.14159265359\n\nfloat Rayleigh(float costh)\n{\n    return 3.0 / (16.0 * M_PI) * (1.0 + costh * costh);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // make position from -1 to 1 in x and y, with (0,0) in the center of the screen.\n    vec2 pos = fragCoord * 2.0 / iResolution.xy - vec2(1.0);\n    \n    // compute cos(theta) used as input to Rayleigh Phase Function\n    // = dot((1,0), pos) / (length((1,0)) * length(pos))\n    // = dot((1,0), pos) / length(pos)\n\tfloat costh = pos.x / length(pos);\n    \n    // compute Rayleigh Phase Function\n    float p = Rayleigh(costh);\n    \n    // convert Rayleigh to a color\n    vec4 color = vec4(vec3(p),1.0);\n    \n    // gamma-correct it\n    color.rgb = pow(color.rgb, vec3(1.0/2.2));\n    \n    // render it        \n    fragColor = color;\n}","name":"Image","description":"","type":"image"}]}