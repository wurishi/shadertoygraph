{"ver":"0.1","info":{"id":"Ml2XDK","date":"1446656700","viewed":324,"name":"SphereNoise","username":"jt","description":"Iterated spheres in voronoi-cells placed on a grid with random offsets ([url]https://www.shadertoy.com/view/Ml2XWK[/url])","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","noise","grid","random"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// SphereNoise (superposition of spheres in displaced-grid voronoi-cells) by Jakob Thomsen\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// iq's hash function from https://www.shadertoy.com/view/MslGD8\nvec2 hash( vec2 p ) { p=vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))); return fract(sin(p)*18.5453); }\n\nfloat simplegridnoise(vec2 v)\n{\n    // NOTE: Setting s = 0.01 causes horizontal-lines-artifact with texture-lookup.\n    //       Use s = 1.0 / 256.0 (thanks iq) or switch filtering to linear (thanks tomkh).\n    //float s = 0.01;\n    float s = 1.0 / 256.0;\n    vec2 fl = floor(v);\n    vec2 fr = fract(v);\n    float mindist = 1000.0;\n    for(float y = -1.0; y <= 1.0; y++)\n    {\n        for(float x = -1.0; x <= 1.0; x++)\n        {\n            vec2 offset = vec2(x, y);\n    \t\t//vec4 r = texture(iChannel0, (fl + offset) * s + iTime * 0.001);\n            //vec2 pos = r.xy;\n            //vec4 r = texture(iChannel0, (fl + offset) * s);\n            //float phi = 3.1415926 * 2.0 * (iTime * 0.1 + r.z);\n            float phi = 3.1415926 * 2.0 * (iTime * 0.1 + hash(fl + offset).x);\n            vec2 pos = 0.5 + 0.5 * vec2(cos(phi), sin(phi));\n            float d = length(fr - (pos + offset));\n            mindist = min(mindist, d);\n        }\n    }\n    \n    return mindist;\n}\n\nfloat spherenoise(vec2 v)\n{\n    return (1.0 - pow(simplegridnoise(v) / sqrt(2.0), 2.0));\n}\n\nvec3 spherenoisenrm(vec2 v)\n{\n    float d = 0.01;\n    return normalize(\n           vec3(spherenoise(v + vec2(  d, 0.0)) - spherenoise(v + vec2( -d, 0.0)),\n                spherenoise(v + vec2(0.0,   d)) - spherenoise(v + vec2(0.0,  -d)),\n                d));\n}\n\nfloat fractalspherenoise(vec2 v)\n{\n    float val = 0.0;\n    const float n = 4.0;\n    for(float i = 0.0; i < n; i++)\n    {\n    \tval += pow(0.5, i + 1.0) * spherenoise(pow(2.0, i) * v);\n    }\n    return val;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float val = pow(fractalspherenoise(uv * 10.0), 5.0);\n    fragColor = vec4(vec3(val), 1.0);\n}\n","name":"","description":"","type":"image"}]}