{"ver":"0.1","info":{"id":"3dcGD7","date":"1574368384","viewed":73,"name":"krople deszczu ","username":"Sardax","description":"krople z deformacją kształtu\n","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["krople","deformacja"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec4 mod289(vec4 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\nvec4 permute(vec4 x) { return mod289(((x*34.0)+1.0)*x); }\n \n/// <summary>\n/// 2D Noise by Ian McEwan, Ashima Arts.\n/// <summary>\nfloat snoise_2D (vec2 v)\n{\n    const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626, // -1.0 + 2.0 * C.x\n                        0.024390243902439); // 1.0 / 41.0\n \n    // First corner\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n \n    // Other corners\n    vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n \n    // Permutations\n    i = mod289(i); // Avoid truncation effects in permutation\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n        + i.x + vec3(0.0, i1.x, 1.0 ));\n \n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n \n    // Gradients: 41 points uniformly over a line, mapped onto a diamond.\n    // The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n \n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n \n    // Normalise gradients implicitly by scaling m\n    // Approximation of: m *= inversesqrt( a0*a0 + h*h );\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n \n    // Compute final noise value at P\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n//DEBUG\n#define DROPS_TURBSIZE 15.f\n#define DROPS_TURBSHIFT vec4(0.35, 1, 0, 1)\n#define DROPS_TURBTIME sin(0.1/3.f)\n#define DROPS_TURBCOF 0.33\n \n \nvec2 l_jh2(vec2 f, vec4 s, float l)\n{\n    vec2 x = s.xy, V = s.zw;\n    float y = snoise_2D(f * vec2(DROPS_TURBSIZE, DROPS_TURBSIZE))*.5;\n    vec4 r = vec4(y, y, y, 1);\n    r.xy = vec2(r.x + r.z/4.f, r.y + r.x/2.f);\n    r -= 1.5;\n    r *= l;\n    return (f + (x + V) *r.xy);\n}\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nfloat noise(float t)\n{\n    return fract(sin(t*10.0)*10.0);\n}\n \nfloat noise2(vec2 p)\n{\n    return noise(p.x + noise(p.y));\n}\n \nfloat raindot(vec2 uv, vec2 id, float t)\n{\n    vec2 p = 0.25 + 0.25 * vec2(noise2(id), noise2(id + vec2(1.0, 0.0)));\n    float r = clamp(0.5 - mod(t + noise2(id), 1.0), 0.0, 1.0);\n    return smoothstep(0.3 * r, 0.0, length(p - uv));\n}\n \n/////////////////////////////////////////////////////////////////////////////\n//rain pass\n#define r_size 5.f //raindrops size\n#define r_intensity 1.0\n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n//clean img and coords\n    vec4 final;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n   \n    final = texture( iChannel0, uv);\n   \n//rain pass  \n    float v = raindot(fract(mix(uv, l_jh2(uv, DROPS_TURBSHIFT, DROPS_TURBTIME), DROPS_TURBCOF) * r_size + vec2(0, 0.1 * iTime)), floor(uv * r_size + vec2(0, 0.1 * iTime)), iTime);\n    vec2 rain = vec2(vec2(dFdx(v*0.5f), dFdy(v*0.5f))  / (v + r_size))*r_intensity;      \n    vec4 mask_rain = texture(iChannel0, uv+rain);\n \n \n/////////////////////////////////////////////////////////////////////////////\n//final combine\n \n    final = mask_rain;\n    fragColor = final;\n}","name":"Image","description":"","type":"image"}]}