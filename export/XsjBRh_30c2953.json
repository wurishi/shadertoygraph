{"ver":"0.1","info":{"id":"XsjBRh","date":"1499432386","viewed":154,"name":"FractalShizzle7","username":"JulesPommier","description":"Modification of Fractal Land by Kali (https://www.shadertoy.com/view/XsBXWt)","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"Fractal Cartoon\" - former \"DE edge detection\" by Kali\n\n// Cartoon-like effect using eiffies's edge detection found here: \n// https://www.shadertoy.com/view/4ss3WB\n// I used my own method previously but was too complicated and not compiling everywhere.\n// Thanks to the suggestion by WouterVanNifterick. \n\n// There are no lights and no AO, only color by normals and dark edges.\n\n// update: Nyan Cat cameo, thanks to code from mu6k: https://www.shadertoy.com/view/4dXGWH\n\n\n//#define SHOWONLYEDGES\n#define WAVES\n//#define BORDER\n\n#define RAY_STEPS 200\n\n#define BRIGHTNESS 2.\n#define GAMMA 1.4\n#define SATURATION 1.5\n//*sin(iTime)+0.659\n\n\n#define detail .001\n#define t iTime*0.5\n\n\n\nconst vec3 origin=vec3(-1.6,1.,0.);\nfloat det=0.0;\n\n\n// 2D rotation function\nmat2 rot(float a) {\n\treturn mat2(cos(a),sin(a),-sin(a),cos(a));\t\n}\n\nfloat sphereDE(vec3 point, vec3 pos){\n\treturn length(point - pos) -1.;   \n}\n\n// \"Amazing Surface\" fractal\nvec4 formula(vec4 p) {\n   \t\tp.xz = abs(p.xz+1.)-abs(p.xz-1.)-p.xz;\n\n\t\t//p.xz = abs(sin(p.xz+1.))-abs((p.xz-1.))-mod(p.xz, p.y);\n\t\tp.y-=.25;\n\t\t//p.xz*=rot(radians(35.*sin(iTime)+50.)); //Hier Sinus rein!\n    \tp.xy*=rot(radians(20.));\n\t\tp=p*2./clamp(dot(p.xyz,p.xyz),.2,1.);\n\treturn p;\n}\n\n\n\n// Distance function\nfloat de(vec3 pos) {\n#ifdef WAVES\n\t//pos.y+=sin(pos.z-t*6.)*.15; //waves!\n    pos.y+= tan(pos.z * 0.1); //waves!\n#endif\n    pos.z = mix(pos.z, pos.z*(4. - min(3.1,iTime)), max(iTime - 1., 1. )); //Zeit Raum Kontinuum brechen\n\t//float hid=0.;\n\tvec3 tpos=sin(pos);\n\ttpos.z=abs(3.-mod(tpos.z,6.));\n\tvec4 p=vec4(tpos,1.);\n\tfor (int i=0; i<4; i++) {p=formula(p);}\n\tfloat fr=(length(max(vec2(0.),p.yz-1.5))-1.)/p.w;\n\t/*float ro=max(abs(pos.x+1.)-.3,pos.y);\n\t\t  ro=max(ro,-max(abs(pos.x+1.)-.1,pos.y));\n\tpos.z=abs(.25-mod(pos.z,.5));\n\t\t  ro=max(ro,-max(abs(pos.z)-.2,pos.y));\n\t\t  ro=max(ro,-max(abs(pos.z)-.01,pos.y));MACHT DEN WEG WEG!!!*/\n\t\n\n    \n\treturn fr;\n}\n\n\n// Camera path\nvec3 path(float ti) {\n\tti*=1.5;\n\tvec3  p=vec3(sin(ti),(1.-sin(ti*2.))*.5,-ti*5.)*.5;\n\treturn p;\n}\n\n// Calc normals, and here is edge detection, set to variable \"edge\"\n\nfloat edge=1.5;\nvec3 normal(vec3 p) { \n\tvec3 e = vec3(0.0,det*5.,0.0);\n\n\tfloat d1=de(p-e.yxx),d2=de(p+e.yxx);\n\tfloat d3=de(p-e.xyx),d4=de(p+e.xyx);\n\tfloat d5=de(p-e.xxy),d6=de(p+e.xxy);\n\tfloat d=de(p);\n\tedge=abs(d-0.5*(d2+d1))+abs(d-0.5*(d4+d3))+abs(d-0.5*(d6+d5));//edge finder\n\tedge=min(1.,pow(edge,.55)*15.);\n\treturn normalize(vec3(d1-d2,d3-d4,d5-d6));\n}\n\n\n\n\n// Raymarching and 2D graphics\n\nvec3 raymarch(in vec3 from, in vec3 dir) \n\n{\n    \n    \n\tedge=2.0;\n\tvec3 p, norm;\n\tfloat d=100.;\n\tfloat totdist=0.;\n\tfor (int i=0; i<RAY_STEPS; i++) {\n\t\tif (d>det && totdist<(30.0/**cos(iTime)+35.*/)) { //HIER *sin(iTime)+35.\n\t\t\tp=from+totdist*dir;\n\t\t\td=de(p);\n\t\t\tdet=detail*exp(.13*totdist);//det=tan((detail /* tan(iTime)*10.*/*exp(.23*totdist)));\n            //det=(10.*sin((detail/**sin(iTime)*10.*/*exp(.13*totdist)))+10.);\n\t\t\ttotdist+=d; \n\t\t}\n\t}\n\tvec3 col=vec3(0.);\n\tp-=(det-d)*dir;\n\tnorm=normal(p)*dir;\n    \n    \n#ifdef SHOWONLYEDGES\n\tcol=1.-vec3(edge); // show wireframe version\n#else\n    if(totdist < pow(t, 3.)){\n    \tcol=(1.-abs(norm))*max(.2,1.-edge*1.6); // set normal as color with dark edges\n        if(totdist > pow(t, 3.5)-1.){\n        \tcol = vec3(0,0,0);   \n        }\n    }\n    else{\n    \tcol = vec3(0.3,0.3,0.3);   \n    }\n\t\n#endif\t\t\n\ttotdist=clamp(totdist,0.,26.);\n\tdir.y-=.02;\n\tfloat sunsize=0.-max(0.,texture(iChannel0,vec2(.6,.2)).x)*5.; // responsive sun size\n\tfloat an=atan(dir.x,dir.y)+iTime*1.5; // angle for drawing and rotating sun\n\tfloat s=pow(clamp(1.0-length(dir.xy)*sunsize-abs(.2-mod(an,.4)),0.,1.),.1); // sun\n\tfloat sb=pow(clamp(1.0-length(dir.xy)*(sunsize-.2)-abs(.2-mod(an,.4)),0.,1.),.1); // sun border\n\tfloat sg=pow(clamp(1.0-length(dir.xy)*(sunsize-4.5)-.5*abs(.2-mod(an,.4)),0.,1.),3.); // sun rays\n\tfloat y=mix(.45,1.2,pow(smoothstep(0.,1.,.75-dir.y),2.))*(1.-sb*.5); // gradient sky\n\t\n\t// set up background with sky and sun\n\tvec3 backg=vec3(0.5,0.,1.)*((1.-s)*(1.-sg)*y+(1.-sb)*sg*vec3(1.,.8,0.15)*3.);\n\t\t backg+=vec3(1.,.9,.1)*s;\n\t\t backg=max(backg,sg*vec3(1.,.9,.5));\n\t\n\tcol=mix(vec3(1.,.9,.3),col,exp(-.004*totdist*totdist));// distant fading to sun color\n\tif (totdist>(35.)) col=backg; // hit background ANIMATE FOR DISTANCE VARIATION *sin(iTime)+35.\n\tcol=pow(col,vec3(GAMMA))*BRIGHTNESS;\n\tcol=mix(vec3(length(col)),col,SATURATION);\n#ifdef SHOWONLYEDGES\n\tcol=1.-vec3(length(col));\n#else\n\tcol*=vec3(.2,0.5,.7);\n#endif\n\treturn col;\n}\n\n// get camera position\nvec3 move(inout vec3 dir) {\n\tvec3 go=path(t);\n\tvec3 adv=path(t+.7);\n\tfloat hd=de(adv);\n\tvec3 advec=normalize(adv-go);\n\tfloat an=adv.x-go.x; an*=min(1.,abs(adv.z-go.z))*sign(adv.z-go.z)*.7;\n\tdir.xy*=mat2(cos(an),sin(an),-sin(an),cos(an));\n    an=advec.y*1.7;\n\tdir.yz*=mat2(cos(an),sin(an),-sin(an),cos(an));\n\tan=atan(advec.x,advec.z);\n\tdir.xz*=mat2(cos(an),sin(an),-sin(an),cos(an));\n\treturn go;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy*2.-1.;\n\tvec2 oriuv=uv;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec2 mouse=(iMouse.xy/iResolution.xy-.5)*3.;\n\tif (iMouse.z<1.) mouse=vec2(0.,-0.05);\n\tfloat fov=2.-max(0.,.7-iTime*.3);\n\tvec3 dir=normalize(vec3(uv*fov,1.));\n\tdir.yz*=rot(mouse.y);\n\tdir.xz*=rot(mouse.x);\n\tvec3 from=origin ;//+ move(dir);\n\tvec3 color=raymarch(from,dir); \n\t#ifdef BORDER\n\tcolor=mix(vec3(0.),color,pow(max(0.,.95-length(oriuv*oriuv*oriuv*vec2(1.05,1.1))),.3));\n\t#endif\n\tfragColor = vec4(color,1.);\n}","name":"Image","description":"","type":"image"}]}