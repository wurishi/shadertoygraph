{"ver":"0.1","info":{"id":"ldV3zR","date":"1453111514","viewed":364,"name":"Kostas Remix","username":"Ralle","description":"Modification of Kostas shader: https://www.shadertoy.com/view/lsdGDs","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["swirl","music"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGzn","filepath":"/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","previewfilepath":"/media/ap/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"\nvec4 FreqAnalysis() \n{\n    vec4 sy = vec4(0.0);    \n    sy.x = texture(iChannel0, vec2(0.0, 0.0)).x;\n\tsy.y = texture(iChannel0, vec2(0.33, 0.0)).x;\n    sy.z = texture(iChannel0, vec2(0.66, 0.0)).x;\n    sy.w = texture(iChannel0, vec2(1.0, 0.0)).x;\n     \n    return sy;\n}\n\nvec4 VideoAnalysis(in vec2 fragCoord) \n{\n    return 1.0 - texture(iChannel1,fragCoord);\n}\n\nvec4 VideoAnalysisC2(in vec2 fragCoord) \n{\n    return 1.0 - texture(iChannel2,fragCoord);\n}\n\nvec3 Lightning(in vec2 fragCoord) \n{\n    vec3 destColor = vec3(0.0);\n    float t = sin(iTime)/5.0;\n    const int N = 500;\n    for(int i=0; i<N; i++) {\n        vec2 v = vec2(cos(radians(t+float(i))), sin(radians(t+float(i))))*sin(((1.0-cos(radians(iTime*10.0)))*float(i))/10.0);\n        v *= 2.8;\n        destColor += 0.0015/length(fragCoord -v);\n    }\n    \n    return destColor;\n}\n\n//This palette solution is from https://iquilezles.org/articles/palettes\nvec3 colorPalette(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n\treturn a+b*cos(6.28318530718*(c*t+d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    //Offseting 0,0 to center of screen.\n    vec2 cUV = uv - 0.5;\n    //Scaling U with screen resolution aspect ratio to get circular shapes and not oval shapes.\n    cUV.x *= iResolution.x/iResolution.y;\n    \n    //Building my own normalized atan2 solution as this does not seem available?\n    float f;\n    if(cUV.y > 0.0)\n    {\n        f = atan(cUV.x/cUV.y) / 6.2831 + 0.25;\n    }\n    else\n    {\n        f = atan(cUV.x/cUV.y) / 6.2831 + 0.75;\n    }\n    \n    vec4 audio = FreqAnalysis();\n    vec4 video = VideoAnalysis(uv) * audio;\n    vec4 video2 = VideoAnalysisC2(uv) * audio;\n    vec3 light = Lightning(cUV);\n    \n    video.x *= light.x;\n    video.y *= light.y;\n    video.z *= light.z;\n    \n    video2 *= light.x;\n    video2.y *= light.y;\n    video2.z *= light.z;\n    \n    //Getting the length from center and animating this to cycles between -8 to +8\n    float l = length(cUV);\n    float lm = (sin(iTime)  * audio.x);\n    lm *= 10.0;\n    \n    //Adding time, modulus to keep it in 0-1 color spectrum, modifiying the swiping line with the length from center and it's animation.\n    float a = mod((l*lm)+f-iTime,1.0);\n    a *= smoothstep(.0,abs(lm)*.004,abs(mod((l*lm)+f-iTime+.5,1.0)-.5));\n    \n    vec3 c = colorPalette(iTime*0.05+l*0.3, vec3(0.5,0.5,0.5), vec3(0.5,0.5,0.5), vec3(1.0,1.0,1.0), vec3(0.0,0.33,0.67)) * a;\n\n\t//fragColor = video;\n    fragColor = (vec4(c,1.0) + audio) * video * video2;\n}","name":"Image","description":"","type":"image"}]}