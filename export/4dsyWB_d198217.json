{"ver":"0.1","info":{"id":"4dsyWB","date":"1489681465","viewed":231,"name":"Ray bending 2","username":"granskog","description":"Rays pulled downwards on each iteration.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["ray","spheres","bending","inception"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdfPlane(in vec3 pos, in vec3 n) {\n    return dot(pos, n);\n}\n\nfloat sdfSphere(in vec3 pos, in float radius) {\n\treturn length(pos) - radius;   \n}\n\nfloat sdfUnion(in float a, in float b) {\n\treturn min(a, b);   \n}\n\nfloat samp(in vec3 pos) {\n \tvec3 spos = vec3(mod(pos.x, .7f) - 0.35f, pos.y, mod(pos.z, 0.7f) - 0.35f);\n    float sphere = sdfSphere(spos, 0.5f);\n    return sphere;\n}\n\n\n\nvec3 march(in vec3 origin, in vec3 dir, in float maxlen) {\n\tfloat dist = 0.0f;\n    vec3 pos = origin;\n    vec3 d = dir;\n    \n    while (dist < maxlen) {\n    \tfloat t = samp(pos);\n        if (t < 0.001f) {\n        \tfloat fx = samp(vec3(pos.x + 0.0001f, pos.y, pos.z)) - samp(vec3(pos.x - 0.0001f, pos.y, pos.z));\n\t\t\tfloat fy = samp(vec3(pos.x, pos.y + 0.0001f, pos.z)) - samp(vec3(pos.x, pos.y - 0.0001f, pos.z));\n\t\t\tfloat fz = samp(vec3(pos.x, pos.y, pos.z + 0.0001f)) - samp(vec3(pos.x, pos.y, pos.z - 0.0001f));\n\t\t\tvec3 normal = normalize(vec3(fx, fy, fz));\n            if (dot(-d, normal) < 0.0f) normal = -normal;\n            return vec3(max(normal.y, 0.4f));\n        }\n        \n        d = normalize(d + vec3(0, -0.0025f, 0));\n        \n        dist += 0.01f;\n        pos += 0.01f * d;\n    }\n    \n    return vec3(0.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float time = iTime;\n    \n    vec3 campos = vec3(-1.0f + iTime, 1.5f, -4.0f + iTime);\n    vec3 dir = normalize(vec3(1.5f, 1.0f, 1.0f));\n    vec3 side = normalize(cross(dir, vec3(0, 1, 0)));\n    vec3 up = normalize(cross(side, dir));\n    float fov = 128.0f / 180.0f * 3.141592;\n   \tfloat ifov = 1.0f / tan(fov / 2.0f);\n    vec2 ndc = vec2(uv.x * 2.0f - 1.0f, (uv.y * 2.0f - 1.0));\n    ndc.y *= iResolution.y / iResolution.x;\n    \n    vec3 rdir = normalize(side * ndc.x + up * ndc.y + dir * ifov);\n    \n    vec3 c = march(campos, rdir, 50.0f);\n    \n\tfragColor = vec4(c,1.0);\n}","name":"Image","description":"","type":"image"}]}