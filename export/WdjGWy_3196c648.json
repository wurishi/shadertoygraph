{"ver":"0.1","info":{"id":"WdjGWy","date":"1549899957","viewed":702,"name":"Dithering using the R-sequence","username":"Clocktown","description":"Dithering based on the quasi-random, low-discrepancy R-sequence, as described here: http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/\n\nFeel free to play with the number of gray levels (ng) in the shader!","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["blackandwhite","gray","dithering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Dithering using the R-mask\n// http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/\n// Uncomment the #define to get color\n#define PER_CHANNEL\n\n// Triangle Wave\nfloat T(float z) {\n    return z >= 0.5 ? 2.-2.*z : 2.*z;\n}\n\n// R dither mask\nfloat intensity(ivec2 pixel) {\n    const float a1 = 0.75487766624669276;\n    const float a2 = 0.569840290998;\n    return fract(a1 * float(pixel.x) + a2 * float(pixel.y));\n}\n\nfloat dither(float gray, int ng) {\n    // Calculated noised gray value\n    float noised = (2./float(ng)) * T(intensity(ivec2(gl_FragCoord.xy))) + gray - (1./float(ng));\n    // Clamp to the number of gray levels we want\n    return clamp(floor(float(ng) * noised) / (float(ng)-1.), 0.f, 1.f);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const int ng = 2; // Number of gray levels to use\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 tsample = pow(texture(iChannel0, uv).rgb, vec3(2.2));\n    \n    #ifdef PER_CHANNEL\n    \tvec3 col = vec3(dither(tsample.r, ng),\n\t\t\t \t\t    dither(tsample.g, ng),\n             \t\t\tdither(tsample.b, ng));\n    #else\n        vec3 col = vec3(dither(dot(tsample, vec3(0.3, 0.59, 0.11)), ng));\n    #endif\n\n    // Output to screen, gamma corrected\n    fragColor = vec4(vec3(pow(col, vec3(1.0/2.2))),1.0);\n}","name":"Image","description":"","type":"image"}]}