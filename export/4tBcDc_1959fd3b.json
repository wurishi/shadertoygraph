{"ver":"0.1","info":{"id":"4tBcDc","date":"1513573629","viewed":121,"name":"work_2","username":"Kakaricho","description":"pad","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["screensaver","work"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    // 画面上の座標を求める.\n    // iTimeは、現在の時間経過に関する値で時間経過で変化するようなアニメーション表現に利用する.\n    // この例では、iTimeをsin関数に与えることで周期的な色の変化を行なっている。\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 color = vec4(1.0,1.0,0,1);// vec4(uv, 0.5 + 0.5 * sin(iTime), 1.0);\n    \n    //color = vec4(uv, 0.5 + 0.5 * sin(iTime), 1.0);\n    \n    // 画面上の座標値を　[0.0 ~ 1.0]　から [-1.0 ~ 1.0] へ変更\n    // uvは0 ~ 1\n    vec2 pos = uv * 2.0 - 1.0;\n    \n    \n    highp int pos_x_int = int(pos.x * 50.0);\n    highp int pos_y_int = int(pos.y * 30.0);\n    \n    //color *= abs(1.0 / (sin(pos.x + iTime * .7) * 70.0));\n    \n    //color *= abs(1.0 / (sin(pos.x + iTime * .7) * 7.0));\n    color *= abs(1.0 / (sin( float(pos_x_int % 50) + iTime * .7) * 7.0));\n    \n    \n    //color *= abs(sin( float(pos_y_int % 4) * iTime ) );\n    color *= abs(sin( float(pos_y_int % 4 ) * iTime) );\n    \n    //color *= abs(1.0 / (sin(pos.x + cos(pos.y + iTime) * 0.6) * sin(iTime * .3) * 70.0));\n    //color *= abs(1.0 / (sin(pos.y + cos(pos.x + iTime) * 0.2) * sin(iTime * .3) * 70.0));\n    \n    fragColor = color;\n}","name":"Image","description":"","type":"image"}]}