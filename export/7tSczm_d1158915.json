{"ver":"0.1","info":{"id":"7tSczm","date":"1649362222","viewed":86,"name":"Frequency modulation","username":"buttercream","description":"Frequency modulation","likes":3,"published":1,"flags":8,"usePreview":0,"tags":["sound"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const float C = 261.63;\nconst float D = 293.66;\nconst float E = 329.63;\nconst float F = 349.23;\nconst float G = 392.00;\nconst float A = 440.00;\nconst float B = 493.88;\nconst float C2 = 523.25;\n\nconst float[] notes = float[] (C, D, E, F, G, A, B, C2);\n\nvec2 noteFreq(float freq, float time) {\n    // 6.2831 = 2pi\n    // exp() goes exponentially down to fade out the volume\n    float modulator = 6.2831 * 0.5 * time;\n    return vec2(sin(6.2831 * freq * modulator * time) * exp(-3.0 * time));\n}\n\nvec2 mainSound( in int samp,float time) {\n    vec2 result;\n    // time counts in seconds\n    // (time - x) is required, because we want to \"reset\" exp() function\n    // otherwise the output of exp() function will go down globally\n    // and we'll hear only first note\n    for (int note = 0; note < notes.length(); note++) {\n        float x = float(note) * 1.0;\n        if (time > x) {\n            // += is here because we are combining result with\n            // the \"values\" of previous and/or simultaneous notes\n            result += noteFreq(notes[note], time - x);\n        }\n    }\n    \n    return result;\n}","name":"Sound","description":"","type":"sound"}]}