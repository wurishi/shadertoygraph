{"ver":"0.1","info":{"id":"lXdXDN","date":"1719085221","viewed":68,"name":"LiveArchive #07","username":"Flopine","description":"I'm digging up old shaders made during VJ sessions to archive them here! \n\nChipwrecked 2022 for Eggstempo","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","colors","isometric","perspective","vjing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGRr","filepath":"/media/a/d96b229eeb7a08d53adfcf1ff89e54c9ffeebed193d317d1a01cc8125c0f5cca.mp3","previewfilepath":"/media/ap/d96b229eeb7a08d53adfcf1ff89e54c9ffeebed193d317d1a01cc8125c0f5cca.mp3","type":"music","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings, FabriceNeyret and Blackle for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n// Chipwrecked 2022 for Eggstempo\n\n\n#define time iTime\n#define dt(sp,off) fract((time+off)*sp)\n#define switchanim(speed) (floor(sin(dt(speed,0.)*TAU))+1.)\n\n#define speed (65./60.)\n// All those booleans were triggered by a guitar hero controller \n// during the set\n#define proj_persp (switchanim(speed * 0.5) > .5)\n#define map_twist (switchanim(speed * 0.25) < .5)\n#define kaleido (switchanim(speed * .125) > .5)\n#define saturated (switchanim(speed*.97) < .5)\n\n#define PI acos(-1.)\n#define TAU (2.*PI)\n#define hr vec2(1.,sqrt(3.))\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define random(u) textureLod(iChannel0, u, 2.).x\n\n#define AAstep(thre, val) smoothstep(-.7,.7,(val-thre)/min(0.07,fwidth(val-thre)))\n#define sphere(p,s) (length(p)-s)\n#define cube(p,s) (min(0., max((abs(p)-s).x, max((abs(p)-s).y,(abs(p)-s).z)))+length(max(abs(p)-s,0.)))\n\n\nstruct obj{\n    float d;\n    vec3 cs;\n    vec3 cl;\n};\n\nobj minobj (obj a, obj b)\n{\n    if (a.d<b.d) return a;\n    else return b;\n}\n\nfloat hexa (vec2 p, float s)\n{\n    p = abs(p);\n    return max(p.x, dot(p,normalize(hr)))-s;\n}\n\nvoid moda (inout vec2 p, float rep)\n{\n    float per = TAU/rep;\n    float a = mod(atan(p.y,p.x), per)-per*.5;\n    p = vec2(cos(a),sin(a))*length(p);\n}\n\nvoid mo (inout vec2 p, vec2 d)\n{\n    p = abs(p)-d;\n    if (p.y>p.x) p=p.yx;\n}\n\nobj prim1 (vec3 p)\n{\n    moda(p.xz, 3.);\n    p.x -= 2.5;\n    p.xz += sin(p.y+dt(0.3,0.)*TAU)*0.3;\n    \n    obj p1 = obj (cube(vec3(p.xz,0.), .3),\n                vec3(0.2,0.2,0.6),\n                vec3(0.2,0.9,0.99)\n            );\n            \n    return p1;\n}\n\nobj prim2 (vec3 p)\n{\n    moda(p.xz, 6.);\n    p.x -= 2.5;\n    p.xz += sin(p.y+dt(0.5,0.)*TAU)*0.3;\n    \n    obj p1 = obj (cube(vec3(p.xz,0.), .15),\n                vec3(0.2,0.2,0.6),\n                vec3(0.9,0.1,0.2)\n            );\n            \n    return p1;\n}\n\nobj prim3 (vec3 p)\n{\n    moda(p.xz, 9.);\n    p.x -= 2.5;\n    p.xz += sin(p.y+dt(0.3,0.)*TAU)*0.3;\n    \n    obj p1 = obj (cube(vec3(p.xz,0.), .1),\n                vec3(0.2,0.2,0.6),\n                vec3(0.1,0.8,0.1)\n            );\n            \n    return p1;\n}\n\nfloat g1=0.;\nobj prim4 (vec3 p)\n{\n    float rad = 0.5+(-1. + 2. * random(p.xz))*1.5;\n    float d = length(p)-rad;\n    g1+=0.01/(0.01+d*d);\n    \n    return obj(d, vec3(0.), vec3(1.));\n}\n\nobj map(vec3 p)\n{\n    if (!proj_persp)\n    {\n        p.yz *= rot(-atan(1./sqrt(2.))); \n        p.xz *= rot(PI/4.);\n    }\n    vec3 pp = p;\n    \n    mo(p.xz, vec2(2.));\n    moda(p.xz, 10.);\n    p.x -= 2.;\n    if (map_twist) {p.yz *= rot(PI/2.); mo(p.xy,vec2(3.));}\n    p.xz *= rot(sin(p.y*0.2));\n    \n    obj scene = prim1(p);\n    scene = minobj(scene, prim2(p));\n    scene = minobj(scene, prim3(p));\n    scene = minobj(scene, prim4(pp));\n    \n    return scene;  \n}\n\nvec3 getnorm (vec3 p, vec2 eps)\n{return normalize(map(p).d-vec3(map(p-eps.xyy).d, map(p-eps.yxy).d, map(p-eps.yyx).d));}\n\nfloat tunnel2d (vec2 uv)\n{\n    float d = 1e10, new_shape;\n    for(float i=0.; i<1.; i+=1./5.)\n    {\n        float zplane = dt(speed*.5,i), size = mix(5.,.01, zplane);\n        new_shape = min(\n                        abs(hexa(uv*size,1.)), \n                        abs(sphere(uv*size,.95))\n                    );      \n        d = min(d, new_shape);\n    }\n    return AAstep(0.1,d);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = -1. + 2. * (fragCoord.xy/iResolution.xy);\n    uv.x *= iResolution.x / iResolution.y;\n      \n    if (kaleido) mo(uv,vec2(0.5));\n    \n    vec3 ro, rd;\n    if (proj_persp)\n        {ro = vec3(0.001,0.001,-8.); rd = normalize(vec3(uv, 1.)); }\n    else \n        {ro = vec3(uv*4., -50.); rd = vec3(0.,0.,1.); }\n        \n    vec3 p = ro, \n    col = vec3((1.-tunnel2d(uv))*.25),\n    l = normalize(vec3(-1.,2.,-1.));\n    \n    bool hit=false; obj O; float t=0.;\n    for(float i=0.; i<60.;i++)\n    {\n        p =ro+rd*t;\n        O = map(p);\n        if (O.d<0.001)\n        {\n            hit=true; \n            break;\n        }\n        \n        t += O.d;\n    }\n    \n    if (hit)\n    {\n        vec3 n = getnorm(p, vec2(0.01,0.));\n        float light = max(dot(n,l),0.);\n        col = mix(O.cs, O.cl, light); \n    }\n    \n    vec3 coloff = g1*vec3(0.2,0.9,0.1);\n    coloff = saturated ? 1.-coloff*25.:coloff;\n    col += coloff;\n    \n    col = sqrt(clamp(col, 0., 1.));\n    fragColor =  vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}