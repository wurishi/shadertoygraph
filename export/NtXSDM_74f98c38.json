{"ver":"0.1","info":{"id":"NtXSDM","date":"1625747570","viewed":115,"name":"EU flag","username":"Voldepreuss","description":"Flag of Europe","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["flag","europe","eu"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define TWOPI 6.28318530718\n\n#define BLUE vec3(0.,.2,.6)\n#define YELLOW vec3(1.,.8,0.)\n\n#define DIST_FROM_CENTER 2./3.\n#define STAR_SIZE 1./9.\n#define NUM_SEGMENTS 12.\n\nfloat star(vec2 uv, float diameter, float dy)\n{\n    uv.x = abs(uv.x);\n    \n    float horizontal = uv.y;\n    float inc = TWOPI * .2;\n    float angle = inc * 2.;\n    float line1 = dot(uv, vec2(sin(angle), cos(angle)));\n        \n    angle = inc;\n    float line2 = dot(uv, vec2(sin(angle), cos(angle)));\n    \n    angle = inc * 3.0;\n    float line3 = dot(uv, vec2(sin(angle), cos(angle)));\n    \n    float star = min(max(horizontal, line1), max(line2, line3));\n    \n    float size = diameter * .3;    \n    return smoothstep(size + dy, size - dy, star);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = (uv - .5 )* 2.;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    float dy = fwidth(uv.y);\n    \n    // Find the pixel angle from the center and normalize angle\n    float pixel_angle = fract(atan(uv.x,uv.y) / TWOPI);\n    \n    // divide angle into 12 different banded segments\n    float radialOffset = .5 / NUM_SEGMENTS;\n    pixel_angle = floor((pixel_angle + radialOffset) * NUM_SEGMENTS) / NUM_SEGMENTS;\n\n    // move uv space in direction of the angle;\n    uv -= vec2(sin(pixel_angle * TWOPI), cos(pixel_angle * TWOPI)) * DIST_FROM_CENTER;\n        \n    float star = star(uv, STAR_SIZE, dy);\n    vec3 col = vec3(mix(BLUE, YELLOW, star));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}