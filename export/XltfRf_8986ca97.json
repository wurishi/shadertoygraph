{"ver":"0.1","info":{"id":"XltfRf","date":"1540486145","viewed":341,"name":"[CG-NAIST] Physics-based Shading","username":"hkubo1983","description":"Oren-Nayar diffuse reflection + Cook-Torrance specular reflection.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["specular","diffuse"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2018 Hiroyuki Kubo\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n    \n\n// Reference: https://iquilezles.org/articles/distfunctions\n\n#define PI 3.1415926535898\n#define AA 1   // make this 1 is your machine is too slow\n#define RotateCamera false   // Set true then camera rotates\n\n//------------------------------------------------------------------\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n    return length( vec2(length(p.xz)-t.x,p.y) )-t.y;\n}\n\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    float d1 = q.z-h.y;\n#if 1\n    // distance bound\n    float d2 = max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5;\n#else\n    // correct distance\n    h.x *= 0.866025;\n    float d2 = sdEquilateralTriangle(p.xy/h.x)*h.x;\n#endif\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\nfloat sdCone( in vec3 p, in vec3 c )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    float d1 = -q.y-c.z;\n    float d2 = max( dot(q,c.xy), q.y);\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\n//------------------------------------------------------------------\n\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\n\n//------------------------------------------------------------------\n\nvec2 map( in vec3 pos )\n{\n    \n    float r = 0.25;\n    vec2 res = opU( vec2( sdPlane(pos), 1.0 ),\n\t                vec2( sdSphere(pos-vec3( 0.0, r, 0.0), r),\n                         21.0 ) );\n\n\tres = opU( res, vec2( sdTorus( pos-vec3( -1.0, 0.25, 0.0), vec2(0.20, 0.10) ), 22.0 ) );\n    res = opU( res, vec2( sdCone(pos-vec3( 1.0, 0.50, 0.0), vec3(0.8,0.6,0.3) ), 23.0 ) );\n\n\n    return res;\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 1.0;\n    float tmax = 20.0;\n   \n#if 1\n    // bounding volume\n    float tp1 = (0.0-ro.y)/rd.y; if( tp1>0.0 ) tmax = min( tmax, tp1 );\n    float tp2 = (1.6-ro.y)/rd.y; if( tp2>0.0 ) { if( ro.y>1.6 ) tmin = max( tmin, tp2 );\n                                                 else           tmax = min( tmax, tp2 ); }\n#endif\n    \n    float t = tmin;\n    float m = -1.0;\n    for( int i=0; i<64; i++ )\n    {\n\t    float precis = 0.0004*t;\n\t    vec2 res = map( ro+rd*t );\n        if( res.x<precis || t>tmax ) break;\n        t += res.x;\n\t    m = res.y;\n    }\n\n    if( t>tmax ) m=-1.0;\n    return vec2( t, m );\n}\n\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( res<0.005 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    return normalize( e.xyy*map( pos + e.xyy ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ).x );\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n// https://iquilezles.org/articles/checkerfiltering\nfloat checkersGradBox( in vec2 p )\n{\n    // filter kernel\n    vec2 w = fwidth(p) + 0.001;\n    // analytical integral (box filter)\n    vec2 i = 2.0*(abs(fract((p-0.5*w)*0.5)-0.5)-abs(fract((p+0.5*w)*0.5)-0.5))/w;\n    // xor pattern\n    return 0.5 - 0.5*i.x*i.y;                  \n}\nvec3 renderFloor(in vec3 ro, in vec3 rd )\n{\n    vec3 col = vec3(0.7, 0.9, 1.0) +rd.y*0.8;\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n\n    vec3 pos = ro + t*rd;\n    vec3 nor = calcNormal( pos );\n    vec3 ref = reflect( rd, nor );\n        \n    // material        \n    col = 0.45 + 0.35*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n\n            \n    float f = checkersGradBox( 5.0*pos.xz );\n    col = 0.3 + f*vec3(0.1);\n\n\n    // lighitng        \n    float occ = calcAO( pos, nor );\n    vec3  lig = normalize( vec3(-0.4, 0.9, 0.0) );\n    vec3  hal = normalize( lig-rd );\n    float amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n    float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n    float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n    float dom = smoothstep( -0.1, 0.1, ref.y );\n    float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n\n    dif *= calcSoftshadow( pos, lig, 0.02, 2.5 );\n    dom *= calcSoftshadow( pos, ref, 0.02, 2.5 );\n\n    float spe = pow( clamp( dot( nor, hal ), 0.0, 1.0 ),16.0)*\n        dif *\n        (0.04 + 0.96*pow( clamp(1.0+dot(hal,rd),0.0,1.0), 5.0 ));\n\n    vec3 lin = vec3(0.0);\n\n    vec3 kd = vec3(1, 0, 0);\n    lin += 1.30*dif*vec3(1.00,0.80,0.55);\n    lin += 0.40*amb*vec3(0.40,0.60,1.00)*occ;\n    col = col*lin;\n\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nvec3 renderObjects(in vec3 ro, in vec3 rd )\n{\n    vec2 res = castRay(ro, rd);\n    float t = res.x;\n\tfloat m = res.y;\n    vec3 pos = ro + t*rd;\n    \n    \n    vec3 n = calcNormal( pos ); /* normal */\n    vec3 wo = -rd; /* eye direction */    \n    vec3 wi = normalize( vec3(-0.4, 0.9, 0.0) ); /* incoming light direction */    \n    vec3 h = normalize(wo+wi);\n    vec3 li = vec3(1.0, 1.0, 1.0);\n    float NdotWi = dot(n, wi);\n    float NdotWo = dot(n, wo);\n    float NdotH = dot(n,h);\n    float HdotWi = dot(h, wi);\n    float HdotWo = dot(h, wo);\n\n        \n    vec3 col = vec3(0, 0, 0);\n        \n    /* TODO1: Implement diffuse reflection. (Use Oren-Nayar model) */\n    vec3 kd = vec3(0.01, 0.2, 0.95); /* diffuse coef. */\n    float sigma = 0.3; /* surface roughness */    \n    float sigma_sq = sigma*sigma;\n        \n    float cos_phio_phii = dot((wo-NdotWo*n), (wi-NdotWi*n));\n    float cos_alpha = max(NdotWi, NdotWo);\n    float cos_beta = min(NdotWi, NdotWo);\n    float sin_alpha = sin(acos(cos_alpha));\n    float tan_beta  = tan(acos(cos_beta));\n    \n    /* calculate A and B */\n    //float A = ...\n    //float B = ...\n\n    /* Oren-Nayar diffuse */\n    //vec3 OrenNayar = ...\n        \n    /* Add Oren-Nayar diffuse reflection component */\n    //col += OrenNayar;\n\n\n    /* TODO2: Implement specular reflection. (use Cook-Torrance model)\" */\n    vec3 ks = vec3(1.0, 1.0, 1.0); /* specular coef. */\n    float eta = 1.5; /* refractive index */\n   \n\n    /* Beckmann function */\n    // float D = ...\n    \n    /* Geometric attenuation factor */\n    // float G = ...\n    \n    /* Schlick approximation of Fresnel term */\n    // float F0 = ...\n    // float F = ...\n\n    /* Cook-Torrance specular */\n    // vec3 CookTorrance =  F*D*G/(PI*NdotWo)*li*ks;\n    \n    /* Add Cook-Torrance specular reflection component */\n    //col += CookTorrance;\n    \n    return col;\n   \n}\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    vec3 col = vec3(0.7, 0.9, 1.0) +rd.y*0.8;\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    if( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        vec3 ref = reflect( rd, nor );\n        \n        // material        \n        if( m<1.5 ) col = renderFloor(ro, rd);\n        else col = renderObjects(ro, rd);\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mo = iMouse.xy/iResolution.xy;\n\tfloat time = 15.0 + iTime;\n\n    \n    vec3 tot = vec3(0.0);\n#if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n#else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n#endif\n\n\t\t// camera\t        \n        vec3 ro = vec3( 0, 1.5, 1.5 );\n        \n        /* Camera rotation switch */\n        bool cameraRotOn = RotateCamera;\n        \n        if(cameraRotOn) ro = vec3( 1.5*sin(0.1*iTime), 1.5, 1.5*cos(0.1*iTime));\n        \n        \n        vec3 ta = vec3( 0, 0, 0 );\n        // camera-to-world transformation\n        mat3 ca = setCamera( ro, ta, 0.0 );\n        // ray direction\n        vec3 rd = ca * normalize( vec3(p.xy,2.0) );\n\n        // render\t\n        vec3 col = render( ro, rd );\n\n\t\t// gamma\n        col = pow( col, vec3(0.4545) );\n\n        tot += col;\n#if AA>1\n    }\n    tot /= float(AA*AA);\n#endif\n\n    \n    fragColor = vec4( tot, 1.0 );\n}","name":"Image","description":"","type":"image"}]}