{"ver":"0.1","info":{"id":"mt3SRr","date":"1684944343","viewed":295,"name":"simple droste","username":"Trixelized","description":"Good webcam or video source recommended","likes":0,"published":3,"flags":2,"usePreview":0,"tags":["spiral","droste","recursive","webcam"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU 6.28318530718\n\n// Magnification Amount\n#define MAG 3.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Sample UV (offset for centering the spiral later)\n    vec2 uv = fragCoord / iResolution.xy - 0.5;\n    \n    // Initial zoom-in\n    uv *= pow(MAG, -1.0);\n    \n    // Create spiral multiplication\n    uv *= ((atan(uv.x, uv.y) / TAU) + 0.5) * (MAG - 1.0) + 1.0;\n    \n    // Fetch the chroma key color\n    vec4 chromaCol = texture(iChannel0, vec2(0.5, 0.5));\n    \n    // Loop for recursion\n    for (int i=0; i<10; i++) {\n        vec4 col = texture(iChannel0, uv + 0.5);\n        \n        // If similar color\n        if (length(col - chromaCol) < 0.125) {\n            \n            // Zoom out UV\n            vec2 newUv = uv * MAG;\n\n            // If in frame, repeat loop\n            if ((abs(newUv.x) < 0.5) && (abs(newUv.y) < 0.5)) {\n                uv = uv * MAG;\n                continue;\n            }\n            \n        }\n        break;\n        \n    }\n    \n    \n    // Return the final color\n    fragColor = texture(iChannel0, uv + 0.5);\n}\n","name":"Image","description":"","type":"image"}]}