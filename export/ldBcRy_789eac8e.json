{"ver":"0.1","info":{"id":"ldBcRy","date":"1492543011","viewed":156,"name":"Procedural Checkers","username":"animatedlew","description":"This shader produces a procedural checkered texture.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["procedural","texture","checkers"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool inTile(vec2 p, float tileSize) {\n    // draw tiles that are tileSize in size\n    vec2 ptile = step(0.5, fract(0.5 * p / tileSize));\n    return ptile.x == ptile.y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 p = fragCoord.xy;\n    // smooth out the sine motion with a sqrt; tile size of 16\n    float tileSize = sqrt(sin(iTime * 2.) / 2. + 1.) * 16.;\n    // if diagonals match, draw as a black square\n    if (inTile(fragCoord.xy, tileSize)) fragColor = vec4(0.);\n    else fragColor = vec4(1.);\n}","name":"Image","description":"","type":"image"}]}