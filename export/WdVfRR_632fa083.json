{"ver":"0.1","info":{"id":"WdVfRR","date":"1606422230","viewed":63,"name":"Learning from @The_ArtOfCode ","username":"vaishakhanil","description":"Learning from The Art of Code","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["mix","changeshape"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define SURF_DIST 0.01\n\nmat2 Rot(float a){\n\tfloat s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\n\n/* --- Creating Objects --- */\n\n// Create a box\nfloat CreateBox(vec3 p, vec3 size){\n    return(length(max(abs(p)-size,0.)));\n}\n\nfloat CreateSphere(vec3 p, vec4 s){\n\treturn(length(p-s.xyz)-s.w);\n}\n\n/* --- Distance from Object --- */\n\nfloat GetDist(vec3 p){\n    \n    float planeDist = p.y+1.5;\n    vec3 bp = p-vec3(0,1,6);\n    bp.xz *= Rot(iTime);\n    float boxDistance = CreateBox(bp,vec3(.5));\n   \tfloat sphereDistance = CreateSphere(bp,vec4(0,0,0,1.));\n    \n    \n    float sd = mix(boxDistance,sphereDistance,sin(iTime)*.5+.5);\n    \n    // Camera Distance\n    float d = min(sd,planeDist);\n    return d;\n}\n\n\nfloat RayMarch(vec3 ro, vec3 rd){\n    float dO = 0.;\n    for(int i = 0; i < MAX_STEPS;i++){\n        vec3 p = ro + rd  * dO;\n        float dS = GetDist(p);\n        dO += dS;\n        \n        if(dO > MAX_DIST || dS < SURF_DIST) break;\n    \n    }\n    \n    return dO;\n}\n\n\nvec3 GetNormal(vec3 p){\n\tfloat d = GetDist(p);\n    vec2 e = vec2(0.01,0);\n    \n    \n    vec3 n = d - vec3(GetDist(p - e.xyy),\n                      GetDist(p - e.yxy),\n                      GetDist(p - e.yyx));\n    \n    return normalize(n);\n}\n\n\nfloat GetLight(vec3 p){\n\tvec3 lightPos = vec3(0,5,3);\n    //lightPos.xz += vec2(sin(iTime),cos(iTime))*2.;\n    vec3 l = normalize(lightPos - p);\n    \n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n,l),0.,1.);\n    \n    float d = RayMarch(p+n*SURF_DIST*2., l);\n    if(d < length(lightPos-p)) dif *= .1;\n    \n    \n    \n    return dif;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0.0);\n    \n    vec3 ro = vec3(0,2,0);\n    vec3 rd = normalize(vec3(uv.x,uv.y-.3,2));\n\n    float d = RayMarch(ro,rd);\n    //d /= 6.;\n    \n    vec3 p = ro + rd *d;\n    float dif = GetLight(p);\n    \n    col = vec3(dif);\n    \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}