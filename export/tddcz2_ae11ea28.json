{"ver":"0.1","info":{"id":"tddcz2","date":"1601331915","viewed":73,"name":"fresnel term approx for diffract","username":"meteotrix","description":"testing a specific step from https://resources.mpi-inf.mpg.de/hdr/TemporalGlare/\n\nequation is given as E(x,y) =e^(i*pi / λ*d)(x²+y²))\n\n& per euler’s formula it ends up looking like E(x,y) = cos(pi / (λ*1)*(x²+y²)) + i*sin(pi / (λ*1)*(x²+y²))","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    //squarify part 1\n    uv.x *= 16.0/9.0;\n    uv.x -= 0.38;\n    \n    \n    \n  \t//fresnel term approx for diffraction\n    float uv_scale = 4.0;\n    float uv_offset = 0.5 * uv_scale;\n    uv.xy *= uv_scale;\n    float xy_squared = (uv.x - uv_offset)*(uv.x - uv_offset) + (uv.y - uv_offset)*(uv.y - uv_offset);\n    float expression = (3.14159 / (1.0 * 1.0))*xy_squared;\n    vec3 col;\n    col.r = cos(expression); //real part\n    col.g = sin(expression); //imaginary part\n    \n    \n    \n    \n    //squarify part 2\n    if(uv.x < 0.0 || uv.x > uv_scale) col = vec3(0.0);    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}