{"ver":"0.1","info":{"id":"stlGzs","date":"1622674749","viewed":79,"name":"Cubic Bézier curve","username":"HalbFettKaese","description":"A direct implementation of a cubic Bézier curve that is defined through a quadratic curve.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["animation","curve","cubic","quadratic","bzier"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 quadratic(vec2 p1, vec2 p2, vec2 p3, float t) {\n    // mix(a, b, t) == (1 - t) * a + t * b\n    return mix(\n        mix(p1, p2, t),\n        mix(p2, p3, t),\n        t);\n}\nvec2 cubic(vec2 p1, vec2 p2, vec2 p3, vec2 p4, float t) {\n    return mix(\n        quadratic(p1, p2, p3, t),\n        quadratic(p2, p3, p4, t),\n        t\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Time variable from 0 to 1\n    float t = mod(iTime, 1.);\n    \n    // The four points defining the curve\n    vec2 p1 = vec2(0, 0); // The starting position\n    vec2 p2 = vec2(0, 1); // The position that the point moves to initially\n    vec2 p3 = vec2(1, 1); // The position that the point moves away from at the end\n    vec2 p4 = vec2(1, 0); // The ending position\n    \n    // The resulting point for the current time\n    vec2 p = cubic(p1, p2, p3, p4, t);\n    \n    // The point rendered to the screen\n    vec2 uv = fragCoord;\n    vec3 col = vec3(smoothstep(2., 3., length(p*iResolution.xy-uv)));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}