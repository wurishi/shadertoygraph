{"ver":"0.1","info":{"id":"cljcWm","date":"1692199512","viewed":86,"name":"Psychedelic audio visualizer","username":"djoudi_mansouri","description":"My first time toying with shadertoy and glsl, this work is a variation and based on poisson's original code, check him out on this url : www.shadertoy.com/view/dd2Xzm\n\nSong is Sean & Bobo - Fight","likes":3,"published":1,"flags":64,"usePreview":0,"tags":["procedural","2d","noise","fbm","music","audio","bloom","visualizer","ca"],"hasliked":0,"parentid":"dd2Xzm","parentname":"PHONK - Audio Visualizer"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Msd3W4","filepath":"https://soundcloud.com/your-edms-collection/seanbobo-domination-original-mix?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","previewfilepath":"https://soundcloud.com/your-edms-collection/seanbobo-domination-original-mix?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// credit : www.shadertoy.com/view/dd2Xzm\n\n// press pause and play if there's no music\n\n// music frequency\nfloat freq;\n\n// hash vec2 to float\nfloat hash21(vec2 p) {\n    p = fract(p*vec2(452.127,932.618));\n    p += dot(p, p+123.23);\n    return fract(p.x*.001*p.y);\n}\n\n// noise function by me\nfloat noise(vec2 p) {\n    vec2 q = floor(p+ iTime/10.0);\n    vec2 f = fract(p+ iTime/10.0);\n    return mix(mix(hash21(q+vec2(0,0)),hash21(q+vec2(1,0)),f.x),\n               mix(hash21(q+vec2(0,1)),hash21(q+vec2(1,1)),f.x),f.y);\n}\n\n// fractal noise\nfloat fbm(vec2 p) {\n    float f = 0.;\n    f +=     .5*noise(p);\n    f +=    .25*noise(p*1.5 + iTime/10.0);\n    f +=   .125*noise(p*3. + iTime/10.0);\n    f +=  .0625*noise(p*4.5 + iTime/10.0);\n    f += .03125*noise(p*9. + iTime/10.0);\n    return f;\n}\n\n// background noise\nfloat func(vec2 p) {\n    return fbm(vec2(sin(iTime*.9),cos(iTime*.9))+p*fbm(p+.3*iTime)+noise(p+noise(p+noise(p))));\n}\n\n// rendering function\nvec3 render(vec2 p) {\n    p *= 2.55+0.2*freq; // bounce\n            \n    // background\n    vec3 colA = vec3(0.2,.18,0.5); \n    vec3 colB = vec3(0.9,1.4,5.83); //Toy with these values to change the colors\n    float k = pow(func(9.*p),1.2);\n    vec3 col = smoothstep(colA,colB,vec3(k));\n    \n    // ball\n    float x = atan(p.x, p.y); // polar x value\n    // frequencies\n    float f = texture(iChannel1, vec2(x*.018+.4,.25)).r;\n    // radius\n    float r = .5+3.*pow(f,8.)*clamp(p.y+.5,0.01,2.);\n\n    // hollow circle\n    float m = abs(length(p)-r)-.1;\n    \n    // draw the ball\n    float b = fwidth(m); // blur value\n    col = mix(col, vec3(2), smoothstep(b,-b,m));\n    \n    return clamp(col,0.,8.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // pixel coordinates centered at the origin\n    vec2 p = (fragCoord - .5*iResolution.xy) / iResolution.y;\n    // normalized pixel coordinates\n    vec2 q = fragCoord/iResolution.xy;\n    \n    // music frequency\n    freq = texture(iChannel1, vec2(.01,.25)).r;\n    \n    // render with chromatic aberration\n    vec2 off = (q-.5) * .05; // CA offset\n    vec3 col = vec3(render(p+off).r,\n                    render(p).g,\n                    render(p-off).b);\n\n    col += .7*col*pow(freq,8.); // flash\n    // vignette\n    col *= .5+.5*pow(64.*q.x*q.y*(1.-q.x)*(1.-q.y),.1);\n    \n    \n    col *= 1.-exp(-iTime*1.3); // fade\n                  \n    // output\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}