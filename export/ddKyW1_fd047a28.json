{"ver":"0.1","info":{"id":"ddKyW1","date":"1696078966","viewed":27,"name":"chebechev voronoi warp","username":"18smith111","description":"you can create kind of interesting images by doing this if you put some more attention into it..","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","warp","chebychev"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float chebyshevDistance(vec2 a, vec2 b) {\n    return max(abs(a.x - b.x), abs(a.y - b.y));\n}\n\nvec2 randomVector(vec2 UV, float offset)\n{\n    mat2 m = mat2(15.27, 47.63, 99.41, 89.98);\n    UV = fract(sin(UV*m) * 46839.32);\n    return vec2(sin(UV.y + offset) * 0.5 + 0.5, cos(UV.x * offset) * 0.5 + 0.5);\n}\n\nfloat voronoiHeight(vec2 uv, float AngleOffset,float CellDensity)\n{\n    vec2 g = floor(uv * CellDensity);\n    vec2 f = fract(uv * CellDensity);\n\n    float closestDistance = 8.0;\n\n    for (int y = -1; y <= 1; y++)\n    {\n        for (int x = -1; x <= 1; x++)\n        {\n            vec2 lattice = vec2(x, y);\n            vec2 offset = randomVector(lattice + g, AngleOffset);\n\n            float d = chebyshevDistance(lattice + offset, f);\n\n            closestDistance = min(closestDistance, d);\n        }\n    }\n\n    return closestDistance;\n}\nvec3 replaceColor(vec3 originalColor, float height)\n{\n    // Map grayscale values to dynamic colors based on the height\n    return vec3(height*1.2, height * 1.5, 1.4 - 0.3*height);\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    float f0 = voronoiHeight(uv, 5.5+iTime*1.8, 4.5+iTime*0.2);\n    float f1 = voronoiHeight(uv, 3.5+iTime*1.8, 3.75+iTime*0.2);\n    \n    float height = voronoiHeight(vec2(f0,f1),1.2,0.6);\n\n    height = 1.0-(height*1.5);\n    // Output color based on the height\n    fragColor = vec4(replaceColor(vec3(height),height), 1.0);\n}","name":"Image","description":"","type":"image"}]}