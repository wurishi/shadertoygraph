{"ver":"0.1","info":{"id":"wstXzs","date":"1572707957","viewed":141,"name":"ShaderTober - Injured","username":"Flopine","description":"A small doodle with inktober's theme \"Injured\"","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","red","inktober"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, Coyhot, Alkama and YX for teaching me\n// Thanks LJ for giving me the love of shadercoding :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n#define PI 3.141592\n#define ITER 100.\n\nfloat hash21 (vec2 x)\n{return fract(sin(dot(x,vec2(14.4,16.5)))*1245.4);}\n\nmat2 rot(float a)\n{return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nfloat moda (inout vec2 p, float rep)\n{\n    float per = (2.*PI)/rep;\n    float a = atan(p.y, p.x);\n    float l = length(p);\n    float id = floor(a/per);\n    a = mod(a,per)-per*0.5;\n    p = vec2(cos(a),sin(a))*l;\n    if (abs(id)>= rep*.5) id = abs(id);\n    return id;\n}\n\nvoid mo (inout vec2 p, vec2 d)\n{\n    p = abs(p)-d;\n    if (p.y>p.x) p = p.yx;\n}\n\nfloat cyl(vec3 p, float r, float h)\n{return max(length(p.xy)-r,abs(p.z)-h);}\n\nfloat box (vec3 p, vec3 c)\n{return length(max(abs(p)-c,0.));}\n\nfloat stem_id;\nfloat stem (vec3 p)\n{\n    p.xz *= rot(p.y-iTime);\n    stem_id = moda(p.xz, 5.);\n    p.x -= (p.y >= 0.) ? 0.15+p.y*0.2 : 0.15;\n    return cyl(p.xzy, 0.1-p.y*0.02, 4.);\n}\n\nfloat spi (vec3 p)\n{\n    p.y -= p.x*p.x*0.2;\n    p.x -= 1.;\n    return cyl(p.yzx, 0.05-p.x*0.1, 1.);\n}\n\nfloat spikes (vec3 p)\n{\n    float d = 1e10;\n    for (int i=0; i<6;i++)\n    {\n        float ratio = float(i)/4.;\n        p.y += .6;\n        p.xz *= rot(PI/3.);\n        d = min(d, spi(p));\n    }\n    return d;\n}\n\nfloat g1 = 0.;\nfloat flower(vec3 p)\n{\n    p *= 1.5;\n    p.y -= 6.;\n    mo(p.xy, vec2(0.5));\n    mo(p.xz, vec2(.5));\n    p.yz *= rot(iTime);\n    p.x -= .8;\n    float d = box(p, vec3(.05-sin(p.y-.5),1.,0.05));\n    g1 += 0.1/(0.1+d*d);\n    return d/1.5;\n}\n\nint mat_id;\nfloat SDF(vec3 p)\n{\n    float g = abs(p.y+4.5+sin(length(p.xz)-iTime)*0.1)-0.1;\n    float sp = spikes(p);\n    float f = flower(p);\n    float st = stem(p);\n\n    float d = min(min(sp,f),min(st,g));\n\n    if (d == g) mat_id = 1;\n    if (d == sp) mat_id = 2;\n    if (d == f) mat_id = 3;\n    if (d == st) mat_id = 4;\n\n    return d;\n}\n\nvec3 getcam (vec3 ro, vec3 ta, vec2 uv)\n{\n    vec3 f = normalize(ta-ro);\n    vec3 l = normalize(cross(vec3(0.,1.,0.),f));\n    vec3 u = normalize(cross(f,l)); \n    return normalize(f*0.8 + l*uv.x + u*uv.y);\n}\n\nvec3 getnorm (vec3 p)\n{\n    vec2 eps = vec2(0.01,0.);\n    return normalize(SDF(p)-vec3(SDF(p-eps.xyy), SDF(p-eps.yxy), SDF(p-eps.yyx)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    float dither = hash21(uv);\n\n    vec3 ro = vec3(2.,5.,-3.2),\n        p = ro,\n        ta = vec3(-1.8,2.,0.),\n        rd = getcam(ro,ta,uv),\n        col = vec3(0.);\n\n    float shad = 0.;\n    bool hit = false;\n\n    for (float i=0.; i<ITER; i++)\n    {\n        float d = SDF(p);\n        if (d<0.001)\n        {\n            hit = true;\n            shad = i/ITER;\n            break;\n        }\n        d *= 0.4 + dither*0.1;\n        p += d*rd;\n    }\n\n    if (hit)\n    {\n        vec3 n = getnorm(p);\n\n        if (mat_id == 1)\n        {    \n            vec3 l_blood = vec3(-2.,5.,-3.);\n            vec3 h = normalize(l_blood-rd);\n            vec3 albedo = vec3(0.3,0.,0.);        \n            vec3 fre = pow(clamp(1.-dot(n,-rd),0.,1.), 4.) * vec3(0.8,0.5,0.7);       \n            float spe = pow(max(0.,dot(h,n)),22.);\n\n            col = albedo+fre+spe*3.;\n        }\n\n        if (mat_id == 2)\n        {\n            col = vec3(abs(p.x*2.),0.1,0.0);\n        }\n\n        if (mat_id == 3)\n        {\n            vec3 albedo = vec3(length(p)*0.15,0.1,0.0);\n\n            vec3 l_flower = vec3(0.,2.,-2.);\n            vec3 h = normalize(l_flower-rd);\n            float spe = pow(max(0.,dot(h,n)),5.);\n\n            col = albedo+spe;\n        }\n\n        if (mat_id == 4)\n        {\n            col = vec3(.8,abs(stem_id)*0.2,abs(stem_id)*0.1);\n        } \n        col *= 1.-shad;\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}