{"ver":"0.1","info":{"id":"4XXcDB","date":"1726704151","viewed":25,"name":"Fred's Basic Color Transform","username":"FrederickAmpsUp","description":"Inspired by bean-mhm's flim. Nothing physical about this, just messing with numbers until I had something I thought looked nice.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["color","display","gamma","filmic","filmemulation","viewtransform"],"hasliked":0,"parentid":"dd2yDz","parentname":"flim - Filmic Color Transform"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvoid mainImage(out vec4 frag_col, in vec2 frag_coord)\n{\n    vec2 uv = frag_coord.xy / iResolution.xy;\n\n    // RGB sweep test\n    vec3 col = flim_rgb_exposure_sweep_test(uv);\n\n    // alternate between flim and native sRGB\n    if (mod(iTime, 3.) > 1.5)\n    {\n        col = pow(col, vec3(1. / 2.2));\n    }\n    else\n    {\n        col = fbct_transform(col);\n    }\n\n    // output\n    frag_col = vec4(col, 1.);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\n * FBCT - Fred's Basic Color Transform\n */\n \nconst float FBCT_DESATURATION = 0.02;\nconst float FBCT_EXPOSURE = 1.0;\n\nconst float FBCT_RED_BIAS = 1.0;\nconst float FBCT_GRN_BIAS = 1.0;\nconst float FBCT_BLU_BIAS = 1.0;\n\nconst mat4 fbct_color_matrix = \nmat4(\n    FBCT_RED_BIAS, FBCT_GRN_BIAS*FBCT_DESATURATION, FBCT_BLU_BIAS*FBCT_DESATURATION, 0.00,\n    FBCT_RED_BIAS*FBCT_DESATURATION, FBCT_GRN_BIAS, FBCT_BLU_BIAS*FBCT_DESATURATION, 0.00,\n    FBCT_RED_BIAS*FBCT_DESATURATION, FBCT_GRN_BIAS*FBCT_DESATURATION, FBCT_BLU_BIAS, 0.00,\n    0.0, 0.0, 0.0, FBCT_EXPOSURE\n\n);\n\nvec3 fbct_transform(vec3 color) {\n    vec4 mmr = (vec4(color, 1) * fbct_color_matrix);\n    vec3 cc = mmr.xyz * mmr.w;\n    \n    cc = cc / (cc + 1.0);\n    \n    cc = pow(cc, vec3(1.0 / 2.2));\n\n    return cc;\n}\n\n// End FBCT\n\n// RGB sweep test, thanks flim\n\nfloat flim_remap(\n    float v,\n    float inp_start,\n    float inp_end,\n    float out_start,\n    float out_end\n)\n{\n    return out_start\n        + ((out_end - out_start) / (inp_end - inp_start)) * (v - inp_start);\n}\nfloat flim_remap01(\n    float v,\n    float inp_start,\n    float inp_end\n)\n{\n    return clamp((v - inp_start) / (inp_end - inp_start), 0., 1.);\n}\nfloat flim_wrap(float v, float start, float end)\n{\n    return start + mod(v - start, end - start);\n}\nvec3 flim_rgb_sweep(float hue)\n{\n    hue = flim_wrap(hue * 360., 0., 360.);\n\n    vec3 col = vec3(1, 0, 0);\n    col = mix(col, vec3(1, 1, 0), flim_remap01(hue, 0., 60.));\n    col = mix(col, vec3(0, 1, 0), flim_remap01(hue, 60., 120.));\n    col = mix(col, vec3(0, 1, 1), flim_remap01(hue, 120., 180.));\n    col = mix(col, vec3(0, 0, 1), flim_remap01(hue, 180., 240.));\n    col = mix(col, vec3(1, 0, 1), flim_remap01(hue, 240., 300.));\n    col = mix(col, vec3(1, 0, 0), flim_remap01(hue, 300., 360.));\n    \n    return col;\n}\n\nvec3 flim_rgb_exposure_sweep_test(vec2 uv0to1)\n{\n    float hue = 1. - uv0to1.y;\n    float exposure = flim_remap(uv0to1.x, 0., 1., -5., 10.);\n    return flim_rgb_sweep(hue) * pow(2., exposure);\n}","name":"Common","description":"","type":"common"}]}