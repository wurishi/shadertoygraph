{"ver":"0.1","info":{"id":"MdfyRM","date":"1488403055","viewed":191,"name":"sample01: tunnel with blobs","username":"makak","description":"very first shader with some basic 2d demoscene eddecs - learning shadertody","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","blobs","tunnel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// My very first shader with some old-schoold 2d demoscene effects \n// made to learn basics of shadertoy\n//\n// Created by Maciej Nowicki - makak / (ex. madwizards, moons, reason, terror13)\n\n// credits for some inspiration to:\n// music spectrum analyzer:\t\thttps://www.shadertoy.com/view/Xds3Rr\n// basic drawing:\t\t\t\thttps://www.shadertoy.com/view/Md23DV\n\n#define NOISE_ENABLED\t1\n#define MOVIE_ENABED\t1\n#define BLOBS_ENABLED\t1\n#define NUM_BLOBS\t\t8\n\n#define\tTUNNEL_HACK\t\t0\n\nfloat fabs(float f) {\n\treturn abs(f) - floor(abs(f));\n}\n\nvec4 tunnel(vec2 fragCoord, float animation) {\n   \n    float x = fragCoord.x + iResolution.x * (1.0 + sin(animation / 2.0)) /2.0;\n    float y = fragCoord.y + iResolution.y * (1.0 + sin(animation)) / 2.0;\n    float w = iResolution.x;\n    float h = iResolution.y;\n \n    float ratio = 32.0;\n    float dist = ratio / sqrt((x - w) * (x - w ) + (y - h) * (y - h));\n    float angle =  0.5 * atan((y - h), (x - w)) / 3.14159;\n    \n    // attempt to solve display glitch at the left side of the tunnel\n    // probably caused by undedined value of atan(y,x) if x == 0\n    // still does not work\n    #if TUNNEL_HACK == 1\n    if ((x - w) <= 1.0 && abs(y - h) <= 1.0) {\n        float x1 = x - 1.0;\n    \tfloat y1 = y;\n    \tangle =  0.5 * atan((y1 - h), (x1 - w)) / 3.14159;\n        //return vec4(1.0, 0.0, 0.0, 1.0);\n    }\n    #endif\n        \n    vec2 uv = vec2(dist + animation / 6.0, angle + animation / 4.0);\n    vec3 tunnelColor = texture(iChannel3, uv).xyz;\n\treturn vec4(tunnelColor, 1.0);\n}\n\nvec4 blob(vec2 uv, vec2 center, float radius, vec3 color) {\n    float smoothness = radius * 5.0;\n\treturn vec4(color,\n            1.0 - smoothstep(radius - smoothness, radius + smoothness, length(uv - center)));\n}\n\nvec4 blobs(vec2 fragCoord, float animation) {\n    \n    vec4 blobs = vec4(0.0);\n    vec3 blobColor = vec3(1.0, 1.0, 1.0);\n    float wave = texture(iChannel2, vec2(0.0,0.0) ).y;\n    float color = texture(iChannel2, vec2(0.0,0.75) ).y;\n    \n    for (int i=0; i<NUM_BLOBS; i++) {\n        \n        vec2 uv = fragCoord.xy - color;\n\t\tvec2 center = vec2(iResolution.x * 0.85, iResolution.y * 0.7);\n        float radius = 0.020 * clamp(0.5, wave, 1.0) * iResolution.y;\n        \n        // animate the blob\n        center.x += 16.0 * radius * sin((animation + float(i*2)) * 3.0);\n        center.y += 8.0 * radius  * sin((animation + float(i*3)) * 1.5);\n\t\t\n        blobs += blob(uv, center, radius, vec3(color)); //blobColor); \n    }\n    \n    return blobs;\n}\n\nfloat rectangle(vec2 r, vec2 topLeft, vec2 bottomRight, float d) {\n\tfloat ret;\n\tret = smoothstep(topLeft.x-d, topLeft.x+d, r.x);\n\tret *= smoothstep(topLeft.y-d, topLeft.y+d, r.y);\n\tret *= 1.0 - smoothstep(bottomRight.y-d, bottomRight.y+d, r.y);\n\tret *= 1.0 - smoothstep(bottomRight.x-d, bottomRight.x+d, r.x);\n\treturn ret;\n}\n\nfloat rectangleSharp(vec2 r, vec2 topLeft, vec2 bottomRight) {\n\tfloat ret;\n\tret = step(topLeft.x, r.x);\n\tret *= step(topLeft.y, r.y);\n\tret *= 1.0 - step(bottomRight.y, r.y);\n\tret *= 1.0 - step(bottomRight.x, r.x);\n\treturn ret;\n}\n\nvec4 movie(vec2 fragCoord, float animation) {\n  \t\n    float wave = texture(iChannel2, vec2(0.0,0.5) ).y;\n    \n    float movieFrameSmoothness = 0.015;\n    float movieStartXPos = 0.02 + (0.04 * wave);\n    float movieFrameWidth = 0.15;\n    float movieFrameHeight = (movieFrameWidth - (2.0 * movieFrameSmoothness)) * 4.0 / 3.0;\n  \tfloat movieHoleWidth = 0.015;\n  \tfloat movieDistance = 0.005; \n  \tfloat movieTapeWidth = 4.0 * movieDistance + 2.0 * movieHoleWidth + movieFrameWidth;\n    \n    int numHoles = int(1.0 / (2.0 * movieDistance + movieHoleWidth));\n    int numFrames = int(1.0 / (2.0 * movieDistance + movieFrameHeight));\n    \n\tvec4 movie = vec4(0.0);\n    vec4 black = vec4(0.0, 0.0, 0.0, 1.0);\n    vec4 transp = vec4(0.0);\n    vec2 p = vec2(fragCoord.xy / iResolution.xy);\n\n    float bg = rectangle(p, vec2(movieStartXPos, 0.0), vec2(movieStartXPos + movieTapeWidth, 1.0), 0.005);\n\tmovie = mix(movie, black, bg);\n    \n    float y1 = -1.0 + fabs(animation);\n\tfloat y = y1;\n    \n    for (int i=0; i<35; i++) {\n        y += 8.0 * movieDistance + movieHoleWidth;\n        float r1 = rectangleSharp(p, vec2(movieStartXPos + movieDistance, y1), vec2(movieStartXPos + movieDistance + movieHoleWidth, y));\n        float r2 = rectangleSharp(p, vec2(movieStartXPos + movieTapeWidth - movieDistance - movieHoleWidth, y1), vec2(movieStartXPos + movieTapeWidth - movieDistance, y));\n        movie = mix(movie, transp, r1);\n        movie = mix(movie, transp, r2);\n        y1 = y + 8.0 * movieDistance;\n    }\n\n \n    y1 = -1.0 + fabs(animation);\n    y = y1;\n    float xStart = movieStartXPos + 2.0 * movieDistance + movieHoleWidth + movieFrameSmoothness;\n    float xEnd = xStart + movieFrameWidth - (2.0 * movieFrameSmoothness);\n\tfor (int i=0; i<11; i++) {\n        y += 8.0 * movieDistance + movieFrameHeight;\n        vec2 bottomLeft = vec2(xStart, y1);\n        vec2 topRight = vec2(xEnd, y);\n   \t\tfloat frame = rectangle(p, bottomLeft, topRight, movieFrameSmoothness);\n        \n        vec2 uv = fragCoord.xy / iResolution.xy;\n        uv.x = uv.x / topRight.x;\n        uv.y = uv.y - ((animation - floor(animation)));\n        uv.y /= movieFrameHeight;\n        uv *= 2.0 * wave;\n        \n       \tvec4 content = vec4(texture(iChannel1, uv).xyz, 1.0);\n        movie = mix(movie, content, frame);\n        y1 = y + 8.0 * movieDistance;\n    }\n   \n    return movie;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // rotating & zooming background\n    float angle = radians(iTime * 45.0);\n    mat2 rotationMatrix = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n    \n    vec2 p = vec2(fragCoord.x * sin(iTime/12.0)*1.0 / iResolution.x, \n                  fragCoord.y * -sin(iTime/12.0)*-1.0 / iResolution.y);\n    p *= rotationMatrix;\n    vec3 text = texture(iChannel0, p).xyz;\n    \n    float wave = texture( iChannel2, vec2(0.0,0.75) ).x;\n    vec3 equalizerBottom = vec3(1.0 -  smoothstep( 0.0, 0.05, abs(uv.y)));\n\n    // compute 2d tunnel effect\n    vec4 tunnel1 = tunnel(fragCoord, iTime);\n    vec4 tunnel2 = tunnel(fragCoord, iTime + 2.0);\n    \n    // mix  background - tunnels, texture, equalizer\n\tfragColor = \n      \t\t\t- clamp(vec4(text, 1.0), 0.0, wave / 3.0) \n        \t\t+ clamp(tunnel1, 0.0, 1.0)\n    \t\t\t+ clamp(tunnel2, 0.0, 1.0)     \n        ;\n  \n    #ifdef NOISE_ENABLED\n    vec2 noiseUv = uv * 5.0 * wave;\n    fragColor = mix(fragColor, texture(iChannel1, noiseUv), 0.05);\n  \t#endif\n    \n    #ifdef BLOBS_ENABLED   \n    vec4 blobsLayer = blobs(fragCoord, iTime);\n    fragColor = mix(fragColor, blobsLayer, blobsLayer.a);\n\t#endif\n    \n    #ifdef MOVIE_ENABED    \n    vec4 movieLayer = movie(fragCoord, iTime / 2.0);\n    fragColor = mix(fragColor, movieLayer, movieLayer.a);\n\t#endif\n    \n   fragColor += clamp(vec4(equalizerBottom, 1.0), 0.0, 1.0);\n\n}","name":"Image","description":"","type":"image"}]}