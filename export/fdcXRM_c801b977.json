{"ver":"0.1","info":{"id":"fdcXRM","date":"1632975186","viewed":180,"name":"hyz霓虹学习","username":"huangyz","description":"学习用","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat rand(vec2 p){\n    return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat drawLayer(float cellNum,vec2 uv){\n    //纹理坐标放大cellNum倍，目的是为了将屏幕分割成cellNum * (cellNum*ratio)块，然后计算出coord和pt\n    vec2 uv0 = uv*cellNum;\n    //避免排列太整齐，根据y坐标随机左右平移\n    uv0.x+=rand(vec2(floor(uv0.y)));\n    \n    //当前是哪一个格子\n    vec2 coord = floor(uv0);\n    //当前这个点，在这个格子内的坐标，xy的值范围【0,1】\n    vec2 pt = fract(uv0);\n    \n    //随机出一个半径大小，此时为【0,1】\n    float radius = rand(coord);\n    //一个跟半径相关的亮度\n    float strength = radius;\n    \n    //真实径范围【0.2,0.45】*1.0/cellNum;\n    radius = radius*0.25+0.2;\n    \n    //去掉2/3的点\n    if(mod(radius*10.0,3.0)<2.0){\n        return 0.0;\n    }\n    \n    //当前点距离圆心的范围\n    float dis = distance(pt,vec2(0.5,0.5));\n    \n    //强度最后再整体根据cellNum区分一下，加强层次感\n    strength*=1.0/cellNum*12.0;\n    //strength*=1.0-dis*2.0;\n\n    //画圆\n    float a = smoothstep(radius-0.03,radius,dis);\n    a = 1.0-a;\n    \n    a*=strength;\n    return a;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //纹理坐标归一化，y轴0-1\n    vec2 uv = fragCoord/iResolution.y;\n    vec3 col = vec3(0.0,0.0,0.0);\n    \n    //三层颜色\n    vec3 arr[3];\n    arr[0] = vec3(0.64,0.18,0.80);    \n    arr[1] = vec3(0.67,0.71,0.31);\n    arr[2] = vec3(0.9,0.0,0.2);\n    \n    //背景色\n    vec3 color_left = vec3(0.79,0.28,0.29);\n    vec3 color_right = vec3(0.4,0.4,0.2);\n    \n    float z = 0.0;//记录这个点是否已经绘制过\n    //分三层绘制，颜色相加\n    for(int i=0;i<=2;i++){\n        vec3 color = arr[i];\n        //cellNum 每一层将屏幕分成多少个格子\n        float cellNum = float(i)*2.5+5.0;\n        //随机出一个方向，根据时间做偏移\n        vec2 uvoff = vec2( rand( vec2(cellNum*2.0) ), 0.5+0.5*rand( vec2( cellNum * 12.0 ) ) );\n        uvoff = uvoff * iTime * 0.1;\n        vec2 pt = uv+uvoff;\n        \n        //当前坐标的透明度\n        float a=drawLayer(cellNum,pt);\n        \n        //已经有颜色的，避免覆盖，以免分层穿帮\n        if(z<0.01){\n            col += color*a;\n        }\n        z += a;\n    }\n    \n    col+=mix(color_left,color_right,uv.x);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n\n}","name":"Image","description":"","type":"image"}]}