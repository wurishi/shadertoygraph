{"ver":"0.1","info":{"id":"MfGczK","date":"1732091331","viewed":12,"name":"Black and White Square","username":"vitasa","description":"square","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["square"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Signed distance function for a square (box)\nfloat sdSquare(vec2 p, float size)\n{\n    vec2 d = abs(p) - vec2(size / 2.0);\n    return max(d.x, d.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalize pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n    // Adjust for aspect ratio\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Square parameters\n    float squareSize = 0.75;        // Size of the square (adjust as needed)\n    vec2 center = vec2(0.0, 0.0);  // Center of the square\n\n    // Compute the signed distance from the point to the square\n    float d = sdSquare(uv - center, squareSize);\n\n    // Smooth edges for anti-aliasing\n    float thickness = 0.005;\n    float color = smoothstep(0.0, thickness, -d);\n\n    // Set the fragment color (black square on white background)\n    fragColor = vec4(vec3(color), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}