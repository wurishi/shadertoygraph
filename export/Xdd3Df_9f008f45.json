{"ver":"0.1","info":{"id":"Xdd3Df","date":"1452545453","viewed":1856,"name":"interactive 3D water, almost","username":"MMGS","description":"so close , yet so far away","likes":38,"published":1,"flags":32,"usePreview":0,"tags":["waterfluidinteractivemultipass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"\n//------------------------------------------------------------------------\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in float mouseX )\n{\n    float an = 0.; //0.3*iTime + 10.0*mouseX;\n\tcamPos = vec3(3.5*sin(an),1.0,3.5*cos(an));\n    camTar = vec3(0.0,0.0,0.0);\n}\n\n\nvec3 doBackground( vec3 rd)\n{\n    vec3 cube = texture(iChannel1,rd).xyz;\n    return cube;\n}\n\nfloat doModel( vec3 p )\n{\n   vec3 col = texture(iChannel0,vec2((p.x*0.5+0.5)*1.2,(-p.z*0.5+0.5)*1.3 )*0.8).xyz;\n   \n    vec3 b = vec3(1,.2001+col.x*.05,1.);\n \t\t vec3 d = abs(p+vec3(0,0.3,0)) - b;\n \t\t float shape = min(max(d.x,max(d.y*col.x,d.z)),0.0) +\n         length(max(d,0.0));\n    b = vec3(1,.001,1.);\n\n    \n    return shape;\n}\n\n\n//------------------------------------------------------------------------\nvec3 doMaterial( in vec3 pos, in vec3 nor,in vec3 rd )\n{\n    \n    vec3 col= vec3(0.2,0.07,0.01);\n    col = texture(iChannel0,vec2((pos.x*0.5+0.5)*1.2,(-pos.z*0.5+0.5)*1.3)*0.8).xyz;\n    col.b +=0.1;\n    col.g += 0.03;\n    vec3 col1 = texture(iChannel1,reflect(nor,rd)).xyz;\n    vec3 col2 = texture(iChannel1,refract(nor,-rd,0.95)).xyz;\n    col *= mix(col1,col2,0.5);\n    \n    if(col.x > 0.145) col=vec3(1);\n    \n    return col;\n}\n\n//------------------------------------------------------------------------\n// Lighting\n//------------------------------------------------------------------------\nfloat calcSoftshadow( in vec3 ro, in vec3 rd );\n\nvec3 doLighting( in vec3 pos, in vec3 nor, in vec3 rd, in float dis, in vec3 mal )\n{\n    vec3 lin = vec3(0.0);\n\n    // key light\n    //-----------------------------\n    vec3  lig = normalize(vec3(1.0,0.7,0.9));\n    float dif = max(dot(nor,lig),0.0);\n    float sha = 0.0; if( dif>0.01 ) sha=calcSoftshadow( pos+0.01*nor, lig );\n    lin += dif*vec3(4.00,4.00,4.00)*sha;\n\n    // ambient light\n    //-----------------------------\n    lin += vec3(0.50,0.50,0.50);\n\n    \n    // surface-light interacion\n    //-----------------------------\n    vec3 col = mal*lin;\n\n    \n    // fog    \n    //-----------------------------\n\tcol *= exp(-0.01*dis*dis);\n\n    return col;\n}\n\nfloat calcIntersection( in vec3 ro, in vec3 rd )\n{\n\tconst float maxd = 20.0;           // max trace distance\n\tconst float precis = 0.001;        // precission of the intersection\n    float h = precis*2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    for( int i=0; i<90; i++ )          // max number of raymarching iterations is 90\n    {\n        if( h<precis||t>maxd ) break;\n\t    h = doModel( ro+rd*t );\n        t += h;\n    }\n\n    if( t<maxd ) res = t;\n    return res;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    const float eps = 0.002;             // precision of the normal computation\n\n    const vec3 v1 = vec3( 1.0,-1.0,-1.0);\n    const vec3 v2 = vec3(-1.0,-1.0, 1.0);\n    const vec3 v3 = vec3(-1.0, 1.0,-1.0);\n    const vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\n\treturn normalize( v1*doModel( pos + v1*eps ) + \n\t\t\t\t\t  v2*doModel( pos + v2*eps ) + \n\t\t\t\t\t  v3*doModel( pos + v3*eps ) + \n\t\t\t\t\t  v4*doModel( pos + v4*eps ) );\n}\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd )\n{\n    float res = 1.0;\n    float t = 0.0005;                 // selfintersection avoidance distance\n\tfloat h = 1.0;\n    for( int i=0; i<40; i++ )         // 40 is the max numnber of raymarching steps\n    {\n        h = doModel(ro + rd*t);\n        res = min( res, 64.0*h/t );   // 64 is the hardness of the shadows\n\t\tt += clamp( h, 0.02, 2.0 );   // limit the max and min stepping distances\n    }\n    return clamp(res,0.0,1.0);\n}\n\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n\n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n    \n    // camera movement\n    vec3 ro, ta;\n    doCamera( ro, ta, iTime, m.x );\n\n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  // 0.0 is the camera roll\n    \n\t// create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy,6.0) ); // 2.0 is the lens length\n\n    //-----------------------------------------------------\n\t// render\n    //-----------------------------------------------------\n\n\tvec3 col = doBackground(rd);\n\n\t// raymarch\n    float t = calcIntersection( ro, rd );\n    if( t>-0.5 )\n    {\n        // geometry\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n\n        // materials\n        vec3 mal = doMaterial( pos, nor,rd );\n\n        col = doLighting( pos, nor, rd, t, mal );\n\t}\n\n\t//-----------------------------------------------------\n\t// postprocessing\n    //-----------------------------------------------------\n    // gamma\n\tcol = pow( clamp(col,0.0,1.0), vec3(0.4545) );\n\t   \n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//based on 3D-Template by IQ\n//based on A simple water effect by Tom@2016\n// based on PolyCube version:\n//    http://polycu.be/edit/?h=W2L7zN\n//\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec3 e = vec3(vec2(1.)/iResolution.xy,0.);\n   vec2 q = fragCoord.xy/iResolution.xy;\n   \n   vec4 c = texture(iChannel0, q);\n   \n   float p11 = c.x;\n   \n   float p10 = texture(iChannel1, q-e.zy).x;\n   float p01 = texture(iChannel1, q-e.xz).x;\n   float p21 = texture(iChannel1, q+e.xz).x;\n   float p12 = texture(iChannel1, q+e.zy).x;\n   \n   float d = 0.;\n    \n   if (iMouse.z > 0.) \n   {\n      // Mouse interaction:\n      d = smoothstep(4.5,.5,length(iMouse.xy - fragCoord.xy));\n   }\n   else\n   {\n      // Simulate rain drops\n      float t = iTime*2.;\n      vec2 pos = fract(floor(t)*vec2(0.456665,0.708618))*iResolution.xy;\n      float amp = 1.-step(.05,fract(t));\n      d = -amp*smoothstep(2.5,.5,length(pos - fragCoord.xy));\n   }\n\n   // The actual propagation:\n   d += -(p11-.5)*2. + (p10 + p01 + p21 + p12 - 2.);\n   d *= .99; // dampening\n   d *= step(.1, iTime); // hacky way of clearing the buffer\n   d = d*.5 + .5;\n   \n   fragColor = vec4(d, 0, 0, 0);\n}\n","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//based on 3D-Template by IQ\n//based on A simple water effect by Tom@2016\n// based on PolyCube version:\n//    http://polycu.be/edit/?h=W2L7zN\n//\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec3 e = vec3(vec2(1.)/iResolution.xy,0.);\n   vec2 q = fragCoord.xy/iResolution.xy;\n   \n   vec4 c = texture(iChannel0, q);\n   \n   float p11 = c.x;\n   \n   float p10 = texture(iChannel1, q-e.zy).x;\n   float p01 = texture(iChannel1, q-e.xz).x;\n   float p21 = texture(iChannel1, q+e.xz).x;\n   float p12 = texture(iChannel1, q+e.zy).x;\n   \n   float d = 0.;\n    \n   if (iMouse.z > 0.) \n   {\n      // Mouse interaction:\n      d = smoothstep(4.5,.5,length(iMouse.xy - fragCoord.xy));\n   }\n   else\n   {\n      // Simulate rain drops\n      float t = iTime*2.;\n      vec2 pos = fract(floor(t)*vec2(0.456665,0.708618))*iResolution.xy;\n      float amp = 1.-step(.05,fract(t));\n      d = -amp*smoothstep(2.5,.5,length(pos - fragCoord.xy));\n   }\n\n   // The actual propagation:\n   d += -(p11-.5)*2. + (p10 + p01 + p21 + p12 - 2.);\n   d *= .99; // dampening\n   d *= step(.1, iTime); // hacky way of clearing the buffer\n   d = d*.5 + .5;\n   \n   fragColor = vec4(d, 0, 0, 0);\n}\n","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"\n\n#define TEXTURED 1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 q = fragCoord.xy/iResolution.xy;\n\n#if TEXTURED == 1\n    \n    vec3 e = vec3(vec2(1.)/iResolution.xy,0.);\n    float p10 = texture(iChannel0, q-e.zy).x;\n    float p01 = texture(iChannel0, q-e.xz).x;\n    float p21 = texture(iChannel0, q+e.xz).x;\n    float p12 = texture(iChannel0, q+e.zy).x;\n    \n    // Totally fake displacement and shading:\n    vec3 grad = normalize(vec3(p21 - p01, p12 - p10, 1.));\n    vec4 c =vec4(0,0,0.1,1.0);// texture(iChannel1, fragCoord.xy*2./iChannelResolution[1].xy + grad.xy*.35);\n    vec3 light = normalize(vec3(.2,-.5,.7));\n    float diffuse = dot(grad,light);\n    float spec = pow(max(0.,-reflect(light,grad).z),32.);\n    fragColor = mix(c,vec4(.7,.8,1.,1.),.25)*max(diffuse,0.) + spec;\n    \n#else\n    \n    float h = texture(iChannel0, q).x;\n    float sh = 1.35 - h*2.;\n    vec3 c =\n       vec3(exp(pow(sh-.75,2.)*-10.),\n            exp(pow(sh-.50,2.)*-20.),\n            exp(pow(sh-.25,2.)*-10.));\n    fragColor = vec4(c,1.);\n\n#endif\n}","name":"Buf C","description":"","type":"buffer"}]}