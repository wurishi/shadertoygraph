{"ver":"0.1","info":{"id":"ltBcRK","date":"1509170267","viewed":305,"name":"abstract_fractal3d_1","username":"balkhan","description":"color/shape training","likes":18,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","kifs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n* License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n* Created by bal-khan\n*/\n\n#define I_MAX\t150\n#define E\t\t0.000001\n\nfloat\tsdHexPrism( vec3 p, vec2 h );\nfloat\tsdBox( vec3 p, vec3 b );\nvoid\trotate(inout vec2 v, float angle);\nfloat\tsdTorus( vec3 p, vec2 t );\nvec2\tmarch(vec3 pos, vec3 dir);\nvec3\tcamera(vec2 uv);\nvec3\tblackbody(float Temp);\nfloat\tscene(vec3 p);\n\nvec3\th;\nfloat\tt; // time\n\nfloat\tm, id;\n\nvoid mainImage(out vec4 o, in vec2 f )\n{\n    id *= 0.;\n    h *= 0.;\n    o.xyzw *= 0.;\n    t = iTime*.5;\n    vec2 R = iResolution.xy,\n          uv  = vec2(f-R/2.) / R.y;\n\tvec3\tdir = camera(uv);\n    vec3\tpos = vec3(.0, .0, 10.0);\n    vec2\tinter = (march(pos, dir));\n    o.xyz += vec3( abs(sin(t*1.+1.5+m+1.04)), abs(sin(t*1.+1.5+m+2.09)), abs(sin(t*1.+1.5+m+3.14)))*(1.-inter.x*.005);\n    o.xyz -= vec3( abs(sin(id*t*1.+1.5+m+1.04)), abs(sin(id*t*1.+1.5+m+2.09)), abs(sin(id*t*1.+1.5+m+3.14)))*h*.00125;\n}\n\nfloat\tscene(vec3 p)\n{\n    float r2,k=1.;\n    float s_id;\n    m = r2 = 1e5;\n    p.z+=80.;\n    rotate(p.zx, t+1.57);\n\tfloat   scale = 1.0625;\n    for(float\ti = 1.; i < 15.; ++i)\n    {\n        p.x = abs(p.x);\n        p.z = abs(p.z-.35)-.35;\n        p *= scale;\n        rotate(p.zx, mix(2.3, 0., 1.+sin(iTime*.00251)));\n        p.z -= 1.5;//(i+1.)/5.;\n        p.x -= 4.5;\n        rotate(p.yz, mix(.2, 7.85, 1.+sin(iTime*.1) ));\n        p.x = -p.x;\n        rotate(p.yx, .1);\n\t\tm = min(m, log(r2 )/abs(k) );\n\t    k *= scale;\n        s_id = max(abs(p.x), max(abs(p.y), abs(p.z)) )-1.5;\n        r2= min(r2, max(abs(p.x), max(abs(p.y), abs(p.z)) )-1.5);\n        id = (r2 == s_id) ? i : id;\n        h += vec3(.5, .2,  .4)*.05/(r2*r2+.01);\n    }\n    h += vec3(.5, .2,  .4)*1./(r2*r2+.1);\n    return r2;\n}\n\nvec2\tmarch(vec3 pos, vec3 dir)\n{\n    vec2\tdist = vec2(0.0);\n    vec3\tp = vec3(0.0);\n    vec2\ts = vec2(0.0);\n\n    for (int i = 0; i < I_MAX; ++i)\n    {\n    \tp = pos + dir * dist.y;\n        dist.x = scene(p);\n        dist.y += dist.x*.1;\n        if (log(dist.y*dist.y/dist.x/1e5)>0. || dist.x < E || dist.y > 140.)\n        {\n           break;\n        }\n        s.x++;\n    }\n    s.y = dist.y;\n    return (s);\n}\n\n// Utilities\n\nfloat\tmylength(vec2 p)\n{\n    float\tret = 0.;\n \tp = p*p*p*p;\n    ret = pow(p.x+p.y, 1./4.);\n    \n    return (ret);\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n\tvec2 q = vec2(length(p.zy)-t.x,p.x);\n\n    return length(q)-t.y;\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max((q.x*0.866025+q.y*0.5),q.y)-h.x);\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\n\n\nvec3\tcamera(vec2 uv)\n{\n    float   fov = 1.;\n\tvec3    forw  = vec3(0.0, 0.0, -1.0);\n\tvec3    right = vec3(1.0, 0.0, 0.0);\n\tvec3    up    = vec3(0.0, 1.0, 0.0);\n\n    return (normalize((uv.x) * right + (uv.y) * up + fov * forw));\n}\n\nvoid rotate(inout vec2 v, float angle)\n{\n\tv = vec2(cos(angle)*v.x+sin(angle)*v.y,-sin(angle)*v.x+cos(angle)*v.y);\n}\n","name":"Image","description":"","type":"image"}]}