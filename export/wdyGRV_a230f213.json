{"ver":"0.1","info":{"id":"wdyGRV","date":"1570546773","viewed":295,"name":"Mandelbulb Path Traced","username":"darkeclipz","description":"Mandelbulb rendered for a screenshot. It starts at frame 30, so u can turn it full screen.\n\nPath tracer from iq: https://www.shadertoy.com/view/MsdGzl","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["mandelbulb","pathtracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modified version of https://www.shadertoy.com/view/MsdGzl\n\n// Created by inigo quilez - iq/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n\n// Display : average down and do gamma adjustment\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n    vec3 col = vec3(0.0);\n    \n    if( iFrame>30 )\n    {\n        col = texture( iChannel0, uv ).xyz;\n        col /= float(iFrame-30);\n        col = pow( col, vec3(0.4545) );\n    }\n    \n    \n    // color grading and vigneting\n    col = pow( col, vec3(0.8,0.85,0.9) );\n    \n    col *= 0.5 + 0.5*pow( 16.0*uv.x*uv.y*(1.0-uv.x)*(1.0-uv.y), 0.1 );\n    \n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Modified version of https://www.shadertoy.com/view/MsdGzl\n// Changed to render the Mandelbulb.\n\n\n// Path Tracer is created by inigo quilez - iq/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n\n// Pathtrace the scene. One path per pixel. Samples the sun light and the\n// sky dome light at each vertex of the path.\n\n// More info here: https://iquilezles.org/articles/simplepathtracing\n\n\n//------------------------------------------------------------------\n\nfloat hash(float seed)\n{\n    return fract(sin(seed)*43758.5453 );\n}\n\nvec3 cosineDirection( in float seed, in vec3 nor)\n{\n    float u = hash( 78.233 + seed);\n    float v = hash( 10.873 + seed);\n\n    \n    // Method 1 and 2 first generate a frame of reference to use with an arbitrary\n    // distribution, cosine in this case. Method 3 (invented by fizzer) specializes \n    // the whole math to the cosine distribution and simplfies the result to a more \n    // compact version that does not depend on a full frame of reference.\n\n    #if 0\n        // method 1 by http://orbit.dtu.dk/fedora/objects/orbit:113874/datastreams/file_75b66578-222e-4c7d-abdf-f7e255100209/content\n        vec3 tc = vec3( 1.0+nor.z-nor.xy*nor.xy, -nor.x*nor.y)/(1.0+nor.z);\n        vec3 uu = vec3( tc.x, tc.z, -nor.x );\n        vec3 vv = vec3( tc.z, tc.y, -nor.y );\n\n        float a = 6.2831853 * v;\n        return sqrt(u)*(cos(a)*uu + sin(a)*vv) + sqrt(1.0-u)*nor;\n    #endif\n\t#if 0\n    \t// method 2 by pixar:  http://jcgt.org/published/0006/01/01/paper.pdf\n    \tfloat ks = (nor.z>=0.0)?1.0:-1.0;     //do not use sign(nor.z), it can produce 0.0\n        float ka = 1.0 / (1.0 + abs(nor.z));\n        float kb = -ks * nor.x * nor.y * ka;\n        vec3 uu = vec3(1.0 - nor.x * nor.x * ka, ks*kb, -ks*nor.x);\n        vec3 vv = vec3(kb, ks - nor.y * nor.y * ka * ks, -nor.y);\n    \n        float a = 6.2831853 * v;\n        return sqrt(u)*(cos(a)*uu + sin(a)*vv) + sqrt(1.0-u)*nor;\n    #endif\n    #if 1\n    \t// method 3 by fizzer: http://www.amietia.com/lambertnotangent.html\n        float a = 6.2831853 * v;\n        u = 2.0*u - 1.0;\n        return normalize( nor + vec3(sqrt(1.0-u*u) * vec2(cos(a), sin(a)), u) );\n    #endif\n}\n\n//------------------------------------------------------------------\n\nfloat maxcomp(in vec3 p ) { return max(p.x,max(p.y,p.z));}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3  di = abs(p) - b;\n  float mc = maxcomp(di);\n  return min(mc,length(max(di,0.0)));\n}\n\n\n// https://github.com/HackerPoet/MarbleMarcher/blob/master/assets/frag.glsl\nvec3 boxFold(vec3 z, vec3 r) {\n\treturn clamp(z.xyz, -r, r) * 2.0 - z.xyz;\n}\n\n// http://www.fractalforums.com/fragmentarium/fragmentarium-an-ide-for-exploring-3d-fractals-and-other-systems-on-the-gpu/15/\nvoid sphereFold(inout vec3 z, inout float dz) {\n    \n    float fixedRadius2 = .6 + 4.* cos(20./8.) + 4.;\n    float minRadius2 = 0.3;\n\tfloat r2 = dot(z,z);\n\tif (r2< minRadius2) {\n\t\tfloat temp = (fixedRadius2/minRadius2);\n\t\tz*= temp;\n\t\tdz*=temp;\n\t} \n    else if (r2<fixedRadius2) {\n\t\tfloat temp =(fixedRadius2/r2);\n\t\tz*=temp;\n\t\tdz*=temp;\n\t}\n}\n\n// https://github.com/HackerPoet/MarbleMarcher/blob/master/assets/frag.glsl\nvec3 mengerFold(vec3 z) {\n\tfloat a = min(z.x - z.y, 0.0);\n\tz.x -= a;\n\tz.y += a;\n\ta = min(z.x - z.z, 0.0);\n\tz.x -= a;\n\tz.z += a;\n\ta = min(z.y - z.z, 0.0);\n\tz.y -= a;\n\tz.z += a;\n    return z;\n}\n\nmat3 rotateX(float angle) {\n\tfloat c = cos(angle), s = sin(angle);\n    return mat3(1, 0, 0, 0, c, -s, 0, s, c);\n}\n\nmat3 rotateY(float angle) {\n\tfloat c = cos(angle), s = sin(angle);\n    return mat3(c, 0, -s, 0, 1, 0, s, 0, c);\n}\n\nmat3 rotateZ(float angle) {\n\tfloat c = cos(angle), s = sin(angle);\n    return mat3(c,-s,0,s,c,0,0,0,1);\n}\n\n// http://blog.hvidtfeldts.net/index.php/2011/11/distance-estimated-3d-fractals-vi-the-mandelbox/\nvec2 DE(vec3 pos, float time) {\n        \n    pos *= rotateX(3.14/2.) * rotateZ(time);\n\n    float Iterations = 100.;\n    float Bailout = 2.;\n    float Power = 12.;\n    \n    vec3 trap = vec3(0,0,0);\n    float minTrap = 1e10;\n    \n\tvec3 z = pos;\n\tfloat dr = 1.0;\n\tfloat r = 0.0;\n\tfor (float i = 0.; i < Iterations ; i++) {\n\t\tr = length(z);\n\t\tif (r>Bailout) break;\n        \n        minTrap = min(minTrap, z.z);\n\t\t\n\t\t// convert to polar coordinates\n\t\tfloat theta = acos(z.z/r);\n\t\tfloat phi = atan(z.y,z.x);\n\t\tdr =  pow( r, Power-1.0)*Power*dr + 1.0;\n\t\t\n\t\t// scale and rotate the point\n\t\tfloat zr = pow( r,Power);\n\t\ttheta = theta*Power;\n\t\tphi = phi*Power;\n\t\t\n\t\t// convert back to cartesian coordinates\n\t\t//z = zr*vec3(sin(theta)*cos(phi), sin(phi)*sin(theta), cos(theta));\n        z = zr*vec3( cos(theta)*cos(phi), cos(theta)*sin(phi), sin(theta) );\n\t\tz+=pos;\n\t}\n\treturn vec2(0.5*log(r)*r/dr, minTrap);\n}\n\nfloat map( vec3 p )\n{\n    return DE(p, 1.).x;\n}\n\n//------------------------------------------------------------------\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec3 eps = vec3(0.0001,0.0,0.0);\n\n    return normalize( vec3(\n      map( pos+eps.xyy ) - map( pos-eps.xyy ),\n      map( pos+eps.yxy ) - map( pos-eps.yxy ),\n      map( pos+eps.yyx ) - map( pos-eps.yyx ) ) );\n}\n\n\nfloat intersect( in vec3 ro, in vec3 rd )\n{\n    float res = -1.0;\n    float tmax = 16.0;\n    float t = 0.01;\n    for(int i=0; i<128; i++ )\n    {\n        float h = map(ro+rd*t);\n        if( h<0.00001 || t>tmax ) break;\n        t +=  h;\n    }\n    \n    if( t<tmax ) res = t;\n\n    return res;\n}\n\nfloat shadow( in vec3 ro, in vec3 rd )\n{\n    float res = 0.0;\n    \n    float tmax = 12.0;\n    \n    float t = 0.001;\n    for(int i=0; i<80; i++ )\n    {\n        float h = map(ro+rd*t);\n        if( h<0.0001 || t>tmax) break;\n        t += h;\n    }\n\n    if( t>tmax ) res = 1.0;\n    \n    return res;\n}\n\nvec3 sunDir = normalize(vec3(-5,4,4));\nvec3 sunCol =  6.0*vec3(1.0,0.5,0.6);\nvec3 skyCol =  4.0*vec3(0.2,0.35,0.5);\n\n\nvec3 calculateColor(vec3 ro, vec3 rd, float sa )\n{\n    const float epsilon = 0.0001;\n\n    vec3 colorMask = vec3(1.0);\n    vec3 accumulatedColor = vec3(0.0);\n\n    float fdis = 0.0;\n    for( int bounce = 0; bounce<3; bounce++ ) // bounces of GI\n    {\n        //rd = normalize(rd);\n       \n        //-----------------------\n        // trace\n        //-----------------------\n        float t = intersect( ro, rd );\n        if( t < 0.0 )\n        {\n            \n\t   \t\t//col = mix(bottomcolor, topcolor, uv.y);\n            \n            \n            if( bounce==0 ) return vec3(0);\n            break;\n        }\n\n        if( bounce==0 ) fdis = t;\n\n        vec3 pos = ro + rd * t;\n        vec3 nor = calcNormal( pos );\n        vec3 surfaceColor = vec3(0.4)*vec3(1.2,1.1,1.0);\n\n        //-----------------------\n        // add direct lighitng\n        //-----------------------\n        colorMask *= surfaceColor;\n\n        vec3 iColor = vec3(0.0);\n\t\tsunDir = normalize(ro + vec3(-1,1.2,2));\n        // light 1        \n        float sunDif =  max(0.0, dot(sunDir, nor));\n        float sunSha = 1.0; if( sunDif > 0.00001 ) sunSha = shadow( pos + nor*epsilon, sunDir);\n        iColor += sunCol * sunDif * sunSha;\n        // todo - add back direct specular\n\n        // light 2\n        vec3 skyPoint = cosineDirection( sa + 7.1*float(iFrame) + 5681.123 + float(bounce)*92.13, nor);\n        float skySha = shadow( pos + nor*epsilon, skyPoint);\n        iColor += skyCol * skySha;\n\n\n        accumulatedColor += colorMask * iColor;\n\n        //-----------------------\n        // calculate new ray\n        //-----------------------\n        //float isDif = 0.8;\n        //if( hash(sa + 1.123 + 7.7*float(bounce)) < isDif )\n        {\n           rd = cosineDirection(76.2 + 73.1*float(bounce) + sa + 17.7*float(iFrame), nor);\n        }\n        //else\n        {\n        //    float glossiness = 0.2;\n        //    rd = normalize(reflect(rd, nor)) + uniformVector(sa + 111.123 + 65.2*float(bounce)) * glossiness;\n        }\n\n        ro = pos;\n   }\n\n   float ff = exp(-0.01*fdis*fdis);\n   accumulatedColor *= ff; \n   accumulatedColor += (1.0-ff)*0.05*vec3(0.9,1.0,1.0);\n\n   return accumulatedColor;\n}\n\nmat3 setCamera( in vec3 ro, in vec3 rt, in float cr )\n{\n\tvec3 cw = normalize(rt-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, -cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float sa = hash( dot( fragCoord, vec2(12.9898, 78.233) ) + 1113.1*float(iFrame) );\n    \n    vec2 of = -0.5 + vec2( hash(sa+13.271), hash(sa+63.216) );\n    vec2 p = (-iResolution.xy + 2.0*(fragCoord+of)) / iResolution.y;\n\n\tvec3 ta = vec3(0,-1.,1);\n    vec3 ro = vec3(0,1.2,-1.3);\n\n    mat3  ca = setCamera( ro, ta, 0.0 );\n    vec3  rd = normalize( ca * vec3(p,-1.3) );\n\n    vec3 col = texture( iChannel0, fragCoord/iResolution.xy ).xyz;\n    if( iFrame==0 ) col = vec3(0.0);\n    \n    col += calculateColor( ro, rd, sa );\n    \n    if( iFrame == 30 ) \n    {\n        col = vec3(0);\n    }\n\n    fragColor = vec4( col, 1.0 );\n}","name":"Buffer A","description":"","type":"buffer"}]}