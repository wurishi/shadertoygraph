{"ver":"0.1","info":{"id":"Xt23zV","date":"1430507885","viewed":2381,"name":"Step Functions","username":"Dave_Hoskins","description":"Various step functions. Shows that smoothstep isn't actually free on the GPU, and you might as well use other step functions as they are very useful. :)","likes":33,"published":1,"flags":0,"usePreview":0,"tags":["smoothstep","linstep","bumpstep"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"// Various step functions\n// By David Hoskins.\n\n// The function interpolates smoothly between two input values based on a third one\n// that should be between the first two. The returned value is clamped between 0 and 1.\n\n//---------------------------------------------------------------------------\nfloat original_smoothstep(float edge0, float edge1, float x)\n{\n\tfloat  t = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n    return t * t * (3.0 - 2.0 * t);\n}\n\n//---------------------------------------------------------------------------\nfloat linearstep(float edge0, float edge1, float x)\n{\n    return  clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n}\n\n//---------------------------------------------------------------------------\nfloat smoothbumpstep(float edge0, float edge1, float x)\n{\n    x = 1.0-abs(clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0)-.5)* 2.0;\n    return x * x * (3.0 - x - x);\n}\n\n//---------------------------------------------------------------------------\nfloat bumpstep(float edge0, float edge1, float x)\n{\n    return 1.0-abs(clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0)-.5)*2.0;\n}\n\n//---------------------------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy;\n    int ver = int(mod(iTime*1.31, 5.0));\n \n    float x = 0.0;\n    if (ver == 0)\n    {\n    \tx = linearstep(0.0,  iResolution.x, uv.x);\n\t}else\n\tif (ver == 1)\n    {\n        //  or use 'original_smoothstep', which takes the same time to process...\n\t\tx = smoothstep(0.0,  iResolution.x, uv.x);\n\t}else\n\tif (ver == 2)\n\t{\n\t\tx = bumpstep(0.0,  iResolution.x, uv.x);\n\t}else\n\tif (ver == 3)\n    {\n\t\tx = smoothbumpstep(0.0,  iResolution.x, uv.x);\n\t}else\n\tif (ver == 4)\n    {\n        // Fade in and out example...\n        float dist = iResolution.x / 10.0;\n        x = smoothstep(0.0, dist, uv.x) * smoothstep( iResolution.x, iResolution.x-dist, uv.x);\n\t}\n   \n    float f = linearstep(x-0.005,x+0.005, uv.y/iResolution.y);\n    fragColor = vec4(f);\n}","name":"","description":"","type":"image"}]}