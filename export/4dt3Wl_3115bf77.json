{"ver":"0.1","info":{"id":"4dt3Wl","date":"1483097783","viewed":130,"name":"Function Drawer","username":"etnlGD","description":"Draw function graph.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["tool"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//////////////////////////////////////////////////////////////\n#define NUM_FUNCTIONS 2\nfloat evalFunction(int i, float x)\n{\n    if (i == 0)\n    {\n        //return fract(x * (64. - 0.125) / 64.0) - fract(x * (64. - 0.125) / 8.) / 8.;\n\t\treturn fract(x * (64. - 0.125) / 8.0) - fract(x * (64. - 0.125) / 1.) / 8.;\n        //return fract(floor(x * 255.) / 255. * (64. - 0.125) / 1.0);\n        \n\t\t//return fract(x * (64. - 0.125));\n\t\t//return smoothstep(0., 1., x);\n    }\n    \n    if (i == 1)\n    {\n        return abs(x) <= 1.0 ? 1.0 : 0.0;\n    }\n        \n    return 0.;\n}\n//////////////////////////////////////////////////////////////\n\n\n// color config\nvec3 bgColor   = vec3(1.0, 1.0, 1.0);\nvec4 lineColor = vec4(1.0, 0.0, 0.0, 1.0);\nvec4 axisColor = vec4(0.0, 0.0, 0.0, 0.5);\n\n// scale\nvec2 scaleRange = vec2(1.0, 20);\nfloat lineWidth = 1.2;\n\nfloat onLine(vec2 p, vec2 p0, vec2 p1, float pix)\n{\n    p -= p0;\n    p1 -= p0;\n    \n    vec2 dir = normalize(p1);\n    \n    float dist;\n    float projLen = dot(p, dir);\n    if (projLen < 0.0) \n        dist = length(p);\n    else if (projLen > length(p1))\n        dist = distance(p, p1);\n    else \n        dist = length(p - projLen * dir);\n        \n    \n\tfloat maxDist = lineWidth * pix;\n    return 1.0 - smoothstep(0.0, maxDist, dist);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float xScale = mix(scaleRange.x, scaleRange.y, iMouse.x / iResolution.x);\n    float pix = 2.0 * xScale / iResolution.x;\n    float rad = pix * lineWidth;\n    \n\tvec2 p = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n    p.y *= iResolution.y / iResolution.x;\n    p *= xScale;\n    \n    \n    float lineAlpha = 0.0;\n    for (int i = 0; i< NUM_FUNCTIONS; ++i)\n    {\n        if (lineAlpha >= 1.0)\n            break;\n        \n        float fx0 = evalFunction(i, p.x - pix);\n        float fx1 = evalFunction(i, p.x);\n        float fx2 = evalFunction(i, p.x + pix);\n\t\t\n        lineAlpha += onLine(p, vec2(p.x, fx1), vec2(p.x + pix,fx2), rad);\n\t\tlineAlpha += onLine(p, vec2(p.x, fx1), vec2(p.x - pix,fx0), rad);\n\t\t\n        lineAlpha = min(1.0, lineAlpha);\n    }\n    \n    \n    lineAlpha *= lineColor.a;\n    float xAxisAlpha = (1.0 - smoothstep(0.0, pix, abs(p.x))) * axisColor.a;\n    float yAxisAlpha = (1.0 - smoothstep(0.0, pix, abs(p.y))) * axisColor.a;\n    \n\tvec3 color = bgColor.rgb;\n    color = mix(color, axisColor.rgb, xAxisAlpha);\n    color = mix(color, axisColor.rgb, yAxisAlpha);\n    color = mix(color, lineColor.rgb, lineAlpha);\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}