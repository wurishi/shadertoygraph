{"ver":"0.1","info":{"id":"wsSfDR","date":"1589820204","viewed":223,"name":"ShATI - Esprit","username":"Flopine","description":"My former school named ATI decided to launch an everyday challenge from 4th may to 24th may, here is the 15th subject: spirit :)","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","animation","loop","isometric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan and slerpy for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n// Shader made for Everyday ATI challenge\n\n#define PI acos(-1.)\n#define dt mod(iTime,8.)\n#define anim easeInCirc(dt)\n\nfloat easeInCirc(float x)\n{\n    float o = 1. - sqrt(1. - (x*x));\n    o = (x>=1.)? 1.:o;\n    return o;\n}\n\nmat2 rot (float a)\n{return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nfloat box (vec3 p, vec3 c)\n{\n    vec3 q = abs(p)-c;\n    return min(0.,max(q.x,max(q.y,q.z)))+length(max(q,0.));\n}\n\nfloat terrain (vec3 p, float bsize, bool destroy)\n{\n    float bcut = box(p,vec3(5.,0.8,5.));\n    float per = 1.5;\n    vec2 rep = mod(p.xz,per)-per*0.5; \n    vec2 id = floor(p.xz/per);\n    float npy = p.y+sin(length(id*2.)-iTime*2.)*0.3;\n    vec3 new_p = (destroy) ? vec3(rep.x,npy,rep.y) : vec3(rep.x,p.y,rep.y);\n    return max(box(new_p,vec3(bsize)),bcut); \n}\n\nfloat g1 = 0.;\nfloat ray (vec3 p)\n{\n    p.y -= 5.;\n    float r = mix(-.5,1.,clamp(anim,0.,1.));\n    r += sin(p.y-iTime*25.)*0.05;\n    float d = max(length(p.xz)-r,abs(p.y)-5.);\n    g1 += 0.1/(0.1+d*d);\n    return d;\n}\n\nfloat SDF (vec3 p)\n{\n    p.yz *= rot(-atan(1./sqrt(2.)));\n    p.xz *= rot(PI/4.);\n    return (dt < 4.) ? min(ray(p),terrain(p,0.7, false)) : terrain(p,0.4,true);\n\n}\n\nvec3 getnorm (vec3 p)\n{\n    vec2 eps = vec2(0.01,0.);\n    return normalize(SDF(p)-vec3(SDF(p-eps.xyy),SDF(p-eps.yxy),SDF(p-eps.yyx)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    vec3 ro = vec3(uv*5.5,-10.),\n        rd = vec3(0.,0.,1.),\n        p = ro,\n        l = normalize(vec3(1.,1.,-1.)),\n        col = vec3(0.,0.,0.2);\n\n    float shad;\n    bool hit = false;\n\n    for (float i=0.; i<64.;i++)\n    {\n        float d = SDF(p);\n        if (d<0.01)\n        {\n            hit = true;\n            shad = i/64.;\n            break;\n        }\n        p += d*rd*0.8;\n    }\n\n    if (hit)\n    {\n        vec3 n = getnorm(p);\n        float light = max(dot(n,l),0.);\n        col = mix(vec3(0.5,0.1,0.5),vec3(0.,0.8,0.9),light);\n    }  \n    col += g1*vec3(0.1,0.2,0.1);\n\n    if (dt >= 3.9 && dt < 4.2) col = mix(col, vec3(1.),exp(-fract(dt)*3.));\n    if (dt >= 7.8) col = mix(col, vec3(1.),anim);\n\n    // Output to screen\n    fragColor = vec4(clamp(col,0.,1.),1.0);\n}","name":"Image","description":"","type":"image"}]}