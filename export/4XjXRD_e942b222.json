{"ver":"0.1","info":{"id":"4XjXRD","date":"1710364255","viewed":69,"name":"Rectneon","username":"ElnetoCC","description":"Almost the same as Fracteon but with rectangles","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["fractal","rectangles","neon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 interpolateColor(float interpolationParameter, vec3 colorA, vec3 colorB, vec3 colorC, vec3 colorD) {\n    return colorA + colorB * cos(6.28318 * (colorC * interpolationParameter + colorD));\n}\n\nvoid mainImage(out vec4 fragmentColor, in vec2 fragmentCoordinates) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 normalizedTextureCoordinates = (fragmentCoordinates * 2.0 - iResolution.xy) / iResolution.y;\n    float distanceFromOriginBeforeTransformation = length(normalizedTextureCoordinates);\n    vec3 finalColor = vec3(0.0);\n    \n    for(float iterator = 0.0; iterator < 2.0; iterator++) {\n        // Add repetitions with fract()\n        normalizedTextureCoordinates = fract(normalizedTextureCoordinates * 1.5) - 0.5;\n        \n        float distanceFromOrigin = length(normalizedTextureCoordinates);\n\n        // Creating rectangles\n        float aspectRatio = iResolution.x / iResolution.y;\n        float rectangleWidth = 0.2;\n        float rectangleHeight = rectangleWidth * aspectRatio;\n        float rectDistance = max(abs(normalizedTextureCoordinates.x) - rectangleWidth / 2.0, abs(normalizedTextureCoordinates.y) - rectangleHeight / 2.0);\n        rectDistance = min(rectDistance, distanceFromOrigin);\n\n        vec3 interpolatedColors = interpolateColor(distanceFromOriginBeforeTransformation + iterator * 0.5 + iTime * 0.5,\n            vec3(0.332, 0.254, 0.374),\n            vec3(0.830, 0.876, 0.437),\n            vec3(1.548, 0.703, 0.959),\n            vec3(3.362, 0.560, 4.486));\n\n        distanceFromOrigin = sin(rectDistance * 4.0 - iTime) / 4.0;\n        distanceFromOrigin = 0.002 / distanceFromOrigin;\n        distanceFromOrigin = smoothstep(0.0, 0.1, distanceFromOrigin);\n\n        finalColor += interpolatedColors * distanceFromOrigin;\n    }\n\n    // Output to screen\n    fragmentColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}