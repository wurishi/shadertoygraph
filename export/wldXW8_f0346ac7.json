{"ver":"0.1","info":{"id":"wldXW8","date":"1580882130","viewed":135,"name":"cross stitch","username":"CptOblivion","description":"Turning pixel art into cross stitch!\n\nClick to zoom in (don't look at the code, it's bad)","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["test","lazy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 alphaover(vec4 basecol, vec4 newcol)\n{\n    basecol.rgb = mix(basecol.rgb, newcol.rgb, newcol.a);\n    basecol.a = min(1., basecol.a + newcol.a);\n    return basecol;\n}\n\nfloat thread (vec2 uv, float height, float width, float offset)\n{\n    return max(0., 1.-(pow(height-offset,2.))*(1. / width));\n}\n\nfloat fadecorners(vec2 uv, float passthrough)\n{\n    passthrough -= 2. * pow((uv.x-.5) * 2., 2.) * pow((uv.y-.5) * 2., 2.);\n    \n    return passthrough;\n}\n\nfloat shadow(vec2 uv, float gradient, float strength)\n{\n    //float border = abs(uv.x - .5) * abs (uv.y - .5);\n    float border = max(abs(uv.x -.5), abs(uv.y - .5));\n    border = smoothstep(.5, .4, border);\n    float shadow = pow(gradient, 2.) * strength;\n    shadow = shadow * border;\n    return max(0., shadow);\n    return max(0., fadecorners(uv,pow(gradient, 2.)))*strength;\n}\n\nfloat striping(float uv, float scale, float depth)\n{\n    uv = fract(uv* scale);\n    float stripe = 1.-pow(2. * depth * uv - depth, 2.);\n  \treturn stripe;\n}\n\nvec3 stitch(vec2 uv, vec3 bgcol, vec4 threadcolor)\n{\n    float twistdepth = .7;\n    float twistscale = 5.;\n    float twistdepth2 = .5;\n    float twistscale2 = 20.;\n    float coloroffs = .25;\n    vec3 shadowcol = vec3(0.);\n    float shadowstrength = .8;\n    \n    threadcolor.rgb += coloroffs;\n    vec4 col = vec4(0.);\n    float threadwidth = 1./15.;\n    float threadoffset = .85;\n    \n    //bottom thread (top left to bottom right)\n    float slash = 1.-abs((1.- uv.x - uv.y));\n    //shadow\n    col = alphaover(col, vec4(col.rgb*shadowcol,shadow(uv, slash, shadowstrength)));\n        \n    slash= thread(uv, slash, threadwidth, threadoffset);\n    slash *= striping(uv.y, twistscale, twistdepth);\n    slash *= striping(uv.x-uv.y, twistscale2, twistdepth2);\n    \n    slash = fadecorners(uv, slash);\n    float slasha = smoothstep(0.,.5,slash);\n    col = alphaover(col, vec4(slash*threadcolor.rgb, slasha));\n\n    //top thread (bottom left to top right)\n    slash = 1.-abs((uv.x - uv.y));\n    \n    //shadow\n    \n    //shadow = max(0., fadecorners(uv,pow(slash, 2.)))*shadowstrength;\n    col = alphaover(col, vec4(col.rgb*shadowcol,shadow(uv, slash, shadowstrength)));\n    \n    slash = thread(uv, slash, threadwidth, threadoffset);\n    slash *= striping(uv.x, twistscale, twistdepth);\n    slash *= striping(uv.x+uv.y, twistscale2, twistdepth2);\n    \n    slash = fadecorners(uv, slash);\n    slasha = smoothstep(0., .5,slash);\n    col = alphaover(col, vec4(slash*threadcolor.rgb, slasha));\n    \n    return mix(bgcol, col.rgb, threadcolor.a * col.a);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //controls\n    \n    float spritewidth = 40.;\n    float spriteheight = 32.;\n    float yoffs = 5.; //vertical offset, in spritesheet pixels\n    \n    float zoom = 2.5;\n    float spritecount = 6.;\n    float animspeed = 3.;\n    \n    if (iMouse.z <0. || (iMouse.x == 0. || iMouse.y == 0.) ) zoom = 1.;\n    \n    //UV\n    float windowaspect = iResolution.y/iResolution.x;\n    vec2 uv = (fragCoord/iResolution.xy) / zoom;\n    uv.y *= windowaspect;\n    uv += iMouse.xy*(1. / iResolution.x) * ((zoom-1.)/zoom);\n    //uv.y += .1;\n    \n    float pix = 1. / iChannelResolution[0].x;\n    \n    uv.x += floor(mod(iTime * animspeed, spritecount));\n    \n    \n    vec2 uvgrid = fract(uv * spritewidth);\n    \n    \n    vec3 col = vec3(0.);\n    \n    //background\n    \n    col = vec3(.75,.85,1.);\n    col *= .4;\n    vec3 holecol = col * .3;\n    col = mix(col, holecol, smoothstep(.1, .4, pow((uvgrid.x-.5) * 2., 2.) * pow((uvgrid.y-.5) * 2., 2.)));\n    \n    vec2 sheetuv = uv / iChannelResolution[0].x * spritewidth;\n    sheetuv.y *= spritecount * (1.333); //why is it off by a third? I dunno\n    sheetuv.y += yoffs /spriteheight;\n    \n    vec4 image = texture(iChannel0, sheetuv);\n    \n    col = stitch(uvgrid, col, image);\n    \n    //col = image.rgb;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}