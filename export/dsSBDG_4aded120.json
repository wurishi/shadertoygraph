{"ver":"0.1","info":{"id":"dsSBDG","date":"1690065856","viewed":49,"name":"Ovetti in Camicia","username":"tancredi","description":"Test","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float smt = .06;\nfloat box(vec2 center, vec2 side, vec2 pos) {\n    vec2 p = smoothstep(center-side/2.-smt,center-side/2.+smt,pos) - smoothstep(center+side/2.-smt,center+side/2.+smt,pos);\n    return p.x*p.y;\n}\n\nvec2 tile(float R, vec2 st) {\n    st += .5;\n    return fract(R * st) - .5;\n}\n\nvec2 rotate(float angle, vec2 st) {\n    mat2 R = mat2(cos(angle), -sin(angle),\n                  sin(angle), cos(angle));\n    return R*st;\n}\n\nfloat circle(float r, vec2 pos) {\n    float l = length(pos);\n    return smoothstep(r-0.02,r+.03,l);\n}\n\nfloat R = 0.01;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    R += iTime/10.;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 center = iResolution.xy/iResolution.y/2.;\n    vec2 uv = fragCoord/iResolution.y - center;\n\n    float ix = length((3.*uv - tile(R, uv))/2.);\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n\n    uv = tile(R,uv);\n    float alpha = iTime * sin(iTime*.1) + ix * 3.1415/2.;\n    uv = rotate(alpha, uv);\n    uv += sin(ix/10.);\n\n    col *= vec3(box(vec2(0.), vec2(.5,.5), uv));\n    col *= mix(vec3(1.),(step(.01,col))*(vec3(.93))-col,1.-circle(0.1,uv));\n    //col = col * step(length(col),.999) * circle(.01,uv);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}