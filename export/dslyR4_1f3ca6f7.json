{"ver":"0.1","info":{"id":"dslyR4","date":"1686631396","viewed":97,"name":"Rainbow Circles Shader","username":"ShaderToyEpic","description":"Just something I stumbled upon.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["circles","rainbow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define INV_SQRT_OF_2PI 0.39894228040143267793994605993439  // 1.0/SQRT_OF_2PI\n#define INV_PI 0.31830988618379067153776752674503\n\nvec4 smartDeNoise(sampler2D tex, vec2 uv, float sigma, float kSigma, float threshold)\n{\n    float radius = round(kSigma*sigma);\n    float radQ = radius * radius;\n    \n    float invSigmaQx2 = .5 / (sigma * sigma);      // 1.0 / (sigma^2 * 2.0)\n    float invSigmaQx2PI = INV_PI * invSigmaQx2;    // 1.0 / (sqrt(PI) * sigma)\n    \n    float invThresholdSqx2 = .5 / (threshold * threshold);     // 1.0 / (sigma^2 * 2.0)\n    float invThresholdSqrt2PI = INV_SQRT_OF_2PI / threshold;   // 1.0 / (sqrt(2*PI) * sigma)\n    \n    vec4 centrPx = texture(tex,uv);\n    \n    float zBuff = 0.0;\n    vec4 aBuff = vec4(0.0);\n    vec2 size = vec2(textureSize(tex, 0));\n    \n    for(float x=-radius; x <= radius; x++) {\n        float pt = sqrt(radQ-x*x);  // pt = yRadius: have circular trend\n        for(float y=-pt; y <= pt; y++) {\n            vec2 d = vec2(x,y);\n\n            float blurFactor = exp( -dot(d , d) * invSigmaQx2 ) * invSigmaQx2PI; \n            \n            vec4 walkPx =  texture(tex,uv+d/size);\n\n            vec4 dC = walkPx-centrPx;\n            float deltaFactor = exp( -dot(dC, dC) * invThresholdSqx2) * invThresholdSqrt2PI * blurFactor;\n                                 \n            zBuff += deltaFactor;\n            aBuff += deltaFactor*walkPx;\n        }\n    }\n    return aBuff/zBuff;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = smartDeNoise(iChannel0, uv, 5.0f, 2.0f, 0.1f);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec3 palette(float t)\n{\n    vec3 a = vec3(0.5);\n    vec3 b = vec3(0.5);\n    vec3 c = vec3(1);\n    vec3 d = vec3(0.563, 0.116, 0.257);\n    return a + b * cos(6.28318*(c*t+d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0f - iResolution.xy) / iResolution.y + 1.0f;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0);\n    \n    for (int i = 1; i <= 3; i++)\n    {\n        uv = fract(uv * (float(i) / 2.0f)) - 0.5f;\n        \n        float t = length(uv);\n\n        vec3 c = palette(length(uv0) + iTime + t);\n        t = sin(t * 8.0f + iTime) / 8.0f;\n        t = abs(t + 0.5f) - 0.5f;\n        t = 0.02f / t;\n        c *= t;\n        \n        finalColor += (c * t) / (pow(float(i) / 1.0f, 10.0f));\n    }\n    \n    fragColor = vec4(finalColor, 1);\n}","name":"Buffer A","description":"","type":"buffer"}]}