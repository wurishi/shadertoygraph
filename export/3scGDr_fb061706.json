{"ver":"0.1","info":{"id":"3scGDr","date":"1568424704","viewed":101,"name":"ChaosGame","username":"Saturos","description":"dynamic chaos game","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","game","interactive","chaos","dynamic","transform"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float TWO_PI  = 6.283185307;\nconst int n_vertices = 5;\nvec2 cs, nm, polygon[n_vertices];\nint maxIter = 500;\nfloat factor, thresh = 0.008;\nmat2 M;\n\nfloat rand(float seed) {\n    return fract(sin(seed*dot(cs, vec2(5.9351794792968, 4.947297863284)))*43758.5453);\n}\n\nvoid defPolygon() {\n    float theta = TWO_PI / float(n_vertices);\n    for (int i=0; i<n_vertices; ++i) {\n        float iTheta = float(i)*theta + iTime;\n    \tfloat st = sin(iTheta), ct = cos(iTheta);\n        polygon[i] = .55*mat2(st,ct,-st,ct)*vec2(1.,0.);\n    }\n}\n\nbool shouldDraw() {\n    vec2 p = vec2(0,0);\n    for (int i=0; i<maxIter; ++i) {\n        if (distance(p, cs) < thresh && i>10) return true;\n        vec2 randVert = polygon[int(rand(float(i))* float(n_vertices))];\n        p += factor*(randVert-p + M*p);\n    }\n    return false;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    cs = fragCoord/iResolution.xy * 2. - 1.;\n    nm = vec2(0.12 + 0.2*(sin(iTime)+1.));\n    //nm = iMouse.xy/iResolution.xy;\n    factor = nm.x + 0.5;\n    M = nm.y*mat2(cs.y, cs.x, -cs.y, cs.x);\n    defPolygon();\n    \n    fragColor = shouldDraw() ? vec4(1,1,0,1) : vec4(vec3(0.1),1);\n}","name":"Image","description":"","type":"image"}]}