{"ver":"0.1","info":{"id":"Mc2yRt","date":"1722940572","viewed":74,"name":"Feedback Loop","username":"sanblu","description":"Very simple idea: Each input coordinate follows a vector field (here: random noise) for a few iterations. At the end we calculate the distance of the final point and the original input coordinate.","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["noise","edgedetection","flowfield"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ITERATIONS 10\n#define JUMP_SIZE 0.07\n\nvec2 vectorField( in vec2 p) {\n    // could by anything, we're just using random noise\n    vec3 noiseUv = vec3(p * 8.0, iTime * 0.4);\n    return vec2(noise(noiseUv), noise(noiseUv + vec3(0.0,0.0,1337.0)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = uv;\n    for (int j = 0; j < ITERATIONS; j++) {\n        p += vectorField(p) * JUMP_SIZE;\n    }\n    fragColor = vec4(vec3(smoothstep(0.0, 0.2, distance(uv, p))), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// https://www.shadertoy.com/view/Xsl3Dl\nvec3 hash( vec3 p ) // replace this by something better\n{\n\tp = vec3( dot(p,vec3(127.1,311.7, 74.7)),\n\t\t\t  dot(p,vec3(269.5,183.3,246.1)),\n\t\t\t  dot(p,vec3(113.5,271.9,124.6)));\n\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\n// https://www.shadertoy.com/view/Xsl3Dl\nfloat noise( in vec3 p )\n{\n    vec3 i = floor( p );\n    vec3 f = fract( p );\n\t\n\tvec3 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( mix( dot( hash( i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ), \n                          dot( hash( i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ), \n                          dot( hash( i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), u.x), u.y),\n                mix( mix( dot( hash( i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ), \n                          dot( hash( i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ), \n                          dot( hash( i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) ), u.x), u.y), u.z );\n}\n\n","name":"Common","description":"","type":"common"}]}