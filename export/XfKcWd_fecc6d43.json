{"ver":"0.1","info":{"id":"XfKcWd","date":"1732565250","viewed":24,"name":"AzurTech 28","username":"c3d","description":"AzurTech Winter 2024","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["tutorial"],"hasliked":0,"parentid":"4cKcWd","parentname":"AzurTech 29"},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"                vec3 square(vec2 uv, float radius, vec2 center,\n                            vec3 bg, vec3 fg)\n                {\n                    vec2 d = abs(uv - center);\n                    float s = length(step(radius, d));\n                    return fg + step(1.0, s) * (bg - fg);\n                }\n                void mainImage(out vec4 fragColor,\n                               in vec2 fragCoord)\n                {\n                    // Normalized pixel coordinates (from 0 to 1)\n                    vec2 uv = fragCoord/iResolution.xy - 0.5;\n                    uv.x *= iResolution.x / iResolution.y;\n                    vec2 center = vec2(sin(iTime), cos(iTime)) * 0.1;\n\n                    // Compute color based on position\n                    vec3 col = vec3(0, 0, 0);\n                    vec3 tex = texture(iChannel0, uv+0.5).rgb;\n                    col = square(uv, 0.3, center, col, tex);\n                    col = square(uv, 0.1, -1.5*center, col, vec3(1,0.5,0));\n\n                    // Output to screen\n                    fragColor = vec4(col,1.0);\n                }\n","name":"Image","description":"","type":"image"}]}