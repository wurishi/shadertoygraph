{"ver":"0.1","info":{"id":"MtcSRj","date":"1480806305","viewed":265,"name":"Fox McCloud Sprite","username":"micantre","description":"Click to have Fox's shine come out","likes":7,"published":1,"flags":64,"usePreview":0,"tags":["music","sprite","8bit","shine","soundcloud","melee","fox"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Ms2GW1","filepath":"https://soundcloud.com/zifur/corneria-remix-star-fox","previewfilepath":"https://soundcloud.com/zifur/corneria-remix-star-fox","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define DISPLAY_GRID 0\n#define BACKGROUND   vec3(.0)\n\n#define _ 0. // Color Palette Index 0\n#define B 1. // Color Palette Index 1\n#define D 2. // Color Palette Index 2\n#define O 3. // Color Palette Index 3\n#define Q(i,a,b,c,d,e,f,g,h) if(y==i)m=(a+4.*(b+4.*(c+4.*(d+4.*(e+4.*(f+4.*(g+h*4.)))))));\n\nvec2 grid(vec2 p, vec2 sz)\n{\n    return floor(p * sz);    \n}\n\n// Sprite\nvec3 foxHead(vec2 p, vec2 scale)\n{\n    vec3 res = BACKGROUND;\n\n    vec2 gv = grid(p, scale); // The grid guide\n    \n    if (gv.x >= 0. && gv.y >= 0. &&\n        gv.x <= 15. && gv.y <= 15.) {\n        \n        #if (DISPLAY_GRID == 1)\n        \tres = vec3(mod(gv.x + gv.y, 2.) * .05 + BACKGROUND);\n        #endif\n        \n        // Indexing is upside down.\n        int y = int(scale.y - gv.y - 5.);\n\n    \tfloat m = 0.;\n\t\tQ(0, _,B,B,_,_,_,_,_)\n\t\tQ(1, _,D,B,B,_,_,O,O)\n\t\tQ(2, _,D,D,B,B,B,O,O)\n\t\tQ(3, _,D,D,D,B,B,D,D)\n\t\tQ(4, _,_,D,B,B,B,B,D)\n\t\tQ(5, _,_,B,B,B,B,B,D)\n\t\tQ(6, _,_,_,D,D,D,B,B)\n\t\tQ(7, _,O,B,B,_,B,D,B)\n\t\tQ(8, _,O,B,B,B,B,B,B)\n\t\tQ(9, _,O,B,B,B,D,D,_)\n\t\tQ(10,_,_,B,B,D,D,D,D)\n        Q(11,_,_,B,D,D,D,D,D)\n\t\tQ(12,_,_,_,_,D,D,D,D)\n\t\tQ(13,_,_,_,_,_,_,_,_)\n\t\tQ(14,_,_,_,_,_,_,_,_) // some of pants and jacket\n\t\tQ(15,_,_,_,_,_,_,_,_)\n        \n    \tfloat ldx = 15. - gv.x; // Calculate the left  bit index\n        float rdx = gv.x;       // Calculate the right bit index\n        float bit = 0.;\n        \n        if (gv.x >= 8.)\tbit = mod(m / pow(4., ldx), 4.); // Decode\n        else            bit = mod(m / pow(4., rdx), 4.); // Mirror\n    \tbit = floor(bit);                                // Sharpen    \n    \t\n        // Colorize\n             if (bit > 2.) res = vec3(.6471,.6471,.6471);\n        else if (bit > 1.) res = vec3(1.,0.8941176471,0.6745098039);\n        else if (bit > 0.) res = vec3(0.8549019608,0.4980392157, 0.1568627451);\n    }\n    \n    return res;\n}\n\n// Sprite\nvec3 foxLower(vec2 p, vec2 scale)\n{\n    vec3 res = BACKGROUND;\n\n    vec2 gv = grid(p, scale); // The grid guide\n    \n    if (gv.x >= 0. && gv.y >= 0. &&\n        gv.x <= 15. && gv.y <= 15.) {\n        \n        #if (DISPLAY_GRID == 1)\n        \tres = vec3(mod(gv.x + gv.y, 2.) * .05 + BACKGROUND);\n        #endif\n        \n        // Indexing is upside down.\n        int y = int(scale.y - gv.y - 5.);\n\n    \tfloat m = 0.;\n\t\tQ(0,_,_,_,_,O,O,D,D)\n\t\tQ(1,_,_,_,O,O,O,B,D)\n\t\tQ(2,_,_,_,O,_,O,B,B)\n\t\tQ(3,_,_,_,O,_,O,B,B)\n\t\tQ(4,_,_,_,_,_,O,_,_)\n\t\tQ(5,_,_,_,_,_,B,B,B)\n\t\tQ(6,_,_,_,_,_,O,O,_)\n\t\tQ(7,_,_,_,_,_,_,_,_)\n\t\tQ(8,_,_,_,_,_,_,_,_)\n\t\tQ(9,_,_,_,_,_,_,_,_)\n\t\tQ(10,_,_,_,_,_,_,_,_)\n        Q(11,_,_,_,_,_,_,_,_)\n\t\tQ(12,_,_,_,_,_,_,_,_)\n\t\tQ(13,_,_,_,_,_,_,_,_)\n\t\tQ(14,_,_,_,_,_,_,_,_) // some of pants and jacket\n\t\tQ(15,_,_,_,_,_,_,_,_)\n        \n    \tfloat ldx = 15. - gv.x; // Calculate the left  bit index\n        float rdx = gv.x;       // Calculate the right bit index\n        float bit = 0.;\n        \n        if (gv.x >= 8.)\tbit = mod(m / pow(4., ldx), 4.); // Decode\n        else            bit = mod(m / pow(4., rdx), 4.); // Mirror\n    \tbit = floor(bit);                                // Sharpen    \n    \t\n        // Colorize\n             if (bit > 2.) res = vec3(.6471,.6471,.6471);\n        else if (bit > 1.) res = vec3(1.,0.1,0.1);\n        else if (bit > 0.) res = vec3(0.2196078431,0.4862745098, 0.09411764706);\n    }\n    \n    return res;\n}\n\n// Sprite\nvec3 foxTail(vec2 p, vec2 scale)\n{\n    vec3 res = BACKGROUND;\n\n    vec2 gv = grid(p, scale); // The grid guide\n    \n    if (gv.x >= 0. && gv.y >= 0. &&\n        gv.x <= 15. && gv.y <= 15.) {\n        \n        #if (DISPLAY_GRID == 1)\n        \tres = vec3(mod(gv.x + gv.y, 2.) * .05 + BACKGROUND);\n        #endif\n        \n        // Indexing is upside down.\n        int y = int(scale.y - gv.y - 5.);\n\n    \tfloat m = 0.;\n\t\tQ(0,_,_,_,_,_,_,_,_)\n\t\tQ(1,_,_,_,_,_,_,_,_)\n\t\tQ(2,_,_,_,_,_,_,_,_)\n\t\tQ(3,_,_,_,_,_,_,_,_)\n\t\tQ(4,_,_,_,_,_,_,_,_)\n\t\tQ(5,_,_,_,_,_,_,_,_)\n\t\tQ(6,D,D,_,_,_,_,_,O)\n\t\tQ(7,_,B,B,_,_,_,_,_)\n\t\tQ(8,_,_,_,_,_,_,_,_)\n\t\tQ(9,_,_,_,_,_,_,_,_)\n\t\tQ(10,_,_,_,_,_,_,_,_)\n        Q(11,_,_,_,_,_,_,_,_)\n\t\tQ(12,_,_,_,_,_,_,_,_)\n\t\tQ(13,_,_,_,_,_,_,_,_)\n\t\tQ(14,_,_,_,_,_,_,_,_) // some of pants and jacket\n\t\tQ(15,_,_,_,_,_,_,_,_)\n        \n    \tfloat ldx = 15. - gv.x; // Calculate the left  bit index\n        float rdx = gv.x;       // Calculate the right bit index\n        float bit = 0.;\n        \n        bit = mod(m / pow(4., ldx), 4.); // Decode\n    \tbit = floor(bit);                                // Sharpen    \n    \t\n        // Colorize\n             if (bit > 2.) res = vec3(.9,.9,.9);\n        else if (bit > 1.) res = vec3(1.,0.8941176471,0.6745098039);\n        else if (bit > 0.) res = vec3(0.8549019608,0.4980392157, 0.1568627451);\n    }\n    \n    return res;\n}\n\nvoid downB(inout vec3 pixel, vec2 r, vec3 col1)\n{\n\tif(r.x > -0.7 && r.x < 0.0){\n        if(r.y < r.x*0.5 + 0.7){\n            if(r.y > r.x*0.5 + 0.4){\n        \t\tpixel = col1;\n        \t}\n        }\n    }\n    if(r.x > 0.0 && r.x < 0.7){\n        if(r.y < -r.x*0.5 + 0.7){\n            if(r.y > -r.x*0.5 + 0.4){\n        \t\tpixel = col1;\n        \t}\n        }\n    }\n    if(r.x > -0.7 && r.x < 0.0){\n        if(r.y < -r.x*0.5 - 0.5){\n            if(r.y > -r.x*0.5 - 0.8){\n        \t\tpixel = col1;\n        \t}\n        }\n    }\n    if(r.x > 0.0 && r.x < 0.7){\n        if(r.y < r.x*0.5 - 0.5){\n            if(r.y > r.x*0.5 - 0.8){\n        \t\tpixel = col1;\n        \t}\n        }\n    }\n    if(r.x > -0.7 && r.x < -0.4){\n        if(r.y < 0.3 && r.y > -0.3){\n            pixel = col1;\n        }\n    }\n    if(r.x > 0.4 && r.x < 0.7){\n        if(r.y < 0.3 && r.y > -0.3){\n            pixel = col1;\n        }\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy \n            * vec2(iResolution.x / iResolution.y, 1.);\n    \n    vec3 res = foxHead(uv - vec2(.52, .22), vec2(20.9));\n    res += foxLower(uv - vec2(.52, -.42), vec2(20.9));\n    res += foxTail(uv - vec2(.47, -.325), vec2(20.9));\n    \n    vec2 r =  2.0*vec2(fragCoord.xy - 0.5*iResolution.xy)/iResolution.y;\n    vec3 col1 = vec3(0.3137254902, 0.9568627451,1.0);\n    if(iMouse.z > 0.){\n    \tdownB(res, r, col1);\n    }\n    \n    fragColor = vec4(res, 1);\n}\n\n// credit to: https://www.shadertoy.com/view/XtlGzN","name":"Image","description":"","type":"image"}]}