{"ver":"0.1","info":{"id":"WsKfRt","date":"1607725540","viewed":83,"name":"Hand SDF","username":"__r_a_f__","description":"Raymarched Hand","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["test","sdf","hand"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * Part 1 Challenges\n * - Make the circle yellow\n * - Make the circle smaller by decreasing its radius\n * - Make the circle smaller by moving the camera back\n * - Make the size of the circle oscillate using the sin() function and the iTime\n *   uniform provided by shadertoy\n */\n\nconst int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float EPSILON = 0.0001;\n\nfloat intersectSDF(float distA, float distB) {\n    return max(distA, distB);\n}\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nfloat differenceSDF(float distA, float distB) {\n    return max(distA, -distB);\n}\n\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\nmat3 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\n\n/**\n * Signed distance function for a sphere centered at the origin with radius 1.0;\n */\nfloat sdSphere(vec3 p) {\n    return length(p) - 1.0;\n}\n\nfloat sdEllipsoid( vec3 p, vec3 r )\n{\n  float k0 = length(p/r);\n  float k1 = length(p/(r*r));\n  return k0*(k0-1.0)/k1;\n}\n\nfloat sdVerticalCapsule( vec3 p, float h, float r )\n{\n  p.y -= clamp( p.y, 0.0, h );\n  return length( p ) - r;\n}\n\n/**\n * Signed distance function describing the scene.\n * \n * Absolute value of the return value indicates the distance to the surface.\n * Sign indicates whether the point is inside or outside the surface,\n * negative indicating inside.\n */\nfloat sceneSDF(vec3 p) {\n    float final = 0.0;\n    \n    float palmo_low = sdEllipsoid(p, vec3(0.42, 0.42, 0.15));\n    float palmo_up = sdEllipsoid(p - vec3(0.0,0.15,0.0), vec3(0.45, 0.4, 0.2));\n    final = palmo_low;\n    \n    float thumb = sdVerticalCapsule(\n        rotateZ(-1.1) * (p - vec3(0.2,0.0,0.)),\n        0.5,\n        0.1\n    );\n    final = opSmoothUnion(thumb, final, 0.15);\n    \n    float pinky = sdVerticalCapsule(\n        rotateZ(0.30) * (p - vec3(-0.33, 0., 0.0)),\n        0.52,\n        0.08\n    );\n    final = opSmoothUnion(pinky, final, 0.05);\n\n    float ring = sdVerticalCapsule(\n        rotateZ(0.15) * (p - vec3(-0.215,0.335,0.0)), \n        0.5, \n        0.09\n    );\n    final = opSmoothUnion(ring, final, 0.05);\n    \n    float middle = sdVerticalCapsule(p - vec3(0.0,0.45,0.0), 0.6, 0.09);\n    final = opSmoothUnion(middle, final, 0.08);\n    \n    float index = sdVerticalCapsule(\n        rotateZ(-0.1) * (p - vec3(0.22,0.3,0.0)),\n        0.6,\n        0.09\n    );\n    final = opSmoothUnion(index, final, 0.1);\n    \n\n\n    return final;\n}\n\n/**\n * Return the shortest distance from the eyepoint to the scene surface along\n * the marching direction. If no part of the surface is found between start and end,\n * return end.\n * \n * eye: the eye point, acting as the origin of the ray\n * marchingDirection: the normalized direction to march in\n * start: the starting distance away from the eye\n * end: the max distance away from the ey to march before giving up\n */\nfloat shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end) {\n    float depth = start;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        float dist = sceneSDF(eye + depth * marchingDirection);\n        if (dist < EPSILON) {\n\t\t\treturn depth;\n        }\n        depth += dist;\n        if (depth >= end) {\n            return end;\n        }\n    }\n    return end;\n}\n            \n\n/**\n * Return the normalized direction to march in from the eye point for a single pixel.\n * \n * fieldOfView: vertical field of view in degrees\n * size: resolution of the output image\n * fragCoord: the x,y coordinate of the pixel in the output image\n */\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\n/**\n * Using the gradient of the SDF, estimate the normal on the surface at point p.\n */\nvec3 estimateNormal(vec3 p) {\n    return normalize(vec3(\n        sceneSDF(vec3(p.x + EPSILON, p.y, p.z)) - sceneSDF(vec3(p.x - EPSILON, p.y, p.z)),\n        sceneSDF(vec3(p.x, p.y + EPSILON, p.z)) - sceneSDF(vec3(p.x, p.y - EPSILON, p.z)),\n        sceneSDF(vec3(p.x, p.y, p.z  + EPSILON)) - sceneSDF(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\nvec4 color = vec4(0.0);\n\tvec3 dir = rayDirection(50.0, iResolution.xy, fragCoord);\n    vec3 eye = vec3(0.0, 0.5, 5.0);\n    float dist = shortestDistanceToSurface(eye, dir, MIN_DIST, MAX_DIST);\n    \n    if (dist > MAX_DIST - EPSILON) {\n        // Didn't hit anything\n        fragColor = color;\n\t\treturn;\n    }\n    \n    vec3 pos = eye + dist * dir;\n    vec3 normal = estimateNormal(pos);\n    float diff = dot(vec3(0.0, 0.0, 1.0), normal);\n    color = vec4(vec3(1.0,0.0,0.0) * diff, 1.0);\n    fragColor = color;\n}","name":"Image","description":"","type":"image"}]}