{"ver":"0.1","info":{"id":"tdVyWw","date":"1603032882","viewed":67,"name":"first 2d basic","username":"jorge2017a1","description":"first 2d basic","likes":1,"published":1,"flags":8,"usePreview":0,"tags":["first2dbasic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"///Por jorge flores P. -18-oct-2020\n/// This shader is the first in 2d, there are some functions of other users\n/// from the great Shadertoy community, thanks for sharing your ideas !!!!\n///----------------\n///Este shader es el primero en 2d, existe algunas funciones de otros usuarios\n///de la grande comunidad shadertoy, gracias por compartir sus ideas!!!!\n\n#define saturate(x) clamp(x, 0.0, 1.0)\n#define R iResolution.xy\n#define ss(a, b, t) smoothstep(a, b, t)\n#define SS(U) smoothstep(3./R.y,0.,U)\n\n\n\nfloat box(vec2 p, vec2 b)\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat circ(vec2 p, float r)\n{\n    return length(p)-r;\n}\n\n\nvec4 mountains(vec2 uv)\n{\n    uv.y -= .12;\n    \n    \n    vec3 col = vec3(0.0);\n    vec3 col2 =vec3(0.0);\n     //vec3 col = texture(iChannel0, uv*16.).xyz;\n    \n    float a = 0.;\n    float snow = 0.;\n    \n    for(float i = 0.; i < 1.; i++){ \n        uv.x += iTime*.35;\n        \n        //float ht = texture(iChannel0, uv*16.).x;\n        float ht =0.5;\n        \n        float nse = cos(uv.x*14. + i*345.)*.01 + cos(uv.x*44. + i*123.)*.003\n            + cos(uv.x*2. + i*654.)*.01;\n        \n        vec2 p = uv + nse;\n        float t = (1.3-i*.02)*p.x*.8 + i*9.;\n        float h = .06*asin(sin(6.*t + 2.5*i)*0.999);\n        float c = ss(.104,.1, p.y - h - i*.01 + .02);\n    \ta = mix(a, 1., c);\n        \n        \n        vec3 col2 = texture(iChannel0, uv*0.125).xyz;\n        \n    \tcol = mix(col, mix(vec3(.2, .23, .3),1.3*vec3(0.13, 0.26, 0.18),i), c);\n        //col = mix(col, mix(col2,1.3*vec3(0.13, 0.26, 0.18),i), c);\n        \n        col +=ht*.06;\n    \tsnow = ss(.66, .674, (uv.y + 0.522)+nse*1.84);\n    \tcol = mix(col, vec3(3), snow);   //pico de colina\n        \n        \n    }\n    return vec4(col, a);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col=vec3(0.2,0.478,1.13);\n     vec2 p = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    //float w = cos(p.y + p.x - iTime + cos(p.x * 2.14 + 4.2 * p.y));\n    ///p *= 1. + (.03 - .03 * w);\n\n    vec2 ap= abs(p);\n    p.y-=.25;\n    vec2 mp = vec2(abs(p.x),p.y);\n    \n      // Mountains\n    vec4 mnt = mountains(p);\n    col = mix(col, mnt.rgb, mnt.a);\n    p.x+=1.0*sin(iTime); ///mover vehiculo\n    \n    float sp11A = circ(p-vec2(.23,-.27),.165);\n    float sdb1=box( p-vec2(0.0,0.0), vec2(0.4,0.2)); //grande bloque\n    float sdb2=box( p-vec2(-0.25,0.12), vec2(0.1,0.06)); //ladrillos\n    float sdb3=box( p-vec2( 0.0,0.12), vec2(0.1,0.06));\n    float sdb4=box( p-vec2( 0.25,0.12), vec2(0.1,0.06));\n    \n    float sdb5=box( p-vec2( 0.25,-0.1), vec2(0.1,0.06));\n    float sdb5h1=box( p-vec2( 0.26,-0.05), vec2(0.09,0.01));\n    float sdb5v1=box( p-vec2( 0.16,-0.1), vec2(0.01,0.06));\n    \n    float sdb5h2=box( p-vec2( 0.26,-0.155), vec2(0.08,0.005));\n    float sdb5v2=box( p-vec2( 0.34,-0.11), vec2(0.01,0.036));\n    \n    \n    float sp11=circ(p-vec2(.23,-.27),.045);\n    \n    float sp12A = circ(p-vec2(-0.23,-.27),.165);\n    float sp12=   circ(p-vec2(-0.23,-.27),.045);\n    \n    \n    //piso \n    float sdb6=box( p-vec2( 0.0,-0.45), vec2(2.9,0.016));\n\n        \n    sdb1 = SS(sdb1);\n    sdb2 = SS(sdb2);\n    sdb3 = SS(sdb3);\n    sdb4 = SS(sdb4);\n    \n    sp11A = SS(sp11A);\n    sp11 = SS(sp11);\n    \n    sp12A= SS(sp12A);\n    sp12 = SS(sp12);\n    \n    \n    sdb5 = SS(sdb5);\n    sdb5h1 = SS(sdb5h1);\n    sdb5v1 = SS(sdb5v1);\n    \n    sdb5h2 = SS(sdb5h2);\n    sdb5v2 = SS(sdb5v2);\n    \n    sdb6 = SS(sdb6);\n    \n    \n   // l1= SS(l1);    \n    \n    //vehiculo\n    col = mix(col, vec3(0.2,0.8,0.3), sp11A);// rueda\n    col = mix(col, vec3(1.0), sdb1);\n    col = mix(col, vec3(1.0,0.1,0.2), sdb2);\n    col = mix(col, vec3(1.0,0.1,0.2), sdb3);\n    col = mix(col, vec3(1.0,0.1,0.2), sdb4);\n    \n    //ladrillo\n    col = mix(col, vec3(0.6,0.6,0.6), sdb5);\n    col = mix(col, vec3(0.8,0.8,0.8), sdb5h1);\n    col = mix(col, vec3(0.8,0.8,0.8), sdb5v1);\n    col = mix(col, vec3(0.7,0.7,0.7), sdb5h2);\n    col = mix(col, vec3(0.7,0.7,0.7), sdb5v2);\n    \n    //rueda\n    //col = mix(col, vec3(0.2,0.8,0.3), sp11A);  //rueda\n    col = mix(col, vec3(0.5,0.5,0.2), sp11);\n    \n    col = mix(col, vec3(0.2,0.8,0.3), sp12A);\n    col = mix(col, vec3(0.5,0.5,0.2), sp12);\n    \n    \n    col = mix(col, vec3(0.5,0.5,0.2), sdb6);\n    \n \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//original ----https://www.shadertoy.com/view/llBSzK\n//modificado por jorge flores.p\nconst float trt = 1.0594630943592952645;\nconst float bpm = 140.0;\n\nfloat note2freq(float note) {\n    return 440.0 * pow(trt,note);\n}\n\n///---------------------------------------------\n//----------------------------------------------------------------------------------\nfloat saw( float x, float a)\n{\n    float f = fract( x );\n\treturn (clamp(f/a,0.0,1.0)-clamp((f-a)/(1.0-a),0.0,1.0))*2.0-.5;\n}\n\n//----------------------------------------------------------------------------------\nfloat sqr(float t)\n{\n\treturn step(fract(t), 0.5)-0.5;\n}\n\n//----------------------------------------------------------------------------------\nfloat tri(float t)\n{\n\treturn (abs(fract(t)-0.5)*2.-0.5)*2.;\n}\n\n//----------------------------------------------------------------------------------\nfloat sine(float t)\n{\n\treturn sin(t* 3.141*2.0);\n}\n\n//----------------------------------------------------------------------------------------\n\n///----------------------------------------------\n\nfloat sawWave(float time, float freq, float amp) {\n \t   //return mod(time,1.0/freq)*freq*amp; //original\n    \n    //float s1= mod(time,1.0/freq)*freq*amp;\n    float s1=0.0; \n    float s2=saw( time*freq, amp);\n    return s1+s2;\n   \n}\n\nvec2 bassSynth(float time, float tempo) {\n    float m = floor(mod(tempo/2.0,8.0)); //minim number\n    float note = floor(mod(tempo*2.0,2.0)) * 12.0 - 35.0 +\n        float(m >= 4.0  && m < 6.0) * (5.0 + (m-4.0) * 2.0) ;\n    return vec2(sawWave(time, note2freq(note), exp(-0.0*mod(tempo, 0.5))));\n}\n\nvec2 leadSynth(float time, float tempo) {\n    float q = floor(mod(tempo*2.0,32.0)); //quaver number\n    float ampMask = float( //rhythm\n        (q > 0.0 && q < 6.0) || \n        (q > 8.0 && q < 17.0) ||\n    \tq == 20.0 || q == 22.0 || q == 23.0);\n    float note = -11.0 + //melody\n        float(q<13.0) * floor(0.9 +  2.1 * (mod(q-1.0,4.0))) + \n        float(q>=13.0 ) * (21.0-q) + \n        float(q==15.0 ) * (-3.0) +\n        float(q>=20.0 ) * (2.0) +\n        float(q==22.0 ) * (6.0);  \n    return vec2(sawWave(time, note2freq(note+0.01), ampMask * exp(-1.0*mod(tempo, 0.5))),\n                sawWave(time, note2freq(note-0.01), ampMask * exp(-1.0*mod(tempo, 0.5))));\n}\n\nvec2 kickSynth(float time, float tempo) {\n    const float dist = 3.0;\n    tempo = mod(tempo,1.0); \n    return vec2(clamp(sin(pow((tempo+0.2)*0.0001,-0.5))*exp(-3.0*tempo),-(1.0/dist),(1.0/dist)) * dist);\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec2 clapSynth(float time, float tempo) {\n    float q = floor(mod(tempo*2.0,32.0)); //quaver number;\n    float b = floor(q/8.0);//bar number\n    float qb = mod(q,8.0); //quaver in bar;\n    float ampMask = float((qb >= 2.0 && qb < 4.0) || (qb >= 6.0 && qb < 7.0)\n                         || (b == 3.0 && (qb == 1.0 || qb >= 5.0))); \n    tempo = mod(tempo*4.0 ,2.0);\n    return vec2(rand(vec2(time+1.2,tempo+6.1)) * ampMask * exp(-1.5*tempo),\n                rand(vec2(time+2.1,tempo+1.6)) * ampMask * exp(-1.5*tempo));\n}\n\nvec2 mainSound( in int samp,float time)\n{\n    float t = time;\n    float tempo = t * (bpm/60.0);\n    \n    vec2 bass = bassSynth(t,tempo) * 0.30; //mixing here\n    vec2 lead = leadSynth(t*1.005,tempo) * 0.333;\n    vec2 kick = kickSynth(t,tempo) * 0.333;\n    vec2 clap = clapSynth(t,tempo) * 0.333;\n    \n    vec2 synths = bass + lead; //sidechain\n    synths *= min(mod(tempo,1.0)+0.4,1.0);\n    \n    return synths + kick + clap;\n}","name":"Sound","description":"","type":"sound"}]}