{"ver":"0.1","info":{"id":"fst3zB","date":"1630091032","viewed":41,"name":"floof ray marchin","username":"floofinator7","description":"experimenting","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarcher"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n#define FOV 90.\n\n//get the distance from a sphere\nfloat SphereDist(vec3 point, vec4 sphere){\n    return length(point-sphere.xyz)-sphere.w;\n}\n\n//give the distance from a capsule.\nfloat CapsuleDist(vec3 point, vec3 endA, vec3 endB, float radius){\n    vec3 AtoB = endB-endA;\n    vec3 AtoPoint = point-endA;\n    \n    float tangent = dot(AtoB,AtoPoint) / dot(AtoB,AtoB);\n    tangent = clamp(tangent,0.,1.);\n    \n    vec3 between = endA + tangent*AtoB;\n    float dist = length(point - between) - radius;\n    \n    return dist;\n}\n\n//get the distance from the scene.\nfloat GetDist(vec3 point){\n    vec4 sphere = vec4(0, 1, 6, 1);\n    \n    float sphereDist = SphereDist(point,sphere);\n    float planeDist = point.y;\n    float capsuleDist = CapsuleDist(point, vec3(-2,4,8), vec3(2,4,8),0.5);\n    \n    float dist = min(min(sphereDist, planeDist),capsuleDist);\n    return dist;\n}\n\n//raymarch through the scene, returning the point it contacts.\nfloat RayMarch(vec3 origin,vec3 rayDir){\n    float originDist = 0.;\n    \n    for(int i=0; i<MAX_STEPS; i++){\n        vec3 p = origin + rayDir*originDist;\n        float objDist = GetDist(p);\n        originDist += objDist;\n        if(originDist>MAX_DIST || objDist<SURF_DIST) break;\n    }\n    return originDist;\n}\n\n//get the normal at a point.\nvec3 GetNormal(vec3 point){\n    float dist = GetDist(point);\n    vec2 e = vec2(.01,0);\n    \n    vec3 normal = dist - vec3(\n        GetDist(point-e.xyy),\n        GetDist(point-e.yxy),\n        GetDist(point-e.yyx));\n        \n    return normalize(normal);\n}\n\n//get the amount of light that reaches a point.\nfloat GetLight(vec3 point) {\n    vec3 lightPos = vec3(0,5,6);\n    lightPos.xz += vec2(sin(iTime), cos(iTime))*6.;\n    \n    vec3 lightVec = normalize(lightPos-point);\n    vec3 normal = GetNormal(point);\n    \n    float diffuse = clamp(dot(normal, lightVec),0.,1.);\n    float dist = RayMarch(point+normal*SURF_DIST*2., lightVec);\n    if(dist<length(lightPos-point)) diffuse*= .1;\n    return diffuse;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    vec3 rayOrigin = vec3(0, 1, 0);\n    vec3 rayDir = normalize(vec3(sin(uv.x*radians(FOV)), sin(uv.y*radians(FOV)), 1));\n    \n    float dist = RayMarch(rayOrigin, rayDir);\n    \n    vec3 point = rayOrigin + rayDir * dist;\n    \n    float diffuse = GetLight(point);\n    vec3 shadowColor = vec3(0.062, 0.290, 0.658);\n    vec3 lightColor = vec3(0.95,0.7,0.8);\n    col = mix(shadowColor,lightColor,diffuse);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}