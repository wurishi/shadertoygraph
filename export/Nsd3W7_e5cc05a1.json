{"ver":"0.1","info":{"id":"Nsd3W7","date":"1629973541","viewed":71,"name":"Interactive Mandelbrot Set","username":"DR4G","description":"A visualization of the Mandelbrot Set.\nUse the arrow keys to around and W and S to zoom in and out.","likes":0,"published":1,"flags":48,"usePreview":0,"tags":["2d","fractal","mandelbrotset"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Zoom () {\n    return (texelFetch(iChannel0, ivec2(2, 0), 0).r);\n}\n\nvec2 CoordOffset() {\n    return vec2(\n    \ttexelFetch(iChannel0, ivec2(0, 0), 0).r,\n        texelFetch(iChannel0, ivec2(1, 0), 0).r\n    );\n}\n\n#define MAX_VALUE 4.0\n#define MAX_ITERATIONS 300\n\nfloat GetColor(float X, float Y) {\n    int currentIteration = 0;\n    float x = 0.0;\n    float y = 0.0;\n    \n    while((currentIteration < MAX_ITERATIONS) && ((x*x + y*y) < MAX_VALUE)) {\n        float xSquared = (x*x) - (y*y);\n        float ySquared = 2.*x*y;\n        x = xSquared + X;\n        y = ySquared + Y;\n        currentIteration++;\n    }\n    \n    return (float(currentIteration) / float(MAX_ITERATIONS));\n}\n\nvec3 HueToRGB(float Hue) {\n    float H = Hue * 360.0;\n    float C = 1.0;\n    float X = C * (1.0 - abs(float(int(H/60.0)%2) - 1.0));\n    if (H >= 0.0 && H < 60.0) {\n        return vec3(C, X, 0.0);\n    }\n    if (H >= 60.0 && H < 120.0) {\n        return vec3(X, C, 0.0);\n    }\n    if (H >= 120.0 && H < 180.0) {\n        return vec3(0.0, C, X);\n    }\n    if (H >= 180.0 && H < 240.0) {\n        return vec3(0.0, X, C);\n    }\n    if (H >= 240.0 && H < 300.0) {\n        return vec3(X, 0.0, C);\n    }\n    if (H >= 300.0 && H < 360.0) {\n        return vec3(C, 0.0, X);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     vec2 coord = (fragCoord.xy / iResolution.xy);\n     \n     coord.x *= iResolution.x/iResolution.y; \n     \n     coord = coord * (2.0 - Zoom()) - (vec2(2.0, 1.0) - CoordOffset());\n     \n     float hue = GetColor(coord.x, coord.y);\n     \n     vec3 col = HueToRGB(hue);\n     \n     fragColor = vec4(col, 1.0);     \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\nconst int KEY_W = 87;\nconst int KEY_S  = 83;\n\nconst float speed = 1.0;\nconst float zoomSpeed = 0.1;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float outData = 0.0;\n    \n    switch(int(fragCoord.x)) {\n        case 0:\n        \toutData = texelFetch(iChannel0, ivec2(0), 0).r +\n                (iTimeDelta * speed) * texelFetch(iChannel1, ivec2(KEY_RIGHT, 0), 0).r -\n                (iTimeDelta * speed) * texelFetch(iChannel1, ivec2(KEY_LEFT, 0), 0).r;\n        \tbreak;\n        \n        case 1:\n        \toutData = texelFetch(iChannel0, ivec2(1, 0), 0).r +\n                (iTimeDelta * speed) * texelFetch(iChannel1, ivec2(KEY_UP, 0), 0).r -\n        \t\t(iTimeDelta * speed) * texelFetch(iChannel1, ivec2(KEY_DOWN, 0), 0).r;\n        \tbreak;\n            \n        case 2:\n        \toutData = texelFetch(iChannel0, ivec2(2, 0), 0).r +\n                (iTimeDelta * zoomSpeed) * texelFetch(iChannel1, ivec2(KEY_W, 0), 0).r -\n        \t\t(iTimeDelta * zoomSpeed) * texelFetch(iChannel1, ivec2(KEY_S, 0), 0).r;\n        \tbreak;\n    }\n    \n    fragColor = vec4(outData, 0.0, 0.0, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}