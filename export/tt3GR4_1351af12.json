{"ver":"0.1","info":{"id":"tt3GR4","date":"1575713711","viewed":191,"name":"Ripples 1272019","username":"bad_dreams_","description":"ðŸŒŠ","likes":9,"published":1,"flags":32,"usePreview":0,"tags":["ripples"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec3 offsetSource = texture(iChannel1, uv).xyz;\n    vec2 offset = offsetSource.xy / 100.0;\n    \n    vec2 adjustedUv = uv + offset;\n    \n    vec3 imageSource = texture(iChannel0, adjustedUv).rgb;\n    vec3 prettyNormals = (offsetSource + 1.0) / 2.0;\n    \n    float time = smoothstep(0.25, 0.75, (cos(iTime / 2.0) + 1.0) / 2.0);\n    vec3 color = mix(imageSource, prettyNormals, time);\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float checkerboard(vec2 uv) {\n    vec2 adjusted = floor(uv);\n \tbool inside = mod(adjusted.y, 2.0) == 1.0\n\t\t? mod(adjusted.x, 2.0) == 0.0\n        : mod(adjusted.x, 2.0) == 1.0;\n    return inside ? 1.0 : 0.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n \tvec2 uv = fragCoord / iResolution.y;\n    float value = checkerboard(uv * 8.0);\n    \n\tvec3 color = vec3(value);\n    fragColor = vec4(color, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"float height(vec2 uv) {\n \tfloat dist = length(uv) - iTime / 8.0;\n    float value = abs(sin((dist) * 8.0)) * 2.0; \n    return clamp(value * value, 0.0, 1.0);\n}\n\nvec3 surfaceNormal(vec2 uv) {\n \tconst float epsilon = 0.1;\n    vec2 xOffset = vec2(epsilon, 0.0);\n    vec2 yOffset = vec2(0.0, epsilon);\n    \n    vec3 direction = normalize(\n        vec3(\n            height(uv + xOffset) - height(uv - xOffset),\n            height(uv + yOffset) - height(uv - yOffset),\n            1.0\n        )\n    );\n    \n    return length(direction) > 0.0\n        ? direction\n        : vec3(0.0, 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord - iResolution.xy / 2.0) / iResolution.x;\n    \n    float value = height(uv);\n    \n    vec3 normal = surfaceNormal(uv);\n\n    fragColor = vec4(normal.x, normal.y, normal.z, 1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}