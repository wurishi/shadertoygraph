{"ver":"0.1","info":{"id":"3llcDs","date":"1593458001","viewed":49,"name":"First 3d one","username":"Amirh","description":"Learning the concept of camera in a shader for 3d.\nlk","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float DistLine (vec3 rayOrigin, vec3 rd, vec3 p)\n{\n    return length(cross( p - rayOrigin , rd))/length(rd);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy; // between 0 to 1\n    uv -= .5;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 rayOrigin = vec3(0., 0., -2.);\n    vec3 rd = vec3( uv.x, uv.y, 0.) - rayOrigin;\n    \n    float t = iTime;\n    vec3 p = vec3( sin(t), 0, -0.5+cos(t));\n    float d = DistLine(rayOrigin, rd, p );\n    \n    d = smoothstep( 0.1, 0.095, d);\n    \n    fragColor = vec4(d);\n}","name":"Image","description":"","type":"image"}]}