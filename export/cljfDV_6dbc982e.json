{"ver":"0.1","info":{"id":"cljfDV","date":"1694516534","viewed":50,"name":"Konod's life-like automaton","username":"Konod","description":"An implementation of a life-like cellular automaton. You can play with customizable parameters and rules in Common.\n\nControls:\nP - Pause\nR - Reset\nN - Next Frame\nF - Fasten the game\n","likes":3,"published":1,"flags":48,"usePreview":0,"tags":["cellular","conway","automaton","lifelike"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define NOISE(P) fract(dot(fract((P)*2.351), P + vec2(41.26, + iTime + 31.15)) * 41.98)\n#define SQUARELENGTH(P) dot(P, P)\n\nconst int KEY_P = 80;\nconst int KEY_R = 82;\nconst int KEY_N = 78;\nconst int KEY_F = 70;\n\nvec2 fragToCellCoord(vec2 fragCoord) {\n    return floor((fragCoord - 0.5f) / ZoomFactor);\n}\n\nint neighbor(vec2 cellCoord, int xOffset, int yOffset) {\n    vec2 texCoord =  max(vec2(-0.5f, -0.5f), ZoomFactor*(cellCoord + vec2(xOffset, yOffset)) + 0.5f);\n    return int(texture(iChannel0, texCoord/iResolution.xy));\n}\n\nint gameStepUpdate(vec2 cellCoord) {\n   int previous = neighbor(cellCoord, 0, 0);\n   int nbAliveNeighbors = neighbor(cellCoord, -1, 1) + neighbor(cellCoord, 0, 1) + neighbor(cellCoord, 1, 1)\n       + neighbor(cellCoord, -1, 0) + neighbor(cellCoord, 1, 0) + neighbor(cellCoord, -1, -1)\n       + neighbor(cellCoord, 0, -1) + neighbor(cellCoord, 1, -1);\n   int alive = (previous > 0) ? int(survive[nbAliveNeighbors]) : int(birth[nbAliveNeighbors]);\n   \n   return alive;\n}\n\nbool newGameStep() {\n    float frameStep = floor(iTime / GameStepPeriod);\n    float prevFrameStep = floor((iTime - iTimeDelta) / GameStepPeriod);\n    return (frameStep != prevFrameStep);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n   vec2 cellCoord = fragToCellCoord(fragCoord);\n   int previous;\n   \n   int alive = int((iMouse.z > 0.f) && (SQUARELENGTH(fragToCellCoord(iMouse.xy) - cellCoord) <= MouseBrushSize*MouseBrushSize));;\n   \n   \n   if (iFrame == 0 || (texelFetch( iChannel1, ivec2(KEY_R, 1), 0 ).x == 1.f)) {\n       alive = int(NOISE(cellCoord) < GenerationAliveDensity);\n   } else {\n       if ((texelFetch( iChannel1, ivec2(KEY_P, 2), 0 ).x == 0.f) && (newGameStep())\n       || (texelFetch( iChannel1, ivec2(KEY_N, 1), 0 ).x == 1.f)\n       || (texelFetch( iChannel1, ivec2(KEY_F, 0), 0 ).x == 1.f)) {\n           alive += gameStepUpdate(cellCoord);\n           previous = neighbor(cellCoord, 0, 0);\n       } else {\n           alive += neighbor(cellCoord, 0, 0);\n           previous = int(texture(iChannel0, fragCoord/iResolution.xy).b);\n       }\n   }\n       \n    fragColor = vec4(alive) + vec4(0.f, 0.f, float(int(DyingStateMode)*previous), 1.f);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"//Customizable ruleset. By default, it follows Conway's Game of Life ruleset (B3/S23).\n// More information here: https://en.wikipedia.org/wiki/Life-like_cellular_automaton\nconst bool birth[9] = bool[9](false, false, false, true, false, false, false, false, false);\nconst bool survive[9] = bool[9](false, false, true, true, false, false, false, false, false);\n//Add a dying state, like in Brian's Brain: https://en.wikipedia.org/wiki/Brian%27s_Brain\nconst bool DyingStateMode = false;\n\n//Customizable parameters.\nconst float GenerationAliveDensity = 0.2f;\nconst float MouseBrushSize = 1.f;\nconst float ZoomFactor = 16.f;\nconst float GameStepPeriod = 0.5f;","name":"Common","description":"","type":"common"}]}