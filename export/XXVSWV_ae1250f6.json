{"ver":"0.1","info":{"id":"XXVSWV","date":"1720512543","viewed":89,"name":"pair noise (sparse dimer tiling)","username":"jt","description":"Towards random tatami tiling (i.e. random monomer-dimer tiling): A fast, loopless method to sample sparse random dimers.\nAlgorithm: Each tile has a random orientation. If orientations match, join adjacent tiles into dimer. Otherwise tile is a monomer.\n","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["noise","grid","random","sampling","tiling","loopless","dominoes","tatami","sparse","domino","dominos","dimer","monomer","monomino","monominoes"],"hasliked":0,"parentid":"4cGSDD","parentname":"random tiling by thin rectangles"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/XXVSWV pair noise (sparse dimer tiling), 2024 by jt\n\n// Towards random tatami tiling (i.e. random monomer-dimer tiling):\n// A fast, loopless method to sample sparse random dimers.\n// Each tile has a random orientation.\n// If orientations match, join adjacent tiles into dimer.\n// Otherwise tile is a monomer (not colored here).\n// 1/4 of the tiles are halves of dimers, 3/4 are monomers.\n// It should be possible to increase the ratio by iterating.\n\n// TODO: increase dimer density without relying on iteration.\n\n// INTERESTING: \"Domino Tatami Tiling is NP-Complete\"\n// https://webhome.cs.uvic.ca/~ruskey/Publications/Tatami/NPCtatami.html\n// https://webhome.cs.uvic.ca/~ruskey/Publications/Tatami/IWOCAtalk.pdf\n// As far as I understand that is relevant for tiling given shapes by dominos.\n// Does this result affect a random sampling of dominos and monominos?\n\n// tags: noise, grid, random, sampling, tiling, loopless, dominoes, tatami, sparse, domino, dominos, dimer, monomer, monomino, monominoes\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2,\n// implementing Chris Wellons https://nullprogram.com/blog/2018/07/31/\nuint triple32(uint x)\n{\n    x ^= x >> 17u;\n    x *= 0xed5ad4bbu;\n    x ^= x >> 11u;\n    x *= 0xac4c1b51u;\n    x ^= x >> 15u;\n    x *= 0x31848babu;\n    x ^= x >> 14u;\n    return x;\n}\n\n#define HASH(u) triple32(u)\n\nuint uhash(uvec2 v)\n{\n    return HASH(v.x + HASH(v.y));\n}\n\nivec2 dir(uint i)\n{\n    return ivec2[4](ivec2(+1,0),ivec2(0,+1),ivec2(-1,0),ivec2(0,-1))[i&3u];\n}\n\nivec2 tile(ivec2 p) // https://www.shadertoy.com/view/XXVSWV pair noise, 2024 by jt\n{\n    uint i = uhash(uvec2(p));\n    ivec2 d = dir(i);\n    ivec2 q = p+d;\n    uint j = uhash(uvec2(q));\n    ivec2 e = dir(j);\n\n    //if(((i+j)&3u)==0u) return p+q; // return twice average\n    if(d == -e) return p+q; // return twice average\n\n    return ivec2(0);\n    //return p*2;\n}\n\n// https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\nvec3 hash31(float p)\n{\n    vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nvec3 hash32(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nbool edge(vec2 I)\n{\n    float e = 0.1;\n    ivec2 a = tile(ivec2(floor(I-e)));\n    ivec2 b = tile(ivec2(floor(I+e)));\n    vec3 A = hash32(vec2(a));\n    vec3 B = hash32(vec2(b));\n    return any(greaterThan(abs(A-B),vec3(0.001)));\n}\n\nvoid mainImage(out vec4 o, in vec2 I)\n{\n    vec2 R = iResolution.xy;\n    I = (2. * I - R) / R.y;\n    vec3 color = vec3(0);\n    //if(all(lessThan(abs(I), vec2(1))))\n    {\n        I *= 24.0;\n\n        ivec2 result = tile(ivec2(floor(I-0.1)));\n        color = hash32(vec2(result));\n        if(edge(I)) color *= 0.0;\n/*\n        if(iMouse.z > 0.0)\n        {\n            color = max(color, vec3(1.0-smoothstep(0.09,0.11,fract(I.x))));\n        }\n*/\n    }\n    o = vec4(color, 1);\n}\n","name":"Image","description":"","type":"image"}]}