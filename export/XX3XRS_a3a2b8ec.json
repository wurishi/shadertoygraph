{"ver":"0.1","info":{"id":"XX3XRS","date":"1719179895","viewed":66,"name":"black hole test 1","username":"the0neboy","description":"my own way of making a black hole","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["light","blackhole","gravity"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MASS 10.\n#define c 1.\n#define G 0.1\n\n#define iterations 10000\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy/2.)/iResolution.y;\n    vec2 m = (iMouse.xy-iResolution.xy/2.)/iResolution.y;\n\n    vec3 camPos = vec3(0,0,35);\n    camPos=rot3D(camPos,-m.y*4.,-m.x*4.);\n    \n    vec3 ro = camPos;\n    vec3 rd = getRayDir(ro,vec3(0),uv,45.);\n    \n    bool lost = false;\n    for (int i=0; i<iterations; i++) {\n        float r = length(ro);\n        vec3 dir = -ro/r;\n        \n        float acceleration = (G*MASS)/(r*r);\n        \n        float time = max(1./acceleration * .001,0.01);\n        vec3 velocity = acceleration*dir*time;\n        \n        rd = normalize(rd+velocity);\n        \n        ro += rd*c*time;\n        \n        \n        if (r <= (G*MASS)/(c*c)) {\n            lost = true;\n            break;\n        } else if (r >= 10000.) {\n            break;\n        }\n    }\n    \n    vec3 col = vec3(0.);\n    \n    if (!lost) {\n        col = texture(iChannel0, rd).rgb;\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec3 getRayDir(vec3 ro, vec3 wo, vec2 uv, float FOV) {\n    float t = tan(FOV*3.14159/180.);\n    vec3 f = normalize(wo-ro),\n        r = normalize(cross(vec3(0,1,0),f)),\n        u = cross(f,r),\n        rd = f+r*uv.x*t+u*uv.y*t;\n    return normalize(rd);\n}\nmat2 rot2D(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(\n        c,-s,\n        s,c\n    );\n}\nvec3 rot3D(vec3 p, float pitch, float yaw) {\n    p.zy *= rot2D(pitch);\n    p.xz *= rot2D(yaw);\n    return p;\n}\n\nfloat intersectPlane(vec3 p0, vec3 n, vec3 ro, vec3 rd) {\n    float denom = dot(n,rd);\n    if (denom != 0.0) {\n        vec3 p0ro = p0-ro;\n        float t = dot(p0ro, n) / denom;\n        return t;\n    }\n    \n    return -1.0;\n}\nfloat intersectDisk(vec3 p0, vec3 n, float r, float R, vec3 ro, vec3 rd) {\n    float t = intersectPlane(p0, n, ro, rd);\n    if (t > 0.0) {\n        vec3 p = ro + rd*t;\n        float dr = length(p-p0);\n        if (dr >= r && dr <= R) {\n            return t;\n        }\n    }\n    return -1.0;\n}","name":"Common","description":"","type":"common"}]}