{"ver":"0.1","info":{"id":"dsXcR2","date":"1686977221","viewed":56,"name":"rgb-phosphenes","username":"akr51","description":"Made using the polar coordinates lesson from the book of shaders resource.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["polarcoordinates"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n#define TWO_PI 6.28318530718\n\n\nvec3 hsb2rgb(in vec3 c) \n{\n\n    vec3 rgb = clamp(abs(mod(c.x * 6.0 + vec3(0.0, 4.0, 2.0),\n                             6.0) - 3.0) - 1.0,\n                             0.0,\n                             1.0);\n                             \n    rgb = rgb * rgb * (3.0 - 2.0 * rgb);\n    \n    return c.z * mix(vec3(1.0), rgb, c.y);\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 coords = (fragCoord / iResolution.xy) * 2.0 - 1.0;\n    \n    //coords.x *= (iResolution.x / iResolution.y);\n    \n    vec3 color = vec3(0.0);\n    vec3 shade = vec3(0.0);\n    \n    float iterr = 11.0;\n    \n    for (float i = 0.0; i < iterr; ++i) {\n   \n        // Polar coordinates\n        vec2 tocenter_b = vec2(sin(coords.x) * i, sin(coords.y) * i);\n        float theta_b = atan(sin(tocenter_b.y), cos(tocenter_b.x));\n        float radius_b = length(tocenter_b) * abs(sin(iTime / 5.0 + 5.0 * i)) * 1.0;\n\n        \n        color += hsb2rgb(vec3((theta_b / TWO_PI) + cos(pow(i, 5.0) * 6.0 + (pow(iTime / 2500.0, 3.0) / 50.0)) * 25.0, radius_b, 1.0)) * abs(sin(iTime + i * 6.0));\n        shade = vec3(length(color * sin(iTime / 50.0 + i)) - length(tocenter_b * cos(iTime / 50.0)));\n    }\n    \n    color = vec3(pow(color.r, shade.x), pow(color.g, shade.y), pow(color.b, shade.z));\n    \n    fragColor = vec4(color / 125.0, 1.0);\n   \n}","name":"Image","description":"","type":"image"}]}