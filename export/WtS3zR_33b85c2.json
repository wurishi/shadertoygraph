{"ver":"0.1","info":{"id":"WtS3zR","date":"1558176695","viewed":66,"name":"Mobilecamp 2019","username":"arbmind","description":"Live coded at Mobilecamp 2019","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["camp","barcamp"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat sphere(in vec3 p, in float r) {\n    return length(p) - r;\n}\nfloat yplane(in vec3 p) {\n    return -p.y;\n}\n\nfloat map(in vec3 p) {\n    return min( sphere(p, 1.0), \n               yplane(p + vec3(0,-1.5,0)) );\n}\n\nvec3 normal(in vec3 p) {\n    vec2 e = vec2(1,-1)*0.00001;\n    return normalize(\n        e.xyy * map(p + e.xyy) +\n        e.yxy * map(p + e.yxy) +\n        e.yyx * map(p + e.yyx) +\n        e.xxx * map(p + e.xxx));\n}\n\nvec3 shade(in vec3 p, vec3 r, in vec3 n, in float t) {\n   vec3 light = normalize(\n       vec3(2.0*sin(iTime*1.0),-0.4, -1.0));\n   \n   float diff = clamp( dot(n, light), 0.0, 1.0);\n   vec3 col = vec3(.3) * 4. * diff * vec3(1.0,0.7,0.5);\n   \n   \n    \n   return col;\n}\n\nvec3 raytrace(in vec3 ro, in vec3 rd) {\n    vec3 col;\n    \n    float t = 0.0;     \n    \n    for(int i = 0; i < 200 && t < 25.0; i++) {\n        float d = map(ro + rd*t);\n        if (abs(d) < 0.0001) {\n            t += d;\n            vec3 p = ro + rd*t;\n            vec3 n = normal(p);\n            return shade(p, rd, n, t);\n        }\n        t += d;\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (iResolution.xy * 0.5 - fragCoord) /\n        iResolution.xx;\n\n    vec3 rd = normalize(vec3(uv, 1));\n    vec3 ro = vec3(0,0,-8);\n       \n    // Time varying pixel color\n    vec3 col = raytrace(ro, rd);\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}