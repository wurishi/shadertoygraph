{"ver":"0.1","info":{"id":"4fyczc","date":"1732158229","viewed":100,"name":"grid fire","username":"pb","description":"mouse works","likes":12,"published":1,"flags":32,"usePreview":0,"tags":["fractal","raymarch","glow"],"hasliked":0,"parentid":"4cyczV","parentname":"ring ding"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//philip,bertani@gmail.com\n//Buffer A is where it is at\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  \n    vec2 uv = fragCoord.xy/iResolution.xy;\n\n    vec2 texel = 1./iResolution.xy;\n    vec4 total_color;\n    for (int i=0;i<5;i++){\n        float fi = float(i)-2.;\n        for (int j=0;j<5;j++){ \n            float fj = float(j)-2.;\n            vec4 color = texture(iChannel0, \n                uv + vec2( texel.x*fi,texel.y*fj )  );\n            total_color += color * gk1s[i*5 + j];\n        }\n    }\n    fragColor = total_color;\n \n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float[] params = float[] ( \n0.,\n10.,\n0.,\n0.,\n-.16,\n-.6,\n.3,\n0.,\n0.,\n0.,\n0.,\n0.,\n0.,\n0.,\n0.,\n0.,\n0.,\n0.,\n-.6,\n0.,\n0.,\n0.,\n0.,\n0.,\n0.,\n0.,\n0.,\n0.,\n0.,\n0.,\n0.,\n0.,\n0.\n);\n\n\n//gaussian_kernel_one_stdev\nfloat[] gk1s = float[] (\n        0.003765,0.015019,0.023792,0.015019,0.003765,\n        0.015019,0.059912,0.094907,0.059912,0.015019,\n        0.023792,0.094907,0.150342,0.094907,0.023792,\n        0.015019,0.059912,0.094907,0.059912,0.015019,\n        0.003765,0.015019,0.023792,0.015019,0.003765 );","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define rot(a) mat2(cos(a+vec4(0,11,33,0)))\n\nfloat glow=0., mmaxDist=5., tileColor=0.;\nvec3 ifs_color, ro;\n\nfloat de(vec3 p) {\n\n    vec4 q = vec4(p, 6.);\n    \n    float nn=1.95;\n    vec3  id = round(q.xyz/nn);\n    q.xyz -= nn*id;\n    \n    vec2 qq = floor(q.xz);\n    q.xyz -= 1.;\n\n    float i=0.;\n    \n    float p1 = .02 + max(min(.5*sin(iTime/3.),.15),-.08) ;\n    for(; i < params[1]; i++) {\n     \n        q.xyz = abs(q.xyz + 1.) - (1.+q.xyz/50.);\n        q /= clamp(dot(q.xyz, q.xyz), 0.4+params[2], 1.0+params[3]);\n        q *= 1.2*(1.+p1);\n    }\n    \n    \n    float d2 = length( max( abs(q.xyz) - vec3(1.2+params[5],1.2+params[6], 1.2+params[18]), 0.0) )/q.w;\n\n    ifs_color = cos(q.xyz);\n    tileColor = log(1.+q.w);\n    \n    return  max(d2, -(length(p-ro)-.6));\n}\n\nfloat march(vec3 ro, vec3 rd, float mx) {\n    float t = 0.0;\n  \n    float eps = 1e-6, distfac=2.;\n    float hitThreshold = eps;\n    for(int i = 0; i < 200; i++) {\n        float d = de(ro + rd*t);\n        if (d < hitThreshold || t >= mx) break;\n        t += d;\n        hitThreshold = eps*(1.+t*t*distfac);\n        glow += .15*exp(-max(2.-d,0.)/5.);\n    }\n    return t;\n}\n\nvec3 render(vec3 ro, vec3 rd) {\n\n    vec3 col = vec3(0.);\n\n    float t = march(ro, rd, mmaxDist);\n    \n    glow *= exp(-t*t/70.);\n\n    vec3 tc = cos(tileColor/2.+9.*vec3(1,2,3));\n    tc *= tc;\n    col += 1e-8*pow(glow,6.)*tc ;\n         \n    return col ;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p  = (2.*fragCoord.xy-iResolution.xy)/iResolution.y*2.;\n\n    ro = vec3(0,0,iTime/4.) ;\n    vec3 rd = normalize( vec3(p,2.) );\n     \n    rd.xz *= rot(iTime/7.);\n    rd.yz *= rot(iTime/5.);\n    \n    if (iMouse.z > 0.) {\n        vec2 an = 4.*(iMouse.xy/iResolution.xy-.5);\n        vec2 cc=cos(an), ss=sin(an);\n        rd.xz *= mat2(cc.x,-ss.x,ss.x,cc.x);\n        rd.yz *= mat2(cc.y,-ss.y,ss.y,cc.y);\n    }    \n    \n    vec3 col = render(ro, rd);\n    col = 1. - exp(-15.*col*col);\n    \n    fragColor = vec4( col, 0.);\n    \n}\n","name":"Buffer A","description":"","type":"buffer"}]}