{"ver":"0.1","info":{"id":"lXSSRz","date":"1710186115","viewed":80,"name":"hyper's kuwahara filter","username":"hypercubed","description":"Kuwahara filter implementation","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["postprocessing","blur","filter","kuwahara","painterly"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int quad_size = 5;\nconst int window_size = 2 * quad_size + 1;\n\nfloat quad_std_dev(float[window_size * window_size] samples, int x_offset, int y_offset) {\n    float num_samples = float((quad_size + 1) * (quad_size + 1));\n    float q_sample_sum = 0.0;\n    for (int x = -quad_size + x_offset; x <= x_offset; x++) {\n        for (int y = -quad_size + y_offset; y <= y_offset; y++) {\n            q_sample_sum += samples[(x + quad_size) * window_size + y + quad_size];\n        }\n    }\n    float mean = q_sample_sum / num_samples;\n    float q_mean_squared_sum = 0.0;\n    for (int x = -quad_size + x_offset; x <= x_offset; x++) {\n        for (int y = -quad_size + y_offset; y <= y_offset; y++) {\n            q_mean_squared_sum += (samples[(x + quad_size) * window_size + y + quad_size] - mean) \n                * (samples[(x + quad_size) * window_size + y + quad_size] - mean);\n        }\n    }\n    float std_dev = sqrt(q_mean_squared_sum / num_samples);\n    \n    return std_dev;\n}\n\nvec3 quad_avg_color(float[window_size * window_size] samples, int x_offset, int y_offset, vec2 fragCoord) {\n    float num_samples = float((quad_size + 1) * (quad_size + 1));\n    vec3 color_sum = vec3(0.0, 0.0, 0.0);\n    for (int x = -quad_size + x_offset; x <= x_offset; x++) {\n        for (int y = -quad_size + y_offset; y <= y_offset; y++) {\n            vec2 sample_uv = (fragCoord + vec2(x, y))/iResolution.xy;\n            color_sum += texture(iChannel0, sample_uv).xyz;\n        }\n    }\n    return color_sum / num_samples;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float[window_size * window_size] samples;\n    \n    //float[] quad_avgs = float[] (0.0, 0.0, 0.0, 0.0);\n    //float[] quad_std_devs = float[] (0.0, 0.0, 0.0, 0.0);\n    \n    // get texture samples\n    for (int x = 0; x <= window_size; x++) {\n        for (int y = 0; y <= window_size; y++) {\n            vec2 sample_uv = (fragCoord + vec2(x-quad_size, y-quad_size))/iResolution.xy;\n            vec3 sample_color = texture(iChannel0, sample_uv).xyz;\n            float v = max(sample_color.x, max(sample_color.y, sample_color.z));\n            samples[x * window_size + y] = v;\n        }\n    }\n    \n    float q1_std = quad_std_dev(samples, 0, 0);\n    float q2_std = quad_std_dev(samples, quad_size, 0);\n    float q3_std = quad_std_dev(samples, 0, quad_size);\n    float q4_std = quad_std_dev(samples, quad_size, quad_size);\n    \n    float min_std_dev = min(min(min(q1_std, q2_std), q3_std), q4_std);\n    \n    vec3 col = texture(iChannel0, uv).xyz;\n    if (min_std_dev == q1_std) {\n        col = quad_avg_color(samples, 0, 0, fragCoord);\n        //col = vec3(1.0, 1.0, 0.0);\n    } else if (min_std_dev == q2_std) {\n        col = quad_avg_color(samples, quad_size, 0, fragCoord);\n        //col = vec3(0.0, 1.0, 1.0);\n    } else if (min_std_dev == q3_std) {\n        col = quad_avg_color(samples, 0, quad_size, fragCoord);\n        //col = vec3(1.0, 0.0, 1.0);\n    } else if (min_std_dev == q4_std) {\n        col = quad_avg_color(samples, quad_size, quad_size, fragCoord);\n        //col = vec3(1.0, 1.0, 1.0);\n    }\n    \n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}