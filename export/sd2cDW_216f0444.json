{"ver":"0.1","info":{"id":"sd2cDW","date":"1643567007","viewed":147,"name":"Fork Shader Studies","username":"Farini","description":"This was forked from @LeyMB, originally from www.thebookofshaders.com\nMy objective is to play around with the Amplitude, frequency and scale.\n","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise","fractalnoise"],"hasliked":0,"parentid":"ss2czw","parentname":"Shader-Studies: Fractal Noise"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Many thanks to Patricio Gonzalez Vivo & Jen Lowe for their tutorials on thebookofshaders.com\n// Their website is an invaluable resource when starting out with learning shaders and has helped me greatly\n\n\n//------------options------------\n#define OCTAVES 4\n#define LACUNARITY 2.0\n\n#define GAIN 0.5\n\n#define AMPLITUDE 0.5\n#define FREQUENCY 0.0\n\n#define SCALE 5.0\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n//-------------------------------\n\n// random function by Patricio Gonzalez Vivo\n//https://thebookofshaders.com/12/\nvec2 random2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\n// random function by Patricio Gonzalez Vivo\n// https://thebookofshaders.com/11/\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                * 43758.5453123);\n}\n\n// cellular noise function from my former shader\n// https://www.shadertoy.com/view/sd2yRw\nfloat CellularNoise(vec2 a_CurrentCoord)\n{\n\ta_CurrentCoord *= SCALE;\n\n\t// tiling\n\tvec2 t_IntComp = floor(a_CurrentCoord);\n\tvec2 t_FractComp = fract(a_CurrentCoord); \n    \n\n\t// smallest distance that can be found to any of the points per pixel\n\tfloat t_Distance = 10000.0;\n\n\tfor(int y = -1; y <= 1; y++)\n\t{\n\t\tfor(int x = -1; x <= 1; x++)\n\t\t{\n\t\t\tvec2 t_AdjacentTile = vec2(x,y);\n\n\t\t\tvec2 t_RandPoint = random2(t_IntComp + t_AdjacentTile); \n\n\t\t\t// space to animate the point\n            t_RandPoint.x += 0.4 * sin(iTime * random(t_RandPoint));\n\n\t\t\t// distance to t_RandPoint\n\t\t\tfloat t_Dist = length(t_AdjacentTile + t_RandPoint - t_FractComp);\n\t\t\t\n\t\t\tif(t_Dist < t_Distance)\n\t\t\t{\n\t\t\t\tt_Distance = t_Dist;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn t_Distance;\n}\n\n// noise function by Patricio Gonzalez Vivo \n// https://thebookofshaders.com/13/\nfloat FractualNoise(vec2 a_Coord)\n{\n   float t_Value = 0.0;\n   float t_Amplitude = AMPLITUDE; //+ AMPLITUDE * min(sin(iTime), cos(iTime));\n   float t_Frequency = FREQUENCY * (1. + min(sin(iTime), cos(iTime)));\n\n   for(int i = 0; i < OCTAVES; i++)\n   {\n        t_Value += t_Amplitude * CellularNoise(a_Coord);\n\t\ta_Coord *= LACUNARITY;\n\t\tt_Amplitude *= GAIN;\n   }\n   \n   return min(t_Value, 0.75);\n\n   return t_Value;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalise coordinates\n    vec2 t_Coord = fragCoord.xy/iResolution.xy;\n    t_Coord.x *= iResolution.x/iResolution.y;\n\n    vec3 t_Color = vec3(0.0);\n    t_Color += FractualNoise(t_Coord * 3.0);\n    // t_Color.g = min(0.2, t_Color.g);\n    // t_Color.b = min(0.7, t_Color.b);\n    \n    fragColor = vec4(t_Color, 1.0);\n}","name":"Image","description":"","type":"image"}]}