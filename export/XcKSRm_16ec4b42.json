{"ver":"0.1","info":{"id":"XcKSRm","date":"1714973177","viewed":72,"name":"Cellular Noise ðŸ§¿","username":"walter023","description":"https://thebookofshaders.com/12/ ðŸš€","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec2 random2(vec2 p) {\n  return fract(sin(vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3)))) * 43758.5453);\n}\n\n// IQ\nvec3 palette(in float t) {\n  vec3 a = vec3(0.278, 0.85, 0.668);\n  vec3 b = vec3(0.708, 0.518, 0.518);\n  vec3 c = vec3(-2.992, 1.178,0.928);\n  vec3 d = vec3(0.218, 0.333, 0.667);\n  return a + b * cos(6.28318 * (c * t + d));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 st = fragCoord.xy / iResolution.xy;\n  st.x *= iResolution.x / iResolution.y;\n  vec3 color = vec3(0.0);\n  st *= 5.;\n  vec2 i_st = floor(st);\n  vec2 f_st = fract(st);\n  float m_dist = 1.;\n  for(int y = -1; y <= 1; y++) {\n    for(int x = -1; x <= 1; x++) {\n      vec2 neighbor = vec2(float(x), float(y));\n      vec2 point = random2(i_st + neighbor);\n      point = 0.5 + 0.5 * sin(iTime + 6.2831 * point);\n      vec2 diff = neighbor + point - f_st;\n      float dist = length(diff);\n      m_dist = min(m_dist, dist);\n    }\n  }\n  color = palette(sin(2.0  + m_dist) * .35 );\n  color += 1. - step(.01, m_dist);\n  fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}