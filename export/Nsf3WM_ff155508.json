{"ver":"0.1","info":{"id":"Nsf3WM","date":"1616008461","viewed":152,"name":"Gen1","username":"cody_shader","description":"Gen1","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"ttyBz1","parentname":"planet01"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ITERATION 500\n#define MAX_DIST 10.\n#define EX vec3(0.001, 0., 0.)\n#define EY vec3(0., 0.001, 0.)\n#define EZ vec3(0., 0., 0.001)\n#define w iResolution.x\n#define h iResolution.y\n#define iTime iTime*1.2\n\nfloat smin(float a, float b, float k) {\n\tfloat m = max(min(0.5 + 0.5 * (b - a) / k, 1.), 0.);\n\treturn a * m + b * (1. - m) - k * m * (1. - m);\n}\n\nfloat getDist(vec3 p) { //ПОЛУЧИТЬ РАССТОЯНИЕ ОТ ТОЧКИ ДО СФЕРЫ\n\tvec3 sphere = vec3(0.,0.-0.2+sin(iTime*0.5)*0.4,0.);\n\tfloat sphereDist = distance(p, sphere) - 1.;\n\tfloat planeDist = smin(+p.y + 0.9, -p.z +10.8,10.0);\n\tfloat d = smin(sphereDist, planeDist, 0.4);\n\treturn d;\n\n}\n\nvec3 normal(vec3 p) {\n\tfloat d = getDist(p);\n\tfloat p1 = getDist(p - EX);\n\tfloat p2 = getDist(p - EY);\n\tfloat p3 = getDist(p - EZ);\n\tvec3 tri = vec3(p1, p2, p3);\n\tvec3 n = vec3(d) - tri;\n\treturn normalize(n);\n}\n\nfloat light(vec3 p) {\n\tvec3 lightPos = vec3(sin(iTime)*2., 0., cos(iTime)*2.);\n\tvec3 lightDir = normalize(lightPos - p);\n\tvec3 n = normal(p);\n\treturn dot(n, lightDir) * 0.5 + 0.5;\n}\n\nfloat rayMarching(vec3 ro, vec3 rd) {\n\tvec3 p = ro;\n\tfor (int i = -0; i < 500; i++){\n\t\tfloat d = getDist(p);\n\t\tif (d > MAX_DIST) {break;}\n\t\tp = vec3(p) +  rd * d;\n\t\tif (d < 0.0001){\n\t\t\treturn light(p);\n\t\t} \n\t}\n\treturn 0.;\n}\n\n// Author @patriciogv - 2015\n// http://patriciogonzalezvivo.com\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n\n\nfloat random (in vec2 _st, float col) {\n    return fract(sin(dot(_st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123)*col;\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 _st, float col) {\n    vec2 i = floor(_st);\n    vec2 f = fract(_st);\n    int j = int(col*3.);\n   \n    // Four corners in 2D of a tile\n    float a = random(i, col);\n    float b = random(i + vec2(1.0, 0.0), col);\n    float c = random(i + vec2(0.0, 1.0), col);\n    float d = random(i + vec2(1.0, 1.0), col);\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n#define NUM_OCTAVES 5\n\nfloat fbm ( in vec2 _st, float col ) {\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(100.0);\n    \n    // Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5),\n                    -sin(0.5), cos(0.5));\n    for (int i = 0; i < NUM_OCTAVES; ++i) {\n        v += a * noise(_st, col);\n        _st = rot * _st * 2.0 + shift;\n        a *= col;\n    }\n  \n    return v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 st = fragCoord.xy/iResolution.y*3.;\n    const int iteration = 500;\n    const float max_dist = 10.0;\n\n\t//координаты камеры\n\tvec3 ro = vec3(0., 0., -2.);\n\n    float x = (fragCoord.x / w) * 2. - 1.;\n    float y = (fragCoord.y / h) * 2. - 1.;\n    x *= w / h;\n\n    //направление луча\n    vec3 rd = vec3(x, y , 1.);\n    rd = normalize(rd);\n\n    //круг\n    float col = rayMarching(ro, rd);\n\t\t\t\n\n    \n    vec3 color = vec3(0.0);\n\n    vec2 q = vec2(0.);\n    q.x = fbm( st + 0.00*iTime, col);\n    q.y = fbm( st + vec2(1.0), col);\n\n    vec2 r = vec2(0.);\n    r.x = fbm( st + 1.0*q + vec2(1.7,9.2)+ 0.15*iTime , col);\n    r.y = fbm( st + 1.0*q + vec2(8.3,2.8)+ 0.126*iTime, col);\n\n    float f = fbm(st+r, col);\n\n    color = mix(vec3(0.101961,0.619608,0.666667),\n                vec3(0.666667,0.666667,0.498039),\n                clamp((f*f)*4.0,0.0,1.0));\n\n    color = mix(color,\n                vec3(0,0,0.164706),\n                clamp(length(q),0.0,1.0));\n\n    color = mix(color,\n                vec3(0.666667,1,1),\n                clamp(length(r.x),0.0,1.0));\n            \n    fragColor = vec4((f*f*f+.6*f*f+.5*f)*color,1.);\n\n}","name":"Image","description":"","type":"image"}]}