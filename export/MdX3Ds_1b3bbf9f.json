{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"vec4 scene(vec3 arg_0);\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n        vec2 pos = ((((fragCoord).xy) * (2.0)) - ((iResolution).xy)) / ((iResolution).y);\n        vec3 cp = vec3(0.0, 0.0, 5.0);\n        vec3 cu = vec3(0.0, 0.5, 0.0);\n        vec3 dir = normalize((((cross(normalize((vec3(0.0, 0.0, 0.0)) - (cp)), cu)) * ((pos).x)) + ((cu) * ((pos).y))) + ((normalize((vec3(0.0, 0.0, 0.0)) - (cp))) * (3.0)));\n        vec3 ray = cp;\n        float dist = 0.0;\n        float t = 0.06;\n        vec3 tcol = vec3(0.0, 0.5, 0.7);\n        vec4 s = vec4(0.0, 0.0, 0.0, 0.0);\n        for(int _temp_1_ = 0; _temp_1_ < 40; ++_temp_1_) {\n                s = scene(ray);\n                dist = (dist) + ((s).w);\n                ray = (ray) + ((dir) * ((s).w));\n                if(((s).w) < (0.01)) {\n                        break;\n                }\n                if((dist) > (20.0)) {\n                        dist = 20.0;\n                }\n        }\n        fragColor = vec4((mix(((1.0) - ((dist) / (20.0))) * ((s).rgb), tcol, t)).r, (mix(((1.0) - ((dist) / (20.0))) * ((s).rgb), tcol, t)).g, (mix(((1.0) - ((dist) / (20.0))) * ((s).rgb), tcol, t)).b, 1.0);\n}\nvec4 scene(vec3 arg_0) {\n        float dist = (length((mod(arg_0, vec3(abs(sin(iTime)), abs(sin((iTime) / (1.3))), abs(cos((iTime) / (1.7)))))) - ((0.5) * (vec3(abs(sin(iTime)), abs(sin((iTime) / (1.3))), abs(cos((iTime) / (1.7)))))))) - (0.005);\n        return vec4(1.0, 1.0, 1.0, dist);\n}\n\n/*\n:globals\n\t@vec3 uniform =iResolution\n\t@float uniform =iTime\n;\n\n:m sphere ( p s ) p length s - ;\n\n:m union \\min ;\n:m subtract \\{ swap negate swap max } ;\n:m intersect \\max ;\n:m repeat ( block p c ) p c mod 0.5 c * - *block ;\n\n: scene ( p:vec3 -> vec4 )\n\t{ 0.005 sphere } p [\n\t\tiTime sin abs\n\t\tiTime 1.3 / sin abs\n\t\tiTime 1.7 / cos abs\n\t]v repeat\n\n\t=dist\n\t[ 1.0 1.0 1.0 dist ]v\n;\n\nfragCoord .xy 2.0 * iResolution .xy - iResolution .y / =pos\n\n3.0 =>focus\n20.0 =>far\n\n[ 0.0 0.0 5.0 ]v =cp\n[ 0.0 0.0 0.0 ]v =>ct\n\nct cp - normalize =>cd\n[ 0.0 0.5 0.0 ]v =cu\ncd cu cross =>cs\ncs pos .x * cu pos .y * + cd focus * + normalize =dir\n\ncp =ray\n0.0 =dist\n0.06 =t\n[ 0.0 0.5 0.7 ]v =tcol\n\n[ 0.0 0.0 0.0 0.0 ]v =s\n\n{\n\tray scene =s\n\tdist s .w + =dist\n\tray dir s .w * + =ray\n\n\t{ break } s .w 0.01 < when\n\t{ far =dist } dist far > when\n} 40 times\n\n1.0 dist far / - =>b\nb s .rgb * tcol t mix =>c\n\n[ c .r.g.b 1.0 ]v =fragColor\n*/","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MdX3Ds","date":"1381644726","viewed":202,"name":"Shaderforth Raymarcher","username":"daeken","description":"Shaderforth raymarcher","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","shaderforth"],"hasliked":0,"parentid":"","parentname":""}}