{"ver":"0.1","info":{"id":"3sX3D8","date":"1545932820","viewed":457,"name":"ouroboros 3","username":"morisil","description":"experiments with math behind the perspective, rotation, and the endless chessboard","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["endless","loop","checker","rotation","perspective","double","chess"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SCALE 7.0\n\n#define SCENE_ROTATION_SPEED 0.5\n\n#define PLANE_ROTATION_SPEED -0.2\n\nmat2 rotate2d(float angle){\n    return mat2(\n        cos(angle), -sin(angle),\n        sin(angle), cos(angle)\n    );\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 pixel = (fragCoord -.5 * iResolution.xy) / iResolution.y;\n    pixel *= rotate2d(iTime * SCENE_ROTATION_SPEED);\n    vec2 trans = vec2(pixel.x / pixel.y, 1.0 / log(abs(pixel.y)));\n    trans *= rotate2d(iTime * PLANE_ROTATION_SPEED);    \n    trans *= SCALE;\n    \n    float value = (1.0 - pow(sin(trans.x), 20000.0)) * sign(cos(trans.x));\n    value *= (1.0 - pow(sin(trans.y), 20000.0)) * sign(cos(trans.y));\n    value = (value + 1.0) / 2.0;\n\n    // apply air perspective\n    value *= abs(pixel.y * 2.0);\n    fragColor = vec4(vec3(value),1.0);\n}\n","name":"Image","description":"","type":"image"}]}