{"ver":"0.1","info":{"id":"dldSRB","date":"1685631775","viewed":125,"name":"Fractal Snowflake","username":"sjz1","description":"another style","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["fractal","snowflake"],"hasliked":0,"parentid":"DtsGWH","parentname":"snowflake fractal SDF"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0,uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec2 f( vec2 z, vec2 c )\n{\n\treturn abs(cPow(z,vec2(3,0)))-exp(1.)*abs(z)+c;\n}\n\nvec2 df( vec2 z, vec2 c )\n{\n\tvec2 e = vec2(0.001,0.0);\n    return cDiv( f(z,c) - f(z+e,c), e );\n}\n\nvec4 color(vec2 pos){\n    vec2 pos0=pos;\n\n    const int S=256;\n    pos=rot(pos,-PI/6.);\n    pos=rotClamp(pos,6);\n    \n    const vec2 offset=vec2(0.1,0.);\n    pos+=offset;\n    pos=rot(pos,-PI/4.);\n    pos-=offset;\n    \n    vec2 z1=pos;\n    vec2 p=abs(pos+vec2(0.25,-1.125));\n\n    vec2 dz = vec2( 1.0, 0.0 );\n    int j=0;\n    for(int i=0;i<=S;i++){\n\t\tj=i;\n        if( dot(z1,z1)>100000.0 ) break;\n\n        // chain rule for derivative\t\t\n\t\tdz = cMul( dz, df( z1, p ) );\n\n        // function\t\t\n\t\tz1 = f( z1, p );\n\n    }\n\tfloat h = 0.5*log(dot(z1,z1))*sqrt( dot(z1,z1)/dot(dz,dz));\n    \n    vec3 color=vec3(float(j)/255.*10.)*clamp(1.-abs(1.-h*500000.)*0.0125,0.,1.);\n\n    return vec4(color,1);\n}\nconst int AA=16;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    fragColor=texture(iChannel0,fragCoord/iResolution.xy);\n    if(iFrame>AA*AA){\n        return;\n    }\n    float x0=mod(float(iFrame),float(AA))/float(AA);\n    float y0=floor(float(iFrame)/float(AA))/float(AA);\n\n    vec2 uv = 2.*fragCoord/iResolution.xy-1.;\n\n    uv.x*=iResolution.x/iResolution.y;\n    uv+=vec2(x0,y0)/vec2(iResolution);\n\n    // Output to screen\n    fragColor*=float(iFrame);\n    fragColor += color(2.*uv);\n    fragColor/=float(iFrame+1);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const float PI=3.1415926535;\nvec2 rot(vec2 a,float theata){\n    return a.xx*vec2(cos(theata),sin(theata))+a.yy*vec2(-sin(theata),cos(theata));\n}\nvec2 cMul(vec2 a, vec2 b) {\n\treturn vec2(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x);\n}\nvec2 cLog(vec2 a) {\n\tfloat b =  atan(a.y,a.x);\n\tif (b<0.0) b+=2.0*3.1415926535;\n\treturn vec2(log(length(a)),b);\n}\nvec2 cExp(vec2 z) {\n\treturn exp(z.x) * vec2(cos(z.y), sin(z.y));\n}\nvec2 cPow(vec2 z, vec2 a) {\n\treturn cExp(cMul(cLog(z), a));\n}\nvec2 cDiv(vec2 a, vec2 b){\n  float d = dot(b,b);\n  return vec2(dot(a,b),a.y*b.x-a.x*b.y)/d;\n}\nvec2 rotClamp(vec2 pos,int n){\n    float alpha=-atan(pos.x,pos.y);\n    float tmp=PI/float(n);\n    return abs(rot(pos,-alpha+mod(alpha,2.*tmp)-tmp));\n}","name":"Common","description":"","type":"common"}]}