{"ver":"0.1","info":{"id":"dtG3WG","date":"1684613187","viewed":82,"name":"Simplified Double Grid.","username":"FryeUE","description":"I was impressed by Kaiware007's Cyber Fuji shader. I also did a simple, bottom grid here, https://www.shadertoy.com/view/ctGGDG\nMight find the bottom grid to be easier to experiment with. I still have alot of work on this one. Enjoy ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["simple","grid","educational","easy","minimal"],"hasliked":0,"parentid":"ctGGDG","parentname":"Simplified Grid"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* Based on Cyber Fuji 2020 I basically tore out the grid and simplified it \nfor experimentation and manipulation. This version is not nearly as refined as the \ntalented kaiware007 version, it is good to contrast and figure out the subtle\ndetails that makes kaiware such a good take.\n\nSwap // to see different effects of things anywhere you see.\n//\n-> active code\n|\n->//inactive code\n\n\n*/\n\nfloat grid(vec2 uv){\n\n// size.y effects brightness in smoothstep below\n//    vec2 size = vec2(uv.y, uv.y * uv.y) * .008;\n    vec2 size = vec2(uv.y, uv.y * uv.y * .2) * .01;\n\n    // speed of grid movement, alter float number\n    uv.y += iTime * 4.;\n    \n// Angle change also effects color/glow slightly    \n//    uv = abs(fract(uv));\n    uv = abs(fract(uv)) - .05;\n\n    // size variable can be manipulated for interesting results\n    vec2 lines = smoothstep(size, vec2(0.), uv);\n    lines += smoothstep(size * 2., vec2(0.), uv) * .05;\n\n// Horizon blured by 'clamp',\n    return lines.x + lines.y;\n//    return clamp(lines.x + lines.y, 0.0, 1.0);\n    }\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord -.5 * iResolution.xy)/iResolution.y;\n    //lazy shift, will update later with better implementation\n    \n    //starting color\n    vec3 col = vec3(.0,.1,.2);\n    \n    //Messy, just experiment\n    uv.y = 3. / (abs(uv.y)) + .1;\n        //uv.y = 2.5 / (abs(uv.y + .2) + .1);\n        \n    //Pattern multiplication, see Book of Shaders, patterns chapter\n    uv.x *= uv.y; // * 1.;\n\n    //Line creation.      \n    float gridVal = grid(uv);\n    col = mix(col, vec3(1.,0.5,1.), gridVal);\n     \n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}