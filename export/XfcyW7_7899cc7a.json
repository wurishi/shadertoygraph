{"ver":"0.1","info":{"id":"XfcyW7","date":"1730720810","viewed":103,"name":"Frequency extraction","username":"trino_dev","description":"should be a simulator of putting different colored filters in front of a camera\nno idea if it's correct or not, but it looks like what I needed ","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["2d","mouse","filter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//const vec3 targetRGB = vec3(1,0,0);\nconst float threshold = 0.05;\n\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec3 getGreyscale(vec3 c)\n{\n    //float x = length(c * vec3(0.2126,0.7152,0.0722));\n    //return vec3(x,x,x);\n    return vec3(rgb2hsv(c).z);\n}\n\nvec3 getColor(vec2 coords){\n\tvec2 uv = coords / iResolution.xy;\n\tuv.y = 1.0-uv.y;\n\treturn texture(iChannel0, uv).rgb;\n}\n\nvec3 getTarget(float time){\n    float h = sin(time)*0.5+0.5;\n    vec3 hsv = vec3(h,1,1);\n    return hsv2rgb(hsv);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec3 ogRGB = getColor(fragCoord.xy);    \n\n    vec3 targetRGB = getTarget(iTime*0.5);\n    \n    vec3 ogHSV = rgb2hsv(ogRGB);\n    vec3 targetHSV = rgb2hsv(targetRGB);\n        \n    vec3 filteredColor = ogRGB * targetRGB;\n    //vec3 finalColor = filteredColor;\n    vec3 finalColor = getGreyscale(filteredColor);\n    \n    //filtered\n    fragColor = vec4(finalColor, 1);\n    \n    //original\n    vec2 mouse = iMouse.xy;        \n    if(ivec2(mouse) == ivec2(0))\n        mouse = iResolution.xy * 0.5;\n    \n    if(fragCoord.x > mouse.x)\n        fragColor = vec4(ogRGB,1);\n    \n    //filter\n    if(fragCoord.x < 20.0 && fragCoord.y < 20.0)\n        fragColor = vec4(targetRGB,1);\n\t\n}","name":"Image","description":"","type":"image"}]}