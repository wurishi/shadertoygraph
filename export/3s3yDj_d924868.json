{"ver":"0.1","info":{"id":"3s3yDj","date":"1601683791","viewed":74,"name":"Simple Mandelbrot Renderer","username":"space928","description":"Just a quick and simple mandelbrot set renderer, nothing particularly special about it.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Thomas M.\nconst int testIters = 512;\nconst vec2 zoomVec = vec2(0.348,0.5);\n\n//Taken from: https://www.chilliant.com/rgb2hsv.html\nvec3 hueToRgb(float H)\n{\n    float R = abs(H * 6. - 3.) - 1.;\n    float G = 2. - abs(H * 6. - 2.);\n    float B = 2. - abs(H * 6. - 4.);\n    return clamp(vec3(R,G,B), 0., 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.yy;\n    uv = uv*2.-1.;\n    uv.x -= 1.5;\n    \n    //Zoom in\n    uv /= exp(iTime);\n    uv += zoomVec;\n\n    //Z is a complex number and must be treated as such and not as a standard vector\n    vec2 z = vec2(0.);\n    float outp = 0.;\n    for(int i = 0; i < testIters; i++)\n    {\n        //z = z^2 + uv\n        float zxPrev = z.x;\n        z.x = z.x*z.x - z.y*z.y;\n        z.x += uv.x;\n        z.y = 2.*z.y*zxPrev;\n        z.y += uv.y;\n        \n        if(length(z) <= 2.0)\n            outp += 1./float(testIters);\n    }\n    \n    vec3 col = hueToRgb(fract(outp));\n    \n    /*if(length(z) > 2.0)\n        col = vec3(0.);\n    else\n        col = vec3(1.);*/\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}