{"ver":"0.1","info":{"id":"NsGXRw","date":"1634387915","viewed":145,"name":"smoothstep AA test","username":"curena","description":"Smoothstep-based antialiasing test for overlapping ribbons with alternating priorities in overlaps","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["test","distance"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Smoothstep AA test for overlapping ribbons with alternating priorities in overlaps\n// ----\n\nconst float w  = 0.035 ;   // ribbons width (including edge)\nconst float e  = 0.002 ;  // ribbons edge width \n\nfloat delta  ; // half the width of a pixel in world coordinates \n\n\nconst vec3 edc1 = vec3( 0.0, 0.0, 1.0 ); // edge color 1(distance in [w-e,w])\nconst vec3 ric1 = vec3( 1.0, 1.0, 0.0 ); // ribbon color 1 (distance < w-e)\n\nconst vec3 edc2 = vec3( 1.0, 0.0, 0.0 ); // edge color 2 (distance in [w-e,w])\nconst vec3 ric2 = vec3( 0.6, 1.0, 1.0 ); // ribbon color 2 (distance < w-e)\n\n// -----------------------------------------------------------------------\n\nvec3 RibbonFunc( float d, vec3 ric, vec3 edc, vec3 bgc )\n{\n    const bool  use_ss = true ;\n    \n    float step_w   = use_ss ? smoothstep( w-delta, w+delta, d )         : step( w, d );\n    float step_wme = use_ss ? smoothstep( (w-e)-delta, (w-e)+delta, d ) : step( w-e, d );\n    \n    float bgf = step_w ;\n    float edf = step_wme - step_w ;\n    float rif = 1.0-step_wme ;\n    \n    return bgf*bgc + edf*edc + rif*ric ;\n}\n\n// -----------------------------------------------------------------------\n\nvec3 PatternColor( vec2 p )\n{\n    // compute background color pattern \n    float b   = mod( floor(p.x*20.0) + floor(p.y*20.0) , 2.0 );    \n    vec3  bgc = b*vec3( 0.8, 0.8, 0.8 ) + (1.0-b)*vec3( 0.7, 0.7, 0.7 ) ;\n    \n    // constants which define the geometry\n    const vec2  c1 = vec2( -0.2, -0.1 );\n    const vec2  c2 = vec2( 0.1, 0.1 );\n    const float r1 = 0.3 ;\n    const float r2 = 0.26 ;\n   \n    // compute the two ribbons SDFs \n    float d1 = abs( length(p-c1) - r1)  ;\n    float d2 = abs( length(p-c2) - r2)  ;\n    \n    // compute color depending on d1,d2 and priority\n    return  0.0 <= dot( p-c1, vec2( (c2-c1).y, (c1-c2).x ) ) \n            ? RibbonFunc( d1, ric1, edc1, RibbonFunc( d2, ric2, edc2, bgc ) ) \n            : RibbonFunc( d2, ric2, edc2, RibbonFunc( d1, ric1, edc1, bgc ) );     \n}\n       \n\n// --------------------------------------------------------------------------------    \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    delta     = 0.5*(2.0/iResolution.y) ;\n    fragColor = vec4( PatternColor( (fragCoord/iResolution.yy)-vec2(0.5*iResolution.x/iResolution.y,0.5) ), 1.0 );\n}","name":"Image","description":"","type":"image"}]}