{"ver":"0.1","info":{"id":"ctXGDH","date":"1671665737","viewed":163,"name":"Fractal Mirror","username":"playersteve19","description":"a visual input-reactive fractal that depends on the color values of the input image or video to create the fractal. ","likes":2,"published":1,"flags":2,"usePreview":0,"tags":["fractal","filter","webcam","glitchy","nightmarefuel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    int iterations=2;//starts to get noisy when above 4 \n\n    vec3 col=texturenice(iChannel0,uv).rgb;\n    for(int j=0; j<iterations ;j++)\n    {\n    uv=fract(mix(uv,col.rg,col.b));\n    col=texturenice(iChannel0,uv).rgb;\n    }\n    //col=vec3(uv,0);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//thanks once again to IÃ±igo Quilez. \nvec4 texturenice( sampler2D sam, vec2 uv )\n{\n    float textureResolution = float(textureSize(sam,0).x);\n    uv = uv*textureResolution + 0.5;\n    vec2 iuv = floor( uv );\n    vec2 fuv = fract( uv );\n    uv = iuv + fuv*fuv*(3.0-2.0*fuv);\n    uv = (uv - 0.5)/textureResolution;\n    return texture( sam, uv );\n}","name":"Common","description":"","type":"common"}]}