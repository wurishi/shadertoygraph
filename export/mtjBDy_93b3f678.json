{"ver":"0.1","info":{"id":"mtjBDy","date":"1694469240","viewed":124,"name":"Fork Blue Noise vs OETF","username":"Carandiru","description":"fork shader reply showing the difference of dithering before gamma correction (green) and after gamma correction (red), and original.","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["dither","gamma","dithering","bluenoise","srgb","oetf"],"hasliked":0,"parentid":"mtScWm","parentname":"Blue Noise Dithering vs OETF 2.2"},"renderpass":[{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 3. * (fragCoord - .5*iResolution.xy) / iResolution.y;\n   // uv *= 0.333f;\n    \n    float bn_threshold = 1.0f + fract(iTime * 0.6666666666f);\n    \n    // Wavy pattern\n    float f = cos(6.28 * (uv.x*uv.x*uv.x+uv.y*uv.y*uv.y))*.5+.5;\n    \n    float luma = f; // save luminance\n    \n    vec3 c = vec3(0);\n    \n    if (mod(iTime, 6.) < 1.5) { // Dither (linear space)\n            \n        if ( all(greaterThan(uv, vec2(2.5f, 1.33f))) ) {\n            c.g = 1.0f;\n        }\n        \n        // dithering applied *before* gamma correction (green)\n        c.b = floor(textureLod(iChannel0, fragCoord / vec2(textureSize(iChannel0, 0)), 0.0f).x * bn_threshold) / bn_threshold;\n        f = f + f * c.b;\n        f = f * luma/f;\n    \n        // OETF 2.2 (Gamma)\n        f = pow(f, (1. / 2.2));\n    }\n    else if (mod(iTime, 6.) < 3.0) { // Dither (gamma space)\n    \n        if ( all(greaterThan(uv, vec2(2.5f, 1.33f))) ) {\n            c.r = 1.0f;\n        }\n        \n        // OETF 2.2 (Gamma)\n        f = pow(f, (1. / 2.2));\n        \n        // dithering applied *after* gamma correction (red)\n        c.b = floor(textureLod(iChannel0, fragCoord / vec2(textureSize(iChannel0, 0)), 0.0f).x * bn_threshold) / bn_threshold;\n        f = f + f * c.b;\n        f = f * luma/f;\n    }\n    else {\n        // OETF 2.2 (Gamma)\n        f = pow(f, (1. / 2.2));\n    }\n    \n    c = mix(f + mix(vec3(0), c, bvec3(uv.y < 0.0f)), vec3(c.rg, 0), vec3(c.rg, 0));\n    \n    fragColor = vec4(c, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}