{"ver":"0.1","info":{"id":"4fcfDn","date":"1732904997","viewed":38,"name":"busy bees","username":"pb","description":"fractal formation","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal"],"hasliked":0,"parentid":"4cKcWV","parentname":"fractal bed bugs"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define too_small 1e-7\n\nvoid mainImage0( out vec4 O, vec2 u )\n{\n    vec2  R =  iResolution.xy, m=iMouse.xy, z,\n          U = ( u+u - R )/ R.y / (1.+min(7.,mod(iTime,15.))) ,\n          M = iMouse.z>0.\n          ? vec2( 1. - iMouse.x / R.x * 3.2, 0) \n          : vec2( -1.845, 0);\n          \n    float i = 0.;\n    \n    z=U;  //Julia set: input is each pixel coordinate\n\n    for ( O *= 0. ; i++ < (2.+mod(iTime*8.,15.*8.)) && dot(z,z) < 1e8 ; ) {\n        \n        float modz2 = z.x*z.x*z.x*z.x \n                    + z.y*z.y*z.y*z.y \n                    + 2.*z.x*z.x*z.y*z.y;\n                    \n        modz2 =  max(modz2,too_small);\n        \n        z = mix(\n                vec2(z.x*z.x-z.y*z.y,-2.*z.x*z.y)/modz2,\n                vec2(z.x*z.x-z.y*z.y,2.*z.x*z.y),\n                2e-6)\n            + M;\n               \n    }\n    \n    vec2 cc = sin( log( abs(z) ) * vec2(1.3,.1) ) ;\n    cc *= cc;\n        \n    float aa = atan(z.y,z.x);\n    aa = sin(aa*.5);\n    aa *= aa;\n    \n    vec3 ccc = vec3(1,.8,0)*cc.x +\n               vec3(.5,.2,1)*cc.y +\n               vec3(.2,.5,1)*aa;\n               \n\n    O = vec4(ccc,0);\n    \n    O = O*O*(3.-2.*O);\n\n\n}\n\n//FabriceNeyret2 antialiasing trick\nvoid mainImage(out vec4 O, vec2 U) {\n    mainImage0(O,U);\n    if ( fwidth(length(O)) > .01 ) {  // difference threshold between neighbor pixels\n        vec4 o;\n        for (int k=0; k < 9; k+= k==3?2:1 )\n          { mainImage0(o,U+vec2(k%3-1,k/3-1)/3.); O += o; }\n        O /= 9.;\n        //O.b++;                        // uncomment to see where the oversampling occurs\n    }\n}\n","name":"Image","description":"","type":"image"}]}