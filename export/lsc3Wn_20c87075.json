{"ver":"0.1","info":{"id":"lsc3Wn","date":"1448910188","viewed":320,"name":"Rainbow Reflect Normal Sphere Fi","username":"cabbibo","description":"Trying to get to understand structs a bit more... As you can see, I am failing, but as usual, with shaders, even failure is fun.","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["spheres","normal","reflect","oprep"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"// The MINIMIZED version of https://www.shadertoy.com/view/Xl2XWt\n\n\nconst float MAX_TRACE_DISTANCE = 20.0;           // max trace distance\nconst float INTERSECTION_PRECISION = 0.0001;        // precision of the intersection\nconst int NUM_OF_TRACE_STEPS = 100;\n\nstruct Material\n{\n  float reflectivity;\n  float ambient;\n  vec3  color;\n};\n    \n    \nstruct Ray{\n    vec3 color;\n\tvec3 currentPos;\n    vec3 currentDir;\n    vec3 lastPos;\n    vec3 lastDir;\n    float power;\n    float stepsTaken;\n    float timesReflected;  \n    float complete;\n};\n\n\n\n\n\n//----\n// Camera Stuffs\n//----\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\n// checks to see which intersection is closer\n// and makes the y of the vec2 be the proper id\nvec2 opU( vec2 d1, vec2 d2 ){\n    \n\treturn (d1.x<d2.x) ? d1 : d2;\n    \n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) +\n         length(max(d,0.0));\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\n\n//--------------------------------\n// Modelling \n//--------------------------------\nvec2 map( vec3 pos ){  \n    \n    pos -= vec3( 0., 0. , iTime * .1 );\n    \n    vec3 modVal =  vec3( .4 , .4 , .4 );\n    vec3 q = mod( pos , modVal ) - modVal / 2.;\n \tvec2 res = vec2( sdSphere( q - vec3( 0. , 0. , 0. ) , .1 ) , 1. ); \n    return res;  \n    \n}\n\n//The inverse model, so that we can properly refract\nvec2 iMap( vec3 pos ){  \n    \n    pos -= vec3( 0., 0. , iTime * .1 );\n    \n    vec3 modVal =  vec3( .4 , .4 , .4 );\n    vec3 q = mod( pos , modVal ) - modVal / 2.;\n \tvec2 res = vec2( sdSphere( q - vec3( 0. , 0. , 0. ) , .1 ) , 1. ); \n    return res;  \n    \n}\n\n\n\nvec3 calcIntersection( in vec3 ro, in vec3 rd ){\n\n    \n    float h =  INTERSECTION_PRECISION*2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    float id = -1.;\n   \tfloat stepsTaken = 0.;\n    \n    for( int i=0; i< NUM_OF_TRACE_STEPS ; i++ ){\n        \n        if( h < INTERSECTION_PRECISION || t > MAX_TRACE_DISTANCE ) break;\n\t   \tvec2 m = map( ro+rd*t );\n        h = m.x;\n        t += h;\n        id = m.y;\n        stepsTaken = float( i );\n        \n    }\n\n    if( t < MAX_TRACE_DISTANCE ) res = t;\n    if( t > MAX_TRACE_DISTANCE ) id =-1.0;\n    \n    return vec3( res , id , stepsTaken );\n    \n}\n\nvec3 calcIIntersection( in vec3 ro, in vec3 rd ){\n\n    \n    float h =  INTERSECTION_PRECISION*2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    float id = -1.;\n   \tfloat stepsTaken = 0.;\n    \n    for( int i=0; i< NUM_OF_TRACE_STEPS ; i++ ){\n        \n        if( h < INTERSECTION_PRECISION || t > MAX_TRACE_DISTANCE ) break;\n\t   \tvec2 m = iMap( ro+rd*t );\n        h = m.x;\n        t += h;\n        id = m.y;\n        stepsTaken = float( i );\n        \n    }\n\n    if( t < MAX_TRACE_DISTANCE ) res = t;\n    if( t > MAX_TRACE_DISTANCE ) id =-1.0;\n    \n    return vec3( res , id , stepsTaken );\n    \n}\n\n\n\n\n// Calculates the normal by taking a very small distance,\n// remapping the function, and getting normal for that\nvec3 calcNormal( in vec3 pos ){\n    \n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\n\n\n// Takes in a ray, and \n// gives back a new ray w/ info!\nRay shootRay( Ray ray ){\n    \n    vec3 res = calcIntersection( ray.currentPos , ray.currentDir );\n    \n    if( res.y >= 0. ){\n        \n    \n    \tvec3 pos = ray.currentPos + ray.currentDir * res.x;\n        vec3 nor = calcNormal( pos );\n        //float ao = calcAO( pos , norm );\n        \n        vec3 refl = reflect( ray.currentDir , nor );\n        vec3 refr = refract( ray.currentDir , nor , 1. / 1.2 );\n    \n    \n   \t \tfloat newSteps = ray.stepsTaken + res.z;\n        \n        vec3 color = nor * .5 + .5;\n        return Ray(\n            \t\tcolor,\n                    pos + refl * INTERSECTION_PRECISION * 2.,\n                    refl,\n                    ray.currentPos,\n                    ray.currentDir,\n                    ray.power - .8,\n                    newSteps,\n                    ray.timesReflected + 1.,\n                    0.\n        \t\t);\n        \n        \n        \n        \n    }else{\n        \n        // If it didn't hit anything, lets follow it to the end\n        vec3 pos = ray.currentPos + ray.currentDir * MAX_TRACE_DISTANCE;\n        \n        return Ray( \n            vec3( 1. ),\n            pos, \n            ray.currentDir ,\n            ray.lastPos,\n            ray.lastDir ,\n            ray.power , \n            ray.stepsTaken,\n            ray.timesReflected,\n            1.\n         );\n        \n    }\n    \n    \n    \n    \n}\n\n\nvec3 render( vec3 ro , vec3 rd ){\n \n\n  \n   Ray ray = Ray( vec3( 0. ),  ro , rd , ro , rd , 1. ,0.,0.,0.);\n    \n   vec3 col = vec3( 0. );\n    \n   for( int i = 0; i < 10; i++ ){\n    \n   \tRay newRay = shootRay( ray );\n       \n    if( newRay.power <= 0. || newRay.complete == 1. ){\n        \n      col = newRay.color ;\n      break;\n           \n    }\n       \n    ray = newRay;\n       \n   \n   }\n    \n    \n   return col;\n   \n    \n}\n\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n\n    vec3 ro = vec3( 0., 0., 2.);\n    vec3 ta = vec3( 0. , 0. , 0. );\n    \n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  // 0.0 is the camera roll\n    \n\t// create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy,2.0) ); // 2.0 is the lens length\n    \n  \tvec3 color = render( ro , rd );\n    \n\tfragColor = vec4(color,1.0);\n\n    \n    \n}","name":"","description":"","type":"image"}]}