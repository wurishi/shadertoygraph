{"ver":"0.1","info":{"id":"NsGBDR","date":"1657922772","viewed":74,"name":"weird rgb rotating squares","username":"fiiisssh","description":"???","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["rotate"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    \n    return mat2(c, -s, s, c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = vec3(0.0);\n    \n    // dividing the coordinate space\n    // into a grid\n    float grid_scale = 5.0;\n    vec2 gv = fract(uv * grid_scale) - 0.5;\n    \n    // each UV grid cell forms a blurry top right corner\n    // with two colors\n    //col.rg += gv;\n    \n    // applying smoothstep and rotating this, we get a cool effect\n    col.rg += smoothstep(0.38, 0.4, rot(degrees(iTime / 35.0)) * gv);\n    \n    // a phase shift completes the square\n    col.rb += smoothstep(0.38, 0.4, -rot(degrees(iTime / 35.0)) * gv);\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}