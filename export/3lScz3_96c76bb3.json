{"ver":"0.1","info":{"id":"3lScz3","date":"1595009008","viewed":90,"name":"Line Integral Sinusoid 1D","username":"spalmer","description":"a simple linear wave summed along a range by calculus.\ncurrently graphing the total integrated along mouse x range","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sinusoid","sinewave","calculus"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Deconstructing blackle's very nifty Analytic Line Integral Fog\n// from https://shadertoy.com/view/3lByRK\n// see 2D toy https://shadertoy.com/view/WtScRc\n// see 3D toy https://shadertoy.com/view/WlByzc\n\n// CC0 1.0 Universal license https://creativecommons.org/publicdomain/zero/1.0\n// To the extent possible under law, Sean L. Palmer has waived \n// all copyright and related or neighboring rights to this work.\n\n// Honestly I can't copyright Maxima's math anyway,\n// and I have no idea what I'm doing, really.\n// But I do appreciate attribution if you find it useful.\n// If any of you that actually understand calculus well\n// can elucidate any of this or point out things that \n// could be improved, please, by all means!  ;)\n// Constructive criticism and suggestions welcomed.\n\nconst float pi = acos(-1.);\n\n// the sinusoidal function we're working with, F(x) := sin(x)^2; in Maxima notation.\nfloat F(float x) \n{\n    float s = sin(x);\n\treturn s*s; // s^2\n}\n\n// Maxima, would you please kindly integrate this:\n// integrate(F(x), x, a, b);\n// Maxima says \"can do\" and produces (after a bit of ratsimp(%))\n// -(sin(2*b)-2*b-sin(2*a)+2*a)/4\n// which simplifies to \n// (+2*b-2*a-sin(2*b)+sin(2*a))/4\n// idk why it can't get the signs simplified?!\n    // HACK doesn't total correctly if b > a without abs\n    // could instead swap the inputs in such case or use\n    // the alternative negated expression somehow, but this works fine.\n// compute line integral of F(x) with x ranging between a and b\nfloat A(float a, float b)\n{\n    return abs(.5*(b - a) + .25*(sin(2.*a) - sin(2.*b)));\n}\n\n// Graphmatica says each pi/2 range integrates to .7846...\n// visually I get .785... when expanded A out for 0,pi/2 and graphed\n// so I think this is correct\n\n// wrapper to allow changing implementations and trying various methods out.\n#define lineIntegral A\n\nvoid mainImage(out vec4 o, vec2 p)\n{\n\tfloat t = iTime;\n\tvec2 R = iResolution.xy\n    , mc = iMouse.xy, mo = iMouse.zw\n    , ma = mc, mb = abs(mo)\n    , uv = p/R, q = (2.*p - R) / R.y;\n    // attract mode should wiggle or something TODO\n    if (dot(mo, mo) < 2.) ma = mb = .5 * R;\n    float s = 1./32.;\n\tfloat x = s * p.x\n    , a = s * ma.x, b = s * mb.x\n    ;\n    // base field we're integrating is basically sinusoid\n    // period pi, range 0 to 1\n    float fx = F(x);\n   \n\tvec3 c = vec3(clamp(fx, 0., 1.));\n\t// calc line integral of F(x) between mouse down and current drag points\n\tif (uv.x < 1./40.)\n    {\n    \tfloat li = lineIntegral(a, b);\n        // integral gets large fast and must fit graph into window\n        const float so = .1; //1./10.; //\n        li *= so;\n        if (uv.y <= li) // FIXME smoothstep AA; don't care rn\n\t    \tc = vec3(0,1,0);\n        // graphing a box showing the total integral under the cursor range.\n        // I'm not sure it makes sense as an area!\n    }\n    if (p.x >= min(ma.x, mb.x) && p.x <= max(ma.x, mb.x))\n    \tif (uv.y < 1./24.)\n        \tc = vec3(0,0,1); // show mouse range    \n    // to sRGB gamut for display\n\to = vec4(pow(c, vec3(.4545)), 1);\n}\n\n// Trying to work out the calculus involved, good thing I have coffee!\n\n// Everything mathematical you might want to know is\n// archived on Wikipedia.  Please donate!\n// https://en.wikipedia.org/wiki/Line_integral\n// \"integral where the function to be integrated is evaluated along a curve.\"\n// according to Kwong-Tin Tang citation.  Ok, now how to do it?\n// Says for arbitrary scalar field line integral of F between a and b,\n// is F(r(t))|r'(t)|∂t\n// and then proceeds to discuss vector stuff; I'll get there eventually.\n\n// Honestly wikipedia math notation is often impenetrable;\n// anyway they used d instead of ∂ and I'm not sure who's right,\n// I'm very confused atm.  :)  But I have Maxima handy.\n\n// Maxima (nee Macsyma) is invaluable for my effort.\n// http://maxima.sourceforge.net\n// https://sourceforge.net/projects/maxima\n// At least it knows the proper rules involved, so\n// I have learned to politely request it do my bidding in a few cases,\n// which is far easier than learning and applying said rules myself.\n\n// I really don't know what I would do without those two assistances!\n// Fail, probably.  But hey, I manage somehow.\n\n// Dividing by distance produces an average over the integrated zone;\n// we want the raw sum instead, but it gets large fast and hard to show.\n// Must scale down by so in mainImage\n\n/*\n// my original line of thought led here,\n// but turns out there's a better way,\n// even though I managed to get this to\n// apparently work, ok.\n\n// first derivative of F(x):=sin(x)^2, found by Maxima using diff(F(x),x,1);\nfloat D(float x)\n{\n    //2*cos(x)*sin(x)\n    return 2.*cos(x)*sin(x);\n}\n// Maxima is extraordinarily helpful here\n// as integrate(D(x), x, a, b); yields cos(a)^2-cos(b)^2\n// but it doesn't produce the result I need without some more work.\nfloat I(float a, float b)\n{\n    float ca = cos(a), cb = cos(b);\n    return ca*ca - cb*cb\n\t  + (distance(a, b) * 4. / pi) // HACK using derivative and some intuition\n\t;\n}\n// I think where I went wrong though is I should have integrated\n// F(x) directly, not its derivative.  basically treat\n// the function as if it were a derivative, and simply integrate it\n// over a range.  Luckily Maxima knows how to do that.\n*/\n\n/*\n// Anyway there are some trig double-angle identities\n// which could help, but seems they don't, really.\n// https://en.wikipedia.org/wiki/List_of_trigonometric_identities#Double-angle_formulae\n// says that sin(2.*a) = 2.*sin(a)*cos(a)\n// In that case, F(x) simply integrates over a,b to:\n// .5*(b-a + sin(a)*cos(a) - sin(b)*cos(b))\n//    return abs(.5*(b - a + sin(a)*cos(a) - sin(b)*cos(b))); // less efficient, actually!\n*/\n\n// could perhaps use a+a instead of 2.*a, doesn't matter.  Optimizer can do that.\n\n/*\n// old wrapper, now a #define\nfloat lineIntegral(float a, float b)\n{\n    return A(a, b);\n//    return I(a, b);\n}\n*/\n\n// blackle was doing something like antiderivative(b) - antiderivative(a); idk.\n// It produced a quite complicated vector expression using Wolfram Alpha.\n// I'm not sure I could ever wrangle that back down properly.\n// It's a good thing I know how to use Maxima because otherwise I'd be lost.\n\n","name":"Image","description":"","type":"image"}]}