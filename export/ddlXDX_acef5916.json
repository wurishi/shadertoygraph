{"ver":"0.1","info":{"id":"ddlXDX","date":"1669668230","viewed":130,"name":"Morse Audio","username":"Peace","description":"Morse Audio","likes":3,"published":3,"flags":8,"usePreview":0,"tags":["morseaudio"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = vec3(1.0-step(abs(mainSound(0, iTime).x), 0.0));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// See Common","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"#define PI 3.14159\n#define TWO_PI 6.28318530718\n// Morse code audio frequency\n#define FREQ 800.0\n\nconst float DL = 0.05; // Dot (dit) length\nconst float SL = DL; // Space length\nconst float LS = DL * 3.0; // Letter space length\nconst float WS = DL * 7.0; // Word space length\nconst float _L = DL * 3.0; // Dash (dah) length\n\nfloat ct = 0.0; //Current time\nfloat st = 0.0; //Start time used for note timings\nstruct Wave\n{\n    float frequency;\n    float amplitude;\n    float phase;\n};\n\n//Play frequency 'freq' for duration 'd'\nfloat f(float freq, float d)\n{\n    float fq = (ct >= st && ct < (st + d)) ? freq : 0.0;\n    st += d;\n    return fq;\n}\n\n//Pause for duration 'd'\nfloat p(float d)\n{\n    st += d;\n    return 0.0;\n}\n\n//Makes a wave from frequency, amplitude and time\nfloat w(Wave w)\n{\n    return w.amplitude * sin(w.phase * w.frequency * TWO_PI);\n}\n\nfloat log10(float x)\n{\n    return log(x) / log(10.0);\n}\n\nfloat dit()\n{\n    return f(FREQ, DL) + p(SL);\n}\n\nfloat dah()\n{\n    return f(FREQ, _L) + p(SL);\n}\n\nfloat ls()\n{\n    return p(LS - SL);\n}\n\nfloat ws()\n{\n    return p(WS - SL);\n}\n\nfloat A()\n{\n    return dit() + dah() + ls();\n}\n\nfloat B()\n{\n    return dah() + dit() + dit() + dit() + ls();\n}\n\nfloat C()\n{\n    return dah() + dit() + dah() + dit() + ls();\n}\n\nfloat D()\n{\n    return dah() + dit() + dit() + ls();\n}\n\nfloat E()\n{\n    return dit();\n}\n\nfloat F()\n{\n    return dit() + dit() + dah() + dit() + ls();\n}\n\nfloat G()\n{\n    return dah() + dah() + dit() + ls();\n}\n\nfloat H()\n{\n    return dit() + dit() + dit() + dit() + ls();\n}\n\nfloat I()\n{\n    return dit() + dit() + ls();\n}\n\nfloat J()\n{\n    return dit() + dah() + dah() + dah() + ls();\n}\n\nfloat K()\n{\n    return dah() + dit() + dah() + ls();\n}\n\nfloat L()\n{\n    return dit() + dah() + dit() + dit() + ls();\n}\n\nfloat M()\n{\n    return dah() + dah() + ls();\n}\n\nfloat N()\n{\n    return dah() + dit() + ls();\n}\n\nfloat O()\n{\n    return dah() + dah() + dah() + ls();\n}\n\nfloat P()\n{\n    return dit() + dah() + dah() + dit() + ls();\n}\n\nfloat Q()\n{\n    return dah() + dah() + dit() + dah() + ls();\n}\n\nfloat R()\n{\n    return dit() + dah() + dit() + ls();\n}\n\nfloat S()\n{\n    return dit() + dit() + dit() + ls();\n}\n\nfloat T()\n{\n    return dah() + ls();\n}\n\nfloat U()\n{\n    return dit() + dit() + dah() + ls();\n}\n\nfloat V()\n{\n    return dit() + dit() + dit() + dah() + ls();\n}\n\nfloat W()\n{\n    return dit() + dah() + dah() + ls();\n}\n\nfloat X()\n{\n    return dah() + dit() + dit() + dah() + ls();\n}\n\nfloat Y()\n{\n    return dah() + dit() + dah() + dah() + ls();\n}\n\nfloat Z()\n{\n    return dah() + dah() + dit() + dit() + ls();\n}\n\nfloat w(float freq)\n{\n    return freq + ws();\n}\n\nvec2 mainSound( int samp, float time )\n{\n    ct = time;\n    float amplitude = 0.1;\n    float frequency = ws() + w(W() + H() + A() + T()) + w(A() + R() + E()) + w(Y() + O() + U()) + w(D() + O() + I() + N() + G());\n    \n    Wave w1 = Wave(frequency * 1., amplitude * 1.0, time);\n    \n    vec2 r = vec2(w(w1));\n    \n    return r * 0.2;\n}                            ","name":"Common","description":"","type":"common"}]}