{"ver":"0.1","info":{"id":"ldfBDS","date":"1497793112","viewed":214,"name":"infinite candyland (melting)","username":"nexor","description":"raymarched twisted cylinders.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.141569\n#define pi2 (pi*2.)\n#define up vec3(.0,1.,.0)\n#define sin1(x) (sin(x)*.5+.5)\n#define cos1(x) (cos(x)*.5+.5)\n#define saw(x) (abs(fract((x))*4.-2.)-1.)\n#define rpt(x,c) (mod(x,c)-.5*c)\n\n\nmat2 rot2(float a)\n{\n\tfloat c=cos(a),s=sin(a);\n\treturn mat2(c,-s,s,c);\n}\n\nmat3 rot(float a,float x,float y,float z)\n{\n\tfloat s=sin(a),c=cos(a);\n\treturn mat3(\n\t\tx+c*y+c*z,s*z,s*y,\n\t\t-s*z,y+c*x+c*z,s*x,\n\t\t-s*y,-s*x,z+c*x+c*y);\n}\n\nfloat plane(vec3 p,vec3 n,float d)\n{\n\treturn dot(p,n)+d;\n}\n\nfloat sphere(vec3 p,float r)\n{\n\treturn length(p)-r;\n}\n\nfloat box(vec3 p,vec3 b)\n{\n\treturn length(max(abs(p)-b,vec3(.0)));\n}\n\nfloat box(vec3 p,float b)\n{\n\treturn box(p,vec3(b));\n}\n\nfloat cylinder(vec3 p,vec3 c)\n{\n\treturn length(p.yz-c.xy)-c.z;\n}\n\nvec2 opU(vec2 a,vec2 b)\n{\n\treturn mix(b,a,step(a.x,b.x));\n}\n\nvec2 map(vec3 p)\n{\n\tfloat m=-1.;\n\tvec3 q=p;\n\tvec2 res=vec2(-1.);\n\tp.y-=-abs(sin(p.z*3.+iTime*.25))*.5\n\t+sin(iTime*2.+p.x*1.5+p.z*.2)*.1\n\t;\n\tres=vec2(100.,m++);\n\tres=opU(res,vec2(plane(p,up,1.),m++));\n\tq-=vec3(.0,3.,-20.);\n    \n\tq.xz*=rot2(pi/4.);\n\tq.z=rpt(q.z,5.);\n    q.y-=sin(q.x)*.5;\n    q.x-=iTime*.2;\n\tp=q;\n\tq.z-=cos(q.x*3.)*.3;\n\tq.y-=sin(q.x*3.)*.3;\n\tres=opU(res,vec2(\n\t\tcylinder(q,vec3(.2)),m++));\n\tq=p;\n\tq.x-=1.5;\n\tq.z-=cos(q.x*3.)*.3;\n\tq.y-=sin(q.x*3.)*.3;\n\tres=opU(res,vec2(\n\t\tcylinder(q,vec3(.2)),m++));\n\tq=p;\n\tq.x-=1.;\n\tq.z-=cos(q.x*3.)*.3;\n\tq.y-=sin(q.x*3.)*.3;\n\tres=opU(res,vec2(\n\t\tcylinder(q,vec3(.2)),m++));\n\tq=p;\n\tq.x-=.5;\n\tq.z-=cos(q.x*3.)*.3;\n\tq.y-=sin(q.x*3.)*.3;\n\tres=opU(res,vec2(\n\t\tcylinder(q,vec3(.2)),m++));\n\treturn res;\n}\n\nvec3 norm(vec3 p)\n{\n\tvec2 e=vec2(1.,-1.)*.5773*.00125;\n\treturn normalize(\n\t\te.xyy*map(p+e.xyy).x+\n\t\te.yxy*map(p+e.yxy).x+\n\t\te.yyx*map(p+e.yyx).x+\n\t\te.xxx*map(p+e.xxx).x);\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n\trd=normalize(rd);\n\tfloat res = 1.0;\n\tfor( float t=mint; t < maxt; )\n\t{\n\t\tfloat h = map(ro + rd*t).x;\n\t\tif( h<0.00025 ) return 0.0;\n\t\tres = min( res, k*h/t );\n\t\tt += h*.5;\n\t}\n\treturn res;\n}\n\nmat3 material(float m)\n{\n\tmat3 colm=mat3(.0);\n\tcolm[0]=vec3(1.,cos1(m*pi/6.),.0);\n\tcolm[1]=vec3(.5*cos1(m*pi/4.),sin1(m*pi/2.),sin1(m*pi/2.+pi/4.));\n\tcolm[2]=vec3(1.);\n\treturn colm;\n}\n\nvec3 shade(vec3 lig,vec3 p,vec3 rd,vec3 nor,float tmin,float tmax,float spec,float k)\n{\n\tfloat a=1.;\n\tfloat d=max(dot(nor,-lig),.0);\n\tfloat s=pow(max(dot(rd,reflect(-lig,nor)),.0),spec);\n\treturn vec3(a,d,s)*softshadow(p,-lig,tmin,tmax,k);\n}\n\nvec3 color(float m,vec3 ro,vec3 rd,float t,float tmin,float tmax)\n{\n\tvec3 col=vec3(.0);\n\tvec3 p=ro+t*rd;\n\tvec3 nor=norm(p);\n\tmat3 mtr=material(m);\n\tvec3 lig1=normalize(vec3(6.,-5.,-6.));\n\tvec3 lig2=normalize(vec3(-8.,-7.,3.5));\n\tcol+=mtr*\n\t\t(shade(lig1,p,rd,nor,tmin,tmax,60.,5.)\n\t\t+shade(lig2,p,rd,nor,tmin,tmax,90.,2.)\n\t\t)*vec3(.3,.3,1.);\n\treturn col;\n}\n\nvec3 render(vec3 ro, vec3 rd)\n{\n\tvec3 col=vec3(.5);\n\n\tfloat tmin=.0;\n\tfloat tmax=90.;\n\n\tfloat t=tmin;\n\tfloat m=-1.;\n\tfor(float i=0.;i<25.;i++)\n\t{\n\t\tfloat precis=.00125*t;\n\t\tvec2 res=map(ro+t*rd);\n\t\tif(res.x<precis||t>tmax)break;\n\t\tt+=res.x*.5;\n\t\tm=res.y;\n\t}\n\tm=mix(-1.,m,step(t,tmax));\n\tcol=color(m,ro,rd,t,tmin,tmax);\n\tcol=mix(vec3(.8,.9,1.),col,exp(-t*t*.0007));\n\treturn col;\n}\n\nmat3 camera(vec3 ro, vec3 ta, float cr)\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr),cos(cr),.0);\n\tvec3 cu = normalize(cross(cw,cp));\n\tvec3 cv = normalize(cross(cu,cw));\n\treturn mat3(cu,cv,cw);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy/iResolution.xy;\n\tvec3 col = vec3(.0);\n\tvec2 p=(-iResolution.xy+2.*fragCoord.xy)/iResolution.y;\n\tvec2 q=iMouse.xy/iResolution.xy;\n\tq=-1.+2.*q;\n\tq*=2.;\n    q.x+=5.;\n\tvec3 ro =vec3(.0,9.,-3.);\n\tvec3 to = vec3(-6.*sin(q.x),7.,-6.*cos(q.x));\n\tmat3 ca = camera(ro,to,.0);\n\tvec3 rd = ca*normalize(vec3(p,3.));\n\n\tcol=render(ro,rd);\n    col=pow(col,vec3(1./2.2));\n\n\tfragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}