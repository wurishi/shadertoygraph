{"ver":"0.1","info":{"id":"stX3zS","date":"1622494322","viewed":296,"name":"Easy Voronoi Edges","username":"oneshade","description":"Detecting voronoi borders.","likes":20,"published":3,"flags":0,"usePreview":0,"tags":["2d","voronoi","edgedetection","edges"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 getPoint(in vec2 cell) {\n    return cell + 0.5 + 0.5 * vec2(sin(cell.x - cell.y + iTime), sin(cell.x) * cos(cell.x + cell.y * iTime));\n}\n\nfloat getId(in vec2 cell) {\n    return fract(sin(cell.x * 4647.543 + cell.y * 2435.32) * 9658.65);\n}\n\nfloat voronoi(in vec2 pixel) {\n    vec2 uv = (pixel - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n    vec2 cell = floor(uv);\n\n    float minDist = 1e20;\n    float id = 0.0;\n    for (int i=-1; i < 2; i++) {\n        for (int j=-1; j < 2; j++) {\n            vec2 curCell = cell + vec2(i, j);\n            float curDist = length(uv - getPoint(curCell));\n            if (curDist < minDist) {\n                id = getId(curCell);\n                minDist = curDist;\n            }\n        }\n    }\n\n    return id;\n}\n\nvec4 render(in vec2 px) {\n    float dx = (voronoi(px + vec2(1.0, 0.0)) - voronoi(px - vec2(1.0, 0.0)));\n    float dy = (voronoi(px + vec2(0.0, 1.0)) - voronoi(px - vec2(0.0, 1.0)));\n    return vec4(abs(dx) + abs(dy) > 0.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = (render(fragCoord                 ) +\n                 render(fragCoord + vec2(0.5, 0.0)) +\n                 render(fragCoord + vec2(0.0, 0.5)) +\n                 render(fragCoord + vec2(0.5, 0.5))) / 4.0;\n}","name":"Image","description":"","type":"image"}]}