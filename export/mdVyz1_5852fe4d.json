{"ver":"0.1","info":{"id":"mdVyz1","date":"1695821068","viewed":133,"name":"Spherical cube dots loopless","username":"spalmer","description":"making loopless the other costly SnackEater's shader [url=http://shadertoy.com/view/ddycRz]http://shadertoy.com/view/ddycRz[/url]\n[url=http://shadertoy.com/user/FabriceNeyret2]FabriceNeyret2[/url] really deserves all the credit here","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["3d","distortions","dots","short","golf","loopless"],"hasliked":0,"parentid":"mdtyzN","parentname":"Sphere fake 3d - loopless & golf"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// loopless + golfing \"Sphere fake 3d #2\" by SnackEater. http://shadertoy.com/view/ddycRz\n// based on Fabrice's golf of SnackEater's \"Sphere fake 3d\" http://shadertoy.com/view/mdtyzN\n\n#define r  mat2(cos(iTime+vec4(0,33,11,0)))\n\nvoid mainImage(out vec4 O, vec2 U)\n{   \n    vec3 R = iResolution, P, A;\n    U = (U+U - R.xy) / R.y; // view\n    float s = .1, z = 1. - dot(U,U);\n    P = vec3(U, sqrt(z)); // 3D point on front half-sphere\n    P.yz *= r; P.xz *= r; // rot sphere\n    A = abs(P);\n    U = A.x > A.y && A.x > A.z ? P.yz / A.x : A.y > A.z ? P.xz / A.y : P.xy / A.z;\n    O = vec4(z > 0.) * (1. - length((mod(U + s , s+s) -s)    // draw blob at grid center\n      * inverse(transpose(mat2(dFdx(U),dFdy(U))))) * 1e2/R.y); // compensate distortion with Jacobian (precise)\n}","name":"Image","description":"","type":"image"}]}