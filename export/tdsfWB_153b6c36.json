{"ver":"0.1","info":{"id":"tdsfWB","date":"1589029060","viewed":357,"name":"Laplace circles","username":"huwb","description":"Laplace PDE solver using walk on spheres, based on the amazing paper: http://www.cs.cmu.edu/~kmcrane/Projects/MonteCarloGeometryProcessing/index.html\n\nAnimated over time using recursive exponential filter.\n","likes":12,"published":1,"flags":32,"usePreview":0,"tags":["montecarlo","pde"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 WoS_Visualise(vec2 uv_start, vec2 pixuv);\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 data = texture(iChannel0, fragCoord/iResolution.xy);\n    fragColor = data.xxxx;\n    fragColor.b *= .98;\n    \n    // Debug visualise WoS\n    if(iMouse.z > 0.)\n    {\n        vec2 pixuv = fragCoord / iResolution.xy;\n        pixuv.x *= iResolution.x/iResolution.y;\n        vec2 uv_start = iMouse.xy/iResolution.xy;\n        uv_start.x *= iResolution.x/iResolution.y;\n        \n\t    uint seed = uint(fragCoord.x*2.) + uint(fragCoord.y * iResolution.x);\n        fragColor.xyz += WoS_Visualise(uv_start, pixuv);\n    }\n}\n\n\n\n\n// Below is just for visualising the Walk-on-Spehres. LMB to show.\n\nvec2 center()\n{\n    return vec2(0.75,0.5);\n}\n\nfloat sdf(vec2 uv)\n{\n    float l1 = length(uv-center()) - 0.3;\n    float l2 = length(uv-1.5*center()) - 0.1;\n    return min(l1, l2);\n}\n\nfloat circle(vec2 uv, float r, vec2 pixuv)\n{\n    return .25 * smoothstep(0.005, 0., abs(length(pixuv - uv) - r));\n}\n\nvec3 WoS_Visualise(vec2 uv_start, vec2 pixuv)\n{\n    vec2 uv = uv_start;\n    float result = 0.0;\n    \n    for(uint i = uint(0); i < uint(16); i++)\n    {\n        float r = abs(sdf(uv));\n        result += circle(uv, r, pixuv);\n        \n        if(r < 0.001) return vec3(0., result, 0.);\n        \n        float angle = 2.*3.141592654*hash11(i + uint(5));\n        uv += r * vec2(cos(angle), sin(angle));\n        result += circle(uv, 0.0025, pixuv);\n    }\n\n    // decision - terminate walks that did not hit boundary\n    return vec3(result, 0., 0.);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nfloat epsilon = 0.0001;\n\nvec2 center()\n{\n    return vec2(0.75,0.5);\n}\n\nfloat sdf(vec2 uv)\n{\n    float l1 = length(uv-center()) - 0.3;\n    float l2 = length(uv-1.5*center()) - 0.1;\n    return min(l1, l2);\n}\n\nfloat value(vec2 uv)\n{\n    uv -= center();\n    uv.x += iTime*.01;\n    float result = 1.0;\n    result = fract(uv.x * 4.3) < 0.5 ? 1.0 - result : result;\n    result = fract(uv.y * 5.7) < 0.5 ? 1.0 - result : result;\n    return result;\n}\n\nfloat WoS(vec2 uv_start, uint seed)\n{\n    vec2 uv = uv_start;\n    \n    for(uint i = uint(0); i < uint(32); i++)\n    {\n        float r = abs(sdf(uv));\n        if(r < 0.001) return value(uv);\n        \n        float angle = 2.*3.141592654*hash11(uint(1822138.*iTime) + i + seed);\n        uv += r * vec2(cos(angle), sin(angle));\n    }\n\n    // decision - terminate walks that did not hit boundary\n    return -1.0;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    uint seed = uint(fragCoord.x*2.) + uint(fragCoord.y * iResolution.x);\n    // seed = uint(0); // Make seed same for all pixels\n    fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n    \n    uint seedStride = uint(iResolution.x * iResolution.y);\n    for(int i = 0; i < 32; i++)\n    {\n        float curr = WoS(uv, seed);\n        if (curr >= 0.0)\n        {\n            // exponential filter\n            fragColor.x = mix(fragColor.x, curr, 0.00125);\n        }\n        seed += seedStride;\n    }\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// From nimitz' Quality hashes collection\n// https://www.shadertoy.com/view/Xt3cDn\n\n//The MIT License\n//Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/*\n\tThis is a collection of useful \"high-quality\" hash functions for WebGL 2 (or anything supporting uints\n\tand bitwise ops) returning values in the 0..1 range as 32bit floats\n\n\tI am using either the a XXhash32 (https://github.com/Cyan4973/xxHash) modified function (for low input\n\tcount). This is a relatively fast and very high quality hash function that can be used as a basis for\n\tcomparison.\tMy modified version was tested to make sure it still has quality comparable with the\n\treference implementation.\n\n\tThe second option is a modified version of iq's \"Integer Hash III\" (https://www.shadertoy.com/view/4tXyWN)\n\tWhich I tested using ENT (http://www.fourmilab.ch/random/) and turned out to have serious quality issues.\t\n\tI added the same XORShift finisher as XXHash to improve the characteristics and this turned out\tto work\n\tmuch better than I hoped, every test I have ran suggest that the quality of the modified version is very\n\thigh. I also implemented 1D and 3D input versions of this hash and tested to make sure the quality\n\tremained high.\n\n\tI did some prelinimary testing and it seems that the bit rotation line(s) of the XXHash implementations can\n\tbe omitted without much consequence in terms of quality (for very low input count as used here).\n\tThis would make the xxhash based method as fast as the other and the quality would likely be higher,\n\tfurther testing would be required to confirm.\n\n\n\tFor the generation of multiple outputs dimensions (if needed) from the base hash I am using MINSTD\n\twith the generator parameters from: http://random.mat.sbg.ac.at/results/karl/server/node4.html\n\tI also tested the hash quality after the MINSTD step and there seems to be little to no loss in quality from\n\tthat final step. One thing I did not test for is the potential correlation between the MINSTD generators,\n\tbut I doubt\tthis would be an issue, let me know if turns out to be the case.\n\n\tI included the 1D and 3D input versions in the common tab as to not clutter this tab too much.\n\n\n\tPlease report any issues, statistical or otherwise either here in the comments section\n\tor on twitter.\n\n\n\tSee the bottom of this page for an example of usage with arbitrary float input.\n*/\n\nuint baseHash(uint p)\n{\n    p = 1103515245U*((p >> 1U)^(p));\n    uint h32 = 1103515245U*((p)^(p>>3U));\n    return h32^(h32 >> 16);\n}\n\nfloat hash11(uint x)\n{\n    uint n = baseHash(x);\n    return float(n)*(1.0/float(0xffffffffU));\n}\n\n","name":"Common","description":"","type":"common"}]}