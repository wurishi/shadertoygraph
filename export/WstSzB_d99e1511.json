{"ver":"0.1","info":{"id":"WstSzB","date":"1572284918","viewed":55,"name":" The CheckerBoard","username":"nicholashoy","description":"for school","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["school"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Parameters for square grid\nfloat rows = 60.0;\nfloat columns = 50.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    //Colors\n   \tvec4 tile1 = vec4(0.0,0.0,0.0,1.0);\n   \tvec4 tile2 = vec4(1.0,1.0,1.0,1.0);\n    \n    //Determines the number of pixels required for all squares to fit\n    float columnResolution = iResolution.x/columns;\n    float rowResolution = iResolution.y/rows;\n    \n    //If 1.0, squares reach across the screen further than up\n    float columnsReachEnd = step(columnResolution,rowResolution);\n    //If 1.0, squares reach up the screen further than across\n    float rowsReachEnd = 1.0 - columnsReachEnd;\n    \n    //The use of the + and opposing float values act as an OR,\n    //adapting to if the columns or rows will determine square size\n    float squareResolution = columnResolution * columnsReachEnd + rowResolution * rowsReachEnd;\n    \n    //modulated by the resolution of two squares\n    vec2 checkerBoard = mod(fragCoord,squareResolution * 2.0);\n    \n    //step based on being on an odd numbered row/column\n    float test1 = step(squareResolution,checkerBoard.x);\n    float test2 = step(squareResolution,checkerBoard.y);\n    \n    //works as a sort of == test. If both are 0.0 or 1.0, \n    //then both of these steps should return a 1.0 and multiply one another.\n    //If there is discrepancy, one of them will be a 0.0, and the product will be 0.\n    tile2.a = step(test1,test2) * step(test2,test1);\n    \n    //Makes sure the squares are not drawn beyond the board\n    tile2.a *= (step(fragCoord.y,rows * columnResolution) * columnsReachEnd) + \n        \t\t(step(fragCoord.x,columns * rowResolution) * rowsReachEnd);\n\n    // Output to screen\n    vec4 composite = mix(tile1,tile2,tile2.a);\n    fragColor = composite;\n}","name":"Image","description":"","type":"image"}]}