{"ver":"0.1","info":{"id":"MfXczj","date":"1721310352","viewed":35,"name":"Procedural Brick Texture By RikR","username":"rikr","description":"Decided to combine two of my shaders on here to make procedural bricks texturally with noise and pattern.\n\nMade in 225 characters by Rik Riesmeijer.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d","domain","pattern","bricks","cc0","onetweet","mit","codegolf","public","free","commercialuse","copyrightfree"],"hasliked":0,"parentid":"XXGSWy","parentname":"Simple Brick Tiling In 99 Chars"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Procedural Brick Texture In 225 Chars.\n// By Rik Riesmeijer, 2024 - No Rights Reserved.\n\n// License: CC0 1.0 Universal - Commercial Use Allowed.\n// Copyright Has Been Released To The Public Domain. \n// More information at: CreativeCommons.org/publicdomain.\n\nvoid mainImage(out vec4 c, vec2 v) {         // Procedural Brick Texture.\n    v.x += 235.0 * iTime;                    // Option: Make it move.\n    #define r(e) (94857u * e ^ e.yzwx)       // Round of \"hashing\".\n    c = vec4(r(r(r(uvec4(v, v))))).yxxy;     // Three rounds for noise.\n    c = 0.35 * c / vec4(-1u);                // Add noise to color.\n    c = vec4(dot(c, c));                     // Sharpen and weaken noise.\n    v *= 0.015;                              // Resize the canvas.\n    v += ceil(v.y *= 2.);                    // Offset and squish.\n    v = fract(v * 0.5);                      // Repetition.\n    c += 0.4 * vec2(min(v, 0.9)!=v, 1).yxxy; // Display the color.\n}                                            // By Rik Riesmeijer.","name":"Image","description":"","type":"image"}]}