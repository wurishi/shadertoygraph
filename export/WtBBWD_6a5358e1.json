{"ver":"0.1","info":{"id":"WtBBWD","date":"1598901965","viewed":241,"name":"Gem rejuvenator","username":"sukupaper","description":"\"Gem Rejuvenator\" from Steven Universe","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","gem","asset","stevenuniverse"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author: paperu\n// Title: Gem Rejuvenator\n\nfloat t, closed, intensity, closedShifted;\n#define P 6.283185307\n\nfloat bezier(in float p1, in float p2, in float p3, in float p4, in float t){\n    float a = mix(p2,p3,t);\n    return mix(mix(mix(p1,p2,t),a,t),mix(a,mix(p3,p4,t),t),t);\n}\n\nfloat anim1(in float x, in float sm){\n  float xmd = mod(x,2.) - .5;\n  return smoothstep(-sm,sm,xmd) - smoothstep(-sm,sm,xmd - .5);\n}\nfloat anim2(in float x, in float sm){\n  float xmd = mod(x,2.) - .5;\n  return smoothstep(-sm,sm,xmd + .05) - smoothstep(-sm,sm,xmd - .52);\n}\n\nfloat rand(in vec2 st){ return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.585); }\nmat2 rot(in float a) { return mat2(cos(a),sin(a),-sin(a),cos(a)); }\nvec2 fold(in vec2 p, in float a){ vec2 n = vec2(cos(-a),sin(-a)); return p - 2.*min(0.,dot(p,n))*n; }\n\nfloat box(in vec3 p, in vec3 s, in float r) { return length(max(abs(p) - s,0.)) - r; }\nfloat cyl(in vec3 p, in float h, in float r) {\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.) + length(max(d,0.));\n}\n\nfloat ci(in vec2 p, in float s) { return length(p) - s; }\nfloat scytheBlade2dsdf(in vec2 p, in float intensity) {\n    p.x += cos(p.y*1500. + t*20.)*.008*intensity;\n\tp.x -= .069;\n    float d = max(max(-ci(p + vec2(.08,.43),.6),ci(p + vec2(.138,.31),.625)),-max(-ci(p + vec2(-.025,.305),.6),ci(p + vec2(.31,.365),.6)));\n    float d2 = min(ci(p + vec2(.172,-0.16),.078),min(ci(p - vec2(.028,0.15),.067),min(ci(p + vec2(.21,-.382),.15),ci(p - vec2(.105,.35),.15))));\n    d2 -= cos(t*40.)*mix(.002,.0001,intensity);\n    d = max(d,-max(max(d - 1.,-d2),(abs(-p.x - .07) - .12)));\n    d = max(max(d,-p.y - .2),-p.x - .5);\n    d -= cos(t*100.)*.001*intensity;\n    return d;\n}\nfloat scytheBlade3dsdf(in vec3 p, in float h, in float intensity) {\n    float c = closedShifted;\n    float d = scytheBlade2dsdf(p.xy, intensity);\n    d = max(d,ci(p.xy - vec2(0.,.2),.75 - c*2. - .05*cos(atan(p.x,p.y + .2)*20.)));\n    vec2 w = vec2(d, abs(p.z) - h);\n    return min(max(w.x,w.y),0.) + length(max(w,0.));\n}\n\nfloat crystal(in vec3 p) {\n    float c = closed;\n    float s = 2.25 + 4.*c;\n    p.y -= 0.21 - .8*c;\n    p *= s;\n    float d = box(p,vec3(.5,.5,.025),.001);\n    d = max(d,dot(abs(p) - .03,normalize(vec3(2.,0.,1.8))));\n    d = max(d,dot(vec3(abs(p.x) - .015,-p.y,abs(p.z) - .01),normalize(vec3(.7,.8,1.8))));\n    d = max(d,dot(vec3(abs(p.x) - 0.098,p.y,abs(p.z) - .01),normalize(vec3(.5,.3,1.))));\n    return d/s;\n}\nfloat crystalSupport(in vec3 p) {\n    float c = closed;\n    p.y -= .19 - .8*closed;\n    return cyl(p,.009,.01);\n}\nfloat handleHead(in vec3 p) {\n    float c = closed;\n    p.y -= .12 - .8*c;\n    float h = p.y - .05;\n    return cyl(p,.018 - h*mix(-.07,.5,step(0.,h)) - .005*c,.06);\n}\nfloat handleBody(in vec3 p) {\n    float c = closed;\n    p.y += .3 + c*.35;\n    return cyl(p,.009,.42 - c*.42);\n}\nfloat handle(in vec3 p) {\n    p.y += .65;\n    float h = abs(p.y) - 0.075;\n    return cyl(p,.015 - h*mix(0.,.75,step(0.,h)),.1);\n}\nfloat handleButton(in vec3 p) {\n    p.xy += vec2(-.009,.61);\n    return box(p,vec3(.01,.0075,.0025),.001);\n}\n\nfloat bladeRotAnim(in float x) {\n    x = mod(x,4.);\n    float b = x < 1. ? bezier(0.0,.1,1.5,.0,x)\n        : x < 2. ? bezier(0.0,-2.,-2.,0.0,x - 1.)\n        : x < 3. ? bezier(0.0,1.0,0.1,0.0,x - 2.)\n        : x < 4. ? bezier(0.0,-0.1,-0.1,0.0,x - 3.)\n        : 0.;\n    return b;\n}\nfloat bladeRotAnim2(in float x) {\n    float t = mod(x,4.);\n    float b = \n          t < 1. ? bezier(0.0,0.0,0.0,0.1,t)\n        : t < 2. ? bezier(0.1,0.2,1.0,2.0,t - 1.)\n        : t < 3. ? bezier(2.0,3.0,3.0,3.0,t - 2.)\n        : 0.;\n    return b + floor(x/3.)*3.;\n}\n\nfloat distFromBlade;\nstruct Dm { float dist; int mat; };\nDm df(in vec3 p) {\n    p.y = abs(p.y + .6) - .7 + cos(t*2.5)*.1;\n\tp.xz *= rot(cos(t*.5)*.5);\n    float animA = bladeRotAnim(t);\n    float intensity = (bladeRotAnim(t + .01) - animA)/.01;\n\tp.xy *= rot(animA*P*.2*(1. - closed));\n    p.y -= .15;\n\tp.xz *= rot(-bladeRotAnim(t - 3.)*1.85);\n    p.y -= .45*closed;\n    \n    float scytheBlade = scytheBlade3dsdf(p,.001,intensity);\n    float crystal = crystal(p);\n    float crystalSupport = crystalSupport(p);\n    float handleHead = handleHead(p);\n    float handleBody = handleBody(p);\n    float handle = handle(p);\n    float handleButton = handleButton(p);\n    \n    float d = min(min(min(min(min(min(scytheBlade,crystal),crystalSupport),handleBody),handleHead),handle),handleButton);\n    \n    Dm m;\n    m.dist = d;\n    m.mat = d == scytheBlade ? 1\n    \t: d == crystal ? 2\n        : d == crystalSupport || d == handleButton ? 3\n        : d == handleBody ? 4\n        : d == handleHead ? 5\n        : 6;\n    distFromBlade = scytheBlade;\n    return m;\n}\n\nvec3 normal(in vec3 p) { float d = df(p).dist; vec2 u = vec2(0.,.001); return normalize(vec3(df(p + u.yxx).dist,df(p + u.xyx).dist,df(p + u.xxy).dist) - d); }\n\n#define MAX_D 5.\n#define MIN_D 0.1\n#define LIM .001\n#define MAX_IT 90\nstruct RmRes { vec3 pos; int it; bool hit; int mat; };\nRmRes rm(in vec3 c, in vec3 r) {\n    RmRes res;\n    res.pos = c + r*MIN_D;\n    res.hit = false;\n    Dm m;\n    for(int i = 0; i < MAX_IT; i++) {\n        m = df(res.pos);\n        if(m.dist < LIM) { res.it = i; res.hit = true; break; }\n        if(distance(c,res.pos) > MAX_D) { res.it = i; break; }\n        res.pos += m.dist*r*.95;\n    }\n    res.mat = m.mat;\n    return res;\n}\n\nvec3 colorMain(in vec2 st) {\n    vec3 c = vec3(0.,0.,-3.);\n    vec3 r = normalize(vec3(st,2.));\n\n    RmRes res = rm(c,r);\n    \n    vec3 color = vec3(.04,0.,.04) - length(st)*.03;\n    vec3 ambientColor = vec3(1.);\n    \n    if(res.hit) {\n        vec3 n = normal(res.pos);\n        \n        vec3 matColor = res.mat == 1 ? vec3(1.)\n            : res.mat == 2 ? vec3(.874,.129,.447)\n            : res.mat == 3 ? vec3(.819,.360,.6)\n            : res.mat == 4 ? vec3(.427,.090,.266)\n            : vec3(.603,.035,.305);\n        \n        if(res.mat == 2) color = mix(ambientColor,matColor,clamp(pow(dot(n,r),2.)*1.25,0.,1.));\n        else if(res.mat == 1) color = matColor;\n        else {\n            color = matColor*(1.8 - dot(n,-r))*clamp(1. - distFromBlade*2.,.2,1.);\n            if(res.mat == 5) {\n                RmRes resReflect = rm(res.pos - r*.1,reflect(r,n));\n            \tif(resReflect.hit && resReflect.mat == 1) color += 1.;\n            }\n        }\n    }\n    color *= mix(1.1,.25,closed);\n    color += pow(float(res.it)/30.,2.)*vec3(1.,.415,.738);\n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 st = fragCoord.xy/iResolution.xy - .5;\n    st.x *= iResolution.x/iResolution.y;\n    t = iTime + 2.8;\n    closed = anim1(t*.2,.05);\n    closedShifted = anim2(t*.2,.075);\n    \n    vec3 color = colorMain(st);\n    \n    fragColor = vec4(color*2. - length(st*mix(.02,.35,closed)),1.0);\n}","name":"Image","description":"","type":"image"}]}