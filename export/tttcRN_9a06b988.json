{"ver":"0.1","info":{"id":"tttcRN","date":"1608613418","viewed":110,"name":"blep [spaz]","username":"HaleyHalcyon","description":"blup","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["blop"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 roll(uvec2 xy, uint t) {\n    const uint a = 1664525u;\n    const uint m = 1013904223u;\n\n    uint seed = 1818420u * xy.x + 78265178u * xy.y + 237698117u * t;\n    \n    uint x0 = (seed * a) % m;\n    uint x = (x0 * a) % m;\n    \n    vec3 xvec = vec3(x & 3u, (x >> 4u) & 3u, (x >> 8u) & 3u);\n    return xvec / 3.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float Time = fract(iTime);\n    uint time = uint(floor(iTime * 50.));\n   \n    // Normalized pixel coordinates (from 0 to 1)\n    float scale = min(iResolution.x, iResolution.y);\n    vec2 uv = fragCoord / scale;\n    uv -= vec2(iResolution.x / scale, iResolution.y / scale) / 2.;\n    uv *= 2.0;\n    \n    float linDis = distance(uv, vec2(0));\n    vec3 x;\n    float angle = atan(uv.x, uv.y) / 3.14159265358979 / 2.;\n    float lolDis = 14. * log(linDis) - 6. * linDis;\n    vec2 rt = vec2(256. + lolDis * 0.7 + 0.7 * sin(0.6 * lolDis + Time * 2. * 3.14159265358979), 256. + angle * 32.0);\n    if (linDis < 0.15) {\n        x = vec3(abs(1. - 2. * fract(- angle + 16. * linDis + Time)));\n    } else if (fract(rt.x) < 0.2 || fract(rt.y + 0.1) < 0.2) {\n        x = vec3(fract(rt.x + Time + angle));\n    } else {\n        x = roll(uvec2(rt), time);\n    }\n    // Output to screen\n    fragColor = vec4(x, 1);\n}","name":"Image","description":"","type":"image"}]}