{"ver":"0.1","info":{"id":"fsV3zW","date":"1631241700","viewed":106,"name":"seething tunnel","username":"HaleyHalcyon","description":"a","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["perlinnoise"],"hasliked":0,"parentid":"wlyfz3","parentname":"perlin testâš™"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU (6.283185307)\n#define CELLS_AROUND (12.)\n\n// A single iteration of Bob Jenkins' One-At-A-Time hashing algorithm.\nuint hash(uint x) {\n    x += ( x << 10u );\n    x ^= ( x >>  6u );\n    x += ( x <<  3u );\n    x ^= ( x >> 11u );\n    x += ( x << 15u );\n    return x;\n}\n// fade function defined by ken perlin\nvec2 fade(vec2 t) {\n  return t * t * t * (t * (t * 6. - 15.) + 10.);\n}\n// corner vector\nvec2 cvec(vec2 uv, float time) {\n  uint x = uint(mod(uv.x, 256.));\n  uint y = uint(mod(uv.y, CELLS_AROUND));\n  float n = (float(hash(x + hash(y))) / 256.) + (time * TAU);\n  return vec2(cos(n), sin(n));\n}\n// perlin generator\nfloat perlin(vec2 uv, float offset) {\n  vec2 i = floor(uv);\n  vec2 f = fract(uv);\n\n  vec2 u = fade(f);\n\n  return\n  mix(\n    mix(\n      dot( cvec(i + vec2(0.0,0.0), offset ), f - vec2(0.0,0.0) ),\n      dot( cvec(i + vec2(1.0,0.0), offset ), f - vec2(1.0,0.0) ),\n    u.x),\n    mix(\n      dot( cvec(i + vec2(0.0,1.0), offset ), f - vec2(0.0,1.0) ),\n      dot( cvec(i + vec2(1.0,1.0), offset ), f - vec2(1.0,1.0) ),\n    u.x),\n  u.y);\n}\n// stripes of color\nconst vec3[] colors = vec3[](\n  vec3(142, 202, 230)/255.,\n  vec3(33, 158, 188)/255.,\n  vec3(2, 48, 71)/255.,\n  vec3(255, 183, 3)/255.,\n  vec3(251, 133, 0)/255.,\n  vec3(105, 46, 22)/255.\n);\nvec3 stripes(float n) {\n  return mix(\n    colors[uint(n + 6.0) % 6u],\n    colors[uint(n + 7.0) % 6u],\n    smoothstep(15./16., 1.0, fract(n))\n  );\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  float time = fract(iTime / 4.);\n  // Normalized pixel coordinates (from 0 to 1)\n  float scale = min(iResolution.x, iResolution.y);\n  vec2 uv = (gl_FragCoord.xy - 0.50 * iResolution.xy) / scale;\n  vec2 rt = vec2(2.1 * log(length(uv)), atan(uv.y, uv.x) * CELLS_AROUND / TAU);\n  float  value = rt.x * 0.5;\n  value += 0.5  * perlin(rt *  2.0, 0.);\n  value += 0.8  * perlin(rt *  7.0, 0.8);\n  // Output to screen\n  fragColor = vec4(\n    stripes(256. + value - time * 6.), 1\n  );\n}","name":"Image","description":"","type":"image"}]}