{"ver":"0.1","info":{"id":"XtSBRK","date":"1516386924","viewed":269,"name":"Mandala elevator","username":"Flopine","description":"Training training training !","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","mandala"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n// Thanks to wsmind and leon for teaching me!\n\n#define PI 3.14\n\nmat2 rot(float angle)\n{\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat2(c,s,-s,c);\n}\n\nvec2 moda (vec2 p, float per)\n{\n    float angle = atan(p.y,p.x);\n    float l = length(p);\n    angle = mod(angle-per/2.,per)-per/2.;\n    return vec2 (cos(angle),sin(angle))*l;\n}\n\nfloat cylY (vec3 p, float r)\n{\n    return length(p.xz)-r;\n}\n\nfloat cylZ (vec3 p, float r)\n{\n    return length(p.xy)-r;\n}\n\n\nfloat base (vec3 p)\n{   \n    p.xy *= rot(abs(p.z)-iTime);\n    p.xy = moda(p.xy,2.*PI/3.);\n    p.x -= 0.4;\n\n    return cylZ(p,0.2);\n}\n\n\nfloat prim(vec3 p)\n{\n    p.xz = moda(p.xz, 2.*PI/7.);\n    p.x -= 4.;\n    return base(p);\n}\n\nfloat elevator (vec3 p)\n{\n    float per = 8.;\n    p.yz = mod (p.yz-per/2.,per)-per/2.;\n    float rep1 = prim(p);\n    \n    float per2 = 15.;\n    p.yz *= rot(PI/2.);\n     p.x = mod (p.x-per2/2.,per2)-per2/2.;\n    float rep2 = prim(p);\n    \n    return min(rep1,rep2);\n}\n\nfloat background (vec3 p)\n{\t\n    float per = 5.;\n    p.yz *= rot(PI/2.);\n    p.x = mod (p.x-per/2.,per)-per/2.;\n    return prim(p);\n}\n\nfloat SDF(vec3 p)\n{\n    return min(elevator(p), background(p));\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = 2.*(fragCoord.xy / iResolution.xy)-1.;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 p = vec3 (-.001,iTime,-3.);\n    vec3 dir = normalize(vec3(uv,1.));\n    \n    float shad = 0.;\n    vec3 color = vec3 (0.);\n    \n    for (int i=0; i<100;i++)\n    {\n        float d = elevator(p);\n        if (d<0.01)\n        {\n            shad = float(i)/80.;\n           break;\n        }\n        else shad = .0;\n        p+=d*0.2*dir;\n    }\n    color = vec3(shad)*vec3(0.8,p.z,abs(p.x*0.5));\n\tfragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}