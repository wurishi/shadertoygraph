{"ver":"0.1","info":{"id":"tsfSDl","date":"1552501279","viewed":227,"name":"ShrinkHelix","username":"japoneris","description":"Helix pattern for test","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["helicoidalhelixshrink"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat line(vec2 uv, vec2 dir, vec2 ptx, float w) {\n    // pos: point of the line\n    // w: width of the line\n    // dir: direction of the line\n    // b: OO\n\n    vec2 pt = ((uv.xy - ptx.xy) * vec2(dir.y, -dir.x)) / sqrt(dir.x*dir.x + dir.y*dir.y);\n    return exp(-abs(pt.x+ pt.y)/w);\n    \n}\n\n\nfloat sineline(vec2 uv, float x, float phi, float loop, float speed, float w, float s, float alpha) {\n    // x: position of helix center\n    // phi: phase of the helix\n    // loop: Number of peaks\n    // speed: Speed \n    // w: width of the line\n    // s: size of the helix\n    // alpha: width of fade\n    \n    float f = 2. * 3.14 * uv.y * loop + phi;\n    return 0.5 * (1. - alpha + alpha * cos(f)) * exp(-abs(uv.x - x + s *cos(f + speed * iTime))/ w);\n    \n        \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\t\n    float a1 = 0.6;\n    float w = 0.2 * 0.5 * (1.  + a1 *cos(iTime));\n    float w1 = min(0.1, w);\n    \n    float loop = 3.;\n    float speed = 5.;\n    float alpha = 0.5;\n    \n    float center = 0.5;\n    \n    // Sorry for copy/paste\n    vec2 dir = vec2(0., 1.);\n    vec2 pt0 = vec2(center + w, .5);\n    vec2 pt1 = vec2(center - w, pt0.y);\n    \n    \n    float l0 = line(uv, dir, pt0, .03);\n    float l1 = line(uv, dir, pt1, .03);\n    \n    \n    float h0 = sineline(uv, center, 0., loop, speed, 0.02, w, alpha);\n    float h1 = sineline(uv, center, 1., loop, speed, 0.02, w, alpha);\n    \n    float h2 = sineline(uv, center, 2.5, loop, speed*1.3, 0.02, w1, alpha);\n    float h3 = sineline(uv, center, 2.0, loop, speed*1.3, 0.02, w1, alpha);\n    \n    \n    // Time varying pixel color\n    vec3 col = vec3(h2 + h3, 0.6*(l0+l1) + max(h1+h0*0.8, 0.), h1+h0);// + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}