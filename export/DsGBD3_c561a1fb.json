{"ver":"0.1","info":{"id":"DsGBD3","date":"1698688573","viewed":46,"name":"Inner Solar System Model","username":"bgthompson","description":"A model of the Inner Solar System. Assumes orbits are circular. The sun and Diemos are not to scale, and Phobos is disabled by default.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["space","planets","moons"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// An elementary model of the Inner Solar System.\n// The orbital period of Phobos is so high compared to other satellites\n// (and so close to the surface of Mars) that we have disabled it.\n\n// Created by Benjamin G. Thompson.\n// Github: bg-thompson\n// Last updated: 2023.10.30\n//\n// License: CC BY 4.0, available at\n// https://creativecommons.org/licenses/by/4.0/\n\nconst float speed = 0.14;\nconst float earth_orbit   = 1.000 * 0.5;\nconst float mercury_orbit = 0.387 * earth_orbit;\nconst float venus_orbit   = 0.723 * earth_orbit;\nconst float mars_orbit    = 1.524 * earth_orbit;\nconst float moon_orbit    = 0.15  * earth_orbit;\nconst float phobos_orbit  = 0.01; // Not to scale since Phobos is too close to Mars.\nconst float diemos_orbit  = 23463.2 / 9376.0 * phobos_orbit;\n \nconst float planet_size_scale = 0.03;\nconst float earth_size   = 1.000 * planet_size_scale;\nconst float sun_size     = 2.5 * earth_size; // Not to scale as the sun is massive.\nconst float mercury_size = 0.383 * earth_size;\nconst float venus_size   = 0.950 * earth_size;\nconst float mars_size    = 0.532 * earth_size;\nconst float moon_size    = 0.273 * earth_size;\nconst float phobos_size  = 0.5 * moon_size;\nconst float diemos_size  = 6.27 / 11.08 * phobos_size;\n\nconst float earth_orbit_days = 365.256;\nconst float earth_orbit_t    = earth_orbit_days / 365.256;\nconst float mercury_orbit_t  = earth_orbit_days / 87.969;\nconst float venus_orbit_t    = earth_orbit_days / 224.701;\nconst float mars_orbit_t     = earth_orbit_days / 686.980;\nconst float moon_orbit_t     = earth_orbit_days / 27.322;\n// const float phobos_orbit_t     = earth_orbit_days / 0.319;\nconst float diemos_orbit_t   = earth_orbit_days / 1.263;\n\nconst vec4  sun_color     = vec4(1,1,0,1);\nconst vec4  mercury_color = vec4(0.788, 0.784, 0.776, 1);\nconst vec4  venus_color   = vec4(0.816, 0.8, 0.788, 1);\nconst vec4  earth_color   = vec4(0.145, 0.329, 0.51, 1);\nconst vec4  mars_color    = vec4(0.863, 0.471, 0.345, 1);\nconst vec4  moon_color    = vec4(0.714, 0.706, 0.686, 1);\n// const vec4  phobos_color = vec4(0.757, 0.655, 0.592, 1);\nconst vec4  diemos_color  = vec4(0.576, 0.545, 0.502, 1);\nconst vec4  orbit_color   = vec4(0, 0.239, 0.345, 1);\n\nconst float orbit_thickness = 0.003;\n\nconst float bthick = 0.004;\n\nvec4 draw_ring(float d, const float radius, const vec4 color) {\n    float intensity = max(0.0, 1.0 - (d-radius)*(d-radius) / (orbit_thickness * orbit_thickness));\n    return vec4(intensity * color.xyz, 1); \n}\n    \nvec4 draw_circle(float d, const float rad, const vec4 color) {\n    float intensity1 = max(0.0, 1.0 - (d - rad)* (d - rad) / (bthick * bthick));\n    float intensity2 = step(d, rad);\n    return max(intensity1, intensity2) * color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float xdata = 2.0 * fragCoord.x / iResolution.x - 1.0;\n    float ydata = 2.0 * fragCoord.y / iResolution.y - 1.0;\n    vec2 pos = vec2(xdata, ydata);\n    pos.x *= iResolution.x / iResolution.y;\n    \n    float t1 =  1.0 + earth_orbit_t   * iTime * speed;\n    float t2 = -1.0 + mercury_orbit_t * iTime * speed;\n    float t3 =  2.0 + venus_orbit_t   * iTime * speed;\n    float t4 =        mars_orbit_t    * iTime * speed;\n    float t5 =  2.0 + moon_orbit_t    * iTime * speed;\n    // float t6 = phobos_orbit_t    * iTime * speed;\n    float t7 =        diemos_orbit_t  * iTime * speed;\n    \n    vec2 earth_center   = earth_orbit   * vec2(cos(t1), sin(t1));\n    vec2 mercury_center = mercury_orbit * vec2(cos(t2), sin(t2));\n    vec2 venus_center   = venus_orbit   * vec2(cos(t3), sin(t3));\n    vec2 mars_center    = mars_orbit    * vec2(cos(t4), sin(t4));\n    vec2 moon_center    = moon_orbit    * vec2(cos(t5), sin(t5)) + earth_center;\n    // vec2 phobos_center  = phobos_orbit  * vec2(cos(t6), sin(t6)) + mars_center;\n    vec2 diemos_center  = diemos_orbit  * vec2(cos(t7), sin(t7)) + mars_center;\n    \n    float sun_dist     = length(pos);\n    vec4 ring = draw_circle(sun_dist, sun_size, sun_color);\n    \n    float cdist = length(pos);\n    ring += draw_ring(cdist, earth_orbit,   orbit_color);\n    ring += draw_ring(cdist, mercury_orbit, orbit_color);\n    ring += draw_ring(cdist, venus_orbit,   orbit_color);\n    ring += draw_ring(cdist, mars_orbit,    orbit_color);\n    \n    float earth_dist   = distance(pos, earth_center);\n    float mercury_dist = distance(pos, mercury_center);\n    float venus_dist   = distance(pos, venus_center);\n    float mars_dist    = distance(pos, mars_center);\n    float moon_dist    = distance(pos, moon_center);\n    // float phobos_dist  = distance(pos, phobos_center);\n    float diemos_dist  = distance(pos, diemos_center);\n    \n        \n    bool  earth_bool   = earth_dist   < earth_size   + 0.015;\n    bool  mercury_bool = mercury_dist < mercury_size + 0.015;\n    bool  venus_bool   = venus_dist   < venus_size   + 0.015;\n    bool  mars_bool    = mars_dist    < mars_size    + 0.015;\n    bool  moon_bool    = moon_dist    < moon_size    + 0.015;\n    // bool  phobos_bool  = phobos_dist  < phobos_size  + 0.015;\n    bool  diemos_bool  = diemos_dist  < diemos_size  + 0.015;\n              \n    vec4  earth_col    = draw_circle(earth_dist, earth_size, earth_color);   \n    vec4  mercury_col  = draw_circle(mercury_dist, mercury_size, mercury_color);\n    vec4  venus_col    = draw_circle(venus_dist, venus_size, venus_color);\n    vec4  mars_col     = draw_circle(mars_dist, mars_size, mars_color);\n    vec4  moon_col     = draw_circle(moon_dist, moon_size, moon_color);\n    // vec4  phobos_col   = draw_circle(phobos_dist, phobos_size, phobos_color);\n    vec4  diemos_col   = draw_circle(diemos_dist, diemos_size, diemos_color);\n    \n    float planet_on = float(earth_bool || mercury_bool || venus_bool\n    || mars_bool || moon_bool || diemos_bool);\n    \n    vec4 planet  = float(earth_bool)   * earth_col;\n         planet += float(mercury_bool) * mercury_col;\n         planet += float(venus_bool)   * venus_col;\n         planet += float(mars_bool)    * mars_col;\n         planet += float(moon_bool)    * moon_col;\n         // planet += float(phobos_bool)  * phobos_col;\n         planet += float(diemos_bool)  * diemos_col;\n    \n    fragColor = planet_on * planet + (1.0 - planet_on) * ring;   \n}\n","name":"Image","description":"","type":"image"}]}