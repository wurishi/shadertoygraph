{"ver":"0.1","info":{"id":"ltGfRR","date":"1545230435","viewed":66,"name":"Activit√© 3","username":"Elra","description":"Phong","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["act3"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Material {\n    float Ka; //ambiant coef\n    float Kd; //diffuse coef\n    float Ks; //specular coef\n    float Kn; //specular power coef\n};\n\n//Camera parameters\nconst vec3 cameraPos = vec3(6,4,-5);\nconst vec3 cameraTarget = vec3(3,1,-8);\nconst float cameraFovY = 80.0;\n\n//Sphere parammeters\nconst vec3 spherePos = cameraTarget + vec3(0,1,2);\nconst float sphereRadius = 1.0;\nconst vec3 sphereCol = vec3(1,0,0); //red\nconst Material sphereMat = Material(0.2, 0.7, 1.0, 50.0);\n\n// Light(s) parameters\nconst vec3 ambiantCol = vec3(0,0,1);\nconst vec3 lightCol = vec3(1,1,1); //white\nconst vec3 lightPos = vec3(8, 10, -12);\n\nfloat f, delta, a , b, c, t, t1, t2;\nvec2 pt;\nvec3 PT, cz, PO, cyT, cxT, cx, cy, OS, PS, SP, SO;\nfloat res;\n\nvec2 transform_to_apply(vec2 fragCoord){\nvec2 pt;\npt = (2.0*fragCoord.xy - iResolution.xy) / iResolution.y;\nreturn pt;\n}\n\nvoid computeCameraRayFromPixel(in vec2 pixCoord, out vec3 rayPos, out vec3 rayDir){\nrayPos = cameraPos;\nf = 1.0/tan(radians(cameraFovY) / 2.0);\nPT = cameraTarget - cameraPos;\n\ncz = normalize(PT);\nPO = f * cz;\ncyT = vec3(0.0, -1.0, 0.0);\ncxT = cross(cyT, cz);\ncx = normalize(cxT);\ncy = cross(cz, cx);\npt = transform_to_apply(pixCoord);\nOS = pt.x * cx - pt.y * cy;\nPS = PO + OS;\nrayDir = normalize(PS);\n}\n\nfloat raySphere(vec3 rayPos, vec3 rayDir, vec3 spherePos, float sphereRadius, out vec3 intersecS,out vec3 normalS){\n    SO = rayPos - spherePos;\n    a = dot(rayDir, rayDir);\n    b = 2.0* dot(SO, rayDir);\n    c = dot(SO, SO) - dot ( sphereRadius, sphereRadius);\n    delta = b*b - 4.0*a*c;\n    if (delta <= 0.0){\n        res = -1.0;\n    }\n  \n    if (delta > 0.0){\n        t1 = (-b + sqrt(delta)) / 2.0*a;\n        t2 = (-b - sqrt(delta)) / 2.0*a;\n        if (t1 >=0.0 && t2 >=0.0){\n            res = t2;\n        }else {\n            res = -1.0;\n        }\n    }\n    return res;\n}\n\nvec3 computePhongShading(vec3 objectCol, Material objectMat, vec3 N, vec3 L, vec3 R, vec3 V){\n    vec3 ambiant = objectMat.Ka * ambiantCol;\n    vec3 diffuse  = objectMat.Kd * objectCol * lightCol * max(dot(N,L), 0.);\n    vec3 specular = objectMat.Ks * lightCol * pow(max(dot(R,V), 0.), objectMat.Kn);\n    \n    vec3 phongCol = ambiant + diffuse + specular;\n\n    return phongCol;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    //Compute the ray to be casted through the pixel towards the 3D scene\n    vec3 rayPos, rayDir;\n    computeCameraRayFromPixel(fragCoord, rayPos, rayDir);\n    // Test ray-sphere intersection and get the intersection point and associated normal\n    vec3 intersecS, normalS;\n    float distS = raySphere(rayPos, rayDir, spherePos, sphereRadius, intersecS, normalS);\n\n    intersecS = rayPos + distS * rayDir;\n    normalS = normalize(intersecS - spherePos);\n    \t\n    \n    if (distS>0.0){\n        // unit-vector going from the surface point toward the light\n        vec3 L =normalize(lightPos - intersecS);\n        // unit-vector of the reflection direction of the light at the surface point\n        vec3 R = 2.0*normalS*dot(normalS,L) -L;\n        // unit-vector going from the surface point toward the camera\n        vec3 V = -rayDir;\n        fragColor = vec4(computePhongShading(sphereCol, sphereMat, normalS, L, R, V), 1);\n    }\n    else { //we did not hit the sphere, so we have the sky color (black)\n        fragColor = vec4(0, 0, 0, 1);\n    }\n   \n   // Output to screen\n\n}","name":"Image","description":"","type":"image"}]}