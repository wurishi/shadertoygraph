{"ver":"0.1","info":{"id":"3tGBWG","date":"1615217365","viewed":48,"name":"Tutorial1_yonsankm","username":"yonsankm","description":"https://www.youtube.com/watch?v=0ifChJ0nJfM","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tutorial","first"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    //vec3 col = 0.3 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec2 q = uv - vec2(0.33, 0.7); \n    //vector of distance between every pixel(uv) and a particular point on the screen\n    \n    //Make a gradient from orange to yellow over y pixel coordinates increases vertically with squareroot function - more yellow at the start (like a sunset with few oranjes at the bottom)\n    vec3 col = mix(vec3(1.0, 0.4, 0.1), vec3(1.0, 0.8, 0.3), sqrt(uv.y));\n     \n    //col *= uv.x + uv.y; //each pixel has color based on that UV coordinate\n    //col *= length(uv-vec2(0.5, 0.5));\n    float r = 0.2 + 0.1*cos(atan(q.y, q.x)*10.0 + 20.0*q.x + 1.0);\n    \n    col *= smoothstep(r, r+0.01, length(q)); //takes two points 0.2 and 0.5 and if the length <= 0.2, return 0 and if length>=0.8 return 1 \n\n    r = 0.015;\n    r += 0.002*cos(120.0*q.y);\n    r += exp(-40.0*uv.y);\n    //col *= 1.0-(smoothstep(0.0, 0.1, q.y));\n    //col *=1.0 -  (smoothstep(r, r+0.0002, abs(q.x)));\n    col *= 1.0 - (1.0 - (smoothstep(r, r+0.0002, abs(q.x-0.25*sin(2.0*q.y))))) * (1.0 - (smoothstep(0.0, 0.1, q.y))); \n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}