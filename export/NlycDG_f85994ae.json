{"ver":"0.1","info":{"id":"NlycDG","date":"1662305846","viewed":168,"name":"Hologram stars","username":"hypothete","description":"Made a rainbow hologram shader for my website background. The final version has a couple more tweaks for scroll position and responsive star size. Click and drag your mouse to offset the plasma reflections.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","mouse","sdf","rainbow","hologram"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"# define PI 3.14159\n\nvec3 bump3 (vec3 x) {\n    vec3 y = 1.0 - x * x;\n    y = max(y, vec3(0.0));\n    return y;\n}\n\nvec3 spectral_gems (float w) {\n    return bump3(\n    \tvec3(\n \t\t\t3.0 * (w - 0.7), // Red\n \t\t\t3.0 * (w - 0.5), // Green\n \t\t\t3.0 * (w - 0.3) // Blue\n \t\t)\n    );\n}\n\nfloat rand(inout float n){\n    n = fract(sin(PI * n) * 43758.5453123);\n    return n;\n}\n\nfloat star(in vec2 xy, in float z, in float r, in vec2 uv) {\n    float len = length(xy - uv);\n    float points = 5.0;\n    float innerRadius = 0.75;\n    float rotation = PI * cos(iTime + xy.x / xy.y);\n    vec2 nrmDir = normalize(uv - xy);\n    float theta = atan(nrmDir.y,  nrmDir.x);\n    float rVariance = 0.5 + 0.5 * cos(theta * points + rotation);\n    vec2 variedR = r * (innerRadius + (1.0 - innerRadius) * rVariance) * nrmDir;\n    float rotatedRadius = length(xy + variedR - uv);\n    return len < rotatedRadius? z : 0.0;\n}\n\nfloat inStars(in vec2 uv) {\n    float zOffset = 0.0;\n    float seed = 0.1;\n    float ratio = iResolution.y / iResolution.x;\n    int width = 10;\n    int height = int(ratio * float(width));\n    for (int i=0; i < width * height; i++) {\n        seed += float(i);\n        float xOffset = 0.5 + 0.6 * (rand(seed) - 0.5);\n        float yOffset = 0.5 + 0.6 * (rand(seed) - 0.5);\n        float x = (2.0 * (float(i % width) + xOffset) / float(width) - 1.0) / ratio;\n        float y = 2.0 * (float(i / width) + yOffset) / float(height) - 1.0;\n        float z = fract(x + y);\n        float r = 0.1 + 0.1 * rand(seed);\n        zOffset = max(zOffset, star(vec2(x,y), z, r, uv));\n    }\n    return zOffset;\n}\n\nfloat plasma(in vec2 uv, in float offset) {\n return sin(0.015 * (PI * uv.x * uv.y) + offset / 2.0)\n     + cos(PI * 0.3 * uv.x + offset)\n     * sin(PI * 0.3 * uv.y + offset / 3.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 mouse = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    float starOffset = inStars(uv) * 10.0;\n    vec2 dUv = uv - mouse;\n    float plas = plasma(uv + starOffset, dUv.x * dUv.y);\n    vec3 rainbow = spectral_gems(fract(plas + iTime / 30.0));\n    fragColor = vec4(max(rainbow, 0.6), 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}