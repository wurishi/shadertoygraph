{"ver":"0.1","info":{"id":"sslcRH","date":"1641940579","viewed":183,"name":"Mandelbrot Set with cam controls","username":"MrHAX00","description":"If you're on mobile pc controls wont work for you so instead go to the \"common\" tab and activate the mobile control scheme and compile the shader again, you'll get 6 buttons to move around and zoom in and out!\n\nOn pc the circle is for zooming in/out.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["2d","fractal","mandelbrotset"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ln20 2.995732273553991\n#define ln2 .6931471805599453\n#define pi 3.1415926535897932384626433832795\n#define pid5 1.5707963267948966192313216916398\n\n#define Circle(uv, Pos, Radius, Blur) smoothstep(Radius + Blur, Radius - Blur, length(uv - Pos));\n\nfloat Rectangle(vec2 uv, vec2 Pos, vec2 Size, float Blur) {\n    uv -= Pos;\n    \n    float XBand = smoothstep(-Size.x - Blur, -Size.x + Blur, uv.x) * smoothstep(Size.x + Blur, Size.x - Blur, uv.x);\n    float YBand = smoothstep(-Size.y - Blur, -Size.y + Blur, uv.y) * smoothstep(Size.y + Blur, Size.y - Blur, uv.y);\n    return XBand * YBand;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    //Normalize pixel coordinates:\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    float AspectRatio = iResolution.x/iResolution.y;\n    uv.x *= AspectRatio;\n    uv -= vec2(AspectRatio * .5, .5);\n    uv *= 2.;\n    float Zoom = ZoomData.y;\n    vec2 FractalCam = (uv - CamData.xy * Zoom);\n    FractalCam /= Zoom;\n    \n    //Calculate the fractal:\n    vec2 Value = FractalCam;\n    int Itered = 1;\n    for (int i = 1; i <= MaxIteration; i++) {\n        float x = Value.x;\n        float y = Value.y;\n        Value = vec2(x * x - y * y, 2. * x * y) + FractalCam;\n        if (dot(Value, Value) < 400.) {\n            Itered += 1;\n        } else {\n            break;\n        }\n    }\n    \n    //Plot the fractal:\n    vec3 Color;\n    if (Itered >= MaxIteration) {\n        Color = vec3(0.);\n    } else {\n#if Plotting == 1\n        float Temp = log(length(Value)) / ln20;\n        Temp = pow((float(Itered) - log(Temp) / ln2) * .00001, .5);\n        Color = vec3(\n                    cos(Temp * 720. + iTime) * .5 + .5,\n                    cos(Temp * 360. + iTime)*.5 + .5,\n                    cos(Temp * 180. + iTime)*.5 + .5\n        );\n#elif Plotting == 2\n        float Temp = pow((length(Value - 300.) - (cos(iTime * pi) * 10. + 20.)) / 380., 3.);\n        vec3 TempColor = vec3(\n                    cos(Temp * 2.5 - pid5) * .5 + .5,\n                    cos(Temp * 2.5 - pid5) * .5 + .5,\n                    0.\n        );\n        TempColor -= Temp * TempColor * .5;\n        \n        Temp = log(length(Value)) / ln20;\n        Temp = cos(pow((float(Itered) - log(Temp) / ln2) * .00001, .5) * 360. + iTime)*.5 + .5;\n        Color = vec3(\n            Temp,\n            Temp,\n            0.\n        ) * .2 + TempColor * .8;\n#elif Plotting == 3\n        float Temp = log(length(Value)) / ln20;\n        Temp = pow((float(Itered) - log(Temp) / ln2) * .00001, .5);\n        Color = vec3(\n                    cos(Temp * 900. + iTime) * .5 + .5,\n                    cos(Temp * 2700. + iTime - pid5)*.5 + .5,\n                    cos(Temp * 1800. + iTime - pid5)*.5 + .5\n        );\n#endif\n    }\n    \n    //Overlay the appropriate controls:\n#if (Mobile)\n    float Button1 = Rectangle(\n        vec2(\n            uv.x,\n            -abs(uv.y + .7625) - .7625\n        ),\n        vec2(AspectRatio - .125, -.875),\n        vec2(.1),\n        .001\n    );\n    \n    vec2 Mirror = vec2(AspectRatio - .4625, -.7625);\n    float Button2 = Rectangle(\n            -abs(Mirror - uv) + Mirror,\n        vec2(AspectRatio - .575, -.875),\n        vec2(.1),\n        .001\n    );\n    \n    float Mirror2 = AspectRatio - .35;\n    float MinusSign = Rectangle(\n        vec2(\n            -abs(uv.x - Mirror2) + Mirror2,\n            uv.y\n        ),\n        vec2(AspectRatio - .575, -.65),\n        vec2(.06, .005),\n        .001\n    );\n    \n    float PlusSign = Rectangle(\n        uv,\n        vec2(AspectRatio - .125, -.65),\n        vec2(.005, .06),\n        .001\n    );\n    \n    Color *= 1. - Button2 * .3;\n    Color *= 1. - Button1 * .3;\n    Color *= 1. - MinusSign;\n    Color += vec3(MinusSign);\n    Color *= 1.- PlusSign;\n    Color += vec3(PlusSign);\n#else\n    float Negate = 1.2 - Circle(\n        uv,\n        vec2(AspectRatio - .2, -.8125),\n        .16,\n        .001\n    );\n    \n    float Button1 = Negate * Circle(\n        uv,\n        vec2(AspectRatio - .2, -.8125),\n        .175,\n        .001\n    );\n    \n    Color *= 1. - Button1 * .3;\n    Color += vec3(ZoomData.x + .1) * Button1 * .3;\n#endif\n    \n    fragColor = vec4(Color, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Camera and button presses:\n\nfloat Rectangle(vec2 uv, vec2 Pos, vec2 Size, float Blur) {\n    uv -= Pos;\n    Size *= .5;\n    \n    float XBand = smoothstep(-Size.x - Blur, -Size.x + Blur, uv.x) * smoothstep(Size.x + Blur, Size.x - Blur, uv.x);\n    float YBand = smoothstep(-Size.y - Blur, -Size.y + Blur, uv.y) * smoothstep(Size.y + Blur, Size.y - Blur, uv.y);\n    return XBand * YBand;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    vec2 MouseAt = iMouse.xy/iResolution.xy;\n    \n    float AspectRatio = iResolution.x/iResolution.y;\n    MouseAt.x *= AspectRatio;\n    MouseAt -= vec2(AspectRatio * .5, .5);\n    MouseAt *= 2.;\n    \n#if Mobile == 1\n    int Address = int(fragCoord.x);\n    if (Address == ZoomAddress) {\n        fragColor = ZoomData;\n        \n        if (fragColor.w == 0.) {\n            fragColor = vec4(0., 1., 0., 1.);\n        }\n        \n        if (iMouse.w > 0.) {\n            fragColor.x = clamp(fragColor.x * -2. + Rectangle(\n            MouseAt,\n            vec2(AspectRatio - .125, -.65),\n            vec2(.1),\n            .001\n            ), 0., 1.);\n            \n            fragColor.z = clamp(fragColor.z * -2. + Rectangle(\n            MouseAt,\n            vec2(AspectRatio - .575, -.65),\n            vec2(.1),\n            .001\n            ), 0., 1.);\n        }\n        \n        if (fragColor.x > 0.) {\n            fragColor.y *= 1.025;\n        } else if (fragColor.z > 0.) {\n            fragColor.y /= 1.025;\n        }\n    } else if (Address == CamAddress) {\n        fragColor = CamData;\n        \n        if (fragColor.x == 0. && fragColor.y == 0.) {\n            fragColor = vec4(1., 0., 0., 0.);\n        }\n        \n        if (iMouse.w > 0.) {\n            float Hit1 = Rectangle(\n            MouseAt,\n            vec2(AspectRatio - .575, -.875),\n            vec2(.1),\n            .001\n            );\n            float Hit2 = Rectangle(\n                MouseAt,\n                vec2(AspectRatio - .35, -.875),\n                vec2(.1),\n                .001\n            );\n            float Hit3 = Rectangle(\n                MouseAt,\n                vec2(AspectRatio - .125, -.875),\n                vec2(.1),\n                .001\n            );\n            float Hit4 = Rectangle(\n                MouseAt,\n                vec2(AspectRatio - .35, -.65),\n                vec2(.1),\n                .001\n            );\n            \n            if (Hit1 > 0.) {\n                if (fragColor.z != 1.) fragColor.z = 1.;\n                else fragColor.z = 0.;\n            } else if (Hit2 > 0.) {\n                if (fragColor.z != 2.) fragColor.z = 2.;\n                else fragColor.z = 0.;\n            } else if (Hit3 > 0.) {\n                if (fragColor.z != 3.) fragColor.z = 3.;\n                else fragColor.z = 0.;\n            } else if (Hit4 > 0.) {\n                if (fragColor.z != 4.) fragColor.z = 4.;\n                else fragColor.z = 0.;\n            } else {\n                fragColor.z = 0.;\n            }\n        }\n        \n        float Zoom = MovementSpeed / ZoomData.y;\n        float Direction = fragColor.z;\n        \n        if (Direction == 1.) fragColor.x += Zoom;\n        else if (Direction == 2.) fragColor.y += Zoom;\n        else if (Direction == 3.) fragColor.x -= Zoom;\n        else if (Direction == 4.) fragColor.y -= Zoom;\n    }\n#else\n    int Address = int(fragCoord.x);\n    if (Address == ZoomAddress) {\n        fragColor = ZoomData;\n        \n        if (fragColor.w == 0.) {\n            fragColor = vec4(0., 1., 0., 1.);\n        }\n        \n        float Distance = length(vec2(AspectRatio - .2, -.8125) - MouseAt);\n        if (iMouse.w > 0. && Distance < .16) {\n            fragColor.x = 1.;\n        } else if (iMouse.z < 0.) {\n            fragColor.x = 0.;\n        } else if (fragColor.x == 1.) {\n            fragColor.y *= .99 + Distance * .05;\n        }\n    } else if (Address == CamAddress) {\n        fragColor = CamData;\n        \n        if (fragColor.x == 0. && fragColor.y == 0.) {\n            fragColor = vec4(1., 0., MouseAt);\n        }\n         \n        vec2 Delta = MouseAt - fragColor.zw;\n        \n        if (iMouse.w > 0. || ZoomData.x > 0. ) {\n            Delta = vec2(0.);\n        }\n        \n        fragColor.xy += Delta / clamp(ZoomData.y, .0001, 1. / 0.);\n        fragColor.zw = MouseAt;\n    }\n#endif\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"//Settings:\n#define Plotting 1 //Use a number between 1 and 3 (must be an int)\n#define MaxIteration 500\n\n//Set \"mobile\" to 1 to activate the mobile control scheme:\n#define Mobile 0\n#define MovementSpeed .01\n\n//Buffer addresses:\n//Camera position:\n#define CamAddress 0\n#define CamData texelFetch(iChannel0, ivec2(0), 0)\n//Zoom info:\n#define ZoomAddress 1\n#define ZoomData texelFetch(iChannel0, ivec2(1), 0)","name":"Common","description":"","type":"common"}]}