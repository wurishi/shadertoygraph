{"ver":"0.1","info":{"id":"wd23RR","date":"1548020364","viewed":170,"name":"Broken voronoi ","username":"theepicsnail","description":"Trying to build a 3d voronoi  but it's broken :(","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1416\n#define MAX_DIST 20.0\n#define EPS 0.0001\n#define ITR 100.0\n#define SDF_RESULT vec2\nvec2 normal_delta = vec2(.01,0);\nvec3 cell_delta = vec3(-1,0,1);\n\nvec3 lastCell = vec3(0);\nvec2 rotate(vec2 v, float angle) { return cos(angle)*v+sin(angle)*vec2(v.y,-v.x);}\nfloat rand(vec2 co) { return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);}\nvec2 rand2(vec2 co) { return fract(sin(vec2(dot(co.xy ,vec2(12.9898,78.233)),dot(co.yx,vec2(13.1898,73.231)))) * 43758.5453);}\nfloat rand3(vec3 co) { return fract(sin(dot(co.xyz ,vec3(12.9898,78.233, 49.566))) * 43758.5453);}\nmat3 lookat(vec3 fw) { fw=normalize(fw);vec3 rt=normalize(cross(fw,vec3(0.0,1.0,0.0)));return mat3(rt,cross(rt,fw),fw);}\n\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec3 vpos(vec3 cell) {\n    vec3 angle = iTime*cos(cell*123.93);\n    vec3 innerPos = cos(angle+rand3(cell))*0.5+.5;\n    return cell+innerPos;\n}\n\nSDF_RESULT SDF(vec3 ro, vec3 rd) {\n    vec4 d1 = vec4(MAX_DIST);\n    vec4 d2 = vec4(MAX_DIST);\n    vec4 d3 = vec4(MAX_DIST);\n    ro -= .5;\n    for(int dx = -1; dx <= 1; dx++)\n    for(int dy = -1; dy <= 1; dy++)\n    for(int dz = -1; dz <= 1; dz++) {\n        vec3 local_cell = floor(ro)+vec3(dx,dy,dz);\n        vec3 pos = vpos(local_cell);\n        float dist = length(pos-ro);\n        \n        if(dist < d1.w) {\n            d3 = d2;\n            d2 = d1;\n            d1 = vec4(pos, dist);\n            lastCell = local_cell;\n        }else if(dist < d2.w) {\n            d3 = d2;\n            d2 = vec4(pos, dist);\n        }else if(dist <d3.w) {\n            d3 = vec4(pos, dist);\n        }\n    }\n    \n    //vec3 mid = (d1+d2+d3).xyz/3.0;\n    //vec3 dir = normalize(cross((d2-d1).xyz, (d3-d1).xyz));\n    //return vec2(length(cross(dir,mid-ro))-.01,0);\n    \n    //return vec2( length(ro-d1.xyz-.5)-.1 );\n    //return vec2(length(ro-mid)-.1,0);\n    return vec2(max(d2-d1,d3-d2).w-.01,0);\n}\n\nvec3 EstNormal(vec3 ro, vec3 rd) {\n    float cx = SDF(ro+normal_delta.xyy, rd).x-SDF(ro-normal_delta.xyy, rd).x;\n    float cy = SDF(ro+normal_delta.yxy, rd).x-SDF(ro-normal_delta.yxy, rd).x;\n    float cz = SDF(ro+normal_delta.yyx, rd).x-SDF(ro-normal_delta.yyx, rd).x;\n    return normalize(vec3(cx,cy,cz));\n}\n\nvec3 scene(vec3 ro, vec3 rd, vec2 uv) {\n    vec3 p = ro;\n    float t;\n    float d;\n    float i = 0.0;\n    float c = 1.0;\n    vec3 pos;\n    SDF_RESULT result;\n    for(; i < ITR ; i++) {\n        result = SDF(pos=ro+rd*t,rd);\n           result *= .5;\n        t += d = result.x;\n        c = min(d,c);\n        if(t > MAX_DIST || d < EPS) break;\n    }\n   \tvec3 cell = lastCell;\n    vec3 normal = EstNormal(pos, rd);\n    vec3 color = hsv2rgb(vec3(rand3(cell),1,1));\n    if (i + 1. <= ITR)\n    \treturn color*dot(normal,-rd)/sqrt(t);\n    else\n        return vec3 (0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat tim=iTime;\n\tvec2 uv=fragCoord.xy/iResolution.xy;\n\ttim*=0.5;\n\tvec3 ro=vec3(cos(tim),cos(tim*0.3)*0.5,cos(tim*0.7))*min(0.5+tim*0.1+cos(tim*0.4)*0.5,1.5);\n\tvec3 rd=lookat(-ro)*normalize(vec3((fragCoord.xy-0.5*iResolution.xy)/iResolution.y,1.0));\n    \n    ro.yz *= .2;\n    ro.yz += .5;\n    ro.x += iTime*.5;\n    \n\tvec3 color=scene(ro,rd,fragCoord.xy);\n\tcolor=clamp(color,0.0,min(tim,1.0));\n\tfragColor = vec4(color,1.0);\n}\n","name":"Image","description":"","type":"image"}]}