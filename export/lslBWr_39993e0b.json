{"ver":"0.1","info":{"id":"lslBWr","date":"1496225381","viewed":110,"name":"MandelBrötchen","username":"goanautix","description":"MandelBrot set and deform Formular for 2d Space;","likes":1,"published":1,"flags":16,"usePreview":0,"tags":["mandelbrot","2dfractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define tH (iTime*0.5)\n#define tD (iTime*5.0)\n#define PI 3.1415926535\n// press F key to select the deform Formular\n#define fKey (texture(iChannel3, vec2(0.274509804, 0.25)).x)\n// press D key to map iChannel0 in the fractal\n#define dKey (texture(iChannel3, vec2(0.266666667, 0.25)).x)\n// press S key to show inside the fractal \n#define sKey (texture(iChannel3, vec2(0.325490196, 0.25)).x)\n// press A key to show the fractal on other ways\n#define aKey (texture(iChannel3, vec2(0.254901961, 0.25)).x)\n//------------------------------------------------------------------------>\n//\tsqrt(a^2 + b^2) = c == radius = length(a,b)\nfloat rr(vec2 uv){ \n    return (length(uv));\n    //\t   (sqrt((uv.x*uv.x)+(uv.y*uv.y)));\n}\n//  atan(a/b) = phi == angle\nfloat phi(vec2 uv){ return atan(uv.x/uv.y);}\n//  atan(b/a) = O == ?? \nfloat O(vec2 uv){ return atan(uv.y/uv.x);}\n//------------------------------------------------------------------------>\n// deform UV\nvec2 v1(vec2 uv){return vec2(sin(uv.x),sin(uv.y));}\nvec2 v2(vec2 uv){float r = rr(uv);r*=r;return (1.0/(r))*uv;}\nvec2 v3(vec2 uv){float r = rr(uv);r*=r; return vec2(uv.x*sin(r)-uv.y*cos(r),uv.x*cos(r)-uv.y*sin(r));}\nvec2 v4(vec2 uv){float r = rr(uv);return vec2((1.0/r)*(uv.x-uv.y)*(uv.x+uv.y),2.0*uv);}\nvec2 v5(vec2 uv){float r = rr(uv);float o = O(uv); return vec2(o/PI,r-1.0);}\nvec2 v6(vec2 uv){float r = rr(uv);float o = O(uv); return r*vec2(sin(o+r),cos(o-r));}\nvec2 v7(vec2 uv){float r = rr(uv);float o = O(uv); return r*vec2(sin(o*r),-cos(o*r));}\nvec2 v8(vec2 uv){float r = rr(uv);float o = O(uv); return (o/PI)*vec2(sin(PI*r),cos(PI*r));}\nvec2 v9(vec2 uv){float r = rr(uv);float o = O(uv); return (1.0/r)*vec2(cos(o)+sin(r),sin(o)-cos(r));}\nvec2 v10(vec2 uv){float r = rr(uv);float o = O(uv); return vec2(sin(o)/r,r*cos(o));}\nvec2 v11(vec2 uv){float r = rr(uv);float o = O(uv); return vec2(sin(o)*cos(r),cos(o)*sin(r));}\nvec2 v12(vec2 uv){float r = rr(uv);float o = O(uv);\treturn vec2(sin(r) / o, cos(o) / r); }\nvec2 v13(vec2 uv){float r = rr(uv);float o = O(uv);\treturn vec2(sin(ceil(r) / o), cos(ceil(o) / r)); }\nvec2 v14(vec2 uv){float r = rr(uv);float o = O(uv);\treturn vec2(r - o, o - r); }\nvec2 v15(vec2 uv){float r = rr(uv);float o = O(uv);\treturn uv / vec2(cos(r / o * PI), sin(o / r * PI)); }\nvec2 v16(vec2 uv){float r = rr(uv);float o = O(uv);\treturn uv * vec2(sin(r / o * PI), sin(o / r * PI)); }\n//------------------------------------------------------------------------>\n// mandelbrot whit diffrent break conditions\nfloat fractal(vec2 p, int ma){\n    vec2 f = p;\n    for (int i=0;i<ma;i++){\n    \tfloat x = f.x*f.x - f.y*f.y + p.x;\n        float y = f.x*f.y + f.x*f.y + p.y;\n        //if(x*y*p.x*p.y>=4.0){return 1.0;}\n        //if(length(f)>4.0){return 1.0;}\n        //if(length(f)>4.0){break;}\n        //if(dot(f,f)>=4.0){break;}\n    \tf = vec2(x,y);\n    }\n    f*=mat2(cos(tD),sin(tD),-sin(tD),cos(tD)); // rotate the Mandelbrot\n\treturn (sKey>0.5) ? ((aKey>0.5) ? 1.0-length(f*p)*0.9\n                         \t\t\t: 1.0-length(p-f)*0.9 )\n        \t\t\t  : ((aKey>0.5) ? f.x/f.y-length(f)*9.0\n                         \t\t\t: f.x*f.y-length(f)*2.0 );// *2 = clear // *0 = not clear\n}\n// Shuffle the iChannel0 on the mandelbrot\nvec4 fractalTex(vec2 p, int ma){\n    vec2 f = p;\n    \n    for (int i=0;i<ma;i++){\n    \tfloat x = f.x*f.x - f.y*f.y + p.x;\n        float y = f.x*f.y + f.x*f.y + p.y;\n        //if(x*y*p.x*p.y>=4.0){return vec4(0.0,0.0,0.0,1.0);}\n        //if(length(f)>4.0){return vec4(0.0,0.0,0.0,1.0);}\n        //if(length(f)>3.0){break;}\n        if(dot(f,f)>4.0){break;}\n        f = vec2(x,y);\n    }\n    f*=-mat2(cos(tH),sin(tH),-sin(tH),cos(tH));\n\treturn texture(iChannel0, f);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy-0.5;\n    uv.x*= iResolution.x/iResolution.y;\n    //uv.y+= 0.1;\n    //uv*=mat2(0.0,-1.0,1.0,0.0);// 90° rotation\n   // uv.y *= (uv.x< 0.0) ? -1.0 : 1.0;\n    uv*=30.0 * ((iMouse.y == 0.0) ? 1.0 : (iMouse.y/iResolution.y));\n    vec2 iv = (uv.x<0.0) ? vec2(uv.x,uv.y*-1.0) : uv ;// invert y if x<0\n  \t//-----------------\n    // 1/17 = 0.0833333333 \n    float fPart = 0.0588235294;\n    float t = fract(((fKey>0.5) ? ((iMouse.x == 0.0) ? 1.0 : (iMouse.x/iResolution.x))*17.0 : tD ) * fPart); //t = 0-1 in 24 sec\n    // select next formular every 2 sec \n    uv = (t<fPart) \t\t? v1(uv) \t: \n    \t (t<fPart*2.0) \t? v2(uv) \t: \n    \t (t<fPart*3.0) \t? v3(uv) \t: \n         (t<fPart*4.0) \t? v4(uv) \t: \n    \t (t<fPart*5.0) \t? v5(iv) \t: \n    \t (t<fPart*6.0) \t? v6(iv) \t: \n         (t<fPart*7.0) \t? v7(iv) \t: \n    \t (t<fPart*8.0) \t? v8(iv) \t: \n    \t (t<fPart*9.0) \t? v9(iv) \t: \n         (t<fPart*10.0) ? v10(iv) \t: \n    \t (t<fPart*11.0)\t? v11(iv) \t: \n    \t (t<fPart*12.0)\t? v12(iv) \t: \n    \t (t<fPart*13.0)\t? v13(iv) \t: \n    \t (t<fPart*14.0)\t? v14(iv) \t: \n    \t (t<fPart*15.0)\t? v15(iv) \t:  \n    \t (t<fPart*16.0)\t? v16(uv) \t: uv ;\n    //uv.x=-abs(-uv.x);\n    //uv.y=abs(uv.y);\n    //-----------------\n    float f = fractal(uv,6);\n    // uv.y=-abs(uv.y);\n    vec4 fTex = fractalTex(uv,6);\n    fragColor = vec4(((dKey > 0.5) ? fTex.xyz : vec3(f)),1.0);\n\t//fragColor = (fTex.x != 0.0) ? vec4(fTex) : vec4(vec3(0.3,0.1,0.0)*(1.0-length(uv*0.2)),1.0);\n}","name":"Image","description":"","type":"image"}]}