{"ver":"0.1","info":{"id":"wtsGWM","date":"1556649160","viewed":650,"name":"slow raster SDF","username":"elenzil","description":"experimenting with iterative distance-to-raster. obviously not usable for realtime.\nmouse around: vert = threshhold. horiz=split view. lower-left = autopilot.","likes":8,"published":3,"flags":32,"usePreview":0,"tags":["sdf","texture","raster","image","slow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 RGBA, in vec2 XY)\n{\n    ivec2 IJ = ivec2(XY);\n    vec2 UV = XY/iResolution.xy;\n    vec3 dry = texture(iChannel0, UV).rgb;\n    vec3 dst = texelFetch(iChannel1, IJ, 0).rgb;\n    float f;\n    \n    float horizDiv = 0.5;\n    \n    if (iMouse.x + iMouse.y > 50.0) {\n        horizDiv = iMouse.x / iResolution.x;\n    }\n    \n    float Q = dst.b;\n    \n    f = cos(Q * 1.0) * 0.5 + 0.5;\n    \n    float fade = UV.x < horizDiv ? 1.0 : 0.6;\n    \n    vec3 rgb = vec3(f);\n    if (Q > 0.0) {\n        rgb = 1.0 - (rgb) * (1.0 - vec3(0.4, 0.5, 0.6));\n    }\n    else {\n        rgb = 1.0 - (rgb) * (1.0 - vec3(0.6, 0.3, 0.2));\n    }\n    rgb = mix(dry, rgb, fade);\n    RGBA = vec4(rgb, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvoid mainImage(out vec4 RGBA, in vec2 XY)\n{\n    if (RESTART) {\n        RGBA = texture(iChannel0, XY/iResolution.xy);\n    }\n    else {\n        RGBA = texelFetch(iChannel1, ivec2(XY), 0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage(out vec4 RGBA, in vec2 XY)\n{\n    ivec2 IJ    = ivec2(XY);\n    ivec2 iRes  = ivec2(iResolution.xy);\n    \n    ivec2 TL = ivec2(-1,  1);\n    ivec2 TM = ivec2( 0,  1);\n    ivec2 TR = ivec2( 1,  1);\n    ivec2 ML = ivec2(-1,  0);\n    ivec2 MM = ivec2( 0,  0);\n    ivec2 MR = ivec2( 1,  0);\n    ivec2 BL = ivec2(-1, -1);\n    ivec2 BM = ivec2( 0, -1);\n    ivec2 BR = ivec2( 1, -1);\n    \n    ivec2[] neighborsDiagonal = ivec2[] (\n        TL,\n        TR,\n        BL,\n        BR\n    );\n\n    ivec2[] neighborsStraight = ivec2[] (\n        TM,\n        ML,\n        MR,\n        BM\n    );\n    \n    #define dIJs neighborsStraight\n//  #define dIJs neighborsDiagonal\n\n    vec3 me;\n    \n    if (RESTART) {\n        float thresh = iMouse.y / iResolution.y;\n        if (iMouse.x < 50.0 && iMouse.y < 50.0) {\n            thresh = cos(iTime + 0.55) * 0.5 + 0.5;\n        }\n            \n        me.xy = XY;\n        float bright = length(texelFetch(iChannel0, IJ, 0).rgb) / sqrt(3.0);\n        if (bright > thresh) {\n            me.b = -fBIG;\n        }\n        else {\n            me.b =  fBIG;\n        }\n    }\n    else {\n        // find minimum in neighborhood\n        me = texelFetch(iChannel1, IJ, 0).rgb;\n        \n        for (int n = 0; n < 4; ++n) {\n            ivec2 ij = IJ + dIJs[n] * 1;\n            if (ij.x < 0 || ij.y < 0 || ij.x >= iRes.x || ij.y >= iRes.y) {\n                continue;\n            }\n            vec3 tmp = texelFetch(iChannel1, ij, 0).xyz;\n            if (me.b > 0.0) {\n                if (tmp.b < me.b) {\n                    // this sqrt could be deferred until final pass.\n                    float d = length(tmp.xy - XY);\n                    if (d < me.b) {\n                        me.xy = tmp.xy;\n                        me.b  = d;\n                    }\n                }\n            }\n            else {\n                if (tmp.b > me.b) {\n                    // this sqrt could be deferred until final pass.\n                    float d = -length(tmp.xy - XY);\n                    if (d > me.b) {\n                        me.xy = tmp.xy;\n                        me.b  = d;\n                    }\n                }\n            }\n        }\n    }\n    \n    RGBA = vec4(me, 0.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// do we really need a few frames to let the textures load ?\n#define fBIG           1e20\n\n#define RESTART (iFrame < 5 || iFrame % 1000 == 0 || ( iMouse.z > 0.0))\n","name":"Common","description":"","type":"common"}]}