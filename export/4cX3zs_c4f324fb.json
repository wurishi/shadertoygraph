{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"buffer","id":"XsXGR8","filepath":"/media/previz/buffer01.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"channel":1,"type":"buffer","id":"4dXGR8","filepath":"/media/previz/buffer00.png","sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    const int steps = GLOW_SAMPLES;\n    vec3 col = vec3(0.);\n    \n    for (int i = 0; i< steps; ++i)\n    {\n        float f = float(i)/float(steps);\n        f = (f -.5)*2.;\n        float factor = GLOW_DISTANCE;\n        vec2 nuv = uv+vec2(0.,f*factor);\n        col += texture(iChannel0, uv+vec2(0.,f*factor)).xyz/float(steps);\n    }\n    \n    vec3 rgb = texture(iChannel1, uv).xyz+GLOW_OPACITY*pow(col, vec3(GLOW_POW));\n    rgb = pow(rgb*1.2, vec3(2.2));\n    vec2 cuv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    // Trial to flare with mipmap\n    /*\n    rgb = vec3(0.);\n    float cnt =7.;\n    float acc = 0.;\n    for (float j = 0.; j < cnt; ++j)\n    {\n        float f = sat(j/cnt);\n        f = f*f*f;\n        acc += f;\n      rgb += texture(iChannel1, uv, j).xyz*f;\n    }\n    rgb /= acc;\n    */\n    rgb *= mix(.5,1.,1.-sat((length(uv-.5)-.2)*2.5));\n    fragColor = vec4(rgb,1.0);\n}","name":"Image","description":"","type":"image"},{"outputs":[],"inputs":[],"code":"#define GLOW_SAMPLES 32\n#define GLOW_DISTANCE 0.1\n#define GLOW_POW 1.9\n#define GLOW_OPACITY .7\n\n#define sat(a) clamp(a, 0., 1.)\n#define PI 3.14159265\n#define TAU (PI*2.0)\n\nmat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\nfloat hash11(float seed)\n{\n    return mod(sin(seed*123.456789)*123.456,1.);\n}\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n    float fov = 1.;\n    vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n    vec3 u = normalize(cross(rd, r));\n    return normalize(rd+fov*(r*uv.x+u*uv.y));\n}\n\nvec2 _min(vec2 a, vec2 b)\n{\n    if (a.x < b.x)\n        return a;\n    return b;\n}\n\nfloat _cucube(vec3 p, vec3 s, vec3 th)\n{\n    vec3 l = abs(p)-s;\n    float cube = max(max(l.x, l.y), l.z);\n    l = abs(l)-th;\n    float x = max(l.y, l.z);\n    float y = max(l.x, l.z);\n    float z = max(l.x, l.y);\n    \n    return max(min(min(x, y), z), cube);\n}\n\nfloat _cube(vec3 p, vec3 s)\n{\n    vec3 l = abs(p)-s;\n    return max(l.x, max(l.y, l.z));\n}","name":"Common","description":"","type":"common"},{"outputs":[{"channel":0,"id":"4dXGR8"}],"inputs":[{"channel":0,"type":"texture","id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}},{"channel":1,"type":"buffer","id":"4dXGR8","filepath":"/media/previz/buffer00.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"channel":2,"type":"texture","id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"code":"float _time;\nfloat _seed;\nfloat rand()\n{\n    _seed++;\n    return hash11(_seed);\n}\nfloat _grid(vec3 p, vec3 sp, float sz)\n{\n    p = mod(p+sp*.5,sp)-sp*.5;\n    return min(length(p.xy)-sz, min(length(p.xz)-sz, length(p.yz)-sz));\n}\n// Thanks IQ :)\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n// Thanks IQ :)\nfloat sdQuadraticCircle( in vec2 p )\n{\n    p = abs(p); if( p.y>p.x ) p=p.yx; // symmetries\n\n    float a = p.x-p.y;\n    float b = p.x+p.y;\n    float c = (2.0*b-1.0)/3.0;\n    float h = a*a + c*c*c;\n    float t;\n    if( h>=0.0 )\n    {   \n        h = sqrt(h);\n        t = sign(h-a)*pow(abs(h-a),1.0/3.0) - pow(h+a,1.0/3.0);\n    }\n    else\n    {   \n        float z = sqrt(-c);\n        float v = acos(a/(c*z))/3.0;\n        t = -z*(cos(v)+sin(v)*1.732050808);\n    }\n    t *= 0.5;\n    vec2 w = vec2(-t,t) + 0.75 - t*t - p;\n    return length(w) * sign( a*a*0.5+b-1.5 );\n}\n\nfloat sdFour(vec2 uv)\n{\n    float thick = 0.03;\n    vec2 top = vec2(0.,.2);\n    vec2 left = vec2(-.15,0.);\n    float vert = sdSegment(uv, vec2(0.,-.07), top)-thick;\n    float horiz = sdSegment(uv, left, vec2(0.,.0))-thick;\n    float diag = sdSegment(uv, left, top)-thick;\n    return min(min(vert, horiz), diag);\n}\n\n\n\nfloat sdZero(vec2 uv)\n{\n    float thick = 0.03;\n    uv.y -= .065;\n    uv.y *= .7;\n    float size = .08;\n    float shape = sdQuadraticCircle(uv/size)*size;\n    return abs(shape)-thick;\n}\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\nvec2 map(vec3 p)\n{\n    p.x *= -1.;\n    vec2 acc = vec2(10000.,-1.);\n\n    //acc = _min(acc, vec2(length(p)-1., 0.));\n    \n    float ground = -p.y+.1;\n    acc = _min(acc, vec2(ground, 0.));\n    \n    float sep = .37;\n\n    vec3 p404 = p-vec3(.1,-0.0,-0.1); \n    vec3 pfl = p404-vec3(-sep+.15, 0.,0.);\n    vec3 pz = p404;\n    vec3 pfr = p404-vec3(sep, 0.,0.);\n    float thick = .05;\n\n    float tr= _time*4.;\n    pfl.yz *= r2d(.25*sin(tr)-1.);\n    pz.yz *= r2d(.25*sin(tr+1.)-1.);\n    pfr.yz *= r2d(.25*sin(tr+2.)-1.);\n\n\n    float signtopl = sign(pfl.y - -0.04);\n    float signtopz = sign(pz.y - -0.04);\n    float signtopr = sign(pfr.y - -0.04);\n\n    \n    float fourl = sdFour(pfl.xz);\n    float thickl = abs(pfl.y)-thick;\n    fourl = max(fourl, thickl);\n    acc = _min(acc, vec2(fourl, signtopl*1.));\n\n    float zero = sdZero(pz.xz);\n    float thickz = abs(pz.y)-thick;\n    zero = max(zero, thickz);\n    acc = _min(acc, vec2(zero, signtopz*2.));\n    \n    float fourr = sdFour(pfr.xz);\n    float thickr = abs(pfr.y)-thick;\n    fourr = max(fourr, thickr);\n    acc = _min(acc, vec2(fourr, signtopr*3.));\n    \n    for (int i = 0; i < 12; ++i)\n    {\n        float an = float(i);\n        float rad = 1.8+an*.01;\n        vec3 pc = p+rad*vec3(sin(an*.8), sin(an*5.+_time)*.1, cos(an))*.7;\n        pc += vec3(-.5,0.,-.5)*.3;\n        float sz = mix(.02,.3, sin(an*10.)*.5+.5);\n        float cube = sdRoundBox(pc, vec3(sz), .01);\n        acc = _min(acc, vec2(cube, 4.));\n    }\n    \n    return acc;\n}\n\nvec3 getNorm(vec3 p, float d)\n{\n    vec2 e = vec2(0.001, 0.);\n    return normalize(vec3(d)-vec3(map(p-e.xyy).x, map(p-e.yxy).x, map(p-e.yyx).x));\n}\n\nvec3 trace(vec3 ro, vec3 rd, int steps)\n{\n    vec3 p = ro;\n    for (int i = 0; i < steps && distance(p, ro) < 50.; ++i)\n    {\n        vec2 res = map(p);\n        if (res.x < 0.001)\n            return vec3(res.x, distance(p, ro), res.y);\n        p+=rd*res.x;\n    }\n    return vec3(-1.);\n}\nvec3 _ldir = normalize(vec3(-1.,-1.,-.5));\nvec3 getMat(vec3 p, vec3 n, vec3 rd, vec3 res)\n{\n    vec3 col = n*.5+.5;\n    //if (res.z == 0. || res.z == 4.)\n    {\n        vec2 uvg = p.xz;\n        vec2 repg = vec2(.3);\n        uvg = mod(uvg+repg*.5,repg)-repg*.5;\n        float cir = length(uvg)-.005;\n        vec3 albedo = mix(vec3(0.290,0.290,0.349)*2., vec3(1.000,1.000,1.000)*2., 1.-sat(cir*200.));\n        if (res.z == 4.)\n        {\n            albedo = vec3(0.290,0.290,0.349)*2.;\n        }\n        col = albedo*sat(dot(_ldir, n));\n\n        {\n            if ((res.z) == -1. || (res.z) == -2. || (res.z) == -3.)\n            {\n                col = vec3(0.992,0.729,0.455);\n            }\n        }\n    }\n\n    return col;\n}\n\nvec3 rdr(vec2 uv)\n{\n    vec3 col = vec3(0.);\n    \n    vec3 ro = vec3(1.,-1.,-1.);\n    vec3 ta = vec3(0.,0.,0.);\n    vec3 rd = normalize(ta-ro);\n    \n    rd = getCam(rd, uv);\n    vec3 res = trace(ro, rd, 128);\n    float depth = 100.;\n    if (res.y > 0.)\n    {\n        depth = res.y;\n        vec3 p = ro+rd*res.y;\n        vec3 n = getNorm(p, res.x);\n        col = vec3(0.);//n*.5+.5;\n        vec3 resshadow = trace(p+n*0.001, _ldir+(vec3(rand(), rand(), rand())-.5)*.3, 64);\n        col = getMat(p, n, rd, res);\n        col *= mix(1.,.5, float(resshadow.y > 0.));\n                p = p + n*0.01;\n        vec3 refl = rd;\n        for (float i = 0.; i < 3.; ++i)\n        {\n            vec3 diff = normalize(vec3(rand(), rand(), rand())-.5);\n            if (dot(diff, n) < 0.01)\n                diff = -diff;\n            vec3 spec = normalize(reflect(refl,n));\n            refl = normalize(mix(diff, spec, .6));\n            vec3 resrefl = trace(p, refl, 64);\n            if (resrefl.y > 0.)\n            {\n                vec3 prefl = p+refl*resrefl.y;\n                vec3 nrefl = getNorm(prefl, resrefl.x);\n                col += getMat(prefl, nrefl, refl, resrefl)*.3;\n                p = prefl+nrefl*0.01;\n            }\n            else\n                break;\n        }\n    }\n    col = mix(col, vec3(.5), 1.-exp(-depth*0.017));\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    _time = max((iTime-1.)*.25,0.);\n    vec2 ouv = (fragCoord)/iResolution.xy;\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n\n    uv *= 1.7;\n    vec3 col = vec3(0.);\n    int cnt = 1;\n    for (int i = 0; i < cnt; ++i)\n    {\n        _seed = iTime+texture(iChannel0, uv).x+float(i);\n        vec2 off = .75*(vec2(rand(), rand())-.5)*2.*1./iResolution.x;\n        vec3 rgb = rdr(uv+off);\n        rgb = sat(rgb);\n        col += rgb;\n    }\n    col = col /float(cnt);\n    vec2 off = vec2(1., -1.)/(iResolution.x*1.5);\n    \n    /*if (true)//diff > 0.3) // Not so cheap antialiasing\n    {\n        //col = vec3(1.,0.,0.);\n        vec3 acc = col;\n        acc += rdr(uv+off.xx);\n        acc += rdr(uv+off.xy);\n        acc += rdr(uv+off.yy);\n        acc += rdr(uv+off.yx);\n        col = acc/5.;\n        \n    }*/\n    col *= 2.0/(col+1.);\n    col = pow(col, vec3(1.8));\n    \n    \n    col = sat(col);\n    float cir = length(uv-vec2(.1,0.))-.1;\n//    col = mix(col, vec3(1.), 1.-sat(cir*5.));\n    if (iFrame > 0)\n        col = mix(col, texture(iChannel1, fragCoord/iResolution.xy).xyz, .9);//mix(.7,.95,sat(cir*5.)));\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"outputs":[{"channel":0,"id":"XsXGR8"}],"inputs":[{"channel":0,"type":"buffer","id":"4dXGR8","filepath":"/media/previz/buffer00.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    const int steps = GLOW_SAMPLES;\n    vec3 col = vec3(0.);\n    \n    for (int i = 0; i< steps; ++i)\n    {\n        float f = float(i)/float(steps);\n        f = (f -.5)*2.;\n        float factor = GLOW_DISTANCE;\n        vec2 nuv = uv+vec2(f*factor, 0.);\n        col += texture(iChannel0, uv+vec2(f*factor,0.)).xyz/float(steps);\n    }\n    fragColor = vec4(col,1.0);\n}","name":"Buffer B","description":"","type":"buffer"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":true,"mFlagMusicStream":false},"info":{"id":"4cX3zs","date":"1734773053","viewed":206,"name":"404page","username":"z0rg","description":"The visual I used as a 404 page on my website \nCheck it there https://www.z0rg.dev/erger","likes":25,"published":3,"flags":32,"usePreview":0,"tags":["404page"],"hasliked":0,"parentid":"","parentname":""}}