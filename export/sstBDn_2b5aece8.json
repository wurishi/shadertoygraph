{"ver":"0.1","info":{"id":"sstBDn","date":"1656357592","viewed":50,"name":"WEREM::Voronoi Test","username":"weremsoft","description":"Just a voronoi pattern test.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["voronoiartofcode"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 N22(vec2 p)\n{\n    vec3 a = fract(p.xyx * vec3(123.34, 234.4, 345.6));\n    a += dot(a, a+34.45);\n    return fract(vec2(a.x*a.y, a.y*a.z));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5 * iResolution.xy) / iResolution.y;\n\n    float m = 0.;\n    \n    float t = iTime*.2;\n    \n    float minDist = 100.;\n    \n    for(float i = 0.; i < 100.; i++)\n    {\n        vec2 n = N22(vec2(i));\n        vec2 p = sin(n * t);\n        float d = length(uv-p);\n        m += smoothstep(.02, .01, d);\n        \n        if(d < minDist)\n        {\n            minDist = d;\n        }\n    }\n\n    // Time varying pixel color\n    vec3 col = smoothstep(0., .8, vec3(minDist*2.));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}