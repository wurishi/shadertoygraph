{"ver":"0.1","info":{"id":"lsjBzz","date":"1499254316","viewed":408,"name":"Cube Edges","username":"wutzhuhn","description":"This shader will iterate over all possible combinations of the edges of a cube. Since a cube has 12 edges there are 2^12 = 4096 variations.\n\nThe interpolation function used for the animation: http://www.wolframalpha.com/input/?i=1%2F(1%2Be%5E(sin(x)*8))","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","animation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec2 edges[] = vec2[](\n    vec2(0.1, 0.25), vec2(0.5, 0.1 ), // a, b\n    vec2(0.5, 0.1 ), vec2(0.9, 0.25), // b, c\n    vec2(0.9, 0.25), vec2(0.5, 0.4 ), // c, d\n    vec2(0.5, 0.4 ), vec2(0.1, 0.25), // d, a\n    \n    vec2(0.1, 0.75), vec2(0.5, 0.6 ), // e, f\n    vec2(0.5, 0.6 ), vec2(0.9, 0.75), // f, g\n    vec2(0.9, 0.75), vec2(0.5, 0.9 ), // g, h\n    vec2(0.5, 0.9 ), vec2(0.1, 0.75), // h, e\n    \n    vec2(0.1, 0.25), vec2(0.1, 0.75), // a, e\n    vec2(0.5, 0.1 ), vec2(0.5, 0.6 ), // b, f\n    vec2(0.9, 0.25), vec2(0.9, 0.75), // c, g\n    vec2(0.5, 0.4 ), vec2(0.5, 0.9 ));// d, h\n\nfloat line(vec2 p1, vec2 p2, float f)\n{\n    vec2 d = (p1 - p2) * f;\n    return length(p1 - d * clamp(dot(p1, d) / dot(d, d), 0.0, 1.0));\n}\n\nfloat scene(vec2 p)\n{\n    float all = 100000.0;\n    for (int i = 0; i < 12; ++i)\n    {\n        float pwr = pow(2.0, float(i));\n        // feeding a sin into a sigmoid function to get a nice animation:\n        float t = 1.0 / (1.0 + exp(-sin(iTime / pwr + 1.0) * 8.0 * pwr)); \n        all = min(all, line(edges[i * 2] - p, edges[i * 2 + 1] - p, t));\n    }\n    return all;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float thickness = 0.5 / iResolution.y;\n\n\tvec2 uv = (fragCoord.xy - vec2((iResolution.x - iResolution.y) / 2.0, 0.0)) / iResolution.yy;\n    float d = scene(uv);\n    float p = clamp((d - thickness) * iResolution.y, 0.0, 1.0) * // main lines\n              (0.9 + 0.1 * (sin(d * iResolution.y * 2.0) * 0.5 + 0.5)) * // light background lines\n              smoothstep(0.0, 1.0, d * 1.25 + 0.75); // shadow around main lines\n\tfragColor = vec4(mix(vec3(0.25, 0.3, 0.35), vec3(0.75, 0.85, 0.9), p), 1.0);\n}","name":"Image","description":"","type":"image"}]}