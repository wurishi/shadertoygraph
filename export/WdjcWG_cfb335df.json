{"ver":"0.1","info":{"id":"WdjcWG","date":"1587370936","viewed":198,"name":"Depth of Field Approx","username":"sanjanarao","description":"CIS461 University of Pennsylvania","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["cis461"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float normpdf(in float x, in float sigma)\n{\n    return 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    const int mSize = 11;\n    const int kSize = (mSize - 1)/2;\n    float kernel[mSize];\n    vec3 final_color = vec3(0.0);\n\n    //create the 1-D kernel\n    float sigma = 20.0;\n    float Z = 0.0;\n    for (int j = 0; j <= kSize; ++j) {\n        kernel[kSize+j] = kernel[kSize-j] = normpdf(float(j), sigma);\n    }\n\n    //get the normalization factor (as the gaussian has been clamped)\n    for (int j = 0; j < mSize; ++j) {\n        Z += kernel[j];\n    }\n    \n    //read out the texels\n    for (int i=-kSize; i <= kSize; ++i) {\n        for (int j=-kSize; j <= kSize; ++j) {\n            final_color += kernel[kSize+j]*kernel[kSize+i] * texture(iChannel0, (fragCoord.xy+vec2(float(i),float(j))) / iResolution.xy).rgb;\n\n        }\n    }\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 unblurredColor = texture(iChannel0, uv);\n\n    fragColor = vec4(mix(unblurredColor.rgb, final_color/(Z*Z), unblurredColor.a), 1.0);\n    \n    float vignette = smoothstep(2., 0.0, length((2.0 * uv) - vec2(1.0)));\n    fragColor = mix(vec4(0., 0., 0., 1.0), fragColor, vignette);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int RAY_STEPS = 256;\nconst vec3 lightPos = vec3(0., 7.45, -1.5);\nconst vec3 eyePos = vec3(0.0, 4.5, -20.0);\nconst vec3 refPos = vec3(0., 2.5, 0.);\nconst float PI = 3.14159265359;\nconst float FOVY = 19.5 * PI / 180.;\nconst float FOCAL_LENGTH = 23.0;\nconst float FOCAL_RANGE = 10.0;\n\nstruct Intersection\n{\n    float t;\n    vec3 color;\n    vec3 p;\n    int object;\n};\n    \n/***************** BASIC SCENE SET UP *******************/\n\n#define FLOOR_SDF plane(pos, vec4(0, 1, 0, 2.5));\n#define RED_WALL_SDF plane(pos, vec4(1, 0, 0, 5));\n#define GREEN_WALL_SDF plane(pos, vec4(-1, 0, 0, 5));\n#define BACK_WALL_SDF plane(pos, vec4(0, 0, -1, 5));\n#define CEILING_SDF plane(pos, vec4(0, -1, 0, 7.5));\n#define TALL_BOX_SDF box(rotateY(pos + vec3(2, 0, -3), 27.5 * PI / 180.), vec3(1.5, 3., 1.5));\n#define SMALL_BOX_SDF box(rotateY(pos + vec3(-2, 1, -0.75), -17.5 * PI / 180.), vec3(1.5));\n\nconst int FLOOR_ID = 0;\nconst int RED_WALL_ID = 1;\nconst int GREEN_WALL_ID = 2;\nconst int BACK_WALL_ID = 3;\nconst int CEILING_ID = 4;\nconst int TALL_BOX_ID = 5;\nconst int SMALL_BOX_ID = 6;\n\n\nvec3 rotateY(vec3 p, float a) {\n    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);\n}\n\n// Box with side lengths b\nfloat box(vec3 p, vec3 b)\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat plane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\n\nfloat sceneMap3D(vec3 pos) {\n    float flr = FLOOR_SDF;\n    float red_wall = RED_WALL_SDF;\n    float green_wall = GREEN_WALL_SDF;\n    float back_wall = BACK_WALL_SDF;\n    float ceiling = CEILING_SDF;\n    float tall_box = TALL_BOX_SDF;\n    float small_box = SMALL_BOX_SDF;\n    return min(back_wall, min(red_wall, \n        min(green_wall, min(ceiling, min(flr, min(tall_box, small_box))))));\n}\n\nvoid sceneMap3D(vec3 pos, out float t, out int obj) {\n    t = FLOOR_SDF;\n    obj = FLOOR_ID;\n\n    float t2 = RED_WALL_SDF\n    if (t2 < t) {\n        t = t2;\n        obj = RED_WALL_ID;\n    } \n    t2 = GREEN_WALL_SDF;\n    if (t2 < t) {\n        t = t2;\n        obj = GREEN_WALL_ID;\n    }\n    t2 = BACK_WALL_SDF;\n    if (t2 < t) {\n        t = t2;\n        obj = BACK_WALL_ID;\n    }\n    t2 = CEILING_SDF;\n    if (t2 < t) {\n        t = t2;\n        obj = CEILING_ID;\n    }\n    t2 = TALL_BOX_SDF;\n    if (t2 < t) {\n        t = t2;\n        obj = TALL_BOX_ID;\n    }\n    t2 = SMALL_BOX_SDF\n    if (t2 < t) {\n        t = t2;\n        obj = SMALL_BOX_ID;\n    }\n}\n\n/***************** RAY MARCHING LOGIC *******************/\n\nvec3 rayCast(vec3 eye, vec3 ref, vec2 uv) {\n\n    float len = tan(FOVY) * distance(eye, ref);\n    vec3 H = normalize(cross(vec3(0.0, 1.0, 0.0), ref - eye));\n    vec3 V = normalize(cross(H, eye - ref));\n    V *= len;\n    H *= len * iResolution.x / iResolution.y;\n    vec3 p = ref + uv.x * H + uv.y * V;\n    return normalize(p - eye);\n}\n\nvoid march(vec3 origin, vec3 dir, out float t, out int hitObj)\n{\n    t = 0.001;\n    for(int i = 0; i < RAY_STEPS; ++i)\n    {\n        vec3 pos = origin + t * dir;\n        float m;\n        sceneMap3D(pos, m, hitObj);\n        if(m < 0.01) { return; }\n        t += m;\n    }\n    t = -1.0;\n    hitObj = -1;\n}\n\n/***************** MATERIALS *******************/\n\nvec3 computeNormal(vec3 pos)\n{\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize( vec3( sceneMap3D(pos + epsilon.yxx) - sceneMap3D(pos - epsilon.yxx),\n                            sceneMap3D(pos + epsilon.xyx) - sceneMap3D(pos - epsilon.xyx),\n                            sceneMap3D(pos + epsilon.xxy) - sceneMap3D(pos - epsilon.xxy)));\n}\n\nvec3 computeMaterial(int hitObj, vec3 p, vec3 nor, vec3 lightDir, vec3 view) {\n    float lambert = max(0., dot(lightDir, nor));\n\n    if (hitObj == 0) { return vec3(0.85, 0.81, 0.78) * lambert; }\n    if (hitObj == 1) { return vec3(0.63, 0.065, 0.05) * lambert; }\n    if (hitObj == 2) { return vec3(0.14, 0.45, 0.091) * lambert; }\n    if (hitObj == 3) { return vec3(0.85, 0.81, 0.78) * lambert; }\n    if (hitObj == 4) { return vec3(0.85, 0.81, 0.78) * lambert; }\n    if (hitObj == 5) { return vec3(0.85, 0.81, 0.78) * lambert; }\n    if (hitObj == 6) { return vec3(0.85, 0.81, 0.78) * lambert; }\n    \n    else { return vec3(0., 0., 1) * lambert; }\n}\n\n/***************** BASIC FUNCTIONALITY *******************/\n\nIntersection sdf3D(vec3 dir, vec3 eye)\n{\n    float t;\n    int hitObj;\n    march(eye, dir, t, hitObj);\n\n    vec3 isect = eye + t * dir;\n    vec3 nor = normalize(computeNormal(isect));\n    vec3 lightDir = normalize(lightPos - isect);\n    \n    vec3 surfaceColor = computeMaterial(hitObj, isect, nor, lightDir, normalize(eye - isect));\n    \n    return Intersection(t, surfaceColor, isect, hitObj);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //Convert to range [-1,1]\n    uv = uv * 2.0 - vec2(1.);\n    \n    vec3 eye = eyePos;\n    vec3 ref = refPos;\n\n    vec3 dir = rayCast(eye, ref, uv);\n    \n    Intersection isect = sdf3D(dir, eye);\n     \n     //Animated focal length\n    float variable = FOCAL_LENGTH * cos(iTime);\n\n    //DOF logic\n    float distAlongCamZ = abs(dot(normalize(ref - eye), (isect.p - eye)));\n    float dofZ = min(1.0, abs(distAlongCamZ - variable) / FOCAL_RANGE);\n\n    // Output to screen\n    fragColor = vec4(isect.color, dofZ);\n    \n    \n\n}","name":"Buffer A","description":"","type":"buffer"}]}