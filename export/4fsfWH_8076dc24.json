{"ver":"0.1","info":{"id":"4fsfWH","date":"1723701919","viewed":90,"name":"theMilkyWay","username":"lukejsmithluo","description":"Thanks for https://www.shadertoy.com/view/ldKGDd*/","likes":2,"published":1,"flags":0,"usePreview":1,"tags":["milkyway"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define DEVICE_TYPE 0\n#define SPEED 0.1\n#define STAR_NUMBER 100\n#define ITER 4\n\n//declare color variable\nvec3 col1 = vec3(18.0, 90.0, 146.0) / 256.0;\nvec3 col2 = vec3(59.0, 149.0, 194.0) / 256.0;\n\n//create Rot Function\nmat2 Rot2(in float angle)\n{\n    float a = sin(angle);\n    float b = cos(angle);\n    return mat2(b, -a, a, b);\n}\n\n//create Scale Function\nmat2 scale(in vec2 scale)\n{\n    return mat2(scale.x, 0.0, 0.0, scale.y);\n}\n\nfloat rand(in float i)\n{\n    return fract(sin(dot(vec2(i, i), vec2(32.9898, 78.233))) * 43758.5453);\n}\n\n//static far stars\nvec4 staticStars(in vec2 uvCoord)\n{\n    vec4 result;\n\n    vec4 sStar = vec4(rand(uvCoord.x * uvCoord.y));\n    sStar *= pow(rand(uvCoord.x * uvCoord.y), 200.0);\n    sStar.xyz *= mix(col1, col2, rand(uvCoord.x + uvCoord.y));\n    result += sStar;\n\n    return result;\n}\n\n//the Milky Way\nvec4 theMilkyWay(in vec2 uvCoord, in float width, in float orientation)\n{\n    width = clamp(width, 0.0, 1.0);\n\n    vec4 result = staticStars(uvCoord);\n\n    vec4 col = width - vec4(length(vec2(uvCoord.x, 0.0) - uvCoord));\n    col.xyz *= mix(col1, col2, 0.75);\n    result += col * 2.0;\n    float c = 0.0;\n    float c2 = 0.0;\n\n    //use noise picture draw effect\n    vec2 rv = uvCoord;\n    rv.x += iTime * SPEED * orientation * 0.25;\n\n    for(int i = 0; i < ITER; i++)\n        c += (texture(iChannel0, (rv * 0.25 + rand(float(i) + 10.0 + uvCoord.x * uvCoord.y) * (16.0 / iResolution.y)) * rand((float(i) + 1420.1010) * 12.2)) / float(ITER)).x;\n\n    result -= c * 0.5;\n    result = clamp(result, 0.0, 1.0);\n\n    return result;\n}\n\n//dynamic stars\nvec4 dynamicStars(in vec2 uvCoord, in float width, in float orientation)\n{\n    vec4 result = theMilkyWay(uvCoord, width, orientation);\n\n    float res = iResolution.x/iResolution.y;\n    for(int i = 0; i < STAR_NUMBER; ++i)\n    {\n        float n = float(i);\n\n        //position of the star\n        vec3 pos = vec3(rand(n) * res + (iTime + 100.0) * -SPEED * orientation, rand(n + 1.0), rand(n + 2.0));\n        \n        //parallax effect\n        pos.x = mod(pos.x * pos.z, res) * 2.0 - res;\n        pos.y = (pos.y + rand(n + 10.0)) * 0.5 - 0.5;\n\n        //drawging the star\n        vec4 col = vec4(pow(distance(pos.xy, uvCoord), -1.25) * 1e-03 * pos.z * rand(n + 4.2));\n\n        //coloring the star\n        col.xyz *= mix(col1, col2, rand(n + 420.0));\n\n        //star flickering\n        col.xyz *= mix(rand(n + 5.0), 1.0, abs(cos(iTime * rand(n + 6.0) * 5.0)));\n\n        result += col;\n    }\n\n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uvCoord = (fragCoord*2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n\n    //Draw Effect\n    vec4 result;\n    \n    vec2 uv0 = uvCoord;\n    uv0.y += 0.05 * pow(uvCoord.x, 3.0);\n    vec2 uv1 = uvCoord;\n    uv1.y += 0.05 * pow(uvCoord.x, 3.0);\n    vec2 uv2 = uvCoord;\n    uv2.y += 0.5 * -uvCoord.x + 0.05 * pow(uvCoord.x, 2.0);\n    vec2 uv3 = uvCoord;\n    vec2 uv4 = uvCoord;\n    uv4.y += 3.0 * sin(0.042 * (-uvCoord.x + 1.5)) / 1.0 * (uvCoord.x + 0.0);\n\n\n    vec4 canvas0 = dynamicStars(uv0 * Rot2(0.0) + vec2(0.0, 0.8), 0.6, 1.0);\n    result += canvas0;\n    vec4 canvas1 = dynamicStars(uv1 * Rot2(0.1) + vec2(0.0, 0.45), 0.55, 1.0);\n    result += canvas1;\n    vec4 canvas2 = dynamicStars(uv2 * Rot2(0.0) + vec2(0.0, 0.0), 0.65, 1.0);\n    result += canvas2;\n    vec4 canvas3 = dynamicStars(uv3 * Rot2(-0.15) + vec2(0.0, 0.0), 0.35, 1.0);\n    result += canvas3;\n    vec4 canvas4 = dynamicStars(uv4 * Rot2(-0.5) + vec2(0.0, -0.35), 0.45, 1.0);\n    result += canvas4;\n\n    fragColor = result;\n}","name":"Image","description":"","type":"image"}]}