{"ver":"0.1","info":{"id":"ftfGWH","date":"1622020697","viewed":323,"name":"[OUTLINE 2021] - Le tunnel","username":"totetmatt","description":"2nd Showdown from Outline 2021 :\n\nAs usual, not fully identical to bonzomatic, found it here :\n https://psenough.github.io/shader_summary/shader_file_sources/outline_shader_showdown_2021/outline_2021_totetmatt_2.glsl","likes":7,"published":3,"flags":64,"usePreview":0,"tags":["outline","showdown"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"MlfSRf","filepath":"https://soundcloud.com/virgill/amiga-facebook-malefiz","previewfilepath":"https://soundcloud.com/virgill/amiga-facebook-malefiz","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 texNoise(vec2 uv,sampler2D tex ){ float f = 0.; f+=texture(tex, uv*.125).r*.5; f+=texture(tex,uv*.25).r*.25; //Funciton simulating the perlin noise texture we have in Bonzomatic shader editor, written by yx\n                       f+=texture(tex,uv*.5).r*.125; f+=texture(tex,uv*1.).r*.125; f=pow(f,1.2);return vec4(f*.45+.05);}\n\nmat2 rot(float a){float c=cos(a),s=sin(a);return mat2(c,-s,s,c);}\nvec3 pal(float t){return .5+.5*cos(6.28*(1.*t+vec3(0.,.4,.6)));}\n#define texFFTIntegrated (floor(iTime)+pow(fract(iTime),.25))*.2\nvec3 grid(vec2 uv,float off){\n    vec2 uuv=uv;\n    float tt = texFFTIntegrated;\n    float ttt =texNoise(uv*.01,iChannel1).r;\n    float tttt=texture(iChannel0,vec2(.6)).r*50.;\n    uv*=rot(floor(tt*50.)*.785*.5);\n    uv = abs(fract(uv+ttt*tttt)-.5);\n\n    if(uv.x <=.002) return pal(.1+off)*length(uv)*2.*clamp((length(uuv)-.5),.0,1.);\n     return vec3(.0);\n}\n\nvec3 layer(vec2 uv,float off){\n uv.x +=off*.2;\n   uv.y +=off*.2;\n  float tuv = abs(atan(uv.x,abs(uv.y)))*.05;\n  float tt =texFFTIntegrated;\n  float ttt =texture(iChannel0,fract(vec2(floor(100.*tuv)/100.))).r*.2;\n  \n  float d = length(uv)-.2-ttt ;\n  d = abs(d)-.01+cos(tt)*.02;\n  d = abs(d)-.0020-ttt*.1;\n  d = smoothstep(fwidth(d),0.,d);\n  return vec3(d)*pal(off+ttt*10.)+grid(uv+ttt,off*3.33);;\n  \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    \n\tvec3 col = vec3(.01);\n   float d = 0.;\n  float tttt=texFFTIntegrated;\n  const float lim = 20.;;\n  for(float i=0.;i<=lim;i++){\n    float it=i/lim;\n    float itt = fract(it+iTime*.01+tttt*.005);\n    \n   float z = mix(.001,20.,itt);\n    vec3 d = layer((uv*z)*rot(.785*i), it);\n    col +=vec3(d)*(1.-itt);\n  }\n  \n   /*vec3 pcol = texture(texPreviousFrame,puv).rgb;\n   col = mix(col,pcol,.7);*/\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}