{"ver":"0.1","info":{"id":"WdlGDl","date":"1548265413","viewed":397,"name":"glimp in shell","username":"skaplun","description":"Another repro of beautiful animation by @andyduboc. https://twitter.com/andyduboc/status/1081555183014940672\nBloom taken (but not fully understood) from this shader https://www.shadertoy.com/view/lsBfRc by @robobo1221.","likes":16,"published":1,"flags":32,"usePreview":0,"tags":["blur","post","animation","bloom","valuenoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define colorRange 24.0\nfloat bloomTile(float lod, vec2 offset, vec2 uv){\n    return texture(iChannel1, uv * exp2(-lod) + offset).a;\n}\n\nfloat getBloom(vec2 uv){\n    float blur = 0.;\n    blur = pow(bloomTile(2., vec2(0.0,0.0), uv), 2.2)       \t   \t+ blur;\n    blur = pow(bloomTile(3., vec2(0.3,0.0), uv), 2.2) * 1.3        + blur;\n    blur = pow(bloomTile(4., vec2(0.0,0.3), uv), 2.2) * 1.6        + blur;\n    blur = pow(bloomTile(5., vec2(0.1,0.3), uv), 2.2) * 1.9 \t   \t+ blur;\n    blur = pow(bloomTile(6., vec2(0.2,0.3), uv), 2.2) * 2.2 \t   \t+ blur;\n    return blur * colorRange;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = vec4(mix(texture(iChannel0, uv).rgb, vec3(15.0, 10.0, 15.0), pow(getBloom(uv), .85)), 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define colorRange 24.0\n\n#define EPS .00001\n#define UP normalize(vec3(-.75, 1., 0.))\n#define LIGHTPOS vec3(.5, 3., 3.)\n#define BG(p) mix(vec3(85./255., 81./255., 83./255.), vec3(44./255., 43./255., 43./255.), length(p));\n#define INNERLIGHT vec3(.55, .35, .55)\n\nstruct Ray {\n    vec3 origin, direction, hit;\n};\n\nfloat noise(in vec3 x){\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = textureLod( iChannel0, (uv+0.5)/256.0, 0.0).yx;\n\treturn mix( rg.x, rg.y, f.z );\n}\n\nmat3 roty(float q){\n\treturn mat3(cos(q), 0., -sin(q), 0., 1., 0., sin(q), 0., cos(q));\n}\n\nvec4 SPHERE = vec4(vec3(0.), 1.);\nbool sphereIntersects(inout Ray ray){\n\tvec3  ce = ray.origin - SPHERE.xyz;\n\tfloat b = dot( ray.direction, ce );\n\tfloat c = dot( ce, ce ) - SPHERE.w;\n\tfloat hh = b*b - c;\n\tif( hh>0.0 ){\n        float g[2] = float[2](-b - sqrt(hh), -b + sqrt(hh));\n        for(int i=0; i<2; i++){\n        \tvec3 nor = normalize(ray.origin+g[i]*ray.direction-SPHERE.xyz); \n            ray.hit = ray.origin + g[i]*ray.direction;\n            vec3 offset = vec3(2.5, 1.0, iTime);\n            float noise1 = noise((vec3(1., 6.5, 1.) * ray.hit + offset) * roty(-iTime * .05));\n            if(noise1 > .5)\n            \treturn true;\n        }\n\t}\n    return false;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy) / iResolution.y;\n    vec2 c = vec2(sin(iTime * 5.) * .1, 0.);\n    float circle = step(distance(p, c), .35) * 2.;\n    \n\tvec3 ro = vec3(0., 0., 2.);\n    vec3 ta = vec3(0.);\n    vec3 ww = normalize(ta - ro);\n    vec3 uu = normalize(cross(ww, UP));\n    vec3 vv = normalize(cross(uu,ww));\n\tvec3 rd = normalize( p.x * uu + p.y * vv + 1.5 * ww );\n\n    Ray ray = Ray(ro, rd, vec3(0.));\n    vec3 clr = BG(p);\n    if(sphereIntersects(ray)){\n    \tcircle *= step(ray.hit.z, 0.);\n        vec3 nrm = normalize(ray.hit - SPHERE.xyz);\n        vec3 surfaceToLight = LIGHTPOS - ray.hit;\n    \tfloat brightness = dot(nrm, surfaceToLight) / (length(surfaceToLight) * length(nrm));\n    \tbrightness = clamp(brightness, 0., 1.);\n        clr = mix(vec3(brightness * .5), INNERLIGHT, step(ray.hit.z - .5, 0.));\n    }\n    \n    fragColor = vec4(clr, pow(circle, 1. / 2.2) / colorRange);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"float makeBloom(float lod, vec2 offset, vec2 bCoord){\n    vec2 pixelSize = 1.0 / iResolution.xy;\n    offset += pixelSize;\n    float lodFactor = exp2(lod);\n    float bloom = 0.;\n    vec2 scale = lodFactor * pixelSize;\n    vec2 coord = (bCoord.xy-offset)*lodFactor;\n    float totalWeight = 0.0;\n    if (any(greaterThanEqual(abs(coord - 0.5), scale + 0.5)))\n        return 0.;\n    for (int i = -5; i < 5; i++) {\n        for (int j = -5; j < 5; j++) {\n            float wg = pow(1.0-length(vec2(i,j)) * 0.125,6.0);\n            bloom = pow(texture(iChannel0, vec2(i,j) * scale + lodFactor * pixelSize + coord, lod).a, 2.2)*wg + bloom;\n            totalWeight += wg;\n        }\n    }\n    bloom /= totalWeight;\n    return bloom;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    float blur = makeBloom(2.,vec2(0.0,0.0), uv);\n\t\t  blur += makeBloom(3.,vec2(0.3,0.0), uv);\n\t\t  blur += makeBloom(4.,vec2(0.0,0.3), uv);\n\t\t  blur += makeBloom(5.,vec2(0.1,0.3), uv);\n\t\t  blur += makeBloom(6.,vec2(0.2,0.3), uv);\n\t\n    fragColor = vec4(texture(iChannel0, uv).rgb, pow(blur, 1. / 2.2));\n}","name":"Buffer B","description":"","type":"buffer"}]}