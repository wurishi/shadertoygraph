{"ver":"0.1","info":{"id":"NtjBDm","date":"1652315298","viewed":106,"name":"Interactive Mandelbrot set zoom","username":"kugge","description":"Zoom with up/down keys\nUse mouse to change position","likes":0,"published":1,"flags":48,"usePreview":0,"tags":["test","julia","mandelbrot","complex"],"hasliked":0,"parentid":"ftBfDD","parentname":"Mandelbrot zoom (test)"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define maxIter 16.*14.\n#define maxNorm 25.\n\nfloat zoom;\nfloat rot;\n\n// Color palette\nvec3 color(float v) {\n    vec3 co;\n    if(v == 1.)       co = vec3(25, 7, 26);\n    else if(v == 2.)  co = vec3(9, 1, 47);\n    else if(v == 3.)  co = vec3(4, 4, 73);\n    else if(v == 4.)  co = vec3(0, 7, 100);\n    else if(v == 5.)  co = vec3(12, 44, 138);\n    else if(v == 6.)  co = vec3(24, 82, 177);\n    else if(v == 7.)  co = vec3(57, 125, 209);\n    else if(v == 8.)  co = vec3(134, 181, 229);\n    else if(v == 9.)  co = vec3(211, 236, 248);\n    else if(v == 10.) co = vec3(241, 233, 191);\n    else if(v == 11.) co = vec3(248, 201, 95);\n    else if(v == 12.) co = vec3(255, 170, 0);\n    else if(v == 13.) co = vec3(204, 128, 0);\n   \telse if(v == 14.) co = vec3(153, 87, 0);\n    else if(v == 15.) co = vec3(106, 52, 3);\n    return co / 256.0;;\n}\n\n// Complex multiplication\nvec2 cMul(vec2 a, vec2 b) {\n    vec2 m = vec2(a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x);\n    return m;\n}\n\n// Iterate mandelbrot sequence zÂ² + c\nfloat iterMandelbrot(vec2 c) { \n    float i = 0.;\n    vec2 z = vec2(0.); // u_0\n    \n    for (i = 0.; i<maxIter; ++i) {\n        if (dot(z, z) > maxNorm) break;\n        z = cMul(z, z) + c;\n    }\n\n    return i;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    vec2 uv = fragCoord/iResolution.xy; // Normalize\n    uv -= 0.5; // Center\n    uv.x *= iResolution.x/iResolution.y;\n    uv *= 2.5;\n    \n    // Rotation\n    rot = texelFetch(iChannel0, ivec2(0, 0), 0).y;\n    mat2 rotmat = mat2(cos(rot), -sin(rot), sin(rot), cos(rot));\n    uv *= rotmat;\n    \n    // Zoom\n    zoom = texelFetch(iChannel0, ivec2(0, 0), 0).x;\n    uv *= zoom;\n\n    // Center\n    vec2 pos;\n    pos.x = texelFetch(iChannel0, ivec2(0, 0), 0).z;\n    pos.y = texelFetch(iChannel0, ivec2(0, 0), 0).w;\n    uv += pos;\n    \n    float d = iterMandelbrot(uv);\n    vec3 col = color(mod(d, 16.));\n    fragColor = vec4(col, 1.);\n}\n\n\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define maxIter 256.\n#define maxNorm 1000.\n\n#define KEY_LEFT  37\n#define KEY_UP    38\n#define KEY_RIGHT 39\n#define KEY_DOWN  40\n\n#define ZOOM_SPEED 0.99\n#define ROT_SPEED 0.01\n#define SPEED 0.02\n\nfloat zoom;\nfloat rot;\nvec2 pos;\n\nvoid handleKeyboard() {\n    if (texelFetch(iChannel1, ivec2(KEY_UP, 0), 0).x == 1.) zoom *= ZOOM_SPEED;\n    if (texelFetch(iChannel1, ivec2(KEY_DOWN, 0), 0).x == 1.) zoom /= ZOOM_SPEED;\n    rot += texelFetch(iChannel1, ivec2(KEY_LEFT, 0), 0).x * ROT_SPEED;\n    rot -= texelFetch(iChannel1, ivec2(KEY_RIGHT, 0), 0).x * ROT_SPEED;   \n}\n\nvoid handleMouse() {\n    vec2 uv = iMouse.xy/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n    if(iMouse.z > 0.0) pos += uv * SPEED * zoom;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    zoom = texelFetch(iChannel0, ivec2(0, 0), 0).x;\n    rot = texelFetch(iChannel0, ivec2(0, 0), 0).y;\n    pos.x = texelFetch(iChannel0, ivec2(0, 0), 0).z;\n    pos.y = texelFetch(iChannel0, ivec2(0, 0), 0).w;\n    if (zoom == 0.) zoom = 1.;\n   \n    handleKeyboard();\n    handleMouse();\n    \n    fragColor = vec4(zoom, rot, pos);\n}\n\n","name":"Buffer A","description":"","type":"buffer"}]}