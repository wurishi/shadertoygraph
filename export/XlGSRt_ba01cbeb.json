{"ver":"0.1","info":{"id":"XlGSRt","date":"1485353662","viewed":119,"name":"Step Counting Ray Marcher","username":"hexointed","description":"Ray marcher that displays number of steps for each pixel","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float epsilon = 0.001;\n\nfloat scene(vec3 p);\nint march (vec3, vec3);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 cameraPosition = vec3(0.0, 0.0, -3.0);\n    vec3 cameraFocalPoint = cameraPosition - vec3(0.0, 0.0, 1.0);\n    cameraPosition.xy += (fragCoord.xy - iResolution.xy/2.0) / iResolution.xx;\n    \n    int steps = march(cameraPosition, cameraPosition - cameraFocalPoint);\n    \n    if(steps <= 4) {\n        fragColor = vec4(float(steps)/4.0, 0.0, 0.0, 1.0);\n    } else if (steps <= 8) {\n     \tfragColor = vec4(1.0 - (float(steps) - 4.0)/4.0,(float(steps) - 4.0)/4.0, 0.0, 1.0);   \n    } else if (steps <= 16) {\n        fragColor = vec4(0.0, 1.0 - (float(steps) - 8.0)/8.0, (float(steps) - 8.0)/8.0, 1.0);\n    } else if (steps <= 32) {\n        fragColor = vec4((float(steps) - 16.0)/16.0, 0.0, 1.0, 1.0);\n    } else if (steps <= 48) {\n        fragColor = vec4(1.0, (float(steps) - 32.0)/16.0, 1.0, 1.0);\n\t} else {\n     \tfragColor = vec4(1.0, 1.0, 1.0, 1.0);   \n    }\n    \n}\n\nint march(vec3 startPosition, vec3 direction) {\n    \n    vec3 mdir = normalize(direction);\n    vec3 endPosition = startPosition;\n    const int max_steps = 400;\n    \n    for(int i = 0; i < max_steps; i++) {\n        float distance = scene(endPosition);\n        \n        if(distance < epsilon)\n            return i;\n        \n        if(distance > 200.0)\n            return i;\n        \n        endPosition += distance * mdir;\n    }\n    \n    return max_steps;\n    \n}\n\nfloat min3(float a, float b, float c) {\n    return min(a, min(b, c));\n}\n\nfloat max3(float a, float b, float c) {\n    return max(a, max(b, c));\n}\n\nfloat scene (vec3 p) {\n \treturn min3(\n        length(p - vec3(0.0, 0.0, 2.0)) - 0.5,\n        length(p - vec3(sin(iTime * 0.2101), 1.5*cos(iTime * 0.3), 2.3*cos(iTime / 5.14) + 2.0)) - 0.1,\n        max3(\n            abs(p.x + 1.5) - 0.4,\n            abs(p.y - 0.5) - 0.4,\n            abs(p.z - 2.3) - 0.4\n        )\n    );\n}","name":"Image","description":"","type":"image"}]}