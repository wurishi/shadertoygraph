{"ver":"0.1","info":{"id":"43fcWS","date":"1727031003","viewed":17,"name":"Waves variation #3","username":"cesio","description":"Old school waves variation #3","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["waves","oldschool"],"hasliked":0,"parentid":"l3lczf","parentname":"Waves variation #2"},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define S 4.\n// the wave amplitude\n#define A 1.9\n// the wave lenght\n#define WAVEL 1.1\n\n\n// taken from thebookofshaders.com\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\n// taken from thebookofshaderx.com\nmat2 scale(vec2 _scale){\n    return mat2(_scale.x,0.0,\n                0.0,_scale.y);\n}\n\nvec2 cartesianToPolar(vec2 cartesian) {\n    float r = length(cartesian);          \n    float theta = atan(cartesian.y, cartesian.x); \n    return vec2(r, theta);  \n    \n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n   vec2 uv = fragCoord / iResolution.xy;\n    \n\n    // ### PLAY WITH SPACE START ### move space from the center to the vec2(0.0)\n    // Remap the space to -1. to 1 in a function of time\n    uv = uv * 2. - 1.;\n    uv.x *= iResolution.x/iResolution.y;\n    //uv = sin(iTime) * uv +uv * cos(iTime);\n    \n   // uv = rotate2d( sin(iTime)) * uv;\n    \n   \n    //uv = cartesianToPolar(uv);\n    vec2 wave1Center = vec2(-1., -0.5);\n    //vec2 wave2Center = vec2(1., 0.5);\n    wave1Center= vec2(0.);\n    \n    float disFromWave1Center = distance(uv, wave1Center);\n    //float disFromWave2Center = distance(uv, wave2Center);\n    \n    float wave1 =  A * sin(disFromWave1Center / WAVEL - iTime / WAVEL);\n    //float wave2 =  A * sin(disFromWave2Center / WAVEL - iTime / WAVEL) ;\n \n    uv = uv + uv * (wave1) / WAVEL;\n\n    // probe texture\n    vec3 textureColor = texture(iChannel0, uv).rgb;\n\n    fragColor = vec4(textureColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}