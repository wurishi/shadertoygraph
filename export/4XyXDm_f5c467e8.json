{"ver":"0.1","info":{"id":"4XyXDm","date":"1720008790","viewed":46,"name":"SDF woodbowl","username":"xeTaiz","description":"pjotryk <3","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sdf","wood","spheretracer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// camera attributes\n// cameraDirection and cameraUp MUST be normalized\n// (ie. their length must be equal to 1)\nconst vec3 cameraPosition = vec3(0.0, 3.5, 5.0);\nconst vec3 cameraDirection = normalize(-cameraPosition);\nconst vec3 cameraUp = vec3(0.0, 1.0, 0.0);\n\n// ray computation vars\nconst float PI = 3.14159265359;\nconst float fov = 50.0;\n\n// epsilon-type values\nconst float S = 0.1;\nconst float EPSILON = 0.01;\n\n// const delta vectors for normal calculation\nconst vec3 deltax = vec3(S ,0, 0);\nconst vec3 deltay = vec3(0 ,S, 0);\nconst vec3 deltaz = vec3(0 ,0, S);\nconst float thicc = 0.3;\n\n\n#define R\tiResolution\n#define sat(x)\tclamp(x, 0., 1.)\n#define S(a, b, c)\tsmoothstep(a, b, c)\n#define S01(a)\tS(0., 1., a)\n\nfloat sum2(vec2 v) { return dot(v, vec2(1)); }\n\n///////////////////////////////////////////////////////////////////////////////\n\nfloat h31(vec3 p3) {\n\tp3 = fract(p3 * .1031);\n\tp3 += dot(p3, p3.yzx + 333.3456);\n\treturn fract(sum2(p3.xy) * p3.z);\n}\n\nfloat h21(vec2 p) { return h31(p.xyx); }\n\nfloat n31(vec3 p) {\n\tconst vec3 s = vec3(7, 157, 113);\n\n\t// Thanks Shane - https://www.shadertoy.com/view/lstGRB\n\tvec3 ip = floor(p);\n\tp = fract(p);\n\tp = p * p * (3. - 2. * p);\n\tvec4 h = vec4(0, s.yz, sum2(s.yz)) + dot(ip, s);\n\th = mix(fract(sin(h) * 43758.545), fract(sin(h + s.x) * 43758.545), p.x);\n\th.xy = mix(h.xz, h.yw, p.y);\n\treturn mix(h.x, h.y, p.z);\n}\n\n// roughness: (0.0, 1.0], default: 0.5\n// Returns unsigned noise [0.0, 1.0]\nfloat fbm(vec3 p, int octaves, float roughness) {\n\tfloat sum = 0.,\n\t      amp = 1.,\n\t      tot = 0.;\n\troughness = sat(roughness);\n\tfor (int i = 0; i < octaves; i++) {\n\t\tsum += amp * n31(p);\n\t\ttot += amp;\n\t\tamp *= roughness;\n\t\tp *= 2.;\n\t}\n\treturn sum / tot;\n}\n\nvec3 randomPos(float seed) {\n\tvec4 s = vec4(seed, 0, 1, 2);\n\treturn vec3(h21(s.xy), h21(s.xz), h21(s.xw)) * 1e2 + 1e2;\n}\n\n// Returns unsigned noise [0.0, 1.0]\nfloat fbmDistorted(vec3 p) {\n\tp += (vec3(n31(p + randomPos(0.)), n31(p + randomPos(1.)), n31(p + randomPos(2.))) * 2. - 1.) * 1.12;\n\treturn fbm(p, 8, .5);\n}\n\n// vec3: detail(/octaves), dimension(/inverse contrast), lacunarity\n// Returns signed noise.\nfloat musgraveFbm(vec3 p, float octaves, float dimension, float lacunarity) {\n\tfloat sum = 0.,\n\t      amp = 1.,\n\t      m = pow(lacunarity, -dimension);\n\tfor (float i = 0.; i < octaves; i++) {\n\t\tfloat n = n31(p) * 2. - 1.;\n\t\tsum += n * amp;\n\t\tamp *= m;\n\t\tp *= lacunarity;\n\t}\n\treturn sum;\n}\n\n// Wave noise along X axis.\nvec3 waveFbmX(vec3 p) {\n\tfloat n = p.x * 20.;\n\tn += .4 * fbm(p * 3., 3, 3.);\n\treturn vec3(sin(n) * .5 + .5, p.yz);\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// Math\nfloat remap01(float f, float in1, float in2) { return sat((f - in1) / (in2 - in1)); }\n\n///////////////////////////////////////////////////////////////////////////////\n// Wood material.\nvec3 matWood(vec3 p) {\n\tfloat n1 = fbmDistorted(p * vec3(7.8, 1.17, 1.17));\n\tn1 = mix(n1, 1., .2);\n\tfloat n2 = mix(musgraveFbm(vec3(n1 * 4.6), 8., 0., 2.5), n1, .85),\n\t      dirt = 1. - musgraveFbm(waveFbmX(p * vec3(.01, .15, .15)), 15., .26, 2.4) * .4;\n\tfloat grain = 1. - S(.2, 1., musgraveFbm(p * vec3(500, 6, 1), 2., 2., 2.5)) * .2;\n\tn2 *= dirt * grain;\n    \n    // The three vec3 values are the RGB wood colors - Tweak to suit.\n\treturn mix(mix(vec3(.03, .012, .003), vec3(.25, .11, .04), remap01(n2, .19, .56)), vec3(.52, .32, .19), remap01(n2, .56, 1.));\n}\n\n\nfloat distanceToNearestSurface(vec3 p){\n    return max(max(p.y, length(p) - 1.0), -(length(p) -min(0.9, (0.2 + iTime/20.f))));\n}\n\n\n// better normal implementation with half the sample points\n// used in the blog post method\nvec3 computeSurfaceNormal(vec3 p){\n    float d = distanceToNearestSurface(p);\n    return normalize(vec3(\n        distanceToNearestSurface(p+deltax)-d,\n        distanceToNearestSurface(p+deltay)-d,\n        distanceToNearestSurface(p+deltaz)-d\n    ));\n}\n\n\nfloat computeLambert(vec3 p, vec3 n, vec3 l){\n    return max(0.0, dot(normalize(l-p), n));\n}\n\nfloat computeSpecular(vec3 v, vec3 l, vec3 n, float specc) {\n    return max(0.0, pow(dot(normalize(v), reflect(normalize(l), n)),specc));\n}\n\nvec3 intersectWithWorld(vec3 p, vec3 dir){\n    float dist = 0.0;\n    float nearest = 0.0;\n    vec3 result = vec3(0.0);\n    for(int i = 0; i < 32; i++){\n        nearest = distanceToNearestSurface(p + dir*dist);\n        if(nearest < EPSILON){\n            vec3 hit = p+dir*dist;\n            \n            vec3 light = vec3(100, 30, 50); //vec3(100.0*sin(iTime), 30.0*cos(iTime), 50.0*cos(iTime));\n            vec3 normal = computeSurfaceNormal(hit);\n            float diffuse = computeLambert(hit, normal, light);\n            float specular = computeSpecular(-dir, light, normal, 32.0);\n            result = matWood(hit) * (0.3 + diffuse + specular);\n            break;\n        }\n        dist += nearest;\n    }\n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n  \n    // generate the ray for this pixel\n    const float fovx = PI * fov / 360.0;\n    float fovy = fovx * iResolution.y/iResolution.x;\n    float ulen = tan(fovx);\n    float vlen = tan(fovy); \n   \n    vec2 camUV = uv*2.0 - vec2(1.0, 1.0);\n    vec3 nright = normalize(cross(cameraUp, cameraDirection));\n    vec3 pixel = cameraPosition + cameraDirection + nright*camUV.x*ulen + cameraUp*camUV.y*vlen;\n    vec3 rayDirection = normalize(pixel - cameraPosition);\n    \n    vec3 pixelColour = intersectWithWorld(cameraPosition, rayDirection);\n    fragColor = vec4(pixelColour, 1.0);\n}","name":"Image","description":"","type":"image"}]}