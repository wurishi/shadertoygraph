{"ver":"0.1","info":{"id":"mtSSDz","date":"1676040163","viewed":419,"name":"Curl Noise Z","username":"magician0809","description":"Curl Noise","likes":30,"published":1,"flags":32,"usePreview":0,"tags":["noise","curl","field","vector","curlnoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec4 data = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    \n    // render\n    vec3 col = data.xyz;\n    col.b += 1.0;\n    col = (col * 0.5 + 0.5) * data.w;\n    \n    // color output\n    col = clamp(col, 0.0, 1.0);\n    col = pow(col, vec3(1.0 / 2.2));\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    float aspect = iResolution.x / iResolution.y;\n    \n    if (iFrame == 0)\n    {\n        fragColor = vec4(0);\n    }\n    else\n    {\n        const float noiseSize = 1.2;\n        const float speed = 0.1 * noiseSize;\n        const float mouseVortex = 3.0;\n        const float fade = 1.0 / 4.0;\n        const float dotThreshold = 0.002;\n\n        // current position\n        vec2 p0 = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n        vec3 n0 = CurlField(p0 / noiseSize, speed);\n        \n        // mouse vortex\n        if (iMouse.z > 0.0)\n        {\n            vec2 ms = (iMouse.xy * 2.0 - iResolution.xy) / iResolution.y;\n            ms -= p0;\n            ms /= dot(ms, ms) + 0.025;\n            ms = vec2(-ms.y, ms.x);\n            n0.xy += ms * (speed * mouseVortex);\n        }\n\n        // previous position\n        vec2 v0 = n0.xy;\n        vec2 p1 = p0 - iTimeDelta * v0;\n\n        // advance particle\n        vec2 uv1 = vec2(p1.x / aspect, p1.y) * 0.5 + 0.5;\n        vec4 data = textureLod(iChannel0, uv1, 0.0);\n        data.w -= fade * iTimeDelta;\n\n        // new particle\n        float t = iTime * 100.0;\n        vec2 cir = vec2(cos(t), sin(t)) * 10.0;\n        vec2 puv = (fragCoord + cir) / iChannelResolution[1].y;\n        data.w += step(abs(texture(iChannel1, puv).x - 0.5), dotThreshold);\n        data.w = clamp(data.w, 0.0, 1.0);\n\n        // particle color\n        if (data.w >= 1.0)\n        {\n            data.xyz = n0.xyz / speed;\n        }\n\n        fragColor = data;\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define PI 3.14159265359\n\n// noise function from https://www.shadertoy.com/view/Msf3WH\nvec2 hash( vec2 p ) // replace this by something better\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\n\nvec3 CurlField(vec2 p, float scale)\n{\n    const float dt = 1e-4;\n    vec2 ds = vec2(dt, 0.0);\n    \n    float n0 = noise(p) * scale;\n    float n1 = noise(p + ds.xy) * scale;\n    float n2 = noise(p + ds.yx) * scale;\n    \n    vec2 grad = vec2(n1 - n0, n2 - n0) / ds.x;\n    vec2 curl = vec2(grad.y, -grad.x);\n    return vec3(curl, n0);\n}\n","name":"Common","description":"","type":"common"}]}