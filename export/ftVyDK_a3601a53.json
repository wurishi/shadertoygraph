{"ver":"0.1","info":{"id":"ftVyDK","date":"1662238529","viewed":232,"name":"CMYK paint mixing","username":"clauswilke","description":"A simple exploration of mixing CMYK components. Both additive and subtractive mixing modes are implemented. Best results are obtained for mostly subtractive mixing.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","cmyk"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Simple CMYK paint mixing, by Claus O. Wilke, 2022\n// The MIT License\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n//-----------------------------------------------------------------------\n// Edit parameters here\n\n// Colors of cmyk components\nvec3 CYAN = vec3(0.07, 0.65, 0.65);\nvec3 MAGENTA = vec3(0.64, 0.04, 0.64);\nvec3 YELLOW = vec3(0.75, 0.73, 0.08);\nvec3 BLACK = vec3(0.016, 0.016, 0.016);\n\n// Color of the paper\nvec3 PAPER_COLOR = vec3(0.95, 0.77, 0.65);\n\n// Opacity of the color and black layers. This controls how much the\n// paper bleed through the ink. 0 means no ink, 1 means paper fully occluded\nfloat OPACITY_COLOR = 0.95;\nfloat OPACITY_BLACK = 0.85;\n\n// Amount of subtractive vs additive mixing. This is a number\n// between 0 and 1, with 1 indicating more subtractive mixing.\n// Should probably be close to 1.\nfloat MODEL_MIX = 0.9;\n\n// Do not edit below here\n//-----------------------------------------------------------------------\n\nfloat make_bar(in vec2 uv, in vec2 p, in float w, in float l, in float sc) {\n    return smoothstep(sc*w, w, abs(uv.y - p.y)) * smoothstep(sc*l, l, abs(uv.x - p.x)); \n}\n\nvec4 cmyk_image(in vec2 uv) {\n    float ss = 0.866; // sin(60 degrees)\n    float cc = 0.5;   // cos(60 degrees)\n    float r = 0.48;\n    float sc = 1.02; // smoothness constant\n\n    float c = smoothstep(sc*r, r, length(uv - 0.4*vec2(ss, cc + .2)));\n    float m = smoothstep(sc*r, r, length(uv - 0.4*vec2(0, -1. + .2)));\n    float y = smoothstep(sc*r, r, length(uv - 0.4*vec2(-ss, cc + .2)));\n    float k = 1.1 * make_bar(uv, vec2(0, 0.36), .1, .6, sc) + \n              1.1 * make_bar(uv, vec2(0.35, -0.46), .1, .4, sc) -\n              0.1 * make_bar(uv, vec2(0, 0.36), .09, .59, sc) -\n              0.1 * make_bar(uv, vec2(0.35, -0.46), .09, .39, sc);\n    return vec4(c, m, y, k);\n}\n\nvec3 mix_additive(in vec4 cmyk, in vec3 paper) {\n    float colink = dot(cmyk.xyz, vec3(1));\n    vec3 col = colink > 0. ? (cmyk.x*CYAN + cmyk.y*MAGENTA + cmyk.z*YELLOW)/colink : vec3(0);\n    float cv = clamp(colink * OPACITY_COLOR, 0., 1.);\n    col = mix(paper, col, cv);\n    float bv = clamp(cmyk.w * OPACITY_BLACK, 0., 1.);\n    col = mix(col, BLACK, bv);\n    return col;\n}\n\nvec3 mix_subtractive(in vec4 cmyk, in vec3 paper) {\n    float colink = dot(cmyk.xyz, vec3(1));\n    vec3 col = colink > 0. ? \n        (pow(CYAN, vec3(cmyk.x/colink)) * pow(MAGENTA, vec3(cmyk.y/colink)) *\n         pow(YELLOW, vec3(cmyk.z/colink))) : vec3(0);\n    float cv = clamp(colink * OPACITY_COLOR, 0., 3.);\n    col = cv > 0. ? pow(paper, vec3(1.-cv)) * pow(col, vec3(cv)) : paper;\n    float bv = clamp(cmyk.w * OPACITY_BLACK, 0., 1.);\n    col = bv > 0. ? pow(col, vec3(1.-bv)) * pow(BLACK, vec3(bv)) : col;\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.y;\n\n    vec3 sub = mix_subtractive(cmyk_image(uv), PAPER_COLOR);\n    vec3 add = mix_additive(cmyk_image(uv), PAPER_COLOR);\n\n    vec3 col = mix(add, sub, MODEL_MIX);\n\n    // gamma correction\n    col = pow(col, vec3(0.4545));\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}