{"ver":"0.1","info":{"id":"sslfRX","date":"1645160397","viewed":79,"name":"Sun, Sky and Ocean","username":"benhardy","description":"What a lovely day!","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["demo","educational","kids","deadlyscience"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst vec3 YELLOW = vec3(0.9,0.80,0.0);\nconst vec3 RED = vec3(0.9,0.00,0.0);\nconst vec3 BLACK = vec3(0.0,0.00,0.0);\nconst vec3 PINK = vec3(0.9,0.00,0.9);\nconst vec3 DARK_BLUE = vec3(0.2,0.4,0.8);\nconst vec3 BLUE = vec3(0.0,0.6,0.9);\n\nconst vec3 PURPLE = vec3(0.6,0.0,0.9);\n\n\nconst vec3 GREEN = vec3(0.3,0.6,0.2);\n\n\n#define SUN_RADIUS  0.05\n\nfloat sun_height() {\n    return sin(iTime) * 0.14 + 0.15;\n}\n    \nfloat distance_to_sun(vec2 where) {\n    float sun_y = sun_height();\n    float sun_x = sin(iTime *1.0) * 0.1 - 0.15;\n    float sun_distance = length(where - vec2(sun_x, sun_y));\n    return sun_distance - SUN_RADIUS;\n}\nbool close_to_sun(vec2 where) {\n    return distance_to_sun(where) < SUN_RADIUS*4.0;\n}\nbool in_the_water(vec2 where) {\n    return (where.y < 0.0);\n}\n\nvec3 sunset(vec2 where) {\n    return mix(RED, PINK, where.y*5.0);\n}\nvec3 setting_sun_colour() {\n    return mix(RED, YELLOW, sqrt(clamp(sun_height()* 5.0, 0.0, 1.0)));\n}\n\nvec3 paint_sky(vec2 where, vec3 base_colour) {\n    return mix(base_colour, base_colour/2.0, where.y *2.0);\n}\n\nvec3 paint_sun(vec2 where, vec3 base_colour) {\n    float dist = clamp(distance_to_sun(where), 0.0, 1.0);\n    float blueness = sqrt(dist) * 3.0; //1.0 / (1.0 + pow(dist, 2.0));\n    blueness = clamp(blueness, 0.0, 1.0);\n    return mix(base_colour, paint_sky(where, BLUE), blueness);\n}\n\nvec3 paint_water(vec2 where, vec3 base_colour) {\n    \n    return mix(base_colour, base_colour/2.0, -where.y *2.0);\n}\n\n\nvec2 rand2(vec2 p)\n{\n    p = vec2(dot(p, vec2(12.9898,78.233)), dot(p, vec2(26.65125, 83.054543))); \n    return fract(sin(p) * 43758.5453);\n}\n\nfloat rand(vec2 p)\n{\n    return fract(sin(dot(p.xy ,vec2(54.90898,18.233))) * 4337.5453);\n}\n\n\n// Thanks to David Hoskins https://www.shadertoy.com/view/4djGRh\nfloat stars(in vec2 x, float numCells, float size, float br)\n{\n    vec2 n = x * numCells;\n    vec2 f = floor(n);\n\n\tfloat d = 1.0e10;\n    for (int i = -1; i <= 1; ++i)\n    {\n        for (int j = -1; j <= 1; ++j)\n        {\n            vec2 g = f + vec2(float(i), float(j));\n\t\t\tg = n - g - rand2(mod(g, numCells)) + rand(g);\n            // Control size\n            g *= 1. / (numCells * size);\n\t\t\td = min(d, dot(g, g));\n        }\n    }\n\n    return br * (smoothstep(.95, 1., (1. - sqrt(d))));\n}\n\n\nvec3 night_sky(vec2 where) {\n    float res= stars(where, 16.0, 0.25, 1.25);\n    return vec3(res);\n}\n\n\n\n\n\n\n\nvec3 paint_the_spot(vec2 spot) \n{\n\n\n\n\n    \nif (in_the_water(spot)) \n{\n    return paint_water(spot, DARK_BLUE);\n}\n\nif (close_to_sun(spot)) \n{\n    return paint_sun(spot, RED);\n}\n\n\nreturn paint_sky(spot, BLUE);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\n    \n    if (close_to_sun(spot)) \n    {\n        return paint_sun(spot, YELLOW);\n    }\n    bool its_nighttime = false;\n\n    if (its_nighttime) \n    {\n        return night_sky(spot);\n    }\n\n*/\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 offset = vec2(0.0, -0.1);\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord/iResolution.xy -0.5) \n        * vec2(1, iResolution.y/iResolution.x);\n\n    // Time varying pixel color\n    vec3 col = paint_the_spot(uv - offset);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","name":"Image","description":"","type":"image"}]}