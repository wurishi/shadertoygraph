{"ver":"0.1","info":{"id":"DdVBzR","date":"1697829501","viewed":57,"name":"contour noise 2","username":"DeltaT","description":"yeag","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","noise","fbm","perlin"],"hasliked":0,"parentid":"csVfRR","parentname":"perlin noise - FBM"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash12(vec2 p) { // hash function taken from shadertoy.com/view/4djSRW\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 randDir(vec2 id) {\n    float a = hash12(id)*6.28319 + iTime;\n    return vec2(cos(a), sin(a));\n}\n\nvec2 smootherstep(vec2 x) {\n    return x*x*x*(x*(6.*x-15.)+10.);\n}\n\nvec3 colorMap(float p) {\n    // https://www.desmos.com/calculator/tox6hpgflr\n    float r = clamp(abs(6.*p-3.)-1., 0., 1.);\n    float g = clamp(-abs(6.*p-2.)+2., 0., 1.);\n    float b = clamp(-abs(6.*p-4.)+2., 0., 1.);\n    \n    return vec3(r, g, b);\n}\n\nfloat perlin(vec2 coord, int seed) {\n    vec2 gridId = floor(coord) + float(seed)*3.14159; // arbitrary multiplier, also a weird way of having seeds but it works\n    vec2 gridUv = fract(coord);\n    \n    vec2 bottomLeft = gridUv;\n    vec2 bottomRight = gridUv-vec2(1, 0);\n    vec2 topLeft = gridUv-vec2(0, 1);\n    vec2 topRight = gridUv-vec2(1, 1);\n    \n    vec2 gridUvSmooth = smootherstep(gridUv);\n    float lerp1 = mix(dot(bottomLeft, randDir(gridId)), dot(bottomRight, randDir(gridId+vec2(1, 0))), gridUvSmooth.x);\n    float lerp2 = mix(dot(topLeft, randDir(gridId+vec2(0, 1))), dot(topRight, randDir(gridId+vec2(1, 1))), gridUvSmooth.x);\n    \n    return mix(lerp1, lerp2, gridUvSmooth.y);\n}\n\nfloat fbm(vec2 coord, int numOctaves) {\n    float a = 1.;\n    float f = 1.;\n    float result = 0.;\n    \n    for (int i = 0; i < numOctaves; i++) {\n        result += perlin(coord*f, i)*a;\n        a /= 2.;\n        f *= 2.;\n    }\n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    float time = clamp(iTime, 0., 16.);\n    float noise = mix(fbm(uv, int(time)), fbm(uv, int(time)+1), fract(time));\n    \n    vec3 noiseRainbow = colorMap(-noise+0.5);\n    float contourMask = mod(noise, 0.05)*20. < 0.8 ? 1. : 0.;\n    \n    fragColor = vec4(vec3(noiseRainbow*contourMask), 1);\n}","name":"Image","description":"","type":"image"}]}