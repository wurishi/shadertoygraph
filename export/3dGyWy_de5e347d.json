{"ver":"0.1","info":{"id":"3dGyWy","date":"1603618112","viewed":419,"name":"Fab25 #inktober2020 \"buddy\"","username":"FabriceNeyret2","description":"mouse controls the leader.\n[url]https://inktober.com/[/url]\n#inktober2020 themes: [img]https://i.imgur.com/b3gMiu0.png[/img]","likes":6,"published":3,"flags":32,"usePreview":0,"tags":["2d","simulation","particles","short","swarm","inktober2020"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"  #define rot(v) mat2( v, -v.y, v.x ) / length(v)\n//#define rot(v) mat2( cos( -atan(v.y,v.x) + vec4(0,33,11,0) ) )\n\n#define D(i,r)  ( P =  T(vec2(i,0)), \\\n                  clamp( R.y*r - R.y/2.*length( (P.xy-U)*rot(P.zw) / vec2(2,1) ), 0., 1. ) ) // draw disk\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 U = u / R.y;\n    vec4 P;\n    \n    O = T(u);                                 // load drawing\n    \n    for(int i=1; i<N; i++)                    // draw moving particles\n        O.r = max( O.r,  D( i , .008 ) );\n    \n    O.rg += D( 0. , .016 );                   // leader\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define H(u) fract(sin( (u)* mat2(127.1,311.7, 269.5,183.3) ) *4e5 )\n#define G(d) textureLod(iChannel0, (d + P) / a  ,2. ).a\n#define dt   iTimeDelta\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    O = T(u);                                                 // restore state\n    vec2 U = u / R.y, a = R/R.y, P, e=vec2(.1,0), F,D; float l;\n    \n    if (T(1).b != iChannelResolution[1].x || T(1).a != R.x ) {// --- init at texture load or resolution change\n        if (u.y == .5)                                        // particles\n        {  if(iFrame < 1) O = vec4( H(u) , .7*(2.*H(u+.5)-1.) ); }\n        else  O = texture( iChannel1, u/R, 0. ).rrrr;         // draw ground\n        if (u==vec2(1.5)) O.b = iChannelResolution[1].x, O.a = R.x; // for re-init\n        return;\n    }    \n    \n    if ( u == vec2(.5) )                                      // --- leader\n            O.xy = iMouse.z > 0. ? iMouse.xy / R.y : (.5+.4*cos(iTime+vec2(0,33)))*a,\n            O.zw = ( O.xy - T(0).xy ) / dt; \n    else if ( u.y == .5  && int(u.x) < N )                    // --- particle simulation\n    {\n        P = O.xy; \n        F = T(0).xy - P; F *= 1.5 / max(.1,length(F));        // attracted by leader\n        F -= .5 * ( vec2(G(e),G(e.yx)) - G() ) / e.x;         // repulsed by dense areas                      \n/*      for (int i=1; i<N; i++)                               // particles repulse each other\n            if (int(u)!=i) D = T(vec2(i,0)).xy - P, l = length(D),\n                           l < .1 ? F -= D/(.1+l*l)  : F;\n*/\n        O.zw *= .98;                                          // viscosity\n        O.zw += dt * F,                                       // Newton: v += F.dt\n        O.xy += dt * O.zw;                                    //         p += v.dt\n     // O.xy = fract(O.xy /a ) * a;                           // wrapped world\n    } \n }","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"int N = 100;    // number of particles\n#define R       iResolution.xy\n#define T(U)    texelFetch( iChannel0, ivec2(U), 0 )\n","name":"Common","description":"","type":"common"}]}