{"ver":"0.1","info":{"id":"msc3z4","date":"1677040885","viewed":113,"name":"Gradient Squares","username":"massv","description":"Rotate gradient squares on grid.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["beginner"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define SIN(a) sin(iTime * a) * .5 + .5\n\n\nfloat square(vec2 pos) {\n   return min(step(.1, mod(pos.x, 1.)),\n              step(.1, mod(pos.y, 1.)));\n}\n\nmat2 rotate2d(float _angle){\n  return mat2(cos(_angle),-sin(_angle),\n              sin(_angle),cos(_angle));\n}\n\nfloat random (vec2 st) {\n  return fract(sin(dot(st.xy, vec2(12.9898,78.233)))*43758.5453123);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy - .5 * iResolution.xy ) / min(iResolution.x, iResolution.y);\n\n    uv *= 4. + dot(uv, uv) * 4.;\n\n    uv += vec2(cos(iTime)*2., sin(iTime)*2.);\n    uv = rotate2d(sin(iTime*0.1)*PI) * uv;\n    vec2 ipos = floor(uv);\n    vec2 fpos = fract(uv);\n    \n    vec3 col = vec3(mix(random(ipos), random(ipos*floor(iTime*3.)+1.), fpos.x), \n                                  random(ipos*floor(iTime*1.)+2.),\n                                  1.);\n    col *= square(vec2(uv.x, uv.y));\n    \n    vec3 rd = vec3(2.0 * fragCoord.xy - iResolution.xy, iResolution.y);\n    rd = normalize(vec3(rd.xy, sqrt(max(rd.z * rd.z - dot(rd.xy, rd.xy) * 0.1, 0.0))));\n    float m = sqrt(rd.z * rd.z) - sqrt(dot(rd.xy, rd.xy));\n\n    m *= 2.0;\n    col *= m;\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}