{"ver":"0.1","info":{"id":"Nt2SR3","date":"1628227609","viewed":151,"name":"an atmosphere scattering","username":"yunhai","description":"a single scattering demo,\nand this serials helped me a lot:\nhttps://www.alanzucconi.com/2017/10/10/atmospheric-scattering-1/\nmaybe I should draw a better sun next time :)","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["atmosphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TOTALSAMPLES 5.\n#define iR iResolution.xy\n#define PI 3.14159265\n//#define SUN3D\nconst vec3 lmd=vec3(680,550,440);\nconst vec3 invplmd=1./pow(lmd,vec3(4.));\nconst float P=1e6*550.1;//scattering magic coeff\nconst vec3 PC=vec3(0,0,0);//planet center\nconst float R=7000.;//planet radius\nconst float H=60.;//atmosphere thick\nconst float IS=0.9;//sun intensity\nfloat iS(vec3 ro,vec3 rd,vec4 s)\n{\n    vec3 co=ro-s.xyz;\n    float b=2.*dot(co,rd),c=dot(co,co)-s.w*s.w;\n    float delta=b*b-4.*c;\n    if(delta<0.)\n        return -1.;\n    if(c<0.)\n        return (-b+sqrt(delta))/2.;\n    if(b>0.)\n        return -1.;\n    return (-b-sqrt(delta))/2.;\n}\nfloat density(float h)\n{\n    return exp(-h/H);\n}\n//Rayleigh's phase function\nfloat pf(float cosTheta)\n{\n    return (1.+cosTheta*cosTheta);\n}\n//opticalDepth\nfloat od(vec3 from,vec3 to,float steps)\n{\n    vec3 dir=to-from;\n    float l=length(dir),ds=l/steps;dir/=l;\n    float sum=0.;\n    vec3 p=from+dir*(.5)*ds;//sample seg middle point\n    for(float i=0.;i<steps;i+=1.)\n    {\n        sum+=density(length(p-PC)-R)*ds;\n        p+=dir*ds;\n    }\n    return sum;\n}\nvoid mainImage( out vec4 O, in vec2 C)\n{\n    vec2 uv=(C-.5*iR)*2./iR.y;uv.y+=.8;\n    vec3 ro=PC+vec3(0,R+1.,0),\n         rd=normalize(vec3(uv,1)),\n         sp=vec3(0,0,100000);//sun Position\n         //sd=normalize(vec3(0,0,1));//sunDirection\n    float t=mod(iTime*.3,1.3)-.1,sunH=t;\n    mat2 rot=mat2(cos(t),sin(t),-sin(t),cos(t));sp.yz*=rot;\n    vec3 sum=vec3(0);\n    vec4 e1=vec4(PC,R),e2=e1;e2.w+=H;\n    float d=iS(ro,rd,e2),\n          tsp=TOTALSAMPLES,\n          ds=d/tsp;\n    \n    for(float i=0.;i<tsp;i+=1.)\n    {\n        float time=ds*(i+.5);\n        vec3 p=ro+rd*time;\n        vec3 sd=normalize(sp-p);\n        //oc\n        if(iS(p,sd,e1)>0.||iS(p,-rd,e1)<time)\n            continue;\n\n        vec3 transmittance=exp(-P*invplmd*(od(ro,p,tsp)+od(p,p+iS(p,sd,e2)*sd,tsp)));\n        vec3 scat=P*invplmd*density(length(p-PC)-R)*pf(dot(rd,sd));\n        sum+=scat*transmittance*ds;\n    }\n    O.rgb =sum*IS;\n    \n    //sun\n    #ifdef SUN3D\n    d=iS(ro,rd,vec4(sp*100.,300000.));\n    vec3 sd=normalize(sp-ro);\n    if(d>0.)\n        O.rgb=mix(vec3(1.,.2,.01),vec3(.89,.34,.0)*1.5,pow((1.-dot(rd,sd))*200.,1.3));\n    #endif\n    \n    float sunDist=length(uv-vec2(0,sunH)),sunR=.08;\n    O.rgb=mix(O.rgb,vec3(1.+pow((sunDist+.1),2.)*4.2/sunR,.5,.1)*exp(sunH*.5),smoothstep(1.2*sunR,.01,sunDist));\n    \n    //land\n    O.rgb=mix(vec3(.3,.8,.2)*.5*max((1.04-dot(vec3(0,0,1),normalize(sp-PC)))*2.,0.)*(-uv.y*2.+.5),O.rgb,\n          smoothstep(.0,.1,uv.y));\n    \n    O.rgb=pow(O.rgb,vec3(0.4545));\n\n}","name":"Image","description":"","type":"image"}]}