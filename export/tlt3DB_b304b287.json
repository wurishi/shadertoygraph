{"ver":"0.1","info":{"id":"tlt3DB","date":"1577497827","viewed":58,"name":"tunel-cuadro-v3","username":"jorge2017a1","description":"tunel-cuadro-v3","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["tunelcuadrov3"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//por jorge flores p. //fecha 26-dic--2019\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n\nconst int CInf = 1;\nconst int CSup = 2;\nconst int CDer = 3;\nconst int CIzq = 4;\nconst int CAtras = 5;\nconst int CPlane = 6;\nconst int CLight = 7;\nconst int CSky = 8;\nconst int CPlane2 =9;\n\n\n\nstruct TObj\n{\n    float tipo;\n    float dist;\n};\n    \n\nTObj mObj;\nvec3 glpRoRd;\n\n//Torus function\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n//Sphere function\nfloat sdSphere( vec3 p, float s1 )\n{\n   vec4 s = vec4(0, s1, 9, s1);\n   return  length(p-s.xyz)-s.w;   \n}\n//Box function\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n//Triprism function\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n//Cone function\nfloat sdCone( vec3 p, vec2 c )\n{\n    // c must be normalized\n    float q = length(p.xy);\n    return dot(c,vec2(q,p.z));\n}\n\n\n///por Iq\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n  const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n  p = abs(p);\n  p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\n  vec2 d = vec2(\n       length(p.xy-vec2(clamp(p.x,-k.z*h.x,k.z*h.x), h.x))*sign(p.y-h.x),\n       p.z-h.y );\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n///--------------------------------------------\n\n\n\nfloat intersectSDF(float distA, float distB) {\n    return max(distA, distB);\n}\n\nfloat unionSDF(float distA, float distB) {\n    return min(distA, distB);\n}\n\nfloat differenceSDF(float distA, float distB) {\n    return max(distA, -distB);\n}\n\n\nvec2 opU(vec2 d1, vec2 d2 ) {\n  vec2 resp;\n    if (d1.x < d2.x){ \n        resp = d1;\n    }\n    else\n    {\n        resp = d2;\n    }\n     \n   return resp; \n}\n\nvec3 rotate_y(vec3 v, float angle)\n{\n\tfloat ca = cos(angle); float sa = sin(angle);\n\treturn v*mat3(\n\t\t+ca, +.0, -sa,\n\t\t+.0,+1.0, +.0,\n\t\t+sa, +.0, +ca);\n}\n\nvec3 rotate_x(vec3 v, float angle)\n{\n\tfloat ca = cos(angle); float sa = sin(angle);\n\treturn v*mat3(\n\t\t+1.0, +.0, +.0,\n\t\t+.0, +ca, -sa,\n\t\t+.0, +sa, +ca);\n}\n\n\n\n///--------------------------------------------\n\n\nfloat Noise( vec3 p )\n{\n    vec3 f = fract(p);\n    f = smoothstep(0.,1.,f) - f;\n    p += f;\n\t//return textureLod(iChannel0,(p+.5)/32.,-16.).x;\n    return texture(iChannel0,p.xy).x;\n}\n\n\nfloat Granite( vec3 pos )\n{\n    const int n = 4;\n    float o = 0.;\n    for ( int i=0; i < n; i++ )\n    {\n    \to = o*2. + abs(Noise(pos)*25.-1.);\n        pos *= 2.;\n    }\n    return o / float((1<<(n))-1);\n}\n\n///--------------------------------------------\n\n//IQs noise\nfloat noise(vec3 rp) {\n    vec3 ip = floor(rp);\n    rp -= ip; \n    vec3 s = vec3(7, 157, 113);\n    vec4 h = vec4(0.0, s.yz, s.y + s.z) + dot(ip, s);\n    rp = rp * rp * (3.0 - 2.0 * rp); \n    h = mix(fract(sin(h) * 43758.5), fract(sin(h + s.x) * 43758.5), rp.x);\n    h.xy = mix(h.xz, h.yw, rp.y);\n    return mix(h.x, h.y, rp.z); \n}\n\nfloat floorTex(vec3 rp) {\n    rp.x += iTime * -2.0;\n    vec2 m = mod(rp.xz, 4.0) - 2.0;\n    if (m.x * m.y > 0.0) {\n        return 0.8 + noise(rp * 4.0) * 0.16;\n    }\n    return 0.2 + noise((rp + 0.3) * 3.0) * 0.1;\n}\n///-----------------------------------------\n\n\nvec3 getSphereColor(int i)\n{\n    \n    float m;\n        \n\tswitch(i)\n    {\n    case 0:\n        return vec3(85./255., 205./255., 252./255.);\n    case 1:\n        //return vec3(247./255., 168./255.,  184./255.);\n        return vec3(1, 0.5, 0);\n    case 2:\n        return vec3(1.0, 1.0, 1.0);\n    case 3:\n        return vec3(247./255., 168./255.,  184./255.); \n    case 4:\n        //return vec3(85./255., 205./255., 252./255.);\n        return vec3(0, 1, 1);\n        \n    case 5:\n        return vec3(85./255., 205./255., 252./255.);\n    case 6:\n        //return vec3(247./255., 168./255.,  184./255.);\n        return  vec3(0.5, 0.8, 0.9);\n        \n    case 7:\n        return vec3(1.0, 1.0, 1.0);\n    case 8:\n        //return vec3(247./255., 168./255.,  184./255.); \n        //return vec3(55./255., 30./255.,  255./255.); \n        return vec3(0.425, 0.56, 0.9); \n    case 9:\n        //return vec3(85./255., 205./255., 252./255.); \n        return vec3(0.5, 0.6, 0.6); \n    case 10:\n        return vec3(0.0, 1.0, 0.0);\n    \n\tcase 11:\n        //float pattern = fract( 1.-Granite( glpRoRd)*8.) ;\t\n        float pattern = abs( 1.-Granite( glpRoRd)*0.15) ;\t\n        //return Granite(glpRoRd)*vec3(0.2,0.5,0.3);\n        return pattern*vec3(1.0);\n     case 12:\n        return  vec3(0.8, 1.0, 0.4) * floorTex(glpRoRd); \n     case 13:\n        return  vec3(0.5, 0.5, 1.0) * floorTex(glpRoRd); \n     case 14:\n        return  vec3(0.8, 1.0, 0.4) * floorTex(-glpRoRd.zyx); \n     case 15:\n        return  vec3(0.8, 1.0, 0.4) * floorTex(glpRoRd.zyx); \n    } \n}\n//-------------------------------------------------\n\n// Create infinite copies of an object -  https://iquilezles.org/articles/distfunctions\nvec2 opRep( in vec2 p, in float s )\n{\n    return mod(p+s*0.5,s)-s*0.5;\n}\n\n\nfloat GetDist(vec3 p  ) {\t\n    float d, dif1, dif2;\n   vec3 pp;\n    vec2 res;\n    \n    d=999.9;\n    float planeDist = p.y;\n    pp=p;\n   \n    res = vec2(9999, 0);\n    \n    \n     if (res.x < planeDist)\n      { res.x = res.x;     \t} \n    else\n        { \n          res.x = planeDist;\n        if (planeDist > 0.5 )\n          { res=vec2(res.x,CSky); }\n        else\n         { \n             res=vec2(res.x, 9);\n         } \n     } \n    \n    \n    \n    \n    p.z=mod(p.z, 1.0)-1.0;\n    \n    \n    \n    float sdb1=sdBox(p-vec3(0.0,5.5,0.), vec3(7,5.8,5) );\n    float sdb2=sdBox(p-vec3(0.0,6.0,0.), vec3(7,5.2,6.0) );\n    \n    \n    \n    float sdb3pisoinf=sdBox(p-vec3(0.0,1.0,0.0), vec3(7,0.1,5.1) );\n    float sdb3pisoizq=sdBox(p-vec3(-6.5,6.0,0.0), vec3(0.2,5.0,5.1) );\n    float sdb3pisoder=sdBox(p-vec3(6.5,6.0,0.0), vec3(0.2,5.0,5.1) );\n    \n    dif1=differenceSDF(sdb1, sdb2);\n    \n    res=opU(res, vec2(dif1,6));\n    \n    \n    res=opU(res, vec2(sdb3pisoinf,14));\n    res=opU(res, vec2(sdb3pisoizq,13));\n    res=opU(res, vec2(sdb3pisoder,13));\n    \n    \n    \n    \n    \n            \n    d = res.x;\n    mObj.dist = res.x;\n    mObj.tipo = res.y;\n        \n    return d;\n}\n\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.2;\n    //Determines size of shadow\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    //Texture of white and black in image\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\n\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(0, 5, 6);\n    //Determine movement of light ex. shadow and light direction and diffusion\n    lightPos.xz += vec2(sin(iTime), cos(iTime)*2.);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l );\n    if(d<length(lightPos-p)) dif *= .1;\n    \n    return dif;\n}\n\n\nfloat GetLightv2(vec3 p) {\n    vec3 lightPos = vec3(0, 5, 6);\n    //Determine movement of light ex. shadow and light direction and diffusion\n    lightPos.xz += vec2(1, 2);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l );\n    if(d<length(lightPos-p)) dif *= .1;\n    \n    return dif;\n}\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    \n    vec3 col = vec3(0);\n    \n    TObj Obj;\n    \n   \n    vec3 ro = vec3(0, 3.5, -16.5+ iTime*0.5);\n    \n\n    vec3 rLuz=vec3(0.5, 3.5, 4.5);\n    vec3 rLuz3=vec3(5.5, 1.5, -4.5);\n    \n   \n    \n    vec3 rd = normalize(vec3(uv.x, uv.y, 1.0));\n\t\n   \n    \n\n    float d = RayMarch(ro, rd);\n    Obj=mObj;\n    \n    \n    \n    vec3 p = (ro + rd * d ); \n    glpRoRd=p;\n    vec3 pluz=(rLuz + rd * d );\n    vec3 pluz3=(rLuz3 + rd * d );\n    \n    \n    \n    float dif = GetLight(p);\n   \n    float dif2 = abs(1.0- GetLightv2(pluz));\n    float dif3 = abs(1.0- GetLightv2(pluz3));\n    \n    \n    vec3 colobj;\n    \n    colobj=getSphereColor(int( Obj.tipo));\n    \n\n    \n    dif=(dif+dif2+dif3)/2.0;\n    \n    col = vec3(dif)*colobj;\n    \n    \n    \n    fragColor = vec4(col,1.0);\n    //Background color is white\n}\n","name":"Image","description":"","type":"image"}]}