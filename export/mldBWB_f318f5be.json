{"ver":"0.1","info":{"id":"mldBWB","date":"1701576364","viewed":23,"name":"zooming rainbow mandelbrot","username":"janpitokiala","description":"rainbow mandelbrot set (z to zoom out, mouse to zoom in, r to reset zoom)","likes":0,"published":1,"flags":48,"usePreview":0,"tags":["mandelbrot","rainbow"],"hasliked":0,"parentid":"cdXSR8","parentname":"rainbow mandelbrot"},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//too slow or looks bad? change settings in the common tab\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = texture(iChannel0, uv).rgb;\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Input handler\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(iFrame==0) {\n      fragColor = vec4(5.0,2.5,3.0,1.5);\n    } else {\n      vec4 v = texelFetch(iChannel0, ivec2(0,0), 0);\n      mat3 transform = mat3(\n        v.x, 0, 0,\n        0, v.z, 0,\n        v.y, v.w, 1\n      );\n      if(iMouse.z>0.) {\n        vec2 uv = iMouse.xy/iResolution.xy;\n        transform = transform*mat3(\n          0.99, 0, 0,\n          0, 0.99, 0,\n          -0.01*uv.x, -0.01*uv.y, 1\n        );\n      }\n      if(texelFetch(iChannel1, ivec2(90,0), 0).r>0.5) {\n        transform = transform*mat3(\n          1.01, 0, 0,\n          0, 1.01, 0,\n          0.005, 0.005, 1\n        );\n      }\n      if(texelFetch(iChannel1, ivec2(82,0), 0).r>0.5) {\n        transform = mat3(\n          5.0, 0, 0,\n          0, 3.0, 0,\n          2.5, 1.5, 1\n        );\n      }\n      fragColor = vec4(transform[0][0],transform[2][0],transform[1][1],transform[2][1]);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"//Main renderer\nvec2 square(in vec2 num) {\n    num = vec2(num.x*num.x-num.y*num.y,2.*num.x*num.y);\n    return num;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord*REDUCE_RESOLUTION)/iResolution.xy;\n    if(uv.x>1.||uv.y>1.) {\n      return;\n    }\n    vec4 transform = texelFetch(iChannel0, ivec2(0,0), 0);\n    if(iFrame%SKIP_FRAMES>0) {\n      fragColor=texture(iChannel2, uv/REDUCE_RESOLUTION);\n      return;\n    }\n    if(fragCoord.x==0.5&&fragCoord.y==0.5) {\n      fragColor = transform;\n      return;\n    }\n    uv.x = transform.x*uv.x-transform.y;\n    uv.y = transform.z*uv.y-transform.w;\n    vec2 z = vec2(0.,0.);\n    vec3 col = vec3(0.,0.,0.);\n    for(int i = 0;i < HIGH_ITERATIONS; i = i + 1) {\n        z = square(z) + uv;\n        if (length(z) > 2.) {\n            float tint = 1.;\n            col = tint*max(sin(float(i)/5.0+vec3(0.,2.,4.)),0.);\n            break;\n        }\n    }\n    // Output to screen\n    fragColor = vec4(pow(col,vec3(2.2)),1.0);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//Scales rendered image when zooming\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv1 = fragCoord/iResolution.xy;\n    vec2 uv2 = uv1;\n    vec4 transform = texelFetch(iChannel0, ivec2(1,1), 0);\n    vec4 oldTransform = texelFetch(iChannel1, ivec2(0,0), 0);\n    uv2 *= transform.xz;\n    uv2 -= transform.yw;\n    uv2 += oldTransform.yw;\n    uv2 /= oldTransform.xz;\n    if(uv2.x>1.0||uv2.x<0.0||uv2.y>1.0||uv2.y<0.0) {\n      fragColor = texture(iChannel2, uv1);\n    } else {\n      #ifdef NEAREST\n      ivec2 position = ivec2(uv2/REDUCE_RESOLUTION*vec2(textureSize(iChannel1, 0)));\n      vec3 col = texelFetch(iChannel1, position, 0).rgb;\n      #else\n      vec3 col = texture(iChannel1, uv2/REDUCE_RESOLUTION).rgb;\n      #endif\n      fragColor = vec4(pow(col,vec3(1./2.2)),1.0);\n    }\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"//Renders every frame, you only see it when zooming out\nvec2 square(in vec2 num) {\n    num = vec2(num.x*num.x-num.y*num.y,2.*num.x*num.y);\n    return num;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 transform = texelFetch(iChannel0, ivec2(0,0), 0);\n    uv.x = transform.x*uv.x-transform.y;\n    uv.y = transform.z*uv.y-transform.w;\n    vec2 z = vec2(0.,0.);\n    vec3 col = vec3(0.,0.,0.);\n    for(int i = 0;i < LOW_ITERATIONS; i = i + 1) {\n        z = square(z) + uv;\n        if (length(z) > 2.) {\n            float tint = 1.;\n            col = tint*sin(float(i)/5.0+vec3(0.,2.,4.));\n            break;\n        }\n    }\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Buffer D","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"//performance things\n#define SKIP_FRAMES 10 //how many frames to skip between rendering. (minimum: 1)\n#define HIGH_ITERATIONS 256 //how many iterations to do\n#define REDUCE_RESOLUTION 1. //how much to reduce resolution by. setting this to 2 would mean it would render in 2x2 blocks\n#define LOW_ITERATIONS 100 //iterations to do in buffer d (which you only see when SKIP_FRAMES is above 1 and you're zooming out)\n#define UPSAMPLE 1\n//#define NEAREST //makes it less blurry and more pixelated, does nothing with SKIP_FRAMES and REDUCE_RESOLUTION at 1","name":"Common","description":"","type":"common"}]}