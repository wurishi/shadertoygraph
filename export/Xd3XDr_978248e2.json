{"ver":"0.1","info":{"id":"Xd3XDr","date":"1458626242","viewed":2354,"name":"procedural blending","username":"FabriceNeyret2","description":"blending procedurals sprites or patches (yes, this can exist :-) ) creates ghosting. To avoid it, blend only base  noise and deferred the non-linear transform.\nleft to right: naive blend, normalized blend,base noise blend + deferred","likes":32,"published":3,"flags":0,"usePreview":0,"tags":["procedural","sprite","blend","variance","lagrangian","smartblend"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// NB: trick published in https://hal.inria.fr/inria-00537472\n// for the simple blend normalization, see https://www.shadertoy.com/view/4dcSDr\n \n// procedural texture: N(U, base noise)  T(U): base noise.\n//      for fractal noise, we should store each band.\n\n#define T(U) texture(iChannel0,2.*U/4.)      // *1.3 to 2 if dark texture\n#define N(U,T) smoothstep(.1,.0,abs(sin(U.x+(T).x+.03*vec4(0,1,2,0))-.5))\n//#define N(U,T) smoothstep(.5,.0,abs(sin(30.*U.y+T.x+.3*vec4(0,1,2,0))-.5))\n//#define N(U,T) smoothstep(.5,.0,abs(sin(30.*U.y+cos(10.*U.x)+T.x+.3*vec4(0,1,2,0))-.5))\n\n//#define mean texture(iChannel0,2.*U,10.)*1.3\n#define mean .1 // estimation of mean texture after transformation\n\n\n#define K(U) smoothstep(.2, .0, length(U))      // smooth kernel\n//#define K(U) smoothstep(.13, .12, length(U))  // disk kernel\n#define rnd(i) fract(1e4*sin(i+vec2(0,73.17)))  // texture offset\n\n\nvoid mainImage( out vec4 O,  vec2 U )\n{\n    O-=O;\n    vec4 Od = O;\n    vec2 R = iResolution.xy, r=R/R.y;\n    if (abs(U.x-R.x*.33)<2. || abs(U.x-R.x*.67)<2.) { O++; return; }\n    U /= R.y;\n    float s=0., s2=0., v;\n    for (int i=0; i<15; i++)\n    {\n        vec2 V = U-rnd(vec2(i))*r + .1*cos(vec2(i)+iTime+vec2(0,1.6)); // sprite position\n        v = K(.3*V); s += v; s2 += v*v;                          // kernel and momentums\n        O  += v* N(V,T(V)); // regular evaluation of complete procedural noise before blend\n        Od += v*T(V);       // deferred: only the base noise is blended\n    }\n   \n    if     (U.x>r.x*.67) O = Od; // regular or deferred.\n    \n    if     (U.x<r.x*.33)  // normalization\n            O /= s;                          // linear blend\n    else    O = mean + (O-s*mean)/sqrt(s2);  // variance preserving blend\n \n    if     (U.x>r.x*.67) O = N(U,O); // for deferred.\n}\n","name":"Image","description":"","type":"image"}]}