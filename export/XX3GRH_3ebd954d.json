{"ver":"0.1","info":{"id":"XX3GRH","date":"1719257264","viewed":45,"name":"Re: Subsurface Scattering (RC)","username":"Tech_","description":"asdasd","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["asda"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = radians(180.0);\nconst float n  = 40.0; // Number density of the volume\nconst vec3  A  = vec3(1.0, 0.6, 0.4) * 0.6;\nconst float b  = 0.0; // Absorptivity [0;1]\n\nvec3 Li(vec2 uv)\n{\n    return A * step(length(uv - 0.5 * vec2(iResolution.x / iResolution.y, 1.0)), 0.2);\n}\n\n// See eq. 2 at https://media.disneyanimation.com/uploads/production/publication_asset/153/asset/siggraph2016SSS.pdf\nvec3 GetDiffusionScale(vec3 A)\n{\n    return 1.9 - A + 3.5 * pow(A - 0.8, vec3(2.0));\n}\n\nvec3 GetScatteringDistance(vec3 sigma_t, vec3 s)\n{\n    return 1.0 / (sigma_t * s);\n}\n\n// See eq. 2 (https://graphics.pixar.com/library/ApproxBSSRDF/paper.pdf\nvec3 GetDiffusionProfile(vec3 A, float r, vec3 d)\n{\n    return A * (exp(-r / d) + exp(-r / (3.0 * d))) / (8.0 * PI * d * r);\n}\n\n// See eq. 3 (https://graphics.pixar.com/library/ApproxBSSRDF/paper.pdf\nvec3 GetDiffusionProfile(vec3 A, float r, vec3 s, vec3 sigma_t)\n{\n    vec3 d = GetScatteringDistance(sigma_t, s);\n    return GetDiffusionProfile(A, r, d);\n}\n\nvec3 PDF_DiffusionProfile(float r, vec3 d)\n{\n    return 2.0 * PI * r * (exp(-r / d) + exp(-r / (3.0 * d))) / (8.0 * PI * d * r);\n}\n\nfloat PDF_DiffusionProfile(float r, float d)\n{\n    return 2.0 * PI * r * (exp(-r / d) + exp(-r / (3.0 * d))) / (8.0 * PI * d * r);\n}\n\nfloat ICDF_DiffusionProfile(float u, float d)\n{\n    float G = 1.0 + 4.0 * u * (2.0 * u + sqrt(1.0 + 4.0 * u * u));\n    \n    return 3.0 * d * log((\n        1.0 + pow(G, -1.0 / 3.0) + pow(G, 1.0 / 3.0)\n    ) / (4.0 * u));\n}\n\nvoid ComputeVolumeProperties(\n    in vec3 A,\n    in float n,\n    in float b,\n    out vec3 alpha,\n    out vec3 sigma_s,\n    out vec3 sigma_a,\n    out vec3 sigma_t\n) {\n    // see eq. 1 at https://media.disneyanimation.com/uploads/production/publication_asset/153/asset/siggraph2016SSS.pdf\n    alpha   = 1.0 - exp(-5.09406 * A + 2.61188 * A * A - 4.31805 * A * A * A);\n    \n    /*\n        What is \"b\"?\n            b = 0, the volume gets its color exclusively from scattering of particles\n            b = 1, the volume gets its color exclusively from extinction of particles\n\n        Scattering-dependent case (b = 0):\n            sigma_s = n * alpha\n            sigma_t = n\n        =>  sigma_a = n - n * alpha\n        \n        Absorption-dependent case (b = 1):\n            sigma_s = n\n            sigma_t = n / A\n        =>  sigma_a = n / A - n\n        \n        The solutions below interpolate between both cases while\n        satisfying the condition sigma_s / sigma_t = alpha.\n        \n        ~ Tech\n    */\n    sigma_s = n * (-alpha * b + alpha + b);\n    sigma_a = n / alpha * (alpha - 1.0) * (alpha * b - alpha - b);\n    sigma_t = n * ((1.0 / alpha - 1.0) * b + 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2  uv   = fragCoord / iResolution.xy;\n    uv.x      *= iResolution.x / iResolution.y;\n    \n    float hash = Hash12(gl_FragCoord.xy);\n    mat2  rot  = RotateMat(hash * PI * 2.0);\n    \n    vec3 s = GetDiffusionScale(A);\n    vec3 alpha, sigma_s, sigma_a, sigma_t;\n    ComputeVolumeProperties(A, n, b, alpha, sigma_s, sigma_a, sigma_t);\n    vec3 d = GetScatteringDistance(sigma_t, s);\n    \n    /////////////////////////////\n    \n    vec3 estimate;\n    \n    float dMax = max(d.x, max(d.y, d.z));\n    \n    for (int i = 0; i < samples.length(); i++)\n    {\n        float r = ICDF_DiffusionProfile(samples[i].z, dMax);\n        vec2  o = rot * samples[i].xy * r;\n        \n        float scalarPDF = PDF_DiffusionProfile(r, dMax);\n        vec3  realPDF   = PDF_DiffusionProfile(r, d);\n        vec3  weight    = realPDF / scalarPDF;\n        \n        vec3 Li = Li(uv - o);\n        \n        estimate += Li * weight;\n    }\n    estimate /= float(samples.length());\n\n    fragColor = vec4(pow(estimate, vec3(1.0 / 2.2)), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"mat2 RotateMat(float angle)\n{\n    float s = sin(angle), c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\nfloat Hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 samples[128] = vec3[128](\n    vec3(0.000000, 1.000000, 0.003906),\n    vec3(0.675490, -0.737369, 0.011719),\n    vec3(-0.996171, 0.087426, 0.019531),\n    vec3(0.793601, 0.608439, 0.027344),\n    vec3(-0.174182, -0.984713, 0.035156),\n    vec3(-0.536728, 0.843755, 0.042969),\n    vec3(0.965715, -0.259604, 0.050781),\n    vec3(-0.887448, -0.460907, 0.058594),\n    vec3(0.343039, 0.939321, 0.066406),\n    vec3(0.381556, -0.924346, 0.074219),\n    vec3(-0.905734, 0.423846, 0.082031),\n    vec3(0.954164, 0.299284, 0.089844),\n    vec3(-0.501408, -0.865211, 0.097656),\n    vec3(-0.214719, 0.976676, 0.105469),\n    vec3(0.818062, -0.575129, 0.113281),\n    vec3(-0.991708, -0.128511, 0.121094),\n    vec3(0.644447, 0.764649, 0.128906),\n    vec3(0.041318, -0.999146, 0.136719),\n    vec3(-0.705380, 0.708829, 0.144531),\n    vec3(0.998933, -0.046191, 0.152344),\n    vec3(-0.767784, -0.640709, 0.160156),\n    vec3(0.133347, 0.991069, 0.167969),\n    vec3(0.571132, -0.820858, 0.175781),\n    vec3(-0.975617, 0.219481, 0.183594),\n    vec3(0.867647, 0.497181, 0.191406),\n    vec3(-0.303935, -0.952693, 0.199219),\n    vec3(-0.419423, 0.907791, 0.207031),\n    vec3(0.922473, -0.386061, 0.214844),\n    vec3(-0.940984, -0.338452, 0.222656),\n    vec3(0.465231, 0.885189, 0.230469),\n    vec3(0.254890, -0.966970, 0.238281),\n    vec3(-0.841127, 0.540838, 0.246094),\n    vec3(0.985551, 0.169376, 0.253906),\n    vec3(-0.612303, -0.790623, 0.261719),\n    vec3(-0.082565, 0.996586, 0.269531),\n    vec3(0.734065, -0.679079, 0.277344),\n    vec3(-0.999988, 0.004878, 0.285156),\n    vec3(0.740655, 0.671885, 0.292969),\n    vec3(-0.092284, -0.995733, 0.300781),\n    vec3(-0.604560, 0.796559, 0.308594),\n    vec3(0.983852, -0.178984, 0.316406),\n    vec3(-0.846364, -0.532606, 0.324219),\n    vec3(0.264312, 0.964437, 0.332031),\n    vec3(0.456572, -0.889686, 0.339844),\n    vec3(-0.937637, 0.347617, 0.347656),\n    vec3(0.926196, 0.377043, 0.355469),\n    vec3(-0.428259, -0.903656, 0.363281),\n    vec3(-0.294626, 0.955613, 0.371094),\n    vec3(0.862755, -0.505622, 0.378906),\n    vec3(-0.977712, -0.209952, 0.386719),\n    vec3(0.579113, 0.815247, 0.394531),\n    vec3(0.123671, -0.992323, 0.402344),\n    vec3(-0.761496, 0.648169, 0.410156),\n    vec3(0.999336, 0.036443, 0.417969),\n    vec3(-0.712262, -0.701914, 0.425781),\n    vec3(0.051064, 0.998695, 0.433594),\n    vec3(0.636956, -0.770900, 0.441406),\n    vec3(-0.990407, 0.138180, 0.449219),\n    vec3(0.823635, 0.567121, 0.457031),\n    vec3(-0.224238, -0.974534, 0.464844),\n    vec3(-0.492942, 0.870062, 0.472656),\n    vec3(0.951199, -0.308579, 0.480469),\n    vec3(-0.909826, -0.414989, 0.488281),\n    vec3(0.390557, 0.920579, 0.496094),\n    vec3(0.333858, -0.942623, 0.503906),\n    vec3(-0.882909, 0.469543, 0.511719),\n    vec3(0.968202, 0.250170, 0.519531),\n    vec3(-0.544935, -0.838479, 0.527344),\n    vec3(-0.164566, 0.986366, 0.535156),\n    vec3(0.787627, -0.616153, 0.542969),\n    vec3(-0.996977, -0.077702, 0.550781),\n    vec3(0.682652, 0.730743, 0.558594),\n    vec3(-0.009756, -0.999952, 0.566406),\n    vec3(-0.668264, 0.743924, 0.574219),\n    vec3(0.995271, -0.097141, 0.582031),\n    vec3(-0.799499, -0.600667, 0.589844),\n    vec3(0.183781, 0.982967, 0.597656),\n    vec3(0.528470, -0.848952, 0.605469),\n    vec3(-0.963136, 0.269014, 0.613281),\n    vec3(0.891903, 0.452227, 0.621094),\n    vec3(-0.352187, -0.935930, 0.628906),\n    vec3(-0.372520, 0.928024, 0.636719),\n    vec3(0.901556, -0.432663, 0.644531),\n    vec3(-0.957039, -0.289960, 0.652344),\n    vec3(0.509825, 0.860278, 0.660156),\n    vec3(0.205180, -0.978724, 0.667969),\n    vec3(-0.812412, 0.583083, 0.675781),\n    vec3(0.992915, 0.118829, 0.683594),\n    vec3(-0.651877, -0.758325, 0.691406),\n    vec3(-0.031568, 0.999502, 0.699219),\n    vec3(0.698431, -0.715678, 0.707031),\n    vec3(-0.998434, 0.055935, 0.714844),\n    vec3(0.773998, 0.633188, 0.722656),\n    vec3(-0.143010, -0.989721, 0.730469),\n    vec3(-0.563096, 0.826391, 0.738281),\n    vec3(0.973429, -0.228989, 0.746094),\n    vec3(-0.872456, -0.488692, 0.753906),\n    vec3(0.313215, 0.949682, 0.761719),\n    vec3(0.410546, -0.911840, 0.769531),\n    vec3(-0.918663, 0.395043, 0.777344),\n    vec3(0.944241, 0.329256, 0.785156),\n    vec3(-0.473845, -0.880608, 0.792969),\n    vec3(-0.245444, 0.969411, 0.800781),\n    vec3(0.835810, -0.549018, 0.808594),\n    vec3(-0.987157, -0.159753, 0.816406),\n    vec3(0.619988, 0.784612, 0.824219),\n    vec3(0.072838, -0.997344, 0.832031),\n    vec3(-0.727405, 0.686209, 0.839844),\n    vec3(0.999893, -0.014634, 0.847656),\n    vec3(-0.747175, -0.664627, 0.855469),\n    vec3(0.101995, 0.994785, 0.863281),\n    vec3(0.596760, -0.802420, 0.871094),\n    vec3(-0.982059, 0.188574, 0.878906),\n    vec3(0.851520, 0.524323, 0.886719),\n    vec3(-0.273709, -0.961813, 0.894531),\n    vec3(-0.447870, 0.894098, 0.902344),\n    vec3(0.934201, -0.356748, 0.910156),\n    vec3(-0.929830, -0.367988, 0.917969),\n    vec3(0.437055, 0.899435, 0.925781),\n    vec3(0.285288, -0.958442, 0.933594),\n    vec3(-0.857781, 0.514016, 0.941406),\n    vec3(0.979713, 0.200403, 0.949219),\n    vec3(-0.587040, -0.809558, 0.957031),\n    vec3(-0.113984, 0.993483, 0.964844),\n    vec3(0.755136, -0.655568, 0.972656),\n    vec3(-0.999644, -0.026692, 0.980469),\n    vec3(0.719076, 0.694931, 0.988281),\n    vec3(-0.060805, -0.998150, 0.996094)\n);","name":"Common","description":"","type":"common"}]}