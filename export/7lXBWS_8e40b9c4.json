{"ver":"0.1","info":{"id":"7lXBWS","date":"1651431361","viewed":113,"name":"2D Spinning Cube","username":"Runar","description":"2 dimensional spinning cube","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2dcube"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Rotates uv theta*pi clockwise\nvec2 rotate(vec2 uv, float theta) {\n    theta *= 3.1415;\n    return mat2(cos(theta),sin(theta),-sin(theta),cos(theta)) * uv;\n}\n\n// Makes a cube with size and offset\nvec3 cube(vec2 uv, float size, vec2 offset) {\n    float x = uv.x - offset.x;\n    float y = uv.y - offset.y;\n    \n    // Fix aspect ratio, i.e. make it cube not rect\n    x *= 8./4.5;\n    \n    vec2 rotd = rotate(vec2(x,y), 1.0 * sin(iTime));\n    \n    float d = max(abs(rotd.x), abs(rotd.y)) - size;\n    \n    return d > 0.0 ? vec3(1.0) : vec3(1.0,0.0,0.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = cube(uv, .2, vec2(.5,.5));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}