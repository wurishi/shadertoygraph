{"ver":"0.1","info":{"id":"XdtXRS","date":"1459973288","viewed":465,"name":"Voronoids","username":"mazander","description":"Voronoi distance visualization with moving points.","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\n    vec4 uv = vec4(fragCoord, fragCoord) / iResolution.y;\n    vec4 a = vec4(1.01, 1.11, 1.21, 1.31) * iTime * .2, p;\n    \n    float d = .5;\n    \n    for(float i = 0.; i < 20.; i++) {\n       \t\n        a += i * vec4(3.,4.,5.,6.) + vec4(1.3,2.5,3.3,4.1);\n\t\tp = fract(uv + sin(a)) - .5; // Wrapping the offset point.\n        d = min(d, min(dot(p.xy, p.xy), dot(p.zw, p.zw))); // Take square root outside loop for efficiency.\n    }\n\n    // \"dist>=0.\" and sqrt(Max)*4. = 1., so no clamping needed, in this case.\n    d = sqrt(d)*4.;\n    \n    fragColor = vec4(vec3(d*d*.5, d, pow(d, .66)), 1.0);\n}","name":"Image","description":"","type":"image"}]}