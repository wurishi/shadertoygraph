{"ver":"0.1","info":{"id":"Xclyz2","date":"1721328629","viewed":52,"name":"xBR","username":"aksel","description":"adapted from https://github.com/libretro/common-shaders/blob/master/xbr/shaders/hlsl/5xbr-v3.7a.cg to GLSL\n\ntransition copied from https://www.shadertoy.com/view/tdfyD2","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["filter","imageprocessing","pixelart"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ported from https://github.com/libretro/common-shaders/blob/master/xbr/shaders/hlsl/5xbr-v3.7a.cg\n\nconst vec3 yuv_weighted  = vec3(14.352, 28.176, 5.472);\nconst float coef = 2.0;\n\n\nvec4 diff(vec4 ca, vec4 cb)\n{\n    return vec4(abs(ca.x-cb.x), abs(ca.y-cb.y), abs(ca.z-cb.z), abs(ca.w-cb.w));\n}\n\nvec3 c(vec2 p)\n{\n    return texture(iChannel0, p).rgb;\n}\n\nvec3 c(vec2 p, float x, float y)\n{\n    return c(p + vec2(x, y));\n}\n\nvec4 w_diff(vec4 a, vec4 b, vec4 c, vec4 d, vec4 e, vec4 f, vec4 g, vec4 h)\n{\n    return (diff(a,b) + diff(a,c) + diff(d,e) + diff(d,f) + 4.0*diff(g,h));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    // from https://www.shadertoy.com/view/tdfyD2\n    vec2 p = vec2(-0.042,0.0)+ uv*vec2(0.25,1.0)+vec2(floor(iTime*8.0)*0.156+0.064*floor(iTime*8.0/6.0),0.0);\n    \n    vec2 ts = vec2(textureSize(iChannel0, 0));\n    float dx = (1.0 / ts.x);\n    float dy = (1.0 / ts.y);\n    \n    vec2 fp = vec2(fract(p.x*ts.x), fract(p.y*ts.y));\n    \n    vec3 A = c(p, -dx, -dy);\n    vec3 B = c(p, 0., -dy);\n    vec3 C = c(p, dx, -dy);\n    vec3 D = c(p, -dx, 0.);\n    vec3 E = c(p, 0., 0.);\n    vec3 F = c(p, dx, 0.);\n    vec3 G = c(p, -dx, dy);\n    vec3 H = c(p, 0., dy);\n    vec3 I = c(p, dx, dy);\n    \n    vec3 A1 = c(p, -dx, -2.*dy);\n    vec3 C1 = c(p, dx, -2.*dy);\n    vec3 A0 = c(p, -2.*dx, -dy);\n    vec3 G0 = c(p, -2.*dx, dy);\n    vec3 C4 = c(p, 2.*dx, -dy);\n    vec3 I4 = c(p, 2.*dx, dy);\n    vec3 G5 = c(p, -dx, 2.*dy);\n    vec3 I5 = c(p, dx, 2.*dy);\n    vec3 B1 = c(p, 0., -2.*dy);\n    vec3 D0 = c(p, -2.*dx, 0.);\n    vec3 H5 = c(p, 0., 2.*dx);\n    vec3 F4 = c(p, 2.*dx, 0.);\n    \n    vec4 b = yuv_weighted * mat4x3(B,D,H,F);\n    vec4 c = yuv_weighted * mat4x3(C,A,G,I);\n    vec4 e = yuv_weighted * mat4x3(E,E,E,E);\n    vec4 d = b.yzwx;\n    vec4 f = b.wxyz;\n    vec4 g = c.zwxy;\n    vec4 h = b.zwxy;\n    vec4 i = c.wxyz;\n    \n    vec4 i4 = yuv_weighted * mat4x3(I4, C1, A0, G5);\n    vec4 i5 = yuv_weighted * mat4x3(I5, C4, A1, G0);\n    vec4 h5 = yuv_weighted * mat4x3(H5, F4, B1, D0);\n    vec4 f4 = h5.yzwx;\n    \n    vec4 Ao = vec4(1.,-1.,-1.,1.);\n    vec4 Bo = vec4(1.,1.,-1.,-1.);\n    vec4 Co = vec4(1.5,0.5,-0.5,0.5);\n    vec4 Ax = vec4(1.,-1.,-1.,1.);\n    vec4 Bx = vec4(0.5,2.,-0.5,-2.);\n    vec4 Cx = vec4(1.,1.,-0.5,0.);\n    vec4 Ay = vec4(1.,-1.,-1.,1.);\n    vec4 By = vec4(2.,0.5,-2.,-0.5);\n    vec4 Cy = vec4(2.,0.,-1.,0.5);\n    \n    bool fxx = (Ao.x*fp.y+Bo.x*fp.x > Co.x);\n    bool fxleftx = (Ax.x*fp.y+Bx.x*fp.x > Cx.x);\n    bool fxupx   = (Ay.x*fp.y+By.x*fp.x > Cy.x);\n    \n    bool fxy      = (Ao.y*fp.y+Bo.y*fp.x > Co.y); \n    bool fxlefty = (Ax.y*fp.y+Bx.y*fp.x > Cx.y);\n    bool fxupy   = (Ay.y*fp.y+By.y*fp.x > Cy.y);\n\n    bool fxz      = (Ao.z*fp.y+Bo.z*fp.x > Co.z); \n    bool fxleftz = (Ax.z*fp.y+Bx.z*fp.x > Cx.z);\n    bool fxupz   = (Ay.z*fp.y+By.z*fp.x > Cy.z);\n\n    bool fxw      = (Ao.w*fp.y+Bo.w*fp.x > Co.w); \n    bool fxleftw = (Ax.w*fp.y+Bx.w*fp.x > Cx.w);\n    bool fxupw   = (Ay.w*fp.y+By.w*fp.x > Cy.w);\n\n    bool irlv1x      = ((e.x!=f.x) && (e.x!=h.x));\n    bool irlv2leftx = ((e.x!=g.x) && (d.x!=g.x));\n    bool irlv2upx   = ((e.x!=c.x) && (b.x!=c.x));\n\n    bool irlv1y      = ((e.y!=f.y) && (e.y!=h.y));\n    bool irlv2lefty = ((e.y!=g.y) && (d.y!=g.y));\n    bool irlv2upy   = ((e.y!=c.y) && (b.y!=c.y));\n\n    bool irlv1z      = ((e.z!=f.z) && (e.z!=h.z));\n    bool irlv2leftz = ((e.z!=g.z) && (d.z!=g.z));\n    bool irlv2upz   = ((e.z!=c.z) && (b.z!=c.z));\n\n    bool irlv1w      = ((e.w!=f.w) && (e.w!=h.w));\n    bool irlv2leftw = ((e.w!=g.w) && (d.w!=g.w));\n    bool irlv2upw   = ((e.w!=c.w) && (b.w!=c.w));\n    \n    // weights\n    vec4 w1 = w_diff(e, c, g, i, h5, f4, h, f);\n    vec4 w2 = w_diff(h, d, i5, f, i4, b, e, i);\n    \n    vec4 t1 = coef*diff(f,g);\n    vec4 t2 = diff(h,c);\n    vec4 t3 = diff(f,g);\n    vec4 t4 = coef*diff(h,c);\n    \n    // edge detection rules\n    bool edrx = (w1.x<w2.x) && irlv1x;\n    bool edry = (w1.y<w2.y) && irlv1y;\n    bool edrz = (w1.z<w2.z) && irlv1z;\n    bool edrw = (w1.w<w2.w) && irlv1w;\n    bool edrleftx = (t1.x<=t2.x) && irlv2leftx;\n    bool edrlefty = (t1.y<=t2.y) && irlv2lefty;\n    bool edrleftz = (t1.z<=t2.z) && irlv2leftz;\n    bool edrleftw = (t1.w<=t2.w) && irlv2leftw;\n    bool edrupx = (t4.x<=t3.x) && irlv2upx;\n    bool edrupy = (t4.y<=t3.y) && irlv2upy;\n    bool edrupz = (t4.z<=t3.z) && irlv2upz;\n    bool edrupw = (t4.w<=t3.w) && irlv2upw;\n\n    bool ncx = ( edrx && (fxx || edrleftx && fxleftx || edrupx && fxupx) );\n    bool ncy = ( edry && (fxy || edrlefty && fxlefty || edrupy && fxupy) );\n    bool ncz = ( edrz && (fxz || edrleftz && fxleftz || edrupz && fxupz) );\n    bool ncw = ( edrw && (fxw || edrleftw && fxleftw || edrupw && fxupw) );\n\n    t1 = diff(e,f);\n    t2 = diff(e,h);\n    \n    bool pxx = t1.x<=t2.x;\n    bool pxy = t1.y<=t2.y;\n    bool pxz = t1.z<=t2.z;\n    bool pxw = t1.w<=t2.w;\n    \n    // from https://www.shadertoy.com/view/tdfyD2 all credits to them for the transition animation\n    vec3 res = ncx ? pxx ? F : H : ncy ? pxy ? B : F : ncz ? pxz ? D : B : ncw ? pxw ? H : D : E;\n    vec3 col1 = res;\n    vec3 col2 = texture(iChannel0,p).xyz;\n    float split = 0.5+0.5*sin(iTime);\n    fragColor = vec4(uv.x>0.18&&uv.x<0.82?(uv.x>split?uv.x<split+0.01?vec3(0.0,0.0,0.0):col2:col1):vec3(1.0),1.0);\n    \n    //fragColor = uv.x>0.18&&uv.x<0.82?color:vec4(1.0);\n}","name":"Image","description":"","type":"image"}]}