{"ver":"0.1","info":{"id":"wslcWn","date":"1584594290","viewed":112,"name":"rainbow spiral 1 â™¡","username":"HaleyHalcyon","description":"a","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["a"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nLoops from 0 to 3.\nThe intent of the function is\nto show pure 0deg, 120deg, and 240deg\nas well as colors close to 60deg, 180deg, and 300deg.\nTheoretically, we could return a R value of 1.0\nfor all hues from 300deg to 60deg.\nBut because pure linear RGB values don't account for gamma,\nI need to handle it by using a power function.\n */\nvec3 rainbow(float x) {\n    vec3 xyz = abs(mod(x + vec3(0.5,1.5,2.5), 3.) - 1.5);\n    return 1.0 - pow(\n        max(vec3(0.0), xyz * 2. - 1.)\n    , vec3(2.));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord - 0.5 * (iResolution.xy);\n\n    // Time varying pixel color\n    float dist = log(dot(uv, uv));\n    float angle = atan(uv.y, uv.x) / 6.28318530718;\n    vec3 col = rainbow(dist * 0.2 + angle * 3.0 + sin(iTime * 2.0 + dist * 2.0) * 0.2 + sin(1.4 + -iTime + dist * 0.7) * -0.2);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}