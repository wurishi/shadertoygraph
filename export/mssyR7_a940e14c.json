{"ver":"0.1","info":{"id":"mssyR7","date":"1686702009","viewed":55,"name":"Nukeball25","username":"SUBAUX","description":"Help me add color and clean it up!","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["ball"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n\nvec3 palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n    }\n\nfloat GetDist(vec3 p){\n    vec4 s = vec4(0, 1, 6, 1);\n    \n    float sphereDist = length(p-s.xyz)-s.w;\n    float planeDist = p.y;\n    \n    float d = min(sphereDist, planeDist);\n    return d;\n    \n}\nfloat RayMarch(vec3 ro, vec3 rd) {\n    float dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++){\n      vec3 p = ro + rd*dO;\n      float ds = GetDist(p);\n      dO += tan(ds)+sin(iTime)*2.;\n      if (dO>MAX_DIST || ds<SURF_DIST) break;\n}\n    return dO;\n}  \nvec3 GetNormal(vec3 p){\n   float d = GetDist(p);\n   vec2 e = vec2(.01, 0);\n   \n   vec3 n = d - vec3(\n       GetDist(p-e.xyy),\n       GetDist(p-e.yxy),\n       GetDist(p-e.yyx));\n       \nreturn normalize(n);\n}\nfloat GetLight(vec3 p){\n    vec3 lightPos = vec3(0, 5, 6);\n    lightPos.xz += vec2(sin(iTime), cos(iTime))*2.;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p); \n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l);\n    if(d<length(lightPos-p)) dif *= .1;\n    \n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n  /*  vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n\n    for (float i = 0.0; i < 4.0; i++) {\n        uv = fract(uv * 1.5) - 0.5;\n\n        float d2 = length(uv) * exp(-length(uv0));\n\n        vec3 col = palette(length(uv0) + i*.4 + iTime*.4);\n\n        d2 = sin(d2*8. + iTime)/8.;\n        d2 = abs(d2);\n\n        d2 = pow(0.01 / d2, 1.2);\n\n      col = pow(col, vec3(d2));*/\n    //}\n\n    vec2 uv2 = (fragCoord-.5*iResolution.xy)/iResolution.y;\n     vec3 finalColor = vec3(0.0); \n   \n  // vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n   vec3 ro = vec3(0, 1, 0);\n    vec3 rd = normalize(vec3(uv2.x, uv2.y, 1.));\n\n    float d = RayMarch(ro, rd);\n    \n   vec3 p = ro + rd * d;\n    vec3 col = palette(length(uv) + d*.4 + iTime*.4);\n    float dif = GetLight(p); \n   col = vec3(dif);\n    \n   col = pow(col, vec3(d, 1.,0.));\n     finalColor += col * d;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}