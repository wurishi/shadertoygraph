{"ver":"0.1","info":{"id":"3dsczj","date":"1585164036","viewed":199,"name":"Julia set Fourier series 2","username":"rory618","description":"Adapting https://www.shadertoy.com/view/tlyXWm to draw a julia set instead. Got my direction from https://math.stackexchange.com/questions/632911/area-of-filled-julia-set to come up with the coefficients.","likes":17,"published":1,"flags":32,"usePreview":0,"tags":["2d","fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 O, in vec2 I )\n{\n    O = vec4(1);\n    vec4 d = texture(iChannel1,I/iResolution.xy);\n    O = min(O,vec4(d.x));\n    O = min(O,vec4(d.y));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define k(x) texelFetch(iChannel0, ivec2(x,j), 0).xy\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    int j = int(I.y);\n    vec2 s = vec2[] ( vec2(-1.75, 0), vec2(-1.32, 0.0), vec2(-.75, 0.0), vec2(.25, 0.0),\n                      vec2(-1.3, 0.43), vec2(.4, 0.3), vec2( .35, 0.3), vec2( .33, 0.1 ),\n                      vec2(-0.56, 0.65), vec2(-0.62, 0.33), vec2(-0.125, + 0.61), vec2(0.32, 0.17),\n                      vec2(0.36, 0.6), vec2(-0.93, 0.23), vec2(-0.15, 0.75), vec2(0.35, 0.25) )[j];\n    \n    O = texture(iChannel0, I/R.xy);\n    if(iFrame==0 && int(I.x) == 0){\n        O.xy = -s/2.;\n    } else {\n        if(iFrame==int(I.x)){\n            int n = (iFrame-1)/2;\n            if(iFrame%2==1){\n                O.xy = k(n);\n                O.xy -= mat2(O.xy, -O.y, O.x)*O.xy;\n                for(int i = 0; i < n; i++){\n                    vec2 ka = k(n-1-i);\n                    O.xy -= 2. * mat2(ka,-ka.y,ka.x)*k(n+1+i);\n                }\n                O.xy /= 2.;\n            } else {\n                O.xy = vec2(0);\n                for(int i = 0; i <= n; i++){\n                    vec2 ka = k(n-i);\n                    O.xy -= mat2(ka,-ka.y,ka.x)*k(n+1+i);\n                }\n            }\n        }\n    }\n    \n}\n\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec2 x(int i, int j){\n    return texelFetch(iChannel0, ivec2(i,j),0).xy;\n}\n\nfloat dLine(vec2 p, vec2 a, vec2 b){\n    p-=a;\n    b-=a;\n    float l2 = dot(b,b);\n    p -= b*clamp(dot(p,b/l2),0.,1.);\n    return length(p);\n}\n\nfloat dLineCircle(vec2 p, vec2 a, vec2 b){\n    p-=a;\n    b-=a;\n    float l = length(b);\n    float l2 = dot(b,b);\n    float d = abs(length(p)-l);\n    p -= b*clamp(dot(p,b/l2),0.,1.);\n    return min(d,length(p));\n}\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    \n    vec2 Idiv = mod(I*vec2(4.),R.xy);\n    int j = int(I.x*4./R.x) + int(I.y*4./R.y)*4;\n    \n    vec2 p = (Idiv*2.-R.xy)/R.y*1.5;\n    float sc = 4.*2./R.y*1.5;\n    float theta = float(iFrame-400)/300.;\n    vec2 wn = vec2(cos(theta),sin(theta));\n    vec2 wm2 = vec2(cos(-2.*theta),sin(-2.*theta));\n    vec2 z = wn;\n    wn = mat2(wn, -wn.y, wn.x) * wm2;\n    O=texture(iChannel1,I/R.xy);\n    \n    O.x = dLineCircle(p,vec2(0),z)/sc;\n    \n    vec2 nz = z + mat2(wn, -wn.y, wn.x) * x(0,j);\n    O.x = min(O.x, dLineCircle(p,z,nz)/sc);\n    z = nz;\n    for(int i = 1; i < 400; i++){\n        \n        wn = mat2(wn, -wn.y, wn.x) * wm2;\n        vec2 nz = z+mat2(wn, -wn.y, wn.x) * x(i,j);\n        O.x = min(O.x, dLineCircle(p,z,nz)/sc);\n        z = nz;\n    }\n    if(iFrame<400){\n        O.y = 1.;\n    } else {\n        if(distance(z,O.zw)<10.*sc)\n        \tO.y = min(O.y, dLine(p,z,O.zw)/sc);\n    }\n    O.zw = z;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define R iResolution","name":"Common","description":"","type":"common"}]}