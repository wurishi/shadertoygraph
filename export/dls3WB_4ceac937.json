{"ver":"0.1","info":{"id":"dls3WB","date":"1672363811","viewed":68,"name":"doodlenoodle","username":"sophia_the_idea","description":"well you see darling i'm bored and i followed a tutorial ","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["yeahbaby"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n   //vec3 col2 = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(8,2,4));\n\nfloat t = iTime*.2; //animation\nuv *= mat2(cos(t), -sin(t), sin(t), cos(t));\n   //camera code\n   vec3 ro = vec3(0,0,-1); //third number is ground plane, -1 get u in middle bc of other -1\n   vec3 lookat = mix(vec3(0), vec3(-1, 0, -1), sin(t*1.56)*.5+.5); //looks at orgin\n   float zoom = mix(.2, .7, sin(t)*.5+.5);\n   \n   //direction three axis for camera c is center\n   vec3 f = normalize(lookat-ro),\n       r = normalize(cross(vec3(0,1,0), f)),\n       u = cross(f, r),\n       c = ro + f * zoom, \n       i = c + uv.x * r + uv.y * u,\n       rd = normalize(i-ro);\n   \n   float radius = mix(.3, 1.5, sin(t*.4)*.5+.5);;\n   float ds, dO; \n   vec3 p;\n   \n   for(int i =0; i<100; i++){\n   p = ro +rd * dO;\n   ds = -(length(vec2(length(p.xz)-1., p.y)) - radius); //size of tube\n                                                    //made donut -.5 is radus - is making it inverted\n   if(ds<.001) break;\n   dO += ds;\n   }\n    vec3 col = vec3(0);\n\n   if(ds < .001) {\n   float x = atan(p.x, p.z)+t*.5; //pi to pi //adding t here makes the texture rotate\n   float y = atan(length(p.xz)-1., p.y);\n   \n   float bands = sin(y*10.+x*20.); //makes sqirly donut Ito make swist add x and multi by whole number)\n   float ripples = sin((x*10.-y*30.)*3.)*.5+.5; //*3 makes frequency of rips higher\n   float waves = sin(x*2.-y*6.+t*20.);\n  \n  float b1 = smoothstep(-1., 1., bands); //makes lines harder\n  float b2 = smoothstep(-.2, .2, bands-.5); //makes white part more narrow\n  float m = b1*(1.-b2); //makes so you just have edges\n  m += max(m, ripples*b2*max(0., waves)); //shows ripples inside of the groove\n  m += max(0., waves*.3*b2);\n  \n  \n  \n  col += mix(m, 1.-m, smoothstep(-.3, .3, sin(x*2.+t))); //if you enter in a different varible it changes what ou see\n   }\n    \n   fragColor = vec4(col, 1.0);\n   //fragColor = vec4(0.5 + 0.5 * col, 1.0);\n}","name":"Image","description":"","type":"image"}]}