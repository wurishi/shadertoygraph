{"ver":"0.1","info":{"id":"wtScWz","date":"1594104846","viewed":163,"name":"Fake Almost Parallax","username":"BigotedSJW","description":"something off the top of my head. Now how to (properly) light the thing?","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["2d","tunnel","parallax"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 pixCenter = 0.5*iResolution.xy;\n\t\n    vec2 offset = fract(iTime*vec2(0.10,0.20));\n    \n    //courtesy @FabriceNeyret2: blur atan asymtope (if I am not misunderstanding)\n    //float centerScanline = pixCenter.y;\n    //float fourAbove = pixCenter.y - 4.;\n    //float eightAbove = pixCenter.y - 8.;\n    //float lod = 2. * min(\n    //    smoothstep(eightAbove, fourAbove, fragCoord.y),\n    //    smoothstep(eightAbove, fourAbove, iResolution.y - fragCoord.y));\n    // I guess I am misunderstanding as this makes it worse\n    \n    //vec4 rawValues = textureLod(iChannel0, uv, lod);\n    vec4 rawValues = texture(iChannel0, uv);\n    \n    \n    vec2 layer1uv = rawValues.xw;\n    vec2 layer2uv = rawValues.xz;\n    vec2 layer3uv = rawValues.xy;\n    \n    float bright1 = texture(iChannel1, layer1uv + offset).x;\n    float bright2 = texture(iChannel1, layer2uv + offset).x;\n    float bright3 = texture(iChannel1, layer3uv + offset).x;\n    \n    float clampedRange1 = smoothstep(0.0, 1.0, bright1 * 3.);\n    float clampedRange2 = smoothstep(0.0, 1.0, bright2 * 3. - 1.);\n    float clampedRange3 = smoothstep(0.0, 1.0, bright3 * 3. - 2.);\n    \n    float fakeHeight = clampedRange1 + clampedRange2 + clampedRange3;\n    \n    //courtesy @spalmer\n    vec2 deriv = vec2(dFdx(fakeHeight), dFdy(fakeHeight));\n    vec2 lightDir = -normalize(vec2(fragCoord - pixCenter));\n    \n    //adds some character but looks like it is\n    //flat-embossed out of the center of the screen\n    float light = 2.0*dot(deriv, lightDir)/layer1uv.y + 0.5;\n    \n    vec2 pos = mix(layer1uv, layer3uv, fakeHeight/3.);\n    \n    vec4 col = texture(iChannel2, pos + offset)*light;\n          \n    fragColor = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// precompute\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    bool iMouseDown = !(iMouse.z < 0.);\n    if(iTime > 2.0 && !iMouseDown){ //give time to fullscreen, if desired\n    \tfragColor = texture(iChannel0, fragCoord/iResolution.xy);\n    } else {\n    \n        float epsilon = 0.25/iResolution.y;\n\n        vec2 uvIn = to2x2prop(fragCoord, iResolution);\n\n        float angle = atan(uvIn.y, uvIn.x) / pi;\n\n\n        if(abs(uvIn.y) < epsilon && uvIn.x < 0.){\n            angle = 1.0;\n        } //alternative discontinuity fix\n\n        float r = length(uvIn);\n\n        float invDist1 = 0.3/r;\n        float invDist2 = 0.33/r;\n        float invDist3 = 0.36/r;\n\n\n        fragColor = vec4(angle, invDist1, invDist2, invDist3);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const float pi = float(0xC90FDB) * exp2(-22.);\n\nvec2 to2x2prop(vec2 fragCoord, vec3 iResolution){\n\treturn (fragCoord.xy - iResolution.xy * 0.5) / (0.5*iResolution.y);\n}\n","name":"Common","description":"","type":"common"}]}