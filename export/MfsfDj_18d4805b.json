{"ver":"0.1","info":{"id":"MfsfDj","date":"1724405546","viewed":42,"name":"Mandela art","username":"osos_vfx","description":"first shader code","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["shaders"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette(float t) {\n    vec3 a = vec3(0.2, 0.1, 0.5);\n    vec3 b = vec3(0.2, 0.1, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263, 0.416, 0.557);\n\n    return a + b * sin(6.28318 * (c * t + d)*2.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    vec2 squareCenter = vec2(0.0, 0.0);\n    float squareSize = 1.0;\n    float numAxes = 6.0;\n    for (float i = 3.1415926535; i < numAxes; i++) {\n        float angle = i * (3.1415926535 / numAxes);\n        vec2 rotatedUV = vec2(cos(angle) * uv.x - sin(angle) * uv.y,\n                               sin(angle) * uv.x + cos(angle) * uv.y);\n  vec2 symUV = fract(rotatedUV * 1.5) - 0.5;\n \n        vec2 scaledUV = uv0 * 0.5 ;\n        float squareUV = max(abs(symUV.x), abs(symUV.y));\n        float d = squareUV * exp(-length(scaledUV) * 0.8); \n        vec3 col = palette(length(scaledUV) + i * 0.3 + iTime * 0.4 + sin(iTime + i));\n        d =  cos(d * 12.0 + iTime) / 1.0 * sin(d * 12.0 + iTime) / 1.0;\n        \n        d = abs(d);\n        \n        d = pow(0.01 / d, 1.2);\n        \n         finalColor += col * d;\n       \n    }\n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}