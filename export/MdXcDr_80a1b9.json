{"ver":"0.1","info":{"id":"MdXcDr","date":"1487776602","viewed":98,"name":"MidtermProject","username":"Anderson","description":"Midterm Pattern 6/10","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PATTERN 2\n\n#define PI 3.14159265358\n#define TWO_PI 6.28318530716\n\n// ROTATE AND SCALE FUNCTIONS-----------------------------------------\n\nmat2 rotate2d(float angle)\n{\n    return mat2(cos(angle),-sin(angle), sin(angle), cos(angle));\n}\n\nmat2 scale2d(vec2 value)\n{\n    return mat2(value.x,0,0,value.y);\n}\n\n// --------------------------------------------------------------------\n\nvec3 distanceField(float value,vec3 colour)\n{\n    return vec3(1.0-value) * colour;\n}\n\nvec3 polarShape(float dist, float angle, float radius, vec3 colour)\n{\n    float value = 1.0 - step(radius,dist);\n    \n    return vec3(value) * colour;\n}\n\nvec3 rect(vec2 uv, vec2 pos, vec3 colour)\n{\n    uv -= pos;\n    \n    float a = atan(uv.x,uv.y) + PI;\n\tfloat r = TWO_PI / float(4);\n    \n    float dist = cos(floor(.5+a/r)*r-a)*length(uv);\n    \n    vec3 color = vec3(1.0 - step(0.25,dist)) * colour;\n    \n    return color;\n}\n\nvec3 polygon(vec2 uv, vec2 pos, int N, vec3 colour)\n{\n    uv -= pos;\n    \n    float a = atan(uv.x,uv.y) + PI;\n\tfloat r = TWO_PI / float(N);\n    \n    float dist = cos(floor(.5+a/r)*r-a)*length(uv);\n    \n    vec3 color = vec3(1.0 - step(0.25,dist)) * colour;\n    \n    return color;\n}\n\nvec3 circle(vec2 uv, vec2 pos, float radius,vec3 color)\n{\n    return fract(smoothstep(distance(uv,pos) * sin(iTime),\n                            distance(uv,pos),radius) * color);\n}\n\n//-----------------------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = 1.5;\n    \n    // PATTERN 1 --------------------------------------------\n    #if PATTERN == 1\n    uv *= 4.0;\n    uv = fract(uv);\n    uv.x *= ratio;\n    \n    vec2 pos = vec2(0.5 * ratio,0.5);\n    float radius = 0.1;\n    int N = 5;\n    vec3 colour = vec3(0.5,.5,0);\n    \n    // creating polarShape\n    uv -= pos;\n    uv *= scale2d(vec2(abs(sin(iTime))));\n    uv += pos;\n    \n    vec3 color = circle(uv,pos,radius,colour);\n    \n    uv -= pos;\n    uv *= rotate2d(sin(iTime /2.0));\n    uv *= scale2d(vec2(sin(iTime)));\n    uv += pos;\n    \n    color += polygon(uv,pos,N,vec3(.6,.3,0));\n    \n    // PATTERN 2 --------------------------------------------\n    #elif PATTERN == 2\n    uv *= 3.;\n    \n    vec2 tileIdx = floor(uv);\n    \n    uv = fract(uv);\n    \n    uv.x *= ratio;\n    \n    vec2 pos = vec2(0.5 * ratio,0.5);\n    vec3 colour = vec3(1,1,abs(sin(iTime)));\n    int N = 2;\n    \n    // T -> R -> T\n    uv -= pos;\n    uv *= rotate2d(iTime);\n    uv += pos;\n    \n    float value = (distance(uv,vec2(0.3)) * distance(uv,vec2(0.9))) *\n        \t\t   abs(sin(iTime / 2.0));\n    \n    vec3 color = distanceField(value,vec3(0.6,0.2,0.2));\n    \n    // T -> S -> T\n    uv -= pos;\n    uv *= scale2d(vec2(sin(iTime)));\n    uv += pos;\n    \n    color += polygon(uv,pos,N, colour);\n    \n    if(tileIdx.x == 0. && tileIdx.y == 0. ||\n       tileIdx.x == 1. && tileIdx.y == 1. ||\n       tileIdx.x == 2. && tileIdx.y == 2. ||\n       tileIdx.x == 0. && tileIdx.y == 2. ||\n       tileIdx.x == 2. && tileIdx.y == 0. ){\n        color = polygon(uv,pos,7,vec3(0,1,0)*sin(iTime));\n        color += distanceField(value,vec3(.5,.5,0));\n    }\n    \n    // PATTERN 3 --------------------------------------------\n    #elif PATTERN == 3\n    uv *= 3.;\n    uv = fract(uv);\n    \n    vec2 pos = vec2(0.5,0.5);\n    vec3 colour = vec3(0.2,0.5,sin(iTime));\n    \n    float value = fract((distance(uv,vec2(0.4)) + \n                         distance(uv,vec2(0.6))) * abs(sin(iTime)));\n    \n    vec3 color = distanceField(value,colour);\n    \n    // T -> R -> T / T -> S -> T\n    uv -= pos;\n    uv *= rotate2d(sin(iTime));\n    uv *= scale2d(vec2(abs(sin(iTime))));\n    uv += pos;\n    \n    float dist = distance(pos,uv) * 5.0;\n    uv -= pos;\n    float angle = atan(uv.y,uv.x);\n    float radius = sin(angle * 25.0) + sin(5.0 * angle);\n    \n    color += polarShape(dist,angle,radius,vec3(.5,.5,.5) * sin(iTime));\n    \n    // PATTERN 4 ---------------------------------------------\n    #elif PATTERN == 4\n    uv *= 3.;\n    uv = fract(uv);\n    \n    vec2 pos = vec2(0.5,0.5);\n    vec3 colour = vec3(0.1 * sin(iTime),0.8,\n                       1.0 * sin(iTime));\n    \n    uv -= pos;\n    uv *= rotate2d(sin(iTime) + sin(iTime));\n    uv += pos;\n    \n    float value = (distance(uv,vec2(0.2,0.3)) * distance(uv,vec2(0.8,0.7))) *\n        \t\t   8.0 * abs(sin(iTime));\n    \n    vec3 color = distanceField(value,colour);\n    \n    uv -= pos;\n    uv *= scale2d(vec2(abs(sin(iTime))));\n    uv += pos;\n    \n    color += rect(uv,pos,vec3(0.2,0.4 * sin(iTime),0));\n    \n    // PATTERN 5 ---------------------------------------------\n    #elif PATTERN == 5\n    uv *= 3.;\n    uv = fract(uv);\n    \n    uv.x *= ratio;\n    vec2 pos = vec2(0.5 * ratio,0.5);\n    vec3 colour = vec3(0,sin(iTime),sin(iTime));\n    int N = 5;\n    \n    uv -= pos;\n    uv *= rotate2d(sin(iTime));\n    uv *= scale2d(vec2(sin(iTime)));\n    uv += pos;\n    \n    float dist = distance(pos,uv) * 5.0;\n    uv -= pos;\n    float angle = atan(uv.y,uv.x);\n    float radius = sin(angle * 30.0) + sin(10.0 * angle);\n    \n    vec3 color = polarShape(dist,angle,radius,vec3(0.6,0.5,sin(iTime)));\n    \n    uv += pos;\n    \n    color += polygon(uv,pos,N,colour);\n    \n    // PATTERN 6 ---------------------------------------------\n    #elif PATTERN == 6\n    uv *= 3.;\n    uv =fract(uv);\n    \n    vec2 pos = vec2(0.3,0.8);\n    vec3 colour = vec3(.5,sin(iTime),0);\n    \n    uv -= pos;\n    uv *= rotate2d(sin(iTime * 2.));\n    uv += pos;\n    \n    float value = (distance(uv,vec2(0.4,0.4)) / distance(uv,vec2(0.8,0.8))) *\n        \t\t   3.0 * abs(sin(iTime));\n    \n    vec3 color = distanceField(value,colour);\n    \n    // PATTERN 7 ---------------------------------------------\n    #elif PATTERN == 7\n\n    vec3 color = vec3(1,1,1);\n    \n    // PATTERN 8 ---------------------------------------------\n    #elif PATTERN == 8\n    \n    vec3 color = vec3(1,1,1);\n    \n    // PATTERN 9 ---------------------------------------------\n    #elif PATTERN == 9\n    \n    vec3 color = vec3(1,1,1);\n    \n    // PATTERN 10 --------------------------------------------\n    #elif PATTERN == 10\n    \n    vec3 color = vec3(1,1,1);\n    \n    #endif\n    \n\tfragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}