{"ver":"0.1","info":{"id":"7sjGWG","date":"1617908868","viewed":69,"name":"Approx. Sub. Scatter - CIS461","username":"onlyname","description":"Cornell box with approximated subsurface scattering.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","subsurface"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int RAY_STEPS = 256;\nconst int AO_SAMPLES = 256;\nconst float AO_DIST = 0.085;\nconst float AO_K = 2.0;\nconst float HALF_PI = 3.14159 * 0.5;\nconst float DEG_TO_RAD = 3.14159 / 180.0;\n// The larger the DISTORTION, the smaller the glow\nconst float DISTORTION = 0.2;\n// The higher GLOW is, the smaller the glow of the subsurface scattering\nconst float GLOW = 3.0;\n// The higher the BSSRDF_SCALE, the brighter the scattered light\nconst float SCALE = 3.0;\n// Boost the shadowed areas in the subsurface glow with this\nconst float AMBIENT = 0.0;\n\n\n#define AA true\n\nstruct Intersection\n{\n    float t;\n    vec3 color;\n    vec3 p;\n    int object;\n};\n\nfloat subsurfaceColor(vec3 lightDir, vec3 normal, vec3 viewVec, float thin) {\n\tvec3 scatterDir = lightDir + normal * DISTORTION;\n\tfloat lightReachingEye = pow(clamp(dot(viewVec, -scatterDir), 0.0, 1.0), GLOW) * SCALE;\n\tfloat attenuation = 1.0;\n    // attentuation = max(0.0, dot(normal, lightDir) + dot(viewVec, -lightDir));\n\tfloat totalLight = attenuation * (lightReachingEye + AMBIENT) * thin;\n\treturn totalLight;\n}\n\nvec3 rotateX(vec3 p, float a) {\n    return vec3(p.x, cos(a) * p.y - sin(a) * p.z, sin(p.y) + cos(p.z));\n}\n\nvec3 rotateY(vec3 p, float a) {\n    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);\n}\n\nvoid raycast(vec2 uv, out vec3 dir, out vec3 eye, out vec3 ref) {\n    eye = vec3(0.0, 4, -12.0);\n    ref = vec3(0.0, 0.0, 0.0);\n    \n    float len = tan(3.14159 * 0.125) * distance(eye, ref);\n    vec3 H = normalize(cross(vec3(0.0, 1.0, 0.0), ref - eye));\n    vec3 V = normalize(cross(H, eye - ref));\n    V *= len;\n    H *= len * iResolution.x / iResolution.y;\n    vec3 p = ref + uv.x * H + uv.y * V;\n    dir = normalize(p - eye);\n}\n\nfloat sphere(vec3 p, float r, vec3 c)\n{\n    return distance(p, c) - r;\n}\n\nfloat torus(vec3 p, vec2 t)\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q) - t.y;\n}\n\nfloat cone(vec3 p, vec2 c)\n{\n    // c must be normalized\n    float q = length(p.xy);\n    return dot(c,vec2(q,p.z));\n}\n\n// Box with side lengths b\nfloat box(vec3 p, vec3 b)\n{\n  return length(max(abs(p) - b, 0.0));\n}\n\nfloat plane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\n\n#define BACK_WALL plane(pos, vec4(0.0, 0.0, -1.0, 5.0))\n#define LEFT_WALL plane(pos, vec4(1.0, 0.0, 0.0, 5.0))\n#define RIGHT_WALL plane(pos, vec4(-1.0, 0.0, 0.0, 5.0))\n#define CEILING plane(pos, vec4(0.0, -1.0, 0.0, 7.5))\n#define FLOOR plane(pos, vec4(0.0, 1.0, 0.0, 2.5))\n#define SPHERE_2 sphere(pos, 1.5, vec3(2.0, -0.5, -2.5))\n#define SPHERE sphere(pos, 3.0, vec3(0.0, 0.0, 1.0))\n\n#define BACK_WALL_NUM 0\n#define LEFT_WALL_NUM 1\n#define RIGHT_WALL_NUM 2\n#define CEILING_NUM 3\n#define FLOOR_NUM 4\n#define SPHERE_2_NUM 5\n#define SPHERE_NUM 6\n\nfloat sceneMap3D(vec3 pos, vec3 lightPos)\n{\n    float t = BACK_WALL;\n    t = min(t, LEFT_WALL);\n    t = min(t, RIGHT_WALL);\n    t = min(t, CEILING);\n    t = min(t, FLOOR);\n    t = min(t, SPHERE_2);\n    t = min(t, SPHERE);\n    return t;\n}\n\nvoid sceneMap3D(vec3 pos, out float t, out int obj, vec3 lightPos)\n{\n    t = BACK_WALL;\n    float t2;\n    obj = BACK_WALL_NUM;\n    if((t2 = LEFT_WALL) < t) {\n        t = t2;\n        obj = LEFT_WALL_NUM;\n    }\n    if((t2 = RIGHT_WALL) < t) {\n        t = t2;\n        obj = RIGHT_WALL_NUM;\n    }\n    if((t2 = CEILING) < t) {\n        t = t2;\n        obj = CEILING_NUM;\n    }\n    if((t2 = FLOOR) < t) {\n        t = t2;\n        obj = FLOOR_NUM;\n    }\n    if((t2 = SPHERE_2) < t) {\n        t = t2;\n        obj = SPHERE_2_NUM;\n    }\n    if((t2 = SPHERE) < t) {\n        t = t2;\n        obj = SPHERE_NUM;\n    }\n}\n\nvoid march(vec3 origin, vec3 dir, out float t, out int hitObj, vec3 lightPos)\n{\n    t = 0.001;\n    for(int i = 0; i < RAY_STEPS; ++i)\n    {\n        vec3 pos = origin + t * dir;\n    \tfloat m;\n        sceneMap3D(pos, m, hitObj, lightPos);\n        if(m < 0.01)\n        {\n            return;\n        }\n        t += m;\n    }\n    t = -1.0;\n    hitObj = -1;\n}\n\nvec3 computeNormal(vec3 pos, vec3 lightPos)\n{\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize( vec3( sceneMap3D(pos + epsilon.yxx, lightPos) - sceneMap3D(pos - epsilon.yxx, lightPos),\n                            sceneMap3D(pos + epsilon.xyx, lightPos) - sceneMap3D(pos - epsilon.xyx, lightPos),\n                            sceneMap3D(pos + epsilon.xxy, lightPos) - sceneMap3D(pos - epsilon.xxy, lightPos)));\n}\n\nfloat fiveTap(vec3 p, vec3 n, float k, vec3 lightPos) {\n    float aoSum = 0.0;\n    for(float i = 0.0; i < 5.0; ++i) {\n        float coeff = 1.0 / pow(2.0, i);\n        aoSum += coeff * (i * AO_DIST - sceneMap3D(p + n * i * AO_DIST, lightPos));\n    }\n    return 1.0 - k * aoSum;\n}\n\nvec3 computeMaterial(int hitObj, vec3 p, vec3 n, vec3 light, vec3 view, float thick) {\n    float lambert = max(0.0, dot(n, light)) + 0.2;\n\n    switch(hitObj) {\n        case BACK_WALL_NUM:\n        case CEILING_NUM:\n        case FLOOR_NUM:\n        return vec3(0.85, 0.81, 0.78) * lambert;\n        break;\n        case LEFT_WALL_NUM:\n        return vec3(0.63, 0.065, 0.05) * lambert;\n        break;\n        case RIGHT_WALL_NUM:\n        return vec3(0.14, 0.45, 0.091) * lambert;\n        break;\n        case SPHERE_2_NUM:\n        return vec3(0.3, 0.75, 0.5) * lambert + vec3(0.3, 0.8, 0.8) *\n                subsurfaceColor(light, n, view, thick);\n        break;\n        case SPHERE_NUM:\n        return vec3(1.0, 0.88, 0.7) * lambert + vec3(1.0, 0.67, 0.67) *\n                subsurfaceColor(light, n, view, thick);\n        break;\n        case -1:\n        // Background\n        return vec3(0.0);\n        break;\n    }\n    return vec3(1.0);\n}\n\nIntersection sdf3D(vec3 dir, vec3 eye, vec3 lightPos)\n{\n    float t;\n    int hitObj;\n    march(eye, dir, t, hitObj, lightPos);\n\n    vec3 isect = eye + t * dir;\n    vec3 nor = computeNormal(isect, lightPos);\n    vec3 lightDir = normalize(lightPos - isect);\n    \n    float thick = fiveTap(isect, -nor, AO_K, lightPos);\n    \n    vec3 surfaceColor = computeMaterial(hitObj, isect, nor, lightDir, normalize(eye - isect), thick);\n    \n    return Intersection(t, surfaceColor, isect, hitObj);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float di = 2.0 * (sin(iTime));\n\tvec3 lightPos = vec3(di, -1.0, 4.0);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // [-1, 1]\n    vec2 uv2 = 2.0 * uv - vec2(1.0);\n    \n    Intersection aaIsects[4];\n    vec3 dir, eye, ref;\n    int idx = 0;\n    for(float i = 0.0; i < 1.0; i += 0.5) {\n        for(float j = 0.0; j < 1.0; j += 0.5) {\n            raycast(uv2 + vec2(i, j) / iResolution.xy, dir, eye, ref);\n            aaIsects[idx++] = sdf3D(dir, eye, lightPos);\n        }\n    }\n    vec3 avgColor = vec3(0.0);\n    for(int i = 0; i < 4; ++i) {\n        avgColor += aaIsects[i].color;\n    }\n    avgColor *= 0.25;\n    fragColor = vec4(avgColor * step(0.0, aaIsects[0].t), 1.0);\n}","name":"Image","description":"","type":"image"}]}