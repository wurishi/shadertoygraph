{"ver":"0.1","info":{"id":"ttKyWh","date":"1610990134","viewed":78,"name":"Assignment Shader","username":"AdamWant","description":"rainbow","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["rainbow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat Band(float t, float start, float end, float blur)\n{\n    float step1 = smoothstep(start-blur, start+blur,t ); //creates top edge\n    float step2 = smoothstep(end+blur, end-blur, t); // creates bottom\n    \n    return step1*step2;  // multiply both edges together to make a band\n}\n\nfloat Rect(vec2 uv, float left, float right, float bottom, float top, float blur)\n{\n    float band1 = Band(uv.x, left, right, blur);\n    float band2 = Band(uv.y, bottom, top, blur);\n    \n    return band1*band2; //multiply both bands together to create the rectangle\n\n}\n\nfloat remap01(float a, float b, float t) //  if t=a then return 0, if t=b then you (b-a) / (b-a) so 1 - allows us to normalize t based on a and b\n{\n    return (t-a) / (b-a);\n}\nfloat remap(float a, float b, float c, float d, float t)\n{\n    return remap01(a, b, t) *  (d-c) + c;\n}\n// defines where the blur is based on the x coordinate\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord.xy /iResolution.xy;// sets the uv vec2 variable to the the x & y coordinates across the screen\n    float t = iTime;\n\n    uv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 col = vec3(0.);\n    \n    float mask = 0.; // creates mask\n    \n    float x = uv.x; \n    float m = -sin(4.*t+x*8.)*.1;\n    float y = uv.y+m; // changes the y coordinate over sin(time) to create a wavy pattern\n    \n    float blur = remap(-1.1, .5, .04, .01, x); // defines where the blur is based on the x coordinate and how strong it is\n    mask = Rect(vec2(x,y), -1.,1., -.1, .1,blur); // creates a mask/ edge of black based off the x * y coordinates above, \n    \n    col =    1.0*cos(iTime+uv.xyx+vec3(0,2,4))* mask; // sets the alternating color of the none masked area\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}