{"ver":"0.1","info":{"id":"3sBSWt","date":"1556463848","viewed":218,"name":"Dotted Polyp","username":"OliverSchaff","description":"Branch of https://www.shadertoy.com/view/tdSXWt. I liked the dots on the arms... so I made it public, too.\nUse mouse to rotate.","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","transparency","volumetric","glass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Renderingcode from a shader by Shane\n// https://www.shadertoy.com/view/ll2SRy\n\n#define PI 3.14159265359\n#define grad_step 0.01\n#define time 2.0*iTime\n\n#define ZERO (min(iFrame,0))\n\n\n// Spectrum colour palette\n// IQ https://www.shadertoy.com/view/ll2GD3\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 spectrum(float n) {\n    return pal( n, vec3(0.5,0.5,0.5),vec3(0.0,0.5,0.5),vec3(.0,1.0,.0),vec3(0.62,0.33,0.37) );\n}\n\n\nvec2 opUC_s( vec2 a, vec4 matea,vec2 b, vec4 mateb, float k , out vec4 mate){\n    float h = clamp( 0.5+0.5*(b.x-a.x)/k, 0.0, 1.0 );\n    float d = mix( b.x, a.x, h ) - k*h*(1.0-h);\n    \n    mate = mix( mateb, matea, h ) - k*h*(1.0-h);\n    \n    if (a.x<b.x) {\n        return vec2(d,a.y);\n    }\n    return vec2(d,b.y);\n}\n\n\n// iq's distance functions\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat opOnion( in float sdf, in float thickness )\n{\n    return abs(sdf)-thickness;\n}\n\nvec3 carToPol(vec3 p) {\n    float r = length(p);\n    float the = acos(p.z/r);\n    float phi = atan(p.y,p.x);\n    return vec3(r,the,phi);\n}\n\nvec3 carToCyl(vec3 p) {\n    float r = length(p.xy);\n    float the = atan(p.y/p.x);\n    return vec3(r,the,p.z);\n}\n\n\n// 2D rotation : pitch, yaw\nmat3 rotationXY( vec2 angle ) {\n\tvec2 c = cos( angle );\n\tvec2 s = sin( angle );\n\t\n\treturn mat3(\n\t\tc.y      ,  0.0, -s.y,\n\t\ts.y * s.x,  c.x,  c.y * s.x,\n\t\ts.y * c.x, -s.x,  c.y * c.x\n\t);\n}\n\nfloat pModPolar(inout vec2 p, float repetitions) { \n\tfloat angle = 2.*PI/repetitions; \n\tfloat a = atan(p.y, p.x) + angle/2.; \n\tfloat r = length(p); \n\tfloat c = floor(a/angle); \n\ta = mod(a,angle) - angle/2.; \n\tp = vec2(cos(a), sin(a))*r; \n    // For an odd number of repetitions, fix cell index of the cell in -x direction // (cell index would be e.g. -5 and 5 in the two halves of the cell): \n\tif (abs(c) >= (repetitions/2.)) c = abs(c);\n    return c;\n}\n\n\nfloat sdVerticalCapsule( vec3 p, float h, float r )\n{\n    p.z -= clamp( p.z, 0.0, h );\n    return length( p ) - r;\n}\n\nfloat blob(vec2 p,float r){\n    float f = smoothstep(0.2*r,r,length(p));\n    return f;\n}\n\n// https://www.shadertoy.com/view/4djSRW\n// Thanks to Dave_Hoskins\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nvec2 distortedCapsule(vec3 p, inout vec4 mate, float index){\n    float dtime = 1.8*p.z-time-1.; // mix time with space to create wave\n    float dt = sin((dtime)-0.8*sin(dtime)); // distorted time, asymmetric sine wave\n    p = rotationXY(vec2(0.0,0.15*p.z*dt))*p;\n    \n    // stem of tentacle\n    vec4 mate0 = mate;\n    \n    vec3 pcyl = carToCyl(p-vec3(0.9,0,0.));\n    vec2 ps = vec2(10.0*0.5*pcyl.y/PI,10.0*pcyl.z);\n   \tvec2 fps = fract(ps);\n    vec2 ips = floor(ps);\n    vec2 ran = hash22(ips);\n    //vec4 ran = texelFetch( iChannel0, (ivec2(ips)+70+int(index)), 0 );\n    float r = 0.1+0.3*ran.x;\n    float b = blob(fps-0.2-0.4*ran.xy, r);\n    mate0 = mix(mate0, vec4(1,1,0,0.8), (1.0-b)*smoothstep(0.0,0.5,pcyl.z)  );\n   \tvec2 d0 = vec2(sdVerticalCapsule(p-vec3(0.9,0,0.), 2.0,0.05*(4.0-1.5*p.z)), index);\n    \n    // bulb at end of tentacle\n    vec4 mate1 = vec4(mate.rgb, 0.6);\n    vec2 d1 = vec2(sdSphere(p-vec3(0.9,0,2.),0.2),11.0);\n    d0 = opUC_s(d0,mate0,d1,mate1,0.1,mate);\n\treturn d0;\n}\n\nvec2 map(in vec3 p, out vec4 mate, in bool doColor){\n    \n    vec3 pol = carToPol(p-vec3(0,0,-0.8));\n    mate = vec4(spectrum(0.45*pol.x),0.4);\n\n\n    \n    float dt = sin((time+2.5)-0.8*sin(time+2.5)); // distorted time, asymmetric sine wave\n    p.z += -0.2*dt;\n    \n    // center sphere\n    vec4 mate0 = mate;\n    vec2 d0 = vec2(opOnion(sdSphere(p-vec3(0,0,-0.7),0.5),0.001), 1.0);\n\n    // in center sphere\n    vec4 mate2 = vec4(1,1,1,0.8);\n    vec2 d2 = vec2(sdSphere(p-vec3(0,0,-0.7),0.25), 1.0);\n    \n    d0 = opUC_s(d0, mate0, d2, mate2, 0.3, mate0);\n    \n    // tentacles\n    float tentacleIndex = pModPolar(p.xy, 9.0);\n    p = rotationXY(vec2(0.0,-0.8))*p;\n    vec4 mate1 = mate;\n    vec2 d1 = distortedCapsule(p, mate1, tentacleIndex+6.0);// index from 2-10\n    \n    d0 = opUC_s(d0, mate0, d1, mate1, 0.5, mate);\n    \n    float a = 0.;\n    if (d0.y < 10.5) {\n        a = d0.y*0.1;\n    } else {\n        a = 1.0;\n    }\n\n    return d0;\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos, in float ep )\n{\n    vec4 kk;\n#if 1\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    return normalize( e.xyy*map( pos + e.xyy*ep, kk, false ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*ep, kk, false ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*ep, kk, false ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*ep, kk, false ).x );\n#else\n    // prevent the compiler from inlining map() 4 times\n    vec3 n = vec3(0.0);\n    for( int i=ZERO; i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*map(pos+e*ep, kk, false).x;\n    }\n    return normalize(n);\n#endif    \n    \n}\n\n\nvec3 fresnel( vec3 F0, vec3 h, vec3 l ) {\n\treturn F0 + ( 1.0 - F0 ) * pow( clamp( 1.0 - dot( h, l ), 0.0, 1.0 ), 5.0 );\n}\n\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvec3 phongColor(in vec3 p, in vec3 rd){\n    \n    vec3 Ks = vec3(1.0); // specular reflected intensity\n    vec3 Kd = vec3(0.0); // diffuse reflected intensity\n    float shininess = 79.0;\n    \n   \tvec3 n = calcNormal( p, 0.01 );\n    vec3 ref = reflect( rd, n );\n    vec3 final = vec3(0);\n    \n   \t// light 0\n\t{\n\t\tvec3 light_pos   = vec3( 20.0, 20.0, 20.0 );\n\t\tvec3 light_color = vec3( 1.0, 1.0, 1.0 );\n\t\n\t\tvec3 vl = normalize( light_pos - p );\n\t\n\t\tvec3 diffuse  = Kd * vec3( max( 0.0, dot( vl, n ) ) );\n\t\tvec3 specular = vec3( max( 0.0, dot( vl, ref ) ) );\n\t\t\n        vec3 F = fresnel( Ks, normalize( vl - rd ), vl );\n\t\tspecular = pow( specular, vec3( shininess ) );\n\t\t\n\t\tfinal += light_color * mix( diffuse, specular, F ); \n\t}\n\t\n\t// light 1\n\t{\n\t\tvec3 light_pos   = vec3( -20.0, -20.0, -30.0 );\n\t\tvec3 light_color = vec3( 1.0, 1.0, 1.0 );\n\t\n\t\tvec3 vl = normalize( light_pos - p );\n\t\n\t\tvec3 diffuse  = Kd * vec3( max( 0.0, dot( vl, n ) ) );\n\t\tvec3 specular = vec3( max( 0.0, dot( vl, ref ) ) );\n        \n        vec3 F = fresnel( Ks, normalize( vl - rd ), vl );\n\t\tspecular = pow( specular, vec3( shininess ) );\n\t\t\n\t\tfinal += light_color * mix( diffuse, specular, F );\n\t}\n\n    //final += texture( iChannel0, ref ).rgb * fresnel( Ks, n, -dir );\n    \n    return final;\n}\n\n// The MINIMIZED version of https://www.shadertoy.com/view/Xl2XWt\nconst float MAX_TRACE_DISTANCE = 8.0;           // max trace distance\nconst float INTERSECTION_PRECISION = 0.009;        // precision of the intersection\nconst int NUM_OF_TRACE_STEPS = 200;\nconst float EPS_NORMAL = 0.01;\nconst float SCALE_DIST = 0.3;\n\n\nvec2 calcIntersection( in vec3 ro, in vec3 rd ){\n    float h =  INTERSECTION_PRECISION*2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    float id = -1.;\n    vec4 kk;\n    \n    for( int i=0; i< NUM_OF_TRACE_STEPS ; i++ ){\n        if( h < INTERSECTION_PRECISION || t > MAX_TRACE_DISTANCE ) break;\n\t   \tvec2 m = map( ro+rd*t , kk, false);\n        h = m.x;\n        t += h*SCALE_DIST;\n        id = m.y;\n    }\n    if( t < MAX_TRACE_DISTANCE ) res = t;\n    if( t > MAX_TRACE_DISTANCE ) id =-1.0;\n    return vec2( res , id );\n}\n\nvec3 render( vec2 res , vec3 ro , vec3 rd ){\n  vec3 c = vec3(0);\n  if( res.y > -.5 ){\n      vec3 pos = ro + rd * res.x;\n      c = phongColor(pos, rd);\n  }\n  return c;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, vec2 fragCoord ) {\n    \n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec3 ro = vec3( 5.0*cos(0.2*iTime-10.0), 1.0, 5.0*sin(0.2*iTime-10.0));\n    vec3 ta = vec3( 0. , 0. , 0. );\n    \n    float aa = 1.0/min(iResolution.y,iResolution.x);\n    \n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0);  // 0.0 is the camera roll\n    \n\t// create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy, 1.9+0.8*sin(0.15*iTime+12.0)) ); // 3.0 is the lens length\n    \n    // rotate camera with mouse\n\tmat3 rot = rotationXY(iMouse.xy * vec2( 0.01, -0.01 ) );\n\trd = rot * rd;\n\tro = rot * ro;\n    \n    vec3 col = vec3(0);\n    vec3 sp;\n    vec4 mate;\n    \n    // volume rymarching\n\t// Ray distance, bail out layer number, surface distance and normalized accumulated distance.\n\tfloat t=0., layers=0., d, aD;\n    \n    // Surface distance threshold. Smaller numbers give a sharper object. Antialiased with aa\n    float thD = 0.2*sqrt(aa); \n    \n    // Only a few iterations seemed to be enough. Obviously, more looks better, but is slower.\n    for(int i=0; i<150; i++)\t{\n        if(layers>200. || col.g>1.0 || t>8.) break;\n        sp = ro + rd*t;\n        d = map(sp, mate, true).x; // Distance to nearest point in the cube field.\n        // Normalized distance from the surface threshold value to our current isosurface value.\n        aD = (thD-abs(d))/thD;\n        // If we're within the surface threshold, accumulate some color.\n        if(aD>0.) { \n            vec3 tc = mate.rgb*pow(mate.a,2.0);\n            col += 25.0*tc*(aD*aD*(3. - 2.*aD)/(1. + t*t*1.85));\n            layers += 20.0*pow(mate.a+0.2,2.0);\n        }\n        t += max(abs(d)*0.5, thD*0.5); \n\t}\n \n    // standard raymarching code to color the surface\n    vec2 res = calcIntersection( ro , rd  );\n    vec3 surfaceColor = render(res, ro, rd);\n    col += surfaceColor;\n\n    col = pow(col,vec3(0.9,1.,2.));\n\tfragColor = vec4(clamp(col, 0., 1.), 1);\n }\n","name":"Image","description":"","type":"image"}]}