{"ver":"0.1","info":{"id":"wlffD8","date":"1596573558","viewed":325,"name":"Perpetually moving circles","username":"ChocolatePinecone","description":"Some moving circles to practice shadering","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["circles","loading","spinner","perpetual"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PI 3.1415926538\n\nfloat drawCircle(vec2 pos, float radius, float edgeFade, vec2 fragCoord) {\n    // Get distance from pixel to circle radius\n    float dis = distance(fragCoord, pos.xy * iResolution.xy);\n    \n    // Return 1.0 if inside circle\n    return 1.0 - smoothstep(edgeFade * radius, radius, dis);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord){\n\tvec2 st = fragCoord.xy/iResolution.xy;\n    float pct = 0.0;\n    \n    // Set circle properties\n    float radius = 40.0;\n    float edgeFade = 0.9;\n    vec2 bottomLeft = vec2(0.25);\n    vec2 topRight = vec2(0.75);\n    \n    // Determine movement\n    vec2 maxMv = topRight.xy - bottomLeft.xy;\n    float offset = smoothstep(0.0, 1.0, mod(0.5 * iTime, 1.0));\n    vec2 mv = offset * maxMv;\n\n    // Draw circles\n    pct = drawCircle(vec2(bottomLeft.x, bottomLeft.y + mv.y), radius, edgeFade, fragCoord);\n    pct += drawCircle(vec2(bottomLeft.x + mv.x, topRight.y), radius, edgeFade, fragCoord);\n    pct += drawCircle(vec2(topRight.x, topRight.y - mv.y), radius, edgeFade, fragCoord);\n    pct += drawCircle(vec2(topRight.x - mv.x, bottomLeft.y), radius, edgeFade, fragCoord);\n    \n    // Set color\n    float lerp = sin(offset * PI);\n    vec3 red = vec3(0.5, 0.0, 0.0);\n    vec3 blue = vec3(0.494, 0.976, 1.0);\n\n    vec3 color = mix(blue, red, lerp) * pct;\n\n\tfragColor = vec4( color, 1.0 );\n}","name":"Image","description":"","type":"image"}]}