{"ver":"0.1","info":{"id":"ms2cW1","date":"1687933563","viewed":68,"name":"XY plasma","username":"johnhearn","description":"https://www.wikiwand.com/en/XY_model\nhttps://www.ibiblio.org/e-notes/Perc/xy.htm","likes":3,"published":1,"flags":48,"usePreview":0,"tags":["physics","xy","ca","ising"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.1415926\n\nvec3 hsl2rgb( in vec3 c ){\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0,1.0);\n    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\n\nvec4 color(float r) {\n    //r += (pi/2.); // Rotate (red on top, green on right, blue on left)\n    float hue = ((r /pi) / 2.0); // From radians (0 - 2_PI) to hue (0 - 1)\n    vec3 rgb = hsl2rgb( vec3(hue, 1., .5));\n    return vec4(rgb, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float val = texture(iChannel0, uv).x;\n    fragColor = color(val);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define pi 3.1415926\n\nfloat rand(float co) { return fract(sin(co*(91.3458)) * 47453.5453); }\nfloat rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }\nint randn(float rnd, int n) { return int(round(float(n)*rnd)); }\n\nfloat val2state(in ivec2 xy) {\n    return texelFetch(iChannel0, xy, 0).x;\n}\n\nfloat state2val(in float state) {\n    return state;\n}\n\nbool reset() {\n    return texture(iChannel3, vec2(32.5/256.0, 0.5) ).x > 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    ivec2 site = ivec2(fragCoord);\n    ivec2 size = ivec2(iResolution.xy);\n\n    vec2 xy = fragCoord.xy / iResolution.xy;\n    float J = 1.;\n    float h = 0.00;//0.0 + 0.2*xy.x;\n    float T = 0.3;//0.0 + 0.2*xy.y;\n        \n    ivec2 n = ivec2(0, 1);\n    ivec2 e = ivec2(1, 0);\n    ivec2 s = ivec2(0, -1);\n    ivec2 w = ivec2(-1, 0);\n    \n    float state_n =  val2state(site+n);\n    float state_e =  val2state(site+e);\n    float state_s =  val2state(site+s);\n    float state_w =  val2state(site+w);\n\n    float time = iTime+iDate.z;\n    float rnd = rand(xy*(time+1.));\n\n    float state = val2state(site);\n    float Hc = -h*cos(state);\n    Hc -= J * cos(state_n - state);\n    Hc -= J * cos(state_s - state);\n    Hc -= J * cos(state_e - state);\n    Hc -= J * cos(state_w - state);\n\n    float test_state = state + rnd*2.*pi;\n    if (test_state > pi) test_state -= 2.*pi;\n    \n    float Ht = -h*cos(test_state);\n    Ht -= J * cos(state_n - test_state);\n    Ht -= J * cos(state_s - test_state);\n    Ht -= J * cos(state_e - test_state);\n    Ht -= J * cos(state_w - test_state);\n\n    float DE = Ht - Hc;\n    \n    if (DE < 0. || exp(-DE/T) > rnd) state = test_state;\n    \n    float new_state = (iFrame<2 || reset()) ? state2val(rnd*2.*pi) : state2val(state);\n    \n    fragColor = vec4(new_state);\n}\n\n","name":"Buffer A","description":"","type":"buffer"}]}