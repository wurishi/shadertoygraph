{"ver":"0.1","info":{"id":"ftcfR8","date":"1662588866","viewed":123,"name":"Smooth Transition Function","username":"jt","description":"Implementation of #SoME2 \"Smooth Transition Function in One Dimension\" https://www.youtube.com/watch?v=vD5g8aVscUI\nContrary to smoothstep this function is \"infinitely smooth\", i.e. ALL derivatives at 0 resp. 1 are 0.\nTODO: numerical stability near ends","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["transition","function","smooth"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/ftcfR8\n// Shadertoy implementation of (youtube) EpsilonDelta's \n// #SoME2 \"Smooth Transition Function in One Dimension\"\n// https://www.youtube.com/watch?v=vD5g8aVscUI\n\n// This \"flat function\" is \"infinitely smooth\", i.e. ALL derivatives at 0 resp. 1 are 0.\n\n// TODO: numerical stability near ends\n\n#define draw(q) O *= vec4(smoothstep(.0,.01,abs(I.y - q)))\n\nfloat psi(float t) // Required property: all derivatives of psi at 0 must be 0 (in the limit t -> 0^+)\n{\n    return exp(-1.0 / t);\n}\n\nfloat phi(float t) // original function as described in the video\n{\n    return t <= 0.0 ? 0.0 : t >= 1.0 ? 1.0 : psi(t) / (psi(t) + psi(1.0 - t));\n}\n\nfloat phi_simplified(float t) // optimized by Fabrice\n{\n    return t <= 0. ? 0. : t >= 1. ? 1. : 1. / (1. + exp( 1./t - 1. / (1. - t)));\n}\n\n// interesting variant: https://www.wolframalpha.com/input?key=&i=%28%28+2+%2F+%281+%2B+exp%281%2Ft+-+1%2F%281+-+t%29%29%29-1%29*sgn%28t%29*sgn%281-t%29%29*0.5%2B0.5\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n\tI = 1. * I / iResolution.xy - 0.;\n    O = vec4(1);\n\tdraw(phi(I.x));\n    //draw(phi_simplified(I.x));\n}\n","name":"Image","description":"","type":"image"}]}