{"ver":"0.1","info":{"id":"ss2GW1","date":"1618693881","viewed":83,"name":"Dodecahedron_v1","username":"Guest_2151","description":"University task","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["water","ocean","dodecahedron"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst vec3 CAMERA_POS = vec3(0, 0, -8);\nvec3 LIGHT1_POS = vec3(-3, 1.5, 1);\nconst float LIGHT1_RADIUS = 0.5;\nconst vec3 LIGHT1_COLOR = vec3(1, 1, 1);\n\nvec3 LIGHT2_POS = vec3(2, 0.5, 2);\nconst float LIGHT2_RADIUS = 0.25;\nconst vec3 LIGHT2_COLOR = vec3(0.98, 0.71, 0.98);\n\nvec3 LIGHT3_POS = vec3(2, 0.9, 0);\nconst float LIGHT3_RADIUS = 0.25;\nconst vec3 LIGHT3_COLOR = vec3(0.78, 0.51, 0.78);\n\nconst float PLANE_HEIGHT = -1.4;\nconst float CYL_RADIUS = 1.0;\nconst float CYL_SLOPE = 0.2;\nconst float CYL_HEIGHT = 0.25;\nconst vec3 CYL_BASE_POS = vec3(0, PLANE_HEIGHT + 0.001, 0);\n\nconst vec3 DODEC_COLOR = vec3(0, 0.5, 0.5);\nconst float DODEC_BASE = CYL_HEIGHT + CYL_BASE_POS.y + 0.001;\nconst vec3 DODEC_CENTRE = vec3(0.0, 1.11 + DODEC_BASE, 0.0);\nvec3 randDir;\n\nvec3 SHP_POS = vec3(0,0,0);\n\nvec3 PENT_VERT[20] = vec3[20]\n(vec3(-0.69, 0.0 + DODEC_BASE, 0.50),\nvec3(-0.69, 0.0 + DODEC_BASE, -0.50),\nvec3(0.26, 0.0 + DODEC_BASE, -0.81),\nvec3(0.85, 0.0 + DODEC_BASE, 0.0),\nvec3(0.26, 0.0 + DODEC_BASE, 0.81),\nvec3(-1.12, 0.85 + DODEC_BASE, -0.81),\nvec3(0.42, 0.85 + DODEC_BASE, -1.31),\nvec3(1.37, 0.85 + DODEC_BASE, 0.0),\nvec3(0.42, 0.85 + DODEC_BASE, 1.31),\nvec3(-1.12, 0.85 + DODEC_BASE, 0.81),\nvec3(-1.38, 1.38 + DODEC_BASE, 0.0),\nvec3(-0.43, 1.38 + DODEC_BASE, -1.31),\nvec3(1.11, 1.38 + DODEC_BASE, -0.81),\nvec3(1.11, 1.38 + DODEC_BASE, 0.81),\nvec3(-0.43, 1.38 + DODEC_BASE, 1.31),\nvec3(-0.85, 2.23 + DODEC_BASE, 0.0),\nvec3(-0.26, 2.23 + DODEC_BASE, -0.81),\nvec3(0.69, 2.23 + DODEC_BASE, -0.5),\nvec3(0.69, 2.23 + DODEC_BASE, 0.5),\nvec3(-0.26, 2.23 + DODEC_BASE, 0.81));\n\nint PENT_FACE[12 * 5] = int[12 * 5]\n(0, 1, 2, 3, 4, \n0, 1, 5, 10, 9, \n1, 2, 6, 11, 5, \n2, 3, 7, 12, 6, \n3, 4, 8, 13, 7, \n4, 0, 9, 14, 8, \n19, 15, 10, 9, 14, \n15, 16, 11, 5, 10,\n16, 17, 12, 6, 11,\n17, 18, 13, 7, 12,\n18, 19, 14, 8, 13,\n15, 16, 17, 18, 19);\n\nfloat triple(vec3 v1, vec3 v2, vec3 v3) {\n    return dot(v1, cross(v2, v3));\n}\n\nfloat tracePentagon(vec3 pos, vec3 dir, vec3 vert[5], vec3 centre, out vec3 norm) {\n    vec3 d1 = vert[1] - vert[0];\n    vec3 d2 = vert[2] - vert[0];\n    norm = normalize(cross(d1, d2));\n    vec3 d0 = pos - vert[0];\n    float a = triple(dir, d1, d2);\n    if (a == 0.0) return INF;\n    float t = - triple(d0, d1, d2) / a;\n    if (t < 0.0) return INF;\n    \n    vec3 worldPos = pos + t * dir;\n    \n    for (int i = 0; i < 5; i++) {\n        vec3 de = vert[(i + 1) % 5] - vert[i];\n        vec3 dp = worldPos - vert[i];\n        vec3 norm1 = normalize(cross(de, dp));\n        if (dot(norm1 - norm, norm1 - norm) > 0.5) return INF;\n    }\n    \n    if (dot(vert[0] + 0.01 * norm - centre, vert[0] + 0.01 * norm - centre) < dot(vert[0] - centre, vert[0] - centre)) {\n        norm = -norm;\n    }\n    \n    return t;\n}\n\nfloat traceDodecahedron(vec3 pos, vec3 dir, out vec3 norm) {\n    vec3 cur_norm;\n    float t = INF, cur_t;\n    for (int i = 0; i < 12; i++) {\n        vec3 cur_face[5];\n        for (int j = 0; j < 5; j++) {\n            cur_face[j] = PENT_VERT[PENT_FACE[i * 5 + j]];\n        }\n        cur_t = tracePentagon(pos, dir, cur_face, DODEC_CENTRE, cur_norm);\n        if (cur_t < t) {\n            t = cur_t;\n            norm = cur_norm;\n        }\n    }\n    \n    return t;\n}  \n  \nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 0.5) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 1.5;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 sphNorm;\n    float sphT = traceSphere(pos, dir, 1.0, sphNorm);\n    if (sphT < dist)\n        return true;\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 20.0f / distSq1;\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 10.0f / distSq2;\n    vec3 toLight3 = LIGHT3_POS - pos;\n    float distSq3 = dot(toLight3, toLight3);\n    float att3 = isOccluded(pos, LIGHT3_POS + randDir * LIGHT3_RADIUS) ? 0.0 : 10.0f / distSq3;\n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + max(0.0, dot(normal, normalize(toLight3))) * att3 * LIGHT3_COLOR\n        + texture(iChannel1, normal).rgb * 0.1\n    );\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5)) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    const float GLASS_N = 1.5;\n    const float AIR_N = 1.0;\n    const float WATER_N = 1.33;\n    \n    float n1 = AIR_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    const float DIAMOND_N = 2.5;\n    float DIAMOND_R = pow2(DIAMOND_N - GLASS_N) / pow2(DIAMOND_N + GLASS_N);\n    \n    float n2 = DIAMOND_N;\n    float r = pow2(n1 - n2) / pow2(n1 + n2);\n    \n    \n    vec3 colorMult = vec3(1, 1, 1);\n \n    SHP_POS += randVals*0.2;\n    LIGHT1_POS += randVals*0.1;\n    LIGHT2_POS += randVals*0.1;\n    LIGHT3_POS += randVals*0.1;\n    for (int j = 0; j < 10; ++j) {\n     float sphTM[10];\n    \n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        \n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb;\n            normal = planeNorm;\n        }\n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n        vec3 l3Norm;\n        float light3T = traceSphere(curPos - LIGHT3_POS, curDir, LIGHT3_RADIUS, l3Norm);\n        if (light3T < t) {\n            t = light3T;\n            materialType = EMISSION;\n            color = LIGHT3_COLOR;\n            normal = l3Norm;\n        }\n        vec3 sphNorm;\n        \n        vec3 pentNorm;\n        float pentT = traceDodecahedron(curPos, curDir, pentNorm);\n        if (pentT < t) {\n            t = pentT;\n            normal = pentNorm;\n            if (randVals.x < r) {\n                materialType = REFLECTION;\n            } else {\n                materialType = REFRACTION;\n            }\n            color = DODEC_COLOR;\n        }\n        \n       \n       float sph2T = traceSphere(curPos - SHP_POS, curDir, 0.5, sphNorm);\n       if (sph2T < t) {\n            t = sph2T;\n            normal = sphNorm;\n            color = texture(iChannel2,uv).rgb *vec3(0.2,0.9,0.9);\n            materialType = EMISSION;\n            nEnter = WATER_N;\n        }\n        \n            \n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel3, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n\n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) {\n                fragColor.rgb = color * colorMult;\n                break;\n            } \n            else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            } else if (materialType == REFLECTION) {\n                colorMult = color;\n                fragColor.rgb += colorMult;\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            } else if (materialType == REFRACTION) {\n          \n                curDir = refraction(curDir, normal, n1, n2);\n                curPos = worldPos + curDir * 1e-5;\n            } \n          } else {\n            n1 = nEnter;\n            fragColor.rgb =  texture(iChannel1, curDir).rgb * colorMult;}\n    \n    }\n}\n\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}\n","name":"Buffer B","description":"","type":"buffer"}]}