{"ver":"0.1","info":{"id":"3sjSDw","date":"1554057123","viewed":1069,"name":"Jellyshell","username":"OliverSchaff","description":"Another go on transparency and self-glow. Based on Shane's https://www.shadertoy.com/view/ll2SRy\nChange angle with mouse.","likes":24,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","transparency"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Based on a shader by Shane\n// https://www.shadertoy.com/view/ll2SRy\n// almost all the code comes from his shader. It's a very good resource!\n\n#define PI 3.14159265359\n\n// Spectrum colour palette\n// IQ https://www.shadertoy.com/view/ll2GD3\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 spectrum(float n) {\n    return pal( n, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.33,0.67) );\n    //return pal( n, vec3(0.5,0.5,0.5),vec3(0.5,0.0,0.5),vec3(1.0,1.0,1.0),vec3(0.2,0.33,0.67) );\n\n}\n\n// iq's distance functions\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat opOnion( in float sdf, in float thickness )\n{\n    return abs(sdf)-thickness;\n}\n\nfloat sdUnion_s( float a, float b, float k ) {\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec3 carToPol(vec3 p) {\n    float r = length(p);\n    float the = acos(p.z/r);\n    float phi = atan(p.y,p.x);\n    return vec3(r,the,phi);\n}\n\n// 2D rotation : pitch, yaw\nmat3 rotationXY( vec2 angle ) {\n\tvec2 c = cos( angle );\n\tvec2 s = sin( angle );\n\t\n\treturn mat3(\n\t\tc.y      ,  0.0, -s.y,\n\t\ts.y * s.x,  c.x,  c.y * s.x,\n\t\ts.y * c.x, -s.x,  c.y * c.x\n\t);\n}\n\nfloat map( vec3 pos ){\n    \n    vec3 p2 = vec3(1.7*sin(-0.5*iTime),0.9*cos(-0.5*iTime),0.3*cos(-0.5*iTime));\n    float d2 = sdSphere( pos-p2, 0.2);\n    vec3 p3 = vec3(1.9*sin(-0.5*iTime+2.5),0.3*cos(-0.5*iTime-0.5),0.9*cos(-0.9*0.5*iTime));\n    float d3 = sdSphere( pos-p3, 0.2);\n    vec3 p4 = vec3(1.9*sin(-0.5*iTime+1.5),-0.3*cos(-0.6*iTime-4.5),0.3*cos(-0.4*iTime));\n    float d4 = sdSphere( pos-p4, 0.2);\n    float d00 = sdUnion_s(d2,d3,0.2);\n    \n    float d0 = sdUnion_s(d00,d4,0.2);\n\n    vec3 pol = carToPol(pos);\n    \n    float d1 = sdSphere( pos, 1.0 );\n    float wave = 0.25*sin(5.*(pol.y))*sin(2.0*pol.z);\n    d1 = opOnion(d1+wave, 0.001);\n    \n    return sdUnion_s(d1,d0,0.3);\n    \n}\n\nvec3 selfColor(vec3 pos) {\n    vec3 pol = carToPol(pos);\n    return spectrum(1.0*pol.z/PI/2.0+0.5*pol.y/PI);\n}\n\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid mainImage( out vec4 fragColor, vec2 fragCoord ) {\n    \n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec3 ro = vec3( 5.0*cos(0.2*iTime+20.5), 0.0, 5.0*sin(0.2*iTime+20.5));\n    vec3 ta = vec3( 0. , 0. , 0. );\n    \n    float aa = 1.0/min(iResolution.y,iResolution.x);\n    \n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0);  // 0.0 is the camera roll\n    \n\t// create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy, 3.0) ); // 3.0 is the lens length\n    \n    // rotate camera with mouse\n\tmat3 rot = rotationXY( ( iMouse.xy - iResolution.xy * 0.5 ).yx * vec2( 0.01, -0.01 ) );\n\trd = rot * rd;\n\tro = rot * ro;\n    vec3 col = vec3(1), sp;\n    \n\t// Ray distance, bail out layer number, surface distance and normalized accumulated distance.\n\tfloat t=0., layers=0., d, aD;\n    \n    // Surface distance threshold. Smaller numbers give a sharper object. Antialiased with aa\n    float thD = .3*sqrt(aa); \n    \n    // Only a few iterations seemed to be enough. Obviously, more looks better, but is slower.\n\tfor(int i=0; i<80; i++)\t{\n        \n        // Break conditions. Anything that can help you bail early usually increases frame rate.\n        if(layers>20. || col.x<0. || t>8.) break;\n        \n        // Current ray postion\n        sp = ro + rd*t;\n\t\t\n        d = map(sp); // Distance to nearest point in the cube field.\n        \n        // If we get within a certain distance of the surface, accumulate some surface values.\n        // Values further away have less influence on the total.\n        //\n        // aD - Accumulated distance. I interpolated aD on a whim (see below), because it seemed \n        // to look nicer.\n        //\n        // 1/.(1. + t*t*.25) - Basic distance attenuation. Feel free to substitute your own.\n        \n         // Normalized distance from the surface threshold value to our current isosurface value.\n        aD = (thD-abs(d))/thD;\n        \n        // If we're within the surface threshold, accumulate some color.\n        // Two \"if\" statements in a shader loop makes me nervous. I don't suspect there'll be any\n        // problems, but if there are, let us know.\n        if(aD>0.) { \n            // Smoothly interpolate the accumulated surface distance value, then apply some\n            // basic falloff (fog, if you prefer) using the camera to surface distance, \"t.\"\n            // selfColor is the color of the object at the point sp\n            vec3 sc = selfColor(sp);\n            col -= sc*(aD*aD*(3. - 2.*aD)/(1. + t*t*2.25)*4.5); \n            layers++;\n        }\n\n\t\t\n        // Kind of weird the way this works. I think not allowing the ray to hone in properly is\n        // the very thing that gives an even spread of values. The figures are based on a bit of \n        // knowledge versus trial and error. If you have a faster computer, feel free to tweak\n        // them a bit.\n        t += max(abs(d)*.5, thD*0.8); \n\t}\n    \n    // I'm virtually positive \"col\" doesn't drop below zero, but just to be safe...\n    col = max(col, 0.);\n    \n\tfragColor = vec4(clamp(col, 0., 1.), 1);\n }\n","name":"Image","description":"","type":"image"}]}