{"ver":"0.1","info":{"id":"tsfSWB","date":"1552008503","viewed":85,"name":"becanda","username":"winstonrenatan","description":"haha\nsphere, kotak, torus, cone, triangular prism","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["round"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"ShaderToy Tutorial - Ray Marching Primitives\" \n// by Martijn Steinrucken aka BigWings/CountFrolic - 2018\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n// This shader is part of a tutorial on YouTube\n// https://youtu.be/Ff0jJyyiVyw\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n//Sphere\nfloat sdSphere(vec3 p, float s1) {\n   vec4 s = vec4(0, s1, 6, s1);\n    \n   return length(p-s.xyz)-s.w;   \n}\n\n//Box\nfloat sdBox(vec3 p, vec3 b) {\n  vec3 d = abs(p) - b;\n    \n  return length(max(d,0.0)) + min(max(d.x,max(d.y,d.z)),0.0);\n}\n\n//Torus\nfloat sdTorus(vec3 p, vec2 t) {\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n    \n  return length(q)-t.y;\n}\n\n//Cone\nfloat sdCone(in vec3 p, in vec3 c) {\n    vec2 q = vec2( length(p.xz), p.y );\n    float d1 = -q.y-c.z;\n    float d2 = max( dot(q,c.xy), q.y);\n    \n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\n\n//Triangular Prism\nfloat sdTriPrism(vec3 p, vec2 h) {\n    vec3 q = abs(p);\n    \n    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n\nfloat GetDist(vec3 p) {\t \t\n    float planeDist = p.y;\n  \tfloat sp = sdSphere(p-vec3(0.0), 0.5);\n    float st = sdTorus(p-vec3(0.0, 1.75, 6.0), vec2(0.75, 0.2)); \n    float tpLeft = sdTriPrism(p-vec3(-1.0, 1.25, 3.0), vec2(0.3));\n    float tpRight = sdTriPrism(p-vec3(1.0, 1.25, 3.0), vec2(0.3));\n    float sb = sdBox(p-vec3(0.0, 1.25, 6.0), vec3(0.3));\n    float sc = sdCone(p-vec3(0.0, 2.5, 6.0), vec3(0.5));\n    float d = min(sp, planeDist);\n    d = min(d, st);\n    d = min(d, tpLeft);\n    d = min(d, tpRight);\n    d = min(d, sb);\n    d = min(d, sc);\n    \n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3(GetDist(p-e.xyy), GetDist(p-e.yxy), GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(0, 5, 6);\n    lightPos.xz += vec2(sin(iTime), cos(iTime))*2.;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l);\n    if(d<length(lightPos-p)) dif *= .1;\n    \n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 2, 0);\n    vec3 rd = normalize(vec3(uv.x-.15, uv.y-.2, 1));\n\n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd * d;\n    \n    float dif = GetLight(p);\n    col = vec3(dif);\n    \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}