{"ver":"0.1","info":{"id":"tlSBRK","date":"1599310873","viewed":116,"name":"Noise + Tile Experiment","username":"mharitsnf","description":"Experimenting with noise and tile","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["noise","simplex","pattern","tile"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 random3(vec3 c) {\n    float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n    vec3 r;\n    r.z = fract(512.0*j);\n    j *= .125;\n    r.x = fract(512.0*j);\n    j *= .125;\n    r.y = fract(512.0*j);\n    return r-0.5;\n}\n\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\nfloat snoise(vec3 p) {\n\n    vec3 s = floor(p + dot(p, vec3(F3)));\n    vec3 x = p - s + dot(s, vec3(G3));\n\n    vec3 e = step(vec3(0.0), x - x.yzx);\n    vec3 i1 = e*(1.0 - e.zxy);\n    vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\n    vec3 x1 = x - i1 + G3;\n    vec3 x2 = x - i2 + 2.0*G3;\n    vec3 x3 = x - 1.0 + 3.0*G3;\n\n    vec4 w, d;\n\n    w.x = dot(x, x);\n    w.y = dot(x1, x1);\n    w.z = dot(x2, x2);\n    w.w = dot(x3, x3);\n\n    w = max(0.6 - w, 0.0);\n\n    d.x = dot(random3(s), x);\n    d.y = dot(random3(s + i1), x1);\n    d.z = dot(random3(s + i2), x2);\n    d.w = dot(random3(s + 1.0), x3);\n\n    w *= w;\n    w *= w;\n    d *= w;\n\n    return dot(d, vec4(52.0));\n}\n\nvec3 col255to1(vec3 col) {\n    return col / 255.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 indigo = col255to1(vec3(22., 66., 91.));\n    vec3 dsb = col255to1(vec3(129., 195., 215.));\n    \n    vec2 uv1 = uv;\n    \n    uv *= 13.;\n    float sn = snoise(vec3(uv, iTime));\n    float sn2 = snoise(vec3(uv, iTime - 100.));\n    float oddRow = step(1., mod(uv.y, 2.));\n    float oddCol = step(1., mod(uv.x, 2.));\n    uv = fract(uv);\n    \n    vec2 bl = step(vec2(.1), uv);\n    vec2 tr = step(vec2(.1), 1.-uv);\n    \n    float boxes = oddRow * oddCol;\n    float boxesMini = boxes * (bl.x * bl.y * tr.x * tr.y);\n\n    vec3 color = vec3((step(0., sn + sn2) * boxesMini)) * indigo;\n\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}