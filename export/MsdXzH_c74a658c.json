{"ver":"0.1","info":{"id":"MsdXzH","date":"1457773105","viewed":1076,"name":"Smallest Clock-172 chars","username":"GregRostami","description":"This is a continuation of the shader that Fabrice and I worked on https://www.shadertoy.com/view/MdK3Wt<br/>I am desperately trying to shorten this shader.<br/>Please help!!","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["clock","short","2tc","golf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 158 chars - Big thanks to Fabrice for using the new #define trick to reduce this shader.\n\n#define N(t) +vec4( length(u/=.8) < R.y && cos(iDate.w/t-atan(u.x,u.y)) > .998 )\nvoid mainImage(out vec4 o, vec2 u) {\n    vec2 R = iResolution.xy;\n         u += u-R;\n         o = N(1e9-12.*)\n             N(573.)\n             N(9.55)\n             N(6875.); }\n\n\n// 169 chars - Grand Master, Dave Hoskins, gave us the final version ...\n// Sith Lord Andre, shaved another char off centering coordinates:\n/**\n#define N(t) +vec4(length(i/=.8)<o.y&&cos(iDate.w/t-atan(i.x,i.y))>.998)\nvoid mainImage(out vec4 o,vec2 i)\n{   \n    i-=o.xy=iResolution.xy*.5;\n    o  = N(1e9-12.*) // 12 hour indicators\n         N(573.)     // minutes\n         N(9.55)     // seconds\n         N(6875.);   // hours      \n}\n\n\n// 173 chars - As always, Fabrice SQUEEZES this shader by using some never-before-seen macro tricks.\n// coyote delivers THE KO punch for another Shadertoy MIRACLE!!\n\n#define N(t) +vec4(length(i/=.9)<o.y&&cos(iDate.w/t atan(i.x,i.y))>.998)\nvoid mainImage(out vec4 o,vec2 i)\n{   \n    i+=i-(o.xy=iResolution.xy);\n    o  = N(1e9 - 12.*) // 12 hour indicators\n         N(573.- )     // minutes\n         N(9.55 -)     // seconds\n         N(6875.- );   // hours      \n}\n\n\n// 190 chars - Our new size optimization brother, Andre, did some SERIOUS black magic to remove the rotation matrix!!\n/*\n#define N(t,s) vec4(length(i)<(o.y*=.9)&&cos(atan(i.x,i.y)*s-iDate.w/t)>.999)+\n\nvoid mainImage(out vec4 o,vec2 i)\n{   \n\to = iResolution.xyxy; \n    i -= o.xy*=.5;\n    o  = N(1e9,   12.) // 12 hour indicators\n         N(573.,  1.) // minutes\n         N(9.55,  1.) // seconds\n         N(6875., 1.) // hours\n        .0;  \n}\n\n\n// 227 chars - coyote reworked the coordinate centering code & reduced the fuction to only TWO variables!\n\n#define N(t,s) +vec4(length(o.xz=i*mat2(cos(iDate.w/t+1.57*vec4(3,0,0,1))))/o.y<++o.w*.1&&cos(atan(o.z,o.x)*s)>.999 )\n\nvoid mainImage(out vec4 o,vec2 i)\n{   \n    o = vec4(iResolution,5);\n    i += i - o.xy;\n    o  = N(6875., 1.) // hours\n         N(9.55, 1.) // seconds\n         N(573., 1.) // minutes\n         N(1e9, 12.); // 12 hour indicators\n}\n\n\n// 235 chars - Fabrice \"D Man\" Neyret removed the conditional operations at the end of the function\n\n#define N(t,l,s) vec4(length(j=i*mat2(sin(iDate.w/t+1.57*vec4(3,0,0,1))))<l&&cos(atan(j.y,j.x)*s)>.999) +\n\nvoid mainImage(out vec4 o,vec2 i )\n{   \n  \n\tvec2 r = iResolution.xy,j; i = (i+i-r)/r.y;\n    o  = N(6875., .6, 1.) // hours\n         N(573.,  .8, 1.) // minutes\n         N(9.55,  .7, 1.) // seconds\n         N(1e9,   .9,12.) // 12 hour indicators\n        .0;  \n}\n\n\n// 241 chars - Original shader\n\n#define N(t,l,s) length(j=i*mat2(sin(iDate.w/t+1.57*vec4(3,0,0,1))))<l&&cos(atan(j.y,j.x)*s)>.999?1.:0. +\n\nvoid mainImage(out vec4 o,vec2 i )\n{   \n    o-=o;\n\tvec2 r = iResolution.xy,j; i = (i+i-r)/r.y;\n    o += N(6875., .6, 1.) // hours\n         N(573.,  .8, 1.) // minutes\n         N(9.55,  .7, 1.) // seconds\n         N(1e9,   .9,12.) // 12 hour indicators\n        .0;  \n}\n*/","name":"Image","description":"","type":"image"}]}