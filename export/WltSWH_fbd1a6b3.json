{"ver":"0.1","info":{"id":"WltSWH","date":"1580865791","viewed":143,"name":"2D outline test","username":"okdalto","description":"test","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["sobel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 2D vector field visualization by Morgan McGuire, @morgan3d, http://casual-effects.com\n\nconst float PI = 3.1415927;\n\n\n\nconst int   ARROW_V_STYLE = 1;\nconst int   ARROW_LINE_STYLE = 2;\n\n// Choose your arrow head style\nconst int   ARROW_STYLE = ARROW_LINE_STYLE;\nconst float ARROW_TILE_SIZE = 20.0;\n\n// How sharp should the arrow head be? Used\nconst float ARROW_HEAD_ANGLE = 45.0 * PI / 180.0;\n\n// Used for ARROW_LINE_STYLE\nconst float ARROW_HEAD_LENGTH = ARROW_TILE_SIZE / 4.0;\nconst float ARROW_SHAFT_THICKNESS = 0.2;\n   \n\n\n// Computes the center pixel of the tile containing pixel pos\nvec2 arrowTileCenterCoord(vec2 pos) {\n   return (floor(pos / ARROW_TILE_SIZE) + 0.5) * ARROW_TILE_SIZE;\n}\n\n\n// v = field sampled at tileCenterCoord(p), scaled by the length\n// desired in pixels for arrows\n// Returns 1.0 where there is an arrow pixel.\nfloat arrow(vec2 p, vec2 v) {\n   // Make everything relative to the center, which may be fractional\n   p -= arrowTileCenterCoord(p);\n      \n    float mag_v = length(v), mag_p = length(p);\n   \n   if (mag_v > 0.0) {\n      // Non-zero velocity case\n      vec2 dir_p = p / mag_p, dir_v = v / mag_v;\n      \n      // We can't draw arrows larger than the tile radius, so clamp magnitude.\n      // Enforce a minimum length to help see direction\n      mag_v = clamp(mag_v, 5.0, ARROW_TILE_SIZE / 2.0);\n\n      // Arrow tip location\n      v = dir_v * mag_v;\n      \n      // Define a 2D implicit surface so that the arrow is antialiased.\n      // In each line, the left expression defines a shape and the right controls\n      // how quickly it fades in or out.\n\n      float dist;      \n      if (ARROW_STYLE == ARROW_LINE_STYLE) {\n         // Signed distance from a line segment based on https://www.shadertoy.com/view/ls2GWG by \n         // Matthias Reitinger, @mreitinger\n         \n         // Line arrow style\n         dist = \n            max(\n               // Shaft\n               ARROW_SHAFT_THICKNESS / 4.0 - \n                  max(abs(dot(p, vec2(dir_v.y, -dir_v.x))), // Width\n                      abs(dot(p, dir_v)) - mag_v + ARROW_HEAD_LENGTH / 2.0), // Length\n                  \n                     // Arrow head\n                min(0.0, dot(v - p, dir_v) - cos(ARROW_HEAD_ANGLE / 2.0) * length(v - p)) * 2.0 + // Front sides\n                min(0.0, dot(p, dir_v) + ARROW_HEAD_LENGTH - mag_v)); // Back\n      } else {\n         // V arrow style\n         dist = min(0.0, mag_v - mag_p) * 2.0 + // length\n               min(0.0, dot(normalize(v - p), dir_v) - cos(ARROW_HEAD_ANGLE / 2.0)) * 2.0 * length(v - p) + // head sides\n               min(0.0, dot(p, dir_v) + 1.0) + // head back\n               min(0.0, cos(ARROW_HEAD_ANGLE / 2.0) - dot(normalize(v * 0.33 - p), dir_v)) * mag_v * 0.8; // cutout\n      }\n      \n      return clamp(1.0 + dist, 0.0, 1.0);\n   } else {\n      // Center of the pixel is always on the arrow\n      return max(0.0, 1.2 - mag_p);\n   }\n}\n\n\n// signed distance to a 2D triangle\nfloat sdTriangle( in vec2 p0, in vec2 p1, in vec2 p2, in vec2 p )\n{\n   vec2 e0 = p1 - p0;\n   vec2 e1 = p2 - p1;\n   vec2 e2 = p0 - p2;\n\n   vec2 v0 = p - p0;\n   vec2 v1 = p - p1;\n   vec2 v2 = p - p2;\n\n   vec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\n   vec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\n   vec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\n    \n    float s = sign( e0.x*e2.y - e0.y*e2.x );\n    vec2 d = min( min( vec2( dot( pq0, pq0 ), s*(v0.x*e0.y-v0.y*e0.x) ),\n                       vec2( dot( pq1, pq1 ), s*(v1.x*e1.y-v1.y*e1.x) )),\n                       vec2( dot( pq2, pq2 ), s*(v2.x*e2.y-v2.y*e2.x) ));\n\n   return -sqrt(d.x)*sign(d.y);\n}\n\n\n\n\nvec2 getGradient(sampler2D tex, vec2 uv){\n    vec2 ep = vec2(1.0)/iResolution.xy;\n    vec3 TL = texture(iChannel0, uv + vec2(-1, 1)/ iResolution.xy).rgb;\n    vec3 TM = texture(iChannel0, uv + vec2(0, 1)/ iResolution.xy).rgb;\n    vec3 TR = texture(iChannel0, uv + vec2(1, 1)/ iResolution.xy).rgb;\n    \n    vec3 ML = texture(iChannel0, uv + vec2(-1, 0)/ iResolution.xy).rgb;\n    vec3 MR = texture(iChannel0, uv + vec2(1, 0)/ iResolution.xy).rgb;\n    \n    vec3 BL = texture(iChannel0, uv + vec2(-1, -1)/ iResolution.xy).rgb;\n    vec3 BM = texture(iChannel0, uv + vec2(0, -1)/ iResolution.xy).rgb;\n    vec3 BR = texture(iChannel0, uv + vec2(1, -1)/ iResolution.xy).rgb;\n                         \n    vec3 GradX = -TL + TR - 2.0 * ML + 2.0 * MR - BL + BR;\n    vec3 GradY = TL + 2.0 * TM + TR - BL - 2.0 * BM - BR;\n      \n    vec2 gradient = vec2(GradX.r, GradY.r) + vec2(GradX.g, GradY.g) + vec2(GradX.b, GradY.b);\n    vec3 g = vec3(gradient, 0.0);\n    vec3 front = vec3(0.0, 0.0, 1.0);\n    vec3 newGrad = cross(g, front);\n    \n    return normalize(newGrad.xy);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = texture(iChannel0, uv).xyz;\n    vec2 gradient = getGradient(iChannel0, uv);\n    col.xy = gradient;\n    col.z = 0.0;\n    float arr = arrow(fragCoord.xy, getGradient(iChannel0, arrowTileCenterCoord(fragCoord.xy)/iResolution.xy));\n    fragColor = vec4(vec3(arr), 1.0);\n    //fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// The MIT License\n// Copyright Â© 2014 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// See here for a specialization when the triangle is equilateral: https://www.shadertoy.com/view/Xl2yDW\n\n\n// List of some other 2D distances:\n//\n// Triangle:             https://www.shadertoy.com/view/XsXSz4\n// Isosceles Triangle:   https://www.shadertoy.com/view/MldcD7\n// Regular Triangle:     https://www.shadertoy.com/view/Xl2yDW\n// Regular Pentagon:     https://www.shadertoy.com/view/llVyWW\n// Regular Octogon:      https://www.shadertoy.com/view/llGfDG\n// Rounded Rectangle:    https://www.shadertoy.com/view/4llXD7\n// Rhombus:              https://www.shadertoy.com/view/XdXcRB\n// Trapezoid:            https://www.shadertoy.com/view/MlycD3\n// Polygon:              https://www.shadertoy.com/view/wdBXRW\n// Hexagram:             https://www.shadertoy.com/view/tt23RR\n// Regular Star:         https://www.shadertoy.com/view/3tSGDy\n// Star5:                https://www.shadertoy.com/view/wlcGzB\n// Ellipse 1:            https://www.shadertoy.com/view/4sS3zz\n// Ellipse 2:            https://www.shadertoy.com/view/4lsXDN\n// Quadratic Bezier:     https://www.shadertoy.com/view/MlKcDD\n// Uneven Capsule:       https://www.shadertoy.com/view/4lcBWn\n// Vesica:               https://www.shadertoy.com/view/XtVfRW\n// Cross:                https://www.shadertoy.com/view/XtGfzw\n// Pie:                  https://www.shadertoy.com/view/3l23RK\n// Arc:                  https://www.shadertoy.com/view/wl23RK\n// Horseshoe:            https://www.shadertoy.com/view/WlSGW1\n// Parabola:             https://www.shadertoy.com/view/ws3GD7\n// Rounded X:            https://www.shadertoy.com/view/3dKSDc\n// Joint:                https://www.shadertoy.com/view/WldGWM\n//\n// and many more here:   https://iquilezles.org/articles/distfunctions2d\n\n\n// signed distance to a 2D triangle\nfloat sdTriangle( in vec2 p0, in vec2 p1, in vec2 p2, in vec2 p )\n{\n\tvec2 e0 = p1 - p0;\n\tvec2 e1 = p2 - p1;\n\tvec2 e2 = p0 - p2;\n\n\tvec2 v0 = p - p0;\n\tvec2 v1 = p - p1;\n\tvec2 v2 = p - p2;\n\n\tvec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\n\tvec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\n\tvec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\n    \n    float s = sign( e0.x*e2.y - e0.y*e2.x );\n    vec2 d = min( min( vec2( dot( pq0, pq0 ), s*(v0.x*e0.y-v0.y*e0.x) ),\n                       vec2( dot( pq1, pq1 ), s*(v1.x*e1.y-v1.y*e1.x) )),\n                       vec2( dot( pq2, pq2 ), s*(v2.x*e2.y-v2.y*e2.x) ));\n\n\treturn -sqrt(d.x)*sign(d.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n\tp *= 1.0;\n    \n\tvec2 v1 = cos( iTime + vec2(0.0,2.00) + 0.0 );\n\tvec2 v2 = cos( iTime + vec2(0.0,1.50) + 1.5 );\n\tvec2 v3 = cos( iTime + vec2(0.0,3.00) + 4.0 );\n\n\tfloat d = sdTriangle( v1, v2, v3, p );\n    vec3 col = vec3(0.0);\n    if(d < 0.0){\n        col = vec3(1.0);\n    }\n\tfragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//blur 1\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = vec3(0.0);\n    vec2 ep = vec2(1.0)/iResolution.xy;\n    \n    float maxIter = 7.0;\n    for(float i = -(maxIter-1.0)*0.5; i < maxIter; i++){\n        col += texture(iChannel0, uv + vec2(ep.x*i, 0.0)).xyz;\n    }\n    \n    col /= maxIter;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"//blur2\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = vec3(0.0);\n    vec2 ep = vec2(1.0)/iResolution.xy;\n    \n    float maxIter = 7.0;\n    for(float i = -(maxIter-1.0)*0.5; i < maxIter; i++){\n        col += texture(iChannel0, uv + vec2(0.0, ep.y*i)).xyz;\n    }\n    \n    col /= maxIter;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Buffer C","description":"","type":"buffer"}]}