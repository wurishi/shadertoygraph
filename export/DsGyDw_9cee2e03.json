{"ver":"0.1","info":{"id":"DsGyDw","date":"1696192134","viewed":51,"name":"Spotlight_exp","username":"vince5287","description":"iq eye Tutorial with a fun background","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fract"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// EYE -> https://www.youtube.com/watch?v=emjuqqyq_qc&ab_channel=InigoQuilez\n\n#define PI 3.14159265\n\n\n// rand\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n// Noise 2D\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n// Pyth triplet to rotate every octable\nmat2 m = mat2(.8,.6,-.6,.8);\n\nfloat fbm ( vec2 p)\n{\n    float f = 0.0;\n    f += 0.500 * noise(p); p *= m*2.02;\n    f += 0.250 * noise(p); p *= m*2.03;\n    f += 0.125 * noise(p); p *= m*2.01;\n    f += 0.0625 * noise(p); p *= m*2.04;\n    \n    f /= 0.9375;\n    return f;\n}\n\n\n\nvec3 palette(float t)\n{\n    vec3 a = vec3(.5);\n    vec3 b = vec3(.5);\n    vec3 c = vec3(1.);\n    vec3 d = vec3(.6, .345, .323);\n    return a + b*cos(PI*(t*c + d));\n}\n\nfloat seg(vec2 p, vec2 a, vec2 b)\n{\n    vec2 pa = abs(p-a), ba = vec2(b-a); \n    float h = clamp(dot(pa,ba)/ dot(ba,ba),.0, 1.);\n    \n    return length(pa - ba*h);\n}\n\n#define PI 3.14159265\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.* fragCoord - iResolution.xy) / iResolution.y;\n    vec2 q = p;\n    vec2 q2 = p;\n    \n    vec3 tot = vec3(.0);\n    vec3 col = vec3(.0);\n    \n    float r = sqrt(dot(q2.xy,q2.xy));\n    float a = atan(q2.y,q2.x);\n    \n    r *= 1.0 + 0.1 * (.5 + .5*sin(4.*iTime))*clamp(1.-r,0.,1.);\n    \n    for (int i = 0; i < 4; i++)\n    {\n        // BG\n        float d = length(p);\n        vec3 col = palette(d);\n        d = .1/d;\n        \n        float an = iTime * .2;\n        float cc = cos(an);\n        float ss = sin(an);\n               \n        p = mat2(cc, -ss, ss, cc) * p;\n        float d1 = seg(p, vec2(.02), vec2(1.5));\n        \n        // Sparkles\n        float d2 = length(q);\n        float ray = .02 / d2;\n        q = fract(1.23452*q)-.5;\n        ray = max(1. - abs(q.x*q.y*1500.), .0);\n        \n        col *= max(d, d1);\n        col += ray;\n        tot = col;\n        \n    }\n    \n     if (r < .6) \n    {\n        col = vec3(.1,.3,.4);\n        \n        float f = fbm( 6.*q2.xy);\n        col = mix(col, vec3(.2,.5,.4), f);\n        \n        f = 1.-smoothstep(.2,.5,r);\n        col = mix(col, vec3(.85,.4,.2), f);\n        \n        a += .5*fbm(2.*q2);\n        \n        f = smoothstep(0.3, 1.0, fbm(vec2(8.*r, 20.*a)));\n        col = mix(col, vec3(1.), f);\n        \n        f = smoothstep(0.4, 0.9, fbm(vec2(10.*r, 20.*a)));\n        col *= 1.-f;\n        \n        // Darker near border\n        f = smoothstep(0.4, 0.6, r);\n        col *= 1.-.75*f;\n        \n        // Lighten very near border\n        f = smoothstep(0.55, 0.6, r);\n        col = mix(col, vec3(.4), f);\n        \n        f= 1. - smoothstep(.0, .25, length(q2 - vec2(.2,.2)));\n        col += vec3(f);\n        \n        f = smoothstep(.15,.3,r);  \n        col *= f;\n        \n        tot = col;\n        \n    }\n        \n    \n    fragColor = vec4(tot, 1.0);\n}","name":"Image","description":"","type":"image"}]}