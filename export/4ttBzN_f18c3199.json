{"ver":"0.1","info":{"id":"4ttBzN","date":"1538843027","viewed":162,"name":"Nature Project-Sun","username":"cake7914","description":"Cool sun, cycle of being reborn","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sun"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define repeat(v, r) (mod(v, r)-r/2.) //repeat function\n\nstruct Shape{\n  float dist;\n  vec4 color;\n};\n\n\n    \n//=======================\n// Utility Functions\n//=======================\nfloat random(vec2 v) {\n  return fract(sin(dot(v*0.1, vec2(324.654, 156.546)))*46556.2);\n}\n\nmat2 rot(float a){ //rotates object\n  float r = cos(a); \n  float f = tan(a);\n  return mat2(r, f, -f, r);\n}\n\nfloat sphere(vec3 v, float r){ //creates sphere\n  return length(v)-r;\n}\n\nvoid pMod1(inout float p, float size) {\n\tfloat halfsize = size*0.5;\n\tp = mod(p + halfsize, size) - halfsize;\n}\n\n// Converts v to Polar Coordinates, then repeat based on r\nvoid pModPolar(inout vec2 v, float r){\n  float f = 6.28318/r;\n  float z = atan(v.y, v.x)+f*0.5;\n  z = mod(z, f)-f*0.5;\n  v = vec2(cos(z), sin(z))*length(v);\n}\n//=======================\n\n\nShape sun(vec3 c){\n  Shape shape;\n  float s;\n  shape.dist = 1000.; // Draw Distance\n  shape.color = vec4(1.); // Initial Color\n\n\n  vec3 i = c;\n    \n    i.xy *= rot(c.z*0.1+iTime*0.5); // Twist Coord System\n    pModPolar(i.xy, 15.); // Twist Repeat\n    i.x -= abs(sin(iTime*10.))*1.; // Offset from origin\n    pMod1(i.x, 3.);\n  \ts = sphere(i, 1.4); // Create sphere\n\n    // Plug-in distance to object and color\n    vec4 color = vec4(.9, 0.9, 0.2, 1.); //yellow color for sun\n  \tshape.dist = s;\n  \tshape.color = color;\n\n  return shape;\n}\n\n\n// Map all objects within scene\nShape map(vec3 c){\n  Shape sun = sun(c);\n  return sun;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 v = (fragCoord.xy-0.5 * iResolution.xy) / iResolution.y;\n\n  \n  vec3 cam = vec3(0., 0., -100.); // Setup Camera, zoom out\n  vec3 f = normalize(vec3(v, 1.)); // Frustrum\n  vec3 scene = cam;\n  fragColor = vec4(0.); // Background Color\n\n  // Ray Marcher\n  for(float z = 0.1 ; z <= 1.; z += 0.03){\n    Shape c = map(scene); // Calc SDF\n    if(c.dist < 0.001){\n      fragColor = c.color*(1.-z); // Hit  - invert pixels\n      break;\n    }\n    scene += f * c.dist; // Step to SDF\n\n\n  }\n}","name":"Image","description":"","type":"image"}]}