{"ver":"0.1","info":{"id":"ltcyzS","date":"1533046206","viewed":990,"name":"Radial Energy","username":"crocidb","description":"Some study based on TeoDutra's flowmap tutorial: https://twitter.com/teodutra/status/1023804477915058176","likes":25,"published":1,"flags":0,"usePreview":0,"tags":["radial","vfx","energy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// SNOISE function from: https://www.shadertoy.com/view/lsf3RH\nfloat snoise(vec3 uv, float res)\n{\n\tconst vec3 s = vec3(1e0, 1e2, 1e3);\n\t\n\tuv *= res;\n\t\n\tvec3 uv0 = floor(mod(uv, res))*s;\n\tvec3 uv1 = floor(mod(uv+vec3(1.), res))*s;\n\t\n\tvec3 f = fract(uv); f = f*f*(3.0-2.0*f);\n\n\tvec4 v = vec4(uv0.x+uv0.y+uv0.z, uv1.x+uv0.y+uv0.z,\n\t\t      \t  uv0.x+uv1.y+uv0.z, uv1.x+uv1.y+uv0.z);\n\n\tvec4 r = fract(sin(v*1e-1)*1e3);\n\tfloat r0 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\t\n\tr = fract(sin((v + uv1.z - uv0.z)*1e-1)*1e3);\n\tfloat r1 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\t\n\treturn mix(r0, r1, f.z)*2.-1.;\n}\n\nfloat noise(vec2 uv, float baseres)\n{\n    float n = 0.0;\n    for (int i = 0; i < 7; i++)\n    {\n        float v = pow(2.0, float(i));\n        n += (1.5 / v) * snoise(vec3(uv + vec2(1.,1.) * (float(i) / 17.), 1), v * baseres);\n    }\n    \n    \n    return clamp((1.0 - n) * .5, 0., 1.) * 2.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspectRatio = iResolution.y/iResolution.x;\n    vec2 uv = (fragCoord/iResolution.xy);\n    uv.y *= aspectRatio;\n    \n    // Tweaking vars\n    vec4 color = vec4(0.125, 0.291, 0.723, 1.0);\n    vec4 leaving = vec4(0.925, 0.791, 0.323, 1.0);\n    float noise_sz = 7.0f;\n    float speed = 0.4;\n    vec2 center = vec2(0.5, 0.5 * aspectRatio);\n    \n    float dc = 1. - (distance(uv, center) * 2.);\n    float pdc = pow(dc, 3.5);\n    \n    vec2 dir = -normalize(uv - center) * speed;\n    \n    float phase0 = fract(iTime * 0.3 + 0.5);\n    float phase1 = fract(iTime * 0.3 + 0.0);\n    \n    vec2 uv0 = uv + phase0 * dir;\n    vec2 uv1 = uv + phase1 * dir;\n    \n    // Rotation\n    float as = pdc * sin(iTime * 0.9) * 1.2;\n\tfloat ca = cos(as);\n\tfloat sa = sin(as);\t\t\t\t\t\n    \n    mat2 rot;\n    rot[0] = vec2(ca, -sa);\n    rot[1] = vec2(sa, ca);\n    \n    uv0 = center + ((uv0 - center) * rot);\n    uv1 = center + ((uv1 - center) * rot);\n\n    // Samplings\n    float tex0 = max(noise(uv0, noise_sz), noise(uv0 * 1.2, noise_sz));\n    float tex1 = max(noise(uv1, noise_sz), noise(uv1 * 1.4, noise_sz));\n    \n    float lerp = abs((0.5 - phase0) / 0.5);\n    float samplings = mix(tex0, tex1, lerp);\n    \n    vec4 c = vec4(samplings, samplings, samplings, 1.0) * mix(color, leaving, pdc) * pdc;\n  \tc += pow(dc, 16.0) * mix(color, leaving, pow(dc, 16.0)) * 2.3;\n    \n    // Output to screen\n    fragColor = c;\n}","name":"Image","description":"","type":"image"}]}