{"ver":"0.1","info":{"id":"XcdBDS","date":"1733510338","viewed":396,"name":"The Evil Gorgon Of Tindalos","username":"msm01","description":"Here's your (SUPER FREAKING LATE) Halloween 2024 present. \"Un shader qui fait peur\", as we say in France. It's also a thrilling short story about particle accelerators, spy-scientists, horrors from beyond and multidimensional entities ! Enjoy.","likes":31,"published":1,"flags":8,"usePreview":0,"tags":["2d","scifi","halloween","cern","story","lovecraft","tindalos"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The (now) usual scifi story that goes with this shader is so long it is in\n// the Common Tab, after the code. :)\n\n// Technical details :\n\n// Shadertoy's Soundcloud integration has been broken for a long time but if you\n// want, you can still open \"Face Like A Needle\" by Skaven252 in another tab and\n// hit PLAY to enjoy this scene as it was meant to. Here's the link :\n// https://soundcloud.com/skaven252/face-like-a-needle\n// https://creativecommons.org/licenses/by-nc-sa/3.0/\n\n// Since there are options to generate sound on Shadertoy, this time I tried.\n// It's very, VERY basic but it does the job. :-/ Not for long, though, I hate\n// repeating sounds. So I limited it to 60 seconds in the Sound Tab, you can\n// extend it (...BUT WHY WOULD YOU DO THAT ?!) or cut it all (yeah that's much\n// much better).\n\n// Some context (for the laughs) :\n\n// So here we go again with a \"2D shader\" or a \"cardboard sandwich\" in Evvvvil's\n// words. As usual this spiraled out of control fast : I was just trying to make\n// circles with noise in order to draw 2D craters. You know, fairly simple msm01\n// stuff. Then I saw a shadertoy doing texture feedback with jitter and I wanted\n// to try it. So I started with my noisy circle, added a for-loop, got a sort of\n// aura-like effect with a central black noisy disk. And there, suddenly, I just\n// saw something. Like a nuclear scientist peering into the main shaft of a new\n// Penning trap that discovers the unexpected. So I forgot all about jitter and\n// it pretty much started evolving on its own. Logically it doesn't make lots of\n// sense. Artistically, perhaps a bit more... but not much !\n// Anyways, as they say :\n\n//                   \"Do not stand between a glsl painter and his framebuffer !\"\n\n// And it's even truer when Halloween is closing in, haha ! Also, I hate this\n// shader because I had a perfectly fine, 10X better one waiting for release but\n// nooooooo, I just HAD TO start improvising on this one 2 weeks before the 31th\n// of October ! As a result I missed the deadline FOR BOTH ! *slow clap*\n// This pretty much sums up my life.\n\n// This shader is, obviously, another hommage to Lovecraft, Frank Belknap Long,\n// Ghostbusters, CERN, and many other things (i.e. tentacles, witchery, Another\n// World, Stross, etc) with the hard-scifi twist I'm usually so fond of. I must\n// say, as an atheist, I've always been a fan of Ghostbusters's realistic take\n// on the paranormal, ghosts and such. I was very amused, while doing this, to\n// learn how the proton packs and ghost traps work canonically in the movies or\n// video games. Apparently, the streams are supposed to soak ghosts with muons!\n// You know, that electron sibling that weights a LOT more. So once the ghost/\n// vapor is coated with them, you activate the muon traps, which is the\n// technical term for the ghost traps. They only capture muons, really, but\n// since the ghost is now full of them, it's dragged inside too ! ... And there\n// I'm honestly left speechless in admiration, because I didn't suspect how far\n// the explanations would go ! Nice.\n\n// Also read The Hounds of Tindalos. It's a lovecraftian tale by Frank Belknap\n// Long. The text honestly feels a bit amateurish when you're into literature\n// (as I am) but I appreciate it nonetheless. It has something, an atmosphere\n// that really grabs your attention, and has left an impression on many, many\n// readers. Also, it's very short. Available for free on Wikisource at :\n\n// https://en.wikisource.org/wiki/Weird_Tales/Volume_30/Issue_1/The_Hounds_of_Tindalos\n\n// Okay congrats for having read this far, I know I talk/write too much so here\n// is a bonus short story (hooo, the irony !). Check it out in the Commons Tab,\n// after the long 1st one ! See ya...\n\nfloat traceChar( in vec2 v, float Charac, vec2 PosTxt)\n{\n      float colorChar = 0.0;\n      v = vec2(v.x, 1.0-v.y);\n      if( v.x > PosTxt.x && v.x < PosTxt.x + 1.0/16.0 )\n      {\n          if( v.y > PosTxt.y && v.y < PosTxt.y + 1.0/16.0 )\n          {\n              vec2 Disp = vec2(mod(Charac,16.0),floor(Charac / 16.0))/16.0;\n              colorChar = texture(iChannel1,vec2(Disp.x + (v.x - PosTxt.x),-Disp.y - (v.y - PosTxt.y) )).x;\n          };\n      };\n      return colorChar;\n}\n\nvec4 traceLabels(in vec2 p, int Tab, float Nb_Char, vec2 Centrage)\n{\n     vec4 Label = vec4(0.0);\n     float Charac = 0.0;\n     for(int i = 0; i<int(Nb_Char); i++)\n     {\n         if(Tab==0)Charac = float(  Data01[i]);\n         if(Tab==1)Charac = float(  Data02[i]);\n         if(Tab==2)Charac = float(  Data03[i]);\n         if(Tab==2 && float(i)==(Nb_Char-3.0))Charac = (mod(iTime,1.0)>0.5)?float(  Data03[i]):32.0;\n         if(Tab==3)Charac = float( Alert01[i]);\n         if(Tab==4)Charac = float( Alert02[i]);\n         if(Tab==5)Charac = float( Alert03[i]);\n         Label += traceChar(p, Charac, vec2(0.028*mod(float(i),Nb_Char) - 0.028*(Nb_Char + 1.0)/2.0 + Centrage.x,Centrage.y));\n     };\n     return Label;\n}\n\nvec4 drawTunnel(in vec2 p, vec4 CS,sampler2D tex, float TimeVar)\n{\n     float angle = atan(p.y/p.x);\n     float dist  = length(p);\n     vec3  Tunnel;\n     Tunnel = texture( tex,vec2( 0.0080*(1.0/dist) + 1.0*TimeVar, angle/PI)).xyz;\n     Tunnel += smoothstep(0.1,0.0,dist);\n     Tunnel -= smoothstep(0.0,0.9,dist);\n     return vec4(clamp(Tunnel,0.0,1.0),1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     // Get Coordinates...\n     vec2 p = vec2( (fragCoord.x - iResolution.x/2.0) / iResolution.y,fragCoord.y / iResolution.y - 0.5);\n\n     TimeVar = 0.75*iTime;\n     \n     // Behaviour controls... Based on time stats...\n     FIRE_JAWS = (fbm(vec2(    TimeVar)) > 0.50)?true:false;\n     FIRE_SEAL = (fbm(vec2(0.1*TimeVar)) > 0.85)?true:false;\n     FIRE_SYNC = (fbm(vec2(    TimeVar)) < 0.15)?true:false;\n     FIRE_PHAS = (fbm(vec2(2.0*TimeVar)) > 0.95)?true:false;\n     MAGN_FAIL = (fbm(vec2(0.1*TimeVar)) > 0.60)?true:false;\n     PINB_MODE = (     mod(TimeVar,10.0) > 7.50)?true:false;\n\n     // Saving general base for later\n     vec2 last_p = p;\n\n     // Zoom please...\n     p *= 10.0;\n\n     // The world is apparently a vector. Not even a big one... :(\n     vec4 col = vec4(0.0,0.0,0.0,1.0);\n\n     // Making the Gorgon change position constantly because it's feral and crazy !\n     vec2 GorgonMotion = vec2( 0.9 - 1.8*fbm(vec2(2.0*TimeVar + 0.21)), 0.5 - 1.0*fbm(vec2(1.5*TimeVar + 5.77)));\n\n     p += GorgonMotion;\n\n     // Saving Gorgon base for later...\n     vec2 s = p;\n     vec2 k = p;\n\n     // Setting up a color for later use...\n     vec4 ColorWarp = vec4(1.0,0.8,0.5,1.0);\n\n     // Pretty much explicit\n     float angle = atan(p.y,p.x);\n     \n     // Calculating circles with noise that loop on itself...\n     // I have exactly ZERO idea why I named these o and ooo. But let's stick with it.\n     // And now that I re-read it, I keep hearing Power's astonished \"oh ! Oooooh ! OOOOHHHH !\"\n     // when Denji tells her (so fiercely) he's gonna save her cat ! (very cute/funny scene) :D\n     float o     = length(              p ) - 1.5 - 0.20*sin(8.0*angle)*fbm(vec2(4.0*angle +     TimeVar));\n     float ooo   = length( r2d(TimeVar)*p ) - 1.2 + 0.25*sin(8.0*angle)*fbm(vec2(4.0*angle + 3.0*TimeVar));\n\n     // Drawing the Gorgon's aura (while eating Gorgonzola)\n     float NbIter          = 100.0;\n     float ColorVariations =   0.0;\n     float ColorScaling    =   0.0;\n     for(float g=0.0; g<NbIter; g++)\n     {\n         // Making the colors scroll in the aura\n         ColorVariations = sin((3.0*3.14159/NbIter)*g - 20.0*TimeVar);\n         // Just a recurrent thing we can calculate just once per iteration\n         ColorScaling    = 1.0-g/NbIter;\n         // Calculate the color\n         ColorWarp = vec4(1.0              - 0.3*ColorVariations,\n                          0.8*ColorScaling - 0.5*ColorVariations,\n                          0.5*ColorScaling - 0.5*ColorVariations,\n                          1.0);\n         // Compute the aura's cloud shape\n         o   = length(r2d(TimeVar)*p) + 0.25*sin(8.0*angle)*fbm(vec2(4.0*angle + 3.0*TimeVar)) - 1.5;\n         // Draw it\n         col = mix(col,ColorScaling*ColorWarp,smoothstep(0.3,0.0,abs(o) - 0.01));\n         // ZOOM !\n         p*= 0.98;\n     };\n\n     // Reset p after all this frantic scaling\n     p = s;\n\n     vec4 ColorTube = vec4(vec3(clamp(0.1 + 0.9*smoothstep(5.1,0.0,dot(GorgonMotion,p)),0.0,1.0)),1.0);\n\n     // When the Gorgon fires its beam, the tubes get redder obviously...\n     if(FIRE_SYNC)ColorTube = vec4(1.0,0.0,0.0,1.0);\n\n     // We're going to draw the infrastructure within the main chamber so...\n     // First we cancel Gorgon's erratic motion.\n     p -= GorgonMotion;\n     // GorgonMotion... Purple Motion's lesser known brother. :) Sorry if you don't get it. Old demomaking joke.\n     // GorgonMotion... The forgotten remix of Global Motion (GMOTION.S3M by Purple Motion on modarchive haha)\n     // ... ... Thats an awful lot of motion ! If that makes you sick, take a potion !\n     // Okay, break is over, we now go back to our regular program :\n\n     // Make the outer rings spin randomly, so it looks like active, adaptative tech.\n     p*= r2d(3.14159*fbm(vec2(0.2*TimeVar)));\n\n     // Distant tubes (probably the exit of the decelerator ring)\n     col += 0.15*ColorTube*smoothstep(0.05,0.0,abs(length(p)-2.6) - 0.10);\n     col += 0.50*ColorTube*smoothstep(0.05,0.0,abs(length(p)-2.2) - 0.05);\n\n     // Main tube\n     col += 0.5*ColorTube*smoothstep(0.05,0.0,abs(length(p)-7.2) - 1.5)\n                         *smoothstep(0.0,0.05,abs(length(p)-7.3) - 0.1)\n                         *smoothstep(0.0,0.05,abs(length(p)-7.7) - 0.05)\n                         *smoothstep(0.0,0.01,abs(p.y - 0.7*clamp(sin(abs(1.7*abs(p.x) + 4.0)),0.0,0.5))-0.01);\n\n     // Totally faked edge-shading, relative to Gorgon position (dot product from ColorTube, certainly wrong)\n     col += 0.2*clamp((1.0-ColorTube),0.0,1.0)*smoothstep(0.005,0.0,abs(length(p)-7.15) - 0.01);\n     col += 0.2*clamp((1.0-ColorTube),0.0,1.0)*smoothstep(0.005,0.0,abs(length(p)-7.60) - 0.01);\n     col += 0.2*clamp((1.0-ColorTube),0.0,1.0)*smoothstep(0.005,0.0,abs(length(p)-8.70) - 0.01);\n\n     // Drawing the supercontinuum laser firing holes\n     // First rotate the beams with the exact angle so\n     // that the branches of the star sdf are aligned.\n     p*=r2d(PI/10.0);\n     for(int i = 0 ; i < 10; i++)\n     {\n         // Adjust scale and position\n         p *= vec2(5.0,1.0);\n         // Holes\n         col -= 0.5*ColorTube*smoothstep(0.05,0.0,length(p-vec2(-30.0,0.0))-0.25);\n         // Radial amplifier supercontinuum beams that fire ONLY when the seal blast is activated\n         if( FIRE_SEAL )\n         {\n            col += vec4(0.0,0.5,1.0,1.0)*smoothstep(0.1,0.0,abs(p.y + 0.05*fbm(vec2(2.0*p.x + 100.0*TimeVar))))*smoothstep(0.1,0.0,abs(p.x) - 30.0);\n            col += vec4(1.0,1.0,0.0,1.0)*smoothstep(0.02,0.0,abs(p.y) - 0.01)*smoothstep(0.1,0.0,abs(p.x) - 30.0);\n         };\n         // Return to normal transform\n         p *= 1.0/vec2(5.0,1.0);\n         // Rotate to next pos for next hole\n         p *= r2d(2.0*PI/10.0);\n     };\n     p *= r2d(PI/10.0);\n\n     if( FIRE_SEAL ) // When the Gorgon beam is firing...\n     {\n        if(length(p)<5.3) // circular clipping to save GPU\n        {\n           // Draw the Ancient Seal. The ray is visible in vacuum because the supercontinuum\n           // laser pulse is so intense, it actually breaks down spacetime on its path, and\n           // makes it bleed tears of pure white light. Who said science had no poetry ?!\n           col += abs(sin(1.5*p.y - 20.0*TimeVar))*(smoothstep(0.005,0.0,\n                  // The Pentacle can be either positive -\"one spike above\" config-\n                  // Or evil -\"two spikes above\" config. Here, it rotates, soooo we\n                  // get the best of both worlds.\n                  abs(sdStar5(p,1.5,2.89))-0.025)\n                  +smoothstep(0.3,0.0,abs(sdStar5(1.0*p,1.5,2.89))-0.025)\n                  // Draw additional concentric circles\n                  + smoothstep(0.05,0.0,abs(length(p)-4.4))\n                  + smoothstep(0.05,0.0,abs(length(p)-4.5))\n                  + smoothstep(0.05,0.0,abs(length(p)-5.0))\n                    // Captain Picard : \"Make it glow !\"\n                  + smoothstep(0.30,0.0,abs(length(p)-4.4))\n                  + smoothstep(0.30,0.0,abs(length(p)-4.5))\n                  + smoothstep(0.30,0.0,abs(length(p)-5.0)));\n\n           if(abs(length(p) - 4.75) < 0.2) // Ad-hoc Clipping for the seal's text...\n           {\n              if(abs(length(p) - 4.75) < 0.25)col += 0.95*vec4(1.0,0.5,0.1,1.0)*smoothstep(0.5,0.0,sin(3.0*atan(p.y,p.x) + 25.0*iTime));\n              for(int j=0 ; j < 102; j++) // There are 102 chars in the spell...\n              {\n                  // Write the sacred words in Greek, because it looks better\n                  // and more authentic that way !\n                  // Since we write in a circle, we need to rotate for each char\n                  p*=r2d(-float(j)*2.0*3.14159/102.0);\n                  // Zooming a bit...\n                  p*= 0.205;\n                  // The 63 offset is a specific ROT-13 to translate from Latin to Greek chars.\n                  col += traceChar(p,float(SealTxt[j]) + 63.0,vec2(0.0,0.0));\n                  // Canceling transforms before going for another round...\n                  p*= 1.0/0.205;\n                  p*=r2d(float(j)*2.0*3.14159/102.0);\n              };\n           };\n        };\n     };\n\n     // Resetting p, good as new !\n     p = s;\n\n     // It's time to draw the Gorgon's tentacles ! The more the better !\n     // So I've been told by slutty witches, anyways... :)\n     float NbTentax = 20.0;\n\n     // Make them radiate\n     for(float g=0.0; g<NbTentax; g++)\n     {\n         if( k.x > 0.0 && abs(k.y) < 0.65) // Static Masking\n             col = mix(col,vec4(0.0),smoothstep(0.1,0.0,abs(k.y - 0.40*sin(k.x - 16.0*TimeVar + 2.0*PI*fbm(vec2(25.89*g))) ) - 0.2*clamp(1.0-0.2*k.x,0.0,1.0) + 0.04*fbm(vec2(10.0*k.x - 75.0*TimeVar + 3.258*g)))*vec4(1.0)*smoothstep(0.0,0.2,ooo + 0.5));\n         k*=r2d(2.0*PI/NbTentax);\n     };\n\n     // Mask the tentacle hub behind the dark body of the Gorgon...\n     col = mix(col,vec4(0.0),smoothstep(0.01,0.0,ooo));\n\n     // Drawing the \"force-field\" jaws... Fun fact : the teeth actually rotate at\n     // high-speed like a chainsaw, hence maximising damage. With gruesome results !\n     if(FIRE_JAWS) // Make them appear from time to time\n     {\n        // Teeth params... It used to be better. IDK what I did, but I'm NOT satisfied with this specific config atm.\n        float JawsSpeed  =  7.0;\n        float TeethSpeed = 50.0;\n        float TeethSize  =  0.2;\n        float NbIterJaws = 15.0;\n        float TeethScale =  0.8;\n\n        // Avoid repeating calculations. This 2D shader is already way heavier than it has any right to be...\n        float tmpCalc1   =  0.0;\n        float tmpCalc2   =  0.0;\n        float tmpCalc3   =  0.0;\n\n        // Variate the orientation\n        p *= r2d(0.7*fbm(vec2(2.0*TimeVar)) - 0.35);\n\n        p *= TeethScale;\n        for(float g=0.0; g<NbIterJaws; g++)\n        {\n            ColorWarp = 0.2*vec4(1.0 - 0.3*sin((3.0*3.14159/NbIterJaws)*g - 20.0*TimeVar),\n                                  0.8*(1.0-g/NbIterJaws) - 0.5*sin((3.0*3.14159/NbIterJaws)*g - 20.0*TimeVar),\n                                  0.5*(1.0-g/NbIterJaws) - 0.5*sin((3.0*3.14159/NbIterJaws)*g - 20.0*TimeVar),\n                                  1.0);\n\n            tmpCalc1 = TeethSize*TriangleWave(10.0*p.x + TeethSpeed*TimeVar);\n            tmpCalc2 = p.x*p.x*(1.0 - 1.0*fbm(vec2(10.0*TimeVar)));\n            tmpCalc3 = smoothstep(0.9,0.0,abs(p.x));\n            // Lower Jaw\n            col += ColorWarp*smoothstep(0.05,0.0,abs(p.y + tmpCalc1 - tmpCalc2 + 1.1 - 1.1*fbm(vec2(10.0*TimeVar))) - 0.1)*tmpCalc3;\n            // Upper Jaw\n            col += ColorWarp*smoothstep(0.05,0.0,abs(p.y + tmpCalc1 + tmpCalc2 - 1.1 + 1.1*fbm(vec2(10.0*TimeVar))) - 0.1)*tmpCalc3;\n\n            p*= 0.992; // feedback for very soft color gradient on the teeth\n        };\n        p*= 1.0/TeethScale;\n\n        p *= r2d(-0.7*fbm(vec2(2.0*TimeVar))+0.35);\n     }else{\n        // When the jaws are off, we draw the Head,\n        // the Eye and the Synchrotron Beam\n        float Clipping = smoothstep(0.85,0.0,ooo+0.5);\n\n        // Make the eye dart everywhere because the Gorgon is crazy, and crazy fast !\n        // Not sure about this passage. Probably a lot more non-sense than usual...\n        vec2 EyeVector = vec2( 0.50 - 1.0*fbm(vec2(4.0*TimeVar + 0.29)),\n                               0.25 - 0.5*fbm(vec2(2.5*TimeVar + 3.90)));\n        float EVAngle = atan(EyeVector.y,EyeVector.x);\n\n        p += EyeVector;\n\n        float SizeSpot = 0.15;\n\n        if( smoothstep(0.5,0.0,length(EyeVector) - 0.2) < 0.0 )SizeSpot = 0.50;\n\n        SizeSpot += abs(0.15*sin(40.0*TimeVar));\n\n        // The dark center of the Eye, the window to its soul !\n        col -= vec4(1.0)*smoothstep(0.5,0.0,length(p) - 0.15 + 0.10*fbm(vec2(5.0*TimeVar)));\n\n        angle = atan(p.y,p.x);\n\n        // \"There's a kind of evil glare in its eye, and it's NOT a trick of the light !\" (Agent 147)\n\n        ooo   = length( r2d(TimeVar)*p ) - 1.2 + 0.25*sin(8.0*angle + 20.0*TimeVar)*fbm(vec2(4.0*angle + 3.0*TimeVar));\n\n        // \"Awwww it's cute, it has some inflatable collar, like the Jurassic Park dinosaurs !\" (intern 5)\n        col += 0.25*vec4(1.0,0.0,0.0,1.0)*smoothstep(0.7,0.0,ooo + 0.9*fbm(vec2(5.0*TimeVar)));\n        float Norm_Synch = (FIRE_SYNC)?2.0:1.0;\n        col += Norm_Synch*vec4(1.0,0.5,0.0,1.0)*metaDiamond(p,vec2(0.0,0.0),0.2)*Clipping;\n\n        col+= vec4(1.0,0.8,0.4,1.0)*metaDiamond(p,vec2(0.0,0.0),(0.1 + abs(0.1*sin(50.0*TimeVar))))\n                                   *smoothstep(0.8,0.0,ooo + 0.9*fbm(vec2(5.0*TimeVar)))\n                                   *Clipping;\n\n        // \"Awwwww, and it spits too ! Except it's light instead of tar goo !\" (intern 5 again, Note : make sure we never hire her again...)\n        if( FIRE_SYNC )\n        {\n            // The laser/synchrotron thing\n\n            p *= r2d( EVAngle);\n            // Beam Bloom (repeat it fast to look stupid, haha)\n            col += vec4(1.0,0.6,0.4,1.0)*smoothstep(0.01 + 0.05*abs(p.x),0.0,abs(p.y) - 0.01*fbm(vec2(3.0*p.x + 75.0*TimeVar))*length(p))*smoothstep(0.1,0.0,p.x);\n            // Actual Beam\n            col += vec4(1.0,0.5,0.5,1.0)*smoothstep(                 0.1,0.0,abs(p.y)*length(p))*smoothstep(0.1,0.0,p.x);\n            p *= r2d(-EVAngle);\n            // Okay, now we're faking the noisy, pointy property of laser light. In French it's called\n            // \"tavelures\" I think.\n            if( length(noise(p))>.7)col+= 0.9*vec4(1.0,0.0,0.0,1.0)*noise(p)*smoothstep(5.0,0.0,length(p));\n\n            // When the motion of the \"eye\" is close to the center, do some \"blinding\" trickery...\n            if( length(EyeVector) < 0.1 )\n            {\n                col += 0.5*abs(sin(10.0*TimeVar));\n                col += 0.2*smoothstep(1.0,0.0,length(p)-1.5);\n                // Draw some flaming tunnel since we're basically staring straight into the jaws of a dragon !\n                col += 2.0*drawTunnel(0.1*p, vec4(1.0), iChannel0,TimeVar);\n                // Ye Olde Eyeblower, since we're staring into a very coherent beam which has at least\n                // \"some\" internal structure (Bessel/solenoid beam and such), hence interferences and diffraction\n                // patterns... IDK really, this just feels right, honestly. Animator's hunch...\n                // It certainly adds something right to the blinding flashes, though.\n                // Makes for nice screenshots too ! :)\n                col -= 0.3*sin(50.0*(length(p-vec2(-0.8,0.0))) - 50.0*TimeVar)\n                     + 0.3*sin(50.0*(length(p-vec2( 0.8,0.0))) - 50.0*TimeVar);\n            };\n        };\n\n        // Add anamorphic streak because at this stage we're faking everything\n        // Morpheus (smug) : \"You think that's air, you're breathing in here ?\"\n        col += 0.5*smoothstep(0.1,0.0,abs(p.y) - 0.025)*smoothstep(8.5,0.0,abs(p.x));\n     };\n\n     // Sometimes, the colors suddenly invert to simulate a failed \"phasing out\"\n     // attempt... i.e. the Gorgon is trying to escape by slipping through dimensions !\n     if( FIRE_PHAS )\n     {\n        col = 1.0-col;\n     }else{\n        // This is my last chance at color-keying... and I'm not gonna miss it !\n        col *= vec4(1.0,0.7,0.5,1.0); // BAAM ! Subtle, as always. :)\n     };\n\n     // Reload the correct base before we switch to text mode\n     p = last_p;\n\n     // Very special imaging mode called PINBALL MODE. IDK, don't ask, it just looks cool.\n     // and it could actually be a lowres, still experimental mode of the multispectral imager.\n     // To detect neutrinos in realtime, or something. (...making shit up is how I roll)\n     if( PINB_MODE )col -= smoothstep(0.0,0.8,length(150.0*p -floor(150.0*p) - vec2(0.5)) - 0.1);\n\n     // Screen Grid because good scientists quantify everything...\n     col += 0.1*smoothstep(0.025,0.0,abs(sin(30.0*p.y)));\n     col += 0.1*smoothstep(0.025,0.0,abs(sin(30.0*p.x)));\n\n     // Screen Text\n     vec4 ColorText = vec4(1.0,1.0,0.0,1.0);\n\n     // Lower Text / Technical Data\n     if(abs(p.x) < 0.51 && abs(p.y + 0.44) < 0.05) // clipping\n     {\n        col -= vec4(0.5);\n        col = mix(col,ColorText,traceLabels(1.75*p,0,61.0,vec2(0.0,1.78)));\n        col = mix(col,ColorText,traceLabels(1.75*p,1,51.0,vec2(0.0,1.70)));\n     };\n\n     // Upper Text / Time\n     if(abs(p.x - 0.34) < 0.15 && abs(p.y - 0.47) < 0.025) // clipping\n     {\n        col -= vec4(0.5);\n        col = mix(col,ColorText,traceLabels(1.75*p,2,16.0,vec2(0.6,0.15)));\n     };\n\n     // Gamma Ray Alert (usually when the Gorgon fires its beam)\n     if( FIRE_SYNC )\n     {\n        // Yellow Tape\n        col += vec4(1.0,1.0,0.0,1.0)*smoothstep(0.005,0.0,abs(p.y + 0.33) - 0.03);\n        // Calculating beestripes (this could be done soooo much more elegantly. But I just can't be bothered...)\n        p*=r2d( PI/4.0);\n        vec4 BeeStripes = vec4(1.0)*smoothstep(0.01,0.0,abs(sin(45.0*p.x + 10.0*TimeVar)) - 0.75);\n        p*=r2d(-PI/4.0);\n        // clipping beestripes to leave some space for the text\n        BeeStripes *= smoothstep(0.0,0.005,abs(p.x)-0.25);\n        // Text GAMMA RAY ALERT + beestripes\n        col = mix(col,vec4(0.0),smoothstep(0.005,0.0,abs(p.y + 0.33) - 0.025)*BeeStripes\n                               +traceLabels(p,3,17.0,vec2(0.0,1.3)));\n     };\n\n     // Mag Field Failure (The Gorgon's field is becoming too strong, Captain !)\n     if( MAGN_FAIL )\n     {\n        // Red Tape\n        col += vec4(1.0,0.0,0.0,1.0)*abs(cos(2.5*iTime))*smoothstep(0.01,0.0,abs(p.y - 0.33) - 0.03);\n        // Calculating beestripes (btw bees, being quite efficient, intelligent\n        // creatures, would probably disapprove this specific, lame implementation)\n        p*=r2d( PI/4.0);\n        vec4 BeeStripes = vec4(1.0)*smoothstep(0.01,0.0,abs(sin(45.0*p.x + 10.0*TimeVar)) - 0.75);\n        p*=r2d(-PI/4.0);\n        // clipping beestripes to leave some space for the text\n        BeeStripes *= smoothstep(0.0,0.005,abs(p.x)-0.29);\n        // Text MAG FIELD FAILURE + beestripes\n        col = mix(col,vec4(1.0,1.0,0.0,1.0),abs(cos(2.5*iTime))*smoothstep(0.005,0.0,abs(p.y - 0.33) - 0.025)*BeeStripes\n                               + traceLabels(p,4,19.0,vec2(0.0,0.64)));\n     };\n\n     // Emergency Supercontinuum Seal Blast. It somehow makes the Gorgon uncomfortable.\n     // IDK why. Go ask Agent 145 for more. I'm no magic specialist, just a regular scientist !\n     if( FIRE_SEAL )\n     {\n        col = mix(col,vec4(1.0,1.0,1.0,1.0)*abs(sin(50.0*abs(p.y+0.23) + 10.0*TimeVar         )),smoothstep(0.005,0.0,abs(p.y+0.23) - 0.025));\n        col = mix(col,vec4(0.0),traceLabels(p*0.99,5,35.0,vec2(0.002,1.196)));\n        col = mix(col,vec4(1.0,1.0,1.0,1.0)*abs(sin(50.0*abs(p.y+0.23) + 10.0*TimeVar + PI/2.0)),traceLabels(p*0.99,5,35.0,vec2(0.0,1.198)));\n     };\n\n     // \"I stood on the pale gray shores beyond time and space.\n     // In an awful light that was not light,\n     // in a silence that shrieked, I saw them.\"\n     // The Hounds Of Tindalos, by Frank Belknap Long\n     // \"And just behind them, there was a gorgon ! And a squirrel too, which has\n     // nothing to do with anything, but it was there, I saw it ! How strange is that ?!\"\n     // The Strange Squirrel At The End Of Everything, by msm01\n     fragColor = clamp(col,0.0,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI 3.14159\n\nfloat TimeVar;\nfloat TiltX;\nfloat AltiY;\nbool FIRE_JAWS = false;\nbool FIRE_SEAL = false;\nbool FIRE_SYNC = false;\nbool FIRE_PHAS = false;\nbool MAGN_FAIL = false;\nbool PINB_MODE = false;\n\n// Main Shaft - Hyperspectral Mode - B=9.71T(MAX) - P=0.000100mB\nint Data01[61]    = int[] ( 77, 97, 105, 110, 32, 83, 104, 97, 102, 116, 32, 45, 32, 72, 121, 112, 101, 114, 115, 112, 101, 99, 116, 114, 97, 108, 32, 77, 111, 100, 101, 32, 45, 32, 66, 61, 57, 46, 55, 49, 84, 40, 77, 65, 88, 41, 32, 45, 32, 80, 61, 48, 46, 48, 48, 48, 49, 48, 48, 109, 66 );\n// CERN Antiproton Decelerator - Advanced Penning Trap\nint Data02[51]    = int[] ( 67, 69, 82, 78, 32, 65, 110, 116, 105, 112, 114, 111, 116, 111, 110, 32, 68, 101, 99, 101, 108, 101, 114, 97, 116, 111, 114, 32, 45, 32, 65, 100, 118, 97, 110, 99, 101, 100, 32, 80, 101, 110, 110, 105, 110, 103, 32, 84, 114, 97, 112 );\n// 31/10/2024 23:59\nint Data03[16]    = int[] ( 51, 49, 47, 49, 48, 47, 50, 48, 50, 52, 32, 50, 51, 58, 53, 57 );\n// GAMMA RAY ALERT !\nint Alert01[17] = int[] ( 71, 65, 77, 77, 65, 32, 82, 65, 89, 32, 65, 76, 69, 82, 84, 32, 33 );\n// MAG FIELD FAILURE !\nint Alert02[19] = int[] ( 77, 65, 71, 32, 70, 73, 69, 76, 68, 32, 70, 65, 73, 76, 85, 82, 69, 32, 33 );\n// EMERGENCY SUPERCONTINUUM SEAL BLAST\nint Alert03[35] = int[] ( 69, 77, 69, 82, 71, 69, 78, 67, 89, 32, 83, 85, 80, 69, 82, 67, 79, 78, 84, 73, 78, 85, 85, 77, 32, 83, 69, 65, 76, 32, 66, 76, 65, 83, 84 );\n// The magical seal text actually says : \"FOR ONLY 20 EUROS A MONTH THIS CAN STOP - SUBSCRIBE TO OUR SERVICE - LOVE, CERN MAGICAL SECURE TEAM - \"\n// with a ROT-63 to use greek letters instead of roman ones, hence maximum spookiness and obscurity ! :D\nint SealTxt[102] = int[] ( 70, 79, 82, 32, 79, 78, 76, 89, 32, 50, 48, 32, 69, 85, 82, 79, 83, 32, 65, 32, 77, 79, 78, 84, 72, 32, 84, 72, 73, 83, 32, 67, 65, 78, 32, 83, 84, 79, 80, 32, 45, 32, 83, 85, 66, 83, 67, 82, 73, 66, 69, 32, 84, 79, 32, 79, 85, 82, 32, 83, 69, 82, 86, 73, 67, 69, 32, 45, 32, 76, 79, 86, 69, 44, 32, 67, 69, 82, 78, 32, 77, 65, 71, 73, 67, 65, 76, 32, 83, 69, 67, 85, 82, 69, 32, 84, 69, 65, 77, 32, 45, 32);\n\n// The Usual Tools ;)\nmat2 r2d(float a){float c=cos(a), s=sin(a); return mat2(c,s,-s,c);}\nfloat noise(vec2 st){return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.5453123);}\nfloat TriangleWave(float p){ return abs(mod(p,2.0) - 1.0 );}\n\n// This is actually not fbm at all, just smoothed single-octave 1D noise.\nfloat fbm(in vec2 v_p)\n{\n      float pvpx = 2.0*v_p.x;\n      vec2 V1 = vec2(0.5*floor(pvpx      ));\n      vec2 V2 = vec2(0.5*floor(pvpx + 1.0));\n      return mix(noise(V1),noise(V2),smoothstep(0.0,1.0,fract(pvpx)));\n}\n\n// This belongs to Iq...\nfloat sdStar5(in vec2 p, in float r, in float rf)\n{\n    const vec2 k1 = vec2(0.809016994375, -0.587785252292);\n    const vec2 k2 = vec2(-k1.x,k1.y);\n    p.x = abs(p.x);\n    p -= 2.0*max(dot(k1,p),0.0)*k1;\n    p -= 2.0*max(dot(k2,p),0.0)*k2;\n    p.x = abs(p.x);\n    p.y -= r;\n    vec2 ba = rf*vec2(-k1.y,k1.x) - vec2(0,1);\n    float h = clamp( dot(p,ba)/dot(ba,ba), 0.0, r );\n    return length(p-ba*h) * sign(p.y*ba.x-p.x*ba.y);\n}\n\n// Still searching for the unknown Shadertoyer that wrote this :\nfloat metaDiamond(vec2 p, vec2 pixel, float r)\n{\n      vec2 d = abs(p-pixel);\n      return 1.0*r / (d.x + d.y);\n}\n\n// ------------------> 1st Scifi Story :\n\n// /////////////////////////////////////////////////////////////////////////////\n// Status : ULTRASECRET\n// /////////////////////////////////////////////////////////////////////////////\n// Title : ACCIDENTAL TINDALOS GORGON CAPTURE IN LHC'S ADVANCED PENNING TRAP.\n// /////////////////////////////////////////////////////////////////////////////\n// Date : 31/10/2024\n// /////////////////////////////////////////////////////////////////////////////\n// Author : Agent 147, at CERN-LHC\n// /////////////////////////////////////////////////////////////////////////////\n// Report : Antimatter mass-production and storage is now routine at the LHC. So\n// the setup of the new Advanced Penning Trap at the Antiproton Decelerator Ring\n// should have been a matter of hours. A day at most.\n// During the first activation though, we noticed very abnormal readings in both\n// magnetic and electric fields, as well as some loud, disturbing sounds coming\n// from the main shaft of the new device. Using the inner multispectral imager,\n// we quickly discovered that a kind of creature had been caught in the middle\n// section (i.e. where the antiprotons should nominally come at rest).\n// I immediately assumed authority, locked down the facility, secured the area\n// under protocol 59, and requested support. Within less than two hours we had\n// total control over the site.\n// For the last week, we've been investigating the physical nature and origin of\n// said \"creature\" which at the moment is still confined within the main chamber\n// of the trap.\n// In this paper, we describe and discuss the properties of this organism which\n// seems alive in every sense of the word, and also extremely agitated. Its very\n// existence defies many well-established laws of Nature, such as gravity (it is\n// floating in near vacuum !) or thermodynamics (it generates incredible amounts\n// of light, heat and radiations for such a limited size).\n// We don't know much yet, but the first results presented here show that it is\n// composed entirely of small micrometric magnetic domains rotating, somehow, at\n// relativistic speeds (!). Those fields are weaved in complicated patterns (see\n// ANNEXE 2). Stranger : the creature seems able to \"phase out\" of our sight for\n// a few milliseconds at a time. We first thought it was basic optical stealth,\n// although now we understand that it's a deeper process, possibly a topological\n// transform, one of those \"space-metric hacks\" we've already seen in few other\n// cases. Its metabolism, or energy source, is genuinely phenomenal. We have\n// estimated its daily output, and the numbers are quite frightening (ANNEXE 4),\n// typically in the multi-megawatt range. Probably more. This has put serious\n// strain on the cryostats of the trap's superconducting coils, but the initial\n// security margins were extended using spare modular cooling units as required.\n// We still have no idea what keeps it inside the Penning Trap. We suppose it is\n// somehow related to the peculiar, extremely advanced magnetic field modulation\n// in this new model, creating a puzzling omnidirectional threadmill cell with a\n// lot of echo. B strength is currently at 9.7 Teslas (9.7T). We had to increase\n// it substantially from the nominal value (5T) since this lifeform can generate\n// its own, intricate field with sharp, sudden peaks in the 5 to 8T range... The\n// creature exhibits very aggressive behaviour, can generate force-field jaws on\n// -the-fly at short range and a crude but relatively efficient beam of reddish\n// synchrotron light ! We suppose this beam is extremely powerful but for some\n// reason, its interactions with the metal enclosure have been limited. It could\n// change, though. And even so, at the current rate of abrasion (which is NOT\n// insignificant) we estimate that the metal will fail in about 30 days. So we\n// still have a few weeks to find a new place for our little radioactive friend.\n// Though its size, within the trap, stays around 30-50 centimeters, it seems to\n// be able to scale up pretty fast. It already has, in fact, tested this attack\n// several times in the last few days in order to burst out of its cage! The 9.7\n// Teslas field has kept it confined... So far.\n// In conclusion, we mention multiple options to store the thing inside a larger\n// and more sturdy container. We also demand to resume normal activities at the\n// Antiproton Decelerator ASAP, before drawing too much attention. Finally, we\n// require additional funds and human resources to deal with the emotional and\n// psychological damage. This creature currently creates high-levels of stress\n// and despair in a radius of 10 meters even after being sound-proofed ! Impacts\n// of the beam on the metal were causing all sorts of sinister noises, and it\n// got to the point where some of us reported ghastly auditory hallucinations...\n// Our main engineer had to endure horrendous, crushing visions repeatedly when\n// making necessary upgrades or modifications to the setup. His cerebral stroke,\n// three days ago, has left our team in shock and severely worried. We must keep\n// up with the investigations, but we also have a duty to elaborate new methods\n// to protect us from the foul influence of such lifeforms. This creature is an\n// opportunity, but also a serious danger. If we can't control it, then we need\n// to know HOW TO KILL IT. The supercontinuum electrolaser seal has proved, in\n// this specific matter, to be an effective (albeit temporary) countermeasure.\n// I must admit I was sceptical when Agent 145 deployed the steering coils and\n// the axicons, but I stand corrected. He's still totally unable to explain HOW\n// and WHY it works, though. Further research is therefore needed.\n//\n// P.S. The Spengler Beam, for God's sake ! I've been asking for the schematics\n// FOR YEARS ! You know I won't back up this time, Roger. We have a true Class-5\n// Full-Roaming Vapor (C5-FRV) in our grasp for the first time, so I want the\n// beam NOW, or I QUIT !\n//\n// /////////////////////////////////////////////////////////////////////////////\n\n\n// ------------------> 2nd \"Bonus\" Scifi Story :\n\n// Same universe, a bit later :\n\n// Room full of higher politicians and military officers. A scientist is giving\n// a lecture :\n// \"This is a Tindalos Gorgon, distant relative of the Hound, and direct cousin\n// of the Langoliers that we documented more than 30 years ago. It can move in\n// any direction of space, access the most difficult places. Luckily, it's very\n// stupid, a rabid animal, really. But the A.T. field it generates is off-the-\n// charts ! We believe these are merely drones from a bigger, vastly more\n// intelligent entity, and that this dread they produce around them is, in fact,\n// a local, scaled-down projection of this greater, malevolent mind.\n// —So... a kind of spooky wifi ? Remote-control based on pure, abject terror ?\n// —...and rage. But yes, that is essentially correct. ... Well, that's what we\n// have infered from the LHC incident, Sir.\n// —Any idea what bigger entity we're dealing with, here ?\n// A cold, uneasy silence falls onto the room. Everybody remembers the horrific\n// Nyarlathotep meltdown of 2013. Global extinction event avoided at the very\n// last second by an unknown hero that had to seal the unholy Gates of Yog with\n// his own blood. Protocols were in place, now, sure, but we weren't much more\n// advanced than back then, on a strictly technical level.\n// —We have... clues. Nothing certain. But the energy signature is very unusual.\n// And it's slowly rising.\n// —What do you mean ?\n// —The consensus within our group is... *he hesitates, lets out a deep sigh,\n// wipes sweaty, trembling hands on his shirt, then in a breath :\n// \"We think it's coming for us !\"","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[],"code":"vec2 mainSound( int samp, float time )\n{\n     TimeVar = 0.75*time;\n     FIRE_SYNC = (fbm(vec2(    TimeVar)) < 0.15)?true:false;\n     MAGN_FAIL = (fbm(vec2(0.1*TimeVar)) > 0.60)?true:false;\n     FIRE_SEAL = (fbm(vec2(0.1*TimeVar)) > 0.85)?true:false;\n\n     vec2 DaSoundStream = vec2(0.0,0.0);\n\n     if(time < 60.0) // No more than 1 min otherwise it gets really, really annoying !\n     {\n        // Basic Alarm\n        DaSoundStream += 0.01*sin(floor( 220.0*sin((2.5*time))));\n\n        if( MAGN_FAIL ) DaSoundStream += vec2(0.150*floor(sin(110.0*sin(( 2.5*time)))))\n                                        +vec2(0.500*sin(fract(220.0*sin(( 2.5*time))))\n                                             +0.050*sin(fract(110.0*sin(( 5.0*time)))));\n        if(FIRE_SYNC)\n        {\n           DaSoundStream *= clamp(sin(5.0*time),0.1,1.0);\n           DaSoundStream += vec2( 0.20*sin(110.0*floor(110.0*sin(150.0*time) + 0.90*sin(220.0*sin( 1.25*time)))));\n        };\n\n        if(FIRE_SEAL)DaSoundStream += 0.90*sin(fract(880.0*sin(( 50.0*time))));\n     };\n     \n     return DaSoundStream;\n}","name":"Sound","description":"","type":"sound"}]}