{"ver":"0.1","info":{"id":"7tl3Dj","date":"1622905300","viewed":53,"name":"FBM plasma","username":"gombie","description":"Just playing with plasma and FBM","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["plasma"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//FBM + plasma\n//FBM source:\n//https://thebookofshaders.com/13/\n\nfloat random (in vec2 _st) {\n    return fract(sin(dot(_st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 _st) {\n    vec2 i = floor(_st);\n    vec2 f = fract(_st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n#define NUM_OCTAVES 5\n\nfloat fbm ( in vec2 _st) {\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(20.0);\n    // Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5),\n                    -sin(0.5), cos(0.50));\n    for (int i = 0; i < NUM_OCTAVES; ++i) {\n        v += a * noise(_st);\n        _st = rot * _st * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n    const float M_PI = 3.14159265358979323846264338327950288;\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float cx=uv.x+0.5*sin(iTime/5.0);\n    float cy=uv.y+0.5*cos(iTime/3.0);\n    float v=sin(sqrt(100.0*(cx*cx+cy*cy)+1.0)+iTime);\n    v+=sin(10.0*(uv.x*sin(iTime/2.0))+uv.x*cos(iTime/3.0)+iTime);\n    v+=sin(uv.x*10.0+iTime);\n\n    vec3 color = vec3(0.0);\n\n    vec2 q = vec2(0.);\n    q.x = fbm( uv + 0.00*iTime);\n    q.y = fbm( uv + vec2(1.0));\n\n    vec2 r = vec2(0.);\n    r.x = fbm( uv + 1.0*q + vec2(1.7,9.2)+ 0.15*iTime );\n    r.y = fbm( uv + 1.0*q + vec2(8.3,2.8)+ 0.126*iTime);\n    \n    \n\n    float f = fbm(uv+r);\n\n    color = mix(vec3(0.8,0.619608,0.666667),\n                vec3(0.666667,0.666667,0.498039),\n                clamp((f*f)*4.0,0.0,1.0));\n\n    color = mix(color,\n                vec3(0,0,0.164706),\n                clamp(length(q),0.0,1.0));\n\n    color = mix(color,\n                vec3(0.666667,1,1),\n                clamp(length(r.x),0.0,1.0));\n    \n    \n    \n    float rr=(f*f*f+.6*f*f+.5*f)*color.r+sin(v*M_PI);\n    float g=(f*f*f+.6*f*f+.5*f)*color.g-cos(v*M_PI)*.1;\n    float b=sin(v*M_PI);\n    fragColor = vec4(rr,g,b,1.);\n}","name":"Image","description":"","type":"image"}]}