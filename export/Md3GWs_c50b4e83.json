{"ver":"0.1","info":{"id":"Md3GWs","date":"1452717150","viewed":430,"name":"armadas (CA)","username":"stb","description":"A 3-state cellular automaton found with www.shadertoy.com/view/Xsc3DX\nKeys:\nR: fill field with noise \nTAB: toggle magnifier (position w/ mouse)\nENTER: pause/unpause sim\nSPACE: pause + step to next frame","likes":9,"published":1,"flags":48,"usePreview":0,"tags":["2d","automata","cellular","ca","totalistic","automaton"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"const float magAmt = 3.0;  // magnifier zoom level\nconst float magRad = 64.0; // magnifier radius, in pixels\nconst float magOpa = 0.33; // magnifier edge opacity\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 res  = iResolution.xy;\n    vec2 uv   = fragCoord / res;\n    vec2 p    = fragCoord / res.y;\n    \n    float f = texture(iChannel0, uv).r;\n    float m = texture(iChannel0, uv/magAmt-iMouse.xy/res*(1.-magAmt)/magAmt).r;\n    float c = length(p-iMouse.xy/res.y);\n    \n    if(texture(iChannel3, vec2(9.5/256., 2./3.)).r!=0. && c<magRad/res.y)\n    \tf = m + magOpa * pow(c*res.y/magRad, 8.);\n\n    // when ASCII tables fail...\n    //f = texture(iChannel3, vec2(fragCoord.x/256., uv.y)).r;\n    \n    float numStates = texture(iChannel0, vec2(0.)).b;\n\n\tfragColor = vec4(vec3(1.7, 1.4, 1.)*vec3(f)/(numStates-1.), 0.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\n\ttotalistic cellular automata (Moore neighborhood)\n\tfor info on these systems and to find new rules, see www.shadertoy.com/view/Xsc3DX\n*/\n\nconst int   NumStates = 3;\nconst float NoisePow  = 24.0;\n\nfloat ruleVal;\nivec2 rulePos = ivec2(0, 0);\nvoid setRuleVal(vec2 p, float v) {\n    if(ivec2(floor(p))==rulePos) ruleVal = v;\n    rulePos.x++;\n    if(rulePos.x >= 1+8*(NumStates-1)) {\n       rulePos.x = 0;\n       rulePos.y++;\n    }\n}\n\n#define _0 setRuleVal(fragCoord, 0.);\n#define _1 setRuleVal(fragCoord, 1.);\n#define _2 setRuleVal(fragCoord, 2.);\n\n// CA rule is defined here (style idea from www.shadertoy.com/view/MlfGz8)\n// n columns = 1 + 8 * (NumStates-1)\n// n rows    = NumStates\nvoid setRule(vec2 fragCoord) {\n    _0;_2;_0;_2;_0;_2;_0;_2;_0;_2;_0;_0;_0;_0;_0;_0;_0;\n    _1;_2;_2;_0;_0;_0;_0;_0;_0;_0;_0;_0;_0;_0;_0;_0;_0;\n    _1;_1;_1;_1;_0;_0;_0;_0;_2;_0;_0;_0;_0;_0;_0;_0;_0;\n}\n\nconst float KEY_R = 82.5 / 256.;\nconst float KEY_ENTER = 13.5 / 256.;\nconst float KEY_SPACE = 32.5 / 256.;\n\nbool isKeyPressed(float KEY_) { return (texture(iChannel3, vec2(KEY_, .333)).r>0.); }\n\n// hash without sine\n// https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 p) {\n    vec3 MOD3 = vec3(443.8975, 397.2973, 491.1871);\n    vec3 p3 = fract(vec3(p.xyx) * MOD3);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 res  = iResolution.xy;\n    vec2 uv   = fragCoord /  res;\n    float cellState = texture(iChannel0, uv).r;\n    float numStates = float(NumStates);\n    float paused = texture(iChannel0, vec2(1.5/res.x, 0.)).b;\n    float stepping = 0.;\n    \n    // pause/unpause\n    if(isKeyPressed(KEY_ENTER))\n        paused = float(!bool(paused));\n    \n    // pause & step to next frame\n    if(isKeyPressed(KEY_SPACE)) {\n        paused = 1.;\n        stepping = 1.;\n    }\n    \n    // update CA sim\n    float total = 0.;\n    if(paused==0. || stepping==1.) {\n        // add up neighboring cells\n        for(float y=-1.; y<=1.; y++)\n            for(float x=-1.; x<=1.; x++)\n                if(!(x==0.&&y==0.))\n                    total += texture(iChannel0, fract(uv-vec2(x, y)/res)).r;\n\n        // determine new cell state from CA rule\n        if(total<1.+8.*(numStates-1.))\n            cellState = texture(iChannel0, (.5+vec2(total, cellState))/res).g;\n\t}\n            \n\t// set or get ruleVal\n    if(iFrame==0)\n        setRule(fragCoord);\n    else\n        ruleVal = texture(iChannel0, uv).g;\n    \n    // noisify\n    if(iFrame==0 || isKeyPressed(KEY_R))\n\t\tcellState = numStates * pow(hash12(mod(uv+iTime/100., 100.)), NoisePow);\n    \n    float simVars;\n    if(floor(fragCoord)==vec2(0.))\n        // save numStates\n    \tsimVars = numStates;\n    else\n        if(floor(fragCoord)==vec2(1., 0.))\n            // save pause state\n        \tsimVars = paused;\n\t\n\tfragColor = vec4(cellState, ruleVal, simVars, 0.);\n}","name":"Buf A","description":"","type":"buffer"}]}