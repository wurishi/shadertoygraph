{"ver":"0.1","info":{"id":"fdXXDX","date":"1619379690","viewed":83,"name":"task2_witch_very_strange_ball","username":"psa2001","description":"cg2\nbase = 20 \nМягкие тени (+2-3)\nАнти-алиасинг (+2)\nОкружение в виде текстурированного куб-мапа (+2)\nИмитация микро-рельефа (+2)\nСпектральные эффекты(+2)\nAmbient Occlusion (+2)\nPenalty -6\ntotal: 25\n\nСцена из майнкрафта: алмазная кирка и алмазный меч","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["minecraft"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst float EPSILON = 1e-6;\nconst vec3 CAMERA_POS = vec3(3., 2.6, -8.);\n\nconst vec3 LIGHT1_POS = vec3(-2., 0., 4.);\nconst float LIGHT1_RADIUS = 0.5;\nconst vec3 LIGHT1_COLOR = vec3(0.9, 0.45, 0.);\n\nconst vec3 LIGHT2_POS = vec3(1.5, -0.75, 1.);\nconst float LIGHT2_RADIUS = 0.15;\nconst vec3 LIGHT2_COLOR = vec3(1., 1., 1.);\nvec3 randDir;\n\n\n// (CAMERA_POS + t * viewVec).y == -1\n// t = (-1 - CAMERA_POS.y) / viewVec.y;\n//http://masters.donntu.org/2015/frt/yablokov/library/transl.htm\nfloat traceTriangle(vec3 pos, vec3 dir, vec3 v[3], out vec3 normal){\n    vec3 E1 = v[1] - v[0];\n    vec3 E2 = v[2] - v[0];\n    vec3 T = pos - v[0];\n    float isParallel = dot(dir, cross(E1, E2));\n    normal = normalize(cross(E1, E2));\n    if (abs(isParallel) < EPSILON){\n        return INF;\n    }\n    float t = dot(T, cross(E1, E2))/(-isParallel);\n    if (t < 0.){\n        return INF;\n    }\n    \n    vec3 worldPos = pos + t * dir;\n    // Square == Sq1 + Sq2 + Sq3\n    float Square = length(cross(E1, E2));\n    float Sq1 = length(cross(-worldPos + v[0], E2));\n    float Sq2 = length(cross(-worldPos + v[0], E1));\n    float Sq3 = length(cross(worldPos - v[1], worldPos - v[2]));\n    if(abs(Square - Sq1 - Sq2 - Sq3) > EPSILON){\n        return INF;\n    }\n \n    \n    return t;\n}\n\nconst int allNumpoints = 20;\nvec3 POINTS[allNumpoints] = vec3[allNumpoints](\n    vec3(-1, 1, 1),//A 0 \n    vec3(0, 0.59, 1.7),//B 1\n    vec3(0, -0.59, 1.7),//C 2\n    vec3(-1, -1., 1),//D 3\n    vec3(-1.7, 0, 0.59),//E 4\n    \n    vec3(1., 1, 1.),//F 5\n    vec3(1.7, 0, 0.59),//G 6\n    vec3(1., -1., 1.),//H 7\n    vec3(0.59, 1.7, 0.),//I 8\n    vec3(-0.59, 1.7, 0.),//J 9\n    \n    vec3(-1., 1., -1.),//K 10 \n    vec3(-1.7, 0., -0.59),//L 11\n    vec3(-1., -1., -1.),//M 12\n    vec3(-0.59, -1.7, 0.),//N 13\n    vec3(0.59, -1.7, 0.),//O 14\n    \n    vec3(1., 1., -1.),//P 15\n    vec3(0., 0.59, -1.7),//Q 16\n    vec3(1.7, 0., -0.59),//R 17\n    vec3(0., -0.59, -1.7),//S 19\n    vec3(1., -1., -1.)//T 19\n);\n\nconst int numTriangles = 12 * 3 * 3;\nint curNums[numTriangles] = int[numTriangles](\n    \n    //ABCDE\n    \n    0, 1, 2,//ABC\n    0, 3, 4,//AED\n    0, 2, 3,//ACD\n    //CBFGH\n    2, 1, 7,//CBH\n    1, 5, 7,//BHF\n    5, 6, 7 ,//HFG\n    //ABFIJ\n    0, 1, 5,\n    0, 5, 9,\n    5, 8, 9,\n    //CDNOH\n    2, 3, 7,\n    3, 13, 7,\n    7, 13, 14,\n    //EDNML\n    4, 3, 11,\n    3, 11, 13,\n    11, 13, 12,\n    \n    //AELKJ\n    0, 4, 11,\n    0, 9, 11,\n    9, 11, 10,\n    \n    //PRTSQ\n    15, 17, 19, \n    19, 18, 16,\n    19, 16, 15,\n    \n    //RPIFG\n    17, 15, 8,\n    8, 5, 6,\n    8, 6, 17,\n    \n    //IJKQP\n    8, 9, 10,\n    10, 16, 15,\n    8, 15, 10,\n    \n    //SQKLM\n    18, 16, 10,\n    10, 11, 12,\n    10, 12, 18,\n    \n    //STONM\n    18, 19, 14,\n    14, 13, 12,\n    12, 18, 14,\n    \n    //TRGHO\n    19, 17, 6,\n    6, 7, 14,\n    6, 14, 19\n);\n\nfloat traceDodecahedron(vec3 pos, vec3 dir, out vec3 normal){\n    float curDir = INF;\n    vec3 curNorm;\n    for(int i = 0; i < 36; ++i){\n        vec3 curPoints[3];\n        for(int j = 0; j < 3; ++j){\n            curPoints[j] = POINTS[curNums[j + i * 3]];\n            curPoints[j][1] += 0.7;\n        }\n        float curT = traceTriangle(pos, dir, curPoints, curNorm);\n        if (curT < curDir){\n            normal = curNorm;\n            curDir = curT;\n        }\n    }\n    return curDir;\n} \n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 1.) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 1.;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 sphNorm;\n    float sphT = traceSphere(pos, dir, 1.0, sphNorm);\n    if (sphT < dist)\n        return true;\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 20.0f / distSq1;\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 10.0f / distSq2;\n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + texture(iChannel1, normal).rgb * 0.1\n    );\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame){\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\nconst int allNumpointsForCube = 8;\nvec3 pointsCube[allNumpointsForCube] = vec3[allNumpointsForCube](\n    vec3(0., 0., 0.),//0\n    vec3(1., 0., 0.),//1 \n    vec3(0., 0., 1.),//2 \n    vec3(1., 0., 1.),//3\n    \n    vec3(0., 1., 0.),//4\n    vec3(1., 1., 0.),//5 \n    vec3(0., 1., 1.),//6 \n    vec3(1., 1., 1.)//7 \n);\n\nconst int CubeRules = 2 * 6 * 3; \nint order_for_cube[CubeRules] = int[CubeRules](\n    0, 1, 2,\n    1, 2, 3,\n    \n    4, 6, 7,\n    4, 5, 7,\n    \n    0, 1, 6,\n    0, 4, 6,\n    \n    1, 3, 7,\n    1, 5, 7,\n    \n    0, 1, 5,\n    0, 4, 5,\n    \n    2, 3, 7,\n    2, 6, 7\n);\n\n\nfloat traceCube(vec3 pos, vec3 dir, float size, vec3 new_start, out vec3 normal){\n    float curDir = INF;\n    vec3 curNorm;\n    for(int i = 0; i < 12; ++i){\n        vec3 curPoints[3];\n        for(int j = 0; j < 3; ++j){\n            curPoints[j] = pointsCube[order_for_cube[j + i * 3]];\n            curPoints[j] += new_start;\n            curPoints[j] *= size;\n            \n        }\n        \n        float curT = traceTriangle(pos, dir, curPoints, curNorm);\n        if (curT < curDir){\n            normal = curNorm;\n            curDir = curT;\n        }\n    }\n    return curDir;\n}\n\nconst int numOfPoses = 16;\nvec3 startingPlacesForCubes[numOfPoses] = vec3[numOfPoses](\n    //diamond sword\n    vec3(-3.,0.,0.),\n    vec3(-3.,1.,0.),\n    vec3(-3.,2.,0.),\n    vec3(-3.,3.,0.),\n    vec3(-3.,4.,0.),\n    vec3(-2.,1.,0.),\n    vec3(-4.,1.,0.),\n    //diamond pickaxe\n    vec3(3.,0.,0.),\n    vec3(3.,1.,0.),\n    vec3(3.,2.,0.),\n    vec3(3.,3.,0.),\n    vec3(3.,4.,0.),\n    vec3(2.,4.,0.),\n    vec3(4.,4.,0.),\n    vec3(1.,3.,0.),\n    vec3(5.,3.,0.)\n);\n\nfloat minecraft(vec3 pos, vec3 dir, out vec3 normal){\n    float curT = INF;\n    vec3 new_start = vec3(0., 0., 0.);\n    float size = 0.15;\n    for(int i = 0; i < numOfPoses; ++i){\n        vec3 curNormal;\n        float t = traceCube(pos, dir, size, startingPlacesForCubes[i], curNormal);\n        if(t < curT){\n            normal = curNormal;\n            curT = t;\n        }\n    }\n    return curT;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5)) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    const float GLASS_N = 1.5;\n    const float AIR_N = 1.0;\n    float n1 = AIR_N;\n    float n2 = GLASS_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    const float DIAMOND_N = 2.5;\n    float DIAMOND_R = pow2(DIAMOND_N - GLASS_N) / pow2(DIAMOND_N + GLASS_N);\n    \n    vec3 colorMult = vec3(1, 1, 1);\n    \n    for (int i = 0; i < 10; ++i) {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        \n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb;\n            normal = planeNorm;\n        }\n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n        \n        \n        vec3 normDot;\n        float dotT = traceDodecahedron(curPos, curDir, normDot);\n        if (dotT < t) {\n            t = dotT;\n            normal = normDot;\n            if (randVals.x * 0.2 < GLASS_R) {\n                materialType = REFLECTION;\n                colorMult += vec3(0.1, 0.1, 0.1);\n            } else {\n                colorMult = vec3(0.25, 0.6, 0.4);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n        }\n        \n        vec3 mineCraftNorm;\n        float mineT = minecraft(curPos, curDir, mineCraftNorm);\n        if (mineT < t) {\n            t = mineT;\n            materialType = EMISSION;\n            color = vec3(0, 1., 1.);\n            normal = mineCraftNorm;\n        }\n        \n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n        \n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) {\n                fragColor.rgb = color * colorMult;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            } else if (materialType == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, n2);\n                curPos = worldPos + curDir * 1e-5;\n                n1 = nEnter;\n            }\n        } else {\n            fragColor.rgb = texture(iChannel1, curDir).rgb * colorMult;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}