{"ver":"0.1","info":{"id":"DlScWy","date":"1692205207","viewed":83,"name":"approximate iridescence","username":"sciecode","description":"approximate iridescence, thin-film interference\n\nspectral accurate: https://www.shadertoy.com/view/DtlfRX","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["interference","iridescence"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define medium_n 1.\n#define film_n 1.28\n\n// Common constants\nconst float PI = 3.14159265358979323846;\n\n// XYZ to CIE 1931 RGB color space (using neutral E illuminant)\nconst mat3 XYZ_TO_RGB = mat3(2.3706743, -0.5138850, 0.0052982, -0.9000405, 1.4253036, -0.0146949, -0.4706338, 0.0885814, 1.0093968);\n\n// Square functions for cleaner code\nfloat sqr(float x) {return x*x;}\nvec2 sqr(vec2 x) {return x*x;}\n\n// Depolarization functions for natural light\nfloat depol (vec2 polV){ return 0.5 * (polV.x + polV.y); }\nvec3 depolColor (vec3 colS, vec3 colP){ return 0.5 * (colS + colP); }\n\n// Fresnel equations for dielectric/dielectric interfaces.\nvoid fresnelDielectric(in float ct1, in float n1, in float n2,\n                       out vec2 R, out vec2 phi) {\n\n  float st1  = (1. - ct1*ct1); // Sinus theta1 'squared'\n  float nr  = n1/n2;\n\n  if(sqr(nr)*st1 > 1.) { // Total reflection\n\n    vec2 R = vec2(1, 1);\n    phi = 2.0 * atan(vec2(- sqr(nr) *  sqrt(st1 - 1.0/sqr(nr)) / ct1,\n                        - sqrt(st1 - 1.0/sqr(nr)) / ct1));\n  } else {   // Transmission & Reflection\n\n    float ct2 = sqrt(1. - sqr(nr) * st1);\n    vec2 r = vec2((n2*ct1 - n1*ct2) / (n2*ct1 + n1*ct2),\n        \t     (n1*ct1 - n2*ct2) / (n1*ct1 + n2*ct2));\n    phi.x = (r.x < 0.0) ? PI : 0.0;\n    phi.y = (r.y < 0.0) ? PI : 0.0;\n    R = sqr(r);\n  }\n}\n\n// Evaluation XYZ sensitivity curves in Fourier space\nvec3 evalSensitivity(float opd, float shift) {\n\n\t// Use Gaussian fits, given by 3 parameters: val, pos and var\n\tfloat phase = 2.*PI * opd * 1.0e-6;\n\tvec3 val = vec3(5.4856e-13, 4.4201e-13, 5.2481e-13);\n\tvec3 pos = vec3(1.6810e+06, 1.7953e+06, 2.2084e+06);\n\tvec3 var = vec3(4.3278e+09, 9.3046e+09, 6.6121e+09);\n\tvec3 xyz = val * sqrt(2.*PI * var) * cos(pos * phase + shift) * exp(- var * phase*phase);\n\txyz.x   += 9.7470e-14 * sqrt(2.*PI * 4.5282e+09) * cos(2.2399e+06 * phase + shift) * exp(- 4.5282e+09 * phase*phase);\n\treturn xyz / 1.0685e-7;\n}\n\nvec3 iridescence( float cos1, float thickness ) {\n\n\tfloat cosTheta1 = cos1;\n\tfloat cosTheta2 = sqrt(1.0 - sqr(1.0/film_n)*(1.-sqr(cosTheta1)) );\n\n\t// First interface\n\tvec2 R12, phi12;\n\tfresnelDielectric(cosTheta1, medium_n, film_n, R12, phi12);\n\tvec2 R21  = R12;\n\tvec2 T121 = vec2(1.0) - R12;\n\tvec2 phi21 = vec2(PI) - phi12;\n\n\t// Second interface\n\tvec2 R23, phi23;\n\tfresnelDielectric(cosTheta2, film_n, medium_n, R23, phi23);\n\n\t// Phase shift\n\tfloat OPD = thickness/400.*cosTheta2;\n\tvec2 phi2 = phi21 + phi23;\n\n\t// Compound terms\n\tvec3 I = vec3(0);\n\tvec2 R123 = R12*R23;\n\tvec2 r123 = sqrt(R123);\n\tvec2 Rs   = sqr(T121)*R23 / (1.-R123);\n\n\t// Reflectance term for m=0 (DC term amplitude)\n\tvec2 C0 = R12 + Rs;\n\tvec3 S0 = evalSensitivity(0.0, 0.0);\n\tI += depol(C0) * S0;\n\n\t// Reflectance term for m>0 (pairs of diracs)\n\tvec2 Cm = Rs - T121;\n\tfor (float m=1.; m<=3.; ++m){\n\t\tCm *= r123;\n\t\tvec3 SmS = 2.0 * evalSensitivity(m*OPD, m*phi2.x);\n\t\tvec3 SmP = 2.0 * evalSensitivity(m*OPD, m*phi2.y);\n\t\tI += depolColor(Cm.x*SmS, Cm.y*SmP);\n\t}\n\n\t// Convert back to RGB reflectance\n\treturn clamp(XYZ_TO_RGB * I, vec3(0.0), vec3(1.0)); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float s = 1.-uv.y;\n    vec3 col = iridescence(cos(PI/2.*uv.x), 0. + 2000.*pow(s,1.1));\n\n    fragColor = vec4(pow(col,vec3(1./2.2)),1.0);\n}","name":"Image","description":"","type":"image"}]}