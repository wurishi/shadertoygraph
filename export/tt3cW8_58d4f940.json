{"ver":"0.1","info":{"id":"tt3cW8","date":"1609252462","viewed":117,"name":"Square dance","username":"arifr123","description":"Inspierd by the youtube video:\nhttps://youtu.be/Yy7Q8IWNfHM\nby Mathologer.","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["simulation","mathologer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 UP_COLOR = vec3(0., 0., 1.);\nconst vec3 DOUN_COLOR = vec3(0., 1., 0.);\nconst vec3 RIGHT_COLOR = vec3(1., 0., 0.);\nconst vec3 LEFT_COLOR = vec3(1., 1., 0.);\n\n// GRID 1 to add grid lines.\n#define GRID 0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = float(iFrame) / float(frames);\n    float tm = mod(t, 1.);\n    float tf = floor(t);\n\n    int n = 1 + int(tf);\n    float yScale = 0.9 * ((1. - tm) + tm * (float(2*n))/(float(2*n) + 2.));\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / yScale / iResolution.y - (vec2(iResolution.x / iResolution.y, 1.) / yScale - 1.) / 2.;\n    \n    \n    vec2 uvm = mod(float(2*n) * uv, 1.);\n    ivec2 uvf = ivec2(floor(float(2*n) * uv)) - n;\n    \n    float grid = 0.;\n    if(isDefined(uvf, n))\n        grid = (1. - (smoothstep(0.1, 0., uvm.x) + smoothstep(0.9, 1., uvm.x))) * (1. - (smoothstep(0.1, 0., uvm.y) + (smoothstep(0.9, 1., uvm.y))));\n    \n    \n    vec3 blocks = vec3(1);\n    \n    ivec2 center = ivec2(iResolution.xy) / 2;\n    \n    ivec2 v = getV(center + uvf);\n    \n    if(v == UP)\n        blocks = UP_COLOR;\n    else if(v == DOUN)\n        blocks = DOUN_COLOR;\n    else if(v == RIGHT)\n        blocks = RIGHT_COLOR;\n    else if(v == LEFT)\n        blocks = LEFT_COLOR;\n    else\n        blocks = vec3(0);\n    \n    \n    #if GRID == 1\n    vec3 col = grid * blocks;\n    #else\n    vec3 col = blocks;\n    #endif\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"bool isEmpty(ivec2 c, ivec2 center, int n)\n{\n    return getV(c) == ivec2(0) && isDefined(c - center, n);\n}\n\nivec2 perp(ivec2 v)  // perp(UP) = RIGHT\n{\n    return ivec2(v.y, -v.x);\n}\n\nbool isCorner(ivec2 c, ivec2 up, ivec2 center, int n)\n{\n    return !isEmpty(c + up, center, n) && !isEmpty(c + perp(up), center, n) && isEmpty(c, center, n);\n}\n\nbool isRightUp(ivec2 c, ivec2 up, ivec2 center, int n)\n{\n    ivec2 right = perp(up);\n    \n    return isCorner(c, up, center, n)\n        || isCorner(c - right, -right, center, n)\n        || isCorner(c - right - up, -up, center, n)\n        || isCorner(c - up, right, center, n);\n}\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\nbool upDounOrRightLeft(ivec2 sqeareCenter, int n)\n{\n    //vec2 pos = (vec2(sqeareCenter) * .152 + float(n) * 1500. + 50.0);\n    //float a = hash12(pos);\n    \n    return hash13(vec3(0.2 * vec2(sqeareCenter), n) + 50.) > 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 center = ivec2(iResolution.xy) / 2;\n\n    int n = 1 + iFrame / frames;\n    \n    ivec2 coord = ivec2(fragCoord);\n    \n    \n    if(iFrame % frames == 0)  // Move blocks\n    {\n        ivec2 thisV = getV(coord);\n    \n        ivec2 v = ivec2(0);\n        \n        if(getV(coord + UP) == DOUN && thisV != UP)\n        {\n            v = DOUN;\n        }\n        else if(getV(coord + DOUN) == UP && thisV != DOUN)\n        {\n            v = UP;\n        }\n        else if(getV(coord + RIGHT) == LEFT && thisV != RIGHT)\n        {\n            v = LEFT;\n        }\n        else if(getV(coord + LEFT) == RIGHT && thisV != LEFT)\n        {\n            v = RIGHT;\n        }\n        \n        if(n == 1)\n            fragColor = vec4(0, 0, 0, 1);\n        else\n            fragColor = vec4(v, 0, 1);\n    }\n    else if(iFrame % frames != 0 && isEmpty(coord, center, n))  // Fill empty\n    {\n        ivec2 v = ivec2(0);\n        \n        // RIGHT UP\n        if(isRightUp(coord, UP, center, n))\n        {\n            ivec2 sqeareCenter = coord;\n\n            if(upDounOrRightLeft(sqeareCenter, n))\n            {\n                v = UP;\n            }\n            else\n            {\n                v = RIGHT;\n            }\n        }\n        // UP LEFT\n        else if(isRightUp(coord, LEFT, center, n))\n        {\n            ivec2 sqeareCenter = coord + RIGHT;\n            \n            if(upDounOrRightLeft(sqeareCenter, n))\n            {\n                v = UP;\n            }\n            else\n            {\n                v = LEFT;\n            }\n        }\n        // LEFT DOUN\n        else if(isRightUp(coord, DOUN, center, n))\n        {\n            ivec2 sqeareCenter = coord + RIGHT + UP;\n            \n            if(upDounOrRightLeft(sqeareCenter, n))\n            {\n                v = DOUN;\n            }\n            else\n            {\n                v = LEFT;\n            }\n        }\n        // DOUN RIGHT\n        else if(isRightUp(coord, RIGHT, center, n))\n        {\n            ivec2 sqeareCenter = coord + UP;\n            \n            if(upDounOrRightLeft(sqeareCenter, n))\n            {\n                v = DOUN;\n            }\n            else\n            {\n                v = RIGHT;\n            }\n        }\n        \n        fragColor = vec4(v, 0, 1);\n    }\n    else\n    {\n        fragColor = texelFetch(iChannel0, coord, 0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define UP ivec2(0, 1)\n#define DOUN ivec2(0, -1)\n#define RIGHT ivec2(1, 0)\n#define LEFT ivec2(-1, 0)\n\n#define getV(c) ivec2(texelFetch(iChannel0, c, 0).xy)\n\nconst int frames = 30;\n\nbool isDefined(ivec2 ic, int n)\n{\n    vec2 c = vec2(ic) + 0.5;\n    \n    return abs(c.x) + abs(c.y) <= float(n);\n}\n","name":"Common","description":"","type":"common"}]}