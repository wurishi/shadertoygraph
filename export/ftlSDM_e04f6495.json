{"ver":"0.1","info":{"id":"ftlSDM","date":"1625807822","viewed":367,"name":"Roblox sdf character","username":"IDGAMER89","description":"This is a sdf roblox character.","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["raymarch","sdf","sdf","roblox","roblox"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define deg2rad (3.141/360.)\n#define MAX_STEPS 100\n#define MAX_DIST 1e2\n#define SURF_DIST 1e-4\n\nfloat sphereSDF(vec3 p, float r){\n\treturn length(p)-r;\n}\n\nfloat cubeSDF(vec3 p, vec3 s) {\n    vec3 q = abs(p) - s;\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\n}\n\nfloat roundedCubeSDF(vec3 p, vec3 s, float r) {\n    vec3 q = abs(p) - s;\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0)-r;\n}\n\nfloat roundedCylinderSDF( vec3 p, float ra, float rb, float h )\n{\n  vec2 d = vec2( length(p.xz)-2.0*ra+rb, abs(p.y) - h );\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rb;\n}\n\nfloat characterSDF(vec3 p){\n\tfloat d = roundedCylinderSDF(p, 0.3, 0.3, .3);//Head\n\td = min(d, roundedCubeSDF(p-vec3(0,-1.6,0), vec3(1,1,.5), .05));//Torso\n    //p.x = abs(p.x);\n\td = min(d, roundedCubeSDF(p-vec3(1.6,-1.6,0), vec3(0.5,1,.5), .05));//left arm\n\td = min(d, roundedCubeSDF(p-vec3(0.51,-3.7,0), vec3(0.46,1,.5), .05));//left leg\n\td = min(d, roundedCubeSDF(p-vec3(-1.6,-1.6,0), vec3(0.5,1,.5), .05));//right arm\n\td = min(d, roundedCubeSDF(p-vec3(-0.51,-3.7,0), vec3(0.46,1,.5), .05));//right leg\n    \n\treturn d;\n}\n\nfloat scene(vec3 p){\n\tfloat d = p.y+5.0;\n    d = min(d, characterSDF(p));\n\t\n\treturn d;\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(SURF_DIST, 0.0);\n\n    return normalize(\n        scene(p) - vec3(\n            scene(p - e.xyy),\n            scene(p - e.yxy),\n            scene(p - e.yyx)\n        )\n    );\n}\n\nfloat AO(vec3 p) {\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    vec3 nor = GetNormal(p);\n    for(int i = 0; i < 5; i++) {\n        float h = 0.001 + 0.15*float(i)/4.0;\n        float d = scene(p + h*nor);\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 1.5*occ, 0.0, 1.0 );\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.0;\n    for(int i = 0; i < MAX_STEPS; i++) {\n        float dS = scene(ro + rd * dO);\n        dO += dS;\n        if(dO > MAX_DIST || dS < SURF_DIST) break;\n    }\n    return dO;\n}\n\nmat3 rot(vec3 ang) {\n    vec3 s = sin(ang);\n    vec3 c = cos(ang);\n    mat3 x = mat3(\n        vec3(1, 0, 0),\n        vec3(0, c.x,-s.x),\n        vec3(0, s.x, c.x)\n    );\n    mat3 y = mat3(\n        vec3(c.y, 0, s.y),\n        vec3(0, 1, 0),\n        vec3(-s.y, 0, c.y)\n    );\n    mat3 z = mat3(\n        vec3(c.z, s.z, 0),\n        vec3(-s.z, c.z, 0),\n        vec3(0, 0, 1)\n    );\n    return x*y*z;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 uv = (fragCoord.xy-0.5*iResolution.xy)/max(iResolution.x, iResolution.y)*2.;\n\tvec3 ro = vec3(0, 0, -5);\n    vec3 rd = normalize(vec3(uv, 75.*deg2rad));\n\n    vec2 t = (iMouse.xy-0.5*iResolution.xy)/max(iResolution.x, iResolution.y);\n    t *= 4.0;\n    vec2 mouse_rotation = t*2.;\n    //if(length(touch.xy) < 1e-3) mouse_rotation = vec2(0);\n\n    vec2 yawpitch = vec2(mouse_rotation.x, -mouse_rotation.y);\n    mat3 viewmat = rot(vec3(yawpitch.y, yawpitch.x, 0));\n\n    ro *= viewmat;\n    rd *= viewmat;\n\n    float d = RayMarch(ro, rd);\n    vec3 p = ro + rd * d;\n    vec3 col = vec3(0);\n\n    if(d < MAX_DIST){\n    \tvec3 lp = normalize(vec3(0,5,-3));\n    \tvec3 n = GetNormal(p);\n\t\tcol = vec3(smoothstep(-0.2,1.,dot(n, lp)));\n        float s = RayMarch(p+n*SURF_DIST*2.0, lp);\n        col *= AO(p); \n\t\tif(s < length(lp-p)) col *= vec3(.5);\n    }else{\n        col = texture(iChannel0, rd.zyx).rgb;\n    }\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}