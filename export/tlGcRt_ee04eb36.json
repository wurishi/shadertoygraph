{"ver":"0.1","info":{"id":"tlGcRt","date":"1611539381","viewed":187,"name":"Sharpening & Blurring in 1 Tap","username":"iradicator","description":"Single tap and hardware derivatives to approximate image filtering such as sharpening and blurring.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","cheap","filtering","derivatives","image","blurring","sharpening","smoothness","approximated"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Using hardware derivativs to approximate image sharpening / blurring using a single tap.\n//\n// Left side - sharpening\n// Middle - original image (bilinear filtering)\n// Right side - smoothing\n//\n// Based on ideas from Juan https://twitter.com/reduzio/status/1350895712494563329,\n// and GPU Pro 2 article - \"Shader Amortization using Pixel Quad Message Passing\" (PQA)\n//\n// Note image swimming with animation due to 2x2 quad \"point sampling\" nature of this technique.\n\nvec3 SharpenQuad2x2(in vec2 fragCoord, in vec3 v)\n{ \n    vec2 q = vec2(uvec2(fragCoord.xy) & uvec2(1));\n    q = 2.0 * q - vec2(1.0);    \n    v += 0.5 * dFdx(v) * q.x;\n    v += 0.5 * dFdy(v) * q.y;\n    return v;\n}\n\nvec3 SmoothQuad2x2(in vec2 fragCoord, in vec3 v)\n{ \n    vec2 q = vec2(uvec2(fragCoord.xy) & uvec2(1));\n    q = 2.0 * q - vec2(1.0);    \n    v -= 0.5 * dFdx(v) * q.x;\n    v -= 0.5 * dFdy(v) * q.y;\n    return v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float lg = uv.x - (0.35*sin(iTime)+0.5) - 0.15;\n    float lr = uv.x - (0.35*sin(iTime)+0.5) + 0.15;\n\n#if 1 // Animated\n    uv = 0.8 * uv + vec2(0.1) + vec2(0.05*sin(0.5*iTime),0.08*cos(0.3*iTime));\n#endif\n\n    vec3 col = texture(iChannel0, uv).rgb;\n    vec3 col_sharpen = SharpenQuad2x2(fragCoord, col);\n    vec3 col_smooth = SmoothQuad2x2(fragCoord, col);\n    \n    col = mix(col_sharpen,col,smoothstep(0.0,2.0/iResolution.x,lr));\n    col = mix(col,col_smooth,smoothstep(0.0,2.0/iResolution.x,lg));\n\n    col = mix(vec3(0.6,0.2,0.15),col,smoothstep(0.0,2.0/iResolution.x,abs(lr)));\n    col = mix(vec3(0.2,0.6,0.15),col,smoothstep(0.0,2.0/iResolution.x,abs(lg)));\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}