{"ver":"0.1","info":{"id":"ddlfW4","date":"1688754067","viewed":107,"name":"Evil Tar Noise","username":"ascomycody","description":"Combining a few techniques","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["specularnoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NUM_PARTICLES 30\n\n#define BASE_SEED 211\n\n#define LCGDIV  0.000007437377283274825965371571369072\n\n#define PI 3.1415926535897\n\n#define SPECULAR\n\nvec2 randNum(int seed )\n{\n    int m = 134456;\n    int a = 8121;\n    int c = 28411;\n    int x = seed;\n    \n    int its = 3;\n    \n    for( int i = 0; i < its; i++ )\n    {\n        x = int( floor( mod( float( (a * x) + c), float(m) ) ) );\n    }\n    \n    float posx = float(x) * LCGDIV;\n    posx *= iResolution.x/iResolution.y;\n    \n    for( int i = 0; i < its; i++ )\n    {\n        x = int( floor( mod( float( (a * x) + c), float(m) ) ) );\n    }\n    \n    float posy = float(x) * LCGDIV;\n    \n    vec2 pos = vec2(posx, posy);\n    \n    return pos;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = fragCoord/iResolution.xy*2.-1.;\n    float ratio = iResolution.x/iResolution.y;\n    uv.x *= ratio;\n    \n    mat2 particles;\n    mat2 offset;\n    \n    vec3 col = vec3(.9, .2, .1);\n    \n    ivec2 res = ivec2(10, 8);\n    vec2 pix = vec2((2. * ratio) / float(res.x), 2. / float(res.y));\n    \n    // Affect particles    \n    for( int i = 0; i < res.x; i++ )\n    {\n    for( int j = 0; j < res.y; j++ )\n    {\n        int index = j + i * res.y;\n        int genseed = int( floor( mod( float(BASE_SEED) * float(index + 1), 134456.0) ) );\n        \n        float pT = 0.;\n    \n        offset[index] = (randNum(genseed) - 0.5)*2.;\n        offset[index].x *= pix.x;\n        offset[index].y *= pix.y;\n        \n        particles[index].x = (pix.x * float(i)) - (ratio - (0.5 * pix.x));\n        particles[index].y = (pix.y * float(j)) - (1. - (0.5 * pix.y));\n        \n        //particles[index].x += offset[index].x;\n        //particles[index].y += offset[index].y;\n        \n        particles[index].x += (cos(iTime * fract(PI)) * length(offset[index]) * 0.5) * cos(iTime * 0.5 + PI * length(offset[index] * float(index)));\n        particles[index].y += (cos(iTime * fract(PI)) * length(offset[index]) * 0.5) * sin(iTime * 0.5 + PI * length(offset[index] * float(index)));\n        \n        float d = 0.1;\n        \n        for( int j = 0; j <= NUM_PARTICLES; j++ )\n        {\n            if( j != index)\n            {\n                d += distance(particles[index], particles[j]);\n                \n            }\n            d = normalize(d) * 0.1 + 0.3;\n        }\n        \n        col *= smoothstep(0., d, length(uv - particles[index]));\n    }\n    }\n\n    #ifdef SPECULAR\n    col += 1.;\n    col *= vec3(1.,.9,.8) \n        *  pow(max(normalize(vec3(length(dFdx(col)), length(dFdy(col)), .5/iResolution.y)).z, 0.), 2.)\n        + 1.;\n    col -= 1.;\n    #endif\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}