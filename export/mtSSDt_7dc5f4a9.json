{"ver":"0.1","info":{"id":"mtSSDt","date":"1702330494","viewed":23,"name":"Raymarching (test)","username":"DynamicGoose","description":"learning how to implement raymarching","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define SURF_DIST 0.01\n\nfloat smin( float a, float b, float k ) {\n    float h = clamp( 0.5 + 0.5 * (b - a) / k, 0.0, 1.0 );\n    return mix( b, a, h ) - k * h * (1.0 - h);\n}\n\nfloat GetDist(vec3 p) {\n\tvec4 s1 = vec4(0, 2, 6, 1);\n    vec4 s2 = vec4(0, 3, 6, 0.5);\n    \n    float sphereDist1 = length(p - s1.xyz) - s1.w;\n    float sphereDist2 = length(p - s2.xyz) - s2.w;\n    float planeDist = p.y;\n    \n    float d = smin(sphereDist1, sphereDist2, 1.2);\n    d = min(d, planeDist);\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO = 0.0;\n    \n    for(int i = 0; i < MAX_STEPS; i++) {\n    \tvec3 p = ro + rd * dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO > MAX_DIST || dS < SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(0.01, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p - e.xyy),\n        GetDist(p - e.yxy),\n        GetDist(p - e.yyx));\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(0, 5, 2);\n    vec3 l = normalize(lightPos - p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0.0, 1.0);\n    float d = RayMarch(p + n * SURF_DIST * 2.0, l);\n    if(d < length(lightPos - p)) dif *= 0.1;\n    \n    return dif;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 2, 0);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n\n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd * d;\n    \n    float dif = GetLight(p);\n    col = vec3(dif);\n    \n    col = pow(col, vec3(0.4545));\t// gamma correction\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}