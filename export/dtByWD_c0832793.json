{"ver":"0.1","info":{"id":"dtByWD","date":"1695410060","viewed":54,"name":"tile from spheres","username":"Efim","description":"Draw tile on surface","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","3d","tile","raycating"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define TAU 6.28318530718\n#define nn 45.0\nconst float  eps = 0.05;\nconst float dist_infin = 1000.0;\n#define AA 1\n\n\nstruct HIT\n{\n    float dist;\n    vec3 nor;\n    vec3 pos;\n};\n\nconst HIT hit_inf = HIT(dist_infin, vec3(0.0), vec3(0.0));\n\n\nvec3 ccolor(vec3 col_in, vec3 backcol, vec3 rd, vec3 light1, vec3 light2, vec3 nor)\n{\n    vec3 col = col_in;\n    float d = dot(rd, nor);\n    if (d < 0.0)\n        col = backcol;\n    \n    nor *= -sign(d);\n    float difu1 = dot(nor, light1);\n    float difu2 = dot(nor, light2);\n    float difu = max(difu1, difu2);\n        col *= clamp(difu, 0.3, 1.0);\n    return col;   \n}\n\nfloat aafi(vec2 p) {\n    float fi = atan(p.y, p.x);\n    fi += step(p.y, 0.0)*TAU;\n    return fi;\n}\n\n//converts a vector on a sphere to longitude and latitude\n\nvec2 lonlat (vec3 p)\n{\n    float lon = aafi(p.xy)/2.0/PI;\n    float lat = aafi(vec2(p.z, length(p.xy)))/PI;\n    return vec2(1.0-lon, lat);\n}\n\n//===================https://www.shadertoy.com/view/wsXGWS======================\nfloat sgn(float x) {\n  return x < 0.0? -1.0: 1.0; // Return 1 for x == 0\n}\n\nint quadratic(float A, float B, float C, out vec2 res) {\n  float x1,x2;\n  float b = -0.5*B;\n  float q = b*b - A*C;\n  if (q < 0.0) return 0;\n  float r = b + sgn(b)*sqrt(q);\n  if (r == 0.0) {\n    x1 = C/A; x2 = -x1;\n  } else {\n    x1 = C/r; x2 = r/A;\n  }\n  res = vec2(x1,x2);\n  return 2;\n}\n\nint quadratic(vec3 coeffs, out vec2 res) {\n  return quadratic(coeffs[0],coeffs[1],coeffs[2],res);\n}\n\nvoid eval(float X, float A, float B, float C, float D,\n          out float Q, out float Q1, out float B1,out float C2) {\n  float q0 = A*X;\n  B1 = q0+B;\n  C2 = B1*X+C;\n  Q1 = (q0+B1)*X + C2;\n  Q = C2*X + D;\n}\n\n// Solve: Ax^3 + Bx^2 + Cx + D == 0\n// Find one real root, then reduce to quadratic.\nint cubic(float A, float B, float C, float D, out vec3 res) {\n  float X,b1,c2;\n  if (A == 0.0) {\n    X = 1e8; A = B; b1 = C; c2 = D;\n  } else if (D == 0.0) {\n    X = 0.0; b1 = B; c2 = C;\n  } else {\n    X = -(B/A)/3.0;\n    float t,r,s,q,dq,x0;\n    eval(X,A,B,C,D,q,dq,b1,c2);\n    t = q/A; r = pow(abs(t),1.0/3.0); s = sgn(t);\n    t = -dq/A; if (t > 0.0) r = 1.324718*max(r,sqrt(t));\n    x0 = X - s*r;\n    if (x0 != X) {\n      for (int i = 0; i < 6; i++) {\n        X = x0;\n        eval(X,A,B,C,D,q,dq,b1,c2);\n        if (dq == 0.0) break;\n        x0 -= (q/dq);\n      }\n      if (abs(A)*X*X > abs(D/X)) {\n        c2 = -D/X; b1 = (c2 - C)/X;\n      }\n    }\n  }\n  res.x = X;\n  return 1 + quadratic(A,b1,c2,res.yz);\n}\n\nint cubic(vec4 coeffs, out vec3 res) {\n  float A = coeffs[0], B = coeffs[1], C = coeffs[2], D = coeffs[3];\n  return cubic(A,B,C,D,res);\n}\n\n\nfloat qcubic(float a, float b, float c) {\n  if (c == 0.0) return 0.0;\n  \n  vec3 res;\n  int nroots = cubic(1.0,a,b,c,res);\n  if (nroots == 1) return res.x;\n  else return max(res.x,max(res.y,res.z));\n}\n\nint quartic(vec4 coeffs, out vec4 res) {\n  float c1 = coeffs[0];\n  float c2 = coeffs[1];\n  float c3 = coeffs[2];\n  float c4 = coeffs[3];\n  float alpha = 0.5*c1;\n  float A = c2-alpha*alpha;\n  float B = c3-alpha*A;\n  float a,b,beta,psi;\n  psi = qcubic(2.0*A-alpha*alpha, A*A+2.0*B*alpha-4.0*c4, -B*B);\n  a = sqrt(psi);\n  beta = 0.5*(A + psi);\n  if (psi <= 0.0) {\n    b = sqrt(max(beta*beta-c4,0.0));\n  } else {\n    b = 0.5*a*(alpha-B/psi);\n  }\n  int resn = quadratic(1.0,alpha+a,beta+b,res.xy);\n  vec2 tmp;\n  if (quadratic(1.0,alpha-a,beta-b,tmp) != 0) { \n    res.zw = res.xy;\n    res.xy = tmp;\n    resn += 2;\n  }\n  return resn;\n}\n\nint quartic(float A, float B, float C, float D, float E, out vec4 roots) {\n  int nroots;\n  vec4 coeffs = vec4(B,C,D,E)/A;\n  nroots = quartic(coeffs,roots);\n  return nroots;\n}\n//https://www.shadertoy.com/view/wsXGWS\n\n\nmat3 rotateX(float f)\n{\n    return mat3(vec3(1.0,    0.0,      0.0), vec3(0.0,\t cos(f),  -sin(f)), \tvec3(.0, sin(f), cos(f)));\n}\n\nmat3 rotateY(float f)\n{\n    return mat3(vec3(cos(f), 0.0,  sin(f)),vec3(0.0,\t 1.0,  0.0),vec3(-sin(f), 0.0, cos(f)));\n}\n\nmat3 rotateZ(float f)\n{\n    return mat3(vec3(cos(f),    -sin(f),  0.0),vec3(sin(f),\t cos(f),  0.0), \tvec3(0.0, 0.0, 1.0));\n}\n\n\n\n//=============================2D pic=========================\nfloat sdBuild(vec2 p, float f[30], float r[30], int n)\n{\n    float fi = aafi(p);\n    for (int i = 1; i < 30; i++)\n    {\n        if (i == n)\n            break;\n        if (fi >= f[i-1] && fi <= f[i])\n        {\n            float f1 = fi - f[i-1];\n            float f2 = f[i] - fi;\n            float h1 = r[i-1] * sin(f1);\n            float h2 = r[i] * sin(f2);\n            vec2 v1 = vec2(r[i-1] * cos(f[i-1]), r[i-1] * sin(f[i-1]));\n            vec2 v2 = vec2(r[i] * cos(f[i]), r[i] * sin(f[i]));\n            vec2 v3 = v2 - v1;\n            v3 *= h1 / (h1 + h2);\n            vec2 v4 = v1 + v3;\n            return length(p) - length(v4);\n        }\n    }\n}\n\nvec3 grid_plane(vec2 uv, float n)\n{\n        float rombr[30]; \n        rombr[0] = 1.0; \n        rombr[1] = 1.0; \n        rombr[2] = 1.0; \n        rombr[3] = 1.0; \n        rombr[4] = 1.0; \n\n        float rombf[30]; \n        rombf[0] = 0.0; \n        rombf[1] = PI/2.0;\n        rombf[2] = PI;\n        rombf[3] = 3.0*PI/2.0;\n        rombf[4] = 2.0*PI;\n\n    \n        vec2 p =  vec2(fract(uv.x*20.0), fract(uv.y*10.0));\n        p = (p-0.5)*2.0;\n        \n        vec3 col = vec3(1.0);\n        float pst = sdBuild(p, rombf, rombr, 5);\n        col = mix(col, vec3(1.0, 1.0, 0.0), step(pst, 0.0));\n        for (int i = 0; i < 5; i++)\n        {\n            rombr[i] = 0.8;\n        }\n        pst = sdBuild(p, rombf, rombr, 5);\n        col = mix(col, vec3(0.0, 0.0, 1.0), step(pst, 0.0));\n        return col;\n}\n//=============================2D pic=========================\n\n\nHIT grid(vec3 ro, vec3 rd)\n{\n    float dist = dist_infin;\n    vec3 pos = vec3(0.0);\n    vec3 nor = vec3(0.0);\n\n    for (float j = 0.; j < nn; j++)\n    {\n        vec3 po = ro + rd*j*0.5;\n        float x0 = floor(po.x);\n        float y0 = floor(po.y);\n\n        float a = ro.x-x0 - 0.5;\n        float b = rd.x;\n        float c = ro.y-y0 - 0.5;\n        float d = rd.y;\n        float e = ro.z;\n        float f = rd.z;\n\n        \n        float t = 0.5;\n        float a0 = 1.*a*a + 1.*c*c + 1.*e*e-1.*t*t;\n        float a1 = 2.*a*b + 2.*c*d + 2.*e*f;\n        float a2 = 1.*b*b + 1.*d*d + 1.*f*f;\n\n         vec2 roots = vec2(dist_infin);\n         int nroots = quadratic(a2, a1, a0, roots);  // quartic(a4, a3, a2, a1, a0, roots);\n         for (int i = 0; i < 2; i++)\n            {\n                if (i >= nroots)\n                    break;\n                if (roots[i] < 0.0)\n                    continue;\n                vec3 p = vec3(a, c, e) + roots[i]*rd;\n                if (roots[i] < dist)    \n                {\n                    dist = roots[i];\n                    pos = p;\n                }\n\n            }\n            if (dist < dist_infin)\n            {\n                nor = vec3(0.+2.*pos.x, 0.+2.*pos.y, 0.+2.*pos.z);\n                nor = normalize(nor);\n                return HIT(dist, nor, pos); \n            }\n    }\n\n    return hit_inf;\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 light = normalize(vec3(0.0, -5.0, 5.0)); //light\n    vec3 light2 = -light;\n    //vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    float t = iTime/8.0;\n    vec2 m = vec2(0.0, 0.0);\n    if  (iMouse.z > 0.0)\n    {\n       m = (-iResolution.xy + 2.0*(iMouse.xy))/iResolution.y;\n       //t = 0.;\n    }\n    vec3 ro = vec3(0.0, -5., 2.); // camera\n    const float fl = 1.5; // focal length\n    float dist = dist_infin;\n    ro = rotateY(-m.x*TAU)*rotateX(-m.y*PI)*ro; //camera rotation\n    mat3 rota  = rotateZ(t);\n    mat3 rota_1  = rotateZ(-t);\n    mat3 rotsp = rotateZ(-iTime)*rotateX(PI/2.0 + PI/5.0); \n    vec3 tot = vec3(0.0);\n    \n    //antiblick\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        vec3 col = vec3(0.7, 0.7, 0.9); // background    \n            // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n        vec3 rd = GetRayDir(p, ro, vec3(0,0.,0), fl); //ray direction\n        HIT gr = grid(rota*ro, rota*rd);\n        if (gr.dist < dist)\n        {\n            \n            vec2 pt = lonlat(rotsp*gr.pos); //get longitude and latitude\n            col = grid_plane(pt, 10.0);\n            vec3 backcol = vec3(1.0, 0.2, 0.2);\n            vec3 nor = rota_1*gr.nor;\n            col = ccolor(col, backcol, -rd, light, light2, nor);\n        }\n        tot += col;\n    }\n\n    //antiblick\n    tot /= float(AA*AA);\n    fragColor = vec4(tot,1.0);\n    \n}\n","name":"Image","description":"","type":"image"}]}