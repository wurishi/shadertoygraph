{"ver":"0.1","info":{"id":"WdlXzf","date":"1605656981","viewed":41,"name":"my_first_3d_shader","username":"alfredo_giani","description":"experiments with rays","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//https://www.youtube.com/watch?v=dKA5ZVALOhs&t=60s\n\nfloat distLine(vec3 ro, vec3 rd, vec3 p){\n     \n \n    return length(cross(p - ro, rd))/length(rd);\n    \n    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    uv -=.5;\n    \n    uv.x *= iResolution.x/iResolution.y;\n    \n    // camera position with respects to the centre of the screen\n    vec3 ro = vec3(0.,0.,-2.);\n    \n    // intersection of the screen with the ray at r0. trivial \n    vec3 rd = vec3(uv.x,uv.y,0.)- ro; \n    \n    \n    // test with a point in 3D space\n    float t = iTime;\n        \n    vec3 p = vec3(sin(t), 0.,1. + cos(t));\n    \n    \n    // find the distance of the point from the ray\n    \n    float d = distLine(ro, rd, p);\n    \n    d = smoothstep(.1, .0009, d);\n    \n    fragColor = vec4(d);\n    \n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    //fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}