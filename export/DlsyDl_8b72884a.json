{"ver":"0.1","info":{"id":"DlsyDl","date":"1691337656","viewed":50,"name":"Worley Noise w/ Animation - jc","username":"joshuc","description":"GPU implementation of Worley noise with animation and customizable settings. ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","noise","worley"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// cell divisions\n#define DIV_X 10\n#define DIV_Y 6\n\n// max neighbor check distance\n#define RESOLUTION 3\n// animation speed\n#define SPEED 0.3\n\n// hash functions stolen from https://thebookofshaders.com/10/ and https://www.shadertoy.com/view/4djSRW\nfloat rand(vec2 p) {\n    return fract(sin(dot(p, vec2(12.9898, 78.233)))*43758.5453);\n}\n\nfloat rand2(vec2 p) {\n\treturn fract(sin(dot(p, vec2(127.1,311.7)))*43758.5453123);\n}\n\n// worley for more standard distribution compared to voronoi\nfloat worley(vec2 uv) {\n    vec2 div = vec2(float(DIV_X), float(DIV_Y));\n    \n    float cellw = iResolution.x/div.x;\n    float cellh = iResolution.y/div.y;\n    \n    float cellnx = floor(uv.x*div.x);\n    float cellny = floor(uv.y*div.y);\n    \n    float d = 1.0;\n    for (int y = -RESOLUTION; y <= RESOLUTION; y++) {\n        for (int x = -RESOLUTION; x <= RESOLUTION; x++) {\n            vec2 dd = vec2(float(x), float(y));\n            vec2 celln = vec2(cellnx+dd.x, cellny+dd.y);\n            \n            vec2 anim = vec2(sin(rand2(celln)*iTime*SPEED), cos(rand2(celln)*iTime*SPEED));\n            vec2 p = vec2(rand(celln), rand(celln+vec2(0.5))) + anim;\n            vec2 ssp = vec2((celln.x+p.x)/div.x, (celln.y+p.y)/div.y);\n            d = min(distance(ssp, uv), d);\n        }\n    }\n    return d;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    fragColor = vec4(worley(uv)*6.0);\n}\n","name":"Image","description":"","type":"image"}]}