{"ver":"0.1","info":{"id":"MXBSWd","date":"1711216978","viewed":60,"name":"A very simple bubble","username":"mattdeeds","description":"This is an absurdly simple little shader to create a nice \"bubble\" texture.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["light","sphere","bubble"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = 2.0 * (fragCoord/iResolution.yy - 0.5);\n    float r = length(uv);\n    if (r > 1.0) {\n      fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n      return;\n    }\n\n    // A value of 1.0 here would be a sphere, but I use 4.0 because I want it to look\n    // more like a magnifying glass.\n    float z = 4.0 - length(uv);\n    vec3 glassNormal = normalize(vec3(uv, z));\n    \n    vec3 reflectionAngle = reflect(vec3(0.0, 0.0, -1.0), glassNormal);  // Calculate reflection angle\n    float specular = 0.0;\n    if (reflectionAngle.x > -0.4 && reflectionAngle.x < -0.2 &&\n        reflectionAngle.z > 0.85 && reflectionAngle.z < 0.9 &&\n        reflectionAngle.y > 0.3 && reflectionAngle.y < 0.45) {\n        specular = 0.6;\n    }\n    float edge = smoothstep(0.8, 1.0, r);\n    \n    // Output to screen\n    fragColor = vec4(vec3(specular + edge),1.0);\n}","name":"Image","description":"","type":"image"}]}