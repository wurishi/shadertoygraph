{"ver":"0.1","info":{"id":"XcXyDH","date":"1721057049","viewed":61,"name":"blackhole eating a mandelbox","username":"pb","description":"here is what happens when a mandelbox gets swallowed by a blackhole then gets shot out of the worm hole\n(requires a good gpu)","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["raymarch","4d"],"hasliked":0,"parentid":"X3VXzG","parentname":"mandelbox4d"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//philip.bertani@gmail.com\n\nvoid mainImage(out vec4 O, vec2 u) {\n    vec2 R = iResolution.xy,\n        uv = u/R;\n\n    O *= 0.;\n\n    float[] gk1s = float[](\n        0.003765, 0.015019, 0.023792, 0.015019, 0.003765,\n        0.015019, 0.059912, 0.094907, 0.059912, 0.015019,\n        0.023792, 0.094907, 0.150342, 0.094907, 0.023792,\n        0.015019, 0.059912, 0.094907, 0.059912, 0.015019,\n        0.003765, 0.015019, 0.023792, 0.015019, 0.003765\n    );\n\n    //golfed by fabriceneyret2\n    for (int k; k < 25; k++)      \n        O += gk1s[k] * texture(iChannel0, uv + ( vec2(k%5,k/5) - 2. ) / R );\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define rot(x) mat2(cos(x+vec4(0,11,33,0)))\n\n//Rodrigues-Euler axis angle rotation\n#define ROT(p,axis,t) mix(axis*dot(p,axis),p,cos(t))+sin(t)*cross(p,axis)\n\n//formula for creating colors;\n#define H(h)  (  cos(  h + vec3(2,1,5)   )*.6 + .5 )\n\n#define H2(h)  (  cos(  h + vec3(1,2,0)   )*.7 + .2 )\n\n//formula for mapping scale factor \n#define M(c)  log(1.+c)\n\n#define R iResolution\n\nconst float pi = 3.14159265;\nconst float two_pi = 2.0 * pi;\nconst float pi_over_2 = 1.570796325;\nconst float too_small = 1e-2;\n\nfloat atanyx(float y, float x) {\n\n        float sign_y = 1.0;\n        if (y < 0.0) sign_y = -1.0;\n        \n        if (abs(x) < too_small) return sign_y * pi_over_2;\n\n        float atanyx = atan(y/x);\n\n        //we need to add multiple of pi depending on the quadrant\n        if (x>0.0 && y>=0.0) {\n            return atanyx;\n        }\n        else if (x<0.0) {\n            return pi + atanyx;\n        }\n        else {\n            return two_pi + atanyx;\n        }\n}\n\n\n\nvec3 sphRep(vec3 p, float rep) {\n\n    float r = length(p);\n    float theta = acos( p.z/(1.+r));\n    float phi   = atanyx(p.y,p.x);\n    \n    float ph = r/25.;\n    theta = mod(theta,2.*pi/6.);\n    \n    return vec3( r*cos(theta), r*sin(theta)*cos(phi+ph), r*sin(theta)*sin(phi+ph) ); \n\n}\n\n//\n\nvoid mainImage( out vec4 O, vec2 U) {\n  \n    O = vec4(0);\n    \n    vec3 c=vec3(0);\n    vec4 rd = normalize( vec4(U-.5*R.xy, .7*R.y, R.y))*1000.;\n    \n    float sc,dotp,totdist=0., tt=iTime, t=0.;\n    \n    for (float i=0.; i<100.; i++) {\n        \n        vec4 p = vec4( rd*totdist);\n            \n        p.xyz += vec3(20,0,-180.); \n        \n        p.xz *= rot(  max( .3,  min(5.*sin(tt/2.)+1.75, 3.) ) );\n           \n        p.yzw = p.xyz;\n        \n        p.yzw = sphRep(p.yzw,6.);\n        \n        sc = 1.; \n        \n        p.zw *= rot(tt*3. + sin(tt));\n\n        \n        vec4 w = p;\n        \n        for (float j=0.; j<8.; j++) {\n          \n            p = abs(p)*.6;\n       \n            dotp = max(1./dot(w,w),.05);\n            sc *= dotp*1.1; \n            \n            p = p * dotp - .37; \n            \n            w = .8*log(1.+log(1.+log(1.+p)*p)*p) - vec4(.2,.1,.2,.3);\n                    \n        }\n         \n        float dist = abs( max(length(p.zw),length(p.xy))-.1)/sc ;  //funky distance estimate\n        float stepsize = dist/25.;     \n        totdist += stepsize;                  //move the distance along rd\n        \n        //accumulate color, fading with distance and iteration count\n        \n        if (i>10.)\n        c +=  .02*\n             ( H2(  atan( p.w, p.z )) \n             + mix( vec3(1), H(M(sc)),.95) ) *  exp(-i*i*stepsize*stepsize*4e1);\n    }\n    \n    c = 1. - exp(-c*c);\n    O = ( vec4(c,0) );\n               \n}","name":"Buffer A","description":"","type":"buffer"}]}