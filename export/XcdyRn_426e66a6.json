{"ver":"0.1","info":{"id":"XcdyRn","date":"1730158955","viewed":36,"name":"Sweeping colors","username":"sladix","description":"I had no idea of where I was heading, pretty happy with the result. Might use it as a desktop background with slower transitions","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","noise","simple"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\nconst float PI = 3.141592653589793238462;\nconst float TAU = 2.*PI;\nfloat noise3(vec3 x) {\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f * f * (3.0 - 2.0 * f); // Smoother step function\n\n    // Define the hash function\n    #define hash3(p) fract(sin(dot(p, vec3(1.0, 57.0, 113.0))) * 43758.5453)\n    \n    return mix(\n        mix(mix(hash3(p + vec3(0, 0, 0)), hash3(p + vec3(1, 0, 0)), f.x), \n            mix(hash3(p + vec3(0, 1, 0)), hash3(p + vec3(1, 1, 0)), f.x), f.y), \n        mix(mix(hash3(p + vec3(0, 0, 1)), hash3(p + vec3(1, 0, 1)), f.x), \n            mix(hash3(p + vec3(0, 1, 1)), hash3(p + vec3(1, 1, 1)), f.x), f.y), f.z);\n}\n\nvec3 pal(float t) {\n    float r = cos(t+iTime*0.6);\n    float g = tan(t+iTime*0.5);\n    float b = sin(t+iTime*0.4);\n    return vec3(r,g,b);\n}\n\nfloat sdEquilateralTriangle( in vec2 p, in float r )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    float amnt = 0.5;\n    \n    vec3 col = pal(cos(uv.x * amnt) + sin(uv.y * amnt));\n    float triangle = sdEquilateralTriangle(uv - vec2(0, 0.3), 0.5);\n    float downTriangle = sdEquilateralTriangle(uv * rot(PI) - vec2(0, 0.3), 0.3);\n    float v = min(triangle, downTriangle);\n\n    if (v < 0.0) {\n        col = pal(noise3(vec3(uv * 4.0, v)));\n    }\n\n    if (v > -0.008 && v < 0.002) {\n        col *= vec3(0.5);\n    }\n    \n    col *= noise3(vec3(uv, iTime * 0.3));\n    col = 0.08 / col;\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}