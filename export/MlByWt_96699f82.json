{"ver":"0.1","info":{"id":"MlByWt","date":"1510558297","viewed":766,"name":"rainbow tunnel","username":"laserdog","description":"Generates afterimage effect by feeding in previous contents of buffer.","likes":13,"published":1,"flags":32,"usePreview":0,"tags":["tunnel","colors","rainbow","box","trippy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 rgb = texture(iChannel0, uv).xyz;\n    fragColor = vec4(rgb, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define pi  3.14159\n#define tau 6.28318\n#define t iTime\n#define p0 0.5, 0.5, 0.5,  0.5, 0.5, 0.5,  1.0, 1.0, 1.0,  0.0, 0.33, 0.67\t\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a)) // col1a col1b col2a col2b\n\n// source: https://iquilezles.org/articles/palettes\nvec3 palette( in float t, in float a0, in float a1, in float a2, in float b0, in float b1, in float b2,\n              in float c0, in float c1, in float c2,in float d0, in float d1, in float d2)\n{\n    return vec3(a0,a1,a2) + vec3(b0,b1,b2)*cos( tau*(vec3(c0,c1,c2)*t+vec3(d0,d1,d2)) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv0 = fragCoord.xy / iResolution.xy + vec2(sin(t), cos(t)) * .01;\n    vec2 uv = 2. * uv0 - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n    uv = abs(uv * rot(t * 4.));\n    \n   \tfloat d = max(uv.x, uv.y);\n    \n    vec3 color = palette(t, p0);\n    \n    float uvMax = 1.;\n    float innerEdge = mod(t / 3., uvMax);\n    float outerEdge = .075 + innerEdge;\n    float repeat = .75;\n    d = mod(d, repeat) * (uvMax / repeat);\n    d += floor(outerEdge/uvMax) * uvMax * step(d, mod(outerEdge, uvMax));\n    d = step(innerEdge, d) * step(d, outerEdge);\n    \n    fragColor.rgb = .9 * texture(iChannel0, uv0).rgb + d * color;\n}","name":"Buffer A","description":"","type":"buffer"}]}