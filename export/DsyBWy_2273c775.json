{"ver":"0.1","info":{"id":"DsyBWy","date":"1698696310","viewed":69,"name":"Terminal Emulator","username":"BEN1JEN","description":"Trying to make a terminal emulator using just a shader, will be used in a vrchat avatar eventually.\nThe input system could definitely do with an upgrade but I don't feel like figuring out how the keyboard in shadertoy works right now.","likes":2,"published":1,"flags":48,"usePreview":0,"tags":["terminal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// Sync with Buffer D\n#define RES_X 40.0\n#define RES_Y 22.0\n\n#define EPSILON 0.1\n\n#define isPixel(p) (abs(fragCoord.x-round(float((p).x))-0.5) < EPSILON && abs(fragCoord.y-round(float((p).y))-0.5) < EPSILON)\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec4 cursorPos = texture(iChannel0, vec2(0.5, RES_Y+0.5)/iResolution.xy);\n    if (isPixel(vec2(0.0, RES_Y))) {\n        for (float i = 32.0; i < 128.0; i++) {\n            if (texture(iChannel1, vec2(i/256.0, 0.5)).x > 0.5) {\n                cursorPos.x += 1.0;\n                if (cursorPos.x >= RES_X) {\n                    cursorPos.x = 0.0;\n                    cursorPos.y += 1.0;\n                }\n                fragColor = vec4(cursorPos.xy, i, 1.0);\n                return;\n            }\n        }\n        if (cursorPos.w < 0.5) {\n            fragColor = vec4(0.0, 0.0, 32.0, 1.0);\n        }\n        fragColor = cursorPos;\n    }\n    if (fragCoord.x < 0.0 || fragCoord.y < 0.0 || fragCoord.x >= RES_X || fragCoord.y >= RES_Y) return;\n    vec2 uv = fragCoord/iResolution.xy;\n    fragCoord.y = RES_Y-fragCoord.y;\n\n    if (isPixel(cursorPos)) {\n        fragColor = vec4(cursorPos.z, 0.0, 0.0, 1.0);\n    } else if (isPixel(vec2(0.0, 0.0))) {\n        fragColor = vec4(62.0, 0.0, 0.0, 1.0);\n    } else {\n        fragColor = texture(iChannel0, uv);\n        if (fragColor.w < 0.5) {\n            fragColor.x = 32.0;\n            fragColor.w = 1.0;\n        }\n    }\n}\n","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"// Sync with Buffer C\n#define RES vec2(40.0, 22.0)\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    int i = int(texture(iChannel1, (floor(uv*RES)+0.5)/iResolution.xy).x);\n    float lemon = float(i);\n    //fragColor = vec4(mod(lemon, 2.0), mod(floor(lemon/2.0), 2.0), mod(floor(lemon/4.0), 2.0), 1.0);\n\n    fragColor = texture(iChannel0, vec2(float(i%16)/16.0, float(15-i/16)/16.0)+mod(uv*RES/16.0, 1.0/16.0)).xxxw;\n    //fragColor = vec4(floor(uv*RES)/iResolution.xy*16.0, 0.0, 1.0);\n    //fragColor = texture(iChannel1, uv);\n}","name":"Buffer D","description":"","type":"buffer"}]}