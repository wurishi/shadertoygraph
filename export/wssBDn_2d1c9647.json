{"ver":"0.1","info":{"id":"wssBDn","date":"1595947312","viewed":273,"name":"rainbow coral gyroid thingie","username":"sasha_sortai","description":"there's still a couple of glitches but I like it anyway","likes":23,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","sdf","gyroid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvec3 march(vec3, vec3, vec2);\nvec3 march(vec3, vec3, vec2, float);\n\nfloat DE(vec3);\n\nvec3 color(vec3);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-iResolution.xy/2.)/min(iResolution.x, iResolution.y);\n    vec2 p = uv*2.;\n    // Time varying pixel color\n    vec3 col = vec3(p,0);\n    \n    vec3 cam = vec3(1);\n    vec3 tar = normalize(vec3(1,1,1.2))+vec3(cos(iTime/10.),sin(iTime/10.),0) ;\n    \n    vec3 hit = march(cam, tar, p);\n    col = vec3(mod(DE(hit),.1)*10.);\n    col = color(hit);\n    \n    fragColor = vec4(col,1.0);\n}\n\n\n\nfloat squiggly(vec3 pos)\n{\n    pos.x += iTime*.2;\n    pos *= 5.;\n    float res = 1.-abs(cos(pos.x)*sin(pos.y) + cos(pos.y)*sin(pos.z) + cos(pos.z)*sin(pos.x));\n    pos *= -2.;\n    res += .5*(1.-abs(cos(pos.x)*sin(pos.y) + cos(pos.y)*sin(pos.z) + cos(pos.z)*sin(pos.x)));\n    pos *= -1.3;\n    res += .25*(1.-abs(cos(pos.x)*sin(pos.y) + cos(pos.y)*sin(pos.z) + cos(pos.z)*sin(pos.x)));\n    pos *= -3.;\n    res += .4*(1.-abs(cos(pos.x)*sin(pos.y) + cos(pos.y)*sin(pos.z) + cos(pos.z)*sin(pos.x)));\n    return res;\n}\n\nfloat DE(vec3 p)\n{\n    float tmp = (cos(p.x)*sin(p.y) + cos(p.y)*sin(p.z) + cos(p.z)*sin(p.x))*.5;\n    float def = squiggly(p)*.025;\n    return tmp-exp(-tmp*tmp)*def;\n}\n\nvec3 march(vec3 cam, vec3 tar, vec2 p)\n{\n    return march(cam, tar, p, 1.);\n}\n\nvec3 march(vec3 cam, vec3 tar, vec2 p, float f)\n{\n    mat3 camcoord;\n    camcoord[2] = normalize(tar-cam);\n    camcoord[0] = cross(camcoord[2],vec3(0,0,1));\n    camcoord[1] = cross(camcoord[0], camcoord[2]);\n    vec3 dir = camcoord*vec3(p,f);\n    \n    float l = 0.;\n    float d;\n    for (int i = 0; i < 100; i++)\n    {\n        d = DE(cam+dir*l)*.9;\n        if (abs(d)<.0000001 || d>50.) break;\n        l+=d;\n    }\n    return cam+dir*l;\n}\n\nvec3 color(vec3 pos)\n{\n    if (length(pos)>50.) return vec3(0);\n    vec3 de = vec3(.0001,0,0);\n    vec3 norm = normalize(vec3(\n        DE(pos+de.xyz)-DE(pos-de.xyz),\n        DE(pos+de.zxy)-DE(pos-de.zxy),\n        DE(pos+de.yzx)-DE(pos-de.yzx)));\n    float rot = -iTime;\n    norm.xy *= mat2(cos(rot), sin(rot), -sin(rot), cos(rot));\n    return mix(vec3(.1),.5*(norm+1.),squiggly(pos));\n}\n","name":"Image","description":"","type":"image"}]}