{"ver":"0.1","info":{"id":"mlVSWW","date":"1686107330","viewed":47,"name":"DSPHNG_seventh","username":"disphingofficial","description":"dots\nadapted from patriciogv's cell noise code","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["seven"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 random2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy*2.-1.;\n    uv.x *= iResolution.x/iResolution.y;\n    vec2 uv1 = uv;\n    vec3 color = vec3(0.);\n    \n    uv1 *= 2.;\n    vec2 scaleInt = floor(uv1);\n    vec2 scaleFract = fract(uv1);\n    \n    vec3 minDist = vec3(1.);\n    float a = pow(abs(sin(0.5*iTime+length((uv)))), 15.);\n    vec2 smoothness = vec2(a+0.2,0.2);\n    \n    for (int y= -1; y <= 1; y++) {\n        for (int x= -1; x <= 1; x++) {\n            vec2 neighbor = vec2(float(x),float(y));\n            \n            vec2 pointR = random2(scaleInt + neighbor);\n            vec2 pointG = random2(scaleInt + neighbor);\n            vec2 pointB = random2(scaleInt + neighbor);\n            \n            pointR = 0.5 + 0.5*sin((iTime * 0.9) + a*3.*pointR*1.);\n            pointG = 0.5 + 0.5*sin((iTime * 0.9) + a*3.*pointG*1.2);\n            pointB = 0.5 + 0.5*sin((iTime * 0.9) + a*3.*pointB*1.4);\n            \n            vec2 diffR = neighbor + pointR - scaleFract;\n            vec2 diffG = neighbor + pointG - scaleFract;\n            vec2 diffB = neighbor + pointB - scaleFract;\n            \n            float distR = length(diffR);\n            float distG = length(diffG);\n            float distB = length(diffB);\n            \n            minDist.x = min(minDist.x, distR);\n            minDist.y = min(minDist.y, distG);\n            minDist.z = min(minDist.z, distB);\n        }\n    }\n    \n    vec3 voronoi = color + vec3(smoothstep(smoothness.y, smoothness.x, minDist.x),smoothstep(smoothness.y, smoothness.x, minDist.y),smoothstep(smoothness.y, smoothness.x, minDist.z));\n\n    fragColor = vec4(voronoi,1.0);\n}","name":"Image","description":"","type":"image"}]}