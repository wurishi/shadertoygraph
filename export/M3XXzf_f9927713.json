{"ver":"0.1","info":{"id":"M3XXzf","date":"1709772996","viewed":97,"name":"complex and weird edge detector","username":"Kinkajou81","description":"A quite complex shader for edge detection where most of the shader isn't even edge detection.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["sobel","edgedetection","edge","denoising"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // get bufferC\n    vec4 tex = texture(iChannel0, uv);\n    \n    // get orginal texture\n    vec4 texo = texture(iChannel1,uv);\n    \n    // get luma of orginal texture\n    float luma = texo.r*0.6 + texo.g*0.4;\n    \n    // define grey\n    vec4 grey = vec4(0.5,0.5,0.5,1.0);\n    \n    // sobel\n    vec4 s11 = texture(iChannel1, uv-vec2(1.0,1.0)/iResolution.xy) * -1.0;\n    vec4 s12 = texture(iChannel1, uv-vec2(0.0,1.0)/iResolution.xy) * -2.0;\n    vec4 s13 = texture(iChannel1, uv-vec2(1.0,-1.0)/iResolution.xy) * -1.0;\n    vec4 s14 = texture(iChannel1, uv-vec2(1.0,0.0)/iResolution.xy) * 0.0;\n    vec4 s15 = texture(iChannel1, uv-vec2(0.0,0.0)/iResolution.xy) * 0.0;\n    vec4 s16 = texture(iChannel1, uv-vec2(-1.0,0.0)/iResolution.xy) * 0.0;\n    vec4 s17 = texture(iChannel1, uv-vec2(-1.0,-1.0)/iResolution.xy) * 1.0;\n    vec4 s18 = texture(iChannel1, uv-vec2(0.0,-1.0)/iResolution.xy) * 2.0;\n    vec4 s19 = texture(iChannel1, uv-vec2(1.0,-1.0)/iResolution.xy) * 1.0;\n    vec4 s21 = texture(iChannel1, uv-vec2(1.0,1.0)/iResolution.xy) * -1.0;\n    vec4 s22 = texture(iChannel1, uv-vec2(0.0,1.0)/iResolution.xy) * 0.0;\n    vec4 s23 = texture(iChannel1, uv-vec2(1.0,-1.0)/iResolution.xy) * 1.0;\n    vec4 s24 = texture(iChannel1, uv-vec2(1.0,0.0)/iResolution.xy) * -2.0;\n    vec4 s25 = texture(iChannel1, uv-vec2(0.0,0.0)/iResolution.xy) * 0.0;\n    vec4 s26 = texture(iChannel1, uv-vec2(-1.0,0.0)/iResolution.xy) * 2.0;\n    vec4 s27 = texture(iChannel1, uv-vec2(-1.0,-1.0)/iResolution.xy) * -1.0;\n    vec4 s28 = texture(iChannel1, uv-vec2(0.0,-1.0)/iResolution.xy) * 0.0;\n    vec4 s29 = texture(iChannel1, uv-vec2(1.0,-1.0)/iResolution.xy) * 1.0;\n    \n    // calculate sobel\n    float sobel = sqrt(pow(dot(grey,s11+s12+s13+s14+s15+s16+s17+s18+s19),2.0) + pow(dot(grey,s21+s22+s23+s24+s25+s26+s27+s28+s29),2.0));\n    \n    // color of sobel\n    vec4 hsobel = (s11+s12+s13+s14+s15+s16+s17+s18+s19+s21+s22+s23+s24+s25+s26+s27+s28+s29)/18.0;\n    \n    // luma of hsobel\n    float lhsobel = dot(grey,hsobel);\n    \n    // finalize edge detection\n    vec4 edge = texo + (tex*sobel*-1.0+1.0);\n    \n    // calculate edge luma\n    float edgeluma = clamp(edge.r*0.6 + edge.g*0.4,0.0,100.0)*lhsobel;\n    \n    // calculate final image before tonemapping\n    vec4 final = texo - (vec4(edgeluma,edgeluma,edgeluma,1.0));\n    \n    // display w/ tonemapping\n    fragColor = final;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // import image\n    vec4 tex = texture(iChannel0,uv);\n    \n    //normal\n    vec2 s = 1.0/iResolution.xy;\n    float p = (max(max(texture(iChannel0, uv).r, texture(iChannel0, uv).g), texture(iChannel0, uv).b) + min(min(texture(iChannel0, uv).r, texture(iChannel0, uv).g), texture(iChannel0, uv).b));\n    float h1 = (max(max(texture(iChannel0, uv + s * vec2(1.0,0.0)).r, texture(iChannel0, uv + s * vec2(1.0,0.0)).g), texture(iChannel0, uv + s * vec2(1.0,0.0)).b) + min(min(texture(iChannel0, uv + s * vec2(1.0,0.0)).r, texture(iChannel0, uv + s * vec2(1.0,0.0)).g), texture(iChannel0, uv + s * vec2(1.0,0.0)).b));\n    float v1 = (max(max(texture(iChannel0, uv + s * vec2(0.0,1.0)).r, texture(iChannel0, uv + s * vec2(0.0,1.0)).g), texture(iChannel0, uv + s * vec2(0.0,1.0)).b) + min(min(texture(iChannel0, uv + s * vec2(0.0,1.0)).r, texture(iChannel0, uv + s * vec2(0.0,1.0)).g), texture(iChannel0, uv + s * vec2(0.0,1.0)).b));\n    vec2 normal = (p - vec2(h1, v1));\n\n    // Output to screen w/ Tonemapping\n    fragColor = vec4(normal.xxx+normal.yyy,1.0);\n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // import image\n    vec4 tex = texture(iChannel0,uv);\n    \n    // define grey\n    vec4 grey = vec4(0.5,0.5,0.5,1.0);\n    \n    // Dir Guassian Blurs\n    vec4 b11 = texture(iChannel0, uv-vec2(1.0,1.0)/iResolution.xy) * 0.0778;\n    vec4 b12 = texture(iChannel0, uv-vec2(0.0,1.0)/iResolution.xy) * 0.1233;\n    vec4 b13 = texture(iChannel0, uv-vec2(1.0,-1.0)/iResolution.xy) * 0.0778 * 2.0;\n    vec4 b14 = texture(iChannel0, uv-vec2(1.0,0.0)/iResolution.xy) * 0.1233;\n    vec4 b15 = texture(iChannel0, uv-vec2(0.0,0.0)/iResolution.xy) * 0.1953 * 2.0;\n    vec4 b16 = texture(iChannel0, uv-vec2(-1.0,0.0)/iResolution.xy) * 0.1233;\n    vec4 b17 = texture(iChannel0, uv-vec2(-1.0,-1.0)/iResolution.xy) * 0.0778 * 2.0;\n    vec4 b18 = texture(iChannel0, uv-vec2(0.0,-1.0)/iResolution.xy) * 0.1233;\n    vec4 b19 = texture(iChannel0, uv-vec2(1.0,-1.0)/iResolution.xy) * 0.0778;\n    vec4 b21 = texture(iChannel0, uv-vec2(1.0,1.0)/iResolution.xy) * 0.0778;\n    vec4 b22 = texture(iChannel0, uv-vec2(0.0,1.0)/iResolution.xy) * 0.1233;\n    vec4 b23 = texture(iChannel0, uv-vec2(1.0,-1.0)/iResolution.xy) * 0.0778;\n    vec4 b24 = texture(iChannel0, uv-vec2(1.0,0.0)/iResolution.xy) * 0.1233 * 2.0;\n    vec4 b25 = texture(iChannel0, uv-vec2(0.0,0.0)/iResolution.xy) * 0.1953 * 2.0;\n    vec4 b26 = texture(iChannel0, uv-vec2(-1.0,0.0)/iResolution.xy) * 0.1233 * 2.0;\n    vec4 b27 = texture(iChannel0, uv-vec2(-1.0,-1.0)/iResolution.xy) * 0.0778;\n    vec4 b28 = texture(iChannel0, uv-vec2(0.0,-1.0)/iResolution.xy) * 0.1233;\n    vec4 b29 = texture(iChannel0, uv-vec2(1.0,-1.0)/iResolution.xy) * 0.0778;\n    vec4 b31 = texture(iChannel0, uv-vec2(1.0,1.0)/iResolution.xy) * 0.0778;\n    vec4 b32 = texture(iChannel0, uv-vec2(0.0,1.0)/iResolution.xy) * 0.1233 * 2.0;\n    vec4 b33 = texture(iChannel0, uv-vec2(1.0,-1.0)/iResolution.xy) * 0.0778;\n    vec4 b34 = texture(iChannel0, uv-vec2(1.0,0.0)/iResolution.xy) * 0.1233;\n    vec4 b35 = texture(iChannel0, uv-vec2(0.0,0.0)/iResolution.xy) * 0.1953 * 2.0;\n    vec4 b36 = texture(iChannel0, uv-vec2(-1.0,0.0)/iResolution.xy) * 0.1233;\n    vec4 b37 = texture(iChannel0, uv-vec2(-1.0,-1.0)/iResolution.xy) * 0.0778;\n    vec4 b38 = texture(iChannel0, uv-vec2(0.0,-1.0)/iResolution.xy) * 0.1233 * 2.0;\n    vec4 b39 = texture(iChannel0, uv-vec2(1.0,-1.0)/iResolution.xy) * 0.0778;\n    vec4 b41 = texture(iChannel0, uv-vec2(1.0,1.0)/iResolution.xy) * 0.0778 * 2.0;\n    vec4 b42 = texture(iChannel0, uv-vec2(0.0,1.0)/iResolution.xy) * 0.1233;\n    vec4 b43 = texture(iChannel0, uv-vec2(1.0,-1.0)/iResolution.xy) * 0.0778;\n    vec4 b44 = texture(iChannel0, uv-vec2(1.0,0.0)/iResolution.xy) * 0.1233;\n    vec4 b45 = texture(iChannel0, uv-vec2(0.0,0.0)/iResolution.xy) * 0.1953 * 2.0;\n    vec4 b46 = texture(iChannel0, uv-vec2(-1.0,0.0)/iResolution.xy) * 0.1233;\n    vec4 b47 = texture(iChannel0, uv-vec2(-1.0,-1.0)/iResolution.xy) * 0.0778;\n    vec4 b48 = texture(iChannel0, uv-vec2(0.0,-1.0)/iResolution.xy) * 0.1233;\n    vec4 b49 = texture(iChannel0, uv-vec2(2.0,-1.0)/iResolution.xy) * 0.0778 * 2.0;\n    \n    // combine blurs\n    float bf = sqrt(pow(dot(grey,b11+b12+b13+b14+b15+b16+b17+b18+b19),2.0) + pow(dot(grey,b21+b22+b23+b24+b25+b26+b27+b28+b29),2.0) + pow(dot(grey,b31+b32+b33+b34+b35+b36+b37+b38+b39),2.0) + pow(dot(grey,b41+b42+b43+b44+b45+b46+b47+b48+b49),2.0));\n    \n\n    // Output to screen w/ Tonemapping\n    fragColor = tex/(bf/5.5547)*(bf/(bf+1.0));\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // import image\n    vec4 tex = texture(iChannel0,uv);\n    \n    // define grey\n    vec4 grey = vec4(0.5,0.5,0.5,1.0);\n    \n    // Guassian Blurs\n    vec4 b1 = texture(iChannel0, uv-vec2(1.0,1.0)/iResolution.xy) * 0.0778;\n    vec4 b2 = texture(iChannel0, uv-vec2(0.0,1.0)/iResolution.xy) * 0.1233;\n    vec4 b3 = texture(iChannel0, uv-vec2(1.0,-1.0)/iResolution.xy) * 0.0778;\n    vec4 b4 = texture(iChannel0, uv-vec2(1.0,0.0)/iResolution.xy) * 0.1233;\n    vec4 b5 = texture(iChannel0, uv-vec2(0.0,0.0)/iResolution.xy) * 0.1953;\n    vec4 b6 = texture(iChannel0, uv-vec2(-1.0,0.0)/iResolution.xy) * 0.1233;\n    vec4 b7 = texture(iChannel0, uv-vec2(-1.0,-1.0)/iResolution.xy) * 0.0778;\n    vec4 b8 = texture(iChannel0, uv-vec2(0.0,-1.0)/iResolution.xy) * 0.1233;\n    vec4 b9 = texture(iChannel0, uv-vec2(1.0,-1.0)/iResolution.xy) * 0.0778;\n    \n    // average all blurs\n    float bc = dot(grey,b1+b2+b3+b4+b5+b6+b7+b8+b9);\n    float bcf = 1.0/(bc/4.2592)*(bc/(bc+1.0));\n    \n    // average blur sections\n    float bcs1 = dot(grey,b1+b2+b3);\n    float bcs2 = dot(grey,b1+b4+b7);\n    float bcs3 = dot(grey,b7+b8+b9);\n    float bcs4 = dot(grey,b9+b6+b3);\n    \n    // blur std.\n    float bs1 = abs(dot(grey,bcf-b1));\n    float bs2 = abs(dot(grey,bcf-b2));\n    float bs3 = abs(dot(grey,bcf-b3));\n    float bs4 = abs(dot(grey,bcf-b4));\n    float bs6 = abs(dot(grey,bcf-b6));\n    float bs7 = abs(dot(grey,bcf-b7));\n    float bs8 = abs(dot(grey,bcf-b8));\n    float bs9 = abs(dot(grey,bcf-b9));\n    float bss1 = mix(bs1,bs2,bs3);\n    float bss2 = mix(bs1,bs4,bs7);\n    float bss3 = mix(bs7,bs8,bs9);\n    float bss4 = mix(bs9,bs6,bs3);\n    \n    // median estimation\n    float bm1 = dot(grey,max(max(b1,b2),b3)-min(min(b1,b2),b3));\n    float bm2 = dot(grey,max(max(b1,b4),b7)-min(min(b1,b4),b7));\n    float bm3 = dot(grey,max(max(b7,b8),b9)-min(min(b7,b8),b9));\n    float bm4 = dot(grey,max(max(b9,b6),b3)-min(min(b9,b6),b3));\n    \n    // skewness\n    float bsk1 = (bcs1-bm1)*3.0 / bss1;\n    float bsk2 = (bcs1-bm1)*3.0 / bss1;\n    float bsk3 = (bcs1-bm1)*3.0 / bss1;\n    float bsk4 = (bcs1-bm1)*3.0 / bss1;\n    \n    // finish\n    float bf1 = bcs1/pow(bss1, 2.0) - bsk1;\n    float bf2 = bcs2/pow(bss2, 2.0) - bsk2;\n    float bf3 = bcs3/pow(bss3, 2.0) - bsk3;\n    float bf4 = bcs4/pow(bss4, 2.0) - bsk4;\n    float bf = (bf1+bf2+bf3+bf4)/4.0;\n\n    // Output to screen w/ Tonemapping\n    fragColor = tex/(bf/4.2592)*(bf/(bf+1.0));\n}","name":"Buffer C","description":"","type":"buffer"}]}