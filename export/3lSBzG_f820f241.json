{"ver":"0.1","info":{"id":"3lSBzG","date":"1599157454","viewed":150,"name":"Color Hue Pickers","username":"Patate1er","description":"A new version of my color picker writen here : https://www.shadertoy.com/view/tlBfDw\nI wanted to tile my color picker while being able to keep the position of the circle to get the good color and not the same for each one","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","colorpicker"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Constants\nconst float PI = 3.14159;\nconst float scale = 5.;\n\nconst float r1 = .45;//big circle\nconst float w = .13;//big circle width\nconst float r2 = .15;//small circle\n\n// Official HSV to RGB conversion \nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\n//Tiling function that is a variant of a function from the chapter 9 of \n//The Book of Shaders https://thebookofshaders.com/09/\nvec2 tile(vec2 _st, float _zoom, vec2 offset){\n    _st *= _zoom;\n    return fract(_st+offset);\n}\n\nvec2 normY(vec2 _coord){\n    return vec2((_coord.x - 0.5*iResolution.x)/iResolution.y,_coord.y/iResolution.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Normalized pixel coordinates (from 0 to 1 in y position)\n    //variable will be reused for the circle position later :3, that can explain the name\n    vec2 circlePos = normY(fragCoord);\n    \n    //local uv (centered on circle center)\n    vec2 uv = tile(circlePos,scale,vec2(0.0,0.0));\n    uv-=vec2(0.5);\n    \n    //position of the circle (center)\n    //circlePos = (floor(circlePos*scale)+0.5)/scale;\n    circlePos-=uv/scale;\n    \n    //distance of center\n    float d = length(uv);\n    \n\t//circles\n    float c1 = smoothstep(r1,r1-0.01,d) - smoothstep(r1-w, r1-w-0.01,d);\n    float c2 = smoothstep(r2,r2-0.01,d);\n    \n    //colors\n    float h = (atan(uv.x,uv.y))/PI*.5;\n    vec3 col_out = hsv2rgb(vec3(h,.7,.95));\n    \n    vec2 mouse = normY(iMouse.xy);\n    float h2 = (atan(mouse.x-circlePos.x,mouse.y-circlePos.y))/PI*0.5;\n    vec3 col_in = hsv2rgb(vec3(h2,.7,.95));\n    \n    //picker\n    float p = smoothstep(0.005 / d,0.003 / d,min(min(abs(h2-h),abs(h2-h+1.)),abs(h2-h-1.)));\n    p = max(p-c1,0.);\n    p *= d<r1-0.01?1.:0.;\n    \n    // Output to screen\n    fragColor = vec4(c1 * col_out + min(c2+p,1.) * col_in,1.0);\n}","name":"Image","description":"","type":"image"}]}