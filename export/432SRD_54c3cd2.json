{"ver":"0.1","info":{"id":"432SRD","date":"1710330878","viewed":147,"name":"Analog Video Feedback Attempt #1","username":"jcarrano","description":"Attempting to replicate old school analog video feedback. Will add more realistic effects in a later fork.","likes":3,"published":3,"flags":32,"usePreview":0,"tags":["feedback","analog"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nmat3 proj(float g, float h)\n{\n    return mat3\n    (\n        vec3(1.01,0.01,g),\n        vec3(-0.01,0.99,h),\n        vec3(.5,.5,1.005)\n    );\n}\n\n// https://www.pcg-random.org/\nvoid pcg4d(inout uvec4 v)\n{\n\tv = v * 1664525u + 1013904223u;\n    v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;\n    v = v ^ (v>>16u);\n    v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float g = 0.1 * cos(iTime/1.2);\n    float h = 0.1 * sin(iTime/1.0);\n    vec2 uv = fragCoord/iResolution.xy - 0.5;\n    vec3 pqr = proj(g,h)*vec3(uv, 1.0);\n\n    vec4 avgValue = textureLod(iChannel0, vec2(0.5), 10.0);\n    \n    // Automatic Gain Control\n    float avg_lumi = (avgValue.r + avgValue.g + avgValue.b)/3.0;\n    float agc0 = avg_lumi-0.5;\n    float agc= 1.0 - agc0*agc0*agc0*10.0;\n    \n    // Automatic White Balance\n    vec3 wb0 = (avgValue.rgb + 0.1) / (max(avgValue.r, max(avgValue.g, avgValue.b)) + 0.1);\n    vec3 wb1 = (2.0 - sqrt(wb0)) * agc;\n    \n    \n    vec3 screen = textureProj(iChannel0, pqr).rgb;\n    \n    uvec4 seed0 = uvec4(fragCoord, uint(iFrame), (agc0+0.5)*512.0);\n    pcg4d(seed0);\n    vec3 noise = vec3(seed0.rgb%256u)/5000.0;\n    \n    \n    fragColor.rgb = pow(clamp(wb1*screen*0.98 + noise, 0.0, 1.0), vec3(1.2));\n}","name":"Buffer A","description":"","type":"buffer"}]}