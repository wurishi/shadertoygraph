{"ver":"0.1","info":{"id":"4s3GzH","date":"1447938214","viewed":1689,"name":"Road","username":"kinerius","description":"First custom shader here.\nThis is just a test for a \"burnout\" style shader for a game made in Phaser, its Mobile friendly.\nAny feedback is mostly welcome.","likes":19,"published":1,"flags":0,"usePreview":0,"tags":["depth","burnout","texturedeformation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// Created by Kinerius\n// inspired by: https://www.shadertoy.com/view/XsXGWM\n\n// phaser integration stuff\n/*precision lowp float; \nuniform float time;\nuniform vec2 resolution;\nuniform sampler2D iChannel0;\nuniform sampler2D iChannel1;*/\n\nfloat time;\n\nfloat fp_mountains = 0.2;\nfloat hCut = 0.495;\nfloat globalSpeed = 1.9;\n\nvec2 puntoFuga = vec2(0.5,0.45);\n\nvec2 hDef;\nvec2 vDef;\nvec2 uv;\nvec2 texcoord;\nvec2 texcoord2;\n\nvec2 resolution;\n\nvoid calcHorizon ( in float speed, in float persp  ) \n{\n \ttexcoord.y = mod(-time*speed*globalSpeed,1.0);\n   \tfloat zz = 1.0/(1.0-uv.y*persp*1.14);\n    texcoord.y -= zz * sign(zz);\n    hDef = texcoord.xy * vec2(zz*1.13, 1.0) - vec2(zz, 0.0);\n}\n\nvoid calcVertical( in float speed, in float persp  ) \n{  \n    texcoord2.x = mod(-time*speed*globalSpeed,1.0);\n   \tfloat zz = 2.0/(1.0-uv.x*persp);\n    texcoord2.x -= zz * sign(zz);\n    vDef = texcoord2.xy * vec2(1.0, zz*(2.0)) - vec2(0.5, zz) ;  \n}\n\nvoid addRoad(in vec4 background, out vec4 tex ) \n{    \n    if ( uv.x < uv.y * (0.5 + puntoFuga.y) ) // left side\n    {\n     \ttex = background;\n    }else  \n    if ( uv.x > (1.0 - (uv.y  * (0.5 + puntoFuga.y)) ) ) // right side\n    {\n     \ttex = background;\n    } else     \n    if (uv.y > hCut ) // horizontal cut\n    {\n     \ttex = background;   \n    } else {\n        calcHorizon(2.5, 1.7);\n    \ttex = texture(iChannel0, hDef );\n        tex += vec4(0.2,0.2,0.0,1.0);\n    }\n}\n\nvoid addSideRoad (in vec4 background, out vec4 tex ) \n{   \n    if ( uv.x < (uv.y - 0.42) * (0.5 + puntoFuga.y * 12.0) ) // left side\n    {\n     \ttex = background;\n    }else  \n    if ( uv.x > (1.0 - ((uv.y - 0.42)  * (0.5 + puntoFuga.y * 12.0)) ) ) // right side\n    {\n     \ttex = background;\n    }else\n    if (uv.y > hCut ) // horizontal cut\n    {\n     \ttex = background;   \n    } else {\n        calcHorizon(1.50, 1.7);\n        tex = texture(iChannel0, hDef );\n        tex.r *= 0.2;\n        tex += vec4(0.2,0.2,0.0,1.0);\n    }\n    \n    \n}\n\nvoid addLeftMountains (in vec4 background, out vec4 tex ) \n{    \n    if ( uv.x > uv.y * (0.5 + fp_mountains * 3.1) ) // left\n    {\n     \tcalcVertical(0.50, 2.0);\n   \t \tvDef.y = 1.0 - vDef.y;\n    \ttex = texture(iChannel1, vDef );    \n        tex *= vec4(0.9,0.75,0.4,1.0);\n    }else {\n     \ttex = background;   \n    }\n}\nvoid addRightMountains (in vec4 background, out vec4 tex ) \n{\n    if ( uv.x < (1.0 - (uv.y  * (0.5 + fp_mountains *3.1)) ) ) // right\n    {\n     \tcalcVertical(0.50, 2.0);\n    \ttex = texture(iChannel1, vDef );  \n        tex *= vec4(0.9,0.75,0.4,1.0);\n    } else {\n     \ttex = background;   \n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    /// These are for shadertoy only\n    time = iTime;\n    resolution = iResolution.xy;\n    ////////////////////////////////\n    \n\tuv = fragCoord.xy / resolution.xy;\n    vec4 background = vec4(0.3,0.3,0.9,1.0);\n    background.rgb *= 1.2 + uv.y;\n\n    texcoord = fragCoord.xy / vec2(resolution.y);\n    texcoord2 = fragCoord.xy / vec2(resolution.y);\n    \n    addLeftMountains( background, background);\n    addRightMountains( background, background);\n    addSideRoad( background, background);\n    addRoad( background, background);\n    \n\tfragColor = background;\n}","name":"","description":"","type":"image"}]}