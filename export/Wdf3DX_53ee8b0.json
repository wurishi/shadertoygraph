{"ver":"0.1","info":{"id":"Wdf3DX","date":"1547610959","viewed":400,"name":"Image Transition","username":"anemolo","description":"Scaling the x while transitioning gives it that cool effect :)","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["transition"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define PI 3.14159265359\nmat2 scale(vec2 _scale){\n    return mat2(_scale.x,0.0,\n                0.0,_scale.y);\n}\n\n// vec2 scaled = scale(vec2(1. + sin(fract(trans) * PI) )) * uv;\n// vec2 scaled = scale(vec2(1. + sin(fract(trans) * PI) * 0.5 +0.5 )) * uv;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float trans = smoothstep(0.,0.75,sin(uv.x + iTime));\n    \n    \n    vec2 scaled = scale(vec2(1. + sin(fract(trans) * PI) )) * uv;\n    uv.x = scaled.x;\n    \n    // Also transition Y the same way to get a really cool diagonal effect\n    // float trans2 = smoothstep(0.,0.75,sin(uv.y + iTime));\n\t// vec2 scaled = scale(vec2(1. + sin(fract(trans) * PI) , 1. + sin(fract(trans2) * PI) )) * uv;\n    // uv.y = scaled.y;\n    // Time varying pixel color\n    vec3 img1= vec3(texture(iChannel0,uv,0.));\n    \n    vec3 img2=  vec3(texture(iChannel1,uv,0.));\n    vec3 col = img1 * trans + img2 * (1.-trans);\n\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}