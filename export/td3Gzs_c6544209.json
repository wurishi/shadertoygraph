{"ver":"0.1","info":{"id":"td3Gzs","date":"1574092185","viewed":109,"name":"Ray Marching Testorino","username":"anirul","description":"Simple raymarching example based on youtube https://www.youtube.com/watch?v=PGtv-dBi2wE&t=\nI actually calculated normal in a different way.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 200\n#define MIN_DIST .01\n#define MAX_DIST 100.\n\n// Get the distance and normal to the surface \n// (if the distance is < MIN_DIST in w).\nvec4 GetDist(vec3 pos) \n{\n    vec4 sphere = vec4(0., 1., 6., 1.);\n    float distSphere = length(pos - sphere.xyz) - sphere.w;\n    float distPlane = pos.y;\n    if (distSphere < distPlane) \n        return vec4(normalize(pos - sphere.xyz), distSphere);\n    else \n        return vec4(0, 1, 0, distPlane);\n}\n\n// Get the new distance and the normal to the surface.\n// (if the dirance is < MIN_DIST in w).\nvec4 RayMarching(vec3 ray_origin, vec3 ray_direction) \n{\n    float dist0 = 0.0f;\n    for (int i = 0; i < MAX_STEPS; ++i) {\n        vec3 p = ray_origin + ray_direction * dist0;\n        vec4 normal_dist = GetDist(p);\n        dist0 += normal_dist.w;\n        if (normal_dist.w < MIN_DIST || dist0 > MAX_DIST) \n            return vec4(normal_dist.xyz, dist0);\n    }\n    return vec4(0, 1, 0, dist0);\n}\n\n// Calculate the shade float.\nfloat GetLight(vec3 pos, vec3 normal) \n{\n    vec3 light_pos = vec3(0, 5, 6);\n    light_pos.xz += vec2(sin(iTime), cos(iTime)) * 2.;\n    vec3 light_normal = normalize(light_pos - pos);\n    float light_value = dot(normal, light_normal);\n    float dist_light = \n        RayMarching(pos + normal * MIN_DIST * 2., light_normal).w;\n    if (dist_light < length(light_pos - pos)) light_value *= .1;\n    return light_value;\n}\n\n// Main entry point.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n    vec3 ray_origin = vec3(0, 1, 0);\n    vec3 ray_direction = normalize(vec3(uv.x, uv.y, 1));\n    vec4 result = RayMarching(ray_origin, ray_direction);\n    vec3 pos = ray_origin + ray_direction * result.w;\n    float shade = GetLight(pos, result.xyz);\n    vec3 color = vec3(shade);\n\n    // Output to screen\n    fragColor = vec4(color, 1);\n}","name":"Image","description":"","type":"image"}]}