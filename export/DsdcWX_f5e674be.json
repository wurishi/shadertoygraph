{"ver":"0.1","info":{"id":"DsdcWX","date":"1695642381","viewed":89,"name":"Rhombic Dodecahedron (SDF)","username":"TheTurk","description":"Distance function (exact) for a rhombic dodecahedron.\nOther 3D distance functions:\n[url]https://www.shadertoy.com/playlist/73lfR7[/url]","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["3d","distancefield","sdf","voxel","distance","dodecahedron","tessellation","pyramid","polyhedron","primitive","spacefilling","rhombic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float dodecahedron(vec3 position, float halfSize) {\n    float s = halfSize * 0.5;\n    position = abs(position);\n    position.xy -= vec2(-1.0, 1.0) * min(position.y - position.x, 0.0);\n    position.yz -= vec2(1.0, -1.0) * min(position.y - position.z, 0.0);\n    position.y -= s;\n    position.xz = abs(position.xz);  \n    position.xz -= vec2(-1.0, 1.0) * min(position.z - position.x, 0.0);\n    float h = position.y + position.z - s;\n    vec3 q = position;\n    q.yz -= 0.5 * h;\n    q -= vec3(2.0, 1.0, -1.0) / 3.0 * max(q.x - q.z, 0.0);\n    q = clamp(q, 0.0, s);\n    float d = length(position - q);    \n    return h < 0.0 ? -d : d;\n}\n\nmat3 lookAtMatrix(vec3 from, vec3 to) {\n    vec3 forward = normalize(to - from);\n    vec3 right = normalize(cross(forward, vec3(0.0, 1.0, 0.0)));\n    vec3 up = cross(right, forward);\n    return mat3(right, up, forward);\n}\n\nfloat sdf(vec3 position) { \n    float cornerRadius = 0.01;\n    float halfSize = 0.5; \n    float d = dodecahedron(position, halfSize);\n    d -= cornerRadius;\n    return d;\n}\n\nvec3 normal(vec3 position) {\n    float epsilon = 0.001;\n    vec3 gradient = vec3(\n        sdf(position + vec3(epsilon, 0, 0)) - sdf(position + vec3(-epsilon, 0, 0)),\n        sdf(position + vec3(0, epsilon, 0)) - sdf(position + vec3(0, -epsilon, 0)),\n        sdf(position + vec3(0, 0, epsilon)) - sdf(position + vec3(0, 0, -epsilon))\n    );\n    return normalize(gradient);\n}\n\nfloat raycast(vec3 rayOrigin, vec3 rayDirection) {\n    int stepCount = 128;\n    float maximumDistance = 5.0;\n    float t = 0.0;\n    for (int i = 0; i < stepCount; i++) {\n        if (t > maximumDistance) {\n            break;\n        }\n        vec3 currentPosition = rayOrigin + rayDirection * t;\n        float d = sdf(currentPosition);\n        if (d < 0.0001) {\n            return t;\n        }\n        t += d;\n    }\n    return 0.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tfloat angle = 0.5 * (iTime - 11.7);\n\tvec3 rayOrigin = vec3(1.0 * cos(angle), 0.5, 1.0 * sin(angle));\n    vec3 targetPosition = vec3(0.0);\n    mat3 cameraTransform = lookAtMatrix(rayOrigin, targetPosition);\n    vec3 result = vec3(0.0);\n    ivec2 sampleCount = ivec2(3.0, 3.0);\n    for (int y = 0; y < sampleCount.y; y++) {\n        for (int x = 0; x < sampleCount.x; x++) {\n            vec2 uv = fragCoord + (vec2(float(x), float(y)) / vec2(sampleCount) - 0.5);\n            uv = uv / iResolution.xy;\n            uv = (uv * 2.0) - 1.0;\n            uv.x *= iResolution.x / iResolution.y;\n            vec3 rayDirection = normalize(vec3(uv, 1.5));\n            rayDirection = cameraTransform * rayDirection;\n            float t = raycast(rayOrigin, rayDirection);\n            vec3 color = vec3(0.0);\n            if (t > 0.0) {\n                // same style that Inigo Quilez uses in his shaders\n                vec3 position = rayOrigin + rayDirection * t;\n                vec3 lightDirection = vec3(0.57735);\n                vec3 n = normal(position);\n                float diffuseAngle = max(dot(n, lightDirection), 0.0);\n                // diffuse\n                color = vec3(0.8, 0.7, 0.5) * diffuseAngle;\n                // ambient\n                color += vec3(0.2, 0.3, 0.4) * ((n.y + 1.0) * 0.5);\n            }\n            // gamma        \n            color = sqrt(color);\n            result += color;\n        }\n    }\n    result /= float(sampleCount.x * sampleCount.y);\n\tfragColor = vec4(result, 1.0);\n}","name":"Image","description":"","type":"image"}]}