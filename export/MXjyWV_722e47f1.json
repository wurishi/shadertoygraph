{"ver":"0.1","info":{"id":"MXjyWV","date":"1727761562","viewed":14,"name":"Gradient - PuzzleAndy","username":"PuzzleAndy","description":"Linear and radial gradients","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// License: CC0\n// https://puzzleandy.com\n\n#define NUM_COLS 3\n\nvec3 cols[NUM_COLS] = vec3[](\n\tvec3(1, 0, 0),\n\tvec3(0, 1, 0),\n\tvec3(0, 0, 1)\n);\n\nfloat locs[NUM_COLS] = float[](0., 0.33, 1.);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\t// Linear gradient\n\tvec2 tail = vec2(0, 0);\n\tvec2 head = vec2(500, 500);\n\tvec2 a = (fragCoord.xy - tail);\n\tvec2 b = (head - tail);\n\tfloat dist = dot(a, b / length(b)) / length(b);\n\n\t// Radial gradient\n\t//vec2 center = iResolution.xy / 2.;\n\t//float radius = iResolution.y / 2.;\n\t//float dist = length(fragCoord.xy - center) / radius;\n\n\tint i = 0;\n\tfor (; i < NUM_COLS - 1; i++)\n\t\tif (dist < locs[i + 1])\n\t\t\tbreak;\n\tfloat x = (dist - locs[i]) / (locs[i + 1] - locs[i]);\n\tfloat p = smoothstep(0., 1., x);\n\tvec3 col = mix(cols[i], cols[i + 1], p);\n\tfragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}