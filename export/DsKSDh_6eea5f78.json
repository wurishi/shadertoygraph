{"ver":"0.1","info":{"id":"DsKSDh","date":"1681039931","viewed":120,"name":"Music Visualizer mod 4","username":"KingHashish","description":"Testing the new SoundCloud input","likes":6,"published":1,"flags":64,"usePreview":0,"tags":["2d","sound","soundcloud"],"hasliked":0,"parentid":"mdGSDh","parentname":"Fork Music Visu KingHashis 543"},"renderpass":[{"inputs":[{"id":"MstGzn","filepath":"https://soundcloud.com/beethovenquartet/string-quartet-no-11-op-95-2?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","previewfilepath":"https://soundcloud.com/beethovenquartet/string-quartet-no-11-op-95-2?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[],"code":"#define PI 3.14159265358979323\n#define T 0.1\n#define ZOOM (0.35*iResolution.y)\n\n#define hue(a) (.6 + .6*cos(2.*PI*a + vec3(0,-2.*PI/3.,2.*PI/3.)))\n#define cmul(z1, z2) (mat2(z1, -z1.y, z1.x)*z2)\n#define cdiv(z1, z2) (z1*mat2(z2, -z2.y, z2.x)/dot(z2, z2))\n#define clog(z) vec2(0.5*log(dot(z,z)), atan(z.y, z.x))\n\nvec2 cexp(vec2 z, vec2 c)\n{\n    float argz, m, a;\n    float lnz = dot(z,z);\n    \n    if (lnz == 0.) return vec2(0., 0.);\n    else {\n        lnz = 0.5*log(lnz);\n        argz = atan(z.y, z.x);\n        \n        m = exp(c.x*lnz - c.y*argz);\n        a = c.x*argz + c.y*lnz;\n        \n        return m*vec2(cos(a), sin(a));\n    }\n}\nvec3 hrgb2(vec2 w)\n{\n    vec3 c, cc;\n    float mm;\n    float p;\n    \n    float m = length(w);\n    float a = (PI + atan(w.y, -w.x))/(2.0*PI);\n    \n    m = log(1. + 1000.*m);\n    \n    //cc = 0.;\n    //cc.r =  0.5 - 0.5*sin(2.0*PI*a - PI/2.0 + a*m*100.);\n   //cc.g = (0.5 + 0.5*sin(2.0*PI*a*1.5 - PI/2.0 + a*m*100.));// * float(a < 0.66);\n    //cc.b = (0.5 + 0.5*sin(2.0*PI*a*1.5 + PI/2.0 + a*m*100.));// * float(a > 0.33);\n    \n    cc.r = 0.5 - 0.5*sin(2.0*PI*a - PI/2.0 + m*10.4 + 2.*iTime);\n    cc.g = 0.5 - 0.5*sin(2.0*PI*a - PI/2.0 + m*10.4 + 2.*iTime) - 20.*exp(-m);\n    cc.b = 0.;\n    \n    \n    //cc -= 0.1*m;\n    //c = 0.5*(hue(a) + cc);\n    c = cc;\n    \n    //mm = fract(m);\n    //p = fract(mod(a, 1.0/16.0));\n     \n    //c -= 0.15*mm + 1.5*p;\n    \n    //if (/*length(w) + .05 > 1. &&*/\n    //    (fract(w.x) < .05 || fract(-w.x) < .05 ||\n    //     fract(w.y) < .05 || fract(-w.y) < .05)) c -= 0.5;\n    \n    return c;\n}\nvec3 hrgb5(vec2 w)\n{\n    \n    float m = length(w);\n    float a = (PI + atan(w.y, w.x))/(2.0*PI);\n    \n    m = log(1. + 1000000.*m);\n\n    float mm = fract(m);\n    float p = fract(mod(a, 1.0/8.0));\n\n    vec3 c;\n\n    c.r =  0.5 - 0.5*sin(2.0*PI*a - PI/2.0 );\n    c.g = (0.5 + 0.5*sin(2.0*PI*a*1.5 - PI/2.0 )) * float(a < 0.66);\n    c.b = (0.5 + 0.5*sin(2.0*PI*a*1.5 + PI/2.0 )) * float(a > 0.33);\n    \n    //c.r =  0.5 - 0.5*sin(2.0*PI*a - PI/2.0 );\n    //c.g = (0.5 + 0.5*sin(2.0*PI*a*2.0 - PI)); //* float(a < 0.66);\n    //c.b = (0.5 + 0.5*sin(2.0*PI*a*1.5 + PI/2.0 )) * float(a > 0.33);\n    \n    \n    c -= 0.35*fract(m) + 5.35*fract(mod(a, 1.0/16.0));\n    \n    \n    \n    //c -= 0.35*pow( abs(sin(1.*PI*w.x))*abs(sin(1.*PI*w.y)), 0.2);\n    \n    //c = 0.5*(c + hue(a));\n    \n    //c -= 0.3*mm + 2.*p;\n    //c = vec3(1.,1.,1.);\n    \n    //c -= 0.1*pow( sin(2.*PI*fract(w.x))*sin(2.*PI*fract(w.y)), 0.225);\n    \n    //if ( pow( sin(8.*PI*(w.x))*sin(8.*PI*(w.y)), 0.725) < T )\n        \n        \n        c -= 0.1*pow( abs(sin(0.1*PI*(w.x)))*abs(sin(0.1*PI*(w.y))), 0.5);\n        \n    //if (//length(w) + T/2. > 1. &&\n    //    (fract(w.x) < T || fract(-w.x) < T ||\n    //     fract(w.y) < T || fract(-w.y) < T)) c -= 0.4;\n    \n    return c;\n}\nvec3 hrgb(vec2 w)\n{\n    float a = atan(w.y, w.x); \n    \n    vec2 v;\n    \n    if (true) { //polar\n        v = w;\n        w.x = atan(v.y, v.x)/(PI/0.01) /*+ iTime*/;\n        w.y = length(v);\n        w.y = log(1. + 100.*w.y);\n        \n        \n        //w.y -= fract(iTime);\n        \n    }\n\n    vec3 c;\n    \n    \n    //***\n    a = (PI + a)/(2.*PI);\n    \n    //c.r =  0.5 - 0.5*sin(2.0*PI*a - PI/2.0 );\n    //c.g = (0.5 + 0.5*sin(2.0*PI*a*1.5 - PI/2.0 )) * float(a < 0.66);\n    //c.b = (0.5 + 0.5*sin(2.0*PI*a*1.5 + PI/2.0 )) * float(a > 0.33);\n    \n    c.r =  0.5 - 0.5*sin(2.0*PI*a - PI/2.0 );\n    c.g = (0.5 + 0.5*sin(2.0*PI*a*2.0 - PI)); //* float(a < 0.66);\n    c.b = (0.5 + 0.5*sin(2.0*PI*a*1.5 + PI/2.0 )) * float(a > 0.33);\n                \n    c -= 0.15*fract(10.* w.y) + 3.5*fract(mod(a, 1.0/16.));\n    c -= 0.35*pow( abs(sin(1.*PI*v.x))*abs(sin(1.*PI*v.y)), 0.2);\n    //***\n    \n        \n    /*\n    float c1;\n    c1 = 1. - 1.0*pow(abs(sin(2.*PI*w.x))*abs(sin(2.*PI*w.y)), 0.15);\n    c = vec3(c1, c1, c1);\n    */\n    \n\n    \n    if (false) { //checkerboard\n        int b = (abs(int(2.*fract(w.x)))) \n              ^ (abs(int(2.*fract(w.y))));\n\n        if (b == 0)\n            if (abs(a) > PI/2.) \n                if (a > 0.) c = vec3(1.,0.,0.); else c = vec3(0.,1.,0.);\n            else \n                if (a > 0.) c = vec3(1.,1.,1.); else c = vec3(0.,0.,1.);\n\n        else {\n            c = vec3(0.,0.,0.);\n        }\n    }\n       \n    return c;\n}\nvec2 f(vec2 z, int nn)\n{\n    vec2 w, p, q, g;\n    \n    \n    w = vec2(2., 0.);\n    int n = 12;\n    int j = 1;\n    for (int i=0; i<n; i++) {\n    \n        vec2 z0 = vec2(cos(2.*PI*float(i)/float(n)),\n                       sin(2.*PI*float(i)/float(n)));\n        \n        //w = cmul(w, (z - z0));\n        if (j == 1) \n            w = cmul(w, (z - z0));\n        else\n            w = cdiv(w, (z - z0));\n        \n        j = j ^ 1;\n    }\n        \n    //w = z;\n    return w;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec2 z, w, w1, w2, w3, w4, vv;\n    \n    z = fragCoord - iResolution.xy/2.;\n\n    //if (iMouse.xy != vec2(0., 0.)) //to center at origin\n    //    z -= iMouse.xy - iResolution.xy/2.;\n    \n    //w  = f( z/ZOOM, 0 );\n    //fragColor = vec4(hrgb(w), 1.0);\n    \n    /*\n    int n = 10;\n    \n    w  = f( z/ZOOM, n ); \n    w1 = f( (z + vec2(-.25,-.25))/ZOOM, n );\n    w2 = f( (z + vec2(-.25, .25))/ZOOM, n );\n    w3 = f( (z + vec2( .25,-.25))/ZOOM, n );\n    w4 = f( (z + vec2( .25, .25))/ZOOM, n );\n    \n    \n    fragColor = vec4(0.2*(hrgb(w) +\n                          hrgb(w1) + hrgb(w2) + \n                          hrgb(w3) + hrgb(w4)), 1.0);*/\n    \n    \n    z = z/ZOOM;\n    \n    \n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    //float wave = texture( iChannel0, vec2(uv.x, 0.25) ).x; //fft\n                 //texture( iChannel0, vec2(uv.x, 0.75) ).x;\n    \n    int tx = int(uv.x*50.0);\n    \n    int n = 12;\n    int j = 1;\n    w = vec2(1., 0.);\n    for (int i=0; i<n; i++) {\n        vec2 z0 = 0.8*vec2(cos(0.7+2.*PI*float(i)/float(n)),\n                           sin(0.7+2.*PI*float(i)/float(n)));\n                       \n        float fft  = texelFetch( iChannel0, ivec2(i+10, 0), 0 ).x; \n                       \n        z0 *= log(1.+fft);\n        \n        //log((texture( iChannel0, vec2(i * int(iResolution.x/10.), 0.25) ).x)*1000.)/10.;\n        \n        if (j == 1) \n            w = cmul(w, (z - z0));\n        else\n            w = cdiv(w, (z - z0));\n        \n        j = j ^ 1;\n    }\n    \n    w = 18.5*texelFetch( iChannel0, ivec2(0, 0), 0 ).x*cexp( vec2(exp(1.),0.), w ) ;\n    vv = w;\n    \n    j = 0;\n    for (int i=0; i<n; i++) {\n        vec2 z0 = 2.1*vec2(cos(2.*PI*float(i)/float(n)),\n                           sin(2.*PI*float(i)/float(n)));\n                       \n        float fft  = texelFetch( iChannel0, ivec2(i+ 30, 0), 0 ).x; \n                       \n        z0 *= log(1.+fft);\n        \n        //log((texture( iChannel0, vec2(i * int(iResolution.x/10.), 0.25) ).x)*1000.)/10.;\n        \n        if (j == 1) \n            w = cdiv(w, (z - z0));\n        else\n            w = cdiv(w, (z - z0));\n        \n        j = j ^ 1;\n    }\n\n\n    \n    w = 8.1*texelFetch( iChannel0, ivec2(0, 0), 0 ).x*cexp( vec2(exp(1.),0.), w ) ;\n    \n    w = cmul(w,vv);\n\n    \n    \n    //w = cmul(w, cexp(vec2(exp(1.),0.), vec2(0., PI*texelFetch( iChannel0, ivec2(0, 0), 0 ).x)) );\n    \n    \n                j = 0;\n    for (int i=0; i<n; i++) {\n        float zz0 = 1.2*PI*texelFetch( iChannel0, ivec2(0, 0), 0 ).x;\n        vec2 z0 = 3.8*vec2(cos(zz0+2.*PI*float(i)/float(n)),\n                           sin(zz0+2.*PI*float(i)/float(n)));\n                       \n        float fft  = texelFetch( iChannel0, ivec2(i+ 0, 0), 0 ).x; \n                       \n        z0 *= log(1.+fft);\n        \n        //log((texture( iChannel0, vec2(i * int(iResolution.x/10.), 0.25) ).x)*1000.)/10.;\n        \n        if (j == 1) \n            w = cmul(w, (z - z0));\n        else\n            w = cdiv(w, (z - z0));\n        \n        j = j ^ 1;\n    }\n    \n        w = cmul(w, texelFetch( iChannel0, ivec2(0, 0), 0 ).x*z);//cexp(z, vec2(1.*((2.*PI/12.)+texelFetch( iChannel0, ivec2(0, 0), 0 ).x), 0.)) );\n    \n    \n\n    \n    \n    fragColor = vec4(hrgb(w), 1.0);\n    \n    \n    //vec2 uv = fragCoord.xy / iResolution.xy;\n    //vec2 uv = fragCoord.xy / vec2(10., 1.);\n    //float wave = texture( iChannel0, vec2(uv.x, 0.25) ).x; //fft\n                 //texture( iChannel0, vec2(uv.x, 0.75) ).x;\n    \n    \n    //fragColor = vec4(float(fragCoord.y < wave*200.), 0., 0., 1.);\n}","name":"Image","description":"","type":"image"}]}