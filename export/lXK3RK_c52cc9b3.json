{"ver":"0.1","info":{"id":"lXK3RK","date":"1717937883","viewed":3,"name":"Fourier graph test","username":"Yeeun","description":"Fourier graph test","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fourier"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NUM_SAMPLES 100\n#define PI 3.14159265359\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    float time = iTime * 0.5;\n\n    // Calculate the number of Fourier components based on a sine wave\n    float n = mix(1.0, 100.0, (sin(time) + 1.0) * 0.5);\n\n    // Calculate the angle of rotation\n    float angle = time;\n\n    vec3 closestColor = vec3(0.0);\n    float closestDistance = 1.0;\n\n    // Calculate the Fourier series with ascending and descending frequencies\n    float petal = 0.0;\n    for (int i = 0; i < int(n); i++) {\n        float freq = float(i + 1);\n        float coeff = 1.0 / (10.0 * freq); // Decrease amplitude coefficient\n        float x = coeff * cos(freq * uv.x + angle);\n        float y = coeff * sin(freq * uv.x + angle);\n        float result = x + y;\n\n        petal += coeff * sin(freq * (uv.x + time * 2.0));\n\n        float lineDistance = abs(uv.y - petal);\n\n        float lineThickness = 0.005;\n        float lineValue = 0.5 + 0.5 * sin(lineThickness * PI);\n        if (lineDistance < lineThickness && lineDistance < closestDistance) {\n            closestDistance = lineDistance;\n            closestColor = vec3(lineValue);\n        }\n    }\n\n    fragColor = vec4(closestColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}