{"ver":"0.1","info":{"id":"lsK3Wh","date":"1454341989","viewed":175,"name":"flying ellipses","username":"samuelotherion","description":"ellipses","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["ellipses"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"#define pi  3.14159\n#define ID2 vec2( 1., 0., 0., 1. )\n\nstruct Ellipse {\n    \n    vec2\n        center,\n        size;\n    \n    mat2\n        loc;\n    \n    vec4\n        col;\n};\n\nmat2\n    rot( float p_angle ) {\n        \n        float\n            c = cos( p_angle ),\n            s = sin( p_angle );\n        \n        return mat2( c, s, -s, c );\n    }\n    \nEllipse\n    createEllipse( in vec2 p_center, in float p_width, in float p_height, in float p_angle, in vec4 p_col ) {\n    \n    \treturn Ellipse( p_center, vec2( p_width, p_height ), rot( p_angle ), p_col );\n    }\n\nbool\n    inEllipse( out float p_distSqr, in vec2 p_xy, in Ellipse p_ellipse ) {\n        \n        vec2\n            dst = ( p_ellipse.loc * ( p_ellipse.center - p_xy ) ) * ( 1. /  p_ellipse.size );\n        \n        p_distSqr = dot( dst, dst );\n        \n        return ( p_distSqr < 1. );\n    }\n\nfloat\n    t;\n\nvec2\n    xy;\n\n#define NUM_OF_ELLIPSES 4\n\nEllipse\n    ellipses[ NUM_OF_ELLIPSES ];\n\nvoid\n    init( in vec2 p_xy ) {\n        \n        t = iTime;\n        xy = ( p_xy / iResolution.xy - .5 ) * vec2( iResolution.x / iResolution.y, 1. );\n        \n        ellipses[ 0 ] = createEllipse( vec2( +0., +0. ), .50, .25 , 0., vec4( .3 + .1 * sin( t ), .5 - .4 * sin( t ), .6 + .4 * sin( t ), 1. ) );\n        ellipses[ 1 ] = createEllipse( vec2( +0., +0. ), .50, .50 , 0., vec4( .9 - .2 * sin( t ), .7 + .2 * sin( t ), .2 - .2 * sin( t ), 1. ) );\n        ellipses[ 2 ] = createEllipse( vec2( +0., +0. ), .25, .25 , 0., vec4( .5 - .45 * sin( t ), 0., .5 + .45 * sin( t ), 1. ) );\n        ellipses[ 3 ] = createEllipse( vec2( +0., +0. ), .35, .15 , 0., vec4( .6 + .3 * sin( 2.231 * t ), .5 + .45 * sin( 1.231 * t ), 0., 1. ) );\n    }\n\nvoid\n    animate( ) {\n        \n        float\n            t2 = mod( t, 45. );\n        \n        if( t2 < 5. ) {\n        \n        \tellipses[ 0 ].loc = rot( t ) * ellipses[ 0 ].loc;\n        }\n        else {\n\n\t        if( t2 < 20. ) {\n                \n                ellipses[ 0 ].loc = rot( t ) * ellipses[ 0 ].loc;\n                ellipses[ 0 ].center = .1 + .3 * vec2( cos( t ), sin( t ) );\n                ellipses[ 1 ].loc = rot( 2.1 * t ) * ellipses[ 1 ].loc;\n                ellipses[ 1 ].center = ellipses[ 1 ].center + .3 * vec2( cos( t ), sin( t ) );\n                ellipses[ 1 ].size = vec2( .5 + .2 * cos( .6 * t ), .5 + .2 * sin( .6 * t ) ); \n            }\n            else {\n                \n                ellipses[ 0 ].loc = rot( t ) * ellipses[ 0 ].loc;\n                ellipses[ 0 ].center = .2 * vec2( cos( t ), sin( t ) );\n                ellipses[ 1 ].loc = rot( 2.1 * t ) * ellipses[ 1 ].loc;\n                ellipses[ 1 ].center = ellipses[ 0 ].center + .3 * vec2( cos( t ), sin( t ) );\n                ellipses[ 1 ].size = vec2( .5 + .2 * cos( .6 * t ), .5 + .2 * sin( .6 * t ) ); \n                ellipses[ 2 ].loc = rot( 4.1 * t ) * ellipses[ 2 ].loc;\n                ellipses[ 2 ].center = ellipses[ 1 ].center + .2 * vec2( cos( 3. * t ), sin( 3. * t ) );\n                ellipses[ 2 ].size = vec2( .5 + .2 * cos( 3.6 * t ), .5 + .2 * sin( 3.6 * t ) ); \n                ellipses[ 3 ].loc = rot( -2.1 * t ) * ellipses[ 2 ].loc;\n                ellipses[ 3 ].center = ellipses[ 2 ].center + .2 * vec2( cos( 4. * t ), sin( 4. * t ) );\n                ellipses[ 3 ].size = vec2( .2 + .1 * cos( 1.6 * t ), .2 + .1 * sin( 1.6 * t ) ); \n            }\n        }\n    }\n\nvec4\n    mixAll( ) {\n        \n        vec4\n            col = vec4( 0. );\n        \n        float\n            dist = 10000.;\n        \n        for( int i = 0; i < NUM_OF_ELLIPSES; i++ ) {\n            \n            if( inEllipse( dist, xy, ellipses[ i ] ) ) {\n\n                col += ellipses[ i ].col * sqrt( 1. - dist );\n            }\n        }\n        \n        if( col.a < 1.01 - cos( .5 * t ) ) {\n        \t\n              col = vec4( .01, .02, .04,  1. );\n        }\n//        else {\n        \n        \t//col /= col.a;\n//        }\n        \n        return col;\n    }\n\n\nvoid \n    mainImage( out vec4 p_col, in vec2 p_xy ) {\n        \n        init( p_xy );\n        \n        animate( );\n        \n        p_col = mixAll( );\n        \n}","name":"","description":"","type":"image"}]}