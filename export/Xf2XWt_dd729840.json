{"ver":"0.1","info":{"id":"Xf2XWt","date":"1706983807","viewed":124,"name":"Desktop Background #1","username":"Nanerbeet","description":"Cheap desktop shader background","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["gradient","background","dithering","wallpaper","ellipses","desktop"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TIME (iTime * 0.125f * 0.5f)\n\nstruct Ring\n{\n    vec2 center;\n    vec2 radius;\n    vec3 color1;\n    vec3 color2;\n    float time;\n};\n\nvec3 glowingRing(vec2 p, Ring ring)\n{      \n    float T = ring.time;\n    vec2 rad = ring.radius + cos(T*0.5 + vec2(0.3,1.0));\n\n    float d = sdEllipse( p + ring.center, rad );   \n    vec3 col = ring.color1;\n\n    col *= exp(-2.5*abs(d));\n    col = mix( col, ring.color2, 1.0-smoothstep(0.0,0.005,abs(d)) );\n    \n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.xy;\n       \n    vec3 c1 = vec3(189.0f, 151.0f, 100.0f) / 255.0f;\n    vec3 c3 = vec3( 75.0f, 123.9f, 163.0f) / 255.0f;\n\n    vec3 c2 = c1 + vec3(0.3f, 0.3f, 0.3f);\n    vec3 c4 = c3 + vec3(0.3f, 0.3f, 0.3f);\n    \n    vec3 color1 = vec3(0.0f);\n    vec3 color2 = vec3(0.0f);\n    \n    Ring ring;\n    \n    for (float i = 0.0f; i < 3.0f; i++)\n    {\n        float o = i * 0.1f;\n        ring.center = vec2(-2.0f, cos(TIME*1.123)* -2.0f);\n        ring.radius = vec2( 2.5f, 2.5f + cos(TIME));\n        ring.color1 = c1;\n        ring.color2 = c2;\n        ring.time = o + TIME * 1.0f;\n        color1 = max(color1, glowingRing(p, ring));\n    }\n\n    for (float i = 0.0f; i < 2.0f; i++)\n    {\n        float o = i * 0.1f;\n        ring.center = vec2( sin(TIME)*2.0f, 2.0f);\n        ring.radius = vec2( 2.5f+cos(TIME), 2.5f);\n        ring.color1 = c3;\n        ring.color2 = c4;\n        ring.time = o + TIME * 1.131f + 17.0;\n        color2 = max(color2, glowingRing(p, ring));\n    }\n    \n    //Blend additively or with screen blending\n    // fragColor = vec4(color1+color2 - color1*color2, 1.0);\n    fragColor = vec4(mix(max(color1, color2), color1+color2, 0.75f), 1.0);\n    \n    float noise = (hash13(vec3(fragCoord.x, fragCoord.y, iTime)) - 0.5f) * 4.0f / 255.0f;\n    fragColor += noise;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// The MIT License\n// Copyright Â© 2018 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Distance to a quadratic bezier segment, which can be solved analyically with a cubic.\n\n// List of some other 2D distances: https://www.shadertoy.com/playlist/MXdSRf\n//\n// and iquilezles.org/articles/distfunctions2d\n\nfloat msign(in float x) { return (x<0.0)?-1.0:1.0; }\n\nfloat sdEllipse( vec2 p, in vec2 ab )\n{\n\tp = abs( p ); \n    if( p.x>p.y ){ p=p.yx; ab=ab.yx; }\n\t\n\tfloat l = ab.y*ab.y - ab.x*ab.x;\n\t\n    float m = ab.x*p.x/l; \n\tfloat n = ab.y*p.y/l; \n\tfloat m2 = m*m;\n\tfloat n2 = n*n;\n\t\n    float c = (m2+n2-1.0)/3.0; \n\tfloat c3 = c*c*c;\n\n    float d = c3 + m2*n2;\n    float q = d  + m2*n2;\n    float g = m  + m *n2;\n\n    float co;\n\n    if( d<0.0 )\n    {\n        float h = acos(q/c3)/3.0;\n        float s = cos(h) + 2.0;\n        float t = sin(h) * sqrt(3.0);\n        float rx = sqrt( m2-c*(s+t) );\n        float ry = sqrt( m2-c*(s-t) );\n        co = ry + sign(l)*rx + abs(g)/(rx*ry);\n    }\n    else\n    {\n        float h = 2.0*m*n*sqrt(d);\n        float s = msign(q+h)*pow( abs(q+h), 1.0/3.0 );\n        float t = msign(q-h)*pow( abs(q-h), 1.0/3.0 );\n        float rx = -(s+t) - c*4.0 + 2.0*m2;\n        float ry =  (s-t)*sqrt(3.0);\n        float rm = sqrt( rx*rx + ry*ry );\n        co = ry/sqrt(rm-rx) + 2.0*g/rm;\n    }\n    co = (co-m)/2.0;\n\n    float si = sqrt( max(1.0-co*co,0.0) );\n \n    vec2 r = ab * vec2(co,si);\n\t\n    return length(r-p) * msign(p.y-r.y);\n}\n\nfloat hash13(vec3 p3)\n{\n    //  from DAVE HOSKINS\n    p3 = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}","name":"Common","description":"","type":"common"}]}