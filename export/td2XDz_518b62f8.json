{"ver":"0.1","info":{"id":"td2XDz","date":"1553524375","viewed":402,"name":"Postprocess : barrel blur chroma","username":"flyingrub","description":"Fork of : https://www.shadertoy.com/view/XssGz8","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["blur","barrel","rgb","postprocess","shift"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define conrady\n#define barrel\nfloat amountBarrel = 2.;\nfloat amountZoom = .5;\n\nvec2 remap( vec2 t, vec2 a, vec2 b ) {\n\treturn clamp( (t - a) / (b - a), 0.0, 1.0 );\n}\n\nvec3 spectrum_offset_rgb( float t )\n{\n    float t0 = 3.0 * t - 1.5;\n\tvec3 ret = clamp( vec3( -t0, 1.0-abs(t0), t0), 0.0, 1.0);\n    \n    return ret;\n}\n\nvec2 barrelDistortion( vec2 p, vec2 amt )\n{\n    p = 2.0 * p - 1.0;\n    const float maxBarrelPower = 5.0;\n    float theta  = atan(p.y, p.x);\n    vec2 radius = vec2( length(p) );\n    radius = pow(radius, 1.0 + maxBarrelPower * amt);\n    p.x = radius.x * cos(theta);\n    p.y = radius.y * sin(theta);\n\n    return p * 0.5 + 0.5;\n}\n\nvec2 brownConradyDistortion(vec2 uv, float dist)\n{\n    uv = uv * 2.0 - 1.0;\n    float barrelDistortion1 = 0.1 * dist; // K1 in text books\n    float barrelDistortion2 = -0.025 * dist; // K2 in text books\n\n    float r2 = dot(uv,uv);\n    uv *= 1.0 + barrelDistortion1 * r2 + barrelDistortion2 * r2 * r2;\n    \n    return uv * 0.5 + 0.5;\n}\n\nvec2 distort( vec2 uv, float t, vec2 min_distort, vec2 max_distort )\n{\n    vec2 dist = mix( min_distort, max_distort, t );\n    \n    #ifdef conrady\n    return brownConradyDistortion( uv, 75.0 * dist.x );\n    #endif\n    \n    #ifdef barrel\n    return barrelDistortion( uv,1.75*dist );\n    #endif\n\n}\n\nfloat nrand( vec2 n )\n{\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec3 render( vec2 uv )\n{\n    return texture( iChannel0, uv ).rgb;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n\tvec2 uv = fragCoord.xy/iResolution.xy;\n    \n    const float MAX_DIST_PX = 50.0;\n    float max_distort_px = MAX_DIST_PX * amountBarrel;\n\tvec2 max_distort = vec2(max_distort_px) / iResolution.xy;\n    vec2 min_distort = 0.5 * max_distort;\n    \n    vec2 oversiz = distort( vec2(1.0), 1.0, min_distort, max_distort );\n    uv = mix(uv,remap( uv, 1.0-oversiz, oversiz ),amountZoom);\n    \n    const int num_iter = 7;\n    const float stepsiz = 1.0 / (float(num_iter)-1.0);\n    float rnd = nrand( uv + fract(iTime) );\n    float t = rnd*stepsiz;\n    \n    vec3 sumcol = vec3(0.0);\n\tvec3 sumw = vec3(0.0);\n\tfor ( int i=0; i<num_iter; ++i )\n\t{\n\t\tvec3 w = spectrum_offset_rgb( t );\n\t\tsumw += w;\n        vec2 uvd = distort(uv, t, min_distort, max_distort);\n\t\tsumcol += w * render( uvd );\n        t += stepsiz;\n\t}\n    sumcol.rgb /= sumw;\n    \n    vec3 outcol = sumcol.rgb;\n    outcol =  outcol;\n    outcol += rnd/255.0;\n    \n\tfragColor = vec4( outcol, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}