{"ver":"0.1","info":{"id":"MfVXRh","date":"1714822572","viewed":85,"name":"NEON LOVE HEART","username":"nide","description":"Original: [url=https://www.shadertoy.com/view/WdK3Dz]NEON LOVE[/url]","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","bezier","heart","glow","curve","neon"],"hasliked":0,"parentid":"7l3GDS","parentname":"NEON LOVE Fix"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Original:\n// NEON LOVE by alro - https://www.shadertoy.com/view/WdK3Dz\n\n/* \n * Fixed the creases in the heart caused by the property of the distance field on concave areas.\n * By converting the individual bezier SDF segments into light/glow first,\n * we can treat them as indiviual lights and sum them together.\n * This does make the endpoints to double in intensity as they overlap,\n * so we subtract light on the endpoints to get the smooth lighting properly.\n *\n */\n\n#define PI 3.14159265359\n#define TWO_PI 2. * PI\n#define POINT_COUNT 64\n\nvec2 points[POINT_COUNT];\nconst float speed = -0.15;\nfloat intensity = 1.14;\nfloat thickness = .0035;\nconst float eps = 1e-7;\n\n//https://www.shadertoy.com/view/MlKcDD\n//Signed distance to a quadratic bezier\nfloat sdBezier(vec2 pos, vec2 A, vec2 B, vec2 C){    \n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n\n    float kk = 1.0 / dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n    float kz = kk * dot(d,a);      \n\n    float res = 0.0;\n\n    float p = ky - kx*kx;\n    float p3 = p*p*p;\n    float q = kx*(2.0*kx*kx - 3.0*ky) + kz;\n    float h = q*q + 4.0*p3;\n    \n    if(h >= 0.0){ \n        h = sqrt(h);\n        vec2 x = (vec2(h, -h) - q) / 2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = uv.x + uv.y - kx;\n        t = clamp( t, 0.0, 1.0 );\n\n        // 1 root\n        vec2 qos = d + (c + b*t)*t;\n        res = length(qos);\n    }else{\n        float z = sqrt(-p);\n        float v = acos( q/(p*z*2.0) ) / 3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3 t = vec3(m + m, -n - m, n - m) * z - kx;\n        t = clamp( t, 0.0, 1.0 );\n\n        // 3 roots\n        vec2 qos = d + (c + b*t.x)*t.x;\n        float dis = dot(qos,qos);\n        \n        res = dis;\n\n        qos = d + (c + b*t.y)*t.y;\n        dis = dot(qos,qos);\n        res = min(res,dis);\n\n        qos = d + (c + b*t.z)*t.z;\n        dis = dot(qos,qos);\n        res = min(res,dis);\n\n        res = sqrt( res );\n    }\n    \n    return res;\n}\n\n//http://mathworld.wolfram.com/HeartCurve.html\nvec2 getHeartPosition(float x){\n    x *= TWO_PI;\n    x*=0.5;\n    return vec2(16.0 * sin(x) * sin(x) * sin(x),\n                (13.0 * cos(x) - 5.0 * cos(2.0*x)\n                - 2.0 * cos(3.0*x) - cos(4.0*x)))*0.025;\n}\n\nvec2 func(float x){\n    return vec2(x, sin(x * iTime * TWO_PI));\n}\n\n//https://www.shadertoy.com/view/3s3GDn\nfloat getGlow(float dist, float radius, float intensity){\n    return pow(radius*dist, intensity);\n}\n\nfloat getLooped(float t, vec2 pos){\n\tfor(int i = 0; i < POINT_COUNT; i++){\n        float ff = float(i);\n        float x = ff/float(POINT_COUNT-1);\n        x = -1.0 + 2.0 * x;\n        points[i] = getHeartPosition(x);\n    }\n\tfloat light = 0.;\n    for(int i = -1; i < POINT_COUNT-1; i++){\n        //https://tinyurl.com/y2htbwkm\n        int idx = i < 0 ? POINT_COUNT + i : i;\n        int idxPrev = idx == 0 ? POINT_COUNT-1 : idx-1;\n        int idxNext = idx == POINT_COUNT-1 ? 0 : idx+1;\n        vec2 c_prev = (points[idxPrev] + points[idx]) / 2.0;\n        vec2 c = (points[idx] + points[idxNext]) / 2.0;\n        // Distance from bezier segment\n        float d = sdBezier(pos, c_prev, points[idx], c);\n        // Distance from endpoint (except from first point)\n        float e = distance(pos, c_prev);\n        // Convert the distance to light and accumulate\n        light += ( 1. / max(d - thickness, eps));\n        // Convert the endpoint as well and subtract\n        light -= 1. / max(e - thickness, eps);\n    }\n    return max(0.0, light);\n}\nfloat getSegment(float t, vec2 pos, float offset, float len){\n\tfor(int i = 0; i < POINT_COUNT; i++){\n        float ff = float(i);\n        float x = ff/float(POINT_COUNT-1);\n        x *= len;\n        x += offset;\n        x = fract(x); \n        x = -1.0 + 2.0 * x;\n        points[i] = getHeartPosition(x);\n    }\n    vec2 c = (points[0] + points[1]) / 2.0;\n    vec2 c_prev;\n\tfloat light = 0.;\n    \n    for(int i = 0; i < POINT_COUNT-1; i++){\n        //https://tinyurl.com/y2htbwkm\n        c_prev = c;\n        c = (points[i] + points[i+1]) / 2.0;\n        // Distance from bezier segment\n        float d = sdBezier(pos, c_prev, points[i], c);\n        // Distance from endpoint (except from first point)\n        float e = i > 0 ? distance(pos, c_prev) : 1000.;\n        // Convert the distance to light and accumulate\n        light += 1. / max(d - thickness, eps);\n        // Convert the endpoint as well and subtract\n        light -= 1. / max(e - thickness, eps);\n    }\n    return max(0.0, light);\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\nfloat tri(float x){\n    return 1.0 - abs(1.0 - 2.0 * x);\n}\nfloat sawRampUp(float x){\n    return 2.0 * fract(x);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = fragCoord/iResolution.xy;\n    float widthHeightRatio = iResolution.x/iResolution.y;\n    vec2 centre = vec2(0.5, 0.5);\n    vec2 pos = uv - centre;\n    pos.y /= widthHeightRatio;\n    pos *= 2.0;\n    //Shift upwards to centre heart\n    pos.y -= 0.06;\n\t\n    float t = iTime;\n    \n    float radius = 0.005;\n    radius += max(0.0, 0.038 * (sin(iTime * 2.0) * 0.5));\n    float phaseS = sin(iTime * 0.25);\n    float phaseT = sin(iTime * 0.125 + PI*0.5);\n    //Get first segment\n    float lightWhole = getLooped(iTime, pos);\n    float lightSegment = getSegment(iTime, pos, \n                                    max(0.0, -phaseS)*1., \n                                    max(0.01, phaseT)*32.\n                                    // 0.01+0.99*(phaseS * 0.5 + 0.5)\n                                    );\n    float glowWhole = getGlow(lightWhole, radius, intensity * 1.25);\n    float glowSegment = getGlow(lightSegment, radius, intensity * 0.75);\n\n    float phase = sin(iTime * 1.0) * 0.5 + 0.5;\n    phase = smoothstep(0., 1.0, phase);\n    vec3 colA = mix(vec3(1.0, 0.05, 0.3), vec3(0.1, 0.4, 1.0), phase);\n    vec3 colB = mix(vec3(1.0, 0.05, 0.3), vec3(0.1, 0.4, 1.0), 1.0 - phase);\n    vec3 col = vec3(glowWhole);\n    col += vec3(smoothstep(0., 1.0, glowWhole)) * max(0.0, sin(iTime * 2.0)) * 0.5;\n    col *= colA;\n\n    vec3 col2 = vec3(glowSegment);\n    col2 += vec3(smoothstep(0., 1.0, glowSegment)) * max(0.0, sin(iTime * 2.0)) * 0.5;\n    col2 *= colB;\n\n    // vec2 p = uv * 1.0;\n    // col2 *= pal( p.x, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.33,0.67) );\n    // col2 *= pal( p.x, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.10,0.20) );\n    // col2 *= pal( p.x, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.3,0.20,0.20) );\n    // col2 *= pal( p.x, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,0.5),vec3(0.8,0.90,0.30) );\n    // col2 *= pal( p.x, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,0.7,0.4),vec3(0.0,0.15,0.20) );\n    // col2 *= pal( p.x, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(2.0,1.0,0.0),vec3(0.5,0.20,0.25) );\n    // col2 *= pal( p.x, vec3(0.8,0.5,0.4),vec3(0.2,0.4,0.2),vec3(2.0,1.0,1.0),vec3(0.0,0.25,0.25) );\n    // col2 *= pal( uv.x, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(2.0,1.0,0.0),vec3(0.5,0.20,0.25) );;\n    //Blue glow\n\n\n    col += col2;\n    //Tone mapping\n    col = 1.0 - exp(-col);\n    \n    //Gamma\n    col = pow(col, vec3(0.4545));\n\n    //Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}