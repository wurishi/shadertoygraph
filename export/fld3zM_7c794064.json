{"ver":"0.1","info":{"id":"fld3zM","date":"1635880939","viewed":55,"name":"Simple Distance Filtering.","username":"knotapun","description":"This shader takes the default `new` shader and filters it via a circle, and displays only that circle. This is my first shader.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["first"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nFiltering the input of a shader with a simple distance function.\n*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  \n  // Normalized pixel coordinates -0.5..0.5\n  vec2 uvCentered = fragCoord.xy - (iResolution.xy * vec2(0.5));\n  //The distance from the center of the screen, calculated for each pixel.\n  float uvDistance = sqrt(uvCentered.x * uvCentered.x + uvCentered.y * uvCentered.y);\n  \n  // Normalized mouse coordinates -0.5..0.5\n  vec2 mouseCentered = (iMouse.xy - (vec2(0.5) * iResolution.xy)) ;\n  //convert the coordinates of the mouse to a simple distance from the center of the shader area.\n  float mouseDistance = sqrt(mouseCentered.x * mouseCentered.x + mouseCentered.y * mouseCentered.y);\n  \n  \n  float radius = iMouse.y / 2.0;\n  \n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+(fragCoord.xy / iResolution.xy).xyx+vec3(0,2,4));\n    // Output to screen, using a step function to filter based on distance from mouse click.\n    fragColor = vec4(step(uvDistance, mouseDistance) * col.xyz,1.0);\n}\n\n\n","name":"Image","description":"","type":"image"}]}