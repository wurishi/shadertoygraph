{"ver":"0.1","info":{"id":"DdsBRj","date":"1688957301","viewed":38,"name":"Aprendendo RayMarching pt2","username":"janseninline","description":"Tutorial de RayMarching do canal ArtCode.\nFunções básicas de movimento e alteração de polígonos. ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define SURF_DIST 0.01\n#define PI 3.1415925359\n\nmat2 Rot(float a){\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat smin(float a, float b, float k){\n    float h = clamp(.5+.5*(b - a)/k,0.,1.);\n    return mix(b, a, h) - k*h*(1.-h);\n}\n\n\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r){\n    vec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap)/dot(ab,ab);\n    //t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t *ab;\n    \n    float x = length(p - c)-r;\n    float y = (abs(t-.5)-.5)*length(ab);\n    float e = length(max(vec2(x,y),0.));\n    float i = min(max(x,y),0.);\n    \n    return e + i;\n}\n\nfloat sdTorus(vec3 p, vec2 r){\n    float x = length(p.xz)-r.x;\n    return length(vec2(x, p.y))-r.y;\n}\n\nfloat dBox(vec3 p, vec3 s){\n    return length(max(abs(p)-s, 0.));   \n}\n\n\n\nfloat GetDist(vec3 p){\n   //Comportamento da caixa\n    float pd =  p.y; //distância do plano\n    \n    vec3 bp = p;\n    \n    \n    bp -= vec3(0,1,0); //localização \n    bp.xz *= Rot(iTime); //rotação\n    \n    float bd = dBox(bp , vec3(1.,1.,1.)); //perspectiva \n    \n    \n    float sdA = length(p - vec3(0,1,0))-1.;\n    float sdB = length(p - vec3(1,1,0))-1.;\n    float sd = mix(sdA, bd, sin(iTime)*.5+.5);\n    \n    float d = min(sd,pd);\n    \n   \n    return d;\n\n}\n\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.0;\n    \n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if (dO > MAX_DIST || dS < SURF_DIST ) break;\n    }\n    return dO;\n}\n\nvec3 GetNormal(vec3 p){\n    float d = GetDist(p);\n    vec2 e = vec2(0.01,0);\n    \n    vec3 n= d-vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    return normalize(n);\n}\n\nfloat GetLight(vec3 p){\n    vec3 lightPos = vec3(3,10,-11);\n    \n    //luz girando\n    //lightPos.xz += vec2(sin(iTime), cos(iTime))*2.;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n,l), 0.,1.);\n    float d = RayMarch(p+n*SURF_DIST*2.,l);\n    if(d<length(lightPos-p)) dif *=.1;\n    \n    return dif;\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    //ajuste da pespectiva da câmera\n    vec3 ro = vec3(1,2,-5);\n    vec3 rd = normalize(vec3(uv.x,uv.y-.3,1.2));\n    \n    float d = RayMarch(ro,rd);\n    \n    vec3 p = ro +rd*d;\n    float dif = GetLight(p);\n    col = vec3(dif);\n    \n        \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}