{"ver":"0.1","info":{"id":"3llBRS","date":"1597029706","viewed":211,"name":"Fourier Sierpinski triangle","username":"rory618","description":"Synthesizing the Sierpinski triangle from its fourier transform. Mouse to show spectrum. Lines 7-9 of common give the coordinates of each half scale self similar parts of the fractal. Sierpinski carpet example also given below","likes":9,"published":1,"flags":32,"usePreview":0,"tags":["2d","fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    if(I.x<iMouse.x){\n    vec2 s = spectrum((I*2.-R.xy)/R.y*400.,7);\n        O = vec4(1.+.1*log(length(s)));\n    } else {\n        O = texture(iChannel0, I/R.xy);\n        O /= O.z;\n        O = vec4(1.+log(length(O.xy))/5.);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 spectrum( vec2 f, int iters)\n{\n    vec2 spec = vec2(1,0);\n    float d = 1.;\n    \n    //Sierpinski triangle\n    //*\n    for(int i = 0; i < iters; i++){\n        spec = mat2(spec, -spec.y, spec.x) * (\n               cos(d*dot(f,vec2( 0    ,   .8)) + vec2(0,-1.5707)) +\n               cos(d*dot(f,vec2( 0.866, -.7)) + vec2(0,-1.5707)) +\n               cos(d*dot(f,vec2(-0.866, -.7)) + vec2(0,-1.5707))\n            )/2.;\n        d/=2.;\n    }\n    //*/\n    \n    //Sierpinski carpet\n    /*\n    for(int i = 0; i < iters; i++){\n        spec = mat2(spec, -spec.y, spec.x) * (\n               cos(d*dot(f,vec2( 1, 1)) + vec2(0,-1.5707)) +\n               cos(d*dot(f,vec2( 1, 0)) + vec2(0,-1.5707)) +\n               cos(d*dot(f,vec2( 1,-1)) + vec2(0,-1.5707)) +\n               cos(d*dot(f,vec2( 0, 1)) + vec2(0,-1.5707)) +\n               cos(d*dot(f,vec2( 0,-1)) + vec2(0,-1.5707)) +\n               cos(d*dot(f,vec2(-1, 1)) + vec2(0,-1.5707)) +\n               cos(d*dot(f,vec2(-1, 0)) + vec2(0,-1.5707)) +\n               cos(d*dot(f,vec2(-1,-1)) + vec2(0,-1.5707))\n            )/4.;\n        d/=3.;\n    }\n\t//*/\n    \n    return spec;\n}\n\n#define R iResolution\nint IHash(int a){\n\ta = (a ^ 61) ^ (a >> 16);\n\ta = a + (a << 3);\n\ta = a ^ (a >> 4);\n\ta = a * 0x27d4eb2d;\n\ta = a ^ (a >> 15);\n\treturn a;\n}\n\nfloat Hash(int a){\n\treturn float(IHash(a)) / float(0x7FFFFFFF);\n}\n\nvec2 rand2(int seed){\n    return vec2(Hash(seed^0x348C5F93),\n                Hash(seed^0x8593D5BB));\n}\n\n\nvec2 randn(vec2 randuniform){\n    vec2 r = randuniform;\n    r.x = sqrt(-2.*log(1e-9+abs(r.x)));\n    r.y *= 6.28318;\n    r = r.x*vec2(cos(r.y),sin(r.y));\n    return r;\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 O, in vec2 I )\n{\n    O = texture(iChannel0, I/R.xy);\n    int i = 14;\n    int seed = 100*2000*2000*iFrame + 100*2000*int(I.x) + 100*int(I.y);\n    \n    vec2 X = ((I.xy + randn(rand2(seed))/3.)*2.-R.xy)/R.y*2.;\n    for(int k = 0; k < 100; k++){\n        vec2 f = randn(rand2(seed+k))*100.;\n        vec2 a = spectrum(f,i);\n        O.xy += mat2(a,-a.y,a.x)*cos(-dot(f,X) + vec2(0,-1.5707));\n        O.z += 2.;\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}