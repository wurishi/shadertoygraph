{"ver":"0.1","info":{"id":"7dSczh","date":"1643078222","viewed":167,"name":"Schmidt Arrangement","username":"dpiponi","description":"Shows how easy various complex numbers are to approximate starting from numbers with integer real and imaginary parts","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float cx = 0.1234654345;\n    float cy = 0.897658765768;\n    \n    float range = 50.0;\n    float t = mod(iTime / range, 1.0);\n    if (t > 0.5)\n    {\n        t = 1.0 - t;\n    }\n    t = 2. * t;\n    t = range * t;\n    \n    float size = 10.*exp(-0.1*t);\n    float minx = cx - 0.5 * size;\n    float miny = cy - 0.5 * size;\n    float maxx = cx + 0.5 * size;\n    float maxy = cy + 0.5 * size;\n    // Normalized pixel coordinates (from 0 to 1)\n    //vec2 uv = fragCoord/iResolution.x - 0.5;\n\n    float c = 0.;\n    // Subpixels for anti-aliasing...\n    const int s = 5;\n    for (int d = 0; d < s; ++d)\n    {\n        for (int e = 0; e < s; ++e)\n        {\n            float x = 0.5*(minx + maxx) + (maxx - minx) * ((fragCoord.x + float(d) / float(s) - 0.5*iResolution.x)/iResolution.x);\n            float y = 0.5*(miny + maxy) + (maxy - miny) * ((fragCoord.y + float(e) / float(s) - 0.5*iResolution.y)/iResolution.x);\n            //float y = uv.y + float(e) / (float(s)*iResolution.x);\n\n            // Sort of continued fractions but using Gaussian integers instead\n            // of integers...\n            int m = 0;\n            for (int n = 0; n < 10; n += 1)\n            {\n                m += 2;\n                float ix = floor(x + 0.5);\n                float iy = floor(y + 0.5);\n                x = x - ix;\n                y = y - iy;\n                float r = x * x + y * y;\n                if (r < 0.005)\n                {\n                    break;\n                }\n                x = x / r;\n                y = -y / r;\n    \n            }\n\n            c += float(m < 10);\n        }\n    }\n\n    c = c / float(s * s);\n    c = 2. * c;\n    c=1.-c;\n    // Time varying pixel color\n    vec3 col = vec3(1.2*c, 0.5 * c, 0.5*c*c*c);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}