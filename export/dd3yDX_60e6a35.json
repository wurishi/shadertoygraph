{"ver":"0.1","info":{"id":"dd3yDX","date":"1695567651","viewed":45,"name":"Bricks - tiling study","username":"vlahovivan","description":"Trying to create a brick shader","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["tiling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(vec2 p){\n\tvec2 ip = floor(p);\n\tvec2 u = fract(p);\n\tu = u*u*(3.0-2.0*u);\n\t\n\tfloat res = mix(\n\t\tmix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),\n\t\tmix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);\n\treturn res*res;\n}\n\nvec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\n\nfloat snoise(vec2 v){\n  const vec4 C = vec4(0.211324865405187, 0.366025403784439,\n           -0.577350269189626, 0.024390243902439);\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod(i, 289.0);\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n  + i.x + vec3(0.0, i1.x, 1.0 ));\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n    dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float ar = iResolution.y / iResolution.x;\n    vec2 p = fragCoord/iResolution.yy;\n    \n    // Animate bricks\n    p.x += (iTime * 0.14);\n    \n    vec3 col = vec3(0.0);\n    \n    vec3 white = vec3(0.9);\n    vec3 orange = vec3(0.8, 0.333, 0.0);\n    \n    vec2 num_of_tiles = vec2(12.0, 28.0);\n\n    vec2 q = p;\n    \n    // Tile the space, offset every second row by half a brick\n    q *= num_of_tiles;\n    \n    q.x += step(1.0, mod(q.y, 2.0)) * 0.5;\n\n    // Get the coordinates of each brick\n    vec2 coords = floor(q);\n    \n    q = fract(q);\n\n\n    // Change the brick color a bit based on brick coordinates\n    orange += 0.1 * rand(coords);\n    \n    // Change the mortar color a bit based on noise\n    white += 0.1 * snoise(p * vec2(1.0, 1.0));\n    \n    const float mortar_width = 0.1;\n    float d = max(abs(q.x - 0.5), abs(q.y - 0.5));\n    float brick_or_mortar = smoothstep(0.5 - mortar_width, 0.5, d);\n    \n    col += mix(orange, white, brick_or_mortar);\n    \n    // Add shadow\n    d = min(1.0 - q.x, q.y);\n    \n    float shadow = 1.0 - smoothstep(mortar_width, mortar_width * 1.5, d);\n    col -= 0.18 * shadow;\n    \n    // Add irregularities to the bricks, some texture\n    float grain = pow(snoise((p + vec2(rand(coords), 0.0)) * vec2(100.0, 1.0)), 4.0);\n    col -= 0.1 * grain;\n    \n    grain = snoise(p * vec2(100.0 + sin(p.y * 0.6), 10.0));\n    col -= 0.04 * grain * (1.0 - brick_or_mortar);\n    \n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}