{"ver":"0.1","info":{"id":"slXGRB","date":"1622303149","viewed":93,"name":"Fork Evangelion kithy 796","username":"kithy","description":"Something like moon in the movie \" EVANGELION:3.0 YOU CAN (NOT) REDO.\".","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["raymarching","terrain","texture"],"hasliked":0,"parentid":"Nll3DM","parentname":"Evangelion Moon"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Render Scene\n\n#define ITR 32\n#define EPS 0.001\n#define SCALE 5.0\n#define PI 3.141592\n#define TWO_PI 6.2831\n#define GREEN vec3(0.2,0.9,0.7)\n\nmat2 rot(float a){\n\tfloat s=sin(a);\n\tfloat c=cos(a);\n\treturn mat2(c,-s,s,c);\n}\n\nfloat sdSphere(vec3 p){\n\treturn length(p)-1.0;\n}\n\nvec3 genNormal(vec3 p){\n\tvec3 normal=vec3(\n\t\tsdSphere(p+vec3(EPS,0.0,0.0))-sdSphere(p+vec3(-EPS,0.0,0.0)),\n\t\tsdSphere(p+vec3(0.0,EPS,0.0))-sdSphere(p+vec3(0.0,-EPS,0.0)),\n\t\tsdSphere(p+vec3(0.0,0.0,EPS))-sdSphere(p+vec3(0.0,0.0,-EPS))\n\t\t);\n\treturn normalize(normal);\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord){\n\tvec2 uv=(2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n    \n    vec2 m=iMouse.xy/iResolution.xy;\n    \n\t//vec3 ro=vec3(0.0,3.0,-8.0);\n    vec3 ro=7.0*normalize(vec3(sin(3.0*m.x),0.4*m.y,cos(6.0*m.x)));\n\tvec3 lookat=vec3(0.0,-0.2,0.0);\n\tfloat zoom=5.0;\n\n\tvec3 f=normalize(lookat-ro);\n\tvec3 r=normalize(cross(vec3(0.0,1.0,0.0),f));\n\tvec3 u=cross(f,r);\n\tvec3 c=ro+f*zoom;\n\tvec3 i=c+uv.x*r+uv.y*u;\n\tvec3 rd=normalize(i-ro);\n\n\tfloat dS,dO;\n\tvec3 p,normal;\n\n\t\n\n\t//raymarching\n\tfor(int i=0;i<ITR;i++){\n\t\tp=ro+rd*dO;\n\t\tdS=sdSphere(p);\n\t\tnormal=genNormal(p);\n\t\tif(dS<EPS)break;\n\t\tdO+=dS;\n\n\t}\n\t\n\tp.xz*=rot(1.0+iTime*0.1);\n    p.yz*=rot(0.3);\n\tp.xy*=rot(-0.2);\n       \n    uv.x*=uv.x*0.25;\n    uv.y*=-1.0;\n\n    vec4 cloud=texture(iChannel2,uv);\n\n\tvec3 col=vec3(0.0);\n \n\n\t//polar coordinate\n\tif(dS<EPS){\n\t\t\n        //2D pattern\n        uv=vec2(atan(p.x,p.z)/TWO_PI,p.y/5.0)+0.5;\n        vec3 tex=texture(iChannel0,uv).rgb;\n        vec3 grid=texture(iChannel1,uv).rgb;\n\n        col=tex+grid;\n\t}\n\t\n    float diff=max(dot(normal,vec3(1.0,1.0,-1.0)),0.1);\n\n\tcol.x*=diff;\n\tcol.y*=diff;\n\tcol.z*=diff;\n    \n    //fragColor=cloud;\n   \n\tfragColor=vec4(col,1.0)+cloud;\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Earth Texture\n\n#define NUM_OCTAVES 8\n#define time 0.1*(iTime-0.5)\n\nmat2 rot=mat2(\n\tcos(0.5),sin(0.5),\n\t-sin(0.5),cos(0.5)\n\t);\n\nfloat hash12(vec2 p){\n\tvec3 p3=fract(vec3(p.xyx)*0.1031);\n\tp3+=dot(p3,p3.yzx+19.19);\n\treturn fract((p3.x+p3.y)*p3.z);\n}\n\nfloat noise(in vec2 p){\n\tvec2 i=floor(p);\n\tvec2 f=fract(p);\n\tvec2 u=f*f*(3.0-2.0*f);\n\n\treturn mix(mix(hash12(i+vec2(0.0,0.0)),\n\t\t\thash12(i+vec2(1.0,0.0)),u.x),\n\t\t   mix(hash12(i+vec2(0.0,1.0)),\n\t\t   \thash12(i+vec2(1.0,1.0)),u.x),u.y);\n}\n\nfloat fbm(in vec2 st){\n\tfloat v=0.0;\n\tfloat a=0.5;\n\tvec2 shift=vec2(100.0);\n\tfor(int i=0;i<NUM_OCTAVES;i++){\n\t\tv+=a*noise(st);\n\t\tst=rot*st*2.0+shift;\n\t\ta*=0.5;\n\t}\n\treturn v;\n}\n\nconst vec3 water_rgb=vec3(0.0,5.0,30.0);\nconst vec3 continent_rgb=vec3(0.0,4.0,50.0);\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord){\n\tvec2 uv=fragCoord/iResolution.y;\n\t//uv+=vec2(0.3*time,0.0);\n\tfloat aa=1.0/iResolution.y;\n\tfloat terrain=fbm(12.0*uv);\n\tuv.x*=0.4;\n\tfloat clouds=fbm(20.0*uv+vec2(100.0,50.0));\n\tfloat mist=fbm(20.0*uv+vec2(14.0,-30.0));\n\tvec3 col=mix(water_rgb/255.0,continent_rgb/255.0,smoothstep(0.55,0.55+5.0*aa,terrain));\n\tcol+=mix(col,vec3(1.0),smoothstep(0.45,1.0,clouds));\n\tcol+=mix(col,vec3(0.5),smoothstep(0.3,0.8,mist));\n\n\tfragColor=vec4(col,1.0);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//Red Grid Texture\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord){\n\tvec2 uv=(2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n\n\tuv*=8.0;\n\tvec2 gv=fract(uv)-0.5;\n\n\tvec3 col=vec3(0.0);\n\n\tif(gv.x>0.42||gv.y>0.42){\n\t\tcol.r=1.0;\n\t}\n\tfragColor=vec4(col,1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"//Cloud\n\nfloat noise(in vec3 x){\n\tvec3 p=floor(x);\n\tvec3 f=fract(x);\n\tf=f*f*(3.0-2.0*f);\n\tvec2 uv=(p.xy+vec2(37.0,17.0)*p.z)+f.xy;\n\tvec2 rg=textureLod(iChannel3,(uv+0.5)/256.0,0.0).yx;\n\treturn -1.0+2.0*mix(rg.x,rg.y,f.z);\n}\n\nfloat map5(in vec3 p){\n\tvec3 q=p-vec3(0.0,0.1,1.0);\n\tfloat f;\n\tf=0.50000*noise(q);\n\tq=q*2.02;\n\tf+=0.25000*noise(q);\n\tq=q*2.03;\n\tf+=0.12500*noise(q);\n\tq=q*2.01;\n\tf+=0.06250*noise(q);\n\tq=q*2.02;\n\tf+=0.03125*noise(q);\n\treturn clamp(1.5-p.y-2.0+1.75*f,0.0,1.0);\n}\n\nfloat map4(in vec3 p){\n\tvec3 q=p-vec3(0.0,0.1,1.0);\n\tfloat f;\n\tf=0.50000*noise(q);\n\tq=q*2.02;\n\tf+=0.25000*noise(q);\n\tq=q*2.03;\n\tf+=0.12500*noise(q);\n\tq=q*2.01;\n\tf+=0.06250*noise(q);\n\treturn clamp(1.5-p.y-2.0+1.75*f,0.0,1.0);\n}\n\nfloat map3(in vec3 p){\n\tvec3 q=p-vec3(0.0,0.1,1.0);\n\tfloat f;\n\tf=0.50000*noise(q);\n\tq=q*2.02;\n\tf+=0.25000*noise(q);\n\tq=q*2.03;\n\tf+=0.12500*noise(q);\n\treturn clamp(1.5-p.y-2.0+1.75*f,0.0,1.0);\n}\n\nfloat map2(in vec3 p){\n\tvec3 q=p-vec3(0.0,0.1,1.0);\n\tfloat f;\n\tf=0.50000*noise(q);\n\tq=q*2.02;\n\tf+=0.25000*noise(q);\n\treturn clamp(1.5-p.y-2.0+1.75*f,0.0,1.0);\n}\n\nvec3 sundir=normalize(vec3(-1.0,0.0,-1.0));\n\nvec4 integrate(in vec4 sum,in float dif,in float den,in vec3 bgcol,in float t){\n\tvec3 lin=vec3(0.65,0.68,0.7)*1.2+0.5*vec3(0.7,0.5,0.3)*dif;\n\tvec4 col=vec4(mix(1.15*vec3(1.0,0.99,0.98),vec3(0.65),den),den);\n\tcol.xyz*=lin;\n\tcol.xyz=mix(col.xyz,bgcol,1.0-exp(-0.003*t*t));\n\tcol.a*=0.4;\n\tcol.rgb*=col.a;\n\treturn sum+col*(1.0-sum.a);\n}\n\n#define MARCH(STEPS,MAPLOD)for(int i=0;i<STEPS;i++){vec3 pos=ro+t*rd;if(pos.y<-3.0||pos.y>2.0||sum.a>0.99)break;float den=MAPLOD(pos);if(den>0.01){float diff=clamp((den-MAPLOD(pos+0.3*sundir))/0.6,0.0,1.0);sum=integrate(sum,diff,den,bgcol,t);}t+=max(0.1,0.02*t);}\n\nvec4 raymarch(in vec3 ro,in vec3 rd,in vec3 bgcol){\n\tvec4 sum=vec4(0.0);\n\tfloat t=0.0;\n\n\tMARCH(30,map5);\n\tMARCH(30,map4);\n\tMARCH(30,map3);\n\tMARCH(30,map2);\n\n\treturn clamp(sum,0.0,1.0);\n}\n\nmat3 setCamera(in vec3 ro,in vec3 ta,float cr){\n\tvec3 cw=normalize(ta-ro);\n\tvec3 cp=vec3(sin(cr),cos(cr),0.0);\n\tvec3 cu=normalize(cross(cw,cp));\n\tvec3 cv=normalize(cross(cu,cw));\n\treturn mat3(cu,cv,cw);\n}\n\nvec4 render(in vec3 ro,in vec3 rd,in vec2 coo){\n    vec3 col=vec3(0.1,0.2,0.5);\n    col+=0.01*vec3(1.0,0.6,0.1);\n\n\tvec4 res=raymarch(ro,rd,col);\n\tcol=col*(1.0-res.w)+res.xyz;\n\n\tcol+=0.05*vec3(0.1,0.4,0.6);\n\treturn vec4(col,1.0);\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord){\n\tvec2 p=(2.0*fragCoord.xy)/min(iResolution.x,-iResolution.y);\n\n\tvec2 m=iMouse.xy/iResolution.xy;\n\n\tvec3 ro=7.0*normalize(vec3(sin(3.0*m.x),0.4*m.y,cos(6.0*m.x)));\n\tvec3 ta=vec3(0.0,1.0,0.0);\n\tmat3 ca=setCamera(ro,ta,0.0);\n\n\tvec3 rd=ca*normalize(vec3(p.xy,1.5));\n\tfragColor=render(ro,rd,fragCoord.xy/iResolution.xy);\n}\n","name":"Buffer C","description":"","type":"buffer"}]}