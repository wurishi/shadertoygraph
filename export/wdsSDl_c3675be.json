{"ver":"0.1","info":{"id":"wdsSDl","date":"1552584304","viewed":1355,"name":"UV Coordinates Study","username":"drichardson","description":"Test various ways to use UV coordinates with origin at the center of the screen.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["studytest"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // uv is the fragCoord with (0,0) in the center of the screen.\n    // The division by minres uses the same scaling on both\n    // axis to avoid distortion. The min is not strictly necessary in\n    // ShaderToy, since the aspect ratio is such that the min\n    // is always iResolution.y.\n    float minres = min(iResolution.x, iResolution.y);\n    \n    \n    // Try uncommenting different uv calculations to see what happens.\n    \n    //vec2 uv = (fragCoord - .5*iResolution.xy) / iResolution.x;\n    //vec2 uv = (fragCoord - .5*iResolution.xy) / iResolution.y;\n    //vec2 uv = (fragCoord - .5*iResolution.xy) / iResolution.xy;\n    //vec2 uv = (fragCoord - .5*iResolution.xy) / iResolution.yx;\n    vec2 uv = (fragCoord - .5*iResolution.xy) / minres;\n    \n    //vec2 uv = fragCoord - .5*iResolution.xy\n    if (abs(uv.x) > .5)\n    {\n        // visualize the part past x .5 red.\n        fragColor = vec4(1,0,0,1);\n    }\n    else if (abs(uv.y) > .5)\n    {\n        // visualize the part past y .5 red. In ShaderToy\n        // this never happens because minres is always iResolution.y.\n        fragColor = vec4(0,1,0,1);\n    }\n    else if(distance(uv, vec2(0)) <= 0.01)\n    {\n        // visualize center white\n        fragColor = vec4(1);\n    }\n    else\n    {\n    \tfragColor = vec4(uv.y+.5, uv.y+.5, 0, 1);\n    }\n}","name":"Image","description":"","type":"image"}]}