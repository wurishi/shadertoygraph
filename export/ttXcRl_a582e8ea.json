{"ver":"0.1","info":{"id":"ttXcRl","date":"1622046878","viewed":81,"name":"colored moire","username":"wj","description":"attempt to recreate an old shader of mine that I had accidentally overwritten with something new..","likes":2,"published":1,"flags":96,"usePreview":0,"tags":["moire"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"llXXRf","filepath":"https://soundcloud.com/bman-8/bman-thaw","previewfilepath":"https://soundcloud.com/bman-8/bman-thaw","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// colored moiré\n// by wj\n//\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 col = texture(iChannel3, uv);\n    fragColor = vec4(col.rgb, 1.);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"XdfGR8","channel":0}],"code":"// always render a low resolution.. high-res smears effect\n#define W 704.\n#define H 396.\n\n\nfloat getMoire(vec2 R, float x, float y, float wx, float wy, float offset) {\n\n    float c= 0.;\n//   c +=    fract((x   )*(y   )/R.y+offset);   \n        \n    // weighted quadrant antialiasing\n    // (causes wandering color-grid..)\n    c +=    fract((x   )*(y   )/R.y+offset) * wx*wy;      \n    c +=    fract((x-1.)*(y   )/R.y+offset) * (1.-wx)*wy;\n    c +=    fract((x   )*(y-1.)/R.y+offset) * wx*(1.-wy);\n    c +=    fract((x-1.)*(y-1.)/R.y+offset) * (1.-wx)*(1.-wy);  \n    \n    return c;\n}\n\nvec3 hsb2rgb( in vec3 c ){\n    //  Function from Iñigo Quiles\n    //  https://www.shadertoy.com/view/MsS3Wc\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\n\nvec2 getRes() {\n    return vec2(W, H);\n}\n\nvoid remap(inout vec2 u) {\n    // use hardcoded output resolution\n    \n    u = vec2(floor(u.x/iResolution.x*W), floor(u.y/iResolution.y*H));\n}\n\nvoid mainImage( out vec4 O, in vec2 u )\n{\n    vec2 R = getRes();\n    float qq= floor(R.y/2.);\t// avoid fractions just in case\n    \n    remap(u);    \n    vec2 U = u - vec2(qq,0);\n\n        \n    float t= (sin(iTime*0.1)+1.)*.5;\n    \n\t// x/y base positions & weights  \n    float sx= mix(14., 0.4, t),\n          x1= (U.x+qq*t)*sx,\n          wx= x1-floor(x1);\n    x1= floor(x1);\n\n    float sy= mix(4., .4, t),\n //         y1= ((U.y-R.y*(1.-t))*sy),\n          y1= ((U.y+qq*t)*sy),\n          wy= y1-floor(y1);\n    y1= floor(y1);\n\n    float ti= iTime/2.;\n    float m1= getMoire(R, x1, y1, wx, wy,-(ti+.31)),\n    \t  m2= getMoire(R, x1, y1, wx, wy, ti+.77),\n     \t  m3= getMoire(R, x1, y1, wx, wy, ti);\n    \n   \n   // blue theme\n//   O = vec4(hsb2rgb( vec3(.75-.11*m2, 1.14 - 1.4*m1, 1.3 - .53*m3) ), 1.);\n\n    // alternative colors: more similar to my original shader\n   O = vec4(-.3, -.4, -0.7, 0.) + vec4(2.3*m2, 2.5*m1, 2.8*m3, 1.);    \n}\n        \n","name":"Buffer D","description":"","type":"buffer"}]}