{"ver":"0.1","info":{"id":"sssXRs","date":"1619286615","viewed":152,"name":"KIFS Fractals Koch Snowflake","username":"genekeats","description":"following along with Martijn on The Art of Code ... three iterations seemed cool, but you can change i<3","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["fractals","kifs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\nvec2 N(float angle) {\n    return vec2(sin(angle), cos(angle));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    \n    vec3 col = vec3(0);\n    \n    uv.x = abs(uv.x);\n    uv.y += tan(5./6.*PI)*.5;\n    \n    vec2 n = N(5./6.*PI);\n    float d = dot(uv-vec2(.5, 0), n);\n    uv -= n*max(0., d)*2.;\n        \n    n = N(2./3.*PI);\n    float scale = 1.;\n    uv.x += .5;\n    \n    for(int i=0; i<3; i++) {\n        uv *= 3.;\n        scale *= 3.;\n        uv.x -= 1.5;\n        uv.x = abs(uv.x);\n        uv.x -= .5;\n        uv -= n*min(0.,dot(uv, n))*2.;\n    }\n    \n    d = length(uv - vec2(clamp(uv.x, -1., 1.), 0));\n    col += smoothstep(1./iResolution.y, .0, d/scale);\n    uv /= scale;\n    col += texture(iChannel0, uv*3.+mouse-sin(iTime*.1)).rgb;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}