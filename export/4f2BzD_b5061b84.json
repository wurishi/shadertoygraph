{"ver":"0.1","info":{"id":"4f2BzD","date":"1724726460","viewed":11,"name":"sdf立方体","username":"Johnson_Chen","description":"光，rayMarching","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["ball"],"hasliked":0,"parentid":"4c2BzD","parentname":"sdf圆3D球"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat sdfSphere(in vec3 p){\n  return length(p - vec3(0,0,2.)) - 1.3;\n}\n\n\n//修复uv\nvec2 fixUV(in vec2 c){\n  return (2. *c- iResolution.xy)/min(iResolution.x,iResolution.y);\n}\n\n#define TMin 0.1\n#define TMax 20.\n#define RAYMARCH_TIME 128\n#define PRECISION .001\n\n\nfloat rayMarch(in vec3 ro,in vec3 rd){\n  float t =TMin;\n  for(int i = 0; i < RAYMARCH_TIME && t < TMax;i++){\n  vec3 p = ro+t*rd;\n  float d = sdfSphere(p);\n  if(d<PRECISION){\n    break;\n  }\n  t += d;\n  }\n  return t;\n}\n\n\nvec3 calcNormal(in vec3 p){\n    const float h= 0.0001;\n    const vec2 k = vec2(1,-1);\n    return normalize(k.xyy*sdfSphere(p+k.xyy * h)+\n                      k.yyx*sdfSphere(p+k.yyx* h)+\n                      k.yxy*sdfSphere(p+k.yxy* h)+\n                      k.xxx*sdfSphere(p+k.xxx* h));\n}\n\nvec3 render(vec2 uv){\n  vec3 color = vec3(0.);\n vec3 ro = vec3(0.,0.,-2.);\n vec3 rd = normalize(vec3(uv,0.)  - ro);\n float t = rayMarch(ro,rd);\n  if(t<TMax){\n    // color = vec3(1.);\n    vec3 p = ro+t*rd;\n    vec3 n = calcNormal(p);\n    // vec3 light = vec3(1.,3.,0.);\n    vec3 light = vec3(cos(iTime),1.,1.3*sin(iTime)+2.);\n  float dif = dot(normalize(light - p),n);\n   dif = clamp(dif,0.,1.);\n   float amb = 0.5;//环境光\n  color = dif* vec3(1.)   + amb *vec3(0.5176, 0.8039, 0.8039);\n  }\n  // return color;\n  // gamma矫正\n  return sqrt(color);\n}\n\n\n\n#define AA 4\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec3 colorBase = vec3(0.2431, 0.6627, 0.8706);\n    // vec2 uv = fixUV(fragCoord);\n    // vec3 color = render(uv);\n    // fragColor = vec4(color, 1.);\n\n\n//如何平滑一点？\n    vec3 color =  vec3(0.0, 0.0, 0.0);\n    for(int m=0;m<AA;m++){\n      for(int n=0;n<AA;n++){\n        vec2 offset = 2.* (vec2(float(m),float(n))/float(AA) - 0.5);\n            vec2 uv = fixUV(fragCoord+offset);\n        color += render(uv);\n      }\n    }\n    fragColor = vec4(color/float(AA*AA), 1.);\n\n\n}\n","name":"Image","description":"","type":"image"}]}