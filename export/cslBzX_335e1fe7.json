{"ver":"0.1","info":{"id":"cslBzX","date":"1691753857","viewed":84,"name":"Wake/rise up: Gyroids","username":"seven_dc","description":"This is the \"fractal\" effect from Wake up / rise up demo. basically it is just 2 gyroids mixed with simple 2d fractal surface offset to create weird texture. ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarchnormalsgyroids"],"hasliked":0,"parentid":"DslfRr","parentname":"Fork Basic raym seven_dc 662"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 Rotate(float a) {\n  float s = sin(a);\n  float c = cos(a);\n  return mat2(c, -s, s, c);\n}\n\nfloat getFractalValue(vec2 uv, float angle) {    \n    for (float i=0.; i < 14.; i+= 1.) {\n        uv = abs(uv);\n        uv -= .5;\n        uv *= 1.1;\n        uv *= Rotate(angle);\n    }\n    return length(uv);\n}\n\nfloat GetDistance(vec3 point, float time) {\n    vec3 movingPoint = point;\n    movingPoint.z += iTime*2.;\n\tfloat gyr = dot(sin(movingPoint*.7), cos(movingPoint.zxy));\n    float gyr2 = dot(sin(movingPoint*.5), cos(movingPoint.zxy*.9));\n    float text = getFractalValue((point.xy)*.5, 1.1 + point.z*.02);    \n       \n    return max(gyr, gyr2) + text*.9;\n}\n\nvec3 GetNormal(vec3 point, float time) {\n  float distance = GetDistance(point, time);\n  vec2 e = vec2(.01,0);\n  \n  vec3 normal = distance - vec3(\n      GetDistance(point-e.xyy, time),\n      GetDistance(point-e.yxy, time),\n      GetDistance(point-e.yyx, time));\n  \n  return normalize(normal);\n}\n\nfloat RayMarch(vec3 rayOrgin, vec3 rayDirection, float time) {\n\tfloat distance=0.;     \n    for(int i=0; i<140; i++) {\n    \tvec3 point = rayOrgin + rayDirection * distance;\n        float surfaceDistance = GetDistance(point, time);\n        distance += surfaceDistance;\n        // Stop marching if we go too far or we are close enough of surface\n        if(distance>20. || surfaceDistance<.001) break;\n    }    \n    return distance;\n}\n\nfloat GetLight(vec3 point, vec3 normal, vec3 lightPos) {    \n  \n  vec3 direction = normalize(lightPos-point);\n  float dif = clamp(dot(normal, direction), 0., 1.);\n  \n  float d = RayMarch(point+normal*.1, direction, iTime);\n  if ( d < length(lightPos-point)) dif *= .5;\n  \n  return dif;\n}\n\nvec4 doFractalGyroid(vec2 uv, float time) {\n    vec3 ro = vec3(0, 1.5, 0);     \n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));       \n\n    float d = RayMarch(ro, rd, iTime);\n    \n    vec3 col = vec3(0);\n    \n    vec3 lightPos = vec3(0, 1, 0);\n    \n    if (d < 20.) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p, iTime);\n        float light = GetLight(p, n, lightPos);\n        // color\n        col = vec3(light);\n    } \n    col.b += d*.01;\n\n    return vec4(col, 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;       \n    fragColor = doFractalGyroid(uv, iTime);\n}","name":"Image","description":"","type":"image"}]}