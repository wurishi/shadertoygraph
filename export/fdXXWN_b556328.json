{"ver":"0.1","info":{"id":"fdXXWN","date":"1618660490","viewed":36,"name":"try #2","username":"mike_mike","description":"...","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\n//const vec3 CAMERA_POS = vec3(0, 1.2, -6);\nconst vec3 CAMERA_POS = vec3(2, .2, -6);\nconst vec3 LIGHT1_POS = vec3(-3, 1.5, 5);\nconst float LIGHT1_RADIUS = 0.5;\nconst vec3 LIGHT1_COLOR = vec3(1, 1, 1);\n\nconst vec3 LIGHT2_POS = vec3(1, 0.5, -4);\nconst float LIGHT2_RADIUS = 0.25;\nconst vec3 LIGHT2_COLOR = vec3(1, 1, 1);\n\nconst float ICO_SIZE = 1.0;\nconst float EPS_MARCH_DIST = 1e-3;\nconst int MAX_REYMARCH_COUNT = 20;\n\nvec3 randDir;\n\nconst float SQRT_2 = 1.414213562373095;\nconst float ISQRT_2 = 0.70710678118655;\nconst float PI = 3.141592653589793;\n\nconst vec3 coords[12] = vec3[12](\n    vec3(0, 0.525731, -0.850651),\n\tvec3(0.525731, 0.850651, 0),\n\tvec3(-0.525731, 0.850651, 0),\n\tvec3(0, 0.525731, 0.850651),\n\tvec3(0, -0.525731, 0.850651),\n\tvec3(-0.850651, 0, 0.525731),\n\tvec3(0, -0.525731, -0.850651 ),\n\tvec3(0.850651, 0, -0.525731),\n\tvec3(0.850651, 0, 0.525731),\n\tvec3(-0.850651, 0, -0.525731),\n\tvec3(0.525731, -0.850651, 0),\n\tvec3(-0.525731, -0.850651, 0)\n);\n\nconst int faces[60] = int[60](\n        0,  1,  2,\n        3,  2,  1,\n        3,  4,  5,\n        3,  8,  4,\n        0,  6,  7,\n        0,  9,  6,\n        4,  10, 11,\n        6,  10, 11,\n        2,  5,  9,\n        11, 9,  5,\n        1,  7,  8,\n        10, 8,  7,\n        3,  5,  2,\n        3,  1,  8,\n        0,  2,  9,\n        0,  7,  1,\n        6,  9,  11,\n        6,  10, 7,\n        4,  11, 5,\n        4,  8,  10\n);\n\nconst vec3 normals[20] = vec3[20](\n    vec3(0, 0.934172, -0.356822),\n    vec3(0, 0.934172, 0.356822),\n    vec3(-0.356822, 0, 0.934172),\n    vec3(0.356822, 0, 0.934172),\n    vec3(0.356822, 0, -0.934172),\n    vec3(-0.356822, 0, -0.934172),\n    vec3(0, -0.934172, 0.356822),\n    vec3(0, -0.934172, -0.356822),\n    vec3(-0.934172, 0.356822, 0),\n    vec3(-0.934172, -0.356822, 0),\n    vec3(0.934172, 0.356822, 0),\n    vec3(0.934172, -0.356822, 0),\n    vec3(-0.57735, 0.57735, 0.57735),\n    vec3(0.57735, 0.57735, 0.57735),\n    vec3(-0.57735, 0.57735, -0.57735), \n    vec3(0.57735, 0.57735, -0.57735),\n    vec3(-0.57735, -0.57735, -0.57735), \n    vec3(0.57735, -0.57735, -0.57735),\n    vec3(-0.57735, -0.57735, 0.57735),\n    vec3(0.57735, -0.57735, 0.57735)\n);\n\n\n\nbool intersects(\n    in vec3 orig, in vec3 dir, in vec3 vertices[3], in vec3 normal,\n    out vec3 I, out vec2 st, out float r)\n{\n    vec3 u, v, n;\n    vec3 w0, w;\n    float a, b;\n    \n    u = vertices[1] - vertices[0];\n    v = vertices[2] - vertices[0];\n    n = cross(u,v);\n    \n    b = dot(n, dir);\n    if (abs(b) < 1e-5) return false;\n    w0 = orig - vertices[0];\n    a = -dot(n, w0);\n    \n    r = a / b;\n    if (r < 1e-5) return false;\n    \n    I = orig + r * dir;\n    float uu, uv, vv, wu, wv, D;\n    uu = dot(u, u);\n    uv = dot(u, v);\n    vv = dot(v, v);\n    w = I - vertices[0];\n    wu = dot(w, u);\n    wv = dot(w, v);\n    D = uv * uv - uu * vv;\n    \n    float s, t;\n    s = (uv * wv - vv * wu) / D;\n    if (s < 0. || s > 1.) return false;\n    t = (uv * wu - uu * wv) / D;\n    if (t < 0. || t > 1.) return false;\n    \n    st = vec2(s, t);\n    if (r > 1e-5) return true;\n    \n    return false;\n}\n\nconst float FAR_INF = 1e10;\nconst float EPS = 1e-3;\n\nbool ray_triangle_intersection(\n    in vec3 orig, in vec3 dir, in vec3 vertices[3], in vec3 normal,\n    out vec3 I, out vec2 st, out float r) {\n\n    float normalViewAngle = dot(dir, normal);\n    if (abs(normalViewAngle) < EPS)\n        return false;\n    float d = dot(vertices[0] - orig, normal) / normalViewAngle;\n    if (d < 0.0)\n        return false;\n    vec3 hitPos = orig + dir * d;\n    r = d;\n    I = hitPos;\n    vec3 edges[3] = vec3[3](\n        vertices[1] - vertices[0],\n        vertices[2] - vertices[1],\n        vertices[0] - vertices[2]\n    );\n    float square = length(cross(edges[0], edges[1]));\n    vec3 toHitVecs[3] = vec3[3](\n        hitPos - vertices[0],\n        hitPos - vertices[1],\n        hitPos - vertices[2]\n    );\n    float testSq[3] = float[3](\n        length(cross(toHitVecs[0], edges[0])),\n        length(cross(toHitVecs[1], edges[1])),\n        length(cross(toHitVecs[2], edges[2]))\n    );\n    if (abs(square - testSq[0] - testSq[1] - testSq[2]) < EPS)\n        return true;\n    return false;\n}\n\n\nfloat sdIcosahedron(vec3 p)\n{\n    const float q = (sqrt(5.)+3.)/2.;\n\n    const vec3 n1 = normalize(vec3(q,1,0));\n    const vec3 n2 = vec3(sqrt(3.)/3.);\n\n    p = abs(p/ICO_SIZE);\n    float a = dot(p, n1.xyz);\n    float b = dot(p, n1.zxy);\n    float c = dot(p, n1.yzx);\n    float d = dot(p, n2.xyz)-n1.x;\n    return max(max(max(a,b),c)-n1.x,d)*ICO_SIZE; // turn into (...)/r  for weird refractive effects when you subtract this shape\n}\n\nvec3 calcNormal( in vec3 p ) // for function f(p)\n{\n    const float eps = 0.0001; // or some other value\n    const vec2 h = vec2(eps,0);\n    return normalize( vec3(sdIcosahedron(p+h.xyy) - sdIcosahedron(p-h.xyy),\n                           sdIcosahedron(p+h.yxy) - sdIcosahedron(p-h.yxy),\n                           sdIcosahedron(p+h.yyx) - sdIcosahedron(p-h.yyx) ) );\n}\n\n\nbool traceIcosahedron(\n    in vec3 orig, in vec3 dir, \n    out int face, out vec3 I, out vec2 st, out float dist) \n{\n    bool found = false;\n    vec3 found_I;\n    vec2 found_st;\n    float dist_tr;\n    float pre_dist_tr = 1e10;\n    for(int i = 0; i < 20; i += 1) {\n        if (ray_triangle_intersection(orig, dir, vec3[3](\n                    coords[faces[3 * i]],\n                    coords[faces[3 * i + 1]],\n                    coords[faces[3 * i + 2]]\n        \t), normals[i], found_I, found_st, dist_tr)) {\n            \n            if (!found || (pre_dist_tr > dist_tr)) {\n                found = true;\n                pre_dist_tr = dist_tr;\n                \n                st = found_st;\n                I = found_I;\n                face = i;\n                dist = dist_tr;\n            }\n        }\n    }\n    \n    return found;\n}\n\n\n// (CAMERA_POS + t * viewVec).y == -1\n// t = (-1 - CAMERA_POS.y) / viewVec.y;\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 0.5) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 0.5;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 sphNorm;\n    float sphT = traceSphere(pos, dir, 1.0, sphNorm);\n    if (sphT < dist)\n        return true;\n    \n    \n    int tface;\n    vec3 tI;\n    vec2 tst;\n    float tdist;\n    \n    if (traceIcosahedron(pos, dir, tface, tI, tst, tdist)){\n        if (tdist < dist)\n            return true;\n    }\n    \n    \n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 20.0f / distSq1;\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 10.0f / distSq2;\n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + texture(iChannel1, normal).rgb * 0.1\n    );\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5)) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    const float GLASS_N = 1.5;\n    const float AIR_N = 1.0;\n    float n1 = AIR_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    const float DIAMOND_N = 2.5;\n    float DIAMOND_R = pow2(DIAMOND_N - GLASS_N) / pow2(DIAMOND_N + GLASS_N);\n    \n    vec3 colorMult = vec3(1, 1, 1);\n    \n    for (int i = 0; i < 10; ++i) {\n        \n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        \n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n        }\n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t) {\n            t = light1T;\n        }\n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t) {\n            t = light2T;\n        }\n        vec3 sphNorm1;\n        vec3 sphNorm2;\n        float sphT = traceSphere(curPos, curDir, 1.0, sphNorm1);\n        if ((sphT < t) && false) {\n            t = sphT;\n        }\n        float sph2T = traceSphere(curPos, curDir, 0.25, sphNorm2);\n        if (sph2T < t) {\n            t = sph2T;\n        }\n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n        }\n        \n      \n\n        //int ico_face;\n        //vec3 ico_I;\n        //vec2 st;\n        //float ico_dist;\n        \n        //if (traceIcosahedron(curPos, curDir, ico_face, ico_I, st, ico_dist)){\n        //    if ((ico_dist >= 0.0 ) && (ico_dist < t)){\n        //        t = ico_dist;\n        //        \n        //        normal = normals[ico_face];\n        //        \n        //        if (randVals.x < GLASS_R) {\n        //            materialType = REFLECTION;\n        //        } else {\n        //            colorMult *= vec3(0.5, 0.5, 1);\n        //            materialType = REFRACTION;\n        //            if (dot(curDir, normal) > 0.0) {\n        //                nEnter = AIR_N;\n        //            } else {\n        //                nEnter = GLASS_N;\n        //            }\n        //        }\n        //    }\n        //}\n        \n        float IcoT = sdIcosahedron(curPos);\n        if ((IcoT >= 0.0) && (IcoT < t)){\n            t = IcoT;\n        }\n        \n        \n        if (t != INF){\n            int i = 0;\n            vec3 cur_pos = curPos;\n            float dist_min = t;\n            int cur_object = 0;\n            vec3 temp;\n     \n            while ((dist_min > EPS_MARCH_DIST) && (dist_min != INF) && (i < MAX_REYMARCH_COUNT)){\n                cur_pos = cur_pos + curDir * dist_min * 0.9;\n                dist_min = INF;\n                \n                float IcoT = sdIcosahedron(cur_pos);\n                float cylT = traceCylinder(cur_pos, curDir, cylNorm);\n                float sph2T = traceSphere(cur_pos, curDir, 0.25, sphNorm2);\n                float planeT = tracePlane(cur_pos, curDir, planeNorm);\n                float light1T = traceSphere(cur_pos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n                float light2T = traceSphere(cur_pos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n                float sphT = traceSphere(cur_pos, curDir, 1.0, sphNorm1);\n                \n                \n                if ((IcoT >= 0.0) && (IcoT < dist_min)){\n                    dist_min = IcoT;\n                    cur_object = 0;\n                }\n                if (cylT < dist_min){\n                    dist_min = cylT;\n                    cur_object = 1;\n                }\n                if (sph2T < dist_min){\n                    dist_min = sph2T;\n                    cur_object = 2;\n                }\n                if (planeT < dist_min){\n                    dist_min = planeT;\n                    cur_object = 3;\n                }\n                if (light1T < dist_min){\n                    dist_min = light1T;\n                    cur_object = 4;\n                }\n                if (light2T < dist_min){\n                    dist_min = light2T;\n                    cur_object = 5;\n                }\n                if ((sphT < dist_min) && false){\n                    dist_min = sphT;\n                    cur_object = 6;\n                }\n                \n                i += 1;\n            }\n            \n            if ((dist_min <= EPS_MARCH_DIST) && (i != MAX_REYMARCH_COUNT)){\n                if (cur_object == 0){\n                    normal = calcNormal(t * curDir + curPos);\n            \n                    if (randVals.x < GLASS_R) {\n                        materialType = REFLECTION;\n                    } else {\n                        colorMult *= vec3(0.5, 0.5, 1);\n                        materialType = REFRACTION;\n                        if (dot(curDir, normal) > 0.0) {\n                            nEnter = AIR_N;\n                        } else {\n                            nEnter = GLASS_N;\n                        }\n                    }\n                }\n                if (cur_object == 1){\n                    materialType = DIFFUSE;\n                    vec3 worldPos = t * curDir + curPos;\n                    color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n                    normal = cylNorm;\n                }\n                if (cur_object == 2){\n                    normal = sphNorm2;\n                    if (randVals.x < DIAMOND_R) {\n                        materialType = REFLECTION;\n                    } else {\n                        colorMult *= vec3(1, 0.5, 0.75);\n                        materialType = REFRACTION;\n                        if (dot(curDir, normal) > 0.0) {\n                            nEnter = GLASS_N;\n                        } else {\n                            nEnter = DIAMOND_N;\n                        }\n                    }\n                }\n                if (cur_object == 3){\n                    materialType = DIFFUSE;\n                    vec3 worldPos = t * curDir + curPos;\n                    color = texture(iChannel0, worldPos.xz * 0.1).rgb;\n                    normal = planeNorm;\n                }\n                if (cur_object == 4){\n                    materialType = EMISSION;\n                    color = LIGHT1_COLOR;\n                    normal = l1Norm;\n                }\n                if (cur_object == 5){\n                    materialType = EMISSION;\n                    color = LIGHT2_COLOR;\n                    normal = l2Norm;\n                }\n                if (cur_object == 6){\n                    normal = sphNorm1;\n                    if (randVals.x < GLASS_R) {\n                        materialType = REFLECTION;\n                    } else {\n                        colorMult *= vec3(0.5, 0.5, 1);\n                        materialType = REFRACTION;\n                        if (dot(curDir, normal) > 0.0) {\n                            nEnter = AIR_N;\n                        } else {\n                            nEnter = GLASS_N;\n                        }\n                    }\n                }\n                \n            } else {\n                t = INF;\n            }\n        }\n        \n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) {\n                fragColor.rgb = color * colorMult;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            } else if (materialType == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, nEnter);\n                curPos = worldPos + curDir * 1e-5;\n                n1 = nEnter;\n            }\n        } else {\n            fragColor.rgb = texture(iChannel1, curDir).rgb * colorMult;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}