{"ver":"0.1","info":{"id":"tljBDt","date":"1600188488","viewed":131,"name":"Texture Advection Demo","username":"olano","description":"Demo of 3-phase texture advection, broken down into steps","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["flow","advection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// demo mode:\n//   -1 = cycle through\n//   0 = show flow field in r/b, overlaid with a grid of flow vectors\n//   1 = one phase of offset texture, 5-second cycle, no fade\n//   2 = one phase fading to black at extremes\n//   3 = three phases (split vertically) without fading\n//   4 = three phases (split vertically) with fade\n//   5 = fade between all three phases\n//   6 = all three phases without vectors\n#define DEMOMODE -1\nint demomode = DEMOMODE;\n\n// choice of flow field\n//   0 = swirl\n//   1 = random from texture\n//   2 = curl of texture\n#define FLOWMODE 1\nint flowmode = FLOWMODE;\n\n// piecewise quadratic weighting kernel: domain -1 to 1, range 0 to 1\nfloat kernel(float t) {\n    float s = abs(t);\n    return s < 1./3. ? 0.75 - 2.25*s*s : 1.125 + (-2.25 + 1.125*s)*s;\n}\n\n// flow field\nvec2 flow(vec2 uv) {\n    vec2 v = texture(iChannel1, uv*0.1).xy * 0.2 - 0.1;\n    \n    switch(flowmode) {\n        case 1:\n\t    \treturn v;\n        \n        case 2:\n        \treturn 20.*vec2(dFdy(v.x), -dFdx(v.x));\n    \n        default:\n    \t\treturn vec2(-uv.y, uv.x) * 0.2;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // auto-transition between demo modes\n    float demotime = 0.05 * iTime + fragCoord.x / iResolution.x;\n    if (demomode < 0) demomode = int(mod(demotime,7.));\n    \n    // compute flow field\n    fragColor = vec4(0);\n\tvec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n    vec2 dir = flow(uv);\n    if (demomode==0)\n    \tfragColor = vec4(dir * 4. + 0.5,0,1).xzyw;\n\n\t// arrows from https://www.shadertoy.com/view/3l3Xzf\n    float gridScale = 16.;\n    vec2 R = iResolution.xy;\n    vec2 cell = fract(gridScale * uv)*2.-1.;\n    float l = length(dir),\n          x = (dir.x*cell.y-dir.y*cell.x) / l,\n          w = dot(dir,cell) / l;\n\tfloat arrow = smoothstep(gridScale*3./R.y, 0., abs(x)+.05*w );\n    arrow *= smoothstep(200./R.y, 0., abs(w)- l );\n    \n    // combine phases of texture\n    float time = 0.2 * iTime;\n    int phases = demomode==0 ? 0 : demomode<5 ? 1 : 3;\n    for(int i=0; i<phases; ++i) {\n        if (demomode==3 || demomode == 4) \n            i = int(3.*fragCoord.y/iResolution.y);\n        float shift = 2.*fract(time + float(i) * (1./3.)) - 1.;\n        float weight = demomode<2 || demomode==3 ? 1. : kernel(shift);\n        fragColor += weight * texture(iChannel0, uv + dir * shift);\n    }\n    \n    if (demomode<6)\n\t    fragColor = mix(fragColor, vec4(1), arrow);\n    \n    if (DEMOMODE < 0)\n        fragColor = mix(fragColor, vec4(1,0,0,1),\n                        smoothstep(2./iResolution.x,0.,\n                                   abs(fract(demotime + 0.5)-0.5)));\n}","name":"Image","description":"","type":"image"}]}