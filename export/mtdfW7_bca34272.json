{"ver":"0.1","info":{"id":"mtdfW7","date":"1706997919","viewed":90,"name":"square fractal","username":"kaliuresis","description":"a square, repeated","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.14159265358979323846264338327950\n\nfloat map(vec2 x)\n{\n    float v = 100.0;\n    float r = 1.0;\n    //float t = 1.5+0.01*cos(10.0*iTime);\n    float t = iTime;\n    //float t = 0.1*iMouse.x;\n    vec2 d = vec2(cos(t), sin(t));\n    vec2 disp = vec2(r*3.3, 0.0);\n        \n    for(int i = 0; i < 9; i++)\n    {\n        float theta = atan(x.y, x.x);\n        theta = mod(abs(theta), 0.25*pi);\n        //theta = abs(theta);\n        //if(theta > 0.25*pi) theta = 0.25*pi-abs(0.25*pi-theta);\n        x = length(x)*vec2(cos(theta), sin(theta));\n\n        vec2 dist = x;\n        vec2 rot = normalize(disp);\n        //dist = abs(vec2(dist.x*rot.x-dist.y*rot.y, dist.x*rot.y+dist.y*rot.x));\n        dist = abs(dist);\n        v = min(v, max(dist.x, dist.y)-r); //square\n        //v = min(v, length(dist)-r); //circle\n        x -= disp;\n        //disp = vec2(disp.x*d.x-disp.y*d.y, disp.x*d.y+disp.y*d.x);\n        x = vec2(x.x*d.x-x.y*d.y, x.x*d.y+x.y*d.x);\n        r *= 0.7;\n        disp *= 0.7;\n    }\n    return v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n\n    vec2 x = uv-vec2(0.5*iResolution.x/iResolution.y, 0.5);\n    x *= 20.0;\n    \n    // Time varying pixel color\n    vec3 col = vec3(0.5)*smoothstep(0.0, 0.1, map(x));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}