{"ver":"0.1","info":{"id":"3sSyRR","date":"1585914274","viewed":94,"name":"A.T.FIELD : 2D","username":"takumifukasawa","description":"AT Field : 2D","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","shape"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"precision highp float;\n\n#define PI 3.1415\n#define PI2 PI * 2.\n\n#define saturate(a) clamp(a, 0., 1.)\n\nfloat field(float d, float l, float lb, float pl, float r, float rb) {\n    return smoothstep(l, l - lb, d) * smoothstep(r, r + rb, pl) * pow(smoothstep(r, r + rb, d), .7);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 p = uv * 2. - 1.;\n    p.y *= iResolution.y / iResolution.x;\n    \n    // ref: https://thebookofshaders.com/07/?lan=jp\n    float a = atan(p.y, p.x) + PI;\n    float r = PI2 / float(8.);\n    float d = cos(floor(.5 + a / r) * r - a) * length(p);\n    \n    vec3 res = vec3(0.);\n    \n    vec3 col = vec3(.98, .04, 0.);\n\n    res += col * field(d, .12, .02, length(p), .02, .1);\n    res += col * field(d, .22, .02, length(p), .1, .12);\n    res += col * field(d, .32, .02, length(p), .195, .13);\n    res += col * field(d, .42, .02, length(p), .285, .14);\n    res += col * field(d, .52, .02, length(p), .38, .15);\n\n    res *= .9;\n    \n    res = saturate(res);\n        \n    fragColor = vec4(res, 1.0);\n}","name":"Image","description":"","type":"image"}]}