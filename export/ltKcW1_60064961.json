{"ver":"0.1","info":{"id":"ltKcW1","date":"1536117644","viewed":273,"name":"btree","username":"dahart","description":"Not a btree :P, a zooming binary tree, golfed, probably badly. (edit: very badly by me, but fabulously by others in the comments.) Inspired by jt's polar sine tree https://www.shadertoy.com/view/ll2XDV","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["2d","tree","zooming","binarytree","golf","btree"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Fabrice's 9/6 golfed version. 176 chars(!)\n/*\nvoid mainImage(out vec4 o, vec2 c) { \n    vec2 t = fract(iTime) *c/c,\n         w = 2. * c/iResolution.xy - 1.,\n         l = w * w * 5. - t,\n         m = exp2( ceil(l) ) * ++t;\n    o += ( m/5e2 / abs( sign(w = fract(w.x * m) - .5)/4. * smoothstep(0., 1., fract(l)) - w) ).y; }\n//*/\n\n\n// Fabrice's 9/5 golfed version is SO much smaller than mine!\n// +edits by @GregRostami 186 chars\n/*\n#define mainImage(o,c)                            \\\n    vec2 w = 2. * c/iResolution.xy - 1.;          \\\n    float t = fract(iTime),                       \\\n          l = w.y * w.y * 5. - t,                 \\\n          m = exp2( ceil(l) ) * ++t,              \\\n          f = fract(w.x * m);                     \\\n    o += 1. - abs( .5-f + sign(f-.5)/4. * smoothstep(0., 1., fract(l)) ) / m /.01\n//*/\n\n\n// My original version. 278 chars. So fat.\n//*\n#define f fract\n#define s smoothstep\nvoid mainImage( out vec4 o, in vec2 c ) \n{\n    vec2 w = 2.1*(c/iResolution.xy - .5);\n    float t = f(iTime), T = t + 1.,\n    \tu = w.x*T, v = w.y * w.y - t / 4.,\n     \tl = v * 4., m = pow(2., floor(l) + 1.), b = u * m, \n        x = (floor(b) + .5 + .25 * sign(f(b) - .5) * s(0., 1., f(l))) / m / T,\n        d = abs(x - w.x) - .01;\n    o = o-o+s(0., -.01, d);\n}\n//*/\n","name":"Image","description":"","type":"image"}]}