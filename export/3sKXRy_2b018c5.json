{"ver":"0.1","info":{"id":"3sKXRy","date":"1574981285","viewed":135,"name":"based on BigWIngs's Art of Code","username":"aethelwhat","description":"just practice based on BigWIngs art of code tutorials. Check out Art of Code on Youtube. BigWIngs on ShaderToy. ","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["kifs","artofcode"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.14159\n\nfloat lineSegment(vec2 uv, vec2 coords){\n   float dist = length(uv - vec2(clamp(uv.x, coords.x, coords.y), 0));\n   return smoothstep(0.3, 0., dist);\n}\n\nvec2 getNormal(float angle){\n\treturn vec2(sin(angle), cos(angle));\n}\n\n// distance to a rotated line\nfloat distanceToAngle(vec2 pt, vec2 normal){\n    return dot(pt, normal);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    //vec2 uv = (fragCoord/iResolution.xy - .5) * 2.;\n    // aspect ratio pixel coordinates centered at 0,0 with y range -1 to 1\n    vec2 uv = (fragCoord - .5 * iResolution.xy)/iResolution.y;\n    uv *= 1.25;\n    vec2 mouse = iMouse.xy/iResolution.xy + 0.5; // +.5 to get the Thumbnail image when mouse isn't set\n    vec3 col = vec3(0.);\n    uv.x = abs(uv.x);\n    uv.y -= 0.3; // don't mind me\n    //float angle = mouse.x * 3.14159; \n    float angle = 5./6. * pi;\n    vec2 norm = getNormal(angle);\n    float dist = distanceToAngle(uv - vec2(0.5,0.), norm);\n    uv -= norm * 2. * max(dist, 0.);\n    \n    angle = 2./3. * pi * mouse.x;\n    norm = getNormal(angle);\n\tuv.x += 0.5;\n    float scale = 1.0;\n    for(int i = 0; i < 4; ++i){\n        /* folding iteration */\n        scale *= 3.;\n        uv *= 3.;\n    \tuv.x -= 1.5;\n        uv.x = abs(uv.x);\n        uv.x -= .5;\n        uv -= norm * 2. * min(distanceToAngle(uv, norm), 0.);\n    }\n\t\n    getNormal(2./3.*pi);\n    \n\n    uv/= scale;\n    col += texture(iChannel0, uv* cos(iTime * 0.7)).rgb;\n     \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}