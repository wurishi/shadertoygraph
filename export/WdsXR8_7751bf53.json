{"ver":"0.1","info":{"id":"WdsXR8","date":"1550596897","viewed":98,"name":"XOR Garble","username":"ambi","description":"Garble garble","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["video","xor"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//-- 8< ----- https://www.shadertoy.com/view/Mtl3Rj --- 8< ----\nfloat SCurve (float x) {\n    // ---- by CeeJayDK\n\t\tx = x * 2.0 - 1.0;\n\t\treturn -x * abs(x) * 0.5 + x + 0.5;\n}\n\nvec3 BlurH (sampler2D source, vec2 size, vec2 uv, float radius) {\n\n\tif (radius >= 1.0)\n\t{\n\t\tvec4 A = vec4(0.0); \n\t\tvec4 C = vec4(0.0); \n\n\t\tfloat width = 1.0 / size.x;\n\n\t\tfloat divisor = 0.0; \n        float weight = 0.0;\n        \n        float radiusMultiplier = 1.0 / radius;\n        \n\t\tfor (float x = -radius; x <= radius; x++)\n\t\t{\n\t\t\tA = texture(source, uv + vec2(x * width, 0.0));\n            weight = SCurve(1.0 - (abs(x) * radiusMultiplier)); \n           \tC += A * weight; \n\t\t\tdivisor += weight; \n\t\t}\n\t\treturn vec3(C.r / divisor, C.g / divisor, C.b / divisor);\n\t}\n\treturn texture(source, uv).rgb;\n}\n//-----------------------------------------------\n\n\n\nfloat cgray(vec3 col, float divs) {\n\tfloat gray = 0.3 * col.r + 0.59 * col.g + 0.11 * col.b;\n\n    return clamp(floor(gray*divs), 1.0, divs);\n}\n\nfloat xor_block(vec2 pix, int split, float sdiv, vec2 move) {\n    pix.y = mod(pix.y, sdiv);\n    pix += move +vec2(0.5,0.0);\n\treturn float(((int(-pix.x))%split) ^ \n                (int(pix.y))%split) /float(split); \n}\n\nfloat xor_sample(vec3 sample0, float sdiv, vec2 pix, float garble) {\n\t//vec3 sample0 = texture(iChannel0, \n    //     vec2(floor(pix.x/sdiv)*sdiv,\n    //          floor(pix.y/sdiv)*sdiv\n    //         )/iResolution.xy).rgb;\n    \n\tfloat n = cgray(sample0, garble);\n\n    return \n        xor_block(pix, \n                  int(sdiv*garble), \n                  sdiv,\n                  n*vec2(-sdiv, 0.0)-\n                  vec2(sdiv, 0.0)*floor(pix.x/sdiv));\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\tvec3 bg = texture(iChannel0, uv).xyz;\t\n    vec3 xcol = vec3(1.0) * xor_block(fragCoord.xy, 128, 128.0, vec2(0.0, 0.0));\n    \n    vec3 total = vec3(1.0);\n    \n    for (float sdiv = 2.0; sdiv<64.0; sdiv*=2.0) {\n        vec2 pix = fragCoord.xy;\n        vec2 uv2 =\n             vec2(floor(pix.x/sdiv)*sdiv,\n                  floor(pix.y/sdiv)*sdiv)/ iResolution.xy;\n\n        vec3 bcol = BlurH(iChannel0, iResolution.xy, uv2, sdiv*1.0);\n        total += (bcol*xor_sample(bcol, sdiv, pix, 8.0)-0.42);//*log(sdiv/2.0); \n    }\n    total = total/2.7 + 0.5;\n \n    float ease = clamp(pow((total.r+total.b)/1.8/total.g, 8.0), 0.0, 1.0);\n    total = total*(ease) + xcol*(1.0-ease);\n        \n    fragColor = vec4(total, 1.0);\n}","name":"Image","description":"","type":"image"}]}