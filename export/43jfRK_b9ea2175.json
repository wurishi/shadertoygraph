{"ver":"0.1","info":{"id":"43jfRK","date":"1729828220","viewed":46,"name":"Logo of ZZZ","username":"ARTS_syz","description":"3D","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["3dzzz"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//please tell me how to the rotation suddenly stop with little trembling when the object moves into the centre of zhe screen?\n\n// Rotation matrix around the Z axis.\nmat3 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b ) {\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat sdPrism( vec3 p, vec2 h, float angle ) {\n    p = rotateZ(angle) * p;\n    vec3 q = abs(p);\n    return max(q.z-h.y,max(q.x*1.5+p.y*0.5,q.x*1.5-p.y*0.5))-h.x;\n}\n\nfloat sdTiltedBox(vec3 p, vec3 b, float angle) {\n    p = rotateZ(angle) * p;\n\n    vec3 d = abs(p) - b;\n    float dist = min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));\n\n    return dist;\n}\n\nfloat sdSzzz(vec3 p){\n    //small z 2\n    float d7 = sdBox(p-vec3(.0,-1.85,.0), vec3(0.281, 0.05,.2));\n    float d8 = sdTiltedBox(p-vec3(.0, -2.1, 0.), vec3(0.35, 0.05,.2), 0.769);\n    float d9 = sdBox(p-vec3(.0,-2.35,.0), vec3(0.281, 0.05,.2));\n    float dmin = min(min(d7,d9),d8);\n    \n    //small z 3\n    float d10 = sdBox(p-vec3(1.0,-1.85,.0), vec3(0.281, 0.05,.2));\n    float d11 = sdTiltedBox(p-vec3(1.0, -2.1, 0.), vec3(0.35, 0.05,.2), 0.769);\n    float d12 = sdBox(p-vec3(1.0,-2.35,.0), vec3(0.281, 0.05,.2));\n    dmin = min(min(min(dmin,d10),d11),d12);\n    \n    //small z 1\n    float d13 = sdBox(p-vec3(-1.0,-1.85,.0), vec3(0.281, 0.05,.2));\n    float d14 = sdTiltedBox(p-vec3(-1.0, -2.1, 0.), vec3(0.35, 0.05,.2), 0.769);\n    float d15 = sdBox(p-vec3(-1.0,-2.35,.0), vec3(0.281, 0.05,.2));\n    dmin = min(min(min(dmin,d13),d14),d15);\n    \n    //spot\n    float d17 = sdSphere(p-vec3(.5,-2.1,0.), 0.07 );\n    float d18 = sdSphere(p-vec3(-.5,-2.1,0.), 0.07 );\n    dmin = min(min(dmin, d17),d18);\n    \n    return dmin;\n}\n\nfloat sdScene_w(vec3 p) {\n    float width = 0.28;\n    //main Z\n    float d1 = sdBox(p, vec3(1.143, width,.3));\n    float d2 = sdBox(p-vec3(.0,1.15,.0), vec3(1.143, width,.3));\n    float d3 = sdBox(p-vec3(.0,-1.15,.0), vec3(1.143, width,.3));\n    float d4 = sdTiltedBox(p-vec3(0.0, 0., 0.), vec3(1.4, width+0.03,.3), 0.869);\n    float d5 = sdTiltedBox(p-vec3(0.46, -0.6, 0.), vec3(0.7, width+0.03,.3), 0.869);\n    float d6 = sdTiltedBox(p-vec3(-0.46, 0.6, 0.), vec3(0.7, width+0.03,.3), 0.869);\n    \n    float d = sdSzzz(p);\n    float dmin = min(min(min(d1, d2),d6), min(min(d3, d4), d5));\n    dmin = min(dmin,d);\n    \n    return dmin;\n}\n\nfloat sdScene_b(vec3 p) {\n    float width = 0.18;\n    float d1 = sdBox(p, vec3(1.05, width,.3));\n    float d2 = sdBox(p-vec3(.0,1.15,.0), vec3(1.05, width,.3));\n    float d3 = sdBox(p-vec3(.0,-1.15,.0), vec3(1.05, width,.3));\n    float d4 = sdTiltedBox(p-vec3(0.0, 0., 0.), vec3(1.42, width,.3), 0.869);\n    float d5 = sdTiltedBox(p-vec3(0.46, -0.6, 0.), vec3(0.71, width,.3), 0.869);\n    float d6 = sdTiltedBox(p-vec3(-0.46, 0.6, 0.), vec3(0.71, width,.3), 0.869);\n    //float d7 = sdSphere(p-vec3(0.,0.7,0.), 0.5 );\n    \n    float dmin = min(min(min(d1, d2),d6), min(min(d3, d4), d5));\n    //dmin = min(dmin, d7);\n    \n    return dmin;\n}\n\n\nstruct Surface {\n  int id; // id of object\n  float sd; // signed distance\n};\n\nSurface opUnion(Surface obj1, Surface obj2) {\n  if (obj2.sd < obj1.sd) return obj2;\n  return obj1;\n}\n\n#define R(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float color = 0.0;\n    vec3 col;\n    \n    // screen to world\n    vec3 rd = vec3((fragCoord - 0.5 * iResolution.xy) / iResolution.y, 1);\n    rd = normalize(rd);\n    //rd.y *= sin(iTime-0.3);\n    vec3 ro = vec3(0., 0., -3.5);\n    float t=iTime*.5;\n    //ro.z += 1.0-2.4*cos(iTime);        //left in right out\n    //ro.x -= 4.*.8*cos(iTime-3.14*.5);  //left in right out\n    ro.z += 2.-3.6*cos(t+3.14*1.);      //left in left out\n    ro.x -= .8*cos(t+3.14*.5);           //left in left out\n    ro.y -= 0.3;\n    \n    //rotation\n    ro.xz *= R(t+3.14);//The observation point rotates around the object.\n    rd.xz *= R(t+3.14);//The object rotates around the observation point.\n    \n    float l = 0.0;\n    \n\n    for(float i = 1.0; i < 50.0; i++) {\n    vec3 p = ro + rd * l; // Calculate the location where the ray intersects with the object.\n    float dw = sdScene_w(p);//d_white\n    float db = sdScene_b(p);//d_black\n    float d = min(dw,db);\n    \n    l += clamp(d, 0.0, 0.3); // refresh the ray and limit it\n\n    if(db < 0.00001 && db < dw) { // limitation\n        color += 1.0 / i; \n        //color = 1. / (l * l) / 25.;\n        //break;\n    }\n    \n    if(dw < 0.00001 && db > dw) { // limitation\n        color += 1.0 / i; \n        //color = 1. / (l * l) / 25.;\n        //break;\n    }\n    }\n\n\n\n    color = pow(color, 1./2.2);\n    fragColor = vec4(vec3(color), 1.);\n}","name":"Image","description":"","type":"image"}]}