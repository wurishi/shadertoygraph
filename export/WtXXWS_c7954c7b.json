{"ver":"0.1","info":{"id":"WtXXWS","date":"1564004290","viewed":433,"name":"VoronoiGoof01","username":"Taron","description":"Just some fun with voronoi. Computed some normals, some simple lighting with a moving point light, that's all. First time I goof around with that. Seems very popular, likely thanks to \"The Art of Code\", which I just stumbled across on youtube.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 N22(vec2 p)\n{\n    vec3 a = fract(p.xyx*vec3(123.34, 234.45, 345.65));\n    a += dot(a, a+34.45);\n    return fract(vec2(a.x*a.y, a.y*a.z));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    float m = 0.;\n    float t = iTime*2.5;\n    \n    float minDist = 100.;\n    float cellIndex = 0.;\n    vec2 cid = vec2(0);\n    \n    vec3 col = vec3(1.);\n    vec3 norm = vec3(0.,0.,-1.);\n    \n    vec3 pos = vec3(uv,0.);\n\n    uv *= 6.+sin(t*.25)*4.;\n    vec2 gv = fract(uv)-.5;\n    vec2 id = floor(uv);\n    for(float y=-1.; y<=1.; y++)\n        for(float x=-1.; x<=1.; x++)\n        {\n            vec2 offs = vec2(x,y);\n\n            vec2 n = N22(id+offs);\n            vec2 p = offs+sin(n*t)*0.5;\n\n            p -= gv;\n\n            \n            float toff = t+p.x+id.y+offs.y;\n            vec2 rps = vec2(sin(toff), cos(toff));\n            vec2 rp = vec2(p.x*rps.x+p.y*rps.y,p.x*rps.y-p.y*rps.x); \n            \n            float d = length(p);\n            \n            d = mix(d, abs(rp.x)+abs(rp.y),sin(t*0.5));\n            \n\n            if(d<minDist)\n            {  \n                norm.rg = p;\n                norm.b = .75-d;\n                minDist = d;\n                cid = vec2(5.)+id+offs;\n            }\n        }\n\n    float v = (0.75-minDist*0.5);\n    col *= vec3(v);\n    col *= 0.25+0.75*N22(cid).rgg;\n\n    norm = normalize(norm);\n    t*=0.35;\n    vec3 lpos = vec3(4.*sin(t),4.*cos(t),0.);\n    vec3 light = vec3(uv.xy-lpos.xy,lpos.z);\n    \n    float fancy = length(light)*.1;\n    float ldist = 1.-min(1.,fancy);\n    \n    light = normalize(light);\n    float ss = max(0.,0.5+0.5*dot(light, norm));\n    col *= 0.25+0.75*max(0.,dot(light, norm))+ss*vec3(0.7,.4,.3);\n    col.gb *=vec2(ldist,ldist*ldist);\n    vec3 rd = -normalize(vec3(pos.xy,0.85));\n    col += 0.5*pow(max(0.,dot(reflect(rd, norm), light)),43.);\n    col *= ldist * exp(1.-minDist);\n    fancy = min(1., minDist*fancy*.5);\n    col += fancy*fancy*vec3(0.,0.6,0.8);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}