{"ver":"0.1","info":{"id":"3lyXDc","date":"1583695796","viewed":47,"name":"GR_Parcours_03_Exo_02_Raytracer","username":"rocchettig","description":"First raytracer for Initiation Scripting Course","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["ray"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/3lyXDc\n\n// Sphere1 percutÃ©e ? Fonction\n\nvec4 getIntersection (vec3 origin, vec3 ray, vec4 sphere)\n{\n    \n    float h = length(sphere.xyz-origin);\n    float a = dot (sphere.xyz - origin, ray);\n    float sq_o = h*h - a*a;\n    \n\t// Intersection ?\n    \n    float sq_d = sphere.w*sphere.w - sq_o;\n    \n    if (sq_d > 0.)\n    {\n      \t\n        float d = sqrt(sq_d);\n        vec3 intersection = origin + (a - d)* ray;\n        return vec4 (intersection, 1.0);\n        \n    }\n    else\n    {\n        \n        return vec4 (0.);\n        \n    }\n     \n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n\t//Camera  \n    \n    vec3 posCamera = vec3 (iResolution.xy/2., 1000.);\n    vec3 posEcran = vec3 (fragCoord, 0.0);\n    \n    //Ray\n    \n    vec3 ray = normalize (posEcran - posCamera);\n    \n    \n    //Spheres\n   \n    vec4 sphere = vec4 (iResolution.xy/2.,-200, 100.);\n    \n    /*\n    vec4 sphere2 = vec4 (iResolution.xy/4.,-100.,70.);\n    vec4 sphere3 = vec4 (iResolution.xy/8.,-100, 50.);\n\n    vec4 sphere4 = vec4 (iResolution.xy*0.75,-100.,70.);\n    vec4 sphere5 = vec4 (iResolution.xy*0.875,-100, 50.);\n    \n    vec4 sphere6 = vec4 (iResolution.x*0.75,iResolution.y*0.25,-100.,70.);\n    vec4 sphere7 = vec4 (iResolution.x*0.875,iResolution.y*0.125,-100, 50.);\n    \n    vec4 sphere8 = vec4 (iResolution.x*0.25,iResolution.y*0.75,-100.,70.);\n    vec4 sphere9 = vec4 (iResolution.x*0.125,iResolution.y*0.875,-100, 50.);\n    \n    */\n  \n    // Light\n    vec3 light_pos = vec3(iMouse.xy,0.);\n    \n    // Shading\n    vec3 col = vec3 (0.);\n\tvec4 intersection = getIntersection (posCamera, ray,sphere);\n\tif (intersection.w > 0.)\n\t\t{\n           vec3 normal = normalize (intersection.xyz - sphere.xyz);\n           vec3 surface_pos = intersection.xyz;\n            \n           vec3 incidence = light_pos - surface_pos;\n           float intensite = length(incidence);\n            \n           incidence = normalize (incidence);\n           intensite = 15000. / (intensite*intensite);\n               \n           // Lambert\n            \n           col = dot(incidence, normal) * vec3(15.,2.,1.) * intensite;\n           col = col*.6+.4;\n            \n\t\t}\n    \n \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}