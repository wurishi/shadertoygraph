{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"//Tinkering with the code found here\n//https://www.shadertoy.com/view/Xds3zN\n\n#define \tM_PI   3.14159265358979323846\n#define \tDEG2RAD(x)   ((x) * 0.01745329251994329575)\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n\tvec3 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h ) - r;\n}\n\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\nfloat sdCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\nfloat sdCylinder2( vec3 p, vec2 h )\n{\n//  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  vec2 d = abs(vec2(length(p.xy),p.z)) - h;\n \n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\n\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\nmat4 rotXMat(float a)\n{ \nmat4 m;\nm[0] = vec4(1.0, 0.0, 0.0, 1.0); //Sets the first column    \nm[1] = vec4(0.0, cos(a), sin(a), 0.0);    \nm[2] = vec4(0.0, -sin(a), cos(a), 0.0);    \nm[3] = vec4(0.0, 0.0, 0.0, 1.0);     \n    \nreturn m;\n}\n\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\nmat4 rotZMat(float a)\n{ \nmat4 m;\nm[0] = vec4(cos(a),sin(a), 0.0, 0.0); //Sets the first column    \nm[1] = vec4(-sin(a), cos(a), 0.0,0.0);    \nm[2] = vec4(0.0, 0.0, 1.0, 0.0);    \nm[3] = vec4(0.0, 0.0, 0.0, 1.0);     \n    \nreturn m;\n}\n\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\nvec3 opTx( vec3 p, mat4 m )\n{\n    vec4 q = m*vec4(p,1.0);\n    return q.xyz;\n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\nvec2 map( in vec3 pos )\n{\n//    vec2 res = opU( vec2( sdPlane(     pos), 1.0 ),\n//\t                vec2( sdSphere(    pos-vec3( 0.0,0.25, 0.0), 0.25 ), 46.9 ) );\n   // res = opU( res, vec2( sdBox(       pos-vec3( 1.0,0.25, 0.0), vec3(0.25) ), 3.0 ) );\n    \n    \n    \n    //saucer\n    vec2 res = vec2( sdCylinder(  pos-vec3( 0.0,0.30,-0.5), vec2(0.6,0.04) ), 8.0 );\n    res = opU( res, vec2(sdCylinder(  pos-vec3( 0.0,0.30,-0.5), vec2(0.2,0.09) ), 8.0  ));\n    res = opU( res, vec2( sdSphere(     pos-vec3(  0.0,0.30, -0.5), 0.15 ), 8.0 )  );\n\n\n    //body\n    res = opU( res, vec2( sdCylinder2(  pos-vec3(  0.0,-0.20, 0.2), vec2(0.2,0.5) ), 8.0 ) );\n    res = opU( res, vec2( sdCylinder2(  pos-vec3(  0.0,-0.20, 0.4), vec2(0.16,0.6) ), 8.0 ) );\n    \n \n   //neck   \n   mat4 m = rotXMat(DEG2RAD(24.0));\n   res = opU( res, vec2( sdBox( opTx( pos-vec3(  -0.0,0.00, -0.12),m), vec3(0.09,0.28,0.2)), 8.0 ) );\n \n    \n   //engine mounts\n    \n   m = rotZMat(DEG2RAD(-34.0) );\n   res = opU( res, vec2( sdBox( opTx( pos-vec3(  -0.1,0.00, 0.55),m), vec3(0.03,0.4,0.1)), 8.0 ) );\n \n \n   m = rotZMat(DEG2RAD(34.0) );\n   res = opU( res, vec2( sdBox( opTx( pos-vec3(  0.1,0.00, 0.55),m), vec3(0.03,0.4,0.1)), 8.0 ) );\n    \n   //engines\n    \n    res = opU( res, vec2( sdCylinder2(  pos-vec3(  0.35,0.30, 1.0), vec2(0.1,0.6) ), 8.0 ) );\n    res = opU( res, vec2( sdCylinder2(  pos-vec3( -0.35,0.30, 1.0), vec2(0.1,0.6) ), 8.0 ) );\n    res = opU( res, vec2( sdSphere(     pos-vec3(  0.35,0.30, 0.35), 0.10 ), 46.9 )  );\n    res = opU( res, vec2( sdSphere(     pos-vec3( -0.35,0.30, 0.35), 0.10 ), 46.9 )  );\n\n    res = opU( res, vec2( sdCylinder2(  pos-vec3(   0.35,0.30, 1.1), vec2(0.09,0.6) ), 8.0 ) );\n    res = opU( res, vec2( sdCylinder2(  pos-vec3(  -0.35,0.30, 1.1), vec2(0.09,0.6) ), 8.0 ) );\n \n\n   \n    //sdBox( vec3 p, vec3 b )\n    \n    \n    \n    \n    return res;\n}\n\n\n\n\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 1.0;\n    float tmax = 20.0;\n    \n#if 0\n    float tp1 = (0.0-ro.y)/rd.y; if( tp1>0.0 ) tmax = min( tmax, tp1 );\n    float tp2 = (1.6-ro.y)/rd.y; if( tp2>0.0 ) { if( ro.y>1.6 ) tmin = max( tmin, tp2 );\n                                                 else           tmax = min( tmax, tp2 ); }\n#endif\n    \n\tfloat precis = 0.002;\n    float t = tmin;\n    float m = -1.0;\n    for( int i=0; i<50; i++ )\n    {\n\t    vec2 res = map( ro+rd*t );\n        if( res.x<precis || t>tmax ) break;\n        t += res.x;\n\t    m = res.y;\n    }\n\n    if( t>tmax ) m=-1.0;\n    return vec2( t, m );\n}\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\n\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n\n vec3 col = vec3(0.0, 0.0, 0.0);\nvec2 res = castRay(ro,rd);    \n    \nfloat t = res.x;\n\tfloat m = res.y;\n    if( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        vec3 ref = reflect( rd, nor );\n        \n        // material        \n\t\tcol = 0.45 + 0.3*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n        \n        \n        if( m<1.5 ) \n        {\n            \n            float f = mod( floor(5.0*pos.z) + floor(5.0*pos.x), 2.0);\n            col = 0.4 + 0.1*f*vec3(1.0);\n        }\n        \n        vec3  lig = normalize( vec3(-0.6, 0.3, -0.5) );\n\t\tfloat amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        \n        amb = amb/4.;\n        col = (col*dif)+amb;\n        \n    }\n    \n    \n    \n    \n    \nreturn vec3( clamp(col,0.0,1.0) );\n}\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\n    \n//////////////////////////////////////////////////////////////////////////////////////////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n\tp.x *= iResolution.x/iResolution.y;\n    vec2 mo = iMouse.xy/iResolution.xy;\n\t\t \n\tfloat time = 15.0 + iTime;\n\n\t// camera\t\n\tvec3 ro = vec3( -0.5+3.2*cos(0.1*time + 6.0*mo.x), 1.0 + 2.0*mo.y, 0.5 + 3.2*sin(0.1*time + 6.0*mo.x) );\n\tvec3 ta = vec3( -0.0, -0.0, 0.5 );\n\t\n\t// camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, 0.0 );\n    \n    // ray direction\n\tvec3 rd = ca * normalize( vec3(p.xy,2.5) );\n\n    // render\t\n    vec3 col = render( ro, rd );\n\n\tcol = pow( col, vec3(0.4545) );\n\n    fragColor=vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4t2GzR","date":"1426666480","viewed":250,"name":"Shadey McShadish[NV15]","username":"dcoombes","description":"Space, the final frontier\n","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["space","nv15"],"hasliked":0,"parentid":"","parentname":""}}