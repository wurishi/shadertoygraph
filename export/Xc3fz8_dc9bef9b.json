{"ver":"0.1","info":{"id":"Xc3fz8","date":"1732710594","viewed":47,"name":"flow-thomtron","username":"thomtron","description":"testing texelfetch function and working with buffers","likes":3,"published":1,"flags":48,"usePreview":0,"tags":["flow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord;\n    fragColor = texelFetch(iChannel0,ivec2(uv),0);\n    \n    vec2 st = fragCoord/iResolution.x;\n    st *=5.0;\n    \n    //fragColor = vec4((velocityfield(st,0.1*iTime) + vec2(0.5)).rg,0.0,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\nconst int KEY_SPACE = 0;\n\nconst float dt = 0.01;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord;\n    vec2 st = fragCoord/iResolution.x;\n    \n#if SET==0\n    st *= 50.0;\n#elif SET==1\n    st *= 1.0;\n#endif\n    \n    vec2 vel = velocityfield(st,0.1*iTime);\n    float s = 0.99;\n    \n#if SET==0\n    s = 0.99;\n#elif SET==1\n    s = sqrt(vel.x*vel.x + vel.y*vel.y);\n    s = 1.0 - s*s;\n    vel *= 0.8;\n#endif\n    \n    \n    fragColor = s*texture(iChannel0,uv/iResolution.xy - vel*dt) + (1.0-s)*texture(iChannel2,uv/iResolution.x);\n    \n    if(texelFetch(iChannel1, ivec2(KEY_UP, 0), 0).r == 1.0) {\n        fragColor = texture(iChannel2,uv/iResolution.x);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord;\n    fragColor = texelFetch(iChannel0,ivec2(uv),0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// my defines:\n\n#define SET 1\n\n\n// Author @patriciogv - 2015\n// http://patriciogonzalezvivo.com\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nfloat random (in vec2 _st) {\n    return fract(sin(dot(_st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 _st) {\n    vec2 i = floor(_st);\n    vec2 f = fract(_st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n#define NUM_OCTAVES 4\n\nfloat fbm ( in vec2 _st) {\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(100.0);\n    // Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5),\n                    -sin(0.5), cos(0.50));\n    for (int i = 0; i < NUM_OCTAVES; ++i) {\n        v += a * noise(_st);\n        _st = rot * _st * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\n\n\n// my code:\n\nvec2 noise2(in vec2 _st) {\n    return vec2(noise(_st),noise(vec2(12.9898,78.233)+_st));\n}\n\nvec2 fbm2(in vec2 _st) {\n    vec2 v = vec2(0.0);\n    float a = 0.5;\n    vec2 shift = vec2(100.0);\n    // Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5),\n                    -sin(0.5), cos(0.50));\n    for (int i = 0; i < NUM_OCTAVES; ++i) {\n        v += a * noise2(_st);\n        _st = rot * _st * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\n\nvec2 velocityfield(in vec2 _st, in float t) {\n    float mult1 = 1.0;\n#if SET==0\n    mult1 = 1.0;\n#else \n    mult1 = 3.0;\n#endif\n    return fbm2(mult1*fbm2(3.0*_st) + vec2(33.344,12.345) + vec2(0.1,0.8)*t) - vec2(0.5);\n}","name":"Common","description":"","type":"common"}]}