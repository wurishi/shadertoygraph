{"ver":"0.1","info":{"id":"ttdBz7","date":"1612543938","viewed":259,"name":"Floating Heart","username":"icaroleles1","description":"Floating Heart. Very Simple water by voronoi on a plane ","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["heart"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot(float r) {\n    float s = sin(r);\n    float c = cos(r);\n    return mat2(c, -s, s, c);\n}\n\n\nvec2 h22(vec2 p)\n{\n    vec3 a = fract(p.xyx * vec3(123.34, 234.34, 345.65));\n    a += dot(a, a + 34.45);\n    return fract(vec2(a.x * a.y, a.y * a.z));\n}\n\nvec2 hashQuad(float t){\n\n    return vec2(fract (sin(8324.*t)*144455.), fract(sin(1138754.*t)*432.));\n\n}\n\nfloat voronoi(vec2 uv, float t) {\n    float minDist = 100.0;\n    float cellIndex = 0.0;\n    \n\n    vec2 gv = fract(uv)-0.5;\n    vec2 id = floor(uv);\n    vec2 cid = vec2(0.0);\n\n    for(float y = -1.0; y <= 1.0; y++)\n    {\n        for(float x = -1.0; x <= 1.0; x++)\n        {\n            vec2 offs = vec2(x, y);\n\n            vec2 n = h22(id+offs);\n            vec2 p = offs+sin(n*t)*0.5;\n            float d = length(gv-p);\n\n            if(d<minDist)\n            {\n                minDist = d;\n                cid = id+offs;\n            }\n        }\n    }\n    \n    return minDist;\n}\n\nvec2 mapScene(vec3 p ){\n\n      float v = voronoi(p.xz*0.1, (iTime*1.5));\n    v *= voronoi(p.xz*0.15*rot(3.141*0.125), (iTime*1.952)+251.0);\n    v *= 0.75;\n    v += 0.5;\n    \n    float pd = smoothstep(p.y, 0.0, v);\n    \n    return vec2(pd*p.y,1.0);\n}\n\nvec2 rayMarch(vec3 ro,vec3 rd){\n    float dO = 0.;\n    vec2 d;\n    for(int i=0;i<100;i++){\n     vec3 p = ro + rd*dO;\n        d = mapScene(p);\n        \n\n        dO+=d.x;\n        if(d.x >100.0|| abs(d.x)<.01)\n            break;\n\n    }\n        float id=d.y;\n        float dist = dO;\n    \n    return vec2(dist,id);\n}\n\n\n\nvec3 shadeWater(vec3 p){\n\n      vec3 color = vec3(.4,.5,.7) *.6*p.y*1.3;\n  for(float i = 0. ; i < 100.; i++){\n       vec2 dir = hashQuad(i)-.5;\n       \n      float d = length(p.xz - vec2(dir.x*50.7,dir.y*80.4));\n      float brightness = .0192;\n      color +=(brightness /d) * vec3(.9,.7,.1);\n       }\n       \n\n\n\treturn  color;\n}\n\nvec3 shadeScene(vec3 p,vec3 ro,vec3 uv,float geometry){\n    \n\nreturn shadeWater(p);\n   \n}\n\nvec3 heart(vec3 uv, float time){\n\n    vec3 col = vec3(0);\n     uv.z+= sqrt(abs(uv.x))*.5;\n     \n     float d = length(uv.xz);\n     float brightness = 2.12;\n     col+=(brightness/d*.5) * vec3(.9,.3,.5);\n       \n     \n    \nreturn col;\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n \n \n    vec3 color = vec3(-.2);\n    \n    vec3 ro = vec3(cos(iTime*.09)*10.    ,6.9,14. );\n    vec3 ta = vec3(0,5,2);\n    mat3 ca = setCamera( ro, ta, 0.0 );\n\n    vec3 rd = ca *normalize(vec3(uv,1.0));\n\n    vec2 scene = rayMarch(ro,rd);\n    vec3 point = ro + rd*scene.x;\n  \n    if(scene.x<=100. && scene.x>.01){\n    \n            color = shadeScene(point,ro,rd,scene.y);  \n            color+= mix(color *.1,vec3(smoothstep(.01,.09,.006/length(uv-vec2(.0,.2)))),abs(point.z)*(uv.y*.88));\n            \n            color+=heart(point ,.0);\n            \n         }\n\n    else{\n       color +=vec3(.4,.3,.5);\n       color+= smoothstep(.001,.03,.003/(length(uv-vec2(.0,.2))))*vec3(.8768,.865,.98322775);\n\n\n       for(float i = 0. ; i < 30.; i++){\n       vec2 dir = hashQuad(i)-.5;\n       \n      float d = length(uv.xy - vec2(dir.x*1.7,.3+dir.y*.4));\n      \n      float brightness = .00112;\n      color +=(brightness /d) * vec3(.9,.7,.1);\n      color +=1.2/length(point.xz) * vec3(.9,.7,.9);\n\n       }\n    }\n        // Output to screen\n    float GAMMA = 2.2;\n    color = pow(color,vec3(GAMMA));\n    \n  //  color = color / (vec3(vec3(1)+color));\n    fragColor = vec4((color.xyz),1.0);\n}","name":"Image","description":"","type":"image"}]}