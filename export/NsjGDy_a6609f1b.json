{"ver":"0.1","info":{"id":"NsjGDy","date":"1617901964","viewed":60,"name":"princess-witch sphere","username":"lovely_princess","description":"2nd exersise","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["cmc"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst vec3 CAMERA_POS = vec3(1.0, 1.0, -3.5);\nconst float EPS = 1e-4;\n\nconst vec3 l1_pos = vec3(1.5, 0.6, -1.5);\nconst float l1_radius = 0.2;\nconst vec3 l1_color = (vec3(1, 0.0, 1));\n\nconst vec3 l2_pos = vec3(1.0, 0.6, 1.5);\nconst float l2_radius = 0.16;\nconst vec3 l2_color = (vec3(0, 0.8, 1));\n\n\nconst vec3 apex1 = vec3(-0.5, -0.5, sqrt(3.0) / 6.0);\nconst vec3 apex2 = vec3(0.5, -0.5, sqrt(3.0) / 6.0);\nconst vec3 apex3 = vec3(0.0, -0.5, -(sqrt(3.0) / 2.0) + sqrt(3.0) / 6.0);\nconst vec3 apex4 = vec3(0.0,  -0.5+sqrt(6.0) / 3.0, 0.0);\n\nconst vec3 hapex1 = apex1 / 2.0 - vec3(0, 0.15, 0);\nconst vec3 hapex2 = apex2 / 2.0 - vec3(0, 0.15, 0);\nconst vec3 hapex3 = apex3 / 2.0 - vec3(0, 0.15, 0);\nconst vec3 hapex4 = apex4 / 2.0 - vec3(0, 0.15, 0);\n\nconst vec3 l3_pos = vec3(-1.0, 0.8, 0);//(apex1 + apex2 + apex3 + apex4)/4.0;\nconst float l3_radius = 0.7;\nconst vec3 l3_color = (vec3(1, 0, 0));\n\nvec3 randDir;\n\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2){\n    if(dot(v, normal) < 0.0){\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tg = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    if (sinB > 1.0){\n        return reflect(v, normal);\n    }\n    float cosB = sqrt(1.0 - sinB*sinB);\n    return normalize(sinB * tg + cosB * normal);\n}\n\nfloat pow2(float a){\n    return a * a;\n}\n\nfloat traceTriangle(vec3 pos, vec3 dir, vec3 apex1, vec3 apex2, vec3 apex3, out vec3 normal) {\n    vec3 edge1 = apex2 - apex1;\n    vec3 edge2 = apex3 - apex1;\n    vec3 tNormal = normalize(cross(edge1, edge2));\n\n    float normalViewAngle = dot(dir, tNormal);\n    if (abs(normalViewAngle) < EPS) {\n        return INF;\n    }\n    float d = dot(apex1 - pos, tNormal) / normalViewAngle;\n    if (d < 0.0) {\n        return INF;\n    }\n    vec3 hitPos = pos + dir * d;\n\n    float square = length(cross(edge1, edge2));\n    vec3 toHitVec1 = hitPos - apex1;\n    vec3 toHitVec2 = hitPos - apex2;\n    vec3 toHitVec3 = hitPos - apex3;\n\n    float square1 = length(cross(toHitVec1, toHitVec2));\n    float square2 = length(cross(toHitVec2, toHitVec3));\n    float square3 = length(cross(toHitVec1, toHitVec3));\n\n    if (abs(square - square1 - square2 - square3) < EPS) {\n        normal = tNormal;\n        return d;\n    }\n    return INF;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal){\n    float b = dot(pos, dir);\n    float D4 = b * b - dot(pos, pos) + r * r;\n    if(D4 < 0.0){\n        return INF;\n    }\n    float t = -b - sqrt(D4);\n    if (t > 0.0){\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D4);\n    if(t < 0.0){\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\n\nfloat tracePlane(vec3 pos, vec3 dir){\n    float t = (-0.75 - 3.0*EPS - pos.y) / dir.y;\n    if(t <= 0.0){\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if(dot(worldPos.xz, worldPos.xz) >= 16.0){\n        return INF;\n    }\n    return t;\n}\n\nfloat traceBase(vec3 pos, vec3 dir, out vec3 normal, float r, float upY) {\n    float upT = (upY - pos.y) / dir.y;\n    vec3 finalPos = pos + dir * upT;\n    if (dot(finalPos.xz, finalPos.xz) < r * r) {\n        normal = vec3(0, 1, 0);\n    } else {\n        upT = INF;\n    }\n    if (upT < 0.0) {\n        upT = INF;\n    }\n    if(pos.y == upY){\n        normal = vec3(0, 1, 0);\n        return upT;\n    }\n\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float D = b * b - (dot(pos.xz, pos.xz) - r * r) * a;\n    if (D < 0.0) {\n        return upT;\n    }\n    float t = (-b - sqrt(D)) / a;\n    if ((pos.y + t * dir.y < upY) && (t > 0.0) && (t < upT)) {\n        vec3 worldPos = pos + t * dir;\n        normal = normalize(vec3(pos.x, 0, pos.z));\n        return t;\n    }\n    t = (-b + sqrt(D)) / a;\n    if ((pos.y + t * dir.y < upY) && (t > 0.0) && (t < upT)) {\n        vec3 worldPos = pos + t * dir;\n        normal = normalize(vec3(pos.x, 0, pos.z));\n        return t;\n    }\n    return upT;\n}\n\n\n\nbool isOccluded(vec3 pos, vec3 target){\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    vec3 norm;\n    float trace = INF;\n    trace = traceBase(pos, dir, norm, 0.6 - EPS, -0.5 - EPS);\n    if(trace < dist){\n        return true;\n    }\n    trace = traceTriangle(pos, dir, apex2, apex3, apex4, norm);\n    if(trace < dist){\n        return true;\n    }\n    trace = traceTriangle(pos, dir, apex1, apex3, apex4, norm);\n    if(trace < dist){\n        return true;\n    }\n    trace = traceTriangle(pos, dir, apex2, apex3, apex1, norm);\n    if(trace < dist){\n        return true;\n    }\n    trace = traceTriangle(pos, dir, apex2, apex1, apex4, norm);\n    if(trace < dist){\n        return true;\n    }\n    \n    \n    return false;\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal){\n    vec3 toLight1 = l1_pos - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, toLight1 + randDir * l1_radius) ? 0.0 : 5.0f / distSq1;\n    vec3 toLight2 = l2_pos - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, toLight2 + randDir * l2_radius) ? 0.0 : 5.0f / distSq2;\n    vec3 toLight3 = l3_pos - pos;\n    float distSq3 = dot(toLight3, toLight3);\n    float att3 = isOccluded(pos, toLight3 + randDir * l3_radius) ? 0.0 : 5.0f / distSq3;\n    \n    return color * (max(0.0, dot(normal, normalize(toLight1))) * att1 * l1_color\n                   +max(0.0, dot(normal, normalize(toLight2))) * att2 * l2_color\n                   +max(0.0, dot(normal, normalize(toLight3))) * att3 * l3_color\n                   +texture(iChannel1, normal).rgb * 0.3\n                   );\n}\n\n\nfloat rand(float x){\n    return fract(sin( dot( vec3(x), vec3(12.9898, 78.233, 45.5432) )) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5) * 2.0) /iResolution.x; // с помощью джиттеринга здесь реализован анти алиасинг\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    const float AIR_N = 1.0;\n    const float GLASS_N = 1.5;\n    const float DIAMOND_N = 2.5;\n    float cur_n = AIR_N;\n    float nEnter = AIR_N;\n    float n2 = GLASS_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    float DIAMOND_R = pow2(DIAMOND_N - GLASS_N) / pow2(DIAMOND_N + GLASS_N);\n    \n    vec3 colorMult = vec3(1, 1, 1);\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    \n    for(int i = 0; i<10; ++i){\n        int materialType;\n        vec3 color;\n        float t = INF;\n        nEnter = AIR_N;\n        float trace;\n        vec3 final_normal;\n        vec3 normal;\n        \n        trace = tracePlane(curPos, curDir);\n        if(trace < t){\n            t = trace;\n            final_normal = vec3(0.0, 1.0, 0.0);\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            if(randVals.y < 0.1){\n                materialType = REFLECTION;\n            }\n            color = texture(iChannel0, worldPos.xz * 0.3).rgb;\n        }\n        \n        vec3 multDark = vec3(0.3, 0.3, 0.3);\n        \n        // отрисовка внешней пирамиды (собственно кристала)\n        \n        trace = traceTriangle(curPos, curDir, apex2, apex3, apex4, normal);\n        if(trace < t){\n            t = trace;\n            final_normal = normal;\n            if(dot(curDir, final_normal) > 0.0){\n                nEnter = AIR_N;\n            } else {\n                nEnter = GLASS_N;\n            }\n            if(randVals.x < GLASS_R * 10.0){\n                materialType = REFLECTION;\n            } else {\n                colorMult = multDark;\n                materialType = REFRACTION;\n            }\n            color = vec3(0, 1, 1);\n        }\n        trace = traceTriangle(curPos, curDir, apex1, apex3, apex2, normal);\n        if(trace < t){\n            t = trace;\n            final_normal = normal;\n            if(dot(curDir, final_normal) > 0.0){\n                nEnter = AIR_N;\n            } else {\n                nEnter = GLASS_N;\n            }\n            if(randVals.x < GLASS_R * 10.0){\n                materialType = REFLECTION;\n            } else {\n                colorMult = multDark;\n                materialType = REFRACTION;\n            }\n            color = vec3(0, 0, 1);\n        }\n        trace = traceTriangle(curPos, curDir, apex1, apex4, apex3, normal);\n        if(trace < t){\n            t = trace;\n            final_normal = normal;\n            if(dot(curDir, final_normal) > 0.0){\n                nEnter = AIR_N;\n            } else {\n                nEnter = GLASS_N;\n            }\n            if(randVals.x < GLASS_R * 10.0){\n                materialType = REFLECTION;\n            } else {\n                colorMult = multDark;\n                materialType = REFRACTION;\n            }\n            color = vec3(0, 1, 0);\n        }\n        trace = traceTriangle(curPos, curDir, apex1, apex4, apex2, normal);\n        if(trace < t){\n            t = trace;\n            final_normal = normal;\n            if(dot(curDir, final_normal) > 0.0){\n                nEnter = AIR_N;\n            } else {\n                nEnter = GLASS_N;\n            }\n            \n            if(randVals.x < GLASS_R * 10.0){\n                materialType = REFLECTION;\n            } else {\n                colorMult = multDark;\n                materialType = REFRACTION;\n            }\n            color = vec3(1, 1, 0);\n        }\n        \n        //конец отрисовки пирамиды-кристала\n        \n        // отрисовка внутренней пирамиды (космоса)\n        \n        trace = traceTriangle(curPos, curDir, hapex2, hapex3, hapex4, normal);\n        if(trace < t){\n            t = trace;\n            final_normal = normal;\n            vec3 worldPos = t * curDir + curPos;\n            if(dot(curDir, final_normal) > 0.0){\n                nEnter = GLASS_N;\n            } else {\n                nEnter = DIAMOND_N;\n            }\n            if(randVals.x < GLASS_R){\n                materialType = REFLECTION;\n            } else if(randVals.x < (1.0 + GLASS_R)/2.0){\n                color = texture(iChannel2, worldPos.yz).rgb * 3.0;\n                materialType = EMISSION;\n            } else {\n                colorMult = vec3(0.4, 0, 0.7);\n                materialType = REFRACTION;\n            }\n            \n        }\n        trace = traceTriangle(curPos, curDir, hapex1, hapex3, hapex2, normal);\n        if(trace < t){\n            t = trace;\n            final_normal = normal;\n            vec3 worldPos = t * curDir + curPos;\n            if(dot(curDir, final_normal) > 0.0){\n                nEnter = GLASS_N;\n            } else {\n                nEnter = DIAMOND_N;\n            }\n            if(randVals.x < GLASS_R){\n                materialType = REFLECTION;\n            } else if(randVals.x < (1.0 + GLASS_R)/2.0){\n                color = texture(iChannel2, worldPos.xz).rgb * 3.0;\n                materialType = EMISSION;\n            } else {\n                colorMult = vec3(0.4, 0, 0.7);\n                materialType = REFRACTION;\n            }\n        }\n        trace = traceTriangle(curPos, curDir, hapex1, hapex4, hapex3, normal);\n        if(trace < t){\n            t = trace;\n            final_normal = normal;\n            vec3 worldPos = t * curDir + curPos;\n            if(dot(curDir, final_normal) > 0.0){\n                nEnter = GLASS_N;\n            } else {\n                nEnter = DIAMOND_N;\n            }\n            if(randVals.x < GLASS_R){\n                materialType = REFLECTION;\n            } else if(randVals.x < (1.0 + GLASS_R)/2.0){\n                color = texture(iChannel2, worldPos.xz).rgb * 3.0;\n                materialType = EMISSION;\n            } else {\n                colorMult = vec3(0.4, 0, 0.7);\n                materialType = REFRACTION;\n            }\n        }\n        trace = traceTriangle(curPos, curDir, hapex1, hapex4, hapex2, normal);\n        if(trace < t){\n            t = trace;\n            final_normal = normal;\n            vec3 worldPos = t * curDir + curPos;\n            if(dot(curDir, final_normal) > 0.0){\n                nEnter = GLASS_N;\n            } else {\n                nEnter = DIAMOND_N;\n            }\n            \n            if(randVals.x < GLASS_R){\n                materialType = REFLECTION;\n            } else if(randVals.x < (1.0 + GLASS_R)/2.0){\n                color = texture(iChannel2, worldPos.xy).rgb * 3.0;\n                colorMult = vec3(1, 1, 1);\n                materialType = EMISSION;\n            } else {\n                colorMult = vec3(0.4, 0, 0.7);\n                materialType = REFRACTION;\n            }\n        }\n        \n        //конец отрисовки пирамиды-космоса\n        \n        \n        trace = traceSphere(curPos - l1_pos, curDir, l1_radius, normal);\n        if(trace < t){\n            t = trace;\n            final_normal = normal;\n            if(randVals.x < 0.2){\n                materialType = DIFFUSE;\n            } else {\n                materialType = EMISSION;\n            }\n            color = l1_color;\n        }\n        trace = traceSphere(curPos - l2_pos, curDir, l2_radius, normal);\n        if(trace < t){\n            t = trace;\n            final_normal = normal;\n            if(randVals.x < 0.2){\n                materialType = DIFFUSE;\n            } else {\n                materialType = EMISSION;\n            }\n            color = l2_color;\n        }\n        trace = traceSphere(curPos - l3_pos, curDir, l3_radius, normal);\n        if(trace < t){\n            t = trace;\n            final_normal = normal;\n            if(randVals.x < 0.2){\n                materialType = DIFFUSE;\n            } else {\n                materialType = EMISSION;\n            }\n            color = l3_color;\n        }\n        \n        trace = traceBase(curPos, curDir, normal, 0.6, -0.5 - EPS);\n        if(trace < t){\n            t = trace;\n            final_normal = normal;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel3, worldPos.xz * worldPos.y).rgb;\n        }\n        \n        if(t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if(materialType == EMISSION){\n                fragColor.rgb = color;\n                break;\n            } else if(materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, final_normal) * colorMult;\n                break;\n            } else if(materialType == REFLECTION) {\n                curDir = reflect(curDir, final_normal);\n                curPos = worldPos + curDir * EPS;\n                continue;\n            } else if(materialType == REFRACTION){\n                curDir = refraction(curDir, final_normal, cur_n, nEnter);\n                curPos = worldPos + curDir * EPS;\n                \n                if(dot(curDir, final_normal) > 0.0){\n                    cur_n = nEnter;\n                }\n                continue;\n            }\n        } else {\n            fragColor.rgb = texture(iChannel1, vec3(curDir.z, curDir.y + 0.15, -curDir.x)).rgb * colorMult;\n            break;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}