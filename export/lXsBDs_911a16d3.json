{"ver":"0.1","info":{"id":"lXsBDs","date":"1729119053","viewed":14,"name":"Fork Damaged vd","username":"vd03","description":"Simulating a damaged VCR playing a video","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["chromaticaberration"],"hasliked":0,"parentid":"stGBWR","parentname":"Damaged VCR puzzle"},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Hint, it's a few lines of code, and makes use of a tan function :)\n    vec2 warpedUv = uv;\n    float t = mod(iTime,10.);\n    float d = 0.;\n    if(abs(uv.y-(t/10.))<0.08)\n        d = tan(uv.y+(cos(t*500.)+1.)/2.+0.5);\n    vec2 offset1 = vec2((sin(t*2.+21.)+1.)/100.,(sin(t*2.+2.)+1.)/100.+d);\n    vec2 offset2 = vec2((sin(t*2.+45.)+1.)/100.,(sin(t*2.+6.)+1.)/100.+d);\n    vec2 offset3 = vec2((sin(t*2.+32.)+1.)/100.,(sin(t*2.-23.)+1.)/100.+d);\n    \n    float r = texture(iChannel0, warpedUv + offset1).r;\n    float g = texture(iChannel0, warpedUv + offset2).g;\n    float b = texture(iChannel0, warpedUv + offset3).b;\n                          \n    vec3 col = vec3(r, g, b);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}