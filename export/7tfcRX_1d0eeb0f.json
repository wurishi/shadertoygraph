{"ver":"0.1","info":{"id":"7tfcRX","date":"1648407113","viewed":106,"name":"Paranormal level (Twitch)","username":"rimina","description":"Some simple fun shader I did on my Twitch live shader coding stream 27th of March 2022.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","sdf","glow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Copyright Â© 2022 rimina.\n// All rights to the likeness of the visuals reserved.\n\n// Any individual parts of the code that produces the visuals is\n// available in the public domain or licensed under the MIT license,\n// whichever suits you best under your local legislation.\n\n// This is to say: you can NOT use the code as a whole or the visual\n// output it produces for any purposes without an explicit permission,\n// nor can you remix or adapt the work itself without a permission.*\n// You absolutely CANNOT mint any NFTs based on the Work or part of it.\n// You CAN however use any individual algorithms or parts of the Code\n// for any purpose, commercial or otherwise, without attribution.\n\n// *(In practice, for most reasonable requests, I will gladly grant\n//   any wishes to remix or adapt this work :)).\n\n//Huge thanks to the live coding community, I've learned so much from you!\n\nconst float E = 0.001;\nconst float FAR = 100.0;\nconst int STEPS = 60;\n\nvec3 glow = vec3(0.0);\n\nint M = 0;\n\nfloat box(vec3 p, vec3 b){\n    vec3 d = abs(p) - b;\n    return length(max(d, 0.0)) + min(max(d.x, max(d.y, d.z)), 0.0);\n}\n\nvoid rot(inout vec2 p, float a){\n    p = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\nfloat center(vec3 p, vec3 t, vec3 s, float a){\n    vec3 pp = p;\n\n    pp -= t;\n    rot(pp.xy, a*0.5);\n    rot(pp.xz, a*0.5);\n    rot(pp.yz, a*0.25);\n    return box(pp, s);\n}\n\nfloat scene(vec3 p){\n    vec3 pp = p;\n\n    float cc = center(pp, vec3(0.0), vec3(1.0), -iTime);\n\n    pp.y = abs(pp.y)-5.0;\n\n    float fc = box(pp, vec3(15.0, 2.0, 15.0));\n\n    vec3 translate = vec3(0.0, -1.2, 0.0);\n    vec3 size = vec3(2.0);\n    float invisible = center(pp, translate, size, iTime);\n\n    pp.xz = abs(pp.xz)-vec2(12.0);\n\n    float pilar = box(pp, vec3(1.0, 5.2, 1.0));\n\n    glow += vec3(0.2, 0.2, 0.5) * 0.01 / (abs(invisible)+0.01);\n\n    fc = max(fc, -invisible);\n    fc = min(fc, pilar);\n\n    M = 0;\n    if(cc < fc){\n        M = 1;\n    }\n\n    return min(cc, fc);\n}\n\nfloat march(vec3 ro, vec3 rd){\n    float t = E;\n    vec3 p = ro;\n\n    for(int i = 0; i < STEPS; ++i){\n        float d = scene(p);\n        t += d;\n        p = ro + rd * t;\n\n        if(d < E || t > FAR){\n            break;\n        }\n    }\n\n    return t;\n}\n\nvec3 normals(vec3 p){\n    vec3 e = vec3(E, 0.0, 0.0);\n    return normalize(vec3(\n        scene(p+e.xyy) - scene(p-e.xyy),\n        scene(p+e.yxy) - scene(p-e.yxy),\n        scene(p+e.yyx) - scene(p-e.yyx)\n    ));\n}\n\nvec3 shade(vec3 p, vec3 rd, vec3 ld, vec3 lc, int m){\n  vec3 n = normals(p);\n  \n  float l = max(dot(ld, n), 0.0);\n  float a = max(dot(reflect(rd, ld), n), 0.0);\n  float s = pow(a, 20.0);\n  \n  vec3 lamc = vec3(0.3);\n  if(m == 1){\n    lamc = vec3(0.5, 0.9, 0.9);\n    s = pow(a, 40.0);\n  }\n  \n  \n  return l*lamc + s*lc;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 q = -1.0 + uv * 2.0;\n    q.x *= iResolution.x/iResolution.y;\n    \n    vec3 ro = vec3(6.0*sin(iTime*0.1), 0.5, 6.0*cos(iTime*0.1));\n    vec3 rt = vec3(0.0, sin(iTime*0.1)*0.75, 0.0);\n\n    vec3 z = normalize(rt-ro);\n    vec3 x = normalize(cross(z, vec3(0.0, 1.0, 0.0)));\n    vec3 y = normalize(cross(x, z));\n\n    vec3 rd = normalize(mat3(x,y,z) * vec3(q, 1.0/radians(60.0)));\n\n    float t = march(ro, rd);\n    vec3 p = ro + rd * t;\n\n    int m = M;\n\n    vec3 lp = vec3(0.0, 4.0, 0.0);\n    vec3 ld = normalize(lp-p);\n    vec3 lc = vec3(0.3, 0.3, 0.8);\n\n    vec3 ld2 = normalize(-lp-p);\n\n    vec3 ld3 = -rd;\n    vec3 lc3 = lc.brg;\n    vec3 fogc = vec3(uv.x*0.7, (sin(iTime*0.1)+1.0)*0.125, uv.y*0.8)*0.8;\n    vec3 col = fogc;\n    if(t < FAR){\n        col = shade(p, rd, ld, lc, m);\n        col += shade(p, rd, ld2, lc, m);\n        col += shade(p, rd, ld3, lc3, m);\n        col *= 0.5;\n    }\n    col += vec3(0.15, 0.25, 0.35);\n    col += glow*0.2;\n\n    float d = length(p-ro);\n    float amount = 1.0 - exp(-d*0.05);\n    col = mix(col, fogc, amount);\n\n    col = smoothstep(-0.2, 1.2, col);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}