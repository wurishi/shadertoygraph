{"ver":"0.1","info":{"id":"dtGBz1","date":"1701828028","viewed":18,"name":"computer art 3","username":"Mathew_IA_Art","description":"3","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["art"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Ajusta la velocidad de animación\n    float speed = 0.1;\n\n    // Actualiza el tiempo transcurrido\n    float timeElapsed = iTime * speed;\n\n    // Inicializar el color de fondo\n    vec3 backgroundColor = vec3(0.0, 0.0, 0.0);\n    fragColor = vec4(backgroundColor, 1.0);\n\n    // Define las coordenadas de los vértices del cubo en 3D\n    vec3 cubeVertices[8];\n    cubeVertices[0] = vec3(-100.0, -100.0, -100.0);\n    cubeVertices[1] = vec3(100.0, -100.0, -100.0);\n    cubeVertices[2] = vec3(100.0, 100.0, -100.0);\n    cubeVertices[3] = vec3(-100.0, 100.0, -100.0);\n    cubeVertices[4] = vec3(-100.0, -100.0, 100.0);\n    cubeVertices[5] = vec3(100.0, -100.0, 100.0);\n    cubeVertices[6] = vec3(100.0, 100.0, 100.0);\n    cubeVertices[7] = vec3(-100.0, 100.0, 100.0);\n\n    // Proyecta y rota los vértices del cubo en 3D a 2D\n    mat2 rotationMatrix = mat2(cos(timeElapsed), -sin(timeElapsed), sin(timeElapsed), cos(timeElapsed));\n    vec2 center = iResolution.xy / 2.0;\n\n    for (int i = 0; i < 8; i++) {\n        vec3 vertex = cubeVertices[i];\n        vec2 rotatedVertex = center + rotationMatrix * vertex.xy;\n        cubeVertices[i] = vec3(rotatedVertex, vertex.z);\n    }\n\n    // Mueve los puntos\n    float movementRadius = 300.0;\n    for (int i = 0; i < 8; i++) {\n        float angle = timeElapsed + float(i) * 0.5;\n        vec2 offset = vec2(cos(angle), sin(angle)) * movementRadius;\n        cubeVertices[i].xy += offset;\n    }\n\n    // Dibuja puntos\n    for (int i = 0; i < 8; i++) {\n        vec3 vertex = cubeVertices[i];\n        vec2 point = vertex.xy;\n        float distance = length(fragCoord - point);\n        if (distance < 5.0) {\n            fragColor = vec4(1.0, 1.0, 1.0, 1.0); // Color de los puntos\n        }\n    }\n\n    // Dibuja líneas del cubo\n    int cubeEdges[24];\n    cubeEdges[0] = 0; cubeEdges[1] = 1;\n    cubeEdges[2] = 1; cubeEdges[3] = 2;\n    cubeEdges[4] = 2; cubeEdges[5] = 3;\n    cubeEdges[6] = 3; cubeEdges[7] = 0;\n    cubeEdges[8] = 4; cubeEdges[9] = 5;\n    cubeEdges[10] = 5; cubeEdges[11] = 6;\n    cubeEdges[12] = 6; cubeEdges[13] = 7;\n    cubeEdges[14] = 7; cubeEdges[15] = 4;\n    cubeEdges[16] = 0; cubeEdges[17] = 4;\n    cubeEdges[18] = 1; cubeEdges[19] = 5;\n    cubeEdges[20] = 2; cubeEdges[21] = 6;\n    cubeEdges[22] = 3; cubeEdges[23] = 7;\n\n    for (int i = 0; i < 24; i += 2) {\n        int startIndex = cubeEdges[i];\n        int endIndex = cubeEdges[i + 1];\n\n        vec2 startPoint = cubeVertices[startIndex].xy;\n        vec2 endPoint = cubeVertices[endIndex].xy;\n        vec2 dir = normalize(endPoint - startPoint);\n        float len = length(endPoint - startPoint);\n\n        for (float t = 0.0; t < 1.0; t += 0.01) {\n            vec2 pos = startPoint + t * len * dir;\n            float distance = length(fragCoord - pos);\n            if (distance < 1.0) {\n                fragColor = vec4(1.0, 1.0, 1.0, 1.0); // Color de las líneas\n            }\n        }\n    }\n}\n     ","name":"Image","description":"","type":"image"}]}