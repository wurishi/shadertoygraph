{"ver":"0.1","info":{"id":"sl2XRW","date":"1627230061","viewed":271,"name":"SDF Color - Vector Version","username":"ChaosOfZen","description":"Learning SDF with color based on vec4 overload","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sdf","color","vector"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Adapted from https://inspirnathan.com/posts/53-shadertoy-tutorial-part-7\n\n\nconst int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float PRECISION = 0.001;\n\nvec4 sdSphere(vec3 p, float r, vec3 offset, vec3 col )\n{\n  float d = length(p - offset) - r;\n  return vec4(col, d);\n}\n\nvec4 sdFloor(vec3 p, vec3 col) {\n  float d = p.y + 5.;\n  return vec4(col, d);\n}\n\nvec4 unionColor(vec4 obj1, vec4 obj2) {\n  if (obj2.w < obj1.w) return obj2; // The w component of the object holds the \"signed distance\" value\n  return obj1;\n}\n\nvec4 sdScene(vec3 p) {\n  vec4 sphereLeft = sdSphere(p, 1., vec3(-1.5, 0.5, -2), vec3(.5, .1, .8));\n  vec4 sphereRight = sdSphere(p, 1., vec3(1.5, 0.5, -2), vec3(.1, 0.58, 0.29));\n  vec4 co = unionColor(sphereLeft, sphereRight); // co = closest object containing \"signed distance\" and color\n  co = unionColor(co, sdFloor(p, vec3(0, 0.2, 0.5)));\n  return co;\n}\n\nvec4 rayMarch(vec3 ro, vec3 rd, float start, float end) {\n  float depth = start;\n  vec4 co; // closest object\n\n  for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n    vec3 p = ro + depth * rd;\n    co = sdScene(p);\n    depth += co.w;\n    if (co.w < PRECISION || depth > end) break;\n  }\n  \n  vec3 col = vec3(co.rgb);\n\n  return vec4(col, depth);\n}\n\nvec3 calcNormal(in vec3 p) {\n    vec2 e = vec2(1.0, -1.0) * 0.0005; // epsilon\n    return normalize(\n      e.xyy * sdScene(p + e.xyy).w +\n      e.yyx * sdScene(p + e.yyx).w +\n      e.yxy * sdScene(p + e.yxy).w +\n      e.xxx * sdScene(p + e.xxx).w);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n  vec3 backgroundColor = vec3(0.1, 0.2, 0.6);\n\n  vec3 col = vec3(0);\n  vec3 ro = vec3(0, 0, 3); // ray origin that represents camera position\n  vec3 rd = normalize(vec3(uv, -1)); // ray direction\n\n  vec4 co = rayMarch(ro, rd, MIN_DIST, MAX_DIST); // closest object\n\n  if (co.w > MAX_DIST) {\n    col = backgroundColor; // ray didn't hit anything\n  } else {\n    vec3 p = ro + rd * co.w; // point on sphere or floor we discovered from ray marching\n    vec3 normal = calcNormal(p);\n    vec3 lightPosition = vec3(3, 8, 10);\n    vec3 lightDirection = normalize(lightPosition - p);\n\n    // Calculate diffuse reflection by taking the dot product of \n    // the normal and the light direction.\n    float dif = clamp(dot(normal, lightDirection), 0.001, 1.);\n\n    // Multiply the diffuse reflection value by an orange color and add a bit\n    // of the background color to the sphere to blend it more with the background.\n    col = dif * co.rgb + backgroundColor * .4;\n  }\n\n  // Output to screen\n  fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}