{"ver":"0.1","info":{"id":"4t2XDy","date":"1446214834","viewed":420,"name":"HoneyCombWave","username":"jt","description":"A hexagonal distance grid distorted by a sine-wave.","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["grid","wave","distortion","hexagonal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// HoneyCombWave - written 2015 by Jakob Thomsen\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nfloat checker(vec2 pos)\n{\n    //if(fract(pos.x) < 0.5)\n    //    return 0.0;\n    //else\n    //    return 1.0;\n    //return step(0.5, fract(pos.x));\n    float a = (step(0.5, fract(pos.x)) - 0.5);\n    float b = (step(0.5, fract(pos.y)) - 0.5);\n    return step(0.0, a * b);\n}\n\nfloat tile1(vec2 pos)\n{\n    pos = fract(pos);\n    float val = length(pos - 0.5);\n    val = min(val, length(pos - vec2(0.0, 0.0)));\n    val = min(val, length(pos - vec2(1.0, 0.0)));\n    val = min(val, length(pos - vec2(0.0, 1.0)));\n    val = min(val, length(pos - vec2(1.0, 1.0)));\n    return val;\n}\n\nfloat tile(vec2 pos)\n{\n    pos = fract(pos);\n    float s = 1.5;\n    pos.x *= s;\n    float val = length(pos - vec2(0.5 * s, 0.5));\n    val = min(val, length(pos - vec2(0.0, 0.0)));\n    val = min(val, length(pos - vec2(  s, 0.0)));\n    val = min(val, length(pos - vec2(0.0, 1.0)));\n    val = min(val, length(pos - vec2(  s, 1.0)));\n    return val;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float t = iTime;\n    float distortion = 0.5 * sin(5.0 * (length(uv - 0.5) + t * 0.1) * 3.1415926 * 2.0);\n    //uv.x += distortion;\n    uv = (uv - 0.5) * (1.0 + 0.1 * distortion) + 0.5;\n    float val = 2.0 * tile(uv * 5.0);\n\tfragColor = vec4(vec3(val), 1.0);\n    //fragColor = vec4(vec3(val), 1.0) * texture(iChannel0, uv);\n}\n","name":"Image","description":"","type":"image"}]}