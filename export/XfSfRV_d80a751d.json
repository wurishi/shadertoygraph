{"ver":"0.1","info":{"id":"XfSfRV","date":"1725168452","viewed":11,"name":"HCT Polar Coordinates","username":"eleanormally","description":"An implementation of HCT color space as a circle in polar coordinates. \nHCT Color Space: https://github.com/material-foundation/material-color-utilities/tree/main?tab=readme-ov-file","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["color","colorspace","hct"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Copyright (c) <year> <copyright holders>\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation \n// files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy,\n// modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the\n// Software is furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO\n// THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. \n// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, \n// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n// OTHER DEALINGS IN THE SOFTWARE.\n\n#define PI 3.1415926538\n#define TAU 6.2831853071\n\nstruct ViewingConditions {\n    float n;\n    float aw;\n    float nbb;\n    float ncb;\n    float c;\n    float nc;\n    vec3 rgbD;\n    float fl;\n    float fLRoot;\n    float z;\n};\n\nconst ViewingConditions VIEWINGDEFAULT = ViewingConditions(\n        0.18418651851244416,\n        29.980997194447333,\n        1.0169191804458755,\n        1.0169191804458755,\n        0.69,\n        1.0,\n        vec3(1.02117770275752, 0.9863077294280124, 0.9339605082802299),\n        0.3884814537800353,\n        0.7894826179304937,\n        1.909169568483652\n    );\n\nconst mat3 LINRGB_FROM_SCALED_DISCOUNT = mat3(\n      1373.2198709594231,\n      -1100.4251190754821,\n      -7.278681089101213,\n      -271.815969077903,\n      559.6580465940733,\n      -32.46047482791194,\n      1.9622899599665666,\n      -57.173814538844006,\n      308.7233197812385\n);\nconst mat3 SCALED_DISCOUNT_FROM_LINRGB = mat3(\n      0.001200833568784504,\n      0.002389694492170889,\n      0.0002795742885861124,\n      0.0005891086651375999,\n      0.0029785502573438758,\n      0.0003270666104008398,\n      0.00010146692491640572,\n      0.0005364214359186694,\n      0.0032979401770712076\n);\n\n  const float[255] CRITICAL_PLANES = float[255](\n    0.015176349177441876, 0.045529047532325624, 0.07588174588720938,\n    0.10623444424209313,  0.13658714259697685,  0.16693984095186062,\n    0.19729253930674434,  0.2276452376616281,   0.2579979360165119,\n    0.28835063437139563,  0.3188300904430532,   0.350925934958123,\n    0.3848314933096426,   0.42057480301049466,  0.458183274052838,\n    0.4976837250274023,   0.5391024159806381,   0.5824650784040898,\n    0.6277969426914107,   0.6751227633498623,   0.7244668422128921,\n    0.775853049866786,    0.829304845476233,    0.8848452951698498,\n    0.942497089126609,    1.0022825574869039,   1.0642236851973577,\n    1.1283421258858297,   1.1946592148522128,   1.2631959812511864,\n    1.3339731595349034,   1.407011200216447,    1.4823302800086415,\n    1.5599503113873272,   1.6398909516233677,   1.7221716113234105,\n    1.8068114625156377,   1.8938294463134073,   1.9832442801866852,\n    2.075074464868551,    2.1693382909216234,   2.2660538449872063,\n    2.36523901573795,     2.4669114995532007,   2.5710888059345764,\n    2.6777882626779785,   2.7870270208169257,   2.898822059350997,\n    3.0131901897720907,   3.1301480604002863,   3.2497121605402226,\n    3.3718988244681087,   3.4967242352587946,   3.624204428461639,\n    3.754355295633311,    3.887192587735158,    4.022731918402185,\n    4.160988767090289,    4.301978482107941,    4.445716283538092,\n    4.592217266055746,    4.741496401646282,    4.893568542229298,\n    5.048448422192488,    5.20615066083972,     5.3666897647573375,\n    5.5300801301023865,   5.696336044816294,    5.865471690767354,\n    6.037501145825082,    6.212438385869475,    6.390297286737924,\n    6.571091626112461,    6.7548350853498045,   6.941541251256611,\n    7.131223617812143,    7.323895587840543,    7.5195704746346665,\n    7.7182615035334345,   7.919981813454504,    8.124744458384042,\n    8.332562408825165,    8.543448553206703,    8.757415699253682,\n    8.974476575321063,    9.194643831691977,    9.417930041841839,\n    9.644347703669503,    9.873909240696694,    10.106627003236781,\n    10.342513269534024,   10.58158024687427,    10.8238400726681,\n    11.069304815507364,   11.317986476196008,   11.569896988756009,\n    11.825048221409341,   12.083451977536606,   12.345119996613247,\n    12.610063955123938,   12.878295467455942,   13.149826086772048,\n    13.42466730586372,    13.702830557985108,   13.984327217668513,\n    14.269168601521828,   14.55736596900856,    14.848930523210871,\n    15.143873411576273,   15.44220572664832,    15.743938506781891,\n    16.04908273684337,    16.35764934889634,    16.66964922287304,\n    16.985093187232053,   17.30399201960269,    17.62635644741625,\n    17.95219714852476,    18.281524751807332,   18.614349837764564,\n    18.95068293910138,    19.290534541298456,   19.633915083172692,\n    19.98083495742689,    20.331304511189067,   20.685334046541502,\n    21.042933821039977,   21.404114048223256,   21.76888489811322,\n    22.137256497705877,   22.50923893145328,    22.884842241736916,\n    23.264076429332462,   23.6469514538663,     24.033477234264016,\n    24.42366364919083,    24.817520537484558,   25.21505769858089,\n    25.61628489293138,    26.021211842414342,   26.429848230738664,\n    26.842203703840827,   27.258287870275353,   27.678110301598522,\n    28.10168053274597,    28.529008062403893,   28.96010235337422,\n    29.39497283293396,    29.83362889318845,    30.276079891419332,\n    30.722335150426627,   31.172403958865512,   31.62629557157785,\n    32.08401920991837,    32.54558406207592,    33.010999283389665,\n    33.4802739966603,     33.953417292456834,   34.430438229418264,\n    34.911345834551085,   35.39614910352207,    35.88485700094671,\n    36.37747846067349,    36.87402238606382,    37.37449765026789,\n    37.87891309649659,    38.38727753828926,    38.89959975977785,\n    39.41588851594697,    39.93615253289054,    40.460400508064545,\n    40.98864111053629,    41.520882981230194,   42.05713473317016,\n    42.597404951718396,   43.141702194811224,   43.6900349931913,\n    44.24241185063697,    44.798841244188324,   45.35933162437017,\n    45.92389141541209,    46.49252901546552,    47.065252796817916,\n    47.64207110610409,    48.22299226451468,    48.808024568002054,\n    49.3971762874833,     49.9904556690408,     50.587870934119984,\n    51.189430279724725,   51.79514187861014,    52.40501387947288,\n    53.0190544071392,     53.637271562750364,   54.259673423945976,\n    54.88626804504493,    55.517063457223934,   56.15206766869424,\n    56.79128866487574,    57.43473440856916,    58.08241284012621,\n    58.734331877617365,   59.39049941699807,    60.05092333227251,\n    60.715611475655585,   61.38457167773311,    62.057811747619894,\n    62.7353394731159,     63.417162620860914,   64.10328893648692,\n    64.79372614476921,    65.48848194977529,    66.18756403501224,\n    66.89098006357258,    67.59873767827808,    68.31084450182222,\n    69.02730813691093,    69.74813616640164,    70.47333615344107,\n    71.20291564160104,    71.93688215501312,    72.67524319850172,\n    73.41800625771542,    74.16517879925733,    74.9167682708136,\n    75.67278210128072,    76.43322770089146,    77.1981124613393,\n    77.96744375590167,    78.74122893956174,    79.51947534912904,\n    80.30219030335869,    81.08938110306934,    81.88105503125999,\n    82.67721935322541,    83.4778813166706,     84.28304815182372,\n    85.09272707154808,    85.90692527145302,    86.72564993000343,\n    87.54890820862819,    88.3767072518277,     89.2090541872801,\n    90.04595612594655,    90.88742016217518,    91.73345337380438,\n    92.58406282226491,    93.43925555268066,    94.29903859396902,\n    95.16341895893969,    96.03240364439274,    96.9059996312159,\n    97.78421388448044,    98.6670533535366,     99.55452497210776\n);\n\nconst vec3 ZeroVec3 = vec3(0.0,0.0,0.0);\nconst vec4 ZeroVec4 = vec4(0.0,0.0,0.0,0.0);\nconst vec3 kRGB = vec3(0.2126, 0.7152, 0.0722);\n\nbool isBounded(float x) {\n  return 0.0 <= x && x <= 100.0;\n}\n\nfloat inverseChromaticAdaptation(float adapted) {\n  float abs = abs(adapted);\n  float base = max(0.0, 27.13 * abs / (400.0 - abs));\n  float adaption = pow(base, 1.0 / 0.42);\n  if (adapted < 0.0) {\n    adaption = 0.0 - adaption;\n  }\n  return adaption;\n}\n\nfloat chromaticAdaptation(float component) {\n  float af = pow(abs(component), 0.42);\n  float adapted = 400.0 * af / (af + 27.13);\n  if (component < 0.0) {\n    adapted = 0.0 - adapted; \n  }\n  return adapted;\n}\n\nfloat hueToRadian ( float hue ) {\nfloat deg = mod(hue, 360.0);\nif ( deg < 0.0 ) {\ndeg = 360.0 + deg;\n}\nreturn deg / 180.0 * PI;\n}\n\nfloat labInvf(float ft) {\n    const float e = 216.0 / 24389.0;\n    const float kappa = 24389.0 / 27.0;\n    float ft3 = ft * ft * ft;\n    if (ft3 > e) {\n        return ft3;\n    } else {\n        return (116.0 * ft - 16.0) / kappa;\n    }\n}\n\nfloat yFromTone(float tone) {\n    return 100.0 * labInvf((tone + 16.0) / 116.0);\n}\n\nfloat delinearize(float y) {\n    float normalized = y / 100.0;\n    float delinearized = 0.0;\n    if (normalized <= 0.0031308) {\n        delinearized = normalized * 12.92;\n    } else {\n        delinearized = 1.055 * pow(normalized, 1.0 / 2.4) - 0.055;\n    }\n    return clamp(delinearized, 0.0, 1.0);\n}\n\nvec4 colorFromTone(float tone) {\n    float y = yFromTone(tone);\n    float delin = delinearize(y);\n\n    return vec4(delin, delin, delin, 1.0);\n}\n\nvec4 findResultByJ(float hueRadians, float chroma, float y) {\n    float j = sqrt(y) * 11.0;\n\n    const float tInnerCoeff = 1.0 / pow(1.64 - pow(0.29, VIEWINGDEFAULT.n), 0.73);\n    float eHue = 0.25 * (cos(hueRadians+2.0)+3.8);\n    float p1 = eHue * (50000.0 / 13.0) * VIEWINGDEFAULT.nc * VIEWINGDEFAULT.ncb;\n    float hSin = sin(hueRadians);\n    float hCos = cos(hueRadians);\n    for (int iterationRound = 0; iterationRound < 5; iterationRound++) {\n      float jNormalized = j / 100.0;\n      float alpha = 0.0;\n      if (chroma != 0.0 && j != 0.0) {\n        alpha  = chroma / sqrt(jNormalized);\n      }\n      float t = pow(alpha * tInnerCoeff, 1.0/0.9);\n      float ac = VIEWINGDEFAULT.aw * pow(jNormalized, 1.0 / VIEWINGDEFAULT.c / VIEWINGDEFAULT.z);\n      float p2 = ac / VIEWINGDEFAULT.nbb;\n      float gamma = 23.0 * (p2 + 0.305) * t / ((23.0 * p1) + (11.0 * t * hCos) + (108.0 * t * hSin));\n      float a = gamma * hCos;\n      float b = gamma * hSin;\n      float rA = ((460.0 * p2) + (451.0 * a) + (288.0 * b)) / 1403.0;\n      float gA = ((460.0 * p2) - (891.0 * a) - (261.0 * b)) / 1403.0;\n      float bA = ((460.0 * p2) - (220.0 * a) - (6300.0 * b)) / 1403.0;\n      vec3 cScaled = vec3(\n        inverseChromaticAdaptation(rA),\n        inverseChromaticAdaptation(gA),\n        inverseChromaticAdaptation(bA)\n      );\n      vec3 linrgb = vec3(\n        dot(cScaled, LINRGB_FROM_SCALED_DISCOUNT[0]),\n        dot(cScaled, LINRGB_FROM_SCALED_DISCOUNT[1]),\n        dot(cScaled, LINRGB_FROM_SCALED_DISCOUNT[2])\n      );\n      if (lessThan(linrgb, ZeroVec3) != bvec3(false,false,false)) {\n        return ZeroVec4;\n      }\n      float fnj = dot(kRGB, linrgb);\n      if (fnj <= 0.0) {\n        return ZeroVec4;\n      }\n      if (iterationRound == 4 || abs(fnj-y) < 0.002) {\n        if (linrgb.x > 100.01 || linrgb.y > 100.01 || linrgb.z > 100.01) {\n          return ZeroVec4;\n        }\n        return vec4(delinearize(linrgb.x), delinearize(linrgb.y), delinearize(linrgb.z), 1.0);\n      }\n      j = j - ((fnj - y) * j / (2.0 * fnj));\n    }\n    return ZeroVec4;\n\n}\n\nvec3 nthVertex(float y, float n) {\n  float coordA = mod(n,4.0) <= 1.0 ? 0.0 : 100.0;\n  float coordB = mod(n, 2.0) == 0.0 ? 0.0 : 100.0;\n  if (n < 4.0) {\n    vec3 rgb = vec3((y- (coordA * kRGB.g) - (coordB * kRGB.b)) / kRGB.r, coordA, coordB);\n    return isBounded(rgb.r) ? rgb : vec3(-1.0, -1.0, -1.0);\n  }\n  if (n < 8.0) {\n    vec3 rgb = vec3(coordB, (y- (coordB * kRGB.r) - (coordA * kRGB.b)) / kRGB.g, coordA);\n    return isBounded(rgb.g) ? rgb : vec3(-1.0, -1.0, -1.0);\n  }\n  vec3 rgb = vec3(coordA, coordB, (y- (coordA * kRGB.r) - (coordB * kRGB.g)) / kRGB.b);\n  return isBounded(rgb.b) ? rgb : vec3(-1.0, -1.0, -1.0);\n}\n\nfloat hueOf(vec3 linrgb) {\n  vec3 scaledDiscount = vec3(\n    dot(linrgb, SCALED_DISCOUNT_FROM_LINRGB[0]),\n    dot(linrgb, SCALED_DISCOUNT_FROM_LINRGB[1]),\n    dot(linrgb, SCALED_DISCOUNT_FROM_LINRGB[2])\n  );\n  vec3 A = vec3(\n    chromaticAdaptation(scaledDiscount.x),\n    chromaticAdaptation(scaledDiscount.y),\n    chromaticAdaptation(scaledDiscount.z)\n  );\n  float a = ((11.0 * A.r) + (-12.0 * A.g) + A.b) / 11.0;\n  float b = (A.r + A.g - (2.0 * A.b)) / 9.0;\n  return atan(b, a);\n}\n\nfloat sanitizeRadians(float angle) {\n  return mod(angle + (PI * 8.0), TAU);\n}\nbool areInCyclicOrder(float a, float b, float c) {\n  return sanitizeRadians(b-a) < sanitizeRadians(c-a);\n}\n\n\nvec3[2] bisectToSegment(float y, float targetHue) {\n  vec3 left = vec3(-1.0, -1.0, -1.0);\n  vec3 right = vec3(-1.0, -1.0, -1.0);\n  float leftHue = 0.0;\n  float rightHue = 0.0;\n  bool initialized = false;\n  bool uncut = true;\n  for (int n = 0; n < 12; n++) {\n    vec3 mid = nthVertex(y, float(n));\n    if (mid.x < 0.0) {\n      continue;\n    }\n    float midHue = hueOf(mid);\n    if (initialized == false) {\n      left = mid;\n      right = mid;\n      leftHue = midHue;\n      rightHue = midHue;\n      initialized = true;\n      continue;\n    }\n    if (uncut == true || areInCyclicOrder(leftHue, midHue, rightHue)) {\n      uncut = false;\n      if (areInCyclicOrder(leftHue, targetHue, midHue)) {\n        right = mid;\n        rightHue = midHue;\n      }\n      else {\n        left = mid;\n        leftHue = midHue;\n      }\n    }\n  }\n  return vec3[2](left, right);\n}\n\nint criticalPlaneBelow(float val) {\n  return int(floor(val-0.5));\n}\nint criticalPlaneAbove(float val) {\n  return int(ceil(val-0.5));\n}\n\nfloat trueDelinearized(float component) {\n  float normalized = component / 100.0;\n  float delinearized = 0.0;\n  if (normalized <= 0.0031308) {\n    delinearized = normalized * 12.92;\n  } \n  else {\n  delinearized = 1.055 * pow(normalized, 1.0 / 2.4) - 0.055;\n  }\n  return delinearized * 255.0;\n}\n\nvec3 setCoordinate(vec3 source, float coordinate, vec3 target, int axis) {\n  float t = (coordinate - source[axis]) / (target[axis] - source[axis]);\n  return source + ((target - source)*t);\n}\n\nvec3 bisectToLimit(float y, float targetHue) {\n  vec3[2] segment = bisectToSegment(y, targetHue);\n  vec3 left = segment[0];\n  float leftHue = hueOf(left);\n  vec3 right = segment[1];\n  for (int axis = 0; axis < 3; axis++) {\n    if (left[axis] != right[axis]) {\n      int lPlane = -1;\n      int rPlane = 255;\n      if (left[axis] < right[axis]) {\n        lPlane = criticalPlaneBelow(trueDelinearized(left[axis]));\n        rPlane = criticalPlaneAbove(trueDelinearized(right[axis]));\n      } else {\n        lPlane = criticalPlaneAbove(trueDelinearized(left[axis]));\n        rPlane = criticalPlaneBelow(trueDelinearized(right[axis]));\n      }\n      for (int i = 0; i < 8; i++) {\n        if (abs(rPlane-lPlane) <= 1) {\n          break;\n        }\n        else {\n          int mPlane = (lPlane+rPlane)/2;\n          float midPlaneCoord = CRITICAL_PLANES[int(mPlane)];\n          vec3 mid = setCoordinate(left, midPlaneCoord, right, axis);\n          float midHue = hueOf(mid);\n          if (areInCyclicOrder(leftHue, targetHue, midHue)) {\n            right = mid;\n            rPlane = mPlane;\n          }\n          else {\n            left = mid;\n            leftHue = midHue;\n            lPlane = mPlane;\n          }\n        }\n      }\n    }\n  }\n  vec3 midpoint = (left+right)/vec3(2.0,2.0,2.0);\n  return midpoint;\n}\n\nvec4 hct(float hue, float chroma, float tone) {\n    if (chroma < 0.0001 || tone < 0.0001 || tone > 99.9999) {\n        return colorFromTone(tone);\n    }\n    float hueRadians = hueToRadian(hue);\n    float y = yFromTone(tone);\n    vec4 exact = findResultByJ(hueRadians, chroma, y);\n    if (equal(exact, ZeroVec4) != bvec4(true, true, true, true)) {\n        return exact;\n    }\n    vec3 approx = bisectToLimit(y, hueRadians);\n    return vec4(delinearize(approx.x), delinearize(approx.y), delinearize(approx.z), 1.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord.xy / iResolution.xy * vec2(2.0, 2.0)) - vec2(1.0, 1.0);\n    float rad = sqrt((uv.x*uv.x)+(uv.y*uv.y));\n    if (rad > 1.0) {\n      fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n      return;\n    }\n    float angle = asin(uv.y/rad)/PI*180.0;\n    if (uv.x < 0.0) {\n      angle = 180.0 - angle;\n    }\n    float inp = mod(iTime, 5.0);\n    if (inp > 2.5) {\n        inp = 5.0-inp;\n    }\n    fragColor = hct(angle, rad*100.0, inp*40.0);\n}\n","name":"Image","description":"","type":"image"}]}