{"ver":"0.1","info":{"id":"dll3RM","date":"1671539848","viewed":182,"name":"kernel to calculate adjacent","username":"jonasfrey","description":"instead of calculating random positions foreach pixel, we just calculate the adjacent","likes":1,"published":3,"flags":32,"usePreview":0,"tags":["kernel"],"hasliked":0,"parentid":"Dls3z4","parentname":"random flickering effect"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 o_trpino_nooffset = (fragCoord.xy)/ iResolution.xy;\n    vec2 o_trmono_nooffset = (iMouse.xy)/ iResolution.xy;\n\n    fragColor = texture(iChannel0, o_trpino_nooffset);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define n_size_max_a_o_col_last_krnl const 1000;\nfloat f_n_rand(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nvec2 f_o_index_by_trn_scl(\n    vec2 o_trn, \n    vec2 o_scl\n){\n    float n_index = floor(o_trn.x)+floor(floor(o_trn.y)*floor(o_scl.x));\n    float n_index_nor = n_index / (floor(o_scl.x)*floor(o_scl.y));\n    return vec2(\n        n_index,\n        n_index_nor\n    );\n} \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 o_fragCoord_nor = fragCoord.xy /iResolution.xy;\n    vec4 o_col_last = texture(iChannel0, o_fragCoord_nor);\n\n    vec2 o_trmono_nooffset = iMouse.xy / iResolution.xy;\n    if(iMouse.z == 0.) o_trmono_nooffset = vec2(0.3, 0.);\n    vec2 o_scale_factor = vec2(o_trmono_nooffset.x*o_trmono_nooffset.x);\n    vec2 o_fc = (fragCoord.xy * o_scale_factor);\n    vec2 o_ires = (iResolution.xy * o_scale_factor);\n    \n    float n_fadeout = 5.;\n\n    vec2 o_index = f_o_index_by_trn_scl(\n        o_fc, \n        o_ires\n    );\n    \n    //optimal is 3, 5, ,7 ,9 (2|(n-1)) \n    vec2 o_scale_kernel = vec2(5.);\n    \n    // this is the maximum distance /pixels we can move before seeing\n    // the restriction of the kernel size \n    vec2 o_scl_kernel_half = floor(o_scale_kernel/2.);\n    \n    vec3 o_dist_sum = vec3(0.);\n    vec3 o_dist_mul = vec3(1.);\n    vec3 o_dist_min = vec3(1.);\n    vec3 o_col_min = vec3(1.);\n    for(float n_y = 0.; n_y < o_scale_kernel.y; n_y+=1.){\n        for(float n_x = 0.; n_x < o_scale_kernel.x; n_x+=1.){\n            vec2 o_fc_trn = vec2(\n                n_x-floor(o_scale_kernel.x/2.),\n                n_y-floor(o_scale_kernel.y/2.)\n            );\n            vec2 o_index_current = f_o_index_by_trn_scl(\n                floor(o_fc+o_fc_trn),\n                o_ires\n            );\n            vec2 o_trpino_new = floor(o_fc+o_fc_trn)/floor(o_ires);\n            vec4 o_col = texture(iChannel1, o_trpino_new);\n            \n            vec2 o_diff = (\n                fract(o_fc)- \n                o_fc_trn+sin(iTime+o_index_current.x)*0.5\n                -0.5\n            )*.5;\n            float n_dist = length(o_diff);\n            if(n_dist < o_dist_min.r){\n                o_col_min = vec3(o_index_current.g,1.-o_index_current.g,0.5);\n            }\n            o_dist_min = vec3(min(o_dist_min.r, n_dist));\n\n        }\n    }\n\n    fragColor = vec4(vec3(o_dist_min)*(o_col_min)*2., 1.);\n    fragColor = sqrt(fragColor);\n}","name":"Buffer A","description":"","type":"buffer"}]}