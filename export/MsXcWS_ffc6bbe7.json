{"ver":"0.1","info":{"id":"MsXcWS","date":"1489602432","viewed":216,"name":"UV-Distortion-FX","username":"JavasCrypt20","description":"This shows the function to manipulate the uv-coordinates of the renderwindow by subtrating another animated pattern that is divided by some amount like a dampening control you could put this in chain to to have more interesting.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["fx","coordinates","uvediting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float norsin ( float inA ){\n\treturn 0.5 + 0.5 * sin ( inA );\n}\nfloat GRAD ( float inUv, float repeat, float align ){\n\treturn norsin( ( inUv + align ) * pow( repeat, 2.0 ) );\n}\nfloat movingPoints ( float uvx, float uvy, float velX, float velY, float repeat ){\n\treturn GRAD( uvx, repeat, iTime * velX ) *  GRAD( uvy, repeat, iTime * velY );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float a = 0.25;\n    float b = 0.75;\n    float c = 1.5;\n    float d = 8.0;\n    float uvx = uv.x;\n    float uvy = uv.y;\n    float uvxc = uvx * ( iResolution.x / iResolution.y );\n    \n    float grad1 = GRAD ( -uvy + iTime * 1.0, 1.5, -0.5 ) + 0.3;\n    uvxc = uvx * ( iResolution.x/ iResolution.y );\n    float uv1 = GRAD (uvxc + GRAD ( uvy / 4.0 + iTime / 4.0, 1.0, 0.0) * 5.0 , 2.5, 0.0);\n    float r = movingPoints( uvxc-uv1/18.0, uvy+uv1/18.0, 0.0, -0.1, 6.0 );\n    r = min ( 0.3, r );\n    r *= 3.0;\n\tr = min ( 0.9, r );\n    uv1 *= 1.5;\n    uv1 = pow ( uv1, 0.8 );\n    grad1 *= uv1;\n    r *= grad1*0.6;\n\tfragColor = vec4(pow(r,2.5),pow(r,1.7),pow(r,0.9), 1.0 );\n}","name":"Image","description":"","type":"image"}]}