{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"vec2 cmult(vec2 c1, vec2 c2) {\n    return vec2\n        ( c1.x * c2.x - c1.y * c2.y \n        , c1.x * c2.y + c2.x * c1.y\n        );\n}\n\nvec2 cdiv(vec2 c1, vec2 c2) {\n    float d = c2.x * c2.x + c2.y * c2.y;\n    \n    return vec2\n        ( c1.x * c2.x + c1.y * c2.y \n        , c2.x * c1.y - c1.x * c2.y\n        ) / d;\n}\n\nvec2 m_step(vec2 x) {\n    float t = iTime * 3.0;\n    vec2 p = vec2(cos(t), sin(t));\n    vec2 q = vec2(cos(t * 0.9), sin(t * 0.9));\n    vec2 r = vec2(cos(t * 1.1), sin(t * 1.1));\n    vec2 s = vec2(cos(t * 1.2), sin(t * 1.2));\n    \n    return x - cdiv(\n        cmult(p, cmult(cmult(x, x), x)) +\n        cmult(q, cmult(x, x)) +\n        s,\n        3.0 * cmult(p, cmult(x, x)) +\n        2.0 * cmult(q, x));\n}\n\nvec2 iter(vec2 x) \n{\n    for (int i = 0; i < 50; i++) {\n        x = m_step(x);\n    }\n  \n    return x;   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 x = fragCoord.xy / iResolution.xy * 3.0 - vec2(1.5, 1.5);\n    \n    float d = cos(atan(iter(x).y, iter(x).x)) * 0.3 + 0.5;\n    \n    fragColor = vec4(d, d, d * 2.0, 1.0);  \n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4lBGRm","date":"1427488947","viewed":114,"name":"Gen-Newton","username":"paf31","description":"Generalized Newton Raphson","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""}}