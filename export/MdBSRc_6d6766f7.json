{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"music","id":"XdfGzn","filepath":"/media/a/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"//CBS\n//Parallax scrolling fractal galaxy.\n//Inspired by JoshP's Simplicity shader: https://www.shadertoy.com/view/lslGWr\n\n// http://www.fractalforums.com/new-theories-and-research/very-simple-formula-for-fractal-patterns/\nfloat field(in vec3 p,float s) {\n\tfloat strength = 7. + .03 * log(1.e-6 + fract(sin(iTime) * 4373.11));\n\tfloat accum = s/4.;\n\tfloat prev = 0.;\n\tfloat tw = 0.;\n\tfor (int i = 0; i < 26; ++i) {\n\t\tfloat mag = dot(p, p);\n\t\tp = abs(p) / mag + vec3(-.5, -.4, -1.5);\n\t\tfloat w = exp(-float(i) / 7.);\n\t\taccum += w * exp(-strength * pow(abs(mag - prev), 2.2));\n\t\ttw += w;\n\t\tprev = mag;\n\t}\n\treturn max(0., 5. * accum / tw - .7);\n}\n\n// Less iterations for second layer\nfloat field2(in vec3 p, float s) {\n\tfloat strength = 7. + .03 * log(1.e-6 + fract(sin(iTime) * 4373.11));\n\tfloat accum = s/4.;\n\tfloat prev = 0.;\n\tfloat tw = 0.;\n\tfor (int i = 0; i < 18; ++i) {\n\t\tfloat mag = dot(p, p);\n\t\tp = abs(p) / mag + vec3(-.5, -.4, -1.5);\n\t\tfloat w = exp(-float(i) / 7.);\n\t\taccum += w * exp(-strength * pow(abs(mag - prev), 2.2));\n\t\ttw += w;\n\t\tprev = mag;\n\t}\n\treturn max(0., 5. * accum / tw - .7);\n}\n\nvec3 nrand3( vec2 co )\n{\n\tvec3 a = fract( cos( co.x*8.3e-3 + co.y )*vec3(1.3e5, 4.7e5, 2.9e5) );\n\tvec3 b = fract( sin( co.x*0.3e-3 + co.y )*vec3(8.1e5, 1.0e5, 0.1e5) );\n\tvec3 c = mix(a, b, 0.5);\n\treturn c;\n}\n\nvec4 stars(vec2 fragCoord)\n{\n  vec2 uv = 2. * fragCoord.xy / iResolution.xy - 1.;\n\tvec2 uvs = uv * iResolution.xy / max(iResolution.x, iResolution.y);\n\n\tvec3 p = vec3(uvs / 4., 0) + vec3(1., -1.3, 0.);\n\tp += .2 * vec3(sin(iTime / 16.), sin(iTime / 12.),  sin(iTime / 128.));\n\n    float vol = texture( iChannel0, vec2( 0.01, 0.25 ) ).x;\n    \n\tfloat freqs[4];\n\t//Sound\n\tfreqs[0] = vol * 1.01;\n\tfreqs[1] = vol * 2.07;\n\tfreqs[2] = vol * 0.85;\n\tfreqs[3] = vol * 1.30;\n\n\tfloat t = field(p,freqs[2]);\n\tfloat v = (1. - exp((abs(uv.x) - 1.) * 6.)) * (1. - exp((abs(uv.y) - 1.) * 6.));\n\n  //Second Layer\n\tvec3 p2 = vec3(uvs / (4.+sin(iTime*0.11)*0.2+0.2+sin(iTime*0.15)*0.3+0.4), 1.5) + vec3(2., -1.3, -1.);\n\tp2 += 0.25 * vec3(sin(iTime / 16.), sin(iTime / 12.),  sin(iTime / 128.));\n\tfloat t2 = field2(p2,freqs[3]);\n\tvec4 c2 = mix(.4, 1., v) * vec4(1.3 * t2 * t2 * t2 ,1.8  * t2 * t2 , t2* freqs[0], t2);\n\n\t//Let's add some stars\n\t//Thanks to http://glsl.heroku.com/e#6904.0\n\tvec2 seed = p.xy * 2.0;\n\tseed = floor(seed * iResolution.x);\n\tvec3 rnd = nrand3( seed );\n\tvec4 starcolor = vec4(pow(rnd.y,40.0));\n\n\t//Second Layer\n\tvec2 seed2 = p2.xy * 2.0;\n\tseed2 = floor(seed2 * iResolution.x);\n\tvec3 rnd2 = nrand3( seed2 );\n\tstarcolor += vec4(pow(rnd2.y,40.0));\n\n  vec4 i = mix(freqs[3]-.3, 1., v) * vec4(1.5*freqs[2] * t * t* t , 1.2*freqs[1] * t * t, freqs[3]*t, 1.0)+c2+starcolor;;\n\n  return i;\n}\n\nvec4 fractalQuicksand(vec2 fragCoord)\n{\n  // Created by inigo quilez - iq/2013\n  // License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n  float vol =  texture( iChannel0, vec2( 0.01, 0.25 ) ).x;;\n  vec2 uv = fragCoord.xy/iResolution.xy;\n\n  // shape (16 points)\n\tfloat time = iTime + 47.0;\n\tvec2 z = -1.0 + 2.0*uv;\n\tvec3 col = vec3(1.0);\n\tfor( int j=0; j<16; j++ )\n    {\n      // deform\n      float s = float(j)/16.0;\n      float f = 0.2*(0.5 + 1.0*fract(sin(s*113.1)*43758.5453123));\n      vec2 c = 0.5*vec2( cos(f*time+(17.0*vol)*s),sin(f*time+19.0*s) );\n      z -= c;\n      float zr = length( z );\n\t    float ar = atan( z.y, z.x ) + zr*0.6;\n\t    z  = vec2( cos(ar), sin(ar) )/zr;\n      z += c;\n      z += 0.05*sin(2.0*z.x);\n\n      // color\n      col -= 0.7*exp( -8.0*dot(z,z) )* (0.5+0.5*sin( 4.2*s + vec3(1.6,0.9,0.3) ));\n    }\n  col *= 0.75 + 0.25*clamp(length(z-uv)*0.6,0.0,1.0);\n\n\t// 3d effect\n\tfloat h = dot(col,vec3(0.333));\n\tvec3 nor = normalize( vec3( dFdx(h), dFdy(h), 1.0/iResolution.x ) );\n\tcol -= 0.05*vec3(1.0,0.9,0.5)*dot(nor,vec3(0.8,0.4,0.2));;\n\tcol += 0.25*(1.0-0.8*col)*nor.z*nor.z;\n\n  // 2d postpro\n\tcol *= 1.12;\n  col = pow( clamp(col,0.0,1.0), vec3(0.8) );\n\tcol *= 0.8 + 0.2*pow( 16.0*uv.x*uv.y*(1.0-uv.x)*(1.0-uv.y), 0.1 );\n\tvec4 r = vec4( col, 1.0 );\n\n  return r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n  float t = iTime;\n\n  vec4 s = stars(fragCoord);\n  vec4 q = fractalQuicksand(fragCoord);\n\n\tfragColor = mix(s, q, 0.2 + (0.2*sin(t * 0.5)));\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MdBSRc","date":"1414274349","viewed":276,"name":"fractal mix","username":"yastero","description":"remix","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["remix"],"hasliked":0,"parentid":"","parentname":""}}