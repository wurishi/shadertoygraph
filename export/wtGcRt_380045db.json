{"ver":"0.1","info":{"id":"wtGcRt","date":"1611540082","viewed":49,"name":"fea animacion 2d","username":"jorge2017a1","description":"fea animacion 2d","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["feaanimacion2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define PI 3.14159265359\n#define PI2 PI*2.0\n\nfloat wave;\n\n// por jorge2017a1 ...jorge flores p.!!!\nfloat opU( float d1, float d2 ) { return  min(d1,d2); }\nfloat opS( float d1, float d2 ) { return max(-d1,d2); }\nfloat opI( float d1, float d2 ) { return max(d1,d2); }\n\nvec2 opRep2D( in vec2 p, in vec2 c )\n{    vec2 q = mod(p+0.5*c,c)-0.5*c; return  q; }\n\n\nvec2 opU2( vec2 d1, vec2 d2 ) \n{ if (d1.x<d2.x) return d1;   else return d2; }\n\nvec2 opI2( vec2 d1, vec2 d2 ) \n{ if (d1.x>d2.x) return d1; else return d2;}\n\nvec2 opS2(vec2 d1, vec2 d2) \n{ return vec2(max(-d2.x, d1.x), 2.0); }\n\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b;  return length(max(d,0.0)) + min(max(d.x,d.y),0.0); }\n\nfloat sdCircle( vec2 p, float r )\n{  return length(p) - r; }\n\n\n\nvec2 dibujarMono(vec2 p)\n{\n    \n    \n    float tt=2.0*mod(iTime,9.0);\n    float tt2=mod(iTime,5.0);\n    \n    float a=clamp(radians(tt*10.0), 0.0, radians( 60.0) );\n    float a2=clamp(radians( sin( 20.0-tt2*5.0  )  ), radians(0.0), radians(70.0) );\n    \n    vec2 q= rotate(p-vec2(-0.05,0.1),  a);\n   \n     vec2 pp=p;\n     \n    wave = sin(iTime*15.0-2.8)*.25+.25;\n\twave = wave*wave*(3.0-2.0*wave)-.5;\n     float h = sin(iTime*1.3) * .1 - wave*0.25;\n     mat2 m2= rot2D(h);\n     pp=m2*pp;\n    \n    \n     float scabeza= sdCircle( p-vec2(0.1,0.8), 0.2 );\n     float sOjoA= sdCircle( p-vec2(0.25,0.85), 0.05 );\n     float sOjoB= sdCircle( p-vec2(0.11,0.85), 0.05 );\n     float sboca=  sdBox(   p-vec2(0.2,0.7), vec2(0.05,0.02) );\n     \n     \n     float scuerpo= sdBox( pp-vec2(0.2,0.0), vec2(0.4,0.5) );\n     \n     float sbrazoA=  sdBox( q-vec2(-0.2,0.0), vec2(0.1,0.4) );\n     float sbrazoAm= sdBox( q-vec2(-0.2,-0.6), vec2(0.14,0.15) );\n     float sbrazoB=  sdBox( pp-vec2(0.45,0.0), vec2(0.1,0.4) );\n     float sbrazoBm= sdBox( pp-vec2(0.450,-0.3), vec2(0.14,0.15) );\n     \n     \n     \n     float sPiernaA=  sdBox( pp-vec2(0.0,-0.8), vec2(0.1,0.6) );\n     float sPiernaAzapato=  sdBox( pp-vec2(-0.1,-1.5), vec2(0.3,0.1) );\n     \n     float sPiernaB=  sdBox( pp-vec2(0.4,-0.8), vec2(0.1,0.6) );\n     float sPiernaBzapato=  sdBox( pp-vec2(0.6,-1.5), vec2(0.3,0.1) );\n     \n     \n     scabeza= opS( sOjoA, scabeza );\n     scabeza= opS( sOjoB, scabeza );\n     scabeza= opS( sboca, scabeza );\n     \n     \n      scuerpo= opS( sbrazoA, scuerpo );\n      scuerpo= opS( sbrazoB, scuerpo );\n      sPiernaA= opS(  scuerpo,sPiernaA );\n      sPiernaB= opS( scuerpo,sPiernaB );\n      \n      \n      sbrazoB= opS( scuerpo, sbrazoB );\n      sbrazoA= opS( sbrazoAm, sbrazoA );\n      \n     \n     \n      sPiernaA= opS( sPiernaAzapato, sPiernaA );\n      sPiernaB= opS( sPiernaBzapato, sPiernaB );\n      \n     \n     vec2 res=vec2(9999.9,-1.0);\n     res= opU2( res, vec2(scabeza, 2.0) ) ;\n     res= opU2( res, vec2(sOjoA, 0.0) ) ;\n     res= opU2( res, vec2(sOjoB, 0.0) ) ;\n     res= opU2( res, vec2(sboca, 0.0) ) ;\n     \n     res= opU2( res, vec2(scuerpo, 3.0) ) ;\n     \n     res= opU2( res, vec2(sbrazoB, 4.0) ) ;\n     res= opU2( res, vec2(sbrazoBm, 5.0) ) ;\n     \n     res= opU2( res, vec2(sbrazoA, 4.0) ) ;\n     res= opU2( res, vec2(sbrazoAm, 5.0) ) ;\n     \n     res= opU2( res, vec2(sPiernaA, 7.0) ) ;\n     res= opU2( res, vec2(sPiernaAzapato, 8.0) ) ;\n     \n     res= opU2( res, vec2(sPiernaB, 7.0) ) ;\n     res= opU2( res, vec2(sPiernaBzapato, 8.0) ) ;\n     \n     return res;\n     \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n    p*=abs(2.0*sin(iTime));\n     \n    \n    vec3 colOut=vec3(0.5,0.3,1.0);\n    vec2  dm1= dibujarMono(p);\n    \n    colOut= ProcesoColorVec2( colOut, dm1);\n  \n    \n    vec4 color =vec4(colOut, 1.0);\n\tfragColor = color;\n\n}\n\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"///------------------------------------\nstruct TObj\n{ vec3 color; };\n    \nTObj mObj;\n\nvec3  Arrcolores[] = vec3[] (\nvec3(0,0,0)/255.0,  //0\nvec3(255.,255.,255.)/255.0, //1\nvec3(255,0,0)/255.0,  //2\nvec3(0,255,0)/255.0,   //3\nvec3(0,0,255)/255.0,   //4\nvec3(255,255,0)/255.0,  //5\nvec3(0,255,255)/255.0,  //6 \nvec3(255,0,255)/255.0,   //7\nvec3(192,192,192)/255.0,  //8\nvec3(128,128,128)/255.0,  //9\nvec3(128,0,0)/255.0,   //10\nvec3(128,128,0)/255.0,  //11\nvec3(0,128,0)/255.0,   //12\nvec3(128,0,128)/255.0,  //13\nvec3(0,128,128)/255.0,  //14\nvec3(0,0,128)/255.0,    //15\nvec3(255, 204, 188)/255.0,  //16\nvec3(0.75),  //17\nvec3(0.5, 0.5, 0.8),  //18\nvec3(1, 0.5, 0),      //19\nvec3(1.0, 1.0, 1.0),  //20\nvec3(247./255., 168./255.,  184./255.),  //21\nvec3(0, 1, 1),                           //22 \nvec3(85./255., 205./255., 252./255.),    //23\nvec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 ),  //24 \nvec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ),       //25  \nvec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ),     //26\nvec3(0.1, 0.5, 1.0),                           //27   \nvec3(0.0, 0.6, 0.0),                       //28 \nvec3(0.1,0.1,0.7),                          //29\nvec3(0.99, 0.2, 0.1), //30\nvec3(0.9),  //31\nvec3(0.8),  //32\nvec3(0.7),  //33\nvec3(0.6),  //34\nvec3(150.,75.,0.0)/255.,  //35  //marron o cafe\nvec3(204.,119.,34.0)/255.,  //36 //marron o cafe\nvec3(184.,115.,51.0)/255.  //37 //marron o cafe\n\n    \n);\n\n//----------------------------------------------------\nvec3 getColor(int i)\n{\n    if (i==-2 ) {return mObj.color; }       \n    if (i>-1 ) \n\t\treturn Arrcolores[i];\n}\n\nvec3 getColorf(float ii)\n{\n    int i=int(ii);\n    if (i==-2 ) {return mObj.color; }       \n    if (i>-1 ) \n\t\treturn Arrcolores[i];\n}\n///--------------------------------------------\n// MASKS\nfloat fillMask(float distanceChange, float dist) \n{\n    return smoothstep(distanceChange, -distanceChange, dist);\n}\n\nfloat blurMask(float distanceChange, float dist, float blurAmount) {\n    float blurTotal = blurAmount*.01;\n    return smoothstep(blurTotal+distanceChange, -distanceChange, dist);\n}\n\nfloat innerMask(float distanceChange, float dist, float width) {\n    return smoothstep(distanceChange,-distanceChange,dist+width);\n}\n\nfloat outerMask(float distanceChange, float dist, float width) {\n    return smoothstep(distanceChange,-distanceChange,dist-width);\n}\n\n\nvec3 DibujoConBorde(vec2 uv, float dist, vec3 colIn,  vec3 colOut)\n{   \n    float distanceChange = fwidth(dist) * 0.5;\n    float flm=fillMask(distanceChange, dist);\n    float uWotM8 = 0.009;\n    uWotM8 = outerMask(distanceChange, dist, uWotM8);\n    colOut = mix(colOut, vec3(0,0,0), uWotM8);\n    return mix(colOut,colIn, flm );\n}\n\nvec3 DibujoSinBorde(vec2 uv, float dist, vec3 colIn,  vec3 colOut)\n{   \n    float distanceChange = fwidth(dist) * 0.5;\n    float flm=fillMask(distanceChange, dist);\n    float uWotM8 = 0.009;\n    uWotM8 = outerMask(distanceChange, dist, uWotM8);\n    //colOut = mix(colOut, vec3(0,0,0), uWotM8);\n    colOut = mix(colOut, colIn, uWotM8);\n    return mix(colOut,colIn, flm );\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n\n///-------------------------\nvec2 rotate(vec2 p, float a)\n{\n\treturn vec2(p.x * cos(a) - p.y * sin(a), p.x * sin(a) + p.y * cos(a));\n}\n\nfloat rand11(float p)\n{\n    return fract(sin(p * 591.32) * 43758.5357);\n}\n\n///-------------------------\n\nvec2 rotate2d(vec2 p, float ang)\n{\n    float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\n\nvec2 PuntoRotacion(vec2 p,vec2 R, float ang)\n{\n    float c = cos(ang);\n    float s = sin(ang);\n    \n    float xprima=R.x + (p.x-R.x)*c-(p.y-R.y)*s;\n    float yprima=R.y + (p.y-R.y)*c+(p.x-R.x)*s;\n    \n    return vec2(xprima,yprima);\n}\n\n\n\n\nmat2 rot2D(float a)\n{\n    float c=cos(a);  float s=sin(a);\n    return mat2(c,-s,s,c);\n}\n\n\n\n///------------------\nvec3 ProcesoColor(vec3 colBorde , vec3 colOut, float dist)\n{\n    float thickness = 0.005;  //grosor\n\tfloat blur = 0.004;\t //difuminar\n    \n    float step1 = thickness;\n\tfloat step2 = thickness + blur;\t\n    float step3= smoothstep(step1, step2, dist);\n    vec3 color1 = mix(colBorde, colOut, step3);\t\n    return color1;\n}\n\nvec3 ProcesoColorVec2( vec3 colOut, vec2 dist)\n{\n    float thickness = 0.005;  //grosor\n\tfloat blur = 0.004;\t //difuminar\n    vec3 colBorde=getColorf(dist.y);\n    \n    float step1 = thickness;\n\tfloat step2 = thickness + blur;\t\n    float step3= smoothstep(step1, step2, ( dist.x) );\n    vec3 color1 = mix(colBorde, colOut, step3);\t\n    return color1;\n}\n\n","name":"Common","description":"","type":"common"}]}