{"ver":"0.1","info":{"id":"ftsBD8","date":"1650809964","viewed":108,"name":"Sobel Filter Test2","username":"beherca","description":"Sobel Filter","likes":0,"published":1,"flags":34,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"slSyDy","parentname":"Sobel Filter Test"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define S(a,b,t) smoothstep(a,b,t)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    //uv.x *= iResolution.x/iResolution.y;\n    vec3 col = vec3(texture(iChannel0, uv));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float activate(float colorSum, int range, float preColor){\n    \n    float result = -colorSum ;\n    \n    return result;\n}\n\nvec3 kernel(ivec2 fragCoord){\n    vec3 colorSum = vec3(0.);\n    vec3 preColor = texelFetch(iChannel1, fragCoord, 0).rgb;\n    int range = 1;\n    mat3 m3 = mat3(\n     -1., -1.,-1.,\n     0., 1.,-1.,\n     1., 1.,1.\n    );\n    \n    vec3 c = vec3(0.,1.,0);\n\n\n    for(int i = -range; i < range+1 ; i++ ){\n        for(int j = -range; j < range+1 ; j++ ){\n            colorSum += texelFetch(iChannel1, fragCoord + ivec2(i,j), 0).rgb * m3[j+1][i+1];\n        }\n    }\n    c = vec3(\n        activate(colorSum.r, range, preColor.r)\n    //activate(colorSum.g, range, preColor.g),\n    //activate(colorSum.b, range, preColor.b)\n    );\n\n    return c;\n}\n\n\nvec2 N22(vec2 uv){\n    vec3 a = fract(uv.xyx * vec3(213.34,234.34,345.65));\n    a += dot(a, a+324.45);\n    return fract(vec2(a.x*a.y, a.y*a.z));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n  \n    vec3 col = vec3(0.);\n    if(iFrame < 10){\n        col = vec3(N22(uv).x);\n        col = vec3(texture(iChannel1, uv));\n    }else{\n        col = kernel(ivec2(fragCoord+200.*cos(iTime*.5) +100.));\n    }\n    \n    fragColor = vec4(col,1);\n}","name":"Buffer A","description":"","type":"buffer"}]}