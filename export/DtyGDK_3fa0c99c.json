{"ver":"0.1","info":{"id":"DtyGDK","date":"1684627148","viewed":67,"name":"3D figures","username":"felisette","description":"-","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["homework3"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 Color(vec2 uv) {\n  uv+=0.5;\n  vec3 c1=vec3(0.3, 0.3, 0.3);\n  vec3 c2=vec3(0.8, 0.8, 0.8);\n  return mix(c1, c2, uv.x);\n}\n\nvec3 Color1(vec2 uv){\n  uv+=0.5;\n  vec3 c1=vec3(0.4, 0.2, 0.4);\n  vec3 c2=vec3(0.9, 0.7, 0.9);\n  return mix(c1, c2, uv.x);\n}\n\nvec3 Color2(vec2 uv){\n  uv+=0.5;\n  vec3 c1=vec3(0.5, 0.1, 0.3);\n  vec3 c2=vec3(0.9, 0.1, 0.7);\n  return mix(c1, c2, uv.x);\n}\n\nvec3 Color3(vec2 uv){\n  uv+=0.4;\n  vec3 c1=vec3(0.3, 0.1, 0.2);\n  vec3 c2=vec3(0.7, 0.3, 0.9);\n  return mix(c1, c2, uv.x);\n}\n\nvec3 Color4(vec2 uv){\n  uv+=0.5;\n  vec3 c1=vec3(0.4, 0., 0.4);\n  vec3 c2=vec3(1., 0., 0.8);\n  return mix(c1, c2, uv.x);\n}\n\nfloat circle(vec2 uv, float r, vec2 offset) {\n  float x=uv.x-offset.x;\n  float y=uv.y-offset.y;\n  return length(vec2(x, y))-r;\n}\n\nfloat circle_2(vec2 uv, float r, vec2 offset) {\n  float x=uv.x-offset.x;\n  float y=uv.y-offset.y;\n  return length(vec2(x*1.4, y))-r;\n}\n\nfloat z_circle(vec2 uv, float r, vec2 offset){\n  float x=uv.x-offset.x;\n  float y=uv.y-offset.y;\n  float z=sqrt(r*r-x*x-y*y);\n  return z;\n}\n\nfloat z_circle2(vec2 uv, float r, vec2 offset){\n  float x=uv.x-offset.x;\n  float y=uv.y-offset.y;\n  float z=sqrt(r*r-1.4*1.4*x*x-y*y);\n  return z;\n}\n\nfloat square(vec2 uv, float size, vec2 offset) {\n  float x=uv.x*0.2+uv.y*1.4+offset.x;\n  float y=uv.y*0.2+uv.x+offset.y;\n  return max(abs(x), abs(y))-size;\n}\n\nfloat square_1(vec2 uv, float size, vec2 offset) {\n  float x=uv.x+offset.x;\n  float y=uv.y+offset.y;\n  return max(abs(x), abs(y))-size;\n}\n\nfloat z_square(vec2 uv, float r, vec2 offset, float m){\n  float x=uv.x+offset.x;\n  float y=uv.y+offset.y;\n  float z=y*m+x;\n  return z;\n}\n\nvec3 drawScene(vec2 uv) {\n  vec3 col=Color(uv);\n  float circle=circle(uv, 0.2, vec2(0.7*cos(iTime+3.0), 0.2));\n  float square1=square_1(uv, 0.12, vec2(-0.7, 0.18*cos(iTime+2.0)));\n  float square2=square(uv, 0.124-0.02*cos(iTime+1.0), vec2(-0.18*cos(iTime+1.0), 0.3*sin(iTime+1.0)));\n  float square3=square(uv, 0.08, vec2(0.18, 0.3*cos(iTime+1.0)));\n  float circle2=circle_2(uv, 0.15, vec2(-0.5, 0.2*sin(iTime+3.0)));\n  \n  float res=max(circle, square1);\n  float res1=max(circle, square2);\n  float res2=max(square1, square2);\n  float res4=max(square2, square3);\n  float res5=max(circle, square3);\n  float res6=max(circle, circle2);\n  float res7=max(circle2, square2);\n  \n  res=step(0., res);\n  res1=step(0., res1);\n  res2=step(0., res2);\n  res4=step(0., res4);\n  res5=step(0., res5);\n  res6=step(0., res6);\n  res7=step(0., res7);\n  \n  vec3 col1=Color1(uv);\n  vec3 col2=Color2(uv);\n  vec3 col3=Color3(uv);\n  vec3 col4=Color4(uv);\n  col=mix(col2, col, step(0., circle));\n  col=mix(col4, col, step(0., circle2));\n  col=mix(col3, col, step(0., square1));\n  col=mix(col1, col, step(0., square2));\n  col=mix(col3, col, step(0., square3));\n  \n  float z=z_circle(uv, 0.2, vec2(0.7*cos(iTime+3.0), 0.2));\n  float z1=z_square(uv, 0.12, vec2(0.3*cos(iTime+1.0), -0.18), 4.0);\n  float z2=z_square(uv, 0.14, vec2(-0.18, 0.3*sin(iTime+1.0)), 0.1);\n  float z3=0.06;\n  float z4=z_circle2(uv, 0.15, vec2(-0.5, 0.2*sin(iTime+3.0)));\n  \n  if (z>=z1) col=mix(col2, col, res);\n  else if (z>=z2) col=mix(col2, col, res1);\n  if (z2>=z1) col=mix(col1, col, res2);\n  else\n  col=mix(col3, col, res2);\n  \n  if (z2>=z3) col=mix(col1, col, res2);\n  else\n  col=mix(col3, col, res2);\n  \n  if (z>=z3) col=mix(col2, col, res5);\n  else\n  col=mix(col3, col, res5);\n  \n  if (z2>=z3) col=mix(col1, col, res4);\n  else\n  col=mix(col3, col, res4);\n  \n  if (z4>=z) col=mix(col4, col, res6);\n  else\n  col=mix(col2, col, res6);\n  \n  if (z4>=z2) col=mix(col4, col, res7);\n  else\n  col=mix(col1, col, res7);\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n  vec2 uv=fragCoord/iResolution.xy;\n  uv-=0.5;\n  uv.x*=iResolution.x/iResolution.y;\n  vec3 col=drawScene(uv);\n  fragColor=vec4(col,0.0);\n}","name":"Image","description":"","type":"image"}]}