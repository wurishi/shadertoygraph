{"ver":"0.1","info":{"id":"7tSBWm","date":"1652713930","viewed":145,"name":"Menger Sponge Cake","username":"RedWool","description":"Crack the egg into the bowl\ngive us a cake we never seen before\n\nIt is red velvet flavor","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["fractual"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nFractual training! I want to learn other popular ones (mandlebrot,\nsierpinski triangle, etc), but menger was the simplest imo. This illusion\nwas just a small nice touch to practice the infinite growing effect as well.\n*/\n\n\n//Shape functions\nfloat box(vec2 uv, vec2 c, float s)\n{\n    vec2 d = abs(c-uv);\n    return step(d.x,s)*step(d.y,s);\n}\n\nfloat mBox(vec2 uv, vec2 c, float s)\n{\n    return box(uv,c,s)*(1.-box(uv,c,s*(1./3.)));\n}\n\nmat2 rotate(float a)\n{\n    return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\nfloat menger(vec2 uv, out vec2 c)\n{\n    //Change the limit in the for loop to a low num if you want to break the illusion\n    float v = 1., s = 1.5, r = 3., a=1./3.;\n    for (int i = 0; i < 6; i++)\n    {\n        c = floor(uv*a)/a+s;\n        v *= mBox(uv,c,s);\n        s *= 1./r;\n        a *= r;\n    }\n    return v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized by y direction\n    vec2 uv = (fragCoord-iResolution.xy*0.3)/iResolution.y;\n    uv*=10.;\n    \n    //Sequencing helpers\n    float t = mod(iTime*2.5,5.), b = -sin(t*3.2)*max(1.-(t*.3),0.);\n    vec2 a = uv * rotate(b*.05);\n    \n    a += vec2(0,b);\n    \n    vec2 tv = a/(t*.4+1.) + vec2(2.*t/5.,0), c;\n    \n    //Pan and growing menger\n    float pct = menger(tv,c)*box(tv,vec2(2.5,.5),.5);\n    float pan = max(box(a/vec2(21,1),vec2(0,-.2),.2),box(a/vec2(20,2),vec2(.1,-.2),.1));\n    \n    //Pos for flying away menger\n    vec2 r = a;\n    r.y -= t*t*.5;\n    r.x += t*t*t*.2;\n    \n    r *= rotate(.01*t*t*(-20.+t));\n    \n    float rotate = menger(r,c)*box(r,vec2(1.5),1.5)*(1.-box(r,vec2(2.5,.5),.5));\n    \n\n    //Color\n    vec3 col = (pct + rotate)*vec3(1,uv.y*.1,.2)+(1.-pct-rotate)*vec3(1,.8,.65)*(1.+uv.y*0.04)\n    -pan*vec3(0.8+a.y*0.3);\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}