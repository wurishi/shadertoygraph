{"ver":"0.1","info":{"id":"mlS3Rd","date":"1673726513","viewed":397,"name":"GM Shaders: Lights","username":"Xor","description":"A little demo for light attenuation in shaders.\n\nRead the full tutorial [url=  https://xordev.substack.com/p/gm-shaders-mini-lights]here[/url]\n  ","likes":33,"published":1,"flags":0,"usePreview":0,"tags":["attenuation","light","blend","tut","gm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    \"GM Shaders: Lights\" by @XorDev\n\n    A little demo for light attenuation in shaders.\n    \n    Read the full tutorial here:    \n    https://xordev.substack.com/p/gm-shaders-mini-lights \n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Resolution for scaling\n    vec2 r = iResolution.xy;\n    //Relative position to ring light\n    vec2 p1 = (fragCoord-vec2(.3,.5)*r)/r.y;\n    //Relative position to square light\n    vec2 p2 = (fragCoord-vec2(.7,.5)*r)/r.y;\n    \n    //Compute SDF distance to ring\n    float dist1 = abs(length(p1)-.3);\n    //Compute SDF distance to square\n    float dist2 = length(p2 - clamp(p2,-.2,.2));\n    \n    //Light intensity vector (blue)\n    vec4 i1 = vec4(.1,.2,.4,1);\n    //Light intensity vector (green)\n    vec4 i2 = vec4(.2,.4,.1,1);\n    \n    //Combine lights using normalized inverse attenuation\n    fragColor = i1 / (i1 + dist1*4.) + i2 / (i2 + dist2*6.);\n}","name":"Image","description":"","type":"image"}]}