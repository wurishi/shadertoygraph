{"ver":"0.1","info":{"id":"Nscczr","date":"1653015490","viewed":141,"name":"Cracked asphalt texture","username":"clauswilke","description":"When your road needs urgent repairs.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","noise","fbm"],"hasliked":0,"parentid":"ftBBDc","parentname":"Comparison of 2d noise functions"},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Cracked asphalt shader\n// Written by Claus O. Wilke, 2022\n// Noise functions were adapted from code written by Inigo Quilez\n// The MIT License\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfloat hash(in vec2 p) {\n    ivec2 texp = ivec2(\n        int(mod(p.x, 256.)),\n        int(mod(p.y, 256.))\n    );\n    // return number between -1 and 1\n    return -1.0 + 2.0*texelFetch(iChannel0, texp, 0).x;\n}\n\nvec2 hash2(in vec2 p)\n{\n    // return numbers between -1 and 1\n    return vec2(hash(p), hash(p + vec2(32., 18.)));\n}\n\n\n// value noise\n// Inigo Quilez (MIT License)\n// https://www.shadertoy.com/view/lsf3WH\nfloat noise1(in vec2 p)\n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n\t\n\tvec2 u = f*f*(3.0 - 2.0*f);\n\n    return mix(mix(hash(i + vec2(0.0, 0.0)), \n                   hash(i + vec2(1.0, 0.0)), u.x),\n               mix(hash(i + vec2(0.0, 1.0)), \n                   hash(i + vec2(1.0, 1.0)), u.x), u.y);\n}\n\n// gradient noise\n// Inigo Quilez (MIT License)\n// https://www.shadertoy.com/view/XdXGW8\n\nfloat noise2(in vec2 p)\n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n\n    #if 1\n    // quintic smoothstep\n    vec2 u = f*f*f*(f*(f*6.0-15.0)+10.0);\n    #else\n    // cubic smoothstep\n    vec2 u = f*f*(3.0-2.0*f);\n    #endif    \n\n    return mix(mix(dot(hash2(i + vec2(0.0, 0.0)), f - vec2(0.0, 0.0)), \n                   dot(hash2(i + vec2(1.0, 0.0)), f - vec2(1.0, 0.0)), u.x),\n               mix(dot(hash2(i + vec2(0.0, 1.0)), f - vec2(0.0, 1.0)), \n                   dot(hash2(i + vec2(1.0, 1.0)), f - vec2(1.0, 1.0)), u.x), u.y);\n}\n\n\n// simplex noise\n// Inigo Quilez (MIT License)\n// https://www.shadertoy.com/view/Msf3WH\nfloat noise3(in vec2 p)\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor(p + (p.x+p.y)*K1);\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max(0.5-vec3(dot(a, a), dot(b, b), dot(c, c)), 0.0);\n\tvec3  n = h*h*h*h*vec3(dot(a, hash2(i+0.0)), dot(b, hash2(i+o)), dot(c, hash2(i+1.0)));\n    return dot(n, vec3(70.0));\n}\n\n// voronoi\n// Inigo Quilez (MIT License)\n// Modified from: https://www.shadertoy.com/view/ldB3zc\nvec4 voronoi(in vec2 x)\n{\n    vec2 n = floor(x);\n    vec2 f = fract(x);\n\n    vec4 result = vec4(0, 0, 0, 8.);\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = vec2(float(i), float(j));\n        vec2 o = .5 + .5*hash2(n + g); // o is between 0 and 1\n\t\t\n        // distance to cell\t\t\n\t\tfloat d = length(g - f + o);\n        // color\n        vec2 h = hash2(n + g);\n        vec3 col = 0.32 + 0.2*cos(1.*h.x + .6 + vec3(0., .5, .5));\n        col *= h.y < 0.82 ? 0. : 1.;\n        vec4 temp = vec4(col, d);\n        \n        // do the smooth min for distances\t\t\n\t\tresult = temp.w < result.w ? temp : result;\n    }\n\t\n\treturn result;\n}\n\nfloat voronoi2(in vec2 x)\n{\n    vec2 n = floor(x);\n    vec2 f = fract(x);\n\n    float result = 8.;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = vec2(float(i), float(j));\n        vec2 o = .5 + .5*hash2(n + g); // o is between 0 and 1\n\t\t\n        // distance to cell\t\t\n\t\tfloat d = length(g - f + o);\n        \n\t\tresult = min(result, d);\n    }\n\treturn result;\n}\n\nfloat fbm1(in vec2 p, in int octaves)\n{\n    // rotation matrix for fbm\n    mat2 m = 2.*mat2(4./5., 3./5., -3./5., 4./5.);  \n     \n    float scale = 0.5;\n    float f = scale * noise1(p);\n    float norm = scale;\n    for (int i = 0; i < octaves; i++) {\n        p = m * p;\n        scale *= .5;\n        norm += scale;\n        f += scale * noise1(p);\n    }\n\treturn 0.5 + 0.5 * f/norm;\n}\n\nfloat fbm2(in vec2 p, in int octaves)\n{\n    // rotation matrix for fbm\n    mat2 m = 2.*mat2(4./5., 3./5., -3./5., 4./5.);  \n     \n    float scale = 0.5;\n    float f = scale * noise2(p);\n    float norm = scale;\n    for (int i = 0; i < octaves; i++) {\n        p = m * p;\n        scale *= .5;\n        norm += scale;\n        f += scale * noise2(p);\n    }\n\treturn 0.5 + 0.5 * f/norm;\n}\n\nfloat fbm3(in vec2 p, in int octaves)\n{\n    // rotation matrix for fbm\n    mat2 m = 2.*mat2(4./5., 3./5., -3./5., 4./5.);  \n     \n    float scale = 0.5;\n    float f = scale * noise3(p);\n    float norm = scale;\n    for (int i = 0; i < octaves; i++) {\n        p = m * p;\n        scale *= .5;\n        norm += scale;\n        f += scale * noise3(p);\n    }\n\treturn 0.5 + 0.5 * f/norm;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord - iResolution.xy)/iResolution.y;\n    uv += .05 * iTime * vec2(2., 4.);\n\n    vec2 p = 40.*vec2(4., 4.)*uv;\n    vec2 q = .02*p + vec2(10., 4.);\n    \n    vec3 col = vec3(.23);\n        \n    vec4 vor = voronoi(p);\n    col = vor.xyz == vec3(0) ? col : mix(col, vor.xyz, .45);\n    \n    col *= .9 + .7*fbm2(vec2(.01, .03)*p, 4);\n    col *= .8 + .8*pow(fbm3(vec2(.5, .5)*p, 4), 5.);\n\n    vec2 r = vec2(fbm1(q + vec2(5., 2.), 4), fbm1(q + vec2(1., 4.), 4));\n\n    col *= 1. - vec3(pow(1.08*voronoi2((q + r*vec2(.1, .5))*vec2(.04, .8)), 10.));\n    \n    // tone mapping\n    col = s_curve(col);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// -----------------------------------------------\n\n// color correction\n// Taken from Matt Ebb (MIT license): https://www.shadertoy.com/view/fsSfDW\n// Originally from: https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/\n\nvec3 s_curve(vec3 x)\n{\n    const float a = 2.51f;\n    const float b = 0.03f;\n    const float c = 2.43f;\n    const float d = 0.59f;\n    const float e = 0.14f;\n    x = max(x, 0.0);\n    return clamp((x*(a*x+b))/(x*(c*x+d)+e),0.0,1.0);\n}\n\n","name":"Common","description":"","type":"common"}]}