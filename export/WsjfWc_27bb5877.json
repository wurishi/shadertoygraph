{"ver":"0.1","info":{"id":"WsjfWc","date":"1591009291","viewed":178,"name":"Doodling w/ ThronoCrigger #1","username":"Flopine","description":"This is the first part of a 30 minutes concert for which I made live coded visuals. \nThanks to 0r4 for the invitation and ThronoCrigger for his trust :D I had a lot of fun","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["2d","animation","chiptune","mograph","concert"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan and slerpy for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n\n#define PI acos(-1.)\n#define TAU 6.2831853071\n\n#define BPM (150./60.)\n#define ft(speed) fract(iTime*speed)\n#define bouncy(speed) (abs(sqrt(sin(ft(speed)*PI))))\n#define loopease(speed) easeInOutCirc(abs(-1.+2.*ft(speed)))\n#define switchanim(speed) (floor(sin(ft(speed)*TAU))+1.)\n\n#define AAstep(thre, val) smoothstep(-.7,.7,(val-thre)/min(.07,fwidth(val-thre)))\n#define circle(s,puv) AAstep(s, length(puv))\n#define square(s,puv) AAstep(s, max(abs(puv.x),abs(puv.y)))\n\n/////////////////////// Tools ////////////////////\nmat2 rot (float a)\n{return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nvoid moda (inout vec2 p, float rep)\n{\n    float per = TAU/rep;\n    float a = atan(p.y,p.x);\n    a = mod(a,per)-per*0.5;\n    p = vec2(cos(a),sin(a))*length(p);\n}\n\nfloat easeInOutCirc (float x)\n{\n    return x < 0.5\n        ? (1. - sqrt(1. - (2. * x) * (2. * x))) / 2.\n        : (sqrt(1. - (-2. * x + 2.) * (-2. * x + 2.)) + 1.) / 2.;\n}\n\n/////////////////////// 2D  //////////////////////\nvec3 dancing_cir (vec2 uv)\n{\n    vec2 uu = uv;\n\n    uv.x -= iTime;\n    uv.y = abs(uv.y) - 0.1;\n    float uvid = floor(uv.x)-.5; \n    uv.x = fract(uv.x)-.5;\n    uv.y -= bouncy(BPM+(sin(uvid*0.3))*1.5);\n\n    vec2 off = vec2(0.2,0.); \n    vec3 col = vec3(0.1,0.8,0.5)*circle(0.15,uv);\n\n    return (uu.y < 0.) ? col : (1.-col);\n} \n\nvec3 round_circle (vec2 uv)\n{\n    vec2 uu = uv;\n    uu *= rot(sin(loopease(.5))*TAU);\n    uv *= rot(sin(ft(.5)*TAU));\n    moda(uv, 3.);\n    uv.x -= 0.1+bouncy(BPM*.5);\n\n    vec2 off = vec2(0.2,0.);\n    uv *= rot(iTime);\n    float mask = circle(0.1,(uv+off)) * square(0.1,((uv-off)*rot(iTime)));\n    vec3 col = vec3(.1,.4,.5)*mask;\n\n    return (AAstep(0.05,(uu.x+uu.y))<= 0.) ? col : 1.-col;\n}\n\n/////////////////////// Main  ////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n \tvec3 col = (switchanim((BPM/20.))<= 0.) ? round_circle(uv*1.2) : dancing_cir(uv*1.5);\n    \n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}