{"ver":"0.1","info":{"id":"7ljBzd","date":"1653723486","viewed":112,"name":"Defects","username":"kamilzidek","description":"Using the fractional component of a psuedo random number it is possible to place circles in a Voronoi pattern. Taking inverse of the circle shapes, it is possible to create a cartoon water effect. See if you can change RGB and smoothstep to make lava!","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","cartoon","water","random","smoothstep"],"hasliked":0,"parentid":"3lScDV","parentname":"2D Voronoi Water"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 psuedoRand(vec2 p) {\n\tvec3 a = fract(p.xyy * vec3(123.34, 234.45, 345.56));\n    a += dot(a, a + 67.78);\n    return fract(vec2(a.x * a.y, a.y * a.z));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (2.0 * fragCoord - iResolution.xy)/iResolution.xy;\n    float circlePoints = 0.0;\n    float minDist = 100.0;\n    \n    for(float i = 1.0; i < 300.0; ++i){\n    \tvec2 randNum = psuedoRand(vec2(i));\n        vec2 position = sin(randNum * (iTime + 10.0) * 0.5);\n        float dist = length(uv - position);\n        circlePoints += 1.0 - smoothstep(0.09, 0.25, dist);\n    }\n    \n\tfragColor = vec4(1.0 / vec3(circlePoints, circlePoints, 1.0), 1.0);\n}","name":"Image","description":"","type":"image"}]}