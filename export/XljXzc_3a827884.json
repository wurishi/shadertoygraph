{"ver":"0.1","info":{"id":"XljXzc","date":"1449154549","viewed":142,"name":"[Test] Segment Distance","username":"Ultraviolet","description":"This shader implements a distance to a segment.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["test","distance","segment"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"\nvoid BoxReflect(inout float p, in float bbmin, in float bbmax)\n{\n    p = bbmin + mod(p-bbmin, 2.0*(bbmax - bbmin));\n    if(p > bbmax)\n    \tp = bbmax - (p - bbmax);\n    \n}\n\nvoid BoxReflect(inout vec2 p, in vec2 bbmin, in vec2 bbmax)\n{\n    BoxReflect(p.x, bbmin.x, bbmax.x);\n    BoxReflect(p.y, bbmin.y, bbmax.y);\n}\n\n\nfloat PointSegDistance(vec2 p, vec2 p0, vec2 p1)\n{\n    float s = 1.0;//sign(dot(p-p0, normal(p0, p1)));\n    vec2 d = p1 - p0;\n    \n    float t = dot(p - p0, d) / dot(d, d);\n\n    if(t > 1.0)\n        return length(p1 - p) * s;\n    if(t < 0.0)\n        return length(p0 - p) * s;\n\n    vec2 proj = (1.0-t)*p0 + t*p1;\n    \n    return length(proj-p) * s;\n}\n\nfloat PointSegDistance2(in vec2 p, in vec2 p0, in vec2 p1)\n{\n    vec2 px0 = p-p0, p10 = p1-p0;\n    /*\n    float h = clamp(dot(px0, p10) / dot(p10, p10), 0.0, 1.0);\n    return length(px0 - p10*h);\n\t//*/\n    \n    float l10 = length(p10);\n    p10 /= l10;\n    float dh= abs(cross(vec3(px0,0.), vec3(p10,0.)).z);\n    float dt= max(0.,max(-dot(px0,p10), -l10+dot(px0,p10)));\n    \n    return length(vec2(dh,dt));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float ratio = iResolution.x / iResolution.y;\n\tvec2 uv = fragCoord.xy / iResolution.y;\n    \n    \n    vec2 p0 = vec2(0.5, 0.5);\n    vec2 p1 = vec2(1.0, 0.2);\n    \n    p0 = p0 + p0 * iTime * 0.5;\n    p1 = p1 + p1 * iTime * 0.5;\n    \n    BoxReflect(p0, vec2(0.0), vec2(ratio, 1.0));\n    BoxReflect(p1, vec2(0.0), vec2(ratio, 1.0));\n    \n    float d = PointSegDistance2(uv, p0, p1);\n    \n\t//fragColor = vec4(vec3(d), 1);\n\t//fragColor = vec4(vec3(sin(d*50.0)), 1);\n\tfragColor = vec4(vec3(sin(d*50.0), sin(d*40.0), sin(d*30.0)), 1);\n}","name":"Image","description":"","type":"image"}]}