{"ver":"0.1","info":{"id":"wtjXD3","date":"1567374598","viewed":57,"name":"Mandelbronjames","username":"ArthurSango","description":"mandelbrot shader","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float checkIfBelongsToMandelbrot( vec2 point, float iTime ) {\n\n    float x = point.x + sin(iTime);\n    x = point.x;\n    float y = point.y + cos(iTime);\n    y = point.y ;\n    float realComponentOfResult = point.x ;\n    float imaginaryComponentOfResult = point.y ;\n    float maxIterations = 8.0  ; \n    float maxVal = cos(iTime) * 5.0 + 2.0 ;\n    maxVal = 8. ;\n    float tempRealComponent = 0.0 ;\n    float tempImaginaryComponent = 0.0;\n  \n    for( float i = 0.0; i < maxIterations; i+=1.0) {\n\n         tempRealComponent = \n         realComponentOfResult * realComponentOfResult\n         - imaginaryComponentOfResult * imaginaryComponentOfResult\n         + x;\n\n         tempImaginaryComponent = 2.0 * realComponentOfResult * imaginaryComponentOfResult + y;\n\n         realComponentOfResult = tempRealComponent;\n         imaginaryComponentOfResult = tempImaginaryComponent;\n\n         // Return a number as a percentage\n         if(realComponentOfResult * imaginaryComponentOfResult > maxVal) \n            return (i/maxIterations * 100.0);\n    }\n    return 0.0;   // Return zero if in set   \n    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv =( 6.* uv - 3. );\n    \n    float percentage = checkIfBelongsToMandelbrot( uv, iTime );\n    \n    // Time varying pixel color\n   // vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(percentage,sin(percentage),4));\n    vec3 col = vec3(percentage);\n    \n  \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n\n/**\n\npseudocode from https://en.wikipedia.org/wiki/Mandelbrot_set\n\n{\n  x0 = scaled x coordinate of pixel (scaled to lie in the Mandelbrot X scale (-2.5, 1))\n  y0 = scaled y coordinate of pixel (scaled to lie in the Mandelbrot Y scale (-1, 1))\n  x = 0.0\n  y = 0.0\n  iteration = 0\n  max_iteration = 1000\n  while (x*x + y*y <= 2*2  AND  iteration < max_iteration) {\n    xtemp = x*x - y*y + x0\n    y = 2*x*y + y0\n    x = xtemp\n    iteration = iteration + 1\n  }\n  color = palette[iteration]\n  plot(Px, Py, color)\n}\n\n\n\n**/","name":"Image","description":"","type":"image"}]}