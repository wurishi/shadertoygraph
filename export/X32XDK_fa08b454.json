{"ver":"0.1","info":{"id":"X32XDK","date":"1711101015","viewed":62,"name":"Probability time colouring","username":"GBA","description":"Colouring based on the time taken for a pixel to escape based on two rules\n1. The pixel has an adjacent pixel that has been coloured\n2. The pixel generates a random number below the necessary probability given by its distance from an sdf","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["fractal","colour"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel0, uv).xyz;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float sdCircle(vec2 p, float r) {\n    return length(p) - r;\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\nfloat sdf(vec2 p) {\n    return sdBox(p, vec2(0.25, 0.125));\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvec3 getColour(float t) {\n    return pal(1.0/(1.0 + t), vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.10,0.20));\n}\n\nconst float DIST_SCALE = 20.0;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    if(iFrame != 0) {\n        vec2 uv = fragCoord/iResolution.xy;\n        vec2 ndc = 2.0 * uv - 1.0;\n        ndc.y /= iResolution.x/iResolution.y;\n        vec2 d = 1.0/iResolution.xy;\n        float dist = max(sdf(ndc), 0.0);\n        vec4 colour = texture(iChannel0, uv); \n        if(dist == 0.0) {\n            fragColor = vec4(getColour(0.0), 1.0);\n        } \n        else if(colour.w != 1.0){\n            float prob =  (1.0 / (DIST_SCALE * dist + 1.0));\n            float p = rand(ndc + iTime);\n            bool adjacent = false;\n            for(int i = -1; i <= 1; i+=2) {\n                if(texelFetch(iChannel0, ivec2(fragCoord) + ivec2(i, 0), 0).w == 1.0) {\n                    adjacent = true;\n                }\n                if(texelFetch(iChannel0, ivec2(fragCoord) + ivec2(0, i), 0).w == 1.0) {\n                    adjacent = true;\n                }\n            }\n\n\n            if(adjacent && p < prob) {\n                fragColor = vec4(getColour(iTime), 1.0);\n            } else {\n                fragColor = colour;\n            }\n        } \n        else {\n            fragColor = colour;\n        }\n    } else {\n        fragColor = vec4(0.0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}