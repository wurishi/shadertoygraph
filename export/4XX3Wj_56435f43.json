{"ver":"0.1","info":{"id":"4XX3Wj","date":"1707909421","viewed":80,"name":"approx slerp test","username":"T3sT3ro","description":"Some quick test of primitive slerp approximation (red) using polynomials. For angles < 90 it's very close, near ~80 to ~90 it's pretty close and better, than nlerp, then up to ~160 deg it's pretty close in the middle range and error grows at ends","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","vector","interpolation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Vector Interpolation\" by demofox. https://shadertoy.com/view/4sV3zt\n// 2024-02-14 11:00:00\n\n/*\n\nRelated post with more info on my blog:\nhttp://blog.demofox.org/2016/02/19/normalized-vector-interpolation-tldr/\n\n*/\n\n#define AA_AMOUNT 2.0 / iResolution.x\n\nconst float c_circleSize = 0.075;\nconst float c_vectorLength = 0.15;\nconst float c_lineWidth = 0.001;\nconst float c_approx_weight = 1.31; // tune weight, investigate further. \n// For example sqrt(2) is good for smaller angles and 1.31 is better for wider angles\n\n//============================================================\n// Signed Distance Functions taken/adapted/inspired by from:\n// https://iquilezles.org/articles/distfunctions\n\nfloat UDCircle( in vec2 coords, in vec2 circle, float radius)\n{    \n    return max(length(coords - circle.xy) - radius, 0.0);\n}\n\n//============================================================\nfloat UDFatLineSegment (in vec2 coords, in vec2 A, in vec2 B, in float height)\n{    \n    // calculate x and y axis of box\n    vec2 xAxis = normalize(B-A);\n    vec2 yAxis = vec2(xAxis.y, -xAxis.x);\n    float width = length(B-A);\n    \n\t// make coords relative to A\n    coords -= A;\n    \n    vec2 relCoords;\n    relCoords.x = dot(coords, xAxis);\n    relCoords.y = dot(coords, yAxis);\n    \n    // calculate closest point\n    vec2 closestPoint;\n    closestPoint.x = clamp(relCoords.x, 0.0, width);\n    closestPoint.y = clamp(relCoords.y, -height * 0.5, height * 0.5);\n    \n    return length(relCoords - closestPoint);\n}\n\n//============================================================\n// adapted from source at:\n// https://keithmaggio.wordpress.com/2011/02/15/math-magician-lerp-slerp-and-nlerp/\nvec2 slerp(vec2 start, vec2 end, float percent)\n{\n     // Dot product - the cosine of the angle between 2 vectors.\n     float dot = dot(start, end);     \n     // Clamp it to be in the range of Acos()\n     // This may be unnecessary, but floating point\n     // precision can be a fickle mistress.\n     dot = clamp(dot, -1.0, 1.0);\n     // Acos(dot) returns the angle between start and end,\n     // And multiplying that by percent returns the angle between\n     // start and the final result.\n     float theta = acos(dot)*percent;\n     vec2 RelativeVec = normalize(end - start*dot); // Orthonormal basis\n     // The final result.\n     return ((start*cos(theta)) + (RelativeVec*sin(theta)));\n}\n\n// eyeballed parameters just to test how polynomial approximation would work\n// some math would have to be done to find best parameters and fit.\n// The idea is to decrease the weight of vectors at the ends of interpolation range\n// Perhaps an approximation of trig function \n//    (https://math.stackexchange.com/questions/2115253/fitting-cosx-with-a-polynomial)\n// or a Pade approximation could be better\n// maybe also approximate circular arc with bezier curve by generating bezier control points and\n//   interpolate over t on spline?\n// Important for further investigation: minimize _angle_ error, not the unit arc fit.\nvec2 approxSlerp(vec2 start, vec2 end, float t)\n{\n    float weight = 1. + min(-0.1, dot(start, end)/c_approx_weight);\n    vec2 remapT = pow(vec2(1.-t, t), vec2(weight));\n    return normalize(start*remapT.x + end*remapT.y);\n}\n\n// for comparison, courtesy of spalmer\nvec2 vslerp_spalmer(vec2 a, vec2 b, float i)\n{\n    // fast domain-warped nlerp approximation to slerp\n    // be wary - there's a (likely invalid) 2002 patent on optimizing slerp for quaternions like this.  \n    float c = dot(a, b) / (length(a) * length(b));\n    if (c >= 1.) return b;\n    float d = c * .5 + .5; // for quaternions, would use abs(c) instead\n    float si = ((2. * i - 3.) * i + 2.) * i; //Shrink(i);\n    i = mix(si, i, d);\n    return normalize(mix(a, b, i));\n}\n\n//============================================================\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // set up our camera\n    float aspectRatio = iResolution.x / iResolution.y;\n    vec2 uv = (fragCoord / iResolution.xy) - vec2(0.5);\n    uv.x *= aspectRatio;\n    uv *= 0.5;\n        \n    // calculate the starting and ending vector\n    vec2 startVector = vec2(cos(0.0), sin(0.0));\n\tvec2 endVector = vec2(0.0, 1.0);\n    if (iMouse.x > 0.0)\n    {\n    \tvec2 mouseuv = (iMouse.xy / iResolution.xy) - vec2(0.5);\n    \tmouseuv.x *= aspectRatio;     \n        endVector = normalize(mouseuv);\n    }\n    \n    // calculate our interpolation factor\n\tfloat t = abs(1.0 - (fract(iTime / 4.0) * 2.0));   \n    \n    // calculate the true vector\n    float trueAngle = atan(endVector.y, endVector.x) * t;\n    vec2 trueVector = vec2(cos(trueAngle), sin(trueAngle));\n    \n    // calculate the interpolated vectors\n    vec2 lerpVector = mix(startVector, endVector, t);\n    vec2 nlerpVector = normalize(lerpVector);\n    vec2 slerpVector = slerp(startVector, endVector, t);\n    vec2 approxSlerpVector = approxSlerp(startVector, endVector, t);\n    vec2 vslerp_spalmerVector =  vslerp_spalmer(startVector, endVector, t);\n    \n    // background color\n    vec3 pixelColor = vec3(0.2);\n    \n    // the starting vector in dark grey\n    float dist = UDFatLineSegment(uv, vec2(0.0), startVector * (c_circleSize + c_vectorLength), c_lineWidth);\n    dist = 1.0 - smoothstep(0.0, AA_AMOUNT, dist);\n    pixelColor = mix(pixelColor, vec3(0.5), dist);\n\n    // the ending vector in lighter grey\n    dist = UDFatLineSegment(uv, vec2(0.0), endVector * (c_circleSize + c_vectorLength), c_lineWidth);\n    dist = 1.0 - smoothstep(0.0, AA_AMOUNT, dist);\n    pixelColor = mix(pixelColor, vec3(0.9), dist); \n    \n    // the slerp vector in green\n    dist = UDFatLineSegment(uv, vec2(0.0), slerpVector * (c_circleSize + c_vectorLength  + .02), c_lineWidth);\n    dist = 1.0 - smoothstep(0.0, AA_AMOUNT, dist);\n    pixelColor = mix(pixelColor, vec3(0.2, 1.0, 0.2), dist);\n    \n    // the nlerpVector in orange\n    dist = UDFatLineSegment(uv, vec2(0.0), nlerpVector * (c_circleSize + c_vectorLength), c_lineWidth);\n    dist = 1.0 - smoothstep(0.0, AA_AMOUNT, dist);\n    pixelColor = mix(pixelColor, vec3(1.0, 0.5, 0.2), dist);  \n    \n    // the lerpvector in blue. Note that we must start it at the edge of the circle so use nlerpvector * c_circleSize to start there.\n    dist = UDFatLineSegment(uv, vec2(0.0), nlerpVector * c_circleSize + lerpVector * c_vectorLength, c_lineWidth);\n    dist = 1.0 - smoothstep(0.0, AA_AMOUNT, dist);\n    pixelColor = mix(pixelColor, vec3(0.2, 0.4, 0.8), dist);\n\n    // the polynomial approx vector in red\n    dist = UDFatLineSegment(uv, vec2(0.0), approxSlerpVector * (c_circleSize + c_vectorLength + .01), c_lineWidth);\n    dist = 1.0 - smoothstep(0.0, AA_AMOUNT, dist);\n    pixelColor = mix(pixelColor, vec3(1, .2, .2), dist);\n                           \n    // the vslerp vector in cyan\n    dist = UDFatLineSegment(uv, vec2(0.0), vslerp_spalmerVector * (c_circleSize + c_vectorLength), c_lineWidth);\n    dist = 1.0 - smoothstep(0.0, AA_AMOUNT, dist);\n    pixelColor = mix(pixelColor, vec3(0, 1, 1), dist);\n    \n\t// the true vector in skinny yellow\n    //dist = UDFatLineSegment(uv, vec2(0.0), trueVector * (c_circleSize + c_vectorLength), c_lineWidth / 6.0);\n    //dist = 1.0 - smoothstep(0.0, AA_AMOUNT, dist);\n    //pixelColor = mix(pixelColor, vec3(1.0, 1.0, 0.0), dist);      \n    \n\t// the central circle\n\tdist = UDCircle(uv, vec2(0.0), c_circleSize);\n    dist = 1.0 - smoothstep(0.0, AA_AMOUNT, dist);\n    pixelColor = mix(pixelColor, vec3(0.7), dist);    \n        \n    // make the final color\n\tfragColor = vec4(pixelColor,1.0);\n}","name":"Image","description":"","type":"image"}]}