{"ver":"0.1","info":{"id":"XsdGR7","date":"1448651662","viewed":251,"name":"ColorPalettes","username":"jt","description":"Functions calculating a palette of rainbow-colors (variants smooth/crisp).\nTweaking the multiplier yields different palettes:\n1/1 black-white, 1/2 magenta-green, 1/3 rainbow (approx. 1/4 to 1/6 \"sunset\" colors)","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["colorpalette"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"// Color-Palettes Visualization - written 2015 by Jakob Thomsen\n\n#define draw(c,q) O = mix(vec4(c, 1.), O, vec4(smoothstep(.0,.02,abs(I.y - q))))\n\n// NOTE: tweaking the multiplier results in different palette-types:\n// 1/1 black-white, 1/2 magenta-green, 1/3 rainbow (approx. 1/4 to 1/6 \"sunset\" colors)\n\nvec3 rainbow(float value) // smooth\n{\n    //return .5 + .5 * cos(2. * 3.1415926 * (value + vec3(0,1,2) / 3.)); // original\n    // variants based on the fake-sine function https://www.shadertoy.com/view/4sd3zM\n    //vec3 v = 2.*(.25 + value + vec3(0,1,2) / 3.);\n    vec3 v = 2.*(.25 + value + vec3(0,1,2) * fract(iTime * .1));\n    //return 0.5 + 0.5 * sign(.5-fract(v*.5))*(1.-pow(abs(2. * fract(v) - 1.),vec3(1.75)));\n    vec3 w = abs(2. * fract(v) - 1.);\n    return 0.5 + 0.5 * sign(.5-fract(v*.5))*(1.-w*w);\n    //vec3 m = mirror(value + vec3(0,1,2) / 3.);\n    //return m * m;\n}\n\nvec3 rainbow2(float value) // crisp\n{\n    //return abs(2. * fract(value + vec3(0,1,2) / 8.) - 1.);\n    return abs(2. * fract(value + vec3(0,1,2) * fract(iTime * .1)) - 1.);\n    //return m * m;\n}\n\nvec3 rainbow3(float value) // crisp\n{\n    return clamp(2.0 * abs(2. * fract(value + vec3(0,1,2) * fract(iTime * .1)) - 1.) - 0.5, 0.0, 1.0); \n}\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n\tI /= iResolution.xy;\n    O = vec4(mix(rainbow(I.x), rainbow2(I.x), step(0.5, I.y)), 1.);\n    //O = vec4(1);\n    draw(vec3(1,0,0),.5*rainbow2(I.x).x-.5);\n    draw(vec3(0,1,0),.5*rainbow2(I.x).y-.5);\n    draw(vec3(0,0,1),.5*rainbow2(I.x).z-.5);\n    draw(vec3(1,0,0),.5*rainbow(I.x).x);\n    draw(vec3(0,1,0),.5*rainbow(I.x).y);\n    draw(vec3(0,0,1),.5*rainbow(I.x).z);\n\n    O = sqrt(O); // gamma correction\n}\n","name":"Image","description":"","type":"image"}]}