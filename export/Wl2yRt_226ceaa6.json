{"ver":"0.1","info":{"id":"Wl2yRt","date":"1595094715","viewed":129,"name":"Simple truchet tiling","username":"HalbFettKaese","description":"I watched some videos by The Art of Code and decided to make my own implementation before seeing his.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["truchet","tiling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nint HashInt(vec2 uv) {\n\treturn int(fract(sin(234.27+dot(uv, vec2(12345.6, 5432.13))))*64575.324);\n}\n\nfloat Line(vec2 fuv, int dir, float width) {\n    /* \n\t * If random is odd, line from bottom left to top right.\n\t * If random is even, line from top left to bottom right.\n\t */\n    float a = float(dir);\n    \n    return smoothstep(.01, -.01, abs(fuv.x - fuv.y * (1. -a * 2.) - a)-width);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xx;\n    \n    uv -= iMouse.xy/iResolution.xx;\n\n    uv *= 20.;\n    \n    // Time varying pixel color\n    vec3 col = vec3(0);\n    \n    float width = .123;\n    \n    for (float x = -1.; x <= 1.; x += 1.) {\n        for (float y = -1.; y <= 1.; y += 1.) {\n            if ((x == 0. || y == 0.)) {\n    \t\t\tcol = max(col, Line(\n            \t    fract(uv) - vec2(x, y), \n            \t    HashInt(floor(uv) + vec2(x, y)) & 1, \n            \t    width));\n            } else if ((HashInt(floor(uv)) & 1) != (HashInt(floor(uv) + vec2(x, y)) & 1)) {\n    \t\t\tcol = max(col, Line(\n            \t    fract(uv) - vec2(x, y)/2., \n            \t    HashInt(floor(uv)) & 1,\n            \t    width));\n            }\n        }\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}