{"ver":"0.1","info":{"id":"MsV3DV","date":"1496717846","viewed":476,"name":"[ Type ] (without text)","username":"FMS_Cat","description":"http://www.pouet.net/prod.php?which=66963","likes":24,"published":1,"flags":8,"usePreview":0,"tags":["raymarch","ifs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define P 3.14159265\n#define V vec2(0.,1.)\n#define saturate(i) clamp(i,0.,1.)\n\nvec2 p;\nfloat timeKeeper;\nfloat kick;\nfloat snare;\nfloat light;\n\nvec3 camPos;\nvec3 camTar;\nvec3 camDir;\nvec3 camTop;\nvec3 camSid;\n\nvec3 rayDir;\nvec3 rayBeg;\nfloat rayLen;\nfloat rayLenSum;\nvec3 rayPos;\nvec4 rayCol;\n\nfloat dist;\nvec4 mtl;\nvec4 glitch;\n\n// ------\n\nvec4 random( float _p ) {\n  return texture( iChannel0, _p * vec2( 0.79, 0.73 ) ) * 2.0 - 1.0;\n}\n\nmat2 rotate2D( float _t ) {\n  return mat2( cos( _t ), sin( _t ), -sin( _t ), cos( _t ) );\n}\n\n// ------\n\nvoid setCamera() {\n  vec3 rot = vec3( 0.0 );\n\n  float th = timeKeeper * P / 8.0;\n  camPos = vec3( sin( th ), 0.0, cos( th ) ) * (\n    1.0\n    + 1.0 * exp( -max( 0.0, timeKeeper ) )\n    - 1.0 * exp( -max( 0.0, timeKeeper - 64.0 ) )\n    + 1.3 * exp( -max( 0.0, timeKeeper - 128.0 ) )\n    - 0.3 * exp( -max( 0.0, timeKeeper - 192.0 ) )\n  );\n  camTar = vec3( 0.0, 0.0, 0.0 );\n  camDir = normalize( camTar - camPos );\n  camSid = normalize( cross( camDir, V.xyx ) );\n  camTop = cross( camSid, camDir );\n  th = sin( timeKeeper * 0.3 ) * 0.2;\n  camSid = cos( th ) * camSid + sin( th ) * camTop;\n  camTop = cross( camSid, camDir );\n}\n\nvoid initRay() {\n  rayDir = normalize( camSid * p.x + camTop * p.y + camDir * ( 1.0 - length( p.xy ) * 0.3 ) );\n  rayBeg = camPos;\n  rayLen = 1E-3;\n  rayLenSum = 0.0;\n  rayCol = V.xxxy;\n}\n\n// ------\n\nfloat box( vec3 _pos, vec3 _size ) {\n  vec3 dist = abs( _pos ) - _size;\n  return min( max( dist.x, max( dist.y, dist.z ) ), 0.0 ) + length( max( dist, 0.0 ) );\n}\n\nfloat slasher( vec3 _p, float _ratio ) { // TODO\n  float phase = ( _p.x + _p.y );\n  float slash = abs( 0.5 - ( phase - floor( phase ) ) ) * 2.0;\n  return ( slash - _ratio ) / sqrt( 2.0 );\n}\n\nvec3 ifs( vec3 _p, vec3 _rot, vec3 _shift ) {\n  vec3 pos = _p;\n\n  vec3 shift = _shift;\n\n  for ( int i = 0; i < 5; i ++ ) {\n    float intensity = pow( 2.0, -float( i ) );\n\n    pos.y -= 0.0;\n\n    pos = abs( pos ) - shift * intensity;\n\n    shift.yz = rotate2D( _rot.x ) * shift.yz;\n    shift.zx = rotate2D( _rot.y ) * shift.zx;\n    shift.xy = rotate2D( _rot.z ) * shift.xy;\n\n    if ( pos.x < pos.y ) { pos.xy = pos.yx; }\n    if ( pos.x < pos.z ) { pos.xz = pos.zx; }\n    if ( pos.y < pos.z ) { pos.yz = pos.zy; }\n  }\n\n  return pos;\n}\n\nfloat distFunc( vec3 _pos ) {\n  mtl.x = 0.0;\n\n  float phase = saturate( timeKeeper / 32.0 - 5.0 );\n  vec3 modder = vec3( 20.0 - 18.0 * phase );\n  vec3 pos = _pos;\n  pos.zx = rotate2D( light * exp( -snare * 2.0 ) * P ) * pos.zx;\n  pos = mod( pos - modder, modder * 2.0 ) - modder;\n  float ifsPhase = ( timeKeeper - 192.0 ) / 4.0 - 0.5;\n  pos = ifs(\n    pos,\n    mix(\n      vec3( 0.39, 0.31, 0.23 ) - saturate( timeKeeper / 64.0 - 1.0 ) * 0.1,\n      mix(\n        random( floor( max( 0.0, ifsPhase + 1.0 ) ) / 1.7 ),\n        random( floor( max( 0.0, ifsPhase ) ) / 1.7 ),\n        exp( -mod( timeKeeper + 2.0, 4.0 ) * 1.0 )\n      ).xyz * 0.1 + 0.1,\n      phase\n    ),\n    mix(\n      mix(\n        vec3( 0.2, 0.5, 0.2 ),\n        vec3( 1.0, 0.5, 0.0 ),\n        saturate( timeKeeper / 64.0 - 1.0 )\n      ),\n      mix(\n        random( floor( max( 0.0, ifsPhase + 1.0 ) ) / 1.3 ),\n        random( floor( max( 0.0, ifsPhase ) ) / 1.3 ),\n        exp( -mod( timeKeeper + 2.0, 4.0 ) * 1.0 )\n      ).xyz * 0.7 + 1.7,\n      phase\n    )\n  );\n  float dist = max(\n    box( pos, vec3( 0.1 ) ),\n    -box( _pos, vec2( 1.5, 0.15 ).xyx )\n  );\n\n  // ------\n\n  pos = _pos;\n  dist = min(\n    dist,\n    box( pos, V.yyy * 0.1 )\n  );\n\n  // ------\n\n  float boxHeight = ( timeKeeper - 128.0 ) * 0.02;\n  float boxWidth = 0.4;\n\n  pos.xz = abs( pos.xz ) - boxWidth;\n  pos.y = mod( pos.y - ( 128.0 < timeKeeper ? timeKeeper * 5E-2 : 0.0 ), 0.04 ) - 0.02;\n  dist = min(\n    max(\n      dist,\n      -box( pos, vec3( 0.1 ) )\n    ),\n    box( pos, vec3( 0.05, 0.01, 0.05 ) )\n  );\n\n  if ( light < 0.5 ) {\n    float distC = box( _pos, vec3( boxWidth, boxHeight, boxWidth ) );\n    if ( distC < dist ) {\n      dist = distC;\n      mtl.x = 1.0;\n    }\n  }\n\n  // ------\n\n  return dist;\n}\n\nvec3 normalFunc( vec3 _pos, float _delta ) {\n  vec2 d = vec2( 0.0, _delta );\n  return normalize( vec3(\n    distFunc( _pos + d.yxx ) - distFunc( _pos - d.yxx ),\n    distFunc( _pos + d.xyx ) - distFunc( _pos - d.xyx ),\n    distFunc( _pos + d.xxy ) - distFunc( _pos - d.xxy )\n  ) );\n}\n\n// ------\n\nvoid march() {\n  dist = 0.0;\n\n  for ( int i = 0; i < 99; i ++ ) {\n    rayPos = rayBeg + rayDir * rayLen;\n    dist = distFunc( rayPos );\n    rayLen += dist * 0.8;\n    if ( abs( dist ) < 1E-4 ) { break; }\n    if ( 1E3 < rayLen ) { break; }\n  }\n\n  rayLenSum += rayLen;\n}\n\nvoid shade() {\n  vec3 fogCol = mix(\n    V.yyy * 0.2,\n    vec3( 1.1, 1.3, 1.7 ),\n    light\n  ) * ( 1.0 - glitch.z );\n  float decay = exp( -rayLenSum * 1E-1 );\n\n  if ( abs( dist ) < 1E-3 ) {\n\n    vec3 normal = normalFunc( rayPos, rayLen * 1E-3 );\n\n    if ( 0.5 < mtl.x ) {\n      light = 1.0;\n\n      rayDir = refract( rayDir, normal, 0.8 );\n      rayBeg = rayPos;\n      rayLen = 1E-3;\n      return;\n    }\n\n    if ( 0.5 < glitch.y ) {\n      vec4 tex = texture( iChannel0, vec2( rayPos.y, floor( iTime * 2.0 ) / 4.7 ) );\n      if ( tex.w < 0.5 ) {\n        rayCol = vec4( tex.xyz, 0.0 );\n        return;\n      }\n    }\n\n    float edge = saturate( pow( length( normal - normalFunc( rayPos, 4E-3 * rayLen ) ) * 2.0, 2.0 ) );\n\n    if ( 0.5 < glitch.z ) {\n      rayCol = vec4( mix(\n        V.yyy,\n        V.xxx,\n        edge\n      ), 0.0 );\n      return;\n    }\n\n    vec3 ligDir = rayDir;\n\n    vec3 dif = saturate( dot( -normal, ligDir ) ) * V.yyy * 0.2 * ( 2.0 + light );\n    vec3 edgeCol = mix(\n      vec3( 1.0, 0.2, 0.5 ),\n      mix(\n        V.xxx,\n        vec3( 0.2, 0.5, 1.0 ),\n        exp( -snare )\n      ),\n      light\n    ) * 2.0;\n    rayCol.xyz += mix(\n      fogCol,\n      mix(\n        dif,\n        edgeCol,\n        edge\n      ),\n      decay\n    ) * 0.8 * rayCol.w * ( 1.0 + glitch.w * 9.0 ) - glitch.w * 2.0;\n    rayCol.w *= 0.2;\n\n    rayDir = reflect( rayDir, normal );\n    rayBeg = rayPos;\n    rayLen = 1E-3;\n\n  } else {\n\n    rayCol.xyz += fogCol * ( 1.0 - decay ) * rayCol.w;\n    rayCol.w = 0.0;\n\n  }\n}\n\n// ------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  timeKeeper = iTime / 60.0 * 175.0 + 0.12;\n  mtl = V.xxxx;\n  p = ( fragCoord.xy * 2.0 - iResolution.xy ) / iResolution.x;\n  light = 0.0;\n  glitch = V.xxxx;\n\n  if ( 448.0 < timeKeeper ) {\n    timeKeeper = 448.5 - exp( 896.0 - timeKeeper * 2.0 ) * 0.5;\n  }\n\n  if ( timeKeeper < 0.0 ) {\n    fragColor = vec4(\n      V.yyy * saturate( ( exp( -mod( timeKeeper, 1.0 ) ) * 0.1 - length( p ) ) * 4E2 ),\n      1.0\n    );\n  } else {\n    vec4 glitchr = ( 320.0 < timeKeeper ) ? vec4(\n      random( floor( timeKeeper * 4.0 ) / 5.74 ).xy,\n      random( floor( timeKeeper * 2.0 ) / 6.74 ).xy\n    ) : V.xxxx;\n    if ( glitchr.z < -0.6 ) {\n      timeKeeper -= floor( mod( timeKeeper, 0.5 ) * 8.0 ) / 8.0;\n      p *= 0.8;\n      glitch.w = 1.0;\n      timeKeeper -= 8.0 * max( 0.0, texture( iChannel0, floor( p.xy * vec2( 4.0, 16.0 ) + floor( timeKeeper * 2.0 ) ) / 7.8 ).x - 0.7 );\n    } else if ( glitchr.z < -0.4 ) {\n      timeKeeper = floor( timeKeeper * 512.0 ) / 512.0;\n      glitch.z = 1.0;\n      p *= 1.2;\n    } else if ( glitchr.z < -0.2 ) {\n      timeKeeper = timeKeeper * 1.0 - floor( mod( timeKeeper, 0.5 ) * 14.0 ) / 18.0;\n      glitch.y = 1.0;\n    }\n\n    kick = (\n      0.6 < glitchr.x\n      ? mod( timeKeeper, 0.25 )\n      : mod( timeKeeper + ( 1.5 < mod( timeKeeper, 8.0 ) ? 0.5 : 0.0 ), 2.0 ) + ( abs( timeKeeper - 63.75 ) < 0.25 ? 9E9 : 0.0 )\n    );\n    snare = (\n      glitchr.x < -0.6\n      ? mod( timeKeeper, 0.25 )\n      : mod( timeKeeper + 2.0, 4.0 ) + ( abs( timeKeeper - 162.0 ) < 32.0 ? 9E9 : 0.0 )\n    );\n\n    setCamera();\n    initRay();\n\n    for ( int i = 0; i < 9; i ++ ) {\n      march();\n      shade();\n      if ( rayCol.w < 0.5 ) { break; }\n    }\n\n    fragColor = vec4( rayCol.xyz - length( p ) * 0.4, 1.0 );\n  }\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"#define P 3.14159265\n#define V vec2(0.,1.)\n#define pitch(i,j) 96.0 * pow( 2.0, ( i * 5.0 + mod( i, 2.0 ) * 2.0 + ( 3.0 < i ? 6.0 : 0.0 ) + j ) / 12.0 )\n#define saturate(i) clamp(i,-1.,1.)\n\nvec2 random( float _p ) {\n  return texture( iChannel0, _p * vec2( 0.79, 0.73 ) ).xy * 2.0 - 1.0;\n}\n\nvec2 mainSound( in int samp, float time ) {\n  \n  float timeKeeper = time * 175.0 / 60.0;\n\n  vec2 ret = V.xx;\n  float step = floor( timeKeeper / 8.0 );\n\n  if ( timeKeeper < 0.0 || abs( timeKeeper - 63.75 ) < 0.25 ) {\n\n    if ( mod( timeKeeper, 1.0 ) < 0.1 ) {\n      ret += sin( timeKeeper * 4096.0 / ( mod( timeKeeper, 4.0 ) < 1.0 ? 1.0 : 2.0 ) ) * 0.5;\n    }\n\n  } else {\n\n    if ( 448.0 < timeKeeper ) {\n      timeKeeper = 452.0 - exp( 448.0 - timeKeeper ) * 4.0;\n      timeKeeper -= floor( ( timeKeeper - 448.0 ) * 11.9 ) / 14.0;\n    }\n\n    vec4 glitchr = ( 320.0 < timeKeeper ) ? vec4(\n      random( floor( timeKeeper * 4.0 ) / 5.74 ),\n      random( floor( timeKeeper * 2.0 ) / 6.74 )\n    ) : V.xxxx;\n    if ( glitchr.z < -0.6 ) {\n      timeKeeper -= floor( mod( timeKeeper, 0.5 ) * 8.0 ) / 8.0;\n    } else if ( glitchr.z < -0.4 ) {\n      timeKeeper = floor( timeKeeper * 512.0 ) / 512.0;\n    } else if ( glitchr.z < -0.2 ) {\n      timeKeeper = timeKeeper * 1.0 - floor( mod( timeKeeper, 0.5 ) * 14.0 ) / 18.0;\n    }\n\n    float kick = (\n      0.6 < glitchr.x\n      ? mod( timeKeeper, 0.25 )\n      : mod( timeKeeper + ( 1.5 < mod( timeKeeper, 8.0 ) ? 0.5 : 0.0 ), 2.0 )\n    );\n    // float kick = mod( timeKeeper, 2.0 );\n    ret += sin(\n      exp( -kick * 24.0 ) * 99.0 - timeKeeper * 96.0\n    ) * 0.6;\n\n    float snare = (\n      glitchr.x < -0.6\n      ? mod( timeKeeper, 0.25 )\n      : mod( timeKeeper + 2.0, 4.0 ) + ( abs( timeKeeper - 162.0 ) < 32.0 ? 9E9 : 0.0 )\n    );\n    ret += saturate( (\n      random( timeKeeper * 40.0 ) +\n      sin( timeKeeper * 32.0 * vec2( 26.1, 25.9 ) - exp( -snare * 320.0 ) * 20.0 ) * 2.0\n    ) * 2.0 * exp( -snare * 8.0 ) ) * 0.25;\n\n    float hihat = mod( timeKeeper, 0.5 - ( 192.0 < timeKeeper ? 0.25 : 0.0 ) );\n    ret += (\n      random( timeKeeper * 40.0 )\n    ) * exp( -hihat * 42.0 ) * saturate( snare * kick ) * 0.4;\n\n    float click = mod( timeKeeper, 0.25 );\n    if ( 32.0 < timeKeeper ) {\n      ret += sin( exp( -click * 300.0 ) * random( timeKeeper ) ) * 0.8;\n    }\n\n    if ( abs( timeKeeper - 192.0 ) < 128.0 ) {\n      float padPhase = clamp( timeKeeper / 32.0 - 5.0, 0.0, 1.0 );\n      for ( int iLoop = 0; iLoop < 5; iLoop ++ ) {\n        float i = float( iLoop );\n        for ( int j = 0; j < 5; j ++ ) {\n          vec2 f = ( 4.0 + random( i ) * 0.1 + random( float( j ) ) * 0.03 ) * pitch( i, 0.0 );\n          ret += sin(\n            timeKeeper * f\n            + sin(\n              timeKeeper * 4.0 * f\n              + sin(\n                timeKeeper * 12.0 * f\n              )\n            ) * padPhase * 0.2\n          )\n          * 0.02\n          * ( 2.0 - padPhase )\n          * ( j == 0 ? 1.0 : padPhase )\n          * saturate( snare * kick );\n          if ( timeKeeper < 160.0 ) { break; }\n        }\n      }\n    }\n\n    if ( 128.0 < timeKeeper ) {\n      vec2 f = vec2( 8.01, 7.99 ) * pitch( mod( floor( timeKeeper * 4.0 ), 6.0 ), floor( random( floor( timeKeeper * 4.0 ) / 7.3 ).x * 3.0 ) * 12.0 );\n      ret += sin(\n        timeKeeper * f\n        + sin(\n          timeKeeper * 1.0 * f\n        ) * exp( -click * 12.0 )\n      ) * 0.1 * exp( -click * 7.0 )\n      * saturate( snare * kick );\n    }\n\n  }\n\n  return ret;\n}","name":"Sound","description":"","type":"sound"}]}