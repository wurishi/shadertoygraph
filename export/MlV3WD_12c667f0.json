{"ver":"0.1","info":{"id":"MlV3WD","date":"1474775931","viewed":578,"name":"Scene Bar","username":"Imsure1200q_1UWE130","description":"Two Scenes In One, By Using Scene Bar.\nBasic Bar Tutorial:\nhttps://www.shadertoy.com/view/XtdGRX","likes":3,"published":3,"flags":32,"usePreview":0,"tags":["raytracing","raymarching","bar","switch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Tutorial\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Get X Of Mouse Position.\n    float X = iMouse.x / iResolution.x;\n    //Get Canvas\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    //Make Bar \n    //Start\n    if(uv.x <= X - 0.01 && uv.x >= X + 0.01)\n    {\n        fragColor = vec4(0.9,0.0,0.0,1.0);\n    }\n    //End\n    //Now Make Scene 1: Note: You Can Make Anything In Here, Just Make Sure U Texture2D A Buffer.\n    else if(uv.x <= X - 0.01){fragColor = texture(iChannel1, uv);}\n    //Then Make Scene 2: Note: You Can Make Anything In Here, Just Make Sure U Texture2D A Buffer.\n    else if(uv.x >= X + 0.01){fragColor = texture(iChannel0, uv);}\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec3 s(vec3 p)\n{\n    return vec3(p.x + p.y * p.z+p.x,p.y - p.x * p.x-p.z,p.z*p.z*p.y+p.x);\n}\nfloat circle(vec3 p)\n{\n    return length(s(cos(p))) - 0.5;\n}\nfloat trace(vec3 ro, vec3 rd)\n{\n    float t = 0.0;\n    for(int i = 0; i < 48; i++)\n    {\n        vec3 p = ro+t*rd;\n        float d = circle(p.xyz+p.zxy/3.);\n        t += d * 0.5;\n    }\n    return t;\n}\nmat2 rotF(float a)\n{\n    return mat2(cos(a),-sin(a),sin(a),cos(a));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec3 rd = normalize(vec3(uv, 0.5));\n    rd.xz *= rotF(iTime);\n    vec3 ro = vec3(0.0, 0.0, -3.0);\n    float t = trace(ro, rd);\n    float fog = 1.0/(1.0+t*t*0.1);\n    fragColor = vec4(fog);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec3 s(vec3 p)\n{\n    return vec3(p.x + p.y * p.z+p.x,p.y - p.x * p.x-p.z,p.z*p.z*p.y+p.x);\n}\nfloat star(vec3 p)\n{\n    return length(s(sin(p))) - 0.5;\n}\nfloat trace(vec3 ro, vec3 rd)\n{\n    float t = 0.0;\n    for(int i = 0; i < 24; i++)\n    {\n        vec3 p = ro+t*rd;\n        float d = star(p);\n        t += d * 0.5;\n    }\n    return t;\n}\nmat2 rotF(float a)\n{\n    return mat2(cos(a),-sin(a),sin(a),cos(a));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec3 rd = normalize(vec3(uv, 1.0));\n    rd.xz *= rotF(iTime);\n    vec3 ro = vec3(iTime-2.0, iTime, -3.0);\n    float t = trace(ro, rd);\n    float fog = 1.0/(1.0+t*t*0.1);\n    fragColor = vec4(fog);\n}","name":"Buffer B","description":"","type":"buffer"}]}