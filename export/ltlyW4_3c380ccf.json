{"ver":"0.1","info":{"id":"ltlyW4","date":"1504884293","viewed":105,"name":"Diamond sign","username":"rougier","description":"Diamond sign","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sdf","csg"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Python and OpenGL for Scientific Visualization\n// 2017 Nicolas P. Rougier\n// See also http://jcgt.org/published/0003/04/01/\n\nconst float M_SQRT_2 = 1.41421356237309504880168872420969808;\n\n/*\nfloat diamond(vec2 P, float size)\n{\n   float x = M_SQRT_2/2.0 * (P.x - P.y);\n   float y = M_SQRT_2/2.0 * (P.x + P.y);\n   return max(abs(x), abs(y)) - size/(2.0*M_SQRT_2);\n}\n*/\n\nfloat diamond(vec2 P, float size)\n{\n   P = abs(P);\n   return (P.x+P.y - size*0.5)/sqrt(2.0);\n}\n\n// Blue or red color according to distance d\nvec4 color(float d)\n{\n    vec3 white = vec3(1.0, 1.0, 1.0);\n    vec3 blue  = vec3(0.1, 0.4, 0.7);\n    vec3 color = white - sign(d)*blue;\n    color *= (1.0 - exp(-4.0*abs(d))) * (0.8 + 0.2*cos(140.0*d));\n    color = mix(color, white, 1.0-smoothstep(0.0,0.02,abs(d)) );\n    return vec4(color, 1.0);\n}\n\n\n// Move circles using mouse\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 p = 2.0*(gl_FragCoord.xy/max(iResolution.x, iResolution.y))-1.0;\n    fragColor = color(diamond(p+vec2(0.0,0.4), 1.0));\n}","name":"Image","description":"","type":"image"}]}