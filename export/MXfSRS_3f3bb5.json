{"ver":"0.1","info":{"id":"MXfSRS","date":"1709675014","viewed":146,"name":"Raymarching shading on 2d map","username":"rclovis","description":"My attempt to make a 2d world generation with raymarching shading\nWASD to move\nMouse left down to move the sun","likes":6,"published":1,"flags":48,"usePreview":0,"tags":["noise","terrain","perlin","shading","occlusion","generation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// the noise part is from https://www.shadertoy.com/view/7tSXDD\n\nfloat rand(vec2 c){\n\treturn fract(sin(dot(c.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat noise(vec2 p, float freq ){\n\tfloat unit = 800./freq;\n\tvec2 ij = floor(p/unit);\n\tvec2 xy = mod(p,unit)/unit;\n\t//xy = 3.*xy*xy-2.*xy*xy*xy;\n\txy = .5*(1.-cos(3.1415*xy));\n\tfloat a = rand((ij+vec2(0.,0.)));\n\tfloat b = rand((ij+vec2(1.,0.)));\n\tfloat c = rand((ij+vec2(0.,1.)));\n\tfloat d = rand((ij+vec2(1.,1.)));\n\tfloat x1 = mix(a, b, xy.x);\n\tfloat x2 = mix(c, d, xy.x);\n\treturn mix(x1, x2, xy.y);\n}\n\nfloat pNoise(vec2 p, int res){\n\tfloat persistance = .5;\n\tfloat n = 0.;\n\tfloat normK = 0.;\n\tfloat f = 4.;\n\tfloat amp = 1.;\n\tint iCount = 0;\n\tfor (int i = 0; i<50; i++){\n\t\tn+=amp*noise(p, f);\n\t\tf*=2.;\n\t\tnormK+=amp;\n\t\tamp*=persistance;\n\t\tif (iCount == res) break;\n\t\tiCount++;\n\t}\n\tfloat nf = n/normK;\n\treturn nf*nf*nf*nf;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n\n    int freq = 5;\n    float amp = 3.;\n    \n    vec2 pOffset = texture(iChannel0, vec2(0., 0.)).xy * 50. + vec2(iTime * 30., 0.);\n    float height = max(0.05, pNoise(uv * 200. + pOffset, freq) * amp);\n\n    vec3 col = vec3(0.9, 0.9, 0.9);\n    if (height < 0.8) col = vec3(0.3, 0.3, 0.3);\n    if (height < 0.6) col = vec3(0.1, 0.5, 0.1);\n    if (height < 0.4) col = vec3(0.2, 0.6, 0.2);\n    if (height < 0.15) col = vec3(0.76, 0.7, 0.5);\n    if (height < 0.11 + sin(iTime) * 0.01) col = vec3(0.8, 0.75, 0.55);\n    if (height < 0.1 + sin(iTime) * 0.01) col = vec3(0.2, 0.5, 0.8) * (0.7 + height * 3.);\n\n    //Raymarching Shadows\n    vec3 sun = normalize(vec3(iMouse.xy, 3.) - vec3(fragCoord, height + 0.01)) * 4.;\n    for (int i = 0;i < 50;i++) {\n        vec3 point = vec3(uv * 200., height + 0.01) + sun * float(i);\n        if (max(0.05, pNoise(point.xy + pOffset, freq) * amp) > point.z) {\n            col = col / 2.;\n            break;\n        }\n    }\n    //\n\n    //Ambient occlusion\n    float area = 100.;\n    for (int i = 0;i < 10 && height > 0.1 + sin(iTime) * 0.01;i++) {\n        for (int j = 0;j < 10;j++) {\n            float theight = max(0.05, pNoise(uv * 200. + vec2((float(i) - 5.) / 2., (float(j) - 5.) / 2.) + pOffset, freq) * amp);\n            if (theight > height + 0.001)\n                area -= 1.;\n        }\n    }\n    col = col * smoothstep(0., 1., (float(area) / 100. + 0.4));\n    //\n\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define W 87\n#define S 83\n#define A 65\n#define D 68\n#define isPressed(key)  texture(iChannel1, vec2((float(key)+.5)/256.0, 0.2)).x>.5\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n    if (floor(fragCoord.x) == 0. && floor(fragCoord.y) == 0.){\n        if (iTime < 1.0) {\n            fragColor = vec4(0., -5., 0.0, 0.0);\n        } else {\n            fragColor = texture(iChannel0, vec2(0., 0.));\n            if (isPressed(A))\n                fragColor -= vec4(0.1, 0.0, 0.0, 0.0);\n            if (isPressed(D))\n                fragColor += vec4(0.1, 0.0, 0.0, 0.0);\n            if (isPressed(W))\n                fragColor += vec4(0.0, 0.1, 0.0, 0.0);\n            if (isPressed(S))\n                fragColor -= vec4(0.0, 0.1, 0.0, 0.0);\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}