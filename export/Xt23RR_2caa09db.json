{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Created by S.Guillitte\n//Fluid technique based on Fluid with Obstacles by Effie and 2D fluids by andregc (https://www.shadertoy.com/view/4llGWl)\n\n\n#define PI 3.14159265358979\n\n\nfloat hash( in vec3 p ) \n{\n    return fract(sin(p.x*15.32758341+p.y*39.786792357+p.z*59.4583127+7.5312) * 43758.236237153)-.5;\n}\n\nvec3 hash3( in vec3 p )\n{\n    return vec3(hash(p),hash(p+1.5),hash(p+2.5));\n}\n\n//mat2 m2= mat2(.8,.6,-.6,.8);\n\n// Gabor/Voronoi mix 3x3 kernel (some artifacts for v=1.)\nfloat gavoronoi3(in vec3 p)\n{    \n    vec3 ip = floor(p);\n    vec3 fp = fract(p);\n    float f = 12.*PI;//frequency\n    float v = .8;//cell variability <1.\n    float dv = .9;//direction variability <1.\n    vec3 dir = vec3(.1);\n    float va = 0.0;\n   \tfloat wt = 0.0;\n    for (int i=-1; i<=1; i++) \n\tfor (int j=-1; j<=1; j++) \n    for (int k=-1; k<=1; k++)    \n\t{\t\t\n        vec3 o = vec3(i, j, k)-.5;\n        vec3 h = hash3((ip - o));\n        vec3 pp = fp +o  -h;\n        float d = dot(pp, pp);\n        float w = exp(-d*4.);\n        wt +=w;\n        h = dv*h+dir;//h=normalize(h+dir);\n        va += cos(dot(pp,h)*f/v)*w;\n\t}    \n    return va/wt;\n}\n\n\nvec3 field (in vec3 p){\n    p=p/4.;\n\tfor (int i=0; i<=5; i++)p=abs(p)/dot(p,p)-1.;  \n    return p;\n}\n\nfloat noise( vec3 p)\n{   \n    return gavoronoi3(p);\n}\n\n\n\nvec3 euler(vec3 uv, float t) {\n\tt /= 6.;\n\tfor(int i = 0; i < 6; ++i) {\n\t\tuv -= field(uv)*t;\n\t}\n\treturn uv;\n}\n\nvec3 rk4(vec3 uv, float t) {\n    t /= 3.;\n    for(int i = 0; i < 3; ++i) {\n        \n        \tvec3 k1 = -field(uv);\n        \tvec3 k2 = -field(uv + k1*t/2.);\n        \tvec3 k3 = -field(uv + k2*t/2.);\n\t        vec3 k4 = -field(uv + k3*t);\n    \t    uv = uv + t/6.*(k1+2.*k2+2.*k2+k3);\n        \n    }\n\t\n    return uv;\n}\n\nfloat fluid(vec3 uv, float t) {\n\tfloat t1 = t*0.5;\n\tfloat t2 = t1 + 0.5;\n\tvec3 uv1 = rk4(uv, t1);\n\tvec3 uv2 = rk4(uv, t2);\n\tfloat c1 = noise(uv1);\n\tfloat c2 = noise(uv2);\n\treturn 4.*mix(c2,c1,t);\n    \n}\n\n\nfloat map(vec3 p){\n\tfloat t = fract(iTime);\n    return fluid(p,t);\n    \n}\n\n\nmat2 rot(float a) {\n\treturn mat2(cos(a),sin(a),-sin(a),cos(a));\t\n}\n\nvec2 iSphere( in vec3 ro, in vec3 rd, in vec4 sph )//from iq\n{\n\tvec3 oc = ro - sph.xyz;\n\tfloat b = dot( oc, rd );\n\tfloat c = dot( oc, oc ) - sph.w*sph.w;\n\tfloat h = b*b - c;\n\tif( h<0.0 ) return vec2(-1.0);\n\th = sqrt(h);\n\treturn vec2(-b-h, -b+h );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tfloat time = iTime;\n    vec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x/iResolution.y;\n    vec2 m = vec2(0.);\n\tif( iMouse.z>0.0 )m = iMouse.xy/iResolution.xy*3.14;\n    m-=.5;\n\n    // camera\n\n    vec3 ro = vec3(4.);\n    ro.yz*=rot(m.y);\n    ro.xz*=rot(m.x+ 0.1*time);\n    vec3 ta = vec3( 0.0 , 0.0, 0.0 );\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    vec3 rd = normalize( p.x*uu + p.y*vv + 4.0*ww );\n\n    \n    vec2 tmm = iSphere( ro, rd, vec4(0.,0.,0.,2.) );\n\n\tfloat c;\n    \n   \tif (tmm.x<0.)c = -1.;\n    else c=abs( map(ro+rd*tmm.x)*1.);\n    vec3 col = .3 + .7*sin(vec3(1.,2.,3.)+c);\n    if(c<0.)col=vec3(.4);\n\t\n\t// shade\n    \n    \n    col = clamp(col,0.,1.);\n    fragColor = vec4( col, 1.0 );\n}\n\t\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Xt23RR","date":"1426631369","viewed":533,"name":"Pseudo kleinian fluid","username":"guil","description":"A gavoronoise fluidified by a pseudo kleinian vector field\nFluid technique based on Fluid with Obstacles by Effie and 2D fluids by andregc (https://www.shadertoy.com/view/4llGWl)","likes":19,"published":1,"flags":0,"usePreview":0,"tags":["fluid","kleinian"],"hasliked":0,"parentid":"","parentname":""}}