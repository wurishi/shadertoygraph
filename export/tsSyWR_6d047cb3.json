{"ver":"0.1","info":{"id":"tsSyWR","date":"1586661366","viewed":256,"name":"Hexagonal Pixelate - Prismatic","username":"iaian7","description":"Takes the video camera input and feeds it through a hexagonal pattern, controlling the size of each dot. This variation uses individual channels to create circles with varying coloured outlines.\n\nOriginal:\nhttps://www.shadertoy.com/view/wsSyWR","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["circles","pixel","hexagon","array","pixelate","hexagonal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 hexagon(vec2 uv){\n    uv *= vec2(0.577350278, 1.0); // hexagonal ratio\n    float z = clamp(abs(mod(uv.x+floor(uv.y), 2.0)-1.0)*3.141592653-1.047197551, 0.0, 1.0);\n    uv.y = floor(uv.y + z);\n    uv.x = (floor(uv.x*0.5 + mod(uv.y, 2.0)*0.5) - mod(uv.y, 2.0)*0.5 + 0.5)*3.464101665; // convert back from hexagonal ratio\n    return uv;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\t// Normalized pixel coordinates (from 0 to 1)\n\tvec2 uv = fragCoord / iResolution.y; // square UV map\n    vec2 c = iResolution.xy*0.5/iResolution.y; // normalised center\n\tvec2 r = vec2(iResolution.y/iResolution.x, 1.0); // skew the square UV map to fill image sources to the screen\n\n\t// Settings\n\tfloat count = 32.0; // This is measured to the 1.0 boundary, and it's actually half this because math reasons :shrug:\n    float antialias = 0.075; // The distance between 0.0-1.0 where the edge will be blured, and it's actually twice this\n    // Distance\n    float dots = length(uv-(hexagon(uv*count)/count))*count;\n\t// Texture\n\tvec4 tex = texture(iChannel0, hexagon(uv*count)/count*r);\n    // Dot creation\n    tex.a = tex.r*0.3 + tex.g*0.6 + tex.b*0.1; // basic desaturate\n    tex.rgb = smoothstep(tex.rgb+antialias, tex.rgb-antialias, vec3(dots));\n\n\t// Output to screen\n    fragColor = vec4(tex.rgb, 1.0);\n}","name":"Image","description":"","type":"image"}]}