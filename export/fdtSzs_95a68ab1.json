{"ver":"0.1","info":{"id":"fdtSzs","date":"1633738038","viewed":380,"name":"Tileable star background texture","username":"Einheit101","description":"This shader creates a performance friendly and tileable star texture. A higher resolution noise texture will increase quality of the image.\nThis can be used as texture for skyboxes, for example.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","noise","texture","star","background","tileable"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TILES 1.0 // Use 1.0 for normal tiling across whole texture.\n\n\nvec3 fbm (vec2 uv1, vec2 uv2, vec2 uv3) {\n    vec3 rgb = vec3(0., 0., 0.);\n\tfor (int i = 0; i < 5; i++) {\n        float lod = 5.0 - float(i) -1.0;\n        rgb.r += 0.56 * textureLod(iChannel0, uv1, lod).r;\n        rgb.g += 0.56 * textureLod(iChannel0, uv2, lod).r;\n        rgb.b += 0.56 * textureLod(iChannel0, uv3, lod).r;\n    }\n   return 1.-pow(rgb, vec3(10.0));\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n \tvec2 uv = fragCoord / iResolution.xy * TILES;\n\nuv += iMouse.xy / 500.;\n\n    vec3 rgb = fbm(uv, uv + vec2(0.8, 0.1), uv + vec2(0.3, 0.6));\n\n\n    vec3 col1 = vec3(rgb.r, rgb.r*0.8, rgb.r*0.8);\n    vec3 col2 = vec3(rgb.g*0.9, rgb.g, rgb.g*0.9);\n    vec3 col3 = vec3(rgb.b*0.8, rgb.b*0.8, rgb.b);\n    \n    vec3 finalColor = max(col1, max(col2, col3));\n    \n    \n    // Show Tiling by https://www.shadertoy.com/view/4dlGW2\n    if (mod(iTime - 2.0, 4.0) < 2.0)\n\t{\n       \tvec2 pixel = TILES / iResolution.xy;\n\t\tvec2 first = step(pixel, uv);\n\t\tuv  = step(fract(uv), pixel);\n\t\tfinalColor = mix(finalColor, vec3(0.0, 1.0, 0.0), (uv.x + uv.y) * first.x * first.y);\n\t}\n    \n    fragColor = vec4(finalColor, 1.);\n}","name":"Image","description":"","type":"image"}]}