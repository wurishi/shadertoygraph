{"ver":"0.1","info":{"id":"3tcXDM","date":"1581018797","viewed":358,"name":"Multi Triangle Video Player","username":"BackwardsCap","description":"An example for a friend!\nA video player that can display 4 different videos in a square.","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["tutorial","triangles","videoplayer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415927\n\n//our rotation matrix\nmat2 rot(float x)\n{\n    float s = sin(x);\n    float c = cos(x);\n    return mat2(c,-s,s,c);\n}\n\n//calculate a square. if we know its at a point in space and we know its width/height\n//then if the absolute value of the distance from the point is less than our width/height\n//we know we are in the square. apply to x and y, the overlapping section is our square\nfloat sq(vec2 p, float d)\n{\n    p=smoothstep(3./iResolution.y,.0,abs(p)-d-.1);\n    return  p.x*p.y;\n}\n\nvec3 videoTriangle(vec2 uv, sampler2D video, vec2 dimensions, float rotation)\n{\n    //rotate our canvas space\n    uv*=rot((PI/2.0)*rotation);\n    \n    //we are going to take 2 squares that fit the dimensions of the screen\n    //rotate one of them 45 degrees then move it down until its corners are flush with the other's edge\n    //calculate the overlapping segment and voila! a triangle to sample our videos from\n    float sq1 = sq(uv, .9);                         // \\/ adjust this to change the spacing between the videos\n    float sq2 = sq((uv+vec2(0,sqrt(2.0)))*rot(PI/4.0),.895);\n    \n    //move the video to be center(ish) of our triangle and scale it up\n    uv.x+=sqrt(2.0);\n    uv.y-=.25;\n    uv/=2.0;\n    \n    //make sure our texture sample is aspect-ratio correct\n    uv.x*=(dimensions.y/dimensions.x);\n    \n    //sample our video, and apply our mask\n    return texture(video,fract(uv)).rgb * (sq1*sq2);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //normalize our uv coordinates\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\n    //add the video triangles to our output color\n    vec3 col  = videoTriangle(uv, iChannel0, iChannelResolution[0].xy, 0.0);\n    \t col += videoTriangle(uv, iChannel1, iChannelResolution[1].xy, 1.0);\n       \t col += videoTriangle(uv, iChannel0, iChannelResolution[0].xy, 2.0);\n    \t col += videoTriangle(uv, iChannel1, iChannelResolution[1].xy, 3.0);\n    \n    //add a white border to the sides\n    if(sq(uv,.905)==0.)col=vec3(1);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}