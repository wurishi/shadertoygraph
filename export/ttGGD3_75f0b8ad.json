{"ver":"0.1","info":{"id":"ttGGD3","date":"1580037431","viewed":119,"name":"KIFS experiments 5","username":"rodgzilla","description":"Smooth extrusion using KIFS.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","kifs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define time iTime\n#define SPEED 20.\n\nfloat PI = acos(-1.);\n\nvec3 palette(float x) {\n  vec3 p = vec3(1, .5, 1);\n  vec3 q = vec3(.7, .6, 1);\n  vec3 r = vec3(.3, .6, .3);\n  vec3 s = vec3(.9, .5, .3);\n\n  return p + q * sin(2. * PI * (x * r + s));\n}\n\nmat2 rot2d(float a) {\n  float c = cos(a), s = sin(a);\n\n  return mat2(c, s, -s, c);\n}\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n  float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n  return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\nvec3 opSmoothUnion( vec3 d1, vec3 d2, float k ) {\n  vec3 h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n  return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\nvec3 kifs(vec3 p, float d, float s, float tf) {\n  float t = tf * time;\n\n  for (float i = 0.; i < d; i += 1.) {\n    p.xy *= rot2d(t + i);\n    p.xz *= rot2d(t * 0.6 - i);\n \tp = opSmoothUnion(p, -p, -1.);\n    p -= s;\n    s *= 0.7;\n  }\n\n  return p;\n}\n\nfloat map(vec3 p) {\n  float wave = .5 * sin(time) + .5;\n  float d = 100.;\n  vec3 psph = kifs(p, 3., 1., .5);\n  vec3 pextr = kifs(p, 3., 1. + .1 * wave, .6);\n    \n  float dsph = length(psph) - 1.;\n  float dextr = length(pextr + sin(time) * vec3(.5, 0., 0.)) - .9;\n  float dobj = opSmoothUnion(dsph, -dextr, -.1);\n  \n  d = min(d, dobj);\n\n  return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n\n  vec3 ro = vec3(0, 0, -20.);\n  vec3 rd = normalize(vec3(uv, 1));\n\n  float d = 0.;\n  int i;\n  for (i = 0; i < 100; i++) {\n    vec3 p = ro + d * rd;\n    float ds = map(p);\n\n    if (ds < 0.01 || ds > 100.) {\n      break;\n    }\n\n    d += ds * .5;\n  }\n  vec3 p = ro + d * rd;\n  vec2 e = vec2(0.01, 0);\n  vec3 n = normalize(map(p) - vec3(map(p - e.xyy), map(p - e.yxy), map(p - e.yyx)));\n  vec3 l = vec3(20., 20., -5.);\n//  l.xz *= rot2d(time / .1);\n  float dif = dot(n, normalize(l - p));\n\n  p.z = clamp(p.z, 0., 50.);\n  vec3 col = vec3(dif * palette(p.z / 1.));\n\n  fragColor = vec4(col, 1.);\n}\n","name":"Image","description":"","type":"image"}]}