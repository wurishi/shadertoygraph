{"ver":"0.1","info":{"id":"mlGczh","date":"1699936532","viewed":80,"name":"Yellow Buckeye Leaf","username":"Sublingual","description":"Drawing based on a yellow buckeye leaf I found, but not really a close match. Uses Inigo Quilez's voronoi function.","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["leaf","practice","drawing","nature"],"hasliked":0,"parentid":"mtdcW8","parentname":"trying for a leaf"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float RIB_COUNT=27.;\nconst float SPIKE_COUNT=100.;\n\nvec3 vein_col=vec3(0.502, 0.502, 0.149);\nvec3 inner_green=vec3(0.267, 0.345, 0.012);\nvec3 outer_yellow=vec3(0.95, 0.83, 0.18);\nvec3 mid_green=vec3(0.4,0.498,0.035);\nvec3 sat_green=vec3(0.31, 0.67, 0.03);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 mirror_uv=vec2(uv.x,abs(uv.y*2.-1.));\n    //Flip on X\n    mirror_uv.x=1.-mirror_uv.x;\n        \n    float curve_x=1.-pow(sin(mirror_uv.x*3.14)*(0.3+mirror_uv.x),1.5);\n    \n    float spikes=abs(fract(1.-mirror_uv.x*SPIKE_COUNT)-0.5+mirror_uv.y*2.)*(2.*curve_x);\n    spikes=mix(spikes,0.,curve_x);\n\n    float outline=mirror_uv.y*1.2-0.45+curve_x;\n\n    float hard_outline=clamp(step(outline+(0.1*spikes),0.5),0.,1.);\n    float hard_spikes=step(spikes,0.5);\n    \n    float ribs = abs(fract(((uv.x+(0.2*smoothstep(0.0,0.3,uv.x)))+(mirror_uv.y*(0.2+0.4*smoothstep(0.3,0.0,uv.x))))*RIB_COUNT)*2.-1.)*pow(mirror_uv.y,0.4)*1.5;\n    ribs=clamp(ribs,0.,1.);\n    \n    float vein=((-0.4+mirror_uv.y*50.)+mirror_uv.x);\n    vein=step(vein,0.5)-step(((0.44+mirror_uv.y*0.25)+mirror_uv.x),0.5);\n    \n    float adjusted_ribs=ribs*smoothstep(outline*2.,-1.,0.);\n    adjusted_ribs=clamp(adjusted_ribs,0.,1.);\n    \n    vein+=clamp(step(ribs,0.03)-(1.-hard_outline),0.,1.);\n    vein=clamp(vein,0.,1.);\n    \n    float drop_shadow=(smoothstep(0.0,0.65,outline)+0.)+smoothstep(0.93,1.,uv.x);\n    \n    vec2 v=voronoi(vec2(uv.x*1.92,uv.y)*100.,1.);\n    \n    vec3 col=vec3(0.);\n    \n    col=mix(vec3(0.),vec3(1.),drop_shadow);\n    \n    vec3 base_col=mix(inner_green, mid_green, ribs*v.x);\n\n    base_col=mix(base_col,outer_yellow,adjusted_ribs);\n    \n    \n    col=mix(col,base_col, hard_outline);\n    \n    col=mix(col,vein_col, vein);\n\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// The MIT License\n// Copyright Â© 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// https://www.youtube.com/c/InigoQuilez\n// https://iquilezles.org\n\n\n// Simplex Noise (http://en.wikipedia.org/wiki/Simplex_noise), a type of gradient noise\n// that uses N+1 vertices for random gradient interpolation instead of 2^N as in regular\n// latice based Gradient Noise.\n\n// All noise functions here:\n//\n// https://www.shadertoy.com/playlist/fXlXzf&from=0&num=12\n\n\n\nvec2 hash( vec2 p ) // replace this by something better\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\n\nfloat fractal_noise( vec2 uv ){\n    float f;\n    \n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n    f  = 0.5000*noise( uv ); uv = m*uv;\n    f += 0.2500*noise( uv ); uv = m*uv;\n    f += 0.1250*noise( uv ); uv = m*uv;\n    f += 0.0625*noise( uv ); uv = m*uv;\n    return f;\n\n}\n\nvec2 voronoi( in vec2 x, float random_seed )\n{\n    vec2 n = floor( x );\n    vec2 f = fract( x );\n\n\tvec3 m = vec3( 8.0 );\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2  g = vec2( float(i), float(j) );\n        vec2  o = hash( n + g );\n      //vec2  r = g - f + o;\n\t    vec2  r = g - f + (0.5+0.5*sin(random_seed+6.2831*o));\n\t\tfloat d = dot( r, r );\n        if( d<m.x )\n            m = vec3( d, o );\n    }\n\n    return vec2( sqrt(m.x), m.y+m.z );\n}\n","name":"Common","description":"","type":"common"}]}