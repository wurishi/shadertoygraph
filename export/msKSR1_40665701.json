{"ver":"0.1","info":{"id":"msKSR1","date":"1680737547","viewed":69,"name":"Pipe_Generation_v01","username":"Francois_Vrp","description":"Ray Marching test","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["pipegeneration"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// name = Pipe_Generator\n// version = 1.1\n// author = FrancoisVrp\n\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(r,h);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdTorus (vec3 p, vec2 t)\n{\n    vec2 q = vec2(length(p.xz)-t.x,p.y);\n    return length(q)-t.y;\n}\n\nvec3 Repeat(vec3 p, vec3 c)\n{\n\n    return mod(p+0.5*c,c)-0.5*c;\n}\n\nfloat map(vec3 pos)\n{\n    pos = Repeat(pos, vec3(5.0));\n    \n    // Volume.\n    float v = 0.0;\n    \n    v = sdCappedCylinder(pos, 10.0, 0.5);\n    \n    v = min(v,sdTorus (pos, vec2 (1.2, 0.25)));\n    return v;\n}\n\n// ro = ray origin\n// rd = ray direction\nfloat CastRay(vec3 ro, vec3 rd)\n{\n    // Contact.\n    float c = 0.0;\n    \n    for(int i=0; i<64; i++)\n    {\n        float ray = map(ro +rd *c);\n        \n        if(ray < (0.0001*c))\n        {\n            return float(i)/25.;\n            // return c;\n        }\n        \n        c += ray;\n    }\n    \n    return -1.0;\n}\n\nvec3 render(vec3 ro, vec3 rd)\n{\n    float contact = CastRay(ro, rd);\n    \n    vec3 col = vec3(0.0);\n    \n    // No contact or \n    if (contact == -1.0)\n    {\n        col = vec3(0.0, 0.0, 0.0);\n    }\n    else\n    {\n        col = vec3(1.0 - contact);\n    }\n    \n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Centered Screen and Orthographic Environment.\n    vec2 uv = 2.0 * fragCoord/iResolution.xy - 1.0;\n    uv.x*= iResolution.x/iResolution.y;\n    \n    // Camera.\n    float posX = 2.5;\n    float posZ = iTime;\n    vec3 cameraPos = vec3(posX, 0.0, 5.0+posZ);\n    vec3 cameraTarget = vec3(posX,0.0,posZ);\n    \n    // Setting direction camera vectors .\n    vec3 forward = normalize(cameraTarget - cameraPos);\n    vec3 right = normalize(cross(vec3(0.0, -1.0, 0.0), forward));\n    vec3 up = normalize(cross(right, forward));\n    \n    // Setting vector direction towards uv coordinates.\n    vec3 viewDir = normalize(uv.x * right + uv.y * up + forward);\n    \n\n    // Time varying pixel color\n    vec3 col = render(cameraPos, viewDir);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}