{"ver":"0.1","info":{"id":"NdBBzm","date":"1646198901","viewed":2142,"name":"Submerge","username":"Xor","description":"A shader experiment","likes":83,"published":1,"flags":40,"usePreview":0,"tags":["underwater"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Final blur + bloom\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 texel = 1.0 / iResolution.xy;\n    vec2 uv = fragCoord * texel;\n    vec4 blur = fibonacci_blur(iChannel2, uv, texel, 216.0);\n    vec4 tex0 = texture(iChannel0,uv)*0.5;\n    vec4 tex1 = texture(iChannel1,uv)*0.8;\n    vec4 tex2 = texture(iChannel2,uv);\n    \n\tfragColor = blur * TINT + tex0 + tex1 + tex2;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"///Render water\n#define MAX 100.\n#define EPS 4e-4\n\n//Classic pseudo-random hash\nfloat hash(vec2 p)\n{\n    return fract(sin(p.x*75.3 + p.y*94.2)*4952.);\n}\n//Bi-cubic value noise\nfloat value(vec2 p)\n{\n    vec2 f = floor(p);\n    vec2 s = p-f;\n    s *= s * (3.0 - 2.0 * s);\n    vec2 o = vec2(0, 1);\n    \n    return mix(mix(hash(f+o.xx),hash(f+o.yx),s.x),\n               mix(hash(f+o.xy),hash(f+o.yy),s.x),s.y);\n}\n//Approximate SDF from fractal value noise\nfloat dist(vec3 p)\n{\n    vec2 n = p.xz*0.6+1.0;\n    mat2 m = mat2(0.6754904, 0.7373688, -0.7373688, 0.6754904)*2.0;\n    float weight = 0.3;\n    float water = 0.0;\n    float speed = 0.3;\n    for(int i = 0; i<10; i++)\n    {\n        water += smoothstep(0.1, 0.9, value(n+speed*iTime)) * weight;\n        n *= m;\n        speed *= 1.3;\n        weight *= 0.45;\n    }\n    return (water+0.5-p.y);\n}\n//Compute normals from SDF derivative\nvec3 normal(vec3 p)\n{\n    vec2 e = vec2(4,-4)*EPS;\n    return normalize(dist(p+e.yxx)*e.yxx+dist(p+e.xyx)*e.xyx+\n                     dist(p+e.xxy)*e.xxy+dist(p+e.yyy)*e.yyy);\n}\n//Render water\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 ray = normalize(vec3(fragCoord*2.0 - iResolution.xy, iResolution.x));\n    ray.yz *= mat2(cos(0.5+vec4(0,11,33,0)));\n    vec3 pos = vec3(iTime*0.2,0,0);\n    vec4 mar = vec4(pos,0);\n    \n\n    for(int i = 0; i<50; i++)\n    {\n        float stp = dist(mar.xyz);\n        mar += vec4(ray, 1) * stp;\n        \n        if (stp<EPS || mar.w>MAX) break;\n    }\n    vec3 nor = normal(mar.xyz);\n    vec3 sun = normalize(vec3(0,-1,9));\n    vec3 ref = refract(ray, nor, 1.333);\n    float spec = exp(dot(ref, sun) * 9.0 - 9.0);\n    float fog = max(1.0 - mar.w/MAX, 0.0);\n\n    fragColor = vec4(sqrt(spec) * fog);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//Blur pass 1\nvoid mainImage( out vec4 fragColor, vec2 fragCoord)\n{\n    vec2 texel = 1.0 / iResolution.xy;\n    vec2 uv = fragCoord * texel;\n    vec4 blur = fibonacci_blur(iChannel0, uv, texel, 6.0);\n    fragColor = blur * TINT;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"//Blur functions\n\n#define SAMPLES 64.0\n#define TINT vec4(1.5, 1.2, 1, 1)\n\n\nvec2 hash2(vec2 p)\n{\n\treturn normalize(fract(cos(p*mat2(95,74,86,83))*3742.0)-0.5);\n}\n\nvec4 fibonacci_blur(sampler2D tex, vec2 uv, vec2 texel, float radius)\n{\n\tvec4 blur = vec4(0.0);\n\tfloat total = 0.0;\n\t\n\tfloat scale = radius/sqrt(SAMPLES);\n\tvec2 point = hash2(uv)*scale;\n\t\n\tfloat rad = 1.0;\n\tmat2 ang = mat2(-0.7373688, -0.6754904, 0.6754904,  -0.7373688);\n\t\n\tfor(float i = 0.0; i<SAMPLES; i++)\n\t{\n\t\tpoint *= ang;\n\t\trad += 1.0/rad;\n\t\t\n\t\tvec2 coord = uv + point*(rad-1.0)*texel;\n\t\tfloat weight = 1.0/(1.0+i);\n\t\tvec4 samp = texture(tex, coord);\n\t\t\n\t\tblur += samp * weight;\n\t\ttotal += weight;\n\t}\n\tblur /= total;\n\treturn blur;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"//Blur pass 2\nvoid mainImage( out vec4 fragColor, vec2 fragCoord)\n{\n    vec2 texel = 1.0 / iResolution.xy;\n    vec2 uv = fragCoord * texel;\n    vec4 blur = fibonacci_blur(iChannel1, uv, texel, -36.0);\n    fragColor = blur * TINT;\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"//Rumble\nfloat value(float p)\n{\n    float f = floor(p);\n    float s = p-f;\n    s *= s * (3.0 - 2.0 * s);\n    vec2 o = vec2(0, 1);\n    \n    return texture(iChannel0,vec2(f+s+0.5,0.5)/1024.).r-0.5;\n}\nvec2 mainSound( int samp, float time )\n{\n    return vec2(sin(time*280.0)*0.5+value(time*199.0))*0.4;\n}","name":"Sound","description":"","type":"sound"}]}