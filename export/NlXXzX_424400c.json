{"ver":"0.1","info":{"id":"NlXXzX","date":"1626145737","viewed":166,"name":"Lighting shader","username":"tuannt","description":"Light","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["shader","flash"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":" \n#ifdef GL_ES\nprecision lowp float;\n#endif\n// EVEN MORE MODS BY 27\n\n\n\n\n#ifdef GL_ES\nprecision lowp float;\n#endif\n\n\nuniform float time;\nuniform vec2 resolution;\n\n\nconst float count = 2.0;\n\n\nfloat Hash( vec2 p, in float s)\n{\n    vec3 p2 = vec3(p.xy,27.0 * abs(sin(s)));\n    return fract(sin(dot(p2,vec3(27.1,61.7, 12.4)))*273758.5453123);\n}\n\n\nfloat noise(in vec2 p, in float s)\n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    f *= f * (3.0-2.0*f);\n\n\n    return mix(mix(Hash(i + vec2(0.,0.), s), Hash(i + vec2(1.,0.), s),f.x),\n               mix(Hash(i + vec2(0.,1.), s), Hash(i + vec2(1.,1.), s),f.x),\n               f.y) * s;\n}\n\n\nfloat fbm(vec2 p)\n{\n     float v = 0.0;\n     //v += noise(p*1., 0.35);\n     //v += noise(p*2., 0.25);\n     v += noise(p*4., 0.125);\n     v += noise(p*8., 0.0625);\n     return v;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy * 2.0-1.0;\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    //fragColor = vec4(col,1.0);\n    \n  //  uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 finalColor = vec3( 0.0 );\n    for( float i=1.; i < count; ++i )\n    {\n        float t = abs(1.0 / ((uv.x + fbm( uv +iTime +iMouse.x)) * (i*50.0)));\n        finalColor +=  t * vec3( i * 0.075 + 0.9, 0.5, 2.0 );\n    }\n\n    fragColor = vec4( finalColor, 1.0 );\n   \n}","name":"Image","description":"","type":"image"}]}