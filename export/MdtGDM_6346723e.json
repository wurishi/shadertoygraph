{"ver":"0.1","info":{"id":"MdtGDM","date":"1450192050","viewed":1276,"name":"try raymarching","username":"candycat","description":"first try.","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"#define AA 1\n#define PRECIS 0.001\n#define DMAX 30.0\n#define EDGE_WIDTH 0.4\n#define EDGE_SMOOTH 0.1\n\nfloat hash(float n) {\n    return fract(sin(n)*43758.5453);\n}\n\n//=============\n\nfloat fSphere(vec3 p) {\n    return length(p) - 0.6;\n}\n\nfloat fBox(vec3 p, vec3 b) {\n  return length(max(abs(p)-b,0.0))-0.2;\n}\n\nfloat fCylinder(vec3 p, vec3 c) {\n  return length(p.xz-c.xy)-c.z;\n}\n\nfloat fTorus(vec3 p, vec2 t) {\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\n//=============\n\nvec3 rotx(vec3 p, float a)\n{\n    float s = sin(a), c = cos(a);\n    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\nvec3 roty(vec3 p, float a)\n{\n    float s = sin(a), c = cos(a);\n    return vec3(c*p.x + s*p.z, p.y, -s*p.x + c*p.z);\n}\n\nvec2 map(vec3 pos) {\n    vec3 id = floor((pos+2.0)/4.0);\n    float rid = hash(dot(id, vec3(0.1, 0.4, 0.9)))+0.5;\n    pos = mod( pos+2.0, 4.0)-2.0;\n    pos = rotx(pos, iTime * 0.5 + id.x * id.y * 1.7 + sin(iTime));\n    pos = roty(pos, iTime * 0.5 + id.y * id.z * 1.7 + cos(iTime));\n    return vec2(fBox(pos, vec3(0.3)), rid);\n    return vec2(fTorus(pos, vec2(0.3, 0.4)), rid);\n    //return vec2(fCylinder(pos, vec3(0.1, 0.1, 0.3)), rid);\n    //return vec2(fSphere(pos), rid);\n}\n\nvec3 normal(vec3 pos) {\n    vec2 eps = vec2(0.001, 0.0);\n    return normalize(vec3(\tmap(pos + eps.xyy).x - map(pos - eps.xyy).x,\n                    map(pos + eps.yxy).x - map(pos - eps.yxy).x,\n                         \tmap(pos + eps.yyx).x - map(pos - eps.yyx).x));\n}\n    \nvec2 render(vec3 ro, vec3 rd) {\n    float t = 0.0;\n    float id = -1.0;\n    float lastD = 0.0;\n    for (int i = 0; i < 50; i++) {\n       \tvec2 res = map(ro+t*rd);\n        t += res.x;\n        id = res.y;\n        if (res.x < PRECIS || t > DMAX) break; \n    }\n    \n    if (t > DMAX) id = -1.0;\n    \n    return vec2(t, id);\n}\n\nvec3 marching(vec3 ro, vec3 rd) {\n    vec3 light = normalize(vec3(0.6, 0.8, -0.3));\n    float sun = dot(-rd, light);\n    sun = 0.5 * sun + 0.5;\n    vec3 bg = vec3(0.65,0.45,0.4)*sun+vec3(0.2, 0.2, 0.3);\n    vec3 col = bg;\n    \n    vec2 res = render(ro, rd);\n    if (res.y > -0.5) {\n        // lighting\n        vec3 nor = normal(ro+res.x*rd);\n        vec3 view = -rd;\n        \n        vec3 amb = vec3(0.05);\n        \n        float dif = dot(nor, light);\n        dif = dif * 0.5 + 0.5;\n        \n        vec3 h = normalize(light - rd);\n        float spec = pow(clamp(dot(nor, h), 0.0, 1.0), 50.0) * 0.9;\n        \n        float edge = clamp(dot(nor, view), 0.0, 1.0);\n        edge = mix(0.0, 1.0, smoothstep(EDGE_WIDTH-EDGE_SMOOTH, EDGE_WIDTH, edge));\n        \n        vec3 scol = vec3(0.3+hash(res.y*0.2),0.3+hash(res.y*0.4),0.3+hash(res.y*0.6));\n        col = amb + (dif + spec) * scol * pow(sun, 0.2) * edge;\n    }\n    \n    col = mix(col, bg, smoothstep(10.0, DMAX, res.x));\n    return col;\n}\n\nvec3 rotrd(vec3 rd, vec2 mouse) {\n    rd = rotx(rd,sin(iTime*0.12+sin(iTime*.5)*1.)+mouse.x*5.0);\n    rd = roty(rd,sin(iTime*0.2)*0.5+mouse.y*5.0);\n    return rd;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord.xy / iResolution.xy;\n    p = -1.0 + 2.0 * p;\n    p.x *= iResolution.x/iResolution.y;\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    mouse = -1.0 * 2.0 * mouse;\n    \n    vec2 delta = vec2(1.0/iResolution.y, 0.0);\n    vec3 ro, rd;\n    vec3 col = vec3(0.0, 0.0, 0.0);\n    \n    ro = vec3(2.0, 2.0, 0.0) + iTime*2.0;\n    for (int i = -AA; i <= AA; i++) {\n        for (int j = -AA; j <= AA; j++) {\n            rd = normalize(vec3(p.xy+1.0/iResolution.y*vec2(i,j), 1.5));\n    \t\trd = rotrd(rd, mouse);\n    \t\tcol += marching(ro, rd);\n        }\n    }\n    col /= float((2*AA+1)*(2*AA+1));\n    \n    col *= clamp(1.0-length(p)*0.3,0.0,1.0);\n    \n    col = pow(col, vec3(0.4545));\n    \n\tfragColor = vec4(col,1.0);\n}","name":"","description":"","type":"image"}]}