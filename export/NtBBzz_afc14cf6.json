{"ver":"0.1","info":{"id":"NtBBzz","date":"1651947301","viewed":273,"name":"Pixel sorting Jordi","username":"sp33s","description":"First attempt at writing as pixel sorting shader","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["pixel","sort","pixelsorting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 color = texture(iChannel0, uv);\n    //color = texture(iChannel1, uv);\n\n    fragColor = color;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float getLuminosity(vec4 color)\n{\n    return 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n}\n\nvec4 getPixelColor(vec2 currentUV, float horizontalOffset, sampler2D channel)\n{\n    float texel = 1.0 / iResolution.x;\n    vec2 offsetUV = vec2(texel * horizontalOffset, 0.0);\n    return texture(channel, currentUV + offsetUV);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float x = floor(fragCoord.x);\n    vec2 uv = fragCoord / iResolution.xy;\n    float texel = 1.0 / iResolution.x;\n    \n    vec4 color = vec4(0);\n    if (iFrame < 60)\n    {\n        color = texture(iChannel0, uv);\n    }\n    else\n    {\n        color = texture(iChannel1, uv);\n    \n        bool swapWithRight = mod(x, 2.0) == 0.0;\n        bool evenFrame = mod(float(iFrame), 2.0) == 0.0;\n\n        if (!evenFrame)\n            swapWithRight = !swapWithRight;\n\n        float offset = swapWithRight ? 1.0 : -1.0;\n        vec4 neighborColor = getPixelColor(uv, offset, iChannel1);\n\n        bool inThreshold = texture(iChannel2, uv) == vec4(1, 1, 1, 1);\n        bool neighborInThreshold = getPixelColor(uv, offset, iChannel2) == vec4(1, 1, 1, 1);\n\n        if (inThreshold && neighborInThreshold)\n        {\n\n            if (\n                (swapWithRight && getLuminosity(neighborColor) < getLuminosity(color)) ||\n                (!swapWithRight && getLuminosity(neighborColor) >= getLuminosity(color))\n            )\n            {\n                color = neighborColor;\n            }\n        }\n    }\n\n    fragColor = color;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"float getLuminosity(vec4 color)\n{\n    return 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 sampledColor = texture(iChannel0, uv);\n    vec3 color = vec3(1);\n    float lumThreshold = 0.3;\n    \n    if (getLuminosity(sampledColor) > lumThreshold)\n        color = vec3(1);\n    else\n        color = vec3(0);\n\n    fragColor = vec4(color, 1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}