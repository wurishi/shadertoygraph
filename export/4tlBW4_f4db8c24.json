{"ver":"0.1","info":{"id":"4tlBW4","date":"1511874898","viewed":112,"name":"Blobby model: 2d case","username":"tale3d","description":"Shape modelling, topic \"Implicit curves and surfaces\", part 2: blobby model (2D case). \nThis example shows a blobby model with 3 skeleton points. As in previous example, we only visualise the surface of the object by using proximity to 0.   ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["curve","implicit","teachingmaterial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//defining a blob with three points\nfloat blob3(in vec2 position, in vec2 p1, in vec2 p2, in vec2 p3)\n{\n    float time = 0.5+0.5*sin(iTime);\n\n\n    float a1 = 2.0, a2 = 2.0, a3 = 2.0; //parameters A for each skeletal element\n    float b1 = 2.0, b2 = 2.0, b3 = 2.0; //parameters B for each skeletal element\n    float T = 1.0; //threshold value\n    \n    float r1 = dot(position-p1, position-p1); //the same as (position.x-p1.x)*(position1.x-p1.x) + (position.y-p1.y)*(position1.y-p1.y)...\n    float r2 = dot(position-p2, position-p2);\n    float r3 = dot(position-p3, position-p3);\n\n    return b1*exp(-a1*r1)+b2*exp(-a2*r2)+b3*exp(-a3*r3)-T; //sum of fields minus threshold\n}\n\n//defining a simple primitive - circle\nfloat circle(in vec2 position, in vec2 centre, in float radius)\n{\n    vec2 pc = position-centre;\n    return pc.x*pc.x + pc.y*pc.y - radius*radius;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    //taking fragment coordinates, range [0,1]\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n    //map fragment coordinates to [-1,1]\n    vec2 c = 2.0 * uv - 1.0;\n    \n\t//time mapped to [0,1]- not used at the moment\n\tfloat time = 0.5+0.5*sin(iTime);\n\n    //adjust coordinates given an aspect ratio\n    float aspect_ratio = iResolution.x/iResolution.y;\n    c.x *= aspect_ratio;\n\n    //blob skeleton points positions, those will be time-dependent to create an animation\n    vec2 p1 = vec2(0.5+time, 0.0);\n    vec2 p2 = vec2(0.0, 0.5-time);\n    vec2 p3 = vec2(0.2+0.5*time, 0.2);\n\n    //background colour by default\n    vec3 colour = vec3(1.0, 1.0, 1.0);\n    \n    //find the value of blobby function\n    float blob_function = blob3(c,p1,p2,p3); \n    float thickness = 0.01; //note that thickness is not in geometric sense, but in the function value\n    \n    if (abs(blob_function) < thickness) colour = vec3(0.0,0.0,0.0);\n    \n    //visualise blobby model skeleton points by drawing very small circles\n    float small_radius = 0.001;\n    float small_thickness = 0.001;\n    if (abs(circle(c, p1, small_radius)) < small_thickness) colour = vec3(1.0,0.0,0.0); // first is red \n    if (abs(circle(c, p2, small_radius)) < small_thickness) colour = vec3(0.0,1.0,0.0); // second is green\n    if (abs(circle(c, p3, small_radius)) < small_thickness) colour = vec3(0.0,0.0,1.0); // third is blue\n        \n\tfragColor = vec4(colour,1.0);\n}\n\n\n","name":"Image","description":"","type":"image"}]}