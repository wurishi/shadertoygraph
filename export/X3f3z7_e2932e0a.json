{"ver":"0.1","info":{"id":"X3f3z7","date":"1707249648","viewed":70,"name":"Ridge Noise","username":"nibu","description":"Ridge fbm noise shader","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","noise","fbm","ridge"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SCALE 10.0\n#define OCTAVES 8\n#define AMPLITUDE 1.0\n#define LACUNARITY 0.5\n\n//float random(in vec2 st) {\n//    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\n//}\n\n// from https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 p) {\n  vec3 p3  = fract(vec3(p.xyx) * .1031);\n  p3 += dot(p3, p3.yzx + 33.33);\n  return fract((p3.x + p3.y) * p3.z);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise(in vec2 st) {\n  vec2 i = floor(st);\n  vec2 f = fract(st);\n\n  // Four corners in 2D of a tile\n  float a = hash12(i);\n  float b = hash12(i + vec2(1.0, 0.0));\n  float c = hash12(i + vec2(0.0, 1.0));\n  float d = hash12(i + vec2(1.0, 1.0));\n\n  vec2 u = f * f * (3.0 - 2.0 * f);\n\n  return mix(a, b, u.x) +\n    (c - a)* u.y * (1.0 - u.x) +\n    (d - b) * u.x * u.y;\n}\n\nfloat snoise(in vec2 st) {\n  return noise(st) * 2.0 - 1.0;\n}\n\nfloat fbm (in vec2 st) {\n  // Initial values\n  float value = 0.0;\n  float amplitude = AMPLITUDE;\n  float frequency = 0.;\n  // Loop of octaves\n  for (int i = 0; i < OCTAVES; i++) {\n      value += amplitude * snoise(st);\n      st *= 2.;\n      amplitude *= LACUNARITY;\n  }\n  value = 1.0 - abs(value);\n  //value = value * value;\n  return value;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 st = fragCoord.xy / iResolution.xy;\n  st.x *= iResolution.x / iResolution.y;\n  //st.x += sin(iTime / 5.0);\n  //st.y += cos(iTime / 5.0);\n\n  vec3 color = vec3(0.0);\n  color += fbm(st * SCALE);\n\n  fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}