{"ver":"0.1","info":{"id":"MlfXzl","date":"1438871641","viewed":475,"name":"raycaster2d","username":"wiped1","description":"2D Raycaster port, based on lodev.org raycaster tutorial (http://lodev.org/cgtutor/raycasting.html). Mouse+MLB to move","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["wolfenstein","raycaster"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"#define MAP_WIDTH 5\n#define MAP_HEIGHT 7\n#define MAP_LENGTH MAP_WIDTH*MAP_HEIGHT\n\nprecision highp float;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float map[MAP_LENGTH];\n    map[ 0] = 1.0; map[ 1] = 1.0; map[ 2] = 1.0; map[ 3] = 1.0; map[ 4] = 1.0;\n    map[ 5] = 0.0; map[ 6] = 0.0; map[ 7] = 0.0; map[ 8] = 1.0; map[ 9] = 1.0;\n    map[10] = 0.0; map[11] = 0.0; map[12] = 0.0; map[13] = 0.0; map[14] = 0.0;\n    map[15] = 0.0; map[16] = 2.0; map[17] = 0.0; map[18] = 2.0; map[19] = 0.0;\n    map[20] = 0.0; map[21] = 0.0; map[22] = 0.0; map[23] = 0.0; map[24] = 0.0;\n    map[25] = 0.0; map[26] = 0.0; map[27] = 0.0; map[28] = 1.0; map[29] = 1.0;\n    map[30] = 1.0; map[31] = 1.0; map[32] = 1.0; map[33] = 1.0; map[34] = 1.0;\n    \n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    /* camera position in map dimensions */\n    vec2 camPos = vec2(\n        float(MAP_WIDTH)  * (iMouse.x / iResolution.x),\n        float(MAP_HEIGHT) * (iMouse.y / iResolution.y)\n    );\n    /* camera pointing forward (looking from top-down view) */\n    vec2 camDir = vec2(0.0, 1.0);\n    /* rotation matrix used to rotate camDir by 90 degrees clockwise */\n    mat2 rotationMatrix = mat2(0, -1, 1, 0);\n    //vec2 camDir = vec2(0.0, 1.0) * \n        \t//mat2(cos(iDate.w), -sin(iDate.w), sin(iDate.w), cos(iDate.w));\n    /* camera plane location */\n    vec2 planeDist = camPos + camDir;\n    //vec2 planeDir = camDir * rotationMatrix;\n    vec2 planeDir = camDir * rotationMatrix;\n\t\n    vec2 rayPos = camPos;\n    float camX = 2.0 * uv.x - 1.0;\n    /* rayDir specifies point at camera plane,\n     * that's multipied by camX which ranges from [-1, 1] */\n    vec2 rayDir = camDir + planeDir * camX;\n    \n    /* current point on map grid */\n\tint curMapGridX = int(rayPos.x);\n    int curMapGridY = int(rayPos.y);\n    \n  \t//length of ray from current position to next x or y-side\n    float sideDistX;\n    float sideDistY;\n    \n    //length of ray from one x or y-side to next x or y-side\n    float deltaDistX = sqrt(1.0 + (rayDir.y * rayDir.y) / (rayDir.x * rayDir.x));\n    float deltaDistY = sqrt(1.0 + (rayDir.x * rayDir.x) / (rayDir.y * rayDir.y));\n    float perpWallDist;\n    \n    //what direction to step in x or y-direction (either +1 or -1)\n    int stepX;\n    int stepY;\n    \n    //calculate step and initial sideDist\n    if (rayDir.x < 0.0) {\n        stepX = -1;\n        sideDistX = (rayPos.x - float(curMapGridX)) * deltaDistX;\n    } else {\n        stepX = 1;\n        sideDistX = (float(curMapGridX) + 1.0 - rayPos.x) * deltaDistX;\n    } if (rayDir.y < 0.0) {\n        stepY = -1;\n        sideDistY = (rayPos.y - float(curMapGridY)) * deltaDistY;\n    } else {\n        stepY = 1;\n        sideDistY = (float(curMapGridY) + 1.0 - rayPos.y) * deltaDistY;\n    }\n    \n    int wallColor;\n    int hit = 0; //was there a wall hit?\n    int side; //was a NS or a EW wall hit?\n    \n    //perform DDA\n    /* number specifies how far will the ray be checked against walls */\n    for (int i = 0; i < 50; i++)\n    {\n        if (hit == 1) {\n            break;    \n        }\n        //jump to next map square, OR in x-direction, OR in y-direction\n        if (sideDistX < sideDistY)\n        {\n            sideDistX += deltaDistX;\n            curMapGridX += stepX;\n            side = 0;\n        }\n        else\n        {\n            sideDistY += deltaDistY;\n            curMapGridY += stepY;\n            side = 1;\n        }\n        \n        int index = curMapGridX * MAP_WIDTH + curMapGridY;\n        //Check if ray has hit a wall\n        /* workaround because glsl doesn't support variable array access */\n        for (int x = 0; x < MAP_WIDTH * MAP_HEIGHT; x++) {\n            if (index == x) {\n                if (map[x] > 0.0) {\n                    hit = 1;\n                    wallColor = int(map[x]);\n                }\n            }\n        }\n    } \n    \n    //Calculate distance projected on camera direction (oblique distance will give fisheye effect!)\n    if (side == 0) {\n        perpWallDist = abs((float(curMapGridX) - rayPos.x + (1.0 - float(stepX)) / 2.0) / rayDir.x);\n    } else {\n        perpWallDist = abs((float(curMapGridY) - rayPos.y + (1.0 - float(stepY)) / 2.0) / rayDir.y);\n    }\n    \n    float h = iResolution.y;\n    //Calculate height of line to draw on screen\n    float lineHeight = abs(h / perpWallDist);\n\n    //calculate lowest and highest pixel to fill in current stripe\n    float drawStart = -lineHeight / 2.0 + h / 2.0;\n    if (drawStart < 0.0) { \n        drawStart = 0.0; \n    }\n    float drawEnd = lineHeight / 2.0 + h / 2.0;\n    if (drawEnd >= h) { \n        drawEnd = h - 1.0; \n    }\n\n    //choose wall color\n    vec4 color;\n    if (wallColor == 1) {\n    \tcolor = vec4(1.0, 0.0, 0.0, 1.0); //red\n    } else if (wallColor == 2) {\n        color = vec4(0.0, 1.0, 0.0, 1.0); //green\n    } else if (wallColor == 3) {\n        color = vec4(0.0, 0.0, 1.0, 1.0); //blue\n    } else if (wallColor == 4) {\n        color = vec4(1.0, 1.0, 1.0, 1.0); //white\n    } else {\n        color = vec4(0.0, 0.0, 0.0, 1.0); //black\n    }\n\n    //give x and y sides different brightness\n    if (side == 1) {color = color / 2.0;}\n    \n    if (fragCoord.y <= drawEnd && fragCoord.y >= drawStart) {\n        fragColor = color;\n    } else {\n     \tfragColor = vec4(0.0, 0.0, 0.0, 1.0);   \n    }\n    \n\t//fragColor = vec4(uv, 0.0, 1.0);\n}","name":"","description":"","type":"image"}]}