{"ver":"0.1","info":{"id":"Ds23z3","date":"1667956581","viewed":163,"name":"another perspective","username":"lomateron","description":"looks like this perspective has lots of potential\nlike the previously posted binary simulations\nbut now smooth simulations of many dimensions\nsimulations that depend on the shape of the X dimension vector field","likes":7,"published":3,"flags":32,"usePreview":0,"tags":["wave"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 u    = fragCoord/iResolution.xy;\n         u.x *= 128./iResolution.x;\n    vec4 C = texture(iChannel0, u);\n    vec4 b = u.y*vec4(8.)-vec4(1.,3.,5.,7.);\n\n    fragColor = vec4(+float(b.x<C.x && b.x>0.)\n                     +float(b.x>C.x && b.x<0.)\n                     +float(b.y<C.y && b.y>0.)\n                     +float(b.y>C.y && b.y<0.)\n                     +float(b.z<C.z && b.z>0.)\n                     +float(b.z>C.z && b.z<0.)\n                     +float(b.w<C.w && b.w>0.)\n                     +float(b.w>C.w && b.w<0.));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float pi = 3.14159265359;\nvec2 vField(vec2 p, float x)\n{\n    //vector field moves input p\n    //vector field in 2D space with 2D vectors\n    //vector field rotates around center\n    //vector field rotation center moves depending on x\n    p.x -= x;\n    vec2 v = p.yx*vec2(-1,1);//calculate vector field\n    p += v*.25;\n    p.x += x;\n    return p;\n}\nvoid mainImage( out vec4 fragColor, in vec2 u )\n{\n    vec2 m = vec2(128.,iResolution.y);\n    vec4 C = texture(iChannel0, mod(u+vec2(0,0),m)/iResolution.xy);//center pixel\n    vec4 R = texture(iChannel0, mod(u+vec2(1,0),m)/iResolution.xy);//right  pixel\n    vec4 L = texture(iChannel0, mod(u-vec2(1,0),m)/iResolution.xy);//left   pixel\n  //C.xy = vField(C.xy                        , L.x*.5+R.x*.5);    //high frequencies get big fast\n    C.xy = vField(C.xy*.97+L.xy*.015+R.xy*.015, L.x*.5+R.x*.5);    //blur damps high frequencies\n    if(iFrame==0) C = exp(-pow((u.x-64.)*.2,2.))*vec4(1,0,0,0);\n    fragColor = C;\n}","name":"Buffer A","description":"","type":"buffer"}]}