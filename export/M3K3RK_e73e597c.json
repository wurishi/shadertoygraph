{"ver":"0.1","info":{"id":"M3K3RK","date":"1717939130","viewed":80,"name":"O(1) Bayer Matrix","username":"MartyMcFly","description":"Loopless and recursionless direct bayer matrix calculator, evaluating the matrix at any size at constant cost.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["dither","algorithm","bayer"],"hasliked":0,"parentid":"XtV3RG","parentname":"Bayer Matrix Generator"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2024 Pascal Gilcher\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n//\n// This new method calculates the bayer matrix without recursion or loops,\n// in a single, self contained estimator, for O(1) complexity\n//\n// The output is tilable and supports every size up to the maximum of 2^16 x 2^16\n//\n// Note: Above 4 levels requires floating point textures to store the result\n//\n\n#define MAX_LEVEL 5\n\nfloat direct_bayer(uvec2 p, uint level)\n{\n    //first, spread bits\n    p = (p ^ (p << 8)) & 0x00ff00ffu;\n    p = (p ^ (p << 4)) & 0x0f0f0f0fu;\n    p = (p ^ (p << 2)) & 0x33333333u;\n    p = (p ^ (p << 1)) & 0x55555555u; \n    \n    //interleave with bayer bit order\n    uint i = (p.x ^ p.y) | (p.x << 1u);    \n    \n    //reverse bits (single op on HLSL (the superior shading language)\n    i = ((i & 0xaaaaaaaau) >> 1) | ((i & 0x55555555u) << 1);\n    i = ((i & 0xccccccccu) >> 2) | ((i & 0x33333333u) << 2);\n    i = ((i & 0xf0f0f0f0u) >> 4) | ((i & 0x0f0f0f0fu) << 4);\n    i = ((i & 0xff00ff00u) >> 8) | ((i & 0x00ff00ffu) << 8);\n    i = (i >> 16) | (i << 16);\n    \n    //shave off unused bits and normalize \n    return float(i >> (32u - (2u * level))) / float(1 << (2u * level));\n}\n\nvoid mainImage( out vec4 o, in vec2 p )\n{   \n    //making it fancy, ignore\n    vec2 uv = p / iResolution.xy;\n    uv = uv * 2.0 - 1.0;   \n    \n    float r = max(0.0, 1.0 - dot(uv, uv) * 0.3);   \n    o = vec4(r);   \n     \n    uv.x *= iResolution.x / iResolution.y;\n    uv *= 1.2;\n    \n    float fade = max(abs(uv.x), abs(uv.y)) - 1.0;\n    \n    o *= fade / (0.005 + fade);\n    if(max(abs(uv.x), abs(uv.y)) > 1.0) return; \n    \n    uv = uv * 0.5 + 0.5;\n    uv = floor(uv*exp2(float(MAX_LEVEL))); \n    o = vec4(direct_bayer(uvec2(uv), uint(MAX_LEVEL)));\n    \n    if(length(iMouse.xy) > 1.0)\n    {\n        o *= step(o.x, iMouse.x / iResolution.x*2.0-0.5);\n    }    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//there are no easter eggs down here, go away","name":"Image","description":"","type":"image"}]}