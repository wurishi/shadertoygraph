{"ver":"0.1","info":{"id":"4d3Bzr","date":"1523917664","viewed":241,"name":"Lucid Dream-preview not working","username":"epicycle","description":"Some visualization of Lucid Dream by Billboard. \n\nSome colorized/stretched FFT fed into: https://www.shadertoy.com/view/ldycRt","likes":10,"published":1,"flags":64,"usePreview":0,"tags":["fft","triangles","kaleidoscope","visualizer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"ldSXzy","filepath":"https://soundcloud.com/billboardmatt/lucid-dream","previewfilepath":"https://soundcloud.com/billboardmatt/lucid-dream","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nmat2 rot(float r) {\n    return mat2(cos(r), sin(r), -sin(r), cos(r));\n}\n\nfloat getAmp(float uvx) {\n     float scale = 1000.0;\n    float normal = 1.0 + max(0.0, (uvx - .25)) * 0.8;\n    float x = pow(scale, uvx - 1.0);\n    x = floor(x * iChannelResolution[0].x) / iChannelResolution[0].x;\n    float amp = texture(iChannel0, vec2(x, 0.0)).r * normal;\n    return pow(amp, 4.0);\n}\n\nvec4 getColor(float uvx) {\n    float amp = getAmp(uvx);\n    \n    \n    vec4 color = vec4(amp);\n    color.a = 1.0;\n    \n    // Output to screen\n    \n    vec4 primaryColor = mix(\n        vec4(1.0, 0.0, 0.4, 1.0),\n        vec4(0.0, 1.0, 0.7, 1.0),\n        pow(1. - texture(iChannel0, vec2(0.05, 0.0)).r, 3.0));\n    vec4 secondaryColor = mix(\n        vec4(0.0, 1.0, 0.0, 1.0),\n        vec4(0.0, 0.5, 1.0, 1.0),\n        texture(iChannel0, vec2(0.05, 0.0)).r);\n    \n    return mix(primaryColor, secondaryColor, uvx) * amp;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scale = 1.0 / 3.5;// - iTime / 100.0;; // triangle length\n                             // as fraction of viewport height\n    \n    \n    //scale = 1.0 / (4.0 + 2.0 * sin(iTime / 5.0));\n    \n    \n    float tHeight = scale * sqrt(3.0) / 2.0;\n    float tCenterToBase = scale * 0.5 * tan(PI / 6.0);\n    float tRadius = tHeight - tCenterToBase;\n    \n    // Aspect-normalized pixel coordinates (from 0 to 1 for y axis)\n    vec2 R = iResolution.xy,\n        uv = fragCoord / R.y;\n    \n    uv -= vec2(0.5 * R.x / R.y, 0.5);\n    \n    uv.x += 0.03 * sin(iTime * 100000.0) * pow(getAmp(0.1), 4.0);\n    \n    uv *= rot(iTime / 50.0);\n    \n    //uv.x += tHeight;\n    \n    // Repeat triangles\n    vec2 Repeat = vec2(tHeight, scale),\n        Index = uv / Repeat;\n    uv = mod(uv, Repeat);\n    \n    // Flip every column\n    uv.x = mod(Index.x, 2.0) > 1.0 ? uv.x : tHeight - uv.x;\n    \n    // normalize texture coordinates\n   \tuv /= scale;\n    \n    // reflect\n    float tAngle = radians(60.0);\n    vec2 angleVec = vec2(cos(-tAngle), sin(-tAngle));\n    float dAngleBottom = dot(uv, angleVec);\n    vec2 bottomReflect = uv - dAngleBottom * 2.0 * angleVec;\n    uv = dAngleBottom > 0. ? bottomReflect : uv;\n    \n    vec2 angleVecReflected = vec2(angleVec.x, -angleVec.y);\n    float dAngleTop = dot(uv - vec2(0.0, 1.0), angleVecReflected);\n    vec2 topReflect = uv - dAngleTop * 2.0 *  angleVecReflected;\n    uv = dAngleTop > 0.0 ? topReflect : uv;\n    \n    // adjust texture\n    float theta = floor(Index.y) * 2.0 * PI / 3.0 + PI / 2.0;\n    uv -= vec2(tCenterToBase / scale, 0.5);\n    uv *= rot(theta);\n    uv /= (2.0 * tRadius) / scale;\n    uv += 0.5;\n    \n    vec4 tColor = getColor(uv.x);\n    vec2 cuv = fragCoord/R;\n    //tColor = vec4(cuv.x, 0.35 + 0.25 * sin(iTime + cuv.y), 1.0 - cuv.x, 1.0) - tColor.r;\n    fragColor = tColor;\n    //fragColor = getColor(fragCoord.x / iResolution.x);\n}","name":"Image","description":"","type":"image"}]}