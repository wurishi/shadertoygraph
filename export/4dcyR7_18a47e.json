{"ver":"0.1","info":{"id":"4dcyR7","date":"1586638075","viewed":70,"name":"Speedy Spin - nmaga","username":"nmaga23","description":"Speedy Spin for CIS566","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["spin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat bias( in float t, in float b) {\n    return (t / ((((1.0 / b) - 2.0) * (1.0 - t)) + 1.0));\n}\n\nfloat gain( in float t, in float g ) {\n\treturn t < 0.5 ? (bias(t * 2.0, g) * 0.5) : (0.5 + bias(t * 2.0 - 1.0, 1.0 - g) * 0.5);\n}\n\n// IQ\nvec3 palette(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d)\n{\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\tvec2 pt = 2.0 * uv - 1.0;\n    float aspect = iResolution.x/iResolution.y;\n    pt.x *= aspect;\n    \n    vec3 accumCol = vec3(0.0);\n    float numSteps = 30.0;\n    \n    vec3 ac = vec3(0.5);\n    vec3 bc = vec3(0.5);\n    vec3 cc = vec3(1.0);\n    vec3 dc = vec3(0.0, 0.333, 0.667);\n    \n    // 30 samples of motion blur\n    for (int i = 0; i < 30; ++i){\n    \tfloat delta = (float(i) / (numSteps - 1.0) - 0.5) * .18;\n        float time = 2.75 * iTime - delta;\n        \n        vec2 pos = pt;\n        \n        // rectangular motion from circular motion\n        float sx = 0.5 + 0.5 * sin(3.14159 * time);\n    \t//sx = gain(sx, 0.1);\n    \t//sx = smoothstep(0.0, 1.0, sx);\n        float sy = 0.5 + 0.5 * cos(3.14159 * time);\n        //sy = gain(sy, 0.1);\n        //sy = smoothstep(0.0, 1.0, sy);\n        \n         // base pauses then animates, used for color and rotation\n        float rotationBase = floor(0.5 * time) + max(0.0, 8.0 * fract(0.5 * time) - 7.0); \n        float rotationTime = 0.875 * rotationBase * 2.0 * 3.1415962;\n        //rotationTime = 0.0;\n        float ct = cos(rotationTime);\n        float st = sin(rotationTime);\n\n        float scaleX = abs(sin(2.0 * 3.1415962 * time));\n        //scaleX = smoothstep(0.0, 1.0, scaleX);\n\n        // apply all transformations\n        //pos = vec2(ct * pt.x - st * pt.y, ct * pt.y + st * pt.x);\n        //pos.x /= 2.0;\n        pos -= 0.5 * vec2(sx, sy) - 0.25;\n        //pos.x *= 2.0;\n        //pos /= 0.75 + 0.5 * scaleX;\n        \n        \n        // pulse effect at end of rotation\n        float pulse = 0.5 + 0.5 * sin((time + 0.4) * 3.14159);\n        pulse = bias(pulse, 0.009);\n        //pos /= 1.0 + 1.0 * pulse;\n        float cp = cos(-0.25 * pulse * 3.1415962);\n        float sp = sin(-0.25 * pulse * 3.1415962);\n        //pos = vec2(cp * pos.x - sp * pos.y, cp * pos.y + sp * pos.x);\n        \n        accumCol +=  2.0 * step(length(pos) - 0.01, 0.05) / numSteps;\n    }\n    \n    vec3 col = vec3(0.0);\n\t\n    col = accumCol;\n    // gamma correct to improve visibility\n    col = pow(col, vec3(0.454545454545454545));\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}