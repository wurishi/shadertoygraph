{"ver":"0.1","info":{"id":"MttGD2","date":"1471848710","viewed":325,"name":"a cauliflower","username":"saharan","description":"looks delicious!","likes":18,"published":1,"flags":0,"usePreview":0,"tags":["3d","fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 dist(vec3 z) {\n    float r;\n    float time = iTime;\n    float ang = 2.0 * 3.14159265358979 / (24.0 + sin(time * 0.7 + z.y * 0.4) * 16.0);\n    float s = sin(ang);\n    float c = cos(ang);\n    float ang2 = 2.0 * 3.14159265358979 / (22.0 + cos(time * 0.9 + z.z * 0.7) * 16.0);\n    float s2 = sin(ang2);\n    float c2 = cos(ang2);\n    float distAcc = 0.0;\n    float offsetX = sin(time * 0.2) * 0.5;\n    for (int n = 0; n < 12; n++) {\n        if(z.x+z.y<0.0) z.xy = -z.yx;\n        if(z.x+z.z<0.0) z.xz = -z.zx;\n        if(z.y+z.z<0.0) z.zy = -z.yz;\n\n        distAcc += length(z) * pow(2.0, -float(n + 1));\n\n        if (length(z) > 8.0) {\n            return vec2((length(z) - 1.0) * pow(2.0, -float(n + 1)), distAcc);\n        }\n\n        z = vec3(\n            z.x * c - z.z * s,\n            z.y,\n            z.x * s + z.z * c\n        );\n\n        z = z * 2.0 - vec3(1, 1, 1);\n        z.xyz = z.xzy;\n\n        z = vec3(\n            z.x * c2 - z.y * s2,\n            z.x * s2 + z.y * c2,\n            z.z\n        );\n        z.x += offsetX;\n    }\n    return vec2((length(z) - 1.0) * pow(2.0, -12.0), distAcc);\n}\n\nvec3 estimateNormal(vec3 p) {\n    float eps = 0.00001;\n    float base = dist(p).x;\n    return normalize(vec3(\n        dist(p + vec3(eps, 0.0, 0.0)).x - base,\n        dist(p + vec3(0.0, eps, 0.0)).x - base,\n        dist(p + vec3(0.0, 0.0, eps)).x - base\n    ));\n}\n\nvec3 colorGen(vec3 base, vec3 amplitude, vec3 frequency, vec3 shift, float t) {\n    return base + amplitude * cos(6.283185 * (frequency * t + shift));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 screenPos = (fragCoord - iResolution.xy * 0.5) / min(iResolution.x, iResolution.y);\n    float screenZ = 0.6;\n    vec3 rayDir = normalize(vec3(screenPos, screenZ));\n    vec3 rayPos = vec3(0, 0, -2);\n\n    float time = iTime;\n    float ang = time * 0.08 + iMouse.x / iResolution.x * 10.0;\n    float s = sin(ang);\n    float c = cos(ang);\n    rayDir = vec3(\n        rayDir.x * c - rayDir.z * s,\n        rayDir.y,\n        rayDir.x * s + rayDir.z * c\n    );\n    rayPos = vec3(\n        rayPos.x * c - rayPos.z * s,\n        rayPos.y,\n        rayPos.x * s + rayPos.z * c\n    );\n\n    if (dist(rayPos).x < 0.0) {\n        fragColor = vec4(1.0, 1.0, 1.0, 1.0);\n        return;\n    }\n\n    vec3 color = vec3(0.0, 0.0, 0.0);\n    float totalDist = 0.0;\n    float hit = 0.0;\n    float minDist = 1000000.0;\n\n    for (int i = 0; i < 64; i++) {\n        float d = dist(rayPos).x;\n        minDist = min(d, minDist);\n        rayPos += rayDir * d;\n        totalDist += d;\n        if (d < 0.01) {\n            color = vec3(1.0, 1.0, 1.0) / (1.0 + totalDist * 0.0);\n            hit = 1.0;\n            break;\n        }\n    }\n    if (hit > 0.5) {\n        vec3 normal = estimateNormal(rayPos);\n        vec3 lightDir = normalize(vec3(1.0, -1.0, 2.0));\n        lightDir = vec3(\n            lightDir.x * c - lightDir.z * s,\n            lightDir.y,\n            lightDir.x * s + lightDir.z * c\n        );\n        float ambient = 0.2;\n        float diffuse = 0.8;\n        float brightness = max(-dot(lightDir, normal), 0.0) * diffuse + ambient;\n        float r = dist(rayPos).y;\n        color = colorGen(vec3(0.6, 0.4, 0.6), vec3(0.6, 0.6, 0.4), vec3(1.5, 0.9, 0.2), vec3(0.7, 0.3, 0.25), 1.0 - r) * brightness;\n    } else {\n        color = colorGen(vec3(0.5), vec3(0.5), vec3(0.7, 0.2, 0.5), vec3(0.4, 0.3, 0.4), minDist * 2.0);\n    }\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}