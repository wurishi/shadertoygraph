{"ver":"0.1","info":{"id":"lltSzS","date":"1480456087","viewed":302,"name":"x-derivative - one pass","username":"yduf","description":"use linear interpolation to compute smooth gaussian derivative in one pass with 4 texture read","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["gaussianblur"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 2 pass - gaussian blur\n// as describe in first part of\n// http://rastergrid.com/blog/2010/09/efficient-gaussian-blur-with-linear-sampling/comment-page-1/#comments\n\n\n// dx\n\nvoid dx_blur( out vec4 fragColor, in vec2 fragCoord )\n{  \n    float sum = iResolution.x;\n    vec4 bw = vec4( 0.2125, 0.7154, 0.0721, 0.0);\n    \n    // \n    fragColor = vec4( 0.5, 0.5, 0.5, 1.0);\n    fragColor -= dot( texture( iChannel0, fragCoord - vec2(1.0, -0.5)/sum ), bw);      \n    fragColor -= dot( texture( iChannel0, fragCoord - vec2(1.0, +0.5)/sum ), bw);\n    \n    //\n    fragColor += dot( texture( iChannel0, fragCoord + vec2(1.0, -0.5)/sum ), bw); \n    fragColor += dot( texture( iChannel0, fragCoord + vec2(1.0, +0.5)/sum ), bw);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord.xy / iResolution.xy;\n  vec4 c = texture(iChannel0, uv);\n  \n \n  fragColor = c;  \n \n  if (fragCoord.y > iMouse.y) {\n      dx_blur( fragColor, uv);\n      \n  }\n}","name":"Image","description":"","type":"image"}]}