{"ver":"0.1","info":{"id":"Wscczl","date":"1601473852","viewed":226,"name":"dither dick","username":"erikthalen","description":"is it a bird?","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["dither"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const mat4x4 threshold = mat4x4( 0.,  8.,  2., 10., \n                                12.,  4., 14.,  6.,\n                                 3., 11.,  1.,  9.,\n                                15.,  7., 13.,  5.);\n\n\nfloat findClosest(int x, int y, float v) {\n    mat4x4 thresholdT = transpose(threshold);\n    float t = (thresholdT[x][y]) / 16.;\n    \n    if(v < t) return 0.;\n    else return 1.;\n}\n\nfloat dither(in vec3 col, vec2 fragCoord) {\n\tint x = int(fragCoord.x) % 4;\n    int y = int(fragCoord.y) % 4;\n    float lum = dot(vec3(0.2126, 0.7152, 0.0722), col);\n    return findClosest(x,y, lum);\n}\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nfloat sdVerticalCapsule( vec3 p, float h, float r ){\n  p.y -= clamp( p.y, 0.0, h );\n  return length( p ) - r;\n}\n\nfloat sdTorus( vec3 p, vec2 t ){\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat sdBox( vec3 p, vec3 b ){\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat map( in vec3 pos ) {\n    float yPos = pos.y + pow(sin(iTime), 3.)*-0.4+0.2;\n    float plane = pos.y + 1.;\n    float torus = sdTorus( vec3(pos.x, yPos, pos.z), vec2(0.25, 0.1) );\n    float pill = sdVerticalCapsule( vec3(pos.x, pos.y+0.5, pos.z), 1., 0.15 );\n    float ball = length(vec3(pos.x + 0.2, pos.y + .6, pos.z)) - 0.2;\n    float ball2 = length(vec3(pos.x - 0.2, pos.y + .6, pos.z)) - 0.2;\n    float balls = opSmoothUnion(ball, ball2, 0.1);\n    float dick = opSmoothUnion(pill, balls, 0.1);\n    float wank = min(torus, dick);\n\treturn min(wank, plane);\n}\n\nfloat trace( in vec3 ro, vec3 rd ) {\n    float t = 0.;\n    for(int i = 0; i < 100; i++) {\n        vec3 pos = ro + t*rd;\n        float d = map( pos );\n    \tif(d < 0.0001) break;\n        t += d;\n        if(t > 20.) break;\n    }\n    if(t>20.) t=-1.;\n    return t;\n}\n\nvec3 normal( in vec3 pos ) {\n    vec2 e = vec2(0.0001, 0.0);\n\treturn normalize( vec3( map(pos+e.xyy)-map(pos-e.xyy),\n                            map(pos+e.yxy)-map(pos-e.yxy),\n                            map(pos+e.yyx)-map(pos-e.yyx)) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n    vec3 col = vec3(.0);\n    \n    vec3 ro = vec3(0.0, 0.0, 2.0);\n    vec3 rd = normalize( vec3(uv, -2.) );\n    \n    float t = trace(ro, rd);\n    \n    if(t > 0.) {\n        vec3 pos = ro + t*rd;\n        vec3 nor = normal( pos );\n        \n        vec3 sun_dir = normalize(vec3(0.8, 0.2, 0.5));\n        float sun_dif = clamp( dot(nor, sun_dir), 0., 1. );\n        float sun_sha = step( trace(pos+nor*0.001, sun_dir), 0.0 );\n        float sky_dif = clamp( 0.5 + 0.5 * dot(nor, vec3(0., 1., 0.)), 0., 1. );\n        \n    \tcol  = vec3(1.0, 0.7, 0.5) * sun_dif*sun_sha;\n        col += vec3(0.0, 0.1, 0.3) * sky_dif;\n    }\n    \n    col = pow( col, vec3(0.4545) );\n    \n    float dit = dither(col, fragCoord);\n    \n\n    fragColor = vec4(vec3(dit),1.0);\n}","name":"Image","description":"","type":"image"}]}