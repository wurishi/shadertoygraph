{"ver":"0.1","info":{"id":"wl23WR","date":"1559189168","viewed":219,"name":"Line space with music","username":"edo_m18","description":"Line space with music","likes":5,"published":1,"flags":96,"usePreview":0,"tags":["music","line","vj"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4tXGzj","filepath":"https://soundcloud.com/mixmag-1/adam-beyer-bart-skils-your-mind-drumcode","previewfilepath":"https://soundcloud.com/mixmag-1/adam-beyer-bart-skils-your-mind-drumcode","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define S(a, b, t) smoothstep(a, b, t)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    float i = pow(texture(iChannel0, vec2(0.0, 0.85)).x, 2.0);\n    \n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec2 audio = texture(iChannel0, uv).rg;\n    float y = uv.y - audio.x;\n    y = S(0.1, 0.12, y) + S(0.1, 0.08, y);\n    \n    float s = 1000.0 * i;\n    vec2 gv = floor(uv * s) / s;\n    \n    vec3 col = texture(iChannel1, gv).rgb;\n    \n    fragColor = vec4(col + (1.0 - y) * 0.5,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define R iResolution\n#define S(a, b, t) smoothstep(a, b, t)\n\nmat2 rot(float a)\n{\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(s, c, -c, s);\n}\n\nmat3 camera(vec3 ro, vec3 ta)\n{\n    const vec3 up = normalize(vec3(0, 1, 0));\n    vec3 cw = normalize(ta - ro);\n    vec3 cu = normalize(cross(cw, up));\n    vec3 cv = normalize(cross(cu, cw));\n    return mat3(cu, cv, cw);\n}\n\nfloat map(vec3 p)\n{\n    vec3 q = abs(p);\n    q = abs(q - round(q));\n    \n    mat2 rm = rot(sin(iTime * 0.1));\n    q.xy *= rm;\n    q.xz *= rm;\n        \n    float d1 = min(length(q.xy), length(q.yz));\n    float d2 = min(d1, length(q.xz));\n    float d = min(d1, d2);\n    \n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - R.xy) / R.y;\n\n    vec2 mouse = (2.0 * (iMouse.xy / R.xy) - 1.0) * 5.0 + 0.1;\n    vec3 ro = vec3(mouse, iTime * 1.5);\n    vec3 ta = vec3(0.0, sin(iTime), iTime * 1.5 + 1.5);\n    \n    vec3 ray = camera(ro, ta) * normalize(vec3(uv, 1.5));\n    \n    float d = 0.0;\n    \n    float dist = 0.0;\n    for (int i = 0; i < 50; i++)\n    {\n        dist = map(ro + ray * d);\n                \n        if (dist < 0.01)\n        {\n            break;\n        }\n                \n        d += dist;\n    }\n    \n    vec3 col = vec3(0.0);\n    \n    if (dist < 0.01)\n    {\n        float r = 1.0 - d;\n        float g = exp(-d * 0.30) * 2.0;\n        float b = exp(-d * 0.50) * 2.0;\n        col = vec3(r, g, b);\n    }\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}