{"ver":"0.1","info":{"id":"dsKBz3","date":"1698609832","viewed":118,"name":"Bouncy balls","username":"thomasderoo4","description":"BOING!","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["color","balls","bounce","fullscreen"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415\n\n// Feather\n#define F 7./iResolution.y\n#define SF F\n// Line\n#define L 0.07\n// Ball radius\n#define R 0.4\n\nfloat N21(vec2 id) {\n    id = fract(id * vec2(244.224, 521.198));\n    id += dot(id, vec2(63.6, 55.3))/6.6;\n    return fract(id.x * id.y);\n}\n\nvec2 N22(vec2 id) {\n    float x = N21(id*1.2791);\n    return vec2(x, N21(vec2(id.y, x)));\n}\n\nmat2 rotation_matrix(float th) {\n    return mat2(cos(th), sin(th), -sin(th), cos(th));\n}\n\nfloat triangle(float i) {\n    i = fract(i);\n    \n    if (i < .25) {\n        return i * 4.;\n    } else if (i < .5) {\n        return 1. - ((i - .25) * 4.);\n    } else if (i < .75) {\n        return -((i - .5) * 4.);\n    } else {\n        return -1. + ((i - .75) * 4.);\n    }\n}\n\nvec3 get_color(int i) {\n\n   vec3 col = .5 + .5*cos(PI*2.*float(abs(i))/12. + vec3(4, 2, 0) + 2.2);\n   return min(col*col*col*4., 1.);\n}\n\nvec4 bg(vec2 uv, vec3 col, mat2 rot) {\n\n   // outerline\n   col *= smoothstep(1. + F, 1. - F, max(abs(uv.x), abs(uv.y)));\n   \n   //inner shadow\n   //uv += vec2(-1., 1.) * L * rot;\n   //col *= 0.7 + (smoothstep(1. + SF, 1. - SF, max(abs(uv.x), abs(uv.y))) * 0.3);\n\n   return vec4(col, 1.);\n}\n\nvec4 ball(vec2 uv, vec2 pos, vec3 col, mat2 rot) {\n    \n    float dist = length(uv + pos);\n    \n    // Shadow\n    col *= (0.7 + (smoothstep(\n        R + SF,\n        R - SF,\n        length(uv + (pos + ((vec2(1., -1.)*rot) * L)))) * 0.3));\n    \n    // Highlight\n    col = mix(\n        col, \n        vec3(1), \n        smoothstep(\n            L + F, \n            L - F, \n            length(uv + pos + ((vec2(1., -1.) * rot) * (R / 2.)))));\n    \n    // Line\n    col *= smoothstep(R + F, R - F, dist);\n    \n    // Alpha mask\n    return vec4(\n        col, \n        max(\n            smoothstep(R + L + F, R + L - F, dist),\n            0.));//smoothstep(R + L + SF, R + L - SF, length(uv + pos + vec2(-1., 1.) * L * rot)) * .3));\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    float t = 3. + (iTime * .5);\n    \n    uv += (vec2(sin(t*.42), cos(t*.17444)) )* 2.; \n    \n    mat2 rot_mat = rotation_matrix(.2+(sin(t)+cos(t*.2))*.5);\n    uv *= rot_mat;\n    \n    uv *= 3.;\n    \n    vec2 coord = floor(uv);\n    uv = fract(uv);\n    uv= (uv - .5) * 2.;\n    \n    uv /= 1. - (L / 2.);\n    \n    vec2 ball_speed = normalize(.3 + N22(coord) * .7);\n\n    vec2 ball_position = vec2(\n        triangle(t * ball_speed.x),\n        triangle(t * ball_speed.y));\n        \n    \n    vec3 ball_color = get_color(int(coord.x * 1.143 + coord.y * 2.92));\n    \n    if (((int(abs(coord.x)) % 2) + (int(-abs(coord.y)) % 2)) == 0) {\n        ball_color = 1. - ball_color;\n    }\n\n    vec3 bg_color = 1. - ball_color;\n    \n    ball_position *= (1. - R);\n\n    \n    vec4 bg = bg(uv, bg_color, rot_mat);\n    vec4 ball = ball(uv, ball_position, ball_color, rot_mat);\n    \n    vec3 col = mix(bg.xyz, ball.xyz, ball.w);\n    \n    \n    //col = mix(col, vec3(1.), highlight);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}