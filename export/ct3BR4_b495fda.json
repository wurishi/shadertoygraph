{"ver":"0.1","info":{"id":"ct3BR4","date":"1700979834","viewed":64,"name":"pulsar in universe","username":"nayk","description":"stars, galaxy, pulsar, spiral","likes":0,"published":1,"flags":1,"usePreview":0,"tags":["spiral","galaxy","stars","pulsar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* original https://www.shadertoy.com/view/lslyRn# https://www.shadertoy.com/view/MdXSzS https://www.shadertoy.com/view/4tyfWy https://www.shadertoy.com/view/dtlSDM*/\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n#define PARTICLES_CNT 1024\n#define EMITT_SPEED 5.0\n\n#define rnd1(a) (texture(iChannel0, 1024.0 / vec2(a, 0)).rgb - vec3(0.5))\n#define grad(v, c, siz) max(1.0 - distance(auv, ha + c) / siz, 0.0) * v\n#define ztan(v) max(tan(v), 0.0)\nvec3 sparks(int i, vec2 auv, vec2 ha, float t)\n{\n    float g = grad(1.0, 0.0, 0.5);\n    vec2 v = rnd1(i).rg * ztan(t) * vec2(1.0, sin(g) * 0.5);\n    return vec3(0.5, 0.3, 0.8) * (grad(g, v, 0.006) * 0.5 +\n                                  grad(g, v, 0.025) * 0.1);\n}\n\nvec3 implosion(int i, vec2 auv, vec2 ha, float t)\n{\n    float g = grad(1.0, 0.0, 0.2);\n    float st = max(1.0 - tan(t) * g * 10.0, 0.0);\n    vec2 v = rnd1(i).rg * st  * g * (1.0 - g);\n    return vec3(0.05, 0.3, 0.5) * (grad(1.0, v, 0.005) * 0.9 +\n                                   grad(1.0, v, 0.015) * 0.2);\n}\n\nvec3 portal(int i, vec2 auv, vec2 ha, float t)\n{\n    float st = max(1.0 - tan(t), 0.0);\n    vec2 v = rnd1(i).rg * st * grad(1.0, 0.0, 0.2) * 3.0;\n    return vec3(0.1, 0.8, 0.2) * grad(0.2, v, 0.045) *\n                                 (1.0 - grad(1.0, 0.0, 0.25) * 2.0);\n}\n\nvec3 meteor(int i, vec2 auv, vec2 ha, float t)\n{\n    ha.y -= 0.15;\n    vec2 v = rnd1(i).rg + vec2((ha.x - auv.x) , 0.3);\n    return vec3(0.9, 0.5, 0.2) * grad(0.2, v * ztan(t), 0.018) * grad(1.0, 0.0, 0.35);\n}\n\nvec3 signals(int i, vec2 auv, vec2 ha, float t)\n{\n    vec2 v = rnd1(i).rg * sin(auv - ha) * 20.0 + rnd1(i + 1).rg;\n    return vec3(0.9, 0.1, 0.1) * grad(0.5, v * ztan(t), 0.01) * grad(1.0, 0.0, 0.3);\n}\nvec3 pulsar(int i, vec2 auv, vec2 ha, float t)\n{\n    float mt = iTime * 10.0;\n    vec2 v = rnd1(i).rg * vec2(sin(mt), cos(mt)) * ztan(t);\n    return vec3(0.5, 1.0, 1.0) * grad(0.1, v, 0.02) * grad(1.0, 0.0, 0.2);\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam;\n         p.xy*=mat2(cos(iTime*0.01),sin(iTime*0.01),-sin(iTime*0.01),cos(iTime*0.01));\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\t\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.1; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.01,1.);\t\n}\nfloat cheap_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-0.5;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,1.);\n\tfloat time=iTime*speed+.25;\n    \n    float t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .07)) * 2.2;\n\tfloat si = sin(t);\n\tfloat co = cos(t);\n\tmat2 ma = mat2(co, si, -si, co);\n\n     vec2 a = vec2(iResolution.x / iResolution.y-0.5, 1.0);\n    vec2 auv = uv * a;\n   \n     vec3 rgb = texture(iChannel1, uv).rgb;\n    \n       for(int x = 0; x < PARTICLES_CNT; x++)\n    {\n        float t = iTime*1.1 + rnd1(x * 5).x * EMITT_SPEED;\n        \n  \n            rgb += sparks(x, auv*ma, a*0.001, t);\n       \n    }\n\n\t//mouse rotation\n\t\n\tvec3 from=vec3(1.,.5,0.5)*rgb;\n\tfrom+=vec3(time*2.,time,-2.);\n\n  float anim = sin(iTime * 12.0) * 0.1 + 1.0;    \t\n\tmainVR(fragColor, fragCoord, from, dir);\n    fragColor+= vec4(rgb,1.);\n      fragColor*= vec4(cheap_star(uv,anim) * vec3(0.50,0.7,0.75)*0.51, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}