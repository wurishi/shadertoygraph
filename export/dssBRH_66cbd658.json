{"ver":"0.1","info":{"id":"dssBRH","date":"1688474576","viewed":75,"name":"recursive distorted sphere","username":"Ronush","description":"Looks like coronavirus to me","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\nmat3 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\n\nfloat smin(float a, float b)\n{\n    float k = 1.0;\n    float res = exp2(-k * a) + exp2(-k * b);\n    return -log2(res) / k;\n}\n\nfloat sdSphere(vec3 p, vec3 c, float r)\n{\n    float sphere = abs(length(p - c) - r);\n    float displacement = sin(5.0 * (p.x + mod(iTime, 3.14159 * 2.0))) * sin(5.0 * (p.y + mod(iTime, 3.14159 * 2.0))) * sin(5.0 * p.z) * 0.25;\n    return sphere + displacement;\n}\n\nfloat sdTorus(vec3 p, vec3 c, vec2 t)\n{\n    vec2 q = vec2(length(p.xz) - t.x, p.y);\n    return (length(q) - t.y);\n}\n\nfloat getDist(vec3 p)\n{\n    float k = 5.0;\n    p = mod(p, k) - k / 2.0;\n    float sphere = sdSphere(p, vec3(0.0), 1.0);\n    return sphere;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd)\n{\n    float dO = 0.0;\n    float dS = 0.0;\n    \n    for (int i = 0; i < 100; i++)\n    {\n        vec3 p = ro + rd * dO;\n        dS = getDist(p);\n        dO += dS*0.5; // @Moumouke \n        if (dS < 0.1)\n            break;\n    }\n    \n    return dO;\n}\n\nvec3 getNormal(vec3 p)\n{\n    float d0 = getDist(p);\n    vec2 e = vec2(0.00, 0.0001);\n    vec3 d1 = vec3(\n        getDist(p - e.yxx),\n        getDist(p - e.xyx),\n        getDist(p - e.xxy)\n    );\n    vec3 n = normalize(d0 - d1);\n    \n    return n;\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y;\n    \n    \n    float speed = 0.5;\n    float theta = mod(iTime * speed, 3.14159 * 2.0);\n    float magnitude = 7.0;\n    vec3 ro = vec3(cos(theta) * magnitude, 1.0, sin(theta) * magnitude);\n    vec3 rd = vec3(uv, 1.0);\n    \n    rd *= rotateY(-theta - 3.14159 / 2.0);\n    \n    vec3 col = vec3(0.0);\n    float d = RayMarch(ro, rd);\n    vec3 p = ro + rd * d;\n    vec3 n = getNormal(p);\n    d /= 6.0;\n    \n    col = vec3(n);\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}