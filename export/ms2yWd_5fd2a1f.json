{"ver":"0.1","info":{"id":"ms2yWd","date":"1690429961","viewed":30,"name":"RayMarchingSphereBase","username":"LudenGhost","description":"ref:https://www.youtube.com/watch?v=PGtv-dBi2wE","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SPHERE_INFO vec4(0,1,6,1) // xyz = position , w = radius\n#define MAX_STEPS 100 // march steps int\n#define MAX_DIS 100.0\n#define SURFACE_DISTANCE 0.01 \n#define LIGHT_POS vec3(0,3,6)\n#define CAMERA_POSITION vec3(0,1,0)\n\nfloat getDist(vec3 pos){\n    vec4 sphere = SPHERE_INFO;\n    \n    float sphereDist = length(pos-sphere.xyz) - sphere.w; // distance by pos to face of sphere \n    float planeDist = pos.y; // distance by pos to ground\n        \n    return min(sphereDist,planeDist); // if choose lengther distance ,the ray will lose from the sphere\n}\n\nfloat RayMarch(vec3 rayOrigin , vec3 rayDir){\n    float resultDistance = 0.;\n          \n    for(int i=0;i<MAX_STEPS;i++){\n       vec3 p = rayOrigin + rayDir * resultDistance;\n       float dS = getDist(p);\n       resultDistance += dS;\n       \n       if(resultDistance > MAX_DIS || dS < SURFACE_DISTANCE) break;\n    }\n    \n    return resultDistance;\n}\n\nvec3 GetNormal(vec3 p){\n    float distanceAtPointp = getDist(p);\n    vec2 e = vec2(0.01,0);\n    vec3 n = distanceAtPointp - vec3( getDist(p-e.xyy) , getDist(p-e.yxy) , getDist(p-e.yyx) );\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p){\n    vec3 lightPosition = LIGHT_POS;\n    \n    lightPosition.xz += vec2(sin(iTime),cos(iTime))*2.;\n    \n    vec3 lightVector = normalize(lightPosition-p);\n    vec3 normal = GetNormal(p);\n    \n    float dif = clamp(dot(normal,lightVector),0.,1.);\n    \n    float d = RayMarch(p+normal * SURFACE_DISTANCE * 2.0 , lightVector);\n    if(d<length(lightPosition-p))dif*=0.1;\n    \n    return dif;\n}\n\n// ======================================================================\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n\n    vec3 rOrient = CAMERA_POSITION;\n    vec3 rDir = normalize(vec3(uv.x,uv.y,1)); // ray vector , shoot from camera to ScreenPixels\n\n    float d = RayMarch(rOrient,rDir);\n\n    vec3 p = rOrient + rDir * d;\n    float diffuseColor = GetLight(p);\n    col = vec3(diffuseColor);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}