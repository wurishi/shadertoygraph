{"ver":"0.1","info":{"id":"Wtlczn","date":"1591295587","viewed":117,"name":"Fluid Redux 2D","username":"spalmer","description":"even further reduced fork of wyatt's toy.  I have many questions for wyatt!","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["2d","fluid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// fork of Fluid Redux 3D at https://shadertoy.com/view/3llcRn\n// which is a fork of \"Spiral Waves 3D\" by wyatt https://shadertoy.com/view/wtXcRn\n\n// reduced to 2D for further study and simplification\n\nvoid mainImage(out vec4 Q, vec2 u)\n{\n    Q = T(u);\n    Q = Q * 50. + .5; // alternate display 1 - scaling of values needs tuned\n    //Q = vec4(fract(Q.x), fract(Q.y), .0, 1); // alternate display 2\n    //Q = vec4(Q.x*.7*50. +.2,  .2 + Q.y*3. + fract(Q.y*16. +.1)*.5, .2, 1);  // kastorp 'rainbow writings'\n    Q = sqrt(Q); // gamma\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define R\t\tiResolution.xy\n// textures for buffers should be set to bilinear mode\n// texture single bilinear sample with sampler2D ch, vec2 q\n#define T(q) texture(iChannel0, (q)/R)\t \n\n// involved in Laplacian of field\n#define PressureAverage(u) (1. / 4. * ( \\\n    T(u + vec2(0,1)) \\\n  + T(u - vec2(0,1)) \\\n  + T(u + vec2(1,0)) \\\n  + T(u - vec2(1,0)) \\\n  ).x)\n// TODO without the .x could be useful for other quantities!\n\n// in fact this demo doesn't involve any direct gradient quantities\n// (first derivatives), diffusion only involves second?\n\n        \n// wyatt said he got this differential equation solver from his teacher,\n// apparently a https://wikipedia.org/wiki/Reaction%E2%80%93diffusion_system\n// of the one-component variety\n        \n// m is the average neighbor pressure from neighborhood\n// pretty sure Q.x is prior and output pressure\n// but not quite sure what Q.y is?!  some filter state\n// either velocity or prior frame position or factor thereof...?\n// at least it's not in a macro!\nvoid FluidSim(inout vec2 Q, float m)\n{\n\tconst float // TODO figure out what all these do\n\t  k0 = .05  //.02 // pressure wave propagation rate? affects diffusion\n\t, k1 = 1e-2 //1e-4 // coeff of pressure calc - delay?\n\t, k2 = 5.   //3. //10. // coeff of pressure calc, something about wavelength, can't be too small\n\t, k3 = .1   //.4 //1. // coeff of pressure calc\n\t, k4 = 20.  //500. // coeff of pressure calc involving y term.. feedback to delayed term\n\t, k5 = .003 //.006 // coeff of y term calc, whatever that is -- affects decay?\n\t;\n    float u0 = Q.x, u1 = Q.y; // unpack from arg\n    u0 += k0 * (m - u0) // diffusion term - mixes toward the average over time, spreads\n        + k1 * (u0*(k2-u0)*(u0-k3) - k4*u1); // reaction term propagates wave front\n\tu1 += k5 * (u0 - u1); // blends toward current value - but not much!\n    Q.x = u0; Q.y = u1; // write back to inout arg\n}\n\n// I don't see t anywhere, so the entire thing is hard-coded for a given time step\n    //float t = iTimeDelta; // TODO need to pass in as argument, Common limitation\n\n    // Q.x*(k2-Q.x)*(Q.x-k3) itself is an interesting little cubic\n    // part of it is similar to a logistic map function x * (1-x)\n    // which is part of Fisher's equation, and as a whole closer\n    // to general Zeldovich equation from combustion theory?\n    // apparently based on https://wikipedia.org/wiki/Fick%27s_laws_of_diffusion\n    // something about Schr√∂dinger equation, wyatt made a toy on that,\n    // maybe it would shed some insight.\n    // Anyway it's a differential equation, and Q.x is the current time step\n    // and Q.y is the state carried over from the prior time step term.\n    // Someone who is actually well versed in traditional ODE's\n    // please help us out here!  8)\n    // Hey I found a reaction-diffusion tutorial:\n    // https://karlsims.com/rd.html\n    // I think one thing that will help is changing the symbology\n    // to better match, say, wikipedia.  their quantity is u, time t\n    // m here is part of their diffusion term\n    // I'll simply call Q.x u0 and Q.y u1 (for the pressure at time step now and now-1)\n\n// almost everything is how it modifies Q.x and y\n// which seems too simple to possibly account for\n// the complex fluid behavior observed, right?\n\n// seems to me that pressure is diffused with neighbors in x\n// and somehow advected along some function of differential in y\n// y seems to be some filter of the pressure value\n// which seems mainly used to figure out which way and speed\n// the wave affecting x is travelling.  I'm not sure I quite understand.\n\n// pressure calc is the strangest polynomial I've seen recently,\n// with zeroes at 0., k2, and k3, peaking at like 18. near 3.3 !!\n\n// no longer a macro either\nvoid FluidMod(inout vec2 Q, vec2 u, int frame, float time, vec2 res, vec4 mouse)\n{\n\tif (frame < 3  && length(u-.5*res) < 20.\n\t || mouse.z>0. && length(u-mouse.xy) + 4.*sin(time) < 10.)\n\t\tQ.x = 1.;\n}\n\n// init just starts a ripple at the center,\n// forming a pulse train with the default coeffs\n// mousedown just ripples near the mouse location\n\n// TODO document buffer channel allocation\n// probably pressure in x?\n// probably variance in y? some kind of differential?  not velocity, only 1 channel...\n// zw unused\n\n#define BUFFER\t\t\t\t\t\t\t\t\t\t\\\nvoid mainImage(out vec4 Q, vec2 u)\t\t\t\t\t\\\n{\t\t\t\t\t\t\t\t\t\t\t\t\t\\\n\tQ = T(u);\t\t\t\t\t\t\t\t\t\t\\\n\tFluidSim(Q.xy, PressureAverage(u));\t\t\t\t\\\n\tFluidMod(Q.xy, u, iFrame, iTime, R, iMouse);\t\\\n}\n\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"BUFFER\n    \n    // if you want wave propagation speed increased,\n    // simply add more Buffer tabs and copy the macro and \n    // set up texture channels in a circular chain\n\n","name":"Buffer A","description":"","type":"buffer"}]}