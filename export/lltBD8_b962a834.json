{"ver":"0.1","info":{"id":"lltBD8","date":"1539510265","viewed":145,"name":"Height Map with Contour Lines","username":"Maxpm","description":"Contour lines descending over Perlin noise.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Returns a Perlin noise gradient (unit length, random direction)\n// given a lattice position.\nvec2 gradient(ivec2 position)\n{\n    float angle = texelFetch(iChannel0, position, 0).r*2.0*3.14159;\n    return vec2(cos(angle), sin(angle));\n}\n\n// Perlin noise. Returns 0-1.\nfloat height(vec2 globalXY)\n{\n    vec2 localXY = fract(globalXY);\n    \n    // Gradients at corners:\n    vec2 g00 = gradient(ivec2(globalXY) + ivec2(0, 0));\n    vec2 g01 = gradient(ivec2(globalXY) + ivec2(0, 1));\n    vec2 g10 = gradient(ivec2(globalXY) + ivec2(1, 0));\n    vec2 g11 = gradient(ivec2(globalXY) + ivec2(1, 1));\n    \n    // Offsets from corners to point:\n    vec2 offset00 = localXY - vec2(0.0, 0.0);\n    vec2 offset01 = localXY - vec2(0.0, 1.0);\n    vec2 offset10 = localXY - vec2(1.0, 0.0);\n    vec2 offset11 = localXY - vec2(1.0, 1.0);\n    \n    // Dot products / projections.\n    float d00 = dot(g00, offset00);\n    float d01 = dot(g01, offset01);\n    float d10 = dot(g10, offset10);\n    float d11 = dot(g11, offset11);\n    \n    // Interpolate.\n    vec2 localXYEased = smoothstep(0., 1., localXY);\n    float interpolated = mix(\n        mix(d00, d10, localXYEased.x),\n        mix(d01, d11, localXYEased.x),\n        localXYEased.y\n    );\n    \n    // Scale to output range.\n    // https://digitalfreepen.com/2017/06/20/range-perlin-noise.html\n    return (interpolated + 0.707) / 1.414;\n}\n\n// Returns 0 (not on a contour line) to 1 (on a contour line).\nfloat contourLine(vec2 position, float contourCount, float contourShift)\n{   \n    float height = height(position);\n    float contourOffset = fract(height*contourCount + contourShift);\n    float nearestContourVerticalDistance = min(contourOffset, 1.-contourOffset)/contourCount;\n    float screenSpaceSlope = length(vec2(dFdx(height), dFdy(height)));\n    float screenSpaceDistance = nearestContourVerticalDistance/screenSpaceSlope;\n    return 1. - smoothstep(0., 1., screenSpaceDistance);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    // 10 grid cells across the y-axis. Scale x to keep the cells square.\n    vec2 position = fragCoord/iResolution.yy * 10.0;\n    \n    float height = height(position);\n    float contour = contourLine(position, 8.0, iTime/2.0);\n    \n    float grayscaleColor = height*(1.-contour);\n    \n    fragColor = vec4(vec3(grayscaleColor), 1.0);\n}","name":"Image","description":"","type":"image"}]}