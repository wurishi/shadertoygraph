{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// Created by Daniel Burke - burito/2014\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Inspiration from Dr Who (2005) S7E13 - The Name of the Doctor\n\nvec2 rot(vec2 p, float a)\n{\n    float c = cos(a);\n    float s = sin(a);\n    return vec2(p.x*c + p.y*s,\n                -p.x*s + p.y*c);\n}\n\nfloat circle(vec2 pos, float radius)\n{\n    return clamp(((1.0-abs(length(pos)-radius))-0.99)*100.0, 0.0, 1.0);\n    \n}\n\nfloat circleFill(vec2 pos, float radius)\n{\n    return clamp(((1.0-(length(pos)-radius))-0.99)*100.0, 0.0, 1.0);   \n}\n\n// Thanks IÃ±igo Quilez!\nfloat line( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = -p - a;\n    vec2 ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    float d = length( pa - ba*h );\n    \n    return clamp(((1.0 - d)-0.99)*100.0, 0.0, 1.0);\n}\n\n// for posterity, the original evil function\nfloat EvilLine(vec2 pos, vec2 start, vec2 finish)\n{\n    vec2 delta = finish - start;\n    vec2 n = normalize(delta);\n    float l = length(delta);\n    float d = sign(n.x);\n    \n    float angle = atan(n.y / n.x);\n    vec2 t = rot(-pos - start, angle);\n    \n    float s = d < 0.0 ? 0.0: d*l;\n    float f = d < 0.0 ? d*l : 0.0;\n    if(t.x > s || t.x < f)return 0.0;\n\n    return clamp(((1.0 - abs(t.y))-0.99)*100.0, 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0 * uv;\n    p.x *= iResolution.x / iResolution.y;\n \n    vec3 colour = vec3(0);\n    vec3 white = vec3(1);\n    \n    \n    \n    float c = circle(p, 0.2);\n    c += circle(p, 0.1);\n    c += circle(p, 0.18);\n    c += circleFill(p, 0.005);\n\n//    c += circle(p, 1.3);\n    c += circle(p, 1.0);\n    if(p.x > 0.0)c += circle(p, 0.4);\n    if(p.x > 0.0)c += circle(p, 0.42);\n    if(p.x < 0.0)c += circle(p, 0.47);\n    c += circleFill(p+vec2(0.47, 0.0), 0.02);\n    c += circleFill(p+vec2(0.84147*0.47, 0.54030*0.47), 0.02);\n    c += circleFill(p+vec2(0.84147*0.47, -0.54030*0.47), 0.02);\n    c += circleFill(p+vec2(0.41614*0.47, 0.90929*0.47), 0.02);\n    c += circleFill(p+vec2(0.41614*0.47, -0.90929*0.47), 0.02);\n    \n    float t = iTime;\n    float t2 = t * -0.01;\n    float t3 = t * 0.03;\n    \n    vec2 angle1 = vec2(sin(t), cos(t));\n    vec2 a = angle1 * 0.7;\n    \n    t *= 0.5;\n    vec2 angle2 = vec2(sin(t), cos(t));\n    vec2 b = angle2 * 0.8;\n    \n    vec2 angle3 = vec2(sin(t2), cos(t2));\n    vec2 d = b + angle3* 0.4;\n\n    vec2 angle4 = vec2(sin(t3), cos(t3));\n    vec2 e = angle4 * 0.9;\n\n    vec2 angle5 = vec2(sin(t3+4.0), cos(t3+4.0));\n    vec2 f = angle5 * 0.8;\n    \n    vec2 angle6 = vec2(sin(t*-0.1+5.0), cos(t*-0.1+5.0));\n    vec2 h = angle6 * 0.8;\n    \n    \n\n    \n    \n    float tt = t * 1.4;\n    \n    float tm = mod(tt, 0.5);\n    float tmt = tt - tm;\n    if( tm > 0.4) tmt += (tm-0.4)*5.0;\n    vec2 tangle1 = vec2(sin(tmt), cos(tmt));\n\n\ttt *= 0.8;\n    tm = mod(tt, 0.6);\n    float tmt2 = tt - tm;\n    if( tm > 0.2) tmt2 += (tm-0.2)*1.5;\n    \n    vec2 tangle2 = vec2(sin(tmt2*-4.0), cos(tmt2*-4.0));\n   \n    vec2 tangle3 = vec2(sin(tmt2), cos(tmt2));\n    \n    tt = t+3.0;\n    tm = mod(tt, 0.2);\n    tmt = tt - tm;\n    if( tm > 0.1) tmt += (tm-0.1)*2.0;\n    vec2 tangle4 = vec2(sin(-tmt), cos(-tmt)); tmt += 0.9;\n    vec2 tangle41 = vec2(sin(-tmt), cos(-tmt)); tmt += 0.5;\n    vec2 tangle42 = vec2(sin(-tmt), cos(-tmt)); tmt += 0.5;\n    vec2 tangle43 = vec2(sin(-tmt), cos(-tmt)); tmt += 0.5;\n    vec2 tangle44 = vec2(sin(-tmt), cos(-tmt)); tmt += 0.5;\n    vec2 tangle45 = vec2(sin(-tmt), cos(-tmt));\n\n    tt = iTime+0.001;\n    tm = mod(tt, 1.0);\n    tmt = tt - tm;\n    if( tm > 0.9) tmt += (tm-0.9)*10.0;\n\n    vec2 tangle51 = 0.17*vec2(sin(-tmt), cos(-tmt)); tmt += 1.0471975511965976;\n    vec2 tangle52 = 0.17*vec2(sin(-tmt), cos(-tmt)); tmt += 1.0471975511965976;\n    vec2 tangle53 = 0.17*vec2(sin(-tmt), cos(-tmt));\n    \n    c += line(p, tangle51, -tangle53);\n    c += line(p, tangle52, tangle51);\n    c += line(p, tangle53, tangle52);\n    c += line(p, -tangle51, tangle53);\n    c += line(p, -tangle52, -tangle51);\n    c += line(p, -tangle53, -tangle52);\n\n    c += circleFill(p+tangle51, 0.01);\n    c += circleFill(p+tangle52, 0.01);\n    c += circleFill(p+tangle53, 0.01);\n    c += circleFill(p-tangle51, 0.01);\n    c += circleFill(p-tangle52, 0.01);\n    c += circleFill(p-tangle53, 0.01);\n    \n    \n    \n    c += circle(p+a, 0.2);\n    c += circle(p+a, 0.14);\n    c += circle(p+a, 0.1);\n    c += circleFill(p+a, 0.04);\n    c += circleFill(p+a+tangle3*0.2, 0.025);   \n    \n    \n    c += circle(p+a, 0.14);\n\n\n    c += circle(p+b, 0.2);\n    c += circle(p+b, 0.03);\n    c += circle(p+b, 0.15);\n    c += circle(p+b, 0.45);\n    c += circleFill(p+b+tangle1*0.05, 0.01);\n    c += circleFill(p+b+tangle1*0.09, 0.02);\n    c += circleFill(p+b+tangle1*0.15, 0.03);\n    c += circle(p+b+tangle1*-0.15, 0.03);\n    c += circle(p+b+tangle1*-0.07, 0.015);\n\n    c += circle(p+d, 0.08);\n\n\n    c += circle(p+e, 0.08);\n    \n\n    c += circle(p+f, 0.12);\n    c += circle(p+f, 0.10);\n    c += circleFill(p+f+tangle2*0.05, 0.01);\n    c += circleFill(p+f+tangle2*0.10, 0.01);\n    c += circle(p+f-tangle2*0.03, 0.01);\n    c += circleFill(p+f+vec2(0.085), 0.005);\n    c += circleFill(p+f, 0.005);\n\n    \n    vec2 g = tangle4 * 0.16;\n    c += circle(p+h, 0.05);\n    c += circle(p+h, 0.1);\n    c += circle(p+h, 0.17);\n    c += circle(p+h, 0.2);\n    c += circleFill(p+h+tangle41 *0.16, 0.01);\n    c += circleFill(p+h+tangle42 *0.16, 0.01);\n    c += circleFill(p+h+tangle43 *0.16, 0.01);\n    c += circleFill(p+h+tangle44 *0.16, 0.01);\n    c += circleFill(p+h+tangle45 *0.16, 0.01);\n    c += circleFill(p+h+angle1 *0.06, 0.02);\n    c += circleFill(p+h+tangle43*-0.16, 0.01);\n    \n    \n    c += line(p, vec2(0.0), a);\n    c += circleFill(p+b, 0.005);\n    c += circleFill(p+d, 0.005);\n    c += circleFill(p+e, 0.005);\n\n    c += line(p, b, a);\n    c += line(p, d, e);\n    c += line(p, b+tangle1*0.15, e);\n    c += line(p, e, f+vec2(0.085));\n\n    c += line(p, h+angle1*0.06, f);\n    c += line(p, h+tangle43*-0.16, d);\n    c += line(p, h+tangle42*0.16, e);\n    \n    \n    // of course I'd write a line function that\n    // doesn't handle perfectly vertical lines\n    c += line(p, vec2(0.001, -0.5), vec2(0.0001, 0.5));\n    c += circleFill(p+vec2(0.001, -0.5), 0.005);\n    c += circleFill(p+vec2(0.001, 0.5), 0.005);\n    \n    c = clamp(c, 0.0, 1.0);\n    colour = white * c;\n    \n\n    fragColor = vec4(colour, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Xd2XWR","date":"1410882954","viewed":5134,"name":"Time Coordinates","username":"burito","description":"An experiment on smooth lines, and making things tick.\n\nI completed this offline, so the functions have \"interesting\" quirks. That line drawing function in particular is... special. But it works, and I figured it out in my head.","likes":162,"published":1,"flags":0,"usePreview":0,"tags":["drwho","timecoordinates"],"hasliked":0,"parentid":"","parentname":""}}