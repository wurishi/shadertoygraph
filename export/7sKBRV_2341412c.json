{"ver":"0.1","info":{"id":"7sKBRV","date":"1658522554","viewed":101,"name":"Mandelmess","username":"skintigh","description":"Simple mandelbrot fractal, illustrating how to use loops in shaders. (by someone else)\nModified by me to answer a question posed on Reddit.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["educational"],"hasliked":0,"parentid":"XdtSRN","parentname":"Shader Lesson #6, loops"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float f;\n\nint mandelbrot(vec2 uv) {\n    vec2 z1, z = uv;\n    for (int i = 0; i < 300; i++) {    \n        // dot(z, z) > 4.0 is the same as length(z) > 2.0, but perhaps faster.\n        if (dot(z, z) > 4.0) return i;\n        \n        \n        z = z + f / z.x; //https://www.reddit.com/r/fractals/comments/w5bx9k/what_would_this_formula_look_like/\n        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + uv;\n        \n        \n    }\n    return 0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    f = 0.00001 * pow(iTime, 3.); \n\n    // Screen coordinate, roughly -2 to +2\n    vec2 uv = (fragCoord.xy*2.5 - iResolution.xy) * 2.0/ iResolution.x;\n    \n    // Evaluate mandelbrot for this coordinate.\n    float ret = float(mandelbrot(vec2(-uv.y-0.6, uv.x-.5)));\n    \n    // Turn the iteration count into a color.\n\tfragColor = vec4(sin(vec3(0.1, 0.2, 0.5) * ret ), 1);\n}","name":"Image","description":"","type":"image"}]}