{"ver":"0.1","info":{"id":"wsScWV","date":"1587324690","viewed":233,"name":"Sound tutorial #3","username":"NonGrate","description":"This is a third lesson of a procedural sound generation tutorial.\nToday we are playing around with note length and overlapping notes.\n\nSecond lesson: https://www.shadertoy.com/view/tsByWV\nFourth lesson: https://www.shadertoy.com/view/3s2cWc","likes":5,"published":1,"flags":8,"usePreview":0,"tags":["procedural","sound","tutorial","audio","generation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"struct Note {\n    // in Hz, see \"common\" tab\n    float frequency;\n    // offset - time in seconds when to start playing note\n    float offset;\n    // duration of a note (1/4, 1/8, ...), see \"common\" tab\n    float duration;\n};\n\nconst Note[] notes = Note[] (\n    Note(C, 0.0, _8_NOTE),\n    Note(C, 0.5, _8_NOTE),\n    Note(D, 1.0, _4_NOTE),\n    Note(C, 2.0, _4_NOTE),\n    Note(F, 3.0, _4_NOTE),\n    Note(E, 4.0, DOUBLE_NOTE), // This still rings when next starts\n    Note(C, 5.0, _8_NOTE),\n    Note(C, 5.5, _8_NOTE),\n    Note(D, 6.0, _4_NOTE),\n    Note(C, 7.0, _4_NOTE),\n    Note(G, 8.0, _4_NOTE),\n    Note(F, 9.0, DOUBLE_NOTE));\n\nvec2 noteFreq(Note note, float time) {\n    // 6.2831 = 2pi\n    // exp() goes exponentially down to fade out the volume\n    return vec2(sin(6.2831 * note.frequency * time) * exp(-1.0/note.duration * (time - note.offset)));\n}\n\nvec2 mainSound( in int samp,float time) {\n    vec2 result;\n    // time counts in seconds\n    // (time - x) is required, because we want to \"reset\" exp() function\n    // otherwise the output of exp() function will go down globally\n    // and we'll hear only first note\n    for (int i = 0; i < notes.length(); i++) {\n        Note note = notes[i];\n        if (time > note.offset) {\n            // += is here because we are combining result with\n            // the \"values\" of previous and/or simultaneous notes\n            result += noteFreq(note, time);\n            // result = noteFreq(note, time); // to stop previous note when next starts\n        }\n    }\n    \n    return result;\n}","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"// Frequencies\nconst float C = 261.63;\nconst float D = 293.66;\nconst float E = 329.63;\nconst float F = 349.23;\nconst float G = 392.00;\nconst float A = 440.00;\nconst float B = 493.88;\nconst float C2 = 523.25;\n\n// Durations\nconst float WHOLE_NOTE = 1.0;\nconst float HALF_NOTE = 1.0/2.0;\nconst float _4_NOTE = 1.0/4.0;\nconst float _8_NOTE = 1.0/8.0;\nconst float _16_NOTE = 1.0/16.0;\nconst float _32_NOTE = 1.0/32.0;\nconst float DOUBLE_NOTE = 2.0;","name":"Common","description":"","type":"common"}]}