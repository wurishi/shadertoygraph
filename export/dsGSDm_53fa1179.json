{"ver":"0.1","info":{"id":"dsGSDm","date":"1682095577","viewed":284,"name":"True Bresenham Lines in 30 LOC","username":"PureAsbestos","description":"Parallel line rasterization based on DDA / linear interpolation\nUnlike some GLSL line-drawing methods, this will always produce correct results with no breaks\nAlgorithm adapted from here: https://www.redblobgames.com/grids/line-drawing.html#interpolation","likes":8,"published":3,"flags":0,"usePreview":0,"tags":["line","lines","demo","lerp","dda","rasterization","algorithm","bresenham"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by PureAsbestos, 2023\n// Free for any use. Credit appreciated but not required.\n\nfloat diag(vec2 p0, vec2 p1)\n{\n    vec2 d = abs(p1 - p0);\n    return max(d.x, d.y);\n}\n\nfloat line(vec2 p, vec2 p0, vec2 p1)\n{\n    float stp = diag(p,p0);\n    float n = diag(p0,p1);\n    float t = (n==0.0)? 0.0 : stp/n; \n\n    vec2 pt = mix(p0, p1, t);\n    vec2 d = abs(p - round(pt));\n    return (d.x < 0.5\n         && d.y < 0.5\n         && stp <= n)\n          ? 1.0 : 0.0 ;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0,0,0,1);\n    fragColor.g = line(round(fragCoord/4.0), round(iResolution.xy/8.0), round(iMouse.xy/4.0));\n}","name":"Image","description":"","type":"image"}]}