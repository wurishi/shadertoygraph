{"ver":"0.1","info":{"id":"fl3yRB","date":"1659994577","viewed":152,"name":"4D ray marching","username":"arkanon","description":"raymarching a 4d ray. camera is extremely broken and idk how to make it work so if anyone knows please comment","likes":1,"published":1,"flags":48,"usePreview":0,"tags":["raymarching","sdf","4d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rand32(vec3 n) {\n    return vec2(\n        fract(sin(dot(n,vec3(438.1289,934.4378,184.2833))*2389.129)),\n        fract(sin(dot(n,vec3(894.7143,917.4663,192.7474))*3811.964))\n    ) * 2.0 - 1.0;\n}\n\nvec4 maptex(vec4 pos) {\n    return texture(iChannel0,pos.xy+pos.zw);\n}\n\nstruct material {\n    float spec;\n    float diff;\n    float ambient;\n    vec3 color;\n};\nmaterial blendMat(material a, material b, float amt) {\n    material k = material(mix(a.spec, b.spec, amt), mix(a.diff, b.diff, amt), mix(a.ambient, b.ambient, amt), mix(a.color, b.color, amt));\n    return k;\n}\n\nstruct map {\n    float dist;\n    material mat;\n};\n\nmap opSub(map a, map b) {\n    return map(min(a.dist, -b.dist), a.mat);\n}\n\nfloat sdHsphere(vec4 pos, vec4 spos, float radius) {\n    return length(pos - spos) - radius;\n}\n\nfloat sdHcube(vec4 pos, vec4 spos, vec4 extents)\n{\n    vec4 q = abs(pos - spos) - extents;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,max(q.z,q.w))),0.0);\n}\nfloat sdTess(vec4 pos, vec4 spos, vec4 extents, float bsize)\n{\n    vec4 p = abs(pos - spos) - extents;\n    vec4 q = abs(p + bsize) - bsize;\n    return min(min(min(\n        length(max(vec4(p.x,q.y,q.z,q.w),0.0))+min(max(p.x,max(q.y,max(q.z,q.w))),0.0),\n        length(max(vec4(q.x,p.y,q.z,q.w),0.0))+min(max(q.x,max(p.y,max(q.z,q.w))),0.0)),\n        length(max(vec4(q.x,q.y,p.z,q.w),0.0))+min(max(q.x,max(q.y,max(p.z,q.w))),0.0)),\n        length(max(vec4(q.x,q.y,q.z,p.w),0.0))+min(max(q.x,max(q.y,max(q.z,p.w))),0.0));\n}\n\nmap scene(vec4 pos) {\n    //float dist = sdTess(mod(pos+5.0, 15.0), vec4(0, 0, 0, 0), vec4(3.0), 0.5);\n    float dist = sdHcube(pos, vec4(0, -2, 0, 0), vec4(1000.0, 0.5, 1000.0, 1000.0));\n    dist = min(dist, sdHcube(pos, vec4(0, 0, -20, 0), vec4(1000.0, 1000.0, 0.5, 1000.0)));\n    dist = min(dist, sdHsphere(pos, vec4(0, -1, 4, 3), 1.0));\n    dist = min(dist, sdHsphere(pos, vec4(2, -1, 4, 3), 1.0));\n    dist = min(dist, sdHcube(pos, vec4(-4, -1, 6, -4), vec4(2.0)));\n    dist = min(dist, sdHcube(pos, vec4(12, 5, 1, 7), vec4(2.0)));\n    dist = max(dist, -sdHcube(pos, vec4(12, 5, 1, 7), vec4(1.8, 1.8, 1.8, 2.5)));\n    dist = max(dist, -sdHcube(pos, vec4(12, 5, 1, 7), vec4(1.8, 1.8, 2.5, 1.8)));\n    dist = max(dist, -sdHcube(pos, vec4(12, 5, 1, 7), vec4(1.8, 2.5, 1.8, 1.8)));\n    dist = max(dist, -sdHcube(pos, vec4(12, 5, 1, 7), vec4(2.5, 1.8, 1.8, 1.8)));\n    material mat = material(0.0, 0.0, 0.0, vec3(0.7, 0.7, 0.7));\n    return map(dist,mat);\n}\n\n#define epsilon 0.001\n#define iters 128\n#define AA 1\n\nvec3 raymarch(vec4 pos, vec4 dir) {\n    float k;\n    for (int iter = 0; iter < iters; iter++) {\n        float dist = scene(pos).dist;\n        pos += dir * dist;\n        k += dist * 0.02;\n    }\n    k += 1.0;\n    map m = scene(pos);\n    if (m.dist < epsilon) {\n        material mat = m.mat;\n        return (mat.color * maptex(pos).rgb) / k;\n    }\n    return vec3(0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Screen coordinates\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy)/iResolution.y;\n    \n    vec3 col;\n    \n    float c1 = cos(iTime*0.002);\n    float s1 = sin(iTime*0.002);\n    vec2 mouse = (texelFetch(iChannel1, ivec2(1, 3), 0).xy * 16.0 - iResolution.xy * 8.0)/iResolution.y;\n    vec2 c2 = cos(mouse);\n    vec2 s2 = sin(mouse);\n    mat4 rot = mat4(\n        c1, 0, 0, s1,\n         0, 1, 0,  0,\n         0, 0, 1,  0,\n       -s1, 0, 0, c1\n    ) * mat4(\n        c2.x,    0, s2.x,    0,\n           0, c2.y,    0, s2.y,\n       -s2.x,    0, c2.x,    0,\n           0,-s2.y,    0, c2.y\n    );\n    \n    vec2 pw = 1.0 / iResolution.xy;\n    \n    for (int i = 0; i < AA+1; i++) {\n\n        vec4 pos = texelFetch(iChannel1, ivec2(1, 1), 0);\n        vec4 dir = normalize(vec4(normalize(vec3(uv + pw * rand32(vec3(uv, iTime)),0.9)),0.9));\n        dir = rot * dir;\n\n        col += raymarch(pos, dir);\n    }\n\n    col /= float(AA);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (ivec2(fragCoord) == ivec2(1, 1)) {\n        float c1 = cos(iTime*0.002);\n        float s1 = sin(iTime*0.002);\n        vec2 mouse = (texelFetch(iChannel1, ivec2(1, 3), 0).xy * 16.0 - iResolution.xy * 8.0)/iResolution.y;\n        vec2 c2 = cos(mouse);\n        vec2 s2 = sin(mouse);\n        mat4 rot = mat4(\n            c1, 0, 0, s1,\n             0, 1, 0,  0,\n             0, 0, 1,  0,\n           -s1, 0, 0, c1\n        ) * mat4(\n            c2.x,    0, s2.x,    0,\n               0, c2.y,    0, s2.y,\n           -s2.x,    0, c2.x,    0,\n               0,-s2.y,    0, c2.y\n        );\n        vec4 col = texelFetch(iChannel1, ivec2(1, 1), 0);\n        vec4 vec;\n        if (texture(iChannel0, vec2(87.5/256.0, 0.25)).r > 0.0) {\n            vec = vec4(0, 0, 1, 1);\n        }\n        if (texture(iChannel0, vec2(83.5/256.0, 0.25)).r > 0.0) {\n            vec = vec4(0, 0, -1, -1);\n        }\n        if (texture(iChannel0, vec2(65.5/256.0, 0.25)).r > 0.0) {\n            vec = vec4(-1, 0, 0, 0);\n        }\n        if (texture(iChannel0, vec2(68.5/256.0, 0.25)).r > 0.0) {\n            vec = vec4(1, 0, 0, 0);\n        }\n        vec = rot * vec;\n        col += vec * iTimeDelta * 4.0;\n        fragColor = col;\n    }\n    \n    if (ivec2(fragCoord) == ivec2(1, 2)) { // mouse delta\n        //if (iMouse.zw == abs(iMouse.zw))\n            fragColor = vec4(iMouse.xy - texelFetch(iChannel1, ivec2(1, 2), 0).zw, iMouse.xy);\n        //else\n        //    fragColor = texelFetch(iChannel1, ivec2(1, 2), 0);\n    }\n    \n    if (ivec2(fragCoord) == ivec2(1, 3)) {\n        fragColor = vec4(texelFetch(iChannel1, ivec2(1, 3), 0).xy + texelFetch(iChannel1, ivec2(1, 2), 0).xy * 0.01, 0, 0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}