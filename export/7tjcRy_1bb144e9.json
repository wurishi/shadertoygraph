{"ver":"0.1","info":{"id":"7tjcRy","date":"1649892840","viewed":293,"name":"Feedback based oil paint filter","username":"Dubswitcher","description":"Accidental result of learning how feedback works in shaders. Very ghostly, but if an image is holding still, the oil-painting-like appearance develops.","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["postprocess","oil","feedback"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = texture(iChannel0, fragCoord/iResolution.xy).rgb;\n    fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float pi = 3.14159265;\n\nfloat mist = 500.;\nfloat feed = 0.02;\n\nfloat hash (in vec2 uv) {\n    vec3 p = vec3(dot(uv.xy,vec2(123.,456.)),dot(uv.xy,vec2(789.,112.)),dot(uv.xy,vec2(345.,678.)));\n    return fract(dot(fract(sin(p*10.)*5000.),vec3(987.,654.,321.)));\n}\n\nvec2 polar (vec2 p) {\n    return vec2 (1.-sqrt(p.x*p.x+p.y*p.y),(atan(p.y,p.x)/pi+1.)/2.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy;\n    vec2 p = fragCoord/res.yy;\n    vec2 uv = fragCoord/res;\n    \n    p.x -= res.x/res.y/2. - sin(iTime*pi)/2.;\n    p.y -= 0.5 - sin(iTime*pi*2.)/4.;\n    \n    //float circ = floor(clamp(polar(p).x,0.,1.)+(0.1-sin(iTime*pi/2.)/16.));\n    //vec3 col = vec3(circ);\n    \n    // Comment this out and uncomment above for a circle demo\n    vec3 col; col = texture(iChannel1,uv).rgb*feed;\n    \n    // effect is more fog-like if (iTime/100.) is added\n    //         into the hash functions here\n    vec2 disp = vec2((hash(uv)-0.5)/mist,\n                     (hash(uv+20.)-0.5)/(mist*(res.y/res.x)));\n    \n    col = clamp(col+(texture(iChannel0,uv+disp).rgb*(1.-feed)),0.,1.);\n    \n    fragColor = vec4(col,1.);\n}","name":"Buffer A","description":"","type":"buffer"}]}