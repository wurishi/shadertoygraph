{"ver":"0.1","info":{"id":"3stSR4","date":"1571567694","viewed":276,"name":"BinoBlob","username":"NuSan","description":"Simple shader to test stereoscopic rendering\nMade for the 3rd issue of Cookie Fanzine that will be released soon\nhttps://fanzine.cookie.paris/\nUse glasses with red on the left eye and cyan on the right eye","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarch","stereoscopic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\tSimple shader to test stereoscopic rendering\n\tMade for the 3rd issue of Cookie Fanzine that will be released soon\n\thttps://fanzine.cookie.paris/\n\t\n\tUse glasses with red on the left eye and cyan on the right eye\n*/\n\n// put to 2 or more to get antialiasing\n#define AA 1\n// put to 1 to get less artifacts but more noise\n#define DITHER 0\n\nfloat time = 16.06;\n// put to 0 to get a pretty fixed image\n#if 1\n\t#define time2 (iTime*0.2)\n\t#define factor 1.0\n#else\n\t#define time2 0.0\n\t#define factor 0.0\n#endif\n\n\nmat2 rot(float a) {\n    float ca=cos(a);\n    float sa=sin(a);\n    return mat2(ca,sa,-sa,ca);    \n}\n\nfloat box(vec3 p, float s) {\n    p=abs(p)-s;\n    return max(p.x, max(p.y,p.z));\n}\n\nfloat box(vec2 p, float s) {\n    p=abs(p)-s;\n    return max(p.x, p.y);\n}\n\n\nfloat map(vec3 p) {\n    \n    float t3=time*2.0;\n    t3=pow(smoothstep(0.0,1.0,fract(t3)),10.0)+floor(t3);\n    t3*=2.0;\n    t3 += sin(time2*0.5)+0.5*factor;\n    \n    vec3 bp=p;\n    \n    float m=10000.0;\n    for(int i=0;i<4; ++i) {\n        float t=0.7+float(i) + time*0.5;\n        p.xz*=rot(t + sin(p.y * 0.075 - t3)*0.2);\n        p.xy*=rot(t*0.7+sin(p.z*0.043 - t3)*0.3);\n        p=abs(p);\n        m=min(m, min(p.x,min(p.y,p.z)));\n        p-=0.7 + sin(p.yzx*0.8 - time2*2.0)*0.4;\n    }\n    \n    float d=m-0.0;\n    d=abs(d-0.2)-0.1;\n    \n    float f=abs(length(p)-5.0)-0.1;\n    f=min(f, abs(box(p.xz,0.5))-0.02);\n    f=min(f, abs(box(p.xy,0.5))-0.02);\n    f=min(f, abs(box(p.yz,0.5))-0.02);\n    f=min(f, abs(box(bp,4.0))-0.1);\n    d=max(d, f)-0.0;\n    \n \treturn d;   \n}\n\nfloat raymarch(vec3 s, vec3 r, float off) {\n    float val=0.0;\n    vec3 p=s;\n    for(int i=0; i<80; ++i) {\n     \tfloat d=abs(map(p))*off;\n        if(d<0.01) {\n            d=0.1;\n            break;\n        }\n        val+=0.01/(0.8+d);\n        p+=r*d;\n    }\n    return val;\n}\n\n#define ZERO (min(iFrame,0))\n\nfloat rnd(vec2 uv) {\n    return fract(dot(sin(uv*752.352+uv.yx*364.588), vec2(127.842)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 sum=vec3(0);\n    \n#if AA>1\n    for( int m=ZERO; m<AA; m++ )\n    for( int n=ZERO; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n\t\tvec2 uv = fragCoord-iResolution.xy*0.5 + o;\n#else    \n        vec2 uv = fragCoord-iResolution.xy*0.5;\n\n#endif\n        \n        float dither  =0.6;\n        #if DITHER\n            dither = 0.55+rnd(uv)*0.1;\n        #endif\n\n        //uv /= iResolution.y;\n        uv /= iResolution.x*0.56;\n\n        vec3 s=vec3(0,0,-25.0 + sin(time*0.8)*0.0);\n        vec3 t=vec3(0);\n\n        float t2=time*0.3;\n        s.xz *= rot(t2+sin(time2)*0.2+0.2*factor);\n        s.xy *= rot(-t2*1.2+sin(time2*0.7)*0.3);\n\n        vec3 cz=normalize(t-s);\n        vec3 cx=normalize(cross(cz, vec3(0,1,0)));\n        vec3 cy=normalize(cross(cz, cx));\n\n        float eyeoff=0.5; // distance between eyes\n\n        float fov = 1.0;\n        float dist = 20.0; // distance of focus\n        vec3 rbase = uv.x*cx+uv.y*cy+fov*cz;\n        vec3 r1=normalize(vec3(rbase + cx * eyeoff / dist));\n        vec3 r2=normalize(vec3(rbase - cx * eyeoff / dist));\n\n        vec3 col=vec3(0);\n        col.x=raymarch(s - eyeoff * cx, r1, dither);\n        col.y=raymarch(s + eyeoff * cx, r2, dither);\n        col.z=col.y;\n\n        //col *= pow(1.2-length(uv),1.0);\n\n        col = smoothstep(0.0,1.0,col);\n        col = pow(col, vec3(0.4545));\n\n        sum += col;\n#if AA>1\n    }\n    sum /= float(AA*AA);\n#endif\n    \n    \n    \n    // Output to screen\n    fragColor = vec4(sum,1.0);\n}","name":"Image","description":"","type":"image"}]}