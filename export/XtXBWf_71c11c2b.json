{"ver":"0.1","info":{"id":"XtXBWf","date":"1513518158","viewed":195,"name":"More Efficient Chaos Game","username":"slerpy","description":"Inspiration: https://www.shadertoy.com/view/4tfBWX","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["math","triangle","chaos","sierpinsky"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\nThis shader is an attempt to rewrite dbrgn's shader\nin a shorter and more efficient way, by utilizing\none of Shadertoys buffers.\n\nHe does a great job explaining, what's going on and\nI highly suggest you go check out his shader\nbefore you go any further!\n\nhttps://www.shadertoy.com/view/4tfBWX\n\nAll the magic is in Buffer A... This layer is boring...\n\nPS: The shader goes a bit funny if you resize it,\nbut it should go back to normal after about 3 seconds.\n\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = step(.5, texture(iChannel0, uv));\n    fragColor *= vec4(1.4*uv, 1.0, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Define the three points of the triangle (Rule 1)\nconst int len = 3;\nconst vec2 points[len] = vec2[len](\n    vec2(.5, .9), vec2(.2, .1), vec2(.8, .1)\n);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Restore last frame\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n    \n    \n    // Setup-if-statement:\n    // Resets the scene every 3 seconds.\n    // (in case this shader runs at 60 fps, which it most likely will)\n    if(iFrame % 180 < 1)\n    {   \n        // Draws a random starting point. (Rule 2)\n        // (starting point is always drawn in the middle,\n        // but it does work with every point, on the canvas!)\n        fragColor = vec4(1.-step(2./iResolution.y, length(uv-.5)));\n        \n        return;\n    }\n    \n    \n    // Checks, whether uv is inbetween one of the endpoints and\n    // a point, which has been drawn previously. (Rule 3, but backwards)\n    fragColor += texture(iChannel0, 2.*(uv-.5*points[iFrame%len]));\n}","name":"Buf A","description":"","type":"buffer"}]}