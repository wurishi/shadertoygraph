{"ver":"0.1","info":{"id":"l3jyDK","date":"1727753388","viewed":24,"name":"Procedural lines","username":"N3rdsyChamplain","description":"Its lines that go down and change colors","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["pretty"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float FREQ = 7.5;\nconst float SPEED = 0.65;\nconst float LENGTH = 0.9;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n//start of this is based on code shown as an example in class by Professor.Winebrenner\n//Normalized pixel coordinates (0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    //change the coordinates so they move by speed times time\n    uv.x += iTime * SPEED;\n    uv.y += iTime * SPEED;\n    //make the displayed bars wider or thinner, larger number means thinner\n    uv *= FREQ;\n    //form it into the bars, gets a fraction version of uv\n    uv = fract(uv);\n    //give it a cool effect where it fades off, this is because smoothstep goes gradiently from the first to the second input via interpolating the third input\n    float t = smoothstep(0.1, LENGTH, uv.y);//uv.x\n    //setup a second fading color\n    float t2 = smoothstep(LENGTH, 1.0, uv.y);\n    //mix the two colors between t and t2 to use in the display\n    float col = mix(t, t2, FREQ);\n    //display everything, use sin and cos to get the visual effect of the lines between the lines\n    fragColor = vec4(cos(col * sin(iTime)) , sin(iTime), t, 1.0);\n}","name":"Image","description":"","type":"image"}]}