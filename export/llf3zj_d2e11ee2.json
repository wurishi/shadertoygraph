{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"\nconst float PI = 3.14159265358979323846264;\n\nfloat scale = 2.0;\nvec2 offset = vec2(+0.001643721971153, +0.822467633298876);\n\nconst int max_iterations = 1000;\nconst int max_colors = 50;\nconst float color_scale = 2.0;\nconst float inverse_max_colors = 1.0 / float(max_colors);\n\nconst int P = 2;\nconst float threshold = 200000.0;\n\n#define cx_mul(a, b) vec2(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x)\n\nvec4 color_ramp(int i) {\n    // Running the index through cos creates a continous ramp.\n    float normalized_mod = mod(float(i), float(max_colors)) * inverse_max_colors;\n\tfloat normalized_cos = (cos(normalized_mod * 2.0 * PI) + 1.0) * 0.5;\n    i = int(float(max_colors) * normalized_cos);\n\n    float factor = float(i) / float(max_colors);\n    float inverse_factor = 1.0 - factor;\n    // An arbritrary ramp of colors\n    return vec4(sqrt(sqrt(factor)), factor, inverse_factor * 0.5, 1.0);\n}\n\nvec4 color_from_ramp(int i, float f) {\n\tvec4 first = color_ramp(i);\n\tvec4 second = color_ramp(i + 1);\n    return first * (1.0 - f) + second * f;\n}\n\nvec4 color_from_iteration(vec2 z, int i) {\n    // Continuous coloring\n    float s = float(i) + log2(log(threshold)) - log2(log(length(z)));\n    s *= color_scale;\n    int first = int(floor(s));\n    return color_from_ramp(first, s - float(first));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 c = vec2(\n        (fragCoord.x / iResolution.x) * 3.5 - 2.5,\n        (fragCoord.y / iResolution.y) * 2.0 - 1.0\n    );\n\n    c *= (scale / exp(iTime * 0.2));\n    c += offset;\n\n    vec2 z = vec2(0.0, 0.0);\n    int final_i;\n    for (int i = 0; i < max_iterations; i++) {\n        final_i = i;\n\n        if (length(z) >= threshold) {\n            break;\n        }\n\n        // z^P + c, P = 2  gives us  z^2 + c\n        z = cx_mul(z, z) + c;\n    }\n\n\tfragColor = color_from_iteration(z, final_i);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"llf3zj","date":"1423274875","viewed":1311,"name":"simple-mandelbrot","username":"jesosk","description":"A simple mandelbrot renderer.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d","mandelbrot"],"hasliked":0,"parentid":"","parentname":""}}