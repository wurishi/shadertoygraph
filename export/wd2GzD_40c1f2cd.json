{"ver":"0.1","info":{"id":"wd2GzD","date":"1548362498","viewed":1216,"name":"Low discrepancy sampling methods","username":"lhog","description":"Low discrepancy sampling methods","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["spiral","poisson","lowdiscrepancy","hammersley","r2"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = acos(0.0) * 2.0;\n\n/*\nconst vec2 Poisson25[25] = vec2[](\n    vec2(-0.978698, -0.0884121),\n    vec2(-0.841121, 0.521165),\n    vec2(-0.71746, -0.50322),\n    vec2(-0.702933, 0.903134),\n    vec2(-0.663198, 0.15482),\n    vec2(-0.495102, -0.232887),\n    vec2(-0.364238, -0.961791),\n    vec2(-0.345866, -0.564379),\n    vec2(-0.325663, 0.64037),\n    vec2(-0.182714, 0.321329),\n    vec2(-0.142613, -0.0227363),\n    vec2(-0.0564287, -0.36729),\n    vec2(-0.0185858, 0.918882),\n    vec2(0.0381787, -0.728996),\n    vec2(0.16599, 0.093112),\n    vec2(0.253639, 0.719535),\n    vec2(0.369549, -0.655019),\n    vec2(0.423627, 0.429975),\n    vec2(0.530747, -0.364971),\n    vec2(0.566027, -0.940489),\n    vec2(0.639332, 0.0284127),\n    vec2(0.652089, 0.669668),\n    vec2(0.773797, 0.345012),\n    vec2(0.968871, 0.840449),\n    vec2(0.991882, -0.657338)\n);\n*/\n\n//not great\nconst vec2 Poisson25_2[25] = vec2[](\n\tvec2( -0.7510110938002273, -0.6039566792285773 ),\n\tvec2( 0.6408644080282628, 0.7329267127527238 ),\n\tvec2( 0.7293589355674837, -0.6284028004767438 ),\n\tvec2( -0.5957694009104804, 0.5713235871280611 ),\n\tvec2( -0.028236853168501944, -0.11974643560440973 ),\n\tvec2( 0.016619453833385096, -0.8818865457183169 ),\n\tvec2( -0.03203142859775049, 0.9483947548301688 ),\n\tvec2( 0.6252466218044417, 0.05549092529622429 ),\n\tvec2( -0.9584347977011871, 0.022016561233310944 ),\n\tvec2( 0.18619677086633526, 0.4048263305026049 ),\n\tvec2( -0.47384677304161044, 0.07846415316582772 ),\n\tvec2( 0.3102414000823007, -0.47064195871715603 ),\n\tvec2( -0.38900234411054746, -0.8643816414262917 ),\n\tvec2( -0.39198477881003463, -0.42352705786496103 ),\n\tvec2( 0.9211031239155967, 0.33808573820336785 ),\n\tvec2( 0.44183145046353894, -0.8921782707261154 ),\n\tvec2( -0.2275489784905676, 0.6081924735219285 ),\n\tvec2( 0.9201392959890402, -0.13482359525973425 ),\n\tvec2( -0.14488716692667863, 0.28868113725330846 ),\n\tvec2( 0.25058620087656347, 0.7474042094140645 ),\n\tvec2( -0.9134278749716114, 0.39181270250683414 ),\n\tvec2( 0.2712999549933981, 0.04410038505578339 ),\n\tvec2( -0.7526996561627354, -0.25214967490773266 ),\n\tvec2( -0.10193116909949458, -0.5884346589832062 ),\n\tvec2( 0.5513120691488587, 0.4120334980174866 )\n);\n\n/*\nconst vec2 Poisson32[32] = vec2[](\n    vec2(-0.975402, -0.0711386),\n    vec2(-0.920347, -0.41142),\n    vec2(-0.883908, 0.217872),\n    vec2(-0.884518, 0.568041),\n    vec2(-0.811945, 0.90521),\n    vec2(-0.792474, -0.779962),\n    vec2(-0.614856, 0.386578),\n    vec2(-0.580859, -0.208777),\n    vec2(-0.53795, 0.716666),\n    vec2(-0.515427, 0.0899991),\n    vec2(-0.454634, -0.707938),\n    vec2(-0.420942, 0.991272),\n    vec2(-0.261147, 0.588488),\n    vec2(-0.211219, 0.114841),\n    vec2(-0.146336, -0.259194),\n    vec2(-0.139439, -0.888668),\n    vec2(0.0116886, 0.326395),\n    vec2(0.0380566, 0.625477),\n    vec2(0.0625935, -0.50853),\n    vec2(0.125584, 0.0469069),\n    vec2(0.169469, -0.997253),\n    vec2(0.320597, 0.291055),\n    vec2(0.359172, -0.633717),\n    vec2(0.435713, -0.250832),\n    vec2(0.507797, -0.916562),\n    vec2(0.545763, 0.730216),\n    vec2(0.56859, 0.11655),\n    vec2(0.743156, -0.505173),\n    vec2(0.736442, -0.189734),\n    vec2(0.843562, 0.357036),\n    vec2(0.865413, 0.763726),\n    vec2(0.872005, -0.927)\n);\n*/\nconst vec2 Poisson32_2[32] = vec2[](\n\tvec2(0.06407013, 0.05409927),\n\tvec2(0.7366577, 0.5789394),\n\tvec2(-0.6270542, -0.5320278),\n\tvec2(-0.4096107, 0.8411095),\n\tvec2(0.6849564, -0.4990818),\n\tvec2(-0.874181, -0.04579735),\n\tvec2(0.9989998, 0.0009880066),\n\tvec2(-0.004920578, -0.9151649),\n\tvec2(0.1805763, 0.9747483),\n\tvec2(-0.2138451, 0.2635818),\n\tvec2(0.109845, 0.3884785),\n\tvec2(0.06876755, -0.3581074),\n\tvec2(0.374073, -0.7661266),\n\tvec2(0.3079132, -0.1216763),\n\tvec2(-0.3794335, -0.8271583),\n\tvec2(-0.203878, -0.07715034),\n\tvec2(0.5912697, 0.1469799),\n\tvec2(-0.88069, 0.3031784),\n\tvec2(0.5040108, 0.8283722),\n\tvec2(-0.5844124, 0.5494877),\n\tvec2(0.6017799, -0.1726654),\n\tvec2(-0.5554981, 0.1559997),\n\tvec2(-0.3016369, -0.3900928),\n\tvec2(-0.5550632, -0.1723762),\n\tvec2(0.925029, 0.2995041),\n\tvec2(-0.2473137, 0.5538505),\n\tvec2(0.9183037, -0.2862392),\n\tvec2(0.2469421, 0.6718712),\n\tvec2(0.3916397, -0.4328209),\n\tvec2(-0.03576927, -0.6220032),\n\tvec2(-0.04661255, 0.7995201),\n\tvec2(0.4402924, 0.3640312)\n);\n\n/*\nconst vec2 Poisson64[64] = vec2[](\n    vec2(-0.934812, 0.366741),\n    vec2(-0.918943, -0.0941496),\n    vec2(-0.873226, 0.62389),\n    vec2(-0.8352, 0.937803),\n    vec2(-0.822138, -0.281655),\n    vec2(-0.812983, 0.10416),\n    vec2(-0.786126, -0.767632),\n    vec2(-0.739494, -0.535813),\n    vec2(-0.681692, 0.284707),\n    vec2(-0.61742, -0.234535),\n    vec2(-0.601184, 0.562426),\n    vec2(-0.607105, 0.847591),\n    vec2(-0.581835, -0.00485244),\n    vec2(-0.554247, -0.771111),\n    vec2(-0.483383, -0.976928),\n    vec2(-0.476669, -0.395672),\n    vec2(-0.439802, 0.362407),\n    vec2(-0.409772, -0.175695),\n    vec2(-0.367534, 0.102451),\n    vec2(-0.35313, 0.58153),\n    vec2(-0.341594, -0.737541),\n    vec2(-0.275979, 0.981567),\n    vec2(-0.230811, 0.305094),\n    vec2(-0.221656, 0.751152),\n    vec2(-0.214393, -0.0592364),\n    vec2(-0.204932, -0.483566),\n    vec2(-0.183569, -0.266274),\n    vec2(-0.123936, -0.754448),\n    vec2(-0.0859096, 0.118625),\n    vec2(-0.0610675, 0.460555),\n    vec2(-0.0234687, -0.962523),\n    vec2(-0.00485244, -0.373394),\n    vec2(0.0213324, 0.760247),\n    vec2(0.0359813, -0.0834071),\n    vec2(0.0877407, -0.730766),\n    vec2(0.14597, 0.281045),\n    vec2(0.18186, -0.529649),\n    vec2(0.188208, -0.289529),\n    vec2(0.212928, 0.063509),\n    vec2(0.23661, 0.566027),\n    vec2(0.266579, 0.867061),\n    vec2(0.320597, -0.883358),\n    vec2(0.353557, 0.322733),\n    vec2(0.404157, -0.651479),\n    vec2(0.410443, -0.413068),\n    vec2(0.413556, 0.123325),\n    vec2(0.46556, -0.176183),\n    vec2(0.49266, 0.55388),\n    vec2(0.506333, 0.876888),\n    vec2(0.535875, -0.885556),\n    vec2(0.615894, 0.0703452),\n    vec2(0.637135, -0.637623),\n    vec2(0.677236, -0.174291),\n    vec2(0.67626, 0.7116),\n    vec2(0.686331, -0.389935),\n    vec2(0.691031, 0.330729),\n    vec2(0.715629, 0.999939),\n    vec2(0.8493, -0.0485549),\n    vec2(0.863582, -0.85229),\n    vec2(0.890622, 0.850581),\n    vec2(0.898068, 0.633778),\n    vec2(0.92053, -0.355693),\n    vec2(0.933348, -0.62981),\n    vec2(0.95294, 0.156896)\n);\n*/\n\nconst vec2 Poisson64_2[64] = vec2[](\n\tvec2(0.0617981, 0.07294159),\n\tvec2(0.6470215, 0.7474022),\n\tvec2(-0.5987766, -0.7512833),\n\tvec2(-0.693034, 0.6913887),\n\tvec2(0.6987045, -0.6843052),\n\tvec2(-0.9402866, 0.04474335),\n\tvec2(0.8934509, 0.07369385),\n\tvec2(0.1592735, -0.9686295),\n\tvec2(-0.05664673, 0.995282),\n\tvec2(-0.1203411, -0.1301079),\n\tvec2(0.1741608, -0.1682285),\n\tvec2(-0.09369049, 0.3196758),\n\tvec2(0.185363, 0.3213367),\n\tvec2(-0.1493771, -0.3147511),\n\tvec2(0.4452095, 0.2580113),\n\tvec2(-0.1080467, -0.5329178),\n\tvec2(0.1604507, 0.5460774),\n\tvec2(-0.4037193, -0.2611179),\n\tvec2(0.5947998, -0.2146744),\n\tvec2(0.3276062, 0.9244621),\n\tvec2(-0.6518704, -0.2503952),\n\tvec2(-0.3580975, 0.2806469),\n\tvec2(0.8587891, 0.4838005),\n\tvec2(-0.1596546, -0.8791054),\n\tvec2(-0.3096867, 0.5588146),\n\tvec2(-0.5128918, 0.1448544),\n\tvec2(0.8581337, -0.424046),\n\tvec2(0.1562584, -0.5610626),\n\tvec2(-0.7647934, 0.2709858),\n\tvec2(-0.3090832, 0.9020988),\n\tvec2(0.3935608, 0.4609676),\n\tvec2(0.3929337, -0.5010948),\n\tvec2(-0.8682281, -0.1990303),\n\tvec2(-0.01973724, 0.6478714),\n\tvec2(-0.3897587, -0.4665619),\n\tvec2(-0.7416366, -0.4377831),\n\tvec2(-0.5523247, 0.4272514),\n\tvec2(-0.5325066, 0.8410385),\n\tvec2(0.3085465, -0.7842533),\n\tvec2(0.8400612, -0.200119),\n\tvec2(0.6632416, 0.3067062),\n\tvec2(-0.4462856, -0.04265022),\n\tvec2(0.06892014, 0.812484),\n\tvec2(0.5149567, -0.7502338),\n\tvec2(0.6464897, -0.4666451),\n\tvec2(-0.159861, 0.1038342),\n\tvec2(0.6455986, 0.04419327),\n\tvec2(-0.7445076, 0.5035095),\n\tvec2(0.9430245, 0.3139912),\n\tvec2(0.0349884, -0.7968109),\n\tvec2(-0.9517487, 0.2963554),\n\tvec2(-0.7304786, -0.01006928),\n\tvec2(-0.5862702, -0.5531025),\n\tvec2(0.3029106, 0.09497032),\n\tvec2(0.09025345, -0.3503742),\n\tvec2(0.4356628, -0.0710125),\n\tvec2(0.4112572, 0.7500054),\n\tvec2(0.3401214, -0.3047142),\n\tvec2(-0.2192158, -0.6911137),\n\tvec2(-0.4676369, 0.6570358),\n\tvec2(0.6295372, 0.5629555),\n\tvec2(0.1253822, 0.9892166),\n\tvec2(-0.1154335, 0.8248222),\n\tvec2(-0.4230408, -0.7129914)\n);\n\nconst vec2 Poisson100[100] = vec2[](\n    vec2(-0.9891574, -0.1059512),\n    vec2(-0.9822294, 0.05140843),\n    vec2(-0.961332, 0.2562195),\n    vec2(-0.9149657, -0.2404464),\n    vec2(-0.8896608, -0.4183828),\n    vec2(-0.8398135, 0.3748641),\n    vec2(-0.8149028, 0.1989844),\n    vec2(-0.8046502, 0.5212684),\n    vec2(-0.7970151, -0.5834194),\n    vec2(-0.7484995, -0.3153634),\n    vec2(-0.738582, -0.09323367),\n    vec2(-0.695694, 0.08865929),\n    vec2(-0.6868832, 0.6336682),\n    vec2(-0.6751406, 0.2777427),\n    vec2(-0.666558, -0.6801786),\n    vec2(-0.631489, -0.4702293),\n    vec2(-0.5870083, 0.518836),\n    vec2(-0.5744062, -0.06333278),\n    vec2(-0.5667221, 0.1699501),\n    vec2(-0.5537653, 0.7677022),\n    vec2(-0.5337034, 0.3299558),\n    vec2(-0.5201509, -0.2033358),\n    vec2(-0.4873925, -0.8545401),\n    vec2(-0.4712743, -0.3607009),\n    vec2(-0.4524891, -0.5142469),\n    vec2(-0.4421883, -0.6830674),\n    vec2(-0.4293752, 0.6299667),\n    vec2(-0.4240644, 0.8706763),\n    vec2(-0.4139857, 0.1598689),\n    vec2(-0.3838707, 0.4078749),\n    vec2(-0.3688077, -0.0358762),\n    vec2(-0.3432877, -0.2311365),\n    vec2(-0.3256257, -0.9325441),\n    vec2(-0.2751555, 0.302412),\n    vec2(-0.2679778, -0.654425),\n    vec2(-0.2554769, -0.4441924),\n    vec2(-0.243476, -0.8034022),\n    vec2(-0.2367678, -0.108045),\n    vec2(-0.2196257, 0.8243803),\n    vec2(-0.2119443, 0.06230118),\n    vec2(-0.1708038, -0.9437978),\n    vec2(-0.1694005, 0.5692244),\n    vec2(-0.136494, 0.3937041),\n    vec2(-0.1318274, -0.2166154),\n    vec2(-0.09781472, -0.5743775),\n    vec2(-0.09480921, 0.2369129),\n    vec2(-0.07638182, -0.0571501),\n    vec2(-0.06661344, -0.7966294),\n    vec2(-0.06305461, -0.3521975),\n    vec2(-0.04525706, 0.6982157),\n    vec2(-0.04149697, 0.9666064),\n    vec2(-0.003192461, -0.9693027),\n    vec2(0.0104818, 0.5000805),\n    vec2(0.03228819, -0.1681713),\n    vec2(0.03715288, -0.673852),\n    vec2(0.08470399, -0.3922319),\n    vec2(0.09848712, -0.8374477),\n    vec2(0.09940207, 0.1117471),\n    vec2(0.1395643, 0.313647),\n    vec2(0.1565993, 0.8555924),\n    vec2(0.1772605, -0.5248074),\n    vec2(0.1899546, 0.5249656),\n    vec2(0.1952665, -0.9595091),\n    vec2(0.213078, -0.07045701),\n    vec2(0.2277649, -0.3361143),\n    vec2(0.247221, 0.7353553),\n    vec2(0.2493455, -0.6874771),\n    vec2(0.269915, 0.07673722),\n    vec2(0.3039587, 0.9087375),\n    vec2(0.3189922, 0.3008468),\n    vec2(0.3215453, -0.1954931),\n    vec2(0.3593478, 0.4527411),\n    vec2(0.3745022, -0.597945),\n    vec2(0.3879738, -0.7821383),\n    vec2(0.4522015, 0.6819367),\n    vec2(0.4591872, -0.4484442),\n    vec2(0.4626173, -0.03955235),\n    vec2(0.4751598, 0.2083394),\n    vec2(0.4894366, 0.8694122),\n    vec2(0.4896614, -0.2676601),\n    vec2(0.5070116, -0.6733028),\n    vec2(0.5525513, 0.436241),\n    vec2(0.5542312, -0.8262905),\n    vec2(0.6012187, 0.7003717),\n    vec2(0.6075609, -0.1610506),\n    vec2(0.6291932, 0.2213627),\n    vec2(0.6300695, -0.5324634),\n    vec2(0.6613995, -0.7056449),\n    vec2(0.6699739, -0.3828001),\n    vec2(0.6705787, 0.01011722),\n    vec2(0.6814164, 0.5618623),\n    vec2(0.7808329, 0.261445),\n    vec2(0.7830279, -0.1817809),\n    vec2(0.8006546, -0.5266678),\n    vec2(0.8030878, 0.4266291),\n    vec2(0.8259325, 0.08734058),\n    vec2(0.8621388, -0.3646038),\n    vec2(0.9531851, 0.3011991),\n    vec2(0.9578334, -0.1584408),\n    vec2(0.9898114, 0.1029227)\n);\n\nconst vec2 Poisson128[128] = vec2[](\n    vec2(-0.9406119, 0.2160107),\n    vec2(-0.920003, 0.03135762),\n    vec2(-0.917876, -0.2841548),\n    vec2(-0.9166079, -0.1372365),\n    vec2(-0.8978907, -0.4213504),\n    vec2(-0.8467999, 0.5201505),\n    vec2(-0.8261013, 0.3743192),\n    vec2(-0.7835162, 0.01432008),\n    vec2(-0.779963, 0.2161933),\n    vec2(-0.7719588, 0.6335353),\n    vec2(-0.7658782, -0.3316436),\n    vec2(-0.7341912, -0.5430729),\n    vec2(-0.6825727, -0.1883408),\n    vec2(-0.6777467, 0.3313724),\n    vec2(-0.662191, 0.5155144),\n    vec2(-0.6569989, -0.7000636),\n    vec2(-0.6021447, 0.7923283),\n    vec2(-0.5980815, -0.5529259),\n    vec2(-0.5867089, 0.09857152),\n    vec2(-0.5774597, -0.8154474),\n    vec2(-0.5767041, -0.2656419),\n    vec2(-0.575091, -0.4220052),\n    vec2(-0.5486979, -0.09635002),\n    vec2(-0.5235587, 0.6594529),\n    vec2(-0.5170338, -0.6636339),\n    vec2(-0.5114055, 0.4373561),\n    vec2(-0.4844725, 0.2985838),\n    vec2(-0.4803245, 0.8482798),\n    vec2(-0.4651957, -0.5392771),\n    vec2(-0.4529685, 0.09942394),\n    vec2(-0.4523471, -0.3125569),\n    vec2(-0.4268422, 0.5644538),\n    vec2(-0.4187512, -0.8636028),\n    vec2(-0.4160798, -0.0844868),\n    vec2(-0.3751733, 0.2196607),\n    vec2(-0.3656596, -0.7324334),\n    vec2(-0.3286595, -0.2012637),\n    vec2(-0.3147397, -0.0006635741),\n    vec2(-0.3135846, 0.3636878),\n    vec2(-0.3042951, -0.4983553),\n    vec2(-0.2974239, 0.7496996),\n    vec2(-0.2903037, 0.8890813),\n    vec2(-0.2878664, -0.8622097),\n    vec2(-0.2588971, -0.653879),\n    vec2(-0.2555692, 0.5041648),\n    vec2(-0.2553292, -0.3389159),\n    vec2(-0.2401368, 0.2306108),\n    vec2(-0.2124457, -0.09935001),\n    vec2(-0.1877905, 0.1098409),\n    vec2(-0.1559879, 0.3356432),\n    vec2(-0.1499449, 0.7487829),\n    vec2(-0.146661, -0.9256138),\n    vec2(-0.1342774, 0.6185387),\n    vec2(-0.1224529, -0.3887629),\n    vec2(-0.116467, 0.8827716),\n    vec2(-0.1157598, -0.539999),\n    vec2(-0.09983152, -0.2407187),\n    vec2(-0.09953719, -0.78346),\n    vec2(-0.08604223, 0.4591112),\n    vec2(-0.02128129, 0.1551989),\n    vec2(-0.01478849, 0.6969455),\n    vec2(-0.01231739, -0.6752576),\n    vec2(-0.005001599, -0.004027164),\n    vec2(0.00248426, 0.567932),\n    vec2(0.00335562, 0.3472346),\n    vec2(0.009554717, -0.4025437),\n    vec2(0.02231783, -0.1349781),\n    vec2(0.04694207, -0.8347212),\n    vec2(0.05412609, 0.9042216),\n    vec2(0.05812819, -0.9826952),\n    vec2(0.1131321, -0.619306),\n    vec2(0.1170737, 0.6799788),\n    vec2(0.1275105, 0.05326218),\n    vec2(0.1393405, -0.2149568),\n    vec2(0.1457873, 0.1991508),\n    vec2(0.1474208, 0.5443151),\n    vec2(0.1497117, -0.3899909),\n    vec2(0.1923773, 0.3683496),\n    vec2(0.2110928, -0.7888536),\n    vec2(0.2148235, 0.9586087),\n    vec2(0.2152219, -0.1084362),\n    vec2(0.2189204, -0.9644538),\n    vec2(0.2220028, -0.5058427),\n    vec2(0.2251696, 0.779461),\n    vec2(0.2585723, 0.01621339),\n    vec2(0.2612841, -0.2832426),\n    vec2(0.2665483, -0.6422054),\n    vec2(0.2939872, 0.1673226),\n    vec2(0.3235748, 0.5643662),\n    vec2(0.3269232, 0.6984669),\n    vec2(0.3425438, -0.1783788),\n    vec2(0.3672505, 0.4398117),\n    vec2(0.3755714, -0.8814359),\n    vec2(0.379463, 0.2842356),\n    vec2(0.3822978, -0.381217),\n    vec2(0.4057849, -0.5227674),\n    vec2(0.4168737, -0.6936938),\n    vec2(0.4202749, 0.8369391),\n    vec2(0.4252189, 0.03818182),\n    vec2(0.4445904, -0.09360636),\n    vec2(0.4684285, 0.5885228),\n    vec2(0.4952184, -0.2319764),\n    vec2(0.5072351, 0.3683765),\n    vec2(0.5136194, -0.3944138),\n    vec2(0.519893, 0.7157083),\n    vec2(0.5277841, 0.1486474),\n    vec2(0.5474944, -0.7618791),\n    vec2(0.5692734, 0.4852227),\n    vec2(0.582229, -0.5125455),\n    vec2(0.583022, 0.008507785),\n    vec2(0.6500257, 0.3473313),\n    vec2(0.6621304, -0.6280518),\n    vec2(0.6674218, -0.2260806),\n    vec2(0.6741871, 0.6734863),\n    vec2(0.6753459, 0.1119422),\n    vec2(0.7083091, -0.4393666),\n    vec2(0.7106963, -0.102099),\n    vec2(0.7606754, 0.5743545),\n    vec2(0.7846709, 0.2282225),\n    vec2(0.7871446, 0.3891495),\n    vec2(0.8071781, -0.5257092),\n    vec2(0.8230689, 0.002674922),\n    vec2(0.8531976, -0.3256475),\n    vec2(0.8758298, -0.1824844),\n    vec2(0.8797691, 0.1284946),\n    vec2(0.926309, 0.3576975),\n    vec2(0.9608918, -0.03495717),\n    vec2(0.972032, 0.2271516)\n);\n\n\n#define HASHSCALE3 vec3(443.897, 441.423, 437.195)\nvec2 hash22(vec2 p) {\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec2 hash22a(vec2 p) {\n\tvec3 p3 = fract(vec3(p.xy, mod(0.01*iTime, 1.0)) * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\n//FNV 1a\nuint fnvHash(uint x) {\n    uint hash = 0x811C9DC5u; //FNV offset basis\n    for (uint i = 0u; i < 4u; ++i) {\n        uint xb = ((x >> (8u * i)) & 0xFFu);\n        hash = hash ^ xb;\n        hash *= 0x1000193u; // FNV prime\n        \n    }\n    return hash;\n}\n\n\n#define SNORM(xy) (xy * 2.0 - 1.0)\n#define NORM(xy) (xy * 0.5 + 0.5)\n\n#define DISK(xy) (xy * sqrt( 1.0 - 0.5 * xy * xy ).yx)\n\n#define DISK_POLAR(xy) (vec2(pow(NORM(xy.x), 0.8) * cos(pi * xy.y), pow(NORM(xy.x), 0.8) * sin(pi * xy.y)) * 2.0 / (1.0 + NORM(xy.x)))\n\n// Lame way...\n#define DISKLIN_FACTOR 2.0\n#define DISKLIN(xy) (xy * (length(xy) + DISKLIN_FACTOR) / (1.0 + DISKLIN_FACTOR))\n\n\n\n// vec2([0, 1])\nvec2 HammersleyNorm(int i, int N) {\n    // principle: reverse bit sequence of i\n    \n\tuint b =  ( uint(i) << 16u) | (uint(i) >> 16u );\n\tb = (b & 0x55555555u) << 1u | (b & 0xAAAAAAAAu) >> 1u;\n\tb = (b & 0x33333333u) << 2u | (b & 0xCCCCCCCCu) >> 2u;\n\tb = (b & 0x0F0F0F0Fu) << 4u | (b & 0xF0F0F0F0u) >> 4u;    \n\tb = (b & 0x00FF00FFu) << 8u | (b & 0xFF00FF00u) >> 8u;\n    \n    // makes correlation H(i) with H(i+2^k) slighly less visible\n    // makes shader significantly slower (try N ~ 4000 and see)\n    #if 1\n    \tb = fnvHash(b);\n    #endif\n\n\treturn vec2( i, b ) / vec2( N, 0xffffffffU );\n}\n\n//handcrafted magic numbers. No idea why they work better\nconst vec2 p0 = vec2(pi/2.0, 0.5);\nvec2 GoldenRatioNorm(int i) {\n    return fract(p0 + vec2(i*12664745, i*9560333)/float(0x1000000));\n}\n\nconst float spiralLen = 19.6;\nvec2 Spiral2D(int i, int N) {\n    float s = float(i) / float(N);\n    float b = sqrt(s);\n    float a = b * pi * spiralLen;\n    return vec2(sin(a), cos(a)) * b;\n}\n\n// http://blog.marmakoide.org/?p=1\nconst float goldenAngle = pi * (3.0 - sqrt(5.0));\nvec2 Spiral2D2(int i, int N) {\n    float theta = float(i) * goldenAngle;\n    float r = sqrt(float(i)) / sqrt(float(N));\n    return vec2 (r * cos(theta), r * sin(theta));\n}\n\nconst float invGR1 = 0.61803398875;\n\n// unfinished, might need changes\n// valid N = 4 * exp2(nn) - 1, so 4, 12, 28, 60, etc.\nvec2 Concentric1(int i, int N) {\n    float ringI = ceil(log2(float(i + 1) / 4.0 + 1.0));\n    float ringN = ceil(log2(float(N + 1) / 4.0 + 1.0));\n    \n\tfloat RMul = 1.0 / (float(ringN) - 1.0);    \n    \n    float RSub = 4.0 * exp2(ringI - 1.0);\n    \n    float ringS = float(i) - 4.0 * (exp2(ringI - 1.0) - 1.0);\n    \n    float R = RMul * ringI;\n    float Phi = ringS / RSub;\n    Phi += 0.25 * ringI / ringN;\n    //Phi += fract(0.5 + ringI * invGR1);\n    Phi *= 2.0 * pi;\n    vec2 res = vec2(cos(Phi), sin(Phi)) * R;\n    return res;\n}\n\n// valid N = nn * nn, so 4, 9, 16, 25, 36, etc.\nvec2 Concentric2(int i, int N) {\n    float ringI = floor(sqrt(float(i)));\n    float ringN = floor(sqrt(float(N)));\n    \n\tfloat RMul = 1.0 / (float(ringN) - 1.0);\n    \n    float RSub = 2.0 * ringI + 1.0;\n    \n    float ringS = float(i) - ringI * ringI;\n    \n    float R = RMul * ringI;\n    float Phi = ringS / RSub;\n    Phi += 0.25 * ringI / ringN;\n    //Phi += fract(0.5 + ringI * invGR1);\n    Phi *= 2.0 * pi;\n    vec2 res = vec2(cos(Phi), sin(Phi)) * R;\n    return res;\n}\n\n\n\n\n//lookup methods\n#define POISSON_25 1\n#define POISSON_32 2\n#define POISSON_64 3\n#define POISSON_100 4\n#define POISSON_128 5\n\n//ALU methods\n#define HAMMERSLEY_SQUARE 10\n#define HAMMERSLEY_DISK 11\n#define HAMMERSLEY_DISK2 12\n#define HAMMERSLEY_DISK_APPROX 13\n#define HAMMERSLEY_DISK_POLAR 14\n\n#define SPIRAL 20\n#define SPIRAL2 21\n\n#define GR_SQUARE 30\n#define GR_DISK 31\n#define GR_DISK2 32\n#define GR_DISK_APPROX 33\n#define GR_DISK_POLAR 34\n\n#define CONCENTRIC1 40\n#define CONCENTRIC2 41\n\n// sampling method\n#define SAMPLE HAMMERSLEY_SQUARE\n\n// Two main params for some ALU methods\n// Hammersley and GR don't work too well before several dozen of samples\n#define NUM_SAMPLES 128\n//change hash22a below to hash22 to remove animation and vice versa\n//#define DO_RANDOMIZE\n\n#ifdef DO_RANDOMIZE\n\t#define RANDOMIZE_PERCENT ( min(0.05, 0.05 * float(128) / float(NUM_SAMPLES)) )\n\t#define RANDOMIZE(x) clamp(x + RANDOMIZE_PERCENT * SNORM(hash22a(x)), vec2(-1.0), vec2(1.0))\n#else\n\t#define RANDOMIZE(x) (x)\n#endif\n\n\n#define FOUR_TO_PI 4.0 / pi\n#define NUM_SAMPLES_X int(ceil(float(NUM_SAMPLES) * FOUR_TO_PI)) + 1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 R = iResolution.xy;\n    vec2 uvPN = ( 2.0*fragCoord - R ) / R.y;\n\n    float closest = 10000.0;\n    \n    #if (SAMPLE == POISSON_25)\n        for (int i = 0; i < 25; i++) {\n            closest = min(closest, distance(uvPN, Poisson25_2[i]));\n        }\n    #elif (SAMPLE == POISSON_32)\n        for (int i = 0; i < 32; i++) {\n            closest = min(closest, distance(uvPN, Poisson32_2[i]));\n        }    \n    #elif (SAMPLE == POISSON_64)\n        for (int i = 0; i < 64; i++) {\n            closest = min(closest, distance(uvPN, Poisson64_2[i]));\n        }\n    #elif (SAMPLE == POISSON_100)\n        for (int i = 0; i < 100; i++) {\n            closest = min(closest, distance(uvPN, Poisson100[i]));\n        }    \n    #elif (SAMPLE == POISSON_128)\n        for (int i = 0; i < 128; i++) {\n            closest = min(closest, distance(uvPN, Poisson128[i]));\n        }\n    #elif (SAMPLE == HAMMERSLEY_SQUARE)\n        for (int i = 0; i < NUM_SAMPLES; i++) {\n            closest = min(closest, distance( uvPN, RANDOMIZE(SNORM(HammersleyNorm(i, NUM_SAMPLES))) ));\n        }    \n    #elif (SAMPLE == HAMMERSLEY_DISK)\n        for (int i = 0; i < NUM_SAMPLES; i++) {\n            closest = min(closest, distance( uvPN, DISK(RANDOMIZE(SNORM(HammersleyNorm(i, NUM_SAMPLES)))) ));\n        }\n    #elif (SAMPLE == HAMMERSLEY_DISK2)\n        for (int i = 0; i < NUM_SAMPLES; i++) {\n            closest = min(closest, distance( uvPN, DISKLIN(RANDOMIZE(DISK(SNORM(HammersleyNorm(i, NUM_SAMPLES))))) ));\n        }\n    #elif (SAMPLE == HAMMERSLEY_DISK_APPROX)\n        for (int i = 0; i < NUM_SAMPLES_X; i++) {\n            vec2 v = RANDOMIZE(SNORM(HammersleyNorm(i, NUM_SAMPLES_X)));\n            if (dot(v,v) <= 1.0)\n            \tclosest = min(closest, distance(uvPN,  v ));\n        }\n    #elif (SAMPLE == HAMMERSLEY_DISK_POLAR)\n        for (int i = 0; i < NUM_SAMPLES; i++) {\n            closest = min(closest, distance( uvPN, RANDOMIZE(DISK_POLAR(SNORM(HammersleyNorm(i, NUM_SAMPLES)))) ));\n        }    \n    #elif (SAMPLE == SPIRAL)\n        for (int i = 0; i < NUM_SAMPLES; i++) {\n            closest = min(closest, distance(uvPN, RANDOMIZE(Spiral2D(i, NUM_SAMPLES))));\n        }\n    #elif (SAMPLE == SPIRAL2)\n        for (int i = 0; i < NUM_SAMPLES; i++) {\n            closest = min(closest, distance(uvPN, RANDOMIZE(Spiral2D2(i, NUM_SAMPLES))));\n        }    \n    #elif (SAMPLE == GR_SQUARE)\n        for (int i = 0; i < NUM_SAMPLES; i++) {\n            closest = min(closest, distance(uvPN,  RANDOMIZE(SNORM(GoldenRatioNorm(i))) ));\n        }\n    #elif (SAMPLE == GR_DISK)\n        for (int i = 0; i < NUM_SAMPLES; i++) {\n            closest = min(closest, distance(uvPN,  DISK(RANDOMIZE(SNORM(GoldenRatioNorm(i)))) ));\n        }\n    #elif (SAMPLE == GR_DISK2)\n        for (int i = 0; i < NUM_SAMPLES; i++) {\n            closest = min(closest, distance(uvPN,  DISKLIN(RANDOMIZE(DISK(SNORM(GoldenRatioNorm(i))))) ));\n        }    \n    #elif (SAMPLE == GR_DISK_APPROX)\n        for (int i = 0; i < NUM_SAMPLES_X; i++) {\n            vec2 v = RANDOMIZE(SNORM(GoldenRatioNorm(i)));\n            if (dot(v,v) <= 1.0)\n            \tclosest = min(closest, distance(uvPN,  v ));\n        }\n    #elif (SAMPLE == GR_DISK_POLAR)\n    \tfor (int i = 0; i < NUM_SAMPLES; i++) {\n            closest = min(closest, distance(uvPN,  RANDOMIZE(DISK_POLAR(SNORM(GoldenRatioNorm(i)))) ));\n        }\n    #elif (SAMPLE == CONCENTRIC1)\n        float Nn = round(log2(0.25 * float(NUM_SAMPLES)));\n        Nn = exp2(Nn) * 4.0;    \n        for (int i = 0; i < int(Nn); i++) {\n            closest = min(closest, distance(uvPN,  RANDOMIZE(Concentric1(i, int(Nn))) ));\n        }    \n    #elif (SAMPLE == CONCENTRIC2)\n        float Nn = round(sqrt(float(NUM_SAMPLES)));\n        Nn *= Nn;    \n        for (int i = 0; i < int(Nn); i++) {\n            closest = min(closest, distance(uvPN,  RANDOMIZE(Concentric2(i, int(Nn))) ));\n        }        \n    #endif\n    \n    vec3 col = vec3( 1.0 - smoothstep(0.0, 0.03 * sqrt(128.0 / float(NUM_SAMPLES)), closest) );\n    col.g += float(abs(1.0-abs(uvPN.x)) < 0.005);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}