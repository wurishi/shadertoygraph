{"ver":"0.1","info":{"id":"4tS3zt","date":"1431214366","viewed":262,"name":"Dichromatic Vision","username":"Yaniel","description":"A shader that filters out all colours that aren't red.\nEDIT: Generalised the shader to sort of a bandpass filter for colours.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["postprocessing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"// conversion routines from http://stackoverflow.com/questions/15095909/from-rgb-to-hsv-in-opengl-glsl\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat xor(bool a, bool b)\n{\n\treturn float((a || b) && !(a && b));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv.y = 1.0-uv.y;\n    uv.x = fract(uv.x+0.5);\n    vec4 color = texture(iChannel0, uv);\n    \n    vec3 hsv = vec3(uv.x, 1.0, 0.5+0.5*xor(mod(uv.x,0.1) > 0.05, mod(uv.y,0.1) > 0.05));\n    //0.76388 to 0.06944\n    if (uv.y < 0.525)\n\t\thsv.y = min(smoothstep(0.4,0.5,abs(fract(hsv.x-0.1*iTime)-0.5)), smoothstep(0.15, 1.0, hsv.y));    \n\tfragColor = vec4(hsv2rgb(hsv), 1.0);\n}","name":"","description":"","type":"image"}]}