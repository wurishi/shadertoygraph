{"ver":"0.1","info":{"id":"4dy3zw","date":"1453627825","viewed":529,"name":"Double-slit experiment","username":"davidar","description":"The classical double-slit experiment, demonstrating wave interference. I wanted to do a quantum version, but wasn't able to solve the SchrÃ¶dinger equation fast enough without being able to run buffers multiple times per frame.","likes":23,"published":1,"flags":32,"usePreview":0,"tags":["2d","wave","experiment","interference","physics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    fragColor.x = 5.*texture(iChannel0, fragCoord.xy/iResolution.xy).x;\n    fragColor.z = 5.*texture(iChannel1, fragCoord.xy/iResolution.xy).x;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI 3.14159265358979\nfloat sq(float x) { return x*x; }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    if(iFrame < 10) { // wave packet\n        fragColor.x = exp(-0.5 * sq(length(vec2(0,iResolution.y/2.) - fragCoord.xy)/15.)) * cos(fragCoord.x);\n        return;\n    }\n\n    // barrier\n    if(iResolution.x/2. - 5.  < fragCoord.x && fragCoord.x < iResolution.x/2. + 5. &&\n        !(iResolution.y/2. - 15. < fragCoord.y && fragCoord.y < iResolution.y/2. - 5.) &&\n        !(iResolution.y/2. + 5.  < fragCoord.y && fragCoord.y < iResolution.y/2. + 15.))\n        return;\n\n    vec2 q = fragCoord.xy/iResolution.xy;\n    vec3 e = vec3(vec2(1)/iResolution.xy,0);\n\n    float c = texture(iChannel0, q).x;\n    float C = texture(iChannel1, q).x;\n    float N = texture(iChannel1, q+e.zy).x;\n    float E = texture(iChannel1, q+e.xz).x;\n    float S = texture(iChannel1, q-e.zy).x;\n    float W = texture(iChannel1, q-e.xz).x;\n\n    // explicit approximation to the wave equation\n    // <https://www.ibiblio.org/e-notes/webgl/gpu/flat_wave.htm>\n    fragColor.x = 2.*C - c + (N + E + S + W - 4.*C) * 0.2;\n}\n","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define PI 3.14159265358979\nfloat sq(float x) { return x*x; }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    if(iFrame < 10) { // wave packet\n        fragColor.x = exp(-0.5 * sq(length(vec2(0,iResolution.y/2.) - fragCoord.xy)/15.)) * cos(fragCoord.x);\n        return;\n    }\n\n    // barrier\n    if(iResolution.x/2. - 5.  < fragCoord.x && fragCoord.x < iResolution.x/2. + 5. &&\n        !(iResolution.y/2. - 15. < fragCoord.y && fragCoord.y < iResolution.y/2. - 5.) &&\n        !(iResolution.y/2. + 5.  < fragCoord.y && fragCoord.y < iResolution.y/2. + 15.))\n        return;\n\n    vec2 q = fragCoord.xy/iResolution.xy;\n    vec3 e = vec3(vec2(1)/iResolution.xy,0);\n\n    float c = texture(iChannel0, q).x;\n    float C = texture(iChannel1, q).x;\n    float N = texture(iChannel1, q+e.zy).x;\n    float E = texture(iChannel1, q+e.xz).x;\n    float S = texture(iChannel1, q-e.zy).x;\n    float W = texture(iChannel1, q-e.xz).x;\n\n    // explicit approximation to the wave equation\n    // <https://www.ibiblio.org/e-notes/webgl/gpu/flat_wave.htm>\n    fragColor.x = 2.*C - c + (N + E + S + W - 4.*C) * 0.2;\n}\n","name":"Buf B","description":"","type":"buffer"}]}