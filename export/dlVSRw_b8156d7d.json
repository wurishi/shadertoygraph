{"ver":"0.1","info":{"id":"dlVSRw","date":"1686003422","viewed":61,"name":"blue fractal kaleidoscope ","username":"ctwm","description":"exploring creative coding assisted by ai","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","kaleidoscope","ai"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // ensure 1:1 aspect ratio and centering\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    // create a zooming effect\n    float zoom = 1.0 - 0.3 * sin(0.3 * iTime);\n    uv *= zoom;\n    \n    vec2 p = uv;\n    for(int i = 0; i < 6; i++) // Increase the iterations here\n    {\n        p = abs(p) / dot(p, p) - 0.659;\n    }\n\n    float a = atan(p.x, p.y);\n    float r = length(p);\n\n    // Change the base and varying components of the color calculation\n    vec3 color = vec3(0.0, 0.0, 0.5) + vec3(0.0, 1.0, 0.0) * cos(iTime + vec3(0,2,4) + a*vec3(1,1,1)) \n                             + vec3(0.0, 0.0, 1.0) * sin(iTime + vec3(0,2,4) + a*vec3(1,1,1));\n\n    color *= smoothstep(0.02, 0.03, r);\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}