{"ver":"0.1","info":{"id":"flBGzG","date":"1624067504","viewed":72,"name":"Hilbert Curve?","username":"xingyzt","description":"2D space-filling Hilbert curve.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["hilbertcurve"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Implementation of a paper by John Skilling\n\nivec4 transposeToAxes(ivec4 A, int b, int n)\t// position, #bits, dimension\n{\n\tint N = 2 << (b - 1), P, Q, t;\n\tint i;\n\t// Gray decode by H ^ (H/2)\n\tt = A[n - 1] >> 1;\n\tfor (i = n - 1; i >= 0; i--) A[i] ^= A[i - 1];\n\tA[0] ^= t;\n\t// Undo excess work\n\tfor (Q = 2; Q != N; Q <<= 1)\n\t{\n\t\tP = Q - 1;\n\t\tfor (i = n - 1; i >= 0; i--)\n\t\t\tif ((A[i] &Q) == 1) A[0] ^= P;\t// invert\n\t\t\telse\n\t\t\t{\n\t\t\t\tt = (A[0] ^ A[i]) &P;\n\t\t\t\tA[0] ^= t;\n\t\t\t\tA[i] ^= t;\n\t\t\t}\n\t}\t// exchange\n\treturn A;\n}\nivec4 axesToTranspose(ivec4 A, int b, int n)\t// position, #bits, dimension\n{\n\tint M = 1 << (b - 1), P, Q, t;\n\tint i;\n\t// Inverse undo\n\tfor (Q = M; Q > 1; Q >>= 1)\n\t{\n\t\tP = Q - 1;\n\t\tfor (i = 0; i < n; i++)\n\t\t\tif ((A[i] &Q) == 1) A[0] ^= P;\t// invert\n\t\t\telse\n\t\t\t{\n\t\t\t\tt = (A[0] ^ A[i]) &P;\n\t\t\t\tA[0] ^= t;\n\t\t\t\tA[i] ^= t;\n\t\t\t}\n\t}\t// exchange\n\t// Gray encode\n\tfor (i = 1; i < n; i++) A[i] ^= A[i - 1];\n\tt = 0;\n\tfor (Q = M; Q > 1; Q >>= 1)\n\t\tif ((A[n - 1] &Q) == 1) t ^= Q - 1;\n\tfor (i = 0; i < n; i++) A[i] ^= t;\n\treturn A;\n}\nint transposeToInt(ivec4 A, int b, int n)\n{\n\tint x = 0, i, j;\n\tfor (i = 0; i < b; i++)\n\t\tfor (j = 0; j < n; j++)\n\t\t\tx += (A[j] >> i &1) << ((i + 1) *n - (j + 1));\t// digit << place\n\treturn x;\n}\nivec4 intToTranspose(int x, int b, int n)\n{\n\tivec4 A;\n\tint i, j;\n\tfor (i = 0; i < b; i++)\n\t\tfor (j = 0; j < n; j++)\n\t\t\tA[n - j - 1] += ((x >> (i *n + j)) &1) << i; // I have no idea how I solved this inverse\n\treturn A;\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    int bits = 8;\n    float scale = exp2(float(2*bits));\n\tivec4 uv = ivec4(fragCoord,0,0);\n    \n\tvec3 col = vec3(\n                transposeToInt(\n                    axesToTranspose(\n                        uv,\n                        bits,\n                        2\n                    ),\n                    bits,\n                    2\n                )\n    )/scale;\n\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}