{"ver":"0.1","info":{"id":"7lVGRh","date":"1637552192","viewed":113,"name":"Second_Shader Mororo","username":"mororo250","description":"Second shader of my tree months weekly shader challenge","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["collision"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright © 2021 João Marcos Mororo Costa\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvec2 circle_tex_pos(int index)\n{\n   float row = floor(float(2 * index) /iResolution.x); \n   vec2 pos = vec2(2.0 * float(index) - row * iResolution.x/2.0, row);\n   pos += .5;\n   return pos;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Correct aspectRatop\n    float aspectRatio = iResolution.x/iResolution.y;\n    uv.x *= aspectRatio;\n    \n    vec3 color = vec3(0.0);\n    \n    // circle. // In this code two circles can't be at the same space.\n    for(int i = 0; i < NUMBER_OF_CIRCLES; i++)\n    {\n        vec2 tex_pos = circle_tex_pos(i);\n        vec2 center = texture(iChannel0, tex_pos/iResolution.xy).xy;\n    \n        float d = distance(center, uv);\n        vec4 aux = texture(iChannel0, (tex_pos + vec2(1.0, 0.0))/iResolution.xy);\n        float radius = aux.w;\n        if (d < radius)\n        {\n            color = aux.xyz;\n            color = smoothstep(radius, radius - 4.0/iResolution.y, d) * color;\n            break;\n        }\n    }\n\n    // Output to screen    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Use to pixels to save circle information:\n// Use the first to save position and velocity vector of the circle.\n// The second to save color and size of the circle.\n\n// Circles Initial Positions and velicities\nvec2 pos[8] = vec2[8](vec2(1.0, 0.40), vec2(0.5, 0.80), \n    vec2(1.5, 0.70), vec2(0.2, 0.20), vec2(1.4, 0.30),\n    vec2(0.75, 0.20), vec2(1.1, 0.80), vec2(0.5, 0.5));\n    \nvec2 vel[8] = vec2[8](vec2(0.005, -0.002), vec2(-0.003, 0.005), \n    vec2(-0.005, 0.002), vec2(0.003, -0.005), vec2(0.002, -0.002),\n    vec2(-0.003, 0.005), vec2(0.001, -0.007), vec2(-0.004, 0.002));\n  \n//\n// Return circle index and if indicates with 0 pos/velocity or 1 color and circle.\nvec2 get_circle(vec2 frag_coord)\n{\n    frag_coord = floor(frag_coord);\n    return vec2(floor(frag_coord.y*(iResolution.x/2.0f)) + frag_coord.x/2.0f, \n       !(int(frag_coord.x) % 2 == 0));\n}\n\nvec2 circle_tex_pos(int index)\n{\n   float row = floor(float(2 * index) /iResolution.x); \n   vec2 pos = vec2(2.0 * float(index) - row * iResolution.x/2.0, row);\n   pos += .5;\n   return pos;\n}\n\n// In this case the mass of the circle is equal the square root of the raidus.\nvec2 handle_circles_hit(int index, vec4 fist_info, float first_radius)\n{\n    for(int i = 0; i < NUMBER_OF_CIRCLES; i++)\n    {\n        if( i == index)\n            continue;\n        \n        vec2 tex_pos = circle_tex_pos(i)/iResolution.xy;\n        vec4 second_info = texture(iChannel0, tex_pos);\n        \n        // Check if it's a possible hit.\n        if(second_info.x - fist_info.x <= 0.2)\n        {\n            if(distance(fist_info.xy, second_info.xy) < 0.2) // Colision Detected.\n            {\n                // Callculate normal\n                vec2 normal = normalize(fist_info.xy - second_info.xy);\n                vec2 unit_tagent = vec2(-normal.y, normal.x);\n                \n                float velocity_normal_2 = dot(normal, second_info.zw);\n                float velocity_tangent = dot(unit_tagent, fist_info.zw);\n                \n                return vec2(velocity_normal_2*normal + velocity_tangent*unit_tagent);\n            }\n        }\n    }\n        return fist_info.zw;\n}\n\nvec2 handle_hit(vec2 pos, vec2 velocity, float radius)\n{\n    if(pos.x + radius >= 1.0 * iResolution.x/iResolution.y || pos.x - radius <= 0.0)\n    {\n        velocity.x = - velocity.x;\n    }\n    if(pos.y + radius >= 1.0 || pos.y - radius <= 0.0)\n    {\n        velocity.y = - velocity.y;\n    }\n    return velocity;\n}    \n \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 circle_header = get_circle(fragCoord);\n    int circle_index = int(circle_header.x);\n    \n    if(circle_index > NUMBER_OF_CIRCLES)\n    {\n        fragColor = vec4(0.0);\n    }\n    else\n    {\n        vec4 circle_info = texture(iChannel0, uv);\n        if(circle_header.y == 0.0)\n        {\n            if(iFrame == 0)\n            {\n                fragColor = vec4(pos[circle_index], vel[circle_index]);\n            }\n            else\n            {\n              \n                circle_info.zw = handle_hit(circle_info.xy, circle_info.zw, \n                    texture(iChannel0, uv + vec2(1.0/ iResolution.x, 0.0)).w);\n                circle_info.zw = handle_circles_hit(circle_index, circle_info, \n                    texture(iChannel0, uv + vec2(1.0/ iResolution.x, 0.0)).w);\n                    \n                fragColor = vec4(circle_info.xy + circle_info.zw, circle_info.zw);\n            }\n        }\n        else\n        {\n           fragColor = vec4(vec3(0.5 + \n                    0.5 * cos(iTime + uv.xyx + vec3(0.0, 2.0, 4.0))), 0.1);\n        }\n    }\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define NUMBER_OF_CIRCLES 8","name":"Common","description":"","type":"common"}]}