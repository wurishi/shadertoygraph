{"ver":"0.1","info":{"id":"WscSDn","date":"1571745655","viewed":268,"name":"Gaussian positional jittering","username":"EliasHasle","description":"Simple example of jittering with single position samples from Gaussian distributions around input positions.","likes":2,"published":1,"flags":2,"usePreview":0,"tags":["jittering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265258979323846\n#define SIGMA 10.0\n\n//Source: http://byteblacksmith.com/improvements-to-the-canonical-one-liner-glsl-rand-for-opengl-es-2-0/\nfloat rand(vec2 co)\n{\n    highp float a = 12.9898;\n    highp float b = 78.233;\n    highp float c = 43758.5453;\n    highp float dt= dot(co.xy ,vec2(a,b));\n    highp float sn= mod(dt,3.14);\n    return fract(sin(sn) * c);\n}\n\nvec2 boxMuller( in float r1, in float r2 ) {\n    float r = sqrt(-2.*log(1.-r1));\n    float theta = 2.*PI*r2;\n    return r*vec2(cos(theta), sin(theta));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\t//Time-varying offset\n    vec2 offset = (SIGMA/length(iResolution.xy))*boxMuller( rand(uv+iTime), rand(uv+1.+3.*iTime) );\n\n    uv += offset;\n    \n    vec3 col = texture(iChannel0, uv).xyz;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}