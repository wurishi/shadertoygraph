{"ver":"0.1","info":{"id":"XXtXRn","date":"1718531581","viewed":89,"name":"Alibaba Cloud's mascot ","username":"letbonsaibe","description":"play with Alibaba Cloud's mascot Yun Xiao Baoï¼Œ learn from https://www.youtube.com/watch?v=f4s1h2YETNY&ab_channel=kishimisu","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["sdf","mascot","alibaba","aliyun"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926\n//#define REPEAT 1.0\n\n// SDF FUNCTION FROM IQ\nfloat sdCircle(vec2 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat sdUnevenCapsule(vec2 p, float r1, float r2, float h)\n{\n    p.x = abs(p.x);\n    float b = (r1 - r2) / h;\n    float a = sqrt(1.0 - b * b);\n    float k = dot(p, vec2(-b, a));\n    if (k < 0.0) return length(p) - r1;\n    if (k > a * h) return length(p - vec2(0.0, h)) - r2;\n    return dot(p, vec2(a, b)) - r1;\n}\n\nfloat sdArc(in vec2 p, in vec2 sc, in float ra, float rb)\n{\n    // sc is the sin/cos of the arc's aperture\n    p.x = abs(p.x);\n    return ((sc.y * p.x > sc.x * p.y) ? length(p - sc * ra) :\n    abs(length(p) - ra)) - rb;\n}\n\nfloat sdRoundedBox(in vec2 p, in vec2 b, in vec4 r)\n{\n    r.xy = (p.x > 0.0) ? r.xy : r.zw;\n    r.x = (p.y > 0.0) ? r.x : r.y;\n    vec2 q = abs(p) - b + r.x;\n    return min(max(q.x, q.y), 0.0) + length(max(q, 0.0)) - r.x;\n}\n\nvec2 rotate(vec2 p, float angle) {\n    return mat2(\n        cos(angle), -sin(angle),\n        sin(angle), cos(angle)\n    ) * p;\n}\n\nfloat fill(float d) {\n    return smoothstep(-fwidth(d), fwidth(d), -d) > 0. ? 1.0 : 0.0;\n}\n\nfloat animate2Eye(float eye1, float eye2, float eye3, float progress) {\n    return progress < 0.4 ? eye1 :\n    progress < 0.5 ? mix(eye1, eye2, (progress - 0.4) * 10.0) :\n    progress < 0.6 ? mix(eye2, eye3, (progress - 0.5) * 10.0) :\n    eye3;\n\n}\n\n\nfloat Eye1(vec2 p) {\n    return sdUnevenCapsule(p, 0.06, 0.06, 0.15);\n}\n\nfloat Eye2(vec2 p) {\n    return sdCircle(p, 0.06);\n}\n\nfloat Eye3(vec2 p) {\n    float smileAngle = 0.42;\n    return sdArc(p, vec2(sin(smileAngle * PI), cos(smileAngle * PI)), 0.2, 0.05);\n}\nfloat Face(vec2 p) {\n    return sdRoundedBox(p, vec2(1.0, .5), vec4(.5));\n}\nfloat Hair(vec2 p) {\n    return sdCircle(p, .65);\n}\n\nfloat Month(vec2 p) {\n    return sdArc(p, vec2(sin(0.22 * PI), cos(0.22 * PI)), 0.25, 0.04);\n}\n\n\n// iq https://iquilezles.org/articles/palettes/\nvec3 palette(in float t)\n{\n    vec3 a = vec3(0.318, 0.848, 0.798);\n    vec3 b = vec3(0.500, 0.500, 0.500);\n    vec3 c = vec3(1.000, 1.000, 1.000);\n    vec3 d = vec3(0.000, 0.333, -0.362);\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    vec2 mouse = (2.0 * iMouse.xy - iResolution.xy) / iResolution.xy;\n\n    #ifdef REPEAT    \n    vec2 id = floor(uv * REPEAT);\n    uv = fract(uv * REPEAT);\n    uv = 2. * uv - 1.0;\n    mouse = mouse * REPEAT - id - uv;\n    #endif    \n\n    vec3 col = vec3(.0);\n\n    float face = Face(uv - vec2(0.0, 0.0));\n    float hair = Hair(uv - vec2(0.0, 0.15));\n    float month = Month(rotate(uv, PI));\n    float eyeR = Eye1(uv - vec2(0.33, 0.0) - mouse * .1);\n    float eyeL = Eye1(uv - vec2(-0.33, 0.0) - mouse * .1);\n    float eye2R = Eye2(uv - vec2(0.33, 0.15) - mouse * .1);\n    float eye2L = Eye2(uv - vec2(-0.33, 0.15) - mouse * .1);\n    float eye3R = Eye3(uv - vec2(0.33, 0.0) - mouse * .1);\n    float eye3L = Eye3(uv - vec2(-0.33, 0.0) - mouse * .1);\n    float eye1R = animate2Eye(eyeR, eye2R, eye3R, mod(iTime, 3.0) / 3.0);\n    float eye1L = animate2Eye(eyeL, eye2L, eye3L, mod(iTime, 3.0) / 3.0);\n\n    float border = min(face, hair);\n    if (border > 0.) {\n        col = palette(border + iTime);\n        float d = sin(border * 10.0 - iTime * 2. * PI);\n        d = 0.18 / d;\n        d = abs(d);\n        col *= d;\n    }\n\n    col = mix(col, vec3(1.0), fill(border));\n    col = mix(col, vec3(0.0), fill(eye1R));\n    col = mix(col, vec3(0.0), fill(eye1L));\n    col = mix(col, vec3(0.0), fill(month));\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}