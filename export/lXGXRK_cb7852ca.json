{"ver":"0.1","info":{"id":"lXGXRK","date":"1720162815","viewed":61,"name":"域翘曲","username":"YB","description":"一个简单的域翘曲渲染，从 [url]https://ddzeb.com/lands#demo-50[/url] 转过来的。","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","domainwarping"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\n  ported from https://ddzeb.com/lands#demo-50\n  \n  Copyright (C) 2024, DDZEB.COM\n  DDZEB LANDS v1.4.3\n\n*/\n\n\nmat2 rot2(float a) {\n  float s = sin(a), c = cos(a);\n  return mat2(c, -s, s, c);\n}\n\nvec3 render(vec2 uv) {\n  uv *= 1.0 + sin(iTime * .5) * .5;\n  uv *= rot2(sin(iTime * .1) * 1.0);\n  uv = sin(22.3 * uv / sin(dot(uv, uv) * .5 + .05));\n  uv -= sin(uv.y * uv.x) + uv.x * sin(iTime);\n  uv *= rot2(sin(iTime * .1) * 3.0);\n  return uv.x * (0.5 + 0.5 * sin(uv.x)) * vec3(1.0, 2.0, 2.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  // uvx2\n  vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.x;\n\n  // render the pixel\n  vec3 col = render(uv);\n  \n  // post-processing\n  col += cos(iTime + vec3(uv.x, uv.y, sin(iTime)) + vec3(0, 2, 4)) * .3;\n\n  // output to screen\n  fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}