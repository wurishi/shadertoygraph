{"ver":"0.1","info":{"id":"XccSWj","date":"1714421221","viewed":39,"name":"dither + lut","username":"dohnud","description":"wip dither lut shader :D","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["dither","lut"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SCREEN_TEXTURE iChannel0\n#define lut iChannel1\n#define dither iChannel2\n\n// must be equal to iChannel0 resolution\n#define RESOLUTION vec2(320, 240)\n\n// must be equal to dither texture's dimensions\n#define dither_size vec2(28.0, 4.0)\n\n// must be equal to num of color subdivs in lut texture\n#define lut_size 16.0\n\n\n\nvec2 color_to_uv(vec3 lut_color) {\n\tlut_color = floor(lut_color);\n\treturn vec2(\n\t\tlut_color.r / lut_size + lut_color.b,\n\t\tlut_color.g\n\t) / lut_size;\n}\n\nvec3 apply_lut(vec3 original_color) {\n    vec3 lut_color = floor(min(original_color, vec3(0.99999)) * lut_size);\n    return texture(lut, color_to_uv(lut_color)).rgb;\n}\n\nfloat channelError(float col, float colMin, float colMax)\n{\n\tfloat range = abs(colMin - colMax);\n\tfloat aRange = abs(col - colMin);\n\treturn aRange / range;\n}\n\nfloat ditheredChannel(float error, vec2 ditherBlockUV, float ditherSteps)\n{\n\terror = floor(error * ditherSteps) / ditherSteps;\n\tvec2 ditherUV = vec2(error,0.0);\n\tditherUV.x += ditherBlockUV.x;\n\tditherUV.y = ditherBlockUV.y;\n\treturn texture(dither, ditherUV).x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 SCREEN_UV = fragCoord / iResolution.xy;\n    vec2 SCREEN_PIXEL_SIZE = vec2(1,1) / RESOLUTION;\n    \n\tvec4 col = texture(SCREEN_TEXTURE, SCREEN_UV);\n\t\n\t// posterize rgb to determine two colors to dither between\n\t// TODO: YUV needed for more accurate color banding\n\tvec4 col1 = floor(col * lut_size) / lut_size;\n\tvec4 col2 = ceil(col * lut_size) / lut_size;\n\n\t// apply color correct LUT\n\tcol1.rgb = apply_lut(col1.rgb);\n\tcol2.rgb = apply_lut(col2.rgb);\n\n\t\n\t// determine dither pattern look (independant of color)\n\tfloat ditherSize = dither_size.y;\n\tfloat ditherSteps = dither_size.x / ditherSize;\n\t\n\tvec2 ditherBlockUV = SCREEN_UV;\n\tvec2 screen_size = vec2(1.0/SCREEN_PIXEL_SIZE.x, 1.0/SCREEN_PIXEL_SIZE.y);\n\tditherBlockUV.x = mod(ditherBlockUV.x, ditherSize /screen_size.x);\n\tditherBlockUV.x /= (ditherSize / screen_size.x);\n\tditherBlockUV.y = mod(ditherBlockUV.y, ditherSize / screen_size.y);\n\tditherBlockUV.y /= (ditherSize / screen_size.y);\n\tditherBlockUV.x /= ditherSteps;\n\t\n\t// apply dither to final yuv color\n\tcol.x = mix(col1.x, col2.x, ditheredChannel(channelError(col.x, col1.x, col2.x), ditherBlockUV, ditherSteps));\n\tcol.y = mix(col1.y, col2.y, ditheredChannel(channelError(col.y, col1.y, col2.y), ditherBlockUV, ditherSteps));\n\tcol.z = mix(col1.z, col2.z, ditheredChannel(channelError(col.z, col1.z, col2.z), ditherBlockUV, ditherSteps));\n\t\n\tfragColor = col;\n}\n\n\n\n\n\n","name":"Image","description":"","type":"image"}]}