{"ver":"0.1","info":{"id":"sdfcW4","date":"1642081735","viewed":99,"name":"Log-polar Mandelbrot","username":"Koulatko","description":".","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot","zoom","logarithm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 mandel(vec2 c){\n    vec2 z = c;\n    const int iter = 120;\n    for(int i = 0; i < iter; i++){\n        z = csqr(z) + c;\n        if(dot(z, z) > 4.0){\n            float fi = float(i);\n            return sin(vec3(0.1,0.2,0.3)*fi);\n        };\n    }\n    return vec3(0.0);\n}\n\nvec3 samp(vec2 z, float zoom){\n    \n    float crad = 0.5;\n    float cthc = 0.005;\n    \n    vec2 L = vec2(-0.7463, 0.1102);\n    \n    if(abs(length(z)-crad)<cthc) return vec3(1.0);\n    \n    return mandel(L+exp(-zoom)*z);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    \n    \n    \n    float zoom = 0.6*iTime-2.0;\n    \n    if(uv.x > 0.6 && uv.y < 0.4){\n        vec2 p = uv - vec2(0.6, -0.1);\n        p /= (1.0 - vec2(0.6, 0.4));\n        p -= 0.5;\n        p *= 2.0;\n        p.x *= (iResolution.x*0.4)/(iResolution.y*0.6);\n        \n        fragColor = vec4(samp(p, zoom), 1.0);\n        return;\n    }\n    \n    \n    vec2 lp = fragCoord/iResolution.xy;\n    lp.x *= iResolution.x/iResolution.y;\n    lp.y *= 2.*PI;\n    lp.x -= 0.5;\n    lp.x *= 2.*PI;\n    \n    //lp.x -= zoom;\n    \n    vec3 col = samp(cexp(lp), zoom);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI 3.14159265358979323264338\nvec2 csqr(vec2 z){\n    return vec2(z.x*z.x - z.y*z.y, 2.0*z.x*z.y);\n}\nvec2 ccub(vec2 z){\n    return vec2(z.x*z.x*z.x - 3.0*z.x*z.y*z.y, 3.0*z.x*z.x*z.y - z.y*z.y*z.y);\n}\nvec2 cmul(vec2 a, vec2 b){\n    return vec2(a.x*b.x - a.y*b.y, a.x*b.y + b.x*a.y);\n}\nvec2 cdiv(vec2 a, vec2 b){\n    return vec2(a.x*b.x+a.y*b.y, b.x*a.y - a.x*b.y)/(b.x*b.x + b.y*b.y);\n}\nvec2 clog(vec2 z){\n    return vec2(0.5*log(dot(z, z)), atan(z.y, z.x));\n}\nvec2 cexp(vec2 z){\n    return exp(z.x)*vec2(cos(z.y), sin(z.y));\n}\nvec2 csqrt(vec2 z){\n    float L = length(z);\n    return 0.5*sqrt(2.0)*vec2(sqrt(z.x+L), (z.y < 0.0 ? -1.0 : 1.0)*sqrt(-z.x+L));\n}\nvec2 cpow(vec2 a, vec2 b){\n    return cexp(cmul(clog(a),b));\n}","name":"Common","description":"","type":"common"}]}