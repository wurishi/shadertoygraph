{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"// A hybrid fractal that combines elements of Mandelbrot and Julia sets\n// with colorful iterations and smooth coloring\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalize pixel coordinates\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    // Animation parameters\n    float time = iTime * 0.2;\n    vec2 offset = vec2(cos(time) * 0.5, sin(time * 0.7) * 0.3);\n    \n    // Initialize variables for the fractal\n    vec2 z = uv * 3.0;\n    vec2 c = vec2(0.285 + offset.x, 0.01 + offset.y);\n    float iteration = 0.0;\n    int maxIterations = 100;\n    \n    // Main fractal loop\n    for(int i = 0; i < maxIterations; i++)\n    {\n        // z = z^2 + c (complex multiplication)\n        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n        \n        // Add recursive element\n        z += 0.15 * vec2(cos(z.x * 2.0), sin(z.y * 2.0));\n        \n        // Break if we exceed bounds\n        if(length(z) > 2.0) break;\n        \n        iteration++;\n    }\n    \n    // Smooth coloring\n    float smoothed = iteration - log2(log2(dot(z,z))) + 4.0;\n    \n    // Create a colorful palette\n    vec3 col = 0.5 + 0.5 * cos(3.0 + smoothed * 0.15 + \n                               vec3(0.0, 0.6, 1.0));\n    \n    // Add some glow effect\n    col *= 1.0 - length(uv) * 0.5;\n    \n    // Gamma correction\n    col = pow(col, vec3(0.8));\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4fGBDd","date":"1734560686","viewed":22,"name":"RandomFractal","username":"sks11","description":"fractal","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""}}