{"ver":"0.1","info":{"id":"MtKBRw","date":"1604746399","viewed":134,"name":"Think Outside the Box (4k intro)","username":"slerpy","description":"[url]https://www.pouet.net/prod.php?which=79661[/url]","likes":16,"published":1,"flags":96,"usePreview":0,"tags":["intro","4k","demoscene","tracing","path","baked"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"MtXGR8","filepath":"https://soundcloud.com/one-of-a-million/ignore-with-leading-space","previewfilepath":"https://soundcloud.com/one-of-a-million/ignore-with-leading-space","type":"musicstream","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    R = vec3(iResolution.xy, iTime);\n    \n    vec2 u = fragCoord / R.xy, x = .002 * vec2(R.y/R.x, 1), a;\n    if(abs(u.y-.5) > .4)return;\n    \n    float r = texture(iChannel1, u.xy).w - texture(iChannel1, vec2(.5)).w;\n    \n    mat2 T = mat2(cos(2.399), sin(2.399), -sin(2.399), cos(2.399));\n    \n    vec4 c = vec4(0);\n    a = vec2(0, .1*abs(r));\n    r = 1.;\n    \n\tfor (int i=0; i<80; i++)\n    {  \n        r += 1. / r;\n\t    a *= T;\n\t\tc += texture(iChannel1, u+x*(r-1.)*a);\n\t}\n    \n\tfragColor = c / 80.;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI 3.1415\n\n#define LOADTIME 10.\n#define WARMUP 40u\n\nvec3 R;\n\nfloat dime, time;\nint S = 0;\n\nmat3 rx(float a){ float sa=sin(a), ca=cos(a); return mat3(1.,0.,0.,0.,ca,sa,0.,-sa,ca); }\nmat3 ry(float a){ float sa=sin(a), ca=cos(a); return mat3(ca,0.,sa,0.,1.,0.,-sa,0.,ca); }\nmat3 rz(float a){ float sa=sin(a), ca=cos(a); return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.); }\n\nfloat svm(vec3 p) // Signed-Vec3-Max\n{\n    return max(max(p.x, p.y), p.z);\n}\n\nfloat avm(vec3 p) // Abs-Vec3-Max\n{\n    return svm(abs(p));\n}\n\nfloat noise(vec3 p)\n{\n\tvec3 ip=floor(p); p-=ip; \n    vec3 s=vec3(7,157,113);\n    vec4 h=vec4(0.,s.yz,s.y+s.z)+dot(ip,s);\n    p=p*p*(3.-2.*p); \n    h=mix(fract(sin(h)*43758.5),fract(sin(h+s.x)*43758.5),p.x);\n    h.xy=mix(h.xz,h.yw,p.y);\n    return mix(h.x,h.y,p.z); \n}\n\nvec3 hHs( vec3 n, uint seed )\n{\n    float a=(float((seed*0x73493U)&0xfffffU)/float(0x100000))*2.-1.;\n    float b=6.283*(float((seed*0xAF71fU)&0xfffffU)/float(0x100000));\n    float c=sqrt(1.-a*a);\n    vec3 r=vec3(c*cos(b),a,c*sin(b));\n    return dot(r,n)>0.?r:-r;\n}\n\nvec2 h23(vec3 p)\n{\n\tp = fract(p * vec3(.1031, .1030, .0973));\n    p += dot(p, p.yzx+19.19);\n    return fract((p.xx+p.yz)*p.zy);\n}\n\n// f = 1 : map everything\n// f = 0 : ignore walls\n\nvec3 D(vec3 p, int f)\n{\n    vec3 q = abs(p);\n    float s, a, m, c, r = 1. - avm(p);\n    \n    // Ball in a Room\n    if(S == 0)\n    {\n        s = length(p - .5*vec3(1,-1,1)) - .5;\n        m = step(1.-abs(p.x), 1e-4);\n        c = p.x/abs(p.x);\n    }\n    \n    // Barber Pole\n    else if(S == 1)\n    {\n        s = length(p.xz)-.3;\n        s = min(s, length(vec2(s, q.y-1.))-.1);\n        \n        a = mod(3.*atan(p.x, p.z)/PI + .5*tanh(2.*p.y), 2.);\n        m = 1.-smoothstep(.3, .4, abs(2.*fract(a)-1.));\n        c = 2.*step(a, 1.)-1.;\n    }\n    \n    // Diamond in the Sky\n    else if(S == 2)\n    {\n        q = abs(p * ry(.3*dime) * rz(.3*dime));\n        \n        s = min(\n       \t  dot(q,vec3(sqrt(.333))) - .5,\n          dot(abs(q-.25),vec3(sqrt(.333))) - .25\n        );\n        \n        a = sin(p.x + p.y + p.z);\n        m = step(sin(1.), abs(a));\n        c = -a / abs(a);\n    }\n    \n    // Spooky Grid\n    else\n    {\n        q -= floor(q) + .5;\n        \n        s = max(\n            min(min(avm(q.xyy), avm(q.xzz)), avm(q.yzz))-.1,\n            avm(p.xzz)-.9\n        );\n        \n        m = step(1.-abs(p.y), 1e-4);\n        c = -p.y / abs(p.y);\n    }\n    \n    float d = max(s, -r);\n    if(f != 0)d = min(r, s);\n    \n    if(d == s)return vec3(d, -1, 0);\n    return vec3(d, m, c);\n}\n\nvec3 N(vec3 p, int f)\n{\n    float m = D(p, f).x;\n\tvec2 e = vec2(0, 1e-3);\n\treturn normalize(m-vec3(\n\t\tD(p - e.yxx, f).x,\n\t\tD(p - e.xyx, f).x,\n\t\tD(p - e.xxy, f).x\n\t));\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    R = vec3(iResolution.xy, iTime);\n    \n    fragColor = texelFetch(iChannel0, ivec2(fragCoord.xy), 0);\n    \n    for(uint j=0u; j < WARMUP; j++)\n    {\n        uint jF = j + uint(9999. * R.z);\n\n        vec2 u = vec2(4, 1) * (fragCoord + h23(vec3(fragCoord, jF)) - .5) / R.xy;\n        \n        S = int(u.x);\n        \n        u = vec2(1, 2) * PI * fract(u);\n        vec3 p = vec3(cos(u.x), sin(u.x) * sin(u.y), sin(u.x) * cos(u.y));\n\n        float b = avm(p);\n        vec3 n = sign(p) * vec3(equal(abs(p), vec3(b)));\n        p /= b;\n\n        uvec3 r = uvec3(R.x * (p + 2.));\n        uint s = r.x * r.y * r.z * jF;\n\n        vec3 c = cos(2. * PI * (float(S) / 5. + vec3(0,1,2) / 3.));\n        c = .5 + .5 * c / avm(c);\n\n        vec3 e = vec3(0), m, t, rd = hHs(n, s), ro = p;\n\n        for(int b=0; b<3; b++)\n        {\n            if(b==0) t = D(p, 1);\n            \n            else {\n                t.x = .01;\n                for(int i=0; i < 60; i++)\n                    t += m = D(ro + rd * t.x, 1);\n                t.yz = m.yz;\n            }\n\n            p = ro + rd * t.x;\n            n = N(p, 1);\n\n            if(t.y > -.5)\n            {\n                e += t.y * max(mix(vec3(.5), c, t.z), 0.);\n                rd = hHs(n, s ^= jF / uint(b + 1));\n            }\n            else rd = reflect(rd, n);\n\n            ro = p;\n        }\n\n        e = 10. * e / (svm(e)+1.);\n        e = pow(e, vec3(.4545));\n\n        fragColor += vec4(e, 1);\n        \n        if(R.z + 1. > LOADTIME)break;\n    }\n}","name":"Buffer @","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//#define DEBUG\n\n// Beat/Min : 110\n// Beat/Sec : 110/60 = 1,83333333...\n// Sec/Beat : 60/110 = 0,54545454...\n\n//#define BEATLEN (6./11.)\n//#define ROOMLEN (192./11.)\n//#define ROOMLEN (32.*BEATLEN)\n\n//#define SCROLL (4.*ROOMLEN)\n#define SCROLL (768./11.)\n//#define GAP 6.0\n\nvec3 mx(vec3 p)\n{\n    if(dime > SCROLL)\n    {\n        p.x -= .4 * pow(time - SCROLL, 2.);\n        float r = floor(p.x/6. + .5);\n        S = int(r) + 3;\n        p.x -= clamp(r, -3., 0.) * 6.;\n    }\n    return p;\n}\n\n// Orbit Camera Keyframe Macro\n#define K(T,F,A,B,X,Y,Z) \\\n\ts=smoothstep(F,0.,abs(dime-T)); \\\n\to+=s*vec2(A,B),ro+=s*vec3(X,Y,Z);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    R = vec3(iResolution.xy, iTime);\n    \n    \n    // Time and Dime\n    vec2 h = 2. * h23(vec3(fragCoord, R.z)) - 1.;\n    time = R.z - LOADTIME;\n    dime = time + .01 * h.x;\n    \n    \n    // Camera stuff\n    vec3 ro = vec3(0,0,-4),\n    rd = normalize(vec3(fragCoord - .5*R.xy + .25*h, R.y));\n    vec2 o = vec2(0, 4. * PI * smoothstep(1., 70., dime)); // Orbit\n    float s;\n    \n    K(-7., 9., 0, .7, -.3, -.5, 3);\n    K(2., 9., 0, .7, -.3, -.5, 3);\n    \n    K(23., 6., -.1, 0, -.2, -.5, 2);\n    K(29., 6., +.1, 0, +.3, +.5, 2);\n    \n    K(35., 6., 0, 0, 0, 0, 1);\n    K(43., 8., .6, 0, -.3, 0, 1.5);\n    \n    K(61., 9., -.2, 0, 0, 0, 1.3);\n    \n    K(74., 16., 0, .38, 0, 0, 0);\n    \n    s = dime * 11. / 192.;  // s = dime / ROOMLEN;\n    o.y += .3 * tan(PI * clamp(s - .5, .0, 3.)); // Swirl\n    \n    mat3 rm = rx(o.x) * ry(o.y);\n    rd *= rm, ro *= rm;\n    \n    \n    // Scene\n    S = int(min(s, 3.5) + .01 * h.y) % 4;\n    \n    \n    // First trace\n    vec3 p, fp;\n    float t, r=20., m=0., f=max(length(ro)-1., 0.);\n    \n    for(int i=0; i<80; i++)\n    {\n      \tr -= length(max(abs(mx(ro + rd * r))-1., 0.));\n      \tm += D(mx(ro + rd * m), 0).x;\n        \n        fp = ro + rd * f;\n        fp.xzy -= .1 * vec3(cos(dime + vec2(0, .5*PI) + 4.*fp.zx), dime);\n        f += noise(24.*mx(fp)) - .3;\n        \n        if(r < -3. && min(m,f) > 10.)break;\n    }\n\n    t = min(r, m);\n    p = mx(ro + rd * t);\n    \n    \n    // Conditional reflection trace\n    vec3 n = N(p, 0);\n    if(t==m)\n    {\n        vec3 d2 = reflect(rd, n), o2 = p;\n        \n        float t2 = .01;\n        for(int i=0; i<40; i++)\n            t2 += D(p = o2+d2*t2, 1).x;\n    }\n    \n    \n    // Texture Fetch\n    vec4 c = vec4(0);\n    \n    if(t > -2.)\n    {\n        vec2 u = fract(\n            vec2(atan(length(p.yz),p.x),atan(p.y, p.z))\n            / vec2(1, 2) / PI\n        );\n        \n        u.x = (u.x + float(S)) / 4.;\n        \n    \tc = texture(iChannel0, u);\n    }\n    \n    vec2 u = fragCoord / R.xy;\n    vec4 buf = texture(iChannel1, u);\n    \n\t#ifdef DEBUG\n    c = texture(iChannel0, u);\n\t#endif\n    \n    \n    // Color Correction\n    c = pow(clamp(.7 * c / c.w, .0, 1.), vec4(.7));\n    c = mix(c, vec4(c.r + c.g + c.b) / 3., -.3);\n    c = smoothstep(.0, 1., c);\n    \n    #ifndef DEBUG\n    vec2 q = (3.*u-1.5) * vec2(1, R.y/R.x), a = abs(q);\n    float l = step(76.5, time) *\n        smoothstep(.003, .0, min(max(max(\n        \tmin(abs(mod(q.x+.067,.134)-.067),svm(a.xyy)-.1),\n        \t-min(length(q-vec2(0,.03))-.06,max(a.x,abs(q.y+.02)-.03)-.04)\n    \t),a.x+a.y-.4),abs(a.x+a.y-.41)+.01)-0.02);\n    \n    if(t == m && S > 0) c += min(pow(1.+dot(rd,n),3.), 1.) / 4.;\n    if(S > 1 && f < t) c += exp(float(S)-6.4) / noise(40.*fp);\n    if(r < -2.) c += .4 * (1. - dot(rd, normalize(-ro))) + l; // + .03 * fract(-dime/BEATLEN);\n    \n    \n    c.w = clamp(t-length(ro), -2., 2.);\n    #endif\n    \n    c = mix(buf, c, .5) + .01 * (h.x + h.y);\n    \n    \n    // Bying Time\n    #ifndef DEBUG\n    if(time < 0.)\n    {\n        float bar = 1. + time / LOADTIME;\n        c = .005 * c + float(abs(u.y-.5) < .02 && u.x < bar);\n    }\n    #endif\n    \n    \n    fragColor = c;\n}","name":"Buffer @","description":"","type":"buffer"}]}