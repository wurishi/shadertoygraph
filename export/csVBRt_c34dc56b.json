{"ver":"0.1","info":{"id":"csVBRt","date":"1698642374","viewed":45,"name":"Yearbook","username":"iznax","description":"scrolling across a page full of random school yearbook faces","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["face","head","book","year","people"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"int Index = 0;\nfloat Slot = .6;\n\nvec3 Hair(vec2 w, vec3 back)\n{\n    bool h = fract(sin(Slot+w.y*5.)) < .5;\n    vec3 hair =  h ? vec3(.5,.3,0) : vec3(.8,.5,0);\n    if ((Index&3) < 2 && abs(w.x-.5)>.2)\n    {\n        return back;\n    }\n    if ((Index&1) == 0)\n    {\n        hair = h ? vec3(.1) : vec3(.7);\n    }\n    if ((Index&15) == -1 || (Index&7) == 0)\n    {\n        hair = h ? vec3(.4,.1,.1) : vec3(.7,.2,0);\n    }\n    if (w.y > .5 && length(w*vec2(1.2,.8)-vec2(.6,.35)) < .33)\n    {\n        return hair;\n    }\n    return back;\n}\n\nvec3 Body(vec2 w, vec3 back)\n{\n    if (w.y < .6)\n    {\n        float dx = abs(w.x-.5);\n        if (dx < .08) return vec3(1);\n        float dy = abs(w.y - .625);\n        if (dx < .33 && dx<dy) return vec3(float(Index&1)*.5,float(Index&3)*.3,float(Index&7)*.2);\n    }\n    return back;\n}\n\nfloat hash(vec2 p)\n{\n    // Two typical hashes...\n\t//return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\n    \n    // This one is better, but it still stretches out quite quickly...\n    // But it's really quite bad on my Mac(!)\n    return fract(sin(dot(p, vec2(1.0,113.0)))*43758.5453123);\n\n}\nvec3 Face(vec2 w, vec3 skin, float gender)\n{\n    vec3 back = mix(vec3(.6),vec3(hash(w)*.5,.5,1.),w.y);\n\n    if (length(w-vec2(.5,.6))<.2)\n    {\n        return skin;\n    }\n    \n    return Hair(w,Body(w,back));\n}\n\nvec3 RndTone(float slot)\n{\n    vec3 skin = vec3(.8,.6,.4);\n    //return fract(slot) < .5 ? skin : skin*.7;\n    return mix(vec3(1.,.9,.7),vec3(.8,.6,.4)*.7,fract(slot));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Width and Height\n    vec2 SlotSize = vec2(.2,.4);\n\n    float numFaces = 4.;\n\n    vec2 left = vec2(iTime/-24.,iTime/64.);\n    vec2 book = left + uv;\n    vec2 slot = book/SlotSize;\n    Slot = sin(slot.y+slot.x*75.241);\n    \n    int xx = int(floor(slot.x));\n    int yy = int(floor(slot.y));\n    Index = (xx+yy*117);\n    //if (((xx+yy) & 1) == 0) col=vec3(.5);\n    \n    float Rnd = (sin(floor(slot.x)*1413.2)+1.)/2.;\n    float who = mod(floor(numFaces*Rnd),numFaces);\n    vec2 f = fract(slot);\n    if (who == 0.)\n    {\n        col = Face(f,RndTone(floor(slot.x)),.0);\n    }\n    else if (who == 1.)\n    {\n        col = Face(f,RndTone(floor(slot.x)),.1);\n        //col = vec3(f.x,f.y,0);\n    }\n    else\n    {\n        col = Face(f,RndTone(floor(slot.x)/4.),.5);\n    }\n    \n    float Border = 0.06;\n    if (min(min(f.x,f.y),1.-max(f.x,f.y)) < Border)\n    {\n        col = vec3(1);\n    }\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}