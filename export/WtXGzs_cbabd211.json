{"ver":"0.1","info":{"id":"WtXGzs","date":"1557250984","viewed":241,"name":"Weierstrass elliptic function","username":"tpfto","description":"Domain coloring of the equianharmonic case of the [url=https://en.wikipedia.org/wiki/Weierstrass%27s_elliptic_functions]Weierstrass ℘ function[/url].","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["2d","math","complex","domaincoloring","specialfunctions"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright © 2019 J. M.\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Basic domain coloring plot (https://en.wikipedia.org/wiki/Domain_coloring)\n// of the equianharmonic case of the Weierstrass elliptic function w = ℘(z ; 0, 1) and its derivative (https://en.wikipedia.org/wiki/Weierstrass%27s_elliptic_functions)\n\n#define PI 3.14159265359\n#define SCALE 6.0 // plot scale\n#define SPACING 0.125 // grid line spacing\n\n// from Fabrice Neyret, \n#define r2c(x) vec2( x, 0.0 )\n#define cis(a) vec2( cos(a), sin(a) )\n#define cmul(A,B) ( mat2( A, -(A).y, (A).x ) * (B) )\n#define cinv(Z) ( vec2( (Z).x, -(Z).y ) / dot(Z, Z) ) \n#define cdiv(A,B) cmul( A, cinv(B) )\n\n// periodic function with needle-like peaks\nfloat needles( float x )\n{\n    float ax = abs(6.0 * mod(2.0 * x, 2.0) - 6.0);\n    return 0.5 * (7.0 - ax - abs(5.0 - ax));\n}\n\n// modified DLMF coloring, adapted from https://www.shadertoy.com/view/WtXGWN\nvec3 smooth_dlmf( float h )\n{\n    vec3 rgb = clamp( vec3(1.0, -1.0, -1.0) * abs((vec3(8.0, 4.0, 8.0) * mod(h, 1.0) - vec3(4.5, 1.5, 5.5))) + vec3(-1.5, 1.5, 2.5), 0.0, 1.0 );\n\treturn rgb * rgb * rgb/(1.0 - 3.0 * rgb * (1.0 - rgb));\n}\n\n// Weierstrass elliptic function via Padé approximation + argument doubling, https://doi.org/10.1093/imanum/10.1.119\n// real and imaginary parts of ℘(z) are packed into the first two components,\n// while the real and imaginary parts of ℘'(z) are in the last two.\n\nvec4 wpequ( in vec2 z)\n{\n     const float om = 1.529954037057; // real semiperiod\n     const float o3 = 0.57735026919; // 1/sqrt(3)\n     const vec2 ep = vec2(0.5, 0.866025403784); // exp(i * pi/3)\n     // constants for Padé approximation\n     const float P0 = 0.00328332715973; // 3191/971880\n     const float P1 = 0.0148207056102; // 205/13832\n\n    // period reduction and rescaling\n    vec2 zt = z - 2.0 * om * (r2c(floor(0.5 - o3 * dot(vec2(ep.x, -ep.y), z)/om)) + floor(o3 * z.y/om + 0.5) * ep);\n    bool zq = (dot(zt, zt) > 0.25);\n    vec2 zz = zq ? 0.0625 * zt : zt;\n\n    // evaluate the Padé approximants\n    vec2 z2 = cmul(zz, zz), z4 = cmul(z2, z2), z3 = cmul(zz, z2), z6 = cmul(z4, z2);\n    vec2 wp = cinv(z2) + cdiv(cmul(z4/28.0, r2c(1.0) + z6/2730.0), r2c(1.0) + cmul(z6/420.0, z6/1729.0 - r2c(1.0)));\n    vec2 pd = cdiv(cmul(z3/7.0, r2c(1.0) + P0 * z6), r2c(1.0) + cmul(z6/3738.0, P1 * z6 - r2c(13.4))) - 2.0 * cinv(z3);\n    \n    // argument doubling\n    if (zq) {\n      for (int k = 0; k < 4; k++) {\n           vec2 tmp1 = cmul(wp, cmul(wp, wp)), tmp2 = cmul(pd, pd);\n           pd = cdiv(cmul(tmp2 - r2c(18.0), tmp2) - r2c(27.0), 8.0 * cmul(pd, tmp2));\n           wp = cdiv(cmul(tmp1 + r2c(2.0), wp), 4.0 * tmp1 - r2c(1.0));\n      }\n    }\n\n    return vec4(wp, pd);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 aspect = iResolution.xy / iResolution.y;\n    vec2 z = ( fragCoord.xy / iResolution.y ) - 0.5 * aspect;\n    z *= SCALE;\n    \n    vec4 wpd = wpequ(cmul(z, cis(0.1 * iTime)) + iTime);\n    vec2 w = mix(wpd.zw, wpd.xy, 0.5 + 0.5 * cos(0.3 * iTime)); // express transition as a linear combination of the function and its derivative\n    float ph = atan(w.y, w.x);\n    float lm = log(0.0001 + length(w));\n    \n    vec3 c = smooth_dlmf(0.5 * (ph/PI));\n\n    c = mix( vec3(1.0), c, 0.5 + 0.5 * needles((0.5 * (lm/PI))/SPACING) * needles((0.5 * (ph/PI))/SPACING));\n    fragColor = vec4(c, 1.0);\n}","name":"Image","description":"","type":"image"}]}