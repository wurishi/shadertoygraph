{"ver":"0.1","info":{"id":"lccSDN","date":"1713924752","viewed":73,"name":"Raymarching (custom background)","username":"Cesium_137","description":"Add a custom background by using an hdri from poly haven and the custom textures extension for chrome","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//This is me following a tutorial by Kishimisu. https://www.youtube.com/watch?v=khblXafu7iA\n//I also followed a tutorial by Peer Play on how to add lighting https://www.youtube.com/watch?v=t8qBCltSqV4&list=PL3POsQzaCw53iK_EhOYR39h1J9Lvg-m-g&index=4\n//Got help from https://www.shadertoy.com/view/tlKSzK\n\n#define PI 3.14159265359\n#define mode 1\n//Mode 1: uses the texture in iChannel0 (you can use a jpg of an hdri image)\n//Mode 2: uses the cubemap in iChannel1\nfloat minDist = 0.0001;\nfloat maxDist = 100.;\nint maxIter = 256;\nvec3 lightDir = normalize(vec3(0., -1., 0.));\nvec3 lightCol = vec3(.95,.84,.63);\nfloat lightIntensity = 1.2;\nfloat shadowIntensity = 1.;\nfloat penumbra = 1.;\nfloat aoStepSize = 0.1;\nfloat aoIntensity = .1;\nint aoIter = 4;\nfloat reflectionIntensity = 0.3;\nint reflectionIter = 4;\n\nvec3 cartToSph(vec3 p) {\n    float r = length(p);\n    float theta = atan(p.z,p.x);\n    float phi = acos(-p.y / r);\n    return vec3(r, theta, phi);\n}\n\nvec3 getBG(vec3 rd) {\n    vec2 uv = cartToSph(rd).yz / PI;\n    vec3 col;\n    if(mode == 1)\n    col = texture(iChannel0, uv).rgb;\n    if(mode == 2)\n    col = texture(iChannel1, rd).rgb;\n    return col;\n}\n\n\nfloat sunion(float a, float b, float k){ //Boolean Union\n    float h = max(k - abs(a-b), 0.0) / k;\n    return min(a, b) - h*h*h*k*(1./6.);\n} //returns the smooth minimum between two values (this is black magic too)\n\nfloat sintersect(float a, float b, float k){ //Boolean Intersection\n    return -sunion(-a, -b, k);\n}\n\nfloat ssub(float a, float b, float k){ //Boolean Subtract, first object minus second\n    return -sunion(a, -b, k);\n}\n\nmat2 rot2d(float angle){ //2d rotation matrix, because the third rotation axis is more or less useless.\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdfSphere(vec3 p, float r){\n    return length(p) - r; //distance to a sphere with radius r\n}\n\nfloat sdfBox(vec3 p, vec3 b) { //distance to a box with dimensions b (this function is basically black magic just copy and paste this part)\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\n}\n\nfloat map(vec3 p) { //distance to scene\n    \n    vec3 spherePos = vec3(sin(iTime) * 3., 0, 0);\n    float sphere = sdfSphere(p - spherePos, 1.);\n    \n    vec3 q = p;\n    q.xz *= rot2d(iTime);\n    float box = sdfBox(q, vec3(0.75));\n    \n    \n    return sunion(sphere, box, 2.); //returns the closer distance between the sphere and box\n}\n\nvec3 getNormal(vec3 p){ //some black magic that gets the normal vector of the scene at a given point\n    vec2 offset = vec2(minDist, 0.0);\n    vec3 n = vec3(\n    map(p + offset.xyy) - map(p - offset.xyy),\n    map(p + offset.yxy) - map(p - offset.yxy),\n    map(p + offset.yyx) - map(p - offset.yyx));\n    return normalize(n);\n}\n\nfloat march(vec3 ro, vec3 rd){\n    float t=0.,d;\n    for(int i=0; i<maxIter; ++i){\n        d=map(ro+rd*t);\n        if(abs(d)<minDist) return t;\n        t+=d;\n        if(t>maxDist) return t;\n    }\n    return t;\n}\n\nfloat softShadow(vec3 ro, vec3 rd, float k) { //calculates whether a point is in shadow or not, but smooth\n    float result = 1.;\n    for(float t = minDist; t < maxDist;) {\n        float h = map(ro+rd*t);\n        if(h < minDist*.01){\n            return 0.0;\n        }\n        result = min(result, k*h/t);\n        t += h;\n    }\n    return result;\n}\n\n\nfloat ambientOcclusion(vec3 p, vec3 n){ //This is the point where I stop knowing how things work, I just know that they do.\n    float aoStep = aoStepSize;\n    float ao = 0.0;\n    float dist;\n    for(int i = 1; i <= aoIter; i++){\n        dist = aoStep * float(i);\n        ao += max(0.0, (dist - map(p + n * dist)) / dist);\n    }\n    return (1. - ao * aoIntensity);\n}\n\nvec3 shading(vec3 ro, vec3 rd, float t){\n    vec3 p = ro + rd * t;\n    vec3 n = getNormal(p);\n    \n    //Directional Light\n    vec3 light = (lightCol * dot(-lightDir, n) * .5 + .5) * lightIntensity;\n    //Shadows\n    float shadow = softShadow(p, -lightDir, penumbra) * 0.5 + 0.5;\n    shadow = max(0.0,pow(shadow, shadowIntensity));\n    //Ambient Occlusion\n    float ao = ambientOcclusion(p, n);\n    \n    \n    light *= shadow * ao;\n    \n    return light;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y; // Screen coordinates (center = (0, 0))\n    vec2 m = (iMouse.xy * 2. - iResolution.xy) / iResolution.y; // Mouse coordinates\n    float fov = 1.;\n    \n    //Initialization\n    vec3 ro = vec3(0., 0., -3.); //ro stands for ray origin, think of it as camera position\n    vec3 rd = normalize(vec3(uv * fov, 1.)); //rd stands for ray direction\n    vec3 col = vec3(0.);\n    \n    float t = 0.; //total distance travelled\n    \n    \n    //vertical camera rotation\n    ro.yz *= rot2d(-m.y);\n    rd.yz *= rot2d(-m.y);\n    \n    //horizontal camera rotation\n    ro.xz *= rot2d(-m.x);\n    rd.xz *= rot2d(-m.x); //It is important that vertical rotation comes first\n    \n    \n    //Marching\n    t = march(ro, rd);\n    if(t < maxDist) { //shading\n        vec3 s = shading(ro, rd, t);\n        col = vec3(s);\n    }     \n    else {\n        col = getBG(rd);\n    }\n    \n    \n    //Reflections\n    vec3 refCol;\n    for(int i; i <= reflectionIter; i++){\n        t=march(ro,rd);\n        if(t > maxDist) {refCol = getBG(rd);\n        break;}\n        vec3 p = ro + rd * t;\n        vec3 n = getNormal(p);\n        rd = reflect(rd, n);\n        ro = p + rd * minDist;\n        if(t < maxDist && i == reflectionIter) { //shading\n            vec3 s = shading(ro, rd, t);\n            refCol = vec3(s);\n        }\n        else {\n            refCol = getBG(rd);\n        }\n    }\n    col = (1. - reflectionIntensity) * col + reflectionIntensity * refCol;\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}