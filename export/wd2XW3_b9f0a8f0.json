{"ver":"0.1","info":{"id":"wd2XW3","date":"1555169156","viewed":228,"name":"A loading screen?","username":"coburn","description":"Got carried away with making a loading screen and this is what came out of it.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["loading"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst float cells = 10.0;\n\nconst float steps = cells+1.0;\nconst float cellW = 1.0/cells;\n\nvec4 loaderImage(vec2 uv)\n{\n    float hwr = iResolution.y/iResolution.x;\n    \n\t//Time varying\n    float tStep = floor(mod(iTime/5.0,1.0)*steps); //0.0-10.0 by 1.0s steps\n    float tCell = tStep - 1.0; //The current time varying cell\n    if(tCell < 0.0) //Cell -1 is all cells blank\n        return vec4(0.0);\n    \n    //Pos varying\n    float pCell = floor(uv.x*cells); //Current pixel cell\n    float pCellLoaded = float(pCell <= tCell);\n\tfloat pCellLoadedP1 = float(pCell+1.0 <= tCell);\n    float pCellLoadedM1 = float(pCell-1.0 <= tCell);\n    \n    //Cell coordinates\n    //0.0-1.0 across the cell, square coords in y w/ 0 at center\n    vec2 cl = vec2(mod(uv.x*cells, 1.0), (uv.y-0.5)*cells*hwr);\n\n    //Make halo'd circles in every cell\n    const vec4 inSwatch = vec4(1.0);\n    \n    float dist = length(vec2(0.5,0.5*sin(iTime + pCell*2.0)) - cl);\n    float dist2 = min(length(vec2(1.5,0.5*sin(iTime + pCell*2.0 +2.0)) - cl) + 10000.0*(1.0-pCellLoadedP1),\n                      length(vec2(-0.5,0.5*sin(iTime + pCell*2.0-2.0)) - cl));\n    \n    float distR = 1.0-smoothstep(0.10,0.20,dist) + 1.0-smoothstep(0.20,0.70,dist);\n    float distR2 = 1.0-smoothstep(0.10,0.20,dist2) + 1.0-smoothstep(0.20,0.70,dist2);\n    vec4 outCol = inSwatch * (distR * pCellLoaded + distR2 * pCellLoadedM1) / 2.0;\n    \n    return outCol;\n}\n\nvec4 bloomImage(vec2 uv)\n{\n   const float blurSize = 1.0/512.0;\n   const float intensity = 0.35;\n    \n   vec4 fragColor;\n   vec4 sum = vec4(0);\n   vec2 texcoord = uv;\n   int j;\n   int i;\n\n   //thank you! http://www.gamerendering.com/2008/10/11/gaussian-blur-filter-shader/ for the \n   //blur tutorial\n   // blur in y (vertical)\n   // take nine samples, with the distance blurSize between them\n   sum += loaderImage(vec2(texcoord.x - 4.0*blurSize, texcoord.y)) * 0.05;\n   sum += loaderImage(vec2(texcoord.x - 3.0*blurSize, texcoord.y)) * 0.09;\n   sum += loaderImage(vec2(texcoord.x - 2.0*blurSize, texcoord.y)) * 0.12;\n   sum += loaderImage(vec2(texcoord.x - blurSize, texcoord.y)) * 0.15;\n   sum += loaderImage(vec2(texcoord.x, texcoord.y)) * 0.16;\n   sum += loaderImage(vec2(texcoord.x + blurSize, texcoord.y)) * 0.15;\n   sum += loaderImage(vec2(texcoord.x + 2.0*blurSize, texcoord.y)) * 0.12;\n   sum += loaderImage(vec2(texcoord.x + 3.0*blurSize, texcoord.y)) * 0.09;\n   sum += loaderImage(vec2(texcoord.x + 4.0*blurSize, texcoord.y)) * 0.05;\n\t\n\t// blur in y (vertical)\n   // take nine samples, with the distance blurSize between them\n   sum += loaderImage(vec2(texcoord.x, texcoord.y - 4.0*blurSize)) * 0.05;\n   sum += loaderImage(vec2(texcoord.x, texcoord.y - 3.0*blurSize)) * 0.09;\n   sum += loaderImage(vec2(texcoord.x, texcoord.y - 2.0*blurSize)) * 0.12;\n   sum += loaderImage(vec2(texcoord.x, texcoord.y - blurSize)) * 0.15;\n   sum += loaderImage(vec2(texcoord.x, texcoord.y)) * 0.16;\n   sum += loaderImage(vec2(texcoord.x, texcoord.y + blurSize)) * 0.15;\n   sum += loaderImage(vec2(texcoord.x, texcoord.y + 2.0*blurSize)) * 0.12;\n   sum += loaderImage(vec2(texcoord.x, texcoord.y + 3.0*blurSize)) * 0.09;\n   sum += loaderImage(vec2(texcoord.x, texcoord.y + 4.0*blurSize)) * 0.05;\n\n    \n   sum /= 5.0;\n   //increase blur with intensity!\n   //fragColor = sum*intensity + texture2D(iChannel0, texcoord); \n   if(sin(iTime) > 0.0)\n       fragColor = sum * sin(iTime)+ loaderImage(texcoord);\n   else\n\t   fragColor = sum * -sin(iTime)+ loaderImage(texcoord);\n    \n    return fragColor;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 outCol = bloomImage(uv);\n    \n\tfragColor = outCol;\n}","name":"Image","description":"","type":"image"}]}