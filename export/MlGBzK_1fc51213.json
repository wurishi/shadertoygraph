{"ver":"0.1","info":{"id":"MlGBzK","date":"1560059249","viewed":202,"name":"f(f(f(x)))... Logistics Function","username":"JohnShadow","description":"Old\nBasically I have been working on some math I have made up using logistics functions.\nSome of the things like capping points, onset points, capping roots etc... \nAll play role seemingly in under standing this stuff, this map has been the most helpful. ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["logistics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//This is an old shader around 2016 I thought I might share\n\n#define CappintPoint 1.41421356237\nfloat f(float x)\n{\n    return -CappintPoint*((x*x)-1.0);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0);\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // Output to screen\n    float y0 = 4.0*(uv.x-0.5), y1 = 0.0;\n    for(float i = 0.0; i < 20.0; ++i)\n    {\n\t\ty0 = f(y0);\n    \ty1 = ((y0*iResolution.y)*0.3)+(iResolution.y*0.5);\n    \tif((fragCoord.y-0.5)<= y1 && y1 < (fragCoord.y+0.5))\n    \t\tfragColor = vec4(1.0,1.0,1.0,1.0);\n\n    }\n    //this actually is producing sphereical cordanants???\n}","name":"Image","description":"","type":"image"}]}