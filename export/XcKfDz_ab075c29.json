{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"buffer","id":"4dXGR8","filepath":"/media/previz/buffer00.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"float lanczos(float x)\n{\n    if (x == 0.f) {return 1.f;}\n    if (x > 3.f || x < -3.f) {return 0.f;}\n    \n    float PI_X = 3.1415926f * x;\n    return 3.f * sin(PI_X) * sin(PI_X * 0.33333f) / (PI_X * PI_X);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    if (uv.x < 0.5f) \n    {\n        fragColor = texture(iChannel0, uv);\n        return;\n    }\n\n    // position in pixels (in low res texture)\n    vec2 pixelPositionInLowRes = uv * iChannelResolution[0].xy;\n    \n    vec2 step = vec2(0.f, 1.f);\n    \n    vec2 discreteCoords = floor(pixelPositionInLowRes) + vec2(0.5f, 0.5f);\n    \n    float delta = dot(pixelPositionInLowRes - discreteCoords, step);\n    \n    vec2 pixelSize = 1.0 / iChannelResolution[0].xy;\n    \n    vec4 result = vec4(0.f, 0.f, 0.f, 0.f);\n    \n    float lw0 = lanczos(delta + 3.f);\n    float lw1 = lanczos(delta + 2.f);\n    float lw2 = lanczos(delta + 1.f);\n    float lw3 = lanczos(delta);\n    float lw4 = lanczos(delta - 1.f);\n    float lw5 = lanczos(delta - 2.f);\n    float lw6 = lanczos(delta - 3.f);\n    \n    vec2 uv0 = discreteCoords * pixelSize;\n    vec2 uv1 = (discreteCoords + mix(-2.f, -3.f, lw1 / (lw0 + lw1)) * step) * pixelSize;\n    vec2 uv2 = (discreteCoords + mix(-1.f, -2.f, lw2 / (lw1 + lw2)) * step) * pixelSize;\n    vec2 uv3 = (discreteCoords + mix(1.f, 2.f, lw4 / (lw4 + lw5)) * step) * pixelSize;\n    vec2 uv4 = (discreteCoords + mix(2.f, 3.f, lw5 / (lw5 + lw6)) * step) * pixelSize;\n    \n    result += texture(iChannel0, uv0) * lw3;\n    result += texture(iChannel0, uv1) * (lw0 + lw1);\n    result += texture(iChannel0, uv2) * (lw1 + lw2);\n    result += texture(iChannel0, uv3) * (lw4 + lw5);\n    result += texture(iChannel0, uv4) * (lw5 + lw6);\n    \n    fragColor = result;\n}","name":"Image","description":"","type":"image"},{"outputs":[{"channel":0,"id":"4dXGR8"}],"inputs":[{"channel":0,"type":"texture","id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"code":"float lanczos(float x)\n{\n    if (x == 0.f) {return 1.f;}\n    if (x > 3.f || x < -3.f) {return 0.f;}\n    \n    float PI_X = 3.1415926f * x;\n    return 3.f * sin(PI_X) * sin(PI_X * 0.33333f) / (PI_X * PI_X);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    if (uv.x < 0.5f) \n    {\n        fragColor = texture(iChannel0, uv);\n        return;\n    }\n\n    // position in pixels (in low res texture)\n    vec2 pixelPositionInLowRes = uv * iChannelResolution[0].xy;\n    \n    vec2 step = vec2(0.f, 1.f);\n    \n    vec2 discreteCoords = floor(pixelPositionInLowRes) + vec2(0.5f, 0.5f);\n    \n    float delta = dot(pixelPositionInLowRes - discreteCoords, step);\n    \n    vec2 pixelSize = 1.0 / iChannelResolution[0].xy;\n    \n    vec4 result = vec4(0.f, 0.f, 0.f, 0.f);\n    \n    float lw0 = lanczos(delta + 3.f);\n    float lw1 = lanczos(delta + 2.f);\n    float lw2 = lanczos(delta + 1.f);\n    float lw3 = lanczos(delta);\n    float lw4 = lanczos(delta - 1.f);\n    float lw5 = lanczos(delta - 2.f);\n    float lw6 = lanczos(delta - 3.f);\n    \n    vec2 uv0 = discreteCoords * pixelSize;\n    vec2 uv1 = (discreteCoords + mix(-3.f, -2.f, lw0 / (lw0 + lw1)) * step) * pixelSize;\n    vec2 uv2 = (discreteCoords + mix(-2.f, -1.f, lw1 / (lw1 + lw2)) * step) * pixelSize;\n    vec2 uv3 = (discreteCoords + mix(1.f, 2.f, lw4 / (lw4 + lw5)) * step) * pixelSize;\n    vec2 uv4 = (discreteCoords + mix(2.f, 3.f, lw5 / (lw5 + lw6)) * step) * pixelSize;\n    \n    result += texture(iChannel0, uv0) * lw3;\n    result += texture(iChannel0, uv1) * (lw0 + lw1);\n    result += texture(iChannel0, uv2) * (lw1 + lw2);\n    result += texture(iChannel0, uv3) * (lw4 + lw5);\n    result += texture(iChannel0, uv4) * (lw5 + lw6);\n    \n    fragColor = result;\n}","name":"Buffer A","description":"","type":"buffer"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":true,"mFlagMusicStream":false},"info":{"id":"XcKfDz","date":"1734020884","viewed":15,"name":"Lanczos SubPixel Test","username":"CoastalStarlight","description":"Lanczos test","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["lanczos"],"hasliked":0,"parentid":"","parentname":""}}