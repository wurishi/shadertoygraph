{"ver":"0.1","info":{"id":"lX2cDm","date":"1727441614","viewed":24,"name":"FilterTB","username":"DoggieDog","description":"Filter","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["filter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Simple random number generator\nfloat rand(vec2 co) {\n  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  // Normalize the coordinates\n  vec2 uv = fragCoord / iResolution.xy;\n\n  // Displacement parameters\n  float displacementAmount = 0.05; \n  float displacementCenterX = 0.5; \n  float displacementCenterY = 0.5; \n\n  // Calculate the displacement offset\n  vec2 displacementOffset = (uv - vec2(displacementCenterX, displacementCenterY)) * displacementAmount;\n\n  // Apply the displacement offset to the UV coordinates\n  vec2 displacedUV = uv + displacementOffset;\n\n  // Sample the video texture with the displaced UV coordinates\n  vec4 color = texture(iChannel0, displacedUV);\n\n  // Chromatic aberration parameters\n  float aberrationAmount = 0.005; \n  float aberrationStrength = 0.05; \n\n  // Calculate offsets for each color channel\n  vec2 redOffset = vec2(aberrationAmount * aberrationStrength, 0.0);\n  vec2 greenOffset = vec2(0.0, aberrationAmount * aberrationStrength);\n  vec2 blueOffset = vec2(-aberrationAmount * aberrationStrength, 0.0);\n\n  // Sample the texture with offsets for each channel\n  vec4 red = texture(iChannel0, displacedUV + redOffset);\n  vec4 green = texture(iChannel0, displacedUV + greenOffset);\n  vec4 blue = texture(iChannel0, displacedUV + blueOffset);\n\n  // Color noise parameters\n  float noiseIntensity = 0.1; \n\n  // Generate random noise for each color channel\n  float noiseR = rand(fragCoord + iTime);\n  float noiseG = rand(fragCoord + iTime * 2.0);\n  float noiseB = rand(fragCoord + iTime * 3.0);\n\n  // Apply noise to each color channel\n  red.r += noiseR * noiseIntensity;\n  green.g += noiseG * noiseIntensity;\n  blue.b += noiseB * noiseIntensity;\n\n  // Dust effect parameters\n  float dustIntensity = 0.2;\n  float dustSize = 0.01; \n  float dustDensity = 10.0; \n\n  // Generate dust particles\n  for (int i = 0; i < 100; i++) {\n    vec2 dustPosition = rand(vec2(i, iTime)) * iResolution.xy;\n    float distance = distance(fragCoord, dustPosition);\n    if (distance < dustSize) {\n      float dustFactor = smoothstep(0.0, dustSize, distance);\n      color.rgb += vec3(dustIntensity * dustFactor);\n    }\n  }\n\n  // Saturation effect parameters\n  float saturation = 0.5; \n\n  // Calculate the grayscale version of the color\n  vec3 grayscale = vec3(dot(color.rgb, vec3(0.299, 0.587, 0.114)));\n\n  // Apply saturation\n  color.rgb = mix(grayscale, color.rgb, saturation); \n\n  // Combine the channels with their offsets\n  fragColor = vec4(color.r, color.g, color.b, color.a);\n}","name":"Image","description":"","type":"image"}]}