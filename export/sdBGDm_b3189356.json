{"ver":"0.1","info":{"id":"sdBGDm","date":"1617484152","viewed":100,"name":"Mandelbrot color audio animated","username":"x44203","description":"Mandelbrot set with color animation","likes":3,"published":1,"flags":4,"usePreview":0,"tags":["math","mandelbrot","art"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv0 = fragCoord.yx/iResolution.yx;\n    vec2 uv = (fragCoord.yx/iResolution.yx - 0.5) * 4.0;\n    vec2 mouse = (iMouse.yx/iResolution.yx - 0.5) * 4.0;\n    \n    uv = vec2(uv.x, abs(uv.y));\n    \n    uv -= mouse + 0.0;\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    float x = 0.0;\n    float y = 0.0;\n    int iter = 0;\n    float pi = 3.1415927;\n    float sig = textureLod(iChannel0, vec2(uv0.x,0.75), 0.0 ).x;\n    float fft = textureLod(iChannel0, vec2(uv0.x,0.25), 0.0 ).x;\n    \n    while (x * x + y * y <= 4.0 * (1.0 + sin(iTime) * 0.0) && iter < 1000)\n    {\n        float xt = x * x - y * y + uv.x;\n        y = 2.0 * x * y + uv.y - fft;\n        x = xt + sig - 0.5;\n        iter += 1;\n    }\n    \n    float val = float(iter);// * cos(iTime * 0.5) + 0.2 * cos(iTime * 16.0);\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*vec3(sin(val / 5.0), sin(val / 3.0 + pi * 2.0 / 3.0), sin(sin(val / 10.0)));\n\n    // Output to screen\n    fragColor = vec4(col / (float(iter) * 0.01 + 1.0),1.0);\n}","name":"Image","description":"","type":"image"}]}