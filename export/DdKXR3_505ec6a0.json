{"ver":"0.1","info":{"id":"DdKXR3","date":"1681696372","viewed":102,"name":"Dirty rifle","username":"ianertson","description":"Use the mouse to look around :)","likes":9,"published":1,"flags":0,"usePreview":1,"tags":["3d","raymarching","raymarch","materials","gun","rifle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ID_GROUND 1\n#define ID_GUN 2\n\nfloat groundSDF(in vec3 p) {\n    return p.y;\n}\n\nfloat gunSDF(\n    in vec3 p,\n    in int skip,\n    inout int id,\n    inout Object o,\n    inout float handle\n    ) {\n    float dist = FAR;\n    id = ID_GUN;\n    vec3 op = p;\n    \n    float barrelLen = 1.8;\n    float barrelR = 0.06;\n    \n    float barrel = cylSDF(p - vec3(0, 0, -barrelLen/2.), vec3(0), vec3(0, 0, barrelLen), barrelR*1.1);\n    \n    vec3 aimSize = vec3(0.02, 0.02, 0.044);\n    float aim = boxSDF(p - vec3(0, aimSize.y+barrelR, (barrelLen/2.)-aimSize.z*2.), mix(aimSize, aimSize*vec3(0.1, 1.0, 1.), sgt(p.y-(aimSize.y+barrelR), 0.002, 0.01)));\n    \n    float YY = 0.02;\n    p.y += YY;\n    vec3 aimSizeB = vec3(0.02, 0.02, 0.044*3.)*1.4;\n    float aim2 = boxSDF(p - vec3(0, aimSizeB.y+barrelR, -aimSizeB.z*2.5), mix(aimSizeB, aimSizeB*vec3(0.1, 1.0, 1.), sgt(p.y-(aimSizeB.y+barrelR), 0.002, 0.01)));\n    \n    float tiltR = barrelR*0.2;\n    float tiltLen = aimSizeB.z*0.8;\n    vec3 tiltDir = vec3(0, 1, -1.5);\n    tiltDir = normalize(tiltDir);\n    p.z += aimSizeB.z*2.5;\n    p.z = abs(p.z)-0.022;\n    float aimTilt = cylSDF(p - vec3(0, aimSizeB.y+barrelR, aimSizeB.z), vec3(0), tiltDir*tiltLen, tiltR);\n    \n    p = op;\n    \n    p.y += YY;\n    \n    float aimTiltTop = cylSDF(p - vec3(0, aimSizeB.y+barrelR+(tiltLen*0.5), -aimSizeB.z*2.5), -vec3(0, 0, aimSizeB.z)/2., vec3(0, 0, aimSizeB.z)/2., tiltR);\n    aimTilt = smin(aimTilt, aimTiltTop, 0.002);\n    aim2 = smin(aim2, aimTilt, 0.04);\n    \n    aim = min(aim, aim2);\n    \n    p = op;\n    \n    p.z -= barrelLen/5.;\n    p.y += barrelR*2.3;\n    p.x = abs(p.x);\n    p.x += barrelR*0.55;\n    \n    p.xy *= rot(radians(90.+180.));\n    \n    vec3 aimSize2 = aimSize*1.5;\n    float lock1 = boxSDF(p - vec3(0, aimSize2.y+barrelR, -aimSize2.z*8.), mix(aimSize2, aimSize2*vec3(0.01, 1.0, 0.3), 0.9*sgt(p.y-(aimSize2.y+barrelR), 0.002, 0.01)));\n    float lock2 = cylSDF(p - vec3(0, aimSize2.y+barrelR, -aimSize2.z*9.), vec3(0), vec3(0, 0, aimSize2.z*3.), aimSize2.y);\n    float lock = mix(lock1, lock2, 0.5);\n\n    p = op;\n    \n    float frontBarrelLen = barrelLen*0.15;\n    float frontBarrelR = barrelR*0.45;\n    float frontBarrel = cylSDF(p - vec3(0, 0, (barrelLen/2.)), vec3(0), vec3(0, 0, frontBarrelLen), frontBarrelR);\n    \n    float botBarrelLen = barrelLen*0.85;\n    float botBarrelR = barrelR*0.7;\n    vec3 botBarrelDir = vec3(0, 0, 1);\n    \n    float trigHoleStart = -0.38;\n    \n    float trigHoleMod = slt(p.z, trigHoleStart, 0.07);\n    botBarrelDir = mix(botBarrelDir, vec3(0, 1, 0), 0.09*trigHoleMod);\n    \n    botBarrelDir = normalize(botBarrelDir);\n    float botBarrel = cylSDF(p - vec3(0, -(barrelR + (botBarrelR*0.4)), -barrelLen/2.), vec3(0), botBarrelDir*botBarrelLen, botBarrelR);\n    \n    vec3 handleSize = vec3(barrelR*0.9, barrelLen*0.2, barrelR*2.5);\n    handleSize.z = mix(handleSize.z, handleSize.z*2., 0.6*sgt(-p.y, 0.5, 0.2));\n    handleSize.x = mix(handleSize.x, handleSize.x*3., 0.6*sgt(-p.y, 0.4, 0.3));\n    float handleRot = mix(0.33, 0.55, 0.3*sgt(-p.y, 0.3, 0.5))*1.1;\n    handle = boxSDF(pointRot(p - vec3(0, -handleSize.y, -((barrelLen/2.))), vec3(handleRot, 0, 0)), handleSize);\n    \n    \n    \n    vec3 bodySize = vec3(barrelR*0.7*0.9, barrelR*2.6, barrelLen/3.1);\n    bodySize.y = mix(bodySize.y, bodySize.y / (1.0 + 3.5*trigHoleMod), slt(p.y, -0.03, 0.1));\n    float body = boxSDF(p - vec3(0, -(barrelR+botBarrelR+(bodySize.y*0.2)), -handleSize.z+0.05), bodySize);\n    body = mix(body, body - 0.01, sgt(-p.y, 0.2, 0.01));\n    \n    vec3 magSize = vec3(barrelR*0.4, barrelLen*0.175, barrelR*2.2);\n    float magRot = mix(-0.33, -0.66, sgt(-p.y, 0.3, 0.5));\n    float mag = boxSDF(pointRot(p - vec3(0, -((magSize.y*1.3)), magSize.z-(-trigHoleStart/2.)), vec3(magRot, 0, 0)), magSize);\n    \n    float trigHoleR1 = 0.067;\n    float trigHoleR2 = 0.01;\n    vec3 trigHolePos = vec3(0, -(trigHoleR1+trigHoleR2+botBarrelR+(bodySize.y)+0.025),\n            trigHoleStart + -(trigHoleR1+0.11));\n    float trigHole = torusSDF(\n        (p - trigHolePos) * vec3(1, 1, 1.0/1.6),\n        trigHoleR1, trigHoleR2);\n        \n    float trigLen = trigHoleR1;\n    float trigR = trigHoleR2;\n    vec3 trigDir = vec3(0, -1.0, 0);\n    vec3 trigPos = (trigHolePos + vec3(0, trigLen/2., -trigR*3.0));\n    trigDir = mix(trigDir, trigDir+vec3(0, 0, 1), slt((p-trigPos).y, -0.03, 0.1));\n    trigDir = normalize(trigDir);\n    float trigg = lineSDF(p - trigPos, vec3(0), trigDir*trigLen, trigR);\n    \n    \n    dist = min(dist, barrel);\n    dist = min(dist, frontBarrel);\n    dist = min(dist, botBarrel);\n    dist = smin(dist, handle, 0.03);\n    dist = smin(dist, body, 0.03);\n    dist = smin(dist, mag, 0.001);\n    dist = min(dist, trigHole);\n    dist = min(dist, aim);\n    dist = min(dist, trigg);\n    dist = min(dist, lock);\n    return dist/1.6;\n}\n\nObject getGun() {\n    return Object(vec3(0, 1.5, 0), vec3(0, 0, 0));\n}\n\nfloat sdf(inout Data data, in vec3 p) {\n    int skip = data.skip;\n    int id = ID_NONE;\n    float dist = FAR;\n    Object o = NEW_OBJECT;\n    \n    float ground = groundSDF(p);\n    SAMPLE(ground, o, ID_GROUND);\n    {\n        Object oGun = getGun();\n        int gunId = 0;\n        float handle = FAR;\n        float gun = gunSDF(pointRot(p - oGun.p, oGun.q), skip, gunId, oGun, handle);\n        SAMPLE(gun, oGun, ID_GUN);\n    }\n    data.id = id;\n    data.o = o;\n    return dist;\n}\n\nfloat checkerTexture(in vec2 uv, in float s) {\n    vec2 d = max(abs(dFdx(uv)), abs(dFdy(uv))) + s;\n    vec2 t1 = vec2(1.-2.0*abs(fract((uv.x+.5*d.x)*0.5)-0.5), 1.-2.0*abs(fract((uv.y+.5*d.y)*.5)-0.5));\n    vec2 t2 = vec2(1.-2.0*abs(fract((uv.x-.5*d.x)*0.5)-0.5), 1.-2.0*abs(fract((uv.y-.5*d.y)*.5)-0.5));\n    return 0.5 - 0.5*((t1.x-t2.x)/d.x)*(t1.y-t2.y)/d.y;\n}\n\nvec3 getAlbedoGround(inout Data data) {\n    vec3 p = data.p;\n    vec3 n = data.n;\n    vec2 uv = boxUv(p, n);\n    uv -= 1.;\n    vec3 col = vec3(0.0)+checkerTexture(uv*0.5, 0.02);\n    data.m.rough = 0.5;\n    data.m.metallic = 0.55;\n    return col;\n}\n\nvec3 woodTexture(in vec2 uv, in vec3 p, inout Material m) {\n    uv += 0.5928312;\n    float tile = 2.0;\n    vec2 id = floor(uv*tile);\n    vec2 lv = fract(uv*tile);\n    vec2 alv = abs(lv*2.0-1.0);\n    lv = lv*lv*(3.0-2.0*lv);\n    float seed = 0.392812;\n    float rid = mix(\n        mix(hash21Fast(id, seed), hash21Fast(id+vec2(1, 0), seed), lv.x),\n        mix(hash21Fast(id+vec2(0, 1), seed), hash21Fast(id+vec2(1, 1), seed), lv.x),\n        lv.y\n    );\n    uv *= rot(rid*0.5);\n    vec3 col = vec3(0.0);\n    vec3 c1 = rgb(142, 107, 94);\n    vec3 c2 = rgb(79, 53, 57);\n    vec3 c3 = rgb(174, 109, 69);\n    vec3 c4 = rgb(232, 186, 128);\n    vec3 hf1 = sineNoise(uv, 0.3292123, 2.);\n    uv *= rot(hf1.z*0.5);\n    vec3 col1 = mix4(c1, c2, c3, c4, hf1);\n    vec3 col2 = mix4(c4, c3, c2, c1, hf1);\n    col += (col1+col2)*0.5;\n    float cracks = max(0.0, 1.0-smoothstep(0.02, 0.1, abs(hf1.y-rid)));\n    float cracks2 = exp((sin((uv.x*4.928931+uv.y)*4.28*2.+cos((uv.y*4.203921)-(uv.x*0.59291))))-1.);\n    cracks = mix(cracks, cracks2, clamp(hf1.z+hf1.y, 0.0, 1.0));\n    cracks = mix(cracks, fract(cracks*3.3), 0.7*smoothstep(0.4, 0.7, hf1.x));\n    cracks *= 0.5;\n    col = mix(col, col*col, cracks);\n    m.rough = clamp(cracks*2., 0.7, 1.0);\n    m.spec = max(0.0, 0.3-cracks*2.);\n    m.spec += hf1.y*0.5;\n    m.z = (0.5-cracks*0.02)+((0.5-hf1.y)*2.);\n    return col;\n}\n\n//#define DEBUG_TEXTURE metalTexture\n\nvec3 metalTexture(in vec2 uv, in vec3 p, inout Material m) {\n    vec3 col = vec3(0.0);\n    \n    vec3 hf1 = snoise(uv, 0.00321254, 0.5, 64.0, 6);\n    vec3 hf2 = snoise(uv, 3.30398291, 1.0, 64.0, 6);\n    vec3 lf1 = snoiseWarp(uv, 6.6868438, 1.0, 16.0, 6, 0.6);\n   \n    vec3 grain = abs(normalize(cross(hf1*2.0-1.0, hf2*2.0-1.0)));\n    float sn = sineNoisef(uv-0.1, 3.332921, 24.0);\n    \n    vec3 c1 = vec3(0.596, 0.600, 0.616);\n    vec3 c2 = vec3(0.482, 0.478, 0.471);\n    vec3 c3 = vec3(0.267, 0.267, 0.267);\n    vec3 c4 = vec3(0.514, 0.459, 0.447);\n\n    \n    vec3 bg1 = mix4(c1, c2, c3, c4, hf1);\n    vec3 bg2 = mix4(c4, c3, c2, c1, hf2);\n    vec3 bg = (bg1 + bg2) * 0.5;\n    col += bg;\n    \n    col = mix(col, col*col, sn*0.5);\n    col = mix(col, clamp(col+col, 0.0, 1.0), clamp(0.5*smoothstep(0.4, 0.7, lf1.x), 0.23, 1.0));\n    \n    float dirtReg = clamp(grain.x*smoothstep(0.4, 0.7, lf1.y), 0.0, 1.0);\n    \n    col = mix(col, col*col, dirtReg);\n    \n    m.metallic = clamp(mix(0.5, 0.15, dirtReg)+(sn*sn), 0.0, 0.8);\n    m.spec = clamp(max(0.0, 1.0-dirtReg) + 0.05*max(0.0, 1.0-(sn*2.)), 0.02, 1.0);\n    m.rough = clamp((dirtReg*2.)+sn, 0.25, 0.9999);\n    \n    return col;\n}\n\nvec3 getAlbedoGun(inout Data data) {\n    vec3 p = data.p;\n    vec3 n = data.n;\n    \n    vec3 rp = pointRot(p - data.o.p, data.o.q);\n    vec2 uv = boxUv(rp, pointRot(n, data.o.q));\n    \n    Object oGun = getGun();\n    int gunId = 0;\n    float handle = FAR;\n    int skip = -1;\n    float gun = gunSDF(rp, skip, gunId, oGun, handle);\n    \n  \n    \n    Material metalMaterial = NEW_MATERIAL;\n    Material woodMaterial = NEW_MATERIAL;\n    vec3 metalColor = metalTexture(uv, p, metalMaterial);\n    vec3 woodColor = woodTexture(uv, p, woodMaterial);\n    \n    float woodArea = smoothstep(0.03, 0.0, handle/1.6);\n    vec3 col = mix(metalColor, woodColor, woodArea);\n    data.m = materialMix(metalMaterial, woodMaterial, woodArea);\n    \n    if (woodArea >= 0.89) {\n        data.m.rough = clamp(data.m.rough*1.5, 0.0, 1.0);\n    }\n    \n    //data.n = makeNormal(data.n, data.m.z, 0.16, 0.009);\n    return col;\n}\n\nvec3 getAlbedo(inout Data data) {\n    switch (data.id) {\n        case ID_GROUND: return getAlbedoGround(data); break;\n        case ID_GUN: return getAlbedoGun(data); break;\n    }\n    \n    return vec3(0.77);\n}\n\nvec3 getSky(in vec3 rd) {\n    float dotup = cdot(rd, vec3(0, 1, 0));\n    vec3 col = pow(COLOR_SKY, vec3(1.0 + dotup));\n    return col;\n}\n\nvec3 render(inout Data data, in vec3 ro, in vec3 rd, inout float depth) {\n    vec3 col = vec3(0.0);\n    depth = 1.0;\n    float dotup = cdot(rd, vec3(0, 1, 0));\n    \n    Light lights[NUM_LIGHTS];\n    lights[0] = LIGHT_SUN; \n    \n    raycast(data, lights, col, ro, rd);\n    \n    depth = data.d / FAR;\n    \n    col += smoothstep(0.001, 1.0, depth) * max(0.0, 1.0 - smoothstep(0.0, 0.25, dotup));\n    \n    return col;\n}\n\nRay getRay(in vec2 uv, in vec4 m) {\n    vec3 ro = vec3(0, 0, -1.5);\n    vec3 rd = normalize(vec3(uv.xy, 1.0));\n    \n    Object oGun = getGun();\n    \n    if (m.z > 0.01 && length(m.xy) > 0.0001 && iFrame > 1 && iTime > 0.0001) {\n        ro.yz *= rot(m.y*TAU);\n        ro.xz *= rot(m.x*TAU);\n        \n        rd.yz *= rot(m.y*TAU);\n        rd.xz *= rot(m.x*TAU);\n        \n        float y = 1.1;\n        ro.y += y;\n        ro.y = max(ro.y, y);\n    } else {\n        float t = ((T+4.9891)*0.5)+3.3921;\n        ro.xz = vec2(cos(t), sin(t))*2.;\n        float y = 1.6 + cos(t-1.9);\n        ro.y += y;\n        ro.y = max(ro.y, y);\n        rd = look(uv, oGun.p, ro, 1.0);\n    }\n    \n    \n    \n    return Ray(ro, rd);\n}\n\nvec4 blit(in vec2 fc) {\n    vec3 col = vec3(0.0);\n    vec2 uv = (fc-0.5*R.xy)/R.y;\n    vec4 m = vec4((iMouse.xy-0.5*R.xy)/R.y, iMouse.zw);\n    \n    Ray ray = getRay(uv, m);\n    vec3 ro = ray.ro;\n    vec3 rd = ray.rd;\n    Data data = NEW_DATA;\n    float depth = 1.0;\n    \n    #ifdef DEBUG_TEXTURE\n    Material ma = NEW_MATERIAL;\n    col += DEBUG_TEXTURE(fc.xy/R.xy, ro+rd, ma);\n    #else\n    col += render(data, ro, rd, depth);\n    col = aces(col);\n    col = pow(col, vec3(1.0 / 2.2));\n    #endif\n    \n    return vec4(col, depth);\n}\n\nvoid mainImage( out vec4 O, in vec2 fc )\n{\n    vec3 col = vec3(0.0);\n    O = blit(fc);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define R (iResolution.xy)\n#ifndef HW_PERFORMANCE\n#define iTime (0.0)\n#define iFrame (0)\nuniform sampler2D iChannel3;\n#define iResolution vec2(0.0)\n#define iMouse vec4(0.0)\n#endif\n#define T (iTime)\n#define M_PI (3.14159265359)\n#define TAU (M_PI * 2.0)\n#define ZERO (min(0, int(iTime)))\n#define adot(a,b) (abs(dot(a, b)))\n#define cdot(a,b) (max(0.0, dot(a, b)))\n#define rgb(a,b,c) (vec3(a, b, c) / 255.0)\n\n\n#define FORWARD_DECL\\\n    float sdf(inout Data data, in vec3 p) { return FAR; }\\\n    vec3 getAlbedo(inout Data data) { return vec3(0.0); }\\\n    vec3 getSky(in vec3 rd) { return vec3(0.0); }\n\n#define SAMPLE(var, OBJ, id_) if (id_ != skip && var < dist) { id = id_; dist = var; o = OBJ; }\n// Ray marcher constants\n\n#define NEAR 0.003\n#define FAR 100.0\n#define STEPS 100\n#define SHADOW_STEPS 33\n#define FAR_LOD 1.0\n#define NORMAL_RANGE 0.001\n#define AMBIENT 0.2\n#define NUM_LIGHTS 1\n#define ID_NONE -1\n\n// Colors\n\n#define COLOR_SKY vec3(0.29, 0.61, 0.9)\n#define COLOR_SUN vec3(0.97, 0.81, 0.79)\n\n// Render constants\n\n#define SPECULAR_AMPLITUDE 64.0\n#define SHADOW_NDOTL_EPSILON 0.000003\n\n// Default sun light\n\n#define LIGHT_SUN Light(vec3(1, 2, -3), vec3(0.0), COLOR_SUN, 2.0, LIGHT_AMBIENT)\n\nstruct Object {\n    vec3 p;\n    vec3 q;\n};\n\n#define NEW_OBJECT Object(vec3(0.0), vec3(0.0))\n\nstruct Material { float rough; float spec; float metallic; float lum; float z; float ior; };\n#define NEW_MATERIAL Material(1.0, 1.0, 0.0, 0.0, 0.0, 0.0)\n\nMaterial materialMix(Material a, Material b, float f) {\n    return Material(\n        mix(a.rough, b.rough, f),\n        mix(a.spec, b.spec, f),\n        mix(a.metallic, b.metallic, f),\n        mix(a.lum, b.lum, f),\n        mix(a.z, b.z, f),\n        mix(a.ior, b.ior, f)\n    );\n}\n\nstruct Data {\n    vec3 q;\n    vec3 ro;\n    vec3 rd;\n    vec3 p;\n    vec3 n;\n    float d;\n    int skip;\n    int id;\n    float sig;\n    Material m;\n    Object o;\n};\n#define NEW_DATA Data(vec3(0.0), vec3(0.0),vec3(0.0), vec3(0.0), vec3(0.0), FAR, ID_NONE, ID_NONE, 1., NEW_MATERIAL, NEW_OBJECT)\n\n\nstruct Ray {\n    vec3 ro;\n    vec3 rd;\n};\n\n#ifndef HW_PERFORMANCE\nfloat sdf(inout Data data, in vec3 p) { return FAR; }\nvec3 getAlbedo(inout Data data) { return vec3(0.0); }\nvec3 getSky(in vec3 rd) { return vec3(0.0); }\n#else\nfloat sdf(inout Data data, in vec3 p);\nvec3 getAlbedo(inout Data data);\nvec3 getSky(in vec3 rd);\n#endif\n\n\n// Utilities\n\nvec3 mix4(vec3 c1, vec3 c2, vec3 c3, vec3 c4, vec3 m) {\n    return mix(mix(mix(c1, c2, m.x), c3, m.y), c4, m.z);\n}\n\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5*(a-b)/k, 0.0, 1.0);\n    return mix(a, b, h) - k*h*(1.0-h);\n}\n\nfloat smax(float a, float b, float k) {\n    return smin(a, b, -k);\n}\n\nvec3 smin(vec3 a, vec3 b, float k) {\n    vec3 h = clamp(0.5 + 0.5*(a-b)/k, 0.0, 1.0);\n    return mix(a, b, h) - k*h*(1.0-h);\n}\n\nvec3 smax(vec3 a, vec3 b, float k) {\n    return smin(a, b, -k);\n}\n\nfloat sabs(in float v, in float k) {\n    return smax(-v, v, k);\n}\n\nfloat sclamp(in float v, in float mi, in float ma, in float k) {\n    return smin(smax(v, mi, k), ma, k);\n}\n\nfloat sgt(in float a, in float b, in float s) {\n    float h = clamp(0.5 + 0.5 * (a - b) / s, 0.0, 1.0);\n    return mix(0.0, 1.0, h*h*(3.0-2.0*h));\n}\n\nfloat slt(in float a, in float b, in float s) {\n    float h = clamp(0.5 + 0.5 * (b - a) / s, 0.0, 1.0);\n    return mix(0.0, 1.0, h*h*(3.0-2.0*h));\n}\n\nfloat srange(in float v, in float mi, in float ma, in float s) {\n    return sgt(v, mi - s, s) * slt(v, ma + s, s);\n}\n\nvec3 makeNormal(in vec3 wn, in float z, in float mx, in float s) {\n    if (abs(z) <= 0.0000001) return wn;\n    vec2 dx = vec2(dFdx(z), 0.0001);\n    vec2 dy = vec2(0.0001, dFdy(z));\n    float bumpScale = s;\n    vec3 cp = cross(vec3(dx, bumpScale), vec3(dy, bumpScale));\n    if (length(cp) <= 0.00002) return wn;\n    cp = normalize(cp);\n    mx *= max(0.0, 1.0 - max(0.0, dot(cp, -wn)));\n    vec3 next = normalize(mix(wn, normalize(wn+cp), mx));\n    if (length(next) <= 0.0001) return wn;\n    return next;\n}\n\nmat2 rot(in float a) { float c = cos(a); float s = sin(a); return mat2(c, s, -s, c); }\n\nvec3 look(in vec2 uv, in vec3 point, in vec3 ro, in float zoom) {\n    vec3 camForward = normalize(point - ro);\n    vec3 camRight = -normalize(cross(camForward, vec3(0, 1, 0)));\n    vec3 camUp = -normalize(cross(camRight, camForward));\n    vec3 screenCenter = ro + camForward * zoom;\n    vec3 screenIntersection = screenCenter + uv.x * camRight + uv.y * camUp;\n    return normalize(screenIntersection - ro);\n}\n\nvec3 pointRot(in vec3 p, in vec3 r) {\n    p.yz *= rot(r.x);\n    p.xz *= rot(r.y);\n    return p;\n}\n\n// UV functions\n\nvec2 boxUv(in vec3 p, in vec3 n) {\n    return mix(mix(p.xy, p.yz, round(adot(n, vec3(1, 0, 0)))), p.xz, round(adot(n, vec3(0, 1, 0))));\n}\n\nvec2 sphereUv(in vec3 p) {\n    float u = acos(p.y);\n    float v = atan(p.x, p.z);\n    u = 0.5 - u / M_PI;\n    v = 0.5 + v / M_PI;\n    return vec2(u, v);\n}\n\n// Distance functions\n\nfloat sphereSDF(in vec3 p, in float r) {\n    return length(p) - r;\n}\n\nfloat boxSDF(in vec3 p, in vec3 s) {\n    p = abs(p) - s;\n    return length(max(p, 0.0)) + min(max(p.x, max(p.y, p.z)), 0.0);\n}\n\nfloat lineSDF(in vec3 p, in vec3 a, in vec3 b, in float r) {\n    vec3 pa = p - a;\n    vec3 ba = b - a;\n    return length(pa - ba * (clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0))) - r;\n}\n\nfloat cylSDF(in vec3 p, in vec3 a, in vec3 b, in float r) {\n    vec3 ab = b - a;\n    vec3 ap = p - a;\n    float t = dot(ab, ap) / dot(ab, ab);\n    vec3 c = a + t * ab;\n    float x = length(p - c) - r;\n    float y = (abs(t - 0.5) - 0.5) * length(ab);\n    float e = length(max(vec2(x, y), 0.0));\n    float i = min(max(x, y), 0.0);\n    return e + i;\n}\n\nfloat torusSDF(in vec3 p, in float r1, float r2) {\n    p = p.xyz;\n    float ll = length(p.yz)-r1;\n    return length(vec2(ll,p.x))-r2;\n}\n\n// Noise functions\n\n\nuint hash21u(in vec2 ip, in float seed) {\n    uvec2 p = floatBitsToUint(ip);\n    uint s = floatBitsToUint(seed)>>3U;\n    p ^= (p << 17U);\n    p.x ^= (p.x << s);\n    p.y ^= (~p.y << s) ^ ~p.x << 3U;\n    p ^= (p >> 13U);\n    p.y ^= (p.y << s);\n    p.x ^= (~p.x << s) ^ ~p.y >> 3U;\n    p ^= (p << 5U);\n    return 5031U*((p.x + p.y) + ((p.x ^ p.y) * ((s << ~p.x) + (s << ~p.y))));\n}\n\nfloat hash21(in vec2 p, in float seed) { return float(hash21u(p, seed)) / float(0xFFFFFFFFU); }\n\nuint hash31u(in vec3 ip, in float seed) {\n    uvec3 p = floatBitsToUint(ip);\n    uint s = floatBitsToUint(seed);\n    p.z ^= (~p.z << 34256U);\n    p ^= (p << 17U);\n    p.x ^= (p.x << s);\n    p.y ^= (~p.y << s) ^ p.z;\n    p ^= (p >> 13U);\n    p.y ^= (p.y << s);\n    p.x ^= (~p.x << s) ^ p.z;\n    p ^= (p << 5U);\n    return 9031U*((p.x + p.y * p.z) + ((p.x ^ p.z * p.y) * ((s << ~p.x) + (s << ~p.y) + (s << ~p.z))));\n}\n\nfloat hash31(in vec3 p, in float seed) { return float(hash31u(p, seed)) / float(0xFFFFFFFFU); }\n\nvec3 hash23(in vec2 ip, in float seed) {\n    uint n = hash21u(ip, seed);\n    n ^= (n >> 13U);\n    return vec3(\n        float((n >> 16U) & 0xFFU),\n        float((n >> 8U) & 0xFFU),\n        float(n & 0xFFU)\n    ) / float(0xFFU);\n}\n\nvec3 hash33(in vec3 ip, in float seed) {\n    uint n = hash31u(ip, seed);\n    n ^= (n >> 13U);\n    return vec3(\n        float((n >> 16U) & 0xFFU),\n        float((n >> 8U) & 0xFFU),\n        float(n & 0xFFU)\n    ) / float(0xFFU);\n}\n\nfloat noise21(in vec2 p, in float seed) {\n    vec2 id = floor(p);\n    vec2 lv = fract(p);\n    lv = lv*lv*(3.0-2.0*lv);\n    return mix(\n        mix(hash21(id, seed), hash21(id+vec2(1, 0), seed), lv.x),\n        mix(hash21(id+vec2(0, 1), seed), hash21(id+vec2(1, 1), seed), lv.x),\n        lv.y\n    );\n}\n\nfloat noise21(in vec2 p, in float seed, in float freq, const in int octaves) {\n    float div = 0.0;\n    float amp = 1.0;\n    float n = 0.0;\n    \n    for (int i = 0; i < octaves; i++) {\n        float j = float(i) / float(octaves);\n        n += amp * noise21(p * freq, seed); div += amp; amp /= (1.0 + j); freq *= 2.0;\n    }\n    \n    return n/div;\n}\n\nvec3 noise23(in vec2 p, in float seed) {\n    vec2 id = floor(p);\n    vec2 lv = fract(p);\n    lv = lv*lv*(3.0-2.0*lv);\n    return mix(\n        mix(hash23(id, seed), hash23(id+vec2(1, 0), seed), lv.x),\n        mix(hash23(id+vec2(0, 1), seed), hash23(id+vec2(1, 1), seed), lv.x),\n        lv.y\n    );\n}\n\nvec3 noise23(in vec2 p, in float seed, in float freq, const in int octaves) {\n    float div = 0.0;\n    float amp = 1.0;\n    vec3 n = vec3(0.0);\n    \n    for (int i = 0; i < octaves; i++) {\n        float j = float(i) / float(octaves);\n        n += amp * noise23(p * freq, seed); div += amp; amp /= (1.0 + j); freq *= 2.0;\n    }\n    \n    return n/div;\n}\n\nfloat noise31(in vec3 p, in float seed) {\n    vec3 id = floor(p);\n    vec3 lv = fract(p);\n    lv = lv*lv*(3.0-2.0*lv);\n    return mix(\n        mix(\n            mix(hash31(id, seed),               hash31(id+vec3(1, 0, 0), seed), lv.x),\n            mix(hash31(id+vec3(0, 1, 0), seed), hash31(id+vec3(1, 1, 0), seed), lv.x),\n            lv.y\n        )\n        ,\n        mix(\n            mix(hash31(id+vec3(0, 0, 1), seed), hash31(id+vec3(1, 0, 1), seed), lv.x),\n            mix(hash31(id+vec3(0, 1, 1), seed), hash31(id+vec3(1, 1, 1), seed), lv.x),\n            lv.y\n        ),\n        lv.z\n    );\n}\n\nfloat noise31(in vec3 p, in float seed, in float freq, const in int octaves) {\n    float div = 0.0;\n    float amp = 1.0;\n    float n = 0.0;\n    \n    for (int i = 0; i < octaves; i++) {\n        float j = float(i) / float(octaves);\n        n += amp * noise31(p * freq, seed); div += amp; amp /= (1.0 + j); freq *= 2.0;\n    }\n    \n    return n/div;\n}\n\nvec3 noise33(in vec3 p, in float seed) {\n    vec3 id = floor(p);\n    vec3 lv = fract(p);\n    lv = lv*lv*(3.0-2.0*lv);\n    return mix(\n        mix(\n            mix(hash33(id, seed),               hash33(id+vec3(1, 0, 0), seed), lv.x),\n            mix(hash33(id+vec3(0, 1, 0), seed), hash33(id+vec3(1, 1, 0), seed), lv.x),\n            lv.y\n        )\n        ,\n        mix(\n            mix(hash33(id+vec3(0, 0, 1), seed), hash33(id+vec3(1, 0, 1), seed), lv.x),\n            mix(hash33(id+vec3(0, 1, 1), seed), hash33(id+vec3(1, 1, 1), seed), lv.x),\n            lv.y\n        ),\n        lv.z\n    );\n}\n\nvec3 noise33(in vec3 p, in float seed, in float freq, const in int octaves) {\n    float div = 0.0;\n    float amp = 1.0;\n    vec3 n = vec3(0.0);\n    \n    for (int i = 0; i < octaves; i++) {\n        float j = float(i) / float(octaves);\n        n += amp * noise33(p * freq, seed); div += amp; amp /= (1.0 + j); freq *= 2.0;\n    }\n    \n    return n/div;\n}\n\nfloat voronoi2D(in vec2 p, in float seed){\n    vec2 Pi = floor(p);\n    vec2 Pf = fract(p);\n    \n    float dmin = 1e20;\n    vec2 res = vec2(0.0);\n    float r = 1.0;\n    \n    for(int j=-1; j<=1; j++){\n        for(int i=-1; i<=1; i++){\n            vec2 lattice = vec2(float(i),float(j));\n            vec2 offset = vec2(hash21(Pi+lattice, seed+3.328123), hash21(Pi+lattice, seed+5.58931));\n            vec2 diff = lattice + offset - Pf;\n            \n            float dist = dot(diff,diff);\n            r = min(r, dist/0.56);\n            if(r<dmin){\n                dmin = r;\n                res = lattice + offset;\n            }\n        }\n    }\n\n    return clamp(sqrt(dmin), 0.0, 1.0);\n}\n\nfloat voronoi3D(in vec3 p, in float seed){\n    vec3 Pi = floor(p);\n    vec3 Pf = fract(p);\n    \n    float dmin = 1e20;\n    vec3 res = vec3(0.0);\n    float r = 1.0;\n    \n    for(int j=-1; j<=1; j++){\n        for(int i=-1; i<=1; i++){\n            for(int k=-1; k<=1; k++){\n                vec3 lattice = vec3(float(i),float(j), float(k));\n                vec3 offset = hash33(Pi+lattice, seed+4.48422133);\n                vec3 diff = lattice + offset - Pf;\n\n                float dist = dot(diff,diff);\n                r = min(r, dist/0.56);\n                if(r<dmin){\n                    dmin = r;\n                    res = lattice + offset;\n                }\n            }\n        }\n    }\n\n    return clamp(sqrt(dmin), 0.0, 1.0);\n}\n\nfloat hash21Fast(in vec2 p, in float seed) {\n    float ma = 64.092391;\n    float x = mod(p.x*4.0291, ma) / ma;\n    float y = mod(p.y*5.5920, ma) / ma;\n    vec2 p2 = mix(vec2(x,y), vec2(y, x), fract(seed*10.29891231))*2.0-1.0;\n    float r1 = mod(100.2891382*fract(seed+(dot(p, p2)*16.2099123)), ma)/ma;\n    float r2 = fract((p.x*3.392912+p.y)*distance(p2, p-seed));\n    return fract(dot(p, vec2(r1, r2)));\n}\n\nvec3 sineMut(in vec2 p, in float seed) {\n    vec2 s1 = vec2(sin(p.x+seed), cos(p.y+seed));\n    float r1 = dot(s1, p);\n    s1 *= rot(r1);\n    vec2 s2 = vec2(cos(r1+seed), sin(r1+seed));\n    float r2 = dot(s2, p);\n    s2 *= rot(r2);\n    \n    vec3 v = vec3(s1.x, s1.y, s2.x);\n    v.xz *= rot(s2.y);\n    return exp(v-1.);\n}\n\nfloat sineNoisef(in vec2 p, in float seed, in float freq) {\n    vec2 op = p;\n    p = p * 2.0 - 1.0;\n    vec2 r = p;\n    p *= freq;\n    for (int i = ZERO; i < 3; i++) {\n        r = 0.25*vec2(cos(seed)-sin(p.x*0.33), sin(seed)-cos(p.y*0.33));\n        r *= mat2(6.28, 8.0, -6.28, 8.0)*-0.033;\n        p *= mat2(6.28, 8.0, -6.28, 8.0)*0.07+0.77*(r.x*0.06+r.y);\n        seed += dot(r, p)/(16.0*freq);\n    }\n    \n    float l = length(p);\n    return max(0.0, 0.5-dFdx(l));\n}\n\nvec3 sineNoise(in vec2 p, in float seed, in float freq) {\n    float div = 0.0;\n    float amp = 1.0;\n    vec3 n = vec3(0.0);\n    \n    for (int i = 0; i < 4; i++) {\n        n += amp*sineMut(p*freq, seed); div += amp; amp /= 2.; freq *= 2.0;\n        p += (n.xz*n.y)*amp;\n    }\n    \n    return n/div;\n}\n\nfloat noiseFast(in vec2 p, in float seed) {\n    p += 0.0982812+seed;\n    vec2 id = floor(p);\n    vec2 lv = fract(p);\n    lv = lv*lv*(3.0-2.0*lv);\n    return mix(\n        mix(hash21Fast(id, seed), hash21Fast(id+vec2(1,0), seed), lv.x),\n        mix(hash21Fast(id+vec2(0, 1), seed), hash21Fast(id+vec2(1,1), seed), lv.x),\n        lv.y\n    );\n}\n\nfloat noiseFast(in vec2 p, in float seed, in float freq, const in int octaves) {\n    p += 0.0982812+seed;\n    float div = 0.0;\n    float amp = 1.0;\n    float n = 0.0;\n    for (int i = ZERO; i < octaves; i++) {\n        n += amp * noiseFast(p*freq, seed); div += amp; amp /= 2.0; freq *= 2.0;\n    }\n    return n / div;\n}\n\n#define NOISE(p, seed, lod) (textureLod(iChannel3, (p + (seed*1.9287827185))/256.0, lod).rgb)\n\nvec3 snoise(in vec2 p, in float seed, in float lod) {\n    p += 0.99288124;\n    vec2 id = floor(p);\n    vec2 lv = fract(p); lv = lv*lv*(3.0-2.0*lv);\n    return mix(\n        mix(NOISE(id, seed, lod), NOISE(id + vec2(1, 0), seed, lod), lv.x),\n        mix(NOISE(id + vec2(0, 1), seed, lod), NOISE(id + vec2(1, 1), seed, lod), lv.x),\n        lv.y\n    );\n}\n\nvec3 snoise(in vec2 p, in float seed, in float lod, in float freq, const in int octaves) {\n    p += 0.99288124;\n    float div = 0.0;\n    float amp = 1.0;\n    vec3 n = vec3(0.0);\n    for (int i = ZERO; i < octaves; i++) {\n        n += amp * snoise(p*freq, seed, lod); div += amp; amp /= 2.0; lod /= 2.0; freq *= 2.0;\n    }\n    return n / div;\n}\n\nvec3 snoiseWarp(in vec2 p, in float seed, in float lod, in float freq, const in int octaves, in float warp) {\n    p += 0.99288124;\n    float div = 0.0;\n    float amp = 1.0;\n    vec3 n = vec3(0.0);\n    for (int i = ZERO; i < octaves; i++) {\n        n += amp * snoise(p*freq, seed, lod); div += amp; amp /= 2.0; lod /= 2.0; freq *= 2.0;\n        p += (n.xy*n.z)*warp;\n    }\n    return n / div;\n}\n\n// Shading & Colors\n\nfloat luma(vec3 color) { return dot(color, vec3(0.299, 0.587, 0.114)); }\n\nvec3 aces(vec3 x) {return x*(2.51*x + .03) / (x*(2.43*x + .59) + .14); }\n\nvec3 fresnelSchlickRoughness(float NdotV, vec3 F0, float rough) {\n  return F0 + (max(vec3(1.0 - rough), F0) - F0) * pow(max(1.0 - NdotV, 0.0), 5.0);\n}\n\nvec3 fresnelSchlick(vec3 F0, float cosTheta) {\n\treturn F0 + (vec3(1.0) - F0) * pow(1.0 - cosTheta, 5.0);\n}\n\nfloat ndfGGX(float cosLh, float roughness) {\n\tfloat alpha   = roughness * roughness;\n\tfloat alphaSq = alpha * alpha;\n\n\tfloat denom = (cosLh * cosLh) * (alphaSq - 1.0) + 1.0;\n\treturn alphaSq / (M_PI * denom * denom);\n}\n\nfloat gaSchlickG1(float cosTheta, float k) {\n\treturn cosTheta / (cosTheta * (1.0 - k) + k);\n}\n\nfloat gaSchlickGGX(float cosLi, float cosLo, float roughness) {\n\tfloat r = roughness + 1.0;\n\tfloat k = (r * r) / 8.0;\n\treturn gaSchlickG1(cosLi, k) * gaSchlickG1(cosLo, k);\n}\n\nvec3 EnvBRDFApprox(vec3 specularColor, float roughness, float ndotv) {\n    const vec4 c0 = vec4(-1, -0.0275, -0.572, 0.022);\n    const vec4 c1 = vec4(1, 0.0425, 1.04, -0.04);\n    vec4 r = roughness * c0 + c1;\n    float a004 = min(r.x * r.x, exp2(-9.28 * ndotv)) * r.x + r.y;\n    vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n    return specularColor * AB.x + AB.y;\n}\n\n// Marching\n\nbool march(inout Data data, in vec3 ro, in vec3 rd) {\n    float d = 0.0;\n    for (int i = ZERO; i < STEPS; i++) {\n        vec3 p = ro+rd*d;\n        float next = sdf(data, p);\n        d += next;\n        if (abs(next) <= (NEAR * (1.0 + (d / FAR_LOD)))) break;\n        if (abs(d) >= FAR) return false;\n    }\n    \n    vec3 p = ro+rd*d;\n    vec2 e = vec2(NORMAL_RANGE, 0.0);\n    vec3 n = normalize(sdf(data, p) - vec3(\n        sdf(data, p - e.xyy),\n        sdf(data, p - e.yxy),\n        sdf(data, p - e.yyx)\n    ));\n    \n    data.d = d;\n    data.p = p;\n    data.n = n;\n    \n    return true;\n}\n\n// Modified version of iq's https://www.shadertoy.com/view/lsKcDD\nfloat getShadow(in vec3 ro, in vec3 rd, in vec3 n, in float near, in float far, in int skip) {\n    float res = 1.0;\n    float t = NEAR;\n    float ph = 1e10;\n    Data data = NEW_DATA;\n    \n    float NdotL = dot(n, rd);\n    float nl = max(0.0, NdotL);\n    \n    float tneg = 0.0;\n    \n    for(int i = ZERO; i < SHADOW_STEPS; i++) {\n        vec3 p = ro + rd*t;\n        \n        p += n*nl*(1.0+0.1*(t / (1.0 + t)));\n        \n\t\tfloat h = sdf(data, p);\n        \n        float neg = max(0.0, -h);\n        tneg += neg;\n\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min(res, 16.0*d/max(0.0,t-y));\n        ph = h;\n        ph += nl;\n        \n        t += h;\n        \n        if( res < 0.0001 || t > far ) break;\n        \n    }\n    res = clamp(res, AMBIENT, 1.0);\n    return clamp(res*res*(3.0-2.0*res), AMBIENT, 1.);\n}\n\n// Lighting\n\nstruct Light { vec3 p; vec3 d; vec3 c; float s; int type; };\n#define LIGHT_AMBIENT 0\n#define LIGHT_POINT 1\n#define LIGHT_DIR 2\n\nvec3 getLightDir(in Light light, in vec3 p) {\n    return light.type == LIGHT_AMBIENT ? normalize(light.p) :\n           light.type == LIGHT_POINT ? normalize(light.p - p) :\n           normalize(light.d);\n}\n\nvec3 getLightAtt(in Light light, in vec3 p, in vec3 n) {\n    vec3 L = getLightDir(light, p);\n    float NdotL = max(AMBIENT, dot(n, L));\n    \n    switch (light.type) {\n        case LIGHT_AMBIENT: return light.c * light.s * NdotL; break;\n        case LIGHT_POINT: return light.c * NdotL * (\n            pow(light.s, 2.0) / max(0.0001, pow(distance(light.p, p), 2.0))\n        ); break;\n        case LIGHT_DIR: return light.c * light.s * NdotL * smoothstep(0.8, 1.0, dot(\n            normalize(light.p - p),\n            L\n        )); break;\n    }\n    \n    return vec3(0.0);\n}\n\nvec3 forEachLight(in Light light, in Data data, in vec3 ro, in vec3 rd, in vec3 diffuse) {\n    vec3 p = data.p;\n    vec3 n = data.n;\n    vec3 L = getLightDir(light, p);\n    vec3 ref = reflect(L, n);\n    float VdotR = cdot(rd, ref);\n    float spec = data.m.spec * pow(VdotR, SPECULAR_AMPLITUDE);\n    vec3 att = getLightAtt(light, p, n);\n    float shadow = getShadow(p + (n*NEAR*2.0), L, n, data.d, light.type == LIGHT_AMBIENT ? FAR :\n        distance(light.p, p), data.id);\n        \n    float metallic = data.m.metallic;\n    float rough = data.m.rough;\n    float specF = data.m.spec;\n    \n    vec3 LH = normalize(L + -rd);\n    float cosLi = max(0.0001, dot(n, L));\n\tfloat cosLh = max(0.0001, dot(n, LH));\n    float cosLo = max(0.0001, dot(n, -rd));\n    vec3 F0 = mix(vec3(0.04), diffuse, metallic);\n    vec3 F  = fresnelSchlick(F0, max(0.0, dot(LH, -rd)));\n    float D = ndfGGX(cosLh, rough);\n    float G = gaSchlickGGX(cosLi, cosLo, rough);\n    vec3 kd = mix(vec3(1.0) - F, vec3(0.0), metallic);\n    vec3 diffuseBRDF = kd * diffuse;\n    vec3 specularBRDF = (F * D * G) / max(0.00003, 4.0 * cosLi * cosLo);\n    \n        \n    return (diffuseBRDF + specF*specularBRDF) * att * shadow; \n}\n\n\n\nbool rayGetColor(inout Data data, in Light lights[NUM_LIGHTS],\n    in bool with_sky, inout vec3 col, in vec3 ro, in vec3 rd, inout vec3 diffuse) {\n    if (!march(data, ro, rd)) {\n        if (with_sky) {\n            col += getSky(rd);\n        }\n        return false;\n    }\n    vec3 albedo = getAlbedo(data);\n    diffuse = albedo / M_PI;\n    for (int i = ZERO; i < NUM_LIGHTS; i++) {\n        Light light = lights[i];\n        col += forEachLight(light, data, ro, rd, diffuse);\n    }\n    return true;\n}\n\nbool raycast(\n    inout Data data,\n    in Light lights[NUM_LIGHTS],\n    inout vec3 col,\n    in vec3 ro,\n    in vec3 rd\n ) {\n    \n    vec3 diffuse = vec3(0.0);\n    if (!rayGetColor(data, lights, true, col, ro, rd, diffuse)) return false;\n    float rough = data.m.rough;\n    float metallic = data.m.metallic;\n    vec3 n = data.n;\n    vec3 p = data.p;\n    \n    if (rough < 0.993) {\n        vec3 F0 = mix(vec3(0.04), diffuse, metallic);\n        float NdotV = max(0.0, dot(n, -rd));\n        vec3 F = fresnelSchlickRoughness(NdotV, F0, rough);\n        Data reflectData = NEW_DATA;\n        vec3 reflectRo = p + (n*NEAR*3.);\n        vec3 reflectDir = reflect(rd, n);\n        vec3 reflectDiffuse = vec3(0.0);\n        vec3 reflectColor = vec3(0.0);\n        vec3 env = EnvBRDFApprox(vec3(0.77), rough*rough, NdotV);\n        reflectData.skip = data.id;\n        \n        rayGetColor(reflectData, lights, true, reflectColor, reflectRo, reflectDir, reflectDiffuse);\n        \n        col += reflectColor * (F * env.x * env.y);\n    }\n    \n    return true;\n}\n","name":"Common","description":"","type":"common"}]}