{"ver":"0.1","info":{"id":"Wlffzf","date":"1597283873","viewed":309,"name":"FFT Dragon Curves","username":"rory618","description":"Plotting values taken by all littlewood polynomials of degree 20 using a fast fourier transform. Mouse to set the value of x","likes":14,"published":1,"flags":32,"usePreview":0,"tags":["2d","fractal","littlewood"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"FFT\" by rory618. https://shadertoy.com/view/4dGyWD\n// 2019-02-07 18:55:18\n\nvoid mainImage( out vec4 O, in vec2 I ) {\n\t\n    vec2 uv = I/iResolution.xy;\n    vec4 t0 = texture(iChannel0, vec2(0,0)+vec2( 1, 1)*uv);\n    vec4 t1 = texture(iChannel0, vec2(1,0)+vec2(-1, 1)*uv);\n    vec4 t2 = texture(iChannel0, vec2(0,1)+vec2(1 ,-1)*uv);\n    vec4 t3 = texture(iChannel0, vec2(1,1)+vec2(-1,-1)*uv);\n    O = t0+t1+t2+t3;\n    \n    O /= O.w;\n    O = log(10.+1.5*abs(O))/5.;\n    O.xyz = mat3(1,.1,0,.3,1,.6,.1,0,1)*O.xyz;\n    O = O-vec4(0.6,0.4,0.6,0);\n    \n    O = mix(O,.5-.5*cos(.6*vec4(2,3,4,0)*max(0.,1.+log(length(texture(iChannel1, fract(I/R.xy+0.5)).xy)))),iMouse.z>0.?0.6:1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define pi 3.14159\n#define W(i,n) cexp(vec2(0,2.*pi*float(i)/float(n)))\n#define R iResolution\n#define fradix float(radix)\n#define T(c,x,y) texelFetch(c, ivec2(x,y), 0)\n#define SUM(expr, ind, len) \\\n    sum = vec2(0);\\\n    for(int ind = 0; ind < 64; ind++){\\\n        if (ind >= len) break;\\\n        sum += expr;\\\n    }\nvec2 sum;\n\nint x_N0;\nint y_N0;\nint x_N1;\nint y_N1;\n\nfloat factor(float x){\n    x = floor(x);\n    float f = floor(sqrt(x));\n    while(fract(x/f)>.5/x){f--;}\n    return x/f;\n}\n\nvoid setRadix(vec3 R){\n    \n    x_N0 = int(R.x/factor(R.x));\n    y_N0 = int(R.y/factor(R.y));\n    x_N1 = int(R.x)/x_N0;\n    y_N1 = int(R.y)/y_N0;\n    \n}\n\nvec2 cprod(vec2 a, vec2 b){\n    return mat2(a,-a.y,a.x) * b;\n}\n\nvec2 cis(float t){\n    return cos(t - vec2(0,pi/2.));\n}\nvec2 cexp(vec2 z) {\n    return exp(z.x)*cis(z.y);\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec2 spectrum( vec2 f, int iters)\n{\n    \n    vec2 c = ((iMouse.xy-R.xy/2.)/100.);\n    if(iMouse.x==0.){\n        c = (.7+.3*sin(iTime/32.))*vec2(sin(iTime/20.),cos(iTime/20.));\n    }\n    vec2 spec = vec2(1,0);\n    vec2 d = vec2(1,0);\n    for(int i = 0; i < iters; i++){\n        spec *= (\n               cos(dot(f,d))\n            )*2.;\n        d=mat2(d,-d.y,d.x)*c;\n    }\n    return spec;\n}\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    vec2 f= (mod(I+R.xy/2.,R.xy)*2.-R.xy)/R.xy*314.1;\n    O = vec4(spectrum(f,20)/1e3,0,0);\n    \n    O *= exp(-0.00005*dot(f,f));\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 O, in vec2 I )\n{\n    setRadix(R);\n    O = vec4(0);\n    int x = int(I.x);\n    int y = int(I.y);\n    \n    int n = (x/x_N1);\n    SUM( cprod(T(iChannel0, x%x_N1+i*x_N1, y).xy,W(-i*n,x_N0)),i,x_N0 );\n    O.xy = cprod(sum, W(-(x%x_N1)*n,int(R.x)));\n    \n    \n    n = (x/x_N0);\n    SUM( cprod(T(iChannel1, (x%x_N0)*x_N1+i, y).xy,W(-i*n,x_N1)),i,x_N1 );\n    O.zw = sum;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 O, in vec2 I )\n{\n    setRadix(R);\n    O = vec4(0);\n    int x = int(I.x);\n    int y = int(I.y);\n    \n    int n = (y/y_N1);\n    SUM( cprod(T(iChannel0, x, y%y_N1+i*y_N1).zw,W(-i*n,y_N0)),i,y_N0 );\n    O.zw = cprod(sum, W(-(y%y_N1)*n,int(R.y)));\n    \n    \n    n = (y/y_N0);\n    SUM( cprod(T(iChannel1, x, (y%y_N0)*y_N1+i).zw,W(-i*n,y_N1)),i,y_N1 );\n    O.xy = sum/sqrt(R.x*R.y);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"int IHash(int a){\n\ta = (a ^ 61) ^ (a >> 16);\n\ta = a + (a << 3);\n\ta = a ^ (a >> 4);\n\ta = a * 0x27d4eb2d;\n\ta = a ^ (a >> 15);\n\treturn a;\n}\n\nfloat Hash(int a){\n\treturn float(IHash(a)) / float(0x7FFFFFFF);\n}\nvec4 rand4(int seed){\n    return vec4(Hash(seed^0x34F85A93),\n                Hash(seed^0x85FB93D5),\n                Hash(seed^0x6253DF84),\n                Hash(seed^0x25FC3625));\n}\nvec3 rand3(int seed){\n    return vec3(Hash(seed^0x348CD593),\n                Hash(seed^0x8593FD5),\n                Hash(seed^0x62A5D384));\n}\nvec2 rand2(int seed){\n    return vec2(Hash(seed^0x348C5F93),\n                Hash(seed^0x8593D5BB));\n}\n\n#define R iResolution\n\n\nvec2 randn(vec2 randuniform){\n    vec2 r = randuniform;\n    r.x = sqrt(-2.*log(1e-9+abs(r.x)));\n    r.y *= 6.28318;\n    r = r.x*vec2(cos(r.y),sin(r.y));\n    return r;\n}\n\nfloat specEst(vec2 x, int seed, float r){\n    vec2 xx = x;\n    vec2 f0 = r*randn(rand2(seed))/pow(dot(x,x),3.5);\n    vec2 f1 = r*randn(rand2(0x60946546^seed))/pow(dot(x,x),3.5);\n    float acc = 0.0;\n    float p0 = 1.0;\n    float p1 = 1.0;\n    for(int i = 0; i < 16; i++){\n        acc += p0+p1;\n        p0 *= cos(dot(xx,f0))*2.;\n        p1 *= cos(dot(xx,f1))*2.;\n        xx = mat2(x,-x.y,x.x)*xx;\n    }\n    return (acc+p0+p1)/2.;\n}\n\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    O = .99*texture(iChannel0, I/iResolution.xy);\n    int seed = 100*2000*2000*iFrame + 100*2000*int(I.x) + 100*int(I.y);\n    vec2 x = ((I+.3*randn(rand2(seed)))*2.-R.xy)/200.;\n    for(int k = 0; k < 10; k++){\n        seed++;\n    \tO.x += specEst(x,seed*5,14.);\n    \tO.y += specEst(x,seed*7,29.);\n    \tO.z += specEst(x,seed*9,60.);\n    \tO.w += 1.;\n    }\n    if(texelFetch(iChannel1, ivec2(82,1),0).x>.5){O*=0.;}\n}","name":"Buffer D","description":"","type":"buffer"}]}