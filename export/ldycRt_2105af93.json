{"ver":"0.1","info":{"id":"ldycRt","date":"1523148151","viewed":365,"name":"triangle kaleidoscope","username":"epicycle","description":"Equilateral triangle reflected everywhere, rotating texture source","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["triangle","kaleidoscope"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nmat2 rot(float r) {\n    return mat2(cos(r), sin(r), -sin(r), cos(r));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scale = 1.0 / 3.0; // triangle length\n                             // as fraction of viewport height\n    \n    //scale = 1.0 / (10.0 + 3.0 * sin(iTime / 5.0));\n    \n    float tHeight = scale * sqrt(3.0) / 2.0;\n    float tCenterToBase = scale * 0.5 * tan(PI / 6.0);\n    float tRadius = tHeight - tCenterToBase;\n    \n    // Aspect-normalized pixel coordinates (from 0 to 1 for y axis)\n    vec2 R = iResolution.xy,\n        uv = fragCoord / R.y;\n\n    // Repeat triangles\n    vec2 Repeat = vec2(tHeight, scale),\n        Index = uv / Repeat;\n    uv = mod(uv, Repeat);\n    \n    // Flip every column\n    uv.x = mod(Index.x, 2.0) > 1.0 ? uv.x : tHeight - uv.x;\n    \n    // normalize texture coordinates\n   \tuv /= scale;\n    \n    // reflect\n    float tAngle = radians(60.0);\n    vec2 angleVec = vec2(cos(-tAngle), sin(-tAngle));\n    float dAngleBottom = dot(uv, angleVec);\n    vec2 bottomReflect = uv - dAngleBottom * 2.0 * angleVec;\n    uv = dAngleBottom > 0. ? bottomReflect : uv;\n    \n    vec2 angleVecReflected = vec2(angleVec.x, -angleVec.y);\n    float dAngleTop = dot(uv - vec2(0.0, 1.0), angleVecReflected);\n    vec2 topReflect = uv - dAngleTop * 2.0 *  angleVecReflected;\n    uv = dAngleTop > 0.0 ? topReflect : uv;\n    \n    // adjust texture\n    float theta = floor(Index.y) * 2.0 * PI / 3.0 + iTime / 2.0;\n    uv -= vec2(tCenterToBase / scale, 0.5);\n    uv *= rot(theta);\n    uv /= (2.0 * tRadius) / scale;\n    uv += 0.5;\n    \n    vec4 tColor = texture(iChannel0, uv);\n    vec2 cuv = fragCoord/R;\n    tColor = vec4(cuv.x, 0.35 + 0.25 * sin(iTime + cuv.y), 1.0 - cuv.x, 1.0) - tColor.r;\n    fragColor = tColor;\n}","name":"Image","description":"","type":"image"}]}