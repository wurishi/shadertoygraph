{"ver":"0.1","info":{"id":"7ssGWl","date":"1616762394","viewed":110,"name":"Multicolor interference pattern","username":"HetSmiecht","description":"This shader simulates the interference pattern of a diffraction grating, but performed on all three colour channels: red (650 nm), green (550 nm) and blue (450 nm). Inspired by: http://physics.bu.edu/~duffy/HTML5/diffraction_grating.html","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["interference","doubleslit","interferencepattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// inspired by:  http://physics.bu.edu/~duffy/HTML5/diffraction_grating.html\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Y coordinates normalized between 0 and 1, but kept the aspect ratio\n    vec2 uvy = fragCoord/iResolution.y;\n    \n    float width = iResolution.x / iResolution.y;\n    \n    float pi2 = 2.0 * 3.14159265358979323846264338327950288;\n    \n    // the distance between the bottom and top slit\n    // use this value to zoom in or out\n    float gratingSizeScreen = 0.05;\n    \n    // the distance between the slits in nanometers\n    float slitDistanceSimulation = 1300.0;\n    \n    // total number of slits\n    int total = 50;\n    \n    // the distance between two slits in screen space\n    float slitDistanceScreen = gratingSizeScreen / float(total-1);\n    \n    // the wavelength of the red, green and blue colour channel, in nanometers\n    vec3 waveLengthSimulation = vec3(650.0, 550.0, 450.0);\n    \n    // the waveLength of the light in screen space\n    vec3 waveLengthScreen = waveLengthSimulation / slitDistanceSimulation * slitDistanceScreen;\n    \n    // the thing which actually counts the interference\n    vec3 interferenceX;\n    vec3 interferenceY;\n    \n    for (int i = 0; i < total; i++)\n    {\n        // the coordinates are shifted to be around 0.0 instead of around 0.5,\n        // so the distance is calculated more accurately (hopefully)\n        float dist = distance(\n            uvy-vec2(width*0.5, 0.5),\n            vec2(0.0, gratingSizeScreen*(float(i)/float(total-1)-0.5))\n          );\n        // all three colour channels are calculated at once\n        vec3 phase = dist / waveLengthScreen;\n        // take the remainder of one because of slight errors when inputting large numbers into sin and cos\n        phase = mod(phase, 1.0);\n        \n        interferenceX += sin(phase * pi2);\n        interferenceY += cos(phase * pi2);\n    }\n    // set the brightness of each colour channel equal to the length of the\n    // thing which counts the interference (scaled by some constant)\n    vec3 col = 3.0/float(total)*sqrt(interferenceX * interferenceX + interferenceY * interferenceY);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}