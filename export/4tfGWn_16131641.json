{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"#define Iterations 256\n#define Speed 10.0\n#define FPS 60.0\n#define Planets 6\n//#define StarMovement\n\nstruct Particle {\n\tvec2  pos;\n    vec2  vel;\n    float mass;\n};\n\nconst float delta = 1.0/(FPS/Speed);\n\nParticle particles[Planets];\n    \nfloat grav(Particle p1, Particle p2){\n\tvec2 d = p1.pos-p2.pos;\n    return p1.mass * p2.mass / (d.x*d.x+d.y*d.y);\n}\n\nParticle updateParticle(Particle p){\n    vec2 acc = vec2(0.);\n    for(int i = 0; i < Planets; i++){\n    \tParticle po = particles[i];\n    \tacc += (po.pos - p.pos) * grav(p,po);\n    }\n    p.vel += acc / p.mass * delta;\n    p.pos += p.vel * delta;\n    return p;\n}\n\nvec3 hash3(const float n) {\n\treturn fract(sin(n)*vec3(36.5453123,43.1459123,11234.3490423));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //TODO: change uvs\n    vec2 uv = (2.0*fragCoord.xy-iResolution.xy) / iResolution.x;\n    uv *= 150.0;\n    vec2 muv = (2.0*iMouse.xy-iResolution.xy) / iResolution.x;\n    muv *= 150.0;\n    \n    vec2 muv2 = (2.0*abs(iMouse.zw)-iResolution.xy) / iResolution.x;\n    muv2 *= 150.0;\n    \n\n    if(dot(iMouse.xy,iMouse.xy) < 10.){\n        muv2 = vec2(20.0,20.0);\n        muv = muv2 + vec2(0.0,30.0);\n    }\n    \n    \n    float time = mod(iTime*Speed,delta*float(Iterations));\n    float timen    = floor((iTime*Speed)/(delta*float(Iterations)));\n\n    //maybe not\n    for(int i = 0; i < Planets; i++){\n        particles[i] = Particle(vec2(float(i*150/Planets),0.) , vec2(0.,10.*sin(hash3(timen+float(i))*6.28)), 1. + 100./exp(float(i+1)));\n    }\n    particles[1].pos = muv2;\n    particles[1].vel = (muv-muv2)/4.;\n    \n    vec3  color = vec3(0.);\n    float n     = 0.0;\n    for(int i = 0; i < Iterations; i++){\n    \tfor(int i = 0; i < Planets; i++){\n            #ifndef StarMovement\n            \tif(i != 0)\n            #endif\n            particles[i] = updateParticle(particles[i]);\n            \n            vec2 toUV = particles[i].pos - uv;\n            if(dot(toUV,toUV) < particles[i].mass*(0.1+pow(n/time,n))) {\n                color = (hash3(float(i+15124)));\n            }\n    \t}\n        \n        n += delta;\n        if(n > time) break;\n    }\n    fragColor = vec4(color,1.0);\n}\n\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4tfGWn","date":"1420470338","viewed":321,"name":"Planet Orbits 2","username":"TheJimJames40","description":"A simulation of planet orbits.\nclick and drag to change the orbits.\nit is even slower than the first one (https://www.shadertoy.com/view/lllGR7).","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["simulation","planet","orbit"],"hasliked":0,"parentid":"","parentname":""}}