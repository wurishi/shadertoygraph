{"ver":"0.1","info":{"id":"4XBXRR","date":"1710261625","viewed":113,"name":"Boids Simulation 3D","username":"rclovis","description":"Simple 3D boids algorism","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["simulation","birds","boids"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define nbrBoids 80\nconst float pi = 3.14159;\n\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec3 floatToColor(float value) {\n    // Map the float value to the hue range [0.0, 1.0]\n    float hue = value;\n\n    // Convert HSV to RGB\n    vec3 rgbColor = hsv2rgb(vec3(hue, 1.0, 1.0));\n\n    return rgbColor;\n}\n\nfloat disk (vec2 uv, float pre, float strokeWidth, float radius)\n{\n    return 1.0 - smoothstep(strokeWidth, strokeWidth + pre, length(uv) - radius);\n}\n\nvec3 drawBoids (vec2 uv)\n{\n    vec3 col = vec3(0., 0., 0.25);\n    for (int i = 0;i < nbrBoids;i++) {\n        vec4 info1 = texture(iChannel0, vec2(float(i) * 2. + .5f, .5f)/iResolution.xy);\n        vec4 info2 = texture(iChannel0, vec2(float(i) * 2. + 1.5f, .5f)/iResolution.xy);\n        col += disk(uv + info1.xy, 0.005, 0.01, 0.01 + (info1.z + 1.) / 100.) * (floatToColor(1.-info1.w / float(nbrBoids) - 0.1)) * ((info1.z + 1.) / 2.);\n        //col += disk(uv + info2.xy, 0.005, 0.01, 0.01) * floatToColor(1.5);\n\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec3 col = drawBoids(uv);\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define nbrBoids 80\n#define localGroup 0.5\n#define speed 0.01\n\nconst float pi = 3.14159;\n\nvec3 hash(float n)\n{\n    return fract(sin(vec3(n, n*5., n*4.))*40.f);\n}\n\nvoid init(out vec4 fragColor, in vec2 fragCoord )\n{\n    float id = fragCoord.x;\n    if (mod(floor(fragCoord.x), 2.) == 0.) {\n        vec3 pos = (hash(id) * iResolution.xyy * 2.0 - iResolution.xyy) / iResolution.y;\n        fragColor = vec4(pos, 0.);\n    } else {\n        vec3 angle = normalize(hash(id));\n        fragColor = vec4(angle, 0.);\n    }\n}\n\n\nvec4 getBoidsPos(int id)\n{\n    return texture(iChannel0, vec2(float(id) * 2. + .5f, .5f)/iResolution.xy);\n}\n\nvec4 getBoidsAngle(int id)\n{\n    return texture(iChannel0, vec2(float(id) * 2. + 1.5f, .5f)/iResolution.xy);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (fragCoord.y > 0.5 || fragCoord.x > float(nbrBoids) * 2. )\n        discard;\n    if (iFrame < 2)\n        init(fragColor, fragCoord);\n    else {\n        \n        \n        \n        int id = int(floor(fragCoord.x / 2.));\n\n\n        vec4 boidInfo1 = getBoidsPos(id);\n        vec4 boidInfo2 = getBoidsAngle(id);\n\n        vec3 separation = vec3(0.);\n        vec3 alignment = vec3(0.);\n        vec3 cohesion = vec3(0.);\n        float nbrNeighbor = 0.;\n        \n        for (int i = 0;i < nbrBoids;i++) {\n            vec4 info1 = getBoidsPos(i);\n            vec4 info2 = getBoidsAngle(i);\n\n            if (length(info1.xyz - boidInfo1.xyz) > localGroup ||\n                floor(fragCoord.x / 2.) == float(i))\n                continue;\n            nbrNeighbor += 1.;\n            //separation\n            separation += normalize(info1.xyz - boidInfo1.xyz);\n            //\n            \n            //alignment\n            alignment += info2.xyz;\n            //\n            \n            //cohesion\n            cohesion += info1.xyz;\n            //\n        }\n        vec3 newPos = boidInfo1.xyz;\n        vec3 newAngle = boidInfo2.xyz;\n\n        if (nbrNeighbor != 0.) {\n            separation = -normalize(separation / nbrNeighbor);\n            alignment = normalize(alignment / nbrNeighbor);\n            cohesion = normalize(cohesion / nbrNeighbor - boidInfo1.xyz);\n            newAngle = normalize((cohesion + separation + alignment) / 3.); \n        }\n\n        newPos += newAngle * speed;\n        vec3 ratio = iResolution.xyy / iResolution.y;\n        newPos = mod(newPos + ratio, ratio * 2.0) - ratio;\n        if (mod(floor(fragCoord.x), 2.) != 0.) {\n            fragColor = vec4(newAngle, nbrNeighbor);\n        } else {\n            fragColor = vec4(newPos, nbrNeighbor);\n        }\n        \n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}