{"ver":"0.1","info":{"id":"ddSfWh","date":"1689642877","viewed":98,"name":"Kuwahara Filter (simple w/ coms)","username":"Rugged","description":"Just a basic Kuwahara filter but with comments for other people to understand that are trying to learn this.\n\nLearned from this YouTube video:\n    https://youtu.be/Pe3Yt3DUp04\n\nWiki on Kuwahara Filters:\n    https://en.wikipedia.org/wiki/Kuwahara_filter","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["blur","filter","kuwahara","paint","denoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    Learned from this YouTube video:\n    https://youtu.be/Pe3Yt3DUp04\n    \n    This code is identical to what they produce in the video.\n    \n    \n\n    Wiki on Kuwahara Filters:\n    https://en.wikipedia.org/wiki/Kuwahara_filter\n    \n    \n*/\n\n\n\nvec3 Kuwahara(vec2 uv, int radius){\n    \n    //float version of the radius\n    float r = float(radius);\n    \n    //array of the averages for each pixel region\n    vec3 avg[4];\n    avg[0] = vec3(0.);\n    avg[1] = vec3(0.);\n    avg[2] = vec3(0.);\n    avg[3] = vec3(0.);\n    \n    \n    \n    \n    //array of the standard deviaitons for each pixel region\n    vec3 std[4];\n    std[0] = vec3(0.);\n    std[1] = vec3(0.);\n    std[2] = vec3(0.);\n    std[3] = vec3(0.);\n    \n    \n    //the offsets for each reigon to sample over\n    vec2 offs[4];\n    offs[0] = vec2(-r);\n    offs[1] = vec2(-r, 0.);\n    offs[2] = vec2(0, -r);\n    offs[3] = vec2(0.);\n    \n    \n    //position and color holders\n    vec2 p;\n    vec3 col;\n    \n    //loop through each region\n    for(int i = 0; i < 4; i++){\n    \n        //for each x\n        for(int x = 0; x <= radius; x++){\n            \n            //for each y\n            for(int y = 0; y <=radius; y++){\n                \n                //the positon is each pixel within each region i\n                p = vec2(float(x), float(y)) + offs[i];\n                \n                //the uv position of the pixel to sample is the base uv plus the pixel offset\n                vec2 uvp = uv + (p / iResolution.xy);\n                \n                \n                //sample the texture at that position\n                col = texture(iChannel0, uvp).rgb;\n                \n                \n                //add in the color to the average color of the region\n                avg[i] += col;\n                \n                //add the standard deviation of this color from the region color\n                std[i] += col * col;\n                \n            }\n        }\n        \n    }\n    \n    \n    \n    //the total number of pixels that were sampled\n    float n = pow(r + 1., 2.);\n    \n    \n    \n    //holder for the lowest value\n    float minV = 1.;\n    \n    //holder for the standard deviation of the corresponding lowest value\n    float stdf;\n    \n    for(int i = 0; i < 4; i++){\n        \n        //make the average colors actually averaged (the are simply sums right now)\n        avg[i] /= n;\n        \n        //calculate standard deviation according to standard deviation formula\n        std[i] = abs((std[i] / n) - (avg[i] * avg[i]));\n        \n        //sum the standard deviation of each rgb value for this region\n        stdf = std[i].r + std[i].g + std[i].b;\n        \n        //if this region's standard deviation is the lowest then use it\n        if(stdf < minV){\n            \n            //record this standard deviation\n            minV = stdf;\n            \n            //select the value with the lowest standard deviation\n            col = avg[i];\n        }\n        \n    }\n    \n    \n    \n    return col;\n    \n}\n\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord/iResolution.xy;\n\n    \n    vec3 col = Kuwahara(uv, 4);\n\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}