{"ver":"0.1","info":{"id":"4lcXD4","date":"1479662332","viewed":259,"name":"NotAKnot0","username":"balkhan","description":"Just fooling around with the DE for knots found by Knightly and DarkBeam on fractal forums : \nhttp://www.fractalforums.com/new-theories-and-research/not-fractal-but-funny-trefoil-knot-routine/45/\nI found some nice torus shapes on the way","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","torus","de"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define\tI_MAX\t100\n#define\tE\t\t0.0000001\n#define PI\t\t3.14\n// change this from 0 to 2\n#define\tMOBIUS\t0\n// change this from 0 to 4\n#define\tSHAPE\t0\n// abs(POWER) > 1.0 and an integer\n#define POWER\t9.0\n\nmat4\tlookat(vec3 e, vec3 ta, vec3 up);\nvoid\trotate(inout vec2 v, float angle);\nfloat\tDE(vec3 p);\nvec4\tmarch(vec3 pos, vec3 dir);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2\tuv = fragCoord.xy / iResolution.xy;\n    vec3\tcol = vec3(0.0);\n\n    vec3\tdir = (vec3(fragCoord.xy - iResolution.xy/2.0, -iResolution.y));\n    vec3\tpos = vec3(2.0*cos(2.0+iTime), -3.0, 3.0);\n    mat4\tlook = lookat(pos, vec3(cos(2.0+iTime), 0.0, 0.0), vec3(0.0, 1.0, 0.0));\n    \n    dir = vec3(dot(dir, look[0].xyz), dot(dir, look[1].xyz), dot(dir, look[2].xyz));\n    dir = normalize(dir);\n   \tvec4 inter = (march(pos, dir));\n    col.xyz = inter.xyz;\n\tfragColor = vec4(col, 1.0);\n}\n\n/*\n* branching ahead, prefered this than defines ... different combinations give different results\n*/\n\nfloat DE(vec3 p)\n{\n    p.yz *= mat2(cos(iTime),sin(iTime),-sin(iTime),cos(iTime));\n\tfloat mobius;\n    if (0 == MOBIUS || 2 < MOBIUS)\n    \tmobius = (1.0-1.0/(POWER)) * atan(PI*(p.y*p.x)*sin(iTime), PI*(-p.y*p.x)*cos(iTime));\n    else if (1 == MOBIUS)\n    \tmobius = (1.0-1.0/(POWER)) * atan(PI*(p.z*p.x)*sin(iTime)- PI*(p.z/p.x)*cos(iTime));\n    else if (2 == MOBIUS)\n\t\tmobius = (1.0-1.0/(POWER)) * atan(PI*(p.y*p.x)*sin(iTime)* PI*(p.y*p.x)*cos(iTime));\n\tp.x = length(p.xy) - 1.2;\n\trotate(p.xz, mobius);\n\tfloat m = (1.0 - ((1.0+POWER)))/(1.0*PI);\n\tfloat angle = floor(0.5 + m * (PI/2.0-atan(p.x,p.z)))/m;\n\trotate(p.xz, angle);\n\tp.x -= 0.8+abs(cos(iTime)/2.4);\n    if (0 == SHAPE || 4 < SHAPE)\n\t\treturn length(p.xz)-0.2+abs(sin(iTime*2.0))*0.1;\n    else if (1 == SHAPE)\n\t\treturn length(p.xy)-0.4-abs(sin(iTime*3.0))*0.2; // 2-torus\n    else if (2 == SHAPE)\n\t\treturn length(p.yx)-length(p.xz)-0.72+abs(sin(iTime*3.0))*0.4; // surface\n    else if (3 == SHAPE)\n\t\treturn length(p.yx)-length(p.yz)+0.2-abs(sin(iTime*2.0))*0.2; // torus construction\n    else if (4 == SHAPE)\n\t\treturn length(p.x+p.y/2.0)-0.2+abs(sin(iTime*2.0))*0.1; // torus interior from exterior\n}\n\nvec4\tmarch(vec3 pos, vec3 dir)\n{\n    vec2\tdist = vec2(0.0);\n    vec3\tp = vec3(0.0);\n    vec4\ts = vec4(0.0);\n\n    for (int i = -1; i < I_MAX; ++i)\n    {\n    \tp = pos + dir * dist.y;\n        dist.x = DE(p);\n        dist.y += dist.x;\n        if (dist.y < E)\n           break;\n        s.w++;\n    }\n    // cheap colors\n    s.x = ((abs(sin(iTime)*10.0)+10.0)/dist.y)/10.0;\n    s.y = ((abs(sin(6.0/PI+iTime)*10.0)+10.0)/dist.y)/10.0;\n    s.z = ((abs(sin(12.0/PI+iTime)*10.0)+10.0)/dist.y)/10.0;\n    return (s);\n}\n\nmat4\tlookat(vec3 e, vec3 ta, vec3 up)\n{\n    vec3 z = normalize(e - ta);    \n    vec3 x = normalize(cross(up, z));\n    vec3 y = cross(z, x);     \n\n    mat4 orientation = mat4(\n       \t\t\t\t\t\tx.x, y.x, z.x, 0.0,\n       \t\t\t\t\t\tx.y, y.y, z.y, 0.0,\n       \t\t\t\t\t\tx.z, y.z, z.z, 0.0,\n       \t\t\t\t\t\t0.0, 0.0, 0.0, 1.0);\n\n    mat4 translation = mat4(\n         \t\t\t\t\t1.0, 0.0, 0.0, 0.0,\n         \t\t\t\t\t0.0, 1.0, 0.0, 0.0, \n         \t\t\t\t\t0.0, 0.0, 1.0, 0.0,\n\t\t\t\t\t\t\t-e.x,-e.y,-e.z, 1.0);\n\n    return (orientation * translation);\n}\n\nvoid rotate(inout vec2 v, float angle)\n{\n\tv = vec2(cos(angle)*v.x+sin(angle)*v.y,-sin(angle)*v.x+cos(angle)*v.y);\n}","name":"Image","description":"","type":"image"}]}