{"ver":"0.1","info":{"id":"ltdczH","date":"1531641481","viewed":1033,"name":"Blur with 2D Kernel","username":"jdbener","description":"A single pass Gaussian blur shader with a dynamic, axis independent, 2D kernel. This was mostly just for practice and learning how to design kernels. ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["blur","gaussian","singlepass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    if(uv.x > iMouse.x/iResolution.x){\n        fragColor = vec4(texture( iChannel0, uv).xyz, 1.0);\n        return;\n    }\n\n    // Define the bluring radius/strength (direction independant)\n    vec2 radius = vec2(20.0);\n    // Calculate the value at the corners so that the matrix can be easily inverted\n    float max = sqrt(radius.x * radius.x + radius.y * radius.y);\n    // Define the variable which will hold the blured values\n    vec3 blur = vec3(0.0);\n\n    // Define the variable which will be used to normalize the image\n    float sum = 0.0;\n    // The kernel is dynamically created based on the bluring radius\n    for(float u = -radius.x; u<=radius.x; u++){\n        for(float v = -radius.y; v<=radius.y; v++){\n            // The pixel weight used by the kernel is defined as: the distance from the kernel origin (0,0)\n            // to the current kernel position, subtracted from the maximum possible distance. This leads\n            // to a gradient from 0% relative weight on the edges to 100% relative weight at the origin of the kernel\n            float weight = max - sqrt(u * u + v * v);\n            // The weight is then exponentialized which seams to sleightly maintain more of the origianl detail\n            //weight = pow(weight, 2.0);\n            // The weight is then multiplied by the texture being sampled and added to the overall blurred values\n            blur += weight * texture( iChannel0, uv + (vec2(u, v)/iResolution.xy)).xyz;\n            // The weight is then added for normalizing purposes\n            sum += weight;\n        }\n    }\n    // Finally the blurred image is normalized\n    blur /= sum;\n\n    // Output to screen\n    fragColor = vec4(blur , 1.0);\n}","name":"Image","description":"","type":"image"}]}