{"ver":"0.1","info":{"id":"dtV3zh","date":"1683581344","viewed":45,"name":"projeto_21_MatheusFreitas","username":"matheusfs2","description":"Red star does circular non uniform spin on a yellow circle ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["circularmotion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define N 5\n#define D 2\n\nconst float PI = 3.14159265359;\nconst float PI_2 = 2.0 * PI;\nconst float DEGREES_TO_RADIANS = PI / 180.0;\nconst float EXTERNAL_ANGLE_N_3 = 150.0 * DEGREES_TO_RADIANS;\nconst float EXTERNAL_ANGLE_N_4 = 135.0 * DEGREES_TO_RADIANS;\n\n// https://en.wikipedia.org/wiki/Star_polygon#Simple_isotoxal_star_polygons\nfloat externalAngle(in int n, in int d) {\n    float internalAngle = PI * float(n - 2 * d) / float(n);  // the angle-radians of the \"convex tip\"\n\n    // The sum of all angles in a convex polygon with 2*n vertices is (2*n-2)*180deg\n    // Since n angles in the star polygon are convex and n angles are concave, we have\n    // n*internalAngle + n*complementAngle = (2*n-2)*180deg\n    // where complementAngle is the complement of the externalAngle we will use to find the \"intersection radius\"\n    // see https://qr.ae/TWhyAC\n    float complementAngle = PI_2 * float(n - 1) / float(n) - internalAngle;  // simplified\n    float externalAngle = PI_2 - complementAngle;\n    return\n        d == 2 && n == 3 ? EXTERNAL_ANGLE_N_3 :  // special cases for polygons with 3 and 4 vertices that make sense\n        d == 2 && n == 4 ? EXTERNAL_ANGLE_N_4 :  // but are not valid (n,d) star polygons\n        externalAngle;\n}\n\n// signed distance to a star polygon with n convex vertices and external angle (i.e. the \"concave\" angle between \"convex tips\")\nfloat sdStar(in vec2 p, in float r, in int n, in float externalAngle) {\n    // these 2 lines can be precomputed\n    float an = 6.2831853 / float(n);\n    float he = r * tan(0.5 * an);  // half-edge\n\n    // rotate to first sector\n    p = -p.yx;  // if you want the corner to be up\n    float bn = an * floor((atan(p.y, p.x) + 0.5 * an) / an);\n    vec2 cs = vec2(cos(bn), sin(bn));\n    p = mat2(cs.x, -cs.y, cs.y, cs.x) * p;\n\n    // flip symmetrically about the x-axis\n    p.y = abs(p.y);\n\n    // create a line SDF from the right-hand \"convex tip\" to the \"concave vertex\" on the x-axis\n    float complementRadius = he / tan(0.5 * externalAngle);\n    float ir = r - complementRadius;  // first, we need to know where the inner \"intersection radius\" is on the x-axis\n    vec2 a = vec2(r, he);\n    vec2 b = vec2(ir, 0.0);\n    vec2 pa = p - a;\n    vec2 ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    vec2 line = pa - ba * h;\n\n    // use the cross product to project the point onto the line, determining the inside from the outside\n    float s = sign(ba.x * pa.y - ba.y * pa.x);\n    return length(line) * s;\n}\n\n// signed distance to a regular star polygon with n convex vertices and d density (i.e. number of convex vertices to skip when connecting)\nfloat sdRegularStar(in vec2 p, in float r, in int n, in int d, in vec2 offset) {\n    p -= offset;\n    return sdStar(p, r, n, externalAngle(n, d));\n}\n\n\nfloat sdfCircle(vec2 uv, float r, vec2 c) {\n    return length(uv - c) - r;\n}\n\nvec3 drawScene(vec2 uv) {\n    float r = .35;\n    \n    // circle\n    float circle = sdfCircle(uv, r, vec2(0.0, 0.0));\n    \n    // star \n    float velocity = smoothstep( 0.0, 2.*PI, iTime*1.25 );\n    vec2 offset = vec2(sin(velocity*6.275)*r, cos(velocity*6.275)*r);\n    float star = sdRegularStar(uv, .06, N, D, offset);\n    \n    vec3 col = vec3(1.);\n    col = mix(vec3(1., 1., 0.), col, step(.12, abs(circle))); // yellow circle\n    col = mix(vec3(1., 0., 0.), col, step(0.,  star));        // red 5 star\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 col = drawScene(uv);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}