{"ver":"0.1","info":{"id":"slKyDK","date":"1662272800","viewed":69,"name":"Hello Worlds","username":"YoYooYY","description":"Just trying things out","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["experimentation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rotate(vec2 uv, float a) {\n    return mat2(cos(a), sin(a), -sin(a), cos(a)) * uv;\n}\n\n\nfloat circle(vec2 uv, float r, vec2 offset) {\n    offset += 0.1* vec2(sin(iTime), cos(iTime));\n    vec2 dist_sqr = (uv - offset)*(uv - offset);\n    return dist_sqr.x + dist_sqr.y - r*r;\n}\n\n\nfloat square(vec2 uv, float s, vec2 offset) {\n    uv = rotate(uv, iTime);\n    return max(abs(uv.x - offset.x), abs(uv.y - offset.y)) - s;\n}\n\n\nvec3 renderShapes(vec2 uv) {\n    // Background color\n    vec3 col = vec3(0.9);\n    \n    // Determine circle and square\n    float circle = circle(uv, 0.15, vec2(-0.3, 0.2));\n    float square = square(uv, 0.1, vec2(0.3, -0.2));\n    \n    // Combine mask\n    col = mix(vec3(0, 0, 1) - 0.5 * sin(iTime), col, step(0., circle));\n    col = mix(vec3(1, 0, 0) - 0.5 * sin(iTime), col, step(0., square));\n    \n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1 and center at (0,0) )\n    vec2 uv = ( fragCoord - .5* iResolution.xy ) / iResolution.y;\n    \n    // Draw shapes\n    vec3 col = renderShapes(uv);\n\n    // Output to screen\n    fragColor = vec4(col,1);\n}","name":"Image","description":"","type":"image"}]}