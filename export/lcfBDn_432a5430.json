{"ver":"0.1","info":{"id":"lcfBDn","date":"1725398254","viewed":54,"name":"Crystals in the ground","username":"Pelegefen","description":"\"Crystals\" lit by some point lights made using Voronoi with a blend between Manhattan end Euclidean distances.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["procedural","voronoi","pointlight","normals","ground","crystal","gems"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define POLISH 0.5\n#define NUM_LIGHTS 4\n#define PERCENT_OF_CRYSTALS 0.11\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy ) / iResolution.y;\n    vec2 ouv = uv;\n    vec3 n;\n    uv += vec2(0,iTime * .1);\n    vec3 vor = blendedVoronoi(vec3(uv * 1.2, iTime * .0025), 5., n, POLISH);\n\n    vec3 n1;\n    vec3 vor1 = blendedVoronoi(vec3(uv, iTime * .01 + 15.), 5., n1,vor.z);\n    \n    float valueChange = length(fwidth(uv)) * 0.6;\n    float smoothness = .02;\n    float outline = 1. - smoothstep(\n    valueChange + smoothness,\n    valueChange - smoothness,\n    vor.z);\n   \n    vec3 crystal = vor.z + hash13(vor.y);\n    vec3 n2 = normalize(n - n1 * .25);\n   \n\n    vec3 totalLight = vec3(0.0);\n    vec3 lightGround = vec3(0.0);\n\n    for(int i = 0; i < NUM_LIGHTS; i++) {\n        float angle = (iTime * .3 + float(i)) * 3.14159 / float(NUM_LIGHTS);\n        \n        vec3 lightPos = vec3(\n        sin(angle * 1.5) -.25,\n        cos(angle) -.25,\n        .5) - .5;\n\n        vec3 lightCol = vec3(\n            sin(iTime + float(i) * 0.3) * 0.5 + 0.5,\n            sin(iTime * 0.5 + float(i) * 0.5) * 0.5 + 0.5,\n            sin(iTime * 0.2 + float(i) * 0.7) * 0.5 + 0.5\n        );\n\n        vec3 lightDir = normalize(lightPos - vec3(ouv, 0.0));\n        float dist = length(lightPos - vec3(ouv, 0.0));\n        float attenuation = 1.0 / (dist * dist);\n        \n        float light = (dot(n2, lightDir) * 0.5 + 0.5) * 5.0 * attenuation;\n        totalLight += (light * lightCol)/ float(NUM_LIGHTS * NUM_LIGHTS) ;\n        \n        lightGround += \n        clamp(\n        1. - length((ouv) - lightPos.xy) * lightCol,\n        vec3(0),\n        vec3(1))\n        * attenuation  / float(NUM_LIGHTS * NUM_LIGHTS) * lightCol * .1  ;\n    }\n    \n    vec3 col = (totalLight);\n    col = (crystal * col * outline);\n    \n    vec3 grassCol = vec3(0.03, 0.04, 0.01);\n    vec3 groundCol = vec3(0.1, 0.05, 0.05); \n   \n    float tex = texture(iChannel0, uv).x;\n    float blend = (1.0 - vor.x) * vor1.z + tex ;\n    \n    groundCol = max(groundCol,totalLight * .1);\n    vec3 ground = mix(grassCol, groundCol, blend);\n       \n    float gemAmountMask = step(vor.y, 1.0 - PERCENT_OF_CRYSTALS);\n    \n    ground += lightGround;\n\n    col = mix(col, ground, gemAmountMask);\n\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define HASHSCALE3 vec3(.1031, .1030, .0973)\n#define hash3d(p) fract(sin( (p) * mat3( 127.1,311.7,74.7 , 269.5,183.3,246.1 , 113.5,271.9,124.6) ) *43758.5453123)\n\nmat2 rotate2d(float angle){\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c,-s,s,c);\n}\n\nfloat hash21(vec2 p){\n\treturn fract(sin(dot(p, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nuvec3 murmurHash13(uint src) {\n    const uint M = 0x5bd1e995u;\n    uvec3 h = uvec3(1190494759u, 2147483647u, 3559788179u);\n    src *= M; src ^= src>>24u; src *= M;\n    h *= M; h ^= src;\n    h ^= h>>13u; h *= M; h ^= h>>15u;\n    return h;\n}\n\nvec3 hash13(float src) {\n    uvec3 h = murmurHash13(floatBitsToUint(src));\n    return uintBitsToFloat(h & 0x007fffffu | 0x3f800000u) - 1.0;\n}\n\nuint murmurHash13(uvec3 src) {\n    const uint M = 0x5bd1e995u;\n    uint h = 1190494759u;\n    src *= M; src ^= src>>24u; src *= M;\n    h *= M; h ^= src.x; h *= M; h ^= src.y; h *= M; h ^= src.z;\n    h ^= h>>13u; h *= M; h ^= h>>15u;\n    return h;\n}\n\nfloat hash31(vec3 src) {\n    uint h = murmurHash13(floatBitsToUint(src));\n    return uintBitsToFloat(h & 0x007fffffu | 0x3f800000u) - 1.0;\n}\n\nvec2 hash2d(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec3 blendedVoronoi(vec3 p, float scale, out vec3 normal, float blendFactor)\n{\n    p *= scale;\n    vec3 baseCell = floor(p);\n    vec3 closestCell;\n    vec3 toClosestCell;\n\n    float minDistToCell = 1000.;\n    for(int x=-1; x<=1; x++){\n        for(int y=-1; y<=1; y++){\n            for(int z=-1; z<=1; z++){\n                vec3 cell = baseCell + vec3(x, y, z);\n                vec3 cellPosition = cell + hash3d(cell);\n                vec3 toCell = cellPosition - p;\n\n                float manhattanDist = abs(toCell.x) + abs(toCell.y) + abs(toCell.z);\n                float euclideanDist = length(toCell);\n\n                float blendedDist = mix(manhattanDist, euclideanDist, blendFactor);\n\n                if(blendedDist < minDistToCell)\n                {\n                    minDistToCell = blendedDist;\n                    closestCell = cell;\n                    toClosestCell = toCell;\n                }\n            }\n        }\n    }\n\n    normal = vec3(0.0); \n\n    float minDistToEdge = 10.;\n    for(int x=-1; x<=1; x++){\n        for(int y=-1; y<=1; y++){\n            for(int z=-1; z<=1; z++){\n                vec3 cell = baseCell + vec3(x, y, z);\n                vec3 cellPosition = cell + hash3d(cell);\n                vec3 toCell = cellPosition - p;\n\n                vec3 diffToClosestCell = abs(closestCell - cell);\n                bool isClosestCell = diffToClosestCell.x + diffToClosestCell.y + diffToClosestCell.z < 0.1;\n                if(!isClosestCell){\n                    vec3 edgeDirection = normalize(toCell - toClosestCell);\n\n                    float manhattanEdgeDist = abs(toClosestCell.x + toCell.x) * 0.5 + abs(toClosestCell.y + toCell.y) * 0.5 + abs(toClosestCell.z + toCell.z) * 0.5;\n                    float euclideanEdgeDist = abs(dot((toClosestCell + toCell) * 0.5, edgeDirection));\n\n                    float blendedEdgeDist = mix(manhattanEdgeDist, euclideanEdgeDist, blendFactor);\n\n                    if(blendedEdgeDist < minDistToEdge){\n                        minDistToEdge = blendedEdgeDist;\n                        normal = edgeDirection; \n                    }\n                }\n            }\n        }\n    }\n\n    float random = hash31(closestCell);\n    return vec3(minDistToCell, random, minDistToEdge);\n}\n\n\nvec3 voronoiM(vec3 p, float scale, out vec3 normal)\n{\n    p *= scale;\n    vec3 baseCell = floor(p);\n    vec3 closestCell;\n    vec3 toClosestCell;\n\n    float minDistToCell = 1000.;\n    for(int x=-1; x<=1; x++){\n        for(int y=-1; y<=1; y++){\n            for(int z=-1; z<=1; z++){\n                vec3 cell = baseCell + vec3(x, y, z);\n                vec3 cellPosition = cell + hash3d(cell);\n                vec3 toCell = cellPosition - p;\n\n                float distToCell = abs(toCell.x) + abs(toCell.y) + abs(toCell.z);\n                if(distToCell < minDistToCell)\n                {\n                    minDistToCell = distToCell;\n                    closestCell = cell;\n                    toClosestCell = toCell;\n                }\n            }\n        }\n    }\n\n    normal = vec3(0.0);\n\n    float minDistToEdge = 10.;\n    for(int x=-1; x<=1; x++){\n        for(int y=-1; y<=1; y++){\n            for(int z=-1; z<=1; z++){\n                vec3 cell = baseCell + vec3(x, y, z);\n                vec3 cellPosition = cell + hash3d(cell);\n                vec3 toCell = cellPosition - p;\n\n                vec3 diffToClosestCell = abs(closestCell - cell);\n                bool isClosestCell = diffToClosestCell.x + diffToClosestCell.y + diffToClosestCell.z < 0.1;\n                if(!isClosestCell){\n                    vec3 edgeDirection = normalize(toCell - toClosestCell);\n                    \n                    // Manhattan distance for edge\n                    float edgeDistance = abs(toClosestCell.x + toCell.x) * 0.5 + abs(toClosestCell.y + toCell.y) * 0.5 + abs(toClosestCell.z + toCell.z) * 0.5;\n                    if(edgeDistance < minDistToEdge){\n                        minDistToEdge = edgeDistance;\n                        normal = edgeDirection;\n                    }\n                }\n            }\n        }\n    }\n\n    float random = hash31(closestCell);\n    return vec3(minDistToCell, random, minDistToEdge);\n}\n\n\n\nvec3 voronoi(vec3 p, float scale, out vec3 normal)\n{\n    p *= scale;\n    vec3 baseCell = floor(p);\n    vec3 closestCell;\n    vec3 toClosestCell;\n\n    float minDistToCell = 1000.;\n    for(int x=-1; x<=1; x++){\n        for(int y=-1; y<=1; y++){\n            for(int z=-1; z<=1; z++){\n                vec3 cell = baseCell + vec3(x, y, z);\n                vec3 cellPosition = cell + hash3d(cell);\n                vec3 toCell = cellPosition - p;\n\n                float distToCell = length(toCell);\n                if(distToCell < minDistToCell)\n                {\n                    minDistToCell = distToCell;\n                    closestCell = cell;\n                    toClosestCell = toCell;\n                }\n            }\n        }\n    }\n\n    normal = vec3(0.0); \n\n    float minDistToEdge = 10.;\n    for(int x=-1; x<=1; x++){\n        for(int y=-1; y<=1; y++){\n            for(int z=-1; z<=1; z++){\n                vec3 cell = baseCell + vec3(x, y, z);\n                vec3 cellPosition = cell + hash3d(cell);\n                vec3 toCell = cellPosition - p;\n\n                vec3 diffToClosestCell = abs(closestCell - cell);\n                bool isClosestCell = diffToClosestCell.x + diffToClosestCell.y + diffToClosestCell.z < 0.1;\n                if(!isClosestCell){\n                    vec3 edgeDirection = normalize(toCell - toClosestCell);\n                    float edgeDistance = dot((toClosestCell + toCell) * 0.5, edgeDirection);\n                    if(edgeDistance < minDistToEdge){\n                        minDistToEdge = edgeDistance;\n                        normal = edgeDirection; \n                    }\n                }\n            }\n        }\n    }\n\n    float random = hash31(closestCell);\n    return vec3(minDistToCell, random, minDistToEdge);\n}\n","name":"Common","description":"","type":"common"}]}