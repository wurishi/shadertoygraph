{"ver":"0.1","info":{"id":"WlcGWl","date":"1577863199","viewed":251,"name":"pixel art filter test","username":"Carandiru","description":"testing\nhttps://csantosbh.wordpress.com/2014/01/25/manual-texture-filtering-for-pixelated-games-in-webgl/\n\nand some effects stuff to combine with can be disabled\n","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["pixel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//testing out this:\n// https://csantosbh.wordpress.com/2014/01/25/manual-texture-filtering-for-pixelated-games-in-webgl/\n// contained in buffer C\n\n#define CYBER_PUNKIFY 1\n#define UV_SCALAR 1.0\n#define FILL 2.25 // lower for highlighting edges, higher for whole parts\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n// Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy * UV_SCALAR * (1.0f/(1.0f + pow(abs(INTERVAL), 3.0f)));\n\n#if CYBER_PUNKIFY\n    vec3 color = texture(iChannel2, (uv)).rgb;\n    float luminance = dot(color, LUMA);\n    color.rgb = mix(vec3(0), color, aaStep( SCANLINE_INTERLEAVE * 0.5f, mod(fragCoord.y, SCANLINE_INTERLEAVE - (1.0f/iResolution.y) * 0.5f) ) );color *= 0.5f;\n    \n    color += texture(iChannel0, (uv)).rgb;\n    \n    color.rgb = color.rgb * (1.0f - (luminance / dot(color, LUMA)));\n    \n    color += texture(iChannel1, (uv)).rgb;\n    color.rgb = color.rgb * (1.0f - (luminance / dot(color, LUMA)));\n    \n    float diff = abs(dot(color, LUMA) - luminance) * (1.0f + luminance * FILL);\n    \n    float highlight = aaStep(0.33f + luminance, diff);\n    \n    color.rgb = color.rgb * (1.0f - (luminance / dot(color, LUMA)));\n    color.r = highlight * highlight * 0.95f;\n    color.b += color.g * 0.25f;\n    \n    \n    color.g = color.b;\n    color.b = color.r;\n    color.r = color.g;\n\n    color.g = color.b * 0.5f;\n    \n   \tcolor.g *= (1.0f + luminance);\n    \n    color = smoothstep(0.25f, 1.0f, color);\n    \n    float dither = texture(iChannel3, uv).r * (17.0f/255.0f);\n    color = mix(color - dither, color + dither, luminance);\n#else\n    \n    vec3 sampleA = texture(iChannel0, uv).rgb;\n    vec3 sampleB = texture(iChannel1, uv).rgb;\n    \n    vec3 diff = abs(sampleA - sampleB);\n    //vec3 color = mix(sampleA, sampleB, aaStep( SCANLINE_INTERLEAVE * 0.5f, mod(fragCoord.y, SCANLINE_INTERLEAVE - (1.0f/iResolution.y) * 0.5f) ) );\n    \n    //vec3 color = (sampleA + sampleB) * 0.5f;\n    \n    vec3 color = texture(iChannel2, uv).rgb;// - (diff);\n#endif\n    \n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 color = texture(iChannel0, (vec2(fragCoord + vec2(-1,-1)) / iResolution.xy)).rgb;\n    //fragColor.rgb = mix(vec3(0), color, aaStep( SCANLINE_INTERLEAVE * 0.5f, mod(fragCoord.y * SCALE, SCANLINE_INTERLEAVE - (1.0f/iResolution.y) * 0.5f) ) );\n\tfragColor.rgb = color;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 color = texture(iChannel0, (vec2(fragCoord + vec2(1,1)) / iResolution.xy)).rgb;\n   // fragColor.rgb = mix(vec3(0), color, aaStep( SCANLINE_INTERLEAVE * 0.5f, mod(fragCoord.y * SCALE, SCANLINE_INTERLEAVE - (1.0f/iResolution.y) * 0.5f) ) );\n\tfragColor.rgb = color;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"\nconst float texelSize = 9.0f;\t\t\t\t// how many?\nconst float texelsPerPixel = 0.5f / 0.07;   // pixel \"softness\"\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float texelSizeCtrl = iResolution.y / texelSize;\n    \n    float t = INTERVAL;\n    \n    vec2 texelCoord = texelSizeCtrl * uv \n        \t\t\t// extra movement\n                    + vec2(texelSize * texelSize * (cos(t*(t-1.0f))),\n                           texelSize * texelSize * (sin(t*(t-1.0f))));\n    \n    vec2 withinTexel = fract(texelCoord);\n    \n    vec2 interp = clamp( texelsPerPixel * withinTexel, 0.0f, 0.5f )\n                + clamp( texelsPerPixel * (withinTexel - 1.0f) + 0.5f, 0.0f, 0.5f);\n    \n    \n    vec2 texCoord = (floor(texelCoord) + interp) / texelSizeCtrl;\n    \n    vec3 color = texture(iChannel0, texCoord).rgb;\n    \n    fragColor = vec4(color, 1);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define INTERVAL (sin(0.22f * iTime))\n\n#define SCANLINE_INTERLEAVE 2.0f\n\n#define LUMA vec3(0.2126f, 0.7152f, 0.0722f)\n\nfloat aaStep(in float compValue, in float gradient){\n  float halfChange = fwidth(gradient) * 0.5f;\n  //base the range of the inverse lerp on the change over one pixel\n  float lowerEdge = compValue - halfChange;\n  float upperEdge = compValue + halfChange;\n  //do the inverse interpolation\n  return( clamp((gradient - lowerEdge) / (upperEdge - lowerEdge), 0.0f, 1.0f) );\n}\n\nvec2 aaStep(in vec2 compValue, in vec2 gradient){\n  vec2 halfChange = fwidth(gradient) * 0.5f;\n  //base the range of the inverse lerp on the change over one pixel\n  vec2 lowerEdge = compValue - halfChange;\n  vec2 upperEdge = compValue + halfChange;\n  //do the inverse interpolation\n  return( clamp((gradient - lowerEdge) / (upperEdge - lowerEdge), 0.0f, 1.0f) );\n}","name":"Common","description":"","type":"common"}]}