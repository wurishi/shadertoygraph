{"ver":"0.1","info":{"id":"flKyWh","date":"1661378006","viewed":143,"name":"Floating Neon Dots","username":"basilicon","description":"A modified version of an older shader I made.  I had the idea to use the sum of the inverse of distances to a series of dots in space, all with pseudo-random paths, and it turned into this.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["palette","dots","path","neon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float velocity = 0.4, seed = 100., strength = 0.2;\nconst float dcount = 255.;\n\nvec3 palette( in float t) {\n    vec3 a = vec3(0.532, 0.570, 0.550),\n         b = vec3(0.694, 0.549, 0.163),\n         c = vec3(1.381, 0.346, 1.207),\n         d = vec3(5.239, 4.040, 3.822);\n        \n    return a + b*cos(6.28318 *(c*t+d));\n}\n\n// describes the path that a dot travels\nvec2 travelPath(float t, float i) {\n    float ni = i + seed;\n\n    float rand1 = texture(iChannel0, vec2(ni, 0.3)).x;\n    float rand2 = texture(iChannel0, vec2(ni, 0.6)).x;\n\n    vec2 newPos = vec2(\n        fract((2. * rand1 - 1.) * t),\n        fract((2. * rand2 - 1.) * t)\n    );\n    \n    // padding for apparent teleportation\n    newPos = (newPos - 0.5) * 2.1;\n    \n    return newPos;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pos = (fragCoord * 2. - iResolution.xy) / iResolution.x;\n    \n    float c = 0., obsStr = strength * inversesqrt(dcount);\n    \n    vec3 col = vec3(0,0,0);\n    \n    for (float i=0.;i<dcount;i++) {\n        float f = i / dcount,\n              t = iTime * velocity + seed;\n    \n        vec2 k = travelPath(t, f);\n        \n        float power = pow(cos(t + i) + 0.01, 2.) * obsStr / length(k - pos);\n        //power = pow(power, 1.1);\n        power = exp(2.5 * (power - 1.));\n        power = smoothstep(0.1, 0.8, power);\n        \n        c += power;\n        col += power * palette(i * seed); \n    }\n  \n    \n    fragColor = vec4(col * c,0.);\n}","name":"Image","description":"","type":"image"}]}