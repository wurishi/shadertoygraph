{"ver":"0.1","info":{"id":"stGBz3","date":"1664913404","viewed":78,"name":"Ondulation/déformation rotative ","username":"Hatokuro","description":"Crée une ondulation directionnel sur une image.\nutilisation: drapeau \n                eau\n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["ondulationdeformationrotationimage"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NBR_WAVE 50.\n#define HEIGHT_WAVE 100.\nmat2 rotate2d(float angle)\n{\n \treturn mat2(cos(angle),-sin(angle),sin(angle),cos(angle));   \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    uv.y += (sin((uv*rotate2d(iTime/10.)).x*NBR_WAVE+iTime*20.0)/HEIGHT_WAVE);\n\n    uv.y+=0.01; //zoomer sur l'image afin de masquer la répétition\n    uv.y*=0.97;\n    \n    //si on joue sur les valeur x et y d'uv on peu crée d'autre type de déformation soit vertical soit horizontal ou les deux\n    \n    vec3 col = texture(iChannel0,uv).xyz;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}