{"ver":"0.1","info":{"id":"Mt2GWW","date":"1429174975","viewed":378,"name":"Test one - water","username":"vlekos","description":"Testing wave effects","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"#define PI 3.14159265\n\nvec3 drop(in vec3 uvc, in int index, in float time, in float radMax, in float scale)\n{\n    float duration = 2.5;\n    time += duration * float(index);\n    float round = floor(time / duration);\n    \n    float hitX = (sin(round * 10.0) * 0.4);\n    float hitY = (cos(round * 10.0) * 0.2);\n    \n    float waveCount = 6.0;\n    float width = 0.05 * waveCount;\n    \n    float rad = (mod(time, duration)) * radMax;\n    float dx = uvc.x - hitX;\n    float dy = uvc.y - hitY;\n    \n    float dist = sqrt(dx * dx + dy * dy);\n    \n    if (dist >= rad - width && dist <= rad) \n    {\n    \tfloat a = sin((dist - (rad - width)) / width * PI * 2.0 * waveCount);\n        float b = a * width / 50.0 * pow(1.0 + radMax - rad, 8.0) * pow(scale - 0.1, 20.0);\n        float angle = atan(dy, dx);\n        \n        float s = 1.0 + b + b * sin(angle * 10.0) * 0.25;\n        uvc.x = hitX + s * (uvc.x - hitX);\n        uvc.y = hitY + s * (uvc.y - hitY);\n       \tif (b > 0.0) \n        {\n       \t\tuvc.z += b * 0.5 * dy / dist;\n        }\n    }\n    \n    return uvc;\n}\n\nvec4 multiplyLuminosity( in vec4 color, in float multiplier )\n{\n    float y = 0.2126 * color.x + 0.7152 * color.y + 0.0722 * color.b;\n    float u = -0.09991 * color.x - 0.33609 * color.y + 0.436 * color.b;\n    float v = 0.615 * color.x - 0.55861 * color.y - 0.05639 * color.b;\n\n    y *= multiplier;\n\n    color.x = y + 1.28033 * v; \n    color.y = y - 0.21482 * u - 0.39059 * v;\n    color.z = y + 2.12789 * u;\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime * 1.0;\n    float scale = (1.125 - (iMouse.x / iResolution.x) * 0.125);\n    \n\tfloat amplitude = (0.005 + 0.00125 * (sin(time / 2.0))) * 0.05 * 2.0 * pow(scale - 0.05, 20.0);\n    vec2 resolution = vec2(max(iResolution.x, iResolution.y), max(iResolution.x, iResolution.y));\n\n    vec3 uvc = vec3(fragCoord.x / resolution.x, fragCoord.y / resolution.y, 0.0);\n\t\n    uvc.x -= 0.5;\n    uvc.y -= 0.3;\n    \n    uvc.x *= scale;\n    uvc.y *= scale;\n    \n    if (scale > 1.01)\n    {\n        float dx = sin(time * 5.0 + (uvc.y + uvc.x) * 30.0) * amplitude;\n        float dy = sin(time * 5.0 + (uvc.x) * 60.0) * amplitude + sin(time * 2.0) * 0.005 * pow(scale - 0.08, 20.0);\n\n        uvc.x += dx;\n        uvc.y += dy;\n\n        for (int i = 0; i < 13; i++)\n        {\n           uvc = drop(uvc, i, time + 0.2 * float(i), 0.3 + sin(float(i)) * 0.05, scale);\n        }\n    }\n\n    uvc.x = 0.5 + (uvc.x);\n    uvc.y = 0.3 + (uvc.y);\n    \n    vec4 color = texture(iChannel0, uvc.xy);\n\n    if (scale <= 1.01)\n    {\n        color.x = pow(color.x, pow(1.05, 8.0));\n        color.y = pow(color.y, pow(1.05, 8.0));\n        color.z = pow(color.z, pow(1.05, 8.0));\n    }    \n    else \n    {\n        color = multiplyLuminosity(color, scale * scale + 0.1);\n    }\n    \n    fragColor = multiplyLuminosity(color, 1.0 + uvc.z) + vec4(uvc.z, uvc.z, uvc.z, 0.0);\n}","name":"","description":"","type":"image"}]}