{"ver":"0.1","info":{"id":"WtjcWW","date":"1594400414","viewed":101,"name":"Basic ray tracer","username":"banni","description":"ray tracing","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float isp(in vec3 ro,\n                          in vec3 rd,\n                          in vec3 sp,\n                          in float radius){\n    vec3 a = sp - ro;\n    if(dot(a,rd) < 0.){return -1.;}\n    rd = normalize(rd);\n    float scProj = dot(a,rd);\n    vec3 proj = ro + rd * scProj;\n    float dist = length(proj-sp);\n    if(dist <= radius){\n        return scProj - sqrt(radius * radius - dist * dist);\n    }\n    return -1.;\n}\n\nfloat bouncy(float value){\n    //magic params\n    float t = 3.1;\n    float f = 6.;\n    //magic motion function\n\treturn (abs((sin(t - value * f) + 1.) * 4. - 2.))/6.;\n}\n\nfloat f1(float value){\n\treturn pow(value,0.5);\n}\n\nfloat f2(float value){\n\treturn pow(0.65 - value,2.) * 4. + 0.5;\n}\n\nfloat f3(float value){\n\treturn min(f1(value),f2(value));\n}\nfloat n21(vec2 c){\n\treturn fract(sin(c.x * 100. + c.y * 6598.) * 5398.);\n}\nfloat sn(vec2 uv){\n\tvec2 lv = fract(uv);\n    vec2 id = floor(uv);\n    float bl = n21(id);\n    float br = n21(id + vec2(1.,0));\n    float tl = n21(id + vec2(0,1));\n    float tr = n21(id + vec2(1,1));\n  \tfloat bfn = mix(bl,br,smoothstep(0.,1.,lv.x));\n    float tfn = mix(tl,tr,smoothstep(0.,1.,lv.x));\n    return mix(bfn,tfn,smoothstep(0.,1.,lv.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //1 * a + b = 0.25\n    //0 * a + b = -0.25\n    //a = 0.5, b = -0.25\n    float a = 0.5f;\n    float b = -0.25;\n    float x = fragCoord.x/iResolution.x;\n    float y = fragCoord.y/iResolution.y;\n    float aspectRatio = iResolution.x/iResolution.y;\n    x = x * a + b;\n    y = y * a + b;\n    x *= aspectRatio;\n    float nearPlane = 1.0f;\n    float farPlane = 10000.;\n    vec3 cameraPosition = vec3(0.0f,0.0,0.0);\n    vec3 ro = cameraPosition;\n    vec3 rd = normalize(vec3(x,y,nearPlane));\n    \n    vec3 lightPos = vec3(200,0,1.);\n    vec3 spheres[5];\n    for(int i = 0; i<spheres.length(); i++){\n    \tspheres[i] = vec3(0,0,10 + i * 20);\n    }\n    \n    float t = farPlane;\n    int index = 0;\n    for(int i = 0; i<spheres.length(); i++){\n        vec3 xOffset = vec3(15.,0,0);\n        vec3 yOffset = vec3(0,10.,0);\n        spheres[i] += xOffset * cos(iTime);\n        spheres[i] += yOffset * bouncy(iTime * 0.4) * 0.5;\n        float newt = isp(ro,rd,spheres[i],1.);\n        if(newt >= nearPlane && newt < t){\n        \tt = newt;\n            index = i;\n        }\n    }\n    if(t >= nearPlane && t < farPlane){\n        vec3 color = vec3(.6f,0.2f,1. - float(index) / 50.);\n        vec3 lightColor = vec3(1.0f,0.5f,0.1f);\n        //point of intersection\n        vec3 pi = ro + rd * t;\n        vec3 normal = normalize(pi - spheres[index]);\n        vec3 lightDir = normalize(lightPos - pi);\n        float diff = max(0.,dot(lightDir,normal));\n        vec3 difCol = lightColor * color * diff;\n        vec3 ambient = lightColor * color * 0.05f;\n        vec3 viewDir = normalize(ro - pi);\n        float spec = max(0.,dot(lightDir,reflect(-viewDir,normal)));\n        spec = pow(spec,32.);\n        vec3 specColor = lightColor * spec;\n        vec3 finalColor = difCol + ambient + specColor;\n        //Gamma correction\n        finalColor = pow(finalColor,vec3(0.4545));\n    \tfragColor = vec4(finalColor,1.0f);\n    }\n    else{\n        //sky\n        vec2 uv = fragCoord/iResolution.xy;\n        uv+= iTime *0.0001;\n        float amp = 1.;\n        float td = 0.;\n        float fn = sn(uv * 4.) * amp;\n        td += amp;\n        amp /= 2.;\n        fn += sn(uv * 8.) * amp;\n        td += amp;\n        amp /= 2.;\n        fn += sn(uv * 16.) * amp;\n        td += amp;\n        amp /= 2.;\n        fn += sn(uv * 32.) * amp;\n        td += amp;\n        amp /= 2.;\n        fn += sn(uv * 64.) * amp;\n        td += amp;\n        amp /= 2.;\n        fn += sn(uv * 128.) * amp;\n        td += amp;\n        amp /= 2.;\n        fn /= td;\n        vec3 blue = vec3(0,0,1);\n        vec3 white = vec3(1);\n        vec3 fincol = (1. - fn) * white + fn * blue;\n        //Gamma correction\n        fincol = pow(fincol,vec3(0.4545));\n        fragColor = vec4(fincol,1.0f);   \n    }\n}","name":"Image","description":"","type":"image"}]}