{"ver":"0.1","info":{"id":"ft2yRG","date":"1649871298","viewed":65,"name":"VoronoiTrainingTwo","username":"RedWool","description":"second time practice","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define POWER 100.\n#define BULGE 2.\n#define ColorA vec3 (0, 1, 0)\n#define ColorB vec3 (0.5, 0, 0.5)\n\nfloat random (float n)\n{\n    return fract(sin(n*501.211)*483.493);\n}\n\nvec2 random2d (in vec2 uv)\n{\n    return vec2(random(dot(uv,vec2(832.,49.3))),random(dot(uv,vec2(85.,392.3))));\n}\n\nfloat noise (float n)\n{\n    float i = floor(n);\n\n    return mix(random(i), random(i+1.), fract(n));\n}\n\nvec2 ctp (vec2 uv)\n{\n    return vec2(atan(uv.x,uv.y),length(uv));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.xy;\n    uv *= length(uv)*BULGE;\n    uv *= POWER;\n    uv = ctp(uv);\n    \n    vec2 i = floor(uv);\n    vec2 f = fract(uv);\n    \n    float less = 10.;\n    vec2 point;\n    \n    for (int x = -1; x <= 1; x++){\n    for (int y = -1; y <= 1; y++){\n        vec2 v = vec2(x, y);\n        vec2 p = sin(random2d(i+v)*372.493+iTime)*0.5+0.5;\n        \n        float d = length(v + p - f);\n        if (d < less)\n        {\n            less = d;\n            point = p + i + v;\n        }\n    }}\n    \n    float pct = noise(point.y+point.x)*0.5 + point.x/(POWER*BULGE*1.5);\n    \n    // Time varying pixel color\n    vec3 col = pct * ColorA + (1.-pct) * ColorB;//0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}