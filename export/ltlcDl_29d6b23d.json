{"ver":"0.1","info":{"id":"ltlcDl","date":"1507031013","viewed":122,"name":"Circular Springs","username":"rawhed","description":"Still a work in progress","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["2d","circle","spring"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// comment this out for the more standard look\n#define SHADEA\n\n\n//#define RAPID\n\nvec4 GetCircle(float x)\n{\n    vec2 uv = vec2(x, 0.0);//fragCoord.xy / iResolution.xy;\n    /*float v = sin(uv.x * 3.0 - iTime);// + cos(uv.x + iTime * 0.333) + cos(uv.x - iTime * 2.1253);\n    float t = sin(uv.x * 2.0 - iTime * 3.0) + sin(iTime) - cos(iTime * 0.333);\n    float w = cos(uv.x - iTime);// + cos(uv.x + iTime * 1.333) + sin(uv.x / 0.5 - iTime * 1.1253);\n    float c = abs(cos(uv.x + iTime) + cos(uv.x * 10.333) + cos(uv.x * 6.1253));*/\n    //v *= uv.x;\n    float v,t,w,c = 0.0;\n    v = sin((iTime - uv.x + sin(iTime)) * 2.0) * 1.777;\n    w = cos((iTime - uv.x - cos(iTime * 0.753)) * 2.0);\n    //t = sin((iTime - uv.x));\n    t = smoothstep(0.0, 1.0, abs(v*w)) * 2.0 * clamp(uv.x, 0.2, 1.0) + 0.2;\n    #ifdef RAPID\n    t *= smoothstep(0.2, 0.8, abs(v*w)) + 0.2;\n    #endif\n    \n    /*\n    float pixel = 1.0 / iResolution.x;\n    if (uv.x > pixel)\n    {\n    \tvec4 vals = texture(iChannel0, vec2(uv.x - pixel, 0.0));\n    \tv = (v + vals.x) / 2.0;\n        w = (w + vals.y) / 2.0;\n    }*/\n    \n    /*c = float(int((uv.x - iTime)*10.0)&2);\n    c = v*w;\n    c = float(int((uv.x) * 1255.0)&2);*/\n    //c=1.0;\n    \n    //fragColor = vec4(v, w, c ,min(1.5, max(0.1, abs(t))));\n    return vec4(v, w, c ,t);    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv.x *= 1.777;    \n    float col = 0.;\n    int walk = 5;\n    for (int i = 0; i < 255; i+=walk)\n    {\n        vec2 uv2 = vec2(float(i)/255.0, 0.0);\n        vec4 vals = texture(iChannel0, uv2);\n        //vec4 vals = GetCircle(uv2.x);\n        vec2 centre = vec2(0.8888, 0.5) + vals.xy * 0.333;\n        float d = distance(uv, centre);\n        if (d <= vals.w * 0.125)\n        {\n            float col2 = float(i)/255.0;\n            col2 = 1.0 - col2;\n            //col2 *= float((i+1)&1);\n            //col *= vals.z;\n            \n        vec2 uv3 = vec2(float(i-walk)/255.0, 0.0);\n        //vec4 vals2 = GetCircle(uv3.x);\n        vec4 vals2 = texture(iChannel0, uv2);\n        vec2 centre2 = vec2(0.8888, 0.5) + vals2.xy * 0.333;\n        float d2 = distance(uv, centre2); \n           //float d3 = distance(\n            col = d2 / (pow(vals2.w*0.6, 2.0));\n            //col = 1.0;\n            col = min(col, d / (vals.w * 0.125));\n            #ifdef SHADEA\n            col -= col2;\n            col = max(0.0, min(1.0, col));\n            col *= (1.0-uv2.x);\n            #endif\n            //col = 1.0;\n            break;\n        }\n    }\n    col = max(0.0, min(1.0, col));\n  #ifdef SHADEA\n    col = pow(col*5.0, 2.2);\n  #endif  \n    fragColor = vec4(col, col, col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//#define RAPID\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n    //return;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    //float v = sin(uv.x * 3.0 - iTime);// + cos(uv.x + iTime * 0.333) + cos(uv.x - iTime * 2.1253);\n    //float t = sin(uv.x * 2.0 - iTime * 3.0) + sin(iTime) - cos(iTime * 0.333);\n    //float w = cos(uv.x - iTime);// + cos(uv.x + iTime * 1.333) + sin(uv.x / 0.5 - iTime * 1.1253);\n    //float c = abs(cos(uv.x + iTime) + cos(uv.x * 10.333) + cos(uv.x * 6.1253));\n    //v *= uv.x;\n    float v,t,w,c = 0.0;\n    // todo: link these scale values with the audio volume\n    v = sin((iTime - uv.x + sin(iTime)) * 2.0) * 1.777;\n    w = cos((iTime - uv.x - cos(iTime * 2.753)) * 2.0);\n    t = sin((iTime - uv.x));\n    t = smoothstep(0.0, 1.0, abs(v*w)) * 2.0 * clamp(uv.x, 0.2, 1.0) + 0.2;\n    #ifdef RAPID\n    t *= smoothstep(0.2, 0.8, abs(v*w)) + 0.2;\n    #endif\n    \n    /*\n    float pixel = 1.0 / iResolution.x;\n    if (uv.x > pixel)\n    {\n    \tvec4 vals = texture(iChannel0, vec2(uv.x - pixel, 0.0));\n    \tv = (v + vals.x) / 2.0;\n        w = (w + vals.y) / 2.0;\n    }*/\n    \n    c = float(int((uv.x - iTime)*10.0)&2);\n    c = v*w;\n    c = float(int((uv.x) * 1255.0)&2);\n    //c=1.0;\n    \n    //fragColor = vec4(v, w, c ,min(1.5, max(0.1, abs(t))));\n    fragColor = vec4(v, w, c ,t);\n}\n","name":"Buf A","description":"","type":"buffer"}]}