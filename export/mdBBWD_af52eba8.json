{"ver":"0.1","info":{"id":"mdBBWD","date":"1689716839","viewed":59,"name":"Halfway vector (bisection)","username":"Envy24","description":"Show how calculate halfway vector for Blinn-Phong reflection model.\nDrag camera with mouse.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["phong","vector","blinn","bisection","halfway"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SCENE_SCALE               ( 1.2)\n#define UNIT                      ( (SCENE_SCALE*4.) / iResolution.y  )\n#define SMAA(d)                   ( smoothstep(UNIT, 0., d) )\n\n/* https://www.shadertoy.com/view/DdsGDj */\n#define MOUSE_OFFSET ( iMouse.z > 0. ? iMouse.xy - iResolution.xy * 0.5 : vec2(0) )\nvec2 map_to_centered_ndc(in vec2 SC, in float scale, in vec2 origin, in bool mouse_drag)\n{\n    vec2 M = MOUSE_OFFSET * (mouse_drag == true ? 1. : 0.);\n    return ((2. * (SC - M) - iResolution.xy) / iResolution.y) * scale + origin;\n}\n\n// Character centered at pos.\nfloat char_intensity(vec2 uv, vec2 pos, float scale, int h_idx, int v_idx)  \n{   \n    pos -= 0.5;\n    // Apply scale.\n    uv -= 0.5; uv *= scale; uv += 0.5;\n    // Apply translation.\n    uv -= pos*scale;\n    \n    const float char_wh = 1./16.; // 0.0625\n    vec2 char = vec2(h_idx, v_idx) + uv; // xy in range [0; 15.], uv in range [0.; 1.]\n         char *= char_wh; // xy in range [0.; 1.]\n    return \n        (uv.x<0. || uv.x>1. || uv.y<0.|| uv.y>1.) == true ?\n            0. :\n            texture(iChannel3, char).x;\n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    vec2 NDC = map_to_centered_ndc(SC, SCENE_SCALE, vec2(0, 0.3), false),\n         MP = iMouse.xy == vec2(0) ?\n             vec2(-1.1, -0.1) :\n             map_to_centered_ndc(iMouse.xy, SCENE_SCALE, vec2(0, 0.3), false);\n    \n    // Init scene for text printing.\n    vec3 color = vec3(1);           \n    vec3 char_color = vec3(1,0,0);\n    vec2 UV_ = NDC;\n    //\n    \n    /* Surface */\n    vec2 A = vec2(-1,0.1), B = vec2(1,-0.1);\n    color = mix(color, vec3(0), SMAA(segmentSDF_L2(NDC, A, B, 0.)));\n    /* Hit point */\n    vec2 HP = (A+B) * 0.5;\n    color = mix(color, vec3(1, 0, 0), SMAA(diskSDF_L2(NDC, HP, 0.025)));\n    /* Camera */\n    vec2 C = MP;\n    color = mix(color, vec3(1, 0, 1), SMAA(diskSDF_L2(NDC, C, 0.025)));\n    /* Light */\n    vec2 L = vec2(1,0.5);\n    color = mix(color, vec3(1, .5, 0), SMAA(diskSDF_L2(NDC, L, 0.025)));\n    \n    /* Surface normal (green) */\n    vec2 T = B - A, N = normalize(vec2(-T.y, T.x));\n    color = mix(color, vec3(0,1,0), SMAA(arrowSDF(NDC, HP, HP+N, 0.)));\n    /* Ray direction/view direction (purple) */\n    vec2 CtoHP = normalize(HP - C);\n    color = mix(color, vec3(1, 0, 1), SMAA(arrowSDF(NDC, HP-CtoHP, HP, 0.)));\n    /* Light direction (orange) */\n    vec2 HPtoL = normalize(L - HP); // not normalized just for this shader\n    color = mix(color, vec3(1, .5, 0), SMAA(arrowSDF(NDC, HP, HP+HPtoL, 0.)));\n    /* Halfway direction (blue) */\n    vec2 H = (-CtoHP + HPtoL) / length(-CtoHP + HPtoL);\n    color = mix(color, vec3(0, 0, 1), SMAA(arrowSDF(NDC, HP, HP+H, 0.)));\n    /**/\n    \n    /* On/Off Text */\n    _H(HP+vec2(-0.03, -0.1), 0.15);\n    _P(HP+vec2(0.04, -0.1), 0.15);\n    char_color = vec3(1,0,1);\n    _C(C+vec2(0., 0.1), 0.15);\n    char_color = vec3(1,.5,0);\n    _L(L+vec2(0., 0.1), 0.15);\n    char_color = vec3(0,0,1);\n    _h(HP+H*0.5+vec2(-H.y,H.x)*0.1, 0.15);\n    char_color = vec3(0,1,0);\n    _n(HP+N*0.5+vec2(-N.y,N.x)*0.1, 0.15);\n    /* On/Off Text */  \n\n    O = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float diskSDF_L2(in vec2 NDC, in vec2 C, in float r) { return length(C - NDC)-r; }\n\nfloat segmentSDF_L2(in vec2 NDC, in vec2 B, in vec2 E, in float r)\n{\n    vec2 BP = NDC - B, BE = E - B;\n    return length(BP - BE * clamp(dot(BP, BE) / dot(BE, BE), 0.0, 1.0)) - r;\n}\n\nfloat arrowSDF(\n    in vec2 NDC,\n    in vec2 B,\n    in vec2 E,\n    in float R)\n{\n    float len = length(B-E);    \n    vec2 dir = normalize(E-B),\n         //up = cross(vec3(dir, 0.), vec3(0, 0, -1)).xy,   \n         up = vec2(-dir.y, dir.x),\n         C = E - dir * 0.0575, //      U--\n         U = C + up  * 0.030,  // B----C----E\n         D = C - up  * 0.030;  //      D--\n    \n    vec3 BARY = inverse(mat3(\n            U.x, U.y, 1.0,\n            D.x, D.y, 1.0,\n            E.x, E.y, 1.0)) * vec3(NDC.x, NDC.y, 1.0);\n    \n    float sign = \n        BARY.x >= 0.0 &&    \n        BARY.y >= 0.0 && \n        BARY.z >= 0.0 ?  // inside triangle?\n            -1. : 1.;\n    \n    float d = segmentSDF_L2(NDC, U, D, 0.);\n          d = min(d, segmentSDF_L2(NDC, U, E, 0.));\n          d = min(d, segmentSDF_L2(NDC, D, E, 0.));\n          d = \n              len < 0.0575 ? \n                  d :\n                  min(d, segmentSDF_L2(NDC, B, C, 0.));\n    \n    return sign*d-R;           \n}\n\n#define _0(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 0, 12)) )\n#define _1(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 1, 12)) )\n#define _2(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 2, 12)) )\n#define _3(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 3, 12)) )\n#define _4(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 4, 12)) )\n#define _5(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 5, 12)) )\n#define _6(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 6, 12)) )\n#define _7(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 7, 12)) )\n#define _8(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 8, 12)) )\n#define _9(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 9, 12)) )\n\n#define _A(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 1, 11)) )\n#define _B(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 2, 11)) )\n#define _C(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 3, 11)) )\n#define _D(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 4, 11)) )\n#define _E(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 5, 11)) )\n#define _F(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 6, 11)) )\n#define _G(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 7, 11)) )\n#define _H(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 8, 11)) )\n#define _I(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 9, 11)) )\n#define _J(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 10, 11)) )\n#define _K(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 11, 11)) )\n#define _L(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 12, 11)) )\n#define _M(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 13, 11)) )\n#define _N(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 14, 11)) )\n#define _O(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 15, 11)) )\n#define _P(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 0, 10)) )\n#define _Q(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 1, 10)) )\n#define _R(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 2, 10)) )\n#define _S(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 3, 10)) )\n#define _T(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 4, 10)) )\n#define _U(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 5, 10)) )\n#define _V(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 6, 10)) )\n#define _W(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 7, 10)) )\n#define _X(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 8, 10)) )\n#define _Y(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 9, 10)) )\n#define _Z(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 10, 10)) )\n\n#define _a(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 1, 9)) )\n#define _b(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 2, 9)) )\n#define _c(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 3, 9)) )\n#define _d(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 4, 9)) )\n#define _e(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 5, 9)) )\n#define _f(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 6, 9)) )\n#define _g(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 7, 9)) )\n#define _h(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 8, 9)) )\n#define _i(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 9, 9)) )\n#define _j(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 10, 9)) )\n#define _k(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 11, 9)) )\n#define _l(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 12, 9)) )\n#define _m(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 13, 9)) )\n#define _n(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 14, 9)) )\n#define _o(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 15, 9)) )\n#define _p(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 0, 8)) )\n#define _q(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 1, 8)) )\n#define _r(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 2, 8)) )\n#define _s(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 3, 8)) )\n#define _t(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 4, 8)) )\n#define _u(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 5, 8)) )\n#define _v(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 6, 8)) )\n#define _w(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 7, 8)) )\n#define _x(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 8, 8)) )\n#define _y(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 9, 8)) )\n#define _z(pos, size) ( color = mix(color, char_color, char_intensity(UV_, pos, 1./size, 10, 8)) )\n","name":"Common","description":"","type":"common"}]}