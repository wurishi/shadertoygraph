{"ver":"0.1","info":{"id":"DdjcRG","date":"1687840300","viewed":67,"name":"blurred transparent rounded rect","username":"HexBlight","description":"A blurred semi transparent rounded rectangle shader. This was a modification of someone else's.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["rectangle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 uv;\n\nfloat roundedRectangleWithBlur(vec2 pos, vec2 size, float radius, float blur)\n{\n    vec2 hSize = size / 2.0 - radius;\n    float d = length(max(abs(uv - pos),hSize)-hSize);\n    return smoothstep(-radius-blur, -radius+blur, -d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 color = vec3(1.0, 0.0, 0.0);\n    vec2 pos = vec2(0.0,0.0);\n    vec2 size = vec2(1.0, 1.0);\n    float radius = 0.25;\n    float blur = 0.08;\n    float aspect = iResolution.x / iResolution.y;\n    float intensity;\n\n    uv = (fragCoord/iResolution.yy) * 2.0 - vec2(aspect, 1.0);\n    \n    intensity = roundedRectangleWithBlur(pos, size, radius, blur);\n\n    fragColor = vec4(vec3(1.0,0.0,0.0) * intensity,0.5);\n}","name":"Image","description":"","type":"image"}]}