{"ver":"0.1","info":{"id":"DsVGzh","date":"1678294965","viewed":486,"name":"material editor dream","username":"josemorval","description":"An attempt to do (the visual part of) a material editor. The idea would be save the persistent node data in another buffer and in each frame \"build the shader\" of the network. So much things to do but it'd be exciting to develop (and slow xD...or not?)","likes":25,"published":1,"flags":0,"usePreview":1,"tags":["editor","dream","slow","nodes","hatebezier"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define col_grey(v) vec4(v,v,v,0)\n\n//Distance fields for drawing\n//taken basically from iquilez https://www.shadertoy.com/view/XdVBWd\nfloat length2( in vec2 v ) { return dot(v,v); }\n\nfloat sdSegmentSq( in vec2 p, in vec2 a, in vec2 b )\n{\n\tvec2 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length2( pa - ba*h );\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n\treturn sqrt(sdSegmentSq(p,a,b));\n}\n\nfloat udBezier(vec2 p0, vec2 p1, vec2 p2, in vec2 p3, vec2 pos)\n{   \n    const int kNum = 15;\n    vec2 res = vec2(1e10,0.0);\n    vec2 a = p0;\n    for( int i=1; i<kNum; i++ )\n    {\n        float t = float(i)/float(kNum-1);\n        float s = 1.0-t;\n        vec2 b = p0*s*s*s + p1*3.0*s*s*t + p2*3.0*s*t*t + p3*t*t*t;\n        float d = sdSegmentSq( pos, a, b );\n        if( d<res.x ) res = vec2(d,t);\n        a = b;\n    }\n    \n    return res.x;\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n//Taken Fabrice Neyret for algorhitm https://www.shadertoy.com/view/llySRh\n//Awesome\n#define C(c) U.x-=.5; O+= char(U,64+c)\n\nvec4 char(vec2 p, int c) \n{\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n\treturn textureGrad( iChannel1, p/16. + fract( vec2(c, 15-c/16) / 16. ), dFdx(p/16.),dFdy(p/16.) );\n}\n\nvec4 printNumber(vec2 uv, float f, int digits, int decimals)\n{\n    \n    vec4 O = vec4(0.0);\n    float FontSize = 3.;\n    vec2 position = vec2(0.01,0.01);\n    vec2 U = ( uv - position)*64.0*vec2(1.5,1.)/FontSize;\n    \n    for(int i=digits-decimals;i>-1;i--)\n    {\n          C(int(int(f)/10^i)%10-16);\n    }\n    \n    return O;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //The idea would be trying to do some ultra-simple editor\n    //Here we woould a red persistent node/postion/etc from texture\n    //vec4 readtex = texture(iChannel0,uv);\n    \n    //World editor position\n    vec2 uvworld = uv - 0.5; uvworld.x *= iResolution.x/iResolution.y;\n    uvworld *= 4.0;    \n    \n    //Initialize editor layaout composition \n    vec4 col = vec4(0, 0, 0, 0);\n    \n\n    // Setup background color (similar to UE4 editor)\n    col = col_grey(0.1);\n    {\n        float width = 0.005;\n        float scale = 10.;\n        float mask = fract(scale * uvworld.x); mask = smoothstep(width * scale ,0.8*width * scale,abs(mask));\n        col = mix(col, col_grey(0.15), mask);\n        mask = fract(scale * uvworld.y); mask = smoothstep(width * scale,0.8*width * scale,abs(mask));\n        col = mix(col, col_grey(0.15), mask);\n    }\n    \n    {\n        float width = 0.01;\n        float scale = 2.5;\n        float mask = fract(scale * uvworld.x); mask = smoothstep(width * scale,0.8*width * scale,abs(mask));\n        col = mix(col, col_grey(0.07), mask);\n        mask = fract(scale * uvworld.y); mask = smoothstep(width * scale,0.8*width * scale,abs(mask));\n        col = mix(col, col_grey(0.07), mask);\n    }\n    \n    \n    //Here the node info\n    //First position\n    vec2[] poss = vec2[](vec2(-1.+0.3*cos(1.1*iTime),0.3*sin(1.21*iTime)),vec2(1.+0.4*sin(1.05*iTime+0.2),0.5-0.3*cos(1.71*iTime-0.2)),vec2(0.5-0.3*sin(1.3*iTime),-0.5+0.3*cos(1.13*iTime-0.2)));\n    for(int i=0;i<3;i++)\n    {\n        poss[i] += (0.5+0.3*sin(iTime+0.131*float(i)+0.1))*normalize(poss[i]);\n    }\n    \n    //Draw links between nodes (painful part)\n    float f = udBezier(poss[0]+vec2(0.1,0),poss[0]+vec2(1,0),poss[1]+vec2(-1.,0.),poss[1]+vec2(-0.25,0),uvworld);\n    f = min(f,udBezier(poss[1]+vec2(0.3,0),poss[1]+vec2(1.5,0),poss[2]+vec2(-1.,0.05),poss[2]+vec2(-0.25,0.05),uvworld));\n    f = min(f,udBezier(poss[0]+vec2(0.1,0),poss[0]+vec2(1,0),poss[2]+vec2(-1.,-0.05),poss[2]+vec2(-0.25,-0.05),uvworld));\n    col = mix(col,vec4(1,1,1,0),smoothstep(0.0002,0.00,f));\n   \n   \n    //one node\n    {\n        vec2 pos_box = poss[0];\n        float f = sdBox(uvworld-pos_box,vec2(0.2, 0.2));\n        col = mix(col, col_grey(0.0), 0.8*smoothstep(0.12,0.,f));\n        col = mix(col, col_grey(0.025), 0.8*step(f-0.05,0.)*step(-0.15,pos_box.y-uvworld.y));\n        col = mix(col, vec4(0.3, 0.4, 0.2, 0), 1.0*step(f-0.05,0.)*step(0.15,uvworld.y-pos_box.y));\n        col += col_grey(0.3)*step(f-0.05,0.)*smoothstep(0.0,0.1,f);   \n        \n        //print node name\n        {\n            vec4 O = vec4(0.0);\n            float FontSize = 6.;\n            vec2 position = vec2(-0.25,0.15);\n            vec2 U = ( uvworld - pos_box - position)*64.0*vec2(1.,1.)/FontSize;\n            C(1);C(36);C(36);\n            col = mix(col,col_grey(1.),0.75*O.x); \n            \n        }\n    }\n    \n    //other node\n    {\n        vec2 pos_box = poss[1];\n        float f = sdBox(uvworld-pos_box,vec2(0.4, 0.2));\n        col = mix(col, col_grey(0.0), 0.8*smoothstep(0.12,0.,f));\n        col = mix(col, col_grey(0.025), 0.8*step(f-0.05,0.)*step(-0.15,pos_box.y-uvworld.y));\n        col = mix(col, vec4(0.6, 0.2, 0.2, 0), 1.0*step(f-0.05,0.)*step(0.15,uvworld.y-pos_box.y));\n        col += col_grey(0.3)*step(f-0.05,0.)*smoothstep(0.0,0.1,f); \n        \n        //print node name\n        {\n            vec4 O = vec4(0.0);\n            float FontSize = 6.;\n            vec2 position = vec2(-0.45,0.15);\n            vec2 U = ( uvworld - pos_box - position)*64.0*vec2(1.,1.)/FontSize;\n            C(19);C(45);C(47);C(47);C(52);C(40);C(51);C(52);C(37);C(48);\n            col = mix(col,col_grey(1.),0.75*O.x); \n            \n        }\n    }\n    \n    //even one more node\n    {\n        vec2 pos_box = poss[2];\n        float f = sdBox(uvworld-pos_box,vec2(0.3, 0.4));\n        col = mix(col, col_grey(0.0), 0.8*smoothstep(0.12,0.,f));\n        col = mix(col, col_grey(0.025), 0.8*step(f-0.05,0.)*step(-0.35,pos_box.y-uvworld.y));\n        col = mix(col, vec4(0.6, 0.4, 0.2, 0), 1.0*step(f-0.05,0.)*step(0.35,uvworld.y-pos_box.y));\n        col += col_grey(0.3)*step(f-0.05,0.)*smoothstep(0.0,0.1,f);  \n        \n        //A preview subwindow\n        vec2 uvnode = fract(8.*(uvworld-pos_box)+5.1*vec2(0.1,0.2)*iTime);\n        f = sdBox(uvworld-pos_box - vec2(0.,-0.05),vec2(0.25, 0.25));\n        col = mix(col,vec4(uvnode,0,0),step(f,0.01));\n        \n        \n        //print node name\n        {\n            vec4 O = vec4(0.0);\n            float FontSize = 6.;\n            vec2 position = vec2(-0.35,0.35);\n            vec2 U = ( uvworld - pos_box - position)*64.0*vec2(1.,1.)/FontSize;\n            C(16);C(33);C(46);C(46);C(37);C(50);\n            col = mix(col,col_grey(1.),0.75*O.x); \n            \n        }\n    }\n   \n   \n    //for debug\n    //{\n    //    vec4 number = printNumber(uv,100.0,4,1);\n    //    col = mix(col,number.xxxx,number.x);\n    //}\n    \n    float gamma = 1.;\n    col.x = pow(col.x,gamma);\n    col.y = pow(col.y,gamma);\n    col.z = pow(col.z,gamma);\n    \n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}