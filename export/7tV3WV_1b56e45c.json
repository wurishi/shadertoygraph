{"ver":"0.1","info":{"id":"7tV3WV","date":"1638390790","viewed":302,"name":"polyrhythms","username":"Three","description":"you can think of a major chord as a 4:5:6 polyrhythm because of the ratios of the chord\na major third has a ratio of 5/4 to its root so if the root has a frequency of 4 the major third would have a frequency of 5","likes":5,"published":1,"flags":8,"usePreview":0,"tags":["gpuaudio"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define GREEN vec3(0,1,0)\n#define BLUE vec3(0,0,1)\n#define RED vec3(1,0,0)\n#define WHITE vec3(1,1,1)\n#define BLACK vec3(0,0,0)\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord/iResolution.xy - 0.5) * vec2(X_AXIS_SCALE,Y_AXIS_SCALE);\n\n    float a = 1.0;\n    vec3 vColour;\n    \n    if(abs(uv.x) <= Y_AXIS_LIMIT * 0.5) vColour = BLUE;\n    if(abs(uv.y) <= X_AXIS_LIMIT) vColour = GREEN;\n\n    uv.x += iTime * 1.0/ROOT;\n\n\n    float amplitude = getAmplitude(uv.x);\n    float amplitudeDeriv = getAmplitudeDerivative(uv.x);\n    //https://iquilezles.org/articles/distance\n    \n    float something = abs(amplitude-uv.y);// / sqrt(1.0+pow(amplitudeDeriv,2.0));\n    \n    vColour = mix(RED,vColour,something * 2.0);\n    \n  \n  \n    if(DEBUG_PERIODS)\n    {\n        float cycle = getCycle(uv.x); \n        if(abs(cycle) <= LIMIT_2)\n        {\n            vColour = WHITE;\n        }\n    }\n    \n\n    if(DEBUG_PERIOD_END && isCycleEnd(uv.x) && abs(amplitude) < DEBUG_LIMIT){vColour = WHITE;}\n    \n    fragColor = vec4(vColour,1);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//base frequency\n#define ROOT 440.0\n\n#define VOLUME 0.01\n\n//change this to zoom in and out\n//useful when changing the base frequency\n#define X_AXIS_SCALE 0.005\n#define Y_AXIS_SCALE 10.0\n\n//change these to influence the thickness of the lines \n//useful when zooming in/out\n#define SIN_LIMIT 0.1\n#define LIMIT_2 0.005\n#define X_AXIS_LIMIT 0.1\n#define Y_AXIS_LIMIT 0.00005\n\n//debug shows how regular the chord/polyrhythm \n//a 4:5:6 polyrhythm has the least common multiple 60\n//so it takes the polyrhythm 15 cycles of the root to get back in phase\n#define DEBUG_PERIOD_END false\n#define DEBUG_PERIODS false\n\n#define DEBUG_LIMIT 0.1\n\n\n//change this to hear sine/polyrhythm\nbool polyrhythm = false;\n\n//change the following to change the chord/polyrhythm\n//by default it plots a major chord with octave\nbool hasRoot =       true;\nbool hasMinSecond =  false;\nbool hasMajSecond =  false;\nbool hasMinThird =   false;\nbool hasMajThird =   true;\nbool hasFourth =     false;\nbool hasTritone =    false;\nbool hasFifth =      true;\nbool hasMinSixth =   false;\nbool hasMajSixth =   false;\nbool hasMinSeventh = false;\nbool hasMajSeventh = false;\nbool hasOctave =     true;\n\n//just intonation ratios \n#define MINSECOND 16.0/15.0 * ROOT\n#define MAJSECOND 9.0/8.0 * ROOT\n#define MINTHIRD 6.0/5.0 * ROOT\n#define MAJTHIRD 5.0/4.0 * ROOT\n#define FOURTH 4.0/3.0 * ROOT\n#define TRITONE 45.0/32.0 * ROOT\n#define FIFTH 3.0/2.0 * ROOT\n#define MINSIXTH 8.0/5.0 * ROOT\n#define MAJSIXTH 5.0/3.0 * ROOT\n#define MINSEVENTH 7.0/4.0 * ROOT\n#define MAJSEVENTH 15.0/8.0 * ROOT\n#define OCTAVE 2.0 * ROOT\n\n//constants\n#define PI            3.14159265359\n#define TWO_PI        6.28318530718\n#define FOUR_PI       12.56637061436\n#define INV_PI        0.31830988618\n#define INV_TWO_PI    0.15915494309\n#define INV_FOUR_PI   0.07957747155\n#define HALF_PI       1.57079632679\n#define INV_HALF_PI   0.636619772367\n\nfloat getAmplitude(float a) {\n    float root = sin(ROOT * a * TWO_PI);\n    float minSecond = sin(MINSECOND * a * TWO_PI);\n    float majSecond = sin(MAJSECOND * a * TWO_PI);\n    float minThird = sin(MAJTHIRD * a * TWO_PI);\n    float majThird = sin(MAJTHIRD * a * TWO_PI);\n    float fourth = sin(FOURTH * a * TWO_PI);\n    float tritone = sin(TRITONE * a * TWO_PI);\n    float fifth = sin(FIFTH * a * TWO_PI);\n    float minSixth = sin(MINSIXTH * a * TWO_PI);\n    float majSixth = sin(MAJSIXTH * a * TWO_PI);\n    float minSeventh = sin(MINSEVENTH * a * TWO_PI);\n    float majSeventh = sin(MAJSEVENTH * a * TWO_PI);\n    float octave = sin(OCTAVE * a * TWO_PI);\n    \n    \n\n    float amplitude;\n    amplitude += hasRoot ? root : 0.0;   \n    amplitude += hasMinSecond ? minSecond : 0.0;\n    amplitude += hasMajSecond ? majSecond : 0.0;\n    amplitude += hasMinThird ? minThird : 0.0;\n    amplitude += hasMajThird ? majThird : 0.0;\n    amplitude += hasFourth ? fourth : 0.0;\n    amplitude += hasTritone ? tritone : 0.0;\n    amplitude += hasFifth ? fifth : 0.0;\n    amplitude += hasMinSixth ? minSixth : 0.0;\n    amplitude += hasMajSixth ? majSixth : 0.0;\n    amplitude += hasMinSeventh ? minSeventh : 0.0;\n    amplitude += hasMajSeventh ? majSeventh : 0.0;\n    amplitude += hasOctave ? octave : 0.0;\n    \n    \n    \n    return amplitude;\n}\n\n\nfloat getAmplitudeDerivative(float a) {\n    float root =       ROOT       * TWO_PI * cos(ROOT       * TWO_PI * a);\n    float minSecond =  MINSECOND  * TWO_PI * cos(MINSECOND  * TWO_PI * a);\n    float majSecond =  MAJSECOND  * TWO_PI * cos(MAJSECOND  * TWO_PI * a);\n    float minThird =   MAJTHIRD   * TWO_PI * cos(MAJTHIRD   * TWO_PI * a);\n    float majThird =   MAJTHIRD   * TWO_PI * cos(MAJTHIRD   * TWO_PI * a);\n    float fourth =     FOURTH     * TWO_PI * cos(FOURTH     * TWO_PI * a);\n    float tritone =    TRITONE    * TWO_PI * cos(TRITONE    * TWO_PI * a);\n    float fifth =      FIFTH      * TWO_PI * cos(FIFTH      * TWO_PI * a);\n    float minSixth =   MINSIXTH   * TWO_PI * cos(MINSIXTH   * TWO_PI * a);\n    float majSixth =   MAJSIXTH   * TWO_PI * cos(MAJSIXTH   * TWO_PI * a);\n    float minSeventh = MINSEVENTH * TWO_PI * cos(MINSEVENTH * TWO_PI * a);\n    float majSeventh = MAJSEVENTH * TWO_PI * cos(MAJSEVENTH * TWO_PI * a);\n    float octave =     OCTAVE     * TWO_PI * cos(OCTAVE     * TWO_PI * a);\n    \n    \n\n    float amplitude;\n    amplitude += hasRoot       ? root       : 0.0;   \n    amplitude += hasMinSecond  ? minSecond  : 0.0;\n    amplitude += hasMajSecond  ? majSecond  : 0.0;\n    amplitude += hasMinThird   ? minThird   : 0.0;\n    amplitude += hasMajThird   ? majThird   : 0.0;\n    amplitude += hasFourth     ? fourth     : 0.0;\n    amplitude += hasTritone    ? tritone    : 0.0;\n    amplitude += hasFifth      ? fifth      : 0.0;\n    amplitude += hasMinSixth   ? minSixth   : 0.0;\n    amplitude += hasMajSixth   ? majSixth   : 0.0;\n    amplitude += hasMinSeventh ? minSeventh : 0.0;\n    amplitude += hasMajSeventh ? majSeventh : 0.0;\n    amplitude += hasOctave     ? octave     : 0.0;\n    \n    \n    \n    return amplitude;\n}\n\n//this function will return 0 at the end of any of the chords half cycles\nbool isCycleEnd(float a) {\n    float root = abs(sin(ROOT * a * TWO_PI));\n    float minSecond = abs(sin(MINSECOND * a * TWO_PI));\n    float majSecond = abs(sin(MAJSECOND * a * TWO_PI));\n    float minThird = abs(sin(MAJTHIRD * a * TWO_PI));\n    float majThird = abs(sin(MAJTHIRD * a * TWO_PI));\n    float fourth = abs(sin(FOURTH * a * TWO_PI));\n    float tritone = abs(sin(TRITONE * a * TWO_PI));\n    float fifth = abs(sin(FIFTH * a * TWO_PI));\n    float minSixth = abs(sin(MINSIXTH * a * TWO_PI));\n    float majSixth = abs(sin(MAJSIXTH * a * TWO_PI));\n    float minSeventh = abs(sin(MINSEVENTH * a * TWO_PI));\n    float majSeventh = abs(sin(MAJSEVENTH * a * TWO_PI));\n    float octave = abs(sin(OCTAVE * a * TWO_PI));\n    \n    if(hasRoot && root > DEBUG_LIMIT) return false;\n    if(hasMinSecond && minSecond > DEBUG_LIMIT) return false;\n    if(hasMajSecond && majSecond > DEBUG_LIMIT) return false;\n    if(hasMinThird && minThird > DEBUG_LIMIT) return false;\n    if(hasMajThird && majThird > DEBUG_LIMIT) return false;\n    if(hasFourth && fourth > DEBUG_LIMIT) return false;\n    if(hasTritone && tritone > DEBUG_LIMIT) return false;\n    if(hasFifth && fifth > DEBUG_LIMIT) return false;\n    if(hasMinSixth && minSixth > DEBUG_LIMIT) return false;\n    if(hasMajSixth && majSixth > DEBUG_LIMIT) return false;\n    if(hasMinSeventh && minSeventh > DEBUG_LIMIT) return false;\n    if(hasMajSeventh && majSeventh > DEBUG_LIMIT) return false;\n    if(hasOctave && octave > DEBUG_LIMIT) return false;\n    return true;\n}\n\n//this function will return 0 at the end of any of the chords half cycles \nfloat getCycle(float a) {\n    float root = sin(ROOT * a * TWO_PI);\n    float minSecond = sin(MINSECOND * a * TWO_PI);\n    float majSecond = sin(MAJSECOND * a * TWO_PI);\n    float minThird = sin(MAJTHIRD * a * TWO_PI);\n    float majThird = sin(MAJTHIRD * a * TWO_PI);\n    float fourth = sin(FOURTH * a * TWO_PI);\n    float tritone = sin(TRITONE * a * TWO_PI);\n    float fifth = sin(FIFTH * a * TWO_PI);\n    float minSixth = sin(MINSIXTH * a * TWO_PI);\n    float majSixth = sin(MAJSIXTH * a * TWO_PI);\n    float minSeventh = sin(MINSEVENTH * a * TWO_PI);\n    float majSeventh = sin(MAJSEVENTH * a * TWO_PI);\n    float octave = sin(OCTAVE * a * TWO_PI);\n    \n    \n    float cycle = 1.0;\n    cycle *= hasRoot ? root : 1.0;   \n    cycle *= hasMinSecond ? minSecond : 1.0;\n    cycle *= hasMajSecond ? majSecond : 1.0;\n    cycle *= hasMinThird ? minThird : 1.0;\n    cycle *= hasMajThird ? majThird : 1.0;\n    cycle *= hasFourth ? fourth : 1.0;\n    cycle *= hasTritone ? tritone : 1.0;\n    cycle *= hasFifth ? fifth : 1.0;\n    cycle *= hasMinSixth ? minSixth : 1.0;\n    cycle *= hasMajSixth ? majSixth : 1.0;\n    cycle *= hasMinSeventh ? minSeventh : 1.0;\n    cycle *= hasMajSeventh ? majSeventh : 1.0;\n    cycle *= hasOctave ? octave : 1.0;\n    \n        \n    return cycle;\n}\n\nvec2 kick(float time, float freq) \n{\n    float tm = mod(time, 1./freq);\n\tfloat phase = mod(freq * time, 1.0);\n\n    if (polyrhythm)\n\t{\n\t\tphase = tm;\n\t}\n\n    float k = sin(phase * TWO_PI);\n\treturn vec2(k,k) * VOLUME;\n\n}\n\nvec2 wave(float time) {\n    vec2 sound;\n    sound = hasRoot ? kick(time,ROOT) : vec2(0.0,0.0);\n    sound += hasMinSecond ? kick(time,MINSECOND) : vec2(0.0,0.0);\n    sound += hasMajSecond ? kick(time,MAJSECOND) : vec2(0.0,0.0);\n    sound += hasMinThird ? kick(time,MINTHIRD) : vec2(0.0,0.0);\n    sound += hasMajThird ? kick(time,MAJTHIRD) : vec2(0.0,0.0);\n    sound += hasFourth ? kick(time,FOURTH) : vec2(0.0,0.0);\n    sound += hasTritone ? kick(time,TRITONE) : vec2(0.0,0.0);\n    sound += hasFifth ? kick(time,FIFTH) : vec2(0.0,0.0);\n    sound += hasMinSixth ? kick(time,MINSIXTH) : vec2(0.0,0.0);\n    sound += hasMajSixth ? kick(time,MAJSIXTH) : vec2(0.0,0.0);\n    sound += hasMinSeventh ? kick(time,MINSEVENTH) : vec2(0.0,0.0);\n    sound += hasMajSeventh ? kick(time,MAJSEVENTH) : vec2(0.0,0.0);\n    sound += hasOctave ? kick(time,OCTAVE) : vec2(0.0,0.0);\n    return sound;\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[],"code":"vec2 mainSound( in int samp, float time ) {\n    return wave(time);\n}","name":"Sound","description":"","type":"sound"}]}