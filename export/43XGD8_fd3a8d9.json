{"ver":"0.1","info":{"id":"43XGD8","date":"1707382210","viewed":27,"name":"TP1 Broillet Virgile","username":"Virgile1301","description":"TP1","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["tp1lifgraphique"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Broillet Virgile TP1\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(vec2 m,vec2 p,out vec3 ro,out vec3 rd)\n{\n  float a=3.*3.14*m.x;\n  float le=3.5;\n  \n  // Origin\n  ro=vec3(27.,70.,0.);\n  ro*=Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(12.,30.,4.); // modifier les coordon√©es pour changer la vue\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  rd=normalize(p.x*u+p.y*v+le*w);\n}\n\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n  return min(a,b);\n}\n\nfloat Inter(float a, float b){\n    return max(a,b);\n}\n\nfloat Diff(float a, float b){\n    return max(a, -b);\n}\n\n// Transformations\n\n// Rotation\n// p: point\n// ax: axis\n// angle: rotation angle \nvec3 Rotate(vec3 p, vec3 ax, float angle)\n{\n    float c = cos(angle);\n    float s = sin(angle);\n    float t = 1.0 - c;\n    \n    // creation of a 3*3 rotation matrix\n    mat3 rotationMatrix = mat3(\n        t * ax.x * ax.x + c, t * ax.x * ax.y - s * ax.z, t * ax.x * ax.z + s * ax.y,\n        t * ax.x * ax.y + s * ax.z, t * ax.y * ax.y + c,     t * ax.y * ax.z - s * ax.x,\n        t * ax.x * ax.z - s * ax.y, t * ax.y * ax.z + s * ax.x, t * ax.z * ax.z + c\n    );\n\n    return rotationMatrix * p;\n}\n\n// Translation\n// p: point\n// translation: translation vector\nvec3 Translate(vec3 p, vec3 translation)\n{\n    return p + translation;\n}\n\n// Homotethy\n// p: point\n// HomotethyFac: Scalling vector\nvec3 Homotethy(vec3 p, vec3 HomotethyFac)\n{\n    return p * HomotethyFac;\n}\n\n// Primitives\n\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\nfloat Sphere(vec3 p,vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n// Plan\n// p : point\n// c : center of skeleton\n// n : normalise\n\nfloat Plan(vec3 p, vec3 c, vec3 n){\n    return dot(p-c,n);\n}\n\n// Half-Sphere\n//p : point\n//c : center of skeleton\n//r : radius\n//n : normalise\n\nfloat HSphere(vec3 p, vec3 c, float r, vec3 n){\n    return Inter(Sphere(p, c, r), Plan(p, c, n));\n}\n\n// Box (could be a cube orr a rectangle)\n// p: point\n// c: center of the box\n// r: radius\n// x: length of the box\n// y: width of the box\n// z: height of the box\nfloat Box(vec3 p, vec3 c, float r, float x, float y, float z)\n{\n  vec3 p1 = c + vec3(r+x,0,0);\n  vec3 p2 = c + vec3(-r-x,0,0);\n  vec3 p3 = c + vec3(0,r+y,0);\n  vec3 p4 = c + vec3(0,-r-y,0);\n  vec3 p5 = c + vec3(0,0,r+z);\n  vec3 p6 = c + vec3(0,0,-r-z);\n  float plan1 = Plan(p, p1, vec3(1.,0,0));\n  float plan2 = Plan(p, p2, vec3(-1.,0,0));\n  float plan3 = Plan(p, p3, vec3(0,1.,0));\n  float plan4 = Plan(p, p4, vec3(0,-1.,0));\n  float plan5 = Plan(p, p5, vec3(0,0,1.));\n  float plan6 = Plan(p, p6, vec3(0,0,-1.));\n  \n  float v = Inter(plan6,Inter(plan5,Inter(plan4,Inter(plan3,Inter(plan1,plan2)))));\n  \n  return v;\n  \n}\n\n//tore\n// p : point\n// r : \nfloat Tore(vec3 p , vec2 r ){\n    float x =length(p.xz)-r.x;\n    return length(vec2(x,p.y))-r.y;\n}\n\n// Segment\n// p : point\n// a,b: points\nfloat Segment(vec3 p, vec3 a, vec3 b) {\n    vec3 ba = b - a;\n    vec3 pa = p - a;\n    float t = dot(pa, ba) / dot(ba, ba);\n    vec3 c = ba * clamp(t, 0.0, 1.0);\n    return length(pa - c);\n}\n\n// Capsule\n// p : point\n// a : point\n// r : radius\nfloat Capsule(vec3 p, vec3 a, vec3 b, float r) {\n\n    return Segment(p, a, b)-r;\n}\n\n// Cylinder\n// p : point\n// r : radius\nfloat Cylinder(vec3 p, vec3 a, vec3 b, float r) {\n\n    float v = Diff(Capsule(p, a, b, r),dot(p-b, normalize(a-b)));\n\n    v = Diff(v, dot(p-a, normalize(b-a)));\n    return v;\n}\n\n//pyramide base carre\n// h : hauteur \n// \nfloat Pyramide (vec3 p, vec3 c, float h, float epx, float epy, float epz)\n{\n    float v = max(Plan(p,c, vec3(0., h, dot(h, epx))), \n              max(Plan(p,c, vec3(0., -h, dot(h, epx))),\n              max(Plan(p,c, vec3(h, 0., dot(h, epy))),\n              max(Plan(p,c, vec3(-h, 0., dot(h, epy))),\n                  Plan(p, vec3(0, 0, epz),vec3(0, 0, -1))))));\n              \n    return v;\n}\n\n// Disk \n// p : point\n// c : center of the disk\n// r : radius\nfloat Disk(vec3 p, vec3 bottom, vec3 top,float r)\n{\n    return Cylinder(p, bottom, top, r);\n}\n\n//Colomn creates threes colomns for the begining of the temple\n//p: point\n//r: radius\nfloat Colomn(vec3 p, vec3 a, vec3 b, float r){\n\n    float cyl0 = Cylinder(p, vec3(a.x+15., a.y, a.z), vec3(b.x+15., b.y, b.z), r);\n    float cyl1 = Cylinder(p, vec3(a.x+12.5, a.y, a.z), vec3(b.x+12.5, b.y, b.z), r);\n    float cyl2 = Cylinder(p, vec3(a.x+10., a.y, a.z), vec3(b.x+10., b.y, b.z), r);\n    float cyl3 = Cylinder(p, vec3(a.x+7.5, a.y, a.z), vec3(b.x+7.5, b.y, b.z), r);\n    float cyl4 = Cylinder(p, vec3(a.x+5., a.y, a.z), vec3(b.x+5., b.y, b.z), r);\n    float cyl5 = Cylinder(p, vec3(a.x+2.5, a.y, a.z), vec3(b.x+2.5, b.y, b.z), r);\n    float cyl6 = Cylinder(p, vec3(a.x, a.y, a.z), vec3(b.x, b.y, b.z), r);\n    float cyl7 = Cylinder(p, vec3(a.x-2.5, a.y, a.z), vec3(b.x-2.5, b.y, b.z), r);\n    float cyl8 = Cylinder(p, vec3(a.x-5., a.y, a.z), vec3(b.x-5., b.y, b.z), r);\n    \n    float BigColomn0 = Cylinder(p, vec3(a.x+5., a.y-5., a.z+10.), vec3(b.x+5., b.y-6., b.z+9.), r+0.2);\n    float BigColomn1 = Cylinder(p, vec3(a.x+8.5, a.y-8., a.z+10.), vec3(b.x+7.5, b.y-8., b.z+9.), r+0.2);\n    float BigColomn2 = Cylinder(p, vec3(a.x+1.5, a.y-8., a.z+10.), vec3(b.x+2.5, b.y-8., b.z+9.), r+0.2);\n    float BigColomn3 = Cylinder(p, vec3(a.x+5., a.y-12., a.z+10.), vec3(b.x+5., b.y-11., b.z+9.), r+0.2);\n\n\n   \n    return Union(Union(Union(Union(Union(Union(Union(Union(Union(Union(Union(Union( BigColomn3, BigColomn2), BigColomn1), BigColomn0), cyl8), cyl6), cyl7),cyl4), cyl5) ,cyl0), cyl1), cyl2), cyl3);\n\n}\n\n// Forest Tree\n// p : point\n// c : center of the tree\n// EndC : high of the cylinder\n// bottom : z of the bottom of the leaf\n// top : z of the top of the leaf\n// radius radius of the disk for the leaf\nfloat ForestTree(vec3 p, vec3 baseC, float EndC, float bottom, float top, float radius){\n    float trunk = Cylinder(p, vec3(baseC.x, baseC.y, baseC.z), vec3(baseC.x, baseC.y, EndC), 1.);\n    float leaf =0.;\n    float result = trunk;\n    \n    for(int i=0;i<10;i++)\n    {\n         leaf = Disk(p, vec3(baseC.x,baseC.y,bottom+(2.*float (i))), vec3(baseC.x,baseC.y,top+(2.*float (i))), radius-(0.5*float (i)));     \n         result = Union(result, leaf);\n\n    }\n    \n    return result;\n}\n\n//Forest\n//p : point\n//nb : number of forest tree\nfloat Forest(vec3 p){\n    float tree0 = ForestTree(p, vec3(-14.0,10.0,-11.0), 14.5, -5.0, -4.0, 6.);\n    float tree1 = ForestTree(p, vec3(25.0,10.0,-11.0), 6., -8.0, -7.0, 4.);\n    float tree2 = ForestTree(p, vec3(-20.0,30.0,-11.0), 15.5, -5.0, -4.0, 7.);\n    float tree3 = ForestTree(p, vec3(-10.0,-15.0,-11.0), 15.5, -5.0, -4.0, 7.);\n    float tree4 = ForestTree(p, vec3(22.0,-11.0,-11.0), 15.5, -5.0, -4.0, 7.);\n    \n    \n    \n    return Union(Union(Union(Union(tree4, tree3), tree2),tree1), tree0);\n}\n\n// Create Fences on the 9 colomns building\n//p :point\n//cBody: center of the body\n//FBar: Fisrt bar\n//MBar: Middle bar\n//LBar: Last Bar\n//LSphere: Sphere on the left of the body\n//RSphere: Sphere on the right of the body\n//h :hight of the fence\nfloat Fence(vec3 p, vec3 cBody, vec3 FBar, vec3 MBar, vec3 LBar, vec3 LSphere, vec3 RSphere, float h){\n    \n    vec3 PointRotate =  Rotate(vec3(p.x,p.y,p.z), vec3(0.0,0.0,1.0), 1.570796326795);\n    \n    float LeftSphere = Sphere(p, LSphere, 0.5);\n    float RightSphere = Sphere(p, RSphere, 0.5);\n    float bar0 = Box(p, FBar, 3., -2.8, -2.8, h);\n    float bar1 = Box(p, MBar, 3., -2.8, -2.8, h);\n    float bar2 = Box(p, LBar, 3., -2.8, -2.8, h);\n    \n    float bars = Union(Union(bar0, bar1), bar2);\n    \n    float body0 = Union(bars, Diff(Box(PointRotate, cBody, 3., -2.7, 0., h), \n                    Box(PointRotate, cBody, 2.5, 1., -0.1, h*0.9)));    \n        \n        \n    float fence = Union(Union(body0, RightSphere), LeftSphere);\n    \n    return fence;\n}\n\n//Planet earth composed of continents\n// p: point\n// c: center of the earth\nfloat PlanetEarth(vec3 p, vec3 c)\n{\n    float Planet = Sphere(vec3(p.x-4.95, p.y+8.5, p.z-20.), c, 8.);\n    float NorthAM = Box(Rotate(vec3(p.x-9., p.y+8.5, p.z-24.), vec3(0.0,1.0,0.0), 0.7853981633974), c, 2.3, 0., 1., 0.);\n    float Mexico = Box(Rotate(vec3(p.x-12., p.y+9.5, p.z-21.), vec3(0.0,1.0,0.25), 1.5), c, 1., 1., 0., 0.);\n    float SouthAM = Box(Rotate(vec3(p.x-10.5, p.y+8.5, p.z-18.), vec3(0.0,1.0,0.10), -1.1), c, 2., 1.5, 0., 0.);\n    float Europe = Box(Rotate(vec3(p.x-5., p.y+3., p.z-24.), vec3(1.0,0.0,0.10), 0.5), c, 0.2, 1.5, 1.5, 1.5);\n    float AfricaPt1 = Box(Rotate(vec3(p.x-5.5, p.y+2.2, p.z-20.5), vec3(1.0,0.0,0.10), -0.1), c, 0.3, 2.5, 1.5, 1.5);\n    float AfricaPt2 = Box(Rotate(vec3(p.x-4.5, p.y+2.4, p.z-18.5), vec3(1.0,0.0,0.10), -0.1), c, 0.3, 1.5, 1.5, 2.5);\n    float Russia = Box(Rotate(vec3(p.x-1.5, p.y+7., p.z-25.), vec3(0.0,1.0,-0.5), 0.78), c, 0.3, 1.5, 4.5, 2.5);\n    float Asia = Box(Rotate(vec3(p.x-1., p.y+7., p.z-21.), vec3(0.0,1.0,0.5), -0.), c, 0.3, 1.5, 4.5, 2.5);\n\n    \n    return Union(Union(Union(Union(Union(Union(Union(Union(Asia, Russia), AfricaPt2), AfricaPt1), Europe), SouthAM), Mexico), NorthAM), Planet);\n}\n\n// The Temple Structur\n//p : point\nfloat Temple(vec3 p){\n    float colomn = Colomn(p, vec3(0.0,0.0,3.5), vec3(0.0,0.0,-6.0), 0.5);\n    float BackBox = Box(p, vec3(5,-12.5,-2), 2., 8.7, 6., 3.);\n    float UpBox = Box(p, vec3(5,-10.,3), 0.5, 10., 10., 0.001);\n    float FloorBox = Box(p, vec3(5,-10.,-6.5), 0.5, 10., 10., 0.001);\n    float LastStep = Box(p, vec3(5,-10.,-7.2), 0.5, 10., 11., 0.001);\n    float MiddleStep = Box(p, vec3(5,-10.,-8.2), 0.5, 10., 12., 0.001);\n    float FirstStep = Box(p, vec3(5,-10.,-9.2), 0.5, 10., 13., 0.001);\n    // Using of the Rotate Function here 1.570796326795 is the radian of 90¬∞\n    float BorderSphere = Tore(Rotate(vec3(p.x-4.95, p.y+8.5, p.z-13.), vec3(1.0, 0.0, 0.0), 1.570796326795), vec2(4., 1.));\n    float PlanetEarth = PlanetEarth(p, vec3(0.0,0.0,0.0));\n    float fence0 = Fence(p, vec3(0,2.5,5), vec3(-1.2,0,5), vec3(-2.5,0,5), vec3(-3.8,0,5), vec3(0,0.,6.8), vec3(-5.2,0.,6.8), -1.6);\n    float fence1 = Fence(p, vec3(0,-2.5,5), vec3(3.9,0,5), vec3(2.6,0,5), vec3(1.3,0,5), vec3(5,0.,6.8), vec3(-0.1,0.,6.8), -1.6);\n    float fence2 = Fence(p, vec3(0,-7.5,5), vec3(9.,0,5), vec3(7.7,0,5), vec3(6.4,0,5), vec3(10,0.,6.8), vec3(5,0.,6.8), -1.6);\n    float fence3 = Fence(p, vec3(0,-12.5,5), vec3(14.1,0,5), vec3(12.8,0,5), vec3(11.5,0,5), vec3(15.2,0.,6.8), vec3(0,0.,6.8), -1.6);\n\n\n    float fences = Union(Union(Union(fence3, fence2), fence0), fence1);\n    \n    return Union(Union(Union(Union(Union(Union(Union(Union(Union(fences, PlanetEarth), BorderSphere), FirstStep), MiddleStep),LastStep), FloorBox), colomn), UpBox), BackBox);\n}\n\n// Potential field of the object\n// p : point\nfloat object(vec3 p)\n{\n  float box = Box(p, vec3(1.0,-1.0,-1.0), 2., 3., 3., 3.);\n  float cap = Capsule(p, vec3(0.0,0.0,0.0), vec3(10.0,10.0,10.0), 2.);\n  float sphere = Sphere(p, vec3(0.0,0.0,0.0), 4.);\n  float plan = Plan(p,vec3(0.,0.,-9.5),vec3(0.0,0.0,1.));\n  float HSphere = HSphere(p, vec3(0., 3., 3.), 2., vec3(0.0,0.0,1.));\n  float tore = Tore(p, vec2(3.0, 1.0));\n  float tree = ForestTree(p, vec3(-14.0,10.0,-11.0), 14.5, -5.0, -4.0, 6.);\n\n  \n  float trees = Forest(p);\n  \n  float temple = Temple(p);\n  float final = Union(Union(trees, temple), plan);\n  \n  return final;\n}\n\n// Analysis of the scalar field\n\nconst int Steps=200;// Number of steps\nconst float Epsilon=.01;// Marching epsilon\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  float v=object(p);\n  n.x=object(vec3(p.x+eps,p.y,p.z))-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z))-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps))-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o,vec3 u,float e,out bool h,out int s)\n{\n  h=false;\n  \n  // Start at the origin\n  float t=0.;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=o+t*u;\n    float v=object(p);\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Lighting\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),d.z*.5+.5);\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n  bool h;\n  int s;\n  float t=SphereTrace(p+Epsilon*n,l,100.,h,s);\n  if(!h)\n  {\n    return 1.;\n  }\n  return 0.;\n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p,vec3 n,vec3 e)\n{\n  // Point light\n  const vec3 lp=vec3(5.,10.,25.);\n  \n  // Light direction to point light\n  vec3 l=normalize(lp-p);\n  \n  // Ambient color\n  vec3 ambient=.25+.25*background(n);\n  \n  // Shadow computation\n  float shadow=Shadow(p,n,l);\n  \n  // Phong diffuse\n  vec3 diffuse=.35*clamp(dot(n,l),0.,1.)*vec3(1.,1.,1.);\n  \n  // Specular\n  vec3 r=reflect(e,n);\n  vec3 specular=.15*pow(clamp(dot(r,l),0.,1.),35.)*vec3(1.,1.,1.);\n  vec3 c=ambient+shadow*(diffuse+specular);\n  return c;\n}\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n  float t=float(n)/(float(Steps-1));\n  return.5+mix(vec3(.05,.05,.5),vec3(.65,.39,.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel,out bool pip)\n{\n  // Pixel coordinates\n  vec2 p=(-iResolution.xy+2.*pixel)/iResolution.y;\n  if(pip==true)\n  {\n    const float fraction=1./4.;\n    // Recompute pixel coordinates in sub-picture\n    if((pixel.x<iResolution.x*fraction)&&(pixel.y<iResolution.y*fraction))\n    {\n      p=(-iResolution.xy*fraction+2.*pixel)/(iResolution.y*fraction);\n      pip=true;\n    }\n    else\n    {\n      pip=false;\n    }\n  }\n  return p;\n}\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)\n{\n  // Picture in picture on\n  bool pip=true;\n  \n  // Pixel\n  vec2 pixel=Pip(pxy,pip);\n  \n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n  \n  // Camera\n  vec3 ro,rd;\n  Ray(m,pixel,ro,rd);\n  \n  // Trace ray\n  \n\n  // Hit and number of steps\n  bool hit;\n  int s;\n  \n  float t=SphereTrace(ro,rd,100.,hit,s);\n  \n  // Shade background\n  vec3 rgb=background(rd);\n  \n  if(hit)\n  {\n    // Position\n    vec3 p=ro+t*rd;\n    \n    // Compute normal\n    vec3 n=ObjectNormal(p);\n    \n    // Shade object with light\n    rgb=Shade(p,n,rd);\n  }\n  \n  // Uncomment this line to shade image with false colors representing the number of steps\n  if(pip==true)\n  {\n    rgb=ShadeSteps(s);\n  }\n  \n  color=vec4(rgb,1.);\n \n}","name":"Image","description":"","type":"image"}]}