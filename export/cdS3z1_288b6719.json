{"ver":"0.1","info":{"id":"cdS3z1","date":"1667196726","viewed":78,"name":"Fun Guy - Part one","username":"cetiniz","description":"Just part one of a tutorial series","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["shader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdSphere(in vec3 pos, float rad) {\n    return length(pos) - rad;\n}\n\nfloat sdStick(in vec3 p, vec3 a, vec3 b, float ra, float rb) {\n    vec3 ba = b-a;\n    vec3 pa = p-a;\n    \n    float h = clamp(dot(pa,ba)/dot(ba,ba), 0.0, 1.0);\n    float r = mix(ra,rb,h);\n    return length(pa-h*ba) - r;\n}\n\nfloat sdElipsoid(in vec3 pos, vec3 rad) {\n    float k0 = length(pos/rad);\n    float k1 = length(pos/rad/rad);\n    \n    return k0*(k0-1.0)/k1;\n}\n\nfloat smin(in float a, in float b, float k) {\n    float arg1 = k-abs(a-b);\n    float h = max(arg1, 0.0);\n    return min(a,b) - h*h/(k*4.0);\n}\n\nfloat smax(in float a, in float b, float k) {\n    float arg1 = k-abs(a-b);\n    float h = max(arg1, 0.0);\n    return max(a,b) + h*h/(k*4.0);\n}\n\n\nvec2 sdGuy(in vec3 pos) {\n    float t = fract(iTime);\n    float y = 4.0*t*(1.0-t);\n    float dy = 4.0*(1.0-2.0*t);\n    \n    vec2 u = vec2(1.0, dy);\n    vec2 v = vec2(-dy, 1.0);\n    \n    vec3 cen = vec3(0.0, y, 0.0);\n    \n    float sy = 0.5 + 0.5*y;\n    float sz = 1.0/sy;\n    \n    vec3 rad = vec3(0.25,0.25*sy,0.25*sz);\n    \n    vec3 q = pos - cen;\n    vec3 h = q;\n    vec3 sh = vec3(abs(h.x), h.yz);\n    \n    // q.xz = mat2(dot(u,q), dot(v,q));\n    \n    float d = sdElipsoid(q,rad);\n    \n    // head\n    float d2 = sdElipsoid(h - vec3(0.0, 0.28, 0.0),vec3(0.15, 0.2,0.23));\n    float d3 = sdElipsoid(h - vec3(0.0, 0.28, -0.1),vec3(0.23,0.2,0.2));\n    \n    d2 = smin(d2,d3,0.05);\n    d = smin(d,d2,0.15);\n    \n    // eyebrows\n    vec3 eb = sh - vec3(0.1, 0.35, 0.15);\n    eb.xy = (mat2(3,4,-4,3)/5.0)*eb.xy;\n    d2 = sdElipsoid(eb,vec3(0.06,0.035,0.05));\n    d = smin(d,d2,0.04);\n    \n    // mouth\n    d2 = sdElipsoid(h-vec3(0.0, 0.15 + 4.0*h.x*h.x, 0.15),vec3(0.1,0.04,0.2));\n    d = smax(d,-d2,0.03);\n    \n        \n    // ears\n    d2 = sdStick(sh, vec3(0.1,0.4,-0.01), vec3(0.2,0.55,0.02),0.02,0.05);\n    d = smin(d,d2, 0.03);\n    \n    vec2 res = vec2(d, 2.0);\n\n    \n    // eye\n    \n    float d4 = sdSphere(sh - vec3(0.08, 0.28, 0.16), 0.05);\n    if (d4 < d) {\n        res = vec2(d4, 3.0);\n    }\n    float d5 = sdSphere(sh - vec3(0.09, 0.28, 0.18), 0.02);\n    if (d5 < d) {\n        res = vec2(d5, 4.0);\n    }\n    \n    return res;\n}\n\nvec2 map(in vec3 pos) {\n    vec2 res = sdGuy(pos);\n    \n    float d2 = pos.y - (-0.25);\n    \n    if (d2 < res.x) {\n        res = vec2(d2, 1.0);\n    }\n    \n    return res;\n}\n\nfloat castShadow(in vec3 ro, vec3 rd) {\n    float res = 1.0;\n    float t = 0.001;\n    for (int i = 0; i < 100; ++i) {\n        vec3 pos = ro + t*rd;\n        float h = map(pos).x;\n        res = min(res, 16.0*h/t);\n        if (res < 0.0001) break;\n        t += h;\n        if (t > 20.0) break;\n    }\n    return clamp(res, 0.0, 1.0);\n}\n\nvec2 castRay(in vec3 ro, vec3 rd) {\n    float m = -1.0;\n    float t = 0.01;\n    for (int i = 0; i < 100; ++i) {\n        vec3 pos = ro + t*rd;\n\n        vec2 h = map(pos);\n        m = h.y;\n        if (h.x < 0.001) break;\n        t += h.x;\n        if (t > 20.0) break;\n    }\n    if (t > 20.0) t = -1.0;\n    return vec2(t,m);\n}\n\nvec3 calcNormal(in vec3 pos) {\n    vec2 e = vec2(0.0001, 0.0);\n    return normalize(vec3(map(pos+e.xyy).x-map(pos-e.xyy).x,\n                          map(pos+e.yxy).x-map(pos-e.yxy).x,\n                          map(pos+e.yyx).x-map(pos-e.yyx).x));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n    float an = 10.0*iMouse.x/iResolution.x;\n    \n    vec3 ta = vec3(0.0,0.95,0.0);\n    vec3 ro = ta + vec3(1.5*sin(an), 0.0, 1.5*cos(an));\n    \n    \n    vec3 ww = normalize(ta-ro);\n    vec3 uu = normalize(cross(ww,vec3(0,1,0)));\n    vec3 vv = normalize(cross(uu,ww));\n    \n    vec3 rd = normalize(p.x*uu + p.y*vv + 1.5*ww);\n\n    vec3 col = vec3(0.6, 0.7, 0.8) - 0.5*rd.y;\n\n    vec2 tm = castRay(ro, rd);\n    if (tm.y > 0.0) {\n        vec3 pos = ro + tm.x*rd;\n        vec3 nor = calcNormal(pos);\n\n        vec3 mate = vec3(0.18);\n        \n        if (tm.y < 1.5) {\n            mate = vec3(0.05,0.1,0.02);\n        } else if (tm.y < 2.5) {\n            mate = vec3(0.2,0.1,0.002);\n        } else if (tm.y < 3.5) {\n            mate = vec3(0.4,0.4,0.4);\n        } else if (tm.y < 4.5) {\n            mate = vec3(0.00,0.00,0.00);\n        }\n\n        vec3 sun_dir = normalize(vec3(0.8,0.4,0.2));\n        float sun_dif = clamp(dot(nor, sun_dir), 0.0, 1.0);\n        float sun_sha = castShadow(pos+nor*0.001,sun_dir);\n        float sky_dif = clamp(0.5 + 0.5*dot(nor, vec3(0.0, 1.0, 0.0)), 0.0, 1.0);\n        float bou_dif = clamp(0.5 + 0.5*dot(nor, vec3(0.0, -1.0, 0.0)), 0.0, 1.0);\n\n        col = mate*vec3(7.0, 4.5, 3.0) * sun_dif*sun_sha;\n        col += mate*vec3(0.5, 0.8, 0.9) * sky_dif;\n        col += mate*vec3(0.7, 0.3, 0.2) * bou_dif;\n    }\n    col = pow(col, vec3(0.4545));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}