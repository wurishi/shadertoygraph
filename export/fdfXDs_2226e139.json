{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"buffer","id":"XsXGR8","filepath":"/media/previz/buffer01.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"channel":1,"type":"texture","id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}},{"channel":2,"type":"webcam","id":"4sf3zn","filepath":"/presets/webcam.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"const float ITER = 6.0;\n\n\nfloat get_glow(vec2 uv, float strength)\n{\n    vec2 _stride = 4. / iResolution.xy;\n    \n    float glow = 0.0;\n    for (float i=0.0; i < ITER; ++i) {\n        vec2 stride = _stride * i;\n        glow += (ITER - i) * (\n            texture(iChannel0, uv + vec2( stride.x, 0.0)).r +\n            texture(iChannel0, uv + vec2(-stride.x, 0.0)).r +\n            texture(iChannel0, uv + vec2(0.0,  stride.y)).r +\n            texture(iChannel0, uv + vec2(0.0, -stride.y)).r\n        ) / ITER;\n    }\n    glow /= 3.;\n    \n    return min(glow, 1.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float original = texture(iChannel0, uv).r;\n    float glow = get_glow(uv, 0.3);\n    \n    vec3 col = vec3(glow, 0, glow);\n    col += original;\n    \n    fragColor = vec4(col,1.0);\n}\n\n\n\n\n\n\n\n\n\n","name":"Image","description":"","type":"image"},{"outputs":[{"channel":0,"id":"4dXGR8"}],"inputs":[],"code":"const float line_width = 0.5;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy - 0.5;\n    \n    float dist_x = abs(uv.x) - 0.2;\n    float dist_y = abs(uv.y) - 0.34;\n    \n    vec3 col = vec3(0);\n    \n    if ((abs(dist_x) < line_width*0.01 || abs(dist_y) < line_width*0.018) &&\n        (dist_x < line_width*0.01 && dist_y < line_width*0.018))\n    {\n        col = vec3(1);\n    }\n    \n    fragColor = vec4(col, 1);\n}","name":"Buffer A","description":"","type":"buffer"},{"outputs":[{"channel":0,"id":"XsXGR8"}],"inputs":[{"channel":0,"type":"webcam","id":"4sf3zn","filepath":"/presets/webcam.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 col;\n    \n    mat3 sobelX = mat3(-1.0, -2.0, -1.0,\n                       0.0,  0.0, 0.0,\n                       1.0,  2.0,  1.0);\n    mat3 sobelY = mat3(-1.0,  0.0,  1.0,\n                       -2.0,  0.0, 2.0,\n                       -1.0,  0.0,  1.0);\n    float sumX = 0.0;\n    float sumY = 0.0;\n    \n    for(int i = -1; i <= 1; i++) {\n        for(int j = -1; j <= 1; j++) {\n            float x = (fragCoord.x + float(i))/iResolution.x;\t\n    \t\tfloat y =  (fragCoord.y + float(j))/iResolution.y;\n            \n            sumX += length(texture(iChannel0, vec2(x, y)).xyz) * float(sobelX[1+i][1+j]);\n            sumY += length(texture(iChannel0, vec2(x, y)).xyz) * float(sobelY[1+i][1+j]);\n        }\n    }\n    float g = sqrt((sumX*sumX) + (sumY*sumY));\n    \n    if(g > 0.5) col = vec3(1.0,1.0,1.0);\n    else col = col * 0.0;\n    \n\tfragColor.xyz = col;\n}","name":"Buffer B","description":"","type":"buffer"}],"flags":{"mFlagVR":false,"mFlagWebcam":true,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":true,"mFlagMusicStream":false},"info":{"id":"fdfXDs","date":"1734268035","viewed":47,"name":"Glow.No.2","username":"avartation","description":"asdfg","likes":0,"published":1,"flags":34,"usePreview":0,"tags":["wertg"],"hasliked":0,"parentid":"","parentname":""}}