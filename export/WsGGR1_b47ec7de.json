{"ver":"0.1","info":{"id":"WsGGR1","date":"1569662517","viewed":420,"name":"Yin Yang Arc-length function","username":"srtuss","description":"see Common tab","likes":25,"published":1,"flags":0,"usePreview":0,"tags":["distancefield","math","curve","arclength"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// This tab is solely for rendering the functions.\n\n#define SMOOTH_SIZE (5. / iResolution.y)\n\nvec3 dfVisualize(float v)\n{\n    vec3 colorNegative = vec3(.2, .6, .6);\n    vec3 colorPositive = vec3(.6, .6, .2);\n    vec3 colorVoid = vec3(1, 1, 1);\n    \n    vec3 col = mix(\n        mix(colorNegative, colorPositive, step(0., v)),\n        colorVoid,\n        smoothstep(0., 0.3, min(abs(v), .23)));\n    col *= .3 + .7 * smoothstep(0., SMOOTH_SIZE, abs(fract(v * 10. + .5) -.5) / 10.);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n    \n    uv *= 1.8;\n    uv.y += iTime;\n    \n    float v = yinyangDots_surface(uv);\n    \n\tvec3 col = dfVisualize(v);    \n\n\tvec2 rs = vec2(yinyangCurve_surface(uv), yinyang_arcLength(uv));\n    \n    rs.y = fract(rs.y + iTime) - .5;\n    v = length(vec2(abs(rs.x), max(abs(rs.y) - .3, 0.))) - .05;\n    \n   \tcol = mix(col, vec3(.0, .0, .0), smoothstep(SMOOTH_SIZE, 0., v));\n    \n    col = sqrt(col);\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Created by srtuss; 2019-09-28\n//\n// Functions for computing the accurate distance-field and arc-length\n// of a Yin-Yang shaped curve. Might have to some interesting uses,\n// for animations or adding details to your scenes!\n//\n\n#define PI (3.1415926535897932384626433832795)\n\n// Distance-field function of just the curve, without the holes:\nfloat yinyangCurve_surface(vec2 uv)\n{\n    float k = step(0., uv.x) * 2.;\n    return (length(vec2(uv.x, mod(uv.y + k, 4.) - 2.)) - 1.) * (k - 1.);\n}\n\n// Distance-field function of the curve, with holes:\nfloat yinyangDots_surface(vec2 uv)\n{\n    float v = yinyangCurve_surface(uv);\n    float holeSize = .3;\n    uv.y = mod(uv.y + 1., 4.) - 1.;\n    return min(max(v, -length(uv) + holeSize), length(uv - vec2(0., 2.)) - holeSize);\n}\n\n// Arc-length function of the curve:\n// returns arc-length in radians\nfloat yinyang_arcLength(vec2 uv)\n{\n    float k = step(0., uv.x);\n    uv.y += k * 2.;\n    float id = floor(uv.y / 4. - 1.) * -2. + k - 3.5;\n   \tuv = vec2(uv.x * (k * 2. - 1.), mod(uv.y, 4.) - 2.);\n    return atan(uv.x, uv.y) + id * PI;\n}","name":"Common","description":"","type":"common"}]}