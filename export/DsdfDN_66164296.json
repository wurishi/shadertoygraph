{"ver":"0.1","info":{"id":"DsdfDN","date":"1730395778","viewed":28,"name":"sdf round box blur","username":"bluechu","description":"sdf round box blur\nhttps://raphlinus.github.io/graphics/2020/04/21/blurred-rounded-rects.html","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["boxblur"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Ref https://raphlinus.github.io/graphics/2020/04/21/blurred-rounded-rects.html\n\nconst vec2  b = vec2(512.0,256.0);\nconst float r = 0.0;\nconst float s = max(64.0,0.5);\n\nconst float min_edge = min(b.x,b.y); // min w or h\nconst float rmax = 0.5 * min_edge; // max r\n\nconst float r0 = min(length(vec2(r, s * 1.15)), rmax); // len\nconst float r1 = min(length(vec2(r, s * 2.0)), rmax);\n\nconst float n = 2.0 * r1 / r0;\nconst float n_inv = 1.0/n; // 1/exponent\nconst float s_inv = 1.0/s; // 1/s blur size reciprocal\n\nfloat erf(float x) {\n    float s = sign(x), a = abs(x);\n    x = 1.0 + (0.278393 + (0.230389 + 0.078108 * (a * a)) * a) * a;\n    x *= x; // x^2\n    return s - s / (x * x);\n}\n\nfloat sqLen(vec2 p) { // squircle length\n    vec2 q = max(p,0.0);\n    return pow(pow(q.x,n) + pow(q.y,n), n_inv);\n}\n\nvec2 sdf( in vec2 p, in vec2 b, in float r ) {\n    vec2 p1 = p - iResolution.xy * 0.5;\n    vec2 q = abs(p1) - b * 0.5;// + r;\n    //return min(max(q.x,q.y),0.0) + sqLen(q) - r;\n    return vec2(sqLen(q+r)-r, min(max(q.x,q.y),0.0));\n}\n\nvoid mainImage( out vec4 col, in vec2 u )\n{\n    float scale = 0.5;// * erf(s_inv * 0.5 * (max(b.x,b.y) - 0.5 * r));\n    vec2 d = sdf(u,b,r1);\n    float z = (erf(s_inv * (d.x + min_edge)) - erf(s_inv * d.x)) * scale;\n    col = vec4(z,0.0,0.0,1.0);\n\n    if (d.y < 0.0) {\n        col.b = 0.3;\n    }\n}\n","name":"Image","description":"","type":"image"}]}