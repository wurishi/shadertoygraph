{"ver":"0.1","info":{"id":"4XK3WW","date":"1717661386","viewed":74,"name":"Spotlight Integration","username":"ljbha007","description":"Attemp to approximate volumetric lighting","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["volumetric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// cone inscribed in a unit cube centered at 0\nbool cone(vec3 org, vec3 dir, out float near, out float far)\n{\n\t// scale and offset into a unit cube\n\tfloat s = 0.5;\n\torg.x *= s;\n\tdir.x *= s;\n\t\n\t// quadratic x^2 = y^2 + z^2\n\tfloat a = dir.y * dir.y + dir.z * dir.z - dir.x * dir.x;\n\tfloat b = org.y * dir.y + org.z * dir.z - org.x * dir.x;\n\tfloat c = org.y * org.y + org.z * org.z - org.x * org.x;\n\t\n\tfloat cap = (s - org.x) / dir.x;\n\t\n\t// linear\n\tif( a == 0.0 )\n\t{\n\t\tnear = -0.5 * c/b;\n\t\tfloat x = org.x + near * dir.x;\n\t\tif( x < 0.0 || x > s )\n\t\t\treturn false; \n\n\t\tfar = cap;\n\t\tfloat temp = min(far, near); \n\t\tfar = max(far, near);\n\t\tnear = temp;\n\t\treturn far > 0.0;\n\t}\n\n\tfloat delta = b * b - a * c;\n\tif( delta < 0.0 )\n\t\treturn false;\n\n\t// 2 roots\n\tfloat deltasqrt = sqrt(delta);\n\tfloat arcp = 1.0 / a;\n\tnear = (-b - deltasqrt) * arcp;\n\tfar = (-b + deltasqrt) * arcp;\n\t\n\t// order roots\n\tfloat temp = min(far, near);\n\tfar = max(far, near);\n\tnear = temp;\n\n\tfloat xnear = org.x + near * dir.x;\n\tfloat xfar = org.x + far * dir.x;\n\n\tif( xnear < 0.0 )\n\t{\n\t\tif( xfar < 0.0 || xfar > s )\n\t\t\treturn false;\n\t\t\n\t\tnear = far;\n\t\tfar = cap;\n\t}\n\telse if( xnear > s )\n\t{\n\t\tif( xfar < 0.0 || xfar > s )\n\t\t\treturn false;\n\t\t\n\t\tnear = cap;\n\t}\n\telse if( xfar < 0.0 )\n\t{\n\t\t// The apex is problematic,\n\t\t// additional checks needed to\n\t\t// get rid of the blinking tip here.\n\t\tfar = near;\n\t\tnear = cap;\n\t}\n\telse if( xfar > s )\n\t{\n\t\tfar = cap;\n\t}\n\t\n\treturn far > 0.0;\n}\n\nvoid transformray (vec3 ro, vec3 rd, mat2 rotationY, vec3 offset, out vec3 outro, out vec3 outrd)\n{\n\toutro = ro + offset;\n\toutro = vec3(rotationY * outro.xz, outro.y).xzy;\n\toutrd = vec3(rotationY * rd.xz, rd.y).xzy;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// camera\n\tvec2 q = fragCoord.xy/iResolution.xy;\n\tvec2 p = -1.0 + 2.0 * q;\n\tp.x *= iResolution.x/iResolution.y;\n\tvec3 camro = normalize(vec3(1.0, -0.1, 0.0));\n\tvec3 w = -camro;\n\tcamro *= 2.5;\n\tvec3 u = normalize(cross( vec3(0.0, 1.0, 0.0), w ));\n\tvec3 v = normalize(cross(w,u));\n\tvec3 camrd = normalize(p.x * u + p.y * v + 1.5 * w);\n\tfragColor = vec4(0.0);\n\t\n\t// rotation\n\tfloat angle = 5.0 * iMouse.x / iResolution.x;\n\tif( iMouse.z < 0.5 )\n\t\tangle = iTime + 4.7;\n\tfloat ca = cos(angle);\n\tfloat sa = sin(angle);\n\tmat2  m = mat2(ca, -sa, sa, ca);\n\t\n\tfloat far, near;\n\tvec3 ro, rd;\n\n\t// cone\n\ttransformray(camro, camrd, m, vec3(0, 0.0, 0), ro, rd);\n\tif (cone (ro, rd, near, far))\n    {\n        vec3 nearPoint = ro + rd * near;\n        vec3 farPoint = ro + rd * far;\n        float rox = ro.x;\n        float rdx = rd.x;\n        \n        // integrate 1 - x to -x^2 / 2 + x\n        //float integratedExtinction = ((nearX * nearX - farX * farX) * 0.5 + farX - nearX) * (far - near);\n        float opticalDepth = (1.0 - rox) * (far - near) - 0.5 * rdx * (far * far - near * near);\n        opticalDepth  = abs(opticalDepth);\n        \n        \n        float t0 = near;\n        float t1 = far;\n        float a = t1*t1 + t0*t1 +t0*t0;\n        float b = 3.0*t1 +3.0*t0;\n        float x0 = ro.x;\n        float x1 = rd.x;\n        float z0 = ro.z;\n        float z1 = rd.z;\n        float y0 = ro.y;\n        float y1 = rd.y;\n        float r = 0.5;\n        float temp0 = a * z1 * z1 + b * z0 * z1 + 3.0 * z0 * z0 + a * y1 * y1 + b * y0 * y1 + 3.0 * y0 * y0 -3.0*r*r;\n        float temp1 = -(t1-t0) / (3.0 * r*r);\n        opticalDepth *= temp1 * temp0;\n        \n        //fragColor = vec4(opticalDepth);\n\t\tfragColor += vec4(mix(1.0, 0.0, exp(- 2.0 * opticalDepth)));\n    }\n}","name":"Image","description":"","type":"image"}]}