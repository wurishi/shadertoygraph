{"ver":"0.1","info":{"id":"7df3zn","date":"1632823269","viewed":117,"name":"MAGIC BOX","username":"willis","description":"MAGIC BOX","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGRr","filepath":"/media/a/d96b229eeb7a08d53adfcf1ff89e54c9ffeebed193d317d1a01cc8125c0f5cca.mp3","previewfilepath":"/media/ap/d96b229eeb7a08d53adfcf1ff89e54c9ffeebed193d317d1a01cc8125c0f5cca.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define S(a, b, t) smoothstep(a, b, t)\n#define Sat(a) clamp(a, 0., 1.)\n\nvec3 objcol = vec3(0.);\nfloat ffd1 = 1., ffd2 = 1.;\n\nmat2 Rot(float a){\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat Octa(vec3 p, float s){\n    p = abs(p);\n    return (p.x + p.y + p.z - s) * 0.57735027;\n}\n\nfloat GetDist(vec3 p){\n    float t = (iTime*.3) + iMouse.x/iResolution.x;\n\n    p = vec3(p.xy * Rot(t), p.z);\n    p.yz *= Rot(t*0.5);\n    float r =  0.5;\n    \n    float l = S(0.2, 0.8, abs(sin(t))) + ffd1 * 0.2;\n   \n    vec3 op = p;\n    \n    op.zx *= Rot(t);\n    op.xy *= Rot(t*3.5);\n    op.yz *= Rot(t*2.2);\n    \n    p = abs(p) - l - r;\n    \n    \n    \n    float d = length(p) - r;\n    //d = max(d, Octa(p,0.6) );\n    \n    op = abs(op);\n    //d = min(d, min((length(op) - l * 0.3), Octa(op, l * r) ));\n\n    d = min(d,Octa(op, l * r));\n    \n    d = min(d, max(length(p.xz)-.1,p.y));\n    d = min(d, max(length(p.xy)-.1,p.z));\n    d = min(d, max(length(p.yz)-.1,p.x));\n    \n    //l = S(0.4, 0.8, abs(sin(t*0.2)));\n    \n    \n    //.yz *= Rot(t*3.);\n    \n    //op.xz *= Rot(op.y * .5);\n    \n    d = min(d, length(vec2(length(op.xz)-(l*4.*ffd1+2.), op.y)) - (l*0.01+0.1) );\n    d = min(d, Octa(op-r,0.2));\n    d = min(d, length(vec2(length(op.xy)-(l*3.*ffd1+2.), op.z) ) - (l*0.01+0.1));\n    //d = min(d, length(vec2(length(op.yz)-(l*2.+2.), op.x) ) - (l*0.01+0.1));\n    \n    \n    //q.xz *= Rot(0.1 * q.y);\n   \n    vec3 q = op;\n    q.xz *= Rot(q.y * 0.5);\n    q.xy *= Rot(t*0.5);\n    q.yz *= Rot(t*2.3);\n    \n    d = min(d, length(vec2(length(q.xy)-(l-r+0.8), q.z)) - (l*0.05+0.01));\n    d = min(d, length(vec2(length(q.yz)-(l-r+0.8), q.x)) - (l*0.05+0.01));\n    d = min(d, length(vec2(length(q.xz)-(l-r+0.8), q.y)) - (l*0.05+0.01));\n    \n    objcol += abs(op);\n    return d;\n}\n\nvec3 GetNormal(vec3 p){\n    vec2 e = vec2(0., .001);\n    return vec3(normalize(GetDist(p) - vec3(GetDist(p - e.yxx), GetDist(p - e.xyx),GetDist(p - e.xxy)) ));\n}\n\nfloat Hash21(vec2 p){\n    p = sin(p * vec2(135.11, 257.49));\n    float n = dot(p, p + 1237.56);\n    return fract(n * (p.x * p.y));\n}\n\nfloat march(vec3 ro, vec3 rd){\n    float d = 0.;\n    vec3 p = ro ;\n    for(int i=0; i<100; i++){\n        float d1 = GetDist(p);\n        d += d1;\n        p += rd * d1;      \n        if(d > 100. || d1 < 0.01) break;\n    }\n    return d;\n}\n\nfloat refMarch(vec3 ro, vec3 rd){\n    float d = 0.;\n    vec3 p = ro ;\n    for(int i=0; i<32; i++){\n        float d1 = GetDist(p);\n        d += d1;\n        p += rd * d1;      \n        if(d > 100. || d1 < 0.01) return d;\n    }\n    return 999.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy*.5)/iResolution.y;\n    float m = iMouse.x/iResolution.x;\n    vec3 col = vec3(0), bg = vec3(0);\n    vec3 ro = vec3(vec2(1,1) * Rot(iTime+m),-8), rd = normalize(vec3(uv,1));\n    ffd1 = texture(iChannel0, vec2(32. / 512., 0)).x * 0.5;\n    ffd2 = texture(iChannel0, vec2(1. / 512., 0)).x;\n    float d = march(ro, rd); //first pass\n    \n    if(d < 100.){\n        ro += d * rd;\n        col += objcol * 0.015;\n        \n        rd = reflect(rd, GetNormal(ro));\n        ro += rd ;\n        d = refMarch(ro, rd);  //second pass(reflection)\n        \n\n        if(d < 100.){\n            vec3 p = ro + rd * d;\n            vec3 refcol = Sat(dot(GetNormal(p), vec3(0., 0., -1.)) ) * objcol ;\n            col += refcol * 0.01;\n        }\n    }\n    else{ \n        bg = abs(uv.x) * vec3(0.3, 0.4, 0.2);\n        bg += (1.-(fragCoord/iResolution.xy).y) * vec3(0.3, 0.1, 0.4);\n        bg *= ffd2;\n    }\n    col += S(-5., 5., ro.z) * .2 + bg;\n    col = pow(col, vec3(2.2));\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}