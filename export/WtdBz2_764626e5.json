{"ver":"0.1","info":{"id":"WtdBz2","date":"1613079658","viewed":221,"name":"6-Minute Ray-Marcher","username":"Zi7ar21","description":"Speedrun 6-Minutes Ray-Marcher because I got done with my math test early and I had time to screw around","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["ray","raymarch","raymarcher","speedrun"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define camfov 1.0\n#define maxmarches 128U\n#define collisiondist 1e-2\n#define scenesize 32.0\n\nfloat DE(vec3 raypos){\n    return length(raypos)-0.5;\n}\n\nvec3 raymarch(vec3 raydir, vec3 raypos){\n    float distest;\n    for(uint i = 0U; i < maxmarches; i++){\n        distest = DE(raypos);\n        if(distest < collisiondist){return vec3(1.0);}\n        raypos += raydir*distest;\n        if(length(raypos) > scenesize){break;}\n    }\n    return vec3(0.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = 2.0*(fragCoord-0.5*iResolution.xy)/max(iResolution.x, iResolution.y);\n    mat3 rotmat = mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0);\n    vec3 raydir = normalize(camfov*(uv.x*rotmat[0]+uv.y*rotmat[1])+rotmat[2]);\n    fragColor = vec4(raymarch(raydir, vec3(0.0, 0.0, -2.0)), 1.0);\n}","name":"Image","description":"","type":"image"}]}