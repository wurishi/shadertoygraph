{"ver":"0.1","info":{"id":"NlSyzD","date":"1649243382","viewed":320,"name":"Real XOR divisibility animation","username":"orlp","description":"A real extension of XOR with a real extension of divisibility animated. Accompanies https://www.reddit.com/r/math/comments/txca2p/patterns_in_the_cartesian_plane_under_bitwise_xor/i3m1pn7/ .","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["math"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Number of bits to calculate for the binary fraction XOR.\n#define BINARY_FRAC_BITS 16.0\n\n// Range of the axes.\n#define AXIS_RANGE 64.0\n\n// Range of divisors to visualize.\n#define DIVISOR_START exp2(16.0)  // Acts as infinity.\n#define DIVISOR_STOP 1.0\n\n// Time for one loop of the animation in seconds.\n#define LOOP_TIME 300.0\n\n\nfloat xor(vec2 p) {\n    uint x = uint(p.x * exp2(BINARY_FRAC_BITS));\n    uint y = uint(p.y * exp2(BINARY_FRAC_BITS));\n    return float(x ^ y) * exp2(-BINARY_FRAC_BITS);\n}\n\nfloat smoothdiv(float p, float d) {\n    return abs(d - 2.0*mod(p, d))/d;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Square renderbox with coords [0, 1].\n    float min_dim = min(iResolution.x, iResolution.y);\n    vec2 offset = (iResolution.xy - vec2(min_dim)) / 2.0;\n    vec2 xy = (fragCoord.xy - offset) / min_dim;\n    vec2 bound_check = step(0.0, xy) - step(1.0, xy);\n    float is_in_bounds = bound_check.x * bound_check.y;\n    \n    float anim_frac = mod(iTime, LOOP_TIME) / LOOP_TIME;\n    float d = AXIS_RANGE / mix(AXIS_RANGE / DIVISOR_START, AXIS_RANGE / DIVISOR_STOP, anim_frac);\n    float plot = is_in_bounds * pow(smoothdiv(xor(xy * AXIS_RANGE), d), 4.0);\n    \n    float anim_bar = 0.0;\n    if (iResolution.x < iResolution.y) {\n        if (fragCoord.y <= 10.0 && fragCoord.x / iResolution.x < anim_frac) {\n            anim_bar += 1.0;\n        }\n    } else {\n        if (fragCoord.x <= 10.0 && fragCoord.y / iResolution.y < anim_frac) {\n            anim_bar += 1.0;\n        }\n    }\n    \n    fragColor = vec4(vec3(plot * is_in_bounds + anim_bar), 1);\n}","name":"Image","description":"","type":"image"}]}