{"ver":"0.1","info":{"id":"NdKXRR","date":"1729781759","viewed":59,"name":"maxwellEM","username":"stephenl7797","description":"simulating maxwell's equations in 2d.\nblue/red = pos/neg magnetic field in Z.\ngreen = electric field in XY sampled at center of grid.\nThis is really old and probably not physically accurate","likes":9,"published":1,"flags":32,"usePreview":0,"tags":["pde","em","maxwellequations"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst float S = 11.;\n\nfloat drawArrow(vec2 p, vec2 g, vec2 field, float maxMag) {\n    float mag = length(field) / maxMag;\n    float ang = atan(field.y, field.x);\n    float c = (0.);\n    \n    mat2 rot = mat2(cos(ang), -sin(ang), sin(ang), cos(ang));\n    \n    vec2 l = rot * (p - g - S/2.);\n    //if ((l.x-l.y) < 1. && (l.x-l.y) > -.1) c.r = 1.;\n    //l = (p-R*.5);\n    //if ((l.x-l.y) < 1. && (l.x-l.y) > -.1) c.r = 1.;\n    //float w = exp(- 16.*(abs(abs(l.x)-abs(l.y))-1.4)) * float(l.y<0.);\n    //c = exp(-length(l)) * .0001 * mag * w;\n    if (abs(abs(l.x)-abs(l.y)) < 1. && l.y<0.) c = mag;\n    \n    \n    //if ((l.y-l.x) < 1.) c.r = 1.;\n    //if (abs(-l.y-l.x) < 1.) c.r = 1.;\n    \n\n    return c;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 e = E(ivec2(fragCoord));\n    vec4 m = M(ivec2(fragCoord));\n\n    vec3 col = vec3(0.);\n    //col.g = texelFetch(iChannel0, ivec2(fragCoord), 0).y * .1 + .5;\n    //col.b = texelFetch(iChannel1, ivec2(fragCoord), 0).z * .1 + .5;\n    \n    #if 0\n    col.gb = e.xy * .4 + .5;\n    col.r = m.z * .4 + .5;\n    #else\n    vec2 g = floor(fragCoord*1./S)*S;\n    vec2 grid_e = E(ivec2(g + S/2.)).xy * .1;\n    vec2 grid_b = M(ivec2(g + S/2.)).xy * .1;\n    col.g = drawArrow(fragCoord, g, grid_e.xy, 1.);\n    col.b = clamp(m.z,0.,10.) * .21;\n    col.r = clamp(-m.z,0.,10.) * .21;\n    #endif\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Magnetic field.\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord / R;\n    \n    vec4 e = E(ivec2(fragCoord));\n    vec4 m = M(ivec2(fragCoord));\n\n    #if 0\n    vec2 e_n = E(ivec2(fragCoord)+ivec2(0,-1)).xy;\n    vec2 e_e = E(ivec2(fragCoord)+ivec2(1,0)).xy;\n    vec2 e_s = E(ivec2(fragCoord)+ivec2(0,1)).xy;\n    vec2 e_w = E(ivec2(fragCoord)+ivec2(-1,0)).xy;\n    \n    vec2 deltaB = (1./C) * (getCurrent(uv) + e.zw).yx;\n    \n    vec2 e_n = E(ivec2(fragCoord)+ivec2(0,-1)).xy;\n    vec2 e_e = E(ivec2(fragCoord)+ivec2(1,0)).xy;\n    vec2 e_s = E(ivec2(fragCoord)+ivec2(0,1)).xy;\n    vec2 e_w = E(ivec2(fragCoord)+ivec2(-1,0)).xy;\n    vec2 e_curl = curl21(e_n, e_e, e_s, e_w) * e.xy;\n    vec2 deltaB = -C * e_curl;\n    m.xyz  = deltaB;\n    #endif\n    \n    vec3 e_n = E(ivec2(fragCoord)+ivec2(0,-1)).xyz;\n    vec3 e_e = E(ivec2(fragCoord)+ivec2(1,0)).xyz;\n    vec3 e_s = E(ivec2(fragCoord)+ivec2(0,1)).xyz;\n    vec3 e_w = E(ivec2(fragCoord)+ivec2(-1,0)).xyz;\n    vec3 e_curl = curl30(e_n, e_e, e_s, e_w);\n    vec3 deltaB = -C * e_curl;\n\n    \n    m.xyz += deltaB;\n    \n    if (iFrame == 0) m = vec4(0.);\n    fragColor = m;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Electric field.\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / R;\n    \n    vec4 e = E(ivec2(fragCoord));\n    vec4 m = M(ivec2(fragCoord));\n    \n    #if 0\n    vec2 d_m_n = E(ivec2(fragCoord)+ivec2(0,-1)).zw;\n    vec2 d_m_e = E(ivec2(fragCoord)+ivec2(1,0)).zw;\n    vec2 d_m_s = E(ivec2(fragCoord)+ivec2(0,1)).zw;\n    vec2 d_m_w = E(ivec2(fragCoord)+ivec2(-1,0)).zw;\n    \n    vec2 deltaE = -(1./C) * m.wz;\n    \n    \n    vec2 m_n = M(ivec2(fragCoord)+ivec2(0,-1)).xy;\n    vec2 m_e = M(ivec2(fragCoord)+ivec2(1,0)).xy;\n    vec2 m_s = M(ivec2(fragCoord)+ivec2(0,1)).xy;\n    vec2 m_w = M(ivec2(fragCoord)+ivec2(-1,0)).xy;\n    vec2 b_curl = curl21(m_n, m_e, m_s, m_w) * m.xy;\n    \n    vec2 deltaE = CURRENT * getCurrent(uv,iTime) + b_curl * C;\n    \n    e.zw  = deltaE;\n    #endif\n    \n    vec3 m_n = M(ivec2(fragCoord)+ivec2(0,-1)).xyz;\n    vec3 m_e = M(ivec2(fragCoord)+ivec2(1,0)).xyz;\n    vec3 m_s = M(ivec2(fragCoord)+ivec2(0,1)).xyz;\n    vec3 m_w = M(ivec2(fragCoord)+ivec2(-1,0)).xyz;\n    vec3 b_curl = curl30(m_n, m_e, m_s, m_w);\n    \n    vec3 deltaE = -CURRENT * getCurrent(uv,iTime,R) + b_curl * C;\n    \n\n    e.xyz += deltaE;\n    \n    //if (iFrame == 0) e *= 0.;\n    fragColor = e;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define R iResolution.xy\n#define IR ivec2(iResolution.xy)\n\n#define M(p) texelFetch(iChannel0, (p), 0)\n#define E(p) texelFetch(iChannel1, (p), 0)\n\n#define C .4\n#define CURRENT .4\n#define FREQ 2. / C\n\n\n// http://www.cavelab.cs.tsukuba.ac.jp/nsfdtd/theory/intermediate_02.html\n\n\n//vec2 curl2(vec2 n, vec2 e, vec2 s, vec2 w) {\n//return vec2(-(n.y-s.y), (e.x-w.x));\n//}\n\nfloat curl21(vec2 n, vec2 e, vec2 s, vec2 w) {\n    return (w.y-e.y) - (n.x-s.x);\n}\nvec3 curl30(vec3 n, vec3 e, vec3 s, vec3 w) {\n    return vec3(\n         (n.z - s.z),\n        -(e.z - w.z),\n        -(n.x - s.x) + (e.y - w.y));\n}\n\nfloat diver2(vec2 n, vec2 e, vec2 s, vec2 w) {\n    return e.x - w.x + n.y - s.y;\n}\n\nvec3 getCurrent(vec2 u, float time, vec2 RR) {\n    float mult = cos(time * FREQ);\n#if 0\n    // Two lines\n    if (u.x>.1 && u.x<.9 && u.y > .25 && u.y < .26) return vec3(1., 0., .0) * mult * 2040. / RR.x;\n    if (u.x>.1 && u.x<.9 && u.y > .75 && u.y < .76) return vec3(-1., 0., .0) * mult * 2040. / RR.x;\n#elif 0\n    // Around Loop\n    if (abs(length(u-.5) - .35) < .004) {\n        float a = atan(u.x-.5, u.y-.5);\n        return vec3(sin(a),cos(a),0.) * mult * 2040. / RR.x;\n    }\n#elif 1\n    // Huh\n    if (u.x>.45 && u.x<.46 && u.y > .5 && u.y < .51) return vec3(1., 0., .0) * mult * 21040. / RR.x;\n    if (u.x>.55 && u.x<.56 && u.y > .5 && u.y < .51) return vec3(-1., 0., .0) * mult * 21040. / RR.x;\n#endif\n    return vec3(0.) * mult;\n}","name":"Common","description":"","type":"common"}]}