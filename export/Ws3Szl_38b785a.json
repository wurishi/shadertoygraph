{"ver":"0.1","info":{"id":"Ws3Szl","date":"1572562958","viewed":562,"name":"Shadertober 29 Carpet -jaburns","username":"jaburns","description":"Subtle psychedelic replication","likes":6,"published":3,"flags":32,"usePreview":0,"tags":["truchet","lsd","hex"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Inspired by http://stackoverflow.com/questions/6030814/add-fisheye-effect-to-images-at-runtime-using-opengl-es\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )//Drag mouse over rendering area\n{\n    vec2 uv = (fragCoord - .5*iResolution.xy) / iResolution.xy;\n    \n    float T  = mod(iTime,15.);\n    float level = min(T, 10.) / 10.;\n    uv.y -= level*.4*(uv.y+.5)*uv.x*uv.x;\n\n\tfragColor = texelFetch( iChannel0, ivec2(fragCoord), 0 );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI       3.14159\n#define sqrt3    1.73205\n#define invSqrt3 0.57735\n\n#define COLORA (vec3(73, 43, 123)/vec3(255.))\n#define COLORB (vec3(237, 138, 10)/vec3(255.))\n#define COLORC (vec3(247, 217, 20)/vec3(255.))\n#define FOG    (.3*vec3(58, 113, 140)/vec3(255.))\n\n\nmat2 rot( float theta )\n{\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat2(c, s, -s, c);\n}\n\nstruct HexCoord\n{\n    vec2 id;\n    vec2 xy;\n    float dist;\n};\n    \nfloat hash21( vec2 p )\n{\n\treturn fract(sin(dot(p ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nHexCoord hexCoord( vec2 uv )\n{\n    const vec2 hexDim = vec2(1, sqrt3);\n    const vec2 normHexDim = normalize(hexDim);\n    \n    vec2 uva = mod(uv, hexDim) - .5*hexDim;\n    vec2 uvb = mod(uv + .5*hexDim, hexDim) - .5*hexDim;\n    \n    vec2 guv;\n    float idx;\n    \n    if (length(uva) < length(uvb)) {\n        guv = uva;\n        idx = .5;\n    } else {\n \t\tguv = uvb;\n        uv += .5*hexDim;\n        idx = 0.;\n    }\n\n    vec2 q = abs(guv);\n    return HexCoord(\n        vec2(floor(uv.x), 2.*(floor(uv.y / sqrt3)+idx)),\n        2. * guv,\n        max(dot(q, normHexDim), q.x)\n    );\n}\n\nvec2 minx( vec2 a, vec2 b )\n{\n    return a.x < b.x ? a : b;\n}\n\nvec3 rawCarpet( vec2 uv, float t, float level )\n{\n    float mixer = mix(.5, clamp(3.*texture(iChannel0, -.02 * uv + 0.0025*t).r - .75, 0., 1.), level);\n    \n    //return vec3(mixer);\n    \n    vec3 result = mixer*texture(iChannel0, uv).rgb;\n    uv *= rot(.1);\n    result += (1.-mixer)*texture(iChannel1, 2.*uv).rrr;\n    return .5+.75*result + .4*mixer;\n}\n\nvec3 carpetPattern( vec2 uv, float level, float T, bool top )\n{\n    if( top ) uv.x += sin(.15*T);\n\n    HexCoord hx = hexCoord(uv);\n    \n    float slide = level*level*10.*cos(0.3*T + uv.x + uv.y);\n    float spin = floor(3.*hash21(hx.id));\n\n    hx.xy *= rot( 2. * spin * PI / 3. );\n    \n    float R = .15 + level*.05*sin(1.*T + uv.x*.25) * cos(1.3*T + uv.y*.5);\n    float P = 10.;\n    \n    vec2 p1 = hx.xy - vec2(1., invSqrt3);\n    vec2 l1 = vec2(\n        abs(length(p1) - invSqrt3),\n        sin(P*atan(p1.y, p1.x) + slide + 2. * spin * PI / 3.)\n    );\n    \n    vec2 p2 = hx.xy + vec2(1., invSqrt3);\n    vec2 l2 = vec2(\n        abs(length(p2) - invSqrt3),\n        sin(P*atan(p2.x, p2.y) + slide - 2. * spin * PI / 3.)\n    );\n\n    vec2 l3 = vec2(\n        abs(dot(hx.xy, normalize(vec2(sqrt3,1)))),\n        sin(-slide + .5*P*PI*dot(hx.xy, normalize(vec2(1,-sqrt3))))\n    );\n    \n    vec2 l = minx(minx(l2, l1), l3);\n    \n    float band = 1. - smoothstep(R, R+30./iResolution.y, l.x);\n    float middle = smoothstep(.4, .6, max(l.y * max(1. - 6.*l.x, 0.0), 0.0));\n    \n    if (top) return l.x*(0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4)));\n    \n    vec3 base = rawCarpet( uv, T, level );\n    \n    vec3 color = base * mix(\n        COLORA,\n        mix( COLORB, COLORC, middle ),\n        band\n    );\n    \n    return color;\n}\n\nvec3 carpet( vec2 uv, float level, float T )\n{\n    vec2 displacement = .1*level * vec2(sin(.4*uv.x+T), cos(2.*uv.y));\n    vec3 a = carpetPattern( uv += displacement, level, T, false );\n    a += level * level * level * .3 * carpetPattern( .75*uv, 1., T, true );\n    return a;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    vec3 ro = vec3(0,5.+.05*abs(sin(4.*iTime)),.5*iTime);\n    vec3 rd = normalize(vec3(uv + vec2(0,-.8), 1.));\n    \n    rd.xz *= rot(.05*sin(.3*iTime));\n    \n    float T  = mod(iTime,15.);\n    float level = min(T, 10.) / 10.;\n    \n    vec3 color;\n    float fog = 0.;\n    \n    float ph = -ro.y / rd.y;\n    if( ph > 0.0 )\n    {\n        vec3 p = ro + ph*rd;\n        fog = exp(-.05*ph);\n        color = carpet(p.xz, level, T);\n    }\n    \n    vec4 new = vec4(mix(FOG, color, fog),1);\n        \n    float blinkT = 1. - 20.*T;\n\tfloat blink = smoothstep(blinkT,blinkT + .1,1.-length(uv*vec2(.2,1)));\n    \n    new *= blink;\n                     \n    vec4 last = texelFetch( iChannel2, ivec2(fragCoord), 0 );\n    fragColor = mix( new, last, .7*level );\n}\n","name":"Buffer A","description":"","type":"buffer"}]}