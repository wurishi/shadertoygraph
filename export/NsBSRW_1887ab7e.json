{"ver":"0.1","info":{"id":"NsBSRW","date":"1619699354","viewed":64,"name":"BakedGravity314","username":"Domain314","description":"meeeh.. \nA tiny bit unlrealistic attempt of faking gravity. lol\nAt least I tried :)","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","unpleasentgravitysimulation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n#define HALF_PI 1.57079632\n\nmat2 Rot (vec2 v) {\n    float s = sin(v.x), c = cos(v.y);\n    return mat2(c, -s, s, c);\n}\n\nfloat MoveX() {\n    float t = sin(iTime*0.8);\n    float rot = t*1.0854-0.7854;\n    \n    if (rot > 0. && rot > (t-0.1)*1.0854-0.7854) return 3.*rot*smoothstep(0.,.3, t)+0.3;\n    else return 0.3;\n}\n\nfloat MoveY() {\n    float t = sin(iTime*0.8);\n    float rot = t*1.0854-1.0854;\n    \n    if (rot < -HALF_PI && rot > (t-0.1)*1.0854-1.0854) return 1.9*(abs(rot+HALF_PI))*smoothstep(-HALF_PI-0.3, -HALF_PI, t)+.3;\n    else return 0.3;\n\n}\n\nfloat GetDist(vec3 p) {\n    vec4 s = vec4(MoveX(), MoveY(), 7., .3);\n    float sphereDist = length(p-s.xyz)-s.w;\n    float planeDist= p.y;\n    float pD2 = p.x;\n    \n    float d = min(sphereDist, planeDist);\n    d = min(d, pD2);\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.;\n    for(int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if (dO > MAX_DIST || dS < SURF_DIST) break;\n    }\n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p);\n    vec2 e = vec2(.01, 0.);\n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    return normalize(n);\n}\n\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(4., 5., 1.);\n    vec3 l = normalize(lightPos - p);\n    vec3 n = GetNormal(p);\n    \n    float dif = dot(n, l);\n    float d = RayMarch(p+n*SURF_DIST*2., l);\n    if (d < length(lightPos - p)) dif *= .15;\n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    float t = sin(iTime*0.8);\n    uv *= Rot(vec2(t*1.0854-0.7854, t*1.0854-1.0854));\n    \n    vec3 col = vec3(0.);\n    \n    vec3 ro = vec3(1., 1., 3.);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1.));\n    \n    float d = RayMarch(ro, rd);\n    vec3 p = ro + rd *d;\n    \n    float dif = GetLight(p);\n    \n    col = vec3(dif);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}