{"ver":"0.1","info":{"id":"Xs3SDs","date":"1462027027","viewed":352,"name":"Julia set + perlin noise","username":"stduhpf","description":"I tried to make a procedural orbit trap for the julia set, as described here:\nhttp://iquilezles.org/articles/ftrapsprocedural/ftrapsprocedural.htm","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d","fractal","noise","perlin","orbittraps"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//procedural orbit trap with perlin noise \n\n\nconst int n= 64; \n\nfloat rand(vec2 co){\n    return fract(sin(dot(co,vec2(12.9898,78.233)))*43758.5453)-.5;}\nvec2 grad(vec2 co){\n    return vec2(rand(co),rand(vec2(2,3)*co.yx+.5));\n        }\nfloat perlin(vec2 uv)\n{\n    vec2 relco = fract(uv);\n    vec2 inco = floor(uv);\n    \n    vec2 grad1 = grad(inco);\n    vec2 grad2 = grad(inco+vec2(1,0));\n    vec2 grad3 = grad(inco+vec2(1,1));\n    vec2 grad4 = grad(inco+vec2(0,1));\n    \n    float s = dot(grad1,relco);\n    float t = dot(grad2, relco-vec2(1,0));\n    float u = dot(grad3, relco-1.);\n    float v = dot(grad4, relco-vec2(0,1));\n    \n    float n1 = mix(s,t,smoothstep(0.,1.,relco.x));\n    float n2 = mix(v,u,smoothstep(0.,1.,relco.x));\n\n    return mix(n1,n2,smoothstep(0.,1.,relco.y));\n}\nvec2 multc(vec2 a, vec2 b)\n     {\n         return vec2(a.x*b.x-a.y*b.y,a.x*b.y+b.x*a.y);}\nvec2 gettrap(vec2 a)\n{\n float b = perlin(a+iTime/2.);\n    return vec2(40.*b/length(a),b+.5);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.y;\n    uv-=vec2(.5+ abs(iResolution.y-iResolution.x)/(2.*iResolution.y),.5);\n    uv*=3.;\n    vec2 um = iMouse.xy/iResolution.y;\n      um-=vec2(.5+ abs(iResolution.y-iResolution.x)/(2.*iResolution.y),.5);\n    um*=3.;\n        \n    vec4 color = vec4(0);\n    vec2 z =uv;\n    vec2 c = um;\n    float f=0.;\n    for (int i=0;i<n;i++)\n    {\n        if (length(z)>float(i))continue;\n        f+=1.;\n        z=multc(z,z)+c;\n        vec2 t = gettrap(um-z+cos(iTime/10.)/8.);\n        color+=vec4(vec3(t.x),t.y);\n        color*=.5;\n    }\n    \n\tfragColor = mix(color,f*vec4(.5,0,0,0)/float(n),1.-color.w)*2.;\n}","name":"Image","description":"","type":"image"}]}