{"ver":"0.1","info":{"id":"3sfBRs","date":"1588826876","viewed":2285,"name":"SDF Box","username":"leftofzen","description":"Signed-distance field to show a box. Took me a while but I finally figured out the branchless version :)","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["2d","simple","sdf","box"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float box(vec2 uv, vec2 topLeft, vec2 bottomRight)\n{\n    return uv.x > topLeft.x && uv.x < bottomRight.x && uv.y < topLeft.y && uv.y > bottomRight.y ? 1. : 0.;\n}\n\nfloat sdfBox(vec2 p, vec2 size)\n{\n    vec2 d = abs(p) - size;  \n\treturn length(max(d, vec2(0))) + min(max(d.x, d.y), 0.0);\n}\n\nfloat sdfCircle(vec2 p, vec2 size)\n{\n    //vec2 d = abs(p) - size;  \n\t//return length(max(d, vec2(0))) + min(max(d.x, d.y), 0.0);\n    return distance(p, size);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - .5*iResolution.xy) / min(iResolution.x, iResolution.y);\n\n    vec3 col;\n    \n    // sdf box\n    float f = sdfBox(uv, vec2(0.2, 0.2));\n    \n    //if (f < 0.)\n   \t//    col = vec3(1., 0., 1.);\n    \n    // branchless version of the above if\n    col += vec3(1., 0., 1.) * -sign(f);\n    \n    // circle\n    col += distance(uv, vec2(0, 0));\n    \n\n    // old-school box for comparison\n    //if (abs(uv.x) < 0.01 && abs(uv.y) < 0.01)\n     //col = vec3(1.f, 1.f, 1.f);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}