{"ver":"0.1","info":{"id":"ttyXDc","date":"1584810595","viewed":96,"name":"polar coords - r shear","username":"iradicator","description":"An experimental effect using polar coordinate system by shearing the radius coordinate, origin is also animated. \nCheck my blog post for more information: \nhttps://iradicator.com/screen-space-effects-using-polar-coordinates-linear-transformations/","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","effect","linear","polar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define SQRT2 1.41421356237\n\n#define MAX_FLT 3.402823e+38\n#define EPSILON 1.192093e-07\n\n#define sqrLength(x) dot((x),(x))\n\nfloat clamp01(in float v) { return clamp(v, 0.0, 1.0); }\nvec2 clamp01(in vec2 v) { return vec2(clamp01(v.x), clamp01(v.y)); }\n\n//////////////\n// Controls //\n//////////////\n\n// True iff using polar coordinates (otherwise cartesian) \n#define IS_USING_POLAR_COORD 1\n\n// Mix ratio between colorful uv and actual final image\n#define SHOWING_UV_RATIO 0.0 /* 0.0 - 1.0 */\n\n// Colorful uv is polar coordinates (0 for texture, not cartesian!) \n#define IS_UV_POLAR 0\n\n// mr = slope * mod(t, 2 PI * freq) (slope can be negative!)\n#define RADIUS_SHEAR_FREQ 1.0\n#define RADIUS_SHEAR_SLOPE 0.4\n\n//////////////////////\n// Texture Sampling //\n//////////////////////\n\nvec4 sample_clamp(in sampler2D tex, in vec2 uv) \n{\n    return textureGrad(tex, clamp01(uv), dFdx(uv), dFdy(uv));\n}\n\nvec4 sample_repeat(in sampler2D tex, in vec2 uv) \n{\n    return textureGrad(tex, fract(uv), dFdx(uv), dFdy(uv));\n}\n\nvec4 sample_border(in sampler2D tex, in vec2 uv) \n{\n    bool isInBorder = ((0.0 <= uv.x) && (uv.x <= 1.0) && (0.0 <= uv.y) && (uv.y <= 1.0));\n    if (isInBorder)\n        return textureGrad(tex, fract(uv), dFdx(uv), dFdy(uv));\n    return vec4(1.0, 0.0, 1.0, 1.0); // bg color - magenta    \n}\n\n////////////////////////\n// Coordinate Systems //\n////////////////////////\n\nvec2 tex_to_cartesian(in vec2 uv, in vec2 origin)\n{\n    uv = 2.0 * uv - 1.0;\n    uv -= origin;\n    return uv;\n}\n\nvec2 cartesian_to_tex(in vec2 uv, in vec2 origin)\n{\n    uv += origin;\n    uv = 0.5 * uv + 0.5;\n    return uv;\n}\n\nvec2 tex_to_polar(in vec2 uv, in vec2 origin)\n{\n    uv = tex_to_cartesian(uv, origin);\n    float r = length(uv); \n    float theta = atan(uv.y, uv.x);\n    return vec2(r, theta);\n}\n\nvec2 polar_to_tex(in vec2 rt, in vec2 origin)\n{\n    float x = rt.x * cos(rt.y);\n    float y = rt.x * sin(rt.y);  \n    return cartesian_to_tex(vec2(x,y), origin);\n}\n\n////////////////\n// Transforms //\n////////////////\n\nvec2 get_origin(in float t)\n{\n    return 0.33 * vec2(cos(t), sin(t));\n}\n\nvec2 transform(in vec2 uv, in float t)\n{    \n    float mx = RADIUS_SHEAR_SLOPE * mod(t, 2.0 * PI * RADIUS_SHEAR_FREQ);\n    return mat2(1.0, 0.0, mx, 1.0) * uv;\n}\n\n////////////////////\n// Driver Program //\n////////////////////\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{    \n    vec2 origin = get_origin(0.25 * iTime);\n                \n    // uv_s: tex coord -> cartesian / polar coord   \n    vec2 uv_s = fragCoord / iResolution.xy;\n#if IS_USING_POLAR_COORD\n    uv_s = tex_to_polar(uv_s, origin);\n#else\n    uv_s = tex_to_cartesian(uv_s, origin);\n#endif\n      \n    // uv_s -> uv_t: transform   \n    vec2 uv_t = transform(uv_s, iTime);\n    \n    // uv_e: transformed cartesian / polar coord -> transformed tex coord\n#if IS_USING_POLAR_COORD\n\tvec2 uv_e = polar_to_tex(uv_t, origin);\n#else\n    vec2 uv_e = cartesian_to_tex(uv_t, origin);\n#endif    \n    \n    // uv_c: coloring the uv in texture / polar space\n#if IS_UV_POLAR        \n    vec3 uv_c = vec3(tex_to_polar(uv_e, origin).xy, 0.0);\n#else\n\tvec3 uv_c = vec3((uv_e - origin).xy, 0.0);\n#endif\n        \n    // final composition: texture, colorful uv or alpha (uv_s + uv_e mixture ratio)\n    vec3 col = mix(sample_border(iChannel0, uv_e).rgb, uv_c, SHOWING_UV_RATIO);    \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}