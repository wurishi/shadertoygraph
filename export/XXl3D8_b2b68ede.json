{"ver":"0.1","info":{"id":"XXl3D8","date":"1707406387","viewed":59,"name":"Mandelbrot doughnut","username":"toriikyuu","description":"it's the Mandelbrot set, that's rotated around (0,0) proportionally to  x^2+y^2=r^2\nspecifically the added polar angle is pow(r+1, 100)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rotate(vec2 pos) {\n    float r = sqrt(pos.x * pos.x + pos.y*pos.y);\n    float phi = atan(pos.y/r, pos.x/r) + pow(1. + r, 100.);\n    float x = r * cos(phi);\n    float y = r * sin(phi);\n    return vec2(x, y);\n}\n\n#define MAX_ITERATIONS 500\nint get_iterations() {\n    vec2 wh = iResolution.xy;\n    vec2 pos = (gl_FragCoord.xy - wh/2.0)/wh.y*4.5;\n    pos.y-=.05;\n    pos = rotate(pos);\n    float r = pos.x;\n    float i = pos.y;\n\n    int iterations = 0;\n    float cr = r;\n    float ci = i;\n\n    float tr, d;\n\n    while(iterations < MAX_ITERATIONS) {\n        tr = r;\n        r = (r*r - i*i) + cr;\n        i = 2.0*tr*i + ci;\n        d = r*r + i*i;\n        if (d > 4.0) break;\n\n        ++iterations;\n    }\n    return iterations;\n}\n\nvec4 return_color() {\n    int iter = get_iterations();\n    if (iter == MAX_ITERATIONS) {\n        return vec4(vec3(0.0), 1.0);\n    }\n    float iterations = float(iter) / float(MAX_ITERATIONS);\n    iterations = pow(iterations, .1);\n    return vec4(0, iterations, iterations, 1);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    // Output to screen\n    fragColor = return_color();\n}","name":"Image","description":"","type":"image"}]}