{"ver":"0.1","info":{"id":"lfGXWc","date":"1715872285","viewed":92,"name":"Roof Tiles","username":"Aurore_B","description":"Attempt to do roof tiles pattern !","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ZOOM 5.0\n#define COLOR1 vec3(140,47,21)/255.\n#define COLOR2 vec3(123,125,61)/255.\n#define COLOR4 vec3(68,116,115)/255.\n#define COLOR3 vec3(245,184,78)/255.\n\nfloat stroke(float x, float s, float w){\n    float d = step(s, x+w*.5) - step(s, x-w*.5);\n    \n    //==\n    //float temp = ((x+w*.5) - (x-w*.5)) *0.5;\n    //float d = step(abs(s - ((x+w*.5) -temp)),temp);\n    \n    return clamp(d, 0.0, 1.0);\n}\n\nfloat sdBox(vec2 uv, vec2 pos, float width, float height) {\n\tfloat t = 0.0;\n\tif ((uv.x > pos.x - width / 2.0) && (uv.x < pos.x + width / 2.0)\n\t\t&& (uv.y > pos.y - height / 2.0) && (uv.y < pos.y + height / 2.0)) {\n\t\tt = 1.0;\n\t}\n    \n    //==\n    //float tx = ((pos.x+width*.5) - (pos.x - width*.5)) *.5;\n    //float t = step(abs(uv.x - ((pos.x+width*.5) - tx)),tx);\n    \n    //float ty = ((pos.y+height*.5) - (pos.y - height*.5))*.5;\n    //t *= step(abs(uv.y - ((pos.y+height*.5) - ty)),ty);\n    \n\treturn t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord *2.0 - iResolution.xy)/iResolution.y;\n    vec2 uv_base = fragCoord/iResolution.xy;\n    \n    // box mask\n    float mask1 = sdBox(uv_base, vec2(0.0,1.0), 1.0,1.0);\n    float mask2 = sdBox(uv_base, vec2(1.0,1.0), 1.0,1.0);\n    float mask3 = sdBox(uv_base, vec2(0.0,0.0), 1.0,1.0);\n    float mask4 = sdBox(uv_base, vec2(1.0,0.0), 1.0,1.0);\n    \n    // translating\n    uv.y -= iTime*0.025;\n    \n    // Aspect ratio\n    uv = vec2(uv.x*0.5, uv.y);\n    \n    // Number of tiles\n    uv *= ZOOM;\n\n    // Offset\n    // Code by Patricio Gonzalez at https://thebookofshaders.com/09/?lan=fr\n    uv.x += step(1., mod(uv.y,2.0))*0.5; \n    \n    // Tiling\n    uv = fract(uv);\n   \n    // Circle position adjustment\n    vec2 uv_circle = vec2((uv.x)-0.5,(1.0-uv.y)*0.5);\n    \n    //Circle\n    float d = length(uv_circle);\n    \n\n    // Repetition\n    float tile1 = abs(d*0.5);\n    float tile2 = sin(d *31.5);\n    float tile3 = sin(d *26.9)+ sin(d);\n    float tile4 = sin(d *17.0) + sin(d*10.);\n    \n    // Blend\n    tile1 -=0.015;\n    tile2 -=0.01;\n    tile3 -=0.04;\n    tile4 -=0.06;\n\n    // Circle outline\n    // change param to get different pattern style\n    tile1= stroke(tile1, 0.22,0.03);\n    tile2= stroke(tile2, 0.2,0.32);\n    tile3= stroke(tile3, 0.8,0.9);\n    tile4= stroke(tile4, 0.1,0.8);\n    \n    float render = tile1 * mask1;\n    render += tile2 * mask2;\n    render += tile3 * mask3;\n    render += tile4 * mask4;\n    \n    render = clamp(render, 0.6,0.95);\n    \n    // add Colors\n    vec3 col = render * COLOR1 * mask1;\n    col += render * COLOR2 * mask2;\n    col += render * COLOR3 * mask3;\n    col += render * COLOR4 * mask4;\n\n    // add Texture\n    col += pow((texture(iChannel0,uv*0.6)).x ,1.0)*0.09;\n    \n    // debug\n    //vec3 col = vec3(uv,0.0);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}