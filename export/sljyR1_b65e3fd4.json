{"ver":"0.1","info":{"id":"sljyR1","date":"1649730309","viewed":67,"name":"Fish Objects Shader","username":"liz_the_jelly","description":"Shaped fishes swimming across the screen differently.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["object"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Credit to inspirnathan.com Shadertoy Tutorial for teaching various techniques\n\nvec2 rotateShape(vec2 uv, float angle)\n{\n    return mat2(cos(angle), sin(angle), -sin(angle), cos(angle)) * uv;\n}\n\nfloat createSquare(vec2 uv, float size, vec2 offset, float rotateAngle)\n{\n    float x = uv.x - offset.x;\n    float y = uv.y - offset.y;\n    vec2 rotateSquare = rotateShape(vec2(x, y), rotateAngle);\n    return max(abs(rotateSquare.x), abs(rotateSquare.y)) - size;\n}\n\nfloat createRect(vec2 uv, float size, vec2 offset, float rotateAngle)\n{\n    float x = uv.x - offset.x;\n    float y = uv.y - offset.y;\n    vec2 rotateR = rotateShape(vec2(x, y), rotateAngle);\n    return max(abs(rotateR.x)*0.2, abs(rotateR.y)*2.) - size;\n}\n\nfloat createCircle(vec2 uv, float r, vec2 offset)\n{\n    float x = uv.x - offset.x;\n    float y = uv.y - offset.y;\n    return length(vec2(x, y)) - r;\n}\n\nfloat createFish(vec2 uv, float animateX, float animateY)\n{    \n    // General Fish settings:\n    float circle = createCircle(uv, 0.15, vec2(0. + animateX, animateY));\n    float square = createSquare(uv, 0.078, vec2(-0.10 + animateX, animateY), 10.2);\n    float tail = createSquare(uv, 0.07, vec2(-0.28 + animateX, animateY), 10.2);\n       \n    float[] list = float[](circle, square, tail);\n    float result = list[0];\n    for(int i = 0; i < 2; i++)\n    {\n        result = min(result, list[i + 1]);\n    }\n    \n    result = smoothstep(0., 0.01, result); // smooth out the edges of the shape\n    return result;\n}\n\n\nvec3 drawScene(vec2 uv, vec3 color)\n{\n    float fish = 0.;\n    // Yellow fish:\n    fish = createFish(uv, 0.1 - tan(iTime * 0.3) * 0.3, cos(iTime * 3.) * 0.2);\n    color = mix(vec3(1, 1, 0), color, fish);\n    \n    // Red fish:\n    fish = createFish(uv, 0., cos(iTime * 2.) * 0.2);\n    color = mix(vec3(1, 0, 0), color, fish);\n    \n    // Blue fish:\n    fish = createFish(uv, 0.1 + tan(iTime), cos(iTime) * 0.2);\n    color = mix(vec3(0, 0, 1), color, fish);\n    \n    // Light Blue fish:\n    fish = createFish(uv, 0.1 + tan(iTime) * 0.3, cos(iTime * 3.) * 0.2);\n    color = mix(vec3(0, 1, 1), color, fish);\n    \n    // Green fish:\n    fish = createFish(uv, 0.1 - tan(iTime), -cos(iTime * 5.) * 0.2);\n    color = mix(vec3(0, 1, 0), color, fish);\n    \n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Set Background to riverbank blue\n    vec3 col = vec3(0.231, 0.702, 0.816);\n    \n    // Ratio:\n    float ratio = iResolution.x / iResolution.y;\n    uv -= 0.5; // (Coords:-0.5 to 0.5)\n    uv.x *= ratio; // fix aspect ratio\n    \n    col = drawScene(uv, col);\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}