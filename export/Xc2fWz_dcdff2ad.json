{"ver":"0.1","info":{"id":"Xc2fWz","date":"1724810906","viewed":32,"name":"rgb boxes","username":"Soliform","description":"just messin around","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["noise","gradient","aesthetic","chill"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 n22 (vec2 p)\n{\n    vec3 a = fract(p.xyx * vec3(123.34, 234.34, 345.65));\n    a += dot(a, a + 34.45);\n    return fract(vec2(a.x * a.y, a.y * a.z));\n}\n\nvec2 get_gradient(vec2 pos)\n{\n    float twoPi = 6.283185;\n    float angle = n22(pos).x * twoPi;\n    return vec2(cos(angle), sin(angle));\n}\n\nfloat perlin_noise(vec2 uv, float cells_count)\n{\n    vec2 pos_in_grid = uv * cells_count;\n    vec2 cell_pos_in_grid =  floor(pos_in_grid);\n    vec2 local_pos_in_cell = (pos_in_grid - cell_pos_in_grid);\n    vec2 blend = local_pos_in_cell * local_pos_in_cell * (3.0f - 2.0f * local_pos_in_cell);\n    \n    vec2 left_top = cell_pos_in_grid + vec2(0, 1);\n    vec2 right_top = cell_pos_in_grid + vec2(1, 1);\n    vec2 left_bottom = cell_pos_in_grid + vec2(0, 0);\n    vec2 right_bottom = cell_pos_in_grid + vec2(1, 0);\n    \n    float left_top_dot = dot(pos_in_grid - left_top, get_gradient(left_top));\n    float right_top_dot = dot(pos_in_grid - right_top,  get_gradient(right_top));\n    float left_bottom_dot = dot(pos_in_grid - left_bottom, get_gradient(left_bottom));\n    float right_bottom_dot = dot(pos_in_grid - right_bottom, get_gradient(right_bottom));\n    \n    float noise_value = mix(\n                            mix(left_bottom_dot, right_bottom_dot, blend.x), \n                            mix(left_top_dot, right_top_dot, blend.x), \n                            blend.y);\n   \n    \n    return (0.5 + 0.5 * (noise_value / 0.7));\n}\n\nvec2 displaceVec(vec2 inputVec) {\n    return inputVec + perlin_noise(inputVec / iResolution.xy + vec2(iTime*0.05,iTime*0.02+552.), 5.)*75.0;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float count = 20.0;\n    float countVertical = floor(iResolution.x / count);\n    float countHorizontal = floor(iResolution.y / (count * (iResolution.y / iResolution.x)));\n    \n    vec2 disp = displaceVec(fragCoord);\n    vec2 transformedDist = disp / vec2(countHorizontal, countVertical);\n    vec2 vertexA = vec2(floor(disp.x / countHorizontal), floor(disp.y / countVertical));\n    vec2 vertexB = vec2(ceil(disp.x / countHorizontal), floor(disp.y / countVertical));\n    vec2 vertexC = vec2(floor(disp.x / countHorizontal), ceil(disp.y / countVertical));\n    vec2 vertexD = vec2(ceil(disp.x / countHorizontal), ceil(disp.y / countVertical));\n    \n    \n    vec2 diag = vertexB - vertexC;\n    float d = dot(diag, transformedDist - vertexC);\n    \n    float r = fragCoord.x / iResolution.x;\n    float g = 1.0 - fragCoord.y / iResolution.y;\n    float k = length(fragCoord / iResolution.xy);\n    \n    if (d >= 1.) {\n        fragColor = vec4(r*d,g*0.5,d-0.1,1.)*0.7*k;\n    } else {\n        fragColor = vec4(r,g*0.2,d-0.1,1.)*d*0.4*k;\n    }\n}","name":"Image","description":"","type":"image"}]}