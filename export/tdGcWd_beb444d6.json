{"ver":"0.1","info":{"id":"tdGcWd","date":"1604012899","viewed":183,"name":"Hand 3D","username":"iuryBorgesRodrigues","description":"Hand","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["sdf","iq","hand"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define AA 2\nstruct FingerParams\n{\n    vec4 a;\n    vec4 b;\n    vec4 c;\n    vec4 d;\n    vec4 e;\n    vec4 quat;\n    vec4 lengths;\n}; \nfloat smin( float a, float b, float k )\n{\n    float h = max(k-abs(a-b),0.0);\n    return min(a, b) - h*h*0.25/k;\n}\n\t\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\nvec3 Rotate(vec3 pos, vec4 quaternion)\n{\n    return pos + 2.0 * cross(quaternion.xyz, cross(quaternion.xyz, pos) + quaternion.w * pos);\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r1, float r2, float m)\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - mix(r1, r2, clamp(length(pa) / m, 0.0, 1.0));\n}\n#define quat0 vec4(0.7071068, 0.0, 0.0, 0.7071068) //RotationToQuaternion(vec3(1.0, 0.0, 0.0), 90.0)\n#define quat1 vec4(0.3420202, 0.0, 0.0, 0.9396926) //RotationToQuaternion(vec3(1.0, 0.0, 0.0), 40.0)\n\n\n#define f1A vec4(0,0,0,0.1)\n#define f1B vec4(0,0,3,0.425)\n#define f1C vec4(0.07961927,-0.3662486,3.796193,0.34)\n#define f1D vec4(0.1336378,-0.9874623,4.336379,0.306)\n#define f1E vec4(0.1589203,-1.714333,4.589203,0.29)\n#define f1Quat vec4(-0.01375867,-0.1100694,0.06879336,0.9914449)\n#define f1Lengths vec4(3,0.88,0.8250002,0.7699998)\n\n#define f2A vec4(0,0,0,0.1)\n#define f2B vec4(0,0,3,0.46875)\n#define f2C vec4(0,-0.4651021,3.930204,0.375)\n#define f2D vec4(0,-1.154531,4.619634,0.3375)\n#define f2E vec4(0,-2.007883,4.93569,0.25)\n#define f2Quat vec4(-0.002759293,-0.02207434,0.01379647,0.9996573)\n#define f2Lengths vec4(3,1.04,0.9750001,0.91)\n\n#define f3A vec4(0,0,0,0.1)\n#define f3B vec4(0,0,3,0.4125)\n#define f3C vec4(0,-0.4090538,3.77915,0.33)\n#define f3D vec4(0,-1.006468,4.348116,0.297)\n#define f3E vec4(0,-1.726023,4.622232,0.22)\n#define f3Quat vec4(0.009187022,0.07349618,-0.04593511,0.9961947)\n#define f3Lengths vec4(3,0.8800001,0.8250002,0.77)\n\n#define f4A vec4(0.2,-0.5,0.4,0.9)\n#define f4B vec4(0.2,-0.5,2.7,0.375)\n#define f4C vec4(0.01168381,-0.7981673,3.327721,0.3)\n#define f4D vec4(-0.1317746,-1.252452,3.805915,0.27)\n#define f4E vec4(-0.2189538,-1.804587,4.096512,0.2)\n#define f4Quat vec4(0.05904933,0.2361973,-0.2952467,0.9238795)\n#define f4Lengths vec4(2.3,0.7199999,0.675,0.63)\n\n#define f5A vec4(-0.1,0,0,1.25)\n#define f5B vec4(-0.1,0,1,0.64)\n#define f5C vec4(-0.1,-0.3469815,1.630875,0.44)\n#define f5D vec4(-0.1,-0.846441,2.08493,0.36)\n#define f5E vec4(-0.1,-1.419972,2.345625,0.28)\n#define f5Quat vec4(0.112371,-0.7491399,0.5993119,0.2588191)\n#define f5Lengths vec4(1.0,1.1,0.6750001,0.6299999)\n\n\n\nfloat finger(vec3 pos, FingerParams fp)\n{ \n    pos = Rotate(pos, fp.quat);\n    \n    float s1 = sdCapsule(pos, fp.a.xyz, fp.b.xyz, fp.a.w, fp.b.w, fp.lengths.x);\n    float s2 = sdCapsule(pos, fp.b.xyz, fp.c.xyz, fp.b.w, fp.c.w, fp.lengths.y);\n    float s3 = sdCapsule(pos, fp.c.xyz, fp.d.xyz, fp.c.w, fp.d.w, fp.lengths.z);\n    float s4 = sdCapsule(pos, fp.d.xyz, fp.e.xyz, fp.d.w, fp.e.w, fp.lengths.w);\n        \n\treturn smin(smin(smin(s1, s2, 0.1), s3, 0.075), s4, 0.05);\n}\n\nfloat distfunc(vec3 pos)\n{ \n    vec3 rpos = pos;\n    rpos += vec3(0.0, 2.0, 0.0);\n\trpos = Rotate(rpos, quat0);\n    \n    float arm = sdCapsule(rpos * vec3(1.0, 1.2, 1.0), vec3(-0.2, 0.0, 0.0), vec3(0.0, 0.0, -3.5), 0.7, 1.5, 5.0);\n    \n    rpos = Rotate(rpos, quat1);\n    \n    vec3 p1 = rpos;\n    vec3 p2 = rpos + vec3(0.4, -0.1, 0.0); \n    vec3 p3 = rpos + vec3(0.8, 0.0, 0.0);  \n    vec3 p4 = rpos + vec3(1.0, 0.1, 0.0); \n    vec3 p5 = rpos + vec3(-0.3, 0.6, -0.7);\n    \n    FingerParams fingerParams1;\n    fingerParams1.a = f1A;\n    fingerParams1.b = f1B;\n    fingerParams1.c = f1C;\n    fingerParams1.d = f1D;\n    fingerParams1.e = f1E;\n    fingerParams1.quat = f1Quat;\n    fingerParams1.lengths = f1Lengths;\n        \n    float f1 = finger(p1, fingerParams1);\n    \n    FingerParams fingerParams2;\n    fingerParams2.a = f2A;\n    fingerParams2.b = f2B;\n    fingerParams2.c = f2C;\n    fingerParams2.d = f2D;\n    fingerParams2.e = f2E;\n    fingerParams2.quat = f2Quat;\n\tfingerParams2.lengths = f2Lengths;\n    \n    float f2 = finger(p2, fingerParams2);\n    \n    FingerParams fingerParams3;\n    fingerParams3.a = f3A;\n    fingerParams3.b = f3B;\n    fingerParams3.c = f3C;\n    fingerParams3.d = f3D;\n    fingerParams3.e = f3E;\n    fingerParams3.quat = f3Quat;\n\tfingerParams3.lengths = f3Lengths;\n    \n    float f3 = finger(p3, fingerParams3);\n        \n    FingerParams fingerParams4;\n    fingerParams4.a = f4A;\n    fingerParams4.b = f4B;\n    fingerParams4.c = f4C;\n    fingerParams4.d = f4D;\n    fingerParams4.e = f4E;\n    fingerParams4.quat = f4Quat;\n    fingerParams4.lengths = f4Lengths;\n    \n    float f4 = finger(p4, fingerParams4);\n    \n    FingerParams fingerParams5;\n    fingerParams5.a = f5A;\n    fingerParams5.b = f5B;\n    fingerParams5.c = f5C;\n    fingerParams5.d = f5D;\n    fingerParams5.e = f5E;\n    fingerParams5.quat = f5Quat;\n    fingerParams5.lengths = f5Lengths;\n    \n    float f5 = finger(p5, fingerParams5);\n    \n    float fingers = min(min(min(f1, f2), f3), f4);\n    \n    vec3 mainPos = rpos * vec3(1.0, 1.4, 1.0);\n    float main = sdCapsule(mainPos, vec3(0.0, 0.0, 0.0), vec3(0.15, -0.5, 2.25), 0.5, 1.0, 2.25);\n    main = smin(main, sdCapsule(mainPos, vec3(-0.5, 0.0, 1.0), vec3(-1.0, -0.25, 2.25), 0.5, 1.0, 2.5), 0.5);\n    main = smin(main, sdSphere(rpos + vec3(-0.2, 0.7, -0.3), 0.7), 0.1);\n    \n    float hand = smin(smin(smin(main, fingers, 0.2), f5, 0.9), arm, 0.5);\n    \n   \n   \n    \n   \n    return hand;\n}\nvec2 map( in vec3 p, float atime )\n{\n\n\tp/=vec3(0.1);\n    p.y-=2.0;\n    \n    vec2 res = vec2( distfunc(p)*0.1, 2.0 );\n\n    \n    \n    return res;\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd, float time )\n{\n    vec2 res = vec2(-1.0,-1.0);\n\n    float tmin = 0.5;\n    float tmax = 20.0;\n    \n    float t = tmin;\n    for( int i=0; i<512 && t<tmax; i++ )\n    {\n        vec2 h = map( ro+rd*t, time );\n        if( h.x<0.001 )\n        { \n            res = vec2(t,h.y); \n            break;\n        }\n        t += h.x;\n    }\n    \n    return res;\n}\n\nvec3 calcNormal( in vec3 pos, float time )\n{\n/*\n    vec2 e = vec2(0.0005,0.0);\n    return normalize( vec3( \n        map( pos + e.xyy, time ).x - map( pos - e.xyy, time ).x,\n\t\tmap( pos + e.yxy, time ).x - map( pos - e.yxy, time ).x,\n\t\tmap( pos + e.yyx, time ).x - map( pos - e.yyx, time ).x ) );\n*/\n    vec3 n = vec3(0.0);\n    for( int i=min(iFrame,0); i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*map(pos+0.0005*e,time).x;\n    }\n    return normalize(n);    \n}\n\nfloat calcOcclusion( in vec3 pos, in vec3 nor, float time )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.11*float(i)/4.0;\n        vec3 opos = pos + h*nor;\n        float d = map( opos, time ).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 2.0*occ, 0.0, 1.0 );\n}\n\nvec3 render( in vec3 ro, in vec3 rd, float time )\n{ \n    // sky dome\n    vec3 col = vec3(0.5, 0.8, 0.9) - max(rd.y,0.0)*0.5;\n    \n    vec2 res = castRay(ro,rd, time);\n    if( res.y>-0.5 )\n    {\n        float t = res.x;\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos, time );\n        vec3 ref = reflect( rd, nor );\n        \n\t\tcol = vec3(0.2);\n        float ks = 1.0;\n\n        if( res.y>3.5 ) // eyeball\n        { \n            col = vec3(0.0);\n        } \n        else if( res.y>2.5 ) // iris\n        { \n            col = vec3(0.4);\n        } \n        else if( res.y>1.5 ) // body\n        { \n            col = vec3(0.2,0.05,0.02);\n        }\n\t\telse // terrain\n        {\n            col = vec3(0.05,0.09,0.02);\n        }\n        \n        // lighting\n        vec3  sun_lig = normalize( vec3(0.6, 0.35, 0.5) );\n        float sun_dif = clamp(dot( nor, sun_lig ), 0.0, 1.0 );\n        vec3  sun_hal = normalize( sun_lig-rd );\n        float sun_sha = step(castRay( pos+0.001*nor, sun_lig,time ).y,0.0);\n\t\tfloat sun_spe = ks*pow(clamp(dot(nor,sun_hal),0.0,1.0),8.0)*sun_dif*(0.04+0.96*pow(clamp(1.0+dot(sun_hal,rd),0.0,1.0),5.0));\n\t\tfloat sky_dif = sqrt(clamp( 0.5+0.5*nor.y, 0.0, 1.0 ));\n        float bou_dif = sqrt(clamp( 0.1-0.9*nor.y, 0.0, 1.0 ))*clamp(1.0-0.1*pos.y,0.0,1.0);\n\n\t\tvec3 lin = vec3(0.0);\n        lin += sun_dif*vec3(8.10,6.00,4.20)*sun_sha;\n        lin += sky_dif*vec3(0.50,0.70,1.00);\n        lin += bou_dif*vec3(0.40,1.00,0.40);\n\t\tcol = col*lin;\n\t\tcol += sun_spe*vec3(8.10,6.00,4.20)*sun_sha;\n        \n        col = mix( col, vec3(0.5,0.7,0.9), 1.0-exp( -0.0001*t*t*t ) );\n    }\n\n    return col;\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv =          ( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\n#define ZERO (min(iFrame,0))\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    \t vec3 tot = vec3(0.0);\n\n    for( int m=ZERO; m<AA; m++ )\n    for( int n=ZERO; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5; \n\t\n\t\n    vec2 p = (-iResolution.xy + 2.0*fragCoord+o)/iResolution.y;\n    float time = iTime;\n\n    time *= 0.9;\n\n    // camera\t\n    float an = 10.57*iMouse.x/iResolution.x;\n    vec3  ta = vec3( 0.0, 0.0, 0.4);\n    vec3  ro = ta + vec3( 1.3*cos(an), -0.250, 1.3*sin(an) );\n\n    mat3 ca = setCamera( ro, ta, 0.0 );\n\n    vec3 rd = ca * normalize( vec3(p,1.8) );\n\n    vec3 col = render( ro, rd, time );\n\n    col = pow( col, vec3(0.4545) );\n\n    tot += col;\n    }\n     tot /= float(AA*AA);\n    fragColor = vec4(tot,1.0);\n}\n","name":"Image","description":"","type":"image"}]}