{"ver":"0.1","info":{"id":"4dtGzl","date":"1451742716","viewed":4149,"name":"Glitch Shader B","username":"Berkin","description":"Increasing corruption from left to right.","likes":31,"published":1,"flags":0,"usePreview":0,"tags":["postprocess","glitch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"#define PI 3.14159265\n#define TILE_SIZE 16.0\n\nprecision highp float;\n\nfloat wow;\nfloat Amount = 1.0;\n\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec3 posterize(vec3 color, float steps)\n{\n    return floor(color * steps) / steps;\n}\n\nfloat quantize(float n, float steps)\n{\n    return floor(n * steps) / steps;\n}\n\nvec4 downsample(sampler2D sampler, vec2 uv, float pixelSize)\n{\n    return texture(sampler, uv - mod(uv, vec2(pixelSize) / iResolution.xy));\n}\n\nfloat rand(float n)\n{\n    return fract(sin(n) * 43758.5453123);\n}\n\nfloat noise(float p)\n{\n    float fl = floor(p);\n  \tfloat fc = fract(p);\n    return mix(rand(fl), rand(fl + 1.0), fc);\n}\n\nfloat rand(vec2 n) \n{ \n    return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(vec2 p)\n{\n    vec2 ip = floor(p);\n    vec2 u = fract(p);\n    u = u * u * (3.0 - 2.0 * u);\n\n    float res = mix(\n        mix(rand(ip), rand(ip + vec2(1.0, 0.0)), u.x),\n        mix(rand(ip + vec2(0.0,1.0)), rand(ip + vec2(1.0,1.0)), u.x), u.y);\n    return res * res;\n}\n\nvec3 edge(sampler2D sampler, vec2 uv, float sampleSize)\n{\n    float dx = sampleSize / iResolution.x;\n    float dy = sampleSize / iResolution.y;\n    return (\n    mix(downsample(sampler, uv - vec2(dx, 0.0), sampleSize), downsample(sampler, uv + vec2(dx, 0.0), sampleSize), mod(uv.x, dx) / dx) +\n    mix(downsample(sampler, uv - vec2(0.0, dy), sampleSize), downsample(sampler, uv + vec2(0.0, dy), sampleSize), mod(uv.y, dy) / dy)    \n    ).rgb / 2.0 - texture(sampler, uv).rgb;\n}\n\nvec3 distort(sampler2D sampler, vec2 uv, float edgeSize)\n{\n    vec2 pixel = vec2(1.0) / iResolution.xy;\n    vec3 field = rgb2hsv(edge(sampler, uv, edgeSize));\n    vec2 distort = pixel * sin((field.rb) * PI * 2.0);\n    float shiftx = noise(vec2(quantize(uv.y + 31.5, iResolution.y / TILE_SIZE) * iTime, fract(iTime) * 300.0));\n    float shifty = noise(vec2(quantize(uv.x + 11.5, iResolution.x / TILE_SIZE) * iTime, fract(iTime) * 100.0));\n    vec3 rgb = texture(sampler, uv + (distort + (pixel - pixel / 2.0) * vec2(shiftx, shifty) * (50.0 + 100.0 * Amount)) * Amount).rgb;\n    vec3 hsv = rgb2hsv(rgb);\n    hsv.y = mod(hsv.y + shifty * pow(Amount, 5.0) * 0.25, 1.0);\n    return posterize(hsv2rgb(hsv), floor(mix(256.0, pow(1.0 - hsv.z - 0.5, 2.0) * 64.0 * shiftx + 4.0, 1.0 - pow(1.0 - Amount, 5.0))));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    Amount = uv.x; // Just erase this line if you want to use the control at the top\n    wow = clamp(mod(noise(iTime + uv.y), 1.0), 0.0, 1.0) * 2.0 - 1.0;    \n    vec3 finalColor;\n    finalColor += distort(iChannel0, uv, 8.0);\n    fragColor = vec4(finalColor, 1.0);\n}","name":"","description":"","type":"image"}]}