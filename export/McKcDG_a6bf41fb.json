{"ver":"0.1","info":{"id":"McKcDG","date":"1732341648","viewed":235,"name":"ðŸ˜³ (Soft Body)","username":"Nguyen2007","description":"Squish squishy :)\nDisclaimer: Tends to glitch out, so please give me advice to make it more stable!\nDrag your mouse to move the ðŸ˜³ around","likes":25,"published":3,"flags":32,"usePreview":0,"tags":["physics","emoji","softbody","flushed"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define AA(d) clamp(1. - (d) / length(vec2(dFdx(d), dFdy(d))), 0., 1.)\n\nfloat softBody(vec2 p)\n{\n    float d = dot(p - pointPos(iChannel0, 0), p - pointPos(iChannel0, 0));\n    float s = 1.;\n    \n    for(int i = 0, j = POINTS - 1; i < POINTS; j = i, i++)\n    {\n        // distance\n        vec2 e = pointPos(iChannel0, j) - pointPos(iChannel0, i);\n        vec2 w = p - pointPos(iChannel0, i);\n        vec2 b = w - e * clamp(dot(w, e) / dot(e, e), 0., 1.);\n        d = min(d, dot(b, b));\n\n        // winding number from http://geomalgorithms.com/a03-_inclusion.html\n        bvec3 cond = bvec3(p.y >= pointPos(iChannel0, i).y, \n                           p.y  < pointPos(iChannel0, j).y, \n                           e.x * w.y > e.y * w.x);\n        \n        if(all(cond) || all(not(cond))) s = -s;  \n    }\n    \n    return s * sqrt(d);\n}\n\nfloat sdArc(vec2 p, vec2 sc, float r)\n{\n    p.x = abs(p.x);\n    return cross2(p, sc) > 0. ? length(p - sc * r)\n                              : abs(length(p) - r);\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nvec3 hexColour(int code)\n{\n    return vec3((code & 0xff0000) >> 16, (code & 0xff00) >> 8, code & 0xff) / 255.;\n}\n\nvec3 flushedFace(vec2 uv)\n{\n    vec3 res = hexColour(0xffcc4d);\n    uv.x = abs(uv.x);\n    \n    res = mix(res, hexColour(0xff7892), AA(length(uv - vec2(.62, -.2936)) - .27979));\n    res = mix(res, hexColour(0xffffff), AA(length(uv - vec2(.1775 * 2., .03542)) - .2936));\n    res = mix(res, hexColour(0x664500), AA(length(uv - vec2(.1765 * 2., .04042)) - .14468));\n    \n    res = mix(res, hexColour(0x664500), AA(length(vec2(max(0., uv.x - .2302), uv.y + .62553)) - .0617));\n    \n    float a = 1.08, b = .53;\n    vec2 sc = vec2(cos(a), sin(a));\n    mat2 m = mat2(cos(b), sin(b), -sin(b), cos(b));\n    \n    res = mix(res, hexColour(0x664500), AA(sdArc(m * (uv - vec2(.27191, .13404)), sc, .4948) - .06));\n    \n    return res;\n}\n\nfloat tanHalfAngle(vec2 A, vec2 B)\n{\n    float a = cross2(A, B), b = dot(A,B);\n    return a / (sqrt(a * a + b * b) + b);\n}\n\nfloat[POINTS] meanvalue(vec2 p)\n{\n    float[POINTS] weights;\n    vec2 vi, vj, vk;\n    float tot = 0.;\n    \n    for(int i = 0; i < POINTS; i++)\n    {\n        vi = pointPos(iChannel0, i) - p;\n        vj = pointPos(iChannel0, (i-1 + POINTS) % POINTS) - p;\n        vk = pointPos(iChannel0, (i+1) % POINTS) - p;\n        weights[i] = (tanHalfAngle(vj, vi) + tanHalfAngle(vi, vk)) / length(vi);\n        tot += weights[i];\n    }\n    \n    for(int i = 0; i < POINTS; i++) weights[i] /= tot;\n    \n    return weights;\n}\n\nmat2 rot(float a)\n{\n    return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\nvoid mainImage(out vec4 O, vec2 I)\n{\n    vec2 uv = (1.2 + exp(-iTime)) * (I - .5 * iResolution.xy) / iResolution.y;\n    \n    vec2 tile = 2.5 * (fract(5. * uv * rot(.1 * iTime)) - .5) * rot(-.1 * iTime);\n    \n    O = mix(vec4(1), vec4(flushedFace(tile), 1), AA(length(tile) - 1.));\n    \n    vec2 center = vec2(0);\n    \n    for(int i = 0; i < POINTS; i++) center += pointPos(iChannel0, i);\n    \n    center /= vec2(POINTS);\n    \n    vec2 p = vec2(0);\n    \n    float[POINTS] weights = meanvalue(uv);\n    \n    for(int i = 0; i < POINTS; i++)\n    {\n        float theta = float(i) * TAU / float(POINTS);\n        p += weights[i] * vec2(cos(theta), sin(theta));\n    }\n    \n    float d1 = sdBox(uv, vec2(.52)),\n          d2 = sdBox(uv, vec2(.5));\n    \n    O = mix(O, vec4(1), .9 * AA(d1));\n    O = mix(O, vec4(flushedFace(p), 1), AA(softBody(uv)));\n    O = mix(O, vec4(0), AA(max(d1, -d2)));\n    \n    O = mix(O, vec4(1), exp(-iTime));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 O, vec2 I)\n{\n    O = texelFetch(iChannel0, ivec2(I), 0);\n    \n    int i = int(I.x);\n    \n    if(iFrame < 1)\n    {\n        if(I.y == .5)\n        {\n            float theta = I.x * TAU / float(POINTS);\n            O.xy = RADIUS * vec2(cos(theta), sin(theta));\n            O.zw = vec2(2, 1);\n        }\n    }\n    else if(iFrame < 2)\n    {\n        if(I.y == 1.5) O = addSpring(iChannel0, i, (i + 1) % POINTS);\n    }\n    else\n    {\n        if(I.y == .5) O = integrate(iChannel0, vec4(getUV(iMouse.xy, R.xy), iMouse.zw), i);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\n/*--------SETTINGS--------*/\n\nconst int POINTS = 20;\n\nconst float MASS   = 1.;\nconst float RADIUS = .05;\n\nconst float KS = 755.;\nconst float KD = 35.;\n\nconst float G = .5;\n\nconst float dt = .02;\n\nconst float pressure = 10.;\n\n/*------------------------*/\n\nconst float TAU = 6.283185;\n\nvec2 getUV(vec2 p, vec2 R)\n{\n    return 1.2 * (p - .5 * R.xy) / R.y;\n}\n\n#define R iResolution\n\n#define pointPos(samp, i) (texelFetch(samp, ivec2(i, 0), 0).xy)\n#define pointVel(samp, i) (texelFetch(samp, ivec2(i, 0), 0).zw)\n\n#define spring1(samp, i) int(texelFetch(samp, ivec2(i, 1), 0).x)\n#define spring2(samp, i) int(texelFetch(samp, ivec2(i, 1), 0).y)\n#define restLength(samp, i) (texelFetch(samp, ivec2(i, 1), 0).z)\n\n#define addSpring(samp, i, j) vec4(i, j, length(pointPos(samp, i) - pointPos(samp, j)), 0)\n\nfloat cross2(vec2 a, vec2 b)\n{\n    return a.x * b.y - a.y * b.x;\n}\n\nvec2 FORCE(sampler2D samp, vec4 mouse, int id)\n{\n    vec2 p1, p2;\n\tfloat r12d;\n\tfloat f;\n    vec2 n;\n\tfloat volume = 0.;\n    \n    vec2 force = vec2(0);\n    vec2 center = vec2(0);  \n    for (int i = 0; i < POINTS; i++) volume += cross2(pointPos(samp, spring1(samp, i)),\n                                                      pointPos(samp, spring2(samp, i))),\n                                     center += pointPos(samp, i);\n    \n    volume = .5 * abs(volume);\n    center /= vec2(POINTS);\n    \n    for (int i = 0; i < POINTS; i++)\n    {\n\t\tivec2 ID = ivec2(spring1(samp, i), spring2(samp, i));\n        \n        if(ID.x != id && ID.y != id) continue;\n        \n        n = pointPos(samp, ID.x) - pointPos(samp, ID.y);\n        n = vec2(-n.y, n.x);\n        \n        if(ID.x != id) ID = ID.yx;\n        \n        p1 = pointPos(samp, ID.x);\n\t\tp2 = pointPos(samp, ID.y);\n\n\t\tr12d = length(p1 - p2);\n\n\t\tif (r12d != 0.)\n        {\n\t\t\tf = (r12d - restLength(samp, i)) * KS + dot(pointVel(samp, ID.x) - pointVel(samp, ID.y), p1 - p2) * KD / r12d;\n\n\t\t\tforce -= (p1 - p2) / r12d * f;\n            \n            force += n * pressure / volume;\n        }\n\t}\n    \n    if(mouse.z > .5) force += 10. * MASS * (clamp(mouse.xy, -.5, .5) - center);\n\n    \n    return force - vec2(0, G) * MASS;\n}\n\nvec4 integrate(sampler2D samp, vec4 mouse, int i)\n{\n    vec2 pos = pointPos(samp, i),\n         vel = pointVel(samp, i);\n    \n    vel += FORCE(samp, mouse, i) / MASS * .25 * dt;\n    pos += vel * .25 * dt;\n    \n    if(pos != clamp(pos, -.5, .5)) vel = vec2(0);\n    \n    pos = clamp(pos, -.5, .5);\n    \n    return vec4(pos, vel);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage(out vec4 O, vec2 I)\n{\n    O = texelFetch(iChannel0, ivec2(I), 0);\n    \n    if(I.y == .5) O = integrate(iChannel0, vec4(getUV(iMouse.xy, R.xy), iMouse.zw), int(I.x));\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage(out vec4 O, vec2 I)\n{\n    O = texelFetch(iChannel0, ivec2(I), 0);\n    \n    if(I.y == .5) O = integrate(iChannel0, vec4(getUV(iMouse.xy, R.xy), iMouse.zw), int(I.x));\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"void mainImage(out vec4 O, vec2 I)\n{\n    O = texelFetch(iChannel0, ivec2(I), 0);\n    \n    if(I.y == .5) O = integrate(iChannel0, vec4(getUV(iMouse.xy, R.xy), iMouse.zw), int(I.x));\n}","name":"Buffer D","description":"","type":"buffer"}]}