{"ver":"0.1","info":{"id":"3sdyW4","date":"1600960159","viewed":161,"name":"Phong reflection","username":"Aubergine","description":"Simple example of phong reflection with ray-tracing on a sphere","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","phong"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 ray_trace(vec3 ro, vec3 rd)\n{\n    float a = dot(rd, rd);\n    float b = 2.0 * dot(ro, rd);\n    float c = dot(ro, ro) - 1.0;\n    float d = b*b - 4.0*a*c;\n    \n    if (d > 0.0) \n    {\n        float t = (-b - d) / (2.0 * a);\n        vec3 p = ro + t * rd;\n        vec3 n = normalize(p);\n        vec3 color = 0.2 * vec3(0.2, 0.1, 0.7);\n        vec3 ls1 = normalize(vec3(1.0, 1.0, -2.0));\n        vec3 rs1 = normalize(2.0 * dot(ls1, n) * n - ls1);\n        vec3 ls2 = normalize(vec3(-10.0, 0.4, -2.0));\n        vec3 rs2 = normalize(2.0 * dot(ls2, n) * n - ls2);\n        vec3 c1 = vec3(1.0, 0.9, 0.8);\n        vec3 c2 = vec3(0.8, 0.9, 1.0);\n        float ks = 0.5;\n        float kd = 0.4;\n        float spec = 7.0;\n        color += kd * dot(ls1, n) * c1;\n        color += ks * pow(max(0.0, dot(rs1, -rd)), spec) * c1;\n        color += kd * dot(ls2, n) * c2;\n        color += ks * pow(max(0.0, dot(rs2, -rd)), spec) * c2;\n        return color;\n    }\n    else\n        return vec3(0.1, 0.1, 0.1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n    vec3 ro = vec3(0, 0, -4.0);\n    vec3 rd = normalize(vec3(uv.xy / 3.0, 1.0));\n    fragColor = vec4(ray_trace(ro, rd), 1.0);\n}","name":"Image","description":"","type":"image"}]}