{"ver":"0.1","info":{"id":"MtBXDW","date":"1443618253","viewed":115,"name":"Bloop coulorÃ©","username":"Reanar","description":"dd","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["dd"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"vec3 mod289(vec3 x) {\n\treturn x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n\treturn x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n\treturn mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r){\n\treturn 1.79284291400159 - 0.85373472095314 * r;\n}\t\n\nfloat noise(vec3 v){\n    v=0.1*v;\n    const vec2 C = vec2(1.0/6.0, 1.0/3.0) ;\n    const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);\n    // First corner\n    vec3 i = floor(v + dot(v, C.yyy) );\n    vec3 x0 = v - i + dot(i, C.xxx) ;\n    // Other corners\n    vec3 g = step(x0.yzx, x0.xyz);\n    vec3 l = 1.0 - g;\n    vec3 i1 = min( g.xyz, l.zxy );\n    vec3 i2 = max( g.xyz, l.zxy );\n    // x0 = x0 - 0.0 + 0.0 * C.xxx;\n    // x1 = x0 - i1 + 1.0 * C.xxx;\n    // x2 = x0 - i2 + 2.0 * C.xxx;\n    // x3 = x0 - 1.0 + 3.0 * C.xxx;\n    vec3 x1 = x0 - i1 + C.xxx;\n    vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n    vec3 x3 = x0 - D.yyy; // -1.0+3.0*C.x = -0.5 = -D.y\n    // Permutations\n    i = mod289(i);\n    vec4 p = permute( permute( permute(\n    i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n    + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n    + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n    // Gradients: 7x7 points over a square, mapped onto an octahedron.\n    // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n    float n_ = 0.142857142857; // 1.0/7.0\n    vec3 ns = n_ * D.wyz - D.xzx;\n    vec4 j = p - 49.0 * floor(p * ns.z * ns.z); // mod(p,7*7)\n    vec4 x_ = floor(j * ns.z);\n    vec4 y_ = floor(j - 7.0 * x_ ); // mod(j,N)\n    vec4 x = x_ *ns.x + ns.yyyy;\n    vec4 y = y_ *ns.x + ns.yyyy;\n    vec4 h = 1.0 - abs(x) - abs(y);\n    vec4 b0 = vec4( x.xy, y.xy );\n    vec4 b1 = vec4( x.zw, y.zw );\n    //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n    //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n    vec4 s0 = floor(b0)*2.0 + 1.0;\n    vec4 s1 = floor(b1)*2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0.0));\n    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n    vec3 p0 = vec3(a0.xy,h.x);\n    vec3 p1 = vec3(a0.zw,h.y);\n    vec3 p2 = vec3(a1.xy,h.z);\n    vec3 p3 = vec3(a1.zw,h.w);\n    //Normalise gradients\n    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n    // Mix final noise value\n    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n    m = m * m;\n    return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),dot(p2,x2), dot(p3,x3) ) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv.x=uv.x*1.6;\n    uv.y=uv.y*0.9;\n    \n    vec3 camera = vec3(iTime,0.0, -2.0);\n    vec3 direction = normalize(vec3(uv,1.0));\n    vec3 lumiere = vec3(0.0,0.0,-2.0);\n    \n    vec3 dx = vec3(0.1,0.0,0.0);\n    vec3 dy = vec3(0.0,0.1,0.0);\n    vec3 dz = vec3(0.0,0.0,0.1);\n    \n    vec3 vecteurDirecteur=camera;\n    for(int i=0;i<500;i++){\n        vecteurDirecteur=vecteurDirecteur+direction*0.10;\n        if(noise(vecteurDirecteur)>0.7){\n            vec3 N = vec3(\n                noise(vecteurDirecteur-dx)-noise(vecteurDirecteur+dx),\n                noise(vecteurDirecteur-dy)-noise(vecteurDirecteur+dy),\n                noise(vecteurDirecteur-dz)-noise(vecteurDirecteur+dz));\n            N = normalize(N);\n            vec3 L = normalize(lumiere-vecteurDirecteur);\n            vec3 V = normalize(camera-vecteurDirecteur);\n            vec3 R = 2.0*clamp(dot(N,L),0.0,1.0)*N-L;\n            \n            float lumDiffuse = clamp(dot(N,L),0.0,1.0);\n            float lumSpeculaire = clamp(pow(dot(R,V),64.0),0.0,1.0);\n            float lumTotale=lumDiffuse+lumSpeculaire;\n            \n       \t\tfragColor = vec4(N.x+lumTotale,N.y+lumTotale,N.z+lumTotale,1.0);                         \n            break;\n        }\n    \n    }\n}","name":"","description":"","type":"image"}]}