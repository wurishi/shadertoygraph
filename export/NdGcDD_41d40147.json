{"ver":"0.1","info":{"id":"NdGcDD","date":"1654851598","viewed":226,"name":"phasers","username":"Carandiru","description":"well that was unexpected.... 1080x607 looks good, crapped up the uvs, doh.","likes":2,"published":3,"flags":32,"usePreview":0,"tags":["fractal","zoom","loop","xor","gif","seamless"],"hasliked":0,"parentid":"NdyyWD","parentname":"Infinite Xor Golf"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":2,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// text //\n\n// vxlmono\n\t\t   // Font Size: 7x6px\n\t\t   // offset = ascii_code(character) - ascii_code(' ')\n\t\t   // data = vxlmono[lut[offset]]\n\nconst ivec2 font_size = ivec2(7, 6);\n\nconst int data[] = int[](\n\t\t0x00,0x00,0x00,0x00,0x00,0x00, // Character 0x20 (32: ' ')\n\t0x3F,0x27,0x27,0x3F,0x27,0x3F, // Character 0x21 (33: '!')\n\t0x3F,0x3F,0x3F,0x3F,0x3F,0x3F, // Character 0x22 (34: '\"')\n\t0x00,0x3F,0x3F,0x3F,0x3F,0x3F, // Character 0x23 (35: '#')\n\t0x33,0x21,0x3D,0x27,0x21,0x33, // Character 0x24 (36: '$')\n\t0x3F,0x2D,0x37,0x3B,0x2D,0x3F, // Character 0x25 (37: '%')\n\t0x00,0x00,0x3F,0x3F,0x3F,0x3F, // Character 0x26 (38: '&')\n\t0x00,0x00,0x00,0x3F,0x3F,0x3F, // Character 0x27 (39: ''')\n\t0x00,0x00,0x00,0x00,0x3F,0x3F, // Character 0x28 (40: '(')\n\t0x00,0x00,0x00,0x00,0x00,0x3F, // Character 0x29 (41: ')')\n\t0x00,0x00,0x0A,0x04,0x0A,0x00, // Character 0x2a (42: '*')\n\t0x00,0x00,0x04,0x0E,0x04,0x00, // Character 0x2b (43: '+')\n\t0x00,0x00,0x00,0x00,0x02,0x02, // Character 0x2c (44: ',')\n\t0x00,0x00,0x00,0x0E,0x00,0x00, // Character 0x2d (45: '-')\n\t0x00,0x00,0x00,0x00,0x02,0x00, // Character 0x2e (46: '.')\n\t0x00,0x10,0x08,0x04,0x02,0x00, // Character 0x2f (47: '/')\n\t0x3F,0x23,0x2D,0x2D,0x31,0x3F, // Character 0x30 (48: '0')\n\t0x3F,0x27,0x2F,0x2F,0x2F,0x3F, // Character 0x31 (49: '1')\n\t0x3F,0x21,0x2F,0x39,0x21,0x3F, // Character 0x32 (50: '2')\n\t0x3F,0x21,0x2F,0x27,0x21,0x3F, // Character 0x33 (51: '3')\n\t0x3F,0x2D,0x2D,0x21,0x2F,0x3F, // Character 0x34 (52: '4')\n\t0x3F,0x21,0x3D,0x27,0x21,0x3F, // Character 0x35 (53: '5')\n\t0x3F,0x21,0x3D,0x21,0x21,0x3F, // Character 0x36 (54: '6')\n\t0x3F,0x21,0x2F,0x2F,0x2F,0x3F, // Character 0x37 (55: '7')\n\t0x3F,0x31,0x25,0x29,0x23,0x3F, // Character 0x38 (56: '8')\n\t0x3F,0x21,0x2D,0x21,0x2F,0x3F, // Character 0x39 (57: '9')\n\t0x00,0x00,0x02,0x00,0x02,0x00, // Character 0x3a (58: ':')\n\t0x1F,0x1F,0x1F,0x1F,0x1F,0x1F, // Character 0x3b (59: ';')\n\t0x0F,0x0F,0x0F,0x0F,0x0F,0x0F, // Character 0x3c (60: '<')\n\t0x00,0x00,0x0E,0x00,0x0E,0x00, // Character 0x3d (61: '=')\n\t0x07,0x07,0x07,0x07,0x07,0x07, // Character 0x3e (62: '>')\n\t0x3F,0x21,0x25,0x3F,0x27,0x3F, // Character 0x3f (63: '?')\n\t0x3F,0x27,0x2F,0x2D,0x21,0x3F, // Character 0x40 (64: '@')\n\t0x00,0x07,0x09,0x0F,0x09,0x00, // Character 0x41 (65: 'A')\n\t0x00,0x0F,0x07,0x09,0x0F,0x00, // Character 0x42 (66: 'B')\n\t0x00,0x0F,0x01,0x01,0x0F,0x00, // Character 0x43 (67: 'C')\n\t0x00,0x07,0x09,0x09,0x07,0x00, // Character 0x44 (68: 'D')\n\t0x00,0x0F,0x03,0x01,0x0F,0x00, // Character 0x45 (69: 'E')\n\t0x00,0x0F,0x01,0x07,0x01,0x00, // Character 0x46 (70: 'F')\n\t0x00,0x0F,0x01,0x0D,0x0F,0x00, // Character 0x47 (71: 'G')\n\t0x00,0x09,0x09,0x0F,0x09,0x00, // Character 0x48 (72: 'H')\n\t0x00,0x03,0x03,0x00,0x03,0x00, // Character 0x49 (73: 'I')\n\t0x00,0x08,0x08,0x08,0x0F,0x00, // Character 0x4a (74: 'J')\n\t0x00,0x0D,0x03,0x07,0x0D,0x00, // Character 0x4b (75: 'K')\n\t0x00,0x01,0x01,0x01,0x0F,0x00, // Character 0x4c (76: 'L')\n\t0x00,0x1B,0x15,0x11,0x11,0x00, // Character 0x4d (77: 'M')\n\t0x00,0x0F,0x09,0x09,0x09,0x00, // Character 0x4e (78: 'N')\n\t0x00,0x07,0x09,0x09,0x06,0x00, // Character 0x4f (79: 'O')\n\t0x00,0x0F,0x09,0x0F,0x01,0x00, // Character 0x50 (80: 'P')\n\t0x00,0x07,0x09,0x0D,0x0E,0x00, // Character 0x51 (81: 'Q')\n\t0x00,0x0F,0x09,0x07,0x0D,0x00, // Character 0x52 (82: 'R')\n\t0x00,0x0F,0x01,0x0C,0x0F,0x00, // Character 0x53 (83: 'S')\n\t0x00,0x1F,0x04,0x04,0x04,0x00, // Character 0x54 (84: 'T')\n\t0x00,0x09,0x09,0x09,0x0F,0x00, // Character 0x55 (85: 'U')\n\t0x00,0x09,0x09,0x02,0x06,0x00, // Character 0x56 (86: 'V')\n\t0x00,0x11,0x11,0x15,0x1B,0x00, // Character 0x57 (87: 'W')\n\t0x00,0x0D,0x05,0x0A,0x0B,0x00, // Character 0x58 (88: 'X')\n\t0x00,0x11,0x1B,0x04,0x04,0x00, // Character 0x59 (89: 'Y')\n\t0x00,0x0F,0x0C,0x03,0x0F,0x00, // Character 0x5a (90: 'Z')\n\t0x07,0x01,0x01,0x01,0x01,0x07, // Character 0x5b (91: '[')\n\t0x03,0x03,0x03,0x03,0x03,0x03, // Character 0x5c (92: '\\')\n\t0x07,0x04,0x04,0x04,0x04,0x07, // Character 0x5d (93: ']')\n\t0x01,0x01,0x01,0x01,0x01,0x01, // Character 0x5e (94: '^')\n\t0x7F,0x5D,0x6B,0x77,0x7F,0x7F, // Character 0x5f (95: '_')\n\t0x7F,0x7F,0x5D,0x6B,0x77,0x7F, // Character 0x60 (96: '`')\n\t0x3F,0x31,0x2D,0x21,0x2D,0x3F, // Character 0x61 (97: 'a')\n\t0x3F,0x21,0x31,0x2D,0x21,0x3F, // Character 0x62 (98: 'b')\n\t0x3F,0x21,0x3D,0x3D,0x21,0x3F, // Character 0x63 (99: 'c')\n\t0x3F,0x31,0x2D,0x2D,0x31,0x3F, // Character 0x64 (100: 'd')\n\t0x3F,0x21,0x39,0x3D,0x21,0x3F, // Character 0x65 (101: 'e')\n\t0x3F,0x21,0x3D,0x31,0x3D,0x3F, // Character 0x66 (102: 'f')\n\t0x3F,0x21,0x3D,0x25,0x21,0x3F, // Character 0x67 (103: 'g')\n\t0x3F,0x2D,0x2D,0x21,0x2D,0x3F, // Character 0x68 (104: 'h')\n\t0x3F,0x33,0x33,0x3F,0x33,0x3F, // Character 0x69 (105: 'i')\n\t0x3F,0x2F,0x2F,0x2F,0x21,0x3F, // Character 0x6a (106: 'j')\n\t0x3F,0x25,0x39,0x31,0x25,0x3F, // Character 0x6b (107: 'k')\n\t0x3F,0x3D,0x3D,0x3D,0x21,0x3F, // Character 0x6c (108: 'l')\n\t0x7F,0x49,0x55,0x5D,0x5D,0x7F, // Character 0x6d (109: 'm')\n\t0x3F,0x21,0x2D,0x2D,0x2D,0x3F, // Character 0x6e (110: 'n')\n\t0x3F,0x31,0x2D,0x2D,0x33,0x3F, // Character 0x6f (111: 'o')\n\t0x3F,0x21,0x2D,0x21,0x3D,0x3F, // Character 0x70 (112: 'p')\n\t0x3F,0x31,0x2D,0x25,0x23,0x3F, // Character 0x71 (113: 'q')\n\t0x3F,0x21,0x2D,0x31,0x25,0x3F, // Character 0x72 (114: 'r')\n\t0x3F,0x21,0x3D,0x27,0x21,0x3F, // Character 0x73 (115: 's')\n\t0x7F,0x41,0x77,0x77,0x77,0x7F, // Character 0x74 (116: 't')\n\t0x3F,0x2D,0x2D,0x2D,0x21,0x3F, // Character 0x75 (117: 'u')\n\t0x3F,0x2D,0x2D,0x3B,0x33,0x3F, // Character 0x76 (118: 'v')\n\t0x7F,0x5D,0x5D,0x55,0x49,0x7F, // Character 0x77 (119: 'w')\n\t0x3F,0x25,0x35,0x2B,0x29,0x3F, // Character 0x78 (120: 'x')\n\t0x7F,0x5D,0x49,0x77,0x77,0x7F, // Character 0x79 (121: 'y')\n\t0x3F,0x21,0x27,0x39,0x21,0x3F, // Character 0x7a (122: 'z')\n\t0x7F,0x4D,0x4D,0x4D,0x4D,0x7F, // Character 0x7b (123: '{')\n\t0x7F,0x59,0x59,0x59,0x59,0x7F, // Character 0x7c (124: '|')\n\t0x7F,0x4B,0x4B,0x4B,0x4B,0x7F, // Character 0x7d (125: '}')\n\t0x7F,0x7F,0x7F,0x5D,0x6B,0x77 // Character 0x7e (126: '~')\n\t);\n\n\nconst int lut[] = int[](\n\t\t0, // Character 0x20 (32: ' ')\n\t\t6, // Character 0x21 (33: '!')\n\t\t12, // Character 0x22 (34: '\"')\n\t\t18, // Character 0x23 (35: '#')\n\t\t24, // Character 0x24 (36: '$')\n\t\t30, // Character 0x25 (37: '%')\n\t\t36, // Character 0x26 (38: '&')\n\t\t42, // Character 0x27 (39: ''')\n\t\t48, // Character 0x28 (40: '(')\n\t\t54, // Character 0x29 (41: ')')\n\t\t60, // Character 0x2a (42: '*')\n\t\t66, // Character 0x2b (43: '+')\n\t\t72, // Character 0x2c (44: ',')\n\t\t78, // Character 0x2d (45: '-')\n\t\t84, // Character 0x2e (46: '.')\n\t\t90, // Character 0x2f (47: '/')\n\t\t96, // Character 0x30 (48: '0')\n\t\t102, // Character 0x31 (49: '1')\n\t\t108, // Character 0x32 (50: '2')\n\t\t114, // Character 0x33 (51: '3')\n\t\t120, // Character 0x34 (52: '4')\n\t\t126, // Character 0x35 (53: '5')\n\t\t132, // Character 0x36 (54: '6')\n\t\t138, // Character 0x37 (55: '7')\n\t\t144, // Character 0x38 (56: '8')\n\t\t150, // Character 0x39 (57: '9')\n\t\t156, // Character 0x3a (58: ':')\n\t\t162, // Character 0x3b (59: ';')\n\t\t168, // Character 0x3c (60: '<')\n\t\t174, // Character 0x3d (61: '=')\n\t\t180, // Character 0x3e (62: '>')\n\t\t186, // Character 0x3f (63: '?')\n\t\t192, // Character 0x40 (64: '@')\n\t\t198, // Character 0x41 (65: 'A')\n\t\t204, // Character 0x42 (66: 'B')\n\t\t210, // Character 0x43 (67: 'C')\n\t\t216, // Character 0x44 (68: 'D')\n\t\t222, // Character 0x45 (69: 'E')\n\t\t228, // Character 0x46 (70: 'F')\n\t\t234, // Character 0x47 (71: 'G')\n\t\t240, // Character 0x48 (72: 'H')\n\t\t246, // Character 0x49 (73: 'I')\n\t\t252, // Character 0x4a (74: 'J')\n\t\t258, // Character 0x4b (75: 'K')\n\t\t264, // Character 0x4c (76: 'L')\n\t\t270, // Character 0x4d (77: 'M')\n\t\t276, // Character 0x4e (78: 'N')\n\t\t282, // Character 0x4f (79: 'O')\n\t\t288, // Character 0x50 (80: 'P')\n\t\t294, // Character 0x51 (81: 'Q')\n\t\t300, // Character 0x52 (82: 'R')\n\t\t306, // Character 0x53 (83: 'S')\n\t\t312, // Character 0x54 (84: 'T')\n\t\t318, // Character 0x55 (85: 'U')\n\t\t324, // Character 0x56 (86: 'V')\n\t\t330, // Character 0x57 (87: 'W')\n\t\t336, // Character 0x58 (88: 'X')\n\t\t342, // Character 0x59 (89: 'Y')\n\t\t348, // Character 0x5a (90: 'Z')\n\t\t354, // Character 0x5b (91: '[')\n\t\t360, // Character 0x5c (92: '\\')\n\t\t366, // Character 0x5d (93: ']')\n\t\t372, // Character 0x5e (94: '^')\n\t\t378, // Character 0x5f (95: '_')\n\t\t384, // Character 0x60 (96: '`')\n\t\t390, // Character 0x61 (97: 'a')\n\t\t396, // Character 0x62 (98: 'b')\n\t\t402, // Character 0x63 (99: 'c')\n\t\t408, // Character 0x64 (100: 'd')\n\t\t414, // Character 0x65 (101: 'e')\n\t\t420, // Character 0x66 (102: 'f')\n\t\t426, // Character 0x67 (103: 'g')\n\t\t432, // Character 0x68 (104: 'h')\n\t\t438, // Character 0x69 (105: 'i')\n\t\t444, // Character 0x6a (106: 'j')\n\t\t450, // Character 0x6b (107: 'k')\n\t\t456, // Character 0x6c (108: 'l')\n\t\t462, // Character 0x6d (109: 'm')\n\t\t468, // Character 0x6e (110: 'n')\n\t\t474, // Character 0x6f (111: 'o')\n\t\t480, // Character 0x70 (112: 'p')\n\t\t486, // Character 0x71 (113: 'q')\n\t\t492, // Character 0x72 (114: 'r')\n\t\t498, // Character 0x73 (115: 's')\n\t\t504, // Character 0x74 (116: 't')\n\t\t510, // Character 0x75 (117: 'u')\n\t\t516, // Character 0x76 (118: 'v')\n\t\t522, // Character 0x77 (119: 'w')\n\t\t528, // Character 0x78 (120: 'x')\n\t\t534, // Character 0x79 (121: 'y')\n\t\t540, // Character 0x7a (122: 'z')\n\t\t546, // Character 0x7b (123: '{')\n\t\t552, // Character 0x7c (124: '|')\n\t\t558, // Character 0x7d (125: '}')\n\t\t564 // Character 0x7e (126: '~')\n\t);\n    \n#define space 32        // ' '\n#define exclaim 33      // '!'\n#define quote 34        // '\"'\n#define hashtag 35      // '#'       \n#define dollar 36       // '$'\n#define perc 37         // '%'\n#define amp 38          // '&'\n#define single_quote 39 // '''\n#define cleft 40        // '('\n#define cright 41       // ')'       \n#define star 42         // '*'\n#define plus 43         // '+'\n#define comma 44        // ','\n#define minus 45        // '-'\n#define period 46       // '.'\n#define fwslash 47      // '/'       \n#define zero 48         // '0'\n#define one 49          // '1'\n#define two 50          // '2'\n#define three 51        // '3'\n#define four 52         // '4'\n#define five 53         // '5'       \n#define size 54         // '6'\n#define seven 55        // '7'\n#define eight 56        // '8'\n#define nine 57         // '9'\n#define colon 58        // ':'\n#define semi_colon 59   // ';'       \n#define lessthan 60     // '<'\n#define equal 61        // '='\n#define greaterthan 62  // '>'\n#define question 63     // '?'\n#define at 64           // '@'\n#define hi_A 65         // 'A'\n#define hi_B 66         // 'B'       \n#define hi_C 67         // 'C'\n#define hi_D 68         // 'D'\n#define hi_E 69         // 'E'\n#define hi_F 70         // 'F'       \n#define hi_G 71         // 'G'\n#define hi_H 72         // 'H'\n#define hi_I 73         // 'I'\n#define hi_J 74         // 'J'       \n#define hi_K 75         // 'K'\n#define hi_L 76         // 'L'\n#define hi_M 77         // 'M'\n#define hi_N 78         // 'N'       \n#define hi_O 79         // 'O'\n#define hi_P 80         // 'P'\n#define hi_Q 81         // 'Q'\n#define hi_R 82         // 'R'       \n#define hi_S 83         // 'S'\n#define hi_T 84         // 'T'\n#define hi_U 85         // 'U'\n#define hi_V 86         // 'V'       \n#define hi_W 87         // 'W'\n#define hi_X 88         // 'X'\n#define hi_Y 89         // 'Y'\n#define hi_Z 90         // 'Z'       \n#define lbrkt 91        // '['   \n#define bkslash 92      // '\\'\n#define rbrkt 93        // ']'   \n#define hat 94          // '^'   \n#define under 95        // '_'\n#define ting 96         // '`' \n#define lo_a 97         // 'a'\n#define lo_b 98         // 'b'\n#define lo_c 99         // 'c'\n#define lo_d 100        // 'd'       \n#define lo_e 101        // 'e'\n#define lo_f 102        // 'f'\n#define lo_g 103        // 'g'\n#define lo_h 104        // 'h'\n#define lo_i 105        // 'i'\n#define lo_j 106        // 'j'       \n#define lo_k 107        // 'k'\n#define lo_l 108        // 'l'\n#define lo_m 109        // 'm'\n#define lo_n 110        // 'n'\n#define lo_o 111        // 'o'\n#define lo_p 112        // 'p'       \n#define lo_q 113        // 'q'\n#define lo_r 114        // 'r'\n#define lo_s 115        // 's'\n#define lo_t 116        // 't'\n#define lo_u 117        // 'u'\n#define lo_v 118        // 'v'       \n#define lo_w 119        // 'w'\n#define lo_x 120        // 'x'\n#define lo_y 121        // 'y'\n#define lo_z 122        // 'z'\n#define lcurly 123      // '{'\n#define rcurly 124      // '}'\n#define wall 125        // '|'\n#define tilda 126       // '~'\n\n#define RES iResolution.xy\n\nvoid draw_character(inout float text_out, in vec2 location, in vec2 uv, int character, in vec2 R)\n{\n    int base = character - 32;\n    \n    ivec2 diff = ivec2(floor(uv * R - location * R));\n    \n    if ( all(greaterThanEqual(diff, ivec2(0))) && all(lessThan(diff, font_size)) ) {\n        ivec2 offset = clamp(diff, ivec2(0), font_size - 1);\n        text_out += float(bool( (data[lut[base] + ((font_size.y - 1) - offset.y)] & (1 << offset.x)) ));   \n    }\n}\n\n#define draw_string(text_out, location, uv, characters, res) for (int i = 0 ; i < characters.length() ; ++i) { draw_character(text_out, (location * res + vec2(i * (font_size.x), 0)) / res, uv, characters[i], res); }\n\nvoid draw_number(inout float text_out, in vec2 location, in vec2 uv, float number, in vec2 R)\n{\n    uint ipart = uint(floor(abs(number)));\n    \n    // only care about integer part\n    \n    uint i = 0u;\n    while(0u != ipart) {\n        uint ivalue = (ipart % 10u);\n        ipart = ipart / 10u;\n        \n        draw_character(text_out, (location * R - vec2(i * uint(font_size.x), 0)) / R, uv, int(uint(zero) + ivalue), R);\n        ++i;\n    }\n}\n\n// text //\n\n\nvoid mainImage(out vec4 o,vec2 i){\n    vec2 r=iResolution.xy,\n         uv=i/r;\n    \n    uv.x -= 0.15f;\n    uv.y /= iTime + 121.0f;\n    \n    float t = 0.0f;\n    float tt = 1.0f;\n    \n    const float samples = 100.0f;\n    for (float dt = 0.0f; dt < samples; ++dt) {\n        \n        float a = 1.0f - textureLod(iChannel0, rotate(uv+vec2(dt/r), PI/4.0f), 0.0f).r;\n        float b = 1.0f - textureLod(iChannel1, rotate(uv-vec2(dt/r), PI/4.0f), 0.0f).r;\n    \n        float s = mix(a, b, 0.5f);\n        t += s * tt;\n        \n        tt *= exp2(-s * 0.01f);\n    }\n    t /= samples;\n    \n    float s = 0.0f;\n     \n    s = (t) * (1.0f - tt);\n    s = pow(s * 3.3f, 15.0f);\n    \n    const float sz = 0.1f;\n    float text = 0.0f;\n    uv = i / r;\n    uv.y -= 0.15f * uv.x * 2.0f + 0.25f;\n    \n    draw_string(text, vec2(0.25f, 0.4f) * sz, uv * sz, int[](lo_p, hi_H, hi_A, hi_S, hi_E, hi_R, lo_s), RES);\n    \n   // text *= float(uint(i.x) & 1u) * 1.5f;\n    text *= float(uint(i.y + iTime * 2.5f) & 1u) * 1.5f;\n    \n    float bn = textureLod(iChannel2, vec2(i.x + iTime / 64.0f,0), 0.0f).r;\n    \n    const vec3 good_color = vec3(0.9f, 0.05f, 0.35f);\n    vec3 color = good_color * s;\n    \n    color += mix(vec3(text * 0.2f) * uv.x, text * good_color, bn);\n    \n    o = vec4(color, 1.0f);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 o,vec2 i){\n    vec2 r=iResolution.xy,\n    // Scale uv\n         uv=(i-r*.5)/r.y-.5,\n         c = vec2(0);\n    \n    uv.x *= r.y/r.x;\n    uv.x -= 0.25f;\n    \n    uv = rotate(uv, PI/0.5f);\n    \n    // Time\n    c+=exp2(fract(iTime));\n    \n    // Zoom\n    i=uv/c;\n    \n    // Xor pattern\n    ivec2 e=ivec2(i*512.);\n    c.y=float(e.x^e.y)/512.;\n    \n    o+=c.y*c.x;\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage(out vec4 o,vec2 i){\n    vec2 r=iResolution.xy,\n    // Scale uv\n         uv=(i-r*.5)/r.y+.5,\n         c = vec2(0);\n    \n    uv.x *= r.y/r.x;\n    uv.x += 0.25f;\n    \n    uv = rotate(uv, PI/0.5f);\n    \n    // Time\n    c+=exp2(fract(iTime));\n    \n    // Zoom\n    i=uv/c;\n    \n    // Xor pattern\n    ivec2 e=ivec2(i*512.);\n    c.y=float(e.x^e.y)/512.;\n    \n    o+=c.y*c.x;\n}\n","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define PI (3.14159265358979323846)\n#define GOLDEN_RATIO (1.61803398874989484820)\n#define GOLDEN_RATIO_ZERO (0.61803398874989484820)\n#define GOLDEN_ANGLE (2.399963229728653)\n\nvec2 rotate( in vec2 p, in float angle )\n{\n\t#define fma(a,b,c) (a*b+c)\n    #define c_ x\n\t#define s_ y\n\t\n    vec2 cossin = vec2(cos(angle), sin(angle));\n\treturn( vec2(fma(p.x, cossin.c_, p.y * cossin.s_), fma(p.x, -cossin.s_, p.y * cossin.c_)) );\n\n\t#undef c_\n\t#undef s_\n    #undef fma\n}","name":"Common","description":"","type":"common"}]}