{"ver":"0.1","info":{"id":"wtSGzh","date":"1558434628","viewed":112,"name":"Mathpics Design","username":"NattyBumppo","description":"Based on https://www.reddit.com/r/mathpics/comments/bqz0nv/for_0i999_and_0j999_count_the_digits_of_ij_that/","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["math"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Thanks to tpfto\nint GetNumDigitsNotEven(int num)\n{\n \tint sum = 0;\n    \n    for(int place = 0; place <= 10; place++)\n    {\n        sum += (num % 10) & 1;\n        num /= 10;\n    }\n    \n    return sum;\n}\n\nvec4 CountToColor(int count)\n{\n    // For testing counts\n    //if (count == 3)\n    //{\n        //return vec4(1, 0, 1, 1);\n    //}\n    //else\n    //{\n     \t//return vec4(0, 0, 0, 1);\n    //}\n    \n    // Counts range from 0 to 7 (although there aren't a lot of pixels at count 7)\n    vec4 startColor = vec4(0.0, 0.0, 1.0, 1.0);\n    vec4 perCountDelta = vec4(0.0, 0.14, -0.14, 0.0);\n    \n    return startColor + perCountDelta * float(count);\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int pixelProduct = int(fragCoord.x * (iResolution.y - fragCoord.y));\n    \n    int count = GetNumDigitsNotEven(pixelProduct);\n    \n    // Output to screen\n    fragColor = CountToColor(count);\n}","name":"Image","description":"","type":"image"}]}