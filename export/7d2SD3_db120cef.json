{"ver":"0.1","info":{"id":"7d2SD3","date":"1621207698","viewed":95,"name":"The Flashlight","username":"Hexdigest","description":"Just a shader with a combination of things I've learnt and experimented with lately.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["random","flashlight","tiles","randomness"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Hash21(vec2 p) {\n    float t = iTime/100.;\n    p = fract(p*vec2(234.35, 935.775));\n    p += dot(p, p+24.23+t);\n    return fract(p.x * p.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy - iResolution.xy*.5)/iResolution.y;\n    vec3 col = vec3(0);\n    \n    uv *= 30.;\n    \n    uv *= acos(uv.x * .05);\n    \n    vec2 gv = fract(uv)-.5;\n    vec2 id = floor(uv);\n    \n    float n = Hash21(id + 5.364);\n    \n    col += -n + dot(uv.x/5. + uv.y/5. * .5, n) *.2;\n    \n    col += n;\n    col.r += smoothstep(10.8-cos(iTime)*2., 4.6-cos(iTime), length(vec2(uv.x + sin(iTime)*18., uv.y + cos(iTime)*22.))) *.5;\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}