{"ver":"0.1","info":{"id":"ldtfDS","date":"1526625161","viewed":1496,"name":"Resizable Gaussian Blur","username":"Neyco","description":"This is an optimized version of https://www.shadertoy.com/view/4sdBRl.\nUse left button to control blur size(both horizontal and vertical).","likes":10,"published":3,"flags":32,"usePreview":1,"tags":["blur","gaussian"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Vertical Blur\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scale = 1.0;\n    if (iMouse.x > 0.0) scale = iMouse.y / iResolution.y;\n    float offsetV = 1.0 / iResolution.y * scale;\n    vec2 uv = fragCoord / iResolution.xy;\n    // Convolution\n    vec3 blurV = texture(iChannel0, uv).rgb * kernel[0];\n    for (int i = 1; i < 21; ++i) {\n        blurV += texture(iChannel0, uv - vec2(0.0, float(i) * offsetV)).rgb * kernel[i];\n        blurV += texture(iChannel0, uv + vec2(0.0, float(i) * offsetV)).rgb * kernel[i];\n    }\n    fragColor = vec4(blurV, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//Gaussian Kernel, Precomputed by http://dev.theomader.com/gaussian-kernel-calculator/\nconst float kernel[21] = float[]\n(\n    0.041555,\n    0.041348, 0.040733, 0.039728, 0.038363, 0.036676,\n    0.034715, 0.032532, 0.030183, 0.027726, 0.025215,\n    0.022704, 0.020239, 0.017863, 0.015609, 0.013504,\n    0.011566, 0.009808, 0.008235, 0.006845, 0.005633\n);","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Horizontal Blur\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scale = 1.0;\n    if (iMouse.x > 0.0) scale = iMouse.x / iResolution.x;\n    float offsetH = 1.0 / iResolution.x * scale;\n    vec2 uv = fragCoord / iResolution.xy;\n    // Convolution\n    vec3 blurH = texture(iChannel0, uv).rgb * kernel[0];\n    for (int i = 1; i < 21; ++i) {\n        blurH += texture(iChannel0, uv - vec2(float(i) * offsetH, 0.0)).rgb * kernel[i];\n        blurH += texture(iChannel0, uv + vec2(float(i) * offsetH, 0.0)).rgb * kernel[i];\n    }\n    fragColor = vec4(blurH, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}