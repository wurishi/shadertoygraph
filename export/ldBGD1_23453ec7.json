{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// The first part of this shader is lifted off the internet and has license\n//\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n// \n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n                + i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n// The rest of this shader is licensed:\n// Copyright Johan Maasing 2013\n// This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\nfloat getCheckerboard(vec2 uv) {\n\tif (uv.x > 0.5) {\n\t\tif (uv.y > 0.5) {\n\t\t\treturn 1.0 ;\n\t\t} else {\n\t\t\treturn 0.0 ;\n\t\t}\n\t} else {\n\t\tif (uv.y > 0.5) {\n\t\t\treturn 0.0 ;\n\t\t} else {\n\t\t\treturn 1.0 ;\n\t\t}\n\t}\n}\n\t\t\n\nvec4 getChecker(vec2 world)\n{\n\tvec2 uv1 = mod(world*8.0, 1.0) ;\n\tfloat colorComp1 = getCheckerboard(uv1) ;\n\t\n\tvec2 uv2 = mod(world*16.0, 1.0) ;\n\tfloat colorComp2 = getCheckerboard(uv2) ;\n\t\n\tvec2 uv3 = mod(world*32.0, 1.0) ;\n\tfloat colorComp3 = getCheckerboard(uv3) ;\n\t\n\tfloat colorComp = (4.0*colorComp1 + 2.0*colorComp2 + colorComp3) / 7.0;\n\t\n\tfloat red = clamp(colorComp-0.05, 0.0, 1.0) ;\n\tfloat green = clamp(colorComp, 0.0, 1.0) ;\n\tfloat blue = clamp(colorComp+0.1, 0.0, 1.0) ;\n\treturn vec4(red,green,blue,1.0);\n}\n\nvec4 getSimplex(vec2 world)\n{\n\tvec2 noiseCoord1 = world*64.0;\n\tfloat noise1 = (snoise(noiseCoord1)+1.0)/2.0 ;\n\t\n\tvec2 noiseCoord2 = world*32.0;\n\tfloat noise2 = (snoise(noiseCoord2)+1.0)/3.0 ;\n\t\n\tfloat colorComp = (noise1 + noise2)/8.0 + 0.1 ;\n\tfloat red = clamp(colorComp, 0.0, 1.0) ;\n\tfloat green = clamp(colorComp/2.0, 0.0, 1.0) ;\n\tfloat blue = clamp(colorComp/4.0, 0.0, 1.0) ;\n\treturn vec4(red,green,blue,1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 world = fragCoord.xy / iResolution.xy;\n\t// Simulate we are moving\n\tworld.x = world.x + iTime/16.0 ;\n\tworld.y = world.y + sin(mod(iTime, 6.2)) / 4.0 ;\n\t\n\tvec4 checkerFrag = getChecker(world) ;\n\tvec4 noiseFrag = getSimplex(world) ;\n\tfloat mixFactor = (1.0 + snoise(world*1.5)) / 2.0 ;\n\tfragColor = mix(checkerFrag, noiseFrag, mixFactor) ;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ldBGD1","date":"1387013394","viewed":262,"name":"2D Simplex checker pattern","username":"jmaasing","description":"Adding a simplex noise to a checkerboard pattern","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","texturegenerator"],"hasliked":0,"parentid":"","parentname":""}}