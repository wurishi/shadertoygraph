{"ver":"0.1","info":{"id":"X3SGWw","date":"1708485775","viewed":99,"name":"Runny Nose","username":"DominicKarma","description":"Fork of the \"Writhe\" shader I published with some aesthetic tweaks.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["pulsation","writhing","mucus"],"hasliked":0,"parentid":"X3SGD1","parentname":"Writhe"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Constants responsible for the behavior of the shapes of the noise itself.\n#define NoiseLacunarity 1.2\n#define NoiseGain 0.83\n#define NoiseOctaves 19.0\n#define NoiseFlowAnimationSpeed 1.3\n#define NoisePulsationAnimationSpeed 0.33\n\n// Constants pertaining to lighting.\n#define DiffuseBrightnessHarshness 20.72\n#define DiffuseLightingContribution 0.3\n#define SpecularShininess 72.075\n#define SpeckleLightingFrequency 0.9\n#define MaxSpeckleLightingContribution 0.37\n\n// Constants pertaining to the view.\n#define ZoomInFactor 0.77\n#define MouseExplorationZone 1.0\n\n// Constants pertaining to the resulting colors.\n#define BaseColor vec4(0.0, 0.06, 0.03, 1.0)\n#define NoiseColorAdditiveFactor vec4(1.1, 0.95, 0.53, 0.0)\n#define ShineColorAdditiveFactor vec4(1.2, 1.0, 1.0, 0.0)\n\n// Mathematical constants.\n#define EulersNumberOver2 1.3591409\n#define Pi 3.141592\n\nmat2 CalculateRotationMatrix(float a)\n{\n    // Standard Z rotation matrix. Nothing special.\n    return mat2(cos(a), sin(a), -sin(a), cos(a));\n}\n\nfloat AperiodicSin(float x)\n{\n    // Calculate an aperiodic sinusoidal value.\n    // This enables pulsations to retain a general harmony, while also having subtle bits of variance in the motion so that it can't be easily predicted.\n    return sin(EulersNumberOver2 * x + 1.04) * sin(Pi * x);\n}\n\nfloat FBM(vec2 uv)\n{\n    vec2 n, q, u = uv - 0.5;\n    float squaredDistanceFromCenter = dot(u, u);\n    float frequency = 11.6 - (0.5 - squaredDistanceFromCenter) * 9.3;\n    float amplitude = 1.0 / frequency;\n    \n    // Perform repeated iterations of FBM-based noise, where each successive summation is weaker than the last.\n    float result = 0.0;\n    for (float i = 0.0; i < NoiseOctaves; i++)\n    {\n        float pulse = (iTime - squaredDistanceFromCenter * 1.13) * NoisePulsationAnimationSpeed;\n        mat2 rotation = CalculateRotationMatrix(5.0);\n\n        // Apply experimental math, rotating the result repeatedly.\n        // This is largely responsible for the motion and shape of the flesh blobs.\n        u = rotation * u;\n        n = rotation * n;\n        q = u * frequency + iTime * NoiseFlowAnimationSpeed + AperiodicSin(pulse) * 0.8 + i + n;\n        \n        // Apply the summation step.\n        result += dot(cos(q), vec2(tanh(u.x - q.x) + 2.0, cos(q.y))) * amplitude;\n        \n        // Jiggle around one of the position vectors.\n        n -= sin(q) * cos(result * 8.2);\n        \n        // Exponentially increase the frequency and decrease the amplitude.\n        frequency *= NoiseLacunarity;\n        amplitude *= NoiseGain;\n    }\n    return result;\n}\n\nfloat CalculateDiffuseLight(vec3 normal, vec3 lightDirection)\n{\n    // Standard diffuse lighting model. Nothing special.\n    float diffuseLighting = max(dot(normal, lightDirection), 0.0);\n    return pow(diffuseLighting, DiffuseBrightnessHarshness) * DiffuseLightingContribution;\n}\n\nfloat CalculateSpecularLight(float maxSpeckleInfluence, vec3 normal, vec3 lightDirection, vec3 currentPosition)\n{\n    // Standard specular lighting model. Nothing special.\n    vec3 lightSource = vec3(0.9, 0.1, 1.0);\n    vec3 reflectedDirection = reflect(-lightDirection, normal);  \n\tvec3 viewDirection = normalize(lightSource - currentPosition);\n    float specularLighting = pow(max(dot(viewDirection, reflectedDirection), 0.0), SpecularShininess);\n    \n    // Found by experimentation. Adds a bit of a speckled texturing to the result.\n    // Probably wouldn't generalize, but I think it looks cool with the flesh-like aesthetic of this shader.\n    float speckleInfluence = pow(abs(cross(reflectedDirection, viewDirection).z), 1.0 / SpeckleLightingFrequency) * maxSpeckleInfluence;\n    \n    return specularLighting + speckleInfluence;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    // Calculate the mouse-based view offset.\n    vec2 viewOffset = vec2(0.0);\n    if (iMouse.z > 0.0)\n        viewOffset = (iMouse.xy - iResolution.xy * 0.5) * -MouseExplorationZone;\n\n    // Calculate the UVs of the fragment, correcting the aspect ratio in the process.\n    vec2 uv = (fragCoord + viewOffset - iResolution.xy * 0.5) / iResolution.xx + 0.5;\n    uv = (uv - 0.5) / ZoomInFactor + 0.5;\n    \n    // Calculate the base noise value from the FBM. This may initially be outside of the traditional 0-1 range of values.\n    float noise = FBM(uv);\n    float originalNoise = noise;\n    \n    // Clamp the noise to a 0-1 range.\n    noise = clamp(noise, 0.0, 1.0);\n    \n    // Store the current position UVs as a vector3 instead of a vector2.\n    vec3 currentPosition = vec3(uv, 0.0);\n    \n    // Calculate the base light values for diffuse lighting.\n    vec3 lightSource = vec3(0.76, 0.7, -1.0);\n    vec3 lightDirection = normalize(currentPosition - lightSource);\n    \n    // Calculate the normal of the current pixel based on the derivatives of the noise with respect to both spatial axes.\n    vec3 normal = normalize(vec3(dFdx(noise), dFdy(noise), clamp(originalNoise * 0.01, 0.0, 1.0)));\n    \n    // Calculate brightness, using both specular and diffuse lighting models.\n    float maxSpeckleInfluence = pow(0.1 / distance(uv, vec2(0.5)), 1.6);\n    maxSpeckleInfluence = min(maxSpeckleInfluence, MaxSpeckleLightingContribution);\n    \n    float brightness = CalculateDiffuseLight(normal, lightDirection) + CalculateSpecularLight(maxSpeckleInfluence, normal, lightDirection, currentPosition);\n    \n    // Combine the brightness and noise values into a single coherent color.\n    noise += brightness;\n    fragColor = BaseColor + NoiseColorAdditiveFactor * noise + ShineColorAdditiveFactor * brightness;\n}","name":"Image","description":"","type":"image"}]}