{"ver":"0.1","info":{"id":"MfK3Dw","date":"1712862397","viewed":29,"name":"sphere and shapes","username":"SASHA6668","description":"sphere with rhombus","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int n = 4;\nconst int sphere = 1; \nconst int m = 14; \nconst float z_min = -500.0;\nconst float R = 0.4;\nconst float A = 0.5;\nconst float B = 1.0;\nconst float C = 0.8;\nconst float D = 1.0;\n\nvec3 pink = vec3 (0.9, 0.1, 0.7);\nvec3 white = vec3 (1.0, 1.0, 1.0);\nvec3 navyblue = vec3 (0.09, 0.4, 0.8);\nvec3 springgreen = vec3 (0.8, 0.9, 0.7);\nvec3 aquamarin = vec3 (0.4, 0.8, 0.8);\nvec3 sunglow = vec3 (1.0,0.8,0.2);\nvec3 peach = vec3 (1.0,0.8,0.6);\nvec3 green = vec3 (0.6, 0.9, 0.3);\nvec3 red = vec3 (1.0, 0.0, 0.0);\n\n\nvec2 Centre = vec2(0.0, 0.0);\nvec3 colAr[n+sphere] = vec3[n+sphere](vec3 (1.0, 0.4, 0.7), vec3 (1.4,0.9,2.0),vec3 (0.9,0.8,1.0), vec3(0.5, 0.9, 1.0), vec3 (1.0, 0.4, 0.0));\nvec3 BGcol = vec3 (0.5, 0.7, 0.8);\nfloat zAr[n] = float[n](0.9, 0.65, 0.3, 0.7);\nint inds[n+sphere] = int[n+sphere](0, 3, 7, 10, m);\nfloat de_z[3] = float[3](4.0, 0.0, 2.0);\nvec2 polygons[m] = vec2[m](vec2(-0.6,0.1),vec2(-0.6,0.5),vec2(0.0,0.0),   vec2(-0.3,0.35), vec2(-0.1,0.35), vec2(-0.1,-0.3), vec2(0.3,0.5),    vec2(0.7,0.4), vec2(0.3,-0.3),vec2(-0.5,0.1), vec2(-0.15,0.2), vec2(0.1, -0.4), vec2(0.1, 0.4), vec2(-0.1, 0.38));\n\nvec3 Color(vec2 uv) {\n    uv+=0.5;\n    vec3 c1=white;\n    vec3 c2=green;\n    return mix(c1, c2, uv.y);\n}\n\nvoid initPolygons(in float time){\n    int i, j;\n    for(i = 0; i < n; i++){\n        for(j = inds[i]; j < inds[i+1]; j++){\n            if(i==0){\n                polygons[j].x-=cos(time*1.0)*0.6;\n                polygons[j].y-=sin(iTime)*0.3+0.1;\n            }\n            if(i==1) polygons[j].y-=0.15*sin(time*1.0);\n            if(i==2) polygons[j].x+=0.5*sin(time);\n            if(i==3) polygons[j].x-=0.5*cos(time);\n        }\n    }\n    return;\n}\n \n \n \nfloat get_z(vec2 uv, int i, in float time){\n    if(i == 4) return sqrt(R*R - (uv.x - Centre.x)*(uv.x - Centre.x) - (uv.y - Centre.y)*(uv.y - Centre.y)) + 1.5;\n    if(i == 3) return (D - B*uv.y - A*uv.x)/C;\n    if(i == 2) return zAr[i];\n    if(i == 1) return zAr[i];\n    if(i == 0) return (D - B*uv.y - A*uv.x)/C;\n}\n \n \nbool inSphere(in vec2 uv){\n if((uv.x - Centre.x)*(uv.x - Centre.x) + (uv.y - Centre.y)*(uv.y - Centre.y) < R*R) return true;\n  else return false;\n}\nbool inPolygon(in vec2 uv, in int num)\n{\n    int k = m;\n    num++;\n    if (num!=4) k = inds[num];\n    int i = inds[num-1] + 1;\n    vec2 f = polygons[i-1];\n    vec2 v1 = polygons[i];\n    vec2 v2 = polygons[i+1];\n    while(i + 1 < k){\n        if(sign((f.x-uv.x)*(v2.y-f.y)-(v2.x-f.x)*(f.y-uv.y))==sign((v2.x-uv.x)*(v1.y-v2.y)-(v1.x-v2.x)*(v2.y-uv.y)) && sign((f.x-uv.x)*(v2.y-f.y)-(v2.x-f.x)*(f.y-uv.y))==sign((v1.x-uv.x)*(f.y-v1.y)-(f.x-v1.x)*(v1.y-uv.y)))\n            return true;\n        i++;\n        v1 = polygons[i];\n        v2 = polygons[i + 1];\n    }  \n    return false;\n}\nbool inFigure(in vec2 uv, in int num){\n    if (num==4) return inSphere(uv);\n    else return inPolygon(uv, num);\n    }\n \nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n        vec2 uv = fragCoord/iResolution.xy; \n        uv -=0.5;\n        uv.x *= iResolution.x/iResolution.y;\n        initPolygons(iTime);\n        vec3 col;\n        int i = 0;\n        float d;\n        float z = z_min;\n        while(i < n + sphere){\n            if(inFigure(uv, i)){\n                d = get_z(uv, i, iTime);\n            }\n            if(d > z){\n                z = d;\n                col = colAr[i];\n                if (i==2){\n                    float tmp1 = uv.y - polygons[7].y;\n                    tmp1 = tmp1/0.3+0.5;\n                    col = mix(green,red,tmp1);\n                }\n                if (i==4){\n                    float tmp = uv.x-Centre.x;\n                    tmp=tmp/R/2.5+0.5;\n                    col = mix(white,pink,tmp);\n                }\n                if((i==0)&&(!inFigure(uv, i))) col = BGcol;\n            }\n            i++;\n            \n        }\n        fragColor = vec4(col,1.0);\n        return;\n}","name":"Image","description":"","type":"image"}]}