{"ver":"0.1","info":{"id":"tlsXDf","date":"1564542499","viewed":204,"name":"Function curves","username":"gcj2450","description":"functions from iq and Kynd","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["functioncurves"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PI 3.14159265359\n//some useful functions \n//copied from https://iquilezles.org/articles/functions\n\nfloat almostIdentity( float x, float m, float n )\n{\n    if( x>m ) return x;\n    float a = 2.0*n - m;\n    float b = 2.0*m - 3.0*n;\n    float t = x/m;\n    return (a*t + b)*t*t + n;\n}\n\nfloat expImpulse( float k, float x )\n{\n    float h = k*x;\n    return h*exp(1.0-h);\n}\n\nfloat quaImpulse( float k, float x )\n{\n    return 2.0*sqrt(k)*x/(1.0+k*x*x);\n}\n\nfloat polyImpulse( float k, float n, float x )\n{\n    return (n/(n-1.0))*pow((n-1.0)*k,1.0/n) * x/(1.0+k*pow(x,n));\n}\n\nfloat cubicPulse( float c, float w, float x )\n{\n    x = abs(x - c);\n    if( x>w ) return 0.0;\n    x /= w;\n    return 1.0 - x*x*(3.0-2.0*x);\n}\n\nfloat expStep( float x, float k, float n )\n{\n    return exp( -k*pow(x,n) );\n}\n\nfloat gain(float x, float k) \n{\n    float a = 0.5*pow(2.0*((x<0.5)?x:1.0-x), k);\n    return (x<0.5)?a:1.0-a;\n}\n\nfloat parabola( float x, float k )\n{\n    return pow( 4.0*x*(1.0-x), k );\n}\n\nfloat pcurve( float x, float a, float b )\n{\n    float k = pow(a+b,a+b) / (pow(a,a)*pow(b,b));\n    return k * pow( x, a ) * pow( 1.0-x, b );\n}\n\nfloat sinc( float x, float k )\n{\n    float a = PI*(k*x-1.0);\n    return sin(a)/a;\n}\n\nfloat powabs( float x, float k )\n{\n   return 1.0-pow(abs(x),k);\n}\n\n\nfloat powcos( float x, float k )\n{\n   return pow(cos(PI*x/2.0),k);\n}\n\nfloat powabssin( float x, float k )\n{\n   return 1.0-pow(abs(sin(PI*x/2.0)),k);\n}\n\nfloat powmincos( float x, float k )\n{\n   return pow(min(cos(PI*x/2.0),1.0-abs(x)),k);\n}\n\nfloat powmax( float x, float k )\n{\n   return 1.0-pow(max(0.0,abs(x)*2.0-1.0),k);\n}\n\nfloat plot(vec2 st, float pct){\n  return  smoothstep( pct-0.02, pct, st.y) -\n          smoothstep( pct, pct+0.02, st.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 st = gl_FragCoord.xy/iResolution.xy;\n\t\n    \n    float y = almostIdentity(st.x,0.2,0.1);\n    \t  y = expImpulse(0.5,15.0*st.x);\n          y = quaImpulse(0.5,15.0*st.x);\n   \t\t  y = polyImpulse(0.6,8.0,15.0*st.x);\n    \t  y = cubicPulse(0.6,8.0,15.0*st.x);\n    \t  y = expStep(5.0*st.x,0.6,8.0);\n   \t\t  y = gain(st.x,0.6);\n    \t  y = parabola(st.x,0.6);\n          y = pcurve(st.x,0.6,0.2);\n    \t  y = sinc(15.0*st.x,0.6);\n    \t  \n    \t//http://www.kynd.info/log/\n          y=powabs(st.x-0.5,0.5);\n    \t  y=powcos(st.x-0.5,0.5);\n    \t  y=powabssin(st.x-0.5,0.5);\n          y=0.8*powmincos(2.0*(st.x-0.5),0.5);\n          //y=powmax(4.0*(st.x-0.5),2.5);\n    \n    vec3 color = vec3(y);\n    \n    \n    float pct = plot(st,y);\n    color = (1.0-pct)*color+pct*vec3(0.0,1.0,0.0);\n\n    fragColor = vec4(color,1.0);\n}\n","name":"Image","description":"","type":"image"}]}