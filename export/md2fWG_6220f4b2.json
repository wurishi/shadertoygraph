{"ver":"0.1","info":{"id":"md2fWG","date":"1690275391","viewed":262,"name":"Selectable in-focus range","username":"timestamp","description":"Thin-lens blur with selectable in-focus range.\n* Left : grey area in focus\n* Right: normal thin lens with same aperture\n","likes":16,"published":1,"flags":32,"usePreview":0,"tags":["blur","lens","focus"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 col, vec2 scrp)\n{\n    col = texelFetch(iChannel0, ivec2(scrp), 0);\n    col /= col.w;  \n    col.xyz = vec3(pow(col.x,.45),pow(col.y,.45),pow(col.z,.45));    \n    if(abs(scrp.x-iResolution.x*.5)<1.)\n        col.xyz = vec3(.9);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//\n// Thin-lens blur with selectable in-focus range.\n//\n//  Left : grey area in focus\n//  Right: comparison with normal thin lens with same aperture\n//\n// (c) timestamp @ shadertoy.com\n//\n\n#define Eps 0.0001\n#define BounceEps (10.*Eps)\n#define NEps (2.*Eps)\n#define Iter 150.\n#define Pi 3.141592653589793238\n#define Pii (Pi*2.)\nfloat sqr(float x){return x*x;}\nfloat dot2(vec3 a){return dot(a,a);}\nvec2 rot(vec2 p, float a){return vec2(p.x*cos(a) - p.y*sin(a), p.y*cos(a) + p.x*sin(a));}\n\nvec2 rand2(float x, int s) {\n    const uvec2 p0 = uvec2(2751615673u, 3276581783u);\n    const uvec2 p1 = uvec2(2700620779u, 2533336579u);\n    const uvec2 p2 = uvec2(3505207399u, 2635594421u);\n    const float c0 = Pii / float(1 << 26);\n    const float c1 = 1. / 4294967296.;\n    vec2 p = vec2(floatBitsToUint(x) * p0 + uint(s) * 3513756791u);\n    p = cos(p*c0);\n    return vec2(floatBitsToUint(p) * p1 + p2) * c1;\n}\n\nvec2 toUniformDisc(vec2 r) {\n    r.x *= Pii;\n    return sqrt(r.y) * vec2(cos(r.x), sin(r.x));\n}\n\nfloat sdShape(vec3 p) {    \n    p.xy = fract(p.xy/6.+.5)*6.-3.;\n    float sd = length(p) - .5;\n    p = abs(p);\n    if(p.z>p.x) p.xz = p.zx;\n    if(p.z>p.y) p.yz = p.zy;\n    if(p.y>p.x) p.xy = p.yx;    \n    return max(sd,.2-length(p.yz));\n}\n\nfloat map(vec3 p) {\n    float sd = p.z+.5;\n    float s = 1.;\n    for(int i=0; i<6; i++) {\n        sd = min(sd, sdShape(p) * s);\n        p.xy = rot(abs(p.xy - vec2(.95,1.65)), Pi*.19);\n        p.z += .5;\n        p *= 1.5;\n        s /= 1.5;\n        p.z -= .5;        \n    }\n    return sd;\n}\n\nvec3 mapNormal(vec3 p) { // iq\n    vec2 q = vec2(0, NEps);\n    return normalize(vec3(\n        map(p+q.yxx) - map(p-q.yxx),\n        map(p+q.xyx) - map(p-q.xyx),\n        map(p+q.xxy) - map(p-q.xxy)));\n}\n\nvoid mainImage(out vec4 col, vec2 coord)\n{       \n    int seed = iFrame;\n    bool show = coord.x < iResolution.x*.5;\n    if(ivec2(coord)==ivec2(0)){col.xy=iResolution.xy;return;}    \n    vec4 oCol = iFrame==0 \n       || texelFetch(iChannel0,ivec2(0),0).xy != iResolution.xy        \n        ? vec4(0)\n        : texelFetch(iChannel0,ivec2(coord),0);        \n        \n    vec3 ro = vec3(4,-10,1.6);    \n    vec3 lookAt = vec3(0,0,0);\n    vec3 up = vec3(0,0,1);    \n    float worldToMetres = .1;\n    float fLen = 100. / (1000. * worldToMetres);\n    float aperture = 1.8;    \n    float lensDia = fLen / aperture;\n    float zoom = fLen/(.024/2./worldToMetres); // SLR height 24mm\n\n    coord += rand2(coord.x+coord.y*iResolution.x,seed++) - .5;        \n    vec2 sc = coord * (2./iResolution.y) - vec2(iResolution.x/iResolution.y, 1.);    \n    vec3 camDir = normalize(lookAt-ro);\n    up = normalize(up - dot(camDir,up) * camDir);\n    vec3 right = cross(camDir, up);    \n    vec3 rd = normalize(camDir * zoom + right * sc.x + up * sc.y);\n\n    // ==================================================================\n    // Desired in-focus distance range\n\n    float nearFocus = 9.5;  // world units\n    float farFocus = 13.;   // world units\n\n    // thin-lens sample\n    vec2 rnd = rand2(coord.x+coord.y*iResolution.x,seed++);\n    rnd = toUniformDisc(rnd);\n    vec3 lensSamplePoint = ro \n        + rnd.x * .5 * right * lensDia \n        + rnd.y * .5 * up * lensDia;\n        \n    if(!show) farFocus = nearFocus = length(ro);\n\n    vec3 inFocusStart = ro + rd * nearFocus;\n    vec3 inFocusEnd = ro + rd * farFocus;\n    \n    // in-focus range\n    vec3 roMid = ro;\n    vec3 rdMid = rd;\n\n    // near oof range \n    rd = normalize(inFocusStart - lensSamplePoint);\n    ro = inFocusStart - rd * nearFocus;\n    float t = -length(lensSamplePoint-ro);\n    \n    // far oof range\n    vec3 rdFar = normalize(inFocusEnd - lensSamplePoint);\n    vec3 roFar = inFocusEnd - rdFar * farFocus;\n    \n    float sd,i;\n    vec3 p;       \n    for(i=0.; i<Iter; i++) {\n\n         if(t >= farFocus) {\n            ro = roFar;\n            rd = rdFar;\n        } else if(t >= nearFocus) {\n            ro = roMid;\n            rd = rdMid;\n        }\n        \n        p = ro + t * rd;\n        sd = map(p);\n        if(sd<Eps) break;\n        t += sd;\n    }\n        \n    vec3 n = mapNormal(p);    \n    vec3 ros = p + n * BounceEps;\n    rnd = rand2(coord.x+coord.y*iResolution.x,seed++);    \n    rnd = toUniformDisc(rnd);\n    vec3 rds = normalize(vec3(rnd,2.5));\n    rds.xz = rot(rds.xz,-Pi*.3);    \n    vec3 ps;\n    float ts, sds, j;\n    for(j=0.; j<Iter; j++) {\n        ps = ros + ts * rds;\n        sds = map(ps);\n        if(sds<Eps) break;    \n        ts += sds;\n        if(ps.z>.5) break;\n    }\n        \n    float lum = sds < Eps || j==Iter ? 0.01 : 1.;\n    col = vec4(lum * max(0.,dot(rds,n)));        \n    if(t<nearFocus) col.x *= .6;\n    if(t>=farFocus) col.z *= .6;        \n    col.w = 1.;\n    col += oCol;\n}","name":"Buffer A","description":"","type":"buffer"}]}