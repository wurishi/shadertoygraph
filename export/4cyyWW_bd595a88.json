{"ver":"0.1","info":{"id":"4cyyWW","date":"1731837980","viewed":72,"name":"chess pattern","username":"g01","description":"..","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["pattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Grid size in pixels\n    int size = 30;\n\n    // Determine the grid cell by dividing the fragment coordinates by size\n    int x = int(fragCoord.x) / size;\n    int y = int(fragCoord.y) / size;\n\n   \n    if ((x + y) % 2 == 0) {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0); \n    } else {\n        fragColor = vec4(1.0, 1.0, 1.0, 1.0); \n    }\n}\n","name":"Image","description":"","type":"image"}]}