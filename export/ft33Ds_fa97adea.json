{"ver":"0.1","info":{"id":"ft33Ds","date":"1636913373","viewed":86,"name":"Prime number stuff","username":"RJVB09","description":"Simple shader based on whether a pixel's position is a prime or not.\n(optimized)","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["prime"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nbool prime(int n)\n{\n    if (n % 2 == 1 && n >= 1)\n    {\n        for (int i = 3; i < n; i += 2) //replace i = 2 wit 3 since 2 is already checked\n        {\n            if (n % i == 0)\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //fragCoord = floor(fragCoord); //fragCoord isn't a whole number, thus has to be rounded.\n    int number = int(fragCoord.x+fragCoord.y*iResolution.x);\n    \n    vec3 col = vec3(float(number)/(iResolution.x*iResolution.y),0.0,0.0);\n    bool prime = prime(number);\n    if (prime)\n    {\n        col = vec3(1,1,1);\n    }\n    else\n    {\n        col = vec3(0,0,0);\n        if (fragCoord.x == fragCoord.y)\n        {\n            col = vec3(1,0,0);\n        }\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n*/\nbool prime(int n)\n{\n    if (n % 2 == 0 || n <= 2)\n        return false;\n    int cap = int(sqrt(float(n)));\n    for (int i = 3; i <= cap; i += 2)\n    {\n        if (n % i == 0)\n            return false;\n    }\n    return true;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int number = int(fragCoord.x + fragCoord.y * iResolution.x);\n    \n    vec3 col;\n    if (prime(number))\n        col = vec3(1,1,1);\n    else\n        col = vec3(0,0,0);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}