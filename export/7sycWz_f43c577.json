{"ver":"0.1","info":{"id":"7sycWz","date":"1654905409","viewed":260,"name":"galaxy spiral forces","username":"Carandiru","description":"sourced from: https://www.shadertoy.com/view/NsVyzm","likes":2,"published":3,"flags":32,"usePreview":0,"tags":["spiral","galaxy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 ob = textureLod(iChannel0, uv, 0.0f).rgb;\n\n    vec3 color = vec3(0);\n    \n    color.rg = normalize(ob.xy) * 0.5f + 0.5f;\n    \n    float d = ob.z * 10.0f;\n    color.b = 1.0f / (d*d + 1.0f);\n    \n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// sourced from: https://www.shadertoy.com/view/NsVyzm\n\n#define t iTime*.5\n#define PI 3.14159265359\nconst float radius=0.15;\nconst float M=1.;\nconst float c=1.;\nconst float freq=2.;\nconst vec2 p10=radius*vec2(1,0);\nconst vec2 p20=radius*vec2(-1,0);\nconst int iterations=20; //try 15 iterations for cool clitch :)\n\nmat2 rot(float a){ \n    return mat2(cos(a), -sin(a),sin(a),cos(a));\n}\nvec2 getPos(vec2 p0, float time){\n    return rot(freq*time)*p0;\n}\n\nvec2 force3( vec2 uv, vec2 p){\n    vec2 separation=uv-p;\n    float dist=length(separation);\n    vec2 v = freq*rot(PI*.5)*p;\n    vec2 a = -freq*freq*p;\n    float scl=.1;\n    \n    return scl*4.*M*dot(a,separation)/(c*c*c*dist*dist)*v; // +1./(c*c*dist)*a);\n}\n\nvec2 retardedPos(vec2 uv, vec2 p0, float time){\n    float upper =time;\n    float lower =0.;\n    float tr = time*.5;\n    int n=0;\n    vec2 retardedP=getPos(p0, tr);\n    while(n<iterations){\n        retardedP=getPos(p0, tr);\n        float dist= length(uv-retardedP);\n        if(dist/c>(time-tr)){\n            upper = tr;\n            tr=(upper+lower)*.5;\n        }else{\n            lower= tr;\n            tr=(upper +lower)*.5;\n        }if(tr<.01){\n           tr=0.;\n           break;\n        }\n        retardedP=getPos(p0, tr);\n        n++;\n    }\n    \n    return retardedP;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2.0f - 1.0f;\n    uv *= 4.25f;\n    \n    vec2 p1=getPos(p10, t);\n    vec2 p2=getPos(p20, t);\n    vec2 retardedP1=retardedPos(uv, p1, t);\n    vec2 retardedP2=retardedPos(uv, p2, t);\n    \n    vec2 dir = force3(p1, retardedP1)+force3(p2, retardedP2);\n    float d = length(dir);\n    \n    fragColor = vec4(normalize(dir) * 0.5f + 0.5f, d, 1.0f);\n}","name":"Buffer A","description":"","type":"buffer"}]}