{"ver":"0.1","info":{"id":"lsyGD1","date":"1454232194","viewed":160,"name":"Colored Lights","username":"Neph","description":"Learning how to light a scene. Shadows are really expensive right now until I fix them (soz).","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["procedural","3d","distancefield","raymarch","primitives","lights"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define nsteps 128\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat fplane (vec3 p){\n \treturn p.y+10.0;   \n}\n\nfloat map(vec3 p){\n    vec3 c = vec3(10.0);\n    vec3 q = mod(p, c) - 0.5*c;\n    q.y = p.y;\n    \n    float circle = length(q- vec3(0.0, 3.0, 0.0)) - 2.5;\n    float circle2 = length(q- vec3(0.0, -1.0, 0.0)) - 2.3;\n    float box = sdBox(q, vec3(2.0, 5.0, 2.0));\n    float plane = fplane(p);\n    float scene0 = min( max(-(min(circle, circle2)), box), plane);\n    return min(scene0, length(p - vec3(0.0, 10.0, 20.0)) - 6.0);\n}\n\nfloat march (vec3 o, vec3 r){\n \tfloat t = 0.0;\n    for(int i = 0; i < nsteps; i++){\n\t\tvec3 p = o + r * t;\n        float d = map (p);\n        t += d * 0.5;\n    }\n   return t;\n}\n\nvec3 gradient (vec3 p){\n const float df = 0.1;\n const vec3 dx = vec3(df, 0.0, 0.0);\n const vec3 dy = vec3(0.0, df, 0.0);\n const vec3 dz = vec3(0.0, 0.0, df);\n    \n    return normalize(\n        \n        vec3(map( p + dx ) - map ( p - dx),\n             map( p + dy ) - map ( p - dy),\n             map( p + dz ) - map ( p - dz)\n            )\n        \n        );\n    \n}\n\n//Very dirty and expensive shadows -n-\n//Will fix I promise\nfloat shadow (vec3 ro, vec3 rd){\n    float k = 8.0;\n    float res = 1.0;\n    \n    for(float t = 1.0; t<16.0; t += 0.2){\n     \tfloat h = map(ro + rd*t);\n        if (h < 0.001)\n            return 0.0;\n        res = min (res, k*h/t);\n    }\n    \n    return res;\n}\n\nvec3 shade (vec3 p, vec3 n){\n    vec3 lFinal = vec3(0.0);\n    \n    //Light 0\n    {\n        vec3 col = vec3(0.0);\n        vec3 lipos = vec3(cos(iTime)*50.0, 30.0, sin(iTime)*50.0+10.0);\n        vec3 licol = vec3(abs(sin(iTime)), abs(cos(iTime)), abs(sin(iTime*0.2)));\n        float reflectance = 1.5;\n\n        vec3 lidir = normalize(lipos - p);\n        vec3 libir = licol * dot(n, lidir);\n        \n        float sh = clamp(shadow(p, normalize(lipos - p)), 0.0, 1.0);\n        \n        col += reflectance * libir;\n        col *= 1.0 - (length(p - lipos)*0.01);\n        col -= 1.0-sh;\n        col = clamp (col, 0.0, 1.0);\n        lFinal += col;\n    }\n    \n    //Light 1\n        {\n        vec3 col = vec3(0.0);\n        vec3 lipos = vec3(-cos(iTime)*20.0, 30.0, -sin(iTime)*20.0+10.0);\n        vec3 licol = vec3(1.0);\n        float reflectance = clamp(sin(iTime/3.0), 0.0, 1.0)*1.5;\n\n        vec3 lidir = normalize(lipos - p);\n        vec3 libir = licol * dot(n, lidir);\n            \n        float sh = clamp(shadow(p, normalize(lipos - p)), 0.0, 1.0);\n            \n        col += reflectance * libir;\n        col *= 1.0 - (length(p - lipos)*0.01);\n        col -= 1.0-sh;\n        col = clamp (col, 0.0, 1.0);\n        lFinal += col;\n    }\n        //Light 2\n        {\n        vec3 col = vec3(0.0);\n        vec3 lipos = vec3(0.0, 60.0, 0.0);\n        vec3 licol = vec3(1.0);\n        float reflectance = clamp(1.0, 0.0, 1.0)*1.5;\n\n        vec3 lidir = normalize(lipos - p);\n        vec3 libir = licol * dot(n, lidir);\n            \n        float sh = clamp(shadow(p, normalize(lipos - p)), 0.0, 1.0);\n            \n        col += reflectance * libir;\n        col *= 1.0 - (length(p - lipos)*0.01);\n        col -= 1.0-sh;\n        col = clamp (col, 0.0, 1.0);\n        lFinal += col;\n    }\n\n    return clamp(lFinal, vec3(0.0), vec3(1.0));\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n\tvec3 col = vec3(0.0);\n    \n    vec3 o = vec3(0.0, 10.0, 0.0);\n    vec3 ray = vec3(uv, 0.8);\n    vec3 r = normalize(ray);\n\n    float tt = sin(iTime/7.0);\n    ray.xz *= mat2(cos(tt), -sin(tt), sin(tt), cos(tt));\n    \n    \n    float t = march(o, ray);\n    \n    vec3 pos = (o + ray * t);\n   \tvec3 n = gradient(pos);\n    \n    col = shade (pos, n);\n    col -= vec3(t * 0.01);\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}