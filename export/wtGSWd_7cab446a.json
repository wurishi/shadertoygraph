{"ver":"0.1","info":{"id":"wtGSWd","date":"1583840609","viewed":101,"name":"CircleCircleIntersectionVariant","username":"jt","description":"Visualization of intersection of two circles. Click mouse to move intersection-point.\nVariant of [url]https://www.shadertoy.com/view/Ms33Wn[/url]","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["visualization","intersection","circle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 CircleCircleIntersection(vec2 m, vec2 n, float r, float s)\n{\n    vec2 d = n - m;\n    vec2 c = vec2(d.y, -d.x);\n    float p = length(d);\n    float k = (p*p + r*r - s*s)/(2.*p);\n    float q = sqrt(r*r - k*k);\n  \treturn vec4(\n        m + d*k/p + (c/p)*q,\n  \t\tm + d*k/p - (c/p)*q);\n}\n\nfloat PointLineSegDist2d(vec2 a, vec2 b, vec2 p)\n{\n    p -= a; b -= a;                        // go to A referential\n    float q = dot(p, b) / dot(b, b) ;      // projection of P on line AB: normalized ordinate\n    b *= clamp(q, 0., 1.);                 // point on segment AB closest to P \n    return length( p - b);                 // distance to P\n}\n\n#define STEP(q) vec4(smoothstep(0.0, 4.5/R.y, abs(q)))\n#define draw(q) O *= STEP(q)\n#define draw_(q, C) O = mix(C, O, STEP(q))\n\nvoid mainImage(out vec4 O, in vec2 I)\n{\n\tvec2 R = iResolution.xy; \n    I = (I+I-R)/R.y;\n    vec2 p = (2.0 * iMouse.xy - R) / R.y;\n    float h = 1.0;\n    vec2 m = vec2(0.0, +h/2.0);;\n    float r = length(p - m);\n    vec2 n = vec2(0.0, -h/2.0);\n    float s = length(p - n);\n    vec4 q = CircleCircleIntersection(m, n, r, s);\n\n    O = vec4(1);\n\tdraw(length(I - m) - r); // circle\n    draw(length(I - m)-.01); // center\n\tdraw(length(I - n) - s); // circle\n    draw(length(I - n)-.01); // center\n    draw(length(I - n)-.01); // center\n    draw_(length(I - q.xy)-.01, vec4(0,1,0,1)); // intersection\n    draw_(length(I - q.zw)-.01, vec4(0,0,1,1)); // intersection\n    draw(PointLineSegDist2d(m, p, I));\n    draw(PointLineSegDist2d(m, n, I));\n    draw(PointLineSegDist2d(n, p, I));\n    //draw(PointLineSegDist2d(vec2(0.0, q.y), q.xy, I));\n    //draw(PointLineSegDist2d(vec2(0.0, q.w), q.zw, I));\n    if(q.xy != q.xy || q.zw != q.zw) // NaN ?\n        O.r += 1.; // no intersection\n}","name":"Image","description":"","type":"image"}]}