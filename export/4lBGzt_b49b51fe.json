{"ver":"0.1","info":{"id":"4lBGzt","date":"1431209036","viewed":3664,"name":"Geyser (Fast Water)","username":"bbcollinsworth","description":"A mod of xbe's \"fires\" to create a fast, smooth falling water effect.","likes":80,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d","noise","water","fluid","waterfall","waterspout"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"//////////////////////\n// GEYSER based on Fire Flame shader by xbe\n\n// procedural noise from IQ\nvec2 hash( vec2 p )\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)),\n\t\t\t dot(p,vec2(269.5,183.3)) );\n    //setting p mult to 0.0001 seems to get slightly smoother results\n\treturn -1.0 + 2.0*fract(sin(p*0.0001)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n\tconst float K1 = 0.366025404; // (sqrt(3)-1)/2;\n\tconst float K2 = 0.211324865; // (3-sqrt(3))/6;\n\t\n\tvec2 i = floor( p + (p.x+p.y)*K1 );\n\t\n\tvec2 a = p - i + (i.x+i.y)*K2;\n\tvec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0);\n\tvec2 b = a - o + K2;\n\tvec2 c = a - 1.0 + 2.0*K2;\n\t\n\tvec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\t\n\tvec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n\t\n\treturn dot( n, vec3(70.0) );\n}\n\nfloat fbm(vec2 uv)\n{\n\tfloat f;\n\tmat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n\tf  = 0.5000*noise( uv ); uv = m*uv;\n\tf += 0.2500*noise( uv ); uv = m*uv;\n\tf += 0.1250*noise( uv ); uv = m*uv;\n\tf += 0.0625*noise( uv ); uv = m*uv;\n    //increasing first float here widens flow\n\tf = 0.6 + 0.5*f;\n\treturn f;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    \n\t//vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 uv = (fragCoord.xy/iResolution.x)*2.0-vec2(1.0,iResolution.y/iResolution.x);\n\tvec2 q = -uv;\n    \n    //These functions scale the fire... higher# = smaller:\n\t//q.x *= 2.;//q.x +=sin(iTime);\n\t//q.y *= 2.;//+cos(iTime);\n\tfloat strength = floor(6.);//floor(q.x+1.); +sin(iTime*0.1)\n    \n    //float strength = abs(sin(iTime*0.01))*15.;\n    \n    //THIS CONTROLS SPEED OF FALL:\n    //Pow & Q.Y controls downward accell\n    //could use time mult to change with LIFT?\n\tfloat T3 = max(3.,1.25*strength)*iTime*0.6+pow(abs(q.y),1.25)*2.; // +q.y*q.y*2.//2.*sin(q.y*2.) DO THIS FOR SHIMMERY SURFACE EFFECT: *uv.y;\n    \n\tfloat n = fbm(vec2(strength*q.x,strength*q.y) - vec2(0,T3));\n    strength=26.;\n    float T3B = max(3.,1.25*strength)*iTime*0.6+pow(abs(q.y),1.25)*2.;\n    n = n*0.5 + (n*0.5)/(0.001+1.5*fbm(vec2(strength*q.x,strength*q.y) - vec2(0,T3B)));\n    \n    //this controls width:\n    float intensity = abs(sin(iTime*0.2));\n    n*=1.+pow(intensity,8.)*0.5;\n    \n    //adjusting the 16 divisor makes water fuzzier as it drops...increasing 16 makes top sharper, lower makes fuzzier\n\t//Second part of this adjusts shape\n    float c = 1. - (16./abs(pow(q.y,1.)*4.+1.)) * pow( max( 0., length(q*vec2(1.8+q.y*1.5,.75) ) - n * max( 0., q.y+.25 ) ),1.2 );\n//\tfloat c1 = n * c * (1.5-pow(1.25*uv.y,4.));\n    \n    //adjusting float before power changes intensity; lower number inside power is higher flame height\n    float c1 = n * c * ((0.7+pow(intensity,0.8)*0.9-pow(intensity,4.)*0.4)-pow((1.0)*uv.y,2.));//-abs(sin(iTime*0.2))*uv.y\n    \n    c1= c1*1.05+sin(c1*3.4)*0.4;\n    c1*=0.95-pow(q.y,2.0);\n    c1=clamp(c1,0.4,1.0);\n    \n\t//mix the color:\n\tvec3 col = vec3(1.5*c1*c1*c1, 1.5*c1*c1*c1*c1, 1.25*c1*c1*c1*c1);\n\n\t\n\tcol = col.zyx;\n\n\tfloat a = c * (1.-pow(abs(uv.y),10.));\n\tvec4 waterColor = vec4( mix(vec3(0.),col,a), 1.0);\n    \n    fragColor = waterColor;\n}","name":"","description":"","type":"image"}]}