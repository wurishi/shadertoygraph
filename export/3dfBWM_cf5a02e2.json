{"ver":"0.1","info":{"id":"3dfBWM","date":"1588301919","viewed":118,"name":"composing julia sets","username":"matthen","description":"top left julia set is composed with top right to give the bottom one","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["fractal","julia"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// based on https://www.shadertoy.com/view/tsBcDc\n\n#define ITER 256.\n#define SCALE 6.\n\nvec3 gradient(in float r) {\t\n    r /= 12.;\n    r = max(r, 0.04);\n    r = pow(r, 0.13);\n    vec3 rainbow = 0.5 + 0.5 * cos((5.5 * r + vec3(0.2, 0.45, 0.8)*6.));\n    \n    return rainbow;\n}\n\n\nvec4 fractal(vec2 z, vec2 c1, vec2 c2) {    \n    for (float i = 0.; i < ITER; ++i) {\n        vec2 c = mod(i, 2.) * c1 + (1. - mod(i, 2.)) * c2;\n  \t\t      \n        z = vec2(\n            z.x*z.x - z.y*z.y + c.x,\n            2.0 * z.x*z.y + c.y\n        );\n        \n\n        float distSqr = dot(z, z);\n        \n        if (distSqr > 16.0)\n            return vec4(gradient(float(i) + 1.0 - log2(log(distSqr) / 2.0)), 1.);\n    }\n    \n    return vec4(0.0, 0.0, 0.0, 1.0);\n}\n\nfloat mixFactor(in float a, in float b) {\n    a *= 10.;\n    b *= 10.;\n    \n\treturn exp(a) / (exp(a) + exp(b));   \n    \n}\n\nvec2 getCoord(in vec2 uv, in vec2 centre) {\n    return SCALE * (uv - centre);\n        \n}\n\nvec2 centre(in float t) {\n    // travel around the perimeter of the Mandelbrot set.\n    t = clamp(0., 1., 2. * t) + (t - 0.5) * 9. / 9.5;\n    \n    if (t < 1.) {\n\t    return vec2(-1.5 + 0.25 * t, 0.);\n    } else if (t < 3.) {\n        t = 3.141593 * (t - 1.) / 2.;\n    \treturn vec2(-0.25 * cos(t) - 1., 0.25 * sin(t));\n    } else if (t < 7.) {\n     \tt = 3.141593 * (t - 3.) / 4.;\n        vec2 c = vec2(-cos(t), -sin(t));\n        c *= (1. + cos(t)) / 2.;\n        c.x += 0.2499;\n        return c;\n    } else {\n        t = (t - 7.) / 3.;\n    \treturn vec2(0.25 - 1.75 * t, sin(2. * 6.281 * t)/ (1. + 2. * t));   \n        \n    }  \n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord  - 0.5 * iResolution.xy) / iResolution.y;\n    float ar = iResolution.x / iResolution.y;\n    \n    \n    float t = mod(iTime * 0.5, 10.);\n    \n    vec2 c1 = centre(t);\n    // c1 = 2. * (iMouse.xy  - 0.5 * iResolution.xy) / iResolution.y;\n    vec2 c2 = vec2(0.38, -0.65);\n    \n    vec2 centre1 = 0.4 * vec2(-1.2, 0.5);\n    vec2 centre2 = 0.4 * vec2(1.2, 0.5);\n    vec2 centre3 = 0.4 * vec2(0., -0.5);\n    \n    vec2 coord = getCoord(uv, centre1);\n    vec4 julia1 = fractal(coord, c1, c1);\n    coord = getCoord(uv, centre2);\n    vec4 julia2 = fractal(coord, c2, c2);\n    coord = getCoord(uv, centre3);\n    vec4 juliamix = fractal(coord, c1, c2);\n    \n    float distance1 = length(uv - centre1);\n    float distance2 = length(uv - centre2);\n    float distance3 = length(uv - centre3);\n    \n    fragColor = mix(\n        julia1,\n        julia2,\n        mixFactor(distance1, distance2)\n    );\n    fragColor = mix(\n        fragColor,\n        juliamix,\n        mixFactor(min(distance1, distance2), distance3)\n    );\n\t\n}","name":"Image","description":"","type":"image"}]}