{"ver":"0.1","info":{"id":"sllSDs","date":"1626878936","viewed":142,"name":"Continuous Factorial Approx. II","username":"oneshade","description":"Extending [url=https://www.shadertoy.com/view/stl3DS]https://www.shadertoy.com/view/stl3DS[/url]","likes":8,"published":3,"flags":0,"usePreview":0,"tags":["approximation","gamma","continuous","factorial","specialfunction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// To compute any part of the gamma function we only\n// need to be able to compute it in the 0 to 1 range\n// and the rest can be computed exactly from that\n// by using these properties:\n// (x + 1)! = x!(x + 1)\n// (x - 1)! = x!/x\n\n// Now using a least squares fit\n// To approximate the 0 to 1 range\n\n#define draw(d, c) color = mix(color, c, smoothstep(unit, 0.0, d))\n\n// Approximate error (in the short range approximation): 0.00000317535198105\n// The short range approximation is then analytically extended to the rest of the function\n#define factorial01(x) (((((0.07288448978215456 * x - 0.31390051543712616) * x + 0.6538907084614038) * x - 0.810425715520978) * x + 0.9737655441276729) * x - 0.5761851668648887) * x + 0.9999830044034752\nfloat factorial(in float x) {\n    float h = floor(x), f = x - h, y = factorial01(f);\n    if (x < 0.0) for (float n=0.0; n < -h; n++) y /= f - n;\n    else for (float n=1.0; n < h + 1.0; n++) y *= f + n;\n    return y;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 8.0;\n    float unit = 16.0 / iResolution.y;\n    vec3 color = vec3(1.0);\n\n    // Grid\n    draw(abs(fract(uv.x + 0.5) - 0.5) + 0.25 * unit, vec3(0.0, 0.0, 1.0));\n    draw(abs(fract(uv.y + 0.5) - 0.5) + 0.25 * unit, vec3(0.0, 0.0, 1.0));\n    draw(abs(uv.x), vec3(1.0, 0.0, 0.0));\n    draw(abs(uv.y), vec3(1.0, 0.0, 0.0));\n\n    // Draw the function\n    vec2 y = vec2(factorial(uv.x), 0.0);\n    y.y = (factorial(uv.x + 0.001) - y.x) / 0.001;\n    draw(abs(uv.y - y.x) / sqrt(1.0 + y.y * y.y) - 0.01, vec3(0.6, 0.0, 0.8));\n\n    // Draw continuous Pascal's triangle\n    //float n = uv.x + 8.0;\n    //float k = uv.y + 4.0;\n    //float binCoeff = round(factorial(n) / (factorial(k) * factorial(n - k)));\n    //color = vec3(binCoeff * 0.01);\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}