{"ver":"0.1","info":{"id":"tsKXzm","date":"1573800799","viewed":313,"name":"Voronoi edge extraction explaine","username":"fancyzero","description":"an animation to explain the process of edge extraction of a single Voronoi cell\n\ntodo: add on-screen comments","likes":19,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","edge"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2019 ZhouLin \n\n\n// a demo shows how to extract edge of a single cell of 5 sites voronoi diagram\n// the red point: voronoin site\n// the blue line: segment defined by two sites\n// the green point: middle point of connection lines\n// the brown line: a line  perpendicular to connection line and pass middle point\n\n#define POINT_COUNT 5\nvec2 sites[POINT_COUNT];\n\nvec3 EdgeColor1 = vec3(0.,0.,0.)/255.0;\nvec3 EdgeColor2 = vec3(255.,255.,255.)/255.0;\n\n#define saturate(x) clamp(x,0.,1.)\n\nvec2 DistToLine( vec2 uv, vec2 o, vec2 d )\n{\n    float t = dot(uv-o, d);\n    d = d.yx*vec2(-1.,1.);\n    float dist = dot(uv-o,d);\n    return vec2(abs(dist), t);\n}\n\nvec4 DrawPoint( vec2 uv, vec2 pos, vec3 col, float size)\n{\n    size *= 0.03;\n    float dist = length(uv- pos);\n    return vec4(col,smoothstep(0.,size,(size- dist)*1.5));\n}\n\nvec4 DrawSites( float dist )\n{\n    return vec4(1.,0.,0., clamp((1.-dist*40.)*2., 0.,1.));\n}\n\nvec4 DrawLineSegment(vec2 a, vec2 b, vec2 uv)\n{\n    if (dot(a-b,a-b) < 0.0001)\n        return vec4(0.,0.,0.,0.);\n\tvec2 o = (a+b)/2.;\n    vec2 d = normalize(a-b);\n        \n    vec2 dist = DistToLine(uv, o, d);\n\n    \n    float brightness = smoothstep(0.995,1.,1.-dist.x)*2.;\n    return  saturate(vec4(1.,1.,1., brightness*saturate(ceil(1.-abs((dist.y)/length(a-b)*2.)))));    \n}\n\n\nvec4 GetEdgeLine(vec2 a, vec2 b)\n{\n    return vec4((b + a)/2.,normalize(a-b).yx * vec2(-1.,1.));\n}\n\nvec4 DrawEdgeLine(vec2 a, vec2 b, vec2 uv, float size)\n{\n    vec4 edge = GetEdgeLine(a,b);\n\tvec2 o = edge.xy;\n\tvec2 d = edge.zw;\n\tvec4 ret = (DrawLineSegment(o+d*size, o-d*size,uv));\n    ret.xyz = vec3(.8,0.4,0.2);\n    return ret;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    sites[0]=vec2(0.6,0.2);\n    sites[1]=vec2(1.2,.8);\n    sites[2]=vec2(0.9,0.5);\n    sites[3] =vec2(0.45,0.733);\n    sites[4]=vec2(0.9,0.12);\n\n    float time = iTime;\n    vec2 uv = fragCoord/iResolution.y;\n\tfloat threshDist = time/10.;\n\n    float minDist = 1000.;\n    vec2 minP;\n\n    for ( int i = 0; i < POINT_COUNT; i++)\n    {\n\t\tvec2 p = sites[i];\n        float dist = length(uv - p );\n        if ( minDist > dist )\n        {\n            minP = p;\n            minDist = dist;  \n        }\n    }    \n\n    float rawDist = minDist;\n    if ( minDist > threshDist)\n    {\n        minDist = 1.;\n    }\n    else\n    {\n        minDist = smoothstep(-1.,1.,sin(minDist*150.)) * (1.-minDist*0.8);\n    }\n\n    vec4 siteCol = DrawSites(rawDist);\n    vec4 col = mix( vec4(minDist),siteCol, siteCol.a);\n\n    const int EXAMPLE_SITE = 2;\n    \n    float tOffset = 5.;\n    vec4 c = vec4(.0,.4,.8,1.)*DrawLineSegment(sites[EXAMPLE_SITE], mix(sites[EXAMPLE_SITE],sites[0],saturate(time-tOffset)), uv);\n    col = mix(col, c, c.a);   \n    tOffset+=1.;        \n    c = DrawPoint(uv, (sites[EXAMPLE_SITE]+sites[0])*0.5,vec3(0.,1.,0.),saturate(time-tOffset));\n    col = mix(col, c, c.a);\n    tOffset+=1.;\n    \n\tc = vec4(.0,.4,.8,1.)*DrawLineSegment(sites[EXAMPLE_SITE], mix(sites[EXAMPLE_SITE],sites[1],saturate(time-tOffset)), uv);\n    col = mix(col, c, c.a);\n    tOffset+=1.;\n    c = DrawPoint(uv, (sites[EXAMPLE_SITE]+sites[1])*0.5,vec3(0.,1.,0.),saturate(time-tOffset));\n    col = mix(col, c, c.a);\n    tOffset+=1.;\n    \n\tc =vec4(.0,.4,.8,1.)* DrawLineSegment(sites[EXAMPLE_SITE], mix(sites[EXAMPLE_SITE],sites[3],saturate(time-tOffset)), uv);\n    col = mix(col, c, c.a);\n    tOffset+=1.;\n        c = DrawPoint(uv, (sites[EXAMPLE_SITE]+sites[3])*0.5,vec3(0.,1.,0.),saturate(time-tOffset));\n    col = mix(col, c, c.a);\n    tOffset+=1.;\n    \n\tc =vec4(.0,.4,.8,1.)* DrawLineSegment(sites[EXAMPLE_SITE], mix(sites[EXAMPLE_SITE],sites[4],saturate(time-tOffset)), uv);\n    col = mix(col, c, c.a); \n    tOffset+=1.;\n    c = DrawPoint(uv, (sites[EXAMPLE_SITE]+sites[4])*0.5,vec3(0.,1.,0.),saturate(time-tOffset));\n    col = mix(col, c, c.a);\n    tOffset+=1.;\n\n\n \n   \tc = DrawEdgeLine( sites[EXAMPLE_SITE],sites[0],uv, saturate(time - tOffset));\n    col = mix( col, c,c.a);\n\ttOffset+=1.;\n    \n    c = DrawEdgeLine( sites[EXAMPLE_SITE],sites[1],uv, saturate(time - tOffset));\n    col = mix( col, c,c.a);\n\ttOffset+=1.;\n    \n    c = DrawEdgeLine( sites[EXAMPLE_SITE],sites[3],uv, saturate(time - tOffset));\n    col = mix( col, c,c.a);\n\ttOffset+=1.;\n    \n    c = DrawEdgeLine( sites[EXAMPLE_SITE],sites[4],uv, saturate(time - tOffset));\n    col = mix( col, c,c.a);\n\ttOffset+=1.;\n    \n    // mask for point example_site\n    vec4 edge;\n    float mask = 1.;\n    edge = GetEdgeLine(sites[EXAMPLE_SITE],sites[0]);\n   \tmask = (ceil(-dot(uv-edge.xy, edge.wz*vec2(-1.,1.))));\n    edge = GetEdgeLine(sites[EXAMPLE_SITE],sites[1]);\n    mask*= (ceil(-dot(uv-edge.xy, edge.wz*vec2(-1.,1.))));\n    edge = GetEdgeLine(sites[EXAMPLE_SITE],sites[3]);\n    mask*= (ceil(-dot(uv-edge.xy, edge.wz*vec2(-1.,1.))));\n    edge = GetEdgeLine(sites[EXAMPLE_SITE],sites[4]);\n    mask*= (ceil(-dot(uv-edge.xy, edge.wz*vec2(-1.,1.))));    \n    \n\n    \n    float maskProgress = saturate(time-tOffset);\n\n    float mask2Progress = saturate(time-tOffset);\n    tOffset +=1.;\n    \n    vec4 col2 = vec4(1.0);\n    float mask2 = saturate(mask + 0.3);\n    //min distance to edge0\n    edge = GetEdgeLine(sites[EXAMPLE_SITE],sites[0]);\n    float distToEdge0 = DistToLine( uv, edge.xy, edge.zw).x;\n    //min distance to edge0 and 1\n    edge = GetEdgeLine(sites[EXAMPLE_SITE],sites[1]);\n    float distToEdge1 =DistToLine( uv, edge.xy, edge.zw).x;\n    edge = GetEdgeLine(sites[EXAMPLE_SITE],sites[3]);\n    float distToEdge3=  DistToLine( uv, edge.xy, edge.zw).x;\n    edge = GetEdgeLine(sites[EXAMPLE_SITE],sites[4]);\n    float distToEdge4 =  DistToLine( uv, edge.xy, edge.zw).x;    \n    \n    if (distToEdge0 > saturate(time-tOffset))\n        distToEdge0 = 100.;    \n    tOffset++;\n    if (distToEdge1 > saturate(time-tOffset))\n        distToEdge1 = 100.;    \n    tOffset++;\n    if (distToEdge3 > saturate(time-tOffset))\n        distToEdge3 = 100.;    \n    tOffset++;\n    if (distToEdge4 > saturate(time-tOffset))\n        distToEdge4 = 100.;        \n    tOffset++;\n    \n    float distToEdge =saturate( min(min(distToEdge0, distToEdge1),min(distToEdge3, distToEdge4)));\n\n    //min distance to edge0 and 1 and 3\n    //min distance to edge0 and 1 and 3 and 4\n    \n    \n    col2 =vec4(distToEdge);\n    tOffset +=1.;\n    vec3 colDistToEdgeIsoLine = mix(EdgeColor1, EdgeColor2,(smoothstep(-1.,0.3,sin(distToEdge*200.)))*((distToEdge)*2.5+0.3));\n    col2.xyz = mix(col2.xyz, colDistToEdgeIsoLine, saturate(time-tOffset+5.));\n    \n   \tcol = mix(vec4(0.),col,mix(1.,mask2,mask2Progress));\n    col = mix( col, col2,maskProgress*mask);\n    fragColor = col;\n    \n}","name":"Image","description":"","type":"image"}]}