{"ver":"0.1","info":{"id":"dlj3Wz","date":"1673181178","viewed":110,"name":"Relic's illusion","username":"Flopine","description":"A quick doodle based on borisipsum's amazing work!\nhttps://www.instagram.com/borisipsum/","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","lighting","modeling","brutalist"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings, FabriceNeyret and Blackle for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n\n// based on borisipsum's amazing work!\n// https://www.instagram.com/borisipsum/\n\n#define PI acos(-1.)\n#define TAU (2.*PI)\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\n#define od(p,d) (dot(p,normalize(sign(p)))-d)\n\n\nvoid mo (inout vec2 p, vec2 d)\n{\n    p = abs(p)-d;\n    if(p.y>p.x)p=p.yx;\n}\n\nvoid moda (inout vec2 p, float rep)\n{\n    float per = TAU/rep;\n    float a = mod(atan(p.y,p.x)+per*.5, per)-per*.5;\n    p = vec2(cos(a),sin(a))*length(p);\n}\n\nfloat box (vec3 p, vec3 c)\n{\n    vec3 q = abs(p)-c;\n    return min(0., max(q.x, max(q.y, q.z)))+length(max(q,0.));\n}\n\nfloat prim1 (vec3 p)\n{\n    vec3 pp = p;\n    moda(p.xy, 4.);\n    p.yz *= rot(PI/4.);\n    float d = box(p,vec3(.65, .08, .1));\n    \n    p = pp;\n    mo(p.xy,vec2(.82));\n    p.xy *= rot(PI/4.);\n    d =  min(od(p, .3), d);\n    \n    return d;   \n}\n\nfloat SDF (vec3 p)\n{\n    p.z -= texture(iChannel0, p.xy*.7).x*.01;\n    vec3 pp = p;\n    \n    p.xy *= rot(PI/4.);\n    float d = box(p,vec3(2., 2., .5));\n    \n    p = pp;\n    p.z += .5;\n    mo(p.xy,vec2(sqrt(2.)));\n    p.xy *= rot(PI/4.);\n    d =  max(-od(p, .25), d);\n    \n    p = pp;\n    p.z += .5;\n    mo(p.xy,vec2(.3));\n    d =  max(-od(p, .15), d);\n\n    p = pp;\n    p.z += .5;\n    moda(p.xy, 4.);\n    p.x -= 1.6;\n    d = max(d, -prim1(p));\n    \n    return d;\n}\n\nvec3 gn (vec3 p)\n{\n    vec2 eps = vec2(0.0001, 0.);\n    return normalize(SDF(p)-vec3(SDF(p-eps.xyy),SDF(p-eps.yxy),SDF(p-eps.yyx)));\n}\n    \nfloat spec (vec3 rd, vec3 l, vec3 n)\n{return pow(max(dot(n,normalize(l-rd)), 0.), 20.);}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    vec3 ro=vec3(0.001, 0.001, -3.5), rd=normalize(vec3(uv, 1.)), p=ro,\n    col=vec3(.449, .617, .508)*.8, \n    l=vec3(.5+cos(iTime), .5+sin(iTime), -1.5);\n    \n    bool hit=false;\n    for(float i=0.; i<64.; i++)\n    {\n        float d = SDF(p);\n        if (d<0.001)\n        {\n            hit=true; break;\n        }\n        p += d*rd;\n    }\n    \n    if (hit)\n    {\n        vec3 n = gn(p);\n        float li = max(dot(n,normalize(l)),0.);\n        col = mix(vec3(.375, .344, .359)*.6, vec3(.898, .623, .488), li);\n        col += spec(rd,l,n)*vec3(.418, .613, .765)*.5;\n    }\n    \n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}