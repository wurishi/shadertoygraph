{"ver":"0.1","info":{"id":"NdXfW8","date":"1644856174","viewed":748,"name":"East Venture","username":"panna_pudi","description":"Click on joystick or use WASD and arrows to explore map.","likes":33,"published":1,"flags":48,"usePreview":0,"tags":["2d","mouse","fbm","keyboard","design","gui","style","japanese","console"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// East Venture by Pudi\n// Email: k.a.komissar@gmail.com\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n// Thanks to Flopine, provod, YX, NuSan, slerpy, wwrighter, Shane, z0rg, Tater\n// BigWings, FabriceNeyret, iq, and Blackle for sharing their knowledge\n//\n// Interactive! Try to click on joystick and press on arrows or wasd.\n//\n// Fabrice wanted some sliders and interactivity in wrighter's shader...\n// https://www.shadertoy.com/view/wsccD2\n\nvec2 rags;\n\nfloat scross(vec2 uv, float w) {\n    float d = sd_line(uv,  vec2(-w, 0),  vec2(w, 0));\n    return min(d, sd_line(uv, vec2(0, -w), vec2(0, w)));\n}\n\nvec4 borders(vec2 uv) {\n    float w = 0.5;\n    float d = 1e9;\n    vec2 auv = abs(uv);\n    d = min(d, scross(auv - vec2(1.73, 0.95), w));\n    auv = vec2(uv.x, abs(uv.y));\n    d = min(d, scross(auv - vec2(0.6, 0.95), w));\n    d = max(d, -sd_box(uv - vec2(1.25, 0.), vec2(0.2, 2.)));\n    return vec4(vec3(1.), AAstep(d, 0.008));\n}\n\nvec4 grid(vec2 uv) {\n    float t = iTime * .15 + 60.;\n\n    vec3 col = vec3(0.);\n    float mask = 0.;\n    float scl = 15.;\n    \n    vec2 id = floor(uv * scl);\n    vec2 grid = fract(uv * scl) - .5;\n    float f = fbm((id.xyx * .055) + vec3(0., t, 0.), 3.);\n    \n    if((uv.x > 0.935 && uv.x < 1.6 ) && (uv.y > -.735 && uv.y < .735)) {\n        // lines\n        mask += AAstep(abs(grid.y),.1);\n        col = mix(col, vec3(.5), mask);\n        \n        // circles\n        if (f > .5) {\n            mask = smoothstep(0.1, 0., length(grid) - .4);\n            vec3 c =  hue(.1 - floor(f * 50.) * .016);\n            col = mix(col, c, mask);\n       }\n    }\n    return vec4(col, mask);\n}\n\nfloat leaf(vec2 p) {\n\tfloat c = length(p) - 0.1;\n    p *= 0.5;\n    float c2 = length(p - vec2(0.06)) - 0.085;\n    c = max(c, -c2);\n    return c;\n}\n\nvec4 kirri(vec2 p){\n    float t = iTime * 0.05;\n    float n = 5.;\n    float deg = TAU / n;\n    float d = 1e9;\n    for(float i = 0.0; i < n; ++i) {\n        float a = deg * i + t;\n        mat2 r = rot(a);\n        float dist = 0.11;\n        vec2 off = vec2(sin(a), cos(a)) * dist;\n\n       \tfloat l = leaf((p + off) * r);\n        d = min(d, l + rags.x);\n    }\n\n    float c = length(p) - 0.025;\n    d = min(d, c);\n    \n    p *= rot(t * 10.);\n    p += rags * 2.;\n    d = min(d, abs(length(p) - 0.25) - 0.01);\n    \n    d = AAstep(d - 0.01, 0.);\n    return vec4(vec3(0.9, 0.1, 0.1), d);\n}\n\nvec3 overlay(vec2 uv) {\n    vec4 b = borders(uv);\n    vec4 g = grid(uv);\n    vec4 r = kirri(uv - vec2(0.6, 0.));\n    \n    vec3 res = vec3(0.);\n    res = mix(res, b.rgb, b.w);\n    res = mix(res, g.rgb, g.w);\n    res = mix(res, r.rgb, r.w);\n    \n    return res;\n}\n\nvec4 controller(vec2 uv) {\n    vec3 col = vec3(0.);\n    \n    float scl = 7.;\n    float d = sd_blobby_cross(uv * scl, .9) / scl - 0.08;\n    vec2 q = uv * 20.;\n    q *= rot(PI / 4.);\n    float s = clamp(length(q) * abs(q.x) * abs(q.y), 0.1, 1.);\n    col = mix(col, vec3(206, 208, 206) / 255. * s, AAstep(d, 0.)); \n\n    float shadow = sd_blobby_cross((uv - vec2(0.025, -0.025)) * scl, .7) / scl - 0.08;\n    col = mix(col, vec3(0.), max(shadow, -d)); \n    d = min(shadow, d);\n   \n    vec4 buttons = texelFetch(iChannel3, BUTTONS, 0);\n    if (buttons.x > 0.5) {\n        col = mix(col, vec3(0.1), AAstep(length(uv + vec2(0.14, 0.)) - 0.1, 0.));\n    }\n    if (buttons.y > 0.5) {\n        col = mix(col, vec3(0.1), AAstep(length(uv - vec2(0., 0.14)) - 0.1, 0.));\n    }\n    if (buttons.z > 0.5) {\n        col = mix(col, vec3(0.1), AAstep(length(uv - vec2(0.14, 0.)) - 0.1, 0.));\n    }\n    if (buttons.w > 0.5) {\n        col = mix(col, vec3(0.1), AAstep(length(uv + vec2(0., 0.14)) - 0.1, 0.));\n    }\n    \n    uv = pmod(uv, 4.);\n    uv *= rot(PI / 4.);\n    uv -= vec2(0.1, 0.1);\n    float c = sd_circle(uv, 0.045);\n    col = mix(col, vec3(0.), AAstep(c, 0.));\n    \n    return vec4(col, AAstep(d, 0.));\n}\n\n// Learned about this pattern from z0rg\nvec4 seigaiha(vec2 uv) {\n    vec3 col = vec3(0.);\n    float d = 1e9;\n\n    float rep = 0.26;\n\n    for (int i = 0; i < 8; ++i) {\n        vec2 p = uv;\n        p -= vec2(0.13, -0.15) * float(i);\n        p.x = p.x - rep * clamp(round(p.x / rep), -2., 2.);\n\n        float c = sd_circle(p, 0.15);\n        float waves = sin(length(p) * 255.) - .4;\n        \n        vec3 rgb = mix(vec3(0.07, 0.407, 0.225),\n                       vec3(0.96, 0.81, 0.258), clamp(waves * 2., 0., 1.));\n        col = mix(col, rgb * (p.y * 10. + .6), AAstep(c, 0.));\n        d = min(d, c);\n    }\n\n    return vec4(col, d);\n}\n\nvec4 post_stamp(vec2 uv) {\n    vec2 nuv = uv + rags;\n    float d = 1e9;\n    float a = atan(uv.y, uv.x);\n    vec3 col = vec3(0.);\n    vec3 red = vec3(254, 54, 53) / 255.;\n    \n    float paper = sd_box(nuv, vec2(0.22, 0.25)) + sin(a * 25.) * 0.006;\n    col = mix(col, vec3(0.8, 0.8, 0.25), AAstep(paper, 0.));\n    \n    float sun = sd_circle(uv - vec2(0.08, 0.1), 0.07);\n    col = mix(col, red, AAstep(sun, 0.));\n    \n    float border = sd_box(uv, vec2(0.18, 0.21));\n    col = mix(col, red, AAstep(abs(border) - 0.015, 0.));\n    \n    uv.y += 0.02;\n    float mountain = sd_box(uv, vec2(1., 0.13));\n    uv.x = abs(uv.x);\n    uv.y -= 0.08;\n    mountain = max(mountain, - sd_circle(uv - vec2(0.32, 0.), 0.27));\n    vec3 c = mix(vec3(1.), red, smoothstep(0.1, -0.17, uv.y));\n    col = mix(col, c, AAstep(mountain, 0.));\n    \n    d = min(d, paper);\n    return vec4(col, AAstep(d, 0.));\n}\n\nvec3 BOY(vec2 uv) {\n    vec3 col = vec3(0.);\n    \n    vec2 nuv = uv + rags * 1.3;\n    float d = 1e9;\n\n    // base\n    float boy = sd_box(nuv, vec2(0.7, 0.69)) - 0.1;\n    d = AAstep(boy, 0.);\n    float gran = texture(iChannel2, uv).r;\n    gran = pow(gran, 10.);\n    col = mix(col, vec3(.9, .9, 0.6) - gran, d);\n    float shadow = max(-boy, sd_box(nuv - vec2(0.05, -0.05), vec2(0.7, 0.69))-0.1);\n    col = mix(col, vec3(.1), AAstep(shadow, 0.));\n    \n    //screen\n    float screen = sd_box(nuv - vec2(0., 0.2), vec2(0.6, 0.4));\n    {\n        vec2 q = uv - vec2(0., 0.2);\n        q = (q / vec2(iResolution.x / iResolution.y, 1.) * 0.5 + 0.5);\n        q.x += clamp(sin((q.y + mod(iTime * 10.0, 3.5)) * 50.) - .9, 0., 1.)*.02;\n\n        vec3 tex = texture(iChannel0, q).rgb;\n        tex *= clamp(.7 + .3 * hash21(q * sin(iTime)), 0., 1.);\n        \n        col = mix(col, tex, AAstep(screen, 0.));\n    }\n    d = min(d, abs(screen) - 0.02);\n    col = mix(col, vec3(0.), AAstep(d, 0.));\n    \n    vec4 s = seigaiha(uv - vec2(-1.35, .25) - rags * 0.2);\n    s.w = max(s.w, boy);\n    s.w = max(s.w, -(screen - 0.01 - rags.x));\n    s.w = AAstep(s.w, 0.);\n    col = mix(col, s.rgb, s.w);\n  \n    // border\n    d = sd_box(nuv, vec2(0.72, 0.72));\n    {\n        vec2 q = nuv;\n        q *= rot(PI / 4.);\n        d = max(d, sd_box(q, vec2(0.9, 1.)));\n    }\n    d = abs(d) - 0.01;\n    col = mix(col, vec3(0.), AAstep(d, 0.));\n\n    vec4 ctrl = controller(uv - vec2(0.4, -0.45));\n    col = mix(col, ctrl.rgb, ctrl.w);\n    \n    uv -= vec2(-0.7, -0.6);\n    uv *= rot(-PI / 6.);\n    vec4 stamp = post_stamp(uv);\n    col = mix(col, stamp.rgb, stamp.w);\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    \n    rags = texture(iChannel1, uv).xy * 0.01\n         + texture(iChannel2, uv * 0.05).xy * 0.005\n         - texture(iChannel2, uv * 0.45).xy * 0.01;\n\n    vec3 col = vec3(0.1);\n    col += overlay(uv);\n\n    col += BOY(uv + vec2(0.6, 0.));\n    \n    // grains\n    col = mix(col, col + .06, hash21(uv));\n    \n    col = pow(col, vec3(1. / .9));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const float PI = acos(-1.);\nconst float TAU = PI * 2.;\n\n#define OFFSET ivec2(0, 0)\n#define BUTTONS ivec2(1, 0)\n\n#define AAstep(x0, x) clamp(((x) - (x0)) / (2. * 2. / iResolution.y), 0., 1.)\n\nmat2 rot(float a) {\n    float c = cos(a), s = sin(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat hash(float x){\n    return fract(sin(x * 234.15) * 4840.9431);\n}\n\nfloat hash21(vec2 p) {\n    return fract(sin(dot(p, vec2(23.43, 84.21))) * 4832.3234);\n}\n\nvec2 pmod(vec2 p, float r) {\n    float a = atan(p.y, p.x) + 2.0 * PI / r * 0.5;\n    float n = 2.0 * PI / r;\n    a = floor(a / n) * n;\n    return p * rot(-a);\n}\n\nfloat sd_line(vec2 p, vec2 a, vec2 b) {\n    float k = dot(p - a, b - a) / dot(b - a, b - a);\n    float hit = clamp(k, 0., 1.);\n    return distance(p, mix(a, b, hit));\n}\n\nfloat sd_box(vec2 p, vec2 h){\n    p = abs(p) - h;\n    return length(max(p, 0.0)) + min(0., max(p.x, p.y));\n}\n\nfloat sd_circle(vec2 p, float r) {\n    return length(p) - r;\n}\n\n// iq - https://iquilezles.org/articles/distfunctions2d\nfloat sd_blobby_cross(in vec2 pos, float he) {\n    pos = abs(pos);\n    pos = vec2(abs(pos.x - pos.y), 1.0 - pos.x - pos.y) / sqrt(2.0);\n\n    float p = (he - pos.y - 0.25 / he) / (6.0 * he);\n    float q = pos.x / (he * he * 16.0);\n    float h = q * q - p * p * p;\n\n    float x;\n    if (h > 0.0) {\n        float r = sqrt(h);\n        x = pow(q + r, 1.0 / 3.0) - pow(abs(q - r), 1.0 / 3.0) * sign(r - q);\n    } else {\n        float r = sqrt(p);\n        x = 2.0 * r * cos(acos(q / (p * r)) / 3.0);\n    }\n    x = min(x, sqrt(2.0) / 2.0);\n\n    vec2 z = vec2(x, he * (1.0 - 2.0 * x * x)) - pos;\n    return length(z) * sign(z.y);\n}\n\n// iq - https://iquilezles.org/articles/palettes\nvec3 hue(float t){ \n    return .525 + .475 * cos(TAU * t * \n                            (vec3(0.945, 0.31, 0.663) + vec3(0.47,0.667,0.933))); \n}\n\n// Shane - tightly compacted, self-contained version of IQ's 3D value noise function.\nfloat n3D(vec3 p){\n    const vec3 s = vec3(113, 57, 27);\n    vec3 ip = floor(p); p -= ip; \n    vec4 h = vec4(0., s.yz, s.y + s.z) + dot(ip, s);\n    p *= p*p*(p*(p*6. - 15.) + 10.); // Smoother alternative.\n    h = mix(fract(sin(h)*4378.5453), fract(sin(h + s.x)*4378.5453), p.x);\n    h.xy = mix(h.xz, h.yw, p.y);\n    return mix(h.x, h.y, p.z); // Range: [0, 1].\n}\n\n// iq - fbm generator\nfloat fbm(in vec3 x, float oct) {\n    const float scale  = .8;\n    float a = .0,b = .5,f = 2.;\n    vec3  d = vec3(0.);\n    for( float i=0.; i < oct; i++ ) {      \n        float n = n3D(f * x * scale);\n        a += b*n;\n        b *= 0.5;\n        f *= 1.8;\n    }\n\treturn a;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Input handling\n\n#define store(P, V) if (all(equal(ivec2(fragCoord), P))) fragColor = V\n#define load(P) texelFetch(iChannel0, ivec2(P), 0)\n#define key_pressed(K)  step(0.5, texelFetch(iChannel1, ivec2(K, 0), 0).x) > 0.\n\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\n\nconst int KEY_W = 87;\nconst int KEY_A = 65;\nconst int KEY_D = 68;\nconst int KEY_S = 83;\n\nconst ivec2 MEMORY_BOUNDARY = ivec2(2, 2);\n\nvec4 process_mouse() {\n    vec4 res = vec4(0.);\n    vec2 m = 2. * iMouse.xy / iResolution.xy - 1.;\n    m.x *= iResolution.x / iResolution.y;\n    m *= 100.;\n    if (iMouse.z < 0.5 && iMouse.w < 0.5) return res; \n    \n    m -= vec2(-15., -45.);\n    if (m.y > -10. && m.y < 10. && m.x < -5. && m.x > -25.) {\n        res.x = 1.;\n    }\n    if (m.y > 5. && m.y < 25. && m.x < 5. && m.x > -15.) {\n        res.y = 1.;\n    }\n    if (m.y > -10. && m.y < 10. && m.x < 25. && m.x > 0.) {\n        res.z = 1.;\n    }\n    if (m.y > -25. && m.y < -5. && m.x < 5. && m.x > -15.) {\n        res.w = 1.;\n    }\n    return res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    if (any(greaterThan(ivec2(fragCoord), MEMORY_BOUNDARY))) return;\n\n    if(iFrame < 10){\n        fragColor = vec4(0.);\n        return;\n    }\n    \n    float speed = 0.05;\n    vec2 off = load(OFFSET).xy;\n    vec4 b = vec4(0.);\n    vec4 m = process_mouse();\n   \n    if (key_pressed(KEY_LEFT) || key_pressed(KEY_A) || m.x > 0.5) {\n        b.x = 1.;\n        off.x -= speed;\n    }\n    if (key_pressed(KEY_UP) || key_pressed(KEY_W) || m.y > 0.5) {\n        b.y = 1.;\n        off.y += speed;\n    }\n    if (key_pressed(KEY_RIGHT) || key_pressed(KEY_D) || m.z > 0.5) {\n        b.z = 1.;\n        off.x += speed;\n    }\n    if (key_pressed(KEY_DOWN) || key_pressed(KEY_S) || m.w > 0.5) {\n        b.w = 1.;\n        off.y -= speed;\n    }\n   \n    store(BUTTONS, b);\n    store(OFFSET, vec4(off, 0., 0.));   \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Screen content\n// Heavily inspired by Yusef's recent work\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y;\n    uv *= 9.;\n    float time = iTime;\n    uv *= 0.9 + dot(uv, uv) * 0.009;\n\n    uv += texelFetch(iChannel1, ivec2(OFFSET), 0).xy;\n\n    vec3 col = vec3(0.);\n    for(float i = 1.; i < 6.; i++){\n        float j = pow(hash(i) * 0.6, .25);\n        vec3 c = vec3(j * 0.7, j * j, j * j * j * 0.27);\n        uv = uv + vec2(time / (80. - i * 2.), 0.);\n        \n        float faa = fbm(uv.xyy + i * 50., 4.);\n        float shadow = smoothstep(0.5, 0.3, faa);\n        col=mix(col, c * 0.25, shadow * 0.5);\n      \n        uv = uv + vec2(time / (80. + i * 8.), 0.);\n        float faa2 = fbm(uv.yxy + i * 100. + .03, 4.);\n        float shadow2 = clamp(smoothstep(0.4, 0.36, faa2), 0., 1.);\n        col = mix(col, vec3(0.), shadow2 * 0.6);\n      \n        float f = max(0., smoothstep(0.4,0.39, fbm(uv.xyx + faa, 4.)));\n        float g = max(0., smoothstep(0.5,0.29, faa));  \n        col = mix(col, c - (texture(iChannel0, uv + faa).rbg) * 0.5, f);\n    }\n    vec2 d = abs(fragCoord / iResolution.xy - vec2(0.5)) * 3.51;\n    d = pow(d, vec2(2.0));\n    col *= pow(clamp(1.0 - dot(d, d), 0., 1.0), 2.5);\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}