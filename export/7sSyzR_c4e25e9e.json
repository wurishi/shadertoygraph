{"ver":"0.1","info":{"id":"7sSyzR","date":"1642988445","viewed":155,"name":"dambreak 3","username":"Kitesurf_m8s","description":"khgcf","likes":2,"published":3,"flags":48,"usePreview":0,"tags":["cahnhilliard"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"dambreak 2\" by Kitesurf_m8s. https://shadertoy.com/view/sdBcRR\n// 2022-01-23 22:42:17\n\n// Fork of \"dambreak\" by Kitesurf_m8s. https://shadertoy.com/view/7dfyWf\n// 2022-01-23 21:35:20\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 p = ivec2(fragCoord);\n    \n    //vec4 res = texelFetch(iChannel0,p,0);\n    //vec3 col = vec3(0.5+10.*(res.x-1.0));\n    \n    //vec4 res = texelFetch(iChannel0,p,0);\n    //vec3 col = (vec3(0.5+1.*(res.w-0.5),0.5+10.*(res.y/res.x),0.5+10.*(res.z/res.x)));\n    \n    vec4 res = texelFetch(iChannel0,p,0);\n    vec3 col = (0.5+0.5*res.w)*vec3(0.5+8.*res.yz/res.x,1.0);\n    //vec3 col = vec3(0.5+8.*res.yz/res.x,1.0);\n    //vec3 col = vec3(0.9*res.x);\n    //vec3 col = vec3(0.7+30.*prs(res.x,res.w/res.x));\n    \n    \n    //vec4 res = texelFetch(iChannel0,p,0);\n    //vec3 col = vec3(0.5+10.*res.yz,res.w);\n\n    //vec4 res = texelFetch(iChannel0,p,0);\n    //vec3 col = vec3(0.5+10.*(res.yz),10.*(res.x-1.0));\n    \n    //vec4 res = texelFetch(iChannel1,p,0);\n    //vec3 col = res.xyz;\n    \n    fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 p = ivec2(fragCoord);\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 uu = texture(iChannel0,uv+vec2(0.,2.)/iResolution.xy);\n    vec4 u = texture(iChannel0,uv+vec2(0.,1.)/iResolution.xy);\n    vec4 c = texture(iChannel0,uv+vec2(0.,0.)/iResolution.xy);\n    vec4 d = texture(iChannel0,uv+vec2(0.,-1.)/iResolution.xy);\n    vec4 dd = texture(iChannel0,uv+vec2(0.,-2.)/iResolution.xy);\n    vec4 ll = texture(iChannel0,uv+vec2(-2.,0.)/iResolution.xy);\n    vec4 l = texture(iChannel0,uv+vec2(-1.,0.)/iResolution.xy);\n    vec4 r = texture(iChannel0,uv+vec2(1.,0.)/iResolution.xy);\n    vec4 rr = texture(iChannel0,uv+vec2(2.,0.)/iResolution.xy);\n    vec4 ul = texture(iChannel0,uv+vec2(-1.,1.)/iResolution.xy);\n    vec4 ur = texture(iChannel0,uv+vec2(1.,1.)/iResolution.xy);\n    vec4 dl = texture(iChannel0,uv+vec2(-1.,-1.)/iResolution.xy);\n    vec4 dr = texture(iChannel0,uv+vec2(1.,-1.)/iResolution.xy);\n    \n    vec4 res = c;\n    res -= 0.9*CFL*(20.*D4(c)+(D4(uu)+D4(dd)+D4(ll)+D4(rr))+2.0*(D4(ul)+D4(ur)+D4(dl)+D4(dr))-8.0*(D4(u)+D4(d)+D4(l)+D4(r)));\n    res -= 0.9*CFL*((1./12.)*(Fx(ll)-Fx(rr))-(2./3.)*(Fx(l)-Fx(r)));\n    res -= 0.9*CFL*((1./12.)*(Fy(dd)-Fy(uu))-(2./3.)*(Fy(d)-Fy(u)));\n    \n    res += 0.9*CFL*((-1./12.)*(D2(ll)+D2(rr)+D2(uu)+D2(dd))+(4./3.)*(D2(l)+D2(r)+D2(u)+D2(d))-(5.)*D2(c));\n    \n    \n    \n    //res.z -= 0.9*CFL*0.0001*c.w/(c.x+0.001);\n    res.z -= 0.9*CFL*0.0002*c.x;\n    \n    \n    vec4 map = texelFetch(iChannel2,p,0);\n    if(map.x>0.5){\n        //res.x -= 0.5*(res.x-1.0);\n        res.y *= 0.9;\n        res.z *= 0.9;\n        //res.w = min(1.0,max(0.,res.w));\n    }\n    \n    fragColor = res;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 p = ivec2(fragCoord);\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 uu = texture(iChannel0,uv+vec2(0.,2.)/iResolution.xy);\n    vec4 u = texture(iChannel0,uv+vec2(0.,1.)/iResolution.xy);\n    vec4 c = texture(iChannel0,uv+vec2(0.,0.)/iResolution.xy);\n    vec4 d = texture(iChannel0,uv+vec2(0.,-1.)/iResolution.xy);\n    vec4 dd = texture(iChannel0,uv+vec2(0.,-2.)/iResolution.xy);\n    vec4 ll = texture(iChannel0,uv+vec2(-2.,0.)/iResolution.xy);\n    vec4 l = texture(iChannel0,uv+vec2(-1.,0.)/iResolution.xy);\n    vec4 r = texture(iChannel0,uv+vec2(1.,0.)/iResolution.xy);\n    vec4 rr = texture(iChannel0,uv+vec2(2.,0.)/iResolution.xy);\n    vec4 ul = texture(iChannel0,uv+vec2(-1.,1.)/iResolution.xy);\n    vec4 ur = texture(iChannel0,uv+vec2(1.,1.)/iResolution.xy);\n    vec4 dl = texture(iChannel0,uv+vec2(-1.,-1.)/iResolution.xy);\n    vec4 dr = texture(iChannel0,uv+vec2(1.,-1.)/iResolution.xy);\n    \n    vec4 res = texelFetch(iChannel1,p,0);\n    res -= CFL*(20.*D4(c)+(D4(uu)+D4(dd)+D4(ll)+D4(rr))+2.0*(D4(ul)+D4(ur)+D4(dl)+D4(dr))-8.0*(D4(u)+D4(d)+D4(l)+D4(r)));\n    res -= CFL*((1./12.)*(Fx(ll)-Fx(rr))-(2./3.)*(Fx(l)-Fx(r)));\n    res -= CFL*((1./12.)*(Fy(dd)-Fy(uu))-(2./3.)*(Fy(d)-Fy(u)));\n    \n    res += CFL*((-1./12.)*(D2(ll)+D2(rr)+D2(uu)+D2(dd))+(4./3.)*(D2(l)+D2(r)+D2(u)+D2(d))-(5.)*D2(c));\n    \n    //res.z -= CFL*0.0001*c.w/(c.x+0.001);\n    res.z -= CFL*0.0002*c.x;\n    \n    vec4 map = texelFetch(iChannel2,p,0);\n    if(iFrame <2){\n        if(map.z>0.5){\n            res.x = 1.0;\n            res.y = 0.0;\n            res.z = 0.0;\n            res.w = 1.0;\n        }\n        else{\n            res.x = 0.01;\n            res.y = 0.0;\n            res.z = 0.0;\n            res.w = 0.0;\n        }\n    }\n    if(map.x>0.5){\n        //res.x -= 0.5*(res.x-1.0);\n        res.y *= 0.9;\n        res.z *= 0.9;\n        //res.w = min(1.0,max(0.,res.w));\n    }\n\n    fragColor = res;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\n#define biharm 0.02\n#define CFL 0.05\n#define sharpen 0.1\n\nfloat prs(float rho, float alpha){\n    return 1.0*(rho-(0.05+0.95*alpha));\n    //return 1.0*(rho/(0.8*alpha+0.2)-1.0);\n}\n\n//Flux function x part\nvec4 Fx(vec4 a){\n    vec4 res;\n    res.x = a.y;\n    res.y = a.y*a.y/(a.x+0.001) + prs(a.x, a.w/a.x);\n    res.z = a.z*a.y/(a.x+0.001);\n    res.w = a.w*a.y/(a.x+0.001);\n    return res;\n}\n//Flux function y part\nvec4 Fy(vec4 a){\n    vec4 res;\n    res.x = a.z;\n    res.y = a.y*a.z/(a.x+0.001);\n    res.z = a.z*a.z/(a.x+0.001) + prs(a.x, a.w/a.x);\n    res.w = a.w*a.z/(a.x+0.001);\n    return res;\n}\n\n//Flux for Laplacian\nvec4 D2(vec4 a){\n    vec4 res = vec4(0.);\n    res.y = 0.01*a.y/(a.x+0.001);\n    res.z = 0.01*a.z/(a.x+0.001);\n    //Cahn-Hilliard\n    float alpha = a.w/(a.x+0.001);\n    res.w = 0.02*(alpha-3.0*alpha*alpha+2.0*alpha*alpha*alpha);\n    return res;\n    \n}\n\n//Flux for Harmonic operator \"Laplacian*Laplacian\"\nvec4 D4(vec4 a){\n    vec4 res =vec4(0.);\n    res.x = 6.0*prs(a.x, a.w/a.x);\n    res.y = a.y/(a.x+0.001);\n    res.z = a.z/(a.x+0.001);\n    res.w = a.w/(a.x+0.001);\n    return biharm*res;\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord/iResolution.x;\n    \n    vec4 res = texelFetch(iChannel0,ivec2(fragCoord),0);\n    \n    if(iFrame<1){\n        if (fragCoord.x<3.\n         || fragCoord.x>(iResolution.x-3.)\n         || fragCoord.y<3.\n         || fragCoord.y>(iResolution.y-3.)){\n            res.x = 1.0;\n        }\n        \n        if (fragCoord.x>=0.0*(iResolution.x-3.)\n         && fragCoord.x<0.6*(iResolution.x-3.)\n         && fragCoord.y>=0.0*(iResolution.y-3.)\n         && fragCoord.y<0.4*(iResolution.y-3.)){\n            res.z = 1.0;\n        }\n        \n        if (true &&\n            fragCoord.x>=0.7*(iResolution.x-3.)\n         && fragCoord.x<0.8*(iResolution.x-3.)\n         && fragCoord.y>=0.0*(iResolution.y-3.)\n         && fragCoord.y<0.1*(iResolution.y-3.)){\n            res.x = 1.0;\n            res.z = 0.0;\n        }\n    }\n    \n    if(iMouse.z > 0.){\n        vec2 d2 = fragCoord-iMouse.xy;\n        if(dot(d2,d2) < 100.){\n            if(texelFetch(iChannel3,ivec2(37,1),0).y>0.){\n                res.z = 0.0;\n            }else{\n                res.z = 1.0;\n            }\n        }\n    }\n\n    fragColor = vec4(res);\n}","name":"Buffer C","description":"","type":"buffer"}]}