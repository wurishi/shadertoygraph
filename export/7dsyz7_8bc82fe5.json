{"ver":"0.1","info":{"id":"7dsyz7","date":"1641912460","viewed":129,"name":"Box Mask with rotation on a Grid","username":"nebbul","description":"Draw a box mask with a smooth falloff and rotate it around offset on a grid","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["grid","square","box","mask","rotation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// basic box mask\n// https://www.shadertoy.com/view/7dlyR7\n//\n// box mask with rotation\n// https://www.shadertoy.com/view/7slyR7\n\n#define DIV 10.0\n#define SPEED 2.\n#define FREQ 2.\n\n// math from Unreal engine node BoxMask-3D\nfloat boxMask(vec2 uv, vec2 pivot, vec2 bounds, float falloff)\n{\n\tvec2 p = abs(uv - pivot);\n\tp = max(p - (bounds * 0.5), 0.);\n\t\n\treturn 1.0 - min(length(p) / max(falloff, 0.00001), 1.0);\n}\n\n// remap a range\nfloat remap(float x, float in_min, float in_max, float out_min, float out_max)\n{\n    return out_min + (x - in_min) * (out_max - out_min) / (in_max - in_min);\n}\n\n// rotate UVs\n// from https://shadertoyunofficial.wordpress.com/2019/01/02/programming-tricks-in-shadertoy-glsl/\n#define rot(a)      mat2( cos(a), -sin(a), sin(a), cos(a) )\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // UVs\n\tvec2 uv = fragCoord/iResolution.y;\n    \n    vec2 uvShift = floor( uv * DIV ) / DIV * FREQ;\n    // make UV gradients inside the squares\n\tuv = fract( uv * DIV ) - vec2(0.5, 0.5); // centered coordinates\n\n    vec2 box_position = vec2(0.5, 0.5); // center of square\n    \n    // rotate the box\n    float rot = iTime * SPEED - uvShift.x - uvShift.y;\n    \n    // foreground mouse\n\tvec2 p = fragCoord / iResolution.x;\n    vec4 m = iMouse / iResolution.x;\n    \n    float mSens = 3.;\n    vec2 mFrom = (p - m.xy) * mSens;\n    vec2 mTo = (p-abs(m.zw)) * mSens;\n    vec2 mAdd = mFrom - mTo;\n    \n    // rotate it\n    uv *= rot(rot - mAdd.x + mAdd.y);\n    uv += box_position;\n\n    // scale the box\n    float scale = remap(sin(iTime * SPEED - uvShift.x - uvShift.y), -1., 1., 0.7, 1.2);\n    \n    vec2 box_bounds = vec2(0.5, 0.5) * scale;\n    \n    float box_falloff =  0.1;\n    //box_falloff = 1.5 * DIV / iResolution.y; // anti aliasing instead\n\n    float box = boxMask(uv, box_position, box_bounds, box_falloff);\n    \n    vec3 col = mix(vec3(0.,0.,0.), vec3(1., 1., 1.), box);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n}","name":"Image","description":"","type":"image"}]}