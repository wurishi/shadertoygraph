{"ver":"0.1","info":{"id":"sdfSDn","date":"1618896273","viewed":53,"name":"Sierpiński Carpet (Better)","username":"adamjmurray","description":"Building upon https://www.shadertoy.com/view/7ssSzH\n * infinite tiling\n * use smoothstep in the coloring logic\n * anti-aliasing","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["tiles"],"hasliked":0,"parentid":"7ssSzH","parentname":"Sierpiński Carpet (Basic)"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 draw(vec2 p, float start, float end, float iter) \n{     \n    float len = end - start;\n    float x = p.x - start;\n    float y = p.y - start;\n    \n    float thresh = 0.005;\n    float pct = 0.;\n    \n    float i;\n    for(i=0.; i<iter; i++) {\n        len /= 3.;       \n        float xd = mod(x/len-1.,3.);\n        float yd = mod(y/len-1.,3.);\n        if (xd < 1. && yd < 1.) {\n            pct = (smoothstep(0.,thresh,xd) - smoothstep(1.-thresh,1.,xd))\n                * (smoothstep(0.,thresh,yd) - smoothstep(1.-thresh,1.,yd));\n            break;  \n        }\n    }\n    \n    return mix(vec3(0.1,0.1,0.1), vec3(1.-i/iter, 1.-i/(iter+1.), 1), pct);    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n    vec3 color = vec3(0,0,0);\n    float samples = 0.;\n    for (float x=-0.33; x<0.34; x+=0.33) {\n        for (float y=-0.33; y<0.34; y+=0.33) {\n            vec2 p = (2.*(fragCoord + vec2(x,y)) - iResolution.xy)/iResolution.y; // [-1,1] vertically    \n            color += draw(p, -1., 1., 6.);\n            samples++;\n        }\n    }\n    fragColor = vec4(color/samples,1);\n}","name":"Image","description":"","type":"image"}]}