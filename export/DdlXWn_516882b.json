{"ver":"0.1","info":{"id":"DdlXWn","date":"1668806927","viewed":246,"name":"bubbles (slow)","username":"uiop","description":"just some bubbles, kinda very unoptimised","likes":15,"published":1,"flags":32,"usePreview":1,"tags":["raymarching","sdf","particles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\nfloat bubbleDist(float dis1, float dis2, inout int closest, int new){\n    float dis = min(abs(dis1),abs(dis2));\n    float dis3 = min(dis1,dis2);\n        if(dis1 <= 0.0 || dis2 <= 0.0){\n            if(dis1 < dis2){\n                dis = min(abs(dis1-dis2),abs(dis1));\n        }else{\n            dis = min(1.0*abs(dis1-dis2),abs(dis2));\n            closest = new;\n        }\n    }\n    return dis * (dis3 < 0.0 ? 1.0 : -1.0);\n}\n\nvec3 refl(vec3 d, vec3 n){\n    return d - 2.f * n * dot(d,n);\n}\n\nvec3 noise(vec3 p){\n    return vec3(\n    0.5*sin(p.y)-0.5*sin(p.z), //+ sin(p.x*0.5+iTime),\n    0.5*sin(p.z)-0.5*sin(p.x), //+ sin(p.y*0.5+iTime),\n    0.5*sin(p.x)-0.5*sin(p.y) //+ sin(p.z*0.5+iTime)\n    );\n}\n\nfloat sdSphere( vec3 p, float s ){\n  return length(p)-s;\n}\n\nvec2 sdf(vec3 p){\n    //vec3 np = p + texture(iChannel0,p*0.1,-100.).xyz-0.5;\n    //vec3 np = 0.0*p + 1.0*noise(p*1.0 + iTime) + 1.0*noise(p*0.5 + iTime*2.0);\n    //vec3 np = noise(p + 0.4*sin(0.3*p + iTime*10.0));\n    float dis = 100.0;\n    float adis = 101.0;\n    int bt = 0;\n    for(int i = 0; i < NUM; i++){\n        vec4 p1 = texelFetch(iChannel0, ivec2(i,0), 0);\n        float dc = sdSphere(p-p1.xyz,p1.w);\n        adis = -bubbleDist(adis,dc,bt,i);\n    }\n    dis = abs(adis);\n    return vec2(dis,0);\n}\nvec3 sdnorm(vec3 p, float t){\n    return normalize(vec3(\n        sdf(p + vec3(t,0,0)).x-sdf(p - vec3(t,0,0)).x,\n        sdf(p + vec3(0,t,0)).x-sdf(p - vec3(0,t,0)).x,\n        sdf(p + vec3(0,0,t)).x-sdf(p - vec3(0,0,t)).x\n    ));\n}\n\nvec4 raycast(vec3 pos, vec3 dir){\n    vec4 col = vec4(0);\n    vec3 p = pos;\n    vec3 d = dir;\n    float dis = 0.;\n    float amt = 1.;\n    for(int i = 0; i < 400; i++){\n        vec2 s = clamp(sdf(p),0.01,5.0);\n        if(s.x <= 0.025){\n            vec3 no = sdnorm(p,0.001);\n            vec4 spec = texture(iChannel1, refl(d,no).zyx);\n            //vec4 spec = vec4(0.25,0.5,1,0);\n            col += spec * 0.001 * amt/s.x * (1./(0.1+dis));\n            //col.x += 0.5;\n            \n            //amt *= 0.99;\n        }\n        if(s.x > 10.0){\n            col = vec4(1,0,0,1);\n            i = 200;\n        }\n        p += d * s.x;\n        dis += s.x;\n    }\n    return col;\n}\n\nvec4 render(vec2 c){\n    // Setup ray position and direction\n    vec4 col = vec4(0,0,0,0);\n    vec3 p = vec3(0, 0, -2.5);\n    vec3 d = normalize(vec3(c,0.6));\n    if(iMouse.z > 0.){\n        d.zy *= rot(-2.* iMouse.y/iResolution.y + 1.5);\n        p.zy *= rot(-2.* iMouse.y/iResolution.y + 1.5);\n        d.xy *= rot(-3.14 * iMouse.x/iResolution.x);\n        p.xy *= rot(-3.14 * iMouse.x/iResolution.x);\n    }else{\n        d.xz *= rot(iTime*0.1);\n        p.xz *= rot(iTime*0.1);\n    }\n    // Cast ray\n    col = raycast(p,d);\n    return col;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy*0.5)/iResolution.x;\n    vec4 col = render(uv);\n    fragColor = pow(col, vec4(1./2.2));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0);\n    if(int(fragCoord.x) < NUM){\n        vec4 c = texelFetch(iChannel0, ivec2(fragCoord.x, 0), 0);\n        vec4 v = texelFetch(iChannel0, ivec2(fragCoord.x, 1), 0);\n        // Position\n        if(int(fragCoord.y) == 0){\n            c.xyz += v.xyz;\n            fragColor = c;\n        }\n\n        // Velocity\n        if(int(fragCoord.y) == 1){\n            c.xyz += v.xyz;\n            v.xyz -= normalize(c.xyz)*0.001; // Gravitation towards center\n\n            // Collisions\n            for(int i = 0; i < NUM; i++){\n                if(int(fragCoord.x) != i){\n                    vec4 c1 = texelFetch(iChannel0, ivec2(i,0),0);\n\n                    float dis = length(c.xyz-c1.xyz)-c.w-c1.w;\n                    if(dis < 0.){\n                        // repel\n                        v.xyz += (-0.002 + 0.001*sin(iTime))*dis * normalize(c.xyz-c1.xyz);\n                        \n                        v.xyz *= 0.99;\n                    }\n                }\n            }\n            fragColor = v;\n\n        }\n    }\n    if (iFrame < 5){\n        if(int(fragCoord.y) == 0){\n            fragColor = vec4(0.0 + mod(fragCoord.x,10.)* 0.1, -0.3+fragCoord.x*0.01,-0.2+fragCoord.x*0.01 ,SIZE + fragCoord.x*0.05);\n        }\n        if(int(fragCoord.y) == 1){\n            fragColor = vec4(-0.0001 + fragCoord.x* 0.0001,0.0,0.0,mod(fragCoord.x*0.0345,0.0));\n        }\n    }\n    \n        if (iFrame%750 < 2){\n        if(int(fragCoord.y) == 0){\n            //fragColor = vec4(0.0 + mod(fragCoord.x,10.)* 0.1, -0.3+fragCoord.x*0.01,-0.2+fragCoord.x*0.01 ,SIZE + fragCoord.x*0.05);\n        }\n        if(int(fragCoord.y) == 1){\n            fragColor = vec4(-0.2 + fragCoord.x* 0.02,-0.1 + fragCoord.x* 0.01,0.0,mod(fragCoord.x*0.0345,0.0));\n        }\n    }\n    \n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"int NUM = 11;\nfloat SIZE = 0.25;","name":"Common","description":"","type":"common"}]}