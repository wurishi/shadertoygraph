{"ver":"0.1","info":{"id":"cssXzn","date":"1668441030","viewed":107,"name":"You'ren't going to London; leave","username":"Retard_Gaming","description":"The squeakuel","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["heaven","amazing","hope","astounding"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// simple 3d function\nvec2 c(float x, float y, float z) {\n    float v = 0.-y; // replace 0 with distance if you want to move camera foward and back\n    \n    if(v > 0.) {\n        return vec2(1./0.);\n    }\n    return -vec2(x,z)/y;\n}\n\n// convert given point to uv coordinates where a,b,c,d are (0,0),(1,0),(1,1),(0,1) respectively\n// this only works if a.x=d.x and b.x=c.x\nvec2 uvTetragon(vec2 a, vec2 b, vec2 c, vec2 d, vec2 p) {\n    float ab = (p.x-a.x)/(b.x-a.x);\n    float dc = (p.x-d.x)/(c.x-d.x);\n    float ad = (p.y-a.y)/(d.y-a.y);\n    float bc = (p.y-b.y)/(c.y-b.y);\n    \n    float u = (1.-ad)*ab + dc*ad;\n    float v = (1.-ab)*ad + bc*ab;\n    float h = (ad-bc)*(ab-dc)-1.;\n    \n    u = ab;\n    \n    float ab2 = (b.y - a.y) * u + a.y;\n    float cd2 = (c.y - d.y) * u + d.y;\n    \n    \n    v = (p.y - ab2)/(cd2-ab2);\n    \n    vec2 uv = vec2(u,v)/h;\n    \n    return uv;\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //figure eight pattern with camera\n    vec2 offset = vec2(cos(iTime), sin(iTime)*cos(iTime))/(5.);\n\n    vec3 col;\n    float time = mod(iTime, 1.) * 3. - 1.;\n    uv *= 5. + sin(iTime);\n    uv -= 2. + sin(iTime) / 2. + offset/2.;\n    \n    if(uv.x < 1. && uv.x > 0. && uv.y < 1. && uv.y > 0.) {\n        col += texture(iChannel0, uv).rgb;\n    }\n    \n    uv += 2. + sin(iTime) / 2. + offset/2.;\n    uv /= 5. + sin(iTime);\n    \n    for(float y = -1.; y < 8.; y+=1.) {\n        for(float x = -1.; x < 2.; x+=2.) {\n            if(col.r == 0. && col.g == 0. && col.b == 0.) {\n                vec2 p1 = c(x-offset.x, y + time, -1.-offset.y);\n                vec2 p2 = c(x-offset.x, y + time + 1., -1.-offset.y);\n                vec2 p3 = c(x-offset.x, y + time + 1., 1.-offset.y);\n                vec2 p4 = c(x-offset.x, y + time, 1.-offset.y);\n                vec2 uv1 = uvTetragon(p1, p2, p3, p4, uv*2.-1.);\n                if(uv1.x < 0. && uv1.x > -1. && uv1.y < 0. && uv1.y > -1.) {\n                    col += texture(iChannel0, uv1).rgb;\n                }\n                p1 = c(x-offset.y, y + time, -1.-offset.x);\n                p2 = c(x-offset.y, y + time + 1., -1.-offset.x);\n                p3 = c(x-offset.y, y + time + 1., 1.-offset.x);\n                p4 = c(x-offset.y, y + time, 1.-offset.x);\n                vec2 uv2 = uvTetragon(p1, p2, p3, p4, vec2(uv.y, uv.x)*2.-1.);\n                if(uv2.x < 0. && uv2.x > -1. && uv2.y < 0. && uv2.y > -1.) {\n                    col += texture(iChannel0, vec2(uv2.y, -uv2.x)).rgb;\n                }\n            }\n          \n        }\n    }\n\n    \n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}