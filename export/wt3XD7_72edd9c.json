{"ver":"0.1","info":{"id":"wt3XD7","date":"1581067151","viewed":344,"name":"array bounds compatibility test","username":"FabriceNeyret2","description":"out of bound don't fail compilation.\nstill, on OpenGL the result is as expected (index clamped -> 4 bands)\nwhile on windows/angle the result is 0 out of bounds (indeed, NaN)... or sometime 1... or gradient. i.e. undetermined.","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["glsl","bug","array"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 O, vec2 U )\n{\n    U /= iResolution.xy;\n    float a[] = float[](.3,.6,.8,1.);\n  //O = vec4(a[-1]); return;      // to test static access\n    O = vec4(0);\n    \n    float v, i = 10.*(U.x-.5)+2.; // bounds from -3 to 7\n    if (U.y>.5) i = floor(i);     // extra test: int( vs int(floor\n\n    O = vec4( a[int(i)]);         // access array.\n  //O = vec4(isnan(O));           // check for isNaN\n#if 0\n    if (abs(U.y-.5)<.25) O *= 1.01;  // try one or the other: same\n  //O *= 1.01;\n#endif\n\n   // if (U.y < .2 && isnan(O.x)) O.x = 1.; // bottom: red if NaN [side effect prevent test to work]\n#if 0\n    if (U.y > .9) O = vec4(0);              // top: black for ref\n#endif\n}","name":"Image","description":"","type":"image"}]}