{"ver":"0.1","info":{"id":"wly3z1","date":"1578275436","viewed":238,"name":"V4'5","username":"nabr","description":"it goes somethink like: bum tschack bum tchack","likes":11,"published":1,"flags":8,"usePreview":0,"tags":["bump","spherical"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// -----------------------------------------------------\n// V4'5 by nabr\n// https://www.shadertoy.com/view/wly3z1\n// License Creative Commons Attribution-NonCommercial 4.0 International (CC BY-NC 4.0)\n// https://creativecommons.org/licenses/by-nc/4.0/\n// -----------------------------------------------------\n\n\n// -------- texture\nfloat f(vec3 pp)\n{\n    vec3 ht = smoothstep(0., 12., 1.785 - dot(pp.xy, pp.xy))\n        \t  * vec3(pp.xy, -mod(5.25*iTime, 110.) + 101.);\n    ht = ((iTime<6.)?ht:abs(ht));\n    vec3 n = 100. * normalize(-ht - vec3(0.01, .001, 1.125-fract(-iTime) * .5)), p=vec3(0);\n    float tm = .5 * iTime;\n    for (float i = 0.; i <= 15.; i++)\n    {\n        p = 4. * n + vec3(cos(tm + i - p.x) + cos(tm + i - p.y), sin(i - p.y) + cos(i + p.x), 6);\n        p.xy =  (cos(i) * p.xy + sin(i) * vec2(p.y, -p.x));\n    }\n\n    return .125 - dot(vec3(6, 4, -9), -p);\n}\n\nvoid scene(inout vec3 C, in vec2 U)\n{\n    // -------- init\n    vec3 d = vec3(0), dskn = vec3(0), dskc = vec3(0), D = vec3(0), e = vec3(0), sn = vec3(0),\n         ld = vec3(0), ld0 = vec3(0), ldc = vec3(0);\n    vec2 R = iResolution.xy;\n   \n    d = vec3(U - .5 * R, .5 * min(R.x, R.y)) / min(R.x, R.y);\n    \n    // -------- disk\n    dskn = vec3(0, 0, 6);\n    float sh = 0.; \n    if(mod(iTime, 23.5)>21.) sh = sin(fract(8.*iTime)*.125-.125);\n    dskc = vec3(sh, .001, (1. - sin(.5*iTime)*.2));\n    D = dot(dskn, dskc) / dot(dskn, d) * d - dskc;\n    // -------- bump\n    e = vec3(.001, 0, 0);\n    sn = normalize(vec3(f(d + e) - f(d - e), f(D + e.yxz) - f(D - e.yxz), -.451));\n    // -------- shade\n    ld = vec3(sin(6. * iTime), -.85, -10. * fract(2. * iTime));\n    ldc =(max(0., dot(normalize(-D - ld), sn)) ) * sin(ld.z + vec3(.8, .001, .25));\n \n\t\n    C += (ldc + 1.45 * clamp(.5 - dot(-d, sn), .05, .75));\n}\n\nvoid mainImage(out vec4 O, in vec2 U)\n{\n    vec3 col = vec3(0);\n\n    if (bool(1)) // 1 = on\n    {\n        // -------- supersamping\n        scene(col, U + vec2(.25, .25));\n        scene(col, U + vec2(.25, -.25));\n        scene(col, U + vec2(-.25, -.25));\n        scene(col, U + vec2(-.25, .25));\n        col *= .25;\n    }\n    else\n    {\n        col = vec3(0);\n        scene(col, U);\n    }\n    \n    // -------- out\n    O = vec4(col, 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 mainSound( in int samp,float time)\n{\n    int block = int((iBlockOffset+0.5)*iSampleRate/(512.*512.));\n    int s = 512*512*block + 512*int(gl_FragCoord.y) + int(gl_FragCoord.x);\n    return mSound(s);\n}","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"float intfract(int s,float n)\n{\n    //Explanation and copyright : shadertoy.com/view/4ltfRN\n    int sn=int(n),a=s%sn,b=(s/sn);\n    const float MAXF=float(uint(-1))+1.;\n    return fract((float(a)/n)+float((uint(b)*uint(MAXF*float(sn)/n)))/MAXF);\n}\n\n// -----------------------------------------------------\n// V4'5 by nabr\n// https://www.shadertoy.com/view/wly3z1\n// License Creative Commons Attribution-NonCommercial 4.0 International (CC BY-NC 4.0)\n// https://creativecommons.org/licenses/by-nc/4.0/\n// -----------------------------------------------------\n#define tau (8.*atan(1.))\nvec2 mSound(int samp)\n{\n    // -------- bum tschak\n    int tm = samp / int(iSampleRate * .25);\n    float t = intfract(samp, iSampleRate / 1.);\n    float f = .001, p = 0.;\n    f = sin(t * 200.);\n    if((samp/int(iSampleRate)%4>2)&&tm%2!=0) \n         f*=.005*abs(100.-cos(t));\n    \n    for(int i = 0; i < 4; i++) f += .5;\n    \n    f = floor(f * (200. * fract(t))) / (250. * fract(t));\n\n    p = (sin(tau * (f * (8. + f * (.25 * f)) * (.125 * f)) * mod(1. + t, .2))\n            + sin(tau * (f * (8. + f * (.125 * f) * (.45 * f))) * mod(.25 - t, .25)));\n    p*= exp(-10. * mod(t, .5));\n    \n    // -------- synth\n    int t0 = samp / int(iSampleRate * .25);\n    float f0 = 0., p0 = 0.;\n    f0 = 6. * float[](15., 25., 42., 18., 50., 25.)[t0 % 6];\n    f0 = floor(f0 * .25) / .125;\n    p0 = mod((p0 + tau * intfract(samp, iSampleRate / 3.1234 - f0))\n    \t\t\t+.5*(p0+tau*intfract(samp,iSampleRate/f0)),tau * .5995);\n    \n    p0 = .25 * sin(p0);\n    if(samp/int(iSampleRate*.25)%4>2) p0*=0.; \n    \n    // -------- bass\n    float p1 = 0.; \n    f0 = sin(t *float[](200.,400.)[t0%2]);\n    f0 = floor(f0 * .5) / .125;\n    p1 = mod((p1 + tau * intfract(samp, iSampleRate / f0)), .125*tau);\n    p1 = .4*sin(p1);\n    \n    // for debug\n    //return .2*vec2(p);\n    \n    #define VOL .5\n    // -------- out\n    if(samp/int(iSampleRate)<6)\n     \treturn VOL*vec2(p);\n    \n    if((samp/int(iSampleRate)%5>3)&&(samp/int(iSampleRate*.25)%3<1))\n        return VOL*vec2(p);\n        \n    return VOL*vec2((p1+p0)+.7*p, p+(p1+.8*p0));\n    \n    \n}","name":"Common","description":"","type":"common"}]}