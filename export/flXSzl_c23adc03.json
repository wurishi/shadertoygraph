{"ver":"0.1","info":{"id":"flXSzl","date":"1626262049","viewed":144,"name":"AntiPod - Pythia","username":"Flopine","description":"A shader made as a loop for a track from ThronoCrigger, check out his album!!! \nhttps://thronocrigger.bandcamp.com/album/simulacra","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","animation","diffract"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings and FabriceNeyret for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n\n#define PI 3.141592\n\n#define BPM (165./60.)\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define hash21(x) fract(sin(dot(x,vec2(12.4,31.5)))*145.5)\n\nvoid mo (inout vec2 p, vec2 d)\n{\n    p = abs(p)-d;\n    if (p.y>p.x) p = p.yx;\n}\n\nvoid moda (inout vec2 p, float rep)\n{\n    float per = 2.*PI/rep;\n    float a = atan(p.y,p.x);\n    float l = length(p);\n    a = mod(a,per)-per*0.5;\n    p = vec2(cos(a),sin(a))*l;\n}\n\nfloat box (vec3 p, vec3 c)\n{\n    vec3 q = abs(p)-c;\n    return min(0.,max(q.x,max(q.y,q.z))) + length(max(q,0.)); \n}\n\nfloat g1 = 0.;\nfloat SDF (vec3 p)\n{\n    p.xy *= rot(p.z*0.2);  \n    moda(p.yz, 5.);\n    p.y -= 1.5;   \n    mo(p.xz, vec2(1.));\n    p.xz *= rot(p.y*0.2);   \n    mo(p.xy, vec2(1.5)); \n    p.x -= 1.5;\n    p.yz *= rot(iTime);   \n    p.xz *= rot(p.y);\n    moda(p.xz, 3.);\n\tp.x -= 0.5;\n    \n    float d = box (p, vec3(0.5,10,0.5))-texture(iChannel0, p.xz*0.1).r*0.1;\n    g1 += 0.01/(0.01+d*d);\n    \n    return d;\n}\n\nfloat mask(vec2 uv)\n{return smoothstep(0.1,0.2, sin(fract(length(uv)-iTime*(BPM/2.))));}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n    vec2 uu = floor(uv*30.)/30.;\n    uv *= 0.95+mask(uu);\n    float dither = hash21(uv);\n     \n    vec3 ro = vec3(0.001,0.001,-3.),\n        p = ro,\n        rd = normalize(vec3(uv,1.)),\n        col = vec3(0.);\n     \n    bool hit=false;\n    for(float i=0.; i<100.; i++)\n    {\n        float d = SDF(p);\n        if (d<0.001)\n        {\n            hit = true;\n            break;\n        }\n        p += d*rd*0.6;\n    }\n    if (hit) col += g1*sin(p.z+iTime*BPM*2.)*0.3;\n\n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}