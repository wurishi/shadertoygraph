{"ver":"0.1","info":{"id":"mt23zK","date":"1673560375","viewed":63,"name":"a function on grid","username":"mtx","description":"learning shaders is fun","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["grid","math","function"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec3 black = vec3(0.0);\nvec3 gray1 = vec3(0.1);\nvec3 gray2 = vec3(0.2);\nvec3 gray3 = vec3(0.3);\nvec3 gray4 = vec3(0.4);\nvec3 gray5 = vec3(0.5);\nvec3 gray6 = vec3(0.6);\nvec3 gray7 = vec3(0.7);\nvec3 gray8 = vec3(0.8);\nvec3 gray9 = vec3(0.9);\nvec3 white = vec3(1.0);\n\nvec3 red = vec3(1.0, 0.0, 0.0);\nvec3 green = vec3(0.0, 1.0, 0.0);\nvec3 blue = vec3(0.0, 0.0, 1.0);\nvec3 cyan = vec3(0.0, 1.0, 1.0);\nvec3 magenta = vec3(1.0, 0.0, 1.0);\nvec3 yellow = vec3(1.0, 1.0, 0.0);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  float cellSizePx = 200.0;\n  vec2 uv = fragCoord / iResolution.xy;\n  vec2 center = uv - 0.5;\n  vec2 pos = center * iResolution.xy / cellSizePx;\n\n  vec2 cell = fract(pos); \n  cell = abs(0.5 - cell); \n  float d = 1.0 - 2.0 * max(cell.x, cell.y);\n\n  float cellLine = smoothstep(0.0, 0.02, d);\n\n  vec3 col = vec3(cellLine); \n\n  float xAxis = smoothstep(0.0, 0.002, abs(uv.y - 0.5));\n  float yAxis = smoothstep(0.0, 0.002, abs(uv.x - 0.5));\n  \n  col = mix(gray9, col, cellLine);\n  col = mix(blue, col, xAxis);\n  col = mix(blue, col, yAxis);\n\n\n  float val = pos.x;\n\n  // change this\n  float fn = sin(iTime + cos(val *2.0));\n  //\n  \n  // thanks @yunhai!\n  float pixwidth = 1. / cellSizePx;\n  float fixer = normalize(vec2(pixwidth, dFdx(fn))).x;\n  float fnLine = smoothstep(2.*pixwidth,3.*pixwidth,fixer * abs(pos.y - fn));\n  //\n  \n  // float fnLine = smoothstep(0.0,0.05, abs(pos.y - fn));\n  \n  col = mix(cyan, col, fnLine);\n\n  fragColor = vec4(col, 1.0);\n \n}","name":"Image","description":"","type":"image"}]}