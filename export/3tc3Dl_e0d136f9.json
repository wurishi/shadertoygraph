{"ver":"0.1","info":{"id":"3tc3Dl","date":"1577887210","viewed":244,"name":"FAST extra points detection","username":"eXponenta","description":"Implementing of FAST points detection alghoritm","likes":2,"published":1,"flags":34,"usePreview":0,"tags":["fast"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Output to screen\n    fragColor.xyz = texture(iChannel0,uv).xyz;\n        \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//FAST\n\nconst float RAD = 3.;\nconst float TESTS = 9.0;\nconst float SAME = 1./50.0;\nconst float PI_2 = 6.28318531;\n\n\nfloat I(vec2 uv) {\n    vec3 c = texture(iChannel0,uv).xyz;\n    return dot(c, vec3(0.2126, 0.7152, 0.0722));\n}\n\nfloat Io(vec2 uv, vec2 off) {\n    vec2 s = 1. /iResolution.xy;\n    return I(uv + s * floor(off + 0.5));\n}\n\nfloat preFAST(float p, vec2 uv) {\n    //top\n    float extr = step(SAME, abs(p - Io(uv, vec2(0.0, -RAD))));\n    //right\n    extr += step(SAME, abs(p - Io(uv, vec2(RAD, 0.0))));\n    //bottom\n    extr += step(SAME, abs(p - Io(uv, vec2(0.0, RAD))));\n    //left\n    extr += step(SAME, abs(p - Io(uv, vec2(-RAD, 0.0))));\n   \n    return step(3.0, extr);\n}\n\nfloat postFAST(float p,vec2 uv) {\n    \n    float p_min = 0.0;\n    float p_max = 0.0;\n    \n    float s = PI_2 / 16.0;\n    \n    for(float a = 0.0; a < PI_2; a += s) {\n        vec2 off = RAD * vec2(cos(a), sin(a));\n        float it = p - Io(uv, off);\n        \n        p_min += step(SAME, it);\n        p_max += step(SAME, -it);\n    }\n    \n    return step(TESTS, max(p_min, p_max));\n}\n\nvec3 FAST(vec2 uv){\n    \n    float p = I(uv);\n    float pf = preFAST(p, uv);\n    vec3 c = vec3(0.0,pf,0.);\n    \n    if(pf > 0.) {\n        c.x = postFAST(p, uv);\n        c.y = 1. - c.x;\n    }\n    \n    //y - candidates,\n    //x - results\n    \n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    fragColor.xyz = texture(iChannel0, uv).xyz + vec3(FAST(uv).x);\n}","name":"Buffer A","description":"","type":"buffer"}]}