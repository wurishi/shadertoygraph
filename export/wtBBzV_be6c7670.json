{"ver":"0.1","info":{"id":"wtBBzV","date":"1599344067","viewed":130,"name":"3D Evergreen","username":"logangilmour","description":"Carve up space to render tree!","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["tree"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// DERIVED FROM:\n\n// The MIT License\n// Copyright Â© 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A list of useful distance function to simple primitives. All\n// these functions (except for ellipsoid) return an exact\n// euclidean distance, meaning they produce a better SDF than\n// what you'd get if you were constructing them from boolean\n// operations.\n//\n// More info here:\n//\n// https://iquilezles.org/articles/distfunctions\n\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 2   // make this 2 or 3 for antialiasing\n#endif\n\n//------------------------------------------------------------------\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n\tvec3 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h ) - r;\n}\n\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nconst float pi = 3.1459;\n\nvec2 perp(vec2 p){\n    return vec2(p.y,-p.x);\n}\n\nvec2 hash( vec2 p ) // replace this by something better\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\n\nvec2 warp(vec2 p, int seed){\n     return vec2(noise(p*2.+vec2(seed)),noise(p*2.+vec2(seed+100)))*0.04+vec2(noise(p/2.+vec2(seed+100)),noise(p/2.+vec2(seed+200)))*0.2;\n}\n\n\n\nfloat needles(vec3 wpos,vec3 A, vec3 B,float scale){\n\tvec3 dir = B-A;\n    float len = length(dir);\n    dir = dir/len;\n    vec3 up= vec3(0,1,0);\n    vec3 left = cross(up,dir);\n    float period = .0007;\n    vec3 wsp = wpos-A;\n    vec3 nsp = vec3(dot(wsp,left),dot(wsp,dir),dot(wsp,up));\n    float rot = atan(nsp.z,nsp.x);\n    float phase = (rot+pi)/(pi*2.);\n    \n    nsp.y = clamp(nsp.y,0.,len);\n    float wrap = nsp.y/period+phase*period;\n    \n    float nearest = max(floor(wrap/0.6)*0.6+pi/4.,0.);\n    \n    vec3 A2 = A+dir*nearest*period;\n\tvec3 dir2 = A2+(up*sin(nearest)+left*cos(nearest))*(0.02+scale*2.);\n    \n    return min(\n        sdCapsule(wpos,A,B,scale*0.3)\n        ,sdCapsule(wpos,A2,dir2,0.001))\n        ;\n}\n\nfloat branch(vec3 wpos, vec3 pos3, vec3 dir3){\n    int seed = 0;\n    float theta = pi/8.;\n    float dotperp = 0.;\n    float minp = 1000.;\n    vec2 uv = wpos.xz;\n    float scale = clamp(0.2-pos3.y*0.2,0.,0.5);\n\n    vec2 pos = pos3.xz;\n    vec2 dir = dir3.xz;\n\t//vec2 pos = vec2(0,-1);\n    \n    mat2 m = mat2(cos(theta),-sin(theta),sin(theta),cos(theta));\n    \n    int path = seed;\n    for(int i=0; i<4; i++){\n\t\tvec2 A = pos;\n        vec2 B = pos+dir*scale;\n    \tvec2 pa = uv-A;\n        vec2 ba = B-A;\n        \n        vec2 per = perp(dir);\n        \n        \n        \n        dotperp = dot(per,uv-pos);\n        bool side = dotperp>0.;\n        path = path*2+int(side);\n        \n        mat2 ms = m;\n        float sgn = float(side)*2.-1.;\n        ms[0][1]*=sgn;\n        ms[1][0]*=sgn;\n        vec2 newdir = ms*dir;\n        \n        float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n        float len = needles(wpos,vec3(A.x,pos3.y,A.y),vec3(B.x,pos3.y,B.y),0.002+scale*0.05);\n        minp = min(len,minp);\n        \n        pos += dir*scale;\n        dir = newdir;\n        //theta += (rand(vec2(float(path*10),0.))*2.-1.)*0.3;\n        scale = scale/1.5;\n    }\n    return minp;\n    \n}\n\nfloat tree(vec3 wpos){\n    wpos.y+=1.;\n    float period = 0.06;\n    \n    float rot = atan(wpos.z,wpos.x);\n    float phase = (rot+pi)/(pi*2.);\n    wpos.y = clamp(wpos.y,-1.3,1.1);\n    float wrap = wpos.y/period+phase*period;\n    \n    float nearest = max(-20.,floor(wrap/1.4)*1.4+pi/4.);\n    \n    vec3 A = vec3(0,nearest*period,0);\n\n    \n    return min(sdCapsule(wpos,vec3(0,-1.2,0),vec3(0,1,0),0.025-wpos.y*0.02),branch(wpos,A, vec3(cos(nearest),0,sin(nearest))));\n    \n}\n\n\n\n\n//------------------------------------------------------------------\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\n//------------------------------------------------------------------\n\n#define ZERO (min(iFrame,0))\n\n//------------------------------------------------------------------\n\nvec2 map( in vec3 pos )\n{\n    vec2 res = vec2( 1e10, 0.0 );\n\n    {\n      res = opU( res, vec2( tree(pos), 1 ) );\n              res = opU( res, vec2( tree(pos*0.5-vec3(1,1,1)), 1 ) );\n\n    }\n    \n    \n    return res;\n}\n\n// https://iquilezles.org/articles/boxfunctions\nvec2 iBox( in vec3 ro, in vec3 rd, in vec3 rad ) \n{\n    vec3 m = 1.0/rd;\n    vec3 n = m*ro;\n    vec3 k = abs(m)*rad;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\treturn vec2( max( max( t1.x, t1.y ), t1.z ),\n\t             min( min( t2.x, t2.y ), t2.z ) );\n}\n\nvec2 raycast( in vec3 ro, in vec3 rd )\n{\n    vec2 res = vec2(-1.0,-1.0);\n\n    float tmin = 1.0;\n    float tmax = 20.0;\n\n\n    float t = tmin;\n        for( int i=0; i<100 && t<tmax; i++ )\n        {\n            vec2 h = map( ro+rd*t );\n            if( abs(h.x)<(0.0002*t) )\n            { \n                res = vec2(t,1); \n                break;\n            }\n            t += pow(h.x,1.3)*0.3;\n        }\n    \n    return res;\n}\n\n\n\n\nvec3 render( in vec3 ro, in vec3 rd, in vec3 rdx, in vec3 rdy )\n{ \n    vec2 res = raycast(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    \n\n\treturn vec3( clamp(m,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv =          ( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mo = iMouse.xy/iResolution.xy;\n\tfloat time = 32.0 + iTime*1.5;\n\n    // camera\t\n    vec3 ta = vec3( 0.5, -0.5, -0.6 );\n    vec3 ro = ta + vec3( 4.5*cos(0.1*time), 1.3, 4.5*sin(0.1*time) );\n    // camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, 0.0 );\n\n    vec3 tot = vec3(0.0);\n#if AA>1\n    for( int m=ZERO; m<AA; m++ )\n    for( int n=ZERO; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (2.0*(fragCoord+o)-iResolution.xy)/iResolution.y;\n#else    \n        vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n#endif\n\n        // ray direction\n        vec3 rd = ca * normalize( vec3(p,2.5) );\n\n         // ray differentials\n        vec2 px = (2.0*(fragCoord+vec2(1.0,0.0))-iResolution.xy)/iResolution.y;\n        vec2 py = (2.0*(fragCoord+vec2(0.0,1.0))-iResolution.xy)/iResolution.y;\n        vec3 rdx = ca * normalize( vec3(px,2.5) );\n        vec3 rdy = ca * normalize( vec3(py,2.5) );\n        \n        // render\t\n        vec3 col = render( ro, rd, rdx, rdy );\n\n        // gain\n        // col = col*3.0/(2.5+col);\n        \n\t\t// gamma\n        col = 1.-pow( col, vec3(0.4545) );\n\n        tot += col;\n#if AA>1\n    }\n    tot /= float(AA*AA);\n#endif\n    \n    fragColor = vec4( tot, 1.0 );\n}","name":"Image","description":"","type":"image"}]}