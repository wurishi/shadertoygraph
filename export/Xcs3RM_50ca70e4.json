{"ver":"0.1","info":{"id":"Xcs3RM","date":"1702896139","viewed":33,"name":"Simple Empirical Sky","username":"March3rd","description":"This is an extremely simplified implementation of sky. I replaced the expensive raymarching with some optical factors combined with some empirical distributions making it not so correct but very fast.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sky","atmosphere","scatter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926\n#define SUN_COL vec3(1.0)\n#define SCAT vec3(0.119673, 0.321427, 0.796453)\n#define DENSITY 0.2\n\nvec3 light_dir;\n\nvec3 skyColor(vec3 rd) {\n    vec3 src_col = SUN_COL * exp(-SCAT * exp(light_dir.y / DENSITY));\n    float phase = 0.8 * (1.4 + 0.5 * dot(light_dir, -rd));\n    float d = exp(-rd.y / DENSITY);\n    vec3 scat = exp(-(1.0 - SCAT) * (1.0 - d));\n    vec3 trans = exp(-SCAT * d);\n    if (rd.y > 0.0)\n        return scat * trans * phase * src_col;\n    else \n        return vec3(0.0);\n}\n\nvec3 sunColor(vec3 rd) {\n    if (dot(-rd, light_dir) > 0.9985) {\n        float d = exp(-rd.y / DENSITY);\n        vec3 trans = exp(-SCAT * d);\n        return SUN_COL * trans;\n    }\n    return vec3(0.0);\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    float v = 0.25;\n    float theta = sin(v * iTime) * PI * 0.12 + PI / 12.0;\n    light_dir = vec3(0.0, -sin(theta), -cos(theta));\n\n    //Normalized pixel coordinates\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y;\n    //Ray\n    //vec3 ro = vec3(0.0, 5.0, 0.0);\n    vec3 rd = normalize(vec3(uv.x, uv.y + 0.2, 0.5));\n    vec3 col = skyColor(rd) + sunColor(rd);\n    // Output to screen\n    \n    fragColor = vec4(pow(col, vec3(1.0 / 2.2)),1.0);\n}","name":"Image","description":"","type":"image"}]}