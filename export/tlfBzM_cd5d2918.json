{"ver":"0.1","info":{"id":"tlfBzM","date":"1700252815","viewed":23,"name":"Noise water x","username":"Xneuma","description":"Trying to create something like water with perlin noise","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["perlinnoise","water","sunshine"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Random function taken from Book of Shaders\nvec2 random(vec2 uv){\n    uv = vec2( dot(uv,vec2(127.1,311.7)),\n              dot(uv,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(uv)*43758.5453123);\n}\n\nfloat noise(vec2 uv) {\n \tvec2 id = floor(uv);\n    vec2 p = fract(uv); //Our sample point P located in a cell\n    \n    /*\n\t\t1. Generate a random gradient for every point in cell.\n\t\tSince each cell has 4 points we generate 4 rnd gradients.\n\t*/\n    vec2 bl = random(id + vec2(0., 0.)); //bottom left\n    vec2 br = random(id + vec2(1., 0.)); //bottom right\n    vec2 tl = random(id + vec2(0., 1.)); //top left\n    vec2 tr = random(id + vec2(1., 1.)); //top right\n    \n    /*\n\t\tIn interpolation you usually use uv.x or uv.y to specify \n    \tdirection, however uv.x and y are linear by default so\n\t\tthe interpolation will be linear. We don't want that.\n\t\tWe want a smooth interpolation direction which we get by\n\t\tsmoothstep(0., 1., f); or better: f*f*(3.-2.*f);\n\t*/\n    vec2 smoothdir = p*p*(3.0-2.0*p);\n    /*\n\t\t2. Perform Bi linear interpolation with a small twist.\n\t\tThe interpolation is between the dot product of the cell\n\t\tvertices and the point P.\n\t*/\n    //Bi-linear interpolation\n    return mix(\n        \t   mix(dot(random(bl), p-vec2(0., 0.)), \n                   dot(random(br), p-vec2(1., 0.)), smoothdir.x),\n        \t   mix(dot(random(tl), p-vec2(0., 1.)), \n            \t   dot(random(tr), p-vec2(1., 1.)), smoothdir.x)\n           ,smoothdir.y);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\t//uv.x *= iResolution.x/iResolution.y;\n    uv *= 4.;\n    vec3 col = vec3(0.0); \n    uv += noise(uv*5.+iTime)*0.04+iTime*0.04;\n    // Time varying pixel color\n    col = vec3(1., .53, .17) * smoothstep(-1.8, 1.16, noise(uv+iTime*0.2));//vec3(noise(uv+iTime)*.5+.5);\n\t\n    col -= smoothstep(.35, .4, noise(uv*4.)*1.2)*vec3(.5, 1., 1.);\n    \n    // Output to screen\n    fragColor = vec4(1.-col,1.0);\n}","name":"Image","description":"","type":"image"}]}