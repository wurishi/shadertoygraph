{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"music","id":"XsXGzn","filepath":"/media/a/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"\nvec3 sphere( vec3 dir, vec3 cam, vec3 center, float radius )\n{\n\tif( dot(dir, center - cam ) < .0 ) return vec3( .0, .0, .0 );\n\tvec3 nearest = ( cam - center ) - dot( ( cam - center ), dir ) * dir;\n\tfloat dist = length( nearest );\n\tif( dist > radius ) return vec3( .0, .0, .0 );\n\tfloat h = sqrt( radius*radius - dist*dist );\n\treturn center + nearest - dir * h;\n}\n\nvec2 rotate( vec2 inVec, float angle )\n{\n\tvec2 sincos = vec2( sin(angle), cos(angle) );\n\treturn vec2( inVec.x * sincos.y - inVec.y * sincos.x, \n\t\t\t\tinVec.x * sincos.x + inVec.y * sincos.y );\n}\n\nfloat getDiffuse( vec3 diff, vec3 normal )\n{\n\t\n\tfloat dist = length( diff );\n\tvec3 dir = diff / dist;\n\treturn max( dot( dir, normal ), .0 ) /\n\t\t( 0.01 + .15 * dist* dist );\n}\n\nfloat getFlare( vec3 dir, vec3 camPos, vec3 lightPos, float radius )\n{\n\tif( dot(dir, lightPos - camPos ) < .0 ) return .0;\n\tvec3 nearest = ( camPos - lightPos ) - dot( ( camPos - lightPos ), dir ) * dir;\n\tfloat dist = length( nearest );\n\tif( dist > radius ) return .0;\n\tfloat lightness = ( radius - length( nearest ) ) / radius;\n\treturn pow( lightness, 22.0 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy - vec2( .5, .5 );\n\tuv *= vec2( 1.0, .6 );\n\tvec3 dir = normalize( vec3( uv.x, uv.y, 1.0 ) );\n\tvec3 camPos = vec3( .0, 2.0, -20.0 );\n\t\n\tfloat mouseX = iMouse.x * .008;\n\tfloat mouseY = clamp( iMouse.y * .002, .10, .2 );\n\t\n\tcamPos.yz = rotate( camPos.yz, mouseY );\n\tdir.yz = rotate( dir.yz, .01 + mouseY);\n\t\n\tcamPos.xz = rotate( camPos.xz, mouseX );\n\tdir.xz = rotate( dir.xz, mouseX );\n\t\n\tfloat progress = 1.0 * iTime;\n\tfloat height = 2.0 * fract( 2.00 *progress) - 1.0;\n\theight = 1.0 - height*height;\n\t\n\tvec3 ballPos = vec3(.0, 1.0 + height * 2.0, .0 );\n    float ballRadius = 1.0;\n\t\n\tvec3 lightPos = vec3( -5.0, 6.0, -4.0 ); \n\tvec3 lightPos2 = vec3( 5.0, 6.0, -4.0 ); \n\tvec3 lightPos3 = vec3( 0.0, 6.0, 8.0 ); \n\t\n\tfloat brightness =  .0;\n\tfloat brightness2 = .0; \n\tfloat brightness3 = .0; \n\t\n\tlightPos.zx = rotate( lightPos.zx, 0.2 * progress);\n\tlightPos2.zx = rotate( lightPos2.zx, 0.2 * progress);\n\tlightPos3.zx = rotate( lightPos3.zx, 0.2 * progress);\n\t\n\tlightPos3.y += 2.0 * sin(       4.0 *progress );\n\tlightPos2.y += 2.0 * sin( 2.0 + 4.0 *progress );\n\tlightPos .y += 2.0 * sin( 1.0 + 4.0 *progress );\n\t\n\tvec3 sceneCollision = sphere( dir, camPos, ballPos, ballRadius );\n\tvec3 normal = vec3( .0, 1.0, .0 );\n\t\n\tif( length( sceneCollision ) > .01 )\n\t{\n\t\tnormal = normalize( sceneCollision - ballPos );\n\t\tbrightness = getDiffuse( lightPos - sceneCollision, normal );\n\t\tbrightness2 = getDiffuse( lightPos2 - sceneCollision, normal );\n\t\tbrightness3 = getDiffuse( lightPos3 - sceneCollision, normal );\t\n\t}\n\telse\n\t{\n\t\tnormal = vec3( .0, 1.0, .0 );\n\t\t\n\t\tif( dir.y < .0 )\n\t\t{\n\t\t\tsceneCollision = camPos - camPos.y * dir / dir.y;\n\t\t\t\n\t\t\tvec3 lightDIff = lightPos - sceneCollision;\n\t\t\tbrightness = getDiffuse( lightDIff, normal );\n\t\t\tvec3 shadowCollision = sphere( \n\t\t\t\tnormalize( lightDIff) , sceneCollision, ballPos, ballRadius );\n\t\t\tif( length( shadowCollision ) > .001 )\n\t\t\t{\n\t\t\t\tbrightness = .0;\n\t\t\t}\n\t\t\t\n\t\t\tlightDIff = lightPos2 - sceneCollision;\n\t\t\tbrightness2 = getDiffuse( lightDIff, normal );\n\t\t\tshadowCollision = sphere( \n\t\t\t\tnormalize( lightDIff ), sceneCollision, ballPos, ballRadius );\n\t\t\tif( length( shadowCollision ) > .001 )\n\t\t\t{\n\t\t\t\tbrightness2 = .0;\n\t\t\t}\n\t\t\t\n\t\t\tlightDIff = lightPos3 - sceneCollision;\n\t\t\tbrightness3 = getDiffuse( lightDIff, normal );\n\t\t\tshadowCollision = sphere( \n\t\t\t\tnormalize( lightDIff ), sceneCollision, ballPos, ballRadius );\n\t\t\tif( length( shadowCollision ) > .001 )\n\t\t\t{\n\t\t\t\tbrightness3 = .0;\n\t\t\t}\n\t\t}\n\t}\n\t\t\n\tbrightness += 7.0 * getFlare( dir, camPos, lightPos, 6.0 );\n\tbrightness2 += 7.0 * getFlare( dir, camPos, lightPos2, 6.0 );\n\tbrightness3 += 7.0 * getFlare( dir, camPos, lightPos3, 6.0 );\t\n\tbrightness *= 0.3 + max( 18.0 * texture( iChannel0, vec2( .03, .0) ).r - 12.0, .0 );\n\tbrightness2 *= 0.3 + max( 8.0 * texture( iChannel0, vec2( .6, .0) ).r - 2.0, .0 );\n\tbrightness3 *= 0.3 + max( 8.0 * texture( iChannel0, vec2( .3, .0) ).r - 2.0, .0 );\n\t\n\tvec3 color = \n\t\tbrightness * vec3( 1.5, 1.0, .3) + \n\t\tbrightness2 * vec3( .7, 1.3, .3 ) + \n\t\tbrightness3 * vec3( 1.0, 0.3, 1.3 );\n\t\n\t\n\t\t\n\tcolor = pow(color, vec3( 0.4 ) ); // gamma = 2.5\n\n\tfloat vignette = pow( dot( uv, uv ), 1.0 );\n\tvignette = max( 1.0 - 1.5 * vignette, .0 );\n\tcolor *= vignette;\n\t\n\t\n\tfragColor = vec4( color, 1.0 );\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4df3Dj","date":"1379495900","viewed":445,"name":"bouncing ball","username":"mare","description":"-- Ball bouncing of the floor --\nPretty elementary use of diffuse point lights.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["3d","simple","lighting"],"hasliked":0,"parentid":"","parentname":""}}