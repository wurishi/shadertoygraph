{"ver":"0.1","info":{"id":"MllSR2","date":"1438217774","viewed":165,"name":"pong metaballs","username":"jordi","description":"Metaballs test with spheres and lines","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","metaballs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"// more metaballs using spheres and lines\n// @jordi_ros\n\n#define COL_SHAPES     vec4(0.173, 0.243, 0.314,1.)\n#define COL_BACKGROUND vec4(1,1,1,1)\n#define COL_SHADOW     COL_BACKGROUND * 0.8\n#define SMOOTH_SIZE    0.02\n#define SHADOW_SIZE    0.3\n#define NUM_BALLS      3\n#define NUM_LINES      2\n\nfloat WIDTH;\nfloat HEIGHT;\n\nstruct Ball\n{\n    vec2 pos;\n    float size;\n};\n    \nstruct Line\n{\n    vec2 ini;\n    vec2 end;\n    float size;\n};\n    \nBall balls[NUM_BALLS];\nLine lines[NUM_LINES];\n\nfloat sinAnim(float min, float max, float speed)\n{\n\treturn (sin(iTime*speed)*0.5+0.5)*(max-min)+min;\n}\n\nvec2 sinAnim(vec2 min, vec2 max, vec2 speed)\n{\n    return vec2(sinAnim(min.x,max.x,speed.x), sinAnim(min.y,max.y,speed.y));\n}\n\nfloat circle(vec2 uv, vec2 pos, float size)\n{\n    if (size == 0.) return 0.;\n    return pow(size / distance(pos, uv), 3.);\n}\n\nfloat line(vec2 uv, vec2 p1, vec2 p2, float size)\n{\n    if (size == 0.) return 0.;\n    vec2 ba = p2 - p1;\n    vec2 pa = uv - p1;\n    float t = dot(ba, pa) / dot(ba,ba);\n\tfloat d;\n\tif (t < 0.0) d = length(uv - p1);\n\telse if (t > 1.0) d = length(uv - p2);\n\telse d = length(pa - t * ba);\n\treturn d < size ? pow((1.-d/size),3.):0.;\n}\n\nvec4 map(vec2 uv)\n{\n    // balls\n    balls[0].pos = sinAnim(vec2(0.6,0.3), vec2(WIDTH-0.6,HEIGHT-0.3), vec2(1.12, 1.35)); balls[0].size = 0.12;\n    balls[1].pos = sinAnim(vec2(0.6,0.3), vec2(WIDTH-0.6,HEIGHT-0.3), vec2(0.91, 1.17)); balls[1].size = 0.15;\n    balls[2].pos = sinAnim(vec2(0.6,0.3), vec2(WIDTH-0.6,HEIGHT-0.3), vec2(0.61, 1.42)); balls[2].size = 0.09;\n    // lines\n    lines[0].ini = vec2(0.4,0.3); lines[0].end = vec2(0.4,HEIGHT-0.3); lines[0].size = 0.21;\n    lines[1].ini = vec2(WIDTH-0.4,0.3); lines[1].end = vec2(WIDTH-0.4,HEIGHT-0.3); lines[1].size = 0.21;\n    \n    //acc shapes\n\tfloat acc = 0.;\n\tfor (int i = 0; i < NUM_BALLS; i++)\n\t\tacc+= circle(uv, balls[i].pos, balls[i].size);\n\tfor (int i = 0; i < NUM_LINES; i++)\n\t\tacc+= line(uv, lines[i].ini, lines[i].end, lines[i].size);\n    \n    // color\n    vec4 col = COL_BACKGROUND;\n    float l0 = 0.5;\n\tfloat l1 = l0-SMOOTH_SIZE;\n\tfloat l2 = l1-SHADOW_SIZE;\n\tif (acc > l2)\n\t{\n        col = COL_SHAPES;\n\t\tif (acc > l1)\n\t\t\tcol = mix(COL_SHADOW, col, smoothstep(l1,l0,acc)); // aa with shadow\n\t\telse if (acc > l2)\n\t\t\tcol = mix(COL_BACKGROUND, COL_SHADOW, pow(smoothstep(l2,l1,acc),3.)); // shadow\n\t}\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tWIDTH = iResolution.x / iResolution.y;\n\tHEIGHT = 1.;    \n\tfragColor = map(fragCoord.xy / iResolution.y);\n}\n","name":"Image","description":"","type":"image"}]}