{"ver":"0.1","info":{"id":"MtyBWz","date":"1542207426","viewed":271,"name":"Chicco glitch 🍤","username":"marcofugaro","description":"Daje","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["glitch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 2D Random\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\nfloat noise (in float st) {\n\treturn noise(vec2(st));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {  \n  vec2 uv = fragCoord.xy/iResolution.xy;\n  float time = iTime;\n  vec2 mouse =  iMouse.xy/iResolution.xy;\n  bool clicked = iMouse.z > 0.0;\n\n    \n    \n  float y = 1.0 - uv.y;\n  float f = y * y * y * abs(sin(y * 3. + noise(time) * 3.) * cos(1. / y* 200. + time * 20.) / sin(y * 10. + noise(time * time) * 0.3));\n  vec2 textCoords = vec2(uv.x - y * f, uv.y);\n \n    \n  fragColor = texture(iChannel0, textCoords);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// 2D Random\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\nfloat noise (in float st) {\n\treturn noise(vec2(st));\n}\nvec2 poltocar( vec2 pol ) {\n    return vec2( pol.x * cos(pol.y), pol.x * sin(pol.y) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float time = iTime;\n    vec2 uv = fragCoord / iResolution.st;\n    vec2 displacedUv = uv;\n    vec4 imageIn = texture(iChannel1, uv);\n    vec4 feedbackIn = texture(iChannel0, uv);\n\n    // displacedUv += poltocar( vec2(length(feedbackIn.rg), length(feedbackIn.rb)) ) * 0.0005;\n    displacedUv -= poltocar( vec2(length(feedbackIn.rg), length(feedbackIn.rb)) ) * 0.0003;\n    vec4 feedbackOut = texture(iChannel0, displacedUv);\n\n    feedbackOut.r = mod(feedbackOut.r + 0.001, 1.0);\n    feedbackOut.g = mod(feedbackOut.g - 0.001, 1.0);\n    feedbackOut.b = mod(feedbackOut.b + 0.001 * noise(time), 1.0);\n\n    if(iFrame <= 10 || iMouse.z > 0.0){\n        fragColor = imageIn;\n    } else {\n        fragColor = feedbackOut;\n    }\n}","name":"Buf A","description":"","type":"buffer"}]}