{"ver":"0.1","info":{"id":"wlyfWD","date":"1677176727","viewed":119,"name":"red alarm","username":"Carandiru","description":"something horror, smile?","likes":2,"published":3,"flags":32,"usePreview":0,"tags":["rasterize","rect"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    fragColor = vec4(pow(textureLod(iChannel0, uv, 0.0f).rgb, vec3(1.0f/2.2f)),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float sdOrientedBox( in vec2 p, in vec2 a, in vec2 b, in float r ) // modified - original iq\n{\n    float l = length(b-a);\n    vec2  d = (b-a)/l;\n    vec2  q = (p-(a+b)*0.5);\n          q = mat2(d.x,-d.y,d.y,d.x)*q;\n         // q = abs(q)-l*0.5f;\n         //q = abs(q)-vec2(l, (r + 0.3333333f) * 0.5f)*0.5f;\n         q = abs(q)-vec2(l, r)*0.5f;\n    return length(max(q,0.0)) + min(max(q.x,q.y),0.0);    \n}\n\n\nstruct rect_t\n{\n    vec2 t0, t1;\n};\n\n#define fma(a,b,c) (a*b+c)\nvec2 rotate( in vec2 p, in vec2 cossin )\n{\n\t//return(XMVectorSet(SFM::__fms(p.x, angle.c, p.y * angle.s),\n\t//\t\t\t\t     SFM::__fma(p.x, angle.s, p.y * angle.c), p.z, p.w));\n\t#define c_ x\n\t#define s_ y\n\n\treturn( vec2(fma(p.x, cossin.c_, p.y * cossin.s_), fma(p.x, -cossin.s_, p.y * cossin.c_)) );\n\n\t#undef c_\n\t#undef s_\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.y *= iResolution.x / iResolution.y;\n    uv = 2.0f * uv - 1.0f;\n    \n    vec2 p = vec2(0,1.5);\n    \n    rect_t r;\n        \n    vec2 cs = vec2(cos(iTime), sin(iTime));\n    \n    vec2 width_height = vec2(0.25f, 0.9f);\n    \n    //if (fract(iTime) >= 0.5f) {\n    //    float temp = width_height.x;\n    //    width_height.x = width_height.y;\n    //    width_height.y = temp;\n    //}\n    \n    rect_t local;\n    local.t0 = vec2(-width_height);\n    local.t1 = vec2(width_height);\n    \n    local.t0 = rotate(local.t0, cs);\n    local.t1 = rotate(local.t1, cs);\n    \n    r.t0 = uv;\n    r.t1 = uv;\n        \n    vec2 minmax = vec2(min(width_height.x,width_height.y), max(width_height.x,width_height.y));\n    \n    float d = 999999999.9f;\n    \n    for ( float i = 1.0f; i < 4.0f; ++i) {\n    \n        r.t0 += local.t0 / (i*i);\n        r.t1 += local.t1 / (i*i);\n    \n        d = min(d, sdOrientedBox(p, r.t0, r.t1, minmax.x / minmax.y));\n        \n        p.y -= 450.0f/iResolution.y;\n    }\n    \n    float rr = 0.5f;\n    if ( d < 0.0f ) {\n      float hw = fwidth(d) * 0.5f;\n      rr += smoothstep(-d, d, hw);\n    }\n    \n    vec3 color = mix(vec3(0), vec3(1.0f + iTimeDelta,3,2), rr);\n\n    color += 0.5f * textureLod(iChannel0, fragCoord/iResolution.xy, 0.0f).rgb * (rr + (1.0f - abs(d)) - abs(d));\n\n    fragColor = vec4(1.0f - clamp(color, vec3(0), vec3(1)),1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}