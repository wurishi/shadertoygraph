{"ver":"0.1","info":{"id":"XfjXDW","date":"1706338351","viewed":48,"name":"Box trick color/zoom","username":"timmaffett","description":"boxes and boxes. floating boxes\n-tmm added some color and mouse","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Box trick\" by BCFlavin. https://shadertoy.com/view/4fSSWD\n// 2024-01-27 06:24:23\n\nfloat sdBoxFrame( vec3 p, vec3 b, float e )\n{\n       p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\nmat2 rot2d(float angle) {\n    float c = sin(angle);\n    float s = cos(angle);\n    return mat2(c, s, -s, c);\n}\n\n// Scene distance\nfloat map(vec3 p) {\n\n    vec3 q = p;\n    \n\n    q = fract(p) - 0.5;\n    \n    q.xz *= rot2d(iTime);\n    q.yx *= rot2d(iTime);\n    \n    float box = sdBoxFrame(q, vec3(0.1), float(0.01));\n\n    \n   \n    return box;\n}\n\n\nvec3 hsb2rgb( in vec3 c )\n{\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return (c.z * mix( vec3(1.0), rgb, c.y));\n}\n\n\n// simple mouse rotate and zoom for shader\n#define pi 3.14159265359 \n\nmat2 r2d(float a) {\n    return mat2(cos(a),sin(a),-sin(a),cos(a));\n}\n\nvec2 mouseRotZoom(vec2 uv) {\n    // allow mouse zoom and rotate    \n    vec2 mouse = (iMouse.xy == vec2(0.)) ? vec2(1.0) : iMouse.xy/iResolution.xy;\n    uv.xy *= r2d(-(mouse.x)*pi*2.);\n    uv *= (1./pow(3.3,mouse.y));\n    return uv;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n\nuv = mouseRotZoom(uv);\n\n    // Initialization\n    vec3 ro = vec3(0, 0, -3);         // ray origin\n    vec3 rd = normalize(vec3(uv, 1)); // ray direction\n    vec3 col = vec3(0);               // final pixel color\n\n    float t = 0.; // total distance travelled\n\nvec3 col2 = vec3(0.);\n\n    // Raymarching\n    for (int i = 0; i < 50; i++) {\n        vec3 p = ro + rd * t;     // position along the ray\n        p.zy *= rot2d(iTime * 0.5);     // rotate camera\n        p.xy *= rot2d(iTime * 0.5);\n\n        float d = map(p);         // current distance to the scene\n\n        t += d * 0.6;             // \"march\" the ray\n\n        if (d < .001) {\n           col2 = hsb2rgb( vec3( p.x/12. + p.y/12. + p.z/12., 0.9, 0.9 ) );\n           break;      // early stop if close enough\n        }\n        if (t > 100.) break;      // early stop if too far\n    }\n\n    // Coloring\n    col = vec3(t * .1 + 0.0,t * .1 + 0.0,t * .1 + 0.0);  // color based on distance\n\n    fragColor = vec4(col*col2, 1);\n}","name":"Image","description":"","type":"image"}]}