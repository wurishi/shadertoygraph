{"ver":"0.1","info":{"id":"NdSGWd","date":"1618593703","viewed":133,"name":"Magic ball","username":"Anton_Labutin","description":"Ray tracing","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 glow = fire_color(2.) * max(0., 1.3 - 1.8 * length(fragCoord - .5 * iResolution.xy ) / iResolution.y );\n\tvec3 col0 = texture(iChannel3, uv).rgb;\n    vec3 col1 = texture(iChannel2, uv).rgb;\n    fragColor = vec4(.06 * glow + max(col0, .8 * col1), 1.0) + texture(iChannel3, uv) + texture(iChannel0, uv) / float(iFrame + 1);\n\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\n\nconst vec3 CAMERA_POS = vec3(6, 2, -3);\n\nconst vec3 LIGHT1_POS = vec3(-1, 1, -2);\nconst float LIGHT1_RADIUS = 0.3;\nconst vec3 LIGHT1_COLOR = vec3(0, 0.5, 1.0);\n\nconst vec3 LIGHT2_POS = vec3(0.4, 1.2, 2);\nconst float LIGHT2_RADIUS = 0.1;\nconst vec3 LIGHT2_COLOR = vec3(0.6, 0.6, 0.0);\n\nconst vec3 LIGHT3_POS = vec3(1.5, 0.7, 1.5);\nconst float LIGHT3_RADIUS = 0.2;\nconst vec3 LIGHT3_COLOR = vec3(0.5, 0.8, 0.2);\n\nvec3 randDir;\n\n\n// (CAMERA_POS + t * viewVec).y == -1\n// t = (-1 - CAMERA_POS.y) / viewVec.y;\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    // pos - позиция камеры\n    // dir - направление\n    // пересечение dir с плоскостью y = -1.5\n    // (СAMERA_POS + t * dir).y == -1.5\n    // t = (-1 - pos.y) / dir.y\n    float planePosY = -1.5;\n    float t = (planePosY - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 50.0) {\n        return INF;\n    }\n    \n    normal = vec3(0, 1, 0);\n    \n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n\n    // пересечение со сферой в начале координат\n    // ||dir|| = 1\n    // dot(pos + t * dir, pos + t * dir) == r * r\n    // dot(pos, pos) + 2 * t * dot(dit, pos) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    \n    if (D < 0.0) {\n        // не пересекли сферу\n        return INF;\n    }\n    \n    float t = -b - sqrt(D);\n    \n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    \n    t = -b + sqrt(D);\n    \n    if (t < 0.0) {\n        // сфера - за нами или мы - внутри сферы\n        return INF;\n    }\n    \n    normal = normalize(pos + t * dir);\n    \n    return t;\n}\n\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 1.0) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 1.0;\n    \n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    \n    t = (-b - sqrt(D)) / a;\n    \n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    \n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    \n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    \n    return INF;\n}\n\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 sphNorm;\n    float sphT = traceSphere(pos, dir, 1.0, sphNorm);\n    if (sphT < dist)\n        return true;\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n}\n\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n     // освещение по Ламберту\n    vec3 toLight1 = LIGHT1_POS - pos; // вектор на 1й источник света\n    // модель локального освещения\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + \n    // мягкие тени \n    randDir * LIGHT1_RADIUS) \n    // мягкие тени - END \n    ? 0.0 : 20.0 / distSq1;\n    \n    vec3 toLight2 = LIGHT2_POS - pos; // вектор на 2й источник света\n    // модель локального освещения\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 10.0 / distSq2; // * 0.0 = тень\n    return color * (\n        // diffuse составляющая I\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        // ambient составляющая I\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        // семплируем канал iChannel1 в направлении normal\n        + texture(iChannel1, normal).rgb * 0.1\n    );\n}\n\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        // луч пришёл снаружи\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    // тангенциальная составляющая\n    vec3 tang = normalize(v - cosA * normal);\n    // масштабируем вектора \n    float sinB = sinA / n2 * n1;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\n\nfloat pow2(float x) {\n    return x * x;\n}\n\n// возврат случайного числа по номеру кадра frame\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // вектор из 3х случайных чисел\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    \n    // смещаем начало uv-координат в центр экрана и выравниваем по всему экрану\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 \n        // anti-aliasing - сглаживание краёв \n        + (randVals.xy - 0.5)) // случайное смещенеи от -1 до 1\n        // anto-aliasing END\n        / iResolution.x;\n        \n    vec3 front = normalize(-CAMERA_POS); // вектор вперёд\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up)); // векторное произведение\n    up = normalize(cross(right, front));\n    \n    // вектор камеры - направление взгляда для каждого пикселя\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n     // motion blur\n    vec3 LIGHT1_POS = vec3(-1, 1, -2) + vec3(1, 1, 0) * randVals * 0.2;\n    // motion blur в одном направлении\n    vec3 LIGHT2_POS = vec3(0.4, 1.2, 2) + vec3(0, 1, 0) * randVals.y * 0.1;\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    \n    // коэффициенты преломления\n    const float GLASS_N = 1.5;\n    const float AIR_N = 1.0;\n    float n1 = AIR_N;\n    const float DIAMOND_N = 2.5;\n    \n    \n    // коэффициенты для reflection\n    float DIAMOND_R = pow2(DIAMOND_N - GLASS_N) / pow2(DIAMOND_N + GLASS_N);\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    \n    vec3 colorMult = vec3(1, 1, 1);\n    \n    // 20 - число отражений\n    for (int i = 0; i < 20; ++i) {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        \n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb;\n            normal = planeNorm;\n        }\n        \n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        \n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n        \n        vec3 l3Norm;\n        float light3T = traceSphere(curPos - LIGHT3_POS, curDir, LIGHT3_RADIUS, l3Norm);\n        if (light3T < t) {\n            t = light3T;\n            materialType = EMISSION;\n            color = LIGHT3_COLOR;\n            normal = l3Norm;\n        }\n        \n        vec3 sphNorm;\n        float sphT = traceSphere(curPos, curDir, 1.0, sphNorm);\n        if (sphT < t) {\n            t = sphT;\n            normal = sphNorm;\n            if (randVals.x < GLASS_R) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= vec3(1.0, 1.0, 1.0);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n        }\n        \n        /*float sph2T = traceSphere(curPos, curDir, 0.4, sphNorm);\n        if (sph2T < t) {\n            t = sph2T;\n            normal = sphNorm;\n            if (randVals.x < DIAMOND_R) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= vec3(1.2, 0.8, 0.0);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = GLASS_N;\n                } else {\n                    nEnter = DIAMOND_N;\n                }\n            }\n        }\n        */\n        \n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n        \n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) {\n                fragColor.rgb = color * colorMult;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            } else if (materialType == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, nEnter);\n                curPos = worldPos + curDir * 1e-5;\n                n1 = nEnter;\n            }\n        } else {\n            fragColor.rgb = texture(iChannel1, curDir).rgb * colorMult;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"vec3 fire_color(float x)\n{\n\treturn\n        // red\n        vec3(0.5, 0., 0.) * x\n        // yellow\n        + vec3(1., 1., 0.) * clamp(x - .5, 0., 1.)\n        // white\n        + vec3(1., 1., 1.) * clamp(x - .7, 0., 1.);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float A = 1.;\n\tconst int N = 2;\n\n    vec4 col = vec4(0);\n    for (int yoff = -N; yoff <= N; ++yoff) {\n        for (int xoff = -N; xoff <= N; ++xoff) {\n            vec2 off = vec2(xoff, yoff);\n            vec2 uv = (fragCoord + A * off) / iResolution.xy;\n            col += texture(iChannel0, uv) / (.5 + 1. * length(off / vec2(N, N)));\n        }\n    }\n\n    fragColor = vec4(col.rgb / float((N + N) * (N + N)), 1.0);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"mat4 rotate(float a, vec3 v)\n{\n    float c = cos(a);\n    vec3 ci = (1. - c) * v;\n    vec3 s = sin(a) * v;\n\n    return mat4(\n        ci.x * v.x + c, ci.x * v.y + s.z, ci.x * v.z - s.y, 0,\n        ci.y * v.x - s.z, ci.y * v.y + c, ci.y * v.z + s.x, 0,\n        ci.z * v.x + s.y, ci.z * v.y - s.x, ci.z * v.z + c, 0,\n        0, 0, 0, 1\n\t);\n}\n\nmat4 translate(vec3 v)\n{\n    return mat4(\n        1, 0, 0, 0,\n        0, 1, 0, 0,\n        0, 0, 1, 0,\n        v.x, v.y, v.z, 1\n    );\n}\n\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\nfloat intersect_ray_sphere(vec3 origin, vec3 direction, vec3 center, float radius)\n{\n    vec3 oc = origin - center;\n    float a = dot(direction, direction);\n    float b = 2. * dot(oc, direction);\n    float c = dot(oc, oc) - radius * radius;\n    float disc = b * b - 4. * a * c;\n    if (disc < 0.) {\n        // no intersection?\n        return -1.;\n    } else {\n        return (-b - sqrt(disc)) / (2. * a);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    mat4 mvp = rotate(radians(0. * iTime), vec3(0, 1, 0));\n    \n\tvec3 dir = (mvp * vec4(rayDirection(145.0, iResolution.xy, fragCoord), 1.)).xyz;\n    vec3 eye = (mvp * vec4(0., 0., 1.9, 1.)).xyz;\n\n    vec3 sphere_pos = vec3(0., 0., 0.);\n\n    float intensity = 0.;\n    \n    mat4 tex_mat = mat4(1.);\n    mat4 wind_mat = mat4(1.);\n    for (int i = 0; i < 9; ++i) {\n        float dist = intersect_ray_sphere(eye, dir, sphere_pos, 1. - float(i) / 40.);\n\n        if (dist > 0.) {\n            vec3 hit_pos = eye + dir * dist;\n            vec3 t_hit_pos = (tex_mat * wind_mat * vec4(hit_pos, 1.)).xyz;\n            vec3 normal = normalize(t_hit_pos - sphere_pos);\n\n            float alpha = texture(iChannel0, 1. / float(i) * vec2(atan(normal.z, normal.x) / radians(90.), normal.y)).r;\n\t\t\tintensity += step(1. - float(i) / 7., alpha) * .6 * alpha * max(0., dot(vec3(0, 0, 1.), hit_pos));\n\n            tex_mat = rotate(radians(11.) * iTime, normalize(vec3(.3, -.7, .1))) * tex_mat;\n            wind_mat = rotate(radians(15.) * iTime, normalize(vec3(1., 0., 0.))) * wind_mat;\n        }\n    }\n\n\tfragColor = vec4(fire_color(intensity), 1.);\n}","name":"Buffer D","description":"","type":"buffer"}]}