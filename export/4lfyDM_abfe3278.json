{"ver":"0.1","info":{"id":"4lfyDM","date":"1504980091","viewed":579,"name":"Simple 2d shadows","username":"srn","description":"First shadow shader","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["2d","shadows"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float objectSize=0.04;\n\nconst float lampSize = 0.02;\n\nvec2[] points = vec2[] (\n        vec2(0.1, 0.7),\n        vec2(0.2, 0.7),\n        vec2(0.3, 0.7),\n        vec2(0.4, 0.7),\n        vec2(0.5, 0.7),\n        vec2(0.6, 0.7),\n        vec2(0.7, 0.7),\n        vec2(0.8, 0.7),\n        \n        \n        vec2(0.1, 0.3),\n        vec2(0.2, 0.3),\n        vec2(0.3, 0.3),\n        vec2(0.4, 0.3),\n        vec2(0.5, 0.3),\n        vec2(0.6, 0.3),\n        vec2(0.7, 0.3),\n        vec2(0.8, 0.3)\n        \n    \n    );\n\n\nfloat isObject(vec2 uv, float bias) {\n   \n\n    float dist = 1.0;\n    \n    for (int i = 0; i < 16; ++i ) {\n        \n        vec2 bpoint = vec2(points[i].x * bias, points[i].y);\n        \n        float d = (distance(bpoint, uv));\n        \n        if  (d < dist) dist =d;\n    }\n    return dist;\n    \n}\n\n\n\nfloat hitsObject(vec2 a, vec2 n, vec2 p) {\n    \n    vec2 projection = (dot((a-p),n) * n);\n    \n   \n        \n    vec2 projectionNormal = (a-p)- (dot((a-p),n) * n);\n    \n    float l = length(projectionNormal);\n    \n    return l;\n    \n}\n\nfloat isLamp(vec2 uv,vec2 posLamp) {\n    \n   \t    return distance(uv, posLamp);\n    \n}\n\n\nfloat isShadow(vec2 uv, vec2 posLamp, float bias) {\n    int count = 0;\n    float dist = 1.0;\n    for (int i = 0; i< 16; i++ ) {\n        vec2 p = points[i];\n        p.x *= bias;\n        \n        vec2 normUvLamp = normalize(posLamp-uv);\n        vec2 normPLamp = normalize(posLamp-p);\n        \n        \n        if (length(normUvLamp+normPLamp) > 0.5) {\n        \n        \tif ((distance(uv, posLamp) > distance(p, posLamp)))  {\n                float d = hitsObject(uv, normalize(uv-posLamp), p);\n     \t\t\tif (d< dist )  dist = d ;\n        \t}\n        }\n        \n    }\n    return dist;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.y;\n    \n    float bias = iResolution.x / iResolution.y;\n    \n    vec2 posLamp = vec2((0.5 * sin(iTime*0.2) + 0.5) * bias , 0.5);\n    \n    vec4 cShadow = vec4(0.0,0.0,0.0, 1.0);  \n    vec4 cObject = vec4(0.0,1.0,0.0, 1.0);\n    vec4 cFloor = vec4(0.0,0.0,1.0, 1.0);\n    vec4 cLamp = vec4(1.0,1.0,1.0, 1.0);\n    \n    float tolerance = 0.01;\n    \n    \n    float distObject = isObject(uv, bias);\n    float distShadow = isShadow(uv, posLamp, bias);\n    float distLamp  = isLamp(uv, posLamp);\n    \n    \n    float t = 0.005;\n    float shadow = 1.0;\n    if ((distShadow > objectSize - t) && distShadow < objectSize ) {\n    \t shadow = smoothstep(0.0, 1.0, (distShadow-(objectSize-t))/t);\n    } else if (distShadow < objectSize) {\n        shadow = 0.0;\n    }\n    \n    \n    cFloor = vec4(0.0,0.0,shadow,1.0);\n    \n    if ((distObject > objectSize -t) && distObject < objectSize) {\n        float step = smoothstep(1.0, 0.0, (distObject-(objectSize-t))/t);\n        vec4 m = mix(cFloor, cObject, step);\n        fragColor = m;\n    } else if ((distObject < objectSize -t)) {\n        fragColor = cObject;\n    } else if (distLamp < lampSize) {\n        float tlamp = 0.015;\n        if (distLamp < lampSize - tlamp) {\n        \tfragColor = vec4(1.0,1.0,1.0,1.0);\n        } else {\n            \n            float step = smoothstep(1.0, 0.0, (distLamp-(lampSize-tlamp))/tlamp);\n            vec4 m = mix(cFloor, cLamp, step);\n            fragColor = m;\n        }\n    } else {\n        fragColor =cFloor;\n    }\n       \n    \n    \n    \n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 middle = vec2(0.5, 0.5);\n    \n    \n    \n    \n    \n    float dist = distance(uv, middle); \n    \n    float col = dist < 0.2 ? 1.0 : 0.0;\n    \n\tfragColor = vec4(col, col, col, 1);\n}","name":"Buf A","description":"","type":"buffer"}]}