{"ver":"0.1","info":{"id":"DtyXzW","date":"1685958375","viewed":155,"name":"Fractal hearts","username":"markT","description":"inspired by kishimisu fractal circles, a fractal heart geometry repeating","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal","hearts"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float dot2( in vec2 v ) { return dot(v,v); }\n\nfloat sdHeart( in vec2 p )\n{\n    p.x = abs(p.x);\n\n    if( p.y+p.x>1.0 )\n        return sqrt(dot2(p-vec2(0.25,0.75))) - sqrt(2.0)/4.0;\n    return sqrt(min(dot2(p-vec2(0.00,1.00)),\n                    dot2(p-0.5*max(p.x+p.y,0.0)))) * sign(p.x-p.y);\n}\n\nvec3 palette(float t)\n{\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.00, 0.10, 0.20);\n    return a + b * cos(6.28318 * ( c * t + d));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = (uv - 0.5) * 2.0;\n    uv.x *= iResolution.x / iResolution.y;\n    uv.y -= 0.5; \n    \n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    \n    for(float i = 0.0; i < 4.0; i++) {\n        uv = fract(uv * 1.5) - 0.5;\n    \n        float d = sdHeart(uv) * exp(-sdHeart(uv0));\n        vec3 color = palette(sdHeart(uv0) + i * 0.4 + iTime * 0.4);\n    \n        d = sin(d * 8.0 + iTime) / 8.0; \n        d = abs(d);\n\n        d = pow(0.01 / d, 1.2);\n    \n    \n        finalColor += color * d;\n    }\n    \n    \n\n    // Output to screen\n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}