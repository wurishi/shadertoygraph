{"ver":"0.1","info":{"id":"tstczH","date":"1600437842","viewed":155,"name":"fork-FREQUENCY ESCALATING","username":"jorge2017a1","description":"fork-FREQUENCY ESCALATING","likes":2,"published":1,"flags":8,"usePreview":0,"tags":["fork","frequencyescalating"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// From https://www.shadertoy.com/view/ltfSRr\nfloat message(vec2 uv) {\n\tuv -= vec2(1.0, 10.0);\n\tif ((uv.x < 0.0) || (uv.x >= 32.0) || (uv.y < 0.0) || (uv.y >= 3.0)) return -1.0;\n\tint i = 1, bit = int(pow(2.0, floor(32.0 - uv.x)));\n\tif (int(uv.y) == 2) i = 928473456 / bit;\n\tif (int(uv.y) == 1) i = 626348112 / bit;\n\tif (int(uv.y) == 0) i = 1735745872 / bit;\n\treturn float(i - 2 * (i / 2));\n}\n\n\n\n\n\nfloat rand(int seed, float ray) {\n\treturn mod(sin(float(seed)*1.0+ray*1.0)*1.0, 1.0);\n}\n\n//autor desconocido\nvec3 ColoresRayos( vec2 fragCoord )\n{\n\tfloat pi = 3.14159265359;\n\tvec2 position = ( fragCoord.xy / iResolution.xy )-vec2(0.5)  ;\n\tposition.y *= iResolution.y/iResolution.x;\n\tfloat ang = atan(position.y, position.x);\n\tfloat dist = length(position);\n\tvec3 color;\n    \n    color.rgb = vec3(0.5, 0.5, 0.5) * (pow(dist, -1.0) * 0.05);\n    \n    \n\tfor (float ray = 0.0; ray < 18.0; ray += 1.0) {\n\t\t//float rayang = rand(5234, ray)*6.2+time*5.0*(rand(2534, ray)-rand(3545, ray));\n\t\t//float rayang = time + ray * (1.0 * (1.0 - (1.0 / 1.0)));\n\t\tfloat rayang = (((ray) / 9.0) * 3.14) + (iTime * 0.1\t\t\t);\n\t\trayang = mod(rayang, pi*2.0);\n\t\tif (rayang < ang - pi) {rayang += pi*2.0;}\n\t\tif (rayang > ang + pi) {rayang -= pi*2.0;}\n\t\tfloat brite = 0.3 - abs(ang - rayang);\n\t\tbrite -= dist * 0.2;\n\t\tif (brite > 0.0) {\n\t\t\tcolor.rgb += vec3(sin(ray+0.0)+1.0, sin(ray+2.0)+1.0, sin(ray+4.0)+1.0) * brite;\n\t\t}\n\t}\n\treturn color;\n}\n\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tif (iResolution.y < 2000.0) {\n\t\tfloat c = message(fragCoord.xy / 8.0);\n\t\tif (c >= 0.0){\n\t\t\tfragColor = vec4(c);\n\t\t\treturn;\n\t\t}\n\t}\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec3 col1 = vec3(uv, 0.5 + 0.5 * mod(iTime, 0.25));\n    vec3 col2= ColoresRayos( fragCoord );\n    vec3 colsalida=mix(col1, col2, 1.);\n    fragColor=vec4(colsalida, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//modificado por JorgeFloresP... 18-sep-2020\n//referencia\n// WHY IS THIS FREQUENCY ESCALATING\n//Creado por QM en 2019-02-19  https://www.shadertoy.com/view/tslSR8\n//tambien\n//     Chords Experiment =https://www.shadertoy.com/view/WtByDR\n\n#define pi 3.1415926538\n\nfloat E1(float x)\n{\n    if(x==0.)\n        return 0.;\n    else\n        return -log(x) - .0577 + x -.25*x*x + .552*x*x*x - .01*x*x*x*x;\n}\n\nfloat Fun3(float x)\n\t{\treturn 1. + .3333*x + .1*x*x * .0238*x*x*x + .0046*x*x*x*x;}\nfloat Fun1(float x)\n\t{ return 1. + .33*x; }\n\nfloat Fun2(float x)\n\t{ return 1. + .33*x+0.66*x;}\n\nfloat note(float n)\n{\n\treturn n >= 0. ? 440. * pow(2., n / 12.) : 440. / pow(2., -n / 12.);\n}\n\nfloat bass(float t, float f, float n)\n{\n    const float tau = 6.2831;\n    f = 1. - f;\n\treturn sin(tau * t * note(-36. + n) + sin(tau * t * note(-24. + n)) + .25 * sin(tau * t * note(-5. + n))) * f * f;\n}\n\nfloat sfract(float v, float k)\n{\n    v = fract(v);\n\treturn mix(v, 0., clamp(v * k - k + 1., 0., 1.));\n}\n\nfloat sirenaEscalating(float time)\n{   \n    //THIS IS STUNNING ME. sin(x) should be in [-1; 1] FOR ALL X\n    float freq_mod = 1. + .5 * sin(6.2831*time);\n\n    // therefore, freq_mod should be in [.5; 1.5]. right?\n    \n    // yet, the frequency of this sound does not stay between [200; 600] Hz.\n    // it is escalating without end. how come?\n\n    float freq0 = 55.;\n\n    float shitty_phase = 6.2831 * freq0 * freq_mod * time;\n\n    // THIS SUCKS (SUCKED)\n    //return vec2( sin(shitty_phase)*.3 );\n\n    \n    // with great helpful input from rory:618\n    // trying different sliding moves: linear, quadratic, exponential\n    \n    float lambda = log(2.)/12.;\n    float delta_note = 24.;\n    float ld = lambda * delta_note;\n    float slide_time = 1.0; // in seconds\n    float slide_proc = min(time, slide_time)/slide_time;\n\n    float lin_phase = 6.2831 * freq0 * exp(ld) * slide_time/ld * (1.-exp(-ld*slide_proc));\n\n    float sqr_ = (1.-slide_proc)*(1.-slide_proc);\n    float quad_phase = 6.2831 * freq0 * slide_time * (Fun2(ld) - (1.-slide_proc)*Fun2(ld*sqr_));\n\n    float gamma = 5.;\n    float exp_phase = 6.2831 * freq0 * slide_time/gamma * (E1(ld)-E1(ld*exp(-gamma*slide_proc)));\n    \n    //float phase = lin_phase;\n    float phase = quad_phase;\n    //float phase = exp_phase;\n    \n//    if(time > slide_time) phase += 6.2831 * freq0 * time;\n    if(time >= slide_time)\n        phase += 6.2381 * mod(freq0 * time,1.);\n \n    return (sign(sin(phase))+sign(sin(phase*.97)))*.15;\n}\n    \n\nfloat Basstiempo(float time)\n{\n    float tempo = 200.;\n    float beat = time / 60. * tempo;\n    float tick = beat * 4.;\n    float chord = beat * 4. / 3.;   \n    float md = 0.5;\n    float bajo= bass(time, clamp(sfract(beat + .25, 30.), 0., .5) * 2., 0.+ md * 3.);\n    return bajo;\n}    \n\nconst float[16] nt=float[](2.,4.,8.,16.,32.,48.,64.,80.,101.,127.,190.,254.,381.,508.,1017.,2034.);\n\nfloat noise(float x,int i)\n\t{return fract(sin(floor(x*1789772.5/nt[i])*179.2)*204.8);}\n\n\n\nfloat noteFreq(float n) {\n\treturn 440.0 * pow(2.0, floor(n) / 12.0);\n}\n\n// From https://www.shadertoy.com/view/llByWR\nfloat sawtooth(float d, float x) {\n\treturn (1.0 - 2.0 * acos((1.0 - d) * -cos(x / 2.0)) / pi) * (2.0 * atan(sin(x / 2.0) / d) / pi);\n}\n\n// Time, base note, range, notes per second, mod\nfloat arpeggiate(float t, float b, float r, float n, float m) \n{\n\treturn mod(floor(t / n), m) * r + b;\n}\n\nvec2 mainSound( in int samp, float time )\n{\n    float salida;\n    \n    if (time>3.0)\n    {\n    \tfloat timesirena=mod(time,0.5);\t\n\t\tsalida= sirenaEscalating(timesirena);\n        float fnoise= noise(time,  int( mod( time,15.0)) );\n        salida+=fnoise;\n        \n        float freqq;\n        //https://www.shadertoy.com/view/WtByDR\n        float t1=mod(time, 10.0);\n        float t2=mod(time, 20.0);\n        \n        if (t1<t2)\n         freqq=mod(time*10.0,2.0);\n        else\n         freqq=mod(time*100.0,4.0);\n        \n        \n        freqq=mod(freqq,10.0)+t1;\n        \n        float bass = arpeggiate(time, 0.0, 3.0, 2.0, 2.0)*freqq;\n\t\tfloat low = arpeggiate(time, 12.0, 3.0, 2.0, 2.0)*freqq;\n\t\tfloat mid = arpeggiate(time, 16.0, 2.0, 1.0, 4.0)*freqq;\n\t\tfloat high = arpeggiate(time, 24.0, 3.0, 2.0, 2.0)*freqq;\n\t\tfloat higher = arpeggiate(time, 28.0, 2.0, 1.0, 4.0)*freqq;\n        const float phaseOffset = 0.01;\n        float repeat = mod(time, 0.25) * (5.0 - cos(time) * 2.0);\n        float offset2 = cos(floor(time)) * phaseOffset;\n        \n        \tfloat s1= sawtooth(repeat, (time + offset2) * noteFreq(bass));\n        \tfloat s2= sawtooth(repeat, (time + offset2) * noteFreq(low));\n        \tfloat s3= sawtooth(repeat, (time + offset2) * noteFreq(mid));\n        \tfloat s4= sawtooth(repeat, (time + offset2) * noteFreq(high));\n        \tfloat s5= sawtooth(repeat, (time + offset2) * noteFreq(higher));\n        float sumas=s1+s2+s3+s4+s5;\n         sumas=sumas/5.0;\n         salida+=sumas;\n                               \n    }   \n\telse\n    \tsalida+=Basstiempo(time);\n    \n    return vec2(salida );\n  \n}","name":"Sound","description":"","type":"sound"}]}