{"ver":"0.1","info":{"id":"4dVBDd","date":"1531094045","viewed":664,"name":"Bytebeat Boilerplate","username":"stellartux","description":"Boilerplate code for adding bytebeat to a shader. 'rgb' to toggle the visuals.","likes":8,"published":3,"flags":24,"usePreview":0,"tags":["music","bytebeat"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\tBytebeat Boilerplate\n\tstellartux 2018\n\tunlicense\n\n\tThe functions in the Common tab are useful for converting bytebeat \n\tmusic to be played alongside shaders.  \n\n\tMore info on bytebeat: http://canonical.org/~kragen/bytebeat/\n\tOnline bytebeat editor: https://bit.ly/2KJTddS\n\t\n\tTry using the MIDI function from https://www.shadertoy.com/view/4sGfRw\n\tto calculate values for the virtual sample rate.\n\tThe closest note value to 8000Hz is B10 at 7902.132Hz, midi note 119.\n\n\tPitch and samplerate are interlinked, for example the formula\n\t(1 & t >> 11) * t at 8192Hz produces a bassy rising sawtooth wave\n\tplaying syncopated quarter notes at 120bpm. In this formula, t\n\tacts as a rising sawtooth wave oscillator, 1&t>>11 as a square envelope. \n\n\tThe same formula at 8372.018Hz will tune the notes to C, but the bpm \n\tis raised to 122.63bpm\n\t\n\tbbBpm() and bbRate() can be used for quickly working out the bpm\n\tof 1&t>>11. Useful for syncing and tuning the bytebeat to be used\n\talongside less esoteric methods of audio creation.\n\n\tTwo different counters, one incrementing at 120bpm, the other at C10 \n\tcould also be used for producing bytebeat that could be both in tune\n\tand in time.\n\n\tPress 'rgb' to toggle the different visualisations. Green shows height of\n\tthe bytebeat waveform, red shows the bits of the bytebeat (MSB to LSB),\n\tblue shows the bits of the counter used in the bytebeat (MSB to LSB read\n\ttop to bottom, left to right).\n\n*/\n\nvoid mainImage( out vec4 O, in vec2 C ) {\n    vec2 uv = 2. * (C/iResolution.xy - .5);\n    uv.y += 1.;\n    vec3 col = vec3(.0);\n    \n    if (texelFetch( iChannel0, ivec2(71,2),0 ).x==0.){\n        if (uv.y-bytebeat(uv.x+iTime)<1.) {\n            col.g += .5;\n        }\n    }\n    \n    vec2 st = vec2(8.,4.) * C/iResolution.xy;\n    \n    int counter = int(iTime * VSR);\n    \n    if (texelFetch( iChannel0, ivec2(82,2),0 ).x==0.){\n   \t\tif (fract(st.x-.333)<.333) {\n     \t\tcol.r += .6 * float(1 & mySong(counter)>>int(8.-st.x));\n            col.gb -= .5 * vec2(1 & mySong(counter)>>int(8.-st.x));\n    \t}\n    }\n    \n \tif (texelFetch( iChannel0, ivec2(66,2),0 ).x==0.){    \n    \tcol.b += .7 * float(1 & counter>>(int(8.-st.x)+8*int(st.y)));\n \t}\n   \n    O.rgb = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define VOLUME .1\nvec2 mainSound( in int samp, float time )\n{\n\treturn vec2(bytebeat(time) * VOLUME);\n}","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"int mySong (int t) {\n \treturn (128 - (5 & t >> 19)) * t >> 5 + \n    \t    t / (6 - (1 & t >> 15) - \n            ((1 & t >> 18) != 0 ?\n        \t(1 & t >> 17) != 0 ?\n            t >> 14 & 1 ^ t >> 11 & 3 :\n            t >> 14 & 1 | t >> 11 & 3 :\n            t >> 14 & 1 & t >> 11)); \n}\n\n//uncomment to tune the oscillators to C, playing this song in F minor\n//#define VSR midi(120.)\n\n//or uncomment to set the bpm to 120\n//#define VSR bbBpm(120.)\n\n//or uncomment to watch the visualisations more slowly\n//#define VSR 120.\n\n//otherwise default to 8kHz\n#ifndef VSR\n#define VSR 8000.\n#endif\n\nfloat midi(float n) { return 13.75 * exp2((n - 9.) / 12.); }\nfloat bbRate (float rate) { return rate * 0.0146484375; }\nfloat bbBpm (float bpm) { return bpm * 68.26666666666667; }\nfloat bytebeat (float time) {\n    // Get the current sample number according to the virtual sample rate\n    int t = int(time * VSR);\n    \n    // Apply the bytebeat formula\n    int byte = mySong(t);\n    \n    //byte = t*(1&t>>11);\n\n    // Convert bytebeat back to float\n    return mix(-1., 1., float(byte % 256) / 255.);\n}","name":"Common","description":"","type":"common"}]}