{"ver":"0.1","info":{"id":"DsGBRK","date":"1698363095","viewed":95,"name":"circleDitherGreyscale","username":"natet","description":"Dithering with different size circles, in greyscale","likes":0,"published":3,"flags":2,"usePreview":0,"tags":["dithering"],"hasliked":0,"parentid":"csGBRK","parentname":"boxDither"},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//const float gridSize = iResolution.x*0.1;\n\nbool circleTest(vec2 pos, vec2 size, vec2 uv){\n    if(distance(pos,uv) < size.x){\n        return true;\n    } else {\n        return false;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n    \n    float gridSize = iResolution.x*0.05;\n    \n    uv = fract(uv*gridSize);\n    \n    vec4 cam = texture(iChannel0, floor((fragCoord/iResolution.xy)*gridSize)*(1.0/gridSize));\n    \n    float camVal = (cam.x+cam.y+cam.z)/6.0;\n\n    vec3 col;\n    \n    bool circle = circleTest(vec2(0.5,0.5),vec2(camVal), uv);\n\n    // Output to screen\n    if(circle){\n        col = vec3(1.0);\n    } else {\n        col = vec3(0.0);\n    }\n    fragColor = vec4(col,1.0);\n        \n}\n","name":"Image","description":"","type":"image"}]}