{"ver":"0.1","info":{"id":"mtcGzr","date":"1681859986","viewed":132,"name":"Cryptic","username":"Slals","description":"Visual interpretation of data encryption","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["2d","infinite"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"precision mediump float;\n\nfloat rectSDF(vec2 st, vec2 s) {\n    st = st * 2.0 - 1.0;\n    return max(abs(st.x / s.x), abs(st.y / s.y));\n}\n\nfloat fill(float x, float size) {\n    return 1.0 - step(size, x);\n}\n\nfloat random(in vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord.xy / iResolution.xy;\n    vec2 xy = st;\n\n    vec3 color = vec3(0.0);\n\n    float r = random(st);\n\n    vec2 s = vec2(0.7, 0.8);\n\n    vec2 fpos = fract(st);\n\n    float rPos = random(vec2(fpos.y)) * 5.0;\n\n    xy.y = fract(xy.y * 100.0);\n    xy.x -= mod(iTime * rPos * 0.2, 2.0) - 1.0;\n\n    float rect = rectSDF(xy, s); \n    \n    if (st.x >= max((iMouse.x / iResolution.x), 0.2)) {\n        xy.y = st.y;\n        xy.y += (xy.y * 2.0 - 1.0) * r * r * r;\n        rect = rectSDF(xy, vec2(0.74));\n        xy.y -= (xy.y * 2.0 - 1.0) * r * r * r ;\n        float rectDif = rectSDF(xy, vec2(0.74));\n        color += vec3(0.2, 0.8 * r, 0.1) * fill(rectDif, 1.0);\n        color += vec3(0.2, 0.2 * r, 0.5) * fill(rect, 1.0); \n    } else {\n        color += fill(rect, 1.0);\n    }\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}