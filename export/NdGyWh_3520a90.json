{"ver":"0.1","info":{"id":"NdGyWh","date":"1655164036","viewed":57,"name":"Spheres rotating a sun","username":"ckaterba","description":"a planet with a rotating satellite, a red light above and a blue light below","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["begginer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Ray\n{\n    vec3 point;\n    vec3 dir;\n};\n\nstruct Sphere\n{\n    vec3 center;\n    float radius;\n};\n\nstruct Light\n{\n    vec3 pos;\n    float intensity;\n};\n\nfloat RootsOfQuadratic(in float a, in float b, in float c){\n    float disc = b*b - 4.0*a*c;\n    if (disc < 0.0){\n        return 1000000000000000000.0;\n    }\n    float root = sqrt(disc);\n    if(-b - root > 0.0){\n        return( (-b  - root) / (2.0*a));\n    };\n    if(-b - root <  0.0){\n        return( (-b  + root) / (2.0*a));\n    };\n}\n\nfloat intersectSphere(in Ray r, in Sphere s){\n    return( RootsOfQuadratic( dot(r.dir, r.dir), \n                            2.0*dot(r.point, r.dir) - 2.0*dot(s.center, r.dir),\n                            dot(r.point, r.point) + dot(s.center, s.center) - s.radius*s.radius));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.x;\n    \n    //Initialize sphere and start ray\n    Sphere C;\n    C.center = vec3(0.0, 0.0, 8.0);\n    C.radius = .7;\n    \n    Sphere s;\n    s.center = vec3(2.0*sin(iTime), 0, 8.0 + 2.0*cos(iTime));\n    s.radius = .3 ;\n    \n    Sphere t;\n    t.center = vec3(2.0*sin(iTime), 0, 8.0 + 2.0*cos(iTime)) + \n               vec3(.75*sin(2.0*iTime / 2.0*3.14), 0.0, .75*cos(2.0*iTime / 2.0*3.14));\n    //t.center = vec3(2.0*sin(iTime + 3.1415), 0, 8.0 + 2.0*cos(iTime + 3.1517));\n    t.radius = 0.075;\n    \n    float theta = -atan(4.0/8.0);\n    mat3 rot = mat3(1.0, 0.0, 0.0,\n                    0.0, cos(theta), -sin(theta),\n                    0.0, sin(theta), cos(theta));\n    \n    \n    Ray start;\n    start.point = vec3(0.0, 4.0, 0.0);\n    start.dir = normalize(rot*vec3(uv,1.0));\n    \n    Light l1;\n    l1.pos = vec3(0.0, 0.0, 8.0);\n    l1.intensity = 1.0;\n    \n    Light l2;\n    l2.pos = vec3(2.0*cos(4.27*iTime), 4.0*sin(2.228*iTime), 0.0);\n    l2.intensity = 1.0;\n    \n    float dS = intersectSphere(start, s);\n    float dT = intersectSphere(start, t);\n    float dC = intersectSphere(start, C);\n    \n    float d = min(min(dS,dT), dC);\n    \n    vec3 hitS = start.point + dS*start.dir;\n    vec3 hitT = start.point + dT*start.dir;\n    vec3 hitC = start.point + dC*start.dir;\n    \n    \n    float shade1;\n    float shade2;\n    vec3 col;\n    if( d < 100.0){\n        if(d == dS){\n            shade1 = dot(normalize(hitS - s.center), l1.pos - hitS);\n            //shade2 = dot(normalize(hitS - s.center), l2.pos - hitS);\n            col = vec3(shade1, 0.0, shade2);\n        } else if(d == dT){\n            shade1 = dot(normalize(hitT - t.center), l1.pos - hitT);\n            //shade2 = dot(normalize(hitT - t.center), l2.pos - hitT);\n            col = shade1*vec3(0.5, 0.5, 0.5);\n        } else {\n            shade1 = dot(normalize(hitC - C.center), normalize(l2.pos - hitC));\n            col  = shade1*vec3(0, -.647, 0.0) + vec3(1.0, 1.0, 0.0);\n        };\n    }else{\n        float a = cos(sin(uv. x * uv. x * 10023.0) + sin(uv.y * uv.y * 11023.0) + cos(uv.x * 2400.0) + sin(uv.y * 3200.0) + sin(uv.x * uv.y * 4100.0));\n        float b = cos(sin(uv. x * uv. x * 10123.0) + sin(uv.y * uv.y * 13023.0)+ cos(uv.x * 2100.0) + sin(uv.y * 3200.0) + sin(uv.x * uv.y * 4100.0));\n        a = pow(a * b, 40.0);\n        col = vec3(a,a,a);\n        };\n    \n//    if( d < 100.0){\n        \n//    } else {\n//        if(uv.x  < 2.0){\n//            col = vec3(1.0,1.0,1.0);\n//            } else {\n//            col = vec3(0.0,0.0,0.0);\n//            }\n//    };\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}