{"ver":"0.1","info":{"id":"XsSyzc","date":"1493049541","viewed":512,"name":"Electric Field Lines","username":"trirop","description":"Electric field lines between two point charges. You can change the position and charge of the right charge with your mouse.\nRed and green shows the positive and negative potential. ","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["2d","physics","fieldlines","rk4","charge"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by Robert Schuetze - trirop/2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define h 0.05\n#define MAX_STEPS 100\n#define TAU 6.28318530718\n#define LINES 16.\n\nfloat phi(vec2 p,vec2 q,vec2 q1,vec2 q2){\n\treturn q.x/length(q1-p)+q.y/length(q2-p);\n}\n\nvec2 E(vec2 p,vec2 q,vec2 q1,vec2 q2){\n\treturn normalize(q.x*(p-q1)/pow(length(q1-p),3.)+q.y*(p-q2)/pow(length(q2-p),3.));\n}\n\nfloat line(vec2 uv, vec2 p1, vec2 p2){\n    vec2 dir = normalize(p2-p1);\n    mat2 inv = mat2(dir.x,-dir.y,dir.y,dir.x);\n    uv=inv*(uv-p1);\n\tp2=inv*(p2-p1);\n    return float(abs(uv.y)<0.004&&0.<uv.x&&uv.x<p2.x);\n}\n\nvec2 RK4(vec2 p,vec2 q,vec2 q1,vec2 q2){\n    vec2 k1 = E(p,q,q1,q2);\n    vec2 k2 = E(p+0.5*h*k1,q,q1,q2);\n    vec2 k3 = E(p+0.5*h*k2,q,q1,q2);\n    vec2 k4 = E(p+h*k3,q,q1,q2);\n    return h/3.*(0.5*k1+k2+k3+0.5*k4);\n}\n\nbool integrate(inout vec4 O,vec2 p,vec2 q,vec2 q1,vec2 q2,vec2 start,vec2 end){\n    O += line(p,mix(q1,q2,float(length(q1-start)>h*1.001)),start);\n    vec2 pn;\n    vec2 po = start;\n    for(int i = 0;i<MAX_STEPS;i++){\n    \tpn = po+RK4(po,q,q1,q2);\n        O += line(p,po,pn);\n        po=pn;\n        if(length(end-po)<h){\n            O += line(p,po,end);\n            return false;\n        }\n        if(abs(po.x)>iResolution.x/iResolution.y||abs(po.y)>1.0)return true;\n    }\n    return true;\n}\n\nvoid mainImage( out vec4 O, in vec2 C )\n{\n    vec2 uv = (2.*C-iResolution.xy)/iResolution.y;\n    vec2 mouse = (iMouse.xy*2.-iResolution.xy)/iResolution.y;\n    vec2 q1 = vec2(-0.5,0);\n    vec2 q2 = vec2(mouse.x,0);\n    vec2 q = vec2(0.1,0.2*smoothstep(-0.7,0.7,mouse.y)-0.1);\n    float idle = float(iMouse.z<0.||iMouse.x<0.001)*0.1;\n    O = vec4(0);\n    if(idle>0.){q2.x=0.2;q.y=-0.1;}\n    for(float o = 0.;o<TAU;o+=TAU/LINES){\n        float angle = iDate.w*idle+TAU/(2.*LINES)+o;\n        vec2 os = vec2(cos(angle),sin(angle))*0.01;\n    \tif(integrate(O,uv,q,q1,q2,q1+os,q2)&&abs(q.y)>0.){\n    \t\tintegrate(O,uv,q.y/abs(q.y)*q,q1,q2,q2+mat2(-1,0,0,1)*os,q1);\n    \t}\n    }\n    O += vec4(max(phi(uv,q,q1,q2),0.),max(-phi(uv,q,q1,q2),0.),0,1);\n}","name":"Image","description":"","type":"image"}]}