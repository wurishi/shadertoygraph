{"ver":"0.1","info":{"id":"432fDV","date":"1731440840","viewed":61,"name":"Color-Preserving Film Grain","username":"corncob","description":"I've found adding noise to the luma, and multiplying color by the new/old luma ratio (as seen on the right), colors are better preserved than if noise is added directly to color (as seen on the left), which is the primary method I've seen.","likes":1,"published":1,"flags":0,"usePreview":1,"tags":["noise","color","filmgrain"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define INTENSITY 1.0 // from 0.0 to 1.0\n#define GAMMA vec3(2.2)\n#define GAMMA_INV 1.0 / GAMMA\n#define LUMA_COEF vec3(0.2126,0.7152,0.0722)\n#define hash21(p) fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float intensity = INTENSITY;// * abs(cos(iTime));\n    vec2 uv = fragCoord / iResolution.xy;\n    \n\tvec3 color = texture(iChannel0, uv).xyz;\n\t//vec4 color = texture(iChannel0, uv);\n\n    float luma = dot(color, LUMA_COEF);\n    // https://en.wikipedia.org/wiki/Luma_(video)\n\n    // I prefer this commented luma_factor because it's smoother, no discontinuities.\n    //float luma_factor =  max(intensity * (luma - luma * luma), 0.0);\n    \n    // This luma_factor is more obnoxious and thus better for demo purposes.\n    float luma_factor = max(intensity * (0.5 - abs(luma - 0.5)), 0.0);\n\n    float white_noise = 2.0 * hash21(uv + hash21(uv + iTime)) - 1.0;\n    \n    // I prefer making noise more gaussian.\n    //float final_noise = luma_factor * white_noise * abs(white_noise);\n\n    // But unaltered white noise is more obnoxious and thus better for demo purposes.\n    float final_noise = luma_factor * white_noise;\n\n    float new_luma = luma + final_noise;\n    \n    vec3 color_my_way = vec3((new_luma / luma) * color);\n    \n    vec3 color_ugly_way = vec3(color + final_noise);\n    \n    vec3 grainy_colors = mix(color_my_way, color_ugly_way, step(uv.x, 0.5));\n    color = mix(color, grainy_colors, step(uv.y,0.5));\n    fragColor = vec4(color, 1.0);\n}\n\n// Some more thoughts:\n\n// What I'm essentially doing is choosing to blend with multiplication rather than addition.\n\n// I'm not aiming for realism with this. But even if you are, this approach for\n// how noise is applied is worth considering. The left-hand method may be more realistic!\n// Regardless, it could be more disruptive to other visual elements, color grading etc. \n// I want to say the final image would be slightly sharper, too. The additive way effectively\n// makes everything more gray, so edges will be ever so slightly less distinguishable.\n\n// As I see it, film grain effects should be nearly imperceptible. Preserving color is\n// another step in that direction.\n\n// Contrast is also preserved because no noise is applied to pure blacks or pure whites.\n// I achieve this with the luma_factor. The functions I use keep noise in the middle.\n\n// I further sculpt noise into a more normal distribution, but I use a parabola for simplicity.\n// Smaller noise values are more probable than large ones.\n\n// Effects are exaggerated for this demo, but using more sane amounts of grain makes any\n// color changes imperceptible. I still think this is worth doing, why mess up the colors\n// if you don't have to?\n\n// Here are resources I used to explore film grain:\n// https://github.com/mattdesl/glsl-film-grain\n// https://devlog-martinsh.blogspot.com/2013/05/image-imperfections-and-film-grain-post.html\n\n// These two were primarily focused on using more complex noise such as Simplex noise to\n// make better film grain. I'd be interested in doing that at some point, but probably\n// only once I fully dive into building a physically-based camera simulation that includes\n// a customizable sensor size. Otherwise, it's a lot more complexity for a subtle effect.","name":"Image","description":"","type":"image"}]}