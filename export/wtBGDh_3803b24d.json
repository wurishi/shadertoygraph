{"ver":"0.1","info":{"id":"wtBGDh","date":"1630427592","viewed":206,"name":"Neon Seaturtle","username":"hjd3481","description":"Messing with audio input and buffer feedback.","likes":8,"published":1,"flags":32,"usePreview":0,"tags":["music","feedback"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"///////////////////////////////\n// Pick Music in Buffer A iChannel1 \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv= fragCoord/iResolution.xy;\n    \n    vec3 col = texture( iChannel0, uv ).rgb;\n    \n    //uv.x = abs( (uv.x - 0.5) * 1.841 );\n    uv = ((uv-0.5)*0.60) + 0.5;\n\n    // Output to screen\n   // vec3 col2 =vec3( 0.0 );\n    vec3 col2 = 1.0 - texture( iChannel0, uv ).rgb;\n    \n    \n    \n    fragColor.rgb = col;// * 1.65 - col2;\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","previewfilepath":"/media/ap/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","type":"music","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define RING_C 0.8\n#define RING_T 0.02\n\n#define RING_LOW (RING_C-RING_T)\n#define RING_MID RING_C\n#define RING_HI (RING_C+RING_T)\n\n#define PI \t\t3.1415926535897932384626433832795\n#define TWOPI \t6.283185307179586476925286766559\n#define HALFPI \t1.5707963267948966192313216916398\n#define TORAD \t0.01745329251994329576923690768489\n#define INVPI \t0.31830988618379067153776752674503\n#define INVTWOPI 0.15915494309189533576888376337251\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (fragCoord-(0.5*iResolution.xy))/iResolution.y*2.0;\n\n    //uv is -1 to +1\n    \n    float d = length(uv);   \n        \n    vec2 vecp = normalize(uv.xy);\n        \n    float circ = acos( vecp.y ) / PI; //0 to PI\n    \n \tcirc = circ * mix(1.6,4.25,sin(iTime*0.42323)*0.5+0.5); //change equalizer scale\n    \n\t//circ += sin( iTime * 0.137787 ) * 2.0; //move equalizer centre\n    \n    circ = fract( circ );\n    \n    vec4 sound = texture( iChannel1, vec2(circ*0.33,0.0) ); //use lower third of equalizer\n    \n    float dL = d * mix( 1.43, 0.88, sound.x  );    \n        \n    float ring = smoothstep(RING_HI,RING_MID,dL) * smoothstep(RING_LOW,RING_MID,dL);\n        \n    float ctime = iTime * 2.912123;\n    \n    vec3 col = (0.5 + 0.5*cos( ctime +uv.xyx+vec3(0,2,4))) * vec3( ring );\n \t    \n       \n    float lens = 0.69; //the shape of the lens / curvature\n    \n    float warp = (cos(d*PI*lens)) * 0.01; //warp amount\n    \n    vec2 uvPass = uv * vec2(iResolution.y / iResolution.x, 1.0) * (0.5 + warp) + 0.5;\n    \n    float fade = 0.96; //persistance\n    \n\tvec3 prev = texture( iChannel0, uvPass ).rgb;    \n        \n    col += prev * fade;\n    \n    float bass = pow( max(0.0,texture( iChannel1, vec2(0.02,0.5) ).x - 0.5)+0.5, 5.0);\n    \n    col.b += 0.05 * bass;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}