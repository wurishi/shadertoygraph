{"ver":"0.1","info":{"id":"dd2fDV","date":"1690187757","viewed":34,"name":"simple Raytracer test","username":"BrokkoliQuokka","description":"I tried to make a raytracer","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["simple","raytracer","raytrace"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Ray{vec3 o; vec3 d;};\nstruct Sphere{vec3 pos; float r;};\nstruct Hit{Sphere HitSphere; vec3 Hitpoint; vec3 normal; float depth;};\n\nfloat raySphereIntersection(Ray r, Sphere s)\n{\n    vec3 oc = r.o - s.pos;\n    float a = dot(r.d, r.d);\n    float b = 2.0 * dot(oc, r.d);\n    float c = dot(oc, oc) - s.r * s.r;\n    \n    float discriminant = b * b - 4.0 * a * c;\n    \n    if (discriminant < 0.0)\n    {\n        return 100.0;\n    }\n    else\n    {\n        float t1 = (-b - sqrt(discriminant)) / (2.0 * a);\n        float t2 = (-b + sqrt(discriminant)) / (2.0 * a);\n        float t = min(t1, t2);\n\n        if (t > 0.0)\n        {\n            return t;\n        }\n        else\n        {\n            return 100.0;\n        }\n    }\n}\n\nvec3 normal(Ray r, Sphere s, float d){\n    if(d == 100.0){return vec3(1.0);}\n    vec3 hitpoint = r.o + r.d*d;\n    return normalize(hitpoint-s.pos);\n}\n\nHit CalcHit(Ray r, Sphere[2] s){\n    float d = 100.0;\n    int index = 0;\n    for(int i = 0; i < s.length(); i++){\n        float depth = raySphereIntersection(r,s[i]);\n        if(depth<d){\n            d = depth;\n            index = i;\n        }\n    }\n    return Hit(s[index],r.o + r.d * d, normal(r, s[index], d), d);\n}\n\nvec3 lighting(Hit hit, vec3 light, Sphere[2] s){\n    if(hit.depth == 100.0){return vec3(1.0);}\n    vec3 col = vec3(dot(hit.normal, light));\n    Ray r = Ray(hit.Hitpoint, light);\n    if(CalcHit(r, s).depth < 100.0){col = vec3(0.0);}\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv *= 2.0;\n    uv -= vec2(1.0);\n    uv.x *= iResolution.x/iResolution.y;\n    Ray r = Ray(vec3(0.0),vec3(uv,1.0));\n    vec3 light = normalize(vec3(0.5,1.0,-0.5));\n    \n    Sphere[2] spheres;\n    spheres[0] = Sphere(vec3(0.0,0.0,sin(iTime)+3.0),1.0);\n    spheres[1] = Sphere(vec3(-1.0,-1.0,3.0),1.0);\n    \n    Hit hit = CalcHit(r, spheres);\n    vec3 col = lighting(hit, light, spheres);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}