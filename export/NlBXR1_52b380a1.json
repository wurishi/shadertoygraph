{"ver":"0.1","info":{"id":"NlBXR1","date":"1627023509","viewed":70,"name":"my first fractal","username":"xertrov","description":"mb it's a menger sponge, but IDK. my goal was to get the basics of repeatedly folding a space and drawing something.\n'first fractal' probs isn't accurate -- I've done mandelbrot stuff in js and glsl before. I didn't plan the end result, just followed nose","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal","learning","first"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592653589\n#define TAU 6.28318530718\n\n#define S(a, b, t) smoothstep(a, b, t)\n#define hh(x) x * .5 + .5\n\n#define u_time uTime\n#define u_resolution iResolution\n#define gl_FragColor fragColor\n#define u_mouse iMouse\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = fragCoord.xy / u_resolution.xy;\n  float aspect = u_resolution.x / u_resolution.y;\n  vec2 mouseUV = u_mouse.xy / u_resolution.xy;\n\n  // these will be aspect adjusted\n  vec2 st = vec2(uv);\n  if (aspect > 1.) {\n    st.x *= aspect;\n    st.x += (1. - aspect) / 2.;\n  } else {\n    st.y /= aspect;\n    st.y -= (1. / aspect - 1.) / 2.;\n  }\n  st -= vec2(0.5);\n  // end st stuff\n\n  // vertical offset via mouse\n  st -= vec2(0., mouseUV.y - .5);\n\n  // zoom\n  vec3 c = vec3(1.);\n\n  // min factor: 1.82\n  float factor = 3. + 10. * mouseUV.x;\n  for (int i = 0; i < 4; i++){\n    st *= factor;\n    st = abs(fract(st)) - vec2(.5, .5);\n    c -= (1. - (c - S(1. / factor, 1. / factor - 0.01, abs(st.x)) * S(1. / factor, 1. / factor - 0.01, abs(st.y))));\n  }\n \n   gl_FragColor = vec4(c,1.0);\n}\n","name":"Image","description":"","type":"image"}]}