{"ver":"0.1","info":{"id":"XXsXRf","date":"1714421120","viewed":37,"name":"3D spining donut :D","username":"WilfredTheBoss","description":"mmmmmmmmmm","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["donut"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535897932384626433832795\n\nfloat rot_speed = 1.;\n\nfloat sdTorus( vec3 p, vec2 t)\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nmat2 rot(float a) {\n    float s = sin(a), c = cos(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat world(vec3 p)\n{\n    p = mod(p + 3.5, 7.) - 3.5;\n    p.xz *= rot(iTime);\n    p.yz *= rot(iTime * 1.5);\n    return sdTorus(p.yzx, vec2(1.5, 0.6));\n}\n\nvec3 point, dir;\nfloat total_dist = 0.;\n\nvec3 norm() {\n    mat3 k = mat3(point, point, point) - mat3(0.001);\n    return normalize(world(point) - vec3(world(k[0]), world(k[1]), world(k[2])));\n}\n\nvoid march() {\n    total_dist = 0.;\n    \n    for (int i = 0; i < 100; i++) {\n        float min_dist = world(point);\n        if (abs(min_dist) < 0.001) return;\n        point += dir * min_dist;\n        total_dist += min_dist;\n        if (total_dist > 100.) return;\n        \n    }\n    total_dist = 999.;\n}\n\nvec3 path(float t) {\n    return vec3(5. * cos(t * 2.), 0., 5. * sin(t * 3.));\n}\n\nfloat angle(vec2 v) {\n    float a_to_up = acos(dot(normalize(vec2(0., 1.)), normalize(v)));\n    if (v.x < 0.) {\n        return PI - a_to_up + PI;\n    }\n    return a_to_up;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y;\n    \n    point = vec3(3.5, 0., 0.);\n    vec3 up = vec3(0., 1., 0.);\n    vec3 forward = normalize(vec3(0., 0., 1.));\n    vec3 right = cross(forward, up);\n    mat3 orientation = mat3(right, up, forward);\n    dir = normalize(vec3(uv, 1.));\n    dir *= orientation;\n    march();\n    \n    vec3 col = vec3(0.);\n    if (total_dist < 20.) {\n        vec3 n = norm();\n        col = (vec3(1., -0.2, 1.5) + n) * 1.;\n        float image = length(sin(n*2.5)*.5+.5) / sqrt(3.);\n        image = pow(image, 2.);\n        col *= max(0., image);\n    } else {\n        \n    }\n    \n    \n    \n    // Output to screen\n    if (col == vec3(0.)) {\n        vec2 uv1 = (uv - 1.) / 2.;\n        float rad = sin((length(uv) * 15. - iTime));\n        float bg = rad + sin(angle(uv) * 5. + (iTime * -rot_speed)) * ((rad + 0.) *0.3);\n        bg = step(0.5, bg);\n        fragColor = mix(vec4(vec3(0.2, 0.2, 0.5), 1.), vec4(vec3(1., 0., 0.35), 1.), bg);\n    } else {\n        fragColor = vec4(sqrt(col), 1.);\n    }\n}","name":"Image","description":"","type":"image"}]}