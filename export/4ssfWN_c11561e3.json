{"ver":"0.1","info":{"id":"4ssfWN","date":"1496249996","viewed":230,"name":"Palette Shader","username":"jfranmp","description":"Move the mouse to compare the input and the result","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["palette"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// COLOR PALETTE SHADER\n\n// Lab Delta E distance\nfloat colorDistance(vec3 a, vec3 b) {\n    float r = ((a.r - b.r) / .2) * 255.0;\n    float dr = a.r - b.r;\n    float dg = a.g - b.g;\n    float db = a.b - b.b;\n    \n    float x = (2.0 + r / 256.0) * dr * dr;\n    float y = 4.0 * dg * dg;\n    float z = (2.0 + (255.0 - r) / 256.0) * db * db;\n    \n    return sqrt(x + y + z);\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat rand2(vec2 co){\n    return rand(co)-rand(vec2(co.x+1.0,co.y+1.0))/2.0;\n}\n\nvec3 calculateColorPalette1(vec3 color) {\n    \n\t// Palette 1\n    vec3 colors[8] = vec3[](\n        vec3(0.137, 0.118, 0.012), \n        vec3(0.278, 0.251, 0.039),\n        vec3(0.427, 0.404, 0.118),\n        vec3(0.576, 0.561, 0.224),\n        vec3(0.71, 0.702, 0.353),\n        vec3(0.804, 0.808, 0.533),\n        vec3(0.89, 0.898, 0.718),\n        vec3(0.984, 0.988, 0.949)\n    );\n        \n    vec3 selectedColor = colors[0];\n    float dist = colorDistance(color, colors[0]);\n    float currentDist;\n    \n    // For loop with the same loops than the color palette.\n    for (int i = 1; i < 8; i++) {\n        currentDist = colorDistance(color, colors[i]);\n        if (currentDist < dist) {\n            dist = currentDist;\n            selectedColor = colors[i];\n        }\n    }\n    \n    return selectedColor;\n}\n\nvec3 calculateColorPaletteCGA(vec3 color) {\n    \n    // GB Palette\n    vec3 colors[16] = vec3[](\n        vec3(0),\n        vec3(0, 0, 0.667),\n        vec3(0, 0.667, 0),\n        vec3(0, 0.667, 0.667),\n        vec3(0.667, 0, 0),\n        vec3(0.667, 0, 0.667),\n        vec3(0.667, 0.333, 0),\n        vec3(0.667, 0.667, 0.667),\n        vec3(0.333, 0.333, 0.333),\n        vec3(0.333, 0.333, 1),\n        vec3(0.333, 1, 0.333),\n        vec3(0.333, 1, 1),\n        vec3(1, 0.333, 0.333),\n        vec3(1, 0.333, 1),\n        vec3(1, 1, 0.333),\n        vec3(1)        \n    );\n    \n    vec3 selectedColor = colors[0];\n    float dist = colorDistance(color, colors[0]);\n    float currentDist;\n    \n    // For loop with the same loops than the color palette.\n    for (int i = 1; i < 16; i++) {\n        currentDist = colorDistance(color, colors[i]);\n        if (currentDist < dist) {\n            dist = currentDist;\n            selectedColor = colors[i];\n        }\n    }\n    \n    return selectedColor;\n}\n\nvec3 calculateColorPaletteCGA0(vec3 color) {\n    \n    // CGA Palette 0\n    vec3 colors[4] = vec3[](\n        vec3(0),\n        vec3(0, 0, 0.667),\n        vec3(0, 0.667, 0),\n        vec3(0, 0.667, 0.667) \n    );\n    \n    vec3 selectedColor = colors[0];\n    float dist = colorDistance(color, colors[0]);\n    float currentDist;\n    \n    // For loop with the same loops than the color palette.\n    for (int i = 1; i < 4; i++) {\n        currentDist = colorDistance(color, colors[i]);\n        if (currentDist < dist) {\n            dist = currentDist;\n            selectedColor = colors[i];\n        }\n    }\n    \n    return selectedColor;\n}\n\nvec3 calculateColorPaletteCGA1(vec3 color) {\n    \n    // CGA Palette 1\n    vec3 colors[4] = vec3[](\n        vec3(0),\n        vec3(1, .333, .333),\n        vec3(.333, 1, .333),\n        vec3(.333, .333, 1)    \n    );\n    \n    vec3 selectedColor = colors[0];\n    float dist = colorDistance(color, colors[0]);\n    float currentDist;\n    \n    // For loop with the same loops than the color palette.\n    for (int i = 1; i < 4; i++) {\n        currentDist = colorDistance(color, colors[i]);\n        if (currentDist < dist) {\n            dist = currentDist;\n            selectedColor = colors[i];\n        }\n    }\n    \n    return selectedColor;\n}\n\nvec3 calculateColorPaletteGB(vec3 color) {\n    \n    // GB Palette\n    vec3 colors[4] = vec3[](\n        vec3(0.059, 0.22, 0.059),\n        vec3(0.188, 0.384, 0.188),\n        vec3(0.545, 0.675, 0.059),\n        vec3(0.608, 0.737, 0.059)\n    );\n    \n    vec3 selectedColor = colors[0];\n    float dist = colorDistance(color, colors[0]);\n    float currentDist;\n    \n    // For loop with the same loops than the color palette.\n    for (int i = 1; i < 4; i++) {\n        currentDist = colorDistance(color, colors[i]);\n        if (currentDist < dist) {\n            dist = currentDist;\n            selectedColor = colors[i];\n        }\n    }\n    \n    return selectedColor;\n}\n\nvec3 lerp(vec3 a, vec3 b, float value)\n{\n\treturn (a + value*(b-a));\n}\n\nvec3 doBlend(vec3 colorA, vec3 colorB, vec2 uv, float blend) {\n    vec3 res;\n    \n    if (uv.x > blend) {\n        res = colorA;\n    }\n    else {\n        res = colorB;\n    }\n    \n    if (abs(uv.x - blend) < .001) {\n        res = vec3(0);\n    }\n    \n    return res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{      \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 color = texture(iChannel0, uv).rgb;\n    \n    vec3 processedColor = color;\n    \n    // GAMA CORRECTION\n    processedColor = pow(processedColor, vec3(1.5));\n    \n    // DITHERING\n    float dither = .05;\n    vec3 noise = vec3(rand2(fragCoord));\n    processedColor = (1.0 - dither) * color + dither * noise;  \n    \n    // CHANGE PALETTE HERE\n    vec3 convertedColor = calculateColorPaletteGB(processedColor);\n    float blend = iMouse.x / iResolution.x;\n    \n    vec3 res = doBlend(color, convertedColor, uv, blend);\n    \n    fragColor = vec4(res,1.0);\n}","name":"Image","description":"","type":"image"}]}