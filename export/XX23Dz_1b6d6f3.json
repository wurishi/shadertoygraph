{"ver":"0.1","info":{"id":"XX23Dz","date":"1708703841","viewed":59,"name":"Constant Luminance Perception ","username":"ErgunAkleman","description":"This is an accompanying code for the Arxiv paper: A Context-Sensitive Formula to Obtain Constant Luminance Perception for a Foreground Object in Front of Backgrounds of Varying Luminance","likes":1,"published":1,"flags":16,"usePreview":0,"tags":["constantluminanceperception"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nThis is an accompanying code for the Arxiv paper: \nA Context-Sensitive Formula to Obtain Constant Luminance Perception \nfor a Foreground Object in front of \nBackgrounds of Varying Luminance\n\nMoving the mouse in the y direction changes the thickness of the rectangle. \nMoving the mouse in the x direction changes the perceived color. \nPressing \"Left Arrow Key\" changes from constant perception to constant color\nPressing \"Right Arrow Key\" changes the background from lightness scale to white\nPressing \"Down Arrow Key\" changes constant perception computation from power formula to linear formula\nPressing \"Up Arrow Key\" changes the background from discrete lightness scale to continuous lightness scale\nChanging Bezier Coefficients changes the Polynomial part of the Context-Sensitive Formula. \nThe coefficients here are the ones we found the best. We have one more example to try. \n*/\n\n\nconst   float pi=3.14;\nconst   float b20=0.20, b21=0.25, b22=1.00; //Bezier Coefficients for exponent of poer formula\nconst   float a0=0.60, a1=1.00; //Bezier Coefficients\n\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 fgcolor = vec3(iMouse.x/iResolution.x); //Perceived Color of the rectangle\n    float thickness =iMouse.y/iResolution.y;  //Thickness of the rectangle\n\n    float levels=10.0; //Levels of lightness Scale\n    if(texelFetch( iChannel0, ivec2(KEY_UP,0),0).x == 1.0) levels=255.0; //Continuous of lightness Scale\n\n\n    float powerterm = b20*(1.0-thickness)*(1.0-thickness)+b21*2.0*thickness*(1.0-thickness)+b22*thickness*thickness;\n\n    float theta=0.0; // choose an angle between 0 and 90 degrees. \n    float grays=abs(cos(pi*theta/180.0)*(uv.x) + sin(pi*theta/180.0)*(uv.y));\n     \n     vec3 col = vec3(grays);\n     float quantizegrays= floor (grays*(levels+1.0))/(levels); // Lightness-Scale Background\n     if(texelFetch( iChannel0, ivec2(KEY_RIGHT,0),0).x == 1.0) quantizegrays=0.99; //White Background\n  \n     vec3 colquantize = vec3(quantizegrays); \n     \n    float inside_outside= 2.0*abs(0.5 -uv.y)/thickness;\n      \n    float ratioT=0.0; \n    float bg=1.0;\n    if(inside_outside<1.0) \n    {\n    ratioT=1.0; //constant color\n    if(texelFetch( iChannel0, ivec2(KEY_LEFT,0),0).x == 0.0) \n    {\n    ratioT=pow(thickness,powerterm); //constant perception with power function\n    if(texelFetch( iChannel0, ivec2(KEY_DOWN,0),0).x == 1.0)   \n    ratioT=a0*(1.0 - thickness) + a1*thickness; //constant perception with linear function\n    }\n    bg=0.0;    \n    }\n        \n    vec3 ConstantPerceptionImage=(1.0-bg)*((1.0-ratioT)*(col) + ratioT* fgcolor)+ bg *colquantize;\n\tfragColor = vec4(ConstantPerceptionImage, 1.0);\n}","name":"Image","description":"","type":"image"}]}