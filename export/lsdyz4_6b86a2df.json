{"ver":"0.1","info":{"id":"lsdyz4","date":"1518104283","viewed":130,"name":"discrete exponential curves","username":"Max1412","description":"(Slowly) samples discrete exponential curves with changing parameters","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["procedural","curves","animated","maths"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SC(x) vec2(cos(x), sin(x))\n\nbool calcCurve(in vec2 xy, in float a, in float b, in float c, in float d)\n{\n    float n = iTime / 20.0;\n\tfor(float t = n; t < n + 6.3; t += 0.0045)\n    {\n        vec2 curve = SC(a * t) - SC(b * t) / 2.0 + SC(c * t).yx / 3.0 + SC(d * t) / 4.0;\n        curve /= 6.0;\n        if(abs(length(xy - curve)) < 0.006)\n            return true; // inside\n    }\n    return false;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5* iResolution.xy) /iResolution.y;\n\n    vec3 col = vec3(1.0);\n    \n    float a = sin(iTime / 20.0) * 20.0;\n    float b = cos(iTime / 20.0) * 20.0;\n    float c = sin(iTime / 15.0) * 20.0 - 10.0;\n    float d = cos(iTime / 20.0) * 20.0;\n\n    // Output to screen\n    fragColor = calcCurve(uv, a, b, c, d) ? vec4( 6.*uv, .5, 1) : vec4(1);\n}","name":"Image","description":"","type":"image"}]}