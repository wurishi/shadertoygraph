{"ver":"0.1","info":{"id":"4tBBRd","date":"1516810661","viewed":304,"name":"Collatz Conjectureeeeee","username":"Trashe725","description":"this is my first post (ˊ_>ˋ)\n\nbased on this article\nhttp://yozh.org/2012/01/12/the_collatz_fractal/\nand IQ's version\nhttps://www.shadertoy.com/view/llcGDS","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["fractal","collatz"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// created by Trashe725\n\n#define AA 2\n#define pi 3.14159265358979323846\n#define maxIter 100\n#define maxThres 100.\n\n// from julesb\n// github: https://github.com/julesb/glsl-util/blob/master/complexvisual.glsl\n\nvec2 cx_add(vec2 a, float b) { return vec2(a.x+b, a.y); }\nvec2 cx_mul(vec2 a, vec2 b) { return vec2(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x); }\nvec2 cx_cos(vec2 a) { return vec2(cos(a.x) * cosh(a.y), -sin(a.x) * sinh(a.y)); }\nvec2 cx_sin(vec2 a) { return vec2(sin(a.x) * cosh(a.y), cos(a.x) * sinh(a.y)); }\n\nvec2 rot(vec2 v, float ang)\n{\n\tfloat c = cos(ang);\n    float s = sin(ang);\n    mat2 m = mat2(c, -s, s, c);\n\treturn m * v;\n}\n\nvec3 render(vec2 fragCoord, float time)\n{\n    //zoom\n    float sc = 0.003;\n    vec2 ce = vec2(-0.703, 0);\n    float zoom = time * 4.;\n    sc = sc * pow(0.9, zoom);\n    \n    //rotate\n    vec2 fc = rot((-iResolution.xy + 2.0 *fragCoord) / iResolution.y, iTime/3.14);\n    vec2 z = ce + sc * fc;\n    vec2 dz = vec2(1.0, 0.0);\n    \n    vec2 lz = z;\n    vec2 ldz = dz;\n    \n    //iter\n    int iter = 0;\n    while(iter < maxIter && length(z) < maxThres){\n        lz = z;\n        ldz = dz;\n        vec2 piz = pi*z;\n        dz = cx_add( pi*cx_mul(cx_sin(piz), cx_add(z*4., 2.))-5.*cx_cos(piz), 7.)/4.;\n        z = ( cx_add(z*7., 2.) - cx_mul(cx_add(z*5., 2.), cx_cos(piz)) )/4.;\n        ++iter;\n    }\n    \n    //color\n    if (iter < maxIter){\n        float dzlog = log(length(ldz));\n        float aslog = abs(sin(dzlog/5.0));\n        float inner = clamp(aslog-0.2, 0.0, 0.5)*2.;\n        float outer = 1.0 - smoothstep(0.5, 0.8, aslog-0.2);\n        float grad = sin(smoothstep(0.3, 0.7, aslog-0.2)*pi);\n        float fiter = float(iter);\n        vec3 col1 = vec3(abs(sin(fiter/5.)),\n                        abs(sin(fiter/5.+pi/4.)),\n                        abs(cos(fiter/5.)));\n        //vec3 col2 = vec3(abs(sin(fiter/5.+pi/6.0)),\n        //                abs(sin(fiter/5.+pi/6.0)),\n        //                abs(cos(fiter/5.+pi/6.0)));\n    \t//return mix(col1 + grad*col1*0.2, col2, grad*0.6) * inner * outer;\n        return clamp(col1+grad*col1*0.2, 0., 1.) * inner * outer;\n    }else{\n    \treturn vec3(0.);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.0);\n    float time = sin(iTime/4.)*13.;\n#ifdef AA\n    for(int m=0;m<AA;++m){\n        for(int n=0;n<AA;++n){\n        \tvec2 px = fragCoord + vec2(float(m), float(n))/float(AA);\n            col += render(fragCoord, time);\n        }\n    }\n    \n    col /= float(AA*AA);\n#else\n    col = render(fragCoord, time);\n#endif\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}