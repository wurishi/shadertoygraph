{"ver":"0.1","info":{"id":"MtKyRR","date":"1534959145","viewed":151,"name":"Escape Time Sierpinski Triangle","username":"ptrgags","description":"This is my attempt to compute the Escape Time algorithm on a Sierpinski triangle fractal.\n\nThis is based on the Escape Time Algorithm presented in Fractals Everywhere 2nd Edition by Michael F. Barnsley.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractals","ifs","sierpinski","escape"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * Escape time algorithm for the Sierpinski triangle.\n * \n * This is based on an algorithm found in Fractals\n * Everywhere 2nd Edition by Michael F. Barnsley\n * in section VII.1. I translated the code\n * to GLSL and \n */\n\n\n#define MAX_ITERS 20.0\n#define RADIUS 1.0\n#define CENTER (iResolution.xy / 2.0)\n\nvec2 inverse_sierpinski(vec2 point) {\n    //Inverse transform 1: NW\n    if (point.y > 0.0)\n        return 2.0 * point + vec2(0.5, -0.5);\n    else if (point.x > 0.0)\n        return 2.0 * point + vec2(-0.5, 0.5);\n    else\n        return 2.0 * point + vec2(0.5, 0.5);\n}\n\nfloat escape_time(vec2 point) {\n    \n    vec2 z = point;\n    for (float i = 0.0; i < MAX_ITERS; i++) {\n        z = inverse_sierpinski(z);\n        \n        \n        if (length(z) > RADIUS)\n            return i;\n    }\n    return 0.0;\n}\n\nfloat normcos(float x) {\n    return 0.5 + 0.5 * cos(x);\n}\n\nfloat normsin(float x) {\n    return 0.5 + 0.5 * sin(x);\n}\n\nvec4 palette(float n) {\n    /*\n    vec4 result;\n    //result.r = normcos(n - 3.0 * iTime);\n    //result.g = normsin(n - 2.0 * iTime);\n    //result.b = normcos(2.0 * n - iTime);\n    return result;\n\t*/\n    return vec4(0.0, 0.75 * normcos(n - iTime), 0.75 * normsin(n - iTime), 1.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - CENTER)/iResolution.y;\n    uv *= 1.5;\n    \n    float n = escape_time(uv);\n    \n    fragColor = palette(n);\n}","name":"Image","description":"","type":"image"}]}