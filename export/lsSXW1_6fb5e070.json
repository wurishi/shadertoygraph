{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// ported by Renaud BÃ©dard (@renaudbedard) from original code from Tanner Helland\n// http://www.tannerhelland.com/4435/convert-temperature-rgb-algorithm-code/\n\n// color space functions translated from HLSL versions on Chilli Ant (by Ian Taylor)\n// http://www.chilliant.com/rgb2hsv.html\n\n// licensed and released under Creative Commons 3.0 Attribution\n// https://creativecommons.org/licenses/by/3.0/\n\n// playing with this value tweaks how dim or bright the resulting image is\n#define LUMINANCE_PRESERVATION 0.75\n\n#define EPSILON 1e-10\n\nfloat saturate(float v) { return clamp(v, 0.0,       1.0);       }\nvec2  saturate(vec2  v) { return clamp(v, vec2(0.0), vec2(1.0)); }\nvec3  saturate(vec3  v) { return clamp(v, vec3(0.0), vec3(1.0)); }\nvec4  saturate(vec4  v) { return clamp(v, vec4(0.0), vec4(1.0)); }\n\nvec3 ColorTemperatureToRGB(float temperatureInKelvins)\n{\n\tvec3 retColor;\n\t\n    temperatureInKelvins = clamp(temperatureInKelvins, 1000.0, 40000.0) / 100.0;\n    \n    if (temperatureInKelvins <= 66.0)\n    {\n        retColor.r = 1.0;\n        retColor.g = saturate(0.39008157876901960784 * log(temperatureInKelvins) - 0.63184144378862745098);\n    }\n    else\n    {\n    \tfloat t = temperatureInKelvins - 60.0;\n        retColor.r = saturate(1.29293618606274509804 * pow(t, -0.1332047592));\n        retColor.g = saturate(1.12989086089529411765 * pow(t, -0.0755148492));\n    }\n    \n    if (temperatureInKelvins >= 66.0)\n        retColor.b = 1.0;\n    else if(temperatureInKelvins <= 19.0)\n        retColor.b = 0.0;\n    else\n        retColor.b = saturate(0.54320678911019607843 * log(temperatureInKelvins - 10.0) - 1.19625408914);\n\n    return retColor;\n}\n\nfloat Luminance(vec3 color)\n{\n    float fmin = min(min(color.r, color.g), color.b);\n\tfloat fmax = max(max(color.r, color.g), color.b);\n\treturn (fmax + fmin) / 2.0;\n}\n\nvec3 HUEtoRGB(float H)\n{\n    float R = abs(H * 6.0 - 3.0) - 1.0;\n    float G = 2.0 - abs(H * 6.0 - 2.0);\n    float B = 2.0 - abs(H * 6.0 - 4.0);\n    return saturate(vec3(R,G,B));\n}\n\nvec3 HSLtoRGB(in vec3 HSL)\n{\n    vec3 RGB = HUEtoRGB(HSL.x);\n    float C = (1.0 - abs(2.0 * HSL.z - 1.0)) * HSL.y;\n    return (RGB - 0.5) * C + vec3(HSL.z);\n}\n \nvec3 RGBtoHCV(vec3 RGB)\n{\n    // Based on work by Sam Hocevar and Emil Persson\n    vec4 P = (RGB.g < RGB.b) ? vec4(RGB.bg, -1.0, 2.0/3.0) : vec4(RGB.gb, 0.0, -1.0/3.0);\n    vec4 Q = (RGB.r < P.x) ? vec4(P.xyw, RGB.r) : vec4(RGB.r, P.yzx);\n    float C = Q.x - min(Q.w, Q.y);\n    float H = abs((Q.w - Q.y) / (6.0 * C + EPSILON) + Q.z);\n    return vec3(H, C, Q.x);\n}\n\nvec3 RGBtoHSL(vec3 RGB)\n{\n    vec3 HCV = RGBtoHCV(RGB);\n    float L = HCV.z - HCV.y * 0.5;\n    float S = HCV.y / (1.0 - abs(L * 2.0 - 1.0) + EPSILON);\n    return vec3(HCV.x, S, L);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float factor = saturate(iMouse.x / iResolution.x * 2.0);\n    float colorTempK = mix(1000.0, 40000.0, iMouse.y / iResolution.y);\n    \n    vec3 image = texture(iChannel0, vec2(uv.x, 1.0 - uv.y)).rgb;\n    vec3 colorTempRGB = ColorTemperatureToRGB(colorTempK);\n    \n    if (uv.x > 0.5)\n        fragColor = vec4(ColorTemperatureToRGB(mix(1000.0, 40000.0, uv.y)), 1.0);\n    else\n    {\n    \tfloat originalLuminance = Luminance(image);\n        \n    \tvec3 blended = mix(image, image * colorTempRGB, factor);\n    \tvec3 resultHSL = RGBtoHSL(blended);\n    \n    \tvec3 luminancePreservedRGB = HSLtoRGB(vec3(resultHSL.x, resultHSL.y, originalLuminance));        \n        \n    \tfragColor = vec4(mix(blended, luminancePreservedRGB, LUMINANCE_PRESERVATION), 1.0);\n    }\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lsSXW1","date":"1411415680","viewed":11120,"name":"Color Temperature","username":"renaudbedard","description":"Color temperature (kelvin) to RGB subroutine ported from VB.NET (!) code by Tanner Helland (see code header for credits).\nDrag on X (left half of the screen) to set the blending factor, drag on Y to change the color temperature.","likes":22,"published":1,"flags":0,"usePreview":1,"tags":["2d","colortemperature","kelvin"],"hasliked":0,"parentid":"","parentname":""}}