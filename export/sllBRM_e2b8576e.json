{"ver":"0.1","info":{"id":"sllBRM","date":"1650664608","viewed":94,"name":"Very Normal","username":"TheKGS","description":"Drawing the normal vectors of a surface of sine waves as colours","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["waves","circles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float surf(vec2 uv, vec2 pnt, float scale, float speed)\n{\n    float dst = length(uv - vec2(pnt.x, pnt.y));\n    return 0.5 + 0.5 * sin(dst * scale - iTime * speed);\n}\n\nfloat pointonsurface(vec2 point)\n{\n    return (0.08 * surf(point, vec2(0.5, 0.5), 120., 2.0) + \n            0.01 * surf(point, vec2(0.2, 1.2), 160., 5.0) +\n            0.01 * surf(point, vec2(0.3, -0.5), 120., 1.0) + 1.5) / 3.0;\n}\n\nvec3 fixvector(vec3 i)\n{\n    i = normalize(i);\n\n    vec3 f = abs(i);\n    \n    if (f.x >= f.y && f.x >= f.z)\n        return i * 1.0/f.x;\n    else if (f.y >= f.x && f.y >= f.z)\n        return i * 1.0/f.y;\n    else\n        return i * 1.0/f.z;\n\n}\n\nvec3 getNormal(vec2 uv)\n{\n    float d = 1.0/450.;\n\n    vec2 phor = uv + vec2(d, .0);\n    vec2 pver = uv + vec2(.0, d);\n    \n    float h = pointonsurface(phor);\n    float v = pointonsurface(pver);\n    float p = pointonsurface(uv);\n\n    vec3 uvp = vec3(uv, p);\n    vec3 A = vec3(uv.x,     uv.y + d, v) - uvp;\n    vec3 B = vec3(uv.x + d, uv.y,     h) - uvp;\n    vec3 norm = cross(B, A);\n\n    if (uv.x >= 0.0)\n        return fixvector(norm);\n\n    return vec3(p,p,p);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 uv2 = getNormal(uv);\n    fragColor = vec4(uv2,1.0);\n}","name":"Image","description":"","type":"image"}]}