{"ver":"0.1","info":{"id":"WdfyWH","date":"1590713879","viewed":147,"name":"Maze Shape Gradient","username":"spalmer","description":"uses sdf to control flow of a maze.  Above the 439ch par at 506, unsurprisingly, Fabrice is in the lead! haha!\ngolfed version of original [url]https://shadertoy.com/view/td2fWy[/url]","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["distance","maze","golf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// golfed version, saved original to https://shadertoy.com/view/td2fWy\n// rendering inspired by stb's basic maze generator https://shadertoy.com/view/XdKGWK\n// and stateless generation inspired by FabriceNeyret2's https://shadertoy.com/view/lt2cRR\n// just had a crazy idea one day and went for it!\n\n// This thing started off at 1593 ch at first public version,\n// Fabrice chopped it down to size rather quickly!\n// Honestly I hadn't really intended to golf this, \n// but there was way too much unused code, and it got out of hand.\n\n// Big thanks to @stb for the help fixing some of the last bugs!\n// And for the push to go ahead and wrap it up.\n// And big thanks to Fabrice for pointing out many non-obvious optimizations!\n\n// still a few problems:\n// the walls are centered in the cells, which has perks \n// but leaves some tight spaces near the maze boundary.\n// some cells near the \"center\" of the shapes (at gradient\n// discontinuities) seem incomplete.  Occasionally blocks\n// sections off due to something related.\n// For the most part, though, it generates fairly decent mazes,\n// which directionally flow along the gradient of the shape sdf.\n\n// TODO needs a start and a finish!\n\n// Been trying to clean up and use the suggestions given.\n// Bear with me!  I'm far slower, not *nearly* so fast as Mr. Neyret.\n// In fact his approach has diverged at this point so much\n// that I'm not sure any of his recent suggestions apply anyway.\n// So I'll just keep trying to golf it, just my way.\n// Tortoises have been known to beat hares before!  ;)\n// I will try a more algorithmic optimization pass first,\n// as Fabrice himself has wisely suggested, prior to \n// going full bore for shortness.\n\n// preprocessor blocks make counting difficult\n\n/* * /\n// 511 ch     Hey, I passed a few of his entries now!  :D   \n#define R iResolution\n#define L length\n\n#define D(_) min(L(_ - r * clamp(dot(_, r), -1.4, 1.4)), L(L(_) - .65)) - .25\n\nvoid mainImage(out vec4 o, vec2 q)\n{\n    float d = 1., a = d/R.y, U = 16.*a; // lowest distance, antialiasing width, maze scale\n    q = (q+q-R.xy)*a; // fragcoord query, signed, normalized, aspect corrected\n    vec2 r = sin(vec2(33,0) - iTime/1e3) // /a // rotating beam\n    , e = vec2(.5*a, 0) // TO BE REMOVED\n    // FIXME we go back & forth from Q twice, I think?!  WHY\n    // think must solve that prior to attacking the i * U problem below, or bad precision results!\n    , i = floor(q / U + .5); // I think it always involves U factor now? careful w precision!\n    for (float x = -2.; x < 3.; ++x) {\n        float u = x;\n        vec2 p = (i + (x*x > 1. ? vec2(0,.5*u) : vec2(u,0))) * U\n        , v = q - p;\n        v *= step(D(p), vec2(D(p + e), D(p + e.yx))) * 2. - 1.;\n    \tif (.5 < fract(sin((p.x+47.*p.y)*99.)*3e4)) v = v.yx;\n        if (v.y > 0.) v.y = max(0., v.y - U);\n        d = min(d, L(v) - a);\n    }\n\to = vec4(mix(1., sqrt(.5-.5*d*R.y), D(i*U) < 0.));\n}\n\n/* */\n// 506 ch and counting\n// WELL, it worked out! I think!  not much shorter yet though, still must clean more\n#define R iResolution\n#define L length\n// unsure if /dot(r,r) would be worse than all this mess to keep r unit length\n#define D(_) min(L(_ - clamp(dot(_, r) * a, -.7, .7)/a * r), L(L(_) - .325/a)) - .125/a\nvoid mainImage(out vec4 o, vec2 q)\n{\n    float d = 1., a = d/R.y, U = 8.; // lowest distance, antialiasing width, maze scale \n    q = q-.5*R.xy; // fragcoord query, signed, normalized, aspect corrected\n    vec2 r = sin(vec2(33,0) - iTime/1e3) // rotating beam unit vector\n    , e = vec2(.5, 0)\n    , i = floor(q / U + .5) * U;\n    for (float x = -2.; x < 3.; ++x) {\n        float u = x;\n        vec2 p = i + (x*x > 1. ? vec2(0,.5*u) : vec2(u,0)) * U\n        , v = q - p;\n        v *= step(D(p), vec2(D(p + e), D(p + e.yx))) * 2. - 1.;\n        //p /= R.xy; // shouldn't matter much, but should match old stuff TODO maybe remove again or adjust constants below\n    \tif (.5 < fract(sin((p.x+47.*p.y)*99.)*3e4)) v = v.yx;\n        if (v.y > 0.) v.y = max(0., v.y - U);\n        d = min(d, L(v) - .5);\n    }\n\to = vec4(mix(1., sqrt(.5-.5*d), D(i) < 0.)); // FIXME bad implicit bool->float cast somehow works!?\n}\n\n/* * /\n\n// the dFdx idea was worth a shot!  damn near worked, too...\n//if (dFdx(y) > 0.) v.x = -v.x; //\n//if (dFdy(y) > 0.) v.y = -v.y; //\n\n/* * /\n\n// Fabrice down to 3 tweets now, omg!  439 ch (but I messed it up and get 440 now)\n#define L length// \n#define D ( b = sin( vec2(0,33) + iTime / 5e3 + 1.3 ) * 1.4,             \\\n            min( L( Q -  b* clamp( dot(Q,b)/2., -H, H ) ),               \\\n                 L( L(Q) - .65*H) )    - H/4. )                         //      \n#define mainImage( O, u )                                                \\\n    vec2  R = iResolution.xy, q = u+u - R, Q, r, b;                      \\\n    float H = R.y, d = H, W = 16., s;                                    \\\n    for (int i, x = -3; ++x < 3; )                                       \\\n        Q = round(q/W)*W,   Q[ x*x/4 ] += x>0 ? W : x<0 ? -W : 0.,       \\\n        s = D,                                                           \\\n        Q[ i = int( sin(dot(r=Q,R)) * 4e5 )&1 ] += .5,                   \\\n        r = s > D ? r-q : q-r,  r[i] -= clamp( r[i], 0., W ),            \\\n        d = s > 0.                                                       \\\n            ? min( max( Q = abs(q-Q) - 8. , Q.y ).x , min( d, L(Q-8.)) ) \\\n            : clamp( d, s-.2*H , L(r) - 1. );                            \\\n    Q = q, O += .7 - min( d*.5 , 8. - D )\n// wow!\n\n/* */","name":"Image","description":"","type":"image"}]}