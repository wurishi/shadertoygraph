{"ver":"0.1","info":{"id":"XdVyz1","date":"1535462882","viewed":980,"name":"Color Illusion","username":"P_Malin","description":"The bus appears to be red although the pixels are actually grey.\n\nAnother shadertoy inspired by @AkiyoshiKitaoka","likes":7,"published":3,"flags":0,"usePreview":0,"tags":["draft"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Color Illusion\n// The bus appears to be red although the pixels are actually grey.\n\n// Another shadertoy inspired by @AkiyoshiKitaoka\n\n// sRGB luminance\nconst vec3 vLuminanceCoeffs = vec3(0.2126, 0.7152, 0.0722);\n\nconst vec3 vPrimary = vec3(1,0,0);\n\nvec3 FalseColor( vec3 vSource )\n{\n    float gamma = 2.2f;\n    vSource = pow( vSource, vec3(gamma) );\n    \n    vec3 vResult = vSource;\n    \n#if 0\n    vResult = vSource * (1.0 - vPrimary) + dot( vSource, vPrimary );        \n#else    \n    \n    vec3 vN = vSource / (vSource.x + vSource.y + vSource.z);\n    \n    // how 'red' was the original?\n    float b = 1.0 - dot( vN, vec3(0,.5,.5) );\n    b = clamp( b, 0.0, 1.0 );        \n    \n    // boost the effect\n    b = pow( b, 4.0 );\n    vec3 vHue = mix( vec3(1) - vPrimary, vec3(1,1,1), b );\n    // match source luminance\n    vResult = vHue * dot( vSource, vLuminanceCoeffs ) / dot(vHue, vLuminanceCoeffs);\n#endif        \n        \n    vResult = pow( vResult, vec3(1.0 / gamma) );\n    \n    return vResult;\n}\n\nfloat GetScale()\n{\n    float fTime = iTime * 0.25;\n    \n    fTime += 1.0;\n    \n    float s = fract( fTime );\n    float f = floor( fTime );\n    \n    switch( int(f) % 4 )\n    {\n        case 0:        \n        break;\n        \n        case 1:\n        \ts = 1.0;\n        break;\n        \n        case 2:\n        \ts = 1.0f - s;\n        break;\n        \n        default:\n        \ts = 0.0;\n       \tbreak;\n    }\n    \n    s = smoothstep( 0.0, 1.0, s );\n            \n    float fMinScale = 0.013;\n    float fMaxScale = 1.0;\n    return mix( fMinScale, fMaxScale, s );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 vUV = fragCoord/iResolution.xy;\n    \n    vec2 vCentre = vec2(0.255, 0.38);\n    \n    float fScale = GetScale();\n\n    if ( iMouse.z <= 0.0 )\n    {\n        vUV = ((vUV - vCentre) * fScale) + vCentre;\n    }\n    else\n    {\n\t\tvec2 vUV2 = ((vUV - vCentre) / fScale) + vCentre;\n        if ( any( greaterThanEqual( vUV2, vec2(1.0) ) ) || any( lessThan( vUV2, vec2(0.0) ) ) )\n        {\n\t\t    fragColor = vec4(0.0);\n            return;\n        }\n    }\n    \n    vec3 vSource = texture(iChannel0, vUV ).rgb;\n\tvec3 vResult = FalseColor( vSource );\n    fragColor = vec4(vResult,1.0);\n}","name":"Image","description":"","type":"image"}]}