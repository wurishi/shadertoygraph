{"ver":"0.1","info":{"id":"lc3GR2","date":"1711890887","viewed":105,"name":"particle_force","username":"yufengjie","description":"push particle","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["particle","push","force"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define resolution 30.\n#define r_particle 0.1\n\nfloat pix;\n\nfloat plotCircle(vec2 p, vec2 c, float r) {\n    float cir = length(p-c) - r;\n    return smoothstep(pix*2., 0., cir);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y * resolution;\n    float ixy = iResolution.x / iResolution.y;\n    pix = 1. / iResolution.y * resolution;\n    vec3 c_fin = vec3(0.);\n\n    vec2 uvi = floor(uv);\n    vec2 uvf = fract(uv);\n    \n    float dist_max = resolution*2.;\n    float off_max = 4.6;\n    float range = ceil(off_max + r_particle);\n    \n    #if 0\n        float b1 = smoothstep(2. * pix, 0., abs(uvf.x));\n        float b2 = smoothstep(2. * pix, 0., abs(uvf.y));\n        float b3 = smoothstep(2. * pix, 0., abs(uvf.x - 1.));\n        float b4 = smoothstep(2. * pix, 0., abs(uvf.y - 1.));\n        float b = b1 + b2 + b3 + b4;\n        c_fin += b;\n    #endif\n    \n    vec2 target = vec2((cos(iTime * 0.5) * 0.5 + 0.5) * resolution * ixy, (sin(iTime) * 0.5 + 0.5) * resolution);\n    if(iMouse.x != 0.) {\n        target = iMouse.xy / iResolution.y * resolution;\n    }\n    float cc = plotCircle(uv, target, 0.5);\n    c_fin += cc;\n    \n    for(float x = -range; x <= range; x += 1.) {\n        for(float y = -range; y <= range; y += 1.) {\n            vec2 mc = uvi + vec2(x,y) + vec2(0.5) - target;\n            vec2 mcn = normalize(mc);\n            float dist = length(mc);\n            float d = clamp(0., 1., dist / dist_max);\n            vec2 off = mcn * (1. - d) * off_max;\n\n            vec3 color = palette(d);\n            float cir = plotCircle(uv, uvi + vec2(x,y) + vec2(0.5) + off, r_particle);\n            c_fin = mix(c_fin, color, cir);\n            //c_fin += cir * color;\n\n        }\n    }\n    \n\n    fragColor = vec4(c_fin,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\n// https://www.shadertoy.com/view/4dS3Wd\nfloat hash(float p) {\n  p = fract(p * 0.011);\n  p *= p + 7.5;\n  p *= p + p;\n  return fract(p);\n}\nfloat hash(vec2 p) {\n  vec3 p3 = fract(vec3(p.xyx) * 0.13);\n  p3 += dot(p3, p3.yzx + 3.333);\n  return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat noise(float x) {\n    float i = floor(x);\n    float f = fract(x);\n    float u = f * f * (3.0 - 2.0 * f);\n    return mix(hash(i), hash(i + 1.0), u);\n}\n\nfloat noise(vec2 x) {\n  vec2 i = floor(x);\n  vec2 f = fract(x);\n\n\t// Four corners in 2D of a tile\n  float a = hash(i);\n  float b = hash(i + vec2(1.0, 0.0));\n  float c = hash(i + vec2(0.0, 1.0));\n  float d = hash(i + vec2(1.0, 1.0));\n\n    // Simple 2D lerp using smoothstep envelope between the values.\n\t// return vec3(mix(mix(a, b, smoothstep(0.0, 1.0, f.x)),\n\t//\t\t\tmix(c, d, smoothstep(0.0, 1.0, f.x)),\n\t//\t\t\tsmoothstep(0.0, 1.0, f.y)));\n\n\t// Same code, with the clamps in smoothstep and common subexpressions\n\t// optimized away.\n  vec2 u = f * f * (3.0 - 2.0 * f);\n  return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\nfloat noise(vec3 x) {\n  const vec3 step = vec3(110, 241, 171);\n\n  vec3 i = floor(x);\n  vec3 f = fract(x);\n\n    // For performance, compute the base input to a 1D hash from the integer part of the argument and the \n    // incremental change to the 1D based on the 3D -> 1D wrapping\n  float n = dot(i, step);\n\n  vec3 u = f * f * (3.0 - 2.0 * f);\n  return mix(mix(mix(hash(n + dot(step, vec3(0, 0, 0))), hash(n + dot(step, vec3(1, 0, 0))), u.x), mix(hash(n + dot(step, vec3(0, 1, 0))), hash(n + dot(step, vec3(1, 1, 0))), u.x), u.y), mix(mix(hash(n + dot(step, vec3(0, 0, 1))), hash(n + dot(step, vec3(1, 0, 1))), u.x), mix(hash(n + dot(step, vec3(0, 1, 1))), hash(n + dot(step, vec3(1, 1, 1))), u.x), u.y), u.z);\n}\n\nvec3 palette(float t) {\n  vec3 a = vec3(0.731, 1.098, 0.192);\n  vec3 b = vec3(0.358, 1.090, 0.657);\n  vec3 c = vec3(1.077, 0.360, 0.328);\n  vec3 d = vec3(0.965, 2.265, 0.837);\n  return a + b * cos(6.28318 * (c * t + d));\n}","name":"Common","description":"","type":"common"}]}