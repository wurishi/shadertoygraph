{"ver":"0.1","info":{"id":"dlyXDd","date":"1686471374","viewed":95,"name":"Fork Oriented B chenxianmi 322","username":"chenxianming","description":"Distance to an oriented box, or square line segment if you want. Mouse click and drag to see unbounding sphere\n\nraymarching\nhttps://www.shadertoy.com/view/DttSWl","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","distancefield","sdf","circle","distance","box","oriented"],"hasliked":0,"parentid":"stcfzn","parentname":"Oriented Box - distance 2D"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Distance to an oriented box.\n\n// List of some other 2D distances: https://www.shadertoy.com/playlist/MXdSRf\n//\n// and iquilezles.org/articles/distfunctions2d\n\n#define PI 3.1415926\n\nmat2 rotation(float a) {\n    float s = sin(a), c = cos(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat smin (float a, float b, float r)\n{\n    float h = clamp(.5+.5*(b-a)/r,0.,1.);\n    return mix(b, a, h) - r*h*(1.-h);\n}\n\nfloat sdLogo( in vec2 uv ){\n    vec2 p = uv;\n    float d = length(p) - .2;\n    \n    d = smin( d, length( p + vec2( .13, .13 ) ) - .1, .08 );\n    d = smin( d, length( p + vec2( -.13, .13 ) ) - .1, .08 );\n    \n    d = smin( d, length( p + vec2( -.13, -.04 ) ) - .1, .2 );\n    d = smin( d, length( p + vec2( .13, -.04 ) ) - .1, .2 );\n    \n    d = smin( d, length( p + vec2( .17, -.19 ) ) - .12, .2 );\n    d = smin( d, length( p + vec2( -.17, -.19 ) ) - .12, .2 );\n    \n    float r = length( p.xy + vec2( -.33, -.1 ) ) - .15;\n    \n    \n    d = max( d, -r );\n    \n    p.x += .25;\n    p.y -= .08;\n\n    \n    p.xy *= rotation( PI * -.25 );\n    \n    d = min( d, \n        max(\n            length( p + vec2( .08, -.5 ) ) - .12,\n            length( p + vec2( -.08, -.5 ) ) - .12\n        )\n    );\n\n\n    return d;\n}\n\nfloat sdOrientedBox( in vec2 p, in vec2 a, in vec2 b, float th )\n{\n    float l = length(b-a);\n    vec2  d = (b-a)/l;\n    vec2  q = p-(a+b)*0.5;\n          q = mat2(d.x,-d.y,d.y,d.x)*q;\n          q = abs(q)-vec2(l*0.5,th);\n    return length(max(q,0.0)) + min(max(q.x,q.y),0.0);    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalized pixel coordinates\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    p *= 1.4;\n    m *= 1.4;\n    \n    // animation\n    vec2 v1 = cos( iTime*0.5 + vec2(0.0,1.00) + 0.0 );\n\tvec2 v2 = cos( iTime*0.5 + vec2(0.0,3.00) + 1.5 );\n    float th = 0.3*(0.5+0.5*cos(iTime*1.1+1.0));\n\n\tfloat d = sdOrientedBox( p, v1, v2, th );\n    d = sdLogo( p );\n\n    // distance\n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-6.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(120.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n\n    if( iMouse.z>0.001 )\n    {\n    d = sdOrientedBox(m, v1, v2, th);\n    d = sdLogo( m );\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n    \n\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}