{"ver":"0.1","info":{"id":"clsBD4","date":"1692948266","viewed":71,"name":"Base -1+i","username":"tiusic","description":"All complex integers can be represented using an ordinary binary bit string, if you use base -1+i instead of base 2. This shader calculates the base -1+i representation of the pixel and maps it to a color.\nhttps://en.wikipedia.org/wiki/Complex-base_system","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["fractal","math"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"ivec2 compdiv(ivec2 a, ivec2 b) {\n  return ivec2(a.x * b.x + a.y * b.y, a.y * b.x - a.x * b.y) / (b.x * b.x + b.y * b.y);\n}\n\nfloat decomp(ivec2 base, ivec2 value) {\n  float bits = 0.0;\n  for (float e = 0.0; e < 64.0; ++e) {\n    if (((value.x + value.y) % 2 + 2) % 2 != 0) {\n      value -= ivec2(1, 0);\n      bits += pow(2.0, e);\n    }\n    value = compdiv(value, base);\n  }\n  return bits;\n}\n\nconst vec3 clrPeriod = vec3(1.3, 1.1, 1.0);\nconst vec3 clrPhase = vec3(-0.2, 0.0, 0.2);\nvec3 clr(float d) {\n    if (d < 0.0) return vec3(0.0, 0.0, 0.0);\n    float e = log(d) * 0.1 * (1.5 + cos(0.2 * iTime));\n    return 0.5 - 0.5 * cos(6.28318 * (clrPeriod * e + clrPhase));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    ivec2 v = ivec2(fragCoord - 0.5 * iResolution.xy);\n    float x = decomp(ivec2(-1, 1), v);\n    fragColor = vec4(clr(x) ,1.0);\n}","name":"Image","description":"","type":"image"}]}