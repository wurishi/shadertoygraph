{"ver":"0.1","info":{"id":"4lKyWG","date":"1537500091","viewed":1022,"name":"Sphere Project- Boombox","username":"tiff","description":"Mimicking the beating of a boombox","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["boombox"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Sphere - Signed Distance Function\nfloat sphere(vec3 p, float radius){\n    return length(p)-radius;\n}\n\n\n// Locate objects\nfloat map(vec3 p)\n{    \n    // Sphere radius\n    float sphereSize = 0.6;\n    \n    // Transform coordinate space so spheres repeat\n    vec3 q = fract(p) * 2.0 - 1.1;\n    \n    int tx = int(q.y);\n    float fft  = texelFetch( iChannel0, ivec2(tx,0), 0 ).x; \n\tfft *= 1.0;\n    \n    // Signed distance of sphere\n    float s = sphere(abs(tan(q)), sphereSize);\n    float d = 0.08 * (cos(q.x*10.*fft)*cos(q.y*10.*fft) * tan(q.z*10.*fft)  );\n    //return s +wave;\n    return s+d;\n}\n\n\n// Trace rays\nfloat trace(vec3 origin, vec3 r) \n{\n  float t = 0.0; // Distance Traveled\n    for (int i = 0; i < 5; ++i) {\n        vec3 p = origin + r * t;\n        float d = map(p); // Locate object\n        t += d * 0.8; // Step along the ray\n    }\n    return tan(t); //tan inverses shadows\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 color = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    uv = uv *2.-1.; // Remap the space to -1. to 1.\n    uv.x *= iResolution.x/iResolution.y;\n\n   \t// Create ray to fire into scene\n   \tvec3 ray = normalize(vec3(uv, 1.5));\n    \n    // Create origin of scene\n    vec3 origin = vec3(0., 0.,iTime); //iTime changes z perspective, going into screen\n   \n    \n    // Trace any objects in the scene\n    float t = trace(origin, ray);\n    \n    // Generate fog based on distance from t\n    float fog = 1.0 / (1.0 + t * t * 0.1);\n    \n    // Final color with includes sdf + fog\n    vec3 fc = vec3(fog);\n\n\n    //fc -= abs(log(tan(color))); //different transitioning of color   \n    fc -= tan(color);\n    \n    // Output to screen\n    fragColor = vec4(fc, color);\n}\n\n\n\n","name":"Image","description":"","type":"image"}]}