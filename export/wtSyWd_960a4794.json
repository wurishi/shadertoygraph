{"ver":"0.1","info":{"id":"wtSyWd","date":"1595685971","viewed":71,"name":"parametric triangle","username":"apayen","description":"trying to figure out how to rasterize non-straight triangles","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["rasterization"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define ANIM_VERTEX 0\n#define ANIM_PARAM1 1\n#define ANIM_PARAM2 0\n\nstruct Vertex\n{\n    vec2 pos;\n    vec3 parametric1;\n    vec3 parametric2;\n    vec2 uv0;\n};\n\nfloat evalParametric(float t, vec3 parametric)\n{\n    return parametric.x * t * t + parametric.y * t + parametric.z;\n}\n\nfloat evalSDF(vec2 pos, Vertex v1, Vertex v2, Vertex v3)\n{\n    vec2 na = normalize(v2.pos - v1.pos);\n    vec2 nb = normalize(v3.pos - v1.pos);\n    vec2 nc = normalize(pos - v1.pos);\n    \n    float dab = 0.5 - dot(na, nb) * 0.5;\n    float dac = 0.5 - dot(na, nc) * 0.5;\n    \n    if (dab == 0.0)\n    {\n        return 2.0; // triangle is malformed, return a value out of 0..1 range straight away\n    }\n    \n    float t1 = dac / dab;\n    t1 = evalParametric(t1, v1.parametric1);\n    \n    float t2 = 1.0 - distance(v1.pos, pos) / mix(distance(v1.pos, v2.pos), distance(v1.pos, v3.pos), t1);\n    t2 = evalParametric(t2, v1.parametric2);\n    \n    return t2;\n}\n\nvec3 shade(vec2 uv)\n{\n    //return vec3(uv, 0.0);\n    return texture(iChannel0, uv).rgb;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tVertex vertices[3];\n    vertices[0] = Vertex(vec2(0.2, 0.2), vec3(4, -3, 0), vec3(-4, 5, 0), vec2(0.0, 0.0));\n\tvertices[1] = Vertex(vec2(0.9, 0.3), vec3(0, 1, 0), vec3(0, 1, 0), vec2(1.0, 0.0));\n\tvertices[2] = Vertex(vec2(0.7, 0.8), vec3(-3.5, 4.5, 0), vec3(0, 1, 0), vec2(0.6, 1.0));\n\n#if ANIM_VERTEX\n    vertices[0].pos = vec2(cos(iTime*2.0) * 0.2 + 0.2, cos(iTime)*0.1 + 0.2);\n#endif\n#if ANIM_PARAM1\n    vertices[0].parametric1 = vec3(cos(iTime) * 4.0, 1.0 - cos(iTime) * 4.0, 0.0);\n#endif\n#if ANIM_PARAM2\n    vertices[0].parametric2 = vec3(-cos(iTime) * 2.0 - 3.0, 4.0 + cos(iTime) * 2.0, 0.0);\n#endif\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 pos = fragCoord/iResolution.xy;\n    \n    vec3 uvw;\n    uvw.x = evalSDF(pos, vertices[0], vertices[1], vertices[2]);\n    uvw.y = evalSDF(pos, vertices[1], vertices[2], vertices[0]);\n    uvw.z = evalSDF(pos, vertices[2], vertices[0], vertices[1]);\n\n    if (uvw.x < 0.0 || uvw.y < 0.0 || uvw.z < 0.0)\n    {\n    \tfragColor = vec4(1.0);\n        return;\n    }\n    \n    uvw = normalize(uvw);\n    //uvw.yz = vec2(0.0);\n    vec3 col = shade(uvw.x * vertices[0].uv0 + uvw.y * vertices[1].uv0 + uvw.z * vertices[2].uv0);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}