{"ver":"0.1","info":{"id":"Xt3Szs","date":"1481067329","viewed":234,"name":"ZoomSquares","username":"dila","description":"This is a bit of a mess.","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["zoomingforever"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 col1 = vec3(0.118, 0.365, 0.467);\nvec3 col2 = vec3(0.514, 0.851, 0.933);\nvec3 col3 = vec3(0.957, 0.875, 0.29);\nvec3 col4 = vec3(0.973, 0.663, 0.106);\nvec3 col5 = vec3(0.843, 0.431, 0.176);\nvec3 col6 = vec3(0.361, 0.251, 0.145);\n\nmat2 rot(float x)\n{\n    return mat2(cos(x), sin(x), -sin(x), cos(x));\n}\n\nfloat sdBox( vec2 p, vec2 b )\n{\n  vec2 d = abs(p) - b;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nvec2 box(vec2 p, float r, float k, float t)\n{\n\tvec2 q = vec2(atan(p.y, p.x) / 3.14159 * k, length(p) - r);\n    q.x = (fract(q.x / k) - 0.5) * k;\n    q.y = sdBox(p * rot(t), vec2(1.0));\n    return q;\n}\n\nvec3 cout = vec3(0.0);\n\nvec3 tex(vec2 p, float t, float pt)\n{\n    vec2 of = vec2(cos(t), sin(t)) * 0.5;\n    vec2 pof = vec2(cos(pt), sin(pt)) * 0.5;\n    \n\tvec2 c = box(p + of, 1.0, 3.0, t);\n    vec2 c2 = box(p + of, 1.0, 3.0, t);\n    \n    float ln = 10000.0;\n    \n    float k = 1.0 / (1.0 + c.y * c.y * ln);\n    float u = 1.0 / (1.0 + c2.y * c2.y * ln);\n    \n    vec2 sub = p;\n    \n    cout.xy = sub / 0.25;\n    cout.z = 1.0;\n    \n    float d = 1000.0;\n    vec2 q = c2;\n    for (int i = 0; i < 6; ++i) {\n        for (int j = 0; j < 3; ++j) {\n            q.x = abs(q.x) - 0.125;\n            q *= rot(3.141592 * 0.25);\n        }\n        q.y = abs(q.y) - 0.25;\n        q *= rot(3.141592 * 0.125);\n        d = min(d, sdBox(q, vec2(0.125)));\n    }\n    \n    float r = 1.0 / (1.0 + d * d * ln);\n    \n    vec2 ins = box(cout.xy + pof, 1.0, 1.0, pt);\n    float imask = max(sign(ins.y), 0.0);\n    float omask = max(sign(-c.y), 0.0);\n    float mask = imask * omask;\n    r *= omask * imask;\n    \n    vec2 rp = p + of;\n    \n    vec3 tex1 = texture(iChannel0, rp).xyz;\n\ttex1 = vec3(dot(tex1, vec3(0.299, 0.587, 0.114)));\n    tex1 *= col1;\n    \n    vec3 dest = mix(tex1, vec3(0.0), max(sign(d), 0.0)) * mask;\n    vec3 src = mix(col3, vec3(0.0), max(sign(-d), 0.0)) * mask;\n    \n    vec3 fc = mix(src + dest, vec3(0.0), r);\n    \n    return mix(fc, col3 * 2.0, k);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 r = normalize(vec3(uv, 1.0 - dot(uv,uv) * 0.1));\n    vec3 o = vec3(0.0, 0.0, -2.0);\n    vec3 n = vec3(0.0, 0.0, 1.0);\n    \n    float st = iTime;\n    \n    o.xy += vec2(cos(iTime) * sin(iTime), sin(iTime)) * 2.0;\n    r.xy *= rot(st);\n    n.xz *= rot(sin(iTime) * 0.3);\n    n.xy *= rot(st);\n    \n\tfloat t = -dot(o, n) / dot(r, n);\n    t += max(sign(-t), 0.0) * -1000.0;\n    vec3 w = o + r * t;\n    \n    float end = log(256.0);\n    float zt = mod(st, end);\n    float depth = 64.0 * exp(zt);\n    w.xy /= depth;\n    \n    /* to give the appearence of linear time zooming i use exp(iTime). */\n    /* the scene matches up every 4^n seconds, so i can only mod() when */\n    /* exp(iTime) = some power of 4, and for this modulus i use log(4^4 = 256) */\n    \n    vec3 p = vec3(w.xy, 1.0);\n    vec3 col = vec3(0.0);\n    float pinv = 0.0;\n    \n    for (int i = 0; i < 10; ++i) {\n        float inv = mod(floor(float(i)), 2.0) * 2.0 - 1.0;\n        float t = inv * iTime / end * 3.141592;\n        float pt = pinv * iTime / end * 3.141592;\n    \tcol += tex(p.xy, t, pt) * p.z;\n        p = cout;\n        pinv = inv;\n    }\n    \n    float fog = 1.0 / (1.0 + t * t * 0.01);\n    \n    col = mix(col6, col, fog);\n    \n\tfragColor = vec4(sqrt(col), 1.0);\n}","name":"Image","description":"","type":"image"}]}