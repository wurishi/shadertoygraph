{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"//#define _DEBUG\n#ifdef _DEBUG\nconst float kEpsilon = 0.01;\n#endif\nconst int kGridSize = 4;\n\n\nvec3 sampleVoronoiCube(vec3 N, float size)\n{\n\tvec3 aN = abs(N);\n\tvec2 uv = vec2(0.);\n\tif (aN.x >= aN.y && aN.x >= aN.z)\n\t{\n\t\tuv = vec2(N.z/N.x, N.y/N.x);\n\t}\n\telse if (aN.y>=aN.x && aN.y>=aN.z )\n\t{\n\t\tuv = vec2(N.x/N.y, N.z/N.y);\n\t}\n\telse if (aN.z>=aN.x && aN.z>=aN.y )\n\t{\n\t\tuv = vec2(N.x/N.z, N.y/N.z);\n\t}\n\tuv = 0.5*(1.+uv);\t\n\t\n\tfloat nbPoints = size*size;\n\tfloat m = floor(uv.x*size);\n\tfloat n = floor(uv.y*size);\t\n\t\n\t#if defined _DEBUG\n\tif ( ((uv.x*size-m)<kEpsilon) || ((uv.y*size-n)<kEpsilon))\n\t\treturn vec3(uv,1.);\n\t#endif\n\t\n\tvec3 voronoiPoint = vec3(0.);;\t\t\t\n\tfloat dist2Max = 1.;\n\tconst float _2PI = 6.28318530718;\n\t\n\tfloat i=0.;\n\tfloat j=0.;\n\t\n\tfor (int ij=0;ij<9;ij++)\n\t{ \t\t\t\n\t\ti = floor(float(ij)/3.);\n\t\tj = float(ij)-3.*i;\n\t\ti--;j--;\n\t\t\t\n\t\t\tvec2 coords = vec2(m+i,n+j);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\tfloat phase = _2PI*(size*coords.x+coords.y)/nbPoints;\n\t\t\tvec2 delta = 0.25*vec2(sin(iTime+phase), cos(iTime+phase));\n\t\t\tvec2 point = (coords +vec2(0.5) + delta)/size;\t\t\t\t\t\t\n\t\t\tvec2 dir = uv-point;\n\t\t\tfloat dist2 = dot(dir,dir);\n\t\t\t\n\t\t\t#if defined _DEBUG //displaying points\n\t\t\tif (dist2<=kEpsilon*kEpsilon)\n\t\t\t{\n\t\t\t\treturn vec3(1.0,1.,1.);\n\t\t\t}\n\t\t\t#endif\t\n\t\t\t\t\n\t\t\tfloat t = 0.5*(1.+sign(dist2Max-dist2));\n\t\t\tvec3 tmp = vec3(point,dist2);\n\t\t\tdist2Max = mix(dist2Max,dist2,t);\n\t\t\tvoronoiPoint = mix(voronoiPoint,tmp,t);\t\t\t\t\t\t\t\n\t}\t\n\treturn voronoiPoint;\t\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat head=iTime*0.25; float pitch= 0.;float roll=iTime*0.5;\n\tfloat ch=cos(head); float cp=cos(pitch); float cr=cos(roll); \n\tfloat sh=sin(head); float sp=sin(pitch); float sr=sin(roll); \n\tmat3 rot;\n\trot[0] = vec3(cr*ch-sr*sp*sh,sr*ch+cr*sp*sh,-cp*sh);\n\trot[1] = vec3(-sr*cp,cr*cp,sp);\n\trot[2] = vec3(cr*sh+sr*sp*ch,sr*sh-cr*sp*ch,cp*ch);\n\t\n\t// camera\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x/iResolution.y;    \n\tvec3 ro = rot*vec3(1.0,0.0,0.);\n\tvec3 ww = normalize(vec3(0.0,0.0,0.0) - ro);\n    vec3 uu = normalize(cross( vec3(0.0,1.0,0.0), ww ));\n    vec3 vv = normalize(cross(ww,uu));\n    vec3 rd = normalize( p.x*uu + p.y*vv + 1.2*ww); //ray direction in world space\n\t\n\tvec3 voronoi = sampleVoronoiCube(rd,float(kGridSize));\n\tfragColor = exp(-11.*float(kGridSize)*voronoi.z)*vec4(voronoi.xy, 5.*sqrt(voronoi.z),1.); \t\n\t\t\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ldjGRw","date":"1385389470","viewed":428,"name":"Voronoi CubeMap","username":"benito_luna","description":"Just trying to sample my voronoi diagram like a cubemap","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["cubemapvoronoiprocedural"],"hasliked":0,"parentid":"","parentname":""}}