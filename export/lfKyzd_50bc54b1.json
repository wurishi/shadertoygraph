{"ver":"0.1","info":{"id":"lfKyzd","date":"1732283714","viewed":38,"name":"Cube sphere smoosh","username":"Longingly","description":"My first raymarching shader","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","cube","sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdfSphere(vec3 p, float size) {\n    return length(p) - size;\n}\n\nfloat sdfCube(vec3 p, vec3 b) {\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\n}\n\nfloat smoothmin(float d1, float d2, float k) {\n    float h = clamp(0.5 + 0.5 * (d2 - d1) / k, 0.0, 1.0);\n    return mix(d2, d1, h) - k * h * (1.0 - h);\n}\n\nmat3 rotationMatrix(vec3 axis, float angle) {\n    axis = normalize(axis);\n    float c = cos(angle);\n    float s = sin(angle);\n    float oc = 1.0 - c;\n\n    return mat3(\n        vec3(c + axis.x * axis.x * oc, axis.x * axis.y * oc - axis.z * s, axis.x * axis.z * oc + axis.y * s),\n        vec3(axis.y * axis.x * oc + axis.z * s, c + axis.y * axis.y * oc, axis.y * axis.z * oc - axis.x * s),\n        vec3(axis.z * axis.x * oc - axis.y * s, axis.z * axis.y * oc + axis.x * s, c + axis.z * axis.z * oc)\n    );\n}\n\nfloat improvedSine(float seed, float a, float b) {\n    return mix(a, b, (sin(iTime * seed) + 1.0) * 0.5);\n}\n\nfloat improvedCosine(float seed, float a, float b) {\n    return mix(a, b, (cos(iTime * seed) + 1.0) * 0.5);\n}\n\nfloat map(vec3 p) {\n\n    vec3 q1 = p;\n    q1.z += iTime;\n    q1 = fract(q1) - .5;\n    float sphere = sdfSphere(q1, (sin(iTime) + 2.) * 0.15);\n    \n    vec3 q2 = p;\n    q2.x += sin(iTime) * 2.;\n    float cube = sdfCube(q2 * rotationMatrix(vec3(1), iTime), vec3(3.14 / 4.));\n    \n    return smoothmin(sphere, cube, 0.9);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    \n    vec3 ro = vec3(0, 0, -3);\n    vec3 rd = normalize(vec3(uv, 1));\n    vec3 col = vec3(0);\n    \n    float t = 0.;\n    \n    for (int i = 0; i < 80; i++) {\n        vec3 p = ro + rd * t;\n        //p.y += sin(iTime);\n        //p.x += cos(iTime);\n\n        float d = map(p);\n        \n        t += d;\n        \n        col = vec3(i) * vec3(improvedSine(1., 0.5, 1.), improvedCosine(1.5, 0.5, 1.), 0) / 80.;\n        \n        if (d < .001) break;\n    }\n    \n    fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}