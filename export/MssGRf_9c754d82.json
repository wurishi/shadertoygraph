{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"channel":1,"type":"cubemap","id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"#define ID_ENV \t\t0\n#define ID_SPHERE \t1\n#define ID_PLANE \t2\n\n\nconst float far_dist = 1000.0;\n\nstruct ray\n{\n\tvec3 o;\n\tvec3 d;\n};\n\nstruct sphere\n{\n\tvec3 c;\n\tfloat r;\n};\n\nstruct plane\n{\n\tvec3 n;\n\tfloat d;\n};\n\t\nstruct intersection\n{\n\tvec3 n;\n\tvec3 p;\n\tfloat t;\n};\n\t\nstruct surface\n{\n\tint id;\n\tvec3 p;\n\tvec3 n;\n\tvec3 e;\n\tvec3 a;\n};\n\nintersection ray_plane(ray r, plane p)\n{\n\tintersection res;\t\n\n\tres.t = far_dist;\n\t\n\tfloat t = (p.d - dot(r.o, p.n)) / dot(r.d, p.n);\n\t\n\tif( t < 0.0 )\n\t{\n\t\treturn res;\n\t}\n\t\n\tres.p = r.o + r.d*t;\n\tres.t = t;\n\tres.n = p.n;\n\n\treturn res;\n}\n\t\nintersection ray_sphere(ray r, sphere s)\n{\n\tintersection res;\n\tres.t = far_dist;\n\t\n\tvec3 local_ro = r.o - s.c;\n\t\n\tfloat b = 2.0 * dot(local_ro, r.d);\n\tfloat c = dot(local_ro, local_ro) - s.r*s.r;\n\tfloat d = b*b - 4.0*c;\n\t\n\tif( d < 0.0 )\n\t{\n\t\treturn res;\n\t}\n\n\tfloat t = (-b - sqrt(d)) / 2.0;\n\tif( t < 0.0 )\n\t{\n\t\treturn res;\n\t}\n\t\n\tres.t = t;\n\tres.p = r.o + r.d * res.t;\n\tres.n = normalize(res.p - s.c);\n\t\n\treturn res;\t\n}\n\nmat3 look_at(vec3 p, vec3 t)\n{\n\tvec3 d = normalize(t-p);\n\t\n\tmat3 res;\n\t\n\tvec3 up = vec3(0,1,0);\n\tvec3 right = normalize(cross(up, d));\n\tup = cross(d, right);\n\t\n\tres[0] = right;\n\tres[1] = up;\n\tres[2] = d;\n\t\n\treturn res;\n}\n\nsurface raytrace(ray r)\n{\t\n\tsurface res;\n\tres.id = ID_ENV;\n\tres.p = r.o + r.d*far_dist;\n\tres.n = -r.d;\n\tres.e = r.d;\n\tres.a = texture(iChannel1, r.d).rgb;\n\t\n\tfloat t = far_dist;\n\n\tintersection i;\n\n\t{\n\t\tsphere s;\n\t\ts.c = 1.25*vec3(cos(iTime*2.0),0,sin(iTime*2.0));\n\t\ts.r = 0.25;\n\t\ti = ray_sphere(r, s);\n\t\tif( i.t < t )\n\t\t{\n\t\t\tres.id = ID_SPHERE;\n\t\t\tres.p = i.p;\n\t\t\tres.n = i.n;\n\t\t\tres.e = r.d;\n\t\t\tres.a = vec3(0.1, 1.0, 0.2);\n\t\t\tt = i.t;\n\t\t}\n\t}\n\t\n\t{\n\t\tsphere s;\n\t\ts.c = -1.25*vec3(cos(iTime*2.0),0,sin(iTime*2.0));\n\t\ts.r = 0.25;\n\t\ti = ray_sphere(r, s);\n\t\tif( i.t < t )\n\t\t{\n\t\t\tres.id = ID_SPHERE;\n\t\t\tres.p = i.p;\n\t\t\tres.n = i.n;\n\t\t\tres.e = r.d;\n\t\t\tres.a = vec3(1.0, 0.2, 0.1);\n\t\t\tt = i.t;\n\t\t}\n\t}\n\t\n\n\t{\n\t\tsphere s;\n\t\ts.c = vec3(0);\n\t\ts.r = 1.0;\n\t\ti = ray_sphere(r, s);\n\t\tif( i.t < t )\n\t\t{\n\t\t\tres.id = ID_SPHERE;\n\t\t\tres.p = i.p;\n\t\t\tres.n = i.n;\n\t\t\tres.e = r.d;\n\t\t\tres.a = vec3(1.0);\t\t\n\t\t\tt = i.t;\n\t\t}\n\t}\n\t\n\t{\n\t\tplane p;\n\t\tp.n = vec3(0,1,0);\n\t\tp.d = -1.0;\t\n\t\ti = ray_plane(r, p);\n\t\tif( i.t < t )\n\t\t{\n\t\t\tres.id = ID_PLANE;\n\t\t\tres.p = i.p;\n\t\t\tres.n = i.n;\n\t\t\tres.e = r.d;\t\t\n\t\t\tres.a = texture(iChannel0, i.p.xz*0.25).rgb;\n\t\t\tt = i.t;\n\t\t}\n\t}\n\t\n\treturn res;\n}\n\nvec3 evaluate(surface surf)\n{\n\tvec3 res = surf.a;\n\t//\tTODO: evaluate materials\n\treturn res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\t\n\t\n\tray r;\n\tr.o = vec3(2.0 * cos(15.0+iTime*0.2), \n\t\t\t   0.25 + sin(5.0+iTime*0.05), \n\t\t\t   4.0 * sin(iTime*0.1));\t\n\tr.d = vec3(uv*2.0 - 1.0, 1.0);\n\tr.d.x *= iResolution.x / iResolution.y;\n\tr.d = look_at(r.o, vec3(0.0)) * normalize(r.d);\n\t\t\t\n\tint num_bounces = 0;\n\tconst int max_bounces = 3;\n\tsurface surfaces[max_bounces];\t\n\tfor(int i=0; i<max_bounces; ++i )\n\t{\n\t\t++num_bounces;\n\t\tsurface surf = raytrace(r);\n\t\tsurfaces[i] = surf;\n\t\tif( surf.id == ID_ENV )\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tr.d = reflect(surf.e, surf.n);\n\t\t\tr.o = surf.p + r.d*0.001;\n\t\t\t\n\t\t}\n\t}\n\t\n\tvec3 res = vec3(0);\n\tfor(int i=max_bounces-1; i>=0; --i)\n\t{\n\t\tfloat f = pow(1.0-max(0.0, dot(-surfaces[i].e, surfaces[i].n)), 4.0);\n\t\tres = mix(evaluate(surfaces[i]), res, f);\n\t}\n\t\n\tfragColor = vec4(res, 1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MssGRf","date":"1376432135","viewed":400,"name":"plastic","username":"yo","description":"raytracing some spheres and a plane","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","sphere","plane"],"hasliked":0,"parentid":"","parentname":""}}