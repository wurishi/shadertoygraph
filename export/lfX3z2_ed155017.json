{"ver":"0.1","info":{"id":"lfX3z2","date":"1703259128","viewed":75,"name":"colorful journey","username":"nayk","description":"neon,colorful,rotate,copy,stars\ncopypast and combination","likes":2,"published":1,"flags":1,"usePreview":0,"tags":["colorful","rotate","stars","copy","neon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*originals https://www.shadertoy.com/view/lslyRn https://www.shadertoy.com/view/DlycWR https://www.shadertoy.com/view/Mcs3WM https://www.shadertoy.com/view/clVyR1*/\n\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n#define N  120\n#define PI 3.141593\n\nfloat circle(vec2 p, float r) {\n    return smoothstep(.1, .0, abs(length(p) - r));\n}\n\nmat2 rot(float t) {\n    return mat2(cos(t), -sin(t), sin(t), cos(t));\n}\n\n\nfloat sdBox(vec3 p, vec3 b) {\n    return length(max(abs(p) - b, 0.));\n}\n\nvec2 map(vec3 p) {\n    vec3 p0 = p;\n    p.z -= iTime * 2.;\n   \n\n    // fold\n    for (int i = 0; i < 4; i++) {\n        p = abs(p);\n        p += sin(1. + float(i) * 11.);\n        p.xy *= rot(3.141593 / 4.); // 45deg\n        p *= 1.1;\n    }    \n\n    // repeat\n    p = mod(p + vec3(2, 2, 0), 4.) - 2.;        \n\n    float d = 999.;    \n    \n    // box\n    d = min(d, sdBox(p - vec3(1, 0, 0), vec3(0.1, 1.1, 0.1)));    \n    d = min(d, sdBox(p + vec3(1, 0, 0), vec3(0.1, 1.1, 0.1)));    \n    d = min(d, sdBox(p - vec3(0, 1, 0), vec3(1.1, 0.1, 0.1)));        \n    d = min(d, sdBox(p + vec3(0, 1, 0), vec3(1.1, 0.1, 0.1))); \n\n    return vec2(d, 0);\n}\n\nvec3 getNormal(vec3 p) {\n    vec2 d = vec2(0, 1) * 0.0001;\n    return normalize(vec3(\n       (map(p + d.yxx) - map(p - d.yxx)).x,\n       (map(p + d.xyx) - map(p - d.xyx)).x,\n       (map(p + d.xxy) - map(p - d.xxy)).x\n    ));       \n}\n\nfloat hash(vec2 p) {\n    return fract(sin(dot(p, vec2(8389., 8939.))) * 498.);\n}\n#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam; // the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.03,1.);\t\n}\nfloat cheap_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,1.);\n\tfloat time=iTime*speed+.25;\n\n\t//mouse rotation\n\t vec2 p2 = uv * 2. ;       \n    p2.x *= iResolution.x / iResolution.y;\n    \n    vec2 dist = mix(vec2(0), vec2(hash(p2), hash(p2+ 1.)) * 2. - 1., pow(length(p2) * 0.5, 2.) * 0.08);\n\n    vec3 ro = vec3(0, 0, 5);\n    vec3 rd = normalize(vec3(p2 + dist, -1. + 0.2 * length(p2)));\n    \n    vec3 rp;\n      vec2 p3 = uv * 1.;\n    p3.x *= iResolution.x / iResolution.y;\n    p3 *= 2.;\n    \n    float a = atan(p3.y, p3.x);    \n\n    vec3 col2;\n   \n\n    for (int i = 0; i < N; i++) {\n        float fi = float(i);\n        float t = fi / float(N);\n        float aa = (t + iTime / 12.) * 2. * PI;\n        \n        float size = .3 + sin(t * 6.* PI) * .1;\n    \n    \n        float a1 = -iTime * PI / 3. + aa;       \n        a1 += sin(length(p3) * 3. + iTime * PI / 2.) * 0.3;\n        vec2 c1 = vec2(cos(a1), sin(a1));\n        \n        float a2 = aa * 4.;            \n        vec2 c2 = vec2(cos(a2), sin(a2)) * 0.3 + c1;\n        col2.r += .001 / abs(length(p3 - c2) - size);        \n        col2.g += .0013 / abs(length(p3 - c2) - size * 1.05);        \n        col2.b += .0015 / abs(length(p3 - c2) - size * 1.09);                \n    }\n    vec4 O =fragColor;\n    vec2 C =fragCoord;\n    O=vec4(0);\n    vec3 p,q,r=iResolution,\n    d=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<110.;\n        O.xyz+=mix(vec3(1),H(g*.1),sin(.8))*1./e/8e3\n    )\n    {\n        p=g*d;\n        p.z+=-iTime*0.5;\n        a=10.;\n        p=mod(p-a,a*2.)-a;\n        s=4.;\n        for(int i=0;i++<8;){\n            p=.3-abs(p);\n            \n            p.x<p.z?p=p.zyx:p;\n            p.z<p.y?p=p.xzy:p;\n            p.y<p.x?p=p.zyx:p;\n             p.z<p.y?p=p.xzy:p;\n          p.x<p.z?p=p.zyx:p;\n          \n            s*=e=1.4+sin(iTime*.234)*.1;\n            p=abs(p)*e-\n                vec3(\n                    3.+cos(iTime*.3+.5*cos(iTime*.3))*3.,\n                    20,\n                    3.+cos(iTime*.5)*5.\n                 )+col2;\n         }\n       //  g+=e=length(p.yz)/s;\n         g+=e=length(p.yx)/s;\n    }\n    vec2 hit;\n    float t;\n\n    vec3 col;\n\n    for (int i = 0; i < 120; i++) {\n        rp = ro + rd * t;\n        hit = map(rp);\n        \n        if (hit.x < 0.001) {\n            vec3 n = getNormal(rp);\n            if (hit.y == 0.) {\n                float x = sin(iTime * 3.141593) * 0.5 + 0.5;\n                float y = sin(rp.z + iTime * 3.141593 / 2.) * 0.5 + 0.5; \n                col = mix(vec3(1), vec3(x, 0, 0), y) - float(i)*col2 * 0.005 - t * 0.02;\n            }\n            break;\n        }\n        \n        t += hit.x * 0.4;\n    }\n      uv *= 2.0 * ( cos(iTime * 2.0) -2.5);\n    \n    // anim between 0.9 - 1.1\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;    \n\n    \n\tvec3 from=vec3(1.,.5,0.5)*O.xyz;\n\tfrom+=vec3(time*2.,time,-2.);\ndir+=col;\n\t\n\tmainVR(fragColor, fragCoord, from, dir);\t\n    fragColor*= vec4(cheap_star(uv,anim) * vec3(0.55,0.52,0.535), 1.0);\n     fragColor*= vec4(O.xyz, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}