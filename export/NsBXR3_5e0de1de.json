{"ver":"0.1","info":{"id":"NsBXR3","date":"1620648167","viewed":341,"name":"Orbital CA","username":"paniq","description":"a cellular automaton built from orbit interactions. various modes supported in code. see https://twitter.com/leonard_ritter/status/1391716571307970562","likes":4,"published":3,"flags":48,"usePreview":0,"tags":["cellular","spin","automaton","orbital"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 aspect_fix = vec2(1.0);//vec2(0.5,0.5);\n#ifdef RULE110\n    fragColor = vec4(vec3(texelFetch(iChannel0, ivec2(fragCoord * aspect_fix), 0).r), 1.0);\n#else\n    fragColor = vec4(texture(iChannel0, (fragCoord / iResolution.xy) * aspect_fix).rgb, 1.0);\n#endif\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n\n#ifdef RULE110\nfloat rule110(float v00, float v10, float v01, float v11) {\n    int i00 = (v00 > 0.5)?1:0;\n    int i10 = (v10 > 0.5)?1:0;\n    int i01 = (v01 > 0.5)?1:0;\n    int i11 = (v11 > 0.5)?1:0;\n    int code = (i11 << 3) | (i10 << 2) | (i01 << 1) | i00;\n    // good codes:\n    // 38550 (xor 3)   \n    // 21930 (diagonal xor)\n    //   938 (diagonal blocking xor 1)\n    // 16298 (diagonal blocking xor 2)\n    // 22270 (rule 110 analog A)\n    // 32510 (rule 110 analog B)   \n    // 49212 (add 2 w carry select)\n    // 33598 (octagonal ornaments)\n    // 32360 (entropy pockets, try with 83% black)\n    // 27308 (maxwell's demon, has gliders and glider guns)\n    // 48700 (diagonal roads)\n    // 48956 (city generator)\n    // 43944 (self-assembling plaid canals)\n    // 48744 (entropy worms & spinners)\n    //   957 (critters by margolus/toffoli)\n    // 43496 (billiard ball machine by fredkin - this one's broken)\n    // 10479 (motherboard)\n    // 43798 (self-erasing rubberbands)\n    // 42330 (binary tree curtain)\n    // 44588 (new year's eve)   \n    // 43777 (c00?c11:(!(c01|c10)))    \n#if 0 // pattern construction kit\n    const int rule =\n    //00          00          10          10\n    //00          10          00          10\n     (1 <<  0) | (0 <<  1) | (1 <<  2) | (1 <<  3) |\n    //00          00          10          10\n    //01          11          01          11\n     (1 <<  4) | (1 <<  5) | (0 <<  6) | (1 <<  7) |\n    //01          01          11          11\n    //00          10          00          10\n     (1 <<  8) | (1 <<  9) | (0 << 10) | (0 << 11) |\n    //01          01          11          11\n    //01          11          01          11\n     (0 << 12) | (0 << 13) | (0 << 14) | (0 << 15);\n    return float((rule >> code) & 1);\n#else\n    return float((48956 >> code) & 1);\n#endif\n}\n#endif\n\nivec2 moduv(ivec2 uv) {\n    ivec2 sz = ivec2(iResolution.xy);\n    return (uv + sz) % sz;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 uv = ivec2(fragCoord);\n    vec4 n00 = vec4(0.0);\n    if (iFrame == 0 || keyDown(K_BACKSPACE)) {\n        vec3 h = hash32(fragCoord + iTime);\n#ifdef RULE110\n        //n00 = vec4(step(0.9995,h), 1.0);\n        n00 = vec4(step(0.999,h), 1.0);\n#else\n        /*\n        if (uv == ivec2(iResolution.xy/2.0 * vec2(1.0,1.0/sqrt(3.0))))\n            n00 = vec4(vec3(10000.0), 1.0);*/\n        n00 = vec4(step(0.999,h)*400.0, 1.0);\n#endif\n    } else {\n        n00 = texelFetch(iChannel0, uv, 0);\n        int d = (iFrame & 1) * 2 - 1;\n        int dx = d * ((uv.x & 1) * 2 - 1);\n        int dy = d * ((uv.y & 1) * 2 - 1);\n        \n        vec4 n11 = texelFetch(iChannel0, moduv(uv + ivec2(dx, dy)), 0);\n        vec4 n10 = texelFetch(iChannel0, moduv(uv + ivec2(dx, 0)), 0);\n        vec4 n01 = texelFetch(iChannel0, moduv(uv + ivec2(0, dy)), 0);\n#ifdef RULE110        \n        n00 = vec4(rule110(n00.r,n10.r,n01.r,n11.r), rule110(n00.g,n10.g,n01.g,n11.g), rule110(n00.b,n10.b,n01.b,n11.b), 1.0);\n#else        \n        n00 = (n00 + n01 + n10 + n11) / 4.0;\n#endif        \n    }\n    fragColor = n00;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\n#define RULE110\n#define SKIP_ODD\n\n// from https://www.shadertoy.com/view/4djSRW\nvec3 hash32(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\n// from https://www.shadertoy.com/view/llySRh\n\n// FYI: LEFT:37  UP:38  RIGHT:39  DOWN:40   PAGEUP:33  PAGEDOWN:34  END : 35  HOME: 36\n// Modifiers: SHIFT: 16 CTRL: 17 ALT: 18\n// Advice:  Mode: keyToggle(key)  Action: keydown(key)+keyclick(modifier)\n#define keyToggle(ascii)  ( texelFetch(iChannel1,ivec2(ascii,2),0).x > 0.)\n#define keyDown(ascii)    ( texelFetch(iChannel1,ivec2(ascii,1),0).x > 0.)\n#define keyClick(ascii)   ( texelFetch(iChannel1,ivec2(ascii,0),0).x > 0.)\n\n#define shift             ( texelFetch(iChannel1,ivec2(16,0),0).x  > 0.)\n#define ctrl              ( texelFetch(iChannel1,ivec2(17,0),0).x  > 0.)\n#define alt               ( texelFetch(iChannel1,ivec2(18,0),0).x  > 0.)\n#define modifier          ( int(shift) +2*int(ctrl) + 4*int(alt) )\n\n#define K_BACKSPACE 8\n\n\n\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 a = texelFetch(iChannel0, ivec2(fragCoord), 0);\n#ifdef SKIP_ODD\n    vec4 b = texelFetch(iChannel1, ivec2(fragCoord), 0);\n    if ((iFrame & 1) == 0)\n        fragColor = a;\n    else\n        fragColor = b;\n#else\n    fragColor = a;\n#endif\n}","name":"Buffer B","description":"","type":"buffer"}]}