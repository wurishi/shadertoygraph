{"ver":"0.1","info":{"id":"XlSBRt","date":"1516764729","viewed":236,"name":"rgb depart","username":"someHui","description":"a simple RBG separation shader for test","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["rgb"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 textureCoordinate = fragCoord.xy / iResolution.xy;\n    float lastPercentRadius =(1.0+sin(iTime))/2.;//0 to 1\n\tfloat lastPercentRotate = (1.0+sin(iTime))/2.;//0 to 1\n    float glRadius = 0.1 * lastPercentRadius;\n    float glRadian = 3.1415926 * 2.0 * lastPercentRotate;\n    float w = 3.1415926 * 2.0 / 3.0;\n    float xScale = 1.0;\n    float yScale = 1.0;\n    if(iResolution.x > iResolution.x){\n        xScale = iResolution.y / iResolution.x;\n    }else{\n        yScale = iResolution.x / iResolution.y;\n    }\n    xScale *= glRadius;\n    yScale *= glRadius;\n    vec2 gOffset = vec2(cos(glRadian + w) * xScale,sin(glRadian + w) * yScale);\n    vec2 rOffset = vec2(cos(glRadian - w) * xScale,sin(glRadian - w) * yScale);\n    vec2 bOffset = vec2(cos(glRadian) * xScale,sin(glRadian) * yScale);\n    \n\thighp vec2 rC = textureCoordinate + rOffset;\n                    lowp float rStep = step(0.0,rC.x) * (1.0-step(1.0,rC.x)) * step(0.0,rC.y) * (1.0-step(1.0,rC.y));\n                    \n                    highp vec2 gC = textureCoordinate + gOffset;\n                    lowp float gStep = step(0.0,gC.x) * (1.0-step(1.0,gC.x)) * step(0.0,gC.y) * (1.0-step(1.0,gC.y));\n                    \n                    highp vec2 bC = textureCoordinate + bOffset;\n                    lowp float bStep = step(0.0,bC.x) * (1.0-step(1.0,bC.x)) * step(0.0,bC.y) * (1.0-step(1.0,bC.y));\n                    \n                    lowp float rColor = texture(iChannel0,textureCoordinate + rOffset).r * rStep ;\n                    lowp float gColor = texture(iChannel0,textureCoordinate + gOffset).g * gStep ;\n                    lowp float bColor = texture(iChannel0,textureCoordinate + bOffset).b * bStep ;\n                    fragColor = vec4(rColor,gColor,bColor,1.0);\n}","name":"Image","description":"","type":"image"}]}