{"ver":"0.1","info":{"id":"NdGBRR","date":"1657501221","viewed":158,"name":"Looping Cubes","username":"westgarthb","description":"Looping gif of animated cube zoom","likes":16,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","sdf","loop"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"int i;\nfloat time_var;\nfloat delay = 2.740;\nfloat scale = 1.0;\nfloat power = 1.3;\nfloat grow = 0.725;\nvec3 rotateX(vec3 p, float theta)\n{\n    mat3 rotation = mat3(1.0, 0.0, 0.0,\n                        0.0, cos(theta), sin(theta),\n                        0.0, -sin(theta), cos(theta));\n    return rotation * p;\n}\n\nvec3 rotateY(vec3 p, float theta)\n{\n    mat3 rotation = mat3(cos(theta), 0.0, -sin(theta),\n                        0.0, 1.0, 0.0,\n                        sin(theta), 0.0, cos(theta));\n    return rotation * p;\n}\n\nvec3 rotateZ(vec3 p, float theta)\n{\n    mat3 rotation = mat3(cos(theta), sin(theta), 0.0,\n                        -sin(theta), cos(theta), 0.0,\n                        0.0, 0.0, 1.0);\n    return rotation * p;\n}\n\n\nvec2 sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs( p ) - b;\n  float max_arg =  max(q.x,max(q.y,q.z));\n  float d = length(max(q,0.0)) + min(max_arg,0.0);\n  return vec2(d, 0.3*float(max_arg==q.x) + 0.6*float(max_arg==q.y) + 0.9*float(max_arg==q.z));\n}\n\nvec3 mainTransform(vec3 p)\n{\n    float ang = 0.1*(2.74*smoothstep(0.0,2.9,time_var)-(delay*float(i+1)));\n    p = rotateY(rotateZ(p / (grow*float(i==0)*pow(time_var, power)+scale), ang), ang);\n    p = rotateX(p, ang);\n    return  p;\n}\n\nvec3 transform0(vec3 p)\n{\n    \n    p = rotateZ(rotateX(p / (grow*float(i==0)*pow(time_var, power)+scale)+vec3(3.0, 1.0, 2.0), 0.2), 0.3-(time_var-(delay*float(i+1)))*0.5);\n\n    return  p;\n}\n\nvec3 transform1(vec3 p)\n{\n    p = rotateX(rotateY(p / (grow*float(i==0)*pow(time_var, power)+scale)+vec3(-3.0, 2.0, 5.0),-0.2-(time_var-(delay*float(i+1)))), -0.4);\n\n    return p;\n}\n\nvec3 transform2(vec3 p)\n{\n    p = rotateX(rotateY(p / (grow*float(i==0)*pow(time_var, power)+scale)+vec3(2.0, -3.3, 4.0),0.9+0.5*(time_var-(delay*float(i+1)))), -0.4);\n\n    return p;\n}\n\nvec3 transform3(vec3 p)\n{\n    return rotateX(rotateY(p / (0.725*float(i==0)*pow(time_var, 1.3)+scale)+vec3(-1.8, -1.3, 2.0),1.1+0.5*(time_var-(delay*float(i+1)))), -0.4);\n}\n\nfloat sdBoxFrame( vec3 p, vec3 b, float e )\n{\n       p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\n\nvec2 map(vec3 pos)\n{\n    \n    vec2 d = sdBox(mainTransform(pos) , vec3(0.89, 0.5, 0.5));\n    vec2 d2 = sdBox(transform0(pos) , vec3(0.5, 0.5, 0.5));\n    vec2 d3 = sdBox(transform1(pos), vec3(1.5, 1.5, 1.5));\n    vec2 d4 = sdBox(transform2(pos), vec3(1.0, 1.0, 1.0));\n    vec2 d5 = sdBox(transform3(pos), vec3(0.3, 0.3, 0.3));\n    \n    float m = min(d.x, min(d2.x, min(d3.x, min(d4.x, d5.x))));\n    \n    if(abs(m - d.x) < 0.01)\n        return vec2(d.x, d.y+10.0);\n        \n    else if(abs(m - d2.x) < 0.01)\n        return vec2(d2.x, d2.y+2.0);\n        \n    else if(abs(m - d4.x) < 0.01)\n        return vec2(d4.x, d4.y+3.0);\n        \n    else if(abs(m - d5.x) < 0.01)\n        return vec2(d5.x, d5.y+4.0);\n        \n    return vec2(d3);\n}\n\nvec3 calcNormal(in vec3 pos)\n{\n    vec2 e = vec2(0.0001, 0.0);\n    return normalize( \n        vec3(map(pos+e.xyy).x-map(pos-e.xyy).x,\n             map(pos+e.yxy).x-map(pos-e.yxy).x,\n             map(pos+e.yyx).x-map(pos-e.yyx).x) \n    );\n    \n}\n\nvec2 castRay(in vec3 ro, vec3 rd)\n{\n    float t = 0.0;\n    float id = 0.0;\n    for(int i = 0; i < 200; i++)\n    {\n        vec3 pos = ro + t*rd;\n        vec2 data = map(pos);\n        float h = data.x;\n        id = data.y;\n        if(abs(h) < 0.001) break;\n        t += h;\n        if(h > 40.0) break;\n        \n    }\n    if(t > 40.0) t = -1.0;\n    return vec2(t, id);\n}\n\nvec4 getPos(vec3 p)\n{\n    vec3 ro = vec3(0.0, 0.0, 4.63);\n    vec3 ta = vec3(0.0,0.0,1.0);\n    \n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0,1,0)) );\n    vec3 vv = normalize( cross(uu,ww) );\n    \n    vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n    vec2 data = castRay(ro, rd);\n    float t = data.x;\n    \n    vec3 pos;\n    if(t > 0.0)\n    {\n        pos = ro + t*rd;\n        return vec4(pos, data.y);\n    }\n    return vec4(pos, -1.0);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord - iResolution.xy)/iResolution.y;\n    \n    time_var = iTime - (delay*float(int(iTime/delay)));\n    vec3 col = vec3(0.7);\n    i = 0;\n    for(; i < 4; i++)\n    {\n        vec4 posData = getPos(vec3(p, float(i==0)));\n        \n\n        if(posData.w > -0.9)\n        {\n            vec3 pos = posData.xyz;\n            vec3 pos_rotate = mainTransform(pos);\n\n\n            if(posData.w > 10.6)\n            {\n                p = pos_rotate.xy*(2.0);\n            }\n            else\n            {\n                vec3 base = vec3(0.2, 0.7, 0.355);\n                base = mix(base, vec3(0.3, 0.4, 0.7), float(posData.w > 1.1));\n                vec3 back = mix(vec3(0.95, 0.35, 0.355), vec3(0.7, 0.7, 0.355), 1.0 - abs(float(int(iTime/delay)%2 - i%2)));\n                \n                base = mix(base, vec3(0.7, 0.35, 0.6), float(posData.w > 3.1));\n                base = mix(base, vec3(0.3, 0.65, 0.6), float(posData.w > 4.1));\n                \n                base = mix(base, back, float(posData.w > 9.1));\n                col = smoothstep(0.0, 1.0, fract(posData.w)*fract(posData.w))*1.5 * base;\n                break;\n            }\n                \n        }\n        else\n        {\n            col = mix(vec3(0.95, 0.35, 0.355), vec3(0.7, 0.7, 0.355), abs(float(int(iTime/delay)%2 - i%2)));\n            break;\n        }\n    }\n    \n    \n    \n\n    col = pow( col, vec3(0.4545) );\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}