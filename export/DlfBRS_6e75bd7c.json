{"ver":"0.1","info":{"id":"DlfBRS","date":"1693069797","viewed":178,"name":"Gyroid bath With Refraction","username":"Oman395","description":"Modified version of my gyroid bath shader that implements (not physically accurate, only includes air-glass transition without glass-air transition, and normals are weird, but whenever I try making it more accurate it looks worse. Still, p happy with it!","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["raymarching","refraction","gyroid","infill","3dprinter"],"hasliked":0,"parentid":"mlsBDn","parentname":"Gyroid Bath"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float getDist(vec3 pos) { return (sin(pos.x) * cos(pos.y) + sin(pos.y) * cos(pos.z) + sin(pos.z) * cos(pos.x)) * 0.5; }\n\nvec3 getNormal(vec3 p) {\n    const vec2 EPSILON = vec2(0.0001,0);\n    vec3 a = vec3(getDist(p + EPSILON.xyy), getDist(p + EPSILON.yxy), getDist(p + EPSILON.yyx));\n    vec3 b = vec3(getDist(p - EPSILON.xyy), getDist(p - EPSILON.yxy), getDist(p - EPSILON.yyx));\n    return normalize(a - b);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 pos = vec3((uv - 0.5) * 2.0 * 0.7, iTime * 0.5), dir = normalize(vec3(pos.xy,0.75));\n    pos.xy += (3.0 * 3.14159265 / 4.0) * vec2(sin(pos.z), cos(pos.z)) - vec2(3.14159265 / 2.0, 0);\n    int cnt = 0, passed = 0;\n    for(int i = 0; i < 256; i++) {\n        float d = abs(getDist(pos));\n        if(cnt != 0) cnt--;\n        if(d <= 0.0001 && passed < 2 && cnt == 0) {\n            cnt = 20, passed++;\n            dir = refract(dir, getNormal(pos), 1.0 / 1.4);\n            pos += dir * 0.1 * vec3(1, iResolution.y / iResolution.x, 1);\n        } else if(d <= 0.0001 && cnt == 0) break;\n        pos += dir * d * vec3(1, iResolution.y / iResolution.x, 1);\n    }\n    float c = 16.0 / (pos.z - iTime * 0.5 + 16.0);\n    fragColor = vec4(0.1, 0.7, 1, 1) * c + vec4(0,0.1,0.1,1) * (1.0 - c);\n}","name":"Image","description":"","type":"image"}]}