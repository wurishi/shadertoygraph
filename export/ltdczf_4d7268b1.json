{"ver":"0.1","info":{"id":"ltdczf","date":"1533553021","viewed":200,"name":"Simple Distortion - underwater","username":"luka712","description":"Just showcase for simple distortion, which can be used for underwater levels","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["distortion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define DISTORTION_AMOUNT 0.01\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n \n    uv.x *= iResolution.x / iResolution.y;\n    \n    float X = uv.x * 6. + iTime;\n    float Y = uv.y * 6. + iTime;\n    \n    uv.x += cos(X + Y) * DISTORTION_AMOUNT * cos(Y);\n    uv.y += sin(X + Y) * DISTORTION_AMOUNT * sin(Y);\n\n    // Output to screen\n    fragColor = texture(iChannel0,uv);\n}","name":"Image","description":"","type":"image"}]}