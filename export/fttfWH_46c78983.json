{"ver":"0.1","info":{"id":"fttfWH","date":"1668293160","viewed":99,"name":"Rational rings","username":"zenzicubic","description":"Roger's rational rings from http://paulbourke.net/fractals/roger_rational/","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["fractal","complex","rational"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// parameters for the render\n#define MAX 300\n#define BAIL 1000.0\n#define PI 3.14159265358\n#define NUMCOLS 4\n\n// colors\nconst vec2 ONE = vec2(1.0, 0.0);\nvec3 col1 = vec3(239. / 255., 229. / 255., 220. / 255.);\nvec3 col2 = vec3(0.071,0.173,0.204);\nfloat SCALE = 0.;\n\nvec2 cmul(vec2 a, vec2 b) \n{\n    return vec2(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x);\n}\n\nint testAt(vec2 z)\n{\n    // test if a point falls within the Julia set by applying the map\n    int i = 0;\n    while (i < MAX) {\n        z = cmul(z,z)+vec2(length(z),1.) / (1.+length(z));\n        if (dot(z, z) > BAIL) {\n            break;\n        }\n        i ++;\n    }\n    return i;\n}\n\nvec2 map(vec2 fragCoord)\n{\n    // map UV coords to mandelbrot coords\n    vec2 pos = fragCoord/iResolution.xy;\n    float ratio = iResolution.x / iResolution.y;\n    \n    vec2 z = (2.0 * SCALE * pos) - SCALE;\n    z.x *= ratio;\n    \n    return z;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // get positions\n    SCALE = 1./iTime;\n    vec2 z = map(fragCoord);\n    vec2 mPos = vec2(iMouse.x, iMouse.y);\n    vec2 c = map(mPos);\n    \n    // test and color\n    int i = testAt(z);\n    float f = float(i) / float(MAX);\n    \n    vec3 col = mix(col1, col2, sin(2.0*PI*f)+0.5);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}