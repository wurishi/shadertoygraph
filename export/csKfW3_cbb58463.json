{"ver":"0.1","info":{"id":"csKfW3","date":"1698716184","viewed":104,"name":"Half Lambert(Energy-Conserving)","username":"Wunkolo","description":"| NdotL | Half Lambert | Half Lambert(Energy-Conserving) |\n\nDemonstration of the energy-conserving half-lambert function that includes the additional squaring after the linear remapping that many implementations forget to do.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["npr","halflambert"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI     3.14159265\n\nfloat HalfLambert(float NdotL)\n{\n    return NdotL * 0.5 + 0.5;\n}\n\n// Energy conserving half-lambert, based on the original Valve\n// definition:\n// https://developer.valvesoftware.com/wiki/Half_Lambert\n// https://diffuse133.rssing.com/chan-36853166/article2.html\n// https://diffuse133.rssing.com/chan-36853166/article3.html?zx=813\nfloat HalfLambertEnergyConserving(float NdotL)\n{\n    float HalfLambert = (NdotL * 0.5 + 0.5);\n    return HalfLambert * HalfLambert;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 UV = fragCoord/iResolution.xy;\n    \n    float NdotL = cos(mix(-PI, PI, UV.y));\n    \n    float Diffuse = NdotL;\n    \n    if(UV.x >= 2.0/3.0)\n    {\n        Diffuse = HalfLambertEnergyConserving(NdotL);\n    }\n    else if(UV.x >= 1.0/3.0)\n    {\n        Diffuse = HalfLambert(NdotL);\n    }\n\n    // Linear to sRGB\n    Diffuse = pow(Diffuse, 1.0/2.2);\n\n    fragColor = vec4(Diffuse, Diffuse, Diffuse,1.0);\n}","name":"Image","description":"","type":"image"}]}