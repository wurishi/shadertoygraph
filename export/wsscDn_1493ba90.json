{"ver":"0.1","info":{"id":"wsscDn","date":"1584600263","viewed":283,"name":"Tree in space","username":"rory618","description":"Hacking together two flame fractals from deviantart:\nhttps://www.deviantart.com/bast4cats/art/Peach-Pythagoras-493059415\nhttps://www.deviantart.com/bezo97/art/Landing-435873365","likes":26,"published":1,"flags":48,"usePreview":0,"tags":["3d","fractal","flame","particles","chaos","montecarlo","flam"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 rgb2hsl( vec3 rgbArr ) {\n\tfloat maxColor = max(rgbArr.r,max(rgbArr.g,rgbArr.b));\n    float minColor = min(rgbArr.r,min(rgbArr.g,rgbArr.b));\n    float L = (maxColor + minColor) / 2. ;\n    float S = 0.;\n    float H = 0.;\n    if(maxColor != minColor){\n\t\tif(L < 0.5){\n\t        S = (maxColor - minColor) / (maxColor + minColor);\n\t    } else{\n\t        S = (maxColor - minColor) / (2.0 - maxColor - minColor);\n\t    }\n\t    if(rgbArr.r == maxColor){\n\t        H = (rgbArr.g-rgbArr.b) / (maxColor - minColor);\n\t    } else if (rgbArr.g == maxColor){\n\t        H = 2.0 + (rgbArr.b - rgbArr.r) / (maxColor - minColor);\n\t    } else {\n\t        H = 4.0 + (rgbArr.r - rgbArr.g) / (maxColor - minColor);\n\t    }\n\t}\n\t\n\tL = L * 100.0;\n\tS = S * 100.0;\n\tH = H * 60.0;\n\tif(H<0.0){\n\t    H += 360.0;\n\t}\n\treturn vec3(H,S,L);\n}\n\nfloat hue2rgb(float p, float q, float t){\n\tif(t < 0.) t += 1.;\n\tif(t > 1.) t -= 1.;\n\tif(t < 1./6.) return p + (q - p) * 6. * t;\n\tif(t < 1./2.) return q;\n\tif(t < 2./3.) return p + (q - p) * (2./3. - t) * 6.;\n\treturn p;\n}\n\nvec3 hsl2rgb(float h, float s, float l){\n\tfloat r, g, b;\n\tif(s == 0.0){\n\t    r = l;\n        g = l;\n        b = l; // achromatic\n\t}else{\n\n\t    float q = l < 0.5 ? l * (1. + s) : l + s - l * s;\n\t    float p = 2. * l - q;\n\t    r = hue2rgb(p, q, h + 1./3.);\n\t    g = hue2rgb(p, q, h);\n\t    b = hue2rgb(p, q, h - 1./3.);\n\t}\n\n\treturn vec3(r, g, b);\n}\nvec3 makeVibrant(vec3 rgbArr,float hueShift,float satShift,float lightShift ) {\n\tvec3 hsl = rgb2hsl( rgbArr );\n\thsl[0] = mod( hsl[0] + hueShift, 360. );\n\thsl[1] = ( hsl[1] + ( max( satShift, 0. ) * 100. ) ) / ( abs( satShift ) + 1. );\n\thsl[2] = ( hsl[2] + ( max( lightShift, 0. ) * 100. ) ) / ( abs( lightShift ) + 1.);\n\treturn hsl2rgb( hsl[0]/360., hsl[1]/100., hsl[2]/100. );\n}\nvoid mainImage( out vec4 O, in vec2 I )\n{\n\tO = texture(iChannel2,I/R.xy);\n    if(texelFetch(iChannel0, ivec2(82,0),0).x<.5){\n        O.xyz = makeVibrant(O.xyz,0.,.1*brightness,.01);\n        float Z = texture(iChannel1,vec2(I/R.xy)).z;\n        O.w = log(O.w)/log(Z);\n        //O /= O.w/float(iFrame)*18./log(O.w);\n        O = pow(O*O.w-0.04,vec4(1./gamma));\n    } else {\n        if(iFrame%8!=7) discard;\n    }\n    //O.xyz = get_pallete(I.x/R.x);\n}\n\n\n\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float T;\n\n#define R iResolution\n#define F iFrame\n#define branches 6\n#define mIters 25.\n\n#define pi 3.14159\n#define R iResolution\n#define iR ivec3(R)\n#define uR uvec3(R)\n#define IHash3(x,y,z) IHash(int(x)^IHash(int(y)^IHash(int(z))))\n#define dot2(o) dot((o),(o))\n#define tx(ch,p,R) texelFetch(ch, Zmod(p,iR.xy),0)\n\n//Roboust/universal integer modulus function\n#define Zmod(x,y) (((x)+(y)+(y)+(y))-(((x)+(y)+(y)+(y))/(y))*(y))\n//#define Zmod(x,y) ((x+y*10)%y)\n\nint IHash(int a){\n\ta = (a ^ 61) ^ (a >> 16);\n\ta = a + (a << 3);\n\ta = a ^ (a >> 4);\n\ta = a * 0x27d4eb2d;\n\ta = a ^ (a >> 15);\n\treturn a;\n}\n\nfloat Hash(int a){\n\ta = (a ^ 61) ^ (a >> 16);\n\ta = a + (a << 3);\n\ta = a ^ (a >> 4);\n\ta = a * 0x27d4eb2d;\n\ta = a ^ (a >> 15);\n\treturn float(a) / float(0x7FFFFFFF);\n}\nvec4 rand4(int seed){\n    return vec4(Hash(seed^0x348593),\n                Hash(seed^0x8593D5),\n                Hash(seed^0x625384),\n                Hash(seed^0x253625));\n}\nvec3 rand3(int seed){\n    return vec3(Hash(seed^0x348593),\n                Hash(seed^0x8593D5),\n                Hash(seed^0x625384));\n}\nvec2 rand2(int seed){\n    return vec2(Hash(seed^0x348593),\n                Hash(seed^0x8593D5));\n}\n\n\nvec2 randn(vec2 randuniform){\n    vec2 r = randuniform;\n    r.x = sqrt(-2.*log(1e-9+abs(r.x)));\n    r.y *= 6.28318;\n    r = r.x*vec2(cos(r.y),sin(r.y));\n    return r;\n}\nvec2 randc(vec2 randuniform){\n    vec2 r = randuniform;\n    r.x = sqrt(r.x);\n    r.y *= 6.28318;\n    r = r.x*vec2(cos(r.y),sin(r.y));\n    return r;\n}\n\n\nstruct particle {\n    bool nil;\n    vec2 coord;\n    vec3 color;\n};\n    \nvec2 packParticle(particle p){\n    uvec2 px = uvec2(p.coord);\n    uvec3 c = uvec3(p.color * 7000. + 1000.);\n    uint n = uint(p.nil);\n    uint x = px.x & 0x7FFu;\n    uint y = px.y & 0x7FFu;\n    uint r = c.r & 0x1FFFu;\n    uint g = c.g & 0x1FFFu;\n    uint b = c.b & 0x1FFFu;\n    uint A = (b >> 9) | (g << 4) | (r << 17) | (n << 30);\n    uint B = (y) | (x << 11) | ((b & 0x1FFu) << 22);\n    return vec2(uintBitsToFloat(A),uintBitsToFloat(B));\n}\nparticle unpackParticle(vec2 p){\n    uint A = floatBitsToUint(p.x);\n    uint B = floatBitsToUint(p.y);\n    uint n = (A >> 30) & 0x1u;\n    uint r = (A >> 17) & 0x1FFFu;\n    uint g = (A >> 4) & 0x1FFFu;\n    uint b = ((B >> 22) & 0x1FFu) | ((A & 0xFu) << 9);\n    uint y = B & 0x7FFu;\n    uint x = (B >> 11) & 0x7FFu;\n    return particle(bool(n), vec2(x,y)+.5,(vec3(r,g,b)-1000.)/7000.);\n}\n\n#define mapping_iters 2\nvec2 forward_mapping(vec2 Z,vec3 R, int seed){\n    int p = int(R.x);\n    int q = int(R.y);\n    \n    int x=int(Z.x);\n    int y=int(Z.y);\n    \n    for(int i = 0; i < mapping_iters; i++){\n        x = Zmod(x + IHash(y^seed)%p,p);\n        y = Zmod(y + IHash(x^seed)%q,q);\n    }\n        \n    return vec2(x,y)+.5;\n    \n}\nvec2 reverse_mapping(vec2 Z,vec3 R, int seed){\n    \n    int p = int(R.x);\n    int q = int(R.y);\n    \n    int x=int(Z.x);\n    int y=int(Z.y);\n    \n    for(int i = 0; i < mapping_iters; i++){\n        x = Zmod(x - IHash(y^seed)%p,p);\n        y = Zmod(y - IHash(x^seed)%q,q);\n    }\n        \n    return vec2(x,y)+.5;\n}\n\nfloat score(particle p, vec2 I, vec3 R, int seed){\n    if(p.nil) return 1e6;\n    \n    vec2 Z = forward_mapping(p.coord, R, seed);\n    \n    vec2 D = Z-I;\n    D = mod(D+R.xy/2.,R.xy)-R.xy/2.;\n    return max(abs(D.x),abs(D.y));\n    \n}\n\n//Update ranking, save a list of two particle xy indices. O.xy is better particle, O.zw is a different not as good one\nvoid updateRank2x(particle n, inout vec4 O, inout float s0, inout float s1, vec2 I, vec3 R,int seed){\n    float sn = score(n,I,R,seed);\n    if(sn<s0){\n        //Shift down the line\n        s1=s0;\n        O.zw=O.xy;\n        s0=sn;\n        O.xy=packParticle(n);\n    } else if(sn<s1){\n        //Bump off the bottom one\n        s1=sn;\n        O.zw=packParticle(n);\n        \n    }\n}\n\n\n\n\nfloat Sqrt1pm1(float x)\n\t{\n\t\tif (-0.0625 < x && x < 0.0625)\n\t\t{\n\t\t\tfloat num = 0.;\n\t\t\tfloat den = 0.;\n\t\t\tnum += 1.0 / 32.;\n\t\t\tden += 1.0 / 256.;\n\t\t\tnum *= x;\n\t\t\tden *= x;\n\t\t\tnum += 5.0 / 16.;\n\t\t\tden += 5.0 / 32.;\n\t\t\tnum *= x;\n\t\t\tden *= x;\n\t\t\tnum += 3.0 / 4.;\n\t\t\tden += 15.0 / 16.;\n\t\t\tnum *= x;\n\t\t\tden *= x;\n\t\t\tnum += 1.0 / 2.;\n\t\t\tden += 7.0 / 4.;\n\t\t\tnum *= x;\n\t\t\tden *= x;\n\t\t\tden += 1.;\n\t\t\treturn num / den;\n\t\t}\n\n\t\treturn sqrt(1. + x) - 1.;\n\t}\n\nvec3 cylinder(vec3 x){\n    return vec3(sin(x.x),x.y,cos(x.x));\n}\nvec3 zcone(vec3 x){\n    return vec3(0,0,length(x.xy));\n}\nvec2 elliptic(vec2 x){\n    vec2 o;\n    float x2 = 2.*x.x;\n    float l = dot(x,x);\n    float u = l + x2;\n    float v = l - x2;\n    float xmaxm1 = 0.5 * (Sqrt1pm1(u) + Sqrt1pm1(v));\n    float a = x.x / (1. + xmaxm1);\n    float ssx = xmaxm1 < 0. ? 0. : sqrt(xmaxm1);\n    o.x = clamp(a, -1., 1.);\n\tif (x.y > 0.)\n\t\to.y = log(1.+xmaxm1 + ssx);\n\telse\n\t\to.y = -log(1.+xmaxm1 + ssx);\n\n\treturn o;\n    \n}\n\nvec2 bipolar(vec2 x, float m_S) {\n\t\tfloat x2y2 = dot(x,x);\n\t\tfloat t = x2y2 + 1.;\n\t\tfloat x2 = 2. * x.x;\n\t\tfloat y = 0.5 * atan(2. * x.y, x2y2 - 1.) + m_S;\n\n\t\tif (y > pi*2.)\n\t\t\ty = -pi*2. + mod(y + pi*2., pi*2.);\n\t\telse if (y < -pi*2.)\n\t\t\ty = pi*2. - mod(pi*2. - y, pi*2.);\n\n\t\tfloat f = t + x2;\n\t\tfloat g = t - x2;\n\n\t\tif ((g == 0.) || (f / g <= 0.))\n\t\t{\n\t\t\treturn x;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn vec2(pi/2. * log((t + x2) / (t - x2)), pi*2. * y);\n\t\t}\n\t}\n\nvec3 splits(vec3 x, vec2 m) {\n    vec3 o;\n    o.z=x.z;\n\t\tif (x.x >= 0.)\n\t\t\to.x = x.x + m.x;\n\t\telse\n\t\t\to.x = x.x - m.x;\n\n\t\tif (x.y >= 0.)\n\t\t\to.y = x.y + m.y;\n\t\telse\n\t\t\to.y = x.y - m.y;\n\n\treturn o;\n}\n\nvec3 bubble(vec3 x){\n    float denom = 0.25 * dot(x.xy,x.xy) + 1.;\n    return vec3(x.xy/denom,2./(denom)-1.);\n}\nvec3 spherical(vec3 x){\n    return vec3(x.xy/(1e-6+dot(x.xy,x.xy)),x.z);\n}\nvec3 spherical3D(vec3 x){\n    return vec3(x/(1e-6+dot(x.xyz,x.xyz)));\n}\nvec3 hyperbolic(vec3 x){\n    float a = atan(x.x, x.y);\n    float r = length(x.xy) + 1e-6;\n    return vec3(sin(a)/r,cos(a)*r,x.z);\n}\nvec2 julia(vec2 x, int seed){\n    float a = atan(x.y, x.x)/2.0;\n    if(Hash(seed)>.5) a += 3.14159;\n    float r = pow(dot(x,x), 0.25);\n    return vec2(r*cos(a),r*sin(a));\n}\n\nvec3 julia3D(vec3 x, int seed, float m_N){\n    float m_AbsN = abs(m_N);\n    float m_Cn = (1. / m_N - 1.) / 2.;\n\tfloat z = x.z / m_AbsN;\n\tfloat r = 1./pow(dot(x.xy,x.xy) + z*z, -m_Cn);\n\tfloat tmp = r * length(x.xy);\n\tfloat ang = (atan(x.y,x.x) + pi*2. * float(IHash(seed^0x6acb43d3 )%int(m_AbsN) ) ) / m_N;\n\treturn vec3(tmp * cos(ang),tmp * sin(ang),r * z);\n}\n\nvec3 julian(vec3 x, float power, float dist, int seed){\n    //return vec3(0);\n    //return Julia3D(x,seed,power);\n    float abspower = abs(power);\n    float cn = dist/power/2.;\n    float a = (atan(x.y,x.x) + pi*2. * float(IHash(seed^0x6acb43d3 )%int(abspower) ) ) / power;\n    \n    float r = pow(dot(x.xy,x.xy), cn);\n    return vec3(r*cos(a),r*sin(a),0);\n}\n\n\n\nint[] palette = int[] (0xF3CDB6,0xF7D2C9,0xF1CFD0,0xF4DDD7,0xF6DEDC,0xF6DEDC,0xF8E2D5,0xF7E5CD,0xF8DCD1,0xF5D8D2,0xF5D8D2,0xF8D8CD,0xF5DDC1,0xF2DAB4,0xF5DAAF,0xF5C3A2,0xECA893,0xE2938E,0xD37472,0xDD7454,0xDF6040,0xD65033,0xD44D30,0xD15033,0xCA5237,0xC25E2A,0xBB731E,0xBA872B,0xDA9F43,0xDF9858,0xE79758,0xE18F5F,0xE8875D,0xE38B67,0xEA9C6E,0xE5A87B,0xE0B684,0xF1D886,0xF1DC8D,0xEECF7F,0xE9BA72,0xDFA261,0xD88849,0xC76A3F,0xAD4426,0x98520C,0x9B5800,0x985C04,0x8B6304,0x977917,0xA08420,0xAD691E,0xB85416,0xD34C2E,0xD95838,0xD16D31,0xD3710E,0xBA6208,0xB15E02,0xBA6628,0xCD7047,0xDB7A67,0xE88280,0xEB9A96,0xECA498,0xF3B29E,0xF0A38F,0xE19C7F,0xD9966B,0xA6814A,0x8D532D,0x9E4116,0xA2421A,0xA54B0F,0xBD6825,0xD09C48,0xCDA04F,0xE4BC5D,0xE9CB73,0xF3E1A3,0xF1DDAA,0xF1D9BD,0xF8D8C3,0xEDDACB,0xEAC7C5,0xEAAAAA,0xE9998E,0xDF8165,0xDA7935,0xD28422,0xD67A17,0xCA7731,0xD98547,0xE79766,0xEDAC82,0xEBB591,0xF1BEA1,0xEFC7AE,0xE6BBB4,0xE7B7A9,0xE0AF91,0xDEA174,0xCC7E50,0x9F5D21,0x895324,0x8E5B0A,0x8F4A0F,0x933D00,0x924308,0x814B0F,0x7E4100,0x7D4400,0x704800,0x5B2E07,0x231E18,0x1B170E,0x181109,0x1E1206,0x210C09,0x2A120E,0x4D1E0A,0x6B2501,0x834B26,0xA77536,0xCB825F,0xDC9368,0xE4956E,0xE2A07D,0xE3A97B,0xE7B078,0xE2BB76,0xD4AF7A,0xDFA484,0xDCA68E,0xE29384,0xD68067,0xD27C41,0xCB711B,0xC86E18,0xA56B17,0xAF680C,0xF7E2E1,0xF6CDCB,0xF0B2A3,0xE5A287,0xDC996F,0xDA8F68,0xEA8D64,0xEE8977,0xEF978B,0xF1AEA6,0xEFB6AB,0xE9BCB6,0xE8B9A5,0xE5B69C,0xE9AC9A,0xE7AA98,0xEEB097,0xEDB896,0xE2BF99,0xE7C298,0xF2C4A2,0xE8D2A3,0xEECDBC,0xF3D8CD,0xF8E6D8,0xFFE7DE,0xFBE7E0,0xF7E4E0,0xF7E8E5,0xF7E9E6,0xF9E9EC,0xFCF2E8,0xFDF6EE,0xFDF6F0,0xFBFAFF,0xFEF2F4,0xF9EEEC,0xF9EEEC,0xFBE7E0,0xF7ECDA,0xF6EBD7,0xF5E8D8,0xFBE0CD,0xF9D5C9,0xF6D4C8,0xF8E4CB,0xF8E7CD,0xF3DEC9,0xF2D1C8,0xE7C4B0,0xE2B8A0,0xE0AC97,0xE29B85,0xD6826A,0xD76C66,0xD36854,0xD86B54,0xD37D64,0xDA9A6E,0xE2AD67,0xE2BA5B,0xDEB354,0xDCB250,0xDCA660,0xDC9A66,0xE3916B,0xE7A571,0xE1AD7D,0xE8AD85,0xF0AA88,0xF6AB96,0xF1AEA5,0xEDBEAE,0xF0BDBA,0xF2CAC0,0xEECEC1,0xF4D0AE,0xECB78D,0xE69E6E,0xD59349,0xA6872A,0x897A1D,0x815621,0x72432F,0x6C261A,0x83290E,0x991802,0xA02911,0xB13A22,0xD95A3A,0xD1704D,0xDE774A,0xE88059,0xE5926A,0xE0A482,0xE8B389,0xE8B38B,0xEFB788,0xEEC68B,0xECC894,0xE5B89B,0xDFA79A,0xDE9F98,0xE19794,0xE29689,0xDF8E70,0xE18959,0xDF8143,0xDD753E,0xE07338,0xE1733E,0xE58056,0xEA9872,0xE5AF89,0xE6B89E);\n\nfloat zoom = 0.204;\nfloat gamma = 4.0;\nfloat brightness = 4.0;\nbool d3d = false;\nfloat scale = 380.0;\nvec2 center = vec2(0.038, -1.38);\nvec2 size = vec2(731, 932);\n\nvoid iter(inout vec3 x, inout float col, inout int seed){\n    \n    if(mod(T,5.)>2.){\n    \n    float c0 = 1.231;\n    float c1 = 2.661;\n    float cs = 4.36;\n    float r = Hash(seed)*cs;\n    seed=IHash(seed);\n    if (r < c0){\n        col = mix(col,0.1,.1);\n        x.xy = x.xy*mat2(12.344136, 7.701489, -1.191402, 3.795162) + vec2(-4.124522, 10.610012);\n        vec3 x0 = vec3(0);\n        x0 += cylinder(x)*-0.075;\n        x = x0;\n        c0 = 1.; c1 = 3.; cs = 5.;\n    } else if (r < c1){\n        col = mix(col,0.13,.1);\n        x.xy = x.xy*mat2(0.758608, -0.636548, 0.636548, 0.758608) + vec2(-0.195338, -0.648838);\n        vec3 x0 = vec3(0);\n        x0 += x*0.7071;\n        x = x0;\n        c0 = 2.; c1 = 5.; cs = 8.;\n    } else {\n        col = mix(col,0.111,.1);\n        x.xy = x.xy*mat2(-0.819152, -0.573577, -0.573577, 0.819152) + vec2(0.224974, -1.052173);\n        vec3 x0 = vec3(0);\n        x0 += x*0.7071;\n        x = x0;\n        c0 = 0.; c1 = 3.; cs = 6.;\n    }\n    } else {\n        \n        zoom = 1.0;\n        gamma = 1.0;\n        brightness = 12.0217391304348;\n        d3d = false;\n        scale = 1185.69024;\n        center = vec2(.6, -.3);\n        size = vec2(1920, 1080);\n        \n        x.xy += center;\n        x /= 1.5;\n        \n        float r = Hash(seed)*6.1;\n        seed=IHash(seed);\n        if (r < 0.5){\n            col = col*0.5 + 0.0;\n            x.xy = mat2(1.0, 0.0, 0.0, 1.0) * x.xy + vec2(0.0, 0.0);\n            vec3 x0 = vec3(0);\n            x0 += julian(x,5.0,1.0,seed)*1.0;\n            x = x0;\n        } else if (r < 1.0){\n            col = col*0.5 + 0.04166666666666665;\n            x.xy = mat2(1.0, 0.0, 0.0, 1.0) * x.xy + vec2(1.0, -1.0);\n            vec3 x0 = vec3(0);\n            x0 += julian(x,4.0,1.0,seed)*1.0;\n            x = x0;\n        } else if (r < 1.5){\n            col = col*0.5 + 0.0833333333333335;\n            x.xy = mat2(1.0, 0.0, 0.0, 1.0) * x.xy + vec2(0.0, -1.0);\n            vec3 x0 = vec3(0);\n            x0 += julian(x,4.0,1.0,seed)*1.0;\n            x = x0;\n        } else if (r < 2.0){\n            col = col*0.5 + 0.125;\n            x.xy = mat2(1.0, 0.0, 0.0, 1.0) * x.xy + vec2(1.0, 0.0);\n            vec3 x0 = vec3(0);\n            x0 += julian(x,4.0,1.0,seed)*1.0;\n            x = x0;\n        } else if (r < 2.5){\n            col = col*0.5 + 0.1666666666666665;\n            x.xy = mat2(3.0, 0.0, 0.0, 3.0) * x.xy + vec2(1.0, 0.0);\n            vec3 x0 = vec3(0);\n            x0 += julian(x,4.0,1.0,seed)*1.0;\n            x = x0;\n        } else if (r < 3.0){\n            col = col*0.5 + 0.2083333333333335;\n            x.xy = mat2(3.0, 0.0, 0.0, 3.0) * x.xy + vec2(1.0, -1.0);\n            vec3 x0 = vec3(0);\n            x0 += julian(x,4.0,1.0,seed)*1.0;\n            x = x0;\n        } else if (r < 3.5){\n            col = col*0.5 + 0.25;\n            x.xy = mat2(3.0, 0.0, 0.0, 3.0) * x.xy + vec2(0.0, -1.0);\n            vec3 x0 = vec3(0);\n            x0 += julian(x,3.0,1.0,seed)*1.0;\n            x = x0;\n        } else if (r < 4.0){\n            col = col*0.5 + 0.2916666666666665;\n            x.xy = mat2(3.0, 0.0, 0.0, 3.0) * x.xy + vec2(0.0, 0.0);\n            vec3 x0 = vec3(0);\n            x0 += julian(x,4.0,1.0,seed)*1.0;\n            x = x0;\n        } else if (r < 4.5){\n            col = col*0.5 + 0.3333333333333335;\n            x.xy = mat2(-0.034637, 0.0, 0.0, -0.034637) * x.xy + vec2(1.0, 0.0);\n            vec3 x0 = vec3(0);\n            x0 += julian(x,5.0,1.0,seed)*1.0;\n            x = x0;\n        } else if (r < 5.0){\n            col = col*0.5 + 0.375;\n            x.xy = mat2(8.25, 0.0, 0.0, 8.25) * x.xy + vec2(1.0, -1.0);\n            vec3 x0 = vec3(0);\n            x0 += julian(x,2.0,1.0,seed)*1.0;\n            x = x0;\n        } else if (r < 5.5){\n            col = col*0.5 + 0.4166666666666665;\n            x.xy = mat2(8.25, 0.0, 0.0, 8.25) * x.xy + vec2(0.0, -1.0);\n            vec3 x0 = vec3(0);\n            x0 += julian(x,3.0,1.0,seed)*1.0;\n            x = x0;\n        } else if (r < 6.0){\n            col = col*0.5 + 0.4583333333333335;\n            x.xy = mat2(7.5, 0.0, 0.0, 7.5) * x.xy + vec2(0.0, 0.0);\n            vec3 x0 = vec3(0);\n            x0 += julian(x,3.0,1.0,seed)*1.0;\n            x = x0;\n        } else {\n            col = col*0.5 + 0.5;\n            x.xy = mat2(1.0, 0.0, 0.0, 1.0) * x.xy + vec2(0.0, 0.0);\n            vec3 x0 = vec3(0);\n            x0.xy += randn(rand2(seed))*0.1;\n            x = x0;\n        }\n        x *= 1.5;\n        x.xy -= center;\n    }\n}\n\nint palette_count = 256;\nvec3 get_pallete(float f){\n    return .5+.5*cos(1.*vec3(3,4,5)*f-0.5);\n    int a = int(f*float(palette_count));\n    int c0 = palette[a%palette_count];\n    int c1 = palette[(a+1)%palette_count];\n    vec3 rgb0 = vec3((c0>>16)&0xFF,(c0>>8)&0xFF,c0&0xFF)/255.;\n    vec3 rgb1 = vec3((c1>>16)&0xFF,(c1>>8)&0xFF,c1&0xFF)/255.;\n    return mix(rgb0,rgb1,fract(f*float(palette_count)));\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nfloat cam_pitch=1.0471975511966-3.14159/2.;\nfloat cam_yaw=3.14159/2.;//-3.14159/2.;\n\nvec2 perspectiveTransform(vec3 x, int seed){\n    //x.z+=iMouse.x/iResolution.x-.5;\n    if(iMouse.x>0.){\n        cam_yaw = pi*2.*iMouse.x/iResolution.x;\n        cam_pitch = pi*2.*(iMouse.y/iResolution.y-.5);\n    }\n    //float cam_perspective=0.1505;\n    vec3 forward = normalize(vec3(cos(cam_pitch)*cos(cam_yaw),cos(cam_pitch)*sin(cam_yaw),sin(cam_pitch)));\n    vec3 right = normalize(cross(forward,vec3(0,0,-1)));\n    vec3 up = cross(right,forward);\n    vec3 c0 = vec3(0,0,0);\n    float a = dot(x-c0,forward);\n    float b = dot(x-c0,-right);\n    float c = dot(x-c0,up);\n    \n    //if(x.x<0.) return vec2(0);\n    \n    return (vec2(b,c))+randc(rand2(seed))*a*0.0;///cam_perspective ;\n}\n\n//Particle buffer\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    T = iTime;\n    vec3 col;// = texture(iChannel0, I/R.xy).xyz*.01+.5;\n    vec2 coord;\n    float screen_diff_scale = min(R.x/size.x,R.y/size.y);\n    int seed = int(iMouse.x);\n\n    int seed2 = int(I.x + I.y*2000.)+iFrame*4000000;\n    coord = rand2(seed2)*R.xy;\n    vec4 t = texture(iChannel3,I/R.xy);\n    \n    //t.xyz = julia3D( t.xyz,IHash(seed2),-2.0)*1.0;\n    \n    if(d3d){\n        \n        vec3 x = t.xyz;\n        \n        \n    \tcoord = (scale*screen_diff_scale*(perspectiveTransform(t.xyz,seed2)-center)*vec2(1,-1)+.5*R.xy);\n    } else {\n        coord = (scale*screen_diff_scale*(t.xy-center)*vec2(1,-1)+.5*R.xy);\n    }\n    coord += rand2(IHash(seed2))-.5;\n    col = get_pallete(t.w);\n    \n    particle p = particle(!(coord.x>0.&&coord.x<R.x&&coord.y>0.&&coord.y<R.y), coord, col);\n    O.xy = packParticle(p);\n    O.z = max(texture(iChannel0, I/R.xy).z,max(texture(iChannel0, rand2(seed2)).z,texture(iChannel2, rand2(seed2)).w));\n\tif(texelFetch(iChannel1, ivec2(82,0),0).x>.5 && iFrame%8==6) O.z*=0.;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 O, in vec2 I )\n{\n    //Split frames into 8 stages\n    int stage = iFrame%8;\n    int seed = iFrame/8;\n    int size = int(.5+pow(2.45,float(7-stage)));\n    \n    \n    float s0;\n    float s1;\n    //init with top left corner and center\n    if(stage==0){\n        vec2 u0 = tx(iChannel0, ivec2(I)-size,R).xy;\n        vec2 u1 = tx(iChannel0, ivec2(I),R).xy;\n        particle p0 = unpackParticle(u0);\n        particle p1 = unpackParticle(u1);\n                                                                         \n        s0 = score(p0,I,R,seed);\n        s1 = score(p1,I,R,seed);\n        \n        O.xy=u0;\n        O.zw=u1;\n        \n        //Select the better one, make sure scores are in order with s0<s1\n        if(s0>s1){\n            vec2 _ = O.xy;\n            O.xy = O.zw;\n            O.zw = _;\n            _.x = s0;\n            s0 = s1;\n            s1 = _.x;\n        }\n    } else {\n        O = tx(iChannel1, ivec2(I)-size,R );\n        particle p0 = unpackParticle(O.xy);\n        particle p1 = unpackParticle(O.zw);\n        s0 = score(p0,I,R,seed);\n        s1 = score(p1,I,R,seed);\n    }\n    for(int i = 1; i < 9; i++){\n        if(stage==0){\n        \tvec2 u = tx(iChannel0,ivec2(I)-size+size*ivec2(i/3,i%3),R).xy;\n            particle p = unpackParticle(u);\n            updateRank2x(p,O,s0,s1,I,R,seed);\n            \n        } else {\n        \tvec4 t;\n            vec4 u = tx(iChannel1,ivec2(I)-size+size*ivec2(i/3,i%3),R); \n            particle p0 = unpackParticle(u.xy);\n            particle p1 = unpackParticle(u.zw);\n            updateRank2x(p0,O,s0,s1,I,R,seed);\n            updateRank2x(p1,O,s0,s1,I,R,seed);\n        }\n        \n    }\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void splat(inout vec4 O, vec2 I, particle p){\n    if(floor(I) == floor(p.coord) && !p.nil){\n        O += vec4(p.color,1); \n    }\n}\n\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n\tbool reset = (texelFetch(iChannel1, ivec2(82,0),0).x>.5);\n    O = vec4(0);\n    int seed = iFrame/8;\n    \n    if(iFrame%8==7){\n            vec2 ip = forward_mapping(I,R,seed);\n            vec4 t = texelFetch(iChannel0,ivec2(ip),0);\n            \n\n            splat(O,I,unpackParticle(t.xy));\n            splat(O,I,unpackParticle(t.zw));\n        //if(!reset){\n        vec4 Op = texture(iChannel2,I/R.xy);\n        O.w += Op.w;\n        O.xyz=mix(O.xyz,Op.xyz,1.-.3/(O.w));\n        //}\n    } else {\n        O = texture(iChannel2,I/R.xy);\n    }\n    O += vec4(0,0,0.,1)/100.;\n    if(reset&&iFrame%8==0) O*=0.;\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"void mainImage( out vec4 O, in vec2 I )\n{\n    int seed2 = int(I.x*2000. + I.y)+iFrame*4002400;\n    \n    O = texture(iChannel3, rand2(seed2));\n    T = iTime;\n    if(Hash(seed2)<.01){\n        O = vec4(rand2(seed2)*2.-1.,0,0);\n        iter(O.xyz,O.w,seed2);\n        iter(O.xyz,O.w,seed2);\n    } else {\n        iter(O.xyz,O.w,seed2);\n    }\n}","name":"Buffer D","description":"","type":"buffer"}]}