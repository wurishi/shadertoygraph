{"ver":"0.1","info":{"id":"mlGczw","date":"1700038380","viewed":46,"name":"funky water/wind/fbm","username":"Tygrak","description":"it's funky","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fbm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec2 random(vec2 uv){\n    uv = vec2( dot(uv, vec2(127.1,311.7) ),\n               dot(uv, vec2(269.5,183.3) ) );\n    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);\n}\n\nfloat noise(vec2 uv) {\n    vec2 uv_index = floor(uv);\n    vec2 uv_fract = fract(uv);\n\n    vec2 blur = smoothstep(0.0, 1.0, uv_fract);\n\n    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),\n                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),\n                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),\n                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) + 0.5;\n}\n\nmat2 makeRotationMat(in float theta){\n\tfloat c = cos(theta);\n\tfloat s = sin(theta);\n\treturn mat2(vec2(c, -s), vec2(s, c));\n}\nconst mat2 rotationMat = mat2(vec2(1.20,  0.60), vec2(-0.60,  1.90));\n//const mat2 rotationMat = mat2(vec2(0.80,  0.20), vec2(-0.20,  0.80));\n\nfloat fractalBrownianMotion(in vec2 p) {\t\n\tfloat z = 2.0;\n\tfloat rz = 0.0;\n\tfor (float i = 1.0; i < 7.0; i++) {\n\t\trz+= abs((noise(p)-0.5)*2.0)/z;\n\t\tz = z*2.0;\n\t\tp = p*2.0;\n\t\tp *= rotationMat;\n\t}\n\treturn rz;\n}\n\nvec4 color(vec2 p) {\n\tp += 2.0;\n\tp *= 2.5;\n\tfloat randA = sqrt(fractalBrownianMotion(p*0.5+iTime*0.337)*0.1);\n\t//p *= makeRotationMat(randA*0.4+atan(p.y, p.x)*2.0);\n\tp *= makeRotationMat(randA*0.4+sin(iTime*0.107));\n\tfloat randB = fractalBrownianMotion(p*.9-iTime*0.03);\n\tvec3 col = vec3(.14,0.47,0.775)*(1.0-randB*0.8+0.2);\n\treturn vec4(col, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(color(uv).rgb, 1.0);\n}","name":"Image","description":"","type":"image"}]}