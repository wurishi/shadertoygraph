{"ver":"0.1","info":{"id":"dscfz4","date":"1697235184","viewed":38,"name":"Ben-ScanningCheckerboard","username":"bennissimo","description":"Shows the difference between a scanning checkerboard and a scanning solid rectangle.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["bennissimo"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// This shader shows the dark patch artifact with a moving checkerboard pattern.\n// Drag the mouse in the window; when the mouse is in the top half, we draw a \n// rectangle with a constant color. When the mouse is in the bottom half, we draw\n// a rectangle with a checkerboard tecture with 1 pixel checkers:\n// 0 1 0 1 0 1 ..\n// 1 0 1 0 1 0 ...\n// 0 1 0 1 0 1 ...\n// ...\n//\n// IMPORTANT: turns out we see the dark region with any pixel-width features.\n// So for example, alternating vertical lines of on and off pixels, or alternating\n// horizontal lines of on and off pixels, both cause the same artifact.\n//\n//\n// IMPORTANT: the texture doesn't actually slide. Instead, it's a fixed pattern,\n// and we have a moving window which decides which region of the pattern is visible.\n// That window slides around. The pattern at any pixel is fixed.\n//\n// For full screen mode, use a larger period like 60 frames.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float checker_size = 1.0;\n    // Multiply one fragCoord by 1.0 and the other by 0.0 if you want to see the\n    // effect with vertical or horizontal stripes. Multiplying both by 1.0 gives\n    // a checkerboard.\n    int polarity = (int(0.0 * fragCoord.x/checker_size) + \n        int(1.0 * fragCoord.y/checker_size)) % 2;\n\n    // Period for motion of moving rectangle:\n    float period = 25.0; // windowed\n    //float period = 60.0; // full screen\n    float pos = 0.5 + 0.4 * cos(float(iFrame) / period);\n\n    // Half width for rectangle to illuminate.\n    float size_x = 0.04;\n    float size_y = 0.1;\n    float center = 0.5;\n\n    // Based on this shader, vertical 1 pixel lines:\n    // float inv_gamma = 0.505;  // CSOT 65\n    float inv_gamma = 0.4545;  // BOE 65\n\n// Start with background color.\n    float bgnd = pow(0.5, inv_gamma);\n    vec3 col = vec3(bgnd);\n    // Then choose on/off colors for rectangle.\n    vec3 fg_color = vec3(1.0, 1.0, 1.0);\n\n    // Use mouse to select checkerboard or solid color for rectangle\n    bool use_checkers = 2.0 * iMouse.y < iResolution.y;\n\n    // Normalized pixel coordinates (from 0 to 1).\n    vec2 uv = fragCoord/iResolution.xy;\n        \n    if (uv.x > pos - size_x &&\n        uv.x < pos + size_x &&\n        uv.y > center - size_y &&\n        uv.y < center + size_y) {\n        if (use_checkers) {\n            col = float(polarity) * fg_color;\n        } else {\n            col = vec3(bgnd);\n        }\n    }\n    // Output to screen.\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}