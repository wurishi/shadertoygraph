{"ver":"0.1","info":{"id":"ws3XD8","date":"1571861713","viewed":325,"name":"Shadertober 23 Mandelbrot -jb","username":"jaburns","description":"Simple Mandelbrot zoom until you run out of floating point accuracy.","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["mandelbrot","zoom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float mandelbrot( vec2 c, vec2 offset )\n{\n    // Camera\n    c += offset / iResolution.xy;\n    c.x -= .65;\n    c /= exp( .3*iTime );\n    c += vec2( .34848, .510404 );\n    \n    // Iteration of z = z^2 + c\n    vec2 z = vec2( 0 );\n    float i = 0.;\n    for( ; i < 150.; ++i ) {\n        z = vec2(\n            z.r*z.r - z.g*z.g + c.r,\n            2.*z.r*z.g + c.g\n        );  \n        if (length(z) > 40.) break;\n    }\n    \n    if (i == 150.) return 0.;\n    \n    i = i - log(length(z)) / log(40.);\n    \n    return i / 150.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 3.*( fragCoord/iResolution.yy - vec2(.5 * iResolution.x/iResolution.y, .5) );\n    \n    // MSAA\n    float a = mandelbrot(uv, vec2(-.75, .25));\n    float b = mandelbrot(uv, vec2(-.25,-.75));\n    float c = mandelbrot(uv, vec2( .25, .75));\n    float d = mandelbrot(uv, vec2( .75,-.25));\n\n    fragColor = 0.25 * vec4(a + b + c + d);\n}","name":"Image","description":"","type":"image"}]}