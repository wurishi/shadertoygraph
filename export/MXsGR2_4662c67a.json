{"ver":"0.1","info":{"id":"MXsGR2","date":"1712027093","viewed":79,"name":"Chromatic pumping","username":"ShadedSky","description":"chroma pump","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["chroma"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float SHAPE_SIZE = .618;\nconst float CHROMATIC_ABERRATION = .01;\nconst float ITERATIONS = 10.;\nconst float INITIAL_LUMA = .5;\n\nconst float PI = 3.14159265359;\nconst float TWO_PI = 6.28318530718;\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle), -sin(_angle),\n                sin(_angle), cos(_angle));\n}\n\nfloat zoomEffect(float time) {\n    // Creates a zoom effect that oscillates between 0.8 and 1.2\n    return sin(time * 0.5) * 0.5 + 2.0;\n}\n\nfloat getColorComponent(in vec2 st, in float modScale, in float blur, float time) {\n    vec2 modSt = mod(st, 1. / modScale) * modScale * 2. - 1.;\n    float dist = length(modSt);\n    float angle = atan(modSt.y, modSt.x) + sin(time * .08) * 62.0;\n    float shapeMap = smoothstep(SHAPE_SIZE + blur, SHAPE_SIZE - blur, sin(dist * 3.0) * .5 + .5);\n    return shapeMap;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Control the size of the pixels for the pixelation effect\n    float pixelSize = 0.3; \n    vec2 pixelUV = floor(fragCoord / pixelSize) * pixelSize;\n    \n    float time = iTime;\n    float zoom = zoomEffect(time*.2);\n    float blur = .4 + sin(time * .52) * .2;\n    \n    vec2 uv = (pixelUV - .5   * iResolution.xy) / iResolution.y;\n    uv *= zoom; // Apply the zoom effect\n    \n    vec2 origSt = uv; // Store original st for color grading\n    uv *= rotate2d(sin(time * .84) * .3);\n    uv *= (sin(time * .15) + 2.) * .3;\n    uv *= log(length(uv * sin(time*.3))) * 1.1;\n\n    vec3 color = vec3(0);\n    float luma = INITIAL_LUMA;\n    for (float i = 0.; i < ITERATIONS; i++) {\n        vec2 center = uv + vec2(sin(time * .12), cos(time * .13));\n        vec3 shapeColor = vec3(\n            getColorComponent(center - uv * CHROMATIC_ABERRATION, 1., blur, time),\n            getColorComponent(center, 1., blur, time),\n            getColorComponent(center + uv * CHROMATIC_ABERRATION, 1., blur, time)\n        ) * luma;\n        uv *= 1.1 + getColorComponent(center, 1., .04, time) * 1.2;\n        uv *= rotate2d(sin(time  * .05) * 1.33);\n        color += shapeColor;\n        color = clamp(color, 0., 1.);\n        luma *= .6;\n        blur *= .63;\n    }\n\n    const float GRADING_INTENSITY = .4;\n    vec3 topGrading = vec3(\n        1. + sin(time * 1.13 * .3) * GRADING_INTENSITY,\n        1. + sin(time * 1.23 * .3) * GRADING_INTENSITY,\n        1. - sin(time * 1.33 * .3) * GRADING_INTENSITY\n    );\n    vec3 bottomGrading = vec3(\n        1. - sin(time * 1.43 * .3) * GRADING_INTENSITY,\n        1. - sin(time * 1.53 * .3) * GRADING_INTENSITY,\n        1. + sin(time * 1.63 * .3) * GRADING_INTENSITY\n    );\n    vec3 colorGrading = mix(topGrading, bottomGrading, length(origSt) - .5);\n    fragColor = vec4(pow(color.rgb, colorGrading), 1.);\n    fragColor *= smoothstep(2.1, .7, length(origSt));\n}\n","name":"Image","description":"","type":"image"}]}