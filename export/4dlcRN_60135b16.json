{"ver":"0.1","info":{"id":"4dlcRN","date":"1487279502","viewed":208,"name":"vnoise Weyl XOR 32-bit","username":"MBR","description":"cheapish value noise","likes":4,"published":1,"flags":48,"usePreview":0,"tags":["valuenoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// LICENSE: http://unlicense.org/\n\n// Show one sample of standard value noise, single cell\n\n// Math background: http://marc-b-reynolds.github.io/math/2016/02/24/weyl.html\n// Hash function:   http://marc-b-reynolds.github.io/math/2016/03/29/weyl_hash.html\n\n// Requires 32-bit integer support\n#define W0   0x3504f335  // 15 | 101 | 41*79*274627\n#define W1   0x8fc1ecd5  // 18 | 101 | 5*482370193\n#define M    741103597u  // 13*83*686843\n\n// if define range is [0,1] instead of [0,1) which saves 4 shifts/sample\n#define INCLUSIVE\n\nvec2  ident(vec2 t)      { return t; }\nvec2  easeC1(vec2 t)     { return (t*t*(3.0-(t+t))); }\nvec2  easeC2(vec2 t)     { vec2 t3 = t*t*t; return t3*(t*(t*6.0-15.0)+10.0); }\nvec2  easeC2_alt(vec2 t) { vec2 t3 = t*t*t; return t3*(t*(t3-7.0)+7.0); }\n\n#define EASE_C2 easeC2_alt\n\n\n// final lerp\nfloat lerp(float h00, float h10, float h01, float h11, vec2 ds)\n{\n  float b = mix(h00,h10, ds.x); // bottom edge\n  float t = mix(h01,h11, ds.x); // top edge\n  float r = mix(b,t,     ds.y); // bottom-to-top\n\n  return r;\n}\n\n\n// perform simple bit finalize (multiply by MLCG constant)\n// and map to float via specified method.\n#ifndef INCLUSIVE\n#define I2F (1.0/16777216.0)\nfloat finalize(int h)\n{\n  return float(M*uint(h)>>8u);\n}\n#else\n#define I2F (1.0/16777216.0/256.0)\nfloat finalize(int h)\n{\n  return float(M*uint(h));\n}\n#endif\n\n//   +-----+ y1\n//   |     |\n//   |     |\n//   +-----+ y0\n//   x0    x1\n\n// positive result variant with C1 interp\nfloat vnoisep1(in vec2 v)\n{\n  vec2  c   = floor(v);         // grid coord (x0,y0)\n  vec2  ds  = easeC1(v-c);      // interp value into cell\n  int   x0  = W0*int(c.x);      // Weyl sequence in x of x0\n  int   y0  = W1*int(c.y);      // Weyl sequence in y of y0\n  int   x1  = W0+x0;            // Weyl sequence in x of x1\n  int   y1  = W1+y0;            // Weyl sequence in y of y1\n  float h00 = finalize(x0^y0);  // bit finalize (x0,y0)\n  float h10 = finalize(x1^y0);  // bit finalize (x1,y0)\n  float h01 = finalize(x0^y1);  // bit finalize (x0,y1)\n  float h11 = finalize(x1^y1);  // bit finalize (x1,y1)\n\n  // perform specified interpolation and map to float\n  return lerp(h00,h10,h01,h11,ds)*I2F;\n}\n\n// same as above except C2 interp\nfloat vnoisep2(in vec2 v)\n{\n  vec2  c   = floor(v);\n  vec2  ds  = EASE_C2(v-c);\n  int   x0  = W0*int(c.x);\n  int   y0  = W1*int(c.y);\n  int   x1  = W0+x0;\n  int   y1  = W1+y0;\n  float h00 = finalize(x0^y0);\n  float h10 = finalize(x1^y0);\n  float h01 = finalize(x0^y1);\n  float h11 = finalize(x1^y1); \n\n  return lerp(h00,h10,h01,h11,ds)*I2F;\n}\n\n\n\n//===============================================================\n// visualization stuff below here\n\n\n//======Start shared code for state\n#define pz_stateYOffset 0.0\n#define pz_stateBuf 0\n#define pz_stateSample(x) texture(iChannel0,x)\nvec2 pz_realBufferResolution;\nvec2 pz_originalBufferResolution;\n\nvoid pz_initializeState() {\n    pz_realBufferResolution     = iChannelResolution[pz_stateBuf].xy;\n    pz_originalBufferResolution = pz_stateSample(.5/pz_realBufferResolution).xy;\n}\n\nvec2 pz_nr2vec(float nr) {\n    return vec2(mod(nr, pz_originalBufferResolution.x)\n                      , pz_stateYOffset+floor(nr / pz_originalBufferResolution.x))+.5;\n}\n\nvec4 pz_readState(float nr) {\n    return pz_stateSample(pz_nr2vec(nr)/pz_realBufferResolution);\n}\n\nfloat pz_resetCount() { return pz_readState(1.).z;   }\nvec3 pz_position()    { return pz_readState(3.).xyz; }\n\nvec2 pz_initializeState(vec2 fragCoord) {\n    pz_initializeState();\n    \n    vec3 position = pz_position();\n    fragCoord -= 0.5*iResolution.xy;\n    fragCoord *= position.z;\n    fragCoord += (0.5 + position.xy) * iResolution.xy ;\n    return fragCoord;\n}\n//======End shared code for state\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  int   t = int(fragCoord.x) - int(0.5*iResolution.x);\n  fragCoord = pz_initializeState(fragCoord);\n    \n  vec2  p = fragCoord.xy ;\n  float r;\n  \n  if (t < 0)\n    r = vnoisep1(.100*(p-.5*vec2(iResolution)));\n  else if (t > 1)\n    r = vnoisep2(.100*(p-.5*vec2(iResolution)));\n    \n  vec4  c = vec4(vec3(r),1.0);\n    \n  fragColor = c;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// copy of:  https://www.shadertoy.com/view/XdG3Dh\n\n//======Start shared code for state\n#define pz_stateYOffset 0.0\n#define pz_stateBuf 0\n#define pz_stateSample(x) texture(iChannel0,x)\nvec2 pz_realBufferResolution;\nvec2 pz_originalBufferResolution;\n\nvoid pz_initializeState() {\n    pz_realBufferResolution     = iChannelResolution[pz_stateBuf].xy;\n    pz_originalBufferResolution = pz_stateSample(.5/pz_realBufferResolution).xy;\n}\n\nvec2 pz_nr2vec(float nr) {\n    return vec2(mod(nr, pz_originalBufferResolution.x)\n                      , pz_stateYOffset+floor(nr / pz_originalBufferResolution.x))+.5;\n}\n\nvec4 pz_readState(float nr) {\n    return pz_stateSample(pz_nr2vec(nr)/pz_realBufferResolution);\n}\n\nfloat pz_resetCount() {\n    return pz_readState(1.).z;\n}\n\nvec3 pz_position() {\n    return pz_readState(3.).xyz;\n}\n\nvec2 pz_initializeState(vec2 fragCoord) {\n    pz_initializeState();\n    \n    vec3 position = pz_position();\n    fragCoord -= 0.5*iResolution.xy;\n    fragCoord *= position.z;\n    fragCoord += (0.5 + position.xy) * iResolution.xy ;\n    return fragCoord;\n}\n//======End shared code for state\n\n//======Defines for state behaviour\n#define pz_resetOnMove 1\n#define pz_kinetic 0.95\n\nbool pz_checkCell(float nr, vec2 coord) {\n    return distance(pz_nr2vec(nr),coord)<=0.5;\n}\n\n// Keyboard constants definition\nconst float KEY_BSP   = 8.5/256.0;\nconst float KEY_SP    = 32.5/256.0;\nconst float KEY_LEFT  = 37.5/256.0;\nconst float KEY_UP    = 38.5/256.0;\nconst float KEY_RIGHT = 39.5/256.0;\nconst float KEY_DOWN  = 40.5/256.0;\nconst float KEY_A     = 65.5/256.0;\nconst float KEY_B     = 66.5/256.0;\nconst float KEY_C     = 67.5/256.0;\nconst float KEY_D     = 68.5/256.0;\nconst float KEY_E     = 69.5/256.0;\nconst float KEY_F     = 70.5/256.0;\nconst float KEY_G     = 71.5/256.0;\nconst float KEY_H     = 72.5/256.0;\nconst float KEY_I     = 73.5/256.0;\nconst float KEY_J     = 74.5/256.0;\nconst float KEY_K     = 75.5/256.0;\nconst float KEY_L     = 76.5/256.0;\nconst float KEY_M     = 77.5/256.0;\nconst float KEY_N     = 78.5/256.0;\nconst float KEY_O     = 79.5/256.0;\nconst float KEY_P     = 80.5/256.0;\nconst float KEY_Q     = 81.5/256.0;\nconst float KEY_R     = 82.5/256.0;\nconst float KEY_S     = 83.5/256.0;\nconst float KEY_T     = 84.5/256.0;\nconst float KEY_U     = 85.5/256.0;\nconst float KEY_V     = 86.5/256.0;\nconst float KEY_W     = 87.5/256.0;\nconst float KEY_X     = 88.5/256.0;\nconst float KEY_Y     = 89.5/256.0;\nconst float KEY_Z     = 90.5/256.0;\nconst float KEY_COMMA = 188.5/256.0;\nconst float KEY_PER   = 190.5/256.0;\nconst float KEY_ADD   = 107.5/256.0;\nconst float KEY_SUBS  = 109.5/256.0;\nconst float KEY_EQUAL = 187.5/256.0;\nconst float KEY_MINUS = 189.5/256.0;\n\nbool checkKey(float key)\n{\n\treturn texture(iChannel1, vec2(key, 0.25)).x > 0.5;\n}\n\nbool checkKey(float key1, float key2)\n{\n    return checkKey(key1) || checkKey(key2);\n}\n\nbool checkKey(float key1, float key2, float key3)\n{\n    return checkKey(key1) || checkKey(key2) || checkKey(key3);\n}\n\nvoid pz_mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    pz_initializeState();\n    fragColor = pz_stateSample(fragCoord/pz_realBufferResolution);\n    if (fragCoord.x < 1. \n     && fragCoord.y < 1.) {\n        //Lets store the initial buffersize at pos0 and use that for addressing\n        if (pz_originalBufferResolution.x == 0.0)\n            fragColor = vec4(pz_realBufferResolution,1.0,1.0);\n        \n    } else if (pz_checkCell(1.,fragCoord)) {\n        \n        // Use postion 1 to trigger screen size changes so we can clear other buffers on going fullscreen\n        if (distance(fragColor.xy,pz_realBufferResolution)>1.0 \n#if pz_resetOnMove            \n            || pz_readState(3.).w > 0.0\n#endif            \n           ) {\n            fragColor.xy = pz_realBufferResolution;\n            fragColor.z = 60.0;\n        } else {\n            if (fragColor.z > 0.0)\n                fragColor.z -= 1.0;\n        }\n        \n    } else if (pz_checkCell(2.,fragCoord)) {\n        // Store mouse delta if keydown\n        if (iMouse.w>0.5) {\n            if (fragColor.x>0.0) {\n                fragColor.zw = fragColor.xy - iMouse.xy;\n            } else {\n                fragColor.zw = vec2(0.0);\n            }\n            fragColor.xy = iMouse.xy;\n        } else {\n            \n            fragColor.xy = vec2(-1.,-1.);\n#ifdef pz_kinetic\n            fragColor.zw = length(fragColor.zw)>0.1?fragColor.zw*pz_kinetic:vec2(0.0,0.0);\n#else                             \n            fragColor.zw = vec2(0.0,0.0);\n#endif                             \n        }\n        \n    } else if (pz_checkCell(3.,fragCoord)) { \n        // Handle keyboard moves\n        vec2 delta = vec2( checkKey(KEY_LEFT ,KEY_A,KEY_Q)?-0.02:\n                           checkKey(KEY_RIGHT,KEY_D      )? 0.02:0.0\n                         , checkKey(KEY_DOWN ,KEY_S      )?-0.02:\n                           checkKey(KEY_UP   ,KEY_W,KEY_Z)? 0.02:0.0);\n        float factor = checkKey(KEY_SUBS, KEY_MINUS)?1.01:\n                       checkKey(KEY_ADD , KEY_EQUAL)?0.99:1.0;\n        if (fragColor.z<0.0000001)\n            fragColor.z = 1.0;\n        \n        //Update transform state\n        vec2 mouseDelta = pz_readState(2.).zw;\n        fragColor.z *= factor;\n        fragColor.xy += delta *  fragColor.z; //Add keyboard move\n        fragColor.xy += mouseDelta / iResolution.xy *  fragColor.z; //Add mouse delta\n        \n        //Store movement in w\n        fragColor.w = abs(factor-1.0)*3. + length(delta) + length(mouseDelta);\n                \n    } else\n        fragColor = vec4(0.,0.,0.,1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    pz_mainImage( fragColor, fragCoord );\n    \n    // Add multiple state handlers here\n}\n","name":"Buf A","description":"","type":"buffer"}]}