{"ver":"0.1","info":{"id":"l3ySDy","date":"1720430125","viewed":41,"name":"what???od","username":"ODtian","description":"null","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/Ms3SRS\nconst vec3 ld = vec3(0.,1., .5);\nfloat dstepf = 1.0;\nfloat t = 0.;\n\nvec2 path(float z) {\n    return sin(z*.2 + vec2(1.6,0));\n}\n\nmat3 getRotXMat(float a) {\n    return mat3(1.,0.,0.,0.,cos(a),-sin(a),0.,sin(a),cos(a));\n}\nmat3 getRotYMat(float a) {\n    return mat3(cos(a),0.,sin(a),0.,1.,0.,-sin(a),0.,cos(a));\n}\nmat3 getRotZMat(float a) {\n    return mat3(cos(a),-sin(a),0.,sin(a),cos(a),0.,0.,0.,1.);\n}\n\nvec3 plasma(float t) {\n    const vec3 c0 = vec3(0.05873234392399702, 0.02333670892565664, 0.5433401826748754);\n    const vec3 c1 = vec3(2.176514634195958, 0.2383834171260182, 0.7539604599784036);\n    const vec3 c2 = vec3(-2.689460476458034, -7.455851135738909, 3.110799939717086);\n    const vec3 c3 = vec3(6.130348345893603, 42.3461881477227, -28.51885465332158);\n    const vec3 c4 = vec3(-11.10743619062271, -82.66631109428045, 60.13984767418263);\n    const vec3 c5 = vec3(10.02306557647065, 71.41361770095349, -54.07218655560067);\n    const vec3 c6 = vec3(-3.658713842777788, -22.93153465461149, 18.19190778539828);\n    \n    return c0+t*(c1+t*(c2+t*(c3+t*(c4+t*(c5+t*c6)))));\n}\n\nfloat fractus(vec3 p) {\n    vec2 z = p.xy;\n    vec2 c = vec2(0.28,-0.56) * cos(p.z*0.1);\n    float k = 1., h = 1.0;    \n    for (float i=0.;i<7.;i++) {\n        h *= 4.*k;\n        k = 0.3 * length(z) * length(z);\n        if(k > 4.) break;\n        z = vec2(z.x * z.x + z.y * z.y, 2. * z.x * z.y) + c;\n    }\n    // return sqrt(k/h)*log(k);\n    return sqrt(k / h);\n}\n\nfloat df(vec3 p) {\n    p *= getRotZMat(cos(p.z*0.2)*2.);\n    p.xy = mod(p.xy, 3.5) - 3.5*0.5;\n    p *= getRotZMat(cos(p.z*0.6)*2.);\n    return fractus(p);\n}\n\nvec3 nor(vec3 p, float prec) {\n    vec2 e = vec2(prec, 0.);\n    vec3 n = vec3(\n        df(p+e.xyy) - df(p-e.xyy),\n        df(p+e.yxy) - df(p-e.yxy),\n        df(p+e.yyx) - df(p-e.yyx));\n    return normalize(n);\n}\n\n// from iq code\nfloat softshadow(in vec3 ro, in vec3 rd, in float mint, in float tmax) {\n    float res = 1.0;\n    float t = mint;\n    for(int i=0; i<18; i++) {\n        float h = df(ro + rd*t);\n        res = min(res, 8.0*h/t);\n        t += h*.25;\n        if(h<0.001 || t>tmax) break;\n    }\n    return clamp(res, 0., 1.);\n}\n\n// from iq code\nfloat calcAO(in vec3 pos, in vec3 nor) {\n    float occ = 0.0;\n    float sca = 1.0;\n    for(int i=0; i<10; i++) {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = df(aopos);\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp(1.0 - 3.0*occ, 0.0, 1.0);\n}\n\nvec3 lighting(vec3 p, vec3 lp, vec3 rd, float prec) {\n    vec3 l = lp - p;\n    float d = max(length(l), 0.01);\n    float atten = 1.0-exp(-0.01*d*d);\n    // if (iMouse.z> 0.) atten = exp(-0.001*d*d)-0.5;\n    l /= d;\n    \n    vec3 n = nor(p, prec);\n    vec3 r = reflect(-l, n);\n    \n    float dif = clamp(dot(l, n), 0.0, 1.0);\n    float spe = pow(clamp(dot(r, -rd), 0.0, 1.0), 8.0);\n    float fre = pow(clamp(1.0 + dot(n, rd), 0.0, 1.0), 2.0);\n    float dom = smoothstep(-1.0, 1.0, r.y);\n    \n    dif *= softshadow(p, rd, 0.1, 1.);\n    \n    // vec3 lin = vec3(0.08,0.32,0.47);\n    vec3 lin = plasma(smoothstep(0.2, 0.5, length(l)));\n    lin += 1.0*dif*vec3(1,1,0.84);\n    lin += 2.5*spe*dif*vec3(1,1,0.84);\n    lin += 2.5*fre*vec3(1);\n    lin += 0.5*dom*vec3(1);\n    \n    return lin * atten * calcAO(p, n);\n}\n\nfloat trace(in vec3 ro, in vec3 rd) {\n    float s = 1.;\n    float d = 0.;\n    vec3 p = ro;\n    \n    for (float i=0.; i<150.; i++) {\n        if (s < 0.0025*log(d) || d>40.) break;\n        s = df(p);\n        d += s * (s>0.1?0.15:0.01);\n        p = ro + rd * d;\t\n        dstepf += 0.005;\n    }\n    \n    return d;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 si = iResolution.xy;\n    vec2 uv = (2.*fragCoord-si)/min(si.x, si.y);\n    \n    t = iTime * 2.;\n    \n    vec3 cu = vec3(0,1,0);\n    vec3 ro = vec3(0,0,t);\n    vec3 co = ro + vec3(0, 0,.1);\n    \n    float fov = 0.8;\n    vec3 axisZ = normalize(co - ro);\n    vec3 axisX = normalize(cross(cu, axisZ));\n    vec3 axisY = normalize(cross(axisZ, axisX));\n    vec3 rd = normalize(axisZ + fov * uv.x * axisX + fov * uv.y * axisY);\n    \n    float d = trace(ro, rd);\n    vec3 p = ro + rd * d;\t\n    \n    fragColor.rgb = vec3(0.47,0.6,0.76) * lighting(p, ro, rd, 0.1); \n    fragColor.rgb = mix(fragColor.rgb, vec3(0.5,0.49,0.72), 1.0-exp(-0.01*d*d));\n}\n","name":"Image","description":"","type":"image"}]}