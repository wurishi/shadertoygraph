{"ver":"0.1","info":{"id":"sdfBRl","date":"1645186715","viewed":70,"name":"Emulate Raymarch","username":"gest","description":"Demo for my friend","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","tutorial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define u_canvas iResolution\n#define u_mouse iMouse\n#define u_time iTime\n#define Gl_FragCoord fragCoord\n#define Gl_FragColor fragColor\n\nconst float PI = radians(180.);\n\nvec2 mouse;\n\nstruct Box {\n\tvec3 center;\n\tvec3 size;\n};\n\nstruct Sphere {\n\tvec3 center;\n\tfloat radius;\n};\n\n//\nfloat dfBox( vec3 p, vec3 size ) {\n  \tvec3 d = abs(p) - size;\n  \treturn length(max(d,0.0)) + min(max(d.x,max(d.y,d.z)),0.0);\n}\n\n//Сфера\nfloat dfSphere(vec3 p, float rad) {\n\treturn length(p) - rad;\n}\n\nfloat map(vec3 p) {\n\tfloat dist = 1e6;\n\tfloat d;\n\n\t//Фигура 1\n\tBox box1 = Box(vec3(-0.7,0,1), vec3(0.1, 0.2, 0.3));\n\t//Расстояние до фигуры\n\td = dfBox(p - box1.center, box1.size);\n\tif (d<dist) {\n\t\tdist = d;\n\t}\n\n\t//Фигура 3\n\tBox box2 = Box(vec3(0.7,0,1.), vec3(0.1, 0.2, 0.3));\n\t//Расстояние до фигуры\n\td = dfBox(p - box2.center, box2.size);\n\tif (d<dist) {\n\t\tdist = d;\n\t}\n\n\t//Фигура 3\n\tSphere sphere = Sphere(vec3(0,0,1.5), 0.2);\n\t//Расстояние до фигуры\n\td = dfSphere(p - sphere.center, sphere.radius);\n\tif (d<dist) {\n\t\tdist = d;\n\t}\n\n\treturn dist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\t//Соотношение экрана\n\tfloat aspect = u_canvas.x/u_canvas.y;\n\t\n\t//Пространство координат мыши\n\tmouse = u_mouse.xy/u_canvas.xy;\n\tif (mouse==vec2(0)) mouse = vec2(0.5, 0);\n\tmouse = 2.*mouse - 1.;\n\tmouse.x *= aspect;\n\t\n\t//Пространство координат экрана\n\tvec2 uv = Gl_FragCoord.xy/u_canvas.xy;\n\tuv = 2.*uv - 1.;\n\tuv.x *= aspect;\n\n\tfloat time = mod(u_time, 10.);\n\t//if (u_mouse.z!=1.) {\n\t\tmouse.y = -1. + time/10.*2.;\n\t//}\n\t\n    //Размер пикселя\n    vec2 PXSIZE = fwidth(uv);\n    \n\t//Направление луча из каждой точки экрана\n\tvec3 ray_direction = normalize(vec3(uv, 1));\n\t//Максимальная дистанция в направлении луча\n\tfloat ray_far = 3.;\n\t//\n\tfloat ray_epsilon = 2.*length(PXSIZE);\n\tfloat ray_distance = (mouse.y*0.5 + 0.5) * ray_far;\n\tvec3 ray_position = ray_direction * ray_distance;\n\t\n\tfloat ray_object_distance = map(ray_position);\n\n\tbool ray_hit = abs(ray_object_distance)<ray_epsilon;\n\n\tvec3 color = vec3(sqrt(ray_object_distance));\n\tif (uv.x>mouse.x) {\n\t\tif (ray_hit) color = vec3(1,0,0);\n\t}\n\n\tfloat col = 1.;\n\t#if 1\t\n\t\t//Визуализация фактической сцены\n\t\tfor (float i=0.;i<40.; i++) {\n\t\t\t#if 0\n\t\t\t\t//Визуализация дистанции до точки\n\t\t\t\tcol -= length(ray_position/ray_distance - ray_distance)*0.01;\n\t\t\t#endif\n\t\t\tray_position = ray_direction * ray_distance;\n\t\t\tray_object_distance = map(ray_position);\n\t\t\tif (abs(ray_object_distance)<ray_epsilon) break;\n\t\t\tray_distance += ray_object_distance;\n\t\t\tif (ray_distance>ray_far) break;\n\t\t}\n\t\tif (ray_distance<ray_far) color *= vec3(1.-ray_distance/ray_far)*1.2;\n\n\t\tif (uv.x>mouse.x) {\n\t\t\tcolor *= col;\n\t\t}\n\t#endif\n\n\t//Визуализация разделения экрана\n\tif (abs(uv.x - mouse.x)<PXSIZE.x*3.) {\n\t\tif (uv.y>mouse.y) {\n\t\t\tcolor = vec3(0);\n\t\t} else {\n\t\t\tcolor = vec3(0,0,1);\n\t\t}\n\t}\n\tGl_FragColor = vec4(color, 1);\n\n}","name":"Image","description":"","type":"image"}]}