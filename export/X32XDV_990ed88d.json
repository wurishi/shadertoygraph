{"ver":"0.1","info":{"id":"X32XDV","date":"1711117537","viewed":93,"name":"Mitosis Using Reaction Diffusion","username":"Zundahl","description":"Cool shader","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["school"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 grad(vec2 uv) {\n    // Compute the gradient of the. channel used for shading\n    vec3 delta = 1.0/iResolution;\n    \n    vec2 delta_x = vec2(1.0, 0.0)/iResolution.xy;\n    vec2 delta_y = vec2(0.0, 1.0)/iResolution.xy;\n    \n    vec4 nextTime_x = texture(iChannel0, uv+delta_x);\n    vec4 nextTime_y = texture(iChannel0, uv + delta_y);\n    vec4 prevTime_x = texture(iChannel0, uv-delta_x);\n    vec4 prevTime_y = texture(iChannel0, uv-delta_y);\n    \n    \n    float nextHeight_x = nextTime_x.r;\n    float nextHeight_y = nextTime_y.r;\n    float prevHeight_x = prevTime_x.r;\n    float prevHeight_y = prevTime_y.r;\n    \n    vec2 result = (1.0/2.0) *vec2(nextHeight_x-prevHeight_x,nextHeight_y-prevHeight_y);\n    \n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 g = grad(uv);\n    vec3 t1 = vec3(1,0,20.0*g.x);\n    vec3 t2 = vec3(0,1,20.0*g.y);\n    vec3 N = normalize(cross(t1,t2));\n    vec3 L = normalize(vec3(1,3,5));\n    float illum = (0.4+0.4*smoothstep(0.97,0.98, dot(N,L)) + 0.2 * max(0.0, dot(N,L)));\n\n    float substance = 2.0*texture(iChannel0, uv).g;\n    // Output to screen\n    fragColor = illum*vec4(0.3, 0.7, 0.5,0.0) + (1.0-substance)*vec4(0.6,0.4,0.1, 0.0);\n    \n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec4 lap(vec2 uv) {\n    // Compute the Laplacian of all four elements of iChannel0\n    \n    vec3 delta = 1.0/iResolution;\n    vec4 currTime = texture(iChannel0, uv); //Current height\n    \n    vec2 delta_x = vec2(1.0, 0.0)/iResolution.xy;\n    vec2 delta_y = vec2(0.0, 1.0)/iResolution.xy;\n\n    vec4 nextTime_x = texture(iChannel0, uv + delta_x);\n    vec4 nextTime_y = texture(iChannel0, uv + delta_y);\n    vec4 prevTime_x = texture(iChannel0, uv - delta_x);\n    vec4 prevTime_y = texture(iChannel0, uv - delta_y);\n    \n    float lapA = 1.0/4.0*(nextTime_x.r + prevTime_x.r + nextTime_y.r + prevTime_y.r-4.0*currTime.r);\n    \n    float lapB = 1.0/4.0*(nextTime_x.g + prevTime_x.g + nextTime_y.g + prevTime_y.g-4.0*currTime.g);\n   \n    \n    return vec4(lapA,lapB,0,0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 BufferA = texture(iChannel0, uv);\n\n    // Suggested time step\n    float dt = 0.5;\n\n   /* Mitosis*/\n    float Da = 1.0;\n    float Db = 0.5;\n    float k = 0.06247;\n    float f = 0.04784;\n    /**/\n       \n    float A = texture(iChannel0, uv).r;\n    float B = texture(iChannel0, uv).g;\n    \n    // INSERT CODE TO UPDATE A and B INSTEAD OF THE LINES BELOW ---> \n    vec4 laplacian = lap(uv);\n    \n    float Ap = A + (Da*laplacian.r - A*B*B + f*(1. - A))*dt;\n    float Bp = B + (Db*laplacian.g + A*B*B - (k + f)*B)*dt;\n    // <----------\n    \n    mat2 M = mat2(0.5,0.0,0.0,0.1);\n    vec2 V = fragCoord - iMouse.zw;\n    if (iTime < 0.1)\n        fragColor = vec4(1.0,0,0,0);\n    else\n        fragColor = exp(-dot(V,M*V)) * vec4(0.0,1.0,0,0) + vec4(Ap, Bp, 0.0, 0.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}