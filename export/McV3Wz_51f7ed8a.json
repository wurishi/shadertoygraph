{"ver":"0.1","info":{"id":"McV3Wz","date":"1712644543","viewed":164,"name":"simple gaussian pyramid blur","username":"oatmealine","description":"severely underbaked blur w/ gaussian pyramid downscaling method. absolutely could look better but i can't bother to figure that out","likes":0,"published":3,"flags":32,"usePreview":1,"tags":["2d","blur","gaussianpyramid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265\n\nfloat gaussian( float _x, float _v ) {\n  return 1.0 / sqrt( 2.0 * PI * _v ) * exp( - _x * _x / 2.0 / _v );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    vec3 col = vec3(0.0);\n    float m = 50.0;\n    //col += texture(iChannel0, uv * 0.5).rgb * gaussian(0.0, m);\n    col += texture(iChannel0, uv * 0.25 + 0.5).rgb * gaussian(1.0, m);\n    col += texture(iChannel0, uv * 0.125 + 0.75).rgb * gaussian(0.0, m);\n    col += texture(iChannel0, uv * 0.0625 + 0.875).rgb * gaussian(1.0, m);\n    col += texture(iChannel0, uv * 0.03125 + 0.9375).rgb * gaussian(2.0, m);\n    col += texture(iChannel0, uv * 0.015625 + 0.96875).rgb * gaussian(3.0, m);\n    col *= 4.0;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 l = vec2(\n      log(2.0 - uv.x * 2.0),\n      log(2.0 - uv.x * 2.0)\n    );\n    vec2 p = floor(1. - l / log(2.));\n    vec2 atlas = fract(uv * vec2(pow(2., p.x), pow(2., p.y))) * 2.0;\n\n    vec3 col = texture(iChannel0, atlas).rgb;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}