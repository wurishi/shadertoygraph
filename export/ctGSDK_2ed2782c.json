{"ver":"0.1","info":{"id":"ctGSDK","date":"1686342584","viewed":35,"name":"trippy log space swell","username":"jakecariello","description":"messing around here","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["grid","rgb","trippy","fract","log","eclectic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define res iResolution\n#define time iTime / 3.\n\nfloat sum(vec2 v) {\n    return v.x + v.y;\n}\n\nfloat grid(vec2 p, float scale) {\n    p += 10000. * scale;\n    return sum(mod(floor(scale * p) + .1 * sin(10. * scale * abs(vec2(pow(p.x, .5), pow(p.y, .5)))), 2.));\n}\n\nmat2 r2(float a) {\n    float s = sin(a), c = cos(a);\n    return mat2(c, s, -s, c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 rawUV = fragCoord / res.xy;\n    \n    vec2 uv = r2(time * (.003 * sin(time * .001) + 1.)) * log(abs(rawUV - .5) + .02);\n    \n\n    // Time varying pixel color\n    mat2 A = r2(time * .2);\n    mat2 B = r2(time * .04);\n    mat3 a = mat3(A[0][0], 0, A[0][1], A[1][0], 0, A[1][1], 0, 0, 0);\n    mat3 b = mat3(0, 0, 0,  B[0][0], 0, B[0][1], B[1][0], 0, B[1][1]);\n    vec3 col = abs((0.25 + 0.25*cos(((.2 * sin(time * .01) + 1.) * time)+vec3(uv, dot(uv.x, uv.y)))));\n    \n    col *= grid(uv, ((sin(time/2000.) / 2.) ) + .5);\n    \n    col *= smoothstep(.5, .0, length (rawUV - .5));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}