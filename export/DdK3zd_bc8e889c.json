{"ver":"0.1","info":{"id":"DdK3zd","date":"1678964009","viewed":98,"name":"TP2-Texture et shading","username":"salma","description":"tp2","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["tp2"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Texturing\n// Salma Ahizoune\n\nconst int Steps = 200;      // Number of steps\nconst float Epsilon = 0.01; // Marching epsilon\n\n// Structure for objects\n// v : Field value\n// i : Texture index\nstruct V {\n    float v; \n    int i;\n};\n\n// Structure for texture\n// c : Color\n// s : Specular\nstruct T {\nvec3 c;\nfloat s;\n};\n\n\n\n\n\n// Primitive functions -----------------------------------------------------------------------------------\n\n// Union\n// a : field function of left sub-tree\n// b : field function of right sub-tree\nV Union(V a,V b)\n{\n    if (a.v<b.v)\n        return V(a.v,a.i);\n    else \n    {\n        return V(b.v,b.i);\n    }\n}\n\n// Intersection, preserve the index of first object\n// a, b : field function of left and right sub-trees\nV Intersection(V a,V b)\n{\n    if (a.v>b.v)\n    {\n        return V(a.v,a.i);\n    }\n    else \n    {\n        return V(b.v,a.i);\n    }\n}\n\n\n// Sphere \n// p : point\n// c : center \n// r : radius\nV Sphere(vec3 p, vec3 c,float r,int index)\n{\n  return V(length(p-c)-r,index);\n}\n\n// Cube \n// p : point\n// c : center \n// r : radius\nV Cube(vec3 p,vec3 c,float r,int index)\n{\n   vec3 q = abs(p-c) - vec3(r);\n  return V(length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0),index);\n}\n\n// Plane \n// p : point\n// n : Normal of plane\n// o : Point on plane\nV Plane(vec3 p, vec3 n, vec3 o,int index)\n{\n    return V(dot((p-o),n),index);\n}\n\n\n/// Demi Sphere\n// p : point\n// c : centre\n// r : rayon\n// n : normale\nV DemiSphere(vec3 p, vec3 c, float r, vec3 n, int index) {\n    V s = Sphere(p, c, r, index);\n    V pl = Plane(p, c, n, index);\n    return Intersection(s, pl);\n}\n\n\n/// Capsule\n// p : point\n// a : coordonnees d'un bout de la capsule\n// b : coordonnees de l'autre bout\n// r : rayon\n\n    V Capsule(vec3 p, vec3 a, vec3 b, float r, int index) {\n    \n    return V(Segment(p, a, b) - r, index);\n}\n\n/////////////////////Objets complex/////////////////////////////////////////\n// Dice \n// p : point\n// c : center \n// r : radius\nV Dice(vec3 p,vec3 c,float r,int index){\n  return Intersection(Cube(p,c,r*0.8,index),Sphere(p,c,r,index));\n}\n\nV nariz(vec3 p, vec3 a, vec3 b, float r, int index){\n    \n    V v = Capsule(p, a, b, r, index);\n    \n    return v;\n}\n\nV front(vec3 p, int index){\n    V v2 = Intersection(Capsule(p,vec3(7,8,5.), vec3(-7,8,5.), 1., index),\n                          Plane(p,vec3(0.0,-0.2,5.0),vec3(0.0,0.0,5.0),0));\n    \n   // V v2 = Union(v1, v2_1);\n    \n    V v3 = Union(v2, Capsule(p, vec3(0,0,1), vec3(0,3,-1), 1., index));\n    \n    return v3;\n}\n\nV tete_moai(vec3 p, float haut, int index){\n    //corps\n    V v1 = Intersection(Capsule(p, vec3(0,0,10), vec3(0,0,-6), 6., index),\n                      Plane(p,normalize(vec3(-0.2,-0.2,1.0)),vec3(0.,0.,-haut),2));\n    \n    //front coupe                   \n    V v2 = Union(front(p, index), nariz(p,vec3(0,8,5), vec3(0,1,0), 2., index));\n    \n    V v = Union(v1, v2);\n\n    return v1;\n}\n\n\n\n\n\n// Potential field of the object\n// p : point\nV object(vec3 p)\n{\n  V u = Plane(p,normalize(vec3(0.0,0.0,1.0)),vec3(0.0,0.0,-5.0),0);\n  /*\n  u= Union(u, Dice(p, vec3(0.0, 12.0, 2.0), 4.0, 4)); //cube arriere\n  u= Union(u, Dice(p, vec3(-10.0, 0.0, 2.0), 4.0, 2)); //cube gauche\n  u= Union(u, Dice(p, vec3(10.0, 0.0, 2.0), 4.0, 6)); //cube droite\n  u = Union(u, Sphere(p, vec3(0,0,2), 5., 1)); \n  */\n  \n  //il suffit de changer le nombre 1 pour voir les autres textures\n  V v = Union(u,Cube(p, vec3(0,0,0), 5., 2));\n  \n  V c1 = Union(u,tete_moai(p+vec3(0,0,0), -5., 1));\n      \n  return v;\n}\n\n\n\n\n\n\n// Analysis of the scalar field --------------------------------------------------------------------------\n\n// Calculate object normal\n// p : point\nvec3 ObjectNormal(in vec3 p )\n{\n  float eps = 0.001;\n  vec3 n;\n  V vp = object(p);\n    float v = vp.v;\n  n.x = object( vec3(p.x+eps, p.y, p.z) ).v - v;\n  n.y = object( vec3(p.x, p.y+eps, p.z) ).v - v;\n  n.z = object( vec3(p.x, p.y, p.z+eps) ).v - v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance \n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o, vec3 u, float e,out bool h,out int s)\n{\n  h = false;\n\n    // Start at the origin\n    float t=0.0;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = object(p).v;\n    // Hit object\n      if (v < 0.0)\n      {\n          s=i;\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += max(Epsilon,v);\n      // Escape marched too far away\n      if (t>e)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(0.6,0.,0.9),vec3(0.,0.9,0.5), d.z*1.5+0.5);\n}\n\n\n// Direct lighting\nfloat Light(vec3 p,vec3 n)\n{\n   // point light\n  const vec3 lp = vec3(5.0, 10.0, 25.0);\n\n  vec3 l = normalize(lp - p);\n\n  // Phong shading\n  float diff = clamp(dot(n, l),0.0,1.0);\n\n    bool h;\n    int s;\n    float t=SphereTrace(p+0.1*n,l,100.0,h,s);\nif (!h)\n    {\n     return diff;\n    }\n    return 0.0; \n}\n\n\n\n\n\n// Shading and lighting ---------------------------------------------------------------------------\nT Texture0(in vec3 p)\n{\n  return T(vec3(0.4,0.4,0.4), 0.);   //plan\n}\n\nT Texture1(in vec3 p)\n{\n  return T(vec3(Marbre(p)),10.);   //sphere\n}\n\nT Texture2(in vec3 p)\n{\n  return T(vec3(Axial(p.x+100.,p.y+10.,p.z+1.)),0.0);   //cube gauche\n}\n\nT Texture3(in vec3 p)\n{\n  return T(Wood(p, 0.5),0.);   //cube droite\n}\n\nT Texture4(in vec3 p)\n{\n  return T(vec3(0.4,0.,0.4),0.);   //cube arriere\n}\n\nT Texture5(in vec3 p)\n{\n  return T(vec3(Checker(p, 2)),0.0); \n}\n\nT Texture6(in vec3 p)\n{\n  return T(vec3(Granite(p)),0.);   //cube centre2\n}\n\n\n// Compute texture \n// p : Point\n// n : Normal\nT Color(in vec3 p,in vec3 n)\n{\n    V vp= object(p);\n    if (vp.i==0){\n        \n        return Texture0(p);\n    }\n    else if (vp.i==1)\n    {\n        return Texture1(p);\n    }\n    else if (vp.i==2)\n    {\n        return Texture2(p);\n    }\n    else if (vp.i==3)\n    {\n        return Texture3(p);\n    }\n    else if (vp.i==4)\n    {\n        return Texture4(p);\n    }\n    else if (vp.i==5)\n    {\n        return Texture5(p);\n    }\n    \n    else if (vp.i==6)\n    {\n        return Texture6(p);\n    }\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n    bool h;\n    int s;\n    float t = SphereTrace(p,l,100.0,h,s);\n    if (!h)\n    {\n     return 1.0;\n    }\n    return 0.0; \n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p, vec3 n, vec3 e)\n{\n     // Point light\n    const vec3 lp = vec3(5.0, 10.0, 25.0);\n    const vec3 lp1=vec3(-100.,0.,0.);\n    //const vec3 lp2=vec3(0.,40.,10.);\n    \n    // Light direction to point light\n    vec3 l = normalize(lp - p);\n    vec3 l1=normalize(lp1-p);//cote droit\n    //vec3 l2=normalize(lp2-p);//face\n\n    T tex=Color(p,n);\n\n    // Ambient color\n    vec3 ambient = 0.5*tex.c;\n        \n    // Shadow computation\n    float shadow = Shadow(p+0.01*n,n,l);\n    float shadow1=Shadow(p,n,l1);\n    //float shadow2=Shadow(p,n,l2);\n\n    // Phong diffuse\n    vec3 diffuse = 0.5  * clamp(dot(n, l),0.0,1.0) * tex.c;\n    vec3 diffuse1=.35*clamp(dot(n,l1),0.,1.)*vec3(1.,1.,1.);\n    //vec3 diffuse2=.35*clamp(dot(n,l2),0.,1.)*vec3(1.,1.,1.);\n\n    // Specular\n    vec3 r=reflect(e,n);\n    vec3 specular=.15*pow(clamp(dot(r,l),0.,1.),35.)*vec3(1.,1.,1.);\n    vec3 specular1=.15*pow(clamp(dot(r,l1),0.,1.),35.)*vec3(1.,1.,1.);\n    //vec3 specular2=.15*pow(clamp(dot(r,l2),0.,1.),35.)*vec3(1.,1.,1.);  \n  \n    vec3 c=ambient+shadow*(diffuse+specular);\n    vec3 c1=ambient+shadow1*(diffuse1+specular1);\n    //vec3 c2=ambient+shadow2*(diffuse2+specular2);\n  \n    vec3 d = c+c1;\n    return d;\n}\n\n// Picture in picture ------------------------------------------------------------------------------\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n   float t=float(n)/(float(Steps-1));\n   return 0.5+mix(vec3(0.05,0.05,0.5),vec3(0.65,0.39,0.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel, out bool pip)\n{\n    // Pixel coordinates\n    vec2 p = (-iResolution.xy + 2.0*pixel)/iResolution.y;\n   if (pip==true)\n   {    \n    const float fraction=1.0/4.0;\n    // Recompute pixel coordinates in sub-picture\n    if ((pixel.x<iResolution.x*fraction) && (pixel.y<iResolution.y*fraction))\n    {\n        p=(-iResolution.xy*fraction + 2.0*pixel)/(iResolution.y*fraction);\n        pip=true;\n    }\n       else\n       {\n           pip=false;\n       }\n   }\n   return p;\n}\n\n\n// Image\nvoid mainImage( out vec4 color, in vec2 pxy )\n{\n    // Picture in picture on\n    bool pip=true;\n    \n   // Pixel\n     vec2 pixel=Pip(pxy, pip);\n    \n    // Mouse\n    vec2 m=iMouse.xy/iResolution.xy;\n\n    // Camera\n    vec3 ro,rd;\n    Ray(m,pixel,ro,rd);\n\n  // Trace ray\n\n  // Hit and number of steps\n  bool hit;\n  int s;\n\n  float t = SphereTrace(ro, rd, 100.0,hit, s);\n  \n    // Position \n    vec3 pt = ro + t * rd;\n    \n  // Shade background\n  vec3 rgb = background(rd);\n\n  if (hit)\n  {\n    // Compute normal\n    vec3 n = ObjectNormal(pt);\n\n    // Shade object with light\n    rgb = Shade(pt, n, rd);\n  }\n\n  // Uncomment this line to shade image with false colors representing the number of steps\n  if (pip==true)\n  {\n      rgb = ShadeSteps(s); \n  }\n\n\n  color=vec4(rgb, 1.0);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Texturing and noise \n\n// Hashing function\n// Returns a random number in [-1,1]\n// p : Vector in space\nfloat Hash(in vec3 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\n\n\n\n// Procedural value noise with cubic interpolation\n// x : Point \nfloat Noise(in vec3 p)\n{\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n  \n        f = f*f*(5.0-4.1*f);\n    // Could use quintic interpolation instead of cubic\n    // f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix(mix( Hash(i+vec3(0,0,0)), \n                        Hash(i+vec3(1,0,0)),f.x),\n                   mix( Hash(i+vec3(0,1,0)), \n                        Hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( Hash(i+vec3(0,0,1)), \n                        Hash(i+vec3(1,0,1)),f.x),\n                   mix( Hash(i+vec3(0,1,1)), \n                        Hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\n\n\n\nvec3 Noise3(vec3 p) {\n    return vec3(Noise(p), Noise(p), Noise(p));\n}\n\n\nfloat fbm(vec3 p) {\n\treturn (Noise(p) + 0.4*Noise(p/0.4) + 0.3*Noise(p/0.3) + 0.2*Noise(p/0.2)\n            + 0.1*Noise(p/0.1))*0.5;\n}\n\n\n//textures------------------------------------------------------------------------------------\n\n\nfloat Axial ( float x , float y , float z ) {\n    float r = sqrt ( x * x + y *y );\n    return 0.5 + 0.5 * cos (3.1415927 * r ) ;\n}\n\n// dist : distance des cercles\nvec3 Wood(vec3 p, float dist) {\n\n    float d = sqrt(p.x*p.x + p.y * p.y)/dist;\n    d+= 0.6*Noise(p*0.5);\n    \n    float v = sin(d*0.6*3.14);\n    v = (v + 0.7);\n    v = smoothstep(-0.3, v, 0.2);\n\n    return mix(vec3(0.4,0.2,0.),vec3(.7,0.5,0.3),v);\n}\n\nint Checker(vec3 p, int n){\n    return (int(p.x) + int(p.y) + int(p.z)) % n ;\n}\n\nvec4 Veines(vec3 p, float modulo, float smoo, vec3 col) {\n   \n \tvec3 q = p + 2.0*Noise3(p/2.) + 1.*Noise3(p/1.)+ 0.5*Noise3(p/0.5)+ 0.25*Noise3(p/0.25);\n    \n    float z = abs(mod(q.x, modulo));\n    \n    z = smoothstep(smoo,0.,z);\n    \n    // Couleur et transparence\n    return vec4(col, z);\n}\n\nvec3 Marbre(vec3 p) {\n\n    vec4 l1 = Veines(p, 5.0, 0.3, vec3(0.3));\n    vec4 l2 = Veines(p, 2.0, 0.2, vec3(0.65));\n    vec4 l3 = Veines(p, 1.5, 0.1, vec3(0.8));\n    vec4 l4 = Veines(p, 0.75, 0.05, vec3(0.9));\n    \n    // couleur\n    vec3 col = mix(vec3(1.0),vec3(0.9,0.9,0.9),1.0*fbm(p));\n    \n    // lignes de marbre\n    col = mix(col, l4.xyz, l4.w);\n    col = mix(col, l3.xyz, l3.w);\n    col = mix(col, l2.xyz, l2.w);\n    col = mix(col, l1.xyz, l1.w);\n    \n    return col;\n}\n\nvec3 Granite(vec3 p) {\n    \n    vec3 v = Noise3(p)+ 0.3*Noise(p/0.3)+ 0.1*Noise(p/0.1);\n    \n    return v;\n}\n\n\n\n\n/// Segment\n// p : point\n// a,b\nfloat Segment(vec3 p, vec3 a, vec3 b) {\n    vec3 ba = b - a;\n    vec3 pa = p - a;\n    float t = dot(pa, ba) / dot(ba, ba);\n    vec3 c = ba * clamp(t, 0.0, 1.0);\n    return length(pa - c);\n}\n\n\n// Compute the distance to the Voronoi boundary\n// x : Point\n// Return (closest distance, second closest, cell id)\nvec3 Voronoi( in vec3 x )\n{\n    vec3 p = floor( x );\n    vec3 f = fract( x );\n\n\tfloat id = 0.0;\n    vec2 res = vec2( 100.0 );\n    for( int k=-1; k<=1; k++ )\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec3 b = vec3( float(i), float(j), float(k) );\n        vec3 r = vec3( b ) - f + Hash( p + b );\n        float d = dot( r, r );\n\n        if( d < res.x )\n        {\n\t\t\tid = dot( p+b, vec3(.0,.0,.0 ) );\n            res = vec2( d, res.x );\t\t\t\n        }\n        else if( d < res.y )\n        {\n            res.y = d;\n        }\n    }\n\n    return vec3( sqrt( res ), abs(id) );\n}\n\n\n\n\n\n// Camera -----------------------------------------------------------------------\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n    float sa = sin(a); float ca = cos(a); \n    return mat3(ca,sa,0.0,    -sa,ca,0.0,  0.0,0.0,1.0);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(in vec2 m, in vec2 p,out vec3 ro,out vec3 rd)\n{\n    float a = 3.0*3.14*m.x;\n   \tfloat le = 3.8;\n    \n    ro=vec3(40.0,0.0,10.0);\n    ro*=Rz(3.0*3.14*m.x); \n\n    vec3 ta = vec3(0.0,0.0,0.0);\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,0.0,1.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\trd = normalize( p.x*uu + p.y*vv + le*ww );\n}\n\n","name":"Common","description":"","type":"common"}]}