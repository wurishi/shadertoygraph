{"ver":"0.1","info":{"id":"tdXBD8","date":"1588115741","viewed":90,"name":"ValueNoiseTutorial","username":"oroborositron","description":"Some initial experiments with value noise following the Art of Coding tutorial on this subject at https://www.youtube.com/watch?v=zXsWftRdsvU . Thanks! :)","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["valuenoise","artofcoding","youtubetutorial","experimentswithglsl"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float random(vec2 uv)\n{\n\treturn fract(sin(uv.x*123. + uv.y*987.)*456. + cos(uv.y*123. + uv.x*987.)*456.);\n}\n\nfloat flip_coin(vec2 uv)\n{\n\tfloat gen = random(uv);\n    if(gen < 0.5)\n    {\n    \treturn -1.;\n    }\n    else if(gen == 0.5)\n    {\n    \treturn 0.;\n    }\n    else\n    {\n    \treturn +1.;\n    }\n}\n\nfloat smoothNoise(vec2 uv)\n{\n\tvec2 luv = fract(uv);\n    vec2 lid = floor(uv);\n    \n    luv = luv*luv*(3.-2.*luv);\n    \n    float bl = random(lid);\n    float br = random(lid + vec2(1,0));\n    float b = mix(bl, br, luv.x);\n    \n    float tl = random(lid + vec2(0,1));\n    float tr = random(lid + vec2(1,1));\n    float t = mix(tl, tr, luv.x);\n    \n    return mix(b, t, luv.y);\n}\n\nfloat smoothNoiseLayered(vec2 uv, float startingZoom)\n{\n\tfloat o = smoothNoise(uv*startingZoom);\n    //o += smoothNoise(uv * 2.) * 1./2.;\n    //o += smoothNoise(uv * 4.) * 1./4.;\n    o += smoothNoise(uv * startingZoom * 2.) * 1./(2.);\n    o += smoothNoise(uv * startingZoom * 4.) * 1./(4.);\n    o += smoothNoise(uv * startingZoom * 8.) * 1./(8.);\n    o += smoothNoise(uv * startingZoom * 16.) * 1./(16.);\n    \n    return o / 2.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv += vec2(iTime * 0.025, iTime * 0.025);\n    \n    float base = 4.;\n    \n    float rand = 1.2;\n    \n    //rand = fract(uv.x + uv.y + rand);\n    \n    float gen_sign = 1.;\n    \n    float r = smoothNoiseLayered(uv, base + gen_sign * rand);\n    \n    rand = 1.4;\n    \n    //rand = fract(uv.x + uv.y + rand);\n    \n    gen_sign = 1.;\n    \n    float g = smoothNoiseLayered(uv, base + gen_sign * rand);\n    \n    rand = 1.1;\n    \n    //rand = fract(uv.x + uv.y + rand);\n    \n    gen_sign = -1.;\n    \n    float b = smoothNoiseLayered(uv, base + gen_sign * rand);\n    \n    vec3 col = vec3(r, g, b);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}