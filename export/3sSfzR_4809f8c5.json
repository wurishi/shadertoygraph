{"ver":"0.1","info":{"id":"3sSfzR","date":"1589679059","viewed":74,"name":"CMPS163 Lab6","username":"mikkenne","description":"Implemented Lab 6: creating a circle, that loops 3 dimensionally within the screen, sampling an assigned texture as it moves within the space ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["lab6","cmps163"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Mia Kennedy\n//CMPS 163 Lab 6\n//May 12, 2020\n\nfloat distLine(vec3 ro, vec3 rd, vec3 p){\n    //finding the measurements and distance of a parallegram \n    return length(cross(p - ro, rd))/length(rd);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //part 1\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    //vec2 uv = fragCoord/iResolution.xy;\n    \n    //fixes ratio/proportions, so the texture isnt stretched\n   \t//uv.x *= iResolution.x/iResolution.y;\n    \n    //applies the text from iChannel0 \n    //vec4 sampledColor = texture(iChannel0, uv);\n\t//fragColor = vec4(sampledColor.rgb, 1.0);\n    \n    \n    //part 2\n    \n    vec2 uv = fragCoord.xy / iResolution.xy; //0 to 1\n\t//defines midpoint of the screen\n    uv -= .5;\n\t//aspect ratio for a rectangular screen\n    uv.x *= iResolution.x/iResolution.y;\n\n   \t//camera position - distance from camera to the screen is 2 units (ray orgin)\n    vec3 ro = vec3(0.0, 0.0, -2.0);\n    \n    //intersection point (i) on screen (ray direction = i - ro)\n    vec3 rd = vec3(uv.x, uv.y, 0.) - ro;\n     \n    //movement of the circle over time, and size perspective - spinning on the same plane\n    float t = iTime;\n    vec3 p = vec3 (sin(t), 0.0, .8+ cos(t));\n    \n    float d = distLine (ro, rd, p);\n  \n    \n   \t//sample the texture in the channel\n\tvec4 sampledColor = texture(iChannel0,uv);\n    //smoothness of the circle, the size/span - this code eliminates the spread, halo effect of the circle\n    d = smoothstep (.1, .09, d);\n    //fragColor = vec4 (d);\n    //the circle has no color assigned to it, so I multiplied it by the sampledColor so the circle will sample the texture as it spins\n  \tfragColor = sampledColor * d;\n}\n","name":"Image","description":"","type":"image"}]}