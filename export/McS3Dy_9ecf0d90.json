{"ver":"0.1","info":{"id":"McS3Dy","date":"1704568242","viewed":60,"name":"Warping frames","username":"ReasonMaster","description":"Frames","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdBoxFrame( vec3 p, vec3 b, float e )\n{\n       p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5*(a-b)/k, 0.0, 1.0);\n    return mix(a, b, h) - k*h*(1.0-h);\n}\n\nmat2 rot2D(float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\nfloat map(vec3 p, float d)\n{\n    vec3 boxPos = vec3(0, 0, 0);\n    vec3 q = p;\n    q.xz *= rot2D(iTime);\n    //q.yx *= rot2D(-iTime);\n    //q = fract(q) - .5;\n    float box = sdBox(q - boxPos, vec3(.5, .4, .5));\n\n    vec3 boxFramePos = vec3(0, 0, 0);\n    vec3 q0 = p;\n    q0.yx *= rot2D((iTime * .5) + (d * .4));\n    q0 = fract(q0) - .5;\n    \n    float size = .01 + (d * .04);\n    float boxFrame = sdBoxFrame(q0 - boxPos, vec3(size, size, size), .004);\n    \n    vec3 sphere1Pos = vec3(0, 1.3, 0);\n    float sphere1 = sdSphere(q0 - sphere1Pos, (sin(iTime * 2.) * .1) + .3);\n    \n    vec3 sphere2Pos = vec3(0, -1.3, 0);\n    float sphere2 = sdSphere(q0 - sphere2Pos, (cos(iTime * 2.) * .1) + .3);\n    \n    \n    //return min(smin(box, sphere, 1.), boxFrame);\n    //return min(smin(smin(sphere1, boxFrame, 1.), sphere2, 1.), box);\n    return smin(smin(sphere1, boxFrame, 1.), sphere2, 1.);\n    //return min(box, sphere);\n    //return boxFrame;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    \n    float d = length(uv);\n    float d0 = abs(d);\n    d0 = 0.8 / d;\n    vec3 col = vec3(1.0);\n    \n    vec3 ro = vec3(0, 0, iTime); // Ray origin\n    vec3 rd = normalize(vec3(uv, 1)); // Ray direction\n    \n    float t = 0.; // Total distance travelled\n    \n    for (float i = 0.; i < 24.; i++)\n    {\n        vec3 p = ro + (rd * t); // Current position along the ray\n\n        float d = map(p, t);\n\n        t += d;\n        \n        if (d < .001 || t > 100.) break;\n    }\n\n    t = -t - (-3. * 1.7);\n\n    float r = (sin(iTime) * .2) + .2;\n    float g = ((cos(iTime * .5) * .2) + .2) * .5;\n    float b = abs(t * .2);\n    \n    col = vec3(t * r, t * g, t * b) * 1.2;\n    float saturation = 1.;\n    col = (((col - .5) * saturation) + .5);\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}