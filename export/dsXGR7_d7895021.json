{"ver":"0.1","info":{"id":"dsXGR7","date":"1665850607","viewed":155,"name":"Glitchilyglitch","username":"Rloret","description":"Small shader practice with some glitch inspiration as part of the October creative code Jam Berlin 2022 : https://creativecode.berlin/","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["glitch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi acos(-1.)\n#define N(m) (noise(vec3(floor(iTime*m))))\n#define Nd(m,d) (noise(vec3(floor((iTime+d)*m))))\n#define RM(x,l,h)(l + x *(h-l))\n//https://iquilezles.org/articles/palettes/\n#define btf(a) (float(int(a)))\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 2.*pi*(c*t+d) );\n}\nfloat noise(vec3 a)\n{\n    return fract(sin(dot(a,vec3(132.341242,3.432432,17.34242)))*1435.432432);\n}\nvec3 Saw(vec3 x,vec3 d)\n{\n vec3 disp = x+d;\n return 2.0* abs(disp - round(disp));\n}\nvec3 RemapFrom01(vec3 x, float l, float h)\n{\n return l + x *(h-l);\n}\nvec3 ss( vec3 x )\n{\n  return x*x*(3.-2.0*x);\n}\n\nfloat GlitchRectangles(vec2 uv)\n{\n  float ar = iResolution.x/iResolution.y;\n  float row = N(3.)*7. + round(RM(N(15.1),-1.,1.)*1.);\n  float col = 3. + round(RM(N(2.5),-1.,1.)*2.);\n  vec2 d = vec2(col,row);\n  uv.x+=noise(vec3(floor(uv.y*d.y),floor(iTime*0.01),floor(iTime*0.1))) ; \n  uv= floor((uv*d))/d;\n  float n = float(noise(vec3(uv,0))< 0.1);// + RM(N(5.),-0.5,0.5));\n  return n;\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = fragCoord/iResolution.xy;\n   //uv.y+=17.*N(2.5)*2.-1.;\n   uv.y = mod(uv.y,1.);\n   //float disp = ;\n   float ruv = GlitchRectangles(uv)*(btf(Nd(5.0,213.)<0.2));\n   float r = texture(iChannel0,vec2(uv.x + ruv*0.1,uv.y)).x;\n   float guv = GlitchRectangles(uv)*(btf(Nd(3.0,13.)<0.2));\n   float g = texture(iChannel0,vec2(uv.x +guv*0.1,uv.y)).x;\n   float buv = GlitchRectangles(uv)*(btf(Nd(1.0,713.)<0.2));\n   float b = texture(iChannel0,vec2(uv.x + buv*0.1,uv.y)).x;\n\n   vec4 c0 = (vec4(ruv,guv,buv,1.));\n   vec4 c1 = vec4(r,g,b,1.);\n   //fragColor = c0;\n   fragColor = c1;\n}\n \n \n //Rainbow\n//void mainImage( out vec4 fragColor, in vec2 fragCoord )\n//{\n//   vec2 uv = fragCoord/iResolution.xy;\n//   float video = texture(iChannel0,uv).r;\n//   //video=uv.x;\n//   vec3 saw = Saw(vec3(video),vec3(0.5,1.-1./6.,1./6.));\n//   //saw = RemapFrom01(saw,-1./2.,1.); // add this bit if you want all the channels to add up to max 1\n//   saw = clamp(saw,0.,1.);\n//   //saw = ss(saw); //adding a smoothstep to the linear version makes it approximate the cosine version\n//   vec3 rainbow = palette(video,vec3(.5),vec3(.5),vec3(1.),vec3(0.,1./3.,2./3.));\n//   fragColor = vec4(uv.y>.5?rainbow:saw,0);\n//\n//}","name":"Image","description":"","type":"image"}]}