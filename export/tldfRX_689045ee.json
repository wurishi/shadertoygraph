{"ver":"0.1","info":{"id":"tldfRX","date":"1642211203","viewed":98,"name":"nct_clock","username":"Nocturne92","description":"glowing clock with noisy wobbly screen effect","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["clock"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float line(vec2 uv, vec2 p1, vec2 p2) {\n    float d = distance(p1, p2);\n    float duv = distance(p1, uv);\n    \n    float r = clamp(duv/d, .0, 1.);\n    \n    \n    return smoothstep(1., 0., distance(mix(p1, p2, r), uv) / mix(.008, .004, r));\n}\n\nfloat circle(vec2 uv, vec2 c, float r) {\n    return smoothstep(1., 0., abs(distance(uv, c)-r) / .008);\n}\n\nmat2 rot(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    \n    return mat2(c, -s, s, c);\n}\n\nvec2 hash22(vec2 p) {\n\tp = fract(p * vec2(5.3983, 5.4427));\n    p += dot(p.yx, p.xy +  vec2(21.5351, 14.3137));\n\treturn fract(vec2(p.x * p.y * 95.4337, p.x * p.y * 97.597));\n}\n\nvec3 clock(vec2 uv, float t) {\n    vec2 p1 = vec2(0., 0.);\n    vec2 p2 = vec2(0., .13);\n    \n    vec3 col = vec3(0.);\n    \n    col += line(uv, p1, p2 * .6 * rot(-t)) * vec3(1,0,0);\n    col += line(uv, p1, p2 * rot(-t * 12.));\n    \n    for (float i = 0.; i < 12.; i++) {\n        vec2 _p1 = vec2(.15, .0);\n        vec2 _p2 = vec2(.18, .0);\n        \n        float a = 6.283 / 12. * i;\n        \n        col += line(uv, _p1*rot(a), _p2*rot(a));\n    }\n    \n    col += circle(uv, vec2(0.), .2);\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    uv /= 2.;\n\n    // Time varying pixel color\n    vec3 col = vec3(0.);\n    \n    float t = iTime / 4.;\n    \n    col += clock(uv, t);\n    col += vec3(length(clock(uv + vec2(sin(uv.y * 120. + 12.*-t)*.003, 0.), t))) * .6 * vec3(0,0,1);\n    col += vec3(length(clock(uv + vec2(sin(uv.y * 120. + 12.*-t)*.005, 0.), t))) * .6 * vec3(0,.5,1);\n    col += vec3(length(clock(uv + hash22(uv+vec2(t))*vec2(.02, .01)-vec2(.01, .005), t))) * (sin(uv.y * 24. + 12.*t)*.3+.3) * vec3(1,0,0);\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}