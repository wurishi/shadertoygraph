{"ver":"0.1","info":{"id":"mtd3Dj","date":"1683159819","viewed":119,"name":"Harderstep","username":"MartyMcFly","description":"The ubiquitous smoothstep function y(x) = x²(3-2x) is part of a family of sigmoid functions with increasingly curvier appearance and steeper midsection. But what if you need the opposite, a more linear smoothstep with derivative = 0 at start at end?","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["smoothstep","cubic","interpolation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Layout thanks to IQ: https://www.shadertoy.com/view/MsSBRh\n\n// Harderstep - a harder smoothstep!\n\n// The ubiquitous smoothstep function y(x) = x²(3-2x) is part of a family of \n// sigmoid functions.\n\n// With increasingly higher order, their midsection gets a steeper slope.\n// While this is sometimes desired, what if need the opposite, a more linear\n// function that still retains the advantageous zero-slope properties at start\n// and end?\n\n// Here's how it works:\n//\n// The derivative of smoothstep is 6x - 6x^2 which is zero at both x=0 and x=1\n// and is symmetric.\n//\n// To get a more linear midsection, all we need to do is produce something like\n// this upside down parabola but with a flatter midsection (flatter derivative->more linear slope).\n// \n// Now, abs(x)^n becomes increasingly flatter at the bottom and steeper on the outsides.\n// flipping it upside down, rescaling gives us the desired slope.\n// Integrating it, fixing offset and scale, done.\n\n// Since it's a high degree polynomial, it's highly continuous at 0 and 1 as well.\n\n\nfloat harderstep(float x, float a)\n{\n    float b = 1.0 - 2.0 * x;\n    return (sign(b) * (pow(abs(b), a)) + 2.0 * a * x - 1.0) / (2.0 * a - 2.0);\n}\n\n\n// y = x²(3-2x)\nfloat my_smoothstep( float x )\n{\n    return x*x*(3.0-2.0*x);\n}\n\nfloat smootherstep(float x)\n{\n  return x * x * x * (x * (x * 6.0 - 15.0) + 10.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    float dx = 1.0/iResolution.y;\n    vec2  p = ( vec2((iResolution.y-iResolution.x)/2.0,0.0)+fragCoord)/iResolution.y;\n    \n    vec3 col = vec3(0.0);\n    \n    if( p.x>0.0 && p.x<1.0 )\n    {\n        // background\n        col = vec3( 0.2 + 0.02*mod(floor(p.x*10.0)+floor(p.y*10.0),2.0) );           \n        \n        // blue: smoothstep\n        {\n        float y = my_smoothstep( p.x );\n        float di = abs(p.y-y)/0.002;\n        col = mix( col, vec3(0.0,0.4,0.8), 1.0-smoothstep( 0.0, 4.0, di ) );\n        } \n        // blue: smootherstep\n        {\n        float y = smootherstep( p.x );\n        float di = abs(p.y-y)/0.002;\n        col = mix( col, vec3(0.0,0.4,0.8), 1.0-smoothstep( 0.0, 4.0, di ) );\n        }\n        // yellow: harderstep\n        for(float b = 0.0; b < 8.0; b++)\n        {\n            float y = harderstep( p.x, 3.0 + exp2(b));\n            float di = abs(p.y-y)/0.002;\n            col = mix( col, vec3(1.0,0.7,0.0), 0.5 * (1.0-smoothstep( 0.0, 4.0, di)));\n        }        \n    }\n    \n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}