{"ver":"0.1","info":{"id":"WlsSRB","date":"1569025516","viewed":346,"name":"Times Table","username":"Deirin","description":"First attempt at shader coding. Idea stolen from this video: https://www.youtube.com/watch?v=qhbuKbxJsk8 . You can try and change the timesTableSubject variable on top while the shader time is stopped to see some interesting patterns displayed.","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["2d","math","sdf","rainbow","timestables"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int pointsCount = 99;\nfloat radius    = .45;\nconst float thickness = .0005;\nfloat timesTableSubject = 1.;\nconst float colorIntensity = 2.;\nconst float TAU = 6.28318530718;\nconst float speed = .8;\n\nfloat Circle( in vec2 c, in float r ) {\n    return length( c ) - r;\n}\n\nfloat Union( in float a, in float b ) {\n    return min( a, b );\n}\n\nfloat sdLine( in vec2 p, in vec2 a, in vec2 b ) {\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv     = fragCoord / iResolution.xy;    \n    vec2 center = ( uv - .5 );\n    float angle = TAU / float( pointsCount );\n    \n    timesTableSubject += iTime * speed;\n    \n    center.x *= iResolution.x / iResolution.y;   \n    \n    radius += abs(sin(iTime)) * .05;\n    float sdf = Circle( center, radius );\n    sdf       = abs( sdf ) - thickness;\n    \n    for( int i = 0; i < pointsCount; i++ ) {\n        vec2 sPoint = vec2( cos( angle * float(i) ) * radius + center.x, sin( angle * float(i) ) * radius + center.y );\n        int targetPointIndex = int( mod( ( float( i + 1 ) ) * timesTableSubject, float( pointsCount ) ) );\n        vec2 tPoint = vec2( cos( angle * float(targetPointIndex) ) * radius + center.x, sin( angle * float(targetPointIndex) ) * radius + center.y );\n        sdf = Union( sdf, sdLine( vec2(0.,0.), sPoint, tPoint) );\n    }\n    \n    float pulseCircle = abs( Circle(center, fract(iTime*.8))) - thickness;\n    sdf = min(sdf, pulseCircle);\n    sdf = smoothstep(0.005, 0.0, sdf);\n    float bg = sin(Circle(center,radius));\n    bg = min(bg, sin(bg*130.*sin(iTime)));\n    sdf = max(bg, sdf);\n    \n    fragColor = vec4( vec3( sin(iTime)*.5+.5,sin(iTime+TAU/3.)*.5+.5,sin(iTime+TAU*2./3.)*.5+.5) * sdf * colorIntensity, 1 );\n}","name":"Image","description":"","type":"image"}]}