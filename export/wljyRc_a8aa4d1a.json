{"ver":"0.1","info":{"id":"wljyRc","date":"1594998152","viewed":228,"name":"lightning 2d","username":"DarkWyvren","description":"partly inspired by celeste\nepilespy warning","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["lightning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159;\nvec3 ltcol1 = vec3(0.6,0.8,0.9);\nvec3 ltcol2 = vec3(0.9,0.8,0.6);\nfloat zigzag(float x){\n\treturn asin(sin(x));\n}\n\nfloat zigzagwobble(float x){\n\treturn (zigzag(x*0.2)+zigzag(x)+0.3*zigzag(2.*x)+0.2*zigzag(5.*x)+0.1*zigzag(7.*x))/2.6;\n}\n\nfloat saw(float x){\n\treturn ((1.0-mod(x,1.0))-0.5)*2.0;\n}\n\nfloat sawwobble(float x){\n\treturn (saw(x*0.2)+saw(x)+0.3*saw(2.*x)+0.2*saw(5.*x)+0.1*saw(7.*x))/2.6;\n}\nmat2 rotation2d(float angle) {\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\n\n\treturn mat2(\n\t\tc, -s,\n\t\ts, c\n\t);\n}\n\nfloat hash(float n) { return fract(sin(n) * 1e4); }\nfloat hash(vec2 p) { return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); }\nfloat blend(float f){return f * f * (3.0 - 2.0 * f);}\nfloat noise(float x) {\n\tfloat i = floor(x);\n\tfloat f = fract(x);\n\tfloat u = f;\n\treturn mix(hash(i), hash(i + 1.0), u);\n}\n\nfloat noise(vec2 x) {\n\tvec2 i = floor(x);\n\tvec2 f = fract(x);\n\tfloat a = hash(i);\n\tfloat b = hash(i + vec2(1.0, 0.0));\n\tfloat c = hash(i + vec2(0.0, 1.0));\n\tfloat d = hash(i + vec2(1.0, 1.0));\n\tvec2 u = f;\n\treturn mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\nfloat localisednoise(vec2 x) {\n\treturn hash(floor(x));\n}\n\nfloat octavednoise(vec2 x) {\n\treturn (noise(x)+noise(x*2.0+ltcol1.xy)*0.5+noise(x*4.0+ltcol1.yz)*0.35)/1.85;\n}\n\nfloat sdfLine(vec2 pos,float thicc){\n\treturn abs(pos.x)-thicc;\n}\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nfloat lightning(vec2 pos,float toffset,out float thicc){\n    float on = octavednoise(1.0*pos);\n\tmat2 rot = rotation2d((PI*0.5)*(floor(localisednoise(pos)*2.0)+0.5));\n    vec2 distortuv = (mod(pos,vec2(1.0))-vec2(0.5,0.5))*rot;\n    float p = abs(sdBox(mod(pos,vec2(1.0))-vec2(0.5),vec2(0.5)));\n    \n    float zig = 2.*zigzagwobble((on-0.5)*15.)*p;\n    thicc = map(sawwobble(iTime + toffset),0.2,0.5,0.0,1.0);\n    distortuv +=rot*vec2(zig,0.);\n    return sdfLine(distortuv,0.05*thicc);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x*=(iResolution.x/iResolution.y);\n\tvec2 pos = 1.0*uv+vec2(iTime*0.1);\n    // Time varying pixel color\n    vec3 bgcol1 = vec3(0.14,0.2,0.3);\n    vec3 bgcol2 = vec3(0.12,0.13,0.23);\n    float on = octavednoise(1.0*pos);\n    vec3 col = mix(bgcol1,bgcol2,on);\n    float mthic;\n    float outthic;\n    float t =lightning(pos,0.0,outthic);\n    mthic = max(mthic,outthic);\n    float t2 =lightning( rotation2d(0.1)*pos,0.5,outthic);\n    mthic = max(mthic,outthic);\n    float t3 =lightning( rotation2d(0.5)*pos*1.6,2.0-iTime*0.23,outthic);\n    mthic = max(mthic,outthic);\n    \n    //bg flash\n    float flashamount=2.0;\n    float flashcutoff=0.8;\n    \n     col = mix(col,ltcol2,max(0.,flashamount*(mthic-flashcutoff)));\n    \n    //lightning colors\n    if(t3<0. ){\n\t\tcol = ltcol2;\n\t}\n    if(t<0. ||t2<0.){\n\t\tcol = ltcol1;\n\t}\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}