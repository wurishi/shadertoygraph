{"ver":"0.1","info":{"id":"3tdfzM","date":"1612435060","viewed":100,"name":"Subsurface Rabbit","username":"denosya","description":"SSS","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sss"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Neuronal rabbit model comes from : \n// https://www.shadertoy.com/view/wtVyWK\n\n\n/////////////////////////////////////////////////////////////////////\n// Exercice : rendu avec Subsurface Scattering\n/////////////////////////////////////////////////////////////////////\nfloat computeThickness(in vec3 lightSource, in vec3 p, in vec3 normal, float thickness_max);\n\nvec4 computeColor(in vec3 ray, in vec3 p, in vec3 normal, in vec3 lightSource) {\n    \n    \n    lightSource = vec3(200,0,1000);\n    \n    vec3 light = normalize(p-lightSource);\n    \n    float thickness = computeThickness(lightSource, p, normal, 0.2);\n\n    float distorsion = +0.5;\n    float diffuse = clamp(dot(normal, light), 0.0, 1.0) * 1.;\n    vec3 outlight = normalize(light + normal * distorsion);\n    float scatter = clamp(dot(-ray, outlight), 0.0, 1.0) * 1. * (1.0 - thickness);\n    \n    scatter = pow(scatter, 2.0) * 5.0;\n\n    vec4 outter_color   = vec4(0, 179, 255, 255)/255. * 0.5;    \n    vec4 inner_color    = vec4(0, 179, 255, 255)/255.;\n    vec4 specular_color = vec4(252, 152, 3, 255)/255.;specular_color=vec4(1);\n\n    float specular = clamp(pow(max(dot(reflect(normal, -light), ray), 0.0), 15.0), 0.0, 1.0) ;\n\n    vec3 refraction = refract(ray, normal, 1.0/1.8);\n    vec4 refr = texture(iChannel0, refraction);\n    \n    vec4 envmap = texture(iChannel0, reflect(ray, normal));\n    \n    //return refr;\n   // return vec4(hilight);\n   \n   vec4 solidRender = specular_color*specular + outter_color * (0.15 + diffuse) + inner_color * (0.25 + scatter);    \n   \n   return mix(solidRender, refr, 0.25);\n}\n\n\nfloat map(vec3 p);\n\n\nfloat computeThickness(in vec3 lightSource, in vec3 p, in vec3 normal, float thickness_max) {\n\n\n    float scan_step = 0.01;\n    vec3  scan_dir = normalize(lightSource-p);\n    \n    vec3 pIn = p;\n    vec3 pOut = p;\n    \n    for(float i=0.0; i<thickness_max; i+=scan_step) {\n    \n        vec3 m = p + i * scan_dir;\n    \n        float dist = map(m);\n    \n        if(dist<0.001) {\n            pOut = m;\n        }\n        else {\n            pOut -= scan_dir * dist;        \n            break;\n        }\n    }\n    \n    return length(pIn - pOut) / thickness_max;\n}\n\n\n\nfloat map(vec3 m) {\n    \n    \n    //return length(m - vec3(0,0,5)) - 2.;\n    \n    \n    return sdRabbit(m, iTime);\n\n\n\tvec3 sphereCenter = vec3(sin(iTime)*4.0, 0.0, +20.0);\n    float radius = 6.0+sin(iTime)*0.25;\n    return length(m - sphereCenter) - radius + sin(m.x)*sin(m.y)*sin(m.z);\n}\n\nbool rayMarching(in vec3 origin, in vec3 ray, out vec3 m) {\n\n    const float zFar  = 40.0;\n\n    float\tmarchingDist = 0.0;\n    float \tnbIter \t\t = 0.0;\n    for(int i = 0; i<200; i++) {\n        m = origin + ray * marchingDist;    \n    \tfloat dist = map(m);\n        if(dist < 0.001) {\n            return true;\n        }\n        else {\n            marchingDist += dist * 0.75;\n            if(marchingDist >= zFar) {\n                break;\n            }\n        }\n    }\n\treturn false;    \n}\n\nvec3 computeNormal(in vec3 pos)\n{\n\tvec3 eps = vec3( 0.01, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t     map(pos+eps.xyy) - map(pos-eps.xyy),\n\t     map(pos+eps.yxy) - map(pos-eps.yxy),\n\t     map(pos+eps.yyx) - map(pos-eps.yyx));\n\treturn normalize(nor);\n}\n\n\nvec4 run(in vec2 fragCoord) {\n    float \tratio \t\t\t= iResolution.x/iResolution.y;\n    vec3 \tviewportCoord \t= vec3(fragCoord.xy/iResolution.y - vec2(ratio/2.0, 0.5), 1.);\n    vec3\teye\t\t\t\t= vec3(0.0, 0.0, -1.850);\n    vec3\tray\t\t\t\t= normalize(viewportCoord);\n    vec3\tp;\n    \n    vec3\tlightSource\t\t= vec3(-20.0, 0.0, 40.0);\n    \n    if(rayMarching(eye, ray, p)) {\n        vec3 normal = computeNormal(p);\n        return computeColor(ray, p, normal, lightSource);\n    }\n    else {\n        return texture(iChannel0, ray);       \n    }\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    fragColor = run(fragCoord); \n}\n\n\n\n\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float sdRabbit(vec3 p, float t) {\n\n    p = vec3(p.x,p.y*cos(-3.14/2.0)+p.z*sin(-3.14/2.0),-p.y*sin(-3.14/2.0)+p.z*cos(-3.14/2.0));\n    p = vec3(p.x*cos(t/9.0)+p.y*sin(t/9.0),-p.x*sin(t/9.0)+p.y*cos(t/9.0), p.z); \n\n    //sdf is undefined outside the unit sphere, uncomment to witness the abominations\n    if (length(p) > 1.) {\n        return length(p)-.8;\n    }\n    //neural networks can be really compact... when they want to be\n    vec4 f00=sin(p.y*vec4(-3.02,1.95,-3.42,-.60)+p.z*vec4(3.08,.85,-2.25,-.24)-p.x*vec4(-.29,1.16,-3.74,2.89)+vec4(-.71,4.50,-3.24,-3.50));\n    vec4 f01=sin(p.y*vec4(-.40,-3.61,3.23,-.14)+p.z*vec4(-.36,3.64,-3.91,2.66)-p.x*vec4(2.90,-.54,-2.75,2.71)+vec4(7.02,-5.41,-1.12,-7.41));\n    vec4 f02=sin(p.y*vec4(-1.77,-1.28,-4.29,-3.20)+p.z*vec4(-3.49,-2.81,-.64,2.79)-p.x*vec4(3.15,2.14,-3.85,1.83)+vec4(-2.07,4.49,5.33,-2.17));\n    vec4 f03=sin(p.y*vec4(-.49,.68,3.05,.42)+p.z*vec4(-2.87,.78,3.78,-3.41)-p.x*vec4(-2.65,.33,.07,-.64)+vec4(-3.24,-5.90,1.14,-4.71));\n    vec4 f10=sin(mat4(-.34,.06,-.59,-.76,.10,-.19,-.12,.44,.64,-.02,-.26,.15,-.16,.21,.91,.15)*f00+\n        mat4(.01,.54,-.77,.11,.06,-.14,.43,.51,-.18,.08,.39,.20,.33,-.49,-.10,.19)*f01+\n        mat4(.27,.22,.43,.53,.18,-.17,.23,-.64,-.14,.02,-.10,.16,-.13,-.06,-.04,-.36)*f02+\n        mat4(-.13,.29,-.29,.08,1.13,.02,-.83,.32,-.32,.04,-.31,-.16,.14,-.03,-.20,.39)*f03+\n        vec4(.73,-4.28,-1.56,-1.80))/1.0+f00;\n    vec4 f11=sin(mat4(-1.11,.55,-.12,-1.00,.16,.15,-.30,.31,-.01,.01,.31,-.42,-.29,.38,-.04,.71)*f00+\n        mat4(.96,-.02,.86,.52,-.14,.60,.44,.43,.02,-.15,-.49,-.05,-.06,-.25,-.03,-.22)*f01+\n        mat4(.52,.44,-.05,-.11,-.56,-.10,-.61,-.40,-.04,.55,.32,-.07,-.02,.28,.26,-.49)*f02+\n        mat4(.02,-.32,.06,-.17,-.59,.00,-.24,.60,-.06,.13,-.21,-.27,-.12,-.14,.58,-.55)*f03+\n        vec4(-2.24,-3.48,-.80,1.41))/1.0+f01;\n    vec4 f12=sin(mat4(.44,-.06,-.79,-.46,.05,-.60,.30,.36,.35,.12,.02,.12,.40,-.26,.63,-.21)*f00+\n        mat4(-.48,.43,-.73,-.40,.11,-.01,.71,.05,-.25,.25,-.28,-.20,.32,-.02,-.84,.16)*f01+\n        mat4(.39,-.07,.90,.36,-.38,-.27,-1.86,-.39,.48,-.20,-.05,.10,-.00,-.21,.29,.63)*f02+\n        mat4(.46,-.32,.06,.09,.72,-.47,.81,.78,.90,.02,-.21,.08,-.16,.22,.32,-.13)*f03+\n        vec4(3.38,1.20,.84,1.41))/1.0+f02;\n    vec4 f13=sin(mat4(-.41,-.24,-.71,-.25,-.24,-.75,-.09,.02,-.27,-.42,.02,.03,-.01,.51,-.12,-1.24)*f00+\n        mat4(.64,.31,-1.36,.61,-.34,.11,.14,.79,.22,-.16,-.29,-.70,.02,-.37,.49,.39)*f01+\n        mat4(.79,.47,.54,-.47,-1.13,-.35,-1.03,-.22,-.67,-.26,.10,.21,-.07,-.73,-.11,.72)*f02+\n        mat4(.43,-.23,.13,.09,1.38,-.63,1.57,-.20,.39,-.14,.42,.13,-.57,-.08,-.21,.21)*f03+\n        vec4(-.34,-3.28,.43,-.52))/1.0+f03;\n    f00=sin(mat4(-.72,.23,-.89,.52,.38,.19,-.16,-.88,.26,-.37,.09,.63,.29,-.72,.30,-.95)*f10+\n        mat4(-.22,-.51,-.42,-.73,-.32,.00,-1.03,1.17,-.20,-.03,-.13,-.16,-.41,.09,.36,-.84)*f11+\n        mat4(-.21,.01,.33,.47,.05,.20,-.44,-1.04,.13,.12,-.13,.31,.01,-.34,.41,-.34)*f12+\n        mat4(-.13,-.06,-.39,-.22,.48,.25,.24,-.97,-.34,.14,.42,-.00,-.44,.05,.09,-.95)*f13+\n        vec4(.48,.87,-.87,-2.06))/1.4+f10;\n    f01=sin(mat4(-.27,.29,-.21,.15,.34,-.23,.85,-.09,-1.15,-.24,-.05,-.25,-.12,-.73,-.17,-.37)*f10+\n        mat4(-1.11,.35,-.93,-.06,-.79,-.03,-.46,-.37,.60,-.37,-.14,.45,-.03,-.21,.02,.59)*f11+\n        mat4(-.92,-.17,-.58,-.18,.58,.60,.83,-1.04,-.80,-.16,.23,-.11,.08,.16,.76,.61)*f12+\n        mat4(.29,.45,.30,.39,-.91,.66,-.35,-.35,.21,.16,-.54,-.63,1.10,-.38,.20,.15)*f13+\n        vec4(-1.72,-.14,1.92,2.08))/1.4+f11;\n    f02=sin(mat4(1.00,.66,1.30,-.51,.88,.25,-.67,.03,-.68,-.08,-.12,-.14,.46,1.15,.38,-.10)*f10+\n        mat4(.51,-.57,.41,-.09,.68,-.50,-.04,-1.01,.20,.44,-.60,.46,-.09,-.37,-1.30,.04)*f11+\n        mat4(.14,.29,-.45,-.06,-.65,.33,-.37,-.95,.71,-.07,1.00,-.60,-1.68,-.20,-.00,-.70)*f12+\n        mat4(-.31,.69,.56,.13,.95,.36,.56,.59,-.63,.52,-.30,.17,1.23,.72,.95,.75)*f13+\n        vec4(-.90,-3.26,-.44,-3.11))/1.4+f12;\n    f03=sin(mat4(.51,-.98,-.28,.16,-.22,-.17,-1.03,.22,.70,-.15,.12,.43,.78,.67,-.85,-.25)*f10+\n        mat4(.81,.60,-.89,.61,-1.03,-.33,.60,-.11,-.06,.01,-.02,-.44,.73,.69,1.02,.62)*f11+\n        mat4(-.10,.52,.80,-.65,.40,-.75,.47,1.56,.03,.05,.08,.31,-.03,.22,-1.63,.07)*f12+\n        mat4(-.18,-.07,-1.22,.48,-.01,.56,.07,.15,.24,.25,-.09,-.54,.23,-.08,.20,.36)*f13+\n        vec4(-1.11,-4.28,1.02,-.23))/1.4+f13;\n    float mesh = dot(f00,vec4(.09,.12,-.07,-.03))+dot(f01,vec4(-.04,.07,-.08,.05))+\n        dot(f02,vec4(-.01,.06,-.02,.07))+dot(f03,vec4(-.05,.07,.03,.04))-0.16;\n        \n    //float eye1 = 99.;//length(pp - vec3(-0.15, -0.482, 0.25)) - 0.12;\n    //return min(mesh, eye1);\n    \n    return mesh;\n}\n\n","name":"Common","description":"","type":"common"}]}