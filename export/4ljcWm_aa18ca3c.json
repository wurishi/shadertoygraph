{"ver":"0.1","info":{"id":"4ljcWm","date":"1508838692","viewed":1542,"name":"Unity BRDF","username":"dmemes","description":"Unity standard BRDF, available at https://unity3d.com/get-unity/download/archive (UnityStandardBRDF.cginc). Based off Disney's work.\nI'm still trying to learn how it works.\nmouse left->right: increasing smoothness\nmouse top->bottom: increasing metallic","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["brdf","unity"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define saturate(x) clamp(x, 0.0, 1.0)\n#define PI 3.141592654\n#define INV_PI 0.3183098862\n#define DielectricSpec vec4(0.22, 0.22, 0.22, 0.779)\n#define CellSize (1.0 / 3.0)\n#define LightColor vec3(1.0, 1.0, 1.0)\n// Border in pixels\n#define Border 1.0\n#define GridLayout 0\n#define Ambient vec3(.2)\n\nfloat Pow5(float x) {\n    return x*x*x*x*x;\n}\nvec3 DiffuseAndSpecularFromMetallic (vec3 albedo, float metallic, out vec3 specColor, out float oneMinusReflectivity) {\n    specColor = mix (DielectricSpec.rgb, albedo, metallic);\n    float oneMinusDielectricSpec = DielectricSpec.a;\n    oneMinusReflectivity = oneMinusDielectricSpec - metallic * oneMinusDielectricSpec;\n    return albedo * oneMinusReflectivity;\n}\n\nfloat SmithJointGGXVisibility(float NdotL, float NdotV, float roughness) {\n    // Approximation (simplify sqrt)\n    float a = roughness;\n    float lambdaV = NdotL * (NdotV * (1.0 - a) + a);\n    float lambdaL = NdotV * (NdotL * (1.0 - a) + a);\n\n    return 0.5 / (lambdaV + lambdaL + 1e-5);\n}\nfloat GGX(float NdotH, float roughness) {\n    float a2 = roughness * roughness;\n    float d = (NdotH * a2 - NdotH) * NdotH + 1.0;\n    return INV_PI * a2 / (d * d + 1e-7);\n}\nvec3 Fresnel(vec3 F0, float cosA) {\n    float t = Pow5(1.0 - cosA); // ala Schlick interpoliation\n    return F0 + (1.0 - F0) * t;\n}\nvec3 FresnelLerp(vec3 F0, vec3 F90, float cosA) {\n    float t = Pow5 (1.0 - cosA); // ala Schlick interpoliation\n    return mix(F0, F90, t);\n}\n\nfloat DisneyDiffuse(float NdotV, float NdotL, float LdotH, float perceptualRoughness){\n    float fd90 = 0.5 + 2.0 * LdotH * LdotH * perceptualRoughness;\n    // Two schlick fresnel term\n    float lightScatter   = (1.0 + (fd90 - 1.0) * Pow5(1.0 - NdotL));\n    float viewScatter    = (1.0 + (fd90 - 1.0) * Pow5(1.0 - NdotV));\n\n    return lightScatter * viewScatter;\n}\n\nvec3 Background(vec3 rd, vec3 light){\n    vec3 col = vec3(0.0);\n    \n    float y = max(rd.y,0.0);\n    col = vec3(pow(1.0-y,2.0), 1.0-y, 0.6+(1.0-y)*0.4);\n    \n    if (y < 0.1)\n    \tcol = mix(col, vec3(0.5), clamp(-(y - .1) * 10.0, 0.0, 1.0));\n    \n    float sun = dot(rd, light);\n    if (sun > 0.0)\n        col += vec3(pow(sun, 5.0));\n        \n    return col;\n}\n\nvec3 BRDF(vec3 albedo, float metallic, float  smoothness, vec3 normal, vec3 view, vec3 light){\n    float oneMinusReflectivity;\n    vec3 specular;\n    vec3 diffuse = DiffuseAndSpecularFromMetallic(albedo, metallic, specular, oneMinusReflectivity);\n    \n    vec3 halfdir = normalize(view + light);\n    float nv = abs(dot(normal, view));\n    \n    float nl = saturate(dot(normal, light));\n    float nh = saturate(dot(normal, halfdir));\n    float lv = saturate(dot(light, view));\n    float lh = saturate(dot(light, halfdir));\n    \n    float diff = DisneyDiffuse(nv, nl, lh, 1.0 - smoothness) * nl;\n    float roughness = (1.0 - smoothness) * (1.0 - smoothness);\n\t\n    roughness = max(.002, roughness);\n    float V = SmithJointGGXVisibility(nl, nv, roughness);\n    float D = GGX(nh, roughness);\n    \n    float spec = V * D * PI;\n    spec = max(0.0, spec * nl);\n    \n    float surfaceReduction = 1.0 / (roughness * roughness + 1.0);\n    vec3 grazing = vec3(saturate(smoothness + oneMinusReflectivity));\n    \n    // vec3 reflected = Background(reflect(view,normal), light); TODO\n    \n    return \n        diffuse * (Ambient + diff * LightColor)\n        + spec * specular * LightColor * Fresnel(specular, lh);\n        + surfaceReduction * specular * FresnelLerp(specular, grazing, nv);\n}\n\nvec2 RaySphere(in vec3 ro, in vec3 rd, in float rad) {\n\tfloat b = 2.0 * dot(ro, rd);\n    float c = dot(ro,ro) - rad*rad;\n    float det = b*b - 4.0 * c;\n    if (det > 0.0){\n        det = sqrt(det);\n        vec2 i = vec2(0.5 * (-b - det), 0.5 * (-b + det));\n    \tif (i.x > i.y) return i.yx;\n        return i.xy;\n    }\n    return vec2(-1.0, -1.0);\n}\nvec3 trace(vec3 ro, vec3 rd, float radius, vec3 albedo, float metallic, float smoothness){\n    vec3 light = normalize(\n        vec3(\n            sin(iTime),\n            cos(iTime),\n            -(1.0-sin(iTime * 1.2 + .5) * cos(iTime * .5)*.5+.5)));\n    \n    vec2 intersect = RaySphere(ro, rd, radius);\n    \n    if (intersect.x > 0.0 && intersect.y > 0.0){\n        vec3 normal = normalize(ro + rd * intersect.x);\n        \n        return BRDF(albedo, metallic, smoothness, normal, rd, light);\n    }\n    \n    return Background(rd, light);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 coord = fragCoord;\n    vec2 size;\n    float metallic, smoothness;\n    \n    vec3 albedo = vec3(\n        sin(iTime),\n        cos(iTime* 1.1),\n        sin(iTime * .8 - .5)) * .5 + .5;\n    \n    #if GridLayout\n    size = iResolution.xy * CellSize;\n    vec2 cell = floor(coord / size);\n    \n    metallic = cell.x * CellSize;\n    smoothness = 1.0 - cell.y * CellSize\n    \n    coord = mod(coord, size);\n    \n    \n    if (coord.x < Border || coord.x > size.x - Border || coord.y < Border || coord.y > size.x - Border){\n        fragColor = vec4(albedo, 1.0);\n        return;\n    }\n    #else\n    size = iResolution.xy;\n    metallic = 1.0 - iMouse.y / iResolution.y;\n    smoothness = iMouse.x / iResolution.x;\n    #endif\n    \n\tvec3 rd = vec3(coord / size, 0.0);\n    rd = rd * 2.0 - 1.0;\n    rd.y *= size.y / size.x;\n    rd = normalize(vec3(rd.xy, 1.0));\n    \n    vec3 color = trace(vec3(0.0, 0.0, -2.5), rd, 1.0, albedo, metallic, smoothness);\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}