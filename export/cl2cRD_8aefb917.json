{"ver":"0.1","info":{"id":"cl2cRD","date":"1691530674","viewed":37,"name":"Fixed FPS Experiment","username":"beans_please","description":"Adjusting the amount of computation in order to keep the FPS constant.\nMight take up to 20 seconds to reach the target FPS.\nDoesn't work well on my phone, probably because of 16 bit precision.","likes":0,"published":3,"flags":32,"usePreview":0,"tags":["fps","constant"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    fragColor = texelFetch(iChannel0, ivec2(0), 0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Target FPS and delta time\n    const float targetFPS = 42.;\n    const float targetDT = 1. / targetFPS;\n    \n    // prevN = Number of computations in the previous frame\n    float prevN = texelFetch(iChannel0, ivec2(0), 0).x;\n    if (prevN < 2.) prevN = 2.;\n    \n    // Calculate new N\n    float n;\n    if (iTimeDelta < targetDT)\n    {\n        float targetN = prevN * 1.01;\n        n = max(targetN, prevN + .5);\n    }\n    else\n    {\n        float targetN = prevN * 0.99;\n        n = min(targetN, prevN - .5);\n    }\n    \n    // Heavy ish computations\n    float a = 2. + fragCoord.x;\n    int n_int = max(int(floor(n)), 1);\n    for (int i = 0; i < n_int; i++)\n    {\n        a *= (a + 0.5);\n        a /= 0.01 + 0.02*a;\n        a /= (a + 9.);\n        a = sqrt(a);\n        //a /= pow(a, 2.5 * log2(a));\n    }\n    \n    // Output\n    fragColor = vec4(n, 0.0, a, 1.0);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}