{"ver":"0.1","info":{"id":"4XsBRj","date":"1728657661","viewed":113,"name":"Xeno_Julia","username":"kosalos","description":"based on \"Negative powers and Xenobulbs\" thread by 3Dickulus\nhttps://fractalforums.org/index.php?topic=5097.msg37246#msg37246","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["raymarching","3dfractal"],"hasliked":0,"parentid":"l3lfzB","parentname":"Apollonian_Lighted"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float maxSteps = 5.;\nfloat power = -10.;\nfloat bailout = 1.29;\nfloat derivativeBias = 5.02;\nvec3  julia = vec3(0.30554, -1.17, -0.17);\nvec2  angle = vec2(-6.34313, 11.65953);\nfloat drOffset = 1.3476;\nvec3  swizzle = vec3(-0.79147,0.0769, -0.70809);\n\nvec3 camera = vec3(0.2498, -2.1271366, -1.02129);\nvec3 aim = vec3(-0.06654, 0.90400, 0.42232);\nfloat ostrength = 0.;\nfloat ocycle = 0.;\nvec4 orbit2 = vec4( 0.38347405, 1.86336986, -0.01788503, -2.71105793);\nvec4 orbit3 = vec4(0.87534959, 1.04847687, 0.03234359, 0.00505466);\nvec3 orbit4 = vec3(-2.19183836, 1.41098694, 1.56200985);\nvec3 phongColor =  vec3(0.,0.04,0.3);\nvec3 phongPosition = vec3(20.,11.,-4.);\nvec3 phongParam = vec3(4.54,0.15,8.74);\nvec4 spotLightParam = vec4(7.,-3.5999,6.,0.2);\nvec3 spotLightColor = vec3(0.5,0.3,0.);\n\nvec3 direction;\nvec3 normal;\nvec3 position;\nvec3 color;\nfloat depth;\nint iter;\nvec4 orbitTrap;\n\n// --------------------------------------------------------\n\nvoid powSy(inout vec3 z, float r, inout float dr) {\n\t// extract polar coordinates\n\tfloat theta = acos(z.z/r);\n\tfloat phi = atan(z.y,z.x);\n    float abspower = abs(power);\n    \n\t//\tdr =  pow( r, power-1.0)*Power*dr + 1.0;\n\t// mermelada's tweak\n\t// http://www.fractalforums.com/new-theories-and-research/error-estimation-of-distance-estimators/msg102670/?topicseen#msg102670\n\tdr =  max(dr*derivativeBias,pow( r, abspower-1.0)*abspower*dr + drOffset);\n\n\t// scale and rotate the point\n\tfloat zr = pow( r,abspower);\n\ttheta = theta*power;\n\tphi = phi*power;\n\n\t// convert back to cartesian coordinates\n\tz = zr*vec3(sin(theta)*cos(phi), sin(phi)*sin(theta), cos(theta));\n}\n\nvec3 rotatePosition(vec3 pos, int axis, float angle) {\n\tfloat ss = sin(angle);\n\tfloat cc = cos(angle);\n\tfloat qt;\n\n\tif(axis == 0) {  // XY\n\t\tqt = pos.x;\n\t\tpos.x = pos.x * cc - pos.y * ss;\n\t\tpos.y =    qt * ss + pos.y * cc;\n\t}\n\n\tif(axis == 1) { // XZ\n\t\tqt = pos.x;\n\t\tpos.x = pos.x * cc - pos.z * ss;\n\t\tpos.z =    qt * ss + pos.z * cc;\n\t}\n\n\tif(axis == 2) { // YZ\n\t\tqt = pos.y;\n\t\tpos.y = pos.y * cc - pos.z * ss;\n\t\tpos.z =    qt * ss + pos.z * cc;\n\t}\n\n\treturn pos;\n}\n\nfloat DE(vec3 pos) {\n\tvec3 oldz,z=pos;\n\tfloat r;\n\tfloat dr=1.0;\n\n\tfor (int i = 0; i < 100; ++i)\t{\n\t\tif(i >= int(maxSteps)) break;\n\n        r = length(z);\n        if(r > bailout) break;\n\t\t\n\t\toldz = z;\n        powSy(z,r,dr);\n\t\t\n\t\tz += julia;\n\t\tz = rotatePosition(z,0,angle.x);\n\t\tz = rotatePosition(z,1,angle.y);\n\t\t\n\t\tz += oldz.xyz * swizzle.x;\n\t\tz += oldz.yzx * swizzle.y;\n\t\tz += oldz.zxy * swizzle.z;\n\n\t//\tif(i < 4) {\n\t\t\tvec3 ot = pos - orbit4;\n\t\t\torbitTrap = min(orbitTrap, abs(vec4(z.x,z.y,z.z,r*dr)));\n\t//\t}\n\t}\n\n\treturn 0.5*log(r)*r/dr;\n}\n\n// --------------------------------------------------------\n// https://iquilezles.org/articles/normalsSDF\nvoid calcNormal() {\n    float d0 = DE(position);\n    const vec2 epsilon = vec2(.001,0);\n    vec3 d1 = vec3(\n        DE(position-epsilon.xyy),\n        DE(position-epsilon.yxy),\n        DE(position-epsilon.yyx));\n    normal = normalize(d0 - d1);\n}\n\n// --------------------------------------------------------\n\nvoid setDirection(vec2 U) {\n    vec3 viewVector = normalize(aim);\n    vec3 sideVector = vec3(0.,1.,0.);\n    sideVector = normalize(cross(sideVector,viewVector));\n    vec3 topVector = cross(viewVector,sideVector);\n    \n    vec2 vPos = (U - iResolution.xy * 0.5)/iResolution.y;\n    direction = normalize(viewVector + vPos.x * sideVector + vPos.y * topVector);\n}\n\n// --------------------------------------------------------\n\nvec3 generateColor(float weight,float x) {\n\tif(weight == 0.0) return vec3(0.0);\n\n\tx = cos(x);\n\tfloat r = (1.0-x)*(1.0-x);\n\tfloat g = x*x;\n\tfloat b = 2.0*(1.0-x)*x;\n\treturn vec3(r,g,b);\n}\n\nvec3 orbitTrapCycle(float cycle,vec3 c, float s) {\n    float ss = s * cycle;\n    return vec3(0.5) + 0.5 * vec3( cos(ss + c.x), cos(ss + c.y), cos(ss + c.z));\n}\n\nvec3 getOrbitColor() {\n    vec3 orbitColor;\n    \n    if (ocycle > 0.0) {\n        orbitColor =\n        orbitTrapCycle(ocycle,generateColor(orbit2.x,orbit2.y), orbitTrap.x) * orbit2.x * orbitTrap.x +\n        orbitTrapCycle(ocycle,generateColor(orbit2.z,orbit2.w), orbitTrap.y) * orbit2.z * orbitTrap.y +\n        orbitTrapCycle(ocycle,generateColor(orbit3.x,orbit3.y), orbitTrap.z) * orbit3.x * orbitTrap.z +\n        orbitTrapCycle(ocycle,generateColor(orbit3.z,orbit3.w), orbitTrap.w) * orbit3.z * orbitTrap.w;\n    } else {\n        orbitColor =\n        \tgenerateColor(orbit2.x,orbit2.y) * orbit2.x * orbitTrap.x +\n        \tgenerateColor(orbit2.z,orbit2.w) * orbit2.z * orbitTrap.y +\n        \tgenerateColor(orbit3.x,orbit3.y) * orbit3.x * orbitTrap.z +\n        \tgenerateColor(orbit3.z,orbit3.w) * orbit3.z * orbitTrap.w;\n    }\n    \n    return orbitColor;\n}\n\n// --------------------------------------------------------\n// phongParam = diffuse,spec,ambient\nvoid phongLight() {\n\tvec3 L = normalize(phongPosition - position);\n\tfloat dotLN = dot(L, normal);\n\tif (dotLN < 0.) return;\n\t\t\n\tfloat t1 = phongParam.x * dotLN;\n\tvec3 V = normalize(camera - position);\n\tvec3 R = normalize(reflect(-L, normal));\n\tfloat dotRV = dot(R, V);\n\n\tif (dotRV < 0.0) {\n\t\tcolor += phongColor * t1;\n        return;\n    }\n\n\tfloat t2 = phongParam.y * pow(abs(dotRV), phongParam.z);\n\tcolor += phongColor * (t1 + t2);\n}\n\n// --------------------------------------------------------\n// spotLightParam = strength,x,y,exp\n\nconst float PI = acos(-1.);\n\nvoid spotLight() { \n\tfloat a1 = spotLightParam.y * PI;\n\tfloat a2 = spotLightParam.z * PI * 0.5;\n\tfloat s1 = sin(a1);\n\tvec3 spotDir = normalize(vec3(s1 * cos(a2), s1 * sin(a2), cos(a1)));\n\tvec3 halfVector = normalize(spotDir - direction);\n\n\tfloat nDotL = max(0., dot(normal, spotDir));\n\tfloat hDotN = max(0., dot(normal, halfVector));\n\n    vec3 c = spotLightColor;// * spotLightParam.x;\n    float sexp = spotLightParam.w;\n\n\tcolor += c * ((sexp + 2.) / 2.) * pow(hDotN, sexp) \n\t\t* (sexp + (1. - sexp) * pow(1. - hDotN, 5.)) * nDotL * spotLightParam.x;\n}\n\n// --------------------------------------------------------\n\nvoid ambient() { \n    const float amb = 0.5;\n    float dim = 0.043 + (0.5 + sin(iTime * 0.1) * 0.5) * 0.05;\n    const float contrast = .4;\n    const float vibrant = 0.01;\n\n    color = vec3(amb) + vec3(1.0 - (normal * vibrant + sqrt(float(iter) * dim)));\n    color = vec3(0.5) + (color - vec3(0.5)) * contrast; \n        \n    phongLight();\n    spotLight();\n    \n    if(ostrength > 0.0) {\n        vec3 oColor = getOrbitColor();\n        color = mix(color, oColor, ostrength);\n    }    \n}\n\n// --------------------------------------------------------\nconst float MIN_DIST = 0.001;\nconst float MAX_DIST = 12.0;\nconst float EPSILON = 0.00001;\n\nvoid rayMarch() {\n\tfloat distance;\n\tposition = camera;\n\titer = 0;\n\tdepth = MIN_DIST;\n    \n    orbitTrap = vec4(10000.);\n\t\n\tfor(int i = 0;i < 100;++i) {\n\t\tdistance = DE(position);\n        if(abs(distance) < EPSILON || depth > MAX_DIST) break;\n        iter += 1;\n\t\t\n        depth += distance;\n        position += direction * distance;\n    }\n}\n\n// --------------------------------------------------------\n\n#define animate(v,v1,v2,speed) v = mix(v1,v2,0.5 + sin(iTime * speed) * 0.5)\n#define animate2(v,base,delta,speed) v = mix(base-delta,base+delta,0.5 + sin(iTime * speed) * 0.5)\n    \nvoid mainImage(out vec4 O, vec2 U) {\n\n    animate2(power, 5.,3.,0.1);\n    \n    animate2(phongParam.x,4.,0.5,0.3);\n    animate2(phongParam.y,3.,5.,0.35);\n    animate2(phongParam.z,6.,3.,0.4);\n    animate2(phongColor.x,0.5,0.5,0.03);\n    animate2(phongColor.y,0.5,0.5,0.05);\n    animate2(phongColor.z,0.5,0.5,0.07);\n    animate2(phongPosition.x,0.,5.,0.2);\n    animate2(phongPosition.y,0.,5.,0.3);\n    animate2(phongPosition.z,0.,5.,0.5);\n    \n    animate2(spotLightParam.x,1.,0.5,0.3);\n    animate2(spotLightParam.y,0.,0.5,0.3);\n    animate2(spotLightParam.z,0.,0.5,0.35);\n    animate2(spotLightParam.w,1.3,0.5,0.4);\n    animate2(spotLightColor.x,0.5,0.5,0.02);\n    animate2(spotLightColor.y,0.5,0.5,0.04);\n    animate2(spotLightColor.z,0.5,0.5,0.06);\n\n    animate2(julia.x,0.,0.35,0.03);\n    animate2(julia.y,0.,0.35,0.05);\n    animate2(julia.z,0.,0.35,0.07);\n    \n    animate2(swizzle.x,0.,1.,0.3);\n    animate2(swizzle.y,0.,1.,0.35);\n    animate2(swizzle.z,0.,1.,0.4);\n\n    animate(ostrength,0.,3.4,0.02);\n    animate(ocycle,0.,6.,0.03);\n    animate(orbit2.x,-3.,3.,0.011);  // X wt,color\n    animate(orbit2.y,-3.,3.,0.013);\n    animate(orbit2.z,-3.,3.,0.015);  // Y wt,color\n    animate(orbit2.w,-3.,3.,0.017);\n    animate(orbit3.x,-3.,3.,0.019);  // Z wt,color\n    animate(orbit3.y,-3.,3.,0.021);\n    animate(orbit4.x,-3.,3.,0.23);  // center\n    animate(orbit4.y,-3.,3.,0.25);\n    animate(orbit4.z,-3.,3.,0.27);\n\n    animate2(camera.x,-.1,  0.3,  0.1);\n    animate2(camera.y,-2.13,1.3,  0.2);\n    animate2(camera.z,-1.02,-0.3, 0.3);\n/*\n    animate(aim.x,-3.,3.,   0.035);\n    animate(aim.y,-3.,3.,   0.04);\n    animate(aim.z,-3.,3.,   0.045);\n*/\n    setDirection(U);\n\trayMarch();\n    \n    O.xyz = vec3(0.);\n    \n\tif(depth < MAX_DIST) {\n        calcNormal();\n        ambient();\n        O.xyz = color;\n    }\n}\n\n","name":"Image","description":"","type":"image"}]}