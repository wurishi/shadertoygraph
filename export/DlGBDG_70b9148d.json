{"ver":"0.1","info":{"id":"DlGBDG","date":"1702430309","viewed":25,"name":"Fork UCSD CSE 1 williamzha 898","username":"williamzhan7","description":"This is a homework template for a homework for UCSD CSE 167.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["boids"],"hasliked":0,"parentid":"ddtyDs","parentname":"UCSD CSE 167 Boids template"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Smooth HSV2RGB from https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb(in vec3 c)\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 color = vec4(0.5, 0.5, 0.5, 1.0);\n    // Loop over all boids\n    vec4 bcolor = vec4(0.0, 0.0, 0.0, 1.0);\n    bool hit = false;\n    for (int i = 0; i < NUM_BOIDS; i++) {\n        ivec2 tex_pos = ivec2(i % int(iChannelResolution[0].x),\n                                                i / int(iChannelResolution[0].x));\n        vec4 pos_vel = texelFetch(iChannel0, tex_pos, 0);\n        if (distance(fragCoord, pos_vel.xy) < BOIDS_SIZE) {\n            vec3 rgb = hsv2rgb(vec3((float(i)+0.5) / float(NUM_BOIDS), 1.0, 0.9));\n            bcolor += vec4(rgb, 1.0);\n            hit = true;\n        }\n    }\n    if (hit) {\n        color = bcolor;\n    }\n\n    // Output to screen\n    fragColor = color;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    if (iFrame == 0) {\n        // initialize the buffer\n        vec4 pos_vel = texture(iChannel1, fragCoord/iChannelResolution[1].xy);\n        pos_vel.xy = iResolution.xy / 2.0 + (pos_vel.xy - 0.5) * iResolution.xy * 0.2;\n        pos_vel.zw = (pos_vel.zw - 0.5) * iResolution.xy * 1.0;\n        fragColor = pos_vel;\n        return;\n    }\n    ivec2 iFragCoord = ivec2(fragCoord);\n    // \n    vec4 pos_vel = texelFetch(iChannel0, iFragCoord, 0);\n    vec2 pos = pos_vel.xy;\n    vec2 vel = pos_vel.zw;\n    // ID of the current Boid\n    int my_id = int(iFragCoord.y) * int(iResolution.x) + int(iFragCoord.x);\n\n    // Implement Boids here\n    float s_min=5.0;\n    float s_max=10.0;\n    float ds = 30.0;\n    float dv = 150.0;\n    float Ns = 0.0;\n    float Nv = 0.0;\n    \n    float alpha_s = 0.02;\n    float alpha_c = 0.001;\n    float alpha_a = 0.03;\n    float alpha_b = 0.5;\n    \n    \n    \n    \n    float d_left = 200.0;\n    float d_right = 600.0;  \n    float d_top = 160.0;\n    float d_bottom = 290.0;\n    \n    vec2 Fs = vec2(0.0,0.0);\n    vec2 Fc = vec2(0.0,0.0);\n    vec2 Fa = vec2(0.0,0.0);\n    vec2 Fb = vec2(0.0,0.0);\n    vec2 F = vec2(0.0,0.0);\n    \n    //calculate separation force\n    for(int i=0;i<NUM_BOIDS;i++){\n        if (i == my_id){continue;}\n    \n        ivec2 texCoord = ivec2(i % textureSize(iChannel0, 0).x, i / textureSize(iChannel0, 0).x);\n  \n        vec4 boidData = texelFetch(iChannel0, texCoord, 0);\n        vec2 boidPos = boidData.xy; // Position of the ith boid\n        vec2 boidVel = boidData.zw;\n        \n        float distance = sqrt(pow(boidPos.x - pos.x, 2.0) + pow(boidPos.y - pos.y, 2.0));\n    \tif (distance < ds) {\n            Ns += 1.0;\n            Fs += vec2(pos.x - boidPos.x, pos.y - boidPos.y);\n    \t}\n    }\n    if(Ns > 0.0){\n        Fs /= Ns;\n    }\n    \n    \n    //calculate cohesion and alignment forces\n    vec2 vsum = vec2(0.0,0.0);\n    vec2 psum = vec2(0.0,0.0);\n    for(int i=0;i<NUM_BOIDS;i++){\n        if (i == my_id){continue;}\n    \n        ivec2 texCoord = ivec2(i % textureSize(iChannel0, 0).x, i / textureSize(iChannel0, 0).x);\n  \n        vec4 boidData = texelFetch(iChannel0, texCoord, 0);\n        vec2 boidPos = boidData.xy;\n        vec2 boidVel = boidData.zw;\n        \n        float distance = sqrt(pow(boidPos.x - pos.x, 2.0) + pow(boidPos.y - pos.y, 2.0));\n    \tif (distance < dv) {\n            Nv += 1.0;\n           \n            psum += boidPos;\n            vsum += boidVel;\n    \t}\n    }\n    if(Nv > 0.0){\n        psum /= Nv;\n        vsum /= Nv;\n    }\n    Fc += (psum -= pos);\n    Fa += (vsum -= vel);\n    \n    \n    \n    //calculate boundary force\n    Fb += vec2( float(pos.x < d_left) - float(pos.x > d_right) , float(pos.y < d_top) - float(pos.y > d_bottom));\n    \n    //calculate total force\n    F = alpha_s*Fs + alpha_c*Fc + alpha_a*Fa + alpha_b*Fb;\n  \n    vel += F;\n    \n    if (length(vel) > 0.0) {\n   \n        if (length(vel) > s_max) {\n            vel = vel * (s_max / length(vel));\n        }\n     \n        if (length(vel) < s_min) {\n            vel = vel * (s_min / length(vel));\n        }\n    }\n    pos += vel;\n    \n    \n    fragColor = vec4(pos, vel);\n}\n\n\n\n\n\n\n\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define NUM_BOIDS 200\n#define BOIDS_SIZE 10.0\n","name":"Common","description":"","type":"common"}]}