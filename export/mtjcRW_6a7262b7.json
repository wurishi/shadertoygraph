{"ver":"0.1","info":{"id":"mtjcRW","date":"1691538213","viewed":76,"name":"#012","username":"jvincent","description":"Rainbow spirals like the ones I used to make with desmos graphs, only a lot cooler","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["spiral","rainbow","neon","breathing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.14159265359\n#define tpi (2.0*pi)\n#define color(offset) abs(sin(offset + vec3(3, 7, 11) * pi/6.0))\n\nvec3 circle(vec2 uv, vec2 pos, float radius, vec3 color)\n{\n    return color * smoothstep(radius, 0.99*radius, length(uv - pos));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    float angle = mod(atan(uv.x, uv.y), tpi);\n    vec3 col = vec3(0.0);\n    \n    float phi = 0.001 * iTime + 0.1;\n    float a = phi * tpi;\n    float i0 = (length(uv) - 0.01) / 0.0015;\n    float i1 = angle / a;\n    float k = floor( (i0-i1) / (1.0/phi) ); \n    float i, d = 1.0;\n    \n    for (float n = 0.0; n < 20.0; n++) \n    {\n        i = round( i1 + k++ * tpi/a );\n        vec2 p = (0.01 + 0.0015 * i) * vec2(sin(i*a), cos(i*a));\n    \td = min(d, length(uv - p));   \n    }\n    col += color(5.0*(length(uv) - angle + 2.0*iTime)) * smoothstep(0.0, max(2.0*abs(sin(iTime)), 0.5), d*20.0);\n  \n    fragColor = vec4(col, 0.0);\n}","name":"Image","description":"","type":"image"}]}