{"ver":"0.1","info":{"id":"lsdXDr","date":"1458876857","viewed":282,"name":"Hex Zoom","username":"Hanley","description":"Playing with Matrix transformations (scale, rotate).","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["zoom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159\n#define TWO_PI 6.283185\n\n// Matrix Transforms\n// rotate matrix\nmat2 rotate2d(float angle) {\n    return mat2(cos(angle), -sin(angle),\n                sin(angle),  cos(angle) );\n}\n\n// scale matrix\nmat2 scale(vec2 scale) {\n    return mat2(scale.x, 0,\n                0, scale.y);\n}\n\n// Drawers\nfloat polygonDistanceField(in vec2 st, in int vertices) {\n    float a = atan(st.y, st.x) + PI/2.;\n    float r = TWO_PI/float(vertices);\n    // return shaping function that modulates the distances - distance field\n    return cos(floor(0.5 + a/r) * r - a) * length(st);\n}\n\n// Mapping Function\nfloat map(in float value, in float istart, in float istop, in float ostart, in float ostop) {\n    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  float u_time = iTime;\n  vec2 u_mouse = iMouse.xy;\n  vec2 u_resolution = iResolution.xy;\n    \n    vec3 color = vec3(0.2);\n    \n    float t = u_time;\n    vec2 mouse_n = u_mouse.xy / u_resolution;\n\n    vec2 st = fragCoord.xy / u_resolution.xy;\n    st.x *= u_resolution.x / u_resolution.y; // quick aspect ratio fix\n\n    // remap space to [-1.,1.]\n    st = st * 2. - 1.;\n\n    float r = .9;\n    float polys = 0.;\n    float tt = t*2.;\n    for (float i=0.; i<1.0; i+=0.02) {\n        // r = i;\n        // MATRIX TRANSFORM\n        float ms = map(mod(i+tt*0.05, 1.), 0., 1., 10., 0.);\n        float z = map(i, 0., 1., 0., 5.);\n        float mr_speed = map(ms, 10., 0., 0., 10.*sin(tt*0.05));\n        float mr = i*mr_speed - tt*0.05;\n        vec2 mst = st;\n        mst = scale(vec2(ms)) * mst;\n        mst = rotate2d(mr) * mst;\n        // polygon\n        float d = polygonDistanceField(mst, 6);\n        float innerGlow = 0.; //map(ms, 10., 0., r-0.3, r-0.001);\n        float polygon = smoothstep(r+0.001, r, d) - smoothstep(r, innerGlow, d);\n        // add\n        polys += polygon*0.1;\n        // polys = max(polys, polygon*.8);\n    }\n\n    float d = polygonDistanceField(st, 3);\n    r = 0.01;\n    float poly = smoothstep(0.03, 0., d);// - smoothstep(r, , d);\n    polys += poly;\n    \n    color = vec3(0.9,0.6,0.4) * polys;\n    // color = vec3(polys);\n\n    // Render Color\n\tfragColor =  vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}