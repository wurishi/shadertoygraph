{"ver":"0.1","info":{"id":"7tjSWt","date":"1628894786","viewed":475,"name":"Shader Jam - Wireframe Window","username":"NuSan","description":"Shader made live during psenough's shader jam stream 14/08/21","likes":37,"published":1,"flags":32,"usePreview":0,"tags":["live"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Shader made live during psenough's shader jam stream 14/08/21\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfragColor = texture(iChannel0, fragCoord.xy / iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Shader made live during psenough's shader jam stream 14/08/21\n\nfloat time;\n\nfloat box(vec3 p, vec3 s) {\n  p=abs(p)-s;\n  return max(p.x, max(p.y,p.z));\n}\n\nmat2 rot(float a) {\n  float ca=cos(a);\n  float sa=sin(a);\n  return mat2(ca,sa,-sa,ca);  \n}\n\n\nfloat rnd(float a) {\n  return fract(sin(a*352.346)*812.714);\n}\n\nfloat curve(float t, float s) {\n    t/=s;\n    return mix(rnd(floor(t)), rnd(floor(t)+1.), pow(smoothstep(0.,1.,fract(t)), 10.));\n}\n\nfloat ffti(float t) {\n  return time*1.7 + curve(time, 2.7);//texture(texFFTIntegrated, t).x * .3;\n}\n\nfloat fft(float t) {\n  return curve(time, 1.5)*.1;//texture(texFFTSmoothed, t).x*.7;\n}\n\nvec3 repeat(vec3 p, float s) {\n  return (fract(p/s+.5)-.5)*s;\n}\n\nfloat d2=10000.0;\nbool isportal=false;\nfloat map(vec3 p) {\n  \n  float push = 1.0 + fft(fract(length(p)*0.00-time*.2)*0.04)*3.; \n  //float push = 1 + smoothstep(-1,1,sin(length(p)*0.02-time))*0.2;\n  \n  \n  vec3 p2 = p;\n  float t = ffti(0.005)*.3;\n  p2.yx *= rot(t);\n  p2.xz *= rot(t*1.3);\n  p2.z -= 5.;\n  p2.xz *= rot(sin(time*.1)*.5);\n  p2.yz *= rot(sin(time*0.05)*.5);\n  \n  \n  float epa = pow(smoothstep(-1.,-.7,sin(time)),10.);\n  vec3 p4 = p2;\n  float mm=1000.;\n  for(float i=0.; i<3.; ++i) {\n    p4.xy *= rot(.7+i);\n    p4.y-=sign(p4.x);\n    p4.xy=abs(p4.xy);\n    mm=min(mm, min(p4.x, p4.y));\n    p4.xy-=0.9;\n  }\n  float cut=0.4-mm-epa*.8;\n  \n  float size=6.-epa*3.;\n  d2 = box(p2, vec3(size,size,.2));  \n  d2=max(d2, cut);\n  \n  float d3 = box(p2, vec3(size+.5,size+.5,.5));\n  d3 = max(d3, -box(p2, vec3(size,size,.6)));\n  d3=max(d3, cut);\n  \n  d3=min(d3, d2);\n    \n  \n  p *= push;\n  float d=box(repeat(p-10.,20.),vec3(1));\n  for(float i=0.; i<3.; ++i) {\n    \n    vec3 p2=p-i*7.;\n    float t=time*.12 + i;\n    p2.xz *= rot(t);\n    p2.xy *= rot(t*1.3);\n    p2=repeat(p2, 5.+i*.7);\n    \n    d=max(abs(d), abs(box(p2, vec3(1,.2,.4)*4.)))-0.8;\n  }\n  \n  d=min(d/push, d3);\n  \n  return d*.8;\n}\n\nvoid cam(inout vec3 p) {\n  \n  float t=ffti(0.01) * .1;\n  \n  p.xz *= rot(t+ffti(0.03) * .1);\n  p.xy *= rot(t*1.3);\n    \n}\n\nvec3 norm(vec3 p, float s) {\n  vec2 off=vec2(s,0);\n  return normalize(vec3(map(p+off.xyy), map(p+off.yxy), map(p+off.yyx))-vec3(map(p-off.xyy), map(p-off.yxy), map(p-off.yyx)));\n}\n\nfloat gao(vec3 p, vec3 n, float d) {\n  return smoothstep(0.,1.,map(p+n*d)/d);\n}\n\nvec4 previous(vec2 uv) {\n    return texture(iChannel0, uv);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    time=mod(iTime, 300.);\n    \n\tvec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n\tuv -= 0.5;\n\tuv /= vec2(iResolution.y / iResolution.x, 1);\n\n  //uv.y -= pow(fft(0.0)*1.0,4.)*2.;\n  \n  vec4 prev = previous(fragCoord.xy / iResolution.xy);\n  //uv *= 1 + fft(fract(length(uv)-time*.5)*0.04) * (1-prev);\n  \n  vec3 s=vec3(0,0,-10);\n  float fov = .7+fft(0.02)*3.;\n  vec3 r=normalize(vec3(uv, fov));\n  \n  cam(s);\n  cam(r);\n  \n  vec3 col=vec3(0);\n  \n  vec3 l=normalize(vec3(1,3,2));\n  \n  vec3 diff=vec3(.4,0.5,1);\n  float t2=(ffti(0.015)+time*.5)*.1 + uv.x*.3;\n  //t2 += 5.*rnd(floor(max(abs(r.x),abs(r.y))*7.-time*.5-ffti(0.01)*2. - prev.w*3.));\n  diff.xy *= rot(t2*.7);\n  diff.xz *= rot(t2+uv.y*.5);\n  diff=abs(diff);\n  \n  vec3 p=s;\n  float dd=0.;\n  float fofo=0.;\n  float atm=0.;\n  for(int i=0; i<100; ++i) {\n    float d=map(p);\n    if(abs(d)<0.001) {\n      float po=d2;\n      vec3 n=norm(p, 0.02);\n      float fog = 1.-clamp(dd/100.,0.,1.);\n      if(abs(po)<0.002) {\n        isportal=true;\n      }\n      if(isportal) {\n        float edge = 0.004*dd;\n        col += length(n-norm(p, edge)) * 2. * diff.yzx * vec3(2.-fog,1,1) * fog;\n        fofo=1.;\n        d=0.003;\n      } else {\n        vec3 h=normalize(l-r);\n        float spec=max(0.,dot(n,h));\n        float ao=gao(p,n,0.2)*gao(p,n,1.);\n        float fre=pow(1.-abs(dot(n,r)),3.);\n        col += max(0.,dot(n,l)) * ao * fog * (0.5*diff + 3.*diff*pow(spec, 10.) + 3.*pow(spec,50.));\n        col += (-dot(n,l)*.5+.5)*diff*.3 * fog * ao;\n        col += fre*vec3(0.5,0.6,1)*fog*ao;\n        fofo=fog;\n        break;\n      }\n    }\n    if(dd>100.0) break;\n    p+=r*abs(d);\n    dd+=abs(d);\n    if(!isportal) {\n      atm += 0.1/(15.+abs(d));\n    }\n  }\n  \n  col += diff * (pow(1.-fofo,2.) * 0.7 + atm);\n  \n  //col += map(p-r) * fog;\n  \n  col=smoothstep(0.,1.,col);\n  col=pow(col, vec3(0.4545));\n  \n  col = mix(col, prev.xyz, mix(0.2,0.9,smoothstep(0.5,0.8,length(uv))));\n  \n\tfragColor = vec4(col,fofo);\n}","name":"Buffer A","description":"","type":"buffer"}]}