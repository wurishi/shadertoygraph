{"ver":"0.1","info":{"id":"43S3Rz","date":"1708091980","viewed":135,"name":"[Kiltun] MaxOne 1st Set - Music","username":"Kiltun","description":"MaxOne dj set 15/02/2024\nBased on https://www.shadertoy.com/view/MlXyzN","likes":0,"published":1,"flags":96,"usePreview":0,"tags":["sound","maxone"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"ldt3DS","filepath":"https://soundcloud.com/max1bunkerhouse/bunker-haus-1-teaser-mix","previewfilepath":"https://soundcloud.com/max1bunkerhouse/bunker-haus-1-teaser-mix","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI     3.14159265358\n#define TWO_PI 6.28318530718\n\nfloat random1d(float n){\n\treturn fract(sin(n) * 43758.5453);\n}\n\nvec3 hsv2rgb(vec3 c){\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec2 rotate2D(vec2 position, float theta){\n    mat2 m = mat2( cos(theta), -sin(theta), sin(theta), cos(theta) );\n    return m * position;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= 0.5;\n    //fix aspect ratio\n    uv.x *= iResolution.x/iResolution.y;\n\t\n    //get a bass level\n    float bass  = texelFetch( iChannel0, ivec2(1,0), 0 ).x; \n    bass = clamp((bass-0.5)*2.0,0.0,1.0);\n    //bass bounce\n    uv *= 1.0 + (1.0 - bass)*2.0;\n    //bass shake\n    uv += (vec2(random1d(iTime),random1d(iTime + 1.0)) - 0.5)* 0.015;\n    //spin\n    uv = rotate2D(uv, iTime*0.2);\n    \n    uv += 0.5;\n    \n    // get polar angle and radius\n\tvec2 pos = vec2(0.5)-uv;\n    float r = length(pos)*2.0 ;\n    float a = atan(pos.y,pos.x);   \n    float normAng = fract(0.75 -(a /PI) /2.0); //0 - 1 clockwise\n    \n    //get stepped angle\n    float SPOKES = 32.0;\n    float sa = floor(normAng * SPOKES)/ SPOKES;\n   \n    // the sound texture is 512x2\n    int tx = int(sa*512.0);\n\t// first row is frequency data (48Khz/4 in 512 texels, meaning 23 Hz per texel)\n\tfloat fft  = texelFetch( iChannel0, ivec2(tx,0), 0 ).x; \n    \n    //white spokes\n    vec3 fgCol = vec3(abs(bass-1.0),bass,abs(bass-1.0));\n    fgCol = mix(vec3(1.), vec3(1.000,0.302,0.000),bass); \n    //vec3 fgCol = vec3(1.0, 1.0,1.0);  \n\n\n    //mask spokes by angle\n    float aEdge = 0.1;\n    float s = fract(normAng * SPOKES);\n    float mask = smoothstep(0.4, 0.4 + aEdge, s);\n    float edgerr = smoothstep(aEdge, 0.0, s);\n    mask = max(mask,edgerr);\n    \n    //mask radial center and edges\n    float rEdge = 0.01;\n    float maxLen = 1.0;\n    float innerRad = 0.4;\n    float inner = 1.0 - smoothstep(innerRad,innerRad + rEdge, r);\n    \n    //outer edge dependent on volume\n    float top = innerRad + maxLen * fft * fft;\n    float outer = smoothstep(top, top + rEdge,r);\n    mask = max(mask,inner);\n    mask = max(mask,outer);\n    fgCol -= mask;\n    \n    //add a glowy rainbow\n    float radialGrad = (1.0 - r * 0.4) * 2.0;\n    vec3 bgCol = hsv2rgb(vec3(normAng + iTime*0.2,0.9,fft*fft * radialGrad + 0.1));\n    \n    //knockout inner circ\n    //float inner2 = 1.0 - smoothstep(0.0,0.5, r);    \n    float inner2 = 1.0 - step(0.2, r);\n    bgCol = min(bgCol,1.0 - inner2); \n    \n    ////--------------------------------------------- RAYMARCHING\n    vec2 raymarchingUV = fragCoord.xy / iResolution.xy;\n    vec4 out_color = texture(iChannel1, raymarchingUV);\n    out_color *= 2.0;\n\n    bass  = texelFetch( iChannel0, ivec2(1,0), 0 ).x; \n    bass = clamp((bass-0.8)*2.0,0.0,1.0);\n   \n\n    vec3 col = bgCol + fgCol;\n \n    // output final color\n\tfragColor = vec4(col,1.0) + out_color;\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\nint slotid(ivec2 loc) { return loc.x; }\nivec2 slotloc(int id) { return ivec2(id, 0); }\n\nvec4 loadValue(sampler2D buf, int slot_id)\n{\n    return texelFetch(buf, slotloc(slot_id), 0);\n}\n\n\nconst int slotCameraPosition = 0;\nconst int slotCameraRotation = 1;\n\nvec3 cameraPosition(sampler2D BufC) \n{\n    return loadValue(BufC, slotCameraPosition).xyz;\n}\n\nvec3 cameraRotation(sampler2D BufC) \n{\n    return loadValue(BufC, slotCameraRotation).xyz;\n}\n\n\n//// ROTATION\n\nconst float pi = acos(-1.); //3.141592;\n\n// e^(i*rads) Euler's formula complex spinor\nvec2 cossin(float r)\n{\n    return sin(r + vec2(.5*pi, 0));\n}\n\n\nmat2 mrot(vec2 s)\n{\n    return mat2(s.x, -s.y, s.y, s.x);\n} // then can q.xz = mrot(cossin(a)) * q.xz;\n\n","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n#define ITERATIONS 32\n\nfloat map(vec3 p)\n{\n    p = fract(p) * 2. -1.;\n    return length(p) - 0.25;\n}\n\nfloat trace(vec3 o, vec3 r)\n{\n    float t = 0.;\n    for(int i = 0; i < ITERATIONS; i++)\n    {\n    \tvec3 p = o + r * t;\n        float d = map(p);\n        t += d * 0.5;\n    }\n    return t;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2.0 -1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec3 r = normalize(vec3(uv, 1.0));\n    /*r.zx *= mrot(cossin(iTime));\n    r.zy *= mrot(cossin(iTime));*/\n    \n    float time_var = iTime * 0.13;\n       \n    vec3 o = vec3(0.5, 0.0,time_var);\n        \n    float t = trace(o,r);\n    vec3 ball1 = 1. / vec3(t,t,t);\n    vec3 ball1Color = vec3(0.4,cos(time_var) * 0.5,sin(time_var*0.5) * 0.1);\n    ball1 *= ball1Color;\n    \n    float ti = trace(o + vec3(0.5,0.5,0.0),r);\n    vec3 ball2 = 1. / vec3(ti,ti,ti);\n    vec3 ball2Color = vec3(sin(time_var*1.2) * 0.3,cos(time_var*0.3) * 0.2,0.1);\n    ball2 *= ball2Color;\n    \n    //float fog = 1. / (1. + t * t* 0.1);\n    \n    //vec3 fc = vec3(fog);\n    \n    vec3 fini = vec3(max(ball1, ball2));\n\n    fragColor = vec4(fini,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}