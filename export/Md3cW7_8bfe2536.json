{"ver":"0.1","info":{"id":"Md3cW7","date":"1519171882","viewed":730,"name":"Space Deformation","username":"csaez","description":"Click and drag the cursor through the canvas to move the tools interactively.\n\nLoosely based on http://graphicsinterface.org/wp-content/uploads/gi1996-7.pdf\n","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","grid","deformation","space"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// one-liners\n#define aa 2.0/iResolution.y\n#define S(x) smoothstep(aa, 0.0, x)\n#define rotate2d(angle) mat2(cos(angle), -sin(angle), sin(angle), cos(angle))\n\n\n// compute grid mask\nfloat gridMask(vec2 uv, const float subdiv)\n{\n    vec2 toGrid = uv - round(uv * subdiv) / subdiv;\n    float d = min(abs(toGrid.x), abs(toGrid.y));\n    return S(abs(d));\n}\n\n\n// signed distance field (ellipse)\nfloat sdf(vec2 p, vec2 r, vec2 uv)\n{\n    vec2 l = (uv - p) * rotate2d(iTime);  // local rotation\n    vec2 ratio = (l * l) / (r * r);\n    return ratio.x + ratio.y - 1.0;\n}\n\n\n// compute deformed space\nvec2 deformedSpace(vec2 local, vec2 r, float d)\n{\n    vec2 lnorm = local / d;\n    vec2 intersection = lnorm * r;\n    float falloff = smoothstep(3.0, 0.0, d);\n    return intersection * falloff;\n}\n\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.y;\n    vec2 m = iMouse.xy / iResolution.y;\n    float aspect = iResolution.x / iResolution.y;\n    \n    float tool = 0.0;       // accumulate ellipse shapes\n    vec2 defs = vec2(0.0);  // accumulate space deformations\n\n    // compute tool deformations\n    for (int i=0; i<5; i++)\n    {\n        float fi = float(i);\n\n        vec2 radius = vec2(0.7 - 0.3 * cos(iTime + fi),\n                           0.7 - 0.3 * sin(iTime + fi)) * 0.25;\n\n        vec2 p = m + vec2(fi * 0.4);\n        p = mod(p, vec2(aspect, 1.0));\n\n        float d = sdf(p, radius, uv);\n        tool += S(d);\n\n        vec2 l = p - uv;  // local vector (per ellipse)\n        defs += deformedSpace(l, radius, d);\n    }\n\n    // draw\n    float bg = gridMask(uv + defs, 20.0) * 0.3;\n    float mask = 1.0 - (tool + bg);\n    fragColor = vec4(1.0) * mask;\n}\n","name":"Image","description":"","type":"image"}]}