{"ver":"0.1","info":{"id":"Ddl3Ws","date":"1667006537","viewed":100,"name":"FFT demo 2","username":"WhiteWalrus518","description":"Demonstration of buffers and fft for personal use","likes":4,"published":1,"flags":96,"usePreview":0,"tags":["fft"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel0, uv).xyz;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4tBSD1","filepath":"https://soundcloud.com/soundcirclemusic/google-doodle-music-earth-day-2020","previewfilepath":"https://soundcloud.com/soundcirclemusic/google-doodle-music-earth-day-2020","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define res iResolution\nfloat logFFT(float x){\n    // input fragCoord\n    return texture(iChannel1, vec2((log(x) / log(res.x)), 0.25)).x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float intensity = 0.0;\n    float cutOff = 0.6;\n    if(fragCoord.y >= res.y -1.0){\n        intensity = texture(iChannel1, vec2(fragCoord.x / res.x, 0.25)).x;\n        \n        float logZoom = 100.0;\n        //intensity = logFFT(fragCoord.x / logZoom + 1.0); // logarithmic xval\n        //intensity = (intensity < cutOff) ? 0.0 : 1.0; // helps remove weaker frequencies\n        //intensity = (intensity < cutOff) ? 0.0 : intensity; // same as before\n        \n        fragColor = 1.3 *mix(vec4(0.3, 0.1, 0.2, 1.0), vec4(0.9, 0.8, 0.4, 1.0),intensity);\n    }\n    else{\n        fragColor = texelFetch(iChannel0, ivec2(fragCoord + vec2(0,1)), 0);\n    }\n    \n    if( texelFetch(iChannel0, ivec2(fragCoord), 0).xyz == vec3(0.0)){ fragColor = vec4(0.3, 0.1, 0.2, 1.0);}\n}","name":"Buffer A","description":"","type":"buffer"}]}