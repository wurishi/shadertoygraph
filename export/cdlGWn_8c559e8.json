{"ver":"0.1","info":{"id":"cdlGWn","date":"1665960295","viewed":84,"name":"raymarching - sphere","username":"kynd","description":"raymarching/04","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching04"],"hasliked":0,"parentid":"ltfSRX","parentname":"raymarching/04"},"renderpass":[{"inputs":[],"outputs":[],"code":"// Constants\n#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n#define t iTime\n#define res iResolution.xy\n\n// Sphere properties\nconst float sphereSize = 0.5;\n\n// Lighting\nconst vec3 lightDir = vec3(-0.577, 0.577, 0.577);\n\n// Camera properties\nconst float angle = 60.0;\nconst float fov = angle * 0.5 * PI / 180.0; // Convert angle to radians\n\n// Sphere distance function\nfloat distanceFunc(vec3 p) {\n    return length(p) - sphereSize;\n}\n\n// Compute the normal using the finite differences method\nvec3 getNormal(vec3 p) {\n    const float d = 0.0001;\n    return normalize(vec3(\n        distanceFunc(p + vec3(  d, 0.0, 0.0)) - distanceFunc(p - vec3(  d, 0.0, 0.0)),\n        distanceFunc(p + vec3(0.0,   d, 0.0)) - distanceFunc(p - vec3(0.0,   d, 0.0)),\n        distanceFunc(p + vec3(0.0, 0.0,   d)) - distanceFunc(p - vec3(0.0, 0.0,   d))\n    ));\n}\n\n// Main rendering function\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalize the fragment coordinates\n    vec2 uv = (fragCoord.xy * 2.0 - res) / min(res.x, res.y);\n\n    // Camera setup\n    vec3 cPos = vec3(0.0, 0.0, 2.0);\n    vec3 ray = normalize(vec3(sin(fov) * uv.x, sin(fov) * uv.y, -cos(fov)));\n\n    // Ray marching\n    float rLen = 0.0;\n    vec3 rPos = cPos;\n    float distance;\n    for(int i = 0; i < 16; i++) {\n        distance = distanceFunc(rPos);\n        rLen += distance;\n        rPos = cPos + ray * rLen;\n    }\n\n    // Shade based on whether we hit the sphere or not\n    if(abs(distance) < 0.001) {\n        vec3 normal = getNormal(rPos);\n        float diff = clamp(dot(lightDir, normal), 0.1, 1.0);\n        fragColor = vec4(vec3(diff), 1.0);\n    } else {\n        fragColor = vec4(vec3(0.0), 1.0);\n    }\n}\n","name":"Image","description":"","type":"image"}]}