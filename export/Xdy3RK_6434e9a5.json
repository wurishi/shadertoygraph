{"ver":"0.1","info":{"id":"Xdy3RK","date":"1455241480","viewed":639,"name":"Chaotic Symmetry","username":"Passion","description":"A 2d fractal. I went a bit overkill with the noise and fbm calls in the c1 and c2 colors. Inspired by 'interactive evolution' - by 'bergi'.","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* 2016 Passion */\n\n//Random function\nfloat rand(vec2 n) { \n    return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\n//Noise function\nfloat noise(vec2 n) {\n    const vec2 d = vec2(0.0, 1.0);\n    vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n    return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n\n//Fbm function\nfloat fbm(vec2 n) {\n    float total = 0.0, amplitude = 1.0;\n    //n.x+=iTime;\n    for (int i = 0; i < 5; i++) {\n        total += noise(n) * amplitude;\n        n += n;\n        amplitude *= 0.5;\n    }\n    return total;\n}\n\n//2D Rotation\nmat2 rot(float deg){    \n    return mat2(cos(deg),-sin(deg),\n                sin(deg), cos(deg));\n        \n}\n//Main\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord){\n    \n    //Center uv coordinates\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    float vinette = 1.-pow(length(uv*uv*uv*uv)*1.01,10.);\n    uv.x *= iResolution.x / iResolution.y;\n   \n    //uv+=noise(.2*uv-iTime);\n    float t = iTime*.75;\n    \n    const int numIter = 5;\n    \n    //The Fractal\n    for(int i = 0; i<numIter; i++){\n        \n        uv*=rot(t*.16);\n        uv = abs(uv) / dot(uv,uv);\n        uv.x = abs(uv.x+cos(t*.6)*.5);\n        uv.x = abs(uv.x-.8);\n        uv = abs(rot(-t*.3)*uv);\n        uv.y = abs(uv.y-.5);\n        uv.y = abs(uv.y+.03+sin(t)*.25);\n        \n    }\n    \n    uv = abs(uv) / float(numIter);\n\n    vec3 c1 = vec3(noise(uv*7.),\n                   sin(fbm(uv*.6)), \n                   cos(fbm(uv*8.)));\n    \n    uv+=abs(.1*t+uv*2.23);\n    \n    vec3 c2 = vec3(cos(fbm(uv*8.+noise(uv*5.5))), \n                   cos(fbm(7.*uv)), \n                   cos(uv*6. - fbm(5.*uv)));\n    //Mix and gama adjustments\n    fragColor = vec4(pow(mix( c1, c2, (noise(2.*uv))), vec3(1.0/0.5)) ,1.0)*vinette;\n}","name":"Image","description":"","type":"image"}]}