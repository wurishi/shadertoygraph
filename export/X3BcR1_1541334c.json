{"ver":"0.1","info":{"id":"X3BcR1","date":"1726903264","viewed":38,"name":"Complex Growth","username":"greybit","description":"A mold-like game of life type system","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["gameoflife","cellularautomata","spread"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// get the number of non-black surrounding pixels\n\n\nuint filledSurrounding(vec2 coord) {\n    uint filledCount = 0U;\n    \n    uvec2 ucoords = uvec2(coord);\n    uvec2 ures = uvec2(iResolution.xy);\n    \n    bool xNotMax = ucoords.x < ures.x;\n    bool xNotMin = ucoords.x > 0U;\n    bool yNotMax = ucoords.y < ures.y;\n    bool yNotMin = ucoords.y > 0U;\n    \n    bool vecRestrictions[8] = bool[8] (\n        xNotMax && yNotMax, xNotMax, xNotMax && yNotMin,\n        yNotMax, yNotMin,\n        xNotMin && yNotMax, xNotMin, xNotMin && yNotMin\n   );\n    \n    vec2 dirVecs[8] = vec2[8](vec2(1), vec2(1, 0), vec2(1, -1), vec2(0, 1), vec2(0, -1), vec2(-1, 1), vec2(-1,0), vec2(-1,-1));\n    \n    for(int i = 0; i < 8; i++) {\n        if(!vecRestrictions[i]) continue;\n        if(length(vec4(texture(iChannel0, (coord+dirVecs[i]) / iResolution.xy)).rgb) > 0.1) filledCount++;\n    }\n    \n    return filledCount;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iChannelResolution[0].xy;\n    uint pixelIndex = uint(fragCoord.x) + uint(fragCoord.y) * uint(iResolution.x);\n    \n    fragColor = texture(iChannel0, uv);\n    \n    if(iFrame == 1) {\n        fragColor = vec4(vec3(0), 1.0);\n        return;\n    }\n    \n    \n    \n    \n    bool isFilled = length(texture(iChannel0, uv).rgb) > 0.1;\n    uint neighbors = filledSurrounding(fragCoord);\n    \n    if(neighbors == 3U) fragColor = vec4(0.8, 0.8, 0.4, 1.0);\n    else if(isFilled && neighbors == 4U) fragColor = vec4(0.2, 0.5, 1.0, 1.0); // KEEP THIS COLOR\n    else if(isFilled && neighbors == 5U) fragColor = vec4(1.0, 0.0, 0, 1.0);\n    else if(isFilled && neighbors == 6U) fragColor = vec4(0.2, 0.5, 1.0, 1.0);\n    else if(isFilled && neighbors == 7U) fragColor = vec4(0.0, 1.0, 1.0, 1.0);\n    else if(isFilled && neighbors == 8U) fragColor = vec4(0.1, 0.7, 1.0, 1.0); // KEEP THIS COLOR\n    else fragColor = vec4(vec3(0), 2.0);\n    \n    // interesting start radii:\n    // 19\n    // 14\n    // 20\n    \n    if(distance(fragCoord, iMouse.xy) < 5.0) fragColor = vec4(1);\n    \n}","name":"Buffer A","description":"","type":"buffer"}]}