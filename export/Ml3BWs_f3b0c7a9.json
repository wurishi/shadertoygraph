{"ver":"0.1","info":{"id":"Ml3BWs","date":"1541461376","viewed":85,"name":"Cycling Squares","username":"DaveS","description":"Simple geometric patterns from overlaid grids","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["outlands"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec2 to_polar( vec2 uv, vec2 origin)\n{\n    vec2 rel = uv - origin;\n    float r = sqrt(rel.x * rel.x + rel.y * rel.y);\n    float theta = atan(rel.y, rel.x);\n    vec2 polar = vec2(r, theta);\n    return polar;\n}\n\nvec2 to_rectilinear( vec2 polar, vec2 origin)\n{\n    vec2 uv = vec2(polar.x * cos(polar.y), polar.x * sin(polar.y));\n    uv = uv + origin;\n    return uv;\n}\n    \n\n\nfloat vary_shade( vec2 uv, float rate)\n{\n    float depth = 0.0;\n    // Time varying pixel color\n    float stime = tan(0.1 * iTime * rate);\n    if (stime * uv.x - floor(stime * uv.x) > 0.5)\n    {\n        if (stime * uv.y - floor(stime * uv.y) > 0.5)\n        {\n            depth = 1.0;\n        }\n    }\n    else\n    {\n        depth = 0.0;\n    }\n    return depth;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy * 4.0;\n    vec2 origin = vec2(2.,2.);\n    vec2 polar = to_polar(uv, origin);\n    if (polar.r < 1.)\n    {\n        polar.r = polar.r * polar.r;\n    }\n    uv = to_rectilinear(polar, origin);\n       \n    vec3 col = vec3(vary_shade(uv, 1.1),vary_shade(uv, 1.2),vary_shade(uv, 1.0));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}