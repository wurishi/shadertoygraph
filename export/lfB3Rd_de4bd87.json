{"ver":"0.1","info":{"id":"lfB3Rd","date":"1704511513","viewed":23,"name":"eye space ","username":"alexender1","description":"my first shader ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["space"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Example noise function for the aurora\nfloat noise(vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Background color\n    vec3 backgroundColor = vec3(4.0 / 255.0, 4.0 / 255.0, 40.0 / 255.0);\n\n    // Adding magical stars with bluish color\n    for (int i = 0; i < 150; i++) {\n        vec2 starPos = vec2(fract(sin(float(i) * 12.9898) * 43758.5453),\n                            fract(cos(float(i) * 4.1414) * 23421.631));\n\n        float dist = length(uv - starPos);\n        float glow = 1.0 / (15000.0 * dist * dist); // Quadratic falloff\n\n        // Bluish star color\n        vec3 starColor = vec3(glow * 0.5, glow * 0.5, glow) * (0.1 + 0.5 * cos(iTime + float(i)));\n\n        // Sparkling effect\n        starColor *= (1.0 + 0.3 * sin(iTime / 10.0 + float(i) * 6.2831));\n\n        backgroundColor += clamp(starColor, 0.0, 1.0);\n    }\n\n    // Adding an aurora effect\n   \n    // Output final color\n    fragColor = vec4(backgroundColor, 1.0);\n        float aspectRatio = iResolution.x / iResolution.y;\n    uv.x *= aspectRatio; // Correct x coordinate\n\n    // Background gradient\n\n    // Eyeball center and radius\n    vec2 eyeballCenter = vec2(0.5 * aspectRatio, 0.5); // Corrected for aspect ratio\n    float eyeballRadius = 0.25;\n\n    // Draw the eyeball\n    float eyeball = smoothstep(eyeballRadius, eyeballRadius - 0.05, length(uv - eyeballCenter));\n    vec3 eyeballColor = vec3(1.0); // White color\n\n    // Get mouse position, normalized to [0, 1]\n    vec2 mousePos = iMouse.xy / iResolution.xy;\n    mousePos.x *= aspectRatio; // Correct mouse position for aspect ratio\n\n    // Calculate the direction in which the eye looks (more circular)\n    vec2 lookDirection = normalize(mousePos - eyeballCenter) * 0.05; // Adjust for more circular motion\n\n    // Iris position and radius\n    vec2 irisCenter = eyeballCenter + lookDirection;\n    float irisRadius = 0.05;\n    float iris = smoothstep(irisRadius, irisRadius - 0.01, length(uv - irisCenter));\n    vec3 irisColor = vec3(0.0, 0.0, 0.0); // Black color\n\n    // Eyelids\n    float blink = smoothstep(0.0, 0.05, abs(sin(iTime * 0.5))); // Adjust for more realistic blinking\n    vec3 eyelidColor = backgroundColor;\n    float upperEyelid = smoothstep(0.0, 0.05, uv.y - (0.5 + blink * 0.5));\n    float lowerEyelid = smoothstep(0.0, 0.05, (0.5 - blink * 0.5) - uv.y);\n\n    // Combine elements\n    vec3 color = mix(backgroundColor, eyeballColor, eyeball);\n    color = mix(color, irisColor, iris);\n    color = mix(color, eyelidColor, upperEyelid);\n    color = mix(color, eyelidColor, lowerEyelid);\n\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}