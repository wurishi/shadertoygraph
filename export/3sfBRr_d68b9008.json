{"ver":"0.1","info":{"id":"3sfBRr","date":"1587577574","viewed":106,"name":"Why does this work only with 2?","username":"xXpro_campr_pro_scopeXx","description":"BackwardsCap and me are wondering why this shader only works with p=2. (line 2). This is a shader to illustrate the squared numbers (1,2,4,9,16,25...) on a grid. Read below for more details about our question. ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["question"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define n 300\n#define p 1.299\n\nbool isPower(float id)\n{\n    //this works for p==2.0 but everything else does not work\n    return floor(pow(id+.5,1.0/p))!=floor(pow(id-.5,1.0/p));\n    \n    \n    //this works with everything in p\n    /*\n    for(int i=0;i<n;i++)\n    {\n        if(id==round(pow(float(i),p))) return true;\n    }\n    return false;3\n\t*/\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //adjust aspect ratio\n    float ratio=iResolution.x/iResolution.y;\n    uv.x*=ratio;\n    \n    //scale our grid\n    float size = 1000.;\n    uv*=size/ratio;\n    \n    //get our cell id, starting 0 at bottom left, counting up looping each row\n    float id = floor(uv.x+floor(uv.y)*size);\n    \n    //output variables and the size of our grid lines\n    float o = 0., l=0., gline=size/iResolution.x;\n   \t\n    //if our id is in the array we calculated, set it white\n    if(isPower(id))o=1.;\n    \n    //add grid lines\n    uv=fract(uv);\n    if(uv.x<gline||uv.y<gline) l = 1.0;\n    \n    //set the output color\n    fragColor.rgb = vec3(l*0.1+o);\n    \n    //if floor(iTime)^2 == our cell id, set it red \n    if(round(pow(floor(iTime),p))==id&&l==0.)fragColor.rgb=vec3(1,0,0);\n}","name":"Image","description":"","type":"image"}]}