{"ver":"0.1","info":{"id":"3dsyRl","date":"1585355261","viewed":924,"name":"Multi Color Fluid Simulation","username":"aiekick","description":"Multi Color Fluid Simulation","likes":28,"published":3,"flags":32,"usePreview":0,"tags":["simulation","fluid","color","shaded","multi","navierstoke"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by Stephane Cuillerdier - Aiekick - 2020 (twitter:@aiekick)\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// BUF A,B (pingpong x2) x,y : particle pos / z : pressure\n// BUF C,D (pingpong x2) rgb : ink\n// the calc functions and simu params are in the Common tab\n\n#define BUMP 1.0\n#define COLOR_COEF 1.0\n#define DIFF_COEF 0.4\n#define SPEC_POWER 16.0\n#define SPEC_COEF 0.4\n\nvoid mainImage( out vec4 fragColor, in vec2 g )\n{\n    vec3 s = iResolution;\n    \n    vec2 uv = g/s.xy;\n    vec2 uvc = (g-s.xy*0.5)/s.y;\n    \n    // normal\n    float eps = 2.0/min(s.x, s.y);\n\tvec4 f = texture(iChannel0, uv); // ink\n\tvec4 fx = (texture(iChannel0, uv + vec2(eps,0))-f)/eps;\n\tvec4 fy = (texture(iChannel0, uv + vec2(0,eps))-f)/eps;\n\tvec3 nr = normalize( vec3(0., 0., 1) + vec3(fx.r, fy.r, 1.) * BUMP );           \n\tvec3 ng = normalize( vec3(0., 0., 1) + vec3(fx.g, fy.g, 1.) * BUMP );           \n\tvec3 nb = normalize( vec3(0., 0., 1) + vec3(fx.b, fy.b, 1.) * BUMP );           \n\tvec3 n = normalize(nr+ng+nb);\n    \n    float pr = texture(iChannel1, uv).z; // pressure waves\n\t\n    // custom brdf, pressure is used for perturb normal in a cheap way for showing waves\n\tvec3 rd = normalize(vec3(uvc, -1.)); vec3 ld = vec3(0,0,1);\n    float diff = max(dot(n + pr * 2., ld), 0.);  \n\tfloat spec = pow(max(dot(reflect(ld, n + pr * 0.15), rd), 0.),SPEC_POWER); \n\tvec3 col = f.rgb * COLOR_COEF + diff * DIFF_COEF + spec * SPEC_COEF;\n\t\n    fragColor = vec4(col, 1.0);\n\tfragColor = pow(fragColor, vec4(1.5));\n\tfragColor = clamp(fragColor, 0., 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 g )\n{\n\tfragColor = CalcPositionPressure(iChannel0, g, iResolution, iFrame);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 g )\n{\n\tfragColor = CalcPositionPressure(iChannel0, g, iResolution, iFrame);\n}\n","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 g )\n{\n    fragColor = CalcInk(iChannel0, iChannel1, g, iResolution, iFrame);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 g )\n{\n    fragColor = CalcInk(iChannel0, iChannel1, g, iResolution, iFrame);\n}\n","name":"Buffer D","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define emitForce 0.1\n#define emitPosRadius 0.45\n#define emitSize 0.01\n#define countEmitters 4\n#define visozity 1.0\n#define emitAngleOffset 0.0\n#define colorHash vec4(5,3,2,2)\n\n// interesting result with :\n// emitForce => 1.0\n// countEmitters => 100\n// emitAngleOffset => 1.5\n\nvec4 CalcPositionPressure(sampler2D pre, vec2 g, vec3 s, int fr)\n{\n    vec4 res = vec4(0);\n    \n    vec2 uv = g/s.xy;\n    vec2 uvc = (g-s.xy*0.5)/s.y;\n    \n    vec3 ts = 1./s;\n    ts.z = 0.0;\n    vec4 cur = texture(pre, uv);\n\tvec4 a = texture(pre, uv + ts.xz);\n\tvec4 b = texture(pre, uv + ts.zy);\n\tvec4 c = texture(pre, uv - ts.xz);\n\tvec4 d = texture(pre, uv - ts.zy);\n\tres = texture(pre, uv - cur.xy * ts.xy);\n\tvec2 gradPressure = vec2(a.z - c.z, b.z - d.z);\n\tfloat pres = (a.z + b.z + c.z + d.z) * 0.25f;\n\tfloat dive = 0.05 * (c.x - a.x + d.y - b.y);\n\tres.z = pres - dive; // pressure\n\tres.xy += gradPressure.xy * visozity; // particle pos\n\t\n    float an = 0.0, st = 6.28318 / float(countEmitters);\n    for (int i = 0; i < countEmitters;i++)\n    {\n        vec2 pos = vec2(cos(an),sin(an)) * emitPosRadius;\n        if (length(uvc-pos) < emitSize)\n\t\t{\n\t\t\tres.xy = res.xy * (1.0f - emitForce) - \n                emitForce * vec2(cos(an + emitAngleOffset),sin(an + emitAngleOffset));\n\t\t}\n        an += st;\n    }\n    \t\n\tif (uv.x <= ts.x || uv.y <= ts.y || uv.x >= 1.0f - ts.x || uv.y >= 1.0f - ts.y)\n\t\tres = vec4(0); //walls\n    \n    if (fr < 1)\n\t\tres = vec4(0);  // init\n    \n    return res;\n}\n\nvec4 CalcInk(sampler2D ink, sampler2D pre, vec2 g, vec3 s, int fr)\n{\n    vec4 res = vec4(0);\n    \n    vec2 uv = g/s.xy;\n    vec2 uvc = (g-s.xy*0.5)/s.y;\n    \n    vec2 ts = 1./s.xy;\n    vec4 cur = texture(pre, uv); // posX,posY,pre,notUsed\n\tres = texture(ink, uv - cur.xy * ts); // movement pos xy\n\t\n    float an = 0.0, st = 6.28318 / float(countEmitters);\n    for (int i = 0; i < countEmitters;i++)\n    {\n        vec2 dir = vec2(cos(an),sin(an));\n        vec2 pos = dir * emitPosRadius;\n        if (length(uvc-pos) < emitSize)\n\t\t{  \n            res = sin((float(i) + colorHash.a) * colorHash) * 0.5 + 0.5;\n        }\n        an += st;\n    }\n\t\n\tif (fr < 1) \n\t\tres = vec4(0); // init\n    \n    return res;\n}","name":"Common","description":"","type":"common"}]}