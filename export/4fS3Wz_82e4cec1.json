{"ver":"0.1","info":{"id":"4fS3Wz","date":"1704091882","viewed":44,"name":"CRT filter experiment","username":"JornTumrongwit","description":"just messing around with trying to make a crt filter for pixelated content\n","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["testing","crt","pixelart"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// CREDIT OF THE CRT STYLED SCAN_LINE SHADER BASE\n// For this project, I decided to use that code as an inspiration, as well as a bunch of other functions from that code, such as gamma correction and fetching\n// However, the actual code will be from my own understanding of the process as well as adjustments made to my liking\n\n// Credits to the crt styled scan-line shader below\n// origin: https://www.shadertoy.com/view/XsjSzR\n//\n// PUBLIC DOMAIN CRT STYLED SCAN-LINE SHADER\n//\n//   by Timothy Lottes\n//\n// This is more along the style of a really good CGA arcade monitor.\n// With RGB inputs instead of NTSC.\n// The shadow mask example has the mask rotated 90 degrees for less chromatic aberration.\n//\n// Left it unoptimized to show the theory behind the algorithm.\n//\n// It is an example what I personally would want as a display option for pixel art games.\n// Please take and use, change, or whatever.\n//\n\n// Emulated input resolution.\n#if 0\n  // Fix resolution to set amount.\n  #define res (vec2(320.0/1.0,240.0/1.0))\n#else\n  // Optimize for resize.\n  #define res (iResolution.xy/6.0)\n#endif\n\n//----------Variables from original work-----------\n\n// Display warp.\n// 0.0 = none\n// 1.0/8.0 = extreme\nvec2 warp=vec2(1.0/32.0,1.0/24.0); \n\n// Amount of shadow mask.\nfloat maskDark=0.5;\nfloat maskLight=1.5;\n\n//--------Self-defined variables----------\n//Value of the scanline from 0 to 1. The closer it is to 0, the less prominent the scanline\nfloat ScanHardness = 0.7;\n\n//Pixel hardness horizontally from 0 to 1. \nfloat pixelStrHorizontal = 0.9;\n\n//Pixel hardness vertically from 0 to 1. \nfloat pixelStrVertical = 0.7;\n\n//number of pixels to propogate horizontally\nfloat propogateHorizontal = 2.0;\n\n//number of pixels to propogate vertically\nfloat propogateVertical = 2.0;\n\n//------------------------------------------------------------------------\n//------------Taken directly from Timothy Lottes' work-------------------\n// sRGB to Linear.\n// Assuing using sRGB typed textures this should not be needed.\nfloat ToLinear1(float c){return(c<=0.04045)?c/12.92:pow((c+0.055)/1.055,2.4);}\nvec3 ToLinear(vec3 c){return vec3(ToLinear1(c.r),ToLinear1(c.g),ToLinear1(c.b));}\n\n// Linear to sRGB.\n// Assuing using sRGB typed textures this should not be needed.\nfloat ToSrgb1(float c){return(c<0.0031308?c*12.92:1.055*pow(c,0.41666)-0.055);}\nvec3 ToSrgb(vec3 c){return vec3(ToSrgb1(c.r),ToSrgb1(c.g),ToSrgb1(c.b));}\n\n// Nearest emulated sample given floating point position and texel offset.\n// Also zero's off screen.\nvec3 Fetch(vec2 pos,vec2 off){\n  pos=floor(pos*res+off)/res;\n  if(max(abs(pos.x-0.5),abs(pos.y-0.5))>0.5)return vec3(0.0,0.0,0.0);\n  return ToLinear(texture(iChannel0,pos.xy,-16.0).rgb);}\n\n// Draw dividing bars.\nfloat Bar(float pos,float bar){pos-=bar;return pos*pos<4.0?0.0:1.0;}\n\n//----------------------------Experimenting on coding the rest myself-------------------\n//Distance to center of that texel (well it's pretty much what the original wrote but you kinda need it)\nvec2 Dist(vec2 pos){\n    pos=pos*res;\n    return -((pos-floor(pos))-vec2(0.5));\n}\n\n//Exponential decay function\nfloat ExpDecay(float value, float scale){\n    return pow(1.-scale, value);\n}\n\n//get scanline strength\nfloat Scanline(vec2 position){\n   return ExpDecay(abs(Dist(position).y), ScanHardness);\n}\n\n//get all the bled colors horizontally\nvec3 horizontalBleed(vec2 pos){\n    vec3 color = vec3(0.0, 0.0, 0.0);\n    float totalweight = 0.0;\n    float weight = ExpDecay(abs(Dist(pos).x), pixelStrHorizontal) * Scanline(pos);\n    color += Fetch(pos, vec2(0.0, 0.0)) * weight;\n    totalweight += weight;\n    \n    for(float i = 1.0; i<=propogateHorizontal; i++){\n        weight = ExpDecay(abs(Dist(pos).x + i), pixelStrHorizontal) * Scanline(pos + vec2(i, 0.0));\n        color += Fetch(pos, vec2(i, 0.0)) * weight;\n        totalweight += weight;\n        \n        weight = ExpDecay(abs(Dist(pos).x - i), pixelStrHorizontal) * Scanline(pos - vec2(i, 0.0));\n        color += Fetch(pos, vec2(-i, 0.0)) * weight;\n        totalweight += weight;\n    }\n    \n    return color/totalweight;\n}\n\n//get all the bled colors vertically\nvec3 verticalBleed(vec2 pos){\n    vec3 color = vec3(0.0, 0.0, 0.0);\n    float totalweight = 0.0;\n    float weight = ExpDecay(abs(Dist(pos).y), pixelStrVertical) * Scanline(pos);\n    color += horizontalBleed(pos + vec2(0.0, 0.0))*weight;\n    for(float i = 1.0; i<=propogateVertical; i++){\n        weight = ExpDecay(abs(Dist(pos).y + i), pixelStrVertical) * Scanline(pos + vec2(0.0, i));\n        color += horizontalBleed(pos + vec2(0.0, i))*weight;\n        \n        weight = ExpDecay(abs(Dist(pos).y - i), pixelStrVertical) * Scanline(pos - vec2(0.0, i));\n        color += horizontalBleed(pos + vec2(0.0, -i))*weight;\n    }\n    return color;\n}\n//total bleeding color \nvec3 bleed(vec2 pos){\n    vec3 horizontals = horizontalBleed(pos);\n    vec3 verticals = verticalBleed(pos);\n    return horizontals + verticals;\n}\n\n//give an aberration effect due to the tubes (Heavily obtained from the original one\nvec3 aberrate(vec2 pos){\n    vec3 mask=vec3(maskDark,maskDark,maskDark);\n    pos.x=fract((pos * iResolution.xy).x*50./6.);\n    if(pos.x<0.333)mask.r=maskLight;\n    else if(pos.x<0.666)mask.g=maskLight;\n    else mask.b=maskLight;\n    return mask;\n}\n\n//render out the actual color\nvec3 Render(vec2 pos){\n    vec3 color = Fetch(pos, vec2(0.0, 0.0));\n    color = Scanline(pos) * bleed(pos) * aberrate(pos);\n    return color;\n}\n//------------Modified from taken work-------------------\n// Entry.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n  // Unmodified.\n  \n  if(fragCoord.x<iResolution.x*0.5){\n    fragColor.rgb=Fetch(fragCoord.xy/iResolution.xy+vec2(0.3, 0.0),vec2(0.0,0.0));\n  }\n    \n  else{\n    vec2 pos=fragCoord.xy/iResolution.xy+vec2(-0.2, 0.0);\n    fragColor.rgb=Render(pos);\n  }\n    \n  fragColor.a=1.0;\n  fragColor.rgb*=Bar(fragCoord.x,iResolution.x*0.5);\n  fragColor.rgb=ToSrgb(fragColor.rgb);\n}\n\n","name":"Image","description":"","type":"image"}]}