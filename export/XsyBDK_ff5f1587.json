{"ver":"0.1","info":{"id":"XsyBDK","date":"1530406079","viewed":634,"name":"Fractional Game of Life","username":"dawsx","description":"A variation of the Conway's Game of Life ruleset where I implement the logic using arithmetic and use real numbers in the range [0, 1] instead of integers for cell states. The result is interesting organic-looking behavior.","likes":3,"published":3,"flags":32,"usePreview":0,"tags":["automata","gameoflife","ca","cellularautomata","gol"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv * zoom);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define get(x, y) (texture(iChannel0, (fragCoord + vec2(x, y))/iResolution.xy))\n#define A 1.049 /*max initial health. this value is very sensitive*/\n#define B 0.75 /*health decay*/\n\nmat4 rotmatrix(float theta) {\n    vec2 nums = vec2(0., 1.);\n    vec4 trig = vec4(0., sin(theta), cos(theta), -sin(theta));\n    mat4 matout = \n        mat4(trig.zxyx, nums.xyxx, trig.wxzx, nums.xxxy) *\n        mat4(nums.yxxx, trig.xzwx, trig.xyzx, nums.xxxy) *\n        mat4(trig.zwxx, trig.yzxx, nums.xxyx, nums.xxxy);\n    return matout;\n}\n\nvec4 evaluate(vec4 sum, vec4 color) {\n    vec4 a = max(vec4(A) - abs(vec4(3.) - sum), 0.);\n    vec4 b = max(vec4(B) - abs(vec4(2.) - sum), 0.);\n    return a + b * color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //vec4 start = vec4(2.9, 2.91, 2.92, 2.93);\n    vec4 start = vec4(2.9);\n    vec4 sum = \n        get( 1., 1.) + \n        get( 1., 0.) + \n        get( 1.,-1.) + \n        get( 0.,-1.) + \n        get(-1.,-1.) + \n        get(-1., 0.) + \n        get(-1., 1.) + \n        get( 0., 1.);\n    \n    vec4 color = texture(iChannel0, fragCoord/iResolution.xy);\n    vec2 mouse = iMouse.xy * zoom;\n    vec2 delta = mouse - fragCoord;\n    float dist = length(delta);\n    float theta = atan(delta.x, delta.y);\n    if (iMouse.z > 0. && dist < 20.)\n        sum += start * vec4(1. + sin(dist*340. + theta + mouse.x + mouse.y))/2.;\n    vec4 outcolor = evaluate(sum, color);\n    outcolor = outcolor*2. - 1.;\n  \toutcolor = rotmatrix(-0.05)*outcolor;\n    outcolor += 1.;\n    if (iFrame < 9) {\n        fragColor = vec4(texture(iChannel1, fragCoord/iResolution.xy));\n    }\n   \telse\n    \tfragColor = outcolor/2.;\n}\n","name":"Buf A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"float zoom = 1.;\n","name":"Common","description":"","type":"common"}]}