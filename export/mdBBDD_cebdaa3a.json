{"ver":"0.1","info":{"id":"mdBBDD","date":"1690054733","viewed":14,"name":"RayTracing Template v1","username":"alejoXD","description":"Basic Raymarching","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define TAU 6.283185\n#define PI 3.141592\n#define S smoothstep\n#define T iTime\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c); //Función de rotacíon de cámara\n}\n\nfloat sdBox(vec3 p, vec3 s) { //Box SDF\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat GetDist(vec3 p) {\n    float d = sdBox(p, vec3(1));\n    \n    return d; //Distancia hacia la caja de radio 1\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO; //Distancia hacia un punto de choque\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(.001, 0);\n    vec3 n = GetDist(p) - \n        vec3(GetDist(p-e.xyy), GetDist(p-e.yxy),GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) { //p = posición de la cámara, l = dirección del rayo, z = focal length\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n    \n    //Rotación de cámara con el ratón\n    vec3 ro = vec3(0, 3, -3);\n    ro.yz *= Rot(-m.y*PI+1.);\n    ro.xz *= Rot(-m.x*TAU);\n    \n    //Rayo de Raycast desde la cámara \"ro\"\n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 1.);\n    \n    vec3 col = vec3(0);\n    \n    //Distancia recorrida del rayo desde la cámara en dirección calculada\n    float d = RayMarch(ro, rd);\n    \n    //Si choca con algo\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d; //Posición del objeto colisionado\n        vec3 n = GetNormal(p); //Calculo de la normal\n        vec3 r = reflect(rd, n); //Reflejo en función de la normal\n\n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5; //Difussion light\n        col = vec3(dif);\n    }\n    \n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}