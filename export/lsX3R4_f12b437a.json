{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"texture","id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"//Light setup\n//vec3 light = vec3(1.0 + iMouse.x, iMouse.y, -4.0);\nfloat light_range = 10.0;\n\nfloat shadow_factor = 1.0;\n\n//Object setup\nvec4 sph1 = vec4( 0.0, 1.0, 0.0, 1.0);\n\nfloat iSphere(in vec3 ro, in vec3 rd, in vec4 sph)\n{\n\t//sphere at origin has equation |xyz| = r\n\t//sp |xyz|^2 = r^2.\n\t//Since |xyz| = ro + t*rd (where t is the parameter to move along the ray),\n\t//we have ro^2 + 2*ro*rd*t + t^2 - r2. This is a quadratic equation, so:\n\tvec3 oc = ro - sph.xyz; //distance ray origin - sphere center\n\t\n\tfloat b = 2.0 * dot(oc, rd);\n\tfloat c = dot(oc, oc) - sph.w * sph.w; //sph.w is radius\n\tfloat h = b*b - 4.0 * c; // delta\n\tif(h < 0.0) \n\t\treturn -1.0;\n\tfloat t = (-b - sqrt(h)) / 2.0; //Again a = 1.\n\n\treturn t;\n}\n\n//Get sphere normal.\nvec3 nSphere(in vec3 pos, in vec4 sph )\n{\n\treturn (pos - sph.xyz)/sph.w;\n}\n\n//Intersection with plane.\nfloat iPlane(in vec3 ro, in vec3 rd)\n{\n\t//Plane equation, y = 0 = ro.y + t * rd.y;\n\tfloat t = (-ro.y / rd.y);\n\treturn t;\n}\n\n//Get plane normal.\nvec3 nPlane(in vec3 pos)\n{\n\treturn vec3(0.0, 1.0, 0.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 light = vec3(cos(iTime) * 5.0, 5.0 + cos(iTime) * 2.0, 5.0);//normalize( vec3(0.57703));\n\n\t//pixel coordinates from 0 to 1\n\tvec2 uv = (fragCoord.xy / iResolution.xy);\n\t\n\t// Move the sphere ?\n\t//sph1.x = 0.5 * cos(iTime * 10.0) * texture(iChannel1, mod(vec2(iChannelTime[1]), 1.0)).x;\n\t//sph1.z = 0.5 * sin(iTime)* texture(iChannel1, mod(vec2(iChannelTime[1]), 1.0)).y;\n\t\n\t//generate a ray with origin ro and direction rd\n\tvec3 ro = vec3(0.0, 0.5, 3.0);\n\tvec3 rd = normalize(vec3( (-1.0+2.0*uv) * vec2(1.78, 1.0), -1.0));\n\t\n\t//intersect the ray with scene\n\n\t\n\t// bg color\n\tvec3 col = vec3(0.7);\n\tvec3 shphere_color = vec3(0.7, 0.1, 0.1);\n\tvec3 light_color = vec3(0.1, 0.8, 0.1);\n\t\n\tfloat intPoint = -1.0;\n\tintPoint = iSphere(ro, rd, sph1);\n\t\n\tif (intPoint > 0.0)\n\t{\n\t\t// hit the sphere\n\t\tvec3 pos = ro + intPoint * rd;\n\t\tvec3 nor = nSphere(pos, sph1);\n\t\tfloat dif = max(0.0, dot(nor, normalize(light - pos))); //diffuse.\n\t\t\n\t\tfloat attenuation = 1.0 - smoothstep(0.0, light_range, length(light - pos));\n\t\tdif *= attenuation;\n\t\t\n\t\tfloat ao = 0.5 + 0.5 * nor.y;\n\t\t//ao = 0.5 * (dot(nor, nPlane(pos)) + 1.0); complete formula. The one above is simplified.\n\t\tcol = light_color * dif * ao + shphere_color * ao;\n\t}\n\telse\n\t{\n\t\t// check if we hit the ground\n\t\tintPoint = iPlane(ro, rd);\n\t\t\n\t\tif (intPoint > 0.0)\n\t\t{\n\t\t\n\t\t\t// hit the ground\n\t\t\t//t += clamp(-1.0, 0.0, 0.2 + 0.8 * cos(iChannelTime[1])) + uv.x + uv.y * 2.0 + cos(iTime);\n\t\t\tvec3 pos = ro + intPoint * rd;\n\t\t\tvec3 nor = nPlane( pos );\n\t\t\t//float dif = max(0.0, dot(nor, light));\n\t\t\t\n\t\t\tfloat amb = smoothstep(0.0, 2.0 * sph1.w, length(pos.xz - sph1.xz)); \n\t\t\t\n\t\t\t//float amb = min(smoothstep( 0.0, 2.0 * sph1.w, length(pos.xz - sph1.xz) ),\n\t\t\t//\t\t\t\tsmoothstep( 0.0, 2.0 * sph2.w, length(pos.xz - sph2.xz) ));\n\t\t\tcol = vec3(amb * 0.7  * texture(iChannel0, mod(vec3(ro + rd * intPoint).xz, 0.0) + vec2(cos(iTime), iTime)).xyz);\n\t\t}\n\t}\n\t\n\tcol *= shadow_factor;\n\t\n\tcol = sqrt(col);\n\t\n\tfragColor = vec4(col,1.0);\n\t\n\t//vec2 uv = fragCoord.xy / iResolution.xy;\n\t//fragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lsX3R4","date":"1363477511","viewed":869,"name":"Simplest raytracing","username":"winterismute","description":"Just a simple raytracing example. Rays are tested for intersection with either sphere or plane and eventually color is applied.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","simple","basic"],"hasliked":0,"parentid":"","parentname":""}}