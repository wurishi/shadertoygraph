{"ver":"0.1","info":{"id":"4dd3Wn","date":"1449048159","viewed":589,"name":"N-color gradients","username":"104","description":"Copy/paste function to create gradient functions for N equally-spaced colors. Probably can be performance-optimized.","likes":16,"published":1,"flags":0,"usePreview":0,"tags":["gradient","palette"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"\n// c64 palette\nvec3 color0 = vec3(0,0,0);// black\nvec3 color1 = vec3(1,1,1);// white\nvec3 color2 = vec3(0.41,0.22,0.17);// red\nvec3 color3 = vec3(0.44,0.64,0.70);// cyan\nvec3 color4 = vec3(0.44,0.24,0.53);// violet\nvec3 color5 = vec3(0.35,0.55,0.26);// green\nvec3 color6 = vec3(0.21,0.16,0.47);// blue\nvec3 color7 = vec3(0.72,0.78,0.44);// yellow\nvec3 color8 = vec3(0.44,0.31,0.15);// orange\nvec3 color9 = vec3(0.26,0.22,0);// brown\nvec3 colorA = vec3(0.60,0.40,0.35);// light red\nvec3 colorB = vec3(0.27,0.27,0.27);// grey1\nvec3 colorC = vec3(0.42,0.42,0.42);// grey2\nvec3 colorD = vec3(0.60,0.82,0.52);// light green\nvec3 colorE = vec3(0.42,0.37,0.71);// light blue\nvec3 colorF = vec3(0.58,0.58,0.58);// grey3\n\n// not sure the best curve to use for mixing. linear looks nice to me though; better\n// than smoothstep and smootherstep.\n// smoothstep is of course the fastest though.\nfloat gradientStep(float edge0, float edge1, float x)\n{\n    return smoothstep(edge0, edge1, x);\n\n    // smootherstep\n    //x = clamp((x - edge0)/(edge1 - edge0), 0.0, 1.0);\n    //return x*x*x*(x*(x*6. - 15.) + 10.);\n    \n    // linear\n    //x = clamp((x - edge0)/(edge1 - edge0), 0.0, 1.0);\n    //return x;\n}\n\n\n// gradient where \nvec3 gradient(float t, vec3 c1, vec3 c2, vec3 c3)\n{\n    const float colCount = 3.;\n    const float bandSize = 1./(colCount-1.);\n    const float plateauSize = 0. * (bandSize/2.);\n    float i = 0.;\n\treturn\n        + (c1 * (1.-gradientStep(plateauSize,bandSize-plateauSize, abs(t-bandSize*i++))))\n        + (c2 * (1.-gradientStep(plateauSize,bandSize-plateauSize, abs(t-bandSize*i++))))\n        + (c3 * (1.-gradientStep(plateauSize,bandSize-plateauSize, abs(t-bandSize*i++))))\n        ;\n}\n\nvec3 gradient(float t, vec3 c1, vec3 c2, vec3 c3, vec3 c4)\n{\n    const float colCount = 4.;\n    const float bandSize = 1./(colCount-1.);\n    const float plateauSize = 0. * (bandSize/2.);\n    float i = 0.;\n\treturn\n        + (c1 * (1.-gradientStep(plateauSize,bandSize-plateauSize, abs(t-bandSize*i++))))\n        + (c2 * (1.-gradientStep(plateauSize,bandSize-plateauSize, abs(t-bandSize*i++))))\n        + (c3 * (1.-gradientStep(plateauSize,bandSize-plateauSize, abs(t-bandSize*i++))))\n        + (c4 * (1.-gradientStep(plateauSize,bandSize-plateauSize, abs(t-bandSize*i++))))\n        ;\n}\n\nvec3 gradient(float t, vec3 c1, vec3 c2, vec3 c3, vec3 c4, vec3 c5)\n{\n    const float colCount = 5.;\n    const float bandSize = 1./(colCount-1.);\n    const float plateauSize = 0. * (bandSize/2.);\n    float i = 0.;\n\treturn\n        + (c1 * (1.-gradientStep(plateauSize,bandSize-plateauSize, abs(t-bandSize*i++))))\n        + (c2 * (1.-gradientStep(plateauSize,bandSize-plateauSize, abs(t-bandSize*i++))))\n        + (c3 * (1.-gradientStep(plateauSize,bandSize-plateauSize, abs(t-bandSize*i++))))\n        + (c4 * (1.-gradientStep(plateauSize,bandSize-plateauSize, abs(t-bandSize*i++))))\n        + (c5 * (1.-gradientStep(plateauSize,bandSize-plateauSize, abs(t-bandSize*i++))))\n        ;\n}\n\n\n// centers colors so they're all \"fully visible\".\n// edge colors will naturally get slightly more intensity because they don't blend with\n// anything on the left/right. If you need gradients that operate as a loop, check out\n// \"C64 Rasterbars animated\": https://www.shadertoy.com/view/Mdd3Dn\n\nvec3 gradient(float t, vec3 c1, vec3 c2, vec3 c3, vec3 c4, vec3 c5, vec3 c6, vec3 c7, vec3 c8, vec3 c9, vec3 c10, vec3 c11, vec3 c12, vec3 c13, vec3 c14, vec3 c15, vec3 c16)\n{\n    const float colCount = 16.;\n    const float bandSize = 1./colCount;\n    const float plateauSize = 0.0 * (bandSize/2.);\n    t -= bandSize*.5;\n    float i = 0.;\n\treturn\n        + (c1 * (1.-gradientStep(plateauSize,bandSize-plateauSize, t-bandSize*i++)))\n        + (c2 * (1.-gradientStep(plateauSize,bandSize-plateauSize, abs(t-bandSize*i++))))\n        + (c3 * (1.-gradientStep(plateauSize,bandSize-plateauSize, abs(t-bandSize*i++))))\n        + (c4 * (1.-gradientStep(plateauSize,bandSize-plateauSize, abs(t-bandSize*i++))))\n        + (c5 * (1.-gradientStep(plateauSize,bandSize-plateauSize, abs(t-bandSize*i++))))\n        + (c6 * (1.-gradientStep(plateauSize,bandSize-plateauSize, abs(t-bandSize*i++))))\n        + (c7 * (1.-gradientStep(plateauSize,bandSize-plateauSize, abs(t-bandSize*i++))))\n        + (c8 * (1.-gradientStep(plateauSize,bandSize-plateauSize, abs(t-bandSize*i++))))\n        + (c9 * (1.-gradientStep(plateauSize,bandSize-plateauSize, abs(t-bandSize*i++))))\n        + (c10 * (1.-gradientStep(plateauSize,bandSize-plateauSize, abs(t-bandSize*i++))))\n        + (c11 * (1.-gradientStep(plateauSize,bandSize-plateauSize, abs(t-bandSize*i++))))\n        + (c12 * (1.-gradientStep(plateauSize,bandSize-plateauSize, abs(t-bandSize*i++))))\n        + (c13 * (1.-gradientStep(plateauSize,bandSize-plateauSize, abs(t-bandSize*i++))))\n        + (c14 * (1.-gradientStep(plateauSize,bandSize-plateauSize, abs(t-bandSize*i++))))\n        + (c15 * (1.-gradientStep(plateauSize,bandSize-plateauSize, abs(t-bandSize*i++))))\n        + (c16 * (1.-gradientStep(plateauSize,bandSize-plateauSize, bandSize*i++-t)))\n        ;\n\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    if(uv.y > .666)\n\t\tfragColor = vec4(gradient(uv.x, color3, color2, color4, colorD),1);\n    else if(uv.y > .333)\n\t\tfragColor = vec4(gradient(uv.x, color2, color3, color4, color5, color6),1);\n    else\n\t\tfragColor = vec4(gradient(uv.x, color0, color1, color2, color3, color4, color5, color6, color7, color8, color9, colorA, colorB, colorC, colorD, colorE, colorF),1);\n\n\n    // post-processing courtesy of IQ ( https://www.shadertoy.com/view/ll2GD3 )\n\n    // band\n    float f = fract(uv.y*3.0);\n    // borders\n    fragColor.rgb *= smoothstep( 0.49, 0.47, abs(f-0.5) );\n    // shadowing\n    fragColor.rgb *= 0.5 + 0.5*sqrt(4.0*f*(1.0-f));\n}\n\n\n","name":"","description":"","type":"image"}]}