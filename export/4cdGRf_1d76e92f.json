{"ver":"0.1","info":{"id":"4cdGRf","date":"1712839286","viewed":57,"name":"Rolling Torus","username":"zma","description":"poppin concepts","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["torus"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define threshold 0.025\n#define TORUS_RADIUS 0.4\n#define TORUS_WIDTH 0.03\n#define ZERO 0\n\nfloat sdTorus( vec3 p, vec2 t, vec3 c)\n{\n  vec2 q = vec2(length(p.xz - c.xz)-t.x,p.y-c.y);\n  return length(q)-t.y;\n}\nfloat sdCone( vec3 p, vec2 c, float h )\n{\n  float q = length(p.xz);\n  return max(dot(c.xy,vec2(q,p.y)),-h-p.y);\n}\n\nfloat map(vec3 pos,vec3 c){\n        \n    float rs1 = sdTorus(pos, vec2(TORUS_RADIUS, TORUS_WIDTH), c); \n    float rs2 = sdCone(pos, vec2(0.9, 0.3), 2.0);\n    return rs2 > rs1? rs1 : rs2;\n    //return rs2;\n}\n\n\nfloat iPlane(vec3 ro, vec3 rd){\n    return (-2.- ro.y)/(rd.y);\n}\n\n\nvec3 calcNormal(in vec3 pos, in vec3 c){\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    const float eps = 0.0005;\n    return normalize( e.xyy*map( pos + e.xyy*eps, c ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*eps, c ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*eps, c ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*eps, c ));\n}\nfloat raymarch(vec3 ro, vec3 rd, vec3 s){\n    const float tmax = 5.;\n    float t = 0.;\n    for(int i = 0; i<10000; i++){\n       vec3 pos = ro + t*rd;\n       float h = map(pos, s);\n       t += h;\n       if(h < 0.00001 || t>tmax) break;\n           }\n    return t;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec3 ro = vec3(  0.0, 0.3, -2.0 );\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    //Camera\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\tvec2 p = (2.*fragCoord - iResolution.xy)/iResolution.y;\n    vec3 rd = normalize( p.x*uu + p.y*vv + 1.0*ww );    \n    //Render\n    vec3 lig = normalize(vec3(0.5, 0.5, 0.5));\n    \n    \n            \n    //raymarch\n   \n    vec3 shift =0.43 * vec3(sin(4.*iTime), -0.0, cos(4.*iTime));\n    \n    float tmin = 1e10;\n    float tmax = 5.;\n        \n    vec3 col = vec3(0.);\n    vec3 nor = vec3(0.);\n    \n\n    float t2 = raymarch(ro, rd, shift);\n    \n    if(t2 < tmax && t2<tmin){\n        tmin = t2;\n        vec3 pos = ro + tmin*rd;\n        nor = calcNormal(pos, shift);\n        float dif = clamp(dot(nor, lig), 0., 1.);\n        float amb = 0.5 + 0.5*dot(nor, vec3(0.57703));\n        col = vec3(0.2, 0.3, 0.4)*amb + vec3(0.85, 0.75, 0.65)*dif;\n    }\n    \n    float t1 = iPlane(ro, rd);\n    tmax = min(tmax, t1);\n    if(t1>0.0 && t1<tmin){\n        tmin = t1;\n        vec3 pos = ro + tmin*rd;\n        nor = vec3(0.0, 1.0, 0.0);\n        col = vec3(0.3, 0.3, 0.3);\n       \n    }\n    \n    //gamma\n    col = 1.3*sqrt(col);\n    col *= exp(-0.04*tmin);    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}