{"ver":"0.1","info":{"id":"lcj3Dh","date":"1704190779","viewed":49,"name":"cosmos on water","username":"nayk","description":"stars,cosmos, water, light,colorful","likes":1,"published":1,"flags":1,"usePreview":0,"tags":["water","light","colorful","stars","cosmos"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* originals https://www.shadertoy.com/view/MlXGWf https://www.shadertoy.com/view/4tyfWy https://www.shadertoy.com/view/lslyRn*/\n#define time iTime\nfloat sfract(float n)\n{\n    return smoothstep(0.0,1.0,fract(n));\n}\nfloat rand(vec2 n)\n{\n \treturn fract(abs(sin(dot(n,vec2(5.3357,-5.8464))))*256.75+0.325);   \n}\nmat2 rotate2D(float r) {\n    return mat2(cos(r), sin(r), -sin(r), cos(r));\n}\nfloat noise(vec2 n)\n{\n    float h1 = mix(rand(vec2(floor(n.x),floor(n.y))),rand(vec2(ceil(n.x),floor(n.y))),sfract(n.x));\n    float h2 = mix(rand(vec2(floor(n.x),ceil(n.y))),rand(vec2(ceil(n.x),ceil(n.y))),sfract(n.x));\n    float s1 = mix(h1,h2,sfract(n.y));\n    return s1;\n}\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in float mouseX )\n{\n    vec2 dir = ((iResolution.xy)*vec2(1.0,-0.5)+vec2(0.0,0.75))*6.28;\n    \n    vec3 pos = vec3(0.0,0.5,0.0);//vec3(noise((time/32.0)*vec2(1.0,0.0)),0.05,noise((time/32.0)*vec2(0.0,1.0)))*20.0;\n  \n\tcamPos =  pos;//vec3(cos(time/4.0)*8.0,1.0,sin(time/4.0)*8.0);\n    camTar = pos+vec3(cos(dir.x)*cos(dir.y),sin(dir.y),sin(dir.x)*cos(dir.y));\n}\nvec3 doBackground( in vec3 dir)\n{\n    float sky = dot(dir,vec3(0.0,-1.0,0.0))*0.5+0.5;\n    float sun = pow(dot(dir,normalize(vec3(1.0,0.7,0.9)))*0.5+0.5,32.0);\n    vec2 p = vec2(dir.x+dir.z,dir.y-dir.z);\n    float clouds = noise(p*8.0)*noise(p*9.0)*noise(p*10.0)*noise(p*11.0)*sky;\n    vec3 total = vec3(sky*0.6+0.05+sun+clouds,sky*0.8+0.075+pow(sun,1.5)+clouds,sky+0.2+pow(sun,4.0)+clouds);\n    vec3 ground = texture(iChannel0,(dir.xz)/dir.y).rrr*vec3(1.1,1.0,0.9);\n    return mix(total,ground,clamp((sky-0.6)*64.0,0.0,1.0));\n}\n    \nfloat doModel( vec3 pos )\n{\n    vec3 p = pos+vec3(time*0.2,0.0,0.0)+vec3(noise(pos.xz),0.0,noise(pos.xz+8.0))*0.2;//Distort coordinates\n    float height = 0.1*pow(noise(p.xz+vec2(time*0.7,time*0.6))*0.5+noise(p.xz*8.0+vec2(time))*0.35+noise(p.xz*16.0+vec2(0.0,time*0.5))*0.1+noise(p.xz*24.0)*0.05,0.25);\n    float model = p.y-height;\n    return model;\n}\nvec3 doMaterial(in vec3 rd, in vec3 nor )\n{\n    vec3 ref = doBackground(reflect(rd,nor));\n    return mix(doBackground(refract(rd,nor,0.8)),ref,clamp(dot(ref,vec3(1.0/3.0))*1.5,0.0,1.0));\n}\nfloat calcSoftshadow( in vec3 ro, in vec3 rd );\n\nvec3 doFog( in vec3 rd, in float dis, in vec3 mal )\n{\n    vec3 col = mal;\n\tcol = mix(doBackground(rd),col,1.0-clamp(dis*dis/90.0,0.0,1.0));\n\n    return col;\n}\n\nfloat calcIntersection( in vec3 ro, in vec3 rd )\n{\n\tconst float maxd = 10.0;           // max trace distance\n\tconst float precis = 0.001;        // precission of the intersection\n    float h = precis*2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    for( int i=0; i<90; i++ )          // max number of raymarching iterations is 90\n    {\n        if( h<precis||t>maxd ) break;\n\t    h = doModel( ro+rd*t );\n        t += h*.8;\n    }\n\n    if( t<maxd ) res = t;\n    return res;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    const float eps = 0.002;             // precision of the normal computation\n\n    const vec3 v1 = vec3( 1.0,-1.0,-1.0);\n    const vec3 v2 = vec3(-1.0,-1.0, 1.0);\n    const vec3 v3 = vec3(-1.0, 1.0,-1.0);\n    const vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\n\treturn normalize( v1*doModel( pos + v1*eps ) + \n\t\t\t\t\t  v2*doModel( pos + v2*eps ) + \n\t\t\t\t\t  v3*doModel( pos + v3*eps ) + \n\t\t\t\t\t  v4*doModel( pos + v4*eps ) );\n}\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd )\n{\n    float res = 1.0;\n    float t = 0.5;                 // selfintersection avoidance distance\n\tfloat h = 1.0;\n    for( int i=0; i<40; i++ )         // 40 is the max numnber of raymarching steps\n    {\n        h = doModel(ro + rd*t);\n        res = min( res, 64.0*h/t );   // 64 is the hardness of the shadows\n\t\tt += clamp( h, 0.02, 2.0 );   // limit the max and min stepping distances\n    }\n    return clamp(res,0.0,1.0);\n}\n\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\n#define R iResolution.xy\n#define M 0.\n#define H(a) (cos(radians(vec3(0, 60, 120))+(a)*6.2832)*.5+.5)  // hue\n#define N(r) ((abs(r) > 1.) ? 1./(2.*sign(r)-(r)): r)  // range +/-2 to value on number line\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam;\n            p.xy*=rotate2D(iTime*.002);\n            // the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.2-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.033,1.);\t\n}\n\nfloat cheap_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec2 m = iResolution.xy;\n    vec2 uv=fragCoord.xy/iResolution.xy-.5;\n    // camera movement\n    vec3 ro, ta;\n    doCamera( ro, ta, iTime, m.x );\n  ta.xz*=rotate2D(iTime*0.1);\n  \n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  // 0.0 is the camera roll\n    uv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,1.);\n    \n\tfloat time=iTime*speed+.0;\nfloat s = 500., // scale\n          l = 70.,  // detail loop\n          wr = 2.5, // warp radius (frame scale)\n          t = 9. + pow(1. + iTime/60., 2.),\n          a = -sqrt(t*s*2.)*6.2832, // rotation\n          i = 0., f = i, n, r, w, h;\n     vec4 C =fragColor;\n     vec2 U = fragCoord;\n    vec2 m2 = (R-R/2.)/R.y*4.,\n         u = (U-R/2.)/R.y,\n         q, v;\n    vec4 col = vec4(0);\n    float t2 = iTime;\n    \n    for(float i,e,g,v,u; i++<60.; g+=e) {\n        vec3 p = vec3((.5*iResolution.xy-fragCoord.xy)/iResolution.y*g,g-7.+1.005);\n        p.xz *= rotate2D(t*.05);\n        p.xy*=rotate2D(t*.05);\n        p.yz*=rotate2D(t*.05);\n        e = v = 2.;\n        for(int j; j++<11; j>5\n            ?e=min(e,length(p.xz+length(p)/u*(0.41))/v),p.xz=abs(p.xz)-.1,p\n            :p=abs(p)-.35)v/=u=dot(p,p),p/=u,p.y=1.6-p.y;\n            col+=vec4(05,5,5,0)*.003 /exp(p.y/pow(v, .8));\n    }\n\n    // Output to screen\n    fragColor = col;\n \n    vec3 c = H(length(u))/25.;\n    \n    n = N(clamp(-m.y, -1.8, 1.8)); // root from mouseY\n    u *= pow(s, n)*wr; // apply zoom\n    \n    r = exp(log(length(u))/n); // root radius\n    q = fwidth(u); // pixel size\n    w = R.y/6e2; // point size\n    for (; i++<l;) // cell overlap loop\n        h = max(0., round((r-i)/l))*l+i, // rounded radius\n        f = max(f, w/length((u-cos(6.2832*sqrt(t*h*2.)+a-vec2(0, 1.5708))*pow(h, n))/q));\n    c += min(f, 1.) * min(1., s/r);\n    \n    v = abs(fract(U/R+.5)-.5);    // vignette\n    c = min(c, min(v.x, v.y)*5.); // darken screen edges\n     uv *= 2.0 * ( cos(iTime * 2.0) -2.5);\n    \n    // anim between 0.9 - 1.1\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;    \n\n   \n\t\n\t\n\t// create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy,2.0) ); // 2.0 is the lens length\nrd.xz*=rotate2D(t*1.35);\n\tvec3 col2 = doBackground(rd);\n\n\t// raymarch\n    float t3 = calcIntersection( ro, rd );\n    if( t3>-0.5 )\n    {\n        // geometry\n        vec3 pos = ro + t3*rd;\n        vec3 nor = calcNormal(pos);\n\n        // materials\n        vec3 mal = doMaterial(rd, nor );\n\n        col2 = doFog( rd, t3, mal );\n\t\n    // gamma\n\tcol2 = pow( clamp(col2,0.0,1.0), vec3(0.4545) );\n\t   \n   \n\n\nvec3 from=vec3(1.,.5,0.5)*mal;\n\tfrom+=vec3(time*2.,time,-2.);\n\t\n\tmainVR(fragColor, fragCoord, from, dir);\t\n    fragColor*= vec4(col.xyz+col2, 1);\n       fragColor+= vec4(cheap_star(rd.xy,anim) * vec3(0.55,0.5,0.55)*0.3, 1.0);\n   }\n     \n       \n}","name":"Image","description":"","type":"image"}]}