{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"buffer","id":"4dXGR8","filepath":"/media/previz/buffer00.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"/*\nBasic Buffer Painter 2 -- svenofnine\nhttps://www.shadertoy.com/view/XcVBWV\n\nHere I reused some patterns and functions from the Mandala Painter shader\nto deal with load and save variables in pixels. So it has following additional features:\n\nthanks to https://www.shadertoy.com/view/MlcGDB by gPlatl\n\nKeyboard Shortcuts\n==================\n\nSpace - clear canvas\n\n1,2,3,4,5,6 - change brush size\n\nQ,W,E,R,T,Y/Z,U,I,O,P - change colour\n\n\n*/\n\nfloat gridlines( float value, float epsilon ) {\n    return 1.-smoothstep(0., epsilon, abs(value - round(value)));\n}\n\nvec3 grid( vec2 pos, float linecount, float linewidth ) {\n    return 0.1*vec3(gridlines(pos.x*linecount*ar.x,linewidth)) + 0.1*vec3(gridlines(pos.y*linecount,linewidth));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 col = texture(iChannel0, uv) + vec4( grid( uv, 20., 0.05 ), 0.);\n\n    // Output to screen\n    fragColor = col;\n}","name":"Image","description":"","type":"image"},{"outputs":[{"channel":0,"id":"4dXGR8"}],"inputs":[{"channel":0,"type":"buffer","id":"4dXGR8","filepath":"/media/previz/buffer00.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"channel":1,"type":"keyboard","id":"4dXGRr","filepath":"/presets/tex00.jpg","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"/*\nBuffer A\n\nBasic Buffer Painter 2 -- svenofnine\nhttps://www.shadertoy.com/view/XcKfRc\n*/\n\n\n// 8< based on https://www.shadertoy.com/view/MlcGDB\n// draw line segment from A to B with given thickness r, \nfloat segment(in vec2 P, in vec2 A, in vec2 B, in float r) {\n    vec2 g = B - A;\n    vec2 h = P - A;\n    float d = length(h - g * clamp(dot(g, h) / dot(g,g), 0.0, 1.0));\n    // return smoothstep(r, 0.5*r, d);     // original has bright points where segments overlap\n\treturn smoothstep(r, 0.5*r, d)-smoothstep(r,0.,length(h));  \n}\n// 8< end snip\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    // normalized coordinate (values 0..1)\n\n    vec2 uv = fragCoord / iResolution.xy * ar;\n    \n    // READ\n    // get canvas at Position fragCoord from Buffer1 / iChannel0\n    vec4 pixel = (iFrame > 0) ? texelFetch(iChannel0, ivec2(fragCoord), 0) : vec4( 0.,0.,0.,1.);\n    // get data from special texels\n    vec4 clear_texel = (iFrame > 0) ? texelFetch( iChannel0, POS_CLEAR_TOGGLE, 0 ) : vec4( 0. );\n    vec4 size_texel = (iFrame > 0) ? texelFetch( iChannel0, POS_BRUSH_SIZE, 0 ) : vec4( 0.02, 0., 0., 0.);\n    vec4 color_texel = (iFrame > 0 ) ? texelFetch( iChannel0, POS_BRUSH_COLOR, 0 ) : vec4( 1., 0.5, 0., 1.);\n    vec4 oldmouse_texel = (iFrame > 0 ) ? texelFetch( iChannel0, OLD_MOUSE_POS, 0 ) : vec4( iMouse.xyz, 0.);\n   \n    vec4 key_state = vec4(0.);\n    \n    // CHANGE\n    // starts the user a new line?\n    if( oldmouse_texel.z < 0.5 ){\n        oldmouse_texel.xy = iMouse.xy;\n    }\n   \n    // if user wants to clear the canvas (keys 1..6)\n    if( clear_texel.r > 0. ) {\n      pixel.rgb = vec3(0.);\n      clear_texel.r = clamp(0., 1., clear_texel.r - 0.5 );\n    }\n    key_state = texelFetch( iChannel1, ivec2(KEY_SPACE,1), 0 );  // Space Key to clear canvas\n    if( key_state.r > 0. ) clear_texel.r = 1.0; \n\n    // if user wants to change the brush size (keys 1..6)\n    if ( texelFetch( iChannel1, ivec2(KEY_1,1), 0 ).x > 0. ) size_texel.r = 0.01;\n    if ( texelFetch( iChannel1, ivec2(KEY_2,1), 0 ).x > 0. ) size_texel.r = 0.02;\n    if ( texelFetch( iChannel1, ivec2(KEY_3,1), 0 ).x > 0. ) size_texel.r = 0.03;\n    if ( texelFetch( iChannel1, ivec2(KEY_4,1), 0 ).x > 0. ) size_texel.r = 0.05;\n    if ( texelFetch( iChannel1, ivec2(KEY_5,1), 0 ).x > 0. ) size_texel.r = 0.08;\n    if ( texelFetch( iChannel1, ivec2(KEY_6,1), 0 ).x > 0. ) size_texel.r = 0.13;\n    float brush_size = size_texel.r * 100.;\n\n    // if user wants to change colours\n    if ( texelFetch( iChannel1, ivec2(KEY_Q,1), 0 ).x > 0. ) color_texel = vec4( 1. , 0. , 0. , 1. );\n    if ( texelFetch( iChannel1, ivec2(KEY_W,1), 0 ).x > 0. ) color_texel = vec4( 1. , 0. , 0. , 1. );\n    if ( texelFetch( iChannel1, ivec2(KEY_E,1), 0 ).x > 0. ) color_texel = vec4( 0.5, 0. , 1. , 1. );\n    if ( texelFetch( iChannel1, ivec2(KEY_R,1), 0 ).x > 0. ) color_texel = vec4( 0. , 1. , 0.5, 1. );\n    if ( texelFetch( iChannel1, ivec2(KEY_T,1), 0 ).x > 0. ) color_texel = vec4( 1. , 0.5, 1. , 1. );\n    if ( texelFetch( iChannel1, ivec2(KEY_Y,1), 0 ).x > 0. ) color_texel = vec4( 0.5, 0. , 0. , 1. );\n    if ( texelFetch( iChannel1, ivec2(KEY_Z,1), 0 ).x > 0. ) color_texel = vec4( 0.5, 0. , 0. , 1. );\n    if ( texelFetch( iChannel1, ivec2(KEY_U,1), 0 ).x > 0. ) color_texel = vec4( 0. , 0.5, 0. , 1. );\n    if ( texelFetch( iChannel1, ivec2(KEY_I,1), 0 ).x > 0. ) color_texel = vec4( 0. , 0. , 0.5, 1. );\n    if ( texelFetch( iChannel1, ivec2(KEY_O,1), 0 ).x > 0. ) color_texel = vec4( 0.5, 0.5, 0.5, 1. );\n    if ( texelFetch( iChannel1, ivec2(KEY_P,1), 0 ).x > 0. ) color_texel = vec4( 0. , 0. , 0. , 1. );\n    vec3 brush_color = color_texel.rgb;\n\n    // if user clicked the mouse\n    if( iMouse.z > 0.5 )\n      pixel.rgb += vec3( segment( fragCoord, oldmouse_texel.xy, iMouse.xy, brush_size) ) * brush_color;\n //       pixel.rgb += vec3(1. - smoothstep( 0., brush_size * unit, distance(mouse, uv) )) * brush_color;\n\n    // WRITE\n    fragColor = vec4( pixel.rgb, 1.0); \n    \n    // Save data back to texels\n    fragColor = ( ivec2(fragCoord) == POS_CLEAR_TOGGLE ) ? clear_texel : fragColor;\n    fragColor = ( ivec2(fragCoord) == POS_BRUSH_SIZE ) ? size_texel : fragColor;\n    fragColor = ( ivec2(fragCoord) == POS_BRUSH_COLOR ) ? color_texel : fragColor; \n    fragColor = ( ivec2(fragCoord) == OLD_MOUSE_POS ) ? vec4( iMouse.xyz, 0.) : fragColor; \n}","name":"Buffer A","description":"","type":"buffer"},{"outputs":[],"inputs":[],"code":"// codes found with Keycode Viewer by fb36ca4: https://www.shadertoy.com/view/4tt3Wn\nconst int KEY_SPACE = 32;   // clear canvas with space\n\n// keys for different brush sizes (fibonacci ...)\nconst int KEY_1 = 49;   // brush size 1.0\nconst int KEY_2 = 50;   // brush size 2.0\nconst int KEY_3 = 51;   // brush size 3.0\nconst int KEY_4 = 52;   // brush size 5.0\nconst int KEY_5 = 53;   // brush size 8.0\nconst int KEY_6 = 54;   // brush size 13.0\n\n// keys for different colours\nconst int KEY_Q = 81;   // gold (startup)\nconst int KEY_W = 87;   // surprise\nconst int KEY_E = 69;   // surprise\nconst int KEY_R = 82;   // surprise\nconst int KEY_T = 84;   // surprise\nconst int KEY_Y = 90;   // surprise\nconst int KEY_Z = 89;   // the same as Y for people like me who use a german keyboard\nconst int KEY_U = 85;   // surprise\nconst int KEY_I = 73;   // surprise\nconst int KEY_O = 79;   // surprise\nconst int KEY_P = 80;   // black\n\n// positions of my storage texels\nconst ivec2 POS_CLEAR_TOGGLE = ivec2(0, 0);  // stores 1.0 at r value for clearing screen\nconst ivec2 POS_BRUSH_COLOR = ivec2(1, 0);   // current color\nconst ivec2 POS_BRUSH_SIZE = ivec2(2, 0);    // current size\nconst ivec2 OLD_MOUSE_POS = ivec2(3, 0);    // current size\n\n// Common and useful calculations\n#define ar vec2(iResolution.x/iResolution.y, 1.)  \n#define unit float(1. / min(iResolution.x, iResolution.y))\n#define mouse vec2(iMouse.xy / iResolution.xy * ar)","name":"Common","description":"","type":"common"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":true,"mFlagMultipass":true,"mFlagMusicStream":false},"info":{"id":"XcVBWV","date":"1734468652","viewed":116,"name":"Basic Buffer Painter 2","username":"Svenofnine","description":"It's a fork from Basic Buffer Painter. I added lines instead of dots and keyboard shortcut for clear screen and changing size or color, similiar to my Mandlala Shader.\nEnjoy!","likes":4,"published":3,"flags":48,"usePreview":0,"tags":["test","mouse","buffer","principle"],"hasliked":0,"parentid":"XcKfRc","parentname":"Basic Buffer Painter"}}