{"ver":"0.1","info":{"id":"slKBWW","date":"1664542489","viewed":358,"name":"2bit Enemy Generator","username":"SnoopethDuckDuck","description":"Now comes with 2 emotions!!!","likes":30,"published":3,"flags":48,"usePreview":0,"tags":["feedback","cellularautomata"],"hasliked":0,"parentid":"flGfDD","parentname":"More Pixel Art Shapes"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 cell(ivec2 f) {\n    return texelFetch(iChannel0, f, 0);\n}\n\nvoid mainImage(out vec4 col, in vec2 f)\n{\n    col = vec4(0.0);\n    int frame = iFrame % 120;\n    float o = floor(float(iFrame)/120.);\n    // Translate and zoom\n    f -= 0.5 * iResolution.xy;\n    f *= 1.5 * dim.y/iResolution.y; \n    f += 0.5 * dim;\n    // s = 1. if right side, 0. if left\n    float s = step(floor(f.x), 0.5 * dim.x);   \n    \n    // Mirrored coords \n    ivec2 ff = ivec2(s * dim.x + (1. - f.x) * (2. * s - 1.), f.y);\n    f += 1.;\n    ivec2 ff2 = ivec2(s * dim.x + (1. - f.x) * (2. * s - 1.), f.y);\n    col = cell(ff);\n    float g = col.g;\n    vec4 col2 = cell(ff + ivec2(0,1));\n    vec4 col3 = cell(ff2);\n    float b = col.b;\n    col.rgb = col.rrr;\n\n    vec3 pl = pal(0.2 * o, vec3(0,1,2)/3.);\n    \n    // Uncomment me to remove colors\n    col.rgb += col2.r * pl;\n    //col.rgb += max(col2.r, col3.r) * pl;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":2,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define KEYBOARD iChannel1\n#define KEY_RESET 82\n\nvec4 cell(in ivec2 p) {\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    return texelFetch(iChannel0, p, 0 );\n}\n\nbool key_down(int key) {\n    return int(texelFetch(KEYBOARD, ivec2(key, 0), 0).x) == 1;\n}\n\nvoid mainImage(out vec4 col, in vec2 f)\n{\n    col = vec4(0.0);\n    ivec2 px = ivec2(f);\n    int frame = iFrame % 120;\n    // not my finest line of code!\n    int h = 3 + int(floor(9. * h21(vec2(floor(float(iFrame)/120.), 19.))));\n    \n    ivec2 g = ivec2(f + vec2(100.,151.) * iTime * 60.) & 1023;\n    float rand = texelFetch(iChannel2, g, 0).r;\n           \n    if (frame == 0 || key_down(KEY_RESET)) {     \n        col.g = rand;\n        return;\n    }\n           \n    // Center cell\n    vec4 e = cell(px);\n    col = e;\n    \n    // Neighbour cells\n    vec4 b = cell(px - ivec2(0,1));\n    vec4 t = cell(px + ivec2(0,1));\n    vec4 l = cell(px - ivec2(1,0));\n    vec4 r = cell(px + ivec2(1,0));   \n    vec4 bl = cell(px + ivec2(-1,-1));\n    vec4 br = cell(px + ivec2(1, -1));\n    vec4 tl = cell(px + ivec2(-1, 1));\n    vec4 tr = cell(px + ivec2(1,  1));   \n    \n    vec4 bb = cell(px - ivec2(0,2));\n    vec4 tt = cell(px + ivec2(0,2));\n    vec4 ll = cell(px - ivec2(2,0));\n    vec4 rr = cell(px + ivec2(2,0));  \n    \n    vec4 sum = b + t + l + r;\n    vec4 diag = bl + br + tl + tr;\n    vec4 dif = abs(b-t) * abs(l-r);\n    vec4 dif2 = (t + b) * (l + r);\n    vec4 diDif = (tl + br) * (tr + bl);\n    \n    if (frame < 10) {\n        col.g = 0.3 * diag.g + 0.2 * sum.g - e.g;\n    } else if (frame == 10) {\n        col.g = 1. - step(0.1, e.g);\n    } else if (frame == 11 && diag.g == 0.) {\n       if (b.g+t.g==2. && l.g+r.g==0. && bb.g+tt.g>=1.)  \n           col.g = 1.;\n       else if (l.g+r.g==2. && b.g+t.g==0. && ll.g+rr.g>=1.)  \n           col.g = 1.;         \n    } else if (frame <= 13) {\n       if (e.g == 1. && dif2.g == 1.)\n           col.g = 0.;\n    } else if (frame == 14) {\n       if (f.x > dim.x + 1. || f.y > dim.y)\n           col *= 0.;\n       else if (f.x < 0.5 * dim.x + 1. && abs(f.y - 0.5 * dim.y) < 4.) //could replace 4 with random val\n           col.r = 1.;\n    } else if (frame < 36) {\n        if (e.g == 1. && (sum+diag).r > 0.)\n            col.r = 1.;\n    } else if (frame < 36 + h) {\n        col = l;\n    } else if (frame == 36 + h) { // :)\n        float h2 = mod(floor(float(iFrame) / 120.), 2.) - 0.5;\n\n        float s = step(abs(f.x - 0.5 * dim.x - 2.5), 0.5);\n        s *= step(abs(f.y - 0.5 * dim.y - 1.5), 0.5);\n        float s2 = step(abs(f.x - 0.5 * dim.x), 2.);\n        s2 *= step(abs(f.y - 0.5 * dim.y + 2. + h2), 0.5);\n        float s3 = step(abs(f.x - 0.5 * dim.x - 2.5), 0.5);\n        s3 *= step(abs(f.y - 0.5 * dim.y + 2. - h2), 0.5);\n        \n        s += s2 + s3;\n        \n        s = clamp(s, 0., 1.);\n        col.r *= 1. - s;\n    }\n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define pi 3.14159\n#define dim vec2(64, 52)\n\nvec3 pal(in float t, in vec3 d) {\n    return 0.5 + 0.5 * cos(2. * pi * (0.5 * t + d));\n}\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}","name":"Common","description":"","type":"common"}]}