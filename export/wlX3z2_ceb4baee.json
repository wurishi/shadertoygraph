{"ver":"0.1","info":{"id":"wlX3z2","date":"1556906713","viewed":99,"name":"Wavefolder v0.02","username":"matkatmusic","description":"trying to remove gaps in the line when dragging the cursor to the top right corner and also get a consistent line width\n\nhttps://www.desmos.com/calculator/iawlekklgr","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["wavefolder"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//the window displays 2 periods of the sinewave\nfloat frequency = 1.0;\nfloat pi_times_2 = 3.141592653589793238 * 2.0;\nfloat amplitude = 4.0;\nfloat thickness = 0.01;\n\nfloat jmap (float sourceValue, float sourceRangeMin, float sourceRangeMax, float targetRangeMin, float targetRangeMax)\n{\n    return targetRangeMin + ((targetRangeMax - targetRangeMin) * (sourceValue - sourceRangeMin)) / (sourceRangeMax - sourceRangeMin);\n}\n\nfloat computeWaveFolder(float x, float b, float L)\n{\n    //g = 2 for these\n    float part1 = (b + 1.0) * x; //(b+1)(x)\n    float part2 = b * L * x*x*x; // bl(x^3)\n    float part3 = x*x*x*x*x; // x^(2g+1)\n    float denom = 1.0 + x*x*x*x; //1 + x^(2*g)\n    float q_x = (part1 - part2 + part3)/ denom;\n    return q_x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //static param:\n    //eventually an input param: \n    //map the clicked cursor's normalized y position to the 'b' parameter\n    float b = jmap(iMouse.y / iResolution.y, 0.0, 1.0, 0.0, 10.0);\n    //map the clicked cursor's normalized X position to the 'L' parameter\n    float L = iMouse.x / iResolution.x; // L does not need mapping from normalized to another range as it's already normalized\n    \n    //normalize the x position of this pixel being rendered\n    float x = fragCoord.x / iResolution.x;\n    \n    //compute the output of a sinewave at t = x\n    float sineY = amplitude * sin(x * frequency * pi_times_2);\n    \n    float q_x = computeWaveFolder(sineY, b, L);\n    \n    //compute the maximum negative value that can be generated from the wave folder\n    float negMax = computeWaveFolder(-amplitude, 10.0, 0.0);\n\tfloat posMax = computeWaveFolder(amplitude, 10.0, 0.0);\n    \n    q_x = jmap( q_x, negMax, posMax, 0.0, 1.0);\n    \n    //the normalized size of 2 vertical pixels\n    float epsilon = 2.0 / iResolution.y;\n    \n    vec3 c = vec3(0);\n    if( abs( q_x - fragCoord.y / iResolution.y) < epsilon )\n    {\n        c = vec3(0.3,0.85,1.0);\n    }\n    \n    //vec2 sfunc = vec2(p.x, p.y + sineY );\n    //vec2 sfunc = vec2(p.x, p.y + q_x);\n    \n    //sfunc.y /= thickness; // controls how thick the line is\n    \n    //vec3 c = vec3(abs(sfunc.y)); //this creates a vector where all 3 values are the y value of our sFunc\n    //vec3 c = vec3(abs(q_x - 1.0*p.y)/thickness);\n    //float d = abs( uv.y - q_x );\n    //d /= length(vec2(dFdx(d), dFdy(d)));\n    \n    //c = vec3(smoothstep(4.0, 3.0, c));\n    //c = pow(c, vec3(-1)); //this inverts the colors and adds 'glow'\n    //c *= vec3(0.3,0.85,1.0); //this makes it blue\n    //c += vec3(bg, bg*0.8, bg*0.4); //this adds glow at the left and right edge\n\n    fragColor = vec4(c,1.0);\n}","name":"Image","description":"","type":"image"}]}