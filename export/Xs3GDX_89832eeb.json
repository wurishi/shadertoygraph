{"ver":"0.1","info":{"id":"Xs3GDX","date":"1452361286","viewed":215,"name":"Night and Day","username":"stduhpf","description":"this is a cellular automaton where a blak cell between white cells behave the same as white cell between black cells\n\n\ni used the code from this shader : https://www.shadertoy.com/view/ldtGW2","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["2dcellularautomaton"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0,uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define RULE_S (n == 3 || n == 4 || n == 6 || n == 7 || n == 8)\n#define RULE_B (n == 3 || n == 6 || n == 7 || n == 8)\n\n#define USEMOUSE  // comment this to unable the drawing with mouse\n\t#define MOUSE_SIZE 16.0\n\n#define EPB  //comment this line for disable the generation of the first frame\n//#define RANDOM  // do not work if EPB defined. Full random first frame\n\nfloat getCell(vec2 uv)\n{\n    return texture(iChannel0, fract(uv / iResolution.xy)).x;\n}\n\nint getNeighbors(vec2 uv)\n{\n    float n = floor(getCell(uv + vec2( 1, 0)))\n            + floor(getCell(uv + vec2(-1, 0)))\n        \t+ floor(getCell(uv + vec2( 0, 1)))\n        \t+ floor(getCell(uv + vec2( 0,-1)))\n            + floor(getCell(uv + vec2( 1, 1)))\n        \t+ floor(getCell(uv + vec2(-1, 1)))\n        \t+ floor(getCell(uv + vec2( 1,-1)))\n            + floor(getCell(uv + vec2(-1,-1)));\n    \n    return int(n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord;\n    \n    float cell = getCell(uv);\n    \n    int n = getNeighbors(uv);\n    \n    if(!(cell == 1.0 && RULE_S))\n    {\n        if(cell == 0.0 && RULE_B)\n        {\n            cell = 1.0;\n        }\n        else\n        {\n            cell = max(0.0, cell - 1.0);\n        }\n    }\n    #ifdef USEMOUSE\n    if(distance(uv, iMouse.xy) < MOUSE_SIZE)\n    {\n        cell =1.-cell;\n    }\n    #endif\n    \n    fragColor = vec4(vec3(cell),1.0);\n    \n    #ifdef RANDOM\n\tif (iFrame == 0)\n\t\t{\n    \tfragColor = vec4(ivec4(2.*texture(iChannel1,fract(uv / iChannelResolution[1].xy)+vec2(iDate.a,iDate.b))));\n\t\t}\n\t#endif\n    \n    #ifdef EPB\n\tif ((iFrame == 0)&&(uv.x<(iResolution.x/2. + 200.*(texture(iChannel1,fract(uv / iChannelResolution[1].xy)+vec2(iDate.a,iDate.b)).r-.5))))\n\t\t{\n    \tfragColor = vec4(1);\n\t\t}\n\t#endif\n}\n","name":"Buf A","description":"","type":"buffer"}]}