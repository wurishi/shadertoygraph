{"ver":"0.1","info":{"id":"432GRh","date":"1708207977","viewed":360,"name":"GM Shaders: Box Blur Iteration","username":"Xor","description":"Here's a demonstration for my latest tutorial on blur shaders.\n    It's intended to show that when you iterate a box blur, you\n    get better and better approximations of Gaussian blurring.\n    \n    This code is just for demonstration and can be greatly i","likes":14,"published":1,"flags":32,"usePreview":0,"tags":["box","tut","gmshaders"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    \"GM Shaders: Box Blur Iteration\"\n\n    Here's a demonstration for my latest tutorial on blur shaders.\n    It's intended to show that when you iterate a box blur, you\n    get better and better approximations of Gaussian blurring.\n    \n    Tutorial:\n    https://mini.gmshaders.com/p/blur-philosophy\n    \n    This code is just for demonstration and can be greatly improved upon\n    by making use of texture interpolation, separable blurs,\n    increasing jump distance or downscaling. More details in the tutorial.\n\n    Common - contains the box blur function\n    Buffer A - Draws white box\n    Buffer B, C, D - each apply an additional box blur\n    Image - Combines results\n\n    Top-left is without the blur,\n    Top-right is the first blur pass,\n    Bottom-left and bottom-right are successive blur passes\n*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\nvec2 u = fragCoord/iResolution.xy*2.;\n    //Ranges from 0 to 2 for split demo\n    vec2 uv = fract(u);\n\n    //Sample all four blur levels\n    vec4 tex0 = texture(iChannel0, uv);\n    vec4 tex1 = texture(iChannel1, uv);\n    vec4 tex2 = texture(iChannel2, uv);\n    vec4 tex3 = texture(iChannel3, uv);\n    \n    //Split into quadrants\n    fragColor = u.x<1.0? (u.y>1.0?tex0:tex2) : (u.y>1.0?tex1:tex3);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\n    Render white box\n*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Resolution for scaling/centering\n    vec2 res = iResolution.xy;\n    //Sent position\n    vec2 p = fragCoord- res/2.0;\n    \n    //Box size scaled with resolution\n    float size = res.y/4.0;\n    vec2 box = clamp(p, -size, size);\n    \n    //Draw a white box on a black background\n    fragColor = p==box? vec4(1,1,1,1) : vec4(0,0,0,1);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"/*\n    Box blur pass 1\n*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Compute texel size from screen res\n    vec2 texel = 1.0/iResolution.xy;\n    //Convert frag coords to texture coordinates\n    vec2 uv = fragCoord * texel;\n    //Sample with box blur function (in Common)\n    fragColor = blur(iChannel0, uv, texel*JUMP, RANGE);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"/*\n    Box blur pass 2\n*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Compute texel size from screen res\n    vec2 texel = 1.0/iResolution.xy;\n    //Convert frag coords to texture coordinates\n    vec2 uv = fragCoord * texel;\n    //Sample with box blur function (in Common)\n    fragColor = blur(iChannel0, uv, texel*JUMP, RANGE);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"/*\n    Box blur pass 3\n*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Compute texel size from screen res\n    vec2 texel = 1.0/iResolution.xy;\n    //Convert frag coords to texture coordinates\n    vec2 uv = fragCoord * texel;\n    //Sample with box blur function (in Common)\n    fragColor = blur(iChannel0, uv, texel*JUMP, RANGE);\n}","name":"Buffer D","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"//Sample texel range in all directions\n#define RANGE 4\n//Jump scale for exaggerating demonstration\n#define JUMP 10.0\n\nvec4 blur(sampler2D tex, vec2 uv, vec2 texel, int range)\n{\n    //Texture color sum and weight sum for computing the average color\n    vec4 tex_sum = vec4(0);\n    float weight_sum = 0.0;\n\n    //Loop through desired texel \"range\"\n    for(int x = -range; x<=range; x++)\n    for(int y = -range; y<=range; y++)\n    {\n        //Sample texture at given texel and add to sums\n        //https://mini.gmshaders.com/p/gm-shaders-mini-texels-and-pixels-1308242\n        tex_sum += texture(tex, uv + vec2(x,y) * texel);\n        weight_sum += 1.0;\n    }\n    //Compute average\n    return tex_sum / weight_sum;\n}","name":"Common","description":"","type":"common"}]}