{"ver":"0.1","info":{"id":"wtKSDw","date":"1582895945","viewed":91,"name":"Color Grating","username":"iandol","description":"For Psychtoolbox procedural stimuli useful for psychophysical measurements of color perception, you can change between sin and square wave, while blending two colors against a base color. \n\nTry to change sigma from -1.0 to 0.0 and 0.2 to see its effect.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["psychtoolbox","psychophysics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//code for shadertoy.com\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    /////////////////////////////////////--VARIABLES\n    // In PTB variables will come from the MATLAB \n    // calling code via the vertex shader.\n    // See http://psychtoolbox.org/docs/ProceduralShadingAPI\n    //\n\t//\n\t//base color to blend from\n\tvec3 baseColor = vec3( 0.5, 0.5, 0.5 );\n\t//first color\n\tvec3 color1 = vec3( 1.0, 0.0, 0.0 );\n\t//second color\n\tvec3 color2 = vec3( 0.0, 1.0, 0.0 );\n\t//grating frequency\n\tfloat frequency = 0.08;\n    //grating phase, here varies using playback time\n\tfloat phase = -iTime*4.0;\n\t// sigma < 0.0  = sinewave grating \n\t// sigma == 0.0 = squarewave grating no smoothing\n\t// sigma > 0.0  = squarewave grating with smoothing in sigma pixels\n\tfloat sigma = -1.0;\n\t//contrast between 0 <-> 1\n\tfloat contrast = 1.0;\n    // the centre of the viewport\n    vec2 center = vec2(iResolution[0]/2.0, iResolution[1]/2.0);\n    // the radius of a circular aperture\n    float radius = iResolution[1]/2.05;\n\n    ////////////////////////////////////--CODE\n    // The actual drawing code...\n    //\n    \n\t// if a pixel is outside the radius, drop it\n    if ( radius > 0.0 ) {\n        float dist = distance( fragCoord.xy, center );\n        if ( dist > radius ) discard;\n    }\n    \n    //create our sinusoid in -1 to 1 range\n\tfloat sv = sin( fragCoord.x * frequency + phase );\n\n\t//if sigma >= 0, we want a squarewave grating, step or smoothstep does this depending on sigma value\n\tif ( sigma == 0.0 ) {\n\t\tsv = step( sigma, sv ); //converts into 0-1 range\n\t}\n\telse if ( sigma > 0.0 ) {\n\t\tsv = smoothstep( -sigma, sigma, sv ); //converts into 0-1 range\n\t}\n\telse {\n\t\tsv = (sv + 1.0) / 2.0; //simply get sv into 0 - 1 range (preserving sinusoid);\n\t}\n\n    // start to mix our colors\n\tvec3 colorA = color1.rgb;\n\tvec3 colorB = color2.rgb;\n\tif ( contrast < 1.0 ) { //blend our colours from base colour if contrast < 1\n\t\tcolorA = mix( baseColor, color1.rgb, contrast );\n\t\tcolorB = mix( baseColor, color2.rgb, contrast );\n\t}\n\n\t// and then mix our two colors using sv (our position in the grating)\n\tvec3 colorOut = mix( colorA, colorB, sv );\n    \n    // this normalises the color range to a generic 2.2 gamma\n    colorOut = pow( colorOut, vec3( 1./2.2 ) );\n\t\n\t// off to the display, byebye little pixel!\n\tfragColor = vec4( colorOut, 1.0 ); \n}","name":"Image","description":"","type":"image"}]}