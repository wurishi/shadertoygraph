{"ver":"0.1","info":{"id":"4dXyRf","date":"1489582146","viewed":92,"name":"GRAPROG Creature","username":"lyradss","description":"Creature that moves-like-jagger","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tags"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n\nvec3 colorB1 = vec3(0.000, 0.000, 0.400);\nvec3 colorR1 = vec3(0.820, 0.031, 0.114);\nvec3 colorO = vec3(1.000,0.549,0.000);\nvec3 colorY = vec3(1.000,1.000,0.000);\nvec3 colorB = vec3(0.000,0.000,1.000);\nvec3 colorLB = vec3(0.000,0.749,1.000);\nvec3 colorG = vec3(0.000, 1.000, 0.000);\nvec3 colorR = vec3(1.000, 0.000, 0.000);\nvec3 colorS = vec3(0.647, 0.949, 0.952);\nvec3 colorW = vec3(1.000, 1.000, 1.000);\nvec3 colorP = vec3(1.000, 0.078, 0.576);\nvec3 colorA = vec3(0.831, 0.404, 0.098);\n\n\nfloat rand(vec2 uv)\n{\n    //return fract(sin(dot(uv, vec2(12.9898,78.233)))*10000.*iTime);\n\t//return fract(sin(dot(uv, iMouse.xy))*10000.);\n\t//return (fract(sin(dot(uv, vec2(12., 70.)))*100000.));\n    return (fract(sin(dot(uv, vec2(12., 70.)))*43758.5453123));\n}\n\n// Value noise\nfloat noise(in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = rand(i);\n    float b = rand(i + vec2(1.0, 0.0));\n    float c = rand(i + vec2(0.0, 1.0));\n    float d = rand(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners porcentages\n    return mix(a, b, u.x) + \n            (c - a)* u.y * (1.0 - u.x) + \n            (d - b) * u.x * u.y;\n}\n\n// Gradient noise\nvec2 hash( vec2 x )  // replace this by something better\n{\n    const vec2 k = vec2( 0.3183099, 0.3678794 );\n    x = x*k + k.yx;\n    return -1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) );\n}\n\nfloat gnoise( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( hash( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), \n                     dot( hash( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( hash( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), \n                     dot( hash( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\n// Simplex noise\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\nfloat snoise(vec2 v) {\n    const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,  // -1.0 + 2.0 * C.x\n                        0.024390243902439); // 1.0 / 41.0\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n    vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    i = mod289(i); // Avoid truncation effects in permutation\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n        + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n\nfloat createPolygon(vec2 uv, int sides)\n{\n\n    float a = atan(uv.x,uv.y) + PI;\n\tfloat r = TWO_PI / float(sides);\n  \n\t// Shaping function that modulate the distance\n\tfloat dist = cos(floor(.5+a/r)*r-a)*length(uv);\n    float offset = gnoise(uv*.2+iTime)*.2;\n    //float value = 1.-step(radius, dist);\n    float value = 1. - smoothstep(.4, .42, dist * 3.95); \n    \n    return value;\n}\n\nfloat createPolygon2(vec2 uv, int sides)\n{\n\n    float a = atan(uv.x,uv.y) + PI;\n\tfloat r = TWO_PI / float(sides);\n  \n\t// Shaping function that modulate the distance\n\tfloat dist = cos(floor(.5+a/r)*r-a)*length(uv/2.5);\n    float offset = gnoise(uv*.2+iTime)*.2;\n    //float value = 1.-step(radius, dist);\n    float value = 1. - smoothstep(.4, .42, dist * 3.95); \n    \n    return value;\n}\n\n\nmat2 rotate2d(float angle)\n{\n    return mat2(cos(angle), -sin(angle), sin(angle), cos(angle)); \n}\t\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    float ratio = iResolution.x/iResolution.y;\n    \n    \n    float zoom = .2;\n    float scale = .1;\n    float offset = gnoise(uv*zoom+iTime)*scale;\n    float offset2 = gnoise(uv*zoom+iTime)*.05;\n    float offset3 = snoise(uv*zoom+iTime)*.1;\n\t\n    \n    vec3 color = vec3(0.0);\n\n    //float zoom = 4. * 3.;\n    //float scale = .04  * 9.;\n    //float offset = snoise(uv*zoom+iTime)*scale;\n\t\n    //float value = step(.5 + offset , uv.x) - step (.52+offset, uv.x);\n    //value /= rand(uv*iTime);\n    \n    float value = step(.2 + offset3, uv.y) - step(.65 + offset3, uv.y);\n    value *= step(.4 + offset, uv.x) - step(.7 + offset, uv.x);\n    value += step(.301 + offset, uv.x) - step(.4 + offset, uv.x);\n    value += step(.6 + offset, uv.x) - step(.701 + offset, uv.x);\n    value -= step(.91 + offset3, uv.y);\n    value *= step(.35 + offset , uv.y);\n    \n    color = value * colorG;\n    \n    //triangle\n    vec2 shapePos = vec2(0.503, 0.3);\n    //uv.x *= ratio; \n    uv -= shapePos;\n    uv *= rotate2d(1.045);\n    value += createPolygon(uv - offset, 3);\n    \n    \n    color += value * colorB;\n    \n    //Body\n    shapePos -= vec2(0.45, 0.33);\n    uv -= shapePos;\n    uv *= rotate2d(2.1);\n    \n    value += createPolygon2(uv + offset2, 4);\n    \n    color += value * colorB1;\n    \n    \n    \n    \n    //value = step(.45 * mouse.y + r, uv.x) - step (.60 * mouse.y + r, uv.x);\n    \n\n    //color = value * colorR;\n    //color = value * colorY;\n    //color = value * mix(colorY, colorB, abs(sin(iTime * 600000.)));\n    //color += value * mixcolorR, colorO, abs(sin(iTime * 600000.)));\n  \n  \n    //uv - fract(uv);\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}