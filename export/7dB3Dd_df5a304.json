{"ver":"0.1","info":{"id":"7dB3Dd","date":"1618111888","viewed":305,"name":"LUT original","username":"badjano","description":"LUT original ( render it at 4096x4096 )","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["lut","original"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#define EIGHT_BIT\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n\n    // LUT\n    float tile = 16.;\n    float tile2 = pow(tile,2.);\n    uv.y = 1.-uv.y;\n#ifdef EIGHT_BIT\n    uv = floor(uv*tile2)/tile2;\n#endif\n    float b = (floor(uv.x*tile)+floor(uv.y*tile)*tile)/tile2;\n    vec2 rg = fract(uv*tile);\n    vec3 col = vec3(rg,b);\n    \n    float l1 = sdSegment(uv-1., vec2(.6,-.8), vec2(0.2,-0.2));\n    float l2 = sdSegment(uv-1., vec2(.6,-.2), vec2(0.2,-0.8));\n    float t = pow(smoothstep(-1.,1.,sin(iTime*5.)),2.);\n    float l3 = smin(l1,l2,0.05);\n    vec3 empty = vec3(pow(smoothstep(0.05+t*0.01,0.,l3),.1),0,0);\n    \n    col = mix(empty,col,length(step(max(uv.x,uv.y),1.)));\n    //col = empty;\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}