{"ver":"0.1","info":{"id":"ftd3zH","date":"1635972705","viewed":389,"name":"Rainbow Storm","username":"R3N","description":"Color hue of fractal noise with chromatic aberration to separate the colors at the edges.","likes":8,"published":3,"flags":0,"usePreview":0,"tags":["noise","color","rainbow","acid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.14159\n#define rot(t) mat2(cos(t), -sin(t), sin(t), cos(t))\n\n// color hue based on IQ's palettes\nvec3 col(float t) {\n    return 0.5+0.5*cos(2.0*pi*(t+vec3(0, 0.33, 0.67)));\n}\n\n// random number between 0 and 1\nfloat rand(vec2 p) {\n\treturn fract(sin(dot(p, vec2(12.543,514.123)))*4732.12);\n}\n\n// value noise\nfloat noise(vec2 p) {\n\tvec2 f = smoothstep(0.0, 1.0, fract(p));\n\tvec2 i = floor(p);\n\tfloat a = rand(i);\n\tfloat b = rand(i+vec2(1.0,0.0));\n\tfloat c = rand(i+vec2(0.0,1.0));\n\tfloat d = rand(i+vec2(1.0,1.0));\n\treturn mix(mix(a, b, f.x), mix(c, d, f.x), f.y);\n\t\n}\n\n// fractal noise\nfloat fbm(vec2 p) {\n    float a = 0.5;\n    float r = 0.0;\n    for (int i = 0; i < 8; i++) {\n        r += a*noise(p);\n        a *= 0.5;\n        p *= 2.0;\n    }\n    return r;\n}\n\n// main effect\nvec4 eff(vec2 uv) {\n\tuv *= 10.0;\n\tuv *= rot(length(0.1*uv)*1.25);\n\tuv.y -= iTime*0.75;\n\treturn vec4(col(3.0*fbm(uv/4.0+iTime*0.1+fbm(2.5*uv-iTime*0.1+fbm(uv/10.0)))), 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.y;\n    uv -= iResolution.xy/iResolution.y/2.0;\n    vec4 col = eff(uv);\n    float aberration = 1.015 + 0.2*smoothstep(-1.0, 1.0, sin(0.25*iTime));\n    col.r = eff(uv/aberration).r;\n    col.b = eff(uv*aberration).b;\n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}