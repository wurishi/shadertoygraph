{"ver":"0.1","info":{"id":"3sfBWf","date":"1589149702","viewed":270,"name":"ShATI - Musical","username":"Flopine","description":"My former school named ATI decided to launch an everyday challenge from 4th may to 24th may, here is the 7th subject: musical :)\nAlso made during a twitch session you can re-watch here:  https://www.twitch.tv/flopine","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","zelda","toonshading","twitch","ocarina"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan and slerpy for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n// Shader made for Everyday ATI challenge\n\n#define PI 3.141592\n#define TAU 6.2831853071\n#define time iTime\n#define dt mod(iTime,TAU)\n#define trir vec2(1.,0.7)\n\nmat2 rot (float a)\n{return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nfloat smin (float a, float b, float k)\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat caps (vec3 p, vec3 a, vec3 b, float r)\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\nfloat cyl (vec3 p, float r, float h)\n{return max(length(p.xy)-r,abs(p.z)-h);}\n\nfloat fradius;\nfloat ocarina (vec3 p)\n{\n    vec3 pp = p;\n    float bradius = sin((-p.x+1.)*1.4)*0.3+0.08;\n    float body = caps(p,vec3(-1.,0.,0.),vec3(1.,0.,0.), bradius);\n\n    p.xy += vec2(0.45,-.6);\n    fradius = sin((-p.y+0.4)*2.)*0.16; \n    float flute = caps(p,vec3(0.,-0.2,0.),vec3(0.,0.25,0.), fradius);\n\n    p = pp;\n    float c1 = cyl(p+vec3(0.64,-0.15,0.3), 0.08, .3);\n    float c2 = cyl(p+vec3(0.8,0., 0.3), 0.08, .3);\n    float c3 = cyl(p+vec3(0.64,0.15, 0.3), 0.08, .3);\n    float c4 = cyl(p+vec3(0.45,0., 0.3), 0.08, .3);\n    float c5 = cyl(p+vec3(-0.1,-0.25, 0.3), 0.08, .3);\n    float c6 = cyl(p+vec3(-0.3,-0.1, 0.3), 0.08, .3);\n    float c7 = cyl(p+vec3(-0.5,-0.18, 0.3), 0.08, .3);\n    float cs = min(c7,min(min(c6,c5),min(min(c1,c3),min(c2,c4))));\n\n    return max(-cs,abs(smin(body,flute,0.1))-0.005);\n}\n\nfloat ring (vec3 p)\n{\n    p.xy += vec2(0.44,-.48);\n    p.xy *= rot(0.1);\n    return cyl(p.xzy,0.04+fradius,0.1);\n}\n\nint mat_id;\nfloat SDF (vec3 p)\n{\n    p.yz *= rot(sin(dt)*0.15);\n    p.xz *= rot(cos(dt)*0.1);\n    p.y -= 0.45+sin(dt)*0.1;\n    p.xy *= rot(PI/5.);\n    float ri = ring(p);\n    float oc = ocarina(p);\n    float d = min(ri,oc);\n    if (d == ri) mat_id = 1;\n    if (d == oc) mat_id = 2;\n    return d;\n}\n\nvec3 getnorm (vec3 p)\n{\n    vec2 eps = vec2(0.01,0.);\n    return normalize(SDF(p)-vec3(SDF(p-eps.xyy),SDF(p-eps.yxy),SDF(p-eps.yyx)));\n}\n\nfloat spec (vec3 rd, vec3 n, vec3 l)\n{\n    vec3 h = normalize(l-rd);\n    return pow(max(dot(n,h), 0.), 20.);\n}\n\n// courtesy of Alkama\nfloat pales (vec2 uv, float speed, float number)\n{\n    uv *= rot(-time*speed);\n    return floor(smoothstep(0.1, 0.2,cos(atan(uv.y, uv.x)*number)));\n}\n\nvec3 ynotes (vec2 uv, float size, int note)\n{\n    uv *= size;\n    float r = 0.2;\n    float s = 0.08;\n    float triUp = smoothstep(s,s*1.1,max(-uv.y, dot(vec2(abs(uv.x),uv.y), normalize(trir))));\n    float triRight = smoothstep(s,s*1.1,max(-uv.x, dot(vec2(uv.x,abs(uv.y)), normalize(trir.yx))));\n    float triLeft = smoothstep(s,s*1.1,max(uv.x, dot(vec2(-uv.x,abs(uv.y)), normalize(trir.yx))));\n    float direction;\n    if (note == 1) direction = triUp;\n    if (note == 2) direction = triRight;\n    if (note == 3) direction = triLeft;\n    float mask = (1.-smoothstep(r,r*1.1, length(uv)))*direction;\n\n    return vec3(0.9,0.8,0.)*mask;\n}\n\nvec3 bnotes (vec2 uv, float size)\n{\n    uv *= size;\n    float mask = 1.-smoothstep(0.2,0.2*1.1, length(uv));\n    return vec3(0.1,0.4,0.95) * mask;\n}\n\nvec3 background (vec2 uv)\n{\n    vec2 uu = uv;\n    vec3 back = mix(vec3(0.3,0.25, 0.1),\n                    vec3(0.9,0.9,0.45),\n                    pales(uv+vec2(0.,-0.2), 0.3, 5.)*0.5+pales(uv+vec2(0.,-0.2),-0.5, 10.)*0.7\n                   );\n    uv.y += 0.25;\n    back *= smoothstep(0.2,0.21,max(abs(uv.x*.45),abs(uv.y*1.4)));\n    uv.x -= 0.15;\n    back += bnotes(uv+vec2(0.5,0.07), 5.);\n    back += ynotes(uv+vec2(0.4,-0.07), 5., 1);\n    back += ynotes(uv+vec2(0.25,-0.02), 5., 3);\n    back += ynotes(uv+vec2(0.1,0.03), 5., 2);\n    back += ynotes(uv+vec2(-0.05,-0.02), 5., 3);\n    back += ynotes(uv+vec2(-0.2,0.03), 5., 2);\n\n    return clamp(back,0.,1.);\n}\n\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = vec2(fragCoord.x /iResolution.x, fragCoord.y / iResolution.y);\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n\n    vec3 ro = vec3(0.0,-0.3,-3.),\n        rd = normalize(vec3(uv,1.)),\n        p = ro,\n        l = normalize(vec3(1.,2., -2.)),\n        specl = normalize(vec3(-1.5,5.,-5.)),\n        col = background(uv);\n\n    float shad,d=0.; \n    bool hit = false;\n\n    for (float i=0.; i<64.; i++)\n    {\n        d = SDF(p);\n        if (d<0.01)\n        {\n            hit = true;\n            shad = i/64.;\n            break;\n        }\n        p += d*rd*0.6;\n    }\n\n    if (hit)\n    {\n        vec3 n = getnorm(p);\n        float lighting = floor(max(dot(n,l),0.)*3.)/3.;\n        if (mat_id == 2) \n        {\n            col = mix(vec3(0.,0.05,0.2),vec3(0.5,0.8,1.),lighting);\n        }\n        if (mat_id == 1)\n        {\n            col = vec3(lighting+0.15);\n        }\n        col += smoothstep(0.4,0.5,spec(rd, n, specl));\n    }\n    fragColor = vec4(sqrt(clamp(col,0.,1.)), 1.);\n}","name":"Image","description":"","type":"image"}]}