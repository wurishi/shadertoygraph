{"ver":"0.1","info":{"id":"mlffzl","date":"1693329774","viewed":59,"name":"toon wrap","username":"DaCross","description":"experiment with simplex noise","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise","blend","wrap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//\n// Simplex 2D noise\n// from https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\n//\nvec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\nfloat snoise(vec2 v){\n  const vec4 C = vec4(0.211324865405187, 0.366025403784439,\n           -0.577350269189626, 0.024390243902439);\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod(i, 289.0);\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n  + i.x + vec3(0.0, i1.x, 1.0 ));\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n    dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n//\n// Inspired by https://iquilezles.org/articles/warp/\n//\nfloat ssn(in vec2 p, in float t){\n  float s = 0.;\n  s = snoise(p + snoise(p + snoise(p+t)));\n  return s;\n}\n\nfloat pattern(in vec2 p, in float t){\n    float f = ssn(p*1., t);\n    float f2 = ssn(p*0.98, t);\n    return 1. + ceil(f+f2);\n}\n\n//\n//Photoshop blending mode by Jamie Owen\n//https://github.com/jamieowen/glsl-blend\n//\nfloat blendLighten(float base, float blend) {\n\treturn max(blend,base);\n}\nfloat blendDarken(float base, float blend) {\n\treturn min(blend,base);\n}\nfloat blendPinLight(float base, float blend) {\n\treturn (blend<0.5)?blendDarken(base,(2.0*blend)):blendLighten(base,(2.0*(blend-0.5)));\n}\nvec3 blendPinLight(vec3 base, vec3 blend) {\n\treturn vec3(blendPinLight(base.r,blend.r),blendPinLight(base.g,blend.g),blendPinLight(base.b,blend.b));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv *=2.;\n    \n    float delay = 2.*length(uv - vec2(1.)) - (iTime*0.2);   \n    float f = pattern(uv,delay);\n    \n    // Time varying pixel color\n    vec3 col = vec3(0.9,0.2,0.3);\n    col *= f;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    if(fragColor.r < 0.05) fragColor.rgb = vec3(0.878,0.102,0.31);\n    vec3 bcol = vec3(0.106,0.286,0.396);\n    fragColor.rgb = blendPinLight(fragColor.rgb, bcol);  \n}","name":"Image","description":"","type":"image"}]}