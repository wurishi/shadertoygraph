{"ver":"0.1","info":{"id":"7tlcD7","date":"1648142496","viewed":40,"name":"tp3 lif graphique","username":"arissad","description":"tp3","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["texturing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Texturing\n// Eric Galin\n\nconst int Steps = 200;      // Number of steps\nconst float Epsilon = 0.01; // Marching epsilon\n\n// Structure for objects\n// v : Field value\n// i : Texture index\nstruct V {\n    float v; \n    int i;\n};\n\n// Structure for texture\n// ma : couleur ambiante\n// md : couleur diffus\n// ms : couleur spéculaire\n// a : coefficient de pondération ambiant\n// d : coefficient de pondération diffus\n// s : coefficient de pondération spéculaire\n// sigma \nstruct T\n{\n    vec3 ma;\n    vec3 md;\n    vec3 ms;\n    float a;\n    float d;\n    float s;\n    float sigma;\n    };\n\n// Primitive functions -----------------------------------------------------------------------------------\n\n// Sphere \n// p : point\n// c : center \n// r : radius\nV Sphere(vec3 p, vec3 c,float r,int index)\n{\n  return V(length(p-c)-r,index);\n}\n\n// Cube \n// p : point\n// c : center \n// r : radius\nV Cube(vec3 p,vec3 c,float r,int index)\n{\n   vec3 q = abs(p-c) - vec3(r);\n  return V(length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0),index);\n}\n\n\n// Plane \n// p : point\n// n : Normal of plane\n// o : Point on plane\nV Plane(vec3 p, vec3 n, vec3 o,int index)\n{\n    return V(turbulence(p,7.0,5.0,1)+dot((p-o),n),index);\n}\n\n// Union\n// a : field function of left sub-tree\n// b : field function of right sub-tree\nV Union(V a,V b)\n{\n    if (a.v<b.v)\n        return V(a.v,a.i);\n    else \n    {\n        return V(b.v,b.i);\n    }\n}\n\n// Intersection, preserve the index of first object\n// a, b : field function of left and right sub-trees\nV Intersection(V a,V b)\n{\n    if (a.v>b.v)\n    {\n        return V(a.v,a.i);\n    }\n    else \n    {\n        return V(b.v,a.i);\n    }\n}\n\n// Dice \n// p : point\n// c : center \n// r : radius\nV Dice(vec3 p,vec3 c,float r,int index)\n{\n  return Intersection(Cube(p,c,r*0.75,index),Sphere(p,c,r,index));\n}\n\n// Damier\n// p : point\n// a : point \n// b : point\n\nint Ex(float x){\n    if(x>0.0) {\n    return int(x);\n    }\n    else return int(x) - 1;\n}\n\nint Ey(float y){\n    if(y>0.0) {\n    return int(y);\n    }\n    else return int(y) - 1;\n}\nint Ez(float z){\n    if(z>0.0) {\n    return int(z);\n    }\n    else return int(z) - 1;\n}\n\nT Damier(vec3 p, vec3 a, vec3 b) {\n    int x = Ex(p.x);\n    int y = Ey(p.y);\n    int z = Ez(p.z);\n    if((x+y+z)%2 == 0) {\n        return T(a,vec3(0.80,0.50,0.20),vec3(0.80,0.60,0.30),0.5,0.9,0.9,44.0);\n    }else return T(b,vec3(0.80,0.50,0.20),vec3(0.80,0.60,0.30),0.5,0.9,0.9,44.0);\n}\n\n// Bois\n// p : point\n// e : Nombre de cercles\nvec3 bois (vec3 p, float e)\n{\n    float d = length(p.xy); //distance par rapport à l'axe z\n    float u = d/e;\n    float n = Noise(p);\n    float s = 0.5*(cos(u/0.1))+(1.1); // crée les cercles\n    return mix(vec3(0.88,0.41,0.0),vec3(0.70,0.33,0.0),s); // dégradé de couleurs avec les cercles\n}\n// Marbre\n// p : point\nvec3 marbreVeine (vec3 p)\n{\n    p = p+N3D(p); // Applique un Noise3D à p\n    vec3 m = mix(vec3(0.99,0.99,0.99),vec3(0.8078,0.8078,0.8078),Noise(p)); // dégradé de couleurs avec un noise(p)\n    float l = Ligne(p) ; // initialise les lignes \n    l = min(l, Ligne(p.zxy)); // Union entre l et la distance signée entre un point et les composantes zxy\n    return mix(vec3(0.7,0.7,0.7), m , l); // dégradé entre une couleur, m et l\n}\n// Marbre\n// p : point\n// marbreSansVeine est presque la même que marbreVeine sauf qu'on trace pas les lignes\nvec3 marbreSansVeine (vec3 p)\n{\n    p = p+N3D(p);\n    vec3 m = mix(vec3(0.99,0.99,0.99),vec3(0.8078,0.8078,0.8078),Noise(p));\n    return m;\n}\n\n\n// Potential field of the object\n// p : point\nV object(vec3 p)\n{\n  V u = Plane(p,normalize(vec3(0.0,0.0,1.0)),vec3(0.0,0.0,-4.0),0);\n  \n  u=Union(u,Dice(p,vec3( 0.0, 0.0, 2.0),4.0,1));\n  u=Union(u,Dice(p,vec3( -10.0, 0.0, 2.0),4.0,2));\n  u=Union(u,Dice(p,vec3( 10.0, 0.0, 2.0),4.0,3));\n \n  return u;\n}\n\n// Analysis of the scalar field --------------------------------------------------------------------------\n\n// Calculate object normal\n// p : point\nvec3 ObjectNormal(in vec3 p )\n{\n  float eps = 0.001;\n  vec3 n;\n  V vp = object(p);\n    float v = vp.v;\n  n.x = object( vec3(p.x+eps, p.y, p.z) ).v - v;\n  n.y = object( vec3(p.x, p.y+eps, p.z) ).v - v;\n  n.z = object( vec3(p.x, p.y, p.z+eps) ).v - v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance \n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o, vec3 u, float e,out bool h,out int s)\n{\n  h = false;\n\n    // Start at the origin\n    float t=0.0;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = object(p).v;\n    // Hit object\n      if (v < 0.0)\n      {\n          s=i;\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += max(Epsilon,v);\n      // Escape marched too far away\n      if (t>e)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n// Background color\n// d : Ray direction\n// changer couleur arrière plan\nvec3 background(vec3 d)\n{\n  return mix(vec3(0.65,0.75,0.995),vec3(0.652,0.697,0.995), d.z*0.5+0.5);\n}\n\n\n// Direct lighting\nfloat Light(vec3 p,vec3 n)\n{\n   // point light\n  const vec3 lp = vec3(5.0, 10.0, 25.0);\n\n  vec3 l = normalize(lp - p);\n\n  // Phong shading\n  float diff = clamp(dot(n, l),0.0,1.0);\n\n    bool h;\n    int s;\n    float t=SphereTrace(p+0.1*n,l,100.0,h,s);\nif (!h)\n    {\n     return diff;\n    }\n    return 0.0; \n}\n\n\n// Shading and lighting ---------------------------------------------------------------------------\n// Couleur plan\nT Texture0(in vec3 p)\n{\n  return T(marbreSansVeine(p),vec3(0.5,0.5,0.7),vec3(0.80,0.60,0.30),0.5,0.5,0.5,2.0);\n}\n// Couleur objet 1\nT Texture1(in vec3 p)\n{\n  return T(bois(p,0.8),vec3(0.5,0.5,0.7),vec3(0.5,0.5,0.5),0.3,0.3,0.3,8.0);\n}\n// Couleur objet 2\nT Texture2(in vec3 p)\n{\n  return Damier(p,vec3(0,0,0),vec3(1,1,1)); \n}\n// Couleur objet 3\nT Texture3(in vec3 p)\n{\n  return T(marbreVeine(p),vec3(0.2,0.2,0.4),vec3(0.20,0.2,0.4),0.75,0.9,0.9,10.0);   \n}\n\n// Compute texture \n// p : Point\n// n : Normal\nT Color(in vec3 p,in vec3 n)\n{\n    V vp= object(p);\n    if (vp.i==0){\n        \n        return Texture0(p);\n    }\n    else if (vp.i==1)\n    {\n        return Texture1(p);\n    }\n    else if (vp.i==2)\n    {\n        return Texture2(p);\n    }\n    else if (vp.i==3)\n    {\n        return Texture3(p);\n    }\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n    bool h;\n    int s;\n    float t = SphereTrace(p,l,100.0,h,s);\n    if (!h)\n    {\n     return 1.0;\n    }\n    return 0.0; \n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p, vec3 n, vec3 e)\n{\n       // Point light\n    const vec3 lp = vec3(5.0, 10.0, 25.0);\n   \n    // Light direction to point light\n    vec3 l = normalize(lp - p);\n\n    T tex=Color(p,n);\n\n    // Ambient color\n    vec3 ambient = tex.a*tex.ma;\n       \n    // Shadow computation\n    float s = Shadow(p+0.01*n,n,l);\n\n// Phong diffuse\n    vec3 diffuse = tex.d * clamp(dot(n, l),0.0,1.0) * tex.md;\n\n    // Specular\n    vec3 r = reflect(e,n);\n    vec3 specular = tex.ms * pow(clamp(dot(r,l),0.0,tex.s),tex.sigma) * vec3(1.0,1.0,1.0);\n    vec3 c = ambient + s * (diffuse + specular);\n    return c;\n}\n\n// Picture in picture ------------------------------------------------------------------------------\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n   float t=float(n)/(float(Steps-1));\n   return 0.5+mix(vec3(0.05,0.05,0.5),vec3(0.65,0.39,0.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel, out bool pip)\n{\n    // Pixel coordinates\n    vec2 p = (-iResolution.xy + 2.0*pixel)/iResolution.y;\n   if (pip==true)\n   {    \n    const float fraction=1.0/4.0;\n    // Recompute pixel coordinates in sub-picture\n    if ((pixel.x<iResolution.x*fraction) && (pixel.y<iResolution.y*fraction))\n    {\n        p=(-iResolution.xy*fraction + 2.0*pixel)/(iResolution.y*fraction);\n        pip=true;\n    }\n       else\n       {\n           pip=false;\n       }\n   }\n   return p;\n}\n\n\n// Image\nvoid mainImage( out vec4 color, in vec2 pxy )\n{\n    // Picture in picture on\n    bool pip=true;\n    \n   // Pixel\n     vec2 pixel=Pip(pxy, pip);\n    \n    // Mouse\n    vec2 m=iMouse.xy/iResolution.xy;\n\n    // Camera\n    vec3 ro,rd;\n    Ray(m,pixel,ro,rd);\n\n  // Trace ray\n\n  // Hit and number of steps\n  bool hit;\n  int s;\n\n  float t = SphereTrace(ro, rd, 100.0,hit, s);\n  \n    // Position \n    vec3 pt = ro + t * rd;\n    \n  // Shade background\n  vec3 rgb = background(rd);\n\n  if (hit)\n  {\n    // Compute normal\n    vec3 n = ObjectNormal(pt);\n\n    // Shade object with light\n    rgb = Shade(pt, n, rd);\n  }\n\n  // Uncomment this line to shade image with false colors representing the number of steps\n  if (pip==true)\n  {\n      rgb = ShadeSteps(s); \n  }\n\n\n  color=vec4(rgb, 1.0);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Texturing and noise \n\n// Hashing function\n// Returns a random number in [-1,1]\n// p : Vector in space\nfloat Hash(in vec3 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\n\n// Procedural value noise with cubic interpolation\n// x : Point \nfloat Noise(in vec3 p)\n{\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n  \n    f = f*f*(3.0-2.0*f);\n    // Could use quintic interpolation instead of cubic\n    // f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix(mix( Hash(i+vec3(0,0,0)), \n                        Hash(i+vec3(1,0,0)),f.x),\n                   mix( Hash(i+vec3(0,1,0)), \n                        Hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( Hash(i+vec3(0,0,1)), \n                        Hash(i+vec3(1,0,1)),f.x),\n                   mix( Hash(i+vec3(0,1,1)), \n                        Hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\n// Compute the distance to the Voronoi boundary\n// x : Point\n// Return (closest distance, second closest, cell id)\n\n\n// Bruit 3D\n// p : point\n\nvec3 N3D(vec3 p) {\n    return vec3(Noise(p+vec3(14,51,10)),Noise(p+vec3(14,51,10)),Noise(p+vec3(14,51,10)));\n}\n\nfloat Ligne(in vec3 p)\n{\n    vec3 q = p/4.0+N3D(p/0.9); //Ajoute du noise à p\n    float z = mod(q.z,2.0); // Calcule le modulo de la composante z de q avec 2\n    return smoothstep(z,0.0,0.02); // permet de lisser la ligne créee pour qu'elle soit \n}\n\nfloat turbulence(vec3 p, float l, float a, int o){\n// l permet de modifier le nombre de bosses\n// a permet de modifier la hauteur des bosses \n// o permet de modifier le nombre d'octaves\n    float t = 0.0;\n    for(int i=0; i<o; i++){\n        t += a*Noise(p/l);\n        a *= 0.5;\n        l *= 0.5;\n    }\n    return t;\n    \n}\n\nvec3 Voronoi( in vec3 x )\n{\n    vec3 p = floor( x );\n    vec3 f = fract( x );\n\n\tfloat id = 0.0;\n    vec2 res = vec2( 100.0 );\n    for( int k=-1; k<=1; k++ )\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec3 b = vec3( float(i), float(j), float(k) );\n        vec3 r = vec3( b ) - f + Hash( p + b );\n        float d = dot( r, r );\n\n        if( d < res.x )\n        {\n\t\t\tid = dot( p+b, vec3(1.0,57.0,113.0 ) );\n            res = vec2( d, res.x );\t\t\t\n        }\n        else if( d < res.y )\n        {\n            res.y = d;\n        }\n    }\n\n    return vec3( sqrt( res ), abs(id) );\n}\n\n// Camera -----------------------------------------------------------------------\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n    float sa = sin(a); float ca = cos(a); \n    return mat3(ca,sa,0.0,    -sa,ca,0.0,  0.0,0.0,1.0);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(in vec2 m, in vec2 p,out vec3 ro,out vec3 rd)\n{\n    float a = 3.0*3.14*m.x;\n   \tfloat le = 3.8;\n    \n    ro=vec3(35.0,0.0,15.0);\n    ro*=Rz(3.0*3.14*m.x); \n\n    vec3 ta = vec3(0.0,0.0,0.0);\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,0.0,1.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\trd = normalize( p.x*uu + p.y*vv + le*ww );\n}\n\n","name":"Common","description":"","type":"common"}]}