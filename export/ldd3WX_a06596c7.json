{"ver":"0.1","info":{"id":"ldd3WX","date":"1452559722","viewed":148,"name":"quick fractals","username":"hypothete","description":"Learning to draw recursively in glsl","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["julia","mouse","mandelbrot","fractals"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"#define PI 3.14159\nconst int iter = 50;\nconst vec2 scale = vec2(2., 1.333);\nconst vec2 offset = vec2(0, 0);\n\nvec2 lissajous(){\n    float a = 0.5;\n    float b = 0.6;\n    float speed = 0.2;\n    return vec2(cos(iTime*speed), cos(speed*(iTime*a + b)));\n}\n\nvec4 palette(float index){\n  return vec4(\n      0.5+0.5*sin(index*PI/0.5),\n      0.5+0.5*sin((index*iTime)*PI/0.5),\n      0.5+0.5*sin((index* 14.2)*PI/0.5),\n      1.\n  );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2. * fragCoord.xy / iResolution.xy - 1.;\n    vec2 z = vec2(0);\n    vec2 c;\n    vec2 sc = scale;\n    if(iMouse.z>0.){\n        c = 2. * iMouse.xy / iResolution.xy - 1.;\n        sc *= length(c);\n    }\n    else{\n        c = lissajous();\n    }\n\tint j = 0; //dummy for accessing i outside of loop\n    \n    z = (uv + offset) * sc;\n\n    for(int i=0; i<iter; i++){\n        vec2 xy = vec2(\n            z.x * z.x - z.y * z.y,\n            z.y * z.x + z.x * z.y);\n        if(dot(xy,xy) > float(iter)) break;\n        z = xy + c;\n        j = i; //need to share i outside the for loop\n    }\n    \n\tfloat val = float(j) / float(iter);\n    fragColor = palette(val);\n    fragColor.xyz *= 1. - length(z*uv*c);\n    \n}","name":"","description":"","type":"image"}]}