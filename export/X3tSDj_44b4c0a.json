{"ver":"0.1","info":{"id":"X3tSDj","date":"1719591675","viewed":54,"name":"Oscilloscope shader","username":"DingoDoggins","description":"based on https://iquilezles.org/articles/distance/","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["oscilloscopeshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float signal(float x){\nreturn sin(x)+0.1*sin(2.*x)+0.5*sin(3.*x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float amplitude=0.2+0.4*sin(iTime);\n    float freq=60.;\n    float phase=0.1+iTime;\n    //signal\n    float waveh=((signal(uv.x*freq+phase)*amplitude+1.0)/2.0);\n    //derivative of the signal\n    float dx=abs(((signal(uv.x*freq+phase)*amplitude+1.0)/2.0)-((signal((uv.x+0.001)*freq+phase)*amplitude+1.0)/2.0))/0.001;\n    // Time varying pixel color\n\n      float de=(abs(waveh-uv.y)/sqrt(1.+(dx*dx)));\n  vec3 col = vec3(0,1,0)*(1.-smoothstep(0.,0.005,de));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}