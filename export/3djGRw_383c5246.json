{"ver":"0.1","info":{"id":"3djGRw","date":"1548437480","viewed":325,"name":"TriangleRasterizer","username":"uynet","description":"rasterizer","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["graphics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 c2 = vec3(.8,0.9,1.);//points\nvec3 c1 = vec3(1.,0.9,.7);//tradict\nvec3 c0 = vec3(.7,0.7,1.);//barycenterCircle\nvec3 c3 = vec3(1,1,1);//background\nvec3 c4 = vec3(1.,0.2,.6);//barycenter\nvec3 c5 = vec3(.6,1.,.2);//barycenter\nvec3 c6 = vec3(0.2,.6,1.);//barycenter\n\nfloat time;\nfloat R;\nconst int samples = 50;\nvec2 g;\nvec4 color;\n\nconst float PI = 3.14159265;\n\nfloat cLength(vec2 p){\n  if(abs(p.x)>abs(p.y))return abs(p.x);\n  return abs(p.y);\n}\n\nvoid rasterize(vec2 uv){\n\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float asp = iResolution.y/iResolution.x;\n    uv-=0.5;\n    uv.y *= asp;\n    uv *= 0.4;\n    color = vec4(c3,1.0);\n\n    \n    time = iTime*0.6;\n    \n    float r = 0.1;\n    \n    vec2 mouse = iMouse.xy/iResolution.xy-0.5;\n    \n    float t0 = time+sin(time*2.);\n    float t1 = time+cos(time*2.);\n    float t2 = time-sin(time*2.);\n\n    vec2 p0 = vec2(r*sin(t0-2.*PI/3.),r*cos(t0-2.*PI/3.));\n    vec2 p1 = vec2(r*sin(t1),r*cos(t1));\n    vec2 p2 = vec2(r*sin(t2-4.*PI/3.),r*cos(t2-4.*PI/3.));\n   \n      \n    float m0 = (p1.y-p0.y)/(p1.x-p0.x);\n    float m1 = (p2.y-p1.y)/(p2.x-p1.x);\n    float m2 = (p0.y-p2.y)/(p0.x-p2.x);\n    \n    //ax + by + c = 0\n    //y = m(x-p.x) + p.y ;\n    //mx + (-1)y + ( -mp.x + p.y ) = 0;\n\n    float d0 = abs(m0*uv.x + (-1.)*uv.y+ (-m0*p0.x+p0.y))\n                     /length(vec2(m0,-1));\n    float d1 = abs(m1*uv.x + (-1.)*uv.y+ (-m1*p1.x+p1.y))\n                     /length(vec2(m1,-1));\n    float d2 = abs(m2*uv.x + (-1.)*uv.y+ (-m2*p2.x+p2.y))\n                     /length(vec2(m2,-1));\n\n\n    float po = 100.;\n    vec2 grid = fract(uv*po);\n    vec2 st = uv-(grid-0.5)/po ;\n    //α＝{(By-Cy)(Px-Cx)+(Cx-Bx)(Py-Cy)}/{(By-Cy)(Ax-Cx)+(Cx-Bx)(Ay-Cy)}\n    //β＝{(Cy-Ay)(Px-Cx)+(Ax-Cx)(Py-Cy)}/{(By-Cy)(Ax-Cx)+(Cx-Bx)(Ay-Cy)}\n    //γ＝１−αーβ\n      float Ax = p0.x;\n      float Ay = p0.y;\n      float Bx = p1.x;\n      float By = p1.y;\n      float Cx = p2.x;\n      float Cy = p2.y;\n      float Px = st.x;\n       float Py = st.y;\n    float alpha = ((By-Cy)*(Px-Cx)+(Cx-Bx)*(Py-Cy))/((By-Cy)*(Ax-Cx)+(Cx-Bx)*(Ay-Cy));\n     float beta =  ((Cy-Ay)*(Px-Cx)+(Ax-Cx)*(Py-Cy))/((By-Cy)*(Ax-Cx)+(Cx-Bx)*(Ay-Cy));\n    float gamma = 1.-alpha-beta;\n\n    if(grid.x<0.05)color=vec4(c0,1);\n    if(grid.y<0.05)color=vec4(c0,1);\n    if(cross(vec3(p1-p0,0),vec3(st-p0,0)).z < 0. &&\n        cross(vec3(p2-p1,0),vec3(st-p1,0)).z < 0. &&\n       cross(vec3(p0-p2,0),vec3(st-p2,0)).z < 0. ){\n        color = vec4(c4*alpha + c6*beta + c0 * gamma,1.);\n         if(grid.x<0.05)color=vec4(c3,1);\n         if(grid.y<0.05)color=vec4(c3,1);\n    }\n        \n    //edges\n    float w = 0.001;\n    if((abs(d0)<w ||\n         abs(d1)<w||\n        abs(d2)<w)\n      &&length(uv)<0.1){\n        color = vec4(c4*alpha + c6*beta + c0 * gamma,1.);\n        //color = mix(color,vec4(c4,1),max(sin(time)+0.3,0.));\n    }\n    //vertices\n  \n      if(length(uv-p0)<0.006) color = vec4(c4,1);\n      if(length(uv-p1)<0.006) color = vec4(c6,1);\n      if(length(uv-p2)<0.006) color = vec4(c0,1);\n\n\n\n\n\n    // Output to screen\n    //if(abs(length(uv)-r)<0.007)fragColor=vec4(c1,1);\n    if(length(uv-g)<R)color*=vec4(c2,1);\n    fragColor = color;\n    \n}","name":"Image","description":"","type":"image"}]}