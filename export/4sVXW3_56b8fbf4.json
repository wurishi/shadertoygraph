{"ver":"0.1","info":{"id":"4sVXW3","date":"1467071060","viewed":891,"name":"Smallest Mandelbrot-80 chars","username":"GregRostami","description":"This is a simplification of my previous shader: [url]https://www.shadertoy.com/view/Mdy3Dw[/url]\nI wanted to make the SMALLEST Mandelbrot ... can you make it smaller?  :)","likes":7,"published":3,"flags":0,"usePreview":0,"tags":["2d","short","tweet","2tc"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 80 chars - o is already 0.0, so o-=o was removed.\n\nvoid mainImage(out vec4 o, vec2 u) {\nwhile(o.a++<98.) o.rg = u/iResolution.y - o.gr*mat2(-o.g,o.rrg); }  /*\t\n\n\n// 85 chars - using #define trick\n\n#define mainImage(o,u)\t\\\no-=o;\t\\\nwhile(o.a++<97.)o.rg=u/iResolution.y-mat2(-o.g,o.rrg)*o.gr\t\n\n    \n// 103 chars - I was schooled by akohdr, who reduced the matrix by 3 chars!!\n\nvoid mainImage(out vec4 o,vec2 u) \n{\n    o-=o;\n    for (int i=0; i++ < 97;) \n       o.rg = u/iResolution.y - mat2(-o.g,o.rrg)*o.gr;\n}\n\n\n// 107 chars - Original shader\n\nvoid mainImage(out vec4 o,vec2 u) \n{\n    o-=o;\n    for (int i=0; i < 97; i++) \n       o.rg = u/iResolution.y - mat2(o.rg,-o.g,o.r)*o.rg;\n}\n*/","name":"Image","description":"","type":"image"}]}