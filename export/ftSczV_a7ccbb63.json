{"ver":"0.1","info":{"id":"ftSczV","date":"1649903496","viewed":152,"name":"Bad Edge Detection","username":"mileslacey","description":"This was a quick experiment to help learn about image thresholding and somehow turned into an edge/outline filter.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["sobel","filter","threshold","detection","luminance","edge"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Upper and lower limits for edge-detection thresholding\n#define INCLUDE_THRESH_MIN 0.975f\n#define INCLUDE_THRESH_MAX 1.f\n\n// Threshold for removal of over-saturated pixels\n#define EXCLUDE_THRESH 0.999f\n\n\n\nfloat vec_luminance(in vec4 rgb)\n{\n    return (rgb.x*0.25f) + (rgb.y*0.5f) + (rgb.z*0.25f);\n}\n\n\n\nfloat connect_components(const in sampler2D albedo, const in vec2 uv, float stepX, float stepY)\n{\n    // sample corners around the current pixel and gather luminance\n    float c  = vec_luminance(texture(albedo, uv));\n    float n  = vec_luminance(texture(albedo, uv+vec2( 0.f,    stepY)));\n    float e  = vec_luminance(texture(albedo, uv+vec2( stepX,  0.f  )));\n    float s  = vec_luminance(texture(albedo, uv+vec2( 0.f,   -stepY)));\n    float w  = vec_luminance(texture(albedo, uv+vec2(-stepX,  0.f  )));\n    \n    float ne = vec_luminance(texture(albedo, uv+vec2( stepX,  stepY)));\n    float se = vec_luminance(texture(albedo, uv+vec2( stepX, -stepY)));\n    float sw = vec_luminance(texture(albedo, uv+vec2(-stepX, -stepY)));\n    float nw = vec_luminance(texture(albedo, uv+vec2(-stepX,  stepY)));\n\n    // sobel filter\n    float dX = ((ne + 2.f * e + se) - (nw + 2.f * w + sw));\n    float dY = ((sw + 2.f * s + se) - (nw + 2.f * n + ne));\n\n    // use the current pixel's luminance to determine influence of surrounding\n    // pixels\n    vec3 bump = normalize(vec3(dX*c, dY*c, 1.f));\n    \n    return dot(vec3(0.f, 0.f, 1.f), bump);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 uvStep = 1.f / iResolution.xy;\n\n    // Output to screen\n    float diff = abs(connect_components(iChannel0, uv, uvStep.x, uvStep.y));\n    \n    float excluded = smoothstep(INCLUDE_THRESH_MIN, INCLUDE_THRESH_MAX, diff);\n    float value = abs(excluded);\n    \n    //value = step(EXCLUDE_THRESH, value);\n    value = 1.f - value;\n    \n    fragColor.g = value;\n    \n    //vec4 color = texture(iChannel0, uv);\n    //color.g += value;\n    //fragColor = color;\n}\n","name":"Image","description":"","type":"image"}]}