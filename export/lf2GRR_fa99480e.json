{"ver":"0.1","info":{"id":"lf2GRR","date":"1704261209","viewed":25,"name":"Synth Simple","username":"arunjoseph3007","description":"synth","likes":3,"published":1,"flags":8,"usePreview":0,"tags":["sound","synth","midi","sythesizer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord){\n    // Normalize (kindoff)\n    vec2 uv = fragCoord/iResolution.x;\n    // Offset for simplicity\n    uv.x -= 0.25;\n\n    // Background\n    vec3 col = mix(0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4)),texture(iChannel0,uv).rgb,0.2);\n    \n    // Notes\n    int noOfNotes = 30;\n    for(int i=0;i<keys.length();i++){\n        MidiKey key = keys[i];\n        if(\n            uv.x*2.>key.down-iTime \n            && uv.x*2.<key.up-iTime\n            && uv.y>float(key.tone)/float(noOfNotes) \n            && uv.y<float(key.tone+1)/float(noOfNotes)\n        ){\n            col = vec3(.2);\n        }\n    }\n    \n    // Lines\n    if(fract(uv.y*float(noOfNotes))<0.06) col = mix(col,vec3(0),0.1);\n    \n    // Vertical bar que\n    float bandWidth = 0.02;\n    if(uv.x>-bandWidth && uv.x<bandWidth){\n        float dist = abs(uv.x)/bandWidth;\n        col = mix(vec3(0,1,1),col,pow(dist,1./4.));\n    }\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"float tone(float key){\n    float factor = pow(2.,1./12.);\n    return pow(factor,key);\n}\n\nfloat tone(int key){\n    return tone(float(key));\n}\n\nfloat getEnvAt(Envelope e, MidiKey m, float iTime){\n    if(iTime <= m.down || iTime > m.up + e.release) return 0.;\n    \n    float timePassed = iTime - m.down;\n    \n    if(timePassed <= e.attack){\n        return mix(0.,1.,timePassed/e.attack);\n    }\n    if(timePassed <= e.attack + e.decay){\n        return mix(1.,e.sustain, (timePassed - e.attack)/(e.decay));\n    }\n    if(iTime < m.up){\n        return e.sustain; \n    }\n    if(iTime < m.up + e.release){\n        return mix(e.sustain,0.,(iTime - m.up)/e.release);\n    }\n    \n    return 0.0;\n}\n\nfloat sine(float key,float time){\n    return sin(PI*C*time*key);\n}\n\nfloat saw(float key,float time){\n    return fract(PI*C*time*key/PI)*2.-1.;\n}\n\nfloat square(float key,float time){\n    return sign(sin(PI*C*time*key));\n}\n\nfloat triangle(float key,float time){\n    float val = saw(key,time);\n    return mix(val,-val,square(key,time)/2.0+0.5);\n}\n\nfloat noise(float key, float time){\n    vec3 s = texture(iChannel0,vec2(time*0.1,0)).rgb;\n    float val = s.r+s.g+s.b;\n    val/=3.;\n    return val*2.-1.;\n}\n\n\nfloat produce(Oscillator osc, MidiKey note, float time){\n    float sound = 0.;\n    float key = tone(note.tone + osc.pitchShift);\n    \n    for(int i=-osc.unison/2;i<=osc.unison/2;i++){\n        float df = pow(1.0-osc.detune,float(i));\n        float pitch = key*df;\n        \n        switch(osc.waveform){\n            case SINE:\n                sound += sine(pitch,time);\n                break;\n            case SAW:\n                sound += saw(pitch,time);\n                break;\n            case SQUARE:\n                sound += square(pitch,time);\n                break;\n            case TRIANGLE:\n                sound += triangle(pitch,time);\n                break;\n            case NOISE:\n                sound += noise(pitch,time);\n                break;\n        }\n    }\n    return sound;\n}\n\nvec2 mainSound(int samp, float time){\n    float sound = 0.;\n    Oscillator osc = Oscillator(SAW,6,0.00,1.,0.,12);\n    Envelope e = ADSR(.01,1.,1.,0.1);\n    \n    for(int i=0;i<keys.length();i++){\n        float amp = getEnvAt(e,keys[i],time);\n        if(amp>0.0001){\n            float samp = produce(osc,keys[i],time);\n            sound += samp*amp;\n        }\n    }\n    \n    return vec2(sound)/150.;\n}","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"#define PI       3.1415\n#define C        110.0\n#define Waveform int\n#define CHORD\n\nconst Waveform SINE=1;\nconst Waveform SAW=2;\nconst Waveform SQUARE=3;\nconst Waveform TRIANGLE=4;\nconst Waveform NOISE=5;\n\nstruct MidiKey {\n    int tone;\n    float down;\n    float up;\n};\n\nstruct Oscillator {\n    Waveform waveform;\n    int unison;\n    float detune;\n    float volume;\n    float pan;\n    int pitchShift;\n};\n\nstruct Envelope {\n    float attack;\n    float decay;\n    float sustain;\n    float release;\n};\n\nEnvelope ADSR(float a, float d, float s, float r){\n    return Envelope(a,d,s,r);\n}\n\nstruct Synth {\n    Oscillator oscA;\n    Oscillator oscB;\n    Envelope envA;\n    Envelope envB;\n    float volume;\n    float pan;\n};\n\n\nconst MidiKey keys[] = MidiKey[](\n#ifdef SCALE\n    MidiKey(0,0.0,0.5),\n    MidiKey(2,1.0,1.5),\n    MidiKey(4,2.0,2.5),\n    MidiKey(5,3.0,3.5),\n    MidiKey(7,4.0,4.5),\n    MidiKey(9,5.0,5.5),\n    MidiKey(11,6.0,6.5),\n    MidiKey(12,7.0,7.5)\n#endif\n#ifdef CHORD\n    MidiKey(1,1.0,2.),\n    MidiKey(5,1.0,2.),\n    MidiKey(8,1.0,2.),\n    MidiKey(12,1.0,2.),\n    \n    MidiKey(3,2.1,3.),\n    MidiKey(7,2.1,3.),\n    MidiKey(10,2.1,3.),\n    MidiKey(13,2.1,3.),\n    \n    MidiKey(5,3.0,4.),\n    MidiKey(8,3.0,4.),\n    MidiKey(13,3.0,4.),\n    MidiKey(15,3.0,4.),\n    \n    MidiKey(5,4.1,5.),\n    MidiKey(8,4.1,5.),\n    MidiKey(12,4.1,5.),\n    MidiKey(15,4.1,5.)\n#endif\n);\n","name":"Common","description":"","type":"common"}]}