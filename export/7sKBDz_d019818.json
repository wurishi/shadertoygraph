{"ver":"0.1","info":{"id":"7sKBDz","date":"1658047868","viewed":454,"name":"understanding matrices","username":"FabriceNeyret2","description":"see comments.\nMouse controls green axis = column2 of matrix M","likes":11,"published":3,"flags":0,"usePreview":0,"tags":["tuto"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R    iResolution.xy\n\nfloat line(vec2 p, vec2 a,vec2 b) { \n    p -= a, b -= a;\n    float h = clamp(dot(p, b) / dot(b, b), 0., 1.);\n    return smoothstep( 3./R.y, 0., length(p - b * h) );  \n}\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2  P = ( 2.*u - R ) / R.y +.5, V,\n          m = iMouse.xy;\n    m = length(m)>10. ? ( 2.*m - R ) / R.y + .5 : vec2(0,1);\n\n    float t = iTime;\n                           // I = column 1  J = column 2\n    mat2  M = mat2( 1.+.2*cos(t),.2*sin(t),   m.x,m.y ),         \n         iM = inverse(M);  // ( U = row 1, V = row 2 )\n                           // note that for rotations U=I, V=J since inverse = transpose\n                           \n    O-=O;\n                      // --- find where (x,y) lays in frame(I,J)\n    V = iM * P;       // vx = dot(U,P) = xCoord of P in (I,J)\n                      // vy = dot(V,P) = yCoord of P in (I,J)\n    if (min(V.x,V.y)>0. && max(V.x,V.y)<1.) O = texture(iChannel0, V );\n    \n                      // --- draw (u,v) shapes in frame(I,J)\n                      // M * (u,v) ~ dot( (I,J) , (u,v) ) = uI + vJ\n    O = mix(O, vec4(1,0,0,1), line(P, vec2(0), M *vec2(1,0) ) );\n    O = mix(O, vec4(0,1,0,1), line(P, vec2(0), M *vec2(0,1) ) );\n}","name":"Image","description":"","type":"image"}]}