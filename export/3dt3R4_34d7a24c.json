{"ver":"0.1","info":{"id":"3dt3R4","date":"1568034261","viewed":135,"name":"Happy molecule","username":"Roninkoi","description":"Forever jiggling in excitement","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool sphereIsect(vec3 p, vec3 sc, float sr)\n{\n    return distance(p, sc) <= sr;\n}\n\nvec3 sphereNorm(vec3 p, vec3 sc)\n{\n    return normalize(p - sc);\n}\n\nvec3 sphereRay(vec3 rd, vec3 ro, vec3 sc, float sr)\n{\n    vec3 dv = sc - ro;\n    \n    float a = abs(dot(normalize(rd), normalize(dv)));\n    \n    float d = length(dv);\n    float p = d * a - sqrt(d*d*a*a - d*d + sr*sr);\n    \n    vec3 sp = normalize(rd) * p;\n    \n    vec3 r = sp - dv;\n    \n    if (length(r) > 0.0) {\n        return sp;\n    }\n    \n    return vec3(.0);\n}\n\nvec3 minRay(vec3 p, vec3 pn)\n{\n    if (length(pn) > 0.0 && (length(pn) < length(p) || length(p) == 0.0))  {\n        return pn;\n    }\n    return p;\n}\n\nbool cmpRay(vec3 p, vec3 pn)\n{\n    if (length(pn) > 0.0 && (length(pn) < length(p) || length(p) == 0.0))  {\n        return true;\n    }\n    return false;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = vec2(fragCoord.x*2. - iResolution.x, \n                   fragCoord.y*2. - iResolution.y);\n    uv /= iResolution.y;\n\n    vec3 col = vec3(sin(iTime + uv.x * uv.y * 2.) * 0.5, 0.0, cos(iTime + uv.y * uv.x * 2.));\n    col *= vec3(0.1, 0.0, 0.2);\n    \n    vec3 sc1 = vec3(0.0, 0.0, 1.5);\n    float sr1 = 1.0;\n    \n    vec3 sc2 = vec3(0.8 * cos(iTime * 0.8), \n                    0.4 * (sin(iTime * 0.3) + cos(iTime * 0.5)), \n                    0.8 * sin(iTime * 0.8) + 1.5);\n    float sr2 = 0.35 + 0.03 * cos(iTime * 8.);\n    \n    vec3 sc3 = vec3(0.8 * cos(iTime * 0.8 + 2.), \n                    0.4 * (sin(iTime * 0.2) + cos(iTime * 0.7)), \n                    0.8 * sin(iTime * 0.8 + 2.) + 1.5);\n    float sr3 = 0.35 + 0.03 * cos(iTime * 8.);\n    \n    vec3 sc4 = vec3(0.8 * cos(iTime * 0.8 + 4.), \n                    0.4 * (sin(iTime * 0.88) - cos(iTime * 0.1)), \n                    0.8 * sin(iTime * 0.8 + 4.) + 1.5);\n    float sr4 = 0.35 + 0.03 * cos(iTime * 8.);\n    \n    vec3 rd = vec3(uv.x, uv.y, 1.5);\n    rd = normalize(rd);\n    vec3 ro = vec3(0.0, 0.0, -0.5);\n    \n    vec3 p = vec3(0.);\n    \n    vec3 pn = sphereRay(rd + vec3(0.02*sin(iTime * 10.0),.0,.0), \n                        ro + vec3(0.,0.02*sin(iTime * 8.0),\n                                  0.02*cos(iTime * 5.0)), sc1, sr1);\n    \n    if (cmpRay(p, pn)) {\n        p = pn;\n        col = (sphereNorm(p, sc1)*.5 + .5);\n        col *= vec3(0.1, 0.1, 1.0);\n    }\n    \n    pn = sphereRay(rd, ro, sc2, sr2);\n    \n    if (cmpRay(p, pn)) {\n        p = pn;\n        col = sphereNorm(p, sc2)*.5 + .5;\n        float f = 0.7 + (length(p - sc2) - sr2);\n        col *= f * f * f;\n        col *= exp(col) * exp(col);\n        col *= vec3(1., 0.3, 0.1);\n    }\n    \n    pn = sphereRay(rd, ro, sc3, sr3);\n    \n    if (cmpRay(p, pn)) {\n        p = pn;\n        col = sphereNorm(p, sc3)*.5 + .5;\n        float f = 0.7 + (length(p - sc3) - sr3);\n        col *= f * f * f;\n        col *= exp(col) * exp(col);\n        col *= vec3(1., 0.3, 0.1);\n    }\n    \n    pn = sphereRay(rd, ro, sc4, sr4);\n    \n    if (cmpRay(p, pn)) {\n        p = pn;\n        col = sphereNorm(p, sc4)*.5 + .5;\n        float f = 0.7 + (length(p - sc4) - sr4);\n        col *= f * f * f;\n        col *= exp(col) * exp(col);\n        col *= vec3(1., 0.3, 0.1);\n    }\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}