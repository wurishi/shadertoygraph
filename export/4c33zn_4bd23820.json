{"ver":"0.1","info":{"id":"4c33zn","date":"1711287992","viewed":31,"name":"Noise and lattice pattern","username":"karakure178","description":"Create texture by combining lattice pattern and noise.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["noise","latticepattern"],"hasliked":0,"parentid":"McsGW7","parentname":"high line and gradient"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define X .211324865405187\n#define Y .36602540378443\n#define Z -.577350269189626\n#define W .024390243902439\n\n// 参考：https://github.com/Makio64/monkeyNewYear/blob/master/src/glsl/chunks/snoise2D.glsl\n// 参考：https://twigl.app/?ol=true&ss=-NZYlGH1E6hmmM2tcnXe\nvec3 permute(vec3 x) { return mod( x*x*34.+x, 289.); }\n\nfloat snoise(vec2 v) {\n\tvec2 i = floor(v + (v.x+v.y)*Y),\n\t  x0 = v -   i + (i.x+i.y)*X,\n\t   j = step(x0.yx, x0),\n\t  x1 = x0+X-j,\n\t  x3 = x0+Z;\n\t  i = mod(i,289.);\n\t  vec3 p = permute( permute( i.y + vec3(0, j.y, 1 ))\n\t\t\t\t\t\t\t\t  + i.x + vec3(0, j.x, 1 )   ),\n\t   m = max( .5 - vec3(dot(x0,x0), dot(x1,x1), dot(x3,x3)), 0.),\n\t   x = 2. * fract(p * W) - 1.,\n\t   h = abs(x) - .5,\n\t  a0 = x - floor(x + .5),\n\t   g = a0 * vec3(x0.x,x1.x,x3.x)\n\t\t  + h * vec3(x0.y,x1.y,x3.y);\n\tm = m*m*m*m* ( 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ) );\n\treturn .5 + 65. * dot(m, g);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float l = .1;\n    float f = 9.;\n    float n = snoise(uv*3.+ iTime)*.5+.5; // noise画像\n    float c = float(fract(n*f)<l);\n    \n    //vec3 col_highline = vec3(c,c,c);\n    // 階層化する\n    vec3 col_highline = vec3(n,n,n);\n    \n    if(col_highline.r > 0.85){\n        fragColor = vec4(0.0,0.0,0.0,1.0);\n        \n    }else if(col_highline.r > 0.8){\n        fragColor = vec4(0.1,0.1,0.1,1.0);\n        \n    }else if(col_highline.r > 0.7){\n        fragColor = vec4(0.2,0.2,0.2,1.0);\n        \n    }else if(col_highline.r > 0.65){\n        fragColor = vec4(0.3,0.3,0.3,1.0);\n    \n    }else if(col_highline.r > 0.6){\n        fragColor = vec4(0.4,0.4,0.4,1.0);\n\n    }else{\n         fragColor = vec4(0.83, 0.73, 0.84, 1.00);\n     \n    }\n\n    // 格子模様と高等線を合成する\n    vec4 tex = texture(iChannel0,uv);    \n    if(tex == vec4(0.0,0.0,0.0,1.0)){\n        fragColor = tex;\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // 格子模様を作る\n    // 参考：https://kabos.hatenablog.jp/entry/2019/11/06/025746\n    // 参考：https://thebookofshaders.com/09/?lan=jp\n\tvec2 pos = fragCoord/iResolution.xy;\n    pos *= 3.0;// ここで分割数を増やす\n\tfloat check = abs(step(0.5, fract(pos.x)) - step(0.5, fract(pos.y)));\n\tvec3 color = check * vec3(1.);\n\n    fragColor = vec4(color,1.);\n}","name":"Buffer A","description":"","type":"buffer"}]}