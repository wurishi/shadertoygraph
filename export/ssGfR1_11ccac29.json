{"ver":"0.1","info":{"id":"ssGfR1","date":"1657651298","viewed":239,"name":"Frequency oscillations","username":"ninofiliu","description":"By piping the frame to itself, I add all the pixels at a distance r and subtract and the pixels at a distance 2*r, thereby maximizing black and white shapes of width r\n\n\"brush\" can be controlled with the mouse","likes":9,"published":3,"flags":32,"usePreview":0,"tags":["abstract","frequency","backbuffer"],"hasliked":0,"parentid":"7dcfRB","parentname":"Backbuffer example"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 color, in vec2 coord) {\n    vec2 uv = coord / iResolution.xy;\n    color = texture(iChannel0, uv);    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float twoRadiuses(vec2 uv, float r) {\n  const int n = 20;\n  const float turn = 6.283185307179586;\n\n  // samples n points on two circles around uv\n  float ret = 0.;\n  for (int i = 0; i < n; i++) {\n    float a = float(i) / float(n) * turn;\n    // first circle (radius 1*r)\n    ret += texture(iChannel0, uv + 1. * r * vec2(cos(a), sin(a))).r;\n    // second circle (radius 2*r)\n    ret -= texture(iChannel0, uv + 2. * r * vec2(cos(a), sin(a))).r;\n  }\n  ret /= float(n) * .3;\n\n  return ret;\n}\n\nvoid mainImage(out vec4 color, in vec2 coord) {\n  vec2 uv = coord / iResolution.xy;\n\n  // initializes the color to the color of the corresponding pixel in the last frame\n  color = texture(iChannel0, uv);\n  \n  // the radius r oscillates over time between 0 and 0.1\n  float r = .05 * (0.5 + 0.5 * cos(0.5 * iTime));\n  color += twoRadiuses(uv, r);\n  color = clamp(color, 0., 1.);\n\n  // if clicked on the shader,\n  // then the brush is at the position of the mouse\n  // else the brush position oscillates depending on some easy to get functions\n  vec2 brush = iMouse.z > 0.\n                   ? (iMouse.xy / iResolution.xy)\n                   : (0.5 + 0.3 * vec2(cos(2. * iTime), sin(3.1 * iTime)));\n                   \n  // the brush consists in a white blurry disk\n  color.rgb += clamp(4. - 70. * distance(uv, brush), 0., 1.);\n}","name":"Buffer A","description":"","type":"buffer"}]}