{"ver":"0.1","info":{"id":"l3tXR8","date":"1720610357","viewed":31,"name":"Spherical texture-pann algorithm","username":"Swiggity","description":" A simple code example for how you can make a texture panner inside a fragment shader and have a circular panner rather than a single directional one that could potentially used in vfx.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["algorithm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.141592653589793;\n\nfloat GetCircleRotation(vec2 circleOrigin, vec2 gridPos){\n    vec2 dif = circleOrigin-gridPos;\n    return (atan(dif.y,dif.x) + PI)/PI;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float animationSpeed = 0.1;\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 circleOrigin = vec2(0.5);\n    \n    float tileLength = 1.0;\n    float tilesTraveled = length(circleOrigin - uv) * tileLength;\n    float TexturesPerWidth = abs(floor(tilesTraveled));\n    \n    vec2 newUv;\n    newUv.x = GetCircleRotation(circleOrigin, uv);\n    newUv.y = length(circleOrigin - uv) * tileLength - iTime * animationSpeed;\n    \n    \n    // Output to screen\n    fragColor = texture(iChannel0, newUv);\n}","name":"Image","description":"","type":"image"}]}