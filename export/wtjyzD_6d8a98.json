{"ver":"0.1","info":{"id":"wtjyzD","date":"1593894958","viewed":256,"name":"Britney ^ Britney","username":"kloumpt","description":"Basically xoring the 8bit values betwen adjacent pixels and adding a feedback effect.\n\nThe feedback effect can be disabled by commenting #define FEEDBACK 1","likes":9,"published":1,"flags":34,"usePreview":0,"tags":["xor","feedback"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel0, uv).rgb;\n    col = pow(col, vec3(1.0 / 2.0));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define FEEDBACK 1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 uv_cam = vec2(1.0 - uv.x, uv.y);\n    vec3 col1 = texture(iChannel0, uv_cam).rgb;\n    vec3 col2 = texture(iChannel0, uv_cam + vec2(0.0, 1.0) / iResolution.xy).rgb;\n    \n    ivec3 icol1 = ivec3(col1 * 255.0);\n    ivec3 icol2 = ivec3(col2 * 255.0);\n    \n    ivec3 icol = ivec3(icol1.r ^ icol2.r, icol1.g ^ icol2.g, icol1.b ^ icol2.b);\n    \n    vec3 col = vec3(icol) / 255.0;\n    vec3 bb_col = texture(iChannel1, uv - vec2(0.0, 2.0) / iResolution.xy).rgb;\n    \n    #ifdef FEEDBACK\n\t    col = max(col, 0.9 * pow(bb_col * 0.99, vec3(1.0 / 0.9)));\n    #endif\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}