{"ver":"0.1","info":{"id":"3dVfz1","date":"1606601757","viewed":44,"name":"Scrolling Logistic Bifurcation","username":"THWeaver","description":"Simple bifurcation diagram for the logistic map.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","chaos","logistic","bifurcation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Scrolling Logistic Map Bifurcation by Logan Apple (Twitter: @loganapple540)\n// https://www.shadertoy.com/view/3dVfz1\n// MIT License\n\n// More Info: https://en.wikipedia.org/wiki/Logistic_map\n\n#define MAX_ITER 100\n\nfloat logistic_map(in float r, in float x)\n{\n    return r * x * (1.0 - x);\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{   \n    vec3 col = vec3(0.0);\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    // Initial guess.\n    float current_x = 0.5;\n    int accumulate = 0;\n    for (int i = 0; i < MAX_ITER; ++i)\n    {\n        // Update using logistic map.\n        current_x = logistic_map(uv.x + 0.15 * min(iTime, 20.0), current_x);\n        \n        // Any point exactly on the lines of the bifurcation diagram is included.\n        if (current_x <= uv.y + 1.0 / iResolution.y && current_x > uv.y) {\n            accumulate++;\n        }\n    }\n    \n    col = vec3(1.0 - smoothstep(float(accumulate), 0.0, 0.001));\n    \n    // Output to screen.\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}