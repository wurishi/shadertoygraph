{"ver":"0.1","info":{"id":"MXs3Dl","date":"1708727151","viewed":31,"name":"Azits","username":"Azits","description":"j'ai fait une petite en scène d'un ourse qui est à table. ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["azits"],"hasliked":0,"parentid":"-1","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modeling - 2023.02.06\n// Eric Galin\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(vec2 m,vec2 p,out vec3 ro,out vec3 rd)\n{\n  float a=3.*3.14*m.x;\n  float le=3.5;\n  \n  // Origin\n  ro=vec3(9.,35,10.);\n  ro*=Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(0.,6.,5.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  rd=normalize(p.x*u+p.y*v+le*w);\n}\n\n// Operators\n\n\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n  return min(a,b);\n}\nfloat diff(float a, float b){\n    return max(a,-b);\n}\n\n\n\nvec3 translation (vec3 p, vec3 t){\n    return p+t;\n}\nmat3 Ry(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,0,sa,0.,1.,0.,-sa,0.,ca);\n}\nmat3 Rx(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(1,0,0,0,ca,sa,0.,-sa,ca);\n}\n\n\nvec3 homotesi(vec3 p, vec3 s) {\n    return vec3(p.x * s.x, p.y * s.y, p.z * s.z);\n}\nfloat intersection(float a,float b){\n    return max(a,b);\n}\n\n// Primitives\n\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\nstruct Sphere{\n    vec3 c;\n    float r;    \n};\n\nfloat sphere(vec3 p,Sphere s)\n{\n  return length(p-s.c)-s.r;\n}\n//plan \nstruct Plan{\n    vec3 c;\n    vec3 normale;\n};\n\n\nfloat plan (vec3 p,Plan plan){\n    return dot(p-plan.c,plan.normale); // calcule la distance entre un plan et un poind p\n}\n\n///Capsule \n\nstruct Capsule{\n    float h;\n    float r;\n    vec3 c;\n};\n\nfloat capsule( vec3 p, Capsule c  )\n{\n  p=p-c.c;\n  p.y -= clamp( p.y, 0.0,c.h );\n  return length( p ) - c.r;\n}\n\n\n//Box \nstruct Boite{\n    vec3 c;\n    float dx;\n    float dy;\n    float dz;\n};\n\nfloat boite(vec3 p,Boite b){\n    Plan plan1= Plan(b.c+vec3(0.,0.,b.dz),vec3(0.,0.,1.)); // face du haut \n    float d1=plan(p,plan1);\n    \n    Plan plan2= Plan(b.c+vec3(0.,-b.dy,0.),vec3(0.,-1.,0.)); /// face de gauche \n    float d2=plan(p,plan2);\n    \n    Plan plan3= Plan(b.c+vec3(b.dx,0.,0.),vec3(1.,0.,0.));/// face du fond \n    float d3=plan(p,plan3);\n    \n    Plan plan4= Plan(b.c+vec3(0.,0.,-b.dz),vec3(0.,0.,-1.));//face du bas \n    float d4=plan(p,plan4);\n    \n    Plan plan5=Plan(b.c+vec3(-b.dx,0.,0.),vec3(-1.,0.,0.));//face du face \n    float d5=plan(p,plan5);\n    \n    Plan plan6=  Plan(b.c+vec3(0.,b.dy,0.),vec3(0.,1.,0.));//face de droite \n    float d6=plan(p,plan6);\n    \n    \n   //Ici on calcule l'intersection des 6 plans \n   \n   float  d=intersection(d1,d2); \n    d=intersection(d,d3);\n    d=intersection(d,d4);\n     d=intersection(d,d5);\n      d=intersection(d,d6);\n    \n    \n    \n    \n    return d;\n    \n    \n\n}\n\n       \n\n//Cylindre \nstruct Cylindre {\n    vec3 n;\n    vec3 c;\n    Plan haut;\n    Plan bas;\n    float r;\n    \n};\n\n\nfloat cylindre(vec3 p,Cylindre cylindre){ // un cylindre est l'intersection d'un cylindre infini avec deux plan (Haut et Bas)\n       float h=dot(p-cylindre.c,cylindre.n);\n       float d=length(p-cylindre.c);\n       d=sqrt(d*d-h*h)-cylindre.r;\n       float d1=plan(p,cylindre.haut);\n       float d2=plan(p,cylindre.bas);\n       \n       \n       d=intersection(d,d1);\n       d=intersection(d,d2);\n       return d;      \n}\n\n//tore \nstruct Tore{\n\n    float R,r;\n    vec3 c;\n    \n};\n\nfloat tore( vec3 p,Tore t )\n{\n  p=p-t.c;\n  vec2 q = vec2(length(p.xz)-t.R,p.y);\n  return length(q)-t.r;\n  \n}\n\n\n\n//bole\n\nstruct Bole{\n    Sphere s;\n    Sphere s2;\n    Plan p;\n};\nfloat bole(vec3 p,Bole b){ // un bole est l'intersection entre une sphere et un plan \n \n       float d=length(p-b.s.c)-b.s.r;\n       float d1=plan(p,b.p);\n       float d3=length(p-b.s2.c)-b.s2.r;\n       d=intersection(d1,d);\n       d=diff(d,d3);\n       return d;\n       \n       \n }\n \n struct Verre{\n     Cylindre cI;\n     Cylindre cE;\n };\n \n float verre(vec3 p,Verre v){\n \n      float h=dot(p-v.cI.c,v.cI.n);\n       float dI=length(p-v.cI.c);\n       dI=sqrt(dI*dI-h*h)-v.cI.r;\n       float d1I=plan(p,v.cI.haut);\n       float d2I=plan(p,v.cI.bas);\n       \n       dI=intersection(dI,d1I);\n       dI=intersection(dI,d2I);\n       \n       /// Deuxieme cilindre \n       \n      float h2=dot(p-v.cE.c,v.cE.n);\n       float dE=length(p-v.cE.c);\n       dI=sqrt(dE*dE-h*h)-v.cE.r;\n       float d1E=plan(p,v.cE.haut);\n       float d2E=plan(p,v.cE.bas);\n       \n       dE=intersection(dE,d1E);\n       dE=intersection(dE,d2E);\n       \n       \n       //// ;\n       return diff(dE,dI);\n \n }\n \n \n \n\n \n\n \n\n\n\n\n\n// Potential field of the object\n// p : point\n\nfloat object(vec3 p)\n{\n    // Les pied \n    Plan h=Plan(vec3(0,0,5),vec3(0,0,1));\n    Plan b=Plan(vec3(0,0,-5),vec3(0,0,-1));\n    Cylindre pied1= Cylindre(vec3(0,0,1),vec3(8,8,0),h,b,1.);\n    Cylindre pied2= Cylindre(vec3(0,0,1),translation(pied1.c,vec3(-16,0,0)),h,b,1.);\n    Cylindre pied3= Cylindre(vec3(0,0,1),translation(pied1.c,vec3(0,-16,0)),h,b,1.);\n    Cylindre pied4= Cylindre(vec3(0,0,1),translation(pied2.c,vec3(0,-16,0)),h,b,1.);\n    \n    Sphere sphe=Sphere(vec3(0,-6,7.5),2.);\n    Sphere sphe2=Sphere(sphe.c,1.9);\n    Bole bol;\n    bol.p=Plan(vec3(0,0,7.6),vec3(0,0,1));\n    bol.s.c=sphe.c;\n    bol.s.r=sphe.r;\n    bol.s2.c=sphe2.c;\n    bol.s2.r=sphe2.r;\n        \n        \n     \n     // ourse ventre vas etre le centre de l'ourse. Par la suite tout les autre membre(tete,pied et bras) de l'ourse vont etre des transformation geometrique de ourse ventre  \n     Sphere ourseVentre=Sphere(vec3 (0,-13,5),3.);  \n     Sphere tete=Sphere(translation(ourseVentre.c,vec3(0,0,4)),1.6);\n     \n     Sphere nez=Sphere(translation(tete.c,vec3(0,1.3,0)),0.5);\n     \n     Sphere oeil1=Sphere(translation(tete.c,vec3(-0.5,1.1,0.8)),0.3);\n     Sphere oeil2=Sphere(translation(oeil1.c,vec3(1,0,0)),0.3);\n     \n     Sphere oreille1=Sphere(translation(tete.c,vec3(-1.2,0.2,1.4)),0.65);\n     Sphere oreille2=Sphere(translation(oreille1.c,vec3(2.45,0,0)),0.65);\n     \n     \n     Plan hPied=Plan(vec3(0,0,5),vec3(0,0,1));\n     Plan bPied=Plan(vec3(0,0,-5),vec3(0,0,-1));\n     Cylindre piedGauche=Cylindre(vec3(0,0,1),translation(ourseVentre.c,vec3(.7,0,0)),hPied,bPied,.7);\n     Cylindre piedDroit=Cylindre(vec3(0,0,1),translation(piedGauche.c,vec3(-2,0,0)),hPied,bPied,.7);\n     \n     Plan d=Plan(vec3(-5,0,0),vec3(-1,0,0));\n     Plan g=Plan(vec3(5,0,0),vec3(1,0,0));\n     Cylindre bras=Cylindre(vec3(-1,0,0),translation(ourseVentre.c,vec3(0,0,1)),d,g,0.5);\n     \n     Sphere mainD=Sphere(translation(bras.c,vec3(5,0,0)),0.8);\n     Sphere mainG=Sphere(translation(bras.c,vec3(-5,0,0)),0.8);\n     \n     //Tore \n     Tore t=Tore(1.6,0.4,vec3(0,8,13));\n     \n     //////////////////////////Verre//////////////////////////////////////////////////\n     Plan pVH=Plan(vec3(0,0,7.5),vec3(0,0,1));\n     Plan pVB=Plan(vec3(0,0,-7.5),vec3(0,0,-1));\n     Cylindre exter=Cylindre(vec3(0,0,1),vec3(0,0,8),pVH,pVB,2.);\n     Cylindre inter=Cylindre(vec3(0,0,1),vec3(0,0,8),pVH,pVB,0.9);\n     \n     Verre verr=Verre(inter,exter);\n     \n     /////////////////Cuillère/////////////////////////////////////////\n     \n     Capsule ca=Capsule(3.,0.5,vec3(5,4.8,13));\n     \n     Sphere sph=Sphere(vec3(5,-12.5,9.3),1.5);\n     Sphere sph2=Sphere(sph.c,1.2);\n     Bole cuillere;\n     cuillere.p=Plan(vec3(0,-12,0),vec3(0,1,0));\n     cuillere.s.c=sph.c;\n    cuillere.s.r=sph.r;\n    cuillere.s2.c=sph2.c;\n     cuillere.s2.r=sph2.r;\n     \n     \n     \n     \n     \n     \n     \n\n     \n     \n     \n     \n     \n       \n        \n    \n    \n    float v=plan(p,Plan(vec3(0.,0.,0.),vec3(0.,0.,1.)));\n           v=Union(v,boite(p,Boite(vec3(0,0,5),10.,9.,1.)));\n            v=Union(v,cylindre(p,pied1));\n            v=Union(v,cylindre(p,pied2));\n            v=Union(v,cylindre(p,pied3));\n            v=Union(v,cylindre(p,pied4));\n            \n            v=Union(v,bole(p,bol));\n            \n            \n            v=Union(v,sphere(p,ourseVentre));\n            v=Union(v,sphere(p,tete));\n            v=Union(v,sphere(p,oreille1));\n            v=Union(v,sphere(p,oreille2));\n            v=Union(v,sphere(p,oreille2));\n            v=Union(v,sphere(p,nez));\n            v=Union(v,sphere(p,oeil1));\n            v=Union(v,sphere(p,oeil2));\n            v=Union(v,cylindre(p,piedGauche));\n            v=Union(v,cylindre(p,piedDroit));\n            v=Union(v,cylindre(p,bras));\n            v=Union(v,sphere(p,mainD));\n             v=Union(v,sphere(p,mainG));\n             \n             v=Union(v,tore(Rx(11.)*p,t));\n             \n             v=Union(v,capsule(Rx(11.)*p,ca));\n             v=Union(v,bole(p,cuillere));\n             \n             \n             \n            \n            \n            \n            \n            \n               \n             \n        \n            \n      return v;\n}\n\n// Analysis of the scalar field\n\nconst int Steps=200;// Number of steps\nconst float Epsilon=.01;// Marching epsilon\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  float v=object(p);\n  n.x=object(vec3(p.x+eps,p.y,p.z))-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z))-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps))-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o,vec3 u,float e,out bool h,out int s)\n{\n  h=false;\n  \n  // Start at the origin\n  float t=0.;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=o+t*u;\n    float v=object(p);\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Lighting\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),d.z*.5+.5);\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n  bool h;\n  int s;\n  float t=SphereTrace(p+Epsilon*n,l,100.,h,s);\n  if(!h)\n  {\n    return 1.;\n  }\n  return 0.;\n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p,vec3 n,vec3 e)\n{\n  // Point light\n  const vec3 lp=vec3(5.,10.,25.);\n  \n  // Light direction to point light\n  vec3 l=normalize(lp-p);\n  \n  // Ambient color\n  vec3 ambient=.25+.25*background(n);\n  \n  // Shadow computation\n  float shadow=Shadow(p,n,l);\n  \n  // Phong diffuse\n  vec3 diffuse=.35*clamp(dot(n,l),0.,1.)*vec3(1.,1.,1.);\n  \n  // Specular\n  vec3 r=reflect(e,n);\n  vec3 specular=.15*pow(clamp(dot(r,l),0.,1.),35.)*vec3(1.,1.,1.);\n  vec3 c=ambient+shadow*(diffuse+specular);\n  return c;\n}\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n  float t=float(n)/(float(Steps-1));\n  return.5+mix(vec3(.05,.05,.5),vec3(.65,.39,.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel,out bool pip)\n{\n  // Pixel coordinates\n  vec2 p=(-iResolution.xy+2.*pixel)/iResolution.y;\n  if(pip==true)\n  {\n    const float fraction=1./4.;\n    // Recompute pixel coordinates in sub-picture\n    if((pixel.x<iResolution.x*fraction)&&(pixel.y<iResolution.y*fraction))\n    {\n      p=(-iResolution.xy*fraction+2.*pixel)/(iResolution.y*fraction);\n      pip=true;\n    }\n    else\n    {\n      pip=false;\n    }\n  }\n  return p;\n}\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)\n{\n  // Picture in picture on\n  bool pip=true;\n  \n  // Pixel\n  vec2 pixel=Pip(pxy,pip);\n  \n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n  \n  // Camera\n  vec3 ro,rd;\n  Ray(m,pixel,ro,rd);\n  \n  // Trace ray\n  \n  // Hit and number of steps\n  bool hit;\n  int s;\n  \n  float t=SphereTrace(ro,rd,100.,hit,s);\n  \n  // Shade background\n  vec3 rgb=background(rd);\n  \n  if(hit)\n  {\n    // Position\n    vec3 p=ro+t*rd;\n    \n    // Compute normal\n    vec3 n=ObjectNormal(p);\n    \n    // Shade object with light\n    rgb=Shade(p,n,rd);\n  }\n  \n  // Uncomment this line to shade image with false colors representing the number of steps\n  if(pip==true)\n  {\n    rgb=ShadeSteps(s);\n  }\n  \n  color=vec4(rgb,1.);\n}\n","name":"Image","description":"","type":"image"}]}