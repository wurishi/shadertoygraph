{"ver":"0.1","info":{"id":"X3GGDd","date":"1718375216","viewed":117,"name":"Belousov Zhabotinsky Reaction","username":"jwmaxwell","description":"A Belousov-Zhabotinsky (BZ) Reaction simulator. The other BZ reactions I've seen on here don't seem to use the chemical formulas so I thought I would go ahead and change that. ","likes":6,"published":3,"flags":32,"usePreview":0,"tags":["diffusion","oscillating","reaction","belousov","infection","oscillations","chemistry"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tfragColor = texture(iChannel0, fragCoord / iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define get(x,y) texture(iChannel0, uv + vec2(x, y) / iResolution.xy)\n\nconst float alpha = 1.2;\nconst float beta = 1.;\nconst float gamma = 1.;\n\nconst float radius = 2.; // Edit this for bigger reactions :)\n\nvec3 getAvgNeighbor(vec2 uv) {       \n    vec3 sum = vec3(0.);\n    float count = 0.;\n    for (float dx = -radius; dx++ <= radius;) {\n        for (float dy = -radius; dy++ <= radius;) {\n            if (length(vec2(dx, dy)) < radius) {\n                sum += get(dx, dy).xyz;\n                ++count;\n            }\n        }\n    }\n             \n    return sum.xyz / vec3(count);\n}\n\nvec4 life(vec2 uv) {\n    vec3 v = getAvgNeighbor(uv);\n    \n    float A = v.x;\n    float B = v.y;\n    float C = v.z;\n    \n    v.x = clamp(A + (A * (alpha * B - gamma * C)), 0., 1.);\n    v.y = clamp(B + (B * (beta  * C - alpha * A)), 0., 1.);\n    v.z = clamp(C + (C * (gamma * A - beta  * B)), 0., 1.);\n    \n    return vec4(v, 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = iFrame > 4 ? life(uv) : texture(iChannel1, uv);\n}","name":"Buffer A","description":"","type":"buffer"}]}