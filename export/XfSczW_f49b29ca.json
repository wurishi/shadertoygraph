{"ver":"0.1","info":{"id":"XfSczW","date":"1721946270","viewed":23,"name":"2D SDF elements experiment","username":"Lehdari","description":"Experiment on constructing an SDF from collection of elements","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["test","sdf","experiment","elements"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define N_E_POINTS 6\n#define PI 3.14159265358979323\n\n\nvec2 ePositions[N_E_POINTS] = vec2[](\n    vec2(0.0, 0.0),\n    vec2(0.0, 0.0),\n    vec2(0.9, 0.5),\n    vec2(0.5, -0.2),\n    vec2(0.2, 0.0),\n    vec2(-0.6, -0.4)\n);\n\nvec2 eNormals[N_E_POINTS] = vec2[](\n    vec2(cos(1.1*PI), sin(1.1*PI)),\n    vec2(cos(-0.1*PI), sin(-0.1*PI)),\n    vec2(cos(0.25*PI), sin(0.25*PI)),\n    vec2(cos(1.9*PI), sin(1.9*PI)),\n    vec2(cos(1.2*PI), sin(1.2*PI)),\n    vec2(cos(0.1*PI), sin(0.1*PI))\n);\n\nfloat eSizes[N_E_POINTS] = float[](\n    0.5,\n    0.7,\n    0.5,\n    0.4,\n    0.5,\n    1.0\n);\n\n\nvec2 slerp(vec2 v1, vec2 v2, float t)\n{\n    float theta = acos(dot(v1, v2));\n    return (sin((1.0-t)*theta)*v1 + sin(t*theta)*v2) / sin(theta);\n}\n\nvec2 sdfElement(vec2 p, vec2 ePos, vec2 eNormal, float eSize)\n{\n    vec2 v = p-ePos;\n    return vec2(dot(v, eNormal), exp(-dot(v,v)/(eSize*eSize)));\n}\n\nfloat sqr(in float x)\n{\n    return x*x;\n}\n\nvoid mixSdf(\n    in float s1,\n    in float s2,\n    in vec2 g1,\n    in vec2 g2,\n    in vec4 dg1, // d2/dx2 s1 (d/dx g1.x), d2/dydx s1 (d/dy g1.x), d2/dxdy s1 (d/dx g1.y), d2/dy2 s1 (d/dy g1.y)\n    in vec4 dg2, // d2/dx2 s2 (d/dx g2.x), d2/dydx s2 (d/dy g2.x), d2/dxdy s2 (d/dx g2.y), d2/dy2 s2 (d/dy g2.y)\n    in float w1,\n    in float w2,\n    out float s,\n    out vec2 g,\n    out vec4 dg)\n{   \n    float t = w2/(w1+w2);\n    float t2 = 1.0-t;\n    \n    float x1 = t*g2.x;\n    float x3 = g1.x;\n    float x5 = -t2;\n    float x6 = x3*x5;\n    float x7 = t*g2.y;\n    float x8 = g1.y;\n    float x9 = x5*x8;\n    float x10 = pow(sqr(x1+x6)+sqr(x7+x9), -0.5);\n    float x11 = x1-x3*t2;\n    float x12 = -t2*x8+x7;\n    float x13 = sqr(x11)+sqr(x12);\n    float x14 = pow(x13, -1.5);\n    float x15 = t*dg2.x-t2*dg1.x;\n    float x16 = -x11;\n    float x17 = t*dg2.y-t2*dg1.y;\n    float x18 = x11*x15+x12*x17;\n    float x19 = x13*x17;\n    float x20 = -x12;\n    float x21 = t*dg2.w-t2*dg1.w;\n    float x22 = x11*x17+x12*x21;\n    \n    s = 0.0;\n    g = x10*vec2(x1+x6, x7+x9);\n    dg = x14*vec4(x13*x15+x16*x18, x16*x22+x19, x18*x20+x19, x13*x21+x20*x22);\n}\n\nfloat weight1(vec2 v1, vec2 v2, float t)\n{\n    return (1.0-t) / length((1.0-t)*v1 + t*v2);\n}\n\nfloat weight2(vec2 v1, vec2 v2, float t)\n{\n    return (t) / length((1.0-t)*v1 + t*v2);\n}\n\nvec2 mixGradient(float w1, float w2, vec2 n1, vec2 n2)\n{\n    //float r = w1 / w2;\n    //float b = sqrt(1.0 / (r*r + 1.0 + 2.0*r*dot(n1, n2)));\n    //float a = b*r;\n    //return a*n1 + b*n2;\n    \n    //return slerp(n1, n2, w1/(w1+w2));\n    \n    float t = w2/(w1+w2);\n    float t2 = 1.0-t;\n    \n    \n    return weight1(n1, n2, t)*n1 + weight2(n1, n2, t)*n2;\n}\n\n\nvoid sdf(in vec2 p, out float s, out vec2 g, out vec4 dg)\n{   \n    vec2 s1 = sdfElement(p, ePositions[0], eNormals[0], eSizes[0]);\n    vec2 s2 = sdfElement(p, ePositions[1], eNormals[1], eSizes[1]);\n    vec2 s3 = sdfElement(p, ePositions[2], eNormals[2], eSizes[2]);\n\n#if 0\n    vec2 s = vec2(0.0, 0.0);\n    for (int i=0; i<2; ++i) {\n        vec2 se = sdfElement(p, ePositions[i], eNormals[i], eSizes[i]);\n        s.x += se.x * se.y;\n        //if (se.y > s.y)\n            //s.x = max(s.x, se.x);\n        s.y += se.y;\n    }\n    s.x /= s.y;\n#endif\n    \n    mixSdf(s1.x, s2.x, eNormals[0], eNormals[1], vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), s1.y, s2.y, s, g, dg);\n    mixSdf(s, s3.x, g, eNormals[2], vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0), s1.y+s2.y, s3.y, s, g, dg);\n}\n\nvec2 gradient(vec2 p)\n{\n    vec2 s1 = sdfElement(p, ePositions[0], eNormals[0], eSizes[0]);\n    vec2 s2 = sdfElement(p, ePositions[1], eNormals[1], eSizes[1]);\n    return mixGradient(s1.y, s2.y, eNormals[0], eNormals[1]);\n}\n\nvec3 color(float s)\n{\n    //float a = pow(1.0-exp(-d*d), 0.1);\n    float spacingInv = 1.0/0.1;\n    float a = pow(0.5-0.5*cos(s*spacingInv*2.0*PI), 0.15);\n    float b = sign(s);\n    \n    const vec3 baseColorPositive = vec3(0.8, 0.2, 0.1);\n    const vec3 baseColorNegative = vec3(0.2, 0.3, 0.7);\n    const vec3 incrColor = vec3(0.2, 0.7, 0.5);\n    vec3 baseColor = b*baseColorPositive + (1.0-b)*baseColorNegative;\n    \n    return a*(baseColor + clamp(s, -1.0, 1.0)*incrColor);\n}\n\nfloat pointsViz(vec2 p)\n{\n    for (int i=0; i<3; ++i) {\n        if (dot(p-ePositions[i], p-ePositions[i]) < 0.0002)\n            return 0.0;\n    }\n    return 1.0;\n}\n\nvec3 gradColor(vec2 g)\n{\n    float xp = max(dot(g, vec2(1.0, 0.0)), 0.0);\n    float xn = max(dot(g, vec2(-1.0, 0.0)), 0.0);\n    float yp = max(dot(g, vec2(0.0, 1.0)), 0.0);\n    float yn = max(dot(g, vec2(0.0, -1.0)), 0.0);\n    return xp*vec3(0.4, 1.0, 0.0) + xn*vec3(1.0, 0.0, 0.5) + yp*vec3(0.0, 0.0, 1.0) + yn*vec3(1.0, 0.5, 0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.yy;\n    \n    float rotSpeed = 0.3;\n    ePositions[0] = vec2(0.5*cos(iTime*rotSpeed), 0.5*sin(iTime*rotSpeed));\n    ePositions[1] = vec2(0.5*cos(iTime*rotSpeed+PI*0.666), 0.5*sin(iTime*rotSpeed+PI*0.666));\n    ePositions[2] = vec2(0.7*cos(iTime*rotSpeed+PI*1.333), 0.3*sin(iTime*rotSpeed+PI*1.333));\n    eNormals[0] = vec2(cos(1.1*PI-iTime*0.1), sin(1.1*PI-iTime*0.1));\n    eNormals[1] = vec2(cos(0.4*PI+iTime*0.13), sin(0.4*PI+iTime*0.13));\n    \n    float s;\n    vec2 g;\n    vec4 dg;\n    sdf(p, s, g, dg);\n    \n    //float s = sdf(p);\n    //vec2 g = gradient(p);\n    //float gm = 0.5+(length(g)-1.0)*10000.0;\n    \n    //fragColor = vec4(color(s)*pointsViz(p), 1.0);\n    fragColor = vec4(gradColor(g), 1.0)*pointsViz(p);\n    //fragColor = 0.5+vec4(dg.x, dg.y, dg.z, 1.0);\n    //fragColor = vec4(gm, gm, gm, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}