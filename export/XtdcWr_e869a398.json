{"ver":"0.1","info":{"id":"XtdcWr","date":"1533418270","viewed":705,"name":"[SH18] hand made","username":"zguerrero","description":"A hand, sorry for the long compilation time. Mouse rotate the camera.","likes":63,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","distancefield","hand","human","sculpt","sh18","anatomy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3zn","filepath":"/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","previewfilepath":"/media/ap/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float epsilon = 0.01;\nconst float pi = 3.14159265359;\nconst float halfpi = 1.57079632679;\nconst float twopi = 6.28318530718;\nconst vec3 color1 = vec3(0.25, 0.2, 0.2);\nconst vec3 color2 = vec3(1.0, 0.1, 0.1);\nconst vec3 color3 = vec3(1.0, 0.9, 0.9);\nconst vec3 lightColor = vec3(1.2, 1.1, 1.0);\nconst vec3 groundColor = vec3(0.3, 0.25, 0.2);\nconst vec3 backgroundColor = vec3(0.5, 0.5, 0.5);\nconst vec3 topColor = vec3(0.7, 0.8, 1.0);\n\n#define LightDir normalize(vec3(1.0, 0.75, 1.0))\n\nstruct FingerParams\n{\n    vec4 a;\n    vec4 b;\n    vec4 c;\n    vec4 d;\n    vec4 e;\n    vec4 quat;\n    vec4 lengths;\n}; \n \nmat2 rot(float a) \n{\n    vec2 s = vec2(cos(a), sin(a));\n\treturn mat2(s.y,s.x,-s.x,s.y);\t\n}\n\nfloat saturate(float f)\n{\n    return clamp(f, 0.0, 1.0);\n}\n\n//Quatertion Formula taken from http://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\nvec4 RotationToQuaternion(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float half_angle = angle * halfpi / 180.0;\n    vec2 s = sin(vec2(half_angle, half_angle + halfpi));\n    return vec4(axis * s.x, s.y);\n}\n\nvec3 Rotate(vec3 pos, vec4 quaternion)\n{\n    return pos + 2.0 * cross(quaternion.xyz, cross(quaternion.xyz, pos) + quaternion.w * pos);\n}\n\n//Distance Field function by iq :\n//https://iquilezles.org/articles/distfunctions\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r1, float r2, float m)\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - mix(r1, r2, clamp(length(pa) / m, 0.0, 1.0));\n}\n\nfloat box(vec3 pos, vec3 size)\n{\n\treturn length(max(abs(pos) - size, 0.0));\n}\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\n//taken from shane's desert canyon, originaly a modification of the smin function by iq\n//https://www.shadertoy.com/view/Xs33Df\nfloat smax(float a, float b, float s)\n{   \n    float h = clamp( 0.5 + 0.5*(a-b)/s, 0., 1.);\n    return mix(b, a, h) + h*(1.0-h)*s;\n}\n\nfloat finger(vec3 pos, FingerParams fp)\n{ \n    pos = Rotate(pos, fp.quat);\n    \n    float s1 = sdCapsule(pos, fp.a.xyz, fp.b.xyz, fp.a.w, fp.b.w, fp.lengths.x);\n    float s2 = sdCapsule(pos, fp.b.xyz, fp.c.xyz, fp.b.w, fp.c.w, fp.lengths.y);\n    float s3 = sdCapsule(pos, fp.c.xyz, fp.d.xyz, fp.c.w, fp.d.w, fp.lengths.z);\n    float s4 = sdCapsule(pos, fp.d.xyz, fp.e.xyz, fp.d.w, fp.e.w, fp.lengths.w);\n        \n\treturn smin(smin(smin(s1, s2, 0.1), s3, 0.075), s4, 0.05);\n}\n  \n/*\n#define f1Curve 2.3\n#define f1Length 1.1\n#define f1Size 0.34 \n#define f1A vec4(0.0, 0.0, 0.0, 0.1)\n#define f1B vec4(f1A.xyz + normalize(vec3(0.0, 0.0, 1.0).xyz) * 3.0, 1.25 * f1Size)\n#define f1C vec4(f1B.xyz + normalize(vec3(0.1, -0.2 * f1Curve, 1.0).xyz) * 0.8 * f1Length, 1.0 * f1Size)\n#define f1D vec4(f1C.xyz + normalize(vec3(0.1, -0.5 * f1Curve, 1.0).xyz) * 0.75 * f1Length, 0.9 * f1Size)\n#define f1E vec4(f1D.xyz + normalize(vec3(0.1, -1.25 * f1Curve, 1.0).xyz) * 0.7 * f1Length, 0.8 * f1Size)\n#define f1Quat RotationToQuaternion(vec3(-1.0, -8.0, 5.0), 15.0) \n#define f1Lengths vec4(length(f1B - f1A), length(f1C - f1B), length(f1D - f1C), length(f1E - f1D))\n*/\n\n#define f1A vec4(0,0,0,0.1)\n#define f1B vec4(0,0,3,0.425)\n#define f1C vec4(0.07961927,-0.3662486,3.796193,0.34)\n#define f1D vec4(0.1336378,-0.9874623,4.336379,0.306)\n#define f1E vec4(0.1589203,-1.714333,4.589203,0.29)\n#define f1Quat vec4(-0.01375867,-0.1100694,0.06879336,0.9914449)\n#define f1Lengths vec4(3,0.88,0.8250002,0.7699998)\n\n/*\n#define f2Curve 2.0\n#define f2Length 1.2\n#define f2Size 0.375 \n#define f2A vec4(vec3(0.0, 0.0, 0.0).xyz, 0.1)\n#define f2B vec4(f2A.xyz + normalize(vec3(0.0, 0.0, 1.0).xyz) * 3.0, 1.25 * f2Size)\n#define f2C vec4(f2B.xyz + normalize(vec3(0.0, -0.25 * f2Curve, 1.0).xyz) * 0.8 * f2Length, 1.0 * f2Size)\n#define f2D vec4(f2C.xyz + normalize(vec3(0.0, -0.5 * f2Curve, 1.0).xyz) * 0.75 * f2Length, 0.9 * f2Size)\n#define f2E vec4(f2D.xyz + normalize(vec3(0.0, -1.35 * f2Curve, 1.0).xyz) * 0.7 * f2Length, 0.7 * f2Size)\n#define f2Quat RotationToQuaternion(vec3(-1.0, -8.0, 5.0), 3.0) \n#define f2Lengths vec4(length(f2B - f2A), length(f2C - f2B), length(f2D - f2C), length(f2E - f2D))\n*/\n\n#define f2A vec4(0,0,0,0.1)\n#define f2B vec4(0,0,3,0.46875)\n#define f2C vec4(0,-0.4651021,3.930204,0.375)\n#define f2D vec4(0,-1.154531,4.619634,0.3375)\n#define f2E vec4(0,-2.007883,4.93569,0.25)\n#define f2Quat vec4(-0.002759293,-0.02207434,0.01379647,0.9996573)\n#define f2Lengths vec4(3,1.04,0.9750001,0.91)\n\n/*\n#define f3Curve 2.1\n#define f3Length 1.1\n#define f3Size 0.33\n#define f3A vec4(vec3(0.0, 0.0, 0.0).xyz, 0.1)\n#define f3B vec4(f3A.xyz + normalize(vec3(0.0, 0.0, 1.0).xyz) * 3.0, 1.25 * f3Size)\n#define f3C vec4(f3B.xyz + normalize(vec3(0.0, -0.25 * f3Curve, 1.0).xyz) * 0.8 * f3Length, 1.0 * f3Size)\n#define f3D vec4(f3C.xyz + normalize(vec3(0.0, -0.5 * f3Curve, 1.0).xyz) * 0.75 * f3Length, 0.9 * f3Size)\n#define f3E vec4(f3D.xyz + normalize(vec3(0.0, -1.25 * f3Curve, 1.0).xyz) * 0.7 * f3Length, 0.7 * f3Size)\n#define f3Quat RotationToQuaternion(vec3(-1.0, -8.0, 5.0), -10.0) \n#define f3Lengths vec4(length(f3B - f3A), length(f3C - f3B), length(f3D - f3C), length(f3E - f3D))\n*/\n\n#define f3A vec4(0,0,0,0.1)\n#define f3B vec4(0,0,3,0.4125)\n#define f3C vec4(0,-0.4090538,3.77915,0.33)\n#define f3D vec4(0,-1.006468,4.348116,0.297)\n#define f3E vec4(0,-1.726023,4.622232,0.22)\n#define f3Quat vec4(0.009187022,0.07349618,-0.04593511,0.9961947)\n#define f3Lengths vec4(3,0.8800001,0.8250002,0.77)\n\n/*\n#define f4Curve 1.9\n#define f4Length 0.9\n#define f4Size 0.3\n#define f4A vec4(vec3(0.2, -0.5, 0.4).xyz, 0.9)\n#define f4B vec4(f4A.xyz + normalize(vec3(0.0, 0.0, 1.0).xyz) * 2.3, 1.25 * f4Size)\n#define f4C vec4(f4B.xyz + normalize(vec3(-0.3, -0.25 * f4Curve, 1.0).xyz) * 0.8 * f4Length, 1.0 * f4Size)\n#define f4D vec4(f4C.xyz + normalize(vec3(-0.3, -0.5 * f4Curve, 1.0).xyz) * 0.75 * f4Length, 0.9 * f4Size)\n#define f4E vec4(f4D.xyz + normalize(vec3(-0.3, -1.0 * f4Curve, 1.0).xyz) * 0.7 * f4Length, 0.7 * f4Size)\n#define f4Quat RotationToQuaternion(vec3(-0.2, -0.8, 1.0), -45.0) \n#define f4Lengths vec4(length(f4B - f4A), length(f4C - f4B), length(f4D - f4C), length(f4E - f4D))\n*/\n\n#define f4A vec4(0.2,-0.5,0.4,0.9)\n#define f4B vec4(0.2,-0.5,2.7,0.375)\n#define f4C vec4(0.01168381,-0.7981673,3.327721,0.3)\n#define f4D vec4(-0.1317746,-1.252452,3.805915,0.27)\n#define f4E vec4(-0.2189538,-1.804587,4.096512,0.2)\n#define f4Quat vec4(0.05904933,0.2361973,-0.2952467,0.9238795)\n#define f4Lengths vec4(2.3,0.7199999,0.675,0.63)\n\n/*\n#define f5Curve 2.2\n#define f5Length 0.9\n#define f5Size 0.4 \n#define f5A vec4(vec3(-0.1, 0.0, 0.0).xyz, 1.25)\n#define f5B vec4(f5A.xyz + normalize(vec3(0.0, 0.0, 1.0).xyz) * 1.0, 1.6 * f5Size)\n#define f5C vec4(f5B.xyz + normalize(vec3(0.0, -0.25 * f5Curve, 1.0).xyz) * 0.8 * f5Length, 1.1 * f5Size)\n#define f5D vec4(f5C.xyz + normalize(vec3(0.0, -0.5 * f5Curve, 1.0).xyz) * 0.75 * f5Length, 0.9 * f5Size)\n#define f5E vec4(f5D.xyz + normalize(vec3(0.0, -1.0 * f5Curve, 1.0).xyz) * 0.7 * f5Length, 0.7 * f5Size)\n#define f5Quat RotationToQuaternion(vec3(0.15, -1.0, 0.8), 150.0) \n#define f5Lengths vec4(length(f5B - f5A), length(f5C - f5B), length(f5D - f5C), length(f5E - f5D))\n*/\n\n#define f5A vec4(-0.1,0,0,1.25)\n#define f5B vec4(-0.1,0,1,0.64)\n#define f5C vec4(-0.1,-0.3469815,1.630875,0.44)\n#define f5D vec4(-0.1,-0.846441,2.08493,0.36)\n#define f5E vec4(-0.1,-1.419972,2.345625,0.28)\n#define f5Quat vec4(0.112371,-0.7491399,0.5993119,0.2588191)\n#define f5Lengths vec4(1,0.72,0.6750001,0.6299999)\n\n#define quat0 vec4(0.7071068, 0.0, 0.0, 0.7071068) //RotationToQuaternion(vec3(1.0, 0.0, 0.0), 90.0)\n#define quat1 vec4(0.3420202, 0.0, 0.0, 0.9396926) //RotationToQuaternion(vec3(1.0, 0.0, 0.0), 40.0)\n\nvec2 distfunc(vec3 pos)\n{ \n    vec3 rpos = pos;\n    rpos += vec3(0.0, 2.0, 0.0);\n\trpos = Rotate(rpos, quat0);\n    \n    float arm = sdCapsule(rpos * vec3(1.0, 1.2, 1.0), vec3(-0.2, 0.0, 0.0), vec3(0.0, 0.0, -3.5), 0.7, 1.5, 5.0);\n    \n    rpos = Rotate(rpos, quat1);\n    \n    vec3 p1 = rpos;\n    vec3 p2 = rpos + vec3(0.4, -0.1, 0.0); \n    vec3 p3 = rpos + vec3(0.8, 0.0, 0.0);  \n    vec3 p4 = rpos + vec3(1.0, 0.1, 0.0); \n    vec3 p5 = rpos + vec3(-0.3, 0.6, -0.7);\n    \n    FingerParams fingerParams1;\n    fingerParams1.a = f1A;\n    fingerParams1.b = f1B;\n    fingerParams1.c = f1C;\n    fingerParams1.d = f1D;\n    fingerParams1.e = f1E;\n    fingerParams1.quat = f1Quat;\n    fingerParams1.lengths = f1Lengths;\n        \n    float f1 = finger(p1, fingerParams1);\n    \n    FingerParams fingerParams2;\n    fingerParams2.a = f2A;\n    fingerParams2.b = f2B;\n    fingerParams2.c = f2C;\n    fingerParams2.d = f2D;\n    fingerParams2.e = f2E;\n    fingerParams2.quat = f2Quat;\n\tfingerParams2.lengths = f2Lengths;\n    \n    float f2 = finger(p2, fingerParams2);\n    \n    FingerParams fingerParams3;\n    fingerParams3.a = f3A;\n    fingerParams3.b = f3B;\n    fingerParams3.c = f3C;\n    fingerParams3.d = f3D;\n    fingerParams3.e = f3E;\n    fingerParams3.quat = f3Quat;\n\tfingerParams3.lengths = f3Lengths;\n    \n    float f3 = finger(p3, fingerParams3);\n        \n    FingerParams fingerParams4;\n    fingerParams4.a = f4A;\n    fingerParams4.b = f4B;\n    fingerParams4.c = f4C;\n    fingerParams4.d = f4D;\n    fingerParams4.e = f4E;\n    fingerParams4.quat = f4Quat;\n    fingerParams4.lengths = f4Lengths;\n    \n    float f4 = finger(p4, fingerParams4);\n    \n    FingerParams fingerParams5;\n    fingerParams5.a = f5A;\n    fingerParams5.b = f5B;\n    fingerParams5.c = f5C;\n    fingerParams5.d = f5D;\n    fingerParams5.e = f5E;\n    fingerParams5.quat = f5Quat;\n    fingerParams5.lengths = f5Lengths;\n    \n    float f5 = finger(p5, fingerParams5);\n    \n    float fingers = min(min(min(f1, f2), f3), f4);\n    \n    vec3 mainPos = rpos * vec3(1.0, 1.4, 1.0);\n    float main = sdCapsule(mainPos, vec3(0.0, 0.0, 0.0), vec3(0.15, -0.5, 2.25), 0.5, 1.0, 2.25);\n    main = smin(main, sdCapsule(mainPos, vec3(-0.5, 0.0, 1.0), vec3(-1.0, -0.25, 2.25), 0.5, 1.0, 2.5), 0.5);\n    main = smin(main, sdSphere(rpos + vec3(-0.2, 0.7, -0.3), 0.7), 0.1);\n    \n    float hand = smin(smin(smin(main, fingers, 0.2), f5, 0.9), arm, 0.5);\n    \n    float d = textureLod(iChannel2, (pos.xy - pos.z*0.2) * vec2(0.2, 0.1) + vec2(0.1, 0.0), 0.0).x;\n    hand += d * 0.135;\n    \n    float sphere = sdSphere(pos + vec3(0.45, -1.35, 0.0), 2.0);\n    \n    float pedestal = box(pos + vec3(0.0, 12.0, 0.0), vec3(3.0, 6.0, 3.0));\n    pedestal = min(pedestal, box(pos + vec3(0.0, 12.5, 0.0), vec3(4.0, 6.0, 4.0)));\n    \n    return vec2(smin(min(hand, sphere), pedestal, 0.5), sphere);\n}\n\nvec4 rayMarch(vec3 rayDir, vec3 cameraOrigin)\n{\n    const int maxItter = 100;\n\tconst float maxDist = 30.0;\n    \n    float totalDist = 0.0;\n\tvec3 pos = cameraOrigin;\n\tvec2 dist = vec2(epsilon, 1.0);\n    float accum = 0.0;\n    \n    for(int i = 0; i < maxItter; i++)\n\t{\n       \tdist = distfunc(pos);\n        \n\t\ttotalDist += dist.x; \n\t\tpos += dist.x * rayDir;\n        accum += smoothstep(2.0, 0.0, dist.y);\n        \n        if(dist.x < epsilon || totalDist > maxDist)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n    \n    return vec4(dist.x, totalDist, saturate(accum / 100.0), dist.y);\n}\n\n//Original From https://www.shadertoy.com/view/Xds3zN\nfloat AO(vec3 pos, vec3 n)\n{\n\tfloat res = 0.0;\n    \n\tfor( int i=1; i<4; i++ )\n\t{\n\t\tvec3 aopos = pos + n*0.15*float(i);\n\t\tfloat d = distfunc(aopos).x;\n\t\tres += d;\n\t}\n\n\treturn clamp(res, 0.0, 1.0);   \n}\n\n//Original From https://www.shadertoy.com/view/Xds3zN\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\n//Original From https://www.shadertoy.com/view/Xds3zN\nfloat softshadow(vec3 pos, vec3 lDir)\n{\n\tfloat res = 1.0;\n    float t = 0.25;\n    \n    for( int i=0; i<8; i++ )\n    {\n\t\tfloat h = distfunc( pos + lDir*t ).x;\n        res = min( res, 2.0*h/t );\n        t += clamp( h, 0.02, 1.0 );\n        if( h<0.001 || t>5.0 ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\n//Original From https://www.shadertoy.com/view/Xds3zN\nvec3 calculateNormals(vec3 pos)\n{\n\tvec2 eps = vec2(0.0, epsilon);\n\tvec3 n = normalize(vec3(\n\tdistfunc(pos + eps.yxx).x - distfunc(pos - eps.yxx).x,\n\tdistfunc(pos + eps.xyx).x - distfunc(pos - eps.xyx).x,\n\tdistfunc(pos + eps.xxy).x - distfunc(pos - eps.xxy).x));\n\treturn n;\n}\n\nvec3 lighting(vec3 n, vec3 rayDir, vec3 reflectDir, vec3 pos, vec3 lDir)\n{\n    float diff = max(0.0, dot(lDir, n));\n    float spec = pow(max(0.0, dot(reflectDir, lDir)), 50.0);\n    float rim = (1.0 - max(0.0, dot(-n, rayDir)));\n\n    return vec3(diff, spec, rim); \n}\n\nvec3 triPlanar(vec3 pos, vec3 norm, sampler2D tex)\n{\n    norm = abs(norm);\n    vec3 t1 = texture(tex, pos.yz).xyz * norm.x;\n    vec3 t2 = texture(tex, pos.zx).xyz * norm.y;\n    vec3 t3 = texture(tex, pos.xy).xyz * norm.z;\n    \n    return t1 + t2 + t3;\n}\n\nvec3 background(vec3 rayDir, vec3 sun)\n{\n    vec3 r = rayDir;\n    r.xz *= .1;\n    r.y *= .025;\n    float t1 = texture(iChannel2, vec2(abs(atan(r.x, r.z)) + iTime * .01, r.y)).x;\n    r *= 2.;\n    float t2 = texture(iChannel2, vec2(abs(atan(r.x, r.z)) - iTime * .025, r.y) + t1 * 0.1).x;\n    r *= 2.;\n    float t3 = texture(iChannel2, vec2(abs(atan(r.x, r.z)) + iTime * .05, r.y) + t2 * 0.1).x;\n    \n    float t = (t1 + t2 + t3) / 3.0;\n        \n    vec2 m = smoothstep(vec2(-0.5, 0.0), vec2(0.0, 0.75), rayDir.yy);\n    return mix(mix(groundColor, backgroundColor + t, m.x), topColor, m.y) + sun;\n}\n\nvec3 ambiant(vec3 rayDir, vec3 sun)\n{\n    vec2 m = smoothstep(vec2(-.5, 0.), vec2(.0, .75), rayDir.yy);\n    return mix(mix(groundColor, backgroundColor, m.x), topColor, m.y) + sun;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    \n    vec2 m;\n    \n    m = iMouse.xy / iResolution.xy;\n    m.x *= 720.;\n    m.y = (m.y * 2. - 1.) * -50.;\n\n    m.x += iTime * 20.;\n    m.y += sin(iTime * 0.) * 20.;\n        \n    vec3 cameraOrigin = vec3(0., -2., 14.);\n    cameraOrigin = Rotate(cameraOrigin, RotationToQuaternion(vec3(0.0, 1.0, 0.0), m.x));\n    vec3 v = Rotate(vec3(1.0, 0.0, 0.0), RotationToQuaternion(vec3(0.0, 1.0, 0.0), m.x));\n    cameraOrigin = Rotate(cameraOrigin, RotationToQuaternion(v, m.y));\n        \n\tvec3 cameraTarget = vec3(0.0, -2.0, 0.0);\n    \n\tvec2 screenPos = uv * 2.0 - 1.0;\n    \n\tscreenPos.x *= iResolution.x/iResolution.y;\n    \n    mat3 cam = setCamera(cameraOrigin, cameraTarget, 0.);\n    \n    vec3 rayDir = cam*normalize(vec3(screenPos.xy, 2.0));\n    vec4 dist = rayMarch(rayDir, cameraOrigin);\n             \n    vec3 light = normalize(Rotate(LightDir, RotationToQuaternion(vec3(0.0, 1.0, 0.0), iTime * -50.0))); \n    vec3 sun = (1.0 - clamp(length(rayDir - light)*0.5, 0.0, 1.0)) * lightColor * 0.25;\n    \n    vec3 bg = background(rayDir, sun);\n    vec3 res;\n\n\tif(dist.x < epsilon)\n    {\n        vec3 pos = cameraOrigin + dist.y*rayDir;\n        vec3 n = calculateNormals(pos);\n        vec3 t = triPlanar(pos*0.2, n.xyz, iChannel1);\n        float tm = (t.x + t.y + t.z)/3.0; \n        float tr = smoothstep(0.7, 1.0, tm) + 0.25 * tm;\n        \n        n = normalize(n + (tm - 0.5) * 0.5);\n        \n        vec3 mask;\n        mask.x = 1.0 - saturate(dist.w*3.0);\n        mask.yz = smoothstep(vec2(-6.1, -14.0), vec2(-5.8, -5.0), pos.yy);\n        \n        vec3 r = reflect(rayDir, n.xyz);\n\t\tvec3 l = lighting(n.xyz, rayDir, r, pos, light);\n        vec3 refl = texture(iChannel0, r).xyz;\n        \n        vec3 refr = texture(iChannel0, normalize(refract(rayDir, n, 1.0/1.4))).xyz;\n        \n        float shadow = softshadow(pos, light);\n        l.xy *= shadow;\n        l.y *= tr;\n        refl *= tr;\n        \n        float ao = AO(pos, n.xyz);\n        ao = saturate(ao + l.x + mask.x*0.5);\n        \n        vec3 alb = mix(color1, color2, mask.x);\n        alb *= 0.5 + 0.5 * tm;\n        alb = mix(color3 * tm, alb, mask.y);\n        \n        vec3 amb = ambiant(n, sun) * ao;\n        vec3 col = alb * amb;\n        \n        col += alb * l.x * lightColor; //Diffuse\n\t\tcol += (smoothstep(0.3, 0.9, l.z) * (alb*0.75 + 0.25) + l.z * 0.25) * mask.y * amb; //Rim Light\n        col += (mix(refl*0.75, refl, mask.x) + l.y) * ao * (0.5 + l.z); //Reflection\n        col += refr * ao * l.z * mask.x;\n        \n        vec2 v = vec2(0.25, 0.5) + vec2(0.75, 0.5) * smoothstep(vec2(0.0, 0.0), vec2(0.1 ,0.3), l.zz);\n        col *= mix(1.0, mix(v.x, v.y, mask.x), mask.y);\n        \n        res = col;//mix(bg, vec3(col), mask.z);\n    }\n    else\n    {\n        res = bg; \n    }\n    \n    res += saturate(dist.z - 0.05) * color2 * 2.0;\n\tfragColor = vec4(res, 1.0) * smoothstep(3.0, 0.0, length(screenPos));\n}","name":"Image","description":"","type":"image"}]}