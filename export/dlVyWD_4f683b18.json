{"ver":"0.1","info":{"id":"dlVyWD","date":"1700245420","viewed":102,"name":"Fractaloscopic + audio (mic-in)","username":"MV10","description":"Changed the mouse code to use time-smoothed audio (BufferA mic-in).\nSwap lines 57 and 59 (with audio) to see why I wanted smoothed data.\nCheck [url=https://www.shadertoy.com/view/DlVcDD]this[/url] to see the smoothed data.\n","likes":4,"published":1,"flags":36,"usePreview":0,"tags":["fractal","audio","kaleidescope"],"hasliked":0,"parentid":"4lXyWS","parentname":"Fractaloscopic"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//----------------------------------------------------------------\n// Fractaloscopic.glsl                               by Gerd Platl                    \n//  v1.0   2017-09-22 \n//  v1.1   2018-02-27  mouse.x -> zooming\n// Fractal Colors meets Koleidoscope...\n// Switch to fullscreen, enjoy the koleidoscopic beauty and \n// explore undiscovered forms of appearance with your mouse.\n// tags: fractal, koleidoscope, flower, colors, discover\n//----------------------------------------------------------------\n\n#define time iTime\n#define resolution iResolution\n\n//----------------------------------------------------------------\n// Koleidoscope by ackleyrc: https://www.shadertoy.com/view/llXcRl \n//----------------------------------------------------------------\n\nconst float PI = 3.14159265359;\n\n// mv10 - moved these to main(), more fun if NUM_SIDES changes...\nfloat NUM_SIDES;\nfloat KA;\n\n\n//----------------------------------------------------------------\n// transformation to koleidoscopic coordinates\n//----------------------------------------------------------------\nvoid koleidoscope(inout vec2 uv)\n{\n  // get the angle in radians of the current coords relative to origin (i.e. center of screen)\n  float angle = atan (uv.y, uv.x);\n  // repeat image over evenly divided rotations around the center\n  angle = mod (angle, 2.0 * KA);\n  // reflect the image within each subdivision to create a tilelable appearance\n  angle = abs (angle - KA);\n  // rotate image over time\n  angle += 0.1*time;\n  // get the distance of the coords from the uv origin (i.e. center of the screen)\n  float d = length(uv); \n  // map the calculated angle to the uv coordinate system at the given distance\n  uv = d * vec2(cos(angle), sin(angle));\n}\n//----------------------------------------------------------------\n// equal to koleidoscope, but more compact \n//----------------------------------------------------------------\nvoid smallKoleidoscope(inout vec2 uv)\n{\n  float angle = abs (mod (atan (uv.y, uv.x), 2.0 * KA) - KA) + 0.1*time;\n  uv = length(uv) * vec2(cos(angle), sin(angle));\n}\n//----------------------------------------------------------------\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n    NUM_SIDES = 4.0 + (clamp(sin(time), -0.2, 0.2) * 4.0);\n    KA = PI / NUM_SIDES;\n\n    vec2 uv = 12.0*(2.0 * fragCoord.xy / resolution.xy - 1.0);\n    uv.x *= resolution.x / resolution.y;\n\n    // mv10 - replace the mouse input with audio data\n    vec2 mouse = vec2(texture(iChannel0, vec2(0.6, resolution.y - 0.5)).y);\n    // mv10 - use this instead to see how spazzy it gets without smoothing\n    //vec2 mouse = vec2(texture(iChannel0, vec2(0.1, resolution.y - 0.5)).x);\n\n    //vec2 mouse = iMouse.xy / resolution.xy;\n    uv *= 0.1+mouse.x;\n\n    //koleidoscope(uv);\n    smallKoleidoscope(uv);\n\n    // Fractal Colors by Robert Sch√ºtze (trirop): http://glslsandbox.com/e#29611\n    vec3 p = vec3 (uv, mouse.x);\n    for (int i = 0; i < 44; i++)\n        p.xzy = vec3(1.3,0.999,0.678)*(abs((abs(p)/dot(p,p)-vec3(1.0,1.02,mouse.y*0.4))));\n\n    fragColor = vec4(p,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// See Audio History Texture Smoothed\n// https://www.shadertoy.com/view/DlVcDD\n\n#define LOD 0\n\n// number of rows of history data to average with current-frame sample\n#define samples 15\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // sigh ... fragCoord.y isn't 0-to-resolution, it's 0.5 to resolution minus 0.5\n\n    // top row is new (current) audio data\n    if(fragCoord.y == iResolution.y - 0.5)\n    {\n        vec2 uv = fragCoord / iResolution.xy;\n\n        // sample the range twice, once for each half\n        float freq = (uv.x - step(uv.x, 0.5) * 0.5) * 2.0;\n        float fft = texture(iChannel1, vec2(freq, 0.5)).x;\n\n        // left/red is FFT data as Shadertoy provides it\n        if(uv.x < 0.5)\n        {\n            fragColor = vec4(fft, 0.0, 0.0, 1.0);\n        }\n        \n        // right/green is smoothed (averaged) data; the\n        // current sample and history rows on the left half\n        // are averaged and copied to the right half; keep in\n        // mind the top row of iChannel0 is the previous frame's\n        // current data, not what will be output by the first half\n        // of the if/else block above.\n        else\n        {\n            int x = int((uv.x - 0.5) * iResolution.x);\n            float sum = fft;\n            for(int y = 0; y < samples; y++)\n                sum += texelFetch(iChannel0, ivec2(x, int(iResolution.y) - y), LOD).r;\n\n            float averaged = sum / float(samples + 1);\n            fragColor = vec4(0.0, averaged, 0.0, 1.0);\n        }\n    }\n\n    // subsequent rows are history data\n    else\n    {\n        // copy from one row above into the current row\n        ivec2 xy = ivec2(fragCoord.x, fragCoord.y + 1.0);\n        fragColor = texelFetch(iChannel0, xy, LOD);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}