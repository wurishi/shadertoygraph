{"ver":"0.1","info":{"id":"llGXRh","date":"1482784050","viewed":200,"name":"Basic : Descartes","username":"Gijs","description":"Use your mouse.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["descartes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 Scale(vec2 p){\n    float MinRes = min(iResolution.y,iResolution.x);\n\treturn (p.xy*2.-iResolution.xy)/MinRes*2.;\n}\n\nvec2 complexMultiply(vec2 a, vec2 b){\n    return vec2(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x);\n}\n\nvec2 complexSqrt(vec2 z){\n    float r = sqrt(length(z));\n    float a = atan(z.y,z.x)*.5;\n    return r*vec2(cos(a),sin(a));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 sp = Scale(fragCoord);\n    \n\tfloat MinRes = min(iResolution.y,iResolution.x);\n    float PointEpsilon = 20./MinRes;\n    float  LineEpsilon =  4./MinRes;\n    \n    //midpoint circles\n    vec2 m1 = Scale(iMouse.xy);\n    vec2 m2 = vec2(-.5, .5);\n    vec2 m3 = vec2(-.5,-.5);\n    \n    //distance from i to next\n    float d1 = distance(m1,m2);\n    float d2 = distance(m2,m3);\n    float d3 = distance(m3,m1);\n    \n    //radius circles\n    float r1 = ( d1-d2+d3)*.5;\n    float r2 = ( d1+d2-d3)*.5;//d1-r1\n    float r3 = (-d1+d2+d3)*.5;//d3-r1\n    \n    //tangets points between i to next\n    vec2 t1 = m1+(m2-m1)/d1*r1;\n    vec2 t2 = m2+(m3-m2)/d2*r2;\n    vec2 t3 = m3+(m1-m3)/d3*r3;\n    \n    //curvature circles\n    float k1 = 1./r1;\n    float k2 = 1./r2;\n    float k3 = 1./r3;\n    \n    //curvature descartes circles\n    float k4 = k1+k2+k3+2.*sqrt(k1*k2+k2*k3+k3*k1);//+\n    float k5 = k1+k2+k3-2.*sqrt(k1*k2+k2*k3+k3*k1);//-\n    \n    //radius descartes circles \n    float r4 =     1./k4;\n    float r5 = abs(1./k5);\n    \n    //descarte circle midpoint, surprisingly difficult...\n    vec2 m4 = (m1*k1 \n             + m2*k2 \n             + m3*k3 \n             - 2.*complexSqrt(\n                 complexMultiply(m1,m2)*k1*k2 \n               + complexMultiply(m2,m3)*k2*k3 \n               + complexMultiply(m1,m3)*k1*k3 \n             ))/k4;//-\n    \n    vec2 m5 = (m1*k1 \n             + m2*k2 \n             + m3*k3 \n             + 2.*complexSqrt(\n                 complexMultiply(m1,m2)*k1*k2 \n               + complexMultiply(m2,m3)*k2*k3 \n               + complexMultiply(m1,m3)*k1*k3 \n             ))/k5;//+\n\n    vec3 col = vec3(.2);\n    \n\n    //Color radius green\n    float rdis = 1e20;\n    rdis = min(rdis,abs(distance(sp,m1)-r1));\n\trdis = min(rdis,abs(distance(sp,m2)-r2));\n    rdis = min(rdis,abs(distance(sp,m3)-r3));\n    rdis = min(rdis,abs(distance(sp,m4)-r4));\n    rdis = min(rdis,abs(distance(sp,m5)-r5));\n    float rs = smoothstep(0.,LineEpsilon,rdis);\n\n    col = mix(vec3(.25,.75,.25),col,rs);\n    \n    //Color midpoints red\n    float mdis = 1e20;\n    mdis = min(mdis,distance(m1,sp));\n\tmdis = min(mdis,distance(m2,sp));\n    mdis = min(mdis,distance(m3,sp));\n    mdis = min(mdis,distance(m4,sp));\n    mdis = min(mdis,distance(m5,sp));\n    float ms = smoothstep(0.,PointEpsilon,mdis);\n    col = mix(vec3(.75,.25,.25),col,ms);\n    \n    //Color tangets blue\n    float tdis = 1e20;\n    tdis = min(tdis,distance(t1,sp)); \n\ttdis = min(tdis,distance(t2,sp)); \n    tdis = min(tdis,distance(t3,sp)); \n    float ts = smoothstep(0.,PointEpsilon,tdis);\n\tcol = mix(vec3(.25,.25,.75),col,ts);\n    \n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}