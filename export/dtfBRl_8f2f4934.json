{"ver":"0.1","info":{"id":"dtfBRl","date":"1693323173","viewed":38,"name":"name of shader","username":"plitka42","description":"describe","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nconst float heightMax = 1.0;\n\nfloat getSphere( vec2 fragCoord, vec2 pos, float radius, float hk )\n{\n    float d = length( fragCoord - pos ) / radius;\n    if ( d > 1.0 )\n        return 0.0;\n    return sqrt( 1.0 - d*d ) * hk;\n}\n\nfloat readHeightMap( vec2 fragCoord )\n{\n   // return texture(iChannel0,fragCoord/iResolution.xy).r;\n    float Result = 0.0;\n    vec2 Offset = iResolution.xy/4.0;\n    Result = max( Result, getSphere( fragCoord, iResolution.xy/2.0, 70.0, 1.0f ) );     \n    //Result = max( Result, getSphere( fragCoord, vec2( 200, 150 ) + Offset, 70.0, 1.0 ) );\n    //Result = max( Result, getSphere( fragCoord, vec2( 250.0, 200.0 ) + Offset, 80.0, 1.0 ) );\n    //Result = max( Result, getSphere( fragCoord, vec2( 270, 110 ) + Offset, 60.0, 1.0 ) );\n    Result = max( Result, getSphere( fragCoord, vec2( 160, 220 ) + Offset, 80.0, 1.0 ) );\n    return Result;\n}\n\nvec3 readNormal( vec2 fragCoord )\n{\n    float HeightL = readHeightMap( fragCoord - vec2( 1.5, 0.0 ) );\n    float HeightR = readHeightMap( fragCoord + vec2( 1.5, 0.0 ) );\n    \n    float HeightB = readHeightMap( fragCoord - vec2( 0.0, 1.5 ) );\n    float HeightT = readHeightMap( fragCoord + vec2( 0.0, 1.5 ) );\n        \n    return normalize( vec3( HeightL - HeightR, 0.01, HeightB - HeightT ) );\n}\n\nfloat visible( vec3 a, vec3 b)\n{\n    vec3 dir = normalize( b - a );\n    float md = max( iResolution.x, iResolution.y ) * 0.7;\n    float Step = 10.0;\n    for ( float d = 0.0; d < md; d += Step )\n    {\n        if ( a.y + dir.y * d > heightMax )\n            return 1.0;\n        \n        vec3 p = a + dir * d;\n\n        if ( readHeightMap( p.xz ) > p.y + dir.y*2.0 + 0.0 )\n            return 0.0;\n    }\n    return 1.0;\n}\n\nfloat getShadow( vec2 fragCoord, vec3 SunPos, float sunRadius )\n{\n    vec3 Pos = vec3( fragCoord.x, readHeightMap( fragCoord ), fragCoord.y );\n    vec3 dir = normalize( SunPos - Pos );\n    vec3 dirx = cross( dir, vec3( 0.0, 1.0, 0.0 ) );\n    vec3 diry = normalize( cross( dir, dirx ) );\n    float radx = sunRadius * 5.0;\n    float rady = sunRadius * 0.01;\n    \n    float Summ = 0.0;\n    \n    Summ += visible( Pos, SunPos ) * 4.0;\n\n    Summ += visible( Pos, SunPos - dirx * radx * 0.5 - diry * rady * 0.5 ) * 3.0;\n    Summ += visible( Pos, SunPos - dirx * radx * 0.5 + diry * rady * 0.5 ) * 3.0;\n    Summ += visible( Pos, SunPos + dirx * radx * 0.5 - diry * rady * 0.5 ) * 3.0;\n    Summ += visible( Pos, SunPos + dirx * radx * 0.5 + diry * rady * 0.5 ) * 3.0;\n    \n    Summ += visible( Pos, SunPos - dirx * radx * 0.5 ) * 2.0;\n    Summ += visible( Pos, SunPos + dirx * radx * 0.5 ) * 2.0;\n    Summ += visible( Pos, SunPos - diry * rady * 0.5 ) * 2.0;\n    Summ += visible( Pos, SunPos + diry * rady * 0.5 ) * 2.0;\n    \n    Summ += visible( Pos, SunPos - dirx * radx );  \n    Summ += visible( Pos, SunPos + dirx * radx );\n    Summ += visible( Pos, SunPos - diry * rady ); \n    Summ += visible( Pos, SunPos + diry * rady );\n\n    return Summ / ( 4.0 + 12.0 + 8.0 + 4.0 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float Height = readHeightMap( fragCoord );\n    vec3 SunPos = vec3( iMouse.x, 2.0, iMouse.y );\n    vec3 SunDir = normalize( SunPos - vec3( fragCoord.x, Height, fragCoord.y ) );\n    float SunRad = 20.0;\n    \n    float Shadow = getShadow( fragCoord, SunPos, SunRad );\n\n    //vec3 Color = vec3( 0.5, 0.5, 0.5 ) * Shadow;//0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    vec3 Normal = readNormal( fragCoord );\n    vec3 Color = vec3( pow( dot( Normal, SunDir ), 0.25 ) ) * Shadow;\n    //vec3 Color = Normal;\n    //vec3 Color = vec3( Shadow );\n   \n   //vec3 Color = vec3( Height );\n        \n    // Output to screen\n    fragColor = vec4(Color,1.0);\n}","name":"Image","description":"","type":"image"}]}