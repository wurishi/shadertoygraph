{"ver":"0.1","info":{"id":"dl3fzl","date":"1701468550","viewed":49,"name":"Ballach Fixed Point Theory","username":"MisterSirCode","description":"A visual graph of how infinite cosines spirals towards / approaches \"Dotties Number\" (~0.7390851...). This is otherwise known as the Ballach Fixed Point Theory\n\nRed is the number line, Green is cos(x), Blue is the Y = X line.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["graph","point","constant","fixed","approach","ballach","dotties"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float line(vec2 p, vec2 a, vec2 b) {\n\tvec2 ba = b - a;\n\tvec2 pa = p - a;\n\tfloat h = clamp(dot(pa, ba) / dot(ba, ba), 0., 1.);\n\treturn length(pa - h * ba);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float pix = (1.0 / iResolution.y) * 2.0;\n    vec2 uv = (2.0 * fragCoord - vec2(iResolution.x, 50)) / iResolution.y;\n    float col = 1.0;\n    vec2 start;\n    if (iMouse.z > 0. && iMouse.w < 0.)\n        start = (2.0 * iMouse.xy - vec2(iResolution.x, 50)) / iResolution.y;\n    else\n        start = vec2(sin(iTime), cos(iTime) / 2.0 + 1.0);\n    float tc = start.x;\n    vec2 ta = vec2(tc, start.y);\n    vec2 tb = vec2(tc, cos(tc));\n    bool isUp = true;\n    for (int i = 0; i < 32; i++) {\n        float lineCol = line(uv, ta, tb);\n        col = min(lineCol, col);\n        if (isUp) {\n            ta.y = cos(tc);\n            tb.x = cos(tc);\n            tc = cos(tc);\n        } else {\n            ta.x = tc;\n            tb.y = cos(tc);\n        }\n        isUp = !isUp;\n    }\n    vec3 outColor = vec3(0);\n    //if (length(uv.x) < pix || length(uv.y) < 2.0 * pix) {\n    //    outColor.x = 1.0;\n    //}\n    //if (length(uv.y - cos(uv.x)) < 2.0 * pix) {\n    //    outColor.y = 1.0;\n    //}\n    //if ( < 2.0 * pix) {   \n    //    outColor.z = 1.0;\n    //} \n    //if (col < pix || length(uv - start) < 4.0 * pix) {\n    //    outColor = vec3(1.0);\n    //}\n    col = min(col, length(uv - start) - 4.0 * pix);\n    \n    outColor.x = (-pow(min(length(uv.x), length(uv.y)), 0.2)) * 1.2 + 1.0;\n    outColor.y = (-pow(length(uv.y - cos(uv.x)), 0.2)) * 1.2 + 1.0;\n    outColor.z = -pow(length(uv.y - uv.x), 0.2) * 1.2 + 1.0;\n    outColor = max(outColor, vec3(-pow(col, 0.2) * 1.2 + 1.0));\n    \n    \n    fragColor = vec4(outColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}