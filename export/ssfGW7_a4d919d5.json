{"ver":"0.1","info":{"id":"ssfGW7","date":"1616041723","viewed":77,"name":"Dipole Diffusion","username":"tovacinni","description":"Diffusion through scattering medium","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["diffusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Towaki Takikawa @yongyuanxi, CC 3.0\n\n// Instructions:\n//   Click anywhere on the image on the left to change the position of the laser\n//   Set ISOWAVE to 1 to turn on isocurves of the waves being propagated\n\n// Coefficients modeling: \n// Three-Dimensional Imaging Through Scattering Media based on Confocal Diffuse Tomography\n// Lindell et. al, https://davidlindell.com/publications/cdt\n\n#define ISOWAVE 0\n\nfloat PI = 3.14159;\n\n// scattering coefficient (1/scattering radius)\n#define sr 0.382\n#define mus (1.0 / sr) \n// absorption coefficient (1/absorption radius)\n#define ar 190.114\n#define mua (1.0 / ar)\n\n// reflection coefficient (integrated from Fresnel reflection coefficients, not shown)\n#define R 0.018\n\n// transport mean free path\n#define lstar (1.0/(mua*mus))\n\n// extrapolation distance\nfloat ze = ((2.0*lstar)/3.0) * (1.+R)/(1.-R);\n\n// slab thickness\nfloat zd = 2.54;\n \n// diffusion coefficient \nfloat D = 1.0 / (3.0 * (mus + mua));\n\n// speed of light (scaled down for human scale ;)\nfloat c = 5.0;\n\n// isotropic scattering distance\nfloat z0 = 1.0 / mus; \n\nfloat pos_dipole(int i) {\n    return 2.0 * float(i) * (zd + 2.0 * ze) + z0;\n}\n\nfloat neg_dipole(int i) {\n    return 2.0 * float(i) * (zd + 2.0 * ze) - (2.0 * ze) - z0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = mod(iTime, 5.0);\n    vec2 uv = fragCoord/iResolution.x;\n    float ratio = iResolution.x / iResolution.y;\n    vec2 laser = iMouse.xy / iResolution.x;\n    \n    float norm_factor = 1.0 / (2.0 * pow(4.0*PI*D*c, 1.5) * pow(time, 2.5));\n    float trans = exp(-mua * c * time - (distance(laser, uv)/(4.0*D*c*time)));\n    float dipole = 0.0;\n    for (int i=0; i<3; ++i) {\n        float zpos = zd - pos_dipole(i);\n        float zneg = zd - neg_dipole(i);\n        float norm = 4.0 * D * c * time;\n        dipole += zpos * exp(-pow(zpos, 2.0)/norm) - zneg * exp(-pow(zneg, 2.0)/norm);\n    }\n    vec3 col = vec3(norm_factor * trans * dipole) * 100.0;\n    \n#   if ISOWAVE\n        for (int i=0; i<50; ++i) {\n            if (abs(col.x - (float(i)*0.1)) < 0.00005) {\n                col.x = 1.0;\n            } \n        }\n#   endif\n     \n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}