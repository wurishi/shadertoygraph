{"ver":"0.1","info":{"id":"sdd3Rr","date":"1629064586","viewed":72,"name":"Timeline dot random","username":"xintrea","description":"Попытка сделать движение независимых точек в одном шейдере без использования проброса данных о параметрах точек между кадрами.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["time","sin","random","timeline"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float e=2.7182818284;\nconst float pi=3.1415926535;\n\n\n// Sinus based random\nfloat sinRand(float x)\n{\n    float y1=( sin(x+e) + cos(x*e) + sin(x/e) )/6.0+0.5;\n    float y2=sqrt(abs(sin(x*e))); // (mod( sin(mod(x, 11.0)) * 7.0, 7.0))/7.0;\n    float y3=sin(x*7.0)/2.0+0.5;\n    \n    return sqrt(y1*y2*y3);\n}\n\n\n// Return color by rand value 0...1\nvec4 sinRandColor(float randValue)\n{\n    bool isRedNote  =randValue>0.08 && randValue<0.16 ? true:false;\n    bool isGreenNote=randValue>0.24 && randValue<0.48 ? true:false;\n    bool isBlueNote =randValue>0.48 && randValue<0.96 ? true:false;\n\n    if(isRedNote)\n    {\n        return vec4( 1.0, 0.0, 0.0, 1.0 );\n    }\n    if(isGreenNote)\n    {\n        return vec4( 0.0, 1.0, 0.0, 1.0 );\n    }\n    if(isBlueNote)\n    {\n        return vec4( 0.2, 0.8, 1.0, 1.0 );\n    }\n\n    return vec4( vec3(0.0), 0.0 );\n}\n\n\nvec4 showLines(vec2 uvPixelPosition)\n{\n    const float timeStep=0.1;\n    const float timeWidth=0.002;\n\n    float timeSpeed=0.1;\n    float geometricSpeed=2.5;\n\n    vec4 color=vec4( 0.0 );\n    \n    // First color\n    // 1.0-uv.x for move from left to right\n    float seed=iTime*timeSpeed + (1.0-uvPixelPosition.x)*geometricSpeed;\n    float randValue=sinRand( seed );\n\n    // Time graduate filter\n    float modTime=mod(seed, timeStep);\n    if( !(modTime>=0.0 && modTime<timeWidth))\n    {\n        randValue=0.0;\n    }\n\n    vec4 color1=sinRandColor(randValue);\n\n    // Second color for nearest point\n    float seed2=seed+timeWidth;\n    float randValue2=sinRand( seed2 );\n    vec4 color2=sinRandColor(randValue2);\n\n    // Result color\n    if(color1==color2)\n    {\n        color=color1;\n    }\n\n    // Sin vertical moving\n    if(color!=vec4( 0.0 ))\n    {\n        float phaseSeed=seed*1.5;\n        float apmSeed=seed*1.7;\n        // float timeSeed=seed*1.9;\n        \n        float phase=sinRand(phaseSeed)*2.0*pi;\n        \n        float amp=sinRand(phaseSeed);\n        if(amp<0.1)\n        {\n            amp=1.0-amp;\n        }\n        \n        \n        float base=iTime;\n        float y=(sin(phase+base)*amp)/2.0 + 0.5;\n        \n        if(y>0.0 && uvPixelPosition.y>y && uvPixelPosition.y<y+0.01)\n        {\n            return color;\n        }\n    \n    }\n    \n    return vec4( 0.0 );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 color = showLines( uv );\n\n    // Output to screen\n    fragColor = color;\n}","name":"Image","description":"","type":"image"}]}