{"ver":"0.1","info":{"id":"NdsXRM","date":"1618405926","viewed":65,"name":"Sinusoid Wipe","username":"tarnith","description":"Fractional Sinusoid Wipe","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sinusoid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\t\n\t\t\n\tvec3 col = vec3(0.);\n\t\n\tvec2 fractionalUV = fract( uv*50.)-.5;\n\n\t\n\tfloat calcOutput = 0.;              //Initialize variable to hold first calculation and pass to color\n\tfloat delayedOutput = 0.;           // Initialize second variable for holding the delay buffer\n\n    float t = iTime*2.;                 //Time with rate scaling applied\n\tfloat tDel = (iTime-5.)*2.;        //Time with a one \"frame\" offset\n\t\n    for (float y=-1.; y<=1.; y++){      //For every pixel in the normalized UV\n        for (float x=-1.; x<=1.; x++){\n\n            vec2 offset = vec2(x, y);   //Hold current offset coordinate in norm UV space\n\n\t\t\tfloat d = length(fractionalUV+offset);  // Get distance between current offset and \n\t\t\tfloat r = mix(.3, .9, sin((t*.5+.5)+length(uv)));\n         \tcalcOutput += smoothstep(r, r*.9, d);\n\n\t\t\tfloat rDel = mix(.3, .5, sin((tDel*.5+.5)+length(uv)*30.));\n\t\t\tdelayedOutput += smoothstep(rDel, rDel*.9,d);\n\n            // Comment next two lines out, and replace with lines 49/50 for recursion or not\n            col = vec3(calcOutput);\n            col += -delayedOutput;\n\n        }\t\n\t}\n\n\n\t//col.rg = fractionalUV;\n\t//col += calcOutput;\n\t//col += -delayedOutput;\n\tvec4 color = vec4(col, 1.0);\n\t\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}