{"ver":"0.1","info":{"id":"lfffz7","date":"1723510940","viewed":11,"name":"SDF transform template","username":"Steammake3","description":"Template for converting between two SDFs","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["template"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float dot2(vec2 d){\n    return dot(d, d);\n}\n\nvec2 rotater(vec2 p, float r){\n    return vec2(p.x*cos(r) - p.y*sin(r), p.x*sin(r) + p.y*cos(r));\n}\n\nfloat smoothen(float d1, float d2, float x){\n  if (x < 0.){\n      return d1;\n  }else if(x > 1.){\n      return d2;\n  }else{\n      return d1 + (d2-d1)*(x*x*(3.0-2.0*x));\n  }\n}\n\nfloat sdf1( in vec2 p, in float r )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nfloat sdfB( in vec2 p )\n{\n    float six = (p.y<0.0) ? -p.x : p.x;\n    p.x = abs(p.x);\n    p.y = abs(p.y) - 0.2;\n    float rex = p.x - min(round(p.x/0.4),0.4);\n    float aby = abs(p.y-0.2)-0.6;\n    \n    float d = dot2(vec2(six,-p.y)-clamp(0.5*(six-p.y),0.0,0.2));\n    d = min(d,dot2(vec2(p.x,-aby)-clamp(0.5*(p.x-aby),0.0,0.4)));\n    d = min(d,dot2(vec2(rex,p.y  -clamp(p.y          ,0.0,0.4))));\n    \n    float s = 2.0*p.x + aby + abs(aby+0.4) - 0.4;\n    return sqrt(d) * sign(s);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    float PI = 3.1415926535897932384626433832795;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 ouv = uv;\n    uv = fract(uv*2.5)*2.0-vec2(1.0);\n    float time = iTime/1.3 - length(ouv);\n\n    float changeTime = 3.0;\n    if (time < changeTime - mod(changeTime, 2.0*PI) + 2.0*PI){\n    uv = rotater(uv, time);\n    }else{\n        uv = rotater(uv, sin(time)/7.0);\n    }\n    uv = uv * (1. + 0.1 * cos(time * 1.2));\n    \n    float d1 = sdf1(uv, 0.4) - 0.1;\n    float d2 = sdfB(uv) - (sin(time)+0.8)/20.0;\n    \n    float d = smoothen(d1, d2, time/changeTime);\n    \n    vec3 col = vec3(sin(d*50.));\n    col = mix(vec3(1), vec3(0.663,0.525,0.039), col.x);\n    \n    if (d < 0.001){\n        //float d = smoothstep(d1, d2, iTime/5.);\n        col = mix(vec3(0), vec3(0.792,0.247,0.428), col.x);\n    }\n    if (abs(d) < 0.015){\n        col = vec3(0.6, 0.9, 0.7);\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}