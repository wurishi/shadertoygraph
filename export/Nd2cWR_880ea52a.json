{"ver":"0.1","info":{"id":"Nd2cWR","date":"1643342024","viewed":107,"name":"Julia Set Animated with Stocks","username":"c0rymcg","description":"An animated Julia set render where the location of the constant C follows the major contours of the Mandelbrot Set. (it traces the main cartioid and period-2 bulb)\n\ncolored with a slowly rotating cross shaped orbit trap for escaping points.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["fractal","julia"],"hasliked":0,"parentid":"Nd2yRW","parentname":"Julia Set Moving Along Edges"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//based on https://www.shadertoy.com/view/WlcXR4\n\nconst float PI=3.14159;\nconst float TAU=6.28318;\nvec2 f(vec2 x, vec2 c) {\n    return mat2(x,-x.y,x.x)*x + c;\n}\n\nvec3 palette(float loc, vec3 a, vec3 b, vec3 c, vec3 d) {\n    return a + b*cos( TAU*(c*loc+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;uv *= 1.3;uv += 0.5;\n    vec4 col = vec4(1.0);\n    float time = iTime;\n    \n    int u_maxIterations = 200;\n    \n    //select a point along the cartoid for C\n    float angle = mod(time/3.,TAU*2.);\n    bool type1 = true;\n    \n    vec2 c = vec2(-1,0);\n    if (angle < PI){type1 = false;}\n    if (angle > TAU+PI){type1=false;}\n    float a = mod(angle,TAU);\n    \n    if (type1==true){c = vec2(cos(a),sin(a))/2.01 - vec2(cos(a*2.),sin(a*2.))/4.02;}\n\telse{c = vec2(cos(PI-a)/4.01-1.,sin(PI-a)/4.01);}\n    \n    vec2 z = vec2(0.);\n    z.x = 3.0 * (uv.x - 0.5);\n    z.y = 2.0 * (uv.y - 0.5);\n    bool escaped = false;\n    int iterations;\n    float sum = 0.;\n    float closest=1000.;\n    for (int i = 0; i < u_maxIterations; i++) {\n        //if (i > u_maxIterations) break;\n        iterations = i;\n        z = f(z, c);\n        sum += max(0.,1.5 - length(z));\n        float zangle=atan(z.x, z.y);\n        \n        float zdist = length(z);\n        \n        \n        closest = min(closest, min(abs(cos(zangle+a)*zdist), abs(sin(zangle+a)*zdist)));\n        \n        if (dot(z,z) > 4.0) {\n            escaped = true;\n            //break;\n        }\n    }\n\t\t\t\n    vec3 iterationCol = vec3(palette(closest/2., vec3(0.5),vec3(0.5),vec3(1.0, 1.0, 0.0),vec3(0.3, 0.2, 0.2)));\n\t\t\n\tvec3 coreCol = vec3(palette(sum/10., vec3(0.5),vec3(0.5),vec3(1.0, 1.0, 1.0),vec3(0.3, 0.2, 0.2)));\n\t\n    float f_ite = float(iterations);\n    float f_maxIte = float(u_maxIterations);\n    fragColor = vec4(escaped ? iterationCol : coreCol, f_ite/f_maxIte );\n}\n\n","name":"Image","description":"","type":"image"}]}