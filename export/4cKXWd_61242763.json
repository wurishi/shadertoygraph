{"ver":"0.1","info":{"id":"4cKXWd","date":"1716184268","viewed":31,"name":"bookOfShader-03 -Shapes","username":"doolhong","description":"https://thebookofshaders.com/\nStudy Gear, Square...","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["study","thebookofshaders"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nfloat SinTime(float Speed) { return sin(iTime * Speed)*0.5 +0.5;}\n//lineFuctions 1D override\nfloat plot(float st) {  return smoothstep(0.02, 0.0, abs(st));  }\nfloat plot(vec2 st) {  return smoothstep(0.02, 0.0, abs(st.y-st.x)); }\nfloat plot(vec2 st, float pct){  //이 부분이 중요함.\n            return  smoothstep( pct-0.02, pct, st.y) - smoothstep( pct, pct+0.02, st.y); }\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.0,0.0,0.0);\n    vec2 uv = (fragCoord/iResolution.xy);\n    uv.x = ((uv.x - 0.5) *(iResolution.x / iResolution.y)) + 0.5;\n    \n    vec2 pos =(uv - 0.5)*2.0;\n    \n    \n    //gear rotate==================================\n    float tile = 5.0;\n    vec2 gearPos = (fract(uv*tile)-0.5)*(SinTime(3.0)-1.9);\n    float r = length((abs(gearPos)))*2.0; //radial\n    float at = atan(gearPos.y, gearPos.x); //arctangent\n\n    float f = cos(at*3.0);\n        f = abs(cos(at*3.));  //floawr\n    float GearTeeth = 10.0;\n    f = smoothstep(-0.5, 1.0, sin(at*GearTeeth + smoothstep(-3.0, 4.0,SinTime(1.0))*300.0 )  ) *-0.15+0.7; //rotate gear\n\n    col = vec3(1.0 - smoothstep(f, f+0.02, r));    //--gear Render\n    //=========================================\n\n\n\n\n    //Square ==================================\n    pos = abs(pos); \n    \n    //----Base thicknesssquare\n    float sSize = 0.7 * SinTime(3.0)+0.1;                 //square size\n    float thickness = 0.06;        //square size\n    float sd = max(pos.x, pos.y) / sSize;  //squareDistance\n    sd = step(0.5-thickness,sd) * step(sd,0.5+thickness);\n   \n    //col = vec3(sd);    //--square Render\n\n\n    //----Base thicknesssquare\n    float rSize = 0.5 * SinTime(3.0)+0.1;  //round Square size\n    float round_ = 0.4; //rounding scale\n    float rsd = length(max(((pos/rSize-(1.0-round_))), 0.0));//roundSquareDistance\n    rsd = step(rsd, round_);\n\n    //col = vec3(rsd);    //--RoundSquare Render\n    //=========================================\n\n  \n    fragColor = vec4(col,1.0);\n    \n    \n}","name":"Image","description":"","type":"image"}]}