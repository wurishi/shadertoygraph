{"ver":"0.1","info":{"id":"3td3W8","date":"1576172317","viewed":4297,"name":"Dual Kawase Blur","username":"alex47","description":"Multi pass blur using the dual filtering kawase method described in GDC2015 by Marius Bjorge that is also used by KDE KWin","likes":29,"published":1,"flags":32,"usePreview":1,"tags":["blur","kawase","dualfiltering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Simply display the texture\n//\n// Try switching the iChannel0 to Buffer A, B, C and D to see the intermediate steps\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(fragCoord.xy / (iResolution.xy));\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// downsample pass 1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(fragCoord.xy / (iResolution.xy / 2.0));\n    vec2 halfpixel = 0.5 / (iResolution.xy / 2.0);\n    float offset = 3.0;\n\n    vec4 sum = texture(iChannel0, uv) * 4.0;\n    sum += texture(iChannel0, uv - halfpixel.xy * offset);\n    sum += texture(iChannel0, uv + halfpixel.xy * offset);\n    sum += texture(iChannel0, uv + vec2(halfpixel.x, -halfpixel.y) * offset);\n    sum += texture(iChannel0, uv - vec2(halfpixel.x, -halfpixel.y) * offset);\n\n    fragColor = sum / 8.0;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// downsample pass 2\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(fragCoord.xy / (iResolution.xy / 2.0));\n    vec2 halfpixel = 0.5 / (iResolution.xy / 2.0);\n    float offset = 3.0;\n\n    vec4 sum = texture(iChannel0, uv) * 4.0;\n    sum += texture(iChannel0, uv - halfpixel.xy * offset);\n    sum += texture(iChannel0, uv + halfpixel.xy * offset);\n    sum += texture(iChannel0, uv + vec2(halfpixel.x, -halfpixel.y) * offset);\n    sum += texture(iChannel0, uv - vec2(halfpixel.x, -halfpixel.y) * offset);\n\n    fragColor = sum / 8.0;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// upsample pass 1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(fragCoord.xy / (iResolution.xy * 2.0));\n    vec2 halfpixel = 0.5 / (iResolution.xy * 2.0);\n    float offset = 3.0;\n\n    vec4 sum = texture(iChannel0, uv +vec2(-halfpixel.x * 2.0, 0.0) * offset);\n    \n    sum += texture(iChannel0, uv + vec2(-halfpixel.x, halfpixel.y) * offset) * 2.0;\n    sum += texture(iChannel0, uv + vec2(0.0, halfpixel.y * 2.0) * offset);\n    sum += texture(iChannel0, uv + vec2(halfpixel.x, halfpixel.y) * offset) * 2.0;\n    sum += texture(iChannel0, uv + vec2(halfpixel.x * 2.0, 0.0) * offset);\n    sum += texture(iChannel0, uv + vec2(halfpixel.x, -halfpixel.y) * offset) * 2.0;\n    sum += texture(iChannel0, uv + vec2(0.0, -halfpixel.y * 2.0) * offset);\n    sum += texture(iChannel0, uv + vec2(-halfpixel.x, -halfpixel.y) * offset) * 2.0;\n\n    fragColor = sum / 12.0;\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"// upsample pass 2\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(fragCoord.xy / (iResolution.xy * 2.0));\n    vec2 halfpixel = 0.5 / (iResolution.xy * 2.0);\n    float offset = 3.0;\n\n    vec4 sum = texture(iChannel0, uv +vec2(-halfpixel.x * 2.0, 0.0) * offset);\n    \n    sum += texture(iChannel0, uv + vec2(-halfpixel.x, halfpixel.y) * offset) * 2.0;\n    sum += texture(iChannel0, uv + vec2(0.0, halfpixel.y * 2.0) * offset);\n    sum += texture(iChannel0, uv + vec2(halfpixel.x, halfpixel.y) * offset) * 2.0;\n    sum += texture(iChannel0, uv + vec2(halfpixel.x * 2.0, 0.0) * offset);\n    sum += texture(iChannel0, uv + vec2(halfpixel.x, -halfpixel.y) * offset) * 2.0;\n    sum += texture(iChannel0, uv + vec2(0.0, -halfpixel.y * 2.0) * offset);\n    sum += texture(iChannel0, uv + vec2(-halfpixel.x, -halfpixel.y) * offset) * 2.0;\n\n    fragColor = sum / 12.0;\n}","name":"Buffer D","description":"","type":"buffer"}]}