{"ver":"0.1","info":{"id":"mtdfDl","date":"1702151659","viewed":19,"name":"Fork Fork UCSD  gwuhou 700","username":"gwuhou","description":"This is a homework template for a homework for UCSD CSE 167.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["boids"],"hasliked":0,"parentid":"mtdfDj","parentname":"Fork UCSD CSE 1 gwuhou 978"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Smooth HSV2RGB from https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb(in vec3 c)\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 color = vec4(0.5, 0.5, 0.5, 1.0);\n    // Loop over all boids\n    vec4 bcolor = vec4(0.0, 0.0, 0.0, 1.0);\n    bool hit = false;\n    for (int i = 0; i < NUM_BOIDS; i++) {\n        ivec2 tex_pos = ivec2(i % int(iChannelResolution[0].x),\n                                                i / int(iChannelResolution[0].x));\n        vec4 pos_vel = texelFetch(iChannel0, tex_pos, 0);\n        if (distance(fragCoord, pos_vel.xy) < BOIDS_SIZE) {\n            vec3 rgb = hsv2rgb(vec3((float(i)+0.5) / float(NUM_BOIDS), 1.0, 0.9));\n            bcolor += vec4(rgb, 1.0);\n            hit = true;\n        }\n    }\n    if (hit) {\n        color = bcolor;\n    }\n\n    // Output to screen\n    fragColor = color;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    if (iFrame == 0) {\n        // initialize the buffer\n        vec4 pos_vel = texture(iChannel1, fragCoord/iChannelResolution[1].xy);\n        pos_vel.xy = iResolution.xy / 2.0 + (pos_vel.xy - 0.5) * iResolution.xy * 0.2;\n        pos_vel.zw = (pos_vel.zw - 0.5) * iResolution.xy * 1.0;\n        fragColor = pos_vel;\n        return;\n    }\n    ivec2 iFragCoord = ivec2(fragCoord);\n    // \n    vec4 pos_vel = texelFetch(iChannel0, iFragCoord, 0);\n    vec2 pos = pos_vel.xy;\n    vec2 vel = pos_vel.zw;\n    // ID of the current Boid\n    int my_id = int(iFragCoord.y) * int(iResolution.x) + int(iFragCoord.x);\n\n    // Implement Boids here\n    \n    \n    float s_max= 10.0f;\n    float s_min = 5.0f;\n    float ds = 30.0f;\n    float as = 0.02f;\n    float dv = 150.0f;\n    float aa = 0.03f;\n    float ac = 0.001f;\n    float dleft = 200.0f;\n    float dright = iChannelResolution[0].x-dleft;\n    float dtop = 160.0f;\n    float dbottom = iChannelResolution[0].y-dtop;\n    float ab = 0.5f;\n\n    int Ns = 0;\n    int Nv = 0;\n    vec2 Fs = vec2(0, 0);\n    vec2 Fa = vec2(0, 0);\n    vec2 Fc = vec2(0, 0);\n    vec2 Fb = vec2(0, 0);\n    \n    for (int i = 0; i < NUM_BOIDS; i++) {\n        \n        ivec2 neighbor_tex_pos = ivec2(i % int(iChannelResolution[0].x),\n                                                i / int(iChannelResolution[0].x)); \n                                             \n        vec4 neighbor_pos_vel = texelFetch(iChannel0, neighbor_tex_pos, 0);\n        \n        vec2 neighbor_pos = neighbor_pos_vel.xy;\n        vec2 neighbor_vel = neighbor_pos_vel.zw;\n        \n        if(my_id == i) continue;\n        \n        if (distance(pos, neighbor_pos) < ds) {           \n            Ns++;\n            Fs += (pos-neighbor_pos) ;\n        \n        }\n        if (distance(pos, neighbor_pos) < dv) {\n            \n            Nv++;\n            Fc += neighbor_pos;\n            Fa += neighbor_vel;            \n        \n        }\n\n\n        \n\n    }\n    \n    \n    if(Ns > 0){\n        Fs = Fs/float(Ns);\n    }\n    if(Nv > 0){\n        Fc = Fc/float(Nv) - pos;\n        Fa = Fa/float(Nv) - vel;    \n    }else{\n        Fc = Fc - pos;\n        Fa = Fa - vel;        \n    \n    }\n    \n    \n\n    \n    Fb.x = (pos.x<dleft ? 1.0f:0.0f)- (pos.x>dright ? 1.0:0.0);\n    Fb.y = (pos.y<dtop ? 1.0f:0.0f)- (pos.y>dbottom ? 1.0:0.0);\n    \n    vec2 total_force = vec2(0,0);\n    total_force = as*Fs+ac*Fc+aa*Fa+ab*Fb;\n    vel += total_force;\n    \n    if (length(vel)>0.0){\n        if(length(vel)>s_max){\n            vel = vel * (s_max/length(vel));\n        }\n        if(length(vel)<s_min){\n            vel = vel * (s_min/length(vel));\n        }        \n    }\n    \n    pos+=vel;\n    fragColor = vec4(pos, vel);\n\n    \n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define NUM_BOIDS 200\n#define BOIDS_SIZE 10.0\n\n    ","name":"Common","description":"","type":"common"}]}