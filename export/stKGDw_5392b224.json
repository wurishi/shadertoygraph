{"ver":"0.1","info":{"id":"stKGDw","date":"1637824307","viewed":71,"name":"Truchet Ridges 4rd  FORK","username":"soundmasteraj","description":"Ridgified, Weird looking shader that uses waves, truchet tiles, and iterations to make this 3D-like effect.\n\nIt may not be the fastest code but hey, it still works.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["wave","truchet","fork","depth"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Truchet Ridges 3rd  FORK\" by soundmasteraj. https://shadertoy.com/view/stV3Ww\n// 2021-11-25 07:04:24\n\n// Fork of \"Truchet Ridges 2nd  FORK\" by soundmasteraj. https://shadertoy.com/view/slK3Ww\n// 2021-11-25 06:53:01\n\n// Fork of \"Truchet Ridges FORK\" by soundmasteraj. https://shadertoy.com/view/flV3Dm\n// 2021-11-25 06:34:55\n\n// Fork of \"Truchet Hills\" by gls9102. https://shadertoy.com/view/wslcz2\n// 2021-11-25 05:14:08\n\n// v1.0.1\n\n#define PI 3.1415\n#define ITERATIONS 25.\n\nfloat ran21(vec2 uv) {\n    return fract(cos(dot(cos(uv.x*uv.y)-32.2,tan(uv.x/uv.y)-23.5)*1322.24)*432122.62);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.x;\n    vec2 uvb = uv;\n\n    vec3 col = vec3(0);\n    \n    \n        vec2 gv = fract(uv)-.5;\n        vec2 id = floor(uv);\n    \n    \n    for(float i=1.;i<=ITERATIONS;i++) {\n        float cur = i/ITERATIONS;\n        uv = uvb;\n        \n        uv *= (ITERATIONS*ITERATIONS/(ITERATIONS+i))-(cur*1.)/(length(uvb/uv));\n        uv.y += iTime*0.6;\n        float halftime = iTime*.3;\n    \n        gv = fract(uv)-.5;\n        id = floor(uv);\n        \n        \n        float mul = mod(id.x+id.y,25./2.)>=1.5 ? -.675 : -ITERATIONS/i;\n            \n            \n        float modval = mod(iTime/1000., mul*PI);\n    \n        gv.x *= (ran21(id)>(.5)) ? -1. - mod(modval+id.y, mod(id.y, uv.x)) * mul - abs(cos( halftime/gv.x - modval/gv.y)* modval) : \n                                    1. + mod(modval-id.y, mod(id.y, uv.x)) * mul - abs(sin( iTime/gv.x + modval/gv.y)* modval);\n        \n        // gv.x *= (ran21(id)>(.5)) ? -1.- abs(sin(iTime+gv.x+modval*PI)*modval) : 1.+ abs(cos(-iTime-gv.x-i*PI)*modval);  \n        \n        vec2 ruv = gv-sign(gv.x+gv.y+.001)*.5;\n        float tile = smoothstep(.01,-.01,abs(length(ruv)-.5)-.1);\n        float rot = atan(ruv.x,ruv.y)/PI;\n    \n\n        float h = smoothstep((ITERATIONS/cur+.1)/gv.x,cur,sin(abs(rot*cur*mul+iTime)*PI)*.25+.75);\n        \n        col.b -= (h*tile*cur)/(h/i);\n        col.b *= .85-((h/i)/(h*tile*cur));\n        col.g *= .95-((col.r + col.g )/(h*i));\n\n        \n        col = max(col,h*tile*cur);\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}