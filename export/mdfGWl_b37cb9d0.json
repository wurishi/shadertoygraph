{"ver":"0.1","info":{"id":"mdfGWl","date":"1666967268","viewed":75,"name":"[RagePly] Loading Screen","username":"RagePly","description":"Just wanted to try it out","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["loading"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ball_speed 3.0\n#define center vec2(0.0,-0.65)\n#define time iTime * ball_speed\n#define pi 3.14159265359\n#define ball_radi 0.2\n\nfloat get_clockwise( in float y, in float x )\n{\n\n    float theta = atan(y, x);\n    if (theta < 0.0)\n    {\n        theta = 2.0*pi + theta;\n    }\n    return theta;\n}\n\nfloat ramp( in float a, in float b, in float c, in float x )\n{\n    float y = clamp(x, a, b) / (b - a);\n    return c * (1.0 - y) + y;\n}\n\nvec4 draw_ball( in vec2 pos )\n{\n    float radi  = 0.01;\n    vec2 offset = ball_radi * vec2(cos(time), sin(time));\n    vec2 cpos = center + offset;\n    float r = length(cpos - pos);\n    if (r < radi) {\n        float f = smoothstep(0.8*radi, radi, r);\n        return vec4(1.0,1.0,1.0,1.0 - f);\n    } else {\n        return vec4(0.0,0.0,0.0,0.0);\n    }\n}\n\nvec4 draw_outline( in vec2 pos )\n{\n    float outer = ball_radi;\n    float thicc = 0.01;\n    vec2 v = pos - center;\n    float r = length(v);\n    if (r < (outer+thicc/2.0) && r > (outer-thicc/2.0))\n    {\n        vec2 ball = ball_radi * vec2(cos(time), sin(time));\n        float theta = acos(dot(ball, v) / outer / r);\n        float theta2 = asin((ball.x*v.y-ball.y*v.x)/outer/r);\n        float trail = theta/2.0/pi;\n        if (theta2 < 0.0)\n        {\n            trail = 1.0 - trail;\n        }\n        trail = ramp(0.0, 1.0, 0.5, trail);\n        float f = smoothstep(0.0, 0.8, 1.0 - 2.0*abs(r-outer)/thicc);\n        return vec4(trail, trail, trail, f);\n    } \n    else\n    {\n        return vec4(0.0,0.0,0.0,0.0);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float fratio = iResolution.x/iResolution.y;\n    vec2 uv = 2.0 * (fragCoord/iResolution.xy - vec2(0.5,0.5)) * vec2(fratio, 1.0);\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    vec4 bcol = draw_ball(uv);\n    vec4 outc = draw_outline(uv);\n    col = mix(col, outc.xyz, outc.a);\n    col = mix(col, bcol.xyz, bcol.a);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}