{"ver":"0.1","info":{"id":"7djGDD","date":"1617482365","viewed":139,"name":"Showdown Revision 2021 Final","username":"Pixdigit","description":"Whenever I watch a shader showdown I try to code a shader alongside to see what I manage to do. I also later decided to make a revised version which you can find on my profile.","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["circles","tiling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot(float angle) {\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\n\n\treturn mat2(\n\t\tc, -s,\n\t\ts, c\n\t);\n}\n\nfloat rand(vec2 seed) {\n    return sin(dot(seed, seed + vec2(2., 546.345))) * 0.5 + 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float scale = 10.;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.x;\n    vec2 orig = (uv + vec2(sin(iTime), cos(iTime)) * 0.4);\n    vec2 cam = orig * rot(iTime / 2.) * scale;\n    vec2 guv = fract(cam);\n    vec2 gid = floor(cam);\n\n    vec3 col = vec3(0);\n    if (length(guv - 0.5) < sin(iTime + 1. - length(cam)) / 4. + 0.25) {\n        float ripples = 0.2;\n        col = vec3(abs(ripples / 2. - mod(abs(length(guv - 0.5) - iTime * 0.2), ripples)) / ripples);\n    }\n\n    // Time varying pixel color\n    col *= 0.5 +rand(vec2(floor(iTime * 2. + rand(gid)), 1.))*cos(iTime+gid.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}