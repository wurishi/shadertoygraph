{"ver":"0.1","info":{"id":"432BDK","date":"1729955136","viewed":163,"name":"Astral McKenna","username":"orblivius","description":"Radiskull smooth and deadly.","likes":4,"published":3,"flags":32,"usePreview":0,"tags":["raymarching","reflection","specular","diffuse","fresnel","skull","anatomy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3zn","filepath":"/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","previewfilepath":"/media/ap/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* RADISKULL Viz by Orblivius\n   Source: https://shadertoy.com/view/lXSBzV\n*/\n\n#define MAX_STEPS 40\n#define MAX_DIST 7.\n#define SURF_DIST .0001\n#define PI 3.141592\n\n#define NFREQ 256.\n\n#define iBeatDet  0.4\n#define iBeatNrg 0.3\n#define iBPM 120.\n\n#define bpm exp(-5.*((iBPM>0.)?60./iBPM:0.5))\n\n float freq = 0.0;\n \n// https://mercury.sexy/hg_sdf/\nfloat pModPolar(inout vec2 p, float repetitions) {\n    \n    float angle = 2.*PI/repetitions,\n          a = atan(p.y, p.x)+angle,\n          r = length(p),\n          c = floor(a / angle);\n    a = mod(a, angle) - angle / 2.0;\n    p = vec2(cos(a), sin(a)) *r ;\n    if (abs(c) >= (repetitions / 2.0)) c = abs(c);\n    return c;\n}\n\n//===================================================================//\n// below by https://iquilezles.org/articles/distfunctions/\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sMin( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nfloat sMax( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h); }\n\nfloat Sphere(vec3 p,float s){\n    return length(p)-s;\n}\n\nfloat Ellipsoid( vec3 p, vec3 r )\n{\n  float k0 = length(p/r);\n  float k1 = length(p/(r*r));\n  return k0*(k0-1.0)/k1;\n}\n\nfloat rBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\nfloat Capsule( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\nfloat HollowSphere( vec3 p, float r, float h, float t )\n{\n  float w = sqrt(r*r-h*h);\n  vec2 q = vec2( length(p.xz), p.y );\n  return ((h*q.x<w*q.y) ? length(q-vec2(w,h)) : \n                          abs(length(q)-r) ) - t;\n}\n\n// above by https://iquilezles.org/articles/distfunctions/\n//===================================================================//\n\nfloat Gyroid(vec3 p, float scale, float thickness, float bias){\n    p *= scale;\n    float gyr = abs(dot(sin(p), cos(p.zxy))-bias)/scale-thickness;\n    return gyr;\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\n// GOLDEN RATIO NOISE by dcerisano - https://www.shadertoy.com/view/ltB3zD\nconst float PHI = 1.61803398874989484820459; // Î¦ = Golden Ratio \n\nfloat gold_noise(in vec2 xy, in float seed)\n{\n    return fract(tan(distance(xy*PHI, xy)*seed)*xy.x);\n}\nfloat t(float time){\n    float t = 16.+time*.5;\n    return t += sin(time*.5)*.5+.2;\n}\n\n// by https://iquilezles.org\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\t\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = textureLod( iChannel2, (uv+ 0.5)/256.0, 0.0 ).yx;\n\treturn mix( rg.x, rg.y, f.z );\n}\n\n\nvec3 Transform(vec3 p, float t){\n    p.y -= .4;\n    p.y += sin(t)*.4;\n    p.z += sin(t*.9)*.6-.3;\n    p.yz *= Rot(sin(-t+1.)*.3);\n    p.xy *= Rot(cos(-t*.7+4.)*.4);\n    p.xz *= Rot(sin(t*.5)*1.*cos(t*.3+1.))+iBeatDet*iBeatNrg-0.35;\n    return p;\n}\n\nvec2 map(vec3 p){\n       \n    float t = t(iTime);\n    mat2 ani = mat2(0);\n    float anix = .2*(sin(t*.01*PI*bpm*cos(t*.2*bpm)));\n    ani = Rot((sin(t*PI*(bpm)*cos(t*.2*bpm))*.5*iBeatNrg-.3*iBeatNrg));\n    vec3 p_skull = p;\n  //  p_skull = Transform(p,t);\n    \n    // HEAD\n    vec3 p_head = p_skull;\n        float d = Ellipsoid(p_head,vec3(.9,1.1,1.2));//head ellispoid\n        float p_cutb = p_head.y+.7 + sin(p_head.x + sin(cos(p_head.z*1.4)) * 21.)*.02; //bottom cut plane\n        p_cutb = sMin(p_cutb, Ellipsoid(p_head-vec3(0,-.3,-.2),vec3(.7)),.05);//head hole\n        p_cutb = sMin(p_cutb, Ellipsoid(p_head-vec3(0,-.24,.5),vec3(.51)),.1);//head hole front\n    d = sMax(p_cutb, d,.05); //bottom cut\n        float p_cutf = -p_head.z+1.1; //forehead plane\n    d = sMax(p_cutf, d,.2); //forehead cut\n        float cuts_temple = Capsule(vec3(-abs(p_head.x),p_head.yz), vec3(-1.,-1,.8), vec3(-1.8,3,.0), .5 );//temple deepenings\n    d = sMax(cuts_temple, d,.3); //temple cuts\n        float bcut_temple = Capsule(p_head, vec3(-2.,-1.1,.6), vec3(2,-1.1,.6), .6 );//side cuts temple <-> head\n    float head = sMax(bcut_temple, d,.3); //side cuts    \n    \n    // UPPER JAW\n    vec3 p_jaw = p_skull-vec3(0,.36,.1);\n        p_jaw.yz *= Rot(PI);\n        p_jaw.y -= sin(p_jaw.x*37.)*.007 - cos(p_jaw.z*59.)*.001;//distortion\n        p_jaw.z *= .9;\n        float ujaw = HollowSphere(p_jaw+vec3(0,-.95,.5),.38,.02,.05 );//jaw sdf\n        float p_cutB = p_skull.z-.6;//cutting plane back\n        ujaw = sMax(p_cutB, ujaw,.05); //jaw back cut\n    vec3 p_jawsc = vec3(abs(sqrt(p_skull.x*p_skull.x+0.01)),p_skull.yz); //new point def for side cuts\n        p_jawsc.xy *= Rot(-1.);\n        p_jawsc.yz *= Rot(-.4);\n        p_jawsc.y += .3; \n        ujaw = sMax(p_jawsc.y, ujaw,.04); //side cuts\n    \n    d = sMin(ujaw, head,.1);//union eye surrounding and d     \n    d -= sin(7.*p_skull.x)*sin(7.*p_skull.y)*sin(6.*p_skull.z)*.03;//distortion      \n        \n    // CHEEKS         \n        // CHEEKBONES\n    vec3 p_eyesur = p_skull-vec3(0,.3,0);\n        float eyesur = Ellipsoid(vec3(abs(p_eyesur.x),p_eyesur.yz)+vec3(-.34,.5,-.87),vec3(.25,.3,.2));//cheekbones   \n        eyesur += sin(12.*p_skull.x)*sin(11.*p_skull.y)*sin(13.*p_skull.z)*.02;//distortion\n    d = sMin(eyesur, d,.1);//union cheekbones and d\n    \n        // ZYGOMATIC ARCH\n    vec3 p_zyg = vec3(abs(p_skull.x),p_skull.yz);\n        p_zyg.x += sin(p_zyg.z*4.+PI)*.08;\n        p_zyg.y += cos(p_zyg.z*9.)*.03;\n        float zyg = Capsule(p_zyg,vec3(.5,-.3,.8),vec3(.75,-.3,0.1),(p_zyg.z)*.1);\n    d = sMin(d,zyg,.05);\n   \n    // NOSE\n        // NOSE BONE\n    vec3 p_nbone = p_skull;\n        p_nbone.yz *= Rot(-2.2);\n        float nbone = HollowSphere(p_nbone+vec3(0,-1.,.4),.1,0.08,.04 );\n    d = sMin(d,nbone,.05);\n    \n        // NOSE HOLE\n    vec3 p_nose = vec3(abs(sqrt(p_skull.x*p_skull.x+.0012)),p_skull.yz);\n        p_nose.xy *= Rot(-.25);\n        float nose = Ellipsoid(p_nose-vec3(-.03,-.35,1.),vec3(.03,.08,.8));\n    vec3 p_bone = p_skull;\n    d = sMax(nose, d,.06); //nose subtraction\n    \n    // LOWER JAW\n    vec3 pN = p_skull;//null - parent rotation\n        pN.z -= .45;\n        pN.y += .4;\n        pN.yz *= ani;\n        \n        pN.xy *= mat2(1.,0.-.3*anix,0.+.4*anix,1.);\n       \n       // pN.x += .06*sin(t*5.);\n        \n        pN.z += .5;\n        pN.y -= .4;\n        pN -= sin(pN.y*15.)*.01 - cos(pN.z*39.)*.002;//distortion\n        \n        //CHIN\n    vec3 p_ljaw = pN;\n        p_ljaw.y *= .8;\n        p_ljaw.z -= sin(pN.y*26.)*.008;\n        p_ljaw.y -= cos(pN.x*15.+sin(pN.y*7.)*2.)*.01;\n        float ljaw = HollowSphere(p_ljaw+vec3(0,.77,-.74),.38,0.03,.04 );//chin  \n        ljaw = sMax(p_ljaw.z-.65,ljaw,.1);\n        \n        // MANDIBLE BOTTOM & BACK\n    vec3 p_maB = vec3(abs(sqrt(pN.x*pN.x+.01)),pN.yz);\n        p_maB.yz *= Rot(-1.3);\n        p_maB.xz *= Rot(-.34);\n        p_maB.xy *= Rot(-.39);\n        p_maB -= vec3(0.85,.0,.63);\n        ljaw = sMin(ljaw,rBox(p_maB,vec3(0.,smoothstep(0.,6.,abs(-sqrt(p_maB.z*p_maB.z+.01))+.9),.45),.04),.17);\n        ljaw = sMax(Ellipsoid(p_maB-vec3(.0,.0,-.55),vec3(.5,.15,.26)),ljaw,.04);\n        p_ljaw -= sin(p_ljaw.y*22.)*.001 - cos(p_ljaw.z*19.)*.006;//distortion\n        ljaw = sMax(p_ljaw.y+.93,ljaw,.02);//bottom cut plane\n    d = sMin(ljaw, d,.002);//union eye surrounding and d \n\n    // EYE HOLES\n    vec3 p_eyeH = p_skull;\n        p_eyeH += sin(p_eyeH.x*29.+cos(p_eyeH.y*32.))*.005; //eye distortion\n        float eyes = Ellipsoid(vec3(abs(p_eyeH.x),p_eyeH.y-.4,p_eyeH.z)+vec3(-.29,.49,-1.1),vec3(.21,.25,.25)); // eye balls\n        float eyeH = sMin(eyes,Sphere(vec3(abs(p_skull.x),p_skull.yz)-vec3(.25,0.,.7),.35),.05);// eye holes back\n        eyeH = sMax(-p_eyeH.y,eyeH,.2);\n    d = sMax(eyeH, d,.05); //eye ball subtraction\n    \n    // EYEBALLS\n    vec3 p_eye = p_skull;\n        p_eye.x = abs(sqrt(p_eye.x*p_eye.x+.005));\n       // p_eye.z -= freqs[10]*.5-.03;\n        p_eye.y -= .4;\n        p_eye += vec3(-.29,.57,-.9);\n    eyes = Ellipsoid(p_eye,vec3(.2));\n    \n    // OPTIC NERVE\n    vec3 p_es = p_eye;\n        p_es.x += sin(p_es.z*2.+PI)*.03;\n        p_es.y += cos(p_es.z*5.)*.04;\n        float nerve = Capsule(p_es,vec3(.0,0.,.0),vec3(.0,0.,-1.2),p_es.z*-.1);\n    eyes = sMin(eyes,nerve,.1);  \n\n    // BRAIN\n    vec3 p_brain = p_skull;\n    float membrane = Gyroid(p_brain,16.,.2,2.);\n    float brain = Ellipsoid(p_brain+vec3(0,-.3,.0),vec3(.7,.5,.9));\n        brain = sMin(brain,Ellipsoid(p_brain+vec3(0,0.1,.2),vec3(.6,.6,.6)),.5);\n        brain = sMax(-membrane,brain,.25);\n        brain = sMin(eyes,brain,.1);\n\n    // UPPER TEETH\n    vec3 p_tooth = p_skull;\n        p_tooth -= vec3(0,-.77,.7);\n        p_tooth *= vec3(1.2,1,1);\n        pModPolar(p_tooth.xz, 30.0);\n\n        float teeth = Ellipsoid(p_tooth - vec3(0.43, 0., 0.), vec3(0.03, 0.15, 0.045));\n        teeth = max(teeth, -p_skull.y-.73+sin(p_skull.x*32.)*.006);\n        teeth = max(teeth, -p_skull.z+.7);\n        teeth = sMax(Sphere(p_skull-vec3(0.02,-.88,.98),.23),teeth,.01);// narrowing front teeth\n        \n    // LOWER TEETH\n    vec3 p_ltooth = pN;\n        p_ltooth -= vec3(0,-.77,.7);\n        p_ltooth *= vec3(1.2,1,1);\n        pModPolar(p_ltooth.xz, 30.0);\n\n        float lteeth = Ellipsoid(p_ltooth - vec3(0.42, 0., 0.), vec3(0.03, 0.15, 0.045));\n        lteeth = max(lteeth, pN.y+.79+sin(p_skull.x*29.)*.004);\n        lteeth = max(lteeth, -pN.z+.7);\n        lteeth = sMax(Sphere(pN-vec3(0.005,-.87,.89),.24),lteeth,.02);// narrowing front teeth\n    teeth = min(teeth,lteeth);\n\n    // SPHERES\n        vec3 ps = p;\n        float sph = 1e9;\n        \n                 \n    teeth = sMax(sph-.2,teeth,.5); // teeth - spheres\n    d = sMax(sph-.15,d,.7);         // skull - spheres\n    brain = sMin(brain,sph,.2);    // brain + spheres\n    \n    // MATERIALS\n    vec2 res = vec2(d,0);\n    if(teeth<d) res = vec2(teeth,1);\n    if(brain<d) res = vec2(brain,2);\n\n    \n    return res;\n}\n\n// RAYMARCHING\nvec2 RM(vec3 ro, vec3 rd){\n    float mat = 0.;\n    float t=0.;\n    for(int i=0;i<MAX_STEPS; i++){\n        vec3 p = ro + rd*t;\n        vec2 mv = map(p);\n        float d = mv.x;\n        mat = mv.y;\n        t += d;\n        if(t>MAX_DIST||abs(d)<SURF_DIST) break;\n    }\n    return vec2(t,mat);\n}\n\n// https://iquilezles.org\nvec3 calcNormal (vec3 p){\n    // inspired by tdhooper and klems - a way to prevent the compiler from inlining map() 4 times\n    vec3 n = vec3(0.0);\n    for( int i=min(iFrame,0); i<4; i++ ){\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*map(p+.001*e).x;\n    }\n    return normalize(n);\n}\n\nvec4 cubic(float v){\n    vec4 n = vec4(1.0, 2.0, 3.0, 4.0) - v;\n    vec4 s = n * n * n;\n    float x = s.x;\n    float y = s.y - 4.0 * s.x;\n    float z = s.z - 4.0 * s.y + 6.0 * s.x;\n    float w = 6.0 - x - y - z;\n    return vec4(x, y, z, w) * (1.0/6.0);\n}\n\nvec4 textureBicubic(sampler2D sampler, vec2 texCoords){\n\n   ivec2 itex = textureSize(sampler, 0);\n   vec2 texSize = vec2(itex.x, itex.y);\n   vec2 invTexSize = vec2(1.0 / float(texSize.x), 1./float(texSize.y));\n   \n   texCoords = texCoords * texSize - 0.5;\n\n   \n    vec2 fxy = fract(texCoords);\n    texCoords -= fxy;\n\n    vec4 xcubic = cubic(fxy.x);\n    vec4 ycubic = cubic(fxy.y);\n\n    vec4 c = texCoords.xxyy + vec2 (-0.5, +1.5).xyxy;\n    \n    vec4 s = vec4(xcubic.xz + xcubic.yw, ycubic.xz + ycubic.yw);\n    vec4 offset = c + vec4 (xcubic.yw, ycubic.yw) / s;\n    \n    offset *= invTexSize.xxyy;\n    \n    vec4 sample0 = texture(sampler, offset.xz);\n    vec4 sample1 = texture(sampler, offset.yz);\n    vec4 sample2 = texture(sampler, offset.xw);\n    vec4 sample3 = texture(sampler, offset.yw);\n\n    float sx = s.x / (s.x + s.y);\n    float sy = s.z / (s.z + s.w);\n\n    return mix(\n       mix(sample3, sample2, sx), mix(sample1, sample0, sx)\n    , sy);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy = fragCoord.xy/iResolution.xy;\n   \n    \n    for (float i=0.; i<iResolution.x; i++) {\n        freqs[int(i)] = texelFetch(iChannel1, ivec2(i,1),0).r;\n    }\n\n    freq = freqs[int(xy.x*NFREQ)];\n    vec2 uv = (fragCoord.xy-.5*iResolution.xy)/iResolution.y;\n    float t = t(iTime*.7);\n    vec3 ro = vec3(0, -0.5, 6.-2.*freqs[10]+sin(iTime*.4*iBeatNrg));\n\tvec2 m = (iMouse.xy-.5*iResolution.xy)/iResolution.y;\n    ro.xz *= Rot(sin(t*5.9)*.2+iBeatDet*iBeatNrg-0.15);\n    ro.yz *= Rot(cos(t*7.8+PI*.5+iBeatDet*iBeatNrg-.5)*.05);\n    vec3 rd = GetRayDir(uv, ro, vec3(0,0,-1), 2.);\n    vec3 col = vec3(0);\n    float d = RM(ro, rd).x;\n    float mat = RM(ro,rd).y;\n    \n    if(d<=MAX_DIST){\n        \n        vec3 p = ro + rd*d;\n        vec3 n = calcNormal(p);\n        \n        // LIGHT POSITION\n        vec3 l = normalize(vec3(6,2,1));\n        vec3 l2 = normalize(vec3(-4,2,-1));\n        \n        // LIGHTING\n        vec3 r = reflect(rd,n);\n        vec3 ref = texture(iChannel0, r).rgb;\n        \n        float dif = clamp(dot(l,n),0.,1.);\n        float amb = clamp(dot(normalize(vec3(-6,5,0)),n),0.,1.);\n        vec3 hal = normalize(l-rd);\n        float spe = pow(clamp(dot(hal,n),0.,1.),64.);\n        vec3 hal2 = normalize(l2-rd);\n        float spe2 = pow(clamp(dot(hal2,n),0.,1.),32.);\n        float fresnel = pow(1.+dot(rd, n),3.);\n        \n        col = vec3(dif);\n        col *= spe;\n        col += spe2;\n        col *= 1.-fresnel;\n        col += amb * vec3(.8,.85,.9)*.1;\n        col *= col;\n        \n        // COLOR TEETH\n        if(mat==1.){\n            col = vec3(.0);\n            col += dif*.5+amb*.4;\n            col += spe;\n        }\n        \n        // COLOR EYES & BRAIN\n        if(mat==2.){\n            float fresnel = pow(1.+dot(rd, n),3.);            \n            col = vec3(1.,.7,.5);\n            col *= (1.-fresnel)*(n.zyx*.5+1.)*5.;\n             float start = 0.4;\n        float end = .9;\n        float N = 20.;\n        float inc = (end-start)/N;\n        float sum = 0.0;\n        for (float i=start; i<end; i+=inc) \n            sum += freqs[int(i*NFREQ)];\n        \n            col *= ref*(.3+(1.+freq*freq)*sqrt(sum));\n        } else \n        {\n            vec3 cf = texture(iChannel2, r.yx*p.zy).rgb; \n            col = (col+(cf+cf))*cf*cf;\n        }\n        fragColor = vec4(col,1.);\n        float start = 0.1;\n        float end = 0.2;\n        float N = 10.;\n        float inc = (end-start)/N;\n        float sum = 0.0;\n        for (float i=start; i<end; i+=inc) \n            sum += freqs[int(i*NFREQ)];\n        sum /= N;\n         fragColor.rgb *= .6+.3*sum;\n    } else {\n        vec4 inColor = texture(iChannel1, xy);\n\n        inColor = pow(inColor, vec4(1.0, 1.1, 1.2,1.0));\n        inColor = pow(inColor, vec4(1. / 2.2));\n\n        fragColor = inColor; //*(1.+freq);\n\n\n    \n    }\n  \n     if (fragCoord.y <= 1.) {\n        fragColor = vec4(0,0,0,1);\n    }  \n \n    \n    //vec4 color = vec4(col,1.);\n\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","previewfilepath":"/media/ap/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","type":"music","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n\nvoid mainImage( out vec4 f, in vec2 w ) {\n \n vec2 xy = w /  iResolution.xy;\n vec2 fragPos = xy;\n\tfragPos = (fragPos - 0.5) * 2.0;\n    fragPos.x *= iResolution.x / iResolution.y;\n    \n     float c = cos(iTime * 5.);\n    float s = sin(iTime * 5.);\n    vec2 rot = mat2(c,s,-s,c) * fragPos;\n    \n    vec2 uv = abs(2.*w-iResolution.xy)/iResolution.y * .5;\n    uv = vec2(atan(uv.y,uv.x)/30., length(uv));\n    float nn = 100.;\n    uv.x = abs(uv.x)-.01;\n    float id = floor((1.0-uv.x)*nn);    \n    float t = pow(texture(iChannel1, vec2(1. - id / nn, .25)).x,4.);\n    t *= max(t-abs(uv.y),-1.)*20.;    \n    f.rgb = aces(hsv2rgb(vec3(sin(t*uv.x*1.+iTime*0.2),\n                                  cos(t*.1+iTime+uv.y/2.-uv.x*10.),\n                                  (1.0+cos(iTime*.1*+uv.x))/2.*t*uv.x*10.)));\n       \n   f.rgb *= max(t,0.) * min(max((length(uv.y)-.01)*5.,0.),1.);\n   \n\tvec2 centeredP = w - iResolution.xy / 2.;\n   vec2 samplePos = iResolution.xy / 2. + centeredP * 0.93;\n    \n    vec3 mixedColor = f.rgb * .5 + texture(iChannel0, samplePos / iResolution.xy).rgb * 0.4;\n    \n    if (w.y <= 1.) {\n    float k = iResolution.x/NFREQ;\n        f.a = 1.;\n        f.rgb = vec3(texelFetch(iChannel1, ivec2(w.x*k,1),0).r);\n       \n       \n    } else \n        f = vec4(mixedColor, 1);\n    \n}\n\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define NFREQ 256.\n\nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\nvec3 aces(vec3 x) {\n     return clamp((x * (2.51 * x + 0.03)) / (x * (2.43 * x + 0.59) + 0.14), 0.0, 1.0);\n }\n\nvec3 hueShift(vec3 col, float shift){\n    vec3 m = vec3(cos(shift), -sin(shift) * .57735, 0);\n    m = vec3(m.xy, -m.y) + (1. - m.x) * .33333;\n    return mat3(m, m.zxy, m.yzx) * col;\n}\n\n\nfloat freqs[int(NFREQ)];\n","name":"Common","description":"","type":"common"}]}