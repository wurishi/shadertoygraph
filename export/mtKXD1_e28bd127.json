{"ver":"0.1","info":{"id":"mtKXD1","date":"1686080417","viewed":51,"name":"neon radial waves","username":"ctwm","description":"exploring creative coding assisted by ai","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["waves","neon","ai"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535897932384626433832795\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Time-dependent parameters\n    float time = iTime * 0.3;\n    float aspect = iResolution.x / iResolution.y;\n\n    // Polar coordinates\n    float r = length(uv);\n    float theta = atan(uv.y, uv.x);\n\n    // Radial wave\n    float wave = 0.5 + 0.5 * cos(10.0 * (r - time));\n\n    // Color gradient\n    float hue = time + wave * 0.5;\n    float saturation = wave;\n    float value = wave;\n\n    // Convert HSV to RGB (based on the algorithm from Wikipedia)\n    float c = value * saturation;\n    float x = c * (1.0 - abs(mod(hue * 6.0, 2.0) - 1.0));\n    float m = value - c;\n    vec3 rgb;\n    if (0.0 <= hue && hue < 1.0) {\n        rgb = vec3(c, x, 0.0);\n    } else if (1.0 <= hue && hue < 2.0) {\n        rgb = vec3(x, c, 0.0);\n    } else if (2.0 <= hue && hue < 3.0) {\n        rgb = vec3(0.0, c, x);\n    } else if (3.0 <= hue && hue < 4.0) {\n        rgb = vec3(0.0, x, c);\n    } else if (4.0 <= hue && hue < 5.0) {\n        rgb = vec3(x, 0.0, c);\n    } else {\n        rgb = vec3(c, 0.0, x);\n    }\n    rgb += m;\n\n    // Output to screen\n    fragColor = vec4(rgb, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}