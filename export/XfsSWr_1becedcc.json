{"ver":"0.1","info":{"id":"XfsSWr","date":"1705150364","viewed":96,"name":"Kelvin to rgb","username":"diasgc","description":"kelvin to rgb conversion","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["rgb","conversion","kelvi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ported from https://tannerhelland.com/2012/09/18/convert-temperature-rgb-algorithm-code.html\n\n#define norm(x) clamp(x,0.0,1.0)\n\n#define brightness 0.5\n\n#define kg1a  0.39008157876901960784\n#define kg1b  0.63184144378862745098\n#define kr1a  1.29293618606274509804\n#define kr1b -0.1332047592\n#define kg2a  1.12989086089529411765\n#define kg2b -0.0755148492\n#define kb1a  0.54320678911019607843\n#define kb1b  1.19625408914\n\nvec3 kelvin2rgb(float kelvin){\n\n    kelvin = clamp(kelvin, 1000.0, 40000.0) / 100.0;\n    vec3 rgb = vec3(0,0,0);\n\n    if (kelvin <= 66.0){\n        rgb.r = 1.0;\n        rgb.g = norm(kg1a * log(kelvin) - kg1b);\n    } else {\n        float t = kelvin - 60.0;\n        rgb.r = norm(kr1a * pow(t, kr1b));\n        rgb.g = norm(kg2a * pow(t, kg2b));\n    }\n\n    if (kelvin >= 66.0)\n        rgb.b = 1.0;\n    else if(kelvin <= 19.0)\n        rgb.b = 0.0;\n    else\n        rgb.b = norm(kb1a * log(kelvin - 10.0) - kb1b);\n\n    return rgb;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = brightness + (1.0 - brightness) * kelvin2rgb(uv.x * 40000.0);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}