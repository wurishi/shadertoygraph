{"ver":"0.1","info":{"id":"mt2yzK","date":"1692043415","viewed":22,"name":"point rot","username":"ewornotloc","description":"test","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int p_length = 8;\n\nvec3 points[p_length] = vec3[](\n    vec3(0,0,0),\n    vec3(.5,0,0),\n    vec3(0,.5,0),\n    vec3(0,0,.5),\n    vec3(.5,.5,0),\n    vec3(0,.5,.5),\n    vec3(.5,0,.5),\n    vec3(.5,.5,.5)\n);\n\nbool in_dist_3(vec3 a, vec3 b, float dist){\n    float d = 0.0;\n    for(int k; k < 3; k++){\n        d += pow(a[k]-b[k],2.0);\n    }\n    d = pow(d,0.5);\n    return d <= dist;\n}\n\nbool in_dist_2(vec3 a, vec3 b, float dist){\n    float d = 0.0;\n    for(int k; k < 2; k++){\n        d += pow(a[k]-b[k],2.0);\n    }\n    d = pow(d,0.5);\n    return d <= dist;\n}\n\nfloat sigmoid(float f){\n    return 1.0/(1.0+exp(-f));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    mat3 cam;\n    \n    float theta = exp(-iTime)*6.28;\n    \n    cam[0] = vec3(cos(theta),-sin(theta),0);\n    cam[1] = vec3(sin(theta),cos(theta),0);\n    cam[2] = vec3(0,0,1);\n    \n    mat3 cam2;\n    \n    float phi = sigmoid(6.0*(iTime-1.0))*6.28*.6+.3;\n    \n    cam2[0] = vec3(cos(phi),0,-sin(phi));\n    cam2[1] = vec3(0,1,0);\n    cam2[2] = vec3(sin(phi),0,cos(phi));\n    \n    mat3 cam3;\n    \n    float garbo = sigmoid(6.0*(iTime-1.0))*6.28*.6+.3;\n    \n    cam3[0] = vec3(1,0,0);\n    cam3[1] = vec3(0,cos(garbo),-sin(garbo));\n    cam3[2] = vec3(0,sin(garbo),cos(garbo));\n    \n    float dist_p_mod[p_length] = float[](\n                           1.0+sigmoid(10.0*(iTime-2.35))*4.0,\n                           1.0+sigmoid(10.0*(iTime-2.0))*4.0,\n                           1.0+sigmoid(10.0*(iTime-2.3))*4.0,\n                           1.0+sigmoid(10.0*(iTime-2.15))*4.0,\n                           1.0+sigmoid(10.0*(iTime-2.15))*4.0,\n                           1.0+sigmoid(10.0*(iTime-2.0))*4.0,\n                           1.0+sigmoid(10.0*(iTime-2.3))*4.0,\n                           1.0+sigmoid(10.0*(iTime-2.35))*4.0\n    );\n\n    // Normalized pixel coordinates (from 0 to 1)\n    float aspect_ratio = iResolution.xy[0]/iResolution.xy[1];\n    vec2 uv = fragCoord/min(iResolution.xy[0],iResolution.xy[1]);\n    uv -= vec2(0.5*aspect_ratio, 0.5);\n    uv *= 2.0;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx/2.0+vec3(0,2,4));\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n    float maxtf = -20.0;\n    for(int k; k < p_length; k++){\n        vec3 tf = cam2*cam3*(points[k]-vec3(0.25,0.25,0.25));\n        if (in_dist_2(vec3(uv,0),tf,0.1*sigmoid(tf[2])*dist_p_mod[k])){\n            if (tf[2] < maxtf){continue;}\n            maxtf = tf[2];\n            fragColor = vec4(col-sigmoid(tf[2]*5.0),1);\n        }\n    }\n}","name":"Image","description":"","type":"image"}]}