{"ver":"0.1","info":{"id":"XlBcRG","date":"1508931467","viewed":1012,"name":"image statistics for free","username":"FabriceNeyret2","description":"MIPmap (and wrap) are now available on buffers and videos !\nMeaning we do integration of images for almost free !\n\nHere, compute image mean <I> (top left), 2nd moment sqrt<I²> (top right)\nstddev (bottom left), normalization (bottom right) at varying sizes","likes":8,"published":3,"flags":32,"usePreview":0,"tags":["video","filter","image","processing","integration","variance","signal","statistics","moment","whitebalance","windowed","gpmipmap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// === getting windowed statistics on images : =================\n// BuffA prepares 1st moment (well, it's the image itself :-) ).   \n// BuffB prepares 2nd moment: it's the square of image\n// The moments integrated over an window size are obtained thanks to MIPmap LOD at target level.\n// A reminder than variance is M2-M1², and std-dev is sqrt of this.\n\n// ( NB: this is assuming decorelation of R,G,B channels.\n//   for correlated case, need a decomposition in PCA color space \n//   WIP,private: https://www.shadertoy.com/view/llccRn \n// )\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U *= 2. / iResolution.xy;\n    float l = ( .5+.5*cos(iTime) ) *.88 + .12;\n  \n    vec4 M1 = textureLod( iChannel0, fract(U), l*8. ), // order1 moment\n         M2 = textureLod( iChannel1,       U , l*8. ), // order2 moment\n         S = sqrt(M2-M1*M1);                           // std dev\n    \n    vec2 I = floor(U); \n    O =   I==vec2(0,1) ? M1\n        : I==vec2(1,1) ? sqrt(M2)\n        : I==vec2(0,0) ? S * 4.\n        : .5 + .5 * ( texture( iChannel0, fract(U) ) - M1 ) / S; // normalize average and variance\n    \n    O = pow( O, vec4(1./2.2) );                        // to sRGB\n  //O = vec4( length(O.rgb) ) / 1.7;                   // comment for color version\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 O, vec2 U )\n{\n    O = texture( iChannel0, U / iResolution.xy );\n    O = pow( O, vec4(2.2) ) ;                     // to flat RGB\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 O, vec2 U )\n{\n    O = texture( iChannel0, U / iResolution.xy );\n    O *= O;                                           // order 2 moment\n}","name":"Buf B","description":"","type":"buffer"}]}