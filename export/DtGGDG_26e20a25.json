{"ver":"0.1","info":{"id":"DtGGDG","date":"1684521322","viewed":83,"name":"um???","username":"NikoAnimation","description":"raymarcher","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"mty3zt","parentname":"Ray Marching #2"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// init vars\nfloat aspectRatioX = 1.777777778;\nfloat aspectRatioY = 1.0;\n\nvec2 lightVec = vec2(1.8,0.0);\nvec3 cameraPos = vec3(0.0, 0.0, 0.0);\nvec2 cameraAngle = vec2(0.0,0.0); // 0 - 1 angles\nfloat fov = 1.0;\n\nfloat maxRayLength = 1000.0;\nfloat minDELength = .0001;\n\n\nfloat de_sphere(in vec3 pos, in vec3 objPos, in float radius) {\n    vec3 s = sign(pos);\n    return length((mod(pos,10.0)*s)-objPos)-radius;\n}\nvec3 ray_move(in vec3 pos, in vec2 dir, in float dist) {\n    pos.x += cos(dir.x)*dist;\n    pos.y += sin(dir.x)*dist;\n    pos.z += sin(dir.y)*dist;\n    return pos;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // Signed UV coordinates (-1 to 1)\n    vec2 suv;\n    suv.xy = (uv.xy - .5) * 2.0;\n    suv.x *= aspectRatioX;\n    \n    cameraPos.x = cos(iTime)*.8;\n    cameraPos.y = sin(iTime)*.5;\n    cameraPos.z = sin(iTime)*.5;\n   // cameraAngle.x = cos(iTime)/20.0;\n   // cameraAngle.y = sin(iTime)/60.0;\n    //lightVec.x = -iTime;\n    \n    // Get ray angle\n    vec2 rayAng;\n    rayAng = (suv/fov)+ cameraAngle;\n    \n    float de;\n    float totalDist;\n    vec3 rayPos;\n    rayPos = cameraPos;\n    \n    do { \n        de = de_sphere(rayPos, vec3(10.0,0.0,0.0), 1.0); // Get DE\n        rayPos = ray_move(rayPos, rayAng, de); // Move ray along\n        totalDist += de;\n    } while (totalDist < maxRayLength && de > minDELength);\n    \n    vec3 col;\n    if (totalDist > maxRayLength) { // If ray missed\n        //col = vec3(totalDist/maxRayLength, totalDist/maxRayLength, totalDist/maxRayLength); \n        col = vec3(0.0, 0.0, 0.0); // `---> Set pixel colour to black\n    } if (de < minDELength) {       // If ray hit\n        // SHADOW RAY\n        rayPos = ray_move(rayPos, rayAng, de-(minDELength*10.0));\n        rayAng = lightVec;\n        \n        do { \n            de = de_sphere(rayPos, vec3(10.0,0.0,0.0), 1.0); // Get DE\n            rayPos = ray_move(rayPos, rayAng, de); // Move ray along\n            totalDist += de;\n        } while (totalDist < maxRayLength && de > minDELength);\n        \n        if (de < minDELength) {\n            col = vec3(0.8, 0.8, 0.8);\n        } if (totalDist > maxRayLength) {\n            col = vec3(1.0, 1.0, 1.0);\n        }\n    }\n\n    // Output to screen\n    // test : fragColor = vec4(abs(rayAng.xy/360.0),0.0,1.0);\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}