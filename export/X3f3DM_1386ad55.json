{"ver":"0.1","info":{"id":"X3f3DM","date":"1707501342","viewed":83,"name":"Cosmic Glow","username":"archon","description":"The \"Cosmic Glow\" shader creates a visual effect that simulates a cosmic glow on the screen. It uses a color palette based on cosine functions to generate colors reminiscent of outer space and nebulae.\n\nThe main effect of the shader is a soft, bright lumi","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["opticalillusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette(float t) {\n    vec3 a = vec3(0.2941, 0.0, 0.9804);\n    vec3 b = vec3(0.1569, 0.3922, 0.4078);\n    vec3 c = vec3(0.3804, 0.6314, 0.4863);\n    vec3 d = vec3(0.2039, 0.5725, 0.1294);\n    \n    return a + b * cos(6.28318 * (c * t * d));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normaliza las coordenadas del fragmento\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n\n    vec2 uv0 = uv;\n\n    \n\n    vec3 col = vec3(0.0); // Inicializa col fuera del bucle\n\n    for (float i = 0.0; i < 2.0; i++) {\n        uv = fract(uv);\n        uv -= 0.5;\n\n        uv *= 2.0;\n\n        float d = length(uv) * exp(-length(uv0));\n\n        d = sin(d * 9.0 + iTime) / 100.0;\n        d = abs(d);\n        d = pow(0.01 / d, 1.5);\n\n        col = palette(length(uv0) + i*.4 + iTime*.4);\n        col *= d;\n    }\n\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}