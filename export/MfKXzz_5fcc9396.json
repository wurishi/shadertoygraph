{"ver":"0.1","info":{"id":"MfKXzz","date":"1714746419","viewed":110,"name":"White Noise -  Sound + Image","username":"taylormatson","description":"Basic white noise implementation in GLSL for audio and video.","likes":1,"published":3,"flags":8,"usePreview":0,"tags":["noise","sound","whitenoise","staticnoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalize pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Generate noise using time and UV coordinates\n    float noise = random(iTime * uv.x * uv.y);\n\n    // Output to screen\n    fragColor = vec4(vec3(noise), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI 3.1415926535897932384626433832795\n\n// Function to generate pseudo-random noise\nfloat random(float time) {\n    return fract(sin(dot(time, 78.233)) * 43758.5453123);\n}\n\n// st.xy represents the input coordinates for generating pseudo-random noise.\n\n// vec2(12.9898, 78.233) and 43758.5453123 are arbitrary constants chosen to produce\n// pseudo-randomness. These numbers have been found to work well in practice, but they\n// don't have any inherent significance other than that.\n\n// sin(dot(st.xy, vec2(12.9898,78.233))) computes a value based on the dot product of\n// the input coordinates and the constants, which creates some variation.\n\n// fract() is used to ensure that the returned value is in the range [0, 1].\n\n// The multiplication by 43758.5453123 further scrambles the bits to increase randomness.","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[],"code":"vec2 mainSound(int samp, float time)\n{\n\n    // Amplitude control variable\n    float amp = .1;\n    \n    // Generate noise using time\n    float noise = random(time);\n\n    // Output as stereo white noise\n    return vec2(amp*noise);\n}","name":"Sound","description":"","type":"sound"}]}