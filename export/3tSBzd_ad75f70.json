{"ver":"0.1","info":{"id":"3tSBzd","date":"1599696675","viewed":75,"name":"2D_Gyroid_LO","username":"loganobrien121","description":"Gyroid built atop a raymarcher base","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["gyroid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100. //WE PUT A DECIMEL HERE AND NOT ON MAX STEPS BECAUSE MAX STEPS IS AN INT\n\t\t\t\t\t  //WHEREAS MAX_DIST IS A FLOAT\n#define SURF_DIST 1e-3 //OUR \"SURFACE DIST\" IS WHEN THE SPHERE THAT SEEKS A HIT DURING OUR MARCH REACHES A SMALL SIZE, IN THIS CASE .01\n\t\t\t\t\t  //THEN WE HAVE A HIT\n\n#define S(a, b, t) smoothstep (a, b, t)\n\nmat2 Rot(float a)\n{\n    float s = sin(a);\n    float c = cos(a);\n    \n    return mat2(c, -s, s, c); \n}\n\nfloat sdBox (vec3 p, vec3 s)\n{\n  p = abs(p)-s; \n    \n    return length(max(p, 0.)) + min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat sdGyroid(vec3 p, float scale, float thickness, float bias) \n    {       \n        p *= scale;  //WE SCALE THE POSITION TO SCALE THE GYROID. BUT WHENEVER WE MULTIPLY THE POSITION, WE NEED TO DIVIDE IT BY WHAT WE MULTIPLIED. \n        \n        return abs(dot(sin(p*3.1415), cos(p.zxy)) - bias)/scale-thickness; //WE DIVIDE IT HERE.  ALSO !! -- IF PLAYING WITH A 2D GYROID WE CAN\n        \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   //CHANGE THE SHAPE BY MULTIPLYING THE POSITION'S SIN\n    }\n\nfloat GetDist(vec3 p) //THIS TAKES A POINT  IN 3D SPACE AS AN INPUT\n    {\n        float box = sdBox(p-vec3(0,1,0), vec3(1)); \n        float gyroid = sdGyroid(p, 8., .05, 1.);\n       \n        float d = max(box, gyroid*.8); //WE MULTIPLY BY A NUMBER LESS THAN 1 TO REDUCE THE STEP SIZE SO WE DON'T OVERSTEP WHEN\n        \t\t\t\t\t\t\t   //WE ADJUST THE SCALE ABOVE IN SDGYROID.\n \n        return d;\n    }\n\nfloat RayMarch(vec3 ro, vec3 rd)\n    {\n        float dO = 0.; //Distance origin, or how far away we've marched from the origin. \n        \n        for(int i=0; i < MAX_STEPS; i++) //Loop that goes until you've reached max # of steps. \n        {\n            vec3 p = ro+dO*rd; //Point P is the blue point (\n            float dS = GetDist(p); //Distance to the scene. \n            dO += dS; //We add the distance to the scene to how far we've marched away from origin. \n            \n            if(dS<SURF_DIST || dO > MAX_DIST) break; //If distance to scene  is smaller than some defined surface distance, we have a hit. \n            \t\t\t\t\t\t\t\t\t\t    //Or if it's past our max distance and we haven't hit anything, we break out of it. \n        }\n        return dO; \n    }\n\nvec3 GetNormal(vec3 p) //THIS IS HOW WE FIND THE NORMAL VECTOR, IE THE ORIENTATION OF A SURFACE\n    \t\t\t\t\t//ESSENTIALLY BY DOING THE SAME ALGORITHM TO DETERMINE A SLOPE. WE MAKE 2 POINTS\n    \t\t\t\t\t//VERY CLOSE TOGETHER, THEN SUBTRACT THE DISTANCE A LITTLE TO THE RIGHT, UP AND\n    \t\t\t\t\t//BEHIND THE SURFACE BETWEEN THEM TO FIND WHICH WAY IT'S PORIENTED. \n{\n    \n    vec2 e = vec2(.01, 0); //THIS IS OUR NEW POINT. OUR X VALUE IS .01 AND OUR Y VALUE IS 0.\n    float d = GetDist(p); //THIS IS OUR ORIGINAL POINT IN 3D SPACE WE MADE ABOVE\n    \n    vec3 n = d - vec3( //THESE ARE THE SUBTRACTIONS TO GIVE US OUR NORMAL \n        GetDist(p-e.xyy), //TO THE RIGHT, IE - .01, 0, 0\n        GetDist(p-e.yxy), //UP, IE 0, .01, 0 BECAUSE WE USE THE XY VALUES DEFINED ABOVE, WHEN WE DEFINE VEC2 E\n        GetDist(p-e.yyx)); //BEHIND\n        \n        return normalize(n); \n    \n}\n        \nfloat GetLight(vec3 p)\n        {\n            vec3 lightPos = vec3(0,5,6); //HARDCODE THE LIGHT POSITION. FOR NOW WE'LL SAY IT'S AT THESE POINTS. \n            lightPos.xy += vec2(sin(iTime), cos(iTime))*2.; \n            vec3 l = normalize(lightPos-p); //THIS CALCULATES WHERE LIGHT IS COMING FROM, FROM THE PERSPECTIVE OF THE SURFACE POINT\n            vec3 n = GetNormal(p); \n            \n            float dif = clamp(dot(n, l), 0., 1.); //IF WE DON'T CLAMP IT BETWEEN 0 AND 1, THIS ACTUALLY GIVES US A VALUE BETWEEN -1 AND 1\n            \t\t\t\t\t\t\t\t\t  //WHICH IS FINE WITH A SIMPLE SHAPE LIKE A SPHERE BUT IF WE WANT TO WORK WITH MORE COMPLEX\n            \t\t\t\t\t\t\t\t\t  //STUFF, IT WOULD GIVE US TROUBLE. SO WE CLAMP IT BETWEEN 0 AND 1 \n            \n            float d = RayMarch(p+n*SURF_DIST, l); //THIS IS HOW WE CALCULATE SHADOW. WE RAYMARCH BETWEEN SURFACE POINT AND LIGHT POS AND RETURN A VALUE.\n            \n            if(d<length(lightPos - p)) dif *= .1; //IF THE VALUE WE GET IS SMALLER THAN THE LIGHT POS - SURFACE POSITION, WE KNOW THAT \n            \t\t\t\t\t\t\t\t\t  //WE'RE IN SHADOW. TO MAKE A SHADOW, WE JUST TAKE THE LIGHT VALUE DIF AND MULTIPLY IT BY \n            \t\t\t\t\t\t\t\t\t  //A SMALL AMOUNT TO CREATE THE SHADOW\n            return dif;\n        }\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z)\n{\n    vec3 f = normalize (l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z, \n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d; \n}  \n        \n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy; \n\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0,3,-3); //ray origin, or position of camera\n    \n    ro.yz *= Rot(-m.y*3.14+1.); \n    ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,1,0), 2.); //THE FLOAT AT THE END OF THIS IS THE ZOOM FACTOR\n    \n    float d = RayMarch(ro, rd);\n    \n    if(d<MAX_DIST)\n    {\n        vec3 p = ro + rd * d; \n        vec3 n = GetNormal(p); \n        \n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5; \n        col += dif; \n    }\n    \n    col*= 0.;\n    \n    d = sdGyroid(vec3(uv.x, uv.y, iTime*.1), 20., .01, 0.);\n    col += d*10.;  \n          \n    fragColor = vec4(col,1.0);\n}\n    \n    \n\n\n     \n\n        \n   \n","name":"Image","description":"","type":"image"}]}