{"ver":"0.1","info":{"id":"msSXDc","date":"1671087796","viewed":226,"name":"hand model","username":"VL","description":".","likes":22,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define int2 vec2\n#define float2 vec2\n#define int3 vec3\n#define float3 vec3\n#define int4 vec4\n#define float4 vec4\n#define frac fract\n#define float2x2 mat2\n#define float3x3 mat3\n#define float4x4 mat4\n#define saturate(x) clamp(x,0.,1.)\n#define lerp mix\n#define CurrentTime (iTime)\n#define sincos(x,s,c) s = sin(x),c = cos(x)\n#define mul(x,y) (x*y)\n#define atan2 atan\n#define fmod mod\n#define static\n#define MaxDist 100.f\n#define SurfaceDist 0.0001f\n#define FloatMax 3.402823466e+38f\n#define raymarchDepth 200\n#define raymarchDistMax 400.f\n#define PI2 6.283185f\n#define PI 3.141592f\n\nfloat sdf3dSphere(float3 _point, float4 sphere)\n{\n    return length(_point - sphere.xyz) - sphere.w;\n}\n\nfloat sdf3dCapsule(float3 _point, float3 A, float3 B, float radius)\n{\n    float3 ab = B - A;\n    float3 ap = _point - A;\n    float t = saturate(dot(ap, ab) / dot(ab, ab));\n    \n    return length(ap - t * ab) - radius;\n}\n\nfloat sdf3dBox(float3 _point, float3 box, float3 boxSize)\n{\n    _point = abs(_point - box) - boxSize;\n    return length(max(_point, 0.f)) + min(max(_point.x,max( _point.y, _point.z)), 0.f);\n}\n\nfloat segment(float3 _point, float4 A, float4 B)\n{\n    float3 ab = B.xyz - A.xyz;\n    float3 ap = _point - A.xyz;\n    float t = saturate(dot(ap, ab) / dot(ab, ab));\n    return length(ap - t * ab) - lerp(A.w, B.w, t);\n}\n\nmat3 viewMatrix(vec3 look)\n{\n    vec3 right = normalize(cross(vec3(0.f, 1.f, 0.f), look));\n    vec3 up = cross(look, right);\n    return transpose(mat3(right, up, look));\n}\n\nfloat smoothMin(float a, float b, float k, float n)\n{\n    return min(a, b) - pow(max(k - abs(a - b), 0.f) / k, n) * k / (2.f * n);\n}\n\nfloat smoothMax(float a, float b, float k, float n)\n{\n    return max(a, b) + pow(max(k - abs(a - b), 0.f) / k, n) * k / (2.f * n);\n}\n\nfloat2 hash(float2 p)\n{\n    float3 p3 = frac(float3(p.xyx) * float3(123.1031, 144.1030, 194.0973));\n    p3 += dot(p3, p3.yzx + 33.33);\n    return frac((p3.xx + p3.yz) * p3.zy);\n}\n\nfloat3 hash(float3 p3)\n{\n    p3 = frac(p3 * float3(131.1031, 144.1030, 155.0973));\n    p3 += dot(p3, p3.yxz + 33.33);\n    return frac((p3.xxy + p3.yxx) * p3.zyx);\n}\n\nfloat simplexNoise(float3 p)\n{\n    float k1 = 0.333333f;\n    float k2 = 0.166667f;\n    \n    int3 idx = floor(p + (p.x + p.y + p.z) * k1);\n    float3 a = p - (float3(idx) - float(idx.x + idx.y + idx.z) * k2);\n    \n    int3 tb1Arr[8] = vec3[8]\n    ( int3(0, 0, 1), int3(0, 1, 0), int3( 0), int3(0, 1, 0), int3(0, 0, 1), int3( 0), int3(1, 0, 0), int3(1, 0, 0) );\n    int3 tb2Arr[8] = vec3[8]\n    ( int3(0, 1, 1), int3(0, 1, 1), int3( 0), int3(1, 1, 0), int3(1, 0, 1), int3( 0), int3(1, 0, 1), int3(1, 1, 0) );\n    \n    uint tbIdx = (uint(a.x > a.y) << 2) | (uint(a.x > a.z) << 1) | uint(a.y > a.z);\n    \n    int3 tb1 = tb1Arr[tbIdx], tb2 = tb2Arr[tbIdx];\n    \n    float3 b = a - tb1 + k2;\n    float3 c = a - tb2 + k2 * 2.f;\n    float3 d = a - 1.f + k2 * 3.f;\n    \n    float4 kernel = max(0.5f - float4(dot(a, a), dot(b, b), dot(c, c), dot(d, d)), 0.f);\n    kernel *= kernel;\n    kernel *= kernel;\n    float4 noise = kernel * float4(dot(a, hash(idx)*2.-1.), \n                                   dot(b, hash(idx + tb1)*2.-1.), \n                                   dot(c, hash(idx + tb2)*2.-1.), \n                                   dot(d, hash(idx + 1.f)*2.-1.));\n    \n    return dot(vec4(60.f), noise);\n}\n\nfloat2x2 rot2D(float t)\n{\n    float s, c;\n    sincos(t, s, c);\n    return float2x2(c, s, -s, c);\n}\n\n\nfloat sdHand(float3 p)\n{\n    p.z += 3.f;\n    p.z -= smoothstep(12.f,0.f,abs(p.x))*2.;\n    p.z -= smoothstep(20.f,0.f,abs(p.y-3.))*1.5;\n    p.z *= 0.8f;\n    p.y *= 0.86f;\n    float dist = sdf3dBox(p, float3(0.f,1.f,-0.1f), float3(8.5f-smoothstep(3.f,-6.f,p.y),10.,0.5))-2.f;  \n    dist = smoothMax(dist, sdf3dSphere(p,float4(0.f,0.5f,0.f,12.f)),5.f,2.f);\n    dist = smoothMin(dist, segment(p,float4(-6.5f,-5.f,-1.f,1.4f),float4(-12.f,2.f,-2.f,1.4f)),5.f,2.f);\n    dist = smoothMin(dist, segment(p,float4(-8.5f,-3.f,-2.f,1.5f),float4(-11.f,3.5f,-4.f,1.5f)),5.f,2.f);\n    \n    {\n        dist = smoothMin(dist, segment(p,float4(-3.f,-6.f,-2.f,0.3f),float4(-6.f,2.f,-3.f,0.2f)),7.f,2.f);\n        dist = smoothMin(dist, segment(p,float4(-3.f,-6.f,-2.f,0.3f),float4(4.f,-6.f,-1.f,0.3f)),5.f,2.f);\n        dist = smoothMin(dist, segment(p,float4(4.f,-6.f,-1.f,0.3f),float4(6.f,5.f,-2.f,0.5f)),5.f,2.f);\n        dist = smoothMin(dist,  sdf3dSphere(p,float4(-7.f,7.5f,-2.f,0.3)),5.f,2.f);\n        \n        dist = smoothMin(dist, segment(p,float4(-6.f,-6.f,1.8f,0.35f),float4(-13.f,2.5f,-1.2f,0.35f)),1.f,2.f);\n        dist = smoothMin(dist, segment(p,float4(-1.f,-7.f,2.f,0.2f),float4(-7.f,6.8f,2.3f,0.2f)),1.f,2.5f);\n        dist = smoothMin(dist, segment(p,float4(1.f,-7.f,1.8f,0.3f),float4(-1.f,8.f,2.f,0.3f)),1.f,2.f);\n        dist = smoothMin(dist, segment(p,float4(2.f,-7.f,1.8f,0.3f),float4(2.5f,7.5f,2.f,0.3f)),1.f,2.f);\n        dist = smoothMin(dist, segment(p,float4(4.f,-7.f,2.f,0.3f),float4(7.f,5.8f,2.f,0.3f)),1.f,2.5f);\n    }\n    \n    float time = iTime*2.;\n    \n    float t = sin(time)*0.5+0.5;\n    float3 little = p;   \n    little -= float3(7.f,5.f,0.f);\n    little.yz = mul(little.yz, rot2D(-0.1-t*0.2));  \n    float fingerL = segment(little,float4(0.,0.,0.,1.8f),float4(0.f,7.f,0.f,1.55f));\n    little.y -= 7.f;\n    little.yz = mul(little.yz, rot2D(-0.4-t*0.1));\n    fingerL = smoothMin(fingerL,segment(little,float4(0.,0.,0.,1.45f),float4(0.f,3.2f,0.f,1.3f)),0.2f,2.f);\n    little.y -= 3.5f; \n    little.yz = mul(little.yz, rot2D(-0.7));\n    float tip = segment(little,float4(0.,0.,0.,1.2f),float4(0.f,3.f,1.1f,1.f));\n    tip = smoothMax(tip,-(sdf3dBox(little,float3(0.f,2.5f,2.f), float3(2.5f,3.f,0.5f))),0.7f,2.f);\n    fingerL = smoothMin(fingerL,tip,0.5f,2.f);\n    \n    t= sin(time - 3.14*0.5)*0.5+0.5;\n    float3 ring = p;   \n    ring -= float3(2.8f,7.5f,0.f);\n    ring.yz = mul(ring.yz, rot2D(-0.1-t*0.3));  \n    float fingerR = segment(ring,float4(0.,-1.,0.,2.2f),float4(0.f,7.f,0.f,1.6f));\n    ring.y -= 7.f;\n    ring.yz = mul(ring.yz, rot2D(-0.4-t*0.2));\n    fingerR = smoothMin(fingerR,segment(ring,float4(0.,0.,0.,1.5f),float4(0.f,4.f,0.f,1.4f)),0.2f,2.f);\n    ring.y -= 4.f; \n    ring.yz = mul(ring.yz, rot2D(-0.7-t*0.2));\n    tip = segment(ring,float4(0.,0.,0.,1.3f),float4(0.f,3.2f,1.2f,1.2f));\n    tip = smoothMax(tip,-(sdf3dBox(ring,float3(0.f,2.5f,2.f), float3(2.5f,3.f,0.5f))),0.6f,2.f);\n    fingerR = smoothMin(fingerR,tip,0.5f,2.f);    \n    \n    t = sin(time - 3.14)*0.5+0.5;\n    float3 middle = p;   \n    middle -= float3(-2.f,9.f,0.f);\n    middle.yz = mul(middle.yz, rot2D(-0.1-t*0.4));  \n    float fingerM = segment(middle,float4(-0.2,-1.,0.,2.5f),float4(0.f,7.f,0.f,1.7f));\n    middle.y -= 7.f;\n    middle.yz = mul(middle.yz, rot2D(-0.3-t*0.2));\n    fingerM = smoothMin(fingerM,segment(middle,float4(0.,0.,0.,1.6f),float4(0.f,4.8f,0.f,1.5f)),0.2f,2.f);\n    middle.y -= 4.8f; \n    middle.yz = mul(middle.yz, rot2D(-0.7-t*0.4));\n    tip = segment(middle,float4(0.,0.,0.,1.5f),float4(0.f,3.5f,1.2f,1.25f));\n    tip = smoothMax(tip,-(sdf3dBox(middle,float3(0.f,2.5f,2.2f), float3(2.5f,3.f,0.5f))),0.8f,2.f);\n    fingerM = smoothMin(fingerM,tip,0.5f,2.f);\n    \n    t = sin(time - 3.14*1.5)*0.5+0.5;\n    float3 index = p;   \n    index -= float3(-7.f,7.5f,0.f);\n    index.yz = mul(index.yz, rot2D(-0.1-t*0.3));  \n    float fingerI = segment(index,float4(-0.5,-1.,0.,2.5f),float4(0.f,7.f,0.f,1.7f));\n    index.y -= 7.f;\n    index.yz = mul(index.yz, rot2D(-0.4-t*0.2));\n    fingerI = smoothMin(fingerI,segment(index,float4(0.,0.,0.,1.6f),float4(0.f,4.f,0.f,1.4f)),0.2f,2.f);\n    index.y -= 4.f; \n    index.yz = mul(index.yz, rot2D(-0.6-t*0.2));\n    tip = segment(index,float4(0.,0.,0.,1.3f),float4(0.f,3.5f,1.5f,1.2f));\n    tip = smoothMax(tip,-(sdf3dBox(index,float3(0.f,2.5f,2.5f), float3(3.f,2.f,0.2f))),1.f,2.f);\n    fingerI = smoothMin(fingerI,tip,0.5f,2.f);\n    \n    t =sin(time+0.2)*0.5+0.5;\n    float3 thumb = p;  \n    thumb -= float3(-11.f,3.5f,-4.f);    \n    thumb.xy=mul(thumb.xy,rot2D(-0.1-t*0.2));\n    thumb.yz = mul(thumb.yz,rot2D(-0.5));\n    float fingerT = segment(thumb,float4(0.f,0.f,0.f,1.8f),float4(0.f,6.5f,0.f,1.7f));\n    thumb.y -= 6.5f;\n    thumb.xy=mul(thumb.xy,rot2D(-0.6-t*0.2));\n    tip = segment(thumb,float4(0.,0.,0.,1.6f),float4(-1.8f,4.5f,0.f,1.2f));\n    tip = smoothMax(tip,-(sdf3dBox(thumb,float3(-4.f,2.5f,0.f), float3(1.5f,5.f,1.5f))),1.2f,2.f);\n    fingerT = smoothMin(fingerT,tip,0.5f,2.f);\n    \n    float finger = smoothMin(fingerL, fingerR,0.5,2.0);    \n    finger = smoothMin(finger, fingerM,0.5,2.0);\n    finger = smoothMin(finger, fingerI,0.5,2.0);\n    finger = smoothMin(finger, fingerT,0.5,2.0);\n    dist = smoothMin(dist, finger,2.f,2.f);\n    \n    return dist - simplexNoise(p*0.15)*0.3- simplexNoise(p*0.3)*0.1-0.1;\n}\n\nfloat GetSignDistance(float3 p)\n{  \n    p.y += 11.;\n    if(iMouse.z > 0.f)\n    {\n    p.xz *= rot2D((iMouse.x/iResolution.x+0.5)*PI2*1.1);\n    p.yz *= rot2D((iMouse.y/iResolution.y+0.5)*PI2*1.1);\n    }\n    else\n    {\n        p.xz *= rot2D(iTime*0.5);\n    }\n    return sdHand(p);\n}\n\nfloat RayMarching(float3 rayOrigin, float3 rayDir)\n{\n    float dist = 0.f;\n    for (int i = 0; i < raymarchDepth; ++i)\n    {\n        float3 p = rayOrigin + rayDir * dist;\n        float curr = GetSignDistance(p);\n        \n        dist += curr;\n        if (curr < SurfaceDist || dist > raymarchDistMax)\n        {\n            dist = curr < SurfaceDist ? dist : FloatMax;\n            break;\n        }\n    }\n    \n    return dist;\n}\n\nfloat3 GetSDFNormal(float3 p)\n{\n    return normalize(float3(+1.f, -1.f, -1.f) * GetSignDistance(p + float3(+1.f, -1.f, -1.f) * SurfaceDist) +\n                     float3(-1.f, -1.f, +1.f) * GetSignDistance(p + float3(-1.f, -1.f, +1.f) * SurfaceDist) +\n                     float3(-1.f, +1.f, -1.f) * GetSignDistance(p + float3(-1.f, +1.f, -1.f) * SurfaceDist) +\n                     float3(+1.f, +1.f, +1.f) * GetSignDistance(p + float3(+1.f, +1.f, +1.f) * SurfaceDist));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0*(fragCoord)-iResolution.xy)/iResolution.y;\n\n    float3 ro = float3(0., 3., -28.);\n    float3 rt = float3(0., 0., 0.);\n    float3 rd = mul(transpose(viewMatrix(normalize(rt - ro))), normalize(float3(uv, 1.)));\n    \n    float t = RayMarching(ro, rd);    \n    \n    float3 col = float3(0.f);\n    \n    if(t < FloatMax)\n    {\n        float3 p = ro + t * rd;\n        float3 n = GetSDFNormal(p);\n\n        col = float3((dot(n,normalize(float3(0.f,1.f,-1.f)))));\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}