{"ver":"0.1","info":{"id":"ddVXzw","date":"1680889520","viewed":68,"name":"HSL2RGB","username":"Xonatron","description":"Exploring a cool hsl2rgb() method found in freerunnering's shader: https://www.shadertoy.com/view/XljXzV.\nWhen the original source of the method is known, I will update the credits.\nIf you know the source, let me know! :)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["color","rgb","hsl","colortheory"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Matthew Doucette, Xona Games\n// https://xona.com/\n// Friday, April 7th, 2023\n// ----------------------------\n\n// credits:\n// --------\n//\n//   hsl2rgb() method\n//\n//     https://www.shadertoy.com/view/XljXzV (by freerunnering)\n//     (original source presently unknown)\n\n// constants\n\n#define SPEED 60.0 // in seconds per full scroll\n\nvec3 hsl2rgb( in vec3 c ){\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0,1.0);\n    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // calculate hsl\n    float h = fragCoord.x / iResolution.x; // hue; 0.0..1.0\n    float s = 1.0; // saturation; 0.0..1.0\n    float l = 0.5; // lightness; 0.0..1.0\n    \n    // scroll bottom half\n    if (fragCoord.y / iResolution.y < 0.5) // 0.0..1.0 --> bottom..top\n    {\n        h += iTime / SPEED; // hue; 0.0..infinite (allowed to wrap outside 0.0..1.0)\n    }\n    \n    // convert hsl to rgb\n    vec3 rgb = hsl2rgb(vec3(h, s, l));\n\n    // convert rgb to rgba (rgb with alpha)\n    vec4 rgba;\n    rgba.r = rgb.r;\n    rgba.g = rgb.g;\n    rgba.b = rgb.b;\n    rgba.a = 1.0;\n    \n    fragColor = rgba;\n}","name":"Image","description":"","type":"image"}]}