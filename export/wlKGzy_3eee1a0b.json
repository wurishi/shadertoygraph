{"ver":"0.1","info":{"id":"wlKGzy","date":"1579528997","viewed":73,"name":"Raymarcher Sample","username":"OcarinhaOfTime","description":"A simple raymarching shader.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SURFACE_DIST .01\n#define MAX_DIST 666.\n#define MAX_STEPS 666\n\nfloat getDist(vec3 p){\n    vec4 sphere = vec4(0, 1, 6, 1);\n    float dS = length(p - sphere.xyz) - sphere.w;\n    float dP = p.y;\n    return min(dS, dP);\n}\n\nfloat raymarch(vec3 ro, vec3 rd){\n\tfloat d = 0.;\n    for(int i=0; i<MAX_STEPS; i++){\n        vec3 p = ro + d * rd;\n        float dS = getDist(p);\n        d += dS;\n        if(dS<SURFACE_DIST || d>MAX_DIST) break;        \n    }\n    \n    return d;\n}\n\nvec3 getNormal(vec3 p){\n    float d = getDist(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n    \tgetDist(p-e.xyy),\n        getDist(p-e.yxy),\n        getDist(p-e.yyx)\n    );\n    \n    return normalize(n);\n}\n\nfloat getLight(vec3 p){\n    vec3 lPos = vec3(0, 5, 6);\n    lPos.xz = vec2(cos(iTime), sin(iTime)) * 5.;\n    vec3 l = normalize(lPos - p);\n    vec3 n = getNormal(p);\n    \n    float ndl = dot(n, l);\n    float dif = clamp(ndl, 0., 1.);\n    \n    float dShad = raymarch(p+n*SURFACE_DIST*2., l);\n    if(dShad<length(lPos-p))\n       dif*=.25;\n    \n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    vec3 ro = vec3(0.0, 1.0, 0.0);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    \n    float d = raymarch(ro, rd);\n    \n    vec3 p = ro + rd * d;\n    \n    float dif = getLight(p);\n    vec3 col = vec3(1.-d * .05);\n    col = vec3(dif);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}