{"ver":"0.1","info":{"id":"MdXSD4","date":"1432044269","viewed":263,"name":"Procedural Fire","username":"Fr34K","description":"A test of procedural generation of fire effect I did for a projet for my school. (https://www.shadertoy.com/view/Xds3zN for the primitives (Thanks to Iq) and https://www.shadertoy.com/view/XsX3zB for the noise (Thanks to nikat)).","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["procedural","test","raymarch","fire"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"float distanceT;\n\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n/////// Some distance functions and operators used here, and get from Inigo Quilez //////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n\nfloat sdCone( in vec3 p, in vec3 c )\n{\n  vec2 q = vec2( length(p.xz), p.y );\n  #if 0\n    return max( max( dot(q, c.xy), p.y), -p.y -c.z );\n  #else\n    float d1 = -p.y - c.z;\n    float d2 = max( dot(q, c.xy), p.y);\n    return length(max(vec2(d1, d2), 0.0)) + min(max(d1, d2), 0.);\n  #endif\n}\n\n\n\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////// Simplex 3d noise ///////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n\nvec3 random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n/* skew constants for 3d simplex functions */\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\n/* 3d simplex noise */\nfloat simplex3d(vec3 p) {\n\t /* 1. find current tetrahedron T and it's four vertices */\n\t /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n\t /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n\t \n\t /* calculate s and x */\n\t vec3 s = floor(p + dot(p, vec3(F3)));\n\t vec3 x = p - s + dot(s, vec3(G3));\n\t \n\t /* calculate i1 and i2 */\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t /* x1, x2, x3 */\n\t vec3 x1 = x - i1 + G3;\n\t vec3 x2 = x - i2 + 2.0*G3;\n\t vec3 x3 = x - 1.0 + 3.0*G3;\n\t \n\t /* 2. find four surflets and store them in d */\n\t vec4 w, d;\n\t \n\t /* calculate surflet weights */\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n\t w = max(0.6 - w, 0.0);\n\t \n\t /* calculate surflet components */\n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.0), x3);\n\t \n\t /* multiply d by w^4 */\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t /* 3. return the sum of the four surflets */\n\t return dot(d, vec4(52.0));\n}\n\nfloat simplex3d_fractal(vec3 m) {\n    return   0.5333333*simplex3d(m)\n\t\t\t+0.2666667*simplex3d(2.0*m)\n\t\t\t+0.1333333*simplex3d(4.0*m)\n\t\t\t+0.0666667*simplex3d(8.0*m);\n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////// End of simplex ///////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n\nfloat flame(vec3 p )\n{\n\treturn sdCone(p-(vec3(0.5,0.5,0.5)),vec3(0.6,0.9,0.2));\n}\n\n\nfloat final (vec3 p)\n{\n\tfloat final =  flame(p);\n\treturn final;\n}\n\n\nfloat displace( vec3 p )\n{\n    float d1 = final(p);\n    float d2 = simplex3d_fractal((p+vec3(0.0,-0.2*iTime,0.0))*4.0);\n    float d3 = simplex3d_fractal((p+vec3(0.0,-0.2*iTime,0.0))*8.0);\n    return d1+0.2*d2+0.2*d3 ;\n   // return d1+d2;\n   //return d1;\n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n\nfloat map(vec3 pos)\n{\n\tfloat res = displace(pos);\n\treturn res;\n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n\nbool raymarch(vec3 p, vec3 O)\n{\n\tvec3 ro = p;\n\tvec3 rd = normalize(p-O);\n\n\t//raymarching through the sphere\n\tconst float maxDistance = 1e10;\n\tconst int maxIterations = 50;\n\tconst float closeEnough = 1e-2;\n\tfloat t = 0.;\n\tfor(int i = 0; i < maxIterations; ++i) {\n\t\tfloat dt = map(ro + rd * t);\n\t\tt += dt;\n\t\tif (dt <= closeEnough) {\n\t\t\tdistanceT = t;\n\t\t\treturn true;\n\t\t} else if (t > maxDistance) {\n\t\t\t// Too far; there is some known closer intersection\n\t\t\treturn false;\n\t\t}\n\t}\n    return false;\n\n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\n    vec3 pos = vec3(fragCoord.xy / iResolution.xy, -0.1);\n    vec3 cam = vec3(fragCoord.xy / iResolution.xy, -5.0);\n\tif(raymarch(pos, cam))\n\t{\t\n\t\t\n\t\t// Compute the distance to the center of the flame\n\n\t\tfloat distanceTcenter = length(vec3(0.5,0.2,0.4) - (pos + distanceT*pos));\n\n\t\tvec4 col = mix(vec4(1.,0.,.1,1.),vec4(1.0,0.5,0.3,1.0),1./distanceTcenter);\n\n\t\tfragColor = mix(vec4(0.), col,1./(distanceTcenter));\n\t}\n\telse\n\t{\n\t\t\n\t\tfragColor = vec4(0.1,0.1,0.1,0.0);\n\t}\n\t\n}","name":"","description":"","type":"image"}]}