{"ver":"0.1","info":{"id":"4dfyzr","date":"1487966831","viewed":532,"name":"2D light & shadow","username":"zguerrero","description":"2D light system, using a black & white mask to detect shadow casters.","likes":9,"published":1,"flags":32,"usePreview":0,"tags":["2dlightshadow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float circle(vec2 p, float r, float s)\n{\n    return 1.0-smoothstep(r, r+s, length(p));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n \tvec2 r = vec2(iResolution.x/iResolution.y,1.0);\n    \n    vec2 sd = 4.0/iResolution.xy;\n    float t0 = texture(iChannel0, uv).a;\n    float t1 = texture(iChannel0, uv + vec2(1.0,0.0)*sd).a;\n    float t2 = texture(iChannel0, uv + vec2(-1.0,0.0)*sd).a;\n    float t3 = texture(iChannel0, uv + vec2(0.0,1.0)*sd).a;\n    float t4 = texture(iChannel0, uv + vec2(0.0,-1.0)*sd).a;\n        \n    vec2 pos = vec2(sin(iTime*0.5), cos(iTime*0.5))*0.5+0.5;\n    vec2 lightpos1  = pos;\n    vec2 lightpos2  = 1.0 - lightpos1;\n    vec2 lightpos3  = vec2(lightpos2.x, lightpos1.y)*0.5+0.25;\n    \n    vec4 l1 = circle(uv*r - lightpos1*r, 0.0, 0.1)*vec4(1.0,0.8,0.3,0.0);\n    vec4 l2 = circle(uv*r - lightpos2*r, 0.0, 0.1)*vec4(0.5,0.3,1.0,0.0);\n    vec4 l3 = circle(uv*r - lightpos3*r, 0.0, 0.1)*vec4(0.5,1.0,0.2,0.0);\n    \n    vec4 t = texture(iChannel1, uv);\n\tfragColor = vec4((t0+t1+t2+t3+t4)/vec4(5.0))*t + l1 + l2 + l3;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float circle(vec2 p, float r, float s)\n{\n    return smoothstep(r, r+s, length(p));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    float c11 = circle(vec2((fract(uv.x*2.0)*2.0-1.0), (uv.y-0.75)*4.0), 0.3, 0.01);\n    float c12 = circle(vec2((fract(uv.x*2.0)*2.0-1.0), (uv.y-0.25)*4.0), 0.3, 0.01);\n    \n    fragColor = vec4(c11 * c12);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"float normal(vec2 uv)\n{\n    vec4 tex = texture(iChannel2, uv);\n    return (tex.x+tex.y+tex.z)/3.0;\n}\n\nvec3 calculateNormals(vec2 uv)\n{\n    float offsetX = 4.0/iResolution.x;\n    float offsetY = 4.0/iResolution.y;\n\tvec2 ovX = vec2(0.0, offsetX);\n\tvec2 ovY = vec2(0.0, offsetY);\n    \n\tfloat X = (normal(uv + ovX.yx) - normal(uv - ovX.yx));\n    float Y = (normal(uv + ovY.xy) - normal(uv - ovY.xy));\n    float Z = normal(uv);\n\treturn normalize(vec3(X,Y,Z));\n}\n\nvec2 light(vec2 lightpos, vec2 uv, float atten, float rand)\n{\n    vec2 dir = uv - lightpos;\n    vec2 r = vec2(iResolution.x/iResolution.y,1.0);\n    float dr = distance(lightpos*r, uv*r);\n    \n    vec3 n = calculateNormals(uv*r);\n    float d = length(dir);\n    const float itteration = 8.0;\n    float interval = d/itteration;\n    float a = 1.0 - clamp(dr*atten,0.0,1.0);\n    if(a <= 0.0)\n    {\n        return vec2(0.0,0.0);\n    }\n    float l = max(0.0, dot(n, normalize(vec3(dir.x, dir.y, 0.25))))*a;\n    float s = a;\n    for(float i = 0.0; i < itteration; i++)\n    {\n        vec2 c = normalize(lightpos-uv) * interval * (i+(rand*2.0-1.0)*0.5);\n        float tex = texture(iChannel0, uv + c).x;\n        s *= tex;\n        if(tex == 0.0)\n        {\n            break;\n        }\n    }\n    \n    return vec2(l,s);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n    vec2 pos = vec2(sin(iTime*0.5), cos(iTime*0.5))*0.5+0.5;\n    vec2 lightpos1  = pos;\n    vec2 lightpos2  = 1.0 - lightpos1;\n    vec2 lightpos3  = vec2(lightpos2.x, lightpos1.y)*0.5+0.25;\n    \n    float rand = texture(iChannel1, fragCoord.xy/256.0).x;\n\tvec2 l1 = light(lightpos1, uv, 0.5, rand);\n    vec2 l2 = light(lightpos2, uv, 1.0, rand);\n    vec2 l3 = light(lightpos3, uv, 1.5, rand);\n \n    vec4 c1 = vec4(l1.x*vec3(1.0,0.8,0.3), l1.y);\n    vec4 c2 = vec4(l2.x*vec3(0.5,0.3,1.0), l2.y);\n    vec4 c3 = vec4(l3.x*vec3(0.5,1.0,0.2), l3.y);\n\tfragColor = vec4(c1+c2+c3);\n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n \t\n    vec2 sd = 1.0/iResolution.xy;\n    float t0 = texture(iChannel0, uv).a;\n    float t1 = texture(iChannel0, uv + vec2(1.0,0.0)*sd).a;\n    float t2 = texture(iChannel0, uv + vec2(-1.0,0.0)*sd).a;\n    float t3 = texture(iChannel0, uv + vec2(0.0,1.0)*sd).a;\n    float t4 = texture(iChannel0, uv + vec2(0.0,-1.0)*sd).a;\n    \n\tfragColor = vec4((t0+t1+t2+t3+t4)/vec4(5.0));\n}","name":"Buf C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n \t\n    vec2 sd = 2.0/iResolution.xy;\n    float t0 = texture(iChannel0, uv).a;\n    float t1 = texture(iChannel0, uv + vec2(1.0,0.0)*sd).a;\n    float t2 = texture(iChannel0, uv + vec2(-1.0,0.0)*sd).a;\n    float t3 = texture(iChannel0, uv + vec2(0.0,1.0)*sd).a;\n    float t4 = texture(iChannel0, uv + vec2(0.0,-1.0)*sd).a;\n    \n\tfragColor = vec4((t0+t1+t2+t3+t4)/vec4(5.0));\n}","name":"Buf D","description":"","type":"buffer"}]}