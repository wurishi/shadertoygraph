{"ver":"0.1","info":{"id":"cltBRN","date":"1701025633","viewed":85,"name":"Bitshift variations (music)","username":"athibaul","description":"A port of Rob Miles' \"bitshift variations\" to a shader. The C code is quite short, but the adaptation to GLSL forces us to lengthen it a bit: perhaps it could be golfed?","likes":5,"published":1,"flags":8,"usePreview":0,"tags":["sound","music","chiptune","golf","codegolf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Bitshift Variations in C Minor\n// Copyright 2013 Robert Miles\n// soundcloud.com/robertskmiles\n// https://www.youtube.com/watch?v=MqZgoNRERY8\n\n// This is an impressive example of a \"bytebeat\", i.e. music generated with\n// very little code thanks to smart use of bit operations.\n// For more on bytebeat, see\n// http://canonical.org/~kragen/bytebeat/\n\n// An analysis of the Bitshift Variations can be found here\n// https://sylphe.ch/bitfiddle/index.html\n\n// In fact, this piece had already been ported to shadertoy by ttg\n// https://www.shadertoy.com/view/4dlyWl\n\n// More on code golfing Bitshift Variations\n// https://codegolf.stackexchange.com/questions/261548/can-bitshift-variations-in-c-minor-be-compressed-down-to-less-than-185-character\n\n#define R iResolution.xy\n\nint n, s, q[16] = int[16](66,89,125,54,89,66,54,37,81,106,125,54,106,81,54,37);\n\nint g(int i,int x,int t,int o){\n    t = t%8 + ((3&i>>16)>0?0:8);\n    return (3&x&(i*(q[t]+51)>>o))<<4;\n}\nint sig(int i)\n{\n    n=i>>14;\n    s=i>>17;\n    i = g(i,1,n,12)+g(i,s,n^i>>13,10)+g(i,s/3,n+((i>>11)%3),10)+g(i,s/5,8+n-((i>>10)%3),9);\n    return i&255;\n}\n\nvoid mainImage( out vec4 Q, in vec2 U)\n{\n    // A simple but effective visualization, which represents all samples of the signal using\n    // only three 1-bit channels\n    Q-=Q;\n    int i = int(8000. * iTime); i -= i&255;\n    U = (2.*U-R)/R.y*0.5+0.5;\n    U = floor(U*256.);\n    if(0. < U.x && U.x < 256.) {\n        i += int(U.x+256.*U.y);\n        i = sig(i);\n        Q = vec4(i&64,i&32,i&16,1);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// 314 chars\n\nint n, s,\n// \"BY}6YB6%\", \"Qj}6jQ6%\"\nq[16] = int[16](66,89,125,54,89,66,54,37,81,106,125,54,106,81,54,37);\n\nint g(int i,int x,int t,int o){\n    return (3&x&(i*(q[t%8 + ((3&i>>16)>0?0:8)]+51)>>o))<<4;\n}\nvec2 mainSound(int i, float t)\n{\n    i=(8*i)/44; // naive resampling\n    return vec2(\n        g(i,1,n=i>>14,12)\n        + g(i,s=i>>17,n^i>>13,10)\n        + g(i,s/3,n+((i>>11)%3),10)\n        + g(i,s/5,8+n-((i>>10)%3),9)\n    ) / 255.;\n}","name":"Sound","description":"","type":"sound"}]}