{"ver":"0.1","info":{"id":"4lVcWc","date":"1538074368","viewed":133,"name":"AA Plasmoid","username":"thugcee","description":"My first shader.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["plasma","antialiasing","fwidth"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 bg = vec3(0.2, 0.1, 0.1);\nvec3 fg = vec3(0.7, 0.7, 0.6);\nvec3 fg2 = vec3(0.5, 0.2, 0.2);\nfloat baseWidth = .05;\n\n// just a scaled sinus curve\nvec2 fun1(in vec2 uv) {\n    return vec2(uv.x, sin(uv.x * 12.0) * .3 + 0.5);\n}\n\n// some crazy animated curve\nvec2 fun2(in vec2 uv) {\n    return vec2(uv.x, sin(uv.x * (cos((uv.x + iTime/3.0) * 4.0) * 12.0) \n                          + iTime) * .1 + 0.5) + fun1(uv)/1.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // compute a point on line (currently depends on x position only)\n    vec2 pp = fun2(uv)/2.0;\n    \n\t// compute derivative of distance to the current point on the line (for AA)\n    float d = length(uv - pp);\n    float w = fwidth(d)/2.0;\n    \n    // randomize width of the line\n    float width = baseWidth/3.0 + .2 * fun2(uv).y;\n    \n\t// add gradient to the background\n    float grad = .1 * length(uv - vec2(.5,.5));\n    \n\t// compute color based on distance from pp\n    vec3 c = mix(fg, bg - grad, smoothstep(-w, w, d - width));\n\tc = mix(fg2, c, smoothstep(-w, w, d - width + .02));\n        \n    // Output to screen\n    fragColor = vec4(c ,1.0);\n}","name":"Image","description":"","type":"image"}]}