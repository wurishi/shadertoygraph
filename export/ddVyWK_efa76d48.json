{"ver":"0.1","info":{"id":"ddVyWK","date":"1700186708","viewed":35,"name":"mandlebrot but ... not half bad","username":"FrederickAmpsUp","description":"owo","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 complex_pow(vec2 z1, vec2 z2) {\n    // Convert z1 to polar form\n    float r1 = sqrt(z1.x * z1.x + z1.y * z1.y);\n    float theta1 = atan(z1.y/z1.x);\n\n    // Compute the power in polar form\n    float result_r = pow(r1, z2.x) * exp(-z2.y * theta1);\n    float result_theta = z2.x * theta1 + z2.y * log(r1);\n\n    // Convert the result back to Cartesian form\n    vec2 result;\n    result.x = result_r * cos(result_theta);\n    result.y = result_r * sin(result_theta);\n\n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord )/iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec2 z = vec2(0.0);\n    int i;\n    for (i = 0; i < 1000; ++i) {\n        if (z.x*z.x+z.y*z.y > 4.0) break;\n        z = complex_pow(z, vec2(2.0,0.0))+uv;\n    }\n\n    // Output to screen\n    if (length(z) < 2.0)\n        fragColor = vec4(vec3(float(0.0)), 1.0);\n    else\n        fragColor = vec4(vec3(vec2(float(i)/50.0), mod(float(i), 10.0)/10.0), 1.0);\n}","name":"Image","description":"","type":"image"}]}