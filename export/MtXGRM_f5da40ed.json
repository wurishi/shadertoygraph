{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"texture","id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}},{"channel":1,"type":"texture","id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"code":"const float PI = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679;\n\nfloat noise( in vec2 x) {\n    vec2 f = fract(x);\n\tvec2 uv = floor(x) + f.xy*f.xy*(3.0-2.0*f.xy);    \n\treturn -1.0 + 2.0*mod(texture( iChannel1, (uv+0.5)/256.0, -100.0 ).z,0.5);\n}\n\nvec4 process(vec2 uv,vec2 offset)\n{\n\treturn vec4(noise((uv+offset)*clamp(sin(iTime*0.2)+2.0,0.3,2.0*PI)*100.0),\n                noise((uv+offset)*clamp(sin(iTime*0.2)+2.02,0.3,2.0*PI)*100.0),\n                noise((uv+offset)*clamp(sin(iTime*0.2)+2.04,0.3,2.0*PI)*100.0),\n                1)*texture(iChannel0,uv*02.0+vec2(cos(iTime),sin(iTime)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy / iResolution.xy);\n    float Vignette = pow(1.0-(distance(uv,vec2(0.5))),3.0); \n\tfragColor = Vignette*1.0-mod(process(uv,vec2(-0.5)),0.3);\n}","name":"Image","description":"","type":"image"},{"outputs":[{"channel":0,"id":"XsfGRr"}],"inputs":[{"channel":0,"type":"texture","id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"code":"const float PI = 3.14159265358979323846264;\nconst float waveformA = 2.2;\nconst float waveformB = 1.2;\nconst float toneChange = 2.0;\nconst float crunchVolume = 1.2;\nconst float riffCrunch = 10.0;\nconst float crunchRate = 1.2;\n\nfloat sampleRiff(float time,in vec2 x) \n{\n    vec2 f = fract(x);\n\tvec2 uv = floor(x) + f.xy*f.xy*(3.0-2.0*f.xy);\n    /*(mod(time,10.0) < 0.1)\n    {\n    \treturn -1.0 + 2.0*texture( iChannel0, (uv+0.5)/256.0, -1.0 ).x;\t\n    }*/\n    float crunchMin = 100.0;\n    float crunchMax = 200.0;\n    float divisor = 0.1;\n    if(mod(time,10.0) < 5.0)\n    {\n    \tcrunchMin = 128.0;\n        crunchMax = 256.0;\n        divisor = 0.3;\n    }\n    float repetitveCrunch = clamp((sin(time*divisor)*256.0),crunchMin,crunchMax);\n    return -1.0 + 2.0*texture( iChannel0, (uv+0.5)/repetitveCrunch, -10.0 ).x;\t\n}\n\n//TODO: Make this work... Move between two nodes.\nfloat calcTone(float minTone, float maxTone,float time,float speed) \n{\n    //Interpolate and use normalized time.\n\treturn mix(minTone,maxTone,sin(time*speed)/(2.0*PI));\n}\n\nfloat calcLeft(float time, float whiteNoise)\n{\n    //float tone = calcTone(toneBMin,toneBMax,time,toneChange); //Unstable.\n    float movingTone = waveformA;\n    if(mod(time,5.0) < 3.0)\n    {\n    \tmovingTone += 1.1;\n    }\n    float volume = clamp(cos(time),0.1,2.0);\n\treturn (sin((waveformA*330.0*time))+cos((movingTone*330.0*time))+(whiteNoise*crunchVolume))*volume;\n}\n\nfloat calcRight(float time, float whiteNoise)\n{\n    float volume = clamp(sin(time),0.2,1.0);\n    float movingTone = waveformB;\n    if(mod(time,2.0) < 5.0)\n    {\n    \tmovingTone += 0.4;\n    }\n\treturn (cos((waveformA*330.0*time))+sin((movingTone*330.0*time))+(whiteNoise*crunchVolume))*volume;\n}\n\nvec2 mainSound( in int samp,float time)\n{\n    float riff = sampleRiff(time,vec2(sin(crunchRate*time*PI)*riffCrunch,\n                                 cos(crunchRate*time*PI))*riffCrunch);\n\n    return vec2(calcLeft(time,riff),calcRight(time,riff));\n}\n","name":"Sound","description":"","type":"sound"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":true,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MtXGRM","date":"1419739230","viewed":291,"name":"Riff Machine (WIP)","username":"Nathrakus","description":"Procedural Droning inspired by bands like Sunn O))), Earth, and Boris.\nUpdate: Improved pacing and textures.","likes":9,"published":1,"flags":8,"usePreview":0,"tags":["noise","drone","harsh","riff"],"hasliked":0,"parentid":"","parentname":""}}