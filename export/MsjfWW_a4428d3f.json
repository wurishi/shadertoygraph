{"ver":"0.1","info":{"id":"MsjfWW","date":"1501011209","viewed":657,"name":"[SH17B] Insult Sword Fighting","username":"drivenbynostalgia","description":"My tribute to a wonderful adventure game series.\n\nIf it is not compiling, see top defines in Buf B.\n\nText rendering: https://www.shadertoy.com/view/Mt2GWD by Flyguy\nCharacter sprites: http://www.int33h.com/test/mi/","likes":8,"published":1,"flags":96,"usePreview":1,"tags":["game","sword","island","monkey","insult","fighting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXSDj","filepath":"https://soundcloud.com/zeitgestalten/main-titles?in=zeitgestalten/sets/comi","previewfilepath":"https://soundcloud.com/zeitgestalten/main-titles?in=zeitgestalten/sets/comi","type":"musicstream","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define CURRENT_STATE 0\n#define ANIMATION_TIME 7\n\n#define STATE_GAME_OVER 8\n\nivec2 indexToCoord(int index)\n{\n    ivec2 viewport = ivec2(iResolution + 0.5);\n    \n    return ivec2(index % viewport.x, index / viewport.x);\n}\n\nint coordToIndex(vec2 coord)\n{\n    ivec2 viewport = ivec2(iResolution + 0.5);\n    \n    return int(coord.y) * viewport.x + int(coord.x);\n}\n\nint read(int index)\n{\n\treturn int(texelFetch(iChannel0, indexToCoord(index), 0).x + 0.5);\n}\n\nfloat readF(int index)\n{\n\treturn texelFetch(iChannel0, indexToCoord(index), 0).x;\n}\n\nconst vec2 canvasSize = vec2(320.0, 240.0);\nconst float canvasAspectRatio = 4.0 / 3.0;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float viewportAspectRatio = iResolution.x / iResolution.y;\n    \n    vec2 scaledCanvasSize;\n    vec2 canvasOffset;\n    \n    if (viewportAspectRatio > canvasAspectRatio)\n    {\n        scaledCanvasSize.x = canvasAspectRatio * iResolution.y;\n        scaledCanvasSize.y = iResolution.y;\n        \n        canvasOffset.x = floor(0.5 * (iResolution.x - scaledCanvasSize.x));\n        canvasOffset.y = 0.0;\n    }\n    else\n    {\n        scaledCanvasSize.x = iResolution.x;\n        scaledCanvasSize.y = iResolution.x / canvasAspectRatio;\n        \n        canvasOffset.x = 0.0;\n        canvasOffset.y = floor(0.5 * (iResolution.y - scaledCanvasSize.y));\n    }\n\n    if ((any(lessThan(fragCoord, canvasOffset))) || (any(greaterThanEqual(fragCoord, scaledCanvasSize + canvasOffset))))\n    {\n        vec2 uv = fragCoord.xy / iResolution.xy;\n\t\tfragColor = vec4(0.6 + 0.4 * sin(vec3(0.166, 0.273, 0.5) * iTime + vec3(uv, uv.x + uv.y) * 1.337), 1.0);\n    }\n    else\n    {\n    \tfragColor = texelFetch(iChannel1, ivec2((fragCoord - canvasOffset) / scaledCanvasSize * canvasSize), 0);\n    }\n    \n    int index = coordToIndex(fragCoord);\n    int currentState = read(CURRENT_STATE);\n    \n    if (currentState == STATE_GAME_OVER)\n    {\n        float fadeOutTime = readF(ANIMATION_TIME);\n        float fadeOut = 1.0 - clamp((fadeOutTime - iTime) / 5.0, 0.0, 1.0);\n        vec3 luminanceWeightedColor = vec3(0.299, 0.587, 0.114) * fragColor.xyz;\n        float perceivedBrightness = length(luminanceWeightedColor);\n        \n\t\tfragColor.xyz = mix(fragColor.xyz, vec3(perceivedBrightness), fadeOut);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define write(x, value) if (index == x) { fragColor = vec4(vec3(float(value)), 1.0); }\n\n#define CURRENT_STATE 0\n#define CURRENT_PAGE 4\n#define ANIMATION_TIME 7\n#define HIGHLIGHT 9\n#define SCORE 11\n#define DIALOGUE 12\n#define DIALOGUE_TIME 13\n#define DIALOGUE_PERSON 14\n\n#define STATE_OPENING 0\n#define STATE_INSULT_MENU 1\n#define STATE_OFFENSE_INSULT_DIALOGUE 2\n#define STATE_DEFENSE_INSULT_DIALOGUE 3\n#define STATE_CORRECT_RESPONSE_DIALOGUE 4\n#define STATE_WRONG_RESPONSE_DIALOGUE 5\n#define STATE_RESPONSE_MENU 6\n#define STATE_FIGHT 7\n#define STATE_GAME_OVER 8\n#define STATE_INSULT_MOUSE_DOWN 9\n#define STATE_INSULT_MOUSE_UP 10\n#define STATE_RESPONSE_MOUSE_DOWN 11\n#define STATE_RESPONSE_MOUSE_UP 12\n\n#define HIGHLIGHT_NONE 0\n#define HIGHLIGHT_ARROW_DOWN 1\n#define HIGHLIGHT_ARROW_UP 2\n#define HIGHLIGHT_LINE_0 3\n#define HIGHLIGHT_LINE_1 4\n#define HIGHLIGHT_LINE_2 5\n#define HIGHLIGHT_LINE_3 6\n\n#define PERSON_GUYBRUSH 0\n#define PERSON_PIRATE 1\n\nconst float dialogueDuration = 4.0;\nconst float fightDuration = 2.0;\n\nconst vec2 canvasSize = vec2(320.0, 240.0);\nconst float canvasAspectRatio = 4.0 / 3.0;\n\nconst ivec2 arrowSize = ivec2(12, 14);\nconst ivec2 arrowUpOffset = ivec2(14, 77);\nconst ivec2 arrowDownOffset = ivec2(14, 5);\nconst ivec4 arrowUpBoxPixel = ivec4(arrowUpOffset, arrowUpOffset + arrowSize);\nconst ivec4 arrowDownBoxPixel = ivec4(arrowDownOffset, arrowDownOffset + arrowSize);\n\nconst ivec2 menuLineSize = ivec2(260, 24);\nconst ivec2 menuLineOffsets[4] = ivec2[](ivec2(40, 72), ivec2(40, 48), ivec2(40, 24), ivec2(40, 0));\n\nconst int insultResponsePermutations[16] = int[](9, 0, 4, 13, 7, 11, 8, 12, 5, 14, 15, 2, 6, 10, 1, 3);\n\nconst float pirateResponseAccuracy = 0.75;\n\nivec2 indexToCoord(int index)\n{\n    ivec2 viewport = ivec2(iResolution + 0.5);\n    \n    return ivec2(index % viewport.x, index / viewport.x);\n}\n\nint coordToIndex(vec2 coord)\n{\n    ivec2 viewport = ivec2(iResolution + 0.5);\n    \n    return int(coord.y) * viewport.x + int(coord.x);\n}\n\nint read(int index)\n{\n\treturn int(texelFetch(iChannel0, indexToCoord(index), 0).x + 0.5);\n}\n\nfloat readF(int index)\n{\n\treturn texelFetch(iChannel0, indexToCoord(index), 0).x;\n}\n\nbool positionInBox(vec2 position, vec4 box)\n{\n    return (all(greaterThanEqual(position, box.xy))) && (all(lessThanEqual(position, box.zw)));\n}\n\nfloat hash(float n)\n{\n    return fract(sin(n) * 43758.5453);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    int index = coordToIndex(fragCoord);\n    \n    if ((iFrame == 0) || (iTime == 0.0))\n    {\n        fragColor = vec4(0.0);\n        \n        write(CURRENT_STATE, STATE_OPENING);\n        write(DIALOGUE, 32);\n        write(DIALOGUE_TIME, iTime + dialogueDuration);\n        write(DIALOGUE_PERSON, PERSON_GUYBRUSH);\n        write(CURRENT_PAGE, 0);\n        write(ANIMATION_TIME, 0);\n        write(HIGHLIGHT, HIGHLIGHT_NONE);\n        write(SCORE, 3);\n        \n        return;\n    }\n    \n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n\n    int currentState = read(CURRENT_STATE);\n    \n    if (currentState == STATE_OPENING)\n    {\n        int dialogueIndex = read(DIALOGUE);\n\n        if (dialogueIndex > 0)\n        {\n            float dialogueEndTime = readF(DIALOGUE_TIME);\n\n            if (dialogueEndTime <= iTime)\n            {\n                write(CURRENT_STATE, STATE_INSULT_MENU);\n                write(DIALOGUE, 0);\n                write(DIALOGUE_TIME, 0.0);\n                write(DIALOGUE_PERSON, 0);\n            }\n        }\n    }\n    else if (currentState == STATE_INSULT_MENU)\n    {\n        bool mouseDown = (iMouse.z >= 0.0);\n        \n        if (mouseDown)\n        {\n        \twrite(CURRENT_STATE, STATE_INSULT_MOUSE_DOWN);\n        }\n    }\n    else if (currentState == STATE_RESPONSE_MENU)\n    {\n        bool mouseDown = (iMouse.z >= 0.0);\n        \n        if (mouseDown)\n        {\n        \twrite(CURRENT_STATE, STATE_RESPONSE_MOUSE_DOWN);\n        }\n    }\n    else if (currentState == STATE_OFFENSE_INSULT_DIALOGUE)\n    {\n        float dialogueEndTime = readF(DIALOGUE_TIME);\n\n        if (dialogueEndTime <= iTime)\n        {\n            int dialogueNumber = read(DIALOGUE);\n            \n            int correctResponseDialogue = dialogueNumber + 1;\n            int pickedResponseDialogue = 0;\n            \n            float random = hash(iTime);\n            \n            if (random <= pirateResponseAccuracy - 1.0 / 16.0)\n            {\n                pickedResponseDialogue = correctResponseDialogue;\n            }\n            else\n            {\n                pickedResponseDialogue = int(random * 16.0) * 2 + 1;\n            }\n            \n            if (pickedResponseDialogue == correctResponseDialogue)\n            {\n            \twrite(CURRENT_STATE, STATE_CORRECT_RESPONSE_DIALOGUE);\n            }\n            else\n            {\n           \t\twrite(CURRENT_STATE, STATE_WRONG_RESPONSE_DIALOGUE);\n            }\n\n            write(DIALOGUE, pickedResponseDialogue);\n        \twrite(DIALOGUE_TIME, iTime + dialogueDuration);\n        \twrite(DIALOGUE_PERSON, PERSON_PIRATE);\n        }\n    }\n    else if (currentState == STATE_DEFENSE_INSULT_DIALOGUE)\n    {\n        float dialogueEndTime = readF(DIALOGUE_TIME);\n\n        if (dialogueEndTime <= iTime)\n        {\n            write(CURRENT_STATE, STATE_RESPONSE_MENU);\n            write(CURRENT_PAGE, 4);\n        }\n    }\n    else if (currentState == STATE_CORRECT_RESPONSE_DIALOGUE)\n    {\n        float dialogueEndTime = readF(DIALOGUE_TIME);\n\n        if (dialogueEndTime <= iTime)\n        {\n            int currentPerson = read(DIALOGUE_PERSON);\n            int currentScore = read(SCORE);\n\n            write(SCORE, (currentPerson == PERSON_GUYBRUSH) ? (currentScore + 1) : (currentScore - 1));\n            write(CURRENT_STATE, STATE_FIGHT);\n            write(ANIMATION_TIME, iTime + fightDuration);\n        }\n    }\n    else if (currentState == STATE_WRONG_RESPONSE_DIALOGUE)\n    {\n        float dialogueEndTime = readF(DIALOGUE_TIME);\n\n        if (dialogueEndTime <= iTime)\n        {\n            int currentPerson = read(DIALOGUE_PERSON);\n            int currentScore = read(SCORE);\n\n            write(SCORE, (currentPerson == PERSON_GUYBRUSH) ? (currentScore - 1) : (currentScore + 1));\n            write(DIALOGUE_PERSON, 1 - currentPerson);\n            write(CURRENT_STATE, STATE_FIGHT);\n            write(ANIMATION_TIME, iTime + fightDuration);\n        }\n    }\n    else if (currentState == STATE_FIGHT)\n    {\n        float fightAnimationTime = readF(ANIMATION_TIME);\n        \n        if (fightAnimationTime < iTime)\n        {\n            int currentScore = read(SCORE);\n\n            if (currentScore <= 0)\n            {\n                write(DIALOGUE, 33);\n                write(DIALOGUE_PERSON, PERSON_GUYBRUSH);\n                write(CURRENT_STATE, STATE_GAME_OVER);\n                write(ANIMATION_TIME, iTime + 5.0);\n            }\n            else if (currentScore >= 6)\n            {\n                write(DIALOGUE, 33);\n                write(DIALOGUE_PERSON, PERSON_PIRATE);\n                write(CURRENT_STATE, STATE_GAME_OVER);\n                write(ANIMATION_TIME, iTime + 5.0);\n            }\n            else\n            {\n                int currentPerson = read(DIALOGUE_PERSON);\n\n                if (currentPerson == PERSON_GUYBRUSH)\n                {\n                    write(CURRENT_STATE, STATE_INSULT_MENU);\n                    write(CURRENT_PAGE, 0);\n                }\n                else\n                {\n                    float random = hash(iTime);\n\n                    int randomInsult = int(random * 16.0) * 2;\n\n                    write(CURRENT_STATE, STATE_DEFENSE_INSULT_DIALOGUE);\n                    write(DIALOGUE, randomInsult);\n                    write(DIALOGUE_TIME, iTime + dialogueDuration);\n                    write(DIALOGUE_PERSON, PERSON_PIRATE);\n                }\n            }\n        }\n    }\n    else if (currentState == STATE_GAME_OVER)\n    {\n        // Nothing to do here - game is reset with the Shadertoy reset button\n    }\n    else if ((currentState == STATE_INSULT_MOUSE_UP) || (currentState == STATE_RESPONSE_MOUSE_UP) ||\n            (currentState == STATE_INSULT_MOUSE_DOWN) || (currentState == STATE_RESPONSE_MOUSE_DOWN))\n    {\n        vec2 relativeMousePosition = iMouse.xy / iResolution.xy;\n    \tfloat viewportAspectRatio = iResolution.x / iResolution.y;\n    \n        vec2 scaledCanvasSize;\n        vec2 canvasOffset;\n\n        if (viewportAspectRatio > canvasAspectRatio)\n        {\n        \tscaledCanvasSize.x = canvasAspectRatio * iResolution.y;\n            scaledCanvasSize.y = iResolution.y;\n\n            canvasOffset.x = floor(0.5 * (iResolution.x - scaledCanvasSize.x));\n            canvasOffset.y = 0.0;\n        }\n        else\n        {\n        \tscaledCanvasSize.x = iResolution.x;\n            scaledCanvasSize.y = iResolution.x / canvasAspectRatio;\n\n            canvasOffset.x = 0.0;\n            canvasOffset.y = floor(0.5 * (iResolution.y - scaledCanvasSize.y));\n        }\n        \n\t\tvec2 canvasScale = scaledCanvasSize / vec2(canvasSize);\n        \n        bool inArrowUpBox = false;\n        bool inArrowDownBox = false;\n        bool inLine0 = false;\n        bool inLine1 = false;\n        bool inLine2 = false;\n        bool inLine3 = false;\n\n        int currentPage = read(CURRENT_PAGE);\n        \n        if ((currentPage % 4) > 0)\n        {\n        \tvec4 arrowUpBoxScaled = vec4(arrowUpBoxPixel) * canvasScale.xyxy + canvasOffset.xyxy;\n        \tvec4 arrowUpBox = arrowUpBoxScaled / iResolution.xyxy;\n\n\t\t\tif (positionInBox(relativeMousePosition, arrowUpBox))\n            {\n                inArrowUpBox = true;\n        \t}\n        }\n\n        if ((currentPage % 4) < 3)\n        {\n        \tvec4 arrowDownBoxScaled = vec4(arrowDownBoxPixel) * canvasScale.xyxy + canvasOffset.xyxy;\n        \tvec4 arrowDownBox = arrowDownBoxScaled / iResolution.xyxy;\n\n\t\t\tif (positionInBox(relativeMousePosition, arrowDownBox))\n            {\n                inArrowDownBox = true;\n        \t}\n        }\n        \n        vec4 menuLine0BoxScaled = vec4(menuLineOffsets[0], menuLineOffsets[0] + menuLineSize) *\n            canvasScale.xyxy + canvasOffset.xyxy;\n        vec4 menuLine0Box = menuLine0BoxScaled / iResolution.xyxy;\n        \n        if (positionInBox(relativeMousePosition, menuLine0Box))\n        {\n            inLine0 = true;\n       \t}\n        \n        vec4 menuLine1BoxScaled = vec4(menuLineOffsets[1], menuLineOffsets[1] + menuLineSize) *\n            canvasScale.xyxy + canvasOffset.xyxy;\n        vec4 menuLine1Box = menuLine1BoxScaled / iResolution.xyxy;\n        \n        if (positionInBox(relativeMousePosition, menuLine1Box))\n        {\n            inLine1 = true;\n       \t}\n        \n        vec4 menuLine2BoxScaled = vec4(menuLineOffsets[2], menuLineOffsets[2] + menuLineSize) *\n            canvasScale.xyxy + canvasOffset.xyxy;\n        vec4 menuLine2Box = menuLine2BoxScaled / iResolution.xyxy;\n        \n        if (positionInBox(relativeMousePosition, menuLine2Box))\n        {\n            inLine2 = true;\n       \t}\n        \n        vec4 menuLine3BoxScaled = vec4(menuLineOffsets[3], menuLineOffsets[3] + menuLineSize) *\n            canvasScale.xyxy + canvasOffset.xyxy;\n        vec4 menuLine3Box = menuLine3BoxScaled / iResolution.xyxy;\n        \n        if (positionInBox(relativeMousePosition, menuLine3Box))\n        {\n            inLine3 = true;\n       \t}\n        \n        if ((currentState == STATE_INSULT_MOUSE_UP) || (currentState == STATE_RESPONSE_MOUSE_UP))\n        {\n            if (inArrowUpBox)\n            {\n                write(CURRENT_PAGE, currentPage - 1);\n                write(CURRENT_STATE, (currentState == STATE_INSULT_MOUSE_UP) ? STATE_INSULT_MENU : STATE_RESPONSE_MENU);\n            }\n\t\t\telse if (inArrowDownBox)\n            {\n                write(CURRENT_PAGE, currentPage + 1);\n                write(CURRENT_STATE, (currentState == STATE_INSULT_MOUSE_UP) ? STATE_INSULT_MENU : STATE_RESPONSE_MENU);\n            }\n            else if ((inLine0) || (inLine1) || (inLine2) || (inLine3))\n            {\n                int lineOffset = 0;\n                \n                if (inLine0)\n                {\n                    lineOffset = 0;\n                }\n                else if (inLine1)\n                {\n                    lineOffset = 1;\n                }\n                else if (inLine2)\n                {\n                    lineOffset = 2;\n                }\n                else if (inLine3)\n                {\n                    lineOffset = 3;\n                }\n                \n                int dialogueNumber = 0;\n                \n                if (currentState == STATE_INSULT_MOUSE_UP)\n                {\n                    dialogueNumber = 2 * (4 * (currentPage % 4) + lineOffset);\n                \twrite(CURRENT_STATE, STATE_OFFENSE_INSULT_DIALOGUE);\n                }\n                else\n                {\n                    int insultNumber = read(DIALOGUE);\n                    int correctResponseNumber = insultNumber + 1;\n                    dialogueNumber = 2 * insultResponsePermutations[4 * (currentPage % 4) + lineOffset] + 1;\n                \t\n                    if (dialogueNumber == correctResponseNumber)\n                    {\n                        write(CURRENT_STATE, STATE_CORRECT_RESPONSE_DIALOGUE);\n                    }\n                    else\n                    {\n                        write(CURRENT_STATE, STATE_WRONG_RESPONSE_DIALOGUE);\n                    }\n                }\n                \n               \twrite(DIALOGUE, dialogueNumber);\n        \t\twrite(DIALOGUE_TIME, iTime + dialogueDuration);\n        \t\twrite(DIALOGUE_PERSON, PERSON_GUYBRUSH);\n            }\n            else\n            {\n                write(CURRENT_STATE, (currentState == STATE_INSULT_MOUSE_UP) ? STATE_INSULT_MENU : STATE_RESPONSE_MENU);\n            }\n            \n            write(HIGHLIGHT, HIGHLIGHT_NONE);\n        }\n        else if ((currentState == STATE_INSULT_MOUSE_DOWN) || (currentState == STATE_RESPONSE_MOUSE_DOWN))\n        {\n            bool mouseDown = (iMouse.z >= 0.0);\n\n            if (!mouseDown)\n            {\n                write(\n                    CURRENT_STATE,\n\t\t\t\t\t(currentState == STATE_INSULT_MOUSE_DOWN) ? STATE_INSULT_MOUSE_UP : STATE_RESPONSE_MOUSE_UP);\n            }\n            \n            if (inArrowUpBox)\n            {\n                write(HIGHLIGHT, HIGHLIGHT_ARROW_UP);\n            }\n            else if (inArrowDownBox)\n            {\n                write(HIGHLIGHT, HIGHLIGHT_ARROW_DOWN);\n            }\n            else if (inLine0)\n            {\n                write(HIGHLIGHT, HIGHLIGHT_LINE_0);\n            }\n            else if (inLine1)\n            {\n                write(HIGHLIGHT, HIGHLIGHT_LINE_1);\n            }\n            else if (inLine2)\n            {\n                write(HIGHLIGHT, HIGHLIGHT_LINE_2);\n            }\n            else if (inLine3)\n            {\n                write(HIGHLIGHT, HIGHLIGHT_LINE_3);\n            }\n            else\n            {\n                write(HIGHLIGHT, HIGHLIGHT_NONE);\n            }\n        }\n    }\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Enable/disable animation frames of the character sprites.\n// They look nice, but compile horribly slow and freeze Firefox for a few seconds.\n\n// None - No characters at all. This is for sad people.\n#define FRAMES_NONE 0\n// Only still image of each character\n#define FRAMES_STILL 1\n// Two frames for each character to have a fight animation\n#define FRAMES_FIGHT 2\n// Fight animation and two stances (defense and offense) for each character\n#define FRAMES_ALL 4\n\n#define ANIMATION_FRAMES FRAMES_STILL\n\n\n\n#define CURRENT_STATE 0\n#define CURRENT_PAGE 4\n#define ANIMATION_TIME 7\n#define HIGHLIGHT 9\n#define SCORE 11\n#define DIALOGUE 12\n#define DIALOGUE_TIME 13\n#define DIALOGUE_PERSON 14\n\n#define STATE_OPENING 0\n#define STATE_INSULT_MENU 1\n#define STATE_OFFENSE_INSULT_DIALOGUE 2\n#define STATE_DEFENSE_INSULT_DIALOGUE 3\n#define STATE_CORRECT_RESPONSE_DIALOGUE 4\n#define STATE_WRONG_RESPONSE_DIALOGUE 5\n#define STATE_RESPONSE_MENU 6\n#define STATE_FIGHT 7\n#define STATE_GAME_OVER 8\n#define STATE_INSULT_MOUSE_DOWN 9\n#define STATE_INSULT_MOUSE_UP 10\n#define STATE_RESPONSE_MOUSE_DOWN 11\n#define STATE_RESPONSE_MOUSE_UP 12\n\n#define HIGHLIGHT_NONE 0\n#define HIGHLIGHT_ARROW_DOWN 1\n#define HIGHLIGHT_ARROW_UP 2\n#define HIGHLIGHT_LINE_0 3\n#define HIGHLIGHT_LINE_1 4\n#define HIGHLIGHT_LINE_2 5\n#define HIGHLIGHT_LINE_3 6\n\n#define PERSON_GUYBRUSH 0\n#define PERSON_PIRATE 1\n\nconst vec4 fontColor = vec4(0.482, 0.172, 0.482, 1.0);\nconst vec4 highlightColor = vec4(0.847, 0.313, 0.847, 1.0);\n\nconst ivec2 menuLineSize = ivec2(260, 24);\nconst ivec2 menuLineOffsets[4] = ivec2[](ivec2(40, 72), ivec2(40, 48), ivec2(40, 24), ivec2(40, 0));\n\nconst ivec2 arrowSize = ivec2(12, 14);\nconst ivec2 arrowUpOffset = ivec2(14, 77);\nconst ivec2 arrowDownOffset = ivec2(14, 5);\n\nconst vec4 guybrushColor = vec4(1.0);\nconst ivec2 guybrushFrameSize = ivec2(128, 72);\nconst ivec2 guybrushOffset = ivec2(69, 100);\nconst ivec2 guybrushCenter = guybrushOffset + ivec2(guybrushFrameSize.x / 2, 0);\n\nconst vec4 pirateColor = vec4(1.0, 1.0, 0.0, 1.0);\nconst ivec2 pirateFrameSize = ivec2(88, 56);\nconst ivec2 pirateOffset = ivec2(131, 100);\nconst ivec2 pirateCenter = pirateOffset + ivec2(pirateFrameSize.x / 2, 0);\n\nconst ivec2 backgroundSize = ivec2(320, 144);\n\nconst ivec2 dialogueOffset = ivec2(0, 20);\nconst ivec2 dialogueSize = ivec2(32 * 8, 12);\n\nconst float fightDuration = 2.0;\n\nivec2 indexToCoord(int index)\n{\n    ivec2 viewport = ivec2(iResolution + 0.5);\n    \n    return ivec2(index % viewport.x, index / viewport.x);\n}\n\nint coordToIndex(vec2 coord)\n{\n    ivec2 viewport = ivec2(iResolution + 0.5);\n    \n    return int(coord.y) * viewport.x + int(coord.x);\n}\n\nint read(int index)\n{\n\treturn int(texelFetch(iChannel0, indexToCoord(index), 0).x + 0.5);\n}\n\nfloat readF(int index)\n{\n\treturn texelFetch(iChannel0, indexToCoord(index), 0).x;\n}\n\nint textBuffer(int index)\n{\n\treturn floatBitsToInt(texelFetch(iChannel2, indexToCoord(index), 0).x);\n}\n\nvec4 drawBackground(ivec2 position, ivec2 offset)\n{\n    if ((any(lessThan(position, offset))) || (any(greaterThanEqual(position, offset + backgroundSize))))\n    {\n        return vec4(0.0, 0.0, 0.0, 1.0);\n    }\n\n    ivec2 pixelPosition = (position - offset) / 2;\n    vec2 pixelScaled = vec2(pixelPosition) / vec2(backgroundSize / 2) * iChannelResolution[1].xy;\n    \n    return texelFetch(iChannel1, ivec2(pixelScaled), 0) * vec4(vec3(0.7), 1.0);\n}\n\nconst vec4 guybrushColorPalette[49] = vec4[](vec4(0.0, 0.0, 0.0, 1.0), vec4(0.271, 0.271, 0.271, 1.0), vec4(0.267, 0.267, 0.267, 1.0), vec4(0.949, 0.459, 0.345, 1.0), vec4(0.992, 0.773, 0.376, 1.0), vec4(0.694, 0.694, 0.694, 1.0), vec4(0.835, 0.835, 0.835, 1.0), vec4(0.976, 0.976, 0.976, 1.0), vec4(0.941, 0.451, 0.341, 1.0), vec4(0.988, 0.769, 0.376, 1.0), vec4(0.945, 0.455, 0.341, 1.0), vec4(0.690, 0.690, 0.690, 1.0), vec4(0.831, 0.831, 0.831, 1.0), vec4(0.973, 0.973, 0.973, 1.0), vec4(0.973, 0.976, 0.976, 1.0), vec4(0.361, 0.361, 0.361, 1.0), vec4(0.357, 0.361, 0.361, 1.0), vec4(0.263, 0.263, 0.267, 1.0), vec4(0.722, 0.392, 0.188, 1.0), vec4(0.941, 0.455, 0.345, 1.0), vec4(0.118, 0.659, 0.988, 1.0), vec4(0.122, 0.659, 0.988, 1.0), vec4(0.976, 0.973, 0.973, 1.0), vec4(0.973, 0.549, 0.486, 1.0), vec4(0.686, 0.686, 0.686, 1.0), vec4(0.722, 0.392, 0.184, 1.0), vec4(0.118, 0.655, 0.988, 1.0), vec4(0.831, 0.835, 0.835, 1.0), vec4(0.973, 0.549, 0.490, 1.0), vec4(0.835, 0.831, 0.831, 1.0), vec4(0.086, 0.000, 0.086, 1.0), vec4(0.533, 0.282, 0.047, 1.0), vec4(0.725, 0.392, 0.188, 1.0), vec4(0.945, 0.455, 0.345, 1.0), vec4(0.976, 0.553, 0.486, 1.0), vec4(0.529, 0.282, 0.043, 1.0), vec4(0.529, 0.278, 0.043, 1.0), vec4(0.722, 0.388, 0.184, 1.0), vec4(0.263, 0.267, 0.267, 1.0), vec4(0.976, 0.976, 0.973, 1.0), vec4(0.529, 0.278, 0.047, 1.0), vec4(0.831, 0.831, 0.835, 1.0), vec4(0.992, 0.769, 0.376, 1.0), vec4(0.973, 0.973, 0.976, 1.0), vec4(0.973, 0.976, 0.980, 1.0), vec4(0.082, 0.000, 0.086, 1.0), vec4(0.690, 0.694, 0.694, 1.0), vec4(0.941, 0.455, 0.341, 1.0), vec4(0.988, 0.773, 0.376, 1.0));\n\nvec4 drawGuybrush(int frame, ivec2 position, ivec2 offset)\n{\n    if ((any(lessThan(position, offset))) || (any(greaterThanEqual(position, offset + guybrushFrameSize))))\n    {\n     \treturn vec4(0.0);\n    }\n    \n    ivec2 pixel = position - offset;\n    int i = pixel.y * guybrushFrameSize.x + pixel.x;\n\n#if (ANIMATION_FRAMES > FRAMES_NONE)\n\tif (frame == 0)\n\t{\n        if ((i < 306) || (i > 5829))\n        {\n            return vec4(0.0);\n        }\n        \n        const int frame[] = int[](306,307,308,309,310,311,322,323,324,325,326,327,328,329,434,16777651,33554868,33554869,33554870,33554871,450,451,452,16777669,33554886,33554887,33554888,33554889,562,563,33554996,33554997,566,578,579,580,50332229,67109446,583,33555016,691,33555124,33555125,694,83886786,100664003,117441220,134218437,150995654,117441331,167772980,67109685,184550210,201327427,218104644,234881861,218104755,134218676,150995893,184550326,184550338,201327555,218104772,218104773,234882100,201327669,184550454,184550455,184550466,201327683,218104900,218104901,218105012,201327797,201327798,184550583,184550584,184550594,201327811,218105028,218105029,218105030,218105141,201327926,201327927,184550712,184550713,184550722,201327939,218105156,218105157,218105158,218105269,218105270,201328055,201328056,184550841,184550842,184550850,184550851,201328068,201328069,201328070,201328182,1591,1592,1593,1594,1595,1602,1603,1604,1605,1606,1717,1718,1719,1720,16778937,33556154,1723,1724,1730,1731,1732,1733,1734,1735,1845,1846,16779063,251660088,251660089,33556282,1851,1852,1857,1858,1859,16779076,33556293,1862,1863,1974,1975,33556408,251660217,251660218,33556411,1980,1981,1984,1985,1986,16779203,251660228,33556421,1990,2103,2104,33556537,251660346,251660347,2108,2109,2110,2111,2112,2113,16779330,33556547,251660356,2117,2118,2232,2233,33556666,251660475,33556668,2237,2238,2239,2240,16779457,33556674,251660483,33556676,2245,2360,2361,33556794,251660603,251660604,33556797,2366,2367,16779584,33556801,251660610,251660611,2372,2373,2489,33556922,33556923,251660732,33556925,33556926,33556927,33556928,251660737,251660738,33556931,2500,2617,2618,33557051,251660860,251660861,251660862,251660863,251660864,251660865,33557058,2627,2628,2745,2746,33557179,251660988,251660989,251660990,67111615,268438208,67111617,2754,2755,2874,33557307,33557308,251661117,251661118,268438335,251661120,285215553,2882,2883,3002,3003,33557436,251661245,251661246,67111871,268438464,67111873,3010,184552505,201329722,201329723,184552508,218106941,201329726,201329727,184552512,201329729,184552514,184552633,201329850,218107067,218107068,218107069,218107070,218107071,184552640,218107073,218107074,301993268,301993269,301993270,201329977,218107194,218107195,218107196,218107197,218107198,218107199,201329984,184552769,218107202,184552771,301993395,318770612,318770613,301993398,301993399,201330106,218107323,218107324,218107325,218107326,218107327,335547840,352325057,369102274,201330115,184552904,184552905,318770739,385879604,318770741,318770742,318770743,301993528,301993529,184553018,184553019,218107452,218107453,218107454,218107455,369102400,369102401,402656834,218107459,184553028,201330245,201330246,184553031,184553032,201330249,419434058,301993547,318770764,318770765,318770766,318770767,318770768,301993558,318770775,150998616,318770868,385879733,385879734,318770871,318770872,318770873,318770874,184553147,201330364,201330365,201330366,218107583,218107584,436211393,352325314,369102531,201330372,184553157,218107590,184553159,201330376,184553161,452988618,419434187,385879756,385879757,385879758,385879759,385879760,385879761,385879762,318770899,301993684,301993685,469765846,301993687,150998744,184553268,201330485,201330486,385879863,318771000,385879865,385879866,318771003,201330492,218107709,218107710,218107711,218107712,369102657,486543170,218107715,218107716,184553285,218107718,201330503,218107720,201330505,218107722,318771019,385879884,385879885,385879886,385879887,385879888,385879889,385879890,301993811,67112788,301993813,301993814,318771031,150998872,201330613,184553398,234885047,134221752,385879993,385879994,385879995,234885052,201330621,218107838,218107839,218107840,218107841,335548354,352325571,369102788,184553413,201330630,201330631,218107848,201330633,218107850,201330635,385880020,385880021,385880022,385880023,385880024,150999001,150999002,201330651,201330652,201330653,201330654,201330655,201330656,201330742,218107959,134221880,385880121,318771258,234885179,218107964,218107965,218107966,218107967,218107968,218107969,486543426,369102915,218107972,201330757,201330758,201330759,218107976,150999127,201330785,201330786,218108003,218108004,218108005,218108006,218108007,218108008,201330872,385880249,234885306,218108091,218108092,218108093,218108094,218108095,218108096,201330881,201330882,201330883,218108100,201330885,150999255,218108137,218108138,218108139,201330924,201330925,201330926,201330927,201331001,201331002,201331003,201331004,201331005,201331006,218108223,218108224,201331009,201331010,385880387,318771524,201331013,201331133,201331134,201331135,201331136,134222273,385880514,318771651,301994436,419434949,301994557,301994558,503321151,503321152,301994561,385880642,318771779,385880644,385880645,385880646,301994685,301994686,520098495,536875712,301994689,385880770,385880771,385880772,318771909,318771910,520098623,301994816,318772033,385880898,385880899,385880900,385880901,385880902,301994823,520098751,301994944,318772161,385881026,318772163,385881028,385881029,385881030,385881031,301995071,301995072,301995073,318772290,301995075,385881156,5189,553653318,301995199,301995200,301995201,301995202,520099011,385881284,570430661,385881286,301995327,301995328,301995329,301995330,301995331,587208004,385881413,603985222,301995335,520099144,301995456,301995457,301995458,301995459,301995460,301995461,301995462,301995463,301995464,301995584,520099393,301995586,301995587,301995588,301995589,520099398,301995591,520099522,301995715,301995716,520099525);\n\n\t\tfor (int j = 0; j < frame.length(); j++)\n        {\n            int data = frame[j];\n            int index = data & 0xFFFFFF;\n            \n            if (index == i)\n            {\n                return guybrushColorPalette[data >> 24];\n            }\n        }\n\n\t\treturn vec4(0.0);\n\t}\n\t\n#if (ANIMATION_FRAMES >= FRAMES_FIGHT)\n\tif (frame == 1)\n\t{\n        if ((i < 306) || (i > 5829))\n        {\n            return vec4(0.0);\n        }\n        \n        const int frame[] = int[](306,307,308,309,310,311,322,323,324,325,326,327,328,329,434,16777651,33554868,33554869,33554870,33554871,450,451,452,16777669,33554886,33554887,33554888,33554889,562,563,33554996,33554997,566,578,579,580,50332229,67109446,583,33555016,691,33555124,33555125,694,83886786,100664003,117441220,134218437,150995654,117441331,167772980,67109685,184550210,201327427,218104644,234881861,218104755,134218676,150995893,184550326,184550338,201327555,218104772,218104773,234882100,201327669,184550454,184550455,184550466,201327683,218104900,218104901,218105012,201327797,201327798,184550583,184550584,184550594,201327811,218105028,218105029,218105030,218105141,201327926,201327927,184550712,184550713,184550722,201327939,218105156,218105157,218105158,218105269,218105270,201328055,201328056,184550841,184550842,184550850,184550851,201328068,201328069,201328070,201328182,1591,1592,1593,1594,1595,1602,1603,1604,1605,1606,1717,1718,1719,1720,16778937,33556154,1723,1724,1730,1731,1732,1733,1734,1735,1845,1846,16779063,251660088,251660089,33556282,1851,1852,1857,1858,1859,16779076,33556293,1862,1863,1974,1975,33556408,251660217,251660218,33556411,1980,1981,1984,1985,1986,16779203,251660228,33556421,1990,2103,2104,33556537,251660346,251660347,2108,2109,2110,2111,2112,2113,16779330,33556547,251660356,2117,2118,2232,2233,33556666,251660475,33556668,2237,2238,2239,2240,16779457,33556674,251660483,33556676,2245,201328873,201328874,201328875,201328876,2360,2361,33556794,251660603,251660604,33556797,2366,2367,16779584,33556801,251660610,251660611,2372,2373,201328997,201328998,201328999,201329000,2489,33556922,33556923,251660732,33556925,33556926,33556927,33556928,251660737,251660738,33556931,2500,201329121,201329122,201329123,201329124,2617,2618,33557051,251660860,251660861,251660862,251660863,251660864,251660865,33557058,2627,2628,150997587,218106462,218106463,218106464,218106465,2745,2746,33557179,251660988,251660989,251660990,67111615,268438208,67111617,2754,2755,385878739,150997716,218106586,218106587,218106588,218106589,2874,33557307,33557308,251661117,251661118,268438335,251661120,285215553,2882,2883,318770002,301992787,150997844,150997846,201329495,201329496,201329497,3002,3003,33557436,251661245,251661246,67111871,268438464,67111873,3010,301992912,318770129,385878994,301992915,318770132,150997973,184552505,201329722,201329723,184552508,218106941,201329726,201329727,184552512,201329729,184552514,318770255,385879120,385879121,385879122,385879123,385879124,150998101,184552633,201329850,218107067,218107068,218107069,218107070,218107071,184552640,218107073,218107074,201329865,318770381,318770382,385879247,385879248,385879249,318770386,318770387,150998229,301993268,301993269,301993270,201329977,218107194,218107195,218107196,218107197,218107198,218107199,201329984,184552769,218107202,184552771,184552776,218107209,620760394,318770507,318770508,385879373,385879374,385879375,150998357,301993395,318770612,318770613,301993398,301993399,201330106,218107323,218107324,218107325,218107326,218107327,335547840,352325057,369102274,201330115,184552903,201330120,218107337,620760522,385879499,385879500,385879501,318770638,318770739,385879604,318770741,318770742,318770743,301993528,301993529,184553018,184553019,218107452,218107453,218107454,218107455,369102400,369102401,402656834,218107459,184553028,201330245,201330246,117444167,201330248,218107465,620760650,318770763,385879628,318770868,385879733,385879734,318770871,318770872,318770873,318770874,184553147,201330364,201330365,201330366,218107583,218107584,436211393,352325314,369102531,201330372,184553157,218107590,218107591,201330376,218107593,234884810,201330379,201330380,184553268,201330485,201330486,385879863,318771000,385879865,385879866,318771003,201330492,218107709,218107710,218107711,218107712,369102657,486543170,218107715,218107716,184553285,218107718,218107719,218107720,201330505,218107722,201330507,201330613,184553398,234885047,134221752,385879993,385879994,385879995,234885052,201330621,218107838,218107839,218107840,218107841,335548354,352325571,369102788,184553413,201330630,201330631,218107848,201330742,218107959,134221880,385880121,318771258,234885179,218107964,218107965,218107966,218107967,218107968,218107969,486543426,369102915,218107972,201330757,201330758,218107975,201330872,385880249,234885306,218108091,218108092,218108093,218108094,218108095,218108096,201330881,201330882,201330883,218108100,201330885,218108102,201331001,201331002,201331003,201331004,201331005,201331006,218108223,218108224,201331009,201331010,385880387,318771524,201331013,201331133,201331134,201331135,201331136,134222273,385880514,318771651,301994436,419434949,301994557,301994558,503321151,503321152,301994561,385880642,318771779,385880644,385880645,385880646,301994685,301994686,520098495,536875712,301994689,385880770,385880771,385880772,318771909,318771910,520098623,301994816,318772033,385880898,385880899,385880900,385880901,385880902,301994823,520098751,301994944,318772161,385881026,318772163,385881028,385881029,385881030,385881031,301995071,301995072,301995073,318772290,301995075,385881156,5189,553653318,301995199,301995200,301995201,301995202,520099011,385881284,570430661,385881286,301995327,301995328,301995329,301995330,301995331,587208004,385881413,603985222,301995335,520099144,301995456,301995457,301995458,301995459,301995460,301995461,301995462,301995463,301995464,301995584,520099393,301995586,301995587,301995588,301995589,520099398,301995591,520099522,301995715,301995716,520099525);\n        \n        for (int j = 0; j < frame.length(); j++)\n        {\n            int data = frame[j];\n            int index = data & 0xFFFFFF;\n            \n            if (index == i)\n            {\n                return guybrushColorPalette[data >> 24];\n            }\n        }\n\n\t\treturn vec4(0.0);\n\t}\n\n#if (ANIMATION_FRAMES >= FRAMES_ALL)\n\tif (frame == 2)\n\t{\n        if ((i < 308) || (i > 5326))\n        {\n            return vec4(0.0);\n        }\n\n\t\tconst int frame[] = int[](308,309,310,311,312,313,322,323,324,325,326,327,328,329,436,16777653,33554870,33554871,33554872,33554873,450,451,16777668,33554885,33554886,33554887,33554888,33554889,564,565,33554998,33554999,568,578,579,580,50332229,67109446,583,33555016,693,33555126,33555127,696,117441219,100664004,318767813,150995654,117441334,167772983,67109688,218104644,201327429,184550214,184550215,218104758,134218679,150995896,184550329,218104773,201327558,184550343,184550344,234882103,201327672,184550457,184550458,218104901,218104902,201327687,184550472,184550473,218105015,201327800,201327801,184550586,184550587,218105030,218105031,201327816,1225,1226,218105144,201327929,201327930,184550715,1340,201327942,201327943,1352,1353,1354,1355,218105272,218105273,184550842,184550843,1468,1469,1470,1479,1480,1481,16778698,1483,1484,1485,201328185,1594,1595,1596,16778813,1598,1599,1608,16778825,251659850,251659851,33556044,1613,1614,1721,1722,16778939,33556156,251659965,33556158,1727,1728,1729,1736,1737,33556170,251659979,33556172,33556173,1742,1743,1850,1851,33556284,251660093,251660094,251660095,33556288,1857,1858,1863,1864,1865,1866,33556299,251660108,251660109,1870,1871,1979,1980,1981,33556414,251660223,251660224,33556417,1986,1987,1990,1991,16779208,33556425,33556426,251660235,251660236,1997,1998,2109,33556542,251660351,251660352,33556545,33556546,2115,2116,2117,2118,16779335,33556552,251660361,251660362,33556555,2124,2125,2237,2238,33556671,251660480,251660481,33556674,33556675,2244,2245,2246,33556679,33556680,251660489,33556682,2251,2252,2366,2367,33556800,251660609,251660610,33556803,33556804,33556805,33556806,251660615,33556808,2377,2378,2379,2495,33556928,33556929,251660738,251660739,67111364,268437957,67111366,268437959,33556936,2505,2506,2623,2624,2625,33557058,251660867,268438084,251660869,268438086,251660871,33557064,2633,2752,2753,33557186,251660995,251660996,67111621,268438214,67111623,637536968,2761,184552255,184552256,184552257,184552258,201329475,201329476,201329477,184552262,201329479,184552264,150997862,184552383,184552384,201329601,201329602,201329603,218106820,201329605,201329606,184552391,201329608,184552393,184552405,184552406,184552407,201329624,318770148,385879013,150997990,184552512,201329729,201329730,218106947,218106948,218106949,218106950,352324679,352324680,654314569,184552522,184552528,201329745,184552530,201329747,201329748,184552533,201329750,218106967,201329752,419433561,318770266,318770267,318770268,318770269,318770270,301993058,301993059,385879140,318770277,150998118,184552640,184552641,201329858,218107075,218107076,218107077,218107078,369102023,369102024,402656457,117443786,201329867,184552652,184552653,184552654,201329871,218107088,201329873,184552658,218107091,218107092,218107093,201329878,218107095,201329880,419433689,385879258,385879259,385879260,385879261,385879262,385879263,318770400,301993185,67112162,671091939,520096996,469765349,385879270,150998247,150998248,201329897,201329898,201329899,201329900,201329901,201329902,201329903,201329904,201329905,218107122,218107123,218107124,218107125,218107126,218107127,218107128,218107129,218107130,201329915,201329916,201329917,201329918,201329919,301993275,301993276,301993277,184552769,201329986,201329987,201329988,201329989,218107206,218107207,436211016,352324937,352324938,369102155,201329996,201329997,218107214,218107215,218107216,218107217,218107218,218107219,218107220,402656597,201330006,218107223,218107224,385879385,385879386,385879387,385879388,385879389,385879390,385879391,385879392,318770529,385879394,385879395,385879396,385879397,150998374,301993402,301993403,318770620,318770621,301993406,687869375,201330112,184552897,184552898,201330115,218107332,218107333,218107334,218107335,369102280,369102281,486542794,218107339,218107340,218107341,201330126,218107343,218107344,218107345,201330130,201330131,201330132,201330134,201330135,150998502,301993530,318770747,385879612,385879613,318770750,234884671,218107456,184553025,201330242,201330243,218107460,201330245,218107462,218107463,218107464,218107465,335547978,352325195,369102412,218107469,201330254,218107471,201330256,201330257,201330258,150998630,301993657,318770874,385879739,385879740,318770877,234884798,218107583,201330368,201330369,218107586,218107587,218107588,218107589,218107590,218107591,218107592,218107593,486543050,369102539,218107596,218107597,218107598,201330383,301993785,301993786,385879867,318771004,218107710,201330495,218107712,218107713,218107714,218107715,218107716,218107717,218107718,201330503,218107720,218107721,201330506,201330507,385879884,318771021,201330510,318771128,318771129,318771130,301993915,184553408,201330625,201330626,201330627,201330628,201330629,218107846,218107847,201330632,201330633,134221770,385880011,318771148,301993933,419434446,318771256,385880121,385880122,318771259,301994054,301994055,503320648,503320649,301994058,385880139,318771276,385880141,385880142,385880143,318771385,385880250,301994171,385880252,301994182,301994183,520097992,536875209,301994186,385880267,385880268,385880269,318771406,318771407,385880377,385880378,385880379,520098120,301994313,318771530,385880395,385880396,385880397,385880398,385880399,301994320,520098248,301994441,318771658,385880523,318771660,385880525,385880526,385880527,385880528,301994568,301994569,301994570,318771787,301994572,385880653,4686,553652815,301994696,301994697,301994698,301994699,520098508,385880781,570430158,385880783,301994824,301994825,301994826,301994827,301994828,587207501,385880910,603984719,301994832,520098641,301994953,301994954,301994955,301994956,301994957,301994958,301994959,301994960,301994961,301995081,520098890,301995083,301995084,301995085,301995086,520098895,301995088,520099019,301995212,301995213,520099022);\n        \n\t\tfor (int j = 0; j < frame.length(); j++)\n        {\n            int data = frame[j];\n            int index = data & 0xFFFFFF;\n            \n            if (index == i)\n            {\n                return guybrushColorPalette[data >> 24];\n            }\n        }\n\n\t\treturn vec4(0.0);\n\t}\n\t\n\tif (frame == 3)\n\t{\n        if ((i < 300) || (i > 5685))\n        {\n            return vec4(0.0);\n        }\n\n\t\tconst int frame[] = int[](300,301,302,303,304,305,322,323,324,325,326,327,328,329,428,16777645,33554862,33554863,33554864,433,450,451,16777668,33554885,33554886,33554887,33554888,33554889,557,33554990,33554991,33554992,561,578,579,580,50332229,67109446,583,33555016,685,33555118,33555119,688,83886786,83886787,100664004,318767813,150995654,117441325,704643886,553648943,520094512,184550210,201327427,201327428,234881861,218104749,721421230,201327535,184550320,184550321,184550337,184550338,201327555,218104772,218104878,201327663,201327664,184550449,184550450,184550464,184550465,201327682,218104899,218104900,218105006,218105007,201327792,201327793,184550578,184550591,184550592,201327809,201327810,218105027,218105135,201327920,201327921,184550706,1331,1332,1342,1343,100664640,201327937,218105154,218105155,1456,1457,1458,1459,1460,1461,1469,1470,1471,1472,1473,100664770,1584,16778801,33556018,33556019,1588,1589,1597,1598,16778815,33556032,1601,1602,1712,1713,251659954,251659955,33556148,1717,1718,1724,1725,16778942,251659967,251659968,1729,1730,1841,33556274,251660083,251660084,33556277,1846,1847,1851,1852,16779069,251660094,251660095,33556288,1857,1969,1970,33556403,251660212,33556405,33556406,1975,1978,1979,16779196,33556413,251660222,251660223,1984,1985,2098,33556531,251660340,251660341,33556534,2103,2104,2105,2106,2107,33556540,251660349,33556542,2111,2112,2226,33556659,251660468,251660469,33556662,33556663,2232,2233,2234,16779451,251660476,33556669,2238,2239,2354,33556787,251660596,251660597,33556790,33556791,33556792,33556793,33556794,33556795,33556796,33556797,2366,2482,2483,33556916,251660725,251660726,251660727,251660728,251660729,251660730,251660731,2492,2493,2494,2611,33557044,251660853,251660854,251660855,67111480,268438073,67111482,285215291,2620,2621,2739,33557172,33557173,251660982,251660983,268438200,251660985,285215418,33557179,2748,184552243,184552244,184552245,201329462,201329463,184552248,184552249,184552250,2875,2876,318770099,385878964,234884021,218106806,218106807,218106808,184552377,201329594,184552379,3004,301993009,318770226,385879091,419433524,620760117,620760118,234884151,218106936,201329721,184552506,184552507,301993020,301993132,301993133,301993134,318770351,318770352,385879217,385879218,419433651,301993140,301993141,738200758,218107063,218107064,184552633,201329850,201329851,687869116,419433661,318770366,318770367,318770368,318770369,150998218,301993257,301993258,318770475,318770476,318770477,385879342,385879343,385879344,318770481,385879346,385879347,385879348,301993269,620760374,184552759,184552760,117443897,218107194,184552763,218107196,620760381,385879358,385879359,385879360,385879361,385879362,318770499,318770500,301993285,318770502,318770503,318770504,385879369,150998346,184552872,318770601,318770602,385879467,385879468,385879469,385879470,385879471,754978224,771755441,201330098,234884531,385879476,385879477,218107318,184552887,117444024,218107321,218107322,201330107,218107324,201330109,788532670,385879487,385879488,385879489,385879490,385879491,301993412,67112389,301993414,301993415,385879496,318770633,150998474,184553000,419434025,385879594,385879595,385879596,385879597,419434030,452988463,100666928,184553009,201330226,201330227,234884660,385879605,218107446,201330231,218107448,218107449,218107450,201330235,218107452,201330237,385879621,385879622,385879623,385879624,318770761,150998602,201330344,687869609,620760746,318770859,318770860,301993645,452988590,218107567,218107568,201330353,218107570,218107571,218107572,218107573,218107574,218107575,402656952,201330361,201330362,318770887,385879752,805310153,150998731,201330380,201330381,201330382,687869738,201330475,201330476,687869741,201330478,218107695,218107696,184553265,201330482,218107699,218107700,218107701,218107702,218107703,201330488,150998857,201330511,201330512,201330513,201330514,218107820,218107821,218107822,218107823,218107824,201330609,201330610,218107827,218107828,436211637,352325558,369102775,201330616,150998984,201330643,201330644,218107861,218107862,201330734,201330735,201330736,201330737,218107954,218107955,201330740,369102901,369102902,201330743,218107990,218107991,218107992,218107993,201330862,218108079,218108080,201330865,201330866,385880243,318771380,201330869,201330870,218108122,218108123,218108124,201330909,201330991,201330992,134222129,385880370,318771507,301994292,419434805,201331038,201331039,201331040,301994413,301994414,503321007,503321008,301994417,385880498,318771635,385880500,385880501,385880502,301994541,301994542,520098351,536875568,301994545,385880626,385880627,385880628,4661,520098479,301994672,318771889,385880754,385880755,385880756,570430133,385880758,301994679,301994799,301994800,318772017,385880882,318772019,385880884,385880885,385880886,385880887,301994927,301994928,301994929,318772146,301994931,385881012,5045,553653174,301995055,301995056,301995057,301995058,520098867,385881140,570430517,385881142,301995183,301995184,301995185,301995186,301995187,587207860,385881269,603985078,301995191,520099000,301995312,301995313,301995314,301995315,301995316,301995317,301995318,301995319,301995320,301995440,520099249,301995442,301995443,301995444,301995445,520099254,301995447,520099378,301995571,301995572,520099381);\n        \n\t\tfor (int j = 0; j < frame.length(); j++)\n        {\n            int data = frame[j];\n            int index = data & 0xFFFFFF;\n            \n            if (index == i)\n            {\n                return guybrushColorPalette[data >> 24];\n            }\n        }\n\n\t\treturn vec4(0.0);\n\t}\n#endif\n#endif\n#endif\n\n    return vec4(0.0);\n}\n\nconst vec4 pirateColorPalette[15] = vec4[](vec4(0.973, 0.549, 0.486, 1.0), vec4(0.941, 0.455, 0.345, 1.0), vec4(0.722, 0.392, 0.188, 1.0), vec4(0.533, 0.282, 0.047, 1.0), vec4(0.000, 0.000, 0.455, 1.0), vec4(0.000, 0.000, 0.878, 1.0), vec4(0.831, 0.831, 0.831, 1.0), vec4(0.690, 0.690, 0.690, 1.0), vec4(0.973, 0.973, 0.973, 1.0), vec4(0.816, 0.518, 0.831, 1.0), vec4(0.831, 0.063, 0.847, 1.0), vec4(0.267, 0.267, 0.267, 1.0), vec4(0.090, 0.000, 0.090, 1.0), vec4(0.988, 0.769, 0.376, 1.0), vec4(0.0, 0.0, 0.0, 1.0));\n\nvec4 drawPirate(int frame, ivec2 position, ivec2 offset)\n{\n    if ((any(lessThan(position, offset))) || (any(greaterThanEqual(position, offset + pirateFrameSize))))\n    {\n     \treturn vec4(0.0);\n    }\n    \n    ivec2 pixel = position - offset;\n    int i = pixel.y * pirateFrameSize.x + pixel.x;\n\n#if (ANIMATION_FRAMES > FRAMES_NONE)\n\tif (frame == 0)\n\t{\n        if ((i < 228) || (i > 4283))\n        {\n            return vec4(0.0);\n        }\n        \n        const int frame[] = int[](228,229,230,16777447,16777448,16777449,16777450,235,16777463,33554680,249,16777466,16777467,318,319,320,50331969,322,323,33554767,336,337,338,339,33554840,16777625,16777626,16777627,16777640,425,426,16777643,67109360,33554929,33554930,67109363,67109375,33554944,16777729,33554946,67109447,67109448,33555017,67109450,83886667,67109452,67109462,67109463,67109464,50332249,67109466,67109467,67109535,83886752,67109537,83886754,83886755,67109540,67109550,83886767,67109552,67109553,83886770,67109555,67109623,83886840,83886841,83886842,83886843,67109628,67109637,67109638,83886855,83886856,67109641,83886858,67109643,67109711,67109712,83886929,83886930,83886931,67109716,67109725,83886942,83886943,83886944,83886945,67109730,67109798,67109799,67109800,83887017,83887018,83887019,67109804,67109812,67109813,67109814,83887031,83887032,83887033,67109818,67109886,67109887,83887104,83887105,83887106,67109891,67109900,67109901,67109902,67109903,83887120,83887121,67109974,67109975,67109976,67109977,83887194,67109979,67109980,67109987,83887204,67109989,83887206,83887207,67109992,67109993,67110062,67110063,83887280,83887281,83887282,67110067,67110068,67110074,67110075,83887292,83887293,83887294,83887295,67110080,67110150,83887367,83887368,83887369,83887370,83887371,67110156,67110157,67110161,67110162,83887379,83887380,83887381,83887382,83887383,67110168,67110238,83887455,83887456,83887457,83887458,83887459,83887460,67110245,67110246,50333031,67110249,83887466,83887467,83887468,83887469,83887470,67110255,67110327,83887544,83887545,83887546,83887547,83887548,83887549,67110334,50333119,67110336,67110337,83887554,83887555,83887556,83887557,83887558,67110343,67110416,83887633,83887634,83887635,67110420,83887637,33555990,67110423,83887640,67110425,83887642,83887643,83887644,83887645,67110430,67110504,67110505,83887722,83887723,33556076,67110509,33556078,83887727,83887728,67110513,83887730,83887731,83887732,83887733,67110518,67110593,67110594,83887811,33556164,67110597,33556166,67110599,83887816,33556169,83887818,83887819,83887820,83887821,67110606,67110682,67110683,33556252,67110685,33556254,67110687,67110688,33556257,83887906,83887907,83887908,67110693,67110768,1905,16779122,50333555,16779124,50333557,16779126,50333559,50333560,67110777,83887994,83887995,83887996,67110781,1992,100665289,117442506,100665291,117442508,100665293,117442510,117442511,117442512,50333649,67110866,83888083,67110868,134219808,150997025,167774242,167774243,167774244,167774245,167774246,117442599,117442600,117442601,50333738,150997112,100665465,117442682,117442683,117442684,100665469,117442686,167774335,184551552,184551553,67111042,134219984,150997201,167774418,167774419,167774420,167774421,167774422,117442775,117442776,184551641,117442778,150997288,100665641,117442858,117442859,117442860,100665645,117442862,167774511,184551728,33556785,33556786,50334003,33556788,16779573,16779574,16779575,16779576,184551788,100665716,50334069,50334070,50334071,50334072,50334073,50334074,50334075,117442943,117442944,150997377,167774594,167774595,167774596,167774597,117442950,50334087,16779656,16779657,16779658,2443,2444,2445,2446,2447,16779664,16779665,184551876,2501,33556934,33556935,33556936,33556937,50334154,100665803,16779724,16779725,16779726,16779727,16779728,16779729,50334162,50334163,117443028,150997462,150997463,167774680,167774681,117443034,184551899,117443036,167774685,167774686,16779743,2528,2529,2530,2531,50334180,50334181,16779750,2535,2536,117443099,184551964,33557021,2590,184551967,184551968,117443105,16779810,100665891,2596,2597,2598,2599,2600,2601,16779818,50334251,134220332,100665901,100665902,100665903,100665904,117443121,184551986,50334259,100665908,134220341,134220342,117443127,50334264,2617,184551994,50334267,50334268,16779837,2622,2623,117443184,117443185,117443186,117443187,184552052,2677,2678,16779895,2680,2681,100665980,2689,2690,16779907,150997636,150997637,150997638,150997639,167774856,167774857,184552074,50334347,100665996,167774861,150997646,150997647,150997648,167774865,117443218,184552083,16779924,2709,2710,117443267,117443269,117443270,117443271,100666056,100666057,100666058,100666059,100666060,184552141,2766,2767,134220508,134220509,100666078,100666079,100666080,117443297,184552162,50334435,100666084,134220517,134220518,134220519,100666088,117443305,117443306,117443307,184552172,33557229,134220569,117443355,117443356,100666141,100666142,100666143,184552229,150997813,150997814,167775031,167775032,117443385,50334522,16780091,50334524,167775037,150997822,150997823,150997824,150997825,167775042,117443395,100666180,184552261,134220655,117443441,134220658,100666227,100666228,184552318,134220686,150997903,100666256,33557393,16780178,16780179,50334612,100666261,134220694,134220695,100666264,117443481,117443482,167775131,134220742,201329607,134220744,134220745,100666343,50334696,16780265,33557482,16780267,3052,33557485,117443566,150997999,150998000,167775217,117443570,134220829,134220830,134220831,100666400,3133,3134,16780351,16780352,50334785,50334786,33557571,33557572,16780357,33557574,100666439,117443656,134220916,134220917,134220918,3221,3222,3223,16780440,16780441,50334874,50334875,33557660,134221003,134221004,100666573,218107118,3311,16780528,16780529,16780530,50334963,33557748,134221090,134221091,218107205,3398,3399,3400,16780617,16780618,3403,50335052,218107213,134221177,3484,16780701,3486,3487,16780704,16780705,33557922,3491,218107300,218107301,234884518,234884519,234884520,234884521,234884522,3572,16780789,234884598,16780791,33558008,218107385,50335226,50335227,234884604,234884605,234884606,184552959,184552960,184552961,184552962,234884611,33558094,50335311,50335312,234884689,234884690,234884691,234884692,184553045,184553046,184553051,234884773,234884774,234884775,234884776,234884777,234884778,234884779,150998700,167775917,234884782,234884860,234884861,234884862,184553215,234884864,234884865,234884866,234884867,234884868,150998789,167776006,234884947,234884948,184553301,184553302,234884952,234884953,234884954,234884955,234884956,234884957,150998878,167776095,167776096,167776098,234885035,184553388,234885041,234885042,234885043,234885044,234885045,234885046,150998967,167776184,167776185,167776188,184553475,234885130,234885131,234885132,234885133,184553486,150999057,167776274,167776275,167776279,234885218,234885219,184553572,184553573,150999148,167776365,150999150,234885306,184553659);\n        \n        for (int j = 0; j < frame.length(); j++)\n        {\n            int data = frame[j];\n            int index = data & 0xFFFFFF;\n            \n            if (index == i)\n            {\n                return pirateColorPalette[data >> 24];\n            }\n        }\n\n\t\treturn vec4(0.0);\n\t}\n\t\n#if (ANIMATION_FRAMES >= FRAMES_FIGHT)\n\tif (frame == 1)\n\t{\n        if ((i < 228) || (i > 4206))\n        {\n            return vec4(0.0);\n        }\n        \n        const int frame[] = int[](228,229,230,16777447,16777448,16777449,16777450,235,16777463,33554680,249,16777466,16777467,318,319,320,50331969,322,323,33554767,336,337,338,339,33554840,16777625,16777626,16777627,16777640,425,426,16777643,67109360,33554929,33554930,67109363,67109375,33554944,16777729,33554946,67109447,67109448,33555017,67109450,83886667,67109452,67109462,67109463,67109464,50332249,67109466,67109467,67109535,83886752,67109537,83886754,83886755,67109540,67109550,83886767,67109552,67109553,83886770,67109555,67109623,83886840,83886841,83886842,83886843,67109628,67109637,67109638,83886855,83886856,67109641,83886858,67109643,67109711,67109712,83886929,83886930,83886931,67109716,67109725,83886942,83886943,83886944,83886945,67109730,67109798,67109799,67109800,83887017,83887018,83887019,67109804,67109812,67109813,67109814,83887031,83887032,83887033,67109818,67109886,67109887,83887104,83887105,83887106,67109891,67109900,67109901,67109902,67109903,83887120,83887121,67109974,67109975,67109976,67109977,83887194,67109979,67109980,67109987,83887204,67109989,83887206,83887207,67109992,67109993,67110062,67110063,83887280,83887281,83887282,67110067,67110068,67110074,67110075,83887292,83887293,83887294,83887295,67110080,67110150,83887367,83887368,83887369,83887370,83887371,67110156,67110157,67110161,67110162,83887379,83887380,83887381,83887382,83887383,67110168,134219064,134219066,134219068,117441854,67110238,83887455,83887456,83887457,83887458,83887459,83887460,67110245,67110246,50333031,67110249,83887466,83887467,83887468,83887469,83887470,67110255,100664719,134219153,134219154,134219155,134219156,134219157,134219158,134219159,117441945,117441947,67110327,83887544,83887545,83887546,83887547,83887548,83887549,67110334,50333119,67110336,67110337,83887554,83887555,83887556,83887557,83887558,67110343,134219246,134219247,134219248,134219249,134219250,117442035,117442036,117442038,67110416,83887633,83887634,83887635,67110420,83887637,33555990,67110423,83887640,67110425,83887642,83887643,83887644,83887645,67110430,134219338,134219339,134219340,117442125,117442126,117442127,117442128,67110504,67110505,83887722,83887723,33556076,67110509,33556078,83887727,83887728,67110513,83887730,83887731,83887732,83887733,67110518,100664997,100664998,117442215,117442216,117442217,117442218,67110593,67110594,83887811,33556164,67110597,33556166,67110599,83887816,33556169,83887818,83887819,83887820,83887821,67110606,100665087,100665088,117442305,117442306,117442307,67110682,67110683,33556252,67110685,33556254,67110687,67110688,33556257,83887906,83887907,83887908,67110693,100665177,100665178,117442395,117442396,117442397,117442398,184551266,67110768,1905,16779122,50333555,16779124,50333557,16779126,50333559,50333560,67110777,83887994,83887995,83887996,67110781,100665267,100665268,100665269,117442486,117442487,117442488,184551353,16779194,16779195,1992,100665289,117442506,100665291,117442508,100665293,117442510,117442511,117442512,50333649,67110866,83888083,67110868,100665358,100665359,117442576,184551441,184551442,16779283,16779284,134219808,150997025,167774242,167774243,167774244,167774245,167774246,117442599,117442600,117442601,50333738,184551528,184551529,184551530,16779371,16779372,50333805,117442671,150997112,100665465,117442682,117442683,117442684,100665469,117442686,167774335,184551552,184551553,67111042,184551616,16779457,16779458,16779459,2244,16779461,100665542,117442759,134219984,150997201,167774418,167774419,167774420,167774421,167774422,117442775,117442776,184551641,117442778,184551704,2330,2331,2332,16779549,100665630,16779551,16779552,50333985,150997288,100665641,117442858,117442859,117442860,100665645,117442862,167774511,184551728,33556785,33556786,50334003,33556788,16779573,16779574,16779575,16779576,117442928,134220149,2422,2423,2424,16779641,50334074,117442943,117442944,150997377,167774594,167774595,167774596,167774597,117442950,50334087,16779656,16779657,16779658,2443,2444,2445,2446,2447,16779664,16779665,2512,2513,16779730,50334163,150997462,150997463,167774680,167774681,117443034,184551899,117443036,167774685,167774686,16779743,2528,2529,2530,2531,50334180,50334181,16779750,2535,2536,2601,2602,16779819,134220332,100665901,100665902,100665903,100665904,117443121,184551986,50334259,100665908,134220341,134220342,117443127,50334264,2617,184551994,50334267,50334268,16779837,2622,2623,2690,2691,150997636,150997637,150997638,150997639,167774856,167774857,184552074,50334347,100665996,167774861,150997646,150997647,150997648,167774865,117443218,184552083,16779924,2709,2710,2779,134220508,134220509,100666078,100666079,100666080,117443297,184552162,50334435,100666084,134220517,134220518,134220519,100666088,117443305,117443306,117443307,184552172,33557229,2868,150997813,150997814,167775031,167775032,117443385,50334522,16780091,50334524,167775037,150997822,150997823,150997824,150997825,167775042,117443395,100666180,184552261,134220686,150997903,100666256,33557393,16780178,16780179,50334612,100666261,134220694,134220695,100666264,117443481,117443482,167775131,100666343,50334696,16780265,33557482,16780267,3052,33557485,117443566,150997999,150998000,167775217,117443570,3133,3134,16780351,16780352,50334785,50334786,33557571,33557572,16780357,33557574,100666439,117443656,3221,3222,3223,16780440,16780441,50334874,50334875,33557660,218107118,3311,16780528,16780529,16780530,50334963,33557748,218107205,3398,3399,3400,16780617,16780618,3403,50335052,218107213,3484,16780701,3486,3487,16780704,16780705,33557922,3491,218107300,218107301,234884518,234884519,234884520,234884521,234884522,3572,16780789,234884598,16780791,33558008,218107385,50335226,50335227,234884604,234884605,234884606,184552959,184552960,184552961,184552962,234884611,33558094,50335311,50335312,234884689,234884690,234884691,234884692,184553045,184553046,184553051,234884773,234884774,234884775,234884776,234884777,234884778,234884779,150998700,167775917,234884782,234884860,234884861,234884862,184553215,234884864,234884865,234884866,234884867,234884868,150998789,167776006,234884947,234884948,184553301,184553302,234884952,234884953,234884954,234884955,234884956,234884957,150998878,167776095,167776096,167776098,234885035,184553388,234885041,234885042,234885043,234885044,234885045,234885046,150998967,167776184,167776185,167776188,184553475,234885130,234885131,234885132,234885133,184553486,150999057,167776274,167776275,167776279,234885218,234885219,184553572,184553573,150999148,167776365,150999150,234885306,184553659);\n        \n        for (int j = 0; j < frame.length(); j++)\n        {\n            int data = frame[j];\n            int index = data & 0xFFFFFF;\n            \n            if (index == i)\n            {\n                return pirateColorPalette[data >> 24];\n            }\n        }\n\n\t\treturn vec4(0.0);\n\t}\n\t\n#if (ANIMATION_FRAMES >= FRAMES_ALL)\n\tif (frame == 2)\n\t{\n        if ((i < 228) || (i > 4167))\n        {\n            return vec4(0.0);\n        }\n\n\t\tconst int frame[] = int[](228,229,230,16777447,16777448,16777449,234,235,253,33554686,255,16777472,16777473,318,319,320,50331969,322,16777539,33554773,342,343,344,345,16777624,16777625,16777626,50332059,16777646,431,432,16777649,16777713,50332146,67109363,67109364,67109365,67109380,67109381,50332166,50332167,33554952,201327113,67109448,67109449,50332234,67109451,83886668,67109453,67109454,67109467,67109468,67109469,67109470,50332255,67109472,67109473,67109536,67109537,67109538,83886755,83886756,83886757,67109542,67109555,67109556,83886773,83886774,83886775,67109560,67109624,67109625,83886842,83886843,83886844,83886845,67109630,67109631,67109642,67109643,67109644,83886861,83886862,83886863,67109648,67109713,67109714,83886931,83886932,83886933,83886934,67109719,67109730,67109731,83886948,83886949,83886950,67109735,67109802,83887019,67109804,83887021,83887022,67109807,67109808,67109817,67109818,67109819,83887036,83887037,67109822,67109823,67109890,67109891,67109892,67109893,67109894,67109895,67109896,67109897,67109905,67109906,67109907,67109908,83887125,67109910,67109911,67109979,67109980,83887197,83887198,83887199,83887200,67109985,67109992,67109993,67109994,83887211,67109996,67109997,67109998,67110068,83887285,83887286,83887287,83887288,67110073,67110074,67110079,67110080,83887297,83887298,83887299,67110084,67110085,67110086,67110156,83887373,83887374,83887375,83887376,83887377,67110162,67110163,67110167,33555736,83887385,83887386,83887387,67110172,67110173,67110245,83887462,83887463,83887464,83887465,67110250,67110251,67110252,67110253,67110254,67110255,33555824,83887473,83887474,83887475,67110260,67110261,67110333,83887550,83887551,83887552,83887553,67110338,67110339,67110340,67110341,67110342,33555911,83887560,83887561,83887562,67110347,67110348,67110422,83887639,83887640,83887641,67110426,67110427,83887644,33555997,83887646,33555999,83887648,83887649,83887650,67110435,67110436,67110510,83887727,83887728,83887729,67110514,83887731,83887732,33556085,67110518,33556087,83887736,83887737,83887738,67110523,67110599,83887816,67110601,83887818,67110603,67110604,33556173,67110606,33556175,67110608,67110609,67110610,67110611,67110687,83887904,67110689,50333474,50333475,50333476,33556261,50333478,33556263,50333480,50333481,67110698,67110775,67110776,50333561,134219642,100665211,100665212,100665213,100665214,100665215,100665216,50333569,50333570,67110787,67110863,67110864,100665297,100665298,167774163,167774164,167774165,167774166,167774167,167774168,117442521,50333658,50333659,67110951,50333736,134219817,167774250,134219819,100665388,100665389,100665390,100665391,100665392,167774257,117442610,50333747,150997121,134219906,167774339,167774340,167774341,167774342,167774343,100665480,117442697,167774346,167774347,50333838,50333839,50333910,50333911,50333912,150997209,150997210,134219995,134219996,100665565,100665566,100665567,167774432,167774433,117442786,117442787,2276,50333925,33556710,16779495,16779496,50333996,50333997,50333998,50333999,50334000,150997297,134220082,134220083,150997300,167774517,167774518,167774519,100665656,100665657,167774522,167774523,117442876,33556797,33556798,16779583,50334016,2369,50334018,50334019,117442943,117442944,50334082,50334083,50334084,16779653,16779654,16779655,50334088,50334089,150997386,150997387,134220172,100665741,100665742,100665743,167774608,167774609,167774610,167774611,2452,16779669,33556886,16779671,2456,50334105,16779674,50334107,50334108,50334109,100665814,50334167,50334168,100665817,16779738,2523,2524,2525,2526,2527,2528,16779745,134220258,134220259,134220260,150997477,150997478,150997479,100665832,100665833,100665834,117443051,2540,117443053,16779758,2543,50334192,50334193,2546,2547,16779764,50334197,184551977,50334250,33557035,33557037,33557038,16779823,50334256,100665905,2610,2611,150997563,150997564,134220349,134220350,134220351,167774784,167774785,167774786,167774787,134220356,100665925,184552006,50334279,2632,16779849,16779850,2635,16779852,184552066,33557123,2692,184552069,117443206,33557127,134220424,134220436,134220437,134220438,150997655,33557144,100666009,134220442,134220443,134220444,100666013,117443230,184552095,2720,2721,2722,117443288,184552153,16779994,2779,184552156,16779997,2782,150997741,150997742,134220527,100666096,16780017,100666098,150997747,150997748,150997749,134220534,134220535,117443320,100666105,117443322,117443375,117443376,184552241,184552242,16780083,2868,2884,2885,16780102,16780103,50334536,50334537,33557322,33557323,16780108,134220621,150997838,150997839,134220624,117443461,117443462,117443463,100666248,184552331,2972,2973,2974,16780191,16780192,50334625,50334626,33557411,33557412,100666277,100666278,117443545,117443547,117443548,117443549,117443550,100666335,184552419,218106869,3062,16780279,16780280,16780281,50334714,33557499,117443634,117443635,117443636,100666421,218106956,3149,3150,3151,16780368,16780369,3154,50334803,218106964,134220935,117443720,134220937,117443722,117443723,100666508,3235,16780452,3237,3238,16780455,16780456,33557673,3242,218107051,218107052,234884269,234884270,234884271,234884272,234884273,134221024,117443809,134221026,3323,16780540,234884349,16780542,33557759,218107136,50334977,50334978,234884355,234884356,234884357,184552710,184552711,184552712,184552713,234884362,134221109,134221110,134221111,134221112,100666681,33557845,50335062,50335063,234884440,234884441,234884442,234884443,184552796,184552797,184552802,134221197,134221198,134221199,234884524,234884525,234884526,234884527,234884528,234884529,234884530,150998451,167775668,234884533,134221283,134221284,134221285,100666854,234884611,234884612,234884613,184552966,234884615,234884616,234884617,234884618,234884619,150998540,167775757,134221372,234884698,234884699,184553052,184553053,234884703,234884704,234884705,234884706,234884707,234884708,150998629,167775846,167775847,167775849,134221458,134221459,234884786,184553139,234884792,234884793,234884794,234884795,234884796,234884797,150998718,167775935,167775936,167775939,117444329,100667114,184553226,234884881,234884882,234884883,234884884,184553237,150998808,167776025,167776026,167776030,117444417,234884969,234884970,184553323,184553324,150998899,167776116,150998901,117444504,100667289,234885057,184553410,100667376,100667463);\n        \n\t\tfor (int j = 0; j < frame.length(); j++)\n        {\n            int data = frame[j];\n            int index = data & 0xFFFFFF;\n            \n            if (index == i)\n            {\n                return pirateColorPalette[data >> 24];\n            }\n        }\n\n\t\treturn vec4(0.0);\n\t}\n\t\n\tif (frame == 3)\n\t{\n        if ((i < 228) || (i > 3924))\n        {\n            return vec4(0.0);\n        }\n\n\t\tconst int frame[] = int[](16777444,229,16777446,16777447,16777448,16777449,234,235,245,33554678,247,16777464,16777465,318,319,16777536,50331969,322,323,16777549,334,335,336,337,50332056,16777625,410,16777627,50332070,16777639,424,16777641,67109358,67109359,50332144,50332145,16777714,67109372,67109373,50332158,16777727,512,67109445,67109446,67109447,50332232,50332233,50332234,67109459,83886676,67109461,50332246,50332247,16777816,67109532,67109533,83886750,67109535,67109536,67109537,67109538,67109539,67109546,67109547,67109548,83886765,67109550,50332335,67109552,67109619,67109620,67109621,83886838,83886839,83886840,67109625,67109626,67109633,67109634,67109635,83886852,83886853,83886854,83886855,67109640,67109706,67109707,83886924,83886925,83886926,83886927,67109712,67109713,67109721,67109722,83886939,83886940,83886941,83886942,83886943,67109793,67109794,67109795,83887012,83887013,83887014,83887015,67109800,67109808,67109809,83887026,83887027,83887028,83887029,83887030,67109815,67109880,67109881,67109882,67109883,67109884,83887101,83887102,67109887,67109894,67109895,67109896,67109897,67109898,83887115,67109900,67109901,67109902,67109967,67109968,83887185,67109970,67109971,67109972,67109973,67109974,67109981,67109982,67109983,83887200,83887201,67109986,67109987,67109988,67109989,67110055,67110056,67110057,83887274,83887275,83887276,67110061,67110062,67110063,50332850,67110068,67110069,83887286,83887287,83887288,83887289,67110074,67110075,67110076,67110143,67110144,83887361,83887362,83887363,83887364,83887365,67110150,67110151,67110152,50332938,67110155,67110156,83887373,83887374,83887375,83887376,83887377,67110162,67110163,67110232,67110233,83887450,83887451,83887452,83887453,83887454,67110239,67110240,67110241,50333026,67110243,83887460,83887461,83887462,83887463,83887464,67110249,67110250,67110321,83887538,83887539,83887540,83887541,83887542,67110327,67110328,33555897,67110330,83887547,83887548,83887549,83887550,83887551,83887552,67110337,67110338,67110409,67110410,83887627,83887628,67110413,67110414,33555983,67110416,33555985,67110418,83887635,83887636,83887637,83887638,83887639,67110424,67110425,67110498,83887715,83887716,83887717,67110502,33556071,67110504,33556073,67110506,83887723,83887724,83887725,83887726,67110511,67110512,67110586,67110587,67110588,33556157,50333374,33556159,50333376,33556161,50333378,67110595,67110596,67110597,67110598,67110599,67110675,33556244,100665109,117442326,117442327,117442328,117442329,117442330,50333467,50333468,67110685,67110686,33556331,167774060,167774061,167774062,167774063,167774064,150996849,117442418,117442419,50333556,50333557,100665283,117442500,117442501,117442502,117442503,117442504,117442505,150996938,117442507,117442508,50333645,16779224,16779225,184551428,150997018,167774235,167774236,167774237,167774238,167774239,150997024,100665377,117442594,167774243,117442596,50333743,50333744,33556529,16779314,184551516,50333789,33556574,50333798,50333799,50333800,50333801,50333802,50333803,117442673,117442674,100665459,117442676,117442677,117442678,117442679,117442680,150997113,117442682,117442683,50333830,16779399,2184,2185,2186,184551604,33556661,33556662,33556663,33556664,117442746,16779451,16779452,16779453,16779454,16779455,16779456,16779457,16779458,50333891,50333892,117442757,184551622,184551623,167774408,167774409,150997194,150997195,100665548,50333901,100665550,150997199,150997200,117442769,167774418,167774419,50333911,50333912,50333913,50333914,50333915,50333916,16779485,16779486,2271,2272,2273,2274,117442818,117442820,117442821,117442822,117442823,117442824,117442825,117442826,184551691,16779532,2317,184551694,184551695,117442832,33556753,117442834,2323,2324,2325,2326,2327,2328,2329,2330,16779547,100665628,117442845,117442846,184551711,117442848,117442849,100665634,117442851,50333988,134220069,100665638,134220071,134220072,117442857,117442858,184551723,184551724,50333997,50333998,50333999,50334000,16779569,16779570,2355,2356,2357,2358,2359,2360,134220114,134220116,117442902,117442904,117442906,117442907,100665692,100665693,100665694,100665695,100665696,100665697,100665698,184551779,184551780,16779621,2406,2407,2408,33556841,100665706,33556850,2419,150997364,150997365,150997366,150997367,167774584,167774585,167774586,117442939,50334076,134220157,167774590,150997375,150997376,117442945,117442946,184551811,167774596,100665733,50334086,50334087,16779656,2441,2442,2443,134220198,134220200,134220201,134220202,134220203,100665772,100665773,134220206,100665775,100665776,100665777,100665778,100665779,117443005,134220226,100665804,134220237,134220238,100665807,100665808,117443025,117443026,50334163,50334164,33556949,100665814,117443031,134220248,150997465,83888602,117443035,134220252,150997469,100665822,33556959,2528,134220284,134220285,134220286,134220287,134220288,134220289,100665877,100665893,134220326,150997543,150997544,100665897,50334250,33557035,33557036,33557037,100665902,150997551,134220336,117443121,117443122,150997555,134220340,100665909,150997558,134220372,100665983,134220416,33557121,33557122,33557123,33557124,2693,33557126,100665991,150997640,150997641,134220426,100665995,150997644,100665997,50334423,50334424,33557209,33557210,33557211,33557212,16779997,33557214,100666079,134220512,134220513,150997730,100666083,100666084,16780077,16780078,16780079,16780080,50334513,50334514,33557299,33557300,234883894,100666167,100666168,100666169,100666170,2949,2950,2951,2952,16780169,16780170,50334603,218106764,234883985,234883986,218106847,3040,3041,16780258,16780259,16780260,218106853,234884071,234884072,234884073,184552426,184552427,234884076,218106933,218106934,3127,3128,16780345,33557562,16780347,218106940,234884157,234884158,234884159,184552512,184552513,184552516,3212,3213,16780430,3215,3216,50334865,218107026,33557651,234884244,234884245,234884246,234884247,3300,3301,16780518,234884327,50334952,234884329,234884330,234884331,234884332,234884333,234884334,234884335,50335038,234884415,234884416,234884417,234884418,234884419,150998340,167775557,234884422,234884423,234884424,234884502,234884503,234884504,234884505,234884506,234884507,234884508,150998429,167775646,234884511,234884512,234884513,234884589,234884590,234884591,234884592,234884593,234884594,234884595,234884596,234884597,150998518,167775735,167775736,234884601,167775738,234884676,234884677,234884678,234884682,234884683,234884684,234884685,234884686,150998607,167775824,167775825,167775828,234884764,234884765,184553123,234884772,234884773,234884774,150998697,150998698,167775915,167775919,184553204,184553205,234884860,184553213,150998788,167776005,167776006,184553300);\n        \n\t\tfor (int j = 0; j < frame.length(); j++)\n        {\n            int data = frame[j];\n            int index = data & 0xFFFFFF;\n            \n            if (index == i)\n            {\n                return pirateColorPalette[data >> 24];\n            }\n        }\n\n\t\treturn vec4(0.0);\n\t}\n#endif\n#endif\n#endif\n    \n    return vec4(0.0);\n}\n\n#define A(x) if (index == x) { return (highlight) ? highlightColor : fontColor; } else if (index < x) { return vec4(0.0); }\n\nvec4 drawArrow(bool up, bool highlight, ivec2 position, ivec2 offset)\n{\n    if ((any(lessThan(position, offset))) || (any(greaterThanEqual(position, offset + arrowSize))))\n    {\n        return vec4(0.0);\n    }\n    \n    int index = ((up) ? (position.y - offset.y) : (13 - position.y + offset.y)) * 12 + (position.x - offset.x);\n    \n    A(2) A(9) A(14) A(21) A(26) A(33) A(38) A(45) A(50) A(57)\n    A(62) A(69) A(74) A(81) A(86) A(93) A(96) A(97) A(98) A(105)\n    A(106) A(107) A(109) A(118) A(122) A(129) A(135) A(140) A(148) A(151)\n    A(161) A(162)\n        \n    return vec4(0.0);\n}\n\nbool drawText(int textNumber, ivec2 completeOffset, ivec2 uv, bool rightJustified);\n\nvec4 drawPage(int pageNumber, ivec2 position, ivec2 offset)\n{\n    const ivec4 textNumbersPerPage[8] = ivec4[](\n        ivec4(0, 2, 4, 6), ivec4(8, 10, 12, 14), ivec4(16, 18, 20, 22), ivec4(24, 26, 28, 30),\n        ivec4(19, 1, 9, 27), ivec4(15, 23, 17, 25), ivec4(11, 29, 31, 5), ivec4(13, 21, 3, 7));\n    \n    ivec4 textNumbers = textNumbersPerPage[pageNumber];\n    \n    int highlight = read(HIGHLIGHT);\n\n    return ((drawText(textNumbers.x, menuLineOffsets[0] + offset, position, false)) ?\n            ((highlight == HIGHLIGHT_LINE_0) ? highlightColor : fontColor) :\n            vec4(0.0)) +\n        ((drawText(textNumbers.y, menuLineOffsets[1] + offset, position, false)) ?\n            ((highlight == HIGHLIGHT_LINE_1) ? highlightColor : fontColor) :\n            vec4(0.0)) +\n        ((drawText(textNumbers.z, menuLineOffsets[2] + offset, position, false)) ?\n            ((highlight == HIGHLIGHT_LINE_2) ? highlightColor : fontColor) :\n            vec4(0.0)) +\n        ((drawText(textNumbers.w, menuLineOffsets[3] + offset, position, false)) ?\n            ((highlight == HIGHLIGHT_LINE_3) ? highlightColor : fontColor) :\n            vec4(0.0)) +\n        float((pageNumber & 3) > 0) * drawArrow(true, (highlight == HIGHLIGHT_ARROW_UP), position, arrowUpOffset) +\n        float((pageNumber & 3) < 3) * drawArrow(false, (highlight == HIGHLIGHT_ARROW_DOWN), position, arrowDownOffset);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    int index = coordToIndex(fragCoord);\n    ivec2 position = ivec2(fragCoord);\n    \n    int currentState = read(CURRENT_STATE);\n    int currentScore = read(SCORE);\n    \n    fragColor = drawBackground(position, ivec2(0, 96));\n    \n    int guybrushFrame = 0;\n    int pirateFrame = 0;\n    \n#if (ANIMATION_FRAMES >= FRAMES_FIGHT)\n    if (currentState == STATE_FIGHT)\n    {\n        float fightAnimationTime = readF(ANIMATION_TIME);\n        \n        if (iTime < fightAnimationTime)\n        {\n            float timeDifference = fightAnimationTime - iTime;\n            \n            int animationFrame = int(fightDuration * timeDifference) & 1;\n            guybrushFrame = animationFrame;\n            pirateFrame = animationFrame;\n        }\n    }\n#endif\n    \n/*#if (ANIMATION_FRAMES == FRAMES_ALL)\n    if (currentScore == 1)\n    {\n        guybrushFrame == 4;\n        pirateFrame == 4;\n    }\n    else if (currentScore == 5)\n    {\n        guybrushFrame == 3;\n        pirateFrame == 3;\n    }\n#endif*/\n\n    vec4 guybrush = drawGuybrush(guybrushFrame, position, guybrushOffset);\n    vec4 pirate = drawPirate(pirateFrame, position, pirateOffset);\n    \n    if (pirateFrame < 3)\n    {\n    \tfragColor = mix(fragColor, pirate, pirate.w);\n    \tfragColor = mix(fragColor, guybrush, guybrush.w);\n    }\n    else\n    {\n    \tfragColor = mix(fragColor, guybrush, guybrush.w);\n    \tfragColor = mix(fragColor, pirate, pirate.w);\n    }\n    \n    if ((currentState == STATE_OPENING) || (currentState == STATE_OFFENSE_INSULT_DIALOGUE) ||\n        (currentState == STATE_DEFENSE_INSULT_DIALOGUE) || (currentState == STATE_CORRECT_RESPONSE_DIALOGUE) ||\n       (currentState == STATE_WRONG_RESPONSE_DIALOGUE) || (currentState == STATE_GAME_OVER))\n    {\n        int dialogueNumber = read(DIALOGUE);\n\t\tint dialoguePerson = read(DIALOGUE_PERSON);\n        \n        bool guybrush = (dialoguePerson == 0);\n\n    \tivec2 completeOffset = dialogueOffset + max(((guybrush) ? guybrushCenter : pirateCenter) +\n\t\t\tivec2(0, pirateFrameSize.y) - dialogueSize / 2, 0);\n\n\t\tfragColor = mix(\n            fragColor,\n            (guybrush) ? guybrushColor : pirateColor,\n            float(drawText(dialogueNumber, completeOffset, position, !guybrush)));\n    }\n    \n    if ((currentState == STATE_INSULT_MENU) ||\n        (currentState == STATE_INSULT_MOUSE_DOWN) ||\n        (currentState == STATE_INSULT_MOUSE_UP) ||\n       \t(currentState == STATE_RESPONSE_MENU) ||\n        (currentState == STATE_RESPONSE_MOUSE_DOWN) ||\n        (currentState == STATE_RESPONSE_MOUSE_UP))\n    {\n        int pageNumber = read(CURRENT_PAGE);\n\n        vec4 menuPage = drawPage(pageNumber, position, ivec2(0, 0));\n        fragColor += menuPage;\n    }\n}\n\n#define CHAR_SIZE ivec2(8, 12)\n#define CHAR_SPACING ivec2(8, 12)\n\n#define STRWIDTH(c) (c * CHAR_SPACING.x)\n#define STRHEIGHT(c) (c * CHAR_SPACING.y)\n\nconst ivec4[] C = ivec4[](\n\tivec4(0x000000,0x000000,0x000000,0x000000),\n\tivec4(0x003078,0x787830,0x300030,0x300000),\n\tivec4(0x003030,0x306000,0x000000,0x000000),\n\tivec4(0x000000,0x000000,0x000038,0x386000),\n\tivec4(0x000000,0x0000FE,0x000000,0x000000),\n\tivec4(0x000000,0x000000,0x000038,0x380000),\n\tivec4(0x0078CC,0x0C1830,0x300030,0x300000),\n\tivec4(0x003078,0xCCCCCC,0xFCCCCC,0xCC0000),\n\tivec4(0x00FC66,0x66667C,0x666666,0xFC0000),\n\tivec4(0x003C66,0xC6C0C0,0xC0C666,0x3C0000),\n\tivec4(0x00F86C,0x666666,0x66666C,0xF80000),\n\tivec4(0x00FE62,0x60647C,0x646062,0xFE0000),\n\tivec4(0x00FE66,0x62647C,0x646060,0xF00000),\n\tivec4(0x003C66,0xC6C0C0,0xCEC666,0x3E0000),\n\tivec4(0x00CCCC,0xCCCCFC,0xCCCCCC,0xCC0000),\n\tivec4(0x007830,0x303030,0x303030,0x780000),\n\tivec4(0x001E0C,0x0C0C0C,0xCCCCCC,0x780000),\n\tivec4(0x00E666,0x6C6C78,0x6C6C66,0xE60000),\n\tivec4(0x00F060,0x606060,0x626666,0xFE0000),\n\tivec4(0x00C6EE,0xFEFED6,0xC6C6C6,0xC60000),\n\tivec4(0x00C6C6,0xE6F6FE,0xDECEC6,0xC60000),\n\tivec4(0x00386C,0xC6C6C6,0xC6C66C,0x380000),\n\tivec4(0x00FC66,0x66667C,0x606060,0xF00000),\n\tivec4(0x00386C,0xC6C6C6,0xCEDE7C,0x0C1E00),\n\tivec4(0x00FC66,0x66667C,0x6C6666,0xE60000),\n\tivec4(0x0078CC,0xCCC070,0x18CCCC,0x780000),\n\tivec4(0x00FCB4,0x303030,0x303030,0x780000),\n\tivec4(0x00CCCC,0xCCCCCC,0xCCCCCC,0x780000),\n\tivec4(0x00CCCC,0xCCCCCC,0xCCCC78,0x300000),\n\tivec4(0x00C6C6,0xC6C6D6,0xD66C6C,0x6C0000),\n\tivec4(0x00CCCC,0xCC7830,0x78CCCC,0xCC0000),\n\tivec4(0x00CCCC,0xCCCC78,0x303030,0x780000),\n\tivec4(0x00FECE,0x981830,0x6062C6,0xFE0000),\n\tivec4(0x000000,0x00780C,0x7CCCCC,0x760000),\n\tivec4(0x00E060,0x607C66,0x666666,0xDC0000),\n\tivec4(0x000000,0x0078CC,0xC0C0CC,0x780000),\n\tivec4(0x001C0C,0x0C7CCC,0xCCCCCC,0x760000),\n\tivec4(0x000000,0x0078CC,0xFCC0CC,0x780000),\n\tivec4(0x00386C,0x6060F8,0x606060,0xF00000),\n\tivec4(0x000000,0x0076CC,0xCCCC7C,0x0CCC78),\n\tivec4(0x00E060,0x606C76,0x666666,0xE60000),\n\tivec4(0x001818,0x007818,0x181818,0x7E0000),\n\tivec4(0x000C0C,0x003C0C,0x0C0C0C,0xCCCC78),\n\tivec4(0x00E060,0x60666C,0x786C66,0xE60000),\n\tivec4(0x007818,0x181818,0x181818,0x7E0000),\n\tivec4(0x000000,0x00FCD6,0xD6D6D6,0xC60000),\n\tivec4(0x000000,0x00F8CC,0xCCCCCC,0xCC0000),\n\tivec4(0x000000,0x0078CC,0xCCCCCC,0x780000),\n\tivec4(0x000000,0x00DC66,0x666666,0x7C60F0),\n\tivec4(0x000000,0x0076CC,0xCCCCCC,0x7C0C1E),\n\tivec4(0x000000,0x00EC6E,0x766060,0xF00000),\n\tivec4(0x000000,0x0078CC,0x6018CC,0x780000),\n\tivec4(0x000020,0x60FC60,0x60606C,0x380000),\n\tivec4(0x000000,0x00CCCC,0xCCCCCC,0x760000),\n\tivec4(0x000000,0x00CCCC,0xCCCC78,0x300000),\n\tivec4(0x000000,0x00C6C6,0xD6D66C,0x6C0000),\n\tivec4(0x000000,0x00C66C,0x38386C,0xC60000),\n\tivec4(0x000000,0x006666,0x66663C,0x0C18F0),\n\tivec4(0x000000,0x00FC8C,0x1860C4,0xFC0000));\n\nivec2 print_pos = ivec2(0);\n\nbool sprite(ivec4 spr, ivec2 uv)\n{\n    print_pos.x += CHAR_SPACING.x;\n    \n    return ((all(greaterThanEqual(uv, ivec2(0)))) && (all(lessThan(uv, CHAR_SIZE)))) &&\n        (any(equal((spr >> clamp(ivec4(uv.y * CHAR_SIZE.x + CHAR_SIZE.x - uv.x - 1) - ivec4(72, 48, 24, 0), ivec4(-1), ivec4(24))) & ivec4(1), ivec4(1))));\n}\n\n//Prints a character and moves the print position forward by 1 character width.\nbool char(ivec4 ch, ivec2 uv)\n{\n    return sprite(ch, uv - print_pos);\n}\n\n#define LINE_0_OFFSET(n) completeOffset + ivec2((rightJustified) ? (32 - n) * CHAR_SPACING.x : 0, STRHEIGHT(1));\n#define LINE_1_OFFSET(n) completeOffset + ivec2((rightJustified) ? (32 - n) * CHAR_SPACING.x : 0, 0);\n\n#define pack(a, b, c, d) a + (b << 8) + (c << 16) + (d << 24)\n\nivec4 unpack(int a)\n{\n\treturn ivec4(a & 0xFF, (a & 0xFF00) >> 8, (a & 0xFF0000) >> 16, (a & 0xFF000000) >> 24);\n}\n\nconst int textOffsets[34] = int[](\n\tpack(0, 30, -1, 0), pack(1, 31, 2, 6), pack(3, 28, 4, 20), pack(5, 29, 6, 19), pack(7, 26, 8, 16),\n\tpack(9, 29, 10, 20), pack(11, 31, 12, 19), pack(13, 31, 14, 28), pack(15, 32, 16, 14), pack(17, 27, 18, 7),\n\tpack(19, 26, 20, 23), pack(21, 31, 22, 10), pack(23, 27, 24, 17), pack(25, 24, 26, 20), pack(27, 30, 28, 24),\n\tpack(29, 18, -1, 0), pack(30, 32, 31, 4), pack(32, 32, -1, 0), pack(33, 26, 34, 19), pack(35, 29, 36, 13),\n\tpack(37, 25, -1, 0), pack(38, 26, 39, 12), pack(40, 28, 41, 11), pack(42, 31, 43, 10), pack(44, 26, 45, 25),\n\tpack(46, 28, 47, 23), pack(48, 20, 49, 19), pack(50, 30, 51, 11), pack(52, 30, 53, 14), pack(54, 29, 55, 15),\n\tpack(56, 25, 57, 7), pack(58, 32, 59, 20), pack(60, 31, 61, 15), pack(62, 19, -1, 0));\n\nbool drawLine(int textBufferOffset, ivec2 uv)\n{\n    for (int i = 0; i < 8; i++)\n    {\n        int indices = textBuffer(8 * textBufferOffset + i);\n        \n        if (indices == 0)\n        {\n            return false;\n        }\n        else\n        {\n            ivec4 v = unpack(indices);\n            \n            if (((v.x > 0) && (char(C[v.x - 1], uv))) || ((v.y > 0) && (char(C[v.y - 1], uv))) ||\n                ((v.z > 0) && (char(C[v.z - 1], uv))) || ((v.w > 0) && (char(C[v.w - 1], uv))))\n            {\n                return true;\n            }\n        }\n    }\n\n    return false;   \n}\n\nbool drawText(int textNumber, ivec2 completeOffset, ivec2 uv, bool rightJustified)\n{\n    ivec4 offsets = unpack(textOffsets[textNumber]);\n\n    print_pos = LINE_0_OFFSET(offsets.y);\n    bool hit = drawLine(offsets.x, uv);\n\n    if ((!hit) && (offsets.z > -1))\n    {\n        print_pos = LINE_1_OFFSET(offsets.w);\n        hit = drawLine(offsets.z, uv);\n    }\n\n    return hit;\n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"4sXGR8","channel":0}],"code":"#define pack(a, b, c, d) a + (b << 8) + (c << 16) + (d << 24)\n\nconst int _spc = 1;\nconst int _exc = 2;\nconst int _apo = 3;\nconst int _com = 4;\nconst int _dsh = 5;\nconst int _per = 6;\nconst int _que = 7;\nconst int _A = 8;\nconst int _B = 9;\nconst int _C = 10;\nconst int _D = 11;\nconst int _E = 12;\nconst int _F = 13;\nconst int _G = 14;\nconst int _H = 15;\nconst int _I = 16;\nconst int _J = 17;\nconst int _K = 18;\nconst int _L = 19;\nconst int _M = 20;\nconst int _N = 21;\nconst int _O = 22;\nconst int _P = 23;\nconst int _Q = 24;\nconst int _R = 25;\nconst int _S = 26;\nconst int _T = 27;\nconst int _U = 28;\nconst int _V = 29;\nconst int _W = 30;\nconst int _X = 31;\nconst int _Y = 32;\nconst int _Z = 33;\nconst int _a = 34;\nconst int _b = 35;\nconst int _c = 36;\nconst int _d = 37;\nconst int _e = 38;\nconst int _f = 39;\nconst int _g = 40;\nconst int _h = 41;\nconst int _i = 42;\nconst int _j = 43;\nconst int _k = 44;\nconst int _l = 45;\nconst int _m = 46;\nconst int _n = 47;\nconst int _o = 48;\nconst int _p = 49;\nconst int _q = 50;\nconst int _r = 51;\nconst int _s = 52;\nconst int _t = 53;\nconst int _u = 54;\nconst int _v = 55;\nconst int _w = 56;\nconst int _x = 57;\nconst int _y = 58;\nconst int _z = 59;\n\nconst int textBuffer[63 * 8] = int[](\n\tpack(_Y,_o,_u,_spc),pack(_f,_i,_g,_h),pack(_t,_spc,_l,_i),pack(_k,_e,_spc,_a),pack(_spc,_d,_a,_i),pack(_r,_y,_spc,_f),pack(_a,_r,_m,_e),pack(_r,_exc,0,0),\n\tpack(_H,_o,_w,_spc),pack(_a,_p,_p,_r),pack(_o,_p,_r,_i),pack(_a,_t,_e,_exc),pack(_spc,_Y,_o,_u),pack(_spc,_f,_i,_g),pack(_h,_t,_spc,_l),pack(_i,_k,_e,0),\n\tpack(_a,_spc,_c,_o),pack(_w,_exc,0,0),0,0,0,0,0,0,\n\tpack(_T,_h,_i,_s),pack(_spc,_i,_s,_spc),pack(_t,_h,_e,_spc),pack(_E,_N,_D,_spc),pack(_f,_o,_r,_spc),pack(_y,_o,_u,_com),pack(_spc,_y,_o,_u),0,\n\tpack(_g,_u,_t,_t),pack(_e,_r,_dsh,_c),pack(_r,_a,_w,_l),pack(_i,_n,_g,_spc),pack(_c,_u,_r,_exc),0,0,0,\n\tpack(_A,_n,_d,_spc),pack(_I,_apo,_v,_e),pack(_spc,_g,_o,_t),pack(_spc,_a,_spc,_l),pack(_i,_t,_t,_l),pack(_e,_spc,_T,_I),pack(_P,_spc,_f,_o),pack(_r,0,0,0),\n\tpack(_y,_o,_u,_com),pack(_spc,_g,_e,_t),pack(_spc,_t,_h,_e),pack(_spc,_P,_O,_I),pack(_N,_T,_que,0),0,0,0,\n\tpack(_I,_apo,_v,_e),pack(_spc,_s,_p,_o),pack(_k,_e,_n,_spc),pack(_w,_i,_t,_h),pack(_spc,_a,_p,_e),pack(_s,_spc,_m,_o),pack(_r,_e,0,0),0,\n\tpack(_p,_o,_l,_i),pack(_t,_e,_spc,_t),pack(_h,_a,_n,_spc),pack(_y,_o,_u,_exc),0,0,0,0,\n\tpack(_I,_apo,_m,_spc),pack(_g,_l,_a,_d),pack(_spc,_t,_o,_spc),pack(_h,_e,_a,_r),pack(_spc,_y,_o,_u),pack(_spc,_a,_t,_t),pack(_e,_n,_d,_e),pack(_d,0,0,0),\n\tpack(_y,_o,_u,_r),pack(_spc,_f,_a,_m),pack(_i,_l,_y,_spc),pack(_r,_e,_u,_n),pack(_i,_o,_n,_exc),0,0,0,\n\tpack(_S,_o,_o,_n),pack(_spc,_y,_o,_u),pack(_apo,_l,_l,_spc),pack(_b,_e,_spc,_w),pack(_e,_a,_r,_i),pack(_n,_g,_spc,_m),pack(_y,_spc,_s,_w),pack(_o,_r,_d,0),\n\tpack(_l,_i,_k,_e),pack(_spc,_a,_spc,_s),pack(_h,_i,_s,_h),pack(_spc,_k,_e,_b),pack(_a,_b,_exc,0),0,0,0,\n\tpack(_F,_i,_r,_s),pack(_t,_spc,_y,_o),pack(_u,_spc,_b,_e),pack(_t,_t,_e,_r),pack(_spc,_s,_t,_o),pack(_p,_spc,_w,_a),pack(_v,_i,_n,_g),pack(_spc,_i,_t,0),\n\tpack(_a,_b,_o,_u),pack(_t,_spc,_l,_i),pack(_k,_e,_spc,_a),pack(_spc,_f,_e,_a),pack(_t,_h,_e,_r),pack(_spc,_d,_u,_s),pack(_t,_e,_r,_per),0,\n\tpack(_P,_e,_o,_p),pack(_l,_e,_spc,_f),pack(_a,_l,_l,_spc),pack(_a,_t,_spc,_m),pack(_y,_spc,_f,_e),pack(_e,_t,_spc,_w),pack(_h,_e,_n,_spc),pack(_t,_h,_e,_y),\n\tpack(_s,_e,_e,_spc),pack(_m,_e,_spc,_c),pack(_o,_m,_i,_n),pack(_g,_exc,0,0),0,0,0,0,\n\tpack(_E,_v,_e,_n),pack(_spc,_B,_E,_F),pack(_O,_R,_E,_spc),pack(_t,_h,_e,_y),pack(_spc,_s,_m,_e),pack(_l,_l,_spc,_y),pack(_o,_u,_r,0),0,\n\tpack(_b,_r,_e,_a),pack(_t,_h,_que,0),0,0,0,0,0,0,\n\tpack(_I,_apo,_m,_spc),pack(_n,_o,_t,_spc),pack(_g,_o,_i,_n),pack(_g,_spc,_t,_o),pack(_spc,_t,_a,_k),pack(_e,_spc,_y,_o),pack(_u,_r,0,0),0,\n\tpack(_i,_n,_s,_o),pack(_l,_e,_n,_c),pack(_e,_spc,_s,_i),pack(_t,_t,_i,_n),pack(_g,_spc,_d,_o),pack(_w,_n,_exc,0),0,0,\n\tpack(_Y,_o,_u,_r),pack(_spc,_h,_e,_m),pack(_o,_r,_r,_h),pack(_o,_i,_d,_s),pack(_spc,_a,_r,_e),pack(_spc,_f,_l,_a),pack(_r,_i,_n,_g),pack(_spc,_u,_p,0),\n\tpack(_a,_g,_a,_i),pack(_n,_com,_spc,_e),pack(_h,_que,0,0),0,0,0,0,0,\n\tpack(_I,_spc,_o,_n),pack(_c,_e,_spc,_o),pack(_w,_n,_e,_d),pack(_spc,_a,_spc,_d),pack(_o,_g,_spc,_t),pack(_h,_a,_t,_spc),pack(_w,_a,_s,0),0,\n\tpack(_s,_m,_a,_r),pack(_t,_e,_r,_spc),pack(_t,_h,_a,_n),pack(_spc,_y,_o,_u),pack(_per,0,0,0),0,0,0,\n\tpack(_H,_e,_spc,_m),pack(_u,_s,_t,_spc),pack(_h,_a,_v,_e),pack(_spc,_t,_a,_u),pack(_g,_h,_t,_spc),pack(_y,_o,_u,0),0,0,\n\tpack(_e,_v,_e,_r),pack(_y,_t,_h,_i),pack(_n,_g,_spc,_y),pack(_o,_u,_spc,_k),pack(_n,_o,_w,_per),0,0,0,\n\tpack(_N,_o,_b,_o),pack(_d,_y,_apo,_s),pack(_spc,_e,_v,_e),pack(_r,_spc,_d,_r),pack(_a,_w,_n,_spc),pack(_b,_l,_o,_o),pack(_d,_spc,_f,_r),pack(_o,_m,0,0),\n\tpack(_m,_e,_spc,_a),pack(_n,_d,_spc,_n),pack(_o,_b,_o,_d),pack(_y,_spc,_e,_v),pack(_e,_r,_spc,_w),pack(_i,_l,_l,_per),0,0,\n\tpack(_Y,_o,_u,_spc),pack(_r,_u,_n,_spc),pack(_T,_H,_A,_T),pack(_spc,_f,_a,_s),pack(_t,_que,0,0),0,0,0,\n\tpack(_H,_a,_v,_e),pack(_spc,_y,_o,_u),pack(_spc,_s,_t,_o),pack(_p,_p,_e,_d),pack(_spc,_w,_e,_a),pack(_r,_i,_n,_g),pack(_spc,_d,_i,_a),pack(_p,_e,_r,_s),\n\tpack(_y,_e,_t,_que),0,0,0,0,0,0,0,\n\tpack(_W,_h,_y,_que),pack(_spc,_D,_i,_d),pack(_spc,_y,_o,_u),pack(_spc,_w,_a,_n),pack(_t,_spc,_t,_o),pack(_spc,_b,_o,_r),pack(_r,_o,_w,_spc),pack(_o,_n,_e,_que),\n\tpack(_T,_h,_e,_r),pack(_e,_spc,_a,_r),pack(_e,_spc,_n,_o),pack(_spc,_w,_o,_r),pack(_d,_s,_spc,_f),pack(_o,_r,_spc,_h),pack(_o,_w,0,0),0,\n\tpack(_d,_i,_s,_g),pack(_u,_s,_t,_i),pack(_n,_g,_spc,_y),pack(_o,_u,_spc,_a),pack(_r,_e,_per,0),0,0,0,\n\tpack(_Y,_e,_s,_spc),pack(_t,_h,_e,_r),pack(_e,_spc,_a,_r),pack(_e,_per,_spc,_Y),pack(_o,_u,_spc,_j),pack(_u,_s,_t,_spc),pack(_n,_e,_v,_e),pack(_r,0,0,0),\n\tpack(_l,_e,_a,_r),pack(_n,_e,_d,_spc),pack(_t,_h,_e,_m),pack(_per,0,0,0),0,0,0,0,\n\tpack(_Y,_o,_u,_spc),pack(_m,_a,_k,_e),pack(_spc,_m,_e,_spc),pack(_w,_a,_n,_t),pack(_spc,_t,_o,_spc),pack(_p,_u,_k,_e),pack(_per,0,0,0),0,\n\tpack(_Y,_o,_u,_spc),pack(_m,_a,_k,_e),pack(_spc,_m,_e,_spc),pack(_t,_h,_i,_n),pack(_k,_spc,_s,_o),pack(_m,_e,_b,_o),pack(_d,_y,0,0),0,\n\tpack(_a,_l,_r,_e),pack(_a,_d,_y,_spc),pack(_d,_i,_d,_per),0,0,0,0,0,\n\tpack(_M,_y,_spc,_h),pack(_a,_n,_d,_k),pack(_e,_r,_c,_h),pack(_i,_e,_f,_spc),pack(_w,_i,_l,_l),pack(_spc,_w,_i,_p),pack(_e,_spc,_u,_p),0,\n\tpack(_y,_o,_u,_r),pack(_spc,_b,_l,_o),pack(_o,_d,_exc,0),0,0,0,0,0,\n\tpack(_S,_o,_spc,_y),pack(_o,_u,_spc,_g),pack(_o,_t,_spc,_t),pack(_h,_a,_t,_spc),pack(_j,_o,_b,_spc),pack(_a,_s,_spc,_j),pack(_a,_n,_i,_t),pack(_o,_r,_com,0),\n\tpack(_a,_f,_t,_e),pack(_r,_spc,_a,_l),pack(_l,_per,0,0),0,0,0,0,0,\n\tpack(_I,_spc,_g,_o),pack(_t,_spc,_t,_h),pack(_i,_s,_spc,_s),pack(_c,_a,_r,_spc),pack(_o,_n,_spc,_m),pack(_y,_spc,_f,_a),pack(_c,_e,0,0),0,\n\tpack(_d,_u,_r,_i),pack(_n,_g,_spc,_a),pack(_spc,_m,_i,_g),pack(_h,_t,_y,_spc),pack(_s,_t,_r,_u),pack(_g,_g,_l,_e),pack(_exc,0,0,0),0,\n\tpack(_I,_spc,_h,_o),pack(_p,_e,_spc,_n),pack(_o,_w,_spc,_y),pack(_o,_u,_apo,_v),pack(_e,_spc,_l,_e),pack(_a,_r,_n,_e),pack(_d,_spc,_t,_o),0,\n\tpack(_s,_t,_o,_p),pack(_spc,_p,_i,_c),pack(_k,_i,_n,_g),pack(_spc,_y,_o,_u),pack(_r,_spc,_n,_o),pack(_s,_e,_per,0),0,0,\n\tpack(_I,_apo,_v,_e),pack(_spc,_h,_e,_a),pack(_r,_d,_spc,_y),pack(_o,_u,_spc,_a),pack(_r,_e,_spc,_a),0,0,0,\n\tpack(_c,_o,_n,_t),pack(_e,_m,_p,_t),pack(_i,_b,_l,_e),pack(_spc,_s,_n,_e),pack(_a,_k,_per,0),0,0,0,\n\tpack(_T,_o,_o,_spc),pack(_b,_a,_d,_spc),pack(_n,_o,_spc,_o),pack(_n,_e,_apo,_s),pack(_spc,_e,_v,_e),pack(_r,_spc,_h,_e),pack(_a,_r,_d,_spc),pack(_o,_f,0,0),\n\tpack(_Y,_O,_U,_spc),pack(_a,_t,_spc,_a),pack(_l,_l,_per,0),0,0,0,0,0,\n\tpack(_Y,_o,_u,_apo),pack(_r,_e,_spc,_n),pack(_o,_spc,_m,_a),pack(_t,_c,_h,_spc),pack(_f,_o,_r,_spc),pack(_m,_y,_spc,_b),pack(_r,_a,_i,_n),pack(_s,_com,0,0),\n\tpack(_y,_o,_u,_spc),pack(_p,_o,_o,_r),pack(_spc,_f,_o,_o),pack(_l,_per,0,0),0,0,0,0,\n\tpack(_I,_apo,_d,_spc),pack(_b,_e,_spc,_i),pack(_n,_spc,_r,_e),pack(_a,_l,_spc,_t),pack(_r,_o,_u,_b),pack(_l,_e,_spc,_i),pack(_f,_spc,_y,_o),pack(_u,0,0,0),\n\tpack(_e,_v,_e,_r),pack(_spc,_u,_s,_e),pack(_d,_spc,_t,_h),pack(_e,_m,_per,0),0,0,0,0,\n\tpack(_Y,_o,_u,_spc),pack(_h,_a,_v,_e),pack(_spc,_t,_h,_e),pack(_spc,_m,_a,_n),pack(_n,_e,_r,_s),pack(_spc,_o,_f,_spc),pack(_a,0,0,0),0,\n\tpack(_b,_e,_g,_g),pack(_a,_r,_per,0),0,0,0,0,0,0,\n\tpack(_I,_spc,_w,_a),pack(_n,_t,_e,_d),pack(_spc,_t,_o,_spc),pack(_m,_a,_k,_e),pack(_spc,_s,_u,_r),pack(_e,_spc,_y,_o),pack(_u,_apo,_d,_spc),pack(_f,_e,_e,_l),\n\tpack(_c,_o,_m,_f),pack(_o,_r,_t,_a),pack(_b,_l,_e,_spc),pack(_w,_i,_t,_h),pack(_spc,_m,_e,_per),0,0,0,\n\tpack(_M,_y,_spc,_n),pack(_a,_m,_e,_spc),pack(_i,_s,_spc,_G),pack(_u,_y,_b,_r),pack(_u,_s,_h,_spc),pack(_T,_h,_r,_e),pack(_e,_p,_w,_o),pack(_o,_d,_per,0),\n\tpack(_P,_r,_e,_p),pack(_a,_r,_e,_spc),pack(_t,_o,_spc,_d),pack(_i,_e,_exc,0),0,0,0,0,\n\tpack(_I,_spc,_g,_i),pack(_v,_e,_spc,_u),pack(_p,_exc,_spc,_Y),pack(_o,_u,_spc,_w),pack(_i,_n,_exc,0),0,0,0\n);\n\nivec2 indexToCoord(int index)\n{\n    ivec2 viewport = ivec2(iResolution + 0.5);\n    \n    return ivec2(index % viewport.x, index / viewport.x);\n}\n\nint coordToIndex(vec2 coord)\n{\n    ivec2 viewport = ivec2(iResolution + 0.5);\n    \n    return int(coord.y) * viewport.x + int(coord.x);\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    int index = coordToIndex(fragCoord);\n    \n    if (index < textBuffer.length())\n    {\n        fragColor = vec4(intBitsToFloat(textBuffer[index]));\n    }\n    else\n    {\n        fragColor = vec4(0.0);\n    }\n}","name":"Buf C","description":"","type":"buffer"}]}