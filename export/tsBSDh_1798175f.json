{"ver":"0.1","info":{"id":"tsBSDh","date":"1553607876","viewed":821,"name":"3D Line Drawing","username":"gaz","description":"inspired  https://www.shadertoy.com/view/tslXRj","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//inspired  https://www.shadertoy.com/view/tslXRj\nvec3 lookat(vec3 p, vec3 eye, vec3 target, vec3 up)\n{\n\tvec3 w = normalize(target-eye), u = normalize(cross(w,up));\n\treturn vec3(dot(p,u), dot(p,cross(u,w)), dot(p,w));\n}\n\nvec2 rotate(vec2 p, float theta)\n{\n    return p * cos(theta) + vec2(-p.y, p.x) * sin(theta);\n}\n\nvec3 rotate(vec3 p,vec3 axis,float theta)\n{\n    vec3 v = cross(axis,p), u = cross(v, axis);\n    return u * cos(theta) + v * sin(theta) + axis * dot(p, axis);   \n}\n\n\nfloat dePoint(vec3 ro, vec3 rd, vec3 a)\n{\n    return length(cross(a-ro, rd));\n}\n\nfloat deLine(vec3 ro, vec3 rd, vec3 a, in vec3 b)\n{\n    // http://www.sousakuba.com/Programming/gs_two_lines_intersect.html\n    vec3 ab =normalize(b-a),ao = a-ro;\n\tfloat d0 = dot(rd, ab), d1 = dot(rd, ao), d2 = dot(ab, ao);\n\tfloat len = (d0*d1-d2)/(1.0-d0*d0);\n    len= clamp(len,0.0,length(b-a));\n    vec3 p = a+ab*len;\n    return length(cross(p-ro, rd));\n}\n\nvec3 circle(vec3 p, vec3 nor, float r, float t)\n{\n    vec3 u = normalize(cross(nor,vec3(0,1,0))) * r;\n    return rotate(u, nor, t*6.283) + p;\n}\n\n\nfloat deCircle(vec3 ro,vec3 rd, vec3 pos, vec3 nor, float r)\n{\n    vec3 q;\n \tfloat ITR = 30.0, pitch = 1.0, t = 0.5, de = 1e10;   \n    for(int j=0; j<2; j++)\n    {\n        float t0 = t-pitch*0.5;\n        pitch /= ITR;\n        for(float i=0.0; i<ITR; i++) \n        {\n            t0 += pitch;\n            vec3 p = circle(pos,nor,r,t0);\n            float de0=dePoint(ro,rd,p);\n            if (de0<de)\n            {\n                de = de0;\n                t=t0;\n                q = ro+rd*dot(p-ro, rd);\n            }       \n        }\n    }\n    return de;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy*2.0-iResolution.xy)/iResolution.y;\n    vec3 ro = vec3(0,0,7);\n    ro.xz = rotate(ro.xz, iTime*0.3);\n    vec3 ta = vec3(0,0,0);\n    vec3 rd = lookat(normalize(vec3(uv, 2.0)),ro,ta,vec3(0,1,0));\n    \n    vec3 col = vec3(0);\n    float de;\n    \n    vec3 o = vec3(0,0,3);\n    vec3 n = normalize(vec3(0,0.3,-1));\n    vec3 p = vec3(0);\n    float r = 2.0;\n    \n    de=dePoint(ro,rd,p);\n    col = mix(vec3(1,1,0), col, smoothstep(0.0,0.3,de));\n    \n    for(float i=0.0; i<5.0; i++)\n    {\n        vec3 a =circle(p,n,r,i*2.0/5.0); \n        vec3 b =circle(p,n,r,(i+1.0)*2.0/5.0); \n    \tde=deLine(ro, rd, a,b);\n    \tcol = mix(vec3(1.0,0.6,0.1), col, smoothstep(0.05,0.15+sin(iTime*3.0)*0.1,de));\n    }\n  \n    de = deCircle(ro, rd,  p, n, 2.0);\n    col = mix(vec3(1,1,1), col, 1.0-0.05/de);\n    \n    fragColor = vec4(col,1);\n}","name":"Image","description":"","type":"image"}]}