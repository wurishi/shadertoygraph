{"ver":"0.1","info":{"id":"tdjSzw","date":"1553373686","viewed":293,"name":"Rainycorn","username":"OliverSchaff","description":"Playing with waves and cell tiling. Very similar to Zavie's shader https://www.shadertoy.com/view/ldfyzl","likes":12,"published":1,"flags":32,"usePreview":0,"tags":["2d","waves","interference","multipass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = texture(iChannel0, uv).rgb;\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// The core of the code is taken from Zavie\n// https://www.shadertoy.com/view/ldfyzl\n\n#define speed 1.0\n#define spatialFrequency 15.0\n#define numOfTilesY 10.0\n\n#define PI 3.1415927\n#define twoPI 6.28319\n\n\n\n// Hash without Sine\n// Creative Commons Attribution-ShareAlike 4.0 International Public License\n// Created by David Hoskins.\n// https://www.shadertoy.com/view/4djSRW\n\n#define HASHSCALE1 .1031\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 _st) {\n    vec2 i = floor(_st);\n    vec2 f = fract(_st);\n\n    // Four corners in 2D of a tile\n    float a = hash12(i);\n    float b = hash12(i + vec2(1.0, 0.0));\n    float c = hash12(i + vec2(0.0, 1.0));\n    float d = hash12(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n// Author @patriciogv - 2015\n// http://patriciogonzalezvivo.com\n#define NUM_OCTAVES 4\nfloat fbm ( in vec2 _st) {\n    float v = 0.0;\n    float a = 8.0/15.0;\n    vec2 shift = vec2(100.0);\n    // Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5),\n                    -sin(0.5), cos(0.50));\n    for (int i = 0; i < NUM_OCTAVES; ++i) {\n        v += a * noise(_st);\n        _st = rot * _st * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\n\n\n// Spectrum colour palette\n// IQ https://www.shadertoy.com/view/ll2GD3\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 spectrum(float n) {\n    return pal( n, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.33,0.67) );\n}\n\nfloat waveZ(in float len, in float t) {\n    len /= 2.0; // normalizes the input length\n    float dLen = len-speed*t;\n    float z = floor(3.0*sin(twoPI*spatialFrequency*(dLen))+1.5); // sets up concentrical stripes\n\tz *= 1.0-step(-0.01,dLen);// sets z to zero above a certain radius\n\tz *= smoothstep(0.0,0.3,dLen+0.3); // dampens the intensity within a certain radius\n    z *= 1.0-smoothstep(0.0,1.0,2.0*len); // reduces the intensity to zero when the distance is len\n    return z;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col;\n    \n    if (iFrame < 1) { // initialization\n        \n        col = vec3(0);\n        \n    } else { // regular image\n        \n\t    // Normalized pixel coordinates (from 0 to 1)\t\n\t    vec2 uv = fragCoord/iResolution.xy;\n        \n\t    // Distort the stRead plane with fractal brownian motion\n\t    vec2 stRead = uv;\n\t    vec2 shiftStRead = -.002*vec2(fbm(10.0*stRead+0.1*iTime)-0.5, fbm(10.0*stRead.yx-0.1*iTime)-0.5);\n\t    stRead += shiftStRead;\n\t    // Read in the old image from the distorted coordinate\n\t    col = texture(iChannel0, stRead).rgb;\n\t    // Dampen the color in order to keep the background dark\n\t    col *= 0.995;\n\t    \n\t    uv.x *= iResolution.x/iResolution.y; // set the scales according to the aspect ratio\n\t    \n\t    // tile the image\n\t    uv *= numOfTilesY;\n\t    vec2 fuv = fract(uv); // fractional part within tile, runs from 0-1\n\t    vec2 iuv = floor(uv); // integer-part index vector of tile\n\t    \n\t    float z;\n        \n\t    for (int j = -1; j <= 1; ++j) {\n\t        for (int i = -1; i <= 1; ++i){\n                // Loop to all neighbors of the current cell\n                // point uv lies in cell with indices iuv\n                \n                // Integer part of coordinate of current neighbor cell\n\t        \tvec2 iCoordinate = iuv + vec2(i, j); \n                // coordinate of random point within the current neighbor cell\n\t            vec2 c = iCoordinate + hash22(iCoordinate);\n                // distance of the current pixel to this random point in the neighbor cell\n\t            float l = length(uv-c);\n                // randomized repeating timer\n\t            float t = fract(0.2*iTime + 2.0*hash12(iCoordinate));\n                // Get the z-value of the wave of the neighbor cell\n                // as a function of the distance and time\n\t    \t\tz = 0.1*waveZ(l, t);\n                // get a new color for this wave\n\t            vec3 newCol = spectrum((0.5*sin(0.5*iTime))+0.5*hash12(iCoordinate));\n                // add the wave to the image\n\t            col = mix(col, newCol, z);\n        \t}\n    \t}\n        \n\t}\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}