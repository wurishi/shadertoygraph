{"ver":"0.1","info":{"id":"ltffWl","date":"1513861537","viewed":169,"name":"Dots 01","username":"unycone","description":"Simple anti-aliased dots.\n\nBased on an article http://webstaff.itn.liu.se/~stegu/webglshadertutorial/shadertutorial.html","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["pattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float aastep(float threshold, float value, float n, float rad) {\n//#ifdef GL_OES_standard_derivatives\n  float afwidth = 0.65 * length(vec2(dFdx(value), dFdy(value)));\n//#else\n//  float afwidth = n * (1.0/400.0) / cos(rad); // fallback\n//#endif\n  return smoothstep(threshold-afwidth, threshold+afwidth, value);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xx;\n    \n    // parameters\n\n    vec4 fgColor = mix(vec4(1.0, 0.55, 0.8, 1.0), vec4(1.0, 0.55, 0.27, 1.0), uv.x);\n    vec4 bgColor = vec4(1.0, 1.0, 1.0, 1.0);\n\n    float n = 15.0;\n    float angle = 45.0;\n    float r = 0.55; // [0.0, 1.0]\n\n    // calc\n\n    vec2 freq = vec2(n, n) ;\n    float rad = radians(angle);\n    mat2 rot = mat2(cos(rad), -sin(rad), sin(rad), cos(rad));\n    uv = fract(rot * uv * freq);\n    \n    float d = 2.0 * length(uv - vec2(0.5, 0.5));\n    \n\tfragColor = mix(fgColor, bgColor, aastep(r, d, n, rad));\n}","name":"Image","description":"","type":"image"}]}