{"ver":"0.1","info":{"id":"fsBXWd","date":"1621260727","viewed":85,"name":"Streamer03 gradient","username":"intrometa","description":"streamer with lines which supports positive and negative slope, line width fixed. https://en.wikipedia.org/wiki/Distance_between_two_parallel_lines","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["streamer"],"hasliked":0,"parentid":"NdBXWd","parentname":"Streamer02 line width fixed"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define DEBUG 0\n#define NO_TEX 0\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uvRaw = uv;\n    float ratio = iResolution.x / iResolution.y;\n    uv.x *= ratio;\n    vec2 clickUV = iMouse.xy / iResolution.xy;\n\n    vec3 col = vec3(0.0);\n    \n    float k = 1.0;\n    float b = 0.0;\n    float b1 = b;\n    float kSign = 1.0;\n    float width = 0.2;\n    if (k < 0.0) kSign = -1.0;\n    float b2 = b1 - width * sqrt(k * k + 1.0) * kSign;\n    \n    float leftBound = abs((1.0 - b2) / k);\n    float totalLength = 1.0 * ratio + leftBound;; // 这个域映射时，考虑 ratio.\n    if (k < 0.0) totalLength = 1.0 * ratio + leftBound + width * 2.0;\n\n    float speed = 1.0;\n    float driver = fract(iTime / speed);\n#if DEBUG == 1\n    driver += clickUV.x; \n#endif\n    float x = uv.x + leftBound - driver * totalLength;\n    if (k < 0.0) x = uv.x - driver * totalLength + width;\n    float y = uv.y;\n    float y1 = k * x + b1;\n    float y2 = k * x + b2;\n\n    if (kSign > 0.0 && y < y1 && y > y2 || kSign < 0.0 && y < y2 && y > y1) {\n        float d = abs(b1 + k * x - y) / sqrt(k * k + 1.0) / width;\n        col = texture(iChannel0, vec2(d, 0.5)).xyz;\n#if NO_TEX == 1\n        col = vec3(1.0);\n#endif\n    } else {\n        col = vec3(0.0);\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float x = uv.x - 0.5;\n    x = - 4.0 * x * x + 1.0;\n    vec3 col = vec3(x);\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}