{"ver":"0.1","info":{"id":"NdGXW1","date":"1635282880","viewed":345,"name":"Rehoboam","username":"grumdrig","description":"The Rehoboam world stability readout from Westworld season 3. No divergences observed.","likes":12,"published":1,"flags":8,"usePreview":0,"tags":["westworld"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Rehoboam display from Westworld season 3\n\n// The original is pretty clearly rendered as particles arranged in an annular ring,\n// each with height (distance from center) conforming to a noise function of some kind,\n// viewed edge-on.\n\n// See: https://www.youtube.com/watch?v=aeEn609nkRs\n\n// Here instead I step through a height field and determine the color of the pixel\n// according to how many times a ray intersects it at each particular height. I approximate\n// the particle density and therefore the darkness of that pixel by dividing by the\n// derivative of the curve at that point, which in turn is approximated by the difference\n// in the height field at each point of intersection.\n\n// I use a 3D noise function, one dimension of which is used for time, leaving two\n// spatial dimensions, so rather than calculating a noise value in a 3d space, I use\n// flat ring in 2d space (i.e. a thick circle).\n\nfloat fbm(vec3 v);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = vec2(-1.0,-1.0) + 2.0 * fragCoord.xy / iResolution.xy;\n\tuv.x *= iResolution.x / iResolution.y;\n\tuv *= 1.4;\n\t// The ring will fall just outside the unit circle\n\n\t// Radial coordinates\n\tfloat d = dot(uv, uv);\n\tfloat a = atan(uv.y, uv.x);\n\n\tfloat c = 0.0;\n\tif (d >= 1.0 && d < 1.6) {\n\t\tconst float R = 3.0;\n\t\tfloat old_h;\n\t\td -= 1.0;\n\t\tconst float SWATH = 3.0;\n\t\tconst float STEP = 0.4;\n\t\tfor (float i = 0.0; i < SWATH; i += STEP) {\n\t\t\tfloat h = 0.6 * (fbm(vec3(uv * (R + i), iTime * 0.2)));\n\t\t\th = abs(h);\n\t\t\th = pow(h, 1.9);\n\t\t\th += i / 35.0;  // conify the ring slightly\n\t\t\tif (i > 0.0) {\n\t\t\t\tif ((old_h < d && d < h) ||\t(h < d && d < old_h)) {\n\t\t\t\t\tc += STEP * 0.03 / abs(old_h - h);\n\t\t\t\t}\n\t\t\t}\n\t\t\told_h = h;\n\t\t}\n\t}\n\tc = 1.0 - c;  // it's black on white\n\n\tfragColor = vec4(c, c, c, 1.0);\n}\n\n\n// Gleaned from this shitty gist: https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\n//  Classic Perlin 3D Noise\n//  by Stefan Gustavson\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nvec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\nfloat noise(vec3 P){\n\tvec3 Pi0 = floor(P); // Integer part for indexing\n\tvec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n\tPi0 = mod(Pi0, 289.0);\n\tPi1 = mod(Pi1, 289.0);\n\tvec3 Pf0 = fract(P); // Fractional part for interpolation\n\tvec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n\tvec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n\tvec4 iy = vec4(Pi0.yy, Pi1.yy);\n\tvec4 iz0 = Pi0.zzzz;\n\tvec4 iz1 = Pi1.zzzz;\n\n\tvec4 ixy = permute(permute(ix) + iy);\n\tvec4 ixy0 = permute(ixy + iz0);\n\tvec4 ixy1 = permute(ixy + iz1);\n\n\tvec4 gx0 = ixy0 / 7.0;\n\tvec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n\tgx0 = fract(gx0);\n\tvec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n\tvec4 sz0 = step(gz0, vec4(0.0));\n\tgx0 -= sz0 * (step(0.0, gx0) - 0.5);\n\tgy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n\tvec4 gx1 = ixy1 / 7.0;\n\tvec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n\tgx1 = fract(gx1);\n\tvec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n\tvec4 sz1 = step(gz1, vec4(0.0));\n\tgx1 -= sz1 * (step(0.0, gx1) - 0.5);\n\tgy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n\tvec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n\tvec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n\tvec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n\tvec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n\tvec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n\tvec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n\tvec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n\tvec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n\tvec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n\tg000 *= norm0.x;\n\tg010 *= norm0.y;\n\tg100 *= norm0.z;\n\tg110 *= norm0.w;\n\tvec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n\tg001 *= norm1.x;\n\tg011 *= norm1.y;\n\tg101 *= norm1.z;\n\tg111 *= norm1.w;\n\n\tfloat n000 = dot(g000, Pf0);\n\tfloat n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n\tfloat n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n\tfloat n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n\tfloat n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n\tfloat n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n\tfloat n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n\tfloat n111 = dot(g111, Pf1);\n\n\tvec3 fade_xyz = fade(Pf0);\n\tvec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n\tvec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n\tfloat n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n\treturn 2.2 * n_xyz;\n}\n\nfloat fbm(vec3 v) {\n\t// Adding just one octave to the noise function seems to create a better result\n\t// without slowing it down too much\n\treturn noise(v)\n\t\t+ 0.50 * noise(v/2.0 + vec3(23.12, 92.93, 29.91))\n\t\t// + 0.25 * noise(P/4.0 + vec3(45.21, 29.02, 23.11))\n\t\t;\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*vec2 mainSound( int samp, float time )\n{\n    float v = 2.0 * 82.0 * time;\n    float n = fract(2938.293 * sin(1092.3948 * floor(v * 2.0)));\n    v = n * 0.4 + 0.3 * sign(sin(6.2831 * v));\n    return 0.5 * vec2(v);// sign(sin(6.2831 * 82.0 * time)) );\n}\n*/\n\n// https://www.shadertoy.com/view/wsGyWm\n\nfloat lpfSaw2( float t, float f, float fc, float Q )\n{\n    // Second approximation : we attenuate the resonance at the end of each cycle.\n    float omega_c = 2.*3.14159*fc/f; // relative\n    t = f*t - floor(f*t);\n    float v = 1. - 2.*t; // Basic saw\n    v = v * 0.5 + 0.8 * 2.0 * sin(t * 2. * 3.14159);\n    float v2 = -2.*exp(-omega_c*t/Q)*cos(omega_c*t); // Response of 2nd order system\n    v2 *= (1.-t); // Attenuate resonance\n    return v+v2;\n}\n\n\n// Exponential interpolation from a (x=-1) to b (x=1)\n\n#define emix(a, b, x) exp(mix(log(a), log(b), x))\n#define exprange(x, a, b) emix(a, b, 0.5+0.5*x)\n\nvec2 mainSound( in int samp, float time )\n{\n    vec2 f = vec2(82., 82.2) * 0.5;\n    vec2 cutoff = exprange(asin(cos(time * 0.5)), vec2(1600., 2000.), vec2(2000., 3000.));\n    vec2 Q = exprange(sin(0.62*time), 6., 9.) * vec2(1.,0.5);\n    // We can switch between the three versions of lpfSaw.\n    // In comparison with the first two approximate versions,\n    // the exact version exhibits stronger\n    // resonance on the first few harmonics when using a high quality factor,\n    // whereas lpfSaw2 smoothes them out (and lpfSaw even more).\n    return vec2(0.02) * vec2(\n        lpfSaw2(time, f.x, cutoff.x, Q.x),\n        lpfSaw2(time, f.y, cutoff.y, Q.y)\n    );\n}","name":"Sound","description":"","type":"sound"}]}