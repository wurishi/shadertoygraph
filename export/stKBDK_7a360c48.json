{"ver":"0.1","info":{"id":"stKBDK","date":"1665638039","viewed":72,"name":"Creating a Camera - Art of Code","username":"eklavya_1","description":"Tutorial Link: https://www.youtube.com/watch?v=PBxuVlp7nuM\nRaycasting points of a cube","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raycasting","camera"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Takes a ray and a point in 3d space and returns the distance of the point to the line \nfloat DistLine(vec3 ro, vec3 rd, vec3 p) {\n    return length(cross(p-ro, rd))/length(rd);\n}\n\nfloat DrawPoint(vec3 ro, vec3 rd, vec3 p) {\n    float d = DistLine(ro, rd, p);    \n    d = smoothstep(0.06, 0.05, d);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n\n    float t = iTime;\n\n    vec3 ro = vec3(3. * (sin(t)), 2, -3. * cos(t) ) + vec3(0.5, 0.5, 0.5);\n    vec3 lookAt = vec3(0.5, 0.5, 0.5);\n    \n    // need the vector of unit length\n    vec3 f = normalize(lookAt - ro);\n    vec3 r = normalize(cross(vec3(0., 1., 0.), f));\n    vec3 u = cross(f, r);\n    \n    float zoom = 1.;\n    vec3 c = ro + f*zoom;\n    vec3 i = c + uv.x*r + uv.y*u; \n\n    vec3 rd = i - ro;\n    // vec3 rd = vec3(uv.x, uv.y, -2.) - ro; // intersection point on screen\n\n    // need to test rays in 3d world\n    // will test against a point in 3d space, and will test distance to that point\n        \n    float d = 0.;\n    d += DrawPoint(ro, rd, vec3(0., 0., 0.));\n    d += DrawPoint(ro, rd, vec3(0., 0., 1.));\n    d += DrawPoint(ro, rd, vec3(0., 1., 0.));\n    d += DrawPoint(ro, rd, vec3(0., 1., 1.));\n    d += DrawPoint(ro, rd, vec3(1., 0., 0.));\n    d += DrawPoint(ro, rd, vec3(1., 0., 1.));\n    d += DrawPoint(ro, rd, vec3(1., 1., 0.));\n    d += DrawPoint(ro, rd, vec3(1., 1., 1.));\n        \n    \n    // Output to screen\n    fragColor = vec4(d);\n}","name":"Image","description":"","type":"image"}]}