{"ver":"0.1","info":{"id":"lclyRf","date":"1721417012","viewed":55,"name":"0724 - First Shader","username":"MajorKool","description":"Learning shaders:\n• Usage of channels\n• Frag & Space\n• Difference of gaussian","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 frag_color, in vec2 frag_coord )\n{\n    vec4 fc0 = gaussianBlur(iChannel0, iResolution, frag_coord, 3.85);\n    vec4 fc1 = gaussianBlur(iChannel0, iResolution, frag_coord, 2.55);\n    \n    vec4 color = fc0 - fc1;\n    if (color.x > .001 && frag_color != vec4(0.)) color = vec4(0.);\n    else color = vec4(1., 1., 1., 0.);\n    frag_color = color * texture(iChannel0, frag_coord.xy / iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec4 gaussianBlur(in sampler2D channel, in vec3 resolution, in vec2 frag_coord, in float size) {\n    // From: https://www.shadertoy.com/view/Xltfzj\n\n    float PI = 2. * 3.141592653;\n    \n    float directions = 16.; // BLUR DIRECTIONS (Default 16.0 - More is better but slower)\n    float quality = 3.; // BLUR QUALITY (Default 4.0 - More is better but slower)\n   \n    vec2 radius = size / resolution.xy;\n    \n    vec2 uv = frag_coord / resolution.xy;\n    vec4 color = texture(channel, uv);\n    \n    // Blur calculations\n    for (float d = 0.; d < PI; d+= PI / directions) {\n        for (float i=1. / quality; i <= 1.; i += 1. / quality) {\n            color += texture(channel, uv + vec2(cos(d), sin(d)) * radius * i);\n        }\n    }\n    \n    // Output to screen\n    color /= quality * directions - 15.;\n    return color;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4sfGzn","filepath":"/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","previewfilepath":"/media/ap/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","type":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// From: https://www.shadertoy.com/view/4tfGRB#\n\nvoid mainImage (out vec4 frag_color, in vec2 frag_coord) {\n    vec4 position = vec4(frag_coord, 0., 1.) / iResolution.xyxy - .5;\n    vec4 start_position = position;\n    vec4 color_fog = vec4(0.);\n    \n    // Movements\n    position.z += iTime * 3.; // forward; constant\n    position.z += cos(iTime * 6.) * .01; // forward; step acceleration\n    position.x -= cos(iTime * 3. + .785) * .1; // horizontal; view bobbing\n    position.y -= sin(iTime * 6.) * .15; // vertical; view bobbing\n    \n    // Ray Marching\n    float _step = .01;\n    float local_dist;\n    vec4 room;\n    \n    for (float i = 1.; i > 0.; i -= _step) {\n        room = abs(mod(position, 8.) - 4.);\n        \n        local_dist = min(room.y, length(room.xz) - 1.5);\n        if (local_dist < _step) {\n            _step = i;\n            break;\n        }\n        \n        position -= start_position * local_dist;\n    }\n    \n    // Texturing\n    if (local_dist == room.y) { // Floor & Ceiling\n        frag_color = mix(\n            texture(iChannel0, room.zxy - 5.) * (_step * _step),\n            color_fog,\n            position.w * .01\n        );\n        \n        if (frag_coord.y > iResolution.y / 2.) { // Ceiling\n            if (\n                sin(room.z) < 0. &&\n                sin(room.x) < 0.\n            ) {\n                frag_color = mix(\n                    vec4(\n                        .6, \n                        .6 + sin(iTime) * .3, \n                        .6 + cos(iTime) * .3, \n                        0.\n                    ) * (_step * _step),\n                    color_fog,\n                    position.w * .01\n                );\n            }\n        }\n        \n    } else { // Pillars\n        frag_color = mix(\n            vec4(.3) * (_step * _step),\n            color_fog,\n            position.w * .01\n        );\n    }\n    \n}","name":"Buffer A","description":"","type":"buffer"}]}