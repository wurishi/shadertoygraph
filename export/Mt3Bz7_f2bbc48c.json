{"ver":"0.1","info":{"id":"Mt3Bz7","date":"1539027005","viewed":894,"name":"Thin Water","username":"khlorghaal","description":"uses the gradient of a depthmap mixed with luminance of the background to approximate depth\ni thought of using a bit of FEM but realized thats completely unnecessary\nrevisited a year later","likes":20,"published":1,"flags":0,"usePreview":0,"tags":["distortion","postprocess"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//author khlorghaal\n//most rights reserved\n\nconst float \n SPEED=.35,\n TURBULENCE=.2,\n ADVECTION=.3,\n DEPTH=.02;\nconst vec3 \n LIGHT= normalize(vec3(-.5,1.,.25)),//match the ref texture\n COLOR_SUN= vec3(1.1,1.,1.)*8.,\n COLOR_SKY= vec3(.1,.14,.2)*.8;\n\n//#define DEBUG_NORMAL\n//#define DEBUG_LIGHT\n\n#define PHI 1.61803399\n#define TAU 6.28318531\n#define time iTime\n#define ASPECT (float(iResolution.x)/float(iResolution.y))\nfloat lum(vec3 rgb){ return dot(rgb,vec3(0.299, 0.587, 0.114)); }\nfloat nmapu(float x){ return x*.5+.5; }\nvec2  nmapu(vec2  x){ return x*.5+.5; }\nfloat nmaps(float x){ return x*2.-1.; }\nvec2  nmaps(vec2  x){ return x*2.-1.; }\nfloat tri(float x){ return abs(nmaps(fract(x))); }\nvec2  tri(vec2  x){ return abs(nmaps(fract(x))); }\nvec2 gnse2(vec2 p){ return fract(tan(p*vec2(PHI,PHI*PHI)*512.)*512.*PHI); }\n\nfloat wave(float x){\n    float x0= x;\n    x= nmapu(sin( x*45. - time*24. ));\n    x= pow(x,24.);//sharpen\n    x/= x0*32.+.125;//falloff\n    x*= exp(-x0*2.);//damping\n    return x;\n}\nfloat depthf(vec2 p){\n    float bottom= lum(texture(iChannel0,p).rgb);//luminance approximates depth\n    vec2 flow= vec2(0.,time*SPEED);\n    p+= flow;\n    p+= bottom*ADVECTION;//divergence\n    float surface= lum(texture(iChannel1,p*TURBULENCE).rgb)*TURBULENCE;\n    return surface*DEPTH;\n\t//return (surface-bottom)*DEPTH;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv= fragCoord/iResolution.xy;\n    vec2 uv0= uv;\n    \n    float d= 0.01;\n    float d0= depthf(uv);    \n    vec2 grad= (vec2(\n    \tdepthf(uv+vec2(d,0)),\n        depthf(uv+vec2(0,d))\n    )-d0)/d;\n    vec3 N= normalize(vec3(grad.x,grad.y,1.));\n    \n    //environment\n    float L= max(0., reflect(LIGHT, N).z );\n    //improv lobes (dangerous fun)\n    float sun= min(1.,pow(L*1.5,5.));\n    float sky= min(1.,pow(L+.4,1.2));\n    vec3 specular= vec3(COLOR_SUN)*sun + vec3(COLOR_SKY)*sky;\n    \n    uv+= refract(vec3(0.,0.,1.), N, 1.4).xy*DEPTH;\n    \n    vec3 col= pow(texture(iChannel0, uv).rgb, vec3(1./2.2));\n    //improv tonemapping\n    col-= col*COLOR_SKY;//ambience inversion\n    //l*=.7;//bg exposure\n    col+= specular*4.5;\n    col= pow(col-.25,vec3(2.3));\n    \n       \n    #ifdef DEBUG_LIGHT\n    col= vec3(specular);\n    #endif\n    #ifdef DEBUG_NORMAL\n    col= N*.5+.5;\n    #endif\n    //col= vec3(0.,nse2(uv0));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}