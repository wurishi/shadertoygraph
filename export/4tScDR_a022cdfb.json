{"ver":"0.1","info":{"id":"4tScDR","date":"1548860516","viewed":430,"name":"Snow BRDF","username":"TinyTexel","description":"A BRDF for snow. The biggest differences to a lambertian surface are the soft forward reflection peak and subtle limb darkening.\ncamera controls via mouse + shift key","likes":11,"published":1,"flags":48,"usePreview":0,"tags":["brdf","snow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2019 Mirko Salm\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/*\nA BRDF for snow. The biggest differences to a lambertian surface are the soft forward reflection peak and subtle limb darkening.\ncamera controls via mouse + shift key\n\nBRDF code in the 'Common' tab.\n*/\n\n//#define COMPARE_WITH_LAMBERT\n\n\n///////////////////////////////////////////////////////////////////////////\n//=======================================================================//\n\nvec3 GammaEncode(vec3 x) {return pow(x, vec3(1.0 / 2.2));}   \n    \nstruct Cam\n{\n\tvec3 Front, Right, Up;\n\tfloat Aspect;\n\tfloat AxisLen;\t\n};\n\nCam NewCam(vec2 ang, float fov, float aspect)\n{\n    Cam cam;\n\n    float sinPhi   = sin(ang.x);\n    float cosPhi   = cos(ang.x);\n    float sinTheta = sin(ang.y);\n    float cosTheta = cos(ang.y);    \n\n    cam.Front = vec3(cosPhi * cosTheta, \n                              sinTheta, \n                     sinPhi * cosTheta);\n\n    cam.Right = vec3(-sinPhi, 0.0, cosPhi);\n    cam.Up    = cross(cam.Right, cam.Front);\n\n    cam.Aspect = aspect;\n    cam.AxisLen = aspect * tan(Pi05 - fov * 0.5);\n\n    return cam;\n}\n\n// tc [-1..1]\nvec3 NewRay(Cam cam, vec2 tc)\n{\n    tc.x *= cam.Aspect;\n\n    vec3 imgPos = cam.Front * cam.AxisLen + (cam.Right * tc.x + cam.Up * tc.y);\n    \n    vec3 dir = normalize(imgPos);\n\n    return dir;\n}\n\n    \nfloat map(vec3 x);\n\nvec3 GradientCD(vec3 x, float o)\n{\n\tfloat xn = map(vec3(x.x - o, x.y, x.z));\n\tfloat xp = map(vec3(x.x + o, x.y, x.z));\n\t\n\tfloat yn = map(vec3(x.x, x.y - o, x.z));\n\tfloat yp = map(vec3(x.x, x.y + o, x.z));\n\t\n\tfloat zn = map(vec3(x.x, x.y, x.z - o));\n\tfloat zp = map(vec3(x.x, x.y, x.z + o));\n\t\n\tvec3 g = vec3(xp - xn, yp - yn, zp - zn) / o * 0.5;\n\t\n\treturn g;\n}\n\nvec3 GradientCD(vec3 x)\n{\n    return GradientCD(x, 0.0001);\n}\n\nvec3 GradientFD(vec3 x, float o)\n{\n\tx -= o * 0.5;\n\tfloat c = map(x);\n\t// c = 0.0;\n    \n\tfloat xp = map(vec3(x.x + o, x.y, x.z));\n\tfloat yp = map(vec3(x.x, x.y + o, x.z));\n\tfloat zp = map(vec3(x.x, x.y, x.z + o));\n\t\n\tvec3 g = vec3(xp - c, yp - c, zp - c) / o;\n\t\n\treturn g;\n}\n\nvec3 GradientFD(vec3 x)\n{\n    return GradientFD(x, 0.0001);\n}\n\n\nbool ImplicitRC(\nfloat funcScale,\nvec3 x, \nvec3 dir, \nfloat linCount,\nfloat binCount,\nfloat stepSizeAdd,\nout float t0, out float tm, out float t1)\n{\n\tbool hit = false;\n\n    t0 = tm = t1 = 0.0;\n    \n    float stepSize = abs(map(x)) + stepSizeAdd;\n    \n\tfor(float i = 0.0; i < linCount; ++i)// linear search\n\t{\t\n\t\tt1 += stepSize;\n\n        vec3 p = x + dir * t1;\n        \n        float f = map(p) * funcScale;\n        \n        stepSize = abs(f) + stepSizeAdd;\n        \n        hit = f < 0.0;\n\t\t\n        if(hit) {i=linCount;}\n        //if(hit) {break;}        \n        else {t0 = t1;}\n\t}\n\n    \n\tif(hit)\n    {\n        #if 1\n        for(float i = 0.0; i < binCount; ++i)// binary search\n\t\t{\n\t\t\ttm = (t0 + t1) * 0.5;\n\t\t\t\n            vec3 p = x + dir * tm;\n            \n\t\t\tif(map(p) * funcScale < 0.0)\n\t\t\tt1 = tm;\n\t\t\telse\n\t\t\tt0 = tm;\n\t\t}\n        \n        vec3 p0 = x + dir * t0;\n        vec3 p1 = x + dir * t1;\n        \n        float f0 = map(p0) * funcScale;\n        float f1 = map(p1) * funcScale;\n        \n        float div = f0 - f1;\n        \n        tm = mix(t0, t1, abs(div) > 1e-16 ? f0 / div : 0.5);// linear interpolation\n        #else\n        tm = (t0 + t1) * 0.5;\n        #endif\n        \n        return true;\n    }\n    else\n    return false;\n}\n\n\n\n\nfloat Root4(float x)\n{\n    return rsqrt(rsqrt(x));\n}\n\nvec2 CmplxMul(vec2 c0, vec2 c1)\n{\n\treturn vec2(c0.x*c1.x - c0.y*c1.y, c0.y*c1.x + c0.x*c1.y);\n}\n\nvec2 CmplxMul(vec2 c0, float ang)\n{\n\tvec2 c1 = vec2(cos(ang), sin(ang));\n\n\treturn vec2(c0.x*c1.x - c0.y*c1.y, c0.y*c1.x + c0.x*c1.y);\n}\n\nfloat map(vec3 x)\n{\n    float r = length(x) - 1.0;\n    //return r;\n    \n    float t0 = 0.0;\n    float t1 = 0.0;\n    float t2 = 0.0;\n    \n    #if 1\n    float t = iTime * 0.6;\n    t0 = t * 1.23;\n    t1 = t * 1.37;\n    t2 = t * 2.11;\n    x.xz = CmplxMul(x.xz, t * 0.21);\n    #endif\n    \n    float o = 1.0;\n    float s = 11.0;\n    o *= cos(x.x * s + t0);\n    o *= sin(x.z * s + t1);\n    o *= cos(x.y * s + t2);\n\n    o = o*0.5+0.5;\n    \n    o = 1.0 - rsqrt(rsqrt(1.0 - o * 0.95));\n    \n    r -= o * 0.2;\n    \n    return r;\n}\n\n\nvec3 EvalSceneCol(\n    vec3 rp, Cam cam, vec2 uv0, bool right)\n{\n    vec3 col = vec3(0.5);\n    vec2 PixelCount = iResolution.xy;// * vec2(0.5, 1.0);\n    \n    vec2 tex = uv0.xy / PixelCount;\n    vec2 tex21 = tex * 2.0 - vec2(1.0);\n        \n    #ifdef COMPARE_WITH_LAMBERT\n    tex21.x = abs(tex21.x);\n    #endif\n    \n    vec3 rd = NewRay(cam, tex21);\n\n    vec2 t; vec3 n; vec3 a;\n    float t0, tm, t1;\n    bool hit = ImplicitRC(1.0, rp, rd, 50.0, 5.0, 0.005, /*out*/ t0, tm, t1);\n\n    if(hit)\n    {\n        vec3 p = rp + rd * tm; \n\n       \tn = normalize(GradientCD(p));\n        \n        vec3 amb = vec3(0.0, 0.4, 1.0) * 0.24*0.0;\n        \n        vec3 L = vec3(0.0, 1.0, 0.0);\n        vec3 V = -rd;\n        \n        float NdL = clamp01(dot(n, L));\n    \tfloat NdV = clamp01(dot(n, V));\n    \tfloat VdL =         dot(V, L) ;\n        \n        #ifdef COMPARE_WITH_LAMBERT\n        float brdf = right ? SnowBRDF(NdL, NdV, VdL) : SSAlbedo_to_Albedo(0.995) * RcpPi;\n\t\t#else\n        float brdf = SnowBRDF(NdL, NdV, VdL);\n        #endif\n        col = vec3(brdf * NdL * 3.5) + amb;\n\n        //col = n*0.5+0.5;\n    }\n\n    return col;\n}\n\n\nvoid mainImage( out vec4 outCol, in vec2 uv0 )\n{\n    vec3 col = vec3(0.0);\n    \n    vec2 uv = uv0.xy - 0.5;\n    \n    vec2 PixelCount = iResolution.xy;// * vec2(0.5, 1.0);\n    \n    bool right = uv.x > PixelCount.x * 0.5;\n    //if(right) uv.x -= PixelCount.x;\n    \n    \n    vec4 mouseAccu = texelFetch(iChannel0, ivec2(1, 0), 0); \n    vec4 wasdAccu  = texelFetch(iChannel0, ivec2(2, 0), 0); \n\n    vec2 lightAng = vec2(Pi * 0.0, Pi * 0.5);\n    lightAng.x += (wasdAccu.y - wasdAccu.w) * 0.06; \n    lightAng.y += (wasdAccu.x - wasdAccu.z) * 0.04;    \n    \n    \n    vec2 ang = vec2(-0.25 * Pi, -Pi * 0.2);\n    ang += mouseAccu.xy * 0.008;\n\n    Cam cam = NewCam(ang, Pi * 0.5, PixelCount.x / PixelCount.y);\n    vec3 cpos = -cam.Front * 2.0;\n    cpos = -cam.Front * (exp2(1.2 + mouseAccu.w * 0.02));\n    \n\n\t#if 1\n    col = vec3(EvalSceneCol(cpos, cam, uv, right));  \n    #else\n    col  = EvalSceneCol(cpos, cam, uv + vec2(0.3, 0.1), right);\n    col += EvalSceneCol(cpos, cam, uv + vec2(0.9, 0.3), right);\n    col += EvalSceneCol(cpos, cam, uv + vec2(0.5, 0.5), right);\n    col += EvalSceneCol(cpos, cam, uv + vec2(0.1, 0.7), right);\n    col += EvalSceneCol(cpos, cam, uv + vec2(0.7, 0.9), right);   \n    col *= 0.2; \n    #endif\n    \n    #if 1\n    vec2 s = abs(uv0/iResolution.xy*2.0-1.0);\n    s.x = 1.0-Pow3(s.x);    s.y = 1.0-Pow3(s.y);\n    col *= mix(1.0, 0.4, Pow2(1.0-sqrt(s.x*s.y)));\n    #endif\n    \n    //if(col.x > 1.0) col = vec3(1.0, 0.0, 1.0);\n    //if(col.x >\n    \n\toutCol = vec4(GammaEncode(clamp01(col)), 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// persistent state stuff\n\nvoid mainImage( out vec4 col, in vec2 uv0 )\n{  \n    col = vec4(0.0);\n    \n    vec2 uv = uv0 - 0.5;\n    \n    \n    vec4 iMouseLast     = texelFetch(iChannel0, ivec2(0, 0), 0);\n    vec4 iMouseAccuLast = texelFetch(iChannel0, ivec2(1, 0), 0);\n    vec4 wasdAccuLast   = texelFetch(iChannel0, ivec2(2, 0), 0);\n\n    bool shift = texelFetch(iChannel1, ivec2(16, 0), 0).x != 0.0;\n    \n    float kW = texelFetch(iChannel1, ivec2(0x57, 0), 0).x;\n    float kA = texelFetch(iChannel1, ivec2(0x41, 0), 0).x;\n    float kS = texelFetch(iChannel1, ivec2(0x53, 0), 0).x;\n    float kD = texelFetch(iChannel1, ivec2(0x44, 0), 0).x;\n    \n    vec4 wasdAccu = wasdAccuLast + vec4(kW, kA, kS, kD);\n    \n    vec2 mouseDelta = iMouse.xy - iMouseLast.xy;\n    \n    bool cond0 = iMouse.z > 0.0 && iMouseLast.z > 0.0;\n    vec2 mouseDelta2 = cond0 && !shift ? mouseDelta.xy : vec2(0.0);\n    vec2 mouseDelta3 = cond0 &&  shift ? mouseDelta.xy : vec2(0.0);\n    \n    vec2 iMouseAccu1 = iMouseAccuLast.xy + mouseDelta2;\n    vec2 iMouseAccu2 = iMouseAccuLast.zw + mouseDelta3;\n    \n    if(uv.x == 0.0 && uv.y == 0.0) col = iMouse;  \n    if(uv.x == 1.0 && uv.y == 0.0) col = vec4(iMouseAccu1, iMouseAccu2);\n    if(uv.x == 2.0 && uv.y == 0.0) col = wasdAccu;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// The MIT License\n// Copyright Â© 2019 Mirko Salm\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/*\nA BRDF for snow. The biggest differences to a lambertian surface are the soft forward reflection peak and subtle limb darkening.\n\nHapke BRDF:\nHapke, Bruce. \"Bidirectional reflectance spectroscopy: 1. Theory.\" \tJournal of Geophysical Research: Solid Earth 86.B4 (1981): 3039-3054.\nshadow hiding term:\nHapke, Bruce. \"Bidirectional reflectance spectroscopy: 4. The extinction coefficient and the opposition effect.\"\tIcarus 67.2 (1986): 264-280.\n\nParameter fit for snow:\nDomingue, Deborah, Beth Hartman, and Anne Verbiscer. \"The scattering properties of natural terrestrial snows versus icy satellite surfaces.\" (1997).\n\n(all accessible via https://sci-hub.tw/)\n*/\n\n// no shadow hiding term:\n#define USE_MINIMALIST_BRDF\n\n\n//-----------------------------------------------------------------------------------------------------------------------//\n\n#define Frame float(iFrame)\n#define Time iTime\n#define OUT\n\n#define rsqrt inversesqrt\n#define clamp01(x) clamp(x, 0.0, 1.0)\n#define If(cond, resT, resF) mix(resF, resT, cond)\n\n\nconst float Pi = 3.14159265359;\nconst float Pi2 = Pi * 2.0;\nconst float Pi05 = Pi * 0.5;\n\nconst float RcpPi  = 1.0 / (1.0 * Pi);\nconst float RcpPi2 = 1.0 / (2.0 * Pi);\nconst float RcpPi4 = 1.0 / (4.0 * Pi);\n\nfloat Pow2(float x) {return x*x;}\nfloat Pow3(float x) {return x*x*x;}\nfloat Pow4(float x) {return Pow2(Pow2(x));}\n\n\n// pow-like + inverse; build by rescaling [exp(x * s) + exp(-x * s) - 2]  \nfloat PowL_Exp(float x, float s)\n{\n    return exp(s - s * x) * Pow2(exp(s * x) - 1.0) / Pow2(exp(s) - 1.0);\n}\n\nfloat PowL_ExpInv(float x, float s)\n{\n    float expS = exp(s);\n    float exp2S = expS * expS;\n    \n    float t0 = 2.0 * expS + x - 2.0 * expS * x + exp2S * x;\n    \n    float t1 = sqrt((-2.0 * expS * (x - 2.0) + x + exp2S * x) * x) * (expS - 1.0);\n    \n    return log((t0 + t1) * exp(-s) * 0.5) / s;\n}\n\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////\n//=================================================================================================//\n\n//------------------------------------//\n// single scattering albedo <-> (spherical) albedo mappings\n// assume first order approx of H (by Hapke) and iso scattering\n// usefull for matching the appearance of Hapke to Lambert and vice versa\n\nconst float HapkeMaxAlbedo = (11.0 + 28.0 * log(2.0)) / 30.0;// 1.0136 (> 1 due to error in H approx)\n\n// SSAlbedo_to_Albedo has no closed form (plane albedo has but the (hemi-)spherical one apparently doesnt)\n// this approx has mean-absolute-error 0.000971859\nfloat SSAlbedo_to_Albedo(float a_ss)\n{\n    return (1.0 - PowL_ExpInv(1.0 - a_ss, 4.776)) * HapkeMaxAlbedo;\n}\n\nfloat Albedo_to_SSAlbedo(float a)\n{\n    return 1.0 - PowL_Exp(a * (-1.0 / HapkeMaxAlbedo) + 1.0, 4.776);\n}\n//------------------------------------//\n\n\nfloat HapkeBRDF(float mu, float mu0, float a_ss)\n{\n    float s = sqrt(1.0 - a_ss);\n\n    //vec3 H  = (1.0 + 2.0 * mu ) / (1.0 + 2.0 * mu  * s);\n    //vec3 H0 = (1.0 + 2.0 * mu0) / (1.0 + 2.0 * mu0 * s);            \n\n    float HH0 = ((1.0 + 2.0 * mu    ) * (1.0 + 2.0 * mu0    )) / \n                ((1.0 + 2.0 * mu * s) * (1.0 + 2.0 * mu0 * s));           \n\n    return a_ss * HH0 / (mu + mu0) * RcpPi4;\n}\n\nfloat HapkeBRDF(float mu, float mu0, float a_ss, float phFunc)\n{\n    float s = sqrt(1.0 - a_ss);            \n\n    float HH0 = ((1.0 + 2.0 * mu    ) * (1.0 + 2.0 * mu0    )) / \n                ((1.0 + 2.0 * mu * s) * (1.0 + 2.0 * mu0 * s));\n    \n    return a_ss * (HH0 - 1.0 + phFunc) / (mu + mu0) * RcpPi4;\n}\n\nfloat ShadowHiding(float cosTheta, float h, float B0)\n{\n    float tan05 = (1.0 + cosTheta) * rsqrt(1.0 - cosTheta*cosTheta);\n    \n    return 1.0 + B0 / (1.0 + tan05 / h);\n}\n\n\nfloat HenyeyGreensteinPhF(float cosTheta, float g)\n{\n\tfloat t0 = 1.0 - g*g;\n\tfloat t1 = 1.0 + g*g - 2.0 * g * cosTheta;\n\t\n\t// return t0 * rsqrt(max(0.0, t1*t1*t1));// nan if ct&&g==-1 or ct&&g==1\n\treturn t0 * rsqrt(max(1.0e-37, t1*t1*t1));\n}\n\nfloat SchlickPhF(float cosTheta, float k)\n{\t\n\tfloat t0 = 1.0 - k*k;\n\tfloat t1 = 1.0 - k * cosTheta;\n\t\n\t//return t0 / (t1 * t1);// nan if ct&&g==-1 or ct&&g==1\n\treturn t0 / max(1.0e-37, t1 * t1);    \n}\n\n\n// approx. minimizes RMS error between HG and Schlick (not used at runtime here)\nfloat GtoSchlickK(float g)\n{\t\n    const float a = -0.132207;\n    const float b = -0.735586;\n    const float c = 0.5 + a;\n \n    float k = g * (1.5 + g*g * (a + (b + c * abs(g)) * abs(g)));\n\n    return k;\n}\n\n\n#ifdef USE_MINIMALIST_BRDF\nfloat SnowBRDF(float NdL, float NdV, float VdL)\n{   \n    float phF = SchlickPhF(-VdL, 0.702);\n          //phF = HenyeyGreensteinPhF(-VdL, 0.503);\n    \n    return HapkeBRDF(NdV, NdL, 0.995, phF);\n}\n#else\nfloat SnowBRDF(float NdL, float NdV, float VdL)\n{    \n    float sh = ShadowHiding(-VdL, 0.995, 1.0);\n\n    float phF = SchlickPhF(-VdL, 0.634) * sh;\n          //phF = HenyeyGreensteinPhF(-VdL, 0.445408) * sh;\n    \n    return HapkeBRDF(NdV, NdL, 0.995, phF);\n}\n#endif\n//=================================================================================================//\n/////////////////////////////////////////////////////////////////////////////////////////////////////","name":"Common","description":"","type":"common"}]}