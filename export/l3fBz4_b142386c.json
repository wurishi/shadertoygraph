{"ver":"0.1","info":{"id":"l3fBz4","date":"1728319471","viewed":32,"name":"3D physics sim2","username":"Psyph","description":"made it so that there is only acceleration downwards to look a little more realistic, but each object still has different amount of downward acceleration.","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["physics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592654\nvec3 palette(float t)\n{\n    vec3 a=vec3(.5,.5,.5);\n    vec3 b=vec3(1.000,1.000,1.000);\n    vec3 c=vec3(1.000,1.000,1.000);\n    vec3 d=vec3(0.,.333,.666);\n    \n\treturn a+b*cos(2.*PI*(c*t+d));\n}\nvec3 para(vec2 f, vec2 bl, vec2 tl, vec2 br,vec3 c)\n{\n    vec2 n=f-bl;\n    vec2 l=tl-bl;\n    float ls=n.y*l.x/l.y;\n    \n    vec2 n2=f-br;\n    float rs=n2.y*l.x/l.y;\n    \n    vec2 b=br-bl;\n    float bs=n.x*b.y/b.x;\n    \n    vec2 n3=f-tl;\n    float ts=n3.x*b.y/b.x;\n    \n    if(f.x-ls>bl.x&&f.x-rs<br.x&&f.y-bs>bl.y&&f.y-ts<tl.y)\n    {\n        return c;\n    }\n    return vec3(0.);\n}\nvec2 conv2(vec3 p)\n{\n    vec2 r=vec2(p.x*1.32-p.z*.415,p.x*.06+p.y*.6+p.z*.3);\n    //return (r+vec2(330.,10.))*vec2(iResolution.x/1200.,iResolution.y/900.);\n    return r+vec2(.44,.02);\n}\nvec3 conrp(ivec4 p1, ivec2 p2, vec2 f, float s,float u)\n{\n    //xx xy yx yy zx zy\n    float px=texelFetch(iChannel0,p1.xy,0).x;\n    float py=texelFetch(iChannel0,p1.zw,0).x;\n    float pz=texelFetch(iChannel0,p2,0).x;\n\n    \n    s=mix(.005,.01,1.-pz);\n    //if(length(f-vec2(px,py))<s) return vec3(1.,0.,0.); //red\n    if(length(f-conv2(vec3(px,py,pz)))<s) return palette(u/51.); //color based on identity\n\n    return vec3(0.);\n    //return texture(iChannel0,u).xyz;\n}\nvec3 conrp2(vec2 u)\n{\n    return texture(iChannel0,u).xyz;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n    vec3 col=vec3(0.);\n    \n    vec2 bc=conv2(vec3(1.,0.,1.));\n    vec2 rc=conv2(vec3(1.,0.,0.));\n    vec2 lc=conv2(vec3(0.,0.,1.));\n    vec2 fc=conv2(vec3(0.,0.,0.));\n    vec2 rtc=conv2(vec3(1.,1.,0.));\n    vec2 ltc=conv2(vec3(0.,1.,1.));\n    \n    col+=para(uv,fc,lc,rc,vec3(0.322,0.322,0.322)+vec3(.1-length(uv*3.-vec2(3.2,.6)))/25.); //floor\n    col+=para(uv,lc,ltc,bc,vec3(0.141,0.141,0.141)+vec3(uv.y)/4.); //back\n    col+=para(uv,rc,bc,rtc,vec3(0.129,0.129,0.129)+vec3(uv.y)/4.); //right\n    \n    \n    float s=8.;\n    int i=1;\n    while(i<51)\n    {\n        int iph=i+int(iResolution)/2+1;\n        col+=conrp(ivec4(i*2,i*3,iph,i*4),ivec2(i,i*2+1),uv,s,float(i));\n        i++;\n    }\n    //if(length(fragCoord-(lc-fc+rc))<4.) col=vec3(1.000,1.000,1.000);\n    //col=conrp2(uv);\n    \n    fragColor=vec4(col,1.0);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec3 calcn(vec3 c,float acc)\n{\n    float vs=30.;\n    float as=30.;\n    float np=c.x+c.y/vs-1./(vs*2.);\n    if (np<0.) \n    {\n        np=0.;\n        c.y=(1.-c.y+acc*.0115);\n    }\n    if (np>1.) \n    {\n        np=1.;\n        c.y=(1.-c.y+acc*.0115);\n    }\n    float nv=c.y-acc*(c.z/as);\n    \n    c.x=np;\n    c.y=nv;\n    \n    return c;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col=vec3(0.,.5,.5);    \n    \n    if(iFrame<10)\n    {\n        //setup initial phys data for objs.\n\n        col=texture(iChannel1,uv).xyz;\n    }\n    else\n    {\n        float xyz = (uv.x<.5)?0.:1.;\n        //float xyz = 1.;\n        col=calcn(texelFetch(iChannel0,ivec2(fragCoord),0).xyz,xyz);\n    }\n    \n    fragColor=vec4(col,1.);\n}","name":"Buffer A","description":"","type":"buffer"}]}