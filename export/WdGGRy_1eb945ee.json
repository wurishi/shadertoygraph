{"ver":"0.1","info":{"id":"WdGGRy","date":"1570398526","viewed":332,"name":"B-Noise","username":"tsuhre","description":"A noise algorithm using a seeded pseudo-random noise texture combined with time offset and directional blur passes to create smooth noise at different scales. iMouse.x controls the blur radius.","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["noise","seeded","bnoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n  After applying the blur passes, the distribution of values for the noise\n  becomes closer and closer to median gray, the sigma is calculated\n  from the blur radius and used to normalize the noise so that the \n  min and max values fall closer to 0 and 1\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float r = iMouse.x/10.;\n    if (r < 1.) r = triangleWave(iTime, .1)*100. + 1.;\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    float v = texture(iChannel0, uv).x;\n    \n    float sigma = .5 - 1./(r);\n    \n    //normalize\n    v = stretchNorm(v, sigma, 1.-sigma);\n    \n    //texturing\n    //v = sawWave(v, 10.);\n    //v = triangleWave(v, 10.);\n    //v = sinWave(v, 10.);\n    \n    fragColor = vec4(v);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\n  the algorithm bounces grayscale values from seeded noise texture between 0 and 1\n  using the original grayscale value as the speed modifier for how fast to oscellate\n  the pixel.\n\n  the offset of 100 is applied to the time to push the pixels out of\n  synchronized movement during the first few frames.\n*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2  uv = fragCoord.xy/iResolution.xy;\n    float v  = texture(iChannel0, uv).x;\n    \n    float t  = iTime*speed + 100.; \n    \n    //v = sawWave     (v*t, 1.);\n    //v = triangleWave(v*t, 1.);\n    v = sinWave     (v*t, 1.);\n    \n    fragColor = vec4(v);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"float speed = .5;\n\nfloat pi = 3.14159265359;\n\nfloat stretchNorm(float v, float a, float b){\n\treturn (v-a)/(b-a);   \n}\n\nfloat sawWave     (float v, float m){return mod(v, 1./m)*m;}\nfloat triangleWave(float v, float m){return abs(mod(v, 1./m)*m*2.-1.);}\nfloat sinWave     (float v, float m){return (sin(v*m*pi*2.)+1.)/2.;}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"/*\n  X pass blur\n\n  uses a cosine distribution instead of the normal distribution\n  to approximate a gaussian kernel\n*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float r = iMouse.x/10.;\n    if (r < 1.) r = triangleWave(iTime, .1)*100. + 1.;\n    \n    float avg   = texture(iChannel0, fragCoord/iResolution.xy).x;\n    float area  = 1.;\n    \n    vec2 dir = vec2(1, 0);\n    \n    for (float i = 1.; i < r; i += 1.){\n        float m = (cos(i*pi/r) + 1.)/2.;\n        area += m*2.;\n    \tavg += texture(iChannel0, (fragCoord+dir*i)/iResolution.xy).x*m;\n        avg += texture(iChannel0, (fragCoord-dir*i)/iResolution.xy).x*m;\n    }\n    \n    avg /= area;\n    \n    fragColor = vec4(avg);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"/*\n  Y pass blur\n*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float r = iMouse.x/10.;\n    if (r < 1.) r = triangleWave(iTime, .1)*100. + 1.;\n    \n    float avg   = texture(iChannel0, fragCoord/iResolution.xy).x;\n    float area  = 1.;\n    \n    vec2 dir = vec2(0, 1);\n    \n    for (float i = 1.; i < r; i += 1.){\n        float m = (cos(i*pi/r) + 1.)/2.;\n        area += m*2.;\n    \tavg += texture(iChannel0, (fragCoord+dir*i)/iResolution.xy).x*m;\n        avg += texture(iChannel0, (fragCoord-dir*i)/iResolution.xy).x*m;\n    }\n    \n    avg /= area;\n    \n    fragColor = vec4(avg);\n}","name":"Buffer C","description":"","type":"buffer"}]}