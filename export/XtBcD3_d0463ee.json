{"ver":"0.1","info":{"id":"XtBcD3","date":"1510244966","viewed":1466,"name":"Gray-Scott Model fast (MIP Lapl)","username":"FabriceNeyret2","description":"revisit [url]https://www.shadertoy.com/view/XtjcWK[/url] using MIPmap to calculate Laplacian (in spirit of Multigrids and Difference of Gaussians)\nMouse paint.\nx8 accelerated version. See full screen !    ref: [url]http://mrob.com/pub/comp/xmorphia/[/url]","likes":27,"published":3,"flags":32,"usePreview":0,"tags":["simulation","mipmap","diffusion","gray","reactiondiffusion","reaction","grayscott","scottmodel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 O, vec2 U) {  O = texelFetch( iChannel0, ivec2(U), 0);  O.x = 1.-O.x; }","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// directly inspired from https://www.shadertoy.com/view/XtjcWK\n// But using MIPmap to evaluate Laplacian\n\n#define T(z) texture(iChannel0, U, z)\n\nvoid mainImage( out vec4 O,  vec2 U )\n{  \n    vec2 R = iResolution.xy;\n    U /= R;\n    \n   \tvec4 C = T(0.),\n         D = 4.5* ( T(.66) - C );             // laplacian\n    \n    float dt = 2.,\n          f = .01 + U.x/13.,\n          k = .04 + U.y/35.,\n          s = C.x*C.y*C.y;\n\n    C += dt * vec4( -s + f*(1.-C.x) + .2*D.x, // Gray-Scott Model + integration\n                     s - (f+k)*C.y  + .1*D.y, // http://mrob.com/pub/comp/xmorphia/\n                     0, 0 );\n\n    O = length( iMouse.xy  -U*R ) < 10.\n            ? vec4(.25,.5,0,0)                // mouse paint\n            : C;\n\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// directly inspired from https://www.shadertoy.com/view/XtjcWK\n// But using MIPmap to evaluate Laplacian\n\n#define T(z) texture(iChannel0, U, z)\n\nvoid mainImage( out vec4 O,  vec2 U )\n{  \n    vec2 R = iResolution.xy;\n    U /= R;\n    \n   \tvec4 C = T(0.),\n         D = 4.5* ( T(.66) - C );             // laplacian\n    \n    float dt = 2.,\n          f = .01 + U.x/13.,\n          k = .04 + U.y/35.,\n          s = C.x*C.y*C.y;\n\n    C += dt * vec4( -s + f*(1.-C.x) + .2*D.x, // Gray-Scott Model + integration\n                     s - (f+k)*C.y  + .1*D.y, // http://mrob.com/pub/comp/xmorphia/\n                     0, 0 );\n\n    O = length( iMouse.xy  -U*R ) < 10.\n            ? vec4(.25,.5,0,0)                // mouse paint\n            : C;\n\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// directly inspired from https://www.shadertoy.com/view/XtjcWK\n// But using MIPmap to evaluate Laplacian\n\n#define T(z) texture(iChannel0, U, z)\n\nvoid mainImage( out vec4 O,  vec2 U )\n{  \n    vec2 R = iResolution.xy;\n    U /= R;\n    \n   \tvec4 C = T(0.),\n         D = 4.5* ( T(.66) - C );             // laplacian\n    \n    float dt = 2.,\n          f = .01 + U.x/13.,\n          k = .04 + U.y/35.,\n          s = C.x*C.y*C.y;\n\n    C += dt * vec4( -s + f*(1.-C.x) + .2*D.x, // Gray-Scott Model + integration\n                     s - (f+k)*C.y  + .1*D.y, // http://mrob.com/pub/comp/xmorphia/\n                     0, 0 );\n\n    O = length( iMouse.xy  -U*R ) < 10.\n            ? vec4(.25,.5,0,0)                // mouse paint\n            : C;\n\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"// directly inspired from https://www.shadertoy.com/view/XtjcWK\n// But using MIPmap to evaluate Laplacian\n\n#define T(z) texture(iChannel0, U, z)\n\nvoid mainImage( out vec4 O,  vec2 U )\n{  \n    vec2 R = iResolution.xy;\n    U /= R;\n    \n   \tvec4 C = T(0.),\n         D = 4.5* ( T(.66) - C );             // laplacian\n    \n    float dt = 2.,\n          f = .01 + U.x/13.,\n          k = .04 + U.y/35.,\n          s = C.x*C.y*C.y;\n\n    C += dt * vec4( -s + f*(1.-C.x) + .2*D.x, // Gray-Scott Model + integration\n                     s - (f+k)*C.y  + .1*D.y, // http://mrob.com/pub/comp/xmorphia/\n                     0, 0 );\n\n    O = length( iMouse.xy  -U*R ) < 10.\n            ? vec4(.25,.5,0,0)                // mouse paint\n            : C;\n\n}","name":"Buffer D","description":"","type":"buffer"}]}