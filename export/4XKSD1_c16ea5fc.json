{"ver":"0.1","info":{"id":"4XKSD1","date":"1719945876","viewed":55,"name":"ARTS1308 HW2 Nightfall of Miami","username":"lyhokia","description":"ARTS1308 HW2 Nightfall of Miami","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265358\n\nvec4 glowCircle(vec2 uv, vec2 pos, float innerRad, float outerRad, vec3 color) {\n    // TODO\n    return vec4(1.0, 1.0, 1.0, 0.0);\n}\n\n// From the shader book\nfloat plot(vec2 st, float pct, float width) {\n    return smoothstep(pct - width, pct, st.y) - smoothstep(pct + width, pct, st.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec3 outColor;\n\tvec2 uv = gl_FragCoord.xy;\n    vec2 uv_res = uv / iResolution.xy;\n    \n    // Layer 1: Background\n    float undertuneDuration = 8.0;\n    float pct = (sin(iTime / undertuneDuration * 2.0 * PI) + 1.0) / 2.0;\n    vec3 pink = vec3(0.955, 0.366, 0.869);\n    vec3 cyan = vec3(0.31, 1, 0.83);\n    vec3 undertune = mix(cyan, pink, pct);\n    outColor = undertune;\n    \n    // Layer 2: NightSky\n    // Draws under layer: dark blue\n    float nightF = 0.7 + sin(uv_res.x * PI) / 4.8;\n    float nightMask = smoothstep(nightF - 0.5, nightF, uv_res.y);\n    vec4 nightSky = nightMask*vec4(0.396, 0.09, 0.416,1.0)+(1.0-nightMask)*vec4(0.0,0.0,0.0,0.0);\n    outColor = mix(outColor, nightSky.rgb, nightSky.a);\n    // Draws upper layer: violet\n    nightF = 0.9 + sin(uv_res.x * PI) / 4.8;\n    nightMask = smoothstep(nightF - 0.5, nightF, uv_res.y);\n    nightSky = nightMask*vec4(0.086, 0.094, 0.157,  1.0)+(1.0-nightMask)*vec4(0.0,0.0,0.0,0.0);\n    outColor = mix(outColor, nightSky.rgb, nightSky.a);\n    \n    // Layer 3: Sun\n    vec2 sunCenter = vec2(iResolution.x * 0.23, iResolution.y * 0.28);\n\tfloat sunRadius = 0.14 * iResolution.y;\n    // Reference: https://www.shadertoy.com/view/l3jXDV\n\tfloat sunDis = length(sunCenter - uv);\n    float sunCoreRadius = sunRadius * 0.2;\n    float sunEdgeRadius = sunRadius * 1.0;\n    float sunGlowRadius = sunRadius * 1.3;\n    float sunCoreToEdge = smoothstep(sunCoreRadius, sunEdgeRadius, sunDis);\n    float sunEdgeToGlow = step(sunEdgeRadius, sunDis);\n    vec3 sunCoreColor = vec3(0.996,0.743,0.316);\n    vec3 sunEdgeColor = vec3(1.0,0.847,0.486);\n    vec3 sunGlowColor = vec3(0.965,0.122,0.494);\n    vec3 sunColor = mix(sunCoreColor, sunEdgeColor, sunCoreToEdge);\n    sunColor = mix(sunColor, sunGlowColor, sunEdgeToGlow);\n\tfloat sunA = 1.0 - smoothstep(sunEdgeRadius,sunGlowRadius, sunDis);\n    vec4 sun = vec4(sunColor, sunA);\n    outColor = mix(outColor, sun.rgb, sun.a);\n    \n    // Layer 4: Horizon & City\n    float cityY = iResolution.y * (0.14+0.15*sin(floor(uv_res.x*76.0+iTime*1.8)));\n    float horizonA = 1.0 - step(cityY, uv.y);\n    vec3 horizonColor = vec3(0.1);\n    outColor = mix(outColor, horizonColor, horizonA);\n    \n    // Reference: https://www.shadertoy.com/view/lcV3Wm\n    // License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n    // Add a scanline effect for a retro '80s TV look\n    float scanline = sin(uv_res.y * 800.0) * 0.12;\n    outColor -= scanline;\n    \n    // Output the final color to the screen\n    fragColor = vec4(outColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}