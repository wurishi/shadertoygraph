{"ver":"0.1","info":{"id":"Dd2BWG","date":"1690082362","viewed":207,"name":"sws3005_16 A5","username":"qingkexu","description":"It is about galaxy. We refer to the link: https://www.shadertoy.com/view/7dKXWR","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//============================================================================\n// PROJECT ID: sws3005_16\n//\n// GROUP NUMBER: 16\n//\n// STUDENT NAME: Qing Kexu\n// NUS User ID.: t0930215\n//\n// STUDENT NAME: Deng Ziyi\n// NUS User ID.: t0930225\n//\n// STUDENT NAME: He Zhiyan\n// NUS User ID.: t0930276\n//\n// COMMENTS TO GRADER:\n//\n//============================================================================\n\n\n// FRAGMENT SHADER FOR SHADERTOY\n// Run this at https://www.shadertoy.com/new\n// See documentation at https://www.shadertoy.com/howto\n\n// Your browser must support WebGL 2.0.\n// Check your browser at https://webglreport.com/?v=2\n\n\n//============================================================================\n// Constants.\n//============================================================================\n#define N(p) (texture(iChannel1, (p)/18.).r*2.-1.)\n#define A(p) (mix( x*dot(p,x), p, cos(t) ) + sin(t) *cross(p,x))\n\nconst float PI = 3.1415926536;\n\nconst vec3 BACKGROUND_COLOR = vec3( 0.1, 0.2, 0.6 );\n\n// Vertical field-of-view angle of camera. In radians.\nconst float FOVY = 50.0 * PI / 180.0;\n\n// Use this for avoiding the \"epsilon problem\" or the shadow acne problem.\nconst float DEFAULT_TMIN = 10.0e-4;\n\n// Use this for tmax for non-shadow ray intersection test.\nconst float DEFAULT_TMAX = 10.0e6;\n\n// Equivalent to number of recursion levels (0 means ray-casting only).\n// We are using iterations to replace recursions.\nconst int NUM_ITERATIONS = 2;\n\n// Constants for the scene objects.\nconst int NUM_LIGHTS = 2;\nconst int NUM_MATERIALS = 6;\nconst int NUM_PLANES = 5;\nconst int NUM_SPHERES = 7;\n\nfloat fCoord;\n//============================================================================\n// Define new struct types.\n//============================================================================\nstruct Ray_t {\n    vec3 o;  // Ray Origin.\n    vec3 d;  // Ray Direction. A unit vector.\n};\n\nstruct Plane_t {\n    // The plane equation is Ax + By + Cz + D = 0.\n    float A, B, C, D;\n    int materialID;\n};\n\nstruct Sphere_t {\n    vec3 center;\n    float radius;\n    int materialID;\n};\n\nstruct Light_t {\n    vec3 position;  // Point light 3D position.\n    vec3 I_a;       // For Ambient.\n    vec3 I_source;  // For Diffuse and Specular.\n};\n\nstruct Material_t {\n    vec3 k_a;   // Ambient coefficient.\n    vec3 k_d;   // Diffuse coefficient.\n    vec3 k_r;   // Reflected specular coefficient.\n    vec3 k_rg;  // Global reflection coefficient.\n    float n;    // The specular reflection exponent. Ranges from 0.0 to 128.0.\n};\n\n//----------------------------------------------------------------------------\n// The lighting model used here is similar to that shown in\n// Lecture Topic B08 (Basic Ray Tracing). Here it is computed as\n//\n//     I_local = SUM_OVER_ALL_LIGHTS {\n//                   I_a * k_a +\n//                   k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ]\n//               }\n// and\n//     I = I_local  +  k_rg * I_reflected\n//----------------------------------------------------------------------------\n\n//============================================================================\n// Global scene data.\n//============================================================================\nPlane_t Plane[NUM_PLANES];\nSphere_t Sphere[NUM_SPHERES];\nLight_t Light[NUM_LIGHTS];\nMaterial_t Material[NUM_MATERIALS];\n\n/////////////////////////////////////////////////////////////////////////////\n// Initializes the scene.\n/////////////////////////////////////////////////////////////////////////////\nvoid InitScene()\n{\n    float y=1.4f;\n    // Horizontal plane.水平\n    Plane[0].A = 0.0;\n    Plane[0].B = 1.0;\n    Plane[0].C = 0.0;\n    Plane[0].D = 3.0;\n    Plane[0].materialID = 0;\n\n    // Vertical plane.垂直右\n    Plane[1].A = 0.0;\n    Plane[1].B = 0.0;\n    Plane[1].C = 1.0;\n    Plane[1].D =10.5;\n    Plane[1].materialID = 0;\n    // Vertical plane.垂直左\n    Plane[2].A = 1.0;\n    Plane[2].B = 0.0;\n    Plane[2].C = 0.0;\n    Plane[2].D = 13.5;\n    Plane[2].materialID = 0;\n    \n    Plane[3].A = 1.0;\n    Plane[3].B = 0.0;\n    Plane[3].C = 0.0;\n    Plane[3].D = -13.5;\n    Plane[3].materialID = 0;\n    \n    Plane[4].A = 0.0;\n    Plane[4].B = 0.0;\n    Plane[4].C = 1.0;\n    Plane[4].D = -10.5;\n    Plane[4].materialID = 0;\n\n    // Center  sphere.  //x   y   z\n    Sphere[0].center = vec3( 0.0, y, 0.0 );\n    Sphere[0].radius = 1.4;\n    Sphere[0].materialID = 1;\n\n    // sphere1   \n    Sphere[1].center = vec3( 1.8 * cos(iTime), y, 1.8 * sin(iTime) );\n    Sphere[1].radius = 0.1;\n    Sphere[1].materialID = 3;\n\n    // sphere2   \n    Sphere[2].center = vec3( 2.3 * cos(iTime*0.8),y ,2.3 * sin(iTime*0.8) );\n    Sphere[2].radius = 0.2;\n    Sphere[2].materialID = 4;\n\n    // sphere3   \n    Sphere[3].center = vec3( 3.0 * cos(iTime*0.6), y, 3.0 * sin(iTime*0.6));\n    Sphere[3].radius = 0.3;\n    Sphere[3].materialID = 5;\n\n    // sphere4   \n    Sphere[4].center = vec3( 3.6 * cos(iTime*0.55),y,  3.6 * sin(iTime*0.55) );\n    Sphere[4].radius = 0.25;\n    Sphere[4].materialID = 2;\n\n    // sphere5\n    Sphere[5].center = vec3( 4.7 * cos(iTime*0.4),y,  4.7 * sin(iTime*0.4) );\n    Sphere[5].radius = 0.5;\n    Sphere[5].materialID = 4;\n    \n    // sphere6 \n    Sphere[6].center = vec3( 6.0 * cos(iTime*0.35),y,  6.0 * sin(iTime*0.35) );\n    Sphere[6].radius = 0.6;\n    Sphere[6].materialID = 3;\n\n        // Silver material.\n    Material[0].k_d = vec3( 0.5, 0.5, 0.5 );\n    Material[0].k_a = 0.2 * Material[0].k_d;\n    Material[0].k_r = 2.0 * Material[0].k_d;\n    Material[0].k_rg = 0.5 * Material[0].k_r;\n    Material[0].n = 64.0;\n\n    // Gold material.\n    // Material[1].k_d = vec3( 0.9, 0.75, 0.4 );\n    // Material[1].k_a = 1.0 * Material[1].k_d;\n    // Material[1].k_r = 1.0 * Material[1].k_d;\n    // Material[1].k_rg = 0.5 * Material[1].k_r;\n    // Material[1].n = 128.0;\n\n    Material[1].k_d = vec3(135.0/255.0, 206.0/255.0, 250.0/255.0);\n    Material[1].k_a = 0.2 * Material[2].k_d;\n    Material[1].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[1].k_rg = 0.5 * Material[2].k_r;\n    Material[1].n = 128.0;\n\n    // Green plastic material.\n    Material[2].k_d = vec3( 135.0/255.0, 206.0/255.0, 250.0/255.0);\n    Material[2].k_a = 0.2 * Material[2].k_d;\n    Material[2].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[2].k_rg = 0.5 * Material[2].k_r;\n    Material[2].n = 128.0;\n    \n    Material[3].k_d = vec3( 0.6, 0.8, 0.0 );\n    Material[3].k_a = 0.2 * Material[2].k_d;\n    Material[3].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[3].k_rg = 0.5 * Material[2].k_r;\n    Material[3].n = 128.0;\n    \n    Material[4].k_d = vec3( 0.0, 0.8, 0.7 );\n    Material[4].k_a = 0.2 * Material[2].k_d;\n    Material[4].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[4].k_rg = 0.5 * Material[2].k_r;\n    Material[4].n = 128.0;\n    \n    Material[5].k_d = vec3( 0.0, 0.1, 1.0 );\n    Material[5].k_a = 0.2 * Material[2].k_d;\n    Material[5].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[5].k_rg = 1.0 * Material[2].k_r;\n    Material[5].n = 128.0;\n\n    // Light 0.s\n    //Light[0].position = vec3( 4.0, 8.0, -3.0 );\n    Light[0].position =vec3( 0.0, y+8.0, 0.0 );\n    Light[0].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[0].I_source = vec3( 1.0, 1.0, 1.0 );\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is such an intersection, outputs the value of t, the position\n// of the intersection (hitPos) and the normal vector at the intersection\n// (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax,\n                     out float t, out vec3 hitPos, out vec3 hitNormal )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n\n    // We have a hit -- output results.\n    t = t0;\n    hitPos = ray.o + t0 * ray.d;\n    hitNormal = normalize( N );\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is one or two such intersections, outputs the value of the\n// smaller t, the position of the intersection (hitPos) and the normal\n// vector at the intersection (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax,\n                      out float t, out vec3 hitPos, out vec3 hitNormal )\n{\n    vec3 rayOriInSphere = ray.o - sph.center;\n    float a = dot(ray.d, ray.d);\n    float b = 2.0 * dot(ray.d, rayOriInSphere);\n    float c = dot(rayOriInSphere, rayOriInSphere) - sph.radius * sph.radius;\n    float d = b*b - 4.0*a*c;\n    if(d<0.0) return false;\n    float t1 = (-1.0*b + sqrt(d))/(2.0*a);\n    float t2 = (-1.0*b - sqrt(d))/(2.0*a);\n\n    float finalT;\n    bool isSatisfy = false;\n    if(t1>=tmin && t1<=tmax){\n        isSatisfy = true;\n        finalT = t1;\n    }\n    if(t2>=tmin && t2<=tmax){\n        isSatisfy = true;\n        finalT = t2;\n    }\n    if(isSatisfy == false) return false;\n\n    t = finalT;\n    hitPos = ray.o + finalT * ray.d;\n    hitNormal = (hitPos - sph.center)/sph.radius;\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax )\n{\n  // Compute the vector from the ray origin to the sphere center\n    vec3 oc = ray.o-sph.center;\n    \n    // Compute the coefficients of the quadratic equation\n    float a = dot(ray.d, ray.d);\n    float b = 2.0 * dot(oc, ray.d);\n    float c = dot(oc, oc) - sph.radius * sph.radius;\n    \n    // Compute the discriminant\n    float discriminant = b * b - 4.0 * a * c;\n    \n    // If the discriminant is negative, there are no real roots, so the ray does not intersect the sphere\n    if (discriminant < 0.0) {\n        return false;\n    }\n    \n    // Compute the parameters t1 and t2 for the intersection points\n    float t1 = (-b - sqrt(discriminant)) / (2.0 * a);\n    float t2 = (-b + sqrt(discriminant)) / (2.0 * a);\n    \n    // Check if the intersections are within the given range\n    if (t1 >= tmin && t1 <= tmax) {\n        return true;\n    }\n    if (t2 >= tmin && t2 <= tmax) {\n        return true;\n    }\n    \n    // If none of the above conditions are met, the ray does not intersect the sphere\n    return false;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes (I_a * k_a) + k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ].\n// Input vectors L, N and V are pointing AWAY from surface point.\n// Assume all vectors L, N and V are unit vectors.\n/////////////////////////////////////////////////////////////////////////////\nvec3 PhongLighting( in vec3 L, in vec3 N, in vec3 V, in bool inShadow,\n                    in Material_t mat, in Light_t light )\n{\n    if ( inShadow ) {\n        return light.I_a * mat.k_a;\n    }\n    else {\n        vec3 R = reflect( -L, N );\n        float N_dot_L = max( 0.0, dot( N, L ) );\n        float R_dot_V = max( 0.0, dot( R, V ) );\n        float R_dot_V_pow_n = ( R_dot_V == 0.0 )? 0.0 : pow( R_dot_V, mat.n );\n\n        return light.I_a * mat.k_a +\n               light.I_source * (mat.k_d * N_dot_L + mat.k_r * R_dot_V_pow_n);\n    }\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Casts a ray into the scene and returns color computed at the nearest\n// intersection point. The color is the sum of light from all light sources,\n// each computed using Phong Lighting Model, with consideration of\n// whether the interesection point is being shadowed from the light.\n// If there is no interesection, returns the background color, and outputs\n// hasHit as false.\n// If there is intersection, returns the computed color, and outputs\n// hasHit as true, the 3D position of the intersection (hitPos), the\n// normal vector at the intersection (hitNormal), and the k_rg value\n// of the material of the intersected object.\n/////////////////////////////////////////////////////////////////////////////\nvec3 CastRay( in Ray_t ray, in vec2 fCoord,\n              out bool hasHit, out vec3 hitPos, out vec3 hitNormal, out vec3 k_rg )\n{\n    // Find whether and where the ray hits some object.\n    // Take the nearest hit point.\n\n    bool hasHitSomething = false;\n    float nearest_t = DEFAULT_TMAX;   // The ray parameter t at the nearest hit point.\n    vec3 nearest_hitPos;              // 3D position of the nearest hit point.\n    vec3 nearest_hitNormal;           // Normal vector at the nearest hit point.\n    int nearest_hitMatID;             // MaterialID of the object at the nearest hit point.\n\n    float temp_t;\n    vec3 temp_hitPos;\n    vec3 temp_hitNormal;\n    bool temp_hasHit;\n\n    /////////////////////////////////////////////////////////////////////////////\n    // TASK:\n    // * Try interesecting input ray with all the planes and spheres,\n    //   and record the front-most (nearest) interesection.\n    // * If there is interesection, need to record hasHitSomething,\n    //   nearest_t, nearest_hitPos, nearest_hitNormal, nearest_hitMatID.\n    /////////////////////////////////////////////////////////////////////////////\n\n    //which Plane does it hit\n    int hitWhichPlane;\n\n    //Intersection with the plane\n    for(int i=0; i<NUM_PLANES; i++)\n    {\n        temp_hasHit = IntersectPlane(Plane[i], ray, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal);\n        if(temp_hasHit && temp_t < nearest_t)\n        {\n            hasHitSomething = true;\n            nearest_t = temp_t;\n            nearest_hitPos = temp_hitPos;\n            nearest_hitNormal = temp_hitNormal;\n            nearest_hitMatID = Plane[i].materialID;\n            hitWhichPlane = i;\n        }\n    }\n\n    //Intersection with the sphere\n    for(int i=0; i<NUM_SPHERES; i++)\n    {\n        temp_hasHit = IntersectSphere(Sphere[i], ray, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal);\n        if(temp_hasHit && temp_t<nearest_t)\n        {\n            hasHitSomething = true;\n            nearest_t = temp_t;\n            nearest_hitPos = temp_hitPos;\n            nearest_hitNormal = temp_hitNormal;\n            nearest_hitMatID = Sphere[i].materialID;\n        }\n    }\n\n    // One of the output results.\n    hasHit = hasHitSomething;\n    if ( !hasHitSomething ) return BACKGROUND_COLOR;\n\n    vec3 I_local = vec3( 0.0 );  // Result color will be accumulated here.\n\n    /////////////////////////////////////////////////////////////////////////////\n    // TASK:\n    // * Accumulate lighting from each light source on the nearest hit point.\n    //   They are all accumulated into I_local.\n    // * For each light source, make a shadow ray, and check if the shadow ray\n    //   intersects any of the objects (the planes and spheres) between the\n    //   nearest hit point and the light source.\n    // * Then, call PhongLighting() to compute lighting for this light source.\n    /////////////////////////////////////////////////////////////////////////////\n\n    for (int i = 0; i < NUM_LIGHTS; i++)\n    {\n        // Check whether it is in shadow\n        bool inShadow = false;\n        bool tempInShadow;\n        Ray_t shadowRay;\n        shadowRay.o = nearest_hitPos;\n        shadowRay.d = normalize(Light[i].position - nearest_hitPos);\n\n        // Since it is a line segment, we need to find the endpoint's t value\n        float LineSegmentMin = DEFAULT_TMIN;\n        float LineSegmentMax = length(Light[i].position - nearest_hitPos);\n\n        // Check for intersection with planes\n        for (int j = 0; j < NUM_PLANES; j++)\n        {\n            if (inShadow)\n                break;\n            tempInShadow = IntersectPlane(Plane[j], shadowRay, LineSegmentMin, LineSegmentMax);\n            if (tempInShadow)\n                inShadow = true;\n        }\n\n        // Check for intersection with spheres\n        for (int j = 0; j < NUM_SPHERES; j++)\n        {\n            if (inShadow)\n                break;\n            tempInShadow = IntersectSphere(Sphere[j], shadowRay, LineSegmentMin, LineSegmentMax);\n            if (tempInShadow)\n                inShadow = true;\n        }\n\n        // Prepare needed parameters\n        vec3 L = normalize(Light[i].position - nearest_hitPos);\n        vec3 N = normalize(nearest_hitNormal);\n        vec3 V = normalize(-ray.d);\n\n        if (nearest_hitMatID == 1)  // Assuming the \"C1\" material has ID 2.\n        {\n            // Sample the texture and use it as the diffuse color.\n           //vec3 texture_color = texture(iChannel0, vec2(nearest_hitPos.x, nearest_hitPos.y)).rgb;\n            vec3 texture_color = (texture(iChannel0, vec2(nearest_hitPos.x, nearest_hitPos.y)).rgb / 1.1 + 0.5) * 1.5 * vec3(0.529, 0.808, 0.922);\n            Material[nearest_hitMatID].k_d = texture_color;\n        }\n\n        // // Check if the material is of type \"sample2D\"\n         if (nearest_hitMatID == 2)  // Assuming the \"C1\" material has ID 2.\n        {\n             // Sample the texture and use it as the diffuse color.\n            vec3 texture_color = (texture(iChannel2, vec2(nearest_hitPos.x, nearest_hitPos.y)).rgb/ 1.1 + 0.5) * 1.5 * vec3(204.0/255.0, 51.0/255.0, 51.0/255.0);\n             Material[nearest_hitMatID].k_d = texture_color;\n         }\n        \n         if (nearest_hitMatID == 3)  // Assuming the \"C1\" material has ID 2.\n         {\n            // Sample the texture and use it as the diffuse color.\n             vec3 texture_color = (texture(iChannel0, vec2(nearest_hitPos.x, nearest_hitPos.y)).rgb/ 1.1 + 0.5) * 1.5 * vec3(0.0/255.0, 153.0/255.0, 204.0/255.0);\n             Material[nearest_hitMatID].k_d = texture_color;\n         }\n\n         if (nearest_hitMatID == 4)  // Assuming the \"C1\" material has ID 2.\n         {\n             // Sample the texture and use it as the diffuse color.\n             vec3 texture_color = (texture(iChannel2, vec2(nearest_hitPos.x, nearest_hitPos.y)).rgb/ 1.1 + 0.5) * 1.5 * vec3(102.0/255.0, 0.0/255.0, 153.0/255.0);\n             Material[nearest_hitMatID].k_d = texture_color;\n         }\n        \n         if (nearest_hitMatID == 5)  // Assuming the \"C1\" material has ID 2.\n         {\n             // Sample the texture and use it as the diffuse color.\n             vec3 texture_color = (texture(iChannel0, vec2(nearest_hitPos.x, nearest_hitPos.y)).rgb/ 1.1 + 0.5) * 1.5 * vec3(255.0/255.0, 215.0/255.0, 0.0/255.0);\n             Material[nearest_hitMatID].k_d = texture_color;\n         }\n\n        if (nearest_hitMatID == 0)  // Assuming the \"C1\" material has ID 2.\n        {\n            vec2 uv = (fCoord/iResolution.xy);\n            // Sample the texture and use it as the diffuse color.\n            vec3 texture_color = texture(iChannel3, vec2(uv)).rgb;\n            Material[nearest_hitMatID].k_d = texture_color;\n        }\n        \n        // Compute Phong lighting for this light source and accumulate it.\n        I_local += PhongLighting(L, N, V, inShadow, Material[nearest_hitMatID], Light[i]);\n    }\n\n    // Populate output results.\n    hitPos = nearest_hitPos;\n    hitNormal = nearest_hitNormal;\n    k_rg = Material[nearest_hitMatID].k_rg;\n\n    return I_local;\n}\n\nvoid CenterPlanet(out vec4 fragColor1, vec2 fragCoord)\n{\n    fragColor1-= fragColor1;\n    float stepSize = 3.;//Raymarch step size\n    float iteration = 1.;//Loop iteration\n    float radius;//Radius from planet center (used for rings)\n    float t = iTime*.3+.7;//Time variable for rotation\n\n    vec3 position=vec3(0.36,-0.28,3);//Raymarch sample point's position\n    vec3 rposition;//Rotated position\n    vec3 res = iResolution;//Resolution variable\n    vec3 d = normalize(vec3(fragCoord+fragCoord-res.xy, -res));\n    vec3 x = vec3(.32,.95,0);//Raymarch direction\n     \n   \n    for(position.z=stepSize;iteration++<3e1&&stepSize>1e-3; position+=d*stepSize)\n    stepSize= min(max(abs(radius=length(rposition=A(position))-1.)-.2, abs(rposition.y)+N(rposition+radius*3e1)/2e2),radius+.4)+N(rposition/.2)*N(rposition/.04)/3e2,\n    fragColor1.rgb += max((1.3-d)/2e2/(.2+stepSize),N(A(d)/.01)-1.1+iteration/9e1);\n}\n/////////////////////////////////////////////////////////////////////////////\n// Execution of fragment shader starts here.\n// 1. Initializes the scene.\n// 2. Compute a primary ray for the current pixel (fragment).\n// 3. Trace ray into the scene with NUM_ITERATIONS recursion levels.\n/////////////////////////////////////////////////////////////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    InitScene();\n    \n    vec4 fragColor1;\n    CenterPlanet(fragColor1, fragCoord);\n    // Scale pixel 2D position such that its y coordinate is in [-1.0, 1.0].\n    vec2 pixel_pos = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n\n    // Position the camera.\n    //vec3 cam_pos = vec3( sin(iTime)*3.2,1.28,3.2)*1.5;\n    vec3 cam_pos = vec3( 3.2,3.0,4.0)*1.5;\n    vec3 cam_lookat = vec3(1.0, 1.0, 0.0 );\n    vec3 cam_up_vec = vec3( 0.0, 1.0, 0.0 );\n\n    // Set up camera coordinate frame in world space.\n    vec3 cam_z_axis = normalize( cam_pos - cam_lookat );\n    vec3 cam_x_axis = normalize( cross(cam_up_vec, cam_z_axis) );\n    vec3 cam_y_axis = normalize( cross(cam_z_axis, cam_x_axis));\n\n    // Create primary ray.\n    float pixel_pos_z = -1.0 / tan(FOVY / 2.0);\n    Ray_t pRay;\n    pRay.o = cam_pos;\n    pRay.d = normalize( pixel_pos.x * cam_x_axis  +  pixel_pos.y * cam_y_axis  +  pixel_pos_z * cam_z_axis );\n\n    // Start Ray Tracing.\n    // Use iterations to emulate the recursion.\n    vec3 I_result = vec3( 0.0 );\n    vec3 compounded_k_rg = vec3( 1.0 );\n    Ray_t nextRay = pRay;\n\n    for ( int level = 0; level <= NUM_ITERATIONS; level++ )\n    {\n        bool hasHit;\n        vec3 hitPos, hitNormal, k_rg;\n\n        vec3 I_local = CastRay( nextRay,fragCoord, hasHit, hitPos, hitNormal, k_rg );\n\n        I_result += compounded_k_rg * I_local;\n\n        if ( !hasHit ) break;\n\n        compounded_k_rg *= k_rg;\n\n        nextRay = Ray_t( hitPos, normalize( reflect(nextRay.d, hitNormal) ) );\n    }\n\n\n    fragColor = vec4( I_result, 1.0 )+fragColor1;\n}","name":"Image","description":"","type":"image"}]}