{"ver":"0.1","info":{"id":"4stBWl","date":"1527228719","viewed":170,"name":"Simple Linear Transformation","username":"chao_mu","description":"I'm working to fill in some gaps in my background by brushing up on math. Watching the youtube series","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","grid","transformation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define LINE_COUNT 10.\n#define THICKNESS 0.05\n#define TRANSFORM mat2(\\\n   1.2, .4, \\\n   .4, .8)\n       \n       \nfloat renderGrid(vec2 uv) {    \n    // Get a repeating value\n    vec2 repeating = fract(vec2(uv * LINE_COUNT));\n    if (repeating.x > 1. - THICKNESS || repeating.y > 1. - THICKNESS) {\n    \treturn 1.;\n    }\n    \n    return 0.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -0.5 to 0.5 and adjust for aspect ratio)\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv -= .5;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    \n    vec3 col = vec3(renderGrid(uv));\n    col += vec3(0, renderGrid(uv * TRANSFORM), 0.);\n \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}