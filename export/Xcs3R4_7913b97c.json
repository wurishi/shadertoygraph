{"ver":"0.1","info":{"id":"Xcs3R4","date":"1702827632","viewed":17,"name":"GoldenFlowShader","username":"cross_citrus","description":"A shader featuring golden particles ascending upwards.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["001"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 BG_COLOR = vec3(1.0, 1.0, 1.0);\nconst vec3 PARTICLE_COLOR = vec3(1.0, 0.84, 0.0); \n    \nconst float SPEED = 0.35;\nconst int PARTICLE_COUNT = 150;\nconst float PARTICLE_SIZE = 0.003;\nconst float PARTICLE_FLACTUATION = 0.015;\nconst float BLUR = 0.8;\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n        \n    float alpha = 0.0;\n    for (int i = 0; i < PARTICLE_COUNT; i++) {\n        float x = rand(vec2(float(i), 1.0));\n        float y = mod(rand(vec2(float(i), 0.0)) + iTime * SPEED, 1.0);\n        \n        float dist = distance(uv, vec2(x, y));\n        \n        float particleSize = PARTICLE_SIZE + fract(rand(vec2(float(i), 0.5))) * PARTICLE_FLACTUATION;\n        float smoothSize =  particleSize * BLUR;\n        float result = 1.0 - smoothstep(particleSize, particleSize + smoothSize, dist);\n        \n        if (result > alpha) {\n            alpha = result;\n        }\n    }\n\n    vec3 color = (alpha == 1.0) ? vec3(1.0) : mix(PARTICLE_COLOR, BG_COLOR, 1.0 - alpha);\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}