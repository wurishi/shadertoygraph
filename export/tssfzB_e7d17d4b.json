{"ver":"0.1","info":{"id":"tssfzB","date":"1588560869","viewed":223,"name":"circle inversion","username":"matthen","description":"minimal circle inversion shader","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["circles","inversion","tangent"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 gradient(in float r) {\t    \n    vec3 rainbow = 0.5 + 0.5 * cos((0.2 * r + vec3(0.2, 0.45, 0.8)*6.));   \n    return rainbow;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    uv *= 2.;\n    \n    \n    float r = length(uv);\n    uv /= (r * r);\n    \n    float t = 0.05 * iTime;\n    uv.x -= 15. * sin(t);\n    uv.y -= 10. * cos(t);\n    \n    float theta = 1.2 * t;\n    uv = vec2(    \n        uv.x * cos(theta) - uv.y * sin(theta),\n        uv.y * cos(theta) + uv.x * sin(theta)\n    );\n    \n        \n    \n    float thickness = 0.02 / r;\n    \n    \n\tuv.y +=  2. * (0.5 + 0.5 * cos(10. * (t - 0.2 * floor(uv.x)))) * mod(floor(uv.x), 2.);\n  \n        \n    vec3 col = vec3(1. - smoothstep(\n        0., thickness,\n        length(fract(uv) - 0.5) - 0.5));\n    col *= gradient(floor(uv.x) + 3.2 * floor(uv.y));\n    \n    fragColor = vec4(vec3(col), 1.0);\n}","name":"Image","description":"","type":"image"}]}