{"ver":"0.1","info":{"id":"lXjfRK","date":"1729707603","viewed":34,"name":"Raymarch room","username":"asadeporco","description":"There is no walls","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["attempt"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DISTANCE 100.\n#define SURF_DIST .01\n\n\nfloat GetDist(vec3 p) {\n    vec3 q = p;\n    float sphere = sdSphere(p-vec3(0., 1., 6.), 1.);\n    float box = sdBox(p-vec3(0. + sin(iTime) * 3., 1., 6.), vec3(.75));\n    float frame = sdBoxFrame(p-vec3(0., 1., 6.), vec3(1.5,1.3,1.5), 0.125 );\n    float plane = p.y;\n    \n    float d = smin(sphere, box, .2);\n    d = min(d, frame);\n    d = min(d, plane);\n    \n    \n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.;\n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd * dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if (dO > MAX_DISTANCE || dS < SURF_DIST) break;\n    \n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p);\n    vec2 e = vec2(.01, .0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx)        \n    );\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p){\n\n    vec3 lightPos = vec3(0., 5., 6.);\n    lightPos.xz += vec2(sin(iTime), cos(iTime)) / 2.;\n    \n    vec3 l = normalize(lightPos - p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), .0, 1.);\n    float d = RayMarch(p + n*SURF_DIST * 2., l);\n    if(d<length(lightPos-p)) dif *= .3;\n    \n    \n    return dif;\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5 * iResolution.xy)/iResolution.y;\n    vec2 m = (iMouse.xy-.5 * iResolution.xy)/iResolution.y * 8.;\n\n    vec3 ro = vec3(0., 1., 0.);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1.));\n    \n    ro.yz *= rot2D(-m.y);\n    rd.yz *= rot2D(-m.y);\n    \n    ro.xz *= rot2D(-m.x);\n    rd.xz *= rot2D(-m.x);\n    \n    float d = RayMarch(ro, rd);\n    vec3 p = ro + rd * d;\n    \n    \n    float dif = GetLight(p);\n    \n    vec3 col = vec3(dif);\n\n    col = vec3(GetLight(p));\n    \n    fragColor = vec4(palette(dif),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"mat2 rot2D(float angle){\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n\n}\n\nfloat smin( float a, float b, float k )\n{\n    k *= log(2.0);\n    float x = b-a;\n    return a + x/(1.0-exp2(x/k));\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n\nfloat sdBoxFrame( vec3 p, vec3 b, float e )\n{\n       p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\nvec3 palette( in float t)\n{\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.00, 0.33, 0.67);\n    return a + b*cos( 6.283185*(c*t+d) );\n}\t\t\t\t","name":"Common","description":"","type":"common"}]}