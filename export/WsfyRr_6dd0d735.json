{"ver":"0.1","info":{"id":"WsfyRr","date":"1583953006","viewed":214,"name":"Alien 1979 Intro","username":"jvb","description":"Alien 1979 Intro","likes":16,"published":1,"flags":96,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Ml23Rm","filepath":"https://soundcloud.com/emelyetaylor/bmus-film-composition-alien-1979","previewfilepath":"https://soundcloud.com/emelyetaylor/bmus-film-composition-alien-1979","type":"musicstream","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// VHS effect borrowed from some other shadertoy\n\tfloat random(vec2 p)\n    {\n        float t = floor(iTime * 20.) / 10.;\n        return fract(sin(dot(p, vec2(t * 12.9898, t * 78.233))) * 43758.5453);\n    }\n\n    float noise(vec2 uv, float blockiness)\n    {\n        vec2 lv = fract(uv);\n        vec2 id = floor(uv);\n\n        float n1 = random(id);\n        float n2 = random(id+vec2(1,0));\n        float n3 = random(id+vec2(0,1));\n        float n4 = random(id+vec2(1,1));\n\n        vec2 u = smoothstep(0.0, 1.0 + blockiness, lv);\n\n        return mix(mix(n1, n2, u.x), mix(n3, n4, u.x), u.y);\n    }\n\n    float fbm(vec2 uv, int count, float blockiness, float complexity)\n    {\n        float val = 0.0;\n        float amp = 0.5;\n\n        while(count != 0)\n        {\n          val += amp * noise(uv, blockiness);\n            amp *= 0.5;\n            uv *= complexity;\n            count--;\n        }\n\n        return val;\n    }\n\n    const float glitchAmplitude = 0.05; // increase this\n    const float glitchNarrowness = 4.0;\n    const float glitchBlockiness = 2.0;\n    const float glitchMinimizer = 25.0; // decrease this\n\n    void mainImage( out vec4 fragColor, in vec2 fragCoord )\n    {\n        \n    #define USE_VHS 1\n    #if USE_VHS\n        // Normalized pixel coordinates (from 0 to 1)\n        vec2 uv = fragCoord/iResolution.xy;\n        vec2 a = vec2(uv.x * (iResolution.x / iResolution.y), uv.y);\n        vec2 uv2 = vec2(a.x / iResolution.x, exp(a.y));\n        vec2 id = floor(uv * 8.0);\n        //id.x /= floor(texture(iChannel0, vec2(id / 8.0)).r * 8.0);\n\n        // Generate shift amplitude\n        float shift = glitchAmplitude * pow(fbm(uv2, int(random(id) * 6.), glitchBlockiness, glitchNarrowness), glitchMinimizer);\n\n        // Create a scanline effect\n        float scanline = 1.0; //abs(cos(uv.y * 400.));\n        scanline = smoothstep(0.0, 2.0, scanline);\n        shift = smoothstep(0.00001, 0.2, shift);\n\n        // Apply glitch\n        float randShift =  random(id) * shift;\n        float colR = texture(iChannel0, vec2(uv.x - shift, uv.y)).r * (1. - shift) + randShift;\n        float colG = texture(iChannel0, vec2(uv.x - shift, uv.y)).g * (1. - shift) + randShift;\n        float colB = texture(iChannel0, vec2(uv.x - shift, uv.y)).b * (1. - shift) + randShift;\n        // Mix with the scanline effect\n        // vec3 f = vec3(colR, colG, colB);\n        vec3 f = vec3(colR, colG, colB) - (0.1 * scanline);\n#else\n        vec3 f = texture(iChannel1, uv).xyz;\n#endif\n        // Output to screen\n        fragColor = vec4(f, 1.0);\n    }","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvec3 fade(float t) \n{\n\tt = clamp(t, 0.0, 1.0); \n\tvec3 col = vec3(1,1,3)*t*4.0;\n\tcol = clamp(col, 0.0, 1.0); \n\treturn col; \n\t\n}\n\nfloat hash( float n ) {\n    return fract(sin(n)*43758.5453123);\n}\n\nfloat noise( in vec3 x ) {\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    float n = p.x + p.y*157.0 + 113.0*p.z;\n    return mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                   mix( hash(n+157.0), hash(n+158.0),f.x),f.y),\n               mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                   mix( hash(n+270.0), hash(n+271.0),f.x),f.y),f.z);\n}\n\n// stars borrowed from some shadertoy\nvec4 renderStars( const in vec3 rd ) {\n\tvec3 rds = rd;\n\tvec3 col = vec3(0);\n    float v = 1.0/( 2. * ( 1. + rds.z ) );\n    \n    vec2 xy = vec2(rds.y * v, rds.x * v);\n    float s = noise(rds*134.);\n //   s += noise_3(rds*370.);\n    s += noise(rds*470.);\n    s = pow(s,19.0) * 0.00001;\n    if (s > 0.5) {\n        vec3 backStars = vec3(s)*.5 * vec3(0.95,0.8,0.9); \n        col += backStars;\n    }\n\treturn   vec4( col, 1 ); \n} \n\n\n\nvec3 render_logo(in vec2 p, float t) \n{\n\tvec2 op = p;\n\tvec3 col = vec3(0);\n\tvec3 rd = vec3(p.x+t*0.2,p.y,-1.0)*0.2;  \n\tcol = renderStars(rd).xyz*4.0;\n\tcol += renderStars(rd*2.0).xyz*4.0;\n\t\n\tp.x += (t*0.2-4.0);\n\tp *= 0.013;\n\tfloat ang = atan(p.y,p.x); \n\tcol += vec3(1.0, 0.7, 0.0)*0.4*(sin(ang+p.x*44.0+p.y*0.5)+0.18*sin(2.0*ang+2.0+1.7*p.x+4.232*p.y)+0.1*sin(ang*12.0+3.0+0.73*p.x+3.57*p.y));  \n\t\n\tp = op;\n\tp.y *= 0.5;\n\tp.x += (t*0.2-7.0);\n\tfloat l = length(p.xy); \n\tif (l < 4.0) col = vec3(0);\n\tif (abs(l-4.0) < 0.2) col += 1.0*sin(4.0*(l-4.0));\n\n\tcol *= 0.5;\n\tcol = clamp(col, 0.0, 1.0);\n\tp = op;\n\tp *= 1.1;\n\tp -= vec2(-3, +1.0);\n\tp.y *= 1.1;\n\tt *= 0.2;\n\t// A\n\tif (abs(0.075+p.x-p.y*0.33) < 0.05 && abs(p.y) < 0.2) col += fade(t-2.0); \n\tif (abs(-0.0750+p.x+p.y*0.33) < 0.05 && abs(p.y) < 0.2) col += fade(t-6.0); \n\tif (abs(-0.0+p.x-p.y*0.0) < 0.08 && abs(p.y+0.08) < 0.05) col += fade(t-13.0); // mid bar\n\t\n\tp -= vec2(0.5*3.0,0);\n\t// L\n\tif (abs(p.x-p.y*0.0) < 0.05 && abs(p.y) < 0.2) col += fade(t-4.0); \n\tif (abs(-0.1+p.x-p.y*0.0) < 0.10 && abs(p.y+0.15) < 0.05) col += fade(t-10.0); \n\t\n\tp -= vec2(0.5*3.0,0);\n\t// I\n\tif (abs(p.x-p.y*0.0) < 0.05 && abs(p.y) < 0.2) col += fade(t); \n\n\tp -= vec2(0.5*3.0,0);\n\t// E\n\tif (abs(+0.1+p.x-p.y*0.0) < 0.05 && abs(p.y) < 0.2) col += fade(t-5.0); \n\tif (abs(-0.0+p.x-p.y*0.0) < 0.10 && abs(p.y+0.15) < 0.05) col += fade(t-9.0); // lower bar\n\tif (abs(-0.0+p.x-p.y*0.0) < 0.10 && abs(p.y-0.15) < 0.05) col += fade(t-9.0); // upper bar\n\n\tif (abs(-0.0+p.x-p.y*0.0) < 0.08 && abs(p.y-0.0) < 0.05) col += fade(t-12.0); // mid bar\n\n\tp -= vec2(0.5*3.0,0);\n\t// N\n\tif (abs(+0.125+p.x-p.y*0.0) < 0.05 && abs(p.y) < 0.2) col += fade(t-11.0); \n\tif (abs(-0.1250+p.x-p.y*0.0) < 0.05 && abs(p.y) < 0.2) col += fade(t-8.0); \n\tif (abs(-0.0+p.x+p.y*0.5) < 0.05 && abs(p.y) < 0.2) col += fade(t-3.0); \n\t\n\treturn clamp(col, 0.0, 1.0);\t\n}\n\nfloat random(vec3 scale, float seed) { seed = mod(seed, 10.0); return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed); }\nvec3 uniformlyRandomDirection(float seed) {\n    float u = random(vec3(12.9898, 78.233, 151.7182), seed);\n    float v = random(vec3(63.7264, 10.873, 623.6736), seed);\n    float z = 1.0 - 2.0 * u; float r = sqrt(1.0 - z * z);\n    float angle = 6.283185307179586 * v;\n    return vec3(r * cos(angle), r * sin(angle), z);\n}\nvec3 uniformlyRandomVector(float seed) { return uniformlyRandomDirection(seed) * sqrt(random(vec3(36.7539, 50.3658, 306.2759), seed)); }\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 p = 2.0*fragCoord/iResolution.xy-1.0;\n\tp.x *= iResolution.x/iResolution.y; \n\n\tvec3 col = vec3(0); \n\n\tp *= 2.0;\n\tvec2 op = p; \n\n   \t//float t = iMouse.x;\n\tfloat t = iTime-5.0;\n \n    #define SAMPLES 8\n\tconst float AA = 0.0025*0.5;\n\tfor (int i = 0; i < SAMPLES; i++) {\n\t\tp.x += 0.001*sin(t+0.1*p.y);\n\t\tfloat a = 2.0*3.1415*(float(i)/float(SAMPLES)); \n\t\tcol += render_logo(p+AA*vec2(cos(a),sin(a)),t);\n\t}\n\tcol /= float(SAMPLES);\n\n#define COLOR_GRAIN 1\n#if COLOR_GRAIN\n\tcol += uniformlyRandomVector(iTime)*0.05;\n#endif\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}