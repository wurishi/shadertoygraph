{"ver":"0.1","info":{"id":"4ltcDM","date":"1532881450","viewed":95,"name":"G9","username":"t0916004","description":"Graphics rendering.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//============================================================================\n// PROJECT ID: <your Project ID is an integer equal to 62 + group_no.>\n//\n// GROUP NUMBER:\n//\n// STUDENT NAME: \n// NUS User ID.: \n//\n// STUDENT NAME: \n// NUS User ID.: \n//\n// STUDENT NAME: \n// NUS User ID.: \n//\n// COMMENTS TO GRADER: \n//\n//============================================================================\n\n\n// FRAGMENT SHADER FOR SHADERTOY\n// Run this at https://www.shadertoy.com/new\n// See documentation at https://www.shadertoy.com/howto\n\n// Your browser must support WebGL 2.0.\n// Check your browser at http://webglreport.com/?v=2\n\n\n//============================================================================\n// Constants.\n//============================================================================\nconst int NUM_LIGHTS = 2;\nconst int NUM_MATERIALS = 10;\nconst int NUM_PLANES = 5;\nconst int NUM_SPHERES = 6;\n\nconst vec3 BACKGROUND_COLOR = vec3(0.0, 0.0, 0.0);\n\n // Vertical field-of-view angle of camera. In radians.\nconst float FOVY = 50.0 * 3.1415926535 / 180.0; \n\n// Use this for avoiding the \"epsilon problem\" or the shadow acne problem.\nconst float DEFAULT_TMIN = 10.0e-4;\n\n// Use this for tmax for non-shadow ray intersection test.\nconst float DEFAULT_TMAX = 10.0e6;\n\n// Equivalent to number of recursion levels (0 means ray-casting only).\n// We are using iterations to replace recursions.\nconst int NUM_ITERATIONS = 2;\n\n\n//============================================================================\n// Define new struct types.\n//============================================================================\nstruct Ray_t {\n    vec3 o;  // Ray Origin.\n    vec3 d;  // Ray Direction. A unit vector.\n};\n\nstruct Plane_t {\n    // The plane equation is Ax + By + Cz + D = 0.\n    float A, B, C, D;\n    int materialID;\n};\n\nstruct Sphere_t {\n    vec3 center;\n    float radius;\n    int materialID;\n};\n\nstruct Light_t {\n    vec3 position;  // Point light 3D position.\n    vec3 I_a;       // For Ambient.\n    vec3 I_source;  // For Diffuse and Specular.\n};\n\nstruct Material_t {\n    vec3 k_a;   // Ambient coefficient.\n    vec3 k_d;   // Diffuse coefficient.\n    vec3 k_r;   // Reflected specular coefficient.\n    vec3 k_rg;  // Global reflection coefficient.\n    vec3 k_rag;\n    float n;    // The specular reflection exponent. Ranges from 0.0 to 128.0. \n    float Eta;\n};\n\n//----------------------------------------------------------------------------\n// The lighting model used here is similar to that on Slides 8 and 12 of \n// Lecture 11 (Ray Tracing). Here it is computed as\n//\n//     I_local = SUM_OVER_ALL_LIGHTS { \n//                   I_a * k_a + \n//                   k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ]\n//               }\n// and\n//     I = I_local  +  k_rg * I_reflected\n//----------------------------------------------------------------------------\n\n\n//============================================================================\n// Global scene data.\n//============================================================================\nPlane_t Plane[NUM_PLANES];\nSphere_t Sphere[NUM_SPHERES];\nLight_t Light[NUM_LIGHTS];\nMaterial_t Material[NUM_MATERIALS];\nbool isInside;\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Initializes the scene.\n/////////////////////////////////////////////////////////////////////////////\nvoid InitScene()\n{\n    // Horizontal plane.\n    Plane[0].A = 0.0;\n    Plane[0].B = 1.0;\n    Plane[0].C = 0.0;\n    Plane[0].D = 0.0;\n    Plane[0].materialID = 9;\n\n    // Vertical plane.\n    Plane[1].A = 0.0;\n    Plane[1].B = 0.0;\n    Plane[1].C = 1.0;\n    Plane[1].D = 4.0;\n    Plane[1].materialID = 0;\n\n    Plane[2].A = 1.0;\n    Plane[2].B = 0.0;\n    Plane[2].C = 0.0;\n    Plane[2].D = 4.0;\n    Plane[2].materialID = 0;\n\n     Plane[3].A = 0.0;\n    Plane[3].B = 0.0;\n    Plane[3].C = 1.0;\n    Plane[3].D = -4.0;\n    Plane[3].materialID = 0;\n\n     Plane[4].A = 1.0;\n    Plane[4].B = 0.0;\n    Plane[4].C = 0.0;\n    Plane[4].D = -4.0;\n    Plane[4].materialID = 0;\n\n   // Center bouncing sphere.\n\tSphere[0].center = vec3(0.0, abs(sin(6.0 * iTime)) + 0.7, 0.0);\n\tSphere[0].radius = 0.7;\n\tSphere[0].materialID = 3;\n\n\t// Circling sphere.\n\tSphere[1].center = vec3(2.0 * cos(iTime), 1.0 + 0.5 * cos(iTime), 2.0 * sin(iTime));\n\tSphere[1].radius = 0.5;\n\tSphere[1].materialID = 2;\n\n\t//\n\tSphere[2].center = vec3(0.5*abs(sin(2.0*iTime)) + 1.0, 0.3, 0.0);\n\tSphere[2].radius = 0.3;\n\tSphere[2].materialID = 1;\n\n\t//\n\tSphere[3].center = vec3(1.0, 1.5, 0.5);\n\tSphere[3].radius = 0.1;\n\tSphere[3].materialID = 5;\n\n\t//\n\tSphere[4].center = vec3(-2.0 * cos(iTime), 1.0 - 0.5 * cos(iTime), -2.0 * sin(iTime));\n\tSphere[4].radius = 0.3;\n\tSphere[4].materialID = 4;\n\n\t//\n\tSphere[5].center = vec3(-2.6 * cos(1.5 * iTime), abs(2.2 - 1.0 * sin(iTime)), -2.6 * sin(1.5 * iTime));\n\tSphere[5].radius = 0.25;\n\tSphere[5].materialID = 6;\n    \n    \n    // Silver material.\n    Material[0].k_d = vec3( 0.5, 0.5, 0.5 );\n   Material[0].k_a = 0.2 * Material[0].k_d;\n\tMaterial[0].k_r = 2.0 * Material[0].k_d;\n\tMaterial[0].k_rg = 0.2 * Material[0].k_r;\n    Material[0].k_rag = vec3(0.0);\n\tMaterial[0].n = 64.0;\n    Material[0].Eta = 1.0;\n\n    // Gold material.\n    Material[1].k_d = vec3( 0.8, 0.7, 0.1 );\n    Material[1].k_a = 0.2 * Material[1].k_d;\n    Material[1].k_r = 2.0 * Material[1].k_d;\n    Material[1].k_rg = 0.1 * Material[1].k_r;\n    Material[1].k_rag = vec3(1.0);\n    Material[1].n = 64.0;\n    Material[1].Eta = 1.5;\n\n    // Green plastic material.\n    Material[2].k_d = vec3( abs(sin(0.2*iTime)), abs(sin(0.2*iTime + 1.0)), abs(sin(0.2*iTime + 2.0)) );\n    Material[2].k_a = 0.0 * Material[2].k_d;\n    Material[2].k_r = vec3( 0.2);\n    Material[2].k_rg =vec3(0.1);\n    Material[2].k_rag = vec3(1.0);\n    Material[2].n = 16.0;\n    Material[2].Eta = 1.5;\n\n    \n    //Glass material\n    Material[3].k_d = vec3( 0.5, 0.5, 0.5 );\n    Material[3].k_a = 0.1 * Material[3].k_d;\n    Material[3].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[3].k_rg = 0.1 * Material[2].k_r;\n    Material[3].k_rag = vec3(1.0);\n    Material[3].n = 20.0;\n    Material[3].Eta = 1.5;\n\n\n    // Red    \n    Material[4].k_d = vec3( 0.8, 0.0, 0.0 );\n    Material[4].k_a = 0.2 * Material[4].k_d;\n    Material[4].k_r = 2.0 * Material[4].k_d;\n    Material[4].k_rg = 0.2 * Material[4].k_r;\n    Material[4].k_rag = vec3(0.0);\n    Material[4].n = 64.0;\n    Material[4].Eta = 1.5;\n\n    // Blue\n    Material[5].k_d = vec3(0.0, 0.0, 0.8);\n\tMaterial[5].k_a = 0.2 * Material[5].k_d;\n\tMaterial[5].k_r = 2.0 * Material[5].k_d;\n\tMaterial[5].k_rg = 0.2 * Material[5].k_r;\n    Material[5].k_rag = vec3(0.0);\n\tMaterial[5].n = 64.0;\n    Material[5].Eta = 1.0;\n\n\n\t//Blue2\n\tMaterial[6].k_d = vec3(0.0, 0.7, 0.8);\n\tMaterial[6].k_a = 0.2 * Material[6].k_d;\n\tMaterial[6].k_r = 2.0 * Material[6].k_d;\n\tMaterial[6].k_rg = 0.5 * Material[6].k_r;\n    Material[6].k_rag = vec3(0.0);\n\tMaterial[6].n = 128.0;\n    Material[6].Eta = 1.2;\n\n     // Black.\n    Material[7].k_d = vec3( 0.1, 0.1, 0.1 );\n    Material[7].k_a = vec3(0.0);\n\tMaterial[7].k_r = 2.0 * Material[7].k_d;\n\tMaterial[7].k_rg = 0.2 * Material[7].k_r;\n    Material[7].k_rag = vec3(0.0);\n\tMaterial[7].n = 64.0;\n    Material[7].Eta = 1.0;\n\n     //wRITE.\n    Material[8].k_d = vec3( 1.0, 1.0, 1.0 );\n    Material[8].k_a = vec3(0.0);\n    Material[8].k_r = vec3(0.1);\n    Material[8].k_rg = vec3(1.0);\n    Material[8].k_rag = vec3(0.0);\n    Material[8].n = 1.0;\n    Material[8].Eta = 1.0;\n\n\n      Material[9].k_d = vec3( 0.2, 0.2, 0.2 );\n   Material[9].k_a = 0.0 * Material[9].k_d;\n\tMaterial[9].k_r = 5.0 * Material[9].k_d;\n\tMaterial[9].k_rg = 1.0 * Material[9].k_r;\n    Material[9].k_rag = vec3(0.0);\n\tMaterial[9].n = 40.0;\n    Material[9].Eta = 1.0;\n    // Light 0.\n//    Light[0].position = vec3( 4.0, 8.0, -3.0 );\n    Light[0].position = vec3( 4.0, 8.0+sin(iTime), -3.0);\n    Light[0].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[0].I_source = 0.1 * vec3( 1.0, 1.0, 1.0 );\n\n    // Light 1.\n    Light[1].position = vec3( -3.0, 8.0, 0.0 );\n    Light[1].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[1].I_source = (abs(sin(0.2 *iTime))+0.5) * vec3( 1.0, 1.0, 1.0 );\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is such an intersection, outputs the value of t, the position\n// of the intersection (hitPos) and the normal vector at the intersection \n// (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax,\n                     out float t, out vec3 hitPos, out vec3 hitNormal ) \n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n\n    // We have a hit -- output results.\n    t = t0;\n    hitPos = ray.o + t0 * ray.d;\n    hitNormal = normalize( N );\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is one or two such intersections, outputs the value of the \n// smaller t, the position of the intersection (hitPos) and the normal \n// vector at the intersection (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax,\n                      out float t, out vec3 hitPos, out vec3 hitNormal ) \n{\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n\n    ray.o -= sph.center;\n    float b = 2.0 * dot(ray.d, ray.o); // b \n    float c = dot(ray.o, ray.o) - sph.radius * sph.radius; // c\n    float d = b * b - 4.0 * c; \n    isInside = false;\n    if(d > 0.0)\n    {\n        float t_positive = (-b + sqrt(max(0.0, d))) / 2.0;\n        float t_negative = (-b - sqrt(max(0.0, d))) / 2.0; \n        if(min(t_negative, t_positive) <= DEFAULT_TMIN && max(t_negative, t_positive) > DEFAULT_TMIN){\n            isInside = true;\n            t = max(t_negative, t_positive);\n            hitPos = ray.o + sph.center + t * ray.d;\n            hitNormal = normalize(ray.o + t * ray.d);\n            return true;          \n        }\n\n        if(t_negative > tmin && t_negative < tmax)\n        {\n            t = t_negative;\n            hitPos = ray.o + sph.center + t * ray.d;\n            hitNormal = normalize(ray.o + t * ray.d);\n            return true;\n        }\n        else if(t_positive > tmin && t_positive < tmax)\n        {\n            t = t_positive;\n            hitPos = ray.o + sph.center + t * ray.d;\n            hitNormal = normalize(ray.o + t * ray.d);\n            return true;\n        }\n        \n    }\n    /////////////////////////////////\n    return false;  // Replace this with your code.\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax )\n{\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n   \n    // Transform the ray to the sphere's local coordinate frame\n    ray.o -= sph.center;\n    float b = 2.0 * dot(ray.d, ray.o); // b \n    float c = dot(ray.o, ray.o) - sph.radius * sph.radius; // c\n    float d = b * b - 4.0 * c; \n    if(d > 0.0)\n    {\n        float t_positive = (-b + sqrt(max(0.0, d))) / 2.0;\n        float t_negative = (-b - sqrt(max(0.0, d))) / 2.0; \n        if((t_negative > tmin && t_negative < tmax) || (t_positive > tmin && t_positive < tmax))\n            return true;\n    }\n    /////////////////////////////////\n    return false;  // Replace this with your code.\n\n}\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes (I_a * k_a) + k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ].\n// Input vectors L, N and V are pointing AWAY from surface point.\n// Assume all vectors L, N and V are unit vectors.\n/////////////////////////////////////////////////////////////////////////////\nvec3 PhongLighting( in vec3 L, in vec3 N, in vec3 V, in bool inShadow, \n                    in Material_t mat, in Light_t light )\n{\n    if ( inShadow ) {\n        return light.I_a * mat.k_a;\n    }\n    else {\n        vec3 R = reflect( -L, N );\n        float N_dot_L = max( 0.0, dot( N, L ) );\n        float R_dot_V = max( 0.0, dot( R, V ) );\n        float R_dot_V_pow_n = ( R_dot_V == 0.0 )? 0.0 : pow( R_dot_V, mat.n );\n\n        return light.I_a * mat.k_a + \n               light.I_source * (mat.k_d * N_dot_L + mat.k_r * R_dot_V_pow_n);\n    }\n}\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Casts a ray into the scene and returns color computed at the nearest\n// intersection point. The color is the sum of light from all light sources,\n// each computed using Phong Lighting Model, with consideration of\n// whether the interesection point is being shadowed from the light.\n// If there is no interesection, returns the background color, and outputs\n// hasHit as false.\n// If there is intersection, returns the computed color, and outputs\n// hasHit as true, the 3D position of the intersection (hitPos), the\n// normal vector at the intersection (hitNormal), and the k_rg value\n// of the material of the intersected object.\n/////////////////////////////////////////////////////////////////////////////\nvec3 CastRay( in Ray_t ray, \n              out bool hasHit, out vec3 hitPos, out vec3 hitNormal, out vec3 k_rg, out vec3 k_rag, out float Eta ) \n{\n    // Find whether and where the ray hits some object. \n    // Take the nearest hit point.\n\n    bool hasHitSomething = false;\n    float nearest_t = DEFAULT_TMAX;   // The ray parameter t at the nearest hit point.\n    vec3 nearest_hitPos;              // 3D position of the nearest hit point.\n    vec3 nearest_hitNormal;           // Normal vector at the nearest hit point.\n    int nearest_hitMatID;             // MaterialID of the object at the nearest hit point.\n\n    float temp_t;\n    vec3 temp_hitPos;\n    vec3 temp_hitNormal;\n    bool temp_hasHit;\n\n    /////////////////////////////////////////////////////////////////////////////\n    // TASK:\n    // * Try interesecting input ray with all the planes and spheres,\n    //   and record the front-most (nearest) interesection.\n    // * If there is interesection, need to record hasHitSomething,\n    //   nearest_t, nearest_hitPos, nearest_hitNormal, nearest_hitMatID.\n    /////////////////////////////////////////////////////////////////////////////\n\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n\n    for(int i = 0; i < NUM_PLANES; i++)\n    {\n        if(IntersectPlane(Plane[i], ray, DEFAULT_TMIN, nearest_t, temp_t, temp_hitPos, temp_hitNormal)) // Hit \n        {\n            nearest_t = temp_t;\n            nearest_hitPos = temp_hitPos;\n            nearest_hitNormal = temp_hitNormal;\n            nearest_hitMatID = Plane[i].materialID;            \n        }\n    }\n    for(int i = 0; i < NUM_SPHERES; i++)\n    {\n        if(IntersectSphere(Sphere[i], ray, DEFAULT_TMIN, nearest_t, temp_t, temp_hitPos, temp_hitNormal)) // Hit \n        {\n            nearest_t = temp_t;\n            nearest_hitPos = temp_hitPos;\n            nearest_hitNormal = temp_hitNormal;\n            nearest_hitMatID = Sphere[i].materialID;\n            if(isInside)\n            {\n                hasHitSomething = true;\n                break;\n            }        \n        }\n    }\n    if(nearest_t < DEFAULT_TMAX)\n        hasHitSomething = true;\n    /////////////////////////////////\n\n\n\n    // One of the output results.\n    hasHit = hasHitSomething;\n    if ( !hasHitSomething ) return BACKGROUND_COLOR;\n\n    if(nearest_hitPos.z == -4.0 && nearest_hitPos.x >= -4.0 && nearest_hitPos.x <= 4.0){\n        vec2 p = mod (nearest_hitPos.xy - vec2(-4.0, 0.0), 1.0);\n        if((p.x < 0.5 && p.y < 0.5) || (p.x > 0.5 && p.y > 0.5))\n            nearest_hitMatID = 0;\n        else\n            nearest_hitMatID = 1;\n    }\n    else if(nearest_hitPos.z == 4.0 && nearest_hitPos.x >= -4.0 && nearest_hitPos.x <= 4.0){\n        vec2 p = mod (nearest_hitPos.xy - vec2(-4.0, 0.0), 1.0);\n        if((p.x < 0.5 && p.y < 0.5) || (p.x > 0.5 && p.y > 0.5))\n            nearest_hitMatID = 0;\n        else\n            nearest_hitMatID = 7;\n    }\n    else if(nearest_hitPos.x == -4.0 && nearest_hitPos.z >= -4.0 && nearest_hitPos.z <= 4.0){\n        vec2 p = mod (nearest_hitPos.yz - vec2(0.0, -4.0), 1.0);\n        if((p.x < 0.5 && p.y < 0.5) || (p.x > 0.5 && p.y > 0.5))\n            nearest_hitMatID = 0;\n        else\n            nearest_hitMatID = 4;\n    }\n    else if(nearest_hitPos.x == 4.0 && nearest_hitPos.z >= -4.0 && nearest_hitPos.z <= 4.0){\n         vec2 p = mod (nearest_hitPos.yz - vec2(0.0, -4.0), 1.0);\n        if((p.x < 0.5 && p.y < 0.5) || (p.x > 0.5 && p.y > 0.5))\n            nearest_hitMatID = 0;\n        else\n            nearest_hitMatID = 5;\n    }\n\n    vec3 I_local = vec3( 0.0 );  // Result color will be accumulated here.\n\n    /////////////////////////////////////////////////////////////////////////////\n    // TASK:\n    // * Accumulate lighting from each light source on the nearest hit point. \n    //   They are all accumulated into I_local.\n    // * For each light source, make a shadow ray, and check if the shadow ray\n    //   intersects any of the objects (the planes and spheres) between the \n    //   nearest hit point and the light source.\n    // * Then, call PhongLighting() to compute lighting for this light source.\n    /////////////////////////////////////////////////////////////////////////////\n\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n\n    Ray_t shadowRay;\n    for(int i = 0; i < NUM_LIGHTS; i++)\n    {\n        temp_hasHit = false;\n        shadowRay.o = nearest_hitPos;\n        shadowRay.d = normalize(Light[i].position - nearest_hitPos);\n        float maxt = (Light[i].position - shadowRay.o).x / shadowRay.d.x;\n        for(int i = 0; i < NUM_PLANES; i++)\n        {\n            if(IntersectPlane(Plane[i], shadowRay, DEFAULT_TMIN, maxt)) // Hit \n            {\n                temp_hasHit = true;\n                break;\n            }\n        }\n        if(!temp_hasHit)\n        {\n            for(int i = 0; i < NUM_SPHERES; i++)\n            {\n                if(IntersectSphere(Sphere[i], shadowRay, DEFAULT_TMIN, maxt)) // Hit \n                {\n                    temp_hasHit = true;\n                    break;\n                }\n            }\n        }\n        I_local += PhongLighting(shadowRay.d, nearest_hitNormal, -ray.d, temp_hasHit, \n                    Material[nearest_hitMatID], Light[i]);\n\n    }\n    \n    /////////////////////////////////\n\n\n\n    // Populate output results.\n    hitPos = nearest_hitPos;\n    hitNormal = nearest_hitNormal;\n    k_rg = Material[nearest_hitMatID].k_rg;\n    k_rag = Material[nearest_hitMatID].k_rag;\n    Eta = Material[nearest_hitMatID].Eta;\n\n    return I_local;\n}\n\nvec3 myRefract(vec3 ray, vec3 normal, float Eta) {\n    if (isInside ) {\n        normal = - normal;\n\n\t}\n\telse {\n        Eta = 1.0 / Eta;\n\t}\n    return refract(ray, normal, Eta);\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Execution of fragment shader starts here.\n// 1. Initializes the scene.\n// 2. Compute a primary ray for the current pixel (fragment).\n// 3. Trace ray into the scene with NUM_ITERATIONS recursion levels.\n/////////////////////////////////////////////////////////////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    InitScene();\n\n    // Scale pixel 2D position such that its y coordinate is in [-1.0, 1.0].\n    vec2 pixel_pos = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n\n    // Position the camera.\n    vec3 cam_pos = vec3( (3.5*sin(0.5 * iTime)), 1.0, 3.5*(cos(0.5 * iTime)) );\n   // vec3 cam_pos = vec3( 2.5+(sin(2.0 * iTime)), 1.0, 2.5+(cos(2.0 * iTime)) );\n    vec3 cam_lookat = vec3( 0.25, 1.0, 0.0 );\n    vec3 cam_up_vec = vec3( 0.0, 1.0, 0.0 );\n\n    // Set up camera coordinate frame in world space.\n    vec3 cam_z_axis = normalize( cam_pos - cam_lookat );\n    vec3 cam_x_axis = normalize( cross(cam_up_vec, cam_z_axis) );\n    vec3 cam_y_axis = normalize( cross(cam_z_axis, cam_x_axis));\n\n    // Create primary ray.\n    float pixel_pos_z = -1.0 / tan(FOVY / 2.0);\n    Ray_t pRay;\n    pRay.o = cam_pos;\n    pRay.d = normalize( pixel_pos.x * cam_x_axis  +  pixel_pos.y * cam_y_axis  +  pixel_pos_z * cam_z_axis );\n\n\n    // Start Ray Tracing.\n    // Use iterations to emulate the recursion.\n\n    vec3 I_result = vec3( 0.0 );\n    vec3 compounded_k_rg = vec3( 1.0 );\n    Ray_t nextRay = pRay;\n    \n\n    for ( int level = 0; level <= NUM_ITERATIONS; level++ ) \n    {\n        bool hasHit;\n        vec3 hitPos, hitNormal, k_rg, k_rag;\n        float Eta;\n\n        vec3 I_local = CastRay( nextRay, hasHit, hitPos, hitNormal, k_rg, k_rag, Eta );\n\n        I_result += compounded_k_rg * I_local;\n\n        if ( !hasHit ) break;\n\n        compounded_k_rg *= k_rg;\n\n        nextRay = Ray_t( hitPos, normalize( reflect(nextRay.d, hitNormal) ) );\n        if(level == 0)\n            pRay = Ray_t( hitPos, normalize(myRefract(pRay.d, hitNormal, Eta)) );\n    }\n\n      // Refract\n    compounded_k_rg = vec3(1.0);\n    nextRay = pRay;\n    for ( int level = 0; level <= NUM_ITERATIONS; level++ ) \n    {\n        bool hasHit;\n        vec3 hitPos, hitNormal, k_rg, k_rag;\n        float Eta;\n\n        vec3 I_local = CastRay( nextRay, hasHit, hitPos, hitNormal, k_rg, k_rag, Eta );\n        I_result += compounded_k_rg * I_local;\n        \n        if ( !hasHit ) break;\n        compounded_k_rg *= k_rag;\n        \n    \n        nextRay = Ray_t( hitPos, normalize(myRefract(nextRay.d, hitNormal, Eta)) );\n    }\n\n    fragColor = vec4( I_result, 1.0 );\n}\n\n","name":"Image","description":"","type":"image"}]}