{"ver":"0.1","info":{"id":"XtBfWd","date":"1597847995","viewed":88,"name":"2/1 CIS 566 Radar Demo","username":"ChloeSnyder","description":"demo","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["demo"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 scrPt = uv * 2.0 - 1.0;// map -1 to 1\n    scrPt.x *= iResolution.x / iResolution.y; // make a circle by multiplying by aspect ratio\n    \n    // animate\n    mat2 rot;\n    float theta = -iTime * 6.28318530718; // scale time for 1 revolution per second\n    float cosTheta, sinTheta;\n    cosTheta = cos(theta);\n    sinTheta = sin(theta);\n    rot[0][0] = cosTheta;\n    rot[0][1] = -sinTheta;\n    rot[1][0] = sinTheta;\n    rot[1][1] = cosTheta;\n    \n    vec2 scrPtRot = rot * scrPt;\n    \n    \n    // -pi to pi, remapped 0 to 1 for better colors by dividing by 2pi and adding .5\n    float angle = 1.0 - (atan(scrPtRot.y, scrPtRot.x) / 6.28318530718 + .5); \n    \n    //scale mask (values closer to black where closer to 1)\n    float falloff = 1.0 - length(scrPt); // the radius\n    // make falloff more intense by raising angle to a power, still keeps it in 0 to 1 range\n    angle = pow(angle, 2.0);\n    \n    \n    vec3 col = vec3(0);\n    \n    // Create circles, increase color for each circle\n    float ringSpacing = .23;\n    float radius = .01;\n    float numRings = 5.0;\n    if(mod(length(scrPtRot), ringSpacing) < radius && length(scrPtRot) / ringSpacing < numRings)\n    {\n        col += vec3(0, 0.5, 0);\n    }\n    \n    // blinking circle\n    // 2.0 * max(0, fract(iTime * .5) - .5)\n    if(length(scrPt - vec2(0.5, 0.5)) < .1)\n    {\n        col.r = 2.0 * max(0.0, fract(-iTime * .5) - .5);\n    }\n    \n    //step function give 0 or 1 answer, 1 if a < b, 0 otherwise (good instead of if statement)\n    col += vec3(0.0, 0.0, 0.8) * step(mod(length(scrPtRot),ringSpacing), 0.01) * step(length(scrPtRot),1.0);\n\n\n    // Output to screen\n    fragColor = vec4(vec3(angle * falloff) * vec3(0,1,0) + col,1.0);\n}","name":"Image","description":"","type":"image"}]}