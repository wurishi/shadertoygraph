{"ver":"0.1","info":{"id":"M3jBR1","date":"1729286577","viewed":59,"name":"ray marching test 01","username":"eliasmb","description":"testing","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdSphere(vec3 p, float r) {\n  return length(p) - r;\n}\n\nvec4 join(vec4 a, vec4 b, float k) {\n  float h = clamp(.5 + .5 * (b.x - a.x) / k, .0, 1.);\n  float dst = mix(b.x, a.x, h) - k * h * (1. - h);\n  vec3 col = mix(b.yzw, a.yzw, h);\n  return vec4(dst, col);\n}\n\nfloat wave(vec2 uv) {\n  float a = noise(uv * 2. + iTime);\n  a += noise(uv.yx * 1.5 - iTime);\n  return a;\n}\n\nvec4 map(vec3 p) {\n  // sphere\n  vec3 spos = vec3(\n    cos(iTime) * 6.5,\n    -1. + cos(iTime * 3.) * 3.,\n    0\n  );\n  float sdst = sdSphere(p - spos, 1.);\n  vec4 sform = vec4(sdst, 1, 0, 0);\n  \n  // floor\n  float fheight = wave(p.xz);\n  vec3 fcol = mix(\n    vec3(.4, .7, 1),\n    vec3(.2, .4, 1),\n    fheight\n  );\n  vec4 fform = vec4(p.y + 1.5 + fheight * .1, fcol);\n  \n  \n  return join(sform, fform, 1.5);\n}\n\nvec3 mapNormal(vec3 p) {\n  vec2 e = vec2(0, .0001);\n  float x = map(p + e.yxx).x - map(p - e.yxx).x;\n  float y = map(p + e.xyx).x - map(p - e.xyx).x;\n  float z = map(p + e.xxy).x - map(p - e.xxy).x;\n  return normalize(vec3(x, y, z));\n}\n\nvec4 raymarch(vec3 ro, vec3 rd) {\n  float t = .0;\n  for(int i = 0; i < 300; i++) {\n    vec3 p = ro + rd * t;\n    vec4 h = map(p);\n    if(h.x < .001) return vec4(t, h.yzw);\n    if(t > 30.) break;\n    t += h.x;\n  }\n  return vec4(-1);\n}\n\nvoid mainImage(out vec4 O, in vec2 U) {\n  vec2 uv = (U * 2. - iResolution.xy) / iResolution.y;\n  \n  vec3 ro = vec3(0, 0, 6);\n  vec3 rd = normalize(vec3(uv, -1));\n  \n  vec3 sky = vec3(.7, .9, 1);\n  \n  vec4 h = raymarch(ro, rd);\n  if(h.x > -1.) {\n    vec3 p = ro + rd * h.x;\n    \n    vec3 normal = mapNormal(p);\n    \n    vec3 lightDir = normalize(vec3(-.5, -1, -.5));\n    vec3 col = h.yzw;\n    \n    col *= max(.0, dot(normal, -lightDir)) * sqrt(sky);\n    \n    O = vec4(col, 1);\n  } else O = vec4(sky, 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\nfloat rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(vec2 p){\n\tvec2 ip = floor(p);\n\tvec2 u = fract(p);\n\tu = u*u*(3.0-2.0*u);\n\t\n\tfloat res = mix(\n\t\tmix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),\n\t\tmix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);\n\treturn res*res;\n}","name":"Common","description":"","type":"common"}]}