{"ver":"0.1","info":{"id":"slccz2","date":"1660132949","viewed":88,"name":"Intensity","username":"Macroniom","description":"Creates a dot of growing energy following the inverse square law","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["mouse","inversesquarelaw"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//A function that returns a value that starts and ends at 0 every repeat_time seconds, with the option to shift by shift seconds\nfloat get_parabola_position (float repeat_time, float shift) {\n    float cycle_time = mod(iTime+shift,repeat_time)/repeat_time;\n    float parabola_position = (-4.0*pow(cycle_time,2.0))+(4.0*cycle_time);\n    return parabola_position;\n}\n//Function to compute energy given a light's supposed energy and the distance to the light's point\nfloat inverse_square_law (float energy, float dist) {\n    float intensity = energy/pow(dist,2.0);\n    return intensity;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Normalizing\n    float normalization_factor = min(iResolution.x,iResolution.y);\n    vec2 normalized_fragment_position = fragCoord.xy/normalization_factor;\n    //Choosing where the dot is as a function of time\n    vec2 dot_position = vec2(get_parabola_position(10.0,0.0)*(iResolution.x/iResolution.y),get_parabola_position(7.0,0.0));\n    //Getting the distance of the fragment to the supposed location of the dot\n    float dist = distance(normalized_fragment_position,dot_position);\n    //Computing light intensities\n    float red_intens = get_parabola_position(10.0,0.0)*0.01;\n    red_intens = inverse_square_law(red_intens, dist);\n    float green_intens = get_parabola_position(21.0,0.0)*0.01;\n    green_intens = inverse_square_law(green_intens, dist);\n    float blue_intens = get_parabola_position(32.0,0.0)*0.01;\n    blue_intens = inverse_square_law(blue_intens, dist);\n    //Bringing the final color all into one vector\n    vec3 color = vec3(red_intens,green_intens,blue_intens);\n    //Changing the overall size of the dot also as a function of time while making sure it never dissapears completely\n    color = ((get_parabola_position(2.0,0.0)*0.8)+0.2)*color;\n    //Assigning the color to the pixel\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}