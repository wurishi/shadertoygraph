{"ver":"0.1","info":{"id":"stfGRS","date":"1622291314","viewed":286,"name":"2D Isometric Projection","username":"Tech_","description":"Here is a shader demonstrating the concept of transforming from cartesian coordinates to isometric coordinates.","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["projection","isometric","matrices"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst mat2 isometricMat = mat2(vec2(-0.5, 0.5), vec2(1.0));\nconst mat2 isometricMatInv = inverse(isometricMat);\n\nvec2 CartesianToIsometric(in vec2 cartesian) {\n    return isometricMat * cartesian;\n}\n\nvec2 IsometricToCartesian(in vec2 isometric) {\n   return isometricMatInv * isometric;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv *= 10.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    uv = mix(uv, CartesianToIsometric(uv), cos(iTime) * 0.5 + 0.5);\n\n    vec3 col;\n    col += step(fract(uv.x), 0.03);\n    col += step(fract(uv.y), 0.03);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}