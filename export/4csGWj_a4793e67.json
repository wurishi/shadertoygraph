{"ver":"0.1","info":{"id":"4csGWj","date":"1714487206","viewed":65,"name":"3D rasterizer","username":"ShinyLettuce","description":"Created as a student project","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["rasterizer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//pipeline: points in object space -> points in camera space -> points in clip space -> points in screen space\n\n#define vertexCount 36\n\n\n//define view frustum: near, far, fov\n#define nearClip -0.1\n#define farClip -10.0\n#define Yfov 140.0\n\n\nstruct Vertex{\n    vec3 position, normal;\n};\n\n\n//cube in object space with center at origin\nVertex vertecies[vertexCount] = Vertex[vertexCount](\n//face 1\n    Vertex(vec3(-0.5,-0.5,0.5),vec3(0.0,0.0,1.0)),\n    Vertex(vec3(0.5,-0.5,0.5),vec3(0.0,0.0,1.0)),\n\tVertex(vec3(0.5,0.5,0.5),vec3(0.0,0.0,1.0)),\n\tVertex(vec3(0.5,0.5,0.5),vec3(0.0,0.0,1.0)),\n\tVertex(vec3(-0.5,0.5,0.5),vec3(0.0,0.0,1.0)),\n\tVertex(vec3(-0.5,-0.5,0.5),vec3(0.0,0.0,1.0)),\n\n\t//face 2\n\tVertex(vec3(-0.5,-0.5,-0.5),vec3(0.0,0.0,-1.0)),\n\tVertex(vec3(-0.5,0.5,-0.5),vec3(0.0,0.0,-1.0)),\n\tVertex(vec3(0.5,0.5,-0.5),vec3(0.0,0.0,-1.0)),\n\tVertex(vec3(0.5,0.5,-0.5),vec3(0.0,0.0,-1.0)),\n\tVertex(vec3(0.5,-0.5,-0.5),vec3(0.0,0.0,-1.0)),\n\tVertex(vec3(-0.5,-0.5,-0.5),vec3(0.0,0.0,-1.0)),\n\n\t//face 3\n\tVertex(vec3(0.5,-0.5,-0.5),vec3(1.0,0.0,0.0)),\n\tVertex(vec3(0.5,0.5,-0.5),vec3(1.0,0.0,0.0)),\n\tVertex(vec3(0.5,0.5,0.5),vec3(1.0,0.0,0.0)),\n\tVertex(vec3(0.5,0.5,0.5),vec3(1.0,0.0,0.0)),\n\tVertex(vec3(0.5,-0.5,0.5),vec3(1.0,0.0,0.0)),\n\tVertex(vec3(0.5,-0.5,-0.5),vec3(1.0,0.0,0.0)),\n\n\t//face 4\n\tVertex(vec3(-0.5,-0.5,-0.5),vec3(-1.0,0.0,0.0)),\n\tVertex(vec3(-0.5,-0.5,0.5),vec3(-1.0,0.0,0.0)),\n\tVertex(vec3(-0.5,0.5,0.5),vec3(-1.0,0.0,0.0)),\n\tVertex(vec3(-0.5,0.5,0.5),vec3(-1.0,0.0,0.0)),\n\tVertex(vec3(-0.5,0.5,-0.5),vec3(-1.0,0.0,0.0)),\n\tVertex(vec3(-0.5,-0.5,-0.5),vec3(-1.0,0.0,0.0)),\n\n\t//face 5\n\tVertex(vec3(-0.5,0.5,-0.5),vec3(0.0,1.0,0.0)),\n\tVertex(vec3(-0.5,0.5,0.5),vec3(0.0,1.0,0.0)),\n\tVertex(vec3(0.5,0.5,0.5),vec3(0.0,1.0,0.0)),\n\tVertex(vec3(0.5,0.5,0.5),vec3(0.0,1.0,0.0)),\n\tVertex(vec3(0.5,0.5,-0.5),vec3(0.0,1.0,0.0)),\n\tVertex(vec3(-0.5,0.5,-0.5),vec3(0.0,1.0,0.0)),\n\n\t//face 6\n\tVertex(vec3(-0.5,-0.5,-0.5),vec3(0.0,-1.0,0.0)),\n\tVertex(vec3(0.5,-0.5,-0.5),vec3(0.0,-1.0,0.0)),\n\tVertex(vec3(0.5,-0.5,0.5),vec3(0.0,-1.0,0.0)),\n\tVertex(vec3(0.5,-0.5,0.5),vec3(0.0,-1.0,0.0)),\n\tVertex(vec3(-0.5,-0.5,0.5),vec3(0.0,-1.0,0.0)),\n\tVertex(vec3(-0.5,-0.5,-0.5),vec3(0.0,-1.0,0.0))\n);\n\nmat4 project (float fovY, float aspect, float near, float far)\n{\n    float zoomY = 1.0 / tan(radians(fovY)*0.5);\n    float zoomX = zoomY / aspect;\n    return mat4(zoomX,0,0,0,\n                0,zoomY,0,0,\n                0,0,-(far+near)/(far-near),-(2.*near*far)/(far-near),\n                0,0,-1.,0);\n}\n\nmat4 translate (vec3 pos)\n{\n    return mat4(1,0,0,pos.x,\n                0,1,0,pos.y,\n                0,0,1,pos.z,\n                0,0,0,1);\n}\n\nmat4 rotateX (float deg)\n{\n    return mat4(cos(deg),0,-sin(deg),0,\n                0,1,0,0,\n                sin(deg),0,cos(deg),0,\n                0,0,0,1);\n}\n\nmat4 rotateY (float deg)\n{\n    return mat4(1,0,0,0,\n                0,cos(deg),sin(deg),0,\n                0,-sin(deg),cos(deg),0,\n                0,0,0,1);\n}\n\n\n\n//-------pseudo code taken and interpreted from https://blackpawn.com/texts/pointinpoly/------ false stuff\n\nbool SameSide(vec3 p1, vec3 p2, vec3 a, vec3 b)\n{\n    vec3 cp1 = cross(b-a, p1-a);\n    vec3 cp2 = cross(b-a, p2-a);\n    if (dot(cp1, cp2) >= 0.0)\n    {\n        return true;\n    }\n    else \n    {\n        return false;\n    }\n    \n}\n\nbool PointInTriangle(vec3 p, vec3 a, vec3 b, vec3 c)\n{ \n    if(SameSide(p,a, b,c) && SameSide(p,b, a,c) && SameSide(p,c, a,b))\n    {\n        return true;\n    }\n    else \n    {\n        return false;\n    }\n}\n\n//-------------------------------------------------------------------------\n\nbool edge(vec2 p, vec2 a, vec2 b, vec2 c)\n{\n    if((c.y - b.y) * (p.x - b.x) - (c.x - b.x) * (p.y - b.y) >= 0. &&\n       (a.y - c.y) * (p.x - c.x) - (a.x - c.x) * (p.y - c.y) >= 0. &&\n       (b.y - a.y) * (p.x - a.x) - (b.x - a.x) * (p.y - a.y) >= 0.)\n       {\n           return true;\n       }\n}\n\n\n//-------- main ---------//\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 ndc = fragCoord/iResolution.xy * 2.0 - 1.0;\n    \n    vec3 cameraPos = vec3(0,0,2.);\n    \n    float aspectRatio = (iResolution.x/iResolution.y);\n    \n    vec3 outColor = vec3(.95,.8,.75);\n    \n    for(int i = 0; i < vertexCount; i+=3)\n    {\n        vec4 vertOne = vec4(vertecies[i].position,1.0);\n        vec4 vertTwo = vec4(vertecies[i+1].position,1.0);\n        vec4 vertThree = vec4(vertecies[i+2].position,1.0);\n        \n        \n        mat4 t = translate(-cameraPos);\n        mat4 p = project(Yfov, aspectRatio, nearClip, farClip);\n        mat4 r = rotateY(.5 * iTime) * rotateX(iTime);\n        \n        mat4 transform = p * transpose(t) * r;\n        \n        vec4 v1 = transform * vertOne;\n        vec4 v2 = transform * vertTwo; \n        vec4 v3 = transform * vertThree;\n        \n        v1.xyz /= v1.w;\n        v2.xyz /= v2.w;\n        v3.xyz /= v3.w;\n        \n        //if(PointInTriangle(vec3(ndc,0),v1.xyz,v2.xyz,v3.xyz))\n        //{\n        //        outColor = vec3(1,0.5,0.5);\n        //}\n        if(edge(ndc,v3.xy, v2.xy, v1.xy))\n        {\n            outColor = vec3(1,0.5,0.5);\n        }\n    }\n    \n    \n    fragColor = vec4(outColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}