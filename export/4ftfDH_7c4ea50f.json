{"ver":"0.1","info":{"id":"4ftfDH","date":"1733038525","viewed":210,"name":"vulcainic water","username":"nayk","description":"source https://www.shadertoy.com/view/lslyRn https://www.shadertoy.com/view/l3ffRB","likes":15,"published":3,"flags":1,"usePreview":0,"tags":["noise","fbm","water","color"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define iterations 12\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\nmat2 rot(float a) {\n    float s = sin(a), c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\n\n#define oct 5  //number of fbm octaves\n#define pi  3.14159265\n\nfloat random(vec2 p) {\n    //a random modification of the one and only random() func\n    return fract( sin( dot( p, vec2(12., 90.)))* 1e5 );\n}\n\n\n//the noise function everyone uses\nfloat noise(vec3 p) {\n    vec2 i = floor(p.yz);\n    vec2 f = fract(p.yz);\n    float a = random(i + vec2(0.,0.));\n    float b = random(i + vec2(1.,0.));\n    float c = random(i + vec2(0.,1.));\n    float d = random(i + vec2(1.,1.));\n    vec2 u = f*f*(3.-2.*f); //smoothstep here, it also looks good with u=f\n    \n    return mix(a,b,u.x) + (c-a)*u.y*(1.-u.x) + (d-b)*u.x*u.y;\n\n}\n\n\nmat3 rxz(float an){\n    float cc=cos(an),ss=sin(an);\n    return mat3(cc,0.,-ss,\n                0.,1.,0.,\n                ss,0.,cc);                \n}\nmat3 ryz(float an){\n    float cc=cos(an),ss=sin(an);\n    return mat3(1.,0.,0.,\n                0.,cc,-ss,\n                0.,ss,cc);\n}   \n\n\nfloat fbm3d(vec3 p) {\n    float v = 0.;\n    float a = .5;\n    vec3 shift = length(p.yz)*vec3(.5);    //major change\n    float angle = pi/5.; \n    for (int i=0; i<oct; i++) {\n        v += a * noise(p);\n        p = rxz(-angle) * p * 2. + shift;\n        a *= .65;\n    }\n    return v;\n}\n\n\nvec3 get_color(vec3 p) {\n    vec3 q;\n    q.x = fbm3d(p);\n    q.y = fbm3d(p.yzx);\n    q.z = fbm3d(p.zxy);\n\n    float f = fbm3d(p + q);\n    \n    return q*f;\n}\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam;\n            p.xy*=rot(iTime*0.01);// the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.2-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.02,1.);\t\n}\n\nfloat velocity = 0.04, seed = 100., strength = 0.051;\nfloat dcount = 199.;\n\nvec3 palette( in float t) {\n    vec3 a = vec3(0.532, 0.570, 0.550),\n         b = vec3(0.694, 0.549, 0.163),\n         c = vec3(1.381, 0.346, 1.207),\n         d = vec3(5.239, 4.040, 3.822);\n       \n    return a + b*cos(6.28318 *(c*t+d));\n}\n\n// describes the path that a dot travels\nvec2 travelPath(float t, float i) {\n    float ni = i + seed;\n\n    float rand1 = texture(iChannel0, vec2(ni, 0.3)).x;\n    float rand2 = texture(iChannel0, vec2(ni, 0.6)).x;\n\n    vec2 newPos = vec2(\n        fract((2. * rand1 - 1.) * t),\n        fract((2. * rand2 - 1.) * t)\n    );\n   \n    // padding for apparent teleportation\n    newPos = (newPos - 0.5) *3.1;\n   \n    return newPos;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,1.);\n\tfloat time=iTime*speed+.25;\n\n\t float tt = mod(iTime / 8.,20.);\n    vec2 uv2 = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 mm = (2.*iMouse.xy-iResolution.xy)/iResolution.y;\n\n    vec3 rd = normalize( vec3(uv2, -2.) );  \n    vec3 ro = vec3(0.,0.,0.);\n    \n    float delta = 2.*pi/30.;\n    float initm = -.5 * delta;\n    mat3 rot = rxz(-mm.x*delta) * ryz(-mm.y*delta);\n    \n    ro -= rot[2]*iTime/8.;\n    vec2 pos = (fragCoord * 2. - iResolution.xy) / iResolution.x;\n   \n    float c = 0., obsStr = strength * inversesqrt(dcount);\n   \n    vec3 col = vec3(0,0,0);\n   \n    for (float i=0.;i<dcount;i++) {\n        float f = i / dcount,\n              t = iTime * velocity + seed;\n   \n        vec2 k = travelPath(t, f);\n       \n        float power = pow(cos(1.0*t + i) + 0.07*cos(iTime*10.), 2.) * obsStr / length(k - pos); //size\n  \n\n       \n        c += power;\n        col += power * palette(i * seed);\n    }\n  \n    rd = rot * rd;\n    \n    vec3 p = ro + rd;\n    \n    vec3 cc = vec3(0.);\n\n    float stepsize2 = .4;\n    float totdist = stepsize2;\n    \n    for (int i=0; i<6; i++) {\n       vec3 cx = get_color(p);\n       p += stepsize*rd;\n       cc += exp(-totdist/1.2)* cx;\n       totdist += stepsize2;\n       rd = ryz(.1)*rd;\n    }\n    \n    cc = 3.*cc*cc*(3.-2.*cc);\n\n    fragColor = vec4(cc,1.0);\n    \n    fragColor = iResolution.x/2.*fwidth(fragColor*fragColor/100.); //major change\n\n\tvec3 from=vec3(1.,.5,0.5)*fragColor.xyz;\n\t\n\t\n\tmainVR(fragColor, fragCoord, from, dir);\n       fragColor*= vec4(cc*(col+c)*1.1,1.0);\n       \n    \n}\n","name":"Image","description":"","type":"image"}]}