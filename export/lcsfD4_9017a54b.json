{"ver":"0.1","info":{"id":"lcsfD4","date":"1723822442","viewed":81,"name":"Catmull-Rom without Overshoot","username":"MartyMcFly","description":"Catmull-Rom can produce values outside valid range (top-right inset). Naively clamping breaks C1 continuity. Clamping the tangents instead during construction ensures C1 continuous interpolation and prevents overshoots outside the valid range.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["gaussian","lanczos","sinc"],"hasliked":0,"parentid":"4cXfW4","parentname":"Gaussian Sinc"},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2024 Pascal Gilcher\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n/*\n    Regular Bicubic interpolation contains overshoots, which may exceed the valid value range.    \n    In other words, interpolating texels in range [0, 1] can cause values <0 or >1\n    This can break things like sRGB conversion.\n    \n    - Naively clamping those values causes the interpolation to lose its C1 continuity.\n    - Calculating where the turnover point is and forcing it to remain within bounds\n      requires adjacent texel data (6x6 instead of 4x4) to produce continuous results\n      \n    I propose a better solution:\n    \n    Clamping the tangents used in the construction. A conservative bound is\n    a tangent that would cause a non-overshooting linear extension.\n    \n                            .   .     \n    Y=1________________.__ __________.___A_________________________\n                   .                     .  \n               p1                       p2\n             .   \\                   x\n           .      \\identical     x                                                        \n          .        slope      x                                                            \n         .          \\      x                                                                 \n        .            \\  x       Regular Catmull-Rom the slope from p0 to p2 at p1.                                                    \n       .             x                 \n      .           x             The conservative bound is limiting the slope to the slope from p1 to \n      .        x                the slope from p1 to A (Y=1 at p2.x) because the interpolating curve\n     .      x                   will always be below that and by extension, below Y=1\n     .   x\n    p0\n    \n    The result is still C1 continuous and seems to have a lower RMSE in a few ad-hoc tests\n    I did, but this would require further analysis.\n    \n    In any case, it's a relatively straightforward extension to the algorithm.\n    The below implementation is optimized for readability rather than speed, but should still\n    be pretty fast.\n*/\n\n\n\nvec4 get_texture(sampler2D s, vec2 uv)\n{\n    //forcing the overshoots to happen more often for visualization\n    vec4 color = texture(s, uv);\n    color = smoothstep(0.0, 1.0, color);\n    color = smoothstep(0.0, 1.0, color);\n    return color;///clamp(texture(s, uv)*1.2-0.1,0.0,1.0);\n}\n\nvec4 catmullrom(sampler2D s, vec2 uv)\n{\n    vec2 size = vec2(textureSize(s, 0));\n    vec2 iuv = uv * size; \n\n    vec2 center = floor(iuv - 0.5) + 0.5;    \n    vec2 t = iuv - center;\n    \n    vec2 h00 = (1.0 + 2.0 * t)*(1.0-t)*(1.0-t);\n    vec2 h10 = t * (1.0 - t) * (1.0 - t);\n    vec2 h01 = t*t*(3.0-2.0*t);\n    vec2 h11 = t*t*(t - 1.0);\n    \n    vec4 stripe[4];\n    \n    float mouse = iMouse.x/iResolution.x;\n    \n    //first along X\n    for(int j = 0; j < 4; j++)\n    {\n        vec4 p0 = get_texture(s, (center + vec2(-1, j-1)) / size);\n        vec4 p1 = get_texture(s, (center + vec2( 0, j-1)) / size);\n        vec4 p2 = get_texture(s, (center + vec2( 1, j-1)) / size);\n        vec4 p3 = get_texture(s, (center + vec2( 2, j-1)) / size);\n        \n        vec4 m0 = (p2 - p0)/2.0;\n        vec4 m1 = (p3 - p1)/2.0;    \n        \n        stripe[j] = h00.x * p1 + h01.x * p2 + h10.x * m0 + h11.x * m1;\n    }\n    \n    //now, along Y\n    vec4 m0 = (stripe[2] - stripe[0])/2.0;\n    vec4 m1 = (stripe[3] - stripe[1])/2.0;    \n    return h00.y * stripe[1] + h01.y * stripe[2] + h10.y * m0 + h11.y * m1;\n}\n\n\nvec4 catmullrom_overshootfree(sampler2D s, vec2 uv)\n{\n    vec2 size = vec2(textureSize(s, 0));\n    vec2 iuv = uv * size; \n\n    vec2 center = floor(iuv - 0.5) + 0.5;    \n    vec2 t = iuv - center;\n    \n    vec2 h00 = (1.0 + 2.0 * t)*(1.0-t)*(1.0-t);\n    vec2 h10 = t * (1.0 - t) * (1.0 - t);\n    vec2 h01 = t*t*(3.0-2.0*t);\n    vec2 h11 = t*t*(t - 1.0);\n    \n    vec4 stripe[4];\n    \n    //first along X\n    for(int j = 0; j < 4; j++)\n    {\n        vec4 p0 = get_texture(s, (center + vec2(-1, j-1)) / size);\n        vec4 p1 = get_texture(s, (center + vec2( 0, j-1)) / size);\n        vec4 p2 = get_texture(s, (center + vec2( 1, j-1)) / size);\n        vec4 p3 = get_texture(s, (center + vec2( 2, j-1)) / size);\n        \n        vec4 m0 = (p2 - p0)/2.0;\n        vec4 m1 = (p3 - p1)/2.0;       \n\n        vec4 limit0 = min(p1, 1.0-p1);\n        vec4 limit1 = min(p2, 1.0-p2);\n        m0 = clamp(m0, -limit0, limit0);\n        m1 = clamp(m1, -limit1, limit1); \n        \n        stripe[j] = h00.x * p1 + h01.x * p2 + h10.x * m0 + h11.x * m1;\n    }\n    \n    //now, along Y\n    vec4 m0 = (stripe[2] - stripe[0])/2.0;\n    vec4 m1 = (stripe[3] - stripe[1])/2.0;\n    \n    vec4 limit0 = min(stripe[1], 1.0 - stripe[1]);\n    vec4 limit1 = min(stripe[2], 1.0 - stripe[2]);\n    m0 = clamp(m0, -limit0, limit0);\n    m1 = clamp(m1, -limit1, limit1);     \n    \n    return h00.y * stripe[1] + h01.y * stripe[2] + h10.y * m0 + h11.y * m1;\n}\n\n\n//Stolen from Fabrice Neyret. Always fascinating how convoluted and unreadable he can make easy things\nint char_id = -1; vec2 char_pos, dfdx, dfdy; \nvec4 char(vec2 p, int c) \n{\n    vec2 dFdx = dFdx(p/16.), dFdy = dFdy(p/16.);\n // if ( p.x>.25&& p.x<.75 && p.y>.0&& p.y<1. )  // normal char box\n    if ( p.x>.25&& p.x<.75 && p.y>.1&& p.y<.85 ) // thighly y-clamped to allow dense text\n        char_id = c, char_pos = p, dfdx = dFdx, dfdy = dFdy;\n    return vec4(0);\n}\n\nint CAPS=0;\n#define low CAPS=32;\n#define caps CAPS=0;\n#define spc  U.x-=.5;\n#define C(c) O += char(U,64+CAPS+c);spc \n\nvec4 draw_char() {\n    int c = char_id; vec2 p = char_pos;\n    return c < 0 \n        ? vec4(0,0,0,1e5)\n        : textureGrad( iChannel2, p/16. + fract( vec2(c, 15-c/16) / 16. ), \n                       dfdx, dfdy );\n}\n\nvoid mainImage( out vec4 o, in vec2 p )\n{   \n\n    vec2 uv = p/iResolution.xy;\n  \n  \n    float scale = 0.07 - sin(iTime*0.005)*0.03; \n    \n    vec2 mouse = iMouse.xy / iResolution.xy; \n    \n    vec2 mouseshift = vec2(sin(iTime*0.008), cos(iTime*0.008*0.7071+0.6))*0.5+0.5;\n    vec2 shift = mix(vec2(scale)*0.5, vec2(1.0-scale*0.5), mouseshift);       \n    \n    vec2 zoomed_uv = uv;\n    zoomed_uv.x  *= iResolution.x/iResolution.y; \n    zoomed_uv = (zoomed_uv - 0.5) * scale + shift;    \n     \n    vec3 col = catmullrom_overshootfree(iChannel0, zoomed_uv).rgb;\n    if(p.x < iMouse.x) col = catmullrom(iChannel0, zoomed_uv).rgb;\n    \n    float gre = dot(col,vec3(0.333));    \n    vec3 colc = 0.5 + 0.05*vec3( dFdx(gre)*iResolution.x, dFdy(gre)*iResolution.y, 0.0);\n    \n    if(uv.x > 0.5 && uv.y > 0.5) col = step(vec3(0.501), abs(col-0.5))*0.8+0.2;\n    if(uv.x > 0.5 && uv.y < 0.5) col = colc;\n    \n    col *= step(1.0, abs(uv.x-0.5)*iResolution.x);\n    if(uv.x > 0.5) col *= step(1.0, abs(uv.y-0.5)*iResolution.y);\n    if(uv.x > mouse.x - 0.12 && uv.x < mouse.x + 0.22 && uv.y > mouse.y - 0.03 && uv.y < mouse.y+0.03) col *= 0.;\n    \n   \n    vec4 O = vec4(0);\n    vec2 U = uv * vec2(iResolution.x / iResolution.y, 1.0) * 20.0; \n    U.x -= mouse.x*20.0*iResolution.x / iResolution.y;\n    U.x += 4.2;\n    U.y -= mouse.y*20.0;\n    U.y += 0.5;\n    caps C(18) low C(5)C(7)C(21)C(12)C(1)C(18) spc spc caps C(15) low C(22)C(5)C(18)C(19)C(8)C(15)C(15)C(20)C(-51) caps C(6) low C(18)C(5)C(5)\n        \n    float font = draw_char().x;    \n    col += font;\n    \n    float edge_sdf = abs(uv.x-mouse.x)*iResolution.x;\n    col *= smoothstep(2.0, 3.0, edge_sdf);\n    col += smoothstep(2.5, 1.5, edge_sdf);\n    \n    \n    \n       \n    o = col.xyzz;\n}","name":"Image","description":"","type":"image"}]}