{"ver":"0.1","info":{"id":"lt3SR8","date":"1478152182","viewed":528,"name":"Ray marching glass form/wall","username":"CyanSprite","description":"Ray marching using displacement, twisting, and plasma to make a glass wall and the formation of it.\nRotation wall to form a 3d atmosphere.\nAnimation to enable glass formation from a light particle.\nDifferent buffers to cycle through different lighting.","likes":8,"published":1,"flags":32,"usePreview":0,"tags":["raymarching","plasma","lighting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n//const fields\nconst int steps = 7;\nconst float axis = .5;\nconst bool fractalMe = false;\nconst bool anim = true;\nconst float speed = 1.;\n\n//displace values\nconst float displaceMount = 10.2;\nconst float displaceDisplace = 1.0;\n\n//twist values\nfloat twistMount = .5;\nfloat twistBlur = 1.0;\n\n//lighting values\nfloat lightingSpeed = 3.0;\nfloat lightIntensity = 25.4; \n\n//wall rotation\nconst bool doRotate = false;\nfloat rotateSpeed = 1.0;\n\n//grayscaler\nvec3 grayscale(vec3 texColor){\n\tfloat grayScale = dot(texColor.rgb, vec3(.3,.59,.11));\n    \n    texColor.r = grayScale;\n    texColor.b = grayScale;\n    texColor.g = grayScale;\n    \n    return texColor;\n}\n\n//displacement\nfloat displacement(vec3 p){\n    float animSpeed = speed;\n    float timeScaleDisplace = mod(iTime * 1.5, 10.) * .2;\n    if(anim)\n        animSpeed = timeScaleDisplace;\n\treturn \n        sin(animSpeed*p.x* displaceMount * 1.)*\n        sin(animSpeed*p.y* displaceMount * 1.)*\n        sin(animSpeed*p.z* displaceMount * 1.)*\n        displaceDisplace;\n}\n\n//primitive of choice and if fractal\nfloat prim(vec3 p, float s){\n    vec3 q = fract(p) * 2.0 - 1. ;\n    if(!fractalMe)\n    \tq=p;\n  \treturn length(q) - s;\n}\n\n//opTwist derived from iq\nfloat opTwist(vec3 p,float se)\n{\n    float timeScaleDisplace = mod(iTime * 1.5, 10.) * .2;\n\n    float c = cos(timeScaleDisplace *p.y*twistMount) * 1./twistBlur;\n    float s = sin(timeScaleDisplace *p.y*twistMount)* 1./twistBlur;\n    mat2  twist = mat2(c,-s,s,c);\n    vec3  q = vec3(twist*p.xz,p.y * .35);\n    return prim(q,se);\n}\n\n//opDisplace derived from iq\nfloat opDisplace( vec3 p, float se)\n{\n    float d1 = prim(p, se);\n    float d2 = displacement(p);\n    return d1+d2;\n}\n\n//trace for raymarch\nfloat trace(vec3 o, vec3 r){\n\tfloat t = 0.0;\n    for(int i=1;i<steps;i++){\n    \tvec3 p = o + r * t;\n        float d = opDisplace(p,axis);\n        t += d * .5;\n    }\n    return t;\n}\n\n//main...\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Generalizing to window\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    //aspect\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    //normalizing uvs to vec3\n    vec3 rec = normalize(vec3(uv,1.0)) * vec3(1.,1.,1.);\n    if(doRotate){\n        //rotation\n        float rot = iTime * rotateSpeed;\n        rec.xz *= mat2(cos(rot),-sin(rot),sin(rot),cos(rot));\n    }\n    //cam\n\tvec3 o = vec3(0.,0,-5.);    \n    \n    //tracing\n    float tr = trace(o,rec);\n   \n    //fog\n    vec3 mixedColor;\n    \n    //dynamic lighting and color derived from plasma effect with tracing\n\tvec3 r = vec3(tr,tr,tr);\n    r = rec;\n\tfloat t = iTime * lightingSpeed;\n    r = r * 8.0;\n    float v1 = cos(r.x +t) * .1;\n    float v2 = sin(r.y +t) * .1;\n    float v3 = cos(r.x+r.y +t) * .1;\n    float v4 =  cos(r.z+r.y +t) * .1;\n    float v5 =  cos(r.z+r.x +t) * .5;\n\tfloat v = v1+v2+v3+v4+v5;\n  \t\n    //mixedColor\n    mixedColor.rgb = vec3(cos(v) * .8, sin(v+.8*PI) * 0.5, -.2);\n    vec3 grayMixed = fract(grayscale(mixedColor));// - mixedColor.rgb*.5 * vec3(0.1,0.1,0.1);\n    \n    //fog from tracing\n    float fog = 1.0/ (tr * tr) * 1.;\n    \n    //final color vector fog * greyMixed dyn color and lighting\n    vec3 fc = vec3(fog)*1.1 * (grayMixed * 2.9 + .9); //+ greyMixed * .01;// + greyMixed * .0;// - vec3(sin(t),cos(t),cos(t)) * .2;\n    \n    //final output... Using iChannel0 to display a texture or buffer a,b,c, or d (just colors originally.)\n    fragColor = vec4(fc,1.0) * texture(iChannel0,r.xy) * lightIntensity;\n    \n    //fragColor = vec4(0.4,0.6,0.8,1.0);\n\n}\n\n\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.8,0.6,0.4,1.0);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.4,0.6,0.8,1.0);\n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.3,0.2,0.3,1.0);\n}","name":"Buf C","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XdfGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(1.0,1.0,1.0,1.0);\n}","name":"Buf D","description":"","type":"buffer"}]}