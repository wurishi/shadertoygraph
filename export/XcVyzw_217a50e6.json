{"ver":"0.1","info":{"id":"XcVyzw","date":"1731634811","viewed":80,"name":"rainbow11111","username":"catto1234","description":"rainbow","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["rainbow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // 标准化像素坐标 (从 0 到 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // 将坐标中心移到屏幕中心，并创建合适的宽高比\n    uv = (uv - 0.5) * 2.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    // 计算到中心的距离和角度\n    float r = length(uv);\n    float a = atan(uv.y, uv.x);\n    \n    // 创建隧道效果\n    float v = 0.0;\n    \n    // 添加多层波浪\n    for(float i = 0.0; i < 3.0; i++) {\n        float time = iTime * (1.0 + i * 0.5);\n        \n        // 径向波浪\n        v += sin(r * 10.0 - time);\n        \n        // 旋转波浪\n        v += sin(a * 5.0 + time);\n        \n        // 向外扩散的波浪\n        v += sin(r * 20.0 + a * 3.0 - time * 2.0) * 0.5;\n    }\n    \n    // 创建颜色\n    vec3 col;\n    col.r = sin(v * 3.1415 + iTime) * 0.5 + 0.5;\n    col.g = sin(v * 3.1415 + iTime + 2.094) * 0.5 + 0.5;\n    col.b = sin(v * 3.1415 + iTime + 4.188) * 0.5 + 0.5;\n    \n    // 添加渐变边缘\n    col *= 1.0 - r;\n    \n    // 输出最终颜色\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}