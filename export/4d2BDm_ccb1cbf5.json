{"ver":"0.1","info":{"id":"4d2BDm","date":"1500736682","viewed":573,"name":"motion from rgb noise v2","username":"Emil","description":"further improvements from https://www.shadertoy.com/view/MdBfDw\nmost importantly the buffer channel for trails","likes":19,"published":1,"flags":32,"usePreview":1,"tags":["2d","noise","motion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define RED vec3(1.0,0.0,0.0)\n#define GREEN vec3(0.0,1.0,0.0)\n#define BLUE vec3(0.0,0.5,1.0)\n#define YELLOW vec3(1.0,1.0,0.0)\n#define WHITE vec3(1.0,1.0,1.0)\n#define PI 3.141592653\nvec2 rotatevec2(vec2 vec, float ang)\n{\n    \n    return vec2(vec.x * cos(ang) - vec.y * sin(ang),\n                vec.x * sin(ang) + vec.y * cos(ang));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    //uv -= vec2(.5,.5*(iResolution.y/iResolution.x));\n    fragColor = vec4(0.3,0.,0.3,1.0)+(1.-uv.y)*vec4(0.6,0.3,0.0,1.0)+texture(iChannel0,uv);\n    //fragColor = texture(iChannel0,uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define RED vec3(1.0,0.0,0.0)\n#define GREEN vec3(0.0,1.0,0.0)\n#define BLUE vec3(0.0,0.05,1.0)\n#define YELLOW vec3(1.0,1.0,0.0)\n#define WHITE vec3(1.0,1.0,1.0)\n#define PI 3.141592653\nvec2 rotatevec2(vec2 vec, float ang)\n{\n    \n    return vec2(vec.x * cos(ang) - vec.y * sin(ang),\n                vec.x * sin(ang) + vec.y * cos(ang));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.x;\n    uv -= vec2(.5,.5*(iResolution.y/iResolution.x));\n\tuv *= 4.6;\n    \n    /// fun values to edit\n    const float numParticles = 6.;\n    float moBlurStrength = 900.;\n    float tangentStrength = 1.6;\n    float timeSpeed = 0.003;\n    \n    \n    float texHeight = 256.;//float(textureSize(iChannel0,0).y);\n    float time = iTime*timeSpeed;\n    float timeB = iTime*timeSpeed-0.0002;\n    \n    ///// particles\n    vec3 particles = vec3(0.0,0.0,0.0);\n    vec2 p1, p2, t1, t2;\n    vec2 p1B, p2B, t1B, t2B;\n    \n    for (float i = 0.; i<1.0; i+=1./numParticles)\n    {\n        time += i*16.6516;\n        timeB += i*16.6516;\n        p1 = texture(iChannel0,vec2(i,0.)+vec2(fract(((time/texHeight)/2.)*2.),fract(time))).xy-vec2(.5);\n        p2 = texture(iChannel0,vec2(i,0.)+vec2(fract(((time/texHeight)/2.)*2.),fract(time+1./texHeight))).xy-vec2(.5);\n        t1 = texture(iChannel0,vec2(i,0.)+vec2(fract(((time/texHeight)/2.)*2.+1./texHeight),fract(time))).xy-vec2(.5);\n        t2 = texture(iChannel0,vec2(i,0.)+vec2(fract(((time/texHeight)/2.)*2.+1./texHeight),fract(time+1./texHeight))).xy-vec2(.5);\n\n        p1B = texture(iChannel0,vec2(i,0.)+vec2(fract(((timeB/texHeight)/2.)*2.),fract(timeB))).xy-vec2(.5);\n        p2B = texture(iChannel0,vec2(i,0.)+vec2(fract(((timeB/texHeight)/2.)*2.),fract(timeB+1./texHeight))).xy-vec2(.5);\n        t1B = texture(iChannel0,vec2(i,0.)+vec2(fract(((timeB/texHeight)/2.)*2.+1./texHeight),fract(timeB))).xy-vec2(.5);\n        t2B = texture(iChannel0,vec2(i,0.)+vec2(fract(((timeB/texHeight)/2.)*2.+1./texHeight),fract(timeB+1./texHeight))).xy-vec2(.5);\n\n        t1 = normalize(p1-t1)*tangentStrength;\n        t2 = normalize(p2-t2)*tangentStrength;\n\n        t1B = normalize(p1B-t1B)*tangentStrength;\n        t2B = normalize(p2B-t2B)*tangentStrength;\n\n        /*\n        particles += RED*vec3(smoothstep(0.02,0.004,length(uv+p1))); // p1\n        particles += GREEN*vec3(smoothstep(0.02,0.004,length(uv+p2))); // p2\n        particles += BLUE*vec3(smoothstep(0.02,0.004,length(uv+p1+t1))); // t1\n        particles += YELLOW*vec3(smoothstep(0.02,0.004,length(uv+p2+t2))); // t2\n\t\t*/\n        \n        vec2 p3, p4;\n        vec2 p3B, p4B;\n        if (mod(floor(time*texHeight),2.)==1.0)\n        {\n            p3 = mix(p1,p1-t1,fract(time*texHeight));\n            p4 = mix(p2-t2,p2,fract(time*texHeight));\n        }\n        else\n        {\n            p3 = mix(p1,p1+t1,fract(time*texHeight));\n            p4 = mix(p2+t2,p2,fract(time*texHeight));\n        }\n        if (mod(floor(timeB*texHeight),2.)==1.0)\n        {\n            p3B = mix(p1B,p1B-t1B,fract(timeB*texHeight));\n            p4B = mix(p2B-t2B,p2B,fract(timeB*texHeight));\n        }\n        else\n        {\n            p3B = mix(p1B,p1B+t1B,fract(timeB*texHeight));\n            p4B = mix(p2B+t2B,p2B,fract(timeB*texHeight));\n        }\n\n        //particles += RED*vec3(smoothstep(0.06,0.0,length(uv+p3)));\n        //particles += GREEN*vec3(smoothstep(0.06,0.0,length(uv+p4)));\n        //particles *= 0.6;\n        //particles += WHITE*vec3(smoothstep(0.06,0.0,length(uv+mix(p1,p2,fract(time*texHeight)))));\n\n        vec2 finPos = uv+mix(p3,p4,smoothstep(0.0,1.0,fract(time*texHeight)));\n        vec2 finPos2 = uv+mix(p3B,p4B,smoothstep(0.0,1.0,fract((timeB)*texHeight)));\n\n        vec2 finSpeed = finPos2-finPos;\n        \n        finPos += (texture(iChannel0, vec2(i)).xy-vec2(.5))*vec2(2.6,1.0);\n        \n        float pSize = 1.0+3.*(texture(iChannel0,vec2(0.,i)).x);\n\n        //particles += .2*(RED+YELLOW)*vec3(smoothstep(0.05,0.0,pSize*length(finPos)));\n        \n        particles += .012*(YELLOW)*vec3(0.18/(pSize*length(finPos)));\n        \n        finPos = rotatevec2(finPos,atan(finSpeed.x/finSpeed.y));\n        finPos.y *= 1.-clamp(length(abs(finSpeed))*moBlurStrength*timeSpeed,0.0,0.8);\n\t\t\n        //particles += .2*(RED+YELLOW)*vec3(smoothstep(0.14,0.0,pSize*length(finPos)));\n        \n        finPos.y *= 1.-clamp(length(abs(finSpeed))*moBlurStrength*pSize*timeSpeed,0.0,0.8);\n        \n        //particles += .2*(RED+YELLOW)*vec3(smoothstep(0.05,0.0,pSize*length(finPos)));\n        particles += vec3(smoothstep(0.03,0.004,pSize*length(finPos)));\n        //\\\\\\ END particles\n    }\n    fragColor = vec4(particles.xyz,1.)+texture(iChannel1,(fragCoord.xy / iResolution.xy))*0.97;\n    //fragColor = vec4(0.3,0.,0.3,1.0)+(1.-gradient.y)*vec4(0.6,0.3,0.0,1.0)+vec4(particles,1.);\n    //fragColor += .6*vec4(abs(finSpeed),0.,1.0);\n}","name":"Buf A","description":"","type":"buffer"}]}