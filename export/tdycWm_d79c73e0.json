{"ver":"0.1","info":{"id":"tdycWm","date":"1602970491","viewed":478,"name":"math - simple triangle","username":"catafest","description":"a simple triangle shape","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["simple","math","triangle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// define a triangle function\nfloat triangle(vec2 p, float width, float height)\n{\n\tvec2 n = normalize(vec2(height, width / 2.0));\n\treturn max(\tabs(p).x*n.x + p.y*n.y - (height*n.y), -p.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// define a vector position from iResolution\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y+0.7;\n    //define the triangle\n\tfloat triangle001 = triangle( p, 1.5, 1.5 );\n\t// fill the triangle, need to change col = mix ...\n    //vec3 col = vec3(1.0) - sign(triangle001);\n\t// radiation effect from smooth\n    float ray = 0.01;\n    // draw triangle\n\tvec3 col = mix(  vec3(0.0), vec3(1.0), 1.0-smoothstep(0.0,ray,abs(triangle001)));\n    // draw to output screen\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}