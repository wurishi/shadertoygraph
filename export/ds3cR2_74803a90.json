{"ver":"0.1","info":{"id":"ds3cR2","date":"1695486225","viewed":51,"name":"Venice Art","username":"ArturoNereu","description":"Shader inspired by a piece of art I saw at the Peggy Guggenheim Collection Gallery.\n\nThe piece, in my opinion, is pretty simple, but still caught my attention. So, in the end, that's what makes it art.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","basic","venice","art"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/** \n//  The way the shader works is basic, just renders squares of different sizes and colors, with a whole at their centers.\n**/\n\n// Mexican-inspired color palette (go to the Common tab for the Square struct definition)\nSquare squares[17] = Square[17](\n    Square(vec3(0.8, 0.4, 0.3), 0.5, 0.45),\n    Square(vec3(1.0, 1.0, 1.0), 0.45, 0.44), // White break\n    Square(vec3(1.0, 0.8, 0.0), 0.44, 0.39),\n    Square(vec3(1.0, 1.0, 1.0), 0.39, 0.38), // White break\n    Square(vec3(0.0, 0.5, 0.5), 0.38, 0.33),\n    Square(vec3(1.0, 1.0, 1.0), 0.33, 0.32), // White break\n    Square(vec3(0.9, 0.6, 0.4), 0.32, 0.27),\n    Square(vec3(1.0, 1.0, 1.0), 0.27, 0.26), // White break\n    Square(vec3(0.0, 0.5, 1.0), 0.26, 0.21),\n    Square(vec3(1.0, 1.0, 1.0), 0.21, 0.2), // White break\n    Square(vec3(0.5, 0.5, 0.0), 0.2, 0.15),\n    Square(vec3(1.0, 1.0, 1.0), 0.15, 0.14), // White break\n    Square(vec3(0.86, 0.08, 0.24), 0.14, 0.09),\n    Square(vec3(1.0, 1.0, 1.0), 0.09, 0.08), // White break\n    Square(vec3(0.96, 0.87, 0.7), 0.08, 0.03),\n    Square(vec3(1.0, 1.0, 1.0), 0.03, 0.02), // White break\n    Square(vec3(0.29, 0.0, 0.51), 0.02, 0.0)\n);\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n\n    vec3 col = vec3(0.0, 0.0, 0.0);\n    \n    for(int i = 0; i < squares.length(); i++)\n    {\n        col += sdfSquareWithInner(uv, squares[i].size, squares[i].innerSize) * squares[i].color;\n    }\n\n   \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// This struct represents the squares. Is not necessary, but makes things easier to understand and configure.\n// The same data could be laid out as arrays of vec3 and float.\nstruct Square\n{\n    vec3 color;\n    float size;\n    float innerSize;\n};\n\n// SDF of a square with an inner \"hole\"\n// If you want to learn more about SDFs, I recommend Ronja's post:\n// https://www.ronja-tutorials.com/post/034-2d-sdf-basics/\nvec3 sdfSquareWithInner(vec2 uv, float size, float innerSize)\n{\n    // Just to type less, x and y are pixel coordinates\n    float x = uv.x;\n    float y = uv.y;\n    \n    // Think of d and dInner as the limits of the square, if the x,y fall within\n    // the limits, then the resulting pixel will be colored, otherwise it won't\n    float d = max(abs(x), abs(y)) - size;\n    float dInner = max(abs(x), abs(y)) - innerSize;\n\n    // Check if the point is inside the inner square. We return 1.0 if it's within limits \n    // to use the value as a mask that we then tint with a color\n    if (dInner <= 0.0 || d > 0.0)\n    {\n        return vec3(0.0);\n    }\n    else\n    {\n        return vec3(1.0);\n    }\n}\n","name":"Common","description":"","type":"common"}]}