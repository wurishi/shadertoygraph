{"ver":"0.1","info":{"id":"MccfW8","date":"1733001502","viewed":103,"name":"combination of color 2","username":"nayk","description":"combionation of https://www.shadertoy.com/view/XfdfWn https://www.shadertoy.com/view/MdXSzS https://www.shadertoy.com/view/wdtczM","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 triangle_wave(vec2 a){\n    vec2 a2 =\n        vec2(1.,0.5)\n    ,\n    a1 = a+a2;\n    return abs(fract((a1*1.001)*(a2.x+a2.y+0.021))-.5);\n}\n\nvec3 fractal(vec2 uv){\n    vec3 col = vec3(0.);\n    float scale = 1.5;\n    vec2 t2 = vec2(0.);\n    vec3 col1 = col;\n                \tfloat t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .017)) * 0.02;\n\tfloat si = sin(t);\n\tfloat co = cos(t);\n\tmat2 ma = mat2(co, si, -si, co);\n    uv*=ma;\n    float c1=0.;\n    for(int k = 0; k < 12; k++){\n        //uv += 1./2.;\n        if(uv.x>uv.y)\n        \n        uv.y += 1./4.;\n        else uv.x += 1./4.;\n        //uv.y += sign(uv.x+.5)/2.+1./2.;\n        \n        uv =\n            //-sign(uv.y-uv.x)*(uv+t2)/scale\n            -(uv+t2)/scale\n        ;\n   \n        uv = -(fract(vec2(uv+vec2(.5,1.5))*scale)-.5)/scale;\n             \tfloat t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .017)) * 0.02;\n\tfloat si = sin(t);\n\tfloat co = cos(t);\n\tmat2 ma = mat2(co, si, -si, co);\n    uv*=ma;\n        //uv.y -= sign(uv.y+.5)/2.;\n        t2 =\n            -triangle_wave(uv-.5)\n            //-triangle_wave(uv-.5)*sign(t2.y+.25)\n\n            \n            //purple\n            //triangle_wave(uv+.5) - 1.\n        ;\n        uv =\n            //t2-triangle_wave(uv.yx)+fract(t2/2.)\n            \n            //looks better with more iterations\n            t2-triangle_wave(uv.yx)-fract(t2)-vec2(floor(-uv.x),0.)\n        ;        uv.y -= sign(uv.x-.5)/2.;\n\n        \n        c1 =\n            //max(abs(uv.y-uv.x*sign(uv.x-uv.y))/2.,c1)\n            max(abs(uv.y-uv.x)/2.,c1)\n        ;\n        \n        c1 =\n            1.-abs(2.*c1-1.)\n            \n            //more colorful\n            //abs(2.*c1-1.)\n            \n            //Spooky!\n            //max(abs(2.*c1-2.),c1/4.)/2.\n        ;\n        uv.y += 1./4.;\n        \n        col.x =\n             //col.x\n            \n            //blue and white\n            //c1\n            \n            //red and blue and white\n            //max(1.-abs(2.*c1-1.),c1/4.)\n\n            \n            //more colorful\n            //max(length(uv-t2-c1)/3.,1.-col.x)\n            \n            //blue and green\n            //max(length(uv-c1)/3.,col.x)\n            length(uv-c1)/3.\n           \n            //purple\n            //2. - max((abs(uv.y-uv.x))/3.,col.x)\n           \n            //black and white\n            //col.x\n        ;\n        \n        col =\n            abs(col-(1.-(c1*col.x)));\n        col1 =\n            abs(col1*c1-col-1.).yzx\n            //abs(col1*c1-col*sign(t2.y-t2.x)-1.).yzx\n        ;\n        //uv.x += sign(uv.y-.5)/2.;\n    }\n    return col1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy / iResolution.xy) - .5;\n\tfloat t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .07)) * 2.2;\n\tfloat si = sin(t);\n\tfloat co = cos(t);\n\tmat2 ma = mat2(co, si, -si, co);\n    vec4 o= fragColor;\n    vec2 F= fragCoord;\n  vec2 R = iResolution.xy; \n    o-=o;\n    for(float d,t = -iTime*.01, i = 0. ; i > -1.; i -= .06 )          \t\n    {   d = fract( i -3.*t );                                          \t\n        vec4 c = vec4( ( F - R *.5 ) / R.y *d ,i,0 ) * 28.;            \t\n        for (int j=0 ; j++ <27; )                                      \t\n            c.xzyw = abs( c / dot(c,c)                                 \t\n                    -vec4( 7.-.2*sin(t) , 6.3 , .7 , 1.-cos(t/.8))/7.);\t\n       o -= c * c.yzww  * d--*d  / vec4(3,5,1,1);                     \n    }\n\tfloat v1, v2, v3;\n\tv1 = v2 = v3 = 0.0;\n\t fragColor = vec4(0.0);\n    float t1 = 2.;\n    \n    vec2 uv2= (fragCoord)/iResolution.y/t1/2.0;\n\n    if(iMouse.z>.5)\n    uv2 = uv2.xy + iMouse.xy / iResolution.xy/t1;\n    vec3 col1 = fractal(uv2);\n\tfloat s = 0.0;\n\tfor (int i = 0; i < 90; i++)\n\t{\n\t\tvec3 p = s * vec3(uv, 0.0);\n\t\n\t\tp += vec3(.22, .3, s - 1.5 - sin(iTime * .13) * .1)*o.xyz+col1;\n\t\tfor (int i = 0; i < 8; i++)\tp = abs(p) / dot(p,p) - 0.659;\n\t\tv1 += dot(p,p) * .0015 * (1.8 + sin(length(uv.xy * 13.0) + .5  - iTime * .2));\n\t\tv2 += dot(p,p) * .0013 * (1.5 + sin(length(uv.xy * 14.5) + 1.2 - iTime * .3));\n\t\tv3 += length(p.xy*10.) * .0003;\n\t\ts  += .035;\n\t}\n\t\n\tfloat len = length(uv);\n\tv1 *= smoothstep(.2, .5, len);\n\tv2 *= smoothstep(.5, .0, len);\n\tv3 *= smoothstep(.9, .0, len);\n\t\n\tvec3 col = vec3( v3 * (1.5 + sin(iTime * .2) * .4),\n\t\t\t\t\t(v1 + v3) * .3,\n\t\t\t\t\t v2) + smoothstep(0.2, .0, len) * .85 + smoothstep(.0, .6, v3) * .3;\n\n\tfragColor=vec4(min(pow(abs(col*col1), vec3(1.2)), 1.0), 1.0);\n}","name":"Image","description":"","type":"image"}]}