{"ver":"0.1","info":{"id":"wlfyWr","date":"1591810302","viewed":1500,"name":"Inverse Aces Tonemap Operator","username":"Chrisy","description":"Inverse of ACES aproximation","likes":4,"published":1,"flags":0,"usePreview":1,"tags":["acestonemap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 RRTAndODTFit(vec3 x)\n{\n    vec3 a = x * (x + vec3(0.0245786f)) - vec3(0.000090537f);\n  \tvec3 b = vec3(0.983729f) * x  +0.671032;\n    return a / b;\n}\n//(x*(x+0.0245786)-(0.000090537)) / ( 0.983729 *x +0.671032)\n//0.491865*(x-0.0249851)\nvec3 inv_RRTAndODTFit(vec3 x)\n{\n    vec3 a = vec3(-0.000090537f)+ x*(vec3(0.0245786f)+x);\n    vec3 b = vec3(0.983729f) * x  +0.671032;\n    return a / b;\n}\nvec3 Tonemap_ACES(vec3 x) {\n    // Narkowicz 2015, \"ACES Filmic Tone Mapping Curve\"\n    const float a = 2.51;\n    const float b = 0.03;\n    const float c = 2.43;\n    const float d = 0.59;\n    const float e = 0.14;\n    return (x * (a * x + b)) / (x * (c * x + d) + e);\n}\n//(x * (2.51 * x + 0.03)) / (x * (2.43 * x + 0.59) + 0.14)\nvec3 i_Tonemap_ACES(vec3 x) {\n    // Narkowicz 2015, \"ACES Filmic Tone Mapping Curve\"\n    const float a = 2.51;\n    const float b = 0.03;\n    const float c = 2.43;\n    const float d = 0.59;\n    const float e = 0.14;\n     return min(vec3(1.0), max(vec3(0.0), ((x / (a / x - b)) * max(x / (c / x - d) - e, vec3(0.001)))));\n}\nvec3 inv_Tonemap_ACES(vec3 x) {\n    // Narkowicz 2015, \"ACES Filmic Tone Mapping Curve\"\n    const float a = 2.51;\n    const float b = 0.03;\n    const float c = 2.43;\n    const float d = 0.59;\n    const float e = 0.14;\n   return (-0.59 * x + 0.03 - sqrt(-1.0127 * x*x + 1.3702 * x + 0.0009)) / (2.0 * (2.43*x - 2.51));\n}\n//-(0.121399 (x - 0.0508475))/(x - 1.03292) Â± (0.00205761 sqrt(-10127 x^2 + 13702 x + 9))/(x - 1.03292)\nfloat Tonemap_Unreal(float x) {\n    // Unreal 3, Documentation: \"Color Grading\"\n    // Adapted to be close to Tonemap_ACES, with similar range\n    // Gamma 2.2 correction is baked in, don't use with sRGB conversion!\n    return x / (x + 0.155) * 1.019;\n}\n\nfloat A = 0.15; //Shoulder Strength\nfloat B = 0.50; //Linear Strength\nfloat C = 0.10; //Linear Angle\nfloat D = 0.20; //Toe Strength\nfloat E = 0.02; //Toe Numerator\nfloat F = 0.30; // Toe Denominator\nfloat W = 11.2; // Whitepoint\nvec3 Hable_Fit(vec3 x) {\n    return ((x * (A * x + C * B) + D * E) / (x * (A * x + B) + D * F)) - E / F;\n}\nvec3 Hable(vec3 x) {\n    return Hable_Fit(x) / Hable_Fit(vec3(W));\n}\n\nvec3 inverse_Hable_Fit(vec3 x) {\n    return (sqrt((vec3(4.0) * x - 4.0 * x * x) * A * D * F * F * F + (-4.0 * x * A * D * E + B * B * C * C - 2.0 * x * B * B * C + x * x * B * B) * F * F + (2.0 * x * B * B - 2.0 * B * B * C) * E * F + B * B * E * E) + (B * C - x * B) * F - B * E) / ((2.0 * x - 2.0) * A * F + 2.0 * A * E);\n}\nvec3 inverse_Hable(vec3 x) {\n    return inverse_Hable_Fit(x) ;\n}\n\nfloat Tonemap_Uchimura(float x, float P, float a, float m, float l, float c, float b) {\n    // Uchimura 2017, \"HDR theory and practice\"\n    // Math: https://www.desmos.com/calculator/gslcdxvipg\n    // Source: https://www.slideshare.net/nikuque/hdr-theory-and-practicce-jp\n    float l0 = ((P - m) * l) / a;\n    float L0 = m - m / a;\n    float L1 = m + (1.0 - m) / a;\n    float S0 = m + l0;\n    float S1 = m + a * l0;\n    float C2 = (a * P) / (P - S1);\n    float CP = -C2 / P;\n\n    float w0 = 1.0 - smoothstep(0.0, m, x);\n    float w2 = step(m + l0, x);\n    float w1 = 1.0 - w0 - w2;\n\n    float T = m * pow(x / m, c) + b;\n    float S = P - (P - S1) * exp(CP * (x - S0));\n    float L = m + a * (x - m);\n\n    return T * w0 + L * w1 + S * w2;\n}\n\nfloat Tonemap_Uchimura(float x) {\n    const float P = 1.0;  // max display brightness\n    const float a = 1.0;  // contrast\n    const float m = 0.22; // linear section start\n    const float l = 0.4;  // linear section length\n    const float c = 1.33; // black\n    const float b = 0.0;  // pedestal\n    return Tonemap_Uchimura(x, P, a, m, l, c, b);\n}\nfloat fExposure = 1.0;\nvec3 reinhard(vec3 col) {\n    return col * (fExposure / (1.0 + col / fExposure));\n}\n\nvec3 i_reinhard(vec3 col) {\n    return col / (fExposure * max(vec3(1.0) - col / fExposure, 0.001));\n}\nfloat Tonemap_Lottes(float x) {\n    // Lottes 2016, \"Advanced Techniques and Optimization of HDR Color Pipelines\"\n    const float a = 1.6;\n    const float d = 0.977;\n    const float hdrMax = 8.0;\n    const float midIn = 0.18;\n    const float midOut = 0.267;\n\n    // Can be precomputed\n    const float b =\n        (-pow(midIn, a) + pow(hdrMax, a) * midOut) /\n        ((pow(hdrMax, a * d) - pow(midIn, a * d)) * midOut);\n    const float c =\n        (pow(hdrMax, a * d) * pow(midIn, a) - pow(hdrMax, a) * pow(midIn, a * d) * midOut) /\n        ((pow(hdrMax, a * d) - pow(midIn, a * d)) * midOut);\n\n    return pow(x, a) / (pow(x, a * d) * b + c);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / (iResolution.xy );\n    \n\tvec3 img = texture(iChannel0,uv).xyz;\n    vec3 linear = inv_Tonemap_ACES(img)*1.;\n    fragColor.rgb = Tonemap_ACES(linear);\n\n}","name":"Image","description":"","type":"image"}]}