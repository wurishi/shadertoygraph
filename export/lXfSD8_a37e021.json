{"ver":"0.1","info":{"id":"lXfSD8","date":"1709429211","viewed":90,"name":"fish-eye cubes raymarch sdf","username":"akr51","description":"Anyone know how to fix the artifact when using uv = vec2(length(uv) * 2.0, atan(uv.y, uv.x)) by not just cheating and using abs on one of the components? ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define TIME (iTime * 0.25)\n\nvec3 rot3(vec3 p, vec3 axis, float theta)\n{\n\n    return mix(dot(axis, p) * axis, p, cos(theta)) + cross(axis, p) * sin(theta);\n    \n\n}\n\nfloat sphere(vec3 samplePoint, vec3 origin, float radius)\n{\n\n\n    return length(samplePoint - origin) - radius;\n\n}\n\n\n\nfloat box(vec3 uv, vec3 shape, vec3 position)\n{\n  \n  uv -= position;\n  uv = abs(uv) - shape;\n  \n  return length(max(uv, 0.0)) + min(max(uv.x, max(uv.y, uv.z)), 0.0);\n\n}\n\n\n\n\nfloat scene(vec3 samplePoint)\n{\n\n\n    float f1 = box(rot3(samplePoint, vec3(0.0, 1.0, 0.0), TIME), vec3(0.2, 0.2, 0.2), vec3(0.0, 0.0, 0.0));\n    return f1;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n   vec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n   uv.x *= (iResolution.x / iResolution.y);\n\n   //uv = vec2(length(uv) * 2.0, atan(uv.y, uv.x)); // THIS LINE HERE\n   uv = vec2(length(uv) * 2.0, atan(abs(uv.y), uv.x));\n   \n   vec3 rayOrigin    = vec3(0.0, 0.2, -1.0);\n   vec3 rayFixation  = vec3(uv, 1.0);\n   vec3 rayDirection = normalize(rayFixation - rayOrigin);\n  \n   float f = 0.0;\n   float t = 0.0;\n   \n   for (int i = 0; i < 54; ++i)\n   {\n   \n       vec3 p = rayOrigin + t * rayDirection;\n       \n       \n       // Signed distance function for sphere\n       vec3 q = fract(rot3(p, vec3(0.0, 1.0, 0.0), TIME) + TIME);\n       float d = scene(q - 0.5);\n       \n       t += d;\n       \n       // < (hit) > too far\n       if (d < 0.001 || d > 50.0)\n       {\n       \n           \n           break;\n       \n       }\n           \n   \n   }\n   \n   // depth\n   f = t * 0.04;\n   f = pow(f * 2.0, 3.0);\n   fragColor = vec4(vec3(f) * vec3(1.0, 0.5, 0.5), 1.0);\n   \n}","name":"Image","description":"","type":"image"}]}