{"ver":"0.1","info":{"id":"ws3yzr","date":"1600264063","viewed":45,"name":"my first RayMarch","username":"alenmemenduf","description":"I followed this tutorial:\nhttps://www.youtube.com/watch?v=PGtv-dBi2wE","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["ray","march"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n\n\n\nfloat getDist(vec3 point ){\n\tvec4 sphere = vec4(0, sin(iTime*2.)*.3+1.5, 6, 1.); // x,y,z and width\n    \n    float sphereDist = length(point-sphere.xyz) - sphere.w;\n    float planeDist = point.y;\n    \n    float dist = min(sphereDist,planeDist);\n    return dist;\n} // minimum distance from point to a surface\n\nvec3 getNormal(vec3 point){\n\tvec2 offset = vec2(0.01,0.);\n    float dist = getDist(point);\n    vec3 normal = vec3(\n        dist-getDist(point-offset.xyy),\n        dist-getDist(point-offset.yxy),\n        dist-getDist(point-offset.yyx));\n    \n    return normalize(normal);\n} // returns the normal vector, a vector that points out from a point\n\nfloat getLight(vec3 point, vec3 lightPos){\n    vec3 lightVector = normalize(lightPos - point);\n    vec3 normal = getNormal(point);\n    \n    float diffuse = dot(normal,lightVector); // between -1 and 1 depending on the angle between the 2 vectors\n    return diffuse;\n} // this value represents the strength of the light depending on angle\n\nfloat rayMarch(vec3 rayOrigin, vec3 rayDestination){\n\n    float distanceMarched = 0.;\n    \n    for(int i=0; i<MAX_STEPS; i++){\n\t\tvec3 point = rayOrigin + rayDestination * distanceMarched;\n        float distancePointToSurface = getDist(point); \n        distanceMarched += distancePointToSurface;\n        if(distanceMarched > MAX_DIST || distancePointToSurface < SURF_DIST) break;\n    }\n    \n    return distanceMarched;\n} // returns the total distance until we hit a surface\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5*iResolution.xy)/iResolution.y;\n    vec3 color = vec3(0);\n    \n    // rays shot from camera through the current pixel on the screen\n    vec3 rayOrigin = vec3(0, 1, 0);\n    vec3 rayDestination = normalize(vec3(uv.x,uv.y, 1));\n    \n    float dist = rayMarch(rayOrigin,rayDestination); // the distance until it hits\n    vec3 point = rayOrigin + rayDestination * dist; // the point where it hits\n    \n    vec3 lightPos = vec3(sin(iTime)*4.,1.,3.); // position of the light source\n    float diffuse = getLight(point, lightPos); // how the light is shown on the object, objects that have a smaller angle are more lit.\n    \n    color = vec3(diffuse); // applying the lighting\n    color *= vec3(1.,0.61,1.); // purple color\n    \n    fragColor = vec4(color,1.0);\n    \n}","name":"Image","description":"","type":"image"}]}