{"ver":"0.1","info":{"id":"NsXBDs","date":"1648667176","viewed":201,"name":"Thin Line Antialiased","username":"RyanJMcGowan","description":"A simple thin line shader that is useful as an alpha channel for linework. Antialiasing is clean at even very thin resolutions.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["thinlineantialias"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define resolution vec2(500.0, 500.0)\n#define Thickness 0.0002\n\nfloat drawLine(vec2 p1, vec2 p2) {\n  vec2 uv = gl_FragCoord.xy / resolution.xy;\n\n  float a = abs(distance(p1, uv));\n  float b = abs(distance(p2, uv));\n  float c = abs(distance(p1, p2));\n  \n  float d = sqrt(c*c + Thickness*Thickness);\n  \n  float p1_edge = distance(p1, uv);\n  float p2_edge = distance(p2, uv);\n  float end_dist = min(p1_edge, p2_edge);\n  float pixelW = 1.0 / iResolution.y;\n  float thresh = Thickness - (pixelW / 2.0);\n  \n  if ( a >= d || b >= d )\n  {\n    return max(min(1.0 - (end_dist-thresh) / pixelW, 1.0),0.0);\n  }\n\n  float p = (a + b + c) * 0.5;\n\n  float h = 2.0 / c * sqrt( p * ( p - a) * ( p - b) * ( p - c));\n    \n  return max(min(1.0 - (h-thresh) / pixelW, 1.0),0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 p1 = vec2(0.8 + sin(iTime)*0.5, 0.1);\n  vec2 p2 = vec2(0.8 + cos(iTime)*0.5, 0.8);\n  fragColor = vec4(drawLine(p1, p2));\n}\n","name":"Image","description":"","type":"image"}]}