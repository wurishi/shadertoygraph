{"ver":"0.1","info":{"id":"wlXXzB","date":"1563372305","viewed":517,"name":"Feedback on green screen video","username":"xavierseb","description":"Feedback in video, using distance from a reference colour, example green in the green screen of the Van Damme clip, by calculating the how far from green a pixel is, we determine which pixel to write ( video pixel or buffer pixel. )","likes":7,"published":3,"flags":32,"usePreview":0,"tags":["video","greenscreen","feedback"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel1,uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    float t=mod(iTime,57.5);\n    vec4 col, prev, colmask; \n    \n    //if(mod(iTime,11.5)<.1) col=vec4(0.);\n    //else \n    if(t>46.) {\n    \t// 1961 commercial\n    \tcol = texture(iChannel2,uv);    \n    \tcolmask=vec4(0.,0.,0.,1.); \n    \tprev= texture(iChannel1, (uv-.5)*.995+.5);\n    }\n    else if(t>34.2) {\n        // van damme and britney\n        col = texture(iChannel0,uv); \n        colmask=vec4(0.,1.,0.,1.); \n        prev= texture(iChannel3,uv);\n    }\n    else if(t>23.) {\n        // britney\n        col = texture(iChannel3,uv); \n        colmask=vec4(-.18,.36,-.18,.87); \n    \tprev= texture(iChannel1, (uv-.5)*.995+.5);\n    }\n    else if(t>11.5) {\n   \t\t// van damme and britney\n    \tcol = texture(iChannel0,uv); \n    \tcolmask=vec4(0.,1.,0.,1.); \n    \tprev= texture(iChannel3,uv);\n    }\n    else {\n        //britney on van damme\n        col = texture(iChannel0,uv); \n        prev= texture(iChannel3, (fract(uv*5.)-.5)*.995+.5);\n        colmask=vec4(0.,0.,0.,1.); \n\n        if(t<10.3) {\n        \t// comic book print effect\n    \t\tfloat pointsize=.01;\n\t\t\tfloat le = length(pointsize/2.-mod(uv,vec2(pointsize)));\n\t\t\tprev=step(vec4(le), pointsize*prev*prev);\n        }\n    }\n\n          \n    vec4 fac= vec4(1.03,1.011,1.0051,1.);\n    \n    // if(iFrame%80!=0) col=prev;\n        \n    // set pixels according to distance of image pixel color \n    // from colmask color expressed as vectors\n    vec4 vout=(length(col-colmask)<.6)?prev*fac:col;\n    if(length(vout-vec4(0,1,0,1))<.66) vout.g=0.;\n    fragColor=vout;\n}","name":"Buffer A","description":"","type":"buffer"}]}