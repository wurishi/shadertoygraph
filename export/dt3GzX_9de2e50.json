{"ver":"0.1","info":{"id":"dt3GzX","date":"1682885388","viewed":59,"name":"SimpleCameraExtended-xroo","username":"xroo","description":"Simple frustrum and spining dot in space;\nhttps://www.youtube.com/watch?v=PBxuVlp7nuM\nhttps://www.youtube.com/watch?v=2SaGgTlkhSs","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["camera3d"],"hasliked":0,"parentid":"mlc3RX","parentname":"SimpleCamera2-xroo"},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define Pi 3.141592653589\n\nfloat DistLine(vec3 ro, vec3 rd, vec3 p) {\n    return length(cross(p-ro, rd))/length(rd);\n}\n\nfloat DrawPoint(vec3 ro, vec3 rd, vec3 p) {\n    float d      =  DistLine(ro, rd, p);\n          d      =  smoothstep(0.06, 0.05, d);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t      =  iTime;\n    float FOV    =  90.0;\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2  uv     =  (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec2  m      =  iMouse.xy / iResolution.xy + 1.0 + vec2(t * 0.02, 0);\n    if (iMouse.xy == vec2(0.0)) m = vec2(t * 0.02 - 0.1, 0.6); // starting point fix\n\n    vec3  lookat =  vec3(0.5, 0.5, 0.5);\n    vec3  ro     =  vec3(1.0, 1.0, 1.0);\n          ro     *= sin(vec3( m.x*2.0, 0.5, m.x*2.0+0.5) * Pi); // rotating by mouse horizontally\n          ro     *= sin(vec3( 1.0-m.y, 1.5-m.y, 1.0-m.y) * Pi); // rotating by mouse vertically\n//        ro     *= vec3(sin(t), 1.0, cos(t)); \n          ro     *= 2.0; // camera distance from 0.0 point\n          ro     += lookat;\n\n    vec3  f      =  normalize(lookat - ro);\n    vec3  r      =  normalize(cross(f, vec3(0.0, -1.0, 0.0)));\n    vec3  u      =  cross(f, r);\n\n    float phi    =  FOV / 180.0 * Pi;\n    float zoom   =  1. / tan (phi / 2.) ;\n    vec3  c      =  ro + f * zoom;\n    vec3  i      =  c + uv.x*r + uv.y*u;\n    vec3  rd     =  i - ro;\n    \n    // draw a big vert cube\n    vec3  d      =  vec3(0.);\n          d      += DrawPoint(ro, rd, vec3(0.0, 0.0, 0.0)) * vec3(0.1,0.1,0.1);\n          d      += DrawPoint(ro, rd, vec3(0.0, 0.0, 1.0)) * vec3(0.,0.,1.);\n          d      += DrawPoint(ro, rd, vec3(0.0, 1.0, 0.0)) * vec3(0.,1.,0.);\n          d      += DrawPoint(ro, rd, vec3(0.0, 1.0, 1.0)) * vec3(0.,1.,1.);\n          d      += DrawPoint(ro, rd, vec3(1.0, 0.0, 0.0)) * vec3(1.,0.,0.);\n          d      += DrawPoint(ro, rd, vec3(1.0, 0.0, 1.0)) * vec3(1.,0.,1.);\n          d      += DrawPoint(ro, rd, vec3(1.0, 1.0, 0.0)) * vec3(1.,1.,0.);\n          d      += DrawPoint(ro, rd, vec3(1.0, 1.0, 1.0)) * vec3(1.,1.,1.);\n\n    // Output to screen\n    fragColor = vec4(texture(iChannel0, rd, 0.).rgb + d, 0.0);\n}","name":"Image","description":"","type":"image"}]}