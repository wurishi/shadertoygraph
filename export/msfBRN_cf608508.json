{"ver":"0.1","info":{"id":"msfBRN","date":"1688507545","viewed":75,"name":"a game of chess","username":"boytoy","description":"play on it","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["playboard"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = 2.*(fragCoord - iResolution.xy * 0.5) / iResolution.y;\n    \n    vec2 uv3 = uv;\n    const vec2 pixels = vec2(160.,144.);\n    uv = floor(pixels*uv)/pixels;\n    \n    float t = max(10.*sin(iTime/10.)-1.,0.);\n    vec2 st = uv;\n    uv.x += max(0.,t-1.)*fbm(st)*st.x*st.y;\n    uv.y += max(0.,t-1.)*fbm(st.x * vec2(0.,1.) + st.y * vec2(-1.,0.) );\n    \n    vec2 uv2 = 4.*uv;\n    float chessboard_lum = (int(floor(uv2.x)+floor(uv2.y))%2 ==0 ) ? 1. : 0.;\n\n    \n    // Output to screen\n    fragColor = vec4(vec3(chessboard_lum),1.0);\n    if(max(abs(uv3.x),abs(uv3.y)) > 1.) {\n    fragColor = vec4(vec3(0.),1.0);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n#define OCTAVES 6.\nfloat fbm (in vec2 st) {\n    // parameters\n    float gain       = .9; // between 0 and 1\n    float lacunarity = 2.5; // greater than 1\n    \n    // Loop of octaves\n    // Initial values\n    float value     = 0.0;\n    float frequency = 0.;\n    float amplitude = 1.;\n    for (float i = 0.; i < OCTAVES; i++) {\n        value += amplitude * noise(st);\n        st *= lacunarity;\n        st = st.x * vec2(0.,1.) + st.y * vec2(-1., 0.);\n        amplitude *= gain;\n    }\n    \n    if(OCTAVES>1.){value /= 1.-pow(gain,OCTAVES-1.);value *= 1.-gain;}\n    \n    return value;\n}\n","name":"Common","description":"","type":"common"}]}