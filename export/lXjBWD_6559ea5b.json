{"ver":"0.1","info":{"id":"lXjBWD","date":"1730162706","viewed":40,"name":"Day on sea","username":"T_mas","description":"Day on sea","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["3d","sea","water"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Day on sea designed by T-mas in ECNU\n// Use a 3d noise to simulate the wave.\n\n#define MARCH_STEP 35. \n#define SURFACE_SIZE .01\n#define FAR_DIST 100.\n#define STEP_SCALE .7\n#define WAVE_HEIGHT .44\nvec3 random3( vec3 p )  \n{\n    p = vec3( dot(p,vec3(127.1,311.7, 74.7)),\n              dot(p,vec3(269.5,183.3,246.1)),\n              dot(p,vec3(113.5,271.9,124.6)));\n\n    return -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise3d( in vec3 p )\n{\n    vec3 i = floor( p );\n    vec3 f = fract( p );\n\n    vec3 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( mix( dot( random3( i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ), \n                          dot( random3( i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),\n                     mix( dot( random3( i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ), \n                          dot( random3( i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), u.x), u.y),\n                mix( mix( dot( random3( i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ), \n                          dot( random3( i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), u.x),\n                     mix( dot( random3( i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ), \n                          dot( random3( i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) ), u.x), u.y), u.z );\n}\n   \nvec3 rayDir(vec2 uv, vec3 ro, vec3 lookat, float zoom){\n    vec3 f = normalize(lookat - ro);\n    vec3 u = vec3(0., 1., 0.);\n    vec3 r = normalize(cross(u, f));\n    if(dot(r, r) < .0001) r = vec3(1., 0., 0.);\n    u = cross(f, r);\n    return normalize(f * zoom + u * uv.y + r * uv.x);\n}\nmat2 rot(float a){\n    return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\nvec3 rotateByMouse(vec3 ray){ \n    vec2 m = iMouse.xy;\n    m += step(dot(m, m), 0.001) * iResolution.xy * .5;\n    vec2 mouse = 2.*(m.xy - iResolution.xy * .5) / iResolution.xy;\n    float a1 = -mouse.x*3.14159;\n    ray.yz *= rot(-mouse.y*1.2);\n    ray.xz *= rot(a1);\n    return ray;\n}\nfloat noise(vec2 uv){ \n    float p = 0.;\n    float s = .666;\n    for(float i = 0.; i < 2.; i++){\n        p += (noise3d(vec3(uv, iTime*.8))) * s;\n        uv *= 2.;\n        uv += 1.;\n        s *= .5;\n    }\n    return p;\n}\nfloat getDist(vec3 u){\n    float h = noise(u.xz*.24)*WAVE_HEIGHT; \n    return u.y - h;\n}\nvec3 getNormal(vec3 pos){\n    vec2 t = vec2(.01, .0);\n    float d = getDist(pos);\n    return normalize(vec3(\n        getDist(pos + t.xyy) - d,\n        getDist(pos + t.yxy) - d,\n        getDist(pos + t.yyx) - d\n    ));\n}\nfloat rayMarch(vec3 pos, vec3 dir, float scale){ \n    if(dir.y >= 0.) return 1e5;\n    float p = (pos.y - WAVE_HEIGHT) / max(.02, -dir.y), d;\n    vec3 cur;\n    \n    for(float i = 0.; i < MARCH_STEP; i++){ \n        cur = pos + dir * p;\n        d = getDist(cur) * STEP_SCALE * scale;\n        p += d;\n        if(abs(d) < SURFACE_SIZE || p >= FAR_DIST) break;\n    }\n    return p;\n}\nvec3 sunDir(){\n    float t = iTime * 0.045 + 1.34;\n    float ct = cos(t), st = sin(t);\n    vec3 sunDir = vec3(0., ct, st);\n    return sunDir;\n}\nvec3 atmosphere(vec3 dir){\n    // first, add a sun \n    vec3 sunDir = sunDir();\n    float st = sunDir.z, ct = sunDir.y;\n    vec3 c_tot = vec3(0.);\n    c_tot += step(-0.06, dir.y) * vec3(1., .31, .001) * pow(clamp(dot(sunDir, dir)*1.004,0.,1.), 999.);\n    \n    // then, add a moon\n    vec3 moonDir = -sunDir;\n    c_tot += step(-0.06, dir.y) * vec3(.87, .89, .93) * pow(clamp(dot(moonDir, dir)*1.004,0.,1.), 999.);\n    \n    // render day sky color\n    c_tot += pow(max(0., ct+.25), .46) * vec3(.6);\n    c_tot += pow(max(0., ct+.15), .35) * vec3(.0, .2, .6);\n    c_tot += \n        smoothstep(.4, .1, abs(ct - 0.)) * vec3(1., .7, .1) * \n        pow(max(0., 1.-abs(dir.y-ct*.5)), 1.)*.7*\n        clamp(st*dir.z*.4+.6, 0., 1.);\n        \n    // render night sky color\n    c_tot += \n        mix(\n            vec3(0.),\n            mix(\n                vec3(.12, .07, .34), vec3(.0, .12, .34),\n                noise3d(dir*4.3 + vec3(12.23, 2.34, 3.56))*.4+.2\n            ),\n            noise3d(dir*2.6 + vec3(-13.45, 3.43, 3.57))*.2+.8\n        )*smoothstep(0., -.3, ct);\n    return c_tot;\n}\nvec3 waterRefract(vec3 ray, vec3 pos, vec3 n){\n    vec3 u = vec3(0.05, .4, 1.);\n    vec3 s = sunDir();\n    return u * (smoothstep(-.4, .3, s.y)*.7+.3);\n}\nvec3 waterReflect(vec3 ray, vec3 pos, vec3 n){\n    ray = reflect(ray, n);\n    return atmosphere(ray);\n}\nvec3 fog(vec3 col, float dist){\n    float t = smoothstep(-.4, .3, sunDir().y)*.7+.3;\n    float i = 1.-exp(-pow(dist*.0111, 1.0));\n    return mix(col, t * vec3(.3, .5, 1.), i);\n}\nvec3 water(vec3 ray, vec3 pos) { \n    float n1 = 1.0;  \n    float n2 = 1.33; \n    \n    vec3 n = getNormal(pos); \n    n = mix(n, vec3(0., 1., 0.), smoothstep(10., 100., length(pos.xz)));\n    float r0 = pow((n1 - n2) / (n1 + n2), 2.0);\n    float r = r0 + (1.0 - r0) * pow(1.0 - abs(dot(ray, n)), 5.0);\n    float t = 1.0 - r;   \n\n    vec3 c_reflected = waterReflect(ray, pos, n);  \n    vec3 c_refracted = waterRefract(ray, pos, n);  \n\n    vec3 c_r = r * c_reflected;\n    vec3 c_t = t * c_refracted;\n\n    return c_r + c_t;\n}\n\nvec3 render(vec2 uv){\n    float h = 3.5;\n    vec3 ro = vec3(3., h, 0.);\n    vec3 ray = rayDir(uv, ro, vec3(3., h, 1.), 1.);\n    ray = rotateByMouse(ray);\n    vec3 rc = rayDir(vec2(.5, uv.y), ro, vec3(3., h, 1.), 1.);\n    \n    if(rotateByMouse(rc).y<-0.035){\n        float d = rayMarch(ro, ray, 1.);\n        vec3 p = ro + d * ray;\n        return fog(water(ray, p), d);\n    } \n    return atmosphere(ray); \n}\n   \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = render(uv);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}