{"ver":"0.1","info":{"id":"4tdSzH","date":"1480669956","viewed":148,"name":"Floating Bars","username":"panda1234lee","description":"split image into bars","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["rectangle","bar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Benefited from Internet\n\nconst int barWidth = 64;\nconst float amplitude = .5;\nconst float noise = 1.5;\nconst float frequency = .5;\n\nfloat rand(int num)\n{\n   return fract(\n         mod(float(num) * 67123.313, 12.0) * sin(float(num) * 10.3)\n               * cos(float(num)));\n}\n// â˜†\nfloat wave(int num)\n{\n   float fn = float(num) * frequency * 0.1 * float(barWidth);\n   return cos(fn * 0.5) * cos(fn * 0.13) * sin((fn + 10.0) * 0.3) / 2.0 + 0.5;\n}\n\nfloat pos(int num)\n{\n   return noise == 0.0 ? wave(num) : mix(wave(num), rand(num), noise);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n   float progress = abs(sin(.5 * iTime));\n    \n   int bar = int(fragCoord.x) / barWidth;\n   // Split the image into bars\n   float scale = 1.0 + pos(bar) * amplitude;\n    \n   //fragColor = progress * vec4( 1.0 + pos(bar) * amplitude); \n    \n    \n   // Image up and down \n   //float scale = 4.;\t// control speed\n    \n   float phase = progress * scale;\n   float posY = fragCoord.y / iResolution.y;\n   vec2 p;\n   vec4 c;\n    // The outside image\n   if (phase + posY < 1.0)\n   {\n      p = vec2(fragCoord.x/iResolution.x, posY + phase);\n      //p = vec2(fragCoord.x, fragCoord.y + mix(0.0, iResolution.y, phase))\n      //      / iResolution.xy;\n      c = texture(iChannel0, p);\n   }\n    // The inside image\n   else\n   {\n      p = fragCoord.xy / iResolution.xy;\n      c = texture(iChannel1, p);\n   }\n   fragColor = c;\n}\n","name":"Image","description":"","type":"image"}]}