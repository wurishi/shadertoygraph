{"ver":"0.1","info":{"id":"lcXBDS","date":"1724270376","viewed":12,"name":"Texture 2 Bit Integer Shader","username":"_JZ","description":"distort textures line by line","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["xor","pattern","integer"],"hasliked":0,"parentid":"XfffDS","parentname":"2 Bit Integer Shader"},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    //vec2 uv = fragCoord/iResolution.xy;\n    \n    //convert everything to integers\n    int time = int(iTime * 100.0);\n\n    int x = int(fragCoord.x/1.0); //scale image\n    int y = int(fragCoord.y/1.0);\n    \n    int r = 0;//2+ bit color depth\n    int g = 0; \n    int b = 0;\n    \n    ivec2 texSize = textureSize(iChannel0, 0);\n    //float line = fragCoord.y/iResolution.y;\n    //float column = fragCoord.x/iResolution.x;\n    \n    #define shader 2\n    \n    #if shader==1 //shift alternating\n        int tmp_x = x + (y%2);//int(2.0*sin(float(y/2)));\n        int tmp_y = y;\n        \n        vec2 uv = vec2(ivec2(tmp_x, y)) / vec2(texSize);   // Convert pixel index to texture coordinates\n        vec4 pixel = texture(iChannel0, uv);\n            \n        \n        r = int(pixel.r*4.0);\n        g = int(pixel.g*4.0);\n        b = int(pixel.b*4.0);\n    #endif\n    \n    #if shader==2 //bounce crt\n        int range = 100;\n        int dst = 2;\n        int tmp_x = x + dst * abs(((y + time) %range)-range/2)/(range/4);\n        int tmp_x2 = x + dst * abs(((y + time/2) %range)-range/2)/(range/4);\n        int tmp_y = y;\n        \n        vec2 uv1 = vec2(ivec2(tmp_x, y)) / vec2(texSize);   // Convert pixel index to texture coordinates\n        vec2 uv2 = vec2(ivec2(tmp_x2, y)) / vec2(texSize);\n        vec2 uv3 = vec2(ivec2(tmp_x, y)) / vec2(texSize);\n        \n        vec4 pixel1 = texture(iChannel0, uv1); // Sample the texture at these coordinates\n        vec4 pixel2 = texture(iChannel0, uv2);\n        vec4 pixel3 = texture(iChannel0, uv3);\n            \n        \n        r = int(pixel1.r*4.0);\n        g = int(pixel2.g*4.0);\n        b = int(pixel3.b*4.0);\n    #endif\n    \n    #if shader==3\n        int range = 100;\n        int dst = 2;\n        int tmp_x = x + dst * abs(((y + time) %range)-range/2)/(range/4);//int(2.0*sin(float(y/2)));\n        int tmp_x2 = x + dst*2 * abs(((y + time/2 + 8) %range)-range/2)/(range/4);\n        int tmp_y = y;\n        \n        vec2 uv1 = vec2(ivec2(x, y)) / vec2(texSize);   // Convert pixel index to texture coordinates\n        vec2 uv2 = vec2(ivec2(tmp_x2, y)) / vec2(texSize);\n        vec2 uv3 = vec2(ivec2(tmp_x, y)) / vec2(texSize);\n        \n        vec4 pixel1 = texture(iChannel1, uv1); // Sample the texture at these coordinates\n        vec4 pixel2 = texture(iChannel1, uv2);\n        vec4 pixel3 = texture(iChannel1, uv3);\n            \n        \n        r = int(pixel1.r*4.0);\n        g = int(pixel2.g*4.0);\n        b = int(pixel3.b*4.0);\n    #endif\n    \n    #if shader==4 //default\n        vec2 uv = vec2(ivec2(x, y)) / vec2(texSize);\n        vec4 t = texture(iChannel0, uv);\n        r = int(t.r*4.0);\n        g = int(t.g*4.0);\n        b = int(t.b*4.0);\n    #endif\n    \n\n    vec3 col = vec3(float(r)/3.0,float(g)/3.0,float(b)/3.0); //expects values 0.0 to 1.0\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}