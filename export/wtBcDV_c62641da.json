{"ver":"0.1","info":{"id":"wtBcDV","date":"1595429700","viewed":82,"name":"001 - Hello World","username":"Mr_Admirals","description":"First shader using RayMarching","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["firstshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define SURF_DIST 0.01\n\nfloat GetDist(vec3 p)\n{\n    // Define Sphere\n    // XYZ = Position\n    // W = Radius\n    vec4 sphere = vec4(0, 1 , 6, 1);\n    \n    float sphereDist = length(p - sphere.xyz) - sphere.w;\n    \n    // Plane is at Y = 0\n    float planeDist = p.y;\n    \n    float d = min(sphereDist, planeDist);\n    \n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd)\n{\n\tfloat dO = 0.0;\n    \n    for(int i = 0; i < MAX_STEPS; i++)\n    {\n\t\tvec3 p = ro + rd * dO;\n        float ds = GetDist(p);\n        dO += ds;\n        if(dO > MAX_DIST || ds < SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p)\n{\n\tfloat d = GetDist(p);\n    vec2 e = vec2(0.01, 0.0);\n    \n    vec3 n = d - vec3(\n        \tGetDist(p - e.xyy),\n        \tGetDist(p - e.yxy),\n        \tGetDist(p - e.yyx)\n        );\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p)\n{\n\tvec3 lightPos = vec3(0, 5, 6);\n    lightPos.xz += vec2(sin(iTime), cos(iTime) * 2.0);\n    vec3 l = normalize(lightPos - p);\n    vec3 n = GetNormal(p);\n    \n    float d = RayMarch(p + n * SURF_DIST * 2.0, l);\n    float distToLight = distance(p, lightPos);\n    \n    if(d < distToLight) return 0.0;\n    \n    return clamp(dot(n, l), 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    vec3 ro = vec3(0, 1, 0);\n    vec3 rd = normalize(vec3(uv, 1.0));\n    \n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd * d;\n    \n    float diffuse = GetLight(p);\n    \n   \td /= 6.0;\n    vec3 col = vec3(diffuse);\n    \n    fragColor =  vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}