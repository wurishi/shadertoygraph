{"ver":"0.1","info":{"id":"3tsGzl","date":"1557324953","viewed":269,"name":"Abstract 3D","username":"nr4","description":"Inspired by\nhttps://scontent-frt3-1.xx.fbcdn.net/v/t1.0-9/59622931_1461682550639439_2429272462265942016_n.jpg?_nc_cat=105&_nc_ht=scontent-frt3-1.xx&oh=8e25380e9d379e4603894d8032ff9635&oe=5D5ED7F7","likes":8,"published":1,"flags":32,"usePreview":0,"tags":["noise","landscape","stack"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* Abstract 3D\n * Copyright (C) 2019  Alexander Kraus <nr4@z10.info>\n * \n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n * \n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nconst float fsaa = 25.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.);\n    float bound = sqrt(fsaa)-1.;\n   \tfor(float i = -.5*bound; i<=.5*bound; i+=1.)\n        for(float j=-.5*bound; j<=.5*bound; j+=1.)\n        {\n     \t\tcol += texture(iChannel0, fragCoord/iResolution.xy+vec2(i,j)*3./max(bound, 1.)/iResolution.xy).xyz;\n        }\n    col /= fsaa;\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/* Abstract 3D\n * Copyright (C) 2019  Alexander Kraus <nr4@z10.info>\n * \n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n * \n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n// Global constants\nconst float pi = acos(-1.);\nconst vec3 c = vec3(1.0, 0.0, -1.0);\nfloat a = 1.0;\n\nconst float nn = 20.;\n\n// Hash function\nvoid rand(in vec2 x, out float num)\n{\n    x += 400.;\n    num = fract(sin(dot(sign(x)*abs(x) ,vec2(12.9898,78.233)))*43758.5453);\n}\n\n// Arbitrary-frequency 2D noise\nvoid lfnoise(in vec2 t, out float num)\n{\n    vec2 i = floor(t);\n    t = fract(t);\n    //t = ((6.*t-15.)*t+10.)*t*t*t;  // TODO: add this for slower perlin noise\n    t = smoothstep(c.yy, c.xx, t); // TODO: add this for faster value noise\n    vec2 v1, v2;\n    rand(i, v1.x);\n    rand(i+c.xy, v1.y);\n    rand(i+c.yx, v2.x);\n    rand(i+c.xx, v2.y);\n    v1 = c.zz+2.*mix(v1, v2, t.y);\n    num = mix(v1.x, v1.y, t.x);\n}\n\n// Extrusion\nvoid zextrude(in float z, in float d2d, in float h, out float d)\n{\n    vec2 w = vec2(-d2d, abs(z)-0.5*h);\n    d = length(max(w,0.0));\n}\n\n// Stroke\nvoid stroke(in float d0, in float s, out float d)\n{\n    d = abs(d0)-s;\n}\n\n// Scene\nvoid scene(in vec3 x, out float d)\n{\n    float n, na;\n    lfnoise(12.*x.xy,n);\n    lfnoise(27.*x.xy,na);\n\tn = mix(n,na,.5);\n    n = .4+.1*pow(n,4.)+2.*na*n*na;\n    lfnoise(8.*x.xy, na);\n    n *= 2.*na+.5;\n    n = clamp(n,-1.,1.);\n    n += .4*(abs(n)-.05);\n    n = clamp(n,-1.,1.);\n    zextrude(x.z,d,.2*floor(nn*(.5+.5*n))/nn,d);\n    \n    d = min(d,x.z);\n}\n\n// Normal\nconst float dx = 5.e-4;\nvoid normal(in vec3 x, out vec3 n)\n{\n    float s;\n    scene(x,s);\n    scene(x+dx*c.xyy, n.x);\n    scene(x+dx*c.yxy, n.y);\n    scene(x+dx*c.yyx, n.z);\n    n = normalize(n-s);\n}\n\n// Palette\nvoid color(in float scale, out vec3 col)\n{\n    const int N = 12;\n    const vec3 colors[N] = vec3[N](\n        vec3(1.00,0.76,0.47),\n        vec3(0.82,0.74,0.54),\n        vec3(0.87,0.57,0.27),\n        vec3(0.58,0.32,0.20),\n        vec3(0.78,0.36,0.30),\n        vec3(0.53,0.36,0.20),\n        vec3(0.52,0.71,0.72),\n        vec3(0.47,0.47,0.45),\n        vec3(0.99,0.19,0.16),\n        vec3(0.71,0.20,0.19),\n        vec3(0.44,0.20,0.15),\n        vec3(0.17,0.14,0.13)\n    );\n\tfloat index = floor(scale*float(N)), \n        remainder = scale*float(N)-index;\n    col = mix(colors[int(index)],colors[int(index)+1], remainder);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Set up coordinates\n    a = iResolution.x/iResolution.y;\n    vec2 uv = fragCoord/iResolution.yy-0.5*vec2(a, 1.0);\n    vec3 col = c.yyy;\n    \n    // Camera setup\n    vec3 o = c.yzx+.5*iTime*c.yxy, \n        t = c.yyy+.5*iTime*c.yxy,\n        dir = normalize(t-o),\n        r = normalize(c.xyy),\n        u = normalize(c.yyx + c.yxy),\n        n,\n        x;\n    o += uv.x*r + uv.y*u;\n    float d = -(o.z-.1)/dir.z,\n        s;\n    int N = 250,\n        i;\n    \n    // Raymarching\n    for(i=0; i<N; ++i)\n    {\n        x = o + d * dir;\n        scene(x,s);\n        if(s < 1.e-4) break;\n        d += min(s,1.e1*dx);\n    }\n    \n    // Illumination\n    if(i<N)\n    {\n\t    normal(x,n);\n        vec3 l = normalize(x-.5*iTime*c.yxy+c.yxx);\n        \n        color(floor(x.z/.2*nn*2.)/nn, col);\n        \n        col = .1*col\n            + .3*col*abs(dot(l,n))\n            + .8*col*abs(pow(dot(reflect(-l,n),dir),3.));\n    }\n    \n    fragColor = clamp(vec4(col,1.0),0.,1.);\n}","name":"Buffer A","description":"","type":"buffer"}]}