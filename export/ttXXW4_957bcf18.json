{"ver":"0.1","info":{"id":"ttXXW4","date":"1562871700","viewed":84,"name":"Fractal Practice","username":"Veggiebob","description":"A little test for mandelbrot and filled julia sets","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_ITERS 64.\nvec2 sq (vec2 v) {\n    return vec2(\n        2.*v.y*v.x,\n        v.y*v.y-v.x*v.x\n    );\n}\nfloat mandelbrot (vec2 uv, vec2 c, float iters) {\n    vec2 k = uv;\n    for(float i = 0.; i<iters; i++) {\n        k = sq(k)+c;\n        if(length(k)>100.) return float(i);\n    }\n    return 0.;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\tvec2 mouse = iMouse.xy/iResolution.xy;\n    float aspect = iResolution.y/iResolution.x;\n    uv-=0.5;\n    mouse-=0.5;\n    uv.x/=aspect;\n    mouse.x/=aspect;\n    float zoom = iTime*0.1;\n    // Time varying pixel color\n    vec3 col = vec3(0.);\n    vec2 seed = mouse;\n    float v = mandelbrot(uv*1., seed, MAX_ITERS);\n    float c = v/float(MAX_ITERS);\n    for(float i = 0.; i<5.; i++) {\n        float its = pow(2., i+3.);\n        float v = mandelbrot(uv, seed, its);\n        col.r += v/its * pow(pow(0.8, i), 2.) * 0.8;\n    }\n\tcol = mix(col.ggr, vec3(col.r*0.5, col.gr), col.r);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}