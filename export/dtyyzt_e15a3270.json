{"ver":"0.1","info":{"id":"dtyyzt","date":"1700542161","viewed":69,"name":"triangle in cosmos","username":"nayk","description":"triangle, starfield, cosmos","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["triangle","cosmos","starfield"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* original  https://www.shadertoy.com/view/tllfRX https://www.shadertoy.com/view/dlycRt https://www.shadertoy.com/view/MdXSzS and https://www.shadertoy.com/view/tttXRB amd other*/\n#define NUM_LAYERS 8.\n#define TAU 6.28318\n#define PI 3.141592\n#define Velocity .025 //modified value to increse or decrease speed, negative value travel backwards\n#define StarGlow 0.025\n#define StarSize 02.\n#define CanvasView 20.\n\nconst float MATH_PI\t= float( 3.14159265359 );\n\nvoid Rotate( inout vec2 p, float a ) \n{\n\tp = cos( a ) * p + sin( a ) * vec2( p.y, -p.x );\n}\n\nfloat Circle( vec2 p, float r )\n{\n    return ( length( p / r ) - 1.0 ) * r;\n}\n\nfloat Rand( vec2 c )\n{\n\treturn fract( sin( dot( c.xy, vec2( 12.9898, 78.233 ) ) ) * 43758.5453 );\n}\n\nfloat saturate( float x )\n{\n\treturn clamp( x, 0.0, 1.0 );\n}\n\nvoid BokehLayer( inout vec3 color, vec2 p, vec3 c )   \n{\n    float wrap = 450.0;    \n    if ( mod( floor( p.y / wrap + 0.5 ), 2.0 ) == 0.0 )\n    {\n        p.x += wrap * 0.5;\n    }    \n    \n    vec2 p2 = mod( p + 0.5 * wrap, wrap ) - 0.5 * wrap;\n    vec2 cell = floor( p / wrap + 0.5 );\n    float cellR = Rand( cell );\n        \n    c *= fract( cellR * 3.33 + 3.33 );    \n    float radius = mix( 30.0, 70.0, fract( cellR * 7.77 + 7.77 ) );\n    p2.x *= mix( 0.9, 1.1, fract( cellR * 11.13 + 11.13 ) );\n    p2.y *= mix( 0.9, 1.1, fract( cellR * 17.17 + 17.17 ) );\n    \n    float sdf = Circle( p2, radius );\n    float circle = 1.0 - smoothstep( 0.0, 1.0, sdf * 0.04 );\n    float glow\t = exp( -sdf * 0.025 ) * 0.3 * ( 1.0 - circle );\n    color += c * ( circle + glow );\n}\n\nfloat Star(vec2 uv, float flare){\n    float d = length(uv);\n  \tfloat m = sin(StarGlow*1.2)/d;  \n    float rays = max(0., .5-abs(uv.x*uv.y*1000.)); \n    m += (rays*flare)*2.;\n    m *= smoothstep(1., .1, d);\n    return m;\n}\n\nfloat Hash21(vec2 p){\n    p = fract(p*vec2(123.34, 456.21));\n    p += dot(p, p+45.32);\n    return fract(p.x*p.y);\n}\n\n\nvec3 StarLayer(vec2 uv){\n    vec3 col = vec3(0);\n    vec2 gv = fract(uv);\n    vec2 id = floor(uv);\n    for(int y=-1;y<=1;y++){\n        for(int x=-1; x<=1; x++){\n            vec2 offs = vec2(x,y);\n            float n = Hash21(id+offs);\n            float size = fract(n);\n            float star = Star(gv-offs-vec2(n, fract(n*34.))+.5, smoothstep(.1,.9,size)*.46);\n            vec3 color = sin(vec3(.2,.3,.9)*fract(n*2345.2)*TAU)*.25+.75;\n            color = color*vec3(.9,.59,.9+size);\n            star *= sin(iTime*.6+n*TAU)*.5+.5;\n            col += star*size*color;\n        }\n    }\n    return col;\n}\n\n\n\nconst float nbCircle = 13.; \n\nvec2 rotate(float angle, float radius)\n{\n    return vec2(cos(angle),-sin(angle)) * radius;\n}\n\nvec2 perp(vec2 v)\n{\n    return vec2(-v.y, v.x);\n}\n\nfloat udTriangle( vec2 p, vec2 a, vec2 b, vec2 c )\n{\n  vec2 ab = b - a; vec2 pa = a - p;\n  vec2 bc = c - b; vec2 pb = b - p;\n  vec2 ca = a - c; vec2 pc = c - p;\n    \n  float d0 = dot(perp(ab), pa);\n  float d1 = dot(perp(bc), pb);\n  float d2 = dot(perp(ca), pc);\n    \n  return min(min(d0, d1), d2);\n}\n\nfloat sdfTriangle(vec2 p)\n{\n    float radius = 1.2;\n    float angle = iTime * 0.8;\n    vec2 a = rotate( angle, radius);\n    vec2 b = rotate( TAU / 3. + angle, radius);\n    vec2 c = rotate( 2. * TAU / 3. + angle, radius);\n    \n    return udTriangle(p, a, b, c);\n}\n\nfloat radFilter(float v)\n{\n    return smoothstep(100. / iResolution.y, 0., abs(v-1.));\n}\n\nfloat distFilter(float v)\n{\n    return smoothstep(0., 0.5, v);\n}\nvec2 rotate(vec2 v, float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return vec2(v.x * c - v.y * s, v.x * s + v.y * c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 M = vec2(0);\n    M -= vec2(M.x+sin(iTime*0.22), M.y-cos(iTime*0.22));\n    M +=(iMouse.xy-iResolution.xy*.5)/iResolution.y;\n    float t = iTime*Velocity; \n    vec3 col = vec3(0);  \n    float t3 = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .07)) * 2.2;\n\tfloat si = sin(t);\n\tfloat co = cos(t);\n\tmat2 ma = mat2(co, si, -si, co);\n uv.xy=rotate(uv.xy,iTime/10.-length(uv)*2.);\n\tfloat v1, v2, v3;\n\tv1 = v2 = v3 = 0.0;\n\tvec2\tp2 = (2. * fragCoord - iResolution.xy) / iResolution.y;\n    float\tangle = atan(p2.y, p2.x);\n    float \tl = length(p2) * nbCircle;\n    float\tcircleId = floor(l);\n    #ifdef AUDIOREACT\n    float\ts = texture(iChannel0, vec2(0.5, 1. - circleId / nbCircle)).x;\n    #else\n    float\ts = 0.6;    \n    #endif\n    float\tmodCircleId = mod(circleId, 2.);\n    float d = sdfTriangle(p2);\n    d = distFilter(d);\n    float speed = mix(0.1, -0.1, modCircleId);\n    l+= sin((angle - iTime * speed) * circleId * 5.) * 0.5 * d * s;\n    l = fract(l) * 2.;\n    float\tt2 = min(l, 2. - l);\n    t2 = radFilter(t2); \n\tfloat s2 = 0.0;\n\n\tvec2 p = ( 2.0 * fragCoord - iResolution.xy ) / iResolution.x * 1000.0;\n    \n    // background\n\tvec3 color = mix( vec3( 0.3, 0.1, 0.3 ), vec3( 0.1, 0.4, 0.5 ), dot( uv, vec2( 0.2, 0.7 ) ) );\n\n    float time = iTime - 15.0;\n    \n    Rotate( p, 0.2 + time * 0.03 );\n    BokehLayer( color, p + vec2( -50.0 * time +  0.0, 0.0  ), 3.0 * vec3( 0.4, 1.1, 0.2 ) );\n\tRotate( p, 0.1 - time * 0.05 );\n    BokehLayer( color, p + vec2( -70.0 * time + 33.0, -33.0 ), 3.5 * vec3( 1.6, 0.4, 1.2 ) );\n\tRotate( p, 0.5 + time * 0.07 );\n    BokehLayer( color, p + vec2( -60.0 * time + 55.0, 55.0 ), 3.0 * vec3( 0.4, 0.3, 1.2 ) );\n    Rotate( p, 0.1 - time * 0.03 );\n    BokehLayer( color, p + vec2( -25.0 * time + 77.0, 77.0 ), 3.0 * vec3( 0.4, 0.2, 0.1 ) );    \n    Rotate( p, 1.0 + time * 0.05 );\n    BokehLayer( color, p + vec2( -15.0 * time + 99.0, 99.0 ), 3.0 * vec3( 1.2, 0.0, 0.4 ) );     \n\n\t\n    for(float i=0.; i<1.; i+=1./NUM_LAYERS){\n        float depth = fract(i+t);\n        float scale = mix(CanvasView, .5, depth);\n        float fade = depth*smoothstep(1.,.9,depth);\n        col += StarLayer(uv*scale+i*453.2-iTime*.05+d);}   \n    fragColor = vec4(col,1.0);\n    fragColor+= vec4( color, 1.0 );\n}","name":"Image","description":"","type":"image"}]}