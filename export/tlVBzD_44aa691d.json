{"ver":"0.1","info":{"id":"tlVBzD","date":"1614039107","viewed":164,"name":"2D Reaction Diffusion","username":"oneshade","description":"First reaction diffusion shader.","likes":4,"published":3,"flags":32,"usePreview":0,"tags":["2d","diffusion","reactiondiffusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 ab = texture(iChannel0, fragCoord / iResolution.xy).xy;\n    fragColor = vec4(ab.x, ab.x, ab.x + ab.y, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Algorithm from https://www.karlsims.com/rd.html\n#define Da 1.0 // Diffusion rate of A\n#define Db 0.5 // Diffusion rate of B\n#define f 0.0545 // Feed rate\n#define k 0.062 // Kill rate\n#define dt 1.0 // Time step\n\n// Convolution weights\nconst mat3 weights = mat3(0.05,  0.2, 0.05,\n                          0.20, -1.0, 0.20,\n                          0.05,  0.2, 0.05);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    ivec2 iFragCoord = ivec2(fragCoord);\n    vec2 ab;\n    if (iFrame == 0) {\n        ab = texture(iChannel1, fragCoord / iResolution.xy).xy;\n    }\n\n    if (iFrame > 0) {\n        ab = texelFetch(iChannel0, iFragCoord, 0).xy;\n        vec2 laplacian = vec2(0.0);\n        for (int i=-1; i < 2; i++) {\n            for (int j=-1; j < 2; j++) {\n                ivec2 offs = ivec2(i, j);\n                vec2 c = texelFetch(iChannel0, iFragCoord + offs, 0).xy; // Neighboring cell\n                float w = weights[j + 1][i + 1]; // Weight\n                laplacian += c * w; // Weighted sum\n            }\n        }\n\n        ab.x += (Da * laplacian.x - ab.x * ab.y * ab.y + f * (1.0 - ab.x)) * dt; // Update A\n        ab.y += (Db * laplacian.y + ab.x * ab.y * ab.y - (k + f) * ab.y) * dt; // Update B\n    }\n\n    fragColor = vec4(ab, 0.0, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}