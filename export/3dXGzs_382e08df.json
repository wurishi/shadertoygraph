{"ver":"0.1","info":{"id":"3dXGzs","date":"1547150963","viewed":286,"name":"Temporal Highpassed TPDF Dither","username":"TheSandvichMaker","description":"Create TPDF noise by subtracting the previous frame's noise from the current frame's noise for a 1 tap highpass.\nTry pausing the shader to see how the regular and highpassed versions look identical when not in motion.\n\nUsing iq's integer hash II.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["dither","bluenoise","highpass","whitenoise","temporal","tpdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Single pole highpassed triangular dither.\n// Inspired by: https://www.airwindows.com/pauldither/\n\n// EDIT 2: Added blue noise for fun\n// Regular bluenoise dither is clearly perceptually superior,\n// but the difference between highpassed noises is much more subtle.\n\n\n// change the simulated bit depth here\n#define BIT_DEPTH 2\n\n// uncomment this to get RGB dither\n//#define CHROMA\n\n// uncomment this to use the video as demo\n//#define DEMO_VIDEO\n\n\n/*\n\tthe gradient demo is laid out like\n\twhite noise\n\thighpassed white noise\n\tblue noise\n\thighpassed blue noise\n\n\twhile the video demo is laid out like\n\twhite noise | highpassed white noise\n\tblue noise  | highpassed blue noise\n*/\n\n\n#define saturate(x) clamp(x, 0.0, 1.0)\n#define remap(x, a, b) (((x) - (a)) / ((b) - (a)))\n\n\n// iq's integer hash II\n// https://www.shadertoy.com/view/XlXcW4\nconst uint k = 1103515245U;  // GLIB C\nvec3 hash( uvec3 x )\n{\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    \n    return vec3(x)*(1.0/float(0xffffffffU));\n}\n\n\n// Divvy up the 1024x1024 noise for demonstration purposes\n// however you get animated blue noise is fine so long as you can\n// reliably get the previous frame's noise. Using golden ratio to animate the noise\n// didn't seem to play nice with highpass though.\n#define NOISE_TILE_SIZE 64\nvec3 bluenoise(int idx, ivec2 coord)\n{\n    const int s = NOISE_TILE_SIZE;\n    idx %= 1024 / s;\n\tcoord = ivec2(idx * s, (idx / s) * s) + coord % s;\n    return texelFetch(iChannel0, coord, 0).rgb;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // demo image\n#ifdef DEMO_VIDEO\n    vec3 col = texture(iChannel1, uv).rgb;\n#else\n    vec3 col = vec3(uv.x);\n#endif\n\t\n    // (2^8)-1 = 255, etc.\n    const float lsb = exp2(float(BIT_DEPTH)) - 1.0;\n    \n    // generate one noise using current frame as seed,\n    // and one noise using previous frame as seed.\n    vec3 n1 = hash(uvec3(fragCoord.xy, iFrame));\n    vec3 n2 = hash(uvec3(fragCoord.xy, iFrame-1));\n    \n    vec3 b1 = bluenoise(iFrame  , ivec2(fragCoord));\n    vec3 b2 = bluenoise(iFrame-1, ivec2(fragCoord));\n    \n    vec3 dither;\n    vec3 uni;\n    if (uv.y > 0.5)\n    {\n#ifdef DEMO_VIDEO\n        bool split = uv.x < 0.5;\n#else   \n        bool split = uv.y > 0.75;\n#endif\n        uni = n1;\n    \tdither = split ? \n            // normal tpdf\n            n1 + n2 - 1.0 :\n        \t// highpass tpdf\n        \tn1 - n2;\n    }\n    else \n    {\n#ifdef DEMO_VIDEO\n        bool split = uv.x < 0.5;\n#else   \n        bool split = uv.y > 0.25;\n#endif\n        // EDIT 3: fixed edgecase solution for blue noise,\n        // which was lerping to uniform white noise instead\n        // of uniform blue noise.\n        uni = b1;\n    \tdither = split ? \n            // normal tpdf\n            b1 + b2 - 1.0 :\n        \t// highpass tpdf\n        \tb1 - b2;\n    }\n    \n    // EDIT 1: added hornet's edgecase solution for completeness\n    const float lobit = 0.5 / lsb;\n    const float hibit = (lsb - 0.5) / lsb;\n    vec3 lo = saturate(remap(col, vec3(0.0), vec3(lobit)));\n    vec3 hi = saturate(remap(col, vec3(1.0), vec3(hibit)));\n    dither = mix(uni - 0.5, dither, min(lo, hi));\n    \n#ifndef CHROMA\n    dither = vec3(dither.r);\n#endif\n        \n    // apply dither\n    col += dither / lsb;\n    \n    // quantise\n    col = round(col * lsb) / lsb;\n\n    // output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}