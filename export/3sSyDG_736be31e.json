{"ver":"0.1","info":{"id":"3sSyDG","date":"1587218541","viewed":502,"name":"Basic : Apollonian Gaskets","username":"Gijs","description":"Performing a final circle inversion (magenta) on a ford circles fractal (grey) to get any Apollonian gasket (black). You can place your own circle inversion using point and drag.","likes":20,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal","circles","apollonian","gasket","ford"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//ford circles fractal\nfloat fordCircles(vec2 z){\n    float s = 1.;\n    \n    for(int i=0;i<8;i++){\n        //circle inversion\n        float f = 0.5 * dot(z,z);\n        z /= f;\n        s /= f;      \n        \n        //flip x and y\n        z.xy = z.yx;\n        \n        //repeat\n        z.x = mod(z.x + 1., 2.) - 1.;\n    }\n    \n    //draws two circles and two lines.\n    //this piece is then warped using circle inversions and copied using modulo\n    //to get the fractal.\n    z = abs(z);\n    float d1 = abs(z.y-1.0);\n    float d2 = abs(length(vec2(z.x-1.,z.y))-1.0);\n    \n    return min(d1,d2)/s;\n}\n\nvec2 scale(vec2 pixel){\n    return zoom * (pixel - iResolution.xy * 0.5)/iResolution.y + pan;   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 z = scale(fragCoord);\n    \n    //determine line thickness\n    float e = 0.5*zoom/iResolution.y;\n    \n    //initialize color\n    vec3 col = vec3(0);\n    \n    //draw ford cirles\n    col += .2 * smoothstep(e*2., e, fordCircles(z));\n    \n    //midpoint and radius of final circle inversion\n    vec2  m = vec2(cos(iTime*.3),sin(iTime*.3));\n    float r = 1.;\n    if(iMouse.z>0.){\n        m = scale(abs(iMouse.zw));\n        r = distance(scale(iMouse.xy),scale(abs(iMouse.zw)));\n    }\n\n    //perform final circle inversion\n    float l = distance(m, z);\n    float f = r*r / (l*l);\n    z = m + (z-m) * f;\n    \n    //draw final inversion circle\n    col.g += .2*smoothstep(e*2., e, abs(l-r));\n\n   \t//draw fractal\n    col += smoothstep(e*2., e, fordCircles(z) / f);\n    \n    //invert color\n    fragColor = vec4(1. - col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const float zoom = 4.;\nconst vec2 pan = vec2(0);","name":"Common","description":"","type":"common"}]}