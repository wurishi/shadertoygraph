{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"channel":1,"type":"texture","id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"/*\nCopyright (c) 2015 Sampo Savilampi\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nThe Software should be used for Good, not Evil.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nstruct polygon{\n\tvec2 A, B, C;\n};\nfloat roundBox(vec2 coord, vec2 pos, vec2 b ){\n  return length(max(abs(coord-pos)-b,0.0));\n}\nfloat box(vec2 coord, vec2 pos, vec2 size){\n\tif((coord.x<(pos.x+size.x)) &&\n\t   (coord.x>(pos.x-size.x)) &&\n\t   (coord.y<(pos.y+size.y)) && \n\t   (coord.y>(pos.y-size.y)) ) \n\t\treturn 1.0;\n\treturn 0.0;\n}\nfloat sun(vec2 coord, vec2 pos, float size){\n\tif(length(coord-pos)<size)\n\t\treturn 1.0;\n\treturn 0.0;\n}\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\nfloat m_sign(vec2 p1, vec2 p2, vec2 p3){\n  return (p1.x - p3.x) * (p2.y - p3.y) - (p2.x - p3.x) * (p1.y - p3.y);\n}\n\nmat2 rotate(float Angle)\n{\n    mat2 rotation = mat2(\n        vec2( cos(Angle),  sin(Angle)),\n        vec2(-sin(Angle),  cos(Angle))\n    );\n\treturn rotation;\n}\nfloat sdCapsule( vec2 p, vec2 a, vec2 b, float r ){\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return min(floor(length( pa - ba*h ) - r),0.);\n}\nfloat triangle( vec2 coord, vec2 pos, float angle, float thick, float size){\n    vec2 original_coord = coord;\n    coord += pos;\n    coord *= rotate(angle);\n    float collision = 0.0;\n    collision += sdCapsule( coord, vec2( 0.0, 0.333)*size, vec2( 0.3,-0.2)*size, thick );\n    collision += sdCapsule( coord, vec2( 0.0, 0.333)*size, vec2(-0.3,-0.2)*size, thick );\n    collision += sdCapsule( coord, vec2( 0.3,-0.2)*size, vec2(-0.3,-0.2)*size, thick );\n    collision += 3.0*texture( iChannel0, original_coord * 0.6 + vec2(iTime*0.02) ).b * 0.6;\n    collision += 2.5*texture( iChannel0, original_coord * 0.1 + vec2(iTime*0.001) ).b * 0.4;\n    return -min(max(-collision,0.0),1.0);\n}\n\n\n\n\nfloat smin( float a, float b, float k ){\n    float res = exp( -k*a ) + exp( -k*b );\n    return -log( res )/k;\n}\nmat3 rotY(in float a) {\n\treturn mat3( cos(a), 0.0, sin(a),\n\t\t\t\t 0.0,    1.0, 0.0,\n\t\t\t\t-sin(a), 0.0, cos(a)\n\t\t\t    );\n}\nfloat sdSphere( vec3 p, float s ){\n  return length(p)-s;\n}\nfloat sdBox( vec3 p, vec3 b ){\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) +\n         length(max(d,0.0));\n}\nvoid objectGroup0(in vec3 p, out vec3 color, out float reflectiveValue, out float finalDistance){\n    \n        reflectiveValue = 0.9;\n        p *= rotY(-iTime/4.);\n    if(length(p)<1.) return;\n    vec3 tex = texture(iChannel0,vec2(atan(p.x,p.z)*3.1415*0.5,p.y*1.4)*0.03+vec2(0.14)).rgb;\n    vec3 tex2 = texture(iChannel1,vec2(atan(p.x,p.z)*3.1415*0.5,p.y)*0.3+vec2(0.14)).rgb;\n\n    \n    color = vec3( 0.1, 0.3, 0.8);  \n    \n    finalDistance= min(finalDistance,sdSphere( p-vec3(0.0), 1.83+tex.r*0.03));\n    float dist2 = sdSphere( p, 1.75+tex.r*0.3+tex2.b*0.03);\n    \n    if (finalDistance > dist2) {\n        finalDistance = dist2;\n        color = vec3( 0.0, 0.5, 0.1) - tex + abs(sin(p.y))/2.;\n        reflectiveValue = 0.6;\n    }\n}\n\n\nvoid objectGroup1(in vec3 p, out vec3 color, out float reflectiveValue, out float finalDistance){\n    float dist=1000.0;\n    for(float i=0.0; i<3.0; i++){\n    vec3 p2=p*rotY(0.5*iTime*2.0+i);\n    p2.xzy*=rotY(0.5*iTime*(1.0+i*0.1)+i);\n    dist = min(dist,sdBox( rotY(iTime+i)*(p2-vec3(3.0+i*0.3,3.*sin(0.6*iTime+i),0.0)), vec3(0.5+i*0.1+0.35*cos(iTime+i)) ) );\n    }\n    if(finalDistance > dist){\n        finalDistance = dist;\n        color = vec3(0.5,0.2,0.2);\n        reflectiveValue = 0.6;\n    }\n}\nfloat calculateDistance(in vec3 p, out vec3 color, out float reflectiveValue) {\n    float finalDistance = 10000000.;\n    \n    objectGroup0(p,color,reflectiveValue,finalDistance);\n    objectGroup1(p,color,reflectiveValue,finalDistance);\n    return finalDistance;\n}\n\nfloat traceToLight(vec3 rayPosition, vec3 normalVector, vec3 lightSource){\n    const float epsilon = 0.01;\n    vec3 rayStartPosition = rayPosition + normalVector*0.001;\n    vec3 finalColor = vec3(0., 0., 0.);\n\tvec3 lightNormal = normalize(lightSource - rayPosition);\n    float dist = 0.0;\n    float lightAmount = 1.0;\n        for(float i=0.; i<32.; i++) {\n            rayPosition = rayStartPosition + dist * lightNormal;\n            vec3 color;\n            float dummy;\n            float stepable = calculateDistance(rayPosition, color,dummy);\n            dist += stepable;\n            lightAmount = min(900.0*abs(stepable),lightAmount);\n            if( length(rayPosition.xy)>8.)\n                break;\n        }\n    return clamp(lightAmount,0.5,9.0);\n}\nvec3 tracer(vec3 rayStartPosition, vec3 rayDirection) {\n    const float epsilon = 0.02;\n    \n    vec3 rayPosition = rayStartPosition;\n\n    vec3 normalVector;\n    float dist = 0.0;\n    vec3 returnColor = vec3(0.0);\n    vec3 finalColor = vec3(0.0);\n    vec3 lightSource = vec3(iTime/16.,0.0,-447.0+iTime);\n    float reflectiveValue = 1.0;\n    float reflectionNow = 1.0;\n    float finalLight = 1.0;\n    \n    float possibleFogLight = 1.0;\n    \n    for(float k=0.; k<2.; k++) {\n        for(float i=0.; i<66.; i++) {\n            vec3 color;\n            float stepable = calculateDistance(rayPosition, color, reflectiveValue);\n            dist += stepable;\n            rayPosition = rayStartPosition + dist * rayDirection;\n            \n            if( length(rayPosition.xy)>8.)\n                break;\n            if( abs(stepable) <= epsilon){\n                vec3 C;\n                float dummy = 0.0;\n                normalVector = vec3(\tcalculateDistance(rayPosition+vec3(epsilon,0,0),C,dummy)-calculateDistance(rayPosition+vec3(-epsilon,0,0),C,dummy),\n                                        calculateDistance(rayPosition+vec3(0,epsilon,0),C,dummy)-calculateDistance(rayPosition+vec3(0,-epsilon,0),C,dummy),\n                                        calculateDistance(rayPosition+vec3(0,0,epsilon),C,dummy)-calculateDistance(rayPosition+vec3(0,0,-epsilon),C,dummy));\n                normalVector = normalize(normalVector);\n                float light = traceToLight(rayPosition, normalVector, lightSource);\n                finalLight = min(finalLight, light);\n                float lightDistance = distance(rayStartPosition,lightSource);\n                \n                finalColor = color * vec3(dot(normalVector, -rayDirection));\n                \n                \n                vec3 lightDir = (lightSource-rayPosition);\n                lightDir = normalize(lightDir);\n                float directLight = dot(normalVector, lightDir);\n                reflectionNow = min(reflectionNow,reflectiveValue);\n                \n                finalColor+=max(0.85*directLight*vec3(1.0,0.9,0.8),0.001)*reflectionNow;\n                \n                returnColor += ( vec3(finalLight) / (k*0.8/reflectionNow + 1.0)) * finalColor;\n               \n                break;\n                \n            }\n        }\n        dist = 0.1;\n        rayStartPosition = rayPosition + normalVector;\n        rayPosition = rayStartPosition;\n        rayDirection = reflect(rayDirection, normalVector);\n    } \n    return returnColor;\n}\n\nvec3 piip() {\n    vec3 cameraPosition = vec3( 0., 0., -9.);\n    vec2 uv = 2.0 * gl_FragCoord.xy / iResolution.xy - 1.0;\n    uv/=min(pow(iTime/4.,2.),1.)*(1.+sin(iTime*14.)/(1.+mod(iTime,2.)*16.));\n     float aspect = iResolution.x / iResolution.y;\n    \n    if(length(uv.y)>0.9){\n        return vec3(0.0);\n    } else if(length(uv.x)<0.9){\n        vec3 direction = normalize(vec3(.5 * uv * vec2(aspect, 1.0), 1. ));\n        direction.xzy *= rotY(iTime*0.001);\n        cameraPosition *= rotY(-iTime/75.);\n        direction *= rotY(-iTime/75.);\n        return tracer(cameraPosition, direction);\n    }\n                      return vec3(0.0);\n}\n\n\n\n\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec4 tulos;\n\tvec4 lopullinentulos=vec4(1.0);\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n\tfloat aspectCorrection = (iResolution.x/iResolution.y);\n\tvec2 coordinate_entered = 2.0 * uv - 1.0;\n    if(abs(vec2(aspectCorrection,1.0) *coordinate_entered).y>0.7){\n        fragColor =  vec4(0.0,0.0,0.0,1.);\n    }else {\n\tfor(float rgbare=0.0; rgbare<2.0; rgbare++){\n\tvec2 coord = vec2(aspectCorrection,1.0) *coordinate_entered;\n\tcoord.x*=1.0+rgbare*0.009;\n\tcoord*=1.0+0.1*sin(1.01*0.1);\n        \n\ttulos=vec4(vec3(111.0/255.0, 30.0/255.0, 65.0/255.0),1.0);\n        \n\tif(mod(coord.x+coord.y+1.01*0.1+iTime*0.1,0.2)<0.1){\n\t\tif(box(coord,vec2(0.),vec2(4.,0.4))==1.)\n\t\t   \ttulos.xyz-=vec3(0.4,0.5,0.3);\n\t}\n\ttulos.rgb+=sun(coord,vec2(0.),1.);\n\ttulos.rgb-=sun(coord,vec2(0.),.7);\n        \n    float collision = 0.0;\n    for( float i = 0.0; i < 12.0; i+=3.){\n        vec2 triangle_position = mod(iTime+i,12.) * vec2( -0.5 + rand(vec2(i)) , -0.5 + rand( vec2(i*i) ) );\n        collision += triangle( coord, triangle_position, iTime+i, mod(iTime+i,12.)*0.01, mod(iTime+i,12.)*0.3);\n    }\n    \n    if(collision<0.0)\n        tulos.xyz += vec3(0.1);\n\t\n\ttulos.xyz=tulos.xyz-vec3(min(max(-0.44+length(coord)*0.41,0.0),1.0))+vec3(0.06*rand(vec2(coord.x+coord.y,1.01*coord.y*coord.x)));\n\t\n\tif(rgbare==0.0)\n\t\tlopullinentulos.r=tulos.r;\n\tif(rgbare==1.0)\n\t\tlopullinentulos.gb=tulos.gb;\n\t}\n\tlopullinentulos.xyz=lopullinentulos.xyz*(1.2-0.4*mod(fragCoord.y,2.0));\n    lopullinentulos.rgb=piip()+lopullinentulos.rgb/(1.+piip()*1e6);\n\tfragColor = lopullinentulos;\n        }\n}","name":"Image","description":"","type":"image"},{"outputs":[],"inputs":[],"code":" float rand(float co){\n    return fract(sin(dot(vec2(co),vec2(12.9898,78.233))) * 43758.5453);\n}\nfloat notes1(float time){\n    float mt=mod(time,6.);\n    if(mt<1.)\n        return 440.;\n    if(mt<2.)\n        return 392.;\n    if(mt<3.)\n        return 523.25;\n    if(mt<4.)\n        return 440.;\n    if(mt<5.)\n        return 392.;\n    if(mt<6.)\n        return 261.63;\n    return 0.;\n}\nvec2 mainSound( in int samp,float T)\n{\n    float time=T;\n    float rep_time=mod(time,2.) ;\n    float rep_time2=mod(time*4.,1.) ;\n    float rep_time3=mod(2.*(time-.5),2.) ;\n    float rep_time4=mod(time*2.-0.5,2.) ;\n    float slowtime=time/4.;\n    return 0.2*vec2( sin(6.2831*99.0*rep_time/pow(rep_time+1.,2.))*exp(-2.0*rep_time)  * min(max(time-8.,0.),1.) \n                + 0.9 * rand(time)/pow(rep_time2+1.,12.)\n                + 0.6 * rand(time)/pow(rep_time3+1.,7.)  * min(max(time-8.,0.),1.) \n                + 0.2 * rand(time)/pow(rep_time4+1.,11.)  * min(max(time-8.,0.),1.) \n                + 0.5 * sin(6.2831*notes1(time*4.)*0.5*rep_time4)*exp(-2.5*rep_time4)\n                + 0.5 * sin((notes1(time/8.)/440.)*6.2831*notes1(time*8.)*1.0*rep_time4)*exp(-1.95*rep_time4)  * min(max(time-16.,0.),1.) \n               )*  (1. -min(max((time-57.)/3.,0.),1.));\n}","name":"Sound","description":"","type":"sound"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":true,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MtSGz1","date":"1426820829","viewed":227,"name":"[NV15] Kepler-440b","username":"Branch","description":"Kepler-440b","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["keplershadowlightslightshadowstracing"],"hasliked":0,"parentid":"","parentname":""}}