{"ver":"0.1","info":{"id":"ddByWm","date":"1687779382","viewed":281,"name":"Destroying SDFs","username":"Kali","description":"Just a particle-like effect used for explosions","likes":37,"published":1,"flags":8,"usePreview":0,"tags":["raymarching","explosion","particles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float det=.001;\nfloat t;\n\nfloat hash(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\nfloat noise( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( hash( i + vec2(0.0,0.0) ), \n                     hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ), \n                     hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\nmat2 rot(float a) {\n    float s=sin(a),c=cos(a);\n    return mat2(c,s,-s,c);\n}\n\nfloat box(vec3 p, vec3 c) {\n    vec3 pp=abs(p)-c;\n    return length(max(vec3(0.),pp))+min(0.,max(pp.x,max(pp.y,pp.z)));\n}\n\nfloat boxf( vec3 p, vec3 b, float e )\n{\n       p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\nfloat cyl(vec3 p, float r, float h) {\n    return max(abs(p.y)-h,length(p.xz)-r);\n}\n\nfloat tor( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat de(vec3 p) {\n    p.yz*=rot(-.5);\n    p.xz*=rot(iTime*.3);\n    float tt=pow(t,.3)*3.5;\n    p-=p*.15*tt;\n    float no=noise(floor(p.xy*30.)+floor(p.z*30.)*123.);\n    p+=normalize(p)*no*min(2.,tt);\n    float i=mod(floor(iTime/5.),5.);\n    float d=length(p)-2.;\n    if (i==1.) d=box(p,vec3(1.5));\n    if (i==2.) d=cyl(p.xzy,1.,3.);\n    if (i==3.) d=tor(p, vec2(2.5,.5));\n    if (i==4.) d=boxf(p, vec3(2.), .2);\n    d+=length(abs(fract(p*4.)-.5))*.1;\n    return d*.5;\n}\n\nvec3 normal(vec3 p) {\n    vec2 e=vec2(0.,det);\n    return normalize(vec3(de(p+e.yxx),de(p+e.xyx),de(p+e.xxy))-de(p));\n}\n\n\nvec3 march(vec3 from, vec3 dir) {\n    float d, td=0., g=0.;\n    vec3 p, col=vec3(0.);\n    for (int i=0; i<150; i++) {\n        p=from+dir*td;\n        d=de(p);\n        if ((d<det||td>50.)&&t<.01) break;\n        d=max(.02,abs(d));\n        g+=.05/(.1+d*d)*exp(-.001*length(p))*exp(-2.*t);\n        td+=d;\n    }\n    if (d<det) {\n        vec3 n=normal(p);\n        col=vec3(.8,.3,.0)*n.z*n.z+.05;\n    }\n    col+=step(abs(t-.03),.02);\n    return col+g*vec3(1.,.5,.2)*step(0.001,t);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy*.5)/iResolution.y;\n\n    t=max(0.,mod(iTime,5.)-2.);\n\n    vec3 from=vec3(0.,0.,-10.);\n    vec3 dir=normalize(vec3(uv,1.));\n    \n    vec3 col = march(from, dir);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 mainSound( int samp, float time )\n{\n    float t=mod(time-2.,5.);\n    float s=(fract(cos(t*1000.)*t*1000.)-.5)*exp(-4.*t)*(1.+sin(t*30.)*t*.3);\n    s+=exp(-5.*t);\n    return vec2(s);\n}","name":"Sound","description":"","type":"sound"}]}