{"ver":"0.1","info":{"id":"4dVyzz","date":"1521546332","viewed":272,"name":"Circular square","username":"Ultraviolet","description":"One of those shapes perceived as circular of square depending on the view angle.\nThe shadow is still buggy for an unknown reason.","likes":12,"published":1,"flags":16,"usePreview":0,"tags":["raymarching","illusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Fork of \"Raymarching - Primitives\" by iq. https://shadertoy.com/view/Xds3zN\n// 2018-03-20\n\n\n#define AA 0\n\n#define PI\t3.1415927\n\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\n\n\n//------------------------------------------------------------------\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y*.5;\n}\n\nfloat sdObj(vec3 p)\n{\n    vec3 p0 = vec3(0., 1., 0.)+vec3(1., 0., 0.);\n    vec3 p1 = vec3(0., 1., 0.)+vec3(0.6, -0.35, 0.6);\n    vec3 p2 = vec3(0., 1., 0.)+vec3(.2, -.2, 1.);\n    vec3 p3 = vec3(0., 1., 0.)+vec3(0., 0., 1.);\n    \n    float inv = 1.;\n    \n    p.z = abs(p.z);\n    if(p.x<0.)\n    {\n        p.x = -p.x;\n        p.y = -p.y+2.;\n        inv = -1.;\n    }\n    \n    Bezier4 b = Bezier4(p0, p1, p2, p3);\n    \n    \n    float t = closest(b, p);\n    \n    vec3 proj1 = getPt(b, t);\n    \n    \n    \n    p0 = vec3(0., 1., 0.)+vec3(1. , 1., 0. );\n    p1 = vec3(0., 1., 0.)+vec3(0.6, 1., 0.6);\n    p2 = vec3(0., 1., 0.)+vec3( .2, 1., 1. );\n    p3 = vec3(0., 1., 0.)+vec3(0. , 1., 1. );\n    \n    b = Bezier4(p0, p1, p2, p3);\n\n    \n    t = closest(b, p);\n    \n    vec3 proj2 = getPt(b, t);\n    \n    \n    vec3 proj = proj2;\n    if(inv>0.)\n    \tproj.y = min(p.y, proj1.y);\n    else\n        proj.y = max(p.y, proj1.y);\n    \n    \n    float d = length(p-proj);\n    return d*.5-.01;\n}\n\n//------------------------------------------------------------------\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\nfloat opS( float d1, float d2 )\n{\n    //return max(-d2,d1);\n    return max(d2, d1);\n}\n\n//------------------------------------------------------------------\n\nvec2 map( in vec3 pos )\n{\n    vec2 res = vec2( sdPlane(   pos), 1.0 );\n    res = opU( res, vec2( sdObj(pos), 10.5 ) );\n    \n        \n    return res;\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 1.;\n    float tmax = 10.0;\n   \n    \n    float t = tmin;\n    float m = -1.0;\n    for( int i=0; i<64; i++ )\n    {\n\t    float precis = 0.0005*t;\n\t    vec2 res = map( ro+rd*t );\n        if( res.x<precis || t>tmax ) break;\n        t += res.x;\n\t    m = res.y;\n    }\n\n    if( t>tmax ) m=-1.0;\n    return vec2( t, m );\n}\n\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 10.0*h/t );\n        t += clamp( h, 0.01, 0.10 );\n        if( h<0.0001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    return normalize( e.xyy*map( pos + e.xyy ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ).x );\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n// https://iquilezles.org/articles/checkerfiltering\nfloat checkersGradBox( in vec2 p )\n{\n    // filter kernel\n    vec2 w = fwidth(p) + 0.001;\n    // analytical integral (box filter)\n    vec2 i = 2.0*(abs(fract((p-0.5*w)*0.5)-0.5)-abs(fract((p+0.5*w)*0.5)-0.5))/w;\n    // xor pattern\n    return 0.5 - 0.5*i.x*i.y;                  \n}\n\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    vec3 col = vec3(0.7, 0.9, 1.0) +rd.y*0.8;\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    if( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        vec3 ref = reflect( rd, nor );\n        \n        // material        \n\t\tcol = 0.45 + 0.35*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n        if( m<1.5 )\n        {\n            \n            float f = checkersGradBox( 5.0*pos.xz );\n            col = 0.3 + f*vec3(0.1);\n        }\n\n        // lighitng        \n        float occ = calcAO( pos, nor );\n\t\tvec3  lig = normalize( vec3(-0.4, 1., -0.6) );\n        vec3  hal = normalize( lig-rd );\n\t\tfloat amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n        float dom = smoothstep( -0.1, 0.1, ref.y );\n        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n        \n        dif *= calcSoftshadow( pos, lig, 0.02, 2.5 );\n        dom *= calcSoftshadow( pos, ref, 0.02, 2.5 );\n\n\t\tfloat spe = pow( clamp( dot( nor, hal ), 0.0, 1.0 ),16.0)*\n                    dif *\n                    (0.04 + 0.96*pow( clamp(1.0+dot(hal,rd),0.0,1.0), 5.0 ));\n\n\t\tvec3 lin = vec3(0.0);\n        lin += 1.30*dif*vec3(1.00,0.80,0.55);\n        lin += 0.40*amb*vec3(0.40,0.60,1.00)*occ;\n        lin += 0.50*dom*vec3(0.40,0.60,1.00)*occ;\n        lin += 0.50*bac*vec3(0.25,0.25,0.25)*occ;\n        lin += 0.25*fre*vec3(1.00,1.00,1.00)*occ;\n\t\tcol = col*lin;\n\t\tcol += 10.00*spe*vec3(1.00,0.90,0.70);\n\n    \tcol = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0002*t*t*t ) );\n    }\n    \n    \n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mo = iMouse.xy/iResolution.xy;\n\tfloat time = 15.0 + iTime;\n\n    \n    vec3 tot = vec3(0.0);\n#if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n#else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n#endif\n\n\t\t// camera\n        float alpha = time*PI*2.*.1;\n        alpha = smoothstep(0.,.5, fract(time*.2))*PI + smoothstep(.5,1., fract(time*.2))*PI;\n        vec3 ro = vec3(0.,1.,0.) + 2.*vec3(cos(alpha), 1., sin(alpha));\n        if(iMouse.z>0.)\n        \tro = vec3(0.,1.,0.) + 2.*vec3(cos(mo.x*PI*2.)*cos((1.-mo.y)*.5*PI), sin((1.-mo.y)*.5*PI), sin(mo.x*PI*2.)*cos((1.-mo.y)*.5*PI));\n        vec3 ta = vec3(0., 1., 0. );\n        // camera-to-world transformation\n        mat3 ca = setCamera( ro, ta, 0.0 );\n        // ray direction\n        vec3 rd = ca * normalize( vec3(p.xy,2.0) );\n        \n        rd = ca[2];\n        ro += 1.5*(ca[0]*p.x+ca[1]*p.y);\n\n        // render\t\n        vec3 col = render( ro, rd );\n\n\t\t// gamma\n        col = pow( col, vec3(0.4545) );\n\n        tot += col;\n#if AA>1\n    }\n    tot /= float(AA*AA);\n#endif\n\n    \n    fragColor = vec4( tot, 1.0 );\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\nstruct Segment\n{\n    vec3 A;\n    vec3 B;\n};\n\nfloat dist(Segment s, vec3 p)\n{\n\tvec3 pa = p-s.A, ba = s.B-s.A;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n}\n\n\nfloat dist(vec3 s, vec3 p)\n{\n\treturn length(p-s);\n}\n\n\n\n\n\nstruct Bezier4\n{\n    vec3 A;\n    vec3 B;\n    vec3 C;\n    vec3 D;\n};\n    \nvec3 getPt(Bezier4 c, float t)\n{\n    return mix(mix(mix(c.A, c.B, t), mix(c.B, c.C, t), t), mix(mix(c.B, c.C, t), mix(c.C, c.D, t), t), t);\n}\n    \nvec3 getDir(Bezier4 B, float t)\n{\n    return normalize(getPt(B, t+0.01)-getPt(B, t-0.01));\n}\n    \nvec3 getCur(Bezier4 B, float t)\n{\n    return normalize(getPt(B, t+0.01)-2.*getPt(B, t)+getPt(B, t-0.01));\n}\n\nfloat closest(Bezier4 BB, vec3 p)\n{\n    vec3 A = BB.A, B = BB.D;\n    \n    float ppt;\n    float At = .0;\n    float Bt = 1.;\n    \n    vec3 pp;\n    \n    float dis = dist(pp, p);\n    \n    for(int i=0; i<6; ++i)\n    {\n        ppt = (At+Bt)*.5;\n        pp = getPt(BB, ppt);\n        \n        if(dist(Segment(A, pp), p) < dist(Segment(pp, B), p))\n        {\n            Bt = ppt;\n        \tB = getPt(BB, Bt);\n        }\n        else\n        {\n            At = ppt;\n        \tA = getPt(BB, At);\n        }\n            \n    }\n    \n\tvec3 pa = p-A, ba = B-A;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return mix(At, Bt, h);\n}\n\n","name":"Common","description":"","type":"common"}]}