{"ver":"0.1","info":{"id":"Msc3Rr","date":"1447691221","viewed":295,"name":"pixelcam","username":"gvsyn","description":"reduced colour space pixelated nonsense","likes":3,"published":1,"flags":2,"usePreview":0,"tags":["cam"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"//shader toy version (set iChannel0 to webcam for lulz)\n\nvec2 pixel_size = vec2(6.0,12.0); // width,height\nfloat colour_count = 7.1; //ish, it roughly works\n\nvec2 pixelate (vec2 uv) {\n  vec2 d = pixel_size * (1.0/iResolution.xy);\n  vec2 coord = vec2(d.x*(floor(uv.x/d.x) + (ceil(uv.x/d.x) - floor(uv.x/d.x))/2.0),\n                    d.y*(floor(uv.y/d.y) + (ceil(uv.y/d.y) - floor(uv.y/d.y))/2.0));\n  return coord;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv.x -= 0.1;\n    \n    uv.x *= 1.2;\n    vec4 factor = vec4(colour_count);//100*(2*(abs(0.5-fract(fGlobalTime/200))));\n    if (uv.x < 0.1 || uv.x > 0.9) {\n        fragColor = vec4(0.0);\n    } else {\n        fragColor = floor(texture(iChannel0, pixelate(uv))*factor)/factor;\n    }\n}\n","name":"","description":"","type":"image"}]}