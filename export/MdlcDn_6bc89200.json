{"ver":"0.1","info":{"id":"MdlcDn","date":"1487769679","viewed":138,"name":"GRAPROG-MIDTERMS","username":"River01","description":"GRAPROG-MIDTERMS","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["graprogmidterms"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 red = vec3(1.0,.0,.0);\nvec3 yellow = vec3(1.0,1.0,0.);\nvec3 blue = vec3(0.0,0.0,1.0);\nvec3 white = vec3(1.0,1.0,1.0);\nvec3 orange = vec3(1.0,0.7,0.0);\nvec3 green = vec3(0.0,1.0,0.2);\nvec3 cyan = vec3(0.0,1.0,1.0);\nvec3 black = vec3(.0,.0,.0);\n#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n\n#define PATTERN 10\n\nfloat createPolygon(vec2 uv,float dist, float multi1)\n{\n    float angle = atan(uv.y, uv.x);\n    float radius = cos(multi1*angle);\n    \n    float value = 1.-step(radius, dist); \n    \n    return value;\n}\n\nfloat smoother(float value, float dist, float multi)\n{\n    float valuer = 1.-smoothstep(value,dist,multi);\n    return valuer;\n}\n\nfloat circle(vec2 uv, float radius, vec2 position)\n{\n    float value = step(distance(position,uv), radius);\n    return value;\n}\n\nfloat chemPattern(vec2 uv, float dist, float multi1, float multi2, float multi3)\n{\n    float angle = atan(uv.y,uv.x);\n    float radius = cos(1.1);\n    radius += sin(angle)*sin(angle)*sin(angle*multi3);\n    radius += floor(cos(angle*multi1)*sin(dist*multi2))*.1+1.2;\n    \n    return radius;\n}\n\nfloat chemPattern2(vec2 uv, float dist, float multi1, float multi2)\n{\n    float angle = atan(uv.y,uv.x);\n    float radius = cos(1.1);\n    radius += floor(cos(dist*multi1)*sin(angle*multi2))*.1+1.2;\n    \n    return radius;\n}\n\nfloat chemPattern3(vec2 uv, float dist, float multi1, float multi2, float multi3)\n{\n    float angle = atan(uv.y,uv.x);\n    float radius = cos(1.1);\n    radius += step(cos(dist*multi1)*sin(angle*multi2),multi3);\n    \n    return radius;\n}\n\nmat2 rotate2d(float angle)\n{\n  return mat2(cos(angle), - sin(angle), sin(angle), cos(angle));   \n}\n\nmat2 scale2d(vec2 value)\n{\n    return mat2(value.x, 0,0, value.y);\n}\n\n//simplistic\n#if PATTERN==1\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x/iResolution.y;\n    \n    uv *= 4.;\n    \n    vec2 tileIdx = floor(uv);\n    \n    uv.x *= ratio;\n    \n    float value;\n    vec2 shapePos = vec2(.5*ratio, .5);\n    float dist = distance(shapePos, uv)*1.;\n    float radius = chemPattern(uv, dist,134.,1.,1.);\n        \n    value = 1.-smoothstep(radius,0.4,1.0);\n    vec3 color = vec3(value);\n    \n\tfragColor = vec4(color,1.0);\n}\n\n//chaos\n#elif PATTERN == 2\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x/iResolution.y;\n    \n    uv *= 4.;\n    \n    vec2 tileIdx = floor(uv);\n    \n    uv.x *= ratio;\n    float value;\n    vec2 shapePos = vec2(2.*ratio, 2.);\n    \n    float dist = distance(shapePos,uv)*.3;\n    uv -= shapePos;\n    float angle = atan(uv.y,uv.x);\n    float radius = chemPattern(uv, dist,136.,77.,2.);\n    value = 1.-smoothstep(radius,dist,1.0); \n    \n    vec3 color = vec3(value);\n    \n\tfragColor = vec4(color,1.0);\n    \n    \n}\n\n//simplistic\n#elif PATTERN == 3\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x/iResolution.y;\n    \n    uv *= 4.;\n    \n    vec2 tileIdx = floor(uv);\n    \n    uv.x *= ratio;\n    float value;\n    vec2 shapePos = vec2(2.*ratio, 2.);\n    \n    float dist = distance(shapePos,uv)*.3;\n    uv -= shapePos;\n    \n    \n    float radius = chemPattern2(uv, dist,122.,50.);\n    value = 1.-smoothstep(radius,dist,1.01);\n    \n    vec3 color = vec3(value);\n    \n\tfragColor = vec4(color,1.0);\n    \n    \n}\n\n#elif PATTERN == 4\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x/iResolution.y;\n    \n    uv *= 4.;\n    \n     vec2 tileIdx = floor(uv);\n    \n    uv = fract(uv);\n    \n    \n    uv.x *= ratio;\n    float value;\n    vec2 shapePos = vec2(0.5*ratio, .5);\n    \n    float dist = distance(shapePos,uv)*.3;\n    uv -= shapePos;\n    \n    float radius = chemPattern(uv, dist,11.,15.,0.);\n    value = 1.-smoothstep(radius,dist,1.01);\n    \n    vec3 color = value*orange;\n    color += value*black;\n    \n    \n\tfragColor = vec4(color,1.0);\n}\n\n#elif PATTERN == 5\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x/iResolution.y;\n    \n    uv *= 4.;\n    \n    uv.x *= ratio;\n    \n    uv = fract(uv);\n\n    vec2 shapePos = vec2(.28*ratio, .5);\n    float dist = distance(shapePos, uv)*2.;\n    \n    uv -= shapePos;\n    \n    \n    \n    float value = createPolygon(uv, dist/6., 6.);\n    value = smoother(value,dist,1.02);\n    vec3 color = vec3(value);\n    \n\tfragColor = vec4(color,1.0);\n    \n    \n    \n    \n\tfragColor = vec4(color,1.0);\n}\n\n#elif PATTERN == 6\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x/iResolution.y;\n    \n    uv *= 4.;\n    \n    uv.x *= ratio;\n    \n    uv = fract(uv);\n\n    vec2 shapePos = vec2(.28*ratio, .5);\n    float dist = distance(shapePos, uv)*2.;\n    \n    uv -= shapePos;\n    float radius = chemPattern(uv, dist,10.,12.,0.);\n    float value = createPolygon(uv, dist/120., 10.);\n    value += 1.-smoothstep(radius,dist/14.,1.01);\n    value = smoother(value,dist,1.1);\n    \n    vec3 color = vec3(value);\n    \n\tfragColor = vec4(color,1.0);\n}\n\n#elif PATTERN == 7\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x/iResolution.y;\n    \n    uv *= 2.;\n    \n    uv.x *= ratio;\n    \n    //uv = fract(uv);\n\n    vec2 shapePos = vec2(2.*ratio, 2.);\n    float dist = distance(shapePos, uv)*2.;\n    \n    uv -= shapePos;\n    float value;\n    float radius = chemPattern3(uv, dist,10.,20.,0.1);\n    \n    \n    vec3 color = vec3(radius);\n    \n\tfragColor = vec4(color,1.0);\n}\n\n#elif PATTERN == 8\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x/iResolution.y;\n    \n    uv *= 2.;\n    \n     vec2 tileIdx = floor(uv);\n    \n    uv = fract(uv);\n    \n    \n    uv.x *= ratio;\n    float value;\n    vec2 shapePos = vec2(0.5*ratio, .5);\n    \n    float dist = distance(shapePos,uv)*.3;\n    uv -= shapePos;\n    \n    float radius = chemPattern(uv, dist,5.,0.1,0.0);\n    value = 1.-smoothstep(radius,dist,1.01);\n    \n    vec3 color = vec3(value);\n    \n    \n\tfragColor = vec4(color,1.0);\n}\n\n#elif PATTERN == 9\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x/iResolution.y;\n    \n    uv *= 1.;\n    \n     vec2 tileIdx = floor(uv);\n    \n    uv = fract(uv);\n    \n    \n    uv.x *= ratio;\n    float value;\n    vec2 shapePos = vec2(0.5*ratio, .5);\n    \n    float dist = distance(shapePos,uv)*.3;\n    uv -= shapePos;\n    \n    float radius = chemPattern3(uv, dist, 100., 1.,.1);\n    value = 1.-smoothstep(radius,dist,1.);\n    \n    vec3 color = vec3(value);\n    \n    \n\tfragColor = vec4(color,1.0);\n}\n\n#elif PATTERN == 10\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x/iResolution.y;\n    \n    uv *= 10.;\n    \n     vec2 tileIdx = floor(uv);\n    \n    uv = fract(uv);\n    \n    \n    uv.x *= ratio;\n    float value;\n    \n    value = circle(uv, 0.5, vec2(0.0*ratio,0.));\n    value += circle(uv, 0.5, vec2(1.*ratio,1.));\n    \n    vec3 color = vec3(value);\n    \n    \n\tfragColor = vec4(color,1.0);\n}\n#endif","name":"Image","description":"","type":"image"}]}