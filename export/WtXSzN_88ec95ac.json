{"ver":"0.1","info":{"id":"WtXSzN","date":"1562190413","viewed":269,"name":"Golden Spheres","username":"ParaBellum","description":"Playing around with normals","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","light","spheres"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3zn","filepath":"/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","previewfilepath":"/media/ap/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 gold = vec3(.9, .7, 0.);\n\nfloat sdCircle(vec2 p, float r)\n{\n    return length(p) - r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 frag = fragCoord.xy;\n    vec2 uv = frag/iResolution.xy * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n    float size = 6.;\n    uv *= size;\n    \n    vec2 i_uv = floor(uv);\n    if (mod(i_uv.x, 2.) != 0.)\n    \tuv.y += .5;\n    \n    vec2 f_uv = fract(uv) * 2. - 1.; \n    \n    // Light source as the mouse\n    vec2 ms = vec2(1.);\n    if (iMouse.z > 0.)\n    {\n        ms = (iMouse.xy/iResolution.xy) * 2. - 1.;\n        ms.x *= iResolution.x / iResolution.y;\n        ms *= size;\n    }\n    \n    float c = 1.-sdCircle(f_uv, .86);\n    float m = 1.-sdCircle(uv-ms, 1.); // Radial light\n    float sten = smoothstep(.9, .96, c);\n \n    vec3 fragPos = vec3(f_uv*2., c);\n    vec3 nor = normalize(fragPos);\n    \n    vec3 eye = vec3(0., 0., 6.6);\n    vec3 refEye = normalize(reflect(eye, nor));\n    \n    // Diffuse lightning model\n    vec3 lightPos = vec3(ms, size);\n    vec3 lightDir = normalize(lightPos - vec3(uv, 0.));\n    float al = c*.1;\n    float dl = max(dot(lightDir, nor), 0.)*.25;\n    vec3 eyeDir = normalize(eye - fragPos);\n    vec3 halfWayDir = normalize(lightDir + eyeDir);\n    float sl = pow(max(dot(halfWayDir,nor), 0.),64.);\n    float l = al + dl; // White light\n    \n    // Time varying pixel color\n    vec3 col = vec3(0.);\n    col += texture(iChannel0, refEye).rgb*sten*gold;\n    col += l*sten*gold;\n    col += sl*2.*sten;\n    col += vec3(0.1)*m; // Mouse light\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}