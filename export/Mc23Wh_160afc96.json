{"ver":"0.1","info":{"id":"Mc23Wh","date":"1704188412","viewed":284,"name":"cosmic light ","username":"nayk","description":"stars,colorful, galaxy, copypast","likes":9,"published":1,"flags":1,"usePreview":0,"tags":["colorful","galaxy","stars","copypast"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* https://www.shadertoy.com/view/4tyfWy https://www.shadertoy.com/view/lslyRn https://www.shadertoy.com/view/lfB3WR*/\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\n#define R iResolution.xy\n#define M cos(iTime)\n#define H(a) (cos(radians(vec3(0, 60, 120))+(a)*6.2832)*.5+.5)  // hue\n#define N(r) ((abs(r) > 1.) ? 1./(2.*sign(r)-(r)): r)  // range +/-2 to value on number line\nmat2 rotate2D(float r) {\n    return mat2(cos(r), sin(r), -sin(r), cos(r));\n}\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam;\n            p.xy*=rotate2D(iTime*.02);\n            // the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.2-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.033,1.);\t\n}\n\nfloat cheap_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,iTime*0.01);\n    \n\tfloat time=iTime*speed+.25;\nfloat s = 500., // scale\n          l = 70.,  // detail loop\n          wr = 2.5, // warp radius (frame scale)\n          t = 9. + pow(1. + iTime/60., 2.),\n          a = -sqrt(t*s*2.)*6.2832, // rotation\n          i = 0., f = i, n, r, w, h;\n     vec4 C =fragColor;\n     vec2 U = fragCoord;\n    vec2 m = (M-R/2.)/R.y*4.,\n         u = (U-R/2.)/R.y,\n         q, v;\n    vec4 col = vec4(0);\n    float t2 = iTime;\n    \n    for(float i,e,g,v,u; i++<60.; g+=e) {\n        vec3 p = vec3((.5*iResolution.xy-fragCoord.xy)/iResolution.y*g,g-7.+0.005);\n        p.xz *= rotate2D(t*.05);\n        p.xy*=rotate2D(t*.05);\n        p.yz*=rotate2D(t*.05);\n        e = v = 2.;\n        for(int j; j++<11; j>5\n            ?e=min(e,length(p.xz+length(p)/u*(0.01))/v),p.xz=abs(p.xz)-.5,p\n            :p=abs(p)-.35)v/=u=dot(p,p),p/=u,p.y=1.6-p.y;\n            col+=vec4(2,5,7,0)*.002/exp(p.y/pow(v, .8));\n    }\n\n    // Output to screen\n    fragColor = col;\n \n    vec3 c = H(length(u))/25.;\n    \n    n = N(clamp(-m.y, -1.8, 1.8)); // root from mouseY\n    u *= pow(s, n)*wr; // apply zoom\n    \n    r = exp(log(length(u))/n); // root radius\n    q = fwidth(u); // pixel size\n    w = R.y/6e2; // point size\n    for (; i++<l;) // cell overlap loop\n        h = max(0., round((r-i)/l))*l+i, // rounded radius\n        f = max(f, w/length((u-cos(6.2832*sqrt(t*h*2.)+a-vec2(0, 1.5708))*pow(h, n))/q));\n    c += min(f, 1.) * min(1., s/r);\n    \n    v = abs(fract(U/R+.5)-.5);    // vignette\n    c = min(c, min(v.x, v.y)*5.); // darken screen edges\n     uv *= 2.0 * ( cos(iTime * 2.0) -2.5);\n    \n    // anim between 0.9 - 1.1\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;    \n\n   \n\t\n\tvec3 from=vec3(1.,.5,0.5);\n\tfrom+=vec3(time*2.,time,-2.);\n\t\n\tmainVR(fragColor, fragCoord, from, dir);\t\n     fragColor*= vec4(col.xyz, 1);\n      fragColor+= vec4(cheap_star(uv,anim) * vec3(0.55,0.5,0.55)*0.1, 1.0);\n   \n}\n","name":"Image","description":"","type":"image"}]}