{"ver":"0.1","info":{"id":"mdfGWr","date":"1665948458","viewed":46,"name":"searching for L","username":"algroznykh","description":"fork of znah's\n\"Texture Generation with Ultra-Compact Neural Cellular Automata\" supplementary material\nNCA-588 rule generating letter L from georgian alphabet (trained with L2 loss)\nSee \"Buffer A\" for perception code and \"Buffer B\" for the update rule.\n\n","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["ca"],"hasliked":0,"parentid":"ftVfRW","parentname":"Fork Fork Fork  mnca 588"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float circle(vec2 p, float q) {\n    return length(p) - pow(q, 2.);\n    }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int W = int(iResolution.x) / 3;\n    vec2 p = fragCoord.yx;\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= iMouse.xy / iResolution.xy;\n \n    p /= 2.0;\n    p.x = mod(p.x, float(W));\n \n    fragColor = texture(iChannel0, p/iResolution.xy);//+0.5;\n    //fragColor = texture(iChannel1, fragCoord.xy/iResolution.xy)+0.5;\n\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Perception phase\n\nint W;\nint band;\nivec2 pos;\n\nvec4 R(int dx, int dy) {\n    vec2 p = vec2((pos.x+dx+W)%W+W*band, pos.y+dy);\n    return texture(iChannel0, (p+0.5)/iResolution.xy);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    W = int(iResolution.x) / 3;\n    pos = ivec2(fragCoord.xy);\n    band = pos.x / W;\n    pos.x %= W;\n    \n    vec4 prev = texture(iChannel1, fragCoord/iResolution.xy);\n    \n    if (band == 2) {\n        fragColor = R(-1, 1)+R(-1, 0)*2.0+R(-1,-1)\n                   -R( 1, 1)-R( 1, 0)*2.0-R( 1,-1);\n    } else if (band == 1) {\n        fragColor = R( 1, 1)+R( 0, 1)*2.0+R(-1, 1)\n                   -R( 1,-1)-R( 0,-1)*2.0-R(-1,-1);\n    } else {\n        fragColor = R(1,1)+R(1,-1)+R(-1,1)+R(-1,-1)\n              +2.0*(R(0,1)+R(0,-1)+R(1,0)+R(-1,0))-12.0*R(0, 0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"   vec4 update(float band, vec4 y[6]) {\n    #define M mat4\n    #define F(i,_a,_b) {M a=_a,b=_b; vec4 yi=y[i]; dx+=G(0)+G(1)+G(2)+G(3);}\n    //#define G(i) yi[i]*((yi[i]>0.0)?a[i]:b[i])\n    #define G(i) (yi[i]*a[i]+abs(yi[i])*b[i])\n    vec4 dx;\n  if (band == 0.) { dx = vec4(11,11,9,-12);\n    F(0, M(-13,-6,-1,-6,-8,-13,-1,-6,-12,-12,-24,-5,5,5,2,-26), M(6,10,16,18,12,6,17,20,4,5,-3,14,-8,-8,-9,-5));\n    F(1, M(0,0,0,6,-3,-3,-3,11,7,6,4,-4,-3,-3,-5,-7), M(-7,-7,-6,-1,4,4,2,5,-13,-13,-12,9,7,7,6,-9));\n    F(2, M(0,0,0,2,4,4,6,-3,-3,-2,2,-7,3,3,5,11), M(0,0,2,-10,-8,-8,-4,0,-9,-9,-8,0,-6,-7,-8,-1));\n    F(3, M(9,3,3,4,3,8,3,5,-7,-6,2,-2,-16,-16,-14,11), M(-2,-2,-4,-2,1,0,0,-1,2,3,3,6,-12,-12,-11,10));\n    F(4, M(-2,-2,-1,1,5,5,5,1,-8,-8,-6,3,8,8,7,-3), M(21,20,15,-10,-4,-4,-4,2,-3,-3,-1,5,2,2,1,-8));\n    F(5, M(6,6,4,0,-4,-4,-4,-2,2,2,1,2,-1,-1,-2,2), M(6,7,6,-1,-4,-4,-3,-4,11,11,9,-4,-8,-8,-8,2));\n  } else if (band == 1.) { dx = vec4(-2,-7,-7,3);\n    F(0, M(0,-1,-4,-2,3,-2,-2,-2,4,1,-4,0,-9,-2,13,9), M(-7,9,5,-8,-7,9,4,-9,-3,9,0,-6,-6,13,6,-4));\n    F(1, M(-22,8,-2,-7,-4,-39,10,-7,-5,-2,-30,9,-3,-3,-5,-43), M(-57,-1,15,-3,13,-13,4,-5,-10,15,-15,14,-12,0,3,-14));\n    F(2, M(3,2,-1,8,10,-6,-6,-6,6,3,3,-2,8,-16,15,5), M(36,-4,4,-4,16,-13,3,6,0,-7,7,-6,-2,-3,0,-10));\n    F(3, M(4,-1,1,-1,0,0,0,2,10,-7,3,2,-2,5,-2,7), M(2,-1,1,6,-1,-1,-2,4,6,0,4,1,0,6,-4,13));\n    F(4, M(-5,14,8,9,14,-12,6,4,-1,7,1,0,16,1,-1,15), M(13,-1,4,1,2,-4,-1,-1,7,2,7,8,-2,9,1,1));\n    F(5, M(14,-8,2,9,-7,6,-2,0,5,-3,3,0,0,-6,4,3), M(5,1,8,5,3,5,-5,3,8,-5,9,1,-2,9,-1,4));\n  } else { dx = vec4(-4,0,0,-1);\n    F(0, M(-2,-9,-1,-15,-2,-6,0,-12,-2,-9,-5,-15,8,-1,0,14), M(-6,-1,-11,-16,-7,1,-9,-15,-6,-4,-12,-17,-2,3,-7,4));\n    F(1, M(-29,-24,6,-10,16,0,1,6,-5,8,-5,4,-13,14,6,1), M(31,2,-16,-2,7,3,9,-1,-12,2,0,3,3,3,1,-9));\n    F(2, M(-45,-1,-13,-2,12,-39,5,-5,-3,2,-44,-11,-2,10,0,-28), M(-11,9,-12,3,11,-6,-6,8,5,12,-12,-1,0,6,-2,13));\n    F(3, M(0,-1,4,0,-1,-2,2,0,-3,-7,-5,-11,5,-5,-7,6), M(0,2,3,5,1,0,4,3,5,3,2,6,1,4,3,10));\n    F(4, M(8,-2,6,-3,-1,1,5,5,0,-3,-10,-6,-4,0,12,11), M(-5,6,24,10,5,3,-1,1,4,0,-1,-3,5,1,11,4));\n    F(5, M(0,7,11,13,1,12,-5,1,4,-1,15,2,16,3,7,12), M(1,-1,9,-3,4,2,1,3,-1,2,4,-4,6,-9,1,9));\n  }\n    #undef M\n    #undef F\n    #undef G\n    return dx/500.0;\n  }\n\nvec4 hash43(vec3 p)\n{\n\tvec4 p4 = fract(vec4(p.xyzx)  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\n\nfloat circle(vec2 p, float q) {\n    return length(p) - pow(q, 2.);\n    }\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float W = floor(iResolution.x / 3.);\n    vec2 pos = fragCoord.xy;\n    pos.x = mod(pos.x, W);\n    float band = floor(fragCoord.x / W);\n    \n    if(iFrame==0) {\n      //fragColor = hash43(vec3(fragCoord, iFrame))-0.5;\n      \n      vec2 uv = (fragCoord.xy / iResolution.xy - .5) * 2.;\n      fragColor = length(uv) < .01 ? vec4(1.) : vec4(0.);\n\n      return;\n    }\n    \n    vec4 y[6];\n    for (int i=0; i<3; ++i) {\n      vec2 p = vec2(pos.x+W*float(i), pos.y)/iResolution.xy;\n      y[i] = texture(iChannel1, p);\n      y[3+i] = texture(iChannel0, p);\n      \n    }\n    vec4 x = (band==0.) ? y[0] : ((band==1.) ? y[1] : y[2]);\n    vec4 dx = update(band, y);\n\n    //vec4 mask = floor(hash43(vec3(fragCoord, iFrame)) + 0.5);\n    fragColor = clamp(x + dx, -1.5, 1.5);//*mask;\n    //fragColor = x + dx;\n    \n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= iMouse.yx / iResolution.xy;\n    float mask = circle(uv * vec2(2., 1.), .1) > 0. ? 1.: 0.;\n    //fragColor = mask < .5 ? hash43(vec3(fragCoord, iFrame))-0.5 * vec4(0., 1., 0., 1.) : fragColor;\n\n}","name":"Buffer B","description":"","type":"buffer"}]}