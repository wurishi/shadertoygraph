{"ver":"0.1","info":{"id":"dscSRj","date":"1680512465","viewed":157,"name":"WeeklyShadr 4 : Kuwahara-Moebius","username":"LoganOracio","description":"click once\nFull screen is better","likes":14,"published":1,"flags":32,"usePreview":0,"tags":["moebius","kuwaraha"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 O, in vec2 C )\n{\n    \n    vec2 uv = C/iResolution.xy;\n    vec2 ir = 1.0/iResolution.xy;\n    \n    vec3 col = texture(iChannel0,uv).xyz;\n    vec3 c2 = col*-12.0;\n    c2+=texture(iChannel0,uv+vec2(1.0,0.0)*ir).xyz;\n    c2+=texture(iChannel0,uv+vec2(-1.0,0.0)*ir).xyz;\n    c2+=texture(iChannel0,uv+vec2(0.0,1.0)*ir).xyz;\n    c2+=texture(iChannel0,uv+vec2(0.0,-1.0)*ir).xyz;\n    c2+=texture(iChannel0,uv+vec2(2.0,0.0)*ir).xyz;\n    c2+=texture(iChannel0,uv+vec2(-2.0,0.0)*ir).xyz;\n    c2+=texture(iChannel0,uv+vec2(0.0,2.0)*ir).xyz;\n    c2+=texture(iChannel0,uv+vec2(0.0,-2.0)*ir).xyz;\n    c2+=texture(iChannel0,uv+vec2(4.0,0.0)*ir).xyz;\n    c2+=texture(iChannel0,uv+vec2(-4.0,0.0)*ir).xyz;\n    c2+=texture(iChannel0,uv+vec2(0.0,4.0)*ir).xyz;\n    c2+=texture(iChannel0,uv+vec2(0.0,-4.0)*ir).xyz;\n    \n    vec3 tint = ramp(vec3(0.949,0.533,0.761),vec3(0.231,0.604,0.749),vec3(0.949,0.816,0.741),0.5,luma(col));\n    col = mix(tint*col,tint,0.8);\n    \n    O = vec4(col,1.0);\n    O= mix(vec4(vec3(0.531,0.504,0.749)*.3,1.0),O,smoothstep(0.3,0.1,luma(clamp(c2,vec3(0.0),vec3(1.0)))));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 O, in vec2 C )\n{\n    vec2 uv = (C*2.0-iResolution.xy)/iResolution.y;\n    vec2 rt = vec2(cos(iMouse.y/iResolution.y*3.1),sin(iMouse.y/iResolution.y*3.1));\n    if(iMouse.xy==vec2(0.0))\n    {\n        rt = vec2(sin(iTime*0.5)*0.02,0.1);\n    }\n    vec3 ro = vec3((cos(iTime/4.0+iMouse.x/iResolution.x*7.0)*rt.y)*12.0, rt.x*12.0, (sin(iTime/4.0+iMouse.x/iResolution.x*7.0)*rt.y)*12.0);\n    vec3 la = vec3(0.0, 0.0, 0.0);\n    vec3 ww = normalize(la-ro);\n    vec3 uu = normalize(cross(vec3(0.0,1.0,0.0), ww ));\n    vec3 vv = cross(ww,uu);\n    const float fov = 1.4;\n    vec3 rd = normalize(-uv.x*uu + uv.y*vv + fov*ww );\n    vec3 col = texture(iChannel0,rd).xyz;\n    O = vec4(rgb2hsv(clamp(col,vec3(0.0),vec3(1.0))),1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define KU 5\n\nfloat luma(vec3 c)\n{\n    return c.r * 0.299 + c.g * 0.587 + c.b * 0.114;\n}\n//Source: https://gist.github.com/yiwenl/745bfea7f04c456e0101\nvec3 rgb2hsv(vec3 c) {\n\tfloat cMax=max(max(c.r,c.g),c.b),\n\t      cMin=min(min(c.r,c.g),c.b),\n\t      delta=cMax-cMin;\n\tvec3 hsv=vec3(0.,0.,cMax);\n\tif(cMax>cMin){\n\t\thsv.y=delta/cMax;\n\t\tif(c.r==cMax){\n\t\t\thsv.x=(c.g-c.b)/delta;\n\t\t}else if(c.g==cMax){\n\t\t\thsv.x=2.+(c.b-c.r)/delta;\n\t\t}else{\n\t\t\thsv.x=4.+(c.r-c.g)/delta;\n\t\t}\n\t\thsv.x=fract(hsv.x/6.);\n\t}\n\treturn hsv;\n}\n//Sources: https://gist.github.com/yiwenl/745bfea7f04c456e0101, https://gist.github.com/sugi-cho/6a01cae436acddd72bdf\nvec3 hsv2rgb(vec3 c){\n\tvec4 K=vec4(1.,2./3.,1./3.,3.);\n\treturn c.z*mix(K.xxx,clamp(abs(fract(c.x+K.xyz)*6.-K.w)-K.x,0.0,1.0),c.y);\n}\n\n// https://www.shadertoy.com/view/ttB3Rh\nvec3 ramp(vec3 a, vec3 b, vec3 c, float h, float s)\n{\n    return mix(mix(a, b, s/h), mix(b, c, (s - h)/(1.0 - h)), step(h, s));\n}\n\n#define BLUR 10.0\nconst float PI = 3.141592653589793238462;\nconst float inv_sqrt_2pi = 0.3989422804014327;\nfloat gaussianf(float sigma, float dist)\n{\n    float a = dist / sigma;\n    return (inv_sqrt_2pi / sigma ) * exp( -0.5 * a * a );\n}\n\nvec4 fast_gaussian_blur(sampler2D image, vec2 uv,vec2 resolution, vec2 direction, float blur)\n{\n    vec4 color = vec4(0.0);\n    float coef = gaussianf(blur,0.0);\n    color += texture(image, uv) * coef;\n    float kernel_s = blur * 4.0;\n    //removed precomputing weights by oneshade\n    float prev = gaussianf(blur, 0.0);\n    for (float i = 0.0; i < kernel_s; i++) {\n        float w1 = prev; \n        float w2 = gaussianf(blur, i + 1.0);\n        prev = w2; //storing redudant weight for next loop\n        float c = w1 + w2;\n        vec2 off1 = vec2((i * w1 + (i + 1.0) * w2) / c) * direction / resolution;\n        color += texture(image, uv - off1 ) * c;\n        coef += c;\n    }\n\n    return color/coef;\n}\n\nuint murmurHash12(uvec2 src) {\n    const uint M = 0x5bd1e995u;\n    uint h = 1190494759u;\n    src *= M; src ^= src>>24u; src *= M;\n    h *= M; h ^= src.x; h *= M; h ^= src.y;\n    h ^= h>>13u; h *= M; h ^= h>>15u;\n    return h;\n}\nfloat hash12(vec2 src) {\n    uint h = murmurHash12(floatBitsToUint(src));\n    return uintBitsToFloat(h & 0x007fffffu | 0x3f800000u) - 1.0;\n}\nuvec3 murmurHash33(uvec3 src) {\n    const uint M = 0x5bd1e995u;\n    uvec3 h = uvec3(1190494759u, 2147483647u, 3559788179u);\n    src *= M; src ^= src>>24u; src *= M;\n    h *= M; h ^= src.x; h *= M; h ^= src.y; h *= M; h ^= src.z;\n    h ^= h>>13u; h *= M; h ^= h>>15u;\n    return h;\n}\nvec3 hash33(vec3 src) {\n    uvec3 h = murmurHash33(floatBitsToUint(src));\n    return uintBitsToFloat(h & 0x007fffffu | 0x3f800000u) - 1.0;\n}\nfloat lerp(float x, float y, float v)\n{\n    if(v<=0.0) return x;\n    else if(v>=1.0) return y;\n    else\n    { \n        return (y - x) * (((v * 6.0 - 15.0) * v + 10.0) * v * v * v) + x;\n    }\n}\nvec2 random_gradient(vec2 uv)\n{\n    float angle = hash12(uv)*2.0*3.14159265358979;\n    return vec2(cos(angle),sin(angle));\n}\nfloat dot_gradient(vec2 i, vec2 uv)\n{\n    vec2 d = uv - i;\n    vec2 grad = random_gradient(vec2(i.x,i.y));\n    return d.x*grad.x + d.y*grad.y;\n}\nfloat pnoise(vec2 uv)\n{\n    vec2 fr = fract(uv);\n    vec2 fl = floor(uv);\n    \n    float n0 = dot_gradient(fl,uv);\n    float n1 = dot_gradient(fl+vec2(1.0,0.0),uv);\n    float o0 = lerp(n0,n1,uv.x-fl.x);\n    \n    n0 = dot_gradient(fl+vec2(0.0,1.0),uv);\n    n1 = dot_gradient(fl+vec2(1.0,1.0),uv);\n    float o1 = lerp(n0,n1,uv.x-fl.x);\n    \n    return lerp(o0,o1,uv.y-fl.y);\n}\nmat2 rotate(float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\treturn mat2(c, -s, s, c);\n}\nvec3 pnoise3(vec2 uv)\n{\n    return vec3(pnoise(uv+479.156),pnoise(uv),pnoise(uv-732.156));\n}\n\nvec2 cell_uv(vec3 pp, float jitter, float rotation, vec2 scale, vec3 offset, float stochastic_factor, float voronoi_deformation, float voronoi_deformation_scale) {\n    vec3 thiscell = floor(pp) + 0.5;\n    float dist2nearest = 100000.;\n    vec3 coordinates_nearest = thiscell + hash33(thiscell)* jitter*vec3(1.,1.,0.)  - 0.5;\n    \n    vec3 last_r = hash33(pp);\n    int i,j,k;\n    for(i = -1; i <= 1; i += 1)\n       for(j = -1; j <= 1; j += 1)\n            for(k = -1; k <= 1; k += 1) {\n              vec3 testcell = thiscell + vec3(i,j,k);\n              vec3 rand = hash33(testcell);\n              vec3 ppp = testcell + (rand * jitter)*vec3(1.,1.,1.) - 0.5;\n              float dist = distance(pp+pnoise3(pp.xy*voronoi_deformation_scale)*voronoi_deformation, ppp);\n\n              last_r = hash33(last_r);\n              if(dist/(dist+dist2nearest) < (last_r.x-.5)*stochastic_factor+.5)\n                {\n                 dist2nearest = distance(pp, ppp);\n                 coordinates_nearest = ppp;\n                 }\n              }\n    vec3 r = pnoise3(coordinates_nearest.xy);\n    vec2 pos = (scale*r.y+1.)*((coordinates_nearest-pp).xy*rotate(6.28318530718*rotation*r.x));\n    r = offset*pnoise3(coordinates_nearest.xy+vec2(100.0));\n    return vec2(pos.x+r.x,pos.y+r.y);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//KUWAHARA FILTER\nfloat SD(vec3 v[KU*KU])\n{\n    float m = 0.0;\n    for(int i=0;i<KU*KU;i++)\n    {\n        m+=v[i].z;\n    }\n    m/=float(KU*KU);\n    float dv[KU*KU];\n    for(int i=0;i<KU*KU;i++)\n    {\n        dv[i]=v[i].z/m;\n        dv[i]*=dv[i];\n    }\n    m=0.0;\n    for(int i=0;i<KU*KU;i++)\n    {\n        m+=dv[i];\n    }\n    return sqrt(m/float(KU*KU-1));\n}\nvoid mainImage(out vec4 O, in vec2 C )\n{\n    vec2 uv = C/iResolution.xy;\n    vec2 ir = 1.0/iResolution.xy;\n    vec3 a[4];\n    float sd[4];\n    int t=0;\n    for(int i=-1;i<3;i+=2)\n    {\n        for(int j=-1;j<3;j+=2)\n        {\n            vec3 val[KU*KU];\n            for(int pi=1;pi<=KU;pi++)\n            {\n                for(int pj=1;pj<=KU;pj++)\n                {\n                    val[pi*KU+pj]=texture(iChannel0,uv+vec2(pi*i,pj*j)*ir).xyz;\n                    a[t]+=val[pi*KU+pj];\n                }\n            }\n            sd[t]=SD(val);\n            a[t]/=float(KU*KU);\n            t++;\n        }\n    }\n    vec3 col = a[0];\n    float msd = min(min(sd[0],sd[1]),min(sd[2],sd[3]));\n    if(sd[1]==msd){col=a[1];}\n    else if(sd[2]==msd){col=a[2];}\n    else if(sd[3]==msd){col=a[3];}\n    O = vec4(hsv2rgb(col),1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage(out vec4 O, in vec2 C )\n{\n    \n    vec2 uv = C/iResolution.xy;\n    vec2 ir = 1.0/iResolution.xy;\n    \n    vec3 col = texture(iChannel0,uv).xyz;\n    vec3 c2 = col*-4.0;\n    c2+=texture(iChannel0,uv+vec2(1.0,0.0)*ir).xyz;\n    c2+=texture(iChannel0,uv+vec2(-1.0,0.0)*ir).xyz;\n    c2+=texture(iChannel0,uv+vec2(0.0,1.0)*ir).xyz;\n    c2+=texture(iChannel0,uv+vec2(0.0,-1.0)*ir).xyz;\n    O = vec4(luma(abs(c2)));\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"void mainImage(out vec4 O, in vec2 C )\n{\n    \n    vec2 uv = C/iResolution.xy;\n    vec2 ir = 1.0/iResolution.xy;\n    \n    O = fast_gaussian_blur(iChannel0,uv,iResolution.xy,vec2(0.0,1.0),BLUR);\n}","name":"Buffer D","description":"","type":"buffer"}]}