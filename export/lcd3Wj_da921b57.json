{"ver":"0.1","info":{"id":"lcd3Wj","date":"1712157964","viewed":54,"name":"Triangles_in_moving ","username":"nner0","description":"BF","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["hw"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define myPi 3.141592654f\n#define Eps 1e-6\n#define MaxZ 100.0\n\nconst int n = 3; // число фигур\nvec3 BGColor = vec3(0.0, 0.0, 0.0); // цвет фона\nvec3 colAr[n] = vec3[n](vec3(0.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 0.0)); // цвета фигур\n\nfloat zAr[n] = float[n](3.0, 2.0, 1.0); // координата z фигур\n\nint inds[n+1] = int[n+1](0, 3, 6, 9); // массив индексов\nconst int m = 9; // число вершин\nvec2 poly[m]; // массив координат вершин\n\nvoid initPoly(out vec2 poly[m], in float time) {\n   // 1-ый треугольник(статичный)\n   poly[0] = vec2(0.4, 0.4);\n   poly[1] = vec2(0.65, 0.5);\n   poly[2] = vec2(0.6, 0.8);\n   // 2-ой треугольник(подвижный)\n   poly[3] = vec2(0.2*cos(iTime) + 0.1, 0.2*sin(iTime) + 0.8);\n   poly[4] = vec2(0.2*cos(iTime) + 0.3, 0.2*sin(iTime) + 0.6);\n   poly[5] = vec2(0.2*cos(iTime) + 0.25, 0.2*sin(iTime) + 0.5);\n   // 3-ий треугольник(подвижный)\n   poly[6] = vec2(0.2*sin(iTime) + 0.3, 0.2*cos(iTime) + 0.1);\n   poly[7] = vec2(0.2*sin(iTime) + 0.4, 0.2*cos(iTime) + 0.5);\n   poly[8] = vec2(0.2*sin(iTime) + 0.2, 0.2*cos(iTime) + 0.3);\n\n}\n\nbool inPoly(in vec2 p, in int num) {\n    bool inside = false;\n    int startIndex = inds[num]; \n    int endIndex = (num < inds.length() - 1) ? inds[num + 1] : poly.length(); \n\n    for (int i = startIndex, j = endIndex - 1; i < endIndex; j = i++) {\n        vec2 pi = poly[i], pj = poly[j];\n        if((pi.y > p.y) != (pj.y > p.y) &&\n            p.x < (pj.x - pi.x) * (p.y - pi.y) / (pj.y - pi.y) + pi.x) {\n            inside = !inside;\n        }\n    }\n    return inside;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n   vec2 tmp = fragCoord/iResolution.xy;\n   initPoly(poly, iTime);\n   vec3 col = BGColor;\n   float closestZ = MaxZ;\n   for(int i = 0; i<n; i++) {\n      if(inPoly(tmp, i) && zAr[i] < closestZ) {\n         closestZ = zAr[i];\n         col = colAr[i];\n      }\n   }\n   fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}