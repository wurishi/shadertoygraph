{"ver":"0.1","info":{"id":"tsX3RN","date":"1545150624","viewed":1513,"name":"TV / VHS noise static","username":"arananderson","description":"TV / VHS noise / scanlines / static.","likes":18,"published":1,"flags":0,"usePreview":0,"tags":["noise","screen","scanlines","filter","tv","effect","static","vhs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float maxStrength = 0.5;\nfloat minStrength = 0.125;\n\nfloat speed = 10.00;\n\nfloat random (vec2 noise)\n{\n    //--- Noise: Low Static (X axis) ---\n    //return fract(sin(dot(noise.yx,vec2(0.000128,0.233)))*804818480.159265359);\n    \n    //--- Noise: Low Static (Y axis) ---\n    //return fract(sin(dot(noise.xy,vec2(0.000128,0.233)))*804818480.159265359);\n    \n  \t//--- Noise: Low Static Scanlines (X axis) ---\n    //return fract(sin(dot(noise.xy,vec2(98.233,0.0001)))*925895933.14159265359);\n    \n   \t//--- Noise: Low Static Scanlines (Y axis) ---\n    //return fract(sin(dot(noise.xy,vec2(0.0001,98.233)))*925895933.14159265359);\n    \n    //--- Noise: High Static Scanlines (X axis) ---\n    //return fract(sin(dot(noise.xy,vec2(0.0001,98.233)))*12073103.285);\n    \n    //--- Noise: High Static Scanlines (Y axis) ---\n    //return fract(sin(dot(noise.xy,vec2(98.233,0.0001)))*12073103.285);\n    \n    //--- Noise: Full Static ---\n    return fract(sin(dot(noise.xy,vec2(10.998,98.233)))*12433.14159265359);\n}\n\n/*\nfloat random_colour (float noise)\n{\n    return fract(sin(noise));   \n}\n*/\n\nvoid mainImage(out vec4 fragColour, in vec2 fragCoord)\n{\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 uv2 = fract(fragCoord.xy/iResolution.xy*fract(sin(iTime*speed)));\n    \n    //--- Strength animate ---\n    maxStrength = clamp(sin(iTime/2.0),minStrength,maxStrength);\n    //-----------------------\n    \n    //--- Black and white ---\n    vec3 colour = vec3(random(uv2.xy))*maxStrength;\n    //-----------------------\n        \n    /*\n    //--- Colour ---\n    colour.r *= random_colour(sin(iTime*speed));\n    colour.g *= random_colour(cos(iTime*speed));\n    colour.b *= random_colour(tan(iTime*speed));\n    //--------------\n    */\n    \n    //--- Background ---\n    vec3 background = vec3(texture(iChannel0, uv));\n    //--------------\n    \n    fragColour = vec4(background-colour,1.0);\n}","name":"Image","description":"","type":"image"}]}