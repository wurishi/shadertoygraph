{"ver":"0.1","info":{"id":"4dsyWn","date":"1487821167","viewed":103,"name":"MidTerms Graprog","username":"paulojiao","description":"unfinished","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["proc"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n#define TUTORIAL 2\n\nfloat createCircle(float rad, float dist);\nfloat createRectangle(vec2 size,vec2 pos, vec2 uv);\nfloat createTriangle(float locationX, float locationY,vec2 uv, float ratio,float angleToAdd, float smoothStepX, float smoothStepY, float smoothStepScale,float globalTime);\nfloat createStar(float locationX, float locationY,vec2 uv, float ratio,float angleToAdd, float smoothStepX, float smoothStepY, float smoothStepScale,float triangleScale,float globalTime) ;\nfloat createDiamond(float locationX, float locationY,vec2 uv, float ratio,float angleToAdd, float smoothStepX, float smoothStepY,float globalTime) ;\nfloat createPoly(float locationX, float locationY, int corners, vec2 uv, float ratio,float angleToAdd);\nmat2 rotate2d (float angle)\n{\nreturn mat2(cos(angle),-sin(angle),sin(angle),cos(angle));\n}\nmat2 scale2d (vec2 value){\nreturn mat2(value.x,0,0,value.y);\n}\n\n\n#if TUTORIAL == 1\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float scale = 7.;\n    uv *=scale;\n    vec2 tileIdx = floor(uv);\n    \n  \n    float offset = step(1.,mod(uv.x, 2.));\n   \tuv.y -= offset* iTime;\n\n    offset = step(1.,mod(-uv.x, 9.));\n    uv.y -= offset* iTime;\n    \n    uv = fract(uv);\n    \n    \n    float ratio = iResolution.x/iResolution.y;\n    uv.x *= ratio;\n    \n\tfloat rect = createRectangle(vec2(0.18,0.6),vec2(0.8,0.0), uv);\n    float triangle = createTriangle(.5,.6,uv,ratio,0.0,.4,.41,2.0,0.0);\n    float triangle2 = createTriangle(.5,.40,uv,ratio,0.0,.4,.41,2.0,0.0);\n    \n    \n    vec3 color = vec3(rect) * vec3(0,1,sin(iTime));\n    //color += vec3(triangle2) * vec3(1.0,vec2(sin(iTime)));\n    color += vec3(triangle2);\n    \n    if (triangle2 >0.)\n        color = vec3(sin(iTime),1,0);\n    \n    color += vec3(triangle) * vec3(0,1,0);\n      if (triangle >0.)\n        color = vec3(sin(iTime),1,0);\n\n\n    \n        \n    fragColor = vec4(color,1.0);\n}\n\n#elif TUTORIAL == 2\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x/iResolution.y;\n    float scale = 4.0;\n    uv *= scale;\n    \n    float offset = step(1.,mod(uv.x, 2.));\n   \tuv.y -= offset* iTime;\n    \n    offset = step(1.,mod(-uv.x, 2.));\n   \tuv.y += offset* iTime;\n    \n    \n    uv = fract(uv);\n    \n    \n    uv.x *= ratio;\n    float radius = 0.14;\n     \n    float angle = atan(uv.y, uv.x);\n    angle += iTime;  \n    \n    vec2 tileIdx = floor(uv);\n      \n    float star = createStar(.5,.7,uv,ratio,0.0,.4,.41,5.0 - (sin(iTime)),15.0 + (sin(iTime) - 4.0),iTime );\n    float circle = createCircle(radius * (sin(iTime)+1.5), distance(vec2(0.5*ratio,0.7), uv));\n    float star2 = createStar(.8,.3,uv,ratio,0.0,.4,.41,5.0 - (sin(iTime)),15.0 + (sin(iTime) - 4.0),iTime);\n    float circle2 = createCircle(radius * (sin(iTime)+1.5), distance(vec2(0.8*ratio,0.3), uv));\n    float star3 = createStar(.2,.3,uv,ratio,0.0,.4,.41,5.0 - (sin(iTime)),15.0 + (sin(iTime) - 4.0),iTime);\n    float circle3 = createCircle(radius * (sin(iTime)+1.5), distance(vec2(0.2*ratio,0.3), uv));\n    \n    vec3 color = vec3(circle) * vec3(cos(iTime) + 1.0,0,0);\n    \n    if (star >0.)\n    color = vec3(0,1,0);    \n    \n    if (circle2 >0.)\n    color = vec3(0,0,1);    \n    fragColor = vec4(vec3(color),1.0);\n    \n    if (star2 >0.)\n    color = vec3(1,1,0);    \n    fragColor = vec4(vec3(color),1.0);\n    \n    if (circle3 >0.)\n    color = vec3(0,1,0);    \n    fragColor = vec4(vec3(color),1.0);\n    \n    if (star3 >0.)\n    color = vec3(1,0,0);    \n    fragColor = vec4(vec3(color),1.0);\n        \n}\n\n#elif TUTORIAL == 3\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x/iResolution.y;\n    float scale = 6.0;\n    uv *= scale;\n    \n    float offset = step(1.,mod(uv.y, 2.));\n   \tuv.x -= offset* iTime;\n    \n    offset = step(1.,mod(-uv.y, 2.));\n   \tuv.x += offset* iTime;\n    \n    \n    uv = fract(uv);\n    \n    \n    uv.x *= ratio;\n    float radius = 0.14; \n    \n    //vec2 startingPos = vec2(0.5*ratio,0.5);\n   // float dist = \n    \n\n    \n    vec2 tileIdx = floor(uv);\n    \n  \n    float hex = createPoly(.5,.5,6,uv,ratio,0.5);\n    float hexa = 1. - smoothstep(.4,.41, hex * 3.0);   \n    \n    float hex2 = createPoly(.67,.5,6,uv,ratio,0.5);\n    float hexa2 = 1. - smoothstep(.4,.41, hex2 * 3.0);   \n    \n    float hex3 = createPoly(.33,.5,6,uv,ratio,0.5);\n    float hexa3 = 1. - smoothstep(.4,.41, hex3 * 3.0); \n\n    float hex4 = createPoly(.16,.5,6,uv,ratio,0.5);\n    float hexa4 = 1. - smoothstep(.4,.41, hex4 * 3.0); \n    \n    float hex5 = createPoly(.84,.5,6,uv,ratio,0.5);\n    float hexa5 = 1. - smoothstep(.4,.41, hex5 * 3.0); \n    \n    float hex6 = createPoly(1.01,.5,6,uv,ratio,0.5);\n    float hexa6 = 1. - smoothstep(.4,.41, hex6 * 3.0); \n    \n    float hex7 = createPoly(0.0,.5,6,uv,ratio,0.5);\n    float hexa7 = 1. - smoothstep(.4,.41, hex7 * 3.0); \n    \n    float rect = createRectangle(vec2(1.8,1.0),vec2(0.0,0.0), uv);\n    vec3 color = vec3(rect) * vec3(.5,.5,.5);\n    \n    if (hexa >0.)\n    color = vec3(1,1,0);    \n    fragColor = vec4(vec3(color),1.0);\n    \n    if (hexa2 >0.)\n    color =  vec3(0,1,0);   \n    fragColor = vec4(vec3(color),1.0);\n    \n        if (hexa3 >0.)\n    color = vec3(0,0,1);  \n    fragColor = vec4(vec3(color),1.0);\n    \n        if (hexa4 >0.)\n    color = vec3(1,1,0);    \n    fragColor = vec4(vec3(color),1.0);\n    \n        if (hexa5 >0.)\n    color = vec3(1,0,1);    \n    fragColor = vec4(vec3(color),1.0);\n    \n        if (hexa6 >0.)\n    color = vec3(1,0,0);    \n    fragColor = vec4(vec3(color),1.0);\n    \n        if (hexa7 >0.)\n    color = vec3(1,0,0);    \n    fragColor = vec4(vec3(color),1.0);                              \n                                    \n    fragColor = vec4(vec3(color),1.0);\n        \n}\n\n\n\n\n#endif\n\nfloat createCircle(float rad, float dist){\n  float val = 1.0 - step(rad,dist);\n  //vec3 color = vec3(1.0);\n  //color = val * col;\n  return val;  \n  \n}\n\nfloat createRectangle(vec2 size,vec2 pos, vec2 uv){\n   float value = step(pos.x,uv.x) - step(pos.x+size.x,uv.x);\n   value *= step(pos.y,uv.y) - step(pos.y+size.y,uv.y);\n   return value;\n}\n\nfloat createStar(float locationX, float locationY,vec2 uv, float ratio,float angleToAdd, float smoothStepX, float smoothStepY, float smoothStepScale,float triangleScale,float globalTime) {\n\tvec2 shapePos = vec2(locationX*ratio, locationY);\n    uv -= shapePos;\n    \n  \n    float angle = atan(uv.x,uv.y)+PI;\n    angle += 0.65;\n    angle += angleToAdd;\n    angle += globalTime;\n    float radius = TWO_PI/float(5);\n    float dists =cos(floor(.5 +angle/radius)*radius-angle)*length(uv);\n    \n\t\n\tfloat value = 1. - smoothstep(smoothStepX,smoothStepY,dists * smoothStepScale);\n    value += createTriangle(0.0,.15,uv,ratio,0.0,.4,.41, triangleScale,globalTime);\n    value += createTriangle(- 0.08,0.05,uv,ratio,1.2,.4,.41,triangleScale,globalTime);\n    value += createTriangle(-.055,-0.11,uv,ratio,0.4,.4,.41,triangleScale,globalTime);\n    value += createTriangle(.08,.05,uv,ratio,0.90,.4,.41,triangleScale,globalTime);\n    value += createTriangle(.055,-0.11,uv,ratio,-0.4,.4,.41,triangleScale,globalTime);  \n    \n    \n    return value;\n\n}\n\nfloat createTriangle(float locationX, float locationY,vec2 uv, float ratio,float angleToAdd, float smoothStepX, float smoothStepY, float smoothStepScale,float globalTime){\n\tvec2 shapePos = vec2(locationX*ratio, locationY);\n    uv -= shapePos;\n    \n  \n    float angle = atan(uv.x,uv.y)+PI;\n    angle += angleToAdd;\n    angle += globalTime;\n    float radius = TWO_PI/float(3);\n    float dists =cos(floor(.5+angle/radius)*radius-angle)*length(uv);\n    \n\t\n\tfloat value = 1. - smoothstep(smoothStepX,smoothStepY,dists * smoothStepScale);\n    return value;\n}\n\nfloat createDiamond(float locationX, float locationY,vec2 uv, float ratio,float angleToAdd, float smoothStepX, float smoothStepY,float globalTime){\n    vec2 shapePos = vec2(locationX*ratio, locationY);\n    uv -= shapePos;\n    \n    float value = createTriangle(0.0,0.04,uv,ratio,0.0,smoothStepX,smoothStepY,11.6,globalTime);\n    value += createTriangle(0.0,-0.03,uv,ratio,1.05,smoothStepX,smoothStepY,11.6,globalTime);\n    return value;\n}\n\nfloat createPoly(float locationX, float locationY, int corners, vec2 uv, float ratio,float angleToAdd) \n{\n\n    vec2 shapePos = vec2(locationX*ratio, locationY);\n    uv -= shapePos;\n    \n  \n    float angle = atan(uv.x,uv.y)+PI;\n    angle += angleToAdd;\n    float radius = TWO_PI/float(corners);\n    float dist =cos(floor(.5+angle/radius)*radius-angle)*length(uv);\n    \n    return dist;\n}","name":"Image","description":"","type":"image"}]}