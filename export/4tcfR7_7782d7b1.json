{"ver":"0.1","info":{"id":"4tcfR7","date":"1538961647","viewed":118,"name":"Nature.3 Genetics Merging","username":"tqle","description":"Nature projects, experiment #3. Attempt to recreate Spiderman's genetics","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["nature"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//define functions, as to not be redundant\n#define repeat(v, r) (mod(v, r)-r/2.)\n//constructors, similar to that of a class in Java\nstruct Shape{\n  float dist;\n  vec4 color;\n};\n//parametize vec2 -> randomize float\nfloat random(vec2 v) {\n  return fract(sin(dot(v*0.1, vec2(324.654, 156.546)))*46556.2);\n}\n//rotating distance of objects\nmat2 rot(float a){\n  float r = sin(a);\n  float f = cos(a);\n  return mat2(sin(r), cos(f), sin(-f), cos(r));\n}\n\n//* Shapes *//\nfloat pole(vec2 v, float r){\n  return length(v)-r;\n}\nfloat sphere(vec3 v, float r){\n  return length(v)-r;\n}\nfloat box(vec3 v, float r, float m) {\n  return max(length(v.xy) - r, abs(v.z) - m);\n}\n\n//* Mixers *//\n\nfloat mixColors(float r, float v, float z) {\n  return clamp(.75 + 0.5 * (v - r) / z, .1, 1.);\n}\n\nfloat mixShapes(float v, float f, float r) {\n  float z = mixColors(v, f, r);\n  return mix(f, v, z) - r * z *(1. - z);\n}\n\n//parametize vec2 -> polar coordinates \nfloat pModPolar(inout vec2 v, float r) {\n  float f = 6.28318 / r;\n  float z = atan(v.y, v.x) + f * 0.5;\n  float m = floor(z / f);\n  z = mod(z, f) - f * 0.5;\n  v = vec2(cos(z), sin(z))*length(v);\n  return m;\n}\n//* Shaping functions *//\nShape vines(vec3 c) {\n  Shape shape;\n  float vine;\n  shape.dist = 2000.; // Draw Distance\n  shape.color = vec4(1.); // Initial Color\n\n  // Shape Attributes\n  float twist = 19.75; // Vine Repeat\n  float vineOffset = 2.75; // Leaf Offset\n\n\n\tvineOffset += cos(iTime*0.5)*1.;\n\n  // Stems\n  vec3 i = c;\n    i.xz *= rot(c.y*0.35+iTime*0.25);\n    float detail = pModPolar(i.xz, twist); \n    \n    float x = mix(-2., 1., mod(detail, 10.));// Small Ripples\n    //float x = mix(0., 1., pModPolar(i.xy, 10.)); \n    \n    \n    i.x -= vineOffset; // Offset Stems\n  \tfloat stemWidth = 0.25;\n  \tvine = pole(i.xz, stemWidth+0.02*sin(i.y*x));\n\n\n  vec4 color = vec4(0.1, 0.75, 0.4, 1. + cos(iTime));\n    \n    float pattern = cos(sin(c.z*10.)) /\n        cos(sin(c.y*2.));\n\n  shape.dist = vine;\n  shape.color = color;\n  shape.color /= pattern;\n\n  return shape;\n}\n\n\nShape orb(vec3 c){\n  Shape shape;\n  float orb;\n  shape.dist = 1000.; // Draw Distance\n  shape.color = vec4(1.); // Initial Color\n\n  // Stems\n  vec3 i = c;\n    i.xz *= rot(iTime);\n    i.y = repeat(i.y, 0.5);\n    i.x = abs(i.x)-0.5;\n    i.x = abs(i.x)-0.5;\n    orb = sphere(i, cos(sin(iTime)*1.25)*0.25);\n    \n\n  vec4 color = vec4(3.1 + cos(iTime), 0.75 - abs(tan(iTime)), 0.4, 1. - abs(pow(cos(iTime), 2.)));\n\n  shape.dist = orb;\n  shape.color = color;\n\n  return shape;\n}\n\n\nShape map(vec3 c){\n  Shape vines = vines(c);\n  Shape orbs = orb(c);\n    \n  float df = mixShapes(vines.dist, orbs.dist, 1.);\n  vines.dist = df;\n    \n  vines.color = mix(vines.color, \n                    orbs.color*2., \n                    mixColors(orbs.dist, vines.dist, 1.));\n\n  return vines;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  //remapping coordinate system -.5 -> .5\n  vec2 v = (fragCoord.xy-0.5 * iResolution.xy) / iResolution.y;\n\n  //setting camera positioning\n  vec3 cam = vec3(0., 0., -10.);\n  //normalizing coordinate vector \n  vec3 f = normalize(vec3(v, 1.));\n  vec3 scene = cam;\n  fragColor = vec4(.25);\n\n  // Ray Marcher\n  for(float z = 0.1 ; z <= 1.; z += 0.05){\n    Shape c = map(scene); // Calc SDF\n    if(c.dist < 0.01){\n      fragColor = c.color * (1. - z) + cos(iTime); // Hit  - invert pixels\n      break;\n    }\n    scene += f * c.dist;\n\n\n  }\n}\n","name":"Image","description":"","type":"image"}]}