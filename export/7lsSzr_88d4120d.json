{"ver":"0.1","info":{"id":"7lsSzr","date":"1625084865","viewed":41,"name":"profile","username":"e_Fediaieva","description":"t","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["triangles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"    float max_of_three(float a, float b, float c)\n    {\n        return max(a,max(b,c));\n    }\n             \n        float L(vec2 p, vec2 P0, vec2 P1)\n        {\n                float a = -(P1.y-P0.y);\n                float b =  (P1.x-P0.x);\n                float d =  P0.x*P1.y- P0.y*P1.x; \n                float x = p.x;\n                float y = p.y;\n                \n                 return a*x + b*y + d;\n        }\n    \n    float T(vec2 p, vec2 P0, vec2 P1, vec2 P2)\n    {\n        return  max_of_three(\n                   L(p, P0, P1),\n                   L(p, P1, P2), \n                   L(p, P2, P0)\n                   );   \n    }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n//  digitalized my profile                      \n vec2 P[62];\n       P[ 0] = vec2(0.8966 ,    \t0.90457);\n       P[ 1] = vec2(0.83835,     \t0.94749);\n       P[ 2] = vec2(0.74804,     \t0.97120);\n       P[ 3] = vec2(0.60602,     \t0.97572);\n       P[ 4] = vec2(0.4928 ,    \t0.96725);\n       P[ 5] = vec2(0.4038 ,    \t0.95144);\n       P[ 6] = vec2(0.38416,     \t0.92716);\n       P[ 7] = vec2(0.31806,     \t0.88481);\n       P[ 8] = vec2(0.25131,     \t0.83682);\n       P[ 9] = vec2(0.22448,     \t0.80632);\n       P[10] = vec2(0.20484,     \t0.76906);\n       P[11] = vec2(0.18194,     \t0.70920);\n       P[12] = vec2(0.17343,     \t0.67871);\n       P[13] = vec2(0.1623 ,    \t0.67476);\n       P[14] = vec2(0.16492,     \t0.65951);\n       P[15] = vec2(0.17277,     \t0.64766);\n       P[16] = vec2(0.1695 ,    \t0.60757);\n       P[17] = vec2(0.17147,     \t0.58837);\n       P[18] = vec2(0.17081,     \t0.57199);\n       P[19] = vec2(0.1538 ,    \t0.55167);\n       P[20] = vec2(0.11453,     \t0.50536);\n       P[21] = vec2(0.098822,     \t0.48447);\n       P[22] = vec2(0.088351,     \t0.47149);\n       P[23] = vec2(0.085733,     \t0.45850);\n       P[24] = vec2(0.092277,     \t0.44212);\n       P[25] = vec2(0.11584,     \t0.42292);\n       P[26] = vec2(0.13809,     \t0.41728);\n       P[27] = vec2(0.14529,     \t0.40599);\n       P[28] = vec2(0.14725,     \t0.39074);\n       P[29] = vec2(0.13743,     \t0.38340);\n       P[30] = vec2(0.12696,     \t0.37719);\n       P[31] = vec2(0.13089,     \t0.36533);\n       P[32] = vec2(0.14202,     \t0.35347);\n       P[33] = vec2(0.14463,     \t0.34557);\n       P[34] = vec2(0.13874,     \t0.33540);\n       P[35] = vec2(0.13416,     \t0.31903);\n       P[36] = vec2(0.14332,     \t0.30491);   \n       P[37] = vec2(0.15641,     \t0.29814);\n       P[38] = vec2(0.16099,     \t0.28176);\n       P[39] = vec2(0.15903,     \t0.25861);\n       P[40] = vec2(0.1538 ,    \t0.24111);\n       P[41] = vec2(0.15641,     \t0.22021);\n       P[42] = vec2(0.1767 ,    \t0.19989);\n       P[43] = vec2(0.20681,     \t0.18521);\n       P[44] = vec2(0.25785,     \t0.17956);\n       P[45] = vec2(0.31872,     \t0.18012);   \n       P[46] = vec2(0.37435,     \t0.17335);\n       P[47] = vec2(0.41623,     \t0.13043);\n       P[48] = vec2(0.44372,     \t0.098814);\n       P[49] = vec2(0.45681,     \t0.061547);\n       P[50] = vec2(0.47055,     \t0.023151);\n       P[51] = vec2(0.48429,     \t-0.0062112);\n   // Normalized pixel coordinates (from -1 to 1)\n    vec2 p = 1.0 - 2.0* fragCoord/iResolution.xy;\n    vec2 m = 1.0 - 2.0* iMouse.xy/iResolution.xy;\n\n     float x = p.x * iResolution.x/iResolution.y;\n     float y = p.y ;\n     \n     float mx = m.x * iResolution.x/iResolution.y;\n     float my = m.y ;\n           \n            x/=mx;\n            y/=my;\n            \n            p.x=x;\n            p.y=y;\n   \n\n      float  z = 1.0e25; //infinity?\n              for(int i=0;i<51-3;i++)\n                z = min(z, T(p,  P[i],P[i+1], P[i+3]) );   \n       float     f = 1.25/z; \n\n    // Time varying pixel color\n               vec3 col = vec3(1.0, 1.0, 1.0);\n                if(f >= 0.0)col.g = sin(iTime/10.0);\n                   else     col.r = f;\n                \n\n    // Output to screen\n                 fragColor = vec4(col,1.0);\n\n}\n","name":"Image","description":"","type":"image"}]}