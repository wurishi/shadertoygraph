{"ver":"0.1","info":{"id":"ctK3zw","date":"1683735017","viewed":66,"name":"color balls quaternion","username":"sanderoneil","description":"move mouse","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["balls"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n// Function to multiply two vec4s\nvec4 mult(vec4 q1, vec4 q2) {\n    vec4 result;\n    result.xyz = cross(q1.xyz, q2.xyz) + q1.w * q2.xyz + q2.w * q1.xyz;\n    result.w = q1.w * q2.w - dot(q1.xyz, q2.xyz);\n    return vec4(result);\n}\n\n// Function to create a vec4 from an axis and an angle\nvec4 axiang(vec3 axis, float angle) {\n    vec4 result;\n    result.xyz = axis * sin(angle * 0.5);\n    result.w = cos(angle * 0.5);\n    return vec4(result);\n}\n\n// Function to rotate a vector by a vec4\nvec3 rot(vec3 v, vec4 q) {\n    vec4 q_conjugate = vec4(vec4(-q.xyz, q.w));\n    vec4 v_quat = vec4(vec4(v, 0.0));\n    vec4 result = mult(mult(q, v_quat), q_conjugate);\n    return result.xyz;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // ... your shader code\n\n    // Example usage\n    vec2 uv = mod (fragCoord.xy,iMouse.x)*2./iMouse.x - 1.;\n    \n    vec2 d = fragCoord.xy - mod (fragCoord.xy,iMouse.x);\n    \n    vec3 axis = normalize(vec3(uv.x,uv.y, .1));\n    float angle = radians(45.0);\n    \n    float r = length(uv);\n    vec3 inputVector = normalize(vec3(uv.x*r, uv.y*r, sqrt(1.-r)));\n\n    vec4 r1 = axiang(normalize(vec3(1,0,iMouse.y/30.)), d.x*6.);\n    \n    vec4 r2 = axiang(normalize(vec3(0,1,iMouse.y/30.)), d.y*6.);\n    \n    //vec4 r4 = axiang(vec3(0,1,0), iMouse.y*6.);\n    \n    vec4 r3 = axiang(normalize(vec3(0,0,1)), iTime*2.3);\n    \n    vec4 rotation = (mult(mult(r1,r2),r3));\n    \n    vec3 rotatedVector = rot(inputVector, rotation);\n\n    // ... continue your shader code\n\n    fragColor = vec4((rotatedVector+1.0)/2.0, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}