{"ver":"0.1","info":{"id":"WdsyWr","date":"1584591984","viewed":144,"name":"Awake Remixes","username":"rackman","description":"Reproduction of the album artwork of \"Tycho - Awake Remixes\" by Scott Hansen: https://en.wikipedia.org/wiki/Awake_(Tycho_album)#Awake_Remixes","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["2d","retro","tycho","synthwave","reproduction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * Reproduction of the album artwork of \n * \"Tycho - Awake Remixes\" by Scott Hansen\n * https://en.wikipedia.org/wiki/Awake_(Tycho_album)#Awake_Remixes\n */\n\n// not quite equilateral\nconst vec2 START_SIZE = vec2(0.5, -0.887);\n\nconst vec2 START_POS = vec2(0.0, 0.455);\n\nconst vec3 BG_COLOR = vec3(0.194, 0.198, 0.206);\nconst vec3 OUTER_COLOR = vec3(0.863, 0.875, 0.794);\n\nconst vec3[] INNER_COLORS = vec3[](\n    vec3(0.773, 0.491, 0.405),\n    vec3(0.713, 0.443, 0.414),\n    vec3(0.627, 0.396, 0.467),\n    vec3(0.220, 0.509, 0.624)\n);\n\nconst float[] SIZES = float[](1.00, 0.80, 0.64, 0.48, 0.32, 0.16);\n\nconst float ANGLE = -2.6317;\nconst mat2 ROTATION = mat2(cos(ANGLE), -sin(ANGLE), sin(ANGLE), cos(ANGLE));\n\nconst float MAZE_ANGLE = 1.5707;\nconst mat2 MAZE_ROTATION = mat2(cos(MAZE_ANGLE), -sin(MAZE_ANGLE), sin(MAZE_ANGLE), cos(MAZE_ANGLE));\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdTriangleIsosceles(in vec2 p, in vec2 q) {\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n\n// https://thebookofshaders.com/10/\nfloat random(vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\n// https://thebookofshaders.com/11/\nfloat noise(in vec2 st) {\n    st *= 8.0;\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f*f*(3.0-2.0*f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nfloat drawTriangle(vec2 p, float s, vec3 c, inout vec3 col) {\n    \n    vec2 size = START_SIZE * 0.95 * s;\n        \n    vec2 pos = p - START_POS;\n    pos.y -= (START_SIZE.y - size.y) * 0.67;\n\n    float d = sdTriangleIsosceles(pos, size);\n\n    if (d < 0.0) {\n        col = c;\n    }\n    \n    return d;\n}\n\nvoid drawMaze(vec2 uv, float d, inout vec3 col) {\n    vec2 st = uv; \n     \n    st *= 35.0;\n    st.x -= 0.4;\n    \n    st *= ROTATION;\n    \n    st.y += iTime * 0.75;\n    \n    vec2 gv = fract(st);\n    vec2 id = floor(st);\n    \n    bool rotate = noise((id / 20.0) + floor(iTime * 1.25)) > 0.5 ? true : false;\n    \n    if (rotate) {\n        gv *= MAZE_ROTATION;\n    }\n    \n    if (d < 0.0) {\n        float c = smoothstep(0.0, 0.01, abs(gv.x) - 0.499);\n        col = mix(BG_COLOR, col, c);\n    }\n}\n\nvec3 triColor(int i, float r) {\n    r = mod(r, 3.999);\n    \n    float cr = mod(float(i) + r, 3.999);\n    \n    i = int(floor(cr));\n    \n    vec3 startColor = INNER_COLORS[i];\n    \n    if (++i > 3) i = 0;\n    \n    vec3 endColor = INNER_COLORS[i];\n    \n    return mix(startColor, endColor, fract(cr));\n}\n\n// https://iquilezles.org/articles/functions\nfloat expImpulse(float x, float k) {\n    float h = k*x;\n    return h*exp(1.0-h);\n}\n   \nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n\tvec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    vec3 col = vec3(BG_COLOR);\n    \n    float d = drawTriangle(uv, SIZES[0], OUTER_COLOR, col);\n    \n    drawMaze(uv, d, col);\n    \n    float colorRot = expImpulse(fract(iTime * 1.25), 7.5) * 3.0;\n    \n    for (int i = 1; i < SIZES.length() - 1; i++) {\n        drawTriangle(uv, SIZES[i], triColor(i-1, colorRot), col);\n    }\n    \n    drawTriangle(uv, SIZES[5], BG_COLOR, col);\n    \n    uv *= iResolution.y / 8.0;\n    \n    col *= 1.0 - noise(uv) * 0.12;\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}