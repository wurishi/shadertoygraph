{"ver":"0.1","info":{"id":"cs2Gz3","date":"1667953149","viewed":83,"name":"three young","username":"Gijlf","description":"I really struggle to find colors, tips and help very much appreciated.\nName came after a bit borring..","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["cage"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = 3.1415926535898;\nconst float tau = 2.0 * pi;\n\nmat2 rot(float a) {\n    float c = cos(a), s=sin(a);\n    return mat2(c,-s,s,c);\n}\n\nvec3 cam(float time) {\n    vec2 id = vec2(1, 2);\n    return vec3(\n        sin(time * id.x) + sin(time * id.y),\n        0.1,\n        cos(time * id.y)\n    );\n}\n\nvec3 tag(float time) {\n    vec2 id = vec2(1, 2);\n    return vec3(\n        sin(time * id.x),\n        0.0,\n        cos(time * id.y) + cos(time * id.x)\n    );\n}\n\nfloat smin(float d1, float d2, float k) {\n    float h = clamp(0.5+0.5*(d2-d1)/k, 0.0, 1.0);\n    return mix(d2, d1, h) - k*h*(1.0-h);\n}\n\nvec2 map(vec3 p, float time) {\n    p.y += 0.8*(sin((p.z+p.x)*0.1) + cos(p.z*0.08));\n    vec3 tp = p - tag(time*0.4) * 40.0;\n    float d = 1e20;\n    float mat = 0.0;\n    float ft = time * 0.04 * tau;\n\n    {\n        vec3 q = tp - 0.4 * vec3(\n             cos(tau*time*0.7) * 2.0,\n            (sin(tau*time*1.2)+cos(tau*time*2.3)) * 1.4,\n             cos(tau*time*2.2) * 1.2\n        );\n        float r = 1.8 + sin(time*tau*2.0)*0.6;\n        float c =length(q)-r;\n        mat = c < d ? 1.0 : mat;\n        d = smin(d, c, 0.2);\n        q.xz *= rot(time*6.0+sin(1.6+time)*3.0);\n        for (int i=0; i<3; i++) {\n            q = abs(q)-vec3(r*0.25+0.05, 0.4, r*0.25);\n            q.xy *= rot(5.32 + cos(ft)*0.04);\n            q.xz *= rot(-1.22);\n        }\n        c = length(q.xz)-0.06;\n        mat = c < d ? 4.0 : mat;\n        d = smin(d, c, 0.08);\n    } {\n        vec3 q = tp - 1.4 * vec3(\n             cos(tau*time*1.2) * 4.0,\n            (sin(tau*time*1.4)+cos(tau*time*0.9)) * 2.4,\n             cos(tau*time*1.4) * 2.1\n        );\n        float r = 1.4 + sin(time*tau*1.0)*0.3;\n        float c = length(q)-r;\n        mat = c < d ? 2.0 : mat;\n        d = smin(d, c, 0.2);\n        q.xz *= rot(time*2.0+sin(0.4+time)*2.0);\n        for (int i=0; i<3; i++) {\n            q = abs(q)-vec3(r*0.25+0.05, 0.4, r*0.25);\n            q.xy *= rot(-3.4+sin(5.0*ft)*sin(5.0*ft));\n            q.xz *= rot(-4.22+cos(ft));\n        }\n        c = length(q.yz)-0.04;\n        mat = c < d ? 6.0 : mat;\n        d = smin(d, c, 0.08);\n    } {\n        vec3 q = tp - 1.4 * vec3(\n             cos(sin(tau*time*1.7)+tau*time*0.6),\n            (sin(tau*time*0.4+cos(tau*time*0.9))) + sin(tau*time*1.0)*0.5,\n             sin(tau*time*0.8) + sin(tau*time*1.2)*0.8\n        );\n        float r = 0.8 + cos(time*tau*4.0)*0.1;\n        float c = length(q)-r;\n        mat = c < d ? 3.0 : mat;\n        d = smin(d, c, 0.4);\n        q.xz *= rot(time*4.0+sin(time)*6.0);\n        for (int i=0; i<3; i++) {\n            q = abs(q)-vec3(r*0.15, 0.2, r*0.35);\n            q.xy *= rot(2.78);\n            q.xz *= rot(1.08);\n        }\n        c = length(q.xz)-0.03;\n        mat = c < d ? 5.0 : mat;\n        d = smin(d, c, 0.08);\n    }\n\n    float r  = 0.2*(sin(tau*time*0.002+length(tp.xz)*0.16-length(p.xz)*0.1));\n          r += 0.5*sin(tau*time*0.002+length(p.xz) * 0.02);\n    float c = p.y + 4.0 + r;\n    float m = c < d ? 0.0 : mat;\n    d = smin(d, c, mat >= 4.0 ? (mat >= 6.0 ? 2.0 : 0.2) : 2.0);\n    mat = m;\n    return vec2(d, mat);\n}\n\n\nfloat softShadow(vec3 p, vec3 rd, float mint, float maxt, float k, float time) {\n    float res = 1.0;\n    float ph = 1e20;\n    for (float t=mint; t<maxt;) {\n        float h = map(p + rd * t, time).x;\n        if (h < 1e-3) return 0.0;\n        float y = h*h/(2.0*ph);\n        res = min( res, k*h/max(0.0, t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\nvec3 getMat(float mat, out vec2 spec) {\n    vec3 matcol = vec3(1);\n    spec.x = 12.0;\n    spec.y = 0.68;\n    if (mat > 0.0) {\n        if (mat < 4.0) {\n            matcol = vec3(0.23, 0.38, 0.98);\n            spec.x = 80.0;\n            spec.y = 0.24;\n        } else {\n            spec.x = 20.0;\n            spec.y = 1.0;\n            if (mat < 5.0)\n                matcol = vec3(0.92, 0.12, 0.26);\n            else if (mat < 6.0)\n                matcol = vec3(1.2, 0.70, 0.14);\n            else if (mat < 7.0)\n                matcol = vec3(0.28, 0.80, 0.5624);\n        }\n    }\n    return matcol;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 col = vec3(0);\n    vec2 uv = (fragCoord.xy - iResolution.xy * 0.5) / iResolution.x;\n    float time = iTime * 0.5;\n    //time = (2.0 * iMouse.x / iResolution.x) * tau;\n    vec3 s = cam(time*0.4) * 40.0;\n    vec3 t = tag(time*0.4-0.1) * 40.0;\n    vec3 cz = normalize(t-s);\n    vec3 cx = normalize(cross(cz, vec3(0,1,0)));\n    vec3 cy = normalize(cross(cx, cz));\n    vec3 rd = mat3(cx,cy,cz) * normalize(vec3(uv,0.8));\n    float td = 0.0;\n    const float md = 400.0;\n    for (int i=0; i<128; i++) {\n        float d = map(s + rd * td, time).x;\n        td += d;\n        if (d < 1e-4 || td > md) break;\n    }\n    td = min(td, md);\n    vec3 p = s + rd * td;\n    float fog = 1.0 - td/md;\n    const vec2 o = vec2(1e-3,0);\n    vec3 n = normalize(vec3(\n        map(p+o.xyy, time).x - map(p-o.xyy, time).x,\n        map(p+o.yxy, time).x - map(p-o.yxy, time).x,\n        map(p+o.yyx, time).x - map(p-o.yyx, time).x\n    ));\n    vec3 ld = normalize(vec3(0.8, 0.4, -0.2));\n    float dif = clamp(dot(n, ld), 0.0, 1.0);\n    float sky = clamp(dot(n, vec3(0,1,0)), 0.0, 1.0);\n    float shad = softShadow(p+n*o.x, ld, 0.01, md, 8.0, time);\n\n    vec2 spec = vec2(0);\n    vec3 matcol = getMat(map(p, time).y, spec);\n\n    spec.x = pow(clamp(dot(n, normalize(ld-rd)), 0.0, 1.0), spec.x) * spec.y;\n    col += (spec.x + dif + 0.002) * vec3(1.00, 0.7, 0.48) * matcol * shad;\n    col += (sky + 0.008) * vec3(0.08, 0.2, 0.40) * matcol;\n    col *= fog;\n    col += smoothstep(0.0, 1.0, rd.y) * 2.0 * vec3(0.08, 0.2, 0.40) * float(td==md);\n    col = pow(col, vec3(0.4545));\n\n    // camera(red) and target(gree) path in 2d\n    //col = vec3(0);\n    //vec2 gv =     uv*2.0;//fract(uv*6.0)-0.5;\n    //vec2 id = vec2(1, 2);//floor(uv*6.0);\n    //vec2 coff = vec2(\n    //    sin(time * id.x) + sin(time * id.y),\n    //    cos(time * id.y)\n    //);\n    //time += 0.2;\n    //vec2 toff = vec2(\n    //    sin(time * id.x),\n    //    cos(time * id.y) + cos(time * id.x)\n    //);\n    //col += smoothstep(0.006, 0.0, length(gv - 0.25*coff)-0.004) * vec3(1,0,0);\n    //col += smoothstep(0.006, 0.0, length(gv - 0.25*toff)-0.004) * vec3(0,1,0);\n\n    fragColor = vec4(col, 1);\n}\n\n","name":"Image","description":"","type":"image"}]}