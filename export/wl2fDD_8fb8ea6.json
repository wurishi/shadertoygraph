{"ver":"0.1","info":{"id":"wl2fDD","date":"1599059648","viewed":66,"name":"8-bit ALU","username":"spool2kool","description":"left: original data.\nright: computed result.\nin: r,g,b=a, b, op\nout: r,g,b=res,carry,nothing\n\nops (0-7 of 7): +,-,<<,>>,~,&,|,^","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["alu","computation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//+,-,<<,>>,~,&,|,^\nvec3 ops(vec3 dat)\n{\n    vec3 opcode=floor(dat*vec3(255.,255.,7.)+0.5);\n    vec3 ret=vec3(0.,0.,0.);\n    float temp=0.;\n    vec2 temp1=vec2(0.);\n    //+\n    if(opcode.b<0.5)\n    {\n        opcode.b=9.;\n        temp=opcode.r+opcode.g;\n        ret.r=mod(temp,256.)/255.;\n        ret.g=(temp-mod(temp,256.))/256.;\n    }\n    else opcode.b-=1.;\n\n    //-\n\tif(opcode.b<0.5)\n    {\n        opcode.b=9.;\n        temp=opcode.r-opcode.g;\n        ret.r=mod(temp+256.,256.)/255.;\n        if(temp<0.) ret.g=1.;\n    }\n    else opcode.b-=1.;\n\n    //<<\n    if(opcode.b<0.5)\n    {\n        opcode.b=9.;\n        temp=opcode.r*2.;\n        ret.r=mod(temp,256.)/255.;\n        ret.g=floor(opcode.r/128.);\n    }\n    else opcode.b-=1.;\n\n    //>>\n    if(opcode.b<0.5)\n    {\n        opcode.b=9.;\n        temp=floor(opcode.r/2.);\n        ret.r=mod(temp,256.)/255.;\n        ret.g=mod(opcode.r,2.);\n    }\n    else opcode.b-=1.;\n\n    //~\n    if(opcode.b<0.5)\n    {\n        opcode.b=9.;\n        ret.r=1.-dat.r;\n    }\n    else opcode.b-=1.;\n\n    //&\n    if(opcode.b<0.5)\n    {\n        opcode.b=9.;\n        for(float i=1.;i<256.;i*=2.)\n        {\n            temp1=floor(mod(vec2(opcode.rg),vec2(i*2.))/vec2(i));\n            temp+=i*temp1.r*temp1.g;\n        }\n        ret.r=temp/255.;\n    }\n    else opcode.b-=1.;\n\n    //|\n    if(opcode.b<0.5)\n    {\n        opcode.b=9.;\n        for(float i=1.;i<256.;i*=2.)\n        {\n            temp1=vec2(1.)-(floor(mod(vec2(opcode.rg),vec2(i*2.))/vec2(i)));\n            temp+=i*(1.-temp1.r*temp1.g);\n        }\n        ret.r=temp/255.;\n    }\n    else opcode.b-=1.;\n\n    //^\n    if(opcode.b<0.5)\n    {\n        opcode.b=9.;\n        for(float i=1.;i<256.;i*=2.)\n        {\n            temp1=floor(mod(vec2(opcode.rg),vec2(i*2.))/vec2(i));\n            temp+=i*(temp1.r*(1.-temp1.g)+temp1.g*(1.-temp1.r));\n        }\n        ret.r=temp/255.;\n    }\n\n    return ret; \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 15)\n    vec2 uv = fragCoord/iResolution.xy*vec2(4.,4.);\n    //test colors\n    vec3 col=vec3(mod(uv.x,1.),mod(uv.y,1.),(mod(floor(uv.x),2.)+floor(uv.y)*2.)/7.);\n\tif(uv.x>=2.) col=ops(col);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}