{"ver":"0.1","info":{"id":"MsdXRs","date":"1461056282","viewed":360,"name":"Alphabet","username":"akohdr","description":"Simple fixed font experiment.","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["text","font","ascii","digits","glyph"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by Andrew Wild - akohdr/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Experiment to pack simple fixed font into mat3 literal glyphs (i.e 3x3 floats)\n// (there are issues on iOS and likely other mobile platforms....)\n\n//includes overlay of mouse tracker https://www.shadertoy.com/view/MdtSzs\n#define SHOW_MOUSE_TRACKER\n\n// font size\n#define DIMS vec2(8,9)\n//#define DIMS vec2(16,18)\n\n// really need better construct for mapping\n#define MAP(a,b,c) if(a<b)return c;\n#define DIVMOD(v,d) vec4(floor(v/d),mod(v,d))\n\n#define BLK vec4(.0,.0,.0,1.)\n#define GRY vec4(.5,.5,.5,1.)\n#define WHT vec4(1.,1.,1.,1.)\n#define RED vec4(1.,.0,.0,1.)\n#define GRN vec4(.0,1.,.0,1.)\n#define BLU vec4(.0,.0,1.,1.)\n#define YEL vec4(1.,1.,.0,1.)\n#define ORG vec4(1.,.5,.0,1.)\n#define PNK vec4(1.,.0,.5,1.)\n#define MAG vec4(1.,.0,1.,1.)\n#define CYN vec4(0.,1.,1.,1.)\n#define PRP vec4(.5,.0,.5,1.)\n\n#define glyph glyph_8_9\nmat3 glyph_8_9(float ch);\n\n// pow() has significant issues on iPad\n// quick dirty impls. provide int powers of 2/10 up to 2^16\n\nfloat pow2_16(float p) {\n    MAP(p,  1., 1.)\n    MAP(p,  2., 2.)\n    MAP(p,  3., 4.)\n    MAP(p,  4., 8.)\n    MAP(p,  5., 16.)\n    MAP(p,  6., 32.)\n    MAP(p,  7., 64.)\n    MAP(p,  8., 128.)\n    MAP(p,  9., 256.)\n    MAP(p, 10., 512.)\n    MAP(p, 11., 1024.)\n    MAP(p, 12., 2048.)\n    MAP(p, 13., 4096.)\n    MAP(p, 14., 8192.)\n    MAP(p, 15., 16384.)\n    MAP(p, 16., 32768.)\n    MAP(p, 17., 65536.)\n    return 0.;\n}\n\nfloat pow10_16(float p) {\n    MAP(p,  1., 1.)\n    MAP(p,  2., 10.)\n    MAP(p,  3., 100.)\n    MAP(p,  4., 1.e3)\n    MAP(p,  5., 1.e4)\n    MAP(p,  6., 1.e5)\n    MAP(p,  7., 1.e6)\n    MAP(p,  8., 1.e7)\n    MAP(p,  9., 1.e8)\n    MAP(p, 10., 1.e9)\n    MAP(p, 11., 1.e10)\n    MAP(p, 12., 1.e11)\n    MAP(p, 13., 1.e12)\n    MAP(p, 14., 1.e13)\n    MAP(p, 15., 1.e14)\n    MAP(p, 16., 1.e15)\n    MAP(p, 17., 1.e16)\n    return 0.;\n}\n\n// digit value from value v at column i (one based) under base b\nfloat modMask(lowp float v, lowp float i, lowp float b) {\n    float f = floor(i),           // forgetting to floor i causes headaches so included\n          p1 = pow(b,f-1.);\n    return (mod(v,pow(b,f))-mod(v,p1))/p1;\n}\n#define hexDigit(v,i) modMask(v,i,16.)\n//#define binDigit(v,i) modMask(v,i,2.)\n//#define decDigit(v,i) modMask(v,i,10.)\n\n// fix for bin/decDigit which were failing on iPad due to issues with pow()\nfloat binDigit(lowp float v, lowp float i) {\n    float f = floor(i),           // forgetting to floor i causes headaches so included\n          p1 = pow2_16(f-1.);\n    return (mod(v,pow2_16(f))-mod(v,p1))/p1;\n}\n\nfloat decDigit(lowp float v, lowp float i) {\n    float f = floor(i),           // forgetting to floor i causes headaches so included\n          p1 = pow10_16(f-1.);\n    return (mod(v,pow10_16(f))-mod(v,p1))/p1;\n}\n\n//=================================================================================\n\nvec4 palette(float a) {\n    MAP(a, 0.5, BLK)\n    MAP(a, 1.5, WHT)    \n    MAP(a, 2.5, RED)\n    MAP(a, 3.5, GRN)    \n    MAP(a, 4.5, BLU)    \n    MAP(a, 5.5, YEL)\n    MAP(a, 6.5, ORG)    \n    MAP(a, 7.5, PRP)    \n    MAP(a, 8.5, CYN)\n    MAP(a, 9.5, GRY)\n    return BLK;\n}\n\nfloat idxMat3(mat3 g, vec2 p) {\n    #define M_IDX(i,r,c) MAP(p.y,i,decDigit(g[r][c],DIMS.x-p.x))\n    float v;\n    // indexing matrix with loop i crashes firefox\n    // we index row/column into matrix by p\n    //   then select dec. digit from element by x (reversed)\n    M_IDX(1.5, 2, 2);\n    M_IDX(2.5, 2, 1);\n    M_IDX(3.5, 2, 0);\n    M_IDX(4.5, 1, 2);\n    M_IDX(5.5, 1, 1);\n    M_IDX(6.5, 1, 0);\n    M_IDX(7.5, 0, 2);\n    M_IDX(8.5, 0, 1);\n    M_IDX(9.5, 0, 0);\n    return v;\n}\n\nfloat framebuffer(vec4 dm) \n{\n    // returns char at location dm\n    \n    // for now we we show all defined chars\n    return mod(dm.y*DIMS.x + dm.x, 99.);\n}\n\nvec4 renderAlpha(vec2 p) \n{\n    vec4  dm = DIVMOD(p,DIMS);  // we only want to div/mod once, expensive\n    float ch = framebuffer(dm);\n    mat3   g = glyph(ch);\n    float pc = idxMat3(g, dm.zw);\n    vec4   c = palette(pc * mod(dm.x,10.));  // mod colour cycles\n    c.w = floor(pc);\t                     // use alpha channel as stencil\n    return c;\n}\n\n//=================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // start with default temporal background\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n\n    // overlay text field\n    vec4 ac = renderAlpha(fragCoord);\n    if(ac.w>0.) fragColor = ac;\n\n#ifdef SHOW_MOUSE_TRACKER\n    // overlay mouse tracker\n\tvec4 tex = texture(iChannel0,uv);\n    if(tex.x>0.) fragColor = YEL;\n#endif\n    \n}\n\n// Use hanging macro for glyph defs\n#define GLYPH(i) if(g<i)return mat3(\n\nmat3 glyph_8_9(float g) {\n    GLYPH(032.5) 0); \n    GLYPH(042.5) \n        00001000.,\n        00101010.,\n        00011100.,\n        00111110.,\n        00011100.,\n        00101010.,\n        00001000.,\n        00000000.,\n        00000000.);\n    GLYPH(046.5) \n        00000000.,\n        00000000.,\n        00000000.,\n        00000000.,\n        00000000.,\n        00011000.,\n        00011000.,\n        00000000.,\n        00000000.);\n    GLYPH(049.5) \n        00011000.,\n        00001000.,\n        00001000.,\n        00001000.,\n        00001000.,\n        00001000.,\n        00011100.,\n        00000000.,\n        00000000.);\n    GLYPH(050.5) \n        00111100.,\n        01000010.,\n        00000010.,\n        00001100.,\n        00110000.,\n        01000000.,\n        01111110.,\n        00000000.,\n        00000000.);\n    GLYPH(051.5) \n        00111100.,\n        01000010.,\n        00000010.,\n        00011100.,\n        00000010.,\n        01000010.,\n        00111100.,\n        00000000.,\n        00000000.);\n    GLYPH(052.5) \n        01000100.,\n        01000100.,\n        01000100.,\n        00111110.,\n        00000100.,\n        00000100.,\n        00000100.,\n        00000000.,\n        00000000.);\n    GLYPH(053.5) \n        01111110.,\n        01000000.,\n        01111000.,\n        00000100.,\n        00000010.,\n        01000100.,\n        00111000.,\n        00000000.,\n        00000000.);\n    GLYPH(054.5) \n        00111100.,\n        01000010.,\n        01000000.,\n        01011100.,\n        01100010.,\n        01000010.,\n        00111100.,\n        00000000.,\n        00000000.);\n    GLYPH(055.5) \n        00111110.,\n        01000010.,\n        00000010.,\n        00000100.,\n        00000100.,\n        00001000.,\n        00001000.,\n        00000000.,\n        00000000.);\n    GLYPH(056.5) \n        00111100.,\n        01000010.,\n        01000010.,\n        00111100.,\n        01000010.,\n        01000010.,\n        00111100.,\n        00000000.,\n        00000000.);\n    GLYPH(057.5) \n        00111100.,\n        01000010.,\n        01000010.,\n        00111110.,\n        00000010.,\n        00000010.,\n        00111100.,\n        00000000.,\n        00000000.);\n    GLYPH(058.5) \n        00111100.,\n        00100100.,\n        01001010.,\n        01010010.,\n        01010010.,\n        00100100.,\n        00111100.,\n        00000000.,\n        00000000.);\n    GLYPH(065.5) \n        00011000.,\n        00100100.,\n        01000010.,\n        01111110.,\n        01000010.,\n        01000010.,\n        01000010.,\n        00000000.,\n        00000000.);\n    GLYPH(066.5) \n        11111000.,\n        01000100.,\n        01000100.,\n        01111000.,\n        01000100.,\n        01000100.,\n        11111000.,\n        00000000.,\n        00000000.);\n    GLYPH(067.5) \n        00011100.,\n        00100010.,\n        01000000.,\n        01000000.,\n        01000000.,\n        00100010.,\n        00011100.,\n        00000000.,\n        00000000.);\n    GLYPH(068.5) \n        11111000.,\n        01000100.,\n        01000010.,\n        01000010.,\n        01000010.,\n        01000100.,\n        11111000.,\n        00000000.,\n        00000000.);\n    GLYPH(069.5) \n        01111110.,\n        01000000.,\n        01000000.,\n        01111000.,\n        01000000.,\n        01000000.,\n        01111110.,\n        00000000.,\n        00000000.);\n    GLYPH(070.5) \n        01111110.,\n        01000000.,\n        01000000.,\n        01111000.,\n        01000000.,\n        01000000.,\n        01000000.,\n        00000000.,\n        00000000.);\n    GLYPH(071.5) \n        00111100.,\n        01000010.,\n        01000000.,\n        01001110.,\n        01000010.,\n        01000010.,\n        00111100.,\n        00000000.,\n        00000000.);\n    GLYPH(072.5) \n        01000010.,\n        01000010.,\n        01000010.,\n        01111110.,\n        01000010.,\n        01000010.,\n        01000010.,\n        00000000.,\n        00000000.);\n    GLYPH(073.5) \n        00111000.,\n        00010000.,\n        00010000.,\n        00010000.,\n        00010000.,\n        00010000.,\n        00111000.,\n        00000000.,\n        00000000.);\n    GLYPH(074.5) \n        01111110.,\n        00000100.,\n        00000100.,\n        00000100.,\n        00000100.,\n        01000100.,\n        00111000.,\n        00000000.,\n        00000000.);\n    GLYPH(075.5) \n        01000100.,\n        01001000.,\n        01010000.,\n        01110000.,\n        01001000.,\n        01000100.,\n        01000010.,\n        00000000.,\n        00000000.);\n    GLYPH(076.5) \n        00100000.,\n        00100000.,\n        00100000.,\n        00100000.,\n        00100000.,\n        00100000.,\n        00111111.,\n        00000000.,\n        00000000.);\n    GLYPH(077.5) \n        01000010.,\n        01100110.,\n        01011010.,\n        01000010.,\n        01000010.,\n        01000010.,\n        01000010.,\n        00000000.,\n        00000000.);\n    GLYPH(078.5) \n        01100010.,\n        01100010.,\n        01010010.,\n        01001010.,\n        01000110.,\n        01000010.,\n        01000010.,\n        00000000.,\n        00000000.);\n    GLYPH(079.5) \n        00111100.,\n        01000010.,\n        01000010.,\n        01000010.,\n        01000010.,\n        01000010.,\n        00111100.,\n        00000000.,\n        00000000.);\n    GLYPH(080.5) \n        11111100.,\n        01000010.,\n        01000010.,\n        01111100.,\n        01000000.,\n        01000000.,\n        01000000.,\n        00000000.,\n        00000000.);\n    GLYPH(081.5) \n        00111100.,\n        01000010.,\n        01000010.,\n        01000010.,\n        01001010.,\n        01000110.,\n        00111101.,\n        00000000.,\n        00000000.);\n    GLYPH(082.5) \n        01111100.,\n        01000010.,\n        01000010.,\n        01111100.,\n        01001000.,\n        01000100.,\n        01000010.,\n        00000000.,\n        00000000.);\n    GLYPH(083.5) \n        00111100.,\n        01000010.,\n        01000000.,\n        00111100.,\n        00000010.,\n        01000010.,\n        00111100.,\n        00000000.,\n        00000000.);\n    GLYPH(084.5) \n        01111100.,\n        00010000.,\n        00010000.,\n        00010000.,\n        00010000.,\n        00010000.,\n        00010000.,\n        00000000.,\n        00000000.);\n    GLYPH(085.5) \n        01000010.,\n        01000010.,\n        01000010.,\n        01000010.,\n        01000010.,\n        01000010.,\n        00111100.,\n        00000000.,\n        00000000.);\n    GLYPH(086.5) \n        01000010.,\n        01000010.,\n        01000010.,\n        01000010.,\n        00100100.,\n        00100100.,\n        00011000.,\n        00000000.,\n        00000000.);\n    GLYPH(087.5) \n        01000001.,\n        01000001.,\n        01000001.,\n        01001001.,\n        01001001.,\n        01001001.,\n        00110110.,\n        00000000.,\n        00000000.);\n    GLYPH(088.5) \n        01000100.,\n        01000100.,\n        01000100.,\n        00111000.,\n        00101000.,\n        01000100.,\n        01000100.,\n        00000000.,\n        00000000.);\n    GLYPH(089.5) \n        01000100.,\n        01000100.,\n        01000100.,\n        00111000.,\n        00010000.,\n        00010000.,\n        00010000.,\n        00000000.,\n        00000000.);\n    GLYPH(090.5) \n        01111110.,\n        00000010.,\n        00000100.,\n        00010000.,\n        00110000.,\n        01000000.,\n        01111110.,\n        00000000.,\n        00000000.);\n\t\n    return mat3(0);\n/*\n    // can likely get at least 14 digits accuracy out dec float.\n    GLYPH(256.) \n        00000000000000.,\n        00000000000000.,\n        00000000000000.,\n        00000000000000.,\n        00000000000000.,\n        00000000000000.,\n        00000000000000.,\n        00000000000000.,\n        00000000000000.); \n*/\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Created by Andrew Wild - akohdr/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Quick and dirty mouse tracking tool because I needed one.\n\n// Cut/Paste this code into a seperate buffer and overlay on your shader.\n// You can then track absolute and texture coord position of mouse.\n\n#define BLK vec4(.0,.0,.0,1.)\n#define WHT vec4(1.,1.,1.,1.)\n\n// tweaked 7 seg decoder originally from dr2 @ https://www.shadertoy.com/view/MddXRl\n#define HSEG(a,b,c) (1.-smoothstep(a,b,abs(c)))\n#define SEG(q) HSEG(.13,.17,q.x)*HSEG(.5,.57,q.y)\n#define CHK b=a/2;if(b*2!=a)d+= \nfloat Seg7(vec2 q, int v)\n{\n  float d;\n  int a, b;\n  const vec2 vp = vec2 (.5,.5), \n             vm = vec2 (-.5,.5), \n             vo = vec2 (1,0);\n  if (v < 5) {\n    if (v == -1) a = 8;\n    else if (v == 0) a = 119;\n    else if (v == 1) a = 36;\n    else if (v == 2) a = 93;\n    else if (v == 3) a = 109;\n    else a = 46;\n  } else {\n    if (v == 5) a = 107;\n    else if (v == 6) a = 123;\n    else if (v == 7) a = 37;\n    else if (v == 8) a = 127;\n    else a = 111;\n  }\n  q = (q-.5) * vec2(1.7,2.3);\n  d = 0.; CHK SEG(vec2(q.yx - vo));\n  a = b;  CHK SEG(vec2(q.xy - vp));\n  a = b;  CHK SEG(vec2(q.xy - vm));\n  a = b;  CHK SEG(vec2(q.yx));\n  a = b;  CHK SEG(vec2(q.xy + vm));\n  a = b;  CHK SEG(vec2(q.xy + vp));\n  a = b;  CHK SEG(vec2(q.yx + vo));\n  return d;\n}\n\nint decDigit(lowp float v, int i) {\n    float f = float(i), \n          p1 = pow(10.,f-1.);\n    return int((mod(v,pow(10.,f))-mod(v,p1))/p1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy,\n         left = vec2(-1,0),\n         home=24.*(fragCoord*vec2(-1,1))/iResolution.xy;\n    \n    fragColor = vec4(0);\n    \n#define DIGITS(l) for(int i=1;i<=l;i++){xy+=left;fragColor+=vec4(Seg7(xy,decDigit(v,i) ));}\n    \n    // Current frame\n    float v = float(iFrame); \n    vec2 xy = home + vec2(12.,-20);\n    DIGITS(8);\n\n    // Mouse position XY absolute\n    v = float(iMouse.x); \n    xy = home + vec2(7.,-18);\n    DIGITS(4);\n    \n    v = float(iMouse.y); \n    xy = home + vec2(12.,-18);\n    DIGITS(4);\n\n    // Mouse position XY texure coord (3 dec. places)\n    v = 1000.*iMouse.x/iResolution.x; \n    xy = home + vec2(7.,-16);\n    DIGITS(3);\n    \n    v = 1000.*iMouse.y/iResolution.y; \n    xy = home + vec2(12.,-16);\n    DIGITS(3);\n}\n\n","name":"Buf A","description":"","type":"buffer"}]}