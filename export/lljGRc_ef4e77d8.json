{"ver":"0.1","info":{"id":"lljGRc","date":"1431108168","viewed":177,"name":"Playing with primitives","username":"Yevano","description":"2D distance field primitives with soft edges.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["distancefield"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"#define PIXEL_COEFF 3.\n\nstruct HitInfo {\n    float dist;\n    vec3 col;\n};\n\nfloat pixelSize = 1./iResolution.y;\n\nHitInfo sphere(vec2 v, float r) {\n    float d = length(v) - r;\n    vec3 c = vec3(1., (1. + sin(iTime * 10.)) * 0.5, 0.);\n    return HitInfo(d, c);\n}\n\nHitInfo sphere2(vec2 v, float r) {\n    float d = length(v) - r;\n    vec3 c = vec3(0., 0., 1.);\n    return HitInfo(d, c);\n}\n\nHitInfo square(vec2 v, vec2 s) {\n    float d = max(abs(v.x) - s.x, abs(v.y) - s.y);\n    vec3 c = vec3(0.2, 1., 0.);\n    return HitInfo(d, c);\n}\n\nvoid setColor(HitInfo hit, inout float d, inout vec3 c) {\n    float sc = smoothstep(0., 1., -hit.dist/pixelSize/PIXEL_COEFF);\n    if(hit.dist <= 0.) c = c * (1.-sc) + hit.col * sc;\n    d = min(hit.dist, d);\n}\n\nvec3 pixel(vec2 uv) {\n    vec3 bg = vec3(0.2, 0.2, 1.0);\n    float d = 9999.;\n    vec3 c = bg;\n    \n    setColor(sphere(uv, 0.25 * (1. + sin(iTime))), d, c);\n    for(float i = 0.; i < 8.; i++) {\n    \tsetColor(square(uv + vec2(-i/8. + 0.5, 0.), vec2(0.05, 0.05)), d, c);\n    }\n    \n    if(d <= 0.) {\n        return c;\n    }\n    //return vec3(sphere(vec3(uv, sin(iTime)), 1.) <= 0. ? 1. : 0., 0., 0.);\n    return bg;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n    uv.x -= iResolution.x/iResolution.y/2.;\n    uv.y -= 0.5;\n\tfragColor = vec4(pixel(uv), 1.0);\n}","name":"","description":"","type":"image"}]}