{"ver":"0.1","info":{"id":"3lK3RG","date":"1579210631","viewed":203,"name":"Octogon - distance (variant)","username":"iestyn","description":"This is a minor modification of the original 2D octogon SDF shader by IQ.\n\nMy variant rotates the octagon by pi/8 to evaluate an alternate formulation of the math.\n\nIQ's original shader is here: https://www.shadertoy.com/view/llGfDG","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","octogon","octagon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2018 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n// >>>>>> (iestyn) <<<<<<\n//                this is a minor modification of the original shader by IQ\n//                my variant rotates the octagon by pi/8 to evaluate an alternate formulation of the math\n//                IQ's original shader is here: https://www.shadertoy.com/view/llGfDG\n// >>>>>> (iestyn) <<<<<<\n\n\n\n// Distance to a regular pentagon, without trigonometric functions. \n//\n// List of some other 2D distances:\n//\n// Triangle:             https://www.shadertoy.com/view/XsXSz4\n// Isosceles Triangle:   https://www.shadertoy.com/view/MldcD7\n// Regular Triangle:     https://www.shadertoy.com/view/Xl2yDW\n// Regular Pentagon:     https://www.shadertoy.com/view/llVyWW\n// Regular Octogon:      https://www.shadertoy.com/view/llGfDG\n// Rounded Rectangle:    https://www.shadertoy.com/view/4llXD7\n// Rhombus:              https://www.shadertoy.com/view/XdXcRB\n// Trapezoid:            https://www.shadertoy.com/view/MlycD3\n// Polygon:              https://www.shadertoy.com/view/wdBXRW\n// Hexagram:             https://www.shadertoy.com/view/tt23RR\n// Regular Star:         https://www.shadertoy.com/view/3tSGDy\n// Star5:                https://www.shadertoy.com/view/wlcGzB\n// Ellipse 1:            https://www.shadertoy.com/view/4sS3zz\n// Ellipse 2:            https://www.shadertoy.com/view/4lsXDN\n// Quadratic Bezier:     https://www.shadertoy.com/view/MlKcDD\n// Uneven Capsule:       https://www.shadertoy.com/view/4lcBWn\n// Vesica:               https://www.shadertoy.com/view/XtVfRW\n// Cross:                https://www.shadertoy.com/view/XtGfzw\n// Pie:                  https://www.shadertoy.com/view/3l23RK\n// Arc:                  https://www.shadertoy.com/view/wl23RK\n// Horseshoe:            https://www.shadertoy.com/view/WlSGW1\n// Parabola:             https://www.shadertoy.com/view/ws3GD7\n// Rounded X:            https://www.shadertoy.com/view/3dKSDc\n// Joint:                https://www.shadertoy.com/view/WldGWM\n//\n// and many more here:   https://iquilezles.org/articles/distfunctions2d\n\n\n// signed distance to a regular octogon\nfloat sdOctogon( in vec2 p, in float r )\n{\n// >>>>>> (iestyn) <<<<<<  This is IQ's original version (https://www.shadertoy.com/view/llGfDG)\n  if ( mod( iTime, 2.0 ) < 1.0 )\n  {\n    // pi/8: cos, sin, tan.\n    const vec3 k = vec3(-0.9238795325,   // sqrt(2+sqrt(2))/2  // COS\n                         0.3826834323,   // sqrt(2-sqrt(2))/2  // SIN\n                         0.4142135623 ); // sqrt(2)-1          // TAN\n    // reflections\n    p = abs(p);\n    p -= 2.0*min(dot(vec2( k.x,k.y),p),0.0)*vec2( k.x,k.y);\n    p -= 2.0*min(dot(vec2(-k.x,k.y),p),0.0)*vec2(-k.x,k.y);\n    // Polygon side.\n    p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n    return length(p)*sign(p.y);\n  }\n// >>>>>> (iestyn) <<<<<<  This is my modified version, rotated by pi/8\n  else\n  {\n    // The tradeoff is swapping a reflection (dot, min, mul) for a 2D rotation (dot, dot)\n    // The two dot products are independent and can thus be pipelined, so it's possible that\n    // this version is marginally faster... though frankly it probably depends upon which GPU you use :)\n\n    // pi/8: cos, sin, tan (plus sin pi/4)\n    const vec4 k = vec4(-0.9238795325,   // sqrt(2+sqrt(2))/2  // COS PI/8\n                         0.3826834323,   // sqrt(2-sqrt(2))/2  // SIN PI/8\n                         0.4142135623,   // sqrt(2)-1          // TAN PI/8\n                         0.7071067812 ); // 1/sqrt(2)          // SIN PI/4\n    p = abs(p);\n    p -= 2.0*min(dot(vec2(k.w,-k.w),p),0.0)*vec2(k.w,-k.w);    // Reflect about pi/4 plane\n    p  = vec2(dot(p,vec2(-k.y,-k.x)),dot(p,vec2(-k.x,k.y)));   // Rotate by 22.5 degrees\n    p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);                   // Collapse the polygon edge to a point\n    return length(p)*sign(p.y);\n  }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n\tfloat d = sdOctogon( p, 0.5 );\n\n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-4.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(140.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n\n    \n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}