{"ver":"0.1","info":{"id":"3dVSzR","date":"1573238826","viewed":366,"name":"InterferenceFringes","username":"CoolerZ","description":"Constructive and destructive interference.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["physics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NUM_SOURCES 6.\n#define RADIUS .1\n#define FREQUENCY 10.\n#define TIME_SCALE 4.\n#define PI 3.14159265\n#define ANGLE_PER_SOURCE (2. * PI / NUM_SOURCES)\n\nfloat circle(vec2 uv)\n{\n    float d = length(uv);\n    return smoothstep(1., 0.9, d);\n}\n\nfloat wave_source(vec2 uv, float offset)\n{\n    float d = length(uv);\n    float amplitude = cos(FREQUENCY * d - iTime * TIME_SCALE);// + offset);\n    return amplitude;\n}\n\nvec3 hsb2rgb( in vec3 c )\n{\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5)/(iResolution.xy - 1.);\n    uv *= 2.;\n    uv -= 1.;\n    uv.x *= iResolution.x/iResolution.y;\n\n\n    vec3 col = vec3(0.);\n    float mask = 0.;\n\n    for(float i = 0.; i < NUM_SOURCES; ++i)\n    {\n        float angle = i * ANGLE_PER_SOURCE;\n        vec2 pos = vec2(cos(angle), sin(angle));\n        // float scale = 1. / RADIUS;\n        // vec2 circle_uv = scale * (uv - pos);\n        vec2 circle_uv = uv - pos;\n\t    mask += wave_source(circle_uv, i * iTime);\n//\t    col = mix(col, vec3(sin(angle), cos(angle), 1.), mask);\n    }\n    //col = mix(col, vec3(0., 0., 1.), mask);\n    vec3 wave_col = hsb2rgb(vec3(mask, 1., mask));\n    col = mix(col, wave_col, mask);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}