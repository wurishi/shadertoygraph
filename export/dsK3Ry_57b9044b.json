{"ver":"0.1","info":{"id":"dsK3Ry","date":"1678804097","viewed":151,"name":"Rainbow Triangle Tunnel Trip","username":"izutionix","description":"yes","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","rainbow","gyroid"],"hasliked":0,"parentid":"NtGcWm","parentname":"Trippy Rainbow Gyroid Lattice"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float gyroid(vec3 p, float scale, float bias, float thickness) {\n    p *= scale;\n    float d = abs(dot(sin(p), cos(p.yzx))+bias)-thickness;\n    return d/scale;\n}\n\n    \nfloat map(vec3 p) {\n    return gyroid(p, 1., 1.3, .05)+.06;\n    //return gyroid(p, 1., 1.+.6*pow(sin(iTime), 2.), .05);\n    //return min(gyroid(p, 1., 1.47, .05), gyroid(p+ 3.14159*vec3(0., 1., 1.), 1., 1.47, .05));\n}\n\nmat2 rot(in float theta) {\n\tfloat c = cos(theta);\n\tfloat s = sin(theta);\n\treturn mat2(c,-s,s,c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    \n    \n    vec3 ro = vec3(.5, 0., 3.*3.14159*iTime); // mod(iTime, 3.) // ugly fix\n    vec3 rd = normalize(vec3(uv, 3.));\n    \n    mat2 rot = rot(-4./27.*3.14159); // (still goes off track)\n    rd.xz *= rot;\n    ro.xz *= rot;\n    ro += vec3( 4., 0., 0.);\n\n    \n    float t=0.;\n    for (int i=1; i<256; i++) {\n        if (t > 256.) break;\n        vec3 p = ro + rd*t;\n        float dt = .7*map(p);\n        if (dt < .01)  break;\n        t += dt;\n    }\n    \n    vec3 col = .585+.415*sin(t + 3.14159*vec3(0, .5, 1.)); //vec3(.25,1.,2.)\n    col = vec3(1.-exp(-t/32.* col));\n    col *=  vec3(1.-exp(-t/4.* col));\n\n    fragColor = vec4(pow(col, vec3(.4545)), 1);\n}","name":"Image","description":"","type":"image"}]}