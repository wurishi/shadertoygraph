{"ver":"0.1","info":{"id":"lcXyzH","date":"1720766581","viewed":110,"name":"rotating-rect","username":"horus_2024","description":"旋转的计算","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["rotation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // 获取分辨率和时间\n    vec2 u_resolution = iResolution.xy;\n    float u_time = iTime;\n    \n    // 将fragCoord标准化为[-1, 1]范围\n    vec2 uv = fragCoord / u_resolution;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= u_resolution.x / u_resolution.y; // 保持宽高比\n\n    // 转换为弧度\n    float angle = u_time;\n\n    // 旋转矩阵\n    mat2 rotation = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n    uv = rotation * uv;\n\n    // 定义矩形的宽度和高度\n    float width = 1.0;\n    float height = 1.0;\n\n    // 检查点是否在矩形内部\n    if (abs(uv.x) < width / 2.0 && abs(uv.y) < height / 2.0)\n    {\n        fragColor = vec4(1, 0.1, 0.1, 1.0);\n    }\n    else\n    {\n        fragColor = vec4(1, 1.0, 1.0, 1.0);\n    }\n}\n","name":"Image","description":"","type":"image"}]}