{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"music","id":"XsXGzn","filepath":"/media/a/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}},{"channel":1,"type":"texture","id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"\n\nvec3 bgColor = vec3(0.2, 0.3, 0.5);\nvec3 heartColor = vec3(8.0, 0.2, 0.2);\n\n\n\n\nvec2 getXY(in vec2 fragCoord) {\n    vec2 minres = vec2(min(iResolution.x, iResolution.y));\n    vec2 halfRes = iResolution.xy / vec2(2.0);\n\tvec2 xy = (fragCoord.xy - halfRes) / minres;\n\treturn xy;\n}\n\n\nfloat distHeart(vec2 pos, float scale) {\n    float soundAmp1 = texture(iChannel0, vec2(0.1, 0.25)).x;\n    float soundAmp2 = texture(iChannel0, vec2(0.5, 0.25)).x;\n    float soundAmp3 = abs(soundAmp1 - soundAmp2);\n\tfloat amp = soundAmp3;\n\n\tfloat size = 1.0 * cos(amp);\n\tfloat sizePow = size < 0.0 ? 8.0 : 67.0;\n\tsize = 0.7 + 0.3 * abs(pow(size, sizePow));\n\tpos /= (scale * size);\n\n\tpos.y -= 0.3;\n\tfloat xx1 = pos.x * 7.0;\n\tpos.y += 0.1 * cos(abs(xx1));\n\tfloat xx2 = max(0.0, 0.5 - abs(pos.x));\n\tpos.y += 0.5 * abs(xx2);\n\tfloat r = length(pos) * 3.0;\n\n    return 1.0 - clamp(75.0 * (1.0 - r), 0.0, 1.0);\n}\n\n\nfloat distSmallHearts(vec2 pos) {\n    vec2 halfRes = iResolution.xy / vec2(2.0);\n\tfloat dis = 1.0;\n\tint i = 0;\n\tfor (int i = 0 ; i < 32 ; ++i) {\n\t\tfloat ii = 6.28 * float(i) / 32.0;\n\t\tfloat jj = ii;\n\t\tfloat kk = 5.0 * ii;\n\t\tfloat x = cos(jj) + 0.15 * sin(kk + 8.0 * iTime);\n\t\tfloat y = 0.7 * sin(jj + 0.7 * iTime) + 0.35 * cos(kk + 5.4 * iTime);\n\t\tvec2 xy = 0.0015 * halfRes * vec2(x,y);\n\t\tdis = min(dis, distHeart(pos + xy, 0.1));\n\t}\n\treturn dis;\n}\n\n\nfloat distHearts(vec2 pos) {\n\tfloat dis = 1.0;\n\t\n\tvec2 smallPos = pos * 1.5 + vec2(0.66, 0.0);\n\tvec2 bigPos = pos * 1.5 + vec2(-0.66, 0.0);\n\n\tdis = min(dis, distSmallHearts(smallPos));\n\tdis = min(dis, distHeart(bigPos, 1.75));\n\treturn dis;\n}\n\n\nvec3 bgShadedColor(in vec2 fragCoord) {\n\tvec2 off = vec2(0.01 * iTime, 0);\n\tvec2 pos = 0.5 * fragCoord.xy / iResolution.xy;\n    vec3 rgb = texture(iChannel1, off + pos).xyz;\n\tfloat b = (rgb.x + rgb.y + rgb.z) * 0.33;\n\tb = 0.1 + 1.0 * b;\n\treturn b * bgColor;\n}\n\n\nvec3 heartShadedColor(in vec2 fragCoord) {\n\tvec2 off = vec2(0.01 * iTime, 0);\n\tvec2 pos = 0.15 * fragCoord.xy / iResolution.xy;\n    vec3 rgb = texture(iChannel1, off + pos).xyz;\n\tfloat b = (rgb.x + rgb.y + rgb.z) * 0.33;\n\tb = 0.5 + 2.0 * b;\n\treturn b * heartColor;\n}\n\n\nvec3 filmic(vec3 x) {\n\tx *= 0.3;\n\tx = max(vec3(0.0) , x-0.004);\n\treturn (x*(6.2*x+.5))/(x*(6.2*x+1.7)+0.06);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 pos = getXY(fragCoord);\n\n\tvec3 col = mix(heartShadedColor(fragCoord), bgShadedColor(fragCoord), distHearts(pos));\n\tfragColor = vec4(filmic(col), 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Xd23zd","date":"1392416876","viewed":324,"name":"MathHearts","username":"winden","description":"A gift for my GF, my first distance-based shader made from scratch :)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["hearts"],"hasliked":0,"parentid":"","parentname":""}}