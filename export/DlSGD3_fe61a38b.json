{"ver":"0.1","info":{"id":"DlSGD3","date":"1673982927","viewed":80,"name":"Shader_01 - Squares","username":"grobo","description":"Just trying to get back into shader coding. It was a long time ago since I looked at this stuff but really hoping to get into it for real this time.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["squares"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nBeginner here trying to get back into Shaders\nafter a long break. Appreciate any pointers and\nadvice\n-Bj√∂rnstugan\n*/\n\n#define NUM_SQUARES 24.0\n#define GAMMA 2.2\n\n//Thanks to BigWIngs, learned about this\n//in one of his videos.\nfloat Length(vec2 uv, float k)\n{\n    uv = abs(uv);\n    return pow(pow(uv.x, k) + pow(uv.y, k), 1.0 / k);\n}\n\nmat2 Rot(float a)\n{\n    return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy) / iResolution.y;\n    vec3 res = vec3(0.0);\n    vec2 pulseUV = uv;\n    \n    float t = iTime;\n    float blur = 0.005;\n    float radius = 1.2;\n    float PI = 3.1415926535;\n    float fade = 64.0;\n    \n    float pulse = length(pulseUV);\n    pulse = smoothstep(0.1, 0.7, abs(sin(t+(1.0-pulse)*2.0))*3.0);\n    pulse *= 0.02;\n    \n    for(float i=0.0; i<1.0; i+=1.0/NUM_SQUARES)\n    {\n        uv *= Rot(sin(t*0.5+i)*0.15);\n        float square = Length(uv+vec2(sin(t)*0.1, cos(t)*0.1), 4.0);\n        square = smoothstep(blur, -blur*(1.0-i)*64.0, square-radius*(1.0-pow(i, 3.0))+pulse);\n        vec3 Color = mix(vec3(1.0, 0.8, 0.6), vec3(0.8, 0.7, 1.0), sin(t+PI*2.0+i));\n        \n        //is this the correct way of converting to perceptually linear?\n        Color.r = pow(Color.r, 1.0/GAMMA);\n        Color.g = pow(Color.g, 1.0/GAMMA);\n        Color.b = pow(Color.b, 1.0/GAMMA);\n        \n        res = max(res, square)*i*Color;\n    }\n    \n    fragColor = vec4(res,1.0);\n}","name":"Image","description":"","type":"image"}]}