{"ver":"0.1","info":{"id":"X3dGD7","date":"1716573546","viewed":42,"name":"rotating camera around cube","username":"liubi","description":"3d cube with rotating camera","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["camera"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float DistLine (vec3 ro, vec3 rd, vec3 p) {\n    return length(cross((p-ro), rd)/length(rd));\n}\n\nfloat DrawPoint(vec3 ro, vec3 rd, vec3 p) {\n    float dist = DistLine(ro, rd, p);\n    \n    dist = smoothstep(.1, .09, dist);\n    return dist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 ro = vec3(0, 0, -3);\n    vec3 rd = vec3(uv.x, uv.y, -2) - ro;\n    float zoom = 1.;\n    \n    float t = iTime;\n    ro = vec3(sin(t*2.), 0, 2.+cos(t*2.));\n    \n    vec3 lookat = vec3(.5);\n    vec3 f = normalize(lookat - ro);\n    vec3 r = cross(vec3(0., 1., 0.), f);\n    vec3 u = cross(f, r);\n    vec3 c = ro + f * zoom;\n    \n    vec3 i = c + uv.x * r + uv.y * u;\n    rd = i - ro;\n    \n    float dist = 0.;\n    dist += DrawPoint(ro, rd, vec3(.0, .0, .0));\n    dist += DrawPoint(ro, rd, vec3(.0, .0, 1.));\n    dist += DrawPoint(ro, rd, vec3(.0, 1., .0));\n    dist += DrawPoint(ro, rd, vec3(.0, 1., 1.));\n    dist += DrawPoint(ro, rd, vec3(1., .0, .0));\n    dist += DrawPoint(ro, rd, vec3(1., .0, 1.));\n    dist += DrawPoint(ro, rd, vec3(1., 1., .0));\n    dist += DrawPoint(ro, rd, vec3(1., 1., 1.));\n\n    // Output to screen\n    fragColor = vec4(dist);\n}","name":"Image","description":"","type":"image"}]}