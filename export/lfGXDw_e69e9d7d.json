{"ver":"0.1","info":{"id":"lfGXDw","date":"1715265621","viewed":245,"name":"Fork Fluidy flu vec2 725","username":"vec2","description":"Messing around with fluids again a bit. Seems that distributing the velocity with a quadratic spline kernel and distributing mass with a dynamic mass distribution makes for a relatively smooth liquid with really sharp detail","likes":20,"published":1,"flags":32,"usePreview":0,"tags":["fluid","particles","reintegration","mpm","apic"],"hasliked":0,"parentid":"ftlXW8","parentname":"Fluidy fluid"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//MIT License\n//Copyright 2021 Mykhailo Moroz\n\nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\trgb = rgb*rgb*(3.0-2.0*rgb); \t\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 C, in vec2 P )\n{\n    R = iResolution.xy; time = iTime; Mouse = iMouse;\n    P = floor(P);\n    \n    if(iMouse.z < 0.)\n    {\n        //P = iMouse.xy + 100.*(P/R.x - 0.5); \n    }\n    \n    float m = 0.0;\n    float rho = 0.0;\n    vec2 v = vec2(0.0);\n    vec2 nor = vec2(0.0);\n    range(i, -2, 2) range(j, -2, 2)\n    {\n        //load data\n        vec2 di = vec2(i,j);\n        vec4 data0 = A(P + di);\n        vec4 data1 = B(P + di);\n        \n        //unpack data\n        float m0 = data0.y;\n        vec2 x0 = 0.1*decode(data0.x) - fract(P);\n        vec2 v0 = decode(data1.x);\n        mat2 B0 = mat2(decode(data1.y),decode(data1.z)); //velocity gradient\n        //update particle position\n    \n        //find cell contribution\n        vec3 o = overlap(2.0*x0 + di + v0*dt , vec2(0.1));\n            x0 = x0 + di; \n        \n        m += m0*o.z;\n        \n        float w =  k1(1.0*x0);\n        \n        v += (v0 + 4.0*B0*x0)*w;\n        rho += m0*w;\n    }\n   // rho = step(0.1, rho)*rho; //isosurface\n    float arg = 0.5*(atan(v.y, v.x)/PI + 1.0);\n    float d = 2.5*length(v);\n    vec3 fluid = hsv2rgb(vec3(arg, 0.5, 0.3*d +0.*rho));\n    \n    C = vec4(vec3(pow(max(rho,0.00),0.5)), 1.0)*vec4(0.0,0.5,1.0,1.0);\n    C +=step(border(P),0.3)*0.1;\n        //C = vec4(vec3(rho), 1.0);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 R;\nvec4 Mouse;\nfloat time;\nint frame;\n\n#define A(p) texelFetch(iChannel0, ivec2(mod(p,R)), 0)\n#define B(p) texelFetch(iChannel1, ivec2(mod(p,R)), 0)\n\n#define CH(c, p) texelFetch(c, ivec2(mod(p,R)), 0)\n\n//loop in range\n#define range(i,a,b) for(int i = a; i <= b; i++)\n\n#define dt 1.0\n#define max_vel 1.0\n#define rad 1\n\n#define diffusion 0.25\n#define gravity 0.005\n\n#define PI 3.14159265\n\n#define rest_rho 1.0\n#define eos_pressure 0.5\n\n//reduce rotation/shearing of low density particles\n//without this the vacuum and border state very chaotic, but it still works fine\n//in usual MPM that isn't necessary since the particles don't change mass\nfloat affine_str(float m)\n{\n    return 1.0; //full APIC\n  //  return smoothstep(0.5*rest_rho,0.55*rest_rho,m);\n}\n\n//pressure equation of state\nfloat pressure(float rho)\n{\n    return 1.2*(rho - 0.5); //gas\n   // return eos_pressure*(pow(rho/rest_rho,4.) - 1.0); //Tait EOS (water)\n}\nfloat hash12(vec2 p)\n{\n\tvec3 p3 = mod(vec3(p.xyx) * .1031,1.0);\n\tp3 += dot(p3, p3.yzx + 33.33);\n\treturn mod((p3.x + p3.y) * p3.z,1.0);\n}\nfloat hash13(vec3 p3)\n{\n\tp3 = mod(p3 * .1031,1.0);\n\tp3 += dot(p3, p3.zyx + 31.32);\n\treturn mod((p3.x + p3.y) * p3.z,1.0);\n}\nvoid InitialConditions(inout float m, inout vec2 v, vec2 P)\n{\n    vec2 dx = P - R*vec2(0.3, 0.5);\n\n    float d = smoothstep(R.y*0.3, R.y*0.19, length(dx));  \n   //if(P.y>R.y-50.0) m += 0.2;\n    if(P.y>R.y-5.0) m += 0.02*clamp(pow(hash13(vec3(P, time )),8.0),0.0,1.0);\n\n //if(P.y>R.y-5.0) m += 0.84*clamp(pow(hash13(vec3(P, time )),738.0),0.0,1.0);\n   // v = d*0.3*normalize(vec2(dx.y,-dx.x));\n}\n\n//KERNEL FUNCTIONS\n\nfloat k0(vec2 dx) //linear kernel\n{\n    vec2 k = max(1.0 - abs(dx), 0.);\n    return k.x*k.y;\n}\n\nvec3 K0(vec2 dx) //linear kernel with the center of mass\n{\n    vec2 k = max(1.0 - abs(dx), 0.);\n    return vec3(dx*0.5, k.x*k.y);\n}\n\nfloat k1(vec2 dx) //quadratic kernel\n{\n    vec2 f = max(1.5 - abs(dx), 0.0);\n    vec2 k = min(max(0.75 - dx*dx, 0.5), 0.5*f*f);\n    return k.x*k.y;\n}\n\n//box size enstimator\nvec2 destimator(vec2 dx)\n{\n    return clamp(1.0 - 2.0*abs(dx), 0.0001, 1.0);\n}\n\n//box overlap with center of mass\nvec3 overlap(vec2 dx, vec2 box)\n{\n    vec2 min0 = max(dx - box*0.5, -0.5); \n    vec2 max0 = min(dx + box*0.5, 0.5); \n    vec2 size = max(max0 - min0, 0.); \n    return vec3(0.5*(max0 + min0), size.x*size.y/(box.x*box.y));\n}\n\n//boundary\n#define border_h 1.0\nmat2 Rot(float ang)\n{\n    return mat2(cos(ang), -sin(ang), sin(ang), cos(ang)); \n}\n\nvec2 Dir(float ang)\n{\n    return vec2(cos(ang), sin(ang));\n}\nfloat smin( in float k, in float a, in float b )\n{\n    k *= 4.0;\n    float h = max(k-abs(a-b),0.0);\n    float m = 0.25*h*h/k;\n    float n = 0.50*  h/k;\n    return ( min(a,  b) - m );\n}\nvec3 smin( in float k, in vec3 a, in vec3 b )\n{\n    k *= 4.0;\n    float h = max(k-abs(a.x-b.x),0.0);\n    float m = 0.25*h*h/k;\n    float n = 0.50*  h/k;\n    return vec3( min(a.x,  b.x) - m, \n                 mix(a.yz, b.yz, (a.x<b.x)?n:1.0-n) );\n}\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\nfloat sdSphere( in vec2 p, in float s )\n{   \n    return length(p)-s;\n}\n//https://www.shadertoy.com/view/MclyWf\nfloat h(vec2 u){\n   return (5.*sin(.032*u)*sin(.022*u.yx)+6.*cos(.046*u.yx+.7)*cos(.026*u)).y;\n}\nfloat g(vec2 u){\n   \n   return 2.0*h(0.2*u.yx)+1.0*h(0.5*u.yx)+  h(u) + .5*h(2.*u.yx)+ .3*h(3.*u+1.)+ .1*h(8.*u+1.);\n}\n\nfloat f(vec2 u){\n   return clamp(exp(g(u))-15.,0.,1.);\n}\n\n\n\nfloat dgx(vec2 u){\n   return g(u+vec2(1,0))-g(u-vec2(1,0));\n}\n\nfloat border(vec2 p)\n{\n    float bound = -border_h-sdBox(p - R*0.5, R*vec2(0.5, 0.5)); \n    \n//bound=min(bound,sdSphere(p-R*0.5,50.0));\n//bound=min(bound,sdBox(p-R*0.5,vec2(5.0,R.y/4.0) ));\n//bound=smin(6.0,bound,sdBox(p-vec2(40.0,200.0),vec2(10.0,150.0) ));\n//bound=smin(6.0,bound,sdBox(p-vec2(200.0,200.0),vec2(150.0,10.0) ));\n//bound=smin(6.0,bound,sdBox(p-vec2(400.0,300.0),vec2(150.0,10.0) ));\n//bound=smin(6.0,bound,sdBox(p-vec2(550.0,340.0),vec2(150.0,10.0) ));\n//bound=smin(6.0,bound,sdBox(p-vec2(750.0,380.0),vec2(150.0,40.0) ));\n//bound=smin(6.0,bound,sdBox(p-vec2(290.0,130.0),vec2(150.0,10.0) ));\n//bound=smin(6.0,bound,sdBox(p-vec2(310.0,150.0),vec2(10.0,10.0) ));\n//bound=smin(6.0,bound,sdBox(p-vec2(190.0,150.0),vec2(10.0,10.0) ));\n//bound=smin(6.0,bound,sdSphere(p-vec2(370.0,250.0),20.0));\n//bound=smin(6.0,bound,sdSphere(p-vec2(290.0,300.0),20.0));\n//bound=smin(6.0,bound,sdSphere(p-vec2(390.0,330.0),30.0));\n//bound=smin(6.0,bound,sdBox(p-vec2(450.0,200.0),vec2(10.0,100.0) ));\n//bound=smin(6.0,bound,sdBox(p-vec2(450.0,30.0),vec2(10.0,30.0) ));\n//bound=smin(6.0,bound,sdBox(p-vec2(650.0,110.0),vec2(10.0,90.0) ));\n//bound=smin(6.0,bound,sdBox(p-vec2(600.0,100.0),vec2(10.0,100.0) ));\n//bound=smin(6.0,bound,sdBox(p-vec2(750.0,110.0),vec2(10.0,90.0) ));\n//bound=smin(6.0,bound,sdBox(p-vec2(800.0,100.0),vec2(10.0,100.0) ));\n///bound=smin(3.0,bound,sdBox(p-vec2(700.0,30.0),vec2(50.0,10.0) ));\n//bound=smin(3.0,bound,sdBox(p-vec2(670.0,200.0),vec2(20.0,10.0) ));\n//bound=smin(3.0,bound,sdBox(p-vec2(730.0,200.0),vec2(20.0,10.0) )); \n\nbound=g(p*2.5);\n\n    return bound+1.5;\n}\n\n#define h 2.\nvec3 bN(vec2 p)\n{\n    vec3 dx = vec3(-h,0,h);\n    vec4 idx = vec4(-1./h, 0., 1./h, 0.25);\n    vec3 r = idx.zyw*border(p + dx.zy)\n           + idx.xyw*border(p + dx.xy)\n           + idx.yzw*border(p + dx.yz)\n           + idx.yxw*border(p + dx.yx);\n    return vec3(normalize(r.xy), r.z + 1e-4);\n}\n\n//DATA PACKING\n\nuint pack(vec2 x)\n{\n    x = 65534.0*clamp(0.5*x+0.5, 0., 1.);\n    return uint(round(x.x)) + 65535u*uint(round(x.y));\n}\n\nvec2 unpack(uint a)\n{\n    vec2 x = vec2(a%65535u, a/65535u);\n    return clamp(x/65534.0, 0.,1.)*2.0 - 1.0;\n}\n\nvec2 decode(float x)\n{\n    uint X = floatBitsToUint(x);\n    return unpack(X)*1.0; \n}\n\nfloat encode(vec2 x)\n{\n    uint X = pack(x/1.);\n    return uintBitsToFloat(X); \n}\n\n//particle to grid\nvec4 P2G(sampler2D a, sampler2D b, vec2 P)\n{\n    vec2 x = vec2(0.0);\n    vec2 v = vec2(0.0);\n    float m = 0.0;\n    float rho = 0.0;\n    \n    range(i, -rad, rad) range(j, -rad, rad)\n    {\n        //load data\n        vec2 di = vec2(i,j);\n        vec4 data0 = CH(a, P + di);\n        vec4 data1 = CH(b, P + di);\n        \n        //unpack data\n        float m0 = data0.y;\n        float r0 = data0.w;\n        vec2 x0 = decode(data0.x);\n        vec2 v0 = decode(data1.x);\n        //mat2 B0 = mat2(decode(data1.y),decode(data1.z)); //velocity gradient\n        \n        //estimate the shape of the distribution\n        vec2 box = destimator(x0);\n        \n        //update particle position\n        x0 = x0 + di + v0*dt;\n    \n        //find cell contribution\n        vec3 o = overlap(x0, box);\n         \n        //update distribution\n        x += m0*o.xy*o.z;\n        m += m0*o.z;\n        \n        //find grid node contribution\n        float w = k1(x0);\n        //rho += m0*(w-(B0[0].x+B0[0].y)*0.01);\n        \n        //distribute momentum onto grid\n        v += v0*w*m0;\n        rho += m0*w;\n    }\n    \n    //normalize\n    if(rho > 0.0) v /= rho;\n    if(m > 0.0) x /= m;\n    \n    //initial conditions\n    //if(frame < 20)\n    {\n        InitialConditions(m, v, P);\n    }\n    \n    v = (length(v)>max_vel)?normalize(v)*max_vel:v;\n    \n    return vec4(encode(x), m, encode(v), rho);\n}\n\n//grid to particle\nvec4 G2P(sampler2D a, sampler2D b, vec2 P)\n{\n    vec2 V = vec2(0.0);\n    mat2 B = mat2(0.0);\n    \n    vec4 data = CH(a, P);\n    float m = data.y;\n    vec2 x = decode(data.x);\n    \n    range(i, -rad, rad) range(j, -rad, rad)\n    {\n        //load data\n        vec2 di = vec2(i,j);\n        vec4 data0 = CH(a, P + di);\n        \n        //unpack data\n        float m0 = data0.y;\n        float rho = data0.w;\n        vec2 dx = x - di;\n        vec2 v0 = decode(data0.z);\n        \n        //find grid node contribution\n        float w = k1(dx);\n        \n        float P = clamp(pressure(rho), -0.5, 0.5);\n        vec2 F = rho*dx*P;\n        \n        //distribute velocities/forces to particles\n        V += (F*dt)*w;\n        B += affine_str(m)*mat2(v0*dx.x,v0*dx.y)*w;\n    }\n      //gravity\n     V += vec2(0.0, -gravity)*dt;\n    \n    V += 1.0005*decode(data.z);\n    \n  \n    \n    //push fluid\n   // V += vec2(0.0, 0.5)*exp(-0.02*pow(distance(P, R*vec2(0.7,0.3)), 2.));\n    \n    if(Mouse.z > 0.)\n    {\n        vec2 dx = (Mouse.xy - P); \n        V += 0.05*exp(-0.09*length(dx))*dx*dt; \n    }\n    \n    //border \n    vec3 N = bN(P + x);\n    float vdotN = step(N.z, border_h)*dot(-N.xy, V);\n    //V *= 1. - 0.1*exp(-N.z);\n    V += (0. + 1.5*max(vdotN, 0.0))*N.xy*step(abs(N.z), border_h)*exp(-N.z);\n    V = (length(V)>max_vel)?normalize(V)*max_vel:V;\n\n    if(abs(V.y)<0.01)V.y+=sign(hash13(vec3(P, time ))-0.5)*0.03;\n    if(abs(V.x)<0.01)V.x+=sign(hash13(vec3(P, time ))-0.5)*0.03;\n\n    return vec4(encode(V), encode(B[0]), encode(B[1]), 1.0);\n}\n\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Advect mass distributions and distrubute the momentum and density to grid\n\n//Advect + P2G\n\nvoid mainImage( out vec4 C, in vec2 P )\n{\n    R = iResolution.xy; time = iTime; Mouse = iMouse; frame = iFrame;\n    P = floor(P);\n   \n    C = P2G(iChannel0,iChannel1,P);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//Distribute grid velocities to the mass distributions\n\n//G2P\n\n//technically its more correct to do the force in the P2G step 2\n//but I didn't want to waste a buffer here\n\nvoid mainImage( out vec4 C, in vec2 P )\n{\n    R = iResolution.xy; time = iTime; Mouse = iMouse; frame = iFrame;\n    P = floor(P);\n    C = G2P(iChannel0, iChannel1, P);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"//Advect + P2G\n\nvoid mainImage( out vec4 C, in vec2 P )\n{\n    R = iResolution.xy; time = iTime; Mouse = iMouse; frame = iFrame;\n    P = floor(P);\n   \n    C = P2G(iChannel0,iChannel1,P);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"//G2P\n\nvoid mainImage( out vec4 C, in vec2 P )\n{\n    R = iResolution.xy; time = iTime; Mouse = iMouse; frame = iFrame;\n    P = floor(P);\n    C = G2P(iChannel0, iChannel1, P);\n}","name":"Buffer D","description":"","type":"buffer"}]}