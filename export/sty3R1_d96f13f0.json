{"ver":"0.1","info":{"id":"sty3R1","date":"1637150101","viewed":254,"name":"Mipmap Reaction Diffusion V4","username":"benoitM","description":"MOUSE CLIC to see effect.\nFast Reaction Diffusion using mipmaps\nHaving fun ;)","likes":7,"published":3,"flags":32,"usePreview":0,"tags":["mipmap","diffusion","highpass","reaction","gpmipmap","golfed"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n//     Fast & Simple Reaction Diffusion Pattern Variation 4            //\n//                                                                     //\n//             by Benoit Marini - 16/11/2021                           //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// from \"Fast & Simple & Dirty Reaction Diffusion Pattern\"             //\n// Only using mipmaps for convolutions                                 //\n// Basic idea here :                                                   //\n// https://www.shadertoy.com/view/flGGzR                               //\n//                                                                     //\n// This shader is a variation of                                       //\n// https://www.shadertoy.com/view/slyGR1                               //\n//                                                                     //     \n/////////////////////////////////////////////////////////////////////////  \n\nM\n    T(0.);                    // FORM (stored on alpha channel)\n    o.rgb = sin((o.r+o.a)*vec3(1,2,3)); // COLOR from green channel (multiplied by Form)\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 o, vec2 i ) {   \n\n   o=step (.01,T(0.)-T(S)) ;    // FORM \n   o.r = (o.a>.5)? T(0.).r : -.5; //COLOR\n   if( T(4.5).r <.1 ) o.r+=.02;   //COLOR\n \n}\n\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 o, vec2 i ) {\n\n     o=T(S-1.) + exp(-i.x*i.y);    // FORM on .a chanel  // o = T(f,2.5) + .....\n     o.r = T(1.).r ;            // COLOR on .r chanel   \n    // if ( T(f,99.).a > .4 ) o-=o; // RESET if form cover more than 40% of the screen, work with 2^99 screens resolutions ;)\n}\n\n//////////////////////////////////////////////////////\n// FORM : blur buffer A + add small perturbation    //\n//////////////////////////////////////////////////////\n// COLOR : blur buffer A                            //\n//////////////////////////////////////////////////////\n\n","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define M void mainImage( out vec4 o, vec2 i ) { o=\n#define R iResolution.xy\n#define S 4.+.5*sin(iTime)\n#define T(l) texture(iChannel0, (i/R) * (1.+.01*(iMouse.xy/R-.5)) ,l)\n\n","name":"Common","description":"","type":"common"}]}