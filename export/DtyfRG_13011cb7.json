{"ver":"0.1","info":{"id":"DtyfRG","date":"1702174078","viewed":15,"name":"Flow in the density","username":"Buchibuchi","description":"Tutorial + GPT promting","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["densityflowcolours"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette(float t) {\n    vec3 a = vec3(0.5, 0.2, 0.7);\n    vec3 b = vec3(0.5, 0.4, 0.8);\n    vec3 c = vec3(1.0, 0.6, 1.0);\n    vec3 d = vec3(0.0, 0.333, 0.667);\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nvec2 mandelbrot(vec2 z, vec2 c) {\n    return vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n}\n\n// Función para simular gotas moviéndose fractalmente\nvec3 renderDrops(vec2 uv, float time) {\n    vec3 color = vec3(0.0);\n    for (int i = 0; i < 5; i++) {\n        vec2 dropPos = vec2(sin(time + float(i)), cos(time + float(i) * 1.1)) * 0.5;\n        float dropSize = 0.05 + 0.02 * sin(time + float(i));\n        float dropFade = smoothstep(dropSize, dropSize + 0.01, length(uv - dropPos));\n        color += (1.0 - dropFade) * vec3(0.8, 0.2, 0.7);\n    }\n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y;\n    vec3 finalColor = vec3(0.0);\n    vec2 c = vec2(0.5, 0.5); // Punto central del fractal\n\n    float slowTime = iTime * 0.1;\n\n    for (float i = 0.0; i < 2.0; i++) {\n        vec2 z = uv;\n        int iterations = 0;\n        for (int j = 0; j < 100; j++) {\n            z = mandelbrot(z, c);\n            if (length(z) > 2.0) break;\n            iterations++;\n        }\n\n        float d = float(iterations) / 100.0;\n        vec3 col = palette(d + slowTime);\n        finalColor += col * (1.0 - d);\n    }\n\n    // Agregar las gotas fractales\n    finalColor += renderDrops(uv, slowTime);\n\n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}