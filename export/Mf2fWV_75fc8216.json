{"ver":"0.1","info":{"id":"Mf2fWV","date":"1725541922","viewed":55,"name":"Halloween penta","username":"Efim","description":"this object is located in the center of the \"Barth Sextic\" surface\nhttps://mathworld.wolfram.com/BarthSextic.html","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","noise","implicit","bisect","barth","icosahedral"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Halloween penta\n//raytracing,bisect,implicit,noise,icosahedral,barth\n/*\nthis object is located in the center of the \"Barth Sextic\" surface\nhttps://mathworld.wolfram.com/BarthSextic.html\n*/\n\n// Precision-adjusted variations of https://www.shadertoy.com/view/4djSRW\nfloat hash(float p) { p = fract(p * 0.011); p *= p + 7.5; p *= p + p; return fract(p); }\n//\t<https://www.shadertoy.com/view/4dS3Wd>\n//\tBy Morgan McGuire @morgan3d, http://graphicscodex.com\n\n// This one has non-ideal tiling properties that I'm still tuning\nfloat noise(float x) {\n\tfloat i = floor(x);\n\tfloat f = fract(x);\n\tfloat u = f * f * (3.0 - 2.0 * f);\n\treturn mix(hash(i), hash(i + 1.0), u);\n}\n\nfloat noise(vec3 x) {\n\tconst vec3 step = vec3(110, 241, 171);\n\n\tvec3 i = floor(x);\n\tvec3 f = fract(x);\n \n\t// For performance, compute the base input to a 1D hash from the integer part of the argument and the \n\t// incremental change to the 1D based on the 3D -> 1D wrapping\n    float n = dot(i, step);\n\n\tvec3 u = f * f * (3.0 - 2.0 * f);\n\treturn mix(mix(mix( hash(n + dot(step, vec3(0, 0, 0))), hash(n + dot(step, vec3(1, 0, 0))), u.x),\n                   mix( hash(n + dot(step, vec3(0, 1, 0))), hash(n + dot(step, vec3(1, 1, 0))), u.x), u.y),\n               mix(mix( hash(n + dot(step, vec3(0, 0, 1))), hash(n + dot(step, vec3(1, 0, 1))), u.x),\n                   mix( hash(n + dot(step, vec3(0, 1, 1))), hash(n + dot(step, vec3(1, 1, 1))), u.x), u.y), u.z);\n}\n\n\n\n\n/////=====================================================================================\n#define PI  3.14159265359\n#define TAU 6.28318530718\n#define rot(f) mat2(cos(f), -sin(f), sin(f), cos(f))\n#define nn 100.\n#define newton 5\n\n\nfloat map(vec3 p) {\n    float x = p.x, y = p.y, z = p.z, f = 1., w = 1.;\n    return -4.*(f*f*x*x - y*y)*(f*f*y*y - z*z)*(f*f*z*z - x*x) + (1. + 2.*f)*(x*x + y*y + z*z - w*w)*(x*x + y*y + z*z - w*w)*w*w - 0.25;\n}\n\nvec3 calcNormal(in vec3 p) {\n    const float eps = 0.0001;\n    vec2 q = vec2(0.0, eps);\n    vec3 res = vec3(map(p + q.yxx) - map(p - q.yxx), map(p + q.xyx) - map(p - q.xyx), map(p + q.xxy) - map(p - q.xxy));\n    return normalize(res);\n}\n\nvec3 getPoint(vec3 a, vec3 b, float v0, float v1) {\n    vec3 m;\n    //binary search with  n iterations, n = newton\n    for(int i = 0; i < newton; i++) {\n        m = (a + b) * 0.5;\n        float v = map(m);\n        if(v == 0.)\n            break;\n\n        if(sign(v) * sign(v0) <= 0.) {\n            v1 = v;\n            b = m;\n        } else {\n            v0 = v;\n            a = m;\n        }\n    }\n    return m;\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l - p), r = normalize(vec3(f.z, 0, -f.x)), u = cross(f, r), c = f * z, i = c + uv.x * r + uv.y * u;\n    return normalize(i);\n}\n/*\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 2\n#endif\n*/\n\n\n#define AA 1\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    float dist_infin = 1.5;\n    float hh = 3.;\n\n    vec3 light = normalize(vec3(0.0, 1.0, -2.5)); //light\n    vec2 mo = 1.5*cos(0.5*iTime + vec2(0,11));\n    if  (iMouse.z > 0.0)\n    {\n        mo = (-iResolution.xy + 2.0 * (iMouse.xy)) / iResolution.y;\n    }\n    vec3 ro = vec3(0.0, 0.0, hh); // camera\n    //camera rotation\n    ro.yz *= rot(mo.y);\n    ro.xz *= rot(-mo.x - 1.57);\n\n    const float fl = 1.5; // focal length\n    float dist = dist_infin;\n\n    vec3 bg = vec3(0.7, 0.7, 0.9)*0.6; //vec3(0.); //\n    vec3 col1 = vec3(0.73, 0.59, 0.3);\n    vec3 col2 = vec3(0.72, 0.01, 0.01);\n\n    //antialiasing\n    vec3 tot = vec3(0.0);\n    for(int m = 0; m < AA; m++) for(int n = 0; n < AA; n++) {\n            vec2 o = vec2(float(m), float(n)) / float(AA) - 0.5;\n            vec2 p = (-iResolution.xy + 2.0 * (fragCoord + o)) / iResolution.y;\n            vec3 rd = GetRayDir(p, ro, vec3(0, 0., 0), fl); //ray direction\n            vec3 col = bg; // background  \n\n            //STEP 1. Calculating bounding sphere\n            float d = length(cross(ro, rd));\n            if(d >= dist) {\n                tot += col;\n                continue;\n            }\n            /*\n            STEP 2.\n            ray tracing inside the bounding sphere, \n            searching for a segment with different signs of the function value \n            at the ends of the segment\n            */\n            float td = abs(dot(ro, rd));\n            d = sqrt(dist * dist - d * d);\n            vec3 pos0 = ro + rd * (td - d);\n            vec3 pos1 = ro + rd * (td + d);\n            vec3 rd0 = pos1 - pos0;\n            vec3 pos = pos0;\n            float val0 = map(pos0);\n            for(float i = 1.; i < nn; i++) {\n                pos1 = pos0 + rd0 * i / (nn - 1.);\n                float val1 = map(pos1);\n                if(sign(val0) * sign(val1) <= 0.) {\n                    //different signs of the function value  at the ends of the segment\n                    //STEP 3. binary search to clarify the intersection of a ray with a surface.\n                    pos = getPoint(pos, pos1, val0, val1);\n                    vec3 nor = calcNormal(pos);\n                    col = col1;\n                    \n                    if (dot(pos, nor) < 0.0)\n                        col = col2*(1. + (0.5 - noise(iTime*3.))*1.18);\n                    //texture\n                    \n                    float tx = noise(pos*2.);\n                    tx = fract(tx*5.);\n                    tx = smoothstep(0., 0.01, tx-0.5);\n                    col*=tx;\n                    \n\n                    //else break;    \n                    vec3 R = reflect(light, nor);\n                    float specular = pow(max(abs(dot(R, rd)), 0.), 25.);\n                    float difu = abs(dot(nor, light));\n                    col = col * (col * clamp(difu, 0., 1.0) + 0.5) + vec3(.5) * specular * specular;\n                    col = sqrt(col);\n                    break;\n                }\n                //if (sign(val1) < 0.) col = col2;\n                val0 = val1;\n                pos = pos1;\n            }\n            tot += col;\n        }\n    tot = tot / float(AA) / float(AA);\n    //antialiasing\n    fragColor = vec4(tot, 1.0);\n}","name":"Image","description":"","type":"image"}]}