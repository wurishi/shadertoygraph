{"ver":"0.1","info":{"id":"NsyGRc","date":"1631831737","viewed":50,"name":"Warping Flower","username":"ndevlin","description":"A colorful, warping flower that shifts using sin and cosin functions","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["warpingflower"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n// Make a vec3 color from rgb values [0, 255]\nvec3 rgb(float r, float g, float b)\n{\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Default Color\n    fragColor = vec4(rgb(255.0, 255.0, 210.0), 1.0);\n    \n    float aspectRatio = 640.0f / 360.0f;\n    \n    vec2 center = vec2(0.5f, 0.5f);\n    \n    uv.x *= aspectRatio; // Make circular\n    \n    uv.x -= 0.4f; // Shift back to center\n    \n    vec2 uvCentered = uv - vec2(0.5, 0.5);\n    \n    \n    float theta = atan(uvCentered.x, uvCentered.y);\n    \n    float radiusAtPoint = 0.3;\n    \n    radiusAtPoint = 0.3f + (sin(cos(theta * 3.0f) + iTime * 2.0f)) / 7.0f;\n    \n    \n    \n    if(length(uv - center) < radiusAtPoint)\n    {\n         fragColor = vec4(0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4)), 1.0f);\n\n    }\n\n}\n\n","name":"Image","description":"","type":"image"}]}