{"ver":"0.1","info":{"id":"Xdy3D3","date":"1456614568","viewed":139,"name":"technique cube","username":"Dermenslof","description":"cube","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["cube"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// start edition\n\n#define TEXTURE\n#define XRAY\n//#define COLOR\n\n#define SYM 1\n#define BUFFER 0\n#define INOUT 1 /* 0=in 1=out */\n\n// end edition\n\n//don't touch\n#define R iResolution.xy\n#define T iTime\n#ifndef TEXTURE\n\t#define COLOR\n#elif BUFFER > 0\n\t#undef COLOR\n#endif\n\nstruct Ray \n{\n    vec3 origin;\n    vec3 dir;\n};\n//don't touch\n    \nbool iBox(Ray r, float size, out float t0, out float t1)\n{\n    vec3 invR = 1. / r.dir;\n    vec3 tbot = invR * (-size / 2. - r.origin);\n    vec3 ttop = invR * (size / 2. - r.origin);\n    vec3 tmin = min(ttop, tbot);\n    vec3 tmax = max(ttop, tbot);\n    vec2 t = max(tmin.xx, tmin.yz);\n    t0 = max(t.x, t.y);\n    t = min(tmax.xx, tmax.yz);\n    t1 = min(t.x, t.y);\n    return t0 <= t1;\n}\n\nbool getBox(Ray r, float size, out vec3 color, out float len)\n{\n    float tnear, tfar;\n    if (iBox(r, size, tnear, tfar))\n\t{\n\t   \tif (tnear < 0.0)\n            tnear = 0.0;\n\t\t\n\t   \tvec3 rayStart = r.origin + r.dir * tnear;\n\t    vec3 rayStop = r.origin + r.dir * tfar;\n\t\n\t\trayStart = 0.5 * (rayStart + 1.0);\n\t\trayStop = 0.5 * (rayStop + 1.0);\n        \n\t\tvec3 dir = rayStop - rayStart;\n   \t\tdir = normalize(dir);\n   \t\tlen = distance(rayStart, rayStop);\n        color = INOUT == 0 ? rayStop : rayStart;\n        return true;\n    }\n    return false;\n}\n\nvoid mainImage( out vec4 C, in vec2 U )\n{\n\tvec2 uv = 2. * U.xy / R - 1.;\n   \tuv.x *= R.x / R.y;\n\tC.rgb = vec3(0);\n    \n    vec3 ro = vec3(cos(T), -sin(T), sin(T));\n    vec3 cf = -ro; \n    vec3 cs = normalize(cross(cf,vec3(0., 1., 0.))); \n    vec3 cu = normalize(cross(cs, cf)); \n \tvec3 rd = normalize(uv.x * cs + uv.y * cu + 2. * cf);\n\n    Ray r = Ray(ro * 4., rd);\n\tfloat size = 2.;\n    vec3 color;\n    float len;\n\tif (getBox(r, size, color, len))\n    {\n        float l = size / 2.;\n        #ifdef TEXTURE\n        \tvec3 p = (2. * color - 1.) / size;\n        \tif (SYM > 0 || BUFFER > 0)\n            {\n        \t\tp = abs(p);\n            \tif (SYM > 0 && BUFFER < 1)\n                    p.y *= -1.;\n            }\n        \tif (abs(abs(abs(p.z) - .5) - .0001)  < .0002)\n            {\n                if (BUFFER > 0)\n       \t\t \t\tC.rgb = texture(iChannel1, vec2(sign(p.z),1) * (vec2(.5) + p.xy)).rgb;\n                else\n                    C.rgb = texture(iChannel0, vec2(sign(p.z),1) * (vec2(.5) + p.xy)).rgb;\n            }\n        \telse if (abs(abs(abs(p.y) - .5) - .0001)  < .0002)\n            {\n                if (BUFFER > 0)\n       \t\t \t\tC.rgb = texture(iChannel1, vec2(1,sign(p.y)) * (vec2(.5) + p.xz)).rgb;\n                else\n                    C.rgb = texture(iChannel0, vec2(1,sign(p.y)) * (vec2(.5) + p.xz)).rgb;\n            }\n        \telse if (abs(abs(abs(p.x) - .5) - .0001)  < .0002)\n            {\n                if (BUFFER > 0)\n       \t\t \t\tC.rgb = texture(iChannel1, vec2(sign(p.x),1) * (vec2(.5) + p.zy)).rgb;\n                else\n                    C.rgb = texture(iChannel0, vec2(sign(p.x),1) * (vec2(.5) + p.zy)).rgb;\n            }\n        #else\n        \tC.rgb = color;\n        #endif\n        \n        #ifdef XRAY\n            #ifdef TEXTURE\n                size /= 2.;\n        \t#endif\n        \tC.rgb *= len / size;\n        #endif\n        #ifdef COLOR\n        \tC.rgb *= color;\n    \t#endif        \n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\n *  from https://www.shadertoy.com/view/4sdGzn by renom\n */\n\n#define SCALE 33.\n\nfloat isInSuperellipse(vec2 p, vec2 o, float r, float n)\n{\n    p = pow(abs((p - o) / r), vec2(n));\n    float s = p.x + p.y;\n    return (s <= 1. ? sqrt(1. - s) : .0);\n}\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    vec2 R = iResolution.xy, p = U / R.y * SCALE;\n    vec4 info = texture(iChannel0, (.5 + floor(p)) / R);\n\tO = vec4(info.xyz * isInSuperellipse(fract(p), vec2(.5), .5, 4. * info.w), 1.);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define SCALE 33.\n\nfloat hash12(vec2 p)\n{\n    return  fract(sin(dot(p.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec3 hash32(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(443.8975,397.2973, 491.1871));\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    U = floor(U);\n    vec2 R = iChannelResolution[0].xy;\n    float r = R.x / R.y;\n    if(U.y > SCALE || U.x > ceil(r * SCALE)) discard;\n    O = vec4(hash32(U), hash12(U * ceil(iTime)));\n}","name":"Buf B","description":"","type":"buffer"}]}