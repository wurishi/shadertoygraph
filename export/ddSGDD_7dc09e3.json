{"ver":"0.1","info":{"id":"ddSGDD","date":"1668427992","viewed":53,"name":"Fork Cell Align tempdeltav 567","username":"tempdeltavalue","description":"Cell Alignment tutorial (video: https://youtu.be/dCDOFsgNnnQ)","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["ca","sumilation"],"hasliked":0,"parentid":"3dtyW7","parentname":"Cell Alignment tutorial"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 gridPos = fragCoord;\n    if (iMouse.z > 0.0) { // zoom\n        gridPos -= iResolution.xy*0.5;\n        gridPos = gridPos/20.0 + iMouse.xy;\n    }\n    vec2 uv = gridPos/iResolution.xy;\n\n    vec4 data = texture(iChannel0, uv);\n    fragColor = data;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float PI = 3.14159265359;\n\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 ang2vec(float a) {\n    return vec2(cos(a), sin(a));\n}\n\nvec2 read(vec2 p) {\n\treturn texture(iChannel0, p/iResolution.xy).xy;\n}\n\nvec2 avgpool(vec2 p) {\n  vec2 acc = vec2(0.0);\n  for (int y=-1; y<=1; ++y)   \n  for (int x=-1; x<=1; ++x) {\n    acc += read(p + vec2(x, y));\n  }\n  return acc / 9.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    //if (iFrame == 0) {\n    float a = hash13(vec3(fragCoord+vec2(34299.0, -56593.0), 0.0)) * iTime * PI * 10.;\n        \n    fragColor = vec4(ang2vec(a), 0.0, 0.0);\n    //}\n    \n    vec2 v = normalize(avgpool(fragCoord));\n    //vec2 v0 = read(fragCoord);\n    fragColor = vec4(v, 0., 0.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}