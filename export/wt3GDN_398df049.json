{"ver":"0.1","info":{"id":"wt3GDN","date":"1583099329","viewed":170,"name":"test-water-splash","username":"shrekshao","description":"test","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n\t\t+ i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    //uv.y *= iResolution.y / iResolution.x;\n\n    // Time varying pixel color\n    // vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    \n    vec3 col;\n    vec2 origin = vec2(0.5, 0.5);\n    \n    vec2 d = uv - origin;\n    \n    d.y *= iResolution.y / iResolution.x;\n    \n    //atan(d.y, d.x)\n    \n    float r = length(d);\n    \n    float a = atan(d.y, d.x);\n    \n    \n    // properties\n    float radius = 0.1;\n    float rim = radius * 0.5;\n    float bumpy = .03;\n    float bias = .15;\t// low frequency bias contribution\n    float rimDots = .1;\n    \n    float f = radius;\n    //f += radius;\n    //float f = r * 0.5;\n    //f += ( abs(cos(a*2.5))*.5+.3 ) * 1.;\n    //float f = abs(cos(a * 9.) + .1);\n    //f += abs(cos(a * 3. + .5) + .1);\n    //f += abs(cos(r * 4.) * 0.2);\n    \n    //f += snoise(vec2(a + 10.2, 7.) * 3.4) * .5;\n    //f += snoise(vec2(uv.x, uv.y) * 3.4) * 2.5;\n\n    //f += snoise(vec2(uv.x, uv.y) * 8.) * 2.;\n    //float f2 = snoise(vec2(a, 0.) * 10.);\n    //f += step(r, .3);\n    \n    //col = vec3(1.-smoothstep(f,f+0.02,r));\n    //col = vec3( max(step(r, f), step(r, .3))  );\n    \n    //r += snoise(vec2(uv.x * 3., uv.y * 3.2) * 1.) * .1;\n    //r += -abs(cos(a * 9.)) * .01;\n    \n    \n    //float mr = r;\t// modifed radius\n    \n    // noise bumpy circle at edge high frequency\n    r += bumpy * ( -0.5 + snoise( vec2(d * 20.) + iTime * .67 ) + 0.1 );\n    \n    // noise bump circle low frequency bias\n    //r += -bias * (sin(a * 5.) * .25);\n    \n    // global offset for dots, influence max at edge of circle\n    r += rimDots * ( 0.2 -0.5 + snoise(d * 12. + vec2(iTime, 0.) )) * ( smoothstep(radius - rim, radius, r) - smoothstep(radius, radius + rim, r) );\n    \n    col = vec3( step(r , f) );\n    //col = vec3( step(r , f * .1) );\n    //col = vec3(  step(r, snoise(vec2(f, r)) * 0.1)   );\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}