{"ver":"0.1","info":{"id":"wslcD8","date":"1584744027","viewed":526,"name":"Old Broken TV","username":"KilledByAPixel","description":"rework of code from tv shaders, mostly inspired by https://www.shadertoy.com/view/ldXGW4","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["tv","crt","glitch","analog"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by Frank Force\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nconst float scanlines = 0.3;\nconst float fuzz = .005;\nconst float fuzzDensity = 999.;\nconst float chromatic = .005;\nconst float staticNoise = .9;\nconst float ghost = 0.2;\nconst float verticalMovement = 2.;\nconst float verticalMovementPercent = .2;\nconst float vignette = 1.1;\nconst float pi = 3.14159265359;\n\n// https://www.shadertoy.com/view/lsf3WH Noise by iq\nfloat hash(vec2 p)\n{\n    p  = 50.0*fract( p*0.3183099 + vec2(0.71,0.113));\n    return -1.0+2.0*fract( p.x*p.y*(p.x+p.y) );\n}\n\nfloat noise( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\tvec2 u = f*f*(3.0-2.0*f);\n    return mix( mix( hash( i + vec2(0.0,0.0) ), \n                     hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ), \n                     hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // noise\n    vec4 c = vec4(0);\n    c += staticNoise * ((sin(iTime)+2.)*.3)*sin(.8-uv.y+sin(iTime*3.)*.1) *\n        noise(vec2(uv.y*999. + iTime*999., (uv.x+999.)/(uv.y+.1)*19.));\n    \n    // fuzz on edges\n    uv.x += fuzz*noise(vec2(uv.y*fuzzDensity, iTime*9.));\n    \n    // vertical movement\n    uv.y += mix(0., sin(iTime*.2)*5.0,\n    \tstep(noise(vec2(iTime*.5,0.))*.5+.5, verticalMovementPercent));\n    uv.y = fract(uv.y);\n    \n    // ghosting\n    float g = hash(vec2(uv.x+sin(iTime), uv.y));\n    uv.x += mix(0., sin(iTime/5.0)*0.5, step(g, ghost - 1.));\n    uv.y += mix(0., .2*sin(iTime/5.0)*0.5, step(g, ghost - 1.));\n    \n    // chromatic aberration\n    c += vec4\n    (\n        texture(iChannel0, uv + vec2(-chromatic, 0)).r,\n        texture(iChannel0, uv + vec2( 0        , 0)).g,\n        texture(iChannel0, uv + vec2( chromatic, 0)).b,\n        1.\n    );\n    \n    // scanlines\n    uv = fragCoord/iResolution.xy;\n    c *= 1. + scanlines*sin(uv.y*iResolution.y*pi/2.);\n  \n    // vignette\n\tfloat dx = vignette * abs(uv.x - .5);\n\tfloat dy = vignette * abs(uv.y - .5);\n    c *= (1.0 - dx * dx - dy * dy);\n    \n    fragColor = c;\n}","name":"Image","description":"","type":"image"}]}