{"ver":"0.1","info":{"id":"7tX3D2","date":"1622865234","viewed":232,"name":"First Quad Tree Attempt","username":"Yusef28","description":"Is this even a quadtree?\nI'd love to hear some opinions on what I could have done better. ","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["2d","comments","quadtree","quadtree","wellcommented"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(vec2 n) { \n    return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-iResolution.xy*0.5)/iResolution.y;\n    \n    //fisheye update 2021 06 17\n    uv = normalize(uv) * tan(asin(length(uv) * 0.9));\n    //move the world with time\n    uv.x+=iTime/10.;\n    \n    //prepare a vector for coordinate subsystem updates\n    \n    //scale world by 4 to see more stuff\n    vec2 newST = uv*5.;\n    //get init ID for quads\n    vec2 newID = floor(newST);\n    //get the decimal part and shift it to -0.5 to 0.5 (not super nessesary)\n    vec2 newCoor = fract(newST)-0.5;\n    \n    \n        \n    //7 levels\n    //At each level you partition the space into for subspaces\n    //each with coord -0.5 to 0.5 for x and y\n    //you get an ID for each quad using floor\n    //send the ID to rand and get a random number between 0 and 1\n    //if the rand number is less than half then end at this level and\n    //move on to colouring otherwise keep going.\n    for(float k = 1.; k < 8.; k++){\n    \n        //scaled up pixel coord X2 each time through loop\n        newST = newST*2.;\n        //get 2d vector id for this pixel's 1x1 block\n        newID = floor(newST);\n        //get the -0.5 - 0.5 coord of this pixel for quad partitioning\n        newCoor = fract(newST)-0.5;\n\n        //start by checking that the whole quadrant should be partitioned\n        float rnd = rand(newID);\n        //if not then break out of the loop and move to coloring\n        if(step(0.5, rnd) < 0.5){\n            break;\n            }\n\n    }\n    //black as init color\n    vec3 col = vec3(0.);\n    //thickness for the black borders around each square\n    float th = 0.05;\n    \n    //decide with the quad should be colored at all\n    //newID is left from the last reached level\n    float rnd = rand(newID);\n    //I check if it's less than 0.2 so I am basically leaving\n    //lot's of squares not colored but mostly in lower levels.\n    //For some reason I needed to push the threshhold way down to even\n    //affect the top layer quads.\n    if(rnd < 0.2){\n    \n    //calculate a color using the intro color palete with a shift based on the \n    //random value from each quad ID\n    vec3 pallete = 0.5 + 0.5*cos(vec3(rnd)+vec3(0,2,4)/2.+rnd*1000.+iTime);\n    \n    //cut out black borders on x axis\n    float f = 1.0-step(0.5-th, newCoor.x)+step(-0.5+th, newCoor.x);\n    //mix the black in\n    col = mix(pallete, vec3(0.), f);\n    //cut out black borders on y axis\n    f = 1.0-step(0.5-th,newCoor.y)+step(-0.5+th,newCoor.y);\n    //mix the black in\n    col = mix(col, vec3(0.), f);\n    }\n    \n    //you could delete the else statement and be fine it's just there to\n    //show the logic\n    else{\n    \n    //y'know!\n    col = vec3(0.);\n    \n    }\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}