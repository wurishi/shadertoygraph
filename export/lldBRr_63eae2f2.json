{"ver":"0.1","info":{"id":"lldBRr","date":"1538501923","viewed":106,"name":"Simple \"House\" Shader","username":"ForeignWaffles","description":"A simple program to draw a basic house shape, learning how to use mix and step correctly.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["classwork"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 composite;\n\nvec3 houseColor  = vec3(1.0, 0.0, 0.0) * 0.65;\nvec3 chimneyColor = vec3(1.0, 0.2, 0.3) * 0.4;\nvec3 windowColor = vec3(1.0, 1.0, 1.0);\nvec3 doorColor = vec3(1.0, 0.2, 0.2) * 0.15;\nvec3 handleColor = vec3(1.0, 1.0, 0.0) * 0.5;\nvec4 bG;\n\nfloat bGGradientMod = 2.0;\n\nvec2 body_pos = vec2(0.4, 0.2);\nvec2 body_dim = vec2(0.2, 0.3);\n\nvec2 chimney_pos = vec2(0.4, 0.5);\nvec2 chimney_dim = vec2(0.05, 0.15);\n\nvec2 window_pos = vec2(0.43, 0.35);\nvec2 window2_pos = vec2(0.55, 0.35);\nvec2 window_dim = vec2(0.02, 0.05);\n\nvec2 door_pos = vec2(0.475, 0.2);\nvec2 door_dim = vec2(0.05, 0.15);\n\nvec2 handle_pos = vec2(0.515, 0.27);\nfloat radius = 0.005;\n\n\nfloat bodyLayerOn    = float(true); //Simply change the boolean to turn on/off\nfloat chimneyLayerOn = float(true); //Simply change the boolean to turn on/off\nfloat windowLayerOn  = float(true); //Simply change the boolean to turn on/off\nfloat doorLayerOn    = float(true); //Simply change the boolean to turn on/off\nfloat handleLayerOn  = float(true); //Simply change the boolean to turn on/off\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\t\n    //Fix aspect ratio\n    float aspectRatio = iResolution.y / iResolution.x;\n    uv.y *= aspectRatio;\n    \n    body_pos.y *= aspectRatio;\n    body_dim.y *= aspectRatio;\n    chimney_pos.y *= aspectRatio;\n    chimney_dim.y *= aspectRatio;\n    window_pos.y *= aspectRatio;\n    window2_pos.y *= aspectRatio;\n    window_dim.y *= aspectRatio;\n    door_pos.y *= aspectRatio;\n    door_dim.y *= aspectRatio;\n    handle_pos.y *= aspectRatio;\n    \n    bG = vec4(0.0, 0.7, uv.y * bGGradientMod, 1.0);\n    vec4 Layer1; //Body\n    vec4 Layer2; //Chimney\n    vec4 Layer3; //Windows\n    vec4 Layer4; //Door\n    vec4 Layer5; //Door handle\n  \t\n    //Calculate the body step\n    float bodyInterpX = step(body_pos.x, uv.x) - step(body_pos.x + body_dim.x, uv.x);\n    float bodyInterpY = step(body_pos.y, uv.y) - step(body_pos.y + body_dim.y, uv.y);\n    \n    //Calculate the chimney step\n    float chimneyInterpX = step(chimney_pos.x, uv.x) - step(chimney_pos.x + chimney_dim.x, uv.x);\n    float chimneyInterpY = step(chimney_pos.y, uv.y) - step(chimney_pos.y + chimney_dim.y, uv.y);\n    \n    //Calculate the window steps\n    float windowInterpX = step(window_pos.x, uv.x) - step(window_pos.x + window_dim.x, uv.x);\n    float windowInterpY = step(window_pos.y, uv.y) - step(window_pos.y + window_dim.y, uv.y);\n    \n    float window2InterpX = step(window2_pos.x, uv.x) - step(window2_pos.x + window_dim.x, uv.x);\n    float window2InterpY = step(window2_pos.y, uv.y) - step(window2_pos.y + window_dim.y, uv.y);\n    \n    //Calculate the door and handle step\n    float doorInterpX = step(door_pos.x, uv.x) - step(door_pos.x + door_dim.x, uv.x);\n    float doorInterpY = step(door_pos.y, uv.y) - step(door_pos.y + door_dim.y, uv.y);\n    \n    float handleInterp = 1.0 - step(radius, distance(handle_pos, uv));\n    \n    //Create the final values by combining the respective interps\n    float bodyFinal = (bodyInterpX * bodyInterpY);\n    float chimFinal = (chimneyInterpX * chimneyInterpY);\n    float windowFinal = (windowInterpX * windowInterpY);\n    float window2Final = (window2InterpX * window2InterpY);\n    float doorFinal = (doorInterpX * doorInterpY);\n    \n    //Assign layer colors and alphas\n    Layer1 = vec4(houseColor, bodyFinal * bodyLayerOn);\n    Layer2 = vec4(chimneyColor, chimFinal * chimneyLayerOn);\n    Layer3 = vec4(windowColor, (windowFinal + window2Final) * windowLayerOn);\n    Layer4 = vec4(doorColor, doorFinal * doorLayerOn);\n    Layer5 = vec4(handleColor, handleInterp * handleLayerOn);\n    \n    composite = mix(bG, Layer1, Layer1.a);\n    composite = mix(composite, Layer2, Layer2.a);\n    composite = mix(composite, Layer3, Layer3.a);\n    composite = mix(composite, Layer4, Layer4.a);\n    composite = mix(composite, Layer5, Layer5.a);\n    \n    // Output to screen\n    fragColor = composite;\n}","name":"Image","description":"","type":"image"}]}