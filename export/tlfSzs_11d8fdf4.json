{"ver":"0.1","info":{"id":"tlfSzs","date":"1563902725","viewed":211,"name":"Magical Christmas ","username":"SNWK_Group02","description":"CLUSTER 1-18, GPU 1060 PLUS for better performance","likes":0,"published":1,"flags":0,"usePreview":1,"tags":["raytracing","triangle","sphere","cuboid","aabbs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGRr","filepath":"/media/a/d96b229eeb7a08d53adfcf1ff89e54c9ffeebed193d317d1a01cc8125c0f5cca.mp3","previewfilepath":"/media/ap/d96b229eeb7a08d53adfcf1ff89e54c9ffeebed193d317d1a01cc8125c0f5cca.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//============================================================================\n// PROJECT ID: CLUSTER1_18\n//\n// GROUP NUMBER: 02\n//\n// STUDENT NAME: Wang Kai\n// NUS User ID.: t0918150\n//\n// STUDENT NAME: Huang Ziheng\n// NUS User ID.: t0918577\n//\n// STUDENT NAME: Lan Xuan\n// NUS User ID.: t0918598\n//\n// COMMENTS TO GRADER: \n//\n//============================================================================\n\n\n\n// FRAGMENT SHADER FOR SHADERTOY\n// Run this at https://www.shadertoy.com/new\n// See documentation at https://www.shadertoy.com/howto\n\n// Your browser must support WebGL 2.0.\n// Check your browser at http://webglreport.com/?v=2\n\n\n//============================================================================\n// Constants.\n//============================================================================\nconst int NUM_LIGHTS = 5;\nconst int NUM_MATERIALS = 6;\nconst int NUM_PLANES = 5;\nconst int NUM_SPHERES = 26;\nconst int NUM_BOXES = 2;\nconst int NUM_Octahedrons = 1;\nconst int NUM_TRIANGLE = 12;\nconst int NUM_FLASHCOLOR = 5;\nconst int NUM_LIGHTCOLOR = 2;\nconst vec3 BACKGROUND_COLOR = vec3( 0.1, 0.2, 0.6 );\nconst bool isSphere = true;\nconst bool isAABB = true;\n // Vertical field-of-view angle of camera. In radians.\nconst float FOVY = 50.0 * 3.1415926535 / 180.0; \n\n// Use this for avoiding the \"epsilon problem\" or the shadow acne problem.\nconst float DEFAULT_TMIN = 10.0e-4;\n\n// Use this for tmax for non-shadow ray intersection test.\nconst float DEFAULT_TMAX = 10.0e6;\n\n// Equivalent to number of recursion levels (0 means ray-casting only).\n// We are using iterations to replace recursions.\nconst int NUM_ITERATIONS = 2;\n\nconst float PI = 3.14159265;\n\n\n//============================================================================\n// Define new struct types.\n//============================================================================\n\nstruct Material_t {\n    vec3 k_a;   // Ambient coefficient.\n    vec3 k_d;   // Diffuse coefficient.\n    vec3 k_r;   // Reflected specular coefficient.\n    vec3 k_rg;  // Global reflection coefficient.\n    float n;    // The specular reflection exponent. Ranges from 0.0 to 128.0. \n};\n\nstruct Ray_t {\n    vec3 o;  // Ray Origin.\n    vec3 d;  // Ray Direction. A unit vector.\n};\n//==========AABB DEFINE\nstruct AABB_t{\n    vec3 A;\n    vec3 B;\n    bool debug;\n};\n//==========AABB DEFINE END\n//==========Cylinder DEFINE\n\n\n//==========Cylinder DEFINE END\n//==========Triangle DEFINE\nstruct Triangle_t{\n    vec3 A;\n    vec3 B;\n    vec3 C;\n    bool debug;\n    int materialID;\n    Material_t material;\n    AABB_t aabb;\n};\n//==========Triangle DEFINE END\n\n//==========bamian DEFINE\nstruct Octahedron_t{\n    bool debug;\n    int materialID;\n    AABB_t aabb;\n};\n//==========bamian DEFINE END\n\n//==========BOX DEFINE\nstruct xy_rect{\n    float x0,y0,x1,y1,k;\n    vec3 normal;\n    float flip;\n    bool debug;\n};\nstruct yz_rect{\n    float z0,y0,z1,y1,k;\n    vec3 normal;\n    float flip;\n    bool debug;\n};\nstruct zx_rect{\n    float x0,z0,x1,z1,k;\n    vec3 normal;\n    float flip;\n    bool debug;\n};\nstruct Box_t {\n    vec3 cornerA;\n    vec3 cornerB;\n    xy_rect xys[2];\n    yz_rect yzs[2];\n    zx_rect zxs[2];\n    int materialID;\n    Material_t material;\n    bool debug;\n    AABB_t aabb;\n};\n//==========END BOX DEFINE\n\nstruct Plane_t {\n    // The plane equation is Ax + By + Cz + D = 0.\n    float A, B, C, D;\n    int materialID;\n};\n\nstruct Sphere_t {\n    vec3 center;\n    float radius;\n    int materialID;\n    Material_t material;\n    AABB_t aabb;\n};\n\nstruct Light_t {\n    vec3 position;  // Point light 3D position.\n    vec3 I_a;       // For Ambient.\n    vec3 I_source;  // For Diffuse and Specular.\n};\n\n\n//----------------------------------------------------------------------------\n// The lighting model used here is similar to that on Slides 8 and 12 of \n// Lecture 11 (Ray Tracing). Here it is computed as\n//\n//     I_local = SUM_OVER_ALL_LIGHTS { \n//                   I_a * k_a + \n//                   k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ]\n//               }\n// and\n//     I = I_local  +  k_rg * I_reflected\n//----------------------------------------------------------------------------\n\n\n//============================================================================\n// Global scene data.\n//============================================================================\nPlane_t Plane[NUM_PLANES];\nSphere_t Sphere[NUM_SPHERES];\nLight_t Light[NUM_LIGHTS];\nMaterial_t Material[NUM_MATERIALS];\nBox_t Box[NUM_BOXES];\nTriangle_t Triangle[NUM_TRIANGLE];\nOctahedron_t Octahedron[NUM_Octahedrons];\nvec3 FLASH_COLOR[NUM_FLASHCOLOR];\nvec3 LIGHT_COLOR[NUM_LIGHTCOLOR];\n\nfloat getMin(in float a, in float b, in float c){\n    float min = a;\n    if(b < min)\n        min = b;\n    if(c < min)\n        min = c;\n    return min;\n}\n\nfloat getMax(in float a, in float b, in float c){\n    float max = a;\n    if(b > max)\n        max = b;\n    if(c > max)\n        max = c;\n    return max;\n}\n/////////////////////////////////////////////////////////////////////////////\n// Initializes a Sphere.\n/////////////////////////////////////////////////////////////////////////////\nvoid InitSphere(in int i){\n    //Sphere[i].materialID = i%3;\n    vec3 center = Sphere[i].center;\n    float r = Sphere[i].radius;\n    Sphere[i].aabb.A = center - vec3(r,r,r);\n    Sphere[i].aabb.B = center + vec3(r,r,r);\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Initializes a triangle.\n/////////////////////////////////////////////////////////////////////////////\nvoid InitTriangle(in int i){\n    Triangle[i].materialID = -1;\n    Triangle[i].material.k_d = FLASH_COLOR[(int(abs(sin(1.9*iTime))*float(NUM_FLASHCOLOR - 1))+i)%5];//vec3( abs(sin(0.3*iTime+ float(i)*PI/20.0)), 0.1, abs(sin(0.5*iTime+ float(i)*PI/20.0)) );\n    Triangle[i].material.k_a = 0.2 * Triangle[i].material.k_d;\n    Triangle[i].material.k_r = 0.2 * Triangle[i].material.k_d;\n    Triangle[i].material.k_rg = 0.5 * Triangle[i].material.k_r;\n    Triangle[i].material.n = 128.0;\n    vec3 A = Triangle[i].A;\n    vec3 B = Triangle[i].B;\n    vec3 C = Triangle[i].C;\n    Triangle[i].debug = false;\n    Triangle[i].aabb.A = vec3(getMin(A[0],B[0],C[0]),getMin(A[1],B[1],C[1]),getMin(A[2],B[2],C[2]));\n    Triangle[i].aabb.B = vec3(getMax(A[0],B[0],C[0]),getMax(A[1],B[1],C[1]),getMax(A[2],B[2],C[2]));\n}\n/////////////////////////////////////////////////////////////////////////////\n// Initializes a box.\n/////////////////////////////////////////////////////////////////////////////\nvoid InitBox(in int i){\n    Box[i].debug = false;\n    float x0 = min(Box[i].cornerA.x, Box[i].cornerB.x);\n    float x1 = max(Box[i].cornerA.x, Box[i].cornerB.x);\n    float y0 = min(Box[i].cornerA.y, Box[i].cornerB.y);\n    float y1 = max(Box[i].cornerA.y, Box[i].cornerB.y);\n    float z0 = min(Box[i].cornerA.z, Box[i].cornerB.z);\n    float z1 = max(Box[i].cornerA.z, Box[i].cornerB.z);\n    Box[i].aabb.A = vec3(x0,y0,z0);\n    Box[i].aabb.B = vec3(x1,y1,z1);\n    //front\n    Box[i].xys[0].x0 = x0;\n    Box[i].xys[0].x1 = x1;\n    Box[i].xys[0].y0 = y0;\n    Box[i].xys[0].y1 = y1;\n    Box[i].xys[0].k = z1;\n    Box[i].xys[0].flip = 1.0;\n    Box[i].xys[1].debug = false;\n    //behind\n    Box[i].xys[1].x0 = x0;\n    Box[i].xys[1].x1 = x1;\n    Box[i].xys[1].y0 = y0;\n    Box[i].xys[1].y1 = y1;\n    Box[i].xys[1].k = z0;\n    Box[i].xys[1].flip = -1.0;\n    Box[i].xys[1].debug = false;\n    //left\n    Box[i].yzs[0].z0 = z0;\n    Box[i].yzs[0].z1 = z1;\n    Box[i].yzs[0].y0 = y0;\n    Box[i].yzs[0].y1 = y1;\n    Box[i].yzs[0].k = x0;\n    Box[i].yzs[0].flip = -1.0;\n    Box[i].yzs[0].debug = false;\n    //right\n    Box[i].yzs[1].z0 = z0;\n    Box[i].yzs[1].z1 = z1;\n    Box[i].yzs[1].y0 = y0;\n    Box[i].yzs[1].y1 = y1;\n    Box[i].yzs[1].k = x1;\n    Box[i].yzs[1].flip = 1.0;\n    Box[i].yzs[1].debug = false;\n    //top\n    Box[i].zxs[0].z0 = z0;\n    Box[i].zxs[0].z1 = z1;\n    Box[i].zxs[0].x0 = x0;\n    Box[i].zxs[0].x1 = x1;\n    Box[i].zxs[0].k = y1;\n    Box[i].zxs[0].flip = 1.0;\n    Box[i].zxs[0].debug = false;\n    //down\n    Box[i].zxs[1].z0 = z0;\n    Box[i].zxs[1].z1 = z1;\n    Box[i].zxs[1].x0 = x0;\n    Box[i].zxs[1].x1 = x1;\n    Box[i].zxs[1].k = y0;\n    Box[i].zxs[1].flip = -1.0;\n    Box[i].zxs[1].debug = false;\n\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Initializes the scene.\n/////////////////////////////////////////////////////////////////////////////\nvoid InitScene()\n{\n    FLASH_COLOR[0] = vec3(0.8549, 0.8118, 0.2157);\n    FLASH_COLOR[1] = vec3(0.9059, 0.6235, 0.1961);\n    FLASH_COLOR[2] = vec3(0.9412, 0.7176, 0.5137);\n    FLASH_COLOR[3] = vec3(0.9098, 0.498, 0.2588);\n    FLASH_COLOR[4] = vec3(0.902, 0.7137, 0.4392);\n\n    LIGHT_COLOR[0] = vec3(0.9529, 0.4196, 0.2549);\n    LIGHT_COLOR[1] = vec3(0.9529, 0.9176, 0.4471);//vec3(0.965,0.0,0.133);\n    //LIGHT_COLOR[2] = vec3(0.0,0.2,0.9);//vec3(0.9,0.2,1.0);\n\n\n    //Horizontal plane.\n    Plane[0].A = 0.0;\n    Plane[0].B = 1.0;\n    Plane[0].C = 0.0;\n    Plane[0].D = 0.0;\n    Plane[0].materialID = -2;\n\n    Plane[1].A = 0.0;\n    Plane[1].B = 0.0;\n    Plane[1].C = 1.0;\n    Plane[1].D = 100.0;\n    Plane[1].materialID = -2;\n\n    Plane[2].A = 1.0;\n    Plane[2].B = 0.0;\n    Plane[2].C = 0.0;\n    Plane[2].D = 100.0;\n    Plane[2].materialID = -2;\n\n    Plane[3].A = 0.0;\n    Plane[3].B = 0.0;\n    Plane[3].C = -1.0;\n    Plane[3].D = 100.0;\n    Plane[3].materialID = -2;\n\n    Plane[4].A = -1.0;\n    Plane[4].B = 0.0;\n    Plane[4].C = 0.0;\n    Plane[4].D = 100.0;\n    Plane[4].materialID = -2;\n\n  \n    Triangle[0].A= vec3 (0.0,12.0,0.0);\n    Triangle[0].B= vec3 (1.0,0.0,1.0);\n    Triangle[0].C= vec3 (-1.0,0.0,1.0);\n\n    Triangle[1].A= vec3 (0.0,12.0,0.0);\n    Triangle[1].B= vec3 (1.0,0.0,-1.0);\n    Triangle[1].C= vec3 (1.0,0.0,1.0);\n\n    Triangle[2].A= vec3 (0.0,12.0,0.0);\n    Triangle[2].B= vec3 (-1.0,0.0,-1.0);\n    Triangle[2].C= vec3 (1.0,0.0,-1.0);\n\n    Triangle[3].A= vec3 (0.0,12.0,0.0);\n    Triangle[3].B= vec3 (-1.0,0.0,1.0);\n    Triangle[3].C= vec3 (-1.0,0.0,-1.0);\n\n    Triangle[4].A= vec3 (0.0,13.0,0.0);\n    Triangle[4].B= vec3 (0.5,12.5,0.5);\n    Triangle[4].C= vec3 (-0.5,12.5,0.5);\n\n    Triangle[5].A= vec3 (0.0,13.0,0.0);\n    Triangle[5].B= vec3 (0.5,12.5,-0.5);\n    Triangle[5].C= vec3 (0.5,12.5,0.5);\n\n    Triangle[6].A= vec3 (0.0,13.0,0.0);\n    Triangle[6].B= vec3 (-0.5,12.5,-0.5);\n    Triangle[6].C= vec3 (0.5,12.5,-0.5);\n\n    Triangle[7].A= vec3 (0.0,13.0,0.0);\n    Triangle[7].B= vec3 (-0.5,12.5,0.5);\n    Triangle[7].C= vec3 (-0.5,12.5,-0.5);\n\n    Triangle[8].A= vec3 (0.0,12.0,0.0);\n    Triangle[8].B= vec3 (-0.5,12.5,0.5);\n    Triangle[8].C= vec3 (0.5,12.5,0.5);\n\n    Triangle[9].A= vec3 (0.0,12.0,0.0);\n    Triangle[9].B= vec3 (0.5,12.5,0.5);\n    Triangle[9].C= vec3 (0.5,12.5,-0.5);\n\n    Triangle[10].A= vec3 (0.0,12.0,0.0);\n    Triangle[10].B= vec3 (0.5,12.5,-0.5);\n    Triangle[10].C= vec3 (-0.5,12.5,-0.5);\n\n    Triangle[11].A= vec3 (0.0,12.0,0.0);\n    Triangle[11].B= vec3 (-0.5,12.5,-0.5);\n    Triangle[11].C= vec3 (-0.5,12.5,0.5);\n\n    Octahedron[0].aabb.A = vec3(-1.0,0.0,-1.0);\n    Octahedron[0].aabb.B = vec3(1.0,13.0,1.0);\n    \n    \n    for(int i = 0; i < NUM_TRIANGLE; i++){\n        InitTriangle(i);\n    }\n    \n    Box[0].cornerA= vec3(4.5,0.0,4.5);\n    Box[0].cornerB= vec3(7.5,2.7,7.5);\n    Box[0].materialID = 5;\n    Box[1].cornerA= vec3(4.3,2.7,4.3);\n    Box[1].cornerB= vec3(7.7,3.5,7.7);\n    Box[1].materialID = 4;\n    for(int i = 0; i < NUM_BOXES; i++){\n        InitBox(i);\n    }\n\n    Sphere[0].center = vec3(1.7320508075688772935274463415058723669428,4.0 + 0.1*sin(iTime + 3.0*PI/6.0),3.0);\n    Sphere[0].radius = 1.4;\n\n    Sphere[1].center = vec3(3.4641016151377545870548926830117447338856,4.0 + 0.1*sin(iTime + 4.0*PI/6.0),0.0);\n    Sphere[1].radius = 1.4;\n\n    Sphere[2].center = vec3(1.7320508075688772935274463415058723669428,4.0 + 0.1*sin(iTime + 5.0*PI/6.0),-3.0);\n    Sphere[2].radius = 1.4;\n\n    Sphere[3].center = vec3(-1.7320508075688772935274463415058723669428,4.0 + 0.1*sin(iTime + 6.0*PI/6.0),-3.0);\n    Sphere[3].radius = 1.4;\n\n    Sphere[4].center = vec3(-3.4641016151377545870548926830117447338856,4.0 + 0.1*sin(iTime + 1.0*PI/6.0),0.0);\n    Sphere[4].radius = 1.4;\n\n    Sphere[5].center = vec3(-1.7320508075688772935274463415058723669428,4.0 + 0.1*sin(iTime + 2.0*PI/6.0),3.0);\n    Sphere[5].radius = 1.4;\n\n    Sphere[6].center = vec3(1.2990381056766579701455847561294042752071,7.0 + 0.3*sin(1.5*iTime + 2.0*PI/6.0),2.25);\n    Sphere[6].radius = 1.0;\n\n    Sphere[7].center = vec3(2.5980762113533159402911695122588085504142,7.0 + 0.3*sin(1.5*iTime + 3.0*PI/6.0),0.0);\n    Sphere[7].radius = 1.0;\n\n    Sphere[8].center = vec3(1.2990381056766579701455847561294042752071,7.0 + 0.3*sin(1.5*iTime + 4.0*PI/6.0),-2.25);\n    Sphere[8].radius = 1.0;\n\n    Sphere[9].center = vec3(-1.2990381056766579701455847561294042752071,7.0 + 0.3*sin(1.5*iTime + 5.0*PI/6.0),-2.25);\n    Sphere[9].radius = 1.0;\n\n    Sphere[10].center = vec3(-2.5980762113533159402911695122588085504142,7.0 + 0.3*sin(1.5*iTime + 6.0*PI/6.0),0.0);\n    Sphere[10].radius = 1.0;\n\n    Sphere[11].center = vec3(-1.2990381056766579701455847561294042752071,7.0 + 0.3*sin(1.5*iTime + 1.0*PI/6.0),2.25);\n    Sphere[11].radius = 1.0;\n\n    Sphere[12].center = vec3(0.8660254037844386467637231707529361834714,10.0 + 0.5*sin(2.0*iTime + PI/6.0),1.5);\n    Sphere[12].radius = 0.6;\n\n    Sphere[13].center = vec3(1.7320508075688772935274463415058723669428,10.0 + 0.5*sin(2.0*iTime + 2.0*PI/6.0),0.0);\n    Sphere[13].radius = 0.6;\n\n    Sphere[14].center = vec3(0.8660254037844386467637231707529361834714,10.0 + 0.5*sin(2.0*iTime + 3.0*PI/6.0),-1.5);\n    Sphere[14].radius = 0.6;\n\n    Sphere[15].center = vec3(-0.8660254037844386467637231707529361834714,10.0 + 0.5*sin(2.0*iTime + 4.0*PI/6.0),-1.5);\n    Sphere[15].radius = 0.6;\n\n    Sphere[16].center = vec3(-1.7320508075688772935274463415058723669428,10.0 + 0.5*sin(2.0*iTime + 5.0*PI/6.0),0.0);\n    Sphere[16].radius = 0.6;\n\n    Sphere[17].center = vec3(-0.8660254037844386467637231707529361834714,10.0 + 0.5*sin(2.0*iTime + 6.0*PI/6.0),1.5);\n    Sphere[17].radius = 0.6;\n\n    for(int i = 0; i < NUM_SPHERES; i++){\n        Sphere[i].materialID = 1;\n    }\n\n    Sphere[18].center = vec3(10.0 * sin(iTime),7.0 + 4.0*sin(iTime),10.0 * cos(iTime));\n    Sphere[18].radius = 0.3;\n    \n    Sphere[19].center = vec3(-10.0 * sin(iTime),7.0 + 4.0*sin(iTime),-10.0 * cos(iTime));\n    Sphere[19].radius = 0.3;\n\n    Sphere[20].center = vec3(20.0 * sin(iTime + 0.5*PI),4.0 + 3.0*sin(iTime),15.0 * cos(iTime+ 0.5*PI));\n    Sphere[20].radius = 0.3;\n    \n    Sphere[21].center = vec3(-15.0 * sin(iTime + 0.5*PI),5.0 + 2.0*sin(iTime),-20.0 * cos(iTime+ 0.5*PI));\n    Sphere[21].radius = 0.3;\n\n    Sphere[22].center = vec3(6.0 * sin(2.0*iTime),10.0 + 2.0*sin(iTime),6.0 * cos(2.0*iTime));\n    Sphere[22].radius = 0.3;\n    \n    Sphere[23].center = vec3(-6.0 * sin(2.0*iTime),10.0 + 2.0*sin(iTime),-6.0 * cos(2.0*iTime));\n    Sphere[23].radius = 0.3;\n\n    Sphere[24].center = vec3(15.0 * sin(iTime + 1.2*PI),7.0 + 7.0*sin(2.0*iTime),15.0 * cos(iTime+ 1.2*PI));\n    Sphere[24].radius = 0.3;\n    \n    Sphere[25].center = vec3(-15.0 * sin(iTime + 1.2*PI),7.0 + 7.0*sin(2.0*iTime),-15.0 * cos(iTime+ 1.2*PI));\n    Sphere[25].radius = 0.3;\n    for(int i = 18; i < NUM_SPHERES; i++){\n        Sphere[i].materialID = 4 + i%2;\n    }\n\n    for(int i = 0; i < NUM_SPHERES; i++){\n        InitSphere(i);\n    }\n    // Silver material.\n    Material[0].k_d = vec3( 0.1, 0.1, 0.1 );\n    Material[0].k_a = 0.2 * Material[0].k_d;\n    Material[0].k_r = 2.0 * Material[0].k_d;\n    Material[0].k_rg = 0.5 * Material[0].k_r;\n    Material[0].n =64.0;\n\n\n    //Spheres.\n    Material[1].k_d = vec3(0.2431, 0.4314, 0.2196);\n    Material[1].k_a = 0.2 * Material[1].k_d;\n    Material[1].k_r = 2.0 * Material[1].k_d;\n    Material[1].k_rg = 0.5 * Material[1].k_r;\n    Material[1].n = 64.0;\n\n    //Pillar.\n    Material[2].k_d = vec3( 0.5137, 0.6627, 0.8863 );\n    Material[2].k_a = 0.2 * Material[2].k_d;\n    Material[2].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[2].k_rg = 0.5 * Material[2].k_r;\n    Material[2].n = 128.0;\n\n    // Green plastic material.\n    Material[3].k_d = vec3(1.0, 0.0431, 0.0078);//vec3( abs(sin(0.5*iTime)), abs(cos(0.5*iTime)), abs(sin(0.5*iTime)) );\n    Material[3].k_a = 0.2 * Material[3].k_d;\n    Material[3].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[3].k_rg = 0.5 * Material[3].k_r;\n    Material[3].n = 128.0;\n\n     // Gold material.\n    Material[4].k_d = vec3( 0.8, 0.7, 0.1 );\n    Material[4].k_a = 0.5 * Material[4].k_d;\n    Material[4].k_r = 1.0 * Material[4].k_d;\n    Material[4].k_rg = 0.2 * Material[4].k_r;\n    Material[4].n =64.0;\n\n    // REd material.\n    Material[5].k_d = vec3(0.9255, 0.1255, 0.1255);\n    Material[5].k_a = 0.5 * Material[5].k_d;\n    Material[5].k_r = 0.5 * Material[5].k_d;\n    Material[5].k_rg = 0.2 * Material[5].k_r;\n    Material[5].n =64.0;\n\n\n    // Light 0.\n    Light[0].position = vec3( 10.0, 25.0, -10.0 );\n    Light[0].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[0].I_source = LIGHT_COLOR[0];//LIGHT_COLOR[(int(abs(sin(1.9*iTime))*float(NUM_FLASHCOLOR - 1)))%NUM_LIGHTCOLOR ];//vec3( abs(sin(0.5*iTime)), 0.0, 1.0 );\n\n    // Light 1.\n    Light[1].position = vec3( -10.0, 25.0, 10.0 );\n    Light[1].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[1].I_source = LIGHT_COLOR[1];//LIGHT_COLOR[(int(abs(sin(1.9*iTime))*float(NUM_FLASHCOLOR - 1)) + 1)%NUM_LIGHTCOLOR ];//vec3( 1.0, 1.0, 1.0 );\n\n    // Light 2.x\n    Light[2].position = vec3( 10.0*sin(3.0*iTime), 3.0, 10.0*cos(3.0*iTime) );\n    Light[2].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[2].I_source = vec3( 0.5, 0.0, 0.5 );//LIGHT_COLOR[(int(abs(sin(1.9*iTime))*float(NUM_FLASHCOLOR - 1)) + 1)%NUM_LIGHTCOLOR ];//vec3( 1.0, 1.0, 1.0 );\n\n    // Light 2.x\n    Light[3].position = vec3( 6.0, 1.3, 6.0 );\n    Light[3].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[3].I_source = vec3( 0.8, 0.0, 0.0 );//LIGHT_COLOR[(int(abs(sin(1.9*iTime))*float(NUM_FLASHCOLOR - 1)) + 1)%NUM_LIGHTCOLOR ];//vec3( 1.0, 1.0, 1.0 );\n\n    // Light 2.x\n    Light[4].position = vec3( 0.0, 40.0, 0.0 );\n    Light[4].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[4].I_source = vec3( 1.0, 1.0, 1.0 );//LIGHT_COLOR[(int(abs(sin(1.9*iTime))*float(NUM_FLASHCOLOR - 1)) + 1)%NUM_LIGHTCOLOR ];//vec3( 1.0, 1.0, 1.0 );\n\n    \n    // Light[2].position = vec3( 0.0, 15.7320508075688772935274463415058723669428, 0.0 );\n    // Light[2].I_a = vec3( 0.1, 0.1, 0.1 );\n    // Light[2].I_source = vec3( 1.0, 0.0, 0.0 );\n}\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a aabb and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectAABB( in AABB_t obj, in Ray_t ray, in float tmin, in float tmax )\n{\n    vec3 A = obj.A;\n    vec3 B = obj.B;\n    for (int i = 0; i < 3; i++) {\n        float t0 = min((A[i] - ray.o[i]) / ray.d[i], (B[i] - ray.o[i]) / ray.d[i]);\n        float t1 = max((A[i] - ray.o[i]) / ray.d[i], (B[i] - ray.o[i]) / ray.d[i]);\n        tmin = max(t0, tmin);\n        tmax = min(t1, tmax);\n        if (tmax <= tmin)\n            return false;\n    }\n    return true;\n}\n\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is such an intersection, outputs the value of t, the position\n// of the intersection (hitPos) and the normal vector at the intersection \n// (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax,\n                     out float t, out vec3 hitPos, out vec3 hitNormal ) \n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n\n    // We have a hit -- output results.\n    t = t0;\n    hitPos = ray.o + t0 * ray.d;\n    hitNormal = normalize( N );\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is one or two such intersections, outputs the value of the \n// smaller t, the position of the intersection (hitPos) and the normal \n// vector at the intersection (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax,\n                      out float t, out vec3 hitPos, out vec3 hitNormal ) \n{\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n    // solve solution at^2 + bt + c = 0\n    if(isAABB)\n        if(!IntersectAABB(sph.aabb, ray, tmin, tmax))\n            return false;\n    float a = 1.0f; // dot(ray.d,ray.d)\n    float b = 2.0f*dot(ray.o,ray.d) - 2.0f*dot(ray.d,sph.center);\n    float c = dot(ray.o,ray.o) + dot(sph.center,sph.center) - 2.0f*dot(ray.o,sph.center) - sph.radius*sph.radius;\n    float d = b*b - 4.0f*a*c;\n    if (d < 0.0f)\n        return false;\n    else{\n        float t0 = (-b - sqrt(d))/(2.0f*a);\n        //float t1 = (-b + sqrt(d))/(2.0f*a);\n        if( t0 < tmin || t0 > tmax) // out range\n            return false;\n        else{\n            t = t0;\n            hitPos = ray.o + t0*ray.d;\n            hitNormal = normalize(hitPos - sph.center);\n            return true;\n        }\n    }\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax )\n{\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n    if(isAABB)\n        if(!IntersectAABB(sph.aabb, ray, tmin, tmax))\n            return false;\n    float a = 1.0f; // dot(ray.d,ray.d)\n    float b = 2.0f*dot(ray.o,ray.d) - 2.0f*dot(ray.d,sph.center);\n    float c = dot(ray.o,ray.o) + dot(sph.center,sph.center) - 2.0f*dot(ray.o,sph.center) - sph.radius*sph.radius;\n    float d = b*b - 4.0f*a*c;\n    if (d < 0.0f)\n        return false;\n    else{\n        float t0 = (-b - sqrt(d))/(2.0f*a);\n        //float t1 = (-b + sqrt(d))/(2.0f*a);\n        if( t0 < tmin || t0 > tmax) // out range\n            return false;\n        else{\n            return true;\n        }\n    }\n\n}\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a triangle and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectTriangle( in Triangle_t obj, in Ray_t ray, in float tmin, in float tmax,out float t, out vec3 hitPos, out vec3 hitNormal ) {\n    if(isAABB)\n        if(!IntersectAABB(obj.aabb, ray, tmin, tmax))\n            return false;\n    vec3 E = ray.o;\n    vec3 D = ray.d;\n    vec3 A = obj.A;\n    vec3 B = obj.B;\n    vec3 C = obj.C;\n    if(dot(D,cross(B-A,C-B)) <= 0.0)\n        return false;\n    float a = A[0] - B[0];\n    float b = A[1] - B[1];\n    float c = A[2] - B[2];\n    float d = A[0] - C[0];\n    float e = A[1] - C[1];\n    float f = A[2] - C[2];\n    float g = D[0];\n    float h = D[1];\n    float i = D[2];\n    float j = A[0] - E[0];\n    float k = A[1] - E[1];\n    float l = A[2] - E[2];\n    //Cramer's rule\n    float M = a*(e*i - h*f) + b*(g*f - d*i) + c*(d*h - e*g);\n    float tmpt = -(f*(a*k-j*b) + e*(j*c -a*l) + d*(b*l - k*c))/M;\n    if(tmpt < tmin || tmpt > tmax)\n        return false;\n    float lambda = (i*(a*k -j*b) + h*(j*c - a*l) + g*(b*l - k*c))/M;\n    if(lambda < 0.0 || lambda > 1.0)\n        return false;\n    float beta =( j*(e*i - h*f) + k*(g*f - d*i) + l*(d*h - e*g))/M;\n    if(beta < 0.0 || beta > 1.0 - lambda)\n        return false;\n    t = tmpt;\n    hitPos = ray.o + tmpt*ray.d;\n    hitNormal = normalize(cross(C-B,B-A));\n    return true;\n}\nbool IntersectTriangle( in Triangle_t obj, in Ray_t ray, in float tmin, in float tmax) {\n    if(isAABB)\n        if(!IntersectAABB(obj.aabb, ray, tmin, tmax))\n            return false;\n    vec3 E = ray.o;\n    vec3 D = ray.d;\n    vec3 A = obj.A;\n    vec3 B = obj.B;\n    vec3 C = obj.C;\n    if(dot(D,cross(B-A,C-B)) <= 0.0)\n        return false;\n    float a = A[0] - B[0];\n    float b = A[1] - B[1];\n    float c = A[2] - B[2];\n    float d = A[0] - C[0];\n    float e = A[1] - C[1];\n    float f = A[2] - C[2];\n    float g = D[0];\n    float h = D[1];\n    float i = D[2];\n    float j = A[0] - E[0];\n    float k = A[1] - E[1];\n    float l = A[2] - E[2];\n    //Cramer's rule\n    float M = a*(e*i - h*f) + b*(g*f - d*i) + c*(d*h - e*g);\n    float tmpt = -(f*(a*k-j*b) + e*(j*c -a*l) + d*(b*l - k*c))/M;\n    if(tmpt < tmin || tmpt > tmax)\n        return false;\n    float lambda = (i*(a*k -j*b) + h*(j*c - a*l) + g*(b*l - k*c))/M;\n    if(lambda < 0.0 || lambda > 1.0)\n        return false;\n    float beta =( j*(e*i - h*f) + k*(g*f - d*i) + l*(d*h - e*g))/M;\n    if(beta < 0.0 || beta > 1.0 - lambda)\n        return false;\n    return true;\n}\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a box and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectXYRec( in xy_rect obj, in Ray_t ray, in float tmin, in float tmax,out float t, out vec3 hitPos, out vec3 hitNormal ) {\n    float tmpt = (obj.k-ray.o.z) / ray.d.z;\n    if (tmpt < tmin || tmpt > tmax)\n        return false;\n    float x = ray.o.x + tmpt*ray.d.x;\n    float y = ray.o.y + tmpt*ray.d.y;\n    if (x < obj.x0 || x > obj.x1 || y < obj.y0 || y > obj.y1) \n        return false;\n    vec3 tmpnormal = obj.flip*vec3(0.0, 0.0, 1.0);\n    if (dot(ray.d,tmpnormal) > 0.0){\n        return false;\n    }\n    t = tmpt;\n    hitPos = ray.o + tmpt*ray.d;\n    hitNormal = obj.flip*vec3(0.0, 0.0, 1.0);\n    return true;\n}\nbool IntersectXYRec( in xy_rect obj, in Ray_t ray, in float tmin, in float tmax) {\n    float tmpt = (obj.k-ray.o.z) / ray.d.z;\n    if (tmpt < tmin || tmpt > tmax)\n        return false;\n    float x = ray.o.x + tmpt*ray.d.x;\n    float y = ray.o.y + tmpt*ray.d.y;\n    if (x < obj.x0 || x > obj.x1 || y < obj.y0 || y > obj.y1) \n        return false;\n    vec3 tmpnormal = obj.flip*vec3(0.0, 0.0, 1.0);\n    if (dot(ray.d,tmpnormal) > 0.0){\n        return false;\n    }\n    return true;\n}\n\n\nbool IntersectYZRec( in yz_rect obj, in Ray_t ray, in float tmin, in float tmax,out float t, out vec3 hitPos, out vec3 hitNormal ) {\n    float tmpt = (obj.k-ray.o.x) / ray.d.x;\n    if (tmpt < tmin || tmpt > tmax)\n        return false;\n    float z = ray.o.z + tmpt*ray.d.z;\n    float y = ray.o.y + tmpt*ray.d.y;\n    if (z < obj.z0 || z > obj.z1 || y < obj.y0 || y > obj.y1) \n        return false;\n    vec3 tmpnormal = obj.flip*vec3(1.0, 0.0, 0.0);\n    if (dot(ray.d,tmpnormal) > 0.0){\n        return false;\n    }\n    t = tmpt;\n    hitPos = ray.o + tmpt*ray.d;\n    hitNormal = obj.flip*vec3(1.0, 0.0, 0.0);\n    return true;\n}\nbool IntersectYZRec( in yz_rect obj, in Ray_t ray, in float tmin, in float tmax) {\n    float tmpt = (obj.k-ray.o.x) / ray.d.x;\n    if (tmpt < tmin || tmpt > tmax)\n        return false;\n    float z = ray.o.z + tmpt*ray.d.z;\n    float y = ray.o.y + tmpt*ray.d.y;\n    if (z < obj.z0 || z > obj.z1 || y < obj.y0 || y > obj.y1) \n        return false;\n    vec3 tmpnormal = obj.flip*vec3(1.0, 0.0, 0.0);\n    if (dot(ray.d,tmpnormal) > 0.0){\n        return false;\n    }\n    return true;\n}\n\n\nbool IntersectZXRec( in zx_rect obj, in Ray_t ray, in float tmin, in float tmax,out float t, out vec3 hitPos, out vec3 hitNormal ) {\n    float tmpt = (obj.k-ray.o.y) / ray.d.y;\n    if (tmpt < tmin || tmpt > tmax)\n        return false;\n    float z = ray.o.z + tmpt*ray.d.z;\n    float x = ray.o.x + tmpt*ray.d.x;\n    if (z < obj.z0 || z > obj.z1 || x < obj.x0 || x > obj.x1) \n        return false;\n    vec3 tmpnormal = obj.flip*vec3(0.0, 1.0, 0.0);\n    if (dot(ray.d,tmpnormal) > 0.0){\n        return false;\n    }\n    t = tmpt;\n    hitPos = ray.o + tmpt*ray.d;\n    hitNormal = obj.flip*vec3(0.0, 1.0, 0.0);\n    return true;\n}\n\nbool IntersectZXRec( in zx_rect obj, in Ray_t ray, in float tmin, in float tmax) {\n    float tmpt = (obj.k-ray.o.y) / ray.d.y;\n    if (tmpt < tmin || tmpt > tmax)\n        return false;\n    float z = ray.o.z + tmpt*ray.d.z;\n    float x = ray.o.x + tmpt*ray.d.x;\n    if (z < obj.z0 || z > obj.z1 || x < obj.x0 || x > obj.x1) \n        return false;\n    vec3 tmpnormal = obj.flip*vec3(0.0, 1.0, 0.0);\n    if (dot(ray.d,tmpnormal) > 0.0){\n        return false;\n    }\n    return true;\n}\n\n\nbool IntersectBox( in Box_t obj, in Ray_t ray, in float tmin, in float tmax,out float t, out vec3 hitPos, out vec3 hitNormal ) {\n    if(isAABB)\n        if(!IntersectAABB(obj.aabb, ray, tmin, tmax))\n            return false;\n    float nearest_t = DEFAULT_TMAX;   // The ray parameter t at the nearest hit point.\n    vec3 nearest_hitPos;              // 3D position of the nearest hit point.\n    vec3 nearest_hitNormal;           // Normal vector at the nearest hit point.\n    int nearest_hitMatID;             // MaterialID of the object at the nearest hit point.\n    \n    float temp_t;\n    vec3 temp_hitPos;\n    vec3 temp_hitNormal;\n    bool temp_hasHit;\n    for(int i = 0; i < 2; i++){\n        if(IntersectXYRec( obj.xys[i], ray, tmin, tmax, temp_t, temp_hitPos, temp_hitNormal)){\n            temp_hasHit = true;\n            if(temp_t < nearest_t){\n                nearest_t = temp_t;\n                nearest_hitPos = temp_hitPos;\n                nearest_hitNormal = temp_hitNormal;\n            }\n        }\n        if(IntersectYZRec( obj.yzs[i], ray, tmin, tmax, temp_t, temp_hitPos, temp_hitNormal)){\n            temp_hasHit = true;\n            if(temp_t < nearest_t){\n                nearest_t = temp_t;\n                nearest_hitPos = temp_hitPos;\n                nearest_hitNormal = temp_hitNormal;\n            }\n        } \n        if(IntersectZXRec( obj.zxs[i], ray, tmin, tmax, temp_t, temp_hitPos, temp_hitNormal)){\n            temp_hasHit = true;\n            if(temp_t < nearest_t){\n                nearest_t = temp_t;\n                nearest_hitPos = temp_hitPos;\n                nearest_hitNormal = temp_hitNormal;\n            }\n        } \n    }\n    if(temp_hasHit){\n        t = nearest_t;\n        hitPos = nearest_hitPos;\n        hitNormal = nearest_hitNormal;\n        return true;\n    }else{\n        return false;\n    }\n}\nbool IntersectBox( in Box_t obj, in Ray_t ray, in float tmin, in float tmax) {\n    if(isAABB)\n        if(!IntersectAABB(obj.aabb, ray, tmin, tmax))\n            return false;\n    bool temp_hasHit;\n    for(int i = 0; i < 2; i++){\n        if(IntersectXYRec( obj.xys[i], ray, tmin, tmax)){\n            temp_hasHit = true;\n        }\n        if(IntersectYZRec( obj.yzs[i], ray, tmin, tmax)){\n            temp_hasHit = true;\n        } \n        if(IntersectZXRec( obj.zxs[i], ray, tmin, tmax)){\n            temp_hasHit = true;\n        } \n    }\n    if(temp_hasHit){\n        return true;\n    }else{\n        return false;\n    }\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes (I_a * k_a) + k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ].\n// Input vectors L, N and V are pointing AWAY from surface point.\n// Assume all vectors L, N and V are unit vectors.\n/////////////////////////////////////////////////////////////////////////////\nvec3 PhongLighting( in vec3 L, in vec3 N, in vec3 V, in bool inShadow, \n                    in Material_t mat, in Light_t light )\n{\n    if ( inShadow ) {\n        return light.I_a * mat.k_a;\n    }\n    else {\n        vec3 R = reflect( -L, N );\n        float N_dot_L = max( 0.0, dot( N, L ) );\n        float R_dot_V = max( 0.0, dot( R, V ) );\n        float R_dot_V_pow_n = ( R_dot_V == 0.0 )? 0.0 : pow( R_dot_V, mat.n );\n\n        return light.I_a * mat.k_a + \n               light.I_source * (mat.k_d * N_dot_L + mat.k_r * R_dot_V_pow_n);\n    }\n}\n\nbool checkIntersection (in Ray_t ray){\n    \n    if(isSphere){\n    // check intersection with all spheres\n    for(int i = 0; i < NUM_SPHERES; i ++ ){\n        if(IntersectSphere(Sphere[i], ray, DEFAULT_TMIN, DEFAULT_TMAX)){\n            return true;\n        }\n    }\n    }\n    // check intersection with all boxes\n    for(int i = 0; i < NUM_BOXES; i ++ ){\n        if(IntersectBox(Box[i], ray, DEFAULT_TMIN, DEFAULT_TMAX)){\n            return true;\n        }\n    }\n    //check intersection with all triangels\n    for(int j = 0; j < NUM_Octahedrons; j ++){\n        if(IntersectAABB(Octahedron[j].aabb,ray,DEFAULT_TMIN, DEFAULT_TMAX)){\n            for(int i = 0; i < NUM_TRIANGLE; i ++ ){\n                if(IntersectTriangle(Triangle[i], ray, DEFAULT_TMIN, DEFAULT_TMAX)){\n                    return true;\n                }\n            }\n        }\n    }\n    // for(int i = 0; i < NUM_TRIANGLE; i ++ ){\n    //     if(IntersectTriangle(Triangle[i], ray, DEFAULT_TMIN, DEFAULT_TMAX)){\n    //         return true;\n    //     }\n    // }\n    return false;\n}\n\n// Return random noise in the range [0.0, 1.0], as a function of x.\nfloat Noise2d( in vec2 x )\n{\n    float xhash = cos( x.x * 37.0 );\n    float yhash = cos( x.y * 57.0 );\n    return fract( 415.92653 * ( xhash + yhash ) );\n}\n\n// Convert Noise2d() into a \"star field\" by stomping everthing below fThreshhold to zero.\nfloat NoisyStarField( in vec2 vSamplePos, float fThreshhold )\n{\n    float StarVal = Noise2d( vSamplePos );\n    if ( StarVal >= fThreshhold )\n        StarVal = pow( (StarVal - fThreshhold)/(1.0 - fThreshhold), 6.0 );\n    else\n        StarVal = 0.0;\n    return StarVal;\n}\n\n// Stabilize NoisyStarField() by only sampling at integer values.\nfloat StableStarField( in vec2 vSamplePos, float fThreshhold )\n{\n    // Linear interpolation between four samples.\n    // Note: This approach has some visual artifacts.\n    // There must be a better way to \"anti alias\" the star field.\n    float fractX = fract( vSamplePos.x );\n    float fractY = fract( vSamplePos.y );\n    vec2 floorSample = floor( vSamplePos );    \n    float v1 = NoisyStarField( floorSample, fThreshhold );\n    float v2 = NoisyStarField( floorSample + vec2( 0.0, 1.0 ), fThreshhold );\n    float v3 = NoisyStarField( floorSample + vec2( 1.0, 0.0 ), fThreshhold );\n    float v4 = NoisyStarField( floorSample + vec2( 1.0, 1.0 ), fThreshhold );\n\n    float StarVal =   v1 * ( 1.0 - fractX ) * ( 1.0 - fractY )\n        \t\t\t+ v2 * ( 1.0 - fractX ) * fractY\n        \t\t\t+ v3 * fractX * ( 1.0 - fractY )\n        \t\t\t+ v4 * fractX * fractY;\n\treturn StarVal;\n}\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Casts a ray into the scene and returns color computed at the nearest\n// intersection point. The color is the sum of light from all light sources,\n// each computed using Phong Lighting Model, with consideration of\n// whether the interesection point is being shadowed from the light.\n// If there is no interesection, returns the background color, and outputs\n// hasHit as false.\n// If there is intersection, returns the computed color, and outputs\n// hasHit as true, the 3D position of the intersection (hitPos), the\n// normal vector at the intersection (hitNormal), and the k_rg value\n// of the material of the intersected object.\n/////////////////////////////////////////////////////////////////////////////\nvec3 CastRay( in Ray_t ray, \n              out bool hasHit, out vec3 hitPos, out vec3 hitNormal, out vec3 k_rg ) \n{\n    // Find whether and where the ray hits some object. \n    // Take the nearest hit point.\n\n    bool hasHitSomething = false;\n    float nearest_t = DEFAULT_TMAX;   // The ray parameter t at the nearest hit point.\n    vec3 nearest_hitPos;              // 3D position of the nearest hit point.\n    vec3 nearest_hitNormal;           // Normal vector at the nearest hit point.\n    int nearest_hitMatID;             // MaterialID of the object at the nearest hit point.\n    Material_t nearest_hitMat;\n    float temp_t;\n    vec3 temp_hitPos;\n    vec3 temp_hitNormal;\n    bool temp_hasHit;\n\n    /////////////////////////////////////////////////////////////////////////////\n    // TASK:\n    // * Try interesecting input ray with all the planes and spheres,\n    //   and record the front-most (nearest) interesection.\n    // * If there is interesection, need to record hasHitSomething,\n    //   nearest_t, nearest_hitPos, nearest_hitNormal, nearest_hitMatID.\n    /////////////////////////////////////////////////////////////////////////////\n\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n    //check intersection with all planes\n    int planeDirection; // 0 xz 1 3xy 2 4yz\n    bool isAddLight = false;\n    for(int i = 0; i < NUM_PLANES; i ++ ){\n        if(IntersectPlane(Plane[i], ray, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal)){\n            hasHitSomething = true;\n            if (temp_t <= nearest_t){\n                nearest_t = temp_t;\n                nearest_hitPos = temp_hitPos;\n                nearest_hitNormal = temp_hitNormal;\n                nearest_hitMatID = Plane[i].materialID;\n                planeDirection = i;\n                isAddLight = false;\n            }\n        }\n    }\n    if(isSphere){\n    // check intersection with all spheres\n    for(int i = 0; i < NUM_SPHERES; i ++ ){\n        if(IntersectSphere(Sphere[i], ray, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal)){\n            hasHitSomething = true;\n            if (temp_t <= nearest_t){\n                nearest_t = temp_t;\n                nearest_hitPos = temp_hitPos;\n                nearest_hitNormal = temp_hitNormal;\n                nearest_hitMatID = Sphere[i].materialID;\n                isAddLight = false;\n                if(i >= 18 && i < NUM_SPHERES )\n                    isAddLight = true;\n                if(nearest_hitMatID == -1){\n                    nearest_hitMat = Sphere[i].material;\n                }\n            }\n        }\n    }\n    }\n    // check intersection with all boxes\n    for(int i = 0; i < NUM_BOXES; i ++ ){\n        if(IntersectBox(Box[i], ray, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal)){\n            hasHitSomething = true;\n            if (temp_t <= nearest_t){\n                nearest_t = temp_t;\n                nearest_hitPos = temp_hitPos;\n                nearest_hitNormal = temp_hitNormal;\n                nearest_hitMatID = Box[i].materialID;\n                isAddLight = false;\n                if(nearest_hitMatID == -1){\n                    nearest_hitMat = Box[i].material;\n                }\n            }\n        }\n    }\n    // check intersection with all triangles\n    for(int j = 0; j < NUM_Octahedrons; j ++){\n        if(IntersectAABB(Octahedron[j].aabb,ray,DEFAULT_TMIN, DEFAULT_TMAX)){\n            for(int i = 0; i < NUM_TRIANGLE; i ++ ){\n                if(IntersectTriangle(Triangle[i], ray, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal)){\n                    hasHitSomething = true;\n                    if (temp_t <= nearest_t){\n                        nearest_t = temp_t;\n                        nearest_hitPos = temp_hitPos;\n                        nearest_hitNormal = temp_hitNormal;\n                        nearest_hitMatID = Triangle[i].materialID;\n                        // isAddLight = false;\n                        if(i > 8)\n                            isAddLight = false;\n                        else\n                            isAddLight = false;\n                        if(nearest_hitMatID == -1){\n                            nearest_hitMat = Triangle[i].material;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    // for(int i = 0; i < NUM_TRIANGLE; i ++ ){\n    //     if(IntersectTriangle(Triangle[i], ray, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal)){\n    //         hasHitSomething = true;\n    //         if (temp_t <= nearest_t){\n    //             nearest_t = temp_t;\n    //             nearest_hitPos = temp_hitPos;\n    //             nearest_hitNormal = temp_hitNormal;\n    //             nearest_hitMatID = Triangle[i].materialID;\n    //             isAddLight = true;\n    //             if(nearest_hitMatID == -1){\n    //                 nearest_hitMat = Triangle[i].material;\n    //             }\n    //         }\n    //     }\n    // }\n\n\n\n    // One of the output results.\n    hasHit = hasHitSomething;\n    if ( !hasHitSomething ) return BACKGROUND_COLOR;\n\n    vec3 I_local = vec3( 0.0 );  // Result color will be accumulated here.\n\n    /////////////////////////////////////////////////////////////////////////////\n    // TASK:\n    // * Accumulate lighting from each light source on the nearest hit point. \n    //   They are all accumulated into I_local.\n    // * For each light source, make a shadow ray, and check if the shadow ray\n    //   intersects any of the objects (the planes and spheres) between the \n    //   nearest hit point and the light source.\n    // * Then, call PhongLighting() to compute lighting for this light source.\n    /////////////////////////////////////////////////////////////////////////////\n\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n    for (int i = 0; i < NUM_LIGHTS; i ++){\n        if(i < NUM_LIGHTS - 1 || (i == NUM_LIGHTS - 1 && isAddLight)){\n            vec3 L = normalize(Light[i].position - nearest_hitPos);\n            vec3 N = nearest_hitNormal;\n            vec3 V = -ray.d;\n            Ray_t shadowRay;\n            shadowRay.o = nearest_hitPos;\n            shadowRay.d = L;\n            bool inshadow = checkIntersection (shadowRay);\n            if(nearest_hitMatID == -1){\n                I_local += PhongLighting(L, N, V, inshadow, nearest_hitMat, Light[i]);\n            }else if(nearest_hitMatID == -2){\n                //vec3 tcolor;\n                Material_t textureM;\n                vec3 tcolor = vec3( 0.1, 0.2, 0.4 ) * nearest_hitPos.y / 30.0;\n                    // Note: Choose fThreshhold in the range [0.99, 0.9999].\n                    // Higher values (i.e., closer to one) yield a sparser starfield.\n                float StarFieldThreshhold = 0.97;\n\n                    // Stars with a slow crawl.\n                float xRate = 0.001;\n                float yRate = -0.0006;\n                if(planeDirection == 0){\n                    tcolor = texture(iChannel1,mod(nearest_hitPos.xz/10.0,6.0)).rgb;//texture(iChannel1, fract((nearest_hitPos.xz + vec2(iTime))/ 100.)).xyz;\n                    textureM = Material_t(0.5*tcolor, 1.0*tcolor, 2.0*tcolor, 0.0*tcolor, 64.0);\n                    I_local += PhongLighting(L, N, V, inshadow, textureM, Light[i]);\n                }\n                else if (planeDirection % 2 == 1){\n                    vec2 vSamplePos = nearest_hitPos.xy*10.0 + vec2( xRate * float( iFrame ), yRate * float( iFrame ) );\n                    float StarVal = StableStarField( vSamplePos, StarFieldThreshhold );\n                    tcolor += vec3( StarVal );\n                    textureM = Material_t(1.0*tcolor, 0.5*tcolor, 1.0*tcolor, 0.5*tcolor, 64.0);\n                    I_local += PhongLighting(L, N, V, false, textureM, Light[i]);\n                }\n                else if (planeDirection % 2 == 0){\n                    vec2 vSamplePos = nearest_hitPos.zy*10.0 + vec2( xRate * float( iFrame ), yRate * float( iFrame ) );\n                    float StarVal = StableStarField( vSamplePos, StarFieldThreshhold );\n                    tcolor += vec3( StarVal );\n                    textureM = Material_t(0.0*tcolor, 0.5*tcolor, 1.0*tcolor, 0.5*tcolor, 64.0);                   \n                    I_local += PhongLighting(L, N, V, false, textureM, Light[i]);                \n                }\n            }else\n                I_local += PhongLighting(L, N, V, inshadow, Material[nearest_hitMatID], Light[i]);\n        }\n    }\n\n\n    // Populate output results.\n    hitPos = nearest_hitPos;\n    hitNormal = nearest_hitNormal;\n    k_rg = Material[nearest_hitMatID].k_rg;\n\n    return I_local;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Execution of fragment shader starts here.\n// 1. Initializes the scene.\n// 2. Compute a primary ray for the current pixel (fragment).\n// 3. Trace ray into the scene with NUM_ITERATIONS recursion levels.\n/////////////////////////////////////////////////////////////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    InitScene();\n\n    // Scale pixel 2D position such that its y coordinate is in [-1.0, 1.0].\n    vec2 pixel_pos = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n\n    // Position the camera.\n    vec3 cam_pos = vec3((18.0+(iMouse.y/iResolution.y)*15.0)*sin(0.2*iTime), 2.0 + (iMouse.y/iResolution.y)*15.0, (15.0+(iMouse.y/iResolution.y)*15.0)*cos(0.2*iTime));//vec3( -8, 2, 5 );\n    vec3 cam_lookat = vec3( 0.0, 6.0, 0.0 );\n    vec3 cam_up_vec = vec3( 0.0, 1.0, 0.0 );\n\n    // Set up camera coordinate frame in world space.\n    vec3 cam_z_axis = normalize( cam_pos - cam_lookat );\n    vec3 cam_x_axis = normalize( cross(cam_up_vec, cam_z_axis) );\n    vec3 cam_y_axis = normalize( cross(cam_z_axis, cam_x_axis));\n\n    // Create primary ray.\n    float pixel_pos_z = -1.0 / tan(FOVY / 2.0);\n    Ray_t pRay;\n    pRay.o = cam_pos;\n    pRay.d = normalize( pixel_pos.x * cam_x_axis  +  pixel_pos.y * cam_y_axis  +  pixel_pos_z * cam_z_axis );\n\n\n    // Start Ray Tracing.\n    // Use iterations to emulate the recursion.\n\n    vec3 I_result = vec3( 0.0 );\n    vec3 compounded_k_rg = vec3( 1.0 );\n    Ray_t nextRay = pRay;\n\n    for ( int level = 0; level <= NUM_ITERATIONS; level++ ) \n    {\n        bool hasHit;\n        vec3 hitPos, hitNormal, k_rg;\n\n        vec3 I_local = CastRay( nextRay, hasHit, hitPos, hitNormal, k_rg );\n\n        I_result += compounded_k_rg * I_local;\n\n        if ( !hasHit ) break;\n\n        compounded_k_rg *= k_rg;\n\n        nextRay = Ray_t( hitPos, normalize( reflect(nextRay.d, hitNormal) ) );\n    }\n\n    fragColor = vec4( I_result, 1.0 );\n    if(Box[0].xys[0].debug)\n        fragColor = vec4( 1.0,0.0,0.0, 1.0 );\n}\n\n","name":"Image","description":"","type":"image"}]}