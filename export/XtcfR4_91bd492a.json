{"ver":"0.1","info":{"id":"XtcfR4","date":"1538968862","viewed":107,"name":"pinhole","username":"cubisttriangle","description":"playing with shapes. not very efficient calculation. open to improvements.\n\nbased on: https://www.shadertoy.com/view/MdtXWX","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["pinhole"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float saturate(float x)\n{\n    return clamp(x, 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1).\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Set the colors for the background and shape.\n    vec4 bgColor = vec4(0.3, 0.3, 0.3, 1.0);\n    vec4 color = vec4(0.0, 0.0, 0.0, 1.0);\n    \n    // A factor to create some movement.\n    float move = sin(iTime * 0.6);\n    \n    // Center of ring.\n    vec2  absRingCenter = vec2(0.5, 0.5);\n    \n    // Move the ring into the screen center.\n    vec2  ringCenter = absRingCenter * iResolution.xy;\n    \n    // Define the thickness of the ring scaled to x-axis.\n    float ringThickness = 0.85;\n    \n    // Define the radius of the outside of the ring, scaled to the x-axis.\n    float ringOuterRadius = 0.2 * iResolution.x * move * sign(move);\n    \n    // Define the inner radius base on the outer radius and ring thickness.\n    float ringInnerRadius = ringOuterRadius * ringThickness;\n    \n    // Calculate the distance of the current frag to the ring center.\n    vec2 vecFromCenter = fragCoord - ringCenter;\n    \n    // Convert the center point to a magnitude.\n    float radius = length(vecFromCenter);\n\n    // Calculate if a frag falls on the ring.\n    float param = saturate(radius - ringInnerRadius) * saturate(ringOuterRadius - radius);\n    \n    // Calculate if a frag falls on the base.\n    // Anti-aliasing fudge factor.\n    float fudge = 0.994;    \n    float leftBound = ringCenter.x - ringOuterRadius * fudge;\n    float rightBound = ringCenter.x + ringOuterRadius * fudge;\n    \n    if ( (leftBound <= fragCoord.x && fragCoord.x <= rightBound) && \n          fragCoord.y <= ringCenter.y && (ringOuterRadius*0.9 <= radius) )\n    {\n        param = 1.0;\n    }    \n\n    // Lerp between the shapecolor and bg color based on on previous calculations.\n    fragColor = mix(bgColor, color, param);\n\n    // Approximate linear-to-sRGB conversion (improves anti-aliasing quality)\n    fragColor.rgb = sqrt(fragColor.rgb);\n}","name":"Image","description":"","type":"image"}]}