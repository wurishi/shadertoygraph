{"ver":"0.1","info":{"id":"3dS3Ry","date":"1549122860","viewed":65,"name":"day19 combine objects","username":"kiyoshidainagon","description":"rcombine objects ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["shadeadayraymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 cPos = vec3(0.0,  0.0,  3.0);\nconst vec3 cDir = vec3(0.0,  0.0, -1.0);\nconst vec3 cUp  = vec3(0.0,  1.0,  0.0);\n\nconst vec3 lightDir = vec3(-0.57, 0.57, 0.57);\n\n\nfloat distFuncCircle(vec3 p, float r){\n    return length(p) - r;\n}\n\nfloat smoothMin(float d1, float d2, float k){\n    float h = exp(-k * d1) + exp(-k * d2);\n    return -log(h) / k;\n}\n\nfloat distFuncRect(vec3 p, vec3 b){\n    vec3 q = abs(p);\n    return length(max(q - vec3(b), 0.0)) - 0.05;\n}\n\nfloat distFunc(vec3 p){\n    float d1 = distFuncRect(p, vec3(0.9, 0.1, 0.9));\n    float d2 = distFuncCircle(p, 0.8);\n    return smoothMin(d1, d2, 5.0);\n}\n\nvec3 genNormal(vec3 p){\n    float d = 0.0001;\n    return normalize(vec3(\n        distFunc(p + vec3(  d, 0.0, 0.0)) - distFunc(p + vec3( -d, 0.0, 0.0)),\n        distFunc(p + vec3(0.0,   d, 0.0)) - distFunc(p + vec3(0.0,  -d, 0.0)),\n        distFunc(p + vec3(0.0, 0.0,   d)) - distFunc(p + vec3(0.0, 0.0,  -d))\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\tvec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.y;\n    \n\n    // camera\n    vec3 cSide = cross(cDir, cUp);\n    float targetDepth = 1.0;\n    \n    // ray\n    vec3 ray = normalize(cSide * p.x + cUp * p.y + cDir * targetDepth);\n    \n     float tmp, dist;\n    tmp = 0.0;\n    vec3 dPos = cPos;\n    for(int i = 0; i < 64; i++){\n        dist = distFunc(dPos);\n        tmp += dist;\n        dPos = cPos + tmp * ray;\n    }\n\n    // hit check\n    vec3 color;\n    if(abs(dist) < 0.001){\n        vec3 normal = genNormal(dPos);\n        float diff = clamp(dot(lightDir, normal), 0.1, 1.0);\n        color = vec3(1.0, 1.0, 1.0) * diff;\n    }else{\n        color = vec3(0.0);\n    }\n    \n    \n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}