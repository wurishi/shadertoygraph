{"ver":"0.1","info":{"id":"mtBGDy","date":"1673927798","viewed":153,"name":"try fluid 01","username":"cailuming","description":"try the first 2d fluid","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["2dfluid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//  Function from IÃ±igo Quiles\n//  https://www.shadertoy.com/view/MsS3Wc\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Time varying pixel color\n    vec4 fluidInfo = texture(iChannel0,uv);\n    \n    vec3 bgcol = texture(iChannel1,uv+fluidInfo.xy/iResolution.xy).xyz;\n   \n    float v = pow(fluidInfo.z,8.0);\n    float v1 = pow(fluidInfo.z,2.0);\n    vec3 col = hsb2rgb(vec3(v*0.15,1.0,v1));\n    col = smoothstep(0.0,1.0,col);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//try to understand how multi buffer works and how to process basic velocity and\n//pressure changes.there is almost no conservation.\n#define PI 3.1415926\n\nmat2 rot2D(float v){\n   float c = cos(v);\n   float s = sin(v);\n   return mat2(c,s,-s,c);\n}\n\nfloat taiji(vec2 uv,vec2 c,float as){\n    uv-=c;\n    uv.x*=as;\n    uv*=5.0;\n    uv*=rot2D(iTime*4.0);\n    float ret = 0.0;\n    float outer_radius = 1.0;\n    float semi1_radius = 0.5*outer_radius;\n    float semi2_radius = 0.5*outer_radius;\n    float semi1_sub_radius = 0.1*outer_radius;\n    float semi2_sub_radius = 0.1*outer_radius;\n    \n    \n    float outer_angle = atan(uv.y,uv.x);\n    float outer_v = 0.;\n    float semi1_v = 0.;\n    float semi2_v = 0.;\n    float semi1_sv = 0.;\n    float semi2_sv = 0.;\n    \n    vec2 outer_formula = vec2(outer_radius*cos(outer_angle),outer_radius*sin(outer_angle));\n    outer_v  = length(uv-outer_formula);\n     \n    ///////////\n    \n    vec2 semi1_uv =(uv+vec2(semi1_radius,0))*rot2D(PI);\n    vec2 semi2_uv =(uv+vec2(-semi2_radius,0));\n    float arc1 = atan(semi1_uv.y,semi1_uv.x);\n    float arc2 = atan(semi2_uv.y,semi2_uv.x);\n    \n    float semi1_arc = clamp(arc1,0.0,PI);\n    float semi2_arc = clamp(arc2,0.0,PI);\n   \n    vec2 semi1_formu = vec2(semi1_radius*cos(semi1_arc),semi1_radius*sin(semi1_arc));\n    vec2 semi2_formu = vec2(semi2_radius*cos(semi2_arc),semi2_radius*sin(semi2_arc));\n    \n    vec2 semi1_sub_formu = vec2(semi1_sub_radius*cos(arc1),semi1_sub_radius*sin(arc1));\n    vec2 semi2_sub_formu = vec2(semi1_sub_radius*cos(arc2),semi1_sub_radius*sin(arc2));\n    \n    \n    semi1_v=length(semi1_uv-semi1_formu);\n    semi2_v=length(semi2_uv-semi2_formu);\n    ret = max(ret,0.02/outer_v);\n    ret = max(ret,0.02/semi1_v);\n    ret = max(ret,0.02/semi2_v);\n    \n    //////////////////////\n    semi1_sv=length(semi1_uv-semi1_sub_formu);\n    semi2_sv=length(semi2_uv-semi2_sub_formu);\n   \n    ret = max(ret,0.02/semi1_sv);\n    ret = max(ret,0.02/semi2_sv);\n    \n    ret = smoothstep(0.0,1.0,ret);\n    return ret;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float aspect = iResolution.x/iResolution.y;\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 muv = iMouse.xy/iResolution.xy;\n    \n    vec2 up = vec2(0,1)/iResolution.xy;\n    vec2 right =  vec2(1,0)/iResolution.xy;\n \n    //xy is velocity,z is pressure,w is density or temperature\n    vec4 fluidInfo = texture(iChannel0,uv);\n    float mt = mod(float(iFrame),600.0);\n    if(mt<=200.0){\n       fluidInfo.z += texture(iChannel1,uv).x*exp(-mt*mt*0.002)*0.3;\n    }\n    \n    ///////////////irrelevant to fluid,just make some fun/////////\n    if(iMouse.z > 0.2){fluidInfo.z += 0.11*taiji(uv,muv,aspect);}\n    fluidInfo.z += 0.15*taiji(uv,vec2(sin(iTime*1.5),cos(iTime*0.5)*abs(sin(iTime*1.5))),aspect);\n    ////////////////////////////////////////////////////////////\n    fluidInfo.x += fluidInfo.z - texture(iChannel0,uv+right).z;\n    fluidInfo.y += fluidInfo.z - texture(iChannel0,uv+up).z;\n    \n    fluidInfo.y +=0.002*fluidInfo.z;\n     \n    fluidInfo.xy = fluidInfo.xy*0.99;\n    if(uv.x>=0.99||uv.y>=0.99||uv.x<=0.01||uv.y<=0.01) fluidInfo.xy = vec2(0,0);\n    // Output to screen\n    fragColor = fluidInfo;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 up = vec2(0,1)/iResolution.xy;\n    vec2 right = vec2(1,0)/iResolution.xy;\n    \n    \n    vec4 fluidInfo = texture(iChannel0,uv);\n      \n    fluidInfo.z -= (fluidInfo.x-texture(iChannel0,uv-right).x)*0.50;\n    fluidInfo.z -= (fluidInfo.y-texture(iChannel0,uv-up).y)*0.50;\n    fluidInfo.z = clamp(fluidInfo.z,-1.0,1.0);\n    // Output to screen\n    fragColor = fluidInfo;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //xy is velocity,z is pressure,w is density\n    vec4 fluidInfo = texture(iChannel0,uv);\n    \n    // Output to screen\n    fragColor = texture(iChannel0,uv-fluidInfo.xy/iResolution.xy);\n}","name":"Buffer C","description":"","type":"buffer"}]}