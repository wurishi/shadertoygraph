{"ver":"0.1","info":{"id":"mdKBRt","date":"1698534863","viewed":64,"name":"4 Dithering Techniques","username":"Togposh","description":"This shader explores 4 different dithering techniques with a bit-depth of 2. The following techniques are explored, pattern dithering, ordered dithering, noise dithering, and threshold dithering","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["dithering","noisedithering","ordereddithering","patterndithering","thresholddithering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float toGrayscale( in vec3 texColour ) {\n    return 0.299 * texColour.r + 0.587 * texColour.g + 0.114 * texColour.b;\n}\n\nvec3 samplef(const int x, const int y, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy * iChannelResolution[0].xy;\n\tuv = (uv + vec2(x, y)) / iChannelResolution[0].xy;\n\treturn texture(iChannel0, uv).xyz;\n}\n\n// Round down if the fragment intensity is below 0.5 and round up if it's above 0.5\nvec3 ThresholdDithering(float fragIntensity) {\n\n    if (fragIntensity > 0.5) {\n        return vec3(1.0);\n    } else {\n        return vec3(0.0);\n    }    \n}\n\n// Compare the fragment intensity to a noise texture and round up if the intensity is greater and down if it's lower\nvec3 NoiseDithering(float fragIntensity, vec2 uv) {\n\n    vec3 noiseSample = texture(iChannel1, uv).rgb;\n    float noiseIntensity = noiseSample.r;\n    \n    if (noiseIntensity < fragIntensity) {\n        return vec3(1.0);\n    } else {\n        return vec3(0.0);\n    }\n}\n\n// Takes the average of a group of 2x2 texels and compares it to a set threshold for that \n// texel in the group which creates a dithering pattern\nvec3 PatternDithering(vec2 fragCoord) {\n\n    // Precomputed 2x2 Matrix\n    mat2x2 mask = (1.0 / 5.0) * mat2x2(1.0, 3.0,\n                                     4.0, 2.0);\n\n    float x = mod(fragCoord.x, 2.0);\n    float y = mod(fragCoord.y, 2.0);\n    \n    float averageIntensity = (toGrayscale(samplef(0, 0, fragCoord)) +\n                            toGrayscale(samplef(0, 1 - int(2.0 * y), fragCoord)) +\n                            toGrayscale(samplef(1 - int(2.0 * x), 0, fragCoord)) +\n                            toGrayscale(samplef(1 - int(2.0 * x), 1 - int(2.0 * y), fragCoord))) / 4.0;\n    \n    float threshold = mask[int(x)][int(y)];\n    \n    if (averageIntensity > threshold) {\n        return vec3(1.0);\n    } else {\n        return vec3(0.0);\n    }\n}\n\nvec3 OrderedDithering(float fragIntensity, vec2 fragCoord) {\n    \n    // Precompute 4x4 Matrix\n    mat4x4 mask = (1.0 / 17.0) * mat4x4(1.0, 9.0, 3.0, 11.0,\n                                        13.0, 5.0, 15.0, 7.0,\n                                        4.0, 12.0, 2.0, 10.0,\n                                        16.0, 8.0, 14.0, 6.0);  \n    \n    float x = mod(fragCoord.x + 1.0, 4.0);\n    float y = mod(fragCoord.y + 1.0, 4.0);\n    \n    float threshold = mask[int(x)][int(y)];\n    \n    if (fragIntensity > threshold) {\n        return vec3(1.0);\n    } else {\n        return vec3(0.0);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec3 textureSample = texture(iChannel0, uv).rgb;\n    float fragIntensity = toGrayscale(textureSample);\n    \n    vec3 texColour = vec3(1.0);\n    \n    if (uv.x < 0.25) {\n        texColour = ThresholdDithering(fragIntensity);\n    } else if(uv.x < 0.50) {\n        texColour = NoiseDithering(fragIntensity, uv);\n    } else if(uv.x < 0.75) {\n        texColour = PatternDithering(fragCoord);\n    } else {\n        texColour = OrderedDithering(fragIntensity, fragCoord);\n    }\n    \n\n    // Output to screen\n    fragColor = vec4(texColour, 1.0);\n}","name":"Image","description":"","type":"image"}]}