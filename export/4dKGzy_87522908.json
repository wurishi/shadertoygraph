{"ver":"0.1","info":{"id":"4dKGzy","date":"1455157015","viewed":340,"name":"Benham's Disk Pattern 2","username":"fontmaster","description":"1. Enlarge the screen and look fixed to the center of the disk for 3 seconds.\n2. Try to perceive lines of colors from the center to the border of the disc.\n3. If you don't see the colors change the speed by cliking the mouse from the left to righ","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["colors","color","illusion","disk","optic","benham"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Benham's Disk Pattern 2\n// Created by fontmaster\n\n// Modified version of @P_Malin at:\n// https://www.shadertoy.com/view/MdSGWm\n\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// How to see the colors\n// 1. Enlarge the screen and look fixed to the center of the disk for 3 seconds.\n// 2. Try to perceive lines of colors from the center to the border of the disc.\n// 3. If you don't see the colors change the speed by cliking the mouse from the left to right.\n// 4. Change the maxfactorspeed on the code it's necessary.\n\n\n#define saturate(X) clamp(X, 0.0, 1.0)\n\n#define PI 3.141592653589793238462643383279502884197\n\n/////////////////////////////////////////////////////////////////////////////    \n// SPEED FACTOR -- CHANGE HERE!\n// If speedfactor is positive the order of the colors are inverted.\nfloat maxspeedfactor = -3.5;\n/////////////////////////////////////////////////////////////////////////////    \n    \n\n/////////////////////////////////////////////////////////////////////////////\n// Others custom values\nconst float fScale = 0.95;\t\t\nconst float fShutterAngle = 0.0; // Motion blur factor\n\n\n// These values create funny patterns\nconst float fStripeDistWidth = 0.025;\nconst float fStripeDistSpacing = 0.075;\n\n/////////////////////////////////////////////////////////////////////////////\n\n\nfloat Ramp( const in float x, const in float fBegin, const in float fEnd, const in float fFeather )\n{\n\tfloat fBeginScale = 1.0 / (fFeather * 2.0);\n\tfloat fBeginOffset = (fFeather - fBegin) / (fFeather * 2.0);\n\tfloat fFeatherBegin = saturate(x * fBeginScale + fBeginOffset);\n\n\tfloat fEndScale = -1.0 / (fFeather * 2.0);\n\tfloat fEndOffset = (fEnd + fFeather) / (fFeather * 2.0);\n\tfloat fFeatherEnd = saturate(x * fEndScale + fEndOffset);\n\t\n\treturn min( fFeatherBegin, fFeatherEnd );\n}\n\nfloat Arc( float fAngle, float fAngleFeather, float fAngleBegin, float fAngleEnd, float fDist, float fDistFeather, float fDistBegin, float fDistEnd)\n{\n\treturn min(Ramp( fAngle, fAngleBegin, fAngleEnd, fAngleFeather ),Ramp( fDist, fDistBegin, fDistEnd, fDistFeather ));\n}\n\nfloat DiskPattern( float fAngle, float fDist, float fAngleFeather, float fDistFeather )\n{\n\tfloat fResult = 0.0;\n\n\t// Semicircle\t\n\tfResult = max( fResult, Arc(fAngle, fAngleFeather, -0.75, 0.25, fDist, fDistFeather, -12.0, 12.0) );\n\tfResult = max( fResult, Arc(fAngle, fAngleFeather, 0.75, 1.5, fDist, fDistFeather, -12.0, 12.0) );\n\n\tfloat fStripeDist = 1.0 / 8.0;\n\n\tfloat fStripeAngle1;\n\tfloat fStripeAngle2;\n\t\n\tfStripeAngle1 = 0.25 + 0.5 / 2.0;\n\tfStripeAngle2 = 0.25 + 1.0 / 1.5;\n\tfResult = max( fResult, Arc(fAngle, fAngleFeather, fStripeAngle1, fStripeAngle2, fDist, fDistFeather, fStripeDist, fStripeDist+fStripeDistWidth) );\n\tfStripeDist += fStripeDistSpacing;\n\tfResult = max( fResult, Arc(fAngle, fAngleFeather, fStripeAngle1, fStripeAngle2, fDist, fDistFeather, fStripeDist, fStripeDist+fStripeDistWidth) );\n\tfStripeDist += fStripeDistSpacing;\n\tfResult = max( fResult, Arc(fAngle, fAngleFeather, fStripeAngle1, fStripeAngle2, fDist, fDistFeather, fStripeDist, fStripeDist+fStripeDistWidth) );\n\tfStripeDist += fStripeDistSpacing;\n\t\n\tfStripeAngle1 = 0.25 + 0.5 / 3.0;\n\tfStripeAngle2 = 0.25 + 1.0 / 3.5;\n\tfStripeDist += fStripeDistSpacing;\n\tfResult = max( fResult, Arc(fAngle, fAngleFeather, fStripeAngle1, fStripeAngle2, fDist, fDistFeather, fStripeDist, fStripeDist+fStripeDistWidth) );\n\tfStripeDist += fStripeDistSpacing;\n\tfResult = max( fResult, Arc(fAngle, fAngleFeather, fStripeAngle1, fStripeAngle2, fDist, fDistFeather, fStripeDist, fStripeDist+fStripeDistWidth) );\n\tfStripeDist += fStripeDistSpacing;\n\tfResult = max( fResult, Arc(fAngle, fAngleFeather, fStripeAngle1, fStripeAngle2, fDist, fDistFeather, fStripeDist, fStripeDist+fStripeDistWidth) );\n\tfStripeDist += fStripeDistSpacing;\n\n\tfStripeAngle1 = 0.25 + 0.5 / 6.5;\n\tfStripeAngle2 = 0.25 + 1.0 / 6.0;\n\n\tfStripeDist += fStripeDistSpacing;\n\tfResult = max( fResult, Arc(fAngle, fAngleFeather, fStripeAngle1, fStripeAngle2, fDist, fDistFeather, fStripeDist, fStripeDist+fStripeDistWidth) );\n\tfStripeDist += fStripeDistSpacing;\n\tfResult = max( fResult, Arc(fAngle, fAngleFeather, fStripeAngle1, fStripeAngle2, fDist, fDistFeather, fStripeDist, fStripeDist+fStripeDistWidth) );\n\tfStripeDist += fStripeDistSpacing;\n\tfResult = max( fResult, Arc(fAngle, fAngleFeather, fStripeAngle1, fStripeAngle2, fDist, fDistFeather, fStripeDist, fStripeDist+fStripeDistWidth) );\n\tfStripeDist += fStripeDistSpacing;\n\n\tfStripeAngle1 = 0.25 + 0.5 / 500.0;\n\tfStripeAngle2 = 0.25 + 1.0 / 11.0;\n\n\tfStripeDist += fStripeDistSpacing;\n\tfResult = max( fResult, Arc(fAngle, fAngleFeather, fStripeAngle1, fStripeAngle2, fDist, fDistFeather, fStripeDist, fStripeDist+fStripeDistWidth) );\n\tfStripeDist += fStripeDistSpacing;\n\tfResult = max( fResult, Arc(fAngle, fAngleFeather, fStripeAngle1, fStripeAngle2, fDist, fDistFeather, fStripeDist, fStripeDist+fStripeDistWidth) );\n\tfStripeDist += fStripeDistSpacing;\n\tfResult = max( fResult, Arc(fAngle, fAngleFeather, fStripeAngle1, fStripeAngle2, fDist, fDistFeather, fStripeDist, fStripeDist+fStripeDistWidth) );\n\tfStripeDist += fStripeDistSpacing;\n\n\treturn fResult;\n}\n\nfloat speedfactor2;\n\nfloat GetShade(vec2 fragCoord)\n{\n\tvec2 vUV = fragCoord.xy / iResolution.xy;\n\t\n\tvec2 vPos = vUV * 2.0 - 1.0;\n\tvPos.x *= iResolution.x / iResolution.y;\n\t\n\tfloat fAngle = atan(vPos.x, vPos.y) / (PI);\n\tfloat fDist = length(vPos);\n\t\t\n\tfDist /= fScale; // make it slightly smaller\n\n\tfloat fSpeed = iMouse.x>0.?PI * (-iMouse.x*maxspeedfactor/iResolution.x):PI*maxspeedfactor;\n\t\n\tfAngle = fract(fAngle + iTime * fSpeed);\n\tfloat fAngleFeather = abs(fSpeed * fShutterAngle * (1.0 / 60.0));\n\tfAngleFeather = max( fAngleFeather, 0.001 );\n\tfloat fDistFeather = fScale * 2.0 / iResolution.y;\n\n\tfloat fShade = 1.0 - DiskPattern( fAngle, fDist, fAngleFeather, fDistFeather );\n\t\n\tfloat fDiscOutline = Ramp( fDist, -0.5, 1.0, fDistFeather );\n\t\n\tfShade = mix(0.5, fShade, fDiscOutline);\n\n\tfShade = sqrt(fShade);\n\n\treturn fShade;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat fShade = GetShade(fragCoord);\n\t\n\tvec3 vCol = vec3(fShade);\t\n\t\n\tfragColor = vec4(vCol,1.0);\n\n}\n","name":"Image","description":"","type":"image"}]}