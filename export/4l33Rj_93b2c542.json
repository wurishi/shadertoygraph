{"ver":"0.1","info":{"id":"4l33Rj","date":"1470142782","viewed":159,"name":"Color Multiplying with textures","username":"kyl3r","description":"Demonstration of some multiplying / blending","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["color","fragmentshader","multiplying"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 0 = Multiply\n// 1 = Screen\n// 2 = Overlay\n#define BLEND_MODE 0\n\nvec3 blend(vec3 a, vec3 b) {\n    return a * b;\n    // try also:\n    //return (a + b) / 1.4;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec3  a = texture(iChannel0, uv*vec2(2,2)).xyz;\n\tvec3 b = vec3(uv,0.5+0.5*sin(iTime));\n    \n    float xx = fragCoord.x - iResolution.x/2.0;\n    float yy = fragCoord.y - iResolution.y/2.0;\n    float distance = sqrt(xx*xx + yy*yy);\n    float angle = atan(xx, yy);\n\n\tb = vec3(uv,0.5+0.5*sin(-iTime*6.0+distance/3.0)+sin(iTime)+sin(angle*10.0+iTime+distance/15.0));\n    \n    if(uv.x < 0.5 && uv.y > 0.5){\n    \tfragColor.xyz = blend(a,b);\n    }else if(uv.x > 0.5 && uv.y < 0.5){\n      \tfragColor.xyz = a;   \n    }else{\n    \tfragColor.xyz = b;   \n    }\n}","name":"Image","description":"","type":"image"}]}