{"ver":"0.1","info":{"id":"wsGGzw","date":"1575677908","viewed":109,"name":"Shapes_SJD","username":"sux2bthatguy","description":"Shapes","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["school"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 circleCenter = vec2(0.5,0.5); //Center of circle in every tile\nvec2 squareCenter = vec2(0.5,0.5); //Center of square in every tile\nvec2 uv; //Position of pixels on screen\nvec4 col1 = vec4(0.7,1.0,1.0,1.0); //Color of shapes\nvec4 col2 = vec4(1.0,0.5,0.5,1.0); //Color of background\nfloat radius = .25; //Radius of circle\nfloat squareLength = .5; //Length of square\nfloat columns = 5.0; //Number of columns used when fract(uv) happens\nfloat rows = 3.0; //Number of rows used when fract(uv) happens\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\nuv = fragCoord/iResolution.xy; //Normalized pixel coordinates (from 0 to 1)\n\n\nuv.x *= columns;\nuv.y *= rows;\nfloat alternate = mod(floor(uv.x)+floor(uv.y),2.0); //determines alternating shape\n\nuv = fract(uv);\n\nif(alternate == 1.0)\n{\nif(distance(circleCenter,uv) < radius) //circle\nfragColor = col1;\nelse\nfragColor = col2;\n}\nelse\n{\nif(abs(uv.x-squareCenter.x) < squareLength/2.0 && abs(uv.y-squareCenter.y) < squareLength/2.0) //square\nfragColor = col1;\nelse\nfragColor = col2;\n}\n\n}","name":"Image","description":"","type":"image"}]}