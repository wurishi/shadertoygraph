{"ver":"0.1","info":{"id":"3stfzS","date":"1605438355","viewed":72,"name":"School Plastic Eraser","username":"iuryBorgesRodrigues","description":"School Plastic Eraser","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sdf","school","plastic","eraser"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define AA 2\n\nfloat smin( float a, float b, float k )\n{\n    float h = max(k-abs(a-b),0.0);\n    return min(a, b) - h*h*0.25/k;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\t\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\nvec2 map( in vec3 p, float atime )\n{\n\n\tfloat pt1= sdBox(p/vec3(0.93,1.0,0.5),vec3(0.2))*0.5;\n    p.y/=1.2;\n    float pt2=sdBox(p/vec3(1.1,0.9,0.6),vec3(0.2))*0.5;\n    float corte= sdBox((p+vec3(0.0,0.25,0.0))/vec3(1.6,0.5,1.0),vec3(0.2));\n    float corte2= sdBox((p+vec3(0.0,-0.25,0.0))/vec3(1.6,0.5,1.0),vec3(0.2));\n    pt2=max(pt2,-corte);\n \tpt2=max(pt2,-corte2);\n    vec2 res=vec2(pt1-0.02,2.0);\n    \n   \n\tif(pt2<res.x)res=vec2(pt2-0.02,1.0);\n    \n    \n    return res;\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd, float time )\n{\n    vec2 res = vec2(-1.0,-1.0);\n\n    float tmin = 0.5;\n    float tmax = 20.0;\n    \n    float t = tmin;\n    for( int i=0; i<512 && t<tmax; i++ )\n    {\n        vec2 h = map( ro+rd*t, time );\n        if( h.x<0.001 )\n        { \n            res = vec2(t,h.y); \n            break;\n        }\n        t += h.x;\n    }\n    \n    return res;\n}\n\nvec3 calcNormal( in vec3 pos, float time )\n{\n/*\n    vec2 e = vec2(0.0005,0.0);\n    return normalize( vec3( \n        map( pos + e.xyy, time ).x - map( pos - e.xyy, time ).x,\n\t\tmap( pos + e.yxy, time ).x - map( pos - e.yxy, time ).x,\n\t\tmap( pos + e.yyx, time ).x - map( pos - e.yyx, time ).x ) );\n*/\n    vec3 n = vec3(0.0);\n    for( int i=min(iFrame,0); i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*map(pos+0.0005*e,time).x;\n    }\n    return normalize(n);    \n}\n\nfloat calcOcclusion( in vec3 pos, in vec3 nor, float time )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.11*float(i)/4.0;\n        vec3 opos = pos + h*nor;\n        float d = map( opos, time ).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 2.0*occ, 0.0, 1.0 );\n}\n\nvec3 render( in vec3 ro, in vec3 rd, float time )\n{ \n    // sky dome\n    vec3 col = textureLod(iChannel0,rd,0.0).rgb;\n    \n    vec2 res = castRay(ro,rd, time);\n    if( res.y>-0.5 )\n    {\n        float t = res.x;\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos, time );\n        vec3 ref = reflect( rd, nor );\n        \n\t\tcol = vec3(0.2);\n        float ks = 1.0;\n\n        if( res.y>3.5 ) // eyeball\n        { \n            col = vec3(0.0);\n        } \n        else if( res.y>2.5 ) // iris\n        { \n            col = vec3(0.4);\n        } \n        else if( res.y>1.5 ) // body\n        { \n            col = vec3(0.2,0.05,0.02);\n        }\n\t\telse // terrain\n        {\n            col = vec3(0.05,0.09,0.02);\n        }\n        \n        // lighting\n        vec3  sun_lig = normalize( vec3(0.6, 0.35, 0.5) );\n        float sun_dif = clamp(dot( nor, sun_lig ), 0.0, 1.0 );\n        vec3  sun_hal = normalize( sun_lig-rd );\n        float sun_sha = step(castRay( pos+0.001*nor, sun_lig,time ).y,0.0);\n\t\tfloat sun_spe = ks*pow(clamp(dot(nor,sun_hal),0.0,1.0),8.0)*sun_dif*(0.04+0.96*pow(clamp(1.0+dot(sun_hal,rd),0.0,1.0),5.0));\n\t\tfloat sky_dif = sqrt(clamp( 0.5+0.5*nor.y, 0.0, 1.0 ));\n        float bou_dif = sqrt(clamp( 0.1-0.9*nor.y, 0.0, 1.0 ))*clamp(1.0-0.1*pos.y,0.0,1.0);\n\n\t\tvec3 lin = vec3(0.0);\n        lin += sun_dif*vec3(8.10,6.00,4.20)*sun_sha;\n        lin += sky_dif*vec3(0.50,0.70,1.00);\n        lin += bou_dif*vec3(0.40,1.00,0.40);\n\t\tcol = col*lin;\n\t\tcol += sun_spe*vec3(8.10,6.00,4.20)*sun_sha;\n        \n        \n        col = mix( col, vec3(0.5,0.7,0.9), 1.0-exp( -0.0001*t*t*t ) );\n        \n    }\n\n    return col;\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv =          ( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\nmat3 rotx(float a) { mat3 rot; rot[0] = vec3(1.0, 0.0, 0.0); rot[1] = vec3(0.0, cos(a), -sin(a)); rot[2] = vec3(0.0, sin(a), cos(a)); return rot; }\nmat3 roty(float a) { mat3 rot; rot[0] = vec3(cos(a), 0.0, sin(a)); rot[1] = vec3(0.0, 1.0, 0.0); rot[2] = vec3(-sin(a), 0.0, cos(a)); return rot; }\n#define PI 3.14159\nmat3 rotation;\n\n#define ZERO (min(iFrame,0))\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    \t vec3 tot = vec3(0.0);\n\n    for( int m=ZERO; m<AA; m++ )\n    for( int n=ZERO; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5; \n\t\n\t\n    vec2 p = (-iResolution.xy + 2.0*fragCoord+o)/iResolution.y;\n    float time = iTime;\n\n    time *= 0.9;\n\n    // camera\t\n    float an = 10.57*iMouse.x/iResolution.x;\n    vec3  ta = vec3( 0.0, 0.0, 0.4);\n    vec3  ro = ta + vec3( 1.3, -0.250, 1.3 );\n\n    mat3 ca = setCamera( ro, ta, 0.0 );\n        \n    \n        \n     vec2 m2 = iMouse.xy / iResolution.xy;\n    m2.y *= -1.0;\n    m2 -= vec2(0.5);\n    \n    // initial mouse position\n    if(iMouse.xy == vec2(0.0))\n    {\n        m2= vec2(0.0, 8.0);\n    }\n\n    rotation = mat3(1.0);\n    rotation = rotx(m2.y * 10.0);\n    rotation *= rotx(PI * 0.5);\n    rotation *= roty(m2.x * 10.0);\n   \n    \n    \n\n    vec3 rd = ca * normalize( vec3(p,1.8) );\n        \n    ro*=rotation;\n    rd*=rotation;\n\n    vec3 col = render( ro, rd, time );\n\n    col = pow( col, vec3(0.4545) );\n\n    tot += col;\n    }\n     tot /= float(AA*AA);\n    fragColor = vec4(tot,1.0);\n}\n","name":"Image","description":"","type":"image"}]}