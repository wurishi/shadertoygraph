{"ver":"0.1","info":{"id":"mlyyDd","date":"1700793069","viewed":20,"name":"Interactive Fractal 0003.2 fork","username":"Makisness","description":"Learning GLSL, Fractal #3. This one is interactive. click and drag to interact. I think it looks best in the center.\nModified for Interaction","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal","interactive"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//SDF Function\nfloat sdfCircle(vec2 p, float r) {\n  return (length(p) - r);\n}\n//shrinking rings function\nfloat rings(float a,float b){\n    return  sin(a*b +iTime)/b;\n}\n//color gradient function\nvec3 palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*cos(6.28318*(c*t+d) );\n}\n\n//Code is a mess... i sry\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n //UV Definition\n vec2 uv = (fragCoord * 2.0 - iResolution.xy)/iResolution.y;\n\n\n float radius = .1;\n \n //Mouse Control\n vec2 center = vec2(iMouse.xy * 2.0 - iResolution.xy)/iResolution.y;\n vec2 center1 = vec2(iMouse.xy * 2.0 - iResolution.xy)/iResolution.y;\n vec2 center2 = vec2(iMouse.xy * 2.0 - iResolution.xy)/iResolution.y;\ncenter1.x -= 1.;\ncenter2.x += 1.;\nfloat q = center.y;\nq = abs(q);\nfloat i = center.x*center.y;\n\n\nfor (float i = 0.0; i < 4.+ q; i++) {\nvec2 center = vec2(iMouse.xy * 2.0 - iResolution.xy)/iResolution.y;\n\nfloat angle = -cos(center.y/3.14)+sin(center.x);\n   uv *= mat2(\n   cos(angle), -sin(angle),\n   sin(angle), cos(angle)\n   );\n\n//\"the magic\" make this function crazy to vary results.\n// uv = uv to see the base\nuv = sin(uv+sin(center.x)-(sin(center.y)))*3.;\n//uv = uv;\n\n//Circles\n \n //left\n float distanceToCircle = sdfCircle(uv - center1, radius);\n float distanceToCircle2 = sdfCircle(uv - center1, radius);\n //right\n float distanceToCircle3 = sdfCircle(uv - center2, radius);\n float distanceToCircle4 = sdfCircle(uv - center2, radius);\n //l\n float d = abs(distanceToCircle);\n float e = abs(distanceToCircle2);\n //r\n float x = abs(distanceToCircle3);\n float y = abs(distanceToCircle4);\n \n d= angle/d;\n e= angle/e;\n x= angle/x;\n y= angle/y;\n \n \n \n \n float o = sin(iTime)/10.;\n \n //l\n d = rings(d,8.);\n e = rings(e,3.);\n //r\n x = rings(x,8.);\n y = rings(y,3.);\n //l\n d = smoothstep(o,.1,d);\n e = step(.1,e);\n float f = d+e;\n //r\n x = smoothstep(o,.1,x);\n y = step(.1,y);\n float z = x+y;\n\n//combine\nfloat m = f+z;\n\n vec3 col = palette(m)*vec3(0.1,0.1,0.1);\n //if function for overlapping rings\n if (m > 1.){\n vec3 col = vec3(palette(m))*m;\n}\n else{\n vec3 col = vec3(col)/m;\n \n col += vec3(.5,.34,.6);\n col += palette(m);\n fragColor = vec4(col,1.0);\n }\n }\n }\n \n ","name":"Image","description":"","type":"image"}]}