{"ver":"0.1","info":{"id":"3sfSRN","date":"1550675140","viewed":136,"name":"Rotating Landing Shader","username":"trevortheblack","description":"Rewrote the Shadertoy new shader as a polar depiction","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["polar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define M_PI 3.1415926535897932384626433832795028841971693993751058209749445923078164062\n\n// Accepts [0,1] uv coordinates\n// Outputs to polar coords \n// With [0.5, 0.5] as the center\n//(radius, theta)\n// where radius is [0, 0.717]\n// theta is [-PI, PI]\nvec2 polarCoords( in vec2 uv )\n{\n    vec2 uvPrime = uv - vec2(0.5, 0.5);\n    float r = length(uvPrime);\n    float theta = atan(uvPrime.y, uvPrime.x);\n    return vec2(r, theta);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Get polar coordinates (radius: [0, 0.717], theta: [-M_PI, M_PI])\n    vec2 pc = polarCoords(uv);\n    \n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+pc.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}