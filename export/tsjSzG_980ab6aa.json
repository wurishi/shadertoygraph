{"ver":"0.1","info":{"id":"tsjSzG","date":"1562816550","viewed":413,"name":"testing image compression 2","username":"public_int_i","description":"Testing discrete sine transform lossy compression, click to see source. Compression ratio of 8:1. Look in Common for options/settings.","likes":3,"published":3,"flags":32,"usePreview":0,"tags":["sin","sine","compression","transformation","transform","dct","dst"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Ethan Alexander Shulman 2019 - https://xaloez.com/ https://twitter.com/ethanshulman\n\n\nvoid mainImage( out vec4 o, in vec2 u)\n{\n    vec2 uv = (u*2.-R)/R.y;\n    if (max(abs(uv.x),abs(uv.y)) > 1.) {\n        o = vec4(0);\n        return;\n    }\n    uv = (uv*.5+.5)*(SIZEF/R);\n    if (iMouse.w <= 0.) o = vec4(abs(textureLod(iChannel1,uv,0.).x));\n    else o = vec4(textureLod(iChannel0,uv,0.).x);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Buffer A - Source testing image\n\nvoid mainImage( out vec4 o, in vec2 u)\n{\n    if (max(u.x,u.y)-SIZEF >= 0.) return;\n    \n    //varying checkerboard\n    float cs = floor(1.+pow(u.y*3./SIZEF,2.))*8./SIZEF;\n    o = vec4(mod(floor(u.x*cs)+floor(u.y*cs),2.));\n    //o = vec4(1);\n    \n    //texture\n    //o = vec4(length(texelFetch(iChannel0,ivec2(u*3.),0).xyz)/length(vec3(1)),0,0,1);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\n#define R iResolution.xy\n#define SIZE 256\n#define SIZEF float(SIZE)\n#define PI 3.14159265358979\n#define COMPRESSION_RATIO 8.\n#define COMPV SIZEF/sqrt(COMPRESSION_RATIO)\n\n//#define SHOW_FREQUENCY\n\n#ifdef SHOW_FREQUENCY\n#define SFFRAME 1\n#else\n#define SFFRAME 2\n#endif","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//Ethan Alexander Shulman 2019\n//Buffer B - X-axis Forward/inverse discrete sine transform\n\nvoid mainImage( out vec4 o, in vec2 u)\n{\n    if (iFrame > SFFRAME) {\n        o = texelFetch(iChannel2,ivec2(u),0);\n        return;\n    }\n    if (max(u.x,u.y)-SIZEF >= 0.) return;\n    \n    //bruteforce discrete sine transform\n    float t = 0., v = 0., st = floor(u.x)*PI/SIZEF;\n    vec4 st4 = vec4(0,st,st+st,st);\n    st4.w += st4.z;\n    for (int x = 0; x < SIZE; x += 4) {\n        #define tfo(xo) texelFetch(iChannel0,ivec2(x+xo,u.y),0).x\n        v += dot(vec4(tfo(0),tfo(1),tfo(2),tfo(3)),sin(t+st4));\n        t += st4.w+st;\n    }\n    o = vec4(v,0,0,1);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"//Ethan Alexander Shulman 2019\n//Buffer C - Y-axis Forward/inverse discrete sine transform + compression filter\n\nvoid mainImage( out vec4 o, in vec2 u)\n{    \n    if (iFrame == 0) {\n        //first frame initializes with source texture\n        o = texelFetch(iChannel2,ivec2(u),0);\n        return;\n    }\n    if (iFrame > SFFRAME) {\n        o = texelFetch(iChannel1,ivec2(u),0);\n        return;\n    }\n    if (max(u.x,u.y)-SIZEF >= 0.) return;\n    \n    //bruteforce discrete sine transform\n    float t = 0., v = 0., st = floor(u.y)*PI/SIZEF;\n    vec4 st4 = vec4(0,st,st+st,st);\n    st4.w += st4.z;\n    for (int y = 0; y < SIZE; y += 4) {\n        #define tfo(yo) texelFetch(iChannel0,ivec2(u.x,y+yo),0).x\n        v += dot(vec4(tfo(0),tfo(1),tfo(2),tfo(3)),sin(t+st4));\n        t += st4.w+st;\n    }\n    if (iFrame == 1) {\n        v /= SIZEF*SIZEF*.25;\n        \n        //compression filter applied to frequency values\n        float mxy = max(u.x,u.y),\n\t\t\tscale = mxy*.1;//scale frequency values for better quantization, pseudo normalizing\n        v = pow(abs(v*scale),.5)*sign(v);\n        //v = round(clamp(v,-1.,1.)*(1024.99))/1024.;//quantize to simulate 10bit(-1024 to 1024) per pixel storage\n        #ifndef SHOW_FREQUENCY\n        v = pow(abs(v),1./.5)*sign(v)/scale;//undo scaling\n        #endif\n        \n        if (max(u.x,u.y) > COMPV) v = 0.;//shave off higher frequencies for compression\n\t}\n    \n    o = vec4(v,0,0,1);\n}","name":"Buffer C","description":"","type":"buffer"}]}