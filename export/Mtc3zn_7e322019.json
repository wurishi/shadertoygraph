{"ver":"0.1","info":{"id":"Mtc3zn","date":"1467629150","viewed":121,"name":"Curve Fractals? v.0.0.1","username":"Imsure1200q_1UWE130","description":"This Is A Shader That Makes Display Screens With Black Curves. This Doesn't Need RTWBase. This Is My FIrst Sense-Shader. Thnx For Viewing! Feel Free To Like And Comment!!!","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal","experimental"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Curve Fractals? || v.0.0.1 / version 1!\n/*\n\n\n\nChangeLog:\n â€¢ Added Reference-To-English Translation.\n â€¢ Fractal Window Updated IN Beta 1.\n\n\n\n         \\\n          \\\n==========)>============-------------------------\n          /\n         /\n\n\n\n           \"Youtube\": Kino Bacaltos,\n           \"Gmail\": My Name ( ^ ) + @gmail.com,\n           \"Minecraft: Pocket - Edition\" Xbox Live: Imsure1200q,\n           (\"@xawgamer If YOU, xawgamer, Are Visiting This Site, Read My Email\"),\n\n\n\n\n          \n*/\n//Function mainImage: Display The Shader Around The Function's Parrenthesis On The Screen\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Declare A 3-component vector.\n    vec3 p = vec3(1.0,2.0,1.5);\n    //Declare The Position ( Instead Of A Vertex, Vertices Will Act With This Like gl_Position.)\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    //Add Noise Background To vec3 UV.\n\tvec4 fragColorpart = vec4(uv,0.5+0.5*sin(iTime),1.0);\n    //Add Colors To Front, Light, And Back ( of the noise editors )\n    vec4 light = vec4(1.0,1.0,1.0,1.0);\n    vec4 glasscolor = vec4(1.0,1.0,1.0,0.5);\n    vec4 fragGlassRefract = refract(glasscolor,fragColorpart,2.0);\n    vec4 fragGlassReflect = reflect(glasscolor,light);\n    //Make Our First New Color By Mixing Our Reflect & Refract Vectors.\n    vec4 newCol = mix(fragGlassReflect,fragGlassRefract,2.0);\n    //Add A Vector That Displays More Than One Screen Of The Main Shader.\n    vec4 fragColSeg = fract(newCol/10.0);\n    \n    //Adjustment:\n    \n    //Start Making Curve Shave Using A Float.\n    float fragColorSphere = dot(fragColSeg.yyx,fragColSeg.yyx);\n    //Make A Vector To Blend It,\n    float blend = float(fragColorpart.yyxy)/(iTime*(360.0/36.0)*10.0);\n    //To Stretch It,\n    float stretch = blend/pow(blend,blend);\n    //And To Combine When Stretched!\n    float combine = normalize(dot(p,p));\n    //Add A Mixing 4-component Vector That Then Mixes The Adjustment Tools.\n    vec4 spherex = vec4(\n        //First Mix Input\n        mix(\n            //Put Second Mix Input. Add fragColorSphere And Stretch It By 3.1 secs.\n            mix(fragColorSphere, stretch, 3.1),\n            //Add Another Second Mix Input. Make It Blend The Stretch Function So That Combine Will Repeat\n            //It.\n            mix(blend, mix(\n                combine, stretch, 2.0\n            ),\n                //Make Durability TO 2.0.\n                2.0),\n            //And 3.0.\n            3.0)\n        );\n    //You May Not Expect Why I Put \"vec4(spherex * spherex);\" In Vector Sphere, But, As You Can See,\n    //If You Take Out \" * spherex\" In The Vector \"sphere\", Then A Curve Won't Slightly Appear.\n    //It Will Possibly Look Like A Piece Of Circle. So I Added The \" * spherex\" To The Vector \"sphere\".\n    vec4 sphere = vec4(spherex * spherex);\n    //Finally, Make The Color Of Our Fragment Equal TO The 4-component vector \"sphere\".\n    fragColor = sphere;\n    //End The Void.\n}\n//THE END\n//X   X    DDDD    ||\n// X X     D   D  ||||\n//  X      D   D   ||\n// X X     D   D\n//X   X    DDDD    ()","name":"Image","description":"","type":"image"}]}