{"ver":"0.1","info":{"id":"lttBWj","date":"1541172982","viewed":223,"name":"Shader on the Beat","username":"slerpy","description":"1) Turn on some music\n2) Tab space every time you hear a beat\n3) Enjoy\n\nYou can stop pressing space when the loading bar finishes, but results will be more exact if you give it more samples.","likes":13,"published":1,"flags":48,"usePreview":0,"tags":["3d","test","example","noise","simple","music","tracing","bpm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 R;\n\nmat2 rot(float a)\n{\n    float s=sin(a),c=cos(a);\n    return mat2(c,s,-s,c);\n}\n\n// noise by iq\nfloat noise(vec3 p)\n{\n\tvec3 ip=floor(p); p-=ip; \n    vec3 s=vec3(7,157,113);\n    vec4 h=vec4(0.,s.yz,s.y+s.z)+dot(ip,s);\n    p=p*p*(3.-2.*p); \n    h=mix(fract(sin(h)*43758.5),fract(sin(h+s.x)*43758.5),p.x);\n    h.xy=mix(h.xz,h.yw,p.y);\n    return mix(h.x,h.y,p.z); \n}\n\nfloat map(vec3 p){\n\tfloat s=.2*sin(iTime+.1*p.z);\n    p.xy=p.xy*rot(s)+.5+vec2(-s,s);\n    return noise(p) - 0.2;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 tex = texture(iChannel0, uv);\n    \n    const float mini = 4.0;\n    if(tex.z < mini)\n    {\n        if(abs(uv.y-.5) > 0.1)discard;\n        fragColor = vec4(0, (mini + 1.) * uv.x < tex.z + 1., 0, 1);\n        return;\n    }\n    \n    float beat = (iTime - mod(tex.x, tex.w)) / tex.w;\n    R = vec3(iResolution.xy, beat);\n    \n\tvec3 rd=normalize(vec3(2.*gl_FragCoord.xy-R.xy,2.*R.y)),ro=vec3(0,0,iTime);\n    rd.xz*=rot(floor(R.z));\n\n    float t=.0,m; for(int i=0;i<30;i++)t+=.7*map(ro+rd*t);\n    fragColor=vec4(2.*pow(fract(-R.z)*exp(-.1*t),2.));\n    \n    fragColor.r = smoothstep(0.,1., fragColor.r);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float limit = 5.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(iFrame == 0)\n    {\n        fragColor = vec4(-100, -100, 100, 3);\n        return;\n    }\n    \n    vec4 back = texelFetch(iChannel0, ivec2(0.3*fragCoord), 0);\n    bool space = texelFetch(iChannel1, ivec2(0x20, 1), 0).x > 0.5;\n    \n    if(!space)\n    {\n        fragColor = back;\n        return;\n    }\n    \n    float last = back.x;\n    float count = 1.0 + back.z;\n    float beat = back.w;\n\n    float delta = clamp(iTime-last, 0.0, limit);\n    if(delta < limit)beat = mix(beat, delta, 1.0 / count);\n    else count = 0.0;\n\n    float shift = mod(iTime, beat);\n\n    fragColor = vec4(iTime, last, count, beat);\n}","name":"Buffer A","description":"","type":"buffer"}]}