{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// This is a procedural pattern that has 2 parameters, that generalizes cell-noise, \n// perlin-noise and voronoi, all of which can be written in terms of the former as:\n//\n// cellnoise(x) = pattern(0,0,x)\n// perlin(x) = pattern(0,1,x)\n// voronoi(x) = pattern(1,0,x)\n//\n// From this generalization of the three famouse patterns, a new one (which I call \n// \"Voronoise\") emerges naturally. It's like perlin noise a bit, but within a jittered \n// grid like voronoi):\n//\n// voronoise(x) = pattern(1,1,x)\n//\n// Not sure what one would use this generalization for, because it's slightly slower \n// than perlin or voronoise (and certainly much slower than cell noise), and in the \n// end as a shading TD you just want one or another depending of the type of visual \n// features you are looking for, I can't see a blending being needed in real life.  \n// But well, if only for the math fun it was worth trying. And they say a bit of \n// mathturbation can be healthy anyway!\n\n\n// Use the mouse to blend between different patterns:\n\n// ell noise    u=0,v=0\n// voronoi      u=1,v=0\n// perlin noise u=0,v1=\n// voronoise    u=1,v=1\n\n// More info here: https://iquilezles.org/articles/voronoise\n\nvec3 hash3( vec2 p )\n{\n    vec3 q = vec3( dot(p,vec2(127.1,311.7)), \n\t\t\t\t   dot(p,vec2(269.5,183.3)), \n\t\t\t\t   dot(p,vec2(419.2,371.9)) );\n\treturn fract(sin(q)*43758.5453);\n}\n\nfloat iqnoise( in vec2 x, float u, float v )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n\t\t\n\tfloat k = 1.0+63.0*pow(1.0-v,4.0);\n\t\n\tfloat va = 0.0;\n\tfloat wt = 0.0;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = vec2( float(i),float(j) );\n\t\tvec3 o = hash3( p + g )*vec3(u,u,1.0);\n\t\tvec2 r = g - f + o.xy;\n\t\tfloat d = dot(r,r);\n\t\tfloat ww = pow( 1.0-smoothstep(0.0,1.414,sqrt(d)), k );\n\t\tva += o.z*ww;\n\t\twt += ww;\n    }\n\t\n    return va/wt;\n}\n\nfloat noise ( vec2 x)\n{\n\treturn iqnoise(x, 0.0, 1.0);\n}\n\nmat2 m = mat2( 0.8, 0.6, -0.6, 0.8);\n\nfloat fbm( vec2 p)\n{\n\tfloat f = 0.0;\n    f += 0.5000 * noise(p); p *= m* 2.02;\n    f += 0.2500 * noise(p); p *= m* 2.03;\n    f += 0.1250 * noise(p); p *= m* 2.01;\n    f += 0.0625 * noise(p); p *= m* 2.04;\n    f /= 0.9375;\n    return f;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0 * uv;\n    p.x *= iResolution.x / iResolution.y;\n    \n    \n    float background = 1.0;// smoothstep(-0.25, 0.25, p.x);\n    \n    float r = sqrt( dot (p,p));\n    float a = atan(p.y, p.x) + 0.01*iTime;\n    vec3 col = vec3(1.0);\n    \n    float ss = 0.5 + 0.5 * sin(iTime * 2.0);\n    float anim = 1.0 + 0.05*ss* clamp(1.0-r, 0.0, 1.0);\n    r *= anim;\n    \n    if( r< 0.8)\n    {\n\t\tcol = vec3(0.12, 0.60, 0.57);\n        float f = fbm(5.0 * p);\n        col = mix(col, vec3(0.12,0.52, 0.60), f); // iris bluish green mix\n        \n        f = 1.0 - smoothstep( 0.2, 0.4, r);\n        col = mix(col, vec3(0.60,0.44,0.12), f); //yellow\n        \n        a += 0.05 * fbm(20.0*p);\n        \n        f = smoothstep(0.3, 1.0, fbm(vec2(5.0 * r, 20.0 * a))); //white highlight\n        col = mix(col, vec3(1.0), f);\n        \n        f = smoothstep(0.3, 1.0, fbm(vec2(5.0 * r, 5.0 * a))); //yellow highlight\n        col = mix(col, vec3(0.60,0.44,0.12), f);\n        \n        f = smoothstep(0.5, 1.0, fbm(vec2(5.0 * r, 15.0 * a))); //dark highlight\n        col *= 1.0 - f;\n        \n        f = smoothstep(0.55, 0.8, r); //dark at edge\n        col *= 1.0 - 0.5*f;\n        \n        f = smoothstep( 0.2, 0.25, r); //pupil\n        col *= f;\n        \n        f = 1.0 - smoothstep(0.0, 0.5, length(p - vec2(0.24, 0.2))); //light\n        col += vec3(1.0, 0.9, 0.8) *f * 0.75;       \n        \n        f = smoothstep(0.75, 0.8, r);\n        col = mix(col, vec3(1.0), f);\n    }\n    \n\tfragColor = vec4(col * background ,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XsjXz1","date":"1409234934","viewed":610,"name":"Blue Iris","username":"lexicobob","description":"my shader attempt from iq's eye tutorial on youtube, using his cool noise functions.  https://www.youtube.com/watch?v=emjuqqyq_qc","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["example","tutorial","eye","youtube"],"hasliked":0,"parentid":"","parentname":""}}