{"ver":"0.1","info":{"id":"3tcSz4","date":"1580446407","viewed":60,"name":"red mandelbrot","username":"funnbot","description":"mandelbrot shader because i can.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_ITER 1000.0\n\n#define float highp float\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nvec2 complexMul(vec2 a, vec2 b) {\n\treturn vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);\n}\n\nbool absLessThan(vec2 c, float b) {\n\treturn c.x * c.x + c.y * c.y < b * b;\n}\n\nvec2 mandelbrot(vec2 c) {\n    float i = 0.;\n\tvec2 z = c;\n    while (++i < MAX_ITER && absLessThan(z, 2.0)) {\n    \tz = complexMul(z, z) + c;\n    }\n    \n    return vec2(i, z.x * z.x + z.y * z.y);\n} \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float zoom = 1.0/(iTime*iTime);\n    vec2 offset = 1.0-iMouse.xy/iResolution.xy*2.0;\n\t\n    vec4 w = vec4(-2.5, 1.0, -1.0, 1.0);\n    vec2 coord = vec2(map(fragCoord.x, 0.0, iResolution.x, w.x, w.y), \n                      map(fragCoord.y, 0.0, iResolution.y, w.z, w.w)) * zoom + offset;\n    \n    vec2 iter = mandelbrot(coord);\n    \n    // Time varying pixel color\n    vec3 col = vec3(iter/(MAX_ITER-800.0), 0.0);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}