{"ver":"0.1","info":{"id":"dttcRs","date":"1699562353","viewed":102,"name":"convoluted game of life","username":"ThePlaneGuy45","description":"floating-point game of life which takes a specialized gaussian distribution to calculate next frame instead of a few rules.\n\nhttps://www.desmos.com/calculator/6hy2n5w4zn","likes":2,"published":3,"flags":32,"usePreview":0,"tags":["convolution","gaussian","gameoflife"],"hasliked":0,"parentid":"cl3cDn","parentname":"convolution stuff"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(iMouse.xy != vec2(0)){\n        fragCoord*=iMouse.x/iResolution.x;\n    }\n    fragColor = vec4(texelFetch(iChannel0, ivec2(fragCoord), 0).rrr, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec4 convolveTexel(sampler2D tex, ivec2 texel, mat3x3 matrix) {\n    ivec2 ts=textureSize(tex,0)-1;\n    vec4 r;\n    for(int x=-1;x<=1;x++){\n    for(int y=-1;y<=1;y++){\n   \n        r+=texelFetch(tex,clamp(texel+ivec2(x,y),ivec2(0),ts),0)*matrix[1-y][1-x];\n    \n    }}\n    return r;\n}\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\n\n#define PI 3.141592653589793238462643383279\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    const float bestPoint = 2.18;\n    const float spread0 = 0.58857;\n    const float spread1 = 0.196204;\n    \n    if(iFrame%1==0){\n    \n        vec4 neighbors = convolveTexel(iChannel0, ivec2(fragCoord), mat3x3(\n            1,1,1,\n            1,0,1,\n            1,1,1\n        ));\n        vec4 current = texelFetch(iChannel0, ivec2(fragCoord), 0).xyzw;\n    \n        vec4 a = spread0/(current+spread1);\n        vec4 b = a*neighbors - a*bestPoint + a*current/2.0;\n        b*=b;\n        vec4 c = exp(-PI*b);\n    \n        fragColor = c;\n        \n    } else {\n    \n        fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    \n    }\n    \n    if(iFrame==0){\n        vec3 hash = hash33(vec3(fragCoord, iFrame));\n        fragColor = vec4(hash, 0.0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}