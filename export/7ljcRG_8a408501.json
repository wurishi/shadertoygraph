{"ver":"0.1","info":{"id":"7ljcRG","date":"1651071052","viewed":281,"name":"Ripples on a sphere","username":"rucksack","description":"Simple ripple effect created by adding sine waves to a regular sphere SDF.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// For easily pasting this into a project I'm working on\n#define time iTime\n\n// Raymarching parameters\n#define MAX_STEPS 300\n#define NEAR_ENOUGH 0.001\n#define TOO_FAR 20.0\n#define NORMAL_DELTA 0.001\n\n// Lighting parameters\n#define DIFFUSE_FACTOR 1.\n#define SPECULAR_FACTOR .2\n#define SHININESS 8.\n\n#define BACKGROUND_COLOR vec3(0., 0., 0.)\n#define SURFACE_COLOR vec3(0.76471,0.78039,0.78039)\n#define BLOOM_COLOR vec3(0.84314,0.67843,0.39216)\n\n// Parameters\n#define SMOOTH_FACTOR 0.3\n#define BLOOM_STEP 0.04\n\nfloat sphere(vec3 point, vec3 center, float radius) {\n    return length(point - center) - radius;\n}\n\nfloat distance_from_everything(vec3 point) {\n    // Base sphere\n    float s = sphere(point, vec3(0, 0, 2.), 3.);\n    // Add some ripples\n    s += sin(20.* point.x * (cos(time)*.5+.5)) * sin(1. * point.z) * .1;\n    return s;\n}\n\nfloat ray_march(vec3 ray_origin, vec3 ray_direction, out int steps) {\n    // How far we've traveled\n    float d = 0.0;\n    steps = 0;\n    for (int i = 0; i < MAX_STEPS; i++) {\n        // Where we stand\n        vec3 point = ray_origin + ray_direction*d;\n        // How far anything is from us\n        float current_distance = distance_from_everything(point);\n        // March on\n        d += current_distance;\n        steps++;\n        // Check status - have we reached a surface?\n        if (current_distance < NEAR_ENOUGH || d > TOO_FAR)\n            break;\n    }\n    return d;\n}\n\n// See https://iquilezles.org/articles/normalsSDF\nvec3 estimate_normal(vec3 point) {\n    vec2 e = vec2(NORMAL_DELTA, 0); // x smol, y none\n    // Find normal as tangent of distance function\n    return normalize(vec3(\n        distance_from_everything(point + e.xyy) - distance_from_everything(point - e.xyy),\n        distance_from_everything(point + e.yxy) - distance_from_everything(point - e.yxy),\n        distance_from_everything(point + e.yyx) - distance_from_everything(point - e.yyx)\n    ));\n}\n\nfloat phong_light(vec3 point, vec3 light_position, vec3 n, vec3 camera) {\n    vec3 l = normalize(light_position-point);\n    vec3 c = normalize(camera-point);\n    float diffuse = max(dot(n, l), 0.);\n    float specular = pow(max(dot(reflect(-l, n), c), 0.), SHININESS);\n\n    return DIFFUSE_FACTOR * diffuse + SPECULAR_FACTOR * specular;\n}\n\nvec3 lighting(vec3 point, vec3 camera, vec3 ray_direction, float dist, int steps) {\n    // Avoid casting specular highlight from the void\n    // (and blend in bloom)\n    float bloom = .7* BLOOM_STEP * float(steps + 10);\n    if (length(point - camera) > TOO_FAR*0.99)\n        return BACKGROUND_COLOR + bloom * BLOOM_COLOR;\n\n    float phong = phong_light(point, vec3(1, 1, -2), estimate_normal(point), camera);\n    // Basic attempt at ambient occlusion\n    phong = phong * smoothstep(4., 0., float(steps)/10.);\n    return phong * SURFACE_COLOR + .7*sqrt(bloom) * BLOOM_COLOR;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 xy = (fragCoord - 0.5*iResolution.xy) / iResolution.y;\n\n    // Ray origin\n    vec3 camera = vec3(0., 0, -4.);\n    // Ray direction\n    vec3 ray_direction = vec3(xy, 1.);\n\n    int steps;\n    float d = ray_march(camera, ray_direction, steps);\n    \n    vec3 point = camera + ray_direction * d;\n    \n    vec3 base_color = lighting(point, camera, ray_direction, d, steps);\n\n    fragColor = vec4(base_color, 1.);\n}\n","name":"Image","description":"","type":"image"}]}