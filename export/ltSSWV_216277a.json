{"ver":"0.1","info":{"id":"ltSSWV","date":"1446473796","viewed":2643,"name":"Monitor Glitch","username":"jt","description":"Faking a realy bad tv reception. Could be usefull as post-effect.","likes":50,"published":1,"flags":8,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Monitor Glitch - Shader-Effect simulating bad TV reception\n//\n// Written in 2015 by JT (shaderview@protonmail.com)\n//\n// CC0 License\n//\n// To the extent possible under law, the author has dedicated\n// all copyright and related and neighboring rights to this software\n// to the public domain worldwide.\n// This software is distributed without any warranty.\n//\n// For a copy of the CC0 Public Domain Dedication see <http://creativecommons.org/publicdomain/zero/1.0/>.\n\n#define pi 3.1415926\n\nfloat t;\n\nvec3 colorSplit(vec2 uv, vec2 s)\n{\n    vec3 color;\n    color.r = texture(iChannel0, uv - s).r;\n    color.g = texture(iChannel0, uv    ).g;\n    color.b = texture(iChannel0, uv + s).b;\n    return color;\n}\n\nvec2 interlace(vec2 uv, float s)\n{\n    uv.x += s * (4.0 * fract((uv.y * iResolution.y) / 2.0) - 1.0);\n    return uv;\n}\n\nvec2 fault(vec2 uv, float s)\n{\n    //float v = (0.5 + 0.5 * cos(2.0 * pi * uv.y)) * (2.0 * uv.y - 1.0);\n    float v = pow(0.5 - 0.5 * cos(2.0 * pi * uv.y), 100.0) * sin(2.0 * pi * uv.y);\n    uv.x += v * s;\n    return uv;\n}\n\nvec2 rnd(vec2 uv, float s)\n{\n    uv.x += s * (2.0 * texture(iChannel1, uv * 0.05).x - 1.0);\n    return uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // t = fract(iTime / 10.0) * 10.0\n    float t = iTime / 10.0;\n\n\tvec2 uv = -fragCoord.xy / iResolution.xy;\n    \n    //float s = pow(0.5 + 0.5 * cos(2.0 * pi * t), 1000.0);\n    float s = texture(iChannel1, vec2(t * 0.2, 0.5)).r;\n    \n    uv = interlace(uv, s * 0.005);\n    //uv = fault(uv, s);\n    float r = texture(iChannel2, vec2(t, 0.0)).x;\n    //uv = fault(uv + vec2(0.0, fract(t * 20.0)), r) - vec2(0.0, fract(t * 20.0));\n    uv = fault(uv + vec2(0.0, fract(t * 2.0)), 5.0 * sign(r) * pow(abs(r), 5.0)) - vec2(0.0, fract(t * 2.0));\n    uv = rnd(uv, s * 0.02);\n    \n    vec3 color = colorSplit(uv, vec2(s * 0.02, 0.0));\n    //vec2 m = texture(iChannel2, uv).xy;\n    color = mix(color, texture(iChannel1, 0.5 * uv + t * 100.0).rgb, 0.25);\n    \n\tfragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"XsfGRr","channel":0}],"code":"// iq's hash function from https://www.shadertoy.com/view/MslGD8\nvec2 hash( vec2 p ) { p=vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))); return fract(sin(p)*18.5453); }\n\n#define pi 3.1415926\n\n// rand-function found online\nfloat rand(vec2 seed) // 0..1\n{\n    return fract(sin(dot(seed.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat blob(float time)\n{\n    return 0.5 * sin(2. * pi * time) + 0.5;\n}\n\nvec2 mainSound( in int samp,float time)\n{\n    //return vec2(rand(vec2(0.1 * time, 0.0)) * blob(time * 0.1));\n    //return 0.05 * vec2(rand(hash(vec2(time)))); // combining both random-functions sounds like white noise\n    //return (0.05 + 0.2 * pow(blob(time * .2), 50.0)) * vec2(rand(hash(vec2(time))));\n    return (0.05 + 0.2 * pow(blob(time * .2), 50.0)) * clamp(10.*vec2(rand(hash(vec2(time*.000001)))),vec2(0),vec2(1));\n}\n","name":"Sound","description":"","type":"sound"}]}