{"ver":"0.1","info":{"id":"4XBSzw","date":"1710352166","viewed":120,"name":"Realistic Analog Feedback","username":"jcarrano","description":"Trying to make it as realistic as possible,","likes":6,"published":3,"flags":32,"usePreview":0,"tags":["feedback","analog"],"hasliked":0,"parentid":"l3jSzW","parentname":"Interactive Video Feedback #2"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n#define AGC_TARGET 0.4\n#define AWB_STRENGTH 0.6\n\n#define AWB_FACTOR (1.0 - AWB_STRENGTH)\n\nmat3 rz(float theta)\n{\n    return mat3(vec3(cos(theta), sin(theta), .0),\n             \tvec3(-sin(theta), cos(theta), .0),\n                vec3(.0, .0, 1.));\n}\n\nmat3 ry(float theta)\n{\n    return mat3(vec3(cos(theta), .0, -sin(theta)),\n             \tvec3(.0, 1., .0),\n                vec3(sin(theta), .0, cos(theta)));\n}\n\nmat3 rx(float theta)\n{\n    return mat3(vec3(1., .0, .0),\n             \tvec3(.0, cos(theta), sin(theta)),\n                vec3(.0, -sin(theta), cos(theta)));\n}\n\n\nfloat mouserot()\n{\n    return (iMouse.z > 0.0)? (iMouse.x-iMouse.z)/4000. : 0.;\n}\n\nfloat mousezoom()\n{\n    return (iMouse.z > 0.0)? 1.0 + (iMouse.y-iResolution.y/2.0)/4000. : 1.0;\n}\n\nmat3 proj()\n{\n    float g = 0.001 * cos(iTime/1.2);\n    float h = 0.001 * sin(iTime/1.0);\n    \n    return rx(g) * ry(h) * rz(mouserot());\n}\n\n// https://www.pcg-random.org/\nvoid pcg4d(inout uvec4 v)\n{\n\tv = v * 1664525u + 1013904223u;\n    v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;\n    v = v ^ (v>>16u);\n    v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;\n}\n\n// https://www.cs.sfu.ca/mmbook/programming_assignments/additional_notes/rgb_yuv_note/RGB-YUV.pdf\n\nconst mat3 yuv2rgb = mat3(vec3(1., 1., 1.),\n                          vec3(0., -0.39465, 2.03211),\n                          vec3(1.13983, -0.58060,  0.));\n\nconst mat3 rgb2yuv = mat3(vec3(0.299, -0.14713, 0.615),\n                          vec3(0.587, -0.28886,  -0.51499),\n                          vec3(0.114, 0.436,  -0.10001));\n\n\nconst mat2 uvbleed = mat2(vec2(0.99, 0.01),\n                          vec2(0.03, 0.99));\n\n\nvec3 analog_video_response(vec3 camera_pix, vec2 screen_coord, vec3 noise)\n{\n    // Component bleed\n    vec3 yuv = rgb2yuv*camera_pix;\n    //yuv.yz = trunc(uvbleed*yuv.yz*512.)/512.;\n    int pal = int(screen_coord.y)%2;\n    float subcarrier = float(((int(screen_coord.x) / 2 +pal)%2)*2-1);\n    \n    mat3 yuvDxBleed = mat3(vec3(.5, subcarrier*.02,-subcarrier*.02),\n                           vec3(subcarrier*.01,-.3,.01),\n                           vec3(-subcarrier*.01,.01,-.3));\n    yuv += yuvDxBleed*dFdx(yuv);\n    yuv += dFdy(yuv)*vec3(.5, -.1, -.1);\n    yuv.yz = clamp(yuv.yz, -yuv.x, yuv.x);\n    yuv += (noise - .5)*vec3(0.001, 0.1, 0.1);\n    return yuv2rgb*yuv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy - 0.5;\n    vec3 pqr = proj()*vec3(uv, mousezoom()) + mousezoom()*vec3(0.50, 0.50, 0.);\n\n    vec4 avgValue = textureLod(iChannel0, vec2(0.5), 10.0);\n    \n    // Automatic Gain Control\n    float avg_lumi = (avgValue.r + avgValue.g + avgValue.b)/3.0;\n    float agc0 = avg_lumi-AGC_TARGET;\n    float agc= 1.0 - agc0*agc0*agc0*10.0;\n    \n    // Automatic White Balance\n    vec3 wb0 = (avgValue.rgb + AWB_FACTOR) / (max(avgValue.r, max(avgValue.g, avgValue.b)) + AWB_FACTOR);\n    vec3 wb1 = (2.0 - sqrt(wb0)) * agc;\n    \n    \n    vec4 screen = textureProj(iChannel0, pqr, -1.0);\n    screen.yz = textureProj(iChannel0, pqr, 1.0).yz;\n    \n    uvec4 seed0 = uvec4(fragCoord.x, screen.w, uint(iFrame), (agc0+0.5)*512.0);\n    pcg4d(seed0);\n    vec3 noise = vec3(seed0.rgb%256u)/256.0;\n    \n    vec3 as_seen = clamp(wb1*screen.rgb*0.98, 0.0, 1.0);\n    fragColor.rgb = pow(clamp(analog_video_response(as_seen, fragCoord, noise), 0., 1.), vec3(1.15));\n    fragColor.a = float(seed0.w);\n}","name":"Buffer A","description":"","type":"buffer"}]}