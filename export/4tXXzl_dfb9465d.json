{"ver":"0.1","info":{"id":"4tXXzl","date":"1440063643","viewed":521,"name":"My Gaussian Blur Test","username":"jackdavenport","description":"An experiment to blur a texture. Drag mouse to adjust blur intensity.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["blur","fast","gaussian"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// Gaussian Blur by Jack Davenport\n// Adapted from mattdesl's shader tutorials\n// Source: https://github.com/mattdesl/lwjgl-basics/wiki/ShaderLesson5\nvec3 gaussian(sampler2D u_texture, vec2 tc, vec2 dir, float radius, float resolution) {\n \n    vec4 sum = vec4(0.0);\n    float blur = radius / resolution; \n\n    float hstep = dir.x;\n    float vstep = dir.y;\n    \n    sum += texture(u_texture, vec2(tc.x - 4.0*blur*hstep, tc.y - 4.0*blur*vstep)) * 0.0162162162;\n    sum += texture(u_texture, vec2(tc.x - 3.0*blur*hstep, tc.y - 3.0*blur*vstep)) * 0.0540540541;\n    sum += texture(u_texture, vec2(tc.x - 2.0*blur*hstep, tc.y - 2.0*blur*vstep)) * 0.1216216216;\n    sum += texture(u_texture, vec2(tc.x - 1.0*blur*hstep, tc.y - 1.0*blur*vstep)) * 0.1945945946;\n\n    sum += texture(u_texture, vec2(tc.x, tc.y)) * 0.2270270270;\n\n    sum += texture(u_texture, vec2(tc.x + 1.0*blur*hstep, tc.y + 1.0*blur*vstep)) * 0.1945945946;\n    sum += texture(u_texture, vec2(tc.x + 2.0*blur*hstep, tc.y + 2.0*blur*vstep)) * 0.1216216216;\n    sum += texture(u_texture, vec2(tc.x + 3.0*blur*hstep, tc.y + 3.0*blur*vstep)) * 0.0540540541;\n    sum += texture(u_texture, vec2(tc.x + 4.0*blur*hstep, tc.y + 4.0*blur*vstep)) * 0.0162162162;\n\n    return sum.xyz;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 final = vec3(0.);\n \t\n    float s = sin(iTime * 4.) * 4.;\n    \n    if(iMouse.z > 0.) {\n        \n        s = 8. * (iMouse.x / iResolution.x);\n        \n    }\n    \n    final += gaussian(iChannel0,uv,vec2(1.,0.),s,sqrt(iResolution.x*iResolution.y)) / 2.;\n   \tfinal += gaussian(iChannel0,uv,vec2(0.,1.),s,sqrt(iResolution.x*iResolution.y)) / 2.;\n    \n    fragColor = vec4(final.xyz,1.);\n}\n\n// Adapted from xissburg's blog\n// Source: http://xissburg.com/faster-gaussian-blur-in-glsl/\nvec4 gaussian_deprecated(vec2 uv) {\n \n    vec2 dir = vec2(sin(iTime / 2.) * 2.);\n    vec4 tex = vec4(0.);\n    \n    float hstep = dir.x;\n    float vstep = dir.y;\n    \n    hstep = dir.x;\n    vstep = 0.;\n    tex += texture(iChannel0, uv + vec2(-0.028 * hstep, -0.028 * vstep))*0.0044299121055113265;\n    tex += texture(iChannel0, uv + vec2(-0.024 * hstep, -0.024 * vstep))*0.00895781211794;\n    tex += texture(iChannel0, uv + vec2(-0.020 * hstep, -0.020 * vstep))*0.0215963866053;\n    tex += texture(iChannel0, uv + vec2(-0.016 * hstep, -0.016 * vstep))*0.0443683338718;\n    tex += texture(iChannel0, uv + vec2(-0.012 * hstep, -0.012 * vstep))*0.0776744219933;\n    tex += texture(iChannel0, uv + vec2(-0.008 * hstep, -0.008 * vstep))*0.115876621105;\n    tex += texture(iChannel0, uv + vec2(-0.004 * hstep, -0.004 * vstep))*0.147308056121;\n    \n    tex += texture(iChannel0, uv                    \t\t\t\t\t )*0.159576912161;\n    \n    hstep = 0.;\n    vstep = dir.y;\n    tex += texture(iChannel0, uv + vec2(0.004 * hstep,  0.004 * vstep))*0.147308056121;\n    tex += texture(iChannel0, uv + vec2(0.008 * hstep,  0.008 * vstep))*0.115876621105;\n    tex += texture(iChannel0, uv + vec2(0.012 * hstep,  0.012 * vstep))*0.0776744219933;\n    tex += texture(iChannel0, uv + vec2(0.016 * hstep,  0.016 * vstep))*0.0443683338718;\n    tex += texture(iChannel0, uv + vec2(0.020 * hstep,  0.020 * vstep))*0.0215963866053;\n    tex += texture(iChannel0, uv + vec2(0.024 * hstep,  0.024 * vstep))*0.00895781211794;\n    tex += texture(iChannel0, uv + vec2(0.028 * hstep,  0.028 * vstep))*0.0044299121055113265;\n    \n    return tex;\n    \n}","name":"","description":"","type":"image"}]}