{"ver":"0.1","info":{"id":"Wd23Dz","date":"1549475694","viewed":236,"name":"smooth min test 2","username":"remotion","description":"based on https://www.shadertoy.com/view/4sSyRy","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","line","circle","box","smin","union"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// self   https://www.shadertoy.com/view/Wd23Dz\n\n#define time iTime\n\n// #define COLORED\n\n\n// Clamp [0..1] range\n#define saturate(a) clamp(a, 0.0, 1.0)\n\n// Basically a triangle wave\nfloat repeat(float x) { return abs(fract(x*0.5+0.5)-0.5)*2.0; }\n\nfloat smin(float a, float b, float k){\n\tfloat h = clamp(0.5 + 0.5*(a-b)/k, 0.0, 1.0);\n\treturn mix(a, b, h) - k*h*(1.0-h);\n}\n\n// polynomial smooth min (k = 0.1);\nfloat sminCubic(float a, float b, float k){\n    float h = max(k-abs(a-b), 0.0);\n    return min(a, b) - h*h*h/(6.0*k*k);\n}\n\nfloat dBox2d(vec2 p, vec2 b) {\n\treturn max(abs(p.x) - b.x, abs(p.y) - b.y);\n}\n\nfloat sdBox(in vec2 p, in vec2 pos, in vec2 size) {\n    vec2 d = abs(p-pos)-size;\n    return min(0.0, max(d.x, d.y))+length(max(d,0.0));\n}\n\nfloat sdLine( vec2 p, vec2 a, vec2 b, float r ) {\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\n// https://www.shadertoy.com/view/ll2GD3\nvec3 palette(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    t = clamp(t, 0.0, 1.0);\n    return a + b*cos(6.28318*(c*t+d));\n}\n\nvec2 screenToWorld(vec2 screen) {\n    vec2 result = 2.0 * (screen/iResolution.xy - 0.5);\n    result.x *= iResolution.x/iResolution.y;\n    return result;\n}\n\nfloat sdf(vec2 uv){\n     vec2 pm = (length(iMouse.xy)<24.0) ? vec2(sin(-iTime),cos(iTime))*0.7 : screenToWorld(iMouse.xy);    \n    \n\tfloat d0 = length(uv-vec2( .7*sin(0.5*time),.4*cos(1.*time)\t))-0.1;\n\tfloat d1 = length(uv-vec2( .7*sin(1.*time),\t.4*cos(2.*time)\t))-0.08;\n    float d2 = sdBox(uv,pm,vec2(0.2,0.1));\n\tvec2 p1 = vec2( 0.2*sin(0.5*time),0.5*cos(1.0*time));\n    vec2 p2 = vec2( 0.5*sin(1.0*time),0.2*cos(2.0*time)\t);\n    float d3 = sdLine(uv,p1,p2, 0.01);\n    return smin(smin(smin(d0, d2, 0.2),d1,0.3),d3,0.2);\n\n}\n\nvec2 screenToWorld(vec2 screen);\nvec3 palette(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d);\nvec3 shade(float sd);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n#ifdef COLORED // colored \n    // project screen coordinate into world\n\tvec2 p = screenToWorld(fragCoord);\n    \n    // signed distance for scene\n    float sd = sdf(p);\n    \n    // compute signed distance to a colour\n    vec3 col = shade(sd);\n    \n    fragColor = vec4(col, 1.0);\n    \n#else // black and white\n    // project screen coordinate into world\n\tvec2 p = screenToWorld(fragCoord);\n    \n\tfloat t = 1.0/iResolution.y;\n    float d = sdf(p);\n\tfloat c = smoothstep(-t*1.5,t*1.5,d)-length(p)/3.0;\n    \n    // grid lines\n    c -= saturate(repeat(p.x*20.0) - 0.92)*1.5;\n    c -= saturate(repeat(p.y*20.0) - 0.92)*1.5;\n    \n\tfragColor = vec4(c);\n#endif\n}\n\n\nvec3 shade(float sd) {\n    float maxDist = 2.0;\n    vec3 palCol = palette(clamp(0.5-sd*0.4, -maxDist,maxDist), \n                      vec3(0.3,0.3,0.1),vec3(0.9,0.8,0.9),vec3(0.9,0.7,0.0),vec3(0.75,0.9,0.8));\n\n    vec3 col = palCol;\n    \n    float invResY =  1.0 / iResolution.y;\n    \n    // Darken around surface\n\tcol = mix(col, col*1.0-exp(-10.0*abs(sd)), 0.4);\n\t// repeating lines\n    col *= 0.8 + 0.2*cos(200.0*sd);\n    \n    // White outline at surface\n    col = mix(col, vec3(1.0), 1.0-smoothstep(0.0,invResY*2.5,abs(sd)));\n    \n    return col;\n}","name":"Image","description":"","type":"image"}]}