{"ver":"0.1","info":{"id":"wdjGWm","date":"1549068950","viewed":192,"name":"Inverse Square Law","username":"richard702","description":"2D demo of inverse square law.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2dlight"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Metaball{\n    vec2 Position;\n    float RadiusSq;\n    vec3 Color3;\n};\n\nMetaball light1 = Metaball(\n    vec2(0.9, 0.5), pow(0.1, 2.0), vec3(1.0, 0.0, 0.0)\n);\nMetaball light2 = Metaball(\n    vec2(0.9, 0.5), pow(0.1, 2.0), vec3(0.0, 1.0, 1.0)\n);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n    float lightOffset = 0.4*sin(iTime);\n    light2.Position.x = 0.9 + lightOffset*cos(0.5*iTime);\n    light2.Position.y = 0.5 + lightOffset*sin(0.5*iTime);\n    vec2 disp1 = uv-light1.Position;\n    vec2 disp2 = uv-light2.Position;\n    float g1 = \n        clamp(light1.RadiusSq/(dot(disp1, disp1)+0.001), 0.0, 1.0);\n    float g2 = \n        clamp(light2.RadiusSq/(dot(disp2, disp2)+0.001), 0.0, 1.0);\n    vec3 combColor = g1*light1.Color3 + g2*light2.Color3;\n    fragColor = vec4(combColor, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}