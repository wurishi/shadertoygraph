{"ver":"0.1","info":{"id":"NttSRS","date":"1640875954","viewed":251,"name":"[TDF2021] Sound Visualizar","username":"gam0022","description":"Shader showdown semi-final at Tokyo Demo Fest 2021 coded in 25 minutes.\nMinor modified for fitting music.\n\nhttps://twitter.com/gam0022/status/1469924900257562627","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["fft","livecoding"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define time iTime\n#define saturate(x) clamp(x, 0., 1.)\n#define PI acos(-1.)\n#define TAU (2. * PI)\n#define beat (time * 114. / 60.)\n#define VOL 0.\n#define SOL 1.\n#define beatTau (beat * TAU)\n\nfloat fft(float d) { return texture(iChannel0, vec2(fract(d), 0)).r * 0.4; }\n\nfloat ffts(float d) { return texture(iChannel0, vec2(fract(d), 1)).r * 0.4; }\n\nfloat sdBox(vec3 p, vec3 b) {\n    vec3 q = abs(p) - b;\n    return length(max(q, vec3(0))) + min(0., max(q.x, max(q.y, q.z)));\n}\n\nvoid U(inout vec4 m, float d, float a, float b, float c) {\n    if (d < m.x) m = vec4(d, a, b, c);\n}\n\nvec3 pal(float a) { return vec3(0.5) + vec3(0.5) * cos(TAU * (a + vec3(0, 1, 2) / 3.)); }\n\nvoid rot(inout vec2 p, float a) { p *= mat2(cos(a), sin(a), sin(-a), cos(a)); }\n\nvec4 map(vec3 p) {\n    vec4 m = vec4(1, VOL, 0, 0);\n    vec3 pos = p;\n    vec3 id = abs(pos);\n\n    float a = 1. + 5. * ffts(0.01);\n    p = mod(p, a) - 0.5 * a;\n\n    float b = 1.4;\n    float s = 1.;\n\n    for (int i = 0; i < 5; i++) {\n        p = abs(p) - 0.5;\n        rot(p.xz, -0.5);\n        p = abs(p) - 0.4;\n        rot(p.zy, -0.2);\n\n        s *= b;\n        p *= b;\n    }\n\n    float d = pow(fract(id.x * 5.), 0.5);\n\n    U(m, sdBox(p, vec3(2, 0.1, 0.1)) / s, SOL, 1., pos.x * 10.);\n    U(m, sdBox(p, vec3(2, 0.2, 0.1)) / s, VOL, 10. * fft(d), d);\n    U(m, sdBox(p, vec3(0.3, 5, 0.1)) / s, VOL, 50. * fft(d), d);\n\n    return m;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n\n    vec3 col = vec3(0);\n\n    vec3 ro = vec3(0, 0, time);\n    vec3 ray = vec3(uv, 1);\n    rot(ray.xy, TAU * 2.313 * floor(beat));\n    ray = normalize(ray);\n\n    float t = 0.;\n    for (int i = 0; i < 100; i++) {\n        vec3 p = ro + ray * t;\n        vec4 m = map(p);\n        float d = m.x;\n\n        if (m.y == SOL) {\n            t += d;\n            if (d < 0.01) {\n                col += 0.01 * float(i);\n                break;\n            }\n        } else {\n            t += abs(d) * 0.5 + 0.01;\n            col += saturate(0.0002 * pal(m.w) * m.z / abs(d));\n        }\n    }\n\n    vec2 uv2 = saturate(abs(uv));\n\n    float wave = fft(uv2.x * 1.) - uv2.y;\n\n    col = mix(vec3(0), col, exp(-1. * t));\n\n    float b = mod(beat, 4.);\n\n    if (b < 1.) {\n        col += 5. * wave;\n    } else if (b < 2.) {\n        col += -100. * wave;\n    } else if (b < 3.) {\n        rot(uv, TAU * exp(-8. * mod(beat, 1.)) / 4.);\n        float d = abs(uv.x) + abs(uv.y);\n\n        d = mod(d * 4., 0.5);\n\n        float th = exp(-4. * mod(beat, 1.));\n\n        if (d < th - 0.1 && d < th) {\n            col += -100. * wave;\n        } else {\n            col += 5. * wave;\n        }\n    } else {\n        col += 10. * wave;\n    }\n\n    fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}