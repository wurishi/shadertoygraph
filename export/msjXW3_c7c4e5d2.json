{"ver":"0.1","info":{"id":"msjXW3","date":"1671040164","viewed":95,"name":"Isosceles Trapezoid Inside Test","username":"tepSHATOY","description":"Triangle, parallelogram, isosceles trapezoid inside test","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["insidetest"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#define TRIANGLE\n//#define PARALLELOGRAM\n#define ISOSCELES_TRAPEZOID\n\nvec3 drawPoints(vec3 color, vec3 tc, vec3 p)\n{\n    vec3 d = tc - p;\n    float radius2 = dot(d, d);\n    if (radius2 < 1e-4)\n        return vec3(1.0, 1.0, 1.0);\n    return color;\n}\n\n// test whether q is inside triangle (p0, p1, p2)\n// this assumes all points are coplanar\nbool insideTriangle(vec3 q, vec3 p0, vec3 p1, vec3 p2)\n{\n    // figure out barycentric coordinate \n    vec3 w = q - p0;\n    vec3 v01 = p1 - p0;\n    vec3 v02 = p2 - p0;\n    vec3 n = cross(v01, v02);\n    float denom = 1.0 / dot(n, n);\n    float u = dot(cross(w, v02), n) * denom;\n    float v = dot(cross(v01, w), n) * denom;\n    return (u >= 0.0 && v >= 0.0 && (u+v < 1.0f));\n}\n\n// test whether q is inside parallelogram (p0, p1, p2, p3)\n// this assumes all points are coplanar\nbool insideParallelogram(vec3 q, vec3 p0, vec3 p1, vec3 p2, vec3 p3)\n{\n    // figure out barycentric coordinate \n    vec3 w = q - p0;\n    vec3 v01 = p1 - p0;\n    vec3 v02 = p2 - p0;\n    vec3 n = cross(v01, v02);\n    float denom = 1.0 / dot(n, n);\n    float u = dot(cross(w, v02), n) * denom;\n    float v = dot(cross(v01, w), n) * denom;\n    return (abs(0.5 - u) <= 0.5 && abs(0.5 - v) <= 0.5);\n    //return (0.0 <= u && u <= 1.0 && 0.0 <= v && v <= 1.0);\n}\n\nvec2 computeBarycentric(vec3 px, vec3 p2, vec3 p3, vec3 q)\n{\n    // figure out barycentric coordinate \n    vec3 m = q - px;\n    vec3 px2 = p2 - px;\n    vec3 px3 = p3 - px;\n    vec3 n = cross(px2, px3);\n    float denom = 1.0 / dot(n, n);\n    float bx = dot(cross(m, px3), n) * denom;\n    float by = dot(cross(px2, m), n) * denom;\n    return vec2(bx, by);\n}\n\nbool insideIsoscelesTrapezoid(vec3 q, vec3 p0, vec3 p1, vec3 p2, vec3 p3)\n{\n    // isosceles trapezoid can be viewed as the big triangle - small triangle\n    vec3 p01 = p1 - p0;\n    vec3 p23 = p3 - p2;\n    vec3 p02 = p2 - p0;\n    float dot_p01_p23 = dot(p01, p23);\n    float dot_p23_p23 = dot(p23, p23);        \n    float t = dot_p23_p23 / (dot_p23_p23 - dot_p01_p23);        \n    vec3 px = p2 - t * p02;\n\n    vec3 m = q - px;\n    vec3 px2 = p2 - px;\n    vec3 px3 = p3 - px;\n    vec3 n = cross(px2, px3);\n    float denom = 1.0 / dot(n, n);\n\n    float u = dot(cross(m, px3), n) * denom;\n    float v = dot(cross(px2, m), n) * denom;\n    float u_plus_v = u + v;    \n    float u_plus_v_min = dot_p01_p23 / dot_p23_p23;\n\n    return (u >= 0.0 && v >= 0.0 && (u_plus_v_min <= u_plus_v && u_plus_v <= 1.0f));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 texcoord = fragCoord/iResolution.xy;\n\n    vec3 q = vec3(texcoord, 0.0);\n            \n    vec3 color = vec3(0.0, 0.0, 0.0);\n    \n    #if defined(TRIANGLE)\n\n        vec3 p0 = vec3(0.4, 0.8, 0.0);\n        vec3 p1 = vec3(0.6, 0.8, 0.0);\n        vec3 p2 = vec3(0.1, 0.4, 0.0);\n\n        if (insideTriangle(q, p0, p1, p2))\n            color = vec3(0.5, 0.0, 0.0);\n            \n        // draw points for debug\n        color = drawPoints(color, q, p0);\n        color = drawPoints(color, q, p1);\n        color = drawPoints(color, q, p2);\n        \n    #elif defined(PARALLELOGRAM)\n\n        vec3 p0 = vec3(0.4, 0.8, 0.0);\n        vec3 p1 = vec3(0.6, 0.8, 0.0);\n        vec3 p2 = vec3(0.1, 0.4, 0.0);\n        vec3 p3 = vec3(0.3, 0.4, 0.0);\n\n        if (insideParallelogram(q, p0, p1, p2, p3))\n            color = vec3(0.0, 0.5, 0.0);\n\n        // draw points for debug\n        color = drawPoints(color, q, p0);\n        color = drawPoints(color, q, p1);\n        color = drawPoints(color, q, p2);\n        color = drawPoints(color, q, p3);\n\n    #elif defined(ISOSCELES_TRAPEZOID)\n\n        vec3 p0 = vec3(0.4, 0.8, 0.0);\n        vec3 p1 = vec3(0.6, 0.8, 0.0);\n        vec3 p2 = vec3(0.1, 0.4, 0.0);\n        vec3 p3 = vec3(0.9, 0.4, 0.0);\n\n        if (insideIsoscelesTrapezoid(q, p0, p1, p2, p3))\n            color = vec3(0.0, 0.0, 0.5);\n        \n        // draw points for debug\n        color = drawPoints(color, q, p0);\n        color = drawPoints(color, q, p1);\n        color = drawPoints(color, q, p2);\n        color = drawPoints(color, q, p3);        \n        \n    #endif\n        \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}