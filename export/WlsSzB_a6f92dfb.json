{"ver":"0.1","info":{"id":"WlsSzB","date":"1563406188","viewed":151,"name":"Polygon Tile","username":"ParaBellum","description":"Creating a polygon function. I don't know if my function to create any regular polygon is good but it Works.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","polygons"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592\n\nfloat polygon(vec2 p, float s)\n{\n    (s<3.)?s=3.:s=s;\n    float a = ceil(s*(atan(-p.y, -p.x)/PI+1.)*.5);\n    float n = 2.*PI/s;\n    float t = n*a-n*.5;\n    return dot(p, vec2(cos(t), sin(t)));\n}\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n    \n    float s = 4.;\n    vec2 i = floor(uv*s);\n    vec2 e = vec2(.01, .0);\n    vec2 f = fract(uv*s)*2.-1.;\n    f *= rotate2d(iTime);\n    float l = i.y*s+i.x+3.+i.y*3.;\n    float p = 1.-polygon(f*1.9, l);\n\tfloat dx = 1.-polygon((f-e.xy)*1.9, l);\n    float dy = 1.-polygon((f-e.yx)*1.9, l);\n    \n    dx = (dx-p)/e.x;\n    dy = (dy-p)/e.x;\n    \n    vec3 n = normalize(vec3(dx, dy, 1.));\n    vec3 lP = vec3(cos(iTime), sin(iTime), 1.)*6.;\n    vec3 lD = normalize(lP - vec3(f, .0));\n    float ambi = (1.-p); \n    float diff = max(dot(n, lD), 0.);\n    float r = ambi+diff;\n    \n    vec3 col = vec3(0.);\n    float m = (i.x+1.)/s;\n    if (i.y == 0.)\n    \tcol += p*mix(vec3(1., 0., .0), vec3(1., .2, .6), m)*r;\n    else if (i.y==1.)\n        col += p*mix(vec3(0., 1., 0.), vec3(.6, 1., .2), m)*r;\n    else if (i.y==2.)\n        col += p*mix(vec3(0., 0., 1.), vec3(.2, .6, 1.), m)*r;\n    else\n        col += p*mix(vec3(1., 1., 0.), vec3(1., .6, .2), m)*r;\n        \n    fragColor = vec4(sqrt(clamp(col, 0., 1.)),1.0);\n}","name":"Image","description":"","type":"image"}]}