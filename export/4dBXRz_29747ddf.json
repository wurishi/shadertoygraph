{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"music","id":"4dfGzn","filepath":"/media/a/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"#define FILTER\n#define LIGHT_SOURCE\n#define GLOW\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // aspect ratio\n    float a = iResolution.x/iResolution.y;\n    \n    // position of screen\n    // dom x = [0.0, 1.0]\n    // dom y = [0.0, 1.0]\n    // origin is at bottom left corner\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // multiply aspect ratio to remove distortions\n    uv.x *= a;\n    \n    // align polar graph to center of screen\n    vec2 q = uv - vec2(0.5*a, 0.5);\n    \n    // fft values, look at the bars at the bottom of the screen\n    float fft = texture(iChannel0, vec2(0.0, 0.)).x;\n    float fft2 = texture(iChannel0, vec2(1., 0.)).x;\n    float fft3 = texture(iChannel0, vec2(0.5, 0.)).x;\n    \n    // theta value\n    float t = atan(q.y, q.x);\n    \n    // time from start of song\n    float ts = iChannelTime[0];\n    \n    // the main polar graph, r = ...\n    float r = pow(fft*2.-0.5, 2.)*cos(6.*t + (fft2*1.5 + ts)*5.) + 2.0 + pow(fft, 2.);\n    r *= fft/12. + 0.04;\n    \n    vec2 p = q;\n    #ifdef FILTER\n        p.x += sin(q.y*5000.)/100.;\n        p.y += cos(q.x*5000.)/100.;\n    #endif\n    \n    \n    // bg\n    vec3 col = vec3(smoothstep(r, r + fft*0.02 + 0.01, length(p)));\n    #ifdef GLOW\n    \tcol *= 1.*smoothstep(0., r + fft*0.2, length(q));\n    #endif\n    \n    col.r = clamp(col.r, 0.0, 1.0);\n    col.g = clamp(col.g, 0.0, 1.0);\n    col.b = clamp(col.b, 0.0, 1.0);\n    \n    // fg\n    vec3 col2 = 1.0 - col;\n\n    // bg\n    // radial gradient\n    col -= 0.5*smoothstep(0.0, 2., length(q/(fft + 0.5)));\n    \n    #ifdef LIGHT_SOURCE\n        // give a more red warm light colour\n        col.g *= 0.97;\n        col.b *= 0.97;\n\n        // cool lighting effect\n        col += uv.y/16.;\n    #endif\n    \n    #ifdef FILTER\n    \tcol += sin(50.*q.y - ts*3.)*(fft*0.5+0.5)*0.05 - 0.1*(fft*0.3+0.5)*abs(-2.*q.x*sin(q.y*1000. - ts*5.));\n    #endif // FILTER\n\n    // fg\n    // colour of polar graph\n    col2 *= vec3(0.0, 0.9, 0.9);\n    // radial gradient for polar graph.\n    // removing this will change the polar graph to a solid colour\n    col2 *= length(q)*0.5 + 0.85;\n    \n    // add fg to bg\n    col += col2;\n    \n    // volia!\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4dBXRz","date":"1408226300","viewed":470,"name":"Polar Beats","username":"sauj123","description":"Just a simple spinning polar graph that moves with the beats.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["fft","music","radial","graph","polar"],"hasliked":0,"parentid":"","parentname":""}}