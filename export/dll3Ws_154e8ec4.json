{"ver":"0.1","info":{"id":"dll3Ws","date":"1672691409","viewed":179,"name":"Heart Cyrstal","username":"Hyeve","description":"made for someone specific <3","likes":16,"published":1,"flags":32,"usePreview":0,"tags":["3d","raymarching","glass","heart","reflections","crystal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//See the common tab for fps control.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define DTR 0.01745329\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define vmin(a, b) (a.x < b.x ? a : b)\n\nvec2 uv=vec2(0);\nvec3 cp,cn,cr,ss,oc,gl=vec3(0),vb,ro,rd,so,ld,no,on;\nvec4 fc=vec4(0),cc=vec4(0);\nfloat tt,cd,sd,md,io,oa,td=0.,li,sp;\nint sk,sc,fi=1;\n\nfloat bx(vec3 p,vec3 s){vec3 q=abs(p)-s;return min(max(q.x,max(q.y,q.z)),0.)+length(max(q,0.));}\nfloat cy(vec3 p, vec2 s){p.y+=s.x/2.;p.y-=clamp(p.y,0.,s.x);return length(p)-s.y;}\nfloat tor(vec3 p,vec2 t){return length(vec2(length(p.xz)-t.x,p.y))-t.y;}\nfloat gy(vec3 p, vec3 s){return (abs(dot(sin(p*s.x),cos((p*s.y).zxy)))-s.z)/(max(s.x,s.y)*1.8);}\nfloat smin(float a, float b, float k){float h=clamp(0.5+0.5*(b-a)/k,0.,1.);return mix(b,a,h)-k*h*(1.-h);}\n\nfloat h11 (float a){return fract(sin((a)*12.9898)*43758.5453123);}\n\n#define pi 3.1415926535\n\nfloat hcy(vec3 p, vec3 s)\n{\n\tvec2 w = vec2(abs(length(p.xy) - s.x + s.z) - s.z, abs(p.z) - s.y);\n\treturn min(max(w.x,w.y),0.0) + length(max(w,0.0));\n}\n\n\nvec3 pixels(vec3 p, float s, float r) {\n\tp += vec3(h11(floor(p.y * s)),h11(floor(p.z * s)),h11(floor(p.x * s)));\n\tp.xy *= rot(tt*0.05+1.);\n\tp.yz *= rot(tt*0.05+1.);\n\tp.zx *= rot(tt*0.05+1.);\n\treturn vec3(r-h11(floor(p.x * s))*r, r-h11(floor(p.y * s))*r, r-h11(floor(p.z * s))*r);\n}\n\nvec3 crys(vec3 p, float s) {\t\n\treturn pixels(p, s, 0.5) + 0.4;\n}\n\nfloat sharp(float inp) {\n\t\treturn 1. - pow(1. - pow(inp, 3.), 6.);\n}\n\nvec3 tcrys(vec3 p, float s) {\n\tvec3 cr = crys(p, s);\n\treturn mix(vec3(1,0.6,0.9),vec3(0.5,0.7,1.), mix(1. - step(length(cr), 1.1), step(length(cr), 1.1), sharp(sin(tt*0.5)*0.5+0.5)));\n}\n\n\nvec3 bgp = vec3(1,0.4,0.9);\nvec3 bgb = vec3(0.2,0.5,1.);\n\n\nvec3 col1() {\n\treturn mix(bgp,bgb, sharp(sin(tt*0.5)*0.5+0.5));\n}\n\nvec3 col2() {\n\treturn mix(bgp,vec3(0.5,0.7,1.), sharp(cos(tt*0.5)*0.5+0.5));\n}\n\nvec3 ecrys(vec3 p, float s) {\n\tvec3 cr = crys(p, s);\n\treturn mix(vec3(0),col1(), step(length(cr), 1.1));\n}\n\nfloat shape(vec3 p) {\n\t\n\tfloat s1 = mix(length(p) - 5., length(p - vec3(0,-5,0)), 0.3);\n\tfloat s2 = length(p - vec3(3,3.25,0)) - 4.;\n\tfloat s3 = length(p - vec3(-3,3.25,0)) - 4.;\n\treturn smin(s1, smin(s2,s3,1.),5.);\n}\n\nfloat mp(vec3 p)\n{\t\t\n\t\tvec3 pp = p;\n\t\n\t\tp.xz *= rot(tt * 0.2);\n\t\t//p.yz *= rot(tt * 0.2);\n\t\n \n\t\t//p.z = abs(p.z) - 3.;\n\t\n\t\t//sd = abs(p.z - 20) - 5;\n\t\t//sd = min(sd,abs(p.z - 2) - 5);\n\t\n\t\tfloat centre = shape(p);\n\t\tp.xy *= rot(tt*0.1);\n\t\tp.xz *= rot(tt*-0.05);\n\t\tvec3 crs = crys(p, 1.);\n\t\tvec3 col = tcrys(p, 1.);\n\t\n\t\t//gl += exp(-(length(p) - 1) * 0.8) * col * 0.1;\n\t\n\t  p = pp;\n\t\tp.z+=tt*5.;\n\t\tp.xy *= rot(tt*0.1 * (sin(floor(p.z*.1))*0.5+2.));\n\t\t\n\t\tp.z = mod(p.z, 40.) - 20.;\n\t\t\n\t\tfloat tube = hcy(p, vec3(20,100,1));\n\t\t\n\t\tfloat ring = hcy(p + vec3(0,0,10), vec3(20,1.1,1.1))-0.1;\n\n\t\tgl += exp(-ring*0.05) * col2() * 0.015;\n\t\t\n\t\ttube = min(ring,tube);\n\t\t\n\t\tsd = min(tube, centre);\n\t\n\t\tsd = abs(sd) - 0.001;\n\t\n\t\n\t\tif(sd<0.05)\n\t\t{\t\n\t\t\tno = centre<=sd+0.05?(crs - vec3(0.5)) * 5.: (crys(p, .34) - vec3(0.5));\n\t\t\tio = 1.1 + length(no) * 0.5;\n\t\t\toc=centre<=sd+0.05? col : ecrys(p, 0.34);\n\t\t\toa=centre<=sd+0.05 ? 0.5 : 0.5;\n\t\t\tss=vec3(0,0,0);\n\t\t\tsk = -1;\n\t\t\tsp=0.3;\n\t\t\tif(ring <= sd+0.05) {\n\t\t\t\toa = 1.;\n\t\t\t\toc = col2();\n\t\t\t}\n\t\t}\n\t\treturn sd;\n}\n\nvoid nm()\n{\n\tmat3 k=mat3(cp,cp,cp)-mat3(.001);\n\tcn=on=normalize(mp(cp) - vec3(mp(k[0]),mp(k[1]),mp(k[2])));\n\tcn.xy *= rot(no.x);\n\tcn.yz *= rot(no.y);\n\tcn.zx *= rot(no.z);\n}\n\nvoid shtr(){fi=0;so=cp+on*0.05;md=64.;for(li=cd=0.;cd<64.;li++,cd+=mp(cp=ro+on*0.05-ld*cd)){if(sd<md&&sd<cd)md=sd;if(sd<0.001||li>64.)break;}fi=1;}\nvoid tr(){for(li=cd=0.;cd<128.;){li++;cd+=mp(cp=ro+rd*cd);td+=sd;if(sd<0.0001||li>256.)break;}cp-=rd*0.005;nm();}\n\nvoid px(vec3 rd)\n{\n  vec3 bg=cc.rgb=vec3(0)*0.5-pow(length(uv),1.3)*0.3;\n\tif(cd<128.){cc.a=oa;ld=normalize(cp-vec3(0,0,-100));\n\tfloat df=max(dot(cn,-ld),0.5),sp=max(1.-length(cross(rd+ld,cn)),0.)*sp,\n\tfo = exp(-pow(0.011*td,5.)),ao=1.-clamp(mp(cp+on*.1)/.1,0.,1.);\n\tvec3 fr=pow(1.-abs(dot(rd,-cn)),3.)*mix(cc.rgb,oc,1.);\n  cc.rgb=(oc*df+fr+sp+ss)-ao;\n\t//shtr();float sh=(1.-clamp(md/0.05,0.,1.));cc.rgb-=sh;\n\tcc.rgb+=gl;\n\tcc.rgb = mix(bg, cc.rgb, fo);}\n\telse cc.a=1.;\n\tcc.rgb*=max(max(cc.r,max(cc.g,cc.b)),1.);\n}\n\nvoid render(vec2 frag, vec2 res, float time, out vec4 col)\n{\n  uv=vec2(frag.x/res.x,frag.y/res.y);\n  uv-=0.5;uv/=vec2(res.y/res.x,1);\n\t\n\ttt=mod(time, 100.);\n\t\n  ro=vec3(0,4,-20);\n\tvec2 squv = uv * rot(sin(tt)*0.1);\n  rd = normalize(vec3(uv * (1.1-pow(abs(squv.x) + abs(squv.y),10.)), 1));\n\t\n\tvec3 sl = (crys(rd+vec3(0,0,tt*0.01), 6.) - vec3(0.5)) * 0.15 * length(uv);\n\t\n\trd.xy *= rot(sl.x);\n\trd.yz *= rot(sl.y);\n\trd.zx *= rot(sl.z);\n\t\n\tfor(int i=0;i<10;i++)\n  {\n\t\ttr();ro=cp-cn*(io<0.?-0.01:0.01);\n\t\tcr=refract(rd,cn,i%2==0?1./io:io);\n    if(io<0.)cr=reflect(rd,cn);px(rd);\n\t\tif(length(cr)!=0.)rd=cr;\n\t\tif(sc<1) fc=fc+vec4(cc.rgb*cc.a,cc.a)*(1.-fc.a);\n\t\tif(fc.a>=1.)break;sc=sc==0?sk:sc-1;\n  }\n  col=fc/fc.a;\n\t\n\tcol *= 1.-pow(length(uv), 4.);\n\tcol = pow(col,vec4(0.9));\n\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(mod(float(iFrame), 60./FPS) < 1. || iFrame < 5) render(fragCoord.xy,iResolution.xy,iTime,fragColor);\n    else fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"//fps control for performance. Assumes the refresh rate of your monitor is 60hz\n//(120hz monitor set to 30 here will actually run at 60fps)\n#define FPS 60.","name":"Common","description":"","type":"common"}]}