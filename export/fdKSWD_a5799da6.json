{"ver":"0.1","info":{"id":"fdKSWD","date":"1635375210","viewed":185,"name":"shaderClass2","username":"andreiJay","description":"for my intro to shaders class","likes":1,"published":1,"flags":34,"usePreview":0,"tags":["educational","feedback"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n   \n    vec3 color=texture(iChannel1,uv).xyz;\n    \n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    /*\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 feedbackCoords=uv;\n    //vec3 feedbackColor\n    fragColor = vec4(1.0,0.0,1.0,1.0);\n    \n    */\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 color = 0.5 + 0.5*cos(iTime*.1+uv.xyx);\n\n    //play with coordinates to do geometries\n    vec2 webCamCoords=uv;\n    //webCamCoords+=sin(iTime)*.1;\n    vec3 webCamColor = texture(iChannel0,webCamCoords).xyz;\n    \n    //mess around with colors \n    \n    //color=webCamColor-color;\n    //color=abs(webCamColor-color);\n    //color=fract(webCamColor-color);\n    //color=fract(abs(webCamColor-color));\n    color=webCamColor;\n    \n    //key in feedback\n    //just a halfway screen wipe thing\n    /*\n    if(uv.y>.5){\n        color=texture(iChannel1,uv).xyz;\n    }\n    */\n    \n    float jankyBright=.5*color.g+.14*color.b+.26*color.r;\n    \n    if(jankyBright<.5){\n        color=texture(iChannel1,uv).xyz;\n    }\n    \n    // Output to screen\n    fragColor = vec4(color,1.0);\n    \n    \n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"    //ichannel0 is bufferA here\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0, \n                     0.0, \n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix( vec3(1.0), rgb, c.y);\n}    \n\nvec3 rgb2hsb( in vec3 c ){\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz),\n                 vec4(c.gb, K.xy),\n                 step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r),\n                 vec4(c.r, p.yzx),\n                 step(p.x, c.r));\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)),\n                d / (q.x + e),\n                q.x);\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 feedbackCoords=uv;\n    float myNoise=fract(100.0*cos(iTime*.02+uv.x/uv.y));\n    //feedbackCoords.xy-=.1;\n   // feedbackCoords.x-=0.001*abs(cos(iTime*.7+uv.y+myNoise));\n    //feedbackCoords.y-=0.001*abs(cos(iTime*.7+uv.x));\n    \n    //normalize coords\n    feedbackCoords.xy-=.5;\n    float zoomFactor=-.01;\n    feedbackCoords.xy=(1.0+zoomFactor)*feedbackCoords.xy;\n    \n    //denormalize coords\n    feedbackCoords.xy+=.5;\n    vec3 color=texture(iChannel0,feedbackCoords).xyz;\n    \n    //color=1.0-color;\n    \n    vec3 colorHSB=rgb2hsb(color);\n    //HUE\n    colorHSB.x-=.05;\n    colorHSB.x=fract(colorHSB.x);\n    //brightness\n    colorHSB.z+=.01;\n    //saturation\n    colorHSB.y+=.1;\n    color=hsb2rgb(colorHSB);\n    \n    //color.g+=.01;\n    //color.g=fract(color.g);\n    fragColor = vec4(color,1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}