{"ver":"0.1","info":{"id":"dl3GDj","date":"1683132770","viewed":103,"name":"Flow around a cylinder","username":"wxy_equation","description":"Potential flow around a cylindrical boundary, with user controlled circulation.","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["bl"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    //Centralized-Normalized pixel coordinates\n    vec2 xy = fragCoord-iResolution.xy/2.;\n    vec2 uv = 2.*xy/iResolution.y;\n    uv *= 5.;\n    \n    //non-rotational flow around a cylinder\n    vec2 flow = uv + vec2(1., -1.)*uv.xy/dot(uv, uv);\n    \n    //pure circulation\n    vec2 circ = vec2(-atan(uv.y, uv.x), .5*log(dot(uv,uv)));\n    circ.x -= 2.*PI*step(PI/2., circ.x);\n    \n    //dial the circulation\n    float dial = 2.5*iMouse.y/iResolution.y-0.1;\n    dial = max(0., dial);\n    circ *= dial;\n    \n    //isolines and branch cut\n    vec2 v = flow+circ+vec2(-iTime, 0.);\n    v = abs(fract(v+.5)-.5)/fwidth(v);\n    \n    fragColor = abs(xy.x)<=1. && uv.y<-1.?\n                vec4(1.,0.,0.,0.) :\n                vec4( smoothstep(1.5, 0., min(v.x,v.y)) );\n                \n    //the cylinder\n    fragColor -= vec4(1.-smoothstep(0.96, 1., length(uv)));\n    fragColor = clamp(fragColor, 0., 1.);\n    \n    //the dial\n    vec2 centre = 0.065*vec2(sin(dial), -cos(dial))*iResolution.y;\n    fragColor += vec4( smoothstep(1.5, 0., abs(iResolution.y/45.-length(xy-centre))) ); \n}","name":"Image","description":"","type":"image"}]}