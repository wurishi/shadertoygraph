{"ver":"0.1","info":{"id":"wtsczs","date":"1592862204","viewed":572,"name":"Noisy simple water surface","username":"miko3k","description":"based on https://www.shadertoy.com/view/wdG3Rz\n\nshould be tileable, provided the that the texture is tileable\n\nuses procedural noise instead of textures","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["water","surface"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SCALE_WATER 16.0\n#define SCALE_HIGHLIGHTS 4.0\n\nfloat avg(vec4 color) {\n    return (color.r + color.g + color.b)/3.0;\n}\n\nvec2 rep(vec2 v) {\n    return abs(fract(v)-0.5);\n}\n\nvec4 waterTexture(vec2 uv) {\n    float noise = snoise(rep(uv)*SCALE_WATER);\n    noise = noise * 0.15 + 0.10;\n    \n    return vec4(vec3(noise), 1.);\n}\n\n\nvec4 highlightsTexture(vec2 uv) {\n    float noise = snoise(rep(uv)*SCALE_HIGHLIGHTS);\n    noise = noise * 0.40 + 0.08;\n    \n    return vec4(vec3(noise), 1.);\n}\n\nvec4 getFlatColor(vec2 uv, float time, sampler2D map) {\n    // Flow Speed, increase to make the water flow faster.\n    float speed = 1.0;\n    \n    // Water opacity, higher opacity means the water reflects more light.\n    float opacity = 0.5;\n \n    \n    // Normalized pixel coordinates (from 0 to 1)\n\n    //fragColor = highlightsTexture(uv);\n//       return;\n    \n    \n    // Water layers, layered on top of eachother to produce the reflective effect\n    // Add 0.1 to both uv vectors to avoid the layers stacking perfectly and creating a huge unnatural highlight\n    vec4 water1 = waterTexture(uv + time*0.02*speed - 0.1);\n    vec4 water2 = waterTexture(uv.xy + time*speed*vec2(-0.02, -0.02) + 0.1);\n    \n    // Water highlights\n    vec4 highlights1 = highlightsTexture(uv.xy + time*speed / vec2(-10, 100));\n    vec4 highlights2 = highlightsTexture(uv.xy + time*speed / vec2(10, 100));\n    \n    // Background image\n    vec4 background = texture(map, uv + avg(water1) * 0.05);\n    \n    // Average the colors of the water layers (convert from 1 channel to 4 channel\n    water1.rgb = vec3(avg(water1));\n    water2.rgb = vec3(avg(water2));\n    \n    // Average and smooth the colors of the highlight layers\n    highlights1.rgb = vec3(avg(highlights1)/1.5);\n    highlights2.rgb = vec3(avg(highlights2)/1.5);\n    \n    float alpha = opacity;\n    \n    if(avg(water1 + water2) > 0.3) {\n        alpha = 0.0;\n    }\n    \n    if(avg(water1 + water2 + highlights1 + highlights2) > 0.75) {\n        alpha = 5.0 * opacity;\n    }\n\n    // Output to screen\n    return (water1 + water2) * alpha + background;\n    \n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{ \n    vec2 uv = (fragCoord/iResolution.xy);\n\tfragColor = getFlatColor(uv, iTime, iChannel0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Simplex 2D noise\nvec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\n\nfloat snoise(vec2 v){\n    const vec4 C = vec4(0.211324865405187, 0.366025403784439,\n           -0.577350269189626, 0.024390243902439);\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n    vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    i = mod(i, 289.0);\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 ));\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n      dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n","name":"Common","description":"","type":"common"}]}