{"ver":"0.1","info":{"id":"7tS3Dm","date":"1624017120","viewed":158,"name":"A bit better grapher","username":"Maximxls","description":"from no optimizations to recalculation of some values for every pixel\nnow with threshold based of function\n","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["math"],"hasliked":0,"parentid":"sljGW1","parentname":"slowest grapher of all time"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define xFrom -8.\n#define xTo    8.\n#define yFrom -4.5\n#define yTo    4.5\n\n#define axesThickness 0.03\n\n#define RADIUS 2.\n\nfloat leftSide(float x, float y)\n{\n    return y;\n}\n\nfloat rightSide(float x, float y)\n{\n    return x * sin(x);\n}\n\n// or threshold\nfloat threshold(float x, float y)\n{\n    float z = 2.*atan(abs(sin(x)+x*cos(x)));\n    return 2.+.02*y*y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Size of the screen in coordinate system units\n    vec2 span = vec2(xTo - xFrom, yTo - yFrom);\n    \n    // Pixel in coordinate system\n    vec2 point = vec2(xFrom + uv.x * span.x, yFrom + uv.y * span.y);\n    \n    // Treshold\n    float treshold = abs(threshold(point.x, point.y)) / max(span.x, span.y);\n    \n    // If point is a solution\n    bool sol = abs(leftSide(point.x, point.y) - rightSide(point.x, point.y)) < treshold;\n    \n    // If point is on axes\n    bool axes = abs(point.x) < axesThickness || abs(point.y) < axesThickness;\n    \n    float col = 1.;\n    \n    if (sol || axes) {\n        col = 0.;\n    }\n\n    // Output to screen\n    fragColor = vec4(vec3(col),1.0);\n}","name":"Image","description":"","type":"image"}]}