{"ver":"0.1","info":{"id":"tty3zc","date":"1579484991","viewed":293,"name":"triForce","username":"Saturos","description":"Heavily inspired by https://www.shadertoy.com/view/tsdGRM\nMini-game: try to get all particles to orbit the blue attractor using the mouse as a repeller","likes":15,"published":1,"flags":32,"usePreview":0,"tags":["simulation","attractor","dynamics","physics","particle","force"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 O, in vec2 U)\n{\n    O = T(U);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define T(texCoord) texelFetch(iChannel0, ivec2(texCoord), 0)\n\n\nfloat sdf_line(vec2 p, vec2 A, vec2 B) {\n    vec2 C = B-A;\n    float h = clamp(dot(p-A,C)/dot(C,C), 0., 1.);\n    return length(p-A-h*C);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int N_ATTRACTORS = 4,  N_PARTICLES = 75;\nconst float fadeRate = 1.-8e-2,  minDistCb = 6e-3, speedSqLim = 100.,\n    \t\txOff = 4./(5.*sqrt(3.)),  yOff = 2./5.;\n\nvec2[N_ATTRACTORS] attractors = vec2[](\n    \tvec2(-xOff,-yOff), vec2(xOff,-yOff), vec2(0.,yOff), vec2(0.,0.));\n\nfloat[N_ATTRACTORS] attrMasses = float[](10.,10.,10.,0.);\n\nfloat dt = 2e-3;\n\n\n// initial conditions\nvec2 p0(float y0) { return vec2(.75*y0,0.); }\nvec2 v0(float y0) { return vec2(0.); }\n\nvec2 F(vec2 pos) {\n    vec2 F = vec2(0.);\n    for (int i=0; i<N_ATTRACTORS; ++i) {\n        vec2 r_i = attractors[i] - pos;\n        float Lr_i = length(r_i);\n        float d_i = Lr_i * Lr_i * Lr_i;\n        d_i = max(d_i, minDistCb);\n        F += r_i * attrMasses[i] / d_i; // (* pointMass * G)\n    }\n    return F;\n}\n\nvec4 update(vec4 O) {\n    O.zw += F(O.xy)*dt; // (/ pointMass)\n    float speedSq = dot(O.zw,O.zw);\n    if (speedSq > speedSqLim) O.zw *= speedSqLim/speedSq;\n    O.xy += O.zw*dt;\n    return O;\n}\n\nvoid mainImage(out vec4 O, in vec2 U)\n{\n    O = T(U);\n    vec2 R = iResolution.xy;\n    vec2 u = (2.*U - R) / R.y;\n    vec2 m = (2.*iMouse.xy - R) / R.y;\n    \n    attractors[3] = m;\n    if (iMouse.w > 0.) attrMasses[3] = -20.;\n    \n    if (iFrame == 0) {\n        O -= O;\n        if (U.x < 2.) O = vec4(p0(u.y), v0(u.y));\n    }\n    \n    if (U.x == .5) {\n        O = update(O);\n        \n        if (O.x > R.x/R.y || O.x < -R.x/R.y) {\n            O.x *= -1.;\n            O.zw *= .5;\n        }\n        if (O.y > 1. || O.y < -1.) {\n            O.y *= -1.;\n            O.zw *= .5;\n        }\n        \n    } else if (U.x == 1.5) {\n        O = T(vec2(.5, U.y));\n    } else {\n        O *= fadeRate;\n        float d = 10.;\n        float step = R.y / float(N_PARTICLES);\n        for (float i=0.; i<R.y; i+=step) {\n            vec2 A = T(vec2(1.5,i)).xy,  B = T(vec2(.5,i)).xy;\n            \n            float d_i = sdf_line(u,A,B);\n            if (d_i < d && dot(B-A,B-A) < .05) d = d_i;\n        }\n        float st = 1.2;\n        O += smoothstep(15e-3,.0,d)\n            \t\t* vec4(smoothstep(st,0.,length(u-attractors[0])),\n            \t\t\t   smoothstep(st,0.,length(u-attractors[1])),\n            \t\t\t   smoothstep(st,0.,length(u-attractors[2])), 0.);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}