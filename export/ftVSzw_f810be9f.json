{"ver":"0.1","info":{"id":"ftVSzw","date":"1640367872","viewed":99,"name":"Oniony Shapes","username":"panna_pudi","description":"That's all I can do in 25 minutes v-v","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","onion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = acos(-1.);\nconst float TAU = 2. * PI;\n\n// https://www.shadertoy.com/view/tsBGDD\n#define AAstep(thre, val) \\\n    smoothstep(-.7, .7, (val - thre) / min(0.07, fwidth(val - thre)))\n#define S(v) smoothstep(0., 30. / iResolution.x, v)\n#define smod(x, k) S(k / 4. - abs(mod(x - k / 4., k) - k / 2.))\n\nmat2 rot(float a) {\n    float c = cos(a), s = sin(a);\n    return mat2(c, -s, s, c);\n}\n\n// https://iquilezles.org/articles/distfunctions2d\nconst float SQRT3 = sqrt(3.);\nfloat hexagon(in vec2 p) {\n    float r = 0.5;\n    const vec3 k = vec3(-SQRT3 / 2., 0.5, 1. / SQRT3);\n    p = abs(p);\n    p -= 2.0 * min(dot(k.xy, p), 0.0) * k.xy;\n    p -= vec2(clamp(p.x, -k.z * r, k.z * r), r);\n    return length(p) * sign(p.y);\n}\n\nfloat triangle(in vec2 p) {\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - 0.5;\n    p.y = p.y + .5 / k;\n    if (p.x + k * p.y > 0.0)\n        p = vec2(p.x - k * p.y, -k * p.x - p.y) / 2.0;\n    p.x -= clamp(p.x, -2.0, 0.0);\n    return -length(p) * sign(p.y);\n}\n\nfloat circle (vec2 p) {\n    return length(p) - 0.5;\n}\n\nfloat shape(in vec2 p, float rng) {\n    float d = 1e5;\n    if (rng <= 0.2) {\n        d = circle(p);\n    } else if (rng <= 0.66) {\n        d = triangle(p);\n    } else {\n        d = hexagon(p);\n    }\n    return d;\n}\n\nfloat hash21(vec2 coord){\n    return fract(sin(dot(coord.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat draw(vec2 uv) {\n    float time = iTime;\n    vec2 id = floor(uv / 2.);\n    uv = mod(uv, 2.) - 1.0;\n\n    float rng = hash21(id);\n    uv += (vec2(hash21(id), hash21(id.yx)) * 2.0 - 1.0) * 0.2;\n\n    uv *= rot(rng * TAU);\n\n    float scale = 1. + 0.5 * abs(sin(time * rng));\n    float d = shape(uv / scale, hash21(id)) * scale;\n\n    float b = AAstep(0., d < 0. ? abs(smod(d + 0.04, 0.13)) - 0.02 : d);\n\n    return 1. - b;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord/iResolution.xy * 2. - 1.)\n            * vec2(iResolution.x / iResolution.y, 1.);\n    float scale = 5.7;\n    uv *= scale;\n\n    vec3 col = vec3(0.);\n    const int N = 1;\n    for (int i = -N; i <= N; i++) {\n        for (int j = -N; j <= N; j++) {\n            col += draw(uv - vec2(i, j) / (iResolution.xy / scale));\n        }\n    }\n    float k = 2. * float(N) + 1.;\n    col /= k * k;\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}