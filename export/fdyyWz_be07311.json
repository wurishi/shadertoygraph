{"ver":"0.1","info":{"id":"fdyyWz","date":"1654661644","viewed":93,"name":"sines experiment2","username":"0xBAMA","description":"overlapping sines, inspired by https://twitter.com/GunTurtle/status/1363955617224867841","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["effects","trig","sines"],"hasliked":0,"parentid":"wtyBzm","parentname":"sines experiment"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float phase_offset = 1.618;\nfloat amplitude_scale = 0.3;\nfloat signal_offset = 0.6;\nint accum = 0;\nint numWaves = 24;\n\nuint seed = 0u; // deterministic hash-based rng\nfloat wangHashFloat() {\n\tseed = uint( seed ^ uint( 61 ) ) ^ uint( seed >> uint( 16 ) );\n\tseed *= uint( 9 );\n\tseed = seed ^ ( seed >> 4 );\n\tseed *= uint( 0x27d4eb2d );\n\tseed = seed ^ ( seed >> 15 );\n\treturn float( seed ) / 4294967296.0;\n}\n\nfloat f( float x ) {\n return amplitude_scale * sin( x + iTime + phase_offset ) + signal_offset;\n}\n\nfloat f2( float x ) {\n return amplitude_scale * 0.618 * sin( x + iTime + phase_offset * 1.618 ) + signal_offset + 0.75;\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ) {\n    return a + b * cos( 6.28318 * ( c * t + d ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= vec2( 0.5 );\n    uv *= 5.; // -1 to 1, then scaled from there\n\n    vec3 col = 0.5 + 0.5 * cos( iTime * 4. + uv.xyx * 1.6 + vec3( 0, 2, 4 ) );\n    col = vec3( 0.2 * dot( col, col ) ); \n    float result;  // just going by accumulator now\n    \n    for( int c = 0; c < numWaves; c++ ) {\n        amplitude_scale = 0.1 * sin( wangHashFloat() + iTime ) + 0.6;\n        signal_offset = cos( wangHashFloat() + 0.08 * iTime ) * 0.2;\n        phase_offset = sin( wangHashFloat() + iTime ) + 0.02 * iTime + wangHashFloat();\n        \n        if( ( result = smoothstep( 0.0, 0.35 + 0.1 * sin( wangHashFloat() ), abs( uv.x - f( uv.y ) ) ) ) < 0.01 ) {\n            accum++; // proximimity to n sine waves - used for palette reference\n        }\n    }\n\n    col.g += float( accum ) / 9.0;\n    col += pal( float( accum ) / float( numWaves ) + 3.3, vec3( 0.5, 0.5, 0.5 ), vec3( 0.5, 0.5, 0.5 ), vec3( 1.0, 1.0, 1.5 ), vec3( 0.0, 0.1, 0.2 ) );\n    col.r -= float( accum ) / 3.0;\n      \n    // Output to screen\n    fragColor = vec4( vec2( 1.75 ) - col.xy, col.z, 1.0 ) * 0.1 * ( uv.x + 5.0 );\n    fragColor.r *= 1.75;\n    fragColor = vec4( 1.0 ) - fragColor.grrb;\n}","name":"Image","description":"","type":"image"}]}