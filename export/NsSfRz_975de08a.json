{"ver":"0.1","info":{"id":"NsSfRz","date":"1645604970","viewed":106,"name":"Stereographic Flowers?","username":"Loki314","description":"Best in full screen.\nLooked a little bit like flowers to me.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["stereographic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define square_size 0.5f\n#define cx square_size\n#define cy square_size\n\n#define speed 1.0f\n#define s 1.0f\n#define rotcolor(a) vec3(sin(a),sin(a+3.14/4.0),sin(a-3.14/2.0))\n\n\n\n// Draws a checkerboard pattern.\nvec3 checker(vec2 p){\n    /// Here for debuging purposes. Draws a \"straight\" lines along the surface.\n    //if (0.5<p.y && p.y<0.6) {return vec3(1,0,0);}\n    //if (0.5<p.x && p.x<0.6) {return vec3(0,1,0);}\n    /// Also for debuging. Draws a single square.\n    //if (p.x<1.0 && 0.5<p.x && p.y<1.0 && 0.5<p.y) {return vec3(0,0,1);} \n    \n    \n    if (mod(floor(p.x/cx)+mod(p.y/cy,2.0),2.0)<1.0) {return vec3(rotcolor(mod(p.x,3.0)));}\n    else {return vec3(0.3,0.36,0.57)*vec3(rotcolor(mod(2.0*p.y,3.0)));}\n}\n\n\n\nvec3 sphere(vec2 uv){\n    vec3 sphereCoord = vec3(sin(uv.y)*cos(uv.x),sin(uv.y)*sin(uv.x),cos(uv.y));\n    return sphereCoord;\n}\n\n\nvec3 rotate(vec3 p, float angle){\n    float a = p.x;\n    float b = p.y*cos(angle)-p.z*sin(angle);\n    float c = p.y*sin(angle)+p.z*cos(angle);\n    return vec3(a,b,c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.y)+vec2(-0.5);\n    \n    //float angle = sin(iTime*0.01);\n    //uv = uv+sin(iTime*(0.0,0.1));//mat2(cos(angle),-sin(angle),sin(angle),cos(angle))*uv;\n    uv.x *= 3.0*3.14;\n    uv.y *= 3.0*3.14;\n    vec3 sphereCoord = sphere(uv);\n    \n\n    sphereCoord = rotate(sphereCoord,(3.14/2.0)).xyz;\n    //Uncomment the line below for a 'slightly' more interesting effect.\n    //sphereCoord = rotate(sphereCoord,(3.14/2.0)-0.5*uv.x).xyz;\n    sphereCoord = rotate(sphereCoord.zxy,(speed*iTime)).yzx;\n    \n    \n    float osc = 0.0;//(1.0-sin(speed*iTime)*sin(speed*iTime));\n    //vec2 new = osc*uv+(1.0-osc)+vec2(sphereCoord.x/(s-sphereCoord.z),sphereCoord.y/(s-sphereCoord.z));\n    \n    // Convert the 3d coordinates to 2d x & y.\n    vec2 new_coord = vec2(sphereCoord.x/(s-sphereCoord.z),sphereCoord.y/(s-sphereCoord.z));\n    //vec3 col = rotcolor(new_coord.x)*rotcolor(new_coord.x)*checker(new_coord.xy);\n    vec3 col = checker(new_coord);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}