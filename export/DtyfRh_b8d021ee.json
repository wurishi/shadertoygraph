{"ver":"0.1","info":{"id":"DtyfRh","date":"1701803271","viewed":69,"name":"Sample Brownian Motion","username":"iuhf","description":"Fractional Brownian Motion Function\nstandalone, returns vec3\nX, Y: 2D normal calculated with -cosine\nZ: noise return value","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["fbm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 fbm(in vec2 po, in float oct, in float f, in float a, in float p) {\n    float v = 0.;\n    vec2 n = po;\n    \n    for (float o = 0.; o < oct; o++) {\n        float r1 = fract(sin(o * 12.9898) * 43758.5453);\n        float r2 = fract(sin(o * 12.9898) * 43758.5453);\n        float r3 = fract(sin(o * 12.9898) * 43758.5453);\n        float r4 = fract(sin(o * 12.9898) * 43758.5453);\n        v += sin((po.x*f*(r1+39.) + cos(o * 3984.43)+r3)*sin(r2*2.+482.)*(o*r1/3.) + (po.y*2.*f*(r4*134.31) + (r1*452.+24.) + sin(o + 433.3))*cos(r2*555.5)*(o/20.*r4) + p*sin(o*r2*433.343 + r4*34859.));\n        n += vec2(-cos((po.x*f*(r1+39.) + cos(o * 3984.43)+r3)*sin(r2*2.+482.)*(o*r1/3.) + (po.y*2.*f*(r4*134.31) + (r1*452.+24.) + sin(o + 433.3))*cos(r2*555.5)*(o/20.*r4) + p*sin(o*r2*433.343 + r4*34859.)));\n    }\n    \n    return vec3(normalize(n), (v/oct)*a);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv *= 2.;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    \n    fragColor = vec4(vec3(dot(fbm(uv, 10., .3, 1., iTime).xy, vec2(cos(iTime*0.5), sin(iTime*0.5)))), 1.);\n    \n    \n}","name":"Image","description":"","type":"image"}]}