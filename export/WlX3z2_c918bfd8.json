{"ver":"0.1","info":{"id":"WlX3z2","date":"1556876495","viewed":174,"name":"NR fractal transitions","username":"tpfto","description":"Generate the Newton-Raphson fractal for a general cubic polynomial, using Horner's method.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal","math","complex"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2019 J. M.\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Newton-Raphson fractal implementation, using Horner's method\n\n#define PI 3.14159265359\n#define SCALE 7.5 // plot scale\n\n// from Fabrice Neyret, \n#define cmul(A, B) ( mat2( A, -(A).y, (A).x ) * (B) )\n#define cinv(Z) ( vec2( (Z).x, -(Z).y ) / dot(Z, Z) ) \n#define cdiv(A, B) cmul( A, cinv(B) )\n\n// modified DLMF coloring, adapted from https://www.shadertoy.com/view/WtXGWN\nvec3 smooth_dlmf( float h )\n{\n    vec3 rgb = clamp( vec3(1., -1., -1.) * abs((vec3(8., 4., 8.) * mod(h, 1.0) - vec3(4.5, 1.5, 5.5))) + vec3(-1.5, 1.5, 2.5), 0.0, 1.0 );\n\treturn rgb * rgb * rgb/(1.0 - 3.0 * rgb * (1.0 - rgb));\n}\n\n// order and coefficients of base polynomial, constant term first\n#define ORDER 3\nconst float[] P = float[](0.0, -2.0, 0.2, 1.0);\n\n// use Horner's method to evaluate the Newton-Raphson update\nvec2 Horner( in vec2 z )\n{\n    vec2 w = vec2(P[ORDER], 0.0);\n    vec2 d = vec2(0.0, 0.0);\n    \n    for(int k = ORDER - 1; k >= 0; k--)\n    {\n        d = cmul(d, z) + w;        \n        w = cmul(w, z) + vec2(P[k], 0.0);\n    }\n    \n    w += vec2(7.5, 2.0) * cos(0.2 * iTime); // jiggle the constant term a bit for animation\n        \n    return cdiv(w, d);\n}\n\nvec3 NewtonFractal( vec2 z) {\n    \n    vec2 ld = vec2(0.0);\n    float k = 0.0;\n    \n    for(int i = 0; i < 20; i++) {\n        ld = Horner(z);\n        if (dot(ld, ld) < 0.001) break;\n        z = z - ld;\n        k += 1.0;\n    }\n    \n    // multiplier highlights the positions of the roots\n    return pow((k + 0.1)/20.0, 0.18) * smooth_dlmf(0.5 * atan(z.y, z.x)/PI);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 aspect = iResolution.xy / iResolution.y;\n    vec2 z = ( fragCoord.xy / iResolution.y ) - 0.5 * aspect;\n    z *= SCALE;\n    \n    vec3 c = NewtonFractal(z);\n\n    fragColor = vec4(c, 1.0);\n}","name":"Image","description":"","type":"image"}]}