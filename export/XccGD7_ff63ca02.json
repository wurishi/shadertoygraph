{"ver":"0.1","info":{"id":"XccGD7","date":"1711744767","viewed":30,"name":"TP3 P2107434","username":"lekkimyen","description":"aa","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["ombre"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modeling \n#define PI 3.14159265359\n\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\nstruct Ray {\nvec3 ro; // Ray origin\nvec3 rd; // Direction\n};\n\n// Compute a point on the ray\n// ray : Ray\n// t   : depth\nvec3 Point(Ray ray,float t)\n{\n  return ray.ro+t*ray.rd;\n}\n\n// Compute the ray\n//     m : Mouse position\n//     p : Pixel\nRay CreateRay(vec2 m,vec2 p)\n{\n  float a=3.*3.14*m.x; \n  float le=3.5;\n  \n  // Origin\n  vec3 ro=vec3(35.,0.,10.)*Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(0.,0.,3.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  vec3 rd=normalize(p.x*u+p.y*v+le*w);\n  return Ray(ro,rd);\n}\n\n// Primitives\n\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\nfloat Sphere(vec3 p,vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n// Plane\n// p : point\n// c : center of skeleton\n// n : Normal\nfloat Plane(vec3 p,vec3 c,vec3 n)\n{\n  return dot(p-c,n);\n}\n\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n  return min(a,b);\n}\n\n// Union, extension to four sub-trees\n// a,b,c : field function of left and right sub-trees\nfloat Union(float a,float b,float c,float d)\n{\n  return min(min(a,b),min(c,d));\n}\n\n// Difference\n// a,b : field function of left and right sub-trees\nfloat Difference(float a,float b)\n{\n  return max(a,-b);\n}\n\n// Potential field of the object\n// p : point\nfloat object(vec3 p)\n{\n\n  float v=  Sphere(p,vec3(3.,0.,6.),4.);\n\n  v=Union(v,\n    Sphere(p,vec3(0.,2.,3.),3.));\n  \n  float d=Union(\n      Sphere(p,vec3(5.,1.,5.),3.),\n    Sphere(p,vec3(-1.,1.,6.),3.),\n    Sphere(p,vec3(-1.,2.,2.),2.),\n    Sphere(p,vec3(1.,1.,6.),2.));\n  v=Difference(v,d);\n  \n  v=Union(v,\n    Plane(p,vec3(0.,0.,-1.),vec3(0.,0.0,1.0))\n  );\n  \n  return v;\n}\n\n// Analysis of the scalar field\n\nconst int Steps=200;// Number of steps\nconst float Epsilon=.01;// Marching epsilon\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  float v=object(p);\n  n.x=object(vec3(p.x+eps,p.y,p.z))-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z))-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps))-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// ray : Ray \n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(Ray ray,float e,out bool h,out int s)\n{\n  h=false;\n  \n  // Start at the origin\n  float t=0.;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=Point(ray,t);\n    float v=object(p);\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return t;\n}\n// Ombres\n//****************************************************************\n//Fonction Shadow\n//p: point sur la surface\n//posLu: postion de la soure lumineuse\nfloat Shadow(vec3 p, vec3 posLu)\n{\n    vec3 direcLumi= normalize(posLu-p); \n    // éviter l'auto-ombrage\n    vec3 orRayon= p + ObjectNormal(p) *0.01;\n    Ray rayon= Ray(orRayon, direcLumi);\n    \n    bool toucheObjet; \n    int nbEtapes;\n    //Suivre le rayon \n    float disObjet= SphereTrace(rayon, length(posLu -p), toucheObjet, nbEtapes);\n    \n    if (toucheObjet && disObjet < length(posLu -p))\n    {\n    return 0.0;\n    } else { return 1.0;}\n\n}\n// Fonction pour générer le i-ème point d'une série \n//de n points sur une sphère en utilisant la méthode de Fibonacci\n// i: L'index du point à générer dans la séquence de Fibonacci\n// n: Le nombre total de points\nvec3 fibonacci(int i, int n)\n{\n    float phi= PI *(3.0 - sqrt (5.0));\n    float y= 1.0 - (float(i) / float (n-1)) *2.0;\n    float ra= sqrt(1.0 - y*y); //rayon\n    float theta= float(i) *phi;\n    //calcule x,z \n    float x= cos(theta) * ra; \n    float z = sin(theta) *ra;\n    \n    return vec3(x,y,z);\n}\n\n\n// Fonction pour générer une direction unitaire sur la surface d'un \n//hémisphère à partir de la fonction Fibonacci\nvec3 Hemisphere(int i, int n) {\n    vec3 direction = fibonacci(i, n);\n    return normalize(direction);\n}\n\n// Fonction pour calculer une approximation de l'ombre douce en utilisant\n//des points de lumière distribués sur une sphère\n// pos: Position du point sur lequel l'ombre est projetée\n// posLu: Position de la source lumineuse\n// nbPo: Nombre de points à utiliser pour approximer l'ombre\nfloat SoftShadow(vec3 pos, vec3 posLu, int nbPo)\n{\n    float shadowIntensity = 0.0; // Intensité initiale de l'ombre\n    float totalDis = length(posLu - pos); // Distance totale entre la position et la source lumineuse\n\n    for (int i = 0; i < nbPo; i++)\n    {\n        // Génération d'une direction de lumière basée sur la séquence de Fibonacci pour une répartition uniforme\n        vec3 direcLu = normalize(fibonacci(i, nbPo));\n        // Calculer la nouvelle position de la source lumineuse en prenant en compte la direction générée\n        vec3 newPosLu = posLu + direcLu *1.5 ; \n\n        // Calculer l'intensité de l'ombre. Ajustement pour une meilleure dispersion et réduction naturelle de la lumière\n       // Cela détermine à quelle vitesse l'intensité de la lumière diminue avec la distance\n       float lightDecay = 0.01; \n       float distFactor = exp(-lightDecay / totalDis); // Utilisation d'une fonction exponentielle pour un déclin naturel\n        shadowIntensity += Shadow(pos, newPosLu) * distFactor;\n    }\n\n    // Moyenner l'intensité de l'ombre sur le nombre total de points pour adoucir l'effet\n    return shadowIntensity / float(nbPo);\n}\n\n// Fonction d'approximation de l'occlusion ambiante en utilisant la \n//méthode de ray tracing basée sur des échantillons\n// pos : position du point à évaluer\n// normal : la normale à la surface au point donné\n// nSamples : nombre d'échantillons à utiliser\nfloat AmbientOcclusion(vec3 pos, vec3 normal, int nSamples) {\n    float occlusion = 0.0; // Valeur initiale de l'occlusion\n    float attenuation = 0.025; // Facteur d'atténuation initial\n\n    for (int i = 0; i < nSamples; ++i) {\n        // Obtenir une direction aléatoire à partir de la fonction Hemisphere\n        vec3 hemisphereDir = Hemisphere(i, nSamples);\n\n        // Longueur de la rayon\n        float rayLength = 0.05; // Longueur de pas de rayon\n        float step = rayLength / float(nSamples); // Pas du rayon\n\n        // Parcourir le rayon dans la direction de la normale et vérifier les intersections avec les objets\n        for (float t = 0.0; t < 1.0; t += step) {\n            // Calculer la position de l'échantillon sur le rayon\n            vec3 samplePos = pos + normal * t * rayLength;\n\n            // Vérifier si le rayon intersecte un objet\n            float sampleDepth = object(samplePos);\n\n            // Si le rayon intersecte un objet, augmenter l'occlusion avec atténuation\n            if (sampleDepth < 0.0) {\n                occlusion += attenuation;\n                break; // Sortir de la boucle car le rayon est bloqué par un objet\n            }\n\n            // Atténuer la contribution en fonction de la distance parcourue\n            attenuation *= 0.1; \n        }\n    }\n    return occlusion;\n}\n\n// Lighting\n\n// Background color\n// d : Ray direction\nvec3 Background(vec3 d)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),d.z*.5+.5);\n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p,vec3 n,vec3 e)\n{\n  // Point light\n  const vec3 lp=vec3(5.,10.,30.);\n  \n  // Light direction to point light\n  vec3 l=normalize(lp-p);\n  \n  // Ambient color\n  vec3 ambient=.25+.25*Background(n);\n  \n  // Shadow computation\n // Décommentant les lignes pour tester différents types d'ombres\n  float shadow= \n AmbientOcclusion(p,n,80);\n  //SoftShadow(p,lp,50);\n  //Shadow(p,lp);\n  \n  // Phong diffuse\n  vec3 diffuse=.35*clamp(dot(n,l),0.,1.)*vec3(1.,1.,1.);\n  \n  // Specular\n  vec3 r=reflect(e,n);\n  vec3 specular=.15*pow(clamp(dot(r,l),0.,1.),35.)*vec3(1.,1.,1.);\n  vec3 c=ambient+shadow*(diffuse+specular);\n  return c;\n}\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)  \n{\n  // Pixel\n  vec2 pixel=(-iResolution.xy+2.*pxy)/iResolution.y;\n\n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n  \n  // Camera\n  Ray ray=CreateRay(m,pixel);\n  \n  \n  // Hit and number of steps\n  bool hit;\n  int s;\n  \n   // Trace ray\n float t=SphereTrace(ray,75.,hit,s);\n  \n  // Shade background\n  vec3 rgb=Background(ray.rd);\n  \n  if(hit)\n  {\n    // Position\n    vec3 p=Point(ray,t);\n    \n    // Compute normal\n    vec3 n=ObjectNormal(p);\n    \n    // Shade object with light\n    rgb=Shade(p,n,ray.rd);\n  }\n    \n  color=vec4(rgb,1.);\n}\n","name":"Image","description":"","type":"image"}]}