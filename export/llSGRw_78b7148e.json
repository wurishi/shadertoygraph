{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Created by S.Guillitte\n\n#define PI 3.14159265358979\n\nint windows = 3;//0=noise,1=abs(noise),2=fbm,3=fbmabs\n\n\nfloat hash( in vec3 p ) \n{\n    return fract(sin(p.x*15.32758341+p.y*39.786792357+p.z*59.4583127+7.5312) * 43758.236237153)-.5;\n}\n\nvec3 hash3( in vec3 p )\n{\n    return vec3(hash(p),hash(p+1.5),hash(p+2.5));\n}\n\n\n\nfloat voronoi(in vec3 p)\n{    \n    vec3 ip = floor(p);\n    vec3 fp = fract(p);\n\tfloat rid = -1.;\n    vec2 r = vec2(2.);\n    for (int i=-1; i<=0; i++) \n\tfor (int j=-1; j<=0; j++) \n\tfor (int k=-1; k<=0; k++) \n\t{\n\t\tvec3 g = vec3(i, j, k);\n        //float h = hash(ip - g);\n        vec3 pp = fp +g +hash3(ip - g)*.6;\n        float d = dot(pp, pp);\n\n        if (d < r.x)\n\t\t{\n            r.y = r.x;\n            r.x = d;\n           // rid = h +.5;\n\t\t}\n        else if(d < r.y)\n\t\t{\n    \t\tr.y = d;\n\t\t}\n\t}    \n    return r.x;\n}\n\nfloat craters(vec3 p){\n    float v = voronoi(p);\n    return sin(sqrt(v)*PI*2.)*exp(-4.*v);\n}\n\nfloat stars(vec3 p){\n    float v = voronoi(p);\n    return pow(exp(.1-5.*v),18.);\n}\n  \n\nfloat fbmabs( vec3 p ) {\n\t\n\tfloat f=1.2;\n   \n\tfloat r = 0.0;\t\n    for(int i = 0;i<5;i++){\t\n\t\tr += abs(craters( p*f ))/f;       \n\t    f *=2.7;\n\t}\n\treturn r/2.;\n}\n\nfloat fbm( vec3 p ) {\n\t\n\tfloat f=1.;\n   \n\tfloat r = 0.0;\t\n    for(int i = 0;i<3;i++){\t\n\t\tr += stars( p*f )/f;       \n\t    f *=2.;\n\t}\n\treturn r/4.;\n}\n\nfloat map(vec3 p){\n\n    \n    return 1.2*fbmabs(p);\n}\n\nvec3 calcNormal(in vec3 p)\n{\n\tconst vec2 e = vec2(0.00001, 0.0);\n\treturn normalize(p*.00004+vec3(\n\t\tmap(p + e.xyy) - map(p - e.xyy),\n\t\tmap(p + e.yxy) - map(p - e.yxy),\n\t\tmap(p + e.yyx) - map(p - e.yyx)));\n}\n\n\nmat2 rot(float a) {\n\treturn mat2(cos(a),sin(a),-sin(a),cos(a));\t\n}\n\nvec2 iSphere( in vec3 ro, in vec3 rd, in vec4 sph )//from iq\n{\n\tvec3 oc = ro - sph.xyz;\n\tfloat b = dot( oc, rd );\n\tfloat c = dot( oc, oc ) - sph.w*sph.w;\n\tfloat h = b*b - c;\n\tif( h<0.0 ) return vec2(-1.0);\n\th = sqrt(h);\n\treturn vec2(-b-h, -b+h );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tfloat time = iTime;\n    vec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x/iResolution.y;\n    vec2 m = vec2(0.);\n\tif( iMouse.z>0.0 )m = iMouse.xy/iResolution.xy*3.14;\n    m-=.5;\n\n    // camera\n\n    vec3 ro = vec3(4.);\n    ro.yz*=rot(m.y);\n    ro.xz*=rot(m.x+ 0.1*time+1.);\n    vec3 ta = vec3( 0.0 , 0.0, 0.0 );\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    vec3 rd = normalize( p.x*uu + p.y*vv + 4.0*ww );\n\tvec3 li = normalize(vec3(0.5, .8, 3.0));\n    \n    vec2 tmm = iSphere( ro, rd, vec4(0.,0.,0.,1.5) );\n\n\tfloat c;\n    \n   \tif (tmm.x<0.)c =  fbm(30.*rd)+fbm(40.*rd)+.2*exp(-64.*(.9-dot(li,rd)));\n    else c= map(ro+rd*tmm.x)/2.;\n    vec3 col = vec3( c*c*1.3,c*c,c*.5);\n    if (tmm.x>0.){\n        \n        float k = dot(ro+rd*tmm.x, li);\n        col*=.4;\n        if(k>0.){\n            \n    \t\tvec3 nor = calcNormal(ro+rd*tmm.x);\n            col += pow(max(dot(li, nor)*1.2, 0.05), .75)*k*vec3(.95,.55,.4);\n        }\n    }\n\t\n\t// shade\n    \n    //col =  1.5 *(log(1.+col));\n    col = clamp(col,0.,1.);\n    fragColor = vec4( col, 1.0 );\n}\n\t\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"llSGRw","date":"1427547334","viewed":346,"name":"Mercury craters","username":"guil","description":"A variant of my previous shader optimized for performance","likes":19,"published":1,"flags":0,"usePreview":0,"tags":["3d","voronoi"],"hasliked":0,"parentid":"","parentname":""}}