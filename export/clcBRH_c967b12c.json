{"ver":"0.1","info":{"id":"clcBRH","date":"1700921516","viewed":36,"name":"testax","username":"ZProphete","description":"test","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define GRADIENT_OFFSET_X 0.005\n#define GRADIENT_OFFSET_Y 0.005\n#define SURFACE_DEPTH 0.2\n#define DETAIL_THRESHOLD 0.02  // Adjust this threshold to control detail capture\n\n// Define point light properties\n#define LIGHT_POSITION_X 0.5  // X position of the light\n#define LIGHT_POSITION_Y 0.5  // Y position of the light\n#define LIGHT_COLOR vec3(.6, 1.0, 1.0)  // Light color (blue in this case)\n#define LIGHT_INTENSITY 0.7  // Light intensity\n#define AMBIENT_INTENSITY 0.2  // Ambient light intensity\n#define SPECULAR_SHININESS 32.0  // Shininess factor for specular highlights\n#define LIGHT_RADIUS 0.3  // Radius of the light\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // Sample from iChannel0 to get the height map\n    float height = texture(iChannel0, uv).r;\n    \n    // Calculate the gradients using central differences\n    float dx = texture(iChannel0, uv + vec2(GRADIENT_OFFSET_X, 0.0)).r - height;\n    float dy = texture(iChannel0, uv + vec2(0.0, GRADIENT_OFFSET_Y)).r - height;\n    \n    // Apply the detail threshold to smooth out fine details\n    dx = abs(dx) > DETAIL_THRESHOLD ? dx : 0.0;\n    dy = abs(dy) > DETAIL_THRESHOLD ? dy : 0.0;\n\n    // Normalize the gradients to get the surface normal\n    vec3 normal = normalize(vec3(dx, dy, SURFACE_DEPTH));\n\n    // Calculate the vector from the fragment to the light position using iMouse\n    vec2 mousePos = iMouse.xy / iResolution.xy;\n    vec3 lightPos = vec3(mousePos.x, mousePos.y, 1.0);\n\n    // Calculate the direction from the fragment to the light position\n    vec3 lightDirection = normalize(lightPos - vec3(uv, 1.0));\n\n    // Calculate distance from fragment to light position\n    float distance = length(lightPos.xy - uv);\n\n    // Calculate light intensity based on distance and radius\n    float attenuation = 1.0 - smoothstep(0.0, LIGHT_RADIUS, distance);\n    float finalIntensity = attenuation * LIGHT_INTENSITY;\n\n    // Calculate diffuse and specular components using the adjusted intensity\n    float diffuse = max(dot(normal, lightDirection), 0.0);\n    vec3 diffuseColor = finalIntensity * LIGHT_COLOR * diffuse;\n\n    // Calculate ambient component\n    vec3 ambientColor = AMBIENT_INTENSITY * LIGHT_COLOR;\n\n    // Calculate reflection vector for specular highlights\n    vec3 viewDirection = normalize(vec3(0.5, 0.5, 1.0));\n    vec3 reflectDirection = reflect(-lightDirection, normal);\n    float specular = pow(max(dot(viewDirection, reflectDirection), 0.0), SPECULAR_SHININESS);\n    vec3 specularColor = finalIntensity * specular * LIGHT_COLOR;\n\n    // Combine the colors using \"screen\" blend mode simulation\n    vec3 baseColor = texture(iChannel0, uv).rgb; // Base color from texture\n\n    // Simulate \"screen\" blend mode\n    vec3 finalColor = 1.0 - (1.0 - baseColor) * (1.0 - (diffuseColor + ambientColor + specularColor));\n\n    fragColor = vec4(normal, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}