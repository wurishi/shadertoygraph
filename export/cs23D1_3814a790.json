{"ver":"0.1","info":{"id":"cs23D1","date":"1667568963","viewed":81,"name":"heart shape.","username":"VL","description":".","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define int2 vec2\n#define float2 vec2\n#define int3 vec3\n#define float3 vec3\n#define int4 vec4\n#define float4 vec4\n#define frac fract\n#define float2x2 mat2\n#define float3x3 mat3\n#define float4x4 mat4\n#define saturate(x) clamp(x,0.,1.)\n#define lerp mix\n#define CurrentTime (iTime)\n#define sincos(x,s,c) s = sin(x),c = cos(x)\n#define mul(x,y) (x*y)\n#define atan2 atan\n#define fmod mod\n#define static\n#define MaxDist 100.f\n#define SurfaceDist 0.0001f\n\nfloat GetDist(float3 ray)\n{\n\tray.y -= 4.f;\n    \n    float time = iTime;\n    float si = sin(time);\n    float ci = cos(time);\n    ray.xz = ray.xz * mat2x2(ci,si,-si,ci);\n    \n\tfloat c = sin(time * 8.f);\n\tray = ray * ((c * c)* (c * c)* (c * c) * 0.15f + 0.85f);\n\n\tray.x *= 0.29f;\n    ray.y *= 0.5f;\n    ray.z *= 1.3f;\n    \n\tfloat3 p = ray;\n    float x = p.x; \n\tfloat y = p.y;\n\tp.y += cos(p.x * 1.4f)*1.9f;\n\tp.x += 1.f * p.x * y * smoothstep(5.8f, 0.f, abs(p.x * 1.6f));\n\tp.y *= 1.8f; \n    p.x += (p.x + x) * smoothstep(-6.f,-3.f,y);\n  \n\tfloat minDist = length(p) - 3.f;\n\treturn minDist*0.5;\n}\n\nfloat RayMarching(float3 origin, float3 dir)\n{\n\tfloat hitDist = 0.f;\n\tfor (int i = 0; i < 200; ++i)\n\t{\n\t\tfloat3 ray = origin + dir * hitDist;\n\t\tfloat curr = GetDist(ray);\n\t\thitDist += curr;\n\t\tif (curr < SurfaceDist || hitDist > MaxDist)\n\t\t{\n\t\t\thitDist = curr < SurfaceDist ? hitDist : MaxDist;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn hitDist;\n}\n\nfloat3 GetNormal(float3 ray)\n{\n\tfloat d = GetDist(ray);\n\tfloat3 n = float3( d,d,d ) -\n\t\tfloat3( GetDist(ray - float3(SurfaceDist, 0.f, 0.f)),\n\t\t\tGetDist(ray - float3(0.f, SurfaceDist, 0.f)),\n\t\t\tGetDist(ray - float3(0.f, 0.f, SurfaceDist)) );\n\n\treturn normalize(n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n     vec2 uv = 2.f*(fragCoord.xy/iResolution.xy)-1.f;\n   uv.x *= iResolution.x/iResolution.y;\n\n\n    float3 rayOrigin = float3(0.f, 0.f, -10.f);\n    float3 rayDir = normalize(float3(uv, 1.f));\n    \n    float march = RayMarching(rayOrigin, rayDir);\n    float3 rayPoint = rayOrigin + rayDir * march;\n    float3 normal = GetNormal(rayPoint);\n\n    float time = iTime*0.f;\n\tfloat3 lightPos = float3( sin(time*2.f) * 15.f,  4.f, -15.f * cos(time * 2.f) );\n\tfloat3 lightDir = normalize(rayPoint - lightPos);\n    vec3 col = march != MaxDist ? vec3(dot(normal,-lightDir)) : vec3(0.f);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}