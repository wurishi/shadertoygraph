{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"channel":1,"type":"music","id":"4sXGzn","filepath":"/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"\nvec3 lightPos = vec3(10.0,14.0,5.0);\n\nconst float viewDist = 400.0;\nconst float EPILSON = 0.005;\nconst int maxIter = 256;\n\nvec3 cameraUp = vec3(0.0,1.0,0.0);\nvec3 cameraRight,cameraPosition,cameraDirection;\n\nvec3 rayPos,rayDir;\nvec3 startRayPos,startRayDir;\n\n\n\nvec3 calcNormal(vec3 p1, vec3 p2, vec3 p3) {\n    vec3 u = p2-p1;\n    vec3 v = p3-p1;\n    \n    return normalize(vec3(u.y*v.z-u.z*v.y,\n                       u.z*v.x-u.x*v.z,\n                       u.x*v.y-u.y*v.x));\n}\n\n\nfloat getHeight(vec2 p) {\n    return max(texture(iChannel1,vec2((p.x+4.0)*0.04,\n                                    0.2\n                                    )).x*texture(iChannel1,vec2((p.x+4.0)*0.04,\n                                    0.05\n                                    )).x,0.0)*40.0;\n}\n\n\nfloat distMap() {\n\treturn rayPos.y-getHeight(rayPos.xz*0.01);\n}\n\n\nvec4 colorMap() {\n\treturn texture(iChannel0,rayPos.xz*0.1)*(pow(getHeight(rayPos.xz*0.01)/20.0,2.0));\n}\n\n\nvec4 scene() {\n    \n    float scal = 0.0,dist = 0.0;\n    \n    for (int i = 0; i < maxIter; i++) {\n        \n        rayPos = startRayPos+startRayDir*scal;\n        \n        dist = distMap();\n        if (dist <= EPILSON) {\n            return colorMap();\n        }\n        \n        scal += dist;\n        if (scal > viewDist) {\n            break;\n        }\n        \n    }\n    \n\treturn vec4(0.0);\n}\n\n\n\n\nconst float cameraMoveSpeed = 0.1;\n\nconst vec2 center = vec2(0.5,0.5);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    //calculate camera\n    cameraPosition = vec3(sin(iTime*cameraMoveSpeed)*240.0,80.0,cos(iTime*cameraMoveSpeed)*80.0);\n    cameraDirection = normalize(vec3(cameraPosition.x,-60.0,cameraPosition.z));\n    \n    \n\tvec2 cUv = (fragCoord.xy / iResolution.xy)-center;\n    cUv.x *= iResolution.x/iResolution.y;\n\t\n    //camera vectors\n    cameraRight = cross(cameraDirection,cameraUp);\n    cameraUp = cross(cameraRight,cameraDirection);\n    \n    //calculate perspective ray from uv and camera vectors\n    vec3 rPoint = cUv.x*cameraRight +\n                  cUv.y*cameraUp +\n        \t\t  cameraPosition + cameraDirection;\n    \n  \tstartRayDir = normalize(rPoint-cameraPosition);\n    startRayPos = cameraPosition;\n    \n    \n    fragColor = scene();\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4lsGDN","date":"1422237448","viewed":295,"name":"terrain music visualizer","username":"public_int_i","description":"messing around with ray marching terrain\n\nEDIT: changed the getHeight function a bit to show the heights better and changed the camera movement and look direction","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["3d","ray","terrain","music","visualizer","distance","function","march"],"hasliked":0,"parentid":"","parentname":""}}