{"ver":"0.1","info":{"id":"dljyzt","date":"1692197319","viewed":17,"name":"_noise_value_zln","username":"zlnimda","description":"Learning stuff","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// degenerative values from fractional value from high frequency sinus values\nfloat rand(float x)\n{\n    return fract(sin(x) * 4973.363);\n}\n\n// random single value from 2dimension value\nfloat rand2(vec2 v)\n{\n    return rand(dot(v, vec2(16.37, 11.97)));\n}\n\n// animate uv\nvec2 PanUV(vec2 uv)\n{\n    return uv + iTime * 3.5;\n}\n\nfloat noise2(vec2 uv)\n{\n    vec2 i = floor(uv);\n    vec2 f = fract(uv);\n    vec2 xo = vec2(0., 1.);\n    \n    // smooth interpolator\n    f = smoothstep(0., 1., f);\n    \n    // get 4 corners values\n    float v00 = rand2(i+xo.xx);\n    float v01 = rand2(i+xo.xy);   \n    float v10 = rand2(i+xo.yx);\n    float v11 = rand2(i+xo.yy);\n    \n    // bilinear interpolation\n    return mix( mix(v00, v10, f.x),\n                mix(v01, v11, f.x), f.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv *= 15.;\n\n    // noise 2d\n    float r = noise2(PanUV(uv));\n\n    vec3 col = vec3(r,r,r);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}