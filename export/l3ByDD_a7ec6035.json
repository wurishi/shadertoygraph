{"ver":"0.1","info":{"id":"l3ByDD","date":"1727273549","viewed":15,"name":"Mercredi","username":"Djeinaba_dia","description":"essaye","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Ray{\n    vec3 o;// Origine\n    vec3 d;// Direction\n};\n\nstruct Val {\n  float v; // Distance signée\n  int c; // Coût\n};\n\n// Calcule un point sur le rayon\n// ray : Le rayon\n//   t : Distance\nvec3 Point(Ray ray,float t)\n{\n    return ray.o+t*ray.d;\n}\n\n// Direction aléatoire dans un hémisphère\n// seed : Graine entière, de 0 à N\n//    n : Direction de l'hémisphère\nvec3 Hemisphere(int seed,vec3 n)\n{\n    float a=fract(sin(176.19*float(seed)));// Nombres aléatoires uniformes\n    float b=fract(sin(164.19*float(seed)));\n    \n    float u=2.*3.1415*a;// Angle aléatoire\n    float v=acos(2.*b-1.);// Distribution arc cosinus pour compenser aux pôles\n    \n    vec3 d=vec3(cos(u)*cos(v),sin(u)*cos(v),sin(v));// Direction\n    if(dot(d,n)<0.){d=-d;}// Hémisphère\n    \n    return d;\n}\n\n// Caméra -------------------------------------------------------------------------------\n\n// Matrice de rotation autour de l'axe z\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\n// Calcule le rayon\n//      m : Position de la souris\n//      p : Pixel\nRay CreateRay(vec2 m,vec2 p)\n{\n  float a=3.*3.14*m.x;\n  float le=3.5;\n  \n  // Origine\n  vec3 ro=vec3(37.,0.,15.);\n  ro*=Rz(a);\n  \n  // Point cible\n  vec3 ta=vec3(0.,0.,1.);\n  \n  // Repère orthonormal\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  vec3 rd=normalize(p.x*u+p.y*v+le*w);\n  return Ray(ro,rd);\n}\n\n// Primitives -------------------------------------------------------------------------------\n\n// Sphère\n// p : point\n// c : centre du squelette\n// r : rayon\nVal Sphere(vec3 p, vec3 c, float r)\n{\n  return Val(length(p-c)-r, 1);\n}\n\n// Boîte\n// p : point\n// b : dimensions de la boîte (demi-largeur, demi-hauteur, demi-profondeur)\n// c : centre de la boîte\nVal Box(vec3 p, vec3 b, vec3 c)\n{\n    vec3 q = abs(p - c) - b;\n    return Val(length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0), 1);\n}\n\n// Tore\n// p : point\n// t : vec2(rayon du tore, rayon du tube)\n// c : centre du tore\nVal Torus(vec3 p, vec2 t, vec3 c)\n{\n    p -= c;\n    vec2 q = vec2(length(p.xz) - t.x, p.y);\n    return Val(length(q) - t.y, 1);\n}\n\n// Plan \n// p : point\n// n : Normale du plan\n// o : Point sur le plan\nVal Plane(vec3 p, vec3 n, vec3 o)\n{\n    return Val(dot((p-o),n), 1);\n}\n\n// Opérateurs\n\n// Union\n// a,b : fonction de champ des sous-arbres gauche et droit\nVal Union(Val a, Val b)\n{\n  return Val(min(a.v, b.v), a.c+b.c+1);\n}\n\n\nVal Cylinder(vec3 p, vec2 c, vec3 center) {\n    p -= center;\n    vec2 d = vec2(length(p.xz) - c.x, abs(p.y) - c.y);\n    return Val(min(max(d.x, d.y), 0.0) + length(max(d, 0.0)), 1);\n}\n\nVal Capsule(vec3 p, vec3 a, vec3 b, float r) {\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return Val(length(pa - ba * h) - r, 1);\n}\nVal Difference(Val a, Val b) {\n    return Val(max(a.v, -b.v), a.c + b.c + 1);\n}\n\nVal Intersection(Val a, Val b) {\n    return Val(max(a.v, b.v), a.c + b.c + 1);\n}\n\n\n// Intersection\n// a,b : fonction de champ des sous-arbres gauche et droit\n// Table avec pieds verticaux et plateau posé dessus\n// Primitives -------------------------------------------------------------------------------\n\n// Définissez vos fonctions pour Box, Sphere, Union, Plane, etc. ici\n\n// Champ potentiel de l'objet\nVal object(vec3 p) {\n    Val v;\n\n    // Plan du sol\n    Val ground = Plane(p, vec3(0., 1., 0.), vec3(0., -4., 0.));\n    v = ground;\n\n    // Ajout du plateau de la table (boîte)\n    Val tableTop = Box(p, vec3(4.0, 0.2, 2.0), vec3(0., -1.8, 0.));\n    v = Union(v, tableTop);\n\n    // Ajout des pieds de la table (boîtes) en position verticale sur le sol\n    Val tableLeg1 = Box(p, vec3(0.2, 2.0, 0.2), vec3(-3.8, -3.8, -1.8)); // Pied 1\n    v = Union(v, tableLeg1);\n\n    Val tableLeg2 = Box(p, vec3(0.2, 2.0, 0.2), vec3(3.8, -3.8, -1.8)); // Pied 2\n    v = Union(v, tableLeg2);\n\n    Val tableLeg3 = Box(p, vec3(0.2, 2.0, 0.2), vec3(-3.8, -3.8, 1.8)); // Pied 3\n    v = Union(v, tableLeg3);\n\n    Val tableLeg4 = Box(p, vec3(0.2, 2.0, 0.2), vec3(3.8, -3.8, 1.8)); // Pied 4\n    v = Union(v, tableLeg4);\n\n    // Sphères existantes\n    Val sphere1 = Sphere(p, vec3(0., 3.5, 0.), 2.);\n    v = Union(v, sphere1);\n\n    Val sphere2 = Sphere(p, vec3(0., 7., 0.), 1.5);\n    v = Union(v, sphere2);\n\n    // Boîte entre les sphères\n    v = Union(v, Box(p, vec3(1.5, 1.5, 1.5), vec3(0.0, 0.0, 0.0))); \n\n    // Tore au-dessus de la table\n    Val torus = Torus(p, vec2(2.0, 0.5), vec3(0., 3.5, 0.)); // Ajustez la position en hauteur\n    v = Union(v, torus);\n\n    return v;\n}\n// Analyse du champ scalaire \nconst int Steps=200;// Nombre d'étapes\nconst float Epsilon=.01;// Epsilon de marche\n\n// Normale de l'objet\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  Val val=object(p);\n  float v=val.v;\n  n.x=object(vec3(p.x+eps,p.y,p.z)).v-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z)).v-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps)).v-v;\n  return normalize(n);\n}\n\n// Trace le rayon en utilisant la marche de sphères\n// ray : Le rayon\n//   e : Distance maximale\n//   h : touché\n//   s : Nombre d'étapes\n//   c : coût\nbool SphereTrace(Ray ray,float e,out float t,out int s,out int c)\n{\n  bool h=false;\n  \n  // Commence à l'origine\n  t=0.0;\n  c=0;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=Point(ray,t);\n    Val val=object(p);\n    float v=val.v;\n    c+=val.c;\n    // Touche l'objet\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Avance le long du rayon\n    t+=max(Epsilon,v);\n    // S'échappe si on a marché trop loin\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return h;\n}\n\n// Éclairage -------------------------------------------------------------------------------\n\n// Couleur de fond\n// ray : Rayon \nvec3 background(Ray ray)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),ray.d.z*.5+.5);\n}\n\n// Ombrage\n// p : Point\n// n : Normale\n// l : Direction de la lumière\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n  float t;\n  int s;\n  int c;\n  bool hit=SphereTrace(Ray(p+Epsilon*n,l),100.,t,s,c);\n  if(!hit)\n  {\n    return 1.;\n  }\n  return 0.;\n}\n\n// Ombrage et éclairage\n//   p : Point\n//   n : Normale au point\n// eye : Direction de l'œil\nvec3 Shade(vec3 p,vec3 n,Ray eye)\n{\n  // Point lumineux\n  const vec3 lp=vec3(5.,10.,25.);\n  \n  // Direction de la lumière vers le point lumineux\n  vec3 l=normalize(lp-p);\n  \n  // Couleur ambiante\n  vec3 ambient=.25+.25*background(Ray(p,n));\n  \n  // Calcul de l'ombre\n  float shadow=Shadow(p,n,l);\n  \n  // Diffus de Phong\n  vec3 diffuse=.35*clamp(dot(n,l),0.,1.)*vec3(1.,1.,1.);\n  \n  // Spéculaire\n  vec3 r=reflect(eye.d,n);\n  vec3 specular=.15*pow(clamp(dot(r,l),0.,1.),35.)*vec3(1.,1.,1.);\n  vec3 c=ambient+shadow*(diffuse+specular);\n  return c;\n}\n\n// Ombrage en fonction du nombre d'étapes dans le traçage de sphères\n// n : Nombre d'étapes\nvec3 ShadeSteps(int n,int m)\n{\n  float t=float(n)/(float(m));\n  return.5+mix(vec3(.05,.05,.5),vec3(.65,.39,.65),t);\n}\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)\n{  \n  // Convertit les coordonnées des pixels\n    vec2 pixel=(-iResolution.xy+2.*pxy)/iResolution.y;\n\n  // Souris\n  vec2 m=iMouse.xy/iResolution.xy;\n  \n  // Caméra\n  Ray ray=CreateRay(m,pixel);\n  \n  // Trace le rayon\n  \n  // Touché et nombre d'étapes\n  float t=0.0;\n  int s=0;\n  int c;\n  bool hit=SphereTrace(ray,100.,t,s,c);\n  \n  // Ombre le fond\n  vec3 rgb=background(ray);\n  \n  if(hit)\n  {\n    // Position\n    vec3 p=Point(ray,t);\n    \n    // Calcule la normale\n    vec3 n=ObjectNormal(p);\n    \n    // Ombre l'objet avec la lumière\n    rgb=Shade(p,n,ray);\n  }\n  \n  // Décommentez cette ligne pour ombrer l'image avec des fausses couleurs représentant le nombre d'étapes\n    //rgb=ShadeSteps(s,Steps);\n  color=vec4(rgb,1.);\n}","name":"Image","description":"","type":"image"}]}