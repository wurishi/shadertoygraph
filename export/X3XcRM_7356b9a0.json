{"ver":"0.1","info":{"id":"X3XcRM","date":"1725949145","viewed":38,"name":"NotSoGreeeen - SlimeMold(simple)","username":"NotSoGreeeen","description":"A challenge made by a friend to try and recreate a simplified version of what slime mold does, but I only have an hour to finish it.\nFinished with 31:25 left on the clock.\n\nLeft click to start the mold","likes":0,"published":3,"flags":32,"usePreview":0,"tags":["1hourchallenge"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nThis is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to http://unlicense.org/\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //use traditional uv calculation to sample texture and then push that to the screen\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Don't go below 1\n#define brushSize 1.\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //uv array for texture sampling in moore's neighborhood\n    vec2[9] uv;\n    int z = 0;\n    for (int x = 0; x < 3; x++) {\n        for (int y = 0; y < 3; y++) {\n            uv[z] = (fragCoord + vec2(x - 1, y - 1)) / iResolution.xy;\n            z++;\n        }\n    }\n    \n    //textures for sampling (moore's neighborhood)\n    vec4[9] tex;\n    for (int i = 0; i < 9; i++) {\n        tex[i] = texture(iChannel0, uv[i]);\n    }\n    \n    //neighborhood values:\n    //[2][5][8]\n    //[1][4][7]\n    //[0][3][6]\n    \n    int val = int(round(hash11(hash12(uv[4] * iTime)) * 8.));\n    \n    if (tex[4].x > 0.) {\n        tex[4].xyz -= vec3(0.005, 0.005, 0.0);\n    }\n    \n    if (tex[val].x >= .71 && tex[4].x < .1) {\n        tex[4].xyz = vec3(1., 1., 0.);\n    }\n\n    \n    if (iMouse.z > 0.) {\n        if(distance(iMouse.xy, fragCoord) < brushSize) {\n             tex[4].xyz = vec3(1.0, 1., 0.);\n        }\n    }\n\n    fragColor = tex[4];\n}","name":"Buffer A","description":"","type":"buffer"}]}