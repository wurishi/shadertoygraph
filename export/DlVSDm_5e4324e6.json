{"ver":"0.1","info":{"id":"DlVSDm","date":"1686143093","viewed":88,"name":"fractals_center","username":"Neervana","description":"Periodic shader inspired by (soon to be) famous youtube video, probably one in a thousand clonems popping up.\n\nUses tone mapping to fix over-exposure of the video's example.\n","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal","periodic","tonemap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define palette(x) cosPalette(x,vec3(0.5, 0.5, 0.5),vec3(0.5, 0.5, 0.5),vec3(2.0, 1.0, 0.0),vec3(0.50, 0.20, 0.25))\n#define PI_l 3.14159265358979323846264338327950288420\n#define SQRT2 1.41421356237\n// set to false to try aces_tonemap \n#define USE_REINHARD true\n\nvec3 cosPalette(  float t,  vec3 a,  vec3 b,  vec3 c, vec3 d ){\n    return a + b*cos( PI_l * 2. *(c*t+d) );\n}\n\n// Taken from https://www.shadertoy.com/view/XsGfWV\n// by the shader god `iq'\nvec3 aces_tonemap(vec3 color){\t\n\tmat3 m1 = mat3(\n        0.59719, 0.07600, 0.02840,\n        0.35458, 0.90834, 0.13383,\n        0.04823, 0.01566, 0.83777\n\t);\n\tmat3 m2 = mat3(\n        1.60475, -0.10208, -0.00327,\n        -0.53108,  1.10813, -0.07276,\n        -0.07367, -0.00605,  1.07602\n\t);\n\tvec3 v = m1 * color;    \n\tvec3 a = v * (v + 0.0245786) - 0.000090537;\n\tvec3 b = v * (0.983729 * v + 0.4329510) + 0.238081;\n\treturn pow(clamp(m2 * (a / b), 0.0, 1.0), vec3(1.0 / 2.2));\t\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 base = vec3(0.0);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord/iResolution.xy);\n    uv = (uv - 0.5) * 2.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec2 uv0 = uv;\n  \n    for(int i = 0; i<5; ++i){\n        \n        // produce new fractal\n        uv = (fract(uv * SQRT2) - 0.5);\n\n        // get magnitude\n        float mag = length(uv) * exp(-length(uv0));\n        mag = abs(sin(mag * 8.0 + iTime)/ 8.);\n        mag = 0.01/mag;\n        mag = pow(mag, 1.2);\n        \n        // palette sampling\n        vec3 col = vec3(palette(length(uv0) + float(i) *.1+ iTime*.1f));\n        \n        base += (mag * col);\n    }\n    \n    // Reinhard tone map\n    if(USE_REINHARD)\n    {\n        float luma = 0.2126 * base.x +0.7152 * base.y +0.0722 * base.z;\n        base = (base / (luma + 1.));\n\n    } else // uses ACES\n    {\n        base = aces_tonemap(base);\n    }\n\n    // Output to screen\n    fragColor = vec4(base, 1.0f);\n}","name":"Image","description":"","type":"image"}]}