{"ver":"0.1","info":{"id":"mdfGW8","date":"1666101377","viewed":68,"name":"Space blending","username":"azeem","description":"Some cos and sin","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sin","cos"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159\nmat2 rot(float ang){\n    return mat2(cos(ang), -sin(ang),sin(ang),cos(ang));\n}\nvec2 rotate(vec2 uv,vec2 point, float angle){\n    float i=iTime*.2;\n    point=vec2(point.x*cos(i),point.y*sin(i));\n    float c=1.;\n    float d=1.+2.*length(uv-point);\n    uv-=point;\n    uv*=rot(angle*d);\n    uv+=point;\n    return uv;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv-=.5;\n    uv.x*=iResolution.x/iResolution.y;\n    float val=0.2;\n    uv*=  -1.+2.*smoothstep(-val,val,uv);\n    uv+=iTime*.015;\n    uv=sin(uv*20.);\n\n    //try changing this line (try something between [0.5,1.5]) // experimental values, dont know the reason\n    float angle=.9;\n    angle=1.+.25*sin(iTime*.1);\n    \n    vec2 point1=vec2(.1,.1);\n    vec2 point2=vec2(.3,-.2);\n    vec2 point3=vec2(-.25,.35);\n    vec2 point4=vec2(.4,-.5);\n    \n    uv-=rotate(uv,point1,angle);\n    uv-=rotate(uv,point2,angle);\n    uv-=rotate(uv,point3,angle);\n    uv-=rotate(uv,point4,angle);\n    \n    float ang=atan(uv.y,uv.x)+PI+iTime;\n    float dis=length(uv);\n    vec3 col=vec3(0.);\n    col = vec3(hsv2rgb(vec3( ang/(PI*2.),dis,.8  )));\n    //col=vec3( hsv2rgb(vec3( sin( 3.*uv.y+.2*iTime)*.5+.5 ,.8,.8))  );\n    vec3 n=(normalize(col));\n    col=vec3(    smoothstep(0.3,0.7,(n.x+n.y+n.z)/3. )        );\n    col=pow(col,vec3(1./2.2));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec3 hsv2rgb(in vec3 hsb) {\n    vec3 rgb = clamp(abs(mod(hsb.x * 6. + vec3(0., 4., 2.), \n                            6.) - 3.) - 1.,\n                      0.,\n                      1.);\n   \n    rgb = rgb*rgb*(3. - 2. * rgb);\n    return hsb.z * mix(vec3(1.), rgb, hsb.y);\n}\n\n","name":"Common","description":"","type":"common"}]}