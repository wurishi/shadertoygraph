{"ver":"0.1","info":{"id":"wl3czn","date":"1608329938","viewed":224,"name":"Audio Waveform Visualizer v5","username":"oneshade","description":"Version five of my audio waveform visualizer. By the way, the surface you are seeing is a histogram of the audio channel. Important note: if the resolution changes it will get messed up :(","likes":7,"published":3,"flags":32,"usePreview":0,"tags":["3d","visualization","waveform"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Uncomment for a smooth surface\n//#define SMOOTH_SURFACE\n\n#define SIN_25 0.42261826174\n#define COS_25 0.90630778703\n\nfloat mapScene(in vec3 p) {\n    const vec2 res = vec2(0.2);\n    vec2 uv = 0.25 * p.xz + 0.5;\n\n    vec2 cell = floor(uv / res) * res;\n    vec2 local = fract(uv / res);\n\n    #ifdef SMOOTH_SURFACE\n    local *= local * (3.0 - 2.0 * local);\n    #endif\n\n    float ld = texture(iChannel0, cell).x;\n    float rd = texture(iChannel0, cell + vec2(res.x, 0.0)).x;\n    float lu = texture(iChannel0, cell + vec2(0.0, res.y)).x;\n    float ru = texture(iChannel0, cell + res).x;\n\n    float height = 2.0 * mix(mix(ld, rd, local.x), mix(lu, ru, local.x), local.y);\n    float sheet = max(abs(p.y - height) - 0.05, max(abs(p.x), abs(p.z)) - 2.0) * 0.5;\n\n    return sheet;\n}\n\nvec3 getNormal(in vec3 p) {\n    return normalize(vec3(mapScene(p + vec3(0.001, 0.0, 0.0)) - mapScene(p - vec3(0.001, 0.0, 0.0)),\n                          mapScene(p + vec3(0.0, 0.001, 0.0)) - mapScene(p - vec3(0.0, 0.001, 0.0)),\n                          mapScene(p + vec3(0.0, 0.0, 0.001)) - mapScene(p - vec3(0.0, 0.0, 0.001))));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n    float time = iTime + texture(iChannel0, vec2(1.0)).x;\n    float c = cos(time), s = sin(time);\n\n    vec3 ro = vec3(0.0, 0.0, 5.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    float dt = 0.0;\n    for (int iter=0; iter < 200; iter++) {\n        vec3 p = ro + rd * dt;\n\n        p.y += 0.5;\n        p.yz *= mat2(COS_25, SIN_25, -SIN_25, COS_25);\n        p.xz *= mat2(c, s, -s, c);\n\n        float d = mapScene(p);\n        if (d < 0.001) {\n            vec3 n = getNormal(p);\n            vec3 l = vec3(-0.58, 0.58, 0.58);\n\n            n.xz *= mat2(c, -s, s, c);\n            n.yz *= mat2(COS_25, -SIN_25, SIN_25, COS_25);\n\n            vec2 uv = 0.25 * p.xz + 0.5;\n            fragColor.rgb += mix(mix(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0), uv.x), mix(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0), uv.x), uv.y);\n            fragColor.rgb *= max(0.3, dot(n, l));\n\n            break;\n        }\n\n        if (d > 100.0) {\n            break;\n        }\n\n        dt += d;\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGRr","filepath":"/media/a/d96b229eeb7a08d53adfcf1ff89e54c9ffeebed193d317d1a01cc8125c0f5cca.mp3","previewfilepath":"/media/ap/d96b229eeb7a08d53adfcf1ff89e54c9ffeebed193d317d1a01cc8125c0f5cca.mp3","type":"music","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = texture(iChannel0, (fragCoord + vec2(1.0, 0.0)) / iResolution.xy);\n    if (int(fragCoord.x) == int(iResolution.x) - 1) {\n        fragColor = vec4(texture(iChannel1, vec2(fragCoord.y / iResolution.y, 0.0)).x, 0.0, 0.0, 1.0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}