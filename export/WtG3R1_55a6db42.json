{"ver":"0.1","info":{"id":"WtG3R1","date":"1578228973","viewed":194,"name":"20200105_hextile","username":"FMS_Cat","description":"heck","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","posteffect"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// (c) 2020 FMS_Cat, MIT License\n\n#define CELL_SIZE 0.02\n#define BORDER_WIDTH 4.0\n\n#define TWO_DIV_SQRT_THREE 1.15470053838\n#define SQRT_THREE_DIV_TWO 0.86602540378\n#define saturate(i) clamp(i,0.,1.)\n#define linearstep(a,b,t) saturate(((t)-(a))/((b)-(a)))\n#define lofi(i,m) (floor((i)/(m))*(m))\n\n//  _\n// / |\n// |_/\n\nvec2 uv2heck( in vec2 uv ) {\n    vec2 p = ( uv - 0.5 ) * iResolution.xy / iResolution.y / CELL_SIZE;\n    p.y *= SQRT_THREE_DIV_TWO;\n    p.y += 0.5 * p.x;\n    return p;\n}\n\nvec2 heck2uv( in vec2 p ) {\n    vec2 uv = p;\n    uv.y -= 0.5 * p.x;\n    uv.y *= TWO_DIV_SQRT_THREE;\n    uv = uv * CELL_SIZE * iResolution.y / iResolution.xy;\n    return uv + 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 p = uv2heck( uv );\n    \n    vec2 nearestCell;\n    nearestCell.x = lofi( p.x, 1.0 );\n    nearestCell.y = lofi( p.y + nearestCell.x + 2.0, 3.0 ) - nearestCell.x - 2.0;\n    vec2 cellCoord = ( p - nearestCell ) - vec2( 0.0, 1.0 );\n    \n    bool isAboveCell = cellCoord.x < cellCoord.y; // above or right\n    nearestCell += isAboveCell ? vec2( 0.0, 2.0 ) : vec2( 1.0, 1.0 );\n    cellCoord += isAboveCell ? vec2( 0.0, -1.0 ) : vec2( -1.0, 0.0 );\n    \n    float len = max( abs( cellCoord.x ), max( abs( cellCoord.y ), abs( cellCoord.x - cellCoord.y ) ) );\n    float border = linearstep( 0.0, -2.0, iResolution.y * CELL_SIZE * ( 1.0 - len ) - BORDER_WIDTH );\n\n    vec2 coord = heck2uv( nearestCell );\n    \n    vec4 tex = texture( iChannel0, coord );\n    \n    fragColor = vec4( mix( tex.xyz, vec3( 0.0 ), border ), 1.0 );\n}","name":"Image","description":"","type":"image"}]}