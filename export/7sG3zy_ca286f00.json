{"ver":"0.1","info":{"id":"7sG3zy","date":"1631752043","viewed":95,"name":"spiraly flower","username":"rah","description":"Just playing around","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["random"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * @author rah, inspired by jonobr1 / http://jonobr1.com/\n */\n\n// Make a vec3 color from rgb values [0, 255]\nvec3 rgb(float r, float g, float b)\n{\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n\n/* \n * Output circle colors at given center pos and radius\n */\nvec4 circle(vec2 uv, vec2 center, float radius, vec3 color)\n{\n\tfloat d = length(center - uv) - radius;\n\tfloat t = clamp(d, 0.0, 1.0);\n\treturn vec4(color, 1.0 - t);\n}\n\n/* \n * Rotate an input point about some center by angle\n */\nvec2 rotatePoint2d(vec2 uv, vec2 center, float angle)\n{\n    vec2 rotatedPoint = vec2(uv.x - center.x, uv.y - center.y);\n    float newX = cos(angle) * rotatedPoint.x - sin(angle) * rotatedPoint.y;\n    rotatedPoint.y = sin(angle) * rotatedPoint.x + cos(angle) * rotatedPoint.y;\n    rotatedPoint.x = newX;\n    return rotatedPoint;\n}\n\n\nfloat bias(float t, float b) {\n    return (t / ((((1.0/b) - 2.0)*(1.0 - t))+1.0));\n}\n\nvec4 coolMistake1(out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy;\n\tvec2 center = iResolution.xy * 0.5;\n\tfloat radius = 0.25 * iResolution.y;\n    \n    // Background layer\n\tvec4 bg = vec4(rgb(255.0, 255.0, 210.0), 1.0);\n\tvec4 red = vec4(rgb(225.0, 50.0, 70.0), 1.0);\n    vec4 color = red;\n    \n    // Get point normalized from center of the screen\n    vec2 p = (2.0*fragCoord.xy-iResolution.xy);\n    \n    // angle of the point\n    float a = atan(p.x,p.y);\n    \n    // scale the radius\n    float r = length(p) * 0.75f;\n    \n    // interesting discontinuity\n    float x = cos(a * 10.0f);\n    //x += sin(a * 10.0f) * 0.5f;\n        \n    radius -= x * 40.0f * sin(iTime);\n\n\t\n\t// Circle\n\tvec4 layer2 = circle(uv, center, radius, vec3(color));\n    \n    radius -= 40.0f;\n    vec4 layer3= circle(uv, center, radius, vec3(bg));\n    \n    return mix(bg, layer2, layer2.a);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 uv = fragCoord.xy;\n\tvec2 center = iResolution.xy * 0.5;\n\tfloat radius = 0.2 * iResolution.y;\n    \n    // Background layer\n\tvec4 bg = vec4(rgb(255.0, 255.0, 210.0), 1.0);\n\tvec4 red = vec4(rgb(225.0, 50.0, 70.0), 1.0);\n    vec4 blue = vec4(rgb(125.0, 150.0, 250.0), 1.0);\n    vec4 color = red;\n    \n    // Get point normalized from center of the screen\n    \n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n    // scale the radius\n    float r = length(p) * 0.75f;\n    \n    // Spiraling animation\n    p = rotatePoint2d(p, vec2(0.0, 0.0), r * sin(r * cos(r + 10.0) + iTime) + iTime);\n    \n    // angle of the point\n    float a = atan(p.x,p.y);\n    \n    // interesting discontinuity\n    float x = bias(cos(a * 6.0), 0.9f);\n    x += sin(a * 10.0f) * 0.75;\n        \n    radius -= x * 50.0f * sin(iTime);\n\t\n\t// Circle\n    float normalizedRadiusFactor = r + abs(radius/(0.5 * iResolution.y));\n    color = red;//mix(blue, red, pow(normalizedRadiusFactor, 2.0));\n\tvec4 layer2 = circle(uv, center, radius, vec3(color));\n    \n    radius -= 40.0;\n    vec4 layer3= circle(uv, center, radius, vec3(bg));\n    \n    fragColor = mix(bg, layer2, layer2.a);\n}","name":"Image","description":"","type":"image"}]}