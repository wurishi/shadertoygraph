{"ver":"0.1","info":{"id":"lsGczd","date":"1522948593","viewed":615,"name":"sdf of polygon (internal)","username":"FabriceNeyret2","description":"Normalization = relative to borders.\nFor SDF normalized to world (for ray-marching), see comments.\n","likes":8,"published":3,"flags":0,"usePreview":0,"tags":["2d","sdf","shapes","short","mz"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 O, vec2 U )\n{\n   float t = mod(iTime,8.), \n         r = 1.,\n         N = 3.+5.*min(t,8.-t);\n    \n    vec2 R = iResolution.xy;\n    U = ( U+U - R ) / R.y;\n    float a = atan(U.x,U.y), l = length(U),d,\n          b = 3.14159/N;\n    a = mod(a,2.*b)-b;\n    // --- SDF relative to borders\n    d = 1. - l * cos(a) / cos(b);\n#if 1                        // 0: cheap  1: full rounded outside\n    if (d<0.) d = -length(vec2(min(0., (sin(b) - abs(l * sin(a))) / cos(b) ), d));\n#endif\n    O = vec4(d);\n/** // variant :\n    U = l * vec2(cos(a),sin(a));\n    O = vec4( 1.-U.x/cos(b) );   // but if you simplify, it's same expression :-)\n/**/\n  // --- SDF relative to world:\n  //O = vec4( l = r*cos(b) - l * cos(a) ); // or r - l * cos(a) if r=faces instead of vertices\n    \n  //O = sin(30.*O);\n    if (O.x<0.) O=vec4(1,0,0,0);\n    O.b = .5*sin(6.28*10.*d);\n}","name":"Image","description":"","type":"image"}]}