{"ver":"0.1","info":{"id":"sttXD4","date":"1676609590","viewed":123,"name":"Contrast-preserving blending","username":"nilrem","description":"Verbose version of https://www.shadertoy.com/view/4dcSDr\nPaper: https://hal.inria.fr/inria-00536064v2\nLeft/right: naive alpha blending / contrast-preserving blending\nSee FabriceNeyret2's comment below for links to better shader toys on this topic","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["blending","filtering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// NB: trick published in https://hal.inria.fr/inria-00536064v2\n\n#define srgb2rgb(V) pow( max(V,0.), vec4( 2.2 )  )          // RGB <-> sRGB conversions\n#define rgb2srgb(V) pow( max(V,0.), vec4(1./2.2) )\n\n// try textures random, checker, etc\n#define tex2D(U)    srgb2rgb(texture(iChannel0, 2. * U))\n#define mean(U)     srgb2rgb(texture(iChannel0, 2. * U, 10.))\n// variants:\n// #define mean vec4(65,54,46,1)/255.          // mean for Britney video\n// #define tex2D(U) vec4(.5+.5*sin(120.*U.x))  // Gabor noise. mean = .5\n// #define tex2D(U) smoothKernel(U)            // simple blob. mean = .5\n// #define mean .5\n\n#define smoothKernel(U) smoothstep(.2, .0, length(U))           // smooth kernel\n#define rnd(i)          fract(1e4 * sin(i + vec2(0, 73.17)))    // random\n\nvec4 normalize_blend(in vec4 col, in vec4 mean, in float s, in float s2) {\n  return mean + (col - s * mean) / sqrt(s2);\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  vec2 R = iResolution.xy;\n  vec2 r = iResolution.xy / R.y;\n  \n  fragColor = vec4(0);\n  fragCoord /= R.y;\n\n  float v;\n  float s  = 0.;\n  float s2 = 0.;\n\n  for (int i = 0; i < 150; i++) {\n    vec2 spritePos = fragCoord - rnd(vec2(i)) * r +\n             .1 * cos(vec2(i) + iTime + vec2(0, 1.6));\n\n    // kernel\n    v = smoothKernel(spritePos);\n    \n    // value and momentums\n    fragColor += v * tex2D(spritePos);\n    s += v;\n    s2 += v * v;\n  }\n \n  // normalization\n  if (fragCoord.x < r.x / 2.)\n    // linear blend\n    fragColor /= s;\n  else\n    // variance preserving blend\n    fragColor = normalize_blend(fragColor, mean(fragCoord), s, s2);\n  \n  fragColor = rgb2srgb(fragColor);\n}\n","name":"Image","description":"","type":"image"}]}