{"ver":"0.1","info":{"id":"Ndfyz4","date":"1641755568","viewed":194,"name":"A Thousand Lights","username":"sdfgeoff","description":"What started out as another noise experiment ended up as this.....","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["noise","glow","lights"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float octaves = 15.0;\n\n\n// This hash function taken from https://www.shadertoy.com/view/4djSRW\nvec4 hash44(vec4 p4)\n{\n\tp4 = fract(p4  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\n\n\nvec4 noiseElement(vec2 coord, vec2 delta, float seed, float octave) {\n    vec4 noise = hash44(vec4(coord, octave, seed));\n    float midpoint = max(noise.a - length(delta) * noise.a, 0.0);\n    \n    vec3 color = noise.rgb;\n    float brightness = (cos(-octave * 0.5 + iTime * 3.0) + 1.0) * 0.3 + 0.7;\n    return vec4(neon(midpoint * brightness * 1.2, color), 1.0);\n}\n\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float seed = 1.0;//round(iTime * 0.5);\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    \n    vec4 noise_out = vec4(0);\n    for (float octave=1.0; octave<octaves; octave+=1.0) {\n    \n        float angle = cos(iTime) * 0.2;\n        float displacement = (iTime + sin(iTime)* 0.5) * 1.0 / octave;\n        vec2 nuv = mat2(cos(angle), sin(angle), -sin(angle), cos(angle)) * uv;\n        nuv += displacement;\n        nuv *= float(octave);\n        \n        vec2 coord = round(nuv);\n        vec2 delta = (nuv - coord) * 2.0;\n        \n        \n        vec4 new = noiseElement(coord, delta, seed, octave);\n        \n        \n        noise_out = noise_out + new / (octave * 0.5 + 1.0);\n    }\n    \n\n\n    // Output to screen\n    fragColor = noise_out;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec3 neon(float val, vec3 color) {\n\tfloat r = clamp(val, 0.0, 1.0);\n    float r2 = r * r;\n    float r4 = r2 * r2;\n    float r16 = r4 * r4;\n    vec3 c = color;\n    vec3 c2 = pow(color, vec3(4.0)); // A darker, more saturated version of color\n    \n\tvec3 outp = vec3(0.0);\n\toutp += c2 * r2; // Darker color falloff\n\toutp += c * r4; // Specified Color main part\n\toutp += vec3(1.0) * r16; // White core\n\treturn outp;\n}","name":"Common","description":"","type":"common"}]}