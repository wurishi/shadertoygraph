{"ver":"0.1","info":{"id":"tdfBWr","date":"1588019277","viewed":89,"name":"fork-sound - acid jam","username":"jorge2017a1","description":"///Modificado por Jorge f.p----27-abril-2020\n//\"sound - acid jam\" by srtuss\n//https://www.shadertoy.com/view/ldfSW2","likes":3,"published":1,"flags":8,"usePreview":0,"tags":["forksoundacidjam"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// --- access to the image of ascii code c\n//#define C(c) U.x-=.5; T+= U.x<.0||U.x>1.||U.y<0.||U.y>1. ?vec4(0): texture( iChannel3, U/16. + fract( vec2(c, 15-c/16) / 16.))\n//#define C(c) U.x-=.5; T+= U.x<.0||U.x>1.||U.y<0.||U.y>1. ?vec4(0): textureLod( iChannel3, U/16. + fract( vec2(c, 15-c/16) / 16.), \\\n//                                                                               log2(length(fwidth(U/16.*iResolution.xy))) )\n  #define C(c) U.x-=.5; T+= U.x<.0||U.x>1.||U.y<0.||U.y>1. ?vec4(0): textureGrad(iChannel3, U/16. + fract( vec2(c, 15-c/16) / 16.), dFdx(U/16.),dFdy(U/16.) )\n#define initMsg vec4 T = vec4(0)\n#define endMsg  return length(T.yz)==0. ? 0. : T.x\n\nfloat message(vec2 U) { // to alter in the icon with the alter message\n    vec4 T = vec4(0);   // or: initMsg;\n    C(83);C(111);C(117);C(110);C(100);C(32);C(105);C(110);C(115);C(105);C(100);C(101); // message \"Sound inside\"\n    return length(T.yz)==0. ? -1. : T.x; // or: endMsg;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    //  if (iResolution.y<200.) to display only in the icon \n    if (iResolution.y<2000.) {float c=message((fragCoord/iResolution.y-vec2(.1,.2))*8.);if(c>=0.){fragColor=vec4(c);return;}}\n\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n\t//fragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n    fragColor = vec4(0.0,0.0,0.0,1.0);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"///Modificado por Jorge f.p----27-abril-2020\n//\"sound - acid jam\" by srtuss\n//https://www.shadertoy.com/view/ldfSW2\n\n\n// srtuss, 2014\n//\n// Writing this crude 303 emulation + some percussion was the first thing i tried with the new\n// soundshader-feature. The values are all tweaked by ear.\n\n// number of synthesized harmonics (tune for quality/preformance)\n#define NSPC 10\n\n#define pi2 6.283185307179586476925286766559\n\n\n\n\n\n///--------------------------------------\n\n//NOTE THAT THESE WAVES ARE BASED ON [0,1] RATHER THAN [0,2pi]\n\n//Pulse wave\nfloat pulse(float x,float duty)\n{\n    return (2.0*step(1.0-duty,fract(x)))-1.0;\n}\n//Square wave\nfloat square(float x)\n{\n    return (2.0*step(0.5,fract(x)))-1.0;\n}\n//Triangle wave\nfloat triangle(float x)\n{\n    return mix((4.0*fract(x))-1.0,\n               (-4.0*fract(x))+3.0,\n               step(0.5,fract(x)));\n}\n//Sawtooth wave\nfloat sawtooth(float x)\n{\n    return (2.0*fract(x))-1.0;\n}\n\n//----------------------------------------\n\n\n// hard clipping distortion\nfloat dist(float s, float d)\n{\n\treturn clamp(s * d, -1.0, 1.0);\n}\nvec2 dist(vec2 s, float d)\n{\n\treturn clamp(s * d, -1.0, 1.0);\n}\n\n// quantize\nfloat quan(float s, float c)\n{\n\treturn floor(s / c) * c;\n}\n\n// my resonant lowpass filter's frequency response\nfloat _filter(float h, float cut, float res)\n{\n\tcut -= 20.0;\n\tfloat df = max(h - cut, 0.0), df2 = abs(h - cut);\n\treturn exp(-0.005 * df * df) * 0.5 + exp(df2 * df2 * -0.1) * 2.2;\n}\n\n// hash\nfloat nse(float x)\n{\n\treturn fract(sin(x * 110.082) * 19871.8972);\n\t//return fract(sin(x * 110.082) * 13485.8372);\n}\nfloat nse_slide(float x)\n{\n\tfloat fl = floor(x);\n\treturn mix(nse(fl), nse(fl + 1.0), smoothstep(0.0, 1.0, fract(x)));\n}\n\n// note number to frequency\nfloat ntof(float n)\n{\n\treturn 440.0 * pow(2.0, (n - 69.0) / 12.0);\n}\n\n// tb303 core\nvec2 synth(float tseq, float t)\n{\n\tvec2 v = vec2(0.0);\n\t\n\tfloat tnote = fract(tseq);\n\tfloat dr = 0.26;\n\tfloat amp = smoothstep(0.05, 0.0, abs(tnote - dr - 0.05) - dr) * exp(tnote * -1.0);\n\tfloat seqn = nse(floor(tseq));\n\t//float seqn = nse_slide(tseq);\n\tfloat n = 20.0 + floor(seqn * 38.0);//50.0 + floor(time * 2.0);\n\tfloat f = ntof(n);\n\t\n    float sqr = smoothstep(0.0, 0.01, abs(mod(t * 9.0, 64.0) - 20.0) - 20.0);\n    \n\tfloat base = f;//50.0 + sin(sin(t * 0.1) * t) * 20.0;\n\tfloat flt = exp(tnote * -1.5) * 50.0 + pow(cos(t * 1.0) * 0.5 + 0.5, 4.0) * 80.0 - 0.0;\n    \n    \n    \n\tfor(int i = 0; i < NSPC; i ++)\n\t{\n\t\tfloat h = float(i + 1);\n\t\tfloat inten = 1.0 / h;\n\t\n\t\t\n\t\tinten = mix(inten, inten * mod(h, 2.0), sqr);\n\t\t\n\t\tinten *= exp(-1.0 * max(2.0 - h, 0.0));// + exp(abs(h - flt) * -2.0) * 8.0;\n\t\t\n\t\tinten *= _filter(h, flt, 4.0);\n\t\t\n\t\t\n\t    v.x += inten * triangle((pi2 + 0.01) * (t * base * h));\n        v.y += inten * sawtooth(pi2 * (t * base * h));\n        \n        v.x= v.x+ sin(v.x);\n        v.y= v.y+ sin(v.y);\n           \n        \n\t}\n\t\n\t\n\tfloat o = v.x * amp;//exp(max(tnote - 0.3, 0.0) * -5.0);\n\t\n\t//o = dist(o, 2.5);\n\t\n\treturn vec2(dist(v * amp, 2.0));\n}\n\n// heavy 909-ish bassdrum\nfloat kick(float tb, float time)\n{\n\ttb = fract(tb / 4.0) * 0.5;\n\tfloat aa = 5.0;\n\ttb = sqrt(tb * aa) / aa;\n\t\n\tfloat amp = exp(max(tb - 0.15, 0.0) * -10.0);\n\tfloat v = sin(tb * 100.0 * pi2) * amp;\n\tv = dist(v, 4.0) * amp;\n\tv += nse(quan(tb, 0.001)) * nse(quan(tb, 0.00001)) * exp(tb * -20.0) * 2.5;\n\treturn v;\n}\n\n// 909-ish open hihat\nfloat hat(float tb)\n{\n\ttb = fract(tb / 4.0) * 0.5;\n\tfloat aa = 4.0;\n\t//tb = sqrt(tb * aa) / aa;\n\treturn nse(sin(tb * 4000.0) * 0.0001) * smoothstep(0.0, 0.01, tb - 0.25) * exp(tb * -5.0);\n}\n\nfloat gate1(float t)\n{\n\t#define stp 0.0625\n\tfloat v;\n\tv = abs(t - 0.00 - 0.015) - 0.015;\n\tv = min(v, abs(t - stp*1. - 0.015) - 0.015);\n\t\n\treturn smoothstep(0.001, 0.0, v);\n}\n\nvec2 synth2(float time)\n{\n\tfloat tb = mod(time * 9.0, 16.0) / 16.0;\n\t\n\tfloat f = time * pi2 * ntof(87.0 - 12.0 + mod(tb, 4.0));\n\tfloat v = dist(sin(f + sin(f * 0.5)), 5.0) * gate1(tb);\n\t\n\treturn vec2(v);\n}\n\n\n\nvec2 synth3(float time)\n{\n\tfloat tb = mod(time * 9.0, 16.0) / 16.0;\n\t\n\tfloat f = time * pi2 * ntof(87.0 - 12.0 + mod(tb, 4.0));\n\tfloat v = dist(cos(f + triangle(f * 0.5)), 5.0) * gate1(tb);\n\t\n\treturn vec2(v);\n}\n\n\nvec2 synth2_echo(float time, float tb)\n{\n\tvec2 mx;\n\tmx = synth2(time) * 0.5;// + synth2(time) * 0.5;\n\tfloat ec = 0.3, fb = 0.6, et = 3.0 / 9.0, tm = 2.0 / 9.0;\n\n\treturn mx;\n}\n\n// oldschool explosion sound fx\nfloat expl(float tb)\n{\n\t//tb = fract(tb / 4.0) * 0.5;\n\tfloat aa = 20.0;\n\ttb = sqrt(tb * aa) / aa;\n\t\n\tfloat amp = exp(max(tb - 0.15, 0.0) * -10.0);\n\tfloat v = nse(quan(mod(tb, 0.1), 0.0001));\n\tv = dist(v, 4.0) * amp;\n\treturn v;\n}\n\nvec2 synth1_echo(float tb, float time)\n{\n    vec2 v;\n    v = synth(tb, time) * 0.5;// + synth2(time) * 0.5;\n\tfloat ec = 0.4, fb = 0.6, et = 2.0 / 9.0, tm = 2.0 / 9.0;\n\tv += synth(tb, time - et) * ec * vec2(1.0, 0.5); ec *= fb; et += tm;\n\t\n    return v;\n}\n\nvec2 mainSound( in int samp,float time)\n{\n\tvec2 mx = vec2(0.0);\n\t\n\tfloat tb = mod(time * 9.0, 16.0);\n\t\n\t\n\tmx = synth1_echo(tb, time) * 0.8 * smoothstep(0.0, 0.01, abs(mod(time * 9.0, 256.0) + 8.0 - 128.0) - 8.0);\n\t\n    float hi = 1.0;\n    float ki = smoothstep(0.01, 0.0, abs(mod(time * 9.0, 256.0) - 64.0 - 128.0) - 64.0);\n    float s2i = 1.0 - smoothstep(0.01, 0.0, abs(mod(time * 9.0, 256.0) - 64.0 - 128.0) - 64.0);\n    hi = ki;\n    \n    mx += expl(mod(time * 9.0, 64.0) / 4.5) * 0.4 * s2i;\n    \n\tmx += vec2(hat(tb) * 1.5) * hi;\n\t\n\t//mx += dist(fract(tb / 16.0) * sin(ntof(77.0 - 36.0) * pi2 * time), 8.0) * 0.2;\n\t//mx += expl(tb) * 0.5;\n\t\n\tmx += vec2(synth2_echo(time, tb)) * 0.2 * s2i;\n    mx += vec2(synth3(time))* 0.15 * s2i;\n\t\n\t\n\tmx = mix(mx, mx * (1.0 - fract(tb / 4.0) * 0.5), ki);\n\tfloat sc = sin(pi2 * tb) * 0.4 + 0.6;\n\tfloat k = kick(tb, time) * 0.8 * sc * ki;// - kick(tb, time - 0.004) * 0.5 - kick(tb, time - 0.008) * 0.25);\n\t\n\tmx += vec2(k);\n\t\n\t\n\t\n\tmx = dist(mx, 1.00);\n\t\n\treturn vec2(mx);\n}","name":"Sound","description":"","type":"sound"}]}