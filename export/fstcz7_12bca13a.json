{"ver":"0.1","info":{"id":"fstcz7","date":"1653302877","viewed":179,"name":"Mandelbrot to Julia transform","username":"Fraktoler","description":"Mandelbrot Set to Julia Set transformation.\nDefault formula for both is z -> z^2 + c\nwhere z_0 = 0\nc animated from canvas to mouse\n","likes":6,"published":3,"flags":0,"usePreview":0,"tags":["fractal","julia","mandelbrot","complex"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_ITER 256\n#define BAILOUT 256.\n#define PI 3.14159265358979\n\nvec2 toComplex(float zoom, vec2 center, vec2 pixel) {\n    return zoom * (pixel - .5 * iResolution.xy) / iResolution.x + center;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float zoom = 5.;\n    vec2 uv = toComplex(zoom, vec2(0.0), fragCoord);\n    vec2 mouse = toComplex(zoom, vec2(0.0), iMouse.xy);\n    float r, effect = sin(iTime * PI * 0.2);\n    effect *= effect;\n    vec2 c = mix(uv, mouse, effect);\n    vec2 z = uv;\n    int k = 0;\n    while (k < MAX_ITER) {\n        r = dot(z, z);\n        if (r > BAILOUT) break;\n        z = z.x * z + z.y * vec2(-z.y, z.x) + c;\n        k++;\n    }\n    vec3 col = vec3(0.);\n    if (k != MAX_ITER) {\n        float invln = 1. / log(2.);\n        float lnlnb = log(log(BAILOUT));\n        float u = 2. * log(float(k) + invln*lnlnb - invln*log(.5 * log(r)));\n        col = vec3(sin(u), cos(u), 1.0) * 0.5 + 0.5;\n    }\n    fragColor = vec4(col * col,1.);\n}","name":"Image","description":"","type":"image"}]}