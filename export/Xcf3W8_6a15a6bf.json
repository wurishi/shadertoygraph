{"ver":"0.1","info":{"id":"Xcf3W8","date":"1702991470","viewed":49,"name":"Line graph rendering","username":"phodopus","description":"Draw line segments for a graph","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["linerendering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float distanceToLineSegment(vec2 point, vec2 p0, vec2 p1, float radius) {\n    if (point.y < min(p0.y, p1.y) - radius * 2.0 || point.y > max(p0.y, p1.y) + radius * 2.0) {\n       return radius * 2.0;\n    }\n\n    vec2 p0p1 = p1 - p0;\n    float lengthSq = dot(p0p1, p0p1);\n    \n    float alpha = clamp(dot(point - p0, p0p1) / lengthSq, 0.0, 1.0);\n    vec2 projection = p0 + alpha * p0p1;\n    \n    return length(point - projection) - radius;\n}\n\nvec2 data(int i, int dataIndex) {\n    int dataSize = 256;  // iChannelResolution[0].x\n\n    vec2 pos2 = vec2(float(i) / float(dataSize), float(dataIndex) / iChannelResolution[0].y);\n    float y = texture(iChannel0, pos2).x;\n    //float y = float(i) / float(dataSize);\n    //oat y = sin(pos2.x * 10.0) * 0.25 +  sin(pos2.x * 1000.0) * 0.25 + 0.5;\n    return vec2(pos2.x, y) * iResolution.xy;\n}\n\nfloat render(vec2 fragCoord, int dataIndex) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n\n    int dataSize = 256;  // iChannelResolution[0].x\n\n    // Nearest data point in the texture.\n    int i1 = int(round(uv.x * float(dataSize)));\n           \n    float radius = 1.25;\n \n    int halfWidth = int(ceil(float(dataSize) / iResolution.x));\n    float d = radius * 2.0;\n    vec2 p0 = data(i1 - halfWidth, dataIndex);\n    for (int i = i1 - halfWidth; i < i1 + halfWidth; i++) {\n        vec2 p1 = data(i + 1, dataIndex);\n    \n        d = min(d, distanceToLineSegment(fragCoord, p0, p1, radius));\n\n        p0 = p1;\n    }\n\n    return clamp(-d, 0.0, 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    for ( int i = 0; i <128; i++) {\n        float f = render(fragCoord + vec2(0, i - 64) * 0.5, i * 1);\n        if (f <= 0.0) continue;\n        fragColor.rgb *= 1.0 - f;\n        fragColor.rgb += f * vec3(float(i) / 127.0, 1.0 - float(i) / 127.0, f);\n    }\n}\n","name":"Image","description":"","type":"image"}]}