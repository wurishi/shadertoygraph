{"ver":"0.1","info":{"id":"ctlGDB","date":"1672344952","viewed":155,"name":"An other GPT3 generated shader","username":"Effickx","description":"Fully generated with GPT3.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["gpt3"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / max(iResolution.x, iResolution.y);\n    \n    // Rotation angle and zoom factor\n    float a = iTime * 0.5;\n    float zoom = sin(iTime) * 0.5 + 1.0;\n    \n    // Rotozoom matrix\n    mat2 rotZoom = mat2(cos(a), sin(a), -sin(a), cos(a)) * zoom;\n    \n    // Sinusoidal distortion parameters\n    float frequency = 5.0;\n    float t = iTime * 0.25;\n    \n    // Calculate sinusoidal distortion\n    float intensity = sin(iTime * 2.0) / 10.0; // Animate intensity over time\n    vec2 distortion = vec2(sin(frequency * uv.x + t), sin(frequency * uv.y + t)) * intensity;\n    \n    // Apply rotozoom and distortion to the UV coordinates\n    uv += distortion;\n    uv = rotZoom * uv;\n    \n    // Sample the texture\n    vec4 tex = texture(iChannel0, uv);\n    \n    // Output the result\n    fragColor = tex;\n}\n\n\n","name":"Image","description":"","type":"image"}]}