{"ver":"0.1","info":{"id":"ct3fDl","date":"1701704013","viewed":79,"name":"Example Orbit Trap :3","username":"ShelbyLynn","description":"shelbrot","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["fractal","mandelbrot","orbittrap","render","escapetime"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    \n    vec4 color = texture (iChannel0, fragCoord / iChannelResolution[0].xy);\n    color /= color.w;\n    color.xyz = pow((color.xyz), 1. / vec3(2.2));\n\tfragColor = color;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const int LIMIT = 1024;\nconst float PI = 3.141592653589793;\nconst float sq3 = 1.73205080757;\nvec3 hue_b(float x) {\n  float theta = x + PI;\n  float d = 13.0f / 9.0f;\n  float v = (4.0f * PI) / 9.0f;\n  float r = (cos(theta + v - d) + 1.0f) * 0.5f;\n  float b = (sin(theta - v - d) + 1.0f) * 0.5f;\n  float g = (sin(( PI / 4.f) + theta + d) * 2.0f + 2.0f) * 0.25f;\n  return vec3(r, g, b);\n}\n\nint   seed = 1;\nint   rand(void) { seed = seed*0x343fd+0x269ec3; return (seed>>16)&32767; }\nfloat frand(void) { return float(rand())/32767.0; }\nvoid  srand( ivec2 p, int frame, float iTime )\n{\n    int n = frame;\n    n = (n<<13)^n; n=n*(n*n*15731+789221)+1376312589; // by Hugo Elias\n    n += p.y;\n    n = (n<<13)^n; n=n*(n*n*15731+789221)+1376312589;\n    n += p.x;\n    n = (n<<13)^n; n=n*(n*n*15731+789221)+1376312589;\n    seed = n;\n    \n}\nfloat tridist(float f) {\n    float o = f ;\n    float v = o * sqrt(abs(o));\n    v = max(v, -1.f);\n    return v + sign(o);\n\n}\nfloat funct(vec2 z) {\n    return sin(2. * z.x) * sin(z.x + sq3 * z.y) * sin(z.x - sq3 * z.y);\n}\nvec3 mset(vec2 c) {\n    vec2 z = c;\n    int i = 0;\n    float avg = 0.;\n    float mav = -100000.;\n    float miv = 100000.;\n    while (i < LIMIT) {\n        float ev = funct(z);\n        avg += ev;\n        mav = max(mav, ev);\n        miv = min(miv, ev);\n        if (dot(z,z) > 131072.) break;\n        float x = z.x * z.x - z.y * z.y;\n        z.y = 2. * z.x * z.y + c.y;\n        z.x = x + c.x;\n        i += 1;\n    }\n    avg /= float(i+1);\n    if (i == LIMIT) return vec3(0.);\n    float v = (avg - miv) / (mav -miv);\n    return hue_b(v * 10. * log(float(i+1)));\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    srand( ivec2(fragCoord), iFrame, iTime);\n    vec2 offset = vec2(tridist(frand(void)), tridist(frand(void)));\n    vec2 uv = (fragCoord + 0.5 + offset)/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n    uv *= 2.;\n    uv += vec2(-2.25, -1.);\n    vec4 c = vec4(0.);\n    for (int j = 0; j < 1; j++)\n        c += vec4(mset(uv), 1.);\n    if (iTime < 1. && iMouse.z == 0.) \n      c += texture(iChannel0, fragCoord / iResolution.xy);\n    else if (iMouse.z <= 0.)\n      c += texture(iChannel0, fragCoord / iResolution.xy);\n    \n    // Output to screen\n    fragColor = c;\n}","name":"Buffer A","description":"","type":"buffer"}]}