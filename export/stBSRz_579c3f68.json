{"ver":"0.1","info":{"id":"stBSRz","date":"1626904893","viewed":130,"name":"AntiPod - You Smell Like Cherry","username":"Flopine","description":"A shader made as a loop for a track from ThronoCrigger, check out his album!!! \nhttps://thronocrigger.bandcamp.com/album/simulacra","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","animation","isometric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings and FabriceNeyret for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n\n#define PI acos(-1.)\n#define TAU 6.283185\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\n#define BPM (130./60.)\n#define dt(sp,off) fract((iTime+off)*sp)\n#define bouncy(sp,off) sqrt(sin(dt(sp,off)*PI))\n#define animcirc(sp,off) easeInOutCirc(dt(sp,off))\n#define cucubspeed (BPM/2.)\n\nstruct obj\n{\n    float d;\n    vec3 color;\n};\n\nobj min_struct (obj a, obj b)\n{\n    if (a.d<b.d) return a;\n    else return b;\n}\n\n// taken from YX here : https://www.shadertoy.com/view/tdlXW4\n// rough shadertoy approximation of the bonzomatic noise texture\nvec4 texNoise(vec2 uv)\n{\n    float f = 0.;\n    f += texture(iChannel0, uv*.125).r*.5;\n    f += texture(iChannel0, uv*.25).r*.25;\n    f += texture(iChannel0, uv*.5).r*.125;\n    f += texture(iChannel0, uv*1.).r*.125;\n    f=pow(f,1.2);\n    return vec4(f*.45+.05);\n}\n\nfloat easeInOutCirc(float x)\n{\n    return x < 0.5\n        ? (1. - sqrt(1. - pow(2. * x, 2.))) / 2.\n        : (sqrt(1. - pow(-2. * x + 2., 2.)) + 1.) / 2.;\n}\n\nfloat box (vec3 p, vec3 c)\n{return length(max(abs(p)-c,0.));}\n\nobj cucube (vec3 p)\n{\n    float size = 1.,speed = BPM/2.;\n\n    p.xz += 3.;   \n    p.x = abs(p.x)-size*1.1;\n    p.y -= bouncy(speed,0.);\n    p.yz *= rot(animcirc(speed,0.)*PI/2.); \n    float d = box(p,vec3(size));\n    \n    return obj(d,vec3(0.1,0.5,0.9));\n}\n\nobj ground (vec3 p)\n{\n    p.z += (floor(iTime*cucubspeed)+animcirc(cucubspeed,0.))*1.6;\n    p.y += 1.;\n    p.y += sin(p.x*(PI/8.)) * sin(p.x*(PI/6.))*0.8;\n    p.y += cos(p.z*(PI/4.)) * sin(p.z*(PI))*0.1;\n    float dsand = abs(p.y)-0.5;\n    vec3 csand = mix(vec3(0.75,0.8,0.65),vec3(0.6,0.5,0.4),pow(texture(iChannel0,p.xz*0.08).r,7.));\n    obj sand = obj(dsand,clamp(csand,0.,1.));\n    \n    return sand;\n}\n\nobj water (vec3 p)\n{\n    vec3 offset = vec3(-15.+sin(p.z+dt(BPM/4.,0.)*TAU)*0.2,0.,0.); \n    float d = max(abs(p.y)-.5,box(p+offset,vec3(10.,10.,1e10)));\n    return obj(d,vec3(0.4,0.8,0.9));\n}\n\nobj SDF (vec3 p)\n{\n    p.yz *= rot(-atan(1./sqrt(2.)));\n    p.xz *= rot(PI/4.);\n    \n    return min_struct(water(p),min_struct(cucube(p),ground(p)));\n}\n\nvec3 getnorm(vec3 p)\n{\n    vec2 eps = vec2(0.001,0.);\n    return normalize(SDF(p).d-vec3(SDF(p-eps.xyy).d,SDF(p-eps.yxy).d,SDF(p-eps.yyx).d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    uv += texNoise(uv*0.05-dt(0.05,0.)).r*0.1;\n\n    vec3 ro = vec3(uv*5.,-30.),rd=vec3(0.,0.,1.),p=ro,col=vec3(0.),l=normalize(vec3(-1.,2.,1.));\n    \n    obj O;\n    for (float i=0.;i<64.;i++)\n    {\n        O = SDF(p);\n        if (O.d<0.01)\n        {\n            break;\n        }\n        p += O.d*rd;\n    }\n    \n    col = mix(vec3(0.8,0.5,0.4),O.color,dot(getnorm(p),l)*.5+.5);\n\n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}