{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":1,"type":"texture","id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// Gravitation lensing simulation using DF-tracing\n// by Tomkh '20.01.2015\n// http:/moonedit.com/tom\n\n// This is new version of 4tsGDH\n\n//------------------------------------\n// Parameters it's fun to play with:\n\n// Modify lensing strength here:\n#define strength .008\n\n// Radi of celestial objects:\n#define ptrad 0.1\n\n// Lightness of objects:\n#define lightness 4.0\n\n// Total number of objects:\n#define ptcnt 2\n\n// Number of objects in the front:\n#define frontcnt 1\n\n// Approx. distance of objects in the front:\n#define frontdist 4.0\n\n// Approx. distance of objects in the back:\n#define backdist 32.0\n\n// Comment it out to enable fake linear gravitational model\n// (or which one is fake?):\n#define DIST3\n\n// Uncomment to slowdown light speed (0.0 = infinite):\n// In this scene it doesn't change much.\n//#define lightspd 0.3\n\n//------------------------------------\n\nvec3 pt[ptcnt];\n\nvoid setup_scene(float tim)\n{\n    tim *= .5;\n\n    for(int i=0; i<ptcnt; ++i) \n    {\n        float t = tim + float(i)*1.7;\n        \n        // Simple animation of spheres:\n        pt[i].x = cos(t)*.15;\n        pt[i].y = sin(t*1.1)*.5;\n        \n        // Put 6 sphere in front (lens) and 6 in the back:\n        pt[i].z = ((i<frontcnt)?frontdist:backdist) + cos(t*2.1);\n    }\n}\n\nvec4 df(vec3 p)\n{\n    float dmin = 1e32;\n    vec3 n = vec3(0,0,0);\n    for(int i=0; i<ptcnt; ++i) \n    {\n        vec3 dp = pt[i] - p;\n        float d = dot(dp,dp);\n        \n        // Here is the key to lensing effect, approx. gravity field.\n#ifdef DIST3\n        // Divide by dist^3 to get more local effect.\n        n += dp/(d*sqrt(d));\n#else\n        n += dp/d;\n#endif\n        \n        dmin = min(d, dmin);\n    }\n    return vec4(n,sqrt(dmin));\n}\n\nvec4 tex(vec3 p)\n{\n    float dmin = 1e32;\n    vec3 dpmin;\n    for(int i=0; i<ptcnt; ++i) \n    {\n        vec3 dp = pt[i] - p;\n        float d = dot(dp,dp);\n        if (d < dmin) \n        {\n            dmin = d;\n            dpmin = dp;\n        }\n    }\n    float d = sqrt(dmin);\n    return vec4(dpmin/d,d);\n}\n\nvec4 trace(vec3 p, vec3 n)\n{\n    float tim = iTime;\n#ifdef lightspd\n    float spd = lightspd;\n#endif\n    if (iMouse.z > .5) \n    {\n        // Drag mouse in X direction to change time:\n    \ttim = iMouse.x * 20.0 / iResolution.x;\n#ifdef lightspd\n        // Drag mouse in Y direction to change light speed:\n    \tspd = iMouse.y * 1.0 / iResolution.y;\n#endif\n    }\n    \n    setup_scene(tim);\n\n    float falloff = 1.0 - (1.0 - n.z)*16.0;\n    \n    // Lensing strength:\n    float sc = strength;\n    \n    // DF tracing with lens-effect here:\n    vec4 dn;\n    float lit = 0.0;\n    for(int k=0; k<64; ++k)\n    {\n        dn = df(p);\n        float d = dn.w;\n        float surf_dist = d - ptrad;\n        lit += 0.003/(d + 0.1);\n        \n        // Move half the distance only:\n        float f = surf_dist*.5;\n        p += n*f;\n        \n        // Modify ray direction by gravity field:\n        n = normalize(n + dn.xyz*f*sc);\n        \n#ifdef lightspd\n\t\ttim -= f*spd;\n        setup_scene(tim);\n#endif\n    }\n    \n    lit *= sqrt(ptrad)*lightness;\n    \n    // Shading:\n    vec4 norm = tex(p);\n    float shade = max(0.0, 1.0 - (norm.w - ptrad)*256.0);\n    vec4 col = texture(iChannel1, norm.xy*0.1);\n    vec4 bkg = texture(iChannel1, n.xy*2.0)*falloff;\n    return vec4(vec3(lit,lit,lit*0.6) - vec3(0.0,col.x*col.x*0.5,col.x)*shade,1.0)\n         + vec4(bkg.xy,bkg.z*2.0,0.0)*0.2*(1.0-shade);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy - iResolution.xy*0.5) / iResolution.x;\n    fragColor = trace(vec3(0,0,0), normalize(vec3(uv,1)));\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lls3W8","date":"1421774229","viewed":440,"name":"Solar distortion 2","username":"tomkh","description":"An improved version of my prev. attempt (4tsGDH). Now with 1 celestial objects in front (can be changed in params) and stronger, but more local effect (dividing by distance^3 to approx. \"gravity\" field).","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["distancefield","gravitylensing"],"hasliked":0,"parentid":"","parentname":""}}