{"ver":"0.1","info":{"id":"fsfXDr","date":"1618454524","viewed":262,"name":"2D Light Coverage - Line","username":"oneshade","description":"Lighting based on the probability that a light ray hits a pixel. This time its a line (no thickness).","likes":9,"published":3,"flags":0,"usePreview":0,"tags":["2d","line","light","coverage"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n\n    vec2 uv = (fragCoord - center) / iResolution.y * 4.0;\n    vec3 color = vec3(0.0);\n\n    float t1 = iTime * 0.5, t2 = iTime, t3 = iTime * 1.25;\n\n    float c1 = cos(t1), s1 = sin(t1);\n    float c2 = cos(t2), s2 = sin(t2);\n    float c3 = cos(t3), s3 = sin(t3);\n\n    vec2 lineLightA = vec2(c3, s2);\n    vec2 lineLightB = vec2(s3, c1);\n\n    vec2 v1 = uv - lineLightA, v2 = uv - lineLightB;\n    color += acos(dot(v1, v2) / (length(v1) * length(v2))) / 3.14;\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}