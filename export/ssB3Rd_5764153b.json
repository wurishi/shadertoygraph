{"ver":"0.1","info":{"id":"ssB3Rd","date":"1617816968","viewed":298,"name":"Voronoi Noise Edge distance","username":"dnnkeeper","description":"Voronoi with the second pass to find the distance to the closest edge\n","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 generate_feature_pos(vec2 p)\n{\n    vec2 d0 = vec2(127.1, 311.7);\n    vec2 d1 = vec2(269.5, 183.3);\n    return fract(sin(vec2(dot(p, d0), dot(p, d1))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 value = fragCoord.xy/iResolution.xy;\n    value.x *= iResolution.x / iResolution.y;\n    \n    value *= vec2(4,4);\n    \n    float min_dist = 1.0;\n    \n    vec2 baseCell = floor(value);\n\n    //first pass to find the closest cell\n    float minDistToCell = 1.0;\n    vec2 toClosestCell;\n    vec2 closestCell;\n    \n    for(int x1=-1; x1<=1; x1++){\n        for(int y1=-1; y1<=1; y1++){\n            vec2 cell = baseCell + vec2(x1, y1);\n            vec2 cellPosition = cell + generate_feature_pos(cell);\n            vec2 toCell = cellPosition - value;\n            float distToCell = length(toCell);\n            if(distToCell < minDistToCell){\n                minDistToCell = distToCell;\n                closestCell = cell;\n                toClosestCell = toCell;\n            }\n        }\n    }\n\n    //second pass to find the distance to the closest edge\n    float minEdgeDistance = 1.0;\n    for(int x2=-1; x2<=1; x2++){\n        for(int y2=-1; y2<=1; y2++){\n            vec2 cell = baseCell + vec2(x2, y2);\n            vec2 cellPosition = cell + generate_feature_pos(cell);\n            vec2 toCell = cellPosition - value;\n\n            vec2 diffToClosestCell = abs(closestCell - cell);\n            bool isClosestCell = diffToClosestCell.x + diffToClosestCell.y < 0.1;\n            if(!isClosestCell){\n                vec2 toCenter = (toClosestCell + toCell) * 0.5;\n                vec2 cellDifference = normalize(toCell - toClosestCell);\n                float edgeDistance = dot(toCenter, cellDifference);\n                minEdgeDistance = min(minEdgeDistance, edgeDistance);\n            }\n        }\n    }\n\n    fragColor = vec4(minEdgeDistance, minEdgeDistance, minEdgeDistance, 1.0);\n}","name":"Image","description":"","type":"image"}]}