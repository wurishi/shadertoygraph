{"ver":"0.1","info":{"id":"sldXRS","date":"1639347848","viewed":61,"name":"Game board Grid","username":"halex","description":"game board grid for a simple game where two players place pieces. ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["game","grid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n// 12x12 grid, 1.0 is player 1 moves and -1.0 is player 2 moves\nconst float isFilled[144] = float[](\n    1.0,-1.0,1.0,-1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n    -1.0,-1.0,1.0,-1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n    1.0,1.0,-1.0,-1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n    0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n    0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n    0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n    0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n    0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n    0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n    0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n    0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,\n    0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0\n    );\n    \nconst vec3 boardColor = vec3(1.0,1.0,1.0);\nconst vec3 onColor1 = vec3(150.0/255.0,75.0/255.0,0.0);\nconst vec3 onColor2 = vec3(0.0,75.0/255.0,0.0);\n\n\n\n// remap from value from (low1-high1) to (low2-high2)\nfloat remap(float value, float low1, float high1, float low2, float high2) {\n    return low2 + (value - low1) * (high2 - low2) / (high1 - low1);\n}\n\n// fill in colors for game pieces\nvec3 fillColor(vec2 uv) {\n    int x = int(floor(uv.x*12.0));\n    int y = 11-int(floor(uv.y*12.0));\n    \n    float cx = (float(x)+0.5)/12.0;\n    float cy = (float(11-y)+0.5)/12.0;\n    \n    float radius = (uv.x - cx)*(uv.x - cx) + (uv.y - cy)*(uv.y - cy);\n    float maxRadius = 0.001;\n    \n    // create circle at matches\n    if(abs(isFilled[x+y*12]) > 0.01 && radius < maxRadius+maxRadius*0.01) {\n        \n        float percentFromCenter = remap(radius,0.0,maxRadius, 0.0,1.0);\n        \n        // add outline and inner black dot\n        if(percentFromCenter<0.01 || percentFromCenter > 0.9) {\n            return vec3(0.0,0.0,0.0);\n        }\n        \n        return isFilled[x+y*12] > 0.0 ? onColor1 : onColor2;\n    } else {\n        // if not a match output board color\n        return boardColor;\n    }\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col;\n\n    \n    if(abs(fract(uv.x*12.0)) < 0.01 ||  abs(fract(uv.y*12.0)) < 0.01) {\n        // create lines on grid\n        col = vec3(0.0,0.0,0.0);\n    } else {\n        // color in pieces\n        col = fillColor(uv);\n    }\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}