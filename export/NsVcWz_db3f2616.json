{"ver":"0.1","info":{"id":"NsVcWz","date":"1654704874","viewed":111,"name":"Rubik's colours scrolling","username":"lexbailey","description":"Scrolling spinning background of cells in the colours of Rubik's cube","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["rubiks"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float pwm(float l, float p){\n    if (p > l) {return 1.0;}\n    return 0.0;\n}\n\nvec2 pwm(vec2 l, vec2 p){\n    return vec2(pwm(l.x,p.x), pwm(l.y,p.y));\n}\n\nvec3 red = vec3(1.0,0.0,0.0);\nvec3 green = vec3(0.0,1.0,0.0);\nvec3 blue = vec3(0.0,0.0,1.0);\nvec3 orange = vec3(1.0,0.5,0.0);\nvec3 yellow = vec3(1.0,1.0,0.0);\nvec3 white = vec3(1.0,1.0,1.0);\n\nmat2 rotate(float theta){\n    return mat2(\n        cos(theta), -sin(theta)\n        ,sin(theta), cos(theta)\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Zero in centre\n    float ratio = iResolution.x/iResolution.y;\n    vec2 uv = (fragCoord / iResolution.yy) - vec2(ratio*0.5, 0.5);\n    vec2 uv2 = uv;\n    \n\n\n    // gentle motion, 10 seconds per cycle\n    float slowtime = mod(iTime*0.05, 0.5);\n    \n    float slowtime120 = mod(iTime*(1.0/120.0), 1.0);\n    \n    mat2 r = rotate((slowtime120/1.0)*2.0*3.14);\n    \n    uv *= r;\n    uv2 *= r;\n    \n    uv += slowtime;\n    uv2 += slowtime + 1.0;\n    \n    // colour mixing value, for fading into the next cycle\n    float p = tanh(5.0 * 3.14 * (slowtime / 0.5));\n    \n    // square sizes\n    vec2 square = (uv+10.0) * 10.0;\n    vec2 square2 = (uv2+10.0) * 10.0;\n    // border thickness calculation\n    vec2 a = pwm(vec2(0.2,0.2), mod(square, 1.0));\n    vec2 a2 = pwm(vec2(0.2,0.2), mod(square2, 1.0));    \n    // Colour ID calculation\n    ivec2 id = ivec2(floor(square));\n    ivec2 id2 = ivec2(floor(square2));\n    \n    // Select a colour for this cell from the list based on the colour ID\n    vec3[6] colors = vec3[](red, green, blue, orange, yellow, white);\n\n    vec3 col = a.x * a.y *\n    \n    ((colors[\n        ((id.x*23) ^ (id.y)) % 6\n    ] * p)\n    +\n    (colors[\n        ((id2.x*23) ^ (id2.y)) % 6\n    ] * (1.0-p)));\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}