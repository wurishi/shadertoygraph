{"ver":"0.1","info":{"id":"XtV3W1","date":"1474508743","viewed":318,"name":"light propagation exp pii","username":"public_int_i","description":"2d light propagation bouncing experiment.\ncontrols:\nno click - 1 light propagation layer, just simulates shadows to the nearest light.\nclick - move circle and show 4 light propagation layer, simulating shadows to the nearest light and crude bouncing.","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["experiment","light","bounce","propagation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Ethan Alexander Shulman 2016\n\n\n//scene functions(distance & color)\nvec4 sf(vec2 p){ \n    vec4 r;\n    \n    //outer wall\n    vec2 ap = 0.49-abs(p-0.5);\n    r = vec4(.5, .5, .5, min(ap.x,ap.y));\n    \n    //mouse controlled ball\n    float mdst = length(p-iMouse.xy/iResolution.xy)-0.03;\n    if (mdst < r.w) {\n        r = vec4(.3,.4,.85, mdst);\n    }\n    \n    //inner walls\n    vec2 rp = vec2(mod(p.x,0.2)-0.1,p.y-0.5);\n    float wdst = length(max(abs(rp)-vec2(0.003,0.3), 0.));\n    if (wdst < r.w) {\n        r = vec4(1.,.3,.1,wdst);\n    }\n    \n    \n\treturn r;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec4 m = texture(iChannel0, uv),//+,\n        s = sf(uv);\n    if (iMouse.w > 0.) m += texture(iChannel1,uv)+texture(iChannel2,uv)+texture(iChannel3,uv);\n    fragColor = m.w+s*max(0.,1.-max(0.,s.w)*1e3);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Ethan Alexander Shulman 2016\n\nfloat hash(vec3 s) {\n    \n    //Thanks to Shane for the improved random function\n    return fract(cos(dot(s, vec3(7, 157, 113)))*43758.5453);\n\n}\n\n//scene functions(distance & color)\nvec4 sf(vec2 p){ \n    vec4 r;\n    \n    //outer wall\n    vec2 ap = 0.49-abs(p-0.5);\n    r = vec4(.5, .5, .5, min(ap.x,ap.y));\n    \n    //mouse controlled ball\n    float mdst = length(p-iMouse.xy/iResolution.xy)-0.03;\n    if (mdst < r.w) {\n        r = vec4(.3,.4,.85, mdst);\n    }\n    \n    //inner walls\n    vec2 rp = vec2(mod(p.x,0.2)-0.1,p.y-0.5);\n    float wdst = length(max(abs(rp)-vec2(0.003,0.3), 0.));\n    if (wdst < r.w) {\n        r = vec4(1.,.3,.1,wdst);\n    }\n    \n    \n\treturn r;\n}\nvec2 nf(vec2 p) {\n    vec2 NE = vec2(1e-4,0.);\n    return normalize(vec2(sf(p+NE).w-sf(p-NE).w,\n                          sf(p+NE.yx).w-sf(p-NE.yx).w));\n}\n\n//light function\nfloat lf(vec2 p) {\n    vec2 rp = (mod(p*24.,1.)-0.5)/24.,\n         fp = floor(p*24.);\n    \n    if (hash(vec3(fp,length(fp))*.91284) > 0.99) {\n        return length(rp)-0.01;\n    } else {\n        return 0.1;\n    }\n}\nvec2 ld(vec2 p) {\n    vec2 NE = vec2(1e-4,0.);\n    return normalize(vec2(lf(p+NE)-lf(p-NE),\n                          lf(p+NE.yx)-lf(p-NE.yx)));\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame < 30) {\n        //initialize with blank\n        fragColor = vec4(0.);\n        return;\n    }\n    \n    \n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 o = vec4(0.);\n    float mh = 0.;\n    \n    for (int x = -1; x < 2; x++) {\n        for (int y = -1; y < 2; y++) {\n            float len = float(x*x)+float(y*y);\n            if (len < 1.) continue;\n            len = sqrt(len);\n            \n            vec2 nd = vec2(x,y),\n                 nuv = uv-nd/iResolution.xy;\n            vec4 n = texture(iChannel0, nuv);\n            \n            if (n.w > 0. && all(lessThan(abs(nuv-0.5),0.5-0.5/iResolution.xy))) {\n                n.xy = n.xy*2.0-1.0;\n                \n                vec4 s = sf(nuv);\n                if (s.w < 1e-3) n.xy = -nf(nuv)*max(0.,s.w);\n                if (length(n.xy) > 0.) {               \n                    float dp = (1.+dot(normalize(nd),n.xy));\n                                       \n                    mh += dp;\n\t\t\t\t\t\n                    float weight = n.w*dp/(1.+len*5.95);\n                    o.xy += n.xy*weight;//*pow(n.w,;\n                    o.w += weight;\n                }\n            }\n        }\n    }\n    \n    o /= 1.+max(0.,mh-8.)*0.1334;\n    \n    //seed light\n    if (lf(uv) < 0.) {\n        o = vec4(ld(uv),0.,floor(mod(float(iFrame)/60.,3.15)/3.)*5.);\n    }\n    \n    float xylen = length(o.xy);\n    if (xylen > 0. && o.w > 0.) {\n        o.xy = normalize(o.xy)*0.5+0.5;\n    } else {\n        o = vec4(0.);\n    }\n    \n    fragColor = o;\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//Ethan Alexander Shulman 2016\n\n//scene functions(distance & color)\nvec4 sf(vec2 p){ \n    vec4 r;\n    \n    //outer wall\n    vec2 ap = 0.49-abs(p-0.5);\n    r = vec4(.5, .5, .5, min(ap.x,ap.y));\n    \n    //mouse controlled ball\n    float mdst = length(p-iMouse.xy/iResolution.xy)-0.03;\n    if (mdst < r.w) {\n        r = vec4(.3,.4,.85, mdst);\n    }\n    \n    //inner walls\n    vec2 rp = vec2(mod(p.x,0.2)-0.1,p.y-0.5);\n    float wdst = length(max(abs(rp)-vec2(0.003,0.3), 0.));\n    if (wdst < r.w) {\n        r = vec4(1.,.3,.1,wdst);\n    }\n    \n    \n\treturn r;\n}\nvec2 nf(vec2 p) {\n    vec2 NE = vec2(1e-3,0.);\n    return normalize(vec2(sf(p+NE).w-sf(p-NE).w,\n                          sf(p+NE.yx).w-sf(p-NE.yx).w));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame < 30) {\n        //initialize with blank\n        fragColor = vec4(0.);\n        return;\n    }\n    \n    \n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 o = vec4(0.);\n    float mh = 0.,\n         light = 0.;\n    vec2 lightnrm;\n    \n    for (int x = -1; x < 2; x++) {\n        for (int y = -1; y < 2; y++) {\n            float len = float(x*x)+float(y*y);\n            if (len < 1.) continue;\n            len = sqrt(len);\n            \n            vec2 nd = vec2(x,y),\n                 nuv = uv-nd/iResolution.xy;\n            vec4 n = texture(iChannel0, nuv);\n            \n            if (all(lessThan(abs(nuv-0.5),0.5-0.5/iResolution.xy))) {\n                n.xy = n.xy*2.0-1.0;\n                \n                vec4 s = sf(nuv);\n                if (s.w < 1e-3) {\n                    vec2 nrm = nf(nuv);\n                    n.xy = -nrm*max(0.,s.w);\n\t\t\t\t\tlight = 1.;\n                    lightnrm = nrm;\n                }\n                if (n.w > 0. && length(n.xy) > 0.) {                    \n                    float dp = 1.+dot(normalize(nd),normalize(n.xy));\n                                       \n                    mh += dp;\n                    \n                    float weight = n.w*dp/(1.+len*5.95);\n                    o.xy += n.xy*weight;\n                    o.w += weight;\n                }\n            }\n        }\n    }\n    \n    o /= 1.+max(0.,mh-8.)*0.1334;\n    \n    //seed light\n    if (light > 0.) {\n        vec4 lseed = texture(iChannel1, uv);\n        if (lseed.w > 1e-4) {\n            lseed.xy = lseed.xy*2.0-1.0;\n        \to = vec4(reflect(lseed.xy,lightnrm),0.,lseed.w);\n        }\n    }\n    \n    float xylen = length(o.xy);\n    if (xylen > 1e-4 && o.w > 1e-4) {\n        o.xy = normalize(o.xy)*0.5+0.5;\n    } else {\n        o = vec4(0.);\n    }\n    \n    fragColor = o;\n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"//Ethan Alexander Shulman 2016\n\n//scene functions(distance & color)\nvec4 sf(vec2 p){ \n    vec4 r;\n    \n    //outer wall\n    vec2 ap = 0.49-abs(p-0.5);\n    r = vec4(.5, .5, .5, min(ap.x,ap.y));\n    \n    //mouse controlled ball\n    float mdst = length(p-iMouse.xy/iResolution.xy)-0.03;\n    if (mdst < r.w) {\n        r = vec4(.3,.4,.85, mdst);\n    }\n    \n    //inner walls\n    vec2 rp = vec2(mod(p.x,0.2)-0.1,p.y-0.5);\n    float wdst = length(max(abs(rp)-vec2(0.003,0.3), 0.));\n    if (wdst < r.w) {\n        r = vec4(1.,.3,.1,wdst);\n    }\n    \n    \n\treturn r;\n}\nvec2 nf(vec2 p) {\n    vec2 NE = vec2(1e-3,0.);\n    return normalize(vec2(sf(p+NE).w-sf(p-NE).w,\n                          sf(p+NE.yx).w-sf(p-NE.yx).w));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame < 30) {\n        //initialize with blank\n        fragColor = vec4(0.);\n        return;\n    }\n    \n    \n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 o = vec4(0.);\n    float mh = 0.,\n         light = 0.;\n    vec2 lightnrm;\n    \n    for (int x = -1; x < 2; x++) {\n        for (int y = -1; y < 2; y++) {\n            float len = float(x*x)+float(y*y);\n            if (len < 1.) continue;\n            len = sqrt(len);\n            \n            vec2 nd = vec2(x,y),\n                 nuv = uv-nd/iResolution.xy;\n            vec4 n = texture(iChannel0, nuv);\n            \n            if (all(lessThan(abs(nuv-0.5),0.5-0.5/iResolution.xy))) {\n                n.xy = n.xy*2.0-1.0;\n                \n                vec4 s = sf(nuv);\n                if (s.w < 1e-3) {\n                    vec2 nrm = nf(nuv);\n                    n.xy = -nrm*max(0.,s.w);\n\t\t\t\t\tlight = 1.;\n                    lightnrm = nrm;\n                }\n                if (n.w > 0. && length(n.xy) > 0.) {                    \n                    float dp = 1.+dot(normalize(nd),normalize(n.xy));\n                                       \n                    mh += dp;\n                    \n                    float weight = n.w*dp/(1.+len*5.95);\n                    o.xy += n.xy*weight;\n                    o.w += weight;\n                }\n            }\n        }\n    }\n    \n    o /= 1.+max(0.,mh-8.)*0.1334;\n    \n    //seed light\n    if (light > 0.) {\n        vec4 lseed = texture(iChannel1, uv);\n        if (lseed.w > 1e-4) {\n            lseed.xy = lseed.xy*2.0-1.0;\n        \to = vec4(reflect(lseed.xy,lightnrm),0.,lseed.w);\n        }\n    }\n    \n    float xylen = length(o.xy);\n    if (xylen > 0. && o.w > 0.) {\n        o.xy = normalize(o.xy)*0.5+0.5;\n    } else {\n        o = vec4(0.);\n    }\n    \n    fragColor = o;\n}","name":"Buf C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"//Ethan Alexander Shulman 2016\n\n\n//scene functions(distance & color)\nvec4 sf(vec2 p){ \n    vec4 r;\n    \n    //outer wall\n    vec2 ap = 0.49-abs(p-0.5);\n    r = vec4(.5, .5, .5, min(ap.x,ap.y));\n    \n    //mouse controlled ball\n    float mdst = length(p-iMouse.xy/iResolution.xy)-0.03;\n    if (mdst < r.w) {\n        r = vec4(.3,.4,.85, mdst);\n    }\n    \n    //inner walls\n    vec2 rp = vec2(mod(p.x,0.2)-0.1,p.y-0.5);\n    float wdst = length(max(abs(rp)-vec2(0.003,0.3), 0.));\n    if (wdst < r.w) {\n        r = vec4(1.,.3,.1,wdst);\n    }\n    \n    \n\treturn r;\n}\nvec2 nf(vec2 p) {\n    vec2 NE = vec2(1e-3,0.);\n    return normalize(vec2(sf(p+NE).w-sf(p-NE).w,\n                          sf(p+NE.yx).w-sf(p-NE.yx).w));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame < 30) {\n        //initialize with blank\n        fragColor = vec4(0.);\n        return;\n    }\n    \n    \n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 o = vec4(0.);\n    float mh = 0.,\n         light = 0.;\n    vec2 lightnrm;\n    \n    for (int x = -1; x < 2; x++) {\n        for (int y = -1; y < 2; y++) {\n            float len = float(x*x)+float(y*y);\n            if (len < 1.) continue;\n            len = sqrt(len);\n            \n            vec2 nd = vec2(x,y),\n                 nuv = uv-nd/iResolution.xy;\n            vec4 n = texture(iChannel0, nuv);\n            \n            if (all(lessThan(abs(nuv-0.5),0.5-0.5/iResolution.xy))) {\n                n.xy = n.xy*2.0-1.0;\n                \n                vec4 s = sf(nuv);\n                if (s.w < 1e-3) {\n                    vec2 nrm = nf(nuv);\n                    n.xy = -nrm*max(0.,s.w);\n\t\t\t\t\tlight = 1.;\n                    lightnrm = nrm;\n                }\n                if (n.w > 0. && length(n.xy) > 0.) {                    \n                    float dp = 1.+dot(normalize(nd),normalize(n.xy));\n                                       \n                    mh += dp;\n                    \n                    float weight = n.w*dp/(1.+len*5.95);\n                    o.xy += n.xy*weight;\n                    o.w += weight;\n                }\n            }\n        }\n    }\n    \n    o /= 1.+max(0.,mh-8.)*0.1334;\n    \n    //seed light\n    if (light > 0.) {\n        vec4 lseed = texture(iChannel1, uv);\n        if (lseed.w > 1e-4) {\n            lseed.xy = lseed.xy*2.0-1.0;\n        \to = vec4(reflect(lseed.xy,lightnrm),0.,lseed.w);\n        }\n    }\n    \n    float xylen = length(o.xy);\n    if (xylen > 0. && o.w > 0.) {\n        o.xy = normalize(o.xy)*0.5+0.5;\n    } else {\n        o = vec4(0.);\n    }\n    \n    fragColor = o;\n}","name":"Buf D","description":"","type":"buffer"}]}