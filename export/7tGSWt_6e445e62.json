{"ver":"0.1","info":{"id":"7tGSWt","date":"1641523577","viewed":84,"name":"CA testing","username":"zzphantom","description":"cellular automata\nstarting point was iq's GameOfLife https://www.shadertoy.com/view/XstGRf","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["cellularautomata"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://iquilezles.org/articles/gameoflife\n//\n// State based simulation. Buffer A contains the simulated world,\n// and it reads and writes to itself to perform the simulation.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4( texelFetch( iChannel0, ivec2(fragCoord), 0 ).rgb, 1.0 );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/**\n*  The neighborhood of a pixel:\n*  N1 N2 N3\n*  N4 N0 N5\n*  N6 N7 N8\n**/\n\n#define N0 px\n#define N1 px+ivec2(-1, 1)\n#define N2 px+ivec2( 0, 1)\n#define N3 px+ivec2( 1, 1)\n#define N4 px+ivec2(-1, 0)\n#define N5 px+ivec2( 1, 0)\n#define N6 px+ivec2(-1,-1)\n#define N7 px+ivec2( 0,-1)\n#define N8 px+ivec2( 1,-1)\n\nconst float ZEROISH = 0.0001;\n\nconst vec4 ON_COLOR = vec4(1., 0.5, 0.2, 0.);\nconst vec4 OFF_COLOR = vec4(0., 0., 0., 0.);\n\n// there are 2^32 possible rules. This one is interesting.\nconst float[32] RULE = float[32](\n1., 1., 0., 1.,\n0., 0., 0., 0., \n0., 0., 1., 1., \n1., 1., 1., 1., \n1., 1., 0., 1., \n0., 0., 0., 1., \n1., 0., 0., 1., \n1., 1., 1., 0.\n);\n\nbool Cell( in ivec2 p )\n{   \n    // do wrapping\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    \n    // fetch texel\n    return (texelFetch(iChannel0, p, 0 ).x > 0.5 ) ? true : false;\n}\n\nfloat hash1( float n )\n{\n    return fract(sin(n)*138.5453123);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 px = ivec2( fragCoord );\n      \n    /**\n    *  The neighborhood of a pixel:\n    *  N1 N2 N3\n    *  N4 N0 N5\n    *  N6 N7 N8\n    *\n    * This looks at the states of the current pixel and the adjacent pixels\n    * to the left, right, top, and bottom. \n    **/\n    \n    float f = 0.;\n    \n    if      ( Cell(N2) &&  Cell(N4) &&  Cell(N0) &&  Cell(N5) &&  Cell(N7)) f = RULE[0];\n    else if ( Cell(N2) &&  Cell(N4) &&  Cell(N0) &&  Cell(N5) && !Cell(N7)) f = RULE[1];\n    else if ( Cell(N2) &&  Cell(N4) &&  Cell(N0) && !Cell(N5) &&  Cell(N7)) f = RULE[2];\n    else if ( Cell(N2) &&  Cell(N4) &&  Cell(N0) && !Cell(N5) && !Cell(N7)) f = RULE[3];\n    else if ( Cell(N2) &&  Cell(N4) && !Cell(N0) &&  Cell(N5) &&  Cell(N7)) f = RULE[4];\n    else if ( Cell(N2) &&  Cell(N4) && !Cell(N0) &&  Cell(N5) && !Cell(N7)) f = RULE[5];\n    else if ( Cell(N2) &&  Cell(N4) && !Cell(N0) && !Cell(N5) &&  Cell(N7)) f = RULE[6];\n    else if ( Cell(N2) &&  Cell(N4) && !Cell(N0) && !Cell(N5) && !Cell(N7)) f = RULE[7];\n    else if ( Cell(N2) && !Cell(N4) &&  Cell(N0) &&  Cell(N5) &&  Cell(N7)) f = RULE[8];\n    else if ( Cell(N2) && !Cell(N4) &&  Cell(N0) &&  Cell(N5) && !Cell(N7)) f = RULE[9];\n    else if ( Cell(N2) && !Cell(N4) &&  Cell(N0) && !Cell(N5) &&  Cell(N7)) f = RULE[10];\n    else if ( Cell(N2) && !Cell(N4) &&  Cell(N0) && !Cell(N5) && !Cell(N7)) f = RULE[11];\n    else if ( Cell(N2) && !Cell(N4) && !Cell(N0) &&  Cell(N5) &&  Cell(N7)) f = RULE[12];\n    else if ( Cell(N2) && !Cell(N4) && !Cell(N0) &&  Cell(N5) && !Cell(N7)) f = RULE[13];\n    else if ( Cell(N2) && !Cell(N4) && !Cell(N0) && !Cell(N5) &&  Cell(N7)) f = RULE[14];\n    else if ( Cell(N2) && !Cell(N4) && !Cell(N0) && !Cell(N5) && !Cell(N7)) f = RULE[15];\n    else if (!Cell(N2) &&  Cell(N4) &&  Cell(N0) &&  Cell(N5) &&  Cell(N7)) f = RULE[16];\n    else if (!Cell(N2) &&  Cell(N4) &&  Cell(N0) &&  Cell(N5) && !Cell(N7)) f = RULE[17];\n    else if (!Cell(N2) &&  Cell(N4) &&  Cell(N0) && !Cell(N5) &&  Cell(N7)) f = RULE[18];\n    else if (!Cell(N2) &&  Cell(N4) &&  Cell(N0) && !Cell(N5) && !Cell(N7)) f = RULE[19];\n    else if (!Cell(N2) &&  Cell(N4) && !Cell(N0) &&  Cell(N5) &&  Cell(N7)) f = RULE[20];\n    else if (!Cell(N2) &&  Cell(N4) && !Cell(N0) &&  Cell(N5) && !Cell(N7)) f = RULE[21];\n    else if (!Cell(N2) &&  Cell(N4) && !Cell(N0) && !Cell(N5) &&  Cell(N7)) f = RULE[22];\n    else if (!Cell(N2) &&  Cell(N4) && !Cell(N0) && !Cell(N5) && !Cell(N7)) f = RULE[23];\n    else if (!Cell(N2) && !Cell(N4) &&  Cell(N0) &&  Cell(N5) &&  Cell(N7)) f = RULE[24];\n    else if (!Cell(N2) && !Cell(N4) &&  Cell(N0) &&  Cell(N5) && !Cell(N7)) f = RULE[25];\n    else if (!Cell(N2) && !Cell(N4) &&  Cell(N0) && !Cell(N5) &&  Cell(N7)) f = RULE[26];\n    else if (!Cell(N2) && !Cell(N4) &&  Cell(N0) && !Cell(N5) && !Cell(N7)) f = RULE[27];\n    else if (!Cell(N2) && !Cell(N4) && !Cell(N0) &&  Cell(N5) &&  Cell(N7)) f = RULE[28];\n    else if (!Cell(N2) && !Cell(N4) && !Cell(N0) &&  Cell(N5) && !Cell(N7)) f = RULE[29];\n    else if (!Cell(N2) && !Cell(N4) && !Cell(N0) && !Cell(N5) &&  Cell(N7)) f = RULE[30];\n    else if (!Cell(N2) && !Cell(N4) && !Cell(N0) && !Cell(N5) && !Cell(N7)) f = RULE[31];\n    \n\n    if( iFrame==0 ) f = step(0.5, hash1(fragCoord.x*13.0+hash1(fragCoord.y*71.1)));\n    \n\tfragColor = f > ZEROISH ? ON_COLOR : OFF_COLOR;\n\n}","name":"Buffer A","description":"","type":"buffer"}]}