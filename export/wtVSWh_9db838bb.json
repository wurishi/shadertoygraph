{"ver":"0.1","info":{"id":"wtVSWh","date":"1582638779","viewed":86,"name":"Caterpillar_after AOC_Tutorial","username":"JohnnyRainbow81","description":"First public Shader here. Maybe they will get less unspectacular some day.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","blacknwhite"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Sphere(vec3 p, float radius) {\n\treturn length(p)-radius;\n}\n\nfloat smin( float a, float b, float k )\n{\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min( a, b ) - h*h*k*(1.0/4.0);\n}\n\nfloat GetDist(vec3 p) {\n    float time = iTime*.4;\n    float d;\n    vec3 p2 = p;\n    float floorDist = p2.y+(sin(p.z+sin(iTime)))*cos(p2.x)*.1+length(p)*.1;\n    d = floorDist;\n    for(int i = 0; i < 15; i++) {\n        float size = float(i)*.1;\n\t\tfloat sphereDist= Sphere(p-vec3(sin(time*6.)*.4,cos(time*6.)*5.+2.,-80.+fract(-time*.15)*180.), size);\n    \td = smin(sphereDist, d, .8);\n        time +=.04;\n    }\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat d = 0.;\n    for(int i = 0; i < 100; i++) {\n    \tfloat step = GetDist(ro + rd*d);\n        d += step*.5;\n        if(abs(d) < 0.0001 || d > 140.) break;\n    }\n    return d;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(0.001, 0.);\n    vec3 normal = d - vec3(GetDist(p-e.xyy),\n                           GetDist(p-e.yxy),\n                           GetDist(p-e.yyx));\n    normal = normalize(normal);\n    return normal;\n}\n\nfloat GetLight(vec3 p){\n\tvec3 light = vec3(1.,7.,7.);\n    vec3 normal = GetNormal(p);\n    vec3 lightVec = normalize(light-p);\n    float dif = max(0., dot(normal, lightVec))*(1.-max(0.,length(light-p)*.02));\n    float shadow = RayMarch(p+normal*.002, lightVec);\n    if(shadow < length(light-p)) dif *=clamp(shadow*.2, 0.,1.);\n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float time = iTime;\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    mouse -= .5;\n    vec3 col = vec3(0.);\n   \n    vec3 ro = vec3(4.*cos(mouse.x*6.),1.+mouse.y,4.*sin(mouse.x*6.));\n    vec3 lookAt = vec3(0.,1.,3.);\n    float zoom = 1.;\n    vec3 forward = normalize(lookAt - ro);\n    vec3 right = normalize(cross(forward, vec3(0.,1.,0.)));\n    vec3 up = normalize(cross(right,forward));\n    vec3 center = ro + forward * zoom;\n    vec3 intersect = center + right*uv.x + up*uv.y;\n    vec3 rd = intersect - ro;\n    \n    float d = RayMarch(ro, rd);\n    float dif = GetLight(ro + rd *d);\n    // Time varying pixel color\n    col = vec3(dif);\n\t//col = vec3(st, 1.);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}