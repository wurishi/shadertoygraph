{"ver":"0.1","info":{"id":"4cycWt","date":"1732520297","viewed":84,"name":"joern shenanigans","username":"Crystlfox","description":" joern belongs to justanoval (https://justanoval.com/)","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["joern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n\nfloat sdring( in vec3 p, in float r1, in float r2 )\n{\n    float d = abs((length(p.xy) - r1))-r2;\n    vec2 w = vec2( d, abs(p.z) - 0.1 );\n    return min(max(w.x,w.y),0.0) + length(max(w,0.0));\n}\n\n\nfloat sdRoundCone( vec3 p, float r1, float r2, float h )\n{\n  // sampling independent computations (only depend on shape)\n  float b = (r1-r2)/h;\n  float a = sqrt(1.0-b*b);\n\n  // sampling dependant computations\n  vec2 q = vec2( length(p.xz), p.y );\n  float k = dot(q,vec2(-b,a));\n  if( k<0.0 ) return length(q) - r1;\n  if( k>a*h ) return length(q-vec2(0.0,h)) - r2;\n  return dot(q, vec2(a,b) ) - r1;\n}\n\nfloat sdCappedTorus( vec3 p, vec2 sc, float ra, float rb)\n{\n  p.x = abs(p.x);\n  float k = (sc.y*p.x>sc.x*p.y) ? dot(p.xy,sc) : length(p.xy);\n  return sqrt( dot(p,p) + ra*ra - 2.0*ra*k ) - rb;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdVerticalCapsule( vec3 p, float h, float r )\n{\n  p.y -= clamp( p.y, 0.0, h );\n  return length( p ) - r;\n}\n\nmat2 rot2d(float angle){\n  float s = sin(angle);\n  float c = cos(angle);\n  return mat2(c,-s, s, c);\n}\n\nfloat sdjoernw(vec3 p, float s){\n    p /= s;\n    p.zy *= rot2d(1.5708);\n    float sdf = sdVerticalCapsule(p, 0.08, 0.1);\n    sdf = min(sdf, sdSphere(p + (vec3(0.05, -.1, -.1)), 0.02));\n    sdf = min(sdf, sdSphere(p + (vec3(-0.05, -.1, -.1)), 0.02));\n    sdf = min(sdf, sdSphere(p + (vec3(0.05, 0.01, -.1)), 0.02));\n    sdf = min(sdf, sdSphere(p + (vec3(-0.05, 0.01, -.1)), 0.02));\n    return s*sdf;\n}\n\nfloat sdjoernb(vec3 p, float s){\n    p /= s;\n    p.zy *= rot2d(1.5708);\n    float sdf = sdSphere(p + (vec3(0.035, 0.09, -0.02)), 0.01);\n    sdf = min(sdf, sdSphere(p + (vec3(-0.035, 0.09, -0.02)), 0.01));\n    p.yz *= rot2d(-1.508);\n    \n    sdf = min(sdf, sdRoundCone(p + (vec3(0.09, 0.02, -0.02)), 0.022 ,0.035,0.045));\n    sdf = min(sdf, sdRoundCone(p + (vec3(-0.09, 0.02, -0.02)), 0.022 ,0.035,0.045));\n   \n\tsdf = min(sdf, sdCappedTorus(p + (vec3(0.01, -0.05, -0.1)), vec2(.5,-0.2) ,0.01,0.0005));\n    sdf = min(sdf, sdCappedTorus(p + (vec3(-0.01, -0.05, -0.1)), vec2(.5,-0.2) ,0.01,0.0005));\n    \n    sdf = min(sdf, sdVerticalCapsule(p + (vec3(0.0, -0.04, -0.1)),0.015,0.001));\n    return s*sdf;\n}\n\nvec4 map(vec3 p, float ps)\n{\n    vec3 glow = vec3(0.0);\n\tvec3 q = p;\n    \n\tq = (fract(p*vec3(0.75,0,0.75)) - 0.5)*vec3(1.75+p.y,p.y,1.75+p.y);\n    \n\tfloat flrlvl = sin(p.x*0.8)*0.1+sin(p.z)*0.1 * length(p * 0.1) +step(0.2,abs(sin(p.z*5.0)*0.1+sin(p.z)*0.1+p.x+1.3))/10.0;\n    \n    float obj1 = 100000.0;\n    \n\tvec3 pos2 = vec3(0,0.0,0);\n\tfloat obj2 = sdSphere(q - pos2, (0.5));\n    \n    float obj3 = 100000.0;\n    \n    float obj4 = 100000.0;\n    \n\tq = p;\n    \n\tvec3 pos1 = vec3(-1.25,sin(iTime*2.0)*0.12+0.1,9.7);\n\tvec3 vp = q - pos1;\n    \n    if (iTime >= 19.8 && iTime <=20.0){\n        vp.z -= (iTime - 19.8) *0.1;\n        vp.y -= (iTime - 19.8) *0.1;\n    }\n    if (iTime >= 20.0 && iTime <= 40.0){\n        vp.z -= (iTime - 20.0) *iTime*0.1;\n        vp.y -= (iTime - 20.0) *iTime*0.1;\n    }\n    \n    if (iTime >= 40.0){\n        vp.z -= (iTime + 40.0);\n        vp.y -= (iTime + 40.0);\n    }\n    \n\tvp.zy *= rot2d(cos(iTime*1.5)*0.5);\n\tvp.xy *= rot2d(sin(iTime*1.5));\n    \n    obj1 = sdjoernw(vp, 1.0);\n    \n    obj3 = sdjoernb(vp, 1.0);\n    \n    vp = p-vec3(-1.25,100.0,115.0);\n    \n    vp.xz *= rot2d(iTime*0.5);\n    vp.yz *= rot2d(sin(iTime*1.7)*0.2);\n    \n    obj1 = min(obj1,sdjoernw(vp-vec3(0.0,0.0,-3.0), 50.0));\n    obj3 = min(obj3,sdjoernb(vp-vec3(0.0,0.0,-3.0), 50.0));\n    \n    vp.yz *= rot2d(1.3-sin((iTime-0.002)*1.7)*0.2);\n    vp.xz *= rot2d(0.01);\n    \n    if (sin(p.x*100.0-1.06)*sin(p.y*100.0-0.87)*sin(p.z*100.0-0.32)<0.5){\n    obj1 = min(obj1,sdring(vp-vec3(0.0,0.0,-3.0), 10.0, 2.0));\n    }\n\n\n    if (ps<0.5){\n    q = fract(p*0.5) - 0.5;\n    if(p.y>10.0 && sin(p.x)*sin(p.y+0.45)*sin(p.z+0.12)>0.5){\n    obj4 = min(obj4, sdSphere(q + vec3(-0.05, 0.01, -.1), 0.01));\n    }\n    }\n   \n    float flr = p.y + .25 - flrlvl;\n    \n\tfloat m = (min(min(min(min(obj2, obj4), obj3), obj1), flr));\n    \n    if (obj1 <= 5.0){\n        glow += (5.0 - obj1) * vec3(0.1,0.2,0.4) * 0.2;\n    }\n\n    if (obj1 < 0.3){\n        glow += (0.3 - obj1) * vec3(1.0,1.1,1.3) * 10.0;\n    }\n\n    if (obj4 < 0.01){\n        glow += (0.01 - obj4) * vec3(1.0,1.1,1.2) * 10.0;\n    }\n    \n    if (m<=0.1){\n\tif (m==obj1) {\n    \treturn vec4(m, (glow+vec3(1.7, 1.9, 2.5)));\n\t}\n    \n    if (m == obj4) {\n    \treturn vec4(m, (glow+vec3(1.7, 1.9, 2.5)));\n\t}\n    if (m==flr && (step(0.2,abs(sin(p.z*5.0)*0.1+sin(p.z)*0.1+p.x+1.3))/10.0) < 0.1) {\n    \treturn vec4(m, (glow+vec3(0.5, 0.2, 0.1)));\n\t}\n    if (m==obj3) {\n    \treturn vec4(m, (glow * 0.1+vec3(-0.8, -0.6, -0.4)));\n\t}\n    return vec4(m, ((glow)+vec3(0.05, 0.3, 0.1)));\n    }\n    return vec4(m, glow*2.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\tvec3 ro = vec3(-1.25,0,iTime);\n    \n\tif (iTime >= 7.0){\n    \tro = vec3(-1.25,0,7.0 + (2.0 - 2.0/(iTime-6.0)));\n\t}\n    \n    ro.y = 0.1+sin(iTime)*0.07;\n    \n    if (iTime >= 20.0 && iTime <= 40.0){\n        float bye = iTime-20.0;\n        ro.z += bye*iTime*0.1;\n        ro.y += bye*iTime*0.1;\n    }\n    \n    if (iTime >= 40.0 && iTime <= 50.0){\n        ro.z += (iTime + 40.0);\n        ro.y += (iTime + 40.0);\n    }\n    \n    if (iTime >= 50.0){\n        ro.z += (90.0)+(2.0 - 2.0/(iTime-49.0));\n        ro.y += (90.0)+(2.0 - 2.0/(iTime-49.0));\n    }\n    \n\tvec2 uv = (fragCoord *2.0 - iResolution.xy) / iResolution.y;\n    uv *= 1.0+0.1*length(uv);\n\tvec2 m = -(iMouse.xy *2.0 - iResolution.xy) / iResolution.y *2.0;\n    \n\tvec3 rd = normalize(vec3(uv ,1));\n    \n\trd.yz *= rot2d(m.y);\n\trd.xz *= rot2d(m.x);\n\trd.xy *= rot2d(sin(iTime*1.5)*0.03);\n    \n\tvec3 col = vec3(0.0,0.0,0.0);\n\tvec3 tcl = vec3(0.1,0.2,0.3);\n    \n\tfloat t = 0.0;\n\tvec3 p = ro + rd * t;\n\tfloat fog = 0.0;\n\tfor( int i = 0; i < 80; i++){\n    \tvec3 p = ro + rd * t;\n        p.y += t*0.005*t;\n   \t \n    \tvec4 mp = map(p,0.0);\n   \t \n    \ttcl = tcl + mp.yzw * 0.5;\n   \t \n    \tfloat d = mp.x;\n    \n     \tt += d + (sin(uv.x*iResolution.x*0.25)+sin(uv.y*iResolution.y*0.25)+sin(t))/500.0;\n    \t \n     \tfog = 0.05/max((p.y*t)+0.3,0.0);\n    \t \n     \tif (d < 0.01 || t > 100.0){\n        tcl = tcl*0.2 + (mp.yzw * 0.7);\n        float i_f = float(i);\n        col=vec3(i_f/t*0.05);\n       \tbreak;\n     \t}\n    \t \n \t}\n\t \n \tfloat t2 = 0.05 + (sin(uv.x*iResolution.x*0.5)+sin(uv.y*iResolution.y*0.5))/100.0;\n \tro = ro + rd * t;\n \trd = normalize(vec3(0.1,0.5,0.2));\n\t \n\t \n\tfloat lig = 0.0;\n\tif (t * 0.3< 0.5+(sin(uv.x*iResolution.x*0.75)+sin(uv.y*iResolution.y*0.75))/100.0){\n    \tfor( int i = 0; i < 40; i++){\n    \tvec3 p = ro + rd * t2;\n   \t    \n        vec4 mp = map(p,1.0);\n        \n    \tfloat d = mp.x;\n    \n     \tt2 += d + (sin(uv.x*iResolution.x*0.25)+sin(uv.y*iResolution.y*0.25)+sin(t2))/100.0;\n     \tif (d < 0.05){\n       \tlig = (0.0);\n       \tbreak;\n     \t}\n     \tif (t2 > 50.0){\n         \tlig = (1.0);\n         \tbreak;\n     \t}\n    \t \n \t}\n\t}\n    \n\tlig += 0.1;\n    \n\tcol = vec3(lig*tcl.x-fog, lig*tcl.y-fog+col.y , lig*tcl.z-fog+col.z);\n    \n\tfragColor =vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}