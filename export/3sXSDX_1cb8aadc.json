{"ver":"0.1","info":{"id":"3sXSDX","date":"1552618636","viewed":95,"name":"First Shader - Bouncing Ball","username":"indathlon","description":"First attempt","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["firstattempt"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 DrawCircle(vec2 uv, vec2 pos, float radius, float blur)\n{\n    //changes color\n    \n    vec3 col;\n    //smoothstep for drawing the circle and blurring the edges.\n    col = vec3(smoothstep(radius + blur, radius, distance(uv, vec2(pos.x, pos.y))),\n               smoothstep(radius + blur, radius, distance(uv, vec2(pos.x, pos.y))) \n               * abs(sin(iTime*2.0))/3.0, 0.0);\n    return col;\n}\n\nvec3 DrawBlurryCircle(vec2 uv, vec2 pos, float radius, float blur)\n{\n    //doesn't change color\n    \n    vec3 col;\n    //smoothstep for drawing the circle and blurring the edges.\n    col = vec3(smoothstep(radius + blur, radius, distance(uv, vec2(pos.x, pos.y))),\n               smoothstep(radius + blur, radius, distance(uv, vec2(pos.x, pos.y))) \n               , 0.0);\n    return col;\n}\n\nvec3 Sparks(vec2 uv, vec2 pos, float radius, float blur)\n{\n    vec3 col;\n    \n    col = vec3(smoothstep(radius + blur, radius, distance(uv, vec2(pos.x, pos.y))),\n               smoothstep(radius + blur, radius, distance(uv, vec2(pos.x, pos.y))) \n               * sin(iTime*6.0 + 1.0)/2.0, 0.0);\n    \n    \n    return col;\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //correcting for aspect ratio \n    float aspectRatio = iResolution.x/iResolution.y;\n    uv.x *= aspectRatio;\n    \n    //blackfill \n\tvec3 col = vec3(.0);\n    \n    //passing absolute sin output as position for bounce effect.\n    col = DrawCircle(uv, vec2(aspectRatio/2.0, (abs(sin(iTime*2.0)))/1.5 + 0.1), .1, .02);\n    //drawing a blurred circle on top for glow \n    col += DrawBlurryCircle(uv, vec2(aspectRatio/2.0, (abs(sin(iTime*2.0)))/1.5 + 0.1), .01, .15);\n\n    \n    //sparks\n    vec2 sparkPos;\n    //col += Sparks(uv, vec2(aspectRatio/2.0 + sin(iTime*3.1)/2.0,0.5 + cos(iTime*3.1)/9.0), 0.001, 0.03);\n    \n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec4 someFunction( vec4 a, float b )\n{\n    return a+b;\n}\n","name":"Common","description":"","type":"common"}]}