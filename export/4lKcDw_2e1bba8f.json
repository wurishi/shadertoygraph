{"ver":"0.1","info":{"id":"4lKcDw","date":"1536586834","viewed":116,"name":"Beginning Video Shader Thing","username":"Shadeyboi","description":"It's a sine line with blur","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["beginner"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Circle(vec2 uv, vec2 p, float r, float blur) {\n    \n    float d = length(uv - p); //distance, -p remaps that to be origin\n    float c = smoothstep(r, r-blur, d); //blurs the edges\n    \n    return c;\n}\n\nfloat Band(float t, float start, float end, float blur){\n    float step1 = smoothstep(start-blur, start+blur, t); //goes from 0 to one, creates left side\n    float step2 = smoothstep(end+blur, end-blur, t); //inverted b/c would be zero to one\n    return step1*step2; //gives both sides/the intersection\n}\n\nfloat Rect(vec2 uv, float left, float right, float bottom, float top, float blur){\n    float band1 = Band(uv.x, left, right, blur); //defines left and right\n    float band2 = Band(uv.y, bottom, top, blur); //defines top and bottom\n    \n    return band1*band2;\n}\n\n\nfloat Smiley(vec2 uv, vec2 p, float size){//Lets us copy smilies\n    \n    uv -= p; //translates coordinate system\n    uv /= size; //scaling coordinate system, works inversely\n    \n    float mask = Circle(uv, vec2(0.), .4, .01);\n    \n    mask -= Circle(uv, vec2(-.09, .2), .07, .01); //The two eyes being subtracted\n    mask -= Circle(uv, vec2(.09, .2), .07, .01);\n    \n    float mouth = Circle(uv, vec2(0., 0.), .3, .02); //vec2 in method removes need for another variable\n    mouth -= Circle(uv, vec2(0., 0.1), .3, .02);\n    \n    mask -= mouth; //Subtracting the circle makes it black, technically 2 more circles\n    \n    return mask;\n}\n\nfloat remap01(float a, float b, float t){\n \treturn (t-a) / (b-a);   \n}\n\nfloat remap(float a, float b, float c, float d, float t){\n    return remap01(a, b, t) * (d-c) + c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy; // 0 to 1.\n    \n    float t = iTime;\n    \n    uv -= .5; //Center of the screen, not the origin, bottom left.\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 col = vec3(0.); //color, not column\n    \n\tfloat mask = 0.;\n    \n\tfloat x = uv.x;\n    \n    float m = sin(t+x*8.)*.1;\n    float y = uv.y-m;\n    \n    float blur = remap(-.5, .5, .01, .25, x);\n    blur = pow(blur*4., 3.);\n    mask = Rect(vec2(x, y), -.5, .5, -.1, .1, blur);\n    \n    col = vec3(1., 1., 1.)*mask; //makes the yellow\n\n    // Output to screen\n    fragColor = vec4(col, 1.0); //putting col in here changes the color\n}","name":"Image","description":"","type":"image"}]}