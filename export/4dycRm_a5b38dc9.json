{"ver":"0.1","info":{"id":"4dycRm","date":"1521503543","viewed":232,"name":"music spectrum","username":"arpin","description":"Different frequency ranges from bass to highs are shown in the background. Background lightness reacts to beat. Use mouse to zoom.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["music","visualizer","reference"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","previewfilepath":"/media/ap/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//------------------------------------------------------------------------\n// HSL color space\n// Mimics the implementation in THREE.js 0.90.0\n//------------------------------------------------------------------------\nfloat hue2rgb(float p, float q, float t) {\n    if ( t < 0. ) t += 1.;\n    if ( t > 1. ) t -= 1.;\n    if ( t < 1. / 6. ) return p + ( q - p ) * 6. * t;\n    if ( t < 1. / 2. ) return q;\n    if ( t < 2. / 3. ) return p + ( q - p ) * 6. * ( 2. / 3. - t );\n    return p;\n}\nvec3 hsl2rgb(vec3 hsl) {\n    // h,s,l ranges are in 0.0 - 1.0\n    float h = mod(hsl.x, 1.);\n    float s = clamp(hsl.y, 0., 1.);\n    float l = clamp(hsl.z, 0., 1.);\n    if (s == 0.) \n        return vec3(l);\n    else {\n        float p, q;\n        if (l <= 0.5) {\n            p = l * ( 1. + s );\n        }\n        else {\n            p = l + s - ( l * s );\n        }\n        q = ( 2. * l ) - p;\n        return vec3(\n        \thue2rgb(q, p, h + 1. / 3.),\n            hue2rgb(q, p, h),\n            hue2rgb(q, p, h - 1. / 3.)\n        );\n    }\n}\n\n\n// +-----------------+------------------+\n// | Frequency Range | Frequency Values |\n// +-----------------+------------------+\n// | Sub-bass        | 20 to 60 Hz      |\n// | Bass            | 60 to 250 Hz     |\n// | Low midrange    | 250 to 500 Hz    | \n// | Midrange        | 500 Hz to 2 kHz  |\n// | Upper midrange  | 2 to 4 kHz       | \n// | Presence        | 4 to 6 kHz       |\n// | Brilliance      | 6 to 20 kHz      |\n// +-----------------+------------------+\n// https://www.teachmeaudio.com/mixing/techniques/audio-spectrum\n#define SA_MIN \t\t\t0.\n#define SA_MAX \t\t\t11000.\n#define SA_SUB_BASS \t20./(SA_MAX-SA_MIN)\n#define SA_BASS \t\t60./(SA_MAX-SA_MIN)\n#define SA_LOW_MID \t\t250./(SA_MAX-SA_MIN)\n#define SA_MID \t\t\t500./(SA_MAX-SA_MIN)\n#define SA_HI_MID \t\t2000./(SA_MAX-SA_MIN)\n#define SA_PRESENCE \t4000./(SA_MAX-SA_MIN)\n#define SA_BRILLIANCE\t6000./(SA_MAX-SA_MIN)\n\n\n#define SAMPLECOUNT 200\n\nfloat sampleRange(float start, float end) {\n    float stepsize = (end - start) / float(SAMPLECOUNT);\n\tfloat intensity = 0.;\n    for(int i = 0; i < SAMPLECOUNT; i += 1) {\n\t\tintensity += texture(iChannel0, vec2(start + float(i)*stepsize, 0.0)).r;\n\t}\n\tintensity /= float(SAMPLECOUNT);\n    return intensity;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n    float xadjust = 1.-iMouse.x/iResolution.x;\n    \n    // Sample loudness from frequency map [0,1]\n    float intensity = texture(iChannel0, vec2(uv.x*xadjust, 0.0)).r;\n    float beat = sampleRange(SA_SUB_BASS, SA_LOW_MID);\n    float low = sampleRange(0., SA_LOW_MID);\n    float mid = sampleRange(SA_LOW_MID, SA_PRESENCE);\n    float hi = sampleRange(SA_PRESENCE, 1.);\n\n    // Color different spectrum regions\n    float bghue = sin(iTime)*0.1;\n    float rot = .33;\n    if (uv.x*xadjust > SA_BRILLIANCE) \t\tbghue += rot;\n\telse if (uv.x*xadjust > SA_PRESENCE) \tbghue += rot*2.;\n    else if (uv.x*xadjust > SA_HI_MID) \t\tbghue += rot*3.;\n    else if (uv.x*xadjust > SA_MID) \t\tbghue += rot*4.;\n    else if (uv.x*xadjust > SA_LOW_MID) \tbghue += rot*5.;\n    else if (uv.x*xadjust > SA_BASS) \t\tbghue += rot*6.;\n    else if (uv.x*xadjust > SA_SUB_BASS) \tbghue += rot*7.;\n\n    vec3 col;\n    if (intensity > uv.y) {\n    \tcol = hsl2rgb(vec3(0.6 - intensity*.6, 1., .5));\n    }\n    else {\n        float f = clamp((uv.y-intensity) / (1.-intensity), .0, 1.);\n        col = hsl2rgb(vec3(bghue, .1+.5*hi, beat*(1.-f)*.5));\n    }\n    fragColor = vec4(col,1.);\n}\n","name":"Image","description":"","type":"image"}]}