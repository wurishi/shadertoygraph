{"ver":"0.1","info":{"id":"ds2SWz","date":"1670177593","viewed":86,"name":"fancy Shadertoy shader","username":"ChatGPTGeneratedGems","description":"see https://www.shadertoy.com/view/dsjSDR","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["test","fun","ai","gpt"],"hasliked":0,"parentid":"ds2SDR","parentname":"example shadertoy planet shader"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// one of the first valid shaders generated by prompt: \"example Shadertoy planet shader\" on chat.openai.com/chat\n//\n// just for testing purposes and/or inspiration\n//\n// #####################################################################################################################\n\n\n\n\n// Global variables\n\nuniform vec2 mouse;\n\n// Swirl function\nfloat swirl(vec2 p, vec2 c, float r, float t)\n{\n    // Calculate the distance from the center\n    float d = length(p - c);\n\n    // Calculate the angle between the point and the center\n    float a = atan((p.y - c.y) / (p.x - c.x));\n\n    // Calculate the swirl factor\n    float s = r / d;\n\n    // Calculate the new position\n    vec2 newPos = vec2(p.x * cos(s + t) - p.y * sin(s + t), p.x * sin(s + t) + p.y * cos(s + t));\n\n    return length(newPos - c);\n}\n\n// Main function\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Calculate the relative position of the fragment\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    float time = iTime;\n\n    // Calculate the swirling noise at this position\n    float n = swirl(uv, vec2(0.5, 0.5), 0.2, time);\n\n    // Use the noise value to calculate the color\n    vec3 color = vec3(0.5 + 0.5 * sin(n * 10.0 + time), 0.5 + 0.5 * cos(n * 10.0 + time), 0.5 - 0.5 * sin(n * 10.0 + time));\n\n    // Set the fragment color\n    fragColor = vec4(color, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}