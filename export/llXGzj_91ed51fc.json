{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// ALL TAKEN FROM IQs AMAZING SITE / TUTORIALS / SHADERS:\n// https://iquilezles.org/www/index.htm\n// https://www.shadertoy.com/user/iq\n\n// Specific shaders stolen from\n// ROT FUNCTIONS  : https://www.shadertoy.com/view/XsSSzG\n\n\nconst float MAX_TRACE_DISTANCE = 100.0;           // max trace distance\nconst float INTERSECTION_PRECISION = .000001;        // precision of the intersection\nconst int NUM_OF_TRACE_STEPS = 200;\n\t\n\nconst float pi = 3.14159;\n\nvec4 spherePos[8];\nvec3 sphereRot[8];\n\n\n// ROTATION FUNCTIONS TAKEN FROM\n//https://www.shadertoy.com/view/XsSSzG\nmat3 xrotate(float t) {\n\treturn mat3(1.0, 0.0, 0.0,\n                0.0, cos(t), -sin(t),\n                0.0, sin(t), cos(t));\n}\n\nmat3 yrotate(float t) {\n\treturn mat3(cos(t), 0.0, -sin(t),\n                0.0, 1.0, 0.0,\n                sin(t), 0.0, cos(t));\n}\n\nmat3 zrotate(float t) {\n    return mat3(cos(t), -sin(t), 0.0,\n                sin(t), cos(t), 0.0,\n                0.0, 0.0, 1.0);\n}\n\n\nvec4 texCube( sampler2D sam, in vec3 p, in vec3 n, in float k )\n{\n\tvec4 x = texture( sam, p.yz *.4);\n\tvec4 y = texture( sam, p.zx *.4);\n\tvec4 z = texture( sam, p.xy *.4 );\n    vec3 w = pow( abs(n), vec3(k) );\n\treturn (x*w.x + y*w.y + z*w.z) / (w.x+w.y+w.z);\n}\n\n\n\nfloat sdPlane( vec3 p )\n{\n\n    //float f = fbm( p.xy );\n    //f *= fbm( p.yz );\n    //f = 5. * smoothstep( abs(f) , 0.4 , 0.8 );\n\treturn p.y;// + sin( p.x * 1. * p.z ) * .002; //- (f * .4); //(abs( f) * .3)/ max( 1. , pow( length( p ), 1.));\n\n}\n\n\nfloat sdSphere( vec3 p, float s, float offset )\n{\n    \n    p.x += 0.03*sin( 10.0*p.y + iTime + offset);\n    p.y += 0.03*sin( 10.0*p.z + iTime + offset);\n    p.z += 0.03*sin( 10.0*p.x + iTime + offset);\n  \n   // p = normalize( p );\n\n    float d1 = length(p);// - 1.0*smoothstep(0.0,2.0,iTime);;\n    return d1 - s;\t\n\n   \n  //return length(p)-s;\n}\n\n\nmat3 fullRotate( vec3 r ){\n \n   return xrotate( r.x ) * yrotate( r.y ) * zrotate( r.z );\n    \n}\n\nfloat rotatedPlane( vec3 p , vec3 rot ){\n    \n    vec3 q = fullRotate( rot ) * p;\n    return sdPlane( q );\n\n    \n}\n\n\n//----\n// Camera Stuffs\n//----\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in float mouseX )\n{\n    float an = 0.3 + 10.0*mouseX;\n\tcamPos = vec3(3.5*sin(an),1.0,3.5*cos(an));\n    camTar = vec3(0.0,0.0,0.0);\n}\n\n\n// checks to see which intersection is closer\n// and makes the y of the vec2 be the proper id\nvec2 opU( vec2 d1, vec2 d2 ){\n    \n\treturn (d1.x<d2.x) ? d1 : d2;\n    \n}\n\nfloat nPlane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\n\n//--------------------------------\n// Modelling \n//--------------------------------\nvec2 map( vec3 pos ){  \n    \n   \tvec2 res = vec2( 100000. , -1000. );\n    \n   /* vec2 res2 = vec2( rotatedPlane( (pos - vec3( 0., -2. , 0.)) , vec3( .5 , 0. , 0. )) ,  0.);\n   \tres = opU( res ,  res2 );\n    \n    res2 = vec2( rotatedPlane( (pos - vec3( 0., -2. , 0.)) , vec3( -.5 , 0. , 0. )) ,  0.);\n   \tres = opU( res ,  res2 );\n    \n    res2 = vec2( rotatedPlane( (pos - vec3( 0., -2. , 0.)) , vec3( 0. , 0. , -0.5 )) ,  0.);\n   \tres = opU( res ,  res2 );*/\n    \n    vec2 res2 = vec2( nPlane( (pos - vec3( 0., 2. , 0.)) , vec4(0. , -1. , 0., 0. ) ),  0.);\n   \tres = opU( res ,  res2 );\n    \n    res2 = vec2( nPlane( (pos - vec3( 0., -1. , 0.)) , vec4(0. , 1. , 0., 0. ) ),  0.);\n   \tres = opU( res ,  res2 );\n    \n    res2 = vec2( nPlane( (pos - vec3( 4., 0. , 0.)) , vec4(-1. , 0. , 0., 0. ) ),  0.);\n   \tres = opU( res ,  res2 );\n    res2 = vec2( nPlane( (pos - vec3( -4., 0. , 0.)) , vec4(1. , 0. , 0., 0. ) ),  0.);\n   \tres = opU( res ,  res2 );\n    \n    res2 = vec2( nPlane( (pos - vec3( 0., 0. , 4.)) , vec4(0. , 0. , -1., 0. ) ),  0.);\n   \tres = opU( res ,  res2 );\n    res2 = vec2( nPlane( (pos - vec3( 0., 0. , -4.)) , vec4(0. , 0. , 1., 0. ) ),  0.);\n   \tres = opU( res ,  res2 );\n    \n    \n    //vec2 res = vec2( 10. , -1. );\n \t\n    res2 = vec2( sdSphere( (pos - vec3( 0.)) , .5 , 1. ) ,  1. );\n   \tres = opU( res ,  res2 );\n    \n    res2 = vec2( sdSphere( (pos - vec3( 1.)) , .7 , 2.) ,  2.);\n   \tres = opU( res ,  res2 );\n    \n    res2 = vec2( sdSphere( (pos - vec3( -1. , 1. , -1.)) , .7 , 3.) ,  3.);\n   \tres = opU( res ,  res2 );\n    \n    res2 = vec2( sdSphere( (pos - vec3( -1. , 0. , 1.)) , .7 , 4.) ,  4.);\n   \tres = opU( res ,  res2 );\n    \n    res2 = vec2( sdSphere( (pos - vec3( 1. , 0. , -1.)) , .7 , 5.) ,  5.);\n   \tres = opU( res ,  res2 );\n    \n    res2 = vec2( sdSphere( (pos - vec3( -.5 , .5 , -.5)) , .6, 6. ) ,  2.);\n   \tres = opU( res ,  res2 );\n    \n    res2 = vec2( sdSphere( (pos - vec3( .5 , .5 , -1.)) , .5 , 7.) ,  4.);\n   \tres = opU( res ,  res2 );\n    \n    res2 = vec2( sdSphere( (pos - vec3( 2. , 1. , .0)) , .4 , 8.) ,  4.);\n   \tres = opU( res ,  res2 );\n    \n   \treturn res;\n    \n}\n\n\n// Calculates our intersection by stepping through the\n// map function, and returning both the object hit and the distance\n// it is hit at\nvec2 calcIntersection( in vec3 ro, in vec3 rd ){\n\n    \n    float h =  INTERSECTION_PRECISION*2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    float id = -1.;\n    \n    for( int i=0; i< NUM_OF_TRACE_STEPS ; i++ ){\n        \n        if( h < INTERSECTION_PRECISION || t > MAX_TRACE_DISTANCE ) break;\n\t   \tvec2 m = map( ro+rd*t );\n        h = m.x;\n        t += h;\n        id = m.y;\n        \n    }\n\n    if( t < MAX_TRACE_DISTANCE ) res = t;\n    if( t > MAX_TRACE_DISTANCE ) id =-1.0;\n    \n    return vec2( res , id );\n    \n}\n\n// Calculates the normal by taking a very small distance,\n// remapping the function, and getting normal for that\nvec3 calcNormal( in vec3 pos ){\n    \n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<50; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 20.*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.612*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.5;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\nvec3 ads(  vec3 pos , vec3 norm , vec3 eye , vec3 lightPos, vec3 ambC , vec3 difC , vec3 specC ){\n    \n    vec3 lightDir = normalize( pos - lightPos);\n    vec3 refl = normalize(reflect( lightDir , norm ));\n    \n    float match = max( 0. , -dot( lightDir , norm ));\n    float reflMatch = max( 0. , -dot( refl , eye ));\n    \n    vec3 col = ambC;\n       \n    vec3 pat = texCube( iChannel0, 0.5*pos, norm, 4.0 ).xyz;\n   \tcol += difC *pow( match, 3.);\n    \n    col *= pat;\n    col += specC * pow( reflMatch, 100.);\n    \n\n    return col;\n    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    \n\n    for( int i =0; i < 8; i++ ){\n        \n        float x = 1. * cos(iTime *.13 * (float( i )+2.));\n        float y = 1. * sin(iTime * .075 * (float( i )+4.));\n        float z = 1. * sin(iTime * .1 * (float( i )+3.3));\n        float r = .1 * ( sin( iTime * .1  *( float( i) +1.))+2.);\n        \n        spherePos[i] = vec4( x , y , z , r );\n        \n        \n        sphereRot[i] = vec3( \n            (sin( iTime  * (float(i)+2.) * .4)) ,\n            (sin( iTime  * (float(i)+8.2) * .2)) ,\n            (sin( iTime  * (float(i)+3.6) * .01))\n        );\n\n    }\n\n    \n    \n    \n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n    //vec2 m = vec2( 1.1 +( sin( iTime * 0.4 ) + sin( iTime * 0.01 )) * .04 , 0. );\n\n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n    \n    // camera movement\n    vec3 ro, ta;\n    doCamera( ro, ta, iTime, m.x );\n\n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  // 0.0 is the camera roll\n    \n\t// create view ray\n    //float lense = 1.5 + abs(sin( iTime * .01 ) + sin( iTime * .0315 )));\n    float lense = 2.;\n\tvec3 rd = normalize( camMat * vec3(p.xy, lense )); // 2.0 is the lens length\n    \n    vec2 res = calcIntersection( ro , rd  );\n    \n    \n  //  vec3 pat = texCube( iChannel0, 0.5*pos, nor, 10.0 ).xyz;\n    vec3 col = vec3( 0. );//vec3( .8 , .8 , .8 ); \n    \n    \n    vec3 colors[5];\n    colors[0] = vec3( 1. , 0. , 0. );\n    colors[1] = vec3( 1. , .6 , 0. );\n    colors[2] = vec3( 1. , .5 , 5. );\n    colors[3] = vec3( 1. , .3 , 0.5 );\n    colors[4] = vec3( 1. , 0. , 5. );\n   \n    \n    vec3 light = vec3( 0. , 4. , 0. );\n    \n    //vec3 col = texCube( iChannel0, ro + rd * 1. , rd , 1.0 ).xyz;\n    // If we have hit something lets get real!\n    if( res.y > -.5 ){\n\n    \tvec3 pos = ro + rd * res.x;\n    \tvec3 nor = calcNormal( pos );\n        \n        //nor = normalize( nor );\n        \n        vec3 lightDir = normalize(light - pos);\n        vec3 lightRefl = reflect( lightDir , nor );\n        float match = max( 0. , dot ( rd , lightRefl ));\n        \n        vec3 c = vec3(0.);\n        for( int i = 0; i < 5; i++ ){\n            if( i ==int( res.y )-1 ){\n        \tc = colors[ i ];\n            }\n        }\n       \n        \n        col = ads( pos , nor , rd , light , vec3( .01 ) , c*.3 ,vec3( 1. , .6 , 0. ) );\n        \n        if( int(res.y) == 0 ){\n            c = vec3( 1. , .6 , 0. );\n        \tcol = ads( pos , nor , rd , light , vec3( .0 ) , c*.3 , vec3( 1. , .6 , 0. ) );\n        }\n        \n        vec3 refl = reflect( rd , nor );\n        vec2 res2 = calcIntersection( pos + refl * .03 , refl  );\n      \n        \n        \n        //col += vec3( res2.y / 3. , 0. , 0. );\n        \n       // col = nor * .5 + .5;\n        if( res2.y > -.5 ){\n            \n            vec3 pos2 = pos + refl * res2.x;\n    \t\tvec3 nor2 = calcNormal( pos2 );\n            \n            vec3 lightDir = normalize(light - pos2);\n        \tvec3 lightRefl = reflect( lightDir , nor2 );\n        \tfloat match = max( 0. , dot ( refl , lightRefl ));\n            \n          \n            vec3 c = vec3(0.);\n            for( int i = 0; i < 5; i++ ){\n                if( i ==int( res2.y )-1 ){\n                c = colors[ i ];\n                }\n            }\n\n            if( int(res2.y) == 0 ){\n                c = vec3( 1. , .6 , 0. );\n                col += ads( pos2 , nor2 , refl , light , vec3( .0 ) , c*.3 , vec3( 1. , .6 , 0. ) );\n            }else{\n                col += ads( pos2 , nor2 , refl , light , vec3( .01 ) , c*.3 ,vec3( 1. , .6 , 0. ) );   \n            }\n\n\n          //  col = vec3( 0. , 1. , 0. );\n            \n            vec3 refl2 = reflect( nor , nor2 );\n        \tvec2 res3 = calcIntersection( pos2  + refl2 *  .03 , refl2  );\n            \n            if( res3.y > -.5 ){\n                vec3 pos3 = pos + refl2 * res3.x;\n                vec3 nor3 = calcNormal( pos3 );\n                \n                vec3 lightDir = normalize(light - pos3);\n        \t\tvec3 lightRefl = reflect( lightDir , nor3 );\n        \t\tfloat match = max( 0. , dot ( refl2 , lightRefl ));\n                \n                vec3 c = vec3(0.);\n                for( int i = 0; i < 5; i++ ){\n                    if( i ==int( res3.y )-1 ){\n                    c = colors[ i ];\n                    }\n                }\n                \n                \n                if( int(res3.y) == 0 ){\n                \tc = vec3( 1. , .6 , 0. );\n                    col += ads( pos3 , nor3 , refl2 , light , vec3( .0 ) , c*.3 , vec3( 1. , .6 , 0. ) );\n                }else{\n                    col += ads( pos3 , nor3 , refl , light , vec3( .01 ) , c*.3 ,vec3( 1. , .6 , 0. ) );   \n                }\n\n \n\n              //  col = vec3( nor3 * .5 + .5 );\n                \n            }\n            \n            \n        }\n        \n        \n        //col = nor * .5 + .5;\n\n\n    }\n    \n    // apply gamma correction\n    col = pow( col, vec3(0.4545) );\n\n    fragColor = vec4( col , 1. );\n    \n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"llXGzj","date":"1423509817","viewed":487,"name":"SHADE A DAY ( 2 / 9 /2015 )","username":"cabbibo","description":"trying to get refections down. needless to say its failing.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raycast","reflections"],"hasliked":0,"parentid":"","parentname":""}}