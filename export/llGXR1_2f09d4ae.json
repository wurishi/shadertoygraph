{"ver":"0.1","info":{"id":"llGXR1","date":"1482784484","viewed":110,"name":"Necromurlok - Last Raymarch","username":"Necromurlok","description":"Raymarching","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define FOV 90.0\n#define PI 3.141592\n#define DEG2RAD (PI / 180.0)\n\n#define MIN_DIST 0.1\n#define MAX_DIST 10.0\n\n#define EPSILON 0.0001\n\n#define MAX_MARCHING_STEPS 256\n\n//#define TEXTILE 0.25\n#define TEXTILE 0.1\n\n#define TEXHEIGHT 0.5\n\n#define SCENE_ITERATIONS 50\n#define SCENE_SCALE 0.005\n\n\n\nfloat sphere(vec3 sp, float radius)\n{\n//    return length(sp) - radius + (sin(sp.x * 40.0) * 0.0125) + (sin(sp.y * 40.0) * 0.0125);\n//    return length(sp) - radius + ((atan(sp.x * 8.0, sp.z) / PI) * 0.6);\n    return length(sp) - radius;\n}\n\n\nvec4 texColor = vec4(0.0);\n\nfloat scene(vec3 sp)\n{\n    vec2 timeAnim = vec2(iTime * 0.1, 0.0);\n    float texTile = (sin(iTime) + 1.0) * TEXTILE;\n    float ret = sphere(sp, 2.0);\n    vec2 mUV = (vec2(atan(sp.x, -sp.z) / PI, atan(sp.y, -sp.z) / PI)) * TEXTILE;\n//    texColor = (texture(iChannel0, mUV + timeAnim.xy) + texture(iChannel0, mUV + timeAnim.yx)) * 0.5;\n    texColor = (texture(iChannel0, (sp.xy * texTile) + timeAnim.xy) + texture(iChannel0, (sp.zy * texTile) + timeAnim.yx)) * 0.5;\n    \n    ret += length(texColor) * TEXHEIGHT;\n    \n    return ret;\n}\n\n\n/**\n * Using the gradient of the SDF, estimate the normal on the surface at point p.\n */\nvec3 estimateNormal(vec3 p) {\n    return normalize(vec3(\n        scene(vec3(p.x + EPSILON, p.y, p.z)) - scene(vec3(p.x - EPSILON, p.y, p.z)),\n        scene(vec3(p.x, p.y + EPSILON, p.z)) - scene(vec3(p.x, p.y - EPSILON, p.z)),\n        scene(vec3(p.x, p.y, p.z  + EPSILON)) - scene(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n\n/**\n * Lighting contribution of a single point light source via Phong illumination.\n * \n * The vec3 returned is the RGB color of the light's contribution.\n *\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n * lightPos: the position of the light\n * lightIntensity: color/intensity of the light\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\nvec3 phongContribForLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 N, vec3 eye,\n                          vec3 lightPos, vec3 lightIntensity) {\n//    vec3 N = estimateNormal(p);\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye - p);\n    vec3 R = normalize(reflect(-L, N));\n    \n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n    \n    if (dotLN < 0.0) {\n        // Light not visible from this point on the surface\n        return vec3(0.0, 0.0, 0.0);\n    } \n    \n    if (dotRV < 0.0) {\n        // Light reflection in opposite direction as viewer, apply only diffuse\n        // component\n        return lightIntensity * (k_d * dotLN);\n    }\n    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));\n}\n\n\n\nfloat shadow(vec3 ro, vec3 rd, vec3 lpos){\n    float t = 0.5;\n    float d = 0.0;\n    float shadow = 1.0;\n    for(int iter = 0; iter < 1000; iter++){\n        d = scene(ro + rd * t);\n        if(d < 0.0001){\n            return 0.0;\n        }\n        if(t > length(ro - lpos) - 0.5){\n            break;\n        }\n        shadow = min(shadow, 128.0 * d / t);\n        t += d;\n    }\n    return shadow;\n}\n\n\n/**\n * Lighting via Phong illumination.\n * \n * The vec3 returned is the RGB color of that point after lighting is applied.\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\n\n\nvec3 phongIllumination(vec3 p, vec3 eye)\n{\n    vec3 K_a = vec3(0.3, 0.3, 0.3);\n    vec3 K_d = vec3(0.6, 0.6, 0.6);\n    vec3 K_s = vec3(1.0, 1.0, 1.0);\n    float shininess = 50.0;\n\n    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * K_a;\n    \n    vec3 light1Pos = vec3(0.0, 0.0, 10.0);\n    vec3 light1Intensity = vec3(1.0);\n\n    \n    vec3 N = estimateNormal(p);\n    color += phongContribForLight(K_d, K_s, shininess, p, N, eye, vec3(0.0, 0.0, 10.0), vec3(1.0, 1.0, 0.25) * light1Intensity);\n    color += phongContribForLight(K_d, K_s, shininess, p, N, eye, vec3(0.0, 0.0, -10.0), vec3(1.0, 0.25, 0.25) * light1Intensity);\n    color += phongContribForLight(K_d, K_s, shininess, p, N, eye, vec3(10.0, 0.0, 0.0), vec3(0.25, 1.0, 0.25) * light1Intensity);\n    color += phongContribForLight(K_d, K_s, shininess, p, N, eye, vec3(-10.0, 0.0, 0.0), vec3(0.25, 0.25, 1.0) * light1Intensity);\n    \n    float fresnel = 1.0 - dot(N, normalize(eye - p));\n//    color += vec3(0.75, 1.0, 0.5) * pow(fresnel, 1.1);\n    color += vec3(0.75, 0.0, 0.75) * pow(fresnel, 1.1);\n        \n    return color;\n}\n\n\nfloat rayCast(vec3 eye, vec3 dir, float near, float far)\n{\n    float depth = near;\n    for (int c = 0; c < MAX_MARCHING_STEPS; c++)\n    {\n        float dist = scene(eye + dir * depth);\n        if (dist < EPSILON) {\n\t\t\treturn depth;\n        }\n        depth += dist;\n        if (depth > far) {\n            return far;\n        }\n    }\n    \n    return far;\n}\n\n\nmat3 fromEuler(vec3 ang) {\n\tvec2 a1 = vec2(sin(ang.x),cos(ang.x));\n    vec2 a2 = vec2(sin(ang.y),cos(ang.y));\n    vec2 a3 = vec2(sin(ang.z),cos(ang.z));\n    mat3 m;\n    m[0] = vec3(a1.y*a3.y+a1.x*a2.x*a3.x,a1.y*a2.x*a3.x+a3.y*a1.x,-a2.y*a3.x);\n\tm[1] = vec3(-a2.y*a1.x,a1.y*a2.y,a2.x);\n\tm[2] = vec3(a3.y*a1.x*a2.x+a1.y*a3.x,a1.x*a3.x-a1.y*a3.y*a2.x,a2.y*a3.y);\n\treturn m;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy - iResolution.xy * 0.5) / iResolution.yy;\n    vec3 rayDir = normalize(vec3(uv, -1.0 / tan(FOV * DEG2RAD / 2.0)));\n    vec3 eye = vec3(0.0, 0.0, 4.0);\n\n    mat3 rot = fromEuler(vec3(iTime * 0.15, 0.0, iTime * 0.25));\n    eye = rot * eye;\n    \n    vec3 color = vec3(0.0);\n    for (int it = 0; it < SCENE_ITERATIONS; it++)\n    {\n    \n        vec3 itRay = rot * normalize(vec3(rayDir.xy * (1.0 - (float(it) * SCENE_SCALE)), rayDir.z));\n\n        float dist = rayCast(eye, itRay, MIN_DIST, MAX_DIST);\n\n        if (dist > MAX_DIST - EPSILON) {\n            continue;\n//          fragColor = vec4(0.0);\n//          return;\n        }\n\n        // The closest point on the surface to the eyepoint along the view ray\n        vec3 p = eye + dist * itRay;\n\n        float pr = pow(float(it) / float(SCENE_ITERATIONS), 2.0);\n        color += (phongIllumination(p, eye) * texColor.xyz) * (1.0 - pr) * 2.0;\n    }\n    color /= float(SCENE_ITERATIONS);\n\n    \n\tfragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}