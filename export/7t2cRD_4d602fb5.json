{"ver":"0.1","info":{"id":"7t2cRD","date":"1649318484","viewed":36,"name":"TP4 Durand Hugo","username":"Hugo_DRD","description":"TP4/5 Lifgraphique ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["tp4"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Texturing\n// Eric Galin\n\nconst float View = 2800.0;  // View distance\nconst float Epsilon = 0.01; // Marching epsilon\nconst int Steps = 400;      // Number of steps\n\n// Lipschitz constant\nconst float K=1.0;\n\n// Structure for objects\n// v : Field value\n// i : Texture index\nstruct V {\n    float v; \n    int i;\n};\n\n// Structure for texture\n// c : Color\n// s : Specular\nstruct T {\nvec3 c;\nfloat s;\n};\n\n// Terrain -----------------------------------------------------------------------------------------------\n\n// Terrain heightfield\n// x : Position in the plane\n\nfloat Terrain( in vec2 p)//fonction 2D  terrain de montagne/falaise\n{\n    float t = Fbm2(p,70.0,150.0,7)*smoothstep(-220.0,20.0,p.x); // création smoothstep pour falaise et surface plate plage par la suite \n    return t;\n} \n\nfloat Ile(in vec2 p)//\n{\n    return Fbm2(p,70.0,10.0,8);\n}\n\n// Implicit surface defining the terrain\n// p : Point\nV ImplicitTerrain(in vec3 p,int index)//application en 3D du terrain ci-dessus\n{\n    float z = Terrain( p.xy );\n    float h = (p.z - z)/7.0; \n    return V(h,index);\n}\n\nV ImplicitIle(in vec3 p, int index)\n{\n    float z = Ile( p.xy );\n    float h = (p.z - z)/2.0; \n    return V(h,index);\n}\n\n// Primitive functions -----------------------------------------------------------------------------------\n\n// Sphere \n// p : Point\n// c : Center \n// r : Radius\nfloat Sphere(vec3 p, vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\nV Sphere(vec3 p, vec3 c,float r,int index)\n{\n  return V(length(p-c)-r,index);\n}\n\n// Sphere \n// p : point\n// n : Normal of plane\n// o : Point on plane\nfloat Plane(vec3 p, vec3 n, vec3 o)\n{\n    return dot((p-o),n);\n}\n\nfloat box(vec3 p, vec3 r)\n{\n    vec3 q = abs(p)-r;\n    float d = length( max (q,0.0)) + min( max( q.x, max(q.y,q.z)), 0.0);\n    return d;\n}\n\n//Tore\n// p : point\n// c : centre du tore\n// r : rayon hauteur\n// R : rayon externe\n// n : Normal du Tore\nfloat SDFTore(vec3 p, vec3 c,vec3 n, float r, float R){\n    float pc = length(p-c);\n    float pq = abs(dot(p-c,n));\n    float qc = sqrt( pc*pc - pq*pq );\n    if(qc<R){\n        return pq-r;\n    }else{\n        return sqrt( pq*pq + (qc -R)*(qc -R))-r;\n    }\n}\n\nfloat cylinder (vec3 a, vec3 b, float r, vec3 p)\n{\n    float aq = dot((p-a), (b-a)/length(b-a));\n    float l = sqrt(dot(p-a,p-a)- aq*aq);\n    return l-r;\n}\n\n\nfloat Capsule(vec3 p, vec3 a, vec3 b, float r)\n{\n    vec3 pa = p-a;\n    vec3 ba = b-a;\n    float h = clamp(dot(pa,ba)/dot(ba,ba),0.0,1.0);\n    return length(pa-ba*h)-r;\n}\n\nvec3 translate(vec3 a, vec3 b)\n{\n    return a-b;\n}\n\nmat2 rotate(float a)\n{\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\n// Intersection, preserve the index of first object\n// a, b : field function of left and right sub-trees\nfloat Intersection(float a,float b)\n{\n    return max(a,b);\n}\n\nfloat Union(float a,float b)\n{\n    return min(a,b);\n}\n\nfloat Differance(float a, float b)\n{\n    return max(a, -b);\n}\n\nV Intersection(V a,V b)\n{\n    if (a.v>b.v)\n    {\n        return V(a.v,a.i);\n    }\n    else \n    {\n        return V(b.v,a.i);\n    }\n}\n\nV Union(V a,V b)\n{\n    if (a.v<b.v)\n        return V(a.v,a.i);\n    else \n    {\n        return V(b.v,b.i);\n    }\n}\n\n\nfloat cylinder2(vec3 p, float r, float t)\n{\n    vec3 a = vec3(0.0,0.0,0.0);\n    vec3 b = vec3(0.0,0.0,t);\n    float cyl = cylinder(a,b,r,p);\n    float cyl1 = Differance(cyl, Plane(p, vec3(0.0, 0.0,-1.0), vec3(0.0, 0.0, t+1.0)));\n    float cyl2 = Differance(cyl, Plane(p, vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)));\n    return Intersection(cyl1, cyl2);\n}\n\nV Moulin(vec3 p, int index)\n{\n    float base = cylinder2(p,20.0,75.0);\n    \n    vec3 rota = translate(p, vec3(-12.0,175.0,120.0));\n    \n    rota.xz = rota.xz * rotate(300.0);\n    \n    vec3 d = translate(rota, vec3(-60.0, -175.0, 10.0));\n    \n    float axe = cylinder2(d,7.0, 16.0);\n    \n    d.xy = d.xy * rotate(iTime);\n    \n    float palme = box(d, vec3(40.0,10.0,1.0));\n    \n    float palme2 = box(d,vec3(10.0,40.0,1.0));\n    \n    return V(Union(base,Union(axe,Union(palme2,palme))),index);\n    \n}\n\n// Scene --------------------------------------------------------------------------\n\n// Potential field of the object\n// p : point\nV Object(vec3 p)\n{\n  V u = Intersection(\n      ImplicitTerrain(p,2),\n      Sphere(p,vec3(0.0,0.0,0.0),450.0,2));\n  u = Union(u,Intersection(ImplicitIle(p-vec3(-300.0,150.0,150.0),1),Sphere(p,vec3(-300.0,150.0,150.0),50.0,1)));\n    \n  vec3 p2 = translate(p,vec3(-300.0,150.0,150.0));\n  \n  u = Union(u,Moulin(p2,3));\n  \n  return u;\n}\n\n// Analysis of the scalar field --------------------------------------------------------------------------\n\n// Calculate object normal\n// p : point\nvec3 ObjectNormal(in vec3 p )\n{\n  float eps = 0.001;\n  vec3 n;\n    float v = Object(p).v;\n  n.x = Object( vec3(p.x+eps, p.y, p.z) ).v - v;\n  n.y = Object( vec3(p.x, p.y+eps, p.z) ).v - v;\n  n.z = Object( vec3(p.x, p.y, p.z+eps) ).v - v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance \n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o, vec3 u, float e,out bool h,out int s)\n{\n  h = false;\n\n    // Start at the origin\n    float t=0.0;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = Object(p).v;\n    // Hit object\n      if (v < 0.0)\n      {\n          s=i;\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += max(Epsilon,v/K);\n      // Escape marched too far away\n      if (t>e)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n// Shading and lighting ---------------------------------------------------------------------------\n\nvec3 TextureRock(in vec3 p)\n{\n  return mix(vec3(0.92,0.91,0.90),vec3(0.74,0.72,0.72),Fbm(p/50.0));   \n}\n\nvec3 TextureWater(in vec3 p)\n{\n  return vec3(0.52,0.75,0.91);   \n}\n\nvec3 TextureBorder(in vec3 p)\n{\n    return vec3(0.25,0.24,0.24);   \n}\n\nvec3 TexturePlage(in vec3 p)\n{\n    return vec3(0.878431373,0.803921569,0.662745098);\n}\n\n\nvec3 TextureHerbe(in vec3 p)\n{\n    return mix(vec3(0.22745098,0.615686275,0.137254902),vec3(0.0,0.501960784,0.0),Fbm(p/5.0));\n    //return mix(vec3(0.1,0.5,0.1),vec3(0.0,0.1,0.0),Fbm(p/5.0));\n}\n\nvec3 TextureNeige(in vec3 p)\n{\n    return vec3(1.0,1.0,1.0);\n}\n\nvec3 TextureIle(in vec3 p)\n{\n    return vec3(0.34,0.16,0.0);\n}\n\n\n\n// Compute color \n// p : Point\n// n : Normal\nvec3 Color(in vec3 p,in vec3 n)\n{\n    \n    V q = Object(p);\n    \n    if (p.z<=0.0 && q.i ==2) // Test de la zone à remplir\n    {\n        return TextureWater(p);\n    }\n    \n    vec3 col0 = TextureWater(p);\n    \n    if (p.z > 0.0 && p.z <= 15.0 && q.i ==2) // Test de la zone à remplir\n    {\n        float plage = smoothstep(0.0, 10.0, p.z + 2.0*Noise(p/2.0));//fondu de l'herbe avec la texture plage\n        col0 = mix(col0, TexturePlage(p/10.0), plage);\n        return col0;\n    }\n    \n    vec3 col = TexturePlage(p);\t// Texture du sable\n    \n    if (p.z > 15.0 && p.z <= 150.0 && q.i ==2) // Test de la zone à remplir\n    {\n        float herbe = smoothstep(10.0, 40.0, p.z + 2.0*Noise(p/2.0));//fondu de l'herbe avec la texture plage\n        col = mix(col, TextureHerbe(p/10.0), herbe);\n        return col;\n    }\n    \n    vec3 col1 = TextureHerbe(p); // Texture de l'herbe\n    \n    if (p.z > 150.0 && p.z <= 350.0 && q.i ==2) // Test de la zone à remplir\n    {\n        float neige = smoothstep(200.0, 145.0, p.z + 2.0*Noise(p/2.0)); //fondu de l'herbe avec la texture plage\n        col1 = mix(TextureNeige(p/10.0),col1 , neige);\n        return col1;\n    }\n    \n    if(q.i == 1)\n    {\n        return TexturePlage(p);\n    }\n    \n    //return TextureRock(p);\n}\n\n// Rendering \n// ro, rd : Ray origin and direction\n// pip : Picture in picture boolean\nvec4 Render( in vec3 ro, in vec3 rd, bool pip )\n{\n    // Light direction\n    vec3 light1 = normalize( vec3(-0.8,-0.3,0.4) );\n   \n    \n\tvec3 col;\n    int it;\n    bool b;\n    float t = SphereTrace( ro, rd, View,b , it);\n\tvec3 p = ro + t*rd;\n    float vp= Object(p).v;\n    vec3 n = ObjectNormal( p );\n\n\n    col = Color(p,n);\n    // Sky\n    if( b==false )\n    {\n        col = vec3(0.35,0.65,0.95) - rd.z*rd.z*2.5;\n    }\n\telse \n\t{\n        vec3 ref = reflect( rd, n );\n        float fre = clamp( 1.0+dot(rd,n), 0.0, 1.0 );\n        vec3 hal = normalize(light1-rd);\n                   \n\n         // Pseudo diffuse lighting\n\t\tfloat dif = 0.5*(1.0+dot( light1, n ));\n        dif*=dif;\n        \n        col = 0.45*col+0.55*dif*vec3(0.35,0.35,0.35);\n\t}\n    \n    // Shading for iterations\n    if (pip==true)\n    {\n    \tfloat s=float(it)/float(Steps);\n\t\treturn vec4(0.112+0.824*s,0.418+0.556*s,0.611-0.515*s,t);\n    }\n    else\n    {\n    \t// Gamma with square root\n    \treturn vec4( sqrt(col), t );\n    }\n}\n\nvec2 RayDirection(in vec2 pixel, out bool pip)\n{\n    // Pixel coordinates\n    vec2 p = (-iResolution.xy + 2.0*pixel)/iResolution.y;\n   if (pip==true)\n   {    \n    const float fraction=1.0/4.0;\n    // Picture in picture\n    if ((pixel.x<iResolution.x*fraction) && (pixel.y<iResolution.y*fraction))\n    {\n        p=(-iResolution.xy*fraction + 2.0*pixel)/(iResolution.y*fraction);\n        pip=true;\n    }\n       else\n       {\n           pip=false;\n       }\n   }\n   return p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   // Time as function of the position of the mouse\n    float a = 3.14*2.0*1.5*iMouse.x/iResolution.x;\n\n    // Camera transform\n    vec3 ro; \n    mat3 cam = Camera( a, ro);   \n\n    // Picture in picture\n    bool pip=true;\n    \n    // Pixel coordinates\n    vec2 p = RayDirection(fragCoord, pip);\n   \n    // Camera ray    \n    vec3 rd = cam * normalize(vec3(p,5.0));\n    \n    // Render\n    vec4 res = Render( ro, rd, pip );\n     \n    fragColor = vec4( res.xyz, 0.0 );\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Texturing\n// Eric Galin\n\n// Texturing and noise ---------------------------------------------------------\n\n// Hashing function\n// Returns a random number in [-1,1]\n// p : Vector in space\nfloat Hash(in vec3 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\n// Procedural value noise with cubic interpolation\n// x : Point \nfloat Noise(in vec3 p)\n{\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n  \n    f = f*f*(3.0-2.0*f);\n    // Could use quintic interpolation instead of cubic\n    // f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix(mix( Hash(i+vec3(0,0,0)), \n                        Hash(i+vec3(1,0,0)),f.x),\n                   mix( Hash(i+vec3(0,1,0)), \n                        Hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( Hash(i+vec3(0,0,1)), \n                        Hash(i+vec3(1,0,1)),f.x),\n                   mix( Hash(i+vec3(0,1,1)), \n                        Hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\n// Hashing function\n// Returns a random number in [-1,1]\n// p : Vector in the plane\nfloat Hash(in vec2 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*(p.x+p.y) );\n}\n\n\n// Procedural value noise with cubic interpolation\n// x : Point \nfloat Noise(in vec2 p)\n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n  \n    f = f*f*(3.0-2.0*f);\n    // Could use quintic interpolation instead of cubic\n    // f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix( Hash(i+vec2(0,0)), \n                        Hash(i+vec2(1,0)),f.x),\n                   mix( Hash(i+vec2(0,1)), \n                        Hash(i+vec2(1,1)),f.x),f.y);\n}\n\n// Fractal brownian motion with 4 frequencies\n// p : Point\nfloat Fbm2(in vec2 p, float l, float a, int o)\n{\n    float t = 0.0;\n    for(int i=0; i<o; i++)\n    {\n        t+= a * Noise(p/l);\n        a *= 0.5;\n        l*= 0.5;\n    }\n    return t;\n    \n}\n\nfloat Fbm(in vec3 p)\n{\n    return Noise(p)/2.0+Noise(p*2.0)/4.0+Noise(p*4.0)/8.0+Noise(p*8.0)/16.0;\n}\n// Camera\n// a: Rotation angle around z axis\n// ro : Ray origin\nmat3 Camera(float a, out vec3 ro)\n{\n\tfloat range=1350.0;\n    // Origin\n    ro = vec3(range*cos(a),range*sin(a),range/4.0);\n\t\n    // Target\n    vec3 ta = vec3(0.0,0.0,50.0);\n    \n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(0.0, 0.0,1.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}","name":"Common","description":"","type":"common"}]}