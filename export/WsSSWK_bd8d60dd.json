{"ver":"0.1","info":{"id":"WsSSWK","date":"1554902377","viewed":110,"name":"Finals_Shader08_Co","username":"johannco98","description":"asd","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["asd"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(vec2 uv)\n{\n    //return fract(sin(dot(uv, vec2(12.9898,78.233)))*10000.*iTime);\n\t//return fract(sin(dot(uv, iMouse.xy))*10000.);\n\t//return (fract(sin(dot(uv, vec2(12., 70.)))*100000.));\n    return (fract(sin(dot(uv, vec2(12., 70.)))*43758.5453123));\n}\n\n// Value noise\nfloat noise(in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = rand(i);\n    float b = rand(i + vec2(1.0, 0.0));\n    float c = rand(i + vec2(0.0, 1.0));\n    float d = rand(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners porcentages\n    return mix(a, b, u.x) + \n            (c - a)* u.y * (1.0 - u.x) + \n            (d - b) * u.x * u.y;\n}\n\n// Gradient noise\nvec2 hash( vec2 x )  // replace this by something better\n{\n    const vec2 k = vec2( 0.3183099, 0.3678794 );\n    x = x*k + k.yx;\n    return -1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) );\n}\n\nfloat gnoise( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( hash( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), \n                     dot( hash( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( hash( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), \n                     dot( hash( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\n// Simplex noise\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\nfloat snoise(vec2 v) {\n    const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,  // -1.0 + 2.0 * C.x\n                        0.024390243902439); // 1.0 / 41.0\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n    vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    i = mod289(i); // Avoid truncation effects in permutation\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n        + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Colors in vec3\n    vec3 red = vec3(0.8 ,0.0 ,0.0);\n    vec3 white = vec3(1.0, 1.0, 1.0);\n    vec3 yellow = vec3(0.9, 0.9, 0.3);\n    vec3 blue = vec3(0.5, 0.8, 0.9);\n    vec3 black = vec3(0.0, 0.0, 0.0);\n    vec3 green = vec3(0.0, 1.0, 0.0);\n    vec2 ouv = fragCoord/iResolution.xy;\n    \n\tvec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;               \n    vec2 st = vec2(atan(uv.x, uv.x), length(uv));   \n    float speed = 2.0;\n    float rings = 20.0;\n    uv = vec2(st.x / 10000.0 + iTime * speed - st.y * (rings * abs(clamp(sin(iTime), 0.1, 1.0))), st.y);  \n    \n    //ring thickness\n    float a = fwidth(uv.x);         \n    \n    vec2 h = hash(uv);\n    float b = fract(uv.x);  \n    \n    \n    float mask = smoothstep(0.0, a, abs(b-0.9) );    \n    vec3 lampLight = abs(vec3(\n        \t\t\t\t  clamp(abs(sin(iTime)),0.0 , 0.8 ),\n                          clamp(abs(cos(iTime)),0.0 , 0.8 ), \n                          clamp(abs(sin(iTime)),0.4 , 1.0 ))\n                        \t );\n    \n    vec3 col = mix(vec3(1.0), lampLight, mask);   \n    //=================================================\n    float value = gnoise(uv + (sin(iTime) * 0.005));\n    float angle = atan(uv.y, uv.x);\n    \n    float radius = sin(4.0 * angle);\n    radius = smoothstep(-0.75 , 1.0,  cos(angle * 8.0 + iTime * 15.0)  ) * 0.2 + 0.4;\n   \n    float radius2 =  1.0 /  abs(cos(angle * 10000.0 + iTime) * sin(angle * 7.0 + iTime)) * 0.5 + 0.1;\n\n    //=================================================\n    fragColor = vec4(col * radius2 * lampLight, 1.0);        \n}","name":"Image","description":"","type":"image"}]}