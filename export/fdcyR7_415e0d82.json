{"ver":"0.1","info":{"id":"fdcyR7","date":"1653142693","viewed":239,"name":"Orbital [311 chars]","username":"Xor","description":"Unfortunately this version doesn't quite fit in a tweet,","likes":23,"published":1,"flags":0,"usePreview":0,"tags":["golf","twigl"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Tweet: https://twitter.com/XorDev/status/1527860471730159618\n//Twigl: https://t.co/LpswoZui7j\n//<512 Chars playlist: shadertoy.com/playlist/N3SyzR\nvoid mainImage(out vec4 O, vec2 I)\n{\n    //Resolution for scaling\n    vec3 r=iResolution,\n    //Compute ray direction (half-res for derivatives)\n    d=normalize(vec3(roundEven(I)*2.,0)-r.xyy),\n    //Compute camera position (approx. vec3(0,0,1.5))\n    p=1.5/r,\n    //Rotation axis\n    a=vec3(.6,.8,0);\n    \n    //Raymarcher (8 rings, step forward every 9th iteration)\n    for(float s=9.,i=s,t=iTime-s,l;i++<3e2; l<.1?p+=d*s,s=9.:\n    //Ring SDF with axis rotation\n    s=min(s,max(abs(length(p)-l),abs(mix( a*dot(p,a), p, cos(t/l) ) + sin(t/l) * cross(p,a)).x)-.05) )\n        //Update loop counter\n        l=fract(i/9.);\n    \n    //Compute rim lighting using derivatives\n    O=length(fwidth(p))*r.yyyy/4e1;\n}","name":"Image","description":"","type":"image"}]}