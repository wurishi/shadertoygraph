{"ver":"0.1","info":{"id":"3lyGRG","date":"1582354174","viewed":84,"name":"thebookofshaders-colors","username":"enigmawxy","description":"Colors part for the Book of Shaders","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["colors"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define AA 4\n#define TWO_PI 6.28318530718\n#define PI 3.14159265359\n\nvec3 colorA = vec3(0.149,0.141,0.912);\nvec3 colorB = vec3(1.000,0.833,0.224);\n\n// 只有在pct返回1，其它皆返回0\nfloat plot (vec2 st, float pct){\n  return  smoothstep( pct-0.01, pct, st.y) -\n          smoothstep( pct, pct+0.01, st.y);\n}\n\nvec3 rgb2hsb( in vec3 c ){\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz),\n                 vec4(c.gb, K.xy),\n                 step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r),\n                 vec4(c.r, p.yzx),\n                 step(p.x, c.r));\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)),\n                d / (q.x + e),\n                q.x);\n}\n\n//  Function from Iñigo Quiles\n//  https://www.shadertoy.com/view/MsS3Wc\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord.xy/iResolution.xy;\n    vec3 color = vec3(0.0);\n\t\n    if(AA == 0) {\n    \tfloat pct = abs(sin(iTime));\n\n    \t// Mix uses pct (a value from 0-1) to\n    \t// mix the two colors\n    \tcolor = mix(colorA, colorB, pct);   \n    }\n    \n    if(AA == 1) {\n        vec3 pct = vec3(st.x);\n\n        pct.r = smoothstep(0.0,1.0, st.x);\n        pct.g = sin(st.x*PI);\n        pct.b = pow(st.x,0.5);\n\t\t\n        // 背景色\n        color = mix(colorA, colorB, pct);\n\n        // mix returns x*(1-a)+y*a\n        // plot returns 1 at pct at y-axis, otherwise returns 0.\n        color = mix(color,vec3(1.0,0.0,0.0),plot(st,pct.r));\n        color = mix(color,vec3(0.0,1.0,0.0),plot(st,pct.g));\n        color = mix(color,vec3(0.0,0.0,1.0),plot(st,pct.b));\n    }\n    \n    if(AA == 2) {\n        // We map x (0.0 - 1.0) to the hue (0.0 - 1.0)\n    \t// And the y (0.0 - 1.0) to the brightness\n    \tcolor = hsb2rgb(vec3(st.x,1.0,st.y));\n    }\n    \n    if(AA == 3 ) {\n        // Use polar coordinates instead of cartesian\n        vec2 toCenter = vec2(0.5)-st;\n        float angle = atan(toCenter.y,toCenter.x);\n        float radius = length(toCenter)*2.0;\n\n        // Map the angle (-PI to PI) to the Hue (from 0 to 1)\n        // and the Saturation to the radius\n        color = hsb2rgb(vec3((angle/TWO_PI)+0.5,radius,1.));\n    }\n    \n    if(AA == 4) {\n        vec2 toCenter = vec2(0.5)-st;\n        \n        toCenter.x *= iResolution.x/iResolution.y;\n        \n        float r = .5;            \n        float angle = atan(toCenter.y,toCenter.x);\n        float radius = smoothstep(r, r-0.02, length(toCenter));\n        \n        color = hsb2rgb(vec3((angle/TWO_PI)+0.5, radius, 1.));\n    }\n    \n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}