{"ver":"0.1","info":{"id":"fssGDX","date":"1616661924","viewed":317,"name":"ACES palette","username":"TheDookySoo","description":"The colors of the rainbow displayed from black on the left to the highest intensity of 40 on the right. This demonstrates the desaturation of colors with ACES. Feel free to take all the code.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["rainbow","tonemapping","aces"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 HSVtoRGB(float h, float s, float v) {\n\tfloat c = s * v;\n\tfloat x = c * (1.0f - abs(mod(h / 60.0f, 2.0f) - 1.0f));\n\tfloat m = v - c;\n\n\tfloat r, g, b;\n\n\tif (h >= 0.0f && h < 60.0f) {\n\t\tr = c, g = x, b = 0.0f;\n\t} else if (h >= 60.0f && h < 120.0f) {\n\t\tr = x, g = c, b = 0.0f;\n\t} else if (h >= 120.0f && h < 180.0f) {\n\t\tr = 0.0f, g = c, b = x;\n\t} else if (h >= 180.0f && h < 240.0f) {\n\t\tr = 0.0f, g = x, b = c;\n\t} else if (h >= 240.0f && h < 300.0f) {\n\t\tr = x, g = 0.0f, b = c;\n\t} else {\n\t\tr = c, g = 0.0f, b = x;\n\t}\n\n\treturn vec3(r, g, b);\n}\n\n// Actual ACES functions and implementation\nconst mat3 ACESInputMat = mat3(\n\t0.59719f, 0.35458f, 0.04823f,\n\t0.07600f, 0.90834f, 0.015566f,\n\t0.02840f, 0.13383f, 0.83777f\n);\n\nconst mat3 ACESOutputMat = mat3(\n\t1.60475f, -0.53108f, -0.07367f,\n\t-0.10208f, 1.10813f, -0.00605f,\n\t-0.00327f, -0.07276f, 1.07602f\n);\n\nconst mat3 HighlightFixMat = mat3( // Prevents bright blues going to purple\n\t0.9404372683, 0.0183068787, 0.0778696104,\n\t0.0083786969, 0.8286599939, 0.1629613092,\n\t0.0005471261, 0.0008833746, 1.0003362486\n);\n\nvec3 TonemapACES(vec3 color) {\n    color = clamp(color, 0.0f, 1000000.0f);\n\tcolor = color * ACESInputMat * HighlightFixMat;\n\n\t{\n\t\tvec3 a = color * (color + 0.0245786f) - 0.000090537f;\n\t\tvec3 b = color * ((color * 0.983729f) + 0.4329510f) + 0.238081f;\n\n\t\tcolor = a / b;\n\t}\n\n\tcolor = color * ACESOutputMat;\n\n\t// Clamp values\n\tcolor = clamp(color, 0.0f, 1.0f);\n\n\treturn color;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\t// Normalized pixel coordinates (from 0 to 1)\n\tvec2 uv = fragCoord / iResolution.xy;\n\n\t// Time varying pixel color\n\tvec3 originalColor = HSVtoRGB((1.0f - uv.y) * 360.0f, 1.0f, 1.0f);\n\toriginalColor *= uv.x * 40.0f;\n\n\tvec3 aces = TonemapACES(originalColor);\n\n\t// Output to screen\n\tfragColor = vec4(aces, 1.0f);\n}","name":"Image","description":"","type":"image"}]}