{"ver":"0.1","info":{"id":"lclXWl","date":"1705914330","viewed":70,"name":"Arabesque Study","username":"riccardomantelli","description":"An arabesque knot pattern.\nClick and drag to move around.","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["fractal","music","knot","arabesque"],"hasliked":0,"parentid":"clBSzd","parentname":"Arabesque knots"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 f1(vec2 a){\n    return\n        fract(a)\n        //max(abs(.5-fract(a.yx)),abs(.5-fract(a+.5)))\n    ;\n}\n\nvec2 triangle_wave(vec2 a){\n    vec2 a2 =\n        //vec2(1.,0.5)\n        vec2(1.+sign(a.x)/2.,0.5-sign(a.x)/2.)\n    ,\n    a1 = a+a2;\n    return\n        abs(f1((a1)*(a2.x+a2.y))-.5)\n    ;\n}\n\nmat2 rotate2D(float r) {\n    return mat2(cos(r), sin(r), -sin(r), cos(r));\n}\n\n#define triwave_(p) abs(fract(.5+p/4.0)-.5)*2.\n#define triwave1_(p) (abs(fract(p/8.0)-.5)-abs(fract(p/2.0)-.5)/2.)\nfloat t1_(vec2 c, vec2 p){\n    return triwave_((.5 - length( min(p=fract(p*sign(triwave1_(c*c.y))), 1.-p.yx) )));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 8.*8.*1.5;\n    vec2 draggedPos = texelFetch(iChannel0, ivec2(1,0), 0).xy;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv += vec2(iTime/2.0,iTime/3.0)/t1/8.0;\n    uv -= draggedPos/iResolution.y/t1;\n    vec2 t2 = vec2(0.);\n    bool b = uv.y > uv.x;\n    bool b1 = b;\n    \n    //rotate 45 degrees\n    mat2 r = rotate2D(-0.785398);\n\n    \n    for(int k = 0; k < 9; k++){\n        uv.x += t1_(floor(uv),floor(uv))/2.;\n        b1 = uv.y>uv.x || !b1;\n        //if(b1)\n        uv =\n            //abs(.5+uv+t2)\n            //abs(.5-max(uv+t2,t2)-t2)\n            //abs(max(uv,t2)+t2)\n            //(max(abs(uv-t2*2.)/2.,abs(t2)*2.))\n            // abs(.5+max(uv,t2)+t2)\n            //min(abs(.5+uv+t2),abs(-.5+uv+t2))\n            //max(abs(.5+uv+t2),abs(-.5+uv+t2))\n            //abs(.5+uv+t2*(1.+mod(floor(uv.y),2.)/2.))\n            abs(.5+uv+t2+pow(floor(uv.x),2.)/1.5)\n        ;\n\n        //if((t2.x)>(t2.y) || k%2 == 0) uv /= 1.5;\n\n        //k += int(uv.x>uv.y);\n       // uv += float(int(iTime)/3);\n        \n       // uv += sign(uv-uv.yx)/2.+.5;\n       // uv += floor(uv*1.5); //another interesting pattern\n        \n        //if(t2.y>t2.x||t2.y<t2.x&&!b)\n        b =\n            uv.y>uv.x\n            //(b && uv.y<uv.x)||(!b && t2.y<t2.x)\n           // (uv.y>uv.x||t2.y<t2.x)&&!b\n            //uv.y>uv.x*float(t2.y>t2.x)\n          // uv.y>uv.x*float(t2.y>t2.x) //makes a braided pattern\n            //uv.y>uv.x+float(!b1)\n            //uv.y*float(!b1)>uv.x\n        ;\n        if(b) uv = uv.yx;\n        \n        //else {k += 1; uv *= 1.5; col=col.yzx;}\n       // uv.x += sign(t2.x-t2.y);\n       // uv.x += sign(uv.x-uv.y);\n\n        t2 =\n            -triangle_wave(uv-.5)\n        ;\n        \n       // if(t2.y<t2.x) t2 = t2*1.5; else t2=t2/1.5;\n\n        uv =\n            t2-triangle_wave(uv.yx)\n            //t2-triangle_wave(uv.yx+floor(uv.x*2.))\n        ;\n        //if(t2.y>t2.x)\n        //if(col.y<col.x||uv.y<uv.x)\n        col =\n            //vec3(col.zx,max(uv.x-uv.y,0.))\n            //abs(vec3(col.zx*float(b),max(uv.x-uv.y,0.)))\n            //abs(vec3(col.zx,max(-uv.x+uv.y,col.y))-col.y)\n              max(vec3(col.zx,max(uv.x-uv.y,col.y)).yzx,vec3(col.y))\n            //vec3(col.zx,max(uv.y-uv.x,t2.x-t2.y))\n           // vec3(col.zx,max(max(t2.x-t2.y,uv.x-uv.y),0.))\n            //vec3(col.zx,max(uv.x+uv.y+1.,0.))\n            //abs(vec3(col.zx,max(uv.x-uv.y,col.y)))\n          // vec3(col.xy,max(uv.x-uv.y,col.z)).yzx\n            //vec3(col.zx,max(uv.x-uv.y,col.x))\n            //abs(sign(uv.x-uv.y)/2.-vec3(col.zx,max(uv.x-uv.y,0.)))\n        ;\n        //uv /= 1.+mod(uv.x,2.);\n        //if(t2.x>t2.y) col=col.yzx;\n        //uv.y -= float(uv.x<uv.y)/2.;\n\n\n    }\n    fragColor = vec4(col*2.,1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//from https://www.shadertoy.com/view/dtGGzK\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 col = vec4(0);\n    if (floor(fragCoord) == vec2(1,0)) {\n        vec2 prevpos = texelFetch(iChannel0, ivec2(1,0), 0).zw; //previous dragged mouse pos\n        vec4 mp = texelFetch(iChannel0, ivec2(2,0), 0); //prev mouse pos\n        vec4 m = iMouse; //current mouse pos\n        \n        //if mouse button up\n        if (m.z < 0.0 && mp.z >= 0.0){\n            col = texelFetch(iChannel0, ivec2(1,0), 0).xyxy;\n        } else if (m.z >= 0.0){\n            col = vec4(m.xy - abs(m.zw) + prevpos, prevpos);\n        } else {\n            col = texelFetch(iChannel0, ivec2(1,0), 0);\n        }\n    }\n    //the last mouse position\n    if (floor(fragCoord) == vec2(2,0)) {\n        col = iMouse;\n    }\n    fragColor = col;\n}","name":"Buffer A","description":"","type":"buffer"}]}