{"ver":"0.1","info":{"id":"dslXWN","date":"1691486003","viewed":105,"name":"fire from natron plugins","username":"axiomgraph","description":"fire from natron plugins","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fire","natron"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//\n//\n//                          MMMMMMMMMMMMMMMMMMMMMMMMMMMM\n//                        MM.                          .MM\n//                       MM.  .MMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                      MM.  .MMMMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                     MM.  .MMMM        MMMMMMM    MMM.  .MM\n//                    MM.  .MMM           MMMMMM     MMM.  .MM\n//                   MM.  .MmM              MMMM      MMM.  .MM\n//                  MM.  .MMM                 MM       MMM.  .MM\n//                 MM.  .MMM                   M        MMM.  .MM\n//                MM.  .MMM                              MMM.  .MM\n//                 MM.  .MMM                            MMM.  .MM\n//                  MM.  .MMM       M                  MMM.  .MM\n//                   MM.  .MMM      MM                MMM.  .MM\n//                    MM.  .MMM     MMM              MMM.  .MM\n//                     MM.  .MMM    MMMM            MMM.  .MM\n//                      MM.  .MMMMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                       MM.  .MMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                        MM.                          .MM\n//                          MMMMMMMMMMMMMMMMMMMMMMMMMMMM\n//\n//\n//\n//\n\n\n\n vec3 c1 = vec3(0.5, 0.0, 0.1); // Color 1 : \n vec3 c2 = vec3(0.9, 0.1, 0.0); // Color 2 : \n vec3 c3 = vec3(0.2, 0.1, 0.7); // Color 3 : \n vec3 c4 = vec3(1.0, 0.9, 0.1); // Color 4 : \n vec3 c5 = vec3(0.1); // Color 5 : \n vec3 c6 = vec3(0.9); // Color 6 : \n\n float detail = 1.7; // Detail : \n float globalAmplitude = 0.47; // Noise : \n\n float shiftt = 1.0; // Vignette : \n float distance = 2.0; // Position offset : \n\n vec2 speed = vec2(1.2, 0.10); // Speed : \nfloat acceleration = 1.0; // Acceleration : \n float offset = 0.0; // Speed Offset : \n\n\n\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat rand(vec2 n) {\n    return fract(sin(cos(dot(n, vec2(12.9898,12.1414)))) * 83758.5453);\n}\n\nfloat noise(vec2 n) {\n    const vec2 d = vec2(0.0, 1.0);\n    vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n    return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n\nfloat fbm(vec2 n, float detail, float amp) {\n    float total = 0.0, amplitude = 1.0;\n    for (int i = 0; i <5; i++) {\n        total += noise(n) * amplitude;\n        n += n*detail;\n        amplitude *= amp;\n    }\n    return total;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    float globalSpeed = iTime * acceleration;\n    float shift = 1.327+sin(globalSpeed*2.0*shiftt)/2.4;\n    float alpha = 1.0;\n    \n    //change the constant term for all kinds of cool distance versions,\n    //make plus/minus to switch between \n    //ground fire and fire rain!\n\tfloat dist = 3.5-sin(globalSpeed*0.4)/1.89;\n    \n    vec2 p = fragCoord.xy * dist / iResolution.xx + distance;\n    p.x -= globalSpeed/1.1;\n    float q = fbm(p - globalSpeed * 0.01-1.0*sin(globalSpeed)/10.0 , detail , globalAmplitude);\n    float qb = fbm(p - globalSpeed * 0.002-0.1*cos(globalSpeed)/5.0 , detail , globalAmplitude);\n    float q2 = fbm(p + globalSpeed * 0.44 - 5.0*cos(globalSpeed)/7.0 , detail , globalAmplitude) + 6.0;\n    float q3 = fbm(p + globalSpeed * 0.9 - 10.0*cos(globalSpeed)/30.0 , detail , globalAmplitude)+4.0;\n    float q4 = fbm(p + globalSpeed * 2.0 - 20.0*sin(globalSpeed)/20.0 , detail , globalAmplitude)+2.0;\n    q = (q + qb - .4 * q2 -2.0*q3  + .6*q4)/3.8;\n    vec2 r = vec2(fbm (p + q /2.0 + globalSpeed + offset * speed.x - p.x - p.y , detail , globalAmplitude), fbm(p + q - globalSpeed * speed.y , detail , globalAmplitude));\n    vec3 c = mix(c1, c2, fbm(p + r , detail , globalAmplitude)) + mix(c3, c4, r.x) - mix(c5, c6, r.y);\n    vec3 color = vec3(c * cos(shift * fragCoord.y / iResolution.y));\n    color += .05;\n    color.r *= .8;\n    vec3 hsv = rgb2hsv(color);\n    hsv.y *= hsv.z  * 1.1;\n    hsv.z *= hsv.y * 1.13;\n    hsv.y = (2.2-hsv.z*.9)*1.20;\n    color = hsv2rgb(hsv);\n    fragColor = vec4(color.x, color.y, color.z, alpha);\n}","name":"Image","description":"","type":"image"}]}