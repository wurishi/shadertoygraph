{"ver":"0.1","info":{"id":"sttfzX","date":"1663447202","viewed":73,"name":"chaos game","username":"TheRomanOne","description":"I saw a video of Serpinski's hexagon and decided it would be a nice challenge to pull off in shadertoy","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["game","fractals","chaos"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Based on https://en.wikipedia.org/wiki/Chaos_game\n// Coose the desired shape in 'mainImage' or create\n// your own by defining a 1x2 array:\n// (number of shape corners, how far to jump)\n#define TRIANGLE vec2(3, .5)\n#define HEXAGON vec2(6, .2/.3)\n#define SQUARE vec2(4, .65)\n\n\n// DEFINITIONS\nvec2 uv;\n#define PI (2. * 3.141592654)\n#define MAX_POINTS 10\n\n// drawing functions\nvec2 normalize_pixel(vec2 pixel) { return pixel * iResolution.xy; }\nvec3 draw(vec2 p, float point_size, vec3 c) { p = normalize_pixel(p); return c * vec3(max(0., point_size - length(vec2(p.x, iResolution.y - p.y)-uv))); }\nvec3 draw(vec2 p, float point_size) { return draw(p, point_size, vec3(1));}\n\n// random functions\nint random(int seed, float mn, float mx) \n{\n    // integer hash copied from Hugo Elias\n    uint n = uint(seed);\n\tn = (n << 13U) ^ n;\n    n = n * (n * n * 15731U + 789221U) + 1376312589U;\n    float f = float( n & uint(0x7fffffffU))/float(0x7fffffff);\n    return int(mn + (mx - mn) * f);\n}\nint random(int n, int mn, int mx){return random(n, float(mn), float(mx));}\nint random_by_time(int i, int n)\n{\n    return random(i*int(1.+iTime*100.), 0, n);\n}\n\n// main drawing function\nvec3 draw_shape(vec2 shape, int num_of_points)\n{\n    int corners = int(shape[0]);\n    float slice_length = float(shape[1]);\n    vec3 col = vec3(0);\n    float slice = PI/float(corners);\n    vec2 center = vec2(.75, 0.5);\n    vec2 vs[MAX_POINTS];\n    \n    // generate shape corners (draw and store)\n    for(int i = 0; i < corners; i++)\n    {\n        float a = iTime/10. + slice * float(i);\n        vec2 p = .45*vec2(sin(a), cos(a));\n        p += center;\n        vs[i] = p;\n        col += draw(p, 5.);\n    }\n    \n    // itterate over all steps within the shape\n    vec2 last = vs[random_by_time(0, corners)];\n    for(int i = 0; i < num_of_points; i++)\n    {\n        int _i = random_by_time(i, corners);\n        vec2 p = vs[_i] - last;\n        p *= slice_length;\n        p = last + p;\n        col += draw(p, 1.5, vec3(uv/200., 1.));\n        last = p;\n    }\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // init params\n    uv = fragCoord;\n    uv -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n        \n    // steps - num of points (jumps) in the shape\n    int steps = 1900 - int(2000. * cos(iTime/2.));\n    //steps = 10000;\n    // choose a shape to draw (or define your own)\n    vec3 col = draw_shape(TRIANGLE, steps);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}