{"ver":"0.1","info":{"id":"XfXGz2","date":"1703239259","viewed":60,"name":"interleavedgradientnoise","username":"LuncyTB","description":"Try different magic number to compute interleaved gradient noise, and scale it with bilinear.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["test","noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float noise(vec2 coord)\n{\n    return fract(dot(floor(coord), vec2(0.06711056, 0.00583715)) * 52.9829189);\n}\n\nfloat smoothNoise(vec2 coord)\n{\n    vec4 val = vec4(\n        noise(coord + vec2(0.0, 0.0)),\n        noise(coord + vec2(1.0, 0.0)),\n        noise(coord + vec2(0.0, 1.0)),\n        noise(coord + vec2(1.0, 1.0))\n    );\n    \n    vec2 fac = fract(coord);\n    \n    return mix(mix(val.x, val.y, fac.x), mix(val.z, val.w, fac.x), fac.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(smoothNoise(fragCoord * 0.1));\n}","name":"Image","description":"","type":"image"}]}