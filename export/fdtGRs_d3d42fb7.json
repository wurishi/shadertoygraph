{"ver":"0.1","info":{"id":"fdtGRs","date":"1630496464","viewed":90,"name":"Graph_2D_sidps","username":"kingcrimson1112","description":"A shader to display equations as form of a 2D Graph","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","graph","equations"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define AREA_GRAPH 0\n\n// Graph Color Properties\nvec3 bgColor = vec3(0.05f);\nvec3 gridColor = vec3(0.25f, 0.75f, 0.25f);\nvec3 axesColor = vec3(0.9f, 0.9f, 0.1f);\nvec3 eqColor = vec3(0.15f, 0.65f, 0.95f);\n\n// Graph Render Properties\nfloat yLimit = 6.0f;\nfloat gridWidth = 0.2f;\nint pixelWidth = 2;\n\n// Equation Properties\nfloat errorMargin = 0.25f;\n\n// Gets f(x, y)\nfloat get_result(vec2 point)\n{\n    //float radius = 25.0f * ((sin(iTime * 1.5f) + 1.0f) / 2.0f) + 0.05f;\n    // f(x,y) = y^2 + x^2 - R\n    //float res = ((point.y * point.y) + (point.x * point.x) - radius);\n    float phase=sin(iTime*3.0f)*5.0f;\n    float res = point.y - sin(abs(point.x+phase)) * sqrt(abs(point.x)) * cos(iTime * 3.0f) * 2.0f;\n    return res;\n}\n\n// Checks if the point satifies the result equation\nbool check_equation(vec2 point)\n{\n    bool status = false;\n    float result = get_result(point);\n    \n    // Points that lie on the Curve\n#if !AREA_GRAPH\n    if(abs(result) < errorMargin)\n    {\n        status = true;\n    }\n#else\n    // All points inside the Curve\n    if(result < errorMargin)\n    {\n        status = true;\n    }\n#endif\n    return status;\n}\n\n// Gets the integer part of A ==> (1.2 => 1) and (-1.2 => -1)\nfloat get_int(float a)\n{\n    if(a < 0.0f)\n    {\n        return float(-1 * int(-1.0f * a));\n    }\n    return float(int(a));\n}\n\n// Gets the fractional part of A ==> (1.2 => 0.2) and (-1.3 => 0.3)\nfloat get_frac(float a)\n{\n    return abs(a - get_int(a));\n}\n\n// Returns the pixel in screen space\nfloat get_pixel(float a, float limit, float res)\n{\n    // A is from (-(L+1), (L+1))\n    // From (-1, 1)\n    a = a / (limit + 1.0f);\n    // From (0 , 1)\n    a = (a + 1.0f) / 2.0f;\n    // From (0 , res)\n    a *= res;\n    return a;\n}\n\n// Checks if the point lies on the Axes lines\nbool check_point(float pos, float limit, float resolution)\n{\n    bool status = false;\n    float width = gridWidth;\n    float fracPart = get_frac(pos);\n    float intPart = get_int(pos);\n    if(intPart == 0.0f)\n    {\n        width /= 2.0f;\n        if(width < 0.02f)\n        {\n            width = 0.02f;\n        }\n    }\n    if(abs(fracPart) < width)\n    {\n       float pixelVal = get_pixel(pos, limit, resolution);\n       float correctVal = get_int(get_pixel(intPart, limit, resolution));\n       float dist = abs(pixelVal - correctVal);\n       float testDist = float(pixelWidth);\n       if(intPart == 0.0f)\n       {\n           // testDist /= 2.0f;\n           testDist = get_int(testDist);\n       }\n       if(dist <= testDist)\n       {\n           status = true;\n       }\n    }\n    return status;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // 1. Setup Data\n    \n    // Gets the Y limit for square grid\n    float xLimit = (yLimit + 1.0f) * (iResolution.x / iResolution.y) - 1.0f;\n    \n    // From (0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    // From (-1 to 1)\n    vec2 pos = (uv * 2.0f) - 1.0f;\n    \n    // From (-X to X, -Y to Y)\n    pos.x *= (xLimit + 1.0f);\n    pos.y *= (yLimit + 1.0f);\n    \n    // 2. Setup Color\n    \n    // a. Default Color is the Background\n    vec3 col = bgColor;\n    \n    // b. If the point lies on the grid lines, then change color\n    if(check_point(pos.x, xLimit , iResolution.x) || check_point(pos.y, yLimit, iResolution.y))\n    {\n        col = gridColor;\n        if((check_point(pos.x, xLimit , iResolution.x) && get_int(pos.x) == 0.0f) || \n            (check_point(pos.y, yLimit , iResolution.y) && get_int(pos.y) == 0.0f))\n        {\n            col = axesColor;\n        }\n    }\n    \n    // c. If the point satisfies the Equation, then change color\n    if(check_equation(pos))\n    {\n        col = eqColor;\n    }\n\n    // 3. Output to screen\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}