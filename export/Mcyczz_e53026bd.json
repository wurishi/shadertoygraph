{"ver":"0.1","info":{"id":"Mcyczz","date":"1731408723","viewed":12,"name":"Fork Stripy/Mon fjgonzalez 716","username":"fjgonzalez9","description":"This is a scary pumpkin","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["pumpkin"],"hasliked":0,"parentid":"lcyczz","parentname":"Stripy/Monster Pumpkin"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Simple noise function (using a sine-based method for simplicity)\nfloat noise(vec2 p) {\n    return sin(p.x * 10.0 + p.y * 10.0) * 0.5 + 0.5;  // Simple sine wave based noise\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalize the coordinates (0 to 1) and center the origin at (0,0)\n    vec2 p = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n\n    // Set a dark background to ensure the orange circle stands out\n    vec3 backgroundColor = vec3(0.0, 0.0, 0.0); // Black background\n\n    // Circle parameters (smaller radius)\n    float circleRadius = 0.75; // New smaller radius for the circle\n    vec3 circleColor = vec3(1.0, 0.6, 0.0); // Orange color for the circle\n\n    // Green triangle parameters\n    float greenTriangleBase = 0.4;  // Base of the green triangle\n    float greenTriangleHeight = 0.2; // Height of the green triangle\n    vec3 greenTriangleColor = vec3(0.0, 1.0, 0.0); // Green color for the triangle\n\n    // Triangle parameters (red)\n    float triangleBase = 0.2;  // Base of the red triangles\n    float triangleHeight = 0.2; // Height of the red triangles\n    float triangleSpacing = 0.4; // Spacing between the red triangles\n    vec3 triangleColor = vec3(1.0, 0.0, 0.0); // Red color for the triangles\n\n    // Half-circle parameters (bottom middle)\n    float halfCircleRadius = 0.4; // Radius of the bottom half circle\n    vec3 halfCircleColor = vec3(1.0, 0.0, 0.0); // Same red color as the triangles\n\n    // Circle equation: check if the point is inside the orange circle\n    float circle = smoothstep(circleRadius + 0.02, circleRadius - 0.02, length(p));\n\n    // Add texture to the circle using noise\n    float tex = noise(p * 5.0);  // Scaling the noise to control the texture pattern\n    tex = smoothstep(0.4, 0.6, tex); // Adding contrast to the noise pattern\n    circle *= tex;  // Apply the texture to the circle\n\n    // Green triangle above the circle (now higher at y = 0.6)\n    float greenTriangle = 0.0;\n    if (p.y >= 0.6 && p.y <= 0.6 + greenTriangleHeight) {  // Moved to y = 0.6\n        if (p.x >= -greenTriangleBase / 2.0 && p.x <= greenTriangleBase / 2.0 && p.y <= 0.6 + greenTriangleHeight) {\n            float tri = max(0.0, 1.0 - abs(p.x) * 2.0 / greenTriangleBase - (p.y - 0.6) / greenTriangleHeight);\n            greenTriangle = smoothstep(0.01, 0.02, tri);\n        }\n    }\n\n    // Triangles as a row above the circle (red) â€” moved down\n    float triangle1 = 0.0;\n    if (p.y >= 0.2 && p.y <= 0.2 + triangleHeight) {  // Moved down to y = 0.2\n        if (p.x >= -triangleBase / 2.0 - triangleSpacing && p.x <= -triangleBase / 2.0 && p.y <= 0.2 + triangleHeight) {\n            float tri1 = max(0.0, 1.0 - abs(p.x + triangleSpacing) * 2.0 / triangleBase - (p.y - 0.2) / triangleHeight);\n            triangle1 = smoothstep(0.01, 0.02, tri1);\n        }\n    }\n\n    float triangle2 = 0.0;\n    if (p.y >= 0.2 && p.y <= 0.2 + triangleHeight) {  // Moved down to y = 0.2\n        if (p.x >= -triangleBase / 2.0 && p.x <= triangleBase / 2.0 && p.y <= 0.2 + triangleHeight) {\n            float tri2 = max(0.0, 1.0 - abs(p.x) * 2.0 / triangleBase - (p.y - 0.2) / triangleHeight);\n            triangle2 = smoothstep(0.01, 0.02, tri2);\n        }\n    }\n\n    float triangle3 = 0.0;\n    if (p.y >= 0.2 && p.y <= 0.2 + triangleHeight) {  // Moved down to y = 0.2\n        if (p.x >= triangleBase / 2.0 && p.x <= triangleBase / 2.0 + triangleSpacing && p.y <= 0.2 + triangleHeight) {\n            float tri3 = max(0.0, 1.0 - abs(p.x - triangleSpacing) * 2.0 / triangleBase - (p.y - 0.2) / triangleHeight);\n            triangle3 = smoothstep(0.01, 0.02, tri3);\n        }\n    }\n\n    // Half circle at the bottom middle\n    float halfCircle = 0.0;\n    if (p.y >= -halfCircleRadius && p.y <= 0.0) {\n        float dist = length(p - vec2(0.0, 0)); // Distance to the center of the half circle\n        halfCircle = smoothstep(halfCircleRadius + 0.02, halfCircleRadius - 0.02, dist);\n    }\n\n    // Combine the background, circle, green triangle, the red triangles, and the half circle\n    vec3 color = mix(backgroundColor, circleColor, circle); // Orange circle with dark background\n    color = mix(color, greenTriangleColor, greenTriangle); // Add green triangle on top\n    color = mix(color, triangleColor, triangle1 + triangle2 + triangle3); // Add red triangles (now lower)\n    color = mix(color, halfCircleColor, halfCircle); // Add half circle with the same red color as triangles\n\n    // Output the final color\n    fragColor = vec4(color, 1.0);\n}\n\n\n","name":"Image","description":"","type":"image"}]}