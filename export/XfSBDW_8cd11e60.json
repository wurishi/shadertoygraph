{"ver":"0.1","info":{"id":"XfSBDW","date":"1724901587","viewed":10,"name":"mira este","username":"cyberhens","description":"asdasd","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["asdas"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 150\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\nfloat time;\nvec3 randomValues;\n\nfloat hash(float n) { return fract(sin(n) * 43758.5453123); }\n\nmat2 rotate2d(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\nfloat sdFractal(vec3 p) {\n    float scale = 1.8 + sin(time * 0.2) * 0.3;\n    p = rotateY(time * 0.1) * p;\n    \n    float trap = 0.;\n    for (int i = 0; i < 9; i++) {\n        p = abs(p) / dot(p, p) - scale;\n        p = rotateY(time * 0.05 + float(i) * 0.15) * p;\n        p.xz = rotate2d(randomValues.x + time * 0.1) * p.xz;\n        p.xy = rotate2d(randomValues.y + time * 0.15) * p.xy;\n        trap = max(trap, dot(p, p));\n    }\n    \n    return length(p) * pow(scale, -9.0) - 0.01;\n}\n\nvec3 palette(float t) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263, 0.416, 0.557);\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nfloat getDist(vec3 p) {\n    return sdFractal(p);\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.;\n    \n    for(int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd * dO;\n        float dS = getDist(p);\n        dO += dS;\n        if(dO > MAX_DIST || abs(dS) < SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 getNormal(vec3 p) {\n    float d = getDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        getDist(p-e.xyy),\n        getDist(p-e.yxy),\n        getDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat softshadow(vec3 ro, vec3 rd, float mint, float maxt, float k) {\n    float res = 1.0;\n    float t = mint;\n    for(int i = 0; i < 16; i++) {\n        float h = getDist(ro + rd * t);\n        if(h < 0.001) return 0.0;\n        res = min(res, k * h / t);\n        t += clamp(h, 0.01, 0.2);\n        if(t > maxt) break;\n    }\n    return res;\n}\n\nfloat calcAO(vec3 p, vec3 n) {\n    float occ = 0.0;\n    float sca = 1.0;\n    for(int i = 0; i < 5; i++) {\n        float hr = 0.01 + 0.12 * float(i) / 4.0;\n        vec3 aopos = n * hr + p;\n        float dd = getDist(aopos);\n        occ += -(dd - hr) * sca;\n        sca *= 0.95;\n    }\n    return clamp(1.0 - 3.0 * occ, 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    time = iTime;\n    \n    randomValues = vec3(\n        hash(floor(time * 0.1)),\n        hash(floor(time * 0.2 + 10.0)),\n        hash(floor(time * 0.3 + 20.0))\n    );\n    \n    vec3 ro = vec3(3.5 * sin(time * 0.1), 2.0 * cos(time * 0.15), -3.5 * cos(time * 0.1));\n    vec3 ta = vec3(0, 0, 0);\n    vec3 ww = normalize(ta - ro);\n    vec3 uu = normalize(cross(ww, vec3(0, 1, 0)));\n    vec3 vv = normalize(cross(uu, ww));\n    vec3 rd = normalize(uv.x * uu + uv.y * vv + 1.5 * ww);\n    \n    float d = rayMarch(ro, rd);\n    vec3 p = ro + rd * d;\n    \n    vec3 col = vec3(0);\n    \n    if(d < MAX_DIST) {\n        vec3 n = getNormal(p);\n        vec3 r = reflect(rd, n);\n        \n        float dif = dot(n, normalize(vec3(1,2,3))) * .5 + .5;\n        float spe = pow(max(dot(r, normalize(vec3(1,2,3))), 0.0), 32.0);\n        float sha = softshadow(p, normalize(vec3(1,2,3)), 0.02, 2.5, 8.0);\n        float ao = calcAO(p, n);\n        \n        col = palette(length(p) * 0.1 + time * 0.1);\n        col *= dif * sha * ao;\n        col += spe * 0.5;\n        \n        float edge = length(cross(n, rd));\n        col *= smoothstep(0.0, 0.1, edge);\n        \n        float fresnel = pow(1.0 + dot(rd, n), 4.0);\n        col += col * fresnel * 0.5;\n        \n        float kaleidoscope = sin(atan(p.y, p.x) * (8. + sin(time * 0.2) * 4.)) * 0.5 + 0.5;\n        col *= vec3(kaleidoscope, kaleidoscope * 0.8, kaleidoscope * 1.2);\n        \n        float fractalTexture = sin(p.x*30.) * sin(p.y*30.) * sin(p.z*30.);\n        col += palette(fractalTexture + time * 0.1) * 0.2;\n    }\n    \n    col = mix(col, vec3(length(col)), 0.2);\n    col = pow(col, vec3(0.8));\n    col *= 1.3;\n    \n    float vignette = smoothstep(1.2, 0.5, length(uv));\n    col *= vignette;\n    \n    // A침adir un efecto de destello\n    float flare = 0.0;\n    flare += max(0.0, 1.0 - abs(sin(uv.x * 20.0 + time) * sin(uv.y * 20.0 + time * 1.1))) * 0.5;\n    flare += max(0.0, 1.0 - abs(sin(uv.x * 30.0 - time * 0.5) * sin(uv.y * 30.0 + time * 0.6))) * 0.3;\n    col += flare * palette(time * 0.1);\n\n    // A침adir un efecto de aberraci칩n crom치tica\n    float aberration = 0.01;\n    vec3 colR = texture(iChannel0, fragCoord/iResolution.xy + aberration * normalize(uv)).rgb;\n    vec3 colB = texture(iChannel0, fragCoord/iResolution.xy - aberration * normalize(uv)).rgb;\n    col = vec3(colR.r, col.g, colB.b);\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}