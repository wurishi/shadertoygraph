{"ver":"0.1","info":{"id":"4f2fRy","date":"1725125270","viewed":29,"name":"Mandelbrot Odyssey","username":"aizen","description":"Mandelbrot zoom animation.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot","zoom","animation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 pallete(float t)\n{\n    vec3 a = vec3(1.0, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(0.75, 1.0, 0.667);\n    vec3 d = vec3(0.8, 1.0, 0.333);\n    return (a + b * cos(6.28318 * (c * t + d)));\n}\n\nfloat distanceToMandelbrot(in vec2 c)\n{\n    #if 1\n    {\n        float c2 = dot(c, c);\n        if( 256.0*c2*c2 - 96.0*c2 + 32.0*c.x - 3.0 < 0.0 ) return 0.0;\n        if( 16.0*(c2+2.0*c.x+1.0) - 1.0 < 0.0 ) return 0.0;\n    }\n    #endif\n    float di =  1.0;\n    vec2 z  = vec2(0.0);\n    float m2 = 0.0;\n    vec2 dz = vec2(0.0);\n    for( int i=0; i<300; i++ )\n    {\n        if( m2>1024.0 ) { di=0.0; break; }\n        dz = 2.0*vec2(z.x*dz.x-z.y*dz.y, z.x*dz.y + z.y*dz.x) + vec2(1.0,0.0);\n        z = vec2( z.x*z.x - z.y*z.y, 2.0*z.x*z.y ) + c;\n        m2 = dot(z,z);\n    }\n    float d = 0.5*sqrt(dot(z,z)/dot(dz,dz))*log(dot(z,z));\n    if( di>0.5 ) d=0.0;\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Define zoom parameters\n    float zoom = pow(1.6, 12.5 * sin(iTime * 0.1) + 12.1); // Oscillating zoom level\n    vec2 center = vec2(-0.745, 0.186); // Interesting edge area\n    \n    // Calculate UV coordinates with zoom\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    uv = uv / zoom + center;\n    \n    vec3 final_color = vec3(0.0);\n    for (float i = 0.; i < 2.9; i++)\n    {\n        float d = distanceToMandelbrot(uv) * exp(-length(uv - center));\n        vec3 color = pallete(length(uv - center) + iTime * 0.4);\n        d = smoothstep(0.0, 0.05, d);\n        d = pow(d, 0.04);\n        \n        d = 0.09 / d;\n        \n        final_color += color * d;\n    }\n    \n    // Add a subtle vignette effect\n    float vignette = length(fragCoord / iResolution.xy - 0.5);\n    vignette = smoothstep(0.5, 1.5, vignette);\n    final_color *= 1.0 - vignette * 0.2;\n    \n    fragColor = vec4(final_color, 1.0);\n}","name":"Image","description":"","type":"image"}]}