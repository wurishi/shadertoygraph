{"ver":"0.1","info":{"id":"dtcGz8","date":"1682002322","viewed":73,"name":"Messing with function graphs","username":"Oman395","description":"Just messing around with graphing functions, nothing to see here","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["math","functions"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define WIDTH_PX 10.0\n#define X_MULT 2.0\n#define MAX_HEIGHT 0.9\n#define START_SCALE 0.5\n#define END_SCALE 0.25\n#define NUM_GRAPHS 25\n#define ANTIALIAS\n\n// Valid GLSL operations, using the variable \"x\" as the only input, and outputing a single float.\n#define OPERATION_1 cos(x) / 2.0\n#define OPERATION_2 cos((x * 1.25) + 3.14159265 / 8.0)\n\n// Themes\n// Catppuccin themes\n// #define MOCHA\n#define MACCHIATO\n// #define FRAPPE\n// #define LATTE\n\n// Pride themes\n// Feel free to add to this, add an elif to the colors definition and bg definition and comment here\n// Or dm it to me, AutisticMOFO#0521\n// #define TRANS\n// #define GAY\n// #define BI\nconst vec4 colors[] = vec4[](\n    #if defined(MACCHIATO)\n    vec4(138, 173, 244, 255) / 255.0, // Blue\n    vec4(139, 213, 202, 255) / 255.0, // Teal\n    vec4(166, 218, 149, 255) / 255.0, // Green\n    vec4(245, 169, 127, 255) / 255.0, // Peach\n    vec4(237, 135, 150, 255) / 255.0, // Red\n    vec4(198, 160, 246, 255) / 255.0  // Mauve\n    #elif defined(MOCHA)\n    vec4(137, 180, 250, 255) / 255.0,\n    vec4(148, 226, 213, 255) / 255.0,\n    vec4(166, 227, 161, 255) / 255.0,\n    vec4(250, 179, 135, 255) / 255.0,\n    vec4(243, 139, 168, 255) / 255.0,\n    vec4(203, 166, 247, 255) / 255.0\n    #elif defined(FRAPPE)\n    vec4(140, 170, 238, 255) / 255.0, // Blue\n    vec4(129, 200, 190, 255) / 255.0, // Teal\n    vec4(166, 209, 137, 255) / 255.0, // Green\n    vec4(239, 159, 118, 255) / 255.0, // Peach\n    vec4(231, 130, 132, 255) / 255.0, // Red\n    vec4(202, 158, 230, 255) / 255.0  // Mauve\n    #elif defined(LATTE)\n    vec4(30, 102, 245, 255) / 255.0, // Blue\n    vec4(23, 146, 153, 255) / 255.0, // Teal\n    vec4(64, 160, 43, 255) / 255.0, // Green\n    vec4(254, 100, 11, 255) / 255.0, // Peach\n    vec4(210, 15, 57, 255) / 255.0, // Red\n    vec4(136, 57, 239, 255) / 255.0  // Mauve\n    #elif defined(GAY)\n    vec4(228, 3, 3, 255) / 255.0,\n    vec4(255, 140, 0, 255) / 255.0,\n    vec4(255, 237, 0, 255) / 255.0,\n    vec4(0, 128, 38, 255) / 255.0,\n    vec4(0, 77, 255, 255) / 255.0,\n    vec4(117, 7, 135, 255) / 255.0\n    #elif defined(TRANS)\n    vec4(91, 206, 250, 255) / 255.0,\n    vec4(245, 169, 184, 255) / 255.0,\n    vec4(1),\n    vec4(245, 169, 184, 255) / 255.0,\n    vec4(91, 206, 250, 255) / 255.0\n    #elif defined(BI)\n    vec4(214, 2, 112, 255) / 255.0,\n    vec4(214, 2, 112, 255) / 255.0,\n    vec4(155, 79, 150, 255) / 255.0,\n    vec4(0, 56, 168, 255) / 255.0,\n    vec4(0, 56, 168, 255) / 255.0\n    #else\n    // Custom colors here\n    vec4(0),\n    vec4(1)\n    #endif\n);\n\nconst vec4 bg = vec4(\n    #if defined(MACCHIATO)\n    36, 39, 58\n    #elif defined(MOCHA)\n    30, 30, 46\n    #elif defined(FRAPPE)\n    48, 52, 70\n    #elif defined(LATTE)\n    239, 241, 245\n    #else\n    0,0,0\n    #endif\n    ,255\n) / 255.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = 2.0 * (fragCoord/iResolution.xy - 0.5);\n    float WIDTH = WIDTH_PX / iResolution.y;\n    fragColor = bg;\n    if(abs(uv.y) > MAX_HEIGHT + WIDTH_PX) return;\n    float currentMult = 1.0;\n    float stp = 1.0 / float(NUM_GRAPHS);\n    for(float i = 0.0; i < 1.0; i += stp) {\n        float x = uv.x * X_MULT + iTime * (i * END_SCALE + (1.0 - i) * START_SCALE);\n        float op1 = OPERATION_1;\n        float op2 = OPERATION_2;\n        float tgt = op2 * i + op1 * (1.0 - i);\n        tgt *= MAX_HEIGHT;\n        if(abs(uv.y - tgt) <= WIDTH / 2.0) {\n            int iInt = int(floor(i * float(colors.length())));\n            float iPerc = mod(i * float(colors.length()), 1.0);\n            #ifdef ANTIALIAS\n            float mult = currentMult * smoothstep(WIDTH / 2.0, WIDTH / 2.0 - 3.0 / iResolution.y, abs(uv.y - tgt));\n            currentMult -= mult;\n            #else\n            float mult = 1.0;\n            #endif\n            fragColor += (colors[iInt] * (1.0 - iPerc) + colors[iInt + 1] * iPerc) * mult;\n        }\n    }\n}","name":"Image","description":"","type":"image"}]}