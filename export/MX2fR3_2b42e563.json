{"ver":"0.1","info":{"id":"MX2fR3","date":"1729790449","viewed":39,"name":"1bit PDM Tester","username":"sampajama","description":"this is just used to test some algorithms for controlling an LED","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["dither","1bit","pwm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Trig Constants\nconst float c_pi = 2.0 * acos(0.0);\nconst float c_tau = 2.0 * c_pi;\n\n// 1D low discrepancy noise\nconst float c_phi = (1.0 + sqrt(5.0)) / 2.0;\n\n// 2D low discrepancy noise\nconst float c_rho_1 = (\n    2.0 * cosh(acosh(3.0 * sqrt(3.0) / 2.0) / 3.0) / sqrt(3.0)\n);\n\nconst float c_rho_2 = c_rho_1 * c_rho_1; \n\nfloat loop(float x) { \n    return acos(cos(c_tau * fract(x))) / c_pi; \n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define ACTIVE_PWM true\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv_prev = (fragCoord.xy + vec2(0.0, -1.0)) / iResolution.xy;\n    vec2 uv_next = (fragCoord.xy + vec2(0.0, +1.0)) / iResolution.xy;\n    \n    float target_prev = floor(16.0 * uv_prev.y) / 16.0;\n    float target_next = floor(16.0 * uv_next.y) / 16.0;\n    \n    if (target_prev != target_next) {\n        fragColor = vec4(0.0);\n        return;\n    }\n    \n    float target = (target_prev + target_next) / 2.0;\n    \n    vec4 previous = texelFetch(\n        iChannel0,\n        ivec2(fragCoord.xy) - ivec2(1, 0),\n        0\n    );\n\n    float error = previous.a;\n        \n    if (\n        fract(\n            (\n                fragCoord.x - \n                float(iFrame)\n            ) / iResolution.x\n        ) <= 0.5\n    ) {\n        if (target >= error) {\n            fragColor = vec4(1.0);\n        } else {\n            fragColor = vec4(0.0);\n        }\n    } \n    \n    else {\n        float T = fract(\n            floor(fragCoord.x) * c_phi\n        );\n    \n        if (target >= T) {\n            fragColor = vec4(1.0);\n        } else {\n            fragColor = vec4(0.0);\n        }\n    }\n    \n    \n    error -= target - fragColor.x;\n    fragColor.a = error;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define GAMMA (2.2)\n\nvec4 gamma_mix(vec4 a, vec4 b, float t) {\n    return pow(\n        mix(\n            pow(a, vec4(GAMMA)),\n            pow(b, vec4(GAMMA)),\n            t\n        ),\n        vec4(1.0 / GAMMA)\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 a = texelFetch(\n        iChannel0, \n        ivec2(fragCoord) - ivec2(1, 0), \n        0\n    );\n    \n    vec4 b = texelFetch(\n        iChannel1, \n        ivec2(fragCoord) - ivec2(0, 0), \n        0\n    );\n    \n    float ratio = (\n            1.0 / max(\n                1.0,\n                fragCoord.x - \n                iResolution.x / 2.0\n            )\n        );\n    \n    \n    fragColor = gamma_mix(a, b, ratio);\n}","name":"Buffer B","description":"","type":"buffer"}]}