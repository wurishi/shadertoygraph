{"ver":"0.1","info":{"id":"lt2yzt","date":"1528243315","viewed":279,"name":"Smooth min and Noise","username":"tylerbata","description":"visualizing some noise functions as well as smooth min to try and make a tree like texture\n\nadded simple but crazy expensive AO!","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["smoothmin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TEST 1\n#define PI 3.14159265359\n#define MAX_RAY_STEPS 75\n\nfloat steps;\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  { \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\nvec3 heatMap(float greyValue) {   \n\tvec3 heat;      \n    heat.r = smoothstep(0.5, 0.8, greyValue);\n    if(greyValue >= 0.90) {\n    \theat.r *= (1.1 - greyValue) * 5.0;\n    }\n\tif(greyValue > 0.7) {\n\t\theat.g = smoothstep(1.0, 0.7, greyValue);\n\t} else {\n\t\theat.g = smoothstep(0.0, 0.7, greyValue);\n    }    \n\theat.b = smoothstep(1.0, 0.0, greyValue);          \n    if(greyValue <= 0.3) {\n    \theat.b *= greyValue / 0.3;     \n    }\n\treturn heat;\n}\n\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nfloat opB( float a, float b) {\n#if TEST\n    float k = 0.7;//0.06;\n\tfloat h = clamp( 0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n\treturn mix( b, a, h ) - k*h*(1.0-h);   \n#else\n    const float k  = 80.0;\n    float res = exp2( -k*a ) + exp2( -k*b );\n    return -log2( res )/k;\n#endif\n}\n\nfloat two(vec3 p) {\n    return sdSphere(p - vec3(0.0,1.0,0.0), 1.0);\n}\n\nfloat sum(vec3 pos) {\n\t\n    float val = 0.0;\n    \n    float t = 1.0;\n    \n    float warp = snoise(pos*0.3);\n    vec3 p2 = pos*vec3(1.0,warp*8.0,1.0);//pos + vec3(0.0,warp*8.0,0.0);\n    \n    \n    val += two(pos)*0.4; t *= 2.01;\n    //val += snoise(pos*t)*0.05;\n    //t *= 2.01;\n    //val += snoise(pos*t)*0.125;\n    //t *= 2.01;\n    //t *= 2.01;\n    //t *= 2.01;\n    val += snoise(p2*t)*(val*0.1);\n    \n    return val - 0.08;\n}\n\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d2,d1);\n}\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\n\n//------------------------------------------------------------------\n\nvec2 map( in vec3 pos )\n{\n    vec2 res = opU( vec2( sdPlane(     pos), 1.0 ),\n\t                vec2( sum(pos), 10.0 ) ); //sdSphere(    pos-vec3( 0.0,1.0, 0.0), 1.0 )\n    return res;\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 1.0;\n    float tmax = 20.0;\n    \n    float t = tmin;\n    float m = -1.0;\n    steps = 0.0;\n    for( int i=0; i<MAX_RAY_STEPS; i++ )\n    {\n\t    float precis = 0.0005*t;\n\t    vec2 res = map( ro+rd*t );\n        if( res.x<precis || t>tmax ) break;\n        t += res.x;\n\t    m = res.y;\n        steps += 1.0;\n    }\n\n    if( t>tmax ) m=-1.0;\n    return vec2( t, m );\n}\n\nfloat castRayF( in vec3 ro, in vec3 rd )\n{\n    float tmin = 0.1;\n    float tmax = 10.0;\n    float t = tmin;\n    for( int i=0; i<128; i++ )\n    {\n\t    float precis = 0.0005*t;\n\t    float tempT = map( ro+rd*t ).x;\n        if( tempT<precis || t>tmax ) break;\n        t += tempT;\n    }\n    if( t>tmax )t = -1.0;\n    return t;\n}\n\nvec3 calcNormal( in vec3 pos)\n{\n\tvec2 eps = vec2( 0.001, 0.0 );\n\n\tvec3 nor = vec3( map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t\t\t\t\t map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n    \t\t\t\t map(pos+eps.yyx).x - map(pos-eps.yyx).x);\n\treturn normalize(nor);\n}\n\nmat3 base( in vec3 ww ) {\n    vec3  vv  = vec3(0.0,0.0,1.0);\n    vec3  uu  = normalize( cross( vv, ww ) );\n    return mat3(uu.x,ww.x,vv.x,\n                uu.y,ww.y,vv.y,\n                uu.z,ww.z,vv.z);\n}\nvec3 sphereToCart(vec3 r) {\n    return vec3(r.x*sin(r.z)*cos(r.y), r.x*sin(r.z)*sin(r.y), r.x*cos(r.z));\n}\nfloat simpleAO(vec3 p, vec3 n) {\n    mat3 b = base(n);\n    float ao = 0.0;\n    \n    int c = 3;\n    float it = 1.0/float(c*c);\n    \n    for(int y = 0; y < c; y++) {\n        for(int x = 0; x < c; x++) {\n            vec3 rd = sphereToCart( vec3(0.1, (float(x)/4.0)*PI, (float(y)/4.0)*PI) )*b;\n            float t = castRayF(p + rd*0.01, rd);\n            if(t<0.0)ao += it;\n        }\n    }\n    return ao;\n}\n\n\n//IQ's AO\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<2; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\n\nvec3 test(vec3 norm) {\n\tvec3 b = vec3(0.545,0.271,0.075);\n    return norm.y*b;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    vec2 mo = iMouse.xy/iResolution.xy;\n\tfloat time = 15.0 + iTime;\n    vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n    vec3 ro = vec3( -0.5+3.5*cos(0.1*time + 6.0*mo.x), 1.0 + 10.0*mo.y, 0.5 + 4.0*sin(0.1*time + 6.0*mo.x) );\n    vec3 ta = vec3( -0.5, 0.7, 0.5 );\n    mat3 ca = setCamera( ro, ta, 0.0 );\n    vec3 rd = ca * normalize( vec3(p.xy,2.0) );\n    \n    \n    \n    \n    \n    vec3 col = vec3(0.7, 0.9, 1.0) +rd.y*0.8;\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    \n    vec3 pos = ro + t*rd;\n    vec3 nor = calcNormal( pos );\n    vec3 light = vec3(cos(1.0),0.8,sin(1.0));\n    \n    if(m > -0.5) {\n        vec3 pnor = normalize(pos - vec3(0.0,1.0,0.0));\n        \n        float c = max(dot(nor,pnor),0.0);\n        \n        c*= 30.0;\n        \n        m += c;\n        m = 0.0;\n        \n        col = 0.45 + 0.35*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n        \n        col = test(nor);\n        \n        if( m<1.5 ) {\n\n            float f = mod( floor(5.0*pos.z) + floor(5.0*pos.x), 2.0);\n            col = 0.3 + 0.1*f*vec3(1.0);\n            \n        }\n        \n        float diff = max(dot(nor,light),0.0);\n        \n        float ao = calcAO(pos, nor);\n        \n        col = col*diff*0.6 + col*ao*0.4;\n    }\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    if(uv.x > 0.5) {\n        col = heatMap(steps/float(MAX_RAY_STEPS));\n    }\n    \n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}