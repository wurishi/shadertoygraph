{"ver":"0.1","info":{"id":"DscfDl","date":"1697739865","viewed":57,"name":"NoiseDeriv","username":"18smith111","description":"trying this:  https://iquilezles.org/articles/gradientnoise/ \n\nhttps://www.shadertoy.com/view/XdXBRH <== inigo quilez' example\nso what's wrong here? it seems almost the same as Iq's but with more artifacts.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["derivative"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 hash( in vec2 x )   \n{                        //(had trouble translating my hash function out of shaderlab, took from Iq)\n    const vec2 k = vec2( 0.3183099, 0.3678794 );\n    x = x*k + k.yx;\n    return -1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) );\n}\n// Function to calculate gradient noise\nvec3 gradnoise(in vec2 p) \n{\n    vec2 f = floor(p);\n    vec2 w = fract(p);\n\n    // Grid points\n    vec2 p0 = f + vec2(0.0, 0.0);\n    vec2 p1 = f + vec2(1.0, 0.0);\n    vec2 p2 = f + vec2(0.0, 1.0);\n    vec2 p3 = f + vec2(1.0, 1.0);\n\n    // Value at grid points\n    float va = dot(hash(p0), w - vec2(0.0, 0.0));\n    float vb = dot(hash(p1), w - vec2(1.0, 0.0));\n    float vc = dot(hash(p2), w - vec2(0.0, 1.0));\n    float vd = dot(hash(p3), w - vec2(1.0, 1.0));\n    //derivatives of va..vd?? this code was quickly and slightly modified to fit Iq's shader example\n    vec2 ga = hash( f + vec2(0.0,0.0) );\n    vec2 gb = hash( f + vec2(1.0,0.0) );\n    vec2 gc = hash( f + vec2(0.0,1.0) );\n    vec2 gd = hash( f + vec2(1.0,1.0) );\n\n\n    // Functions and derivatives\n    vec2 u = 6.0 * w * w * w * w * w - 15.0 * w * w * w * w + 10.0 * w * w * w;\n    vec2 du = 30.0 * w * w * (w * w - 2.0 * w + 1.0);\n\n\n    return vec3( va + u.x*(vb-va) + u.y*(vc-va) + u.x*u.y*(va-vb-vc+vd),   // value\n                 ga + u.x*(gb-ga) + u.y*(gc-ga) + u.x*u.y*(ga-gb-gc+gd) +  // derivatives\n                 du * (u.yx*(va-vb-vc+vd) + vec2(vb,vc) - va));\n\n\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 p = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n\n    vec3 f = 0.5 + 0.5 * gradnoise((p*(5.0+iTime*0.3)+vec2(iTime*0.6,iTime*0.25)));\n\n    // Split shader\n    if (p.x > 0.1) \n    {\n        f = f.yzx;\n    } \n    else \n    {\n        f = f.xxx;\n    }\n    //color\n    fragColor = vec4(f, 1.0);\n}","name":"Image","description":"","type":"image"}]}