{"ver":"0.1","info":{"id":"WdSBDK","date":"1590785012","viewed":406,"name":"perlin noise with octaves","username":"TheNosiriN","description":"noise with ocvtaves and warp coords. I always use this in games but I've never visualized it.","likes":12,"published":3,"flags":0,"usePreview":0,"tags":["procedural","noise","perlinnoise","smoke"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// perlin noise from: https://www.shadertoy.com/view/4sc3z2\n#define RES 20.0\n\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031,.11369,.13787));\n    p3 += dot(p3, p3.yxz+19.19);\n    return -1.0 + 2.0 * fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\n\n\n/*vec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yxz+19.19);\n    \n    vec3 result = vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x);\n    return sin(result) * cos(result);\n}*/\n\n\nfloat perlin_noise(vec3 p)\n{\n    vec3 pi = floor(p);\n    vec3 pf = p - pi;\n    \n    vec3 w = pf * pf * (3.0 - 2.0 * pf);\n    \n    return \tmix(\n        \t\tmix(\n                \tmix(dot(pf - vec3(0, 0, 0), hash33(pi + vec3(0, 0, 0))), \n                        dot(pf - vec3(1, 0, 0), hash33(pi + vec3(1, 0, 0))),\n                       \tw.x),\n                \tmix(dot(pf - vec3(0, 0, 1), hash33(pi + vec3(0, 0, 1))), \n                        dot(pf - vec3(1, 0, 1), hash33(pi + vec3(1, 0, 1))),\n                       \tw.x),\n                \tw.z),\n        \t\tmix(\n                    mix(dot(pf - vec3(0, 1, 0), hash33(pi + vec3(0, 1, 0))), \n                        dot(pf - vec3(1, 1, 0), hash33(pi + vec3(1, 1, 0))),\n                       \tw.x),\n                   \tmix(dot(pf - vec3(0, 1, 1), hash33(pi + vec3(0, 1, 1))), \n                        dot(pf - vec3(1, 1, 1), hash33(pi + vec3(1, 1, 1))),\n                       \tw.x),\n                \tw.z),\n    \t\t\tw.y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/RES;\n    vec3 coords = vec3(vec2(uv.x, uv.y + iTime*0.5), iTime*0.5);\n    \n    int octaves = 3;\n    \n    float frequency = 0.5;\n    float amplitude = 1.0;\n    float persistence = 0.9;\n    float roughness = 2.0;\n    \n    float warpAmplitude = 10.0;\n   \tfloat warpFrequency = 0.4;\n    \n    float col;\n    for (int i=0; i<octaves; i++)\n    {\n        float warp = perlin_noise( coords * warpFrequency );\n        coords += warp * warpAmplitude;\n        \n        col += perlin_noise( coords * frequency ) * amplitude;\n       \tfrequency *= roughness;\n        amplitude *= persistence;\n    }\n    \n    \n\tfragColor = vec4(vec3(col), 1.0);\n}","name":"Image","description":"","type":"image"}]}