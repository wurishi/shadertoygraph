{"ver":"0.1","info":{"id":"tddXWH","date":"1571926965","viewed":850,"name":"printed circuit","username":"And390","description":"Experiments with voronoi noise, inspired by https://www.shadertoy.com/view/4sl3Dr, but this one uses a modified approach to generate circuit.","likes":21,"published":1,"flags":0,"usePreview":0,"tags":["circuitboardschemaelectricelectricitywiresnetwork"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n#define PI 3.14159265359\n\nvec2 rotate(vec2 p, float a)\n{\n\treturn vec2(p.x * cos(a) - p.y * sin(a), p.x * sin(a) + p.y * cos(a));\n}\n\nfloat rand(float n)\n{\n    return fract(sin(n) * 43758.5453123);\n}\nfloat rand(vec2 n)\n{\n    return fract(sin(dot(n, vec2(591.32,391.32))));\n}\nfloat rand(vec3 n)\n{\n    return fract(sin(dot(n, vec3(591.32,391.32,623.54))));\n}\n\nvec2 rand2(in vec2 p)\n{\n\treturn fract(vec2(sin(p.x * 591.32 + p.y * 154.077), cos(p.x * 391.32 + p.y * 49.077)));\n}\n\nconst float voronoiRandK = 0.8;\n\nvec3 voronoi3(in vec2 x, out vec4 cellCenters)\n{\n\tvec2 p = floor(x);\n\tvec2 f = fract(x);\n\n\tvec2 i1 = vec2(0.0);\n\tvec2 i2 = vec2(0.0);\n\tvec3 res = vec3(8.0);\n\tfor(int j = -1; j <= 1; j ++)\n\t{\n\t\tfor(int i = -1; i <= 1; i ++)\n\t\t{\n\t\t\tvec2 b = vec2(i, j);\n\t\t\tvec2 r = vec2(b) - f + rand2(p + b) * voronoiRandK;\n\n\t\t\t//float d = max(abs(r.x), abs(r.y));\n\t\t\tfloat d = (abs(r.x) + abs(r.y));\n\n\t\t\tif (d < res.x)\n\t\t\t{\n\t\t\t\tres.z = res.y;\n\t\t\t\tres.y = res.x;\n\t\t\t\tres.x = d;\n\t\t\t\ti2 = i1;\n\t\t\t\ti1 = p + b;\n\t\t\t}\n\t\t\telse if (d < res.y)\n\t\t\t{\n\t\t\t\tres.z = res.y;\n\t\t\t\tres.y = d;\n\t\t\t\t//r2 = r;\n\t\t\t\ti2 = p + b;\n\t\t\t}\n\t\t\telse if (d < res.z)\n\t\t\t{\n\t\t\t\tres.z = d;\n\t\t\t}\n\t\t}\n\t}\n\tcellCenters = vec4(i1,i2);\n\treturn res;\n}\n\nfloat cubicPulse( float c, float w, float x )\n{\n    x = abs(x - c);\n    if( x>w ) return 0.0;\n    x /= w;\n    return 1.0 - x*x*(3.0-2.0*x);\n}\n\nfloat orderedRand(float x, float y) {\n\treturn rand(dot(x > y ? vec2(y,x) : vec2(x,y), vec2(123.23,532.12)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord / iResolution.xy - 0.5) * 2.0;\n\tvec2 suv = uv;\n\tuv.x *= iResolution.x / iResolution.y;\n\n\tuv = rotate(uv, sin(iTime * 0.10));\n\tuv.x += iTime * 0.3;\n\n\t//  first wire\n\tfloat scale = 4.;\n\tfloat width = 0.6;\n\tvec4 cellCenters;\n\tvec3 vr = voronoi3(uv * scale + 10.0, cellCenters);\n\tfloat d = vr.y - vr.x;\n\tif (vr.z - vr.y < width && vr.y - vr.x < width)    //connections between cell corners\n\t\td = max(width - (vr.z - vr.y), d);\n\tvec2 cellHashes = vec2(rand(cellCenters.xy), rand(cellCenters.zw));\n\tfloat wire = cubicPulse(width, 0.06, d);\n\n\t//  light\n\tfloat lightX = (rotate(uv, PI/8.).x+iTime*0.5)*5.;\n\tfloat lightHash1 = rand(floor(lightX));\n\tfloat lightValue1 = fract(lightX);\n\tlightX = (rotate(uv, PI*5./8.).x+iTime*0.2)*5.;\n\tfloat lightHash2 = rand(floor(lightX)+0.5);\n\tfloat lightValue2 = fract(lightX);\n\tlightX = (rotate(uv, PI*9./8.).x+iTime*0.2)*5.;\n\tfloat lightHash3 = rand(floor(lightX)+0.5);\n\tfloat lightValue3 = fract(lightX);\n\tlightX = (rotate(uv, PI*13./8.).x+iTime*0.2)*5.;\n\tfloat lightHash4 = rand(floor(lightX)+0.5);\n\tfloat lightValue4 = fract(lightX);\n\tfloat light = 0.;\n\tfloat lightFrequency = 0.002;\n\tif (rand(vec3(cellHashes.xy,lightHash1)) < lightFrequency)  light =  wire*cubicPulse(0.5,0.25,lightValue1)*3.;\n\tif (rand(vec3(cellHashes.xy,lightHash2)) < lightFrequency)  light += wire*cubicPulse(0.5,0.25,lightValue2)*3.;\n\tif (rand(vec3(cellHashes.xy,lightHash3)) < lightFrequency)  light += wire*cubicPulse(0.5,0.25,lightValue3)*3.;\n\tif (rand(vec3(cellHashes.xy,lightHash4)) < lightFrequency)  light += wire*cubicPulse(0.5,0.25,lightValue4)*3.;\n\n\t//  second parallel wire\n\tif ((cellHashes.x - cellHashes.y) > 0.0)  {\n\t\tfloat w = cubicPulse(width-0.1, 0.06, d);\n\t\twire += w;\n\t}\n\n\t//  background wire layer\n\tscale *= 0.4;\n\tvec3 vr2 = voronoi3(uv * scale + 30.0, cellCenters);\n\td = vr2.y - vr2.x;\n\tif (vr2.z - vr2.y < width && vr2.y - vr2.x < width)    //connections between cell corners\n\t\td = max(width - (vr2.z - vr2.y), d);\n\tcellHashes = vec2(rand(cellCenters.xy), rand(cellCenters.zw));\n\tfloat backWire = cubicPulse(width, 0.06, d);\n\tif ((cellHashes.x - cellHashes.y) > 0.0)  {\n\t\tfloat w = cubicPulse(width-0.1, 0.06, d);\n\t\tbackWire += w;\n\t}\n\twire = max(wire, backWire * 0.3);\n\n\t//  some background noise\n\twire += vr.x*0.3 + 0.3;\n\n\t//  apply light\n\twire = wire * 0.4 + light;\n\tvec3 col = clamp(vec3(0.4, 0.8, 1.0) * wire, vec3(0.), vec3(1.));\n\tcol *= 0.7;\n\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}