{"ver":"0.1","info":{"id":"MlGyWz","date":"1537643370","viewed":154,"name":"Shooting the Moon","username":"dreamur","description":"I'm sure I'm not the only one this has happened to","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["moon","hearts","cards","spades"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265\n\n// concept from \"The Book of Shaders\"\n//  Chapter 7: Shapes\n//  https://thebookofshaders.com/07/\nfloat lamp( in vec2 _st, in float edges )\n{   \n    float a = atan(_st.x, _st.y) + .2;\n    float b = PI * 2.0 / edges;\n    \n    return cos( floor(0.5 + a / b) * b - a ) * \n           length( _st * 0.83 / cos(length(_st * 2.75)) );\n}\n\nvec2 rotate( in vec2 _st, in float angle )\n{\n\treturn mat2( cos(angle * PI), -sin(angle * PI),\n                 sin(angle * PI), cos(angle * PI) ) * _st;    \n}\n\nfloat circle( in vec2 _st, in float radius, in float inner, in float outer )\n{\n\tvec2 dist = _st - vec2(0.5);\n    return 1.0 - smoothstep( radius * inner, radius * outer, dot(dist, dist) * 4.0 );  \n}\n\nfloat rect( in vec2 _st, in vec2 xCoords, in vec2 yCoords )\n{\n    vec2 bl = step( vec2(xCoords.x, yCoords.x), _st );\n    vec2 tr = step( vec2(xCoords.y, yCoords.y), 1.0 - _st );\n    \n\treturn bl.x * bl.y * tr.x * tr.y;   \n}\n\nfloat smoothRect( in vec2 _st, in vec2 xCoords, in vec2 yCoords, in vec2 shading )\n{\n    vec2 bl = smoothstep( vec2(xCoords.x, yCoords.x) * shading.x, vec2(xCoords.x, yCoords.x) * 1.01, _st );\n    vec2 tr = smoothstep( vec2(xCoords.y, yCoords.y) * shading.y, vec2(xCoords.y, yCoords.y) * 1.01, _st );\n    \n\treturn bl.x * bl.y * tr.x * tr.y;\n}\n\n// concept from \"The Book of Shaders\"\n//  Chapter 7: Shapes\n//  https://thebookofshaders.com/07/\nfloat rect2( in vec2 _st, in vec2 scale, in vec2 offset, in float roundedPct )\n{\n\tfloat tmp = length(max( abs(_st * scale - offset) - 0.45  , 0.0));\n  \treturn 1.0 - step(roundedPct, tmp);  \n}\n\n// from \"The Book of Shaders\"\n//  Chapter 11: Noise\n//  https://thebookofshaders.com/11/\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\n// from \"The Book of Shaders\"\n//  Chapter 11: Noise\n//  https://thebookofshaders.com/11/\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f*f*(3.0-2.0*f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n\n// concept from \"The Book of Shaders\"\n//  Chapter 7: Shapes\n//  https://thebookofshaders.com/07/\nfloat heart( in vec2 _st, in float innerBlur, in float outerBlur )\n{\n    \n\tfloat r = length(_st) * 2.0;\n    float a = atan(_st.x, _st.y);\n    \n    float pct = cos(r * a);\n    \t  pct = cos( pct * cos( a * 0.99 * (pct * r - 1.45) ) * sin(a * 2.2 - a * 3.6) );\n    \n    return 1.0 - smoothstep(pct - innerBlur, pct + outerBlur, r);\n}\n\n//----------------------------------------------------------//\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st    = fragCoord / iResolution.xy;\n    \t \n    \t st   -= 0.5;\n    \t st.x *= iResolution.x / iResolution.y;\n    \t st   += 0.5;\n    \n\n    float pct, res, sinusoidalTime = sin(iTime), tmp1;\n    vec2 tmp2  = vec2(0.0);\n    vec3 col   = vec3(0.047, 0.22, 0.341), tmp3 = vec3(0.0);\n    \n    \t // jitter\n    \t tmp2  = st + vec2( sin(iTime * 100.0) / 650.0, cos(iTime * 100.0) / 650.0 );\n    \t \n    \n         // wall design\n    \t res = 0.0, pct = 0.0;\n    \t for(int i = 0; i < 5; i++)\n         {\n             pct += rect( tmp2 + vec2(0.75 - res, 0.0), vec2(0.491), vec2(0.0) );      \t \n             res += 0.37; \n         }    \n    \t col  = mix(col, vec3(0.0, 0.45, 0.8), pct);\n    \n    \t res = 0.0, pct = 0.0;\n    \t for(int i = 0; i < 8; i++)\n         {\n             pct += rect( tmp2 + vec2(0.76 - res, 0.0), vec2(0.4965), vec2(0.0) );         \t \n             res += 0.28 * 0.78; \n         }\n    \t col  = mix(col, vec3(0.0, 0.45, 0.8), pct);\n    \n    \t res = 0.0, pct = 0.0;\n    \t for(int i = 0; i < 5; i++)\n         {\n             pct += rect( tmp2 + vec2(0.624 - res, 0.0), vec2(0.4952), vec2(0.0) );         \t \n             res += 0.32 * 1.02; \n         }\n    \t col  = mix(col, vec3(0.494, 0.78, 1.), pct);\n    \n\n    \t // blood splatter(s) \t     \n    \t pct   = smoothstep(0.68, 0.68, noise(tmp2.yx * 31.0));\n    \t tmp3  = mix(col, vec3(0.95, 0.0, 0.0), pct);\n    \n    \t pct  *= smoothstep(0.62, 0.62, noise(tmp2 * 35.0 + tmp2 * 28.0));\n    \t col   = mix(col, tmp3, pct); \n    \n    \n         // bullet holes  - add variance to y pos\n    \t res = -0.75;\n    \t pct = 0.0;\n    \t tmp1 = 0.21;\n         pct += circle(tmp2 - vec2(res, tmp1), 0.0007, 0.35, 1.1);                                 \n    \t res += 0.56;\n    \t tmp1 += 0.17;   \n    \t pct += circle(tmp2 - vec2(res, tmp1), 0.0007, 0.35, 1.1);                                 \n    \t res += 0.27;\n\t\t tmp1 -= 0.24;\n\t\t pct += circle(tmp2 - vec2(res, tmp1), 0.0007, 0.35, 1.1);   \n    \t res += 0.6;\n\t\t tmp1 += 0.31;\n\t\t pct += circle(tmp2 - vec2(res, tmp1), 0.0007, 0.35, 1.1);   \n    \t col   = mix(col, vec3(0.0), pct);\n    \n    \n    \t // picture\n    \t tmp2  = fragCoord / iResolution.xy;    \t \n    \t tmp2 -= 0.5;    \t \n    \t tmp2.y += mod(tmp2.y + iTime * 2.5 - 4.5, 12.5); \n    \t tmp2.x *= iResolution.x / iResolution.y;    \n    \t tmp2  = rotate(tmp2, -0.08);    \n    \t tmp2 += 0.5;    \n    \t tmp2  = tmp2 + vec2( sin(iTime * 100.0) / 650.0, cos(iTime * 100.0) / 650.0 ) - vec2(0.25, 0.9);        \n             \n             \n     \t pct   = rect( tmp2, vec2(0.25), vec2(0.15) );\n    \t col   = mix( col, vec3(0.4, 0.2, 0.2), pct );    \n    \t pct   = rect( tmp2, vec2(0.29), vec2(0.20) );\n    \t col   = mix( col, vec3(0.71), pct );    \n    \t pct   = circle( tmp2, 0.14, 1.0, 1.0 );\n    \t col   = mix( col, vec3(0.98, 0.98, 0.824), pct );       \n\t \t pct  *= circle( tmp2 - vec2(0.055, 0.0), 0.1, 0.67, 1.37 );\n    \t col   = mix( col, vec3(0.71), pct);    \n    \t pct  *= circle(tmp2 - vec2(0.0), 0.0007, 0.35, 1.1);   \n    \t col   = mix(col, vec3(0.0), pct);\n    \n\n    \t // floor lights\n    \t tmp2  = st + vec2( sin(iTime * 100.0) / 650.0, cos(iTime * 100.0) / 650.0 );\n    \t pct   = circle(st - vec2(0.8, -0.25), 0.62, - 3.0, 2.00);\n    \t col   = mix( col, vec3(0.98, 0.98, 0.824), pct ); \n    \n    \t pct   = circle(st - vec2(-0.8, -0.25), 0.62, - 3.0, 2.00);\n    \t col   = mix( col, vec3(0.98, 0.98, 0.824), pct ); \n    \n    \t pct   = circle(st - vec2(0.0, -0.25), 0.48, - 3.0, 2.00);\n    \t col   = mix( col, vec3(0.98, 0.98, 0.824), pct ); \n    \n    \n         // table\n    \t pct   = 1.0 - step( 0.475, tmp2.y );\n    \t col   = mix( col, vec3(.055, .475, .616),  pct );\n     \n    \n         // table edge\n    \t pct   = rect( tmp2 + vec2(0.0, 0.075), vec2(-0.39, -0.50), vec2(0.5, 0.40) );\n    \t col   = mix( col, vec3(.02, .32, .32), pct );\n\n    \t pct  *= 1.0 - smoothRect( tmp2 + vec2(0.5, 0.0270), vec2(0.1, 0.1), vec2(0.49999, 0.49999), vec2(0.987, 0.65) );\n    \t col   = mix( col, vec3(0.012, 0.176, 0.176), pct );\n    \n    \t res   = 0.0, pct = 0.0;\n    \t for(int i = 0; i < 12; i++)\n         {           \n             pct += circle( tmp2 - vec2(res - 0.825, 0.0), 0.00025, 0.244, 0.245 );             \n             res += 0.15;\n         }\n    \t col  = mix( col, vec3(0.42, 0.75, 0.18),  pct );\n    \t \n\n         // pockets  \n    \t tmp2  = st + vec2( sin(iTime * 100.0) / 650.0, cos(iTime * 100.0) / 650.0 );\n    \t tmp2.y = tmp2.y / 0.472 - 0.5;  \n    \t pct   = circle(tmp2, 0.05, 0.244, 0.245);        \t \n    \t res   = rect( st + vec2(0.0, 0.050), vec2(0.445, 0.445), vec2(0.475, 0.475) );\n    \t pct  += res - (pct * res);   \n    \t res   = circle(tmp2 + vec2(0.0, 0.083), 0.05, 0.244, 0.245);\n    \t pct  += res - (pct * res);  \n    \n    \t tmp2  += vec2(0.915, 0.0);\n    \t pct  += circle(tmp2, 0.05, 0.244, 0.245);        \t \n    \t res   = rect( st + vec2(0.915, 0.050), vec2(0.445, 0.445), vec2(0.475, 0.475) );\n    \t pct  += res - (pct * res);    \t \n    \t res   = circle(tmp2 + vec2(0.0, 0.083), 0.05, 0.244, 0.245);\n    \t pct  += res - (pct * res);\n    \n    \t tmp2  -= vec2(1.83, 0.0);\n    \t pct  += circle(tmp2, 0.05, 0.244, 0.245);         \t \n    \t res   = rect( st + vec2(-0.915, 0.050), vec2(0.445, 0.445), vec2(0.475, 0.475) );\n    \t pct  += res - (pct * res);   \n    \t res   = circle(tmp2 + vec2(0.0, 0.083), 0.05, 0.244, 0.245);\n    \t pct  += res - (pct * res);\n    \t col   = mix(col, vec3(0.05, 0.05, 0.05), pct);  \n    \n         // playing cards\n    \t tmp2  = st + vec2( sin(iTime * 100.0) / 650.0, cos(iTime * 100.0) / 650.0 );\n    \t tmp2  = tmp2 * 2.0 - 1.0;\t\t \n    \t pct   = smoothstep( -2.5, 1.5, -tmp2.y );       \n    \t tmp2 /= pct; \n    \t\n    \t \t// shadows -- lower layer\n    \t pct   = rect2( rotate(tmp2 - vec2(-1.8, -0.34), -0.5), vec2(10.0, 3.45), vec2(0.0), 0.08 ); \t\t\n    \t pct  += rect2( rotate(tmp2 - vec2(-0.87, -0.28), -0.49), vec2(10.0, 3.45), vec2(0.0), 0.08 );\t\t\n    \t pct  += rect2( rotate(tmp2 - vec2(-0.14, -0.36), -0.49), vec2(10.0, 3.45), vec2(0.0), 0.08 );\n    \t pct  += rect2( rotate(tmp2 - vec2(0.641, -0.412), -0.51), vec2(10.0, 3.45), vec2(0.0), 0.08 );\t\t\n    \t pct  += rect2( rotate(tmp2 - vec2(0.687, -0.28), -0.49), vec2(10.0, 3.45), vec2(0.0), 0.08 );\n    \t pct  += rect2( rotate(tmp2 - vec2(1.01, -0.34), -0.5), vec2(10.0, 3.45), vec2(0.0), 0.08 );\t\t\n    \t pct  += rect2( rotate(tmp2 - vec2(1.45, -0.32), -0.49), vec2(10.0, 3.45), vec2(0.0), 0.08 );\n    \t pct  += rect2( rotate(tmp2 - vec2(2., -0.34), -0.51), vec2(10.0, 3.45), vec2(0.0), 0.08 );\t\t\t\n    \t col   = mix(col, vec3(0.25), pct);\n    \n\t\t\t// cards -- lower layer\n\t\t pct   = rect2( rotate(tmp2 - vec2(-1.8, -0.34), -0.5), vec2(10.5, 3.5), vec2(0.0), 0.08 );\n\t     pct  += rect2( rotate(tmp2 - vec2(-0.87, -0.28), -0.49), vec2(10.5, 3.5), vec2(0.0), 0.08 );\n    \t pct  += rect2( rotate(tmp2 - vec2(-0.14, -0.36), -0.49), vec2(10.5, 3.5), vec2(0.0), 0.08 );\n    \t pct  += rect2( rotate(tmp2 - vec2(0.641, -0.412), -0.51), vec2(10.5, 3.5), vec2(0.0), 0.08 );\n    \t pct  += rect2( rotate(tmp2 - vec2(0.687, -0.28), -0.49), vec2(10.5, 3.5), vec2(0.0), 0.08 );\n    \t pct  += rect2( rotate(tmp2 - vec2(1.01, -0.34), -0.5), vec2(10.5, 3.5), vec2(0.0), 0.08 );\n    \t pct  += rect2( rotate(tmp2 - vec2(1.45, -0.32), -0.49), vec2(10.5, 3.5), vec2(0.0), 0.08 );\n    \t pct  += rect2( rotate(tmp2 - vec2(2., -0.34), -0.51), vec2(10.5, 3.5), vec2(0.0), 0.08 );   \n    \t col   = mix(col, vec3(1.0), pct);\n    \t \n    \t \t// shadows -- mid layer\n    \t pct   = rect2( rotate(tmp2 - vec2(-1.58, -0.31), -0.5), vec2(10.0, 3.45), vec2(0.0), 0.08 );\t\t\n    \t pct  += rect2( rotate(tmp2 - vec2(-1.1, -0.36), -0.51), vec2(10.0, 3.45), vec2(0.0), 0.08 );\t\t\n    \t pct  += rect2( rotate(tmp2 - vec2(-0.77, -0.38), -0.52), vec2(10.0, 3.45), vec2(0.0), 0.08 );\t\t\n\t \t pct  += rect2( rotate(tmp2 - vec2(1.67, -0.37), -0.52), vec2(10.0, 3.45), vec2(0.0), 0.08 );\t\t\n    \t col   = mix(col, vec3(0.25), pct);\n    \n    \t\t// cards -- mid layer\n    \t pct   = rect2( rotate(tmp2 - vec2(-1.58, -0.31), -0.5), vec2(10.5, 3.5), vec2(0.0), 0.08 );\n    \t pct  += rect2( rotate(tmp2 - vec2(-1.1, -0.36), -0.51), vec2(10.5, 3.5), vec2(0.0), 0.08 );\n    \t pct  += rect2( rotate(tmp2 - vec2(-0.77, -0.38), -0.52), vec2(10.5, 3.5), vec2(0.0), 0.08 );\n    \t pct  += rect2( rotate(tmp2 - vec2(1.67, -0.37), -0.52), vec2(10.5, 3.5), vec2(0.0), 0.08 );\n    \t col   = mix(col, vec3(1.0), pct);\n    \n    \t\t// shadow -- upper\n    \t pct   = rect2( rotate(tmp2 - vec2(-0.47, -0.34), -0.51), vec2(10.0, 3.45), vec2(0.0), 0.08 );\n    \t col   = mix(col, vec3(0.25), pct);\n    \n    \t\t// card -- upper\n    \t pct   = rect2( rotate(tmp2 - vec2(-0.47, -0.34), -0.51), vec2(10.5, 3.5), vec2(0.0), 0.08 );\n    \t col   = mix(col, vec3(1.0), pct);   \n    \t\n    \n         // card details\t-- |shape_rotation| < |card_rotation|\n    \t tmp2  = st + vec2( sin(iTime * 100.0) / 650.0, cos(iTime * 100.0) / 650.0 );\n    \t tmp2  = rotate(tmp2, 0.49);\n    \t tmp2  = tmp2 * 29.0;\n    \n    \t\t// rotation -- card [50]\n    \t pct   = heart(tmp2 - vec2(10.45, 5.95), 0.0, 0.0);   \n    \t pct  += heart(tmp2 - vec2(10.95, 3.15), 0.0, 0.0); \n      \t pct  += heart(tmp2 - vec2(11.45, -25.65), 0.0, 0.0);\n    \n    \t\t// rotation -- card [51]\n    \t tmp2  = rotate(tmp2, 0.01);\n    \t pct  += heart(tmp2 - vec2(9.75, -21.85), 0.0, 0.0);\n\t\t pct  += heart(tmp2 - vec2(10.65, -37.05), 0.0, 0.0);    \n    \t pct  += heart(tmp2 - vec2(10.35, -2.25), 0.0, 0.0);  \n    \t    \n    \t\t// rotation -- card [52]\n    \t tmp2  = rotate(tmp2, -0.03);\n    \t pct  += heart(tmp2 - vec2(10.55, -4.75), 0.0, 0.0);\n    \t pct  += heart(tmp2 - vec2(13.35, -32.45), 0.0, 0.0);\n    \n    \t \t// rotation -- card [49]\n    \t tmp2  = rotate(tmp2, 0.04);\n    \t pct  += heart(tmp2 - vec2(11.25, -5.35), 0.0, 0.0);\n    \t pct  += heart(tmp2 - vec2(10.0, -13.35), 0.0, 0.0);\n    \t pct  += heart(tmp2 - vec2(10.65, -22.55), 0.0, 0.0);\n    \t pct  += heart(tmp2 - vec2(9.95, -31.0), 0.0, 0.0);\n    \n    \t col   = mix(col, vec3(0.82, 0.0, 0.0), pct);\n   \n    \t\t// spade\n\t\t tmp2  = rotate(tmp2, -0.01);\n    \t pct   = heart(tmp2 - vec2(10.65, -8.95), 0.0, 0.0);\n    \t pct  += step(lamp( ( rotate(tmp2, 0.25) - vec2(0.70, -14.35)) / 1.33, 3.0), 0.25);    \n    \t col   = mix(col, vec3(0.0), pct);\n    \n    \n         // billiard balls\n    \t tmp2  = st + vec2( sin(iTime * 100.0) / 650.0, cos(iTime * 100.0) / 650.0 );\t\t\t\t\t\t\t\t\t\t\t// 8\n    \t tmp2.y = st.y / 0.38 + 0.2;\n    \t pct   = circle(tmp2, 0.0041, - 1.65, 2.00);\n    \t col   = mix(col, vec3(0.0) + cos(iTime * 2.0) / 2.5, pct);\n    \n    \t tmp2  = st / vec2(1.0, 0.38) + vec2( sin(iTime * 100.0) / 500.0, cos(iTime * 100.0) / 500.0 ) - vec2(-0.18, 0.02);\n    \t pct   = circle(tmp2, 0.0041, - 1.65, 2.00);\n    \t col   = mix(col, vec3(0.0) + cos(iTime * 2.0) / 2.5, pct);\n    \n    \t tmp2  = st / vec2(1.0, 0.38) + vec2( sin(iTime * 100.0) / 500.0, cos(iTime * 100.0) / 500.0 ) - vec2(0.4, 0.475);\n    \t pct   = circle(tmp2, 0.0041, - 1.65, 2.00);\n    \t col   = mix(col, vec3(0.0), pct);        \n    \n    \t tmp2  = st + vec2( sin(iTime * 100.0) / 500.0, cos(iTime * 100.0) / 500.0 );\n    \t pct   = circle(tmp2 + vec2(0.0, 0.35), 0.027, 0.244, 0.245); \n    \t col   = mix( col, vec3(0.0), pct );\n    \n    \t pct   = circle(tmp2 + vec2(0.18, 0.27), 0.02, 0.244, 0.245);\t\n    \t col   = mix( col, vec3(0.85), pct );\n    \t pct   = rect( tmp2 + vec2(0.18, 0.27), vec2(0.465, 0.465), vec2(0.488, 0.488) );\n    \t col   = mix( col, vec3(0.7, 0.0, 0.0), pct );\n    \n\t\t pct   = circle(tmp2 + vec2(-0.4, 0.1), 0.018, 0.244, 0.245);\n    \t col   = mix( col, vec3(0.85), pct );\n        \n    \t tmp2.x = tmp2.x / 0.472 * 1.15;\n    \t tmp2.y = tmp2.y / 0.472;\n         pct   = circle(tmp2 + vec2(-0.7, 0.16), 0.018, 0.244, 0.245);\n    \t col   = mix( col, vec3(0.85), pct );\n    \n    \n         // lamp body & movement      \n     \t tmp2 = st + vec2( sin(iTime * 100.0) / 650.0, cos(iTime * 100.0) / 650.0 );\n\t     tmp2.x = tmp2.x + sinusoidalTime - 0.5;\n    \t tmp2.y = tmp2.y / sin(2.64) - 2.9 + abs(cos(iTime)); \n    \t pct   = step(lamp(rotate(tmp2, .27 - sin(iTime * 1.0) / 10. ), 3.0), .25);\n    \t col   = mix(col, vec3(0.537, 0.502, 0.278), pct);   \n\n         // darken everything\n    \t col  *= vec3(0.5);\n       \n         // lamp's glow & movement\n    \t tmp2.x = st.x + sinusoidalTime + sinusoidalTime / 2.5;\n    \t tmp2.y = st.y / 0.30;\t\t\n    \t pct   = circle(tmp2, 0.34, - 2.65, 2.00);\n    \t col   = mix( col, vec3(0.98, 0.98, 0.824), pct );   \n       \n    \t // grain\n    \t tmp2  = rotate((tmp2 * 1.5 - vec2(-0.75, 0.0)), iTime) * 20.0 * mod(0.627, 1.0) ;\n    \t pct   = smoothstep(0.88, 0.88, noise( tmp2 ));\n    \t tmp3  = mix(col, vec3(0.0, 0.0, 0.0), pct);   \n    \t pct  *= smoothstep(0.81, 0.82, noise( st * 27.0 * mod( (st.x - 12.0) * sin(iTime * 4.8) * cos(iTime * 3.4), 1.0) ));    \t\n    \t col   = mix(col, tmp3, pct);\n    \n    \t // colorize - grayscale\n \t\t vec4 c4 = mat4( 0.35,\t0.35, \t0.35,  \t0.0,\n                        0.35, \t0.35, \t0.35, \t0.0,\n                        0.35, \t0.35,\t0.35, \t0.0,\n                        0.0,\t0.0,\t0.0, \t0.0 ) * vec4(col, 1.0);\n    \n    \t //vec4 c4 = vec4( vec3(dot(vec3(0.35), col)), 1.0);\t\t//<< a terse-syntax for the above*/\n    \n    \t //vec4 c4 = mat4(1.0) * vec4(col, 1.0);\n\n    \n    fragColor = vec4(c4);\n}","name":"Image","description":"","type":"image"}]}