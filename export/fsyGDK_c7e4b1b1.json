{"ver":"0.1","info":{"id":"fsyGDK","date":"1632235286","viewed":840,"name":"Distorting Hexfield","username":"sagieL","description":"Thanks to Art of Code's tutorial on hexagonal tiling.\nI wanted to make a shader in which a distortion \"forcefield\" will manipulate a grid of cells.\nLeft click and move the mouse to control the forcefield yourself!","likes":25,"published":3,"flags":0,"usePreview":0,"tags":["2d","grid","distortions","tiling","hexagons","forcefield","cineshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"Distorting Hexfield\" by Sagie Levy 2021.\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Email:sagielevy21@gmail.com\n\n#define scale 16.\n#define distortionRadius 4.5\n#define displacementDistFactor 1.7 // Cannot be more than 2.1~ otherwise cells will be out of bounds of 2nd ring neighbour.\n#define minShrinkFactor .2\n\n#define colorA vec3(0.914, 0.278, 0.047) * 10.\n#define colorB vec3(0.047, 0.682, 0.914) * 2.\n\n#define distortionOriginsCount 3\n\n// Returns a psuedo-random float between 0 and 1.\nfloat Hash11(float c) {\n    return fract(4384.545 * sin(c * 734.322 + 143.));\n}\n\nfloat HexDist(vec2 p) {\n\tp = abs(p);\n    \n    float c = dot(p, normalize(vec2(1,1.73)));\n    c = max(c, p.x);\n    \n    return c;\n}\n\n// output: xy - local uv, zw - hex coords. \n// Note: zw are not whole numbers!\nvec4 HexCoords(vec2 uv) {\n\tvec2 r = vec2(1, 1.73);\n    vec2 h = r * .5;\n    \n    vec2 a = mod(uv, r)-h;\n    vec2 b = mod(uv-h, r)-h;\n    \n    vec2 gv = dot(a, a) < dot(b,b) ? a : b;\n    \n    vec2 id = uv-gv;\n    return vec4(gv.x, gv.y, id.x,id.y);\n}\n\nvec2 HexCoords2UV(vec4 hc) {\n    return hc.xy + hc.zw;\n}\n\n// Offsets to original hex cell and its first and second ring neighbours.\nvec2[] offsets = vec2[](\n    vec2(0, 0), vec2(1, 1.73) * .5, vec2(1, -1.73) * .5, vec2(1, 0), vec2(-1, 0), vec2(-1, -1.73) * .5, vec2(-1, 1.73) * .5,\n    vec2(2, 0), vec2(2. * .75, -1.73 * .5), vec2(2. * .75, 1.73 * .5), vec2(1, 1.73), \n    vec2(0, 1.73), vec2(-1, 1.73), vec2(-2, 0), vec2(-2. * .75, 1.73 * .5),\n    vec2(-2. * .75, -1.73 * .5), vec2(-1., -1.73), vec2(0, -1.73), vec2(1., -1.73)\n);\n\nint offsetsCount = 1 + 6 + 12;\n\n// Returns displace effect value as factor of distance from distortion origin.\n// Result is in 0..1 range where 0 is no effect and 1 is max effect.\nfloat DisplaceEffect(vec4 hexCoord, vec2 distortOrigin) {    \n    return 1. - smoothstep(.0, distortionRadius, length(hexCoord.zw - distortOrigin));\n}\n\n// Returns local position of displaced hex.\nvec2 DisplaceHex(vec4 hexcoords, vec2 distortOrigin) {\n    vec2 displacementDir = normalize(distortOrigin - hexcoords.zw);\n    vec2 displacement = (length(displacementDir) < 0.001 ? normalize(hexcoords.xy) : displacementDir) * \n        displacementDistFactor * DisplaceEffect(hexcoords, distortOrigin);\n    \n    return hexcoords.xy + displacement;\n}\n\nfloat DisplacedHexSize(vec4 hexcoords, vec2 distortOrigin) {\n    return mix(1., minShrinkFactor, DisplaceEffect(hexcoords, distortOrigin));\n}\n\nvec2 GetInteractiveDistortionOrigin() {\n    return (iMouse.xy - .5 * iResolution.xy) * scale / iResolution.y;\n}\n\nvec2 GetAutoDistortionOrigin(int i) {\n    i++; // Do not allow i to ever be 0 as all random values will be identical in that case.\n    \n    float xSpeed = (iTime + 12.43) * mix(.4, 2., Hash11(float(i) * 524.));\n    float ySpeed = (iTime + 87.98) * mix(.4, 2., Hash11(float(i) * 194.));\n    \n    float aspect = iResolution.x / iResolution.y;\n    return vec2(sin(xSpeed) * aspect, cos(ySpeed)) * .5 * scale;\n}\n\nvec3 ApplyInteractiveDistortionEffect(vec4 hc) {\n    vec3 col = vec3(0);\n    vec2 distortionOrigin = GetInteractiveDistortionOrigin();\n    \n    for (int i = 0; i < offsetsCount; i++) {\n        vec2 offset = offsets[i];\n        \n        vec4 currHC = HexCoords(HexCoords2UV(hc) - offset);\n        \n        vec2 displacedPos = DisplaceHex(currHC, distortionOrigin) + offset;\n        float displacedShrinkFactor = DisplacedHexSize(currHC, distortionOrigin);\n        float colorFactor = smoothstep(minShrinkFactor, 1., displacedShrinkFactor);\n        float currDistFromHexFactor = max(.5 * displacedShrinkFactor - HexDist(displacedPos), 0.);\n        \n        col += mix(colorA, colorB, colorFactor) * currDistFromHexFactor;\n        //col += vec3(DisplaceEffect(currHC, distortionOrigin), 0, 0); // Debug: show effect area.\n    }\n    \n    return col;\n}\n\nvec3 ApplyAutoDistortionEffect(vec4 hc) {\n    vec3 col = vec3(0);\n\n    for (int i = 0; i < offsetsCount; i++) {        \n        vec2 offset = offsets[i];\n        vec4 currHC = HexCoords(HexCoords2UV(hc) - offset);\n        \n        vec2 maxEffectDistortionOrigin;\n        float maxEffectValue = -1.;\n        \n        for (int j = 0; j < distortionOriginsCount; j++) {\n            vec2 currDistortionOrigin = GetAutoDistortionOrigin(j);\n            float currEffect = DisplaceEffect(currHC, currDistortionOrigin);\n            \n            if (maxEffectValue < currEffect) {\n                maxEffectValue = currEffect;\n                maxEffectDistortionOrigin = currDistortionOrigin;\n            }\n        }\n\n        vec2 displacedPos = DisplaceHex(currHC, maxEffectDistortionOrigin) + offset;\n        float displacedShrinkFactor = DisplacedHexSize(currHC, maxEffectDistortionOrigin);\n        float colorFactor = smoothstep(minShrinkFactor, 1., displacedShrinkFactor);\n        float currDistFromHexFactor = max(.5 * displacedShrinkFactor - HexDist(displacedPos), 0.);\n\n        col += mix(colorA, colorB, colorFactor) * currDistFromHexFactor;\n    }\n    \n    return col;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n    uv *= scale;\n    \n    vec4 hc = HexCoords(uv);\n    vec3 col = (iMouse.z > 1.) ? ApplyInteractiveDistortionEffect(hc) : ApplyAutoDistortionEffect(hc);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}