{"ver":"0.1","info":{"id":"4dBfRV","date":"1501088137","viewed":353,"name":"[SH17C] young_interference","username":"shadypanda","description":"Illustration of light interference (Young's experiment with multiple slits).\nClick: source position (on the right half: puts source far to the left).\nSpace bar: toggle instantaneous/cumulative energy display.\nKey 1-9: toggle slit activation.","likes":6,"published":1,"flags":48,"usePreview":0,"tags":["interferences","young"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst int KEY_TOGGLE_AVERAGE = 32; // space\nconst int KEYCODE_STATE = 0;\nconst int KEYCODE_KEYPRESS = 1;\nconst int KEYCODE_TOGGLE = 2;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n//    const int averagingNbOfFrames = 600;\n//    \n//    if((iFrame / averagingNbOfFrames) % 2 == 0)\n//\t    fragColor = texture(iChannel0, uv);\n//    else\n//        fragColor = texture(iChannel1, uv);\n    \n    \n\tif(texelFetch(iChannel2, ivec2(KEY_TOGGLE_AVERAGE, KEYCODE_TOGGLE), 0).x == 0.0)\n\t    fragColor = texture(iChannel0, uv);\n    else\n        fragColor = texture(iChannel1, uv);\n        \n\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nconst int KEY_NUM1 = 49; // space\nconst int KEYCODE_STATE = 0;\nconst int KEYCODE_KEYPRESS = 1;\nconst int KEYCODE_TOGGLE = 2;\n\nvec4 colorFromEnergy(float energy)\n{\n    return vec4(energy, energy, energy, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float pi = 3.14159265359;\n    \n    const vec4 backgroundColor = vec4(0.7, 0.7, 0.7, 1.0);\n    \n\tconst float globalScale = 10.0;\n    \n    const float wallHalfThickness = 0.006;\n    const float slitHalfSize = 0.01;\n    \n    const float wallX = 0.0;\n    \n\tconst int nbOfSlits = 9; // must be 9 or less than 9\n\tconst float slitsY[nbOfSlits] = float[]\n        \t(-2.7, -1.77, -1.0, -0.421, 0.0, 0.666, 1.0, 1.9, 2.789 );\n    \n    bool isActiveSlit[nbOfSlits];\n    for(int s = 0; s < nbOfSlits; ++s)\n        isActiveSlit[s] = (texelFetch(iChannel2, ivec2(KEY_NUM1 + s, KEYCODE_TOGGLE), 0).x != 0.0);\n    // hereafter, hardcode defaulty activated slits\n    isActiveSlit[2] = !isActiveSlit[2];\n    isActiveSlit[3] = !isActiveSlit[3];\n    isActiveSlit[6] = !isActiveSlit[6];\n    isActiveSlit[7] = !isActiveSlit[7];\n    \n    int nbOfActiveSlits = 0;\n    for(int s = 0; s < nbOfSlits; ++s)\n        if(isActiveSlit[s])\n            ++nbOfActiveSlits;\n    \n//\tconst int nbOfSlits = 2;\n//\tconst float slitsY[nbOfSlits] = float[]( 1.0, -1.0 );\n    \n    vec2 slitsPos[nbOfSlits];\n    for(int s = 0; s < nbOfSlits; ++s)\n        slitsPos[s] = vec2(wallX, slitsY[s]);\n \n    \n    vec2 sourcePos = vec2(-777.0, 0.0);\n    \n    float period = 0.054321;\n    float wavelength = 0.0777;\n    float energyScale = 0.8 / float(nbOfActiveSlits);\n    \n    float diffractionAngle = 50.0; // in degrees\n    float cosDiffractionAngle = cos(diffractionAngle * pi / 180.0);\n    \n    float timeFreq = 1.0 / period;\n    float spaceFreq = 1.0 / wavelength;\n    \n\tvec2 pos = globalScale * (fragCoord.xy - iResolution.xy * 0.5) / min(iResolution.x, iResolution.y);\n\tvec2 mousePos = globalScale * (iMouse.xy - iResolution.xy * 0.5) / min(iResolution.x, iResolution.y);\n    \n    if(mousePos.x < wallX && iMouse.x > 0.0)\n        sourcePos = mousePos;\n    \n    if(abs(pos.x - wallX) < wallHalfThickness * globalScale)\n    {\n        bool pixelIsInSlit = false;\n        for(int s = 0; s < nbOfSlits; ++s)\n        {\n            if(!isActiveSlit[s])\n                continue;\n            if(abs(pos.y - slitsY[s]) < slitHalfSize * globalScale)\n            {\n                pixelIsInSlit = true;\n                break;\n            }\n        }\n        if(!pixelIsInSlit)\n        {\n            fragColor = vec4(0.5, 0.0, 0.0, 1.0);\n        \treturn;\n        }\n    }\n    \n    if(pos.x < 0.0)\n    {\n        float dSource = distance(sourcePos, pos);\n        float val = sin(spaceFreq * dSource - timeFreq * iTime);\n        float energy = energyScale * (val * val);\n\n        fragColor = colorFromEnergy(energy);\n        return;\n    }\n    \n    float val = 0.0;\n    bool showBackground = true;\n    vec2 slitVec;\n    float dSlit;\n    float dSource;\n    \n    for(int s = 0; s < nbOfSlits; ++s)\n    {\n        if(!isActiveSlit[s])\n            continue;\n        slitVec = pos - slitsPos[s];\n        dSlit = length(slitVec);\n        if(slitVec.x / dSlit < cosDiffractionAngle)\n            continue;\n        showBackground = false;\n        \n        dSource = distance(sourcePos, slitsPos[s]) + dSlit;\n        val += sin(spaceFreq * dSource - timeFreq * iTime);\n    }\n    \n    if(showBackground)\n    {\n\t    fragColor = backgroundColor;\n        return;\n    }\n\n    float energy = energyScale * (val * val);\n    \n    fragColor = colorFromEnergy(energy);\n    \n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const int averagingNbOfFrames = 600;\n \n    int frameIndex = iFrame % averagingNbOfFrames;\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    fragColor = (float(frameIndex) * texelFetch(iChannel1, ivec2(fragCoord.xy), 0)\n\t\t\t+ texelFetch(iChannel0, ivec2(fragCoord.xy), 0)) / float(frameIndex + 1);\n}","name":"Buf B","description":"","type":"buffer"}]}