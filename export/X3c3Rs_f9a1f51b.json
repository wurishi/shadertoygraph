{"ver":"0.1","info":{"id":"X3c3Rs","date":"1716865972","viewed":88,"name":"hard kick","username":"jorge2017a2","description":"hard kick","likes":8,"published":1,"flags":8,"usePreview":0,"tags":["hardkick"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//por jorge2017a2\n\n//referencia\n//https://iquilezles.org/articles/distfunctions2d\n///......hard kick\n//27-may-2024-\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n\n#define S(d,b) smoothstep(antialiasing(1.5),0. , d - (b) )\n#define S2(d,b) smoothstep(8.0*antialiasing(1.5),0.,d - (b) )\n#define S3(d,b) smoothstep(0.25/antialiasing(0.5),0. , d - (b) )\n\n\n#define PI     3.14159265\n#define TWO_PI 6.28318530\n#define POLY(N) (in vec2 p, in vec2[N] v) {const int n=v.length();float d=dot(p-v[0],p-v[0]);float s=1.;for(int i=0,j=n-1;i<n;j=i,i++){vec2 e=v[j]-v[i];vec2 w=p-v[i];vec2 b=w-e*clamp(dot(w,e)/dot(e,e),0.,1.);d=min(d,dot(b,b));bvec3 cond=bvec3(p.y>=v[i].y,p.y<v[j].y,e.x*w.y>e.y*w.x);if(all(cond)||all(not(cond))) s=-s;}return s*sqrt(d);}\n\n\n\nfloat Sdf_I(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat Sdf_U(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat Sdf_D(float distA, float distB)\n\t{ return max(distA, -distB);}\n\n\nvec3 DrawFigBordeCol(vec3 pColObj, vec3 colOut, float distObj , vec3 colBorde )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,colBorde ,S2(abs( distObj)-0.01,0.0));\n  return colOut;\n}\n\n\nvec3 DFB(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S3( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0),S3(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\n\n///oneshade    \nvec2 Rotate(in vec2 p, in vec2 o, in float r) \n{   float c = cos(r), s = sin(r);\n    return (p - o) * mat2(c, -s, s, c) + o;\n}\n\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b;  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);  }\n\nfloat sdCircle( vec2 p, float r )\n{ return length(p) - r;}\n\nfloat divf(float a, float b)\n{\n    //evita crash por 1/0.0 =Infinito=error, en compilar\n    if(b==0.0)\n    {b=0.00001;}\n    return a/b;\n}\n\n\nvec3 mouse(vec2 p, vec3 colout)\n{\nvec2 A,B, med;\nfloat dfin;\nfloat d1, r1 ;\n\nA=vec2(0.33547,0.59829);\nmed=vec2(0.11752,0.10684);\n d1=sdEllipse(p-A,med);\n\n\nA=vec2(0.44444,0.54487);\nmed=vec2(0.02991,0.05342);\nfloat ang=45.0 * PI / 180.0;\nvec2 pr = Rotate(p-A, med/2.0, ang);\nfloat d2=sdEllipse(pr,med);\n\ndfin=Sdf_U(d1,d2);\ncolout= DFB(vec3(1.0), colout, dfin);\n\n\nA=vec2(0.51496,0.5812);\nmed=vec2(0.02137,0.03632);\n ang=45.0 * PI / 180.0;\n pr = Rotate(p-A, med/2.0, ang);\nfloat d3=sdEllipse(pr,med);\ncolout= DFB(vec3(0.0), colout, d3);\n\n    return colout;\n}\n\n\nvec3 Cabeza_Oreja(vec2 p, vec3 colout)\n{\nvec2 A,B, med;\nfloat dfin;\nfloat d1, r1 ;\nvec2 pr;\n\n//oreja der\nA=vec2(0.27564,0.74786);\nmed=vec2(0.07906,0.0641);\nd1=sdEllipse(p-A,med);\n\n//oreja izq\nA=vec2(0.14957,0.59188);\nmed=vec2(0.07051,0.07265);\nfloat d2=sdEllipse(p-A,med);\n\n\n//diferencia cabeza\nA=vec2(0.33547,0.59829);\nmed=vec2(0.11966,0.1047);\nfloat d3=sdEllipse(p-A,med);\n\n//diferencia pelo1\nA=vec2(0.39316,0.62179);\nmed=vec2(0.08333,0.05556);\nfloat ang=48.0 * PI / 180.0;\n pr = Rotate(p-A, med/2.0, ang);\nfloat d4=sdEllipse(pr,med);\n\n//cabeza\nA=vec2(0.34615,0.56838);\nmed=vec2(0.11752,0.07265);\nfloat d5=sdEllipse(p-A,med);\n\n\ndfin=d1;\ndfin=Sdf_U(dfin,d2);\ndfin=Sdf_U(dfin,d3);\nd4=Sdf_I(d3,d4);\ndfin=Sdf_D(dfin,d4);\n\ndfin=Sdf_D(dfin,d5);\n\ncolout= DFB(vec3(0.0), colout, dfin);\n    return colout;\n    \n}\n\n\nvec3 ojo(vec2 p, vec3 colout)\n{\nvec2 A,B, med;\nfloat dfin;\nfloat d1, r1 ;\n\nA=vec2(0.43376,0.61752);\nmed=vec2(0.01496,0.03846);\n d1=sdEllipse(p-A,med);\ncolout= DFB(vec3(0.0), colout, d1);\n    return colout;\n}\n\n\nvec3 sonrisa(vec2 uv, vec3 colout)\n{\nuv.x-=0.07;\nvec2 pc1p1=vec2(.262,.639);\nvec2 pc1p2=vec2(.275,.590);\nvec2 pc1p3=vec2(.298,.575);\n\nvec2 pc2p1=vec2(.218,.566);\nvec2 pc2p2=vec2(.232,.611);\nvec2 pc2p3=vec2(.254,.611);\n\nvec2 pc3p1=vec2(.238,.592);\nvec2 pc3p2=vec2(.243,.541);\nvec2 pc3p3=vec2(.294,.511);\n\nfloat d1= sdBezier(uv,pc1p1,pc1p2,pc1p3);\nfloat d2= sdBezier(uv,pc2p1,pc2p2,pc2p3);\nfloat d3= sdBezier(uv,pc3p1,pc3p2,pc3p3);\n\ncolout= DFB(vec3(0.0), colout, d1);\ncolout= DFB(vec3(0.0), colout, d2);\ncolout= DFB(vec3(0.0), colout, d3);\n\n    return colout;\n}\n\n\nvec3 mickey(vec2 p, vec3 col)\n{\n    col=mouse(p, col);\n    col=Cabeza_Oreja(p, col);\n    col=ojo(p, col);\n    col=sonrisa(p, col);\n    return col;\n\n}\n\nvec3 H2_mouse(vec2 p, vec3 colout)\n{\n\nvec2 A,B, med,pr;\nfloat dfin;\nfloat  r1 ;\n\nA=vec2(0.98718,0.67735);\nmed=vec2(0.11111,0.10684);\nfloat d1=sdEllipse(p-A,med);\n\nA=vec2(0.97009,0.55983);\nmed=vec2(0.05342,0.03846);\nfloat d2=sdEllipse(p-A,med);\ndfin=Sdf_U(d1,d2);\ncolout= DFB(vec3(1.0), colout, dfin);\n\n//nariz\nA=vec2(0.93376,0.51709);\nmed=vec2(0.01923,0.03632);\nfloat ang=45.000 * PI / 180.0;\n pr = Rotate(p-A, med/2.0, ang);\n d1=sdEllipse(pr,med);\ncolout= DFB(vec3(0.0), colout, d1);\n\n    return colout;\n}\n\n\nvec3 h2_Ojos(vec2 p, vec3 colout)\n{\n\nvec2 A,B, med,pr;\nfloat dfin;\nfloat  r1 ;\n\nA=vec2(0.92521,0.6047);\nmed=vec2(0.01068,0.02991);\nfloat ang=-50.000 * PI / 180.0;\n pr = Rotate(p-A, med/2.0, ang);\nfloat d1=sdEllipse(pr,med);\ncolout= DFB(vec3(0.0), colout, d1);\n\nA=vec2(0.95513,0.60684);\nmed=vec2(0.01068,0.02991);\n ang=-50.000 * PI / 180.0;\n pr = Rotate(p-A, med/2.0, ang);\nfloat d2=sdEllipse(pr,med);\ncolout= DFB(vec3(0.0), colout, d2);\n    return colout;\n}\n\n\nvec3 h2_Pelo(vec2 p, vec3 colout)\n{\n\nvec2 A,B, med,pr;\nfloat dfin;\nfloat  r1 ;\n\nA=vec2(0.90385,0.8);\nmed=vec2(0.05556,0.07051);\nfloat ang=30.000 * PI / 180.0;\n pr = Rotate(p-A, med/2.0, ang);\nfloat d1=sdEllipse(pr,med);\n\nA=vec2(1.04915,0.82906);\nmed=vec2(0.05556,0.07051);\n ang=30.000 * PI / 180.0;\n pr = Rotate(p-A, med/2.0, ang);\nfloat d2=sdEllipse(pr,med);\n\n\nA=vec2(0.98504,0.68162);\nmed=vec2(0.10684,0.100684);\nfloat d3=sdEllipse(p-A,med);\n\nA=vec2(1.04915,0.6749);\nmed=vec2(0.04274,0.08479);\nfloat d4=sdEllipse(p-A,med);\n\nA=vec2(0.96368,0.6453);\nmed=vec2(0.04701,0.0812);\n ang=-10.000 * PI / 180.0;\n pr = Rotate(p-A, med/2.0, ang);\nfloat d5=sdEllipse(pr,med);\n\nA=vec2(0.9188,0.61752);\nmed=vec2(0.01923,0.0812);\n ang=-30.000 * PI / 180.0;\n pr = Rotate(p-A, med/2.0, ang);\nfloat d6=sdEllipse(pr,med);\n\n\nA=vec2(0.98077,0.60256);\nmed=vec2(0.06197,0.03419);\nfloat d7=sdEllipse(p-A,med);\n\ndfin=Sdf_U(d1,d2);\ndfin=Sdf_U(dfin,d3);\ndfin=Sdf_D(dfin,d4);\ndfin=Sdf_D(dfin,d5);\ndfin=Sdf_D(dfin,d6);\ndfin=Sdf_D(dfin,d7);\ncolout= DFB(vec3(0.0), colout, dfin);\nreturn colout;\n\n\n\n}\n\nvec3 h2_sonrisa(vec2 uv, vec3 colout)\n{\nuv.x-=0.18;\nvec2 pc1p1=vec2(.829,.692);\nvec2 pc1p2=vec2(.838,.660);\nvec2 pc1p3=vec2(.838,.632);\n\nvec2 pc2p1=vec2(.857,.714);\nvec2 pc2p2=vec2(.880,.652);\nvec2 pc2p3=vec2(.861,.626);\n\nvec2 pc3p1=vec2(.845,.699);\nvec2 pc3p2=vec2(.857,.716);\nvec2 pc3p3=vec2(.873,.722);\n\n\nfloat d1= sdBezier(uv,pc1p1,pc1p2,pc1p3);\nfloat d2= sdBezier(uv,pc2p1,pc2p2,pc2p3);\nfloat d3= sdBezier(uv,pc3p1,pc3p2,pc3p3);\n    \n    colout= DFB(vec3(0.0), colout, d1);\n    colout= DFB(vec3(0.0), colout, d2);\n    colout= DFB(vec3(0.0), colout, d3);\n    \n    \n    return colout;\n}\n\nvec3 Mouse2(vec2 p, vec3 colout)\n{\n    colout= H2_mouse(p,colout);\n    colout=h2_Ojos(p,colout);\n    colout=h2_Pelo(p,colout);\n    colout=h2_sonrisa(p,colout);\n    \n    return colout;\n}\n\nvec3 DosMouse(vec2 uv, vec3 col)\n{\n    col= mickey(uv,col);\n    col= Mouse2(uv,col);\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec2 uv = ( 2. * fragCoord - iResolution.xy ) / iResolution.y;\n    \n    uv-=vec2(-0.5,-1.0);\n    float esc=0.5;\n    uv*=esc;\n    vec2 uv0=uv;\n    vec3 col=vec3(1.0);\n    \n    col=DosMouse(uv+vec2(0.21+0.5*sin(iTime),0.0),col);\n    col=pow(col,  vec3(0.554545));\n    col *= max(length(uv+vec2(0.0,2.0+0.25*sin(iTime)))-2.0, 0.0);\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//iq\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\nfloat sdEllipse( in vec2 p, in vec2 ab )\n{\n    p = abs(p); if( p.x > p.y ) {p=p.yx;ab=ab.yx;}\n    float l = ab.y*ab.y - ab.x*ab.x;\n    float m = ab.x*p.x/l;      float m2 = m*m; \n    float n = ab.y*p.y/l;      float n2 = n*n; \n    float c = (m2+n2-1.0)/3.0; float c3 = c*c*c;\n    float q = c3 + m2*n2*2.0;\n    float d = c3 + m2*n2;\n    float g = m + m*n2;\n    float co;\n    if( d<0.0 )\n    {\n        //float h = acos(q/c3)/3.0;\n        float h = acos(clamp(q/c3, -1., 1.))/3.0;\n\n        float s = cos(h);\n        float t = sin(h)*sqrt(3.0);\n        float rx = sqrt( -c*(s + t + 2.0) + m2 );\n        float ry = sqrt( -c*(s - t + 2.0) + m2 );\n        co = (ry+sign(l)*rx+abs(g)/(rx*ry)- m)/2.0;\n    }\n    else\n    {\n        float h = 2.0*m*n*sqrt( d );\n        float s = sign(q+h)*pow(abs(q+h), 1.0/3.0);\n        float u = sign(q-h)*pow(abs(q-h), 1.0/3.0);\n        float rx = -s - u - c*4.0 + 2.0*m2;\n        float ry = (s - u)*sqrt(3.0);\n        float rm = sqrt( rx*rx + ry*ry );\n        co = (ry/sqrt(rm-rx)+2.0*g/rm-m)/2.0;\n    }\n    vec2 r = ab * vec2(co, sqrt(1.0-co*co));\n    return length(r-p) * sign(p.y-r.y);\n}\n\n\n\n//Quadratic Bezier - exact   (https://www.shadertoy.com/view/MlKcDD)\n\nfloat sdBezier( in vec2 pos, in vec2 A, in vec2 B, in vec2 C )\n{    \n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n    float kk = 1.0/dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n    float kz = kk * dot(d,a);      \n    float res = 0.0;\n    float p = ky - kx*kx;\n    float p3 = p*p*p;\n    float q = kx*(2.0*kx*kx-3.0*ky) + kz;\n    float h = q*q + 4.0*p3;\n    if( h >= 0.0) \n    { \n        h = sqrt(h);\n        vec2 x = (vec2(h,-h)-q)/2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = clamp( uv.x+uv.y-kx, 0.0, 1.0 );\n        res = dot2(d + (c + b*t)*t);\n    }\n    else\n    {\n        float z = sqrt(-p);\n        float v = acos( q/(p*z*2.0) ) / 3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3  t = clamp(vec3(m+m,-n-m,n-m)*z-kx,0.0,1.0);\n        res = min( dot2(d+(c+b*t.x)*t.x),\n                   dot2(d+(c+b*t.y)*t.y) );\n        // the third root cannot be the closest\n        // res = min(res,dot2(d+(c+b*t.z)*t.z));\n    }\n    return sqrt( res );\n}\n","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[],"code":"//Referencia de sonido IQ y Gaz \n//Modificado por Jorge2017a2---jorgefp\n//hard kick\n//27-may-2024-\n#define PI acos(-1.)\n#define PIH (PI*.5)\n#define TAU (PI*2.)\n\n\n#define DD(a,b) n=(s>=a)?ivec2(a,b):n;\n\nconst float pi = 3.1415927;\nconst float tau = 6.283185;\nconst float  ttotal=27.0;\n\n//gaz\n#define osc_sin(x) sin((x)*TAU)\n#define osc_saw(x) (1.-fract(x)*2.)\n#define osc_sqr(x) sign(0.5-fract(x))\n#define osc_tri(x) (asin(sin((x)*PI))/PIH)\n \nfloat noize(float t,  float a, float b){\n    float g=fract(cos(t*exp2(a))*exp2(b))+6.0;\n    return exp(-0.08*g*g) *40.0-1.;\n}\n\nfloat kick(float t)\n{ return clamp(1.5*asin(cos(300.1*t-30.0*exp(-40.0*t))),-1.,1.)*exp(-4.*t);}\n\nfloat kick2(float t)\n{ return clamp(1.5*asin(cos(650.1*t-30.0*exp(-40.0*t))),-1.,1.)*exp(-4.*t);}\n\nfloat kick3(float t)\n{ return clamp(1.5*asin(cos(500.1*t-40.1*exp(-10.0*t))),-1.,1.)*exp(-3.*t);}\n\nfloat kick4(float t)\n{ return clamp(1.5*asin(cos(250.1*t-25.1*exp(-40.0*t))),-1.,1.)*exp(-4.*t);}\n\n\nfloat snare(float t)\n{ float n=noize(t,10.,5.)*exp(-t*10.);\n    float f=t*160.,a=.3*osc_tri(1.2*f)*exp(-t*3.);\n    float b=.05*osc_sin(10.*f+a)*exp(-t*3.);\n    float c=osc_sin(f+b)*exp(-t*15.), z;\n    return n+c;\n}\n\nfloat snare2(float t)\n{   float n=noize(t,10.,12.1)*exp(-t*10.);\n    float f=t*260.,a=.3*osc_tri(1.2*f)*exp(-t*3.);\n    float b=.05*osc_sin(10.*f+a)*exp(-t*3.);\n    float c=osc_sin(f+b)*exp(-t*15.), z;\n    return n+c;\n}\n\n\n\nfloat sound02(float time)\n{int m,ss,c, d;\n    #define NP(c) m=(ss>=c)?c:m;\n  time = mod( time+1.0, ttotal );\n// tune\n  const float tempo = 4.2;\n  ss = int(floor(time*tempo));\n  m = 0;\n\nNP(0) NP(2) NP(4) NP(6) NP(8) NP(9) NP(11) NP(13) NP(16) NP(18) NP(20) NP(24) NP(26) NP(28) NP(31) NP(33) NP(35) NP(37) NP(40) NP(43) \nNP(46) NP(50) NP(63) NP(65) NP(67) NP(68) NP(70) NP(72) NP(74) NP(83) NP(85) NP(87) NP(89) \nNP(91) NP(93) NP(95) NP(99) \n  \n  float t = time - float(m)/tempo;\n  if( m==0 ) return 0.0;\nfloat y= kick3(t)*0.75;\n    return y;\n}\n\n\n\nfloat sound03(float time)\n{int m,ss,c, d;   \n    #define NP(c) m=(ss>=c)?c:m;\n    \n  time = mod( time+1.0, ttotal );\n \n  const float tempo = 4.2;\n  ss = int(floor(time*tempo));\n  m = 0;\n  \nNP(1) NP(3) NP(5) NP(6) NP(7) NP(8) NP(9) NP(10) NP(11) NP(12) NP(14) NP(17) NP(19) NP(21) NP(23) NP(25) NP(27) NP(28) \nNP(29) NP(30) NP(31) NP(32) NP(33) NP(34) NP(35) NP(36) NP(37) NP(38) NP(39) NP(40) NP(41) NP(42) NP(43) NP(44) NP(45) NP(46) NP(47) NP(48) \nNP(49) NP(50) NP(51) NP(52) NP(53) NP(54) NP(55) NP(57) NP(59) NP(61) NP(63) NP(64) NP(66) NP(74) NP(76) NP(78) NP(80) NP(82) NP(84) NP(86) NP(88) NP(90) NP(92) NP(94) NP(96) NP(97) NP(98) NP(99) \n\n\n\n  float t = time - float(m)/tempo;\n  if( m==0 ) return 0.0;\n   float y= snare(t)*0.75;\n    return y;\n}\n\nfloat sound04(float time)\n{  int m,ss,c, d;\n     #define NP(c) m=(ss>=c)?c:m;\n  time = mod( time+1.0, ttotal );\n const float tempo = 4.2;\n  ss = int(floor(time*tempo));\n  m = 0;\n\nNP(5) NP(7) NP(10) NP(12) NP(13) NP(15) NP(18) NP(20) NP(22) NP(24) NP(26) NP(29) \nNP(43) NP(46) NP(50) NP(54) NP(56) NP(58) NP(60) NP(67) NP(69) NP(71) \nNP(73) NP(75) NP(77) NP(79) NP(81) NP(87) NP(89) NP(91) NP(93) NP(95) NP(99) \n  \n  float t = time - float(m)/tempo;\n  if( m==0 ) return 0.0;\n      \n     float y= snare2(t)*0.75;\n     //float y= kick4(t)*0.75;\n    return y;\n}\n\n\n\n\nvec2 mainSound( in int samp, float time )\n{  float y;\n    \n    y+= sound02(time);\n    y+= sound03(time);\n    y+= sound04(time);\n  return vec2(y);\n}   \n","name":"Sound","description":"","type":"sound"}]}