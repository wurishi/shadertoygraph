{"ver":"0.1","info":{"id":"DtGczG","date":"1700323904","viewed":81,"name":"pyramid of galaxy ","username":"nayk","description":"stars, ripple, space,rippleeffect","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["space","stars","ripple","rippleeffect"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* original https://www.shadertoy.com/view/ltc3WX    https://www.shadertoy.com/view/ldBXDD https://www.shadertoy.com/view/4sVczt*/\n/* numba tuhan cnhandu*/\n\n#define iterations 14\n#define formuparam 0.530\n#define time cos(time*.2)\n#define volsteps 18\n#define stepsize 0.2\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.01\n\n#define brightness 0.0015\n#define darkmatter 0.400\n#define distfading 0.760\n#define saturation 0.800\n#define time2 iTime * 60.35\n#define speed2 0.9\n#define scaleCo 0.25\n#define rotation 1.4\n#define angleOffset 0.1\n#define intensity 2.1\n#define outerOffset 0.9\n#define polygonSides 3\n\n#define PI 3.14159265359\n#define TWOPI 6.28318530718\n\n\nmat2 rot(float a){\n    return mat2(\n        sin(a),cos(a),\n        cos(a),-sin(a)\n        );\n}\n\n//from thebookofshaders.com\nfloat polygon (vec2 st, float radius, int sides , float angle, float blur) {\n    \n      // Angle and radius from the current pixel\n      float a = atan(st.x,st.y)+PI;\n      float r = TWOPI/float(sides);\n\n      // Shaping function that modulate the distance\n      float d = cos(floor(0.5+0.5*cos(iTime)+a/r)*r-a)*length(st);\n      return (1.0-smoothstep(radius, radius + blur ,d));\n}\n\nvec2 rotate(vec2 v, float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return vec2(v.x * c - v.y * s, v.x * s + v.y * c);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float zoomFactor =   iMouse.x / iResolution.x;\n\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-0.5;\n\t\n\tvec3 dir=vec3(uv*zoom,1.0);\n\tdir.xy=rotate(uv,iTime/1.-length(uv)*1.01);\n\tfloat a2=speed;\n\tfloat a1=0.0;\n\tmat2 rot1=mat2(cos(a1),tan(a1),-sin(a1),cos(a1));\n\tmat2 rot2=rot1;//mat2(cos(a2),sin(a2),-sin(a2),cos(a2));\n\tdir.xz*=rot1;\n\tdir.xy*=rot2;\n\tvec2 cPos = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n    \n    // distance of current pixel from center\n\tfloat cLength = length(cPos);\ndir.xy = (cPos/cLength)*cos(cLength*1.0-iTime*1.0) * 1.03;\n\t\n\t//from.x-=time;\n\t//mouse movement*time\n\tvec3 from=vec3(0.,0.,0.);\n\t\n\t\n\n\t\n\tfrom.xz*=rot1;\n\tfrom.xy*=rot2;\n\t\n\tvec2 twistedUV =uv;\n    \n\tvec3 bgCol = vec3(0.85,0.85,1.0);\n\tvec3 pixel = bgCol;\n    \n    float originalAngle = PI * rotation * cos(speed2 * iTime) + length(uv) * sin(speed2 * (iTime - outerOffset)) * intensity;\n    \n    float i = 0.0;\n    for(float j = 20.0; j > 0.0; j--)\n    {    \n        float scale = (j * scaleCo);\n        float angle = originalAngle+  angleOffset * j;\n        twistedUV =  vec2(1.0) * uv * rot(angle);\n        \n        if(polygon(twistedUV, 0.4 * scale, polygonSides, 0.0, 0.065) > 0.0 ||\n           polygon(twistedUV, (0.0 - 0.02/scale) * scale*cos(iTime), polygonSides, 0.0, 0.0022) > 0.0){\n            i = j;\n        }\n    }  \n    \n    \n    \tfloat angle = originalAngle+  angleOffset * i;\n        \n        float scale = (i * scaleCo);\n        vec3 changingColor =  0.5*cos(5.0*iTime+  (20.0-i) * 0.9 +vec3(0,2,4));     \n\t    twistedUV = uv;\n           \n        \n        pixel = mix(pixel, (vec3(0.14 * i) + changingColor)/2.0 , polygon(twistedUV, 0.4 * scale, polygonSides, 0.0, 0.065));\n\t\tpixel = mix(pixel, (vec3(0.06 * (17.0-i)) + changingColor)/2.0 , polygon(twistedUV, (0.4 - 0.02/scale) * scale, polygonSides, 0.0, 0.0022));\n\tfloat s=.4,fade=.2;\n\tvec3 v=vec3(0.8);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam; \n             p.xy*=mat2(cos(iTime*0.05),sin(iTime*0.05),-sin(iTime*0.05),cos(iTime*0.05));// the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*tan(.001)); //dark matter\n\t\ta*=a*a*2.; // add contrast\n\t\tif (r>3) fade*=1.-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation)*pixel; //color adjust\n    \n\tfragColor = vec4(v*.02,1.);\n}","name":"Image","description":"","type":"image"}]}