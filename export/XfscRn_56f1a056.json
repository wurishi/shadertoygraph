{"ver":"0.1","info":{"id":"XfscRn","date":"1720705486","viewed":53,"name":"A Parametrized Palette-Generator","username":"Imagyx","description":"Creates random parametrized palettes based on iq's palette code.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","palette","generator","parametrize"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* \n ----------------------------------------------------------------------------------------------------------------------------------------\n * Creates palettes based on the formula from https://iquilezles.org/articles/palettes/\n \n #defines\n SPEED: Defines how fast different palettes are scrolled through\n SPLIT: Defines how many palettes are visible together on the screen\n ----------------------------------------------------------------------------------------------------------------------------------------\n */\n\n#define SPLIT 2.0\n#define SPEED 5.0\n\nvec3 render(in vec2 q, out float y){\n    float ba;\n    vec3 ca, cb, cc, cd;\n    float id = 2394.0 + floor((q.y - SPLIT) / (2.0 * SPLIT));\n    applyRange(ba, vec2(0.2, 1.0), id + 9642.971);\n    applyRange(ca, vec2(0.1, 1.0), id + 96.471);\n    applyRange(cb, vec2(0.1, 1.0), id + 117.771);\n    applyRange(cc, vec2(0.1, 1.0), id + 328.971);\n    applyRange(cd, vec2(0.1, 1.0), id + 828.271);\n    q.y = mod(q.y - SPLIT, 2.0 * SPLIT) - SPLIT;\n    y = q.y;\n    return palette(q.x * ba + id, ca, cb, cc, cd);\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    // Coords\n    vec2 uv = fragCoord / iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    uv.y -= iTime * SPEED * 0.1;\n    // Palette\n    float y;\n    vec3 col = render(uv * vec2(10.0, 25.0), y);\n    // Divider\n    const float s = 0.5;\n    col = mix(col, vec3(0.0), smoothstep(SPLIT - s, SPLIT, abs(y)));\n    col = mix(col, vec3(1.0), smoothstep(SPLIT - s * 0.4, SPLIT, abs(y)));\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Source: https://iquilezles.org/articles/palettes/\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ){\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n// Source: https://www.shadertoy.com/view/XdGfRR\nfloat hash11(float p)\n{\n\tuvec2 n = uint(int(p)) * uvec2(1597334673U, 3812015801U);\n\tuint q = (n.x ^ n.y) * 1597334673U;\n\treturn float(q) * 2.328306437080797e-10;\n}\nvec3 hash33(vec3 p)\n{\n\tuvec3 q = uvec3(ivec3(p)) * uvec3(1597334673U, 3812015801U, 2798796415U);\n\tq = (q.x ^ q.y ^ q.z)*uvec3(1597334673U, 3812015801U, 2798796415U);\n\treturn vec3(q) * 2.328306437080797e-10;\n}\n\n// Basic\nvoid rotate(inout vec2 q, in float deg){\n    float rad = radians(deg);\n    q = mat2x2(cos(rad),sin(rad),-sin(rad),cos(rad)) * q;\n}\n\n// Mine\nvoid applyRange(inout float v, in vec2 r, in float id){\n    v = r.x + hash11(id * 133991.931 + 13023.82) * (r.y - r.x);\n}\nvec3 palette(in float t){\n    return palette(t, vec3(0.5, 0.48, 0.4), vec3(0.5, 0.5, 0.5), vec3(0.95, 0.99, 0.95), vec3(0.0, 0.14, 0.32));\n}\nvoid applyRange(inout vec3 v, in vec2 r, in float id){\n    v = r.x + hash33(vec3(id) * vec3(2374.234, 1283.214, 8963.234) + vec3(239.213, 958.324, 593.353)) * (r.y - r.x);\n}","name":"Common","description":"","type":"common"}]}