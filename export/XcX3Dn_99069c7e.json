{"ver":"0.1","info":{"id":"XcX3Dn","date":"1702931075","viewed":46,"name":"Gyroidations","username":"workingclasshacker","description":"Just fooling around","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2dgyroidexperiments"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdGyroid(vec3 p, float scale){\n    p *= scale;\n    return dot(sin(p), cos(p.zxy))/scale;\n}\nmat2 rot2d(float angle){\n    float c= cos(angle);\n    float s = sin(angle);\n    return mat2(c, -s, s, c);\n}\nfloat fbmGyroid(vec2 uv, float scale, float t){\n    float d = 0.0;\n    int octaves = 7;\n    \n    for(int o = 0;o<octaves;o++){\n        float fo = float(o);\n        uv *= rot2d(((iTime*fo*0.1 )/(fo+1.))/6.28);\n        \n        d += sdGyroid(vec3(uv+fo/10., t*fo+sin(fo+1.)), scale) * scale / 2.;\n        scale *= .5;\n        uv *= fo+1.;\n    }\n    return d / float(octaves*4);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord.xy - iResolution.xy * .5) / iResolution.y;\n    \n    // Time varying pixel color\n    vec3 lightDir = vec3(sin(iTime), 1.0, 0.0);\n    vec3 col = vec3(0);\n    vec3 pos = vec3(uv, iTime * 0.1);\n    float d = sdGyroid(pos, 8.);\n    d = fbmGyroid(uv*rot2d(iTime/10.), 10., iTime*0.1);\n    float shade = dot(pos, lightDir);\n    col += abs(.001/d)*5.;\n    col.r *= shade;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}