{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"const int HIST_NUM_BUCKETS = 32;\nconst int HIST_ITER_PER_BUCKET = 1024;\nconst float HIST_NUM_BUCKETS_F = float(HIST_NUM_BUCKETS);\nconst float HIST_ITER_PER_BUCKET_F = float(HIST_ITER_PER_BUCKET);\nconst float HIST_SCALE = 5.0;\n\nconst int VAR_NUM_AVG = 256;\nconst float VAR_NUM_AVG_F = float(VAR_NUM_AVG);\nconst float VAR_SCALE = 3.0;\n\n//note: uniform pdf rand [0;1[\nfloat hash12n(vec2 p)\n{\n\tp  = fract(p * vec2(5.3987, 5.4421));\n    p += dot(p.yx, p.xy + vec2(21.5351, 14.3137));\n\treturn fract(p.x * p.y * 95.4307);\n}\n\n//note: uniform pdf rand [0;1[\nvec3 hash32n(vec2 p)\n{\n\tp  = fract(p * vec2(5.3987, 5.4421));\n    p += dot(p.yx, p.xy +  vec2(21.5351, 14.3137));\n\treturn fract(vec3(p.x * p.y * 95.4307, p.x * p.y * 97.5901, p.x * p.y * 93.8369));\n}\n\n//note: triangular pdf rand [0;2[\nvec3 hash32t(vec2 p)\n{\n\tp = fract(p * vec2(5.3987, 5.4421));\n\tp += dot(p.yx, p.xy + vec2(21.5351, 14.3137));\n\tfloat pxy = p.x * p.y;\n\treturn fract(pxy * vec3(95.43070, 97.59010, 93.83690))\n\t\t + fract(pxy * vec3(75.04909, 75.04957, 75.04961));\n}\n\n\n//note: remaps v to [0;1] in interval [a;b]\nfloat remap( float a, float b, float v )\n{\n\treturn clamp( (v-a) / (b-a), 0.0, 1.0 );\n}\nvec2 remap( vec2 a, vec2 b, vec2 v )\n{\n\treturn clamp( (v-a) / (b-a), vec2(0.0), vec2(1.0) );\n}\n\n//note: quantizes in l levels\nfloat truncate( float a, float l )\n{\n\treturn floor(a*l)/l;\n}\n\n// ====\n\nvec3 n1rand( vec2 n )\n{\n\tfloat t = fract( iTime );\n    return vec3( hash12n( n + 1337.0*t ) );\n}\n\nvec3 n1rand_rgb( vec2 n )\n{\n\tfloat t = fract( iTime );\n\treturn hash32n( n + 1337.0*t );\n}\n\nvec3 n2rand( vec2 n )\n{\n\tfloat t = fract( iTime );\n    return 0.5 * hash32t( n + 1337.0*t ).xxx;\n}\n\nvec3 n2rand_rgb( vec2 n )\n{\n\tfloat t = fract( iTime );\n    return 0.5 * hash32t( n + 1337.0*t );\n}\n\n\nfloat lum( vec3 c )\n{\n    if ( iMouse.z < 1.0 )\n    {\n        //relative rgb-luminance weighted\n        //return sqrt( 0.299*c.r*c.r + 0.587*c.g*c.g + 0.114*c.b*c.b ); //perceived luminance... skewed?\n        return 0.299 * c.r + 0.587 * c.g + 0.114 * c.b;\n\t\t//return dot( c, vec3(0.22, 0.707, 0.071) );\n    }\n    else\n    \treturn dot( c, vec3(0.33333) ); //average\n}\n\nvec3 eval( int iter, float t, float seed )\n{\n    if ( iter == 0 )\n        return n1rand( vec2(t, 0.5) + seed );\n    else if ( iter == 1 )\n        return n2rand( vec2(t, 0.5) + seed );\n    else if ( iter == 2 )\n        return n1rand_rgb( vec2(t,0.5) + seed );\n\telse\n        return n2rand_rgb( vec2(t,0.5) + seed );\n}\n\nfloat histogram( int iter, vec2 luv )\n{\n\tfloat t = luv.x;\n\tvec2 bucket = vec2( truncate(t,HIST_NUM_BUCKETS_F), truncate(t,HIST_NUM_BUCKETS_F)+1.0/HIST_NUM_BUCKETS_F);\n\tfloat bucketval = 0.0;\n    float var = 0.0;\n\tfor ( int i=0;i<HIST_ITER_PER_BUCKET;++i)\n\t{\n\t\tfloat seed = float(i)/HIST_ITER_PER_BUCKET_F;\n\t\t\n\t\tvec3 r = eval( iter, t, seed );\n        \t\t\n\t\tbucketval += step(bucket.x,lum(r)) * step(lum(r),bucket.y);\n\t}\n\tbucketval /= HIST_ITER_PER_BUCKET_F;\n\tbucketval *= HIST_SCALE;\n\treturn step( bucketval, luv.y );\n}\n\n\nfloat variance( int iter, vec2 luv )\n{\n    vec3 sum = vec3(0.0);\n    for ( int i=0; i<VAR_NUM_AVG; ++i )\n    {\n        float seed = float(i) / VAR_NUM_AVG_F;\n        vec3 r = eval( iter, luv.x, seed );\n        sum += r;\n    }\n    vec3 mean = sum / VAR_NUM_AVG_F;\n    \n    float var = 0.0;\n\tfor ( int i=0; i<VAR_NUM_AVG; ++i )\n\t{\n\t\tfloat seed = float(i)/VAR_NUM_AVG_F;\n\t\tvec3 r = eval( iter, luv.x, seed );\n\t\t\n        vec3 diff = r - mean;\n        var += dot( diff, diff );\n\t}\n    var /= float(VAR_NUM_AVG-1);\n    var *= VAR_SCALE;\n    float oc = step( var, luv.y );\n    return step( luv.y, oc );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t\n\tvec3 o = vec3(0.0);\n    if ( uv.x < 1.0/4.0 )\n    {\n\t\to = eval( 0, uv.x, uv.y );\n\t\tif ( uv.y < 1.0 / 4.0 )\n        {\n            vec2 luv = remap( vec2(0.0/4.0, 0.0/4.0), vec2(1.0/4.0, 2.0/4.0), uv );\n\t\t\to = vec3( 0.85 - 0.7 * histogram( 0, luv ) );\n        }\n        else if ( uv.y < 2.0/4.0 )\n        {\n            vec2 luv = remap( vec2(0.0/4.0, 1.0/4.0), vec2(1.0/4.0, 2.0/4.0), uv );\n            o = vec3( 0.85 - 0.7 * variance( 0, luv ) );\n        }\n    }\n\telse if ( uv.x < 2.0/4.0 )\n\t{\n\t\to = eval( 1, uv.x, uv.y );\n\t\tif ( uv.y < 1.0 / 4.0 )\n        {\n            vec2 luv = remap( vec2(1.0/4.0, 0.0/4.0), vec2(2.0/4.0, 2.0/4.0), uv );\n\t\t\to = vec3( 0.85 - 0.7 * histogram( 1, luv ) );\n        }\n        else if ( uv.y < 2.0/4.0 )\n        {\n            vec2 luv = remap( vec2(1.0/4.0, 1.0/4.0), vec2(2.0/4.0, 2.0/4.0), uv );\n            o = vec3( 0.85 - 0.7 * variance( 1, luv ) );\n        }\n\t}\n\telse if ( uv.x < 3.0 / 4.0 )\n\t{\n        o = eval( 2, uv.x, uv.y );\n\t\tif ( uv.y < 1.0 / 4.0 )\n        {\n            vec2 luv = remap( vec2(2.0/4.0, 0.0/4.0), vec2(3.0/4.0, 2.0/4.0), uv );\n\t\t\to = vec3( 0.85 - 0.7 * histogram( 2, luv ) );\n        }\n        else if ( uv.y < 2.0/4.0 )\n        {\n            vec2 luv = remap( vec2(2.0/4.0, 1.0/4.0), vec2(3.0/4.0, 2.0/4.0), uv );\n            o = vec3( 0.85 - 0.7 * variance( 2, luv ) );\n        }\n\t}\n    else\n    {\n        o = eval( 3, uv.x, uv.y );\n\t\tif ( uv.y < 1.0 / 4.0 )\n        {\n            vec2 luv = remap( vec2(3.0/4.0, 0.0/4.0), vec2(4.0/4.0, 2.0/4.0), uv );\n\t\t\to = vec3( 0.85 - 0.7 * histogram( 3, luv ) );\n        }\n        else if ( uv.y < 2.0/4.0 )\n        {\n            vec2 luv = remap( vec2(3.0/4.0, 1.0/4.0), vec2(4.0/4.0, 2.0/4.0), uv );\n            o = vec3( 0.85 - 0.7 * variance( 3, luv ) );\n        }\n\n    }\n\n\t//display lines\n    if ( abs(uv.x - 1.0/4.0) < 0.002 ) o = vec3( 0.0 );\n\tif ( abs(uv.x - 2.0/4.0) < 0.002 ) o = vec3( 0.0 );\n    if ( abs(uv.x - 3.0/4.0) < 0.002 ) o = vec3( 0.0 );\n\t\n\tfragColor = vec4( o, 1.0 );\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ldjSzy","date":"1413476038","viewed":325,"name":"dithering: chroma-noise","username":"hornet","description":"noise\nvariance\nhistogram\nshows how using chroma noise gives a different distribution of noise (click mouse to switch between average and luminance histogram weighting)","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["noise","distribution"],"hasliked":0,"parentid":"","parentname":""}}