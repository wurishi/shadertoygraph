{"ver":"0.1","info":{"id":"4cX3Dj","date":"1703506681","viewed":29,"name":"hexa 0b - grid study + path","username":"Elsio","description":"reformatei o código do EisernSchild pois estou tentando entender a relação entre a sua forma de fazer a grade, a minha e tantas outras que vejo por aí. \n\nhttps://www.shadertoy.com/view/4cfGRl\n","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["math","hexagonal"],"hasliked":0,"parentid":"ssyfWm","parentname":"Hex tiles nearest path ?"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define px 30./R.y\n#define sdDot(p) length(p) - .4\n#define plot(p, c, shape)                                          \\\n            o = mix(o, vec4 c,                                     \\\n                        smoothstep(px, .0, shape(u - hex(p))) \\\n                    );\n\nfloat sdEx(vec2 p) {\n    p = abs(p);\n    return length(p - min(p.x + p.y, .4) * .4) - .08;\n}\n\n\nvec2 hex(vec2 p) {\n    p *= vec2(3, 1.5);\n    \n    return vec2(\n               (p.x - p.y) / sqrt(3.),\n               p.y\n           );\n}\n\nvec2 unHex(vec2 p){\n    return \n        round(\n            vec2(\n                sqrt(3.) * p.x + p.y, \n                p.y\n            ) / vec2(3, 1.5));\n}\n\n\nvoid mainImage(out vec4 o, vec2 u) {\n    vec2 p, q, h, R = iResolution.xy, \n         A2, A, B, v;\n         \n    float len, d, t = iTime;\n    u = (u - .5 * R) / R.y * 15.;\n    \n    \n\n    p = hex(vec2(1));\n         \n    h = abs(u - hex(unHex(u)));\n    h = min(h, length(p) - h);\n\n    d = max(\n            length(dot(normalize(p), h) * normalize(p)),\n            h.x \n        );\n    \n    d = min(d,  length(p) - d);\n    \n    \n    \n\n    // draw grid\n    o = (1. + smoothstep(px, .0, d - .8)) \n                      * vec4(8, 8, 12, 0) / 17.;\n    \n    // blue dot\n    A = vec2(floor(mod(-t, 8.) - 4.), -3.);\n    plot(A, (0,0,1,0), sdDot);\n\n     \n    // yellow dot\n    B = vec2(floor(mod( t, 6.) - 3.),  3.);\n    plot(B, (1,.8,.2,0), sdDot);\n    \n    \n    // red path\n    A2 = A;\n    while(A.x != B.x || A.y != B.y) {\n        v = B - A;\n        if(abs(v.x) > .0) \n            A.x += sign(v.x);\n        \n        else \n            A.y += sign(v.y);\n        \n        if(A.x != B.x || A.y != B.y) \n            plot(A, (1,0,0,0), sdEx);\n    }\n    \n\n    // green path\n    A = A2;\n    while(A.x != B.x || A.y != B.y) {\n        v = B - A;\n        \n        if( abs(v.x) == abs(v.y) && \n            sign(v.x) == sign(v.y)\n          ) \n            A += sign(v);\n        \n        else \n            if(abs(v.x) > abs(v.y)) \n                A.x += sign(v.x);\n        \n            else \n                A.y += sign(v.y);\n        \n        if(A.x != B.x || A.y != B.y) \n            plot(A, (0,.4,0,0), sdEx);\n    }\n}","name":"Image","description":"","type":"image"}]}