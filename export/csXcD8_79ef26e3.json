{"ver":"0.1","info":{"id":"csXcD8","date":"1686749379","viewed":87,"name":"Fixed: STAR Distance","username":"nr4","description":"Drawing code adapted from iq\nWrong distance function from original, correct one by me. Reuse under GPL if you need it.\n\n","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sdf","star","distance","polygon","poligono","estrela"],"hasliked":0,"parentid":"DsfcWr","parentname":"STAR distance (with errors)"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\n// Slightly wrong in original\nfloat sdStar(vec2 p){\n    float radius = .4;\n    float sAng = 2. * PI / 5.;\n    float repeat = abs(mod(atan(p.x , -p.y), sAng) - .5 * sAng );\n    return cos(sAng - repeat) * length(p) - radius * cos(sAng);\n}\n\n// Correct\nconst float pi = PI;\nconst vec3 c = vec3(1,0,-1);\nfloat dstar(in vec2 x, in float r1, in float r2, in float N)\n{\n    N *= 2.;\n    float p = atan(x.y,x.x),\n        k = pi/N,\n    \tdp = mod(p, 2.*k),\n    \tparity = mod(round((p-dp)*.5/k), 2.),\n        dkp = mix(k,-k,parity),\n        kp = k+dkp,\n        km = k-dkp;\n    vec2 p1 = r1*vec2(cos(km),sin(km)),\n        p2 = r2*vec2(cos(kp),sin(kp)),\n        dpp = p2-p1,\n        n = normalize(dpp).yx*c.xz,\n        xp = length(x)*vec2(cos(dp), sin(dp)),\n        xp1 = xp-p1;\n    float t = dot(xp1,dpp)/dot(dpp,dpp)-.5,\n        r = (1.-2.*parity)*dot(xp1,n);\n    // Branchless version:\n    // return mix(r,sign(r)*length(xp-mix(p1, p2, step(.5, t))), step(.5,abs(t)));\n    return t < -.5\n        ? sign(r)*length(xp1)\n        : t < .5\n            ? r\n            : sign(r)*length(xp-p2);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n    vec2 mouse = (iMouse.xy - .5 * iResolution.xy) / iResolution.y;\n    float px = 1.0 / iResolution.y;\n    \n    // Change to original here\n    // float d = sdStar(uv);\n    float d = dstar(uv, .2, .5, 5.);\n    \n    vec3 col = (d > 0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65, 0.85, 1.0);\n\tcol *= 1.0 - exp2(-12.0 * abs(d));\n\tcol *= 0.7 + 0.2 * cos(150.0 * d);\n\tcol = mix( col, vec3(1.0), 1.0 - smoothstep(0.0, 3.0 * px, abs(d)));\n\n\n    // Change to original here\n    // d = sdStar(mouse);\n    d = dstar(mouse, .2,.5, 5.);\n    float l = length(uv - mouse);\n    col = mix(col, vec3(1.0, 1.0, 1.0), 1.0 - smoothstep(0.0, 2.0 * px, abs(l - abs(d))-.001));\n    col = mix(col, vec3(1.0, 1.0, 1.0), 1.0 - smoothstep(0.0, 2.0 * px, l - px*3.0));\n\n\tfragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}