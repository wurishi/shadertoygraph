{"ver":"0.1","info":{"id":"Dt2fzt","date":"1694385060","viewed":59,"name":"Earth Atmosphere Scale","username":"chronos","description":"Diagram showing the thickness of the earth's atmosphere compared to its radius. Depicted is the troposphere, stratosphere and mesosphere (There is no water shown, the inner layer is the troposphere). The opacity of the layers are just to distinguish them.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["earth","atmosphere","scale","diagram","size"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nDiagram showing the thickness of the earth's atmosphere compared to its radius.\nDepicted is the troposphere, stratosphere and mesosphere.\nUse the mouse to magnify.\nThere is no water shown, the inner layer is the troposphere.\n\nThe opacity of the layers are just to distinguish them,\nso it does not represent any physical value, even though the density of the atmosphere\n*does* decrease further out, of course.\n\nThe dot and ray represents the \"view\" cone covering the solid angle of the sun\nas seen from earth.\n\nThe numbers I used here are pulled directly off the internet,\ne.g from wikipeda, wolfram alpha, etc.\nHopefully the numbers and my calculations here are approximately\ncorrect, but this is not ment to be very accurate, just give a \nrough sense of scale.\n\nI was also a bit lazy with the conversion between coordinate systems\nso things will break a bit if you try to e.g change the zoom or translation,\nespecially the sun visualization and textures, possibly the magnifier as well...\nIf you want to take a stab at fixing it, then feel free to do so! ;)\n\nAnyway, puts things into perspective, doesn't it? :)\n\n*/\n\nconst float GAMMA = 2.2;\n\nfloat circle_sdf(vec2 p, float r) { return length(p) - r; }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 mouse = (2.*iMouse.xy-iResolution.xy)/iResolution.y;\n    float pix_size = 2. / iResolution.y;\n\n    vec3 color = vec3(0);\n\n    float distance_earth_to_sun = 149597870.7; // km\n    float sun_radius            =    695660.0; // km\n    float earth_radius          =      6371.1; // km\n\n    float base_scale = earth_radius;\n\n    float zoom_radius = 0.3;\n    float zoom_border = 0.05;\n    float isZoomed = smoothstep(zoom_radius+zoom_border, zoom_radius-zoom_border, length(uv - mouse));\n\n    float base_zoom = 1.;\n    float magnified_zoom = 20.;\n    float zoom = mix(base_zoom, magnified_zoom, isZoomed);\n    float scale = base_scale;\n    \n    vec2 translation = vec2(0., 0.5 * earth_radius);\n\n    vec2 p = (uv * scale + translation) / base_zoom; \n\n    vec2 mouse_p = (mouse * scale + translation) / base_zoom; \n    \n    p = mix(p, (p - mouse_p) / zoom + mouse_p, isZoomed);\n    \n    pix_size = (2. / iResolution.y * scale) / zoom; \n    \n    // densest below 5.6 km (50% total atmosphere mass), (80% below 12km)\n    float troposphere_radius = earth_radius + 12.;\n    float stratosphere_radius = earth_radius + 55.;\n    float mesosphere_radius = earth_radius + 80.;\n    \n    float earth_sdf  = circle_sdf(p, earth_radius);\n    float tropo_sdf  = circle_sdf(p, troposphere_radius);\n    float strato_sdf = circle_sdf(p, stratosphere_radius);\n    float meso_sdf   = circle_sdf(p, mesosphere_radius);\n    \n    float tropo_alpha = smoothstep(pix_size, 0., tropo_sdf);\n    vec3 tropo_color = pow(vec3(135, 206, 235) / 255., vec3(2.2)); // Sky blue linear\n    \n    float strato_alpha = 0.15 * smoothstep(pix_size, 0., strato_sdf);\n    vec3 strato_color = pow(vec3(135, 206, 235) / 255., vec3(2.2)); // Sky blue linear\n    \n    float meso_alpha = 0.05 * smoothstep(pix_size, 0., meso_sdf);\n    vec3 meso_color = pow(vec3(135, 206, 235) / 255., vec3(2.2)); // Sky blue linear\n    \n    float earth_alpha = smoothstep(pix_size, 0., earth_sdf);\n    vec3 earth_color = pow(vec3(160, 82, 45) / 255., vec3(2.2)); // Sienna linear\n    earth_color *= .333*(pow(texture(iChannel1, (uv-mouse)/zoom + mouse/base_zoom).rgb, vec3(2.2))+2.);\n    \n    color = .9 * pow(texture(iChannel0, (uv-mouse)/zoom + mouse/base_zoom).rgb, vec3(2.2) * 7.);\n    color = mix(color, strato_color, meso_alpha);\n    color = mix(color, strato_color, strato_alpha);\n    color = mix(color, tropo_color, tropo_alpha);\n    color = mix(color, earth_color, earth_alpha);\n\n    // Draw \"view cone\" for the sun, i.e the cone covering the solid angle of the sun\n    // as viewed from earth.\n    // Solve for where the cone touches the sphere. (tangent, so orthogonal to center of sphere!)\n    // cone points along x axis, sun is centered at (0,0)\n    // then observer is at (distance_earth_to_sun, 0)\n    {\n        float sun_x = sun_radius * (sun_radius / distance_earth_to_sun); // should be approx 3234.958   ( very small compared to sun radius)\n        float sun_y = sqrt(sun_radius * sun_radius - sun_x * sun_x);     // should be approx 695652.478 ( very close to sun radius)\n        \n        // Cone radius(y) to height(x) ratio\n        float sun_tangent = sun_y / (distance_earth_to_sun - sun_x);     // should be approx 0.00465025\n        float sun_cone = \n            smoothstep(-0.00018, 0.0,\n                min(\n                    dot(vec2(1., -1.) * vec2(1., sun_tangent).yx, (uv-mouse)/zoom + mouse/base_zoom - vec2(0., 0.5))\n                    ,\n                    dot(vec2(-1., 1.) * vec2(1., -sun_tangent).yx, (uv-mouse)/zoom + mouse/base_zoom - vec2(0., 0.5))\n                )\n            );\n\n        vec3 sun_color = pow(vec3(237,213,158) / 255., vec3(2.2)); // some warm color :)\n        color = mix(color, sun_color, sun_cone);\n        color = mix(color, sun_color, \n            smoothstep(0.01, 0.01-0.0001, length((uv-mouse)/zoom + mouse/base_zoom - vec2(0., 0.5))));\n    }\n    \n    \n    fragColor = vec4(pow(color, vec3(1./GAMMA)),1.0);\n}","name":"Image","description":"","type":"image"}]}