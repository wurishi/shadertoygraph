{"ver":"0.1","info":{"id":"csBcRR","date":"1687338526","viewed":57,"name":"Octogon kaleidoscope","username":"Targa","description":"an pretty kaleidoscope effect","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","kaleidoscope","colourful","fract"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette(float t) {\n  vec3 v[4] = vec3[](vec3(0.5, 0.5, 0.5), vec3(0.5, 0.5, 0.5),\n                     vec3(1.0, 1.0, 1.0), vec3(4.735, 4.005, 4.540));\n                     \n  return v[0] + v[1] * cos(6.28318 * (v[2] * t + v[3]));\n}\n\nfloat sdOctogon(in vec2 p, in float r) {\n  const vec3 k = vec3(-0.9238795325, 0.3826834323, 0.4142135623);\n  p = abs(p);\n  p -= 2.0 * min(dot(vec2(k.x, k.y), p), 0.0) * vec2(k.x, k.y);\n  p -= 2.0 * min(dot(vec2(-k.x, k.y), p), 0.0) * vec2(-k.x, k.y);\n  p -= vec2(clamp(p.x, -k.z * r, k.z * r), r);\n  return length(p) * sign(p.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n  vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n  vec2 uv0 = uv;\n  \n  uv *= 1.3;\n  \n  vec3 finalColor = vec3(0.0);\n  \n  for (float i = 0.0; i < 3.; i++) {\n    uv = fract(uv * 1.4) - 0.5;\n\n    vec3 col = palette(length(uv0) + iTime * .8);\n    \n    float d = sdOctogon(uv, 1. + i * .8) * exp(-length(uv0)) + 1.;\n\n    d = sin(d * 11.5 + iTime * .8) / 1.;\n    d = pow(0.1 / d, 1.6);\n\n    finalColor += col * d;\n  }\n\n  fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}