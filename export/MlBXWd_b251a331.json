{"ver":"0.1","info":{"id":"MlBXWd","date":"1447377783","viewed":646,"name":"TV Effects","username":"Dopass","description":"Effects typically used to simulated older TVs/CRT  etc.","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["love"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"#define ScanlineScale 0.50\t\t\t//The scaling & thickness of the scanlines.\n#define ScanlineIntensity 0.18\t\t//The intensity of the scanlines.\n#define ScanlineBrightness 2.\t\t//The brightness of the scanlines.\n\n#define VignetteRatio 1.77          //Sets the espect ratio of the vignette.\n#define VignetteRadius 1.10         //Radius of the vignette effect. Lower values for stronger radial effect from center\n#define VignetteAmount 0.25         //Strength of black edge occlusion. Increase for higher strength, decrease for lower.\n#define VignetteSlope 16.           //How far away from the center the vignetting will start.\n\n#define saturate(x) clamp(x,0.0,1.0)\n\nconst vec3 lumCoeff = vec3(0.2126729, 0.7151522, 0.0721750);\n\nfloat AvgLum(vec3 color) //Average relative luminance\n{\n\treturn sqrt( dot(color*color, lumCoeff));\n}\n\n\nfloat Randomize(vec2 texcoord)\n{\n    float seed = dot(texcoord, vec2(12.9898, 78.233));\n    float sine = sin(seed);\n    float noise = fract(sine * 43758.5453);\n\n    return noise;\n}\n\nvec4 Dither(vec4 color, vec2 texcoord) // Subpixel Dithering to simulate more colors than your monitor can display. Smoothes gradiants, this can reduce color banding.\n{\n    float ditherBits = 3.0;\n\n    float noise = Randomize(texcoord);\n    float ditherShift = (1.0 / (pow(2.0, ditherBits) - 1.0));\n    float ditherHalfShift = (ditherShift * 0.5);\n    ditherShift = ditherShift * noise - ditherHalfShift;\n\n    color.rgb += ditherShift*vec3(-1, 1, -1);\n\n    color.a = AvgLum(color.rgb);\n\n    return color;\n}\n\nvec4 Vignette(vec4 color, vec2 texcoord) //Darkens the edges of the screen, to make it look more like it was shot with a camera lens.\n{\n    vec2 VignetteCenter = vec2(0.500, 0.500);\n    vec2 tc = texcoord - VignetteCenter;\n\n    tc *= vec2((2560.0 / 1440.0), VignetteRatio);\n    tc /= VignetteRadius;\n\n    float v = dot(tc, tc);\n\n    color.rgb *= (1.0 + pow(v, VignetteSlope * 0.25) * -VignetteAmount);\n\n    return color;\n}\n\nvec4 Scanlines(vec4 color, vec2 texcoord, vec2 fragcoord)//Scanlines to simulate the look of a CRT TV.\n{\n    vec4 intensity;\n    \n    if (fract(fragcoord.x * 0.25) > ScanlineScale && fract(fragcoord.y * 0.5) > ScanlineScale)\n    \t{\n        \tintensity = vec4(0.0);\n    \t}\n    else\n    \t{\n        \tintensity = smoothstep(0.2, ScanlineBrightness, color) + normalize(vec4(color.xyz, AvgLum(color.xyz)));\n    \t}\n\n    float level = (4.0 - texcoord.x) * ScanlineIntensity;\n\n    color = intensity * (0.5 - level) + color * 1.1;\n\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n\t{\n\t\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t\tfragColor = texture(iChannel0, uv);\n    \tfragColor = Vignette(fragColor, uv);\n    \tfragColor = Scanlines(fragColor, uv, fragCoord);\n   \t\tfragColor = Dither(fragColor, uv);\n\t}","name":"","description":"","type":"image"}]}