{"ver":"0.1","info":{"id":"Xfs3WH","date":"1703020498","viewed":18,"name":"Hermite-Gauss Loading Animations","username":"Monotrox99","description":"A simple visualization of hermite-gauss modes, used for example to describe laser beams. Also, blending between superpositions of modes looks kind of cool.\nTo see what patterns you can generate here, try to change the integers in the hg function calls.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["visualization","animation","loading","physics","modes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst vec3 colorPos = vec3(0.6);\nconst vec3 colorNeg = vec3(0.8);\nconst vec3 colorZero = vec3(1.0);\nconst float transitionSpeed = 1.5;\n\n#define PI 3.1415926538\n\n\nint fak(int n)\n{\n    int res = 1;\n    for(int i=2; i<=n; i++) {\n        res *= i;\n    }\n    return res;\n}\n\n\n// https://en.wikipedia.org/wiki/Hermite_polynomials ; look under explicit expression\nfloat hermite_polynomial(int n, float x)\n{\n    float sum = 0.0;\n    for(int i=0; i<=n/2; i++) {\n        int div = fak(i)*fak(n-2*i);\n        float sig = -mod(float(i), 2.0)*2.0 + 1.0; // should be equal to pow(-1.0, i) but hopefully faster\n        sum += sig/float(div) * pow(2.0*x, float(n-2*i));\n    }\n    return float(fak(n))*sum;\n}\n\n\n// Physicists hermite-gauss modes, disregarding the phase term (https://www.rp-photonics.com/hermite_gaussian_modes.html)\nfloat hg(int nx, int ny, vec2 pos, float w)\n{\n    float sqr2 = sqrt(2.0);\n    float xter = hermite_polynomial(nx, sqr2*pos.x/w)*exp(-pos.x*pos.x/(w*w));\n    float yter = hermite_polynomial(ny, sqr2*pos.y/w)*exp(-pos.y*pos.y/(w*w));\n    return xter*yter;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Calculate the modes\n    vec2 pos = fragCoord - iResolution.xy*0.5; //View from -1 to 1\n    float mode10 = hg(3,0,pos,100.0);\n    float mode00 = hg(0,1,pos,100.0);\n    \n    // blend between modes\n    float blend = 0.5*sin(2.0*PI*iTime/transitionSpeed)+0.5;\n    float mode = mode10*blend + mode00*(1.0-blend);\n    \n    // apply colormap to see sign of output\n    const float cutoff = 0.4;\n    vec3 cmap = (1.0-step(mode, cutoff))*colorPos + (1.0-step(-mode, cutoff))*colorNeg + step(mode,cutoff)*step(-mode,cutoff)*colorZero;\n    fragColor = vec4(cmap, 1.0);\n}","name":"Image","description":"","type":"image"}]}