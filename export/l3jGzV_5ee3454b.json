{"ver":"0.1","info":{"id":"l3jGzV","date":"1708639348","viewed":54,"name":"Prosze  o 3","username":"michalk23","description":"Prosze o 3","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define saturate(x) clamp(x,0.,1.)\n\nfloat char(vec2 p, float c){\n    if(p.x<0. || p.x>1. || p.y<0. || p.y>1.) return 1e5;\n    return texture(iChannel0, p/16. + fract(floor(vec2(c,16.-c/16.))/16.)).a;\n}\n\nfloat forcedSigmoid(float x, float a){\n    return (x > .5 ? 2. - pow((-2. * x) + 2., a) : pow(x * 2., a)) / 2.;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = (fragCoord.xy / iResolution.xy) - .5;\n    uv.x *= iResolution.x / iResolution.y;\n    uv *= 4.;\n    float time = forcedSigmoid(fract(iTime), 4.);\n    float weight = .5;\n    float sharpen = 100.;\n    float drawing = 1.;\n\n    // Animowane tło (płynąca woda)\n    float waterLevel = 0.5 + 0.2 * sin(uv.x * 10.0 + iTime * 2.0);\n    vec3 waterColor = vec3(0.1, 0.1, 0.9);\n    vec3 skyColor = vec3(0.1, 0.5, 0.8);\n    vec3 backgroundColor = mix(skyColor, waterColor, smoothstep(-0.1, 0.1, uv.y - waterLevel));\n\n    // Animowane litery M i K\n    drawing -= 1. - saturate((char((uv - vec2(-3. + fract(time), 0.)) + .5, 77.) - (weight * fract(time))) * sharpen); // Fading-in M - 77\n    drawing -= 1. - saturate((char((uv - vec2(-1. + fract(time), 0.)) + .5, 75.) - (weight * (1. - fract(time)))) * sharpen); // Fading-out K - 75\n\n    // Animowany kwadrat (pulscujący)\n    float squareSize = 0.2 + 0.1 * sin(time * 2.0);\n    float squareAlpha = 0.5 + 0.5 * sin(time * 3.0);\n    vec2 squarePos = vec2(1.5, 0.0); // Położenie kwadratu\n    float squareValue = smoothstep(squareSize, squareSize + 0.01, abs(uv.x - squarePos.x)) * smoothstep(squareSize, squareSize + 0.01, abs(uv.y - squarePos.y));\n    drawing -= (1.0 - squareAlpha) * squareValue;\n\n    fragColor = vec4(backgroundColor * drawing, 1.);\n}\n","name":"Image","description":"","type":"image"}]}