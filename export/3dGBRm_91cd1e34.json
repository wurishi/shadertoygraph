{"ver":"0.1","info":{"id":"3dGBRm","date":"1607011513","viewed":156,"name":"Path Tracing Testing 35","username":"Pjbomb2","description":"Go to Common tab for additional instructions and stuff\nWASD and Mouse to move\nAny tips are more than welcome\nScene(the main SDF) is mostly from Bitnenfer, with my own touch for windows and such","likes":4,"published":1,"flags":48,"usePreview":0,"tags":["raymarching","reflection","sdf","refraction","pathtrace","spheretracing","pathtracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//How can I optimize this?  \n//also what would be a good method to debug the rays in this?\n//finally, what/where would be a better place to ask questions like this?\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t\n    vec3 col = vec3(0.0);\n    \n        col = texture( iChannel3, uv ).xyz;\n            // convert unbounded HDR color range to SDR color range\n    //col = ACESFilm(col);\n\n    // convert from linear to sRGB for display\n    //col = LinearToSRGB(col);\n    \n\n\n    col = pow( col, vec3(0.8,0.85,0.9) );\n    \n    col *= 0.5 + 0.5*pow( 16.0*uv.x*uv.y*(1.0-uv.x)*(1.0-uv.y), 0.1 );\n\n\n    \n    \n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//Change BOUNCECOUNT to change the number of light bounces\n//Comment out AddPhysicalLight to remove the secondary light(secondary light is a physical object with emmissivity, where as the main light is a globsl sun)\n\n\n#define BOUNCECOUNT 5 \n#define AddPhysicalLight\n\n\n\n\n//Color correction from Demofox\nvec3 LessThan(vec3 f, float value)\n{\n    //Reccomended change by Dave_Hoskins\n    return vec3(lessThan(f, vec3(value)));\n}\n \nvec3 LinearToSRGB(vec3 rgb)\n{\n    rgb = clamp(rgb, 0.0f, 1.0f);\n     \n    return mix(\n        pow(rgb, vec3(1.0f / 2.4f)) * 1.055f - 0.055f,\n        rgb * 12.92f,\n        LessThan(rgb, 0.0031308f)\n    );\n}\n \nvec3 SRGBToLinear(vec3 rgb)\n{\n    rgb = clamp(rgb, 0.0f, 1.0f);\n     \n    return mix(\n        pow(((rgb + 0.055f) / 1.055f), vec3(2.4f)),\n        rgb / 12.92f,\n        LessThan(rgb, 0.04045f)\n    );\n}\n\n\n\n// ACES tone mapping curve fit to go from HDR to LDR\n//https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/\nvec3 ACESFilm(vec3 x)\n{\n    float a = 2.51f;\n    float b = 0.03f;\n    float c = 2.43f;\n    float d = 0.59f;\n    float e = 0.14f;\n    return clamp((x*(a*x + b)) / (x*(c*x + d) + e), 0.0f, 1.0f);\n}\n\n\n//SDF functions\n\nfloat pModInterval1(inout float p, float size, float start, float stop) {\n    float halfsize = size*0.5;\n    float c = floor((p + halfsize)/size);\n    p = mod(p+halfsize, size) - halfsize;\n    if (c > stop) { //yes, this might not be the best thing numerically.\n        p += size*(c - stop);\n        c = stop;\n    }\n    if (c <start) {\n        p += size*(c - start);\n        c = start;\n    }\n    return c;\n}\n\n\nvoid Rotate(inout vec2 point, float rad)\n{\n    float c = cos(rad);\n    float s = sin(rad);\n    float px = point.x * c - point.y * s;\n    float py = point.x * s + point.y * c;\n    point.x = px;\n    point.y = py;\n}\n\nfloat SDFSphere(vec3 point, float radius)\n{\n    return length(point) - radius;\n}\n\nfloat SDFBox(vec3 point, vec3 size)\n{\n    vec3 d = abs(point) - size;\n    return length(max(d,0.0)) + min(max(d.x,max(d.y,d.z)),0.0);\n}\n\nvec2 Union(in vec2 a, in vec2 b)\n{\n    return a.x < b.x ? a : b;\n}\n\nvec2 MapSpheres(vec3 rayPoint)\n{\n    float a = SDFSphere(rayPoint + vec3(+0.3, 1.6, -1.7), 0.5);\n    float b = SDFSphere(rayPoint + vec3(-1.0, 1.3, -4.0), 0.8);\n    \n    return vec2(min(a, b), 1.0);\n}\n\nvec2 MapBoxes(vec3 rayPoint)\n{\n    rayPoint += vec3(0.0, 0.0, -3.0);\n    float a = SDFBox(rayPoint + vec3(0.0, 0.0, 0.0), vec3(4.2, 2.4, 7.2));\n    float b = SDFBox(rayPoint + vec3(0.0, 0.0, 0.0), vec3(3.8, 2.0, 6.5));\n    float c = SDFBox(rayPoint + vec3(-0.0, 0.4, -9.0), vec3(2.45, 0.45, 10.0)) - 0.4;\n    \n    vec3 rep = vec3(0.0, 0.0, 1.3);\n    vec3 p = mod(rayPoint, rep) - rep * 0.5;\n    float vent = SDFBox(p + vec3(0.0, -2.5, 0.0), vec3(3.1, 0.8, 0.2));\n    float scene = max(max(max(a, -b), -c), -vent);\n    float d = SDFBox(rayPoint + vec3(-5.2, 0.4, -0.0), vec3(2.45, 0.45, 3.0)) - 0.4;\n    \n    scene = max(scene, -d);\n    \n    \n    \n    return vec2(scene, 0.0);\n}\n\nvec2 MapGlass(vec3 rayPoint) {\n    rayPoint += vec3(0.0, 0.0, -3.0);\n    float a = SDFBox(rayPoint + vec3(0.0, 0.0, 0.0), vec3(4.2, 2.4, 7.2));\n    float b = SDFBox(rayPoint + vec3(0.0, 0.0, 0.0), vec3(3.8, 2.0, 6.5));\n    float c = SDFBox(rayPoint + vec3(-0.0, 0.4, -9.0), vec3(2.45, 0.45, 10.0)) - 0.4;\n    float d = SDFBox(rayPoint + vec3(-5.2, 0.4, -0.0), vec3(2.45, 0.45, 3.0)) - 0.4;\n    \n    \n    vec3 rep = vec3(0.0, 0.0, 1.3);\n    vec3 p = mod(rayPoint, rep) - rep * 0.5;\n    float vent = SDFBox(p + vec3(0.0, -2.5, 0.0), vec3(3.1, 0.8, 0.2));\n    \n    \n return vec2(max(max(a,min(min(c, d),vent)), -b), 7.0);   \n}\n\nvec2 map(vec3 rayPoint, in float inside)\n{\n    vec2 spheres = MapSpheres(rayPoint);\n    vec2 boxes = MapBoxes(rayPoint);\n    vec3 p = rayPoint + vec3(0.0, -1.0, -9.5);\n    pModInterval1(p.x, 2.0, -1.0, 1.0);\n    vec2 box2 = vec2(SDFBox(p, vec3(0.3, 0.1, 0.2)), 2.0);\n    \n    vec3 hp = rayPoint + vec3(0.05, 1.1, -4.1);\n    Rotate(hp.xz, 3.15/2.5);\n    Rotate(hp.yz, -3.15/4.3);\n    float hex = SDFBox(hp, vec3(0.8, 1.2, 0.1)) - 0.05;\n    \n    box2 = Union(box2, vec2(hex, 2.0));\n    vec2 ret = Union(Union(spheres, boxes), box2);\n   \n    #ifdef AddPhysicalLight\n    ret = Union(ret, vec2(SDFBox(rayPoint + vec3(-15, -15, -8), vec3(1, 1, 1)), 4.0));\n    #endif\n    ret = Union(ret, vec2(SDFSphere(rayPoint + vec3(2.0, 1.3, -8.0), 0.8), 5.0));\n    \n    \n    if(ret.x < 0.001) return (inside == 1.0) ? vec2(-ret.x, ret.y): ret;\n    ret = Union(ret, MapGlass(rayPoint));\n       return (inside == 1.0) ? vec2(-ret.x, ret.y): ret;\n}\n\n\n\n\n\n\nfloat fresnel(in vec3 I, in vec3 N, float eps) \n{ \n    float cosi = clamp( dot(I, N), -1.0, 1.0); \n    \n    float etai = 1.0;\n    float etat = eps; \n    float tmp;\n    if (cosi > 0.0) { tmp = etai; etai = etat; etat = etai; /*swap(etai, etat);*/ } \n    \n    // Compute sini using Snell's law\n    float sint = etai / etat * sqrt(max(0.0, 1.0 - cosi * cosi)); \n    // Total internal reflection\n    if (sint >= 1.0) { \n        return 1.0;\n    } \n    else { \n        float cost = sqrt(max(0.0, 1.0 - sint * sint)); \n        cosi = abs(cosi); \n        float Rs = ((etat * cosi) - (etai * cost)) / ((etat * cosi) + (etai * cost)); \n        float Rp = ((etai * cosi) - (etat * cost)) / ((etai * cosi) + (etat * cost)); \n        return  (Rs * Rs + Rp * Rp) / 2.0; \n    } \n    // As a consequence of the conservation of energy, transmittance is given by:\n    // kt = 1 - kr;\n} \n\n\n//materials\nvec3 GetMatProps(in float matID, out float refl, out float refr, out float emmis, out float IOR) {//return material properties when what material is being hit is requested\n    \n    if(matID == 0.0) {\n     \trefl = 0.0;\n        refr = 0.0;\n        emmis = 0.0;\n        IOR = 1.0;\n        return vec3(0.7, 0.7, 0.7);\n    }\n        if(matID == 1.0) {\n     \trefl = 1.0;\n        refr = 0.0;\n        emmis = 0.0;\n        IOR = 1.0;\n        return vec3(0.9, 0.1, 0.1);\n    }\n            if(matID == 2.0) {\n     \trefl = 0.9;\n        refr = 0.0;\n        emmis = 0.0;\n        IOR = 1.0;\n        return vec3(0.8, 0.8, 0.1);\n    }\n                if(matID == 3.0) {\n     \trefl = 0.0;\n        refr = 0.0;\n        emmis = 10.0;\n        IOR = 1.0;\n        return vec3(0.8, 0.8, 0.1);\n    }\n    if(matID == 4.0) {\n     \trefl = 0.0;\n        refr = 0.0;\n        emmis = 100.0;\n        IOR = 1.0;\n        return vec3(1.0, 1.0, 1.0);\n    }\n        if(matID == 5.0) {\n     \trefl = 0.0;\n        refr = 1.0;\n        emmis = 0.0;\n        IOR = 1.5;\n        return vec3(0.7, 0.3, 0.9);\n    }\n            if(matID == 6.0) {\n     \trefl = 0.0;\n        refr = 1.0;\n        emmis = 0.0;\n        IOR = 1.0;\n        return vec3(2.7, 2.3, 0.9);\n    }\n    if(matID == 7.0) {\n     \trefl = 0.0;\n        refr = 1.0;\n        emmis = 0.0;\n        IOR = 1.0;\n        return vec3(2.7, 2.3, 0.9);\n    }\n    \nreturn vec3(1.0, 0.0, 1.0);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Created by genis sole - 2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International.\n\n#define store(P, V) if (all(equal(ivec2(fragCoord), P))) fragColor = V\n#define load(P) texelFetch(iChannel1, ivec2(P), 0)\n#define key(K)  step(0.5, texelFetch(iChannel0, ivec2(K, 0), 0).x)\n\nconst ivec2 MEMORY_BOUNDARY = ivec2(4, 3);\n\nconst ivec2 POSITION = ivec2(1, 0);\n\nconst ivec2 VMOUSE = ivec2(1, 1);\nconst ivec2 PMOUSE = ivec2(2, 1);\n\nconst ivec2 TARGET = ivec2(0, 2);\n\nconst ivec2 RESOLUTION = ivec2(3, 1);\n\n// Keyboard constants definition\nconst int KEY_BSP   = 8;\nconst int KEY_SP    = 32;\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\nconst int KEY_A     = 65;\nconst int KEY_B     = 66;\nconst int KEY_C     = 67;\nconst int KEY_D     = 68;\nconst int KEY_E     = 69;\nconst int KEY_F     = 70;\nconst int KEY_G     = 71;\nconst int KEY_H     = 72;\nconst int KEY_I     = 73;\nconst int KEY_J     = 74;\nconst int KEY_K     = 75;\nconst int KEY_L     = 76;\nconst int KEY_M     = 77;\nconst int KEY_N     = 78;\nconst int KEY_O     = 79;\nconst int KEY_P     = 80;\nconst int KEY_Q     = 81;\nconst int KEY_R     = 82;\nconst int KEY_S     = 83;\nconst int KEY_T     = 84;\nconst int KEY_U     = 85;\nconst int KEY_V     = 86;\nconst int KEY_W     = 87;\nconst int KEY_X     = 88;\nconst int KEY_Y     = 89;\nconst int KEY_Z     = 90;\nconst int KEY_COMMA = 188;\nconst int KEY_PER   = 190;\n\n#define KEY_BINDINGS(FORWARD, BACKWARD, RIGHT, LEFT) const int KEY_BIND_FORWARD = FORWARD; const int KEY_BIND_BACKWARD = BACKWARD; const int KEY_BIND_RIGHT = RIGHT; const int KEY_BIND_LEFT = LEFT;\n\n#define ARROWS  KEY_BINDINGS(KEY_UP, KEY_DOWN, KEY_RIGHT, KEY_LEFT)\n#define WASD  KEY_BINDINGS(KEY_W, KEY_S, KEY_D, KEY_A)\n#define ESDF  KEY_BINDINGS(KEY_E, KEY_D, KEY_F, KEY_S)\n\n#define INPUT_METHOD  WASD\nvec2 KeyboardInput() {\n    INPUT_METHOD\n    \n\tvec2 i = vec2(key(KEY_BIND_RIGHT)   - key(KEY_BIND_LEFT), \n                  key(KEY_BIND_FORWARD) - key(KEY_BIND_BACKWARD));\n    \n    float n = abs(abs(i.x) - abs(i.y));\n    return i * (n + (1.0 - n)*inversesqrt(2.0));\n}\n\nvec3 CameraDirInput(vec2 vm) {\n    vec2 m = vm/iResolution.x;\n    m.y = -m.y;\n    \n    mat3 rotX = mat3(1.0, 0.0, 0.0, 0.0, cos(m.y), sin(m.y), 0.0, -sin(m.y), cos(m.y));\n    mat3 rotY = mat3(cos(m.x), 0.0, -sin(m.x), 0.0, 1.0, 0.0, sin(m.x), 0.0, cos(m.x));\n    \n    return (rotY * rotX) * vec3(KeyboardInput(), 0.0).xzy * 10.0;\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    if (any(greaterThan(ivec2(fragCoord), MEMORY_BOUNDARY))) return;\n    \n    fragColor = load(fragCoord);\n    \n    vec2 resolution = load(RESOLUTION).xy;\n    store(RESOLUTION, vec4(iResolution.xy, 0.0, 0.0));\n    \n    if (iTime == 0.0 || iFrame == 0 || any(notEqual(iResolution.xy, resolution))) {\n        store(POSITION, vec4(0.0, 0.0, 0.0, 0.0));\n        store(TARGET, vec4(0.0, 0.0, 0.0, 0.0));\n        store(VMOUSE, vec4(0.0));\n        store(PMOUSE, vec4(0.0));\n        \n        return;\n    }\n\n    vec3 target      = load(TARGET).xyz;   \n    vec3 position    = load(POSITION).xyz;\n    vec2 pm          = load(PMOUSE).xy;\n    vec3 vm          = load(VMOUSE).xyz;\n    \n    vec3 ptarget = target;\n    target += CameraDirInput(vm.xy) * iTimeDelta * 5.0;\n    \n\n    \n    position += (0.1 * target - position);\n    \n    store(TARGET, vec4(target, 0.0));\n    store(POSITION, vec4(position, 0.0));\n    \n    if (any(greaterThan(iMouse.zw, vec2(0.0)))) {\n    \tstore(VMOUSE, vec4(pm + (abs(iMouse.zw) - iMouse.xy), 1.0, 0.0));\n    }\n    else if (vm.z != 0.0) {\n    \tstore(PMOUSE, vec4(vm.xy, 0.0, 0.0));\n    }\n\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//Camera and Keyboard input by glk7, from https://www.shadertoy.com/view/4lVXRm\n\n\n\n#define load(P) texelFetch(iChannel1, ivec2(P), 0)\nconst ivec2 VMOUSE = ivec2(1, 1);\n\nconst float PI = 3.141592;\n\nconst ivec2 POSITION = ivec2(1, 0);\n\n\nconst float c_pi = 3.14159265359f;\nconst float c_twopi = 2.0f * c_pi;\n\n\nvec3 SunPos = vec3(100, 100, 50);\nvec3 sunCol = 2.0*vec3(0.8, 0.7, 0.6);\n\nuint wang_hash(inout uint seed)\n{\n    seed = uint(seed ^ uint(61)) ^ uint(seed >> uint(16));\n    seed *= uint(9);\n    seed = seed ^ (seed >> 4);\n    seed *= uint(0x27d4eb2d);\n    seed = seed ^ (seed >> 15);\n    return seed;\n}\n\nfloat RandomFloat01(inout uint state)\n{\n    return float(wang_hash(state)) / 4294967296.0;\n}\n\nvec3 RandomUnitVector(inout uint state, in vec3 nor)\n{\n    float u = RandomFloat01(state);\n    float v = RandomFloat01(state) * c_twopi;\n   \n    \t// method 2 by pixar:  http://jcgt.org/published/0006/01/01/paper.pdf\n    \tfloat ks = (nor.z>=0.0)?1.0:-1.0;     //do not use sign(nor.z), it can produce 0.0\n        float ka = 1.0 / (1.0 + abs(nor.z));\n        float kb = -ks * nor.x * nor.y * ka;\n        vec3 uu = vec3(1.0 - nor.x * nor.x * ka, ks*kb, -ks*nor.x);\n        vec3 vv = vec3(kb, ks - nor.y * nor.y * ka * ks, -nor.y);\n    \n        float a = 6.2831853 * v;\n        return sqrt(u)*(cos(a)*uu + sin(a)*vv) + sqrt(1.0-u)*nor;\n}\n\n\n\n\n\n\n\n\nvec3 calcNormal( in vec3 pos )//normals calculation\n{\n    vec3 eps = vec3(0.0001,0.0,0.0);\n\n    return normalize( vec3(\n      map( pos+eps.xyy, 0.0).x - map( pos-eps.xyy, 0.0).x,\n      map( pos+eps.yxy, 0.0).x - map( pos-eps.yxy, 0.0).x,\n      map( pos+eps.yyx, 0.0).x - map( pos-eps.yyx, 0.0).x ) );\n}\n\n\n\n\nfloat intersect(in vec3 ro, in vec3 rd, in float inside) {//normal sphere tracing function\n\tfloat res = -1.0;\n    float tmax = 25.0;\n    float t = 0.001;\n    for(int i = 0; i < 128; i++) {\n    \tfloat h = map(ro+rd*t, inside).x;\n        if((h<0.0001) || (t>tmax)) break;\n        t += h;\n    }\n    if(t<tmax) res = t;\n    \n    return res;\n    \n}\n\n\n\n\nvec3 calcFinalColor(vec3 ro, vec3 rd, inout uint rngState) {//main function\n    vec3 accumulatedColor = vec3(0.0);\n        vec3 colorMask = vec3(1.0);\n            float fdis = 0.0;\n\n        float emmis = 0.0;\n        float refl = 0.0;\n        float refr = 0.0;\n        float IOR = 1.0003;\n   \t\tfloat inside = 0.0;\n        float rand = RandomFloat01(rngState);\n    vec3 norm = vec3(0.0);\n    ro += vec3(0,0,-2.0);\n\n    \n    for(int bounce = 0; bounce < BOUNCECOUNT; bounce++) {\n\t\tvec3 SunDir = normalize(SunPos - ro);\n        float preIOR = IOR;\n        float t = intersect(ro, rd, 0.0);\n        vec3 iColor = vec3(0.0);\n        if( t < 0.0 )\n        {\n            \n\n\n            colorMask *= sunCol;\n            iColor += max(pow(dot(rd, SunDir), 100.0),0.000001) * (100.0 * sunCol) + 2.0 * accumulatedColor;\n            accumulatedColor += colorMask * iColor;//pow is to enhance the directionality of it, I wanted sharper shadows, so I did that\n                break;\n        }\n\n    \tif(bounce == 0) fdis = t;\n        vec3 pos = ro + rd*t;\n        vec3 surfaceColor = GetMatProps(map(pos, 0.0).y, refl, refr, emmis, IOR);\n        if(map(pos, 0.0).y == 7.0) {\n            if(pos.y > 1.0) {\n                float co = max(0.0, mod(1.0-round(mod(pos.z, 1.3) - 2.6 * 0.5), 2.0));\n            surfaceColor = vec3((1.0-round(mod(pos.z/3.9, 1.0))) * co, (1.0-round(mod((pos.z+1.3)/3.9, 1.0))) * co, (1.0-round(mod((pos.z+2.6)/3.9, 1.0))) * co);//rainbow skylights\n                }\n            \n        }\n         norm = calcNormal(pos);\n        \n        if(refr == 1.0) {//if material is refractive\n            float eps = IOR;\n            if(t < 0.001) {//theory: if ray is already inside an object, use first calculation, else use second calculation\n                norm = -norm;\n                inside = 1.0;//inside variable used for transparent objects, so I can define all objects in a single map() function\n            \n            }else {\n               eps = preIOR/eps;\n                inside = 0.0;\n            }\n            \n\t\trd = (fresnel(rd, norm, preIOR/eps) > rand) ? reflect(rd, norm) : refract(rd, norm, eps);//Fresnel function located in common\n\n            \n            \n        t = intersect(pos, rd, 1.0);\n        pos += rd*t;\n            \n            colorMask *= exp(-(surfaceColor*0.8) * t * t); //coloring based on distance ray travels through transparent object\n        \n        }else { //else if material not refractive\n                  colorMask *= surfaceColor;\n\n            //mix between reflective and diffuse ray directions\n            rd = mix( reflect(rd, norm), RandomUnitVector(rngState, norm), 1.0-refl);\n\n            \n            \n\n              }\n\t\tro = pos;\n        iColor +=  (emmis * surfaceColor) + 2.0 * accumulatedColor * dot(norm, rd);//apply colors and emmisivity\n        accumulatedColor += colorMask * iColor;\n    }\n    \n\n    \n    float ff = exp(-0.01*fdis*fdis);\n    accumulatedColor *= ff; \n    accumulatedColor += (1.0-ff)*0.05*vec3(0.9,1.0,1.0);\n\n\n    \n    return accumulatedColor;\n}\n\n\n\n\nvoid Camera(in vec2 fragCoord, out vec3 ro, out vec3 rd) //Camera function to make flying camera\n{\n    ro = load(POSITION).xyz;\n    vec2 m = load(VMOUSE).xy/iResolution.x;\n    m.y = -m.y;\n    \n    float a = 1.0/max(iResolution.x, iResolution.y);\n    rd = normalize(vec3(((fragCoord) - iResolution.xy*0.5)*a, 0.5));\n    \n    mat3 rotX = mat3(1.0, 0.0, 0.0, 0.0, cos(m.y), sin(m.y), 0.0, -sin(m.y), cos(m.y));\n    mat3 rotY = mat3(cos(m.x), 0.0, -sin(m.x), 0.0, 1.0, 0.0, sin(m.x), 0.0, cos(m.x));\n    \n    rd = (rotY * rotX) * rd;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    uint rngState = uint(uint(fragCoord.x) * uint(1973) + uint(fragCoord.y) * uint(9277) + uint(iFrame) * uint(26699)) | uint(1);\n    vec2 jitter = vec2(RandomFloat01(rngState), RandomFloat01(rngState)) - 0.5f;\n    \n        vec3 ro = vec3(0.0);\n    vec3 rd = vec3(0.0);\n    vec3 col = vec3(0.0);\n         Camera(fragCoord + jitter, ro, rd);\n         col = calcFinalColor( ro, rd, rngState);\n\n    \n\t\n    \n        \n            vec4 lastFrameColor = texture( iChannel2, fragCoord/iResolution.xy );\n            float blend = (lastFrameColor.a == 0.0f || iMouse.z > 1.0) ? 1.0f : 1.0f / (1.0f + (1.0f / lastFrameColor.a));\n    col = mix(lastFrameColor.rgb, col, blend);\n\n    \n    fragColor = vec4(col,blend);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"//Temporal sampling\n\nfloat grayscale(vec3 image) {\n    return dot(image, vec3(0.3, 0.59, 0.11));\n}\n\nfloat normpdf(in float x, in float sigma)\n{\n\treturn 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  lowp vec2 uv = fragCoord.xy / iResolution.xy;\n\n    \n  lowp vec3 imageacc = max( texture(iChannel1,uv).rgb , vec3(0.0));\n  lowp vec3 image = max( texture(iChannel0,uv).rgb , vec3(0.0));  \n\n    //declare stuff\n    const int mSize = 9;\n    const int kSize = (mSize-1)/2 ;\n    float kernel[mSize];\n    vec3 imageblurred = vec3(0.0);\n\n    //create the 1-D kernel\n    float sigma = 1.5;\n    float Z = 0.0;\n    for (int j = 0; j <= kSize; ++j)\n    {\n        kernel[kSize+j] = kernel[kSize-j] = normpdf(float(j), sigma);\n    }\n\n    //get the normalization factor (as the gaussian has been clamped)\n    for (int j = 0; j < mSize; ++j)\n    {\n        Z += kernel[j];\n    }\n\n    //read out the texels\n    for (int i=-kSize; i <= kSize; ++i)\n    {\n        for (int j=-kSize; j <= kSize; ++j)\n        {\n            imageblurred += kernel[kSize+j]*kernel[kSize+i]*texture(iChannel0, (fragCoord.xy+vec2(float(i),float(j))) / iResolution.xy).rgb;\n\n        }\n    }   \n    \n    imageblurred = imageblurred / (Z*Z);  \n    \n    image = min(image, imageblurred); // reduce fireflies    \n\n    if (iMouse.z < 0.5) \n    {\n        // attempt to reduce ghosting\n        lowp float weight = grayscale( pow( clamp( abs(imageacc - image) * 0.3 , 0., 1.), vec3(0.5)));\n        imageacc = mix(imageacc, image, clamp(weight + 0.1, 0., 1.));\n    } else { \n\n        imageacc = image;\n    }\n    \n    fragColor = vec4(imageacc,1.0);\n\n\t\n}","name":"Buffer C","description":"","type":"buffer"}]}