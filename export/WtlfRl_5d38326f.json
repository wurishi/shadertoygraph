{"ver":"0.1","info":{"id":"WtlfRl","date":"1597465907","viewed":251,"name":"Raymarched Sphere","username":"IAmLegend","description":"Raymarched Sphere with phong shading","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sphereraymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Map values to unsquish resolution\nfloat map(float value, float min1, float max1, float min2, float max2) {\n    return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n// Simple sphere stuff\nvec3 sphereNormal (vec3 pos, vec3 center){\n    return normalize(pos - center); \n}\nfloat sphereDE (vec3 pos, vec3 center, float radius){ \n    return length(pos - center) - radius; \n}\n\nvec3 raymarch(vec3 origin, vec3 direction, vec3 center, vec3 light){\n    float distance = 0.0;\n    for (float iters = 0.0; iters < 200.0; ++iters){\n        vec3 pos = origin + distance * direction;\n        float nextDistance = sphereDE(pos, center, 0.3);\n        distance += nextDistance;\n        if (nextDistance < 0.001){ \n            // Calculate shading phong model\n            vec3 normal = sphereNormal(pos, center);\n            // Diffuse lighting\n            float diffuse = max(0.0, dot(normal, light)); \n            // Specular lighting\n            vec3 reflected = reflect(direction, normal);\n            float specular = pow(max(dot(reflected, light), 0.0), 32.0); \n            // Multiply by ambient (maybe time varying interpolated color :o)\n            float shade = diffuse * 0.7 + specular * 0.3; \n            vec3 ambient = vec3(1.0, 1.0, 1.0);\n            return shade * ambient;\n        }\n    }\n    // Background blue\n    return vec3(0.0, 0.0, 0.5);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Clip space coords\n    vec2 uv = 2.0 * fragCoord.xy / iResolution.xy - 1.0;\n    uv.x = map(uv.x,  - 288.0/512.0, 288.0/512.0, -1.0, 1.0);\n\tvec3 center = vec3(0.0);\n    float time = iTime;\n    // Light going in this direction\n\tvec3 light = normalize(vec3(2.0* sin(time), cos(time), cos(time))); \n    // Output to screen\n    fragColor = vec4(raymarch(vec3(0.0, 0.0, -1.0), normalize(vec3(uv, 0.0) - vec3(0.0, 0.0, -1.0)), center, light), 1.0);\n}","name":"Image","description":"","type":"image"}]}