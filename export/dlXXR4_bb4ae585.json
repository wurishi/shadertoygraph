{"ver":"0.1","info":{"id":"dlXXR4","date":"1674360774","viewed":118,"name":"Simple 2D Lights","username":"CoffeeCatRailway","description":"A simple shader showing how to make 2d lights\n\nAny comments on how to improve this are greatly appreciated!","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","lights"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14\n#define MAX_LIGHTS 3\n// 1. tends to be the best, any lower than .8 makes it too bright\n// 1.5 is a good level of 'darkness', any higher makes it hard to see\n#define DARKNESS 1.\n\nstruct Light\n{\n    vec2 position;\n    vec3 color;\n    float radius;\n};\n\nvec3 uAmbient = vec3(.05);\n\nLight uLights[MAX_LIGHTS];\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Mouse Light\n    if (iMouse.z > 0.)\n    {\n        uLights[0].position = iMouse.xy;\n    } else\n    {\n        uLights[0].position = iResolution.xy / 2.;\n    }\n    uLights[0].color = mix(vec3(.9, .3, 0.), vec3(0., .3, .9), ((uLights[0].position.x / iResolution.x) + (uLights[0].position.y / iResolution.y)) / 2.);\n    uLights[0].radius = 15.;\n    \n    // Red Light\n    uLights[1].position = vec2(50.);\n    uLights[1].color = vec3(1., 0., 0.);\n    uLights[1].radius = 15.;\n    \n    // Green Light\n    uLights[2].position = vec2(iResolution.xy - 50.);\n    uLights[2].color = vec3(0., 1., 0.);\n    uLights[2].radius = 20. + 5. * sin(iTime * 2.);\n    \n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 diffuse = texture(iChannel0, uv).rgb / PI;\n    vec3 color = uAmbient;\n\n    // Add light colors together\n    for (int i = 0; i < uLights.length(); i++)\n    {\n        if (uLights[i].color == vec3(0.)) break;\n        float dist = length(uLights[i].position - fragCoord);\n        float attenuation = 16. * (pow(uLights[i].radius, 2.) / max(.001, pow(dist * DARKNESS, 2.)));\n        color += uLights[i].color * diffuse * attenuation;\n    }\n    \n    // Multiply `lightsCol` on top of `iChannel0`\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy) * vec4(color, 1.);\n}","name":"Image","description":"","type":"image"}]}