{"ver":"0.1","info":{"id":"sslBz8","date":"1644838748","viewed":39,"name":"Fork Night visi Doc_gdi 541","username":"Doc_gdi","description":"Night vision device","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"Xsf3RN","parentname":"Night vision device"},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"/* inputs\n    float warpLen = 0.2\n    float intensity = 1.0\n    float displacement = 0.02\n    float dispSpeed = 0.5\n    float greenness = 0.4\n    float outputMin = 0.0;\n    float outputMax = 1.0;\n    vec2 uv\n*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfloat displacement = 0.02;\n    float warpLen = 0.2;\n    float greenness = 0.4;\n    float dispSpeed = 0.5;\n    float intensity = 1.0;\n    float t = iTime;\n    //remap input\n    float outputMin = 0.0;\n    float outputMax = 1.0;\n    float inputMin = 0.0;\n    //endremap\n    float warpOffset = 0.3;\n    float waveFrequency = 1.0;\n    int Res = -10;\n    \n    \n    float wide = uv.x + uv.y + (1.0 - uv.x) + (1.0 - uv.y);\n    \n    //Not flip img\n    //uv = vec2(uv.x, 1. - uv.y);\n\t\n    vec2 uvP = fract(uv * waveFrequency);\n\tvec2 position = vec2(uvP.x * wide, uvP.y);\n\t\n\tvec4 coloring = vec4(1.0 - greenness, 1.0, 1.0 - greenness, 1.0) * intensity;\n\t\n    //Rand funct values\n    vec2 n = uv * vec2(0.1, 1.0);\n    float time = t * 5.0;\n    //Rand funct\n\tfloat noise =  0.5 + 0. * fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453 + time);\n    \n    //Improve in hlsl\n\tfloat noiseColor = 1.0 - (1.0 - noise) * 0.3;\n\tvec4 noising = vec4(noiseColor, noiseColor, noiseColor, 1.0);\n\t\n    \n    \n\tfloat warpLine = fract(-t * dispSpeed);\n    \n    //Remap funct values\n    warpLine -= warpOffset;\n    warpLine *= 1.0 / (1.0 - warpOffset);\n    float value = clamp((position.y - warpLine) - warpLen * 0.5, 0.0, warpLen);\n    float inputMax = warpLen;\n\n    //Remap funct\n    \n\tfloat warpArg01 = (value - inputMin) * ((outputMax - outputMin) / (inputMax - inputMin)) + outputMin;\n    //End remap\n    \n    float f1 = -4.0 * pow(warpArg01 - 0.5, 2.0) + 1.0;\n\tfloat offset = sin(warpArg01 * 10.0)  * f1;\n\t\n\t\n\tvec4 lineNoise = vec4(1.0, 1.0, 1.0, 1.0);\n\tif(abs(uv.y - fract(-t * 19.0)) < 0.0005)\n\t{\n\t\tlineNoise = vec4(0.5, 0.5, 0.5, 1.0);\n\t}\n\t\n    vec2 uvBase =  uv + vec2(offset * displacement, 0.0);\n    if(Res > 0){\n        float r = pow(2., float(Res));\n        uvBase = floor(uvBase * r) / r;\n    }\n\tvec4 base = texture(iChannel0, uvBase);\n\tfragColor = base * coloring * noising * lineNoise;\n    //fragColor = vec4(warpArg01, warpArg01, warpArg01, 1.);\n}","name":"Image","description":"","type":"image"}]}