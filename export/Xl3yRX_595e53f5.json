{"ver":"0.1","info":{"id":"Xl3yRX","date":"1554975054","viewed":102,"name":"cave flight","username":"Jontte","description":"desc","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["caveflight"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"uniform sampler2D tex0;\nuniform sampler2D tex1;\nprecision highp float;\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  { \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\nfloat rand(vec3 co){\n    return fract(sin(dot(co, vec3(12.9898,78.233,591.3020125))) * 43758.5453);\n}\n\nfloat fmod(float a, float b)\n{\n    return (a - b * floor(a / b));\n}\n\nfloat sphere(vec3 p, float r) {\n    return length(p) - r;\n}\n\n\nfloat smax(float x, float y, float k)\n{\n    return log( exp(x) + exp(y) )/k;\n}\n\nfloat hill(vec2 p) {\n    \n    //float height = texture(tex0, p).x;\n    \n    float pixel = 1.0/1024.0;\n    vec2 pix = floor(p / pixel);\n    vec2 frac = mod(p, pixel)/pixel*1.0;\n    float s1 = texture(tex0, pix*pixel).x;\n    float s2 = texture(tex0, (pix+vec2(1,0))*pixel).x;\n    float s3 = texture(tex0, (pix+vec2(0,1))*pixel).x;\n    float s4 = texture(tex0, (pix+vec2(1,1))*pixel).x;\n    \n    float height = mix(\n    \tmix(s1, s3, frac.y),\n        mix(s2, s4, frac.y),\n    \tfrac.x\n    );\n    \n    height = height*1.6;\n    height = height-0.625;\n    height = max(height, height*0.1);\n    \n    return height;\n}\n\nfloat global_offset(vec3 p) {\n    \n    vec2 texcoord = mod(p.xy*0.0006 + 0.0, vec2(1.0));\n    \n    float h = hill(texcoord) * 10.0;\n    \n    texcoord = mod(p.xy*0.00004 + 0.0, vec2(1.0));\n    \n    h += hill(texcoord) * 100.0;\n    \n    \n    return h;\n}\n\nfloat scene(vec3 p)\n{\n    float _ = iTime;\n    \n\tfloat ret = 1e9;\n    \n    ret = min(ret, sphere(p - vec3(5, 0, 0), 2.0));\n    \n    \n    float offset = global_offset(p);\n    {\n        // details\n        ret = min(ret, p.z - 3.0*hill(mod(p.xy*0.005 + 0.0, vec2(1.0))) +1.0 + offset);\n        ret = min(ret, 1.4 - 3.0*hill(mod(p.xy*0.0049 + 0.0, vec2(1.0))) +2.0 - p.z - offset);\n    }\n    \n    return ret;\n}\n\nvec3 normal(vec3 pos)\n{\n\tvec3 e = vec3(0.01, 0, 0);\n    return normalize(vec3(\n    \tscene(pos+e.xyy) - scene(pos-e.xyy),\n    \tscene(pos+e.yxy) - scene(pos-e.yxy),\n    \tscene(pos+e.yyx) - scene(pos-e.yyx)\n    ));\n}\n\nmat2 rot(float a) {\n    return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\nvec3 trace(vec2 coord)\n{\n\tvec3 ray = normalize(vec3(1, coord*0.5));\n    //ray.yz -= 1.0;\n    //ray.y *= iResolution.x / iResolution.y;\n    \n    float _ = iTime;\n\tvec3 p = vec3(0.0);\n    float r = 200.0;\n    \n    float speed = 0.04;\n    \n    p.x = r * sin(_ * speed);\n    p.y = r * cos(_ * speed);\n    \n    ray.xz *= rot(-0.2);\n    ray.xy *= rot(-_ * speed * 1.0);\n    \n    p.z = 1.0 - global_offset(p);\n    \n    //p.y += sin(iTime);\n\tvec3 retColor = vec3(0);\n    float travelD = 0.0;\n    int hit = 0;\n    for (int i = 0; i < 1000; ++i)\n    {\n    \tfloat d = scene(p);\n        d *= 0.2;\n        //if (abs(d) > 0.02) {\n        //    d = 0.02 * sign(d);\n        //}\n        if (abs(d) < 0.01)\n        {\n        \tretColor = vec3(1,0,0);\n            hit = 1;\n            break;\n        }\n        p += d * ray;\n        travelD += d;\n    }\n    if (hit > 0)\n    {\n        vec3 n = normal(p);\n        vec3 color1 = texture(tex0, p.xy*0.23).rgb;\n        vec3 color2 = texture(tex1, p.xy*0.1).rgb - 0.5;\n        \n\t    retColor = color1 * 0.3*vec3(0.05, 0.04, 0.04);\n        \n        float dotp = max(0.0, dot(n, normalize(vec3(0.1, 0.1, 1.0))));\n        dotp = pow(dotp, 4.0);\n        retColor += max(color2, 0.0) * dotp*2.0;\n        \n        retColor = max(retColor, vec3(0));\n    }\n    \n    return retColor * exp(-travelD / 50.0);\n}\nvec3 vignette(vec3 color, vec2 coord) {\n    return color * smoothstep(1.0, 0.0, max(length(coord)-1.5,0.0)*2.0);\n}\n\nvec3 gamma(vec3 c) {\n\treturn pow(c, vec3(1.0/2.2));\n}\n\nvec3 filmicToneMapping(vec3 color)\n{\n\tcolor = max(vec3(0.), color - vec3(0.004));\n\tcolor = (color * (6.2 * color + .5)) / (color * (6.2 * color + 1.7) + 0.06);\n\treturn color;\n}\n\nvec3 tonemap(vec3 c) {\n    // more tonemappers: https://www.shadertoy.com/view/lslGzl\n    return filmicToneMapping(c);\n\t//return c / (c + 1.0);\n    //return c;\n}\n\nvec3 stack(vec2 coord) {\n    \n    vec3 color = trace(coord);\n    \n    color = tonemap(color);\n    color = vignette(color, coord);\n    color = gamma(color);\n\t\n    return color;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy - 0.5;\n    uv.x = uv.x * iResolution.x / iResolution.y;\n\tfragColor = vec4(stack(uv * 2.0),1.0);\n}","name":"Image","description":"","type":"image"}]}