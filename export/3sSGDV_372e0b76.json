{"ver":"0.1","info":{"id":"3sSGDV","date":"1549971919","viewed":382,"name":"Long way home","username":"skaplun","description":"Original - http://worldintheirart.tumblr.com/post/163985074617\nIts probably better not to raymarch but analytically test ray intersection with torus and plane.\nCircle noise by Leukbaars","likes":19,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","noise","circle","animation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define AA (10./iResolution.y)\n#define MAX_MARCHING_STEPS 255\n#define MIN_DIST 0.\n#define MAX_DIST 100.0\n#define EPSILON 0.0001\n#define PI 3.1415\n#define TAU (PI * 2.)\n#define TORUS vec2(10., 1.)\n\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\nmat3 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n    vec3 f = normalize(center - eye);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    return mat3(s, u, -f);\n}\n\nvec2 unionSDF(vec2 a, vec2 b) {\n    if(a.x < b.x)\n        return a;\n    else\n        return b;\n}\n\nfloat sdInnerTorus( vec3 p, vec2 t ) {\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return t.y - length(q);\n}\n\nvec2 sceneSDFwithMat(vec3 samplePoint) {    \n    float torus = sdInnerTorus(samplePoint, TORUS);\n    return unionSDF(\n                    vec2(torus, 1.),\n                    vec2(samplePoint.y + .25, 2.)\n                    );\n}\n\nvec2 shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end) {\n    float depth = start;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        vec2 dist = sceneSDFwithMat(eye + depth * marchingDirection);\n        if (dist.x < EPSILON) {\n            return vec2(depth, dist.y);\n        }\n        depth += dist.x;\n        if (depth >= end) {\n            return vec2(end, 0.);\n        }\n    }\n    return vec2(end, 0.);\n}\n\nvec2 convertToPolarCoords(in vec3 p){\n    float bAng = atan(-p.z, p.x);\n    p *= rotateY(-bAng);\n    float sAng = atan(p.x - TORUS.x, p.y);\n    \n    return (vec2(bAng, sAng) + PI)/TAU;\n}\n\nvec2 hash( float n ){\n    float sn = sin(n);\n    return fract(vec2(sn,sn*42125.13));\n}\n\nfloat circleNoise( vec2 uv ){\n    float uv_y = floor(uv.y);\n    uv.x += uv_y*.31;\n    vec2 f = fract(uv);\n    vec2 h = hash(floor(uv.x)*uv_y);\n    float m = (length(f-.25-(h.x*.5)));\n    float r = h.y*.25;\n    return smoothstep(r+AA, r, m);\n}\n\nconst mat2 rot = mat2( 0.4,  0.4, -0.4,  0.4 );\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec3 eye = vec3(0., 0., TORUS.x - .125);\n    vec3 viewDir = rayDirection(60., iResolution.xy, fragCoord);\n    vec3 worldDir = viewMatrix(eye, vec3(1., 0., 9.75), vec3(0.0, 1.0, 0.0)) * viewDir;\n    \n    vec2 dist = shortestDistanceToSurface(eye, worldDir, MIN_DIST, MAX_DIST);\n    \n    if (dist.x < MAX_DIST - EPSILON) {\n        vec3 p = (eye + dist.x * worldDir);\n        vec2 pc = convertToPolarCoords(p);\n        \n        if(dist.y == 1.){\n            float m = 0.;\n            vec2 uv = pc * vec2(64., 16.) + vec2(iTime * 3., 0.);\n            for(float i=1.;i<=3.;i++){\n                uv += uv * rot * (1. + .012 * i) + 1121.13;\n                m += circleNoise(uv);\n            }\n            fragColor = vec4(vec3(m), 1.0);\n        }else{\n            float clr = smoothstep(.01 + AA, .01, abs(9.1 - length(p.xz)));\n            clr = max(smoothstep(.01 + AA, .01, abs(10.9 - length(p.xz))), clr);\n            clr = max(smoothstep(.025 + AA, .025, abs(10. - length(p.xz)))\n                    * smoothstep(.25 + AA, .25, abs(.5 - fract(p.x + iTime * 4.))), clr);\n            fragColor = vec4(vec3(clr), 1.0);\n        }\n    }else{\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n    }\n}","name":"Image","description":"","type":"image"}]}