{"ver":"0.1","info":{"id":"4dSyWK","date":"1493727401","viewed":968,"name":"Speed lines","username":"Hadyn","description":"A somewhat accidental spinoff from a new shader I'm working on, which is in itself a more intentional spinoff of an idea I had whilst working on the blue flame shader.","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* \n * Created by Hadyn Lander \n * 3D noise from Nikita Miropolskiy, nikat/2013 https://www.shadertoy.com/view/XsX3zB\n * That basically includes all of this neat looking code up top:\n */\n\n/* discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n/* skew constants for 3d simplex functions */\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\n/* 3d simplex noise */\nfloat simplex3d(vec3 p) {\n\t /* 1. find current tetrahedron T and it's four vertices */\n\t /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n\t /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n\t \n\t /* calculate s and x */\n\t vec3 s = floor(p + dot(p, vec3(F3)));\n\t vec3 x = p - s + dot(s, vec3(G3));\n\t \n\t /* calculate i1 and i2 */\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t /* x1, x2, x3 */\n\t vec3 x1 = x - i1 + G3;\n\t vec3 x2 = x - i2 + 2.0*G3;\n\t vec3 x3 = x - 1.0 + 3.0*G3;\n\t \n\t /* 2. find four surflets and store them in d */\n\t vec4 w, d;\n\t \n\t /* calculate surflet weights */\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n\t w = max(0.6 - w, 0.0);\n\t \n\t /* calculate surflet components */\n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.0), x3);\n\t \n\t /* multiply d by w^4 */\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t /* 3. return the sum of the four surflets */\n\t return dot(d, vec4(52.0));\n}\n\n/* const matrices for 3d rotation */\nconst mat3 rot1 = mat3(-0.37, 0.36, 0.85,-0.14,-0.93, 0.34,0.92, 0.01,0.4);\nconst mat3 rot2 = mat3(-0.55,-0.39, 0.74, 0.33,-0.91,-0.24,0.77, 0.12,0.63);\nconst mat3 rot3 = mat3(-0.71, 0.52,-0.47,-0.08,-0.72,-0.68,-0.7,-0.45,0.56);\n\n/* directional artifacts can be reduced by rotating each octave */\nfloat simplex3d_fractal(vec3 m) {\n    return   0.5333333*simplex3d(m*rot1)\n\t\t\t+0.2666667*simplex3d(2.0*m*rot2)\n\t\t\t+0.1333333*simplex3d(4.0*m*rot3)\n\t\t\t+0.0666667*simplex3d(8.0*m);\n}\n\n\n/*\n* The following is all my mess:\n*/\n\n#define RADIUS 1.45\n#define EDGE 0.55\n#define NOISEBIGNESS 0.1 \n#define NIGHTSPEEDBONUS 1.25 \t\t\n#define PI 3.14159265359\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = 28.22+NIGHTSPEEDBONUS*iTime;\n    float bignessScale = 1.0/NOISEBIGNESS;\n\tvec2 p = fragCoord.xy / iResolution.y;\n    float aspect = iResolution.x/iResolution.y;\n    vec2 positionFromCenter = p-vec2(0.5*aspect, 0.5);\n    \n    p = vec2(0.5*aspect, 0.5)+normalize(positionFromCenter)*min(length(positionFromCenter)+0.00, 0.05);\n        \n    // Noise:\n    vec3 p3 = bignessScale*0.25*vec3(p.x, p.y, 0.0) + vec3(0.0, 0.0, time*0.025);\n    float noise = simplex3d(p3*32.0);// simplex3d_fractal(p3*8.0+8.0);\n\tnoise = 0.5 + 0.5*noise;\n\t\n    float distanceFromCenter = clamp(length(positionFromCenter)/RADIUS, 0.0, 1.0)*(noise);    \n    \n    float falloffMask = 2.0*distanceFromCenter-1.0;\n    falloffMask = 1.0-pow(abs(falloffMask), 4.0);\n    \n    float thinnerMask = 2.0*distanceFromCenter-1.0;\n    thinnerMask = pow(1.0-abs(thinnerMask), 4.0);\n    float steppedValue = smoothstep(EDGE,EDGE+0.1, noise*falloffMask);\n    \n    float finalValue = steppedValue;\n    //finalValue = falloffMask;\n    // uncomment the above line for a softer effect.\n    \n    finalValue = smoothstep(EDGE,EDGE+0.1, noise*finalValue);       \n    \n    vec3 finalColor = vec3(1.0)*finalValue;    \n\tfragColor = vec4(finalColor,1.0);\n}","name":"Image","description":"","type":"image"}]}