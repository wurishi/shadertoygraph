{"ver":"0.1","info":{"id":"MtGXzz","date":"1482539475","viewed":161,"name":"Fatou Tessellation","username":"alytile","description":"Tessellation on Fatou set","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#version 150\n//https://www.shadertoy.com/view/MtGXzz\n#define SHADER_SHADERTOY 0\n#define SHADER_VSCODE 1\n#define SHADER_HTML 2\n#define SHADER_KODELIFE 3\n\n#if __VERSION__ != 150\n#define SHADER SHADER_SHADERTOY\n//#define SHADER SHADER_VSCODE\n//#define SHADER SHADER_HTML\n#else\n#define SHADER SHADER_KODELIFE\n#endif\n\n#if SHADER == SHADER_VSCODE\n#define texture vec4(0);\n#endif\n#if SHADER == SHADER_HTML\n#define texture texture2D\n#endif\n#if SHADER == SHADER_KODELIFE\n#define texture vec4(0);\nout vec4 fragColor;\n#endif\n#if SHADER >= SHADER_HTML\nuniform float time;uniform vec2 mouse, resolution;uniform vec3 spectrum;uniform sampler2D texture0, texture1, texture2, texture3, prevFrame;\n#define iResolution resolution\n#define iTime time\n#define iMouse mouse\n#define iChannel0 texture0\n#define iChannel1 texture1\n#define iChannel2 texture2\n#define iChannel3 texture3\n#endif\n\n\nconst float maxiter=256.;\nconst float pi = 4.0*atan(1.,1.);\nconst float pi2 = pi*2.;\nconst float degree = 2.0;\nconst float ratio = .6;\nconst float ratiopi2 = ratio*pi2;\nconst float bailout = exp(ratiopi2);\nconst float speed = -0.5;\nconst float scale = 1.4;\n\n\nvec4 getNyanCatColor( vec2 p, float time )\n{\n\tp = clamp(p,0.0,1.0);\n    p.x = mix(0.07, 0.9, p.x);\n    p.y = mix(0.24, 0.78, p.y);\n\tp.x = p.x*40.0/256.0;\n\tp.y = 0.5 + 1.2*(0.5-p.y);\n\tp = clamp(p,0.0,1.0);\n\tfloat fr = floor( mod( 20.0*time, 6.0 ) );\n\tp.x += fr*40.0/256.0;\n\treturn texture( iChannel0, p );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime;\n    float iter=0.;\n\tvec2 z =  scale*(2.*fragCoord.xy /iResolution.y-vec2(iResolution.x/iResolution.y,1.));\n    vec2 uv=2.*iMouse.xy /iResolution.y-vec2(iResolution.x/iResolution.y,1.);\n    if(iMouse.xy==vec2(0.))\n        uv=vec2(-1.,0.);\n    bool bailed=false;\n    for(float i = 0.;i<maxiter;i++)\n    {\n        iter=i;\n        z=z*mat2(z*vec2(1,-1),z.yx)+uv;\n\n        if(length(z)>bailout) {\n            bailed = true;\n            break;\n        }\n    }\n    if (bailed==false) {\n        fragColor = vec4(0);\n        return;\n    }\n    \n    float cx = atan(z.y,z.x);\n    float cy = log(length(z));\n\n    cx += speed*time*pow(degree,iter);\n    \n    float red = mod(cy/(ratiopi2),1.);\n    float green = 0.;\n    float blue  = mod(cx/(2.*pi),1.);    \n#if SHADER == SHADER_HTML\n\t    fragColor = vec4(red,0.,blue,1.0);\n        //fragColor = getNyanCatColor(vec2(blue,red),time); \n#elif SHADER == SHADER_SHADERTOY\n//    fragColor = vec4(red,0.,blue,1.0);\n        fragColor = getNyanCatColor(vec2(blue,red),time);    \n#else\n\t    fragColor = vec4(red,0.,blue,1.0);\n#endif\n}\n\n#if SHADER != SHADER_SHADERTOY\nvoid main(void)\n{\n#if SHADER <= SHADER_HTML\n    vec4 fragColor = vec4(0);\n#endif\n    mainImage(fragColor,gl_FragCoord.xy);\n#if SHADER <= SHADER_HTML\n    gl_FragColor = fragColor;\n#endif\t\n}\n#endif","name":"Image","description":"","type":"image"}]}