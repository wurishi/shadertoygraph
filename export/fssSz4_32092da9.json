{"ver":"0.1","info":{"id":"fssSz4","date":"1618396665","viewed":119,"name":"Sharingan314","username":"Domain314","description":"practicing polar coordinates. \nAlso first time using a buffer. still no idea what buffers exactly are.\n\nMany thanks to this tutorial from BigWIngs:\nhttps://www.youtube.com/watch?v=r1UOB8NVE8I","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["2d","polarcoordinates","sharingan"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 st = vec2(atan(uv.x, uv.y), length(uv));\n\n    float t = iTime+sin(iTime)*0.5+.5;\n    \n    uv = vec2(st.x/6.2831 -t, st.y);\n    \n    vec3 col = vec3(0.);\n    uv *= 3.;\n    \n    col.rgb += texture(iChannel0, uv).rgb;\n    //col.rgb += texture(iChannel1, uv).rgb;\n    \n    uv = vec2(st.x/6.2831+.1 - t*.3+st.y, st.y);\n    uv.x *= 7.;\n    \n    float m = min(fract(uv.x), fract(1.-uv.x));\n    float c = smoothstep(0., .2, m*.9+.2-uv.y);\n    c += smoothstep(0., .2, m*.3+.1-uv.y);\n    \n    col += vec3(c*0.2);\n    col -= smoothstep(0.2, 1., uv.y);\n    col -= smoothstep(0.06, 0., uv.y);\n    \n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec2 N(float angle){\n    return vec2(sin(angle), cos(angle));\n}\n\nfloat circle(vec2 _uv,float _radius, float _edge, vec2 _pos){\n    _uv += _pos;\n    vec2 dist = _uv - vec2(0.5);\n\treturn 1.-smoothstep(_radius - (_radius*_edge),\n                         _radius + (_radius*_edge),\n                         dot(dist,dist)*20.);\n}\n\nfloat form(vec2 uv){\n    float f = -circle(uv+vec2(1.4, 1.5), 60., 0.003, vec2(0.));\n    f += circle(uv+vec2(1.25, 1.85), 60., 0.003, vec2(0.));\n    f -= smoothstep(.374, .38, uv.y);\n    f -= smoothstep(-.43, -.434, uv.y);\n    return clamp(0., 1., f);\n}\n\nfloat form2(vec2 uv){\n    float d = 0.;\n    d += smoothstep(-0.2, -0.21, dot(uv, N(0.65)));\n    d += smoothstep(-0.2, -0.21, dot(uv, N(-0.65)));\n    d += smoothstep(.414, .418, uv.y);\n    d -= smoothstep(-.38, -.384, uv.y)*10.;\n    //d += form(uv);\n    return clamp(d, 0., 1.);\n}\n\nvec3 customTexture(vec2 uv){\n    vec3 col = vec3(0.6, 0., 0.);\n    col += form(uv);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 col = customTexture(uv);\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec2 N(float angle){\n    return vec2(sin(angle), cos(angle));\n}\n\nfloat circle(vec2 _uv,float _radius, float _edge, vec2 _pos){\n    _uv += _pos;\n    vec2 dist = _uv - vec2(0.5);\n\treturn 1.-smoothstep(_radius - (_radius*_edge),\n                         _radius + (_radius*_edge),\n                         dot(dist,dist)*20.);\n}\n\nfloat form(vec2 uv){\n    float f = 1.;\n    f -= circle(uv+vec2(1.4, 1.5), 60., 0.003, vec2(0.));\n    f += circle(uv+vec2(1.25, 1.85), 60., 0.003, vec2(0.));\n    f += smoothstep(.374, .38, uv.y);\n    f += smoothstep(-.43, -.434, uv.y);\n    return clamp(0., 1., f);\n}\n\nfloat form2(vec2 uv){\n    float d = 0.;\n    d += smoothstep(-0.2, -0.21, dot(uv, N(0.65)));\n    d += smoothstep(-0.2, -0.21, dot(uv, N(-0.65)));\n    d += smoothstep(.414, .418, uv.y);\n    d -= smoothstep(-.38, -.384, uv.y)*10.;\n    //d += form(uv);\n    return clamp(d, 0., 1.);\n}\n\nvec3 customTexture(vec2 uv){\n    vec3 col = vec3(0.6, 0., 0.);\n    col -= form2(uv);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    //vec2 st = vec2(atan(uv.x, uv.y+iTime), length(uv));\n\n    //st.x *= 2.;\n    \n    vec3 col = customTexture(uv);\n\n    fragColor = vec4(col,1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}