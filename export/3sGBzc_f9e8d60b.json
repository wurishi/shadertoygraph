{"ver":"0.1","info":{"id":"3sGBzc","date":"1607604794","viewed":96,"name":"LittleSquare","username":"Nashoute","description":"I'm trying to do some tutorials and change it a lil","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","square","oldscreen"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//thanks to The art of code for the tutorial : https://www.youtube.com/watch?v=2R7h76GoIJM\n\nfloat hash21(vec2 p){ //fonction pour donner un aspect aléatoire\n    p = fract(p*vec2(234.34,435.345));\n    p += dot(p,p+35.14);\n    return fract(p.x*p.y);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5+iTime/8.*iResolution.xy )/iResolution.y;\n    uv*=10.;\n\n    vec3 col = vec3(0); //couleur noir\n    vec2 gv = fract(uv); //ne prends que la partie décimale et crée des cases\n    vec2 id = floor(uv); //numéro de case\n    float n = hash21(id); //Donne une nombre aléatoire à la case entre 0 et 1\n    \n    //col.rg = gv; //Couleur des nouvelles uv.\n    \n    if(n <0.5){\n        if(hash21(uv)<0.5){ //aspect rétro\n            if(gv.x<0.2  && gv.y>0.2){ //barres horizontales\n                col = vec3(1);\n            }\n\n        }else{\n            if(gv.y<0.2){ //barres verticales\n                col = vec3(1);\n            }\n        }\n    }\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}