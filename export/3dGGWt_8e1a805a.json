{"ver":"0.1","info":{"id":"3dGGWt","date":"1571143058","viewed":269,"name":"ShaderTober - Ash","username":"Flopine","description":"A small doodle with inktober's theme \"Ash\". Kind of dark... like my heart as I saw the last episode of My little Pony... Snif this is it already TvT","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","noise","inktober"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, Coyhot, Alkama and YX for teaching me\n// Thanks LJ for giving me the love of shadercoding :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n#define ITER 100.\n#define PI 3.141592\n\nfloat hash21 (vec2 x)\n{return fract(sin(dot(vec2(22.44,54.5),x))*1245.5);}\n\n// taken from YX here : https://www.shadertoy.com/view/tdlXW4\n// rough shadertoy approximation of the bonzomatic noise texture\nvec4 texNoise(vec2 uv)\n{\n    float f = 0.;\n    f += texture(iChannel0, uv*.125).r*.5;\n    f += texture(iChannel0, uv*.25).r*.25;\n    f += texture(iChannel0, uv*.5).r*.125;\n    f += texture(iChannel0, uv*1.).r*.125;\n    f=pow(f,1.2);\n    return vec4(f*.45+.05);\n}\n\nmat2 rot(float a)\n{return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nfloat stmin(float a, float b, float k, float n)\n{\n    float st = k/n;\n    float u = b-k;\n    return min(min(a,b), 0.5*(u+a+abs(mod(u-a+st, 2.*st)-st)));\n}\n\nfloat cyl (vec2 p, float r)\n{return length(p)-r;}\n\nfloat od (vec3 p, float d)\n{\n    p.xz *= rot(iTime);\n    return dot(p,normalize(sign(p)))-d;\n}\n\nfloat box (vec3 p, vec3 c)\n{\n    vec3 q = abs(p)-c;\n    return min(0., max(q.x,max(q.y,q.z)))+length(max(q,0.));\n}\n\nfloat pillars (vec3 p)\n{\n    float per = 3.;\n    p.xz = mod(p.xz,per)-per*0.5;\n    float c = cyl(p.xz, 0.45);\n    p.y = abs(p.y)-3.;\n    p.xz = mod(p.xz,per)-per*0.5;\n    return min(od(p,0.5),c);\n}\n\nfloat ashes (vec3 p)\n{\n    float r = 0.2;\n    float per = 0.5;\n    vec3 id = floor(p/per);\n    p.y -= iTime*hash21(id.xz*5.+1.5);\n    p.x += texNoise(p.yz*0.5+iTime*0.1).r;\n    p.z += texNoise(p.xy*0.8+iTime*0.1).r;\n    p = mod(p, per)-per*0.5;\n    return length(p)-r;\n}\n\nfloat SDF (vec3 p)\n{\n    return max(ashes(p),stmin(-box(p, vec3(15.,4., 15.)),pillars(p), 0.5, 4.));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    float dither = hash21(uv);\n    \n    vec3 ro = vec3(0.001,0.001,-5.),\n        p = ro,\n        rd = normalize(vec3(uv,1.)),\n        col = vec3(0.);\n    \n    float shad = 0.;\n    \n    for (float i=0.; i<ITER; i++)\n    {\n        float d = SDF(p);\n        if (d<0.01)\n        {\n            shad = i/ITER;\n            break;\n        }\n        d *= 0.9+dither*0.21;\n        p+=d*rd;\n    }\n   \n    float t = length(ro-p);\n    \n    col = vec3(shad);\n\tcol = mix(col, vec3(0.1,0.05,0.05), 1.-exp(-0.006*t*t*texNoise(uv*0.5-vec2(0.,iTime*0.1)).r));\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}