{"ver":"0.1","info":{"id":"tdXSDS","date":"1558823024","viewed":332,"name":"Ocean shore shader test","username":"sergei_am","description":"Ocean shore waves effect relying on distance to shore field. The foam perturbation is inspired by the Quake water. Wave height (power) is constructed using two powers for X and 1-X functions in the [0;1] range.","likes":8,"published":1,"flags":0,"usePreview":1,"tags":["water","ocean","shore"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nfloat get_foam_for_position(in vec2 pos)\n{\n    // foam perturbed coordinates\n    vec2 foam_uv = pos*8.0;\n    \n    float pos_noise = abs(sin(pos.x*1.0)*sin(pos.y*1.0));\n    \n    float fx = pos.y;\n    float fy = pos.x;\n    \n    foam_uv.x += cos(fx*20.0 + iTime*1.0)*0.17;\n    foam_uv.y += sin(fy*20.0 + iTime*1.0)*0.17;\n    \n    // process blob texture to produce foam-like pattern\n    float foam = texture(iChannel0, foam_uv).x;\n    foam = 1.0 - foam;\n    foam = min( foam*1.2, 1.0 );\n    foam = pow( foam, 4.0 );\n    foam = min( foam*1.5, 1.0 );\n    \n    return foam;\n}\n\nvec4 get_water_surface(in vec2 pos, in float sdf)\n{\n    // coastal pulse wave\n    float wave_pulse = sdf + iTime * 0.2;\n    wave_pulse = fract(wave_pulse);\n    \n    // construct wave shape\n    float wave_front = pow(wave_pulse, 64.0);\n    wave_front = min((wave_pulse - 0.95) * 20.0, 1.0);\n    float wave_back = pow(1.0 - wave_pulse, 8.0);\n    //wave_back = min( 1.0, ((1.0 - wave_pulse) - 0.6) * 4.0 );\n    \n    float wave_height = max(wave_front, wave_back);\n    \n    float wave_fadeoff = 1.0 - min(1.0, max((sdf - 0.6)*5.0, 0.0));\n\n\tfloat foam = get_foam_for_position(pos);\n    \n    float wave = max( 0.0, wave_height*1.5 - 1.0 + foam );\n    wave *= wave_fadeoff;\n    \n    vec3 water = vec3(0.1, 0.3, 0.8);\n    vec3 wave_foam = vec3(wave, wave, wave);\n    \n    vec3 color = water + wave_foam;\n    return vec4(color, wave_height);\n}\n\n\nfloat df(float x, float y)\n{\n    return 1.0 - x - y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 pos = fragCoord/iResolution.xy;\n    vec4 color = get_water_surface(pos, df(pos.x, pos.y));\n    fragColor = vec4(color.xyz, 1.0);\n}","name":"Image","description":"","type":"image"}]}