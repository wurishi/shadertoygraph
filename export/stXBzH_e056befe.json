{"ver":"0.1","info":{"id":"stXBzH","date":"1650525330","viewed":130,"name":"f2 noise painter","username":"KoolieAid","description":"part of my finals in my subject: GRAPROG","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["noise","colors","random","simplex","schoolwork"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = vec3(0.1);\n    vec4 img = texture(iChannel0, uv);\n    col = mix(col, img.rgb, img.a);\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec4 circle(in vec2 uv, float x, float y, float radius, vec3 color)\n{\n    vec2 dist = uv - vec2(x, y);\n    \n    float a = 1.-smoothstep(radius-(radius*0.01), radius + 0.005, dot(dist,dist)*4.0);.0 - step(vec2(x, y), uv);\n    \n    return vec4(color, a);\n}\n\n/*\nSimplex noise function\nDescription : Array and textureless GLSL 2D simplex noise function.\n      Author : Ian McEwan, Ashima Arts.\n  Maintainer : stegu\n     Lastmod : 20110822 (ijm)\n     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n               Distributed under the MIT License. See LICENSE file.\n               https://github.com/ashima/webgl-noise\n               https://github.com/stegu/webgl-noise\n*/\n\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\nfloat snoise(vec2 v) {\n    const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,  // -1.0 + 2.0 * C.x\n                        0.024390243902439); // 1.0 / 41.0\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n    vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    i = mod289(i); // Avoid truncation effects in permutation\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n        + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n\nfloat map(float value, float low1, float high1, float low2, float high2)\n{\n    return low2 + (value - low1) * (high2 - low2) / (high1 - low1);\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 old = texture(iChannel1, uv); // reference itself LMAO BIG BRAIN\n    vec4 new = texture(iChannel0, uv);\n    \n    vec4 combined;\n    combined.rgb = mix(old.rgb, new.rgb, new.a);\n    combined.a = clamp(old.a + new.a, 0., 1.0);\n    fragColor = combined;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float ratio = iResolution.x/iResolution.y;\n    uv.x *= ratio;\n    \n    float px = snoise(vec2(iTime * 0.1 + 0.1));\n    float py = snoise(vec2(-iTime * 0.2 + 0.1));\n    \n    px = map(px, -1., 1., 0.0, 1.0);\n    py = map(py, -1., 1., 0.0, 1.0);\n    \n    float scale = map(snoise(vec2(iTime + 50. * 0.1) * 0.25), -1., 1., 0.0, 0.1);\n    \n    float rn = map(snoise(vec2(iTime * 0.2 + 100.)), -1., 1., 0.0, 1.0);\n    float gn = map(snoise(vec2(iTime * 0.1 + 100.)), -1., 1., 0.0, 1.0);\n    float bn = map(snoise(vec2(iTime * 0.3 + 200.)), -1., 1., 0.0, 1.0);\n    \n    vec3 c = vec3(rn, gn, bn);\n    \n    vec4 w = circle(uv, px * ratio, py,  scale, c);\n    \n    // Output to screen\n    fragColor = w;\n}","name":"Buffer B","description":"","type":"buffer"}]}