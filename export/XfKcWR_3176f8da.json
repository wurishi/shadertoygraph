{"ver":"0.1","info":{"id":"XfKcWR","date":"1731782153","viewed":138,"name":"1st shader-many circles edition","username":"I_m_not_here","description":"my first shader. I used some SDFs and space transformations","likes":6,"published":3,"flags":0,"usePreview":0,"tags":["sdf","chaos"],"hasliked":0,"parentid":"4cKcWR","parentname":"SDF Test 15/11/24 2"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float mixFactor =  sin(iTime*2.)*0.5 + 0.5;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv.x *= iResolution.x/iResolution.y;\n    //uv *= floor(abs(sin(iTime)*3.0))+1.0;\n    vec2 oldUV = uv;\n    //uv = fract(uv);\n    float factor = 1.0f;\n    \n    Circle circle1 = Circle( mod(iTime, 3.5)/1.1, vec2(0.5, 0.8));\n    Circle circle2 = Circle(mod(iTime, 3.5)/1.2, vec2(1, 0.2));\n    Circle circle3 = Circle(mod(iTime, 3.5)/1.3, vec2(-0.5, 0.4));\n    \n    Circle circle4 = Circle( mod(iTime + 1.75, 3.5)/1.1, vec2(0, 0));\n    Circle circle5 = Circle(mod(iTime + 1.75, 3.5)/1.2, vec2(1, 0.3));\n    Circle circle6 = Circle(mod(iTime + 1.75, 3.5)/1.3, vec2(-0.5, -0.3));\n    \n    Circle circle7 = Circle( mod(iTime + 1., 5.)/1.1, vec2(-0.1, 0));\n    Circle circle8 = Circle(mod(iTime + 1., 5.)/1.5, vec2(0.3, 0.2));\n    Circle circle9 = Circle(mod(iTime + 1., 5.)/1.6, vec2(0.4, -0.2));\n    // Time varying pixel color\n    vec3 col1 = vec3(0,0,0);\n    \n    for (float i = 0.0; i < 6.0; i++){\n        float val = pow(0.5,i);\n        col1 += vec3(0.8,0.5,0.1f) *(SDF(circle1, uv)+SDF(circle2, uv)+SDF(circle3, uv)\n                     +SDF(circle4, uv)+SDF(circle5, uv)+SDF(circle6, uv)\n                     +SDF(circle7, uv)+SDF(circle8, uv)+SDF(circle9, uv)) * val;\n        uv*=2.0;\n        uv -= vec2(factor);\n        uv = fract(uv);\n        for (float j = 0.; j < 1.+abs(floor(uv.x/val)) + abs(floor(uv.y/val)); j++)\n        {\n            uv.xy = uv.yx;\n            uv.x *= -1.0;\n        }\n        \n        factor*=2.0;\n    }\n    uv = oldUV;\n    vec3 col2 = vec3(0,0,0);\n    for (float i = 0.0; i < 6.0; i++){\n\n        col2 += vec3(0.8,0.3,0.2f) *(SDF(circle1, uv)+SDF(circle2, uv)+SDF(circle3, uv)\n                     +SDF(circle4, uv)+SDF(circle5, uv)+SDF(circle6, uv)\n                     +SDF(circle7, uv)+SDF(circle8, uv)+SDF(circle9, uv)) * pow(0.5,i);\n        uv*=2.0;\n        uv -= vec2(factor);\n        uv = fract(uv);\n        uv.xy = uv.yx;\n        uv.x *= -1.0;\n        uv.x = uv.y;\n        factor*=2.0;\n    }\n    \n    \n    // Output to screen\n    fragColor = vec4(-vec3(0.2,0.2,0.2) + col1 * mixFactor + col2 * (1.-mixFactor),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"struct Circle { \n    float radius; \n    vec2 center; \n}; \n\n\nfloat SDF(Circle circle, vec2 pos)\n{\n    float dist = 0.019/(abs(length(pos-circle.center)-circle.radius)+0.01);\n    if (dist < 0.01){\n    return 0.;\n    }\n    return dist;\n}","name":"Common","description":"","type":"common"}]}