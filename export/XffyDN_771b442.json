{"ver":"0.1","info":{"id":"XffyDN","date":"1721120251","viewed":38,"name":"The Tentacles Array","username":"akr51","description":"An array of tentacles ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","tentacles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define ITR 64\n#define DST 64.0\n#define SRF 0.001\n\n\n\nmat2 rt(float t)\n{\n\n\n    float c = cos(t);\n    float s = sin(t);\n    return mat2(c, -s, s, c);\n\n\n}\n\n\n\nfloat n2(vec3 p)\n{\n\n\n    float xs = 2.0;\n    float ys = 2.0;\n    float zs = 2.0;\n    return cos(p.x * xs) * sin(p.y * ys) * sin(p.z * zs) * 0.01;\n    \n\n}\n\n\n\n\n\nfloat n1(vec3 p)\n{\n\n\n    float xs = 23.0;\n    float ys = 21.0;\n    float zs = 12.0;\n    return cos(p.x * xs) * sin(p.y * ys) * sin(p.z * zs) * 0.01;\n    \n\n}\n\n\n\nfloat sphere(vec3 sp)\n{\n    sp.y *= 0.90;\n    sp.y = cos(sp.y + sp.x * 0.3 + iTime);\n    sp.z -= 4.8;\n    sp.x = mod(sp.x + iTime * 5.0, 4.0) - 2.0;\n    sp.zy *= rt(23.0);\n    return length(sp) - length(vec3(sp.x * 0.6, sp.y * 0.89, sp.z * 0.3)) - 0.21;\n\n}\n\n\nfloat plane(vec3 sp)\n{\n\n\n    return -sp.z + 13.4 + n2(sp);\n\n\n}\n\n\n\nfloat map(vec3 sp)\n{\n\n    \n    float d = sphere(sp) + n1(sp);\n    return min(d, plane(sp));\n    return sphere(sp);\n}\n\n\n\nfloat mrch(vec3 ro, vec3 rd)\n{\n\n    float d0 = 0.0;\n    \n    for (int i = 0; i < ITR; i++)\n    {\n\n        vec3 sp = ro + rd * d0;\n        float ds = map(sp);\n        d0 += ds;\n        if (d0 > DST || abs(ds) < SRF) break;\n\n\n    }\n\n\n    return d0;\n\n}\n\n\n\n\nvec3 nml(vec3 p)\n{\n\n\n    vec2 v = vec2(0.001, 0.0);\n    return normalize(map(p) - vec3(map(p - v.xyy), map(p - v.yxy), map(p - v.yyx)));\n\n}\n\n\n\nfloat light(vec3 sp, vec3 rd, vec3 lp)\n{\n\n\n    vec3 l = normalize(lp - sp);\n    vec3 n = nml(sp);\n    float df = clamp(dot(n, l), 0.0, 1.0);\n    float sc = pow(max(0.0, dot(reflect(l, nml(sp)), rd)), 1000.1);\n    float d = mrch(sp + n * 0.01, l);\n    df += sc;\n    \n    // shadow\n    if (d < length(lp - sp))\n    {\n    \n    \n        df *= 0.08;\n    \n    }\n    \n    return df;\n    \n\n}\n\n\n\nvec3 dir(vec2 uv, vec3 ro, vec3 fx, float fov)\n{\n\n\n    vec3 w = normalize(fx - ro);\n    vec3 u = normalize(cross(w, vec3(0.0, 1.0, 0.0)));\n    vec3 v = normalize(cross(u, w));\n    return mat3(u, v, w) * normalize(vec3(uv, fov));\n\n}\n\n\n\nvoid mainImage(out vec4 c_out, in vec2 u)\n{\n    \n    \n    vec2 rr = iResolution.xy, uv = (u + u -rr) / rr.y;\n    vec3 ro = vec3(cos(iTime) * 0.1, 0.0, -0.5 + sin(iTime) * 0.2);\n    vec3 fx = vec3(0.0, 0.0, 0.0);\n    \n    vec3 rd = dir(uv, ro, fx, 0.5 / length(uv));\n    float d0 = mrch(ro, rd);\n    \n    vec3 cl = vec3(0.0);\n    \n    if (d0 > 0.0)\n    {\n    \n    \n        vec3 sp = ro + rd * d0;\n        float df = light(sp, rd, vec3(cos(iTime) * 2.0, sin(iTime), sin(iTime) * 2.0));\n              cl += df * vec3(0.5,0.5, 0.0) * 0.1;\n              df += light(sp, rd, vec3(cos(iTime + 3.5) * 2.0, sin(iTime + 2.5), sin(iTime + 1.5) * 2.0));\n              cl += df * vec3(0.0, 0.7, 1.0) * 0.1;\n    \n    }\n    cl = pow(cl * 4.0, vec3(4.0));\n    c_out = vec4(cl, 1.0);\n    \n}","name":"Image","description":"","type":"image"}]}