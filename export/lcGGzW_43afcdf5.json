{"ver":"0.1","info":{"id":"lcGGzW","date":"1712464064","viewed":29,"name":" RGB Additive Color Wheel","username":"shaderjoes","description":"Circles, circles, circles. RGB additive color wheel on top. Click around!\n\nCircle and RGB functions by jonobr1 / http://jonobr1.com/ https://www.shadertoy.com/view/XsjGDt","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["colorwheel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n/**\n * Convert r, g, b to normalized vec3 @author jonobr1 / http://jonobr1.com/\n */\nvec3 rgb(float r, float g, float b) {\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n\n/**\n * Draw a circle at vec2 `pos` with radius `rad` and\n * color `color`. @author jonobr1 / http://jonobr1.com/\n */\nvec4 circle(vec2 uv, vec2 pos, float rad, vec3 color) {\n    float d = length(pos - uv) - rad;\n    float t = clamp(d, 0.0, 1.0);\n    return vec4(color, 1.0 - t);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy;\n    vec2 center = iResolution.xy * 0.5;\n    \n    float radiusSpeed = 25.0; // Speed of radius change\n    float radiusOffset = sin(iTime / 3.0) * 0.5 + 0.5; // 0.5 to 1.5 every 3 seconds\n\n    // Calculate radius based on time\n    float radius = radiusSpeed * radiusOffset;\n\n    // Background layer\n    vec4 layer1 = vec4(rgb(0.0, 0.0, 0.0), 1.0);\n\n    // Initialize layers\n    vec4 layer2 = vec4(0.0);\n    vec4 layer3 = vec4(0.0);\n    vec4 layer4 = vec4(0.0);\n    vec4 layer5 = vec4(0.0);\n    vec4 layer6 = vec4(0.0);\n    vec4 layer7 = vec4(0.0);\n    \n    vec3 blue = rgb(80.0, 80.0, 255.0);\n    vec3 red = rgb(255.0, 80.0, 80.0);\n    vec3 green = rgb(80.0, 255.0, 80.0);\n    \n    vec3 grey1 = rgb(224.0, 224.0, 224.0);\n    vec3 grey2 = rgb(128.0, 128.0, 128.0);\n    vec3 grey3 = rgb(192.0, 192.0, 192.0);\n    vec3 white = rgb(255.0, 255.0, 255.0);\n\n    // Draw multiple circles (grey1 color)\n    float spacing = 50.0;\n    for (float x = 0.; x < iResolution.x + spacing; x += spacing) {\n        for (float y = 0.; y < iResolution.y; y += spacing) {\n            vec2 pos = vec2(x, y);\n            vec4 circleLayer = circle(uv, pos, radius, grey1);\n            layer2 = max(layer2, circleLayer);\n        }\n    }\n\n    // Draw multiple circles (grey2 color)\n    spacing = 50.0;\n    for (float x = 0.; x < iResolution.x + spacing; x += spacing) {\n        for (float y = 0.; y < iResolution.y; y += spacing) {\n            vec2 pos = vec2(x - spacing/2., y-spacing/2.);\n            vec4 circleLayer = circle(uv, pos, radius, grey2);\n            layer3 = max(layer3, circleLayer);\n        }\n    }\n    \n    // Draw multiple circles (grey3 color)\n    spacing = 50.0;\n    for (float x = 0.; x < iResolution.x + spacing; x += spacing) {\n        for (float y = 0.; y < iResolution.y; y += spacing) {\n            vec2 pos = vec2(x - spacing/2., y);\n            vec4 circleLayer = circle(uv, pos, radius, grey3);\n            layer4 = max(layer4, circleLayer);\n        }\n    }\n    \n    // Draw circles around mouse click position\n    \n    vec4 mouseCircleLayer = circle(uv, vec2(iMouse.x-55., iMouse.y-25.), 100., blue);\n    vec4 mouseCircleLayer2 = circle(uv, vec2(iMouse.x-55., iMouse.y-25.), 100., vec3(0.,0.,0.));\n    \n    \n    vec4 mouseCircleLayer3 = circle(uv, vec2(iMouse.x+55., iMouse.y-25.), 100., green);\n    vec4 mouseCircleLayer4 = circle(uv, vec2(iMouse.x+55., iMouse.y-25.), 100., vec3(0.,0.,0.));\n    \n    \n    vec4 mouseCircleLayer5 = circle(uv, vec2(iMouse.x, iMouse.y+75.), 100., red);\n    vec4 mouseCircleLayer6 = circle(uv, vec2(iMouse.x, iMouse.y+75.), 100., vec3(0.,0.,0.));\n\n    // Blend the layers\n    layer5 += mouseCircleLayer;\n    layer5 += mouseCircleLayer2;\n    \n    layer6 += mouseCircleLayer3;\n    layer6 += mouseCircleLayer4;\n    \n    layer7 += mouseCircleLayer5;\n    layer7 += mouseCircleLayer6;\n\n    vec4 composite = mix(layer1, layer2, layer2.a);\n    composite = mix(composite, layer3, layer3.a);\n    composite = mix(composite, layer4, layer4.a);\n    composite = mix(composite, layer6, layer6.a);\n    composite = mix(composite, layer5, layer5.a);\n    composite = mix(composite, layer7, layer7.a);\n    \n    // Output the final color\n    fragColor = composite;\n}\n\n\n","name":"Image","description":"","type":"image"}]}