{"ver":"0.1","info":{"id":"7tVfRR","date":"1663947963","viewed":245,"name":"Acoustic Pipes 2 (Fast)","username":"pyBlob","description":"Stable pressure wave through pipes at max speed (c=1 for pipe without slope). This approximation is for subsonic flow velocity and small sound pressure levels.","likes":15,"published":3,"flags":32,"usePreview":0,"tags":["wave","simulation","acoustic"],"hasliked":0,"parentid":"sltfWS","parentname":"Acoustic Pipes"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nThings to try out (need recompile and reset):\n    - Input waveforms (cw-pulse, cw, pulse)\n    - Switch visualized field (v variable in mainImage)\n    - Wavelengths (f variable in _step)\n    - Pipe shapes (initialization in update)\n\nInteresting:\n    - Sign-flip of mass density for reflection in narrow pipe\n    - Sign-flip of flux density for reflection in wide pipe\n*/\n\nvoid mainImage(out vec4 C, vec2 O)\n{\n    ivec2 I = ivec2(O);\n    int y = int(O.y / iResolution.y * float(npipes));\n    float Oy = O.y - (float(y) + .5) * iResolution.y / float(npipes);\n    \n    vec4 h0 = texelFetch(iChannel0, ivec2(I.x + -1, y), 0);\n    vec4 h1 = texelFetch(iChannel0, ivec2(I.x + -0, y), 0);\n\n    C = vec4(0);\n    float mr =           h1.x     ;\n    float fr = mix(h0.x, h1.x, .5);\n    float vr = mr * iResolution.y/2./float(npipes)*.8 - abs(Oy);\n\n    float mA = mr*mr;\n    float fA = fr*fr;\n\n    float v = h1.y / mA; // mass density\n    //v = h1.z / c / fA; // flux density\n    if (vr > 0.)\n    {\n        C = mix(C, vec4(0, .1, 1, 1), clamp(-v, 0., 1.));\n        C = mix(C, vec4(1, .2, 0, 1), clamp(+v, 0., 1.));\n    }\n    \n    // pipe\n    C = mix(C, vec4(1), clamp((1. + .3 * abs(dFdx(vr))) - abs(vr), 0., 1.));\n    C = sqrt(C);\n    \n    // tip of the wave\n    float t = float(iFrame * nbuffers);\n    float w = iResolution.x;\n    float x = abs(mod(t * c + w, 2. * w) - w);\n    C = mix(C, vec4(1, 0, 0, 1), clamp(1. - abs(O.x - .5 - x), 0., 1.));\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"buffer(0)","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const int   npipes  = 5;\nconst int  nbuffers = 4;\nconst float c       = 1. / 2.; // speed of sound [px/step]\nconst float damping = 0e-5;\n\nconst float pi = radians(180.);\nconst float tau = pi * 2.;\n\nvec3 resolution;\nint frame;\n\nfloat constriction(float x, float w, float s);\nfloat narrowing(float x, float w, float s);\nfloat profile(int pipe, float x)\n{\n    //return x = .9 - .8 * step(0.4, x);\n    if (pipe == 4)\n        return constriction(x, .1, 10.);\n    if (pipe == 3)\n        return constriction(x, .1, 100.);\n    if (pipe == 1)\n        return narrowing(-x, -.4, 10.);\n    if (pipe == 0)\n        return narrowing(x, .4, 10.);\n    return 1.;\n}\n\nvec2 boundary(float t)\n{\n    float f, xt, z;\n    \n    //f = c / 10.;\n    //f = c / 50.;\n    f = c / (resolution.x * .2);\n    \n    z = sin(t*tau*f) * .3*c * float(t*f < 1.); // short cw-pulse\n    //z = sin(t*tau*f) * .3*c * float(t*f < 2.); // long cw-pulse\n    //z = sin(t*tau*f) * .1*c;                   // cw\n    //xt=t*tau*f-3., z = exp(-xt*xt)*1.*c;       // pulse\n\n    return vec2(z, 0);\n    //return vec2(0, z);\n}\n\nfloat dm(float lf, float rf)\n{\n    return lf - rf;\n}\n\nfloat df(float lr, float rr, float lm, float rm, float f)\n{\n    float cr = mix(lr, rr, .5);\n    \n    float lA = lr*lr;\n    float cA = cr*cr;\n    float rA = rr*rr;\n    float p = (lm/lA - rm/rA) * cA;\n\n    return p*c*c - f*damping;\n}\n\nvoid update(out vec4 C, vec2 O, sampler2D iChannel0)\n{\n    ivec2 I = ivec2(O);\n    \n    if (I.y >= npipes)\n    {\n        C = vec4(1,2,3,4);\n        return;\n    }\n\n    //if (frame == -1) // doesn't work with preview in firefox\n    if (texelFetch(iChannel0, ivec2(0, npipes), 0) != vec4(1,2,3,4))\n    {\n        C = vec4(0);\n        C.x = profile(I.y, O.x / resolution.x);\n        return;\n    }\n    \n    vec4 I0 = texelFetch(iChannel0, ivec2(I.x + -1, I.y), 0);\n    vec4 I1 = texelFetch(iChannel0, ivec2(I.x + -0, I.y), 0);\n    vec4 I2 = texelFetch(iChannel0, ivec2(I.x + +1, I.y), 0);\n\n    // Leap frog integration\n    // 1a. Update flux\n    I1.z += df(I0.x, I1.x, I0.y, I1.y, I1.z);\n    I2.z += df(I1.x, I2.x, I1.y, I2.y, I2.z);\n\n    // 1b. Override flux at boundary\n    vec2 b = boundary(float(frame));\n    if (I.x == 0)\n        I1.z = b.x;\n    if (I.x == int(resolution.x) - 1)\n        I2.z = b.y;\n\n    // 2. Update mass\n    I1.y += dm(I1.z, I2.z);\n\n    C = I1;\n}\n\nfloat constriction(float x, float w, float s)\n{\n    s /= resolution.x;\n    float a = .5-w;\n    float b = .5+w;\n    return mix(1., .1, smoothstep(a-s, a, x) - smoothstep(b, b+s, x));\n}\n\nfloat narrowing(float x, float w, float s)\n{\n    s /= resolution.x;\n    s /= 2.;\n    return mix(1., .4, smoothstep(w-s, w+s, x));\n}\n\n#define buffer(i) \\\nvoid mainImage(out vec4 C, vec2 O) \\\n{ \\\n    resolution = iResolution; \\\n    frame = iFrame * nbuffers + i; \\\n    update(C, O, iChannel0); \\\n} \\\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"buffer(1)","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"buffer(2)","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"buffer(3)","name":"Buffer D","description":"","type":"buffer"}]}