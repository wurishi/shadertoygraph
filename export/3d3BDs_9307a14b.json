{"ver":"0.1","info":{"id":"3d3BDs","date":"1606217775","viewed":104,"name":"Bedstead Font","username":"sdfgeoff","description":"Bedstead is one of my favourite fonts. It's the font used by the SAA50050 chip for the BBC Micro.\nHere's a pixel-shader renderer for it","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["text","bitmap","font","saa5050"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const ivec2 char_space = ivec2(0, 0);\nconst ivec2 char_exclam = ivec2(-2147352576, 135274560);\nconst ivec2 char_quotedbl = ivec2(0, 338186240);\nconst ivec2 char_numbersign = ivec2(-494600192, 338229411);\nconst ivec2 char_dollar = ivec2(-2058944512, 475277538);\nconst ivec2 char_percent = ivec2(1179385856, 105660480);\nconst ivec2 char_ampersand = ivec2(-1572143104, 68429858);\nconst ivec2 char_quoteright = ivec2(0, 135270400);\nconst ivec2 char_parenleft = ivec2(1090781184, 269488160);\nconst ivec2 char_parenright = ivec2(16842752, 68173953);\nconst ivec2 char_asterisk = ivec2(-985530368, 139751489);\nconst ivec2 char_plus = ivec2(-2130706432, 1057264);\nconst ivec2 char_comma = ivec2(16908800, 0);\nconst ivec2 char_hyphen = ivec2(0, 224);\nconst ivec2 char_period = ivec2(131072, 0);\nconst ivec2 char_slash = ivec2(1077936128, 4210752);\nconst ivec2 char_zero = ivec2(578945024, 136874258);\nconst ivec2 char_one = ivec2(-2130247680, 135798848);\nconst ivec2 char_two = ivec2(1078951936, 474251456);\nconst ivec2 char_three = ivec2(71761920, 1044398274);\nconst ivec2 char_four = ivec2(-503054336, 271601811);\nconst ivec2 char_five = ivec2(71761920, 1040480514);\nconst ivec2 char_six = ivec2(608632832, 403179762);\nconst ivec2 char_seven = ivec2(1082195968, 1044398144);\nconst ivec2 char_eight = ivec2(608632832, 474253538);\nconst ivec2 char_nine = ivec2(33751040, 474253794);\nconst ivec2 char_colon = ivec2(131072, 8192);\nconst ivec2 char_semicolon = ivec2(16908800, 8192);\nconst ivec2 char_less = ivec2(1090781184, 269488144);\nconst ivec2 char_equal = ivec2(-536870912, 63491);\nconst ivec2 char_greater = ivec2(16842752, 68174081);\nconst ivec2 char_question = ivec2(-2147352576, 474234944);\nconst ivec2 char_at = ivec2(-1605959680, 474278227);\nconst ivec2 char_A = ivec2(-465010688, 136874259);\nconst ivec2 char_B = ivec2(608665600, 507807986);\nconst ivec2 char_C = ivec2(608632832, 474220560);\nconst ivec2 char_D = ivec2(608665600, 507808018);\nconst ivec2 char_E = ivec2(542081024, 1040451824);\nconst ivec2 char_F = ivec2(541097984, 1040451824);\nconst ivec2 char_G = ivec2(609157120, 474220563);\nconst ivec2 char_H = ivec2(608731136, 574917106);\nconst ivec2 char_I = ivec2(-2130247680, 470818880);\nconst ivec2 char_J = ivec2(71761920, 541098242);\nconst ivec2 char_K = ivec2(-1572306944, 572794928);\nconst ivec2 char_L = ivec2(542081024, 33818640);\nconst ivec2 char_M = ivec2(608731136, 577546578);\nconst ivec2 char_N = ivec2(608731136, 574921043);\nconst ivec2 char_O = ivec2(608632832, 474253586);\nconst ivec2 char_P = ivec2(541097984, 507807984);\nconst ivec2 char_Q = ivec2(-1572143104, 474253586);\nconst ivec2 char_R = ivec2(-1572306944, 507807984);\nconst ivec2 char_S = ivec2(71761920, 474220770);\nconst ivec2 char_T = ivec2(-2130575360, 1041244224);\nconst ivec2 char_U = ivec2(608632832, 574916882);\nconst ivec2 char_V = ivec2(1090650112, 574916769);\nconst ivec2 char_W = ivec2(-1522204672, 574916946);\nconst ivec2 char_X = ivec2(1145602048, 574902337);\nconst ivec2 char_Y = ivec2(-2130575360, 574902336);\nconst ivec2 char_Z = ivec2(1078951936, 1044398144);\nconst ivec2 char_bracketleft = ivec2(1083113472, 1007161376);\nconst ivec2 char_backslash = ivec2(67108864, 266305);\nconst ivec2 char_bracketright = ivec2(34045952, 505430145);\nconst ivec2 char_asciicircum = ivec2(0, 136873984);\nconst ivec2 char_underscore = ivec2(1015808, 0);\nconst ivec2 char_quotereversed = ivec2(0, 135282688);\nconst ivec2 char_a = ivec2(-1001455616, 28931);\nconst ivec2 char_b = ivec2(608665600, 33847570);\nconst ivec2 char_c = ivec2(542048256, 61456);\nconst ivec2 char_d = ivec2(609157120, 541126930);\nconst ivec2 char_e = ivec2(-532217856, 28947);\nconst ivec2 char_f = ivec2(-2130575360, 269492448);\nconst ivec2 char_g = ivec2(609161244, 61714);\nconst ivec2 char_h = ivec2(608731136, 33847570);\nconst ivec2 char_i = ivec2(-2130247680, 134230080);\nconst ivec2 char_j = ivec2(-2130574332, 134225984);\nconst ivec2 char_k = ivec2(-1031208960, 67670176);\nconst ivec2 char_l = ivec2(-2130247680, 202383424);\nconst ivec2 char_m = ivec2(-1521844224, 22866);\nconst ivec2 char_n = ivec2(608731136, 30994);\nconst ivec2 char_o = ivec2(608632832, 28946);\nconst ivec2 char_p = ivec2(608665858, 30994);\nconst ivec2 char_q = ivec2(609161248, 61714);\nconst ivec2 char_r = ivec2(1082195968, 53344);\nconst ivec2 char_s = ivec2(-1006141440, 61457);\nconst ivec2 char_t = ivec2(-2130444288, 135295040);\nconst ivec2 char_u = ivec2(609157120, 35090);\nconst ivec2 char_v = ivec2(1115815936, 35089);\nconst ivec2 char_w = ivec2(-1522204672, 35090);\nconst ivec2 char_x = ivec2(-2104983552, 34976);\nconst ivec2 char_y = ivec2(609161244, 35090);\nconst ivec2 char_z = ivec2(-2138079232, 63616);\nconst ivec2 char_braceleft = ivec2(-2129920000, 806363168);\nconst ivec2 char_brokenbar = ivec2(-2130575360, 135274496);\nconst ivec2 char_braceright = ivec2(-2130608128, 101720192);\nconst ivec2 char_asciitilde = ivec2(0, 72630272);\nconst ivec2 char_filledbox = ivec2(-405831680, 1048377843);\nconst ivec2 char_sterling = ivec2(1083146240, 407375984);\nconst ivec2 char_quotesingle = ivec2(0, 135274496);\nconst ivec2 char_arrowleft = ivec2(1090519040, 1053168);\nconst ivec2 char_onehalf = ivec2(-1543240648, 33818641);\nconst ivec2 char_arrowright = ivec2(16777216, 1065457);\nconst ivec2 char_arrowup = ivec2(-2130706432, 1077584);\nconst ivec2 char_emdash = ivec2(0, 496);\nconst ivec2 char_onequarter = ivec2(1175067680, 67637282);\nconst ivec2 char_dblverticalbar = ivec2(1116012544, 338186401);\nconst ivec2 char_threequarters = ivec2(1711938592, 101718082);\nconst ivec2 char_divide = ivec2(16777216, 1049072);\nconst ivec2 char_comma_saa5051 = ivec2(8454400, 0);\nconst ivec2 char_period_saa5051 = ivec2(25362432, 0);\nconst ivec2 char_colon_saa5051 = ivec2(65536, 32);\nconst ivec2 char_semicolon_saa5051 = ivec2(8454400, 4096);\nconst ivec2 char_section = ivec2(596119836, 474220770);\nconst ivec2 char_Adieresis = ivec2(-465010688, 335573267);\nconst ivec2 char_Odieresis = ivec2(608632832, 335573266);\nconst ivec2 char_Udieresis = ivec2(608632832, 335579410);\nconst ivec2 char_degree = ivec2(0, 407396352);\nconst ivec2 char_adieresis = ivec2(-1001455616, 335573251);\nconst ivec2 char_odieresis = ivec2(608632832, 2621666);\nconst ivec2 char_udieresis = ivec2(609157120, 2621714);\nconst ivec2 char_germandbls = ivec2(608600322, 203704530);\nconst ivec2 char_currency = ivec2(1133019136, 35041);\nconst ivec2 char_Eacute = ivec2(-531660800, 269547537);\nconst ivec2 char_D_saa5052 = ivec2(1149698048, 474517794);\nconst ivec2 char_L_saa5052 = ivec2(1083113472, 67637280);\nconst ivec2 char_Aring = ivec2(-465010688, 134246675);\nconst ivec2 char_eacute = ivec2(-532217856, 269512979);\nconst ivec2 char_aring = ivec2(-1001455616, 134246659);\nconst ivec2 char_ccedilla = ivec2(542050312, 61456);\nconst ivec2 char_ugrave = ivec2(609157120, 68192530);\nconst ivec2 char_agrave = ivec2(-1001455616, 68186371);\nconst ivec2 char_ograve = ivec2(608632832, 68157666);\nconst ivec2 char_egrave = ivec2(-532217856, 68186387);\nconst ivec2 char_igrave = ivec2(-2130247680, 68157536);\nconst ivec2 char_idieresis = ivec2(-2130247680, 335556672);\nconst ivec2 char_edieresis = ivec2(-532217856, 335573267);\nconst ivec2 char_ecircumflex = ivec2(-532217856, 136868115);\nconst ivec2 char_ugrave_saa5054 = ivec2(609157120, 136349970);\nconst ivec2 char_icircumflex = ivec2(-2130247680, 136839264);\nconst ivec2 char_acircumflex = ivec2(-1001455616, 136868099);\nconst ivec2 char_ocircumflex_saa5054 = ivec2(608632832, 136868114);\nconst ivec2 char_ucircumflex = ivec2(609157120, 136839442);\nconst ivec2 char_ccedilla_saa5054 = ivec2(542050328, 61456);\n\n\n\n\n\nivec2 text_string[64] = ivec2[](\n\tchar_b,\n    char_e,\n    char_d,\n    char_s,\n    char_t,\n    char_e,\n    char_a,\n    char_d,\n    char_space,\n    char_f,\n    char_o,\n    char_n,\n    char_t,\n    char_space,\n    char_space,\n    char_space,\n    char_space,\n    char_space,\n    char_space,\n    char_space,\n    char_space,\n    char_space,\n    char_space,\n    char_space,\n    char_space,\n    char_space,\n    char_a,\n    char_n,\n    char_d,\n    char_space,\n    char_s,\n    char_y,\n    char_m,\n    char_b,\n    char_o,\n    char_l,\n    char_s,\n    char_space,\n    char_space,\n    char_arrowright,\n    char_onehalf,\n    char_ugrave,\n    char_dblverticalbar,\n    char_semicolon_saa5051,\n    char_Adieresis,\n    char_degree,\n    char_aring,\n    char_space,\n    char_space,\n    char_space,\n    char_space,\n    char_space,\n    char_space,\n    char_space,\n    char_space,\n    char_space,\n    char_space,\n    char_space,\n    char_space,\n    char_space,\n    char_space,\n    char_space,\n    char_space,\n    char_space\n);\n\nivec2 text_box_chars = ivec2(13, 4);\n\n\nfloat draw_char(vec2 coord, ivec2 char) {\n    int pos_id = int(coord.x * 7.0) + int(coord.y * 9.0) * 7;\n    int num = pos_id < 32 ? char.x : char.y;\n    \n    int val = (1 << pos_id) & num;\n    float col = val == 0 ? 0.0 : 1.0;\n    \n    return col;\n}\n\nfloat draw_text(vec2 coord, ivec2[64] text_string, ivec2 text_box) {\n    \n    int i = 0;\n    float out_col = 0.0;\n    \n    coord.x *= float(text_box.x);\n    coord.y *= float(text_box.y);\n    int char = int(coord.x) + (text_box.y - int(coord.y) - 1) * text_box.x;\n    coord.x -= float(int(coord.x));\n    coord.y -= float(int(coord.y));\n\treturn draw_char(coord, text_string[char]);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    //vec3 col = vec3(draw_char(uv, char_A));\n    vec3 col = vec3(draw_text(uv, text_string, text_box_chars));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}