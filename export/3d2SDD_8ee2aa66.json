{"ver":"0.1","info":{"id":"3d2SDD","date":"1553913518","viewed":102,"name":"warpy sines","username":"max_hm","description":"a test of signs and sines","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["sines"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nmat2 scale(vec2 _scale){\n    return mat2(_scale.x,0.0,\n                0.0,_scale.y);\n}\n\nfloat circle(in vec2 _uv, in float _radius){\n    vec2 dist = _uv-vec2(0.5);\n\treturn 1.-smoothstep(_radius-(_radius*0.01),\n                         _radius+(_radius*0.01),\n                         dot(dist,dist)*4.0);\n}\n\n\nfloat sinTime(float _phase) {\n \treturn 0.5 + sin(_phase+iTime)/2.;    \n}\n\nvec3 rgbToUnit(vec3 _c) \n{\n \treturn _c/vec3(255);\n    \n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //float sinTime = 0.5 + sin(iTime)/2.;\n    float r,g,b, width01 = 0.015;\n    \n    vec3 shade1 = rgbToUnit(vec3(219.,61.,61.));\n    vec3 shade2 = rgbToUnit(vec3(222.,140.,94.));\n    vec3 shade3 = rgbToUnit(vec3(127.,143.,133.));\n    \n    //g=  pow( min( cos(PI * x /2.), 1.0-abs(x)), 0.5);\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv.y*=1.;\n    uv.y=fract(uv.y);\n    uv.x = uv.x-(uv.y*0.004);\n    vec2 dcenter = vec2(distance(uv, vec2(0.5)));\n    \n    uv-=vec2(0.5);\n    uv*=scale(vec2(1.8,2.0));\n    uv+=vec2(0.5);\n    \n    \n    \n    //warping everything\n    \n\t\n    uv.y +=0.5;\n    uv.y *= 1.2-0.2*sin(2.*PI*uv.x+iTime*1.8);\n    uv.y *= smoothstep(0.0, 1.0, 1.0-0.10*cos(6.*PI*uv.x+iTime*3.2) );\n    uv.y *= smoothstep(0.0, 1.0, 1.0-0.08*cos(6.*PI*uv.x+iTime*6.4) );\n    uv.y-=0.47;\n    \n    vec2 uv1 = uv;\n    \n   \n    \n    \n    float space = 0.0;\n\n    \n    //sine wave\n    \n    uv1+=vec2(-0.5);\n    uv1 = uv1*vec2(3., 3.);\n    uv1.x*=6.*PI;\n    uv1.x+= 7.8*iTime;\n    uv1.y+(1.0-sin(uv1.x))/2. < 0.5 ? space = 1.0 : space;\n    (0.05+uv1.y)+(1.0-sin(uv1.x))/2. < 0.5 ? space = 0.0 : space;\n    space*= smoothstep(1.5, 0.0, dcenter.x*4.);\n    vec3 col = shade3 * vec3(space);\n    space = 0.0;\n     \n    //outer ring\n    uv1 = uv;\n    float space2 = 0.0;\n    //distance(uv1,vec2(0.5)) < 0.5  || distance(uv1, vec2(0.5)) > 0.5+width01 ? space : space = 1.0;\n    space+= circle(uv1, 1.3) - circle(uv1, 1.25);\n    \n    //add curent space to col and reset space\n    col += shade3 * vec3(space);\n    space = 1.0;\n    \n    //inner fade\n    dcenter = vec2(distance(uv, vec2(0.5)));\n    space = smoothstep(1.0, 0.0, dcenter.x*1.9);\n    space2=circle(uv, 0.2);\n    space = space * space2 + space;\n    //space*= smoothstep(0.0, 1.0, dot(dcenter,dcenter));\n    \n    \n    \n \tspace == 0.0 ? col : col += vec3(space)*shade1;\n    \n    // Output to screen\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}