{"ver":"0.1","info":{"id":"NtXGD7","date":"1622172098","viewed":248,"name":"bluenoiseDisk ","username":"Carandiru","description":"convergence of bluenoise using Hammersley.\nvery interesting how the blue noise pixels all move to the final destination for that pixel. self-assimilating....\n\n3d bluenoise ?","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["bluenoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// - carandiru\n// http://bit.ly/supersinfulsilicon\n\n// shader is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.\n// Based on a work at https://www.shadertoy.com/view/NtXGD7\n// Permissions beyond the scope of this license may be available at http://bit.ly/supersinfulsilicon\n\n\n// adjust the pixel scale to zoom in\n// adjust the convergence speed to see how the \"samples\" distribute in a blue noise pattern over time.\n\n#define PIXEL_SCALE 0.3333333  // does effect speed\n#define CONVERGENCE_SPEED 0.666666  // ** smaller number is faster\n\nvec3 Hammersley(in vec2 i, in vec2 N, in float inv_density)  // i = iDx, N = # of sample/total iteration (used inside of loop to generate points)\n{\n  return vec3(\n    i / N,\n    textureLod(iChannel0, (i) / (1024.0), 0.0f).r * inv_density\n  );\n}\nvec3 HammersleyDisk(in vec2 i, in vec2 N, in float inv_density) {\n    vec3 h = 2.0f * Hammersley(i, N, inv_density) - 1.0f;\n    h = h * sqrt( 1.0f - 0.5f * h*h ).zyx;\n    return (h / length(N));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 coord = uv * PIXEL_SCALE * iResolution.xy;\n    \n    coord += vec2(cos(iTime), sin(iTime)); // wobble visually\n    \n    vec3 hd = HammersleyDisk(coord, PIXEL_SCALE * iResolution.xy, CONVERGENCE_SPEED / (1.0f + iTime*iTime));\n    \n    if (uv.x > 0.5f) {\n        hd = HammersleyDisk(coord, PIXEL_SCALE * iResolution.xy, 0.001f);\n    }\n    \n    float opacity = 0.0f;\n    \n    opacity = 1.0f - length((hd.xy)/hd.z);//length(hd);//sqrt(hd.y + hd.x);\n    // Output to screen\n    fragColor = vec4(vec3(opacity),1.0);\n}","name":"Image","description":"","type":"image"}]}