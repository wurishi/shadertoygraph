{"ver":"0.1","info":{"id":"4llXDN","date":"1436925672","viewed":207,"name":"Nearest Point","username":"anastadunbar","description":"Idea came from when working on my game project.<br/>if (min(dist_a,dist_b,dist_c,dist_d) = dist_a) {nearest = point_a} ... and so on","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["2d","boolean"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Da pie is useless for this one, it's still fun to write it down by remembering the numbers.\n#define PI 3.14159265358979323846264\n\nfloat midsin(float val) {\n\treturn (sin(val)/2.)+0.5;\t\n}\nfloat midcos(float val) {\n\treturn (cos(val)/2.)+0.5;\t\n}\nvec3 rgb(int val1, int val2, int val3) {\n    return vec3(float(val1),float(val2),float(val3))/255.;\n}\n#define min4(a,b,c,d) min(min(min(a,b),c),d)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime;\n\tvec2 position = fragCoord.xy / iResolution.xy;\n    vec2 uv = vec2(((position.x-0.5)*(iResolution.x/iResolution.y))+0.5,position.y);\n    \n    vec2 point_a = vec2(midsin(time),0.4);\n    vec3 color_a = rgb(255,128,0);\n        \n    vec2 point_b = vec2(midcos(time/3.),midsin(time/3.));\n    vec3 color_b = rgb(100,255,0);\n        \n    vec2 point_c = vec2(midsin(time/2.53),0.8);\n    vec3 color_c = rgb(0,120,255);\n\n    vec2 point_d = vec2(midsin(time/1.4)/2.,midcos(time/1.4)/2.);\n    vec3 color_d = rgb(200,0,255);\n    \n    vec3 output_colors = vec3(0.);\n    \n    if (min4(length(uv-point_a),length(uv-point_b),length(uv-point_c),length(uv-point_d)) == length(uv-point_a)) {\n        output_colors = color_a;\n    }\n    if (min4(length(uv-point_a),length(uv-point_b),length(uv-point_c),length(uv-point_d)) == length(uv-point_b)) {\n        output_colors = color_b;\n    }\n    if (min4(length(uv-point_a),length(uv-point_b),length(uv-point_c),length(uv-point_d)) == length(uv-point_c)) {\n        output_colors = color_c;\n    }\n    if (min4(length(uv-point_a),length(uv-point_b),length(uv-point_c),length(uv-point_d)) == length(uv-point_d)) {\n        output_colors = color_d;\n    }\n    \n    float circle_size = 100.;\n    float circle_1 = 1.-clamp(floor(length(uv-point_a)*circle_size),0.,1.);\n    float circle_2 = 1.-clamp(floor(length(uv-point_b)*circle_size),0.,1.);\n    float circle_3 = 1.-clamp(floor(length(uv-point_c)*circle_size),0.,1.);\n    float circle_4 = 1.-clamp(floor(length(uv-point_d)*circle_size),0.,1.);\n    float all_circles = circle_1+circle_2+circle_3+circle_4;\n    \n\tfragColor = vec4(output_colors-all_circles,1.0);\n}","name":"Image","description":"","type":"image"}]}