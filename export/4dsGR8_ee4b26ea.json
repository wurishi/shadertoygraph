{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv.y=1.0-uv.y;\n\t\n\tfloat x=1.;\n\tfloat y=1.;\n\t\n\tfloat M =abs(texture(iChannel0, uv + vec2(0., 0.)/ iResolution.xy).r); \n\tfloat L =abs(texture(iChannel0, uv + vec2(x, 0.)/ iResolution.xy).r);\n\tfloat R =abs(texture(iChannel0, uv + vec2(-x, 0.)/ iResolution.xy).r);\t\n\tfloat U =abs(texture(iChannel0, uv + vec2(0., y)/ iResolution.xy).r);\n\tfloat D =abs(texture(iChannel0, uv + vec2(0., -y)/ iResolution.xy).r);\n\tfloat X = ((R-M)+(M-L))*.5;\n\tfloat Y = ((D-M)+(M-U))*.5;\n\t\n\tfloat strength =.01;\n\tvec4 N = vec4(normalize(vec3(X, Y, strength)), 1.0);\n//\tvec4 N = vec4(normalize(vec3(X, Y, .01))-.5, 1.0);\n\n\tvec4 col = vec4(N.xyz * 0.5 + 0.5,1.);\n\n\n\tfragColor = col;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4dsGR8","date":"1362461095","viewed":1745,"name":"Normal Map Filter","username":"gtoledo3","description":"This is a routine I occasionally use as a starting point for deriving some normals for repeating textures, originally written after finding no tool on OS X like the nVidia normal generator app. Originally setup for Core Image/QuartzComposer.","likes":27,"published":1,"flags":0,"usePreview":0,"tags":["texture","normals","filter"],"hasliked":0,"parentid":"","parentname":""}}