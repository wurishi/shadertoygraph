{"ver":"0.1","info":{"id":"Nttfz4","date":"1662738689","viewed":99,"name":"Simple Mandelbrot with zoom","username":"ppelikan","description":"Simple implementation of the Mandelbrot fractal.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal","simple","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int max_iter = 300;                // max number of iterations\nconst float limit = 5.0;                 // crossing this number is interpreted as diverging to infinity\nconst vec3 cc = vec3(0.275, 0.5, 0.725); // color peak center\nconst vec3 cw = vec3(0.32, 0.45, 0.32);  // color peak width\nconst vec2 loc = vec2(-0.77568377, 0.13646737);    // zoom location\n//const vec2 loc = vec2(-0.10109636, 0.956286510); // alternative location\n//const vec2 loc = vec2(-0.761574,-0.0847596);     // alternative location\n//const vec2 loc = vec2(-1.03996,0.3485);          // alternative location\n//const vec2 loc = vec2(-0.774680, -0.137416);     // alternative location\n//const vec2 loc = vec2(-0.7499, 0.025);           // alternative location\n//const vec2 loc = vec2(-1.4015, 0.0);             // alternative location\n\nfloat getIterCount(vec2 c)\n{\n    vec2 z = c;\n    for(int i=0; i < max_iter; i++){\n        float dist = z.x * z.x + z.y * z.y;\n        if (dist > limit)\n            return float(i) + limit/dist; // we add (lim/dist) to \"roughly\" smooth out the edges between discrete i values\n        z = vec2(z.x * z.x - z.y * z.y + c.x, 2.0 * z.x * z.y + c.y); \n        }\n    return float(max_iter);\n}\n\nvec3 getColor(float v)\n{\n    vec3 vvv = vec3(v, v, v);\n    return smoothstep(cc-cw, cc, vvv)-smoothstep(cc, cc+cw, vvv);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{   \n    vec2 z = fragCoord / iResolution.y;\n    z = z - vec2(1.0, 0.5);                        // pan to center\n    z = z * 0.007 * pow(200.0, cos(iTime / 5.0));  // zoom (zooming forever is impossible due to poor float precision)\n    z = z + loc;                                   // focus on some interesting location\n    \n    float cnt = getIterCount(z)/ float(max_iter);\n    fragColor = vec4(getColor(cnt), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}