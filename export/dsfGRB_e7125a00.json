{"ver":"0.1","info":{"id":"dsfGRB","date":"1666370237","viewed":112,"name":"RayMarching IFS fractal 3","username":"legoushque","description":"one more IFS fractal :)\n\ni'm trying to color it using orbit traps but I'm not sure I'm doing it right :)","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","fractal"],"hasliked":0,"parentid":"ddXGRS","parentname":"RayMarching IFS fractal 2"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define TAU 6.283185\n#define PI 3.141592\n#define S smoothstep\n#define T iTime*TAU*0.1\n\n\nvec4 make_quat(vec3 axis, float angle){\n    float theta = angle*0.5;\n    return vec4(sin(theta)*normalize(axis), cos(theta));\n\n}\n\nvec3 qtransform( vec4 q, vec3 v ){ \n\treturn v + 2.0*cross(cross(v, q.xyz ) + q.w*v, q.xyz);\n\t} \n    \n    \nvec3 qtransform(vec3 axis, float angle, vec3 v){\n    return qtransform(make_quat(axis, angle), v);\n}\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\n\nfloat fractal(vec3 p, float scale, inout vec3 orbit){\n   float r=dot(p, p);\n   int i;\n   float x1, y1, z1;\n   float s = scale;\n   orbit.b = length(p);\n   orbit.g = 0.;\n   for(i=0;i<10 && r < MAX_DIST;i++){\n      //Folding... These are some of the symmetry planes of the tetrahedron\n      //p = qtransform(vec3(2, 0, 1), T*0.5, p);\n       \n      p = abs(p);\n      s *= scale;\n      orbit.b = min(length(p), orbit.b);\n      orbit.g = max(length(p)/s, orbit.g);\n      if(p.x-p.y<0.){p.xy = p.yx; }\n      if(p.x-p.z<0.){p.xz = p.zx; }\n      if(p.y-p.z<0.){p.yz = p.zy; }\n\n      \n      //Stretche about the point [1,1,1]*(scale-1)/scale; The \"(scale-1)/scale\" is here in order to keep the size of the fractal constant wrt scale\n      //equivalent to: x=scale*(x-cx); where cx=(scale-1)/scale;\n      vec3 shift = normalize(vec3(-0.5, 10., -0.5));\n      //p = qtransform(vec3(1, 0, 1), T, p);\n      vec3 stretch = normalize(vec3(30.+10.*sin(T), 40., 30.+10.*cos(T)))*0.5;\n      \n      p = scale*p - stretch*(scale-shift);\n      p = qtransform(vec3(cos(T-10.201), 10., sin(T+50.101)), -T, p);\n      //p = qtransform(vec3(3, -1, 2), -0.1*PI, p);\n     \n      orbit.b *= 1.;\n      r=dot(p, p);\n   }\n   return (sqrt(r)-2.)*pow(scale, -float(i));//the estimated distance\n}\n\nfloat GetDist(vec3 p, inout vec3 orbit) {\n    \n    vec3 v = vec3(1, 1., 1);\n    \n    \n    float scale = 2.;\n    \n    float d = fractal(p, scale, orbit);\n    \n    return d;\n}\n\nfloat GetDist(vec3 p){\n    vec3 fake;\n    return GetDist(p, fake);\n\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, inout int i, inout float mindist, inout vec3 orbit) {\n\tfloat dO=0.;\n    mindist = length(ro);\n    //orbit += mindist;\n    for(i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p, orbit);\n        \n        if(dS < mindist) mindist = dS;\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    orbit = sin(orbit*TAU+T)*0.5+0.5;\n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(.001, 0);\n    vec3 n = GetDist(p) - \n        vec3(GetDist(p-e.xyy), GetDist(p-e.yxy),GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\nvec3 quad_bezier(vec3 a, vec3 b, vec3 c, vec3 t){\n    return mix(mix(a, b, t), mix(a, b, t), t);\n\n}\n\nvec3 BG(vec3 rd){\n    vec3 a = vec3(0.1, 0.3, 0.7);\n    vec3 b = vec3(0.1, 0.6, 0.3);\n    return mix(a, b, dot(rd, vec3(0, cos(T), sin(T))) * 0.5 + 0.5);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = (iMouse.xy)/iResolution.xy;\n    //m *= 0.;\n\n    vec3 ro = vec3(3.*cos(T), 3.*sin(T), 3.*sin(T));\n    //ro.yz *= Rot(-m.y*PI);\n    //ro.xz *= Rot(-m.x*TAU);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 2. - 0.5*cos(T+PI));\n    vec3 col = vec3(0);\n    int i = 0;\n    float mindist;\n    vec3 orbit_trap = vec3(0.);;\n    float d = RayMarch(ro, rd, i, mindist, orbit_trap);\n    float iter = float(i)/float(MAX_STEPS);\n    vec3 a = vec3(0.5, 0.1, 0.5);\n    vec3 b = vec3(0.1, 0.1, 0.1);\n    vec3 c = vec3(0.1, 0.7, 0.1);\n    mat3 palette = transpose(mat3(a, b, c));\n    col += BG(rd);\n    col *= S(SURF_DIST*1., SURF_DIST*30., mindist);\n    orbit_trap = smoothstep(0.1, 0.9, orbit_trap);\n    //orbit_trap.g = 1. - mod(iter, 1.);\n    \n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n\n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        col = vec3(1)*pow(1.-iter, 5.)*(palette*orbit_trap);\n    }\n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}