{"ver":"0.1","info":{"id":"wsBBzD","date":"1589600361","viewed":209,"name":"Swarming primitives","username":"gaz","description":"3d","likes":8,"published":1,"flags":32,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 getData (int id)\n{\n  int row = int(iResolution.y);\n  return texelFetch(iChannel0,ivec2(id%row,id/row),0);\n}\n\nmat4 getMatrix(int id)\n{\n  id = id*4;\n  return mat4(\n    getData(id+0),\n    getData(id+1),\n    getData(id+2),\n    getData(id+3)\n  );\n}\n\nfloat sdRoundBox( vec3 p, vec3 b, float r ) {\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\nfloat sdTorus( vec3 p, vec2 t ) {\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat map(vec3 p, int id)\n{\n  mat4 m= getMatrix(id);\n  p=(m*vec4(p,1)).xyz;\n  return (id%2==0)?sdRoundBox(p,vec3(0.3),0.1):sdTorus(p,vec2(0.5,0.2));\n}\n\nvec3 calcNormal(vec3 p, int id)\n{\n  vec3 n = vec3(0.0);\n  for(int i = 0; i < 4; i++){\n    vec3 e = 0.001*(vec3(9>>i&1, i>>1&1, i&1)*2.0-1.0);\n    n += e * map(p + e, id);\n  }\n  return normalize(n);\n}\n\nvec3 doColor(int id){\n  return mix(vec3(1), cos((vec3(3,37,25)+float(id+1000)*9.))*0.5+0.5, 0.7);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n  vec3 pos =vec3(0);\n  vec3 nor =vec3(0);\n  vec3 col =vec3(0.05,0.15,0.3)*length(uv*3.0);\n  vec3 rd = normalize(vec3(uv,2));\n  vec3 ro = vec3(0,0,-8);\n  float depth = MAXD;\n  for(int j = 0;j < NUM; j++){\n    float t = 0.0, d;\n\t  for(int i = 0; i < 64; i++){\n  \t  t += d = map(ro + rd * t, j);\n  \t  if(d < 0.001 || t > MAXD) break;\n    }\n    if(d < 0.001 && t < depth){\n      \tdepth = t;\n\t    pos = ro + rd * t;\n\t    nor = calcNormal(pos, j);\n      col = doColor(j);\n    }\n  }\n  float z= length(pos-ro);\n  vec3 li = normalize(vec3(1));\n  float dif = clamp(dot(nor, li), 0.3, 1.0);\n  float amb = max(0.5 + 0.5 * nor.y, 0.0);\n  float spc = pow(clamp(dot(reflect(normalize(pos - ro), nor), li), 0.0, 1.0), 50.0);\n  col *= dif * amb ;\n  float rimd = pow(clamp(1.0 - dot(reflect(-li, nor), -rd), 0.0, 1.0), 2.5);\n\tfloat frn = rimd + 2.2 * (1.0 - rimd);\n  col *= frn*0.8;\n  col += spc;\n  col *= exp(-z*z*0.0008);\n  col = clamp(col,0.0,1.0);\n  col = pow(col,vec3(0.8)); \n  fragColor = vec4(col,1);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI acos(-1.0)\n\nmat4 move(vec3 p) {\n  return mat4(1,0,0,0,0,1,0,0,0,0,1,0,p,1);\n}\n\nmat4 rotX(float a) {\n  float s=sin(a),c=cos(a);\n  return mat4(1,0,0,0,0,c,s,0,0,-s,c,0,0,0,0,1);\n}\nmat4 rotY(float a) {\n  float s=sin(a),c=cos(a);\n  return mat4(c,0,s,0,0,1,0,0,-s,0,c,0,0,0,0,1);\n}\n\nmat4 rotZ(float a) {\n  float s=sin(a),c=cos(a);\n  return mat4(c,s,0,0,-s,c,0,0,0,0,1,0,0,0,0,1);\n}\n\nmat4 rot(vec3 axis, float t) {\n    vec3 a = normalize(axis);\n    float s=sin(t),c=cos(t),r=1.0-c;\n    return mat4(\n      a.x*a.x*r+c,a.y*a.x*r+a.z*s,a.z*a.x*r-a.y*s,0,\n      a.x*a.y*r-a.z*s,a.y*a.y*r+c,a.z*a.y*r+a.x*s,0,\n      a.x*a.z*r+a.y*s,a.y*a.z*r-a.x*s,a.z*a.z*r+c,0,\n      0,0,0,1);\n}\n\nfloat hash(float n)\n{\n  return fract(sin(n)*7777.0);\n}\n\nvec3 randVec(float n)\n{\n\tvec3 p=vec3(1,0,0);\n  p=(rotZ(asin(hash(n+=215.3)*2.0-1.0))*vec4(p,1)).xyz;\n  p=(rotY((hash(n)*2.0-1.0)*PI)*vec4(p,1)).xyz;\n\treturn p;\n}\n\nvec3 randCurve(float t,float n)\n{\n  vec3 p = vec3(0);\n  for (int i=0; i<6; i++)\n  {\n    p += randVec(n+=165.0)*sin((t*=0.8)+sin(t*1.6*hash(n))*0.5);\n  }\n  return p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor-=fragColor;\n    int id = int(fragCoord.x) + int(iResolution.y) * int(fragCoord.y);\n    if(id<NUM*4){\n      float mid = float(id/4);\n      mat4 m=mat4(1);\n      m*=rot(randVec(mid*53.44+563.21),time*1.5+hash(mid*896.23+45678.2)*10.0);\n      m*=move(randCurve(time*1.5,mid*89.23+123.7)*2.0);\n      m*=move((vec3(\n        hash(mid*2.236+455.0),\n        hash(mid*5.236+42255.0),\n        hash(mid*55.236+42255.0)\n        )*2.0-1.0)*(1.0/hash(mid*77.23+852.2))*1.5);\n      m*=rotZ(time*0.2);\n      m*=rotX(time*0.3);\n      fragColor = m[id%4];\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define NUM 100\n#define MAXD 80.0\n#define time iTime\n","name":"Common","description":"","type":"common"}]}