{"ver":"0.1","info":{"id":"lfjBWd","date":"1725670987","viewed":19,"name":"Box - by Nathaniel Cavallaro","username":"nCavallaro","description":"The mouse is used to control the light source.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["box"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.yy;\n    \n    uv.x = uv.x - 0.5*(iResolution.x/iResolution.y);\n    uv.y = uv.y - 0.5;\n    \n    vec2 Mouseuv = iMouse.xy/iResolution.yy;\n\n    vec3 col = vec3(0.0, 0.15, 0.0);\n\n    float t = 0.0;\n    float tdx = 0.0;\n    float tdy = 0.0;\n    \n    float d = 0.0001f;\n\n    vec3 boxPos = vec3(10.0, -10.0,40.0);\n    vec3 boxDim = vec3(0.25, 0.25, 0.25);\n    \n    vec3 pt = vec3(uv.x, uv.y, 0.0);\n    vec3 ptdx = vec3(uv.x+d, uv.y, 0.0);\n    vec3 ptdy = vec3(uv.x, uv.y+d, 0.0);\n    //vec3 pt = vec3(0.0, 0.0, 0.0);\n    //vec3 ptdx = vec3(d, 0.0, 0.0);\n    //vec3 ptdy = vec3(0.0, d, 0.0);\n    vec3 dir = normalize(vec3(0.25, -0.25, 1.0));\n    \n    vec3 lightPos = vec3(Mouseuv, 0.0);\n    \n    //float normal = vec3(pt.x, pt.y, 0.0);\n    //float d = sqrt((pt.x - uv.x) * (pt.x - uv.x) + (pt.y - uv.y) * (pt.y - uv.y));\n\n    for( int i = 0; i < 50; i++){\n\n        vec3 pos = pt + dir * t;\n        vec3 posdx = ptdx + dir * tdx;\n        vec3 posdy = ptdy + dir * tdy;\n            \n\n        float dist = sdBox(pos - boxPos, boxDim);\n        float distdx = sdBox(posdx - boxPos, boxDim);\n        float distdy = sdBox(posdy - boxPos, boxDim);\n              \n        if(dist < 0.00001 && distdx < 0.00001 && distdy < 0.00001){ \n            \n            vec3 normal = normalize(cross(\n                    normalize(pos - posdx), \n                    normalize(posdy - pos)));\n            //col = normalize(vec3(t));\n            col = vec3(0.85) * dot(normal, normalize(lightPos - pos));\n            break; \n            \n        }\n        t += dist;\n        tdx += distdx;\n        tdy += distdy;\n    }\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}