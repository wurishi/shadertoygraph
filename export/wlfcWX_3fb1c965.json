{"ver":"0.1","info":{"id":"wlfcWX","date":"1593222541","viewed":108,"name":"Experiment #FGD135","username":"jovg","description":"Inspired by this Reddit post\n\nhttps://www.reddit.com/r/woahdude/comments/hg4mvo/this_color_colliding_flip_book/","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["game","uv","fun","effects","rotation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rotationSpeed = 1.0f;\n\nvec2 rotate(vec2 v, float t) \n{\n    float sinX = sin ( rotationSpeed * t );\n    float cosX = cos ( rotationSpeed * t );\n    float sinY = sin ( rotationSpeed * t );\n    mat2 rotationMatrix = mat2( cosX, -sinX, sinY, cosX);\n    return v.xy * rotationMatrix;\n}\n\nvec4 textureColor(float t, out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 centeredUV = uv - 0.5f;\n    vec2 rotatedUV = rotate(centeredUV, t / 2.0);\n    vec2 finalUV = rotatedUV + 0.5f;\n    \n    finalUV.x += iResolution.x * 150.0;\n    finalUV.y += iResolution.y * 150.0;\n\n    vec3 col = vec3(0.);\n    \n    vec3 heightmap = texture(iChannel0, finalUV).rrr;\n    vec3 background = texture(iChannel1, uv).rgb;\n    vec3 foreground = vec3(1, 1, 1);\n    \n    float r = fract(-iTime*.2);\n    vec3 erosion = smoothstep(r, r, heightmap);\n    \n    vec3 border = smoothstep(0., .1, erosion) - smoothstep(.1, 1., erosion);\n    \n    col = (1.-erosion)*foreground + erosion*background;\n    \n    vec3 leadcol = vec3(1., .5, .1);\n    vec3 trailcol = vec3(0.2, .4, 1.);\n    vec3 fire = mix(leadcol, trailcol, smoothstep(0.8, 1., border))*2.;\n    \n    col += border*fire;\n    \n    return vec4(col,1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float skipFrame = floor(iTime*24.0);\n\n    // Output to screen\n    fragColor = textureColor(skipFrame * 131.0, fragColor, fragCoord);\n}","name":"Image","description":"","type":"image"}]}