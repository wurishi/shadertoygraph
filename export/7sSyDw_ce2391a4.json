{"ver":"0.1","info":{"id":"7sSyDw","date":"1643602044","viewed":76,"name":"sdf-fpfa-mandelbrot","username":"suitzero","description":"impressed with the fractal pyramid and fooling around","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sdffpfa"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot(float angle)\n{\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat2(c,-s,s,c);\n}\n\nfloat map(vec3 p)\n{   \n    vec2 c = p.xy;\n    vec2 z = vec2(0.0);\n    const float B = 256.0;\n    float l = 0.0;\n    for( int i=0; i<128; i++ )\n    {\n    \tz = vec2( z.x*z.x - z.y*z.y, 2.0*z.x*z.y ) + c;\n        // diverge?\n        if( dot(z,z)>(B*B) ) break;\n        l += 1.0;\n        p.xz+=z;\n    }\n    \n    return length(p-vec3(0.,0.,1.0))-1.;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n#if 0\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    return normalize( e.xyy*map( pos + e.xyy ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ).x );\n#else\n    // inspired by tdhooper and klems - a way to prevent the compiler from inlining map() 4 times\n    vec3 n = vec3(0.0);\n    for( int i=0; i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*map(pos+0.0005*e);\n      //if( n.x+n.y+n.z>100.0 ) break;\n    }\n    return normalize(n);\n#endif    \n}\n\n\nvec3 rm(vec3 ro, vec3 rd)\n{\n    float t=0.;\n    float d;\n    vec3 col=vec3(0.0);\n    for( int i = 0 ; i < 32 ; ++i )\n    {\n        vec3 p = ro+rd*t;\n        d = map(p);\n        if( d > 1000.0 ) break;\n        if( d < 0.0001 ) break;\n        t += d;\n        col += mix(vec3(0.8,0.6,.0),vec3(0.1,.2,0.3),calcNormal(p)*d);\n    }\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= vec2(0.5);\n    uv.y = uv.y*0.6;\n    uv = uv;\n    \n    vec3 ro = vec3(0.,0.,-10.+9.5*cos(iTime*0.05));\n    vec3 rd = vec3(uv,-0.5)-ro;\n\n    \n    vec3 col = rm(ro,rd);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}