{"ver":"0.1","info":{"id":"7dtGz8","date":"1629175726","viewed":291,"name":"shepardscale","username":"Carandiru","description":"forked from \"shepard scale\" by fabrice neyret\nI always liked the aesthetic of the original shader\n\nI think the shepard scale is quite fascinating really. control the speed editing PLAY_SPEED by an order of magnitude factor.\nnumerous illusions.","likes":6,"published":3,"flags":0,"usePreview":0,"tags":["illusion"],"hasliked":0,"parentid":"XdlXWX","parentname":"Shepard scale"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// forked from \"shepard scale\" by fabrice neyret\n\n\n// [ warp speed at ~139s @ default playspeed ]\n\n#define PLAY_SPEED 0.005 // better to use orders of magnitude to see differences.\n\n\n#define fma(a,b,c) (a*b+c)\nvec3 rotate( in vec3 p, in float angle )\n{\n\t#define c_ x\n\t#define s_ y\n\tvec2 cossin = vec2(cos(angle), sin(angle));\n\treturn( vec3(fma(p.x, cossin.c_, p.z * cossin.s_), p.y, fma(p.x, -cossin.s_, p.z * cossin.c_)) );\n\n\t#undef c_\n\t#undef s_\n}\n\n\nfloat fabriceScale(in vec2 uv, in float t0)\n{\n    float e = (1.-cos(6.283*uv.x))/2.;\n    float phase = 80.*uv.x-3.*(iTime - t0);\n    float v = pow((sin(phase)+1.)/2.,30.); \t\t\t\t\t// peaks\n    v *= step(.45,uv.y*2.)*smoothstep(e,e-.05,-.5+uv.y*2.); // enveloppe\n    \n    return(v);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = (24.0f * abs(sin(iTime * PLAY_SPEED + 17.0f)));\n    vec3 uvw = vec3(fragCoord.xy / iResolution.xy, 0.0f);\n        \n    float v = 0.0f;\n    \n    uvw = rotate(uvw * t*0.1f, t*0.5f);\n    \n    for (uvw.z = -32.0f; uvw.z <= 4.0f; ++uvw.z) {\n        \n        float z = uvw.z;\n        \n        vec2 n = z * vec2(0.05f * (1.0f + z*0.05f), 0.07f);\n        v += 0.75f * (1.0f - v) * fabriceScale(uvw.xy + n, t * z * z);\n    \n    }\n\tfragColor = vec4(v);\n}","name":"Image","description":"","type":"image"}]}