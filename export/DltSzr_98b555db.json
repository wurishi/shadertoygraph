{"ver":"0.1","info":{"id":"DltSzr","date":"1684962559","viewed":631,"name":"Progressive Dual Kawase Blur","username":"MartinRGB","description":"test progressive blur,my article about this effect:https://martinrgb.github.io/blog/#/Namedrop_Animation","likes":3,"published":3,"flags":32,"usePreview":0,"tags":["blur","kawase","dualfiltering"],"hasliked":0,"parentid":"3td3W8","parentname":"Dual Kawase Blur"},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Simply display the texture\n//\n// Try switching the iChannel0 to Buffer A, B, C and D to see the intermediate steps\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(fragCoord.xy / (iResolution.xy));\n    \n    if(uv.y>progressAVal){\n        vec4 origCol = texture(iChannel1, vec2(uv.x,uv.y));\n        vec4 sampleCol = texture(iChannel0, vec2(uv.x,uv.y));\n        //mix by progress position\n        fragColor = origCol;\n    }\n    else{\n        fragColor = texture(iChannel0, vec2(uv.x,uv.y));\n    }\n    \n    float handleBarVal;\n    \n    if(abs(uv.y-progressAVal) > 0.005){\n        handleBarVal = 0.;\n    }\n    else{\n        handleBarVal = 1.;\n    }\n    \n    \n    fragColor = mix(fragColor,vec4(0.,0.,0.,1.),handleBarVal);\n    \n    //fragColor = texture(iChannel0, vec2(uv.x,uv.y));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// downsample pass 1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(fragCoord.xy / iResolution.xy) * bufferADownScale;\n    float progressUV = (progressAVal-uv.y);\n    float clampedProgress = max(0.,progressUV);\n    clampedProgress = curveInterplation(clampedProgress);\n    vec2 halfpixel = pixelOffset / (iResolution.xy / (2.0 + (1.-clampedProgress) * 1.));\n    float offset = blurOffset*clampedProgress; \n\n    vec4 sum = texture(iChannel0, uv) * 4.0;\n    \n    sum += texture(iChannel0, uv - halfpixel.xy * offset);\n    sum += texture(iChannel0, uv + halfpixel.xy * offset);\n    sum += texture(iChannel0, uv + vec2(halfpixel.x, -halfpixel.y) * offset);\n    sum += texture(iChannel0, uv - vec2(halfpixel.x, -halfpixel.y) * offset);\n\n    fragColor = sum / 8.0;\n    \n    //fragColor = sum / 8.0;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// downsample pass 2\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(fragCoord.xy / iResolution.xy) * bufferADownScale;\n    float progressUV = (progressBVal-uv.y);\n    float clampedProgress = max(0.,progressUV);\n     clampedProgress = curveInterplation(clampedProgress);\n    vec2 halfpixel = pixelOffset / (iResolution.xy / (2.0 + (1.-clampedProgress) * 1.));\n    float offset = blurOffset*clampedProgress; \n\n    vec4 sum = texture(iChannel0, uv) * 4.0;\n    \n    sum += texture(iChannel0, uv - halfpixel.xy * offset);\n    sum += texture(iChannel0, uv + halfpixel.xy * offset);\n    sum += texture(iChannel0, uv + vec2(halfpixel.x, -halfpixel.y) * offset);\n    sum += texture(iChannel0, uv - vec2(halfpixel.x, -halfpixel.y) * offset);\n    \n    fragColor = sum / 8.0;\n    \n    //fragColor = sum / 8.0;\n    \n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// upsample pass 1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(fragCoord.xy / (iResolution.xy * bufferCUpScale));\n    float progressUV = (progressCVal - uv.y);\n    float clampedProgress = max(0.,progressUV);\n     clampedProgress = curveInterplation(clampedProgress);\n    vec2 halfpixel = pixelOffset / (iResolution.xy * (1. + 3.*clampedProgress));\n    float offset = blurOffset*clampedProgress;\n\n    vec4 sum = texture(iChannel0, uv +vec2(-halfpixel.x * 2.0, 0.0) * offset);\n    \n    sum += texture(iChannel0, uv + vec2(-halfpixel.x, halfpixel.y) * offset) * 2.0;\n    sum += texture(iChannel0, uv + vec2(0.0, halfpixel.y * 2.0) * offset);\n    sum += texture(iChannel0, uv + vec2(halfpixel.x, halfpixel.y) * offset) * 2.0;\n    sum += texture(iChannel0, uv + vec2(halfpixel.x * 2.0, 0.0) * offset);\n    sum += texture(iChannel0, uv + vec2(halfpixel.x, -halfpixel.y) * offset) * 2.0;\n    sum += texture(iChannel0, uv + vec2(0.0, -halfpixel.y * 2.0) * offset);\n    sum += texture(iChannel0, uv + vec2(-halfpixel.x, -halfpixel.y) * offset) * 2.0;\n\n    fragColor = sum / 12.0;\n    \n    //fragColor = sum / 12.0;\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"// upsample pass 2\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(fragCoord.xy / (iResolution.xy * bufferDUpScale));\n    float progressUV = (progressDVal - uv.y);\n    float clampedProgress = max(0.,progressUV);\n    clampedProgress = curveInterplation(clampedProgress);\n    vec2 halfpixel = pixelOffset / (iResolution.xy * (1. + 3.*clampedProgress));\n    float offset = blurOffset*clampedProgress;\n\n    vec4 sum = texture(iChannel0, uv +vec2(-halfpixel.x * 2.0, 0.0) * offset);\n    \n    sum += texture(iChannel0, uv + vec2(-halfpixel.x, halfpixel.y) * offset) * 2.0;\n    sum += texture(iChannel0, uv + vec2(0.0, halfpixel.y * 2.0) * offset);\n    sum += texture(iChannel0, uv + vec2(halfpixel.x, halfpixel.y) * offset) * 2.0;\n    sum += texture(iChannel0, uv + vec2(halfpixel.x * 2.0, 0.0) * offset);\n    sum += texture(iChannel0, uv + vec2(halfpixel.x, -halfpixel.y) * offset) * 2.0;\n    sum += texture(iChannel0, uv + vec2(0.0, -halfpixel.y * 2.0) * offset);\n    sum += texture(iChannel0, uv + vec2(-halfpixel.x, -halfpixel.y) * offset) * 2.0;\n\n    fragColor = sum / 12.0;\n    \n    //fragColor = sum / 12.0;\n}","name":"Buffer D","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define bufferADownScale 2.\n#define bufferBDownScale 2.\n#define bufferCUpScale 2.\n#define bufferDUpScale 2.\n#define blurOffset 24.\n#define pixelOffset 8.\n\n#define progressAVal max(0.33,iMouse.y/iResolution.y)\n#define progressBVal progressAVal/bufferADownScale //0.125\n#define progressCVal progressBVal/bufferBDownScale //0.125/4.\n#define progressDVal progressCVal*bufferCUpScale\n\nfloat curveInterplation(in float val){\n    //return(exp(val/1.45) -1.);\n    return 1. - exp(-val/12.);\n}","name":"Common","description":"","type":"common"}]}