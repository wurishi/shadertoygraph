{"ver":"0.1","info":{"id":"DssSRr","date":"1668443577","viewed":132,"name":"SmoothInputCamera","username":"Mario8664","description":"use buffer to make a smooth input camera. mouse down and drag to rotate. w and s to zoom.","likes":8,"published":1,"flags":48,"usePreview":0,"tags":["camera"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define DISTANCE 10.0\n#define PI 3.1415926535897932384626\n#define FRESNEL 2.0\n#define AOSTEP 0.1\n#define LIGHT vec3(-1.0, 2.0, -1.0)\n\nfloat sdSphere(vec3 spherePos, vec3 pos, float r)\n{\n\treturn distance(spherePos, pos) - r;\n}\n\nfloat opUnion(float d1, float d2)\n{\n    return min(d1, d2);\n}\n\nfloat opSmoothUnion(float d1, float d2, float k)\n{\n    float d = min(d1, d2);\n    float dif = max(k - abs(d1 - d2), 0.0);\n    d = d - dif * dif * 0.25 / k;\n    return d;\n}\n\nfloat sdf(vec3 pos)\n{\n    return sdSphere(vec3(-0.2, 0.2, -0.1), pos, 0.2);\n}\n\nvec4 getScene(vec3 pos)\n{\n    return vec4(vec3(1.0), sdf(pos));\n}\n\nvec3 skyBox(vec3 rd)\n{\n    //return texture(iChannel0, rd).xyz;\n    return ceil(rd * 10.0) / 10.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (-iResolution.xy + 2.0*fragCoord) / iResolution.y;\n    //Camera\n    vec2 m = texture(iChannel0, vec2(0.375)).xy;//Camera input\n    vec3 target = vec3(0.0, 0.0, 0.0);//Camera view target\n    float theta = m.x * 2.0 * PI;//Input to y-axis angle(0 ~ 2PI)\n    float fai = -(m.y - 0.5) * 0.8 * PI;//Input to local x-axis angle(-0.4Pi ~ 0.4PI)\n\n    //rotation vector(unit vector)\n    vec3 rotation = vec3(cos(theta), sin(fai) ,sin(theta));\n    rotation.xz *= cos(fai);\n    \n    float dd = DISTANCE * texture(iChannel0, vec2(0.75)).x;\n    vec3 cameraPos = rotation * dd;\n    vec3 cameraForward = normalize(target - rotation);\n    vec3 cameraRight = normalize(cross(cameraForward, vec3(0.0, 1.0, 0.0)));\n    vec3 cameraUp = cross(cameraRight, cameraForward);\n    \n    vec3 ro = cameraPos;\n    vec3 rd = cameraForward * 2.0 + uv.x * cameraRight + uv.y * cameraUp;\n    rd = normalize(rd);\n    \n    float t = 0.0;\n    vec3 pos = ro;\n    vec3 col = skyBox(rd);\n    \n    for(int i = 0; i < 128; i++)\n    {\n    \tvec4 d = getScene(pos);\n        if(abs(d.w)<(0.0001*t))\n        {\n            vec2 offset = vec2(0.001, 0.0);\n            vec3 normal = vec3(getScene(pos + offset.xyy).w - getScene(pos - offset.xyy).w,\n                               getScene(pos + offset.yxy).w - getScene(pos - offset.yxy).w,\n                               getScene(pos + offset.yyx).w - getScene(pos - offset.yyx).w);\n            normal = normalize(normal);\n            //reflection\n            vec3 ref = skyBox(reflect(rd,normal));\n            //fresnel\n            float fresnel = (1.0 - dot(normal, -rd));\n            fresnel = pow(fresnel, FRESNEL);\n            ref *= fresnel;\n            //diffuse\n            float diffuse = dot(normal, normalize(LIGHT));\n            diffuse = clamp(diffuse, 0.1, 1.0);\n            diffuse = pow(diffuse, 0.5);\n            //specular\n            float specular = clamp(dot(normal,normalize(LIGHT-rd)), 0.0, 1.0);\n            specular = pow(specular, 18.0) * 0.1;\n            //ambient occlusion\n            ro = pos;\n            t = 0.0;\n            float ao = 0.0;\n            for(int j = 0; j < 4; j++)\n            {\n                ao += 1.0 / pow(2.0, float(j)) * (float(j) * AOSTEP - getScene(pos).w);\n                t -= AOSTEP;\n                pos = ro + rd * t;\n            }\n            ao = 1.0 - ao;\n        \tcol = diffuse * d.rgb + ref + vec3(0.05) + specular;\n            col *= ao;\n            break;\n            break;\n        }\n        t += d.w;\n        pos = ro + rd * t;        \n    }\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    //fragColor = vec4(texture(iChannel0, fragCoord / iResolution.xy).www, 0.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define MOUSE_LERP 5.0\n#define MOUSE_STEP 0.5\n#define INIT vec2(0.5, 0.3)\n\n#define INITDISTANCE 0.5\n#define MINDISTANCE 0.2\n#define MAXDISTANCE 0.8\n#define ZOOM_LERP 5.0\n#define ZOOM_STEP 0.005\n\n#define KEY_W 87\n#define KEY_S 83","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 i, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec4 lastil = texture(iChannel0, vec2(0.125));\n    \n    if(uv.x < 0.25)\n    {\n        i = vec4(0.0);\n        vec2 m = i.xy = iMouse.xy / iResolution.xy;\n        if(iMouse.w > 0.5 || iFrame == 0)\n        {\n            lastil.xy = m;\n        }\n        i.xy = m;\n        vec2 offset = (m - lastil.xy) * MOUSE_STEP;\n        i.zw = mix(lastil.zw, offset, MOUSE_LERP * iTimeDelta);\n    }\n    else if(uv.x < 0.5)\n    {\n        if(iFrame == 0)\n        {\n            i = vec4(INIT, 0.0, 0.0);\n        }\n        else\n        {\n            i = texture(iChannel0, vec2(0.375));\n            i.xy += lastil.zw;\n            i.x = fract(i.x);\n            i.y = clamp(i.y, 0.0, 1.0);\n        }\n    }\n    else\n    {\n        if(iFrame == 0)\n        {\n            i = vec4(INITDISTANCE, 0.0, 0.0, 0.5);\n        }\n        else\n        {\n            float wsInput = texelFetch(iChannel1, ivec2(KEY_W,0), 0).r - texelFetch(iChannel1, ivec2(KEY_S,0), 0).r;\n            wsInput = wsInput * 0.5 + 0.5;\n            i = texture(iChannel0, vec2(0.75));\n            i.w = mix(i.w, wsInput, ZOOM_LERP * iTimeDelta);\n            i.x -= (i.w * 2.0 - 1.0) * ZOOM_STEP;\n            i.x = clamp(i.x, MINDISTANCE, MAXDISTANCE);\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}