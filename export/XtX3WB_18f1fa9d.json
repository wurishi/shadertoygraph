{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"\n/*\n\t\n\tAll Code stolen from \n\thttps://www.shadertoy.com/view/Mdl3Rr\n\n\tand\n\t\n\thttps://iquilezles.org/www/index.htm\n\thttps://www.shadertoy.com/user/iq\n\n\tand\n\n\thttps://www.shadertoy.com/view/4ts3z2\n\n*/\n\n#define INF 1.0e38\n#define HIT(x) hit = min(hit, x)\n#define ROOFPOS vec3(0,-1,0.01)\n#define time iTime\n\nconst float PI = 3.14159;\n\n\nmat2 rot(float angle)\n{\n\tfloat c = cos(angle);\n\tfloat s = sin(angle);\n\treturn mat2(c,-s,s,c);\n}\nvec3 rot (vec3 v, vec3 axis, vec2 sincosangle)\n{\n\treturn v*sincosangle.y + cross(axis, v)*sincosangle.x + axis*(dot(axis, v))*(1.0 - sincosangle.y);\n}\n\n// Taken from https://www.shadertoy.com/view/4ts3z2\nfloat tri(in float x){return abs(fract(x)-.5);}\nvec3 tri3(in vec3 p){return vec3( tri(p.z+tri(p.y*1.)), tri(p.z+tri(p.x*1.)), tri(p.y+tri(p.x*1.)));}\n                                 \nmat2 m2 = mat2(0.970,  0.242, -0.242,  0.970);\n\n\n\n// Taken from https://www.shadertoy.com/view/4ts3z2\nfloat triNoise3d(in vec3 p, in float spd)\n{\n    float z=1.4;\n\tfloat rz = 0.;\n    vec3 bp = p;\n\tfor (float i=0.; i<=3.; i++ )\n\t{\n        vec3 dg = tri3(bp*2.);\n        p += (dg+time*.1*spd);\n\n        bp *= 1.8;\n\t\tz *= 1.5;\n\t\tp *= 1.2;\n        //p.xz*= m2;\n        \n        rz+= (tri(p.z+tri(p.x+tri(p.y))))/z;\n        bp += 0.14;\n\t}\n\treturn rz;\n}\n\n\n// Taken from https://www.shadertoy.com/view/4ts3z2\nfloat fogmap(in vec3 p , float d )\n{\n    //p.x += time*.0005;\n   // p.z += sin(p.x*.00005);\n    return triNoise3d(p*2.2/(d * 20.),0.2);\n}\n\n\nfloat hash (float n)\n{\n\treturn fract(sin(n)*43758.5453);\n}\n\nfloat noise (in vec3 x)\n{\n\tvec3 p = floor(x);\n\tvec3 f = fract(x);\n\n\tf = f*f*(3.0-2.0*f);\n\n\tfloat n = p.x + p.y*57.0 + 113.0*p.z;\n\n\tfloat res = mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n\t\t\t\t\t\tmix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),\n\t\t\t\t\tmix(mix( hash(n+113.0), hash(n+114.0),f.x),\n\t\t\t\t\t\tmix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);\n\treturn res;\n}\n\n\nfloat box(vec3 org, vec3 dir, vec3 size, out float far)\n{\n\t// compute intersection of ray with all six bbox planes\n\tvec3 invR = 1.0 / dir;\n\tvec3 tbot = invR * (-0.5*size - org);\n\tvec3 ttop = invR * (0.5*size - org);\n\t\n\t// re-order intersections to find smallest and largest on each axis\n\tvec3 tmin = min (ttop, tbot);\n\tvec3 tmax = max (ttop, tbot);\n\t\n\t// find the largest tmin and the smallest tmax\n\tvec2 t0 = max (tmin.xx, tmin.yz);\n\tfloat near;\n\tnear = max (t0.x, t0.y);\n\tt0 = min (tmax.xx, tmax.yz);\n\tfar = min (t0.x, t0.y);\n\n\t// check for hit\n\treturn near < far && far > 0.0 ? near : INF;\n}\n\nfloat box(vec3 org, vec3 dir, vec3 size)\n{\n\tfloat far;\n\treturn box(org, dir, size, far);\n}\n\n\n\n// Makes brighter near top\nfloat transmittance (vec3 p)\n{\n    /*vec3 o;\n    o.x = sin( iTime ) * .1;\n    o.y = sin( iTime * .5) * 2.1;\n    o.z = sin( iTime * .05) * 20.1;\n\treturn noise( p * o);*/\n    \n    float a = 0.;\n    float mL = 100.;\n    float id = 0.;\n  \n    \n   \n    a = pow(a,2.) / 20. + 3. * pow(fogmap( p * 1.  + sin(iTime*.1 )* .1 + sin(iTime*.174 )* .2 , clamp( a , 0. , 1.1)*1.3+.5  ),3.);\n    \n    vec3 dif = p - vec3( 0. );\n    \n    float theta = acos( dif.z / length( dif ) );\n    float phi = atan( dif.y / dif.x );\n    \n    float r = max(0., 1.5 - length( dif ));\n   // a = pow( r , 2.)*/  * triNoise3d(p*2.2/(1. * 20.),0.2);\n    \n    a =  triNoise3d(vec3( sin( theta *r + 20.) , theta , phi ) , .2 ) * r * 3.;\n    return a;\n    \n}\n\n\nfloat transmittance (vec3 p , float offset){\n\n    vec3 dif = p - vec3( 0. );\n    \n    float theta = acos( dif.z / length( dif ) );\n    float phi = atan( dif.y / dif.x );\n    \n    float r = max(0., 1.5 - length( dif ));\n\n    float a =  triNoise3d(vec3( r + 2. * (offset +3.) , theta * .1 , phi *.1) , .2 ) * r * 3.;\n    return a;\n    \n}\n\nfloat intersect (vec3 ro, vec3 rd)\n{\n\tfloat hit = INF;\n\n\t//HIT(box (ro - vec3(0.,0.,0.), rd, vec3(.4,.4,.4)));\n    \n    HIT(box (ro - vec3(0.,-2.,0.), rd, vec3(10.,.1,10.)));\n    HIT(box (ro - vec3(4.,0.,0.), rd, vec3(.1,10.,10.)));\n    HIT(box (ro - vec3(-4.,0.,0.), rd, vec3(.1,10.,10.)));\n    HIT(box (ro - vec3(0.,0.,4.), rd, vec3(10.,10.,.1)));\n    HIT(box (ro - vec3(0.,0.,-4.), rd, vec3(10.,10.,.1)));\n    //HIT(box (ro - vec3(0.,-2.,0.), rd, vec3(10.,.1,10.)));\n\n  //  HIT(box (ro - vec3(0.,2.,0.), rd, vec3(10.,.1,10.)));\n\n\treturn hit;\n}\n\n\n// Calculates the normal by taking a very small distance,\n// remapping the function, and getting normal for that\nvec3 calcNormal(mat3 camMat , vec2 p, vec3 ro  ){\n    \n    // create view ray\n    vec2 eps = vec2( 0.0001, 0.0 );\n    \n\tvec3 l = normalize( camMat * vec3(p.xy - eps.xy,2.0) ); \n    vec3 r = normalize( camMat * vec3(p.xy + eps.xy,2.0) ); \n    vec3 u = normalize( camMat * vec3(p.xy - eps.yx,2.0) ); \n    vec3 d = normalize( camMat * vec3(p.xy + eps.yx,2.0) ); \n    \n    // raycast the scene\n\tfloat hL = intersect(ro,l);\n\tvec3 pL = ro + hL * l;\n    if( hL == INF ){ return vec3( INF ); }\n        \n    \n     // raycast the scene\n\tfloat hR = intersect(ro,r);\n\tvec3 pR = ro + hR * r;\n    if( hR == INF ){ return vec3( INF ); }\n    \n    // raycast the scene\n\tfloat hU = intersect(ro,u);\n\tvec3 pU = ro + hU * u;\n    if( hU == INF ){ return vec3( INF ); }\n    \n    // raycast the scene\n\tfloat hD = intersect(ro,d);\n\tvec3 pD = ro + hD * d;\n    if( hD == INF ){ return vec3( INF ); }\n    \n    vec3 d1 = pL - pR;\n    vec3 d2 = pU - pD;\n        \n    vec3 nor =cross( d1 , d2 );\n\n\treturn normalize(nor);\n    \n}\n\n\nvec3 rainbowTransmit( vec3 p ){\n    \n    vec3 r = vec3( 1. , 0. , 0.);\n    vec3 g = vec3( 0. , 1. , 0.);\n    vec3 b = vec3( 0. , 0. , 1.);\n    \n    \n    float rT = transmittance( p , 0. );\n    float gT = transmittance( p , 1. );\n    float bT = transmittance( p , 2. );\n \n    vec3 col = vec3( rT , gT , bT );\n    \n    return col;\n    \n}\n\n#define STEPS 40\nvec3 inscatter ( vec3 origin, vec3 ro, vec3 rd, vec3 roLight , vec3 rdLight, vec3 lightDir, float hit, vec2 screenPos)\n{\n\tfloat far;\n    //float near = frustum(roLight + vec3(0.0, 1.0, 0.0), rdLight,.01, vec3(1.5, 3.0, 1.5), far);\n\tfloat near = box(roLight + origin, rdLight, vec3(3., 3., 3.), far);\n\tif(near == INF || hit < near)\n\t\treturn vec3(0);\n\t\n\tfloat distAlongView = min(hit, far) - near;\n\tfloat oneOverSteps = 1.0/float(STEPS);\n\tvec3 step = rd*distAlongView*oneOverSteps;\n\tvec3 pos = ro + rd*near;\n\tfloat light = 0.0;\n\t\n\t// add noise to the start position to hide banding\n\tpos += rd*noise(vec3(2.0*screenPos, 0.0))*0.05;\n\n    vec3 col = vec3( 0. );\n\tfor(int i = 0; i < STEPS; i++)\n\t{\n\t\tfloat l = intersect(pos, lightDir) == INF ? 1.0 : 0.0;\n\t\t//l *= transmittance(pos);\n\t\t//light += l;\n        \n        vec3 c = rainbowTransmit( pos );\n        //include light particles later ?\n\t\t//light += particles(pos)*l;\n\t\tpos += step;\n        \n       // vec3 c = vec3( 1. - length( pos - vec3( 0.) ) , abs( sin( 20. * length(pos-vec3(0.)))) , 1. );\n        col += c * l;\n\t}\n\n\tlight *= oneOverSteps * distAlongView;\n    col *= oneOverSteps * distAlongView;\n\treturn col * .4; //light * vec3( 1.);\n}\n\n\n\n\n\n//----\n// Camera Stuffs\n//----\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in float mouseX )\n{\n    float an = 0.3 + 10.0*mouseX;\n\tcamPos = vec3(3.5*sin(an),0.0,3.5*cos(an));\n    camTar = vec3(0.0,0.0,0.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    \n\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n\n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n    \n    // camera movement\n    vec3 ro, ta;\n    doCamera( ro, ta, iTime, m.x );\n\n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  // 0.0 is the camera roll\n    \n\t// create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy,2.0) ); // 2.0 is the lens length\n    \n    \n    // raycast the scene\n\tfloat hit = intersect(ro,rd);\n\tvec3 hitPos = ro + hit * rd;\n\t\n    vec3 col = normalize( hitPos ) * .5 + .5; //vec3( 0. );\n    \n   \n\t// white window\n\tif (hit == INF)\n\t{\n\t\tcol = vec3( 1. , 0. , 0. );\n        \n\n    }else{\n        \n        vec3 n;\n        \n        n.x = noise( hitPos * 10. );\n        n.y = noise( hitPos * 20. );\n        n.z = noise( hitPos * 30. );\n        \n       // col = vec3( n );//.3 * (normalize( hitPos ) * .5 + .5);// vec3( .1 , 0.1 , 0.2 );\n    \tcol = vec3( 0. );\n    }\n     \n    \n    // white window\n\tif (hit == INF)\n\t{\n        \n        // DO BACKGROUND\n\t\tfragColor = vec4(1.0 , 0. , 0. , 1.);\n\t\treturn;\n\t}\n    \n    vec3 n = calcNormal( camMat , p , ro );\n    \n    if( n == vec3(INF) ){\n        fragColor = vec4(1.0);\n\t\treturn;\n    }\n    \n    col = vec3( 1. , 0. , 0. );//vec3(dot( vec3( 0. , 1. , 0. ) , n ));\n    \n\n    \n    // direct light (screw shading!)\n\tvec3 lightRotAxis = vec3(0.707,0,0.707); //1,0,1 normalized\n    \n    \n    float angle = 0.;//  + .01 * sin(iTime);\n\tvec2 lightAngleSinCos = vec2(sin(angle), cos(angle));\n\tvec3 lightDir = rot(vec3(0,1,0), lightRotAxis, lightAngleSinCos);\n\tfloat shadowBias = 1.0e-4;\n\t//vec3 col = vec3(0.0);\n    if (intersect(hitPos + lightDir*shadowBias, lightDir) == INF){\n        \n        col = n * .5 + .5;\n\n    }\n\t\n\t// inscatter\n\tlightAngleSinCos.x *= -1.0; // rev angle\n\tvec3 roLight = rot(ro , lightRotAxis, lightAngleSinCos);\n\tvec3 rdLight = rot(rd, lightRotAxis, lightAngleSinCos);\n    \n    // The 5 lights\n\tcol = inscatter(vec3( 0. , 0. , 0.),ro, rd, roLight, rdLight, lightDir, hit, fragCoord.xy);    \n\n    vec3 c = col;\n    // color correction - Sherlock color palette ;)\n\tc.r = smoothstep(0.0, 1.0, c.r * 1.5);\n\tc.g = smoothstep(0.0, 1.0, c.g - 0.0);\n\tc.b = smoothstep(-0.2, 1.3, c.b);\n    \n \tfragColor = vec4( c , 1. );   \n    \n    \n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XtX3WB","date":"1424638332","viewed":886,"name":"SHADE A DAY ( 2 / 22 / 2015 )","username":"cabbibo","description":"Playing more with colors / volumetric lighting","likes":18,"published":1,"flags":0,"usePreview":0,"tags":["glsl","volumetric","rainbow"],"hasliked":0,"parentid":"","parentname":""}}