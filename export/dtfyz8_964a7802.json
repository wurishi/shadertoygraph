{"ver":"0.1","info":{"id":"dtfyz8","date":"1692209827","viewed":101,"name":"Star Field Shader Test","username":"gsm041039","description":"Star Field shader test","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define STARFIELD_SCALE 20.\n#define STARFIELD_LAYERCOUNT 10.\n#define PI 3.141592654\n\n\n//Function from Iñigo Quílez\nvec3 Palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 2.* PI * (c*t+d) );\n}\n\nfloat Hash21(vec2 p)\n{\n    return fract(sin(dot(p, vec2(12.898, 78.233))) *43758.5453);\n}\n\nfloat EaseInCubic(float x)\n{\n    return x * x * x;\n}\n\nmat2 Rotate(float r)\n{\n    float s = sin(degrees(r));\n    float c = cos(degrees(r));\n\n    return mat2(c, -s,s, c);\n\n}\n\nfloat Star(vec2 p, float s)\n{\n    p *= 1./ s;\n    float starCore = length(p);\n    starCore = smoothstep(0.1, 2.0, 0.1/ starCore);\n\n    float starRayA = smoothstep(0.05, 0.8, (0.15 / 1.0 - abs(p.x * p.y * 15.0)));\n\n    vec2 p2 = p * Rotate(PI);\n    float starRayB = smoothstep(0.05, 0.6, (0.1 / 1.0 - abs(p2.x * p2.y * 25.0)));\n    return starCore + starRayA + starRayB;\n\n}\n\nvec3 StarLayer(vec2 p)\n{\n    vec3 col;\n    vec2 starUV = fract(p) - 0.5;\n    \n    for(int i = -1; i <= 1; i ++)\n    {\n        for(int j = -1; j <= 1; j ++)\n        {\n            vec2 starID = p + vec2(i, j);\n            float starHash = Hash21(floor(starID));\n            vec2 offset = vec2(i, j) + starHash;\n            vec2 newStarUV = (starUV  - offset) * Rotate(PI *starHash);\n\n            float starTime = sin((iTime + starHash) * 2.) * 0.5 + 1.0;\n            float starSize = mix(0.1,1.0 , starHash);\n            float starIntensity = EaseInCubic(starSize);\n            float star = Star(newStarUV, starSize) * starIntensity * 3.;\n\n            vec3 starCol = Palette(starHash * (iTime + 5235.34) * 0.2 , \n            vec3(1.488, 0.885, 0.677),\n             vec3(0.808, 0.468, 0.528),\n             vec3(0.388, 0.778, 1.019),\n             vec3(2.358, 0.918, 4.541));\n            col += vec3(star) * starCol;\n        }\n    }\n\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col;\n\n    vec2 uv = ((fragCoord - 0.5 * iResolution.xy) / iResolution.y);\n    uv *= STARFIELD_SCALE;\n    uv += (vec2(iMouse.x / iResolution.x, iMouse.y / iResolution.y) *2. - 1.) * 20.;\n\n    for(float i = 0.; i < 1. ; i += 2. /STARFIELD_LAYERCOUNT)\n    {\n        vec2 layerOffset = vec2(i * 2540., i* 23540.);\n        float layerDepth = fract(iTime * 0.2 + i);\n        col += StarLayer(((uv)) * mix(1.0, 0.0,layerDepth) + layerOffset) * layerDepth;\n    }\n\n    fragColor = vec4(col.xyz, 1.0);  \n\n}","name":"Image","description":"","type":"image"}]}