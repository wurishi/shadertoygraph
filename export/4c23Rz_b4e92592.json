{"ver":"0.1","info":{"id":"4c23Rz","date":"1720501005","viewed":47,"name":"Game of life - practice","username":"joel_kenna","description":"Implementation of conway's game of life with standard rules. Practicing using buffer to access old framedata.\n\nIf only flat colours appear on first render, hit the \"back\" arrow to reseed and fix the render issue.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["life","conway","gameoflife"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    fragColor = 0.5*fragColor + 0.5*vec4(sin(iTime), clamp(0., 1., cos(iTime)), hash(vec3(iTime), iTime).x, 1);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//HASH FN CREDIT TO: https://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl\nvec3 hash(vec3 f, float time)\n{\n\n    uvec3 x = uvec3(f*(55.*time));\n\n    const uint k = 1103515245U;  // GLIB C\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n\n    return mod(vec3(x)*(1.0/float(0xffffffffU)), 1.0);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"int checkNeighbour(ivec2 p) {\n    int W = int(iResolution.x); int H = int(iResolution.y);\n    if (p.x == 0 || p.y == 0 || p.x >= W - 1 || p.y >= H - 1) {\n        return 0;\n    }\n    return int(texelFetch(iChannel0, ivec2(p), 0).x);\n}\n\nint sumNeighbours(ivec2 p) {\n    int sum = 0;\n    for (int i = -1; i <= 1; i++) {\n        for (int j = -1; j <= 1; j++) {\n            if (i == 0 && j == 0) continue;\n            sum += checkNeighbour(ivec2(p.x+i, p.y+j));\n        }\n    }\n    return sum;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 iFragCoord = ivec2(fragCoord);\n    int alive = int(texelFetch(iChannel0, iFragCoord, 0).x);\n    int rseed = int(texelFetch(iChannel1, iFragCoord, 0).x);\n    if (rseed == 0) {\n        fragColor = vec4(vec3(hash(vec3(fragCoord, 1), iTime).x > 0.5),1);\n        return;\n    }\n    int nCt = sumNeighbours(iFragCoord);\n    if (alive == 0 && nCt == 3) {\n        fragColor = vec4(1);\n        return;\n    }\n    if (alive == 1 && (nCt < 2 || nCt > 3)) {\n        fragColor = vec4(vec3(0), 1);\n        return;\n    }\n    fragColor = vec4(vec3(alive), 1);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 old = texelFetch(iChannel1, ivec2(0), 0); \n    if (old != vec4(1)) {\n        fragColor = vec4(1); return;\n    }\n    fragColor = old;\n}","name":"Buffer B","description":"","type":"buffer"}]}