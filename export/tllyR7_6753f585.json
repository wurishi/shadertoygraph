{"ver":"0.1","info":{"id":"tllyR7","date":"1591807016","viewed":317,"name":"Mercurial supershape","username":"kesson","description":"Raymarching experiment with Superformula.\n\nBased on a recent live coding performance I did with Processing.\nhttps://github.com/netherlands-coding-live/community-code/tree/master/kesson","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["procedural","3d","raymarching","math","shadows","superformula","supershape"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* Copyright 2020 - Giovanni Muzio\n * Based on a personal live coding sketch from Processing\n * https://github.com/netherlands-coding-live/community-code/tree/master/kesson\n *\n * MIT License\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 tx = texture(iChannel1, uv).rgb;\n    fragColor = vec4(tx, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define RAYMARCH_MAX_STEPS \t\t512\n#define RAYMARCH_MAX_DIST \t\t1000.0\n#define RAYMARCH_SURFACE_DIST \t0.0001\n\nvec2 getAngle(vec3 p) {\n    float theta = asin(p.z / length(p));\n    float phi = atan(p.y, p.x);\n    return vec2(theta, phi);\n}\n\nfloat supershape(float theta, float m, float n1, float n2, float n3) {\n  float t1 = abs(cos(m * theta / 4.0));\n  t1 = pow(t1, n2);\n\n  float t2 = abs(sin(m * theta / 4.0));\n  t2 = pow(t2, n3);\n\n  float t3 = t1 + t2;\n  float r = pow(t3, -1.0 / n1);\n\n  return r;\n}\n\nfloat getDist(vec3 p) {\n\tvec2 angle = getAngle(p);\n    \n    angle.x -= iTime * 0.2;\n    \n    float r1 = supershape(angle.x,\n                          12.0,\n                          abs(cos(iTime*0.75)) + 0.1,\n                          abs(sin(iTime*0.075)) + 0.1,\n                          abs(cos(iTime*0.05)) + 0.1);\n    \n    float r2 = supershape(angle.y, \n                          4.0 + sin(iTime*0.123) * 8.0, \n                          (abs(sin(iTime*0.0756)) + 0.234) * 100.0,\n                          (abs(cos(iTime*0.0765)) + 0.234) * 100.0,\n                          (abs(cos(iTime*0.0675)) + 0.234) * 10.0);\n    \n    vec3 f = vec3(r1 * sin(angle.x) * r2 * cos(angle.y),\n                  r1 * sin(angle.x) * r2 * sin(angle.y),\n                  r2 * cos(angle.x));\n    \n    return (length(p) - length(f)) * 0.2;\n}\n\n// Thanks to https://www.youtube.com/watch?v=PGtv-dBi2wE for the RayMarching for dummies tutorial\nfloat rayMarch(in vec3 ro, in vec3 rd, out int mr) {\n\tfloat dO = 0.0;\n    \n    for (int i = 0; i < RAYMARCH_MAX_STEPS; i++) {\n\t\tvec3 p = ro + rd * dO;\n        float dS = getDist(p);\n        dO += dS;\n        if (dO > RAYMARCH_MAX_DIST) break;\n        if (dS < RAYMARCH_SURFACE_DIST) {\n            mr = 1;\n            break;\n        }\n    }\n    \n    return dO;\n}\n\nfloat rayMarch(in vec3 ro, in vec3 rd) {\n\tfloat dO = 0.0;\n    \n    for (int i = 0; i < RAYMARCH_MAX_STEPS; i++) {\n\t\tvec3 p = ro + rd * dO;\n        float dS = getDist(p);\n        dO += dS;\n        if (dO > RAYMARCH_MAX_DIST) break;\n        if (dS < RAYMARCH_SURFACE_DIST) {\n            break;\n        }\n    }\n    \n    return dO;\n}\n\nvec3 getNormal(vec3 p) {\n\tfloat d = getDist(p);\n    vec2 e = vec2(0.01, 0.0);\n    \n    vec3 n = d - vec3(\n        getDist(p - e.xyy),\n        getDist(p - e.yxy),\n        getDist(p - e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 getDiff(vec3 p, vec3 rd) {\n    vec3 n = getNormal(p);\n    return reflect(rd, n);\n}\n\n// From https://www.shadertoy.com/view/lsKcDD\n// https://iquilezles.org/articles/rmshadows\nfloat shadowMarch( vec3 ro, vec3 rd ) {\n\tfloat dO = 0.01;\n    float res = 1.0;\n    \n    for (int i = 0; i < 64; i++) {\n\t\tfloat h = getDist( ro + rd * dO );\n\n        res = min( res, 10.0 * h / dO );  \n        dO += h;\n        \n        if( res < 0.0001 || dO > RAYMARCH_MAX_DIST ) break;\n    }\n    \n    return res;//clamp( res, 0.0, 1.0 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    vec2 uv = (fragCoord-0.5 * iResolution.xy) / iResolution.y;\n    \n    float an = -iTime * 0.1;\n    \n    // Camera matrix and movement from https://www.shadertoy.com/view/ldl3Dl\n    float cd = 6.5 + (sin(an) + 1.0);\n    vec3 ro = vec3( cd*cos(an), sin(an) * 2.0, cd*sin(an) );\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    vec3 rd = normalize( uv.x*uu + uv.y*vv + 2.0*ww );\n    \n    int mr = 0;\n    float d = rayMarch(ro, rd, mr);\n    \n    vec3 col = texture(iChannel0, rd).rgb * 0.4;\n\n    if (mr == 1) {\n        vec3 p = ro + rd * d;\n    \tvec3 dif = getDiff(p, rd);\n    \tcol = texture(iChannel0, dif).xyz;\n      \tvec3 lightPos = normalize(vec3(0.0, 1000.0, 0.0));\n     \tvec3 l = normalize(lightPos - p);\n      \tvec3 n = getNormal(p);\n    \tfloat s = 1.0 + dot(n, l);\n        float d = shadowMarch( p, lightPos );\n    \tcol *= vec3(s)*(0.5 + d);\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}