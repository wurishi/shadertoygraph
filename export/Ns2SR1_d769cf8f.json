{"ver":"0.1","info":{"id":"Ns2SR1","date":"1620779357","viewed":136,"name":"Ray Marching Snowman With Color","username":"inspirnathan","description":"Do you want to build a snowman shader? Learn how at [url]https://inspirnathan.com/posts/61-snowman-shader-in-shadertoy/[/url] Get inspired! :)\nScene that uses this model: [url]https://www.shadertoy.com/view/fsBSzW[/url].","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","tutorial","snow","snowman","inspirnathan"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float PRECISION = 0.001;\nconst float EPSILON = 0.0005;\nconst float PI = 3.14159265359;\nconst vec3 COLOR_BACKGROUND = vec3(.741, .675, .82);\nconst vec3 COLOR_AMBIENT = vec3(0.42, 0.20, 0.1);\nconst vec3 COLOR_BODY = vec3(1);\nconst vec3 COLOR_EYE = vec3(0);\nconst vec3 COLOR_NOSE = vec3(0.8, 0.3, 0.1);\nconst vec3 COLOR_ARM = vec3(0.2);\nconst vec3 COLOR_HAT = vec3(0);\n\nstruct Surface {\n  float sd; // signed distance\n  vec3 col; // diffuse color\n};\n\nmat2 rotate2d(float theta) {\n  float s = sin(theta), c = cos(theta);\n  return mat2(c, -s, s, c);\n}\n\nfloat opUnion(float d1, float d2) { \n  return min(d1, d2);\n}\n\nSurface opUnion(Surface d1, Surface d2) {\n  if (d2.sd < d1.sd) return d2;\n  return d1;\n}\n\nSurface opSmoothUnion( Surface d1, Surface d2, float k ) {\n  Surface s;\n  float h = clamp( 0.5 + 0.5*(d2.sd-d1.sd)/k, 0.0, 1.0 );\n  s.sd = mix( d2.sd, d1.sd, h ) - k*h*(1.0-h);\n  s.col = mix( d2.col, d1.col, h ) - k*h*(1.0-h);\n\n  return s;\n}\n\nvec3 opFlipX(vec3 p) {\n  p.x *= -1.;\n  return p;\n}\n \nfloat sdSphere(vec3 p, float r, vec3 offset)\n{\n  return length(p - offset) - r;\n}\n\nfloat sdCone( vec3 p, vec2 c, float h, vec3 offset )\n{\n  p -= offset;\n  float q = length(p.xy);\n  return max(dot(c.xy,vec2(q,p.z)),-h-p.z);\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r, vec3 offset )\n{\n  p -= offset;\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\nfloat sdCappedCylinder(vec3 p, float h, float r, vec3 offset)\n{\n  p -= offset;\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nSurface sdBody(vec3 p) {\n  Surface bottomSnowball = Surface(sdSphere(p, 1., vec3(0, -1, 0)), COLOR_BODY);\n  Surface topSnowball = Surface(sdSphere(p, 0.75, vec3(0, 0.5, 0)), COLOR_BODY);\n  \n  return opSmoothUnion(bottomSnowball, topSnowball, 0.2);\n}\n\nSurface sdEye(vec3 p) {\n  float d = sdSphere(p, .1, vec3(-0.2, 0.6, 0.7));\n  return Surface(d, COLOR_EYE);\n}\n\nSurface sdNose(vec3 p) {\n  float noseAngle = radians(75.);\n  float d = sdCone(p, vec2(sin(noseAngle), cos(noseAngle)), 0.5, vec3(0, 0.4, 1.2));\n  return Surface(d, COLOR_NOSE);\n}\n\nSurface sdArm(vec3 p) {\n  float mainBranch = sdCapsule(p, vec3(0, 0.5, 0), vec3(0.8, 0, 0.), 0.05, vec3(-1.5, -0.5, 0));\n  float smallBranchBottom = sdCapsule(p, vec3(0, 0.1, 0), vec3(0.5, 0, 0.), 0.05, vec3(-2, 0, 0));\n  float smallBranchTop = sdCapsule(p, vec3(0, 0.3, 0), vec3(0.5, 0, 0.), 0.05, vec3(-2, 0, 0));\n  \n  float d = opUnion(mainBranch, smallBranchBottom);\n  d = opUnion(d, smallBranchTop);\n  return Surface(d, COLOR_ARM);\n}\n\nSurface sdHat(vec3 p) {\n  Surface bottom = Surface(sdCappedCylinder(p, 0.5, 0.05, vec3(0, 1.2, 0)), COLOR_HAT);\n  Surface top = Surface(sdCappedCylinder(p, 0.3, 0.3, vec3(0, 1.5, 0)), COLOR_HAT);\n  \n  return opUnion(bottom, top);\n}\n\nSurface sdSnowman(vec3 p) {\n  Surface body = sdBody(p);\n  Surface leftEye = sdEye(p);\n  Surface rightEye = sdEye(opFlipX(p));\n  Surface nose = sdNose(p);\n  Surface leftArm = sdArm(p);\n  Surface rightArm = sdArm(opFlipX(p));\n  Surface hat = sdHat(p);\n\n  Surface co = body;\n  co = opUnion(co, leftEye);\n  co = opUnion(co, rightEye);\n  co = opUnion(co, nose);\n  co = opUnion(co, hat);\n  co = opUnion(co, leftArm);\n  co = opUnion(co, rightArm);\n  \n  return co;\n}\n\nSurface scene(vec3 p) {\n  return sdSnowman(p);\n}\n\nSurface rayMarch(vec3 ro, vec3 rd) {\n  float depth = MIN_DIST;\n  Surface co; // closest object\n\n  for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n    vec3 p = ro + depth * rd;\n    co = scene(p);\n    depth += co.sd;\n    if (co.sd < PRECISION || depth > MAX_DIST) break;\n  }\n  \n  co.sd = depth;\n  \n  return co;\n}\n\nvec3 calcNormal(in vec3 p) {\n    vec2 e = vec2(1, -1) * EPSILON;\n    return normalize(\n      e.xyy * scene(p + e.xyy).sd +\n      e.yyx * scene(p + e.yyx).sd +\n      e.yxy * scene(p + e.yxy).sd +\n      e.xxx * scene(p + e.xxx).sd);\n}\n\nmat3 camera(vec3 cameraPos, vec3 lookAtPoint) {\n\tvec3 cd = normalize(lookAtPoint - cameraPos);\n\tvec3 cr = normalize(cross(vec3(0, 1, 0), cd));\n\tvec3 cu = normalize(cross(cd, cr));\n\t\n\treturn mat3(-cr, cu, -cd);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n  vec2 mouseUV = iMouse.xy/iResolution.xy;\n  \n  if (mouseUV == vec2(0.0)) mouseUV = vec2(0.5); // trick to center mouse on page load\n\n  vec3 col = vec3(0);\n  vec3 lp = vec3(0); // lookat point\n  vec3 ro = vec3(0, 0, 3); // ray origin that represents camera position\n  \n  float cameraRadius = 2.;\n  ro.yz = ro.yz * cameraRadius * rotate2d(mix(-PI/2., PI/2., mouseUV.y));\n  ro.xz = ro.xz * rotate2d(mix(-PI, PI, mouseUV.x)) + vec2(lp.x, lp.z);\n\n  vec3 rd = camera(ro, lp) * normalize(vec3(uv, -1)); // ray direction\n\n  Surface co = rayMarch(ro, rd); // closest object\n\n  if (co.sd > MAX_DIST) {\n    col = COLOR_BACKGROUND; // ray didn't hit anything\n  } else {\n    vec3 p = ro + rd * co.sd; // point discovered from ray marching\n    vec3 normal = calcNormal(p); // surface normal\n\n    vec3 lightPosition = vec3(0, 2, 2);\n    vec3 lightDirection = normalize(lightPosition - p) * .65; // The 0.65 is used to decrease the light intensity a bit\n\n    float dif = clamp(dot(normal, lightDirection), 0., 1.) * 0.5 + 0.5; // diffuse reflection mapped to values between 0.5 and 1.0\n\n    col = dif * co.col + COLOR_AMBIENT;\n  }\n\n  fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}