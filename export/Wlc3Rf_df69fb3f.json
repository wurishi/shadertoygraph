{"ver":"0.1","info":{"id":"Wlc3Rf","date":"1577010120","viewed":283,"name":"Iter","username":"kefeld","description":"Attempt to picture the inside of a Tokamak fusion reactor","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["plasma","glow","fusion","reactor"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float plas = 1.;\nfloat bigr = 1.;\nfloat smallr = .7;\n\nvec3 march(vec3 ro, vec3 rd) {\n    \n    float dS, dO, dP;\n    vec3 p;\n    \n    for(int i=0; i<100; i++) {\n        p = ro + rd * dO;\n        dP = length(vec2(length(p.xz)-bigr, p.y));\n        dS = abs(dP - smallr);\n       \n        if (dP < .005) {\n            dP = .005;\n        }\n        plas *= 1. - 0.005/dP;\n        dS = min(dS,dP)  ;  \n        if (dS<.001) return p;\n        dO += dS;\n    }\n    \n    return vec3(0);\n    \n}\n\nbool pattern(vec3 p) {\n    bool col = true;\n    float x = atan(p.x, p.z);\n    float y = atan(length(p.xz)-bigr, p.y);\n    if (mod(y*3.18,2.) > 1.)\n    {\n        if (fract(x*3.14+0.05*iTime)<0.07) col = false;\n    } else {\n        if (fract(x*3.14+.5+0.05*iTime)<0.07) col = false;\n    }\n    if (fract(y*3.18)<0.08) col = false; \n    return col;\n}\n\nvec3 normal(vec3 p) {\n    vec3 n;\n    \n    n.xz = bigr-p.xz;\n    n.y = p.y;\n    return normalize(n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 ro = vec3(0., 0.4*sin(0.2*iTime), 1.5);\n    vec3 lookat = vec3(0);\n    float zoom = 1.;\n    \n \n    \n    vec3 f = normalize(lookat-ro),\n        r = normalize(cross(vec3(0,1,0),f)),\n        u = cross(f,r),\n        c = ro + f * zoom,\n        i = c + uv.x * r + uv.y * u,\n        rd = normalize(i-ro);\n    \n    vec3 p = march(ro, rd);\n    vec3 p2;\n  \n    \n    vec3 col = vec3(0);\n    \n    if (length(p) > 0.) {\n        \n        if (pattern(p)) {\n            col = vec3(0.05,.1,.1);\n            //vec3 n = normal(p);\n            //rd = rd - 2.*dot(rd,n)*n;\n            //p2 = march(p,rd);\n            /*if (pattern(p2)) {\n                vec3 n2 = normal(p2);\n                rd = rd - 2.*dot(rd,n)*n;\n                vec3 p3 = march(p,rd);\n                if (pattern(p3)) {\n                    //col += 1.;\n                } else {\n                    col *= 0.;\n                }\n            }*/\n        } \n            \n            \n        \n        \n    } \n    \n    col = col*plas + (1.-plas) * vec3(1.,0,1.)+(1.-plas)*(1.-plas)*(1.-plas)*vec3(.5 + sin(iTime * 10.) * .25, 1., 1.);;\n    \n    \n\n    //col = vec3(dO*0.2-.5);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}