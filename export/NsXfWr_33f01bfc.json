{"ver":"0.1","info":{"id":"NsXfWr","date":"1701907428","viewed":21,"name":"my_harmonics","username":"Lay","description":"my_harmonics","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["myharmonics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float psize = 0.003;\n\nint step = 1;\n\nfloat point(vec2 p0, vec2 p1)\n{\n    return smoothstep(psize, .3*psize, length(p0 - p1));\n}\n\nvec3 nice(vec2 p)\n{\n    float x = sin(50.*p.x);\n    return smoothstep(.3, 0., p.y) * vec3(0.2 + 0.2 * cos(iTime+vec3(x)+vec3(0,2,4)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord/iResolution.x;\n    float h = .5 * iResolution.y / iResolution.x;\n\n    vec3 col = vec3(0.);\n    \n    //col += nice(uv);\n    \n    //col += 0.2 + 0.2*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    psize *= 3.;\n    vec3 brush = vec3(1.);\n    for (int i = 0; i < 16; i += 1)\n    {\n        brush = .5*vec3(1., .1, .7);\n        \n        if ((i+1) % 3 == 0 && (i+1) % 9 != 0 && (i+1) % 5 != 0)\n            brush = vec3(.2, .2, 1.);\n        else if ((i+1) % 5 == 0 && (i+1) % 3 != 0)\n            brush = vec3(1., .1, .1);\n        else if ((i+1)%7 == 0)\n            brush = vec3(1., .8, .1);\n        else if ((i+1) % 2 == 0 || i == 0)\n            brush = vec3(1., 1., 1.);\n            \n        if (step < 1)\n            brush = vec3(1., 1., 1.);\n            \n        col += brush * point(uv, vec2(float(i)/16.+.05, h + 0.2));\n    }\n    \n    psize /= 3.;\n    \n    if (step < 1)\n    {\n        fragColor = vec4(col, 1.);\n        return;\n    }\n\n    for (float i = 1.; i <= 16.; i += 1.)\n        col += brush * point(uv, vec2(log(i)/3.+.05, h));\n\n    h += 0.04;\n    for (float i = .05; i < 16.; i += log(2.)/3.)\n        col += brush * point(vec2(uv.x, (uv.y-h)/10.+h), vec2(i, h));\n\n    brush = vec3(.2, .2, 1.);\n    h -= 0.015;\n    for (float i = .05 + log(3.)/3.; i < 16.; i += log(2.)/3.)\n        col += brush * point(vec2(uv.x, (uv.y-h)/5.+h), vec2(i, h));\n        \n    brush = vec3(1., .1, .1);\n    h += 0.005;\n    for (float i = .05 + log(5.)/3.; i < 16.; i += log(2.)/3.)\n        col += brush * point(vec2(uv.x, (uv.y-h)/3.+h), vec2(i, h));\n\n    brush = vec3(1., .8, .1);\n    for (float i = .05 + log(7.)/3.; i < 16.; i += log(2.)/3.)\n        col += brush * point(vec2(uv.x, (uv.y-h)/3.+h), vec2(i, h));\n\n    brush = .5*vec3(1., .1, .7);\n    col += brush * point(vec2(uv.x, (uv.y-h)/3.+h), vec2(.05 + log(9.)/3., h));\n    col += brush * point(vec2(uv.x, (uv.y-h)/3.+h), vec2(.05 + log(11.)/3., h));\n    col += brush * point(vec2(uv.x, (uv.y-h)/3.+h), vec2(.05 + log(13.)/3., h));\n    col += brush * point(vec2(uv.x, (uv.y-h)/3.+h), vec2(.05 + log(15.)/3., h));\n\n    h -= 0.05;\n    if (false)\n    {\n        brush = vec3(.1, .1, 1.);\n        \n        for (float i = 1.; i <= 16.; i += 1.)\n            col += brush * point(uv, vec2(log(i)/3.+.05 + log(1.5)/3., h));\n    }\n\n    brush = vec3(.2, 1., .2);\n    h -= 0.02;\n    for (float i = .05; i < 16.; i += log(2.)/3./12.)\n        col += brush * point(vec2(uv.x, (uv.y-h)/3.+h), vec2(i, h));\n\n    fragColor = vec4(col, 1.);\n\n}","name":"Image","description":"","type":"image"}]}