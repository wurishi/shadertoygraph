{"ver":"0.1","info":{"id":"llXSWf","date":"1440106057","viewed":267,"name":"voxel march test","username":"joeheacom","description":"This is a test to make sure that as I'm ray marching through voxels, given some line that passes through them, I hit every voxel on the way.  green=beginning.  red=end.  yellow=intersections on voxel boundaries.\n\nPause the shader to check coverage.","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["voxelmarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 center = iResolution.xy * 0.5;\n    float radius = min(iResolution.x,iResolution.y)*0.4;\n    vec2 spoke = vec2(cos(iTime),sin(iTime));\n    vec2 a = center + spoke * radius;\n    vec2 b = center + -spoke * radius;\n    \n\tif (length (fragCoord.xy - a) < 5.0)\n    {\n    \tfragColor = vec4(0,1,0,1);\n        return;\n    }\n\tif (length (fragCoord.xy - b) < 5.0)\n    {\n    \tfragColor = vec4(1,0,0,1);\n        return;\n    }\n\n    \n    vec2 ab= b-a;\n    float lengthAB = length(ab);\n    ab /= lengthAB;\n    \n    vec2 c = fragCoord.xy;\n    \n    vec2 ac = c-a;\n    float dotACAB = dot(ac,ab);\n    vec2 projAC = ab * dotACAB;\n    float lengthProjAC = length(projAC);\n    vec2 projC = projAC + a;\n    \n    if (length(c-projC) < 2.0 && lengthProjAC < lengthAB && dotACAB > 0.0)\n    {\n        fragColor = vec4(0,0,1,1);\n        return;\n    }\n    \n    const vec2 boxSize = vec2(70.0,40.0);\n    \n    vec2 boxCell = floor(fragCoord.xy / boxSize);\n    \n\tfragColor = vec4(boxCell*boxSize/iResolution.xy,0,1.0);\n    \n    //trace from a to b, finding all grid cells that intersect the line\n    \n    vec2 r0 = a;\n    \n    float lengthABSqr = lengthAB*lengthAB;\n    \n    \n    bool testX = abs(ab.x) > 1e-4;\n    bool testY = abs(ab.y) > 1e-4;\n    \n   \tvec2 currentTraceCell = floor(r0 / boxSize);\n    \n    //why can't I get my while loop to compile?  \n    //Or even a for loop with a regular while condition?  Instead I have to use an int iterator or it won't compile for me with 'unknown error'\n    //plus I have to use an arbitrary max loop value, which means my algorithm won't always trace to the end of the line depening on the grid size\n    //at least I can make the max value large and count on my break to exit the loop...but still\n    //while (dot(r0-a,r0-a) < lengthABSqr)\n    for (int i=0; i < 50; i++)\n    {\n    \tvec2 nextTraceCell = vec2(0,0);\n    \t\n    \tif (currentTraceCell == boxCell)\n       \t\tfragColor +=0.2;\n\n        \n        float t = 1e10;\n        float tempT = 1e10;\n        if (ab.x > 0.0 && testX)\n        {\n        \ttempT = -(-r0.x + (currentTraceCell.x+1.0)*boxSize.x) / (-ab.x);\n            if (tempT > 0.0)\n            {\n                t = tempT;\n                nextTraceCell = vec2(1,0);\n            }\n        }\n        if (ab.y > 0.0 && testY)\n        {\n        \ttempT = -(-r0.y + (currentTraceCell.y+1.0)*boxSize.y) / (-ab.y);\n            if (tempT < t && tempT > 0.0)\n            {\n                t = tempT;\n                nextTraceCell = vec2(0,1);\n            }\n        }\n        if (ab.x < 0.0 && testX)\n        {\n        \ttempT = -(r0.x - currentTraceCell.x*boxSize.x) / (ab.x);\n            if (tempT < t && tempT > 0.0)\n            {\n                t = tempT;\n                nextTraceCell = vec2(-1,0);\n            }\n            \n        }\n        if (ab.y < 0.0 && testY)\n        {\n        \ttempT = -(r0.y - currentTraceCell.y*boxSize.y) / (ab.y);\n            if (tempT < t && tempT > 0.0)\n            {\n                t = tempT;\n                nextTraceCell = vec2(0,-1);\n            }\n        }\n\t\tr0 = r0+t*ab; \n        currentTraceCell+=nextTraceCell;\n        \n        if (length (fragCoord.xy - r0) < 5.0)\n        {\n            fragColor = vec4(1,1,0,1);\n            return;\n        }\n        \n        \n        //can't get while loop to compile, so I have to have an int iterator and break instead\n        if (dot(r0-a,r0-a) > lengthABSqr)\n        {\n            break;\n        }\n    }\n    \n    \n}","name":"","description":"","type":"image"}]}