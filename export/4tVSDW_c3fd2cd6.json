{"ver":"0.1","info":{"id":"4tVSDW","date":"1484398433","viewed":415,"name":"Buddha","username":"guil","description":"I'm not a specialist, but I have the feeling that patience is a Buddist virtue.\nThis shader will give a very nice Buddhabrot ... after an infinite amount of time!","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["2d","fractal","buddhabrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;    \n    vec4 col = texture(iChannel0, uv)+texture(iChannel0, vec2(1.-uv.x,uv.y));\n    col = clamp(col*6.,0.,1.);\n    fragColor = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define ITER 256\n#define ITER2 40\n\nfloat seed = 0.;\nfloat iter = float(ITER);\n\n\nfloat rand() { return fract(sin(seed++)*62758.5453123); }\n\nvec2 csqr( vec2 a ) { return vec2(a.x*a.x-a.y*a.y, 2.0*a.x*a.y ); }\n\n\nbool skipCardioid(vec2 p){\n\t\n\tvec2 n = p*p;\n\tfloat q = n.x - p.x/2.0 + 0.125 + n.y;\n\t//skip main cardioid\n\tif (q * (q + (p.x - 0.25)) < n.y*0.25)return true;\n\t//skip left sphere \n\tif (n.x + 2.0*p.x + n.y < -0.9375)return true;\n\treturn false;\n}\n\n\nvec3 mandel(vec2 p,vec2 c){\n\t\n\tif(skipCardioid(c))return vec3(0.);\n\tvec2 z= c;\t\n\tfloat r2=0.;\n\tfloat ot=10.;\n    float sqrRes = iResolution.x*iResolution.x;\n\tfor(int i = 0; i<ITER;i++){\n\t\tz=csqr(z)+c;\t\t\n\t\tfloat ot1=dot(z-p,z-p);\n        r2=dot(z,z);\n\t\tif(r2>4.){\n\t\t\tfloat it=float(i)/iter;\n            //if(ot>9./sqrRes)return vec3(0.);\n\t\t\t//return it*vec3((1.-it)*.5,0.5*it,it)*min(sqrRes,exp((9.-ot*sqrRes)*64. ))*.125;\n            return it*vec3((1.-it)*.5,.5*it,it)*min(1.,exp((9.-ot*sqrRes)*.1))*5.*iResolution.x;\n\t\t}\n\t\tot=min(ot,ot1);\t\t\n\t}\n\treturn vec3(0.);\n}\n\t\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 previous = texture(iChannel0, (fragCoord)/iResolution.xy);\n    seed = iTime;\n    vec3 color = previous.rgb;    \n\tvec2 p = 1.5*(iResolution.yx-2.0*fragCoord.yx)/iResolution.y;\n    for(int i = 0; i<ITER2;i++){\n\t\tvec2 c= 2.*vec2(rand(),1.-rand())-1.;\n\t\tc.x=c.x*1.5-.5;\n\t\tfloat k = exp(-iTime*0.005-9.);\n        color = (1.-k)*color+k*mandel(p,c).bgr;\n    }\n    fragColor = vec4(color,1.0);\n}\n\n\n\n\n","name":"Buf A","description":"","type":"buffer"}]}