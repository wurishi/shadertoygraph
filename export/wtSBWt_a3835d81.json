{"ver":"0.1","info":{"id":"wtSBWt","date":"1600118860","viewed":100,"name":"Wispy Tendrils of Light","username":"Oberdiah","description":"Just a simple test with perlin noise.","likes":10,"published":1,"flags":32,"usePreview":0,"tags":["noise","simple","light","shiny"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 posFloat ) { \n    vec2 uv = posFloat.xy / iResolution.xy;\n    uv.y *= 0.9;\n    uv.y += 0.1;\n\n    vec2 oldUv = uv;\n    \n    int size = 100;\n    float offset = (float(size)/1000.);\n    \n    fragColor = texture(iChannel0, vec2(uv.x, uv.y - offset));\n\n    for (int i = 0; i < size; i++) {\n        vec2 newUv = vec2(uv.x, uv.y + float(i)/1000. - offset);\n        fragColor += texture(iChannel0, newUv)/float(i+1);\n    }\n    \n    fragColor += vec4(0.12, 0.0, 0.08, 0.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 outColor, in vec2 posFloat ) {\n    ivec2 pos = ivec2(posFloat/6.);\n    \n    pos.y += int(noise(posFloat/100.)*50.);\n    \n    vec3 col = vec3(0,0,0);\n    \n    for (int i = 0; i < 3; i++) {\n        pos.x += 1;\n        \n        if (pos.x % 10 == 0 && pos.y % 10 == 0) {\n            col = vec3(1, 0.141 + float(i)/3., 0.521);\n        }\n    }\n\n    outColor = vec4(col, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 posFloat ) { \n    vec2 oldPosFloat = posFloat;\n    \n    posFloat.y -= 10000.;\n    posFloat.x += sin(posFloat.y/50.)*50.;\n    posFloat.x += noise(posFloat/200. + iTime/2.0)*200.;\n    posFloat += noise(oldPosFloat/500.)*500.;\n    \n    vec2 uv = posFloat.xy / iResolution.xy;\n    \n    fragColor = texture(iChannel0, uv);\n}\n","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"vec2 hash( vec2 x ) {\n    const vec2 k = vec2( 0.3183099, 0.3678794 );\n    x = x*k + k.yx;\n    return -1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) );\n}\n\nfloat noise( in vec2 p ) {\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n    \n    vec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( hash( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), \n                     dot( hash( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( hash( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), \n                     dot( hash( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n","name":"Common","description":"","type":"common"}]}