{"ver":"0.1","info":{"id":"XttSDX","date":"1481851301","viewed":128,"name":"ShaderNight - Procedural Shapes","username":"inantop","description":"Shader night","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tutorial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool isOnLine(in vec2 fragCoord, in vec2 lineAsSlopeAndYIntercept)\n{\n    //Remember the equation of a line: y = mx + b\n    return (fragCoord.y == (fragCoord.x * lineAsSlopeAndYIntercept.x + lineAsSlopeAndYIntercept.y));\n}\n\nbool isBelowLine(in vec2 fragCoord, in vec2 lineAsSlopeAndYIntercept)\n{\n    //If y = mx + b it's on the line, if y < mx + b it's below the line!\n    return (fragCoord.y < (fragCoord.x * lineAsSlopeAndYIntercept.x + lineAsSlopeAndYIntercept.y));\n}\n\nbool isInCircle(in vec2 fragCoord, in vec2 circleOrigin, in float circleRadius)\n{\n    //A filled circle is described by all points within a distance of an origin.\n    float distanceFromOrigin = length(fragCoord - circleOrigin);\n    return distanceFromOrigin <= circleRadius;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    fragColor = vec4(0.0, 0.0, 0.0, 0.0); //Solid black to start with. We will add influence from the shapes below.\n    \n    //Using the function we defined above, let's test if this pixel lies on the line y = x\n    if(isOnLine(fragCoord, vec2(1.0, 0.0)))\n    {\n        fragColor += vec4(1.0, 0.0, 0.0, 1.0); //Solid red\n    }\n    \n    if(isInCircle(fragCoord, vec2(iResolution.xy / 2.0), 50.0))\n    {\n        fragColor += vec4(0.0, 1.0, 0.0, 1.0); //Solid green\n    }\n    \n    if(isBelowLine(fragCoord, vec2(1.0, 0.0)))\n    {\n        fragColor += vec4(0.0, 0.0, 1.0, 1.0); //Solid blue\n    }\n}","name":"Image","description":"","type":"image"}]}