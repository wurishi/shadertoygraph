{"ver":"0.1","info":{"id":"XdjBWV","date":"1502249763","viewed":200,"name":"Sugar3000","username":"bru","description":"A vortex of squishy, rainbow-colored blobs.","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265358979323\n#define RAYS 11.0\n#define PROB 0.75\n#define SIZE 0.45\n\n\nfloat random (vec2 st) {\n    return fract(sin(dot(st, vec2(12.5629849,78.1384))) * 41631.4232);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 p = fragCoord.xy / iResolution.xy - vec2(0.5, 0.5);\n\tp.x *= iResolution.x / iResolution.y;\n    float t = iTime - 10.0;\n    \n    float dist = length(p);\n    float angle = atan(p.y, p.x) + PI;\n  \n    // create, subdivide vortex\n    float angle_2 = angle * RAYS / PI + cos(dist * 15.0) * cos(t * 0.5) * (0.5 / (dist + 0.1));\n    \n    float cell_angle = mod(floor(angle_2), RAYS * 2.0);\n    float cell_dist = pow(dist, 0.6) * 10.0 - (t + 0.5) * (mod(cell_angle, 2.0) - 0.5) * (0.4 + 0.6 * random(vec2(cell_angle + 0.1)));\n\n    float s = abs(floor(cell_dist));\n    float c = length(vec2(abs(fract(angle_2) - 0.5),\n                          abs(fract(cell_dist)) - 0.5));\n    // anti-aliasing\n    float eps = 10.0 / (dist * PI * iResolution.y);\n    \n    float mask = 1.0 - smoothstep(SIZE - eps, SIZE + eps, c);\n    mask *= step(random(vec2(s, cell_angle)), PROB);\n    \n    // rainbow\n    float col_ang = cell_angle * PI / RAYS;\n\tvec3 col = cos(vec3(col_ang) + vec3(0.0, 2.0/3.0, 4.0/3.0) * PI) * 0.5 + 0.5;\n\n    // normal\n    mat2 rot = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n    vec2 n2 = rot * vec2(fract(angle_2) - 0.5, fract(cell_dist) - 0.5);\n    vec3 norm = normalize(vec3(n2, cos(c / SIZE * 0.5 * PI)));\n    \n    // lights\n    vec3 l1 = clamp(dot(normalize(vec3(-1.0, 0.0, 0.0)), norm), 0.0, 1.0) * vec3(0.6, 0.9, 0.95);\n    vec3 l2 = pow(clamp(dot(normalize(vec3(0.0, -1.0, 1.0)), norm), 0.0, 1.0), 16.0) * vec3(0.95, 0.9, 0.6);\n    \n\tfragColor = vec4(mix(vec3(1.0), col + 0.5 * l1 + l2, mask), 1.0);\n\n    // gamma correction\n    fragColor.xyz = pow(fragColor.rgb, vec3(1.0/2.2));\n}","name":"Image","description":"","type":"image"}]}