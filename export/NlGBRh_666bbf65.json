{"ver":"0.1","info":{"id":"NlGBRh","date":"1664260072","viewed":186,"name":"Menger sponge ray marching","username":"OstrichDog","description":"(some kind of) Menger sponge rendered through raymarching","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 camPos = vec3(0., 0., -3.5);\nfloat screenDist = 1.;\nfloat minDist = 0.01;\nfloat maxDist = 100.;\n\nvec3 lightPos = vec3(0., 3., -3.);\n\nint maxSteps = 1000;\nfloat distanceHit = 0.005;\n\nmat2 rotate(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat smoothMin(float a, float b, float k) {\n    float h = max(k-abs(a-b), 0.0) / k;\n\treturn min(a, b) - h*h*k*(1.0 / 4.0);\n}\n\nfloat sdPlane(vec3 p, float height) {\n    return max(p.y - height, 0.) + min(p.y - height, 0.);\n}\n\nfloat sdBox(vec3 p, vec3 size) {\n    float scale = 1.;\n    p.xz *= rotate(iTime*0.6 + 3.1415);\n    p+=vec3(-1., 1.,-1.);\n\n    p/=4.;\nfor(int i=0; i<4; i++) {\n    scale*=3.2;\n    p*=4.;\n    \n    float dist = dot(p+1., normalize(vec3(1., 0., 0)));\n    p -= 2.*normalize(vec3(1.,0.05,0.))*min(0., dist);\n\n    dist = dot(p+1., normalize(vec3(0.05, -1., 0))) + 2.;\n    p -= 2.*normalize(vec3(0.,-1.,0.))*min(0., dist);\n\n    dist = dot(p+1., normalize(vec3(0., 0.2+sin(iTime/2.)*0.2, 1.))) + 0.;\n    p -= 2.*normalize(vec3(0.1+cos(iTime)*0.1, 0.2+sin(iTime/2.)*0.2,1.))*min(0., dist);\n\n    dist = dot(p, normalize(vec3(1, 1, 0)));\n    p -= 2.*normalize(vec3(1.,1.,0.))*min(0., dist);\n\n    dist = dot(p, normalize(vec3(0, 1, 1)));\n    p -= 2.*normalize(vec3(0.,1.1,1.))*min(0., dist);\n\n    dist = dot(p, normalize(vec3(0.15, -1., 0))) + 0.5;\n    p -= 2.*normalize(vec3(0.,-1.,0.))*min(0., dist);\n   \n}\n    \n    \n   // pos -= vec3(1.);\n    float d = length(max(abs(p) - size, 0.));\n    \n    return d/scale;\n}\n\nfloat getDist(vec3 p) {\n    float dPlane = sdPlane(p, -10.);\n    float dCube = sdBox(p, vec3(.5));\n    \n    float d = min(dCube, dPlane);\n    return d;\n}\n\nfloat march(vec3 ro, vec3 rd, float startDist) {\n    float dist = startDist;\n    for (int i=0; i<maxSteps; i++){\n        float newDist = getDist(ro + rd*dist);\n        dist += newDist;\n        if (newDist <= distanceHit || dist >= maxDist) break;\n    }\n    return dist;\n}\n\nvec3 getNormal(vec3 p) {\n    float d = getDist(p);\n    vec2 e = vec2(0.01, 0.);\n    \n    vec3 n = d - vec3(\n        getDist(p - e.xyy),\n        getDist(p - e.yxy),\n        getDist(p - e.yyx)\n    );\n    //return n/e.x;\n    return normalize(n);\n}\n\nfloat light(vec3 p) {\n    vec3 l = normalize(lightPos-p);\n    vec3 n = getNormal(p);\n    float dif = dot(n, l);\n    \n    float dist = march(p+n*distanceHit*1.5, l, 0.);\n    float shadow = clamp(dist / length(lightPos - p), 0., 1.);\n    \n    return dif * shadow;\n}\n\nvec3 getColor(vec3 p) {\n    vec3 colCube =  vec3(1., 0.8, 1.);\n    \n    vec3 finalColor;\n    \n    finalColor = colCube;\n    \n    return finalColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n\n    vec3 ro = camPos;\n    vec3 rd = normalize(vec3(uv.x, uv.y, screenDist));\n\n    float dist = march(ro, rd, minDist);\n    \n    vec3 p = ro + rd * dist;\n\n\n    float dif = light(p);\n    col = getColor(p) * dif;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}