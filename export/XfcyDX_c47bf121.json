{"ver":"0.1","info":{"id":"XfcyDX","date":"1732268981","viewed":33,"name":"boltzmann machine real time","username":"Arbethi","description":"Restricted Boltzmann machine applied on real time video\n","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["boltzmann","neuralnetwork","rbm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nRestricted Boltzmann machine but with slight modification :\n- Applied on real time video : training and inference done once per frame\n- No contrastive learning, just hebbian rules\n- Clamp weights values in [-1,1]\nRessources : https://www.youtube.com/watch?v=_bqa_I5hNAo&t=988s\nBuffer A : Hidden Node update (left)\nBuffer B : Weights update (middle)\nBuffer C : Visible Node from video pixelized and binarized (right)\n\nParameters\nscale : pixels resolution per row, should be inferior to 18 so that weights fit in a frame (18*18=324<360)\nT : Temperature, how deterministic is activation function\nC : subdivisions of hidden node values : 1 : 2 values {-1,1}, 2: {-1,0,1}, ...\n\nControls\nmouse horizontal : temperature (left deterministic/low T, right lot of randomness/high T)\nmouse vertical : learning rate (down : high lr, up : low lr)\nleft bottom area gives better results\n*/\n\nvoid mainImage( out vec4 Q, in vec2 U )\n{\n    vec2 uv = U/R;\n    uv.y*=3.;\n    uv.y-=1.;\n    float x;\n    if (uv.x < 1./3.)\n    {\n        uv.x*=3.;\n        x=A(uv).x;\n    }\n    \n    else if (uv.x < 2./3.)\n    {\n        uv.x=uv.x-1./3.;\n        uv.x*=3.;\n        x=B(uv).x;\n        x=-log(x+1.);\n    }\n    \n    else if (uv.x < 1.)\n    {\n        uv.x=uv.x-2./3.;\n        uv.x*=3.;\n        x=C(uv).x;\n    }\n        Q=vec4(x);\n    if (uv.y<0. || uv.y>1.) Q=vec4(0.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Layer1 (bufferA)\n// xi in {-1,1}\n// xi+=sigmoid(sum(xj*wj))\n\nfloat sigmoid(float x, float T)\n{\n    return 1./(1.+exp(-x/T));\n}\nfloat activation(float z, float T, vec2 uv)\n{\n    float r=hash12(z*uv+t*uv*z);\n    float p=sigmoid(z, T);\n    //if (p>=r) return 1.;\n    if (p>=0.1) return 1.;\n    else return -1.;\n}\nvoid mainImage( out vec4 Q, in vec2 U )\n{\n    vec2 uv = U/R;\n    uv=floor(uv*scale)/scale;\n    \n    float T=iMouse.x/iResolution.x;\n    T=2.*pow(T,5.);\n    //T=exp(5.*(1.-2.*T));\n    \n    float w_idx, i_idx = c2i(uv, scale);\n    float xj, wij, zi = 0.;\n    vec2 j_coord, w_coord;\n    for(float j_idx=0.;j_idx<scale*scale;j_idx+=1.)\n    {\n        if (i_idx==j_idx) continue;\n        j_coord=i2c(j_idx,scale);\n        w_coord=vec2(i_idx, j_idx)/(scale*scale);\n        wij=B(w_coord).x;\n        xj=2.*C(j_coord).x-1.;\n        zi+=wij*xj;\n    } \n    float xi=activation(zi,T,uv);\n    //Q.x=A(uv).x+xi/C;\n    Q.x = clamp(xi,0.,1.);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define A(U) texture(iChannel0,U)\n#define B(U) texture(iChannel1,U)\n#define C(U) texture(iChannel2,U)\n#define D(U) texture(iChannel3,U)\n#define R iResolution.xy\n#define t iTime\n//#define T iMouse.x/iResolution.x\n\nconst float scale=18.;\nconst float C=1.;\n//const float T=1.9;\n\nfloat hash12(vec2 uv)\n{\n    return fract(sin(dot(uv,vec2(1234.,4321.)))*98765.);\n}\n\nfloat c2i(vec2 uv, float w) \n{\n    // coordinate to index\n    // uv in [0,1]²\n    uv=uv*w;// uv in [0,w]²\n    return uv.x*w+mod(uv.y,w); // index in [0,w²]\n}\nvec2 i2c(float i_idx, float w)\n{\n    // index to coordinate\n    //i_idx in [0,w²]\n    float x_coord=floor(i_idx/w); // x_coord in [0,w]\n    float y_coord=mod(i_idx,w); // y_coord in [0,w]\n    return vec2(x_coord, y_coord)/w; //coord in [0,1]²\n}\n\n\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Weight1 (bufferB)\n// W += lr*xi*xj\nconst float L=1.;\nvoid mainImage( out vec4 Q, in vec2 U )\n{\n    vec2 uv = U/R;\n    uv=floor(uv*scale*scale)/(scale*scale);\n    \n    float lr=iMouse.y/R.y;\n    lr=10.*exp(-4.*lr-1.);\n    \n    if (iFrame==0) Q.x=hash12(uv);\n    else\n    {\n        float i_idx=uv.x*scale*scale;\n        float j_idx=uv.y*scale*scale;\n        vec2 xi_coord=i2c(i_idx,scale);\n        vec2 xj_coord=i2c(j_idx,scale);\n        float xi=2.*C(xi_coord).x-1.;\n        float xj=2.*C(xj_coord).x-1.;\n        float wij=B(uv).x;\n        wij+=lr*xi*xj;\n        wij=clamp(wij,-L,L);\n        Q.x=wij;\n    }\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// input (bufferC)\nvoid mainImage( out vec4 Q, in vec2 U )\n{\n    vec2 uv = U/R;\n    uv=floor(uv*scale)/scale;\n    Q.x=step(0.7,A(uv).x);\n}","name":"Buffer C","description":"","type":"buffer"}]}