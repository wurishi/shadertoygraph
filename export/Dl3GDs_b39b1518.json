{"ver":"0.1","info":{"id":"Dl3GDs","date":"1683300861","viewed":119,"name":"Inv Bilinear Checkerboard","username":"IIIMADDINIII","description":"Shows the effect of the Inverse Bilinear interpolation with a checkerboard;\nPress R for resetting to start position","likes":3,"published":1,"flags":48,"usePreview":0,"tags":["math","bilinear","visulasations"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define M_PI 3.1415926535897932384626433832795\n\nvec2 GetVarPos(int v) {\n  float vf = float(v);\n  vec2 xy = vec2(mod(vf, iChannelResolution[0].x),\n                 floor(vf / iChannelResolution[0].x));\n  xy += vec2(0.5);\n  xy /= iChannelResolution[0].xy;\n  return xy;\n}\n\nvec4 GetVar(int v) {\n  return texture(iChannel0, GetVarPos(v));\n}\n\n// https://stackoverflow.com/questions/808441/inverse-bilinear-interpolation/18332009#18332009\nvec2 invBilinear( in vec2 p, in vec2 p1, in vec2 p2, in vec2 p3, in vec2 p4 ) {\n    float ss = 0.5;\n    float tt = 0.5;\n    for (int k=1; k <= 5; k++) {\n        float r1 = p1.x*(1.0-ss)*(1.0-tt) + p2.x*ss*(1.0-tt) + p3.x*ss*tt + p4.x*(1.0-ss)*tt - p.x;\n        float r2 = p1.y*(1.0-ss)*(1.0-tt) + p2.y*ss*(1.0-tt) + p3.y*ss*tt + p4.y*(1.0-ss)*tt - p.y;\n\n        float J11 = -p1.x*(1.0-tt) + p2.x*(1.0-tt) + p3.x*tt - p4.x*tt;\n        float J21 = -p1.y*(1.0-tt) + p2.y*(1.0-tt) + p3.y*tt - p4.y*tt;\n        float J12 = -p1.x*(1.0-ss) - p2.x*ss       + p3.x*ss + p4.x*(1.0-ss);\n        float J22 = -p1.y*(1.0-ss) - p2.y*ss       + p3.y*ss + p4.y*(1.0-ss);\n\n        float inv_detJ = 1.0/(J11*J22 - J12*J21);\n\n        ss = ss - inv_detJ*( J22*r1 - J12*r2);\n        tt = tt - inv_detJ*(-J21*r1 + J11*r2);\n    }\n    return vec2(ss, tt);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord/iResolution.x;\n    int nextPoint = int(GetVar(0).x)+1;\n    if (nextPoint >= 5) {\n      nextPoint = 1;\n    }\n    \n    // background\n    vec3 col = vec3( 0.5 );\n\n    // move points\n    vec2 a = GetVar(1).xy / iResolution.x;\n    vec2 b = GetVar(2).xy / iResolution.x;\n    vec2 c = GetVar(3).xy / iResolution.x;\n    vec2 d = GetVar(4).xy / iResolution.x;\n    \n    // area of the quad\n    vec2 uv = invBilinear( p, a, b, c, d );\n    vec2 pos = floor(uv*10.0);\n    // inside of quad if uv in [0..1]^2\n    if(max( abs(uv.x-0.5), abs(uv.y-0.5))<0.5) {\n        col = vec3(mod(pos.x + mod(pos.y, 2.0), 2.0));\n    } else {\n        col = vec3(mod(pos.x + mod(pos.y, 2.0), 2.0))*0.1 + 0.45;\n    }\n    \n    if (distance(a, p) < 4.0/iResolution.x) {\n      col = vec3(1.0, 0.0, 0.0);\n    }\n    \n    if (distance(b, p) < 4.0/iResolution.x) {\n      col = vec3(0.0, 1.0, 0.0);\n    }\n    \n    if (distance(c, p) < 4.0/iResolution.x) {\n      col = vec3(0.0, 0.0, 1.0);\n    }\n    \n    if (distance(d, p) < 4.0/iResolution.x) {\n      col = vec3(1.0, 1.0, 0.0);\n    }\n\n\tfragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// This function returns where in iChannel0, the position of ball \"v\" is.\nvec2 GetVarPos(int v) {\n  float vf = float(v);\n  vec2 xy = vec2(mod(vf, iChannelResolution[0].x),\n                 floor(vf / iChannelResolution[0].x));\n  xy += vec2(0.5);\n  xy /= iChannelResolution[0].xy;\n  return xy;\n}\n\n// Given a position in iChannel0, return which ball position is stored there.\nint GetVarIndex(vec2 xy) {\n  xy *= iChannelResolution[0].xy;\n  xy = floor(xy);\n  return int(xy.x + xy.y * iChannelResolution[0].x);\n}\n\nvec4 GetVar(int v) {\n  return texture(iChannel0, GetVarPos(v));\n}\n\nfloat toFloat(bool b) {\n  if (b) return 1.0;\n  return 0.0;\n}\n\nbool fromFloat(float f) {\n  return f > 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    int var = GetVarIndex(uv);\n    bool init = false;\n    if (var < 0 || var > 4) discard;\n    int point = int(GetVar(0).x);\n    bool wasClicked = fromFloat(GetVar(0).y);\n    vec2 clickOffset = GetVar(0).zw;\n    bool clicked = sign(iMouse.z) > 0.5;\n    if (point < 1) {\n      init = true;\n      point = 1;\n    }\n    fragColor = texture(iChannel0, uv);\n    if (!init && (texelFetch( iChannel1, ivec2(82,1),0 ).x < 0.5)) {\n        if (clicked && !wasClicked) {\n          if (var == 0) {\n            // Find closest point in reach\n            int point = 5;\n            float sdist = 100.0;\n            vec2 offset = vec2(0.0);\n            for (int i = 1; i <= 4; i++) {\n              float dist = distance(iMouse.xy, GetVar(i).xy);\n              if ((dist < 20.0) && (dist < sdist)) {\n                point = i;\n                sdist = dist;\n                offset = GetVar(i).xy - iMouse.xy; \n              }\n            }\n            fragColor = vec4(float(point), toFloat(clicked), offset);\n          }\n        } else {\n          if ((var == point) && clicked) {\n            fragColor = abs(iMouse) + vec4(clickOffset.xy, 0.0, 0.0);\n          } else if (var == 0) {\n            fragColor = vec4(float(point), toFloat(clicked), clickOffset);\n          }\n        }\n    } else {\n      float xs, xe, ys, ye;\n      if (iResolution.x >= iResolution.y) {\n        ys = 0.1*iResolution.y;\n        ye = 0.9*iResolution.y;\n        xs = (iResolution.x - ye+ys)/2.0;\n        xe = xs - ys+ye;\n      } else {\n        xs = 0.1*iResolution.x;\n        xe = 0.9*iResolution.x;\n        ys = (iResolution.y - xe+xs)/2.0;\n        ye = ys - xs+xe;\n      }\n      if (var == 0) {\n        fragColor = vec4(float(5), toFloat(false), 0.0, 0.0);\n      } else if (var == 1) {\n        fragColor = vec4(xs, ys, 0.0, 0.0);\n      } else if (var == 2) {\n        fragColor = vec4(xs, ye, 0.0, 0.0);\n      } else if (var == 3) {\n        fragColor = vec4(xe, ye, 0.0, 0.0);\n      } else {\n        fragColor = vec4(xe, ys, 0.0, 0.0);\n      }\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}