{"ver":"0.1","info":{"id":"McKyRW","date":"1731672180","viewed":67,"name":"ShaderAmp DodecaIcosaStellations","username":"ArthurTent","description":"Example on YT: https://www.youtube.com/watch?v=8FmvUGyTrwc\nShaderAmp version is currently available in 'dev/more-shaders' branch.\nhttps://github.com/ArthurTent/ShaderAmp/tree/dev/more-shaders/dist/shaders","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["wireframe","lines","icosahedron","dodecahedron","stellation","shaderamp","samp"],"hasliked":0,"parentid":"McsXz8","parentname":"Dodeca, icosa & stellations"},"renderpass":[{"inputs":[{"id":"4sXGzn","filepath":"/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","previewfilepath":"/media/ap/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/McsXz8\n// Modified by ArthurTent\n// Created by ChunderFPV\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// https://creativecommons.org/licenses/by-nc-sa/3.0/\n\nfloat MAX = 0.5;\n// wireframe code from FabriceNeyret2: https://www.shadertoy.com/view/XfS3DK\n#define FFT(a) pow(texelFetch(iChannel0, ivec2(a, 0), 0).x, 5.)\n#define O(x,a,b) smoothstep(0., 1., cos(x*6.2832)*.5+.5)*(a-b)+b  // oscillate between a & b\n#define A(v) mat2(cos((v*3.1416) + vec4(0, -1.5708, 1.5708, 0)))  // rotate\n#define s(p1, p2) c += .02/abs(L( u, K(p1, v, h), K(p2, v, h) )+.01)*k;  // segment\nfloat snd = 0.;\nfloat snd2 = 0.;\nconst float PI = 3.1415926;\n// MIT Licensed hash From Dave_Hoskins (https://www.shadertoy.com/view/4djSRW)\nvec3 hash33(vec3 p)\n{\n    p = fract(p * vec3(443.8975,397.2973, 491.1871));\n    p += dot(p.zxy, p.yxz+19.27);\n    return fract(vec3(p.x * p.y, p.z*p.x, p.y*p.z));\n}\n\nvec3 stars(in vec3 p)\n{\n    vec3 c = vec3(0.);\n    float res = iResolution.x*0.8;\n    \n\tfor (float i=0.;i<4.;i++)\n    {\n        vec3 q = fract(p*(.15*res))-0.5;\n        //q*= snd/10.;\n        vec3 id = floor(p*(.15*res));\n        vec2 rn = hash33(id).xy;\n        float c2 = 1.-smoothstep(0.,.6,length(q));\n        c2 *= step(rn.x,.0005+i*i*0.001);\n        c += c2*(mix(vec3(1.0,0.49,0.1),vec3(0.75,0.9,1.),rn.y)*0.25+0.75);\n        p *= 1.4;\n    }\n    return c*c*.65;\n}\nvoid camera(vec2 fragCoord, out vec3 ro, out vec3 rd, out mat3 t)\n{\n    float a = 1.0/max(iResolution.x, iResolution.y);\n    //rd = normalize(vec3((fragCoord - iResolution.xy*0.5)*a, 0.5));\n    rd = normalize(vec3(fragCoord, 1.0));\n\n    ro = vec3(0.0, 0.0, -15.);\n\n    //float ff = min(1.0, step(0.001, iMouse.x) + step(0.001, iMouse.y));\n    float ff = min(1.0, step(0.001, iMouse.x) + step(0.001, iMouse.y))+sin(iTime/20.);\n    vec2 m = PI*ff + vec2(((iMouse.xy + 0.1) / iResolution.xy) * (PI*2.0));\n    //m.y = -m.y;\n    m.y = sin(m.y*0.5)*0.3 + 0.5;\n\n    //vec2 sm = sin(m)*sin(iTime), cm = cos(m)*(1.+sin(iTime));\n    vec2 sm = sin(m)*(1.+sin(iTime/10.)/2.), cm = cos(m);\n    mat3 rotX = mat3(1.0, 0.0, 0.0, 0.0, cm.y, sm.y, 0.0, -sm.y, cm.y);\n    mat3 rotY = mat3(cm.x, 0.0, -sm.x, 0.0, 1.0, 0.0, sm.x, 0.0, cm.x);\n\n    t = rotY * rotX;\n\n    ro = t * ro;\n    rd = t * rd;\n\n    rd = normalize(rd);\n}\n// line\nfloat L(vec2 p, vec3 A, vec3 B)\n{\n    vec2 a = A.xy, \n         b = B.xy - a;\n         p -= a;\n    float h = clamp(dot(p, b) / dot(b, b), 0., 1.);\n    if(snd2>MAX)snd2=MAX;\n    return length(p - b*h)*(0.9-snd2*1.9) + .01*mix(A.z, B.z, h)*(1.+snd2);\n    //return length(p - b*h)*(0.8-snd2*1.9+FFT(25)+(FFT(1))) + .01*mix(A.z, B.z, h)*(1.+snd2);\n}\n\n\n// colormap\nvec3 palette(float t) {\n    if(t <1.)t+=1.;\n    vec3 a = vec3(0.5);\n    vec3 b = vec3(0.5);\n    vec3 c = vec3(1.);\n    //vec3 d = vec3(0.563,0.416,0.457 + .2);\n    vec3 d = vec3(0.563,0.416,0.257 + .2);\n    \n    //return a + b*cos( 6.28 * c * (t+d)); // A + B * cos ( 2pi * (Cx + D) )\n    return a + b*cos( 6.28 * c * (t+d)); // A + B * cos ( 2pi * (Cx + D) )\n}\n// cam\nvec3 K(vec3 p, mat2 v, mat2 h)\n{\n    p.zy *= v; // pitch\n    p.zx *= h; // yaw\n    if (texelFetch(iChannel0, ivec2(80, 2), 0).x < 1.) // P key\n        p *= 6. / (p.z+6.); // perspective view\n    return p;\n}\n\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    vec2 R = iResolution.xy,\n         u = (U+U-R)/R.y*2.,\n         m = (iMouse.xy*2.-R)/R.y;\n    int max_freq = 100;\n    for(int i=1; i < max_freq; i++){\n        snd +=FFT(i)*float(i);\n        //snd +=FFT(i);\n    }\n    snd /=float(max_freq*20);\n    //snd /=float(max_freq);\n    //snd*=2.8;\n    //snd*=1.8;\n    //snd*=1.6;\n    snd2 = snd*1.3;\n    //snd*=2.;\n    vec2 cam_uv = u;//-1.0 + 2.0 *vUv;\n    \n\t//camera + rd for stars\n    vec3 ro = vec3(0.0);//rd = vec3( 0.0 );\n\tvec3 rd = normalize(vec3(cam_uv,-1.5));\n    mat3 t3 = mat3(1.0);\n\tcamera(cam_uv, ro, rd, t3);\n \n    \n    \n    float t = iTime/60.,\n          o = t*6.,\n          //o = t*3.*snd2,\n          j = (u.x > 0.) ? 1.: -1.; // screen side\n    /*\n    if (iMouse.z < 1.) // not clicking\n        m = vec2(sin(t*6.2832)*2., sin(t*6.2832*2.)); // fig-8 movement\n    */\n    mat2 v = A(m.y), // pitch\n         h = A(m.x); // yaw\n    \n    vec3 c = vec3(0), p, \n         k = vec3(2,1,4)/40. + .05;\n    \n    //u.x -= j + j*.7; // split screen\n    u.x+=sin(iTime/4.)/10.;\n    u.y+=sin(iTime/4.)/10.;\n    //u*=.5+(sin(iTime/10.))/2.;\n    u*=1.-(sin(iTime/10.))/2.;\n    snd2*=1.1;\n    {\n        //p = vec3(0, .618, 1);  // stellated dodecahedron\n        //p = vec3(0, 1, -.618); // icosahedron\n        \n        // stella dodeca to icosa\n        p = vec3(0, O(o, .618, 1.), O(o, 1., -.618));\n        //p.z+=(1.+FFT(1));\n        p.x+=sin(iTime);\n\ts( vec3(-p.y+FFT(1),  p.z+snd2,    0), vec3(   0, -p.y+FFT(1), -p.z) )\n        s( vec3(-p.y+FFT(1),  p.z+snd2,    0), vec3(   0, -p.y+FFT(1),  p.z+snd2) )\n        s( vec3(-p.y+FFT(1),  p.z+snd2,    0), vec3( p.z+snd2,    0, -p.y+FFT(1)) )\n        s( vec3(-p.y+FFT(1),  p.z+snd2,    0), vec3( p.z+snd2,    0,  p.y*snd2) )\n        s( vec3( p.y*snd2,  p.z+snd2,    0), vec3( p.y*snd2, -p.z,    0) )\n        s( vec3( p.y*snd2,  p.z+snd2,    0), vec3(   0, -p.y+FFT(1), -p.z) )\n        s( vec3( p.y*snd2,  p.z+snd2,    0), vec3(   0, -p.y+FFT(1),  p.z+snd2) )\n        s( vec3( p.y*snd2,  p.z+snd2,    0), vec3(-p.z,    0, -p.y+FFT(1)) )\n        s( vec3( p.y*snd2,  p.z+snd2,    0), vec3(-p.z,    0,  p.y*snd2) )\n        s( vec3(-p.y+FFT(1), -p.z,    0), vec3(-p.y+FFT(1),  p.z+snd2,    0) )\n        s( vec3(-p.y+FFT(1), -p.z,    0), vec3(   0,  p.y*snd2, -p.z) )\n        s( vec3(-p.y+FFT(1), -p.z,    0), vec3(   0,  p.y*snd2,  p.z+snd2) )\n        s( vec3(-p.y+FFT(1), -p.z,    0), vec3( p.z+snd2,    0, -p.y+FFT(1)) )\n        s( vec3(-p.y+FFT(1), -p.z,    0), vec3( p.z+snd2,    0,  p.y*snd2) )\n        s( vec3( p.y*snd2, -p.z,    0), vec3(   0,  p.y*snd2, -p.z) )\n        s( vec3( p.y*snd2, -p.z,    0), vec3(   0,  p.y*snd2,  p.z+snd2) )\n        s( vec3( p.y*snd2, -p.z,    0), vec3(-p.z,    0, -p.y+FFT(1)) )\n        s( vec3( p.y*snd2, -p.z,    0), vec3(-p.z,    0,  p.y*snd2) )\n        s( vec3(   0,  p.y*snd2, -p.z), vec3(   0,  p.y*snd2,  p.z+snd2) )\n        s( vec3(   0,  p.y*snd2, -p.z), vec3( p.z+snd2,    0,  p.y*snd2) )\n        s( vec3(   0,  p.y*snd2, -p.z), vec3(-p.z,    0,  p.y*snd2) )\n        s( vec3(   0, -p.y+FFT(1), -p.z), vec3(   0, -p.y+FFT(1),  p.z+snd2) )\n        s( vec3(   0, -p.y+FFT(1), -p.z), vec3( p.z+snd2,    0,  p.y*snd2) )\n        s( vec3(   0, -p.y+FFT(1), -p.z), vec3(-p.z,    0,  p.y*snd2) )\n        s( vec3(-p.z,    0, -p.y+FFT(1)), vec3( p.z+snd2,    0, -p.y+FFT(1)) )\n        s( vec3(-p.z,    0,  p.y*snd), vec3( p.z+snd2,    0,  p.y*snd2) )\n        s( vec3(-p.z,    0, -p.y+FFT(1)), vec3(   0,  p.y*snd2,  p.z+snd2) )\n        s( vec3(-p.z,    0, -p.y+FFT(1)), vec3(   0, -p.y+FFT(1),  p.z+snd2) )\n        s( vec3( p.z+snd2,    0, -p.y+FFT(1)), vec3(   0,  p.y*snd2,  p.z+snd2) )\n        s( vec3( p.z+snd2,    0, -p.y+FFT(1)), vec3(   0, -p.y+FFT(1),  p.z+snd2) )\n    }\n    snd2/=1.1;\n    //c*=palette(snd*2.);\n    c*=palette(snd2*1.5+(sin(iTime))); //iAmplifiedTime within shaderamp\n\tC = vec4(c, 1.);    \n\n    rd.x+=sin(iTime/1000.);\n    vec3 bg = stars(rd);//*(1.+30.*snd);\n    C+=vec4(bg,1.);\n    \n    //C = vec4(c + c*c, 1);\n}\n\n","name":"Image","description":"","type":"image"}]}