{"ver":"0.1","info":{"id":"cllcRn","date":"1690337865","viewed":133,"name":"Bloom used Monte Carlo Method","username":"sjz1","description":"A simple bloom effect","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["bloom","montecarlo"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 ACESFilm( vec3 x )\n{\n    float tA = 2.51;\n    float tB = 0.03;\n    float tC = 2.43;\n    float tD = 0.59;\n    float tE = 0.14;\n    return clamp((x*(tA*x+tB))/(x*(tC*x+tD)+tE),0.0,1.0);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 col=texture(iChannel0,uv);\n    col.xyz/=col.w;\n    fragColor = vec4(pow(ACESFilm(col.xyz),vec3(1./2.2)),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float rand_i=0.;\nfloat rand(vec3 p3)\n{\n    rand_i += 0.4;\n    p3=rot(p3,vec3(rand_i));\n    p3 += rand_i+float(iFrame);\n    p3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\nfloat rand(vec2 p)\n{\n    rand_i += 0.4;\n    p=rot(p,rand_i);\n    p += rand_i+float(iFrame);\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 = fract(tan(dot(p3,p3)*20.*atan(p3))) ;\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nconst float PI=3.14159265358;\n\nfloat N(float A,float x){\n    //normal distribution\n    return sqrt(A/PI)*exp(-A*x*x);\n}\n\nfloat kernel(float x){\n\n    //the kernel function:https://www.desmos.com/calculator/oxsiuggpyx\n    //                    https://www.desmos.com/calculator/ckwiyhfqok\n    //I simply used the exhaustive method to find this function\n    //It is very effective :)\n    #if 0\n    float s=0.;\n    const float a=5.5,b=0.3,c=0.3,d=0.2;\n    for(int n=1;n<11;n++){\n        s+=N(exp(-pow(float(n),b)*a)*2e5,pow(x,d));\n    }\n    float kernel=max(pow(s,c)-0.2,0.);\n    \n    return 0.01*kernel/2.42238931269;//kernel(0)=2.42238931269\n    #else\n    return exp(-7.5*pow(x+0.00125,0.25)-1.5*pow(x,0.025))*sqrt(1.-x*x);\n    #endif\n}\n\n//iq's function\nfloat sdEquilateralTriangle( in vec2 p, in float r )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nfloat sdHexagram( in vec2 p, in float r )\n{\n    const vec4 k = vec4(-0.5,0.8660254038,0.5773502692,1.7320508076);\n    p = abs(p);\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    p -= 2.0*min(dot(k.yx,p),0.0)*k.yx;\n    p -= vec2(clamp(p.x,r*k.z,r*k.w),r);\n    return length(p)*sign(p.y);\n}\n\n\nvec3 color(vec2 pos){\n    vec3 c=vec3(0);\n    float sdf;\n    sdf=length(pos+vec2(0.65,0))-0.25;    \n    c+=vec3(30.0, 12.0, 2.0)*float(sdf<=0.)*0.5;\n    sdf=sdHexagram(pos,0.125);    \n    c+=vec3(2.0, 30.0, 2.0)*float(sdf<=0.)*0.5;\n    sdf=sdEquilateralTriangle(pos-vec2(0.65,0),0.25);    \n    c+=vec3(2.0, 12.0, 30.0)*float(sdf<=0.)*0.5;\n    return c*100.;\n}\n\n\nvec3 bloom(vec2 pos){\n    vec3 Calc=vec3(0);\n    const int S=32;\n    for(int i=0;i<S;i++){\n\n        //sample the color\n        float theta=2.*PI*rand(pos);\n        const float A=1.;\n        float r=rand(pos);\n        vec2 offset=vec2(cos(theta),sin(theta))*r*A;\n        vec3 C=color(pos);\n        vec3 sampleC=color(pos+offset);    \n        //bloom\n        sampleC=sampleC*kernel(r);\n\n        Calc+=max(sampleC,C);\n    }\n    return Calc/float(S);\n}\nconst int AA=64;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float x=fragCoord.x/iResolution.x*2.-1.;\n    float y=(fragCoord.y*2.-iResolution.y)/iResolution.x;\n    int iW=int(iResolution.x);\n    if(iFrame>AA*AA){\n        fragColor=texelFetch(iChannel0,ivec2(fragCoord),0);\n        return;\n    }\n    float x0=mod(float(iFrame),float(AA))/float(AA);\n    float y0=floor(float(iFrame/AA))/float(AA);\n    x+=1.0/float(iW)*x0;\n    y+=1.0/float(iW)*y0;\n\n    vec2 p=vec2(x,y);\n    vec3 tcolor=bloom(p);\n\n    if(iFrame==0){\n        fragColor=vec4(tcolor,1);\n    }else{\n        fragColor=texelFetch(iChannel0,ivec2(fragCoord),0)+vec4(tcolor,1);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"vec2 rot(vec2 a,float theta){\n    return a.xx*vec2(cos(theta),sin(theta))+a.yy*vec2(-sin(theta),cos(theta));\n}\nvec3 rot(vec3 a,vec3 angle){\n    a.yz=rot(a.yz,angle.x);\n    a.xz=rot(a.xz,angle.y);\n    a.xy=rot(a.xy,angle.z);\n    return a; \n}","name":"Common","description":"","type":"common"}]}