{"ver":"0.1","info":{"id":"MdfyDH","date":"1487960694","viewed":490,"name":"Cross Hatch Patterns","username":"MichaelPohoreski","description":"INSTRUCTIONS: \n\n* Disable auto-looping through patterns via line #22 change 1 to 0\n* Change the # on line 21 to select a different pattern. i.e. Try 2, 4, 6, 323, 662, 013213\n\n","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["patterns","mod","crosshatch","boolean","fill"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n Cross Hatch Patterns\n Copyleft {c} 2017 Michael Pohoreski\n\nDISCLAIMER:\n\n    You are free to use this code as you wish.\n\n    However, if you are going to copy/paste snippets of this code\n    on StackOverflow, StackExchange, Reddit, etc.\n    Please provide a link back to the original source\n    so that people can find updates and bugfixes.\n    Thanks!\n\nAlso see:\n\n Boolean Floating Point Logic\n https://www.shadertoy.com/view/lsXyDH\n*/\n\n#define PATTERN    013213 // <-- Change me, then click |> below line 39\n#define AUTO_CYCLE 1      // <-- Change to 0 to disable auto-looping through 4 patterns\n\n/*\n\n0 \"Small O\"\n    ....\n    .XXX\n    .X.X\n    .XXX\n\n2 * *  Checkerboard\n   * *\n  * * \n   * * \n\n3 Pattern \"W\"\n    ..X.\n    .X.X\n    .X.X\n    X...\n\n4 Brick rotated 45 deg\n     \\ /\n    / \\ \n      /\\/\n\n5 Cloth, Jean \"Weave\" 5x5 texture pattern\n    -.|.-\n    ..|..\n    |....\n    |.--.\n    |....\n    ..|..\n\n\n6 Pattern \"V\"\n    ....\n    ..X.\n    .X.X\n    X...\n\n7 Diagonal with 2 spaces\n    \\\\\\\\\n    \\\\\\\\\n    \\\\\\\\\n    \\\\\\\\\n\n8 Cloth, Jean, \"Weave\" 8x8 texture pattern\n    ---.|.--\n    ....|...\n    |...|...\n    |.......\n    |.-----\n    |.......\n    |...|...\n    ....|...\n \n10 Gradient left to right\n    .:|X\n    .:|X\n    .:|X\n    .:|X\n\n11 Gradient left to right\n    X|:.\n    X|:.\n    X|:.\n    X|:.\n\n20 Colon Pattern ::::\n    ....\n    ..X.\n    ....\n    ....\n\n22 Checkerboard\n    XX..\n    XX..\n    ..XX\n    ..XX\n\n28 \n    \\ \\ Thick Diagonal\n     \\ \\\n    \\ \\\n     \\ \\\n\n33 Diamond 3x3\n    ....\n    .X..\n    XXX.\n    .X..\n\n40\n    \\ \\ \n     \\ \\\n    \\ \\ \n     \\ \\\n\n43 Vertical with 3 spaces inbetween liens\n    |  |\n    |  |\n    |  |\n    |  |\n\n51 Diamond 3x3 with '|' vertical spacer\n    X.X.X\n    ..X..\n    X....\n    XX..X\n    X....\n    ..X..\n\n66 Diamond 6x6\n    ......\n    ..X...\n    .XXX..\n    XXXXX.\n    .XXX..\n    ..X...\n\n234\n    ::::\n    ::::\n    ::::\n    ::::\n\n323\n    \\ \\ \n    / / \n    \\ \\ \n    / / \n\n334\n    \\\\\\\\ but with ::\n    \\\\\\\\\n    \\\\\\\\\n    \\\\\\\\\n\n345\n    \\\\\\\\ but with ::\n    \\\\\\\\\n    \\\\\\\\\n    \\\\\\\\\n\n430 Diagonal wave\n    \\\n     )\n     \\\n\n464 Diagonal Line with large 8 px gap\n    \\ \\\n     \\ \\\n     \\ \\\n      \\ \\\n\n660 Weave 6x6\n    --.|.-\n    ...|..\n    |.... \n    |.---.\n    |.....\n    ...|..\n\n661 Weave 6x6 \"grid\"\n    --.|.-\n    ......\n    |.... \n    |.---.\n    |.....\n    ......\n\n662 Weave 6x6 with grayscale filler\n    --x|x-\n    ...|..\n    |..x. \n    |x---x\n    |..x..\n    ...|..\n\n013213 Diagonal cross hatch\n    .X.X\n    ..X.\n    .X.X\n    X...\n\n*/\n\n\n// ====================\nfloat pattern_20( vec2 p, vec2 i )\n{\n    if( i.y == 2. && (i.x == 2.))\n       return 1.0;\n\n    return 0.;\n}\n\n/* Diamond 3x3\n   3....\n   2.X..\n   1XXX.\n   0.X..\n    0123\n*/\n// ====================\nfloat pattern_diamond3x3( vec2 p, vec2 m )\n{\n    vec2 i = floor( m );\n\n    if( i.y == 0.0 || i.y == 2.0 )\n    {\n        if( i.x == 1.0 ) return 1.0;\n    }\n    else\n    if( i.y == 1.0 )\n        if ( i.x < 3.0 ) return 1.0;\n \n    return 0.0;\n} \n\n\n/* Diamond 5x5\n   5X.X.X\n   4..X..\n   3X....\n   2XX..X\n   1X....\n   0..X..\n    01234\n*/\n// ====================\nfloat pattern_diamond5x5( vec2 p, vec2 m )\n{\n    vec2 i = floor( m );\n    const float X = 1.0;\n    const float _ = 0.0;\n\n    if( i.y == 2.0 )\n    {\n        if( i.x == 2.0 || i.x == 3.0 )\n            return _;\n        return X;\n    }\n    else\n    if( i.y == 5.0 )\n    {\n        if ( i.x == 1.0 || i.x == 3.0 )\n            return _;\n        return X;\n    }\n\n    if( i.x == 0.0 )\n    {\n        if( i.y == 0.0 || i.y == 4.0 )\n            return _;\n        return X;\n    }\n    else\n    if( i.x == 2.0 )\n    {\n        if( i.y == 1.0 || i.y == 3.0 )\n            return _;\n        return X;\n    }\n\n    return _;\n} \n\n\n/*\nDiamond 6x6\n   5......\n   4..X...\n   3.XXX..\n   2XXXXX.\n   1.XXX..\n   0..X...\n    012345\n*/\n// ====================\nfloat pattern_diamond6x6( vec2 p, vec2 m )\n{\n    vec2 i = floor( m );\n    \n    if( i.y == 0.0 || i.y == 4.0 )\n        if (i.x == 2.0 ) return 1.0;\n        else             return 0.0;\n    if( i.y == 1.0 || i.y == 3.0 )\n        if( i.x >= 1.0 && i.x <= 3.0 ) return 1.0;\n        else                           return 0.0;\n    if( i.y == 2.0 )\n        if (i.x == 5.0 ) return 0.0;\n        else             return 1.0;\n    return 0.0;    \n}\n\n    \n// ====================\nfloat pattern_o( vec2 p, vec2 m )\n{\n    vec2 i = floor( m );\n\n    // [2] XXXX\n    // [0] XXXX\n    if( i.y == 0.0 || i.y == 2.0 )\n        return i.x;\n\n    // [1] X..X\n    if( i.y == 1. )\n    {\n        if (i.x == 1.0) return 1.0;\n        if (i.x == 3.0) return 1.0;\n    }\n\n    return 0.;\n}\n\n// ====================\nfloat pattern_v( vec2 p, vec2 m )\n{\n    vec2 i = floor( m );\n    \n    if( i.y == 0. )\n        return (i.x == 0.0) ? 1.0 : 0.0;\n    \n    if( i.y == 1. )\n    {\n        if (i.x == 1.0) return 1.0;\n        if (i.x == 3.0) return 1.0;\n    }\n\n    if( i.y == 2. )\n        return (i.x == 2.0) ? 1.0 : 0.0;\n\n    return 0.;\n}\n\n// ====================\nfloat pattern_w( vec2 p, vec2 m )\n{\n    vec2 i = floor( m );\n    \n    if( i.y == 0. )\n        return (i.x == 0.0) ? 1.0 : 0.0;\n    \n    if( i.y == 1. || i.y == 2. )\n    {\n        if (i.x == 1.0) return 1.0;\n        if (i.x == 3.0) return 1.0;\n    }\n\n    if( i.y == 3. )\n        return (i.x == 2.0) ? 1.0 : 0.0;\n\n    return 0.;\n}\n\n/* Weave 5\n   5-.|.-\n   4..|..\n   3|....\n   2|.--.\n   1|....\n   0..|..\n    01234\n*/\n// ====================\nfloat pattern_weave5( vec2 p, vec2 m )\n{\n    vec2 i = floor( m );\n    const float X = 1.0;\n    const float _ = 0.0;\n\n    if( i.y == 2.0 )\n    {\n        if( i.x == 1.0 || i.x == 4.0 )\n            return _;\n        return X;\n    }\n    else\n    if( i.y == 5.0 )\n    {\n        if ( i.x == 1.0 || i.x == 3.0 )\n            return _;\n        return X;\n    }\n\n    if( i.x == 0.0 )\n    {\n        if( i.y == 0.0 || i.y == 4.0 )\n            return _;\n        return X;\n    }\n    else\n    if( i.x == 2.0 )\n    {\n        if( i.y == 1.0 || i.y == 3.0 )\n            return _;\n        return X;\n    }\n\n    return _;\n} \n\n/* Weave 6x6 a\n   5--.|.-\n   4...|..\n   3|.... \n   2|.---.\n   1|.....\n   0...|..\n    012345\n*/\n// ====================\nfloat pattern_weave6x6a( vec2 p, vec2 m )\n{\n    vec2 i = floor( m );\n    const float X = 1.0;\n    const float _ = 0.0;\n\n    if( i.y == 2.0 )\n    {\n        if( i.x == 1.0 || i.x == 5.0 )\n            return _;\n        return X;\n    }\n    else\n    if( i.y == 5.0 )\n    {\n        if ( i.x == 2.0 || i.x == 4.0 )\n            return _;\n        return X;\n    }\n    else\n    if( i.x == 0.0 )\n    {\n        if( i.y == 0.0 || i.y == 4.0 )\n            return _;\n        return X;\n    }\n    else\n    if( i.x == 3.0 )\n    {\n        if( i.y == 1.0 || i.y == 3.0 )\n            return _;\n        return X;\n    }\n    \n    return 0.0;\n} \n\n/* Weave 6x6 b\n   5--.|.-\n   4......\n   3|.... \n   2|.---.\n   1|.....\n   0......\n    012345\n*/\n// ====================\nfloat pattern_weave6x6b( vec2 p, vec2 m )\n{\n    vec2 i = floor( m );\n    const float X = 1.0;\n    const float _ = 0.0;\n\n    if( i.y == 2.0 )\n    {\n        if( i.x == 1.0 || i.x == 5.0 )\n            return _;\n        return X;\n    }\n    else\n    if( i.y == 5.0 )\n    {\n        if ( i.x == 2.0 || i.x == 4.0 )\n            return _;\n        return X;\n    }\n    else\n    if( i.x == 0.0 )\n    {\n        if( i.y == 0.0 || i.y == 4.0 )\n            return _;\n        return X;\n    }\n    \n    return 0.0;\n} \n\n/* Weave 6x6\n   5--x|x-\n   4...|..\n   3|..x. \n   2|x---x\n   1|..x..\n   0...|..\n    012345\n*/\n// ====================\nfloat pattern_weave6x6c( vec2 p, vec2 m )\n{\n    vec2 i = floor( m );\n    const float X = 1.0;\n    const float _ = 0.5;\n\n    if( i.y == 2.0 )\n    {\n        if( i.x == 1.0 || i.x == 5.0 )\n            return _;\n        return X;\n    }\n    else\n    if( i.y == 5.0 )\n    {\n        if ( i.x == 2.0 || i.x == 4.0 )\n            return _;\n        return X;\n    }\n    else\n    if( i.x == 0.0 )\n    {\n        if( i.y == 0.0 || i.y == 4.0 )\n            return _;\n        return X;\n    }\n    else\n    if( i.x == 3.0 )\n    {\n        if( i.y == 1.0 || i.y == 3.0 )\n            return _;\n        return X;\n    }\n    \n    return 0.0;\n} \n\n\n/*\n 7---.|.--\n 6....|...\n 5|...|...\n 4|.......\n 3|.-----\n 2|.......\n 1|...|...\n 0....|...\n  01234567\n*/\n// ====================\nfloat pattern_weave8( vec2 p, vec2 m )\n{\n    vec2 i = floor( m );\n    const float X = 1.0;\n    const float _ = 0.0;\n\n    if( i.y == 3.0 )\n    {\n        if( i.x == 1.0 || i.x == 7.0 )\n            return _;\n        return X;\n    }\n    else\n    if( i.y == 7.0 )\n    {\n        if ( i.x == 3.0 || i.x == 5.0 )\n            return _;\n        return X;\n    }\n\n    if( i.x == 0.0 )\n    {\n        if( i.y == 0.0 || i.y == 6.0 )\n            return _;\n        return X;\n    }\n    else\n    if( i.x == 4.0 )\n    {\n        if( i.y == 2.0 || i.y == 4.0 )\n            return _;\n        return X;\n    }\n\n    return _;\n}\n\n// ====================\nfloat pattern_x( vec2 p, vec2 m )\n{\n    vec2 i = floor( m );\n    \n    if( i.y == 0. )\n        return (i.x == 0.0) ? 1.0 : 0.0;\n    \n    if( i.y == 1. || i.y == 3. )\n    {\n        if (i.x == 1.0) return 1.0;\n        if (i.x == 3.0) return 1.0;\n    }\n\n    if( i.y == 2. )\n        return (i.x == 2.0) ? 1.0 : 0.0;\n\n    return 0.;\n}\n\n\n// p   = Input Fragment Coordinate (NOT normalized)\n// p.x = 0 .. w-1\n// p.y = 0 .. h-1\n// ====================\nvoid mainImage( out vec4 fragColor, in vec2 p )\n{\n    float w = iResolution.x;\n    float h = iResolution.y;\n\n    vec2 q = p; // Quotient\n    vec2 d = vec2(1.); // Divisor\n\n    vec2 i;\n    vec2 r;\n    float g = 0.0;\n    \n#if AUTO_CYCLE == 1 \n    // \"Attract\" / \"Demo\" mode\n\n    float patterns = 4.0;\n    float duration = 4.0;\n    float t = floor( mod( iTime / duration, patterns ) );\n\n    if( t == 0.0 )\n    {\n        d = vec2( 4.0 );\n        r = mod( q,  d ); // q % d\n        g = pattern_o( p, floor( r ) );\n    }\n    else\n    if( t == 1.0 ) // #662 \"Weave\"\n    {\n        d = vec2( 6.0 );\n        r = mod( q,  d ); // q % d\n        g = pattern_weave6x6c( p, floor( r ) );\n    }\n    else\n    if( t == 2.0 ) // #2 Checkerboard\n    {\n        d = vec2( 2.0 );\n        r = mod( q,  d ); // q % d\n        g = mod( r.x + r.y, 2.0 ); // x ^ y\n    }\n    else\n    if( t == 3.0 ) // #013213 Diagonal cross hatch\n    {\n        d = vec2( 4.0 );\n        r = mod( q,  d ); // q % d\n        g = pattern_x( p, floor( r ) );\n    }\n\n#else    \n\n#if PATTERN == 0\n    d = vec2( 4.0 );\n    #define FUNC pattern_o( p, floor( r ) );\n#endif\n    \n#if PATTERN == 2\n    d.x = 2.0;\n    d.y = 2.0;\n    #define FUNC mod( r.x + r.y, 2.0 ); // x ^ y\n#endif\n\n#if PATTERN == 3\n    d = vec2( 4.0 );\n    #define FUNC pattern_w( p, floor( r ) );\n#endif\n\n#if PATTERN == 4 // Rotated Brick or Shingle\n    d.x = 4.0;\n    d.y = 4.0;\n    #define FUNC mod( r.x * r.y, 4.0 );\n#endif\n\n#if PATTERN == 5\n    d = vec2( 5.0 );\n    #define FUNC pattern_weave5( p, floor( r ) );\n#endif\n\n#if PATTERN == 6\n    d = vec2( 4.0 );\n    #define FUNC pattern_v( p, floor( r ) );\n#endif\n\n#if PATTERN == 7\n    d.x = 3.0;\n    d.y = 3.0;\n    #define FUNC mod( r.x + r.y, 2.0 );\n#endif\n\n#if PATTERN == 8\n    d = vec2( 8.0 );\n    #define FUNC pattern_weave8( p, floor( r ) );\n#endif\n\n#if PATTERN == 10 // Left (Black) to Right (White) gradient\n    d = vec2(w,h);\n    #define FUNC i.x;\n#endif\n\n#if PATTERN == 11 // Right (Black) to Left (White) gradient\n    d = vec2(w,h);\n    #define FUNC 1.0 - i.x;\n#endif\n\n#if PATTERN == 20\n    d = vec2( 4.0 );\n    #define FUNC pattern_20( p, floor( r ) );\n#endif\n\n#if PATTERN == 22 // Checkerboard\n    // 1 = 2x2\n    // 2 = 4x4\n    // 3 = 6x6\n    // 4 = 8x8\n    d = vec2(w,h) / 1.0; // normalize i\n    vec2 t = floor( q/d * 2.0 );\n    #define FUNC mod( t.x + t.y, 2.0);\n#endif\n\n#if PATTERN == 28\n    d.x = 2.0;\n    d.y = 2.0;\n    q = p / 8.;\n    #define FUNC mod( r.x + r.y, 2.0 );\n#endif\n\n#if PATTERN == 33\n    d = vec2( 4.0 );\n    #define FUNC pattern_diamond3x3( p, floor( r ) );\n#endif\n\n#if PATTERN == 40 // Diagonal\n    d.x = 4.0;\n    d.y = 4.0;\n    q = p / 4.0;\n    #define FUNC mod( r.x + r.y, 4.0 );\n#endif\n\n#if PATTERN == 43 // Vertical lines\n    #define FUNC mod( p.x, 4.0 );\n#endif\n\n#if PATTERN == 51\n    d = vec2( 5.0 );\n    #define FUNC pattern_diamond5x5( p, floor( r ) );\n#endif\n\n#if PATTERN == 66\n    d = vec2( 6.0 );\n    #define FUNC pattern_diamond6x6( p, floor( r ) );\n#endif\n\n#if PATTERN == 234\n    d.x = 2.0;\n    d.y = 3.0;\n    #define FUNC mod( r.x + r.y, 4.0 );\n#endif\n\n#if PATTERN == 334\n    d.x = 3.0;\n    d.y = 3.0;\n    #define FUNC mod( r.x + r.y, 4.0 );\n#endif\n\n#if PATTERN == 323\n    d.x = 3.0;\n    d.y = 2.0;\n    #define FUNC mod( r.x + r.y, 3.0 );\n#endif\n\n#if PATTERN == 345\n    d.x = 3.0;\n    d.y = 4.0;\n    #define FUNC mod( r.x + r.y, 5.0 );\n#endif\n    \n#if PATTERN == 430\n    d = vec2( 4. );\n    #define FUNC mod( r.x + r.y, 3.0 );\n#endif\n    \n#if PATTERN == 464\n    d.x = 4.0;\n    d.y = 6.0;\n    #define FUNC mod( r.x + r.y, 4.0 );\n#endif\n    \n#if PATTERN == 660\n    d = vec2( 6.0 );\n    #define FUNC pattern_weave6x6a( p, floor( r ) );\n#endif\n    \n#if PATTERN == 661\n    d = vec2( 6.0 );\n    #define FUNC pattern_weave6x6b( p, floor( r ) );\n#endif\n    \n#if PATTERN == 662\n    d = vec2( 6.0 );\n    #define FUNC pattern_weave6x6c( p, floor( r ) );\n#endif\n    \n#if PATTERN == 013213\n    d = vec2( 4.0 );\n    #define FUNC pattern_x( p, floor( r ) );\n#endif\n    \n    r = mod( q,  d ); // q % d\n    i =      q / d  ; // q / d\n    g = FUNC\n#endif\n\n    fragColor.rgb = vec3( g );\n    fragColor.a   = 1.;\n}\n","name":"Image","description":"","type":"image"}]}