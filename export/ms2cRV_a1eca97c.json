{"ver":"0.1","info":{"id":"ms2cRV","date":"1687943783","viewed":66,"name":"SDF sandbox with blobbiness","username":"dskw","description":"based on:\nhttps://www.shadertoy.com/view/md2cDh\n\nsdf functions:\nhttps://www.shadertoy.com/view/Xds3zN\n\nnoise:\nhttps://www.shadertoy.com/view/4dXGR4","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["noise","ray","sdf","smooth","blobbiness"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// based on:\n// https://www.shadertoy.com/view/md2cDh\n// https://www.shadertoy.com/view/Xds3zN\n// https://www.shadertoy.com/view/4dXGR4  noise\n\n#define AA 1 // antialiasing\n\n//------------------------------------------------------------------\n\n// based on https://www.shadertoy.com/view/lsf3RH by\n// trisomie21 (THANKS!)\n// My apologies for the ugly code.\n\nfloat snoise(vec3 uv, float res)\t// by trisomie21\n{\n\tconst vec3 s = vec3(1e0, 1e2, 1e4);\n\t\n\tuv *= res;\n\t\n\tvec3 uv0 = floor(mod(uv, res))*s;\n\tvec3 uv1 = floor(mod(uv+vec3(1.), res))*s;\n\t\n\tvec3 f = fract(uv); f = f*f*(3.0-2.0*f);\n\t\n\tvec4 v = vec4(uv0.x+uv0.y+uv0.z, uv1.x+uv0.y+uv0.z,\n\t\t      \t  uv0.x+uv1.y+uv0.z, uv1.x+uv1.y+uv0.z);\n\t\n\tvec4 r = fract(sin(v*1e-3)*1e5);\n\tfloat r0 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\t\n\tr = fract(sin((v + uv1.z - uv0.z)*1e-3)*1e5);\n\tfloat r1 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\t\n\treturn mix(r0, r1, f.z)*2.-1.;\n}\n\n\n//------------------------------------------------------------------\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat sdBoxFrame( vec3 p, vec3 b, float e )\n{\n       p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\nfloat sdEllipsoid( in vec3 p, in vec3 r ) // approximated\n{\n    float k0 = length(p/r);\n    float k1 = length(p/(r*r));\n    return k0*(k0-1.0)/k1;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n    return length( vec2(length(p.xz)-t.x,p.y) )-t.y;\n}\n\nfloat sdCappedTorus(in vec3 p, in vec2 sc, in float ra, in float rb)\n{\n    p.x = abs(p.x);\n    float k = (sc.y*p.x>sc.x*p.y) ? dot(p.xy,sc) : length(p.xy);\n    return sqrt( dot(p,p) + ra*ra - 2.0*ra*k ) - rb;\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n\n    const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n    p = abs(p);\n    p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\n    vec2 d = vec2(\n       length(p.xy - vec2(clamp(p.x, -k.z*h.x, k.z*h.x), h.x))*sign(p.y - h.x),\n       p.z-h.y );\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdOctogonPrism( in vec3 p, in float r, float h )\n{\n  const vec3 k = vec3(-0.9238795325,   // sqrt(2+sqrt(2))/2 \n                       0.3826834323,   // sqrt(2-sqrt(2))/2\n                       0.4142135623 ); // sqrt(2)-1 \n  // reflections\n  p = abs(p);\n  p.xy -= 2.0*min(dot(vec2( k.x,k.y),p.xy),0.0)*vec2( k.x,k.y);\n  p.xy -= 2.0*min(dot(vec2(-k.x,k.y),p.xy),0.0)*vec2(-k.x,k.y);\n  // polygon side\n  p.xy -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n  vec2 d = vec2( length(p.xy)*sign(p.y), p.z-h );\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n\tvec3 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h ) - r;\n}\n\nfloat sdRoundCone( in vec3 p, in float r1, float r2, float h )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    \n    float b = (r1-r2)/h;\n    float a = sqrt(1.0-b*b);\n    float k = dot(q,vec2(-b,a));\n    \n    if( k < 0.0 ) return length(q) - r1;\n    if( k > a*h ) return length(q-vec2(0.0,h)) - r2;\n        \n    return dot(q, vec2(a,b) ) - r1;\n}\n\nfloat sdRoundCone(vec3 p, vec3 a, vec3 b, float r1, float r2)\n{\n    // sampling independent computations (only depend on shape)\n    vec3  ba = b - a;\n    float l2 = dot(ba,ba);\n    float rr = r1 - r2;\n    float a2 = l2 - rr*rr;\n    float il2 = 1.0/l2;\n    \n    // sampling dependant computations\n    vec3 pa = p - a;\n    float y = dot(pa,ba);\n    float z = y - l2;\n    float x2 = dot2( pa*l2 - ba*y );\n    float y2 = y*y*l2;\n    float z2 = z*z*l2;\n\n    // single square root!\n    float k = sign(rr)*rr*rr*x2;\n    if( sign(z)*a2*z2 > k ) return  sqrt(x2 + z2)        *il2 - r2;\n    if( sign(y)*a2*y2 < k ) return  sqrt(x2 + y2)        *il2 - r1;\n                            return (sqrt(x2*a2*il2)+y*rr)*il2 - r1;\n}\n\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    const float k = sqrt(3.0);\n    h.x *= 0.5*k;\n    p.xy /= h.x;\n    p.x = abs(p.x) - 1.0;\n    p.y = p.y + 1.0/k;\n    if( p.x+k*p.y>0.0 ) p.xy=vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0, 0.0 );\n    float d1 = length(p.xy)*sign(-p.y)*h.x;\n    float d2 = abs(p.z)-h.y;\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\n\n// vertical\nfloat sdCylinder( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n// arbitrary orientation\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r)\n{\n    vec3 pa = p - a;\n    vec3 ba = b - a;\n    float baba = dot(ba,ba);\n    float paba = dot(pa,ba);\n\n    float x = length(pa*baba-ba*paba) - r*baba;\n    float y = abs(paba-baba*0.5)-baba*0.5;\n    float x2 = x*x;\n    float y2 = y*y*baba;\n    float d = (max(x,y)<0.0)?-min(x2,y2):(((x>0.0)?x2:0.0)+((y>0.0)?y2:0.0));\n    return sign(d)*sqrt(abs(d))/baba;\n}\n\n// vertical\nfloat sdCone( in vec3 p, in vec2 c, float h )\n{\n    vec2 q = h*vec2(c.x,-c.y)/c.y;\n    vec2 w = vec2( length(p.xz), p.y );\n    \n\tvec2 a = w - q*clamp( dot(w,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = w - q*vec2( clamp( w.x/q.x, 0.0, 1.0 ), 1.0 );\n    float k = sign( q.y );\n    float d = min(dot( a, a ),dot(b, b));\n    float s = max( k*(w.x*q.y-w.y*q.x),k*(w.y-q.y)  );\n\treturn sqrt(d)*sign(s);\n}\n\nfloat sdCappedCone( in vec3 p, in float h, in float r1, in float r2 )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    \n    vec2 k1 = vec2(r2,h);\n    vec2 k2 = vec2(r2-r1,2.0*h);\n    vec2 ca = vec2(q.x-min(q.x,(q.y < 0.0)?r1:r2), abs(q.y)-h);\n    vec2 cb = q - k1 + k2*clamp( dot(k1-q,k2)/dot2(k2), 0.0, 1.0 );\n    float s = (cb.x < 0.0 && ca.y < 0.0) ? -1.0 : 1.0;\n    return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\nfloat sdCappedCone(vec3 p, vec3 a, vec3 b, float ra, float rb)\n{\n    float rba  = rb-ra;\n    float baba = dot(b-a,b-a);\n    float papa = dot(p-a,p-a);\n    float paba = dot(p-a,b-a)/baba;\n\n    float x = sqrt( papa - paba*paba*baba );\n\n    float cax = max(0.0,x-((paba<0.5)?ra:rb));\n    float cay = abs(paba-0.5)-0.5;\n\n    float k = rba*rba + baba;\n    float f = clamp( (rba*(x-ra)+paba*baba)/k, 0.0, 1.0 );\n\n    float cbx = x-ra - f*rba;\n    float cby = paba - f;\n    \n    float s = (cbx < 0.0 && cay < 0.0) ? -1.0 : 1.0;\n    \n    return s*sqrt( min(cax*cax + cay*cay*baba,\n                       cbx*cbx + cby*cby*baba) );\n}\n\n// c is the sin/cos of the desired cone angle\nfloat sdSolidAngle(vec3 pos, vec2 c, float ra)\n{\n    vec2 p = vec2( length(pos.xz), pos.y );\n    float l = length(p) - ra;\n\tfloat m = length(p - c*clamp(dot(p,c),0.0,ra) );\n    return max(l,m*sign(c.y*p.x-c.x*p.y));\n}\n\nfloat sdOctahedron(vec3 p, float s)\n{\n    p = abs(p);\n    float m = p.x + p.y + p.z - s;\n\n    // exact distance\n    #if 0\n    vec3 o = min(3.0*p - m, 0.0);\n    o = max(6.0*p - m*2.0 - o*3.0 + (o.x+o.y+o.z), 0.0);\n    return length(p - s*o/(o.x+o.y+o.z));\n    #endif\n    \n    // exact distance\n    #if 1\n \tvec3 q;\n         if( 3.0*p.x < m ) q = p.xyz;\n    else if( 3.0*p.y < m ) q = p.yzx;\n    else if( 3.0*p.z < m ) q = p.zxy;\n    else return m*0.57735027;\n    float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n    return length(vec3(q.x,q.y-s+k,q.z-k)); \n    #endif\n    \n    // bound, not exact\n    #if 0\n\treturn m*0.57735027;\n    #endif\n}\n\nfloat sdPyramid( in vec3 p, in float h )\n{\n    float m2 = h*h + 0.25;\n    \n    // symmetry\n    p.xz = abs(p.xz);\n    p.xz = (p.z>p.x) ? p.zx : p.xz;\n    p.xz -= 0.5;\n\t\n    // project into face plane (2D)\n    vec3 q = vec3( p.z, h*p.y - 0.5*p.x, h*p.x + 0.5*p.y);\n   \n    float s = max(-q.x,0.0);\n    float t = clamp( (q.y-0.5*p.z)/(m2+0.25), 0.0, 1.0 );\n    \n    float a = m2*(q.x+s)*(q.x+s) + q.y*q.y;\n\tfloat b = m2*(q.x+0.5*t)*(q.x+0.5*t) + (q.y-m2*t)*(q.y-m2*t);\n    \n    float d2 = min(q.y,-q.x*m2-q.y*0.5) > 0.0 ? 0.0 : min(a,b);\n    \n    // recover 3D and scale, and add sign\n    return sqrt( (d2+q.z*q.z)/m2 ) * sign(max(q.z,-p.y));;\n}\n\n// la,lb=semi axis, h=height, ra=corner\nfloat sdRhombus(vec3 p, float la, float lb, float h, float ra)\n{\n    p = abs(p);\n    vec2 b = vec2(la,lb);\n    float f = clamp( (ndot(b,b-2.0*p.xz))/dot(b,b), -1.0, 1.0 );\n\tvec2 q = vec2(length(p.xz-0.5*b*vec2(1.0-f,1.0+f))*sign(p.x*b.y+p.z*b.x-b.x*b.y)-ra, p.y-h);\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0));\n}\n\nfloat sdHorseshoe( in vec3 p, in vec2 c, in float r, in float le, vec2 w )\n{\n    p.x = abs(p.x);\n    float l = length(p.xy);\n    p.xy = mat2(-c.x, c.y, \n              c.y, c.x)*p.xy;\n    p.xy = vec2((p.y>0.0 || p.x>0.0)?p.x:l*sign(-c.x),\n                (p.x>0.0)?p.y:l );\n    p.xy = vec2(p.x,abs(p.y-r))-vec2(le,0.0);\n    \n    vec2 q = vec2(length(max(p.xy,0.0)) + min(0.0,max(p.x,p.y)),p.z);\n    vec2 d = abs(q) - w;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdU( in vec3 p, in float r, in float le, vec2 w )\n{\n    p.x = (p.y>0.0) ? abs(p.x) : length(p.xy);\n    p.x = abs(p.x-r);\n    p.y = p.y - le;\n    float k = max(p.x,p.y);\n    vec2 q = vec2( (k<0.0) ? -k : length(max(p.xy,0.0)), abs(p.z) ) - w;\n    return length(max(q,0.0)) + min(max(q.x,q.y),0.0);\n}\n\n// cylindrical arc sdf\nfloat sdArc(vec3 p, vec2 sc, float ra, float rb) {\n    p.x = abs(p.x); // symmetry\n    \n    vec3 q = p - vec3(sc*ra,0);\n    q.xy = mat2(sc.x,-sc.y,sc.y,sc.x) * q.xy; // rotation\n    \n    vec2 v = vec2(length(q.xz), abs(q.y)) - rb; // caps\n    vec2 w = vec2(length(p.xy) - ra, p.z); // torus\n    \n    return sc.y*p.x>sc.x*p.y ? length(max(v,0.)) + min(0.,max(v.x,v.y))\n                             : length(w) - rb;\n}\n\n//------------------------------------------------------------------\n\n// .x = f(p)\n// .y = ∂s(p)/∂x\n// .z = ∂s(p)/∂y\n// .w = ∂s(p)/∂z\n// .yzw = ∇s(p) with ∥∇s(p)∥<1 sadly\nfloat smin( in float a, in float b, in float k )\n{\n    float h =  max(k-abs(a-b),0.0);\n    float m = 0.25*h*h/k;\n    float n = 0.50*  h/k;\n    return (min(a,  b) - m);\n}\n\n//------------------------------------------------------------------\n\nfloat opU( float d1, float d2, float b )\n{\n    return b <= 0. ? ((d1<d2) ? d1 : d2) : smin(d1, d2, b);\n}\n\n//------------------------------------------------------------------\n\n#define SD_Plane        0u\n#define SD_Sphere       1u\n#define SD_Box          2u\n#define SD_BoxFrame     3u\n#define SD_Ellipsoid    4u\n#define SD_Torus        5u\n#define SD_CappedTorus  6u\n#define SD_HexPrism     7u\n#define SD_OctogonPrism 8u\n#define SD_RoundCone    9u\n#define SD_TriPrism    10u\n#define SD_Cylinder    11u\n#define SD_Cone        12u\n#define SD_CappedCone  13u\n#define SD_SolidAngle  14u\n#define SD_Octahedron  15u\n#define SD_Pyramid     16u\n#define SD_Rhombus     17u\n#define SD_U           18u\n#define SD_Arc         19u\n\nfloat sdf(float d, vec3 pos, uint shape, vec3 spos, vec4 sParams, vec4 mParams, float blob)\n{\n    float res = 9999999999.;\n    vec3 lp = pos - spos;\n    \n    switch(uint(mParams.x))\n    {\n        case 1u:\n        {\n            lp += vec3(\n                snoise(vec3(lp.x, lp.y, lp.z) * mParams.y, mParams.z) * mParams.w,\n                snoise(vec3(lp.y, lp.z, lp.x) * mParams.y, mParams.z) * mParams.w,\n                snoise(vec3(lp.z, lp.x, lp.y) * mParams.y, mParams.z) * mParams.w\n            );\n            break;\n        }\n    }\n    \n    \n    switch(shape)\n    {\n        case SD_Plane: res = sdPlane(lp); break;\n        case SD_Sphere: res = sdSphere(lp, sParams.x ); break;\n        case SD_Box: res = sdBox(lp, sParams.xyz ); break;\n        case SD_BoxFrame: res = sdBoxFrame(lp, sParams.xyz, sParams.w ); break;\n        case SD_Ellipsoid: res = sdEllipsoid(lp, sParams.xyz ); break;\n        case SD_Torus: res = sdTorus(lp, sParams.xy ); break;\n        case SD_CappedTorus: res = sdCappedTorus(lp, sParams.xy, sParams.z, sParams.w); break;\n        case SD_HexPrism: res = sdHexPrism(lp, sParams.xy ); break;\n        case SD_OctogonPrism: res = sdOctogonPrism(lp, sParams.x, sParams.y ); break;\n        case SD_RoundCone: res = sdRoundCone(lp, sParams.x, sParams.y, sParams.z ); break;\n        case SD_TriPrism: res = sdTriPrism(lp, sParams.xy ); break;\n        case SD_Cylinder: res = sdCylinder(lp, sParams.xy ); break;\n        case SD_Cone: res = sdCone(lp, sParams.xy, sParams.z ); break;\n        case SD_CappedCone: res = sdCappedCone(lp, sParams.x, sParams.y, sParams.z ); break;\n        case SD_SolidAngle: res = sdSolidAngle(lp, sParams.xy, sParams.z); break;\n        case SD_Octahedron: res = sdOctahedron(lp, sParams.x); break;\n        case SD_Pyramid: res = sdPyramid(lp, sParams.x ); break;\n        case SD_Rhombus: res = sdRhombus(lp, sParams.x, sParams.y, sParams.z, sParams.w); break;\n        case SD_U: res = sdU(lp, sParams.x, sParams.y, sParams.zw ); break;\n        case SD_Arc: res = sdArc(lp, sParams.xy, sParams.z, sParams.w); break;\n        //case 0: res = sdCapsule(lp, vec3 a, vec3 b, float r ); break;\n        //case 0: res = sdRoundCone(lp, vec3 a, vec3 b, float r1, float r2); break;\n        //case 0: res = sdCylinder(lp, vec3 a, vec3 b, float r); break;\n        //case 0: res = sdCappedCone(lp, vec3 a, vec3 b, float ra, float rb); break;\n        //case 0: res = sdHorseshoe(lp, in vec2 c, in float r, in float le, vec2 w ); break;\n    }\n    \n    switch(uint(mParams.x))\n    {\n        case 2u:\n        {\n            res += snoise(lp * mParams.y, mParams.z) * mParams.w;\n            break;\n        }\n    }\n    \n    return opU(d, res, blob);\n}\n\n//------------------------------------------------------------------\n//------------------------------------------------------------------\n\n// scene sdf\nfloat map(vec3 p) {\n    float ra = .5;\n    float rb = .05;\n    float th = .025+.025*sin(iTime);\n    \n    float an = .75*3.141592*(.5+.5*sin(.8*iTime));\n    vec2 sc = vec2(sin(an), cos(an));\n    \n    float res = 9999999999.;\n    \n    //float sdf(float d, vec3 pos, uint shape, vec3 spos, vec4 sParams, vec4 mParams, float blob)\n    res = sdf(res, p, SD_Plane, vec3(0.,-0.25,0.), vec4(0.), vec4(2., 1.0, 30., 0.01), 0.);\n    res = sdf(res, p, SD_Plane, vec3(0.,-0.25,0.), vec4(0.), vec4(2., 1.0, 20., 0.05), 0.);\n    res = sdf(res, p, SD_Arc, vec3(0.), vec4(sc, ra, rb-th), vec4(0.), 0.) - th; // Arc\n    res = sdf(res, p, SD_Sphere, vec3(0.,0.15, 0.1), vec4(0.25), vec4(2., 1.0, 9., 0.05), 0.2); // Sphere\n    res = sdf(res, p, SD_Rhombus, vec3(0.,0., 0.07), vec4(0.15, 0.25, 0.04, 0.08), vec4(0.), 0.01); // Rhombus\n    \n    return res;\n}\n\n//------------------------------------------------------------------\n//------------------------------------------------------------------\n\n// normal estimation using tetrahedron method\n// thanks to iq: https://iquilezles.org/articles/normalsSDF/\nvec3 calcNormal(vec3 p) {\n    const vec2 e = vec2(1,-1)*.5773;\n    const float eps = .0005;\n    return normalize(e.xyy*map(p + e.xyy*eps) + \n\t\t\t\t\t e.yyx*map(p + e.yyx*eps) + \n\t\t\t\t\t e.yxy*map(p + e.yxy*eps) + \n\t\t\t\t\t e.xxx*map(p + e.xxx*eps));\n}\n\n// camera function\nmat3 setCamera(vec3 ro, vec3 ta) {\n    vec3 w = normalize(ta - ro);\n    vec3 u = normalize(cross(w, vec3(0,1,0)));\n    vec3 v = cross(u, w);\n    return mat3(u, v, w);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat an = .4*iTime; // camera angle\n\tvec3 ro = vec3(cos(an), .2, sin(an)); // ray origin\n    vec3 ta = vec3(0); // target\n    mat3 ca = setCamera(ro, ta); // camera matrix\n    \n    // render\n    vec3 tot = vec3(0);\n    \n    #if AA>1\n    for (int m=0; m<AA; m++)\n    for (int n=0; n<AA; n++) {\n        vec2 off = vec2(m,n) / float(AA) - .5; // AA offset\n        vec2 p = (2.*(fragCoord+off) - iResolution.xy) / iResolution.y;\n        #else    \n        vec2 p = (2.*fragCoord - iResolution.xy) / iResolution.y;\n        #endif\n\n        vec3 rd = ca*normalize(vec3(p,1.25)); // ray direction\n\n        // raymarch\n        const float tmax = 5.;\n        float t = 0.;\n        \n        for (int i=0; i<256; i++) {\n            vec3 p = ro + rd*t;\n            float h = map(p);\n            if(h<.0001 || t>tmax) break;\n            t += h;\n        }\n        \n        vec3 col = vec3(0);\n        if (t<tmax) {\n            // lighting\n            vec3 p = ro + rd*t; // hit point\n            vec3 n = calcNormal(p); // surface normal\n            float dif = clamp(dot(n, vec3(.57703)), 0., 1.);\n            float amb = .5+.5*n.y; // fake AO\n            \n            col += vec3(.2,.3,.4)*amb;\n            col += vec3(.8,.7,.5)*dif;\n        }\n\n        col = pow(col, vec3(.4545)); // gamma correction\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n\tfragColor = vec4(tot,1.0);\n}","name":"Image","description":"","type":"image"}]}