{"ver":"0.1","info":{"id":"mscBDj","date":"1697649794","viewed":25,"name":"Damaged VC Shader CIS 5660","username":"sagescherrytree","description":"Simulating a damaged VCR playing a video.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["chromaticaberration"],"hasliked":0,"parentid":"stGBWR","parentname":"Damaged VCR puzzle"},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float falloff = 2.0f;\n\nfloat sawtooth(float x, float freq, float amp) {\n    return (x * freq - floor(x * freq)) * amp;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Hint, it's a few lines of code, and makes use of a tan function :)\n    \n    vec2 offset1 = vec2(0.0);\n    vec2 offset2 = vec2(0.015);\n    vec2 offset3 = vec2(-0.015 + 0.005 * -sin(iTime * 20.f));\n    \n    float yBottom = 0.2f;\n    \n    float dist = clamp(uv.y - yBottom, 0.0f, 1.0f);\n    \n    float offsetLine = fract(iTime * 0.5);\n    \n    if (uv.y > offsetLine && uv.y < 0.2 + offsetLine) {\n        float falloffS = smoothstep(falloff, 0.f, dist);\n        uv.x += sawtooth(tan(uv.y * 200.f), 0.4f, offsetLine) * 0.2f * falloffS;\n    }\n    \n    vec2 warpedUv = uv;\n    \n    float r = texture(iChannel0, warpedUv + offset1).r;\n    float g = texture(iChannel0, warpedUv + offset2).g;\n    float b = texture(iChannel0, warpedUv + offset3).b;\n                          \n    vec3 col = vec3(r, g, b);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}