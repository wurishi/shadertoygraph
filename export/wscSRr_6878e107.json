{"ver":"0.1","info":{"id":"wscSRr","date":"1571299627","viewed":163,"name":"rolling shutter propeller ","username":"matthen","description":"demo of rolling shutter effect on a rotating propeller","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["rotation","rollingshutter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define kNumBlades 5.\n#define kAntiAlias 1.\n\n// from https://www.shadertoy.com/view/ll2GD3\nvec3 gradient(in float t) {\t\n    vec3 a = vec3(.5, .5, .5);\n    vec3 b = vec3(.5, .5, .5);\n    vec3 c = vec3(1., 1., .5);\n    vec3 d = vec3(.8, .9, .3);\n    return a + b * cos(6.28318 * ( c * t + d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col;\n    \n    for (float i = -kAntiAlias; i <= kAntiAlias; i += 1.) {\n\t    for (float j = -kAntiAlias; j <= kAntiAlias; j += 1.) {\n           \n            vec2 sampleCoord = fragCoord + 0.5 * vec2(i, j);\n   \n            vec2 uv = (sampleCoord - .5 *iResolution.xy) / iResolution.y;\n            float time = 2. * iTime;\n            float delay = 2000.*(10. * (.5 + uv.x) + 100. * (.5 + uv.y));\n            time -= 0.0001 * (.5 - .5 * cos(.1 * iTime)) * delay;\n            float theta = atan(uv.x, uv.y);\n            theta += time;\n            float r = length(uv);\n            vec3 rgb = gradient(1. -  3. * r);\n            rgb *= (0.5 + .5 * sin(kNumBlades * theta));\n            float inProp = step(-.6, r - cos(kNumBlades * theta)) * step(0.05, r);\n            col += rgb * (1. - inProp);\n            col += inProp;\n       \t}\n    }\n    \n    col /= pow((2. * kAntiAlias + 1.), 2.);\n    \n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}