{"ver":"0.1","info":{"id":"3dj3DG","date":"1549900447","viewed":261,"name":"Covariance Matrix Experiments","username":"mskr","description":"When having (normally distributed) point clouds, we can use the covariance matrix for various effects.\n\nPick a vector with your mouse, which is transformed by covariance of the points. When the vectors lie over each other, you have found an eigenvector.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["experiments","matrix","covariance"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float xGauss[100] = float[]( -5.31694202e-02, -1.17175723e-01,  9.59755700e-02,  1.05775340e-01,\n        7.01346997e-02, -5.86913929e-03, -1.14235345e-01,  1.13759974e-01,\n       -5.68281294e-02,  3.01906685e-02, -3.47744897e-03, -7.06679264e-02,\n       -9.62378900e-02,  1.51697535e-01,  1.15174126e-01,  1.32098066e-02,\n        1.63368376e-01,  2.48001742e-02,  3.26325806e-02,  2.81376985e-02,\n       -8.97289869e-02, -5.59441651e-02,  1.51185169e-01, -1.78149898e-02,\n       -2.80220307e-02,  6.17178980e-03,  4.81238543e-02, -9.10058107e-02,\n       -7.75148176e-02, -5.41285955e-02, -2.11731779e-01, -1.91401432e-03,\n        1.10247137e-02,  2.33952861e-02, -1.24632387e-01, -1.32962037e-01,\n       -9.08295213e-02,  3.18342486e-02, -1.89062678e-01, -1.65398224e-01,\n        9.23976973e-02,  1.21632312e-01, -7.06630700e-03, -1.29176172e-01,\n        1.31082158e-01, -8.49902662e-02, -2.23690683e-01, -1.38074185e-01,\n       -1.61567435e-02,  4.45771320e-02, -1.64895176e-02,  1.80709371e-04,\n        9.48240770e-02,  4.42629666e-02, -1.78690530e-01, -2.48066776e-02,\n       -1.52064201e-01, -5.96212116e-02,  1.35394847e-01, -1.05066986e-01,\n       -1.09203826e-02,  8.34560326e-02,  5.95787528e-02, -4.67337011e-02,\n        1.39466964e-01, -4.75347393e-02, -1.66377432e-02, -6.57713238e-02,\n        1.44870505e-01, -9.21066125e-02,  9.60608385e-02, -1.14308068e-01,\n       -1.17320971e-01, -2.72620749e-02, -3.56860948e-02,  2.54130381e-02,\n        7.13908186e-02, -9.00322939e-03,  7.22373043e-02, -7.29948532e-03,\n        8.61020897e-03,  1.29141249e-01, -5.11818320e-02,  2.52671301e-01,\n        4.74366706e-02, -4.52236188e-02,  9.06111944e-02, -7.94805604e-05,\n        8.69768751e-02, -1.69260539e-01, -9.89233043e-02,  1.76999977e-01,\n       -1.56490638e-01, -3.65295756e-02, -8.72547797e-02,  5.23502384e-02,\n        1.40965142e-01,  2.58939269e-02,  7.36016575e-03, -6.63525890e-02 );\n\nfloat yGauss[100] = float[]( 0.07209348,  0.05156283,  0.14986105,  0.03605547, -0.14564524,\n       -0.01716755, -0.14064389, -0.10216604,  0.04243579, -0.07787724,\n        0.024607  ,  0.01215069,  0.04697436, -0.04932626, -0.11829905,\n       -0.04709417,  0.11948334, -0.17723744, -0.09823284, -0.08973701,\n        0.06883984, -0.05584713, -0.04505058,  0.00127009, -0.08896908,\n        0.13834817,  0.26178483,  0.05629639, -0.14328768,  0.0160101 ,\n       -0.21978751, -0.03945224,  0.14804777,  0.06216587, -0.12822868,\n       -0.00822867, -0.01537345, -0.01975985, -0.01535708,  0.00532606,\n       -0.02378867, -0.00522904, -0.03822782, -0.00985375,  0.06199884,\n       -0.06973653,  0.04251128, -0.0851615 ,  0.05377839, -0.28593167,\n       -0.11179376,  0.03291006, -0.03321093, -0.08171722, -0.01629695,\n        0.13309995,  0.13640113, -0.13022216,  0.09276038, -0.11509107,\n        0.01124055, -0.15094379, -0.07968508, -0.06443568, -0.13139625,\n       -0.08873724, -0.08586702, -0.20750619,  0.08131094,  0.00900798,\n       -0.01064741, -0.1087703 , -0.03540112, -0.0365003 ,  0.01327031,\n        0.05849211, -0.01531176,  0.11595776,  0.0582087 , -0.11296693,\n       -0.01269082, -0.0966167 ,  0.13590416,  0.01806534,  0.10024924,\n        0.02404355, -0.02254503, -0.06957096,  0.02887068,  0.00075316,\n       -0.26574804,  0.04607586, -0.17781306, -0.08183814, -0.04389176,\n        0.04343414,  0.00697878, -0.11452323, -0.09862926,  0.0232747 );\n\n#define TRANSPARENT vec4(0)\n#define BLACK vec4(0,0,0,1)\n#define WHITE vec4(1)\n#define BLUE vec4(0,0,1,1)\n#define GREEN vec4(0,1,0,1)\n#define ORANGE vec4(1,.6,.3,1)\n\n// Drawing helpers\n\nvec4 drawPoint(vec2 p, vec3 point) {\n    const float SIZE = 0.014;\n    float d = SIZE - length(p - point.xy);\n    float a = smoothstep(.0, .005, d);\n    return mix(TRANSPARENT, WHITE, a);\n}\n\nvec4 drawVector(vec2 p, vec3 origin, vec3 vector) {\n    const float SIZE = 0.014;\n    p -= origin.xy;\n    \n    float projP = dot(vector.xy, p) / length(vector.xy);\n    \n    float d = distance(p, projP*normalize(vector.xy));\n    \n    d = SIZE-d;\n    \n    d = min(d, length(vector.xy)-projP);\n    d = min(d, projP);\n    \n    float a = smoothstep(.0, .005, d);\n    return mix(TRANSPARENT, ORANGE, a);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Coordinate system with origin in center of screen\n    vec2 p = fragCoord/iResolution.y * 2. - vec2(iResolution.x/iResolution.y, 1.);\n    \n    // Mouse vector\n    vec2 m = iMouse.xy/iResolution.y * 2. - vec2(iResolution.x/iResolution.y, 1.);\n    \n    fragColor += drawVector(p, vec3(0), vec3(m,0));\n    \n    \n    // Go over N points, visualize and calc covariance\n    const int N = 40;\n    \n    mat2 cov = mat2(0);\n    \n    for (int i = 0; i < N; i++) {\n        \n        cov[0][0] += (xGauss[i]*xGauss[i]); // These are just the squared distances\n        cov[1][1] += (yGauss[i]*yGauss[i]); // of the points to the origin (= mean in this case).\n        cov[1][0] += (xGauss[i]*yGauss[i]); // Always going to be a symmetric matrix, which\n        cov[0][1] += (xGauss[i]*yGauss[i]); // is good, because we can rely, that eigenvalues will be real numbers.\n        \n    \tfragColor += drawPoint(p, vec3(xGauss[i], yGauss[i], 0));\n    }\n    \n    //cov /= float(N-1); // normally we would scale the sums here, \n    // since variance == mean distance, but it makes everything too small to see\n    \n    \n    // Now show the vector that the covariance produces from the currently picked vector\n    vec2 t = cov * m;\n    \n    fragColor += drawVector(p, vec3(0), vec3(t,0));\n    \n\n}","name":"Image","description":"","type":"image"}]}