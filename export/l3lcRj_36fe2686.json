{"ver":"0.1","info":{"id":"l3lcRj","date":"1726441200","viewed":25,"name":"Voro line 3D","username":"twixuss","description":"Now in 3D and with bigger lines","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","noise","line","distance","pattern","hash","segment"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU 6.2831853\nvec3 hash32(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\nvec4 hash42(vec2 p)\n{\n\tvec4 p4 = fract(vec4(p.xyxy) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\nfloat distance_to_segment(vec3 point, vec3 line_a, vec3 line_b) {\n\tfloat l2 = dot(line_a-line_b,line_a-line_b);\n\tif (l2 == 0.) return distance(point, line_a);\n\n\tfloat t = clamp(dot(point - line_a, line_b - line_a) / l2, 0.0, 1.0);\n\tvec3 projection = mix(line_a, line_b, t);\n\treturn distance(point, projection);\n}\n\n\nstruct Voroline {\n    float dist;\n    vec3 tile;\n    vec3 local;\n};\nVoroline voroline(vec3 uv) {\n    const float line_max_sz = 2.;\n\n    vec3 tile = floor(uv);\n    vec3 local = uv - tile;\n    \n    Voroline result;\n    result.dist = 999.;\n    \n    for (float dz = -ceil(line_max_sz); dz <= ceil(line_max_sz); ++dz) {\n    for (float dy = -ceil(line_max_sz); dy <= ceil(line_max_sz); ++dy) {\n    for (float dx = -ceil(line_max_sz); dx <= ceil(line_max_sz); ++dx) {\n        vec3 d = vec3(dx, dy, dz);\n        \n        vec3 dtile = tile + d;\n        vec3 dlocal = local - d;\n        \n        vec3 p1 = (hash33(dtile      )-0.5)*line_max_sz + 0.5;\n        vec3 p2 = (hash33(dtile + 16.)-0.5)*line_max_sz + 0.5;\n\n        float dist = distance_to_segment(dlocal, p1, p2);\n        if (result.dist > dist) {\n            result.dist = dist;\n            result.tile = dtile;\n            result.local = dlocal;\n        }\n    }\n    }\n    }\n    \n    return result;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.x;\n\n    float scale = 16.0;\n\n    Voroline v = voroline(vec3(uv * scale, iTime));\n    \n    if (uv.x < 1.0/3.0) {\n        fragColor = vec4(vec3(v.dist), 1);\n    } else if (uv.x < 2.0/3.0) {\n        fragColor = vec4(hash33(v.tile), 1);\n    } else {\n        fragColor = vec4(v.local, 1);\n    }\n}","name":"Image","description":"","type":"image"}]}