{"ver":"0.1","info":{"id":"mdSXWc","date":"1670991004","viewed":151,"name":"Music Visualizer mod 1","username":"KingHashish","description":"Testing the new SoundCloud input","likes":6,"published":1,"flags":64,"usePreview":0,"tags":["2d","sound","soundcloud"],"hasliked":0,"parentid":"DdBSDc","parentname":"Fork Fork Input KingHashis 692"},"renderpass":[{"inputs":[{"id":"4lSSzc","filepath":"https://soundcloud.com/krank8/01-hollfield-kuchek","previewfilepath":"https://soundcloud.com/krank8/01-hollfield-kuchek","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[],"code":"#define PI 3.14159265358979323\n#define T .05\n#define ZOOM (0.35*iResolution.y)\n\n#define hue(a) (.6 + .6*cos(2.*PI*a + vec3(0,-2.*PI/3.,2.*PI/3.)))\n#define cmul(z1, z2) (mat2(z1, -z1.y, z1.x)*z2)\n#define cdiv(z1, z2) (z1*mat2(z2, -z2.y, z2.x)/dot(z2, z2))\n#define clog(z) vec2(0.5*log(dot(z,z)), atan(z.y, z.x))\n\nvec2 cexp(vec2 z, vec2 c)\n{\n    float argz, m, a;\n    float lnz = dot(z,z);\n    \n    if (lnz == 0.) return vec2(0., 0.);\n    else {\n        lnz = 0.5*log(lnz);\n        argz = atan(z.y, z.x);\n        \n        m = exp(c.x*lnz - c.y*argz);\n        a = c.x*argz + c.y*lnz;\n        \n        return m*vec2(cos(a), sin(a));\n    }\n}\n\nvec3 hrgb(vec2 w)\n{\n    \n    float m = length(w);\n    float a = (PI + atan(w.y, w.x))/(2.0*PI);\n    \n    m = log(1. + 100.*m);\n\n    float mm = fract(m);\n    float p = fract(mod(a, 1.0/16.0));\n\n    vec3 c;\n\n    c.r =  0.5 - 0.5*sin(2.0*PI*a - PI/2.0 );\n    c.g = (0.5 + 0.5*sin(2.0*PI*a*1.5 - PI/2.0 )) * float(a < 0.66);\n    c.b = (0.5 + 0.5*sin(2.0*PI*a*1.5 + PI/2.0 )) * float(a > 0.33);\n    \n    //c = 0.5*(c + hue(a));\n    \n    c -= 0.3*mm + 2.*p;\n    \n    \n    //if (//length(w) + T/2. > 1. &&\n    //    (fract(w.x) < T || fract(-w.x) < T ||\n    //     fract(w.y) < T || fract(-w.y) < T)) c -= 0.4;\n    \n    return c;\n}\n\nvec2 f(vec2 z, int nn)\n{\n    vec2 w, p, q, g;\n    w = vec2(2., 0.);\n    \n    int n = 10;\n    for (int i=0; i<n; i++) {\n    \n        vec2 z0 = vec2(cos(2.*PI*float(i)/float(n)),\n                       sin(2.*PI*float(i)/float(n)));\n        \n        w = cmul(w, (z - z0));\n    \n    }\n    \n    return w;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec2 z, w, w1, w2, w3, w4;\n    \n    z = fragCoord - iResolution.xy/2.;\n\n    //if (iMouse.xy != vec2(0., 0.)) //to center at origin\n    //    z -= iMouse.xy - iResolution.xy/2.;\n    \n    //w  = f( z/ZOOM, 0 );\n    //fragColor = vec4(hrgb(w), 1.0);\n    \n    z = z/ZOOM;\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    //float wave = texture( iChannel0, vec2(uv.x, 0.25) ).x; //fft\n                 //texture( iChannel0, vec2(uv.x, 0.75) ).x;\n    \n    int tx = int(uv.x*50.0);\n    \n    int n = 10;\n    int j = 1;\n    w = vec2(1., 0.);\n    for (int i=0; i<n; i++) {\n        vec2 z0 = 1.2*vec2(cos(2.*PI*float(i)/float(n)),\n                           sin(2.*PI*float(i)/float(n)));\n                       \n        float fft  = texelFetch( iChannel0, ivec2(i, 0), 0 ).x; \n                       \n        z0 *= log(1.+fft);\n        \n        //log((texture( iChannel0, vec2(i * int(iResolution.x/10.), 0.25) ).x)*1000.)/10.;\n        \n        if (j == 1) \n            w = cmul(w, (z - z0));\n        else\n            w = cdiv(w, (z - z0));\n        \n        j = j ^ 1;\n    }\n    j = 0;\n    for (int i=0; i<n; i++) {\n        vec2 z0 = 1.5*vec2(cos(2.*PI*float(i)/float(n)),\n                           sin(2.*PI*float(i)/float(n)));\n                       \n        float fft  = texelFetch( iChannel0, ivec2(i+ 20, 0), 0 ).x; \n                       \n        z0 *= log(1.+fft);\n        \n        //log((texture( iChannel0, vec2(i * int(iResolution.x/10.), 0.25) ).x)*1000.)/10.;\n        \n        if (j == 1) \n            w = cmul(w, (z - z0));\n        else\n            w = cdiv(w, (z - z0));\n        \n        j = j ^ 1;\n    }\n    fragColor = vec4(hrgb(w), 1.0);\n    \n    \n    //vec2 uv = fragCoord.xy / iResolution.xy;\n    //vec2 uv = fragCoord.xy / vec2(10., 1.);\n    //float wave = texture( iChannel0, vec2(uv.x, 0.25) ).x; //fft\n                 //texture( iChannel0, vec2(uv.x, 0.75) ).x;\n    \n    \n    //fragColor = vec4(float(fragCoord.y < wave*200.), 0., 0., 1.);\n}","name":"Image","description":"","type":"image"}]}