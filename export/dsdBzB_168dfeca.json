{"ver":"0.1","info":{"id":"dsdBzB","date":"1697489909","viewed":37,"name":"broken arc of dots","username":"pkclsoft","description":"This is a merge of a couple of things so that I can bring together a couple of animations into a single object.\nThanks to: https://www.shadertoy.com/view/XtGfzw and https://www.shadertoy.com/view/Mdt3Wl for your inspiration.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["pulse","gl","lights","cross"],"hasliked":0,"parentid":"Mdt3Wl","parentname":"Orbits"},"renderpass":[{"inputs":[],"outputs":[],"code":"// from: https://www.shadertoy.com/view/XtGfzw\n//---------------------------------------------\n// The MIT License\n// Copyright Â© 2015 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Signed distance to a 2D cross. Produces exact exterior and\n// bound interior distance. I need to fix the interior distance.\n\n// List of some other 2D distances: https://www.shadertoy.com/playlist/MXdSRf\n//\n// and iquilezles.org/articles/distfunctions2d\n//---------------------------------------------\n//\n// from: https://www.shadertoy.com/view/Mdt3Wl\n//---------------------------------------------\n//\n\nconst float PI = 3.141592653589793238462643383;\nconst int num = 36;\nconst float anglePerDot = (2.0 * PI) / float(num);\n\nvec2 posOf(int i, vec2 p) {\n    float speed = 4.0;\n    float angle = (iTime/speed) + \n                  anglePerDot * float(i) + anglePerDot/2.0;\n    \n    return p + vec2(cos(angle), sin(angle)) * 0.7;\n}\n\nint prev(int i) {\n   return (i > 0) ? i - 1 : num - 1;\n}\n\nint next(int i) {\n   return (i < num - 1) ? i + 1 : 0;\n}\n\nfloat glow(vec2 q, float strength) {\n    return 0.02 / length(q) * max(strength, 0.2);\n}\n\nfloat sdCross( in vec2 p, in vec2 b, float r ) \n{\n    p = abs(p); p = (p.y>p.x) ? p.yx : p.xy;\n    \n\tvec2  q = p - b;\n    float k = max(q.y,q.x);\n    vec2  w = (k>0.0) ? q : vec2(b.y-p.x,-k);\n    float d = length(max(w,0.0));\n    return ((k>0.0)?d:-d) + r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//Normalize\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    float glowStrength = sin(iTime * 4.0);\n    \n    vec3 destColor = vec3(0.0);    \n\n    for(int i = 0; i < num; i += 1){ \n        // I want two even gaps of dots\n        if ((i / 6) % 3 != 1) {\n            vec2 qm1 = posOf(prev(i), p);\n            vec2 q = posOf(i, p);\n            vec2 qp1 = posOf(next(i), p);\n            float radius = length(q);\n            \n            if (radius < 0.1) {\n                destColor.g = glow(q, glowStrength) + glow(qm1, glowStrength) + glow(qp1, glowStrength);\n            }\n        }\n    }\n    \n    \n    // from: https://www.shadertoy.com/view/XtGfzw\n    //---------------------------------------------\n\n    // size\n\tvec2 si = 0.3 + 0.2*cos( vec2(1.0,2.57) );\n    \n    if (si.x<si.y) {\n        si=si.yx;\n    }\n    \n    // corner radious\n    float ra = 0.1*sin(12.2);\n\n    // distance\n\tfloat d = sdCross( p, si, ra );\n\n    // color\n    if (d <= 0.0) {\n        destColor += vec3(0.25,0.65,0.0);\n\t    destColor = mix( destColor, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(d)) );\n    }\n    \n    fragColor = vec4(destColor, 0.0);\n}\n","name":"Image","description":"","type":"image"}]}