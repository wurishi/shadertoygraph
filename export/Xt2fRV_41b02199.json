{"ver":"0.1","info":{"id":"Xt2fRV","date":"1516536942","viewed":177,"name":"Collatz Experiments","username":"rrx","description":"fork of iq shader: https://www.shadertoy.com/view/llcGDS","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["fractal","collatz"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by inigo quilez - iq/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\n// The visuals for the third part of my video \"Collatz and Self Similarity\": \n//\n// https://www.youtube.com/watch?v=GJDz4kQqTV4\n//\n// (minus the text overlays, which cannot do in the online version of Shadertoy\n\n\n//------------------------------------------------------\n// global\n//------------------------------------------------------\n\n#define AA 2   // supersampling level. Make higher for more quality.\n\nconst float pi = 3.1415926535897932384626433832795; // should be pronounced \"pee\" not \"pie\", dear english speakers!\n\n\n\n//------------------------------------------------------\n// complex numbers\n//------------------------------------------------------\n\nvec2 cadd( vec2 a, float s ) { return vec2( a.x+s, a.y ); }\nvec2 cmul( vec2 a, vec2 b )  { return vec2( a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x ); }\nvec2 cdiv( vec2 a, vec2 b )  { float d = dot(b,b); return vec2( dot(a,b), a.y*b.x - a.x*b.y ) / d; }\nvec2 cmulj( vec2 z ) { return vec2(-z.y,z.x); }\nvec3 cexp( vec2 z ) { return vec3( exp(z.x), vec2( cos(z.y), sin(z.y) ) ); }\nvec3 cexpj( vec2 z ) { return vec3( exp(-z.y), vec2( cos(z.x), sin(z.x) ) ); }\n\n\nvec2 rotate(vec2 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, -s, s, c);\n\treturn m * v;\n}\n\n//------------------------------------------------------\n// Visualization\n//------------------------------------------------------\n\nvec3 render( in vec2 fragCoordScreen, float time )\n{\n    float sc = 4.5;\n    vec2 ce = vec2(.0,0.0);    \n\n    float zoomDepth = 2.5;\n    float eTime = zoomDepth*sin(time/zoomDepth) + zoomDepth;\n    \n    sc = 4.5 * pow( 0.1, eTime );\n        \n    vec2 center = vec2(0.5,0.5);\n    \n    float spinAngle = 0.0;\n\n    vec2 fragCoord = rotate(fragCoordScreen, spinAngle);\n\n    vec2 p = ce + sc*(-iResolution.xy+2.0*fragCoord) / iResolution.x;\n    float e = sc*2.0/iResolution.x;\n    \n    \n    vec2 z = rotate(p, time);\n    //n = vec2(n.x,0.0);\n    \n    const float th = 10000000000.0;\n    \n    vec2 lz = z;\n    float d = 0.0;\n    float f = 0.0;\n    float rmin = th;\n    vec2 dz = vec2(1.0,0.0);\n    vec2 ldz = dz;\n    for( int i=0; i<64; i++ )\n    {\n        vec3 k = cexpj( pi*z );\n        \n        lz = z;\n        ldz = dz;\n\n        dz = cmul( (vec2(8.0,0.0) - k.x*cmul(k.yz,vec2(5.0-5.0*pi*z.y, pi*(5.0*z.x+2.0))))/4.0, dz );\n        \n        //rmin = min( rmin, length(cdiv( cadd(7.0*z,2.0) , cadd(5.0*z,2.0) ) - k.x*k.yz) );\n        \n        z = ( cadd(7.0*z,2.0) - k.x*cmul(k.yz,cadd(5.0*z,2.0)) )/3.9;\n\n\n        float r = length(z);\n        rmin = min( rmin, r );\n        if( r>th ) { d=1.0; break; }\n        f += 1.0;\n    }\n    \n    vec3 col = vec3(0.0);\n    if( d<2.0 )\n    {\n        col = vec3(1.0,0.6,0.2);\n        \n        f += clamp( log(th/length(lz))*1.8, 0.0, 1.0 ) - 1.0;\n        col = 0.5 + 0.5*cos(0.15*f + 1.5 + vec3(0.2,0.9,1.0));\n        col *= 0.027*f;\n        \n        col += 0.01*sin(40.0*atan(lz.x,lz.y));\n        \n        float dis = log(length(lz))*length(lz)/length(ldz);\n        col += 0.025*sqrt(dis/sc) - 0.1;\n        col *= 0.9;\n    }\n    else\n    {\n        col = vec3(0.0,0.0,0.0);\n    }\n\n   \n    //col = clamp( col, 0.0, 1.0 );\n      \n    return col;\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.0);\n    \n#if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        vec2 px = fragCoord + vec2(float(m),float(n))/float(AA);\n    \tcol += render( px, iTime );    \n    }\n    col /= float(AA*AA);\n#else\n        \n    col = render( fragCoord, iTime );\n#endif            \n    \n\tfragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}