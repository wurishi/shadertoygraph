{"ver":"0.1","info":{"id":"Mfl3R8","date":"1702758823","viewed":15,"name":"Purple Conformity","username":"ogrumm","description":"hello world!\n\nif anyone has resources on using differential equations in shaders I'd love to see them! I want to try making weird organic looking stuff with diffusion reaction systems :)","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// a lot of this is taken from\n// https://inspirnathan.com/posts/47-shadertoy-tutorial-part-1/\n// and the repetition stuff is from https://iquilezles.org/articles/sdfrepetition/\nmat2 rot_mat(float radian) {\n    float cosr = cos(radian);\n    float sinr = sin(radian);\n    return mat2(cosr, sinr, -sinr, cosr);\n}\n\nvec2 uv_repeat (vec2 uv, vec2 spacing) {\n    return mod(uv+0.5*spacing,spacing)-0.5*spacing;\n}\n\nvec3 background_color(vec2 uv) \n{\n    uv = rot_mat(-iTime / 2.) * uv;\n    return (cos(uv.yyx - iTime) + vec3(1.)) * 0.2 + vec3(0.9, 0.4, 0.6);\n}\n\nfloat sdf_sub(float sdf1, float sdf2) {\n    return max(-sdf1, sdf2);\n}\n\nfloat sdf_circle(vec2 uv, float radius, vec2 offset) {\n    uv = uv + offset;\n    return length(uv) - radius;\n}\n\nfloat sdf_square(vec2 uv, float half_side, vec2 offset) {\n    uv = uv + offset;\n    return max(abs(uv.x + offset.x), abs(uv.y + offset.y)) - half_side;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    float sinOsc = (sin(iTime)) / 0.5;\n    float cosOsc = cos(iTime + 1.) / 10.;\n    vec3 backCol = background_color(uv);\n    \n    vec2 new_coords = rot_mat(iTime / 2.5) * uv_repeat(uv, vec2(0.1));\n    float shape1 = sdf_circle(uv, 0.2, vec2(0.));\n    float shape2 = sdf_square(new_coords, 0.1, vec2(0.));\n    float distOuter = mix(shape1, shape2, sinOsc);\n    float distInner = mix(shape2, shape1, sinOsc);\n    float sdf = smoothstep(cosOsc - 0.001, cosOsc, sdf_sub(distInner, distOuter));\n    \n    vec3 outcolor = mix(backCol, vec3(0.3, 0.2, 0.4), sdf);\n    // Output to screen\n    fragColor = vec4(outcolor, 1.0);\n}","name":"Image","description":"","type":"image"}]}