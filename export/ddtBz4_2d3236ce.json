{"ver":"0.1","info":{"id":"ddtBz4","date":"1697290808","viewed":78,"name":"D7_LAND","username":"vince5287","description":"First attempt at Terrain","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["land"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TMIN 1e-6\n#define TMAX 20.0\n#define PI 3.14159265\n\nfloat random(vec2 p)\n{\n    return fract(sin(dot(p.xy, vec2(12.2568634, 78.324789)))*234.347748);\n}\n\nfloat noise(in vec2 p)\n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    \n    // Four corners\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n    \n    // smoothstep\n    vec2 u = f*f*(3.0-2.0*f);\n    \n    return mix(a, b, u.x) + (c-a)*u.y*(1.0-u.x) + (d-b)*u.x*u.y;\n}\n\n// Rotate plan each octave\nmat2 M = mat2(0.8,0.6,-0.6,0.8);\n\n#define OCTAVES 10\nfloat fbm(in vec2 p, float H)\n{\n    float G = exp2(-H);\n    float f = 1.0;\n    float a = 1.0;\n    float t = 0.0;\n    \n    for (int i = 0; i < OCTAVES; i++)\n    {\n        t += a*noise(f*p);\n        f *= 2.0;\n        a *= G;\n        p = M*p;\n    }\n    \n    return t;\n}\n\nfloat map(vec3 p)\n{\n    float d2 = p.y + .3;\n    \n    float e = fbm(p.xz/10.0, 0.55);\n    \n    // Carving some valleys with smoothstep\n    e += -2.0*smoothstep(1.0, 2.2, e);\n    d2 += e;\n    d2 *= .4;\n    \n    return d2;\n}\n\nfloat castRay(vec3 ro, vec3 rd)\n{\n    float t = 0.0;\n    for (int i = 0; i < 256; i++)\n    {\n        vec3 de = ro + t*rd;\n        float h = map(de);\n        \n        if (h < TMIN) break;\n        t += h;\n        if (t > TMAX) return -1.0;\n    }\n    \n    return t;\n}\n\nfloat calcShadow(vec3 ro, vec3 rd, float k)\n{\n    float res = 1.0;\n    float t = 0.0001;\n    \n    for (int i = 0; i < 128; i++)\n    {\n        vec3 de = ro + t*rd;\n        float h = map(de);\n        \n        res = min(res, (k * h) / t);\n        \n        if (h < TMIN) break;\n        t += h;\n        if (t > TMAX) break;\n    }\n    \n    return clamp(res, 0.0, 1.0);\n}\n\nvec3 calcNormal(vec3 p)\n{\n    vec2 e = vec2(0.00001, 0.0);\n    return normalize(vec3(map(p + e.xyy) - map(p - e.xyy),\n        map(p + e.yxy) - map(p - e.yxy),\n        map(p + e.yyx) - map(p - e.yyx)\n        ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord - iResolution.xy) / iResolution.y;\n    vec3 col = vec3(0.6,0.6,1.2);\n    \n    //sky\n    col = col - .5*p.y;\n    \n    //vec3 ro = vec3(.0, .4, 1.0);\n    float an = 10.0* iMouse.x/iResolution.x;\n    vec3 ro = vec3(4.0*sin(an), .0, -4.0*cos(an));\n    vec3 ta = vec3(0.0);\n    \n    //Build frame\n    vec3 ww = normalize(ta - ro);\n    vec3 up = vec3(0.0, 1.0, 0.0);\n    vec3 uu = normalize(cross(ww, up));\n    vec3 vv = normalize(cross(uu, ww));\n    \n    vec3 rd = normalize(p.x*uu + p.y*vv + 1.5*ww);\n    \n    float t = castRay(ro, rd);\n    \n    vec3 pos = ro + t*rd;\n    if (t > 0.0)\n    {\n        vec3 lpos = vec3(.6, 1.2, .6);\n        vec3 nor = calcNormal(pos);\n        \n        // Ground\n        vec3 mat = vec3(.4, .2, .1);\n        // Grass\n        float delta = smoothstep(0.9, 1.2, nor.y);\n        mat = mat * (1.0 - delta) + delta*vec3(.1, .8, .2);\n\n        \n        vec3 lcol = vec3(.7, .6, .35);\n        float diff = dot(nor, lpos);\n        float sha = clamp(calcShadow(pos + nor*.01, lpos, 16.0), 0.1, 1.0);\n        diff *= sha;\n        \n        col = mat * lcol * diff + .1;\n        \n        // Fog FOCUS ON BLUE TINT\n        vec3 ex = exp2(-abs(pos.x)*0.05*vec3(1.0, 1.5, 4.0) - abs(pos.z)*0.05*vec3(1.0, 1.5, 4.0));\n        col = col * ex + (1.0 - ex)*vec3(.55);\n\n                    \n    }\n    \n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}