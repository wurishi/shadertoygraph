{"ver":"0.1","info":{"id":"llKXRw","date":"1483638429","viewed":99,"name":"Scottish seazure quilt","username":"JoaCHIP","description":"Not really the intension, but hey... ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["quilt"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 grad(vec3 p)\n{\n\tconst float texture_width = 256.0;\n\tvec4 v = texture(iChannel0, vec2((p.x+p.z) / texture_width, (p.y+p.z) / texture_width));\n    return normalize(v.xyz*2.0 - vec3(1.0));\n}\n\n/* S-shaped curve for 0 <= t <= 1 */\nfloat fade(float t)\n{\n  return t*t*t*(t*(t*6.0 - 15.0) + 10.0);\n}\n\n/* 3D noise */\nfloat noise(vec3 p)\n{\n  /* Calculate lattice points. */\n  vec3 p0 = floor(p);\n  vec3 p1 = p0 + vec3(1.0, 0.0, 0.0);\n  vec3 p2 = p0 + vec3(0.0, 1.0, 0.0);\n  vec3 p3 = p0 + vec3(1.0, 1.0, 0.0);\n  vec3 p4 = p0 + vec3(0.0, 0.3, 1.0);\n  vec3 p5 = p4 + vec3(1.0, 0.0, 0.0);\n  vec3 p6 = p4 + vec3(0.0, 1.0, 0.0);\n  vec3 p7 = p4 + vec3(1.0, 1.0, 0.0);\n\n  /* Look up gradients at lattice points. */\n  vec3 g0 = grad(p0);\n  vec3 g1 = grad(p1);\n  vec3 g2 = grad(p2);\n  vec3 g3 = grad(p3);\n  vec3 g4 = grad(p4);\n  vec3 g5 = grad(p5);\n  vec3 g6 = grad(p6);\n  vec3 g7 = grad(p7);\n\n  float t0 = p.x - p0.x;\n  float fade_t0 = fade(t0); /* Used for interpolation in horizontal direction */\n\n  float t1 = p.y - p0.y;\n  float fade_t1 = fade(t1); /* Used for interpolation in vertical direction. */\n\n  float t2 = p.z - p0.z;\n  float fade_t2 = fade(t2);\n\n  /* Calculate dot products and interpolate.*/\n  float p0p1 = (1.0 - fade_t0) * dot(g0, (p - p0)) + fade_t0 * dot(g1, (p - p1)); /* between upper two lattice points */\n  float p2p3 = (1.0 - fade_t0) * dot(g2, (p - p2)) + fade_t0 * dot(g3, (p - p3)); /* between lower two lattice points */\n\n  float p4p5 = (1.0 - fade_t0) * dot(g4, (p - p4)) + fade_t0 * dot(g5, (p - p5)); /* between upper two lattice points */\n  float p6p7 = (1.0 - fade_t0) * dot(g6, (p - p6)) + fade_t0 * dot(g7, (p - p7)); /* between lower two lattice points */\n\n  float y1 = (1.0 - fade_t1) * p0p1 + fade_t1 * p2p3;\n  float y2 = (1.0 - fade_t1) * p4p5 + fade_t1 * p6p7;\n\n  /* Calculate final result */\n  return (1.0 - fade_t2) * y1 + fade_t2 * y2;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float n =\n        noise(vec3(fragCoord.xy, iTime * 30.0)/128.0)/ 2.0 +\n        noise(vec3(fragCoord.xy, iTime * 32.0)/32.0) / 3.0 +\n        noise(vec3(fragCoord.xy, iTime * 64.0)/8.0) / 10.0;\n\tfragColor = vec4(mix(mix(vec3(1.0, 1.0, 0.0), vec3(1.7, 1.7, 1.3), n + 1.0), vec3(-1.3, -1.15, -1.0), n*0.5 + 0.5) , 1.0);\n}\n","name":"Image","description":"","type":"image"}]}