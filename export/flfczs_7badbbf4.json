{"ver":"0.1","info":{"id":"flfczs","date":"1648508054","viewed":208,"name":"SeaTerrain","username":"MelisaHot","description":"Sea with lights.\nVersion2 : Added sun, softShadows and fresnel.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["sea","water","lights"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Help from https://www.shadertoy.com/view/MtsSRf\nconst int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float PRECISION = 0.001;\n\n/*struct Surface {\n  float sd; // signed distance\n};*/\n\nfloat cosNoise( in vec2 p )\n{\n    return 0.4*( sin(p.x) + sin(p.y));\n}\n\nconst mat2 m2 = mat2(1.6,-1.2,\n                     1.2, 1.6);\nfloat map( in vec3 pos )\n{\n    float h = 0.0;\n    vec2 q = pos.xz*0.5;\n    float s = 0.5;\n   \n    for( int i=0; i<6; i++ )\n    {\n        h += s*cosNoise( q ); \n        q = m2*q*0.9+iTime; \n        q += vec2(2.,5.)-iTime*0.75;\n        s *= 0.5 + 0.2*h;   \n    }\n    h *= 2.0;\n    return pos.y - h;\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n  float depth = MIN_DIST;\n  float co;\n\n  for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n    vec3 p = ro + depth * rd;\n    co = map(p);\n    depth += co;\n    if (co < PRECISION || depth > MAX_DIST) break;\n  }\n  co = depth;\n  return co;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n  vec2 e = vec2(1.0,-1.0) * 0.001;\n  return normalize( e.xyy*map( pos + e.xyy ) + \n                    e.yyx*map( pos + e.yyx ) + \n                    e.yxy*map( pos + e.yxy ) + \n                    e.xxx*map( pos + e.xxx ) );\n}\n\nmat3 camera(vec3 cameraPos, vec3 lookAtPoint) {\n\tvec3 cd = normalize(lookAtPoint - cameraPos); // camera direction\n\tvec3 cr = normalize(cross(vec3(0, 1, 0), cd)); // camera right\n\tvec3 cu = normalize(cross(cd, cr)); // camera up\n\treturn mat3(-cr, cu, -cd);\n}\n\nvec3 phong(vec3 lightDir, vec3 normal, vec3 rd) {\n  // ambient\n  float k_a = 0.6;\n  vec3 i_a = vec3(0.2, 0.5, 0.8);\n  vec3 ambient = k_a * i_a;\n\n  // diffuse\n  float k_d = 0.7;\n  float dotLN = clamp(dot(lightDir, normal), 0., 1.);\n  vec3 i_d = vec3(0., 0.3, 0.7);\n  vec3 diffuse = k_d * dotLN * i_d;\n\n  // specular\n  float k_s = 0.6;\n  float dotRV = clamp(dot(reflect(lightDir, normal), -rd), 0., 1.);\n  vec3 i_s = vec3(.2, 1, 1.);\n  float alpha = 12.;\n  vec3 specular = k_s * pow(dotRV, alpha) * i_s;\n\n  return ambient + diffuse + specular;\n}\n\n\nfloat softShadows( in vec3 ro, in vec3 rd )\n{\n    float res = 1.0;\n    float t = 0.01;\n    for( int i=0; i<64; i++ )\n    {\n        vec3 pos = ro + rd*t;\n        float h = map( pos );\n        res = min( res, max(h,0.0)*164.0/t );\n        if( res<0.001 ) break;\n        t += h*0.5;\n    }\n    \n    return res;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord.xy / iResolution.xy;\n    vec2 q = (-iResolution.xy + 2.1* fragCoord.xy) / iResolution.y;\n     \n    // ray\n    vec3 ro = vec3( .0, 2.2, -2. );\n    vec3 lp = vec3(0., 2, 4); // lookat point (aka camera target\n\n  vec3 rd = camera(ro, lp)*normalize( vec3(q-vec2(-0.2,0.6),-2.0));\n    vec3 light = normalize( vec3( 3., 0.5, 10.0) );\n    vec3 col = vec3( 0.6, 0.8, 1.0 );\n\n    float co = rayMarch(ro, rd);\n    if( co < MAX_DIST )\n    {\n        vec3 pos = ro + co*rd;\n        vec3 nor = calcNormal( pos );\n      \n        vec3 mate = vec3(0.0,0.5,0.8);\n        \n        col = mate;\n           \n      vec3 lightPosition1 = vec3(8, 2, -20);\n      vec3 lightDirection1 = normalize(lightPosition1 - co);\n      float lightIntensity1 = 0.85;\n      \n      vec3 lightPosition2 = vec3(1, 1, 10);\n      vec3 lightDirection2 = normalize(lightPosition2 - co);\n      float lightIntensity2 = 0.8;\n       float sha =softShadows( pos+nor*.01, light );\n       \n       \n      col = lightIntensity1 * phong(lightDirection1, nor, rd);\n      col += lightIntensity2 * phong(lightDirection2, nor , rd)*sha;\n      float fresnel = pow(clamp(1. - dot(nor, -rd), 0., 1.), 5.);\n      vec3 rimColor = vec3(1, 1, 0.6);\n      col += fresnel*rimColor;\n        \n      \n       }\n       \n       \n       \n    float sun = clamp( dot(rd,light), 0., 1.0 );\n    col += vec3(1.0,0.8,0.6)*0.2*pow(sun,30.0);\n    col += vec3(1.0,0.8,0.6)*0.3*pow(sun,30.0);\n    \n    col = sqrt( col );\n    \n    col *= 0.4 + 0.5*pow(16.0*p.x*p.y*(1.0-p.x)*(1.0-p.y),0.2);\n    \n    col = smoothstep( 0.2, 1.0, col );\n\n    col = mix( col, vec3(dot(col,vec3(0.5))), -0.25 );\n    \n\tfragColor = vec4( col, 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}