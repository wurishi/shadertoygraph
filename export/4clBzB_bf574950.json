{"ver":"0.1","info":{"id":"4clBzB","date":"1723935926","viewed":48,"name":"LiveArchive #09","username":"Flopine","description":"I'm digging up old shaders made during VJ sessions to archive them here! \n\nChipwrecked 2022 for Gleetch","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","noise","music","truchet"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGzn","filepath":"/media/a/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3","previewfilepath":"/media/ap/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings, FabriceNeyret and Blackle for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n// Chipwrecked 2022 for Gleetch\n\n\n#define AAstep(thre, val) smoothstep(-.7,.7,(val-thre)/min(0.07,fwidth(val-thre)))\n#define THIRD (1./3.)\n#define EIGHTH (1./8.)\n#define circle(u,s) (length(u)-s)\n\n#define TAU 6.28\n#define time iTime\n#define dt(sp,off) fract((time+off)*sp)\n#define switchanim(sp) (floor(sin(dt(sp,0.)*TAU))+1.)\n#define speed (120./60.)\n\nfloat random(vec2 uv)\n{return fract(sin(dot(uv, vec2(12.2544, 35.1571)))*5418.548416);}\n\nvoid mo (inout vec2 p, vec2 d)\n{\n    p = abs(p)-d;\n    if (p.y>p.x) p=p.yx;\n}\n\nfloat tile1 (vec2 uv)\n{  \n    vec2 uu = uv;\n    float size = 0.5;\n    float diag = step(0., (uv.x+uv.y));   \n    \n    uv += (diag>0.5) ? -size : size;\n    float d = AAstep(size*THIRD, abs(circle(uv,size)));\n    \n    uv = uu;\n    mo(uv, vec2(size));\n    d *= AAstep(EIGHTH*THIRD, abs(circle(uv, EIGHTH)));\n    \n    d += 1.-AAstep(0.001, circle(vec2(abs(uv.x)-size,uv.y), EIGHTH*2.*THIRD));\n    \n    d += 1.-AAstep(0.001, circle(vec2(uv.x,abs(uv.y)-size), EIGHTH*2.*THIRD));\n    \n    return d;\n}\n\nfloat tile2 (vec2 uv)\n{\n    vec2 uu = uv;\n    float size = 0.25;\n    float diag = step(0., (uv.x+uv.y));   \n\n    uv += (diag>0.5) ? -size : size;   \n    float d = AAstep(size*THIRD, abs(circle(uv,size))); \n    \n    uv = uu;\n    mo(uv, vec2(size));\n    return d*AAstep(0.001, circle(uv, EIGHTH*2.*THIRD));\n    \n    return d;\n}\n\nfloat tile3 (vec2 uv)\n{  \n    float size = 0.125;\n    float diag = step(0., (uv.x+uv.y));   \n    \n    uv += (diag>0.5) ? -size : size;   \n    float d = AAstep(size*THIRD, abs(circle(uv,size)));\n    \n    return d;\n}\n\nvec3 grid (inout vec2 uv)\n{\n    uv.y += time*speed;\n    \n    vec2 id = floor(uv);\n    float noise = random( vec2(atan(id.y,id.x)+dt(0.00002,0.),length(id)))*3.;\n    bool switchcolor = false;\n\n    if (mod(id.x+id.y,2.) == 0.) uv.x = -uv.x; \n    if (noise > 1.5) uv.x = -uv.x;\n    float tiles = 0.;\n    if (noise >= 0. && noise < 1.)\n    {     \n        uv = mod(uv, 1.)-.5;\n        tiles = tile1(uv);\n    }\n    \n    if (noise >= 1. && noise < 2.)\n    {\n        switchcolor = true;\n        uv = mod(uv, 0.5)-.25;\n        tiles = tile2(uv);\n    }\n    \n    if (noise >= 2. && noise < 3.1)\n    {\n        uv = mod(uv, 0.25)-.125;\n        tiles = tile3(uv);\n    }\n    tiles = clamp(tiles,0.,1.);\n    tiles = switchcolor ? 1.-tiles:tiles;\n    \n    return vec3(tiles);\n}\n\n#define downsampling(x) (floor((x)*8.)/8.)\n#define soundsampling(p) smoothstep(0.65, 0.7, texture(iChannel0, downsampling(p)).x)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    if (switchanim(speed/2.) >.5) mo(uv,vec2(.5)); \n    \n    vec2 suv = abs(uv);\n    uv *= 4.;\n   \n    float bass = soundsampling(suv);\n    vec3 col = mix(vec3(bass+.1), vec3(0.,bass,bass*.5), grid(uv));\n    \n    col = clamp(col, 0., 1.);\n    col = (texture(iChannel0, downsampling(uv)).x<.5) ? 1.-col*3. : col;\n    \n    fragColor =  vec4(sqrt(col),1.);\n}","name":"Image","description":"","type":"image"}]}