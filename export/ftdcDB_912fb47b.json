{"ver":"0.1","info":{"id":"ftdcDB","date":"1660479789","viewed":134,"name":"RadarSwipe","username":"vladvidican","description":"A simple radar","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["radar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float drawCircle(vec2 center, float radius, float thickness, vec2 pt) {  \n    float v = length(pt - center);\n    float half_thickness = thickness * 0.5;\n    return smoothstep(radius - half_thickness, radius + half_thickness, v) * \n           smoothstep(radius + half_thickness, radius - half_thickness, v);\n}\n\nfloat drawLine(vec2 start, vec2 end, float thickness, vec2 pt) {\n    float half_thickness = thickness * 0.5;\n    float h_t_s = pow(half_thickness, 2.);\n    \n    vec2 v = end - start;\n    vec2 u = pt - start;\n    \n    float proj_length = dot(u, normalize(v));\n    float u_length = length(u);\n    float v_length = length(v);\n    \n    float t = step(proj_length, v_length);\n\n    proj_length = max(0., proj_length);\n    \n    float d_length_sqr = pow(u_length, 2.) - pow(proj_length, 2.); \n    \n    return (1. - smoothstep(0., h_t_s, d_length_sqr)) * t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 _color = vec4(0.,1.0,0.,1.);\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float aspectRatio = iResolution.x / iResolution.y;\n    \n    uv.x *= aspectRatio;\n    \n    vec2 center = vec2(aspectRatio * 0.5,0.5);\n    // circles\n    vec4 color = _color * drawCircle(center, 0.48, 0.01, uv);\n    color += _color * drawCircle(center, 0.24, 0.01, uv);\n    color += _color * drawCircle(center, 0.01, 0.01, uv);\n    \n    // lines\n    vec4 _lineColor = _color;\n    _lineColor.g = 0.3;\n    color += _lineColor * drawLine(vec2(0., center.y), vec2(aspectRatio,center.y), 0.01, uv); \n    color += _lineColor * drawLine(vec2(center.x, 0.), vec2(center.x,1.), 0.01, uv); \n\n    // draw sweep line\n    float speed = 2.0;\n    float xLine = center.x + cos(-iTime * speed) / aspectRatio * 0.85;\n    float yLine = center.y + sin(-iTime * speed) / aspectRatio * 0.85;\n    \n    color += _color * drawLine(center, vec2(xLine, yLine), 0.01, uv);\n    \n    // draw trail\n    vec4 _trailColor = _color;\n    for(float i = 0.; i < 0.5; i+=0.01) {\n         xLine = center.x + cos(-iTime * speed + i) / aspectRatio * 0.85;\n         yLine = center.y + sin(-iTime * speed + i) / aspectRatio * 0.85;\n         _trailColor.g = 0.5 - i;\n         color += _trailColor * drawLine(center, vec2(xLine, yLine), 0.01, uv);\n    }\n  \n    fragColor = color;\n}","name":"Image","description":"","type":"image"}]}