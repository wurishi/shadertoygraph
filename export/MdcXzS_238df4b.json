{"ver":"0.1","info":{"id":"MdcXzS","date":"1459933258","viewed":527,"name":"PainterToy","username":"Gallo","description":"My first publication in Shadertoy, a 2D Painting tool, just for fun.","likes":9,"published":1,"flags":32,"usePreview":0,"tags":["2d","painting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst vec2 BRUSH_COLOR_UV = vec2(31.0, 1.0);\n\n// ------ load / store values functions from https://www.shadertoy.com/view/Ms3XWN ----\nfloat isInside( vec2 p, vec2 c ) { vec2 d = abs(p-0.5-c) - 0.5; return -max(d.x,d.y); }\nfloat isInside( vec2 p, vec4 c ) { vec2 d = abs(p-0.5-c.xy-c.zw*0.5) - 0.5*c.zw - 0.5; return -max(d.x,d.y); }\n\nvec4 loadValue( in vec2 re )\n{\n    return texture( iChannel1, (0.5+re) / iChannelResolution[0].xy, -100.0 );\n}\n\nvoid storeValue( in vec2 re, in vec4 va, inout vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = ( isInside(fragCoord,re) > 0.0 ) ? va : fragColor;\n}\n\nvoid storeValue( in vec4 re, in vec4 va, inout vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = ( isInside(fragCoord,re) > 0.0 ) ? va : fragColor;\n}\n// ------ END load / store values functions ----\n\n\n\nvec3 hsv2rgb(vec3 c) // http://stackoverflow.com/a/17897228/605869\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 c_uv = fragCoord.xy / iResolution.yy;\n    //c_uv = c_uv*2.0-vec2(1,1);\n\t//fragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n    \n    vec4 canvas = texture(iChannel0, uv);\n    //fragColor = canvas;\n    fragColor =  vec4(vec3(1.0 - canvas.a) + (canvas.rgb * (canvas.a)), 1.0);\n    //float srcAlpha = canvas.a;\n    //fragColor = vec4((canvas.rgb * srcAlpha) + (1.0 - srcAlpha), 1.0);\n \n    //fragColor = vec4(1.0);\n    //fragColor += vec4(canvas.rgb * canvas.a, 1.0);\n    //fragColor = vec4(0.5 - length(uv - (iMouse.xy / iResolution.xy)), fragColor.y, fragColor.z, 1);\n\t\n    if(c_uv.x > 1.28)\n    {\n        \n        fragColor = vec4(0.28, 0.28, 0.24, 1.0);\n        \n        //TODO: try to use a single coord system\n        //TODO: Add Brightness picker\n        //color picker from https://www.shadertoy.com/view/XdfSR7\n        c_uv -= vec2(1.532, 0.78);\n        float a = atan(c_uv.x,c_uv.y);\n\t\ta =(a / 3.14159*0.5)+1.0 ;\n\t\tfloat d = smoothstep(0.0, 0.25, length(c_uv)) *1.1;\n\t\tvec3 c = hsv2rgb(vec3(a,d,1.0));\n        if(d <= 1.0)\n        {\n        \tfragColor = vec4(c, 1.0);\n        }\n        \n        c_uv += vec2(0.0, 0.41);\n        float sampleDist = smoothstep(0.0, 0.15, length(c_uv)) * 1.1;\n        if(sampleDist <= 1.0)\n        {\n            vec4 brushColor = loadValue(BRUSH_COLOR_UV);\n        \tfragColor = vec4(brushColor.rgb, 1.0);\n        }\n        \n        //TODO: Add brush radius picker\n        //TODO: Add hardness picker\n        //TODO: Add brush alpha (requires a new buffer)\n    }\n    \n    \n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//canvas buffer\n\nconst vec2 BRUSH_COLOR_UV = vec2(31.0, 1.0);\nconst vec2 BRUSH_SIZE_UV = vec2(31.0, 3.0);\nconst vec2 BRUSH_LAST_COORD_UV = vec2(31.0, 5.0); //lastpaintedCoord.xy, mouseWasPressed, canDrawNextFrame\n\n// ------ load / store values functions from https://www.shadertoy.com/view/Ms3XWN ----\nfloat isInside( vec2 p, vec2 c ) { vec2 d = abs(p-0.5-c) - 0.5; return -max(d.x,d.y); }\nfloat isInside( vec2 p, vec4 c ) { vec2 d = abs(p-0.5-c.xy-c.zw*0.5) - 0.5*c.zw - 0.5; return -max(d.x,d.y); }\n\nvec4 loadValue( in vec2 re )\n{\n    return texture( iChannel1, (0.5+re) / iChannelResolution[0].xy, -100.0 );\n}\n\nvoid storeValue( in vec2 re, in vec4 va, inout vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = ( isInside(fragCoord,re) > 0.0 ) ? va : fragColor;\n}\n\nvoid storeValue( in vec4 re, in vec4 va, inout vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = ( isInside(fragCoord,re) > 0.0 ) ? va : fragColor;\n}\n// ------ END load / store values functions ----\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec4 brushColor = loadValue(BRUSH_COLOR_UV);\n    vec4 brushSizeVec = loadValue(BRUSH_SIZE_UV);\n    vec4 lastCoord = loadValue(BRUSH_LAST_COORD_UV);\n    \n    float brushSize = brushSizeVec.x;\n    float blurHalo = brushSizeVec.y;\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;    \n    vec2 mouse = iMouse.xy / iResolution.xy;\n    //uv = -1.0 + (2.0*uv);\t\n\tuv.x *= iResolution.x/iResolution.y;\n    //mouse = -1.0 + 2.0*mouse;\t\n\tmouse.x *= iResolution.x/iResolution.y;\n    \n    if(iTime < 0.2)\n    {\n    \tfragColor = vec4(0.0, 0.0, 0.0, 0.0);\n    }\n    else\n    {\n        vec4 original = texture(iChannel0, fragCoord.xy / iResolution.xy);\n        float mousePressed = clamp(iMouse.z, 0.0, 1.0);\n        float brushAlpha = 1.0-smoothstep(brushSize * (1.0 - blurHalo), brushSize, length(mouse - uv));\n        brushAlpha = clamp(brushAlpha, 0.0, 1.0) * mousePressed * lastCoord.w;\n        vec4 color = vec4(brushColor.rgb, brushAlpha);\n        \n        //vec4 brushColor = vec4(0.0, 1.0, 0.0, brushAlpha);\n        //float newAlpha = brushAlpha + ((1.0 - brushAlpha) * original.a);\n        //fragColor = vec4(brushColor.rgb, newAlpha);   \n\t\t\n        //canvas to layer\n        //float srcAlpha = canvas.g * canvas.b;\n       // float outAlpha = srcAlpha + ((1.0 - srcAlpha) * original.a);\n        //vec3 outRGB = ((uTintColor.rgb * srcAlpha) + (original.rgb * original.a * (1.0 - srcAlpha))) / outAlpha;\n        //out_Color = vec4(outRGB, outAlpha);\n        \n        float outAlpha = (color.a + (original.a * (1.0 - color.a)));\n        vec3 outRGB = ((color.rgb * color.a) + ((1.0 - color.a) * original.rgb * original.a)) / (outAlpha);\n        outRGB = clamp(outRGB, 0.0, 1.0);\n        fragColor = vec4(outRGB, outAlpha);\n        \n        //float srcAlpha = color.a;\n    \t//fragColor = vec4((color.rgb * srcAlpha) + ((1.0 - srcAlpha) * original.rgb), 1.0);\n    }\n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//configuration & aux values buffer\n\n//anotations: mouse input shadertoy: https://www.shadertoy.com/view/Mss3zH\n\nconst vec2 BRUSH_COLOR_UV = vec2(31.0, 1.0);\nconst vec2 BRUSH_SIZE_UV = vec2(31.0, 3.0); //radius, blurHalo\nconst vec2 BRUSH_LAST_COORD_UV = vec2(31.0, 5.0); //lastpaintedCoord.xy, mouseWasPressed, canDrawNextFrame\n\n// ------ load / store values functions from https://www.shadertoy.com/view/Ms3XWN ----\nfloat isInside( vec2 p, vec2 c ) { vec2 d = abs(p-0.5-c) - 0.5; return -max(d.x,d.y); }\nfloat isInside( vec2 p, vec4 c ) { vec2 d = abs(p-0.5-c.xy-c.zw*0.5) - 0.5*c.zw - 0.5; return -max(d.x,d.y); }\n\nvec4 loadValue( in vec2 re )\n{\n    return texture( iChannel0, (0.5+re) / iChannelResolution[0].xy, -100.0 );\n}\n\nvoid storeValue( in vec2 re, in vec4 va, inout vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = ( isInside(fragCoord,re) > 0.0 ) ? va : fragColor;\n}\n\nvoid storeValue( in vec4 re, in vec4 va, inout vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = ( isInside(fragCoord,re) > 0.0 ) ? va : fragColor;\n}\n// ------ END load / store values functions ----\n\n\nvec3 hsv2rgb(vec3 c) // http://stackoverflow.com/a/17897228/605869\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid getBrushColor(vec2 c_uv, inout vec4 curColor)\n{\n    c_uv -= vec2(1.532, 0.78);\n    float a = atan(c_uv.x,c_uv.y);\n    a =(a / 3.14159*0.5)+1.0 ;\n    float d = smoothstep(0.0, 0.25, length(c_uv)) *1.1;\n\tvec3 c = hsv2rgb(vec3(a,d,1.0));\n    if(d <= 1.0)\n    {\n    \tcurColor.rgb = c;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n   \tvec2 mouse = iMouse.xy / iResolution.xy;\n    float mousePressed = clamp(iMouse.z, 0.0, 1.0);\n    \n    //vec4 brushColor = vec4(1.2,0.0, 0.0, 1.0);\n    vec4 brushColor = loadValue(BRUSH_COLOR_UV);\n    vec4 brushSize = vec4(0.05, 0.2, 0.0, 0.0);\n    \n    fragColor = vec4(0.0,0.0,0.0,1.0);\n    if(mousePressed > 0.0)\n    {\n    \t//getBrushColor(iMouse.xy / iResolution.yy, brushColor);\n    }\n  \t//storeValue(BRUSH_COLOR_UV, brushColor, fragColor, fragCoord);\n    storeValue(BRUSH_SIZE_UV, brushSize, fragColor, fragCoord);\n    //storeValue(BRUSH_SIZE_UV, brushSize, fragColor, fragCoord);\n    \n   \n    //------ prevent drawing over the same coord continuously ----\n    vec4 lastCoord = loadValue(BRUSH_LAST_COORD_UV);\n    float distToDraw = 2.0 / iResolution.x; //TODO: as a variable from prevBrushCoord.z\n    float canDraw = 1.0;\n    \n    if(mousePressed > 0.0 && length(lastCoord.xy - mouse.xy) < distToDraw)\n    {\n            canDraw = 0.0;\n    }\n    \n    if(mousePressed > 0.0 && canDraw > 0.0)\n    {\n        //brushColor = loadValue(BRUSH_COLOR_UV);\n        vec2 newColor = length(lastCoord.xy - mouse.xy) > 0.0 ? (normalize((lastCoord.xy - mouse.xy) / iResolution.yy) + 1.0) * 0.5 : brushColor.rg;\n        brushColor.rg = mix(brushColor.rg, newColor, 0.1);\n        brushColor.b = 0.0;\n        storeValue(BRUSH_COLOR_UV, brushColor, fragColor, fragCoord);\n    }\n    \n    storeValue(BRUSH_LAST_COORD_UV, vec4(mouse.xy, mousePressed, canDraw), fragColor, fragCoord);\n    //------\n        \n}","name":"Buffer B","description":"","type":"buffer"}]}