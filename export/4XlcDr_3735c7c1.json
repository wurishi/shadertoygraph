{"ver":"0.1","info":{"id":"4XlcDr","date":"1726065651","viewed":5,"name":"Pulsing Lab 1: Team Yippee ","username":"kunstpleb","description":"pulsing flower for lab 1, from jill and clara","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["circle"],"hasliked":0,"parentid":"NsVBzy","parentname":"Flower puzzle"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * @author rah, inspired by jonobr1 / http://jonobr1.com/\n */\n\n/* \n * Output circle colors at given center pos and radius\n */\nvec4 circle(vec2 uv, vec2 center, float radius, vec3 color)\n{\n    // Get distance of point from center, get difference from given radius\n\tfloat d = length(center - uv) - radius;\n\tfloat t = clamp(d, 0.0, 1.0);\n    \n    // If point is smaller than radius, set color alpha to 1, otherwise 0\n\treturn vec4(color, 1.0 - t);\n}\n\n\n/*\n * Your work here!\n */\n \n // From IQ\n float sinc(float x, float k )\n{\n    float a = 3.4 *(k*x-1.0);\n    return sin(a)/a;\n}\n\nfloat cubicPulse( float c, float w, float x )\n{\n    x = abs(x - c);\n    if( x>w ) return 0.0;\n    x /= w;\n    return 1.0 - x*x*(3.0-2.0*x);\n}\n\n\nfloat computeRadius(vec2 uv)\n{\n    float radius = 0.25 * iResolution.y;\n    \n    // Centered uv\n    vec2 uvCenter = (2.0f * uv - iResolution.xy);\n    // Get pixel angle around the center\n    float a = atan(uvCenter.x,uvCenter.y);\n    return radius;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy;\n\tvec2 center = iResolution.xy * 0.5;\n\tfloat radius = 0.25 * iResolution.y;\n    \n    // Background layer\n\tvec4 bg = vec4(rgb(255.0, 255.0, 210.0), 1.0);\n\tvec4 red = vec4(rgb(225.0, 50.0, 70.0), 1.0);\n    vec4 color = red;\n    \n    // Get point normalized from center of the screen\n    vec2 p = (2.0*fragCoord.xy-iResolution.xy);\n    \n    // angle of the point\n    float a = atan(p.x,p.y);\n    \n    // scale the radius\n    float r = length(p) * 0.5;\n    \n    // interesting discontinuity\n    float x = 0.9 * sin(a * 25.0f);\n    \n    //float x = bias(sin(a * 4.0), 0.1f);\n        \n    //radius -= x * 45.0 * sin(iTime) + cubicPulse(center.x, 10.0, 10.0)\n    ;\n    //normalize sin output and feed into bias function\n    radius -= x * 45.0 * sin(iTime);\n\t\n\t// Circle\n\tvec4 layer2 = circle(uv, center, radius, vec3(color));\n    \n    radius -= 40.0f;\n    vec4 layer3= circle(uv, center, radius, vec3(bg));\n    \n    fragColor = mix(bg, layer2, layer2.a);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\n * Toolbox functions! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */ \nfloat bias(float t, float b) {\n    return (t / ((((1.0/b) - 2.0)*(1.0 - t))+1.0));\n}\n\n/*\n * Basic Utilities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */\n\n\n/* \n * Rotate an input point about some center by angle\n */\nvec2 rotatePoint2d(vec2 uv, vec2 center, float angle)\n{\n    vec2 rotatedPoint = vec2(uv.x - center.x, uv.y - center.y);\n    float newX = cos(angle) * rotatedPoint.x - sin(angle) * rotatedPoint.y;\n    rotatedPoint.y = sin(angle) * rotatedPoint.x + cos(angle) * rotatedPoint.y;\n    rotatedPoint.x = newX;\n    return rotatedPoint;\n}\n\n/*\n * Make a vec3 color from rgb values [0, 255]\n */\nvec3 rgb(float r, float g, float b)\n{\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n","name":"Common","description":"","type":"common"}]}