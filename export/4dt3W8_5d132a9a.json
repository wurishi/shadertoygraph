{"ver":"0.1","info":{"id":"4dt3W8","date":"1449344927","viewed":386,"name":"3D Lines","username":"vox","description":"Lotsa 3D lines.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["lines"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"//#define iTime (iTime*.1)\n\n#define PI 3.14159265359\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy*2.0-1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n\t//vec3 eye = vec3(0.0, 0.0, 3.0);\n\tvec3 eye = vec3(cos(iTime), sin(iTime*.5), sin(iTime))*4.0;\n    vec3 look = vec3(0.0, 0.0, 0.0);\n    vec3 up = vec3(0.0, 1.0, 0.0);\n    vec3 foward = normalize(look-eye);\n    vec3 right = normalize(cross(foward, up));\n    up = normalize(cross(right, foward));\n    vec3 ray = normalize(foward+uv.x*right+uv.y*up);\n    \n    fragColor = vec4(0.0);\n    \n \tfloat outerCount = 10.0+9.0*sin(iTime);\n \tfloat innerCount = 10.0+9.0*sin(iTime/PI);\n        \n    for(float i = 0.0; i < 100.0; i+=1.0)\n    {\n        if(i >= outerCount)\n            break;\n        \n        float theta1 = i/outerCount*2.0*PI;\n        \n        for(float j = 0.0; j < 100.0; j+=1.0)\n        {\n            if(j >= innerCount)\n                break;\n            \n            float theta2 = theta1+j/innerCount*PI*2.0;\n\n       \t \tvec3 p1 = vec3(cos(theta1)*sin(theta2),\n                           sin(theta1)*sin(theta2),\n                           cos(theta2));\n                           \n       \t \tvec3 p2 = vec3(cos(theta1)*sin(theta2+PI/8.0),\n                           sin(theta1)*sin(theta2+PI/8.0),\n                           cos(theta2+PI/8.0));\n            \n            vec3 ray2 = normalize(p2-p1);\n            \n            float a = dot(ray,ray);\n            float b = dot(ray,ray2);\n            float c = dot(ray2,ray2);\n            float d = dot(ray,eye-p1);\n            float e = dot(eye-p1,ray2);\n            \n            float t1 = (b*e-c*d)/(a*c-b*b);\n            float t2 = (a*e-b*d)/(a*c-b*b);\n            \n            float dist = length((eye+ray*t1)-(p1+ray2*t2));\n            \n            if(t1 > 0.0 && abs(t2) < 5.0+3.0*sin(iTime/PI) && dist < 10.0/iResolution.x)\n            {\n                fragColor = vec4(1.0);\n                return;\n            }\n        }\n    }\n        \n\t//fragColor = vec4(ray,1.0);\n}","name":"","description":"","type":"image"}]}