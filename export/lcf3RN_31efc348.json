{"ver":"0.1","info":{"id":"lcf3RN","date":"1702815397","viewed":42,"name":"branch of the christmas tree","username":"Efim","description":"a branch of a Christmas tree with many needles","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","christmas","sdf","repetition"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI  3.14159265359\n#define TAU 6.28318530718\n#define rot(f) mat2(cos(f), -sin(f), sin(f), cos(f))\n\nconst float dist_infin = 5.0;\n#define nn 128\nconst float eps = 0.001;\n\nvec3 sdfColor;\nvec3 resColor;\nvec3 col1 = vec3(0.13725490196078433, 0.4823529411764706, 0.28627450980392155);\nvec3 col2 = vec3(0.3607843137254902, 0.16470588235294117, 0.027450980392156862);\n\nfloat spine(vec3 p, float l, float x, float z, float th) {\n    vec3 s = vec3(sin(z) * cos(x), sin(z) * sin(x), cos(z));\n    float d = clamp(dot(p, s), 0., l);\n    float r1 = 0.03, r2 = 0.005, r = r1 + (r2 - r1) * d / l;\n    //r *= th;\n    return length(p - d * s) - r;\n\n}\n\nfloat getlon(float lon, float n, float shift) {\n    lon = mod(lon - shift, TAU);\n    float dlon = TAU / n, lon1 = floor(lon / dlon) * dlon;\n    if((lon - lon1) > dlon / 2.)\n        lon1 += dlon;\n    return lon1 + shift;\n}\n\nfloat branch(vec3 p, float l, float r, float ls, float lss, float fi, float n, float th, int prec) {\n    float z = clamp(p.z, 0., l);//, r2 = r - r * z / l*0.6;\n    float d = length(p - vec3(0, 0., z)) - r;\n    sdfColor = col2;\n    \n    float lon = mod(atan(p.y, p.x), TAU), dlon = TAU / n;\n    float j = floor(z / lss);\n    float h1 = j * lss, shift1 = mod(j, 2.) * dlon / 2.;\n    float h3 = h1 - lss, shift3 = mod(j - 1., 2.) * dlon / 2.;\n\n    float lon1 = getlon(lon, n, shift1);//, lon2 = getlon(lon, n, shift2);\n    float lon3 = getlon(lon, n, shift3);//, lon4 = getlon(lon, n, shift4);\n\n    float d2 = dist_infin;\n    d2 = spine(p - vec3(r * cos(lon1), r * sin(lon1), h1), ls, lon1, fi, th);\n    if(d2 < d) {\n        d = d2;\n        sdfColor = col1;\n    }\n\n    if(h3 >= 0.) {\n        d2 = spine(p - vec3(r * cos(lon3), r * sin(lon3), h3), ls, lon3, fi, th);\n        if(d2 < d) {\n            d = d2;\n            sdfColor = col1;\n        }\n    }\n    \n    \n    return d;\n}\n\nfloat iTT = 0.;\n\nfloat map(vec3 p) {\n    float l = 4.;\n\n    \n    \n    p.xy *= rot(PI/3. + iTT);\n    p.yz *= rot(PI/3.+ iTT); \n    \n    //float f = PI /4. * p.z / l;\n    //p.yz *= rot(f);\n    \n    \n    p += vec3(0.0, 0.0, 2.);\n   \n    float d = (length(p - vec3(.5, .5, 2.)) - 0.5)*0.8; //sdDiscoBall(p - vec3(.5, .5, 2.), 0.5);\n    vec3 col = vec3(1.0, 0.2901960784313726, 0.17647058823529413);\n\n    float d2 = dist_infin;\n    d2 = branch(p, l, 0.025, 0.5, 0.3, PI / 6., 20., 1., 1);\n    if(d2 < d) {\n        col = sdfColor;\n        d = d2;\n    }\n\n    p -= vec3(0., 0., l / 2.);\n    vec3 p2 = p;\n    p2.xz *= rot(PI / 4.);\n    d2 = branch(p2, l , 0.025, 0.5, 0.3, PI / 6., 20., 1., 1);\n    if(d2 < d) {\n        col = sdfColor;\n        d = d2;\n    }\n\n    p2 = p;\n    p2.xz *= rot(PI / 6.);\n    d2 = branch(p2, l , 0.025, 0.5, 0.3, PI / 6., 20., 1., 1);\n    if(d2 < d) {\n        col = sdfColor;\n        d = d2;\n    }\n\n    p2 = p;\n    p2.xz *= rot(-PI / 4.);\n    d2 = branch(p2, l , 0.025, 0.5, 0.3, PI / 6., 20., 1., 1);\n    if(d2 < d) {\n        col = sdfColor;\n        d = d2;\n    }\n    sdfColor = col;\n    resColor = sdfColor;\n    return d;\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal(in vec3 pos) {\n    const float h = 0.0001; // replace by an appropriate value\n    const vec2 k = vec2(1, -1);\n    return normalize(k.xyy * map(pos + k.xyy * h) +\n        k.yyx * map(pos + k.yyx * h) +\n        k.yxy * map(pos + k.yxy * h) +\n        k.xxx * map(pos + k.xxx * h));\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l - p), r = normalize(vec3(f.z, 0, -f.x)), u = cross(f, r), c = f * z, i = c + uv.x * r + uv.y * u;\n    return normalize(i);\n}\n\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 2\n#endif\n\n//#define AA 2\n\nvec3 calccolor(vec3 col_in, vec3 backcol, vec3 rd, vec3 light1, vec3 light2, vec3 nor) {\n    vec3 col = col_in;\n    float d = dot(rd, nor);\n    if(d < 0.0)\n        col = backcol;\n\n    nor *= -sign(d);\n    float difu1 = dot(nor, light1);\n    float difu2 = dot(nor, light2);\n    float difu = max(difu1, difu2);\n    col *= clamp(difu, 0.3, 1.0);\n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 light = normalize(vec3(0.0, 1.0, -2.5)); //light\n    vec3 light2 = normalize(vec3(0.0, -1.0, 2.5)); //light\n    vec2 mo = vec2(0.0, 0.0);\n    iTT = iTime/2.;\n    if  (iMouse.z > 0.0)\n    {\n        mo = (-iResolution.xy + 2.0 * (iMouse.xy)) / iResolution.y;\n        iTT = 0.;\n    }\n    vec3 ro = vec3(0.0, 0.0, 2.5); // camera\n    //camera rotation\n    ro.yz *= rot(mo.y * PI);\n    ro.xz *= rot(-mo.x * TAU);\n\n    const float fl = 1.5; // focal length\n    float dist = dist_infin;\n\n    vec3 b1 = vec3(0.6235294117647059, 0.8, 0.9803921568627451), b2 = vec3(0.49019607843137253, 0.6980392156862745, 0.9568627450980393);\n    vec3 bg = mix(b1, b2, vec3(fragCoord.y / iResolution.y));   \n    //antialiasing\n    vec3 tot = vec3(0.0);\n    for(int m = 0; m < AA; m++) for(int n = 0; n < AA; n++) {\n            vec2 o = vec2(float(m), float(n)) / float(AA) - 0.5;\n            vec2 p = (-iResolution.xy + 2.0 * (fragCoord + o)) / iResolution.y;\n            vec3 rd = GetRayDir(p, ro, vec3(0, 0., 0), fl); //ray direction\n            vec3 col = bg * bg; // background  \n            //==========================raymatch=============================\n            float td = 0.;\n            vec3 pos = vec3(0.);\n            for(int i = 0; i < nn; i++) {\n                pos = ro + rd * td;\n                float h = map(pos);\n                if(h < eps || td >= dist_infin)\n                    break;\n                td += h;\n            }\n            if(td < dist_infin) {\n                col = resColor;\n                vec3 nor = calcNormal(pos);\n                col = calccolor(col, col, -rd, light, light2, nor);\n\n            }\n            //==========================raymatch=============================\n            tot += col;\n        }\n    tot = sqrt(tot) / float(AA);\n    //antialiasing\n    fragColor = vec4(tot, 1.0);\n}","name":"Image","description":"","type":"image"}]}