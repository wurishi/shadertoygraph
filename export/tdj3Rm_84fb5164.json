{"ver":"0.1","info":{"id":"tdj3Rm","date":"1548510196","viewed":68,"name":"The sign - pierwsza modyfikacja","username":"aga1212","description":"Zmiana vec2 rightDot = dotCoordinates(0.45) na vec2 rightDot = dotCoordinates(0.7, vec2(0.9)  doprowadziła do zniekształcenia głównego elementu shendera.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["beginer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot(float a){\n    return mat2(cos(a), -sin(a),\n                sin(a), cos(a));\n}\n\nvoid pMod1(inout float p, float size) {\n\tfloat halfsize = size*0.5;\n\tp = mod(p + halfsize, size) - halfsize;\n}\n\nvoid pMod3(inout vec3 p, vec3 size) {\n\tp = mod(p + size*0.1, size) - size*0.5;\n}\n\nfloat sphere(vec3 p, float radius){\n    return length(p)-radius;\n\n}\nvec2 dotCoordinates (float radius, vec2 offset, float t)\n{\n\tvec2 pos;\n    pos.x = offset.x + radius*cos(t);\n    pos.y = offset.y + radius*sin(t)*cos(t);\n    return pos;\n}\n\nfloat map(vec3 p)\n{\n    vec3 q = p;\n\n   // pMod3(q, vec3(0.75, 1., 0.8));\n    pMod3(q, vec3(1., cos(iTime), 0.));\n    \n    \n    pMod1(p.x, 1.);\n    \n    float s1 = sphere(p, 0.75); \n    float s2 = sphere(q, 0.5);\n    float s3 = sphere(q, 0.7);\n    \n    float disp = 0.5 * (abs(cos(p.x*10.)) *\n                       abs(cos(p.y*10.)) *\n                       abs(cos(p.z*10.)) );\n    \t//s1 += disp;\n    \ts1 *= disp;\n    \t\n    \n    \n  \tfloat df1 = min(s1, s2); // Union\n    float df2 = max(s1, s2); // Intersection\n    float df3 = max(s1, -s3); // Difference\n    \n    return df3;\n}\n\n\nfloat trace(vec3 origin, vec3 r) \n{\n  float t = 0.0;\n    for (int i = 0; i < 64; ++i) {\n        vec3 p = origin + r;\n        float d = map(p);\n        t += d;\n        }\n    return t;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 color = vec3(cos(iTime), 0.12, 0.536);\n    uv = uv *2.-1.; // Remap the space to -1. to 1.\n    uv.x *= iResolution.x/iResolution.y;\n    \n    \t\n   \tfloat FOV = 1.0;\n   \tvec3 ray = normalize(vec3(uv, FOV));\n    \n    \n    vec3 origin = vec3(iTime, sin(iTime), cos(iTime));\n    float t = trace(origin, ray);\n    t  *= smoothstep(0., 2., length(uv.y/uv.x)*10.);\n\n    float expFog = 0.5 / (t*t* 0.5);\n    \n    vec3 fc = vec3(expFog);\n    \n\n    fragColor = vec4((fc+color),6.0);\n    vec2 uv1 = fragCoord.xy / iResolution.xy;\n    \n    \n    int tailLength = 250; // Number of tail particles.\n    float particleSize = 0.025; // Radius of the particles.\n    \n    for (int h = tailLength; h > 0; h--)\n    {\n        vec2 rightDot = dotCoordinates(0.7, vec2(0.9, 0.5), iTime - (0.02 * float(h)));\n        vec2 leftDot = dotCoordinates(-0.5, vec2(0.5, 0.5), iTime - (0.02 * float(h))); \n        float d = distance(leftDot, uv1);\n        if (d < particleSize)\n        {\n            fragColor = vec4(uv1.x, uv1.y, 0.8 + 0.2*sin(iTime), 1.0) - float(h)/float(tailLength);   \n        }\n        d = distance(rightDot, uv1);\n        if (d < particleSize)\n        {\n            fragColor = vec4(uv1.x, uv1.y, 0.8 + 0.2*sin(iTime), 1.0) - float(h)/float(tailLength);   \n        }\n    }\n\n}","name":"Image","description":"","type":"image"}]}