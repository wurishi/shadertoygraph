{"ver":"0.1","info":{"id":"ctlyWX","date":"1691254833","viewed":38,"name":"Phong Shader Sphere","username":"unravelwinter","description":"Basic Phong lighting shader, with ambient, diffuse, and specular light.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["phong","lighting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// My notes: https://drive.google.com/file/d/149r9-WZQyBu3_Dl94tWmpO5zUyvVtfCh/view\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1 on y-axis)\n    vec2 uv = 2.0*(fragCoord/iResolution.xy - vec2(0.5, 0.5));\n    uv.x *= iResolution.x/iResolution.y;\n    \n    // Light Colors\n    vec3 AMBIENT_COL = 0.8*vec3(1.0); // White\n    vec3 LIGHT_COL = vec3(0.2, 1.0, 0.2); // Green\n\n    // Material\n    float MAT_SPEC = 80.0; // Shininess\n    vec3 MAT_COL = vec3(0.2, 0.25, 1.0); // Blue #333fff\n    vec3 MAT_COL_2 = vec3(0.2, 0.6, 0.6); // Aqua #339999\n\n    float RADIUS = 0.8;\n\n    vec3 cameraPos = vec3(0.0, 0.0, 2.0);\n    vec3 lightPos = vec3(3.0*sin(2.0*iTime), cos(2.0*iTime), RADIUS+0.3);\n    \n    if (length(uv) <= RADIUS) {\n        // Equation of a sphere:\n        // x^2 + y^2 + z^2 = R^2\n        float z = sqrt(RADIUS*RADIUS - uv.x*uv.x - uv.y*uv.y);\n        \n        vec3 p = vec3(uv, z); // Current position on sphere\n        vec3 normal = normalize(p);\n        vec3 lightDir = normalize(lightPos - p);\n        \n        // Material\n        vec3 m = MAT_COL;\n        if (p.y <= 0.0 && p.y >= -0.4) {\n            m = MAT_COL_2;\n        }\n        \n        // Ambient\n        vec3 ambient = AMBIENT_COL;\n        \n        // Diffuse\n        vec3 diffuse = max(dot(normal, lightDir),0.0)*LIGHT_COL;\n\n        // Specular\n        vec3 view = normalize(cameraPos - p);\n        vec3 reflectDir = normalize(reflect(-lightDir, normal));\n        float specStrength = max(dot(reflectDir, view), 0.0);\n        vec3 specular = 0.3*pow(specStrength, MAT_SPEC)*LIGHT_COL;\n\n        // Output to screen\n        fragColor = vec4(m*(ambient + diffuse) + specular, 1.0);\n    } else {\n        fragColor = vec4(0.7,0.7,0.72,1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}