{"ver":"0.1","info":{"id":"ml33Wn","date":"1682431030","viewed":74,"name":"Stitching - 360","username":"jbouvier","description":"Stiches a texture presenting 2 fisheyes camera feed - side by side","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["stitching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n/*\n - install an extension to chrome \"Web Server\" - setup it up with http, cors - pick up a folder with your images\n - then open the debug console and type (replace the url byt the one targetting the image):\n   \n   gShaderToy.SetTexture(0, {mSrc:'http://127.0.0.1:8887/0031.png', mType:'texture', mID:1, mSampler:{ filter: 'mipmap', wrap: 'repeat', vflip:'true', srgb:'false', internal:'byte' }}); \n   \n   it should add your texture to the channel0\n*/\n\nconst float PI = 3.14159265;\nconst float FOV = PI * 0.54;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    float x = (fragCoord.x)/iResolution.x;\n    float y = (fragCoord.y)/iResolution.y;\n     \n    float cc_x = (x>0.5?x-0.5:x)*2.0-0.5; //-0.5 ... 0.5\n    float cc_y = (y-0.5); //-0.5 ... 0.5\n    \n    float theta = PI * cc_x; // -pi/2 to pi/2\n    float phi = PI * cc_y; // -pi/2 to pi/2\n    \n    // Vector in 3d space\n    vec3 psph;\n    psph.x = cos(phi) * sin(theta);\n    psph.y = cos(phi) * cos(theta);\n    psph.z = sin(phi);\n    \n    // Projection - fisheye angle and radius\n    theta = atan( psph.z, psph.x );\n    phi = atan( sqrt(psph.x*psph.x+psph.z*psph.z) , psph.y);\n    float r = phi / FOV;\n    \n    // Rotation\n    float rot = x>0.5? 0.0 : 0.0;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = vec2(1.0-(0.25+0.25*r*cos(theta+rot)+(x>0.5?0.5:0.0)),1.0-(0.5*r*sin(theta+rot)+0.5));\n\n    // sample texture and output to screen\n    fragColor = texture(iChannel0, uv);\n       \n}","name":"Image","description":"","type":"image"}]}