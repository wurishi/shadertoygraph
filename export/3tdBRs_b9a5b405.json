{"ver":"0.1","info":{"id":"3tdBRs","date":"1613276585","viewed":160,"name":"Distance to Box","username":"oneshade","description":"Finally derived the distance to a box myself ;)","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["2d","sdf","box","oneliner"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdBox(in vec2 p, in vec2 s) {\n    return length(p - clamp(p, -s, s)) + min(0.0, max(abs(p.x) - s.x, abs(p.y) - s.y));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    float unit = 2.0 / iResolution.y;\n    float time = iTime * 2.0;\n\n    float w = 0.5 + 0.25 * sin(iTime);\n    float h = 0.25 + 0.2 * cos(iTime);\n    float d = sdBox(uv, vec2(w, h));\n\n    // Nice colors from iq\n    vec3 color = 1.0 - sign(d) * vec3(0.1, 0.4, 0.7);\n\tcolor *= 1.0 - exp(-4.0 * abs(d));\n\tcolor *= 0.8 + 0.2 * cos(140.0 * d);\n\tcolor = mix(color, vec3(1.0), 1.0 - smoothstep(0.0, 0.015, abs(d)));\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}