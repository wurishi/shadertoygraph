{"ver":"0.1","info":{"id":"ddy3Dd","date":"1679213072","viewed":66,"name":"Colored line","username":"mikelsv","description":"Draw colored line.\n+ Moving\n+ Color list\n+ Mouse control (Click to screen)","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["line","color"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592653589793\n\n// -- Configure --\n\n#define RATE 4. // Color rate\n#define MOVE -3. // Move by iTime\n\nfloat sdBox(vec2 lw, vec2 uv){\n    vec2 d = abs(uv)-lw;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nmat2 MglRotate(float angle){\n\tfloat s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, s, -s, c);\n}\n\nfloat sdLine(vec2 from, vec2 to, vec2 coord){\n    float angle;\n    vec2 a = from - to;\n    angle = atan(a.x, a.y);\n    \n    coord -= from + (to - from) / 2.;\n    coord *= MglRotate(-angle);\n\n    // Yes, line it's box. Lol :)\n    return sdBox(vec2(0.01, length(to - from) / 2.), coord);\n}\n\nfloat sstep(float a, float b) {\n    return smoothstep(a - .005, a + .005, b);\n}\n\n// Color list \nvec3 lineColors[] = vec3[](\n    vec3(1., 0., 0.), // Red\n    vec3(0., 1., 0.), // Green\n    vec3(0., 0., 1.), // Blue\n    vec3(1., 1., 0.), // Yellow\n    vec3(0., 1., 1.), // Cyan\n    vec3(1., 1., 1.) // White\n);\n\n// Points: from, to, coordinate positions\nvec4 colorLine(vec2 from, vec2 to, vec2 pos){\n    // Draw line\n    float r = sdLine(from, to, pos);\n    r = sstep(r, 0.035);\n\n    if(r <= 0.)\n        return vec4(0.);\n    \n    // Cos alpha\n    float cosa = length(from - pos) * length(from - pos) - length(to - pos) * length(to - pos)\n        + length(from - to) * length(from - to);\n    cosa = cosa / (2. * length(from - pos) * length(from - to));\n    \n    // Length 'from' to 'pos'\n    float len = length(from - pos) * cosa * RATE;\n    len += iTime * MOVE;\n\n    // Get color id\n    int c = int(mod(len, float(lineColors.length())));\n    return vec4(lineColors[c], r);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uc = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n    vec2 um = (2.0 * iMouse.xy - iResolution.xy) / iResolution.y;\n\n    // Time varying pixel color\n    vec3 col;// = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec4 res;\n\n    // Line 1 - Horizontal\n    res = colorLine(vec2(-1.6, 0.9), vec2(1.7, 0.9), uc);\n    col += res.xyz * res.w;\n    \n    // Line 2 - Vertical\n    res = colorLine(vec2(-1.7, .95), vec2(-1.7, -.95), uc);\n    col += res.xyz * res.w;\n    \n    // Line 3 - Both\n    res = colorLine(vec2(-1.6, -.9), vec2(1.7, 0.8), uc);\n    col += res.xyz * res.w;\n    \n    // Line 4 - Mouse control\n    res = colorLine(vec2(-1.6, .8), um, uc);\n    col += res.xyz * res.w;\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}