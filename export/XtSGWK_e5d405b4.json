{"ver":"0.1","info":{"id":"XtSGWK","date":"1432232580","viewed":920,"name":"Liquid gold","username":"ayamflow","description":"NaÃ¯ve implementation of Inigo Quilez article on \"Fractal & Domain Warping\"\nhttps://iquilezles.org/articles/warp/warp.htm\n\nusing Ashima noise2D","likes":17,"published":1,"flags":0,"usePreview":1,"tags":["2d","fractal","noise","perlin","warp"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// Let's start with some Ashima noise\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n\t\t+ i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n// End of Ashima noise!\n\nfloat noise(vec2 p) {\n//\tfloat acc = snoise(p) * 32.0 + snoise(p * 2.0) * 16.0 + snoise(p * 4.0) * 8.0 + snoise(p * 8.0) * 4.0 + snoise(p * 16.0) * 2.0 + snoise(p * 32.0);\n//\tfloat div = 1.0 + 2.0 + 4.0 + 8.0 + 16.0 + 32.0;\n\tfloat acc = snoise(p) * 16.0 + snoise(p * 2.0) * 8.0 + snoise(p * 4.0) * 4.0 + snoise(p * 8.0) * 2.0 + snoise(p * 16.0) * 1.0;\n\tfloat div = 1.0 + 2.0 + 4.0 + 8.0 + 16.0;\n    return acc / div;\n}\n\nfloat pattern(vec2 p, float time, out vec2 q, out vec2 r) {\n    q.x = noise(p + vec2(1.0, 2.3));\n    q.y = noise(p + vec2(1.1 + time, 5.3 + time));\n    \n    r.x = noise(vec2(p + 4.0 * q + vec2(2.2 + time, 4.1 + time)));\n    r.y = noise(vec2(p + 4.0 * q + vec2(2.4 + time, 8.2 + time)));\n    \n//    return noise(p); // 1st iteration\n//\t  return noise(p + 4.0 * q); 2nd iteration\n\treturn noise(p + 4.0 * r);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tvec2 uv = fragCoord.xy / iResolution.xy;\n    float time = iTime * 0.1;\n    vec2 q = vec2(0.0, 0.0);\n    vec2 r = vec2(0.0, 0.0);\n\n    float t = pattern(uv, time, q, r);\n    vec4 tex = texture(iChannel0, (q + r) / 2.0);\n//    tex = mix(tex, vec4(length(r)), 0.9);\n//    fragColor = vec4(length(r), length(q), t, 1.0);\n\tfragColor = tex;\n}","name":"","description":"","type":"image"}]}