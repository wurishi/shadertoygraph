{"ver":"0.1","info":{"id":"lXBXRR","date":"1710241082","viewed":108,"name":"CaveStructure VFX","username":"Eboman","description":"Mouse x = FX amount\nMouse y = FX parameter control\nPress key 1 to 9 on keyboard = FX parameter on/off\nFX parameter descriptions in top shader comment","likes":8,"published":1,"flags":16,"usePreview":0,"tags":["vfx","cave","flythrough"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n/*\n\nCONTROLS_________________:\n\nMouse x = FX amount\nMouse y = FX parameter control\nPress key 1 to 7 on keyboard = FX parameter on/off\n\nFX parameters:\n1 = Circle size\n2 = Object repetition size\n3 = Texture zoom / tile\n4 = Spheriness\n5 = Cube size\n6 = Interrupt rotation\n7 = Change auto rotation\n8 = Background light on/off\n9 = Shadow + light on/off\n\nCREDITS__________________:\n\nBased on the CaveStructure shader by dila  \nhttps://www.shadertoy.com/view/4l2XW1\n\nRemixed and turned into a video effect by:\nwww.eboman.com\n\n*/\n\n#define uMzero  (1.-(iMouse.x/iResolution.x))\n#define uMone   (iMouse.y/iResolution.y) * kp(49) + (0.6 *(1.-kp(49))) \n#define uMtwo   (iMouse.y/iResolution.y) * kp(50) + (1. *(1.-kp(50)))\n#define uMthree  (iMouse.y/iResolution.y) * kp(51) + (0.5 *(1.-kp(51)))\n#define uMfour  (iMouse.y/iResolution.y) * kp(52) + (0.5 *(1.-kp(52)))\n#define uMfive  (iMouse.y/iResolution.y) * kp(53) + (0.5 *(1.-kp(53)))\n#define uMsix   ((iMouse.y/iResolution.y) * kp(54) + (1. *(1.-kp(54))))\n#define uMseven (iMouse.y/iResolution.y) * kp(55) + (1. *(1.-kp(55)))\n#define uMeight (iMouse.y/iResolution.y) * kp(56) + (0. *(1.-kp(56)))\n//#define uMnine (iMouse.y/iResolution.y) * kp(57) + (1. *(1.-kp(57)))\n\nconst float pi = 3.14159;\n\nfloat kp(int k){\n    float kp = texelFetch( iChannel1, ivec2(k,2), 0 ).x;\n    return kp;\n}\n\nmat3 xrot(float t)\n{\n    return mat3(1.0, 0.0, 0.0,\n                0.0, cos(t), -sin(t),\n                0.0, sin(t), cos(t));\n}\n\nmat3 yrot(float t)\n{\n    return mat3(cos(t), 0.0, -sin(t),\n                0.0, 1.0, 0.0,\n                sin(t), 0.0, cos(t));\n}\n\nmat3 zrot(float t)\n{\n    return mat3(cos(t), -sin(t), 0.0,\n                sin(t), cos(t), 0.0,\n                0.0, 0.0, 1.0);\n}\n\nfloat sdBoxXY( vec3 p, float b )\n{\n  vec2 d = abs(p.xy) - b*(uMfive*2.);\n  return min(max(d.x,d.y),0.0) +\n         length(max(d,0.0));\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b*(uMone*1.14);\n  return min(max(d.x,max(d.y,d.z)),0.0) +\n         length(max(d,0.0));\n}\n\nfloat sphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat map(vec3 p)\n{\n    p.xy += vec2(sin(p.z), cos(p.z)) * 0.25;\n    \n    vec3 q = fract(p) * 2.0 - 1.0 * mix(0., 1., pow(uMtwo, 2.));\n    \n    vec3 f = floor(p + 0.5);\n    \n    vec3 k = abs(normalize(q));\n    \n    float a = -sdBox(q, k+0.1);\n    \n    float b = -sphere(q, 1.3*(0.5*uMfour)+0.75);\n    \n    float d = max(-b, a);\n    \n    float tt = 0.5+0.5*sin(p.z);\n    float tr = mix(0.125, 1.0, tt);\n    \n    float c = sdBoxXY(p - 0.5, tr);\n    \n    return max(-c, d);\n}\n\nvec3 normal(vec3 p)\n{\n    vec3 o = vec3(0.01, 0.0, 0.0);\n    return normalize(vec3(map(p+o.xyy) - map(p-o.xyy),\n                          map(p+o.yxy) - map(p-o.yxy),\n                          map(p+o.yyx) - map(p-o.yyx)));\n}\n\nfloat trace(vec3 o, vec3 r)\n{\n    float t = 0.0;\n    for (int i = 0; i < 64; ++i) {\n        vec3 p = o + r * t;\n        float d = map(p);\n        t += d * 0.3;\n    }\n    return t;\n}\n\nvec3 times(float n)\n{\n    float k = (uMsix*2.) + fract(iTime*n*floor(uMseven+0.8)) * 3.0;\n    vec3 t = vec3(clamp(k, 0.0, 1.0),\n                clamp(k-1.0, 0.0, 1.0),\n                clamp(k-2.0, 0.0, 1.0));\n    return floor(iTime*n*floor(uMseven+0.5)) + smoothstep(0.0, 1.0, t);\n}\n\nvec3 textex(vec3 p)\n{\n    vec3 ta = texture(iChannel0, fract(p.yz*0.5*(uMone*15.)+0.5)).xyz;\n    vec3 tb = texture(iChannel0, fract(p.xz*0.5*(uMone*15.)+0.5)).xyz;\n    vec3 tc = texture(iChannel0, fract(p.xy*0.5*(uMone*15.)+0.5)).xyz;\n    return (ta + tb + tc) / 3.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    float mx = iMouse.x/iResolution.x;\n    float my = pow(iMouse.y/iResolution.y, 0.5);\n    \n    vec3 r = normalize(vec3(uv, 1.0 - dot(uv,uv) * 0.33));\n    vec3 o = vec3(0.5, 0.5, iTime*floor(uMsix));\n    o.xy -= vec2(sin(o.z), cos(o.z)) * 0.25;\n    \n    vec3 ts = times(0.213);\n    r *= xrot(ts.y+ts.z) * yrot(ts.x+ts.z) * zrot(ts.x+ts.y);\n    \n    float t = trace(o, r);\n    vec3 w = o + r * t;\n    vec3 sn = normal(w);\n    float fd = map(w);\n\n    \n    float prod = clamp(dot(r, -sn), 0.0, 1.0);\n    \n    vec3 colfar = vec3(1.0, 0.0, 0.0);\n    vec3 colnear = vec3(1.0, 1.0, 1.0);\n    \n    float colk = 1.0 / (1.0 + t * t * 0.1);\n    vec3 col = mix(colfar, colnear, colk);\n\n    col *= textex(w * 1.0) * colk;\n\n    vec2 uv2 = fragCoord.xy / iResolution.xy;\n    vec3 col2 = texture(iChannel0, mix(uv2, fract(w.xy*0.05*(pow(uMthree,2.)*200.)+0.5), uMzero)).rgb;\n    \n    float aoc = 1.0 / (1.0 + fd * 100.0);\n\n    vec3 fc = col2 * aoc * prod;\n    \n    vec3 col3 = mix(col2, fc + min(vec3(w.y)/4., vec3(1., 0.75, 0.8)), (1.-kp(57))*uMzero);  \n    vec3 col4 = col3;\n    \n    float t2 = t;     \n    float s = 0.;\n    float vol = 0.0;\n    float tt2 = mod(iTime, 10.);\n    vec3 lp = normalize(vec3(uv, 1.0 - dot(uv,uv) * 0.33));\n    lp.y += (smoothstep(-1.,1.,sin(tt2))*2.-1.)*18.;\n    lp.z = (0.-(smoothstep(-1.,1.,cos(tt2))*2.-1.)*9.);\n   \tfloat st= 0.1+length(o-lp)*0.02;\n    for(int i = 0; i <40; i++) {\n        if(s>t2&&t2>0.) break;\n        vec3 w2 = o+r*s;      \n        float dis = length(lp-w2),\n        g = trace(w2,normalize(lp-w2)),\n        l = step(0.0, (g < dis) ? -g : 1.);  \n        l *= .3/dis;\n        vol += l; \n        s += st;\n    } \n    \n    col3 += vec3(sin(iTime*0.7)/4.+0.15,cos(iTime)/4.+0.15,1.)*vol;\n    \n    vec3 fcolif  = mix(col3, col4, kp(56));\n\n    \n   // Interface\n   \n    vec2 uvif = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n    uvif -= 0.5; \n    uvif /= vec2(iResolution.y / iResolution.x, 1);\n    \n    fcolif = mix( fcolif, vec3(0.,1.,1.), \n        (1.-smoothstep(0.3,0.31,length(uvif-vec2(-0.84,0.45))*15.))*(1.-mx) );\n    fcolif = mix( fcolif, vec3(0.,1.,1.), \n        (1.0-smoothstep(0.0,0.06,abs(length(uvif-vec2(-0.84,0.45))*15.-0.3))));\n        \n    fcolif = mix( fcolif, vec3(1.0*my,0.0,0.0), \n        (1.-smoothstep(0.3,0.31,length(uvif-vec2(-0.84,0.38))*15.))*kp(49)*my );\n    fcolif = mix( fcolif, vec3(1.0*kp(49)+0.5,1.0*(kp(49)*-1.5)+0.5,1.0*(kp(49)*-1.5)+0.5), \n        (1.0-smoothstep(0.0,0.06,abs(length(uvif-vec2(-0.84,0.38))*15.-0.3))));\n\n    fcolif = mix( fcolif, vec3(1.0*my,0.0,0.0), \n        (1.-smoothstep(0.3,0.31,length(uvif-vec2(-0.84,0.31))*15.))*kp(50)*my );\n    fcolif = mix( fcolif, vec3(1.0*kp(50)+0.5,1.0*(kp(50)*-1.5)+0.5,1.0*(kp(50)*-1.5)+0.5), \n        (1.0-smoothstep(0.0,0.06,abs(length(uvif-vec2(-0.84,0.31))*15.-0.3))));\n        \n    fcolif = mix( fcolif, vec3(1.0*my,0.0,0.0), \n        (1.-smoothstep(0.3,0.31,length(uvif-vec2(-0.84,0.24))*15.))*kp(51)*my );\n    fcolif = mix( fcolif, vec3(1.0*kp(51)+0.5,1.0*(kp(51)*-1.5)+0.5,1.0*(kp(51)*-1.5)+0.5), \n        (1.0-smoothstep(0.0,0.06,abs(length(uvif-vec2(-0.84,0.24))*15.-0.3))));\n        \n    fcolif = mix( fcolif, vec3(1.0*my,0.0,0.0), \n        (1.-smoothstep(0.3,0.31,length(uvif-vec2(-0.84,0.17))*15.))*kp(52)*my );\n    fcolif = mix( fcolif, vec3(1.0*kp(52)+0.5,1.0*(kp(52)*-1.5)+0.5,1.0*(kp(52)*-1.5)+0.5), \n        (1.0-smoothstep(0.0,0.06,abs(length(uvif-vec2(-0.84,0.17))*15.-0.3))));\n        \n    fcolif = mix( fcolif, vec3(1.0*my,0.0,0.0), \n        (1.-smoothstep(0.3,0.31,length(uvif-vec2(-0.84,0.10))*15.))*kp(53)*my );\n    fcolif = mix( fcolif, vec3(1.0*kp(53)+0.5,1.0*(kp(53)*-1.5)+0.5,1.0*(kp(53)*-1.5)+0.5), \n        (1.0-smoothstep(0.0,0.06,abs(length(uvif-vec2(-0.84,0.10))*15.-0.3))));\n        \n    fcolif = mix( fcolif, vec3(1.0*my,0.0,0.0), \n        (1.-smoothstep(0.3,0.31,length(uvif-vec2(-0.84,0.03))*15.))*kp(54)*my );\n    fcolif = mix( fcolif, vec3(1.0*kp(54)+0.5,1.0*(kp(54)*-1.5)+0.5,1.0*(kp(54)*-1.5)+0.5), \n        (1.0-smoothstep(0.0,0.06,abs(length(uvif-vec2(-0.84,0.03))*15.-0.3))));\n     \n    fcolif = mix( fcolif, vec3(1.0*my,0.0,0.0), \n        (1.-smoothstep(0.3,0.31,length(uvif-vec2(-0.84,-0.04))*15.))*kp(55)*my );\n    fcolif = mix( fcolif, vec3(1.0*kp(55)+0.5,1.0*(kp(55)*-1.5)+0.5,1.0*(kp(55)*-1.5)+0.5), \n        (1.0-smoothstep(0.0,0.06,abs(length(uvif-vec2(-0.84,-0.04))*15.-0.3))));\n       \n    fcolif = mix( fcolif, vec3(1.0*my,0.0,0.0), \n        (1.-smoothstep(0.3,0.31,length(uvif-vec2(-0.84,-0.11))*15.))*kp(56)*my );\n    fcolif = mix( fcolif, vec3(1.0*kp(56)+0.5,1.0*(kp(56)*-1.5)+0.5,1.0*(kp(56)*-1.5)+0.5), \n        (1.0-smoothstep(0.0,0.06,abs(length(uvif-vec2(-0.84,-0.11))*15.-0.3))));\n        \n    fcolif = mix( fcolif, vec3(1.0,0.0,0.0), \n        (1.-smoothstep(0.3,0.31,length(uvif-vec2(-0.84,-0.18))*15.))*kp(57) );\n    fcolif = mix( fcolif, vec3(1.0*kp(57)+0.5,1.0*(kp(57)*-1.5)+0.5,1.0*(kp(57)*-1.5)+0.5), \n        (1.0-smoothstep(0.0,0.06,abs(length(uvif-vec2(-0.84,-0.18))*15.-0.3))));\n   \n    // Final output\n    \n    fragColor = vec4(fcolif,1.0);\n\n}\n\n\n\n\n\n\n\n\n","name":"Image","description":"","type":"image"}]}