{"ver":"0.1","info":{"id":"7syyRG","date":"1655049684","viewed":92,"name":"Belgian sunday afternoon","username":"snolot","description":"test raymarching with no shading. it's sunday will go to drink ;) last shader of the week full of  learning, Thanks to everybody who teach me things, and to all who play on shadertoy.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define FAR 80.0\n#define DISTANCE_BIAS 0.26\n#define HASHSCALE1 .1031\n#define EPSILON 0.001\n\nmat2 rot(float a) {\n    return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\n\nvec2 map(vec3 rp){\n    vec2 res = vec2(-0.01);\n    \n    float t = iTime * .3;\n \n    vec3 pos = rp; - vec3(1.0, -.5, 2.0);\n\n    pos = abs(pos.xyz + 1.0) - 1.0;\n    pos= pos * 2. /clamp(dot(pos.xyz,pos.xyz),.5, 1.)-vec3(0.5,1.,0.5);\n    \n    vec3 b = vec3(1.0, 1.0, 1.0);\n   \n    pos = mod(pos, 1.*b)-0.5*b;\n\n   \n    vec2 d = vec2(length(pos) -.55,  2.0);\n    res  = (res.x < d.x) ? res : d;\n    \n    d = vec2(length(pos) -.8-sin(iTime*.2)*.1,  3.0);\n    res  = (res.x> d.x) ? -res : d;\n    \n    return res;\n}\n\n\n// swirly color thing\nvec3 oc(vec3 p, float id)\n{\n    float f = step(.5,fract((p.x + p.y + p.z)*5.));\n    float f2 = step(.5,fract((p.x-.5 + p.y-.5 + p.z-.5)*5.));\n    p.xy *= rot(p.z*0.64);\n    vec3 c = (id > 1.) ? vec3(1.,.7,0.) : vec3(1.3,.1,.1);\n    \n    vec3 col = c;// mix(vec3(1.0, 0.7, 0.) *c, vec3(1., .2, 0.0) *c,  smoothstep(1.0, 0., abs(p.z)-.3));\n    return col;\n}\n\nvec2 trace(vec3 ro, vec3 rd)\n{\n    vec2 t = vec2(0.0,1.0);\n    vec2 d = vec2(0.0,1.0); \n   \n    for (int i = 0; i < 100; i++) \n    {\n        d = map(ro + rd*t.x);\n       \n        if(abs(d.x)<EPSILON || t.x > FAR) break;\n         \n        \n        t.x += d.x * DISTANCE_BIAS;\n        t.y = d.y;\n    }\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.0 * vec2(fragCoord.xy - 0.5*iResolution.xy)/iResolution.y; \n    vec2 mo = (3.0*iMouse.xy - 1.5*iResolution.xy)/iResolution.y;\n    if(iMouse.z <= 0.0) mo = vec2(0);\n \n \n    vec3 ro = vec3(0.0, 0.0, 10.0); \n    ro.y += sin(ro.z + iTime + ro.x* 1.0)*0.4;\n    ro.xy += mo;\n    vec3 rd = normalize(vec3(uv,2.0));\n  \n    // fish eye\n    rd = normalize(vec3(uv, 1.0 - dot(uv, uv) * 0.75));\n    \n    // light position\n    vec3 lp = ro + vec3(0.0, 1.0, -0.5);\n    \n    \n    // Scene\n    vec2 t = trace(ro, rd);\n    vec3 col = vec3(0.0);\n    \n    vec3 ao = oc(ro+rd*t.x, t.x);\n    \n    if(t.y > 0.0)\n        col = ao;//mix(vec3(1.0,.7,0.), ao, ro.y);\n    // Output to screen\n    \n    fragColor = vec4(col,  1.0);\n}","name":"Image","description":"","type":"image"}]}