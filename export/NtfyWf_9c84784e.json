{"ver":"0.1","info":{"id":"NtfyWf","date":"1648772179","viewed":102,"name":"Cube Tiles","username":"Wabrion","description":"Cubes","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["cubes","tile","tiles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define LINES  0\n//#define LINES 1\n\n#define ZOOM      5.0\n#define THICKNESS 0.015\n#define RX        1.0 / min(iResolution.x, iResolution.y)\n\n#define FST_COLOR vec3(0.0, 1.0, 0.83)\n#define SND_COLOR vec3(1.0, 0.53, 0.77)\n\n//#define FILL(a, b, c) step(-0.17, -abs(tiles.x*0.6666 + a)) * step(-0.332, -abs(tiles.y + b - (tiles.x + c)*0.6666 ))\n#define FILL(p, c, l) plot( max(abs(p.x), abs( p.x - (1.5*p.y) )) - 0.5, 0.0) * smoothstep(0.0, 0.01, p.x) * smoothstep(c, l, -p.y)\n\nconst mat2 r = mat2( -1, 0, 0, -1 );\n\nvec3 linearGradient(float yCoord, float posCol, float posCol2) {\n\n    return mix(\n        FST_COLOR * (0.5*sin(iTime) + 0.4),\n        SND_COLOR * (0.5*cos(iTime) + 0.4),\n        smoothstep(posCol, posCol2, yCoord)\n    );\n\n}\n\nfloat plot(float p, float t) {\n\n    return 1.0 - smoothstep(t - RX*(0.5 + ZOOM), t + RX*(0.5 + ZOOM), p);\n\n}\n\nfloat hex(vec2 p, in float w) {\n\n    vec2 q = abs(p);\n    return max((q.x*0.75 + q.y*0.5), q.y) - w * 0.5;\n\n}\n\nfloat poorCube(vec2 uv, float s) {\n\n    float cube = plot(abs(hex(uv.yx, 1.0)), THICKNESS);\n\n#if LINES\n\n    uv.y += s*max(\n        min( abs(uv.x*0.6666), abs(uv.x) ), 0.0\n    );\n\n    float cropDiags = step(-0.5, -abs(uv.x));\n    cube += plot(abs(uv.y), THICKNESS) * cropDiags;\n\n    float cropCenter = step(s*0.26, s*abs(uv.y + 0.26));\n    cube += plot(abs(uv.x), THICKNESS) * cropCenter;\n\n#endif\n\n    return cube;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n\n    vec3 backCol = linearGradient(uv.y, -0.35, 1.0);\n\n    uv *= ZOOM;\n\n    vec2 mou = (iMouse.xy/iResolution.xy) * ZOOM;\n    uv += 0.5*iTime + mou;\n\n    vec2 tiles = fract(uv);\n    float evenY = mod( floor(uv.y), 2.0 );\n    vec2 tilesInv = fract(-uv);\n\n    float fillFace   = FILL( (tiles     - vec2(0.5, 0.165)) , 0.166, 0.165 );\n    float fillFace2  = FILL( ((tilesInv - vec2(0.5, 0.165)) * r + vec2(0.5, 0.666) ), 1.0, 0.0);\n    float stupidTri  = FILL( ((tilesInv + vec2(-0.5, 0.5))  * r + vec2(0.5, 0.333) ), 1.0, 0.0);\n    float stupidTri2 = FILL( ((tilesInv + vec2(0.0, 0.5))   * r + vec2(0.5, 0.333) ), 1.0, 0.0);\n\n    vec3 col = vec3(1);\n\n    float lines, linesOdd;\n\n#if LINES\n\n    float crop = step(0.8, tiles.y);\n\n    lines = ( plot(abs(tiles.x - 1.0), THICKNESS) + plot(abs(tiles.x), THICKNESS) ) * crop;\n    linesOdd = plot(abs(tiles.x - 0.5), THICKNESS) * crop;\n\n#endif\n\n    col -= ( poorCube(tiles - 0.5, -1.0) + lines +\n            backCol * (fillFace + stupidTri) ) * step(1.0, evenY) +\n\n          ( poorCube(tiles    - vec2(0.0, 0.50), -1.0) +\n            poorCube(tilesInv - vec2(0.0, 0.50),  1.0) +\n            linesOdd +\n            backCol * (fillFace2 + stupidTri2) ) * step(0.0, -evenY);\n    \n\n    fragColor = vec4(col, 1.0);\n\n}","name":"Image","description":"","type":"image"}]}