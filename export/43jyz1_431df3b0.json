{"ver":"0.1","info":{"id":"43jyz1","date":"1727122023","viewed":15,"name":"Explosions reaction–diffusion","username":"TriKri","description":"Reaction–diffusion system that resembles explosions","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["reactiondiffusion","explosions","reactiondiffusionsystem"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst float explosionPersistance = 7.0;\nconst float darkness = 2.0;\nconst float shadows = 0.05;\n\nconst float gamma = 2.2; // Used for gamma correction\n\nvec3 gammaCorrected(vec3 col) {\n    float newGamma = pow(gamma, min(1.0-(col.z-col.x), 1.0));\n    return vec3(pow(col.x, 1.0/newGamma), pow(col.y, 1.0/newGamma), pow(col.z, 1.0/newGamma));\n    return vec3(pow(col.x, 1.0/gamma), pow(col.y, 1.0/gamma), pow(col.z, 1.0/gamma));\n}\n\nvec3 alphaToColor(float alpha) {\n    const float m = 3.0;\n    float Alpha = m * alpha;\n    int A = int(Alpha);\n    float a = Alpha - float(A);\n    switch (A) {\n        case 0: return vec3(0.0+a, 0.0  , 0.0  ); // Black to red\n        case 1: return vec3(1.0  ,     a, 0.0  ); // Red to yellow\n        case 2: return vec3(1.0  , 1.0  ,     a); // Yellow to white\n        case 3: return vec3(1, 1, 1); // White (somesimes the modulation will return 3)\n    }\n}\n\nvec3 alphaToColor2(float alpha) {\n    float Alpha = mod(6.0 * alpha, 6.0);\n    int A = int(Alpha);\n    float a = Alpha - float(A);\n    switch (A) {\n        case 0: return vec3(1.0  ,     a, 0.0  ); // Red to yellow\n        case 1: return vec3(1.0-a, 1.0  , 0.0  ); // Yellow to green\n        case 2: return vec3(0.0  , 1.0  ,     a); // Green to cyan\n        case 3: return vec3(0.0  , 1.0-a, 1.0  ); // Cyan to blue\n        case 4: return vec3(    a, 0.0  , 1.0  ); // Blue to magenta\n        case 5: return vec3(1.0  , 0.0  , 1.0-a); // Magenta to red\n        case 6: return vec3(1, 0, 0); // Red (somesimes the modulation will return 6.0)\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float val = texelFetch(iChannel0, ivec2(fragCoord), 0).x;\n    fragColor = vec4(alphaToColor(pow(clamp((1.0+shadows)*(1.0-pow(val, explosionPersistance))-shadows, 0.0, 1.0), darkness)), 1.0);\n    //fragColor = vec4(gammaCorrected(alphaToColor2(pow(val, 8.0))), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float step = 0.001;\nconst int invFrequency = 5;\n\nivec2 getOffsetCoord(ivec2 coord, ivec2 offset) {\n    ivec2 sum = coord + offset;\n    return ivec2(clamp(sum.x, 0, int(iResolution.x) - 1),\n                 clamp(sum.y, 0, int(iResolution.y) - 1));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    if (iFrame == 0) {\n        fragColor = vec4(ivec2(fragCoord/10.0) == ivec2(0.5*iResolution/10.0) ? 0.0 :\n                         ivec2(fragCoord/5.0) == ivec2(0.25*iResolution/5.0) ? 0.0 :\n                         ivec2(fragCoord/5.0) == ivec2((0.5*iResolution.xy + vec2(iResolution.x/4.0, 0.0))/5.0) ? 0.95 :\n                         0.5\n                         );\n        fragColor = vec4(uv.x == clamp(uv.x, 0.2, 0.4) && uv.y == clamp(uv.y, 0.5, 0.7) ? 0.95 :\n                         0.80\n                         );\n        //fragColor = vec4(1.0);\n        return;\n    }\n    \n    if (iFrame % invFrequency == 0) {\n        vec2 sum = \n            vec2(texelFetch(iChannel0, ivec2(fragCoord)                               , 0).x, 1) +\n            vec2(texelFetch(iChannel0, getOffsetCoord(ivec2(fragCoord), ivec2(-1,  0)), 0).x, 1) +\n            vec2(texelFetch(iChannel0, getOffsetCoord(ivec2(fragCoord), ivec2(+1,  0)), 0).x, 1) +\n            vec2(texelFetch(iChannel0, getOffsetCoord(ivec2(fragCoord), ivec2( 0, -1)), 0).x, 1) +\n            vec2(texelFetch(iChannel0, getOffsetCoord(ivec2(fragCoord), ivec2( 0, +1)), 0).x, 1) +\n            vec2(texelFetch(iChannel0, getOffsetCoord(ivec2(fragCoord), ivec2(-2,  0)), 0).x, 1) +\n            vec2(texelFetch(iChannel0, getOffsetCoord(ivec2(fragCoord), ivec2(+2,  0)), 0).x, 1) +\n            vec2(texelFetch(iChannel0, getOffsetCoord(ivec2(fragCoord), ivec2( 0, -2)), 0).x, 1) +\n            vec2(texelFetch(iChannel0, getOffsetCoord(ivec2(fragCoord), ivec2( 0, +2)), 0).x, 1) +\n            vec2(texelFetch(iChannel0, getOffsetCoord(ivec2(fragCoord), ivec2(-4,  0)), 0).x, 1) +\n            vec2(texelFetch(iChannel0, getOffsetCoord(ivec2(fragCoord), ivec2(+4,  0)), 0).x, 1) +\n            vec2(texelFetch(iChannel0, getOffsetCoord(ivec2(fragCoord), ivec2( 0, -4)), 0).x, 1) +\n            vec2(texelFetch(iChannel0, getOffsetCoord(ivec2(fragCoord), ivec2( 0, +4)), 0).x, 1) +\n            vec2(texelFetch(iChannel0, getOffsetCoord(ivec2(fragCoord), ivec2(-8,  0)), 0).x, 1) +\n            vec2(texelFetch(iChannel0, getOffsetCoord(ivec2(fragCoord), ivec2(+8,  0)), 0).x, 1) +\n            vec2(texelFetch(iChannel0, getOffsetCoord(ivec2(fragCoord), ivec2( 0, -8)), 0).x, 1) +\n            vec2(texelFetch(iChannel0, getOffsetCoord(ivec2(fragCoord), ivec2( 0, +8)), 0).x, 1) +\n            vec2(texelFetch(iChannel0, getOffsetCoord(ivec2(fragCoord), ivec2(-16,  0)), 0).x, 1) +\n            vec2(texelFetch(iChannel0, getOffsetCoord(ivec2(fragCoord), ivec2(+16,  0)), 0).x, 1) +\n            vec2(texelFetch(iChannel0, getOffsetCoord(ivec2(fragCoord), ivec2( 0, -16)), 0).x, 1) +\n            vec2(texelFetch(iChannel0, getOffsetCoord(ivec2(fragCoord), ivec2( 0, +16)), 0).x, 1) +\n            vec2(texelFetch(iChannel0, getOffsetCoord(ivec2(fragCoord), ivec2(-32,  0)), 0).x, 1) +\n            vec2(texelFetch(iChannel0, getOffsetCoord(ivec2(fragCoord), ivec2(+32,  0)), 0).x, 1) +\n            vec2(texelFetch(iChannel0, getOffsetCoord(ivec2(fragCoord), ivec2( 0, -32)), 0).x, 1) +\n            vec2(texelFetch(iChannel0, getOffsetCoord(ivec2(fragCoord), ivec2( 0, +32)), 0).x, 1) +\n            vec2(0);\n        fragColor = vec4(vec3(fract(sum.x/sum.y + step)), 1.0);\n    }\n    else {\n        fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}