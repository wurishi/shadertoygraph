{"ver":"0.1","info":{"id":"XdKGWK","date":"1456438326","viewed":1081,"name":"basic maze generator","username":"stb","description":"Doing this in a shader is not as easy as I imagined. Figured I'd post this basic version before it gets cluttered up. Press R for a new maze. Maze size can be set in Buf A.","likes":48,"published":1,"flags":48,"usePreview":0,"tags":["2d","distance","field","maze"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//const vec2 MazeSize = 4. * vec2(16., 9.);\nconst float WThk = 0.35; // wall thickness\n\nfloat s, c;\n#define rotateTo(p, a) mat2(c=a.y, s=a.x, -s, c) * p\n\nfloat drawWall(in vec2 p, vec2 dir) {\n    p = fract(rotateTo(p, dir)) - .5;\n    \n    // square ends\n    //return 2. * max(-p.y, abs(p.x)) - WThk;\n    \n    // round ends\n    p.y = max(0., -p.y);\n    return 2. * length(p) - WThk;\n}\n\n#define t2D(o) texture(iChannel0, (floor(p)+.5-o)/res)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 res = iResolution.xy;\n    vec2 MazeSize = texture(iChannel0, vec2(.5)/res).ba;\n    vec2 p = (fragCoord + vec2(.001)) * MazeSize / res;\n    \n    // hide the mess outside the maze\n    p = clamp(p, vec2(.5), MazeSize-.5);\n    \n    // to save a few chars\n    vec3 o = vec3(1., -1., 0.);\n    \n    vec2 dirs[4];\n    dirs[0] = o.xz;\n    dirs[1] = o.yz;\n    dirs[2] = o.zx;\n    dirs[3] = o.zy;\n    \n    // initial wall\n    float wall = drawWall(p, t2D(o.zz).rg);\n    \n    // evaluate neighbors to fill in wall gaps\n    for(int i=0; i<4; i++)\n        if(all(equal(dirs[i], t2D(dirs[i]).rg)))\n            wall = min(wall, drawWall(p, -t2D(dirs[i]).rg));\n    \n    // aa\n    float ss = 2. / res.y * MazeSize.y;\n    wall = smoothstep(-ss, ss, wall);\n    \n    fragColor = vec4(vec3(wall), 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const vec2 MazeSize = 4. * vec2(16., 9.);\n\n// hash without sine\n// https://www.shadertoy.com/view/4djSRW\n#define MOD3 vec3(443.8975,397.2973, 491.1871)\nfloat hash12(vec2 p) {\n\tvec3 p3  = fract(vec3(p.xyx) * MOD3);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n#define t2D(o) texture(iChannel0, fract(uv+o/res))\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 res = iResolution.xy;\n    vec2 uv = fragCoord / res;\n    vec2 fg = floor(fragCoord);\n    \n    // saving a few chars\n    vec3 o = vec3(1., -1., 0.);\n    \n    // wall direction (will be stored)\n    vec2 wdir = o.zz;\n    \n    // initialize wall boundaries\n    if(iFrame==0 || texture(iChannel3, vec2(82.5/256., .5)).r>0.) {\n        if(fg.y==0.)\n            wdir = o.xz;\n        if(fg.y==MazeSize.y-1.)\n            wdir = o.yz;\n        if(fg.x==0.)\n            wdir = o.zx;\n        if(fg.x==MazeSize.x-1.)\n            wdir = o.zy;\n    }\n    // create maze walls\n    else {\n        // this cell's stored wall direction, if any\n        wdir = t2D(o.zz).rg;\n        \n        // is this cell empty?\n        if(length(wdir)==0.) {\n            \n            // a random, cardinal direction\n            float a = radians(90.*floor(4.*hash12(uv+mod(iTime/100., 100.))));\n            vec2 r = floor(.5+vec2(sin(a), cos(a)));\n\n\t\t\t// if wall exists in direction r, make a new wall using that direction\n            if(length(t2D(r).rg)>0.)\n                wdir = r;\n        }\n    }\n    \n    // store wall direction\n    fragColor.rg = wdir;\n    \n    // store maze size (for Image shader)\n    if(all(equal(fg, o.zz)))\n       fragColor.ba = MazeSize;\n}","name":"Buf A","description":"","type":"buffer"}]}