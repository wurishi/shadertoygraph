{"ver":"0.1","info":{"id":"lXlSDS","date":"1709935589","viewed":36,"name":"Lissajous 0308","username":"kukovisuals","description":"Lissajous","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["lissajous"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time-varying distortion parameters\n    float distortionScale = 0.224;\n    float distortionFrequency = 1.5;\n    \n    // Oscillating factors for distortion\n    float oscillatingFactor1 = 1.0 + 3.0 * sin(0.5 * iTime); // Oscillates between 2.0 and 10.0\n    float oscillatingFactor2 = 10.0 + 3.0 * cos(0.5 * iTime); // Oscillates between 2.0 and 10.0\n    \n    // Apply a non-linear distortion to the coordinates\n    vec2 distortedUv = uv + distortionScale * vec2(\n        sin(distortionFrequency * iTime + uv.y * oscillatingFactor1),\n        cos(distortionFrequency * iTime + uv.x * oscillatingFactor2)\n    );\n\n    // Time-varying transformation matrix parameters\n    float angle = iTime / 8.;  // Rotate based on time\n    float scale = 2.0 + 0.5 * sin(iTime);  // Scale pulsates over time\n    \n    mat2 rotationMatrix = mat2(\n        cos(angle), -sin(angle),\n        sin(angle), cos(angle)\n    );\n    \n    mat2 scaleMatrix = mat2(\n        scale, 0.0,\n        0.0  , scale\n    );\n    mat2 transformationMatrix = scaleMatrix * rotationMatrix;\n\n    // Apply the transformation matrix to the distorted coordinates\n    vec2 transformedUv = transformationMatrix * (distortedUv - 0.5) + 0.5;\n\n    // Use the transformed coordinates to create a pattern\n    float pattern = sin(10.0 * transformedUv.x) * cos(5.0 * transformedUv.y);\n\n    // Output to screen\n    fragColor = vec4(pattern - 0.5, pattern - 0.2, pattern - 0.2, 1.0);\n}","name":"Image","description":"","type":"image"}]}