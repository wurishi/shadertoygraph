{"ver":"0.1","info":{"id":"7dSXWh","date":"1620100657","viewed":492,"name":"Shader Jam","username":"fancyzero","description":"control: D F SPACE J K\nA music game, hope you like it.\n\nMusic: \t[url]https://www.shadertoy.com/view/4dfXWj[/url]\nBackground: [url]https://www.shadertoy.com/view/tsXBzS[/url]\n\n\n\n","likes":20,"published":1,"flags":56,"usePreview":0,"tags":["game","music","guitar","hero","rhythm","djmax"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 DrawTracks(vec2 uv, int lane, float size,vec3 color)\n{\n    float center = float(lane)*0.2+0.1;\n    float d = abs(uv.x - center)/0.1;\n    vec4 ret=vec4(0.,1.,0.,1.);\n    float mask = 1.-clamp(d,0.,1.); \n    float playTime = (iTime)*bpm/60./4.;\n\tret.xyz = color*pow(d,fract(playTime*3.1415)*4.+6.)*ceil(mask);\n    return vec4(ret.xyz,0.);//color.xyzx;\n    \n}\nvec4 DrawKeys( vec2 uv, float keyID, vec2 size, float state)\n{\n    vec4 ret = vec4(0.);\n    if (state > 0.5)\n        size.y *=1.8;\n\n    vec2 pos = vec2(keyID*0.2+size.x/2., size.y/2.);\n    \n    if ( abs(uv - pos).x < size.x/2. && abs(uv-pos).y < size.y/2. )\n    {\n        \n        if ( state > 0.5 )\n        {\n            ret.a = 1.;\n            ret.xyz = keyColors[int(keyID)];\n            }\n       \telse\n        {\n            ret.a = 0.7;\n            ret.xyz = keyColors[int(keyID)];\n        }\n           \n    }\n    return ret;\n}\n\n\nvec4 DrawBar(float playTime, vec2 uv, float size)\n{\nfloat viewScale = GetGameData(iChannel1,SPEED,iResolution).x;\n    float measurePos = (playTime+uv.y*viewScale);\n    float mask = step(uv.x,1.0)-step(uv.x, 0.0);\n    float b = abs(sin(playTime*4.*3.1415));\n    b = b *b*b*b;\n    b = mix(0.8,0.4,b );\n    return (vec4(pow(fract(measurePos),400.)))*b*mask;\n}\n\nvec2 keySize=vec2(0.2,0.02);\n\n\nvec2 noteSize = vec2(0.2,0.02);\n\n\nvec4 DrawNote( vec2 uv, float playPos, int track )\n{   \n    float viewScale = GetGameData(iChannel1,SPEED,iResolution).x;\n    \n   \n    vec4 pos = UvToNoteUv(playPos,viewScale, uv,track);\n    \n    vec2 mm = ceil(0.5-clamp(abs(pos.wz-0.5),0.,1.));\n    float mask = mm.x*mm.y;\n           \n    vec4 noteState = GetNoteState(iChannel1, track, int(pos.x), iResolution);    \n    \n    float noteV = ceil(abs(pos.z/viewScale-0.5)-0.3);\n    \n    vec4 ret = vec4(0.);\n    vec3 col1 = keyColors[track];\n    vec3 col2 = keyColors[track]+ 0.3;\n    \n    ret.xyz = mix(col1, col2, 1.- pow(abs(pos.w*2.-1.),1.4)); //abs(sin(iTime*11.14)+1.)\n    ret.xyz = mix(ret.xyz, col1, step(pos.z,0.1));\n    ret.xyz = mix(col2,ret.xyz,  step(pos.z,0.8));\n    ret.a = mask*noteState.x;\n    \n    return ret;    \n}\n\nfloat viewportSize = 0.5;\n\n\nvec3 palette(float d){\n\treturn mix(vec3(cos(iTime),0.667,sin(iTime)),vec3(1.,0.,1.),d);\n}\n\nvec2 rotate(vec2 p,float a){\n\tfloat c = cos(a);\n    float s = sin(a);\n    return p*mat2(c,s,-s,c);\n}\n\nfloat map(vec3 p){\n    for( int i = 0; i<20; ++i){\n        float t = iTime*0.2;\n        p.xz =rotate(p.xz,t);\n        p.xy =rotate(p.xy,t*1.89);\n        p.xz = abs(p.xz);\n        p.xz-=.5;\n\t}\n\treturn dot(sign(p),p)/5.;\n}\n\nvec4 rm (vec3 ro, vec3 rd){\n    float t = 0.;\n    vec3 col = vec3(0.);\n    float d;\n    for(float i =0.; i<64.; i++){\n\t\tvec3 p = ro + rd*t;\n        d = map(p)*.5;\n        if(d<0.02){\n            break;\n        }\n        if(d>100.){\n        \tbreak;\n        }\n        //col+=vec3(0.6,0.8,0.8)/(400.*(d));\n        col+=palette(length(p)*.1)/(400.*(d));\n        t+=d;\n    }\n    return vec4(col,1./(d*100.));\n}\nvec4 BGImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-(iResolution.xy/2.))/iResolution.x;\n\tvec3 ro = vec3(0.,0.,-50.);\n    ro.xz = rotate(ro.xz,iTime);\n    vec3 cf = normalize(-ro);\n    vec3 cs = normalize(cross(cf,vec3(0.,1.,0.)));\n    vec3 cu = normalize(cross(cf,cs));\n    \n    vec3 uuv = ro+cf*3. + uv.x*cs + uv.y*cu;\n    \n    vec3 rd = normalize(uuv-ro);\n    \n    vec4 col = rm(ro,rd);\n    \n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float viewScale = GetGameData(iChannel1, SPEED ,iResolution).x;\n    vec2 uv = fragCoord*vec2(3.,1.)/iResolution.xy;\n    float playTime = (iTime)*bpm/60./4.;\n    vec4 pos = UvToNoteUv(playTime,viewScale, uv,3);\n\n       \n    fragColor = texture(iChannel1, fragCoord/iResolution.xy);\n   //return;\n    uv.x -=1.0;\n\n\n    float[5] keyStates;\n    KeyState(iChannel0,keyStates);\n\t\n    vec4 col = vec4(0.);\n   \n    vec4 keyret= vec4(0.);\n    vec4 bgLayer= vec4(0.);\n    vec4 tracksLayer= vec4(0.);\n    vec4 notesLayer= vec4(0.);\n   \n    \n    if (uv.x >=0. && uv.x <=1.)\n        bgLayer = BGImage(fragColor,fragCoord)*0.1;\n    else\n        bgLayer = BGImage(fragColor,fragCoord)*0.3;\n    \n    tracksLayer += DrawTracks(uv, 0, keySize.x, vec3(1.,0.51,0.14));\n    tracksLayer += DrawTracks(uv, 1, 0.2 ,vec3(0.16,0.62,0.16));\n    tracksLayer += DrawTracks(uv, 2, 0.2 ,vec3(1.0,0.3,0.3));\n    tracksLayer += DrawTracks(uv, 3, keySize.x, vec3(0.16,0.62,0.16));\n    tracksLayer += DrawTracks(uv, 4, 0.2 ,vec3(1.,0.51,0.14));\n           \n    vec4 noteColor = vec4(0.);\n    noteColor = DrawNote(uv, playTime,0);\n    notesLayer = mix(notesLayer,noteColor, noteColor.a);\n    noteColor = DrawNote(uv, playTime,1);\n    notesLayer = mix(notesLayer, noteColor, noteColor.a);\n    noteColor = DrawNote(uv, playTime,2);\n    notesLayer = mix(notesLayer, noteColor, noteColor.a);\n    noteColor = DrawNote(uv, playTime,3);\n    notesLayer = mix(notesLayer, noteColor, noteColor.a);\n    noteColor = DrawNote(uv, playTime,4);\n    notesLayer = mix(notesLayer, noteColor, noteColor.a);\n    \n    fragColor = mix(tracksLayer + bgLayer, notesLayer,notesLayer.a);\n\n#define DRAW_KEY(track) keysLayer += DrawKeys(uv, float(track), keySize, keyStates[track]); \n     vec4 keysLayer= vec4(0.);\n    keysLayer += DrawKeys(uv, float(0), keySize, keyStates[0]);\n    keysLayer += DrawKeys(uv, float(1), keySize, keyStates[1]);\n    keysLayer += DrawKeys(uv, float(2), keySize, keyStates[2]);\n    keysLayer += DrawKeys(uv, float(3), keySize, keyStates[3]);\n    keysLayer += DrawKeys(uv, float(4), keySize, keyStates[4]);\n    \n    fragColor = mix(fragColor, keysLayer, keysLayer.a);\n    \n    \n    fragColor += DrawBar(playTime,uv,0.1);\n    \n\n    vec2 buffAUV = fragCoord/iResolution.xy;\n    \n    fragColor += texture(iChannel2,buffAUV);   \n    vec4 buffB = texture(iChannel3,buffAUV);\n    \n    \n    \n    fragColor = mix( fragColor, buffB,buffB.a);\n    \n    \n    return;\n    \n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Effects \n\n#define saturate(x) clamp(x,0.,1.)\n#define hash(x)  ( float( hashi(x) ) / float( 0xffffffffU ) )\nuint hashi(uint x)\n{\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return x;\n}\n\nfloat dist(vec2 a, float norm)\n{\n    return pow(pow(abs(a.x),norm)+pow(abs(a.y),norm),1./norm);\n}\n\nvec4 colorRamp(float t)\n{\n    return mix(vec4(0.800,0.000,0.773,1.), vec4(1.000,0.969,0.000,1.),t)*t;\n}\nvec4 ring(vec2 pos, float size,vec2 uv, float time, float rseed)\n{    \n    time = time*2.+0.3;\n    float t = -log(time*120.)*-1.;\n    float rangle = ( hash(uint(rseed*14332.)));\n    mat2x2 rot = mat2x2(vec2(cos(rangle),sin(rangle)),vec2(-sin(rangle),cos(rangle)));   \n    \n    vec2 p = uv - pos;\n    p/=1./time*0.75;\n    p = rot*p;\n    float d = length(p)*6.;\n    d -= time*time*time*2.;\n    \n    float randAngleOff = hash(uint(rseed+pos.x*pos.y*1132333.));\n    float a = mod(atan(p.y, p.x)+randAngleOff,2.*3.1415)*3.;\n    float a1 = hash(uint((a)));\n    float a2 = hash(uint((a+1.)));\n    \n    a = mix(a1,a2,smoothstep(0.,1.,fract(a)))*10.;\n    \n    d = abs(pow( 1.-abs(d),10.-a));\n    if (d < 0.)\n        return vec4(1.,0.,1.,1.);\n    if (d > 1.)\n        return vec4(0.,0.,0.,1.);\n        \n    d = saturate(mix(d,0.,pow(time*1.3,1.5)))*2.;\n    return colorRamp(d);\n}\n\nvec4 DrawScoreGlow( vec2 uv, float keyID, vec2 size, float lifeTime)\n{\n\n    float lifeSpan = 0.5;\n    \n    lifeTime = clamp(lifeTime,0.,lifeSpan)/lifeSpan;\n    size.y +=cos((lifeTime)*3.1415*2.)*0.04;\n    \n    size.x *=cos(lifeTime*3.1415);\n    vec4 ret = vec4(0.);\n    vec2 pos = vec2(keyID*0.2+0.1, size.y/2.);\n    if ( abs(uv - pos).x < size.x/2. && abs(uv-pos).y < size.y/2. )\n    {\n        ret.a = 1.;\n        ret.xyz = keyColors[int(keyID)]*pow((1.-lifeTime),20.);\n           \n    }\n    return ret;\n}\n\n\nvec4 DrawKeyGlow( vec2 uv, float keyID, vec2 size, float lifeTime)\n{\n    float lifeSpan = 0.3;\n    float h = 0.3;\n    lifeTime = clamp(lifeTime,0.,lifeSpan)/lifeSpan;\n    lifeTime=lifeTime*lifeTime;\n    size.y = (1.-lifeTime)*h;\n    vec4 ret = vec4(0.);\n    vec2 pos = vec2(keyID*0.2+0.1, 0.);\n    vec2 p = (uv - pos);\n    float t = 0.;\n    if ( abs(p).x < size.x/2. && abs(p).y < size.y )\n    {\n        ret.a = 1.;\n        vec3 col =  vec3(0.4,0.5,0.7);\n        float a = (1.0-(p.y/h));\n        ret.xyz =col*a*a*a;\n        //ret.xyz = vec3(0.4,0.5,0.7);//*pow((1.-lifeTime),20.);\n           \n    }\n    \n    return abs(ret);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 newColor = vec4(0.);\n    float asp = iResolution.x/iResolution.y;\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 frac= 1.0/iResolution.xy;\n    \n    vec2 UIuv = fragCoord*vec2(3.,1.)/iResolution.xy;\n    UIuv.x -=1.0;\n\tfragColor = vec4(0.0);\n    vec2 scoreGlowSize=vec2(0.2,0.04);\n    vec2 keyGlowSize=vec2(0.2,0.48);\n    \n    float key1PressedTime = GetGameData(iChannel2,11, iResolution).x;\n    vec4 keyret = DrawKeyGlow(UIuv, 0., keyGlowSize, iTime-key1PressedTime);\n    fragColor+=keyret;\n\n        float key2PressedTime = GetGameData(iChannel2,12, iResolution).x;\n     keyret = DrawKeyGlow(UIuv, 1., keyGlowSize, iTime-key2PressedTime);\n    fragColor+=keyret;\n\n        float key3PressedTime = GetGameData(iChannel2,13, iResolution).x;\n     keyret = DrawKeyGlow(UIuv, 2., keyGlowSize, iTime-key3PressedTime);\n    fragColor+=keyret;\n\n        float key4PressedTime = GetGameData(iChannel2,14, iResolution).x;\n     keyret = DrawKeyGlow(UIuv, 3., keyGlowSize, iTime-key4PressedTime);\n    fragColor+=keyret;\n\n        float key5PressedTime = GetGameData(iChannel2,15, iResolution).x;\n     keyret = DrawKeyGlow(UIuv, 4., keyGlowSize, iTime-key5PressedTime);\n    fragColor+=keyret;\n\n    vec4 scoredTime1 = GetGameData(iChannel2,31, iResolution);\n    vec4 scoredTime2 = GetGameData(iChannel2,32, iResolution);\n    vec4 scoredTime3 = GetGameData(iChannel2,33, iResolution);\n    vec4 scoredTime4 = GetGameData(iChannel2,34, iResolution);\n    vec4 scoredTime5 = GetGameData(iChannel2,35, iResolution);\n    uv = fragCoord/iResolution.xy;\n    if ( scoredTime1.y > 0.)\n    {      \n        \n       vec2 v =(vec2(0.03333+0.33333,0.01))*1.;\n       newColor += ring(v*vec2(asp,1.), 0.13, uv*vec2(asp,1.), iTime -scoredTime1.x,scoredTime1.x);\n    }\n    if ( scoredTime2.y > 0.)\n    {      \n       vec2 v =(vec2(0.03333+0.33333+0.066666,0.01));\n        newColor += ring(v*vec2(asp,1.), 0.13, uv*vec2(asp,1.), iTime -scoredTime2.x,scoredTime2.x);\n    }\n    if ( scoredTime3.y > 0.)\n    {      \n       vec2 v =(vec2(0.03333+0.33333+0.066666*2.,0.01));\n        newColor += ring(v*vec2(asp,1.), 0.13, uv*vec2(asp,1.), iTime -scoredTime3.x,scoredTime3.x);\n    }\n    if ( scoredTime4.y > 0.)\n    {      \n       vec2 v =(vec2(0.03333+0.33333+0.066666*3.,0.01));\n        newColor += ring(v*vec2(asp,1.), 0.13, uv*vec2(asp,1.), iTime -scoredTime4.x,scoredTime4.x);\n    }\n    if ( scoredTime5.y > 0.)\n    {      \n       vec2 v =(vec2(0.03333+0.33333+0.066666*4.,0.01));\n        newColor += ring(v*vec2(asp,1.), 0.13, uv*vec2(asp,1.), iTime -scoredTime5.x,scoredTime5.x);\n    }\n        \n\n\t\n   fragColor += newColor;//\n\n   \n\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// music sheet 5 tracks \n#define MAX_NOTES 1024\n#define LAST_MISSED_TIME 3\n\n#define COMBO 5\n#define PERFECTNESS 66\n#define DIFFICULTY 7\n\n#define SPEED 41\n#define AUTOPLAY 42\n\n\n\n#define KEY1_PRESSED_TIME 11\n#define KEY2_PRESSED_TIME 12\n#define KEY3_PRESSED_TIME 13\n#define KEY4_PRESSED_TIME 14\n#define KEY5_PRESSED_TIME 15\n\n#define KEY1_SCORED_TIME 31\n#define KEY2_SCORED_TIME 32\n#define KEY3_SCORED_TIME 33\n#define KEY4_SCORED_TIME 34\n#define KEY5_SCORED_TIME 35\n\nint[210] musicSheet =int[210](0,0,256,134479872,16778240,1048608,134479872,16778240,1048608,1073741888,4202624,1181696,1073741888,-2147475328,0,1073741888,4202624,1181696,1073741888,-2147475328,0,262144,2,4,262144,2,256,134479872,16778240,1048608,134479872,16778240,1048608,16777216,16,131073,16777216,16,16,0,0,0,0,0,0,0,0,0,0,0,0,134218240,33554432,0,134218240,0,0,134218240,33554432,0,134218240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,262144,0,0,262144,0,0,0,0,0,0,-2147483648,0,513,65536,131076,513,65536,131076,4096,268436482,0,4096,1026,256,4096,268436482,0,4096,1026,256,134251017,-2113339376,0,134251017,-2147483632,0,513,65536,131076,513,65536,131076,134218248,2,1050640,134218248,302514178,256,0,0,0,0,34144256,4,0,269484034,8390656,0,269484034,8390656,2097152,0,32,2097152,0,0,2097152,0,32,2097152,0,0,16777216,0,32,16777216,34144256,4,0,269484034,8390656,0,269484034,8390656,1,286326784,256,1,65536,1,0,0,0,0,0,0,0,128,0,0,128,0,32768,-2147483648,0,32768,4194304,0,32768,-2147483648,0,32768,4194304,0,0,0,0,0,0,0,0,128,0,0,128,0,0,0,0,0,0,0,0,0,0);\n\nfloat NoteValue = 48.; //how many note in one measure\nconst int sheetSize = 210;\nint sheetTrackLen = sheetSize/5;\nint maxNotes = sheetSize/5*32;\nint noteStateBaseAddr = 1024;\nfloat bpm = 104.166666666666;\n\n\nvec4 GetGameData(sampler2D sampler, int pixelIndex, vec3 iResolution)\n{\n    int w = int(iResolution.x);\n\n    int x = pixelIndex  % w;\n    int y = pixelIndex/w;\n    \n    return texelFetch( sampler, ivec2(x,y),0);\n}\n\n\n  \n     \nvec4 GetNoteState( sampler2D sampler, int track, int noteIdx, vec3 iResolution)\n{\n    if (noteIdx >= maxNotes)\n        return vec4(0.,0.,0.,0.);\n    int base = noteStateBaseAddr;\n    return GetGameData(sampler, base+track*sheetTrackLen*32+noteIdx, iResolution);\n    \n}\n     \n//look up the closest note\nvec4 GetClosestNote(sampler2D sampler, float playTime, int track, vec3 iResolution, float lookupDistance )\n{\n    if (playTime < 0.)\n        return vec4(0.,0.,0.,0.);\n    //playTime to noteIndex\n    \n    float dist = -lookupDistance/2.;\n    while( dist < lookupDistance)\n    {\n        int idx = int((playTime + dist) * NoteValue);\n        // is there a note?\n        int bb = 0;\n        if (track*sheetTrackLen+idx/32<sheetSize)\n            bb = musicSheet[track*sheetTrackLen+idx/32];\n        int note = (bb >> (idx%32)) & 1;\n    \n        // is this note still valid?\n        vec4 noteState = GetNoteState(sampler, track, idx, iResolution);\n        if (noteState.x> 0.)\n            return vec4( float(idx), noteState.x,0.,1. );\n        dist += 1./NoteValue;\n    }\n    \n}\n\n\n\n\nvec4 UvToNoteUv( float playPos, float viewScale, vec2 uv, int track)\n{\n    float sheetPos = playPos+uv.y*viewScale;\n    int note = int(fract(sheetPos) * NoteValue);\n    int idx = int(floor(sheetPos)*NoteValue)  + note;\n\n    vec2 noteIdx= vec2(float(idx),0.);\n    vec2 noteLocalUV = vec2(fract(fract(sheetPos)*NoteValue)/viewScale, (uv.x-float(track)*0.2)/0.2);\n    return vec4(noteIdx,noteLocalUV);\n}\n\n\nfloat GetNote( vec2 uv, float playPos, int track,float viewScale )\n{      \n\n    vec4 pos = UvToNoteUv(playPos,viewScale, uv,track);\n\n    int ip = int(pos.x);\n    \n        \n    int bb =musicSheet[track*sheetTrackLen+ip/32];\n    \n    float value= float( (bb >> (ip%32)) & 1);\n    if (ip >= maxNotes)\n        value = 0.;\n    return value;\n}\n\nvoid KeyState( sampler2D sampler, out float[5] keys)    \n{\n    \n    keys[0] = texelFetch(sampler, ivec2(68, 0),0).x;\n    keys[1] = texelFetch(sampler, ivec2(70, 0),0).x;\n    keys[2]  = texelFetch(sampler, ivec2(32, 0),0).x;    \n    keys[3] = texelFetch(sampler, ivec2(74, 0),0).x;\n    keys[4]  = texelFetch(sampler, ivec2(75, 0),0).x;\n\n}\n\n\nvoid KeyPressed( sampler2D sampler, out float[5] keys)    \n{\n    \n    keys[0] = texelFetch(sampler, ivec2(68, 1),0).x;\n    keys[1] = texelFetch(sampler, ivec2(70, 1),0).x;\n    keys[2]  = texelFetch(sampler, ivec2(32, 1),0).x;    \n    keys[3] = texelFetch(sampler, ivec2(74, 1),0).x;\n    keys[4]  = texelFetch(sampler, ivec2(75, 1),0).x;\n\n}\n\n\nvec3 keyColors[5]=vec3[5]\n(   vec3(vec3(0.9,0.6,0.2)),\n    vec3(vec3(0.2,0.8,0.1)),\n    vec3(vec3(1.2,0.5,0.6)),\n    vec3(vec3(0.2,0.8,0.1)),\n    vec3(vec3(0.9,0.6,0.2))\n);\n\nvec3 scoreColors[5]=vec3[5]\n(\tvec3(vec3(0.2,0.1,0.7)),\n    vec3(vec3(0.2,0.1,0.7)),\n    vec3(vec3(0.2,0.1,0.7)),\n    vec3(vec3(0.2,0.1,0.7)),\n    vec3(vec3(0.2,0.1,0.7))\n);\n\n\n\n\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//this is text & UI layer\n//texts\n#define T_sp (256-48)\n#define T_a  (177-32)\n#define T_b  (178-32)\n#define T_c  (179-32)\n#define T_d  (180-32)\n#define T_e  (181-32)\n#define T_f  (182-32)\n#define T_g  (183-32)\n#define T_h  (184-32)\n#define T_i  (185-32)\n#define T_j  (186-32)\n#define T_k  (187-32)\n#define T_l  (188-32)\n#define T_m  (189-32)\n#define T_n  (190-32)\n#define T_o  (191-32)\n#define T_p\t (160-32)\n#define T_q  (161-32)\n#define T_r  (162-32)\n#define T_s  (163-32)\n#define T_t  (164-32)\n#define T_u  (165-32)\n#define T_v  (166-32)\n#define T_w  (167-32)\n#define T_x  (168-32)\n#define T_y  (169-32)\n#define T_z  (170-32)\n#define T_A  177\n#define T_B  178\n#define T_C  179\n#define T_D  180\n#define T_E  181\n#define T_F  182\n#define T_G  183\n#define T_H  184\n#define T_I  185\n#define T_J  186\n#define T_K  187\n#define T_L  188\n#define T_M  189\n#define T_N  190\n#define T_O  191\n#define T_P\t160\n#define T_Q 161\n#define T_R 162\n#define T_S 163\n#define T_T 164\n#define T_U 165\n#define T_V 166\n#define T_W 167\n#define T_X 168\n#define T_Y 169\n#define T_Z 170\n#define T_qq 210\n\nfloat textSize = 1.;\nfloat textSPace = 38.;\nvec4 textColor = vec4(1.,1.,1.,0.3);\nfloat flatText = 1.;\n#define endl line--; cp=0;\n#define txt(c)   fragColor += DrawText(iChannel0, textSize, uv, vec2(xStart + 0.03+float(cp)/textSPace,float(line)/20.),c,textColor, flatText); cp++;\n\nvec4 CheckBox(vec2 uv, vec2 pos, float size, float checked)\n{\n    float dotSize = size*0.95;\n    float d = length(uv-pos)/size;\n    float c2 = smoothstep(dotSize,dotSize*0.9,d);\n\n   \n    float c = smoothstep(size,size*1.3,d)*smoothstep(size*1.6,size,d);\n    if (checked>0.0)\n        c += c2;\n    return  vec4(1.,1.,1.,c*0.8);\n}\n\nvec3 BoxMask( vec2 uv, vec2 pos, vec2 size)\n{\n    vec2 diff = abs(uv - pos);\n    vec2 mm = (uv - pos);\n    if ( diff.x <size.x && diff.y < size.y)\n        return vec3(vec2(mm+size)/size,1.);\n    else\n        return vec3(0.,0.,0.);\n}\n\n\nvec4 DrawText( sampler2D sampler,float textSize, vec2 uv, vec2 pos, int idx, vec4 color, float flatText)\n{\n    float halfTextSize = textSize/2.0;\n    vec3 mask = BoxMask(uv, pos, vec2(halfTextSize/16.,halfTextSize/16.));\n    int x = idx % 16;\n    int y = idx / 16;\n\n    vec4 txtValue = texture(sampler,mask.xy/32.+vec2(float(x),float(y))/16.);\n    float d = txtValue.w;\n    d = smoothstep(0.49,0.5,1.-d);\n    \n    return vec4(d*color);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    fragColor = vec4(0.,0.,0.,0.);\n    vec2 uv = fragCoord/iResolution.y;\n    vec2 uvUIScale = vec2(3.,1.);\n\tvec4 packedScore = GetGameData(iChannel1, 0, iResolution);\n    float score =dot(packedScore , vec4(1., 1024., 1024.*1024.,1024.*1024.*1024.));\n    float combos = GetGameData(iChannel1, COMBO, iResolution).x;\n    vec4 lastHitTime = GetGameData(iChannel1, 1, iResolution);\n    int digits = 0;\n\tint iCombos = int(combos);\n    int iScore = int(score);\n    float asp = iResolution.x/iResolution.y;\n\n    while(iCombos>0)\n    {\n        digits++;\n        iCombos/=10;\n    }\n    float xStart = 0.7 * asp;\n    int line = 17;\n    int cp = 0;    \n    if ( int(combos) > 1)\n    {\n        fragColor += DrawText(iChannel0, 1., uv, vec2(asp/2.-0.2/3.,0.9),T_C,vec4(1.,1.,1.,0.3),0.);\n        fragColor += DrawText(iChannel0, 1., uv, vec2(asp/2.-0.1/3.,0.9),T_O,vec4(1.,1.,1.,0.3),0.);\n        fragColor += DrawText(iChannel0, 1., uv, vec2(asp/2.+0.0/3.,0.9),T_M,vec4(1.,1.,1.,0.3),0.);\n        fragColor += DrawText(iChannel0, 1., uv, vec2(asp/2.+0.1/3.,0.9),T_B,vec4(1.,1.,1.,0.3),0.);   \n        fragColor += DrawText(iChannel0, 1., uv, vec2(asp/2.+0.2/3.,0.9),T_O,vec4(1.,1.,1.,0.3),0.);   \n        \n        for ( int i = digits; i >0; i-- )\n        { \n\n            float p = iTime - lastHitTime.x;\n            float size = clamp(-log(p),3.,4.);\n            float textWidth = float(digits)* +0.03*size;\n            fragColor +=DrawText(iChannel0, size, uv, vec2(asp/2.+0.03*size*(float(i)-0.5)-textWidth/2.,0.8),\n                        192+int(clamp((mod(combos,10.)),0.,9.)),vec4(1.,1.,1.,0.3),0.);\n\n            combos= (combos / 10.);\n        }\n    }\n    \n    digits = 0;\n    \n    while(iScore>0)\n    {\n        digits++;\n        iScore/=10;\n    }\n    \n    if (digits==0)\n    digits = 1;\n    line = 17;\n    cp = 0;\n    \n    txt(T_S)txt(T_c)txt(T_o)txt(T_r)txt(T_e)\n     \n    \n    for ( int i = digits; i >0; i-- )\n    { \n\n        float size = 1.0;\n        float textWidth = float(digits)* +0.03*size;\n        fragColor += DrawText(iChannel0, size, uv, vec2(asp*0.7+0.03*size*(float(i)-0.5),0.8),192+int(clamp((mod(score,10.)),0.,9.)),vec4(1.,1.,1.,0.3),1.);\n\n        score= (score / 10.);\n    } \n    \n    float lastMissedTime = GetGameData(iChannel1, LAST_MISSED_TIME,iResolution).x;\n    float st1 = GetGameData(iChannel1,KEY1_SCORED_TIME,iResolution).x;\n    float st2 = GetGameData(iChannel1,KEY2_SCORED_TIME,iResolution).x;\n    float st3 = GetGameData(iChannel1,KEY3_SCORED_TIME,iResolution).x;\n    float st4 = GetGameData(iChannel1,KEY4_SCORED_TIME,iResolution).x;\n    float st5 = GetGameData(iChannel1,KEY5_SCORED_TIME,iResolution).x;\n    \n    float lastScoredTime = max(max(max(max(st1,st2),st3),st4),st5);\n    float hPos = 0.4;\n    float hSpace = 1.5;\n    float popSize = 2.;\n    if ( iFrame > 0 )\n    {\n        if ( iTime - lastMissedTime < 0.1 )\n        {\n            fragColor += DrawText(iChannel0, popSize, uv, vec2(asp/2.-0.15/hSpace,hPos),T_M,vec4(1.,1.,1.,0.3),1.);\n            fragColor += DrawText(iChannel0, popSize, uv, vec2(asp/2.-0.05/hSpace,hPos),T_I,vec4(1.,1.,1.,0.3),1.);\n            fragColor += DrawText(iChannel0, popSize, uv, vec2(asp/2.+0.05/hSpace,hPos),T_S,vec4(1.,1.,1.,0.3),1.);\n            fragColor += DrawText(iChannel0, popSize, uv, vec2(asp/2.+0.15/hSpace,hPos),T_S,vec4(1.,1.,1.,0.3),1.);        \n        }\n        else if ( iTime - lastScoredTime < 0.5)\n        {\n            float perfectness = GetGameData(iChannel1, PERFECTNESS,iResolution).x;\n            popSize = clamp(-log((iTime - lastScoredTime)/0.5),2.,3.);\n            hSpace =  popSize /2. * 1.5;// 1./clamp(-log((iTime - lastScoredTime)/0.5),0.6,0.9);\n            if (perfectness >=4.)\n            {\n                 fragColor += DrawText(iChannel0,popSize, uv, vec2(asp/2.-0.1/hSpace,hPos),T_M,vec4(1.,1.,1.,0.3),1.);\n                fragColor += DrawText(iChannel0, popSize, uv, vec2(asp/2.-0.0/hSpace,hPos),T_A,vec4(1.,1.,1.,0.3),1.);\n                fragColor += DrawText(iChannel0, popSize, uv, vec2(asp/2.+0.1/hSpace,hPos),T_X,vec4(1.,1.,1.,0.3),1.);\n                \n            }            \n            else if (perfectness >=3.)\n            {\n                 fragColor += DrawText(iChannel0,popSize, uv, vec2(asp/2.-0.15/hSpace,hPos),T_C,vec4(1.,1.,1.,0.3),1.);\n                fragColor += DrawText(iChannel0, popSize, uv, vec2(asp/2.-0.05/hSpace,hPos),T_O,vec4(1.,1.,1.,0.3),1.);\n                fragColor += DrawText(iChannel0, popSize, uv, vec2(asp/2.+0.05/hSpace,hPos),T_O,vec4(1.,1.,1.,0.3),1.);\n                fragColor += DrawText(iChannel0, popSize, uv, vec2(asp/2.+0.15/hSpace,hPos),T_L,vec4(1.,1.,1.,0.3),1.);  \n            }\n            else if (perfectness >=2.)\n            {\n                fragColor += DrawText(iChannel0, popSize, uv, vec2(asp/2.-0.15/hSpace,hPos),T_N,vec4(1.,1.,1.,0.3),1.);\n                fragColor += DrawText(iChannel0, popSize, uv, vec2(asp/2.-0.05/hSpace,hPos),T_I,vec4(1.,1.,1.,0.3),1.);\n                fragColor += DrawText(iChannel0, popSize, uv, vec2(asp/2.+0.05/hSpace,hPos),T_C,vec4(1.,1.,1.,0.3),1.);\n                fragColor += DrawText(iChannel0, popSize, uv, vec2(asp/2.+0.15/hSpace,hPos),T_E,vec4(1.,1.,1.,0.3),1.);   \n            }\n            else \n            {\n            \n                fragColor += DrawText(iChannel0, popSize, uv, vec2(asp/2.-0.15/hSpace,hPos),T_G,vec4(1.,1.,1.,0.3),1.);\n                fragColor += DrawText(iChannel0, popSize, uv, vec2(asp/2.-0.05/hSpace,hPos),T_O,vec4(1.,1.,1.,0.3),1.);\n                fragColor += DrawText(iChannel0, popSize, uv, vec2(asp/2.+0.05/hSpace,hPos),T_O,vec4(1.,1.,1.,0.3),1.);\n                fragColor += DrawText(iChannel0, popSize, uv, vec2(asp/2.+0.15/hSpace,hPos),T_D,vec4(1.,1.,1.,0.3),1.);                  \n               }\n            \n        }\n    }\n    \n    \n    \n    if ( iTime < 3.)\n    {\n        vec4 c = vec4(1.,1.,1.,clamp(9.-iTime*iTime,0.,1.));\n        fragColor += DrawText(iChannel0, 1.5, uv, vec2(asp/2.-0.24,0.4),T_D,c,1.);\n        fragColor += DrawText(iChannel0, 1.5, uv, vec2(asp/2.-0.125,0.4),T_F,c,1.);\n        float sss = 0.02;\n        fragColor += DrawText(iChannel0, 0.8, uv, vec2(asp/2.0-sss*2.,0.33),T_S,c,1.);\n        fragColor += DrawText(iChannel0, 0.8, uv, vec2(asp/2.0-sss,0.33),T_p,c,1.);\n        fragColor += DrawText(iChannel0, 0.8, uv, vec2(asp/2.0,0.33),T_a,c,1.);\n        fragColor += DrawText(iChannel0, 0.8, uv, vec2(asp/2.0+sss,0.33),T_c,c,1.);\n        fragColor += DrawText(iChannel0, 0.8, uv, vec2(asp/2.0+sss*2.,0.33),T_e,c,1.);\n                \n        fragColor += DrawText(iChannel0, 1.5, uv, vec2(asp/2.0+0.125,0.4),T_J,c,1.);\n        fragColor += DrawText(iChannel0, 1.5, uv, vec2(asp/2.0+0.24,0.4),T_K,c,1.);      \n    }\n    \n    line = 10;\n    cp = 0;\n    xStart = 0.7 * asp;\n    txt(T_P) txt(T_r)txt(T_e)txt(T_s)txt(T_s)txt(T_sp)txt(T_qq)txt(T_U)txt(T_qq)txt(T_sp) txt(T_f) txt(T_o)txt(T_r)endl \n    \n    cp = 0;\n    xStart = 0.7 * asp;\n    txt(T_S) txt(T_p)txt(T_e)txt(T_e)txt(T_d)txt(202)\n    \n    cp = 0;\n    xStart = 0.8 * asp;\n    textSPace = 30.;\n    \n    vec4 speed =  GetGameData(iChannel1, SPEED,iResolution);    \n    if ( speed.w >= 1.0)\n        txt(245);\n    if ( speed.w >= 2.0)\n        txt(245);\n    if ( speed.w >= 3.0)\n        txt(245);\n    if ( speed.w >= 4.0)\n        txt(245);\n    if ( speed.w >= 5.0)\n        txt(245);\n     \n    textSPace = 38.;\n    fragColor +=  CheckBox(uv, vec2(0.88*asp,0.295),0.12, GetGameData(iChannel1, AUTOPLAY, iResolution ).x); \n    line = 7;\n    xStart = 0.7 * asp;\n    cp = 0; \n    txt(T_P) txt(T_r)txt(T_e)txt(T_s)txt(T_s)txt(T_sp)txt(T_qq)txt(T_P)txt(T_qq)txt(T_sp) txt(T_f) txt(T_o)txt(T_r)endl     \n    txt(T_A)txt(T_u)txt(T_t)txt(T_o)txt(T_sp) txt(T_p)txt(T_l)txt(T_a)txt(T_y)\n     \n    line = 8;\n    cp = 0; \n    xStart = 0.;\n    textSPace = 38.;\n    \n    if (iTime < 10.)\n    {\n        \n        txt(T_I)txt(T_n)txt(T_sp)txt(T_c)txt(T_a)txt(T_s)txt(T_e)txt(T_sp)txt(T_t)txt(T_h)txt(T_e)txt(T_sp)txt(T_m)txt(T_u)txt(T_s)txt(T_i)txt(T_c)txt(T_sp)txt(T_a)txt(T_n)txt(T_d)txt(T_sp) endl\n        txt(T_n)txt(T_o)txt(T_t)txt(T_e)txt(T_s)txt(T_sp)txt(T_a)txt(T_r)txt(T_e)txt(T_sp)txt(T_n)txt(T_o)txt(T_t)txt(T_sp)txt(T_s)txt(T_y)txt(T_n)txt(T_c)txt(T_d)endl\n        txt(T_c)txt(T_l)txt(T_i)txt(T_c)txt(T_k)txt(T_sp)txt(T_r)txt(T_e)txt(T_s)txt(T_t)txt(T_a)txt(T_r)txt(T_t)txt(T_sp)txt(T_s)txt(T_e)txt(T_v)txt(T_e)txt(T_r)txt(T_a)txt(T_l)txt(T_sp)endl\n        txt(T_t)txt(T_i)txt(T_m)txt(T_e)txt(T_s)   \n    } \n    \n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"//Judgement & GameState \n\n\n#define IF_DATASLOT(IDX)  if (linearFragIndex == IDX)\n\n\n\n\n\nvec4 GetMissedNote(sampler2D sampler, float playTime, int track, vec3 iResolution, float lookupDistance )\n{\n    float dist = lookupDistance;\n    while( dist > lookupDistance/2.)\n    {\n        int idx = int((playTime - dist) * NoteValue);    \n        // is this note still valid?\n        vec4 noteState = GetNoteState(sampler, track, idx, iResolution);\n        if (noteState.x> 0. && noteState.y > 0.)\n            return vec4( float(idx),0., 0., 1. );\n        dist -= 1./NoteValue;\n    }\n    \n    return vec4(0.,0.,0.,0.);//not found\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int linearFragIndex = int(fragCoord.x) + int(fragCoord.y)*int(iResolution.x);\n    vec4 oldData = texture(iChannel1, fragCoord/iResolution.xy);\n    \n    fragColor = oldData; // Keep old value by default\n    \n    if (iFrame <= 5 )\n    {\n        fragColor = vec4(0.);    \n        if (linearFragIndex == SPEED)\n        {\n            fragColor =vec4(1.0,1.0,1.,1.);\n        }    \n        if (linearFragIndex >=noteStateBaseAddr)\n        {\n            int idx   = linearFragIndex-noteStateBaseAddr;\n            int bb    = musicSheet[idx/32];\n            int value = (bb >> (idx%32)) & 1;\n            fragColor = vec4(float(value));\n        }\n        \n        if (linearFragIndex>=31 && linearFragIndex <=35 )\n        {\n            fragColor = vec4(-1000000.);\n        }\n        IF_DATASLOT(LAST_MISSED_TIME) \n        {\n            fragColor = vec4(-1000000.);\n        }\n        \n    }\n        \n    float[5] scores;\n    float[5] keyPressed ;\n       \n    float newCombos = 0.;\n    KeyPressed(iChannel0,keyPressed);\n    \n    float playTime = iTime*bpm/60./4.;\n    \n    int base = noteStateBaseAddr;\n    \n    float autoPlay = GetGameData(iChannel1, AUTOPLAY, iResolution ).x;\n    float perfectness = 0.;\n    for ( int track = 0; track < 5; track++ )\n    {\n        float detectRange = 1./NoteValue*8.;\n        if ( autoPlay > 0. )\n            detectRange = 1./NoteValue;\n        \n        vec4 closestNote = GetClosestNote(iChannel1, playTime, track, iResolution, detectRange );\n        float kp = keyPressed[track];\n        if (autoPlay>0.)\n            kp = 1.;\n        if ( closestNote.w > 0. && kp > 0. )\n        {   \n            newCombos +=1.;\n            float dist = abs(playTime - closestNote.x/NoteValue);\n            scores[track] = (1.0 - dist/detectRange)*100.;\n            if (linearFragIndex == base+track*sheetTrackLen*32+int(closestNote.x)) \n                fragColor = vec4(0.); \n            IF_DATASLOT(KEY1_SCORED_TIME+track) \n                fragColor = vec4(iTime, iFrame,0.,0.);  \n            float newPerfectness = 1.;\n            \n            if (dist < 1./NoteValue*3. )\n                newPerfectness = 2.;                \n            if (dist < 1./NoteValue )\n                newPerfectness = 3.;\n            if (dist < 0.25/NoteValue )\n                newPerfectness = 4.;\n                \n            perfectness = max(newPerfectness, perfectness);\n            IF_DATASLOT(PERFECTNESS)\n            {\n                fragColor = vec4(perfectness);\n             }\n        }\n    }  \n\n    float getScore = scores[0]+scores[1]+scores[2]+scores[3]+scores[4];\n    vec4 packedScore = GetGameData(iChannel1, 0, iResolution);\n    float score =dot(packedScore , vec4(1., 1024., 1024.*1024.,0.));\n\n       \n    vec4 missed1 = GetMissedNote(iChannel1, playTime, 0, iResolution, 1./NoteValue*8.);\n    vec4 missed2 = GetMissedNote(iChannel1, playTime, 1, iResolution, 1./NoteValue*8.);\n    vec4 missed3 = GetMissedNote(iChannel1, playTime, 2, iResolution, 1./NoteValue*8.);\n    vec4 missed4 = GetMissedNote(iChannel1, playTime, 3, iResolution, 1./NoteValue*8.);\n    vec4 missed5 = GetMissedNote(iChannel1, playTime, 4, iResolution, 1./NoteValue*8.);\n    \n    \n\n    \n    if ((missed1+missed2+missed3+missed4+missed5).w > 0. )\n    {\n        IF_DATASLOT(LAST_MISSED_TIME)\n        {\n            fragColor = vec4(iTime,0.,0.,0.);\n        }\n        \n        IF_DATASLOT(COMBO)\n        {\n            fragColor = vec4(0.,0.,0.,0.);\n        }        \n    }\n    else\n    {\n        IF_DATASLOT(COMBO)\n            fragColor = oldData + newCombos;\n    }\n    \n\n    \n    \n    IF_DATASLOT(0)\n    {\n        if (getScore>0.)\n        {\n            int iCombos = int(GetGameData(iChannel1, COMBO, iResolution).x);\n        \tscore += getScore*(1.0 + float(iCombos/10)*0.1);\n        }\n        float a = mod(score,1024.);\n        float b = mod(floor(score/1024.),1024.);\n        float c = mod(floor(score/1024./1024.),1024.);\n        float d = 0.;\n    \tfragColor = vec4(a,b,c,d);\n    }\n       \n       \n\tIF_DATASLOT(1)//lastHitTime\n    {\n        if (getScore>0.)\n\t    \tfragColor = vec4(iTime,0.,0.,0.);\n    }\n\tIF_DATASLOT(2) // COMBO\n    {\n        if (getScore>0.)\n\t    \tfragColor = vec4(iTime,0.,0.,0.);\n    }    \n    \n\tIF_DATASLOT(AUTOPLAY) // COMBO\n    {\n        //if ( iMouse.xy - \n        if ( texelFetch(iChannel0, ivec2(80, 1),0).x >0.)\n            if ( oldData.x > 0. )\n                fragColor = vec4(0.,0.,0.,0.);\n            else\n                fragColor = vec4(1.,0.,0.,0.);\n            \n    }       \n    \n#define UPDATE_KEY_PRESSED_TIME(track) IF_DATASLOT(KEY1_PRESSED_TIME+track && keyPressed[track]>0.) fragColor = vec4(iTime,0.,0.,0.); \n\n    UPDATE_KEY_PRESSED_TIME(0)\n    UPDATE_KEY_PRESSED_TIME(1)\n    UPDATE_KEY_PRESSED_TIME(2)\n    UPDATE_KEY_PRESSED_TIME(3)\n    UPDATE_KEY_PRESSED_TIME(4)\n\n    if (linearFragIndex == SPEED && iFrame >=5)\n    {\n        float speedLevel = oldData.w;\n        oldData.x += (oldData.y-oldData.x)*0.5*0.1;\n        if (texelFetch(iChannel0, ivec2(85, 1),0).x > 0.)\n        {\n            float s = oldData.y;\n            s *= 0.75;\n            speedLevel += 1.;\n            if (s < 0.25)\n            {\n                s = 1.;\n                speedLevel=1.;\n             }\n             fragColor = vec4(oldData.x,s,s,speedLevel);   \n         }\n         else\n         {\n             fragColor = oldData;   \n         }\n        \n    }\n    \n\n    \n    return;  \n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// Created by inigo quilez - iq/2014\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\n//----------------------------------------------------------------------------------------\n\nfloat noise( float x )\n{\n    return fract(sin(1371.1*x)*43758.5453);;\n}\n\n\nfloat saw( float x, float a)\n{\n    float f = fract( x );\n\treturn clamp(f/a,0.0,1.0)-clamp((f-a)/(1.0-a),0.0,1.0);\n}\n\n\n    \n//----------------------------------------------------------------------------------------\n\n// main instrument\nfloat instr1( float f, float t )\n{\n    float y  = 0.6*saw(1.0*f*t,0.1)*clamp( 1.2 - 1.0*0.01*f*t, 0.0, 1.0 );\n\t      y += 0.3*saw(2.0*f*t,0.2)*clamp( 1.2 - 2.0*0.01*f*t, 0.0, 1.0 );\n\t      y += 0.1*saw(4.0*f*t,0.4)*clamp( 1.2 - 4.0*0.01*f*t, 0.0, 1.0 );\n          y *= 0.9 + 0.1*cos(60.0*t);\n\treturn y;\t\n}\n\nfloat instr2( float f, float t )\n{\n\treturn instr1(f,t);\n}\n\n// bass\nfloat instr3( float f, float t )\n{\n\treturn 1.5*cos(0.5*6.2831*f*t)*exp(-0.005*f*t );\n}\n\n// drum\nfloat instr4( float f, float t )\n{\n\tfloat y  = noise( t );\n\t      y *= exp(-20.0*t );\n\treturn 0.7*y;\n\t\t\n}\n\n// music data\nfloat doChannel1( float time );\nfloat doChannel2( float time );\nfloat doChannel3( float time );\nfloat doChannel4( float time );\n\n//----------------------------------------------------------------------------------------\n// sound shader entrypoint\n//\n// input: time in seconds\n// ouput: stereo wave valuie at \"time\"\n//----------------------------------------------------------------------------------------\n\nvec2 mainSound( in int samp, float time )\n{\t\n    vec2 y = vec2(0.0);\n    if ( time < 48.*0.048)\n        return y;\n    y += vec2(0.75,0.25)*doChannel1( time ); // main instrument\n    y += vec2(0.25,0.75)*doChannel2( time ); // secondary instrument\n    y += vec2(0.25,0.25)*doChannel3( time ); // bass\n    y += vec2(0.25,0.25)*doChannel4( time ); // drum\n\t\n    y *= 1.0 - smoothstep( 55.0, 60.0, time ); // fade out\n\t\n\treturn vec2( y );\n}\n\n//----------------------------------------------------------------------------------------\n\nfloat note2freq( in float x ) {\treturn 440.0*pow( 2.0, (x-69.0)/12.0 ); }\n\n#define D(u,v) b+=float(u);if(t>b){x=b;n=float(v);}\n#define B(u)   b+=float(u);if(t>b){x=b;}\n#define tint 0.048\n\nfloat doChannel1( float t )\n{\n  float b = 0.0;\n  float n = 0.0;\n  float x = 0.0;\n  t /= tint;\n  D( 48,0)\n  D( 0,76)D( 3,76)D( 6,76)D( 6,72)D( 3,76)D( 6,79)D(24,72)D( 9,67)D( 9,64)D( 9,69)\n  D( 6,71)D( 6,70)D( 3,69)D( 6,67)D( 4,76)D( 4,79)D( 4,81)D( 6,77)D( 3,79)D( 6,76)\n  D( 6,72)D( 3,74)D( 3,71)D( 9,72)D( 9,67)D( 9,64)D( 9,69)D( 6,71)D( 6,70)D( 3,69)\n  D( 6,67)D( 4,76)D( 4,79)D( 4,81)D( 6,77)D( 3,79)D( 6,76)D( 6,72)D( 3,74)D( 3,71)\n  D(15,79)D( 3,78)D( 3,77)D( 3,75)D( 6,76)D( 6,68)D( 3,69)D( 3,72)D( 6,69)D( 3,72)\n  D( 3,74)D( 9,79)D( 3,78)D( 3,77)D( 3,75)D( 6,76)D( 6,84)D( 6,84)D( 3,84)D(18,79)\n  D( 3,78)D( 3,77)D( 3,75)D( 6,76)D( 6,68)D( 3,69)D( 3,72)D( 6,69)D( 3,72)D( 3,74)\n  D( 9,75)D( 9,74)D( 9,72)D(30,79)D( 3,78)D( 3,77)D( 3,75)D( 6,76)D( 6,68)D( 3,69)\n  D( 3,72)D( 6,69)D( 3,72)D( 3,74)D( 9,79)D( 3,78)D( 3,77)D( 3,75)D( 6,76)D( 6,84)\n  D( 6,84)D( 3,84)D(18,79)D( 3,78)D( 3,77)D( 3,75)D( 6,76)D( 6,68)D( 3,69)D( 3,72)\n  D( 6,69)D( 3,72)D( 3,74)D( 9,75)D( 9,74)D( 9,72)D(24,72)D( 3,72)D( 6,72)D( 6,72)\n  D( 3,74)D( 6,76)D( 3,72)D( 6,69)D( 3,67)D(12,72)D( 3,72)D( 6,72)D( 6,72)D( 3,74)\n  D( 3,76)D(27,72)D( 3,72)D( 6,72)D( 6,72)D( 3,74)D( 6,76)D( 3,72)D( 6,69)D( 3,67)\n  D(12,76)D( 3,76)D( 6,76)D( 6,72)D( 3,76)D( 6,79)D(24,72)D( 9,67)D( 9,64)D( 9,69)\n  D( 6,71)D( 6,70)D( 3,69)D( 6,67)D( 4,76)D( 4,79)D( 4,81)D( 6,77)D( 3,79)D( 6,76)\n  D( 6,72)D( 3,74)D( 3,71)D( 9,72)D( 9,67)D( 9,64)D( 9,69)D( 6,71)D( 6,70)D( 3,69)\n  D( 6,67)D( 4,76)D( 4,79)D( 4,81)D( 6,77)D( 3,79)D( 6,76)D( 6,72)D( 3,74)D( 3,71)\n  D( 9,76)D( 3,72)D( 6,67)D( 9,68)D( 6,69)D( 3,77)D( 6,77)D( 3,69)D(12,71)D( 4,81)\n  D( 4,81)D( 4,81)D( 4,79)D( 4,77)D( 4,76)D( 3,72)D( 6,69)D( 3,67)D(12,76)D( 3,72)\n  D( 6,67)D( 9,68)D( 6,69)D( 3,77)D( 6,77)D( 3,69)D(12,71)D( 3,77)D( 6,77)D( 3,77)\n  D( 4,76)D( 4,74)D( 4,72)D(24,76)D( 3,72)D( 6,67)D( 9,68)D( 6,69)D( 3,77)D( 6,77)\n  D( 3,69)D(12,71)\n  return instr1( note2freq( n ), tint*(t-x) );\n}\n\nfloat doChannel2( float t )\n{\n  float b = 0.0;\n  float n = 0.0;\n  float x = 0.0;\n  t /= tint;\n  D( 48,0)\n  D( 0,66)D( 3,66)D( 6,66)D( 6,66)D( 3,66)D( 6,71)D(12,67)D(12,64)D( 9,60)D( 9,55)\n  D( 9,60)D( 6,62)D( 6,61)D( 3,60)D( 6,60)D( 4,67)D( 4,71)D( 4,72)D( 6,69)D( 3,71)\n  D( 6,69)D( 6,64)D( 3,65)D( 3,62)D( 9,64)D( 9,60)D( 9,55)D( 9,60)D( 6,62)D( 6,61)\n  D( 3,60)D( 6,60)D( 4,67)D( 4,71)D( 4,72)D( 6,69)D( 3,71)D( 6,69)D( 6,64)D( 3,65)\n  D( 3,62)D(15,76)D( 3,75)D( 3,74)D( 3,71)D( 6,72)D( 6,64)D( 3,65)D( 3,67)D( 6,60)\n  D( 3,64)D( 3,65)D( 9,76)D( 3,75)D( 3,74)D( 3,71)D( 6,72)D( 6,77)D( 6,77)D( 3,77)\n  D(18,76)D( 3,75)D( 3,74)D( 3,71)D( 6,72)D( 6,64)D( 3,65)D( 3,67)D( 6,60)D( 3,64)\n  D( 3,65)D( 9,68)D( 9,65)D( 9,64)D(30,76)D( 3,75)D( 3,74)D( 3,71)D( 6,72)D( 6,64)\n  D( 3,65)D( 3,67)D( 6,60)D( 3,64)D( 3,65)D( 9,76)D( 3,75)D( 3,74)D( 3,71)D( 6,72)\n  D( 6,77)D( 6,77)D( 3,77)D(18,76)D( 3,75)D( 3,74)D( 3,71)D( 6,72)D( 6,64)D( 3,65)\n  D( 3,67)D( 6,60)D( 3,64)D( 3,65)D( 9,68)D( 9,65)D( 9,64)D(24,68)D( 3,68)D( 6,68)\n  D( 6,68)D( 3,70)D( 6,67)D( 3,64)D( 6,64)D( 3,60)D(12,68)D( 3,68)D( 6,68)D( 6,68)\n  D( 3,70)D( 3,67)D(27,68)D( 3,68)D( 6,68)D( 6,68)D( 3,70)D( 6,67)D( 3,64)D( 6,64)\n  D( 3,60)D(12,66)D( 3,66)D( 6,66)D( 6,66)D( 3,66)D( 6,71)D(12,67)D(12,64)D( 9,60)\n  D( 9,55)D( 9,60)D( 6,62)D( 6,61)D( 3,60)D( 6,60)D( 4,67)D( 4,71)D( 4,72)D( 6,69)\n  D( 3,71)D( 6,69)D( 6,64)D( 3,65)D( 3,62)D( 9,64)D( 9,60)D( 9,55)D( 9,60)D( 6,62)\n  D( 6,61)D( 3,60)D( 6,60)D( 4,67)D( 4,71)D( 4,72)D( 6,69)D( 3,71)D( 6,69)D( 6,64)\n  D( 3,65)D( 3,62)D( 9,72)D( 3,69)D( 6,64)D( 9,64)D( 6,65)D( 3,72)D( 6,72)D( 3,65)\n  D(12,67)D( 4,77)D( 4,77)D( 4,77)D( 4,76)D( 4,74)D( 4,72)D( 3,69)D( 6,65)D( 3,64)\n  D(12,72)D( 3,69)D( 6,64)D( 9,64)D( 6,65)D( 3,72)D( 6,72)D( 3,65)D(12,67)D( 3,74)\n  D( 6,74)D( 3,74)D( 4,72)D( 4,71)D( 4,67)D( 3,64)D( 6,64)D( 3,60)D(12,72)D( 3,69)\n  D( 6,64)D( 9,64)D( 6,65)D( 3,72)D( 6,72)D( 3,65)D(12,67) \n  return instr2( note2freq( n ), tint*(t-x) );\n}\n\nfloat doChannel3( float t )\n{\n  float b = 0.0;\n  float n = 0.0;\n  float x = 0.0;\n  t /= tint;\n  D( 48,0)\n  D( 0,50)D( 3,50)D( 6,50)D( 6,50)D( 3,50)D( 6,67)D(12,55)D(12,55)D( 9,52)D( 9,48)\n  D( 9,53)D( 6,55)D( 6,54)D( 3,53)D( 6,52)D( 4,60)D( 4,64)D( 4,65)D( 6,62)D( 3,64)\n  D( 6,60)D( 6,57)D( 3,59)D( 3,55)D( 9,55)D( 9,52)D( 9,48)D( 9,53)D( 6,55)D( 6,54)\n  D( 3,53)D( 6,52)D( 4,60)D( 4,64)D( 4,65)D( 6,62)D( 3,64)D( 6,60)D( 6,57)D( 3,59)\n  D( 3,55)D( 9,48)D( 9,55)D( 9,60)D( 6,53)D( 9,60)D( 3,60)D( 6,53)D( 6,48)D( 9,52)\n  D( 9,55)D( 3,60)D( 6,79)D( 6,79)D( 3,79)D( 6,55)D( 6,48)D( 9,55)D( 9,60)D( 6,53)\n  D( 9,60)D( 3,60)D( 6,53)D( 6,48)D( 6,56)D( 9,58)D( 9,60)D( 9,55)D( 3,55)D( 6,48)\n  D( 6,48)D( 9,55)D( 9,60)D( 6,53)D( 9,60)D( 3,60)D( 6,53)D( 6,48)D( 9,52)D( 9,55)\n  D( 3,60)D( 6,79)D( 6,79)D( 3,79)D( 6,55)D( 6,48)D( 9,55)D( 9,60)D( 6,53)D( 9,60)\n  D( 3,60)D( 6,53)D( 6,48)D( 6,56)D( 9,58)D( 9,60)D( 9,55)D( 3,55)D( 6,48)D( 6,44)\n  D( 9,51)D( 9,56)D( 6,55)D( 9,48)D( 9,43)D( 6,44)D( 9,51)D( 9,56)D( 6,55)D( 9,48)\n  D( 9,43)D( 6,44)D( 9,51)D( 9,56)D( 6,55)D( 9,48)D( 9,43)D( 6,50)D( 3,50)D( 6,50)\n  D( 6,50)D( 3,50)D( 6,67)D(12,55)D(12,55)D( 9,52)D( 9,48)D( 9,53)D( 6,55)D( 6,54)\n  D( 3,53)D( 6,52)D( 4,60)D( 4,64)D( 4,65)D( 6,62)D( 3,64)D( 6,60)D( 6,57)D( 3,59)\n  D( 3,55)D( 9,55)D( 9,52)D( 9,48)D( 9,53)D( 6,55)D( 6,54)D( 3,53)D( 6,52)D( 4,60)\n  D( 4,64)D( 4,65)D( 6,62)D( 3,64)D( 6,60)D( 6,57)D( 3,59)D( 3,55)D( 9,48)D( 9,54)\n  D( 3,55)D( 6,60)D( 6,53)D( 6,53)D( 6,60)D( 3,60)D( 3,53)D( 6,50)D( 9,53)D( 3,55)\n  D( 6,59)D( 6,55)D( 6,55)D( 6,60)D( 3,60)D( 3,55)D( 6,48)D( 9,54)D( 3,55)D( 6,60)\n  D( 6,53)D( 6,53)D( 6,60)D( 3,60)D( 3,53)D( 6,55)D( 3,55)D( 6,55)D( 3,55)D( 4,57)\n  D( 4,59)D( 4,60)D( 6,55)D( 6,48)D(12,48)D( 9,54)D( 3,55)D( 6,60)D( 6,53)D( 6,53)\n  D( 6,60)D( 3,60)D( 3,53)D( 6,50)\n  return instr3( note2freq( n ), tint*(t-x) );\n}\n\nfloat doChannel4( float t )\n{\n  float b = 0.0;\n  float x = 0.0;\n  t /= tint;\n  B(48)\n  B(0)B(6)B(3)B(6)B(3)B(6)B(9)B(6)B(3)B(3)B(3)B(6)B(4)B(2)B(6)B(4)\n  B(2)B(6)B(4)B(2)B(6)B(4)B(2)B(6)B(4)B(2)B(6)B(4)B(2)B(6)B(4)B(2)\n  B(6)B(4)B(2)B(6)B(4)B(2)B(6)B(4)B(2)B(6)B(4)B(2)B(6)B(4)B(2)B(6)\n  B(4)B(2)B(6)B(4)B(2)B(6)B(4)B(2)B(6)B(4)B(2)B(6)B(4)B(2)B(6)B(4)\n  B(2)B(6)B(4)B(2)B(6)B(4)B(2)B(6)B(4)B(2)B(6)B(4)B(2)B(6)B(4)B(2)\n  B(6)B(4)B(2)B(6)B(4)B(2)B(6)B(4)B(2)B(6)B(4)B(2)B(6)B(4)B(2)B(6)\n  B(4)B(2)B(6)B(4)B(2)B(6)B(4)B(2)B(6)B(4)B(2)B(6)B(4)B(2)B(6)B(4)\n  B(2)B(6)B(4)B(2)B(6)B(4)B(2)B(6)B(4)B(2)B(6)B(4)B(2)B(6)B(4)B(2)\n  B(6)B(4)B(2)B(6)B(4)B(2)B(6)B(4)B(2)B(6)B(4)B(2)B(6)B(4)B(2)B(6)\n  B(4)B(2)B(6)B(4)B(2)B(6)B(4)B(2)B(6)B(4)B(2)B(6)B(3)B(6)B(3)B(6)\n  B(9)B(6)B(3)B(3)B(3)B(6)B(3)B(6)B(3)B(6)B(9)B(6)B(3)B(3)B(3)B(6)\n  B(3)B(6)B(3)B(6)B(9)B(6)B(3)B(3)B(3)B(6)B(3)B(6)B(3)B(6)B(9)B(6)\n  B(3)B(3)B(3)B(6)B(4)B(2)B(6)B(4)B(2)B(6)B(4)B(2)B(6)B(4)B(2)B(6)\n  B(4)B(2)B(6)B(4)B(2)B(6)B(4)B(2)B(6)B(4)B(2)B(6)B(4)B(2)B(6)B(4)\n  B(2)B(6)B(4)B(2)B(6)B(4)B(2)B(6)B(4)B(2)B(6)B(4)B(2)B(6)B(4)B(2)\n  B(6)B(4)B(2)B(9)B(3)B(6)B(6)B(9)B(3)B(6)B(6)B(9)B(3)B(6)B(6)B(9)\n  B(3)B(6)B(6)B(9)B(3)B(6)B(6)B(9)B(3)B(6)B(6)B(9)B(3)B(6)B(6)B(9)\n  B(3)B(6)B(6)B(9)B(3)B(6)B(6)B(9)B(3)B(6)B(6)\n  return instr4( note2freq( 42.0 ), tint*(t-x) );\n}","name":"Sound","description":"","type":"sound"}]}