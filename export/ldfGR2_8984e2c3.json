{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"video","id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"channel":1,"type":"texture","id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// aji's amazing scanline shader\n\nconst float linecount = 120.0;\nconst vec4 gradA = vec4(0.0, 0.0, 0.0, 1.0);\nconst vec4 gradB = vec4(0.5, 0.7, 0.6, 1.0);\nconst vec4 gradC = vec4(1.0, 1.0, 1.0, 1.0);\n\nvec2 pos, uv;\n\nfloat noise(float factor)\n{\n\tvec4 v = texture(iChannel1, uv + iTime * vec2(9.0, 7.0));\n\treturn factor * v.x + (1.0 - factor);\n}\n\nvec4 base(void)\n{\n\treturn texture(iChannel0, uv + .1 * noise(1.0) * vec2(0.02, 0.0));\n}\n\nfloat triangle(float phase)\n{\n\t//phase *= 2.0;\n\t//return 1.0 - abs(mod(phase, 2.0) - 1.0);\n    // sin is not really a triangle.. but it's easier to do bandlimited\n    float y = sin(phase * 3.14159);\n    // if you want something brighter but more aliased, change 1.0 here to something like 0.3\n    return pow(y * y, 1.0);\n}\n\nfloat scanline(float factor, float contrast)\n{\n\tvec4 v = base();\n\tfloat lum = .2 * v.x + .5 * v.y + .3  * v.z;\n\tlum *= noise(0.3);\n\tfloat tri = triangle(pos.y * linecount);\n\ttri = pow(tri, contrast * (1.0 - lum) + .5);\n\treturn tri * lum;\n}\n\nvec4 gradient(float i)\n{\n\ti = clamp(i, 0.0, 1.0) * 2.0;\n\tif (i < 1.0) {\n\t\treturn (1.0 - i) * gradA + i * gradB;\n\t} else {\n\t\ti -= 1.0;\n\t\treturn (1.0 - i) * gradB + i * gradC;\n\t}\n}\n\nvec4 vignette(vec4 at)\n{\n\tfloat dx = 1.3 * abs(pos.x - .5);\n\tfloat dy = 1.3 * abs(pos.y - .5);\n    return at * (1.0 - dx * dx - dy * dy);\n}\n\nvec4 gamma(vec4 x, float f)\n{\n    return pow(x, vec4(1./f));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tpos = uv = (fragCoord.xy - vec2(0.0, 0.5)) / iResolution.xy;\n\tuv.y = floor(uv.y * linecount) / linecount;\n\tfragColor = gamma(vignette(gradient(scanline(0.8, 2.0))), 1.5);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ldfGR2","date":"1374287386","viewed":1531,"name":"scanline","username":"aji","description":"my shader is impossible to describe","likes":20,"published":1,"flags":0,"usePreview":0,"tags":["crt","scanline","nightvision","lab"],"hasliked":0,"parentid":"","parentname":""}}