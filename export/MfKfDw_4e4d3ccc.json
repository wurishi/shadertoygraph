{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"webcam","id":"4sf3zn","filepath":"/presets/webcam.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"const float PI = acos(0.0) * 2.0;\n\nvoid rotate(inout vec2 p, float a) {\n    p = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\n#define SCALE (pow(cos(iTime * 0.15), 4.0) * 88.0 + 8.0)\n\nfloat dots(vec2 uv, float angle, sampler2D sampler, vec3 col) {\n    rotate(uv, angle);\n    \n    // posy's cool logo thing\n    //uv = clamp(uv, vec2(-1.5, -2.5), vec2(1.5, 2.5));\n    \n    vec2 samplePos = floor(uv + 0.5);\n    rotate(samplePos, -angle);\n    samplePos = samplePos / 96.0 * vec2(iResolution.y / iResolution.x, 1) + 0.5;\n    \n    vec3 textureCol = texture(sampler, samplePos).rgb;\n    \n    float value;\n    \n    // key dots (black)\n    if (col == vec3(0)) {\n        value = (max(0.5 - textureCol.x, 0.0) + max(0.5 - textureCol.y, 0.0) + max(0.5 - textureCol.z, 0.0)) / 3.0;\n        \n    // normal cmy dots\n    } else {\n        value = dot(1.0 - textureCol, col);\n        \n        // area of circle --> radius\n        value = sqrt(value / PI);\n    }\n    \n    // clamp dot size (key fixes this)\n    value = min(value, 0.5);\n    \n    return float(value > length(fract(uv - 0.5) - 0.5));\n}\n\nvec3 render(vec2 fragCoord) {\n    vec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / min(iResolution.y, iResolution.x);\n    \n    uv *= SCALE;\n    \n    vec3 col = 1.0 - vec3(\n        dots(uv, -15.0 * PI / 180.0, iChannel0, vec3(1,0,0)) * 0.8,\n        dots(uv, -75.0 * PI / 180.0, iChannel0, vec3(0,1,0)) * 0.8,\n        dots(uv, 0.0 * PI / 180.0, iChannel0, vec3(0,0,1)) * 0.8\n    );\n    \n    // key\n    col -= float(dots(uv, -45.0 * PI / 180.0, iChannel0, vec3(0))) * 0.8;\n    \n    return col;\n}\n\nconst float ANTI_ALIAS = 2.0;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    vec3 col = vec3(0.0);\n    \n    vec2 uv = fragCoord / iResolution.xy;\n    \n    // anti aliasing\n    for (float x = -0.5; x < 0.5; x += 1.0 / ANTI_ALIAS) {\n        for (float y = -0.5; y < 0.5; y += 1.0 / ANTI_ALIAS) {\n            col += render(fragCoord + vec2(x, y)) / (ANTI_ALIAS * ANTI_ALIAS);\n        }\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"outputs":[{"channel":0,"id":"4dXGR8"}],"inputs":[{"channel":0,"type":"texture","id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"code":"vec4 nyan(vec2 uv, int frame) {\n    uv = clamp(uv, 0.0, 1.0);\n\n    uv *= vec2(40,32);\n    \n    if (frame < 2) uv.y -= 1.0;\n    \n    uv.x += float(frame) * 40.0;\n    \n    return texelFetch(iChannel0, ivec2(uv), 0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\n    fragColor = nyan(fragCoord / iResolution.xy, int(iTime * 12.0) % 6);\n}","name":"Buffer A","description":"","type":"buffer"}],"flags":{"mFlagVR":false,"mFlagWebcam":true,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":true,"mFlagMusicStream":false},"info":{"id":"MfKfDw","date":"1734460122","viewed":113,"name":"Posy - Dots","username":"aerowave","description":"Halftone dots! This simulates how printers work with CMYK inks.\nInspired by Posy: https://youtu.be/VckU9UXI_XE?t=151","likes":1,"published":3,"flags":34,"usePreview":0,"tags":["rgb","halftone","cmyk","posy"],"hasliked":0,"parentid":"","parentname":""}}