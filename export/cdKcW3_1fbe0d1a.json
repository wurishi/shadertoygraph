{"ver":"0.1","info":{"id":"cdKcW3","date":"1696696364","viewed":35,"name":"aubergine","username":"litchi","description":"my intro to sharders with kishimisu video","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette( in float t)\n{\n    vec3 a = vec3(0.278, 0.468, 0.448);\n    vec3 b = vec3(-0.737, -0.262, 0.408);\n    vec3 c = vec3(3.138, -0.632, 2.378);\n    vec3 d = vec3(-2.812, 4.571, 5.862);\n    \n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nmat2 rot(float a)\n{\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c, -s, s, c);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalisation, homotetic\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv; //conserver les coordonnees de base\n    \n    vec3 finalColor = vec3(0.0);\n    uv *= rot(iTime * 0.1);\n    \n    for (float i = 0.0; i < 3.; i++)\n    {\n    \n        //fractionner l'image et recentrer les cercles homotekiment\n        uv = fract(uv * 1.5) - 0.5;\n\n        float d = length(uv) * exp(-length(uv0)); \n\n        vec3 col = palette(length(uv0) + i*0.4 + iTime * 1.0);\n\n        d = sin(d * 4.0 + iTime * 0.4)/ 4.0; //d = smoothstep(0.0, 0.2, d);\n        d = abs(d); //le négatif est transformé en positif\n        d = 0.01 / d; //gerer le neon\n        d = pow(d, 2.0);\n\n        finalColor += col * d;\n    }\n    \n    // Output to screen\n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}