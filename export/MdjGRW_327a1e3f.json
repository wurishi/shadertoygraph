{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"channel":1,"type":"texture","id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","sampler":{"filter":"nearest","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"channel":2,"type":"texture","id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"channel":3,"type":"music","id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// Created by Mikey Chen https://github.com/mchen15\n// GPU Programming and Architecture Hackathon, University of Pennsylvania\n// http://www.seas.upenn.edu/~cis565/\n// References:\n//\thttps://iquilezles.org/articles/terrainmarching\n//  https://iquilezles.org/articles/distfunctions\n//  https://www.shadertoy.com/view/MsXGz4\n\nstruct Ray {\n\tvec3 origin;\n\tvec3 direction;\t\n};\n\nstruct Camera {\n\tvec3 position;\n\tvec3 up;\n\tvec3 view;\n};\n\nvoid constructRay(out Ray r, Camera cam, vec2 fragCoord)\n{\n\tvec2 reso = iResolution.xy;\n\tfloat aspectRatio = reso.x / reso.y;\n\tfloat ndcX = fragCoord.x / reso.x * 2.0 - 1.0;\n\tfloat ndcY = fragCoord.y / reso.y * 2.0 - 1.0;\n\t\n\tndcX *= aspectRatio;\n\t\n\t// ray origin\n\tr.origin = cam.position;\n\t\n\t// ray direction\n\tvec3 M = vec3(0); // location of the screen plane\n\tvec3 ww = normalize(M - r.origin);\n    vec3 uu = normalize(cross(cam.up, ww ));\n    vec3 vv = normalize(cross(ww,uu));\n    vec3 rd = normalize( ndcX*uu + ndcY*vv + 1.4*ww ); \n\t\n\tr.direction = rd;\n}\n\nvoid constructCamera(out Camera c)\n{\n\tc.position = vec3(0,0,1);\n\tc.up = vec3(0,1,0);\n\tc.view = vec3(0,0,-1);\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat getNoise0(vec3 p)\n{\n\tvec3 noise = texture( iChannel0, p.xy + vec2(iTime , iTime)).xyz / 10.;\n\treturn length(noise);\n}\n\nfloat getNoise1(vec3 p)\n{\n\tfloat s = iTime * 0.2;\n\tvec3 noise = texture( iChannel1, p.xy + vec2(s, s)).xyz / 10.;\n\treturn length(noise);\n}\n\nfloat getNoise3(vec3 p)\n{\n\tfloat s = iTime * 0.2;\n\tvec3 noise = texture( iChannel3, p.xy + vec2(s, s)).xyz;\n\treturn length(noise);\n}\n\n// if ray hit something return true, else return false\nbool marchRay(Ray r, out float resT)\n{\n\tfloat delt = 0.01;\n\tfloat mint = 0.001;\n\tfloat maxt = 10.0;\n\t\n\tvec3 ro = r.origin;\n\tvec3 rd = r.direction;\n\t\n\tfor( float t = 0.001; t < 10.0; t += 0.01 )\n\t{\n\t\tvec3 p = ro + rd*t;\n\t\tfloat noise1 = getNoise0(p);\n\t\tfloat noise2 = getNoise1(p);\n\t\t\n\t\tresT = sdSphere(p, 0.8)+ noise2*10. + noise1 / 1000. ;\n\t\tresT += sdTorus(p, vec2(5.6*noise1, 2.6 * noise2));\n\t\tresT += getNoise3(p) / 25.;\n\t\t\n\t\tif (resT < 0.1)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tCamera cam;\n\tRay r;\n\t\n\tconstructCamera(cam);\n\tconstructRay(r,cam,fragCoord);\n\t\n\tfloat t = 0.0;\n\tvec3 white = vec3(1);\n\tvec3 black = vec3(0);\n\t\n\t\n\tif (marchRay(r, t))\n\t{\n\t\t\n\t\tvec3 isect = r.origin + r.direction * t;\t\n\t\tvec4 c = vec4(0,0,0,1);\n\t\tc.rgb = texture (iChannel2, isect.xy).rgb;\n\t\tc.rgb += vec3(0.8,0.0,0.8) * getNoise1(isect);\n\t\tfragColor = c;\n\t\t\n\t}\n\telse\n\t{\n\t\tfragColor = vec4(black, 1.0);\n\t}\t\t\t\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MdjGRW","date":"1384664025","viewed":329,"name":"Fuzzy","username":"jankenpon","description":"simple ray marching using a combination of torus, sphere signed distances and random + sound based noise!","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""}}