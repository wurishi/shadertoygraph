{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"struct Ray\r\n{\r\n\tvec3 org;\r\n\tvec3 dir;\r\n};\r\n\r\nfloat rayPlaneIntersect( Ray ray, vec4 plane )\r\n{\r\n\tfloat f = dot( ray.dir, plane.xyz );\r\n\t\r\n\tfloat t = -( dot( ray.org, plane.xyz ) + plane.w );\r\n\tt /= f;\r\n\t\r\n\treturn t;\r\n}\r\n\r\nvec3 shade( vec3 pos, vec3 nrm, vec4 light )\r\n{\r\n\tvec3 toLight = light.xyz - pos;\r\n\tfloat toLightLen = length( toLight );\r\n\ttoLight = normalize( toLight );\r\n\t\t\r\n\tfloat diff = dot( nrm, toLight );\r\n\tfloat attn = 1.0 - pow( min( 1.0, toLightLen / light.w ), 2.0 );\r\n\tfloat comb = 2.0 * diff * attn;\r\n\t\r\n\treturn vec3( comb, comb, comb );\r\n}\r\n\r\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\r\n{\r\n\t// fragCoord: location (0.5, 0.5) is returned \r\n\t// for the lower-left-most pixel in a window\r\n\t\r\n\t// XY of the normalized device coordinate\r\n\t// ranged from [-1, 1]\r\n\tvec2 ndcXY = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\r\n\t\r\n\t// aspect ratio\r\n\tfloat aspectRatio = iResolution.x / iResolution.y;\r\n\t\r\n\t// scaled XY which fits the aspect ratio\r\n\tvec2 scaledXY = ndcXY * vec2( aspectRatio, 1.0 );\r\n\t\r\n\t// camera XYZ in world space\r\n\tvec3 camWsXYZ = vec3( 0.0, 1.0, 0.0 );\r\n\tcamWsXYZ.z += 10.0 * cos( iTime );\r\n\t\r\n\t// construct the ray in world space\r\n\tRay ray;\r\n\tray.org = camWsXYZ;\r\n\tray.dir = vec3( scaledXY, -2.0 ); // OpenGL is right handed\r\n\t\r\n\t// define the plane in world space\r\n\tvec4 plane = vec4( 0.0, 1.0, 0.0, 0.0 );\r\n\t\r\n\tfloat t = rayPlaneIntersect( ray, plane );\r\n\t\r\n\t// define the point light in world space (XYZ, range)\r\n\tvec4 lightWs = vec4( 0.0, 5.0, -5.0, 10.0 );\r\n\t\r\n\tif ( t >= 0.0 )\r\n\t{\r\n\t\tvec3 sceneWsPos = ray.org + t * ray.dir;\r\n\t\tvec3 sceneWsNrm = plane.xyz;\r\n\t\tvec2 sceneUV = sceneWsPos.xz / 4.0;\r\n\t\t\r\n\t\tvec4 sceneBase = texture( iChannel0, sceneUV );\t\t\r\n\t\tvec3 sceneShade = shade( sceneWsPos, sceneWsNrm, lightWs );\r\n\t\t\r\n\t\tfragColor = vec4( sceneShade * sceneBase.xyz, 1.0 );\r\n\t}\r\n\telse\r\n\t{\r\n\t\tfragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\r\n\t}\r\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Xsf3R8","date":"1362036832","viewed":756,"name":"Point light and Plane","username":"ming","description":"A simple shade which demonstrate how to ray-trace a plane and then shade it with a point light.","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["raytracingtutorialexample"],"hasliked":0,"parentid":"","parentname":""}}