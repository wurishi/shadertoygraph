{"ver":"0.1","info":{"id":"lXlXz8","date":"1709220816","viewed":45,"name":"fract function","username":"shaderz","description":"a simple fractal thingy","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette(float t)\n{\nvec3 a = vec3(2.1, 0.5, 3.2);\nvec3 b = vec3(0.5, 0.5, 4.1);\nvec3 c =  vec3(0.5, 0.5, 4.1);\nvec3 d = vec3(0.5, 0.5, 4.1);\n\n return  a + b*cos( 6.124124*(c*t+d) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\nvec2  uv = fragCoord / iResolution.xy * 1.0 - 1.1;\n\nuv = fract(uv * 1.5);\nuv.x *= iResolution.x / iResolution.y;\nvec3 finalColor = vec3(0.0);\n\nfor(float i =  0.1; i < 2.0; i++) {\n \nuv -= 0.5;\nvec2 uv0 = uv;\n\nfloat d = length(uv) * exp(-length(uv0));\nvec3  col = palette(d +i*.4 + iTime*.4);\n\n\nd -= sin(d*10. + iTime)/1.;\nuv *= uv;\n\nd = abs(d);\n\nd = 0.1 / d;\n\nd = step(0.1, d);\n\ncol *= d;\nfinalColor += col * d;\n}\n\nfragColor = vec4(finalColor, uv);\n\n\n}","name":"Image","description":"","type":"image"}]}