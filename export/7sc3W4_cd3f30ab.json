{"ver":"0.1","info":{"id":"7sc3W4","date":"1629818020","viewed":726,"name":"Expensive life rig","username":"evvvvil","description":"Expensive life rig - Result of an improvised live coding session on Twitch\nLIVE SHADER CODING, SHADER SHOWDOWN STYLE, EVERY TUESDAYS 21:00 Uk time:\nhttps://www.twitch.tv/evvvvil_\n","likes":21,"published":1,"flags":0,"usePreview":1,"tags":["demoscene","heart","glow","monster","rig","bone","creature","rigging","rigged","bones","alive","bdsm","honk","lifeform"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"Expensive life rig\" - Result of an improvised live coding session on Twitch\n// LIVE SHADER CODING, SHADER SHOWDOWN STYLE, EVERY TUESDAYS 21:00 Uk time: \n// https://www.twitch.tv/evvvvil_\n\n// LIVE SHADER CODING, SHADER SHOWDOWN STYLE, EVERY TUESDAYS 21:00 Uk time: \n// https://www.twitch.tv/evvvvil_\n\n//MAJOR THANKX go to dean_the_coder for helping me write the \"honk\" bone function\n//find a better version of bone function, more simplle and optmized, made by dean_the_coder on here: https://www.shadertoy.com/view/7tBSDc\n\nvec2 z,v,e=vec2(.0035,-.0035);float t,tt,tn,nails,b,g,gg,heartBeat;vec3 np,bp,pp,po,no,al,ld,lp,op;\nfloat bo(vec3 p, vec3 r){p=abs(p)-r;return max(max(p.x,p.y),p.z);} //CHEAP BOX FUNCTION\nmat2 r2(float r){return mat2(cos(r),sin(r),-sin(r),cos(r));} //ROTATE FUNCTION\nvec4 texNoise(vec2 uv,sampler2D tex ){ float f = 0.; f+=texture(tex, uv*.125).r*.5; f+=texture(tex,uv*.25).r*.25; //Funciton simulating the perlin noise texture we have in Bonzomatic shader editor, written by yx\n                       f+=texture(tex,uv*.5).r*.125; f+=texture(tex,uv*1.).r*.125; f=pow(f,1.2);return vec4(f*.45+.05);}\nfloat smin(float a,float b,float k){  float h=max(0.,k-abs(a-b));return min(a,b)-h*h*.25/k;}\nfloat smax(float a,float b,float k){  float h=max(0.,k-abs(-a-b));return max(-a,b)+h*h*.25/k;}\nvec2 smin( vec2 a, vec2 b,float k ){ float h=clamp(.5+.5*(b.x-a.x)/k,.0,1.);return mix(b,a,h)-k*h*(1.0-h);}             \nfloat cap( vec3 p, float h, float r ){ p.y -= clamp( p.y, 0.0, h );return length( p ) - r;}\nfloat hand(vec3 p){  \n  float t=length(p+vec3(0,.25,0))-0.25;\n  pp=p;pp.x=abs(abs(pp.x)-.22)-.11;\n  pp.z-=sin(pp.y*.6+2.5)*max(pp.y*.4,0.);\n  float fingers =max(length(pp.xz)-.1,abs(p.y-.5)-.5);\n  t=smin(t,fingers,.5);\n  nails=max(length(pp.xz)-.01,abs(pp.y)-2.5);  \n  t=min(t,0.7*nails);\n  return t;  \n}\nfloat honk(inout vec3 p,mat2 rot,vec3 r){ //BONE function, i started with the wrong axis dean_the_coder has a better more simple version here: //find a better version of bone function, more simplle and optmized, made by dean_the_coder on here: https://www.shadertoy.com/view/7tBSDc\n  p.y-=r.y*r.z;\n  p.xy*=rot;\n  p.yz*=r2(mix(0.,-.48,cos(tt*.4)*.5+.5));\n  p.xz*=r2(sin(tt)*.5*(1.-r.z));\n  float gr=clamp(sin(p.y*5.),-.25,.25)*.1;\n  pp=p;pp.xy*=r2(sin(p.y));\n  gr=min(gr,clamp(sin(pp.y*20.),-.25,.25)*.1);\n  float t=0.6*cap(p,1.5,0.3-sin(p.y*2.5+1.5)*.1-gr);\n  p.y-=r.y;\n  return t;\n}\nvec2 mp( vec3 p ,float ga){  \n  op=p;  \n  p.xz*=1.+(smoothstep(0.,1.,cos(length(p*2.)-tt*3.)*.5+.5)*2.)*0.2*max(0.,(1.-abs(p.x*.4)));\n  b=sin(p.y*1.5)*.2;\n  tn=texNoise(p.xy*.08,iChannel0).r;\n  np=p;pp=p-vec3(-1,0,0); \n  vec2 h,t=vec2(honk(pp,r2(1.6+sin(tt*.2)*.75),vec3(0.,1.,0)),0.);   \n  bp=p;bp.xz=abs(bp.xz)-.5-sin(p.y*.5)*.4;   \n  vec3 rp=np=bp; rp.y-=2.3;  \n  rp=abs(rp-vec3(0,-1.,0))-vec3(.2+b,1.,.2+b);\n  h=vec2(.7*(length(rp)-.1-tn*.5),1.); //SMALL BLACK BALLS\n  float arm2=honk(pp,r2(sin(tt*.1)),vec3(0.,1.,1.));\n  t.x=smin(t.x,arm2,.2); \n  h.x=smin(h.x,max((arm2-.1),abs(abs(pp.y)-.15)-.05),.1);\n  t.x=smin(t.x,hand(pp-vec3(0.,1.,0.)),.1);   \n  gg+=0.1/(0.1+nails*nails*40.);\n  pp=p-vec3(1,0,0);\n  t.x=min(t.x,honk(pp,r2(sin(tt*.2)*.5-1.85),vec3(0.,1.,0))); //FIRST ARM\n  arm2=honk(pp,r2(sin(tt*.1)),vec3(0.,1.,1));//SECOND ARM ADDED TO WHITE MATERIAL\n  t.x=smin(t.x,arm2,0.1); //SECOND ARM ADDED TO WHITE MATERIAL\n  h.x=smin(h.x,max((arm2-.1),abs(abs(pp.y)-.15)-.05),.2); //SECOND ARM REUSED IN BLACK MATERIAL AND CUT\n  t.x=smin(t.x,hand(pp-vec3(0.,1.,0.)),.1);   //HAND\n  gg+=0.1/(0.1+nails*nails*40.); \n  float torso= bo(p-vec3(0,-1.2,0),vec3(.6)); //TORSO\n  torso=smax(abs(abs(abs(p.y)-1.)-.3)-.2,torso,.5);\n  t.x=smin(t.x,0.7*torso,0.5); //BOX / TORSO\n  t.x=smax(length(p.xy)-1.2,t.x,.5);\n  t.x=smin(t.x,0.7*(length(bp.xz)-.1),1.); //SPLINES VERTICAL  \n  pp.xz*=r2(sin(p.y*5.)*.3);\n  bp.xz=abs(bp.xz)-.2-b;  \n  float splines=length(bp.xz)-sin(p.y*50.)*.005-tn*.2;\n  h.x=smin(h.x,0.5*splines,.1); //SPLINES VERTICAL AGAIN\n  h.x=smin(h.x,0.5*(length(abs(np.xz)-.6+sin(p.y*1.5-.2)*.5)-.01-tn*.2),.1); //SPLINES VERTICAL AGAIN AGAIN!\n  float ter=op.y+5.+tn-sin(length(op))*.7;  //TERAIN\n  ter=smax((length(op.xz)-3.-tn),ter,1.5); //CUT HOLE IN TERRAIN\n  ter=smin(ter,length(abs(op.xz)-7.+tn*.5-cos(op.y*.5)*1.5)-1.,2.); //ADD SIDE FEATURES\n  h.x=min(h.x,0.6*ter);\n  float glo=0.8*(length(p.xz)-.1); //CORE  \n  np=p-vec3(0,-.5-heartBeat*.5,0);\n  np.z=abs(np.z)-mix(0.4,3.,heartBeat);\n  float heart=length(np)-.8+heartBeat*.3+cos(np.y*4.+1.)*.2*abs(sin(np.x*4.)); //HEART\n  glo=smin(glo,0.4*heart,0.1);        //HEART ADED TO GLOW \n  glo=smin(glo,0.55*(length(rp+vec3(-.0,.1,-.36))-.05),.1);  \n  g+=0.1/(0.1+glo*glo*(60.-50.*heartBeat*sin(p.y*.4-tt*6.)))*ga;\n  t.x=smin(t.x,glo,.1);\n  t=smin(t,h,.2);  \n  glo=length(bp.xz+tn*.5); //BLUE CORE\n  glo=min(glo,0.5*(length(cos((pp-vec3(0,4,0))*.1))+.05)); //BLUE SIN LINES AT BACK\n  gg+=0.1/(0.1+glo*glo*50.)*ga;\n  h=vec2(glo,2);\n  t=t.x<h.x?t:h;\n\treturn t;\n}\nvec2 tr( vec3 ro, vec3 rd )//RAYMARCHING LOOP\n{\n  vec2 h,t=vec2(.1);//NEAR PLANE\n  for(int i=0;i<128;i++){//LOOOP MAX 128 STEPS\n  h=mp(ro+rd*t.x,1.);//GET DISTANCE TO GEOM\n    if(h.x<.0001||t.x>50.) break; //IF WE CLOSE ENOUGH OR IF WE TOO FAR, BREAK\n    t.x+=h.x;t.y=h.y;//BIG JUMP TO GEOMETRY IN NEXT ITERATION, REMEMBER MATERIAL ID\n  }  \n  if(t.x>50.) t.y=-1.;//IF WE TOO FAR RETURN 0 MAT ID\n  return t;\n}\n#define a(d) clamp(mp(po+no*d,0.).x,0.,1.)\n#define s(d) smoothstep(0.,1.,mp(po+ld*d,0.).x)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){ //LINES ABOVE ARE ambient ollcusion and sss\n  vec2 uv=(fragCoord.xy/iResolution.xy-0.5)/vec2(iResolution.y/iResolution.x,1);   //GET UVS  \n  tt=mod(iTime,62.83)+23.;  //MOD TIME TO AVOID ARTIFACT\n  heartBeat=smoothstep(0.,1.,cos(-tt*3.)*.5+.5);\n  vec3 ro=mix(vec3(cos(tt*.2)*5.,-4,sin(tt*.2)*10.),vec3(cos(tt*.2)*4.,-sin(tt*.4)*5.,3.),sin(tt*.2)*.5+.5),\n  cw=normalize(vec3(0)-ro),cu=normalize(cross(cw,vec3(0,1,0))),cv=normalize(cross(cu,cw)),\n  rd=mat3(cu,cv,cw)*normalize(vec3(uv,0.5)),co,fo;\n  co=fo=vec3(.15,.11,.12)-length(uv)*.1-rd.y*.2+sin(rd.x*150.*rd.y)*.005;//+texNoise(rd.xz*1.+sin(rd.x*15.),iChannel0).r*.05;  \n  z=tr(ro,rd);t=z.x;  \n  if(z.y>-1.){//IF WE HIT SOMETHING THEN DO LIGHTING\n    lp=ro+vec3(0,2,0);ld=normalize(lp-po);\n    po=ro+rd*t;\n    no=normalize(e.xyy*mp(po+e.xyy,0.).x+e.yyx*mp(po+e.yyx,0.).x+e.yxy*mp(po+e.yxy,0.).x+e.xxx*mp(po+e.xxx,0.).x);\n    al=mix(vec3(1.74),mix(vec3(.05),vec3(.02,.05,.1),tn*15.5),smoothstep(0.,1.,min(1.,z.y*2.)));    \n    if(z.y>1.) al=vec3(1);\n    float dif=max(0.,dot(no,ld)),\n    fr=pow(1.+dot(no,rd),4.),\n    attn=1.-pow(min(1.,length(lp-po)/15.),4.0),\n    sp=pow(max(dot(reflect(-ld,no),-rd),0.),40.);\n    co=attn*mix(sp+al*(a(.1)+.2)*(dif+s(1.)),fo,min(fr,.5));\n    co=mix(fo,co,exp(-.0001*t*t*t));\n  }  \n  fragColor = vec4(pow(co+g*.2*vec3(.9,.2,.1)+gg*.2*vec3(.1,.2,.9),vec3(.55)),1);\n}","name":"Image","description":"","type":"image"}]}