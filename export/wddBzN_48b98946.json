{"ver":"0.1","info":{"id":"wddBzN","date":"1604602085","viewed":437,"name":"Rainy Window Glass","username":"dejaniv","description":"Rain drops falling on window glass.","likes":5,"published":1,"flags":8,"usePreview":0,"tags":["rain"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 dist(vec3 pos_arg_in) \n{\n    vec3 pos_arg = pos_arg_in + vec3((0.5 - iMouse.xy / 4.0 / iResolution.xy), 0.0);\n    float rnd2 = texture(iChannel0, vec2(pos_arg.x+ iTime / 10.0, pos_arg.y / 10.0 + iTime / 3.0)).x;\n    rnd2 += texture(iChannel0, vec2(pos_arg.x, pos_arg.y / 5.0 + iTime / 5.0)).x;\n    pos_arg = pos_arg_in + vec3((0.5 - iMouse.xy / iResolution.xy), 0.0);\n    float rnd = texture(iChannel0, vec2(pos_arg.x, pos_arg.y)).x;\n    float rnd3 = texture(iChannel0, vec2(pos_arg.x/10.0, pos_arg.y/10.0)).x;\n    float bg_intensity = (0.8 + rnd2 / 25.0) * min(pos_arg_in.x + pos_arg_in.y + 0.5, 2.0) / 2.0;\n    float intensity = -1.0;\n    float alpha = 0.0;\n    const vec2 grid_step =  vec2(0.04, 0.05);\n    vec2 grid_location = floor((0.5 - pos_arg.xy) / grid_step);\n    vec2 start = (grid_location - 2.0) * grid_step;\n    vec2 end = (grid_location + 2.0) * grid_step;\n    for (float s = start.x; s < end.x; s += grid_step.x) {\n        for (float t = start.y; t < end.y; t += grid_step.y) {\n            vec3 pos = vec3(pos_arg.x + s, pos_arg.y + t, pos_arg.z);\n            // grid displacement\n\t\t    float pos_delta_x = texture(iChannel0, vec2(s, t)).x / 15.0;\n\t\t    float pos_delta_y = texture(iChannel0, vec2(s + 0.1, t + 0.2)).x / 15.0;\n            pos += vec3(pos_delta_x, pos_delta_y, 0) + vec3(rnd, rnd, 0.0) / 100.0; // jaggedness\n\n            const vec3 center = vec3(0.5, 0.5, 1.0);\n            const float decay_period = 30.0;\n\t\t    float rnd4 = iTime + texture(iChannel0, vec2(s, t)).x * decay_period;\n            float alpha_candidate = 1.0 / (50.0 + (float(int(rnd4) % int(decay_period)) + fract(rnd4)) * 5.0);\n            float radius = max(rnd3 * alpha_candidate / 1.0, 0.0005) ;\n            alpha_candidate = min((radius - 0.003) * 500.0, 1.0);\n\n            const vec3 lightVec = normalize(vec3(0.0, 0.0, 1.0));\n            vec3 relPos = (pos - center) * vec3(1.0, iResolution.y/iResolution.x, 1.0);\n            float d = length(relPos);\n            if (d > radius) {\n                continue;\n            }\n            float z = sqrt(radius*radius - relPos.x*relPos.x - relPos.y * relPos.y)*sin(pos.x * 3.5 + pos.y);\n            vec3 rvec = normalize(vec3(relPos.x, relPos.y, z));\n            float dot_product = dot(rvec, lightVec);\n            dot_product = (dot_product > 0.4 ? (dot_product - 0.4) * 2.0 : 0.0);\n            if (intensity < dot_product) {\n                intensity = dot_product;\n                alpha_candidate *= 1.0 - intensity * 0.8;\n\n                // anti-aliasing\n                if (d > radius - 0.001) {\n                    alpha_candidate *= (radius - d) / 0.001;\n                }            \n\n                alpha = alpha_candidate;\n            }\n        }\n    }\n    intensity = intensity < 0.0 ? bg_intensity : (intensity * alpha + bg_intensity * (1.0 - alpha));\n    vec3 color = vec3(intensity * 0.8, intensity * 0.9, intensity * 0.92);\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = vec4(dist(vec3(uv, 1.0)), 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// low pass filtered noise\n\nvec2 generateSample(float time)\n{\n    time = 10.0 + float(int(time) % 10) + fract(time);\n    float n = round(time * iSampleRate);\n    float s = 2.0 * texture(iChannel0, vec2((n / 64.0) / 64.0, float(int(n) % 64) / 64.0)).x - 1.0;\n    vec2 v1 = vec2(sin(cos(s * time / 60.0)), cos(sin(s * time / 60.0)));\n    vec2 v2 = vec2(cos(sin(s*time)), sin(cos(s*time)));\n    float t1 = texture(iChannel0, v1 + v2).x;\n    float t2 = texture(iChannel0, v1 - v2).x;\n    return vec2(t1, t2) * 0.02;\n}\n\nvec2 mainSound( in int samp, float time )\n{\n    vec2 result = vec2(0.0, 0.0);\n    for (int i = 0; i < 10; ++i)\n    \tresult += generateSample(time + 1.0/iSampleRate * float(i));\n    return result / 10.0;\n}","name":"Sound","description":"","type":"sound"}]}