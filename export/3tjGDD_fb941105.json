{"ver":"0.1","info":{"id":"3tjGDD","date":"1559626673","viewed":112,"name":"KillmeDoscope","username":"Aljen","description":"KillmeDoscope!","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d","tag","iq","shader","alien","lol","idk","killme","sh18","aljen"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nmat3 camera() {\n    float a = iMouse.x*0.05 + 2.0;\n    vec3 right = vec3(1.0, 0.0, 0.0);\n \tvec3 up = normalize(vec3(0.0, 1.0, 1.8 + (iMouse.y/iResolution.y*2.0-1.0)*1.5)); \n    \n    mat2 ra = rot(a);\n    right.xz *= ra;\n    up.xz *= ra;\n        \n    return mat3(right, up, cross(right, up));\n}\n\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat scene(vec3 p) {\n\tfloat scale = 1.0;\n\tfloat dist = 0.0;\n\tfor (int i = 0; i < MENGER_ITERATIONS; i++) {\n\t\tdist = max(dist, -sdCrossRepScale(p, scale));\n\t\tscale *= 3.0;\n\t}\n    \n    dist -= p.z;\n    \n\treturn dist;\n}\n\nvec4 colorize(float c) {\n\tfloat hue = mix(0.6, 1.15, min(c * 1.2 - 0.05, 1.0));\n\tfloat sat = 1.0 - pow(c, 4.0);\n\tfloat lum = c;\n\tvec3 hsv = vec3(hue, sat, lum);\n\tvec3 rgb = hsv2rgb(hsv);\n\treturn vec4(rgb, 1.0);\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    mat3 cam = camera();\n    vec3 ro = cam * vec3(uv, -1.5-iMouse.y/iResolution.y);\n    vec3 rd = cam * normalize(vec3(uv, 1.0));\n\t\n\tfloat dist = scene(ro);\n\tint stepsTaken;\n\tfor (int i = 0; i < MAX_RAY_STEPS; i++) {\n\t\tif (dist < RAY_STOP_TRESHOLD) {\n\t\t\tcontinue;\n\t\t}\n\t\tro += rd * dist;\n\t\tdist = scene(ro);\n\t\tstepsTaken = i;\n\t}\n    \n\tvec4 col = colorize(pow(float(stepsTaken) / float(MAX_RAY_STEPS), 0.9));\n    \n    fragColor = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const int MAX_RAY_STEPS = 64;\nconst float RAY_STOP_TRESHOLD = 0.0001;\nconst int MENGER_ITERATIONS = 5;\n\nfloat sdCross(vec3 p) {\n\tp = abs(p);\n\tvec3 d = vec3(max(p.x, p.y),\n\t\t\t\t  max(p.y, p.z),\n\t\t\t\t  max(p.z, p.x));\n\treturn min(d.x, min(d.y, d.z)) - (1.0 / 3.0);\n}\n\nfloat sdCrossRep(vec3 p) {\n\tvec3 q = mod(p + 1.0, 2.0) - 1.0;\n\treturn sdCross(q);\n}\n\nfloat sdCrossRepScale(vec3 p, float s) {\n\treturn sdCrossRep(p * s) / s;\t\n}\n\n\nmat2 rot(float a) {\n \treturn mat2(cos(a), sin(a), -sin(a), cos(a));   \n}\n","name":"Common","description":"","type":"common"}]}