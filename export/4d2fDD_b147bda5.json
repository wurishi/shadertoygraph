{"ver":"0.1","info":{"id":"4d2fDD","date":"1500486048","viewed":163,"name":"JF-001 Reflection ","username":"JetFightzer","description":"Simple reflection shader","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["reflection","sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 sphere(vec3 ray, vec3 dir, vec3 center, float radius)\n{\n    vec3 relRay = ray - center;\n    float len2 = dot(relRay, relRay);\n    float rad2 = radius * radius;\n    float st;\n    //float st = step(0.0, len2 - rad2);\n    if(length(relRay) >= radius) {\n        st = 1.0;\n    } else {\n        st = 0.0;\n    }\n\n    vec3 norm = vec3(relRay.xy, sqrt(rad2 - len2));\n\n    vec3 ref = reflect(dir, norm);\n\n    if(length(relRay) >= radius) {\n        return dir;\n    } else {\n        return ref;\n    };\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy / min(iResolution.x, iResolution.y);\n\n    vec3 uv = vec3(fragCoord / min(iResolution.x, iResolution.y) * 5.0 - vec2(2.5 * res.x, 2.5 * res.y), 0.0);\n\n    vec3 dir = sphere(uv, vec3(uv.xy / 5.0, -1.0), vec3(0.0, 0.0, 0.0), 1.0);\n\n    mat2 rot = mat2(\n        cos(iTime / 2.0),   sin(iTime / 2.0),\n        -sin(iTime / 2.0), cos(iTime / 2.0)\n    );\n\n    fragColor.rgb = texture(iChannel0, vec3((dir.xz * rot).x, dir.y, (dir.xz * rot).y)).rgb;\n}","name":"Image","description":"","type":"image"}]}