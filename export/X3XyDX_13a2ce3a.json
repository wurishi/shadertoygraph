{"ver":"0.1","info":{"id":"X3XyDX","date":"1726695379","viewed":118,"name":"voxel islands sphere ocean plant","username":"jt","description":"Voxel terrain forms islands of randomly rotated cubes, overgrown by circle grass, surrounded by voxel sphere ocean. ","likes":20,"published":1,"flags":0,"usePreview":0,"tags":["3d","fractal","noise","terrain","raymarch","voxels","sdf","water","voxel","grass","random","mountains","dda","hybrid","octaves","octave","clumpy"],"hasliked":0,"parentid":"lXsyR7","parentname":"voxel terrain grows clumpy grass"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/X3XyDX voxel islands sphere ocean plant, 2024 by jt\n// based on https://www.shadertoy.com/view/43syR7 voxel terrain\n// using https://www.shadertoy.com/view/lXGGR3 raymarch voxels with color\n\n// https://www.shadertoy.com/view/lXsyR7 voxel terrain grows clumpy grass, 2024 by jt\n// growing https://www.shadertoy.com/view/dtGBDz orthogonal circles grassy plant\n// on https://www.shadertoy.com/view/43syR7 voxel terrain\n// in https://www.shadertoy.com/view/43XcWX sphere ocean structure\n// using https://www.shadertoy.com/view/lXGGR3 raymarch voxels with color\n\n// Voxel terrain forms islands of randomly rotated cubes, overgrown by circle grass, surrounded by voxel sphere ocean.\n\n// tags: 3d, fractal, noise, terrain, raymarch, voxels, sdf, voxel, grass, random, mountains, dda, hybrid, octaves, octave, clumpy, water, ocean, sphere\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// For correct ambient occlusion sample 2x2x2 voxels (slow!)\n//#define HIGH_QUALITY\n\n\n#define TERRAIN_ITERATIONS 4\n\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n#define ITER_MAX 100u\n\n\nfloat hash12(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat hash13(vec3 p3) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    p3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 hash22(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec3 hash32(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nvec3 hash33(vec3 p3) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    p3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\n#define pi 3.1415926\n#define tau (pi+pi)\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\nfloat sphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat box(vec3 p, vec3 s) // adapted from https://iquilezles.org/articles/distfunctions/\n{\n    vec3 d = abs(p) - s;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat box(vec3 p, vec3 p0, vec3 p1)\n{\n    return box(p-(p1+p0)/2.0, abs(p1-p0)/2.0);\n}\n\nfloat box(vec3 p, vec3 p0, vec3 p1, float r)\n{\n    r = max(r,0.0);\n    return box(p-(p1+p0)/2.0, abs(p1-p0)/2.0-r)-r;\n}\n\nfloat cylinder(vec3 p, vec2 s) // adapted from https://iquilezles.org/articles/distfunctions/\n{\n    vec2 d = abs(vec2(length(p.xy),p.z)) - s;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat frame(vec3 p, vec3 b, float e) // https://iquilezles.org/articles/distfunctions/\n{\n        p = abs(p  )-b;\n    vec3 q = abs(p+e)-e;\n    return min(min(\n        length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n        length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n        length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\nfloat frame(vec3 p, vec3 p0, vec3 p1, float e)\n{\n    return frame(p-(p1+p0)/2.0,abs(p1-p0)/2.0,e);\n}\n\nstruct result\n{\n    vec3 color;\n    float dist;\n};\n\nvec4 random_unit_quaternion(vec3 r) // r in [0,1] https://stackoverflow.com/questions/31600717/how-to-generate-a-random-quaternion-quickly\n{\n    return\n        vec4\n        (\n            sqrt(1.0-r.x) * sin(2.0*pi*r.y),\n            sqrt(1.0-r.x) * cos(2.0*pi*r.y),\n            sqrt(    r.x) * sin(2.0*pi*r.z),\n            sqrt(    r.x) * cos(2.0*pi*r.z)\n        );\n}\n\n// https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation#Quaternion-derived_rotation_matrix\nmat3 quaternion_to_matrix(vec4 q) // https://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToMatrix/index.htm\n{\n    float s = dot(q,q); // just in case, not needed for uniform quaternions\n    return\n        /*\n        mat3\n        (\n            vec3(1.0-2.0*(q.y*q.y+q.z*q.z),       2.0*(q.x*q.y-q.z*q.w),       2.0*(q.x*q.z+q.y*q.w)),\n            vec3(    2.0*(q.x*q.y+q.z*q.w), 1.0 - 2.0*(q.x*q.x+q.z*q.z),       2.0*(q.y*q.z-q.x*q.w)),\n            vec3(    2.0*(q.x*q.z-q.y*q.w),       2.0*(q.y*q.z+q.x*q.w), 1.0 - 2.0*(q.x*q.x+q.y*q.y))\n        );\n        */\n        mat3(1) // identity\n        +\n        2.0\n        *\n        mat3 // could swizzle with cross-product be used to compactify this?\n        (\n            vec3(-q.y*q.y-q.z*q.z,+q.x*q.y-q.z*q.w,+q.x*q.z+q.y*q.w),\n            vec3(+q.x*q.y+q.z*q.w,-q.x*q.x-q.z*q.z,+q.y*q.z-q.x*q.w),\n            vec3(+q.x*q.z-q.y*q.w,+q.y*q.z+q.x*q.w,-q.x*q.x-q.y*q.y)\n        )\n        /\n        s;\n}\n\nmat3 random_rotation(vec3 r)\n{\n    return quaternion_to_matrix(random_unit_quaternion(r));\n}\n\nfloat ortho_circle_flower_sdf(int n, vec2 p) // https://www.shadertoy.com/view/dldBWl orthogonal circle flower sdf, 2023 jt\n{\n    n = 2*n+1; // n must be odd\n    float slice = pi/float(n);\n\n    p.x = abs(p.x); // mirror horizontally\n    float r = (p.y*p.y+2.0*p.y+p.x*p.x+1.0)/(2.0*p.x); // calculate radius of circular arc leaf passing through this point\n\n    // equidistant circle segment endpoints on unit circle\n    float r0 = tan(floor(atan(r)/slice)*slice); // to angle then quantize then to length\n    float r1 = tan( ceil(atan(r)/slice)*slice); // to angle then quantize then to length\n\n    // circle center\n    vec2 c0 = vec2(r0,-1); // lower leaf\n    vec2 c1 = vec2(r1,-1); // upper leaf\n\n    // endpoints\n    float mu = atan(p.x,p.y);\n    mu = (floor(mu/slice/2.0)+0.5)*slice*2.0;\n    vec2 c = vec2(sin(mu),cos(mu));\n\n    return\n        //length(p) < 1.0; // approximate\n        dot(p, c) < 1.0 // thanks to tdhooper for fixing remaining discontinuities by changing length(p) < 1.0 to dot(p, c) < 1.0 (turns circle into polygon)\n        ?\n        min(abs(length(p-c0)-r0),abs(length(p-c1)-r1)) // circular arc leafs\n        :\n        length(p-c); // leaf endpoints\n}\n\nfloat ortho_circle_flower_sdf(int m, int n, vec3 p) // https://www.shadertoy.com/view/dtGBDz orthogonal circles grassy plant (jt)\n{\n    float phi = round(atan(p.y,p.x)/(2.0*pi/float(m)))*(2.0*pi/float(m)); // polar & quantize\n    p.xy = mat2(cos(phi),-sin(phi),sin(phi),cos(phi))*p.xy;\n    return length(vec2(ortho_circle_flower_sdf(n, vec2(p.xz)),p.y));\n}\n\nfloat random_sphere(ivec2 p, vec3 q, float d) // https://www.shadertoy.com/view/43XcWX sphere ocean structure (jt)\n{\n    vec2 r = hash22(vec2(p));\n    float c = cos(iTime * r.y + r.x) * 0.5/*tweak*/;\n    float s = sin(iTime * r.y + r.x) * 0.5/*tweak*/;\n    return length(q + vec3(c, s, 0.0)) - d;\n}\n\nresult sphere_ocean(ivec2 p, vec3 q) // https://www.shadertoy.com/view/43XcWX sphere ocean structure (jt)\n{\n    float r = 1.2; // tweak\n    result d = result(vec3(0),DIST_MAX);\n    for(int y = -1; y <= +1; y++)\n    {\n        for(int x = -1; x <= +1; x++)\n        {\n            vec3 tint = vec3(1);//hash32(vec2(p.x-x,p.y-y))*0.5+0.5;\n            result e = result(vec3(0.0,0.05,0.25)*tint,random_sphere(p - ivec2(x, y), q + vec3(x, y, 0), r));\n            if(e.dist < d.dist) d = e;\n        }\n    }\n    return result(d.color,max(q.z/*base plane*/,-d.dist));\n}\n\nfloat terrain(int n, ivec2 v) // https://www.shadertoy.com/view/43syR7 voxel terrain (jt)\n{\n    int m = 1 << n;\n    ivec2 v0 = v & ~(m-1); // clear n lower bits\n    v -= v0; // n lower bits\n\n    float h00 = hash12(vec2(v0 + ivec2(0,0)));\n    float h01 = hash12(vec2(v0 + ivec2(m,0)));\n    float h10 = hash12(vec2(v0 + ivec2(0,m)));\n    float h11 = hash12(vec2(v0 + ivec2(m,m)));\n\n    //return hash12(vec2(v0));\n    //return (float(m-v)*h00+float(m)*h01)/float(m);\n    //return mix(h00,h01,float(v)/float(m));\n    vec2 q = vec2(v)/vec2(m-1);\n    return mix(mix(h00,h01,q.x),mix(h10,h11,q.x),q.y);\n}\n\nfloat terrain_iterated(int n, ivec2 v) // https://www.shadertoy.com/view/43syR7 voxel terrain (jt)\n{\n    float h = 0.0;\n    for(int i = 1; i < n; i++)\n    {\n        h += terrain(i, v) * float(1<<i);\n    }\n    return h;\n}\n\nresult map(ivec3 v, vec3 l) // unit grid: voxel = float(position), local = fract(position)\n{\n    int waterlevel = 6;\n    float h = terrain_iterated(TERRAIN_ITERATIONS,v.xy);\n    //if(v.z < 6) return result(vec3(0), DIST_MAX); // signal to skip this voxel\n    vec3 color = hash33(vec3(v)*123.456);\n    if(v.z < int(floor(h)))\n    {\n        //return result(color, box(l, vec3(0.0+0.1),vec3(1.0-0.1))-0.1);\n\n        // TODO: uncorrelate rotation from colors\n        mat3 R = random_rotation(color/*r.xyz*/); // NOTE: r must be in [0,1]\n\n        return result(vec3(color.x+color.y+color.z)/3.0, max(box(l-0.5,vec3(0.5)),box(R*(l-0.5), vec3(0.49))-0.02));\n        //return result(vec3(color.z)/3.0, max(box(l-0.5,vec3(0.5)),box(R*(l-0.5), vec3(0.49))-0.02));\n    }\n    if(v.z == int(floor(h)) && v.z > waterlevel)\n    {\n        vec3 r = color; // TODO: uncorrelate random from colors\n        float s = mix(0.5,1.0,r.z);\n        return result(vec3(color), ortho_circle_flower_sdf(5, 5, (l-0.5)*2.0/s-vec3(0,0,-0.5/s))/2.0*s-0.01);\n    }\n\n    if(v.z == waterlevel)\n    {\n        return sphere_ocean(v.xy, vec3(l.xy-0.5,l.z-1.2));\n    }\n\n    return result(vec3(0), DIST_MAX); // signal to skip this voxel\n}\n#ifdef HIGH_QUALITY\nresult map(vec3 p) // for correct ambient occlusion sample 2x2x2 voxels (slow!)\n{\n    // I think kastorp originally suggested to sample only 2x2x2 instead of 3x3x3, thanks!\n    result d = result(vec3(0), DIST_MAX);\n    ivec3 s = ivec3(step(0.5, fract(p)));\n    ivec3 o;\n    for(o.z = s.z-1; o.z < s.z+1; o.z++)\n        for(o.y = s.y-1; o.y < s.y+1; o.y++)\n            for(o.x = s.x-1; o.x < s.x+1; o.x++)\n            {\n                result r = map(ivec3(floor(p))+o, fract(p)-vec3(o));\n                if(r.dist < d.dist)\n                    d = r;\n            }\n    return d;\n}\n#else\nresult map(vec3 p)\n{\n    return map(ivec3(floor(p)), fract(p));\n}\n#endif\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal(vec3 p)\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return normalize(k.xyy*map(p + k.xyy*h).dist +\n                     k.yyx*map(p + k.yyx*h).dist +\n                     k.yxy*map(p + k.yxy*h).dist +\n                     k.xxx*map(p + k.xxx*h).dist);\n}\n\n// NOTE: Apparently sign fails on some systems! Thanks to spalmer for debugging this!\nvec3 sgn(vec3 v) // WORKAROUND FOR COMPILER ERROR on some systems\n{\n    return step(vec3(0), v) * 2.0 - 1.0;\n}\n\nresult trace(vec3 ro, vec3 rd, float t0, float t1, bool pass) // ray-march sdf handling discontinuities between voxels  (jt)\n{\n    result h;\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++) // finite loop originally suggested by pyBlob to avoid stalling if ray parallel to surface just above EPSILON\n    {\n        vec3 p = ro + rd * t;\n        h = map(p);\n        if(h.dist < EPSILON)\n            return result(h.color, t);\n\n        // NOTE: An extra step per voxel, use if sdf discontinuous between voxels\n        //       Could make this conditional by prefixing sth. like if(voxel_changed) // suggested by spalmer, see variant below\n        // constrain step to voxels (voxel-snap ray-march plugin by jt, thanks to Shane for the idea!)\n        {\n            // NOTE: assuming unit grid\n            // sgn(rd)*0.5 are the walls in ray direction, fract(p) - 0.5 is center of voxel\n            vec3 sd = (sgn(rd)*0.5 - (fract(p) - 0.5))/rd; // distances to voxel sides / walls\n            vec3 n = step(sd.xyz, min(sd.yzx, sd.zxy)); // component true if corresponding wall is nearest (at most one component true) NOTE: originally I used lessThanEqual, min from fb39ca4/kzy then switched to step, min by iq\n            float skip = dot(sd, vec3(n)) + EPSILON; // distance to next voxel: sum up all components, weighted by the nearest flag (assuming only one component is true this selects the nearest component)\n            h.dist = min(h.dist, skip); // constrain step to at most next block to handle sdf discontinuities between voxels\n        }\n\n        t += h.dist;\n    }\n\n    return result(h.color, pass ? t1 : t); // pass/stop on running out of iterations\n}\n\n// NOTE: Don't forget to add +normal*EPSILON to the starting position\n//       to avoid artifacts caused by getting stuck in the surface\n//       due to starting at distance < EPSILON from the surface.\n//       (normal could be calculated here but that would most likely be redundant)\n//       Thanks to spalmer for pointing that out.\nfloat shadow(vec3 ro, vec3 rd, float t0, float t1)\n{\n    return trace(ro, rd, t0, t1, true/*pass*/).dist < t1 ? 0.0 : 1.0;\n}\n#ifdef HIGH_QUALITY\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow(vec3 ro, in vec3 rd, float t0, float t1, float k)\n{\n    float res = 1.0;\n    float ph = 1e20;\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++)\n    {\n        float h = map(ro + rd*t).dist;\n        if( h < EPSILON )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n#endif\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor ).dist;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\nfloat checker(vec2 p)\n{\n    return step(0.0, sin(p.x*pi)*sin(p.y*pi));\n}\n\nfloat checker(vec3 p)\n{\n    return step(0.0, sin(p.x*pi)*sin(p.y*pi)*sin(p.z*pi));\n}\n\nvec3 material(vec3 p)\n{\n    return vec3(1.0); // plain\n    //return mix(vec3(0.25), vec3(0.75), checker(p*2.0+0.5)); // checker\n}\n\nvoid mainImage(out vec4 fragColor, vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    I = (2.0 * I - R) / R.y; // concise scaling thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    float pitch = pi - pi * float(iMouse.y) / float(R.y); // circle\n    //float pitch = pi - pi * float(iMouse.y) / float(R.y); // look around\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    //pitch = !demo ? pitch : 4.0/3.0 * pi / 2.0; // circle\n    pitch = !demo ? pitch : pi / 2.0; // look around\n\n    //vec3 ro = vec3(0.0, 0.0,-7.5);\n    vec3 ro = vec3(0.0, 0.0,0.0);\n    //vec3 ro = vec3(0.0, 0.0,0.0); // look around\n    vec3 rd = normalize(vec3(I.xy, 2.0));\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n    if(false)\n    {\n        ro.xy += 8.0; // hill-top\n        ro.z += 15.0; // hill-top\n    }\n    else if(false)\n    {\n        ro.x += 6.0; // beach\n        ro.y -= 6.0; // beach\n        ro.z += 9.0; // beach\n    }\n    else if(false)\n    {\n        ro.z += 15.0; // hill-top\n        ro.xy += 16.0; // hill-top\n    }\n    else if(false)\n    {\n        ro.z += 11.0; // a bit of everything\n        ro.xy += 20.0; // a bit of everything\n    }\n    else if(true)\n    {\n        ro.z += 9.0; // close to water\n        ro.xy -= 5.0; // close to water\n    }\n    else\n    {\n        //ro.z += 15.0; // circle\n        ro.z += 10.0; // circle\n        ro.xyz += M*vec3(0,0,-15); // circle\n    }\n    //ro.z += terrain_iterated(TERRAIN_ITERATIONS,ivec2(floor(ro.xy))); // \"walk\" on terrain\n\n    vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n\n    //vec3 sky_color = mix(vec3(0,0.5,0.5),vec3(0,0,1),abs(-rd.z));\n    vec3 sky_color = mix(vec3(0,0.25,0.5),vec3(0,0,1),abs(-rd.z));\n    vec3 suncolor = vec3(1);\n    vec3 color = vec3(1);\n    result r = trace(ro, rd, 0.0, DIST_MAX, false/*stop*/);\n    if(r.dist < DIST_MAX)\n    {\n        color *= r.color;\n        vec3 dst = ro + rd * r.dist;\n        vec3 n = normal(dst);\n\n        //color *= (n * 0.5 + 0.5);\n        color *= material(dst);\n\n        vec3 ambient = vec3(0.1);\n        float brightness = max(dot(lightdir, n), 0.0);\n        if(brightness > 0.0)\n            brightness *= shadow(ro + rd * r.dist + n * 0.01, lightdir, 0.0, DIST_MAX);\n            //brightness *= softshadow(ro + rd * r.dist + n * 0.01, lightdir, 0.0, DIST_MAX, 20.0); // requires HIGH_QUALITY\n        color *= (ambient * calcAO(dst, n) + brightness);\n\n        if(brightness > 0.0)\n        {\n            float specular = pow(max(0.0, dot(n, normalize(-rd + lightdir))), 250.0);\n            color += specular;\n        }\n\n        //vec3 fog_color = vec3(0.2);\n        vec3 fog_color = sky_color;\n        //color = mix(fog_color, vec3(color), exp(-pow(r.dist/40.0, 2.0))); // fog\n        color = mix(fog_color, vec3(color), exp(-pow((1.0-rd.z*rd.z)*r.dist/40.0, 2.0))); // fog but not below\n    }\n    else\n    {\n        color *= sky_color;\n\n        {\n            float d = max(0.0, dot(rd, lightdir));\n            float sun = 50.0*smoothstep(0.999, 1.000, d) + exp(-pow((1.0-d)*1000.0, 2.0)); // sun with halo\n            color += sun * suncolor;\n        }\n    }\n\n    color = tanh(color); // roll-off overly bright colors\n    fragColor = vec4(color, 1);\n    fragColor = sqrt(fragColor); // approximate gamma\n}\n","name":"Image","description":"","type":"image"}]}