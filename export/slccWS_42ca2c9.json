{"ver":"0.1","info":{"id":"slccWS","date":"1660445239","viewed":64,"name":"Legendre Approximation","username":"Envy24","description":"Approximate function with Legendre polynomial expansion on interval [a; b].\n\nGreen - f(x), Blue - approximated f(x) on interval [a; b].","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["approximation","squares","polynomial","least","legendre","richardson","romberg"],"hasliked":0,"parentid":"NsyBW1","parentname":"Chebyshev Approximation"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R                           iResolution\n#define AR                        ( R.x / R.y )                      // Aspect ratio (AR > 1.0).\n#define TO_CENTERED_NDC(SC)       ( ((SC)+(SC)-R.xy) / R.y )         // in range x=[-AR; AR], y=[-1.0; 1.0]\n#define UNIT                      (  8.0 / R.y  )\n#define SMAA(x)                   ( smoothstep(UNIT, 0., x) )\n#define LMB_IS_HOLD               ( iMouse.z > 0.0 )\n#define PI                          3.1415926535897932\n\nfloat vertical_line(vec2 NDC, float x0) { return SMAA(abs(NDC.x-x0)); }\nfloat horizontal_line(vec2 NDC, float y0) { return SMAA(abs(NDC.y-y0)); }\nfloat x_axis(vec2 NDC) { return SMAA(abs(NDC.x)); }\nfloat y_axis(vec2 NDC) { return SMAA(abs(NDC.y)); }\nfloat draw_func(vec2 NDC, float f, float dfdx)\n{\n    float df   = NDC.y - f;\n    return SMAA(abs(df) / sqrt(1.0 + dfdx * dfdx));\n}\n\nfloat LegendrePolynomial(float order_, float x)\n{\n    float Legendre_p = 1., Legendre_c = x, Legendre_n = 0.;\n\n    for (float i = 2.; i <= order_; i += 1.)\n    {\n        float n = i - 1.;\n        Legendre_n = ((2.*n+1.)*x*Legendre_c - n*Legendre_p) / (n + 1.);       \n        \n        Legendre_p = Legendre_c; Legendre_c = Legendre_n;\n    }\n    \n    return \n        order_ == 0. ?\n            1. :\n            order_ == 1. ?\n                x :\n                Legendre_n;\n}\n\n#define M             6.\n#define DFDX(x)     ( sin(M*x)+M*x*cos(M*x) )\n\n#define F(x)        ( x*sin(M*x) )                   // Function for approximation\n#define P(x, order) ( LegendrePolynomial(order, x) ) // Orthogonal polynomials\n#define W(x)        ( 1. )                           // Weight function for inner product\n\nfloat map(float a, float b, float x)\n{\n    return ( (b+a)+(b-a)*x ) * 0.5;\n}\n\n/*\n    Coefficient formula:\n    Cn = ( I[a, b](F(mean + hwidth * x)*P(x, n)*W(x)) ) / ( I[a, b](P(x, n)*P(x, n)*W(x)) )\n    \n    I[a,b]() - definite integral on interval [a, b].\n*/\nfloat calculate_coef0( // Uses simple rectangle rule for integration.\n    float a,\n    float b,\n    float n,\n    float order)\n{\n    float numer = 0., denom = 0.;\n    float dx = 2./n;\n    float hwidth = (b-a)*0.5,\n          mean = (b+a)*0.5;\n          \n    for (float i = 0.; i < n; i += 1.)\n    {\n        float x = -1. + i * dx,\n              p = P(x, order),\n              w = W(x);\n\n        numer += F(map(a, b, x))*p*w*dx;\n        denom += p*p*w*dx;\n    }\n\n    return numer / denom;\n}\n\n// Uses Romberg-Richardson rule for integration.\nfloat calculate_coef1(float a, float b, float n, float order)\n{\n    float dx0 = 2./n,       I0 = 0., i0 = 0.,\n          dx1 = dx0 * 0.5,  I1 = 0., i1 = 0.,\n          C0 = 0.5*( F(map(a, b, -1.))*P(-1., order)*W(-1.) + F(map(a, b, 1.))*P(1., order)*W(1.) ),\n          C1 = 0.5*( P(-1., order)*P(-1., order)*W(-1.) + P(1., order)*P(1., order)*W(1.) );\n    \n    for (float i = 1.0; i < n; i+=1.) \n    { \n        float x = -1. + i * dx0,\n              p = P(x, order),\n              w = W(x);\n              \n        I0 += F(map(a, b, x))*p*w;\n        i0 += p*p*w;\n    }\n    for (float i = 1.0, N = 2.*n; i < N; i+=2.) \n    { \n        float x = -1. + i * dx1,\n              p = P(x, order),\n              w = W(x);\n    \n        I1 += F(map(a, b, x))*p*w;\n        i1 += p*p*w;\n    }\n\n    I1 += I0;              i1 += i0;\n    I0 += C0;  I1 += C0;   i0 += C1;  i1 += C1;\n    I0 *= dx0; I1 *= dx1;  i0 *= dx0; i1 *= dx1;\n    \n    float numer = (4.* I1 - I0) * 0.333333, denom = (4.* i1 - i0) * 0.333333;\n    \n    return numer / denom;\n}\n\n/* Uses Romberg-Richardson rule for integration and fact that:\n\n    I[a, b]( P(x, n)*P(x, n)*W(x) ) = 2 / (2*n + 1);\n\n*/\nfloat calculate_coef2(float a, float b, float n, float order)\n{\n    float dx0 = 2./n,       I0 = 0.,\n          dx1 = dx0 * 0.5,  I1 = 0.,\n          C = 0.5*( F(map(a, b, -1.))*P(-1., order)*W(-1.) + F(map(a, b, 1.))*P(1., order)*W(1.) );\n    \n    for (float i = 1.0; i < n; i+=1.) \n    { \n        float x = -1. + i * dx0,\n              p = P(x, order),\n              w = W(x);\n              \n        I0 += F(map(a, b, x))*p*w;\n    }\n    for (float i = 1.0, N = 2.*n; i < N; i+=2.) \n    { \n        float x = -1. + i * dx1,\n              p = P(x, order),\n              w = W(x);\n    \n        I1 += F(map(a, b, x))*p*w;\n    }\n\n    I1 += I0;\n    I0 += C;  I1 += C;\n    I0 *= dx0; I1 *= dx1;\n    \n    return (4.* I1 - I0) * 0.333333 * (2. * order + 1.) * 0.5;\n}\n\n#define DONT_CHANGE 1\nconst int num_of_coefs = max(DONT_CHANGE,  16);\n\nvoid calculate_coefs(\n    inout float coefs[num_of_coefs],\n    float a,\n    float b,\n    float n)\n{\n    for (int i = 0; i < num_of_coefs; ++i)\n    {\n        //coefs[i] = calculate_coef0(a, b, n, float(i));\n        //coefs[i] = calculate_coef1(a, b, n, float(i));\n        coefs[i] = calculate_coef2(a, b, n, float(i));\n    }\n}\n\n// Evaluates approximation polynimonial an point x.\nfloat eval(\n    float coefs[num_of_coefs],\n    float a,\n    float b,\n    float x)\n{\n    float h = 1./(b-a), m = (b + a);\n    float sum = 0.;\n    \n    for (int i = 0; i < num_of_coefs; ++i)\n    {\n        sum += coefs[i] * P((2.*x-m)*h, float(i));\n    }\n    \n    return sum;\n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n#define GSCALE 3.0\n#define YSCALE 1.0\n#define OFFSET vec2(0., 0.)\n\n    vec2 NDC = \n        LMB_IS_HOLD ?\n            GSCALE*(TO_CENTERED_NDC(SC-(iMouse.xy-R.xy*0.5))+OFFSET) :\n            GSCALE*(TO_CENTERED_NDC(SC)+OFFSET);\n\n    vec3 color = vec3(1.);\n         color.rb -= draw_func(NDC, YSCALE*F(NDC.x), YSCALE*DFDX(NDC.x));\n         color -= x_axis(NDC); color -= y_axis(NDC);\n\n    float a = sinOSC(-2.5, 1., iTime*0.3333), b = a + 1.5 + sinOSC(0., 2., iTime);\n    \n         color.gb -= vertical_line(NDC, a); color.gb -= vertical_line(NDC, b);\n    \n    float coefs[num_of_coefs];\n    calculate_coefs(coefs, a, b, 64.);\n    \n    float dx = 0.01,\n          y = eval(coefs, a, b, NDC.x),\n          yn= eval(coefs, a, b, NDC.x + dx);\n    \n    color.rg -= draw_func(NDC, YSCALE*y, YSCALE*(yn-y)/dx);\n\n    O = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/* Returns sine modulated value in range [min, max]. */\nfloat sinOSC(in float min, in float max, in float T)\n{\n    float v = (sin(T) + 1.0) * 0.5; // map T to [0.0, 1.0];\n    return min + v * (max - min);   // map T to [min, max];\n}\n\nfloat diskSDF_L2(vec2 NDC, vec2 C, float R)\n{\n    return length(C - NDC)-R;\n}\n\nfloat segmentSDF_L2(\n    in vec2 NDC,\n    in vec2 B,   \n    in vec2 E)\n{\n    vec2 BP = NDC - B, BE = E - B;\n    return length(BP - BE * clamp(dot(BP, BE) / dot(BE, BE), 0.0, 1.0));\n}","name":"Common","description":"","type":"common"}]}