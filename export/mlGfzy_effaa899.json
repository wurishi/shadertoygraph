{"ver":"0.1","info":{"id":"mlGfzy","date":"1702215453","viewed":76,"name":"stars triangle ","username":"nayk","description":"stars,triangles, new copypast, rotate","likes":6,"published":1,"flags":1,"usePreview":0,"tags":["triangles","rotate","stars","newcopypast"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* originals https://www.shadertoy.com/view/Msf3RH https://www.shadertoy.com/view/lslyRn*/\n#define iterations 10\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\nvec2 Triangle(vec2 P, vec2 A, vec2 B, vec2 C)\n{\n\tvec2 v0 = C - A;\n\tvec2 v1 = B - A;\n\tvec2 v2 = P - A;\n\n\tfloat dot00 = dot(v0, v0);\n\tfloat dot01 = dot(v0, v1);\n\tfloat dot02 = dot(v0, v2);\n\tfloat dot11 = dot(v1, v1);\n\tfloat dot12 = dot(v1, v2);\n\t\t\n\t// Compute barycentric coordinates\n\tfloat invDenom = 1. / (dot00 * dot11 - dot01 * dot01);\n\tfloat u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n\tfloat v = (dot00 * dot12 - dot01 * dot02) * invDenom;\n\n\treturn vec2(u,v);\n}\n\t\nvec2 Shape(float i, float t, float m) {\n\ti += t*.5;\n\ti *= 6.2832/m;\n\tfloat x = (cos(t*.01*i)*.5)*cos(i);\n\tfloat y = (cos(t*.01*i)*.5)*sin(i);\n\treturn (vec2(x, y));\n}\n\nfloat Segment(vec2 P, vec2 P0, vec2 P1)\n{\n\tvec2 v = P1 - P0;\n\tvec2 w = P - P0;\n\tfloat b = dot(w,v) / dot(v,v);\n\tv *= clamp(b, 0.0, 1.0);\n\treturn distance(w,v);\n}\n\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam; // the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.3-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.03,1.);\t\n}\n\nvec2 complex_mul(vec2 factorA, vec2 factorB){\n   return vec2( factorA.x*factorB.x - factorA.y*factorB.y, factorA.x*factorB.y + factorA.y*factorB.x);\n}\n\nvec2 torus_mirror(vec2 uv){\n\treturn vec2(1.)-abs(fract(uv*.5)*2.-1.);\n}\n\nfloat circle(vec2 uv, float scale){\n\treturn clamp( 1. - length((uv-0.5)*scale), 0., 1.);\n}\n\nfloat sigmoid(float x) {\n\treturn 2./(1. + exp2(-x)) - 1.;\n}\n\nfloat smoothcircle(vec2 uv, float radius, float sharpness){\n\treturn 0.5 - sigmoid( ( length( (uv - 0.5)) - radius) * sharpness) * 0.5;\n}\n\nfloat border(vec2 domain, float thickness){\n   vec2 uv = fract(domain-vec2(0.5));\n   uv = min(uv,1.-uv)*2.;\n   return clamp(max(uv.x,uv.y)-1.+thickness,0.,1.)/(thickness);\n}\nfloat cheap_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,iTime*0.05);\n\tfloat time=iTime*speed+.25;\n\n\n\n\n\n\n\n\nfloat aspect2 = iResolution.x / iResolution.y;\n\tvec2 p = fragCoord.xy / iResolution.xy - .5;\n\tp.x *= aspect2;\n\tvec2 m =vec2(0.);\n\tvec3 c = vec3(0.);\n\t\n\tfor(float i=0.; i<12.; i++) {\n\t\t\n\t\tfloat v = mod(floor(iTime*.01), 15.)+3.;\n\t\t\n\t\tvec2 p0 = Shape(i, iTime, v); vec2 p1 = Shape(i+1., iTime, v);\n\t\tvec2 uv = Triangle(p, m, p0, p1);\n\n\t\t// Texture map triangle\n\t\tif((uv.x >= 0.)&&(uv.y >= 0.) && (uv.x+uv.y < 1.)) {\n\t\t\tc += vec3(texture(iChannel0, uv)*.5);\n\n\t\t\t\n\t\t}\n\t\t// Triangle outline\n\t\tc += vec3(1.)*max(0.,(1.-.5*Segment(p, m, p1)*iResolution.x));\n\t\tc += vec3(1.)*max(0.,(1.-.5*Segment(p, p0, p1)*iResolution.x));\n\t}\n\t\n\tvec2 aspect = vec2(1.,iResolution.y/iResolution.x);\n\t\n\tvec2 mouse = iMouse.xy / iResolution.xy;\n\tfloat mouseW = atan((mouse.y - 0.5)*aspect.y, (mouse.x - 0.5)*aspect.x);\n\tvec2 mousePolar = vec2(sin(mouseW), cos(mouseW));\n\tvec2 offset = (mouse - 0.5)*4.;\n\toffset =  - complex_mul(offset, mousePolar) + iTime*0.05;\n\tvec2 uv_distorted = uv;\n\n uv *= 2.0 * ( cos(iTime * 2.0) -2.5);\n     \n    // anim between 0.9 - 1.1\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;    \n\t\n\t//manually unrolled loop\n\tfloat _filter;\n\t_filter = smoothcircle(uv_distorted, 0.12, 24.);\n\tuv_distorted = torus_mirror(0.5 + complex_mul(((uv_distorted - 0.5)*mix(2., 16., _filter)), mousePolar) + offset);\n\t_filter = smoothcircle(uv_distorted, 0.12, 24.);\n\tuv_distorted = torus_mirror(0.5 + complex_mul(((uv_distorted - 0.5)*mix(2., 16., _filter)), mousePolar) + offset);\n\t_filter = smoothcircle(uv_distorted, 0.12, 24.);\n\tuv_distorted = torus_mirror(0.5 + complex_mul(((uv_distorted - 0.5)*mix(2., 16., _filter)), mousePolar) + offset);\n\t_filter = smoothcircle(uv_distorted, 0.12, 24.);\n\tuv_distorted = torus_mirror(0.5 + complex_mul(((uv_distorted - 0.5)*mix(2., 16., _filter)), mousePolar) + offset);\n\tvec3 from=vec3(1.,.5,0.5)+_filter+c;\n\tfrom+=vec3(time*2.,time,-2.);\n\t\n\t\n\tmainVR(fragColor, fragCoord, from, dir);\n     fragColor*= vec4(cheap_star(uv,anim) * vec3(0.75,0.82,0.25)*1.1, 1.0);\n    \n\n}\n","name":"Image","description":"","type":"image"}]}