{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// Adapted from https://t.co/TZwkEG6jHg\n// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define NUMSPHEREES 12\n\nvec4 sphere[NUMSPHEREES];\n\n#define eps 0.001\n\nvec3 hash3( float n )\n{\n    return fract(sin(vec3(n,n+1.0,n+2.0))*vec3(43758.5453123,22578.1459123,19642.3490423));\n}\n\nvec3 nSphere( in vec3 pos, in vec4 sph )\n{\n    return (pos-sph.xyz)/sph.w;\n}\n\nfloat iSphere( in vec3 ro, in vec3 rd, in vec4 sph )\n{\n\tvec3 oc = ro - sph.xyz;\n\tfloat b = dot( oc, rd );\n\tfloat c = dot( oc, oc ) - sph.w*sph.w;\n\tfloat h = b*b - c;\n\tif( h<0.0 ) return -1.0;\n\treturn -b - sqrt( h );\n}\n\n// if we hit a sphere, nor and id contain the surface normal of the hit position, \n// id is the index of which sphere we hit\nfloat intersect( in vec3 ro, in vec3 rd, out vec3 nor, out float id )\n{\n\tfloat res = 1e20;\n\tfloat fou = -1.0;\n\t\n\tnor = vec3(0.0);\n\n\tfor( int i=0; i<NUMSPHEREES; i++ )\n\t{\n\t\tvec4 sph = sphere[i];\n\t    float t = iSphere( ro, rd, sph ); \n\t\tif( t>eps && t<res ) \n\t\t{\n\t\t\tres = t;\n\t\t\tnor = nSphere( ro + t*rd, sph );\n\t\t\tfou = 1.0;\n\t\t\tid = float(i);\n\t\t}\n\t}\n\t\t\t\t\t\t  \n    return fou * res;\t\t\t\t\t  \n}\n\nfloat getRad( float id )\n{\n\tfloat rad = 0.0;\n\tif( id<12.5 ) rad = 1.0;\n\tif( id<9.5 )  rad = 0.5;\n\tif( id<6.5 )  rad = 0.0;\n\treturn rad;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x/iResolution.y;\n    vec2 m = vec2(0.5);\n\tif( iMouse.z>0.0 ) m = iMouse.xy/iResolution.xy;\n\t\n    //-----------------------------------------------------\n    // animate\n    //-----------------------------------------------------\n\tfloat time = iTime - 11.6;\n\t\n\tfloat an = 0.3*time - 7.0*m.x;\n\n\t// Setup \"3d scene\": randomly place spheres, store result in the sphere[] array\n\tfor( int i=0; i < NUMSPHEREES; i++ )\n\t{\n\t\tfloat id  = float(i);\n\t\tfloat rad = getRad( id );\n\t    vec3  pos = 1.0*cos( 6.2831*hash3(id*37.17) + 0.5*(1.0-0.7*rad)*hash3(id*31.3+4.7)*time );\n\t\tsphere[i] = vec4( pos, (0.3+0.7 *rad) );\n    }\n\t\t\t\n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n\tvec3 ro = vec3(2.5*sin(an),1.5*cos(0.5*an),2.5*cos(an));\n    vec3 ta = vec3(0.0,0.0,0.0);\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\tvec3 rd = normalize( p.x*uu + p.y*vv + 2.0*ww );\n\n\t// background color\n\tvec3 col = vec3(1.0);\n\n\t// surface normal\n\tvec3  nor;\n\t// which sphere did we hit?\n\tfloat id;\n\tfloat t = intersect(ro, rd, nor, id);\n\n\t// Did we hit a sphere?\n\tif( t>0.0 )\n\t{\n\t\tvec3 pos = ro + t*rd;\n\t\t\n\t\tvec3 mate = vec3(1.0);\n\t\tcol = vec3(dot(rd, -nor));\n\t}\n\t\n\tfragColor = vec4( col, 1.0 );\n}\n\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4slGWs","date":"1381823911","viewed":159,"name":"pallo","username":"nurpax","description":"sphere","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sphere"],"hasliked":0,"parentid":"","parentname":""}}