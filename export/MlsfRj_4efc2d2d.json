{"ver":"0.1","info":{"id":"MlsfRj","date":"1512551016","viewed":709,"name":"Textured Plane Rotating in '3D'","username":"jaapboerhof","description":"3D effect rotating a textured panel around X and Y axis. \nDrag the mouse to manually rotate the panel.","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["3d","math","rotate","plane","flip"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define Max_Rotation 0.65\n#define Mouse_Rotation ( Max_Rotation - Max_Rotation * 2.0 * (iMouse.xy / iResolution.xy) )\n#define RotationCenter vec2( 0.0, 0.0 )\n\n/* \n   A simple rotating effect of a textured plane in 3D space.\n   I'm basically using a ray for each pixel that intersects the plane \n   as drawn in a 2D view below.\n\n   Created By Jaap Boerhof (Dec. 2017)\n\n   Positioning                             Positioning at a certain angle: \n   at zero degrees rotation:\n   \n   |------plane-----|  coords:                              __--| \n   \\                /  (-1.0..1.0, 0.0)                 __--   /  \n    \\              /                                __--      /  \n     \\            /                             __--         / \n      \\          /                         \\ _--            /   \n       \\        /                          |\\              /   \n        \\      /                             \\            /     \n         \\    /                               \\          /      \n          \\  /                                 \\        /       \n           \\/          Camera                   \\      /  \n                       position                  \\    /  \n                       at (0.0, -1.0)             \\  /\n                                                   \\/\n*/\n\nvec2 rotate(vec2 v, vec2 o, float a) {\n    float s = sin(a);\n    float c = cos(a);\n    mat2 m = mat2(c, -s, s, c);\n    return m * (v-o) + o;\n}\n\nvec2 TransformPlane(vec2 uv, vec2 center, float XRot, float YRot) {\n    // First Rotate around Y axis\n    vec2 RayDirection =  vec2(uv.x, 0.0);\n    vec2 A1 = vec2(0.0, -1.0);\n    vec2 B1 = RayDirection - A1;\n    vec2 C1 = rotate(vec2(-1.0, 0.0), vec2(center.x, 0.0), YRot);\n    vec2 D1 = rotate(vec2( 1.0, 0.0), vec2(center.x, 0.0), YRot) - C1;\n    // calculate intersection point\n    float u = ( (C1.y + 1.0) * D1.x - C1.x * D1.y ) / (D1.x*B1.y-D1.y*B1.x);\n    // position on the plane:\n    float sx = u * B1.x;\n \tfloat sy = u * uv.y;\n    // Now Rotate around X axis\n    RayDirection = vec2(sy, 0.0);\n    vec2 B2 = RayDirection - A1;\n    vec2 C2 = rotate(vec2(-1.0, 0.0), vec2(center.y, 0.0), XRot);\n    vec2 D2 = rotate(vec2( 1.0, 0.0), vec2(center.y, 0.0), XRot) - C2;\n    // calculate intersection point\n    float v = ( (C2.y + 1.0) * D2.x - C2.x * D2.y ) / (D2.x*B2.y-D2.y*B2.x);\n    // final position on the plane:\n    return vec2(v * sx, v * B2.x );\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n    float R_X = iMouse.w > 0.0 ? Mouse_Rotation.y : Max_Rotation*cos(iTime);\n    float R_Y = iMouse.w > 0.0 ? Mouse_Rotation.x : Max_Rotation*sin(iTime);\n    vec2 MyCoords = TransformPlane(uv, RotationCenter, R_X, R_Y);\n    vec2 MyTexCoord = (MyCoords+1.0)/2.0;\n    \n    vec4 image1 = texture(iChannel0, MyTexCoord );\n    vec4 image2 = texture(iChannel1, MyTexCoord );\n    fragColor = mix(image1, image2, (sin(iTime*0.5)+1.0)/2.0);\n}","name":"Image","description":"","type":"image"}]}