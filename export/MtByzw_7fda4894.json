{"ver":"0.1","info":{"id":"MtByzw","date":"1507868425","viewed":135,"name":"Color Tunnel","username":"mgrant8164","description":"A random product of some fiddling around.\nSuper sampling options are available at the top of the code.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raycasting","poor"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Super Sampling Enabled?\n//#define SS\n//Super Sampling Level [1-...] (applied if enabled)\n#define SSA 5\n\n#define PI 3.14159265359\n#define TOU 6.28318530718\n\nfloat f(float x) {\n    return 0.2*x;\n}\n\nvec3 getWall(vec2 dir) {\n    const float r = 1.;\n    \n    float slope = length(dir);\n    float ang = atan(dir.y,dir.x);\n    \n    //f(t) = 0.2 * cos(period*t) + 0.1 \n    //f(x) = 0.2x\n    const float period = 1.;\n    const float maxf = 0.2;\n    //go to beginning of max\n    float x = mod( (r-maxf)/slope + iTime, period);\n    float p = r - slope * x;\n    x = p / (0.2 - slope);\n    //return vec3(x/20.);\n    //x = (r-maxf)/slope + ( -maxf / (s - 0.2));\n    x = r / slope;\n    x *= 1./sin(0.25*iTime);\n    \n    //vec3 pos = dir;\n    //x^2 + y^2 = r^2\n    float t = r / length(dir);\n    float d = sqrt(t*t-r*r);\n    return vec3(sin(x+4.*iTime),cos(x+-4.*iTime),cos(x+3.*iTime+PI/2.));\n}\n\nvec4 mainimg( vec4 fragColor, in vec2 fragCoord )\n{\n    float scale = max(iResolution.x, iResolution.y);\n    vec2 dims = iResolution.xy/scale;\n\tvec2 uv = (2.*fragCoord.xy - iResolution.xy) / scale;\n    \n    //field of view, in radians along the x-axis <0,PI> \n    const float fov = PI/2.;\n    \n    //ray direction\n    vec3 dir = normalize(vec3( uv, dims.x/tan(fov/2.) ));\n    //normalized per unit distance\n    vec2 dr = uv * tan(fov / 2.) / dims.x;\n    fragColor = vec4(getWall(dr),1.);\n\t//fragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n    return fragColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    #ifdef SS\n    fragColor = vec4(0.);\n    for(float x = 0.; x < 1.; x += 1./float(SSA)) {\n        for(float y = 0.; y < 1.; y += 1./float(SSA)) {\n        \tfragColor += mainimg(fragColor, fragCoord+vec2(x,y));\n    \t}\n    }\n    fragColor /= float(SSA*SSA);\n    #else\n    fragColor = mainimg(fragColor, fragCoord);\n    #endif\n}","name":"Image","description":"","type":"image"}]}