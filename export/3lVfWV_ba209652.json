{"ver":"0.1","info":{"id":"3lVfWV","date":"1615086254","viewed":216,"name":"Dendrite-Biased Julia Rotation","username":"jdc","description":"Dendrite-Biased Julia Set\n\nc_i loiters near zero\nc_j loiters near one and negative one","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["fractal","julia","dendrite"],"hasliked":0,"parentid":"3s33W4","parentname":"Julia Set Fractal Rotation"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* \n    The Julia set is the subset of the complex plane given by the points \n    whose nth iteration of the function f_c (z) = z * z + c has a modulus \n    of at most two for all natural n.\n*/\n// Pi, the ratio of a circle's circumference to its diameter.\nconst float M_PI = 3.14159265358979323846264338327950288;\n// Pi divided by two (pi/2)\nconst float M_PI_2 = 1.57079632679489661923132169163975144;\n\nvec2 multiply(vec2 x,vec2 y){\n    return vec2(x.x*y.x-x.y*y.y,x.x*y.y+x.y*y.x);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 z0 = 5.*(fragCoord/iResolution.x-vec2(.5,.27));\n    vec3 col;\n\n    float a = M_PI_2 * sin(M_PI_2 * sin(M_PI_2 * sin(M_PI_2 * sin(M_PI_2 * sin(iTime / 2.)))));\n    float noise = sin(M_PI * sin(9.*iTime)) / 600.;\n    vec2 c = vec2(sin(a + M_PI_2) + noise, sin(a) + noise);\n\n    for(int i = 0; i < 500;i++){\n\n        vec2 z = multiply(z0,z0)+c;\n        float mq = dot(z,z);\n        if( mq > 4.){\n\n            col = vec3(float(i)/20.,0.,float(i)/4.);\n            break;\n        } else {\n            z0 = z;\n        }\n        col = vec3(mq/2.,0.,(mq * float(i))/4.);\n    }\n    fragColor = vec4(col,1.);\n}\n","name":"Image","description":"","type":"image"}]}