{"ver":"0.1","info":{"id":"Xs2fRd","date":"1501743200","viewed":361,"name":"How simplex noise works","username":"tiusic","description":"Demonstrates the steps involved in generating fractal simplex noise.","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["procedural","tutorial","simplex"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float F = 0.36602540378;\nfloat G = 0.21132486540;\nfloat TAU = 6.28318530718;\nfloat L = 10.0;\n\nvec2 hash(vec2 p, float z) {\n    vec3 p3 = vec3(p, z + 10.0 * floor(iTime / 40.0));\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.yzx + 19.19);\n    float t = TAU * fract((p3.x + p3.y) * p3.z);\n    return vec2(cos(t), sin(t));\n}\n\nvec2 skew(vec2 p) {\n   \tfloat f = (p.x + p.y) * F;\n    return p + vec2(f, f);\n}\n\nvec2 unskew(vec2 q) {\n   \tfloat g = (q.x + q.y) * G;\n    return q - vec2(g, g);\n}\n\nfloat noise(vec2 q, vec2 p, float r2, float z) {\n    vec2 h = hash(q, z);\n    vec2 d = unskew(q) - p;\n    float d2 = d.x * d.x + d.y * d.y;\n    return pow(max(0.0, r2 - d2), 4.0) * dot(d, h);\n}\n\nfloat noise(vec2 p, float r2, float z) {\n    vec2 q = skew(p);\n    vec2 qa = floor(q);\n    vec2 qi = q - qa;\n    vec2 qb = qa + vec2(1.0, 1.0);\n    vec2 qc;\n    \n    if (qi.x < qi.y) {\n\t\tqc = qa + vec2(0.0, 1.0);\n    } else {\n\t\tqc = qa + vec2(1.0, 0.0);\n    }\n    \n    float ka = noise(qa, p, r2, z);\n    float kb = noise(qb, p, r2, z);\n    float kc = noise(qc, p, r2, z);\n    return ka + kb + kc;\n}\n\nfloat noise(vec2 p, float r2) {\n    float k = 0.0;\n    float o = 1.0;\n    for (float z = 0.0; z < L; ++z) {\n        k += noise(p / o, r2, z) * o;\n        o *= 2.0;\n    }\n    return k;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 p = fragCoord - 0.5 * iResolution.xy;\n    \n    float T = mod(iTime, 40.0);\n    \n    fragColor = vec4(0.5, 0.5, 0.5, 1.0);\n    if (T < 5.0) {\n        T /= 5.0;\n        p /= 100.0;\n        p = T * skew(p) + (1.0 - T) * p;\n        p = p - floor(p + vec2(0.5, 0.5));\n        if (length(p) < 0.03) {\n            fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    } else if (T < 10.0) {\n        T = (T - 5.0) / 5.0;\n        p /= 100.0;\n        float k = 0.5 + 50.0 * pow(100000.0, 1.0 - sqrt(T)) * noise(p, 0.5 * T, 0.0);\n        fragColor = vec4(k, k, k, 1.0);\n    } else if (T < 30.0) {\n        T = (T - 10.0) / 2.0;\n        float N = floor(T);\n        float pT = T / 10.0;\n        p /= pow(2.0, 6.64385618977 * (1.0 - pT));\n        T -= floor(T);\n        float k = 0.0;\n        float o = 1.0;\n        for (float z = 0.0; z < N; ++z) {\n            k += noise(p / o, 0.5, z) * o;\n            o *= 2.0;\n        }\n        float m = T;\n        if (N < 1.0) m = 1.0;\n        k += m * noise(p / o, 0.5, N) * o;\n        k = 0.5 + pow(2.0, (1.0 - pT) * 8.96578428466) * 0.1 * k;\n        fragColor = vec4(k, k, k, 1.0);\n    } else {\n        T = min(1.0, (T - 30.0) / 3.0);\n        float k = noise(p, 0.5);\n        k = max(0.0, min(1.0, 0.5 + 0.1 * k));\n        if (k < 0.5) {\n            fragColor = vec4(0.0, k, 0.7 + 0.6 * k, 1.0);\n        } else if (k < 0.55) {\n            fragColor = vec4(1.0, 4.0 * (k - 0.5) + 0.8, 0.6, 1.0);\n        } else if (k < 0.8) {\n            fragColor = vec4(0, 0.5 * k + 0.5, 0.0, 0.0);\n        } else if (k < 0.85) {\n            fragColor = vec4(0, -9.1 * k + 8.18, 0.0, 1.0);\n        } else {\n            fragColor = vec4(0, (1.0 - k) * 0.3 + 0.4, 0.0, 1.0);\n        }\n        \n        fragColor = (1.0 - T) * vec4(k, k, k, 1.0) + T * fragColor;\n    }\n}","name":"Image","description":"","type":"image"}]}