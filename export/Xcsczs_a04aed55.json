{"ver":"0.1","info":{"id":"Xcsczs","date":"1721522360","viewed":35,"name":"tangent sphere to three spheres","username":"jt","description":"Calculate a sphere tangent to three given spheres and the average of their centers.\n","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sphere","geometry","inversion","inverse","three","tangent","inversive","triple"],"hasliked":0,"parentid":"McfyDr","parentname":"three spheres two tangent planes"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/Xcsczs tangent sphere to three spheres and average of centers, 2024 by jt\n// based on https://www.shadertoy.com/view/McfyDr three spheres two tangent planes\n// generalizes https://www.shadertoy.com/view/lflczN 3 grounded spheres tangent plane\n\n// Calculate a sphere tangent to three given spheres\n// and the average of their centers.\n\n// TODO: Cleanup & verify this is really correct.\n\n// tags: sphere, geometry, inversion, inverse, three, tangent, inversive, triple\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n#define ITER_MAX 200u\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\nfloat sphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat line(vec3 p, vec3 a, vec3 b) // https://iquilezles.org/articles/distfunctions/\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa,ba)/dot(ba,ba), 0.0, 1.0);\n    return length(pa - ba*h);\n}\n\nfloat dot2(vec3 v)\n{\n    return dot(v,v);\n}\n\nfloat triangle(vec3 p, vec3 a, vec3 b, vec3 c) // https://iquilezles.org/articles/distfunctions/\n{\n    vec3 ba = b - a; vec3 pa = p - a;\n    vec3 cb = c - b; vec3 pb = p - b;\n    vec3 ac = a - c; vec3 pc = p - c;\n    vec3 nor = cross( ba, ac );\n\n    return sqrt(\n       (sign(dot(cross(ba,nor),pa)) +\n        sign(dot(cross(cb,nor),pb)) +\n        sign(dot(cross(ac,nor),pc))<2.0)\n        ?\n        min( min(\n        dot2(ba*clamp(dot(ba,pa)/dot2(ba),0.0,1.0)-pa),\n        dot2(cb*clamp(dot(cb,pb)/dot2(cb),0.0,1.0)-pb) ),\n        dot2(ac*clamp(dot(ac,pc)/dot2(ac),0.0,1.0)-pc) )\n        :\n        dot(nor,pa)*dot(nor,pa)/dot2(nor) );\n}\n\nfloat ring(vec3 p, vec3 n, float r) // https://www.shadertoy.com/view/MffcWr oriented ring (jt)\n{\n    n = normalize(n);\n    float z = dot(p,n);\n    return length(vec2(length(p - n*z)-r,z));\n}\n\nvec4 combine(vec4 a, vec4 b)\n{\n    return a.w < b.w ? a : b;\n}\n\nvec2 circles_tangent_offset(float r, float s, float t) // https://www.shadertoy.com/view/XfXcRN sphere pair tangent cone (jt)\n{\n    float q = (r-s)/t; // sin\n    return vec2(r*q,s*q);\n}\n\nvec4 circles_tangent(float r, float s, float t) // https://www.shadertoy.com/view/XfXcRN sphere pair tangent cone (jt)\n{\n    float q = (r-s)/t; // sin\n    float p = sqrt(1.0-q*q); // cos\n    return vec4(r*vec2(p,q),s*vec2(p,q));\n}\n\nvec3 point_from_three_planes(vec4 p0, vec4 p1, vec4 p2) // https://www.shadertoy.com/view/McXyDM intersection point from 3 planes (jt)\n{\n    // wxMaxima solve([n_0_x*x+n_0_y*y+n_0_z*z=n_0_w,n_1_x*x+n_1_y*y+n_1_z*z=n_1_w,n_2_x*x+n_2_y*y+n_2_z*z=n_2_w],[x,y,z]); then manually simplified\n    return\n        vec3 // can this be further compactified?\n        (\n            determinant(mat3(p0.wyz,p1.wyz,p2.wyz)),\n            determinant(mat3(p0.xwz,p1.xwz,p2.xwz)),\n            determinant(mat3(p0.xyw,p1.xyw,p2.xyw))\n        )\n        /\n        determinant(mat3(p0.xyz,p1.xyz,p2.xyz));\n}\n\nstruct tangent_planes\n{\n    vec3 A0, A1, B0, B1, C0, C1;\n};\n\ntangent_planes get_tangent_planes(vec4 a, vec4 b, vec4 c)\n{\n    vec3 n = normalize(cross(a.xyz-b.xyz,c.xyz-a.xyz));\n\n    vec3 ab = a.xyz-b.xyz;\n    vec3 bc = b.xyz-c.xyz;\n    vec3 ca = c.xyz-a.xyz;\n    float lab = length(ab);\n    float lbc = length(bc);\n    float lca = length(ca);\n    vec3 nab = ab/lab;\n    vec3 nbc = bc/lbc;\n    vec3 nca = ca/lca;\n\n    vec4 AB = circles_tangent(a.w, b.w, lab);\n    vec4 BC = circles_tangent(b.w, c.w, lbc);\n    vec4 CA = circles_tangent(c.w, a.w, lca);\n\n    vec3 A = point_from_three_planes(vec4(-nab, AB.y), vec4(-nca, CA.w), vec4(n,0));\n    vec3 B = point_from_three_planes(vec4(-nbc, BC.y), vec4(-nab, AB.w), vec4(n,0));\n    vec3 C = point_from_three_planes(vec4(-nca, CA.y), vec4(-nbc, BC.w), vec4(n,0));\n\n    float ah = sqrt(a.w*a.w-dot2(A));\n    float bh = sqrt(b.w*b.w-dot2(B));\n    float ch = sqrt(c.w*c.w-dot2(C));\n\n    return\n        tangent_planes\n        (\n            a.xyz+A+ah*n,\n            a.xyz+A-ah*n,\n            b.xyz+B+bh*n,\n            b.xyz+B-bh*n,\n            c.xyz+C+ch*n,\n            c.xyz+C-ch*n\n        );\n}\n\nvec3 invert_point(vec4 s, vec3 p)\n{\n    return s.xyz + (s.w*s.w/dot2(p-s.xyz)) * (p-s.xyz);\n}\n\nvec4 invert_sphere(vec4 d, vec4 c) // based on https://www.shadertoy.com/view/lflcz7 inverse circle center and radius (jt)\n{\n    vec3 cd = c.xyz - d.xyz;\n    float k = d.w * d.w / (dot2(cd) - c.w * c.w);\n\n    return\n        vec4\n        (\n            d.xyz + k * cd,\n            abs(k) * c.w\n        );\n}\n\n// adapted from https://stackoverflow.com/questions/37449046/how-to-calculate-the-sphere-center-with-4-points (Robert Bruce?)\nvec4 sphere_from_four_points(vec3 a, vec3 b, vec3 c, vec3 d) // TODO: cleanup!\n{\n#define U(a,b,c,d,e,f,g,h) (a.z - b.z)*(c.x*d.y - d.x*c.y) - (e.z - f.z)*(g.x*h.y - h.x*g.y)\n#define D(x,y,a,b,c) (a.x*(b.y-c.y) + b.x*(c.y-a.y) + c.x*(a.y-b.y))\n#define E(x,y) ((ra*D(x,y,b,c,d) - rb*D(x,y,c,d,a) + rc*D(x,y,d,a,b) - rd*D(x,y,a,b,c)) / uvw)\n    float u = U(a,b,c,d,b,c,d,a);\n    float v = U(c,d,a,b,d,a,b,c);\n    float w = U(a,c,d,b,b,d,a,c);\n    float uvw = 2.0 * (u + v + w);\n    //if (uvw == 0.0) // The points are coplanar.\n    float ra = dot2(a);\n    float rb = dot2(b);\n    float rc = dot2(c);\n    float rd = dot2(d);\n    float x0 = E(y,z);\n    float y0 = E(z,x);\n    float z0 = E(x,y);\n    float radius = sqrt(dot2(vec3(a.x - x0, a.y - y0, a.z - z0)));\n    return vec4(vec3(x0, y0, z0), radius);\n}\n\nvec4 map(vec3 p)\n{\n    //vec4 a = vec4(0,1,1,0.1);\n    //vec4 b = vec4(1,0,1,0.2);\n    //vec4 c = vec4(1,1,0,0.3);\n\n    //vec4 a = vec4(-0.5,-0.7, 2.0, 1.1);\n    ////vec4 a = vec4(-0.0,-0.0, 1.0, 0.5);\n    //vec4 b = vec4( 1.7,-0.2, 1.0, 0.2);\n    //vec4 c = vec4( 0.2, 1.9, 0.5, 0.3);\n\n    vec4 a = vec4(-0.5,-0.7, 1.1, 0.5+0.5*sin(2.0*pi*iTime*1.0/20.0));\n    vec4 b = vec4( 1.7,-0.2, 0.2, 0.5+0.5*sin(2.0*pi*iTime*0.8/20.0));\n    vec4 c = vec4( 0.2, 1.9, 0.3, 0.5+0.5*sin(2.0*pi*iTime*0.5/20.0));\n\n    vec3 n = normalize(cross(a.xyz-b.xyz,c.xyz-a.xyz));\n\n    vec3 ab = a.xyz-b.xyz;\n    vec3 bc = b.xyz-c.xyz;\n    vec3 ca = c.xyz-a.xyz;\n    float lab = length(ab);\n    float lbc = length(bc);\n    float lca = length(ca);\n    vec3 nab = ab/lab;\n    vec3 nbc = bc/lbc;\n    vec3 nca = ca/lca;\n\n    vec4 AB = circles_tangent(a.w, b.w, lab);\n    vec4 BC = circles_tangent(b.w, c.w, lbc);\n    vec4 CA = circles_tangent(c.w, a.w, lca);\n\n    vec3 A = point_from_three_planes(vec4(-nab, AB.y), vec4(-nca, CA.w), vec4(n,0));\n    vec3 B = point_from_three_planes(vec4(-nbc, BC.y), vec4(-nab, AB.w), vec4(n,0));\n    vec3 C = point_from_three_planes(vec4(-nca, CA.y), vec4(-nbc, BC.w), vec4(n,0));\n\n    float ah = sqrt(a.w*a.w-dot2(A));\n    float bh = sqrt(b.w*b.w-dot2(B));\n    float ch = sqrt(c.w*c.w-dot2(C));\n/*\n    vec3 A0 = a.xyz+A+ah*n;\n    vec3 A1 = a.xyz+A-ah*n;\n    vec3 B0 = b.xyz+B+bh*n;\n    vec3 B1 = b.xyz+B-bh*n;\n    vec3 C0 = c.xyz+C+ch*n;\n    vec3 C1 = c.xyz+C-ch*n;\n*/\n    tangent_planes t = get_tangent_planes(a, b, c);\n\n    vec3 ABC = (a.xyz+b.xyz+c.xyz)/3.0;\n\n    // TODO: reconsider using average of centers -> both solutions might intersect! Would Appolonius be better than average of centers?\n    vec4 i = vec4(ABC, 1); // Is it OK to just use unit sphere here?\n\n    vec4 ai = invert_sphere(i, a);\n    vec4 bi = invert_sphere(i, b);\n    vec4 ci = invert_sphere(i, c);\n\n    tangent_planes ti = get_tangent_planes(ai, bi, ci);\n    tangent_planes tii =\n        tangent_planes\n        (\n            invert_point(i, ti.A0),\n            invert_point(i, ti.A1),\n            invert_point(i, ti.B0),\n            invert_point(i, ti.B1),\n            invert_point(i, ti.C0),\n            invert_point(i, ti.C1)\n        );\n\n    vec4 s0 = sphere_from_four_points(tii.A0, tii.B0, tii.C0, ABC);\n    vec4 s1 = sphere_from_four_points(tii.A1, tii.B1, tii.C1, ABC);\n\n    float th = 0.02;\n\n    return\n        combine\n        (\n            combine\n            (\n                combine\n                (\n                    vec4(vec3(1,0,0),sphere(p-a.xyz, a.w)),\n                    combine\n                    (\n                        vec4(vec3(1),sphere(p-tii.A0, 0.05)),\n                        vec4(vec3(1),sphere(p-tii.A1, 0.05))\n                    )\n                ),\n                combine\n                (\n                    vec4(vec3(0,1,0),sphere(p-b.xyz, b.w)),\n                    combine\n                    (\n                        vec4(vec3(1),sphere(p-tii.B0, 0.05)),\n                        vec4(vec3(1),sphere(p-tii.B1, 0.05))\n                    )\n                )\n            ),\n            combine\n            (\n                combine\n                (\n                    vec4(vec3(0,0,1),sphere(p-c.xyz, c.w)),\n                    combine\n                    (\n                        vec4(vec3(1),sphere(p-tii.C0, 0.05)),\n                        vec4(vec3(1),sphere(p-tii.C1, 0.05))\n                    )\n                ),\n                combine\n                (\n                    vec4(vec3(1),sphere(p-ABC, 0.05)),\n                    //combine\n                    (\n                    //    vec4(vec3(0.2),sphere(p-s1.xyz, s1.w)),\n                        vec4(vec3(0.2),sphere(p-s0.xyz, s0.w))\n                    )\n                )\n            )\n        );\n        /*\n        combine\n        (\n            combine\n            (\n                combine\n                (\n                //    vec4(vec3(1), triangle(p, a.xyz, b.xyz, c.xyz)) - th,\n                    iMouse.z>0.0?vec4(vec3(0.2), min(min(line(p, a.xyz, b.xyz), line(p, b.xyz, c.xyz)), line(p, c.xyz, a.xyz)) - th):vec4(vec3(0), DIST_MAX),\n                    combine\n                    (\n                        vec4(vec3(1), triangle(p, t.A0, t.B0, t.C0)) - th,\n                        vec4(vec3(1), triangle(p, t.A1, t.B1, t.C1)) - th\n                    )\n                ),\n                combine\n                (\n                    iMouse.z>0.0?vec4(vec3(0), DIST_MAX):vec4(vec3(1,0,0)/8.0,sphere(p-a.xyz, a.w)),\n                    //vec4(vec3(0), DIST_MAX),\n                    //vec4(vec3(1,0,0), length(p-a.xyz-A)-th*3.),\n                    combine\n                    (\n                        vec4(vec3(1,0,0), min(length(p-t.A0),length(p-t.A1))-th*3.),\n                        vec4(vec3(1), min(ring(p-a.xyz+nab*AB.y, nab, AB.x),ring(p-b.xyz+nab*AB.w, nab, AB.z))-0.02)\n                    )\n                )\n            ),\n            combine\n            (\n                combine\n                (\n                    iMouse.z>0.0?vec4(vec3(0), DIST_MAX):vec4(vec3(0,1,0)/8.0,sphere(p-b.xyz, b.w)),\n                    //vec4(vec3(0), DIST_MAX),\n                    //vec4(vec3(0,1,0), length(p-b.xyz-B)-th*3.),\n                    combine\n                    (\n                        vec4(vec3(0,1,0), min(length(p-t.B0),length(p-t.B1))-th*3.),\n                        vec4(vec3(1), min(ring(p-b.xyz+nbc*BC.y, nbc, BC.x),ring(p-c.xyz+nbc*BC.w, nbc, BC.z))-0.02)\n                    )\n                ),\n                combine\n                (\n                    iMouse.z>0.0?vec4(vec3(0), DIST_MAX):vec4(vec3(0,0,1),sphere(p-c.xyz, c.w)),\n                    //vec4(vec3(0), DIST_MAX),\n                    //vec4(vec3(0,0,1), length(p-c.xyz-C)-th*3.),\n                    combine\n                    (\n                        vec4(vec3(0,0,1), min(length(p-t.C0),length(p-t.C1))-th*3.),\n                        vec4(vec3(1), min(ring(p-c.xyz+nca*CA.y, nca, CA.x),ring(p-a.xyz+nca*CA.w, nca, CA.z))-0.02)\n                    )\n                )\n            )\n        );\n        */\n}\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal(vec3 p)\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return\n        normalize\n        (\n            k.xyy * map(p + k.xyy*h).w\n            +\n            k.yyx * map(p + k.yyx*h).w\n            +\n            k.yxy * map(p + k.yxy*h).w\n            +\n            k.xxx * map(p + k.xxx*h).w\n        );\n}\n\nvec4 trace(vec3 ro, vec3 rd, float t0, float t1) // pass on running out of iterations\n{\n    // NOTE: Limited number of iterations to avoid stalling\n    //       when ray passes closely (just above EPSILON)\n    //       in parallel to a surface.\n    uint i;\n    vec4 h = vec4(0);\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++)\n    {\n        h = map(ro + rd * t);\n        if(h.w < EPSILON)\n            return vec4(h.xyz,t);\n        t += h.w;\n    }\n\n    return vec4(h.xyz,t); // stop on running out of iterations\n    //return vec4(0,0,0,t1); // pass on running out of iterations\n}\n\n// NOTE: Don't forget to add +normal*EPSILON to the starting position\n//       to avoid artifacts caused by getting stuck in the surface\n//       due to starting at distance < EPSILON from the surface.\n//       (normal could be calculated here but that would most likely be redundant)\nfloat shadow(vec3 ro, vec3 rd, float t0, float t1)\n{\n    return trace(ro, rd, t0, t1).w < t1 ? 0.0 : 1.0;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow(vec3 ro, in vec3 rd, float t0, float t1, float k)\n{\n    float res = 1.0;\n    float ph = 1e20;\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++)\n    {\n        float h = map(ro + rd*t).w;\n        if( h < EPSILON )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor ).w;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\nvoid mainImage(out vec4 o, vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    I = (2.0 * I - R) / R.y; // concise scaling thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : 4.0/3.0 * pi / 2.0;\n\n    vec3 ro = vec3(0.0, 0.0,-5.0);\n    vec3 rd = normalize(vec3(I.xy, 2.5)); // NOTE: omitting normalization results in clipped edges artifact\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n    ro.z += 1.0;\n\n    //vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n    //vec3 lightdir = normalize(vec3(-1.0,-2.0, 3.0));\n    vec3 lightdir = normalize(vec3(-2.0,-1.0, 3.0));\n\n    vec4 result = trace(ro, rd, 0.0, DIST_MAX);\n    vec3 color = result.xyz;\n    float dist = result.w;\n    if(dist < DIST_MAX)\n    {\n        vec3 dst = ro + rd * dist;\n        vec3 n = normal(dst);\n\n        //color = n * 0.5 + 0.5;\n\n        vec3 ambient = vec3(0.05);\n        float brightness = max(dot(lightdir, n), 0.0) * 2.0;\n        if(brightness > 0.0)\n            brightness *= shadow(ro + rd * dist + n * 0.01, lightdir, 0.0, DIST_MAX);\n            //brightness *= softshadow(ro + rd * dist + n * 0.01, lightdir, 0.0, DIST_MAX, 25.0);\n        color *= (ambient * calcAO(dst, n)) + brightness;\n\n        if(brightness > 0.0)\n        {\n            float specular = pow(max(0.0, dot(n, normalize(-rd + lightdir))), 250.0);\n            color += specular;\n        }\n\n        vec3 fog_color = vec3(0);\n        color = mix(fog_color, vec3(color), exp(-pow(dist/20.0, 2.0))); // fog\n    }\n    else\n    {\n        color *= 0.0;\n    }\n\n    color = tanh(color); // roll-off overly bright colors\n    color = sqrt(color); // approximate gamma\n\n    //color += hash32(I*123.0)/255.0; // dither to remove banding in the background\n\n    o = vec4(color, 1);\n}\n","name":"Image","description":"","type":"image"}]}