{"ver":"0.1","info":{"id":"4ltGR7","date":"1468435866","viewed":180,"name":"Particle v2","username":"thecodewarrior","description":"A spiral swirl shader for a particle","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["spiral","particle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float speed = 5.;\nint arms = 4;\nfloat centerRadius = 0.1;\nfloat pulseSpeed = 1.;\n\nfloat time() {\n    return iTime;\n}\n\nfloat rotOffset() {\n    return time()*(-speed*45.); \n}\n\nfloat rand(vec2 n) { \n    return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(vec2 p){\n    vec2 ip = floor(p);\n    vec2 u = fract(p);\n    u = u*u*(3.0-2.0*u);\n\n    float res = mix(\n        mix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),\n        mix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);\n    return res*res;\n}\n\nvec4 particle( vec2 uv )\n{\n    vec4 color = vec4(0, 0, 0, 0);\n    \n    float len = sqrt( uv.x * uv.x + uv.y * uv.y )*2.;\n    vec2 check = vec2(0, 1);\n    \n    float dotP = check.x*uv.x + check.y*uv.y;\n\tfloat detP = check.x*uv.y - check.y*uv.x;\n    \n    float angle = degrees(atan(detP, dotP));\n    angle += rotOffset();\n    \n    angle += sqrt(len)*360.;\n    \n    float d = 360./float(arms);\n    d = d/2.;\n    \n    float checkAngle = mod(angle, d*2.);\n    \n    float anglePercent = ((checkAngle/(d*2.))-0.5)*2.;\n    \n    color = vec4(0, 1, 0, 1);\n        \n    color.w *= 1.-clamp(pow(anglePercent, 2.)+0.2, 0., 1.);\n    color.w *= 1.-clamp(pow(len, 2.), 0., 1.);\n    \n    float noisePos = (len-pulseSpeed*time())*10.;\n    color.w *= 1.+noise(vec2(noisePos, 0)/2.);\n    \n    noisePos = (centerRadius-pulseSpeed*time())*10.;\n    \n    vec4 center = vec4(1, 0, 0, 1.-clamp(pow(len, 2.)*(1./centerRadius), 0., 1.));\n    center.w *= 1.+noise(vec2(noisePos, 0)/2.);;\n    \n    vec4 color2 = mix(color, center, center.w);\n    color2.w = max(color.w, center.w);\n    color = color2;\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float size = min(iResolution.x, iResolution.y);\n    float maxsize = max(iResolution.x, iResolution.y);\n    \n\tvec2 offset = vec2(0);\n    float offsetAmount = ((maxsize-size)/2. )/size;\n    \n    if(iResolution.x > iResolution.y)\n        offset.x = offsetAmount;\n    if(iResolution.y > iResolution.x)\n        offset.y = offsetAmount;\n    \n    vec2 uv = fragCoord.xy/size;\n    uv -= offset;\n    if(uv.x < 0. || uv.x > 1. || uv.y < 0. || uv.y > 1.)\n    {\n        fragColor = vec4(1, 0, 1, 1);\n    } else {\n        uv = uv - vec2(0.5);\n        fragColor = particle(uv);\n        fragColor = mix(vec4(0), fragColor, fragColor.w);\n    }\n}","name":"Image","description":"","type":"image"}]}