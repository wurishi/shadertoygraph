{"ver":"0.1","info":{"id":"Dtd3D2","date":"1683148421","viewed":82,"name":"Music Visualizer at 2640000 BPM","username":"Pancake992","description":"you may have to press pause press the reset button (|<) and play again for it to start\nsong: Singularity by Kobaryo\nMy first text based shader","likes":1,"published":1,"flags":96,"usePreview":0,"tags":["music"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 col = texture(iChannel0, uv);\n    \n    fragColor = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsd3zH","filepath":"https://soundcloud.com/2023jcore/kobaryo-singularity-at-264e6-bpm?in=2023jcore/sets/kobaryo-super-key-generator&si=a9b03b0a538a4ca3ba82190b6723ce0a&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","previewfilepath":"https://soundcloud.com/2023jcore/kobaryo-singularity-at-264e6-bpm?in=2023jcore/sets/kobaryo-super-key-generator&si=a9b03b0a538a4ca3ba82190b6723ce0a&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI 3.1415926538\n\nvec4 loadValue( in ivec2 pi )\n{\n    return texelFetch( iChannel0, pi, 0 );\n}\n\nvec4 storeValue( in vec2 pi, in vec4 va, in vec4 col, in vec2 fragCoord, in int size)\n{\n    return length(fragCoord-pi) < float(size) ? va : col;\n}\n\n//noise by Inigo Quilez\n\nfloat hash(vec3 p)\n{\n    p  = fract( p*0.3183099+.1 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\nfloat noise( in vec3 x )\n{\n    vec3 i = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\t\n    return mix(mix(mix( hash(i+vec3(0,0,0)), \n                        hash(i+vec3(1,0,0)),f.x),\n                   mix( hash(i+vec3(0,1,0)), \n                        hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( hash(i+vec3(0,0,1)), \n                        hash(i+vec3(1,0,1)),f.x),\n                   mix( hash(i+vec3(0,1,1)), \n                        hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\nfloat noiseLayers(in vec2 p){\n    float f = 0.0;\n\n\tp *= 8.0;\n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n\tf  = 0.5000*noise( vec3(p,1.0) ); p = m*p;\n\tf += 0.2500*noise( vec3(p,1.0) ); p = m*p;\n\tf += 0.1250*noise( vec3(p,1.0) ); p = m*p;\n\tf += 0.0625*noise( vec3(p,1.0) ); p = m*p;\n\n\tf = 0.5 + 0.5*f;\n\t\n    f *= smoothstep( 0.0, 0.005, abs(p.x-0.6) );\n    return smoothstep(0.45,1.0, f);\n}\n\nvec4 line_plane_intersect(in vec3 o, in vec3 n, in vec3 p, in vec3 d){\n\n    bool intersects = dot(d, n) < 0.0;\n    float t = (dot(o, n) - dot(p, n))/dot(d, n);\n    vec3 i = t*d + p;\n    i *= vec3(intersects);\n    return vec4(i, intersects);\n}\n\nvec2 rotate(in vec2 p, in float r){\n    return vec2(p.x*cos(r) - p.y*sin(r), p.y*cos(r) + p.x*sin(r));\n}\n\nfloat smax(float a, float b, float k)\n{\n    return log(exp(k*a)+exp(k*b))/k;\n}\n\nfloat repeat(in float x, in float l){\n    return mod(abs(mod(abs(x),l)-l*0.5),l);\n}\n\nvec2 rms_db0(){\n    float sampleSize = 64.0;\n    float sum = 0.0;\n    for (int i = 0; i < int(sampleSize); i++){\n        sum += pow(texture( iChannel1, vec2(float(i)/sampleSize, 0.25)).x, 2.0);\n    }\n    float rmsValue = pow(sum/sampleSize,0.5);\n    float dbValue = log(rmsValue/0.1);\n    return vec2(rmsValue, dbValue);\n\n}\n\n//----------------------------------------------------//\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 wrapuv = vec2(1.0-abs((uv.x-0.5)*2.0), uv.y);\n    \n    vec3 spectrum = texture( iChannel1, vec2(wrapuv.x, 0.25)).xyz;\n    vec3 waveform = texture( iChannel1, vec2(uv.x, 0.75)).xyz;\n    float spectrumSample = spectrum.x;\n    \n    vec2 vu = uv - vec2(0.0,pow(uv.y,2.25)*pow(spectrumSample,5.0)*0.5) + vec2(0.0, 0.1);\n    vu.y *= smoothstep(-2.0,1.0, wrapuv.x );\n    \n    float rms = rms_db0().x;\n    float db = rms_db0().y;\n    float time = 2.0*PI*loadValue(ivec2(3)).x - 0.001*pow(max(rms, 0.0)*3.5, 3.5);\n       \n    vec3 camPos = vec3(0.0, 5.0*max(db,0.1), time*-50.0);\n    vec3 viewDir = normalize(vec3(vu-vec2(0.5,0.5), 1.0));\n    \n    vec4 plane = line_plane_intersect(vec3(0.0,0.0,0.0), normalize(vec3(0.0,1.0,0.0)), camPos, viewDir);\n    float dist = smax(repeat(plane.x,5.0), repeat(plane.z,5.0),7.0);\n    \n    vec3 col = vec3(smoothstep(0.2,1.0,dist-1.5)) * vec3(0.0,0.0,1.0) * plane.w\n         + \n         (1.0-plane.w) * (pow(1.8-uv.y*2.0,2.0) * vec3(1.0,0.0,0.0)\n         * smoothstep(0.0,1.0, noiseLayers(uv*1.5+vec2(-0.01*iTime,0.0)) ) \n         +\n         smoothstep(0.1,0.08*rms, length(uv-vec2(0.5,0.45)) ) * vec3(1.0,1.0,0.0));\n                    \n    col += 2.*vec3(smoothstep(0.05,0.01,abs((uv.y-0.75)-0.25*rms*(waveform.x*2.0-1.0))))\n           * normalize(vec3(0.45,0.25,0.5)) * pow(wrapuv.x,0.5);\n          \n    vec4 color = storeValue(vec2(3.0, 3.0), vec4(mod(time/(2.*PI),1.0)), vec4(col,1.0), fragCoord, 1);\n    fragColor = color;\n}","name":"Buffer A","description":"","type":"buffer"}]}