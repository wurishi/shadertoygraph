{"ver":"0.1","info":{"id":"fdBXRG","date":"1620415967","viewed":42,"name":"Dsync's squares","username":"dsync","description":"Squares","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["squares"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author: Denis Yatsenko\n// Title: Squares\n\nfloat squareSize = 0.05;\n\nfloat squareComparence = 5.0;\n\nfloat createSquare(vec2 squarePos, vec2 pos, float squareSize) {\n    if ((pos.x >= squarePos.x - squareSize && pos.x <= squarePos.x + squareSize) && (pos.y >= squarePos.y - squareSize && pos.y <= squarePos.y + squareSize)) {\n      return 1.0;  \n    }\n    return 0.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 pos = fragCoord.xy / iResolution.xy;\n \t\n    vec3 color = vec3(0.0);\n    \n    float cosUtime = cos(iTime / 1.2);\n    float sinUtime = sin(iTime / 2.4);\n    \n    vec2 square1Pos = pos + vec2(cosUtime, sinUtime) / 3.0;\n    float square1 = createSquare(vec2(0.5), square1Pos, squareSize);\n    color += vec3(1) * square1;\n    \n    float square2 = createSquare(vec2(0.5, 0.5), pos + vec2(-cosUtime, sinUtime) / 3.0, squareSize);\n    color += vec3(1) * square2;\n    \n  \tfloat square3 = createSquare(vec2(0.5, 0.5), pos + vec2(-cosUtime, -sinUtime) / 3.0, squareSize);\n    color += vec3(1) * square3;\n    \n  \tfloat square4 = createSquare(vec2(0.5, 0.5), pos + vec2(cosUtime, -sinUtime) / 3.0, squareSize);\n    color += vec3(1) * square4;\n    \n    float centralSquare = createSquare(vec2(0.5, 0.5), pos, 0.1 * abs(cosUtime));\n    color += vec3(1) * centralSquare;\n    \n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}