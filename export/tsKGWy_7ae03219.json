{"ver":"0.1","info":{"id":"tsKGWy","date":"1570900759","viewed":134,"name":"Eye Monster","username":"belfry","description":"Doodling.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rr","filepath":"/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","previewfilepath":"/media/ap/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","type":"volume","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 fbm(vec2 v) {\n    float t = 0.;\n    vec4 n = vec4(0.);\n    for (float s = 1.; s > .1; s *= 0.5) {\n        t += s;\n    \tn += textureLod(iChannel1, .5 * v / s, 0.) * s;\n    }\n    return n / t;\n}\n\nvoid bubbles( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.y;\n\n\tfloat tiling = 2.;\n    float s = .1;\n    uv.y -= iTime * s;\n    \n    vec3 d = vec3(0.);\n    for (float i = -1.; i < 1.5; i++) {\n        for (float j = -1.; j < 1.5; j++) {\n            vec2 tileUV = (fract(uv * tiling) - vec2(i, j)) * 2. - 1.;\n            vec2 tileID = floor(uv * tiling) + vec2(i, j);\n\n            vec4 r = texelFetch(iChannel1, ivec2(abs(tileID)) % 64, 0);\n            \n            r.xy += sin((iTime * s + 10.) * r.xy) * .5;\n            r.z = r.z * 1.2 + .4;\n            vec3 col = vec3(.5);\n            \n            float d0 = length(tileUV - r.xy) - .65 * (r.z);\n            \n            d0 *= .115;\n            float d2 = length(tileUV - r.xy) - r.z;\n            d0 = min(d0, -d2);\n            d0 = clamp(d0, 0., 1.);\n            d += d0 * col;\n    \t}\n    }\n    fragColor = fbm(fragCoord / iResolution.xy * .01 * 4. - vec2(0., .5+iTime * .001)) * vec4(1., .15, .2, 1.) * 5.75 \n        + vec4(d * 2.75, 1.) + .275\n        + .085 * smoothstep(0.7, .8, fbm(fragCoord / iResolution.y * .0715 * 4. - vec2(0., iTime * .00715)).r);\n\tfragColor *= vec4(1.15);\n}\n\nvec4 fbm3d(vec3 v) {\n    float t = 0.;\n    vec4 n = vec4(0.);\n    float b = 1./32.;\n    for (float s = 1.; s > b; s *= 0.5) {\n        t += s;\n    \tn += texture(iChannel0, b / s * v) * s;\n    }\n    return n / t;\n}\n\nvec4 marmor(vec3 p) {\n    vec4 n = fbm3d(p);\n    vec2 m = pow(abs(vec2(n.r - n.b, n.g - n.a)) * 3., vec2(.15));\n    return vec4((1. - (1. - m.x) * (1. - m.y)) * .6 + .3);\n}\n\nvec3 sdf(vec3 p, out vec3 eyeDir, out vec3 bodyPos) {\n    float body;\n    float arm;\n    float hand;\n    float eye;\n    float scale = 1.;\n    float id = 0.;\n\tfloat d = 100000.;\n\tfloat o = -1.;\n\n    for (float i = 0.; i < 7.; i++) { \n        float a = sin(length(p.xy) * 25. + iTime) * .03;\n        p.xy *= mat2(cos(a), sin(a), -sin(a), cos(a));\n        body = length(p) - .3;\n        bodyPos = p;\n        vec2 polar = vec2(atan(p.y, p.x), length(p.xy));\n        float polarID = 0.;\n        polarID = floor(polar.x / (2. * 3.14159 / 6.));\n        \n        polar.x = mod(polar.x, 2. * 3.14159 / 6.);\n        polar.x -= 2. * 3.14159 / 12.;\n        arm = length(vec3((polar - vec2(0., .5)) * \n                           vec2(.8, .63), p.z)) - .3;\n        vec2 cart = vec2(cos(polar.x), sin(polar.x)) * polar.y;\n        hand = length(vec3(cart - vec2(0.75, .0), p.z + .2)) - .2;\n        vec2 eyeOffset = sin(iTime * vec2(1.3, 1.7) + i + id) * .6;\n        eyeOffset += sin(iTime * vec2(1.5, 1.9)) * .3;\n        float eyeSize = sin(i + id + iTime * .1333);\n        eyeDir = vec3(eyeOffset * .1, 0.2 + (.5 * eyeSize + .5)*.05);\n        eye = length(p + eyeDir) - .125 + eyeSize * .025;\n        if (hand < .1) {\n            d = min(max(min(body, arm), -hand + .05), eye) / scale;\n            \n            p.xy = cart - vec2(0.75, .0);\n            p.z += .2;\n            p.xyz *= 6.;\n            scale *= 6.;\n            id += (polarID + i) * 1.333;\n        } else {\n            o = 1.;\n            float r = body;\n            if (arm < r) {\n                o = 2.;\n                r = arm;\n            }\n            if (hand < r) {\n                o = 3.;\n                r = hand;\n            }\n            if (eye < r) {\n                o = 4.;\n                r = eye;\n            }\n            r /= scale;\n            if (d < r) {\n                o = 0.;\n                r = d;\n            }\n            d = r;\n            break;\n        }\n    }\n\treturn vec3(d, scale, o);\n}\n\nvec3 normal(vec3 p, float s) {\n    vec3 ed, bp;\n    vec2 eps = vec2(0., 0.025 / s);\n    float dx = sdf(p + eps.yxx, ed, bp).x - sdf(p - eps.yxx, ed, bp).x;\n    float dy = sdf(p + eps.xyx, ed, bp).x - sdf(p - eps.xyx, ed, bp).x;\n    float dz = sdf(p + eps.xxy, ed, bp).x - sdf(p - eps.xxy, ed, bp).x;\n    return normalize(vec3(dx, dy, dz));\n}\n\nfloat ambientOcclusion(vec3 p, vec3 n) {\n    vec3 ed, bp;\n    float o = .1;\n    float a = 0.;\n    for (float i = 1.; i < 5.; i++) {\n        a += abs(sdf(p + n * i * o, ed, bp) - o * i).x;\n    }\n    return 1.-a + .5;\n}\n\n\nfloat translucency(vec3 p, vec3 n) {\n    vec3 ed, bp;\n    float o = .05;\n    float a = 0.;\n    for (float i = 1.; i < 3.; i++) {\n        a += abs(sdf(p - n * i * o, ed, bp) - o * i).x;\n    }\n    return 1.-a;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.);\n    for (float aa = 0.; aa < 3.; aa++) { \n        vec2 aaOffset = texelFetch(iChannel1, ivec2(aa + iTime) % 64, 0).xy - .5;\n        vec2 uv = (2. * (fragCoord + aaOffset) - iResolution.xy) / iResolution.y;\n\n        vec3 camPos = mix(vec3(0., 0., -2.), vec3(0.065, 0.845, -1.75 + 1.5), smoothstep(.9, -.9, cos(iTime * .4 )));\n        vec3 dir = normalize(vec3(uv, 1. / tan(radians(60.)*.5)));\n\n        float i = 0.;\n        float t = 0.;\n        vec3 p;\n        bool hit = false;\n        float s = 1.;\n        float id = -1.;\n        vec3 eyeDir, bodyPos;\n\n        for (; i < 100.; i++) {\n            p = camPos + dir * t;\n            vec3 obj = sdf(p, eyeDir, bodyPos);\n            float d = obj.x;\n            s = obj.y;\n            id = obj.z;\n            if (abs(d) < 0.001 / s) {\n                hit = true;\n                break;\n            }\n            t += d;\n            if (t > 100.)\n                break;\n        }\n\t\t//fragColor = vec4(vec3(i > 30. ? 1. : 0.), 1.);\n        //break;\n        if (t >= 100.) {\n            vec4 tmpCol = vec4(0.);\n            bubbles(tmpCol, fragCoord);\n            fragColor += vec4(tmpCol.rgb, 1.);\n        }else {\n            eyeDir = normalize(eyeDir);\n            vec3 eyeUp = vec3(0., 1., 0.);\n            vec3 eyeLeft = normalize(cross(eyeUp, eyeDir));\n            eyeUp = cross(eyeDir, eyeLeft);\n            mat3 eyeTrans = mat3(eyeLeft, eyeUp, eyeDir);\n\n            vec3 n = normal(p, s);\n            vec3 l = normalize(vec3(1.));\n            float diff = max(0., dot(n, l)) * .5;\n            float spec = pow(max(0., dot(n, normalize(l + -dir))), 64.);\n\n            vec3 c = (n * .5 + .5);\n            if (id == 0.) {\n                c = vec3(.8, 0., 0.15) * (.5 + translucency(p, n));\n            }\n            if (id == 1.) {\n                c = mix(vec3(1., 0., 0.), vec3(1.), pow(marmor(((bodyPos) * eyeTrans) * 5.).x, 2.));\n            }\n            if (id == 2.) {\n                c = vec3(.85, 0., .25);\n            }\n            if (id == 3.) {\n                c = vec3(1., 1., 0.);\n            }\n            if (id == 4.) {\n                vec3 r = reflect(dir, n);\n                vec4 b;\n                bubbles(b, r.xy/(abs(r.z)+1.) * iResolution.xy);\n                c = mix(b.xyz * .1 + vec3(0., 0., .1), vec3(0., 0., 1.), 1.-abs(dot(n, -dir)));\n            }\n\n            float rim = pow(1.-abs(dot(n, -dir)), 5.);\n            fragColor += vec4(c * (diff + spec + .2*ambientOcclusion(p, n) + rim * .3), 1.);\n            spec = pow(max(0., dot(n, normalize(vec3(-1., .6, -1.) + -dir))), 128.) * .5;\n            spec += pow(max(0., dot(n, normalize(vec3(1., -1.5, -1.) + -dir))), 256.) * .25;\n\n            fragColor.rgb += id == 4. ? spec : 0.;\n        }\n        if (i < 15.)\n            break;\n    }\n    fragColor /= fragColor.a;\n}","name":"Image","description":"","type":"image"}]}