{"ver":"0.1","info":{"id":"MsByWG","date":"1493528194","viewed":290,"name":"Glass ball","username":"morgaza","description":"Glass ball","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["glassball"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define RAYCAST_ACCURACY 0.0001f\n#define INFINITY 1e34f\n#define PI 3.14159265359\n#define REFR 1.02f\n\n#define FOV (float(60) * 0.0174532925199432957692)\n\n#define BASE_COLOR vec3(0.0, 0.3, 1.0)\n#define ABSORB 0.5\n#define RGB_OFFSET 0.003\n#define SUN_DIR normalize(vec3(0, -1, -1))\n\nstruct hit_result\n{\n    float entry;\n    float exit;\n};\n\nhit_result raycast_sphere(vec3 origin, vec3 direction)\n{\n    hit_result result;\n    result.entry = result.exit = 0.0;\n    \n    vec3 position = vec3(0, 0, 0);\n    float radius = 1.0;\n\n    float entry = INFINITY;\n    float exit = INFINITY;\n    float radius_sqr = radius * radius;\n    float a = dot(direction, direction);\n    float b = dot(direction, origin - position) * 2.0f;\n    float c = dot(position, position) + dot(origin, origin) - dot(position, origin) * 2.0f - radius_sqr;\n    float discriminant = b * b - 4.0 * a * c;\n\n    if (discriminant >= 0.0)\n    {\n        entry = (-b - sqrt(discriminant)) / (2.0f * a);\n        exit = (-b + sqrt(discriminant)) / (2.0f * a);\n\n        result.entry = entry;\n        result.exit = exit;\n    }\n    \n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 coord = (fragCoord / iResolution.xy - vec2(0.5)) * 2.0;\n    \n    float aspect = iResolution.x / iResolution.y;\n    \n    vec2 mouse_relative = iMouse.xy / iResolution.xy;\n    float pitch = (mouse_relative.y - 0.5) * 3.0;\n    float yaw = iTime * 0.1 + mouse_relative.x * PI * 2.0;\n    \n    vec3 forward = normalize(vec3(sin(yaw), pitch, cos(yaw)));\n    vec3 right = normalize(cross(vec3(0, 1, 0), forward));\n    vec3 up = cross(forward, right);\n    vec3 origin = forward * -2.0;\n    \n    float tan_fov = tan(FOV) * 0.5;\n    vec3 direction = normalize(forward + right * (tan_fov * aspect * coord.x) + up * (tan_fov * coord.y));\n    \n    vec4 background = texture(iChannel0, direction);\n    \n    // Entry cast\n    hit_result r0 = raycast_sphere(origin, direction);\n    if(r0.entry == r0.exit)\n    {\n        fragColor = background;\n        return;\n    }\n    \n    origin = direction * r0.entry + origin;\n    vec3 normal = normalize(origin);\n    \n    // Reflect\n    float d = -dot(direction, normal);\n    float d_inv = 1.0 - d;\n    vec3 reflect_color = texture(iChannel0, reflect(direction, normal)).xyz;\n    float v = pow(REFR - 1.0, 2.0) / pow(REFR + 1.0, 2.0);\n    float reflectance = v + (1.0 - v) * pow(1.0 - d, 5.0);\n    reflect_color *= reflectance;\n    \n    // Exit cast\n    direction = refract(direction, normal, 1.0 / REFR);\n    hit_result r1 = raycast_sphere(origin, direction);\n    if(r1.entry == r1.exit)\n    {\n        return;\n    }\n\n    origin = direction * r1.exit + origin;\n    normal = -normalize(origin);\n    \n    // Beer's law\n    float absorb = 0.5;\n    vec3 color_absorbance = (vec3(1.0, 1.0, 1.0) - BASE_COLOR) * ABSORB * -r1.exit;\n    color_absorbance = vec3(exp(color_absorbance.x), exp(color_absorbance.y), exp(color_absorbance.z));\n    \n    float r = texture(iChannel0, refract(direction, normal, REFR * (1.0 + RGB_OFFSET))).r;\n    float g = texture(iChannel0, refract(direction, normal, REFR)).g;\n    float b = texture(iChannel0, refract(direction, normal, REFR * (1.0 - RGB_OFFSET))).b;\n\tvec3 refract_color = vec3(r, g, b);\n    refract_color *= color_absorbance;\n    \n    // Anti alias\n    vec3 total_color = refract_color + reflect_color;\n    fragColor = vec4(mix(total_color, background.xyz, pow(d_inv, 10.0)), 1);\n}","name":"Image","description":"","type":"image"}]}