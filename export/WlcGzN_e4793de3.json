{"ver":"0.1","info":{"id":"WlcGzN","date":"1575791290","viewed":73,"name":"second math tune with note mods","username":"pentaphobe","description":"trying out different ways of sequencing things","likes":2,"published":1,"flags":8,"usePreview":0,"tags":["music"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float SPEED = 1.;\n\nfloat B(float quarternotes) {\n    return quarternotes * 0.5 * SPEED;\n}\nfloat basicEnv(float shortness, float rate, float time) {\n    return exp(shortness * fract(rate*time));\n}\nint beat(float rate, float time) {\n\treturn int(floor(time / rate));\n}\nfloat startAfter(float rate, int beats, float time) {\n    int result = int(beat(rate, time)) / beats;\n    return float(result);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n        \n    float time = float(iTime);\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime*0.01+sin(uv.xyx * 0.55)+vec3(1,2,2));\n    \n    col = texture(iChannel0, col.xy).xyz;\n    vec3 layer2 = texture(iChannel0, col.yx * 0.3 * sin(time)).xyz;\n    layer2 *= startAfter(B(4.), 4, time);\n    col += layer2;\n    vec3 offs = sin(0.2 * iTime+uv.xyx);\n    offs = offs * startAfter(B(4.), 8, time);\n\tcol *= 1. + offs;\n    \n    float kickEnv = basicEnv(-10., B(4.), time);\n    kickEnv = kickEnv * startAfter(B(4.), 16, time) * 2.;\n    col += kickEnv;\n    \n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const float SPEED = 1.;\n\nfloat B(float quarternotes) {\n    return quarternotes * 0.5 * SPEED;\n}\n\nfloat basicEnv(float shortness, float rate, float time) {\n    return exp(shortness * fract(rate*time));\n}\n\nfloat freq(float f) {\n\treturn 6.2831 * f;\n}\n\nfloat cowbell(float f, float rate, float time) {\n    float env = basicEnv(-100., rate, time);\n    return sin(freq(f)*time)*env;\n}\n\nfloat track_cowbells(float time) {\n\tfloat cowbells = cowbell(1440., B(4.), time) +\n        cowbell(700., B(3.), time) +\n        cowbell(500., B(1.), time);\n    return cowbells;\n}\n\nfloat beatEnv(float sharpness, float rate, float time) {\n\treturn clamp(sharpness * (rate - mod(time, rate)), 0., 1.);\n}\n\nfloat harm(float ang, float h1, float h2, float h3, float h4) {\n\treturn sin(ang) * h1 +\n        \tsin(ang*3.) * h2 +\n        \tsin(ang*5.) * h3 +\n        \tsin(ang*7.) * h4;\n}\n\nint beat(float rate, float time) {\n\treturn int(floor(time / rate));\n}\n\nfloat softSaturate(float val) {\n\treturn tanh(val);\n}\n\nfloat startAfter(float rate, int beats, float time) {\n    int result = int(beat(rate, time)) / beats;\n    return float(result);\n}\n\nvec2 mainSound( in int samp, float time )\n{\n    float cowbells = track_cowbells(time) + \n        track_cowbells(time - 123.) * 0.05 + \n        track_cowbells(time - 123. * 2.) * 0.005;\n    \n    float weirdoFreq = 8880. + (sin(time * B(11.)) * 3000.);\n    float weirdo = cowbell(weirdoFreq, B(16.), time) * \n        clamp(sin(time * B(7.)) * sin(time * B(2.)), 0.25, 1.0);\n    weirdo = weirdo * startAfter(B(4.), 4, time);\n    \n    float notes[4] = float[4](120., 140., 100., 190.);\n    float bassNote = notes[beat(B(2.), time) % 4];\n    float bassEnv = beatEnv(0.25, B(2.), time);\n    float bass = sin(freq(bassNote)*time)*bassEnv;\n    bass = clamp(bass * 2.0, 0., 1.);\n    bass = bass * startAfter(B(4.), 16, time);\n    \n    float noteMods[12] = float[12](1., 0.5, 1., 1.5, 1., .5,\n                                 1., 0.5, 1.5, 1., 3., .25);\n    float noteMod = noteMods[beat(B(6.), time) % 12];\n    float leadNote = notes[beat(B(2.), time) % 4] * noteMod;\n    float leadEnv = beatEnv(0.25, B(.75), time);    \n    float lead = harm(freq(leadNote * 4.)*time, 1., .5, .25, .3)*leadEnv;\n    lead = softSaturate(lead * 4.0);\n    lead = lead * startAfter(B(4.), 8, time);\n    \n    float kickEnv = basicEnv(-10., B(4.), time);\n    float kick = harm(60. * kickEnv, 1., 0.2, 0.1, 0.1) * kickEnv;\n    kick = clamp(softSaturate(kick), 0., 1.);\n    kick = kick * startAfter(B(4.), 16, time);\n    \n    // secondary kick\n    float offkicks[4] = float[4](4., 6., 8., 12.);\n    float offkickTime = offkicks[beat(B(4.), time) % 4];\n    kickEnv = basicEnv(-10., B(offkickTime), time) * 0.025;\n    kick = kick + harm(160. * kickEnv, 1., 0.4, .5, .1) * kickEnv;\n    kick = kick * startAfter(B(4.), 8, time);\n    \n    float mainMix = \n        kick * 0.8 +\n        bass * 0.7+ \n        lead * 0.2+\n        cowbells*.9 + \n        weirdo * 4.;\n    \n    // add hard fuzz\n    mainMix = clamp(mainMix, 0., 1.);\n    // add soft saturation\n    mainMix = softSaturate(mainMix * 1.5); \n    \n    float masterGain = 1.0;\n    float master = mainMix * masterGain;\n    return vec2( master );\n}","name":"Sound","description":"","type":"sound"}]}