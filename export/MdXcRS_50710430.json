{"ver":"0.1","info":{"id":"MdXcRS","date":"1488817542","viewed":434,"name":"Image to Spiral","username":"Beta_Alf","description":"a shader that draws a line to represent a picture","likes":9,"published":1,"flags":32,"usePreview":0,"tags":["spiral"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926\n\n#define RADIUS 0.01\n\nvec2 uvToPolar(vec2 uv)\n{\n    vec2 norm_uv = uv * iResolution.xy / max(iResolution.x,iResolution.y);\n    float angle = mod(atan(norm_uv.y, norm_uv.x), 2.0*PI);\n    return vec2(length(norm_uv), angle);\n}\n\nvec2 polarToUV(vec2 polar)\n{\n    vec2 norm_uv = vec2(cos(polar.y)*polar.x,sin(polar.y)*polar.x);\n    vec2 uv = vec2(1.0, iResolution.x/iResolution.y) * norm_uv;\n    return uv;\n}\n\nfloat sawTooth(float x, float period, float amplitude){\n    return fract(-x/period) * amplitude;\n}\n\nvec2 vectorToCurve(vec2 uv)\n{\n    float radius = RADIUS;\n    vec2 midpoint = vec2(0.5);\n    float period = radius;\n    \n    vec2 polar = uvToPolar(uv - midpoint);\n    \n    float angle = polar.y;\n    float phase = ((polar.y) / (2.0 * PI)) + iTime;\n    \n    float dist_to_curve = sawTooth(polar.x - phase * period, period, period);\n\n\treturn polarToUV(vec2(dist_to_curve - 0.5 * period, polar.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    vec2 delta = vectorToCurve(uv);\n    \n    float compare = texture(iChannel0, uv+delta).x - length(delta) * 2.0/RADIUS;\n    fragColor = vec4(smoothstep(-0.3, 0.3, compare));\n    \n    /*\n    vec4 true_color = texture(iChannel0, uv + delta);\n    \n    fragColor = vec4(vec3(delta.x),1.0);\n    fragColor = vec4(vec3(1.0),1.0);\n    //fragColor = true_color;\n    if(length(delta) * 2.0 > true_color.r * RADIUS)\n        fragColor = vec4(vec3(0.0),1.0);\n\n\t*/\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float grey = dot(texture(iChannel0, uv).rgb, vec3(.299, .587, .114));\n    fragColor = vec4(vec3(grey),1.0);\n}","name":"Buf A","description":"","type":"buffer"}]}