{"ver":"0.1","info":{"id":"4ccyWs","date":"1731556707","viewed":65,"name":"raymarching practice2","username":"lukajk1","description":"most code is from art of code raymarching video","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n// maxdist is a float\n#define MAX_DIST 100. \n#define SURF_DIST_MARGIN .01\n\nfloat getDistFromSceneObjs(vec3 pos) {\n    vec4 sphere = vec4(0, 1.3, 5, 1);\n    \n    float distFromSphereOrigin = length(pos - sphere.xyz) - sphere.w;\n    float distFromPlane = pos.y;\n    \n    float dist = min(distFromSphereOrigin, distFromPlane);\n    return dist;\n}\n\nfloat rayMarch(vec3 rayOrigin, vec3 rayDir) {\n    float distOffset = 0.0;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n        vec3 currentPos = rayOrigin + rayDir * distOffset;\n        float distToSurface = getDistFromSceneObjs(currentPos);\n        distOffset += distToSurface;\n        \n        if (distOffset > MAX_DIST || distToSurface < SURF_DIST_MARGIN) break;\n    }\n    \n    return distOffset;\n}\n\nfloat mapAndClamp(float value) {\n    return clamp(mix(5.0, 5.5, value), 5.0, 5.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0.0);\n\n    vec3 rayOrigin = vec3(0, 1, 0);\n    vec3 rayDir = normalize(vec3(uv.x, uv.y, 1)); \n    /* z is depth, x width, y height naturally. So these vectors are angled based on the current\n    screencoords */\n    \n    float distToSurf = rayMarch(rayOrigin, rayDir);\n    vec3 hitPoint = rayOrigin + rayDir * distToSurf;\n    \n    float oscillating = 0.5 * (sin(iTime) + 1.); // oscillates smoothly between 0 and 1\n    \n    float distFromCam = length(hitPoint - rayOrigin);\n    float scaledDistFromCam = distFromCam / 11.2;\n    \n    //col = vec3(scaledDistFromCam, .5, .8);    \n    \n    scaledDistFromCam = distFromCam;\n    col = vec3(sin(scaledDistFromCam-(iTime/2.)), 0.3, 0.5);\n\n\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}