{"ver":"0.1","info":{"id":"tsSGRc","date":"1549502045","viewed":221,"name":"Raycasting With Discard","username":"scratch13764","description":"Playing around with using discard to raycast things not in realtime. It would be better to use a buffer, because this technique would be very good for rendering fog, but I figured I'd start with discard since I only recently found out it exists.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raycast","discard"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ViewDist 15.\n#define StepSize 0.0025\n/* Seconds to render â‰ˆ ViewDist / Stepsize / FPS\nAt current settings:\nFPS:  Seconds:\n30   - 200\n60   - 100\n100  - 60\n120  - 50\n144  - 42\n200  - 30\n*/\nbool Intersect (vec3 p)\n{\n    float a = min(length(p)-2., p.z-p.y/10.+1.);\n    if(texture(iChannel0, p/10.).r >= .65 && a <= 0.) return false;\n    else return true;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5*iResolution.xy)/iResolution.y;\n    float frame = min(float(iFrame - 1), ViewDist/StepSize);\n    float Dist = ViewDist-StepSize*frame;\n    vec3 Cam = vec3(0,-10,0);\n    vec3 RayStep = normalize(vec3(uv.x,1,uv.y));\n    float Shade = 1.-Dist/ViewDist;\n    vec4 HitCol = vec4(Shade);\n    \n    \n    \n    if (frame == 0.) fragColor = vec4(0); //This isn't needed on my computer but I'm not sure about others...\n    else\n    {\n        if (Intersect(Cam+RayStep*Dist)) discard;\n        fragColor = HitCol;\n    }\n}","name":"Image","description":"","type":"image"}]}