{"ver":"0.1","info":{"id":"csGcz3","date":"1696409011","viewed":22,"name":"Pikso","username":"Pikso","description":"Pikso","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["pikso"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//dormalized function\nvec3 getNorm(vec3 p) \n{\n    vec2 a = vec2(0.01,0.);\n    return normalize(vec3(0.,0.,0.));\n    \n}\n\n// map function \nfloat map (vec3 p)\n{\n    float radius =1.;\n    vec3 sPos = vec3(0.,0.,0.);\n    return distance(p, sPos)*radius;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n\n    vec3 col = vec3(0.,0.,0.);\n\n    // declare cam pos \n    vec3 camPos = vec3(0.,0.,-5.);\n    \n    vec3 viewDir = normalize(vec3(uv.x,uv.y,1.));\n    vec3 p = camPos;\n    vec3 sPos = vec3(0.,0.,0.);\n    float radius = 1.;\n    \n    for (int i = 0; i < 128; ++i)\n    {\n        float dist = distance(p, sPos) - radius;\n        if(dist < 0.001)\n        {\n            col = vec3(1., 0., 0.5);\n            vec3 n = normalize(p*vec3(sin(iTime)*0.5+0.5, cos(iTime)*0.5+0.5, 0.5));\n            col = n*.5+.5;\n            break;\n        }\n        p = p + viewDir*dist; \n    }\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}