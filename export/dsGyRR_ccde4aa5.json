{"ver":"0.1","info":{"id":"dsGyRR","date":"1695695066","viewed":43,"name":"9/49","username":"tono","description":"9","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["49"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot(float a){return mat2(cos(a),sin(a),-sin(a),cos(a));}\nfloat bo(vec3 p,vec3 s){p = abs(p)-s;return max(p.x,max(p.y,p.z));}\nfloat bar(vec2 p,vec2 s){p = abs(p)-s;return max(p.x,p.y);}\nfloat pi = acos(-1.);\nvec2 pmod(vec2 p, float r){float a = atan(p.x,p.y)+pi/r;float n = (pi*2.)/r;return p*rot(-(floor(a/n)*n));}\nvec3 random3(vec3 c) {\n    float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n    vec3 r;\n    r.z = fract(512.0*j);\n    j *= .125;\n    r.x = fract(512.0*j);\n    j *= .125;\n    r.y = fract(512.0*j);\n    return r-0.5;\n}\n\n//https://www.shadertoy.com/view/XsX3zB\n/* skew constants for 3d simplex functions */\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\n/* 3d simplex noise */\nfloat simplex3d(vec3 p) {\n    /* 1. find current tetrahedron T and it's four vertices */\n    /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n    /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n\n    /* calculate s and x */\n    vec3 s = floor(p + dot(p, vec3(F3,F3,F3)));\n    vec3 x = p - s + dot(s, vec3(G3,G3,G3));\n\n    /* calculate i1 and i2 */\n    vec3 e = step(vec3(0.,0.,0.), x - x.yzx);\n    vec3 i1 = e*(1.0 - e.zxy);\n    vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\n    /* x1, x2, x3 */\n    vec3 x1 = x - i1 + G3;\n    vec3 x2 = x - i2 + 2.0*G3;\n    vec3 x3 = x - 1.0 + 3.0*G3;\n\n    /* 2. find four surflets and store them in d */\n    vec4 w, d;\n\n    /* calculate surflet weights */\n    w.x = dot(x, x);\n    w.y = dot(x1, x1);\n    w.z = dot(x2, x2);\n    w.w = dot(x3, x3);\n\n    /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n    w = max(0.6 - w, 0.0);\n\n    /* calculate surflet components */\n    d.x = dot(random3(s), x);\n    d.y = dot(random3(s + i1), x1);\n    d.z = dot(random3(s + i2), x2);\n    d.w = dot(random3(s + 1.0), x3);\n\n    /* multiply d by w^4 */\n    w *= w;\n    w *= w;\n    d *= w;\n\n    /* 3. return the sum of the four surflets */\n    return dot(d, vec4(52.0,52.0,52.0,52.0));\n}\n\n#define OCTAVES 3\nfloat fbm (in vec3 st) {\n    // Initial values\n    float value = 0.0;\n    float amplitude = .5;\n    float frequency = 0.;\n    //\n    // Loop of octaves\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitude * simplex3d(st);\n        //value += amplitude * mynoise(st);\n        st *= 2.;\n        amplitude *= .5;\n    }\n    return value;\n}\nvec2 mPolar(vec2 p){\n  float a = atan(p.y,p.x);\n  float r = 0.;\n  r = length(p);\n  return vec2(a/pi, r);\n}\nfloat smin( float a, float b, float k )\n{\n    float res = exp2( -k*a ) + exp2( -k*b );\n    return -log2( res )/k;\n}\nfloat map(vec3 p)\n{\n    float o = 10.;\n    vec3 op = p;\n    p.xz *= rot(p.y/3.);\n    p.xz = pmod(p.xz,3.);\n    p.z -= 2.5;\n    p.x += sin(p.z )*2.;\n    p.z = sin(p.z/2.) * 3.;\n    o = bar(p.xz,vec2(1.3)  );\n    if(o<1.)\n    {\n    \to += (fbm(p*.8 + iTime  )-.5) * .8;\n    }\n    o*=.4;\n    \n    return o;\n}\n\n// float map2(vec3 p)\n// {\n//     float o = 10.;\n    \n//     p += (fbm(p + iTime)-.5);\n//     //p -= simplex3d(p * 3.);\n//     o = length(p) - 1.7;\n    \n//     return o;\n// }\n\nfloat march(vec3 cp , vec3 rd)\n{\n    float depth = 0.;\n    for(int i = 0 ; i< 99 ; i++)\n    {\n        vec3 rp = cp + rd * depth;\n        float d = map(rp);\n        if(abs(d) < 0.01)\n        {\n            return depth;\n        }\n        if(depth > 70.)break;\n        depth += d;\n    }\n    return -depth;\n\n}\n#define steps 30\n\n//参考\n//https://www.shadertoy.com/view/WllXzB\nvec3 volume(vec3 p,vec3 rd,vec3 ld,vec3 bc)\n{\n    vec3 op = p;\n    float trans = 1.;\n    float td = 0.;\n    float diff = 0.;\n    float emit = 0.;\n    \n    for(int i = 0 ; i< steps ; i++)\n    {\n        float m = map(p);\n        p += rd * .06;\n        \n        //めり込んだところを使ってるから符号がマイナス density\n        float dens = 1. - smoothstep(0.,.35,-m);\n        //tdとは何かわからん\n\t\ttd += dens;\n        trans *= dens;\n        \n        if(td > 1. && diff <= 0.)\n        {\n            td = 1.;\n            diff = clamp(1.-map(p-.1*ld),0.,1. );\n            emit = pow(smoothstep(-.3,0.,map(p)),4.);\n        }\n    }\n    \n    trans = (1. - pow(td/float(steps),4.5));\n    trans = smoothstep(0.,1.,trans);\n    float emitmod = (emit * trans)*.8+.2;\n    \n    vec3 lin = vec3(.23, .92, .6);\n   // lin = hueShift(lin, 4.2 + -trans*.6 + diff*.5);\n    lin *= emitmod;\n    \n   // lin = saturation(lin, pow(trans, .5)*.4);\n    lin *= 5.;\n    lin -= vec3(.4);\n    \n    return mix(bc, lin, pow(trans, 1.25));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n\tvec3 cp = vec3(0.,0.,-63.);\n    \n    //cp.z+= sin(iTime) * 10.;\n    //cp.xz *= rot(iTime/3.);\n    vec3 target = vec3(0.);\n    \n    vec3 bg = vec3(0.);\n    vec3 col = bg;\n    \n    vec3 cd = normalize(vec3(target - cp));\n    vec3 cs = normalize(cross(cd , vec3(0.,1.,0.)));\n    vec3 cu = normalize(cross(cd,cs));\n    \n    float fov = 2.5;\n    \n    vec3 rd = normalize(cd * fov + cs * p.x + cu * p.y);\n    \n    float d = march(cp,rd);\n    if( d > 0.)\n    {\n        vec3 l = normalize(vec3(2.,4.,8.));\n        \n        col = volume(cp + rd * d,rd,l,bg);\n        vec3 pos = cp + rd * d;\n        vec2 e = vec2(1.0, -1.0) * 0.0005;\n        vec3 N = normalize(\n                  e.xyy * map(pos + e.xyy) +\n                  e.yyx * map(pos + e.yyx) +\n                  e.yxy * map(pos + e.yxy) +\n                  e.xxx * map(pos + e.xxx));\n        vec3 sun = normalize(vec3(2.,4.,8.));\n        //sun.xz *= rot(iTime);\n        float diff = max(0.,dot(-sun,N));\n        diff = mix(diff , 1.,.1);\n        float sp = max(0.,dot(rd,reflect(N,sun)));\n        sp = pow(sp,66.6) * 1.;\n        float rim = pow(clamp(1. - dot(N, -rd), 0., 1.), .4);\n        \n        col += sp * col + diff * col + rim * col;\n        \n        col -= rim * col;\n        float t = 1.-exp(-.00003 * d * d);\n        col = mix(col,bg,t);\n       // col -= volume(cp + rd * d,rd,l,bg);\n    }\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}