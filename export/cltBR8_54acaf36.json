{"ver":"0.1","info":{"id":"cltBR8","date":"1700939677","viewed":30,"name":"gradient 2 colors background","username":"sosunnyproject","description":"replicate of background fragment from the past project (used shader for pixijs app)\nHorizontalGradientFrag","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["colors","gradient"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#ifdef GL_ES\nprecision mediump float;\n#endif\n\n// varying vec2 vUvs;\n// uniform vec2 iResolution;\n// uniform float iTime;\n// uniform vec2 u_offset;\n// uniform float u_scale;\nvec2 u_offset = vec2(400.0f, 100.0f);\nfloat u_scale = 1.0f;\n\nhighp float dist(vec2 a, vec2 b) {\n  // return sqrt(pow(a.x - b.x, 2.) + pow(a.y - b.y, 2.5));  // radial\n  return abs(a.y - b.y);  // linear\n}\n\n// fragColor = vec4(0.5, 0.25, 0.75, 1.0);\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from 0 to 1)\n    // vec2 uv = fragCoord/iResolution.xy;\n    vec2 st = (fragCoord-u_offset) / iResolution.xy / u_scale;\n    float gradientScale = 4.0;\n    st.y += iTime;\n    st.y = st.y - (gradientScale * floor(st.y / gradientScale));\n\n    vec3 color;\n\n    vec2 u_point1 = vec2(0.50,gradientScale * 1.0);\n    vec2 u_point2 = vec2(0.50,gradientScale * 0.75);\n    vec2 u_point3 = vec2(0.50,gradientScale * 0.50);\n    vec2 u_point4 = vec2(0.50,gradientScale * 0.25);\n    vec2 u_point5 = vec2(0.50,gradientScale * 0.0);\n\n    vec3 u_color1 = vec3(1.0, 1.0, 1.0);  // middle white\n    vec3 u_color2 = vec3(253.0 / 256.0, 136.0 / 256.0, 11.0 / 256.0); // orange\n    vec3 u_color3 = vec3(1.0, 1.0, 1.0);  // middle white\n    vec3 u_color4 = vec3(12.0 / 256.0, 239.0 / 256.0, 66.0 / 256.0); // green\n    vec3 u_color5 = vec3(1.0, 1.0, 1.0);  // middle white\n\t\n    float u_radius1 = 0.001;\n    float u_radius2 = 0.05;\n    float u_radius3 = 0.001;\n    float u_radius4 = 0.05;\n    float u_radius5 = 0.001;\n\n    if (st.y < u_radius5) {\n      color = u_color5;\n    } else if (st.y < u_point4.y - u_radius4) {\n      float alpha = (st.y - u_radius5) / (u_point4.y - u_radius4 - u_radius5);\n      color = mix(u_color5, u_color4, alpha);\n    } else if (st.y < u_point4.y + u_radius4) {\n      color = u_color4;\n    } else if (st.y < u_point3.y - u_radius3) {\n      float alpha = (st.y - u_point4.y - u_radius4) / (u_point3.y - u_radius3 - u_point4.y - u_radius4);\n      color = mix(u_color4, u_color3, alpha);\n    } else if (st.y < u_point3.y + u_radius3) {\n      color = u_color3;\n    } else if (st.y < u_point2.y - u_radius2) {\n      float alpha = (st.y - u_point3.y - u_radius3) / (u_point2.y - u_radius2 - u_point3.y - u_radius3);\n      color = mix(u_color3, u_color2, alpha);\n    } else if (st.y < u_point2.y + u_radius2) {\n      color = u_color2;\n    } else if (st.y < u_point1.y - u_radius1) {\n      float alpha = (st.y - u_point2.y - u_radius2) / (u_point1.y - u_radius1 - u_point2.y - u_radius2);\n      color = mix(u_color2, u_color1, alpha);\n    } else {\n      color = u_color1;\n    }\n\n    /*\n    if (d1 <= u_radius1) { // top\n      color = u_color1;\n    } \n    else if (d2 <= u_radius2) { // middle white\n      color = u_color2;\n    } else if (d3 <= u_radius3) {  // bottom\n      color = u_color3;\n    }\n    else {\n      highp float t1, t2, t3, sum;\n      t1 = max(1. /pow(d1 - u_radius1, 2.0), 0.);\n      t2 = max(1. / pow(d2 - u_radius2, 2.0), 0.);\n      t3 = max(1. / pow(d3 - u_radius3, 2.0), 0.0);\n      sum = (t1 + t2 + t3);\n      color = u_color1 * (t1 / sum) + u_color2 * (t2 / sum) + u_color3 * (t3 / sum);\n    }\n    */\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}