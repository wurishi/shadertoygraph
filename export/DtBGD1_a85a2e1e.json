{"ver":"0.1","info":{"id":"DtBGD1","date":"1673205123","viewed":178,"name":"Antipod - MAGFest #02","username":"Flopine","description":"One of the piece I made for ThronoCrigger's set at MAGFest 2023! ","likes":15,"published":1,"flags":32,"usePreview":0,"tags":["3d","raymarching","tunnel","repetition","chromatic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings, FabriceNeyret and Blackle for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 centered_uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n    vec3 rgb = vec3(texture(iChannel0, (uv*.99+.01)-length(centered_uv*0.9)*0.005).r,\n                     texture(iChannel0, (uv*.99+.01)-length(centered_uv*0.95)*0.002).g,\n                     texture(iChannel0, (uv*.99+.01)+length(centered_uv*0.92)*0.001).b\n                 );\n    \n    fragColor = vec4(sqrt(rgb), 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI acos(-1.)\n#define TAU (2.*PI)\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\n#define rep(p,c) p=mod(p,c)-c*.5\n#define od(p,d) (dot(p,normalize(sign(p)))-d)\n\n#define AAstep(thre, val) smoothstep(-.7,.7,(val-thre)/min(0.07,fwidth(val-thre)))\n#define dt(sp) fract(iTime*sp)\n\nvoid mo (inout vec2 p, vec2 d)\n{\n    p = abs(p)-d;\n    if(p.y>p.x) p=p.yx;\n}\n\nfloat box (vec3 p, vec3 c)\n{\n    vec3 q = abs(p)-c;\n    return min(0., max(q.x, max(q.y,q.z)))+length(max(q, 0.));\n}\n\nfloat SDF (vec3 p)\n{\n    p.yz*= rot(-atan(1./sqrt(2.)));\n    p.xz *= rot(PI/4.);\n        \n    p.z -= iTime*15.;\n    \n    float zid = floor(p.z/4.);\n    p.xy *= rot(sin(zid*.2+(dt(0.2)*TAU)));\n    mo(p.xy, vec2(2.5));\n    p.x -= 5.;\n    \n    rep(p.z, 4.);\n    p.xy *= rot(dt(0.2)*TAU);\n    \n    return min(box(p,vec3(1.)), od(p,1.2));\n}\n\nvec3 gn (vec3 p, vec2 eps)\n{return normalize(SDF(p)-vec3(SDF(p-eps.xyy),SDF(p-eps.yxy),SDF(p-eps.yyx)));}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n    vec3 ro = vec3(0.001, 0.1, -5.), rd=normalize(vec3(uv, 1.)),p=ro,\n    col=vec3(0.);\n    \n    bool hit=false;\n    for(float i=0.; i<100.; i++)\n    {\n        float d =  SDF(p);\n        if (d<0.01)\n        {\n            hit=true; break;\n        }\n        p += d*rd*.5;\n    }\n\n    if (hit)\n    {\n        vec3 n1 = gn(p,vec2(1e-1,0.));\n        vec3 n2 = gn(p,vec2(1e-3,0.));\n        // thanks 0b5vr for this trick <3\n        float edgemask = clamp(AAstep(0.18,length(n1-n2)),0.,1.);\n        col += edgemask;\n    }\n\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}