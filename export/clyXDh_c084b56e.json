{"ver":"0.1","info":{"id":"clyXDh","date":"1686058778","viewed":61,"name":"Warping square","username":"ReasonMaster","description":"Warping square with signed distance function","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["sdf","warping","warp","box","sd","signeddistancefunction","sdfbox","sdfsquare"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette( in float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.);\n    vec3 d = vec3(0.30, 0.20, 0.20);\n    \n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    \n    float d0 = length(uv);\n    \n    \n    float d = length(uv);\n    \n    float box = smoothstep(.01, \n                            (d * 3.), \n                            sdBox(vec2(uv.x + (cos((iTime + (d0 / 3.)) * .8) / 4.), \n                                       uv.y + (sin((iTime + (d0 / 3.)) * .8) / 4.)), \n                                  vec2(.1, .1)));\n    vec3 paletteCol = palette(box * 5.);\n                                  \n    box = 0.02 / box;\n    box = fract(box * 8. * (sin(iTime * .5) + 2.));\n    \n    vec3 col = vec3(box);\n    paletteCol = fract(paletteCol * (sin(iTime * .5) + 2.));\n    col *= paletteCol * 1.5;\n    \n\n\n    // Output to screen\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}