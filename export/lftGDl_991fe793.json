{"ver":"0.1","info":{"id":"lftGDl","date":"1712306801","viewed":66,"name":"A3-Snowfall","username":"adnankhan","description":"inspired by https://www.shadertoy.com/view/DlGczD","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["snowflakes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define TILES 20.0\n\n// 2D random function for variability\nfloat random(vec2 uv) {\n    return fract(sin(dot(uv, vec2(135.0, 263.0))) * 1e4);\n}\n\n// Draws snowflakes with varying sizes, wind effects, and color variations\nvec4 drawSnow(vec2 curid, vec2 uv, vec4 fragColor, float r, float c, float layer) {\n    float maxoff = 2.0 / TILES; // Max offset a particle can have\n\n    // Variable wind effect based on layer\n    float windStrength = sin(iTime * 0.5 + layer * 2.0) * 0.05 * layer;\n\n    for (int x = -2; x <= 1; x++) {\n        for (int y = -2; y <= 0; y++) {\n            float rad = (1.0 / (TILES * 5.0)) * r; // Default radius\n            vec2 id = curid + vec2(x, y);\n            vec2 pos = id / TILES;\n            float xmod = mod(random(pos), maxoff);\n            pos.x += xmod;\n            pos.y += mod(random(pos + vec2(4.0, 3.0)), maxoff);\n            rad *= mod(random(pos), 1.0);\n            pos.x += windStrength + 0.5 * (maxoff - xmod) * sin(iTime * r + random(pos) * 100.0); // Enhanced wind effect\n            \n            float len = length(uv - pos);\n            float v = smoothstep(0.0, 1.0, (rad - len) / rad * 0.75);\n            \n            // Color variation based on layer\n            vec3 colorVariation = vec3(c) * (0.9 + 0.1 * sin(layer * pos.y * 100.0));\n            fragColor = mix(fragColor, vec4(colorVariation, 1.0), v);\n        }\n    }\n    \n    return fragColor;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.x;\n    uv.y -= 0.3;\n\n    vec3 col = mix(vec3(0.0, 0.45, 0.85), vec3(1.0), -0.3 - uv.y);\n    fragColor = vec4(col, 1.0);\n\n    vec2 uvNorm = fragCoord.xy / iResolution.xy;\n    vec2 uvog = fragCoord.xy / iResolution.y;\n    uv = uvog;\n\n    // Wind effect modification based on layer\n    uv += 0.2 * vec2(sin(iTime * 0.3), iTime);\n    vec2 curid = floor(uv * TILES) + vec2(0.5);\n    fragColor = drawSnow(curid, uv, fragColor, 1.0, 0.9, 1.0);\n\n    uv = uvog + 0.1 * vec2(sin(iTime * 0.2 - 100.0), iTime + 100.0);\n    curid = floor(uv * TILES) + vec2(0.5);\n    fragColor += drawSnow(curid, uv, vec4(0), 0.75, 0.45, 2.0);\n\n    uv = uvog + 0.05 * vec2(sin(iTime * 0.1 - 150.0), iTime + 150.0);\n    curid = floor(uv * TILES) + vec2(0.5);\n    fragColor += drawSnow(curid, uv, vec4(0), 0.5, 0.225, 3.0);\n}\n\n\n","name":"Image","description":"","type":"image"}]}