{"ver":"0.1","info":{"id":"lt2Sz1","date":"1441753431","viewed":210,"name":"Temple Distortion shader","username":"colinwackl","description":"stuff","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["distort"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"float barrelPower = 10.1;\nfloat chromaticStrength = 0.0;\nfloat waveWidth = 0.25;\nfloat waveRadius = 0.75;\nfloat subWaves = 1.0;\n\nvec2 position1 = vec2(0.0, 0.0);//mouse;\nvec2 position2 = vec2(0.5, 0.5);\nvec2 position3 = vec2(-0.5, -0.5);\nvec2 position4 = vec2(0.0, 0.0);\n\nvec2 distort(vec2 vector, vec2 position)\n{\n    float aspect = iResolution.x / iResolution.y;\n    vector.y *= aspect;\n    //position.y /= aspect;\n    \n\tfloat theta = atan(vector.y, vector.x);\n\tfloat radius = length(vector);\n\tradius = pow(radius, barrelPower);\n\tvector.x = radius * cos(theta);\n\tvector.y = radius * sin(theta);\n \n    //\n\t\n    return 0.5 * ((position - vector) + 1.0);\n}\n\nvoid distortChromaticUV(vec2 uv, vec2 position, out vec2 redUV, out vec2 greenUV, out vec2 blueUV)\n{\n    vec2 vector = 2.0 * uv - 1.0;\n    vector = position - vector;\n    \n    float aspect = iResolution.x / iResolution.y;\n    vector.y /= aspect;\n    //position.y /= aspect;\n    \n    float distance = length(vector) / 1.0;\n    \n    vec2 mouse = 2.0 * (iMouse.xy / iResolution.xy) - 1.0;\n    \n    //float x = (2.0 * waveRadius -1.0) + (1.0 - waveWidth);\n    float x = mouse.x + (1.0 - waveWidth);\n    x = sin(iTime);\n    \n    float mask = distance - x;\n    mask = sin(3.14159265359 / waveWidth * clamp(mask, -waveWidth, waveWidth));\n                   \n    mask = clamp(mask, 0.0, 1.0);\n    float subWaveMask;\n    subWaveMask = distance - (mouse.x / 1.0);\n    subWaveMask = sin(3.14159265359 * (subWaves / waveWidth * 2.0) * subWaveMask);\n\t    \n   \t//distance = min(mask, distance);\n    distance = clamp(distance * 0.5, 0.0, 1.0);\n    mask = mask * (1.0 - pow(distance,1.0));\n    \n\tvec2 modifiedUV;\n    vec2 distortedUV = distort(vector, position);\n    \n\tmodifiedUV = mix(distortedUV, uv, mask);\n    modifiedUV = mix(modifiedUV, uv, 1.0 - mask);\n\n\t//modifiedUV.y = 1.0 - modifiedUV.y;\n    \n    float redOffSet = 1.0 - mask;\n    redOffSet = redOffSet;// / iResolution.y;\n    float blueOffset = mask;// / iResolution.y;\n    \n\tvec2 modifiedUVRed = mix(distortedUV, uv, mask + chromaticStrength);\n\tmodifiedUVRed = mix(modifiedUVRed, uv, 1.0 - mask);\n    //modifiedUVRed.y = 1.0 - modifiedUVRed.y;\n    \n   \tvec2 modifiedUVBlue = mix(distortedUV, uv, mask - chromaticStrength);\n\tmodifiedUVBlue = mix(modifiedUVBlue, uv, 1.0 - mask);\n    //modifiedUVBlue.y = 1.0 - modifiedUVBlue.y;\n    \n    redUV = uv - modifiedUVRed;\n    greenUV = uv - modifiedUV;\n    blueUV = uv - modifiedUVBlue;\n    \n    //redUV = vec2(mask, mask);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t/*vec2 vector = 2.0 * uv - 1.0;\n\tvector = mouse - vector;\n\tfloat distance = length(vector);*/\n    \n    /*float mask = distance - (iTime / 1.0);\n    mask = sin(4.0 * mask);\n    \n    distance = distance - (iTime / 1.0);\n    distance = pow(sin(50.0 * distance), 3.0);\n\tdistance = distance;\n    \n    mask = clamp(mask, 0.0, 1.0);\n    //mask *= distance;\n   \tdistance = min(mask, distance);\n    \n\tvec2 modifiedUV;\n    vec2 distortedUV = distort(vector);\n    \n\tmodifiedUV = mix(distortedUV, uv, distance);\n    modifiedUV = mix(modifiedUV, uv, 1.0 - mask);\n\n\tmodifiedUV.y = 1.0 - modifiedUV.y;\n    \n    float redOffSet = 1.0 - mask;\n    redOffSet = redOffSet / iResolution.y;\n    float blueOffset = mask / iResolution.y;\n    \n\tvec2 modifiedUVRed = mix(distortedUV, uv, distance + chromaticStrength);\n\tmodifiedUVRed = mix(modifiedUVRed, uv, 1.0 - mask);\n    modifiedUVRed.y = 1.0 - modifiedUVRed.y;\n    \n   \tvec2 modifiedUVBlue = mix(distortedUV, uv, distance - chromaticStrength);\n\tmodifiedUVBlue = mix(modifiedUVBlue, uv, 1.0 - mask);\n    modifiedUVBlue.y = 1.0 - modifiedUVBlue.y;\n    \n    float fragColorR = texture(iChannel0, modifiedUVRed).x;\n\tfloat fragColorG = texture(iChannel0, modifiedUV).y;\n    float fragColorB = texture(iChannel0, modifiedUVBlue).z;\n\n    fragColor = vec4(fragColorR, fragColorG, fragColorB, 1.0);\n        \n    //mask = 1.0 - mask;\n    mask = distance;\n    \n    //fragColor = vec4(mask, mask, mask, 1.0);*/\n    \n    vec2 redOffset, greenOffset, blueOffset;\n    vec2 finalRedOffset, finalGreenOffset, finalBlueOffset;\n    \n    \n    distortChromaticUV(uv, position1, redOffset, greenOffset, blueOffset);\n    \n \tfinalRedOffset += redOffset;\n    finalGreenOffset += greenOffset;\n    finalBlueOffset += blueOffset;\n    \n    distortChromaticUV(uv, position2, redOffset, greenOffset, blueOffset);\n    \n \tfinalRedOffset += redOffset;\n    finalGreenOffset += greenOffset;\n    finalBlueOffset += blueOffset;\n    \n    distortChromaticUV(uv, position3, redOffset, greenOffset, blueOffset);\n    \n \tfinalRedOffset += redOffset;\n    finalGreenOffset += greenOffset;\n    finalBlueOffset += blueOffset;\n    \n    \n    /*distortChromaticUV(uv, position2, redOffset, greenOffset, blueOffset);\n    \n \tfinalRedOffset += redOffset;\n    finalGreenOffset += greenOffset;\n    finalBlueOffset += blueOffset;*/\n    \n    //uv.y = 1.0 - uv.y;\n    \n    float fragColorR = texture(iChannel0, uv + finalRedOffset).x;\n\tfloat fragColorG = texture(iChannel0, uv + finalGreenOffset).y;\n    float fragColorB = texture(iChannel0, uv + finalBlueOffset).z;\n\n    fragColor = vec4(fragColorR, fragColorG, fragColorB, 1.0);\n            \n    \n   \t//fragColor = vec4(finalRedOffset.x, finalRedOffset.x, finalRedOffset.x, 1.0);\n}","name":"Image","description":"","type":"image"}]}