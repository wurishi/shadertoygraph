{"ver":"0.1","info":{"id":"NdXBWB","date":"1645295314","viewed":195,"name":"2D supershape sdf ","username":"dsa8","description":"copied IQ's work to help me visualize the sdf of 2D supershapes","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","raymarching","sdf","supershape"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Huge shout-out to the great Inigo Quilez for all the resources and tutorials!!!\n\n// The MIT License\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Signed distance to a supershape\n\n// List of some other 2D distances: https://www.shadertoy.com/playlist/MXdSRf\n//\n// and iquilezles.org/articles/distfunctions2d\n\n#define TAU 6.2831855\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 3   // make this 2 or 3 for antialiasing\n#endif\n\n#define ZERO (min(iFrame,0))\n\n// Rotation matrix 2D\nmat2 rotate(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat2(\n        vec2(c, -s),\n        vec2(s, c)\n    );\n}\n\nfloat gielisFormula(float teta, vec3 n, vec3 abm){\n    float b1 = pow(abs(cos((abm.z*teta)/4.0) / abm.x), n.y);\n    float b2 = pow(abs(sin((abm.z*teta)/4.0) / abm.y), n.z);\n    return pow(b1+b2, -1.0/n.x);\n}\n\nfloat calc2DPointPolarAngle( in vec2 point){\n    return atan(point.y/point.x);\n}\n\nfloat sdSuperShape2D( in vec2 samplePoint) {\n    samplePoint *= rotate(mix(0.0, TAU, cos(iTime)/2.0 + 0.5));\n    float polarAngle = calc2DPointPolarAngle(samplePoint);\n\n    float n1 = 5.0;\n    float n2 = 1.0;\n    float n3 = 10.0;\n    float m = 8.0;\n    float a = 0.8;\n    float b = 0.8;\n    n1 = mix(3.0, 10.0, cos(iTime)/2.0 + 0.5);\n    n2 = mix(10.0, 1.0, cos(iTime)/2.0 + 0.5);\n    n3 = mix(5.0, 10.0, cos(iTime)/2.0 + 0.5);\n    m = mix(1.0, 20.0, cos(iTime*2.0)/2.0 + 0.5);\n    float r = gielisFormula(polarAngle, vec3(n1, n2, n3), vec3(a, b, m));\n    \n    float scale = 0.4;\n    \n    return length(samplePoint)-(r*scale);\n}\n\nvec3 colorCorrection(in vec3 col){\n    // gain and lift\n    float gain = 1.8;\n    float lift = 0.25;\n    col = (col * (gain - lift)) + lift;        \n    \n    // gamma\n    float gammaInv = 1.0;\n    col = pow(col, vec3(gammaInv));\n    \n    // contrast\n    float contrast = -1.2;\n    //col -= (col*(1.0+contrast)) - (contrast*0.5); // fixme\n    \n    // saturation\n    vec3 grayCol = vec3(col.x*0.299 + col.y*0.587 + col.z*0.114);\n    float sat = 2.8;\n    col = sat * col + (1.0 - sat) * grayCol;\n    \n    // expansion (inverse gain and lift)\n    float high = 1.1;\n    float low = 0.15;\n    col = (col-low)/(high-low);\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 tot = vec3(0.0);\n#if AA>1\n    for( int m=ZERO; m<AA; m++ )\n    for( int n=ZERO; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (2.0*(fragCoord+o)-iResolution.xy)/iResolution.y;\n#else    \n        vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n#endif\n        float scale = 0.75;\n        float ss = sdSuperShape2D(p*scale);\n\n        //vec3 coloInSS = mix(vec3(1.0), vec3(0.), clamp(abs(ss), 0., 1.));\n        vec3 coloInSS = vec3(0.65,0.85,1.0);\n        //vec3 colorOutSS = mix(vec3(1.0), vec3(0.), clamp(abs(ss), 0., 1.));\n        vec3 colorOutSS = vec3(0.9,0.6,0.3);\n        vec3 col = (ss>0.0) ? colorOutSS : coloInSS;\n\n        col *= 1.0 - exp(-0.8*abs(ss));\n        \n        float lineFreq = 180.0 * (cos(iTime*2.)/2.0 + 0.5) + 120.0;\n        float lineDef = 1.0;\n        col *= 0.8 + lineDef*cos(lineFreq*ss);\n        \n        float ssOutlineThickness = 0.0;\n        vec3 ssOutlineColor = vec3(0.0);\n        col = mix( col, ssOutlineColor, 1.0-smoothstep(0.00,ssOutlineThickness,abs(ss)) );\n\n        col = colorCorrection(col);\n        \n        tot += col;\n#if AA>1\n    }\n    tot /= float(AA*AA);\n#endif\n\n\tfragColor = vec4(tot,1.0);\n}","name":"Image","description":"","type":"image"}]}