{"ver":"0.1","info":{"id":"XfXBWs","date":"1724474735","viewed":39,"name":"cofinality_1","username":"cofinality","description":"first shader","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractals"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// cosine based palette, 4 vec3 params\nvec3 palette( float t)\n{\nvec3 a = vec3(0.500, 0.508, 0.500);\nvec3 b = vec3(-0.462, -0.092, -0.242);\nvec3 c = vec3(2.008, 0.858, 1.048);\nvec3 d = vec3(-1.372, 0.148, 1.2987);\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv =(fragCoord*2.0-iResolution.xy)/iResolution.y;\n    vec2 uv0 = uv;\n   vec3 finalColor = vec3(0.0);\n    \n    for(float i = 0.0; i < 4.0; i++){\n    uv = fract(uv*1.69)-0.5;\n    \n    float d = length(uv)*exp(-length(uv0));\n    vec3 col =palette(length(uv0) +i*0.6+ iTime*0.6);\n    d=abs(sin(d*8. + iTime))/8.;\n   // d=smoothstep(0.0,0.4,d);\n    d=pow(0.01/d,1.25);\n    finalColor += col*d;\n    };\n    \n    fragColor =vec4(finalColor,1.0);\n    \n    \n}","name":"Image","description":"","type":"image"}]}