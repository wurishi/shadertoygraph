{"ver":"0.1","info":{"id":"wdlfW4","date":"1588365993","viewed":418,"name":"Graph Shader","username":"enslow","description":"currently, this shader calculates the distance of all the edges which is pretty inefficient. I could theoretically lower the runtime to O(n) if i had some function to detect if any points were in some radius, but I'll do that later.\n\n","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["dotshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define num 27\n#define MAX_DIST 1.7\n\n//Segment function credit: https://www.shadertoy.com/view/MlcGDB\n//User: gPlatl\n\nstruct circle\n{\n    float r;\n\tvec2 p;\n};\n    \nfloat segment(vec2 P, vec2 A, vec2 B, float r) \n{\n    vec2 g = B - A;\n    vec2 h = P - A;\n    float d = length(h - g * clamp(dot(g, h) / dot(g,g), 0.0, 1.0));\n\treturn smoothstep(r, 0.5*r, d);\n}\n    \n    \nfloat hash1(int x)\n{\n    return sign(sin(float(x)*432.))*fract(sin(float(x)*15.4321));\n}\nfloat hash2(int x)\n{\n    return sign(sin(float(x)*273.))*fract(sin(float(x)*3.482));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = 5.*(fragCoord-0.5*iResolution.xy)/iResolution.y;\n    \n    vec3 col = vec3(0.);    \n    float t = iTime/3.;\n    \n    \n    circle[num] v;\n    for (int i=0;i<num;i++)\n    {\n        v[i].r = 0.01;\n        v[i].p = vec2( cos(t+float(i*24)),sin(t+float((i)*32)) ) + vec2(hash1(i),hash2(i));\n        for (int j=0;j<i;j++)\n        {\n            float d = distance(v[i].p,v[j].p);\n            if (d > MAX_DIST)\n            {\n                continue;\n            }\n            float intensity = segment(uv,v[i].p,v[j].p,0.01)*(-exp(d-MAX_DIST)+1.);\n            col = col+vec3(intensity*sin(iTime/3.14),intensity/3.,intensity*3.);\n        }\n        if (length(v[i].p-uv) < v[i].r)\n        {\n            //col = col+vec3(1.0);\n        }\n    }\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}