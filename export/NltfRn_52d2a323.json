{"ver":"0.1","info":{"id":"NltfRn","date":"1665036023","viewed":78,"name":"Distance - Chebyshev","username":"kynd","description":"drawing a circle","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"NtGyDV","parentname":"Distance - Manhattan"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Calculate Chebyshev distance between two 2D points\nfloat d(vec2 p0, vec2 p1) {\n    return max(abs(p0.x - p1.x), abs(p0.y - p1.y));\n}\n\n// Main rendering function\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Convert pixel coordinates to a normalized space centered around the screen\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / min(iResolution.x, iResolution.y) * 10.0;\n\n    // Calculate Chebyshev distance from screen center\n    float distance = d(vec2(0.0), uv);\n\n    // Create pattern of concentric squares based on Chebyshev distance\n    float lev = step(0.5, fract(distance));\n\n    // Set pixel color (black or white based on the pattern)\n    fragColor = vec4(vec3(lev), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}