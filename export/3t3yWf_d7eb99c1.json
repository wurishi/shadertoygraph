{"ver":"0.1","info":{"id":"3t3yWf","date":"1609978391","viewed":107,"name":"warp neon","username":"tono","description":"neon","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["neon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float pi = acos(-1.);\n\nmat2 rot(float a){return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nfloat map(vec3 p)\n{\t\n    vec3 p2 = p;\n    float o = 100.;\n    \n    p.z += iTime;\n   // for(float i = 0. ; i < 5. ; i+= 1.)\n    {\n       // p = p2;\n    \tp.xz += vec2(0.5);\n    \tp.xy *= rot( p.z/26.);\n    \tp.xy -= vec2(pi)/2.;\n    \tp = sin(p);\n   \t \tp = clamp(p ,.1 ,3.);\n   \t \tp = abs(p) - 1.1;\n    \to = min( length(p) - 1.,o);\n    }\n   \n    o *= .8; \n    return o;\n}\n\nfloat march(vec3 cp,vec3 rd)\n{\n    float depth = 0.;\n    for(int i = 0; i < 198 ;i++)\n    {\n        vec3 rp = cp + rd * depth;\n        float d = map(rp);\n        if(abs(d) < 0.01)\n        {\n            return depth;\n        }\n        if((depth) > 40.){break;}\n        depth += d;\n    }\n    depth *= -1.;\n    return depth;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n\tvec3 col = vec3(0.);\n    \n    vec3 forward = vec3(0.,0.,0);\n    vec3 cp = vec3(0.,0.,-3.) + forward;\n   // cp.x += sin(time) * 1.;\n    vec3 target = vec3(0.) + forward;\n    vec3 cd = normalize(target - cp);\n    vec3 cu = normalize(cross(cd,vec3(0.,1.,0.)));\n    vec3 cs = normalize(cross(cd,cu));\n    \n    //float fov = mix(1.5 - dot(p,p),1. , abs(sin(time/10.))) ; \n    float fov = .5;\n    vec3 rd = normalize(cd* fov + cs * p.x + cu * p.y);\n    float d = march(cp,rd);\n    if(d > 0.)\n    {\n        vec2 e = vec2(0.,0.01);\n        vec3 pos = d * rd + cp;\n        vec3 N = -normalize(map(pos) - vec3(map(pos - e.xyy),map(pos - e.yxy),map(pos - e.yyx)));\n        vec3 sun = normalize(vec3(2.,4.,8.));\n        sun.xz *= rot(iTime);\n        float diff = max(dot(sun,N),0.);\n        col = diff * vec3(.8,.3,.6);\n        float sp = max(0.,dot(reflect(sun , N),cd ) ) * 1.1;\n        col = diff * vec3(.1,.1,.1) + pow(sp,24.) * vec3(1.);\n        float shadow = step(march(pos + N * 0.02,N),0.);\n        \n        col *= shadow;\n        //col += vec3(1.,0.,0.) * max(floor( sin(d - time * 4.) + .1),0.);\n        col += max(floor( sin(random(floor(pos.xy/pi))*15. + random(floor(pos.xy * pi))*3. + pos.z - iTime * vec3(2.,1.,2.)/2.)-.6 + .61),0.);\n        float dd =1. - exp(d * d * d * -.0003);\n        col = mix(col,vec3(0.,0.,0.),dd);\n    }\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}