{"ver":"0.1","info":{"id":"tlV3zK","date":"1579403612","viewed":56,"name":"Mandelbrot Vanish","username":"sbrown2","description":"My attempt at a mandelbrot implementation. ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv -=.5;\n    uv.x*=iResolution.x/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n    \n    //play around to get the right camera. (big zoom)\n    float zoom = .01;\n    uv*=100.;\n    uv.x+=0.;\n    vec2 start = uv*zoom*3.;\n    start+=vec2(-.4,.4);\n    \n    vec2 z = vec2(0.);\n    \n    //control how crisply the set forms and how smoothly it animates\n    float max_steps = 100.*abs(cos(iTime));\n    float iter = 0.;\n    \n    \n    //MANDELBROT ALORITHM F(X) = z^2+c z,c in set of complex nums\n    for(float i = 0.; i < max_steps; i++){\n    \tz = start+vec2(z.x*z.x-z.y*z.y,2.*z.x*z.y);\n        if(length(z) > 3.){break;}\n        iter++;\n    }\n    \n    float f = iter/max_steps;\n    // Time varying pixel color\n\tvec3 col = vec3(f)*vec3(cos(f),abs(sin(f)),abs(sin(iTime)));\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}