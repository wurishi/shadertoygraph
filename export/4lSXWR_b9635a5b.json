{"ver":"0.1","info":{"id":"4lSXWR","date":"1447584959","viewed":246,"name":"Simple sphere dojo","username":"pmilian","description":"Simple shader to learn the basics of GLSL by displaying a sphere through ray marching and adding some lighting","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sphereraymarchinglighting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"const float zNear = 1.0;\nconst float zFar = 400.0;\n\nconst float epsilon = 0.01;\n\nconst vec3 sphereCenter = vec3(0.5, 0.5, 100.0);\nconst float sphereRadius = 25.0;\n\n\nvec3 computeColor(in vec3 m, in vec3 ray, in vec3 normal, in vec3 light) {\n    vec3 baseColor = vec3(1.0, 0.0, 0.0);\n    \n    vec3 diffuseColor = vec3(0.5, 0.5, 0.5);\n    vec3 specularColor = vec3(0.3, 0.3, 0.3);\n    vec3 ambientColor = vec3(0.2, 0.2, 0.2);\n    \n    vec3 lightRay = normalize(m - light);\n    \n    float diffuseFactor = dot(normal, lightRay);\n    \n    vec3 ambient = baseColor * ambientColor;\n    vec3 diffuse = vec3(0.0, 0.0, 0.0);\n    vec3 specular = vec3(0.0, 0.0, 0.0);\n    \n    if (diffuseFactor > 0.0) {\n        diffuse = baseColor * diffuseColor * diffuseFactor;\n        \n        float shininess = 20.0;\n        float specularFactor = dot(ray, reflect(lightRay, normal));\n        if (specularFactor > 0.0) {\n       \t\tspecular = specularColor * pow(max(0.0, specularFactor), shininess);\n        }\n    }\n                             \n\treturn ambient + diffuse + specular;\n}\n\nfloat map(in vec3 m, out vec3 normal) {\n    normal = normalize(m - sphereCenter);\n \treturn length(sphereCenter - m) - sphereRadius;\n}\n\n\nbool raymarch(in vec3 origin, in vec3 dir, out vec3 normal, out vec3 hit) {\n\tfloat totalDist = 0.0;\n    vec3 m = vec3(origin);\n    \n    for (int i = 0; i < 50; i++) {\n        float dist = map(m, normal);\n        \n        totalDist += dist;\n        \n        if (dist < epsilon) {\n            hit = origin *  dir * totalDist;\n        \treturn true;   \n        }\n        \n        if (totalDist > zFar) {\n            return false;\n        }\n        \n        \n        m += dir * dist;\n    }\n    return false;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= vec2(0.5, 0.5);\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 viewportCoord = vec3(uv, zNear);\n    vec3 camera = vec3(0.0, 0.0, 0.0);\n    \n    vec3 ray = normalize(viewportCoord - camera);\n    vec3 normal = vec3(0.0, 0.0, 0.0);\n    vec3 light = sphereCenter - vec3(cos(iTime) * 30.0, 5.0, 100.0 + sin(iTime) * 20.0);\n    vec3 hit;\n\n    if (raymarch(camera, ray, normal, hit)) {\n        vec3 color = computeColor(hit, ray, normal, light);\n   \t\tfragColor = vec4(color, 1);     \n    } else {\n     \tfragColor = vec4(0.0, 0.0, 0.0, 1);   \n    }\n}","name":"Image","description":"","type":"image"}]}