{"ver":"0.1","info":{"id":"MsBfDG","date":"1501888251","viewed":161,"name":"The walking polygons","username":"rubelson","description":"Test of rotation of polygons","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["rotation","polygon","df"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float regularPolygon(float parts, float radius, float blur, vec2 pos, float rotate, vec2 p)\n{\nfloat pi = 3.14159265;\nfloat a = 2.0 * pi * (1.0 / parts);\nfloat size = radius * cos(a /2.0);\nfloat ca = cos(a);\nfloat sa = sin(a);\nmat2 rmat = mat2(ca, -sa, sa, ca);\nca = pi + rotate -a;\nvec2 lp = vec2(sin(ca), cos(ca));\nvec2 addv = lp;\nfloat r = 0.0;\n\nfor(float i=0.; i<=100.; i++)\n\t{\n\taddv = rmat * addv;\n\tr = max(r, smoothstep(size, size+blur, dot(p - pos, normalize(addv))));\n    if(i>parts) break; //and how differently?    \n\t}\nreturn 1. - r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\nconst float n = 10.;\nfloat a = 0.14;\nvec2 p = fragCoord.xy / iResolution.x; \nfloat t = fract(iTime/2.);\nfloat pi = 3.14159265;\nfloat p2 = pi*2.;\nvec3 color[6];\ncolor[0]=vec3(1.,0.,0.);color[1]=vec3(0.,1.,1.);color[2]=vec3(0.,0.,1.);\ncolor[3]=vec3(1.,0.,1.);color[4]=vec3(0.,1.,0.);color[5]=vec3(1.,1.,0.);\nfloat blur = 0.0;\nvec3 col = vec3(0.);\n\nfor(float i=n-1.; i>=0.; i--)\n  {\n  float r = a / (2.*sin(pi/(i+3.)));\n  float alf = p2 * (t-.5)/(i+3.);\n  float rad = p2 * t/(i+3.);\n  vec2 pos = vec2(.5 + a*(.5-t) + r*sin(alf), .01 + r*cos(alf));\n  col = mix(col,color[int(mod(i,6.))],regularPolygon(i+3., r, blur, pos, rad, p));\n  }\nfragColor = vec4(col,1.);\n}\n","name":"Image","description":"","type":"image"}]}