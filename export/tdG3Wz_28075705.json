{"ver":"0.1","info":{"id":"tdG3Wz","date":"1570059028","viewed":228,"name":"Grid of Stars","username":"specialsaucewc","description":"Tutorial done","likes":4,"published":1,"flags":64,"usePreview":0,"tags":["grid","space","learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"MtXSDM","filepath":"https://soundcloud.com/eberstark/fading","previewfilepath":"https://soundcloud.com/eberstark/fading","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define S(a, b, t) smoothstep(a, b, t)\n#define STAR_SPEED .5\n#define TWINKLE_INT 12.\n#define TWINKLE_SPEED 0.5\n#define TWINKLE_MIN 0.1\n#define GRID_MAX_SIZE 15.\n#define GRID_MIN_SIZE .5\n#define LAYER_SPEED .07\n#define LAYER_COUNT 5.\n#define SOUND_BOOST 1.2\n\nfloat N21(vec2 p) {\n    p = fract(p*vec2(233.34, 851.73));\n    p += dot(p, p+23.45);\n    return fract(p.x * p.y);\n}\n\nvec2 N22(vec2 p) {\n    float n = N21(p);\n    return vec2(n, N21(p+n));\n}\n\nfloat DistLine(vec2 p, vec2 a, vec2 b) {\n    vec2 pa = p-a;\n    vec2 ba = b-a;\n    float t = clamp(dot(pa, ba)/ dot(ba, ba), 0., 1.);\n    return length(pa - ba*t);\n}\n\nvec2 GetPos(vec2 id, vec2 offs) {\n    vec2 r = N22(id + offs)*iTime;\n    return offs + sin(r)*STAR_SPEED;\n}\n\nfloat DrawLine(vec2 p, vec2 a, vec2 b) {\n    float d = DistLine(p, a, b);\n    float m = S(.03, .01, d);\n    float d2 = length(a-b);\n    m *= S(1.2, .5, d2) + S(.05, .03, abs(d2-.75));\n    return m;\n}\n\nfloat Layer(vec2 uv) {\n    float m = 0.;\n    //make 5x5 grid centered\n    vec2 gv = fract(uv)-.5;\n    vec2 id = floor(uv);\n    \n    \n    vec2 p[9];\n    int i = 0;\n    //get random point in each 3x3 grid cell\n    for (float y=-1.; y <= 1.; y++) {\n        for (float x=-1.; x <= 1.; x++) {\n            p[i] = GetPos(id, vec2(x,y));\n            i++;\n        }\n    }\n    \n    float t = iTime * TWINKLE_SPEED;\n    \n    for (int i=0; i<9; i++) {\n        m += DrawLine(gv, p[4], p[i]);\n        \n        //point twinkle\n        vec2 dFromP = (p[i] - gv) * TWINKLE_INT;\n        //inverse square approximation\n        float sparkle = 1. / length(dot(dFromP, dFromP));\n        \n        //animate\n        m += sparkle*(sin(t+fract(p[i].x)*10.)*(.5-TWINKLE_MIN/2.) + (.5+TWINKLE_MIN/2.));\n    }\n    m += DrawLine(gv, p[1], p[3]);\n    m += DrawLine(gv, p[1], p[5]);\n    m += DrawLine(gv, p[5], p[7]);\n    m += DrawLine(gv, p[3], p[7]);\n    return m;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -.5 to .5)\n    vec2 uv = (fragCoord - .5 * iResolution.xy)/iResolution.y;\n    //Normalized mouse coord from -.5 to .5\n    vec2 mouse = (iMouse.xy / iResolution.xy)-.5;\n    vec3 col = vec3(0);\n    float gradient = uv.y;\n    \n    float m = 0.;\n    float t = iTime*LAYER_SPEED;\n    float s = sin(t);\n    float c = cos(t);\n    mat2 rot = mat2(c, -s, s, c);\n    uv *= rot;\n    mouse *= rot;\n    \n    for (float i=0.; i <= 1.; i+=1./LAYER_COUNT) {\n        float z = fract(i+t);\n        float size = mix(GRID_MAX_SIZE, GRID_MIN_SIZE, z);\n        float fade = S(0., .5, z) * S(1., .8, z);\n        m += Layer(uv*size + i*20. + mouse) * fade;\n    }\n    \n    \n    vec3 base = sin(t*5.*vec3(.345, .456, .678))*.4 + .6;\n    col = m*base;\n    \n    float fft = texelFetch( iChannel0, ivec2(.7, 0), 0).x;\n    gradient *= fft*SOUND_BOOST;\n    col -= gradient * base;\n    \n    //if (gv.x > .48 || gv.y > .48) col = vec3(1,0,0);    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}