{"ver":"0.1","info":{"id":"XttSR2","date":"1480619940","viewed":153,"name":"#Devember 2016 - day 00","username":"theGiallo","description":"Moving the first steps into Shadertoy.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["learning","devember"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SQRT2 1.4142135623730950488016887242096980785696\n#define PI    3.1415926535897932384626433832795\n#define HPI   1.57079632679489661923132169\n#define QPI   0.785398163397448309615660845819875721\n#define TAU   6.283185307179586476925286766559\n\nfloat\nmanhattan( vec2 p )\n{\n    p = abs ( p );\n    float ret = p.x + p.y;\n    return ret;\n}\nfloat\nmanhattan( vec2 p0, vec2 p1 )\n{\n    float ret;\n    \n    vec2 d = abs ( p1 - p0 );\n    ret = d.x + d.y;\n    \n    return ret;\n}\nvec4\ncircle( vec4 color, vec2 pos, float radius, float border_width, vec2 point )\n{\n    vec4 ret = vec4(0);\n    color.rgb *= color.a;\n    \n    float dist = length( point - pos );\n    ret = color * (1.0 - smoothstep( radius, radius + border_width, dist ) );\n    \n    return ret;\n}\nvec4\nsquare( vec4 color, vec2 pos, float side, float border_width, float rot_rad, vec2 point )\n{\n    vec4 ret = vec4(0);\n    color.rgb *= color.a;\n    \n    float max_d = SQRT2 * side;\n    vec2 rd = point - pos;\n    float tot_rad = QPI + rot_rad;\n    vec2 rd_rot;\n    rd_rot.x = rd.x * cos( tot_rad ) + rd.y * sin( tot_rad );\n    rd_rot.y = rd.x * sin( tot_rad ) - rd.y * cos( tot_rad );\n    float dist = manhattan( rd_rot );\n    ret = color * (1.0 - smoothstep( max_d, max_d + border_width, dist ) );\n    \n    return ret;\n}\n\n// NOTE(theGiallo): pre-multiplied alpha\nvoid\nblend_pma( inout vec4 dst, in vec4 src )\n{\n    dst.rgb = src.rgb + dst.rgb * ( 1.0 - src.a );\n    dst.a = min( 1.0, dst.a + src.a );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n\tvec2 p = ( 2.0 * fragCoord.xy - iResolution.xy ) / min( iResolution.y, iResolution.x );\n    vec4 col = vec4(0);\n    \n    vec4 c;\n    c = square( vec4(0.1,0.4,0.7,1.0), vec2(-0.75,0.5), 0.15, 0.01, iTime * 0.1, p );\n    blend_pma( col, c );\n    \n    c = square( vec4(0.1,0.4,0.7,1.0), vec2(0.75 + 0.3 * SQRT2 * sin( iTime ),0.5), 0.15, 0.01, 0.0, p );\n    blend_pma( col, c );\n    \n    c = circle( vec4(0.1,0.6,0.0,0.5 + 0.5 * sin( 3.0 * iTime )), vec2(0.75,0.5), 0.15, 0.1, p );\n    blend_pma( col, c );\n    \n    \n    vec2 distorted_p = p;\n    float sx = 0.5 + 0.5 * sin( 4.0 * TAU * p.x );\n    distorted_p.x *= 1.0 + sx * 0.2;\n    float sy = 0.5 + 0.5 * sin( 4.0 * TAU * p.y );\n    distorted_p.y *= 1.0 + sy * 0.2;\n    float s = length( vec2(sx, sy) ) / SQRT2;\n    c = square( vec4(0.1,0.4,0.7, s), vec2(0.0 + 0.5 * sin( iTime * 0.5 * QPI ),-0.2), 0.4, 0.01, iTime * QPI, distorted_p );\n    blend_pma( col, c );\n    \n    fragColor = vec4(col.rgb,1);\n}","name":"Image","description":"","type":"image"}]}