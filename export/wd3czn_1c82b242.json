{"ver":"0.1","info":{"id":"wd3czn","date":"1600247260","viewed":380,"name":"jh0ker_chroma_abberation","username":"jh0ker","description":"try implementing chromatic abberation","likes":3,"published":3,"flags":2,"usePreview":0,"tags":["chromatic","effects","chromaticabberation","abberation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 center = vec2(.5);\n    vec2 diff = uv - center;\n\n    float strength = .015;\n    float overlap = .3;\n    \n    int samples = 4;\n    \n    vec4 colorSamples[3] = vec4[] (vec4(.0),vec4(.0),vec4(.0));\n    \n    for (int colOffset = 0; colOffset < 3; colOffset++) {\n        \n        for (int i = 0; i < samples; i++) {\n\n            float colMult = \n                strength * (\n                    float(colOffset - 1) * (1. - overlap) +\n                \t(float(samples - i) / float(samples) - .5)\n                );\n            \n            \n            colorSamples[colOffset] += texture(\n                iChannel0, \n                uv - diff * colMult\n            ) / float(samples);\n        }\n    }\n    \n    // Output to screen\n    fragColor = vec4(colorSamples[0].r, colorSamples[1].g, colorSamples[2].b,1.0);\n}","name":"Image","description":"","type":"image"}]}