{"ver":"0.1","info":{"id":"wtcfzf","date":"1613166341","viewed":41,"name":"First little primitive shapes","username":"squifi","description":"Developing a feeling for shaders and primitive shapes after watching some tutorials by iq and bigWhig","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["beginner","wip"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 DrawCoordinateSystem(vec2 p, vec3 col) {\n    float thickness = 1. / iResolution.y;\n    if(abs(p.x) < thickness) col.g = 1.;\n    if(abs(p.y) < thickness) col.r = 1.;\n    return col;\n}\n\nfloat DrawCircle(vec2 p, float size, float blur) {\n    // resize and reposition\n    p -= vec2(+.5, .0);\n    p /= .5;\n    return smoothstep(-blur, blur, length(p) - size); \n}\n\nfloat DrawSquare(vec2 p, float y, float blur) {\n    // resize and reposition\n    p -= vec2(-.5, .0);\n    p /= .5;\n    float m = smoothstep(-blur, blur, p.y + y);\n    m *= smoothstep(blur, -blur, p.y - y);\n    p.x = abs(p.x);\n    m *= smoothstep(blur, -blur, p.x - y);\n    return m;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 p = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n    \n    vec3 col = vec3(0);\n    \n    float blur = .01;\n    \n    col += DrawSquare(p, .25, blur);\n    // circle not really visible\n    col /= DrawCircle(p, .25, blur);\n    \n    col += DrawCoordinateSystem(p, col);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}