{"ver":"0.1","info":{"id":"ltGGWm","date":"1474930172","viewed":159,"name":"eye circumcircle","username":"ollj","description":"a special circumcircle-case for points (x,0) (-x,0) (0,y); where x,y=IMouse.xy\nif(mirrored on x=0)it is a fast parametric base shape for exes,hair,grass that morphs to a circle","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["basic","eye","grass","hair","frame","circumcircle","crescent"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//comment out to see the circumcircle unmirrored\n#define mirrorx\n\n// to visualize circumcircle calculation\n//undefine #mirrorx and define #smalldots\n\n//small dots show how circumcircle is set.\n//#define smalldots\n\n//disable quadrant colors, because can cause optical illusions.\n//#define greyscale\n\n#define sss(a,b,c) smoothstep(a-b,a+b,c)\n#define res iResolution\n\n//translate fragments to a frame; scale, center, aspectRatio.\nvec2 frame(vec2 a){a.x-=.5*(res.x-res.y);a/=res.xy;a.x*=res.x/res.y;\n a-=vec2(.5);\n a*=3.;\n //a=vec2(-a.y,a.x);//rotate 90 deg.\n return a;}//not for horizonral screens where res.x<res.y ??\n\n//return intersection with y axis of line trough points [a] and [b-a]\nfloat InterY(vec2 A,vec2 b){return A.y+b.y*-A.x/b.x;}\n\nvoid mainImage(out vec4 r,in vec2 o){\n vec2 m=frame(iMouse.xy),p=frame(o.xy);\n#ifdef greyscale\n r=vec4(.6);//r=return value = fragmentColor;\n#else\n r=vec4(p*.3+vec2(.7),.7,1.);//colorize quadrants\n#endif\n float gg=cos(length(p)*32.)+1.1;\n r-=sss(.05,.2,gg);//circles around vec2(0) point towards the center\n vec2 s=sss(.01,.002,abs(p));\n r+=min(s.x,s.y);//man axis that go trhough vec2(0)\n r=r*1.1+.3;//pre-gamma correction; brighten whole image, we later darken it by r-=mod(a);\n //if(length(p)<.05)r=vec4(.5);//central point\n#ifdef smalldots\n //4 dots mark distance of 1. to center:\n if(length(abs(p)-vec2(0,1))<.03)r=vec4(.0);\n if(length(abs(p)-vec2(1,0))<.03)r=vec4(.0);\n#endif\n //if(length(vec2(0,c))<.03)r=vec4(.5); \n vec2 a=vec2(0.,m.y);\n vec2 b=vec2(m.x,0.);\n vec2 ba=b-a;\n vec2 c=b-ba*.5; \n vec2 f=c-vec2(ba.y,-ba.x);    \n vec2 g=vec2(0.,InterY(c,f-c));\n#ifdef smalldots\n //a lesson was learned here that\n //you must subtract p at the VERY last moment.\n //p must not be part of he definition of a or b\n //or else p will scew point g to a \"butterfly shape\" while f appears fine. \n if(length(a-p)<.04)r=vec4(.5);\n if(length(b-p)<.04)r=vec4(.5);\n if(length(c-p)<.04)r=vec4(.5);\n if(length(f-p)<.02)r=vec4(.5);\n if(length(g-p)<.06)r=vec4(.2);\n#endif\n#ifdef mirrorx\n p.y=abs(p.y);//undefine #mirrorx while defining #smalldots to visualize\n#endif\n if(length(g-p)<length(g-a))r+=vec4(.2);\n r-=mod(length(g-p)-length(g-a),1.);\n}","name":"Image","description":"","type":"image"}]}