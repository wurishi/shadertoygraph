{"ver":"0.1","info":{"id":"NljXDh","date":"1627573905","viewed":112,"name":"Double Pendulum Fractal","username":"incription","description":"Use your mouse to see the pendulums, change parameters in common\nincrease steps is simulation becomes unstable\npress 1 to reset (for fullscreen)\npress 2 to view potntials (acceleration)","likes":6,"published":1,"flags":48,"usePreview":0,"tags":["fractal","pendulum","buffer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat dist(vec2 p, float theta1, float theta2) {\n    vec2 p1 = vec2(sin(theta1), cos(theta1))*l1*1e-3;\n    float s1 = sdSegment(p, vec2(0), p1);\n    float s2 = sdSegment(p, p1, p1 + vec2(sin(theta2), cos(theta2))*l2*1e-3);\n    \n    return min(s1, s2);\n}\n\nvec3 colormap(vec2 uv) {\n    uv *= TWOPI;\n    return pow(0.5 + 0.5 * vec3(sin(uv.x) * vec2(-cos(uv.y), sin(uv.y)), -cos(uv.x)), vec3(0.75));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    ivec2 iuv = ivec2(fragCoord);\n    \n    ivec2 muv = ivec2(iMouse.xy);\n    \n    ivec2 dp = ivec2(0, 1);\n    vec4 dat = texelFetch(iChannel0, muv, 0);\n    \n    float d = dist(-uv + iMouse.xy / iResolution.xy, dat.x, dat.y);\n    \n    vec4 d_ = (texelFetch(iChannel0, iuv, 0) +\n       texelFetch(iChannel0, iuv + dp.xy, 0) + \n       texelFetch(iChannel0, iuv - dp.xy, 0) + \n       texelFetch(iChannel0, iuv + dp.yx, 0) + \n       texelFetch(iChannel0, iuv - dp.yx, 0))/10.;\n    vec2 c = mix(d_.xy, d_.zw, texelFetch(iChannel1, ivec2(KEY_2, 0), 0).x);\n       \n    vec3 col = colormap(c/3.141);\n    if(d < 0.003 && iMouse.z > 0.)col=vec3(0);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 index = ivec2(fragCoord);\n    vec4 dat = texelFetch(iChannel0, index, 0);\n    \n    float delta = (iTimeDelta * TIME) / STEPS;\n    \n    for(float i=0.;i<STEPS;i++) {\n        dat = update(dat, delta);\n    }\n    \n    if(iFrame == 0 || texelFetch(iChannel1, ivec2(KEY_1, 0), 0).x > 0.) {\n        vec2 uv = fragCoord / iResolution.xy + .5;\n        //uv *= min(iResolution.x, iResolution.y);\n        fragColor = vec4(abs(uv) * 2. * pi, 0, 0);\n    } else {\n        fragColor = dat;\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define STEPS 10.\n#define TIME 10.\n#define KEY_1 49\n#define KEY_2 50\n\n//mass, length, gravity\n#define m1 1.\n#define m2 1.\n#define l1 100.\n#define l2 100.\n#define g 9.81\n#define pi 3.14159\n#define TWOPI 6.28318\n\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec4 update( vec4 d, float t )\n{\n    float mu = 1. + m1 / m2;\n    float Theta1 = d.x;\n    float Theta2 = d.y;\n    float dTheta1 = d.z;\n    float dTheta2 = d.w;\n    \n    float d2Theta1 = (g*(sin(Theta2)*cos(Theta1-Theta2)-mu*sin(Theta1))-(l2*dTheta2*dTheta2+l1*dTheta1*dTheta1*cos(Theta1-Theta2))*sin(Theta1-Theta2))/(l1*(mu-cos(Theta1-Theta2)*cos(Theta1-Theta2)));\n    float d2Theta2 = (mu*g*(sin(Theta1)*cos(Theta1-Theta2)-sin(Theta2))+(mu*l1*dTheta1*dTheta1+l2*dTheta2*dTheta2*cos(Theta1-Theta2))*sin(Theta1-Theta2))/(l2*(mu-cos(Theta1-Theta2)*cos(Theta1-Theta2)));\n    \n    return d + vec4(dTheta1, dTheta2, d2Theta1, d2Theta2) * t;\n}","name":"Common","description":"","type":"common"}]}