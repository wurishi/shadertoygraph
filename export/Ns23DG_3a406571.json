{"ver":"0.1","info":{"id":"Ns23DG","date":"1618708072","viewed":57,"name":"311 Sofya Khaet","username":"Skhaet","description":"Witch Ball - 311 group, Khan Sofya","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["cg"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float snoise(vec3 uv, float res)\n{\n\tconst vec3 s = vec3(1e0, 1e2, 1e3);\n\t\n\tuv *= res;\n\t\n\tvec3 uv0 = floor(mod(uv, res))*s;\n\tvec3 uv1 = floor(mod(uv+vec3(1.), res))*s;\n\t\n\tvec3 f = fract(uv); f = f*f*(3.0-2.0*f);\n\n\tvec4 v = vec4(uv0.x+uv0.y+uv0.z, uv1.x+uv0.y+uv0.z,\n\t\t      \t  uv0.x+uv1.y+uv0.z, uv1.x+uv1.y+uv0.z);\n\n\tvec4 r = fract(sin(v*1e-1)*1e3)*0.05;\n\tfloat r0 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y)*0.5;\n\t\n\tr = fract(sin((v + uv1.z - uv0.z)*1e-1)*1e3)*0.05;\n\tfloat r1 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y)*0.5;\n\t\n\treturn mix(r0, r1, f.z)*2.-1.;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = -.5 + fragCoord.xy / iResolution.xy;\n\tp.x *= iResolution.x/iResolution.y;\n\t\n\tfloat color = 3.0 - (3.*length(2.*p));\n\t\n\tvec3 coord = vec3(atan(p.x,p.y)/6.2832+.5, length(p)*.4, .5);\n\t\n\tfor(int i = 1; i <= 7; i++)\n\t{\n\t\tfloat power = pow(2.0, float(i));\n\t\tcolor += (1.5 / power) * snoise(coord + vec3(0.,-iTime*.05, iTime*.01), power*16.);\n\t}\n\t//fragColor = vec4( color, pow(max(color,0.),2.)*0.4, pow(max(color,0.),3.)*0.15 , 1.0);\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Вывод на экран\n    fragColor = texture(iChannel0, uv) /float(iFrame + 1) + vec4( color, pow(max(color,0.),2.)*0.4, pow(max(color,0.),3.)*0.15 , 1.0); /* Делим, тк нам нужна не сумма накопления, а среднее */\n    /* iFrame - номер кадра */\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;/* константа для бесконечности */\nconst vec3 CAMERA_POS = vec3(0, 1.2, -6); /* позиция камеры (направлен от камеры к картинке) */ \nconst vec3 LIGHT1_POS = vec3(-2, 1.6, 4); /* Задаем позицию,радиус круглого источника света и его цвет */\nconst float LIGHT1_RADIUS = 0.5;\nconst vec3 LIGHT1_COLOR = vec3(1, 1, 0.6);\n\nconst vec3 LIGHT2_POS = vec3(1, 1, 2); /* Второй источник света */\nconst float LIGHT2_RADIUS = 0.25;\nconst vec3 LIGHT2_COLOR = vec3(1.5, 1.5, 1.5);\n\nvec3 randDir;\n\n/* Функция для пересечения точки с плоскостью */ \nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    /* Найдем пересечения viewVec и плоскости, для которой y = -1 \n    (CAMERA_POS + t * viewVec).y = -1 */\n    float t = (-1.2 - pos.y)/(dir.y); /* растояние от камеры до плоскости y = -1 */\n    if (t <= 0.0) {\n        return INF;\n    }\n    /* убираем \"остатки\" плоскости сверху и по бокам*/\n    vec3 worldPos = t * dir + pos; /* позиция точки для этой плоскости */\n    normal = vec3(0, 1, 0);\n    if ((abs(float(worldPos.xz)) < 2.5) && (float(worldPos.z) < 3.5)) { /* квадратный стол */\n        return t;\n    } else {\n        return INF;\n    }\n}\n\n/* Пересечение луча с источником света */\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    /* dot(pos + t * dir, pos + t * dir) = r*r - скао=лярное произведение*\n       dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * (dir, dir) = r * r\n       t * t + 2 * t * dot(pos, dir) + dot(pos, pos) - r*r = 0 */\n    float b = dot(pos, dir);\n    float D = b * b - dot(pos, pos) + r* r; /* Дискриминант */\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = - b - sqrt(D);\n    if (t > 0.0) {/* Если оказализь за/внутри сферы */\n      normal = normalize(pos + t * dir);\n      return t;  \n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 0.5) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 0.5;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\n\n/*Тени*/\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 sphNorm;\n    float sphT = traceSphere(pos, dir, 1.0, sphNorm);\n    if (sphT < dist)\n        return true;\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n}\n\n\n/* Вычисление освещения */\nvec3 computeLight (vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1= dot(toLight1,toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS  + randDir* LIGHT1_RADIUS) ? 0.0 : 20.0 / distSq1;\n    \n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2= dot(toLight2,toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir* LIGHT2_RADIUS) ? 0.0 : 10.0 / distSq2;\n    \n    return color * (\n        max(0.0, dot(normal, normalize(toLight1)))*att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2)))*att2 * LIGHT2_COLOR\n        + texture(iChannel1, normal).rgb * 0.1\n    );\n}\n\n\n/* Вычисляем куда направлен вектор трассировки после дифракции */\nvec3 refraction (vec3 v, vec3 normal, float n1, float n2) {\n    /* Если скаляр <0 то луч пришел изнутри, иначе - снаружи */\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal); /* тангенциальная состовляющая вектора v */\n    float sinB = sinA / n2 * n1;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nfloat pow2(float n) {\n    return n*n;\n}\n\nfloat rand(float frame) {\n    return fract(sin (dot(vec3(frame), vec3(12.9898, 78.233, 45.5432))) * 43758.5453);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec3 randVals = vec3 (rand(float(iFrame)), rand(float(iFrame+5)), rand(float(iFrame+15))); /* вектор из 3ех случайных чисел */\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5)*2.0)/iResolution.x; /* Переместили координаты в центр схемы */\n    vec3 front = normalize(-CAMERA_POS);/* вектор, смотрящий вперед */\n    vec3 up = vec3(0, 1, 0); /* вектор направленный вверх*/\n    vec3 right = normalize(cross(front, up)); /* векторное произведение */\n    up = normalize(cross(right, front)); /* пересчитываем вектор вверх*/\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);/* направление камеры для каждого пикселя */\n\n/* Поддержка материалов */\n    const int EMISSION = 0; /* Источники света */\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    \n    \n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    \n    \n    const float AIR_N = 1.0;\n    const float GLASS_N = 1.5;\n    float n1 = AIR_N;\n    float n2 = GLASS_N; /* коэф преломления */\n    \n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    \n    vec3 colorMult = vec3(1, 1, 1);\n    \n    for (int i = 0; i < 10; ++i) {\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        vec3 planeNorm;\n        float t = INF;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos; /* позиция точки для этой плоскости */\n            color = texture(iChannel0, worldPos.xz * 0.5).rgb; \n            normal = planeNorm;\n            if (randVals.y < 0.2) {\n                materialType = REFLECTION;\n            } \n        }\n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n/* Основная сфера */\n        \n        vec3  sphNorm;\n        float sphT = traceSphere(curPos, curDir, 1.0, sphNorm);\n        if (sphT < t) {\n            t = sphT;\n            normal = sphNorm;\n            if (randVals.x < GLASS_R) {\n                materialType = REFLECTION;\n            } else {\n                colorMult = vec3(0.7, 0.7, 1.2)*0.7;\n                materialType = REFRACTION;\n            }\n            \n        }\n        \n        vec3 cylNorm;\n        float cylT = traceCylinder (curPos, curDir, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb; \n            normal = cylNorm;\n        }\n        \n        if (t != INF) { \n            vec3 worldPos = t * curDir + curPos; /* позиция точки для этой плоскости */\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) {\n                fragColor.rgb = color * colorMult;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal)*colorMult;\n                break;\n            } else if (materialType == REFLECTION) { /* Меняем позицию трассировки */\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n                \n            } else if (materialType == REFRACTION) {\n                curDir = refraction (curDir, normal, n1, n2);\n                curPos = worldPos + curDir * 1e-5;\n                \n                float tmp = n1;\n                n1 = n2;\n                n2 = tmp;\n                \n            }\n        } else {/* случай когда мы никуда не попали */\n            fragColor.rgb = texture(iChannel1, curDir).rgb* colorMult;\n           \n        }\n        \n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture (iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}