{"ver":"0.1","info":{"id":"tdfXRN","date":"1550774816","viewed":760,"name":"Ball Physics","username":"scratch13764","description":"Use your mouse to drag the ball toward your mouse, WASD, ZQSD or arrows to move the ball. Space to reset velocity.","likes":26,"published":1,"flags":48,"usePreview":0,"tags":["collision","sdf","ball","physics","buffer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n    \n    vec2 b = texture(iChannel0, vec2(0)).xy;\n    \n    vec2 B = vec2(\n    clamp(b.x, 0., iResolution.x/iResolution.y),\n    clamp(b.y, 0., 1.));\n    \n    float d = length(uv-B);\n    \n    float m = smoothstep(BallSize, BallSize - .003, d);\n    \n    if (b != B)\n    {\n        m *= sin(iTime*6.)*.5+.5;\n    }\n    \n    fragColor.rgb = mix(\n        texture(iChannel1, fragCoord/iResolution.xy).rgb,\n        vec3(.9,.1,.2),\n        m);\n        \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float getKey(int k)\n{\n    return texelFetch(iChannel1, ivec2(k, 0), 0).x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (fragCoord.xy == vec2(.5)){ // So for some reason you have to address .5??\n        vec2 p = fragCoord/iResolution.y;\n        vec2 m = iMouse.xy/iResolution.y;\n        vec4 old = texture(iChannel0,vec2(0));\n        fragColor = old;\n        fragColor.xy += old.zw;\n        float sdf = map(fragColor.xy, iTime);\n        fragColor.zw*=.99;\n        fragColor.w -= .001;\n        if (iMouse.w >= .01)\n        {\n            fragColor.zw *= .7;\n            fragColor.zw += (m - old.xy)/20.;\n            if (length(fragColor.xy - p) <= .05)\n            {\n                fragColor.zw *= .3;\n            }\n        }\n        \n        fragColor.zw += normal(fragColor.xy, iTime)*max(-sdf + BallSize,0.)*2.;\n        fragColor.zw *= 1.-step(sdf, 0.)*.1; //This line controlls the bounciness of the ball\n        \n        if (length(fragColor.zw) <= .001 && sdf <= BallSize || getKey(K_SPC) == 1.)\n        {\n            fragColor.zw = vec2(0);\n        }\n        \n        vec4 v = vec4(\n            max(getKey(K_D), getKey(K_RT)),\n            max(max(getKey(K_A), getKey(K_Q)), getKey(K_LF)),\n            max(max(getKey(K_W), getKey(K_Z)), getKey(K_UP)),\n            max(getKey(K_S), getKey(K_DN)));\n        \n        fragColor.z += (v.x - v.y)*.001;\n        fragColor.w += (v.z - v.w)*.001;\n        \n        if(iFrame == 0)\n        fragColor = vec4(1., .3, 0., 0.);\n        \n    } else discard;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"//Decimal ASCII codes\n#define K_W 87\n#define K_A 65\n#define K_S 83\n#define K_D 68\n#define K_Z 90\n#define K_Q 81\n#define K_LF 37\n#define K_UP 38\n#define K_RT 39\n#define K_DN 40\n#define K_SPC 32\n\n#define BallSize .05\n\n#define pi 3.1415926\n#define phi pi * .5\n#define tau pi * 2.\n\n\nfloat npolySDF (float r, float n, float t, vec2 p)\n{\n    n *= .5;\n    float o = phi/n;\n    float a = atan(p.y/p.x);\n    if (p.x < 0.) a += pi;\n    float s = round((a + t)/pi*n)/n*pi - t;\n    float d = round((a + o + t)/pi*n)/n*pi - o - t;\n    vec2 c = vec2(cos(d),sin(d))*r;\n    vec2 f = vec2(cos(s),sin(s));\n    float b = length(p-c);\n    float l = dot(p, f);\n    l -= cos(o)*r;\n    float m = b;\n    if (abs(dot(vec2(p.x,-p.y), f.yx)) <= sin(o)*r) m = l;\n    return m;\n}\n\nfloat map (vec2 p, float t)\n{\n    float m = length(p-vec2(.3,.2))-.3;\n    m = max(m, .3 - length(p - vec2(.6,.348)));\n    m = min(m, p.y-.05);\n    m = min(m, npolySDF(.4,5.,t/3.,p-vec2(.4,1.))-.01);\n    vec2 b = vec2(dot(p,normalize(vec2(-1.,.2))), dot(p,normalize(vec2(.2,1.))));\n    m = min(m, length(vec2(b.x - clamp(b.x, -1.52, -1.28), mod(b.y-t*.1, .4)-.2))-.03);\n    m = min(m, b.x+1.5);\n    m = min(m, -b.y+1.21);\n    m = min(m, length(b - vec2(-1.28, clamp(b.y, .5, 1.)))-.03);\n    \n    return m;\n}\n\nvec2 normal (vec2 p, float t)\n{\n    return normalize(vec2(\n        map(vec2(p.x + .01,p.y),t) - map(vec2(p.x - .01,p.y),t),\n        map(vec2(p.x,p.y + .01),t) - map(vec2(p.x,p.y - .01),t)\n        ));\n}\nvec3 distCol (float d)\n{\n    float a = pow(cos(d * 120.) * .5 + .5, 10.)*.8 + .2;\n    vec3 c = mix(vec3(.8,.5,0.), vec3(.3,.3,.9), sign(d)*.5 + .5)*a;\n    c = mix(c, vec3(.8,.8,1.), 1./(abs(d)*100.+1.));\n    return c;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord/iResolution.y;\n    fragColor = vec4(distCol(map(p, iTime)), iResolution.x);\n    \n    //fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n}","name":"Buffer B","description":"","type":"buffer"}]}