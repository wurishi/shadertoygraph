{"ver":"0.1","info":{"id":"3d2yRV","date":"1586972400","viewed":90,"name":"Problem - how to draw full path?","username":"mikelsv","description":"How to draw full path for circle?","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["problem"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// This is minimal build for\n// Pulse 2d - Generate 2d pulse from formula: https://www.shadertoy.com/view/3dSczy\n\n// Quest on Stack Overflow: https://stackoverflow.com/questions/61235505/glsl-shadertoy-how-to-draw-path-for-2d-object\n\n// Problem: How to draw full path for extension?\n\n#define RGBC_RED vec4(222. / 255., 52. / 225., 81. / 225., 1.)\n#define PI 3.141592653589793\n\nvec2 pulseFuncCircle(float val){ // return (sin, cos); Circle;\n    return vec2(sin(val), cos(val));\n}\n\n#define SCALE_X 1.\n#define SCALE_Y 1.\n#define PULSE_STEP 2.\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord ){\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 coord = fragCoord/iResolution.xy;\n    \n    // Get time\n    float time = mod(iTime, 2.);\n    \n    // Get circle coordinate\n    vec2 pv = pulseFuncCircle(time * PI);\n    \n    // Get paths\n    vec2 sx = pulseFuncCircle(coord.x * PI * PULSE_STEP * SCALE_X - SCALE_X);\n    vec2 sy = pulseFuncCircle(coord.y * PI * PULSE_STEP * SCALE_Y - SCALE_Y);\n    \n    // Draw point\n    if(sqrt(pow(abs(pv.y - coord.y * 2. * SCALE_Y + SCALE_Y), 2.)\n       + pow(abs(pv.x - coord.x * 2. * SCALE_X + SCALE_X), 2.)) < 0.1\n      ){\n     \tfragColor = RGBC_RED;\n        return ;\n    }\n    \n    // Draw horizontal path\n    if(abs(sx.y - coord.y * 2. * SCALE_Y + SCALE_Y) < .01){\n\t\tfragColor = RGBC_RED;\n        return ;\n    }\n    \n    // Draw vertical path\n    if(abs(sy.x - coord.x * 2. * SCALE_X + SCALE_X) < .01){\n\t\tfragColor = RGBC_RED;\n        return ;\n    }        \n    \n    // How to draw full circle path?\n      \n    \n    if(sqrt(pow(abs((sx.x + sy.x) / 1. - coord.y * 2. * SCALE_Y + SCALE_Y), 2.)\n       + pow(abs((sx.y + sy.y) / 1. - coord.x * 2. * SCALE_X + SCALE_X), 2.)) < 0.1\n      ){\n     \tfragColor = vec4(1., 0., 0., 1.);\n        return ;\n    }    \n    \n    \n    fragColor = vec4(0, 0, 0, 1.0);\n}","name":"Image","description":"","type":"image"}]}