{"ver":"0.1","info":{"id":"NlBSR3","date":"1628164289","viewed":108,"name":"Cylinder (Max Norm Distance)","username":"TheTurk","description":"Maximum norm distance function for a cylinder.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["distancefield","sdf","distance","cylinder","maxnorm","linfinity","maximumnorm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float cylinder(vec3 position, float radius, float halfHeight) {\n    position = abs(position);\n    float d = max(position.x - radius, position.z);\n    d = min(d, max(position.x, position.z - radius));\n    float b = dot(vec2(1.0), position.xz);\n    float c = dot(position.xz, position.xz) - (radius * radius);\n    float discriminant = b * b - 2.0 * c;\n    if (discriminant >= 0.0) {\n        float t = (b - sqrt(discriminant)) / 2.0;\n        d = min(d, t);\n    }\n    d = max(d, position.y - halfHeight);\n    return d;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 position = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    float z = (fract((iTime * 0.2) + 0.5) * 2.0 - 1.0) * 0.6;\n    \n    float radius = 0.5;\n    float d = cylinder(vec3(position, z), radius, 0.5);\n    \n    // same colorization that Inigo Quilez uses in his shaders\n    vec3 color = vec3(1.0, 0.9, 1.0) + sign(d) * vec3(-0.3, 0.4, 0.3); // base color\n    color *= 1.0 - exp(-4.0 * abs(d)); // gradient\n\tcolor *= 0.8 + 0.2 * cos(140.0 * d); // ripples\n    color = mix(color, vec3(1.0), 1.0 - smoothstep(0.0, 3.0, (abs(d) - 0.001) * iResolution.y)); // outline\n    fragColor = vec4(color, 1.0);\n} \n\n","name":"Image","description":"","type":"image"}]}