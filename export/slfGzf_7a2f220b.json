{"ver":"0.1","info":{"id":"slfGzf","date":"1622520454","viewed":191,"name":"old joseph by jairoandre","username":"jairoandre","description":"Another tutorial based on the art of code videos. Credits to BigWings","likes":5,"published":1,"flags":64,"usePreview":0,"tags":["artofcode"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XllSzX","filepath":"https://soundcloud.com/velhojunk/velho-ze","previewfilepath":"https://soundcloud.com/velhojunk/velho-ze","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define s(a, b, t) smoothstep(a, b, t)\n\n// Shader implementation as described on the excelent Art of The Code video: https://www.youtube.com/watch?v=3CycKKJiwis\n\n// distance of the point p to the line that starts on the point a and ends on the point b\nfloat dist_line(vec2 p, vec2 a, vec2 b) {\n    vec2 pa = p-a;\n    vec2 ba = b-a;\n    float t = clamp(dot(pa, ba)/dot(ba, ba), 0., 1.);\n    return length(pa - ba * t);    \n}\n\n// pseudo random float\nfloat n21(vec2 p) {\n    p = fract(p * vec2(233.24, 851.73));\n    p += dot(p, p + 23.45);\n    return fract(p.x * p.y);\n}\n\n// pseudo random vec2\nvec2 n22(vec2 p) {\n    float n = n21(p);\n    return vec2(n, n21(p+n));\n}\n\nvec2 get_pos(vec2 id, vec2 offs) {\n    vec2 n = n22(id + offs) * iTime;\n    return offs + sin(n) * .4;\n}\n\nfloat line(vec2 p, vec2 a, vec2 b) {\n    float d = dist_line(p, a, b);\n    float m = s(.03, .01, d);\n    float d2 = length(a-b);\n    m *= s(1.6, .5, d2)*.5 + s(.05, .03, abs(d2-.75));\n    return m;\n}\n\nfloat layer(vec2 uv) {\n    float m = 0.;\n    // fract returns the fractional component of the number (ex: 0.1, 0.3, 0.43)\n    vec2 gv = fract(uv) - .5;\n    // floor returns the integer part of the number, we use to give a cell an identification   \n    vec2 id = floor(uv);\n    \n    vec2 p[9];\n    int i = 0;\n    for (float y = -1.; y <= 1.0; y++) {\n        for (float x = -1.; x <= 1.0; x++) {\n            p[i++] = get_pos(id, vec2(x, y));\n        }\n    }\n    \n    float t = iTime * 10.;\n    for (int i = 0; i < 9; i++) {\n        m += line(gv, p[4], p[i]);\n        vec2 j = (p[i] - gv) * 10.;\n        float sparkle = 1./dot(j, j);\n        m += sparkle * (sin(t + fract(p[i].x) * 10.) *.5 + .5);\n    }\n    \n    m += line(gv, p[1], p[3]);\n    m += line(gv, p[1], p[5]);\n    m += line(gv, p[5], p[7]);\n    m += line(gv, p[3], p[7]);\n    \n    return m;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // set the coordinates system to the middle of the canvas\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    float gradient = uv.y;\n    \n    vec2 mouse = (iMouse.xy/iResolution.xy)-.5;\n    \n    float m = 0.;\n    \n    float t = iTime*.1;\n    \n    float s = sin(t*2.);\n    float c = cos(t*5.);\n    mat2 rot = mat2(c, -s, s, c);\n    uv *= rot * 3.;\n    mouse *= rot;\n    for (float i=0. ; i < 1.; i += 1./4.) {\n        float z = fract(i+t);\n        float size = mix(10., .5, z);\n        float fade = s(0., .5, z) * s(1., .8, z);\n        m += layer(uv*size+i*20.-mouse) * fade;\n    }\n    \n    vec3 base = sin(t*20.*vec3(.345, .543, .682)) *.25 + .75;\n    \n    vec3 col = m * base;\n    \n    float fft = texelFetch(iChannel0, ivec2(.1,0), 0).x;\n    \n    gradient *= fft*2.;\n    \n    col -= gradient * base;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}