{"ver":"0.1","info":{"id":"mdG3RV","date":"1678800261","viewed":192,"name":"RGB weyl sequence","username":"izutionix","description":"turns out that patterns from permutations of the original and inverted ratios still kinda maintain their properties!\nI think it kinda looks like comic book dithering\n(forked from [url=https://www.shadertoy.com/view/4dtBWH]weyl sequence by jaybird[/url])","likes":4,"published":3,"flags":32,"usePreview":0,"tags":["rgb","sampling","vector","sequence","hash","lowdiscrepancy","weyl","r2"],"hasliked":0,"parentid":"dsyGzK","parentname":"[Fork] weyl sequence RGB attempt"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ^^ [Buffer A] is what you're looking for\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// forked from https://www.shadertoy.com/view/4dtBWH by jaybird\n\n// ratios\nfloat g1 = 0.754877666; // (one over plastic number)\nfloat g2 = 0.569840291; // (one over plastic number squared)\n// integers to avoid round-off\nint G1 = 12664745;      // g1*exp2(24)\nint G2 = 9560333;       // g2*exp2(24)\n\n/* inverted ratios produce a pattern with better long range properties (smaller = longer to reach precision limit)\n   see https://www.shadertoy.com/view/csdGWX by MartyMcFly */\nfloat ig1 = 0.245122334; // 1.-g1\nfloat ig2 = 0.430159709; // 1.-g2\n// integers to avoid round-off\nint iG1 = 4112470;       // ig1*exp2(24)\nint iG2 = 7216882;       // ig2*exp2(24)\n\nvec2 Nth_weyl(vec2 p0, int n) {\n    \n    //return fract(p0 + float(n)*vec2(g1, g2));\n    return fract(p0 + vec2(n*G1, n*G2)/exp2(24.));\t// integer mul to avoid round-off\n}\n\nvec2 Nth_weyl_custom(vec2 p0, int n, int A, int B) {\n    \n    return fract(p0 + vec2(n*A, n*B)/exp2(24.));\t// integer mul to avoid round-off\n}\n\nfloat shade(vec2 p) {\n\n\treturn 1. - smoothstep(0., .002/iResolution.y, dot(p, p));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    vec2 uv = fragCoord/iResolution.xx;\n\n    fragColor.rgb = vec3(0.);\n\n    const int n_per_frame = 16;\n    for (int i = 1; i <= n_per_frame; i++) {\n        int N = iFrame*n_per_frame + i;\n        vec2 r = Nth_weyl_custom(vec2(0.), N,  G1,  G2);\n      //vec2 g = Nth_weyl_custom(vec2(0.), N, iG1, iG2); // maybe better if 2 colors are enough\n        vec2 g = Nth_weyl_custom(vec2(0.), N,  G1, iG2);\n        vec2 b = Nth_weyl_custom(vec2(0.), N, iG1,  G2);\n        fragColor.rgb += vec3( shade(r - uv), shade(g - uv), shade(b - uv) );\n    }\n\n    fragColor.rgb += texelFetch(iChannel0, ivec2(fragCoord), 0).rgb;\n    fragColor.a   = 1.;\n}\n","name":"Buffer A","description":"","type":"buffer"}]}