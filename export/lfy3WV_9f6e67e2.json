{"ver":"0.1","info":{"id":"lfy3WV","date":"1713280627","viewed":144,"name":"knight rider intro","username":"jorge2017a2","description":"knight rider intro","likes":14,"published":1,"flags":8,"usePreview":0,"tags":["2d","sound","knightriderintro"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//por jorge2017a2\n//knight rider intro\n//referencia\n//https://iquilezles.org/articles/distfunctions2d\n///\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.5),0. , d - (b) )\n#define S2(d,b) smoothstep(8.0*antialiasing(1.5),0.,d - (b) )\n#define S3(d,b) smoothstep(5.0/antialiasing(0.5),0. , d - (b) )\n\n#define opU2(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\n\n\n#define PI     3.14159265\n#define TWO_PI 6.28318530\n\n\nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\n\nvec3 DrawFig(vec3 pColObj, vec3 colOut, float distObj )\n{  colOut = mix(colOut,pColObj ,S2( distObj-0.05,0.0)); return colOut;}\n\nvec3 DrawFigSolo(vec3 pColObj, vec3 colOut, float distObj ) \n{  colOut = mix(colOut,pColObj ,S( distObj,0.0)); return colOut; }\n\n\nvec3 D2(vec3 pColObj, vec3 colOut, float distObj ) \n{  colOut = mix(colOut,pColObj ,S2( distObj,0.0)); return colOut; }\n\nvec3 DFB(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S3( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0),S3(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\n\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b;  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);  }\n\nfloat sdCircle( vec2 p, float r )\n{ return length(p) - r;}\n\nfloat divf(float a, float b)\n{  //evita crash por 1/0.0 =Infinito=error, en compilar\n    if(b==0.0)\n    {b=0.00001;}\n    return a/b;\n}\n\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{  vec2 pa = p-a, ba = b-a;\n    float h = clamp( divf( dot(pa,ba),dot(ba,ba)), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n\n//https://www.shadertoy.com/view/dt2yDK  //iq\n// distance to segment\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b, in float th )\n{\n    vec2 ba = b-a;\n    vec2 pa = p-a;\n    float h = clamp(  divf( dot(pa,ba),dot(ba,ba)), 0.0, 1.0 );\n    vec2  q = pa-h*ba;\n    return length(q) - th;\n}\n\n\n\nvec2  pt13[13]=vec2[](\nvec2(1.07,3.17),vec2(1.43,3.95),vec2(1.53,3.39),vec2(1.52,3.39),vec2(1.65,3.92),\nvec2(1.87,3.33),vec2(2.15,4.06),vec2(2.53,3.08),vec2(2.63,2.39),vec2(2.65,2.04),\nvec2(2.65,2.04),vec2(2.69,1.88),vec2(1.07,3.17)  );\n\nvec2  pt4[4]=vec2[](\nvec2(2.75,2.81),vec2(2.8,2.2),vec2(2.77,1.94),vec2(2.75,2.81)  );\n\nvec2  pt6[6]=vec2[](\nvec2(2.91,3.41),vec2(3.05,2.91),vec2(3.14,2.45),vec2(3.2,2.25),vec2(3.31,1.89),\nvec2(2.91,3.41)  );\n\nvec2  pt8[8]=vec2[](\nvec2(1.2,3.33),vec2(1.19,3.08),vec2(1.25,2.77),vec2(1.49,2.3),vec2(1.66,2.26),\nvec2(1.92,2.24),vec2(1.99,1.82),vec2(1.2,3.33)  );\n\nvec2  pt5[5]=vec2[](\nvec2(2.6,2.47),vec2(2.23,2.32),vec2(2.31,1.98),vec2(2.28,1.81),vec2(2.6,2.47)  );\n\nvec2  pt62[6]=vec2[](\nvec2(1.78,3.02),vec2(1.75,2.96),vec2(1.75,2.84),vec2(1.78,2.85),vec2(1.87,2.91),\nvec2(1.78,3.02)  );\n\n\nvec2  pt132[13]=vec2[](\nvec2(1.08,3.2),vec2(1.16,3.68),vec2(1.09,3.65),vec2(1.1,4.02),vec2(1.3,4.44),\nvec2(1.71,4.86),vec2(1.72,4.86),vec2(1.87,4.95),vec2(2.42,4.94),vec2(3.11,4.6),\nvec2(3.11,4.6),vec2(3.53,2.57),vec2(1.08,3.2)  );\n\n\nvec3 rostro(vec2 p, vec3 colout)\n{\n    int tam;\n    float d,dt;\n    vec2 a,b;\n    \n    tam=13;\n    for(int i=0;i<tam-2;i++)\n    {   a=pt13[i];\n        b=pt13[i+1];\n        d= sdSegment(p,a,b);\n        colout= DFB(vec3(0.01), colout,d);\n    }\n    \n    \n     tam=4;\n    for(int i=0;i<tam-2;i++)\n    {   a=pt4[i];\n        b=pt4[i+1];\n        d= sdSegment(p,a,b);\n        colout= DFB(vec3(0.01), colout,d);\n    }\n    \n    \n    tam=6;\n    for(int i=0;i<tam-2;i++)\n    {   a=pt6[i];\n        b=pt6[i+1];\n        d= sdSegment(p,a,b);\n        colout= DFB(vec3(0.01), colout,d);\n    }\n\n\n    tam=8;\n    for(int i=0;i<tam-2;i++)\n    {   a=pt8[i];\n        b=pt8[i+1];\n        d= sdSegment(p,a,b);\n        colout= DFB(vec3(0.01), colout,d);\n    }\n\n    tam=5;\n    for(int i=0;i<tam-2;i++)\n    {   a=pt5[i];\n        b=pt5[i+1];\n        d= sdSegment(p,a,b);\n        colout= DFB(vec3(0.01), colout,d);\n    }\n    \n    \n    tam=6;\n    for(int i=0;i<tam-2;i++)\n    {   a=pt62[i];\n        b=pt62[i+1];\n        d= sdSegment(p,a,b);\n        colout= DFB(vec3(0.01), colout,d);\n    }\n\n    \n    tam=13;\n    for(int i=0;i<tam-2;i++)\n    {   a=pt132[i];\n        b=pt132[i+1];\n        d= sdSegment(p,a,b);\n        colout= DFB(vec3(0.01), colout,d);\n    }\n    \n    \n    \n    vec2 A,B;\n    //boca\n    A= vec2(2.05,2.65);\n    B= vec2(1.72,2.7);\n    float d1=sdSegment(p,A,B);\n    colout= DFB(vec3(0.01), colout,d1);\n\n\n    float r2=0.05;\n    vec2 pos=vec2(1.46,3.04);\n    float d2= sdCircle(p-pos,r2);\n    colout= DFB(vec3(0.01), colout,d2);\n\n    float r3=0.05;\n     pos=vec2(1.49,3.08);\n    float d3= sdCircle(p-pos,r3);\n    colout= DFB(vec3(0.01), colout,d3);\n\n\n    float r4=0.05;\n     pos=vec2(2.16,3.16);\n    float d4= sdCircle(p-pos,r4);\n    colout= DFB(vec3(0.01), colout,d4);\n\n\n    float r5=0.02;\n     pos=vec2(2.18,3.23);\n    float d5= sdCircle(p-pos,r5);\n    colout= DFB(vec3(0.01), colout,d5);\n    return colout;\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   vec2 uv = ( 2. * fragCoord - iResolution.xy ) / iResolution.y;\n    uv-=vec2(0.0,-0.75);\n    float esc=3.0;\n    uv*=esc;\n    vec2 uv0=uv;\n    vec3 col=vec3(1.0)-(uv.y*0.125);\n    col= rostro(uv,col);\n    col= rostro(vec2(2.0-uv.x, uv.y+2.2)*abs(sin(iTime)),col);\n     \n    col=pow(col,  vec3(0.554545));\n    \n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//Referencia de sonido \n//IQ ,Gaz,AeroShark333\n//Modificado por Jorge2017a2---jorgefp\n//knight rider intro\n//https://www.youtube.com/watch?v=KkmRd8-Qhes\n\n#define PI acos(-1.)\n#define PIH (PI*.5)\n#define TAU (PI*2.)\n#define TWO_PI 6.2831\n\n\n#define DD(a,b) n=(s>=a)? vec2(a,b):n;\n#define D3(a,b,c) n3=(s>=a && s<=c)? vec3(a,b,c):n3;\n\nconst float ttotal=15.0;\nconst float pi = 3.1415927;\nconst float tau = 6.283185;\n\n//gaz\n#define osc_sin(x)sin((x)*TAU)\n#define osc_saw(x)(1.-fract(x)*2.)\n#define osc_sqr(x)sign(0.5-fract(x))\n#define osc_tri(x)(asin(sin((x)*PI))/PIH)\n\n\n\n//https://www.shadertoy.com/view/ss3cDN\n// Created by AeroShark333\nfloat squareWave750( float f, float x)\n{\n    return (min(1.0, floor( 4.0 * floor( f * x ) - floor( 4.0 * f * x ) + 3.0 )));\n}\n\nfloat squareWave500( float f, float x)\n{\n    return (floor( 2.0 * floor( f * x ) - floor( 2.0 * f * x ) + 1.0 ));\n}\n\nfloat squareWave250( float f, float x)\n{\n    return (max(0.0, floor( 4.0 * floor( f * x ) - floor( 4.0 * f * x ) + 1.0 )));\n}\n\nvec2 squareWave250( vec2 f, float x)\n{\n    return (max(vec2(0.0), floor( 4.0 * floor( f * x ) - floor( 4.0 * f * x ) + 1.0 )));\n}\n\nfloat triangleWave500( float q, float x)\n{\n    float f = 1.0-2.0*abs(0.5-mod(q*x,1.0));\n    return (f);\n}\n\nfloat triangleWave250( float q, float x)\n{\n    float f = max(0.0,1.0-2.0*abs(0.5-2.0*mod(q*x,1.0)));\n    return (f);\n}\n\nfloat convertBassFreq (float f){\n    return (f/2.0);\n}\n\n\nfloat  sawf(float t , float freq)\n{  return fract(t * freq) - 0.5; }\n\n\n\nfloat wave1( float x, float dxdt, in vec2 v, float t , float w)\n{   float fx;\n    float f=w;\n    fx =squareWave250(f,t)*triangleWave250(f,t) *exp(-2.5*t);\n    fx+=sawf(t,f);\n    //fx*=1.5;\n    return fx;\n}\n\n\n\nfloat SoundIq(float time)\n{ ///referencia de notas musicales... iq \n  time = mod( time+1.0, ttotal);\n // tune\n  float tempo = 0.5;\n  float s = time*tempo;\n vec3 n3=vec3(0.0);\n \n \n D3(0.000,18.0,0.125) D3(0.000,37.0,0.125) D3(0.125,38.0,0.188) D3(0.188,37.0,0.250) D3(0.250,37.0,0.313) D3(0.250,18.0,0.375)\n D3(0.313,38.0,0.375) D3(0.375,37.0,0.438) D3(0.438,37.0,0.500) D3(0.500,38.0,0.563) D3(0.500,18.0,0.625) D3(0.563,37.0,0.625)\n D3(0.625,37.0,0.688) D3(0.688,37.0,0.750) D3(0.750,36.0,0.813) D3(0.813,37.0,0.875) D3(0.875,37.0,0.938) D3(0.938,37.0,1.000)\n D3(1.000,37.0,1.125) D3(1.000,18.0,1.125) D3(1.125,38.0,1.188) D3(1.188,37.0,1.250) D3(1.250,37.0,1.313) D3(1.313,38.0,1.375)\n D3(1.375,37.0,1.438) D3(1.438,37.0,1.500) D3(1.500,38.0,1.563) D3(1.500,18.0,1.625) D3(1.563,37.0,1.625) D3(1.625,37.0,1.688)\n D3(1.688,37.0,1.750) D3(1.750,36.0,1.813) D3(1.813,37.0,1.875) D3(1.875,37.0,1.938) D3(1.938,37.0,2.000) D3(2.000,35.0,2.125)\n D3(2.000,16.0,2.125) D3(2.125,36.0,2.188) D3(2.188,35.0,2.250) D3(2.250,35.0,2.313) D3(2.250,16.0,2.375) D3(2.313,36.0,2.375)\n D3(2.375,35.0,2.438) D3(2.438,35.0,2.500) D3(2.500,36.0,2.563) D3(2.500,16.0,2.625) D3(2.563,35.0,2.625) D3(2.625,35.0,2.688)\n D3(2.688,35.0,2.750) D3(2.750,34.0,2.813) D3(2.813,35.0,2.875) D3(2.875,35.0,2.938) D3(2.938,35.0,3.000) D3(3.000,35.0,3.125)\n D3(3.000,16.0,3.125) D3(3.125,36.0,3.188) D3(3.188,35.0,3.250) D3(3.250,35.0,3.313) D3(3.313,36.0,3.375) D3(3.375,35.0,3.438)\n D3(3.438,35.0,3.500) D3(3.500,36.0,3.563) D3(3.500,16.0,3.625) D3(3.563,35.0,3.625) D3(3.625,35.0,3.688) D3(3.688,35.0,3.750)\n D3(3.750,34.0,3.813) D3(3.813,35.0,3.875) D3(3.875,35.0,3.938) D3(3.938,35.0,4.000) D3(4.000,37.0,4.125) D3(4.000,18.0,4.125)\n D3(4.125,38.0,4.188) D3(4.188,37.0,4.250) D3(4.250,37.0,4.313) D3(4.250,18.0,4.375) D3(4.313,38.0,4.375) D3(4.375,37.0,4.438)\n D3(4.438,37.0,4.500) D3(4.500,38.0,4.563) D3(4.500,18.0,4.625) D3(4.563,37.0,4.625) D3(4.625,37.0,4.688) D3(4.688,37.0,4.750)\n D3(4.750,36.0,4.813) D3(4.813,37.0,4.875) D3(4.875,37.0,4.938) D3(4.938,37.0,5.000) D3(5.000,37.0,5.125) D3(5.000,18.0,5.125)\n D3(5.125,38.0,5.188) D3(5.188,37.0,5.250) D3(5.250,37.0,5.313) D3(5.313,38.0,5.375) D3(5.375,37.0,5.438) D3(5.438,37.0,5.500)\n D3(5.500,38.0,5.563) D3(5.500,18.0,5.625) D3(5.563,37.0,5.625) D3(5.625,37.0,5.688) D3(5.688,37.0,5.750) D3(5.750,36.0,5.813)\n D3(5.813,37.0,5.875) D3(5.875,37.0,5.938) D3(5.938,37.0,6.000) D3(6.000,35.0,6.125) D3(6.000,16.0,6.125) D3(6.125,36.0,6.188)\n D3(6.188,35.0,6.250) D3(6.250,35.0,6.313) D3(6.250,16.0,6.375) D3(6.313,36.0,6.375) D3(6.375,35.0,6.438) D3(6.438,35.0,6.500)\n D3(6.500,36.0,6.563) D3(6.500,16.0,6.625) D3(6.563,35.0,6.625)\n  \n  \n  // lower one octave\n  //n3.y +=12.; //12 notas\n  //n3.y +=24.; //12 notas\n      \n  // compute note frequency and time  \n  float f = 440.0*pow( 2.0, float(n3.y-69.)/12.0 );\n  float t = time - float(n3.x)/tempo;\n  if( n3.x==0.0 ) return 0.0;\n\n  // prepare wave parameters\n  float w = tau*f;\n  float dwdt = w/iSampleRate; // derivative\n    \n  // mix between bandlimited and raw saw waves  \n  vec2 v = smoothstep(-0.2,0.2,sin(t*vec2(1.0,0.5)) );\n  // build instrument\n  \n  float f1,y;\n  f1=wave1(w*t,1.00*dwdt,v,t,w);\n\n  y=f1;\n  \n  \n  float wf  = 0.4*f1;\n  y=f1*wf;\n  float offset=n3.x+n3.z;\n  //float offset=n3.x;\n   y*=exp(-1.0/n3.z * (t -offset) );\n   \nreturn y;\n}\n\n\n\nvec2 mainSound( in int samp, float time )\n{ float t1=mod(time, ttotal);\n    float y;\n    y= SoundIq(t1)*0.5;\n    float t2;\n \n  return vec2(y);\n}   \n","name":"Sound","description":"","type":"sound"}]}