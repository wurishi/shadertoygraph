{"ver":"0.1","info":{"id":"XdKXz3","date":"1465731915","viewed":1281,"name":" hexagonal tiling 4","username":"FabriceNeyret2","description":"extension of the tuto with screenspace distances.","likes":30,"published":3,"flags":0,"usePreview":0,"tags":["2d","pattern","tiling","hexagonal","tuto","short"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// relying on hexagonal tiling tuto https://www.shadertoy.com/view/4dKXR3\n\nvoid mainImage( out vec4 O, vec2 uv )\n{ \n    vec2 R = iResolution.xy,\n         U = uv = (uv-R/2.)/R.y * 6. *  1.73/2.;          // centered coords\n    \n    U *= mat2(1,-1./1.73, 0,2./1.73);                     // conversion to\n    vec3 g = vec3(U, 1.-U.x-U.y), g2,                     // hexagonal coordinates\n         id = floor(g);                                   // cell id\n    \n    g = fract(g);                                         // diamond coords    \n    g2 = abs(2.*g-1.);                                    // distance to borders\n\n    U = id.xy * mat2(1,.5, 0,1.73/2.);\n    float l00 = length(U-uv),                    // screenspace distance to nodes\n          l10 = length(U+vec2(1,0)-uv), \n          l01 = length(U+vec2(.5,1.73/2.)-uv),\n          l11 = length(U+vec2(1.5,1.73/2.)-uv),\n            l = min(min(l00, l10), min( l01, l11)); // closest node: l=dist, C=coord\n    vec2 C = U+ ( l==l00 ? vec2(0) : l==l10 ? vec2(1,0) : l==l01 ? vec2(.5,1.73/2.) : vec2(1.5,1.73/2.) );\n\n    O = sin(40.*l-2.*iTime) +O-O;\n}","name":"Image","description":"","type":"image"}]}