{"ver":"0.1","info":{"id":"wsXSR7","date":"1550854846","viewed":1001,"name":"simple 2D blur","username":"Schorsch","description":"This is a very simple 2 dimensional blur","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","blur"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// simple blur using direct neighbours\nvec4 blur1(vec2 fragCoord, sampler2D tex) {\n    \n    vec4 color = vec4(0, 0, 0, 0); \n    \n    // sum the pixels colors\n    for(int x=-1; x <= 1; x++) {\n        for(int y = -1; y <= 1; y++) {\n            \n            // get the pixel coordinates at offset (x, y)\n            vec2 coordinate = fragCoord + vec2(x, y);\n            \n            // normalize the coordinates (range from 0 to 1)\n            vec2 normalizedCoordinate = coordinate / iResolution.xy;\n            \n            // sum the color\n            color += texture(tex, normalizedCoordinate);\n        }\n    }\n    \n    // divide the color by the number of colors you sumed up\n    color /= 9.0;\n    \n    return color;\n}\n\n// simple blur using direct neighbours and those next to it\nvec4 blur2(vec2 fragCoord, sampler2D tex) {\n    \n    vec4 color = vec4(0, 0, 0, 0); \n    \n    // sum the pixels colors\n    for(int x=-2; x <= 2; x++) {\n        for(int y = -2; y <= 2; y++) {\n            \n            // get the pixel coordinates at offset (x, y)\n            vec2 coordinate = fragCoord + vec2(x, y);\n            \n            // normalize the coordinates (range from 0 to 1)\n            vec2 normalizedCoordinate = coordinate / iResolution.xy;\n            \n            // sum the color\n            color += texture(tex, normalizedCoordinate);\n        }\n    }\n    \n    // divide the color by the number of colors you sumed up\n    color /= 25.0;\n    \n    return color;\n}\n\n// simple blur with parameter for neighbouring rows/columns named size\nvec4 blur_with_size(vec2 fragCoord, sampler2D tex, int size) {\n    \n    vec4 color = vec4(0, 0, 0, 0); \n    \n    // sum the pixels colors\n    for(int x=-size; x <= size; x++) {\n        for(int y = -size; y <= size; y++) {\n            \n            // get the pixel coordinates at offset (x, y)\n            vec2 coordinate = fragCoord + vec2(x, y);\n            \n            // normalize the coordinates (range from 0 to 1)\n            vec2 normalizedCoordinate = coordinate / iResolution.xy;\n            \n            // sum the color\n            color += texture(tex, normalizedCoordinate);\n        }\n    }\n    \n    // divide the color by the number of colors you sumed up\n    int num_neighbours = (size * 2 + 1) * (size * 2 + 1);\n    color /= float(num_neighbours);\n    \n    return color;\n}\n\n// main function\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//vec4 color = blur1(fragCoord, iChannel1);\n    //vec4 color = blur2(fragCoord, iChannel1);\n    //vec4 color = blur_with_size(fragCoord, iChannel1, 3);\n    vec4 color = blur_with_size(fragCoord, iChannel1, 10);\n    \n    \n    // Output to screen\n    fragColor = color;\n}","name":"Image","description":"","type":"image"}]}