{"ver":"0.1","info":{"id":"tt3yzn","date":"1608371502","viewed":778,"name":"Basic : Navier Stokes","username":"Gijs","description":"Finally took the time to decipher that old \"chapter 38. Fast Fluid Dynamics Simulation on the GPU\" article by nvidia. Use your mouse.","likes":13,"published":1,"flags":32,"usePreview":0,"tags":["2d","fluid","navier","stokes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 c = texture(iChannel0, fragCoord/iResolution.xy);\n    //fragColor = vec4(abs(c.xy)*1.0f, abs(c.z)*100.0f, c.w);\n    fragColor = vec4(c.w);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// advection & boundary & control\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 o = texelFetch(iChannel0, ivec2(fragCoord), 0);  \n    vec4 n = texelFetch(iChannel0, ivec2(fragCoord) + ivec2( 0, 1), 0);\n    vec4 e = texelFetch(iChannel0, ivec2(fragCoord) + ivec2( 1, 0), 0);\n    vec4 s = texelFetch(iChannel0, ivec2(fragCoord) + ivec2( 0,-1), 0);\n    vec4 w = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(-1, 0), 0);\n    \n    // advection\n    vec4 a = texture(iChannel0, (fragCoord-o.xy*dt)/iResolution.xy);\n    fragColor = a;\n\n    \n    // interaction\n    if(sign(iMouse.z)==1.0f)\n    {\n        vec2 d = fragCoord-iMouse.xy;\n        float r = length(d);\n        vec2 d2 = iMouse.xy-abs(iMouse.zw);\n        float r2 = length(d2);\n        if(r2>0.0f)\n        {\n            fragColor.xy += d2/r2*exp(-r*r*0.01f);\n            fragColor.w += 0.5f*exp(-r*r*0.01f);\n            fragColor.w = min(fragColor.w, .8f);\n        }\n    }\n    \n    // boundary condition\n    if(fragCoord.x == 0.5f)\n    {\n        fragColor.xy = -e.xy;\n        fragColor.z = e.z;\n        fragColor.w = 0.0f;\n    }\n    \n    if(fragCoord.y == 0.5f)\n    {\n        fragColor.xy = -n.xy;\n        fragColor.z = n.z;\n        fragColor.w = 0.0f;\n    }\n    \n    if(fragCoord.x == iResolution.x-0.5f)\n    {\n        fragColor.xy = -w.xy;\n        fragColor.z = w.z;\n        fragColor.w = 0.0f;\n    }\n    \n    if(fragCoord.y == iResolution.y-0.5f)\n    {\n        fragColor.xy = -s.xy;\n        fragColor.z = s.z;\n        fragColor.w = 0.0f;\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const float dt = 5.0f;\nconst float dx = 1.00f;\nconst float nu = 0.00001f;\n\n// The velocity field should be divergence free\n// Buffer B & C & D do their best to make sure it is\n// However, currently, they are only allowed 2 jacobi iterations to solve pressure poisson equation\n// This means the velocity field is not perfectly divergence free\n// This, in turn, means that the advection of the dye is poor: dye is lost :(.\n// This problem could be solved by taking smaller time steps, but that is boring of course.","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// pressure poisson\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 o = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    vec4 n = texelFetch(iChannel0, ivec2(fragCoord) + ivec2( 0, 1), 0);\n    vec4 e = texelFetch(iChannel0, ivec2(fragCoord) + ivec2( 1, 0), 0);\n    vec4 s = texelFetch(iChannel0, ivec2(fragCoord) + ivec2( 0,-1), 0);\n    vec4 w = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(-1, 0), 0);\n    \n    // divergence of the velocity\n    float div = (e.x - w.x + n.y - s.y) / (2.0f * dx * dx);\n    \n    // one jacobi iteration\n    float a = 1.0f / ( dx * dx);\n    float p = 1.0f / ( -4.0f * a ) * ( div - a * (n.z + e.z + s.z + w.z));\n\n    fragColor = vec4(o.xy, p, o.w);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// pressure poisson\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 o = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    vec4 n = texelFetch(iChannel0, ivec2(fragCoord) + ivec2( 0, 1), 0);\n    vec4 e = texelFetch(iChannel0, ivec2(fragCoord) + ivec2( 1, 0), 0);\n    vec4 s = texelFetch(iChannel0, ivec2(fragCoord) + ivec2( 0,-1), 0);\n    vec4 w = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(-1, 0), 0);\n    \n    // divergence of the velocity\n    float div = (e.x - w.x + n.y - s.y) / (2.0f * dx * dx);\n    \n    // one jacobi iteration\n    float a = 1.0f / ( dx * dx);\n    float p = 1.0f / ( -4.0f * a ) * ( div - a * (n.z + e.z + s.z + w.z));\n\n    fragColor = vec4(o.xy, p, o.w);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"// projection\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 o = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    vec4 n = texelFetch(iChannel0, ivec2(fragCoord) + ivec2( 0, 1), 0);\n    vec4 e = texelFetch(iChannel0, ivec2(fragCoord) + ivec2( 1, 0), 0);\n    vec4 s = texelFetch(iChannel0, ivec2(fragCoord) + ivec2( 0,-1), 0);\n    vec4 w = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(-1, 0), 0);\n    \n    // gradient of the pressure\n    vec2 grad = vec2( e.z - w.z, n.z - s.z ) / (2.0f * dx * dx);\n\n    // project\n    fragColor = vec4(o.xy - grad, o.zw);\n}","name":"Buffer D","description":"","type":"buffer"}]}