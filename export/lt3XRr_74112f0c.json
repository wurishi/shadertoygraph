{"ver":"0.1","info":{"id":"lt3XRr","date":"1477782726","viewed":1182,"name":"Disco Light","username":"cedric_ith","description":"Visualize any song through this responsive disco ball!","likes":4,"published":1,"flags":64,"usePreview":0,"tags":["light","disco"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"ldS3WR","filepath":"https://soundcloud.com/dj-m3lodic/runaway-with-lost-time","previewfilepath":"https://soundcloud.com/dj-m3lodic/runaway-with-lost-time","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define t iTime\n\n\n// Random Number Generator\nfloat hash( float n ) { return fract(sin(n)*753.5453123); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    \n    // UV is our normalized screen coordinates\n    vec2 uv = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n    \n    uv.x *= iResolution.x / iResolution.y;\n    \n    float vol = texture( iChannel0, vec2(0.05, 0.1)).x;\n    \n    float sphereRadius = vol * 2.5 - 0.5;\n    \n    // Change the sphere movement!\n    vec3 spherePosition = vec3(0.0, 0.0, 0.0);\n    // spherePosition = vec3(sin(t*2.0), cos(t*4.0), sin(t*1.0));\n    \n    \n    \n    ///////////\n    // Color //\n    ///////////\n    \n    // Electric Blue\n    vec3 sphereColor = vec3(0.0, 0.97, 1.0);\n    \n    // Varying Electric Blue\n    // sphereColor = vec3(sin(t), 0.97 + sin(t), 1.0 + sin(t));\n    \n    // Rainbow\n    // sphereColor = vec3(vol/1.2 * sin(t) + 0.3, vol/1.5 * cos(t) + 0.3, vol/1.8 * sin(t*15.0)+0.3 );\n    \n    // Random\n    // sphereColor = vec3(hash(1.0) / 3.0, hash(0.01), hash(0.01));\n    \n    \n    ///////////////\n    // Direction //\n    ///////////////\n    \n    // Head Bobber\n    vec3 lightDirection = normalize(vec3( sin(t*3.324), 0.56, cos(t*6.648) ));\n    \n    // Wild Dancer\n    // lightDirection = normalize(vec3( sin(t*2.0), cos(t*7.4), sin(t*7.0) ));\n    \n    // Halo\n    // lightDirection = normalize(vec3( sin(t*3.0), 0.56, cos(t*3.0) ));\n    \n    \n    vec3 rayPosition = vec3(0.0, 0.0, -4.0);\n    \n    vec3 rayDirection = normalize(vec3(uv, 1.0));\n    \n    float dist;\n    for ( int i = 0; i < 24; ++i ) \n    {\n    \t\n        dist = distance(rayPosition, spherePosition) - sphereRadius;\n        \n        if (dist < 0.001 || dist > 15.0) {\n        \tbreak;\n        } else {\n        \trayPosition += rayDirection * dist;\n        }\n        \n    }\n    \n    vec3 normal = normalize( rayPosition - spherePosition );\n    \n    float illumination = max(dot( normal, lightDirection ), 0.0);\n    \n    sphereColor *= illumination;\n    sphereColor += vec3( 0.4 * pow( illumination, 15.0 ) );\n    \n    if (dist > 9.0) {\n        fragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n    } else {\n    \tfragColor = vec4( sphereColor, 1.0 );\n    }\n    \n    \n    fragColor = vec4( illumination * sphereColor /*uv,0.5+0.5*sin(iTime)*/,1.0 );\n    //fragColor = vec4(vol);\n    \n}","name":"Image","description":"","type":"image"}]}