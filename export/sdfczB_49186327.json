{"ver":"0.1","info":{"id":"sdfczB","date":"1642281293","viewed":114,"name":"Wagon wheel illusion","username":"ejosiah","description":"So I was watching Illusions (Season 1) Ep 1 on curiosity stream and saw this illusion and instantly picked up my mac to code it up. The yellow guide color is to show you the actual direction the wheel is spinning.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sdf","circle","illusion","wheel","wagon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592653589793\n#define TWO_PI 6.28318530718\n\n// set to 0 to turn off yellow guide color\n// set to 1 to break the illusion \n#if 0  \n#define ROT_GUIDE\n#endif\n\n// set SPEED to 3 to start off\n// set SPEED to 15, wheel will be unable to decide which direction to spin\n// set SPEED to 27, wheel will appear to spin 3 degress per frame in opposite direction\n// set SPEED to 30, wheel will appear to not be in motion\n#define SPEED 27.\n#define DEGRESS_TO_RADIANS(deg) ((PI/180.0) * deg)\n\nfloat drawCircles(vec2 polar, float d, float r, float n, float offset, out float i){\n    vec2 uv;\n\n    polar.y += offset;\n    i = floor(polar.y * n/TWO_PI);\n\n    uv.x = d * (fract(polar.y * n/TWO_PI) - .5)/(n/TWO_PI);\n    uv.y = polar.x - d;\n    \n    \n    float c = length(uv) - r;\n    c = smoothstep(0., 0.01, c);\n        \n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2. * fragCoord - iResolution.xy)/iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = vec3(0.65);\n    \n    \n    float r1Offset = 0.2;\n    float r2Offset = 0.01;\n    float delta1 = TWO_PI/12.;\n    float delta2 = delta1/2.;\n    float phaseDelta = 5.0/TWO_PI;\n    \n\n    \n   // uv = vec2(length(uv), atan(uv.y, uv.x));\n    \n    \n    for(int i = 0; i < 5; i++){\n        float r1 = 0.3 + r1Offset * float(i);\n        float r = 0.02 + r2Offset * float(i);\n        float p = (phaseDelta * float(i)) / TWO_PI;\n       \n       \n        float delta = delta1;\n        for(int j = 0; j < 12; j++){\n            float angle = float(j) * delta;\n            angle += iTime * 60. * DEGRESS_TO_RADIANS(SPEED);\n            vec2 c = vec2(cos(angle - p), sin(angle - p)) * r1;\n            float d = length(uv - c) - r;\n            if(d < 0.){\n                col = vec3(0);\n                #ifdef ROT_GUIDE\n                    if(j == 0) col = vec3(1, 1, 0);\n                #endif\n            }\n            \n        }\n        \n        /*\n        p += DEGRESS_TO_RADIANS(SPEED) * iTime * 60.;\n        float id;\n        \n        float c = drawCircles(uv, r1, r, 12., p, id);\n        col *= c;\n        #ifdef ROT_GUIDE\n          if(id == 0.){\n              col = mix(vec3(1, 1, 0), col, c);\n          }\n        #endif\n        */\n\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}