{"ver":"0.1","info":{"id":"MfGXDz","date":"1715030311","viewed":59,"name":"Grayscale Tornado","username":"thom7918","description":"An effort to explore shader programming and get a better feel for manipulating the math to produce cool effects.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","practice","weather","exploration"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#ifdef GL_ES\nprecision mediump float;\n#endif\n\n\n#define PI 3.14159265359\n\nfloat plot(vec2 st, float pct){\n    return  smoothstep( pct-0.034, pct, st.y);\n            // smoothstep( pct, pct+0.02, st.y);\n}\n\nmat2 rotate2d(float angle){\n    return mat2(cos(angle),-sin(angle),\n                sin(angle),cos(angle));\n}\n\nmat2 scale(vec2 _scale){\n    return mat2(_scale.x,0.0,\n                0.0,_scale.y);\n}\nfloat hash( float n ) { return fract(sin(n)*43758.5453123); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec3 color = vec3(0.);\n    vec3 col = vec3(0.2);\n    vec2 p = gl_FragCoord.xy/iResolution.xy;\n    vec2 aspect = vec2(iResolution.x/iResolution.y, 1.0);\n  \n    \n\n\n   \n\n\n    float nTiles = 20.0;\n\n    // sin related variables\n    float wavelength  = 10.;\n    float amp = 0.08 + (cos(iTime))*0.9*(0.01*sin(1.0));\n    amp = 0.08;\n    float freq =9.;\n    float vertical_movement = iTime *0.2;\n    float horizontal_movement= iTime *0.5;\n\n\n    p.x -= 0.5;\n    // Tornado effect\n\n\n    float cutoffHeight = 0.95; // Adjust this to set where the tornado cuts off\n    //\n    float fade = smoothstep(cutoffHeight, cutoffHeight-0.2, p.y); // Gradual fade\n    //\n    p.y -= vertical_movement; // Move the tornado upward\n\n    float tornado = p.y + amp*sin(freq*(p.x-horizontal_movement));\n    float id = floor((tornado)*nTiles);\n    float lv_y = fract(tornado*nTiles);\n    p.y += vertical_movement; // Move the tornado upward\n\n    lv_y = smoothstep(0.5, 0.7, lv_y);\n\n\n    float curr = hash(id);\n    float up = hash(id+1.0);\n    float down = hash(id-1.0);\n    float c_up = mix(curr, up, lv_y);\n    float c_down = mix(curr, down, lv_y);\n    float c = mix(c_up, c_down, lv_y);\n\n\n\n    // ------\n    float delta = 2.0;\n\n    float angle = atan(p.y, p.x);\n    float d = length(p);\n    vec2 v = normalize(p);\n    float edge_shadows = smoothstep(0.0, 0.12, abs((angle/PI)-0.5));\n    float x = abs(p.x*3.5);\n\n    p.x += 0.5;\n\n    color = vec3(c*0.8)*(1.-edge_shadows);\n    color  *= plot(p, x)-(1.-fade);;\n\n\n\n\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}