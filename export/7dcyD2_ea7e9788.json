{"ver":"0.1","info":{"id":"7dcyD2","date":"1654068914","viewed":70,"name":"WGL - Perlin Noise","username":"LuncyTB","description":"learn perlin noise.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159\n\n// #define ABS\n\nvec2 hash2_s(in vec2 uv) {\n    vec2 k = vec2(\n        fract(sin(uv.x * 23.31 + uv.y * -36.31) * 70.1321),\n        fract(sin(uv.y * 7.30 + uv.x * -53.12) * 55.5791)\n    );\n    float r = k.x * PI * 2.0;\n    float l = pow(k.y + 0.001, 0.5);\n    return vec2(cos(r) * l, sin(r) * l);\n}\n\nfloat perlinNoise(in vec2 uv, in float size) {\n    vec2 e = vec2(0.0, 1.0);\n    vec2 v00 = normalize(hash2_s(floor(uv / size) + e.xx));\n    vec2 v01 = normalize(hash2_s(floor(uv / size) + e.xy));\n    vec2 v11 = normalize(hash2_s(floor(uv / size) + e.yy));\n    vec2 v10 = normalize(hash2_s(floor(uv / size) + e.yx));\n    vec2 k = fract(uv / size);\n    /* if (k.x < 0.5) {\n        if (k.y < 0.5) {\n            return v00.x * 0.5 + 0.5;\n        } else {\n            return v01.x * 0.5 + 0.5;\n        }\n    } else {\n        if (k.y < 0.5) {\n            return v10.x * 0.5 + 0.5;\n        } else {\n            return v11.x * 0.5 + 0.5;\n        }\n    } */ // Debug\n    \n#ifdef ABS\n    return 2.0 * abs(mix(\n        mix(dot(v00, k - e.xx), dot(v01, k - e.xy), -cos(k.y * PI) * 0.5 + 0.5),\n        mix(dot(v10, k - e.yx), dot(v11, k - e.yy), -cos(k.y * PI) * 0.5 + 0.5),\n        -cos(k.x * PI) * 0.5 + 0.5\n    ));\n#endif\n    return mix(\n        mix(dot(v00, k - e.xx), dot(v01, k - e.xy), -cos(k.y * PI) * 0.5 + 0.5),\n        mix(dot(v10, k - e.yx), dot(v11, k - e.yy), -cos(k.y * PI) * 0.5 + 0.5),\n        -cos(k.x * PI) * 0.5 + 0.5\n    ) + 0.5;\n    // I use cos to smoothly interpolate.\n}\n\nfloat cloud(in vec2 uv, in float size, in float times, in float att) {\n    float v = 0.0, sum = 0.0;\n    for (float i = 0.0; i < times + 1.0; i++) {\n        float k = pow(att, i);\n        v += k * perlinNoise(uv, size * pow(0.5, i));\n        sum += k;\n    }\n    return v / sum;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec3 col = vec3(1.0);\n    \n    col *= cloud(fragCoord.xy + 64.0 * vec2(cos(iTime * 1.40), sin(iTime * 2.01)), 64.0, 3.0, 0.5);\n    \n    if (iMouse.x > iResolution.x / 2.0)\n    {\n        col = normalize(cross(vec3(0.025, 0.0, dFdx(col.r)), vec3(0.0, 0.025, dFdy(col.r)))) * 0.5 + 0.5;\n    }\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}