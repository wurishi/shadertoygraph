{"ver":"0.1","info":{"id":"ftdyWr","date":"1659594979","viewed":171,"name":"Water dist (generated drips)","username":"lifekilled","description":"Influenced distortion with generated perlin noise.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["distortion","water"],"hasliked":0,"parentid":"Xt3fzM","parentname":"Water distortion"},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// noise from https://www.shadertoy.com/view/XdXGW8\n\nvec2 grad( ivec2 z )  // replace this anything that returns a random vector\n{\n    // 2D to 1D  (feel free to replace by some other)\n    int n = z.x+z.y*11111;\n\n    // Hugo Elias hash (feel free to replace by another one)\n    n = (n<<13)^n;\n    n = (n*(n*n*15731+789221)+1376312589)>>16;\n\n\n    // Perlin style vectors\n    n &= 7;\n    vec2 gr = vec2(n&1,n>>1)*2.0-1.0;\n    return ( n>=6 ) ? vec2(0.0,gr.x) : \n           ( n>=4 ) ? vec2(gr.x,0.0) :\n                              gr;                           \n}\n\nfloat noise( in vec2 p )\n{\n    ivec2 i = ivec2(floor( p ));\n     vec2 f =       fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f); // feel free to replace by a quintic smoothstep instead\n\n    return mix( mix( dot( grad( i+ivec2(0,0) ), f-vec2(0.0,0.0) ), \n                     dot( grad( i+ivec2(1,0) ), f-vec2(1.0,0.0) ), u.x),\n                mix( dot( grad( i+ivec2(0,1) ), f-vec2(0.0,1.0) ), \n                     dot( grad( i+ivec2(1,1) ), f-vec2(1.0,1.0) ), u.x), u.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float dripsAmount = 0.6;\n    float flowSpeedHuge = 1.5;\n    float flowSpeedDrips = 5.;\n    \n    // first octave, huge water zones \n\n\n    // drips\n    vec2 influenceUV = uv * vec2(10, 3) * 6.  + vec2(0., iTime * flowSpeedDrips);;\n    vec2 influence = (vec2(noise( influenceUV ), noise( influenceUV + vec2(.423,.254))) - vec2(.5));\n    \n    influenceUV = uv * vec2(10, 3) + vec2(0., iTime * flowSpeedHuge);\n    influence += clamp(0.3, 1., noise( influenceUV ) - .3) * 0.3;\n    \n    influence *= (clamp(dripsAmount, 1., length(influence)) - dripsAmount) * 10.;\n\n    // apply\n    uv += influence * 0.001;    \n    uv = clamp(uv, vec2(0.), vec2(1.));\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel0, uv).rgb;\n\n    // debug influence texture\n    //col = vec3(influence, 0.);\n\n    // Output to screen\n    fragColor = vec4(col * vec3(0.6, 0.6, 1.2),1.0);\n}","name":"Image","description":"","type":"image"}]}