{"ver":"0.1","info":{"id":"msjGWW","date":"1667625044","viewed":109,"name":"Red Blood Cell","username":"trigophers","description":"yeh yeh blood blood","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["red","cell","blood"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.14159265359\n\nvec3 center;\nvec3 ray;\nvec3 color;\nvec3 normal;\nbool hit;\nvec4 resColor;\n\nfloat sMin(float a, float b, float k) {\n    float t = max(k - abs(a - b), 0.0) / k;\n    return min(a, b) - t * t * t * k * 0.16666666667;\n}\n\nfloat sMax(float a, float b, float k) {\n    float t = max(k - abs(a - b), 0.0) / k;\n    return max(a, b) + t * t * t * k * 0.16666666667;\n}\n\nfloat Union(float d1, float d2) { return min(d1, d2); }\nfloat sUnion(float d1, float d2, float k) { return sMin(d1, d2, k); }\nfloat Intersection(float d1, float d2) { return max(d1, d2); }\nfloat sIntersection(float d1, float d2, float k) { return sMax(d1, d2, k); }\nfloat Difference(float d1, float d2) { return max(d1, -d2); }\nfloat sDifference(float d1, float d2, float k) { return sMax(d1, -d2, k); }\n\nfloat sphereSDF(vec3 p, vec3 pos, float r) { return distance(p, pos) - r; }\n\nfloat diskSDF(vec3 p, vec3 n, vec3 pos, float r, float t) {\n    vec3 d = dot(p - pos, n) * n;\n    vec3 o = p - pos - d;\n    o -= normalize( o ) * min( length( o ), r );\n    return length( d + o ) - t;\n}\n\nfloat scene(vec3 p) {   \n    vec3 norm = normalize(vec3(\n        sin(iTime * 0.2 + 0.0), \n        sin(iTime * 0.4 + 0.455), \n        sin(iTime * 0.6 + 0.892)\n    ));\n    \n    vec3 pos = vec3(0.0, 6.0, 0.0);\n    \n    float di = diskSDF(p, norm, pos, 5.0, 3.0);\n    float s1 = sphereSDF(p, pos + 6.5 * norm, 5.0);\n    float s2 = sphereSDF(p, pos - 6.5 * norm, 5.0);\n\n    return sDifference(sDifference(di, s1, 3.0), s2, 3.0);\n    //return Difference(Difference(di, s1), s2);\n}\n\nfloat march(int maxSteps, float maxDist, float minDist) {\n    hit = false;\n    \n    float travel = 0.0;\n    for (int i = 0; i < maxSteps; i++) {\n        float d = scene(center + travel*ray);\n        if (d < minDist) { hit = true; return travel; }\n        if (travel > maxDist) { return 0.0; }\n        travel += d;\n    }\n}\n\nvec3 calcNormal( vec3 pos )\n{\n    const float ep = 0.0001;\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    return normalize( e.xyy*scene( pos + e.xyy*ep ) + \n\t\t\t\t\t  e.yyx*scene( pos + e.yyx*ep ) + \n\t\t\t\t\t  e.yxy*scene( pos + e.yxy*ep ) + \n\t\t\t\t\t  e.xxx*scene( pos + e.xxx*ep ) );\n}\n\nfloat surfaceArea(vec3 i, vec3 n) {\n    return max(cos(pi*(1.0-dot(i, n))/2.0), 0.0);\n}\n\nvec3 circleLight(vec3 pos, float r, vec3 power, vec3 intersection, vec3 n, vec3 lightnormal) {\n    vec3 light = pos;\n    vec3 li = light-intersection;\n    vec3 lightVec = normalize(li);\n    float invSq = dot(li, li);\n    float area = surfaceArea(-lightVec, lightnormal)*pi*r*r;\n    center = intersection-n/100.; //no shadow acne\n    ray = lightVec;\n    march(256, 64.0, 0.01);\n    if (!hit) return vec3(0);\n    return surfaceArea(lightVec, n)/invSq*power*area;\n}\n\nvec3 raymarch(vec2 uv) {\n    center = vec3(0, 6, -30);\n    ray = normalize(vec3(uv, 1.5));\n    \n    float d = march(400, 64.0, 0.005);\n    if (hit) {\n        vec3 inters = center + d*ray;\n        normal = calcNormal(inters);\n        float skim = dot(normal, ray) * 0.5 + 0.5;\n        skim = skim * skim * skim;\n        //return vec3((normal + 1.0) / 2.0);\n        vec3 c1 = circleLight(vec3(8.0, 15.0, -10.0), 3.0, 1.5*vec3(2.0, 2.5, 2.0), inters, normal, vec3(0, -1, 0));\n        vec3 c2 = circleLight(vec3(-4.0, -10.0, -15.0), 3.0, 2.0*vec3(0.5, 0.2, 0.1), inters, normal, vec3(0, 1, 0));\n        \n        return (c1 + c2) * vec3(0.9, 0.1, 0.1) + vec3(skim);\n    } else {\n        return vec3(0);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 px = (fragCoord - iResolution.xy / 2.0) / iResolution.y;\n    fragColor = vec4(pow(raymarch(px), vec3(.4545)), 1.0);\n}","name":"Image","description":"","type":"image"}]}