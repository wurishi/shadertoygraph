{"ver":"0.1","info":{"id":"Ns2yRG","date":"1643693525","viewed":90,"name":"CartesianGrid","username":"mulletdulla","description":"Cartesian grid set up","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["grid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 gridColor = vec3(0.2, 0.2, 0.5);\nfloat SCALE=.02;\n\n// convert fragment space to point space\nvec2 frag2point(in vec2 frag, float scale) {\n    return scale*(frag - 0.5*iResolution.xy);\n}\n\nfloat sfrac2(float x) { return fract(.5*x) - .5; } // half-density\n\n// calculate stroke intensity from number of positive samples\nfloat samples2stroke(float ratio) {\n     return smoothstep(0.0, 0.5, ratio)*smoothstep(1.0, 0.5, ratio);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Pixel color\n    vec3 col = vec3(1.);\n    \n    // TIME\n    float loopTime = mod(iTime * 2., 4.);\n    \n    // UV coords\n    float scaleOverTime = loopTime * SCALE;\n    fragCoord.y -= loopTime * 50.;\n    vec2 uv = frag2point(fragCoord.xy, scaleOverTime);\n    \n    // draw grid\n    float horizontalTile = step(.25, abs(sfrac2(uv.x) + sfrac2(uv.y)));// - step(.25, abs(sfrac2(uv.y)));// *  step(.1, abs(sfrac2(uv.y)));\n    float diagonalTile = step(.005, abs(sfrac2(uv.x)) - abs(sfrac2(uv.y)) );\n    \n    float c = mix(horizontalTile, diagonalTile, smoothstep(0., 1., loopTime / 4.));\n    col = vec3(c);\n\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}