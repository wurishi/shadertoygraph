{"ver":"0.1","info":{"id":"DtVBRD","date":"1701888125","viewed":57,"name":"Rotating cube in cosmos","username":"nayk","description":"cube, space,rotate, new,copypast","likes":2,"published":1,"flags":1,"usePreview":0,"tags":["fractal","cube","rotate","space","new","copypast"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*original https://www.shadertoy.com/view/lslyRn, /* original https://www.shadertoy.com/view/lsyXDK https://www.shadertoy.com/view/lslyRn https://www.shadertoy.com/view/DlycWR and other*/\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.010\n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n//get coords and direction\nvec3 dir=rd;\nvec3 from=ro;\n\n//volumetric rendering\nfloat s=0.1,fade=1.;\nvec3 v=vec3(0.);\nfor (int r=0; r<volsteps; r++) {\nvec3 p=from+s*dir*.5;\np = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\nfloat pa,a=pa=0.;\nfor (int i=0; i<iterations; i++) {\np=abs(p)/dot(p,p)-formuparam; // the magic formula\na+=abs(length(p)-pa); // absolute sum of average change\npa=length(p);\n}\n\na*=a*a; // add contrast\nif (r>6) fade*=1.3; // dark matter, don't render near\n//v+=vec3(dm,dm*.5,0.);\nv+=fade;\nv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\nfade*=distfading; // distance fading\ns+=stepsize;\n}\nv=mix(vec3(length(v)),v,saturation); //color adjust\nfragColor = vec4(v*.01,1.);\n}\nfloat cheap_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n\nvec2 rotate(vec2 v, float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return vec2(v.x * c - v.y * s, v.x * s + v.y * c);\n}\n#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n//get coords and direction\nvec2 uv=fragCoord.xy/iResolution.xy-.5;\nuv.y*=iResolution.y/iResolution.x;\nvec3 dir=vec3(uv*zoom,1.);\nfloat time=iTime*speed+.25;\n\n  vec4 O =fragColor;\n    vec2 C =fragCoord;\n   \n O=vec4(0);\n    vec3 p,q,r=iResolution,\n    d=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<110.;\n        O.xyz+=mix(vec3(3),H(g*2.1),sin(2.8))*1./e/8e3\n    )\n    {\n        p=g*d;\n        p.z+=-iTime*0.15;\n        a=25.;\n        p=mod(p-a,a*2.)-a;\n        s=5.;\n          p.xy+=rotate(p.xy,-iTime/15.-length(p.xy)*.01);\n             \n        for(int i=0;i++<8;){\n            p=.23-abs(p);\n            ;\n            p.x<p.z?p=p.zyx:p;\n            p.z<p.y?p=p.xzy:p;\n     \n            s*=e=1.7+sin(-iTime*.234)*.1;\n            p=abs(p)*e-\n                vec3(\n                    1.+cos(iTime*.3+.5*sin(iTime*.3))*2.,\n                    120,\n                    2.+cos(iTime*.5)*5.\n                 );\n         }\n         g+=e=length(p.yz)/s;\n    }\nmat2 rot1=mat2(cos(iTime*0.02),sin(iTime*0.02),-sin(iTime*0.02),cos(iTime*0.02));\nmat2 rot2=mat2(cos(iTime*0.02),sin(iTime*0.02),-sin(iTime*0.02),cos(iTime*0.02));\ndir.xz*=O.xz*rot1;\nvec2 m = (.5 * iResolution.xy - iMouse.xy) / iResolution.x * 6.28;\n    vec3 e = vec3(cos(m.x) * cos(m.y), sin(m.x) * cos(m.y), sin(m.y));\n    vec3 u = normalize(vec3(e.y, -e.x, 0));\n    vec3 v = cross(e, u);\n   \n    vec3 d2 = e + uv.x * u + uv.y * v;\n    vec3 a = (e + .1) / d2;\n    vec3 b = (e - .1) / d2;\n    float mi = max(max(min(a.x, b.x), min(a.y, b.y)), min(a.z, b.z));\n    float ma = min(min(max(a.x, b.x), max(a.y, b.y)), max(a.z, b.z));\n    float t = mi < ma ? mi : 10.;\n    vec3 i = e - d * t;\n    vec3 c = (step(-.099, i) + step(.099, i) - 1.) * d2;\nvec3 from=vec3(1.,.5,0.5)+i;\nfrom+=vec3(time*2.,time,-2.);\n   // anim between 0.9 - 1.1\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  \n\nmainVR(fragColor, fragCoord, from, dir);\n     fragColor*= vec4(cheap_star(uv,anim) * vec3(0.15,0.12,0.15)*0.3, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}