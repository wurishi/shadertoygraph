{"ver":"0.1","info":{"id":"3l2fWz","date":"1641061052","viewed":39,"name":"basics 03 - camera","username":"rockes","description":"https://www.youtube.com/watch?v=PBxuVlp7nuM\noriginal \nhttps://www.shadertoy.com/view/4dfBRf","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["tutorial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float DistLine(vec3 ro, vec3 rd, vec3 p) {\n\treturn length(cross(p-ro, rd))/length(rd);\n}\n\nfloat DrawPoint(vec3 ro, vec3 rd, vec3 p) {\n\tfloat d = DistLine(ro, rd, p);\n    float val = smoothstep(.06, .05, d); //0 <> 1\n    return val;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat t = iTime;\n    \n    vec2 uv = fragCoord.xy / iResolution.xy; // 0 <> 1\n    uv -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 ro = vec3(3.*sin(t), 2., -3.*cos(t)); //ray origin\n    \n    vec3 lookat = vec3(.5);\n    \n    float zoom = 1.;\n    \n    vec3 f = normalize(lookat-ro); //forward\n    vec3 r = cross(vec3(0., 1., 0.), f); //right\n    vec3 u = cross(f, r); //up\n    \n    vec3 c = ro + f*zoom; //center\n    vec3 i = c + uv.x*r + uv.y*u; //intersection\n    vec3 rd = i-ro; //ray direction\n    \n   \n    \n    float d = 0.; //distance\n    \n    d += DrawPoint(ro, rd, vec3(0., 0., 0.));\n    d += DrawPoint(ro, rd, vec3(0., 0., 1.));\n    d += DrawPoint(ro, rd, vec3(0., 1., 0.));\n    d += DrawPoint(ro, rd, vec3(0., 1., 1.));\n    d += DrawPoint(ro, rd, vec3(1., 0., 0.));\n    d += DrawPoint(ro, rd, vec3(1., 0., 1.));\n    d += DrawPoint(ro, rd, vec3(1., 1., 0.));\n    d += DrawPoint(ro, rd, vec3(1., 1., 1.));\n    \n    \n\tfragColor = vec4(d);\n}","name":"Image","description":"","type":"image"}]}