{"ver":"0.1","info":{"id":"7tlBWN","date":"1650979098","viewed":231,"name":"Pixel Lines V2","username":"SnoopethDuckDuck","description":"Inspired by this post: https://twitter.com/andrevenancio/status/1514417812969865217\n(very cool)","likes":3,"published":3,"flags":32,"usePreview":0,"tags":["copy","thing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Scale factor to enlarge image by\n    float sf = dim.y / (iResolution.y - dim.y);\n\n    // Scale and centre image to screen\n    vec2 coord = ceil(sf * fragCoord) ;\n    coord -= ceil(sf * 0.5 * iResolution.xy - 0.5 * dim);\n\n    vec3 col = texelFetch(iChannel0, ivec2(coord), 0).rgb;\n    \n    // Sloppy way of keeping it square-ish\n    // if (coord.x < - 11. || coord.x >= dim.x + 11.)\n    //     col = vec3(0.825);\n        \n    fragColor = vec4(col, 1.);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define pi 3.14159\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define lineCol(x) ( .5 + .5 * thc(4., x+2. * pi / 3.*vec3(-1,0,1)) )\n\n// y = sin(t) + x * cos(t) line\nfloat line(vec2 f, float t) {\n    float y = mix(f.x * cos(t), dim.y * sin(t), 0.3);   \n    return step(f.y, y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Center fragCoord\n    fragCoord -= 0.5 * dim;\n\n    vec3 col = vec3(0);\n    \n    float n = 15.;\n    for (float i = 0.; i < n; i++) {\n        // Lower framerate + offset time for each line\n        float time = floor(30. * iTime) / 30. + pi * i / n;\n        \n        // Center line (draw everything under the line)\n        float c = line(fragCoord, time); \n        \n        // Shift line up/down/left/right\n        float t = line(fragCoord - vec2(0,1), time);\n        float b = line(fragCoord + vec2(0,1), time);\n        float l = line(fragCoord - vec2(1,0), time);\n        float r = line(fragCoord + vec2(1,0), time);\n        \n        // Only draw cells which have 0 and 1 cell neighbours\n        float mx = max(max(t,b), max(l,r));\n        float mn = min(min(t,b), min(l,r));\n         \n        // Only draw new line if a line hasn't been drawn already on this pixel\n        if (col == vec3(0))\n            col = c * (mx - mn) * lineCol(2. * pi * i / n + 0.75 * pi);\n        else\n            break;\n    }\n    \n    // Restrict to bounds\n    col *= step(fragCoord.x, 0.5 * dim.x) * step(fragCoord.y, 0.5 * dim.y);\n    \n    fragColor = vec4(col, 1.);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// dimensions of sprite - has to be less than screen dimensions\nconst vec2 dim = vec2(81);","name":"Common","description":"","type":"common"}]}