{"ver":"0.1","info":{"id":"WlS3Dd","date":"1561531830","viewed":603,"name":"joe plays banjo","username":"nabr","description":"who needs a DAW ahahahaha","likes":34,"published":1,"flags":8,"usePreview":0,"tags":["synth","song","reverb","track","riff","strings","lowpass","chords","arpeggio","banjo","cello","algorave"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// nabr\n// https://www.shadertoy.com/view/WlS3Dd\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// https://creativecommons.org/licenses/by-nc-sa/3.0/\n\n\n\n\nfloat f(vec2 v){\n\tvec3 p=smoothstep(0.,12.,1.-dot(v,v))*vec3(v,10.*exp(1.25*sin(.5*iTime))),\n\tn=100.*normalize(-abs(p)-vec3(0,0,.91));\n\tfloat tm=.35*iTime;\n\tfor(float i=0.;i<=7.;i++){\n\t\tp=20.*n+vec3(cos(tm+i-p.x)+cos(tm+i-p.y),sin(i-p.y)+cos(i+p.x),1);\n\t\tp.xy=n.yz+(cos(i)*p.xy+sin(i)*abs(vec2(p.y,-p.x)));\n\t}\n\treturn dot(vec3(4,6,-10),-p);\n}\nvoid mainImage(out vec4 O,in vec2 U)\n{\n\tvec2 R=iResolution.xy,e=vec2(9e-4,0);\n\tfloat dc=.3*abs(fract((U.x*U.y)/(R.x/R.y))-.5);\n\tU=(U-.5*R)/min(R.x,R.y);\n\tif(abs(U.y)>=.45){O=vec4(1);return;};\n\tvec3 sn=normalize(vec3(f(U+e)-f(U-e),f(U+e.yx)-f(U-e.yx),-.2));\n\tO.xyz=dc+vec3(.85)-clamp(dot(normalize(vec3(U,3.)),-sn),.05,.85);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// nabr\n// https://www.shadertoy.com/view/WlS3Dd\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// https://creativecommons.org/licenses/by-nc-sa/3.0/\n\n\n\n\n/*  _                       _                    \n   (_)                     | |                   \n    _   ___    ___   _ __  | |  __ _  _   _  ___ \n   | | / _ \\  / _ \\ | '_ \\ | | / _` || | | |/ __|\n   | || (_) ||  __/ | |_) || || (_| || |_| |\\__ \\\n   | | \\___/  \\___| | .__/ |_| \\__,_| \\__, ||___/\n  _/ |       _      | |           _    __/ |     \n |__/       | |     |_|          (_)  |___/      \n            | |__    __ _  _ __   _   ___        \n            | '_ \\  / _` || '_ \\ | | / _ \\       \n            | |_) || (_| || | | || || (_) |      \n            |_.__/  \\__,_||_| |_|| | \\___/       \n                                _/ |             \n                               |__/\n*/\n\n// Cm Fm Fm7 Eb | Ab Dbmaj7 Ab G7 | Cm Fm7 Bb7 Ebmaj7 | Abmaj7 Ab7#11 Ab7 G7 |\nconst struct F{mat4 m;} f[4] = F[4](\n\tF(mat4(48, 55, 60, 63, 53, 60, 63, 68, 46, 53, 58, 62, 51, 58, 63, 67)),\n\tF(mat4(44, 48, 56, 60, 50, 53, 56, 60, 44, 54, 60, 63, 43, 53, 59, 62)),\n\tF(mat4(48, 55, 60, 63, 53, 60, 63, 68, 46, 53, 56, 62, 51, 58, 62, 67)),\n\tF(mat4(44, 48, 55, 60, 44, 50, 54, 60, 44, 54, 60, 63, 43, 53, 59, 62)));\n// [1]\n#define rndp(_rn,_mv)((1315313u %(_rn+1u))%_mv)\n// [5]\n#define m2f(_fm)(2764.564*exp2((_fm-69.)*.083334))\n// ---------------- SYNTH\nfloat synth(in float rt, in float tck, int ch)\n{\n\t// init\n\tfloat arp = 0., arr = 0., ftm = mod(4. * tck, 1.), parp = 0.,tpm = 1.;\n\t// chord, freqn, pitch variation\n\tuint chd = 0u, fn = 0u, ipm = 0u, uck = uint(tck);\n\t// chords\n\tchd =  uint((uck% 8u<3u? .25 : .125) * tck) % 4u;\n\tipm = rndp(uint(iDate.w - tck), 3u);\n\tif(bool(int[](0, 1, 0, 0, 1, 0, 1, 0)[uck % 8u]))\n\ttpm = float[](1., 2., 4.)[ipm];\n\tfn = uint(tpm * tck) % 4u;\n\t// [6]\n\tswitch(int(4. * tck) % 4)\n\t{\n\tcase 0:\n\t\tarr=m2f(f[chd].m[fn].x);\n\t\tbreak;\n\tcase 1:\n\t\tarr = m2f(f[chd].m[fn].y);\n\t\tbreak;\n\tcase 2:\n\t\tarr = m2f(f[chd].m[fn].z);\n\t\tbreak;\n\tcase 3:\n\t\tarr = m2f(f[chd].m[fn].w);\n\t\tbreak;\n\tdefault:(arr = 1.);\n\t};\n\tarr = arr * rt;\n\t// ---- cello\n\tarp = .5 * (.1 * sin(3.98 * arr) + (sin(arr) * abs(.5 - cos(arr))));\n\tparp = arp;\n\t// ---- banjo | sq2\n\tif(ch == 1)\n\t{\n\t\tarp = .5 * (.251 * sin(3.98 * arr) + (sin(arr) * abs(.25 - cos(arr))));\n\t\tarp = mix(arp, .002 * max(0., 1. - (699. * asin(arp))), .35);\n\t\tarp *= min(1., 25. * ftm) * max(0., 1. - ftm);\n\n\t\tif ((mod(4. * tck, 4.) > 2.) && rt > 17.6) \n\t\t{\n\t\t\tarp = .4 * (-1. * parp * 7. * arp * (cos(2. * rt) * .55 + .55));\n\t\t\tarp *= min(1., 25. * ftm) * max(0., 1. - ftm);\n\t\t}\n\t\t// sq3\n\t\tif (ch == 2) return 0.;\n\n\t\treturn arp;\n\t}\n\telse\n\t{\n\t\t// [2] fuzzy amp\n\t\tarp = mix(arp, .0125 * max(0., .25 - (700. * asin(arp))), .3);\n\t\tarp *= min(1., 1. * ftm) * max(0., 1. - ftm);\n\t\treturn arp;\n\t}\n}\nfloat kick(float rt, float tck)\n{\n\tint itck = int(tck);\n\tfloat d = 0., d1 = 0., wd = 0.,tm = mod(tck, 1.);\n\t// sq 3\n\tif (rt > 43.2 && rt < 50.4)\n\t{\n\t\td1 = sin(753.6 * tm * exp(-3. * tm)) * .1 + sin(282.6 * tm * exp(-2.1 * tm));\n\t\td1 = d1 + .012 * sin(tck + 1000. * exp(tm * 30.));\n\t\td1 *= float[](0., 1., 0., 1., 1., 0., 0., 1.)[itck% 8];\n\t\td1 += abs(.2 * sin(445. * tck + exp(.5 - sin(tck)))) * exp(-tm)\n\t\t+ .0052 * sin(tck + 5000. * exp(tm * 70. - sin(tck))); // noise\n\t\treturn .5 * (d1 + .1 + clamp(d1 + (-d1 * sqrt(4. * d1 * d1)), -.7, .7));\n\t};\n\t// sq4\n\tif (rt > 50.4 && rt < 55.)\n\t{\n\t\treturn\n\t\t.2 * abs(.51 - sign(sin(tm * 100. * exp(.1 * tm - sin(tm))))) * sin(rt * 12.)\n\t\t+ .06 * (sin(tm * 1500. * exp(.051 * ceil(tm) - sin(tm))));\n\t}\n\t// sq2\n\t/*\n\t// array before hex conversation\n\tconst float X = 1., _ = 0.;\n\td *= float[](X, _, _, X,\n\t\t\t\t\tX, _, X, _,\n\t\t\t\t\tX, _, _, _,\n\t\t\t\t\tX, _, X, _,\n\t\t\t\t\tX, _, _, X,\n\t\t\t\t\tX, _, X, _,\n\t\t\t\t\tX, _, X, _,\n\t\t\t\t\tX, _, _, X)[int(tck) % 32];\n\t*/\n\tif (bool(0x95595159 >> itck % 32 & 1)){\n\t\td = .7 * ((sin(70.*tck) * exp(-5. * tm)) + (.2 * sin(350.*tck) * exp(-10.*tm)));\n\t\td *= min(1., 50. * tm) * max(0., 1. - tm);\n\t}\n\t// [3]\n\tif (!bool(0x59 >> itck % 8 & 1)) {\n\t\twd = .2*((sin(719.5825 * tck) * exp(-10.*tm)) + (.01 * sin(tck * 233.33 * exp(50. * tm))));\n\t\twd *= min(1., tm * 100.) * max(0., 1. - tm);\n\t}\n\treturn (d + wd);\n}\nvec2 mainSound( in int samp,float time)\n{\n\t// ---------------- INTRO sq 1-3\n\tvec2 mst= vec2(0), rev = vec2(1);\n\tfloat tck = time * 1.8; // time/60.*108\n\tfloat d = kick(time, 4.*tck);\n\tint ch = 0; \n\tif(tck >= 16.) ch = 1;\n\tif(tck >= 44.) ch = 2;\n\tif(time>54.2)// midpart slow\n\ttck = float(1u+rndp( uint(iDate.w),59u))-(time *.1);\n\t// [4]\n\tmst = vec2(synth(time+.249, tck, ch), synth(time+.215, tck, ch));\n\t// [7]\n\tmst += (.5 * mst - .25 * vec2(synth(time, tck,ch), synth(time, tck,ch)));\n\t// ---------------- DELAY\n\t// [8]\n\tfloat[13]ak=float[](.99981,.98644,.95820,.94164,.89493,.83762,.80774,.72377,.67756,.67003,.56666,.54326,.47324),\n\t\t\t dk=float[](.27533,.24324,.38257,.35997,.49894,.63750,.64041,.83136,.87611,.80124,.02303,.99919,1.12316);\n\tfor(int j = 0;j<13;j++){\n\t\tfloat t2 = abs(tck - dk[j]); \n\t\trev += vec2(synth(1.00545 * time,t2,ch), synth(1.00245 * time, t2,ch)) * ak[j];\n\t}\n\trev *=.1;\n\t// ---------------- MASTER\n\t// premix adjust reverb wetlevel for banjo part\n\tfloat wetlvl = (tck > 16. && tck < 32.) ? 1. : .7;\n\tmst = (rev * wetlvl + mst);\n\t\n\tif(time > 20. && time < 26.){//sq2\n\t\tmst = mst + d;\n\t}\n\tif(time > 43.2 && time < 54.6){//sq 3\n\t\tmst = vec2( d, d );\n\t}\n\tif(time > 54.6){//midpart\n\t\tmst = rev + .5 * mst;\n\t}\n\t// ---------------- OUTRO\n\tfloat t = time;\n\tif (t >= 90.)\n\t{\n\t\tint x = int(t * .5) % 4, on = int(t * .125) % 4;\n\t\tfloat ftm = mod(t * .5, 1.);\n\t\t// partially fixes: time becomes very hairy over time :)\n\t\t#define mtime (gl_FragCoord.x + gl_FragCoord.y * 512.) / iSampleRate\n\t\tvec4 r0 = mtime * m2f(f[on].m[x].xzyw);\n\t\tmst = .25 * ((sin(r0.xw) + sin(r0.yz)) * min(1., ftm * 250.) * max(0., 1. - ftm));\n\t\tfloat b = .15 * (sin(.5 * r0.x) - sin(.75 * r0.x));\n\t\tb += .025 * (cos(2.01 * r0.y) + sin(2.01 * r0.w));\n\t\tb *= min(1., ftm * 100.) * max(0., .8 - ftm);\n\t\tvec2 dr = vec2(0);\n\t\tif (!bool(0x9249 >> int(t * .0625) % 16 & 1))\n\t\t{\n\t\t\tint it = int(t * 4.);\n\t\t\tfloat tm = mod(t * 4., 1.);\n\t\t\tfloat dr1 = .5 * (sin(tm * 120.) * exp(-tm * 20.));\n\t\t\tdr1 *= min(1., tm * 500.) * max(0., 1. - tm);\n\t\t\tdr1 += (.3 * sin(.2 + tm * 120.) * exp(-tm * 1.));\n\t\t\tdr1 *= min(1., tm * 100.) * max(0., 1. - tm);\n\t\t\tdr1 *= float(bool(0xD5B5 >> it % 16 & 1));\n\t\t\tfloat p = float[](72., 77., 75.)[it % 3];\n\t\t\tfloat cl = .2 * cos(t * m2f(p));\n\t\t\tcl *= min(1., tm * 250.) * max(0., 1. - tm);\n\t\t\tcl *= float(bool(0x5A4D >> it % 16 & 1));\n\t\t\tdr = vec2(cl * .2, cl * .4) + dr1;\n\t\t}\n\t\tmst = (.385 * mst - b) + dr;\n\t}\n\treturn mst;\n}\n/* N O T E S:\n----------------\nfirst things first: it is not my intention to teach anybody, i just share my experience\ni dont claim any correctness, it is my personal evaluation and interpretation of the data\n----------------\n[1]\n//| rndp Func\n//| onlice c-compiler link: \n//| https://repl.it/@tolkanabroski/TastyUpbeatWamp\n//| \n//| #define rndp(_rng,_maxval)((1315313u%(_rng+1u))%_maxval) +1u add to avoid zero values\n----------------\n[2]\n//| Fuzzy Amp\n//| the steps: amplification -> normalisation -> interpolation\n//| imput signal : \n//| https://www.desmos.com/calculator/669ljrbkta\n//| scrshot completely dry signal with fuzzyamp \n//| https://s3.gifyu.com/images/fuzzyamp_scrshot.jpg \n//| wave crest - upper half: smooth \n//|     trough - bottom half:  triangular ramp\n//| (2pi440Hz)/4 = 691 i choose 700. as amplification value\n//| normalization  magicnr. 0.0125 | cut via max() | interpolated via mix()\n//| 0.0125 * max(asin())\n//| visualization starter kit:\nvoid mainImage(out vec4 O, in vec2 U)\n{\n    vec2 R = iResolution.xy;\n    U = 2. * (U + U - R) / R.y;\n    O.rgb += (max(0., 1.-dot(vec2(sin(iTime) * 15.), asin(vec2(U.x, U.y)) /3.14159)) * R.y);\n}\n// wiki on phase rectifier: https://en.wikipedia.org/wiki/Rectifier\n----------------\n[3]\n//| Hex beat \n//| 10011010 hex representation(fliped) 0x59\n//| online c-compiler link: \n//| https://repl.it/@tolkanabroski/bin2hex\n//| Matlab / Octave v 4.4.1\ndisp(cat(2, \"0x\", dec2hex(bin2dec(fliplr(\"10011010\")))));\n//| depending on where 0 and 1 is  we need to flip the array\n//| 0Xyranib >> time mod num_of_bits &AND 1\n//| tutorial bitwise: https://www.tutorialspoint.com/cprogramming/c_bitwise_operators.htm\n----------------\n[4]\n//| Time shift\n//| time and phase difference is the very basic understanding of a stereo signal\n//| of course it comes (can end in a bad meaning) with phase correlation, also a concept called DC offset  \n//| it can be also interpreted as an pre- eqing step\n//| https://duckduckgo.com/?q=haas+effect\n----------------\n[5]\n//| Midi to Freq\n//| 2pi440 = 2764.6015 so it is slightly down-tuned\n----------------\n[6]\n//| Things i learned the hard way: i run into a bug on mobiles\n//| finally i discovered the source of the problem and also the solution \n//| using a switch statement\n//| previously i was casting to a vec4 right after that to an array \n//| wont work on some mobiles\n//| float arr = float[](mat.x, mat.y, mat.z, mat.w)[int(time)];\n//|\n----------------\n[7]\n//| 1st Ord. High - pass \n//| https://en.wikipedia.org/wiki/Low-pass_filter#First_order\n//| because of the previous operation of time shift in narrow sense it is not \n//| a high pass filter, but it is doing something to the sound i like.\n//| tutorial: https://www.youtube.com/watch?v=rSBy3KUX_s4\n----------------\n[8]\n//| 10.05.2020 changed to a precomputed version\n//|\n//based on reverb by TekF https://www.shadertoy.com/view/XldcRr\nfloat sum = 0.;\nconst float invRate = 0.08; // 1./12.5;\nfloat rand = 1., t2 = 1., amp = 1.;\nfor (float _ii = 0.; (_ii <= 1.); _ii += invRate)\n{\n    rand = fract(120. * sin(_ii * 1000.));\n    t2 = (invRate + _ii) + (.199 * rand);\n    amp = exp2(-_ii * t2);\n    rev += vec2(synth(rchr0 * time, tck - t2), synth(rchr1 * time, tck - t2)) * amp;\n    sum += amp;\n};\nrev /= sum;\n//|\n[ ]\n//| you can still hear clicks, when in sequence changes im fine with it.\n========================================================================\n----------------\n//| Goodreads (via google translate)\n//|\n//| https://qiita.com/gaziya5/items/e58f8c1fce3f3f227ca7 \n//| by gaziya5\n//| https://qiita.com/MachiaWorx/items/a146400fd438a411b0b2\n//| by MachiaWorx\n//| :english\n//| http://www.graffathon.fi/2016/presentations/additive_slides.pdf\n//| by cce\n----------------\n*/","name":"Sound","description":"","type":"sound"}]}