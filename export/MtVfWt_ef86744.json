{"ver":"0.1","info":{"id":"MtVfWt","date":"1544574680","viewed":757,"name":"Tension Rings","username":"kubamaruszczyk1604","description":"  Graphic visualization of mic input.","likes":8,"published":1,"flags":4,"usePreview":0,"tags":["2d","equalizer","microphone","graphic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//A small experiment\n\n\n// Returns normalized value representing clock-wise angular distance between two vectors \n// To get angular distance in radians multiply by 2PI, for degrees multiply by 360.\n\nfloat NormAngle(vec2 a, vec2 b,int dir)\n{\n   vec2 r =  vec2(a.y,-a.x)*sign(float(dir));\n    //is it on the right side?\n   float rs = float(dot(r,b)>.0);\n   //-1 to 1 re-mapped to 0.0 - 1\n   float transformedDot = (1.0+dot(a,normalize(b)))/2.0;\n   \n   // for 0 deg - 180 deg: 0.0 - 0.5\n   // for >180 deg: 0\n   float rightSide = rs * (0.5* (1.0-transformedDot));\n    \n    // for 180 deg - 360 deg: 0.5 - 1.0\n   // for < 180 deg: 0\n   float leftSide = float(!(rs>0.0))*(0.5+transformedDot*0.5);\n    \n  return leftSide+rightSide;\n\n}\n\n\n\n// Draws indicator\nvoid Ring(vec2 uv,vec2 position, float radius, float level,int dir, vec2 up, inout vec3 col)\n{   \n  \n    vec3 COL1 = vec3(1.0,0.0,0.0); // full color\n    vec3 COL2 = col;// middle part color\n    if(length(position - uv) > radius) return; //is within bounds?\n   // vec2 up = normalize(vec2(0.0,1.0)); // UP vector\n   \n    //Calculate angular distance\n    float theta = NormAngle(up,uv-position,dir);\n    \n    //Addd full color gradient\n    COL1 = mix(vec3(0.0,0.0,0.3),COL1,pow(theta,1.0/3.0));\n    \n  //  COL1 = mix(COL1,vec3(0.0),mod(theta,0.21));\n    //Modify full color show level\n    COL1 = mix(vec3(0.1,0.0,0.05)+col*0.7,COL1,float(theta<level));\n    //output mix\n    col = mix(COL2,COL1,float(length(position - uv) > radius-0.06));   \n}\n\n\n\n\nvoid Bkg(inout vec3 col, vec2 fragCoord )\n{\n    vec3 COL1 = vec3(1.0,1.0,1.0);\n    vec3 COL2 = vec3(1.0,0.0,1.0);\n    vec2 uvorg = fragCoord;\n    vec2 uv = uvorg - vec2(0.023,0.01);\n    \n    float grid = float(mod(floor(uv.x * 500.0),14.0) < 0.5);\n    grid += float(mod(floor(uv.y * 200.0),11.0) < 0.4); \n    grid = float(grid>0.5);\n    \n    vec2 uvn = 2.0 * uvorg - 1.0;\n    grid *= 1.0-clamp(0.0,1.0,pow(length(uvn),6.6));;\n    col = mix(COL1,COL2,length(uvn))*grid*0.03;\n    \n     // aquire frequency\n    float fr = texture(iChannel0,vec2(uv.x,0.75)).x;\n    //atenuate\n    float i = pow(1.0-abs(uvorg.y+0.3-fr),90.0);\n    i = max(0.01,i);\n    col+= vec3(i)*0.2* mix(COL2,COL1,uvorg.x);\n    // add vignetes\n    col += vec3(0.06,0.0,0.01)*pow(length(2.0 * uv - 1.0),3.0)*0.8;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float ar = iResolution.x/iResolution.y;\n    uv.x *= ar;\n\n    \n    vec3 col = vec3(0.0);\n     Bkg(col, uv/vec2(ar,1.0));\n        \n    float level = texture(iChannel0, vec2(0.01,0.25)).x;\n    level += texture(iChannel0, vec2(0.1,0.25)).x;\n    level += texture(iChannel0, vec2(0.15,0.25)).x;\n    level /= 3.0;\n    vec2 up = normalize(vec2(0.0,1.0));\n    Ring(uv,vec2(0.5*ar,0.5),0.35+ 0.15*level,level,1,up,col);\n    \n    level = texture(iChannel0, vec2(0.2,0.25)).x;\n    level += texture(iChannel0, vec2(0.25,0.25)).x;\n    level += texture(iChannel0, vec2(0.27,0.25)).x;\n    level /= 3.0;\n    up = normalize(vec2(-1.0,0.0));\n    Ring(uv,vec2(0.5*ar,0.5),0.2 + 0.13*level,level,1,up,col);\n    \n    level = texture(iChannel0, vec2(0.3,0.25)).x;\n    level += texture(iChannel0, vec2(0.4,0.25)).x;\n    level += texture(iChannel0, vec2(0.5,0.25)).x;\n    level /= 3.0;\n    up = normalize(vec2(0.0,-1.0));\n    Ring(uv,vec2(0.5*ar,0.5),0.1 + 0.13*level,level,1,up,col);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}