{"ver":"0.1","info":{"id":"wllfWj","date":"1629367432","viewed":167,"name":"4d spherical coordinate spell ","username":"tsmca","description":"   | \\\n   | *\\\n _|*_* \\__\n(∩ ͡◍ ͜ʖ ͡◍)⊃━☆ﾟ. * ･ ｡ﾟ, SHADERSHADERSHADERSHADERSHADERSHADERSHADER\n\nSimilar to a version I wrote in rust: github.com/tsmcalister","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["fbm","spherical","domainwarping","spell","wizard"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define numOctaves 16\n#define radius 0.8\n#define scale 1.\n//#define HH 1.4142135623730951\n#define HH 1.4\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n//\tSimplex 4D Noise \n//\tby Ian McEwan, Ashima Arts\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nfloat permute(float x){return floor(mod(((x*34.0)+1.0)*x, 289.0));}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nfloat taylorInvSqrt(float r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nvec4 grad4(float j, vec4 ip){\nconst vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\nvec4 p,s;\n\np.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\np.w = 1.5 - dot(abs(p.xyz), ones.xyz);\ns = vec4(lessThan(p, vec4(0.0)));\np.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www; \n\nreturn p;\n}\n\nfloat noise(vec4 v){\nconst vec2  C = vec2( 0.138196601125010504,  // (5 - sqrt(5))/20  G4\n                        0.309016994374947451); // (sqrt(5) - 1)/4   F4\n// First corner\nvec4 i  = floor(v + dot(v, C.yyyy) );\nvec4 x0 = v -   i + dot(i, C.xxxx);\n\n// Other corners\n\n// Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\nvec4 i0;\n\nvec3 isX = step( x0.yzw, x0.xxx );\nvec3 isYZ = step( x0.zww, x0.yyz );\n//  i0.x = dot( isX, vec3( 1.0 ) );\ni0.x = isX.x + isX.y + isX.z;\ni0.yzw = 1.0 - isX;\n\n//  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\ni0.y += isYZ.x + isYZ.y;\ni0.zw += 1.0 - isYZ.xy;\n\ni0.z += isYZ.z;\ni0.w += 1.0 - isYZ.z;\n\n// i0 now contains the unique values 0,1,2,3 in each channel\nvec4 i3 = clamp( i0, 0.0, 1.0 );\nvec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\nvec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\n\n//  x0 = x0 - 0.0 + 0.0 * C \nvec4 x1 = x0 - i1 + 1.0 * C.xxxx;\nvec4 x2 = x0 - i2 + 2.0 * C.xxxx;\nvec4 x3 = x0 - i3 + 3.0 * C.xxxx;\nvec4 x4 = x0 - 1.0 + 4.0 * C.xxxx;\n\n// Permutations\ni = mod(i, 289.0); \nfloat j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\nvec4 j1 = permute( permute( permute( permute (\n            i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\n        + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\n        + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\n        + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\n// Gradients\n// ( 7*7*6 points uniformly over a cube, mapped onto a 4-octahedron.)\n// 7*7*6 = 294, which is close to the ring size 17*17 = 289.\n\nvec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\n\nvec4 p0 = grad4(j0,   ip);\nvec4 p1 = grad4(j1.x, ip);\nvec4 p2 = grad4(j1.y, ip);\nvec4 p3 = grad4(j1.z, ip);\nvec4 p4 = grad4(j1.w, ip);\n\n// Normalise gradients\nvec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\np0 *= norm.x;\np1 *= norm.y;\np2 *= norm.z;\np3 *= norm.w;\np4 *= taylorInvSqrt(dot(p4,p4));\n\n// Mix contributions from the five corners\nvec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\nvec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\nm0 = m0 * m0;\nm1 = m1 * m1;\nreturn 49.0 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\n            + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\n\n}\n\n\nfloat fbm( in vec4 x, in float H )\n{    \n    float t = 0.0;\n    for( int i=0; i<numOctaves; i++ )\n    {\n        float f = pow( 2.0, float(i) );\n        float a = pow( f, -H );\n        t += a*noise(f*x);\n    }\n    return t;\n}\n\nfloat pattern(vec2 uv){\n    float theta = iTime/2.;\n    float h = sqrt(radius*radius-1.);\n    \n    float x = uv.x;\n    float y = uv.y;\n    \n    // line segments https://www.desmos.com/calculator/kqvj8tjpky\n    float z = sqrt(1.- pow(x  * sqrt(1.-pow(h,2.)),2.));\n    float w = sqrt(1.- pow(y  * sqrt(1.-pow(h,2.)),2.)); \n    \n    // 4d spherical coordinates https://en.wikipedia.org/wiki/N-sphere#Spherical_coordinates\n    float ra = sqrt(pow(x,2.)+pow(y,2.)+pow(z,2.)+pow(w,2.));\n    float phi1 = acos(z/sqrt(pow(w,2.)+pow(z,2.)+pow(y,2.)+pow(x,2.))) + theta/5.;\n    float phi2 = acos(y/sqrt(pow(w,2.)+pow(z,2.)+pow(y,2.)));\n    float phi3 = acos(x/sqrt(pow(w,2.)+pow(z,2.))) + theta; // add rotation\n\n    x = ra*cos(phi1);\n    y = ra*sin(phi1)*cos(phi2);\n    z = ra*sin(phi1)*sin(phi2)*cos(phi3);\n    w = ra*sin(phi1)*sin(phi2)*sin(phi3);\n    \n    // based on https://iquilezles.org/articles/warp\n    vec2 q = vec2(fbm(vec4(x, y, z, w), HH));\n    vec2 r = vec2(0.);\n    r.x = fbm(vec4(vec2(x,y) + 4.*q + vec2(1.7, 9.2), z, w),HH);\n    r.x = fbm(vec4(vec2(x,y) + 4.*q + vec2(8.3, 2.8), z, w),HH);\n    return fbm(vec4(vec2(x,y) + 4.*r,z, w),HH);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy-0.5) * scale;\n\tuv.y =  uv.y/ min(pow((uv.x / scale + 0.55) * 2., pow(3.0,0.5)), 1.0);\n    float test = pattern(uv);\n\t\n    vec3 col = hsv2rgb(vec3(fract(test), 1., 1.));\n\n    float A = 1.;\n    float B = 5./2.;\n    float x = fragCoord.x/iResolution.x * 2.;\n    float y = (fragCoord.y/iResolution.y -0.5) *2. *B * 1.3;\n    if (pow(A,4.) * pow(y, 2.) < pow(B, 2.) * pow(x, 3.) * (2. * A -x) ){\n    \tfragColor = vec4(col,0.);\n    } else {\n        fragColor = vec4(0.);\n    }\n}","name":"Image","description":"","type":"image"}]}