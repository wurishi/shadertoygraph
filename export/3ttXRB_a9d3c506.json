{"ver":"0.1","info":{"id":"3ttXRB","date":"1581227073","viewed":78,"name":"GoL RGF","username":"DaMastaCoda","description":"game of life shader using buffers","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["rgf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\t\n    // Output to screen\n    fragColor = vec4(texture(iChannel0, uv).rgb * col,1.0f);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define M_PI 3.14159265358979323846\n\nfloat rand(vec2 co){return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);}\nfloat rand (vec2 co, float l) {return rand(vec2(rand(co), l));}\nfloat rand (vec2 co, float l, float t) {return rand(vec2(rand(co, l), t));}\n\nfloat perlin(vec2 p, float dim, float time) {\n\tvec2 pos = floor(p * dim);\n\tvec2 posx = pos + vec2(1.0, 0.0);\n\tvec2 posy = pos + vec2(0.0, 1.0);\n\tvec2 posxy = pos + vec2(1.0);\n\t\n\tfloat c = rand(pos, dim, time);\n\tfloat cx = rand(posx, dim, time);\n\tfloat cy = rand(posy, dim, time);\n\tfloat cxy = rand(posxy, dim, time);\n\t\n\tvec2 d = fract(p * dim);\n\td = -0.5 * cos(d * M_PI) + 0.5;\n\t\n\tfloat ccx = mix(c, cx, d.x);\n\tfloat cycxy = mix(cy, cxy, d.x);\n\tfloat center = mix(ccx, cycxy, d.y);\n\t\n\treturn center * 2.0 - 1.0;\n}\n\n// p must be normalized!\nfloat perlin(vec2 p, float dim) {\n\t\n\t/*vec2 pos = floor(p * dim);\n\tvec2 posx = pos + vec2(1.0, 0.0);\n\tvec2 posy = pos + vec2(0.0, 1.0);\n\tvec2 posxy = pos + vec2(1.0);\n\t\n\t// For exclusively black/white noise\n\t/*float c = step(rand(pos, dim), 0.5);\n\tfloat cx = step(rand(posx, dim), 0.5);\n\tfloat cy = step(rand(posy, dim), 0.5);\n\tfloat cxy = step(rand(posxy, dim), 0.5);*/\n\t\n\t/*float c = rand(pos, dim);\n\tfloat cx = rand(posx, dim);\n\tfloat cy = rand(posy, dim);\n\tfloat cxy = rand(posxy, dim);\n\t\n\tvec2 d = fract(p * dim);\n\td = -0.5 * cos(d * M_PI) + 0.5;\n\t\n\tfloat ccx = mix(c, cx, d.x);\n\tfloat cycxy = mix(cy, cxy, d.x);\n\tfloat center = mix(ccx, cycxy, d.y);\n\t\n\treturn center * 2.0 - 1.0;*/\n\treturn perlin(p, dim, 0.0);\n}\n\nfloat randomNum(vec2 co) {\n    if(perlin(co,1.0f)>0.5) {\n     \treturn 1.0f;   \n    } else {\n        return 0.0f;   \n    }\n}\n\nvec2 getUV(vec2 coord) {\n    return coord/iResolution.xy;\n}\n\nfloat neighbors(vec2 coord) {\n \n    float outN = 0.0f;\n    for(float x = -1.0f; x <= 1.0f; x++) {\n\t\tfor(float y = -1.0f; y <= 1.0f; y++) {\n            if(texture(iChannel0, getUV(coord.xy - vec2(x,y))).x > 0.0f) {\n                ++outN;\n            }\n    \t}\n    }\n    outN -= texture(iChannel0, getUV(coord.xy)).x;\n    return outN;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float n = neighbors(fragCoord);\n    if((n == 3.0f || n == 2.0f) && texture(iChannel0, getUV(fragCoord.xy)).x == 1.0f) {\n        fragColor = vec4(vec3(1.0f,1.0f,1.0f),1.0f);\n    }else if((n == 3.0f) && texture(iChannel0, getUV(fragCoord.xy)).x == 0.0f) {\n        fragColor = vec4(vec3(1.0f,1.0f,1.0f),1.0f);\n    } else {\n        fragColor = vec4(vec3(0.0f,0.0f,0.0f),1.0f);\n    }\n    \n    if(iMouse.z > 0.0f) {\n        if(perlin(fragCoord,1.0f,iTime) > 0.3) {\n        \tfragColor = vec4(vec3(0.01f,0.01f,0.01f),1.0f);        \t\n            //fragColor = vec4(vec3(1.0f,1.0f,1.0f),1.0f);\n\n        } else {\n            fragColor = vec4(vec3(0.0f,0.0f,0.0f),1.0f);\n\n        }\n    }\n    \n    if(iFrame == 0) {\n        float randomColor = randomNum(fragCoord);\n        fragColor = vec4(vec3(randomColor,randomColor,randomColor),1.0f);\n    }\n    \n    if(perlin(fragCoord,1.0f,iTime) > 0.9f) {\n        fragColor = vec4(vec3(0.01f,0.01f,0.01f),1.0f);\n    }\n\n    \n}","name":"Buffer A","description":"","type":"buffer"}]}