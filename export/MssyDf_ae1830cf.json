{"ver":"0.1","info":{"id":"MssyDf","date":"1490198826","viewed":2130,"name":"reaction diffusion","username":"polyrhythm","description":"it's reaction-diffusion","likes":42,"published":1,"flags":32,"usePreview":0,"tags":["reactiondiffusion","multipass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define COLOR_MIN 0.2\n#define COLOR_MAX 0.35\n\nfloat getGradient(vec2 uv)\n{\n  return (COLOR_MAX - texture(iChannel0, uv).y) /\n         (COLOR_MAX - COLOR_MIN);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfloat v = getGradient(uv);\n    \n    fragColor = vec4(v, v, v, 0.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define TIMESTEP 1.0\n\n#define F 0.0545\n#define K 0.062\n#define Da 1.0\n#define Db 0.5\n\nvoid getVal(vec2 p, out vec2 val, out vec2 laplacian) {\n  vec2 r = iResolution.xy;\n  vec2 uv = p / r;\n  vec2 n = p + vec2(0.0, 1.0);\n  vec2 ne = p + vec2(1.0, 1.0);\n  vec2 nw = p + vec2(-1.0, 1.0);\n  vec2 e = p + vec2(1.0, 0.0);\n  vec2 s = p + vec2(0.0, -1.0);\n  vec2 se = p + vec2(1.0, -1.0);\n  vec2 sw = p + vec2(-1.0, -1.0);\n  vec2 w = p + vec2(-1.0, 0.0);\n\n  val = texture(iChannel0, uv).xy;\n  laplacian = texture(iChannel0, n / r).xy * 0.2;\n  laplacian += texture(iChannel0, e / r).xy * 0.2;\n  laplacian += texture(iChannel0, s / r).xy * 0.2;\n  laplacian += texture(iChannel0, w / r).xy * 0.2;\n  laplacian += texture(iChannel0, nw / r).xy * 0.05;\n  laplacian += texture(iChannel0, ne / r).xy * 0.05;\n  laplacian += texture(iChannel0, sw / r).xy * 0.05;\n  laplacian += texture(iChannel0, se / r).xy * 0.05;\n  laplacian += -1.0 * val;   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 colour = vec3(0.0);\n    if (iFrame < 10) {\n        if (uv.x > 0.45 && uv.x < 0.55 && uv.y > 0.45 && uv.y < 0.55) {\n            colour = vec3(1.0);\n        }\n    } else {\n     \tvec2 val, laplacian;\n        getVal(fragCoord.xy, val, laplacian);\n        \n        vec2 delta;\n \t\tdelta.x = Da * laplacian.x - val.x * val.y * val.y + F * (1.0 - val.x);\n  \t\tdelta.y = Db * laplacian.y + val.x * val.y * val.y - (K + F) * val.y;\n        \n        colour = vec3(val + delta * TIMESTEP, 0.0);\n    }\n    \n    fragColor = vec4(colour,1.0);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define TIMESTEP 1.0\n\n#define F 0.0545\n#define K 0.062\n#define Da 1.0\n#define Db 0.5\n\nvoid getVal(vec2 p, out vec2 val, out vec2 laplacian) {\n  vec2 r = iResolution.xy;\n  vec2 uv = p / r;\n  vec2 n = p + vec2(0.0, 1.0);\n  vec2 ne = p + vec2(1.0, 1.0);\n  vec2 nw = p + vec2(-1.0, 1.0);\n  vec2 e = p + vec2(1.0, 0.0);\n  vec2 s = p + vec2(0.0, -1.0);\n  vec2 se = p + vec2(1.0, -1.0);\n  vec2 sw = p + vec2(-1.0, -1.0);\n  vec2 w = p + vec2(-1.0, 0.0);\n\n  val = texture(iChannel0, uv).xy;\n  laplacian = texture(iChannel0, n / r).xy * 0.2;\n  laplacian += texture(iChannel0, e / r).xy * 0.2;\n  laplacian += texture(iChannel0, s / r).xy * 0.2;\n  laplacian += texture(iChannel0, w / r).xy * 0.2;\n  laplacian += texture(iChannel0, nw / r).xy * 0.05;\n  laplacian += texture(iChannel0, ne / r).xy * 0.05;\n  laplacian += texture(iChannel0, sw / r).xy * 0.05;\n  laplacian += texture(iChannel0, se / r).xy * 0.05;\n  laplacian += -1.0 * val;   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 colour = vec3(0.0);\n    \n    vec2 val, laplacian;\n    getVal(fragCoord.xy, val, laplacian);\n        \n    vec2 delta;\n \tdelta.x = Da * laplacian.x - val.x * val.y * val.y + F * (1.0 - val.x);\n    delta.y = Db * laplacian.y + val.x * val.y * val.y - (K + F) * val.y;\n        \n    colour = vec3(val + delta * TIMESTEP, 0.0);\n    \n    fragColor = vec4(colour,1.0);\n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"#define TIMESTEP 1.0\n\n#define F 0.0545\n#define K 0.062\n#define Da 1.0\n#define Db 0.5\n\nvoid getVal(vec2 p, out vec2 val, out vec2 laplacian) {\n  vec2 r = iResolution.xy;\n  vec2 uv = p / r;\n  vec2 n = p + vec2(0.0, 1.0);\n  vec2 ne = p + vec2(1.0, 1.0);\n  vec2 nw = p + vec2(-1.0, 1.0);\n  vec2 e = p + vec2(1.0, 0.0);\n  vec2 s = p + vec2(0.0, -1.0);\n  vec2 se = p + vec2(1.0, -1.0);\n  vec2 sw = p + vec2(-1.0, -1.0);\n  vec2 w = p + vec2(-1.0, 0.0);\n\n  val = texture(iChannel0, uv).xy;\n  laplacian = texture(iChannel0, n / r).xy * 0.2;\n  laplacian += texture(iChannel0, e / r).xy * 0.2;\n  laplacian += texture(iChannel0, s / r).xy * 0.2;\n  laplacian += texture(iChannel0, w / r).xy * 0.2;\n  laplacian += texture(iChannel0, nw / r).xy * 0.05;\n  laplacian += texture(iChannel0, ne / r).xy * 0.05;\n  laplacian += texture(iChannel0, sw / r).xy * 0.05;\n  laplacian += texture(iChannel0, se / r).xy * 0.05;\n  laplacian += -1.0 * val;   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 colour = vec3(0.0);\n    \n    vec2 val, laplacian;\n    getVal(fragCoord.xy, val, laplacian);\n        \n    vec2 delta;\n \tdelta.x = Da * laplacian.x - val.x * val.y * val.y + F * (1.0 - val.x);\n    delta.y = Db * laplacian.y + val.x * val.y * val.y - (K + F) * val.y;\n        \n    colour = vec3(val + delta * TIMESTEP, 0.0);\n    \n    fragColor = vec4(colour,1.0);\n}","name":"Buf C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"#define TIMESTEP 1.0\n\n#define F 0.0545\n#define K 0.062\n#define Da 1.0\n#define Db 0.5\n\nvoid getVal(vec2 p, out vec2 val, out vec2 laplacian) {\n  vec2 r = iResolution.xy;\n  vec2 uv = p / r;\n  vec2 n = p + vec2(0.0, 1.0);\n  vec2 ne = p + vec2(1.0, 1.0);\n  vec2 nw = p + vec2(-1.0, 1.0);\n  vec2 e = p + vec2(1.0, 0.0);\n  vec2 s = p + vec2(0.0, -1.0);\n  vec2 se = p + vec2(1.0, -1.0);\n  vec2 sw = p + vec2(-1.0, -1.0);\n  vec2 w = p + vec2(-1.0, 0.0);\n\n  val = texture(iChannel0, uv).xy;\n  laplacian = texture(iChannel0, n / r).xy * 0.2;\n  laplacian += texture(iChannel0, e / r).xy * 0.2;\n  laplacian += texture(iChannel0, s / r).xy * 0.2;\n  laplacian += texture(iChannel0, w / r).xy * 0.2;\n  laplacian += texture(iChannel0, nw / r).xy * 0.05;\n  laplacian += texture(iChannel0, ne / r).xy * 0.05;\n  laplacian += texture(iChannel0, sw / r).xy * 0.05;\n  laplacian += texture(iChannel0, se / r).xy * 0.05;\n  laplacian += -1.0 * val;   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 colour = vec3(0.0);\n    \n    vec2 val, laplacian;\n    getVal(fragCoord.xy, val, laplacian);\n        \n    vec2 delta;\n \tdelta.x = Da * laplacian.x - val.x * val.y * val.y + F * (1.0 - val.x);\n    delta.y = Db * laplacian.y + val.x * val.y * val.y - (K + F) * val.y;\n        \n    colour = vec3(val + delta * TIMESTEP, 0.0);\n    \n    fragColor = vec4(colour,1.0);\n}","name":"Buf D","description":"","type":"buffer"}]}