{"ver":"0.1","info":{"id":"McS3WW","date":"1704212478","viewed":17,"name":"Green Fog","username":"EthanZappa","description":"Green Fog","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fog","green"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TWO_PI 6.2831\n#define NUM_LAYERS 6.\n\n\nmat2 Rot(float a)\n{\n    float s = sin(a), c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat Destello(vec2 uv, float glowSize, float ditheringLight)\n{\n    float rays = glowSize-abs(uv.x * uv.y * ditheringLight);\n   \n    return max(0., rays);\n}\n\n\nfloat Hash21(vec2 p)\n{\n    p = fract(p * vec2(13.45, 43.21)); // Cogemos la parte fraccional.\n    p += dot(p, p+54.123);\n    return fract(p.x * p.y);\n}\n\nfloat Star(vec2 id, vec2 uv, float flare)\n{\n    float col;\n    \n    \n    float d = length(uv);\n   \n    \n    \n    float m = .1*(tan(iTime*3.*fract(id.x*id.y))*.5+.5)/d;\n    col += m;\n    \n    \n    float glowSize = 1.;\n    float ditheringLight = 3000.;\n    col += Destello(uv, glowSize, ditheringLight)*3.5*flare;\n    uv *= Rot(3.1415/4.); \n    \n    glowSize = 1.;\n    ditheringLight = 8000.;\n   \n    col += Destello(uv, glowSize, ditheringLight)*0.5*flare;\n    col *= smoothstep(1.2,1.3,d);\n    return col;\n}\n\nvec3 StarLayer(vec2 uv)\n{\n    vec3 col;\n    vec2 gv = fract(uv)-.5;\n    vec2 id = floor(uv);\n\n    \n    \n    for(int y = -1; y <= 1; y++)\n    {\n        for(int x = -1; x <= 1; x++)\n        {\n            vec2 offset = vec2(x, y);\n            float n = Hash21(id + offset);\n            vec2 displacement = vec2(n-.5, fract(n*34.)-.5);\n\n            float size = fract(n * 345.32);\n\n          \n            float star = Star(id, gv - offset - displacement, smoothstep(.85, 1., size));\n            \n            vec3 color = sin(vec3(.2, .3, .9)*fract(n*2345.2)*123.2) * .5 + .5;\n            \n            color *= vec3(2,4.3,1. + size); \n            star *= sin(iTime*3.+n*TWO_PI)*.5+1.;\n            col += star*size*color;\n        }\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-2.4*iResolution.xy)/iResolution.y;\n    vec2 M = (iMouse.xy-iResolution.xy*.5)/iResolution.y;\n   \n   \n    float t = iTime*.025;\n    \n    \n    uv += M*42.5;\n    uv *= Rot(t);\n    \n    vec3 col = vec3(0.);\n    \n    \n    for(float i = .3; i<2.; i+=1./NUM_LAYERS)\n    {\n        float depth = fract(i+t);\n        float scale = mix(20.,12.5,depth)+depth;\n        float fade = depth*smoothstep(1., .85, depth); \n        col += StarLayer(uv*scale + i*4253. - M)*fade;\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}