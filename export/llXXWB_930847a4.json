{"ver":"0.1","info":{"id":"llXXWB","date":"1439336340","viewed":290,"name":"Dimentional elevator","username":"Kido_SoraKi","description":"An elevator is traveling through different dimensions each time it open its doors.","likes":4,"published":1,"flags":8,"usePreview":0,"tags":["transparency","mandelbulb","raymarcher","meta","elevator","innerscene"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"// Created by Nicolas Allain - Kido_SoraKi/2015\n// Sound by Antoine Lecubin - Zeletochoy/2015\n// This shader display other scenes through the doors, theses ones aren't from me.\n\n#define LIGHT\n#define SHADOWS\n#define TEXTURES\n#define TRANSPARENCY\n\n#define MAXSTEP     100\n#define FAR         45.0\n#define SPEED       0.2\n#define DIST        9.0\n#define DETAIL      0.000001\n\n#define PI          3.141592653589793\n#define PI_2        1.5707963267948966\n#define PI_4        0.7853981633974483\n\n#define WALL_THICKNESS  0.02\n#define BEAM_THICKNESS  0.01\n#define BEAM_WIDTH      0.05\n#define FLOOR_HEIGHT    1.5\n#define ELEVATOR_HEIGHT (FLOOR_HEIGHT * 0.85)\n#define H_BEAM_HEIGTH   (FLOOR_HEIGHT - BEAM_WIDTH - 0.1)\n#define ADD vec2(1.0, 0.0)\n#define MOD2 vec2(3.07965, 7.4235)\n\n// Transparency = mod(id, 16)\n#define GROUND_ID   0x00\n#define WALL_ID     0x10\n#define BEAM_ID     0x20\n#define WINDOW_ID   0x35\n#define STRUCT_ID   0x40\n#define CABLE_ID    0x50\n#define METAL_ID    0x60\n#define DOORWAY_ID  0x70 // Should not be seen\n#define SCENE_ID    0x80\n\nfloat height;\n\nfloat noise(in vec2 p)\n{\n    vec2 f = fract(p);\n    p = floor(p);\n    float v = p.x + p.y * 1000.0;\n    vec4 r = vec4(v, v + 1.0, v + 1000.0, v + 1001.0);\n    r = fract(100000.0 * sin(r * 0.001));\n    f = f * f * (3.0 - 2.0 * f);\n    return 2.0 * (mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y)) - 1.0;\n}\n\nfloat noise(in vec3 p)\n{\n    return noise(p.xy);\n}\n\nconst mat2 m2 = mat2(0.80, 0.60, -0.60, 0.80);\n\nfloat fbm(in vec2 p)\n{\n    float z = 2.0;\n    float rz = 0.0;\n    for (float i = 1.0; i < 7.0; i++)\n    {\n        rz += abs((noise(p) - 0.5) * 2.) / z;\n        z = z * 2.0;\n        p = p * 2.0;\n        p *= m2;\n    }\n    return rz;\n}\n\nvec3 texStain(vec3 p, vec3 c1, vec3 c2, float power)\n{\n    return mix(c1, c2, smoothstep(0.2, 0.8, pow(fbm(p.xy) * p.z, power)));\n}\n\nvec3 texBeam(vec3 p)\n{\n    return mix(vec3(0.1, 0.1, 0.1), vec3(0.3, 0.3, 0.3),\n            (fbm(floor(300.*(p.xy+p.yz))) + 1.0) / 2.0);\n}\n\n// -------------------------------------------------------------------------\n// First inner scene from https://www.shadertoy.com/view/MtS3zc by hypothete\n\n#define cubes_minStep 0.1\n#define cubes_maxStep 45.0\n#define cubes_delta 0.01\n#define cubes_damping 0.9\n#define cubes_numSteps 100\n\nfloat cubes_opRep(vec3 p, vec3 c , vec3 e)\n{\n    vec3 q = mod(p,c)-0.5*c;\n    vec3 d = abs(q) - e;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat cubes_distf (vec3 pos)\n{\n    return cubes_opRep(pos,vec3(2.0),vec3(0.2));\n}\n\nvec3 cubes_normal(vec3 p)\n{\n    vec2 dm = vec2(cubes_delta, 0.0);\n    return normalize(vec3(\n        cubes_distf(p+dm.xyy) - cubes_distf(p-dm.xyy),\n        cubes_distf(p+dm.yxy) - cubes_distf(p-dm.yxy),\n        cubes_distf(p+dm.yyx) - cubes_distf(p-dm.yyx)\n    ));\n}\n\nfloat cubes_castRay(vec3 pos, vec3 dir, out vec3 norm)\n{\n    pos.z += iTime * 3.;\n    float dist = cubes_minStep;\n    for(int step = 0; step < cubes_numSteps; step++)\n    {\n        norm = pos + dir*dist;\n        float normL = cubes_distf(norm);\n        if(normL > cubes_delta || dist > cubes_maxStep){\n            dist += normL*cubes_damping;\n        }\n    }\n    return dist;\n}\n\n\nvec3 cubes(vec3 ro, float t, vec3 rd)\n{\n    vec3 orig = vec3(0.0,0.0,0.0);\n    float didHitTerrain = cubes_castRay(ro, rd, orig);\n    if(didHitTerrain < cubes_maxStep){\n        vec3 nml = cubes_normal(orig);\n        vec3 colToRtn = abs(nml) * 0.6;\n        float fogval = exp(-pow(1.8*didHitTerrain/cubes_maxStep, 2.0));\n\n        return mix(vec3(0.5, 0.6, 0.7), colToRtn, fogval);\n    }\n    else{\n        return vec3(0.5, 0.6, 0.7);\n    }\n}\n\n// ------------------------------------------------------------------------\n// Second inner scene from https://www.shadertoy.com/view/MdXSWn by EvilRyu\n\nvec3 mandelbulb_mb(vec3 p) {\n    p.xyz = p.xzy;\n    vec3 z = p;\n    vec3 dz=vec3(0.0);\n    float power = 8.0;\n    float r, theta, phi;\n    float dr = 1.0;\n\n    float t0 = 1.0;\n\n    for(int i = 0; i < 7; ++i) {\n        r = length(z);\n        if(r > 2.0) continue;\n        theta = atan(z.y / z.x);\n        phi = asin(z.z / r);\n\n        dr = pow(r, power - 1.0) * dr * power + 1.0;\n\n        r = pow(r, power);\n        theta = theta * power;\n        phi = phi * power;\n\n        z = r * vec3(cos(theta)*cos(phi), sin(theta)*cos(phi), sin(phi)) + p;\n\n        t0 = min(t0, r);\n    }\n    return vec3(0.5 * log(r) * r / dr, t0, 0.0);\n}\n\nfloat mandelbulb_softshadow(vec3 ro, vec3 rd, float k){\n     float akuma=1.0,h=0.0;\n     float t = 0.01;\n     for(int i=0; i < 50; ++i){\n         h=mandelbulb_mb(ro+rd*t).x;\n         if(h<0.001)return 0.02;\n         akuma=min(akuma, k*h/t);\n         t+=clamp(h,0.01,2.0);\n     }\n     return akuma;\n }\n\nvec3 mandelbulb_nor(in vec3 pos)\n{\n    vec3 eps = vec3(0.001,0.0,0.0);\n    return normalize( vec3(\n           mandelbulb_mb(pos+eps.xyy).x - mandelbulb_mb(pos-eps.xyy).x,\n           mandelbulb_mb(pos+eps.yxy).x - mandelbulb_mb(pos-eps.yxy).x,\n           mandelbulb_mb(pos+eps.yyx).x - mandelbulb_mb(pos-eps.yyx).x ) );\n}\n\nvec3 mandelbulb_intersect(in vec3 ro, in vec3 rd)\n{\n    float t = 1.0;\n    float res_t = 0.0;\n    float res_d = 1000.0;\n    vec3 c, res_c;\n    float max_error = 1000.0;\n    float d = 1.0;\n    float pd = 100.0;\n    float os = 1.0;\n    float step = 0.0;\n    float error = 1000.0;\n\n    for( int i=0; i<48; i++ )\n    {\n        if( error < 0.0001 * 0.5 || t > 20.0 )\n        {\n        }\n        else{  // avoid broken shader on windows\n            c = mandelbulb_mb(ro + rd*t);\n            d = c.x;\n            if(d > os)\n            {\n                os = 0.4 * d*d/pd;\n                step = d + os;\n                pd = d;\n            }\n            else\n            {\n                step =-os; os = 0.0; pd = 100.0; d = 1.0;\n            }\n            error = d / t;\n            if(error < max_error)\n            {\n                max_error = error;\n                res_t = t;\n                res_c = c;\n            }\n            t += step;\n        }\n\n    }\n    if( t>20.0 ) res_t=-1.0;\n    return vec3(res_t, res_c.yz);\n}\n\nvec3 mandelbulb(vec3 ro, float t, vec3 rd)\n{\n    ro = vec3(0.5*cos(iTime), 0.5*sin(iTime), ro.z - 1.5);\n    vec3 res = mandelbulb_intersect(ro, rd);\n    vec3 sundir = normalize(vec3(0.1, 0.8, 0.6));\n    vec3 sun = vec3(1.64, 1.27, 0.99);\n    vec3 skycolor = vec3(0.6, 1.5, 1.0);\n    vec3 bg = exp(ro.y-2.0)*vec3(0.4, 1.6, 1.0);\n    float halo=clamp(dot(normalize(vec3(-ro.x, -ro.y, -ro.z)), rd), 0.0, 1.0);\n    vec3 col=bg+vec3(1.0,0.8,0.4)*pow(halo,17.0);\n     if(res.x > 0.0){\n           vec3 p = ro + res.x * rd;\n           vec3 n=mandelbulb_nor(p);\n           float shadow = mandelbulb_softshadow(p, sundir, 10.0 );\n\n           float dif = max(0.0, dot(n, sundir));\n           float sky = 0.6 + 0.4 * max(0.0, dot(n, vec3(0.0, 1.0, 0.0)));\n           float bac = max(0.3 + 0.7 * dot(vec3(-sundir.x, -1.0, -sundir.z), n), 0.0);\n           float spe = max(0.0, pow(clamp(dot(sundir, reflect(rd, n)), 0.0, 1.0), 10.0));\n\n           vec3 lin = 4.5 * sun * dif * shadow;\n           lin += 0.8 * bac * sun;\n           lin += 0.6 * sky * skycolor;\n           lin += 3.0 * spe;\n\n           res.y = pow(clamp(res.y, 0.0, 1.0), 0.55);\n           vec3 tc0 = 0.5 + 0.5 * sin(3.0 + 4.2 * res.y + vec3(0.0, 0.5, 1.0));\n           col = lin *vec3(0.9, 0.8, 0.6) *  0.2 * tc0;\n           col=mix(col,bg, 1.0-exp(-0.001*res.x*res.x));\n    }\n    return col;\n}\n\n// ------------------------------------------------------------------\n// Third inner scene from https://www.shadertoy.com/view/MdfGRX by iq\n\nvec4 hell_map( vec3 p )\n{\n    float den = 0.2 - p.y;\n\n    // invert space\n    p = -7.0*p/dot(p,p);\n\n    // twist space\n    float co = cos(den - 0.25*iTime);\n    float si = sin(den - 0.25*iTime);\n    p.xz = mat2(co,-si,si,co)*p.xz;\n\n    // smoke\n    float f;\n    vec3 q = p                          - vec3(0.0,1.0,0.0)*iTime;;\n    f  = 0.50000*noise( q ); q = q*2.02 - vec3(0.0,1.0,0.0)*iTime;\n    f += 0.25000*noise( q ); q = q*2.03 - vec3(0.0,1.0,0.0)*iTime;\n    f += 0.12500*noise( q ); q = q*2.01 - vec3(0.0,1.0,0.0)*iTime;\n    f += 0.06250*noise( q ); q = q*2.02 - vec3(0.0,1.0,0.0)*iTime;\n    f += 0.03125*noise( q );\n\n    den = clamp( den + 4.0*f, 0.0, 1.0 );\n\n    vec3 col = mix( vec3(1.0,0.9,0.8), vec3(0.4,0.15,0.1), den ) + 0.05*sin(p);\n\n    return vec4( col, den );\n}\n\nvec3 hell(vec3 rd_orig)\n{\n    vec2 q = gl_FragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0*q;\n    p.x *= iResolution.x/ iResolution.y;\n\n    vec3 ro = 4.0*normalize(vec3(1.0, 1.4 - 1.0*(-.1), 0.0));\n    vec3 ta = vec3(0.0, 0.0, 0.0);\n    float cr = 0.5*cos(0.7*iTime);\n\n    // build ray\n    vec3 ww = normalize( ta - ro);\n    vec3 uu = normalize(cross( vec3(sin(cr),cos(cr),0.0), ww ));\n    vec3 vv = normalize(cross(ww,uu));\n    vec3 rd = normalize( p.x*uu + p.y*vv + 2.0*ww );\n\n    vec4 sum = vec4( 0.0 );\n\n    float t = 0.0;\n\n    for( int i=0; i<100; i++ )\n    {\n        if( sum.a > 0.99 ) break;\n\n        vec3 pos = ro + t*rd;\n        vec4 col = hell_map( pos );\n\n        col.xyz *= mix( 3.1*vec3(1.0,0.5,0.05), vec3(0.48,0.53,0.5), clamp( (pos.y-0.2)/2.0, 0.0, 1.0 ) );\n\n        col.a *= 0.6;\n        col.rgb *= col.a;\n\n        sum = sum + col*(1.0 - sum.a);\n\n        t += 0.05;\n    }\n\n    vec3 col = clamp( sum.xyz, 0.0, 1.0 );\n    col = col*0.5 + 0.5*col*col*(3.0-2.0*col);\n    col *= 0.25 + 0.75*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.1 );\n    return col;\n}\n\n// ------------------------------------------------------------------\n\nvec3 scene(vec3 ro, float t, vec3 rd)\n{\n    float level = (mod(height / (6.0 * FLOOR_HEIGHT), 3.0));\n\n    if (level < 0.5 || level > 2.5)\n      return cubes(ro, t, rd);\n    else if (level < 1.5)\n      return mandelbulb(ro, t, rd);\n    else\n      return hell(rd);\n}\n\n#ifdef TEXTURES\nvec3 texMarble(vec3 p)\n{\n    vec3 vain = texStain(vec3(p.xz * 5., 1.0), vec3(0.1, 0.05, 0.05), vec3(1.0, 1.0, 0.9), 2.);\n    float s = min(smoothstep(0.0, 0.02, mod(-p.z, 0.5)), smoothstep(0.0, 0.02,\n    mod(p.z, 0.5)));\n    s = min(s, min(smoothstep(0.0, 0.02, mod(-p.x, 0.5)), smoothstep(0.0, 0.02,\n    mod(p.x, 0.5))));\n    s = clamp(s + 0.5, 0.0, 1.0);\n    return s * vain;\n}\n\nvec3 texConcrete(vec3 p, vec3 n)\n{\n    vec3 coef = abs(p) * (1.0 - abs(n));\n    vec2 uv = vec2(max(coef.x, coef.z), coef.y);\n    vec3 grey = mix(texStain(vec3(uv * 10., 1.0), vec3(0.6), vec3(0.4), 64.),\n    vec3(noise(uv * 100.)), 0.3);\n    vec3 res = grey * 0.2 + 0.5;\n    if (p.z > 1.57)\n    {\n        p.y = mod(p.y + FLOOR_HEIGHT, 2.0 * FLOOR_HEIGHT) - FLOOR_HEIGHT;\n        if (abs(p.y) < ELEVATOR_HEIGHT - BEAM_THICKNESS - 0.01)\n          res = vec3(0.4);\n        if (p.z > 1.58 && abs(p.y) < ELEVATOR_HEIGHT - BEAM_THICKNESS - 0.02)\n          res = smoothstep(0.005, 0.01, abs(p.x)) * vec3(0.4) + vec3(0.4);\n    }\n    return res;\n}\n\nvec3 metalNormal(vec3 p, vec3 n)\n{\n    vec3 disp = vec3(noise(n.yz), noise(n.xz), noise(n.xy));\n    return mix(0.1 * disp, 0.3 * disp,\n            (fbm(floor(300.*(p.xy+p.yz))) + 1.0) / 2.0);\n}\n\nvec3 getNormalMap(vec3 p, vec3 n, int id)\n{\n    if (id == METAL_ID || id == STRUCT_ID)\n        return metalNormal(p - vec3(0.0, height, 0.0), n);\n    else if (id == BEAM_ID)\n        return metalNormal(p, n);\n    else\n        return vec3(0.);\n}\n\nvec3 getMaterial(vec3 ro, float t, vec3 rd, int id, inout vec3 n, out float transparency)\n{   \n    vec3 p = ro + t * rd;\n    transparency = mod(float(id), 16.0) / 15.0;\n    vec3 ret = vec3(0.0);\n    if (id == WALL_ID)\n        ret = texConcrete(p, n);\n    else if (id == BEAM_ID)\n            ret = vec3(0.25);\n    else if (id == STRUCT_ID)\n            ret = vec3(0.8);\n    else if (id == METAL_ID)\n            ret = vec3(0.6);\n    else if (id == CABLE_ID)\n            ret = vec3(0.2);\n    else if (id == WINDOW_ID)\n    {\n        vec3 ns = abs(n);\n        if (ns.y > max(ns.x, ns.z))\n        { // floor or ceiling\n            transparency = 0.0;\n            if (n.y > 0.0 && p.y < height) // floor\n                ret = texMarble(p);\n            else\n            {\n                id = STRUCT_ID;\n                ret = vec3(0.8);\n            }\n        }\n        else\n            ret = vec3(0.1, 0.2, 0.5);\n\t}\n    else if (id == SCENE_ID)\n        ret = scene(ro, t, rd);\n    else\n        ret = vec3(0.0);\n    n += getNormalMap(p, n, id);\n    normalize(n);\n    return ret;\n}\n#endif\n\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r)\n{\n    vec3 pa = p - a;\n    vec3 ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h) - r;\n}\n\nfloat sphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat plane(vec3 p, vec4 n)\n{\n    return dot(p, n.xyz) + n.w;\n}\n\nfloat roundBox(vec3 p, vec3 b, float r)\n{\n    return length(max(abs(p) - b, 0.0)) - r;\n}\n\nfloat smin(float a, float b, float k)\n{\n    a = pow(a, k); b = pow(b, k);\n    return pow((a * b) / (a + b), 1.0 / k);\n}\n\nfloat cylinder(vec3 p, vec2 h)\n{\n    vec2 d = abs(vec2(length(p.xz), p.y)) - h;\n    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\n}\n\nfloat hcylinder(vec3 p, vec2 h)\n{\n    vec2 d = abs(vec2(length(p.xy), p.z)) - h;\n    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\n}\n\nfloat vInfCylinder(vec3 p, float r)\n{\n    return length(p.xz) - r;\n}\n\nfloat semiVInfCylinder(vec3 p, float r, float h)\n{\n    return (length(p.xz) - r) - min(p.y - h, 0.0);\n}\nfloat box(vec3 p, vec3 b)\n{\n    return length(max(abs(p) - b, 0.0));\n}\n\nfloat sBox(vec3 p, vec3 b)\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));\n}\n\nfloat hollowedCylinder(vec3 p, vec2 h, float thickness)\n{\n    return max(cylinder(p, h), -cylinder(p, vec2(h.x - thickness * 2.0, h.y + 0.2)));\n}\n\nfloat moonQuarter(vec3 p, vec2 h, float thickness)\n{\n    return max(hollowedCylinder(p, h, thickness),\n        box(p - vec3(0.0, 0.0, h.x * 0.5), vec3(1.0, h.y + 0.1, h.x * 0.5 + 0.1)));\n}\n\nfloat vBeam(vec3 p, float l)\n{\n    return min(box(p, vec3(BEAM_WIDTH, l, BEAM_THICKNESS)),\n        min(box(p - vec3(BEAM_WIDTH, 0.0, 0.0), vec3(BEAM_THICKNESS, l, BEAM_WIDTH)),\n                box(p - vec3(-BEAM_WIDTH, 0.0, 0.0), vec3(BEAM_THICKNESS, l, BEAM_WIDTH))));\n}\n\nfloat hBeam(vec3 p, float l)\n{\n    return min(box(p, vec3(BEAM_WIDTH, BEAM_THICKNESS, l)),\n        min(box(p - vec3(BEAM_WIDTH, 0.0, 0.0), vec3(BEAM_THICKNESS, BEAM_WIDTH, l)),\n                box(p - vec3(-BEAM_WIDTH, 0.0, 0.0), vec3(BEAM_THICKNESS, BEAM_WIDTH, l))));\n}\n\nfloat curvedHBeam(vec3 p)\n{\n    return max(min(hollowedCylinder(p, vec2(1.0 - WALL_THICKNESS, BEAM_WIDTH), BEAM_THICKNESS),\n            max(min(cylinder(p, vec2(1.0 - WALL_THICKNESS, BEAM_THICKNESS)),\n            cylinder(p, vec2(1.0 - WALL_THICKNESS - BEAM_WIDTH * 2.0, BEAM_WIDTH))),\n            -cylinder(p, vec2(1.0 - WALL_THICKNESS - BEAM_WIDTH * 2.0 - BEAM_THICKNESS * 2.0, BEAM_WIDTH + 0.2)))),\n            box(p - vec3(0.0, 0.0, (1.0 - WALL_THICKNESS) * 0.5), vec3(1.0, BEAM_WIDTH + 0.1, (1.0 - WALL_THICKNESS) * 0.5)));\n}\n\nfloat beams(vec3 p)\n{\n    float b1 = vBeam(p - vec3(-1.0 + BEAM_WIDTH + WALL_THICKNESS + BEAM_THICKNESS, 0.0, 0.7), FLOOR_HEIGHT);\n    float b2 = vBeam(p - vec3(-1.0 + BEAM_WIDTH + WALL_THICKNESS + BEAM_THICKNESS, 0.0, -0.7), FLOOR_HEIGHT);\n    float b3 = vBeam(p - vec3(1.0 - BEAM_WIDTH - WALL_THICKNESS - BEAM_THICKNESS, 0.0, 0.7), FLOOR_HEIGHT);\n    float b4 = vBeam(p - vec3(1.0 - BEAM_WIDTH - WALL_THICKNESS - BEAM_THICKNESS, 0.0, -0.7), FLOOR_HEIGHT);\n\n    float b5 = hBeam(p - vec3(-1.0 + BEAM_WIDTH + WALL_THICKNESS + BEAM_THICKNESS, H_BEAM_HEIGTH, 0.15), 0.85);\n    float b6 = hBeam(p - vec3(1.0 - BEAM_WIDTH - WALL_THICKNESS - BEAM_THICKNESS, H_BEAM_HEIGTH, 0.15), 0.85);\n    float b7 = curvedHBeam(p - vec3(0.0, H_BEAM_HEIGTH, 1.0));\n\n    float b8 = vBeam(p - vec3(-0.7, 0.0, -1.0 + BEAM_WIDTH + WALL_THICKNESS), FLOOR_HEIGHT);\n    float b9 = vBeam(p - vec3(0.7, 0.0, -1.0 + BEAM_WIDTH + WALL_THICKNESS), FLOOR_HEIGHT);\n\n    float c = cos(0.45);\n    float s = sin(0.45);\n    vec3 q = vec3(c * p.x + s * p.y, - s * p.x + c * p.y, p.z);\n    float b10 = cylinder(q - vec3(0.0, 0.0, -1.0 + BEAM_WIDTH + WALL_THICKNESS), vec2(WALL_THICKNESS, FLOOR_HEIGHT));\n    q = vec3(c * p.x - s * p.y, s * p.x + c * p.y, p.z);\n    float b11 = cylinder(q - vec3(0.0, 0.0, -1.0 + BEAM_WIDTH + WALL_THICKNESS), vec2(WALL_THICKNESS, FLOOR_HEIGHT));\n\n    c = cos(PI_4);\n    s = sin(PI_4);\n    q = p - vec3(-0.85 + (WALL_THICKNESS + BEAM_WIDTH + BEAM_THICKNESS) * 0.5, H_BEAM_HEIGTH, -0.85 + (WALL_THICKNESS + BEAM_WIDTH) * 0.5);\n    q = vec3(c * q.x + s * q.z, q.y, - s * q.x + c * q.z);\n    float b12 = hBeam(q, 0.15);\n    q = p - vec3(0.85 - (WALL_THICKNESS + BEAM_WIDTH + BEAM_THICKNESS) * 0.5, H_BEAM_HEIGTH, -0.85 + (WALL_THICKNESS + BEAM_WIDTH) * 0.5);\n    q = vec3(c * q.x - s * q.z, q.y, s * q.x + c * q.z);\n    float b13 = hBeam(q, 0.15);\n\n    return min(b1, min(b2, min(b3, min(b4, min(b5, min(b6, min(b7, min(b8,\n            min(b9, min(b10, min (b11, min(b12, b13))))))))))));\n}\n\nfloat cables(vec3 p)\n{\n    float c1 = vInfCylinder(p - vec3(0.1, 0.0, -0.8), 0.01);\n    float c2 = vInfCylinder(p - vec3(-0.1, 0.0, -0.8), 0.01);\n    return min(c1, c2);\n}\n\nvec2 elevatorShaft(vec3 p)\n{\n    vec3 q = vec3(p.x, mod(p.y + FLOOR_HEIGHT, FLOOR_HEIGHT * 2.0) -\n    FLOOR_HEIGHT, p.z);\n    \n    float b1 = box(q, vec3(1.0, FLOOR_HEIGHT, 1.0));\n    float c1 = cylinder(q - vec3(0.0, 0.0, 1.0), vec2(1.0, FLOOR_HEIGHT));\n\n    float b2 = sBox(q - vec3(0.0, 0.0, WALL_THICKNESS), vec3(1.0 - WALL_THICKNESS, FLOOR_HEIGHT + 0.2, 1.0));\n    float c2 = cylinder(q - vec3(0.0, 0.0, 1.0), vec2(1.0 - WALL_THICKNESS, FLOOR_HEIGHT + 0.2));\n\n    vec2 walls = vec2(WALL_ID, max(min(b1, c1), -min(b2, c2)));\n\n    vec2 b = vec2(BEAM_ID, beams(q));\n\n    vec2 c = vec2(CABLE_ID, cables(p));\n\n    vec2 ret = (walls.y < b.y) ? walls : b;\n    ret = (ret.y < c.y) ? ret : c;\n\n    return ret;\n}\n\nvec2 elevator(vec3 p, float h)\n{\n    float b1 = box(p - vec3(0.0, h, 0.2), vec3(0.8, ELEVATOR_HEIGHT, 0.8));\n    float c1 = cylinder(p - vec3(0.0, h, 1.0), vec2(0.8, ELEVATOR_HEIGHT));\n\n    float b2 = sBox(p - vec3(0.0, h, 0.2 + BEAM_THICKNESS), vec3(0.8 - BEAM_THICKNESS,\n            ELEVATOR_HEIGHT - BEAM_THICKNESS, 0.8));\n    float c2 = cylinder(p - vec3(0.0, h, 1.0), vec2(0.8 - BEAM_THICKNESS, ELEVATOR_HEIGHT -\n            BEAM_THICKNESS));\n    float ceiling = roundBox(p - vec3(0.0, h + ELEVATOR_HEIGHT - 0.45, 0.0), vec3(0.42), 0.08);\n\n    float hole = sBox(p - vec3(0.0, h + ELEVATOR_HEIGHT, 0.0), vec3(0.4));\n\n    float s1 = cylinder(p - vec3(0.8 - WALL_THICKNESS * 0.5, h, 1.0 - WALL_THICKNESS * 0.5), vec2(WALL_THICKNESS, ELEVATOR_HEIGHT));\n    float s2 = cylinder(p - vec3(0.8 - WALL_THICKNESS * 0.5, h, -0.6 + WALL_THICKNESS * 0.5), vec2(WALL_THICKNESS, ELEVATOR_HEIGHT));\n    float s3 = cylinder(p - vec3(-0.8 + WALL_THICKNESS * 0.5, h, 1.0 - WALL_THICKNESS * 0.5), vec2(WALL_THICKNESS, ELEVATOR_HEIGHT));\n    float s4 = cylinder(p - vec3(-0.8 + WALL_THICKNESS * 0.5, h, -0.6 + WALL_THICKNESS * 0.5), vec2(WALL_THICKNESS, ELEVATOR_HEIGHT));\n\n    float b3 = box(p - vec3(0.8 - BEAM_THICKNESS * 0.5, h, 0.3), vec3(WALL_THICKNESS, ELEVATOR_HEIGHT - BEAM_THICKNESS, 0.2));\n    float b4 = box(p - vec3(0.8 - WALL_THICKNESS * 2.0, h - 0.2, 0.3), vec3(WALL_THICKNESS, WALL_THICKNESS, 0.15));\n    float c3 = hcylinder(p - vec3(0.8 - WALL_THICKNESS * 3.0, h - 0.2, 0.2), vec2(WALL_THICKNESS, 0.7));\n\n    float c4 = semiVInfCylinder(p - vec3(0.6, 0.0, -0.2), 0.01, h + ELEVATOR_HEIGHT);\n    float c5 = semiVInfCylinder(p - vec3(-0.6, 0.0, -0.2), 0.01, h + ELEVATOR_HEIGHT);\n    float c6 = semiVInfCylinder(p - vec3(0.6, 0.0, 0.7), 0.01, h + ELEVATOR_HEIGHT);\n    float c7 = semiVInfCylinder(p - vec3(-0.6, 0.0, 0.7), 0.01, h + ELEVATOR_HEIGHT);\n\n    vec2 walls = vec2(WINDOW_ID, max(-hole, max(-min(b2, c2), min(b1, c1))));\n    vec2 structure = vec2(METAL_ID, min(s1, min(s2, min(s3, s4))));\n    vec2 trapBorder = vec2(STRUCT_ID, max(-min(hole, b2), ceiling));\n\n    vec2 panel = vec2(METAL_ID, min(b3, min(b4, c3)));\n\n    vec2 cables = vec2(CABLE_ID, min(c4, min(c5, min(c6, c7))));\n\n    vec2 ret = (walls.y < structure.y) ? walls : structure;\n    ret = (ret.y < panel.y) ? ret : panel;\n    ret = (ret.y < trapBorder.y) ? ret : trapBorder;\n    ret = (ret.y < cables.y) ? ret : cables;\n\n    return ret;\n}\n\nvec2 map(vec3 p)\n{\n    vec2 eShaft = elevatorShaft(p);\n    vec2 e = elevator(p, height);\n    vec2 scene = vec2(SCENE_ID, box(p - vec3(0.0, height, ELEVATOR_HEIGHT * 4. + 2.5), vec3(ELEVATOR_HEIGHT * 4.)));\n\n    float z = sin((iTime - 4.) * PI / 10.);\n    vec2 doorWay = vec2(DOORWAY_ID, sBox(p - vec3(0.0, height, 3.1 + z),\n            vec3(0.8 - BEAM_THICKNESS, ELEVATOR_HEIGHT - BEAM_THICKNESS - 0.01, 1.0 - WALL_THICKNESS)));\n\n    vec2 ret = (e.y < eShaft.y) ? e : eShaft;\n    ret = (ret.y > -doorWay.y) ? ret : -doorWay;\n    ret = (ret.y < scene.y) ? ret : scene;\n\n    return ret;\n}\n\nvec3 normal(vec3 p, int id)\n{\n    vec2 e = vec2(0.0001, 0.0);\n    return normalize(vec3(map(p + e.xyy).y - map(p - e.xyy).y,\n                          map(p + e.yxy).y - map(p - e.yxy).y,\n                          map(p + e.yyx).y - map(p - e.yyx).y));\n}\n\nvoid animate(inout vec3 ro, inout vec3 ta)\n{\n    ro.x = sin(iTime * SPEED) * 0.5;\n    ro.y = height;\n    ro.z = 0.0;\n\n    ta.x = 0.2;\n    ta.y = height + sin((max(fract((iTime) / 40. - 0.4) * 4./3., 1.) - 1.) * 3. * PI);\n    ta.z = 0.8;\n}\n\n#ifdef SHADOWS\nfloat softshadow(in vec3 ro, in vec3 rd, in float tmin, in float tmax)\n{\n    float res = 1.0;\n    float t = tmin;\n    float transparency;\n    for (int i = 0; i < 16; i++)\n    {\n        vec2 h = map(ro + rd * t);\n        if ((transparency = mod(h.x, 16.) / 15.0)  > 0.0)\n        {\n                t += DETAIL;\n                continue;\n        }\n        res = min(res, 8.0 * h.y / t);\n        t += clamp(h.y, 0.02, 0.10);\n        if(h.y < 0.001 || t > tmax)\n            break;\n    }\n    return clamp(res, 0.0, 1.0);\n}\n#endif\n\nvec3 ray_marching(inout float t, vec3 ro, vec3 rd, out float transparency)\n{\n    transparency = 0.0;\n    vec2 res = vec2(-1.0, 1.0);\n    for (int i = 0; i < MAXSTEP; i++)\n    {\n        if (res.y < DETAIL || t > FAR)\n            break;\n        res = map(ro + t * rd);\n        t += res.y;\n    }\n\n    // do not intersect an object (far clip)\n    if (t > FAR)\n        return vec3(0.5, 0.6, 0.7);\n\n    vec3 pos = ro + t * rd;\n    vec3 n = normal(pos, int(res.x));\n    vec3 ref = reflect(rd, n);\n\n#ifdef TEXTURES\n    vec3 col = getMaterial(ro, t, rd, int(res.x), n, transparency);\n#else\n    vec3 col = vec3(0.5);\n#endif\n\n    // Lights and shadows\n#ifdef LIGHT\n    if (int(res.x) != SCENE_ID)\n    {\n        vec3 light = vec3(0.0, height + ELEVATOR_HEIGHT - 0.1, 0.0);\n        vec3 lightDir = normalize(light - pos);\n        float amb = 0.1;\n        float dif = clamp(dot(n, lightDir), 0.0, 1.0);\n        float spe = pow(clamp(dot(ref, lightDir), 0.0, 1.0), 32.0);\n\n# ifdef SHADOWS\n        float sha = softshadow(pos, lightDir, 0.02, length(light - pos));\n# else\n        float sha = 1.0;\n# endif\n\n        vec3 lcol = vec3(1.0, 0.9, 0.6);\n        vec3 lig = sha * dif * lcol * (1.0 + 2.0 * spe) + amb;\n        col *= lig;\n    }\n#endif\n\n    return col;\n}\n\nvec3 ray_marching2(inout float t, vec3 ro, vec3 rd)\n{\n    float transparency = 0.0;\n    vec2 res = vec2(-1.0, 1.0);\n    for (int i = 0; i < MAXSTEP; i++)\n    {\n        res = map(ro + t * rd);\n        t += res.y;\n        if (res.y < DETAIL && mod(res.x, 16.) > 0.)\n        {\n            t += 0.008;\n            continue;\n        }\n        if (res.y < DETAIL || t > FAR)\n            break;\n    }\n\n    // do not intersect an object (far clip)\n    if (t > FAR)\n        return vec3(0.5, 0.6, 0.7);\n\n    vec3 pos = ro + t * rd;\n    vec3 n = normal(pos, int(res.x));\n    vec3 ref = reflect(rd, n);\n\n#ifdef TEXTURES\n    vec3 col = getMaterial(ro, t, rd, int(res.x), n, transparency);\n#else\n    vec3 col = vec3(0.5);\n#endif\n\n    // Lights and shadows\n#ifdef LIGHT\n    if (int(res.x) != SCENE_ID)\n    {\n        vec3 light = vec3(0.0, 1.0 + height, 0.0);\n        vec3 lightDir = normalize(light - pos);\n        float amb = 0.1;\n        float dif = clamp(dot(n, lightDir), 0.0, 1.0);\n        float spe = pow(clamp(dot(ref, lightDir), 0.0, 1.0), 32.0);\n\n# ifdef SHADOWS\n        float sha = softshadow(pos, lightDir, 0.02, length(light - pos));\n# else\n        float sha = 1.0;\n# endif\n\n        vec3 lcol = vec3(1.0, 0.9, 0.6);\n        vec3 lig = sha * dif * lcol * (1.0 + 2.0 * spe) + amb;\n        col *= lig;\n    }\n#endif\n\n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0 * uv;\n    p.x *= iResolution.x / iResolution.y;\n\n    float t = iTime / 20.;\n    height = 6.0 * FLOOR_HEIGHT * (0.5 * (tanh(10.0 * (fract(t) - 0.5)) + 1.) + floor(t));\n\n    // Camera\n    vec3 ro = vec3(0.0);\n    vec3 ta = vec3(0.0);\n    animate(ro, ta);\n    vec3 cf = normalize(ta - ro);\n    vec3 cr = normalize(cross(cf, vec3(0.0, 1.0, 0.0)));\n    vec3 cu = normalize(cross(cr, cf));\n    vec3 rd = normalize(p.x * cr + p.y * cu + 1.0 * cf);\n\n    t = 0.0;\n    float transparency;\n    vec3 col = ray_marching(t, ro, rd, transparency);\n\n#ifdef TEXTURES\n# ifdef TRANSPARENCY\n    vec3 pos = ro + t * rd;\n    if (transparency > 0.0)\n    {\n        vec3 second_col = ray_marching2(t, ro, rd);\n        col = mix(col, second_col, transparency);\n    }\n# endif\n#endif\n\n    // Fog\n    float fogval = exp(-pow(1.8*length(t * rd)/FAR, 2.0));\n\n    fragColor = vec4(mix(vec3(0.5, 0.6, 0.7), col, fogval), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Created by Antoine Lecubin - Zeletochoy/2015\n// See https://www.shadertoy.com/view/4tlXzj\n\n#define tau 6.2831853071\n#define freqcoef 1.059463094359\n\nfloat total = 0.;\n\nfloat notefreq(float n)\n{\n    return 440. * pow(freqcoef, n);\n}\n\nvec2 ding(float time, float note)\n{\n    float freq = 350.;\n    float y = 0.0;\n\n    y += 32.*sin(4.*tau*freq*time)*exp(-0.01*freq*time);\n    y += 16.*sin(8.*tau*freq*time)*exp(-0.012*freq*time);\n    y += 8.*sin(16.*tau*freq*time)*exp(-0.014*freq*time);\n    y += 4.*sin(32.*tau*freq*time)*exp(-0.016*freq*time);\n    y += 2.*sin(128.*tau*freq*time)*exp(-0.018*freq*time);\n    y /= 30.;\n\n    total += exp(-0.01*freq*time);\n\n    return vec2(y);\n}\n\nvec2 vibra(float t, float note)\n{\n    float f = notefreq(note);\n\n    float v = 0.5*sin(tau*f*t);\n    v += 0.3*sin(tau*f*exp2(1.)*t);\n    v += 0.2*sin(tau*f*exp2(2.)*t);\n\n    float env = exp(-pow(2.*t-0.5, 2.));\n    v *= env;\n    total += env;\n    return vec2(v);\n}\n\nvec2 kick(float t, float note)\n{\n    float env = 0.5 * exp(-pow(note*t-0.5, 2.));\n    total += env;\n    return vec2(sin(80.*tau*t)) * env;\n}\n\nfloat noise( float x )\n{\n    return fract(sin(1371.1*x)*43758.5453);\n}\n\nvec2 snare(float t, float note)\n{\n    float env = 0.3 * exp(-pow(note*t-0.5, 2.));\n    total += env;\n    return vec2(sin(noise(t))) * env;\n}\n\n#define PLAY(ins, st, note) if (t > st) v += ins(t - st, note);\n\nvec2 mainSound( in int samp,float time)\n{\n    vec2 v = vec2(0.);\n    total = 0.;\n\n    float t = mod(time, 32.2);\n\n    // 1st part\n    if (t < 12.8)\n        t = mod(t, 6.4);\n    float base = 5.;\n    PLAY(vibra, 0., base);\n    PLAY(vibra, 0.2, base-3.);\n    PLAY(vibra, 0.4, base-7.);\n    PLAY(vibra, 0.6, base-8.);\n    t -= 1.6;\n    base = 7.;\n    PLAY(vibra, 0., base);\n    PLAY(vibra, 0.2, base-3.);\n    PLAY(vibra, 0.4, base-7.);\n    PLAY(vibra, 0.6, base-8.);\n    t -= 1.6;\n    PLAY(vibra, 0., base);\n    PLAY(vibra, 0.2, base-3.);\n    PLAY(vibra, 0.4, base-7.);\n    PLAY(vibra, 0.6, base-8.);\n    t -= 1.6;\n    base = 5.;\n    PLAY(vibra, 0., base);\n    PLAY(vibra, 0.2, base-3.);\n    PLAY(vibra, 0.4, base-7.);\n    PLAY(vibra, 0.6, base-8.);\n    t -= 1.6 + 6.4;\n\n    //2nd part\n    if (t >= 0.)\n        t = mod(t, 9.7);\n    base = 8.;\n    PLAY(vibra, 0., base);\n    PLAY(vibra, 0.9, base-2.);\n    PLAY(vibra, 1.1, base-4.);\n    PLAY(vibra, 1.5, base-5.);\n    PLAY(vibra, 2.3, base-7.);\n    t -= 2.9;\n    base = 3.;\n    PLAY(vibra, 0., base);\n    PLAY(vibra, 0.9, base-2.);\n    PLAY(vibra, 1.1, base-4.);\n    PLAY(vibra, 1.5, base-5.);\n    PLAY(vibra, 2.3, base-7.);\n    t -= 2.9;\n    base = 0.;\n    PLAY(vibra, 0., base);\n    PLAY(vibra, 0.9, base-2.);\n    PLAY(vibra, 1.1, base-4.);\n    PLAY(vibra, 1.5, base-5.);\n    PLAY(vibra, 2.3, base-7.);\n    PLAY(vibra, 2.8, base-5.);\n\n    // drums\n    t = mod(time, 3.);\n    PLAY(snare, 0.02, 5.);\n    PLAY(snare, 0.52, 10.);\n    PLAY(snare, 0.72, 10.);\n    PLAY(snare, 1.3, 5.);\n    PLAY(snare, 1.7, 5.);\n    PLAY(snare, 2.1, 10.);\n    PLAY(snare, 2.3, 10.);\n    PLAY(kick, 0., 5.);\n    PLAY(kick, 0.5, 10.);\n    PLAY(kick, 0.7, 10.);\n\n    total = max(3., total) * 4.0;\n    return clamp(v/total, -1., 1.);\n}","name":"Sound","description":"","type":"sound"}]}