{"ver":"0.1","info":{"id":"XtsXzB","date":"1437914358","viewed":115,"name":"flasher001","username":"visy","description":"flash","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["flash"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"float PI=3.14159265;\nfloat t = 0.0;\n// Floor\nvec2 obj_floor(in vec3 p)\n{\n  return vec2(p.y+10.0,0);\n}\n\nvec2 obj_torus(in vec3 p)\n{\n  vec2 r = vec2(2.1,0.5);\n  vec2 q = vec2(length(p.xy/vec2(sin(t*2.1*p.z),cos(t*1.1*p.z)))-r.x,p.z);\n  float d = length(q+cos(t))-r.y;\n  return vec2(d,1);\n}\n\nvec2 obj_union(in vec2 obj0, in vec2 obj1)\n{\n  if (obj0.x < obj1.x)\n  \treturn obj0;\n  else\n  \treturn obj1;\n}\n\nvec2 op_sub(vec2 a, vec2 b)\n{\n  float d = max(a.x, -b.x);\n  return vec2(d,1);\n}\n\nvec2 obj_sphere(in vec3 p)\n{\n  float d = length(p)-2.9*cos(t*0.001);\n  return vec2(d,1);\n}\n\nvec2 obj_round_box(vec3 p)\n{\n  float d = length(max(abs(p)-vec3(2.0,0.5,2.0),0.0))-0.2;\n  return vec2(d,1);\n}\n\nvec2 distance_to_obj(in vec3 p)\n{\n  return obj_union(obj_floor(p), obj_union(obj_torus(p+vec3(p.z,p.y,p.x)),obj_union(obj_torus(p), op_sub(obj_round_box(p), obj_sphere(p)))));\n}\n\n//Floor Color (checkerboard)\nvec3 floor_color(in vec3 p)\n{\n  if (fract(p.x*0.2+t)>0.2*abs(sin(t*4.0)))\n  {\n    if (fract(p.z*0.2-t)>0.2*abs(cos(t*4.0)))\n      return vec3(0,0.1,0.2);\n    else\n      return vec3(1,1,1);\n  }\n  else\n  {\n    if (fract(p.z*.2)>.2*abs(cos(t*4.0)))\n      return vec3(1,1,1);\n    else\n      return vec3(1.0,0,0);\n   }\n}\n\n// Primitive color\nvec3 prim_c(in vec3 p)\n{\n  return vec3(1.6,0.6*cos(t),0.8);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  float tts = -0.4+iTime*0.01;\n    if (tts >= 0.0) tts = 0.0;\n  t = -54.5+iTime*(0.4+tts);\n    float tt2 = -20.0+iTime*0.4;\n  if (t > -33.0) t = tt2;\n  vec2 vPos = fragCoord.xy/iResolution.xy - 0.5;\n\n  // Camera up vector.\n  vec3 vuv=vec3(0,1,0); \n  \n  // Camera lookat.\n  vec3 vrp=vec3(0,0,0);\n    \n  float mx=25.0+abs(cos(t*0.1)*1.0);\n  float my=0.0+abs(sin(t*0.1)*1.0);\n  vec3 prp=vec3(cos(my)*cos(mx+t*0.1),sin(my+t*0.1),cos(my)*sin(mx))*6.0; \n  //vec3 prp = vec3(0.0);\n\n  // Camera setup.\n  vec3 vpn=normalize(vrp-prp);\n  vec3 u=normalize(cross(vuv,vpn));\n  vec3 v=cross(vpn,u);\n  vec3 vcv=(prp+vpn);\n  vec3 scrCoord=vcv+vPos.x*u*iResolution.x/iResolution.y+vPos.y*v;\n  vec3 scp=normalize(scrCoord-prp);\n\n  // Raymarching.\n  vec3 e=vec3(0.36+cos(t*1.0)*4.35,0,0);\n  const float maxd=60.0; //Max depth\n  vec2 d=vec2(0.1,0.0);\n  vec3 c,p,N;\n\n  float f=1.0;\n  for(int i=0;i<256;i++)\n  {\n    if ((abs(d.x) < .001) || (f > maxd)) \n      break;\n    \n    f+=d.x*cos(t*0.3-d.y)*0.1;\n    p=prp+scp*f;\n    d = distance_to_obj(p)*cos(t*0.01)*1.0;\n  }\n  \n  if (f < maxd)\n  {\n    // y is used to manage materials.\n    if (d.y==0.0) \n      c=floor_color(p);\n    else\n      c=prim_c(p);\n    vec3 n = vec3(d.x-distance_to_obj(p-e.xyy).x,\n                  d.x-distance_to_obj(p-e.yxy).x,\n                  d.x-distance_to_obj(p-e.yyx).x);\n    N = normalize(n);\n\tvec3 L = vec3(sin(iTime)*20.0,10,cos(iTime)*20.0);\n    float b=dot(N,normalize(prp-p+L));\n    //simple phong lighting, LightPosition = CameraPosition\n    vec4 color = vec4((tan(n.z*vPos.y+t*0.01*atan(n.y*vPos.x+t*0.1*(vPos.y*N.z))*2.0)+b*c+pow(b-tan(N.y*t*0.1),32.0))*(1.0-f*.01),1.0);\n    vec4 color2 = vec4((sin(n.z*vPos.y+t*0.01*cos(n.y*vPos.x+t*0.1*(vPos.y*N.z))*2.0)+b*c+pow(b-tan(N.y*t*0.1),32.0))*(1.0-f*.01),1.0);\n    vec4 color3 = vec4((cos(n.z*vPos.y+t*0.01*sin(n.y*vPos.x+t*0.1*(vPos.y*N.z))*2.0)+b*c+pow(b-tan(N.y*t*0.1),32.0))*(1.0-f*.01),1.0);\n    vec4 filter = vec4(vec3(d.x*c.x-b,d.y*c.y-b,d.x*c.z-L.z),1.0);\n    fragColor=(((color*color2*color3))*filter);\n  }\n  else \n    fragColor=vec4(0,0,0,1); //background color\n}\n","name":"","description":"","type":"image"}]}