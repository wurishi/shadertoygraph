{"ver":"0.1","info":{"id":"ddsGz7","date":"1665909466","viewed":77,"name":"randomgrid2952367115","username":"HaleyHalcyon","description":"a","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["a"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Random integers used for noise\nuint rand[] = uint[] (\n244u,\n 69u,\n224u,\n 39u,\n208u,\n151u,\n201u,\n255u,\n189u,\n202u,\n157u,\n 92u,\n206u,\n154u,\n199u,\n194u,\n232u,\n101u,\n216u,\n134u,\n 62u,\n242u,\n163u,\n248u,\n140u,\n183u,\n120u,\n 90u,\n215u,\n 30u,\n211u,\n186u,\n150u,\n100u,\n 57u,\n106u,\n118u,\n142u,\n 61u,\n246u,\n 11u,\n230u,\n141u,\n 55u,\n147u,\n180u,\n 27u,\n226u,\n 99u,\n125u,\n122u,\n 13u,\n  2u,\n112u,\n192u,\n 60u,\n137u,\n 80u,\n198u,\n252u,\n 94u,\n245u,\n162u,\n113u,\n 24u,\n146u,\n 49u,\n110u,\n253u,\n 81u,\n 10u,\n165u,\n109u,\n115u,\n218u,\n  0u,\n254u,\n129u,\n 71u,\n 88u,\n187u,\n114u,\n176u,\n243u,\n  7u,\n 87u,\n 45u,\n209u,\n 23u,\n168u,\n103u,\n121u,\n 93u,\n153u,\n 22u,\n133u,\n 34u,\n 78u,\n241u,\n182u,\n221u,\n 38u,\n136u,\n104u,\n 18u,\n105u,\n164u,\n 65u,\n 91u,\n 25u,\n132u,\n119u,\n174u,\n173u,\n 15u,\n170u,\n 29u,\n 37u,\n212u,\n210u,\n 44u,\n169u,\n181u,\n251u,\n  4u,\n  8u,\n229u,\n 79u,\n 32u,\n 21u,\n203u,\n214u,\n 75u,\n 12u,\n225u,\n 97u,\n 40u,\n 35u,\n 28u,\n 64u,\n231u,\n 19u,\n185u,\n123u,\n236u,\n 77u,\n238u,\n  5u,\n128u,\n179u,\n127u,\n 48u,\n 72u,\n156u,\n190u,\n 54u,\n124u,\n250u,\n205u,\n161u,\n228u,\n 56u,\n158u,\n207u,\n148u,\n 17u,\n 95u,\n 52u,\n111u,\n126u,\n 36u,\n 74u,\n197u,\n152u,\n160u,\n 20u,\n219u,\n130u,\n 66u,\n239u,\n240u,\n  6u,\n108u,\n 47u,\n116u,\n213u,\n237u,\n138u,\n 70u,\n 33u,\n 26u,\n 46u,\n 96u,\n 53u,\n 41u,\n200u,\n 59u,\n 58u,\n135u,\n 83u,\n235u,\n 31u,\n131u,\n 63u,\n 42u,\n  1u,\n149u,\n139u,\n247u,\n  9u,\n159u,\n 73u,\n 98u,\n222u,\n 68u,\n 51u,\n 67u,\n144u,\n 82u,\n233u,\n177u,\n155u,\n178u,\n 50u,\n143u,\n 84u,\n184u,\n 85u,\n217u,\n166u,\n193u,\n145u,\n 89u,\n107u,\n172u,\n 76u,\n117u,\n196u,\n 86u,\n220u,\n  3u,\n171u,\n223u,\n 16u,\n167u,\n195u,\n191u,\n102u,\n 14u,\n188u,\n227u,\n234u,\n204u,\n249u,\n 43u,\n175u\n);\n\n#define TURN (3.14159265 * 2.)\n#define HEX(x) vec3((ivec3(x) >> ivec3(16, 8, 0)) & 255) / 255.\n\n// Strength of color randomization.\n// 0.0 is none, 1.0 is full (canâ€™t see spiral)\n#define RANDSTRENGTH 0.25\n\n// Maps number (0.0 to 1.0) to color (cycles)\nvec3 color(float x){\n    const int colorCount = 8;\n    vec3[] c = vec3[](\n        vec3(0),\n        HEX(0xe020c0),\n        HEX(0xf0e040),\n        HEX(0xc0ff80),\n        vec3(1),\n        HEX(0xa0ffe0),\n        HEX(0x7080F0),\n        HEX(0x8000a0),\n        vec3(0) // redundancy to avoid %\n    );\n    x *= float(colorCount);\n    // no smoothing:\n    return c[int(floor(x))];\n    \n    // smoothing:\n    /*\n    int lo = int(floor(x));\n    \n    return mix(\n        c[lo],\n        c[lo + 1],\n        smoothstep(0.5, 1., fract(x))\n    );*/\n}\n\n// Random noise [0.0, 1.0) depending on coordinates and time\nfloat randxy(vec2 uv, float t) {\n    return float(rand[\n        (uint(uv.x + 256.) + rand[\n            (uint(uv.y + 256.) + rand[\n                uint(t * 256.)\n            ]) & 255u\n        ]) & 255u\n    ]) / 256.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Make loop every second\n    float time = fract(iTime);\n    // Resize coordinates so center is (0, 0) and diagonals are length 2\n    vec2 uv = (2. * fragCoord - iResolution.xy) / length(iResolution.xy);\n    // Generate grid to use for graphics\n    vec2 uvGrid = floor(uv * 32.) + 0.5;\n    \n    float noise = randxy(uvGrid, time);\n    // Length from center. Logarithm for zoom effect\n    float lenGrid = log(length(uvGrid));\n    // Angle from center. Rescaled so that 1 rotation is 1.0\n    float angleGrid = atan(uvGrid.y, uvGrid.x) / TURN;\n    // Spiral pattern underneath.\n    float spiral = (\n        0.3 * lenGrid + // Compression of distance\n        1. * angleGrid // Number of spokes; set to 0 for rings\n    );\n    // Time varying pixel color\n    vec3 col = color(\n        fract(\n             RANDSTRENGTH * noise +\n             1. * spiral +\n             1. * time\n        )\n    );\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}