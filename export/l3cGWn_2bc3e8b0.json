{"ver":"0.1","info":{"id":"l3cGWn","date":"1716328820","viewed":136,"name":"Something I Saw at a Rave","username":"GarlicGraphix","description":"Something I saw at a rave. Code is hidden in buffer a because it scares me","likes":10,"published":1,"flags":32,"usePreview":1,"tags":["rave"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // Get pixel colour from iChannel0\n    vec3 col = texture(iChannel0, uv).rgb*0.7;\n    // Gamma correction\n    col = pow(col, vec3(1.0/2.2));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define N 30\n#define PI 3.14159\n#define TAU 6.28318\nfloat circle( vec2 o, vec2 uv, float t ) \n{\n    float g = 0.2;\n    t -= g;\n    float d = length( o - uv );\n    if (d < t) {\n        return 0.0;\n    } else {\n        return 0.01+1.0-smoothstep( t, g + t, d );\n    }\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n    float r = iResolution.x/iResolution.y;\n    float t = float(N);\n    vec3 col = vec3( 0.0 );\n\n    vec2 pts[N];\n    int mpt = 0;\n    float mt = 10.0;\n    float l = 20.0;\n    float s = 0.5;\n    \n    for ( int i = 0; i < N; i++ ) {\n        float ft = mod(iTime*s+float(i)/l, t/l);\n        pts[i] = vec2( cos( TAU * float(i) / float(N) ), sin( TAU * float(i) / float(N) ) ) * 0.3 + vec2( r/2.0, 0.5 );\n        if ( ft < mt ) {\n            mpt = i;\n            mt = ft;\n        };\n    }\n    \n    // This is the worst for loop\n    for ( int i = mpt; i != int(mod(float(mpt-1), float(N))); i = int(mod(float(i + 1), float(N))) ) {\n        float ft = mod(iTime*s+float(i)/l, t/l);\n        float c = circle( pts[i], uv, ft );\n        if ( c != 0.0 ) {\n            col = vec3( 0.3, 1.0, 0.3 ) * c * (0.2+smoothstep(0.0, t/l,ft)*0.8) * (1.0-smoothstep(t/l-0.8, t/l, ft));\n        }\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}