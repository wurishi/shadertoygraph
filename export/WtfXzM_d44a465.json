{"ver":"0.1","info":{"id":"WtfXzM","date":"1562341588","viewed":120,"name":"[00006] Powerplant","username":"samel","description":"[00006] Powerplant\nTrying out glow, repetition without mod ... still working on the glow glitches 8)","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","glow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"precision highp float;\n\nfloat mindc=1e7;\n\nvec3 cam(vec3 o,vec3 t,vec2 uv)\n{\n vec3 wup=vec3(0.0,1.0,0.0);\n vec3 cf=normalize(t-o);\n vec3 cr=cross(wup,cf);\n vec3 cu=cross(cf,cr);\n vec3 c=o+cf*1.0;\n vec3 i=c+cr*uv.x+cu*uv.y;\n return normalize(i-o);\n}\n\nmat2 rot(float a)\n{\n return mat2(cos(a),-sin(a),sin(a),cos(a));\n}\n\nfloat box(vec3 p,vec3 o,vec3 s)\n{\n p-=o;\n vec3 d=abs(p)-s;\n return length(max(d,0.0))+\n  min(max(d.x,max(d.y,d.z)),0.0);\n}\n\nfloat cylinder(vec3 p,vec3 o,vec3 c)\n{\n  p-=o;\n  return length(p.xz-c.xy)-c.z;\n}\n\nfloat block(vec3 p)\n{\n float d=1e7;\n \n float b1=box(p,vec3(0,0,0),vec3(0.5));\n d=min(d,b1);\n \n float b5=box(p,vec3(0,0,0),vec3(0.1,2.0,0.1));\n d=min(d,b5);\n \n float b6=box(p,vec3(0,0,0),vec3(2.06,0.1,0.1));\n d=min(d,b6);\n \n return d;\n}\n\nfloat pp(vec3 p)\n{\n float d=1e7;\n \n //p.xz=mod(p.xz+7.0,14.0)-7.0;\n p.xz=mod(p.xz+10.0,20.0)-10.0;\n p.y=clamp(p.y,-10.0,10.0);\n p.y=mod(p.y+2.0,4.0)-2.0;\n \n p.z-=4.0;\n for(int i=0;i<7;i++)\n {\n  d=min(d,block(p));\n  p.x-=2.0;\n  p.xz*=rot(6.28/7.0);\n  p.x-=2.0;\n }\n return d;\n}\n\n\nfloat energy(vec3 p)\n{\n p.y+=iTime*20.0;\n //p.xz=mod(p.xz+7.0,14.0)-7.0;\n p.xz=mod(p.xz+10.0,20.0)-10.0;\n\n  float r=p.y*0.5;\n  //mat2 m=mat2(cos(r),-sin(r),sin(r),cos(r));\n  //p.xz*=m;\n  p.x+=sin(r);\n  p.z+=cos(r);\n\n float d=cylinder(p,\n                  vec3(0.0,\n                       0.0,\n                       0.0),\n                  vec3(0.1,0.1,0.15));\n mindc=min(mindc,d);\n  return d;\n}\n\nfloat scene(vec3 p)\n{\n float d=pp(p);\n d=min(d,energy(p));\n return d;\n}\n\nvec3 norm(vec3 p)\n{\n vec2 e=vec2(0.001,0.0);\n float d=scene(p);\n return normalize(\n  vec3(\n   d-scene(p-e.xyy),\n   d-scene(p-e.yxy),\n   d-scene(p-e.yyx)\n   ));\n}\n\nvec3 pixelColor(vec2 uv)\n{\n vec3 o=vec3(sin(iTime*0.2)*5.0,sin(iTime*0.7)*7.0,cos(iTime*0.4)*40.0);\n //o=vec3(20,2,-20);\n vec3 t=vec3(0.0,0.0,0.0);\n vec3 rd=cam(o,t,uv);\n vec3 p;\n float d=0.0;\n float sd=0.0;\n int k=0;\n for(int i=0;i<128;i++)\n {\n  k=i;\n  p=o+rd*d;\n  sd=scene(p);\n  if(sd<0.01 || d>30.0)\n  {\n   break;\n  }\n  d+=sd;\n }\n if(d>30.0)d=30.0;\n //vec3 n=norm(p);\n float f=1.0-exp(-d*0.007);\n float g=exp(-mindc*0.6);\n if(sd<0.01)\n {\n  float cd=energy(p);\n  if(cd>0.01)\n  {\n   cd=exp(-cd*0.5);\n   return mix(vec3(cd)*vec3(0.69,0.76,0.87)+vec3(1,1,1)*g,vec3(0),f);\n  }\n  return vec3(1,1,1);\n }\n //return vec3(0);\n return mix(vec3(1,1,1)*g,vec3(0),f);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.x;\n\n\n    // Output to screen\n    fragColor = vec4(pixelColor(uv),1.0);\n}","name":"Image","description":"","type":"image"}]}