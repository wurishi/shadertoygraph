{"ver":"0.1","info":{"id":"wtscD8","date":"1592027846","viewed":183,"name":"Lights...","username":"photonic","description":"Sutidying","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["performance","lights","help","question"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float plot(vec2 st, float pct){\n  return  smoothstep( pct-0.12, pct, st.y) -\n          smoothstep( pct, pct+0.12, st.y);\n}\n\nvec3 linearToneMapping(vec3 color, float gamma) {\n    float exposure = 1.0;\n    color *= exposure / (1. + color / exposure);\n    color = pow(color, vec3(1. / gamma));\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\n    //uv += vec2(sin(iTime * 5.0), cos(iTime * 5.0)) / 2.0;\n    vec3 col = vec3(0.0);\n\n    vec2 uvR = uv;\n    vec2 uvG = uv;\n    vec2 uvB = uv;\n    \n    float speed = 2.5;\n    float lightsize = 0.015;\n    float flickerSpped = 1.0;\n    uvR += vec2(.1, .1) + vec2(sin(10. + iTime * speed), cos(iTime * speed)) / 7.0;\n    uvG += vec2(-.1, .1) + vec2(cos((3.0 + iTime * speed)), sin(iTime * speed)) / 7.0;\n    uvB += vec2(0.0, -.1)+ vec2(cos(5.0 + iTime * speed), cos(iTime * speed)) / 7.0;\n    \n    float d1 = length(uvG-uvR);\n    \n    vec2 p1 = uvR * 3.0 / d1;\n    vec2 p2 = uvG * 5.0 / d1;\n    \n    float line = plot(uvR, uvR.x);\n\n    float dR = lightsize * abs(sin(iTime* flickerSpped)) / length(uvR);\n    float dG = lightsize * abs(cos(iTime* flickerSpped))/ length(uvG);\n    float dB = lightsize * abs(sin(0.45+iTime* flickerSpped))/ length(uvB);\n\n    vec3 color = vec3(sin(iTime*2.5), sin(iTime*3.), sin(iTime));\n    color = abs(color);\n    col += dR * color;\n    col += dG * color;\n    col += dB * color;\n    //col += line;\n    //col = linearToneMapping(col, 1.2);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}