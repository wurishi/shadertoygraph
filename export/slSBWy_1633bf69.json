{"ver":"0.1","info":{"id":"slSBWy","date":"1653405139","viewed":64,"name":"Fork Quest bpaw22 128 alt","username":"bpaw22","description":"Answer for Question 1 of D4 graphics assessment, which doesn't use angles and radius to calculate u & v.\n\nI can see why this wasn't the desired result even though it technically looks \"more correct.\"","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["texture"],"hasliked":0,"parentid":"7tjfzc","parentname":"Fork Question 1 bpaw22 668"},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"///non-twisted texSpin answer.\n///I wanted to include this because my first interpretation of the question looked like this in my head..\n/// it was fast enough to implement, so I went for it!\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    // limit rendering to the lower left of the screen\n    const float size = 258.0;    \n    if (fragCoord.x > size || fragCoord.y > size)\n    {\n        fragColor = vec4(0.0);\n        return;\n    }\n    \n    // calculate uv\n\tvec2 uv = fragCoord/size;\n    // center point of rotation\n    vec2 texCenter = vec2(0.5, 0.5);\n    // get normalized upvector for angle calculation\n    vec2 centerToUV = uv - texCenter;\n    \n    float sine = sin(iTime);\n    float cosine = cos(iTime);\n    mat2 rotationMatrix = mat2(cosine, sine, -sine, cosine);\n    \n    vec2 newVec = rotationMatrix * centerToUV;\n    \n    vec2 samplePos = newVec + texCenter;\n    \n    // sample texture\n    fragColor = texture(iChannel0,samplePos);\n}","name":"Image","description":"","type":"image"}]}