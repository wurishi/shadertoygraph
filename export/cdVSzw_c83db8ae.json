{"ver":"0.1","info":{"id":"cdVSzw","date":"1680874260","viewed":72,"name":"Hard Wiggle stripes","username":"alebarbieri","description":"Trying to create a frequency wave.\nCredit to @pronce\nhttps://www.shadertoy.com/view/7ss3RX","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["wave","lines","stripes","frequency","wiggle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// pseudorandom canonical function from 'On generating random numbers, \n// with help of y= [(a+x)sin(bx)] mod 1\", W.J.J. Rey, 22nd European\n// Meeting of Statisticians and the 7th Vilnius Conference on Probability\n// Theory and Mathematical Statistics, August 1998'\n// aka the random generator everyone uses :)\n#define R(x) fract(sin(dot(x,vec2(12.9898,78.233))) * 43758.5453)\n#define PI 3.14159265\n\n// linear wiggle function\nfloat hardWiggle(float time, float frequency, float seed)\n{\n    // Update wave frequency\n    time *= frequency;\n   \n    // Generate random numbers\n    float a = R(vec2(floor(time), seed)) * 2.0 - 1.0;\n    float b = R(vec2(ceil(time), seed)) * 2.0 - 1.0;\n    \n    // Make sure time is a number between 0 and 1 \n    time -= floor(time);\n    \n    // Generate a number which is halfway betweeen random number a and random number b\n    return mix(a, b, time);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 col = vec3(0.0);\n    \n    // Increment the time from left to right\n    float timeBasedOnX = uv.x + iTime * 0.25;\n    \n    // calculate the hard curve, this is just linear and has a rough appearance\n    vec2 hard = uv;\n    hard.y += hardWiggle(timeBasedOnX, 20., 123.) * 0.1 - 0.5;\n    // Create a line\n    col.y = smoothstep(2.0 / iResolution.y, 0.0, abs(hard.y));\n    \n    // See https://graphtoy.com/?f1(x,t)=abs(x)&v1=true&f2(x,t)=smoothstep(0.3,%200.0,%20f1(x,t))&v2=true&f3(x,t)=&v3=false&f4(x,t)=&v4=false&f5(x,t)=&v5=false&f6(x,t)=&v6=false&grid=1&coords=0,0,1.3333333333333333\n    // See https://graphtoy.com/?f1(x,t)=1-fract(x)&v1=true&f2(x,t)=fract(x)&v2=true&f3(x,t)=step(fract(x*0.5),0.5)&v3=true&f4(x,t)=step(fract((x+1)*0.5),0.5)&v4=true&f5(x,t)=(1-fract(x))*step(fract(x*0.5),0.5)+fract(x)*step(fract((x+1)*0.5),0.5)&v5=true&f6(x,t)=&v6=false&grid=1&coords=0,-0.7054654766281401,3.8041556081466794\n    // See https://graphtoy.com/?f1(x,t)=(1-fract(x))*step(fract(x*0.5),0.5)+fract(x)*step(fract((x+1)*0.5),0.5)&v1=false&f2(x,t)=smoothstep(0.2,%200,f1(x))&v2=false&f3(x,t)=x*10&v3=false&f4(x,t)=(1-fract(f3(x)))*step(fract(f3(x)*0.5),0.5)+fract(f3(x))*step(fract((f3(x)+1)*0.5),0.5)&v4=false&f5(x,t)=smoothstep(0.6,%200,f4(x))&v5=true&f6(x,t)=&v6=false&grid=1&coords=0,0,1.3333333333333333\n    float frequency = hard.y * 40.;\n    float gradient1 = 1. - fract(frequency);\n    float zigzag1 = (gradient1) * step(fract(frequency * 0.5), 0.5);\n    float gradient2 = fract(frequency);\n    float zigzag2 = fract(frequency) * step(fract((frequency + 1.) * 0.5), 0.5);\n    float zigzag = zigzag2 + zigzag1;\n    col.z = smoothstep(0.9, 1., zigzag * 1.5);\n    \n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}