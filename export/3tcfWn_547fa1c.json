{"ver":"0.1","info":{"id":"3tcfWn","date":"1612471463","viewed":73,"name":"Camera imaging a set of points","username":"cborel","description":"Commented code based on youtube video by \"The Art of Code\":\nhttps://www.youtube.com/watch?v=PBxuVlp7nuM&t=201s","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raycasting","camera","theartofcode"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nSimple 3d camera imaging a set of points defining a cube described in video by \"Art of Code\" in:\nhttps://www.youtube.com/watch?v=PBxuVlp7nuM&t=201s\n*/\n\n// function to compute the distance of a point p from the ray eminating from ro in direction rd\nfloat DistLine(vec3 ro, vec3 rd, vec3 p){\n    return length(cross(p-ro,rd))/length(rd);\n}\n\n// draw a point\nfloat DrawPoint(vec3 ro, vec3 rd, vec3 p){\n// compute distance of p from ray rd\n    float d=DistLine(ro,rd,p);\n    float d2=smoothstep(0.1,0.05,d);\n    return d2;\n}\n// Camera defined by ray origin ro, lookat point and zoom factor\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    // define uv coordinates for camera\n    vec2 uv=fragCoord.xy/iResolution.xy;\n    // shift to middle (0.5,0.5)\n    uv-=0.5;\n    // adjust aspect ratio\n    uv.x*=iResolution.x/iResolution.y;\n    // time\n    float t=iTime;\n    // define ray origin as a circle \n    vec3 ro=10.*vec3(sin(t),1.,cos(t));\n    // look at point\n    vec3 lookat=vec3(0.);\n    // world up vector\n    vec3 wup=vec3(0.,1.,0.);\n    // camera forward vector f\n    vec3 f=normalize(lookat-ro);\n    // camera right vector\n    vec3 r=cross(wup,f);\n    // camera up vector\n    vec3 u=cross(f,r);\n    // define zoom\n    float zoom=2.0;\n    // center of screen\n    vec3 c=ro+f*zoom;\n    // intersection of ray with screen\n    vec3 i=c+uv.x*r+uv.y*u;\n    // ray into world\n    vec3 rd=i-ro;\n    // define a variable for distance image\n    float d=0.0;\n    // draw the points of a cube\n    vec3 cc=vec3(0.5);\n    d+=DrawPoint(ro,rd,vec3(0.,0.,0.)-cc);\n    d+=DrawPoint(ro,rd,vec3(0.,0.,1.)-cc);\n    d+=DrawPoint(ro,rd,vec3(0.,1.,0.)-cc);\n    d+=DrawPoint(ro,rd,vec3(0.,1.,1.)-cc);\n    d+=DrawPoint(ro,rd,vec3(1.,0.,0.)-cc);\n    d+=DrawPoint(ro,rd,vec3(1.,0.,1.)-cc);\n    d+=DrawPoint(ro,rd,vec3(1.,1.,0.)-cc);\n    d+=DrawPoint(ro,rd,vec3(1.,1.,1.)-cc);\n    // set color to distance and alpha channel to 1.0\n    fragColor=vec4(vec3(d),1.0);\n}","name":"Image","description":"","type":"image"}]}