{"ver":"0.1","info":{"id":"ws2SDt","date":"1555391348","viewed":111,"name":"bonfire vortex","username":"jsharifi","description":"inspired by the phoenix mascot for Bonfire Studios","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["radial","distance"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 Rotate(vec2 v, float a) {\n    return(vec2(v.x * cos(a) - v.y * sin(a), v.x * sin(a) + v.y * cos(a)));\n}\n\nvec2 Hatch(vec2 uv) {\n    float c = cos(6.28 * cos(6.28 * uv.x + 233.25 + cos(iTime)));\n    float s = sin(6.28 * sin(6.28 * uv.y + 345.43 + sin(iTime)));\n    return(vec2(c, s));\n}\n\nvec2 Multihatch(vec2 init) {\n    vec2 uv1 = Rotate(init, 0.5 + iTime * 0.1);   \n    vec2 uv2 = Rotate(init, 1.0 + iTime * 0.1);\n    vec2 uv3 = Rotate(init, 1.5 + iTime * 0.1);\n    vec2 uv4 = Rotate(init, 2.0 + iTime * 0.1);\n    return(Hatch(uv1) + Hatch(uv2) + Hatch(uv3) + Hatch(uv4));\n}\n\nconst float nfreq = 3.14 * 1.0;\nfloat cNoise(float v1, float v2, float v3, float v4) {\n    return(cos(\n        cos(v1 * -cos(iTime * 0.5 + 1.0) * nfreq) * sin(v2 * sin(iTime * 0.2 + 3.0) * nfreq) + \n        cos(v3 * -sin(iTime * 0.3 + 2.0) * nfreq) * cos(v4 * cos(iTime * 0.3 + 4.0) * nfreq)\n    ) * 0.5 + 0.5);\n}\n\nvec3 colorQuery(float a) {\n    const int count = 12;\n    const vec3 color_lut[count] = vec3[count] (\n        // dark blues\n        vec3(0.3, 0.1, 0.6),\n        vec3(0.2, 0.1, 0.7),\n        vec3(0.1, 0.1, 0.3),\n        \n        // light blues\n        vec3(0.7, 0.5, 0.9),\n        vec3(0.2, 0.9, 0.9),\n        vec3(0.1, 0.0, 0.2),\n        \n        // dark red\n        vec3(0.4, 0.2, 0.2),\n        vec3(0.5, 0.1, 0.6),\n        vec3(0.9, 0.3, 0.2),\n        \n        // light red\n        vec3(0.7, 0.5, 0.3),\n        vec3(0.8, 0.3, 0.2),\n        vec3(0.0, 0.1, 0.0)\n        );\n    float rescale = float(count) * a;\n    int ind1 = int(rescale) % count;\n    int ind2 = int(rescale + 1.0) % count;\n\n    return(mix(color_lut[ind1], color_lut[ind2], fract(rescale)));\n}\n\nconst float hashing_freq = 0.04;\nconst float spiral_freq = 0.9;\nconst float arm_count = 1.0;\nconst float p_spiral = 0.1;\nconst float p_time = 0.1;\nconst float spiral_out_speed = -20.0;\nconst float spiral_out_length = 0.5;\nconst float spiral_shades = 3.0;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord/iResolution.xy - 0.5) * 3.14;\n    // remap uniform surface into a bubbly surface\n    uv = mix(uv, Multihatch(uv), hashing_freq);\n\n    // angle of uv coordinates\n    float theta = atan(uv.y, uv.x) + 3.0;\n    // distance from 0\n    float d = cos(uv.x) * cos(uv.y) / spiral_freq;\n    // composition of theta and d produces spiral\n    float spiral = cos(d * spiral_out_speed + theta * arm_count);\n    // dark highlights\n\tfloat vignette = cNoise(uv.x, spiral, d, uv.y);\n \n    // color is darkened by vig, queries a lookup table based on uv coordinates and time\n    vec3 col = vignette * colorQuery(sin(d * spiral_out_length) * spiral_shades + \n                        p_spiral * spiral + \n                        p_time * iTime);\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}