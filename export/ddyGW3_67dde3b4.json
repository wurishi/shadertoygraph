{"ver":"0.1","info":{"id":"ddyGW3","date":"1679092551","viewed":114,"name":"Fork  4-leaf cl jackuffmar 546","username":"jackuffmarshall","description":"\n\nHappiness of 4-leaf clover for Chieri.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2dparticles"],"hasliked":0,"parentid":"XlVGRy","parentname":" 4-leaf clover"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define _ParticlesAmount 10\n\nfloat rnd(float x)\n{\n    return fract(sin(dot(vec2(x + 47.49,38.2467 / (x + 2.3)), vec2(12.9898, 78.233))) * (43758.5453));\n}\n\nfloat drawLeaf(vec2 uv, float scale, float d) {\n\tfloat ret;\n    vec2 root = uv - vec2(0.0, scale);\n    float r = length(root) / scale;\n    float t = abs(atan(root.x, root.y) / 3.1415);\n    float edge = (3.0 * t - 8.0 * t*t*t*t + 6.0 * t*t*t*t*t) / (4.0 - 3.0 * t);\n    //float edge = (3.0 * t - 8.0 * t*t*t*t*t + 6.0 * t*t*t*t*t*t) / (3.0 - 2.0 * t*t);\n    //float edge = (3.0 * t + 2.0 * t*t - 2.0 * t*t*t - 9.0 * t*t*t*t*t*t + 7.0 * t*t*t*t*t*t*t) / (5.0 - 4.0 * t*t);\n\tret = smoothstep(edge - d, edge + d, r);\n\treturn ret;\n}\n\nmat2 rotate(float t) {\n    return mat2(cos(t), -sin(t), sin(t), cos(t));\n}\n\nfloat drawClover(vec2 uv, float scale, float d) {\n    float ret = drawLeaf(uv, scale, d);\n    uv = rotate(1.5707) * uv;\n    ret *= drawLeaf(uv, scale, d);\n    uv = rotate(1.5707) * uv;\n    ret *= drawLeaf(uv, scale, d);\n    uv = rotate(1.5707) * uv;\n    ret *= drawLeaf(uv, scale, d);\n    return 1.0 - ret;\n}\n\nvec4 alphaBlend(vec4 base, vec4 blend)\n{\n    return vec4(base.rgb * base.a * (1.0 - blend.a) + blend.rgb * blend.a, blend.a + base.a * (1.0 - blend.a));   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (2.0 * fragCoord.xy - iResolution.xy) / min(iResolution.x, iResolution.y);\n    float t = smoothstep(1.5, 0.0, length(uv));\n    fragColor = vec4(t * vec3(0, 0.0, 0.0) + (1.0 - t) * vec3(0.0, 0.0, 0.0), 1.0);\n   \n    float j;\n    float move_max = 2.0;\n    vec2 spawn_center = vec2(0.0, 0.0);\n    float spawn_length = 0.5;\n    float _ParticlesAmount_f = float(_ParticlesAmount);\n    \n    for (int i = 1; i < _ParticlesAmount; i++)\n    {\n        j = float(i);\n        float rnd1 = rnd(cos(j));\n        float delayedTime = (0.2 + 0.2 * rnd1) * iTime;\n        float d = floor(delayedTime / move_max);\n        float rnd2 = rnd(j * d);\n        float rnd3 = rnd(j * j * d);\n        float r = delayedTime / move_max - d;\n        float x_wave = 0.15 * sin(delayedTime * 7.0 + 6.282 / j);\n        vec2 spawn = vec2(0.0, rnd3 * spawn_length);\n        float ease = pow(2.0, 5.0 * (r - 1.0));\n        float y_move = move_max * ease;\n        float opacity = 1.0 - ease - pow(2.0, -30.0 * r);\n        float scale = 1.0 - 0.65 * rnd1 + 0.15 * sin(1.8 * iTime * j / _ParticlesAmount_f + 6.282 / j);\n        float rot_wave = 2.0 * sin(delayedTime * 3.0 * j / _ParticlesAmount_f * 2.0 + 6.282 / j);\n    \tvec2 center = rotate(rot_wave) * (rotate(6.282 * rnd2) * (uv + spawn_center) + spawn + vec2(x_wave, y_move)) * scale;\n        vec3 cloverColor = vec3(0.3 + 0.3 * rnd2, 0.98, 0.3) * (1.0 - 0.3 * rnd3);\n    \tvec3 cloverCenterColor = cloverColor + (vec3(1.0) - cloverColor) * 0.5;\n    \tvec3 cloverBgColor = vec3(1.0, 0.98, 0.7);\n    \tfragColor = alphaBlend(fragColor, vec4(cloverBgColor, opacity * drawClover(center, 0.1, 0.3)));\n   \t\tfragColor = alphaBlend(fragColor, vec4(cloverColor, opacity * drawClover(center, 0.1, 0.01)));\n    \tfragColor = alphaBlend(fragColor, vec4(cloverCenterColor, opacity * drawClover(center, 0.05, 0.3)));\n    }\n}\n","name":"Image","description":"","type":"image"}]}