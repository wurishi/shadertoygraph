{"ver":"0.1","info":{"id":"4tccRS","date":"1532958549","viewed":327,"name":"Arbitrary Regular Polygons ","username":"nr4","description":"Regular polygons with loop removed.","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","polygons","regular"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n * Arbitrary Regular Polygons\n * \n * Copyright (C) 2018  Alexander Kraus <nr4@z10.info>\n * \n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n * \n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n// Update 1: Changed antialiasing like FabriceNeyret2 suggested\n// Update 2: Removed loop from dpoly_min (compare comment from FabriceNeyret2).\n// Update 3: Fabrice's second comment.\n// Update 4: Added borders again\n\nconst float pi = acos(-1.);\nconst vec3 c = vec3(1.,0.,-1.);\n\n// hash function\nfloat r(vec2 a0)\n{\n    return fract(sin(dot(a0.xy ,vec2(12.9898,78.233)))*43758.5453);\n}\n\n// compute distance to regular polygon\nfloat dpoly_min(vec2 x, float N, float R)\n{\n    float d = 2.*pi/N,\n        t = mod(acos(x.x/length(x)), d)-.5*d;\n    return R-length(x)*cos(t)/cos(.5*d);\n}\n\n#define A iResolution.y\n#define B 3./Y\n#define S(v) smoothstep(-1.5/A,1.5/A,v)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float a = .1; // tile size\n     vec2 uv = fragCoord/A+.5,\n        x = mod(uv, a)-.5*a, y = uv-x; // we want many polygons\n    \n    //random number of edges and random rotation\n    float p = 5.*r(y)*iTime,\n        k = cos(p), s = sin(p),\n        d = dpoly_min(mat2(k,s,-s,k)*x, 3.+floor(5.*r(y)), .45*a); \n    \n    //set random colors\n    vec3 col = .5 + .5*cos(p+uv.xyx+vec3(0.,2.,4.));\n    fragColor = vec4(col*mix(S(d),1.,.5)+S(-abs(.5*d)),1.);\n}","name":"Image","description":"","type":"image"}]}