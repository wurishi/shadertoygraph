{"ver":"0.1","info":{"id":"ftSyD3","date":"1650298069","viewed":359,"name":"Glitch Box 2 [650 bytes]","username":"Xor","description":"A new take on my [url=https://www.shadertoy.com/view/ssffR2]\"Glitch Box\"[/url] shader. Adding bokeh this time","likes":29,"published":1,"flags":32,"usePreview":0,"tags":["golf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Bokeh pass\n\n#define T texture(iChannel0, I/r\nvoid mainImage(out vec4 O, vec2 I)\n{\n    vec2 r = iResolution.xy,\n    p = vec2(T,2.).a*r.y/3e2,O-=O);\n    for(float i=.5; i<8.; i+=.5/i)\n    {\n        p *= -mat2(.737, .676, -.676,  .737);\n        O += pow(vec4(1,T+p*i/r)),10.-O+O);\n    }\n    O = pow(O.gbar,.1-O+O);\n    O = O / O.a+T,log(r.y))-.1;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//\"Glitch box\" render\n//shadertoy.com/view/ssffR2\nvoid mainImage(out vec4 O, vec2 I )\n{\n    O-=O; //Clear color\n    \n    vec3 r = iResolution,\n    d = vec3(roundEven(I)*2.-r.xy,-r)/r.x, //Pixelated ray direction\n    p = 5./r,v; //Camera position\n    d.yz *= mat2(.8,.6,-.6,.8); //Rotate downward\n    \n    for(float i=0.,s,h=i,t = iTime; i++<9e2 && length(p)<6.;\n    \n        int(i)%6<1? //Step forward every 6 iterations\n        v = p,\n        v.xz *= mat2(cos(t*.2+vec4(0,11,33,0))), //Rotate\n        p += d*max(h*.1,0.), //Step forward (box and heightfield)\n        h = p.y-1. //Reset height\n        :\n        s = exp2(mod(i,6.)), //Update scale\n        h += 4.*texture(iChannel0,ceil(v*s+ceil(t*.3+I.y/1e5))/8e1).r/--s //Sample texture\n    );\n\n    O.rgb = clamp(fwidth(v)*9.,0.,1.); //Compute color from position derivative\n    O.a = abs(p.z-2.)*.1;\n}","name":"Buffer A","description":"","type":"buffer"}]}