{"ver":"0.1","info":{"id":"3ddyzn","date":"1600279731","viewed":134,"name":"6 - Mandala","username":"Krabcode","description":"mouse x: detail (fbm octave count)\nmouse y: zoom","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["noise","fbm","mandala"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float time;\nvec2 m;\n\n// IQ noise and domain warp\nfloat hash(float n)\n{\n    return fract(sin(n)*43758.5453);\n}\n\nfloat iqNoise(vec3 x){\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f  = f*f*(3.0-2.0*f);\n    float n = p.x + p.y*57.0 + 113.0*p.z;\n    return mix(mix(mix(hash(n+0.0), hash(n+1.0), f.x),\n    mix(hash(n+57.0), hash(n+58.0), f.x), f.y),\n    mix(mix(hash(n+113.0), hash(n+114.0), f.x),\n    mix(hash(n+170.0), hash(n+171.0), f.x), f.y), f.z);\n}\n\n\nfloat fbm(vec2 p){\n    float sum = 0.;\n    float freq = 1.;\n    float amp = 0.5;\n    for (int i = 0; i < 1+int(floor(m.x*4.)); i++){\n        sum += amp*(1.-2.*iqNoise(vec3(p*freq, 0.)));\n        freq *= 2.0;\n        amp *= .5;\n    }\n    return sum;\n}\n\nfloat pattern( in vec2 p, out vec2 q, out vec2 r )\n{\n    q.x = fbm( p + vec2(0.0+time,0.0-time) );\n    q.y = fbm( p + vec2(5.2-time,1.3) );\n\n    r.x = fbm( p + 4.0*q + vec2(1.7,9.2) );\n    r.y = fbm( p + 4.0*q + vec2(8.3,2.8) );\n\n    return fbm( p + 4.0*r );\n}\n\nfloat render(vec2 uv){\n \tfloat a = cos(8.*atan(uv.y, uv.x));\n    float d = length(uv*(2.5+m.y*25.))-time*.05;\n    vec2 p = vec2(d, a);\n    vec2 q = vec2(0.);\n    vec2 r = vec2(0.);\n    float n = .25+.75*pattern(p, q, r);\n    n *= length(q*2.);\n    n += r.x;\n    n -= r.y;\n    return n;\n}\n\nfloat renderAA(vec2 uv){\n    float pixelThird = (1./iResolution.x) / 3.0;\n    vec2 aa = vec2(-pixelThird, pixelThird);\n    float c1 = render(uv+aa.xx);\n    float c2 = render(uv+aa.xy);\n    float c3 = render(uv+aa.yx);\n    float c4 = render(uv+aa.yy);\n    return (c1+c2+c3+c4) / 4.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // https://colorhunt.co/palette/179481\n\tcolorPoint[colorsPerGradient] gradient = colorPoint[](\n        colorPoint(0., vec4(hexToRgb(0x522d5b)*.5, 1)),\n        colorPoint(0.25,  vec4(hexToRgb(0x522d5b), 1.)),\n        colorPoint(0.5,vec4(hexToRgb(0xd7385e), 1.)),\n        colorPoint(0.75, vec4(hexToRgb(0xfb7b6b), 1.)),\n        colorPoint(1.0,vec4(hexToRgb(0xe7d39f), 1.))\n    );\n    time = float(iFrame)*0.001;\n    m = iMouse.xy / iResolution.xy;\n    if(length(m) < 0.01){\n      m = vec2(.1);   \n    }\n    vec2 uv = (fragCoord.xy - .5*iResolution.xy) / iResolution.y;\n\tfloat n = renderAA(uv);\n    fragColor = gradientColorAt(n, gradient, 0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI 3.14159365\n#define TAU 6.28318531\n\nconst int colorsPerGradient = 5;\n\n//---------------------------------------------------------------------------------\n//--------------------------------Color Functions----------------------------------\n//------------------by nmz: https://www.shadertoy.com/view/XddGRN------------------\n\n//-----------------HSV-----------------\n\n//HSV functions from iq (https://www.shadertoy.com/view/MsS3Wc)\n#ifdef SMOOTH_HSV\nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n    rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\n\n    return c.z * mix( vec3(1.0), rgb, c.y);\n}\n#else\nvec3 hsv2rgb(in vec3 c)\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n    return c.z * mix( vec3(1.0), rgb, c.y);\n}\n#endif\n\n//From Sam Hocevar: http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\n//Linear interpolation between two colors in normalized (0..1) HSV space\nvec3 lerpHSV(in vec3 a, in vec3 b, in float x)\n{\n    float hue = (mod(mod((b.x-a.x), 1.) + 1.5, 1.)-0.5)*x + a.x;\n    return vec3(hue, mix(a.yz, b.yz, x));\n}\n\n//---------------Improved RGB--------------\n\n/*\nThe idea behind this function is to avoid the low saturation area in the\nrgb color space. This is done by getting the direction to that diagonal\nand displacing the interpolated\tcolor by it's inverse while scaling it\nby saturation error and desired lightness.\n\nI find it behaves very well under most circumstances, the only instance\nwhere it doesn't behave ideally is when the hues are very close\tto 180\ndegrees apart, since the method I am using to find the displacement vector\ndoes not compensate for non-curving motion. I tried a few things to\ncircumvent this problem but none were cheap and effective enough..\n*/\n\n//Changes the strength of the displacement\n#define DSP_STR 1.5\n\n//Optimizaton for getting the saturation (HSV Type) of a rgb color\n#if 0\nfloat getsat(vec3 c)\n{\n    c.gb = vec2(max(c.g, c.b), min(c.g, c.b));\n    c.rg = vec2(max(c.r, c.g), min(c.r, c.g));\n    return (c.r - min(c.g, c.b)) / (c.r + 1e-7);\n}\n#else\n//Further optimization for getting the saturation\nfloat getsat(vec3 c)\n{\n    float mi = min(min(c.x, c.y), c.z);\n    float ma = max(max(c.x, c.y), c.z);\n    return (ma - mi)/(ma+ 1e-7);\n}\n#endif\n\n//Improved rgb lerp\nvec3 iLerp(in vec3 a, in vec3 b, in float x)\n{\n    //Interpolated base color (with singularity fix)\n    vec3 ic = mix(a, b, x) + vec3(1e-6,0.,0.);\n    //Saturation difference from ideal scenario\n    float sd = abs(getsat(ic) - mix(getsat(a), getsat(b), x));\n    //Displacement direction\n    vec3 dir = normalize(vec3(2.*ic.x - ic.y - ic.z, 2.*ic.y - ic.x - ic.z, 2.*ic.z - ic.y - ic.x));\n    //Simple Lighntess\n    float lgt = dot(vec3(1.0), ic);\n    //Extra scaling factor for the displacement\n    float ff = dot(dir, normalize(ic));\n    //Displace the color\n    ic += DSP_STR*dir*sd*ff*lgt;\n    return clamp(ic,0.,1.);\n}\n\nvec3 hsb2rgb(in vec3 hsb)\n{\n    vec3 rgb = clamp(abs(mod(hsb.x*6.0+vec3(0.0, 4.0, 2.0), 6.0)-3.0)-1.0, 0.0, 1.0);\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return hsb.z * mix(vec3(1.0), rgb, hsb.y);\n}\n\n\n//--------------------------------------GRADIENT-----------------------------------\n//--------------------------------color point array logic--------------------------\n//-------------------------------------by Krabcode---------------------------------\n\nstruct colorPoint\n{\n    float pos;\n    vec4 val;\n};\n\ncolorPoint emptyColorPoint()\n{\n    return colorPoint(1., vec4(1.,0.,0.,1.));\n}\n\nfloat map(float value, float start1, float stop1, float start2, float stop2)\n{\n    return start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1));\n}\n\nfloat norm(float value, float start, float stop)\n{\n    return map(value, start, stop, 0., 1.);\n}\n\nvec4 lerpByBlendType(vec4 colorA, vec4 colorB, float amt, int blendType)\n{\n    float mixedAlpha = mix(colorA.a, colorB.a, amt);\n    if(blendType == 0){ // normal lerp\n        return mix(colorA, colorB, amt);\n    }\n    if(blendType == 1){ // normal lerp with improved saturation preservation\n        return vec4(iLerp(colorA.rgb, colorB.rgb, amt), mixedAlpha);\n    }\n    if(blendType == 2){ // lerp between hues\n        return vec4(hsv2rgb(lerpHSV(rgb2hsv(colorA.rgb), rgb2hsv(colorB.rgb), smoothstep(0.0, 1.0, amt))), mixedAlpha);\n    }\n    return vec4(0,0,0,1);\n}\n\nint findClosestLeftNeighbourIndex(float pos, colorPoint[colorsPerGradient] gradient)\n{\n    for(int i = 0; i < 100; i++){\n        if(pos >= gradient[i].pos && pos <= gradient[i+1].pos){\n            return i;\n        }\n        if(i >= gradient.length()){\n            return 0;\n        }\n    }\n    return 0;\n}\n\nvec4 gradientColorAt(float normalizedPos, colorPoint[colorsPerGradient] gradient, int blendType)\n{\n    float pos = clamp(normalizedPos, 0., 1.);\n    int leftIndex = findClosestLeftNeighbourIndex(pos, gradient);\n    int rightIndex = leftIndex + 1;\n    colorPoint A = gradient[leftIndex];    \n    colorPoint B = gradient[rightIndex];\n    float normalizedPosBetweenNeighbours = norm(pos, A.pos, B.pos);\n    vec4 mixedColor = lerpByBlendType(A.val, B.val, normalizedPosBetweenNeighbours, blendType);\n    return mixedColor;\n}\n\n// hexToRgb from here: https://stackoverflow.com/questions/22895237/hexadecimal-to-rgb-values-in-webgl-shader\nvec3 hexToRgb(int color)\n{\n    float rValue = float(color / 256 / 256);\n    float gValue = float(color / 256 - int(rValue * 256.0));\n    float bValue = float(color - int(rValue * 256.0 * 256.0) - int(gValue * 256.0));\n    return vec3(rValue / 255.0, gValue / 255.0, bValue / 255.0);\n}\n\n/** example gradient\n\n\tcolorPoint[colorsPerGradient] gradient = colorPoint[](\n        colorPoint(0.,  vec4(hexToRgb(0x2a3d66), 1.)),\n        colorPoint(0.25,vec4(hexToRgb(0x5d54a4), 1.)),\n        colorPoint(0.5, vec4(hexToRgb(0x9d65c9), 1.)),\n        colorPoint(1.,vec4(hexToRgb(0xd789d7), 1.))\n    );\n\n*/","name":"Common","description":"","type":"common"}]}