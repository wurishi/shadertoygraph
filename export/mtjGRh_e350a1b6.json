{"ver":"0.1","info":{"id":"mtjGRh","date":"1672868220","viewed":55,"name":"Visualizing Complex Polynomials","username":"scottviteri","description":"Given a polynomial from complex numbers to complex numbers, plot the output in HSL color space.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["polynomials","complexnumbers"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159\n\nfloat plot(vec2 st, float pct) {\n  return smoothstep(pct-0.04, pct, st.y) -\n         smoothstep(pct, pct+0.04, st.y);\n}\n\nvec3 hsl_to_rgb(vec3 hsl) {\n  float h = hsl.x;\n  float s = hsl.y;\n  float l = hsl.z;\n  float c = (1.0-abs(2.0*l-1.0))*s;\n  h *= 6.0;\n  float x = c*(1.0-abs(mod(h,2.0)-1.0));\n  vec3 rgb = vec3(l-c/2.0);\n  if (0.0 <= h && h < 1.0) {\n    rgb.x += c;\n    rgb.y += x;\n  } else if(1.0 <= h && h < 2.0){\n    rgb.x += x;\n    rgb.y += c;\n  } else if(2.0 <= h && h < 3.0) {\n    rgb.y += c;\n    rgb.z += x;\n  } else if(3.0 <= h && h < 4.0) {\n    rgb.y += x;\n    rgb.z += c;\n  } else if(4.0 <= h && h < 5.0) {\n    rgb.z += c;\n    rgb.x += x;\n  } else if(5.0 <= h && h < 6.0) {\n    rgb.z += x;\n    rgb.x += c;\n  }\n  return rgb;\n}\n\nfloat max3(float x, float y, float z) {\n  return max(max(x,y),z);\n}\nfloat min3(float x, float y, float z) {\n  return min(min(x,y),z);\n}\n\nfloat helper_f(float n, vec3 hsl) {\n  float k = mod(n + hsl.x*12.0,12.0);\n  float a = hsl.y * min(hsl.z, 1.0-hsl.z);\n  return hsl.z - a*max(-1.0, min3(k-3.0, 9.0-k, 1.0));\n}\n\nvec3 hsl_to_rgb_2(vec3 hsl) {\n  float h = hsl.x;\n  float s = hsl.y;\n  float l = hsl.z;\n  float r = helper_f(0.0, hsl);\n  float g = helper_f(8.0, hsl);\n  float b = helper_f(4.0, hsl);\n  return vec3(r,g,b);\n}\n\nbool close(float x, float y) {\n  return abs(x - y) < 0.01;\n}\nvec3 rgb_to_hsl(vec3 rgb) {\n  float r = rgb.x;\n  float g = rgb.y;\n  float b = rgb.z;\n  float x_max = max3(r,g,b);\n  float v = x_max;\n  float x_min = min3(r,g,b);\n  float c = x_max - x_min;\n  float l = (x_max + x_min) / 2.0;\n  float h;\n  if (close(c,0.0)) {\n    h = 0.0;\n  }\n  if (close(v, r)) {\n    h = (1.0/6.0)*((g-b)/c);\n    h = ((g-b)/c);\n  }\n  if (close(v, g)) {\n    h = (1.0/6.0)*(2.0+(b-r)/c);\n  }\n  if (close(v, b)) {\n    h = (1.0/6.0)*(4.0+(r-g)/c);\n  }\n  float s;\n  if (close(c, 0.0)) {\n    s = 0.0;\n  } else {\n    s = c/(1.0-abs(2.0*l - 1.0));\n  }\n  return vec3(h,s,l);\n}\n\n// need hsl to rgb\n// generate hsl in the first place\n//  from complex number\nfloat quad(vec2 c){\n  return c.x*c.x + c.y*c.y;\n}\nfloat mag(vec2 c){\n  return pow(quad(c), 0.5);\n}\nfloat arg(vec2 c){\n  return atan(c.y,c.x);\n}\nfloat spread(vec2 c){\n  return (c.y*c.y)/quad(c);\n}\nfloat atan_01(vec2 c){\n  return mod(atan(c.y,c.x),2.0*PI)/(2.0*PI);\n}\nfloat atan_011(vec2 c){\n  float theta = atan(c.y,c.x);\n  if (theta < 0.0) {\n    theta += 2.0*PI;\n  }\n  return theta/(2.0*PI);\n}\n\nfloat l(float x) {\n  return pow(x,.5)/(pow(x,.5)+1.0);\n}\nvec3 c_to_hsl(vec2 c){\n  //return vec3(atan_01(c), 1.0, 0.5);\n  return vec3(spread(c)/2.0, 1.0, 0.5);\n}\n//now have complex num to hsl\n// so just need to add function\n\nvec2 cmul(vec2 c1, vec2 c2){\n  return vec2(c1.x*c2.x-c1.y*c2.y,\n              c1.x*c2.y+c1.y*c2.x);\n}\n\nvec2 pure(float x){\n  return vec2(x,0.0);\n}\n// I think the color is currently in the wrong direction\n// check out the hsl wiki\nvec2 f(vec2 c) {\n  return cmul(c,c)+pure(1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float screen_radius = 3.14;\n    vec2 c_uv = (2.0*uv-1.0)*screen_radius;\n    float y = max3(1.0,c_uv.x,0.1);\n    float pct1 = plot(c_uv, y);\n    float pct2 = plot(c_uv, 0.0);\n    vec3 black = vec3(0.0,0.0,0.0);\n    vec3 green = vec3(0.0,1.0,0.0);\n    vec3 blue = vec3(0.0,0.0,1.0);\n    //vec3 color = (1.0-pct1)*black + pct1*green + pct2*blue;\n    vec3 hsl = c_to_hsl(f(c_uv));\n    //vec3 hsl = vec3(0.33,1.0,0.293);\n    //vec3 target = vec3(1.0, 100.0/255.0, 140.0/255.0);\n    //vec3 hsl = rgb_to_hsl(target);\n    vec3 color = hsl_to_rgb(hsl);\n    //vec3 color = hsl_to_rgb(vec3(345.0/360.0,1.0,0.696));\n    // try to show cie color space\n    fragColor = vec4(color.x, color.y, color.z, 1.0); //vec4(uv.x,0.0,uv.y,1.0);\n}\n","name":"Image","description":"","type":"image"}]}