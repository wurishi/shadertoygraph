{"ver":"0.1","info":{"id":"mtX3R4","date":"1671368670","viewed":159,"name":"Basic : Poisson Image Editing","username":"Gijs","description":"A quick and dirty implementation of the seamless cloning method described in https://www.cs.jhu.edu/~misha/Fall07/Papers/Perez03.pdf .\nYou might have to reset the shader to see the effect properly (the images might take a while to load?).","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["poisson","image","seamless","inpainting","editing","cloning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nA quick and dirty implementation of the seamless cloning method described in\nhttps://www.cs.jhu.edu/~misha/Fall07/Papers/Perez03.pdf\nMy solution method to the Poisson problem is the dumbest and easiest possible: just run the heat equation.\nThe use of this method is to seamlessly inpaint the texture of one image into another.\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// This buffer stores the x component of the vector field\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec4 dx_0 = derivative_x(iChannel0, fragCoord, iResolution.xy);\n    vec4 dy_0 = derivative_y(iChannel0, fragCoord, iResolution.xy);\n    vec4 dx_1 = derivative_x(iChannel1, fragCoord, iResolution.xy);\n    vec4 dy_1 = derivative_y(iChannel1, fragCoord, iResolution.xy);\n\n    vec4 norm_grad_0 = sqrt(dx_0 * dx_0 + dy_0 * dy_0);\n    vec4 norm_grad_1 = sqrt(dx_1 * dx_1 + dy_1 * dy_1);\n    \n    float bigger_one = float(greaterThan(norm_grad_0 * weight, norm_grad_1));\n\n    fragColor = dx_0 * bigger_one + dx_1 * (1.0 - bigger_one);\n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// This buffer stores the y component of the vector field\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec4 dx_0 = derivative_x(iChannel0, fragCoord, iResolution.xy);\n    vec4 dy_0 = derivative_y(iChannel0, fragCoord, iResolution.xy);\n    vec4 dx_1 = derivative_x(iChannel1, fragCoord, iResolution.xy);\n    vec4 dy_1 = derivative_y(iChannel1, fragCoord, iResolution.xy);\n\n    vec4 norm_grad_0 = sqrt(dx_0 * dx_0 + dy_0 * dy_0);\n    vec4 norm_grad_1 = sqrt(dx_1 * dx_1 + dy_1 * dy_1);\n    \n    float bigger_one = float(greaterThan(norm_grad_0 * weight, norm_grad_1));\n\n    fragColor = dy_0 * bigger_one + dy_1 * (1.0 - bigger_one);\n    \n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"\n// Gets the divergence of the vector field stored in Buffer A and Buffer B\nvec4 getDivergence(vec2 p)\n{\n    vec4 left  = texture(iChannel1,(p+vec2(-1, 0))/iResolution.xy);\n    vec4 right = texture(iChannel1,(p+vec2( 1, 0))/iResolution.xy);\n    vec4 down  = texture(iChannel2,(p+vec2( 0,-1))/iResolution.xy);\n    vec4 up    = texture(iChannel2,(p+vec2( 0, 1))/iResolution.xy);\n    \n    vec4 dx = (right - left) * 0.5;\n    vec4 dy = (up - down) * 0.5;\n    \n    return dx + dy;\n}\n\nvec4 getLaplacian(sampler2D g, vec2 p){\n    vec4 middle    = texture(g,(p+vec2( 0, 0))/iResolution.xy);   \t\n    vec4 up        = texture(g,(p+vec2( 0, 1))/iResolution.xy);\n    vec4 down      = texture(g,(p+vec2( 0,-1))/iResolution.xy);\n    vec4 right     = texture(g,(p+vec2( 1, 0))/iResolution.xy);\n    vec4 left      = texture(g,(p+vec2(-1, 0))/iResolution.xy);\n    vec4 upright   = texture(g,(p+vec2( 1, 1))/iResolution.xy);\t\n    vec4 upleft    = texture(g,(p+vec2(-1, 1))/iResolution.xy);\n    vec4 downright = texture(g,(p+vec2( 1,-1))/iResolution.xy);\n    vec4 downleft  = texture(g,(p+vec2(-1,-1))/iResolution.xy);\n        \n   \treturn (-8.*middle + up + left + right + down + upright + upleft + downright + downleft);  \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 col = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    \n    vec2 p = 2.0 * fragCoord - iResolution.xy;\n    \n    if(iFrame < 30)\n    {\n        col = texture(iChannel3, fragCoord/iResolution.xy);\n    }\n    else\n    {\n        if( length(p) < 400.0 )\n        {\n\n            vec4 target1 = getDivergence(fragCoord);\n            vec4 target2 = getLaplacian(iChannel3, fragCoord);\n\n            float strength = smoothstep( min(length(p),400.0), 400.0, 380.0 );\n\n            vec4 target = mix(target2, target1, strength);\n\n            vec4 currentLaplacian = getLaplacian(iChannel0, fragCoord);\n\n            col += (currentLaplacian - target) * 0.1;\n        }\n    }\n   \n    fragColor = col;\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"float weight = 2.0;\n\nvec4 derivative_x(sampler2D g, vec2 p, vec2 res)\n{\n    vec4 right = texture(g,(p+vec2( 1, 0))/res.xy);\n    vec4 left  = texture(g,(p+vec2(-1, 0))/res.xy);\n    \n    vec4 dx = (right - left) * 0.5;\n    \n    return dx;\n}\n\nvec4 derivative_y(sampler2D g, vec2 p, vec2 res)\n{\n    vec4 up    = texture(g,(p+vec2( 0, 1))/res.xy);\n    vec4 down  = texture(g,(p+vec2( 0,-1))/res.xy);\n    \n    vec4 dy = (up - down) * 0.5;\n    \n    return dy;\n}\n\nvec4 normGradient(sampler2D g, vec2 p, vec2 res)\n{\n    vec4 dx = derivative_x(g, p, res);\n    vec4 dy = derivative_y(g, p, res);\n    \n    return sqrt(dx * dx + dy * dy);\n}","name":"Common","description":"","type":"common"}]}