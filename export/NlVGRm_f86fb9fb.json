{"ver":"0.1","info":{"id":"NlVGRm","date":"1638235588","viewed":111,"name":"getting closer","username":"HaleyHalcyon","description":"they look like they're getting closer but they aren't. dizzying","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["a"],"hasliked":0,"parentid":"fttGRs","parentname":"hexagon triangle tunnel"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU (6.283185307)\n// i want to use hex codes like in image editing programs,\n// so here's an improved macro by FabriceNeyret2\n#define HEX(x) vec3( ( ivec3(x) >> ivec3(16,8,0) ) & 255 ) / 255.\n\nvec3 color(float x){\n    const int colorCount = 8;\n    vec3[] c = vec3[](\n        HEX(0xb810b0),\n        HEX(0xe020c0),\n        HEX(0xf0e040),\n        HEX(0xc0ff80),\n        vec3(1),\n        HEX(0xa0ffe0),\n        HEX(0x7080F0),\n        HEX(0x8000a0)\n    );\n    x *= float(colorCount);\n    int lo = 1048576 + int(floor(x));\n    \n    return mix(\n        c[lo % colorCount],\n        c[(lo + 1) % colorCount],\n        fract(x)\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  float time = fract(iTime / 4.0);\n  // make the center of the canvas (0.0, 0.0) and\n  // make the long edge of the canvas range from -1.0 to +1.0\n  float scale = max(iResolution.x, iResolution.y);\n  vec2 uv = (gl_FragCoord.xy - 0.50 * iResolution.xy) / scale;\n\n  vec2 sep = vec2(sin(time * TAU * 0.5), cos(time * TAU * 0.5)) * 0.1;\n  \n  const float zoomSpeed = 9.;\n  const float ringSpacing = 0.8;\n\n  float dist = log(length(uv));\n  float distA = log(length(uv - sep) * ringSpacing) - zoomSpeed * time;\n  float distB = log(length(uv + sep) * ringSpacing) - zoomSpeed * time;\n  \n  float alphaA = step(0.8, fract(distA));\n  float alphaB = step(0.8, fract(distB));\n\n  vec3 colA = alphaA * color(time * 0.5);\n  vec3 colB = alphaB * color(time * 0.5 + 0.5);\n  \n  vec3 col = mix(\n  colA + colB,\n  vec3(1.),\n  clamp(alphaA + alphaB - 1.,\n   0., 1.));\n   \n  float swirl = step(\n    0.7,\n    fract(\n      dist * 4.\n    + atan(uv.y, uv.x) * 8. / TAU\n    + time * 8.\n    )\n  );\n  col += smoothstep(-1.0, -0.6, dist) * swirl;\n  \n  // Output to screen\n  fragColor = vec4(\n    col, 1.0\n  );\n}","name":"Image","description":"","type":"image"}]}