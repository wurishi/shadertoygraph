{"ver":"0.1","info":{"id":"3tyczt","date":"1611520269","viewed":173,"name":"First Volumetric Raymarcher","username":"oneshade","description":"My first volumetric raymarcher! Based on treize's \"[url=https://www.shadertoy.com/view/3lBfWR]Simple Volume[/url]\" shader.","likes":9,"published":3,"flags":0,"usePreview":0,"tags":["clouds","volumetric","first","smoothnoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float noise(in vec3 p) {\n\tp = fract(p * 0.1031);\n    p += dot(p, p.yzx + 33.33);\n    return fract((p.x + p.y) * p.z);\n}\n\nfloat snoise(in vec3 p) {\n    vec3 cell = floor(p);\n    vec3 local = fract(p);\n    local *= local * (3.0 - 2.0 * local);\n\n    float ldb = noise(cell);\n    float rdb = noise(cell + vec3(1.0, 0.0, 0.0));\n    float ldf = noise(cell + vec3(0.0, 0.0, 1.0));\n    float rdf = noise(cell + vec3(1.0, 0.0, 1.0));\n    float lub = noise(cell + vec3(0.0, 1.0, 0.0));\n    float rub = noise(cell + vec3(1.0, 1.0, 0.0));\n    float luf = noise(cell + vec3(0.0, 1.0, 1.0));\n    float ruf = noise(cell + 1.0);\n\n    return mix(mix(mix(ldb, rdb, local.x),\n                   mix(lub, rub, local.x),\n                   local.y),\n\n               mix(mix(ldf, rdf, local.x),\n                   mix(luf, ruf, local.x),\n                   local.y),\n\n               local.z);\n}\n\nfloat mapVolume(in vec3 p) {\n    float fbm = snoise(p);\n    fbm += snoise(p * 2.0) * 0.5;\n    fbm += snoise(p * 4.0) * 0.25;\n    return fbm / 1.75 - 0.5;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 screenCenter = 0.5 * iResolution.xy;\n\n    vec2 mouse = vec2(0.0, 0.0);\n    if (iMouse.z > 0.0) {\n        mouse = (iMouse.xy - screenCenter) / iResolution.y * 3.14;\n    }\n\n    vec2 uv = (fragCoord - screenCenter) / iResolution.y;\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n    vec3 ro = vec3(0.0, 0.0, iTime);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    float iters = 50.0;\n    float stepSize = 0.1 / rd.z;\n    float absorption = 40.0;\n    vec3 volColor = vec3(1.0, 0.7, 0.4);\n\n    float t = 0.0;\n    float v = 1.0;\n    for (float i=0.0; i < iters; i++) {\n        vec3 p = ro + rd * t;\n        float density = mapVolume(p);\n        if (density > 0.0) {\n            float d = density / iters;\n            v *= 1.0 - d * absorption;\n            if (v < 0.01) {\n                break;\n            }\n\n            fragColor.rgb += (d * v + volColor * d * v) * 20.0;\n        }\n\n        t += stepSize;\n    }\n}","name":"Image","description":"","type":"image"}]}