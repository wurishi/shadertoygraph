{"ver":"0.1","info":{"id":"7t2SRD","date":"1627384926","viewed":104,"name":"chaos balls","username":"ejosiah","description":"chaos balls","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["balls"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = (2.0 * fragCoord - iResolution.xy)/iResolution.y;\n        \n    \n    float r = 1.0;\n    float d = length(p) - r;\n    float w = fwidth(p.x);\n    float t = step(w, abs(d));\n    \n    vec2 ball0 = texture(iChannel0, uv).xy;\n    vec2 ball1 = texture(iChannel1, uv).xy;\n            \n   float d0 = length(p - ball0) - 0.025;\n   float d1 = length(p - ball1) - 0.025;\n    float dd = min(d0, d1);\n    vec3 col = mix(vec3(0), vec3(1), t);\n    col *= step(0., dd); \n    \n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec2 g = vec2(0, -9.8);    // gravity\nfloat t = 0.01666666666;  // period\nfloat Rc = 1.0;    // restitiution cooefficent\nfloat Fc = 1.0;     // frictional cooefficent\nfloat drag = 0.;\n\nvoid resolveCollision(inout vec2 p, inout vec2 v, vec2 v1, vec2 n, float r){\n    v -= v1;\n     p += r * n;\n     vec2 vn = n * dot(n, v);\n     vec2 vt = v - vn;\n     v = -Rc * vn;\n\n     vec2 dvn = (-Rc - 1.) * vn;\n     vt = max(1. - Fc * length(dvn)/length(vt), 0.) * vt; \n     v += vt;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = ( 2. * fragCoord - iResolution.xy)/iResolution.y;\n    int id = int(fragCoord.y * iResolution.x + fragCoord.x);\n    \n    vec2 p;\n    vec2 u;\n    if(iFrame == 0){\n      p = vec2(0.001, 0.5);\n      u = vec2(0);\n      fragColor = vec4(p, u);\n      return;\n    }\n    \n    \n    vec4 fIn = texture(iChannel0, uv);\n    p = fIn.xy;\n    u = fIn.zw;\n    vec2 v = u + g * t;\n    v -= drag;\n    p = p + v * t;\n    \n    vec4 fin1 = texture(iChannel1, uv);\n    vec2 p1 = fin1.xy;\n    vec2 u1 = fin1.zw;\n    vec2 delta = p - p1;\n    if(dot(delta, delta) < 0.000625){\n        vec2 n = normalize(delta);\n        resolveCollision(p, v, u1, n, 0.025);  \n    }\n    \n    \n    float r = length(p);\n    if(r > 1.){\n         vec2 n = -p/r;\n         resolveCollision(p, v, vec2(0), n, 0.025);\n    }\n    \n    fragColor = vec4(p,v);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec2 g = vec2(0, -9.8);    // gravity\nfloat t = 0.01666666666;  // period\nfloat Rc = 1.0;    // restitiution cooefficent\nfloat Fc = 1.0;     // frictional cooefficent\nfloat drag = 0.;\n\nvoid resolveCollision(inout vec2 p, inout vec2 v, vec2 v1, vec2 n, float r){\n    v -= v1;\n     p += r * n;\n     vec2 vn = n * dot(n, v);\n     vec2 vt = v - vn;\n     v = -Rc * vn;\n\n     vec2 dvn = (-Rc - 1.) * vn;\n     vt = max(1. - Fc * length(dvn)/length(vt), 0.) * vt; \n     v += vt;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = ( 2. * fragCoord - iResolution.xy)/iResolution.y;\n    \n    vec2 p;\n    vec2 u;\n    if(iFrame == 0){\n      p = vec2(0.0012, 0.5);\n      u = vec2(0);\n      fragColor = vec4(p, u);\n      return;\n    }\n    \n    \n    vec4 fIn = texture(iChannel0, uv);\n    p = fIn.xy;\n    u = fIn.zw;\n    vec2 v = u + g * t;\n    v -= drag;\n    p = p + v * t;\n    \n    vec4 fin1 = texture(iChannel1, uv);\n    vec2 p1 = fin1.xy;\n    vec2 u1 = fin1.zw;\n    vec2 delta = p - p1;\n    \n    if(dot(delta, delta) < 0.000625){\n        vec2 n = normalize(delta);\n        resolveCollision(p, v, u1, n, 0.025);  \n    }\n    \n    \n    float r = length(p);\n    if(r > 1.){\n         vec2 n = -p/r;\n         resolveCollision(p, v, vec2(0), n, 0.025);\n    }\n    \n    fragColor = vec4(p,v);\n}","name":"Buffer B","description":"","type":"buffer"}]}