{"ver":"0.1","info":{"id":"Xt2SWw","date":"1444219523","viewed":208,"name":"A clockwork orange","username":"jameswilddev","description":"What a hack","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","distancefield"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"vec2 sampleLocation;\n\nfloat add(float shape) {\n    return shape;\n}\n\nfloat add(float shape, float scene) {\n    return min(shape, scene);\n}\n\nfloat subtract(float shape) {\n    return -shape;\n}\n\nfloat subtract(float shape, float scene) {\n    return max(-shape, scene);\n}\n\nfloat circle(vec2 origin, float radius) {\n    return distance(sampleLocation, origin) - radius;\n}\n\nfloat box(vec2 n, vec2 p) {\n    return max(sampleLocation.x - p.x, max(sampleLocation.y - p.y, max(n.x - sampleLocation.x, n.y - sampleLocation.y))); \n}\n\nfloat scene() {\n    return add(circle(vec2(0.6, 0.4) + vec2(sin(iTime), cos(iTime)) * 0.1, 0.07), subtract(circle(vec2(0.6, 0.4), 0.2), add(box(vec2(0.0, 0.0), vec2(1.0, 0.3)), subtract(circle(vec2(0.4, 0.5), 0.1), add(box(vec2(0.1, 0.2), vec2(0.6, 0.7)))))));\n}\n\n#define SKY_SHADED_COLOR vec3(0.4, 0.6, 1.0)\n#define SKY_LIT_COLOR vec3(0.2, 0.5, 0.7)\n#define SKY_SHADING_RADIUS 0.3\n#define SURFACE_LIT_COLOR vec3(1.0, 0.8, 0.5)\n#define SURFACE_SHADED_COLOR vec3(0.25, 0.2, 0.1)\n#define SURFACE_THICKNESS 0.02\n#define WALL_SHADED_COLOR vec3(0.025, 0.05, 0.5)\n#define WALL_LIT_COLOR vec3(0.15, 0.25, 1.0)\n#define WALL_SHADOW_RADIUS 0.15\n#define SURFACE_SHADOW_HARDNESS 2.0\n\n\nvec3 color() {\n    float dist = scene();\n    sampleLocation.x -= 0.02;\n    sampleLocation.y += 0.05;\n    float dist2 = scene();\n    float surfaceDepth = dist / -SURFACE_THICKNESS;\n    float wallDepth = (dist2 - SURFACE_THICKNESS) / -WALL_SHADOW_RADIUS;\n    float wallLit = min(1.0, max(0.0, wallDepth));\n    float surfaceLit = mix(1.0, min(1.0, max(0.0, SURFACE_SHADOW_HARDNESS - (((dist - dist2) * 0.5 * SURFACE_SHADOW_HARDNESS) / (-SURFACE_THICKNESS)))), 1.0 - surfaceDepth);\n    vec3 surfaceColor = mix(SURFACE_LIT_COLOR, SURFACE_SHADED_COLOR, surfaceLit);\n    vec3 wallColor = mix(WALL_SHADED_COLOR, WALL_LIT_COLOR, wallLit);\n    float skyDepth = min(1.0, dist / SKY_SHADING_RADIUS);\n    vec3 skyColor = mix(SKY_SHADED_COLOR, SKY_LIT_COLOR, skyDepth);\n    vec3 foregroundColor = surfaceDepth > 1.0 ? wallColor : surfaceColor;\n    return dist > 0.0 ? skyColor : foregroundColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / min(iResolution.x, iResolution.y);\n    sampleLocation = uv;\n\tfragColor = vec4(pow(color(), vec3(1.0 / 2.2)),1.0);\n}","name":"","description":"","type":"image"}]}