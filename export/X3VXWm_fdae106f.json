{"ver":"0.1","info":{"id":"X3VXWm","date":"1720040044","viewed":46,"name":"Wavy lines gradient","username":"L1x3N","description":"Inspired by this Earthbound effect : https://www.youtube.com/watch?v=mTDrB32ZCXM\nTry setting NO_BACKGROUND_VERSION to false ! (Or also the other consts)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["lines","colorful","gradient","wavy","endless"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3[] COLORS_VALUES = vec3[](vec3(0.), vec3(0.725, 0.242, 0.342), vec3(0.725, 0., 0.12), vec3(0.62, 0.3, 0.72), vec3(0.));\nconst float[] COLORS_POS = float[](0., 30. / 100., 50. / 100., 70. / 100., 1.);\n\nconst bool GRADIENT_BLEND_MODE = true;\nconst bool ASPECT_RATIO = true;\n\nconst float OSC_SPEED = 2.25;\nconst float OSC_AMP = 8.;\nconst float OSC_DELAY = 12.5;\nconst float PIXEL_COUNT = 256.;\n\nconst float SCROLL_SPEED_X = 0.4;\nconst float SCROLL_SPEED_Y = - 0.55;\nconst float FADE_SPEED = 0.55;\nconst float NB_LINES = 4.; // Number if ASPECT_RATIO to false, will be higher if ASPECT_RATIO is true\nconst bool NO_BACKGROUND_VERSION = true;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord / iResolution.xy;\n\tuv = vec2(uv.x + iTime / 4. * SCROLL_SPEED_X, uv.y + iTime / 4. * SCROLL_SPEED_Y);\n\tif(ASPECT_RATIO)\n\t\tuv.x *= iResolution.x / iResolution.y;\n\n\tvec2 newUVs = vec2(uv.x + sin( /* uv.x / 3.5 * */ /* uv.x * 5.5 + */ (uv.y * PIXEL_COUNT) * (OSC_DELAY / PIXEL_COUNT)) * (OSC_AMP / PIXEL_COUNT) * OSC_SPEED, uv.y);\n\tfloat uvPos = fract(newUVs.x * (NB_LINES));\n\n\tfloat smoothUvPos = fract(smoothstep(0.5, 1.75, uvPos) + fract(iTime / 2. * FADE_SPEED));\n\tif(NO_BACKGROUND_VERSION)\n\t\tsmoothUvPos *= fract(smoothstep(0.5, 1.1, uvPos));\n\n\tvec3 myColor;\n\n\tint colorPosIndex;\n\tfor(colorPosIndex = 0; colorPosIndex < (COLORS_POS.length()); colorPosIndex ++) {\n\t\tif(fract(smoothUvPos) < COLORS_POS[colorPosIndex])\n\t\t\tbreak;\n\t}\n\n\tif(GRADIENT_BLEND_MODE) {\n\t\tfloat colorUv = (fract(smoothUvPos) - COLORS_POS[colorPosIndex - 1]) / (COLORS_POS[colorPosIndex] - COLORS_POS[colorPosIndex - 1]);\n\t\tmyColor = mix(COLORS_VALUES[colorPosIndex - 1], COLORS_VALUES[colorPosIndex], colorUv);\n\t} else {\n\t\tmyColor = COLORS_VALUES[colorPosIndex];\n\t}\n\n\t// myColor = vec3(round(smoothUvPos));\n\n\tfragColor = vec4(myColor, 1.0f);\n}","name":"Image","description":"","type":"image"}]}