{"ver":"0.1","info":{"id":"NdfBWS","date":"1645266886","viewed":108,"name":"Julia set simulation","username":"LukeFX","description":"My own implementation of Julia set with a mix of different powers, change lines 25-30 for interesting effects","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot","juliaset","fractals"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Copyright Luka Gorgadze, 2022 - https://lukegorgadze.github.io/CV/\n// I am the sole copyright owner of this Work.\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material.\nconst float Max_Iter=500.;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n     vec2 uv= fragCoord/iResolution.xy;\n    uv-=.5;\n    uv.x*=iResolution.x/iResolution.y;\n    uv*=2.8;\n    vec3 col=vec3(0.,0.,0.);\n    \n    //JULIA GOES BRR\n    vec2 c=vec2(cos(iTime*1.),sin(iTime*1.));\n    vec2 z=uv;\n    float smoothcolor=0.;\n    for(float i=0.;i<Max_Iter;i++)\n    {\n        //z=vec2(z.x*z.x-z.y*z.y,2.*z.x*z.y)+c/1.2;\n        z=vec2(pow(z.x,3.)-3.*z.x*pow(z.y,2.),3.*pow(z.x,2.)*z.y-pow(z.y,3.))+c/1.2;// cube\n        z=vec2(pow(z.x,4.)-6.*pow(z.x,2.)*pow(z.y,2.)+pow(z.y,4.),4.*pow(z.x,3.)*z.y-4.*z.x*pow(z.y,3.))+c;\n        z=vec2(pow(z.x,5.)-10.*pow(z.x,3.)*pow(z.y,2.)+5.*z.x*pow(z.y,4.),5.*pow(z.x,4.)*z.y-10.*pow(z.x,2.)*pow(z.y,3.)+pow(z.y,5.))+c/.99;\n        smoothcolor+= fract(exp(-length(z) * 1.5)) * 0.15;\n        //smoothcolor+=exp(-length(z)*1.5)*.12;\n        if(dot(z,z)>20.)\n        break;\n    }\n    \n    //END OF JULIA\n    \n    col = vec3(0.3804, 0.0353, 0.0353) + smoothcolor*vec3(.9 * clamp(cos(5.+iTime * 1.),-1.,-0.8) ,.3 * clamp(cos(.1+ iTime * 5.),-1.,-0.2),.9922 * clamp(sin(.2+ iTime * 4.),-1.,0.5))*15.;\n    float r=.4+.4*(sin(smoothcolor*.1+iTime*.63));\n    float g=r*r*.7;\n    float b=r*g*10.;\n    \n    fragColor=vec4(1.-(col+vec3(1.0, 1.0, 1.0)),1.);\n    \n}","name":"Image","description":"","type":"image"}]}