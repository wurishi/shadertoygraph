{"ver":"0.1","info":{"id":"fdj3Wz","date":"1617279044","viewed":124,"name":"bouncy vibrating shiny blobs","username":"Rloret","description":"Just some random weird repeat pattern with a badly sampled cubemap and some badly extracted normals :D","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["blob","bouncy"],"hasliked":0,"parentid":"7dXGW2","parentname":"bouncy dots"},"renderpass":[{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define CELLS 13.\n#define pi acos(-1.)\nmat2 rot2D(float a) {return mat2(cos(a),sin(a),-sin(a),cos(a));}\nfloat rand(float co) { return fract(sin(co*(91.3458)) * 47453.5453); }\nfloat s(float x){\n    return round(sin(x* pi/2.)*0.5 +0.5);\n}\nfloat stairCase(float t){\n   return s(t)*(t-floor(t/2.))+ (1.-s(t))*ceil(t/2.);\n}\n\nfloat paramStairCase(float t, float w, float h){\n    return stairCase(2.*t/w) *h/2.;\n}\nfloat smoothStairCase(float t){\n    return t-sin(t);\n}\n//https://iquilezles.org/articles/distfunctions\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\nfloat CircleSDF(vec2 p,vec2 c,float r){\n\n    return length(p-c) -r;\n}\n\nvec2 Reflect(vec2 val, vec2 min, vec2 max)\n{\n    vec2 R = (min + mod((val - min), max - min));\n    vec2 t = mod(ceil((val - min) / (max - min)), 2.0);\n    return R * (2.0 * t - 1.0) + (max + min) * (1. - t);\n}\nfloat Reflect(float val){\n    return mod(val*(round(mod(val/2.,1.))*2.-1.),1.);\n}\nfloat colorDots(float d,float r)\n{\n    float c = float(d);\n    float p = floor(mod(iTime,1.)*2.)*0.2;\n    c = 1.-step(r*(1.+p),c);\n    return c;\n}\nfloat dots(vec2 uv,float delay,inout float r){\n    float ar= iResolution.y/iResolution.x; \n    vec2 st = uv;\n    uv.y *= ar;\n    st.y *= ar;\n\n    vec2 cells = floor(st*CELLS);\n    cells.x/=CELLS;\n    cells.y/=CELLS *ar;\n    cells= cells*2.-1.;\n    float screenCells = CELLS *cells.x+cells.y;\n    float t = (-iTime - delay)*.3;\n  \n    float d = length(cells)*.2;\n    float delayedTime = paramStairCase(t + d,0.5,10.);\n     delayedTime +=rand(delayedTime)/4.5;\n\tuv = mod( uv,1./CELLS )*vec2(CELLS);\n    r = 0.05 ;\n    vec2 D= normalize(vec2(1,0)*rot2D(ceil(t + d)));\n    vec2 ce = Reflect(D*delayedTime,vec2(r*3.8),vec2(1.-r*3.8));\n    \n    return CircleSDF(uv,ce,r);\n}\nfloat Blob(vec2 uv){\n    float d=1.;\n    float dt=0.09;\n    float r;\n     return  opSmoothUnion(\n              opSmoothUnion(\n                    opSmoothUnion(dots(uv,d, r), dots(uv,d+=dt, r),  0.3),\n                    opSmoothUnion(dots(uv,d, r), dots(uv,d+=dt, r),  0.3),\n                                                                     0.2),\n              opSmoothUnion(\n                    opSmoothUnion(dots(uv,d, r), dots(uv,d+=dt, r),  0.2),\n                    opSmoothUnion(dots(uv,d, r), dots(uv,d+=dt, r),  0.3),\n                                                                     0.3)\n                                                                    ,0.5);\n}\nvec3 calcNormal( in vec2 p ) // for function f(p)\n{\n    const float eps = 0.0004; // or some other value\n    const vec2 h = vec2(eps,0);\n    return normalize( vec3(Blob(p+h.xy) - Blob(p-h.xy),\n                           Blob(p+h.yx) - Blob(p-h.yx),\n                           Blob(p)/20. ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord.xy/iResolution.xy;\n  \n  float ar= iResolution.y/iResolution.x; \n  float r =1.;\n\n  vec3 N = calcNormal(uv);\n  float c =(colorDots(Blob(uv)+0.19 ,0.1));\n\n  uv= uv*2.-1.;\n  uv*=ar*2.;\n\n  uv = 1.-abs(uv);\n  uv = min(vec2(1),uv+0.99);\n  uv = floor(uv);\n  vec3 col = texture( iChannel0, N ).xyz;\n  fragColor =vec4( col*c*uv.x*uv.y,0);\n\n}","name":"Image","description":"","type":"image"}]}