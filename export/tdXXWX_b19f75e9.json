{"ver":"0.1","info":{"id":"tdXXWX","date":"1552330420","viewed":1041,"name":"Infinite Spheres Ray Marching","username":"Wheyerstrass","description":"Infinite Spheres Ray Marching Test","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","spheres"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAXSTEPS 100\n#define MINDIST .01\n\nfloat DistanceEstimator(vec3 pos) {\n    \n    // translate\n    pos = pos + 1. * vec3(0,-0.5*iTime,iTime);\n\n    float d1 = distance(mod(pos, 2.), vec3(1,1,1))-.54321;\n    \n    return d1;\n}\n\nfloat trace(vec3 from, vec3 direction) {\n\tfloat totalDistance = 0.0;\n\tint steps;\n\tfor (steps=0; steps < MAXSTEPS; steps++) {\n\t\tvec3 p = from + totalDistance * direction;\n\t\tfloat dist = DistanceEstimator(p);\n\t\ttotalDistance += dist;\n\t\tif (dist < MINDIST) break;\n\t}\n\treturn 1.0-float(steps)/float(MAXSTEPS);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    vec2 uv = (fragCoord - 0.5*iResolution.xy) / iResolution.y;\n    \n    vec3 camPos = vec3(0, 2, 0);\n\tvec3 camViewDir = normalize(vec3(uv.xy, 1));\n    \n\tfloat dist = trace(camPos, camViewDir);\n    \n    fragColor = vec4(dist, dist, dist, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}