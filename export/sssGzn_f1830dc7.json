{"ver":"0.1","info":{"id":"sssGzn","date":"1615415738","viewed":243,"name":"Stateful","username":"oneshade","description":"An interesting music driven idea. Music reference taken from this shader: [url=https://www.shadertoy.com/view/tdsXDX]https://www.shadertoy.com/view/tdsXDX[/url]","likes":7,"published":3,"flags":96,"usePreview":0,"tags":["2d","fft","reactive","audio","particles","buffers","stateful"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"llsSD8","filepath":"https://soundcloud.com/plaid/tether-wyg-e-remix","previewfilepath":"https://soundcloud.com/plaid/tether-wyg-e-remix","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec2 wrap(in vec2 p, in vec2 rmin, in vec2 rmax) {\n   return rmin + mod(p - rmin, rmax - rmin);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 corner = vec2(iResolution.x / iResolution.y * 0.5, 0.5);\n    ivec2 iFragCoord = ivec2(fragCoord);\n    fragColor = vec4(0.0);\n    if (iFrame > 0 && iFragCoord.x < FFT_PARTICLES && iFragCoord.y == 0) {\n        fragColor = texelFetch(iChannel0, iFragCoord, 0);\n        float freq = fragCoord.x / float(FFT_PARTICLES);\n\n        if (iFrame > 1) fragColor.xy = fragColor.zw;\n\n        float fft = texture(iChannel1, vec2(freq, 0.0)).x;\n        fragColor.zw += sin(fft * 6.28 - 3.14 + vec2(1.57, 0.0)) * iTimeDelta;\n\n        bool outOfBounds = any(greaterThan(abs(fragColor.zw), corner));\n        fragColor.zw = wrap(fragColor.zw, -corner, corner);\n        if (outOfBounds) fragColor.xy = fragColor.zw;\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define rgb(r, g, b) vec3(r, g, b) / 255.0\n\n// Palette from https://www.color-hex.com/color-palette/26292\n// Perhaps there is a better one?\n// Added first color at end for a wraparound\nvec3[] palette = vec3[](rgb(  0, 137, 123),\n                        rgb(  0,  86,  77),\n                        rgb( 40,  40,  40),\n                        rgb( 54,  54,  54),\n                        rgb(150, 150, 150),\n                        rgb(  0, 137, 123));\n\nvec3 getColor(in float t) {\n    t = fract(t) * float(palette.length() - 1);\n    return mix(palette[int(t)], palette[int(t) + 1], smoothstep(0.0, 1.0, fract(t)));\n}\n\nvec2 sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    float d = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return vec2(length(pa - ba * d), d);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = texture(iChannel1, fragCoord / iResolution.xy);\n\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    float unit = 2.0 / iResolution.y;\n\n    for (int i=0; i < FFT_PARTICLES; i++) {\n        vec4 pos = texelFetch(iChannel0, ivec2(i, 0), 0);\n        vec2 line = sdLine(uv, pos.xy, pos.zw);\n        vec3 color = mix(getColor(iTime - iTimeDelta), getColor(iTime), smoothstep(0.0, 1.0, line.y));\n        fragColor = mix(fragColor, vec4(color, 1.0), exp(-50.0 * line.x));\n    }\n\n    fragColor *= 0.9;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define FFT_PARTICLES 50","name":"Common","description":"","type":"common"}]}