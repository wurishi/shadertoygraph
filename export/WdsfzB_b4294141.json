{"ver":"0.1","info":{"id":"WdsfzB","date":"1588539096","viewed":102,"name":"Noise Wash","username":"lowww","description":"This is a simple shader I've created for my portfolio (andrevenancio.com)\nKind of looks better there than on shadertoy I think its due to the quality of the textures... but sharing it regardless","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["noise","bw"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// simplex noise\nvec3 mod289(vec3 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n    return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n    return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v) {\n    const vec2 C = vec2(1.0 / 6.0, 1.0 / 3.0);\n    const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);\n\n    vec3 i = floor(v + dot(v, C.yyy));\n    vec3 x0 = v - i + dot(i, C.xxx);\n    vec3 g = step(x0.yzx, x0.xyz);\n    vec3 l = 1.0 - g;\n    vec3 i1 = min(g.xyz, l.zxy);\n    vec3 i2 = max(g.xyz, l.zxy);\n\n    vec3 x1 = x0 - i1 + C.xxx;\n    vec3 x2 = x0 - i2 + C.yyy;\n    vec3 x3 = x0 - D.yyy;\n\n    i = mod289(i);\n    vec4 p = permute(permute(permute(i.z + vec4(0.0, i1.z, i2.z, 1.0)) + i.y + vec4(0.0, i1.y, i2.y, 1.0)) + i.x + vec4(0.0, i1.x, i2.x, 1.0));\n\n    float n_ = 0.142857142857;\n    vec3  ns = n_ * D.wyz - D.xzx;\n    vec4 j = p - 49.0 * floor(p * ns.z * ns.z);\n\n    vec4 x_ = floor(j * ns.z);\n    vec4 y_ = floor(j - 7.0 * x_);\n\n    vec4 x = x_ * ns.x + ns.yyyy;\n    vec4 y = y_ * ns.x + ns.yyyy;\n    vec4 h = 1.0 - abs(x) - abs(y);\n\n    vec4 b0 = vec4(x.xy, y.xy);\n    vec4 b1 = vec4(x.zw, y.zw);\n\n    vec4 s0 = floor(b0) * 2.0 + 1.0;\n    vec4 s1 = floor(b1) * 2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0.0));\n\n    vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n    vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\n    vec3 p0 = vec3(a0.xy, h.x);\n    vec3 p1 = vec3(a0.zw, h.y);\n    vec3 p2 = vec3(a1.xy, h.z);\n    vec3 p3 = vec3(a1.zw, h.w);\n\n    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n    \n    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n    m = m * m;\n    return 42.0 * dot(m * m, vec4(dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3)));\n}\n\nfloat grain (vec2 st, float t) {\n\treturn fract(sin(dot(st.xy, vec2(17.0,180.)))* 2500. + t);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 suv = uv;\n    \n    vec2 noise = vec2(4.0);\n    float size = 50.0;\n   \tvec2 pos = iMouse.xy / iResolution.xy; // vec2(0.5);\n    \n    // bubble\n    float n = snoise(vec3(uv * noise + iTime * 0.9, 0.0));\n    float radius = size / iResolution.y;\n    float nRadius = radius * (0.6 + 0.4 * n);\n\n    float outter = nRadius / length(pos - suv);\n    outter = clamp(outter, 0.0, 1.0);\n    outter = pow(outter, 16.0);\n\n    float inner = nRadius * 1.2 / length(pos - suv);\n    inner = clamp(inner, 0.0, 1.0);\n    inner = pow(inner, 20.0);\n    inner = 1.0 - inner;\n\n    float halo = 1.0 - (outter + inner);\n    \n    float g = dot(texture(iChannel0, uv + (n * halo)).rgb, vec3(0.299, 0.587, 0.114));\n\t// grayscale and color\n    vec4 color = texture(iChannel0, uv);\n    vec4 grayscale = vec4(g);\n    \n    // mix both\n    vec4 c = mix(color, grayscale, inner);\n    \n    // noise\n    c = mix(c, vec4(grain(uv, iTime * 1.)), 0.04);\n\n    fragColor = c;\n}","name":"Image","description":"","type":"image"}]}