{"ver":"0.1","info":{"id":"NdfSWM","date":"1618757214","viewed":68,"name":"[kirillyat] Pyramid 328","username":"kirillyat","description":"Student: Kirill Yatsenko\nCMC MSU\n328 SP","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["cmcmsu"],"hasliked":0,"parentid":"NslSRN","parentname":"[kirillyat] CGPrac"},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst float EPS = 1e-7; \nconst vec3 CAMERA_POS = vec3(0, 1.2, -6);\n\nvec3 LIGHT1_POS = vec3(-3, 1.5, 5);\nconst float LIGHT1_RADIUS = 0.5;\nconst vec3 LIGHT1_COLOR = vec3(1, 1, 1);\n\nvec3 LIGHT2_POS = vec3(1, 0.5, -2);\nconst float LIGHT2_RADIUS = 0.25;\nconst vec3 LIGHT2_COLOR = vec3(0.2, 1, 1);\n\nfloat ABSORBTION = 15.0;\n\nvec3 randDir;\nvec3 randVals;\n\n//#define SHARP_SHADOWS\n#define SOFT_SHADOWS\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) \n{\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t*dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) {\n        return INF;\n    }\n    normal = vec3(0,1,0);\n    return t;\n}\n\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal)\n{\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r*r;\n    float D = b*b - a*c;\n    if (D < 0.0)\n    {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t*dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) return INF;\n    normal = normalize(pos + t*dir);\n    return t;\n}\n\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal)\n{\n    float r = 1.0;\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t*dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < r*r) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - r*r;\n    float D = b*b - a*c;\n    if (D < 0.0)\n    {\n        return INF;\n    }\n    t = (-b - sqrt(D))/a;\n    if (t > 0.0) {\n        worldPos = t*dir + pos;\n        if (worldPos.y < -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D))/a;\n    if (t < 0.0) return INF;\n    worldPos = t*dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\nfloat traceTriangle(vec3 point0, vec3 point1, vec3 point2, vec3 pos, vec3 dir, out vec3 normal)\n{\n    vec3 edge1 = point1 - point0;\n    vec3 edge2 = point2 - point0;\n    vec3 heigth = cross(dir, edge2);\n    float a = dot(edge1, heigth);\n    \n    \n    if (a > -EPS && a < EPS)\n        return INF;\n    float f = 1.0/a;\n    vec3 s = pos - point0;\n    float u = f * dot(s, heigth);\n    \n    if (u < 0.0 || u > 1.0)\n        return INF;\n    vec3 q = cross(s, edge1);\n    float v = f * dot(dir, q);\n    \n    if (v < 0.0 || u + v > 1.0)\n        return INF;\n    float t = f * dot(edge2, q);\n    \n    if (t < EPS) return INF;\n    vec3 v1 = point2 - point0;\n    vec3 v2 = point1 - point0;\n    normal = normalize(cross(v1,v2));\n    return t;\n}\n\n\nvec3 planeThrough3Points(vec3 point1, vec3 point2, vec3 point3, out float move)\n{\n    vec3 p1p2 = point1 - point2;\n    vec3 p1p3 = point1 - point3;\n    vec3 normal = cross(p1p2, p1p3);\n    move = dot(normal, point1);\n    return normal;\n}\n\n\nfloat tracePyramid(vec3 pos, vec3 dir, out vec3 normal)\n{\n    float t = INF;\n    float ang = 0.5;\n    mat2 rot = mat2(cos(ang), sin(ang), -sin(ang), cos(ang));\n    \n    vec2 pyrXZ1 = rot * vec2(1, -1);\n    vec2 pyrXZ2 = rot * vec2(1, 1);\n    vec2 pyrXZ3 = rot * vec2(-1, 1);\n    vec2 pyrXZ4 = rot * vec2(-1, -1);\n    \n    vec3 norm = vec3(0,sqrt(1.0),0);\n    vec3 dotx1 = vec3(pyrXZ1.x, -0.99, pyrXZ1.y);\n    vec3 dotx2 = vec3(pyrXZ2.x, -0.99, pyrXZ2.y);\n    vec3 dotx3 = vec3(pyrXZ3.x, -0.99, pyrXZ3.y);\n    vec3 dotx4 = vec3(pyrXZ4.x, -0.99, pyrXZ4.y);\n\n    vec3 tnorm;\n    \n    float t1 = traceTriangle(dotx1, dotx2, norm, pos, dir, tnorm);\n    if (t1 < t && t1 > 0.0) {\n        t = t1;\n        normal = tnorm;\n    }\n    float t2 = traceTriangle(dotx2, dotx3, norm, pos, dir, tnorm);\n    if (t2 < t && t2 > 0.0) {\n        t = t2;\n        normal = tnorm;\n    }\n    float t3 = traceTriangle(dotx3, dotx4, norm, pos, dir, tnorm);\n    if (t3 < t && t3 > 0.0) {\n        t = t3;\n        normal = tnorm;\n    }\n    float t4 = traceTriangle(dotx4, dotx1, norm, pos, dir, tnorm);\n    if (t4 < t && t4 > 0.0) {\n        t = t4;\n        normal = tnorm;\n    }\n    float t5 = traceTriangle(dotx1, dotx2, dotx3, pos, dir, tnorm);\n    if (t5 < t && t > 0.0) {\n        t = t5;\n        normal = tnorm;\n    }\n    float t6 = traceTriangle(dotx3, dotx4, dotx1, pos, dir, tnorm);\n    if (t6 < t && t > 0.0) {\n        t = t6;\n        normal = tnorm;\n    }\n    if (t < INF) {\n        normal = normalize(normal);\n    }\n    return t;\n}\n\n\nbool isOccluded(vec3 pos, vec3 target)\n{\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 pyrNorm;\n    float pyrT = tracePyramid(pos, dir, pyrNorm);\n    if (pyrT < dist)\n        return true;\n        \n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n    \n    vec3 L1Norm;\n    float light1T = traceSphere(pos - LIGHT1_POS, dir, LIGHT1_RADIUS, L1Norm);\n    return (light1T < dist);\n    \n    vec3 L2Norm;\n    float light2T = traceSphere(pos - LIGHT2_POS, dir, LIGHT2_RADIUS, L2Norm);\n    return (light2T < dist);\n}\n\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal)\n{\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    \n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    \n    #ifdef SOFT_SHADOWS\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 20.0f / distSq1;\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 10.0f / distSq2;\n    #endif\n    \n    #ifdef SHARP_SHADOWS\n    float att1 = isOccluded(pos, LIGHT1_POS) ? 0.0 : 20.0f / distSq1;\n    float att2 = isOccluded(pos, LIGHT2_POS) ? 0.0 : 10.0f / distSq2;\n    #endif\n    \n    return color * \n        ( max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR \n        + texture(iChannel1, normal).rgb * 0.1\n        );\n}\n\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2)\n{\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA*cosA);\n    \n    vec3 tang = normalize(v - cosA*normal);\n    \n    float sinB = sinA / n1 * n2;\n    float cosB = sqrt(1.0 - sinB*sinB);\n    \n    return sinB * tang + cosB * normal;\n}\n\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\n\nfloat pow2(float x) { return x*x; }\n\n\nfloat fogSdf(vec3 pos) { return length(pos) - 0.9;}\n\n\nfloat BeerLambert(float absorptionCoefficient, float distanceTraveled)\n{\n    return exp(-absorptionCoefficient * distanceTraveled);\n}\n\n\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\nvec3 minecraft (in vec2 w)\n{\n    vec3 d = vec3(w, 1) / iResolution - 0.5;\n    vec3 p, c, f;\n    vec3 g = d; \n    vec3 o = vec3(0.2, 0.0, 8.0);\n    o.y = 3.0 * cos(o.x * o.z);\n    vec3 y = vec3(1, 2, 0);\n\n    for (float i = 0.0; i < 9.0; i += 0.01) {\n        o += d * i * 0.01;\n        c = o;\n        f = fract(c);\n        p = floor(c) * 0.3;\n        if (cos(p.z) + sin(p.x) > ++p.y) {\n\t    \tg = (f.y - 0.04 * cos((c.x + c.z) * 40.0) > 0.8 ? y : f.y * y.yxz) / i;\n            break;\n        }\n    }\n    \n    return g.rgb;\n}\n\n\nvec4 sampleFog(vec3 pos, vec3 dir, in vec2 w)\n{\n    float t = fogSdf(pos);\n    const float MARCH_SIZE = 0.01;\n    float opacity = 1.0;\n    float totalAbs = 0.0;\n    for (int i = 0; i < 50; ++i) {\n        vec3 curPos = pos + (float(i) * MARCH_SIZE + t) * dir;\n        float sdf = fogSdf(curPos);\n        if (sdf < 0.0) {\n            float prevOpacity = opacity;\n            opacity *= BeerLambert(ABSORBTION * (\n                texture(iChannel3, curPos * 0.2).x\n                + texture(iChannel3, curPos * 0.4).x\n                + texture(iChannel3, curPos * 0.8).x\n                + texture(iChannel3, curPos * 1.6).x\n                ) * 0.25 * abs(sdf), MARCH_SIZE);\n            float absorptionLastStep = prevOpacity - opacity;\n            totalAbs += absorptionLastStep;\n        }\n    }\n    \n    vec3 color = minecraft(w);\n    vec3 tmp = rgb2hsv(color);\n    tmp.x /= 1.15;\n    tmp.z *= 2.8;\n    color = hsv2rgb(tmp);\n    color *= 1.25;\n    \n    return vec4(color * totalAbs, 1.0 - opacity);\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    randVals = vec3(rand(float(iFrame)), rand(float(iFrame) + 5.0), rand(float(iFrame) + 15.0));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord- iResolution.xy * 0.5 + (randVals.xy - 0.5)*2.0) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front +right*uv.x + up*uv.y);\n    \n    LIGHT1_POS = LIGHT1_POS + vec3(0,1,0)* randVals.x *0.1;\n    LIGHT2_POS = LIGHT2_POS + vec3(0,0.5,0)* randVals.x *0.1;\n    float colorMul = 1.0;\n    \n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1; \n    const int REFLECTION = 2;\n    const int REFRACTION = 3; \n\n    \n    vec3 curPos = CAMERA_POS; \n    vec3 curDir = viewVec;\n\n    //коефф преломления\n    const float GLASS_N = 1.5; \n    const float AIR_N = 1.0;\n    const float DIAMOND_N = 2.5;\n    float n1 = AIR_N; \n    float n2 = GLASS_N;\n    int iterationType;\n    float GLASS_R = pow2(AIR_N - GLASS_N)/pow2(AIR_N + GLASS_N);\n    \n    //\n    //\n    //  \n    vec3 minecraftT = vec3(0);\n    //\n    //\n    //\n    \n    for (int i = 0; i<10; ++i) {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        \n        \n        \n        \n        \n        // Источники света \n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n        \n        /* // Сфера со стрима\n        vec3 sphNorm;\n        float sphT = traceSphere(curPos, curDir, 1.0, sphNorm);\n        if (sphT < t) {\n            t = sphT; \n            normal = sphNorm;\n            \n            \n           \n            if (randVals.x * 0.2< GLASS_R)\n                materialType = REFLECTION;\n            else\n                materialType = REFRACTION;\n        }\n        */\n\n\n        \n       \n        \n        vec3 pyrNorm;\n        float pyrT = tracePyramid(curPos, curDir, pyrNorm);\n        if (pyrT < t) {\n            t = pyrT;\n            normal = pyrNorm;\n          \n            if (randVals.x * 0.5 < GLASS_R * 2.0) {\n                materialType = REFLECTION;\n            } else {     \n                materialType = REFRACTION;\n                \n                if (dot(curDir, normal) > 0.0){\n                    n1 = AIR_N;\n                }else{\n                    n2 = GLASS_N;\n                }\n                \n            }\n        }\n\n\n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t*curDir + curPos;\n            color = texture(iChannel2,  worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n\n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t){\n            t = planeT;\n            materialType =  DIFFUSE;\n            vec3 worldPos = t*curDir + curPos;\n            color = texture(iChannel0,  worldPos.xz*0.1).rgb;   \n            normal = planeNorm;\n            if (randVals.x < 0.125) {\n                materialType = REFLECTION;\n            }\n        }\n        \n        \n    if (t != INF) {\n            vec3 worldPos = t*curDir + curPos;\n            fragColor.rgb = texture(iChannel0, worldPos.xz).rgb;\n            if (materialType == EMISSION) {\n                fragColor.rgb = color * colorMul;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMul + minecraftT;\n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            } else if (materialType == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, n2);\n                curPos = worldPos + curDir * 1e-5;\n                float tmp = n1; n1 = n2; n2 = tmp;\n                vec4 fog = sampleFog(curPos, viewVec, fragCoord);\n                fragColor.rgb += fog.rgb * fog.a * colorMul;\n                colorMul = 1.0 - fog.a;\n                if (i == 0) {\n                    minecraftT = fog.rgb * fog.a * colorMul * 1.7;\n                }\n                \n            }\n        } else {\n            fragColor.rgb = 0.7 * texture(iChannel1, curDir).rgb * colorMul + minecraftT;\n            break;\n        }\n}}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}