{"ver":"0.1","info":{"id":"mtdBzr","date":"1700910249","viewed":33,"name":"uv aspect fix by Simon Schuler","username":"SchulerSimon","description":"This fixes the uv coordinates, so that the content is always scaled no matter what aspect ratio you have. This is useful for shaders that run on smartphones or tablets, for example. Outside of shadertoy the aspect ratio might not be fixed. ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["aspectratio","uv","tablet","fix","normalization","smartphone"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nAuthor: Simon Schuler (https://github.com/SchulerSimon)\n\nMIT License\n\nI always wondered why most shaders expect an aspect-ratio where x > y.\n\nThis script fixes that.\n*/\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float uv_norm = iResolution.x > iResolution.y ? iResolution.y : iResolution.x;\n    // uv normalization from -.5 to .5 no matter the aspect ratio\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / uv_norm;\n    // mouse normalization from -.5 to .5 no matter the aspect ratio\n    vec2 uv_m = (iMouse.xy - 0.5 * iResolution.xy) / uv_norm;\n    \n    // draw a light at the mouse-position\n    vec3 col = vec3(0.01 / length(uv - uv_m));\n    \n    // stuff goes here\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}