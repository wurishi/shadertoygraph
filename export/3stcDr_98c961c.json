{"ver":"0.1","info":{"id":"3stcDr","date":"1600761606","viewed":214,"name":"Kaufmann Vortex","username":"athibaul","description":"The trajectory of each point of a Kaufmann vortex can be integrated back to initial time, allowing to trace the trajectory of each given point. ","likes":3,"published":1,"flags":0,"usePreview":1,"tags":["antialiasing","vortex","analytic","integration"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU (2.0*3.1415926535)\n\n// Kaufmann vortex\n// https://en.wikipedia.org/wiki/Kaufmann_(Scully)_vortex\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0*fragCoord - iResolution.xy) / iResolution.y;\n\n    vec3 col;\n    \n    // Velocity profile in the vortex is assumed to be:\n    //           v_theta = r / (r0^2 + r^2)\n    \n    // Compute the initial position of the particle currently at (x,y)\n    // by integrating back to initial time.\n    float r0 = 0.8;\n    float r = length(uv);\n    float th = atan(uv.y, uv.x);\n    \n    float r_i = r;\n\tfloat th_i = th - iTime/(r0*r0 + r*r);\n    vec2 uv_i = r_i * cos(th_i + vec2(0,TAU/4.));\n    \n    // Also compute a Lipschitz bound on the deformation,\n    // for antialiasing\n    float dr = 1.0;\n    float dth = 1.0/r;\n    float dr_i = dr;\n    float dth_i = dth + 2.*iTime*r/pow(r0*r0+r*r, 2.0);\n    float duv_i = r_i*dth_i + dr_i;\n    \n   \tcol = texture(iChannel0, uv_i*0.5).rgb;\n    // Draw the deformation of lines\n    \n    {\n        float scale = 0.2;\n        float y0 = scale * (floor(uv_i.y/scale) + 0.5);\n        float f = abs(uv_i.y - y0);\n        col = mix(col, 0.5+0.5*sin(0.5*TAU*(y0+vec3(0.,0.4,0.5))),\n                  smoothstep(duv_i*length(fwidth(uv)), 0.0, f));   \n    }\n    {\n        float scale = 0.2;\n        float x0 = scale * (floor(uv_i.x/scale) + 0.5);\n        float f = abs(uv_i.x - x0);\n        col = mix(col, 0.5+0.5*sin(0.5*TAU*(x0+vec3(0.4,0.4,0.8))),\n                  smoothstep(duv_i*length(fwidth(uv)), 0.0, f));   \n    }\n    \n    //col = vec3(uv_i, 0);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}