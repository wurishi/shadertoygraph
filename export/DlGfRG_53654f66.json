{"ver":"0.1","info":{"id":"DlGfRG","date":"1702173262","viewed":11,"name":"Slow Density","username":"Buchibuchi","description":"Tutorial +. GPT prompting","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["slowdensitycolours"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette(float t) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.0, 0.333, 0.667);\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\n// Función para generar un patrón fractal\nvec2 mandelbrot(vec2 z, vec2 c) {\n    return vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y;\n    vec3 finalColor = vec3(0.0);\n    vec2 c = vec2(0.5, 0.5); // Punto central del fractal\n\n    // Disminuir la velocidad de la animación\n    float slowTime = iTime * 0.1; // Ajustar este valor para cambiar la velocidad\n\n    for (float i = 0.0; i < 2.0; i++) {\n        vec2 z = uv;\n        int iterations = 0;\n        for (int j = 0; j < 100; j++) {\n            z = mandelbrot(z, c);\n            if (length(z) > 2.0) break;\n            iterations++;\n        }\n\n        float d = float(iterations) / 100.0;\n        vec3 col = palette(d + slowTime);\n        finalColor += col * (1.0 - d);\n    }\n\n    fragColor = vec4(finalColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}