{"ver":"0.1","info":{"id":"tdB3zD","date":"1548279159","viewed":79,"name":"Elliptic curves","username":"Seledorn","description":"Just visualizing some  elliptic curves","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["ellipticcurves"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat f_width(float f)\n{\n    return sqrt(dFdx(f)*dFdx(f) + dFdy(f)*dFdy(f));\n}\n\nvec4 render(float d, vec3 color, float stroke)\n{\n    float fw = f_width(d);\n    float anti = fw * 1.0;\n    float fw_stroke = fw*stroke;\n    vec4 strokeLayer = vec4(vec3(0.05), 1.0-smoothstep(-anti, anti, d - fw_stroke));\n    vec4 colorLayer = vec4(color, 1.0-smoothstep(-anti, anti, d));\n\n    if (stroke < 0.000001) {\n    \treturn colorLayer;\n    }\n    //return mix(vec4(0.0),vec4(1.0),smoothstep(0.0,0.04,d));\n    return  vec4(mix(strokeLayer.rgb, colorLayer.rgb, colorLayer.a), strokeLayer.a);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv-=0.5;\n    uv*=5.;\n    uv.x*= iResolution.x/iResolution.y;\n\t\n    float x = uv.x;\n\tfloat y = uv.y;\n\n    \n    float dist = y*y - (x*x*x-4.*x*sin(6.*iTime/19.))+cos(iTime*5./7.);\n    float grid_dist = min(abs(mod(y+0.5,1.)-0.5)*10., abs(mod(x+0.5,1.)-0.5)*10.);\n    float ax_dist = min(abs(x),abs(y));\n  \n    vec3 col = vec3(smoothstep(dist,-0.01,0.01));\n   \tcol = 1.-vec3(0.4,0.3,0.5) * smoothstep(grid_dist,0.0,0.04);\n    col *= smoothstep(ax_dist,-0.0,0.005);\n    \n    fragColor = vec4(col,1.0);\n    \n    \n    // Time varying pixel color\n    vec4 b = render(dist, col,2.);\n    fragColor = mix(fragColor, b, b.a);\n    \n    fragColor = pow(fragColor,vec4(0.5));\n\t\n    \n    // Output to screen\n    //\n    \n}","name":"Image","description":"","type":"image"}]}