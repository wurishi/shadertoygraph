{"ver":"0.1","info":{"id":"mddBDj","date":"1697661086","viewed":34,"name":"SDFs - Pavel","username":"0x706a","description":"Experimenting with SDFs","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int divs = 80;\n\nconst vec3 light_violet = vec3(220, 170, 240);\nconst vec3 dark_violet = vec3(118, 0, 179);\nconst vec3 light_blue = vec3(140, 205, 255);\nconst vec3 dark_blue = vec3(0, 91, 161);\n\nvec2 transform(vec2 coords) {\n    vec2 uv = coords/iResolution.xy - vec2(0.5, 0.5);\n    uv.x *= iResolution.x / iResolution.y;\n    return uv * 2.0;\n}\n\nvec3 dist_to_color(float c) {\n    vec3 col = vec3(0, 0, 0);\n    \n    if(abs(c) < 0.003) {\n        col = vec3(255, 255, 255);\n    } else if(c > 0.0) {\n        c = float((int(c * 1000.0)) / divs) / float(1000 / divs);   // round c\n        col = mix(light_violet, dark_violet, c * 0.5);\n    } else {\n        c = float((int(c * 1000.0)) / divs) / float(1000 / divs);   // round c\n        col = mix(light_blue, dark_blue, -c);\n    }\n    col = col / 255.0;\n    return col;\n}\n\nvec3 draw_circle(vec2 uv, vec2 pos, float r, vec3 col) {\n    if(abs(length(uv - pos) - r) < 0.002) {\n        return vec3(38, 70, 83) / 255.0;\n    }\n    return col;\n}\n\nvec3 draw_circle_filled(vec2 uv, vec2 pos, float r, vec3 col) {\n    if(length(uv - pos) <= r) {\n        return vec3(214, 40, 40) / 255.0;\n    }\n    return col;\n}\n\nvec3 draw_line(vec2 uv, vec2 a, vec2 b, vec3 col) {\n    if(line_SDF(uv, a, b) < 0.002) {\n        return vec3(38, 70, 83) / 255.0;\n    }\n    return col;\n}\n\nvec3 draw_segment(vec2 uv, vec2 a, vec2 b, vec3 col) {\n    if(segment_SDF(uv, a, b) < 0.002) {\n        return vec3(38, 70, 83) / 255.0;\n    }\n    return col;\n}\n\nfloat scene(vec2 p, vec2 mouse) {\n    return min(\n        box_SDF(p, vec2(0.2, 0.2)), \\\n        circle_SDF(p, mouse, 0.3) \\\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (y from -1 to 1)\n    vec2 uv = transform(fragCoord);\n    vec2 mouse = transform(iMouse.xy); \n    \n    float d = scene(uv, mouse);\n    vec3 col = dist_to_color(d);\n    \n    vec2 origin = vec2(-1.5, 0);\n    vec2 dir = normalize(vec2(0.0, 0.0) - origin);\n    vec2 pos = origin;\n    \n    bool hit = false;\n    \n    for(int i = 0; i < 50; i++) {\n        float sd = scene(pos, mouse);\n        col = draw_circle(uv, pos, sd, col);\n        pos = pos + dir * sd;\n        if(sd < 0.001 || sd > 5.0) {\n            hit = true;\n            break;\n        }\n    }\n    if(true) {\n        if(hit) {\n            col = draw_segment(uv, origin - dir * 10.0, pos, col);\n            col = draw_circle_filled(uv, pos, 0.01, col); \n        } else {\n            col = draw_line(uv, origin, pos, col);\n        }\n    }\n    col = draw_circle_filled(uv, origin, 0.01, col);\n    \n   \n    // Output to screen\n    fragColor = vec4(col ,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float circle_SDF(vec2 p, vec2 circle_pos, float r) {\n    float dist = length(circle_pos - p);\n    return dist - r;\n}\n\nfloat segment_SDF(vec2 p, vec2 a, vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat box_SDF(vec2 p, vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0) - 0.1;\n}\n\nfloat heron(vec2 p, vec2 a, vec2 b) {\n  float s = (length(p - a) + length(p - b) + length(a - b)) / 2.0;\n  return sqrt(s * (s - length(p - a)) * (s - length(p - b)) * (s - length(a - b)));\n}\n\nfloat line_SDF(vec2 p, vec2 a, vec2 b) {\n    return 2.0 * heron(p, a, b) / length(a - b);\n}","name":"Common","description":"","type":"common"}]}