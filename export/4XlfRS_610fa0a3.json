{"ver":"0.1","info":{"id":"4XlfRS","date":"1728554295","viewed":19,"name":"glitch_3_00","username":"Si5","description":"Shader with Retro look","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["retro"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Screen resolution\n    vec2 resolution = iResolution.xy;\n\n    // Pixelation effect: adjust pixel size for retro look\n    vec2 pixelSize = vec2(1.0, 1.0);  // Small pixels for more definition\n    vec2 pixelatedCoord = floor(fragCoord / pixelSize) * pixelSize;\n\n    // Simulate scanlines\n    float scanline = 0.85 + 0.15 * sin(pixelatedCoord.y * 3.1415 * 3.0); // Smooth scanlines, more visible\n\n    // Simulate screen noise/flicker for old CRT displays\n    float noise = fract(sin(dot(pixelatedCoord.xy, vec2(12.9898, 78.233))) * 43758.5453);\n    float flicker = 0.9 + 0.1 * sin(iTime * 60.0 + pixelatedCoord.y * 0.05);\n\n    // Multicolor gradient effect (RGB shifting effect)\n    vec3 rgbShift = vec3(\n        0.7 + 0.3 * sin(iTime * 2.0 + pixelatedCoord.y * 0.1),   // Red shift\n        0.6 + 0.4 * sin(iTime * 2.5 + pixelatedCoord.x * 0.1),   // Green shift\n        0.8 + 0.2 * sin(iTime * 3.0 + pixelatedCoord.y * 0.2)    // Blue shift\n    );\n\n    // Smooth transition of colors over the screen\n    vec3 color = vec3(\n        sin(iTime + pixelatedCoord.x * 0.02) * 0.5 + 0.5,  // Red channel\n        sin(iTime + pixelatedCoord.y * 0.03 + 2.0) * 0.5 + 0.5,  // Green channel\n        sin(iTime + pixelatedCoord.x * 0.04 + 4.0) * 0.5 + 0.5   // Blue channel\n    );\n\n    // Apply scanlines, noise, and flicker for retro effect\n    color *= rgbShift * flicker * scanline * noise;\n\n    // Output the final color\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}