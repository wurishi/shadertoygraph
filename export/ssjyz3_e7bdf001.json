{"ver":"0.1","info":{"id":"ssjyz3","date":"1643885449","viewed":68,"name":"color filter with noise distrib.","username":"PippoBaudo","description":"color filter/mask that uses a noise function to distribute the color itself. \ncredits to:  k_kondrak for the noise function [https://www.shadertoy.com/view/MdyfWz]","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["noise","filter","color","distribution"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float r(in vec2 p)\n{\n    return fract(cos(p.x*42.98 + p.y*43.23) * 1127.53);\n}\n\nfloat n(in vec2 p)\n{\n    vec2 fn = floor(p);\n    vec2 sn = smoothstep(vec2(0), vec2(1), fract(p));\n    \n    float h1 = mix(r(fn), r(fn + vec2(1,0)), sn.x);\n    float h2 = mix(r(fn + vec2(0,1)), r(fn + vec2(1)), sn.x);\n    return mix(h1 ,h2, sn.y);\n}\n\nfloat noise(in vec2 p)\n{\n    return n(p/32.) * 0.58 +\n           n(p/16.) * 0.2  +\n           n(p/8.)  * 0.1  +\n           n(p/4.)  * 0.05 +\n           n(p/2.)  * 0.02 +\n           n(p)     * 0.0125;\n}\n\nfloat lerp(in float min_, in float max_, in float t){\n    return min_ + t * (max_ - min_);\n}\nfloat dist(in vec2 a, in vec2 b){\n    return sqrt(a.x*a.x+b.x*b.x);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //CIRCLE MASK RADIUS\n    const float r = 64.;\n    //MOUSE POS\n    vec2 mouse = vec2(iMouse);\n    \n    //TIME\n    float t = min(abs(sin(iTime*0.1667)),1.0);\n    \n    //PIXEL\n    vec2 uv = fragCoord/iResolution.xy;    \n    vec4 pix = texture(iChannel0, uv).rgba;\n    \n    //GRAY VALUE\n    float pixMod = (pix.r+pix.g+pix.b)/3.0;\n    vec4 grayFilter = vec4(pixMod,pixMod,pixMod,1);\n    \n    //FILTER\n    vec3 filter_ = vec3(1,1,0.25);//bluish\n    vec4 filteredColor = vec4(\n                min(pix.r,filter_.x),\n                min(pix.g,filter_.y),\n                min(pix.b,filter_.z),1);\n    \n    //ALPHA                          \n    float alpha = smoothstep(t + .1, t - .1, noise(fragCoord * .4));\n    \n    //NOISE EFF\n    vec4 noisedColor = vec4(\n                    lerp(grayFilter.x,filteredColor.x,alpha),\n                    lerp(grayFilter.y,filteredColor.y,alpha),\n                    lerp(grayFilter.z,filteredColor.z,alpha),\n                    1\n                   );\n    \n    if(distance(mouse,fragCoord.xy) > r){\n        fragColor = noisedColor;\n    }else{\n        fragColor = pix;\n    }\n}","name":"Image","description":"","type":"image"}]}