{"ver":"0.1","info":{"id":"3dXBR4","date":"1587750268","viewed":270,"name":"Start Iridiscence","username":"BlancC","description":"trying to build up on the star design design from the art of code : \nhttps://www.shadertoy.com/view/tlyGW3","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["light"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define M_PI 3.14159265358979323846264338\n\nvec3 Rainbow(vec2 uv, float zoomAmnt, float speed, vec2 startFinishSteps){\n    \n    float ratioRnbow = uv.x * 20.;\n    float angleRnbow = uv.y * 6. * cos(1.1 * speed);\n    vec3 rgbRnbow = cos(speed + ratioRnbow + angleRnbow + vec3(0., 1., 2.));\n    \n    \n    float ratioStartStep = startFinishSteps.x;\n    float ratioFinishStep = startFinishSteps.y;\n    \n    vec2 sStep = smoothstep(0., ratioStartStep * zoomAmnt, abs(uv));\n\tvec2 fStep = smoothstep(ratioFinishStep * zoomAmnt, ratioStartStep * zoomAmnt, abs(uv)); \n    \n    float stepper = sStep.x * fStep.x + sStep.y * fStep.y;\n    \n    return stepper * rgbRnbow; \n}\n\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(123.34, 456.21));\n    p += dot(p, p+45.32);\n    return fract(p.x*p.y);\n}\n\nmat2 Rot(float a){\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\nvec3 Star(vec2 uv, float flare, float zoomAmnt, float rotSpeed){\n    float d = length(uv);\n    vec3 m = vec3(.04/d);\n    \n    \n    vec3 rnb = Rainbow(uv, zoomAmnt, iTime + uv.x * uv.y, vec2(0.3, 0.55));\n    float ray = max(0., 1. - abs(uv.x * uv.y * 400.));\n    m += ray * (1. + rnb) * (abs(flare) + .4);\n    \n    uv *= Rot(M_PI / 4. + iTime * rotSpeed);\n    ray = max(0., 1. - abs(uv.x * uv.y * 800.));\n    m += ray * (.6 + .5 * rnb) * (abs(flare) + .4);\n    \n    m *= smoothstep(1., .2, d);\n    \n    return m;\n}\n\nvec3 starLayer(vec2 uv, float zoomAmnt, float index){\n    \n    vec3 col = vec3(0);\n    vec2 gv = fract(uv) -.5;\n    vec2 id = floor(uv);\n    \n    int y,x;\n    \n    for(y = -1; y <=1; y++){\n        for(x = -1; x <=1; x++){\n            vec2 offs = vec2(x,y);\n            float r = Hash21(id + offs + index);\n            float size = 1. - .5 * fract(r * 345.223);\n\n            vec3 star = Star(gv - offs - vec2(r, fract(r* 34.)) + .5, sin(iTime * size) * r, zoomAmnt, (-.4 + fract(r * 1723.2)));\n            \n            \n    \t\tstar *= sin(iTime * (.4 + r)) * .5 + .5; \n            col += star * size * (sin(iTime + index * 32.1) * .5 + .5);\n        }\n    }\n    \n    return col ;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    float zoomAmnt = 3.;\n    uv *= zoomAmnt;\n\n    vec3 col = vec3(0.);\n\t\n    int k = 0;\n    int AmnLayers = 6;\n    for( k = 0; k < AmnLayers; k++){\n        \n        \n    \tcol += starLayer(uv, zoomAmnt, float(k) / float(AmnLayers) * 3.);\n    }\n    \n    \n\n    //if(gv.x >.48 || gv.y > .48) col.r = 1.;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n    //fragColor = vec4(vec3(stepper), 1.0);\n}","name":"Image","description":"","type":"image"}]}