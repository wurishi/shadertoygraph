{"ver":"0.1","info":{"id":"fdlfR4","date":"1644553429","viewed":64,"name":"Mirror Ripples","username":"jarrad","description":"Random shader for workshop.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["utcg2022"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n// 2d rotation matrix: rot(angle) * vector will rotate the vector by angle clockwise\nmat2 rot(float angle)\n{\n    return mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n}\n\nfloat rand(vec2 xy) {\n  float r = 0.;\n  r += sin(xy.x);\n  xy *= rot(0.5);\n  r += 0.5*sin(xy.x*2.);\n  r += 0.25*sin(xy.x*4.);\n  r += 0.125*sin(xy.x*8.);\n  r += 0.0625*sin(xy.x*16.);\n  return r;\n  //return sin(xy.x + 2.0*cos(xy.y + iTime + sin(xy.y + cos(xy.x))));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // pixel coordinates from centre - centre is (0, 0), top left is (-0.5, -0.5), etc\n    vec2 uv = (fragCoord - vec2(iResolution.x, iResolution.y) / 2.) / iResolution.y;\n    uv *= 1.5;\n    uv.y += 0.2*cos(iTime * 0.2);\n    uv *= rot(iTime * 0.4);\n    uv *= 1.2 + sin(iTime) * 0.4;\n    uv.x += 0.2*iTime;\n    float val = rand(uv * 12.0) * 0.5 + 0.5;\n    val = rand(vec2(val + uv.y + iTime, iTime + uv.x));\n\n    vec3 beige = vec3(0.9,0.6 + 0.2*-sin(iTime*0.33),0.7);\n    vec3 blue = vec3(0.4,0.6,0.8) * 0.4;\n    vec3 col = mix(beige, blue, val) * 1.1;\n\n    col = sqrt(0.9*col);\n\n    // output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}