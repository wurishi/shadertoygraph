{"ver":"0.1","info":{"id":"MXySDV","date":"1720499063","viewed":25,"name":"richter curtains","username":"sam_hains","description":"richter curtains","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["curtains","richter","singradients"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash(float n) {\n    return fract(sin(n) * 43758.5453);\n}\n\nfloat noise1D(float x) {\n    float i = floor(x);\n    float f = fract(x);\n    \n    // Smooth interpolation\n    float u = f * f * (3.0 - 2.0 * f);\n    \n    // Mix between two random values\n    return mix(hash(i), hash(i + 1.0), u);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalize the coordinates\n    vec2 uv = fragCoord/iResolution.xy;\n    float noiseAmp = 10.0;\n    float noiseStrength = .1;\n    float noise = noise1D(uv.x*noiseAmp)*noiseStrength;\n    \n    \n    // Create vertical stripes\n    float stripes = sin(uv.x * 100.0*(1.0-noise)) * 0.5 + 0.5;\n\n    // Add some vertical gradient\n    float gradient = uv.y * 0.2 + 0.8;\n    \n    // Combine stripes and gradient\n    float result = stripes * gradient;\n    \n    // Output the color\n    fragColor = vec4(vec3(result), 1.0);\n}","name":"Image","description":"","type":"image"}]}