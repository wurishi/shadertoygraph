{"ver":"0.1","info":{"id":"XdVcRm","date":"1521481713","viewed":408,"name":"Animated Procedural Wood","username":"microwerx","description":"An animated procedural wood texture map","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["texture","wood","proceduralgeneration","proceduraltechniques"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGzr","filepath":"/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","previewfilepath":"/media/ap/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 makeColor256(int r, int g, int b)\n{\n    return vec3(float(r)/255.0, float(g)/255.0, float(b)/255.0);\n}\n\n\nvec3 lerp(float mix, vec3 a, vec3 b)\n{\n    return mix * a + (1.0 - mix) * b;\n}\n\n\nfloat wrap(float x, float xmin, float xmax)\n{\n    return 0.0;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{     \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/max(iResolution.x, iResolution.y);\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    vec4 perlin = texture(iChannel0, 0.25 * uv);\n    \n    float numCycles = 8.0 * 3.14159;\n    float size = (0.5 * sin(iTime) + 0.5) * 4.0 + 2.0;\n    float numCyclesY = numCycles;\n    float sizeY = size;\n    \n    vec3 color1 = makeColor256(201, 176, 69);\n    vec3 color2 = makeColor256(130, 82, 13);\n    \n    float marble = sin(numCycles * uv.x + size * perlin.x) * sin(numCyclesY * uv.x + sizeY * perlin.y);\n    col = lerp(0.5 * marble + 0.5, color1, color2);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);// * perlin;\n}","name":"Image","description":"","type":"image"}]}