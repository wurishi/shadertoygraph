{"ver":"0.1","info":{"id":"dtyXRd","date":"1686291128","viewed":22,"name":"JX_test1","username":"JordanXion","description":"test","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float vibrancy = 1.7;\nfloat speed = 0.4;\nfloat iters = 4.0;\nfloat fract_size = 1.6;\nfloat contrast = 1.2;\n\nvec3 palette(float t) {\n\n    vec3 a = vec3(0.500, 0.500, 0.668);\n    vec3 b = vec3(0.388, 0.498, 0.350);\n    vec3 c = vec3(0.910, 0.891, 1.110);\n    vec3 d = vec3(1.522, 0.990, 1.918);\n    \n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    \n    vec3 finalColor = vec3(0.0);\n    \n    for (float i = 0.0; i < iters; i++)\n    {\n        uv = fract(uv * fract_size) - 0.5;\n    \n        vec3 col = palette(length(uv0) + iTime*speed + i*0.4) * vibrancy;\n    \n        float d = length(uv);\n        d*= exp(-length(uv0));\n        d = sin(d*8.0 + iTime)/8.0;\n        d = abs(d);\n        d = 0.005 / d;\n        d = pow(d, contrast);\n    \n        finalColor += col * d;\n    }\n\n    finalColor /= iters;\n\n    fragColor = vec4(finalColor,1.0);\n}","name":"Image","description":"","type":"image"}]}