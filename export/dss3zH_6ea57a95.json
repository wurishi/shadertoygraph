{"ver":"0.1","info":{"id":"dss3zH","date":"1673626411","viewed":155,"name":"Hyperjump","username":"valena","description":"Hi! That's a cool hypejump tunnel :)","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["noise","blue","jump","starwars","hyper","hyperjump","starshiptroopers"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nfloat hash11(float p)\n{\n    return length(hash22(vec2(p)));\n}\n\nfloat hash21(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nmat2 rmatrix(float a)    //Rotation matrix;\n{\n\tfloat c = cos(a);\n\tfloat s = sin(a);\n\n\treturn mat2(c, -s, s, c);\n}\n\nfloat S(float x)\n{\n\treturn (3.0 * x * x - 2.0 * x * x * x);\n}\n\nfloat noise(vec2 pos)\n{\n\tfloat a = hash21(vec2(floor(pos.x), floor(pos.y)));\n\tfloat b = hash21(vec2(ceil(pos.x), floor(pos.y)));\n\tfloat c = hash21(vec2(floor(pos.x), ceil(pos.y)));\n\tfloat d = hash21(vec2(ceil(pos.x), ceil(pos.y)));\n\n\tfloat s1 = S(pos.x - floor(pos.x));\n\tfloat s2 = S(pos.y - floor(pos.y));\n\n\tfloat f = a + \n\t\t\t  (b - a) * s1 +\n\t\t\t  (c - a) * s2 +\n\t\t\t  (a - b - c + d) * s1 * s2;\n\treturn (f);\n}\n\nfloat onoise(in vec2 pos)\n{\n\tfloat n = 3.0;\n\tfloat delta = 3.1415 / 6.0;\n\tfloat sum = 0.0;\n\tfloat power = 0.5;\n\n\tfor (float i = 0.0; i < n; i++)\n\t{\n\t\tsum += noise(rmatrix(delta * i) * pos) * power;\n\t\tpower *= 0.40;\n\t\tpos *= 1.9;\n\t}\n\treturn sum;\n}\n\nvec3 getTex(vec2 uv, float off)\n{\n    vec3 col;\n    \n    float brightness;\n\n    float N = 2.0;\n    \n    float s = 10.0;\n    \n    float n = floor(uv.y * N);\n    \n    uv.y = fract(uv.y * N);\n    \n    uv.x += off;\n    uv.x /= 50.0;\n\n    float k = 12.0;\n    \n    float b1 = pow(onoise(uv * s + vec2(0.0, n * 100.0)), 2.5) * k;\n    float b2 = pow(onoise(uv * s + vec2(0.0, mod((n + 1.0), N) * 100.0 - s)), 2.5) * k;\n    \n    brightness = mix(b1, b2, uv.y);\n    \n    col = mix(vec3(0.01, 0.01, 0.3), vec3(0.3, 0.3, 1.0), brightness);\n        \n    return col;\n}\n\nvec3 getRayDir(vec2 uv, vec3 camDir, float angle)\n{\n    vec3 right = normalize(vec3(camDir.z, 0.0, -camDir.x));\n    vec3 up = normalize(cross(camDir, right));\n    float t = tan(angle / 2.0);\n    \n    return (camDir + right * t * uv.x + up * t * uv.y);\n}\n\nvec3 getIntersection(vec3 camPos, vec3 camDir)\n{\n    float r = 1.0;\n    \n    float t = (r) / length(camDir.xy);\n    \n    return camPos + camDir * t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy - iResolution.xy * 0.5) / iResolution.x * 2.0;\n    vec2 mouseUV = (iMouse.xy - iResolution.xy * 0.5) / iResolution.x * 2.0;\n    \n    vec2 camAn = vec2(mouseUV.x * PI, mouseUV.y * PI / 2.0);\n    float camDist = 2.0;\n    \n    if (iMouse.xy == vec2(0.0, 0.0))\n        camAn = vec2(0.0, 0.0);\n    \n    vec3 camDir = vec3(sin(camAn.x) * cos(camAn.y), sin(camAn.y), cos(camAn.x) * cos(camAn.y));\n    vec3 rayDir = getRayDir(uv, camDir, PI / 2.0);\n    \n    vec3 p = getIntersection(vec3(0.0), rayDir);\n    \n    vec3 col = getTex(vec2(p.z, fract(atan(p.x, p.y) / PI * 0.5 + 0.5 + p.z / 100.0)), iTime* 30.0);\n    \n    //col = vec3(1.0 - p.z / 5.0);\n    \n    col += vec3(p.z / min(iTime * 10.0, 135.0));\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}