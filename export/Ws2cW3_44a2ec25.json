{"ver":"0.1","info":{"id":"Ws2cW3","date":"1587522760","viewed":208,"name":"Day7: Fractals 101","username":"fluxatron","description":"My first ever look at fractals. Exciting!\n\nFollowed the excellent tutorial:\nhttps://www.youtube.com/watch?v=il_Qg9AqQkE","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec2 Rotate(vec2 p, float rads)\n{\n    mat2 R = mat2(\n        cos(rads), sin(rads),\n       -sin(rads), cos(rads));\n    return R*p;\n}\n\n// Returns clockwise vector beginning from up:(0,1). 0=Up, PI/2=Right, PI=Down, 3PI/4=Left\nvec2 VectorFromAngle(float rads)\n{\n    return vec2(sin(rads), cos(rads));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float aspect = iResolution.x / iResolution.y;\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\tvec3 col = vec3(0);\n    \n    \n    float scale = 1.3 + 0.1*cos(iTime);  // track how much we've scaled uv space - used later to correct line thickness\n\t\n    uv *= scale;\t\t\t             // zoom out\n    uv = Rotate(uv, iTime*0.1);\n    uv.y += .5*tan(5./6.*3.1415);        // move shape up to middle\n    \n    // Fold across y\n    uv.x = abs(uv.x);\n    \n    // Fold diagonally\n    {\n        vec2 v = VectorFromAngle(5./6.*3.1415);\n        float d = dot(uv-vec2(0.5,0), v);\n        uv -= v*max(0.,d)*2.;\n        //col += smoothstep(0.002,0.001,abs(d));\n    \t//col.rg = sin(uv * 45.);\n    }\n    \n    // Koch fractal loop\n    {\n        vec2 v = VectorFromAngle((2./3.) * 3.1415);\n        \n        uv.x += 1.5/3.; \t\t\t\t\t// center shape by compensating for scaling in loop\n        for (int i = 0; i < 5; i++)\n        {\n            scale *= 3.;\n            uv *= 3.;\n            uv.x -=1.5;\n\n            uv.x = abs(uv.x);\t\t\t\t// mirror about y axis\n            uv.x -= .5; \t\t\t\t\t// move line out from mid\n            uv -= v*min(0.,dot(uv, v))*2.;  // bend line\n        }\n    }\n    \n    float dist = length(uv - vec2(clamp(uv.x, -1., 1.), 0));\n\tuv /= scale;\n    \n    \n    col += smoothstep(1./iResolution.y, 0., dist/scale); // draw line\n    col += texture(iChannel0, uv*2. - iTime*0.1).rgb;    // draw texture\n    //col.rg += fract(uv*2. - iTime*0.1);                  // draw uvs\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}