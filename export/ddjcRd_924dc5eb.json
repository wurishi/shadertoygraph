{"ver":"0.1","info":{"id":"ddjcRd","date":"1688070298","viewed":285,"name":"Mystic Formations","username":"coledea","description":"Some noise experiment based on a combination of https://twigl.app/?ol=true&ss=-NNIajM4aEzy75lqtAUd and https://github.com/MaxBittker/glsl-voronoi-noise.","likes":20,"published":1,"flags":32,"usePreview":0,"tags":["voronoi","noise","organic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// From: https://github.com/MaxBittker/glsl-voronoi-noise\nvec3 hash(vec3 p) {\n  return fract(\n      sin(vec3(dot(p, vec3(1.0, 57.0, 113.0)), \n              dot(p, vec3(57.0, 113.0, 1.0)),\n               dot(p, vec3(113.0, 1.0, 57.0)))) *\n      43758.5453);\n}\n\n\nvec3 voronoi3d(const in vec3 x) {\n  vec3 p = floor(x);\n  vec3 f = fract(x);\n\n  float id = 0.0;\n  vec2 res = vec2(100.0);\n  for (int k = -1; k <= 1; k++) {\n    for (int j = -1; j <= 1; j++) {\n      for (int i = -1; i <= 1; i++) {\n        vec3 b = vec3(float(i), float(j), float(k));\n        vec3 r = vec3(b) - f + hash(p + b);\n        float d = dot(r, r);\n\n        float cond = max(sign(res.x - d), 0.0);\n        float nCond = 1.0 - cond;\n\n        float cond2 = nCond * max(sign(res.y - d), 0.0);\n        float nCond2 = 1.0 - cond2;\n\n        id = (dot(p + b, vec3(1.0, 57.0, 113.0)) * cond) + (id * nCond);\n        res = vec2(d, res.x) * cond + res * nCond;\n\n        res.y = cond2 * d + nCond2 * res.y;\n      }\n    }\n  }\n\n  return vec3(sqrt(res), abs(id));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{       \n    vec2 uv = fragCoord/iResolution.xy;\n    float organic = texture(iChannel0, uv).x;\n    uv.x *= iResolution.x / iResolution.y;\n    uv = sin(iTime * 0.25) + uv * 10.0;\n    vec3 voronoi = voronoi3d(vec3(iTime -6.0, uv)); // * (sin(iTime) + 1.3);\n    float final = pow(voronoi.r * 0.1, organic * 30.0) * 0.5;\n    fragColor = vec4(\n        final * (sin(iTime* 0.5) + 1.0), \n        final * (cos(iTime + 1.0) + 1.0), \n        final * (cos(iTime) + 1.0), \n        1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// I adapted the procedural texture from https://twigl.app/?ol=true&ss=-NNIajM4aEzy75lqtAUd\n\n#define DETAIL 20.0\n#define ANIMATION_SPEED 2.0\n#define BRIGHTNESS 0.2\n#define STRUCTURE_SMOOTHNESS 1.2   // how washed out the result looks regarding structure\n#define SATURATION 0.2     // how crisp the result looks regarding colors/thickness of black lines\n\n\nmat2 rotate2D(float r){\n    return mat2(cos(r), sin(r), -sin(r), cos(r));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y; // center (0,0) and handle aspect ratio\n    float dist_squared = dot(p,p);\n    float S = 9.0;\n    mat2 m = rotate2D(5.0 + sin(iTime) * 0.01);\n    \n    float a;\n    vec2 n,q;\n    \n    for(float j = 0.0; j++ < DETAIL;){\n      p *= m;\n      n *= m;\n      q = p * S + iTime * ANIMATION_SPEED + sin(iTime * ANIMATION_SPEED - dist_squared * 6.0) * 0.8 + j + n;\n      a += dot(cos(q) / S, vec2(SATURATION));\n      n -= sin(q);\n      S *= STRUCTURE_SMOOTHNESS;\n    }\n    \n    float result = 0.2 * ((a + BRIGHTNESS) + a + a); \n    fragColor = vec4(result);\n}","name":"Buffer A","description":"","type":"buffer"}]}