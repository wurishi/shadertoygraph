{"ver":"0.1","info":{"id":"msGSzV","date":"1681317464","viewed":53,"name":"Radial pixel search test","username":"vjancik","description":"WIP: trying to fill space around pixel (center, red) with black pixels, derived from distance without overlapping pixels (so that I can derive a partner calculation (candPixels(int? dist, ivec2 center) = [all pixel coords without overlap])","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["radial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float PI = radians(180.);\n    \n    float minDim = min(iResolution.x, iResolution.y);\n    vec2 winCoord = fragCoord * vec2(1., -1.) + vec2(0., iResolution.y);\n    //center origin point\n\tvec2 uv = (winCoord - floor(.5 * iResolution.xy) - 0.5);\n    // uv = floor(uv);\n\n    float dist = length(uv);\n    float quad = sign(uv.x * uv.y);\n    float offset = 0.49;\n    float angle1 = abs(atan(uv.y + quad*offset, uv.x - offset));\n    float angle2 = abs(atan(uv.y - quad*offset, uv.x + offset));\n    float lowerAngle = min(angle1, angle2);\n    float higherAngle = max(angle1, angle2);\n    \n    // x-axis aligned line is always missing (and I don't care for now)\n    float lines = mod(iTime * 10., 360.) + 1.;\n    // float lines = dist / (mod(iTime, 10.) + 1.);\n    // float lines = dist;\n    \n    if (uv == vec2(0.))\n      fragColor = vec4(1., 0., 0., 1.);\n    else if (mod(lowerAngle, PI / lines * 2.) < PI / lines\n             && mod(higherAngle, PI / lines * 2.) > PI / lines)\n      fragColor = vec4(vec3(0.), .1);\n    else\n      fragColor = vec4(vec3(1.), .1);\n\n    // fragColor = vec4(vec3(abs(atan(uv.y, uv.x) / PI)), 1.0);\n    // fragColor = vec4(mod(uv, 1.), 0., .1);\n    // fragColor = vec4(sign(uv.x), sign(uv.y), sign(uv.x * uv.y), 1.);\n    \n    // this looks normal\n    // fragColor = vec4(vec3(mod(dist, (mod(iTime, 5.) + 10.)) / (mod(iTime, 5.) + 10.)), 1.);\n    // this freaks out\n    // fragColor = vec4(vec3(mod(dist, (mod(iTime, 1.) + 1.)) / (mod(iTime, 1.) + 1.)), 1.);\n    \n    // tunnel from noise?!\n    // fragColor = vec4(vec3(mod(dist, (mod(dist / mod(iTime, 100.), 5.) + 1.)) / (mod(dist / mod(iTime, 100.), 5.) + 1.)), 1.);\n    \n    \n    // ok...lightspeed?\n    // fragColor = vec4(vec3(mod(dist, (mod(mod(iTime, 10.) / dist, 5.) + 1.)) / (mod(mod(iTime, 10.) / dist, 5.) + 1.)), 1.);\n    \n    // LOL, accidental noise\n    // fragColor = vec4(vec3(mod(dist, (mod(dist, 5.) + 1.)) / (mod(dist, 5.) + 1.)), 1.);\n}","name":"Image","description":"","type":"image"}]}