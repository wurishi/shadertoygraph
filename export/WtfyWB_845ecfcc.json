{"ver":"0.1","info":{"id":"WtfyWB","date":"1592896553","viewed":269,"name":"DifferentClouds filter","username":"indere","description":"1.The effect refers to the Different Clouds in ps\n2.buffer A:  Generate noise simulation clouds    （refer \"iq\" 's 'https://www.shadertoy.com/view/XdXGW8）\n3. mainImage : mix noise and origin image. then Reverse mixed color.","likes":1,"published":3,"flags":32,"usePreview":0,"tags":["differentcloudsfilter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec3 reverseColor(in vec3 c1, in vec3 c){\n\treturn abs(c1 - c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n\tvec3 reverse_c = (texture(iChannel0, uv).rgb);\n    vec4 cloud_c = texture(iChannel1, uv);\n    \n    vec3 final_c = mix(reverse_c, cloud_c.rgb, pow(cloud_c.a, 0.2));\n    final_c = reverseColor(reverse_c, final_c);\n    fragColor = vec4(final_c, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const vec3 frontGroundColor = vec3(1.0,0.0,0.0);\nconst vec3 backGroundColor = vec3(0.0, 0.0, 1.0);\n\n// iq https://www.shadertoy.com/view/XdXGW8\nvec2 hash( vec2 x )  // replace this by something better\n{\n    const vec2 k = vec2( 0.3183099, 0.3678794 );\n    x = x*k + k.yx;\n    return -1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) );\n}\n\nfloat noise( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( hash( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), \n                     dot( hash( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( hash( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), \n                     dot( hash( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\n// -----------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy / iResolution.xy;\n\n\tvec2 uv = p*vec2(iResolution.x/iResolution.y,1.0);\n\t\n\tfloat f = 0.0;\n\t\n  \n    uv *= 8.0;\n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n    f  = 0.5000*noise( uv ); uv = m*uv;\n    f += 0.2500*noise( uv ); uv = m*uv;\n    f += 0.1250*noise( uv ); uv = m*uv;\n    f += 0.0625*noise( uv ); uv = m*uv;\n\t\n\n\tf = 0.5 + 0.5*f;\n\tvec3 finanl_color = backGroundColor + (frontGroundColor - backGroundColor) * f;\n\tfragColor = vec4(finanl_color, f );\n}","name":"Buf A","description":"","type":"buffer"}]}