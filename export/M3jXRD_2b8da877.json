{"ver":"0.1","info":{"id":"M3jXRD","date":"1710438421","viewed":90,"name":"Cellular Automata Sand And Water","username":"LilSmokeyBacon","description":"Use numbers 1-4 to change material\nThe water could use some polish but I already spend too much time on this lol\n(PS I'm no shader master this took me way too long to figure out)","likes":3,"published":1,"flags":48,"usePreview":0,"tags":["cellularautomata"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Time varying pixel color\n    vec4 col = vec4(texelFetch(iChannel0, ivec2(fragCoord), 0));\n\n    // Output to screen\n    fragColor = vec4(col);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// https://blog.macuyiko.com/post/2020/an-exploration-of-cellular-automata-and-graph-based-game-systems-part-4.html\n\nconst vec4 palette[4] = vec4[](SAND, WATER, SKY, GROUND);\n\nvoid mainImage( out vec4 color, in vec2 coord )\n{\n    // Cell neighborhood, reference: see numpad\n\tc1 = texture(iChannel0, (coord.xy + vec2(-1.,-1.)) / iResolution.xy);\n    c2 = texture(iChannel0, (coord.xy + vec2( 0.,-1.)) / iResolution.xy);\n    c3 = texture(iChannel0, (coord.xy + vec2( 1.,-1.)) / iResolution.xy);\n    c4 = texture(iChannel0, (coord.xy + vec2(-1., 0.)) / iResolution.xy);\n    c5 = texture(iChannel0, (coord.xy + vec2( 0., 0.)) / iResolution.xy);\n    c6 = texture(iChannel0, (coord.xy + vec2( 1., 0.)) / iResolution.xy);\n    c7 = texture(iChannel0, (coord.xy + vec2(-1., 1.)) / iResolution.xy);\n    c8 = texture(iChannel0, (coord.xy + vec2( 0., 1.)) / iResolution.xy);\n    c9 = texture(iChannel0, (coord.xy + vec2( 1., 1.)) / iResolution.xy);\n    \n    c11 = texture(iChannel0, (coord.xy + vec2(-2.,-1.)) / iResolution.xy);\n    c33 = texture(iChannel0, (coord.xy + vec2( 2.,-1.)) / iResolution.xy);\n    c44 = texture(iChannel0, (coord.xy + vec2(-2., 0.)) / iResolution.xy);\n    c66 = texture(iChannel0, (coord.xy + vec2( 2., 0.)) / iResolution.xy);\n\n\n    // Keys 1-4 select a different material\n    vec4 selection = SAND;\n    for (int i = 0; i < palette.length(); ++i)\n    {\n        if (texelFetch(iChannel1, ivec2(49 + i, 0), 0).x > 0.5)\n        {\n            selection = palette[i];\n            break;\n        }\n    }\n    \n\n    ivec2 px = ivec2(coord);\n    vec4 out_value = color;\n    \n    // Mouse\n    float mouseRad = selection == WATER ? 10. : 3.;\n    if (distance(iMouse.xy, vec2(px)) < mouseRad && bool(iMouse.z > 0.5)) {\n        color = selection;\n        return;\n    }\n    // Floor & Walls\n    if (px.y < 1 || px.x < 1 || px.x == int(iResolution.x-1.)) {\n        out_value = GROUND;\n    }\n    \n    //if (falling(c8) && c5 == SKY) // If above is falling and we are sky\n    //    color = c8;\n    //if (falling(c5) && c2 == SKY) // If we're are falling and below is sky\n    //    color = SKY;\n    \n    bool b1 = simulateSand(color);\n    bool b2 = simulateWater(color);\n    \n    if(b1||b2){\n    }\n    else if (c5 == NONE){\n        color = SKY;\n        return;\n    }\n    else if (px.y < 1 || px.x < 1 || px.x == int(iResolution.x-1.)) {\n        color = GROUND;\n        return;\n    }\n    else{\n        color = c5;\n        return;\n    }\n    \n    \n    //color = vec4(out_value);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const vec4 NONE = vec4(0.0, 0.0, 0.0, 0.0);\nconst vec4 SKY = vec4(0.0, 0.65, 1.0, 1.0);\nconst vec4 GROUND = vec4(0.65, 0.2, 0.0, 1.0);\nconst vec4 SAND = vec4(1.0, 1.0, 0.65, 1.0);\nconst vec4 WATER = vec4(0.11, 0.47, 0.96, 1);\n\nvec4 c1,c2,c3,c4,c5,c6,c7,c8,c9,c11,c33,c44,c66;\n\n// Sand\n//for each row starting from bottom:\n//    for each column:\n//        if there's sand at (row, column):\n//            drop it down if there's empty space\n//            drop it down-right if there's empty space\n//            drop it down-left if there's empty space\nbool simulateSand(out vec4 color)\n{\n    //DOWN\n    if(c8 == SAND && c5 == SKY){\n        color = c8;\n    }\n    else if(c5 == SAND && c2 == SKY && c8 != SAND){\n        color = SKY;\n    }\n    //DOWN RIGHT\n    else if(c7 == SAND && c5 == SKY && c4 != SKY)\n        color = c7;\n    else if(c5 == SAND && c3 == SKY && c2 != SKY){\n        color = SKY;\n    }\n    //DOWN LEFT\n    else if(c9 == SAND && c5 == SKY && c6 != SKY)\n        color = c9;\n    else if(c5 == SAND && c1 == SKY && c2 != SKY){ //maybe c6 instead of c2\n        color = SKY;\n    }\n    \n        //DOWN\n    else if(c8 == SAND && c5 == WATER){\n        color = c8;\n    }\n    else if(c5 == SAND && c2 == WATER){\n        color = WATER;\n    }\n    else{\n        return false;\n    }\n    \n    return true;\n}\n\n// Water\n//for each row starting from bottom:\n//    for each column:\n//        if there's water at (row, column):\n//            drop it down if there's empty space\n//            drop it down-right if there's empty space\n//            drop it down-left if there's empty space\n//            move it right if there's empty space\n//            move it left if there's empty space\nbool simulateWater(out vec4 color)\n{\n    //DOWN\n    if(c8 == WATER && c5 == SKY){\n        color = c8;\n    }\n    else if(c5 == WATER && c2 == SKY && c8 != WATER){ //\n        color = SKY;\n    }\n    //DOWN RIGHT\n    else if(c7 == WATER && c5 == SKY && c4 != SKY)\n        color = c7;\n    else if(c5 == WATER && c3 == SKY && c2 != SKY){\n        color = SKY;\n    }\n    //DOWN LEFT\n    else if(c9 == WATER && c5 == SKY && c6 != SKY)\n        color = c9;\n    else if(c5 == WATER && c1 == SKY && c2 != SKY){ //maybe c6 instead of c2\n        color = SKY;\n    }\n    //LEFT\n    else if(c5 == WATER && c4 == SKY && c44 == SKY                && c1 != SKY && c2 != SKY){ //&& c2 != SKY && c1 != SKY\n        color = SKY;\n\n    }    \n    //RIGHT\n    else if(c5 == WATER && c6 == SKY && c4 != SKY   && c3 != SKY && c2 != SKY){ //&& c2 != SKY && c3 != SKY //can add c66 == SKY\n        color = SKY;\n\n    }\n    //LEFT\n    else if(c6 == WATER && c5 == SKY && c4 == SKY                 && c3 != SKY && c2 != SKY){ //&& c3 != SKY && c2 != SKY\n        color = c6;\n\n    }\n    //RIGHT\n    else if(c4 == WATER && c5 == SKY && c44 != SKY   && c1 != SKY && c2 != SKY){ //c1 != SKY && c2 != SKY //can add c6 == SKY\n        color = c4;\n\n    } \n    else{\n        return false;\n    }\n    return true;\n}","name":"Common","description":"","type":"common"}]}