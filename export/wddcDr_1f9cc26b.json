{"ver":"0.1","info":{"id":"wddcDr","date":"1600784419","viewed":196,"name":"12 - Atmosphere","username":"Krabcode","description":"fake 3D clouds and fake rayleigh scattering","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["noise","fbm","planet","perspective"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.14159\n#define time float(iTime)*0.1\n\n// hexToRgb from here: https://stackoverflow.com/questions/22895237/hexadecimal-to-rgb-values-in-webgl-shader\nvec3 hexToRgb(int color)\n{\n    float rValue = float(color / 256 / 256);\n    float gValue = float(color / 256 - int(rValue * 256.0));\n    float bValue = float(color - int(rValue * 256.0 * 256.0) - int(gValue * 256.0));\n    return vec3(rValue / 255.0, gValue / 255.0, bValue / 255.0);\n}\n\n// noise by iq\nfloat hash(float n)\n{\n    return fract(sin(n)*43758.5453);\n}\n\nfloat iqNoise(vec3 x){\n    // The noise function returns a value in the range -1.0f -> 1.0f\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f  = f*f*(3.0-2.0*f);\n    float n = p.x + p.y*57.0 + 113.0*p.z;\n    return mix(mix(mix(hash(n+0.0), hash(n+1.0), f.x),\n    mix(hash(n+57.0), hash(n+58.0), f.x), f.y),\n    mix(mix(hash(n+113.0), hash(n+114.0), f.x),\n    mix(hash(n+170.0), hash(n+171.0), f.x), f.y), f.z);\n}\n\nfloat fbm(vec2 p){\n    float sum = 0.;\n    float freq = 1.;\n    float amp = 0.5;\n    for (int i = 0; i < 6; i++){\n        sum += amp*(1.-2.*iqNoise(vec3(p*freq, 0.)));\n        freq *= 2.0;\n        amp *= .5;\n    }\n    return sum;\n}\n\nfloat fbm(vec3 p){\n    float sum = 0.;\n    float freq = 1.;\n    float amp = 0.5;\n    for (int i = 0; i < 6; i++){\n        sum += amp*(1.-2.*iqNoise(p*freq));\n        freq *= 2.0;\n        amp *= .5;\n    }\n    return sum;\n}\n\n\n// cubic pulse by iq\nfloat cubicPulse( float c, float w, float x )\n{\n    x = abs(x - c);\n    if( x>w ) return 0.0;\n    x /= w;\n    return 1.0 - x*x*(3.0-2.0*x);\n}\n\n// perspective code by nking\nvec3 perspective(vec2 uv){\n    float distanceFromPlane = 0.5;\n    vec3 dir = vec3(uv, distanceFromPlane);\n    if (dir.y != 0.0){\n        dir /= abs(dir.y);\n    }\n    return dir;\n}\n\nvec3 render(vec2 uv, vec3 persp){\n    float topHalf = sign(uv.y);\n    float botHalf = 1.-topHalf;\n    float p = 1.-abs(uv.y)*.5;\n    float bg = pow(max(p, .49*botHalf), 50.);\n    float fg = .01 + 0.5*botHalf*fbm(vec3(persp.x, persp.z+time, .5*time));\n    return vec3(bg*vec3(0.4,0.6,1) + botHalf*clamp(fg,0.,1.));\n    \n}\n\nvec3 gammaCorrection(vec3 rgb){\n    float gamma = 2.2;\n        \n\trgb = smoothstep(0., 1., rgb);\n    return pow(max(rgb, 0.), vec3(1.0/gamma));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    uv.y -= .1*cos(uv.x)-.05;\n    vec3 col = render(uv, perspective(uv));\n    fragColor = vec4(gammaCorrection(col), 1.);\n}","name":"Image","description":"","type":"image"}]}