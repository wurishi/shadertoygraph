{"ver":"0.1","info":{"id":"X3X3DN","date":"1707500285","viewed":50,"name":"Raymarching Orthogonal","username":"bluebytes","description":"Use ray marching to draw top down view on spheres changing it's radius with cosine function.\nJoin function used to create dynamic links.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","ray","marching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//\n\n\nfloat Circle(vec3 pos, vec3 point, out vec3 color, float size)\n{\n    color = normalize(point - pos);\n    // Invert colors at the top of spheres\n    if (point.z > .19)\n        color = color.zyx;\n    //color.b = - color.b;\n    return length(point - pos) - size;\n}\n\nfloat BoxCircle(vec3 pos, vec3 point, out vec3 color, float size)\n{\n    color = normalize(point - pos);\n    //color.b = - color.b;\n    return length(point - pos) - size;\n}\n\nbool JoinTwo(float dist0, float dist1, inout vec4 fragColor, vec3 outColor0, vec3 outColor1)\n{\n    if ((dist0+dist1) < .23)\n    {\n        fragColor.xyz = mix(outColor0, outColor1, dist0/(dist0+dist1));\n        return true;\n    }\n    return false;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - iResolution.xy * .5) / (iResolution.y * .5);\n    vec3 nuv = normalize(vec3(uv, 1));\n    float blue = -uv.x / 2.;\n\n    float dist = 0.;\n    fragColor = vec4(130., 153., 142., 255.)/255.;\n    \n    float oscillation = abs(cos(iTime/3.)) / .8;\n    float size = .40; // ;\n\n    vec3 eyePos = vec3(0, 0, -55);\n    vec3 marchingPt = vec3(uv,0) - eyePos;\n    for (float i = 0.; i < (-eyePos.z); i++)\n    {\n        vec3 outColor0;\n        \n#if 0\n        vec3 pos0 = vec3(0.7 * (-oscillation), -0.5 * oscillation * .3,0);\n        vec3 pos1 = vec3(-0.5,0.5 * oscillation,0);\n        vec3 pos2 = vec3(-.5 * (2. - oscillation/2.),-0.5 * oscillation * .33,0);\n        vec3 pos3 = vec3(-0.25 * oscillation,-0.5 * (1. - oscillation),0);\n        vec3 pos4 = vec3(-0,-0.8 * (oscillation),0);\n#else\n        vec3 pos0 = vec3(1. * sin(oscillation), 1. * cos(oscillation), 0);\n        vec3 pos1 = vec3(1. * sin(oscillation), -1. * cos(oscillation), 0);\n        vec3 pos2 = vec3(0, 0, 0);\n        vec3 pos3 = vec3(-1. * sin(oscillation), 1. * cos(oscillation), 0);\n        vec3 pos4 = vec3(-1. * sin(oscillation), -1. * cos(oscillation), 0);\n#endif\n        \n        \n        float dist0 = Circle(pos0, marchingPt, outColor0, size * oscillation * 0.82);\n        float fdist0 = abs(dist0);\n        if (fdist0 < 0.001)\n        {\n            fragColor = vec4(outColor0, 1);\n            return;\n        }\n        \n        vec3 outColor1;\n        float dist1 = Circle(pos1, marchingPt, outColor1, size);\n        float fdist1 = abs(dist1);\n        if (fdist1 < 0.001)\n        {\n            fragColor = vec4(outColor1, 1);\n            return;\n        }\n        \n        vec3 outColor2;\n        float dist2 = Circle(pos2, marchingPt, outColor2, size/1.5 + oscillation * .22);\n        float fdist2 = abs(dist2);\n        if (fdist2 < 0.001)\n        {\n            fragColor = vec4(outColor2, 1);\n            return;\n        }\n        \n        vec3 outColor3;\n        float dist3 = Circle(pos3, marchingPt, outColor3, size * oscillation*1.4);\n        float fdist3 = abs(dist3);\n        if (fdist3 < 0.001)\n        {\n            fragColor = vec4(outColor3, 1);\n            return;\n        }\n\n\n        vec3 outColor4;\n        float dist4 = Circle(pos4, marchingPt, outColor4, size * oscillation + .04);\n        float fdist4 = abs(dist4);\n        if (fdist4 < 0.001)\n        {\n            fragColor = vec4(outColor4, 1);\n            return;\n        }\n\n#if 1\n        // Join two mesh\n        if (JoinTwo(dist0, dist1, fragColor, outColor0, outColor1))\n            return;\n        if (JoinTwo(dist0, dist2, fragColor, outColor0, outColor2))\n            return;\n        if (JoinTwo(dist0, dist3, fragColor, outColor0, outColor3))\n            return;\n        if (JoinTwo(dist0, dist4, fragColor, outColor0, outColor4))\n            return;\n        if (JoinTwo(dist1, dist2, fragColor, outColor1, outColor2))\n            return;\n        if (JoinTwo(dist1, dist3, fragColor, outColor1, outColor3))\n            return;\n        if (JoinTwo(dist1, dist4, fragColor, outColor1, outColor4))\n            return;\n        if (JoinTwo(dist2, dist3, fragColor, outColor2, outColor3))\n            return;\n        if (JoinTwo(dist2, dist4, fragColor, outColor2, outColor4))\n            return;\n        if (JoinTwo(dist3, dist4, fragColor, outColor3, outColor4))\n            return;\n#endif\n\n        float  inc_delta = 2.;\n        \n           float mindis = min(min(min(min(fdist0, fdist1), fdist2), fdist3), fdist4);\n           marchingPt.z -= (mindis / inc_delta);\n           \n        float z_depth = (marchingPt.z - eyePos.z);\n        z_depth = 1.0;// abs(cos(i));\n        marchingPt.xy *= z_depth;\n     }\n}","name":"Image","description":"","type":"image"}]}