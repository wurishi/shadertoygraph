{"ver":"0.1","info":{"id":"XXBBDK","date":"1729932611","viewed":40,"name":"Example: SDF Rotation","username":"ElliotPadfield","description":"This shader renders a rotating 2D square with SDFs and aspect ratio correction. UV Normalization: Adjusts for aspect ratio. Rotation: Rotates UVs over time. Square SDF: Finds edge distance. Anti-Aliasing: Uses smoothstep. Color: Blue square fades to black","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["example"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Reference: https://iquilezles.org/articles/distfunctions/\n\n// Rotation function for SDF\nvec2 rotate(vec2 p, float angle) {\n    float cosA = cos(angle);\n    float sinA = sin(angle);\n    return mat2(cosA, -sinA, sinA, cosA) * p; // Rotate `p` by `angle`\n}\n\n// SDF for a square\nfloat sdfSquare(vec2 p, float size) {\n    vec2 d = abs(p) - size;             // Distance from `p` to square edge\n    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    // Step 1: Normalize UV coordinates with aspect ratio correction\n    // https://www.shadertoy.com/view/lf2fWw\n    vec2 R = iResolution.xy;\n    vec2 uv = (2.0 * fragCoord - R) / min(R.x, R.y); // Normalize to [-1, 1] along the shortest side\n\n    // Step 2: Define rotation angle and square size\n    float angle = iTime; // Rotates over time\n    float size = 0.2;    // Half-size of the square (controls square dimensions)\n\n    // Step 3: Apply rotation to `uv`\n    vec2 rotatedUV = rotate(uv, angle);\n\n    // Step 4: Compute SDF for the square\n    float dist = sdfSquare(rotatedUV, size);\n\n    // Step 5: Anti-aliasing for smooth edges\n    // https://www.shadertoy.com/view/MfjBDw\n    float pix = 1.5 / min(R.x, R.y); // Pixel width (Adjusted to use min(R.x, R.y) for consistent pixel scaling)\n    float aa = smoothstep(-pix / 2., pix / 2., dist); // Adjusted smoothstep for smoother anti-aliasing transition\n    \n    // Step 6: Render the square with color\n    vec3 squareColor = mix(vec3(1.0, 0.5, 0.0), vec3(0.0), aa); // Blue square\n    fragColor = vec4(squareColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}