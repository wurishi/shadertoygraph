{"ver":"0.1","info":{"id":"3tyyWR","date":"1610744039","viewed":304,"name":"[TWITCH] Wild Heart","username":"Flopine","description":"A shader inspired by Sayonara Wild Hearts, an amazing video game I surely recommend :D \nMade during a twitch live, you can see them here: ","likes":11,"published":1,"flags":64,"usePreview":0,"tags":["2d","raymarching","noise","sound","fog","twitch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4tsSR4","filepath":"https://soundcloud.com/fireball312/sayonara-wild-heart?in=alexandre-gabriel-528632973/sets/sayonara-wild-hearts","previewfilepath":"https://soundcloud.com/fireball312/sayonara-wild-heart?in=alexandre-gabriel-528632973/sets/sayonara-wild-hearts","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan and slerpy for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n// Heavily inspired by Sayonara Wild Hearts\n// https://youtu.be/F-RyxYcxSQ4\n\n\n#define PI acos(-1.)\n#define ITER 64.\n\n#define od(p,s) (dot(p,normalize(sign(p)))-s)\n#define mo(p,d)p=abs(p)-d;if(p.y>p.x)p=p.yx\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define palette(t,c,d)(vec3(0.5)+vec3(0.5)*cos(2.*PI*(c*t+d)))\n\n#define time iTime\n#define dt(speed) fract(time*speed)\n#define anim (dt(1./3.)*252.)\n\nstruct obj\n{\n  float d;\n  vec3 shadowcol; \n  vec3 lightcol;\n};\n\nobj minobj (obj a, obj b)\n{\n  if (a.d < b.d) return a;\n  else return b;\n}\n\n// taken from YX here : https://www.shadertoy.com/view/tdlXW4\n// rough shadertoy approximation of the bonzomatic noise texture\nvec4 texNoise(vec2 uv)\n{\n    float f = 0.;\n    f += texture(iChannel0, uv*.125).r*.5;\n    f += texture(iChannel0, uv*.25).r*.25;\n    f += texture(iChannel0, uv*.5).r*.125;\n    f += texture(iChannel0, uv*1.).r*.125;\n    f=pow(f,1.2);\n    return vec4(f*.45+.05);\n}\n\nfloat pulseheart (vec2 uv)\n{\n  uv.y -= 0.1;\n  uv.x = -abs(uv.x);\n  uv *= rot(PI/6.+uv.y*0.2);\n  mo(uv,vec2(0.01,0.5));\n\n  return clamp(smoothstep(0.6,0.8,texture(iChannel1,vec2(uv.x,0.025)).r),0.,1.);\n}\n\nfloat box (vec3 p, vec3 c)\n{\n  vec3 q = abs(p)-c;\n  return min(0.,max(q.x,max(q.y,q.z)))+length(max(q,0.));\n}\n\nfloat cyl (vec3 p, float r, float h)\n{return max(length(p.xy)-r,abs(p.z)-h);}\n\nfloat roadwidth = 20.;\nobj asphalt (vec3 p)\n{\n  float ad = box(p,vec3(roadwidth,0.15,1e10));\n  return obj(ad,vec3(0.01,0.01,0.05),vec3(0.01,0.01,0.08)*(1.-abs(p.x*0.04))*2.);\n}\n\nobj roadlines (vec3 p)\n{\n  vec3 pp = p;\n  p.y -= 0.5;\n  p.x = abs(p.x)-roadwidth;\n  float rld = box(p,vec3(1.,0.05,1e10));\n\n  float per = 8.;\n  p.z = mod(p.z,per)-per*0.5;\n  p.x += roadwidth/2.;\n  rld = min(rld,box(p,vec3(.5,0.05,2.5)));\n\n  p.x += roadwidth/2.;\n  rld = min(rld,box(p,vec3(.5,0.05,1.5)));\n\n  return obj(rld, vec3(0.01,0.01,0.04),floor(palette(pp.z,vec3(0.02),vec3(0.,0.37,0.63))*8.)/8.);\n}\n\nobj road (vec3 p)\n{\n  p.y += 0.2;\n  p.y += cos(p.x*0.15);\n  return minobj(asphalt(p),roadlines(p));\n}\n\nobj field (vec3 p)\n{\n  float fd = p.y+3.4+(floor(texNoise(p.xz*0.001).x*25.)/8.)*10.;\n  fd = max(-box(p,vec3(roadwidth*1.5,10.,1e10)),fd);  \n  return obj(fd,vec3(0.1,0.0,0.3),vec3(0.1,0.9,0.9));\n}\n\nfloat poleper = 25.;\nobj poles (vec3 p)\n{\n  p.y -= 5.;\n\n  p.x = abs(p.x)-(roadwidth+1.5);\n  vec3 cp = vec3(abs(p.x)-1.5,p.y+sqrt(abs(sin((p.z+(poleper/2.))*(PI/poleper))*2.)),p.z);\n  float pd = cyl(cp-vec3(0.,8.5,0.),0.15,1e10);\n\n  p.z = mod(p.z,poleper)-poleper*0.5;\n  pd = min(pd,cyl(p.xzy,0.5, 10.));\n  pd = min(pd,cyl(p.yzx-vec3(8.5,0.,0.), 0.2,2.5));\n  return obj(pd,vec3(0.01,0.0,0.02),vec3(0.,0.,0.1)*p.y*0.2);\n}\n\nobj mountains (vec3 p)\n{\n    p.z -= 170.+anim; \n    \n    float sy = 1.8;\n    float sx = 1./sy;\n    vec3 size = vec3(sx,sy,sx);\n    \n    p.y += 10.;\n    float md = od(p*size+vec3(115.,0.,0.),30.);\n    p.x = abs(p.x)-120.;\n    p.xz *= rot(-PI/6.);\n\n    md = min(md,od(p*size,20.));\n    return obj(md/length(size),vec3(0.,0.,0.01),vec3(0.,0.02,0.07));\n}\n\nobj SDF (vec3 p)\n{\n  obj M = mountains(p);\n  \n  p.x += sin(p.z*0.05)*3.;\n  \n  obj scene = road(p);\n  scene = minobj(scene,field(p));\n  scene = minobj(scene,poles(p));\n  scene = minobj(scene,M);\n  \n  return scene;\n}\n\nvec3 getnorm (vec3 p)\n{\n  vec2 eps = vec2(0.01,0.);\n  return normalize(SDF(p).d-vec3(SDF(p-eps.xyy).d,SDF(p-eps.yxy).d,SDF(p-eps.yyx).d));\n}\n\nvec3 getcam (vec3 ro, vec3 tar, vec2 uv)\n{\n  vec3 f = normalize(tar-ro);\n  vec3 l = normalize(cross(vec3(0.,1.,0.),f));\n  vec3 u = normalize(cross(f,l));\n  return normalize(f+l*uv.x + u*uv.y);\n}\n\nfloat point_light (vec3 p, vec3 n, vec3 lpos)\n{\n  vec3 ldir = normalize(lpos-p);\n  float ldist = length(lpos-p);\n  float dotNL = max(dot(n , ldir),0.);\n  return clamp((dotNL) / (0.0004 * ldist * ldist),0.,1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.y;\n  \n  vec2 uu = uv-vec2(0.,0.);\n  uv *= (1.-pulseheart(uu)*0.7);\n  \n  vec3 ro=vec3(1.2,11.,-3.+anim), \n  rd=getcam(ro,vec3(0.,4.,5.+anim),uv), \n  p=ro, \n  col=vec3(0.), \n  l=normalize(vec3(-1.,5.,-5.));\n\n  bool hit=false; \n  float shad;\n  obj O;\n\n  for(float i=0.;i<ITER;i++)\n  {\n    O = SDF(p);\n    if (O.d<0.001)\n    {\n      hit=true;shad=i/ITER;break;\n    }\n    p += O.d*rd;\n  }\n\n  float t = length(ro-p);\n  if (hit)\n  {\n    vec3 n = getnorm(p);\n    float lighting = max(dot(n,l),0.);\n    col = mix(O.shadowcol, O.lightcol, point_light(p,n,vec3(0.,3.,10.+anim))*1.5);\n  }\n  \n  col = mix(col,vec3(0.1,length(uv)*0.2,0.4),1.-exp(-0.00004*t*t));\n  col = mix(col,1.-col,pulseheart(uu));\n\n  fragColor = vec4(sqrt(clamp(col,0.,1.)),1.);\n}","name":"Image","description":"","type":"image"}]}