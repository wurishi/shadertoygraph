{"ver":"0.1","info":{"id":"WlSSWW","date":"1565816154","viewed":347,"name":"Blob-test","username":"Buddhi","description":"My first shader in ShaderToy","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["blob"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// polynomial smooth min (k = 0.1);\nfloat smin( float a, float b, float k )\n{\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min( a, b ) - h*h*k/4.0;\n}\n\nfloat dist(vec3 point)\n{\n    float d = point.y + 1.0;\n    for(float i = 1.0; i < 50.0; i++)\n    {\n        vec3 pos = vec3(sin(i*1.43+iTime*0.12), cos(i*1.13+iTime*0.345), sin(i*3.23+iTime*0.243));\n        \n\n        float sphere = (length(point - pos) - 0.001*i);\n        d = smin(sphere, d, 0.8);\n        \n    }\n    return d;\n}\n\nvec3 normal(vec3 point)\n{\n    vec3 delta = vec3(0.001, 0.0, 0.0);\n    float center = dist(point);\n    return(normalize(vec3(\n        center - dist(point - delta.xyz),\n        center - dist(point - delta.yxy),\n        center - dist(point - delta.yyx)\n        )));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime * 0.5;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.0*fragCoord - iResolution.xy)/iResolution.y;\n    \n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    vec3 camera = vec3(3.0 * sin(time), 1.5, 3.0 * cos(time));\n    vec3 target = vec3(0.1, 0.2, 0.5);\n    vec3 light = normalize(vec3(-4.0, 3.0, -4.0));   \n    \n    vec3 ww = normalize(target - camera);\n    vec3 uu = normalize(cross(ww, vec3(0.0, 1.0, 0.0)));\n    vec3 vv = normalize(cross(uu, ww));\n    \n    \n    vec3 dir = normalize(uv.x*uu + uv.y*vv + 1.8*ww);\n    \n    float scan = 0.0;\n    vec3 point;\n    int i;\n    for(i = 0; i < 100; i++)\n    {\n        point = camera + scan * dir;\n        float d = dist(point);\n        scan += d;\n        if(scan > 40.0) break;\n        if(scan < 0.01) break;\n    }\n    \n    vec3 mat = vec3(0.2, 0.4, 0.8);\n    \n    if (scan <= 20.0)\n    {\n        vec3 n = normal(point);\n        float shade = dot(n, light);\n        \n       \tvec3 halfv = normalize(light - dir);\n\t\tfloat spec = pow(max(dot(n, halfv), 0.0), 10.0);\n        \n        col = mat * shade + spec;\n    }\n    else\n    {\n        col = 0.5*vec3(1.0 - uv.y, 1.0 - 0.5*uv.y, 1.0);\n    }\n    \n    //glow\n    col += vec3(float(i)*0.007, float(i)*0.003, 0); \n    \n    //dark\n    col /= scan *0.5;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}