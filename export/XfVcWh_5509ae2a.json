{"ver":"0.1","info":{"id":"XfVcWh","date":"1731793749","viewed":47,"name":"parabola pair intersection","username":"jt","description":"Calculate intersection points of two parabolas.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["intersection","geometry","parabola","pair"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/XfVcWh parabola pair intersection, 2024 by jt\n\n// Calculate intersection points of two parabolas.\n\n// So much easier than parabola circle intersection\n// https://www.shadertoy.com/view/7lVfD1 Parabola Circle Intersection 2\n\n// tags: parabola, pair, intersection, geometry\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n//#define POINTSIZE 0.01\n#define POINTSIZE (3.0/R.y) // resolution-independent\n#define draw_point(q) o *= smoothstep(0.0, POINTSIZE, abs(q))\n#define draw_circle(r, I) draw_point(length(I) - r)\n#define draw_quadratic(A, B, C, I) draw_point(draw_quadratic_helper(A, B, C, I))\n\nfloat parabola(float A, float B, float C, float x)\n{\n    return A*x*x+B*x+C;\n}\n\nfloat parabola_derivative(float A, float B, float x) // NOTE: C disappears due by derivative\n{\n    return 2.0*A*x+B;\n}\n\nfloat draw_quadratic_helper(float A, float B, float C, vec2 I)\n{\n    return (parabola(A, B, C, I.x)-I.y)/length(vec2(parabola_derivative(A, B, I.x),-1.0)); // divide by length of the gradient to get a constant width line - thanks, mla!\n}\n\nmat2 parabola_intersection(vec3 p0, vec3 p1) // https://www.shadertoy.com/view/XfVcWh parabola pair intersection (jt)\n{\n    if(p0 == p1) return mat2(0.0/0.0); // TODO: better way to signal infinite intersection?\n\n    vec3 p = p1-p0;\n    float q = p.y*p.y-4.0*p.x*p.z;\n    if(q >= 0.0) // two (or one) intersection points\n    {\n        vec2 x = (-p.y + vec2(+1,-1)*sqrt(q))/(2.0*p.x);\n        vec2 y = p0.x*x*x+p0.y*x+p0.z;\n        return transpose(mat2(x,y));\n    }\n\n    return mat2(0.0/0.0); // TODO: better way to signal no intersection?\n}\n\nvoid mainImage(out vec4 o, vec2 I)\n{\n    vec2 m = iMouse.xy;\n    bool demo = length(m) < 10.0;\n    vec2 R = iResolution.xy;\n    I = (I+I-R)/R.y;\n    m = (m+m-R)/R.y;\n\n    o = vec4(1);\n\n    //vec3 p0 = vec3(+2.0,-0.2,-0.8);\n    vec3 p0 = vec3(+2.0,0.2*sin(iTime/2.0),-0.8);\n    draw_quadratic(p0.x,p0.y,p0.z, I);\n\n    //vec3 p1 = vec3(-0.5,+0.2,+0.5);\n    vec3 p1 = vec3(-0.5+0.2*sin(iTime/3.0),+0.2,+0.5);\n    draw_quadratic(p1.x,p1.y,p1.z, I);\n\n    mat2 i = parabola_intersection(p0, p1);\n/*\n    draw_point(I.x-i[0].x);\n    draw_point(I.y-i[0].y);\n    draw_point(I.x-i[1].x);\n    draw_point(I.y-i[1].y);\n*/\n    draw_circle(0.01,I-i[0]);\n    draw_circle(0.01,I-i[1]);\n}\n","name":"Image","description":"","type":"image"}]}