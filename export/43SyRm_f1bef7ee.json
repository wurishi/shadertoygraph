{"ver":"0.1","info":{"id":"43SyRm","date":"1727083041","viewed":31,"name":"两只老虎声音版","username":"xidain","description":"两只老虎","likes":1,"published":1,"flags":8,"usePreview":0,"tags":["gpusound"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// 音符对应的频率映射表 (以C调为基础)\nfloat getNoteFrequency(int note) {\n    // 简谱音符 1-7 对应 C4-B4\n    int notes[7] = int[](261, 293, 329, 349, 392, 440, 493); // C4=261Hz\n    if (note > 0) {\n        return float(notes[note - 1]);\n    }\n    return 0.0; // 休止符\n}\n// 包络函数，用于控制音符的音量变化\nfloat envelope(float time, float duration) {\n    float attack = 0.01;  // 渐入时间\n    float release = 0.05; // 渐出时间\n    if (time < attack) {\n        return time / attack; // 渐入部分\n    } else if (time > duration - release) {\n        return (duration - time) / release; // 渐出部分\n    } else {\n        return 1.0; // 持续部分\n    }\n}\n// 生成音符的声音\nfloat generateSound(float time, float freq) {\n    return sin(2.0 * 3.14159265359 * freq * time);\n}\n// 《两只老虎》的简谱与时长\nfloat playMelody(float time, out float duration) {\n    // 简谱中的音符 (0 表示休止符)\n    int melody[48] = int[](1, 2, 3, 1, 1, 2, 3, 1, 3, 4, 5, 0, 3, 4, 5, 0,\n                           5, 6, 5, 4, 3, 1, 0, 0, 5, 6, 5, 4, 3, 1, 0, 0,\n                           2, 5, 1, 0, 2, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    // 每个音符的持续时间 (0.5 表示八分音符)\n    float durations[40] = float[](0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,\n                                  0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,\n                                  0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,\n                                  0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,\n                                  0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5);\n    // 计算当前时间在简谱中的位置\n    float currentTime = mod(time, 20.0); // 20 秒为一个周期\n    float cumulativeTime = 0.0;\n    for (int i = 0; i < 48; i++) {\n        if (currentTime < cumulativeTime + durations[i]) {\n            duration = durations[i];\n            return getNoteFrequency(melody[i]); // 返回当前音符的频率\n        }\n        cumulativeTime += durations[i];\n    }\n    duration = 0.0;\n    return 0.0;\n}\n// 主声音生成函数\nvec2 mainSound(int samp, float time) {\n    vec2 sound = vec2(0.0);\n    // 获取当前音符的频率和持续时间\n    float duration;\n    float frequency = playMelody(time, duration);\n    // 当前音符播放的时间\n    float currentTimeInNote = mod(time, duration);\n    // 包络控制，调节音量渐入渐出\n    float env = envelope(currentTimeInNote, duration);\n    // 生成左右声道声音\n    float leftSound = env * generateSound(time, frequency);\n    float rightSound = env * generateSound(time + 0.02, frequency); // 右声道稍微延迟以制造立体声效果\n    sound = vec2(leftSound, rightSound);\n    return sound * 0.2; // 调整音量\n}\n","name":"Sound","description":"","type":"sound"}]}