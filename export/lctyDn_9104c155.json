{"ver":"0.1","info":{"id":"lctyDn","date":"1730571529","viewed":84,"name":"Worley Noise - 3D SDFs","username":"Ponjee","description":"Ray marching cone SDFs to make Worley noise, use smooth union to smooth it out.","likes":3,"published":1,"flags":16,"usePreview":0,"tags":["3d","raymarching","sdf","distance"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ShaderToy fragment shader\n\n#define PI 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481\n#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define MIN_DIST 0.0005\n\n#define ALBEDO_MODE false\n#define CHECKER_MODE true\n\nconst float ambient_strength = 0.05;\nconst float specular_strength = 0.5;\nconst float shininess = 64.0;\n\nvec3 lightpos = normalize(vec3( 1.,1.,0. ));\nvec3 lightcol = vec3( 1.0 );\nfloat lightpow = 3.0;\nfloat illumination_attenuation_amount = -0.2;\nvec3 iCameraPos = vec3( 0.0 );\nvec3 iCameraRot = vec3( 0.0 );\n\n// extended to 5 cells across instead of 3.\nfloat sdVoronoi(vec3 p, float a, float s) {\n    \n    p.y += a/2.0;\n    \n    float d = 1000.0;\n    \n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 ccp = p.xz + vec2(float(i),float(j));\n        vec4 cc = texelFetch(iChannel0, ivec2(ccp.xy+100.0), 0);\n        vec2 pp = floor(ccp) + cc.rg;\n        float pd = sdCone(-p + vec3(pp.x,a,pp.y) , vec2(1.0/a,1.0), abs(p.y)+a );\n        d = opSmoothUnion(d, pd, s);\n    }\n    \n    return -d;//max(-d,sdBox(p,vec3(2.5,abs(p.y),2.5)));\n}\n\n// Map function to find the distance to the nearest light object\nvec4 mapLight( vec3 p ) {\n    return vec4( length(p-lightpos) - 0.2, lightcol );\n}\n\n// Map function to find the distance to the nearest object\nvec4 map( vec3 p ) {\n    float height = -cos(iTime)*0.5+1.5;\n    float smoothness = -cos(iTime)*0.5+0.5;\n    vec4 d = vec4( sdVoronoi(p,height,smoothness) , vec3(0.5) );\n    return opUnionColor( d , mapLight(p) );\n}\n\n// turns rgb colors to a grayscale tone by a factor of k\nvec3 rgb2gray( in vec3 rgb, float k ) {\n    return mix( rgb, vec3(rgb.r*0.299 + rgb.g*0.587 + rgb.b*0.144), k );\n}\n\nvec3 hue2rgb( in float h ) {\n    return vec3(\n    clamp(2.0-h,0.0,1.0)+clamp(h-4.0,0.0,1.0), \n    clamp(h,0.0,1.0)-clamp(h-3.0,0.0,1.0), \n    clamp(h-2.0,0.0,1.0)-clamp(h-5.0,0.0,1.0)\n    );\n}\n\n// 3D checker pattern for texturing\nbool checker3D( vec3 p, vec3 gs, ivec3 tog) {\n    if(tog.x == 0) { p.x = gs.x/2.0; }\n    if(tog.y == 0) { p.y = gs.y/2.0; }\n    if(tog.z == 0) { p.z = gs.z/2.0; }\n    float x = round(mod(p.x/gs.x,1.0));\n    float y = round(mod(p.y/gs.y,1.0));\n    float z = round(mod(p.z/gs.z,1.0));\n    return bool(abs(abs(x-y)-z));\n}\n\n// Calculates the normal by taking a very small distance\n// remapping the function\nvec3 calcNormal(in vec3 pos) {\n    vec3 eps = vec3(0.001,0.0,0.0);\n    vec3 nor = vec3(\n        map(pos + eps.xyy).x - map(pos - eps.xyy).x, \n        map(pos + eps.yxy).x - map(pos - eps.yxy).x, \n        map(pos + eps.yyx).x - map(pos - eps.yyx).x\n    );\n    return normalize(nor);\n}\n\n// ambient, diffuse, and specular are from LearnOpenGL: https://learnopengl.com/Lighting/Basic-Lighting\nfloat ambient( vec3 lightcol, vec3 lightpos ) {\n    return ambient_strength;\n}\nfloat diffuse( vec3 p, vec3 normal, vec3 lightcol, vec3 lightpos ) {\n    vec3 lightdir = normalize(lightpos - p);\n    float diff = max(dot(normal, lightdir),0.0);\n    return diff;\n}\nfloat specular( vec3 p, vec3 normal, vec3 lightcol, vec3 lightpos ) {\n    vec3 lightdir = normalize(lightpos - p);\n    vec3 reflectDir = reflect(-lightdir, normal);\n    float spec = pow(max(dot(normalize(iCameraPos - p), reflectDir), 0.0), shininess);\n    return specular_strength * spec;  \n}\n\n// basically just the distance from p on geometry surface to light source\nfloat illumination( vec3 p, vec3 lightcol, vec3 lightpos ) {\n    float dst = length(p-lightpos);\n    return lightpow * pow((1.0 + illumination_attenuation_amount), dst);\n}\n\nvec3 getLightingOne( vec3 p, vec3 normal, vec3 surfcol, vec3 lightcol, vec3 lightpos ) {\n    // phong lighting\n    float amb = ambient( lightcol, lightpos );\n    float diff = diffuse( p, normal, lightcol, lightpos );\n    float spec = specular( p, normal, lightcol, lightpos );\n    // custom lighting addition\n    float illu = illumination( p, lightcol, lightpos );\n    \n    return mix(vec3(amb + diff + spec) * illu * lightcol * surfcol, lightcol, spec);//(amb + diff + spec) * illu * lightcol * surfcol;\n}\n\nvec3 getLighting( vec3 p, vec3 normal, vec3 surfcol ) {\n    vec3 l = getLightingOne( p, normal, surfcol, lightcol, lightpos );\n    \n    return l;\n}\n\n// Ray marching function\nvec4 rayMarch(vec3 ro, vec3 rd) {\n    float totalDist = 0.0;\n    vec4 d;\n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + totalDist * rd;\n        d = map(p);\n        if (d.x < MIN_DIST) return vec4(totalDist,d.yzw); // Increased threshold to ensure visibility\n        totalDist += d.x;\n        if (totalDist > MAX_DIST) break;\n    }\n    return vec4(totalDist, d.yzw);\n}\n\n// Main function\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float t = iTime;\n    \n    lightpos = applyRotation( lightpos, vec3(0.0,1.43*t,0.0) )*5.0;// * (cos(t)*0.5+2.5) * 2.0;\n    \n    // Detect if left mouse button is down\n    bool mouseDown = (iMouse.z < 2.0 ? false : true);\n    // Control variables for camera\n    float speed = 0.2;\n    float time = iTime * speed;\n    // Camera distance from (0,0,0) on xz plane\n    float camDist = 5.0;\n    \n    float y = (mouseDown ? iMouse.y / 50.0 : 3.5);\n    float r = (mouseDown ? iMouse.x / 100.0 : time);\n    iCameraPos = vec3(cos(r) * camDist, y, sin(r) * camDist);\n    iCameraRot = vec3(-0.5, r-PI*1.5, 0.0);\n    \n    \n    // Other display variables\n    float FOV = 0.9; // exponential change?\n    vec2 displaySize = iResolution.xy;\n\n\n    vec2 uv = (fragCoord / displaySize) * 2.0 - 1.0; // Normalized coordinates\n    uv.x *= displaySize.x / displaySize.y; // Aspect ratio correction\n    \n    vec3 ro = iCameraPos; // Camera position\n    vec3 rd = normalize(vec3(uv*FOV,1.0));\n    \n    // Apply camera rotation\n    rd = applyRotation(rd, iCameraRot);\n    \n    // Perform ray marching\n    vec4 dist = rayMarch(ro, rd);\n    vec3 p = ro + rd * dist.x;\n    //vec4 d_geom = mapGeom(p);\n    vec4 d_light = mapLight(p);\n    vec3 normal = calcNormal(p);\n    \n    // surface coloring\n    vec3 checker = checker3D( p, vec3(0.5,0.5,0.5), ivec3(1,1,1) ) ? vec3(1.25) : vec3(1.0) ;\n    vec3 surfcol = ( ALBEDO_MODE ? dist.yzw : mix(normal,vec3(0.25),0.85) ) * ( CHECKER_MODE ? checker : vec3(1.0) );\n    \n    bool hit = (dist.x < MAX_DIST ? true : false);\n    \n    // Light coloring\n    vec4 color;\n    if (d_light.x < MIN_DIST) { \n        color = vec4( d_light.yzw, 1.0 );\n    } else {\n        color = vec4( getLighting(p, normal, surfcol) , 1.0 );\n    }\n    \n    color = (hit ? color : vec4(0.0));\n    if(fragCoord.x > displaySize.x || fragCoord.y > displaySize.y) { color = vec4(1.,0.,1.,1.); }\n    \n    fragColor = color;\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Rotation matrices\nmat3 rotateX(float angle) {\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat3(\n        1.0,  0.0,  0.0,\n        0.0,  c,    -s,\n        0.0,  s,    c\n    );\n}\nmat3 rotateY(float angle) {\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat3(\n        c,   0.0,  s,\n        0.0, 1.0,  0.0,\n        -s,  0.0,  c\n    );\n}\nmat3 rotateZ(float angle) {\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat3(\n        c,   -s,  0.0,\n        s,    c,  0.0,\n        0.0,  0.0, 1.0\n    );\n}\n// Apply rotation to the ray direction\nvec3 applyRotation(vec3 p, vec3 eulerAngles) {\n    mat3 rotX = rotateX(eulerAngles.x);\n    mat3 rotY = rotateY(eulerAngles.y);\n    mat3 rotZ = rotateZ(eulerAngles.z);\n    return rotZ * rotY * rotX * p;\n}\n\nvec2 opRevolution( in vec3 p, float w )\n{\n    return vec2( length(p.xz) - w, p.y );\n}\n\n\nfloat opExtrusion( in vec3 p, in float sdf, in float h )\n{\n    vec2 w = vec2( sdf, abs(p.z) - h );\n  \treturn min(max(w.x,w.y),0.0) + length(max(w,0.0));\n}\n\nvec4 opElongate( in vec3 p, in vec3 h )\n{\n    //return vec4( p-clamp(p,-h,h), 0.0 ); // faster, but produces zero in the interior elongated box\n    \n    vec3 q = abs(p)-h;\n    return vec4( max(q,0.0), min(max(q.x,max(q.y,q.z)),0.0) );\n}\n\nfloat length2( vec3 p ) { p=p*p; return sqrt( p.x+p.y+p.z); }\n\nfloat length6( vec3 p ) { p=p*p*p; p=p*p; return pow(p.x+p.y+p.z,1.0/6.0); }\n\nfloat length8( vec3 p ) { p=p*p; p=p*p; p=p*p; return pow(p.x+p.y+p.z,1.0/8.0); }\n\nfloat opRound( in float d, in float r )\n{\n  return d - r;\n}\nfloat opOnion( in float d, in float r )\n{\n  return abs(d) - r;\n}\n\n//--- Booleans -----------------------------------------------------------------------------------------------------------\nfloat opUnion( float d1, float d2 )\n{\n    return min(d1,d2);\n}\nfloat opSubtraction( float d1, float d2 )\n{\n    return max(-d1,d2);\n}\nfloat opIntersection( float d1, float d2 )\n{\n    return max(d1,d2);\n}\nfloat opXor(float d1, float d2 )\n{\n    return max(min(d1,d2),-max(d1,d2));\n}\n\nfloat opSmoothUnion( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\nfloat opSmoothSubtraction( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h);\n}\nfloat opSmoothIntersection( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) + k*h*(1.0-h);\n}\n\n//--- Booleans with Color ------------------------------------------------------------------------------------------------\nvec4 opUnionColor( vec4 a, vec4 b )\n{\n    return ( a.x<b.x ? a : b );\n}\nvec4 opSubtractionColor( vec4 a, vec4 b )\n{\n    return ( -a.x>b.x ? vec4(-a.x,b.yzw) : b );\n}\nvec4 opIntersectionColor( vec4 a, vec4 b )\n{\n    return ( a.x>b.x ? vec4(a.x,b.yzw) : vec4(b.x,a.yzw) );\n}\nvec4 opXorColor( vec4 a, vec4 b )\n{\n    vec4 m = ( a.x<b.x ? a : b );\n    vec4 M = ( a.x>b.x ? vec4(a.x,b.yzw) : vec4(b.x,a.yzw) );\n    return ( m.x>-M.x ? m : vec4(-M.x,M.yzw) );\n}\n\nvec4 opSmoothUnionColor( vec4 a, vec4 b, float k )\n{\n    float h = clamp( 0.5 - 0.5*(b.x-a.x)/k, 0.0, 1.0 );\n    return vec4( mix(a.x,b.x,h) - k*h*(1.0-h), mix(a.yzw,b.yzw,h));\n}\nvec4 opSmoothSubtractionColor( vec4 b, vec4 a, float k )\n{\n\tfloat h = clamp( 0.5 + 0.5*(-b.x-a.x)/-k, 0.0, 1.0 );\n\treturn vec4( mix( -b.x, a.x, h ) - -k*h*(1.0-h), mix(b.yzw,a.yzw,h) );\n}\nvec4 opSmoothIntersectionColor( vec4 a, vec4 b, float k )\n{\n    float h = clamp( 0.5 - 0.5*(b.x-a.x)/k, 0.0, 1.0 );\n    return vec4( mix(a.x,b.x,h) - k*h*(1.0-h), mix(a.yzw,b.yzw,h));\n}\n\n//  Shapes  //////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\n//Sphere - exact   (https://www.shadertoy.com/view/Xds3zN)\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\n\n//Box - exact   (Youtube Tutorial with derivation: https://www.youtube.com/watch?v=62-pRVZuS5c)\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n\n//Round Box - exact\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b + r;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\n\n//Box Frame - exact   (https://www.shadertoy.com/view/3ljcRh)\n\nfloat sdBoxFrame( vec3 p, vec3 b, float e )\n{\n       p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\n\n//Torus - exact\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\n\n//Capped Torus - exact   (https://www.shadertoy.com/view/tl23RK)\n\nfloat sdCappedTorus( vec3 p, vec2 sc, float ra, float rb)\n{\n  p.x = abs(p.x);\n  float k = (sc.y*p.x>sc.x*p.y) ? dot(p.xy,sc) : length(p.xy);\n  return sqrt( dot(p,p) + ra*ra - 2.0*ra*k ) - rb;\n}\n\n\n//Link - exact   (https://www.shadertoy.com/view/wlXSD7)\n\nfloat sdLink( vec3 p, float le, float r1, float r2 )\n{\n  vec3 q = vec3( p.x, max(abs(p.y)-le,0.0), p.z );\n  return length(vec2(length(q.xy)-r1,q.z)) - r2;\n}\n\n\n//Infinite Cylinder - exact\n\nfloat sdCylinder( vec3 p, vec3 c )\n{\n  return length(p.xz-c.xy)-c.z;\n}\n\n\n//Cone - exact\n\nfloat sdCone( vec3 p, vec2 c, float h )\n{\n  // c is the sin/cos of the angle, h is height\n  // Alternatively pass q instead of (c,h),\n  // which is the point at the base in 2D\n  vec2 q = h*vec2(c.x/c.y,-1.0);\n    \n  vec2 w = vec2( length(p.xz), p.y );\n  vec2 a = w - q*clamp( dot(w,q)/dot(q,q), 0.0, 1.0 );\n  vec2 b = w - q*vec2( clamp( w.x/q.x, 0.0, 1.0 ), 1.0 );\n  float k = sign( q.y );\n  float d = min(dot( a, a ),dot(b, b));\n  float s = max( k*(w.x*q.y-w.y*q.x),k*(w.y-q.y)  );\n  return sqrt(d)*sign(s);\n}\n\n\n//Cone - bound (not exact!)\n\nfloat sdConeBound( vec3 p, vec2 c, float h )\n{\n  float q = length(p.xz);\n  return max(dot(c.xy,vec2(q,p.y)),-h-p.y);\n}\n\n\n//Infinite Cone - exact\n\nfloat sdConeInfinite( vec3 p, vec2 c )\n{\n    // c is the sin/cos of the angle\n    vec2 q = vec2( length(p.xz), -p.y );\n    float d = length(q-c*max(dot(q,c), 0.0));\n    return d * ((q.x*c.y-q.y*c.x<0.0)?-1.0:1.0);\n}\n\n\n//Plane - exact\n\nfloat sdPlane( vec3 p, vec3 n, float h )\n{\n  // n must be normalized\n  return dot(p,n) + h;\n}\n\n\n//Hexagonal Prism - exact\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n  const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n  p = abs(p);\n  p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\n  vec2 d = vec2(\n       length(p.xy-vec2(clamp(p.x,-k.z*h.x,k.z*h.x), h.x))*sign(p.y-h.x),\n       p.z-h.y );\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\n//Triangular Prism - bound\n\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n  vec3 q = abs(p);\n  return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n\n\n//Capsule / Line - exact\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\n\n//Capsule / Line - exact\n\nfloat sdVerticalCapsule( vec3 p, float h, float r )\n{\n  p.y -= clamp( p.y, 0.0, h );\n  return length( p ) - r;\n}\n\n\n//Vertical Capped Cylinder - exact   (https://www.shadertoy.com/view/wdXGDr)\n\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(r,h);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\n//Arbitrary Capped Cylinder - exact   (https://www.shadertoy.com/view/wdXGDr)\n\nfloat sdCappedCylinder( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3  ba = b - a;\n  vec3  pa = p - a;\n  float baba = dot(ba,ba);\n  float paba = dot(pa,ba);\n  float x = length(pa*baba-ba*paba) - r*baba;\n  float y = abs(paba-baba*0.5)-baba*0.5;\n  float x2 = x*x;\n  float y2 = y*y*baba;\n  float d = (max(x,y)<0.0)?-min(x2,y2):(((x>0.0)?x2:0.0)+((y>0.0)?y2:0.0));\n  return sign(d)*sqrt(abs(d))/baba;\n}\n\n\n//Rounded Cylinder - exact\n\nfloat sdRoundedCylinder( vec3 p, float ra, float rb, float h )\n{\n  vec2 d = vec2( length(p.xz)-2.0*ra+rb, abs(p.y) - h );\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rb;\n}\n\n\n//Capped Cone - exact\n\nfloat sdCappedCone( vec3 p, float h, float r1, float r2 )\n{\n  vec2 q = vec2( length(p.xz), p.y );\n  vec2 k1 = vec2(r2,h);\n  vec2 k2 = vec2(r2-r1,2.0*h);\n  vec2 ca = vec2(q.x-min(q.x,(q.y<0.0)?r1:r2), abs(q.y)-h);\n  vec2 cb = q - k1 + k2*clamp( dot(k1-q,k2)/dot2(k2), 0.0, 1.0 );\n  float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;\n  return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\n\n//Capped Cone - exact   (https://www.shadertoy.com/view/tsSXzK)\n\nfloat sdCappedCone( vec3 p, vec3 a, vec3 b, float ra, float rb )\n{\n  float rba  = rb-ra;\n  float baba = dot(b-a,b-a);\n  float papa = dot(p-a,p-a);\n  float paba = dot(p-a,b-a)/baba;\n  float x = sqrt( papa - paba*paba*baba );\n  float cax = max(0.0,x-((paba<0.5)?ra:rb));\n  float cay = abs(paba-0.5)-0.5;\n  float k = rba*rba + baba;\n  float f = clamp( (rba*(x-ra)+paba*baba)/k, 0.0, 1.0 );\n  float cbx = x-ra - f*rba;\n  float cby = paba - f;\n  float s = (cbx<0.0 && cay<0.0) ? -1.0 : 1.0;\n  return s*sqrt( min(cax*cax + cay*cay*baba,\n                     cbx*cbx + cby*cby*baba) );\n}\n\n\n//Solid Angle - exact   (https://www.shadertoy.com/view/wtjSDW)\n\nfloat sdSolidAngle( vec3 p, vec2 c, float ra )\n{\n  // c is the sin/cos of the angle\n  vec2 q = vec2( length(p.xz), p.y );\n  float l = length(q) - ra;\n  float m = length(q - c*clamp(dot(q,c),0.0,ra) );\n  return max(l,m*sign(c.y*q.x-c.x*q.y));\n}\n\n\n//Cut Sphere - exact   (https://www.shadertoy.com/view/stKSzc)\n\nfloat sdCutSphere( vec3 p, float r, float h )\n{\n  // sampling independent computations (only depend on shape)\n  float w = sqrt(r*r-h*h);\n\n  // sampling dependant computations\n  vec2 q = vec2( length(p.xz), p.y );\n  float s = max( (h-r)*q.x*q.x+w*w*(h+r-2.0*q.y), h*q.x-w*q.y );\n  return (s<0.0) ? length(q)-r :\n         (q.x<w) ? h - q.y     :\n                   length(q-vec2(w,h));\n}\n\n\n//Cut Hollow Sphere - exact   (https://www.shadertoy.com/view/7tVXRt)\n\nfloat sdCutHollowSphere( vec3 p, float r, float h, float t )\n{\n  // sampling independent computations (only depend on shape)\n  float w = sqrt(r*r-h*h);\n  \n  // sampling dependant computations\n  vec2 q = vec2( length(p.xz), p.y );\n  return ((h*q.x<w*q.y) ? length(q-vec2(w,h)) : \n                          abs(length(q)-r) ) - t;\n}\n\n\n//Death Star - exact   (https://www.shadertoy.com/view/7lVXRt)\n\nfloat sdDeathStar( vec3 p2, float ra, float rb, float d )\n{\n  // sampling independent computations (only depend on shape)\n  float a = (ra*ra - rb*rb + d*d)/(2.0*d);\n  float b = sqrt(max(ra*ra-a*a,0.0));\n\t\n  // sampling dependant computations\n  vec2 p = vec2( p2.x, length(p2.yz) );\n  if( p.x*b-p.y*a > d*max(b-p.y,0.0) )\n    return length(p-vec2(a,b));\n  else\n    return max( (length(p            )-ra),\n               -(length(p-vec2(d,0.0))-rb));\n}\n\n\n//Round cone - exact\n\nfloat sdRoundCone( vec3 p, float r1, float r2, float h )\n{\n  // sampling independent computations (only depend on shape)\n  float b = (r1-r2)/h;\n  float a = sqrt(1.0-b*b);\n\n  // sampling dependant computations\n  vec2 q = vec2( length(p.xz), p.y );\n  float k = dot(q,vec2(-b,a));\n  if( k<0.0 ) return length(q) - r1;\n  if( k>a*h ) return length(q-vec2(0.0,h)) - r2;\n  return dot(q, vec2(a,b) ) - r1;\n}\n\n\n//Round Cone - exact   (https://www.shadertoy.com/view/tdXGWr)\n\nfloat sdRoundCone( vec3 p, vec3 a, vec3 b, float r1, float r2 )\n{\n  // sampling independent computations (only depend on shape)\n  vec3  ba = b - a;\n  float l2 = dot(ba,ba);\n  float rr = r1 - r2;\n  float a2 = l2 - rr*rr;\n  float il2 = 1.0/l2;\n    \n  // sampling dependant computations\n  vec3 pa = p - a;\n  float y = dot(pa,ba);\n  float z = y - l2;\n  float x2 = dot2( pa*l2 - ba*y );\n  float y2 = y*y*l2;\n  float z2 = z*z*l2;\n\n  // single square root!\n  float k = sign(rr)*rr*rr*x2;\n  if( sign(z)*a2*z2>k ) return  sqrt(x2 + z2)        *il2 - r2;\n  if( sign(y)*a2*y2<k ) return  sqrt(x2 + y2)        *il2 - r1;\n                        return (sqrt(x2*a2*il2)+y*rr)*il2 - r1;\n}\n\n\n//Ellipsoid - bound (not exact!)   (https://www.shadertoy.com/view/tdS3DG)\n\nfloat sdEllipsoid( vec3 p, vec3 r )\n{\n  float k0 = length(p/r);\n  float k1 = length(p/(r*r));\n  return k0*(k0-1.0)/k1;\n}\n\n\n//Revolved Vesica - exact)   (https://www.shadertoy.com/view/Ds2czG)\n\nfloat sdVesicaSegment( in vec3 p, in vec3 a, in vec3 b, in float w )\n{\n    vec3  c = (a+b)*0.5;\n    float l = length(b-a);\n    vec3  v = (b-a)/l;\n    float y = dot(p-c,v);\n    vec2  q = vec2(length(p-c-y*v),abs(y));\n    \n    float r = 0.5*l;\n    float d = 0.5*(r*r-w*w)/w;\n    vec3  h = (r*q.x<d*(q.y-r)) ? vec3(0.0,r,0.0) : vec3(-d,0.0,d+w);\n \n    return length(q-h.xy) - h.z;\n}\n\n\n//Rhombus - exact   (https://www.shadertoy.com/view/tlVGDc)\n\nfloat sdRhombus( vec3 p, float la, float lb, float h, float ra )\n{\n  p = abs(p);\n  vec2 b = vec2(la,lb);\n  float f = clamp( (ndot(b,b-2.0*p.xz))/dot(b,b), -1.0, 1.0 );\n  vec2 q = vec2(length(p.xz-0.5*b*vec2(1.0-f,1.0+f))*sign(p.x*b.y+p.z*b.x-b.x*b.y)-ra, p.y-h);\n  return min(max(q.x,q.y),0.0) + length(max(q,0.0));\n}\n\n\n//Octahedron - exact   (https://www.shadertoy.com/view/wsSGDG)\n\nfloat sdOctahedron( vec3 p, float s )\n{\n  p = abs(p);\n  float m = p.x+p.y+p.z-s;\n  vec3 q;\n       if( 3.0*p.x < m ) q = p.xyz;\n  else if( 3.0*p.y < m ) q = p.yzx;\n  else if( 3.0*p.z < m ) q = p.zxy;\n  else return m*0.57735027;\n    \n  float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n  return length(vec3(q.x,q.y-s+k,q.z-k)); \n}\n\n\n//Octahedron - bound (not exact)\n\nfloat sdOctahedronBound( vec3 p, float s)\n{\n  p = abs(p);\n  return (p.x+p.y+p.z-s)*0.57735027;\n}\n\n\n//Pyramid - exact   (https://www.shadertoy.com/view/Ws3SDl)\n\nfloat sdPyramid( vec3 p, float h )\n{\n  float m2 = h*h + 0.25;\n    \n  p.xz = abs(p.xz);\n  p.xz = (p.z>p.x) ? p.zx : p.xz;\n  p.xz -= 0.5;\n\n  vec3 q = vec3( p.z, h*p.y - 0.5*p.x, h*p.x + 0.5*p.y);\n   \n  float s = max(-q.x,0.0);\n  float t = clamp( (q.y-0.5*p.z)/(m2+0.25), 0.0, 1.0 );\n    \n  float a = m2*(q.x+s)*(q.x+s) + q.y*q.y;\n  float b = m2*(q.x+0.5*t)*(q.x+0.5*t) + (q.y-m2*t)*(q.y-m2*t);\n    \n  float d2 = min(q.y,-q.x*m2-q.y*0.5) > 0.0 ? 0.0 : min(a,b);\n    \n  return sqrt( (d2+q.z*q.z)/m2 ) * sign(max(q.z,-p.y));\n}\n\n\n//Triangle - exact   (https://www.shadertoy.com/view/4sXXRN)\n\nfloat udTriangle( vec3 p, vec3 a, vec3 b, vec3 c )\n{\n  vec3 ba = b - a; vec3 pa = p - a;\n  vec3 cb = c - b; vec3 pb = p - b;\n  vec3 ac = a - c; vec3 pc = p - c;\n  vec3 nor = cross( ba, ac );\n\n  return sqrt(\n    (sign(dot(cross(ba,nor),pa)) +\n     sign(dot(cross(cb,nor),pb)) +\n     sign(dot(cross(ac,nor),pc))<2.0)\n     ?\n     min( min(\n     dot2(ba*clamp(dot(ba,pa)/dot2(ba),0.0,1.0)-pa),\n     dot2(cb*clamp(dot(cb,pb)/dot2(cb),0.0,1.0)-pb) ),\n     dot2(ac*clamp(dot(ac,pc)/dot2(ac),0.0,1.0)-pc) )\n     :\n     dot(nor,pa)*dot(nor,pa)/dot2(nor) );\n}\n\n\n//Quad - exact   (https://www.shadertoy.com/view/Md2BWW)\n\nfloat udQuad( vec3 p, vec3 a, vec3 b, vec3 c, vec3 d )\n{\n  vec3 ba = b - a; vec3 pa = p - a;\n  vec3 cb = c - b; vec3 pb = p - b;\n  vec3 dc = d - c; vec3 pc = p - c;\n  vec3 ad = a - d; vec3 pd = p - d;\n  vec3 nor = cross( ba, ad );\n\n  return sqrt(\n    (sign(dot(cross(ba,nor),pa)) +\n     sign(dot(cross(cb,nor),pb)) +\n     sign(dot(cross(dc,nor),pc)) +\n     sign(dot(cross(ad,nor),pd))<3.0)\n     ?\n     min( min( min(\n     dot2(ba*clamp(dot(ba,pa)/dot2(ba),0.0,1.0)-pa),\n     dot2(cb*clamp(dot(cb,pb)/dot2(cb),0.0,1.0)-pb) ),\n     dot2(dc*clamp(dot(dc,pc)/dot2(dc),0.0,1.0)-pc) ),\n     dot2(ad*clamp(dot(ad,pd)/dot2(ad),0.0,1.0)-pd) )\n     :\n     dot(nor,pa)*dot(nor,pa)/dot2(nor) );\n}","name":"Common","description":"","type":"common"}]}