{"ver":"0.1","info":{"id":"3sXyRs","date":"1585321687","viewed":94,"name":"Julia set Animation","username":"NdMaloxit","description":"my first shared","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","julia","animation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ITER_COUNT 100\n#define ITER_SQR_SIZE 9.\n#define JUL_ANIMATE\n#define CENTER_X 0.\n#define CENTER_Y 0.\n#define COLOR_MAX 16\n//#define COLOR_BW\n#define COLOR_DIV\nvec2 Transform(vec2 p, vec2 from_point1, vec2 from_point2, vec2 to_point1, vec2 to_point2) {\n  return vec2((p.x - from_point1.x)* (to_point2.x - to_point1.x) / (from_point2.x - from_point1.x) + to_point1.x, (p.y - from_point1.y)* (to_point2.y - to_point1.y) / (from_point2.y - from_point1.y) + to_point1.y);\n}\n\nbool IsInsideDisk(vec2 p, vec2 center, float sqrRadius) {\n  vec2 delta = p - center;\n  return (delta.x*delta.x + delta.y*delta.y) < sqrRadius;\n}\n\nint JuliaInerationCount(vec2 p, vec2 c) {\n  int i;\n  vec2 iterPoint = p;\n  vec2 calcPoint;\n  for (i = 0; i < ITER_COUNT && IsInsideDisk(iterPoint, p, ITER_SQR_SIZE); i++) {\n    calcPoint.x = iterPoint.x * iterPoint.x - iterPoint.y * iterPoint.y + c.x;\n    calcPoint.y = 2. * iterPoint.x * iterPoint.y + c.y;\n    iterPoint = calcPoint;\n  }\n  return (ITER_COUNT - i);\n}\nfloat sampleMusicA() {\n\treturn 0.5 * (\n\t\ttexture( iChannel0, vec2( 0.15, 0.25 ) ).x + \n\t\ttexture( iChannel0, vec2( 0.30, 0.25 ) ).x);\n}\nvec3 s_palette[COLOR_MAX] = vec3[COLOR_MAX](\n    vec3(0., 1., 0.),\n    vec3(1., 1., 1.),\n    vec3(0., 0., 1.),\n    vec3(1., 0.7, 0.),\n    vec3(0., 1., 0.),\n    vec3(0., 1., 1.),\n    vec3(0.3, 0.3, 1.), \n    vec3(1., 0.7, 0.), \n    vec3(0., 1., 0.), \n    vec3(1., 1., 1.), \n    vec3(0., 0., 1.), \n    vec3(1., 0.7, 0.), \n    vec3(0., 1., 0.), \n    vec3(1., 1., 1.), \n    vec3(0., 0., 1.), \n    vec3(0.3, 0.2, 0.9)\n);\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec3 f_color;\n    int iter, k;\n    float t, a;\n    float screenScale = min(iResolution.x,iResolution.y);\n    vec2 screen_point1 = vec2(iResolution.x/2. - screenScale/2., iResolution.y/2. - screenScale/2.);\n    vec2 screen_point2 = vec2(iResolution.x/2. + screenScale/2., iResolution.y/2. + screenScale/2.);\n    vec2 math_center = vec2(CENTER_X, CENTER_Y);\n    float scale = 1.5;\n    vec2 math_point1 = vec2(-scale, -scale) + math_center;\n    vec2 math_point2 = vec2(scale, scale) + math_center;\n    vec2 c = vec2(-0.500934515513869749377, -0.52287731735700945607);\n    float pulse = 0.5+sampleMusicA()*1.8;\n#ifdef JUL_ANIMATE\n    float angle = (iTime + 0.9*sin(iTime/2.) - 0.2)*0.3;\n    float radius = 0.32;\n    \n    c.x = (radius * sin(angle));\n    c.y = (radius - radius * cos(angle));\n#endif  //!JUL_ANIMATE\n    \n    iter = JuliaInerationCount(Transform(fragCoord, screen_point1, screen_point2, math_point1, math_point2), c);\n#ifdef COLOR_BW\n    f_color.x = float(iter);\n    f_color.y = float(iter);\n    f_color.z = float(iter);\n    f_color /= float(ITER_COUNT);\n#else\n    #ifdef COLOR_DIV\n    f_color.x = float((iter + 4) % 12);\n    f_color.y = float((iter + 8) % 12);\n    f_color.z = float((iter + 0) % 12);\n    f_color /= 12.;\n    #else\n    t = float(iter) / float(ITER_COUNT + 1);\n    t = pow(t, 3.);\n    k = int(t * float(COLOR_MAX));\n    a = (t * float(COLOR_MAX)) - float(k);\n    f_color = (1. - a) * s_palette[k] + a * s_palette[k + 1];\n    #endif //!COLOR_DIV\n#endif  //!COLOR_BW\n    if (iter == 0) {\n      fragColor = vec4(0., 0., 0.4, 1.);\n    }\n    else {\n   \t  fragColor = vec4(f_color, 1.);\n    }\n}","name":"Image","description":"","type":"image"}]}