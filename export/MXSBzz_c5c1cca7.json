{"ver":"0.1","info":{"id":"MXSBzz","date":"1729124359","viewed":88,"name":"Naked nyan jichumao","username":"jichumao","description":"homegirl needs a rainbow!\nBG idea from https://www.shadertoy.com/view/XtBXW3","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["nyan"],"hasliked":0,"parentid":"stGBDR","parentname":"naked nyan"},"renderpass":[{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// BG idea from https://www.shadertoy.com/view/XtBXW3\n// Function to create a glowing wave-like strand pattern\nvec3 Strand(in vec2 fragCoord, in vec3 color, in float hoffset, in float hscale, in float vscale, in float timescale)\n{\n    // Glow effect radius\n    float glow = 0.12 * iResolution.y;\n    float twopi = 6.28318530718;\n\n    // Calculate the wave curve and adjust it based on horizontal and vertical scaling\n    float wavePos = mod(fragCoord.x * hscale / 100.0 / iResolution.x * 1000.0 + 10.0 * iTime * timescale , twopi);\n    float curve = 1.0 - abs(fragCoord.y - (sin(wavePos) * iResolution.y * 0.25 * vscale + iResolution.y / 2.0));\n\n    // Clamp the curve to create a more distinct edge\n    float i = clamp(curve, 0.0, 1.0);\n\n    // Apply a glow effect around the strand\n    i += clamp((glow + curve) / glow, 0.0, 1.0) * 0.4;\n\n    // Return the final color with the calculated intensity\n    return i * color;\n}\n\n// Function to create a \"muzzle flash\" style visual effect\nvec3 Muzzle(in vec2 fragCoord, in float timescale)\n{\n    float xOffset = 0.05 * iResolution.x;\n\n    // Calculate the angle and length of the muzzle effect based on the position\n    float theta = atan(iResolution.y / 2.0 - fragCoord.y, iResolution.x - fragCoord.x + xOffset);\n    float len = iResolution.y * (10.0 + sin(theta * 20.0 + float(int(iTime * 20.0)) * -35.0)) / 11.0;\n\n    // Distance from the center to control the muzzle shape and intensity\n    float d = max(-0.6, 1.0 - (sqrt(pow(abs(iResolution.x - fragCoord.x + xOffset), 2.0) +\n                    pow(abs(iResolution.y / 2.0 - ((fragCoord.y - iResolution.y / 2.0) * 4.0 + iResolution.y / 2.0)), 2.0)) / len));\n\n    // Create oscillating color channels for dynamic effect\n    return vec3(\n        d * (1.0 + sin(theta * 10.0 + floor(iTime * 20.0) * 10.77) * 0.5),\n        d * (1.0 + -cos(theta * 8.0 - floor(iTime * 20.0) * 8.77) * 0.5),\n        d * (1.0 + -sin(theta * 6.0 - floor(iTime * 20.0) * 134.77) * 0.5)\n    );\n}\n\n// Main rendering function\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Keep this part unchanged as per the request\n    vec2 uv = fragCoord.xy / iResolution.y;\n    uv *= 2.;\n    uv -= vec2(2.5, 0.5);\n    uv = clamp(uv, 0., 1.);\n\n    float frame = floor(mod(iTime * 10.0, 6.0));\n    float nyanWidthUV = 40.0 / 256.0;\n    uv.x = (uv.x + frame) * nyanWidthUV;\n\n    vec4 nyan = texture(iChannel0, uv);\n    vec3 col = nyan.xyz;\n\n    // Background check: if alpha is low, apply background effects\n    if (nyan.a < 0.1) {\n        float timescale = 0.11;\n        vec3 c = vec3(0, 0, 0); // Initialize background color\n\n        // Apply multiple Strand effects with different parameters\n        c += Strand(fragCoord, vec3(1.0, 0, 0), 0.7934 + 1.0 + sin(iTime) * 30.0, 1.0, 0.16, 10.0 * timescale);\n        c += Strand(fragCoord, vec3(0.0, 1.0, 0.0), 0.645 + 1.0 + sin(iTime) * 30.0, 1.5, 0.2, 10.3 * timescale);\n        c += Strand(fragCoord, vec3(0.0, 0.0, 1.0), 0.735 + 1.0 + sin(iTime) * 30.0, 1.3, 0.19, 8.0 * timescale);\n        c += Strand(fragCoord, vec3(1.0, 1.0, 0.0), 0.9245 + 1.0 + sin(iTime) * 30.0, 1.6, 0.14, 12.0 * timescale);\n        c += Strand(fragCoord, vec3(0.0, 1.0, 1.0), 0.7234 + 1.0 + sin(iTime) * 30.0, 1.9, 0.23, 14.0 * timescale);\n        c += Strand(fragCoord, vec3(1.0, 0.0, 1.0), 0.84525 + 1.0 + sin(iTime) * 30.0, 1.2, 0.18, 9.0 * timescale);\n\n        // Add the Muzzle effect and clamp the values\n        c += clamp(Muzzle(fragCoord, timescale), 0.0, 1.0);\n        \n        if (c == vec3(0, 0, 0)){\n            fragColor = vec4(0.02, 0.02, 0.02, 0.01);\n        } else{\n            // Set the final color for the background\n            fragColor = vec4(c.r, c.g, c.b, 1.0);\n        }\n    } else {\n        // For the cat, directly display the nyan texture\n        fragColor = vec4(nyan.rgb, 1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}