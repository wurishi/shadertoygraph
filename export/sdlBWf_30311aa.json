{"ver":"0.1","info":{"id":"sdlBWf","date":"1645508264","viewed":414,"name":"The Mirror Cube","username":"johnao","description":"A cube with half-silvered mirrors.\n\nInspired by http://www.anthonyjamesstudio.com/","likes":43,"published":1,"flags":0,"usePreview":0,"tags":["3d","sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author: John Ao\n// License: CC BY-NC 4.0\n\n#define AA 16\n#define eps .001\n#define R .07\n#define N_STEP 100\n\nfloat sdf(vec3 p) {\n    p = fract(p + .5);\n    p = min(p, 1. - p);\n    p *= p;\n    return sqrt(p.x < p.y ? p.x + min(p.y, p.z) : p.y + min(p.x, p.z)) - R;\n}\n\nfloat sum3(vec3 x) {\n    return x.x + x.y + x.z;\n}\n\nfloat max3(vec3 x) {\n    return max(x.x, max(x.y, x.z));\n}\n\nfloat min3(vec3 x) {\n    return min(x.x, min(x.y, x.z));\n}\n\nfloat cube_intersect(vec3 o, vec3 d) {\n    vec3 a = 1. / d, b = -o * a, c = abs(a) * .5;\n    float t1 = max3(b - c), t2 = min3(b + c);\n    return 0. < t1 && t1 < t2 ? t1 : -1.;\n}\n\nfloat random2(vec2 seed) {\n    return fract(1e3 * sin(seed.x * 12345. + seed.y) * sin(seed.y * 1234. + seed.x));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 cam = normalize(vec3(sin(iTime), cos(iTime), sin(iTime * .7 + 1.)));\n    vec3 x_ = normalize(cross(vec3(0., 0., 1.), cam));\n    vec3 y_ = cross(cam, x_);\n    cam *= 3.;\n    vec2 uv = vec2(0.);\n    float col = 0.;\n    for (int i = 0; i < AA; ++i) {\n        uv = .8 * (2. * (fragCoord + vec2(random2(iTime * 1e-5 + uv), random2(iTime * 1e-4 + uv))) - iResolution.xy) / min(iResolution.x, iResolution.y);\n        vec3 d = normalize(uv.x * x_ + uv.y * y_ - cam);\n        float r = cube_intersect(cam, d);\n        if (r > 0.) {\n            float r_ = sdf(cam + r * d);\n            if (r_ > eps) {\n                r += r_;\n                for (int j = 0; j < N_STEP && r_ > eps; ++j) {\n                    r += r_ = sdf(cam + r * d);\n                }\n                col += pow(.7, sum3(abs(floor(cam + r * d + .5))));\n            }\n        } else {\n            col += .3;\n        }\n    }\n    fragColor = vec4(vec3(col / float(AA)), 1.);\n}","name":"Image","description":"","type":"image"}]}