{"ver":"0.1","info":{"id":"3dccWs","date":"1601941423","viewed":137,"name":"2D Perlin Noise 1","username":"Dominexis","description":"Simply 2D Perlin noise.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["perlinnoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rng( in vec2 pos )\n{\n    return fract(sin( pos.y + pos.x*78.233 )*43758.5453)*2.0 - 1.0;\n}\n\nfloat perlin( in vec2 pos )\n{\n    // Get node values\n    \n    float a = rng( vec2(floor(pos.x), floor(pos.y)) );\n    float b = rng( vec2(ceil( pos.x), floor(pos.y)) );\n\tfloat c = rng( vec2(floor(pos.x), ceil( pos.y)) );\n    float d = rng( vec2(ceil( pos.x), ceil( pos.y)) );\n    \n    float a_x = rng( vec2(floor(pos.x+100.0), floor(pos.y)) );\n    float b_x = rng( vec2(ceil( pos.x+100.0), floor(pos.y)) );\n    float c_x = rng( vec2(floor(pos.x+100.0), ceil( pos.y)) );\n    float d_x = rng( vec2(ceil( pos.x+100.0), ceil( pos.y)) );\n    \n    float a_y = rng( vec2(floor(pos.x+200.0), floor(pos.y)) );\n    float b_y = rng( vec2(ceil( pos.x+200.0), floor(pos.y)) );\n    float c_y = rng( vec2(floor(pos.x+200.0), ceil( pos.y)) );\n    float d_y = rng( vec2(ceil( pos.x+200.0), ceil( pos.y)) );\n    \n    a += a_x*fract(pos.x) + a_y*fract(pos.y);\n    b += b_x*(fract(pos.x)-1.0) + b_y*fract(pos.y);\n    c += c_x*fract(pos.x) + c_y*(fract(pos.y)-1.0);\n    d += d_x*(fract(pos.x)-1.0) + d_y*(fract(pos.y)-1.0);\n    \n    \n    \n    // Interpolate values\n    \n    float inter_x = smoothstep(0.0,1.0,fract(pos.x));\n    float inter_y = smoothstep(0.0,1.0,fract(pos.y));\n    \n    return a + (b-a)*inter_x + (c-a)*inter_y + (a-b-c+d)*inter_x*inter_y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Initialize values\n    \n    float chunk_size = 20.0;\n    vec2 uv = fragCoord*chunk_size/iResolution.xx;\n    \n    \n    \n    // Get elevation\n    \n    float pixel = (\n        perlin( uv )\n        + perlin( uv*2.0 + vec2(100.0,0.0) )/2.0\n        + perlin( uv*4.0 + vec2(200.0,0.0) )/4.0\n        + perlin( uv*8.0 + vec2(300.0,0.0) )/8.0\n        + perlin( uv*16.0 + vec2(400.0,0.0) )/16.0\n        + perlin( uv*32.0 + vec2(500.0,0.0) )/32.0\n        + perlin( uv*64.0 + vec2(600.0,0.0) )/64.0\n    )/3.0 + 0.5;\n    \n    \n    \n    // Display noise\n    \n    fragColor = vec4( pixel, pixel, pixel, 1.0 );\n}","name":"Image","description":"","type":"image"}]}