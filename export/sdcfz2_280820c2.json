{"ver":"0.1","info":{"id":"sdcfz2","date":"1656781818","viewed":81,"name":"Static smiley face","username":"IdeaSquirrel","description":"A \"building stuff with circles\" implementation for tutorial 2 from @bigwings The Art of Code videos. Tried to explain why the eyes were weird and explained the fix. Would be easier to do it visually but I tried. Hopefully it makes sense to me in 6 months!","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["smiley","theartofcode"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n  The Art of Code tutorial 2\n  https://www.youtube.com/watch?v=GgGBR4z8C9o\n\n  Unoffical Shadertoy blog\n  https://shadertoyunofficial.wordpress.com/2019/01/02/programming-tricks-in-shadertoy-glsl/\n*/\n\n#define BLUR .75/iResolution.y\n#define RADIUS .3\n#define EYE_RADIUS .05\n#define MOUTH_RADIUS .2\n\nfloat Circle(vec2 uv, vec2 pos, float r, float blur) {\n  return smoothstep(r + blur, r - blur, length(uv - pos));\n}\n\nfloat Smiley (vec2 uv, vec2 pos, float size) {\n    // translate\n    uv -= pos;\n\n    //scale\n    uv /= size;\n    \n    // uv = (uv - pos) / size;\n\n    // face\n    float mask = Circle(uv, vec2(0.), RADIUS, BLUR)\n        // left eye\n        - Circle(uv, vec2(-.1, .15), EYE_RADIUS, BLUR)\n        // right eye\n        - Circle(uv, vec2(.1, .15), EYE_RADIUS, BLUR);\n\n    // lowerMouth circle\n    float mouth = Circle(uv, vec2(0.), MOUTH_RADIUS, BLUR)\n        // upperMouth circle\n        - Circle(uv, vec2(0., .1), MOUTH_RADIUS, BLUR);\n\n    /*\n        As per the tutorial, the eyes will have the undesired effect\n        of looking...drunk, I guess?\n\n        the reason being is that there is a 1 - (-1) calculation present. Swap out lines 136 and 137 to see it in action\n\n\n        *First part - calculating the mouth\n\n        taking just the mouth value for the moment and ignore the interpolated smoothstep values\n\n        we create a circle to represent the lower part of the mouth (lowerMouth)\n        uv within the lowerMouth circle will have a value of 1. uv outside the lowerMouth circle will have a value of 0\n\n        we then subtract the upperMouth circle from the lowerMouth circle. This gives us the \"smile\" by removing the union\n        between the two circles.\n\n        where the lowerMouth circle doesn't intersect the upperMouth circle, those values will be\n            1. - 0. = 1.\n\n        the intersection of the two circles will have a value of\n            1. - 1. = 0.\n\n        the first sneaky part is where the upperMouth circle doesn't intersect the lowerMouth\n        any uv not within the lowerMouth circle will have a value of 0.\n\n        we then subtract the upperMouth circle\n            0. - 1. = -1.\n\n        therefore uv within the upperMouth circle that doesn't intersect with the lowerMouth circle\n        have a value of -1.\n\n        So there are three parts to our mouth\n        upperMouth = -1.\n        intersection = 0.\n        lowerMouth = 1.\n\n\n\n        *Second part - subtracting mouth from mask (ignore the eyes for the moment)\n\n        We have a giant circle called mask. This is our face. All values within the face are 1.\n        We then subtract the parts of our mouth from this circle....\n\n        Where the face intersects just the upper mouth\n          face - upperMouth = 1. - (-1.) = 2. (!!!!!!!!)\n\n        Where the face intersects the intersection of both mouth circles (the nose?)\n          face - intersection = 1. - 0. = 1.\n\n        Where the face intersects just the lower mouth\n          face - lowerMouth = 1. - 1. = 0.\n\n\n        comment out the eyes and only have the mask check running below to see the green area\n        on the mask where the values are 2.\n\n        this is the intersection of the face and the non-intersecting part of upperMouth\n        (gotta find out the term for that. I know it's difference but there are two differences)\n\n\n        *Third part - add the eye\n\n        So we add to our math above a little here to explain why the eyes look funky.\n\n        before we subtract the mouth, we subtract the eyes (lets assume a left-eyed cyclops for simplicity)\n\n        all uv within the mask (face) have a value of 1. we then subtract the circle where our eye is.\n        we now have a circle of 1.'s (face) that contains a circle of 0.'s (the eye).\n\n        This makes the math:\n          face - upperMouth = 1. - (-1.) = 2. (!!!!!!!!)\n          **(face - eye) - upperMouth = (1. - 1.) - (-1.) = 1. (the triple intersection between face, upper part of the eye and upperMouth)\n          face - mouth intersection = 1. - 0. = 1.\n          (face - eye) - mouth intersection = (1. - 1.) - 0. = 0.\n          face - lowerMouth = 1. - 1. = 0.\n\n          the ** calculation explains why the eye is yellow at the top, that pesky - (-1.)....\n\n\n        *Fourth part - the fix\n\n        kudos to commenter Dennis F. on that youtube vid who suggested using clamp on the mouth variable\n\n        by clamping that value to between 0. and 1., we essentially remove the - (-1.) from the equations and replace it with - 0.!\n\n        face - upperMouth = 1. - (-1.) = 2.\n        becomes\n        face - clamp(upperMouth) = 1. - (0.) = 1. (no 2.!!! visually this makes no difference (unless you're debugging - removes the green) but it matters for calculations)\n\n        and\n\n        (face - eye) - upperMouth = (1. - 1.) - (-1.) = 1.\n        becomes\n        (face - eye) - clamp(upperMouth) = (1. - 1.) - (0.) = 0. (now the whole eye has uv with values of 0.)\n    */\n\n    //mask -= mouth;\n    mask -= clamp(mouth, 0., 1.);\n\n    return mask;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  // Normalized pixel coordinates\n  vec2 uv = (fragCoord - 0.5*iResolution.xy) / iResolution.y;\n\n  float mask = Smiley(uv, vec2(0.), .75);\n\n  // set colour\n  vec3 col = vec3(1.,1.,0.)*mask;\n\n  /*\n    for debug purposes to identify the overlap between the\n    upperMouth circle and the face circle\n\n    swap lines 136 and 137 (remove clamp) to start debugging the original problem\n\n    comment out the mask conditional to see where the upperMouth circle has -1. values\n    comment out the mouth conditional to see where the mask has 2. values\n  */\n  /*\n  if (mask > 1.) {\n    col = vec3(0.,1.,0.);\n  }\n\n  if (mouth < 0.) {\n    col = vec3(1.,0.,0.);\n  }\n  */\n\n  // Output to screen\n  fragColor = vec4(pow(col, vec3(1./2.2)), 1.0);\n}","name":"Image","description":"","type":"image"}]}