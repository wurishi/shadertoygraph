{"ver":"0.1","info":{"id":"l3jGWW","date":"1728047445","viewed":36,"name":"QuickRaymarching","username":"Stenator","description":"Raymarch","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nfloat sdf(vec3 p){\n\n    float sphere1= length(p-vec3(0.,0.,.5))-(1.+cos(iTime*2.)*.25);\n    //float sphere2= length(p-vec3((cos(iTime)+sin(iTime))*2.,1.,2.))-1.;\n    //float sphere3= length(p-vec3((cos(iTime)+sin(iTime))*2.,1.,2.))-1.;\n    //(cos(iTime)+sin(iTime))\n    \n    \n    float Cut= -p.z;\n    \n    //float sdf= max(sphere1,);\n    \n    sphere1= abs(sphere1)-.02;\n    \n    return max(Cut,sphere1);//min(sphere1,sphere2);\n}\n\n\nvec3 getNorm(vec3 p)\n{\n    vec2 e = vec2(0.01,0.);\n    return -normalize(vec3(sdf(p-e.xyy),sdf(p-e.yxy),sdf(p-e.yyx))- \n    vec3(sdf(p+e.xyy),sdf(p+e.yxy),sdf(p+e.yyx)));\n\n}\n\n\nfloat sMin(float a, float b, float k) {\n    return 1.0;\n\n\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv= (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    \n    //uv= fract(5.*uv)-.5;\n\n\n\n    // Time varying pixel color\n    vec3 col = vec3(0.);\n    \n    vec3 ro= vec3(0.,0.,-5);\n    vec3 rd= vec3(uv.x,uv.y, 1.);\n    \n    vec3 p= ro;\n    \n    col=vec3(.1);\n    \n    \n    for(int i=0; i<128;i++)\n    {\n        float dist= sdf(p);\n \n    \n        if(dist<0.01) {\n        \n            \n            \n            \n            col=vec3(1.);\n            \n            vec3 N= getNorm(p);\n            \n            \n            col= col+ 1.-vec3(dot(N,-rd));\n            \n            col+= vec3(dot(N,-vec3(0,-1,0.55)));       \n            col/=3.;\n            \n            \n            \n            break;\n           }\n           \n    \n        p += rd * dist;\n    }\n    \n    \n\n\n\n\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}