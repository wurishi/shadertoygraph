{"ver":"0.1","info":{"id":"fl3yRS","date":"1659982016","viewed":326,"name":"Pins pins pins","username":"Flopine","description":"Had this idea on the bus trip to Evoke to prepare for the showdown XD\nBased on this masterpiece by iosounds https://www.instagram.com/p/CR5NXyWjFfZ/?utm_source=ig_web_copy_link","likes":27,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","animation","isometric","pattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings, FabriceNeyret and Blackle for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n// Based on this masterpiece \n// by iosounds https://www.instagram.com/p/CR5NXyWjFfZ/?utm_source=ig_web_copy_link\n\n#define PI acos(-1.)\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\n#define cyl(p,s,h) max(length(p.xy)-s, abs(p.z)-h)\n#define cube(p,c) length(max(abs(p)-c,0.))\n\n#define crep(p,c,l) p-=c*clamp(round(p/c),-l,l)\n#define hash21(p) fract(sin(dot(p,vec2(12.5,23.4)))*1257.4)\n#define palette(t,c,d) (vec3(.5)+vec3(.5)*cos(2.*PI*(c*t+d)))\n\nfloat prim1(vec3 p, float sy)\n{\n   crep(p.xz,0.35,1.);\n  return max(-length(p.xz)+.1,cube(p,vec3(0.15,sy,0.15)));  \n}\n\nvec2 edge (vec2 p)\n{\n  vec2 p2 = abs(p);\n  if (p2.x>p2.y) return vec2((p.x<0.)?-1.:1.,0.);\n  else return vec2(0., (p.y<0.)?-1.:1.);\n}\n\nfloat prims (vec3 p)\n{\n    vec2 center = floor(p.xz)+.5;\n    vec2 neigh = center + edge(p.xz-center);\n    float sy = mix(0.2,.5,hash21(center*.1));\n    float me = prim1(vec3(p.x-center.x, p.y, p.z-center.y), sy)-0.01;\n    vec3 newp = vec3(p.x-neigh.x, p.y, p.z-neigh.y);\n    float next = cube(newp, vec3(0.499,.7,0.499));\n\n\n    return min(me,next);\n}\n\nfloat g1 = 0.; vec2 id;\nfloat cyls( vec3 p)\n{\n    id = floor(p.xz/.334);\n    float h=.5+sin(length(id)-iTime*3.)*.1;\n\n    float per = .334;\n\n    p.xz = mod(p.xz,per)-per*.5;\n    float d = cyl(p.xzy,0.08,h);\n\n    g1 += 0.001/(0.001+d*d);\n\n    return d;\n}\n\nfloat SDF (vec3 p)\n{\n  p.yz *= rot(-atan(1./sqrt(2.)));\n  p.xz *= rot(PI/4.);\n  \n  return min(prims(p), cyls(p));\n}\n\nvec3 getnorm(vec3 p)\n{\n    vec2 eps = vec2(0.01,0.);\n    return normalize(SDF(p)-vec3(SDF(p-eps.xyy),SDF(p-eps.yxy),SDF(p-eps.yyx)));\n}\n  \nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (2.*fragCoord.xy - iResolution.xy)/iResolution.y;\n    float dither = hash21(uv);\n    \n    vec3 ro = vec3(uv*2.5,-30.), rd=vec3(0.,0.,1.),\n    p=ro, col=vec3(.0), l=normalize(vec3(1.,2.,-1.));\n    bool hit=false;\n    \n    for (float i=0.; i<64.;i++)\n    {\n      float d = SDF(p);\n        if (d<0.001)\n        {\n            hit=true;\n            break;\n        }\n        d *= .9+dither*.1;\n        p += d*rd*.9;\n    }\n\n    if (hit)\n    {\n        vec3 n = getnorm(p);\n        float light = dot(n,l)*.1+.1;\n        col = vec3(light);\n    }\n    \n    col += g1*palette(hash21(id),vec3(.5),vec3(.0,.36,.64))*0.1;\n    \n    fragColor = vec4(sqrt(col),1.);\n}","name":"Image","description":"","type":"image"}]}