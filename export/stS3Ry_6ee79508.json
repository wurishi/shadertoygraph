{"ver":"0.1","info":{"id":"stS3Ry","date":"1624115681","viewed":85,"name":"Fork Fork IOR r kithy 882","username":"kithy","description":"based on this tutorial.\nhttps://www.shadertoy.com/view/sls3WN","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","reflection","ior"],"hasliked":0,"parentid":"stlGDj","parentname":"Fork IOR reflec kithy 559"},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rr","filepath":"/media/a//media/previz/cubemap00.png","previewfilepath":"/media/ap//media/previz/cubemap00.png","type":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 10.0\n#define SURF_DIST 0.001\n#define PI 3.1415\n\nmat2 Rot(float a){\n    float s=sin(a),c=cos(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat sdBox(vec3 p,vec3 s){\n    p=abs(p)-s;\n    return length(max(p,0.0))+min(max(p.x,max(p.y,p.z)),0.0);\n}\n\nfloat sphere(vec3 p){\n    return length(p)-0.8;\n}\n\nfloat octahedron(vec3 p,float s){\n    p.xz*=Rot(iTime);\n\tp=abs(p);\n\tfloat m=p.x+p.y+p.z-s;\n\tvec3 r=3.0*p-m;\n\t\n\tvec3 q;\n\tif(r.x<0.0)q=p.xyz;\n\telse if(r.y<0.0)q=p.yzx;\n\telse if(r.z<0.0)q=p.zxy;\n\telse return m*0.57735027;\n\n\tfloat k=clamp(0.5*(q.z-q.y+s),0.0,s);\n\treturn length(vec3(q.x,q.y-s+k,q.z-k));\n}\n\nfloat polyhydra(vec3 p){\n    float d=sdBox(p,vec3(1.0));\n    float c=cos(PI/5.0),s=sqrt(0.75-c*c);\n    vec3 n=vec3(-0.5,-c,s);\n    \n    p=abs(p);\n    p-=2.0*min(0.0,dot(p,n))*n;\n    \n    p.xy=abs(p.xy);\n    p-=2.0*min(0.0,dot(p,n))*n;\n    \n    p.xy=abs(p.xy);\n    p-=2.0*min(0.0,dot(p,n))*n;\n    \n    d=p.z-1.0;\n    return d;\n}\n\n\nfloat GetDist(vec3 p){\n    float o=octahedron(p,1.5);\n    float d=polyhydra(p);\n    float a=sin(iTime*2.0)*0.5+0.5;\n    return mix(o,d,a);\n}\n\nfloat RayMarch(vec3 ro,vec3 rd,float side){\n    float dO=0.0;\n    \n    for(int i=0;i<MAX_STEPS;i++){\n        vec3 p=ro+rd*dO;\n        float dS=GetDist(p)*side;\n        dO+=dS;\n        if(dO>MAX_DIST||abs(dS)<SURF_DIST)break;\n      }\n      return dO;\n}\n\nvec3 GetNormal(vec3 p){\n        float d=GetDist(p);\n        vec2 e=vec2(0.001,0.0);\n        \n        vec3 n=d-vec3(\n            GetDist(p-e.xyy),\n            GetDist(p-e.yxy),\n            GetDist(p-e.yyx));\n \n        return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv,vec3 p,vec3 l,float z){\n    vec3 f=normalize(l-p),\n    r=normalize(cross(vec3(0.0,1.0,0.0),f)),\n    u=cross(f,r),\n    c=f*z,\n    i=c+uv.x*r+uv.y*u,\n    d=normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv=(fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec2 m=iMouse.xy/iResolution.xy;\n    \n    vec3 ro=vec3(0.0,3.0,-3.0);\n    ro.yz*=Rot(-m.y*3.14+1.0);\n    ro.xz*=Rot(-m.x*6.2831);\n   \n    \n    vec3 rd=GetRayDir(uv,ro,vec3(0.0),1.0);\n    vec3 col=texture(iChannel0,rd).rgb;\n    \n    float d=RayMarch(ro,rd,1.0);\n    \n    float IOR=1.45;\n    \n    if(d<MAX_DIST){\n        vec3 p=ro+rd*d;\n        vec3 n=GetNormal(p);\n        vec3 r=reflect(rd,n);\n        \n        vec3 refOutside=texture(iChannel0,r).rgb;\n        \n        vec3 rdIn=refract(rd,n,1.0/IOR);\n        \n        vec3 pEnter=p-n*SURF_DIST*3.0;\n        float dIn=RayMarch(pEnter,rdIn,-1.0);\n        \n        vec3 pExit=pEnter+rdIn*dIn;\n        vec3 nExit=-GetNormal(pExit);\n        \n        vec3 rdOut=vec3(0.0);;\n        \n        vec3 refTex=vec3(0.0);\n        \n        float abb=0.01;\n    \n    \n        rdOut=refract(rdIn,nExit,IOR-abb);\n        if(dot(rdOut,rdOut)==0.0)rdOut=reflect(rdIn,nExit);\n        refTex.r=texture(iChannel0,rdOut).r;\n\n        rdOut=refract(rdIn,nExit,IOR);\n        if(dot(rdOut,rdOut)==0.0)rdOut=reflect(rdIn,nExit);\n        refTex.g=texture(iChannel0,rdOut).g;\n\n        rdOut=refract(rdIn,nExit,IOR+abb);\n        if(dot(rdOut,rdOut)==0.0)rdOut=reflect(rdIn,nExit);\n        refTex.b=texture(iChannel0,rdOut).b;\n\n        float dens=0.1;\n        float optDist=exp(-dIn*dens);\n\n        refTex=refTex*optDist;\n\n        float frenel=pow(1.0+dot(rd,n),0.5);\n\n        col=mix(refTex,refOutside,frenel);\n    }\n    \n    col=pow(col,vec3(0.4545));\n    \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dX3Rr","filepath":"/media/a//media/previz/cubemap00.png","previewfilepath":"/media/ap//media/previz/cubemap00.png","type":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dX3Rr","channel":0}],"code":"#define hue(v) (0.6+0.6*cos(6.3*(v)+vec4(0.0,23.0,21.0,0.0)))\n\nvoid mainCubemap( out vec4 fragColor, in vec2 fragCoord, in vec3 rayOri, in vec3 rayDir )\n{\n    vec3 A=abs(rayDir);\n    int i=0;\n    float M=A.x;\n    if(A.y>M)M=A.y,i=1;\n    if(A.z>M)M=A.z,i=2;\n    int faceID=i+3*int(rayDir[i]<0.0);\n    \n    fragColor=hue(float(faceID)/6.);\n   \n    fragCoord=(fragCoord+fragCoord-iResolution.xy)/iResolution.y;\n    fragColor*=vec4(0.2*1.0/length(fragCoord));\n}","name":"Cube A","description":"","type":"cubemap"}]}