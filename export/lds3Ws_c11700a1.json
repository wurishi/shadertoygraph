{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"music","id":"4sXGzn","filepath":"/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}},{"channel":1,"type":"texture","id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","sampler":{"filter":"nearest","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"#define stiffness 7.0 // Blobbiness factor (higher = stiffer balls)\n#define cfalloff 5.0 // Glow factor (higher = sharper, shorter glow)\n\n// getFreq() will sample over musicstep*musicres of the spectrum\n#define musicstep 0.001 // How much to step up each frequency check\n#define musicres 10. // How many steps to check\n\nfloat getFreq(float f){\n\t//musik reactions\n\tfloat fv = 0.;\n\tfor(float i=0.;i<musicres;i+=1.){\n\t\tfv += (texture(iChannel0,vec2(f+musicstep*i,0.0)).x)/musicres;\n\t}\n\tfv = pow(clamp((fv-.7)*3.,0.,1.),2.);\n\treturn fv;\n}\n\nvec2 ballA;\nvec2 ballB;\nvec2 ballC;\n\nvec3 render(vec2 uv){\n\t// calc range-based per-pixel values\n\t// subtract from length to make the ball bigger (every pixel closer)\n\t// clamp to avoid negative distances and fucky values\n\t// invert it so it's \"closeness\" to the ball\n\t// raise to power to \"sharpen\" the edge of the ball (more sudden falloff from 1.0)\n\tfloat r1 = pow(1.0-clamp(length(uv-ballA)+0.1-(.6*getFreq(0.)),0.0,1.0),stiffness);\n\tfloat r2 = pow(1.0-clamp(length(uv-ballB)+0.1-(.3*getFreq(0.)),0.0,1.0),stiffness);\n\tfloat r3 = pow(1.0-clamp(length(uv-ballC)+0.1-(.2*getFreq(0.)),0.0,1.0),stiffness);\n\t\n\t\n\t\n\t// sum for blobbage!\n\tfloat v = (r1+r2+r3);\n\t\n\t// calculate colour\n\tvec3 final;\n\tfinal.x = pow(v,cfalloff);\n\tfinal.y = pow(v,cfalloff);\n\tfinal.z = pow(v,cfalloff*0.5); // sharpen blue less, for a blue glow\n\t\n\treturn final;\n}\n\nvec3 blurRender(vec2 uv, vec2 dir){\n\tvec3 pixel = vec3(0.);\n\tfor(float x=0.;x<0.1;x+=0.01){\n\t\t\tpixel += render(uv-dir*x)/10.;\n\t}\n\treturn pixel;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t\n\tuv -= 0.5;\n\tuv *= 2.0;\n\tuv.x *= iResolution.x/iResolution.y;\n\t\n\tfloat t = iTime * 0.5;\n\t\n\t// calculate some ball positions (sin is nice for animating)\n\tballA = vec2(1.0*sin(t),\t\t1.0*cos(t));\n\tballB = vec2(1.0*sin(t),\t\t0.8*cos(t*1.3));\n\tballC = vec2(0.8*sin(t*2.0),\t1.0*cos(t*1.7));\n\n\t\n\t// gimme some pixels baby!\n\tfragColor = vec4(blurRender(uv,uv*2.*getFreq(0.)),1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lds3Ws","date":"1382092437","viewed":506,"name":"Metaballs Audio-reactive","username":"squeakyneb","description":"Reacts to bass, because other frequencies are too noisy to see anything interesting :( also radial blur because why not (apart from \"it's cheesy\")","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","sound","reactive","music","metaball"],"hasliked":0,"parentid":"","parentname":""}}