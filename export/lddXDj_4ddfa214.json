{"ver":"0.1","info":{"id":"lddXDj","date":"1463377658","viewed":334,"name":"flow sphere","username":"hcf","description":"learn form https://www.shadertoy.com/view/XsjXRm","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","noise","flow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define time iTime\nmat2 mm2(in float a){float c = cos(a), s = sin(a);return mat2(c,-s,s,c);}\nfloat noise( in float x ){return texture(iChannel0, vec2(x*.01,1.)).x;}\n\nfloat hash( float n ){return fract(sin(n)*43758.5453);}\n\n//iq's ubiquitous 3d noise\nfloat noise(in vec3 p)\n{\n\tvec3 ip = floor(p);\n    vec3 f = fract(p);\n\tf = f*f*(3.0-2.0*f);\n\t\n\tvec2 uv = (ip.xy+vec2(37.0,17.0)*ip.z) + f.xy;\n\tvec2 rg = textureLod( iChannel0, (uv+ 0.5)/256.0, 0.0 ).yx;\n\treturn mix(rg.x, rg.y, f.z);\n}\n\nmat3 m3 = mat3( 0.00,  0.80,  0.60,\n              -0.80,  0.36, -0.48,\n              -0.60, -0.48,  0.64 );\n\n//returns both collision dists of unit sphere\nvec2 iSphere2(in vec3 ro, in vec3 rd)\n{\n    vec3 oc = ro;\n    float b = dot(oc, rd);\n    float c = dot(oc,oc) - 1.;\n    float h = b*b - c;\n    if(h <0.0) return vec2(-1.);\n    else return vec2((-b - sqrt(h)), (-b + sqrt(h)));\n}\n\n//See: https://www.shadertoy.com/view/XdfXRj\nfloat flow(in vec3 p, in float t)\n{\n    \n\tfloat z=2.;\n\tfloat rz = 0.;\n\tvec3 bp = p;\n\tfor (float i= 1.;i < 5.;i++ )\n\t{\n\t\tp += time*.1;\n\t\trz+= (sin(noise(p+t*0.8)*6.)*0.5+0.5) /z;\n\t\tp = mix(bp,p,0.6);\n\t\tz *= 2.;\n\t\tp *= 2.01;\n        p*= m3;\n\t}\n\treturn rz;\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n\n\tvec2 uv = (fragCoord.xy-iResolution.xy/2.) / iResolution.y*2.;\n\n\tvec3 ro = vec3(0.0,0.0,4.0);\n\tvec3 rd = normalize(vec3(uv,-3.));\n    \n    mat2 mx = mm2(time*.4);\n    mat2 my = mm2(time*0.3); \n    ro.xz *= mx;rd.xz *= mx;\n    ro.xy *= my;rd.xy *= my;\n    \n\tvec3 col = vec3(0.0);\n\tvec2 sph = iSphere2(ro,rd);\n\n\tif(sph.x > 0.){\n\t\tvec3 pos = ro + rd*sph.x;\n\t\tvec3 pos2 = ro + rd*sph.y;\n\n\t\tfloat nz = (flow(pos*2.,time)-.01)*5.;\n        float nz2 = (flow(pos2*2.,-time)-.01)*5.;\n        col += (0.1*nz*nz* vec3(.5,0.12,.5) + 0.05*nz2*nz2*vec3(0.05,.8,.55))*0.8;\n        \n        \n\t}\n\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}