{"ver":"0.1","info":{"id":"4cBXzy","date":"1707073631","viewed":125,"name":"FBM Domain Distortion Ripples","username":"TuttiMarcella","description":"Got the idea  of using mod(coords, PI) to get repeating circles from a shader I saw (I can't find which one) \nAlways thanks to Inigo quilez for all the material he shares\n","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["domain","distortion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n#define PI 3.14159265358979323846\n\n\nfloat random(in vec2 pos){\n    vec2 point = vec2(6239.12,2374.981);\n    return fract(sin(dot(pos,point)) * 20.);\n\n}\n\nconst mat2 m = mat2( 0.80,  0.60, -0.60,  0.80 );\n\n\nfloat noise( in vec2 x )\n{\n    \n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    float a = random(p+vec2(0,0));\n\tfloat b = random(p+vec2(1,0));\n\tfloat c = random(p+vec2(0,1));\n\tfloat d = random(p+vec2(1,1));\n    return mix(mix( a, b,f.x), mix( c, d,f.x),f.y);\n}\n\nfloat fbm(in vec2 pos,in float H){\n    float G = exp2(-H);\n    float f = 1.0;\n    float a = 1.0;\n    float t = 0.0;\n    vec2 pp = pos;\n    for(int i = 0; i < 12; i++){\n        \n        //accRot *= m * 2.;\n        pp *= a * 1.5;\n        t += a*noise(f*pp);\n        f *= 2.0;\n        a *= G;\n    }\n    return t;\n\n}\nfloat pattern( in vec2 p, out vec2 q,out vec2 r)\n{\n    q.x = fbm( 0.2 * p + vec2(0.0,0.0),.404 );\n    q.y = fbm( 0.9 * p + vec2(5.2,1.3),.707);\n    r.x = fbm( 0.5 * p + vec2(0.),.707);\n    r.y = fbm( 0.3 * p + vec2(4.2,5.1), .203);\n    q *= rot(q.x) * 2.02;\n\n    return fbm(p + q,.5) - 1.5;\n}\n\nfloat circleSDF(in vec2 p, float r){\n    \n    //p += 0.5;\n    float hitCircle = length(p) - r;\n    \n    return 1. - abs(mod(hitCircle - iTime * 2.5, PI *2.));\n    \n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n\n{\n    //float alt = sin(iTime * PI) * 0.01;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2. -1.;\n    uv.y *= iResolution.y/iResolution.x;\n\n    \n    uv *= 12.;\n    vec2 rUV = uv * rot(iTime * .15);\n    // Time varying pixel color\n    float f = fbm(uv,.7);\n    float rF = fract(fbm(uv,.7));\n    float fI = floor(f);\n    float fF = fract(f);\n    vec3 col = vec3(0.0);\n    vec3 rColor = vec3(.6,.0,1.);\n    col.r = circleSDF(rUV - 0.1,fF);\n    col.g = circleSDF(rUV - 0.21,fF);\n    col.b = circleSDF(rUV - 0.32,fF);\n    col = mix(col,rColor,abs(sin(iTime) / 1.2));\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}