{"ver":"0.1","info":{"id":"3l2SzR","date":"1564799526","viewed":194,"name":"Vignette function","username":"ttyy","description":"vignette","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["vignette"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define VIGNETTE 0.3\n#define ASPECT 1.\n// gamma only affects vignette\n#define GAMMA 1.8\n\n\nvec3 vignette( in vec3 col, in vec2 uv, in float aspect, in float amt, in float gamma )\n{\n    uv = uv * 2. - 1.;\t// [0:1] -> [-1:1]\n    uv.y *= aspect;\t\t// apply aspect correction (if not 1.)\n    float rf = sqrt(dot(uv, uv)) * amt;\n    float rf2_1 = rf * rf + 1.0;\n    float v = 1.0 / (rf2_1 * rf2_1);\n    col *= pow(v, gamma);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = mix(vec3(1.), texture(iChannel0, uv).rgb, 1.-(cos(iTime * (3.1415/8.)) * .5 + .5));\n\n    col = vignette(col, uv, ASPECT, VIGNETTE, GAMMA);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}