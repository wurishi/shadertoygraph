{"ver":"0.1","info":{"id":"WljyWt","date":"1595782401","viewed":80,"name":"3DPerlinNoiseBall","username":"Mario8664","description":"3D Perlin Noise Ball","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d","noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 hash(vec3 p)\n{\n\tp = vec3( dot(p,vec3(127.1,311.7, 74.7)),\n\t\t\t  dot(p,vec3(269.5,183.3,246.1)),\n\t\t\t  dot(p,vec3(113.5,271.9,124.6)));\n\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise(vec3 pos)\n{\n    vec3 i = floor(pos);\n    vec3 f = fract(pos);\n    \n    vec3 u = f*f*(3.0-2.0*f);\n    \n    vec3 v0 = hash(i);\n    vec3 v1 = hash(i + vec3(1.0, 0.0, 0.0));\n    vec3 v2 = hash(i + vec3(0.0, 1.0, 0.0));\n    vec3 v3 = hash(i + vec3(1.0, 1.0, 0.0));\n    vec3 v4 = hash(i + vec3(0.0, 0.0, 1.0));\n    vec3 v5 = hash(i + vec3(1.0, 0.0, 1.0));\n    vec3 v6 = hash(i + vec3(0.0, 1.0, 1.0));\n    vec3 v7 = hash(i + vec3(1.0, 1.0, 1.0));\n    \n    float c0 = dot(v0, f);\n    float c1 = dot(v1, f - vec3(1.0, 0.0, 0.0));\n    float c2 = dot(v2, f - vec3(0.0, 1.0, 0.0));\n    float c3 = dot(v3, f - vec3(1.0, 1.0, 0.0));\n    float c4 = dot(v4, f - vec3(0.0, 0.0, 1.0));\n    float c5 = dot(v5, f - vec3(1.0, 0.0, 1.0));\n    float c6 = dot(v6, f - vec3(0.0, 1.0, 1.0));\n    float c7 = dot(v7, f - vec3(1.0, 1.0, 1.0));\n    \n    float lerpX0 = mix(c0, c1, u.x);\n    float lerpX1 = mix(c2, c3, u.x); \n    float lerpX2 = mix(c4, c5, u.x);\n    float lerpX3 = mix(c6, c7, u.x);\n    \n    float lerpY0 = mix(lerpX0, lerpX1, u.y);\n    float lerpY1 = mix(lerpX2, lerpX3, u.y);\n    \n    return mix(lerpY0, lerpY1, u.z);\n}\n\nfloat noiseShape(vec3 pos)\n{\n    const mat3 rot = mat3( 0.00,  0.80,  0.60,\n                    -0.80,  0.36, -0.48,\n                    -0.60, -0.48,  0.64 );\n    float scale = 4.0;\n    float n = noise(scale * pos) * 0.5;pos = rot * pos * 2.01;\n    n += noise(scale * pos) * 0.25;pos = rot * pos * 2.02;\n    n += noise(scale * pos) * 0.125;pos = rot * pos * 2.03;\n    n += noise(scale * pos) * 0.0625;\n    n = 0.5 + 0.5 * n;\n    return n;\n}\n\nfloat distance1(vec3 pos)\n{\n\treturn length(pos) - 1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (-iResolution.xy + 2.0*fragCoord) / iResolution.y;\n    //vec3 pos = vec3(uv.x, uv.y, 1.02);\n    //float n = noiseShape(pos);\n\n    //Camera\n    vec4 m = iMouse / iResolution.xxxx;\n    \n    vec3 target = vec3(0.0, 0.0, 0.0);\n    float theta = 0.2 * iTime;\n    vec3 rotation = vec3(cos(theta), sin(iTime * 0.5) * 0.5 ,sin(theta));\n    \n    vec3 cameraPos = rotation * 5.0;\n    vec3 cameraForward = normalize(target - rotation);\n    vec3 cameraRight = normalize(cross(cameraForward, vec3(0.0, 1.0, 0.0)));\n    vec3 cameraUp = cross(cameraRight, cameraForward);\n    \n    vec3 ro = cameraPos;\n    vec3 rd = cameraForward * 2.0 + uv.x * cameraRight + uv.y * cameraUp;\n    rd = normalize(rd);\n    \n    float t = 0.0;\n    vec3 pos = ro;\n    vec3 col = texture(iChannel0, rd).xyz;\n    \n    for(int i = 0; i < 128; i++)\n    {\n    \tfloat d = distance1(pos);\n        if(d <= 0.001)\n        {\n            float n = noiseShape(pos + vec3(0.0, iTime*0.5, 0.0));\n            vec2 offset = vec2(0.001, 0.0);\n            vec3 normal = vec3(distance1(pos + offset.xyy) - distance1(pos - offset.xyy),\n                               distance1(pos + offset.yxy) - distance1(pos - offset.yxy),\n                               distance1(pos + offset.yyx) - distance1(pos - offset.yyx));\n            normal = normalize(normal);\n            //reflection\n            vec3 ref = texture(iChannel0, reflect(rd,normal)).xyz;\n            //fresnel\n            float fresnel = (1.0 - dot(normal, -rd));\n            fresnel = pow(fresnel, 2.0);\n            ref *= fresnel * 0.8;\n            //diffuse\n            float diffuse = clamp(dot(normal, normalize(vec3(1.0, 1.0, 0.0))), 0.0, 1.0);\n            diffuse = (diffuse + 0.5) / 2.0 + fresnel * 0.5;\n            diffuse = clamp(diffuse, 0.0, 1.0);\n        \tcol = vec3(n, n, n) * diffuse + ref;\n            break;\n        }\n        t += d;\n        pos = ro + rd * t;        \n    }\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}