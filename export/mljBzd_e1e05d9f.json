{"ver":"0.1","info":{"id":"mljBzd","date":"1694407698","viewed":27,"name":"Mandelbrot color variating help","username":"dieku","description":"mandelbrot set with color variating","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot","colors","set"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette(float t){\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263, 0.416, 0.557);\n    \n    return a + 2.*b*cos(6.28318*(c*t+d));\n}\n\nvoid zoomController(inout vec2 p)\n{\n    // Calcular el zoom basado en la posición del mouse\n    float zoomFactor = 1.0 + 0.1 * length(iMouse.xy - iResolution.xy / 2.0);\n\n    // Ajustar el centro del zoom basado en la posición del mouse\n    vec2 zoomCenter = vec2(iMouse.x / iResolution.x, iMouse.y / iResolution.y);\n\n    // Aplicar el zoom y el desplazamiento\n    p = (p - zoomCenter) / zoomFactor + zoomCenter;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    // Escala y desplazamiento para el conjunto de Mandelbrot\n    vec2 p = (2.0*fragCoord-iResolution.xy)/min(iResolution.y,iResolution.x);\n    \n   \n    vec2 z = p;\n    \n    // Iteraciones máximas y factor de escape\n    int iter = 0;\n    int maxIter = 80;\n    float escape = 4.0;\n    \n    // Calculamos el conjunto de Mandelbrot\n    while(iter < maxIter && dot(z, z) < escape)\n    {\n        z = vec2(z.x*z.x - z.y*z.y, 2.0*z.x*z.y) + p;\n        iter++;\n    }\n    \n    // Asignamos un color basado en el número de iteraciones\n    float hue = float(iter) / float(maxIter) ;\n    float d = length(p) * exp(-length(z));\n    fragColor = vec4(hue, palette(d*8.+iTime));\n}","name":"Image","description":"","type":"image"}]}