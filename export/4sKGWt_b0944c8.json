{"ver":"0.1","info":{"id":"4sKGWt","date":"1457105767","viewed":1685,"name":"Sky and Ground","username":"morgan3d","description":"Very fast environment for bringing up renderers without external data. Sky is based on elevated by iq.  Mouse to rotate.\n\nUsed in my Minmal OpenGL example http://g3d.cs.williams.edu/websvn/listing.php?repname=g3d&path=%2FG3D10%2Fsamples%2FminimalOpenGL%","likes":32,"published":1,"flags":0,"usePreview":0,"tags":["sky"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// License: BSD\n// by Morgan McGuire, @CasualEffects\n\nfloat hash(vec2 p) { return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); }\n\nfloat noise(vec2 x) {\n    vec2 i = floor(x), f = fract(x);\n\n\tfloat a = hash(i);\n    float b = hash(i + vec2(1.0, 0.0));\n    float c = hash(i + vec2(0.0, 1.0));\n    float d = hash(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\treturn mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\nfloat fbm(vec2 p) {\n\tconst mat2 m2 = mat2(0.8, -0.6, 0.6, 0.8);\n    \n    float f = 0.5000 * noise(p); p = m2 * p * 2.02;\n    f += 0.2500 * noise(p); p = m2 * p * 2.03;\n    f += 0.1250 * noise(p); p = m2 * p * 2.01;\n    f += 0.0625 * noise(p);\n    return f / 0.9375;\n}\n\nvec3 render(in vec3 light, in vec3 ro, in vec3 rd, in float resolution) {\n    vec3 col;\n    \n    if (rd.y < 0.0) {\n        // Hit ground plane y = 0 at this distance       \n    \tfloat t = -ro.y / rd.y;\n        \n        // Convert the hit point to a texture coordinate at meter scale\n        vec2 P = ro.xz + t * rd.xz;\n        vec2 Q = floor(P);\n        P = mod(P, 1.0);\n\n\n        // Apply procedural grid texture\n        const float gridLineWidth = 0.1;\n        \n        float res = clamp(2048.0 / resolution, 1.0, 3.0);\n        P = 1.0 - abs(P - 0.5) * 2.0;\n        float d = clamp(min(P.x, P.y) / (gridLineWidth * clamp(t + res * 2.0, 1.0, 2.0)) + 0.5, 0.0, 1.0);\n \n        float shade = mix(hash(100.0 + Q * 0.1) * 0.4, 0.3, min(t * t * 0.001, 1.0)) + 0.6;\n        col = vec3(pow(d, \n                       clamp(150.0 / (pow(max(t - 2.0, 0.1), res) + 1.0), 0.1, 15.0)\n                  )) * shade + 0.1;\n        \n    } else {        \n        // Sky with haze\t\t\n        col = vec3(0.3, 0.55, 0.8) * (1.0 - 0.8 * rd.y) * 0.9;\n        \n        // Sun\n        float sundot = clamp(dot(rd, light), 0.0, 1.0);\n        col += 0.25 * vec3(1.0, 0.7, 0.4) * pow(sundot, 8.0);\n        col += 0.75 * vec3(1.0, 0.8, 0.5) * pow(sundot, 64.0);\n\n        // Clouds\n        col = mix(col, vec3(1.0, 0.95, 1.0), 0.5 * \n                  smoothstep(0.5, 0.8, fbm((ro.xz + rd.xz * (250000.0 - ro.y) / rd.y) * 0.000008)));\n    }\n\t\n    // Horizon/atmospheric perspective\n    col = mix(col, vec3(0.7, 0.75, 0.8), pow(1.0 - max(abs(rd.y), 0.0), 8.0));\n    \n\treturn col;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tconst float verticalFieldOfView = 50.0 * 3.1415927 / 180.0;\n\n    vec3 cameraOrigin = vec3(-iTime, sin(iTime) + 2.1, 0.0);\n    float yaw = 2.0 * iMouse.x/iResolution.x;\n    float pitch = -2.0 * (iMouse.y / iResolution.y - 0.5);\n \n    if (iMouse.x == 0.0) {\n        // Shadertoy starting position\n        yaw = 1.0; pitch = 0.0;\n    }\n    \n    vec3 ro = cameraOrigin;\n    vec3 rd = normalize(vec3(fragCoord.xy - iResolution.xy / 2.0, iResolution.y * 0.5 / -tan(verticalFieldOfView * 0.5)));\n    \n    mat3 yawMatrix = mat3(cos(yaw), 0.0, -sin(yaw),\n                  0.0, 1.0, 0.0,\n                  sin(yaw), 0.0, cos(yaw));\n    \n    mat3 pitchMatrix = mat3(1.0, 0.0, 0.0,\n                  0.0, cos(pitch), sin(pitch),\n                  0.0, -sin(pitch), cos(pitch));\n\n    rd = yawMatrix * pitchMatrix * rd;\n\n    vec3 light = normalize(vec3(-0.8,0.3,-0.3));\n\n    vec3 col = render(light, ro, rd, iResolution.y);\n \n    // Gamma encode\n\tcol = pow(col, vec3(0.4545));\n\n    fragColor = vec4( col, 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}