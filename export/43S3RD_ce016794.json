{"ver":"0.1","info":{"id":"43S3RD","date":"1708230520","viewed":94,"name":"ShaderassignmentShader1","username":"jessesound","description":"just 4 you connor","likes":2,"published":1,"flags":64,"usePreview":0,"tags":["fractal","audio"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"lst3WB","filepath":"https://on.soundcloud.com/XPXcL","previewfilepath":"https://on.soundcloud.com/XPXcL","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define freq(f) texture(iChannel0, vec2(f, 0.15)).x * 0.9\nvec3 palette(float t)\n{\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263, 0.416, 0.557);\n\n    float interp = smoothstep(0.0, 1.0, t); // Smooth interpolation between a and b\n    return mix(a, b, interp) + c * cos(6.28318 * (t * d));\n}\n\nfloat avgFreq(float start, float end, float smoothstep) {\n    float div = 0.0;\n    float total = 0.0;\n    for (float pos = start; pos < end; pos += smoothstep) {\n        div += 1.0;\n        total += freq(pos);\n    }\n    return total / div;\n}    \n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float bassFreq = pow(avgFreq(0.0, 0.1, 0.01), 0.85);\n    float medFreq = pow(avgFreq(0.1, 0.6, 0.01), 0.85);\n    float topFreq = pow(avgFreq(0.6, 1.0, 0.01), 0.95);\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 q = uv - vec2(0.5, 0.5);\n    vec2 a = uv + mod(0.5, 0.5);\n    vec3 col = vec3(0.26, 0.15, 0.43);\n\n    float timeFactor = iTime * 0.21;  // Adjust the multiplier as needed\n\n    // Modulate the scaling and rotation based on audio frequencies\n    float scale = 1.0 + 0.5 * bassFreq;\n    float rotation = sin(medFreq * timeFactor) * 3.14;\n\n    // Apply scaling and rotation to uv coordinates\n    uv *= scale;\n    uv = mat2(cos(rotation), -sin(rotation), sin(rotation), cos(rotation)) * uv;\n\n    float r = 0.02 + 0.9 * cos(sin(atan(q.y, q.x)) * timeFactor * bassFreq / 6.3);\n    float d = 0.09 * 3.0 * cos(atan(a.y, a.x) * timeFactor * fract(a.x *= medFreq * 0.4));\n\n    col *= mix(r, r * 0.00009, length(q / d * 2.23 * sin(atan(cos(topFreq * 9.3)))));\n\n    vec2 uv0 = uv;\n    vec3 finalColor = col;\n\n    for (float i = 0.0; i < 4.0; i++)\n    {\n        uv = fract(uv * (medFreq )) - medFreq;\n\n        float distortion = length(uv ) * exp(-length(uv0));\n        float fractalTime = (timeFactor + i * (0.4 * topFreq)) * 0.465;\n\n        vec3 col = palette(length(uv0) + fractalTime);\n\n        distortion = sin(distortion /(bassFreq *.5) * 8.0 + fractalTime) / 8.0;\n        distortion = abs(distortion);\n\n        distortion = pow(0.01 / distortion, 1.2);\n\n        finalColor += col * distortion;\n    }\n\n    fragColor = vec4(finalColor,1.0);\n    }\n","name":"Image","description":"","type":"image"}]}