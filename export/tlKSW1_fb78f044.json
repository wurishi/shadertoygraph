{"ver":"0.1","info":{"id":"tlKSW1","date":"1582645116","viewed":289,"name":"Webcam tunnel","username":"stevekrouse","description":"Remix of iq's tunnel","likes":3,"published":1,"flags":2,"usePreview":0,"tags":["tunnel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Remixed by Steve Krouse 2020\n// Instead of a texture, fall down a cave of your webcam...\n//\n// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Compare naive implementation of texture fetching to gradient-discontinuity-aware\n// fetching. The naive approach produces a line of discontinuity in the left side\n// of the screen, if the viewport resolution is an odd number. With this technique\n// the artifact is gone.\n//\n// More info: https://iquilezles.org/articles/tunnel\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalized coordinates (-1 to 1 vertically)\n    vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n\n    // angle of each pixel to the center of the screen\n    float a = -atan(p.y,p.x);\n\n    #if 1\n    // cylindrical tunnel\n    float r = length(p);\n    #else\n    // squareish tunnel\n    float r = pow( pow(p.x*p.x,4.0) + pow(p.y*p.y,4.0), 1.0/8.0 );\n    #endif\n    \n    // index texture by (animated inverse) radious and angle\n    vec2 uv = vec2( 0.3/r + 0.5*iTime, a/(3.14159*2.0) );\n    \n    #if 0\n        // naive fecth color\n        vec3 col =  texture( iChannel0, uv ).xyz;\n\t#else\n        // fetch color with correct texture gradients, to prevent discontinutity\n        vec2 uv2 = vec2( uv.x, atan(p.y,abs(p.x))/(3.1415927*2.0) );\n        vec3 col = textureGrad( iChannel0, uv, dFdx(uv2), dFdy(uv2) ).xyz;\n\t#endif\n    \n    // darken at the center    \n    col = col*r;\n    \n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}