{"ver":"0.1","info":{"id":"Mc2SDh","date":"1706283190","viewed":112,"name":"Simple 2d Triangle","username":"Legendized","description":"This simple shader has a triangle struct, and a function to check if a point (vec2) is within that triangle. You can also drag the top of the triangle around with the mouse. There are some precision issues, where pixels will get filled in for no reason...","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["simple","triangle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Triangle {\n    vec2 a;\n    vec2 b;\n    vec2 c; \n};\n\nbool IsPointInTriangle(vec2 p, Triangle tri) { \n\n    //27-01-2024\n    //made some optimisations to remove the C calculations, since theyre completely unnecessary.\n\n    //Calculate normals for each vertex\n    vec2 normA = normalize(0.5*(normalize(tri.b-tri.a) + normalize(tri.c-tri.a)));\n    vec2 normB = normalize(0.5*(normalize(tri.a-tri.b) + normalize(tri.c-tri.b)));\n    \n    //Directions from p (the point) to each vertex\n    vec2 dirToA = normalize(p-tri.a);\n    vec2 dirToB = normalize(p-tri.b);\n    \n    //Some dot product magic\n    float ab = dot(normalize(tri.b-tri.a), normA);\n    float bc = dot(normalize(tri.c-tri.b), normB);\n    \n    //Compare previous values with dot products to check if point is within each \"cone\"\n    if (dot(normA, dirToA) <= ab) return false;\n    if (dot(normB, dirToB) <= bc) return false;\n    return true; \n} \n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) { \n    // pixel coordinates (from -1 to 1)\n    vec2 uv = fragCoord/iResolution.xy * 2.0 - vec2(1.0);\n    // basic uv color\n    vec3 col = vec3(uv, 0.0);\n    \n    //Uncomment for \"performance test\"\n    //for (int i = 0; i < 20000; i++) \n    {\n    Triangle triangle;\n    float aspect = iResolution.y / iResolution.x; //aspect for correction of rotation\n    triangle.a = vec2(-0.5, -0.5);\n    triangle.b = vec2(0.5, -0.5);\n    triangle.c = vec2(0.0, 0.5);\n    \n    if (IsPointInTriangle(uv, triangle)) col = vec3(1.0); \n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}