{"ver":"0.1","info":{"id":"fddXzB","date":"1643509647","viewed":135,"name":"Bouncing DVD","username":"rmccampbell7","description":"The DVD screensaver","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["bounce","dvd"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec2 STARTPOS = vec2(0,0);\nconst vec2 STARTVEL = 100.*vec2(2,1);\n// Ellipse radii\nconst vec2 R = vec2(50, 20);\nconst vec2 R2 = R*.3;\n// Text size\nconst float TS = R.x;\n// Ellipse + text bbox\nconst vec2 BBOX = 2.*R + vec2(0, .8*TS);\n\nfloat sdChar(vec2 p, int char, float scale) {\n    p /= scale;\n    if (max(abs(p.x), abs(p.y)) > .5) return (length(p)-.25)*scale;\n    p += .5;\n    vec2 cell = vec2(char % 16, 15 - char / 16);\n    return (texture(iChannel0, (cell + p) / 16.).a - .5) * scale;\n}\n\nfloat sdEllipse(vec2 p, vec2 ab) {\n    // symmetry\n\tp = abs( p );\n\n    // find root with Newton solver\n    vec2 q = ab*(p-ab);\n\tfloat w = (q.x<q.y)? 1.570796327 : 0.0;\n    for (int i=0; i<3; i++) {\n        vec2 cs = vec2(cos(w),sin(w));\n        vec2 u = ab*vec2( cs.x,cs.y);\n        vec2 v = ab*vec2(-cs.y,cs.x);\n        w = w + dot(p-u,v)/(dot(p-u,u)+dot(v,v));\n    }\n    \n    // compute final point and distance\n    float d = length(p-ab*vec2(cos(w),sin(w)));\n    \n    // return signed distance\n    return (dot(p/ab,p/ab)>1.0) ? d : -d;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 dim = iResolution.xy - BBOX;\n    vec2 pos = STARTPOS + STARTVEL*iTime;\n    pos = mod(pos, 2.*dim);\n    pos = mix(pos, 2.*dim - 1. - pos, greaterThanEqual(pos, dim));\n    pos += R;\n    float d = max(sdEllipse(fragCoord - pos, R),\n                  -sdEllipse(fragCoord - pos, R2));\n    d = min(d, sdChar(fragCoord - (pos + vec2(-.6*TS,R.y+.4*TS)), 68, TS));\n    d = min(d, sdChar(fragCoord - (pos + vec2( .0*TS,R.y+.4*TS)), 86, TS));\n    d = min(d, sdChar(fragCoord - (pos + vec2( .6*TS,R.y+.4*TS)), 68, TS));\n    vec3 ballCol = 0.5 + 0.5*cos(iTime+vec3(0,2,4));\n    vec3 col = smoothstep(-1., 1., -d) * ballCol;\n\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}