{"ver":"0.1","info":{"id":"XsfBzn","date":"1494493355","viewed":162,"name":"Test Sound Benou","username":"Benou_De_Nice","description":"Code","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGzn","filepath":"/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","previewfilepath":"/media/ap/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\n#define FREQ 8\nvec4 values[FREQ];\n\nfloat sdBox( vec3 p, vec3 b ){\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nmat2 rot(in float a) {\n\treturn mat2(cos(a),sin(a),-sin(a),cos(a));\t\n}\n\n// main distance function\nfloat de(vec3 p) {\n    \n    //p = mod(p, vec3(20.0)) - vec3(10.0);\n    \n    \n    float de = length(p) - 5.0;\n    de = sdBox(p, vec3(5.0))-0.3;\n    \n    for (int i = 0 ; i < FREQ ; i++) {\n        float f = float(i) / float(FREQ-1);\n        vec4 value = values[i];\n        \n        float theta = f * PI * 1.5;\n        vec3 dir = vec3(cos(theta), sin(theta), 0);\n        dir.yz *= rot(f*PI*1.0);\n        \n        float v = dot(p,dir);\n        \n        de += sin(v*2.0*pow(2.0, f) + iTime*1.0)*0.25*value.x;\n    }\n\n\treturn de;\n} \n\n// normal function\nvec3 normal(vec3 p) {\n\tvec3 e = vec3(0.0, 0.001, 0.0);\n\treturn normalize(vec3(\n\t\tde(p+e.yxx)-de(p-e.yxx),\n\t\tde(p+e.xyx)-de(p-e.xyx),\n\t\tde(p+e.xxy)-de(p-e.xxy)));\t\n}\n\nvec4 myTexture(vec2 texCoord) {\n\t//return texture(iChannel0, texCoord);\n\ttexCoord *= 5.0;\n\tvec2 f = fract(texCoord)-vec2(0.5);\n\tfloat v = smoothstep(0.0, 0.75, length(f));\n\treturn vec4(mix(vec3(0, 1, 0), vec3(1, 1, 0), v), 1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    vec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n\tuv.y *= iResolution.y / iResolution.x;\n\t\n\tvec3 from = vec3(-50, 0, 0);\n\tvec3 dir = normalize(vec3(uv*0.2, 1.0));\n\tdir.xz *= rot(3.1415*.5);\n\t\n\tvec2 mouse=(iMouse.xy / iResolution.xy - 0.5) * 0.5;\n\tif (iMouse.z < 1.0) mouse = vec2(0.0);\n\t\n\tmat2 rotxz = rot(iTime*0.0652+mouse.x*5.0);\n\tmat2 rotxy = rot(0.3-mouse.y*5.0);\n\t\n\tfrom.xy *= rotxy;\n\tfrom.xz *= rotxz;\n\tdir.xy  *= rotxy;\n\tdir.xz  *= rotxz;\n\n\tfloat totdist = 0.0;\n\tbool set = false;\n\tvec3 norm = vec3(0);\n\t\n    //fragColor = myTexture(uv);\n\t//return;\n\t\n\t\n    for (int i = 0 ; i < FREQ ; i++) {\n        float f = float(i) / float(FREQ-1);\n        values[i] = texture(iChannel0, vec2(f, 0));\n\t\t//values[i] = texture( vec2(uFloatAvgFreq,uFloatAvgFreq) , vec2(f, 0));\n\t\t//values[i] = myTexture(vec2(f, 0));\n    }\n\t\n\tfor (int steps = 0 ; steps < 200 ; steps++) {\n\t\tif (set) continue;\n\t\tvec3 p = from + totdist * dir;\n        \n\t\tfloat dist = de(p)*0.5;\n        \n\t\ttotdist += dist;\n\t\tif (dist < 0.01) {\n\t\t\tset = true;\n\t\t}\n\t}\n    \n    vec3 p = from + totdist * dir;\n    norm = normal(p);\n    \n    if (set) {\n        \n        vec3 light = normalize(vec3(-1, 2, 3));\n        float l = max(dot(norm, light), 0.0);\n       fragColor = vec4(vec3(l), 1.0);\n        fragColor.rgb = norm*0.5+0.5;\n    } else {\n        fragColor = vec4(0, 0.2, 0, 1);\n\n    }\n\t\n\t\n\t\n\t\n}","name":"Image","description":"","type":"image"}]}