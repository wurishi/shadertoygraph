{"ver":"0.1","info":{"id":"3dfBRn","date":"1587565314","viewed":307,"name":"Loading Ellipse","username":"Paltoquet","description":"A basic loading indicator, you can change the scale of the ellipse, the width of the border ...","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["loadingellipse"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n/***\nAuthor: Thibault Ober\nThere is no license attach feel free to enjoy  \n***/\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float PI = 3.14159;\n    \n    vec3 color = vec3(0.448,0.800,0.785);\n    vec3 background = vec3(0.418,0.421,0.440);\n    \n    float width = iResolution.x;\n    float height = iResolution.y;\n    float ellipseScale = 2.0;\n    \n    float animationSpeed = 0.5;\n\t\n    float x = (fragCoord.x / iResolution.x);\n    float y = (fragCoord.y / iResolution.y);\n    \n    x = (x * 2.0) - 1.0;\n    y = (y * 2.0) - 1.0;\n    \n    float theta = atan(y, x);\n    float tanTheta = y/x;\n\t\n    float a = width / ellipseScale;\n    float b = height / ellipseScale;\n\n    //intersections with the ellipse and the function y = x * tan(theta) https://math.stackexchange.com/questions/22064/calculating-a-point-that-lies-on-an-ellipse-given-an-angle\n    float x1 = a*b / sqrt(b*b + a*a * tanTheta * tanTheta);\n    float y1 = a*b*tanTheta / sqrt(b*b + a*a * tanTheta * tanTheta);\n    \n    vec2 point = vec2(x, y) * max(width, height); // work in a square space\n    vec2 pointOnEllipse = vec2(x1, y1);\n    \n    float distanceToEllipse = abs(length(pointOnEllipse) - length(point)) / max(width, height);\n    float borderWidth = 0.120;\n    float r = 1.0 - (distanceToEllipse / borderWidth);\n    \n    float current = (theta + PI); //[0 - 360]\n    current = mod(current + PI / 2.0, 2.0 * PI);  //offset to put the beguining at the top\n    current = current / (2.0 * PI); //ratio for animation\n    float angular = mod(iTime * animationSpeed, 1.0); \n    if(current < angular){\n    \tfragColor = vec4(r * color, 1.0);\n    } else {\n        fragColor = vec4(r * background, 1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}