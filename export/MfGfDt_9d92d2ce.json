{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"// The MIT License\n// Copyright Â© 2022 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Signed distance to a staircase\n// List of some other 2D distances: https://www.shadertoy.com/playlist/MXdSRf\n// and iquilezles.org/articles/distfunctions2d\n\n// --- MY PART: ---\n// simply detect changes in direction to find the positions, which are in the MAT.\n\n// --- MY PART: ---\nvec3 sdf_checker(float d, float d2, float d3, float d4, float d5, float h) {\n    vec3 col = vec3(0.0);\n    // detect local consistency errors in the sdf:\n    col.r += float(max(max(abs(d - d2), abs(d - d3)), max(abs(d - d4), abs(d - d5))) > 1.0001*h);\n    // draw the medial axis transform (MAT)\n    col += float(length(vec2(d2 - d4, d3 - d5)) < 1.9999*h && abs(d) > (abs(d2) + abs(d3) + abs(d4) + abs(d5)) / 4.0);\n    return col;\n}\n#define CHECK(sdf,pos,h) sdf_checker(sdf(pos), sdf(pos+vec2(1.0,0.0)*h), sdf(pos+vec2(0.0,1.0)*h), sdf(pos-vec2(1.0,0.0)*h), sdf(pos-vec2(0.0,1.0)*h), h)\n\n// Iq's part:\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\n\nfloat sdSquareStairs( in vec2 p, in float s, in float n )\n{\n    // constant for a given shape\n    const float kS2 = sqrt(2.0);\n    float w = 2.0*n+1.0;\n    \n    // pixel dependent computations\n    p = vec2( abs(p.y+p.x), p.y-p.x ) * (0.5/s);\n\n    float x1 = p.x-w;\n    float x2 = abs(p.x-2.0*min(round(p.x/2.0),n))-1.0;\n    \n    float d1 = dot2( vec2(x1, p.y) + clamp(0.5*(-x1-p.y), 0.0, w  ) );\n    float d2 = dot2( vec2(x2,-p.y) + clamp(0.5*(-x2+p.y), 0.0, 1.0) );\n\n    return sqrt(min(d1,d2)) *\n           sign(max(x1-p.y,(x2+p.y)*kS2)) *\n           s*kS2;\n}\n\n// rewritten iq's sdf, so it only takes one parameter\nfloat stairs_sdf(in vec2 p) {\n    // animate\n    float w = 1.0/8.0;\n    float n = floor( 3.95*(0.5 + 0.5*cos(iTime*3.0)) );\n    return sdSquareStairs(p, w, n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalized pixel coordinates\n    float s = iResolution.y;\n    vec2 p = (2.0*fragCoord-iResolution.xy)/s;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/s;\n \n    // distance\n    float d = stairs_sdf(p);\n   \n    // coloring\n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n    col *= 1.0 - exp(-7.0*abs(d));\n    col *= 0.8 + 0.2*cos(160.0*abs(d));\n    col = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n\n    // MY PART:\n    col += CHECK(stairs_sdf, p, 3.0/s);\n\n    // interactivity\n    if( iMouse.z>0.001 )\n    {\n    d = stairs_sdf(m);\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MfGfDt","date":"1734815940","viewed":74,"name":"SDF Checker","username":"weasel","description":"This shader displays the medial axis transform of iq's stairs. It also shows errors if the SDF is badly approximated.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["2d","distancefield","sdf","distance","staircase","stairs","stair"],"hasliked":0,"parentid":"ftVSDd","parentname":"Square Stairs - distance"}}