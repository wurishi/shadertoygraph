{"ver":"0.1","info":{"id":"Dt2czD","date":"1691535551","viewed":128,"name":"tetrahedral-octahedral honeycomb","username":"jt","description":"Proof-of-concept: implementation of a tetrahedral-octahedral honeycomb DDA as special case of a hyper-voxel DDA.\n","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["3d","raytracing","raycasting","voxel","4d","honeycomb","dda","cubic","step","tesselation","octahedral","tetrahedral","simplectic","alternated"],"hasliked":0,"parentid":"mllcD2","parentname":"Triangle Prisms via Hyper-Voxels"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/Dt2czD tetrahedral-octahedral honeycomb dda 2023 by jt\n// based on https://www.shadertoy.com/view/mllcD2 Triangle Prisms via Hyper-Voxels DDA written 2023\n// based on https://www.shadertoy.com/view/mlfXD7 Triangle DDA via Voxel DDA Slice\n// based on https://www.shadertoy.com/view/mtfXDM Branchless Voxel Raycasting Tex2\n// clean-up of https://www.shadertoy.com/view/7dK3D3 Branchless Voxel Raycasting Tex\n// using voxel DDA of https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4\n// (with loop optimization by kzy), DDA based on http://lodev.org/cgtutor/raycasting.html\n// adding distance and normal recovery and lifted to step through hypervoxels instead.\n\n// Proof-of-concept:\n// implementation of a tetrahedral-octahedral honeycomb DDA\n// (aka alternated cubic honeycomb)\n// as special case of a hyper-voxel DDA.\n// https://en.wikipedia.org/wiki/Tetrahedral-octahedral_honeycomb\n\n// tags: 3d, raytracing, raycasting, voxel, 4d, honeycomb, dda, cubic, step, tesselation, octahedral, tetrahedral, simplectic, alternated\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\n#define DIST_MAX 1000.0\n\n#define MAX_RAY_STEPS 80\n\nfloat torus(vec3 p, vec2 t)\n{\n    return length(vec2(length(p.xy) - t.x, p.z)) - t.y;\n}\n\nbool example()\n{\n    return false;//fract(iTime / 10.0) < 0.5;\n}\n\n// Is there a shorter way to implement strictly POSITIVE integer-modulo?\nint mod_positive(int a, int b)\n{\n    // TODO: codegolf this line\n    return (a > 0 && b < 0) ? (a - 1) % b + b + 1 : (a < 0 && b > 0) ? (a + 1) % b + b - 1 : a % b;\n}\n\n#define ESSENTIAL_MATRIX\n\n#ifdef ESSENTIAL_MATRIX\n#else\nvec4 flatten(vec4 v)\n{\n    vec4 n = vec4(1,1,1,1);\n    return v - dot(v,n)*n/dot(n,n); // remove component along diagonal\n}\n#endif\n\nvec4 tetrahedral_octahedral_trace(vec3 ray_pos_orig, vec3 ray_dir_orig) // step triangles by stepping through voxels along plane orthogonal to main diagonal (additional fourth dimension to step along prism height) by jt\n{\n#ifdef ESSENTIAL_MATRIX\n    // coordinate-system along space orthogonal to diagonal (1,1,1,1)\n    mat3x4 T =\n        mat3x4 // every column represents the direction of one axis of the 4d coordinate system projected to 3d\n        (\n            normalize(vec4(+1.0,-1.0, 0.0, 0.0)),\n            normalize(vec4( 0.0, 0.0,+1.0,-1.0)),\n            normalize(vec4(+1.0,+1.0,-1.0,-1.0))\n            //normalize(vec4(+1.0,+1.0,+1.0,+1.0))\n        );\n/*\n    // coordinate-system along space orthogonal to diagonal (1,1,1,1) VARIANT (rotated 45 degrees around z axis) for center view\n    mat3x4 T =\n        mat3x4\n        (\n            normalize(vec4(+1.0,-1.0,-1.0,+1.0)),\n            normalize(vec4(-1.0,-1.0,+1.0,+1.0)),\n            normalize(vec4(-1.0,+1.0,-1.0,+1.0))\n        );\n*/\n    // step through voxels along space orthogonal to main diagonal (1,1,1,1)\n    vec4 ray_pos = T * ray_pos_orig.xyz;\n    vec4 ray_dir = T * ray_dir_orig.xyz;\n#else\n    // coordinate-system along space orthogonal to diagonal (1,1,1,1)\n    mat4 T =\n        mat4\n        (\n            normalize(vec4(+1.0,-1.0, 0.0, 0.0)),\n            normalize(vec4( 0.0, 0.0,+1.0,-1.0)),\n            normalize(vec4(+1.0,+1.0,-1.0,-1.0)),\n            normalize(vec4(+1.0,+1.0,+1.0,+1.0))\n        );\n/*\n    // coordinate-system along space orthogonal to diagonal (1,1,1,1) (rotated 45 degrees around z axis) for center view\n    mat4 T =\n        mat4\n        (\n            normalize(vec4(+1.0,-1.0,-1.0,+1.0)),\n            normalize(vec4(-1.0,-1.0,+1.0,+1.0)),\n            normalize(vec4(-1.0,+1.0,-1.0,+1.0)),\n            normalize(vec4(+1.0,+1.0,+1.0,+1.0))\n        );\n*/\n    // step through voxels along space orthogonal to main diagonal (1,1,1,1)\n    vec4 ray_pos = T * vec4(ray_pos_orig.xyz, 0);\n    vec4 ray_dir = T * vec4(ray_dir_orig.xyz, 0);\n#endif\n    // dda initialization (four lines) adapted from https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4 implementing https://lodev.org/cgtutor/raycasting.html\n    ivec4 tile_pos = ivec4(floor(ray_pos)); // round down position to get tile position\n    vec4 delta_dist = 1.0 / abs(ray_dir); // reciprocal absolute ray direction\n    ivec4 ray_step = ivec4(sign(ray_dir)); // sign of ray direction\n    vec4 side_dist = (sign(ray_dir) * (vec4(tile_pos) - ray_pos) + (sign(ray_dir) * 0.5) + 0.5) * delta_dist; // initial distances to nearest walls by dimension\n\n    for (int i = 0; i < MAX_RAY_STEPS; i++)\n    {\n        // dda core (three lines) adapted from https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4 implementing https://lodev.org/cgtutor/raycasting.html\n        bvec4 nearest = lessThanEqual(side_dist.xyzw, min(min(side_dist.yzwx, side_dist.zwxy), side_dist.wxyz)); // component is true if nearest wall in that dimension\n        side_dist += vec4(nearest) * delta_dist; // sign of ray direction\n        tile_pos += ivec4(vec4(nearest)) * ray_step; // step to next tile in direction of nearest wall\n#ifdef ESSENTIAL_MATRIX\n        vec3 projected = vec4(tile_pos)*T;\n#else\n        vec3 projected = vec3((vec4(tile_pos)*T).xyz); // NOTE: after transforming back w component should be 0 here so we can drop it\n#endif\n        float d = length(vec4(nearest) * (side_dist - delta_dist)); // assume ray_dir normalized\n        bool solid = false;\n        if(example())\n        {\n            //solid = (torus(ray_pos_orig+ray_dir_orig*d, vec2(9.0, 3.0)) < 0.0);\n            solid = torus(projected, vec2(9.0, 3.5)) < 0.0;\n        }\n        else\n            //solid = length(vec4(tile_pos)) < 7.0; // 4d sphere (before converting cell position back to 3d)\n            solid = length(projected) < 6.9; // 3d sphere XXX why do we have to subtract 0.1 here?!\n\n        // octahedron\n        //solid = max(abs(projected.x), abs(projected.y)) < (6.0- abs(-0.+projected.z/sqrt(2.0)));\n\n        //if(mod_positive(tile_pos.x+tile_pos.y+tile_pos.z+tile_pos.w,2)==1) solid = false;\n        float flip = mod_positive(tile_pos.x+tile_pos.y+tile_pos.z+tile_pos.w,2)==1 ? 1.0 : -1.0;\n\n        if(solid)\n        {\n            // encode tetrahedron/octahedron in distance\n            // Calculate the normal-vector directly from the nearest-mask\n#ifdef ESSENTIAL_MATRIX\n            return\n                vec4\n                (\n                    normalize((vec4(nearest)*vec4(-ray_step)))*T,\n                    d*flip\n                );\n#else\n            //return vec4((inverse(T)*normalize(flatten((vec4(nearest)*vec4(-ray_step))))).xyz, d*flip);\n            //return vec4((normalize(flatten((vec4(nearest)*vec4(-ray_step))))*T).xyz, d*flip);\n            return vec4((normalize((vec4(nearest)*vec4(-ray_step)))*T).xyz, d*flip);\n#endif\n        }\n    }\n\n    return vec4(-ray_dir_orig, DIST_MAX); // sky-sphere\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    //I = 2.0 * I.xy / R - 1.0;\n    //I.x *= R.x / R.y;\n    I = (2.0 * I - R) / R.y; // concise pixel-position mapping thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    //if(iMouse.y < iResolution.y / 2.0)\n    //    yaw = 1.0*pi-yaw;\n    //float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    float pitch = -pi/4.0 - 1.5 * pi * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : 1.25 * pi/2.0;\n\n    vec3 ray_pos = vec3(0.0, 0.0, -25.0);\n    vec3 ray_dir = vec3(I.x, I.y, 2.0); // NOTE: un-normalized direction appears to work fine here!\n    //ray_dir = normalize(ray_dir); // looks like ray-direction does not need to be normalized\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n/*\n    // center view: coordinate-system along plane orthogonal to diagonal (1,1,1)\n    mat3 M =\n        mat3\n        (\n            normalize(vec3(+1,-1, 0)),\n            normalize(vec3(-1,-1,+2)),\n            normalize(vec3(-1,-1,-1))\n        );\n*/\n    ray_pos = M * ray_pos;\n    ray_dir = M * ray_dir;\n    ray_pos.z += 0.5;\n\n    vec3 color = vec3(0);\n    vec4 result = tetrahedral_octahedral_trace(ray_pos, ray_dir);\n    bool code = result.w >= 0.0; // decode type (tetrahedron/octahedron)\n    result.w = abs(result.w);\n    result.xyz *= dot(result.xyz, ray_dir) < 0.0 ? +1.0 : -1.0; // repair front-back\n\n    if(result.w < DIST_MAX)\n    //if(result.w < 12.0 + 5.0 * cos(iTime))\n    {\n        vec3 dst = ray_pos + ray_dir * result.w;\n        //color = vec3(1);\n        //color = 0.5 + 0.5 * result.xyz; // visualize normals\n        color = code ? vec3(1,0.1,0) : vec3(0,0.1,1);\n\n        vec3 ambient = vec3(0.05);\n        vec3 diffuse = vec3(0.0);\n\n        if(false)\n        {\n            result.xyz = -result.xyz; // ???\n            vec3 light_dir = normalize(vec3(5,2,1));\n            float shadow = tetrahedral_octahedral_trace(dst+result.xyz*0.01,-light_dir).w < DIST_MAX ? 0.0 : 1.0;\n            float brightness = shadow * max(0.0, dot(result.xyz, light_dir));\n\n            diffuse += brightness;\n        }\n\n        if(false)\n        {\n            vec3 light_dir = normalize(vec3(5,2,1));\n            float shadow = tetrahedral_octahedral_trace(dst+result.xyz*0.01,-light_dir).w < DIST_MAX ? 0.0 : 1.0;\n            float brightness = abs(dot(result.xyz, light_dir));\n\n            diffuse += brightness;\n        }\n\n        if(true)\n        {\n            float t = iTime * 2.0 * pi / 20.0;\n\n            // multiple close-up point-lights to verify visually that normals are correct\n            vec3 light_pos0 = 8.0*vec3(-cos(t),-sin(t),0.0);\n            vec3 light_pos1 = 8.0*vec3(cos(t),0.0,sin(t));\n            vec3 light_pos2 = 8.0*vec3(0.0,-cos(t),-sin(t));\n            vec3 light_diff0 = light_pos0 - dst;\n            vec3 light_diff1 = light_pos1 - dst;\n            vec3 light_diff2 = light_pos2 - dst;\n            float light_dist0 = length(light_diff0);\n            float light_dist1 = length(light_diff1);\n            float light_dist2 = length(light_diff2);\n            float shadow0 = tetrahedral_octahedral_trace(dst+result.xyz*0.01, light_pos0 - dst).w < light_dist0 ? 0.0 : 1.0;\n            float shadow1 = tetrahedral_octahedral_trace(dst+result.xyz*0.01, light_pos1 - dst).w < light_dist1 ? 0.0 : 1.0;\n            float shadow2 = tetrahedral_octahedral_trace(dst+result.xyz*0.01, light_pos2 - dst).w < light_dist2 ? 0.0 : 1.0;\n            vec3 light_dir0 = light_diff0 / light_dist0;\n            vec3 light_dir1 = light_diff1 / light_dist1;\n            vec3 light_dir2 = light_diff2 / light_dist2;\n            vec3 light_color = vec3(1);\n            float brightness = 0.0;\n            brightness += shadow0 * max(0.0, dot(result.xyz, light_dir0)) / (light_dist0 * light_dist0);\n            brightness += shadow1 * max(0.0, dot(result.xyz, light_dir1)) / (light_dist1 * light_dist1);\n            brightness += shadow2 * max(0.0, dot(result.xyz, light_dir2)) / (light_dist2 * light_dist2);\n            diffuse += 10.0 * light_color * brightness;\n        }\n\n        color *= ambient + diffuse;\n    }\n    else\n    {\n        color = vec3(0);\n    }\n    color = tanh(color); // roll-off / soft-clamp overly bright colors\n    fragColor = vec4(sqrt(color), 1.0); // gamma\n    //fragColor = vec4(color, 1.0); // no gamma\n}\n","name":"Image","description":"","type":"image"}]}