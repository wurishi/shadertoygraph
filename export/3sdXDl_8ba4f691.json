{"ver":"0.1","info":{"id":"3sdXDl","date":"1573144572","viewed":67,"name":"Raymarching [3] Lighting","username":"camelcoder","description":"Raymarching","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sd_sphere(vec3 p, float r) \n{\n    return length(p) - r;\n}\n\nfloat map(vec3 pos)\n{\n    // create floor\n    float d = pos.y - -0.5;\n    \n    vec3 p = pos;\n    \n    p.xz += vec2(sin(iTime), cos(iTime));\n    \n    d = min(d, sd_sphere(p, 0.5));\n    \n    d = min(d, sd_sphere(p - vec3(0.3, 0.3, 0), 0.25));\n    d = min(d, sd_sphere(p - vec3(-0.3, 0.3, 0), 0.25));\n    \n    return d;\n}\n\nvec3 calc_normal(vec3 p)\n{\n    vec2 e = vec2(0.0001, 0.0);\n    return normalize(vec3(map(p + e.xyy) - map(p - e.xyy),\n                          map(p + e.yxy) - map(p - e.yxy),\n                          map(p + e.yyx) - map(p - e.yyx)));\n}\nfloat cast_ray(vec3 ro, vec3 rd)\n{\n    float total = 0.0;\n    for (int i = 0; i < 100; ++i) {\n        vec3 pos = ro + total * rd;\n        \n        float dist = map(pos);\n        \n        if (dist < 0.001) break; // to close\n        total += dist;\n        if (total > 20.0) { // to far\n            total *= -1.0;\n            break;\n        }\n    }\n    return total;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    fragCoord *= 2.0;\n\tvec2 p = (fragCoord - iResolution.xy ) / iResolution.y;\n\n    vec3 ro = vec3(0.0, 0.0, -2.0); // ray origin\n    vec3 rd = normalize(vec3(p, 1.5)); // ray direction\n    \n    vec3 col = vec3(0.6, 0.7, 0.8) - 0.4 * rd.y; // sky\n    col = mix(col, vec3(0.7, 0.75, 0.8), exp(-10.0 * rd.y)); // horizon\n   \n    float total = cast_ray(ro, rd);\n    \n    if (total > 0.0) {\n        vec3 pos = ro + total * rd;\n        vec3 norm = calc_normal(pos);\n        \n        vec3 mate = vec3(0.18); // Don't do full white's\n        \n        // dot(a, b) -> how aligned are a and b\n        vec3 sun = normalize(vec3(0.8, 0.4, 0.2));\n        float sun_dif = clamp(dot(norm, sun), 0.0, 1.0);\n        float sky_dif = clamp(0.5 + 0.5 * dot(norm, vec3(0, 1, 0)), 0.0, 1.0);\n        \n        col = mate * vec3(7.0, 4.5, 3.0) * sun_dif;\n        col += mate * vec3(0.5, 0.8, 0.9) * sky_dif;\n    }\n    col = pow(col, vec3(0.4545)); // gamma correction\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}