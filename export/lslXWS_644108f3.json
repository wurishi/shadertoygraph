{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// reference:\n// https://www.shadertoy.com/view/Xds3zN\n// https://iquilezles.org/articles/distfunctions\n\nvec3 opRep( vec3 p )\n{\n\tvec3 c = vec3( 2.0, 1.0, 1.0 );\n\treturn mod(p,c)-0.5*c;\n}\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\nfloat opS( float d1, float d2 )\n{\n\treturn max(-d1,d2);\n}\n\nvec3 opTwist( vec3 p )\n{\n    float  c = cos(00.1*p.z + iTime*0.2);\n    float  s = sin(00.1*p.z + iTime*0.2);\n    mat2   m = mat2(c,-s,s,c);\n    return vec3(m*p.xy,p.z);\n}\n\n\nfloat sdBox( vec3 p, vec3 b )\n{\n\tvec3 d = abs(p) - b;\n\treturn min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nvec2 map( in vec3 pos )\n{\n\t//float box = sdBox( pos-vec3( 0.0,0.1, 0.0), vec3(0.29, 0.09, 0.29) );\n\tfloat box = sdBox( opRep( opTwist(pos-vec3(0.0, 0.0, 0.0)) ), vec3(0.29, 0.09, 0.29) );\n\t//float innerbox = sdBox( pos-vec3( 0.0, 0.1, 0.0), vec3(0.17, 0.1, 0.17) );\n\tfloat innerbox = sdBox( opRep( opTwist(pos-vec3( 0.0, 0.0, 0.0)) ), vec3(0.17, 0.2, 0.17) );\n\t\n\tfloat logo = opS( innerbox, box );\n\t\n\t//res = opU( res, vec2( logo, 14.0 ) );\n\tvec2 res = vec2( logo, 0.0 );\n\treturn res;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n  \tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n  \tvec3 nor = vec3(\n      \t  map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n      \t  map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n      \t  map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\n\nvec2 castRay( in vec3 ro, in vec3 rd, in float maxd )\n{\n    float precis = 0.001;\n    float h=precis*2.0;\n    float t = 0.0;\n    float m = -1.0;\n    for( int i=0; i<60; i++ )\n    {\n        if( abs(h)<precis||t>maxd ) continue;//break;\n        t += h;\n        vec2 res = map( ro+rd*t );\n        h = res.x;\n        m = res.y;\n    }\n\n    if( t>maxd ) m=-1.0;\n    return vec2( t, m );\n}\n\n\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    \tvec3 col = vec3(0.0);\n    \tvec2 res = castRay(ro,rd,20.0);\n    \tfloat t = res.x;\n    \tfloat m = res.y;\n\n    \tvec3 pos = ro + t*rd;\n    \tvec3 nor = calcNormal( pos );\n\n    \tcol = vec3(0.6) + 0.4*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n\n\t\tvec3 lig = normalize( vec3(0.0, 1.0, 0.0) );\n    \tfloat dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n\n    \tcol = col*dif;\n\n    \tcol *= exp( -0.01*t*t );\n\n\n    \treturn vec3( clamp(col,0.0,1.0) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\tvec2 q = fragCoord.xy/iResolution.xy;\n\tvec2 p = -1.0+2.0*q;\n\tp.x *= iResolution.x/iResolution.y;\n\t\n\t// camera \n\t// vec3 ro = vec3( -0.5+1.5*cos(0.1*time), 1.0, 0.5 + 1.5*sin(0.1*time) );\n\tvec3 ro = vec3( 1.0*cos(0.2*iTime), 0.3, 1.0*sin(0.1*iTime) );\n\t//vec3 ro = vec3( 0.8, 1.0, -0.8 );\n\t//vec3 ta = vec3( -0.5, -0.4, 0.5 );\n\tvec3 ta = vec3( 0.0, 0.2, 0.0 );\n    \n\t// camera tx\n\tvec3 cw = normalize( ta-ro );\n\tvec3 cp = vec3( 0.0, 1.0, 0.0 );\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n\tvec3 rd = normalize( p.x*cu + p.y*cv + 1.5*cw );\n\n  \n\tvec3 col = render( ro, rd );\n\n\tcol = sqrt(sqrt( col ) );\n\t\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lslXWS","date":"1406518749","viewed":211,"name":"mystery box 3","username":"dydx","description":"raymarching","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""}}