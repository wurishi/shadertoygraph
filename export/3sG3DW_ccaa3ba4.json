{"ver":"0.1","info":{"id":"3sG3DW","date":"1570234152","viewed":48,"name":"Fractal Fragments","username":"zerovolts","description":"Mandelbrot Set fractal","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"precision highp float;\n\n// Change this to adjust the point that is zoomed into\nconst vec2 center = vec2(-.090001, .650007);\n\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec2 complexMult(vec2 c1, vec2 c2) {\n    return vec2(\n        (c1.x * c2.x) - (c1.y * c2.y),\n        (c1.x * c2.y) + (c1.y * c2.x)\n    );\n}\n\nfloat mandelbrot(vec2 c, int maxIter) {\n    vec2 z = vec2(0.);\n    for (int i = 0; i < maxIter; i++) {\n        z = complexMult(z, z) + c;\n        if (length(z) > 2.) return float(i) / float(maxIter);\n    }\n    return 1.;\n}\n\nvec2 camera(vec2 fragCoord, vec2 resolution, vec2 center, float zoom) {\n    float minDimension = min(resolution.x, resolution.y);\n    vec2 offset = .5 * resolution;\n    return ((fragCoord - offset) / minDimension ) * zoom + center;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float zoom = (5. / float(pow(1.5, iTime)));\n    vec2 uv = camera(fragCoord, iResolution.xy, center, zoom);\n    float m = mandelbrot(uv, int(iTime * 16.) + 1);\n    vec3 col = hsv2rgb(vec3(\n        sin(m),\n        sin(m * 16.) / 4. + 0.6,\n        sin(m * 16.) / 4. + .6\n    ));\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}