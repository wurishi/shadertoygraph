{"ver":"0.1","info":{"id":"ct2BW1","date":"1694003355","viewed":16,"name":"jsort͏","username":"01000001","description":"jump sort. check far, then closer, then closer, until done","likes":0,"published":3,"flags":32,"usePreview":0,"tags":["thing"],"hasliked":0,"parentid":"ml2fDz","parentname":"sort͏"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 O, vec2 U ){\n    \n    vec2 r = iResolution.xy;\n    vec2 uv = U/r;\n    \n\n    O = vec4(smoothstep(1./r.y, 0., abs(texture(iChannel0, vec2(uv.x, 0)).x-uv.y)));\n    \n    // Smoothstep is an intentional design choice to give randomized brightness to particles\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const uint k = 1103515245U;\nvec3 hash( uvec3 x )\n{\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    \n    return vec3(x)*(1.0/float(0xffffffffU));\n}\n\nconst int p = 5;\nvec3 nhash( uvec3 x ){\n    vec3 t = vec3(0);\n    for(int i = p; i-->0;){\n        t += hash(x + uvec3(i));\n    }\n    t /= float(p);\n    return t;\n}\n\nvoid mainImage( out vec4 O, vec2 U ){\n    if (U.y < 1.){\n        if (iFrame < 5){\n            O = vec4(0);\n            O.x = hash(uvec3(U.x, iDate.w, iDate.z)).x;\n        } else {\n            O = texture(iChannel0, U/iResolution.xy);\n         \n            \n            // Assuming we have a GPU, this is great.\n            // Sort here\n\n            int c = int(iResolution.x)>>int(max(1., float(iFrame-6)/10.));\n\n            bool d = (int(U.x) + iFrame*c)%(2*c) >= c;\n\n            float v = texelFetch(iChannel0, ivec2(int(U.x) + (d?c:-c), 0), 0).x;\n\n            if (v == 0.) return;\n\n            O.x = (v < O.x && d) || (v > O.x && !d)?v:O.x;\n\n        }\n    } else {\n        O = vec4(0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}