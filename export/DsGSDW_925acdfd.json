{"ver":"0.1","info":{"id":"DsGSDW","date":"1681084370","viewed":86,"name":"Checkerboard Pattern (w/Shades)","username":"Xonatron","description":"Checkerboard pattern with adjustable number of shades. Thanks to Michael Pohoreski for a bug fix (it was not working for 4, 6, 8, 10, etc. shades for some reason.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["checkerboard","pattern","checkerboardpattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Matthew Doucette, Xona Games\n// https://xona.com/\n// Friday, April 9th, 2023\n// ----------------------------\n\n// credits:\n// --------\n//\n// original algorithm from Alundra:\n// https://www.shadertoy.com/view/lt2XWK\n//\n// Michael Pohoreski for the bug fix (see comments)\n// https://www.shadertoy.com/user/MichaelPohoreski\n//\n// modifications:\n// --------------\n//\n// to add shades, i modified Alundra's algorithm\n// by making the pattern mask variable between 0.0..1.0 (multiple shades)\n// instead of being only 0.0 or 1.0 (two shades).\n//\n// bugs:\n// -----\n//\n// it creates artifacts for 4, 6, 8, etc. shades.\n\n// constants\n#define SIZE 64.0 // size of squares\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float shades = floor(iTime) + 1.0; // 1, 2, 3, 4, ... shades\n    \n    vec2 pos = floor(fragCoord / SIZE); // pixel image coordinate (position)\n    float div = 1.0 + (1.0 / (shades - 1.0)); // divisor\n    float mask = mod(pos.x + mod(pos.y - SIZE, div), div); // pattern mask: 0.0..1.0 (0.0 or 1.0 for checkerboard pattern without shades)\n    fragColor = mask * vec4(1.0, 1.0, 1.0, 1.0);\n}","name":"Image","description":"","type":"image"}]}