{"ver":"0.1","info":{"id":"DlKSRz","date":"1685929449","viewed":63,"name":"ss 6/4/23","username":"swindesr","description":" ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","colorful","gradient","animation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14;\n\nvec3 palette( in float t )\n{\n    vec3 a = vec3(0.821,0.328,0.242);\n    vec3 b = vec3(0.659,0.481,0.896);\n    vec3 c = vec3(0.612,0.340,0.296);\n    vec3 d = vec3(2.820,3.026,-0.273);\n    return a + b*cos(6.28318*(c*t+d));\n}\n\nfloat sdBox( in vec2 p, in vec2 b)\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nmat2 rotationMatrix(float angle)\n{\n\tangle *= PI / 180.0;\n    float s=sin(angle), c=cos(angle);\n    return mat2( c, -s, s, c );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0, 0.0, 0.0);\n    \n    uv *= rotationMatrix(iTime * 2.0 * PI);\n    for (float i = 0.0; i < 3.0; i++)\n    {\n        uv = fract((sin(iTime * 1.4) * 0.5 + 1.2) * uv) - 0.5;\n        //boxes\n        float d = sdBox(uv, vec2(0.5, 0.5)) * exp(-length(uv0));\n\n        //circles\n        //float d = length(uv) * exp(-length(uv0));\n\n        vec3 c = palette(length(uv0) + iTime*0.3 + i*0.3);\n        d = sin(8.0 * d + iTime) / 8.0;\n        d = abs(d);\n        d = pow(0.01 / d, 1.3);\n\n        finalColor += c * d;\n    }\n\n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}