{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"float time;\n\nfloat smoothTri(vec2 p, vec2 p0, vec2 p1, vec2 p2, float smoothness)\n{\n    vec3 e0, e1, e2;\n\n    e0.xy = normalize(p1 - p0).yx * vec2(+1.0, -1.0);\n    e1.xy = normalize(p2 - p1).yx * vec2(+1.0, -1.0);\n    e2.xy = normalize(p0 - p2).yx * vec2(+1.0, -1.0);\n\n    e0.z = dot(e0.xy, p0) - smoothness;\n    e1.z = dot(e1.xy, p1) - smoothness;\n    e2.z = dot(e2.xy, p2) - smoothness;\n\n    float a = max(0.0, dot(e0.xy, p) - e0.z);\n    float b = max(0.0, dot(e1.xy, p) - e1.z);\n    float c = max(0.0, dot(e2.xy, p) - e2.z);\n\n    return smoothstep(smoothness * 2.0, 1e-7, length(vec3(a, b, c)));\n}\n\nfloat layer(vec2 p, float smoothness, float index)\n{\n    float a = 0.0;\n    for(int i = 0; i < 8; i += 1)\n    {\n        float u0 = (float(i + 0) / 8.0 * 2.0 - 1.0) * 3.0;\n        float u1 = (float(i + 1) / 8.0 * 2.0 - 1.0) * 3.0;\n\n        float y = 0.0 + abs(cos(u0 * 130.0 + index)) * 0.9;\n\n        vec2 o = vec2(index * 0.1 - 4.0, abs(cos(time * 3.0 + index + u0)));\n\n        vec2 p0 = vec2(u0, 0.0) + o;\n        vec2 p1 = vec2(u1, 0.0) + o;\n        vec2 p2 = vec2((u0 + u1) * 0.5, y) + o;\n\n        a += smoothTri(p, p0, p1, p2, smoothness);\n    }\n    return a;\n}\n\nfloat vignet(vec2 t)\n{\n    return max(0.0,1.0 - (t.x * t.x * t.x * t.x + t.y * t.y * t.y * t.y));\n}\n\nfloat vignet2(vec2 t)\n{\n    return max(0.0,t.x * t.x + t.y * t.y);\n}\n\nvec3 scene(vec2 p)\n{\n    vec3 col = vec3(0.0);\n    for(int i = 0; i < 5; i += 1)\n    {\n        float z = float(5 - i);\n        float z2 = abs((float(5 - i)) - 0.0) * 2.0;\n        float c = (10.0 - z2) * 0.15;\n        float f = z2 * z2 * 0.002 * (1.0 + vignet2(p) * 10.0) * 0.5;\n        float index = float(i) * 16.0;\n        vec2 o = vec2(cos(time), 0.7);\n        float a0 = clamp(layer(p * z + o, f, index), 0.0, 1.0);\n        float a1 = clamp(layer(p * z + o, f * 30.0, index), 0.0, 1.0);\n\n        vec3 cc = vec3(0.1, 0.4, 1.0);\n\n        col = mix(col, vec3(c) * cc, a0) + mix(col, vec3(c) * cc, a1) * 0.2;\n    }\n    return col;\n}\n\nfloat jitter()\n{\n    return fract(gl_FragCoord.x * 0.1943244 + gl_FragCoord.y * 0.525634);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor.rgb = vec3(0.0);\n    float j = jitter();\n    vec2 p = (fragCoord.xy / iResolution.xy - vec2(0.5)) * 2.6;\n    p.y *= iResolution.y / iResolution.x;\n    for(int i = 0; i < 2; i += 1)\n    {\n        time = iTime + (float(i) + j) / 40.0;\n        fragColor.rgb += scene(p);\n    }\n    fragColor.rgb = sqrt(fragColor.rgb * 0.5 * vignet(p)) + jitter() / 255.0;\n    fragColor.a = 1.0;\n}\n\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4sSSzG","date":"1412981268","viewed":2697,"name":"Microscopic Bouncing Triangles","username":"fizzer","description":"This is an old shader I made back in 2012. I think it looks nice enough for a small Shadertoy. It's also the shader that I used to make my profile picture back when I joined.","likes":47,"published":1,"flags":0,"usePreview":0,"tags":["triangles","blur","defocus"],"hasliked":0,"parentid":"","parentname":""}}