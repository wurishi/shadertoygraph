{"ver":"0.1","info":{"id":"tlGfDD","date":"1614332479","viewed":81,"name":"Tower of the Ocean dreams","username":"Nashoute","description":"On the ocean waves","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["ati"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//thank you Iq https://iquilezles.org/articles/distfunctions\n//and thank you GreenChicken for your tutorials https://www.shadertoy.com/user/GreenChicken\n// And my thanks to Flopine as well https://www.shadertoy.com/user/Flopine\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define dt(speed) fract(iTime*speed)\n#define looptime(speed) abs(-1.+2.*dt(speed))\n\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat sdBox( vec3 p, vec3 b){\n    vec3 q = abs(p) -b;\n    return length(max(q,0.)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\nfloat sdRoundedCylinder( vec3 p, float ra, float rb, float h )\n{\n  vec2 d = vec2( length(p.xz)-2.0*ra+rb, abs(p.y) - h );\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rb;\n}\n\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n  vec3 q = abs(p);\n  return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n\nvec3 opRepet(vec3 pos,vec3 bound){\n    return mod(pos+0.5*bound,bound)-0.5*bound;\n}\n\n\nvec2 opSmoothUnionVec2( vec2 d1, vec2 d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2.x-d1.x)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\nvec3 opSmoothUnionVec3( vec3 d1, vec3 d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2.x-d1.x)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\nvec3 opUnion( vec3 d1, vec3 d2 ) { \n    return (d1.x < d2.x) ? d1 : d2; \n}\n\n\nfloat opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\n\nfloat opIntersection( float d1, float d2 ) { return max(d1,d2); }\n\nvec3 map(vec3 pos){\n    vec3 pos2 = pos;\n    float offsetY = sin(pos2.x+iTime*1.5)/1.;\n    float offsetz = sin(pos2.x+iTime)*1.2;\n    \n    \n    vec3 world = vec3(pos.y+offsetY,0.0,64.0);\n    \n    vec3 prism = vec3(sdTriPrism(pos+vec3(0.,0.,-1.5), vec2(2.,1.)),0.5,64.);\n    pos2*=vec3(rot(2.));\n    vec3 prism2 = vec3(sdTriPrism(vec3(pos2.x-2.,pos2.y,pos2.z-0.8 ), vec2(2.,1.)),0.5,64.);\n    vec3 prism3 = vec3(sdTriPrism(vec3(pos2.x+1.1,pos2.y,pos2.z-0.6 ), vec2(2.,1.)),0.5,64.);\n    \n    vec3 towerBase = vec3( sdRoundedCylinder(pos,1.,0.5,8. ),pos.y/10.*pos.x*0.5,64.);\n    vec3 towerMid = vec3( sdRoundedCylinder(pos+vec3(0.,-8.,0.),1.4,0.2,0.6 ), 0.8,64.);\n    \n    \n    \n    world = opSmoothUnionVec3(world,prism,0.5);\n    world = opSmoothUnionVec3(world,prism2,0.5);   \n    world = opSmoothUnionVec3(world,prism3,0.5);\n    world = opSmoothUnionVec3(world,towerBase,0.4);\n    world = opSmoothUnionVec3(world,towerMid,0.2);\n    \n    for(int i = 0; i<8;i++){\n        vec3 pillar = vec3( sdRoundedCylinder(pos+vec3(sin(float(i)/1.)*2.,-10.1,cos(float(i)/1.)*2. ),0.1,0.,1.1 ), 0.5,64.);\n        world = opSmoothUnionVec3(world,pillar,0.2);\n    }\n    \n    towerMid = vec3( sdRoundedCylinder(pos+vec3(0.,-12.,0.),1.2,0.2,0.3 ), 0.8,64.);\n    world = opSmoothUnionVec3(world,towerMid,0.2);\n\n\n    return world;\n}\n\nvec2 CastRay(vec3 ro, vec3 rd){\n    float c = 0.0; //si y'a contact, on aura la distance\n    int nbMax = int( map(ro + rd*c).z );\n    \n    for(int i = 0; i<nbMax; i++){\n    \n        vec3 ray = map(ro + rd*c);\n        \n        if(ray.x < (0.01*c)){\n            return vec2(float(i)/float(nbMax),ray.y);\n        }\n        \n        c+=ray.x;\n    }\n    \n    return vec2(-1.0, 0.0);\n}\n\nvec3 render(vec3 ro,vec3 rd){ //rayon origin, rayon direction\n    \n    vec2 contact = CastRay(ro,rd);         \n    \n    \n    vec3 col = vec3(0.);\n    \n    if(contact.x == -1.){\n        col = vec3(0.0);\n        //col = palette(iTime,vec3(0.8,0.4,0.32),vec3(0.4,0.4,0.32),vec3(0.7,0.8,0.32),vec3(0.4,0.4,0.32));\n    }else{\n        col = vec3(1.-contact.x)*palette(contact.y+iTime/4.,vec3(0.5),vec3(0.5),vec3(1.),vec3(0.0,0.33,0.67) );\n    }\n    return col;\n}\n\nfloat procedural_2d (vec2 uv)\n{\n    float size = 0.1 + sin(looptime(.8))*1.5;\n    float circle = step(0.15,\n                        abs(length(uv)-size)\n                        );\n    return circle;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float fov = 2.; //fieldOfView\n    vec2 uv = 2.*fragCoord/iResolution.xy-1.;\n    uv.x*=iResolution.x/iResolution.y;\n    \n    \n    //effects\n    uv.x = uv.x-sin(uv.x+iTime)/4.;    \n    uv = floor(uv*48.)/48.;\n    uv = uv+vec2((sin(uv.x)+1.)/2.)/2.*rot(iTime*0.);\n    \n    //Camera\n    vec3 cameraPos = vec3(4.+sin(iTime)*6.,7.,10.+cos(iTime)*6.);\n    vec3 cameraTarget = vec3(0.,2.+(sin(iTime)+1.)*3.,0.);\n    \n    //view Direction/ RayD Direction\n    vec3 forward = normalize(cameraTarget-cameraPos);\n    vec3 right = normalize(cross(vec3(0.,-1.,0.),forward));\n    vec3 up = normalize(cross(right,forward));\n    vec3 viewDir = normalize(uv.x * right+uv.y*up+forward*fov);\n\n    \n    vec3 col = vec3(uv.x,uv.y,0.0)/4.;\n    \n    vec3 rend = render(cameraPos,viewDir);\n    if(rend == vec3(0.)){\n        if( fract(uv.x-0.05)-uv.y <= 0.3 && fract(-uv.x+0.05)-uv.y <= 0.3) {\n            rend = palette(iTime,vec3(0.8,0.4,0.32),vec3(0.4,0.4,0.32),vec3(0.7,0.8,0.32),vec3(0.4,0.4,0.32));\n        }\n        \n    }\n    \n    col = rend;\n    \n    col = floor(col*32.)/32.;\n    \n    fragColor = vec4(col,1.0);\n    \n}","name":"Image","description":"","type":"image"}]}