{"ver":"0.1","info":{"id":"DlGBWy","date":"1702427287","viewed":37,"name":"CSE 167 HW5 Chi Zhang","username":"ayaaa99woojin","description":"This is a homework template for a homework for UCSD CSE 167.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["boids"],"hasliked":0,"parentid":"ddtyDs","parentname":"UCSD CSE 167 Boids template"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Smooth HSV2RGB from https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb(in vec3 c)\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 color = vec4(0.5, 0.5, 0.5, 1.0);\n    // Loop over all boids\n    vec4 bcolor = vec4(0.0, 0.0, 0.0, 1.0);\n    bool hit = false;\n    for (int i = 0; i < NUM_BOIDS; i++) {\n        ivec2 tex_pos = ivec2(i % int(iChannelResolution[0].x),\n                                                i / int(iChannelResolution[0].x));\n        vec4 pos_vel = texelFetch(iChannel0, tex_pos, 0);\n        if (distance(fragCoord, pos_vel.xy) < BOIDS_SIZE) {\n            vec3 rgb = hsv2rgb(vec3((float(i)+0.5) / float(NUM_BOIDS), 1.0, 0.9));\n            bcolor += vec4(rgb, 1.0);\n            hit = true;\n        }\n    }\n    if (hit) {\n        color = bcolor;\n    }\n\n    // Output to screen\n    fragColor = color;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    if (iFrame == 0) {\n        // initialize the buffer\n        vec4 pos_vel = texture(iChannel1, fragCoord/iChannelResolution[1].xy);\n        pos_vel.xy = iResolution.xy / 2.0 + (pos_vel.xy - 0.5) * iResolution.xy * 0.2;\n        pos_vel.zw = (pos_vel.zw - 0.5) * iResolution.xy * 1.0;\n        fragColor = pos_vel;\n        return;\n    }\n    ivec2 iFragCoord = ivec2(fragCoord);\n    // \n    vec4 pos_vel = texelFetch(iChannel0, iFragCoord, 0);\n    vec2 pos = pos_vel.xy;\n    vec2 vel = pos_vel.zw;\n    // ID of the current Boid\n    int my_id = int(iFragCoord.y) * int(iResolution.x) + int(iFragCoord.x);\n\n    // Implement Boids here\n    // Bonus for User Interaction Implemented\n    \n    float s_max = 10.0;\n    float s_min = 5.0;\n    \n    float d_s = 30.0;\n    float d_v = 150.0;\n    \n    float a_s = 0.02;\n    float a_c = 0.001;\n    float a_a = 0.03;\n    float a_b = 0.5;\n    \n    float d_left = 200.0;\n    float d_right = iResolution.x - 200.0;\n    float d_top = 160.0;\n    float d_bottom = iResolution.y - 160.0;\n    \n    \n    // For Mouse Click\n    float a_m = 0.6;\n    float d_m = 100.0;\n   \n\n    \n    // Seperation Force, Cohesion Force, and Alignment Force\n    float Ns = 0.0;\n    float Nv = 0.0;\n    vec2 avg_diff = vec2(0.0, 0.0);\n    vec2 avg_pos = vec2(0.0, 0.0);\n    vec2 avg_vel = vec2(0.0, 0.0);\n    \n    for(int i = 0; i <NUM_BOIDS; i++){\n        ivec2 cur = ivec2(i%int(iChannelResolution[0].x), i/int(iChannelResolution[0].x));\n        vec2 cur_pos = texelFetch(iChannel0, cur, 0).xy;\n        vec2 cur_vel = texelFetch(iChannel0, cur, 0).zw;\n        int cur_id = int(cur_pos.y) * int(iResolution.x) + int(cur_pos.x);\n        if(cur_id != my_id){\n            float dis = sqrt(pow(pos.x-cur_pos.x,2.0)+pow(pos.y-cur_pos.y,2.0));\n            if(dis < d_s){\n                avg_diff += pos - cur_pos;\n                Ns += 1.0;\n            }\n            if(dis < d_v){\n                avg_pos += cur_pos;\n                avg_vel += cur_vel;\n                Nv += 1.0;\n            }\n        }\n    }\n    \n    if (Ns > 0.0){\n        avg_diff = avg_diff/Ns;\n    }\n    if (Nv > 0.0){\n        avg_pos = avg_pos/Nv;\n        avg_vel = avg_vel/Nv;\n    }\n    \n    vec2 f_s = avg_diff;\n    vec2 f_c = avg_pos - pos;\n    vec2 f_a = avg_vel - vel;\n  \n   \n    // Boundary Force\n    float left = 0.0;\n    float right = 0.0;\n    float top = 0.0;\n    float bottom = 0.0;\n    if (pos.x<d_left){\n        left = 1.0;\n    }\n    if (pos.x>d_right){\n        right = 1.0;\n    }\n    if (pos.y<d_top){\n        top = 1.0;\n    }\n    if (pos.y>d_bottom){\n        bottom = 1.0;\n    }\n    vec2 f_b = vec2(left-right, top-bottom);\n    \n    // Bonus: Mouse Click Force\n    vec2 f_m = vec2(0.0, 0.0);\n    if (iMouse.z > 0.0) {\n        float mouse_dis = sqrt(pow(pos.x-iMouse.x,2.0)+pow(pos.y-iMouse.y,2.0));\n        if (mouse_dis < d_m){\n            f_m = pos - iMouse.xy;\n        }\n    }\n\n    // Total Force\n    vec2 force = a_s*f_s + a_c*f_c + a_a*f_a + a_b*f_b + a_m*f_m;\n    \n    // Update Velocity\n    vel += force;\n    if(length(vel)>0.0){\n        if(length(vel)>s_max){\n            vel = vel * (s_max/length(vel));\n        }\n        if(length(vel)<s_min){\n            vel = vel * (s_min/length(vel));\n        }\n    }   \n    // Update Position\n    pos += vel;\n    fragColor = vec4(pos, vel);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define NUM_BOIDS 200\n#define BOIDS_SIZE 10.0\n","name":"Common","description":"","type":"common"}]}