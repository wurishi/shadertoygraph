{"ver":"0.1","info":{"id":"mlKGDd","date":"1684903833","viewed":74,"name":"Procedural Starfield","username":"sreichman","description":"Procedural starfield texture using sine and mod to generate randomness","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["stars"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool intersects(vec2 pos) {\n\treturn abs(mod(3.0*sin(pos.x), 2.0) - mod(1.5*sin(pos.y), 2.0)) < 0.0001;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tfloat grid_length = 10000.0;\n    float radius = 5.0;\n    vec2 uv = fragCoord.xy;\n    fragColor = vec4(0.0,0.0,0.0,1.0);\n\tvec2 pos = uv;\n\tif(mod(uv, 0.008).x < 0.0001) {\n\t\tradius *= 3.0;\n\t}\n\tif(intersects(pos)) {\n\t\tfragColor += 1.0;\n\t} else {\n\t\tfor(int x = int(uv.x - radius); x < int(uv.x + radius); x++) {\n\t\t\tfor(int y = int(uv.y - radius); y < int(uv.y + radius); y++) {\n\t\t\t\tpos = vec2(float(x), float(y));\n\t\t\t\tif(intersects(pos)) {\n\t\t\t\t\tfloat dist = distance(uv, pos); \n\t\t\t\t\tif(dist < radius) {\n\t\t\t\t\t\tfloat factor = 0.75 / dist;\n\t\t\t\t\t\tfragColor += factor;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n    fragColor.g = fragColor.g / 1.5;\n    \n}\n","name":"Image","description":"","type":"image"}]}