{"ver":"0.1","info":{"id":"ls3SDB","date":"1461195680","viewed":315,"name":"PRF Fixed 8_9","username":"akohdr","description":"Pre-renders a font sprite sheet during first frame in bufA.  \nUse as a texture with helper funcs in a multipass shader for text support.\n","likes":10,"published":1,"flags":32,"usePreview":0,"tags":["2d","text","font","sprite","multipass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by Andrew Wild - akohdr/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Pre rendered 8-bit ASCII fixed width font\n// Uses a sprite sheet rendering of font from bufA to blit characters to Image\n\n// use texture filter 'linear' for pseudo hinting\n// use texture filter 'nearest' for crisp thin font\n\n// font size\n// (should match sprite sheet in bufA)\n#define FONT_DIMS vec2(8,9)\n//#define FONT_DIMS vec2(9,10)\n//#define FONT_DIMS vec2(16,18)\n\n#define MAP(a,b,c) if(a<b)return c;\n#define ANY(v) (v.x || v.y || v.z || v.w)\n#define STENCIL(k,s,K) if(s.w>0.)k=K;\n\n#define BLK vec4(.0,.0,.0,1.)\n#define GRY vec4(.5,.5,.5,1.)\n#define WHT vec4(1.,1.,1.,1.)\n#define RED vec4(1.,.0,.0,1.)\n#define GRN vec4(.0,1.,.0,1.)\n#define BLU vec4(.0,.0,1.,1.)\n#define YEL vec4(1.,1.,.0,1.)\n#define ORG vec4(1.,.5,.0,1.)\n#define PNK vec4(1.,.0,.5,1.)\n#define MAG vec4(1.,.0,1.,1.)\n#define CYN vec4(0.,1.,1.,1.)\n#define PRP vec4(.5,.0,.5,1.)\n\nvec4 palette(const in float a) \n{\n    MAP(a, 0.5, BLK)\n    MAP(a, 1.5, WHT)    \n    MAP(a, 2.5, RED)\n    MAP(a, 3.5, GRN)    \n    MAP(a, 4.5, BLU)    \n    MAP(a, 5.5, YEL)\n    MAP(a, 6.5, ORG)    \n    MAP(a, 7.5, PRP)    \n    MAP(a, 8.5, CYN)\n    MAP(a, 9.5, GRY)\n    return BLK;\n}\n\n#define ANY_IF(a,b,c,d,r) if(a)return r;if(b)return r;if(c)return r;if(c)return r;if(d)return r;\n\n// font sprite sheet texture lookup\nvec4 fntTex(const in vec2 p, const in vec3 xyc)\n{\n\tvec2 pc = p - xyc.xy;\n\t// Cascaded if version of test just feels smoother/faster in full screen\n    ANY_IF(pc.x>FONT_DIMS.x, pc.y>FONT_DIMS.y,\n           pc.x<0., pc.y<0.,vec4(0)); // early exit if p outside sprite\n    \n    float c = xyc.z;\n    pc += FONT_DIMS * floor(vec2(c/32., mod(c,32.)).yx+1.);\n    return texture(iChannel0, pc / iResolution.xy);\n}\n\n// old version\n/*\nvec4 fntTex(const in vec2 p, const in vec3 xyc)\n{\n\tvec2 pc = p - xyc.xy;\n    bvec4 bv = bvec4(greaterThan(pc, FONT_DIMS),lessThan(pc,vec2(0)));\n    if(ANY(bv)) return vec4(0); // early exit if p outside sprite\n    \n    float c = xyc.z;\n    vec2 rc = FONT_DIMS * floor(vec2(c/32., mod(c,32.)).yx+1.),\n         uv = (pc + rc) / iResolution.xy;\n    return texture(iChannel0, uv);\n}\n*/\n\n// Is reassignment or branch more efficient? (disassembly...)\nvoid renderChar(inout vec4 k, const in vec2 p, const in vec3 xyc)\n{\n    vec4 rf = fntTex(p, xyc);\n//    k = (rf.w>0.) ? rf : k;\n//    if(rf.w>0.) k = rf;\n    STENCIL(k, rf, rf);\n}\n\nvoid renderChar(inout vec4 k, const in vec2 p, const in vec3 xyc, const in vec4 K)\n{\n//    k = (fntTex(p, xyc).w>0.) ? K : k;\n//    if(fntTex(p, xyc).w>0.) k = K;\n    STENCIL(k, fntTex(p, xyc), K);\n}\n\nvec2 ellipse(float p, float t, vec2 r) \n{\n    float f = t + p/4.15;\n    return r * vec2(sin(f), cos(f));\n}\n\nvoid regular_typewriter(inout vec4 k, inout vec3 xyc, const in vec2 p)\n{\n    k += fntTex(p, xyc); \n    xyc.x += FONT_DIMS.x-2.;\n}\n\nvoid wavy_typewriter(inout vec4 c, inout vec3 xyc, const in vec2 p)\n{\n    vec4 rainbow = palette(mod(xyc.x/(FONT_DIMS.x-2.)+3., 10.));\n    vec3 t = xyc;\n\tt.y += 20.*sin(xyc.x*.1*cos(5.+iTime/5.));    \n    renderChar(c, p, t, rainbow); \n    xyc.x += FONT_DIMS.x-2.;\n}\n\n// inefficient but you get the idea\n// (multipass through text framebuffer would be better...)\nvoid msg(inout vec4 fragColor, in vec2 fragCoord, vec3 xyc, bool wavy) {\n    const int sp=32,\n        \n              a=97,b=a+1,c=b+1,d=c+1,e=d+1,f=e+1,g=f+1,h=g+1,i=h+1,\n              j=i+1,k=j+1,l=k+1,m=l+1,n=m+1,o=n+1,p=o+1,q=p+1,r=q+1,\n              s=r+1,t=s+1,u=t+1,v=u+1,w=v+1,x=w+1,y=x+1,z=y+1,\n        \n              A=65,B=A+1,C=B+1,D=C+1,E=D+1,F=E+1,G=F+1,H=G+1,I=H+1,\n              J=I+1,K=J+1,L=K+1,M=L+1,N=M+1,O=N+1,P=O+1,Q=P+1,R=Q+1,\n              S=R+1,T=S+1,U=T+1,V=U+1,W=V+1,X=W+1,Y=X+1,Z=Y+1;\n\n    #define TW1 regular_typewriter\n    #define TW2 wavy_typewriter\n    #define _(c) {xyc.z=float(c);if(wavy)TW1(fragColor, xyc, fragCoord);else TW2(fragColor, xyc, fragCoord);}\n\n    //the quick brown fox jumps over the lazy dog\n\t_(T)_(h)_(e)_(sp)_(Q)_(u)_(i)_(c)_(k)_(sp)_(B)_(r)_(o)_(w)_(n)_(sp)_(F)_(o)_(x)_(sp)\n    _(J)_(u)_(m)_(p)_(s)_(sp)_(O)_(v)_(e)_(r)_(sp)_(T)_(h)_(e)_(sp)_(L)_(a)_(z)_(y)_(sp)\n    _(D)_(o)_(g)_(43)\n}\n    \nvoid fontDemo(inout vec4 k, const in vec2 p, float rf) {\n\n\tfloat t = iTime;\n    vec2 scT = vec2(sin(t),cos(t)),\n               ir = iResolution.xy,\n               ir2 = ir/2.;\n    vec3 v = vec3(vec2(ir2.x,.65*ir.y),0);\n    \n    for(int i=0; i<26; i++)\n    {\n        float f = float(i);\n\t    vec4 rainbow = palette(mod(f+2., 10.));\n        \n\t    renderChar(k, p, \n                   v + vec3(ellipse(f, t/2., vec2(ir2.x/2.,80./rf)), 90-i), \n                   vec4(scT.xy,mod(f,2.),1));\n\n        renderChar(k, p, \n                   v + vec3(ellipse(f, .1+t/2., vec2(ir2.x/2.,80./rf)), 122-i), \n                   vec4(scT.xy,mod(f,2.),1));\n        \n\t    renderChar(k, p, \n                   v + vec3(ellipse(f,-t, vec2(60)/rf), 97+i), \n                   rainbow);\n    }\n\n    msg(k, p, vec3(ir2.x-130., .25*ir.y, 0), true);\n    msg(k, p, vec3(ir2.x-130., .25*ir.y, 0), false);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    bool isPreview = iResolution.y<250.;\n\tvec2 uv = fragCoord/iResolution.xy;\n    \n    fragColor = vec4(0);\n    \n    // output some text with font\n    fontDemo(fragColor, fragCoord, isPreview ? 1.8 : 1.);\n\n    if(!isPreview){\n        // show whole font sprite sheet (green)\n        vec4 tex = texture(iChannel0, uv);\n        STENCIL(fragColor, tex, vec4(0,tex.z,0,1))\n    }\n\n    // background (avoid texture hit when possible)\n    if(fragColor.w<.1) fragColor = texture(iChannel1,uv.yx/2.);\n    \n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Created by Andrew Wild - akohdr/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Experiment to pack simple fixed font into mat3 literal glyphs (i.e 3x3 floats)\n// (there are issues on iOS and likely other mobile platforms....)\n\n// Glyph literal definitions format (choose ONE)\n//\n// all defs are converted into floats when stored in mat3\n// the mantissa accuracy limits the width of usable scanline \n// lower bits can be lost at higher bpp when msb bits are present (think about it)\n// higher bpp allows more palette colours in the glyphs at expense of usable width\n// bin literals presented as ints thus not directly editable in source\n\n// 4bpp - 16 colours\t\t // W missing right line (resolved narrower), various dot artifacts\n//#define GLYPH_DEFS_HEX\n\n// 3.5bpp - 10 colours\t\t // seemingly cleanest render\n#define GLYPH_DEFS_DEC\n\n// 3bpp - 8 colours          // unresolved issues...\n//#define GLYPH_DEFS_OCT\n\n// 1bpp - 2 colours\t\t\t // pending... currently ints interpretted as dec\n//#define GLYPH_DEFS_BIN\n\n// font size\n#define FONT_DIMS vec2(8,9)\n//#define FONT_DIMS vec2(9,10)\n//#define FONT_DIMS vec2(16,18)\n\n// really need better construct for mapping\n#define MAP(a,b,c) if(a<b)return c;\n#define DIVMOD(v,d) vec4(floor(v/d),mod(v,d))\n\n#define BLK vec4(.0,.0,.0,1.)\n#define GRY vec4(.5,.5,.5,1.)\n#define WHT vec4(1.,1.,1.,1.)\n#define RED vec4(1.,.0,.0,1.)\n#define GRN vec4(.0,1.,.0,1.)\n#define BLU vec4(.0,.0,1.,1.)\n#define YEL vec4(1.,1.,.0,1.)\n#define ORG vec4(1.,.5,.0,1.)\n#define PNK vec4(1.,.0,.5,1.)\n#define MAG vec4(1.,.0,1.,1.)\n#define CYN vec4(0.,1.,1.,1.)\n#define PRP vec4(.5,.0,.5,1.)\n\n#define glyph glyph_8_9\nmat3 glyph_8_9(float ch);\n\n// pow() has significant issues on iPad\n// quick dirty impls. provide int powers of 10 up to 16\nfloat pow10_16(float p) {\n    MAP(p,  1., 1.)\n    MAP(p,  2., 10.)\n    MAP(p,  3., 100.)\n    MAP(p,  4., 1.e3)\n    MAP(p,  5., 1.e4)\n    MAP(p,  6., 1.e5)\n    MAP(p,  7., 1.e6)\n    MAP(p,  8., 1.e7)\n    MAP(p,  9., 1.e8)\n    MAP(p, 10., 1.e9)\n    MAP(p, 11., 1.e10)\n    MAP(p, 12., 1.e11)\n    MAP(p, 13., 1.e12)\n    MAP(p, 14., 1.e13)\n    MAP(p, 15., 1.e14)\n    MAP(p, 16., 1.e15)\n    MAP(p, 17., 1.e16)\n    return 0.;\n}\n\n// digit value from value v at column i (one based) under base b\n//float modMask(lowp float v, lowp float i, lowp float b) {\n//    float f = floor(i),           // forgetting to floor i causes headaches so included\n//          p1 = pow(b,f-1.);\n//    return (mod(v,pow(b,f))-mod(v,p1))/p1;\n//}\n\nfloat binDigit(lowp float v, lowp float i) {\n    float f = floor(i),\n          p1 = exp2(f-1.);\n    return (mod(v,exp2(f))-mod(v,p1))/p1;\n}\n\nfloat octDigit(float v, float f) {\n    float p1 = exp2((f-1.)*3.);\n    return (mod(v,exp2(f*3.))-mod(v,p1))/p1;\n}\n\nfloat decDigit(lowp float v, lowp float i) {\n    float f = floor(i),\n          p1 = pow10_16(f-1.);\n    return (mod(v,pow10_16(f))-mod(v,p1))/p1;\n}\n\nfloat hexDigit(float v, float f) {\n    float p1 = exp2((f-1.)*4.);\n    return (mod(v,exp2(f*4.))-mod(v,p1))/p1;\n}\n\n//=================================================================================\n\nvec4 palette(float a) {\n    MAP(a, 0.5, BLK)\n    MAP(a, 1.5, BLU)    \n    MAP(a, 2.5, RED)\n    MAP(a, 3.5, GRN)    \n    MAP(a, 4.5, WHT)    \n    MAP(a, 5.5, YEL)\n    MAP(a, 6.5, ORG)    \n    MAP(a, 7.5, PRP)    \n    MAP(a, 8.5, CYN)\n    MAP(a, 9.5, GRY)\n    MAP(a,10.5, BLK)\n    MAP(a,11.5, WHT)    \n    MAP(a,12.5, RED)\n    MAP(a,13.5, GRN)    \n    MAP(a,14.5, BLU)    \n    MAP(a,15.5, YEL)\n    return BLK;\n}\n\nfloat idxMat3(mat3 g, vec2 p) {\n    \n// interpret element/scanline based on it's encoding\n#ifdef GLYPH_DEFS_HEX\n    #define M_IDX(i,r,c) MAP(p.y,i,hexDigit(g[r][c],FONT_DIMS.x-p.x))\n#endif\n#ifdef GLYPH_DEFS_DEC\n    #define M_IDX(i,r,c) MAP(p.y,i,decDigit(g[r][c],FONT_DIMS.x-p.x))\n#endif\n#ifdef GLYPH_DEFS_OCT\n    #define M_IDX(i,r,c) MAP(p.y,i,octDigit(g[r][c],FONT_DIMS.x-p.x))\n#endif\n#ifdef GLYPH_DEFS_BIN\n//    #define M_IDX(i,r,c) MAP(p.y,i,binDigit(g[r][c],FONT_DIMS.x-p.x))\n    #define M_IDX(i,r,c) MAP(p.y,i,decDigit(g[r][c],FONT_DIMS.x-p.x))\n#endif\n    \n    // indexing matrix with loop i crashes firefox\n    // we index row/column into matrix by p\n    //   then select dec. digit from element by x (reversed)\n    M_IDX(1., 2, 2);\n    M_IDX(2., 2, 1);\n    M_IDX(3., 2, 0);\n    M_IDX(4., 1, 2);\n    M_IDX(5., 1, 1);\n    M_IDX(6., 1, 0);\n    M_IDX(7., 0, 2);\n    M_IDX(8., 0, 1);\n    M_IDX(9., 0, 0);\n    return 0.;\n}\n\nfloat framebuffer(vec4 dm) \n{\n    // create a sprite sheet for entire 8-bit font\n    dm --;  // keep off edges\n\treturn (dm.x>32.) || (dm.y>8.) ?\n            32. :  // ASCII space\n            dm.y*32. + dm.x;\n}\n\nvec4 renderAlpha(vec2 p) \n{\n    p.x--; p.y++;// aids helper funcs\n    \n    vec4  dm = DIVMOD(p,FONT_DIMS);  // we only want to div/mod once, expensive\n    float ch = framebuffer(dm);\n    mat3   g = glyph(ch);\n    float pc = idxMat3(g, dm.zw);\n    vec4   c = palette(pc);\n    c.w = floor(pc);                 // use alpha channel as stencil\n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n#ifdef BLACK_BORDER\n    // <FIX>: black stripe boundary on map to prevent 'beam forming'\n    //      There is a sampler setting I think that could help here.\n\tvec3 rl = iResolution-1.;\n    vec2 P = fragCoord;\n    vec4 c = fragColor;\n    if(P.x<1.||P.y<1.) {c = vec4(0); return;}\n    if(P.x>rl.x||P.y>rl.y)  {c = vec4(0); return;}\n    // </FIX>\n    \n#endif\n    \n    // render font as a sprite sheet during first frame then persist with buf feedback\n    // (an option on the buffer for single/fixed number passes would be more efficient)\n  if (iFrame<1) {\n        vec4 ac = renderAlpha(fragCoord);\n\t    fragColor = (ac.w>0.) ? fragColor = ac : vec4(0);\n  }\n  else\n\tfragColor = texture(iChannel0, fragCoord/iResolution.xy);\n}\n\n// Use hanging macro for glyph defs\n#define GLYPH(i) if(abs(g-float(i))<.1)return mat3(\n// NOTE: Fonts can be multi-colored use palette indexes in glyphs\n//       Packed scalines: to edit a glyph add \\n and line up the literals\n\n\n\n\n\n#ifdef GLYPH_DEFS_HEX\nmat3 glyph_8_9_numerics(float g) {\n    GLYPH(32) 0);\n    GLYPH(42)0x00001000,0x00101010,0x00011100,0x00111110,0x00011100,0x00101010,0x00001000,0,0);\n    GLYPH(46)0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00011000,0x00011000,0,0);\n    // numerics  ==================================================\n    GLYPH(49)0x00011000,0x00001000,0x00001000,0x00001000,0x00001000,0x00001000,0x00011100,0,0);\n    GLYPH(50)0x00111100,0x01000010,0x00000010,0x00001100,0x00110000,0x01000000,0x01111110,0,0);\n    GLYPH(51)0x00111100,0x01000010,0x00000010,0x00011100,0x00000010,0x01000010,0x00111100,0,0);\n    GLYPH(52)0x01000100,0x01000100,0x01000100,0x00111110,0x00000100,0x00000100,0x00000100,0,0);\n    GLYPH(53)0x01111110,0x01000000,0x01111000,0x00000100,0x00000010,0x01000100,0x00111000,0,0);\n    GLYPH(54)0x00111100,0x01000010,0x01000000,0x01011100,0x01100010,0x01000010,0x00111100,0,0);\n    GLYPH(55)0x00111110,0x01000010,0x00000010,0x00000100,0x00000100,0x00001000,0x00001000,0,0);\n    GLYPH(56)0x00111100,0x01000010,0x01000010,0x00111100,0x01000010,0x01000010,0x00111100,0,0);\n    GLYPH(57)0x00111100,0x01000010,0x01000010,0x00111110,0x00000010,0x00000010,0x00111100,0,0);\n    GLYPH(58)0x00111100,0x00100100,0x01001010,0x01010010,0x01010010,0x00100100,0x00111100,0,0);\n    return mat3(0);\n}\n\nmat3 glyph_8_9_uppercase(float g) {\n    // uppercase ==================================================\n    GLYPH(65)0x00011000,0x00100100,0x01000010,0x01111110,0x01000010,0x01000010,0x01000010,0,0);\n    GLYPH(66)0x11111000,0x01000100,0x01000100,0x01111000,0x01000100,0x01000100,0x11111000,0,0);\n    GLYPH(67)0x00011100,0x00100010,0x01000000,0x01000000,0x01000000,0x00100010,0x00011100,0,0);\n    GLYPH(68)0x11111000,0x01000100,0x01000010,0x01000010,0x01000010,0x01000100,0x11111000,0,0);\n    GLYPH(69)0x01111110,0x01000000,0x01000000,0x01111000,0x01000000,0x01000000,0x01111110,0,0);\n    GLYPH(70)0x01111110,0x01000000,0x01000000,0x01111000,0x01000000,0x01000000,0x01000000,0,0);\n    GLYPH(71)0x00111100,0x01000010,0x01000000,0x01001110,0x01000010,0x01000010,0x00111100,0,0);\n    GLYPH(72)0x01000010,0x01000010,0x01000010,0x01111110,0x01000010,0x01000010,0x01000010,0,0);\n    GLYPH(73)0x00111000,0x00010000,0x00010000,0x00010000,0x00010000,0x00010000,0x00111000,0,0);\n    GLYPH(74)0x01111110,0x00000100,0x00000100,0x00000100,0x00000100,0x01000100,0x00111000,0,0);\n    GLYPH(75)0x01000100,0x01001000,0x01010000,0x01110000,0x01001000,0x01000100,0x01000010,0,0);\n    GLYPH(76)0x00100000,0x00100000,0x00100000,0x00100000,0x00100000,0x00100000,0x00111111,0,0);\n    GLYPH(77)0x01000010,0x01100110,0x01011010,0x01000010,0x01000010,0x01000010,0x01000010,0,0);\n    GLYPH(78)0x01000010,0x01100010,0x01010010,0x01001010,0x01000110,0x01000010,0x01000010,0,0);\n    GLYPH(79)0x00111100,0x01000010,0x01000010,0x01000010,0x01000010,0x01000010,0x00111100,0,0);\n    GLYPH(80)0x11111100,0x01000010,0x01000010,0x01111100,0x01000000,0x01000000,0x01000000,0,0);\n    GLYPH(81)0x00111100,0x01000010,0x01000010,0x01000010,0x01001010,0x01000110,0x00111101,0,0);\n    GLYPH(82)0x01111100,0x01000010,0x01000010,0x01111100,0x01001000,0x01000100,0x01000010,0,0);\n    GLYPH(83)0x00111100,0x01000010,0x01000000,0x00111100,0x00000010,0x01000010,0x00111100,0,0);\n    GLYPH(84)0x01111100,0x00010000,0x00010000,0x00010000,0x00010000,0x00010000,0x00010000,0,0);\n    GLYPH(85)0x01000010,0x01000010,0x01000010,0x01000010,0x01000010,0x01000010,0x00111100,0,0);\n    GLYPH(86)0x01000010,0x01000010,0x01000010,0x01000010,0x00100100,0x00100100,0x00011000,0,0);\n    GLYPH(87)0x01000011,0x01000011,0x01000011,0x01000011,0x01011011,0x01100111,0x00100100,0,0);\n    GLYPH(88)0x01000100,0x01000100,0x01000100,0x00111000,0x00101000,0x01000100,0x01000100,0,0);\n    GLYPH(89)0x01000100,0x01000100,0x01000100,0x00111000,0x00010000,0x00010000,0x00010000,0,0);\n    GLYPH(90)0x01111110,0x00000010,0x00000100,0x00011000,0x00100000,0x01000000,0x01111110,0,0);\n    return mat3(0);\n}\n\nmat3 glyph_8_9_lowercase(float g) {\n    // lowercase ==================================================\n    GLYPH( 97)0x00000000,0x00000000,0x00000000,0x00001110,0x00010010,0x00010010,0x00001101,0,0);\n    GLYPH( 98)0x00000000,0x00100000,0x00100000,0x00111100,0x00100010,0x00100010,0x00111100,0,0);\n    GLYPH( 99)0x00000000,0x00000000,0x00000000,0x00011100,0x00100000,0x00100010,0x00011100,0,0);\n    GLYPH(100)0x00000010,0x00000010,0x00000010,0x00011010,0x00100110,0x00100010,0x00011101,0,0);\n    GLYPH(101)0x00000000,0x00000000,0x00111000,0x01000100,0x01111100,0x01000000,0x00111100,0,0);\n    GLYPH(102)0x00011000,0x00100100,0x00100000,0x00111000,0x00100000,0x00100000,0x00100000,0,0);\n    GLYPH(103)0x00000000,0x00011000,0x00100100,0x00100100,0x00011100,0x00100100,0x00011000,0,0);\n    GLYPH(104)0x00100000,0x00100000,0x00100000,0x00101100,0x00110010,0x00100010,0x00100010,0,0);\n    GLYPH(105)0x00000000,0x00010000,0x00000000,0x00010000,0x00010000,0x00010000,0x00011000,0,0);\n    GLYPH(106)0x00000100,0x00000000,0x00000100,0x00000100,0x00000100,0x00100100,0x00011000,0,0);\n    GLYPH(107)0x01000000,0x01000000,0x01000000,0x01001000,0x01110000,0x01010000,0x01001000,0,0);\n    GLYPH(108)0x00100000,0x00100000,0x00100000,0x00100000,0x00100000,0x00100000,0x00011100,0,0);\n    GLYPH(109)0x00000000,0x00000000,0x00100100,0x01011010,0x01000010,0x01000010,0x01000010,0,0);\n    GLYPH(110)0x00000000,0x00000000,0x01011000,0x01100100,0x01000010,0x01000010,0x01000010,0,0);\n    GLYPH(111)0x00000000,0x00000000,0x00011100,0x00100010,0x00100010,0x00100010,0x00011100,0,0);\n    GLYPH(112)0x00000000,0x00000000,0x01011100,0x01100010,0x01100010,0x01011100,0x01000000,0x01000000,0x00000000);\n    GLYPH(113)0x00000000,0x00000000,0x00111010,0x01000110,0x01000110,0x00111010,0x00000010,0x00000011,0x00000000);\n    GLYPH(114)0x00000000,0x00000000,0x00101100,0x00110010,0x00100000,0x00100000,0x00100000,0,0);\n    GLYPH(115)0x00000000,0x00000000,0x00011100,0x00100000,0x00011100,0x00000010,0x00100010,0x00011100,0x00000000);\n    GLYPH(116)0x00010000,0x00010000,0x00011100,0x00010000,0x00010000,0x00010010,0x00001100,0,0);\n    GLYPH(117)0x00000000,0x00000000,0x00100010,0x00100010,0x00100010,0x00100010,0x00011100,0,0);\n    GLYPH(118)0x00000000,0x00000000,0x00100010,0x00100010,0x00010100,0x00010100,0x00001000,0,0);\n    GLYPH(119)0x00000000,0x00000000,0x00100010,0x00100010,0x00101010,0x00101010,0x00010100,0,0);\n    GLYPH(120)0x00000000,0x00000000,0x00100010,0x00010100,0x00001000,0x00010100,0x00100010,0,0);\n    GLYPH(121)0x00000000,0x00000000,0x00100010,0x00100010,0x00100110,0x00011010,0x00000010,0x00011100,0x00000000);\n    GLYPH(122)0x00000000,0x00000000,0x00111110,0x00000100,0x00001000,0x00010000,0x00111110,0,0);\n    return mat3(0);\n}\n#endif\n\n\n\n\n\n#ifdef GLYPH_DEFS_DEC\n// We need to use float or remove leading zeros to prevent interpretation as oct literal\nmat3 glyph_8_9_numerics(float g) {\n    GLYPH(32) 0);\n    GLYPH(42)00001000.,00101010.,00011100.,00111110.,00011100.,00101010.,00001000.,0,0);\n    GLYPH(46)00000000.,00000000.,00000000.,00000000.,00000000.,00011000.,00011000.,0,0);\n    // numerics  ==================================================\n    GLYPH(49)00011000.,00001000.,00001000.,00001000.,00001000.,00001000.,00011100.,0,0);\n    GLYPH(50)00111100.,01000010.,00000010.,00001100.,00110000.,01000000.,01111110.,0,0);\n    GLYPH(51)00111100.,01000010.,00000010.,00011100.,00000010.,01000010.,00111100.,0,0);\n    GLYPH(52)01000100.,01000100.,01000100.,00111110.,00000100.,00000100.,00000100.,0,0);\n    GLYPH(53)01111110.,01000000.,01111000.,00000100.,00000010.,01000100.,00111000.,0,0);\n    GLYPH(54)00111100.,01000010.,01000000.,01011100.,01100010.,01000010.,00111100.,0,0);\n    GLYPH(55)00111110.,01000010.,00000010.,00000100.,00000100.,00001000.,00001000.,0,0);\n    GLYPH(56)00111100.,01000010.,01000010.,00111100.,01000010.,01000010.,00111100.,0,0);\n    GLYPH(57)00111100.,01000010.,01000010.,00111110.,00000010.,00000010.,00111100.,0,0);\n    GLYPH(58)00111100.,00100100.,01001010.,01010010.,01010010.,00100100.,00111100.,0,0);\n    return mat3(0);\n}\n\nmat3 glyph_8_9_uppercase(float g) {\n    // uppercase ==================================================\n    GLYPH(65)00011000.,00100100.,01000010.,01111110.,01000010.,01000010.,01000010.,0,0);\n    GLYPH(66)11111000.,01000100.,01000100.,01111000.,01000100.,01000100.,11111000.,0,0);\n    GLYPH(67)00011100.,00100010.,01000000.,01000000.,01000000.,00100010.,00011100.,0,0);\n    GLYPH(68)11111000.,01000100.,01000010.,01000010.,01000010.,01000100.,11111000.,0,0);\n    GLYPH(69)01111110.,01000000.,01000000.,01111000.,01000000.,01000000.,01111110.,0,0);\n    GLYPH(70)01111110.,01000000.,01000000.,01111000.,01000000.,01000000.,01000000.,0,0);\n    GLYPH(71)00111100.,01000010.,01000000.,01001110.,01000010.,01000010.,00111100.,0,0);\n    GLYPH(72)01000010.,01000010.,01000010.,01111110.,01000010.,01000010.,01000010.,0,0);\n    GLYPH(73)00111000.,00010000.,00010000.,00010000.,00010000.,00010000.,00111000.,0,0);\n    GLYPH(74)01111110.,00000100.,00000100.,00000100.,00000100.,01000100.,00111000.,0,0);\n    GLYPH(75)01000100.,01001000.,01010000.,01110000.,01001000.,01000100.,01000010.,0,0);\n    GLYPH(76)00100000.,00100000.,00100000.,00100000.,00100000.,00100000.,00111111.,0,0);\n    GLYPH(77)01000010.,01100110.,01011010.,01000010.,01000010.,01000010.,01000010.,0,0);\n    GLYPH(78)01000010.,01100010.,01010010.,01001010.,01000110.,01000010.,01000010.,0,0);\n    GLYPH(79)00111100.,01000010.,01000010.,01000010.,01000010.,01000010.,00111100.,0,0);\n    GLYPH(80)11111100.,01000010.,01000010.,01111100.,01000000.,01000000.,01000000.,0,0);\n    GLYPH(81)00111100.,01000010.,01000010.,01000010.,01001010.,01000110.,00111101.,0,0);\n    GLYPH(82)01111100.,01000010.,01000010.,01111100.,01001000.,01000100.,01000010.,0,0);\n    GLYPH(83)00111100.,01000010.,01000000.,00111100.,00000010.,01000010.,00111100.,0,0);\n    GLYPH(84)01111100.,00010000.,00010000.,00010000.,00010000.,00010000.,00010000.,0,0);\n    GLYPH(85)01000010.,01000010.,01000010.,01000010.,01000010.,01000010.,00111100.,0,0);\n    GLYPH(86)01000010.,01000010.,01000010.,01000010.,00100100.,00100100.,00011000.,0,0);\n    GLYPH(87)01000001.,01000001.,01000001.,01000001.,01001001.,01010101.,00100010.,0,0);\n    GLYPH(88)01000100.,01000100.,01000100.,00111000.,00101000.,01000100.,01000100.,0,0);\n    GLYPH(89)01000100.,01000100.,01000100.,00111000.,00010000.,00010000.,00010000.,0,0);\n    GLYPH(90)01111110.,00000010.,00000100.,00011000.,00100000.,01000000.,01111110.,0,0);\n    return mat3(0);\n}\n\nmat3 glyph_8_9_lowercase(float g) {\n    // lowercase ==================================================\n    GLYPH( 97)00000000.,00000000.,00000000.,00001110.,00010010.,00010010.,00001101.,0,0);\n    GLYPH( 98)00000000.,00100000.,00100000.,00111100.,00100010.,00100010.,00111100.,0,0);\n    GLYPH( 99)00000000.,00000000.,00000000.,00011100.,00100000.,00100010.,00011100.,0,0);\n    GLYPH(100)00000010.,00000010.,00000010.,00011010.,00100110.,00100010.,00011101.,0,0);\n    GLYPH(101)00000000.,00000000.,00111000.,01000100.,01111100.,01000000.,00111100.,0,0);\n    GLYPH(102)00011000.,00100100.,00100000.,00111000.,00100000.,00100000.,00100000.,0,0);\n    GLYPH(103)00000000.,00011000.,00100100.,00100100.,00011100.,00100100.,00011000.,0,0);\n    GLYPH(104)00100000.,00100000.,00100000.,00101100.,00110010.,00100010.,00100010.,0,0);\n    GLYPH(105)00000000.,00010000.,00000000.,00010000.,00010000.,00010000.,00011000.,0,0);\n    GLYPH(106)00000100.,00000000.,00000100.,00000100.,00000100.,00100100.,00011000.,0,0);\n    GLYPH(107)01000000.,01000000.,01000000.,01001000.,01110000.,01010000.,01001000.,0,0);\n    GLYPH(108)00100000.,00100000.,00100000.,00100000.,00100000.,00100000.,00011100.,0,0);\n    GLYPH(109)00000000.,00000000.,00100100.,01011010.,01000010.,01000010.,01000010.,0,0);\n    GLYPH(110)00000000.,00000000.,01011000.,01100100.,01000010.,01000010.,01000010.,0,0);\n    GLYPH(111)00000000.,00000000.,00011100.,00100010.,00100010.,00100010.,00011100.,0,0);\n    GLYPH(112)00000000.,00000000.,01011100.,01100010.,01100010.,01011100.,01000000.,01000000.,00000000);\n    GLYPH(113)00000000.,00000000.,00111010.,01000110.,01000110.,00111010.,00000010.,00000011.,00000000);\n    GLYPH(114)00000000.,00000000.,00101100.,00110010.,00100000.,00100000.,00100000.,0,0);\n    GLYPH(115)00000000.,00000000.,00011100.,00100000.,00011100.,00000010.,00100010.,00011100.,00000000);\n    GLYPH(116)00010000.,00010000.,00011100.,00010000.,00010000.,00010010.,00001100.,0,0);\n    GLYPH(117)00000000.,00000000.,00100010.,00100010.,00100010.,00100010.,00011100.,0,0);\n    GLYPH(118)00000000.,00000000.,00100010.,00100010.,00010100.,00010100.,00001000.,0,0);\n    GLYPH(119)00000000.,00000000.,00100010.,00100010.,00101010.,00101010.,00010100.,0,0);\n    GLYPH(120)00000000.,00000000.,00100010.,00010100.,00001000.,00010100.,00100010.,0,0);\n    GLYPH(121)00000000.,00000000.,00100010.,00100010.,00100110.,00011010.,00000010.,00011100.,00000000);\n    GLYPH(122)00000000.,00000000.,00111110.,00000100.,00001000.,00010000.,00111110.,0,0);\n    return mat3(0);\n}\n#endif\n\n\n\n\n\n#ifdef GLYPH_DEFS_OCT\nmat3 glyph_8_9_numerics(float g) {\n    GLYPH(32) 0);\n    GLYPH(42)000001000,000101010,000011100,000111110,000011100,000101010,000001000,0,0);\n    GLYPH(46)000000000,000000000,000000000,000000000,000000000,000011000,000011000,0,0);\n    // numerics  ==================================================\n    GLYPH(49)000011000,000001000,000001000,000001000,000001000,000001000,000011100,0,0);\n    GLYPH(50)000111100,001000010,000000010,000001100,000110000,001000000,001111110,0,0);\n    GLYPH(51)000111100,001000010,000000010,000011100,000000010,001000010,000111100,0,0);\n    GLYPH(52)001000100,001000100,001000100,000111110,000000100,000000100,000000100,0,0);\n    GLYPH(53)001111110,001000000,001111000,000000100,000000010,001000100,000111000,0,0);\n    GLYPH(54)000111100,001000010,001000000,001011100,001100010,001000010,000111100,0,0);\n    GLYPH(55)000111110,001000010,000000010,000000100,000000100,000001000,000001000,0,0);\n    GLYPH(56)000111100,001000010,001000010,000111100,001000010,001000010,000111100,0,0);\n    GLYPH(57)000111100,001000010,001000010,000111110,000000010,000000010,000111100,0,0);\n    GLYPH(58)000111100,000100100,001001010,001010010,001010010,000100100,000111100,0,0);\n    return mat3(0);\n}\n\nmat3 glyph_8_9_uppercase(float g) {\n    // uppercase ==================================================\n    GLYPH(65)000011000,000100100,001000010,001111110,001000010,001000010,001000010,0,0);\n    GLYPH(66)011111000,001000100,001000100,001111000,001000100,001000100,011111000,0,0);\n    GLYPH(67)000011100,000100010,001000000,001000000,001000000,000100010,000011100,0,0);\n    GLYPH(68)011111000,001000100,001000010,001000010,001000010,001000100,011111000,0,0);\n    GLYPH(69)001111110,001000000,001000000,001111000,001000000,001000000,001111110,0,0);\n    GLYPH(70)001111110,001000000,001000000,001111000,001000000,001000000,001000000,0,0);\n    GLYPH(71)000111100,001000010,001000000,001001110,001000010,001000010,000111100,0,0);\n    GLYPH(72)001000010,001000010,001000010,001111110,001000010,001000010,001000010,0,0);\n    GLYPH(73)000111000,000010000,000010000,000010000,000010000,000010000,000111000,0,0);\n    GLYPH(74)001111110,000000100,000000100,000000100,000000100,001000100,000111000,0,0);\n    GLYPH(75)001000100,001001000,001010000,001110000,001001000,001000100,001000010,0,0);\n    GLYPH(76)000100000,000100000,000100000,000100000,000100000,000100000,000111111,0,0);\n    GLYPH(77)001000010,001100110,001011010,001000010,001000010,001000010,001000010,0,0);\n    GLYPH(78)001000010,001100010,001010010,001001010,001000110,001000010,001000010,0,0);\n    GLYPH(79)000111100,001000010,001000010,001000010,001000010,001000010,000111100,0,0);\n    GLYPH(80)011111100,001000010,001000010,001111100,001000000,001000000,001000000,0,0);\n    GLYPH(81)000111100,001000010,001000010,001000010,001001010,001000110,000111101,0,0);\n    GLYPH(82)001111100,001000010,001000010,001111100,001001000,001000100,001000010,0,0);\n    GLYPH(83)000111100,001000010,001000000,000111100,000000010,001000010,000111100,0,0);\n    GLYPH(84)001111100,000010000,000010000,000010000,000010000,000010000,000010000,0,0);\n    GLYPH(85)001000010,001000010,001000010,001000010,001000010,001000010,000111100,0,0);\n    GLYPH(86)001000010,001000010,001000010,001000010,000100100,000100100,000011000,0,0);\n    GLYPH(87)001000011,001000011,001000011,001000011,001011011,001100111,000100100,0,0);\n    GLYPH(88)001000100,001000100,001000100,000111000,000101000,001000100,001000100,0,0);\n    GLYPH(89)001000100,001000100,001000100,000111000,000010000,000010000,000010000,0,0);\n    GLYPH(90)001111110,000000010,000000100,000011000,000100000,001000000,001111110,0,0);\n    return mat3(0);\n}\n\nmat3 glyph_8_9_lowercase(float g) {\n    // lowercase ==================================================\n    GLYPH( 97)000000000,000000000,000000000,000001110,000010010,000010010,000001101,0,0);\n    GLYPH( 98)000000000,000100000,000100000,000111100,000100010,000100010,000111100,0,0);\n    GLYPH( 99)000000000,000000000,000000000,000011100,000100000,000100010,000011100,0,0);\n    GLYPH(100)000000010,000000010,000000010,000011010,000100110,000100010,000011101,0,0);\n    GLYPH(101)000000000,000000000,000111000,001000100,001111100,001000000,000111100,0,0);\n    GLYPH(102)000011000,000100100,000100000,000111000,000100000,000100000,000100000,0,0);\n    GLYPH(103)000000000,000011000,000100100,000100100,000011100,000100100,000011000,0,0);\n    GLYPH(104)000100000,000100000,000100000,000101100,000110010,000100010,000100010,0,0);\n    GLYPH(105)000000000,000010000,000000000,000010000,000010000,000010000,000011000,0,0);\n    GLYPH(106)000000100,000000000,000000100,000000100,000000100,000100100,000011000,0,0);\n    GLYPH(107)001000000,001000000,001000000,001001000,001110000,001010000,001001000,0,0);\n    GLYPH(108)000100000,000100000,000100000,000100000,000100000,000100000,000011100,0,0);\n    GLYPH(109)000000000,000000000,000100100,001011010,001000010,001000010,001000010,0,0);\n    GLYPH(110)000000000,000000000,001011000,001100100,001000010,001000010,001000010,0,0);\n    GLYPH(111)000000000,000000000,000011100,000100010,000100010,000100010,000011100,0,0);\n    GLYPH(112)000000000,000000000,001011100,001100010,001100010,001011100,001000000,001000000,000000000);\n    GLYPH(113)000000000,000000000,000111010,001000110,001000110,000111010,000000010,000000011,000000000);\n    GLYPH(114)000000000,000000000,000101100,000110010,000100000,000100000,000100000,0,0);\n    GLYPH(115)000000000,000000000,000011100,000100000,000011100,000000010,000100010,000011100,000000000);\n    GLYPH(116)000010000,000010000,000011100,000010000,000010000,000010010,000001100,0,0);\n    GLYPH(117)000000000,000000000,000100010,000100010,000100010,000100010,000011100,0,0);\n    GLYPH(118)000000000,000000000,000100010,000100010,000010100,000010100,000001000,0,0);\n    GLYPH(119)000000000,000000000,000100010,000100010,000101010,000101010,000010100,0,0);\n    GLYPH(120)000000000,000000000,000100010,000010100,000001000,000010100,000100010,0,0);\n    GLYPH(121)000000000,000000000,000100010,000100010,000100110,000011010,000000010,000011100,000000000);\n    GLYPH(122)000000000,000000000,000111110,000000100,000001000,000010000,000111110,0,0);\n    return mat3(0);\n}\n#endif\n\n\n\n\n\n#ifdef GLYPH_DEFS_BIN\n// main disadvantage here will be loss of direct editability in browser absent bin literal\n\n\n//THIS IS CURRENTLY WRONG!!! will update when I get chance...\nmat3 glyph_8_9_numerics(float g) {\n    GLYPH(32) 0);\n    GLYPH(42)1000,101010,11100,111110,11100,101010,1000,0,0);\n    GLYPH(46)0,0,0,0,0,11000,11000,0,0);\n    // numerics  ==================================================\n    GLYPH(49)11000,1000,1000,1000,1000,1000,11100,0,0);\n    GLYPH(50)111100,1000010,10,1100,110000,1000000,1111110,0,0);\n    GLYPH(51)111100,1000010,10,11100,10,1000010,111100,0,0);\n    GLYPH(52)1000100,1000100,1000100,111110,100,100,100,0,0);\n    GLYPH(53)1111110,1000000,1111000,100,10,1000100,111000,0,0);\n    GLYPH(54)111100,1000010,1000000,1011100,1100010,1000010,111100,0,0);\n    GLYPH(55)111110,1000010,10,100,100,1000,1000,0,0);\n    GLYPH(56)111100,1000010,1000010,111100,1000010,1000010,111100,0,0);\n    GLYPH(57)111100,1000010,1000010,111110,10,10,111100,0,0);\n    GLYPH(58)111100,100100,1001010,1010010,1010010,100100,111100,0,0);\n    return mat3(0);\n}\n\nmat3 glyph_8_9_uppercase(float g) {\n    // uppercase ==================================================\n    GLYPH(65)11000,100100,1000010,1111110,1000010,1000010,1000010,0,0);\n    GLYPH(66)11111000,1000100,1000100,1111000,1000100,1000100,11111000,0,0);\n    GLYPH(67)11100,100010,1000000,1000000,1000000,100010,11100,0,0);\n    GLYPH(68)11111000,1000100,1000010,1000010,1000010,1000100,11111000,0,0);\n    GLYPH(69)1111110,1000000,1000000,1111000,1000000,1000000,1111110,0,0);\n    GLYPH(70)1111110,1000000,1000000,1111000,1000000,1000000,1000000,0,0);\n    GLYPH(71)111100,1000010,1000000,1001110,1000010,1000010,111100,0,0);\n    GLYPH(72)1000010,1000010,1000010,1111110,1000010,1000010,1000010,0,0);\n    GLYPH(73)111000,10000,10000,10000,10000,10000,111000,0,0);\n    GLYPH(74)1111110,100,100,100,100,1000100,111000,0,0);\n    GLYPH(75)1000100,1001000,1010000,1110000,1001000,1000100,1000010,0,0);\n    GLYPH(76)100000,100000,100000,100000,100000,100000,111111,0,0);\n    GLYPH(77)1000010,1100110,1011010,1000010,1000010,1000010,1000010,0,0);\n    GLYPH(78)1000010,1100010,1010010,1001010,1000110,1000010,1000010,0,0);\n    GLYPH(79)111100,1000010,1000010,1000010,1000010,1000010,111100,0,0);\n    GLYPH(80)11111100,1000010,1000010,1111100,1000000,1000000,1000000,0,0);\n    GLYPH(81)111100,1000010,1000010,1000010,1001010,1000110,111101,0,0);\n    GLYPH(82)1111100,1000010,1000010,1111100,1001000,1000100,1000010,0,0);\n    GLYPH(83)111100,1000010,1000000,111100,10,1000010,111100,0,0);\n    GLYPH(84)1111100,10000,10000,10000,10000,10000,10000,0,0);\n    GLYPH(85)1000010,1000010,1000010,1000010,1000010,1000010,111100,0,0);\n    GLYPH(86)1000010,1000010,1000010,1000010,100100,100100,11000,0,0);\n    GLYPH(87)1000011,1000011,1000011,1000011,1011011,1100111,100100,0,0);\n    GLYPH(88)1000100,1000100,1000100,111000,101000,1000100,1000100,0,0);\n    GLYPH(89)1000100,1000100,1000100,111000,10000,10000,10000,0,0);\n    GLYPH(90)1111110,10,100,11000,100000,1000000,1111110,0,0);\n    return mat3(0);\n}\n\nmat3 glyph_8_9_lowercase(float g) {\n    // lowercase ==================================================\n    GLYPH( 97)0,0,0,1110,10010,10010,1101,0,0);\n    GLYPH( 98)0,100000,100000,111100,100010,100010,111100,0,0);\n    GLYPH( 99)0,0,0,11100,100000,100010,11100,0,0);\n    GLYPH(100)10,10,10,11010,100110,100010,11101,0,0);\n    GLYPH(101)0,0,111000,1000100,1111100,1000000,111100,0,0);\n    GLYPH(102)11000,100100,100000,111000,100000,100000,100000,0,0);\n    GLYPH(103)0,11000,100100,100100,11100,100100,11000,0,0);\n    GLYPH(104)100000,100000,100000,101100,110010,100010,100010,0,0);\n    GLYPH(105)0,10000,0,10000,10000,10000,11000,0,0);\n    GLYPH(106)100,0,100,100,100,100100,11000,0,0);\n    GLYPH(107)1000000,1000000,1000000,1001000,1110000,1010000,1001000,0,0);\n    GLYPH(108)100000,100000,100000,100000,100000,100000,11100,0,0);\n    GLYPH(109)0,0,100100,1011010,1000010,1000010,1000010,0,0);\n    GLYPH(110)0,0,1011000,1100100,1000010,1000010,1000010,0,0);\n    GLYPH(111)0,0,11100,100010,100010,100010,11100,0,0);\n    GLYPH(112)0,0,1011100,1100010,1100010,1011100,1000000,1000000,0);\n    GLYPH(113)0,0,111010,1000110,1000110,111010,10,11,0);\n    GLYPH(114)0,0,101100,110010,100000,100000,100000,0,0);\n    GLYPH(115)0,0,11100,100000,11100,10,100010,11100,0);\n    GLYPH(116)10000,10000,11100,10000,10000,10010,1100,0,0);\n    GLYPH(117)0,0,100010,100010,100010,100010,11100,0,0);\n    GLYPH(118)0,0,100010,100010,10100,10100,1000,0,0);\n    GLYPH(119)0,0,100010,100010,101010,101010,10100,0,0);\n    GLYPH(120)0,0,100010,10100,1000,10100,100010,0,0);\n    GLYPH(121)0,0,100010,100010,100110,11010,10,11100,0);\n    GLYPH(122)0,0,111110,100,1000,10000,111110,0,0);\n    return mat3(0);\n}\n#endif\n\n// Compiler/card limits strike again....\n// needed to split charset to prevent corruption.\n// (likely memory page thing)\nmat3 glyph_8_9(float g) {\n\tif(g<65.) \n        return glyph_8_9_numerics(g);\n\telse if(g<97.) \n        return glyph_8_9_uppercase(g);\n    else\n        return glyph_8_9_lowercase(g);\n}\n\n","name":"Buf A","description":"","type":"buffer"}]}