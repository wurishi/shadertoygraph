{"ver":"0.1","info":{"id":"l3scRB","date":"1726445738","viewed":19,"name":"Checkers with inverting disc","username":"TriKri","description":"Move the disc around by pressing the WASD keys","likes":3,"published":1,"flags":48,"usePreview":0,"tags":["checkers","smothedge"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float targetSquareSize = .04;\nconst int minSquareSizePx = 15;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{   \n    // Checkers pattern\n    int SquareSizePx = max(int(targetSquareSize / PIXEL_SIZE + 0.5), minSquareSizePx);\n    int intVal = 0;\n    intVal += int(fragCoord.x) / SquareSizePx;\n    intVal += int(fragCoord.y) / SquareSizePx;\n    float floatVal = float(intVal % 2);\n    \n    // Disc\n    float edgeHalfStepLength = 0.75 * PIXEL_SIZE;\n    vec2 dist = fragCoord * PIXEL_SIZE - vec2(GETVAL(DISC_CENTER_X), GETVAL(DISC_CENTER_Y));\n    float distSquared = dot(dist, dist);\n    float signedDistanceToCircle = (distSquared - discRadius*discRadius)/(2.0*discRadius);\n    float invertColor = smoothstep(-edgeHalfStepLength, edgeHalfStepLength, signedDistanceToCircle);\n    \n    // Invert color on pixels in disc\n    floatVal = mix(floatVal, 1.0-floatVal, invertColor);\n    \n    // Perform gamma correction\n    floatVal = pow(floatVal, 1.0/2.2);\n    \n    vec3 rgb = floatVal + vec3(0,0,0);\n\n    // Output to screen\n    fragColor = vec4(rgb, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define GETVAL(INDEX) texelFetch(iChannel0,ivec2(INDEX,0),0).x\n#define GETKEY(INDEX) (texelFetch(iChannel1,ivec2(INDEX,0),0).x>0.5)\n\n#define KEY_UP\t\t87  // W\n#define KEY_DOWN\t83  // S\n#define KEY_LEFT\t65  // A\n#define KEY_RIGHT\t68  // D\n\n#define DISC_CENTER_X\t0\n#define DISC_CENTER_Y\t1\n#define DISC_VELOCITY_X\t3\n#define DISC_VELOCITY_Y\t4\n\nfloat discRadius = .3;\n\n#define PIXEL_SIZE (1.0 / min(iResolution.x, iResolution.y))\n#define REGION_WDITH  (iResolution.x * PIXEL_SIZE)\n#define REGION_HEIGHT (iResolution.y * PIXEL_SIZE)\n#define REGION_SIZE (vec2(REGION_WDITH, REGION_HEIGHT))\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// See https://gist.github.com/markknol/d06c0167c75ab5c6720fe9083e4319e1\n\n#define SETVAL(INDEX,VAL) if(int(fragCoord.x)==INDEX) fragColor=vec4(VAL)\n\nconst float dt = 0.01;\nconst float acceleration = .6;\nconst vec2 g = vec2(0.00006, -.4);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{   \n    vec2 pos = vec2(GETVAL(DISC_CENTER_X), GETVAL(DISC_CENTER_Y));\n    vec2 vel = vec2(GETVAL(DISC_VELOCITY_X), GETVAL(DISC_VELOCITY_Y));\n    \n    if(iFrame == 0) {\n        // Place the disc in the middle of the region\n        pos = 0.5 * REGION_SIZE;\n    \tvel = vec2(0);\n    }\n    \n    vec2 acc = vec2(0);\n    \n    // User input\n    if (GETKEY(KEY_LEFT )) acc.x -= acceleration;\n    if (GETKEY(KEY_RIGHT)) acc.x += acceleration;    \n    if (GETKEY(KEY_DOWN )) acc.y -= acceleration;\n    if (GETKEY(KEY_UP   )) acc.y += acceleration;\n    \n    if (dot(acc,acc) > acceleration*acceleration) {\n        acc *= acceleration / length(acc);\n    }\n    \n    /*\n     * For the physics, use leapfrog (Verlet) integration as it will be the most stable.\n     */\n    \n    // Physics - position\n    pos += dt * vel;\n    \n    // Physics - velocity\n    acc += g;\n    \n    if (pos.x - discRadius <= 0.0) {\n        vel.x =  abs(vel.x);\n        acc.x = 0.0;\n    }\n    else if (pos.x + discRadius >= REGION_WDITH) {\n        vel.x = -abs(vel.x);\n        acc.x = 0.0;\n    }\n    \n    if (pos.y - discRadius <= 0.0) {\n        vel.y =  abs(vel.y);\n        acc.y = 0.0;\n    }\n    else if (pos.y + discRadius >= REGION_HEIGHT) {\n        vel.y = -abs(vel.y);\n        acc.y = 0.0;\n    }\n    \n    vel += dt * acc;\n    \n    SETVAL(DISC_CENTER_X, pos.x);\n    SETVAL(DISC_CENTER_Y, pos.y);\n    SETVAL(DISC_VELOCITY_X, vel.x);\n    SETVAL(DISC_VELOCITY_Y, vel.y);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}