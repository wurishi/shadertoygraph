{"ver":"0.1","info":{"id":"Nt2yzy","date":"1650184225","viewed":66,"name":"Country flags","username":"oAsAo","description":"This shader draws different country flags depending on where the mouse is located. Just practicing shapes and stuff. Also the proportions and colors aren't exact.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["practice","flags"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define paintOver(col1, col2, cutoff, control) (col1=mix(col1, col2, smoothstep((cutoff)+smoothingRadius, (cutoff)-smoothingRadius, control)))\n\n#define PI 3.1415926592358979323846\n\n#define ukrainianBlue vec3(0.0, 0.0, 0.88)\n#define ukrainianYellow vec3(0.92, 0.92, 0.0)\n\n#define mauritiusRed vec3(0.98, 0.05, 0.0)\n#define mauritiusBlue vec3(0.0, 0.0, 0.5)\n#define mauritiusYellow vec3(0.8, 0.8, 0.0)\n#define mauritiusGreen vec3(0.1, 0.8, 0.1)\n\n#define costaRicanBlue vec3(0.0, 0.00, 0.6)\n#define costaRicanWhite vec3(0.95, 0.95, 0.95)\n#define costaRicanRed vec3(0.95, 0.0, 0.0)\n\n#define seychellesBlue vec3(0.0, 0.0, 0.6)\n#define seychellesYellow vec3(0.8, 0.8, 0.0)\n#define seychellesRed vec3(0.85, 0.0, 0.0)\n#define seychellesWhite vec3(0.9, 0.9, 0.9)\n#define seychellesGreen vec3(0.1, 0.5, 0.1)\n\n#define australianBlue vec3(0.0, 0.1, 0.5)\n#define australianWhite vec3(0.9, 0.9, 0.9)\n#define australianRed vec3(0.78, 0.06, 0.18)\n\n/* Draws a star by changing color to white if p is close to 0(in star shape obviously).\n   This comment is terrible, but i don't understand what it does myself to describe it properly,\n   so deal with that. it draws a star, ok? */\nvec3 star(vec3 color, int points, vec2 p, float size) {\n    #define satan(a) sin(atan(p.y, p.x) + (a)*PI)\n    float smoothingRadius = 0.003;\n    float d = (points==5? 1.8 : 2.8) / float(points); // distance along circumference, where 2.0 is full circle\n    float control = -size + length(p);\n    for (int i = 0; i < points; i++) {\n        control =  min(control,\n                       max(-size + length(p) * max(satan(-d + (2.0/float(points))*float(i)),\n                                                   satan( d + (2.0/float(points))*float(i))),\n                           -length(p) * satan((2.0/float(points))*float(i))));\n    }\n    paintOver(color, australianWhite, 0.0, control);\n    return color;\n    #undef satan\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float ratio = iResolution.x / iResolution.y;\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float scalingFactor = 1.15;\n    uv = (uv)*scalingFactor  - vec2(0.5)*(scalingFactor-1.0);\n    //uv = (uv + vec2(0.5)) * 0.5 - vec2(0.5 * 0.5);\n    \n    \n    \n    //distortion\n    //uv += 0.005*vec2(sin(uv.y * 4.0 * PI + iTime), cos(uv.x * 0.5 * PI) + 1.0*sin(2.0*iTime + uv.x));\n    vec2 distortion = 0.5 * vec2(0.0, 0.03*sqrt(uv.x*3.0)*sin(uv.x * 4.0 * PI - iTime));\n    distortion += 0.0007 * vec2(0.7 * sin(3.0*iTime + 17.32 * PI * length(vec2(0.0, 1.0)-uv))\n                                    + sin(-7.843*iTime + 19.42 * PI * length(uv)), 0.0);\n    uv += distortion;\n    \n    vec2 q = uv - vec2(0.5, 0.5);\n    float smoothingRadius = 0.003; // used by combine macros, please don't kill\n    \n    vec2 areas = vec2(3.0, 2.0);\n    \n    vec3 col;\n    \n    switch (int((iResolution.y - iMouse.y) * areas.y / iResolution.y) * int(areas.x)\n        + int(iMouse.x * areas.x / iResolution.x)){\n        case 0:\n            // flag of Ukraine\n            col = ukrainianBlue;\n            paintOver(col, ukrainianYellow, 0.0, q.y);\n            break;\n        case 1:\n            // flag of Mauritius\n            col = mauritiusRed;\n            paintOver(col, mauritiusBlue, 0.25, q.y);\n            paintOver(col, mauritiusYellow, 0.0, q.y);\n            paintOver(col, mauritiusGreen, -0.25, q.y);\n            break;\n        case 2:\n            // flag of Costa Rica\n            col = costaRicanBlue;\n            paintOver(col, costaRicanWhite, 0.334, abs(q.y));\n            paintOver(col, costaRicanRed, 0.166, abs(q.y));\n            break;\n        case 3:\n            // flag of Seychelles\n            float dx = atan(uv.y, uv.x);\n            smoothingRadius /= length(uv);\n            col = seychellesBlue;\n            paintOver(col, seychellesYellow, 1.15, dx);\n            paintOver(col, seychellesRed, 0.9, dx);\n            paintOver(col, seychellesWhite, 0.5, dx);\n            paintOver(col, seychellesGreen, 0.25, dx);\n            break;\n        case 4:\n            // flag of Australia\n            col = australianBlue;\n            \n            // draw union jack\n            q = (uv - vec2(0.25, 0.75))*2.0;\n            // diagonal cross\n            paintOver(col, australianWhite, 0.0, -0.12-abs(q.x)+abs(q.y));\n            paintOver(col, australianBlue, 0.0, 0.12-abs(q.x)+abs(q.y));\n            paintOver(col, australianRed, 0.0, max(min(max(-q.x, -q.y),\n                                                       max( q.x,  q.y)),\n                                                   abs(abs(q.x)-abs(q.y)+0.05333)-0.04) );\n            paintOver(col, australianRed, 0.0, max(min(max(-q.x,  q.y),\n                                                       max( q.x, -q.y)),\n                                                   abs(abs(q.x)-abs(-q.y)-0.05333)-0.04) );\n            // vertical/horizontal cross\n            paintOver(col, australianWhite, 0.08, min(abs(q.x), abs(q.y/ratio)));\n            paintOver(col, australianRed, 0.048, min(abs(q.x), abs(q.y/ratio)));\n            \n            // crop the union jack and draw stars\n            q = uv - vec2(0.5, 0.5);\n            paintOver(col, australianBlue, 0.0, min(-q.x, q.y));\n            col = star(col, 5, (q + vec2(-0.306, 0.05)) * vec2(ratio, 1.0), 0.017);\n            col = star(col, 7, (q + vec2(0.25, 0.25)) * vec2(ratio, 1.0), 0.04);\n            col = star(col, 7, (q + vec2(-0.25, 0.29)) * vec2(ratio, 1.0), 0.02);\n            col = star(col, 7, (q + vec2(-0.25, -0.31)) * vec2(ratio, 1.0), 0.02);\n            col = star(col, 7, (q + vec2(-0.38, -0.13)) * vec2(ratio, 1.0), 0.02);\n            col = star(col, 7, (q + vec2(-0.12, -0.06)) * vec2(ratio, 1.0), 0.02);\n            break;\n        case 5:\n        default:\n            // flag of UK\n            col = australianBlue;\n            // diagonal cross\n            paintOver(col, australianWhite, 0.0, -0.12-abs(q.x)+abs(q.y));\n            paintOver(col, australianBlue, 0.0, 0.12-abs(q.x)+abs(q.y));\n            paintOver(col, australianRed, 0.0, max(min(max(-q.x, -q.y),\n                                                       max( q.x,  q.y)),\n                                                   abs(abs(q.x)-abs(q.y)+0.05333)-0.04) );\n            paintOver(col, australianRed, 0.0, max(min(max(-q.x,  q.y),\n                                                       max( q.x, -q.y)),\n                                                   abs(abs(q.x)-abs(-q.y)-0.05333)-0.04) );\n            // vertical/horizontal cross\n            paintOver(col, australianWhite, 0.08, min(abs(q.x), abs(q.y/ratio)));\n            paintOver(col, australianRed, 0.048, min(abs(q.x), abs(q.y/ratio)));\n            break;\n        \n    }\n    smoothingRadius = 0.003;\n    // Shadows\n    col = mix(col, vec3(0.0), 10.0*(distortion.y - distortion.x) + 0.2);\n    // Crop\n    q = uv - distortion;\n    paintOver(col, vec3(0.0), 0.0, min(min(min(1.0-q.x, q.x),\n                                          q.y + distortion.y), \n                                      1.0-(q.y + distortion.y)));\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}