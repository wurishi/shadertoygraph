{"ver":"0.1","info":{"id":"Xsc3RH","date":"1447928378","viewed":995,"name":"Black Hole (my edit)","username":"Darthman","description":"Edited version of https://www.shadertoy.com/view/XdjXDy shader","likes":22,"published":1,"flags":0,"usePreview":0,"tags":["space","blackhole"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// My edit of https://www.shadertoy.com/view/XdjXDy\n\nconst float pi = 3.1415927;\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdCappedCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 pp = fragCoord.xy/iResolution.xy ;\n\tpp = -1.0 + 2.0*pp;\n\tpp.x *= iResolution.x/iResolution.y;\n\n\tvec3 lookAt = vec3(0.0, 0.0, 0.0);\n    \n    float eyer = 2.0;\n    float eyea = (iMouse.x / iResolution.x) * pi * 2.0;\n    float eyea2 = ((iMouse.y / iResolution.y)-0.24) * pi * 2.0;\n    \n\tvec3 ro = vec3(\n        eyer * cos(eyea) * sin(eyea2),\n       eyer * cos(eyea2),\n        eyer * sin(eyea) * sin(eyea2)); //camera position\n    \n    \n\tvec3 front = normalize(lookAt - ro);\n\tvec3 left = normalize(cross(normalize(vec3(0.0,1,0)), front));\n\tvec3 up = normalize(cross(front, left));\n\tvec3 rd = normalize(front + left*pp.x + up*pp.y); // rect vector\n    \n    \n    vec3 bh = vec3(0.0,0.0,0.0);\n    float bhr = 0.2;\n    float bhmass = 20.0;\n   \tbhmass *= 0.001; // premul G\n    \n    vec3 p = ro;\n    vec3 pv = rd;\n    float dt = 0.02;\n    \n    vec3 col = vec3(0.0);\n    \n    float noncaptured = 1.0;\n     \n    vec3 c1 = vec3(0.9,0.35,0.1);\n    vec3 c2 = vec3(1.0,0.8,0.6);\n    \n    \n    for(float t=0.0;t<1.0;t+=0.005)\n    {\n        p += pv * dt * noncaptured;\n        \n        // gravity\n        vec3 bhv = bh - p;\n        float r = dot(bhv,bhv);\n        pv += normalize(bhv) * ((bhmass) / r);\n        \n        noncaptured = smoothstep(0.0, 0.1, sdSphere(p-bh,bhr));\n        \n        // Texture for the accretion disc\n        float dr = length(bhv.xz);\n        float da = atan(bhv.x,bhv.z);\n        vec2 ra = vec2(dr,da * (0.01 + (dr - bhr)*0.002) + 2.0 * pi + iTime*0.002 );\n        ra *= vec2(10.0,20.0);\n        \n        vec3 dcol = mix(c2,c1,pow(length(bhv)-bhr,0.5)) * max(0.0,texture(iChannel1,ra*vec2(0.1,0.5)).r+0.05) * (4.0 / ((0.001+(length(bhv) - bhr)*50.0) ));\n        \n        col += max(vec3(0.0),dcol * smoothstep(0.0, 1.0, -sdTorus( (p * vec3(1.0,25.0,1.0)) - bh, vec2(0.4,0.99))) * noncaptured);\n        \n     //   col += dcol * (1.0/dr) * noncaptured * 0.005;\n        \n        // Glow\n        col += vec3(1.0,0.9,0.85) * (1.0/vec3(dot(bhv,bhv))) * 0.0033 * noncaptured;\n        \n    }\n    \n    // BG\n //   col += pow(texture(iChannel0,pv.xy).rgb,vec3(5.0)) * 0.25;\n    \n    // FInal color\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}