{"ver":"0.1","info":{"id":"stjXDz","date":"1627482596","viewed":99,"name":"Forever Loading.","username":"dreamraster","description":"Just getting started with a test shader based on https://www.shadertoy.com/view/Xd3cR8","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["loading"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Based on https://www.shadertoy.com/view/Xd3cR8\n#define PI 3.14159\n#define SPEED 4.0\n#define WIDTH 0.008\n#define RADIUS 0.04\n\n#define aa 2.0 / min(iResolution.x,iResolution.y)\n\nvec2 remap(vec2 coord) \n{\n\treturn coord / min(iResolution.x,iResolution.y);\n}\n\nfloat circle(vec2 uv, vec2 pos, float rad) \n{\n\treturn 1.0 - smoothstep(rad,rad+0.005,length(uv-pos));\n}\n\nfloat ring(vec2 uv, vec2 pos, float innerRad, float outerRad)\n{\n\treturn (1.0 - smoothstep(outerRad,outerRad+aa,length(uv-pos))) * smoothstep(innerRad-aa,innerRad,length(uv-pos));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = remap(fragCoord.xy);\n    uv -= vec2(0.94 / iResolution.y * iResolution.x,0.10);\n    \n    float geo = ring(uv,vec2(0.0),RADIUS-WIDTH,RADIUS);\n    float rot = -iTime * SPEED;\n    uv *= mat2(cos(rot), sin(rot), -sin(rot), cos(rot));\n    float a = atan(uv.x,uv.y)*PI*0.05 + 0.5;\n    a = max(a,circle(uv,vec2(0.0,-RADIUS+WIDTH/2.0),WIDTH/2.0));\n    fragColor = vec4(0, a*geo, a*geo, a*geo);\n}","name":"Image","description":"","type":"image"}]}