{"ver":"0.1","info":{"id":"7lKBRK","date":"1664864424","viewed":205,"name":"Outpainting experiment #2","username":"sh1boot","description":"Trying to use just the alpha channel and mipmaps to move the texture coordinate to valid data.\n\nWant to move more slowly when near the edge, but it's going badly.","likes":3,"published":3,"flags":32,"usePreview":0,"tags":["extrapolation","predator","inpainting","stealth","outpainting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float blurryalpha(vec2 uv) {\n    float sum = 0.0;\n    float div = 0.0;\n    for (int i = 2; i < 11; ++i) {\n        float scale = pow(1.40, float(i));\n        float bias = float(i);\n        sum += texture(iChannel1, uv, float(i)).a * scale;\n        div += scale;\n    }\n    return sum / div;\n}\n\nvec2 alphagradient(vec2 uv, float eps) {\n    vec3 ho = vec3(-eps, eps, 0.0);\n    vec3 vo = vec3(-eps, eps, 0.0);\n    float lf = blurryalpha(uv + ho.xz);\n    float rt = blurryalpha(uv + ho.yz);\n    float up = blurryalpha(uv + vo.zx);\n    float dn = blurryalpha(uv + vo.zy);\n    return vec2(rt - lf, dn - up) / eps;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 bkg = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    vec4 colour = texture(iChannel0, uv);\n    float magic = blurryalpha(uv);\n    for (int i = 0; i < 6; ++i) {\n        if (colour.a >= 0.95) break;\n        float alpha = blurryalpha(uv);\n        alpha *= alpha;\n        alpha *= alpha;\n        vec2 dir = alphagradient(uv, 0.02);\n        if (length(dir) < 0.001) dir = alphagradient(uv, 0.1);\n#if 0\n        float scale = 0.125 * (1.0 - alpha);\n#else\n        float scale = 0.125 / (alpha + 0.3);\n#endif\n        uv += scale * normalize(dir);\n        colour = texture(iChannel0, uv);\n    }\n\n    bkg = bkg * (1.0 - colour.a) + colour.rgb * colour.a;\n\n    // Output to screen\n    fragColor = vec4(bkg,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec4 colour = texture(iChannel0, uv);\n\n    colour.a = texture(iChannel1, uv).a;\n\n    fragColor = colour;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 col = texture(iChannel0, uv).rgb;\n    float alpha = smoothstep(0.2, 0.35, col.g - max(col.r, col.b));\n\n    fragColor = vec4(alpha);\n}","name":"Buffer B","description":"","type":"buffer"}]}