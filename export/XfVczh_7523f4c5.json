{"ver":"0.1","info":{"id":"XfVczh","date":"1731491840","viewed":56,"name":"Kishica","username":"ivkoneli","description":"rain drops on water","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["rain"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// random value\nfloat hash(float n) {\n    return fract(sin(n) * 43758.5453123);\n}\n\n// Draws only the border of a circle with a specified thickness\nfloat CircleBorder(vec2 uv, vec2 position, float r, float thickness) {\n    uv -= position;\n    uv.y /= 0.45;\n    uv.x *= iResolution.x / iResolution.y;\n    float d = length(uv); \n    return smoothstep(r + thickness, r, d) - smoothstep(r, r - thickness - 0.025, d);\n}\n\n// fake a 3d space by adding a z-axis\nvec2 fake3DUV(vec2 uv) {\n    vec3 viewDir = vec3(vec2((uv.x - 0.5),abs(uv.y -  0.75)), 0.55); // Center X, Y, and add fake Z\n    vec2 planarUV = viewDir.xz / viewDir.y;    // Drop XZ into Y: XYZ -> XY\n    return planarUV;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    vec2 uv = fragCoord / iResolution.xy;  \n    // Transform UV into fake 3D space\n    uv = fake3DUV(uv); \n\n\n    // top part of the image\n    if (uv.y > 2.0) {\n        vec3 darkBlack = vec3(0.0, 0.0, 0.0); \n        vec3 darkBlue = vec3(0.0, 0.0, 0.45);  \n        vec3 color = mix(darkBlack, darkBlue, 0.5);\n        fragColor = vec4(color, 1.0); \n        return;\n    }\n\n\n    // Background color starts as the texture color\n    vec3 textureColor = texture(iChannel0, uv).rgb;\n    vec3 col = textureColor;\n\n    int circleCount = 250;\n    float timeScale = 0.0000001;\n    float thickness = 0.0025; \n    float maxBaseRadius = 0.05; \n    float growthRateBase = 0.075; \n    vec2 randomPos;\n\n    for (int i = 0; i < circleCount; i++) {\n        // constants for randomness\n        float maxRadius = maxBaseRadius + 0.03 * hash(float(i) * 78.91);\n        float growthRate = growthRateBase + 0.25 * growthRateBase * float(i) / float(circleCount);\n        float currentRadius = mod(growthRate * iTime, maxRadius + 0.09);\n\n        // Fade effect when increasing radius\n        float fadeFactor = smoothstep(maxRadius + 0.05, maxRadius - 0.03, currentRadius); // Wider fade range\n\n        // Generate random position\n        vec2 originalRandomPos = vec2(\n            hash(float(i) * 12.34 + sin(iTime * timeScale + float(i) * 0.05) * 100.0), \n            hash(float(i) * 56.78 + cos(iTime * timeScale - float(i) * 0.05) * 100.0)\n        );\n        // more randomness\n        randomPos += 0.02 * vec2(\n            sin(iTime * timeScale + float(i) * 3.14),\n            cos(iTime * timeScale - float(i) * 3.14)\n        );\n\n        // Transform random position into fake 3D space\n        randomPos = fake3DUV(originalRandomPos);\n        //randomPos = clamp(randomPos, vec2(-0.8), vec2(1.8)); // Ensure it stays within bounds\n\n\n        // Distance and angle for displacement effect\n        vec2 offset = uv.y - randomPos;\n        float dist = length(offset);\n        vec2 displacedUV = vec2(uv.y , uv.x);\n        float wave = 0.05 * sin(60.0 - iTime * 5.0);  \n        displacedUV = uv + normalize(offset) * wave;  \n        \n        // Sample the displaced texture\n        vec3 displacedTextureColor = texture(iChannel0, displacedUV).rgb;\n        vec3 displacedTextureColorFinal = mix(displacedTextureColor,  vec3(1.0) ,0.5); // make it brighter\n\n        // Calculate the circle border\n        float finalBorder = CircleBorder(uv, randomPos, currentRadius, thickness); // draw circle\n        \n        // Amplified effect with smoother fading\n        col = mix(col, displacedTextureColorFinal * 1.5, finalBorder * fadeFactor);  // More intense fade-in\n        \n    }\n    \n    fragColor = vec4(vec3(col) * vec3(0.5,0.5,1.0), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}