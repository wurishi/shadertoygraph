{"ver":"0.1","info":{"id":"XtVczK","date":"1536942308","viewed":72,"name":"In + Out Circle","username":"rlarp","description":"Goes in out","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["inout"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// SDF Sphere\nfloat sphere(vec3 p, float radius){\n    return length(p)-radius;\n}\n\n// Map distance to all objects in the scene\nfloat map(vec3 p)\n{\n    float radius = 0.7;\n    float t = iTime;\n    return sphere(p, -0.25- sin(t));\n}\n\n\nfloat trace(vec3 origin, vec3 r) \n{\n  float t = 0.0;\n    for (int i = 0; i < 32; ++i) {\n        vec3 p = origin + r * t;\n        float d = map(p);\n        t += d*0.9;\n        t += d;\n    }\n    return t;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv *2.-1.; // Remap the space to -1. to 1.\n    uv.x *= iResolution.x/iResolution.y; // Correct aspect ratio\n    \n   \tvec3 ray = normalize(vec3(uv, 1.0));\n    vec3 origin = vec3(0.0, 0.0,-1.);\n    \tfloat t = trace(origin, ray);\n    \n    float expFog = 2.0 / (t*t*0.1);\n    \n    vec3 fc = vec3(expFog);\n   \n\n    // Output pixels to screen\n    fragColor = vec4(fc,0.2);\n   \n}","name":"Image","description":"","type":"image"}]}