{"ver":"0.1","info":{"id":"lfsBzr","date":"1723288013","viewed":140,"name":"// _ball_6.2","username":"oleg304","description":"https://www.shadertoy.com/view/wddfRX","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["3d","fractal","volumetric"],"hasliked":0,"parentid":"dl3BWM","parentname":"// _ball_6.0"},"renderpass":[{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Created by S. Guillitte 2015\n\n\n// HLSL -> GLSL https://anteru.net/blog/2016/mapping-between-HLSL-and-GLSL/\n#define float2   vec2\n#define float3   vec3\n#define float4   vec4\n#define lerp     mix\n#define atan2    atan\n#define frac     fract\n#define fmod     mod\n#define float2x2 mat2     \n#define mul(a, b) a*b \n#define SamplerState float\n#define Texture2D float\n#define Texture2DSample(iChannel0, texSampl, uv) texture(iChannel0, uv)\n#define ddx dFdx\n#define ddy dFdy\n#define saturate(oo) clamp(oo, 0.0, 1.0)\nfloat nudge, normalizer;\t// size of perpendicular floattor\n\n//struct Func {\n\nfloat2 cmul( float2 a, float2 b){return float2(a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x );}\nfloat2 csqr( float2 a){ return float2(a.x*a.x - a.y*a.y, 2.*a.x*a.y);}\nfloat ns(float a) {float amp=.5; return .5+(.5*amp)*a;}\nfloat2x2 rot(float a) {return float2x2(cos(a),sin(a),-sin(a),cos(a));}\n\nfloat2 iSphere(in float3 ro, in float3 rd, in float4 sph ){\n\tfloat3 oc = ro-sph.xyz;\n\tfloat b = dot( oc, rd ); float c = dot(oc,oc)-sph.w*sph.w; float h=b*b-c;\n\tif(h<0.) return float2(-1.,-1.);\n\th = sqrt(h);\n\treturn float2(-b-h,-b+h);\n}\n\nfloat map(in float3 p){\t\n    float res=0.; float3 c = p;\n\tfor (int i = 0; i<10; ++i) {\n        //p =.7*abs(p)/dot(p,p) -.7;\n        p =(.7+sin(iTime/float(i-15))*.15)*abs(p)/dot(p,p)-.7;\n        p.yz= csqr(p.yz);\n        p=p.zxy;\n        res += exp(-29.*abs(dot(p,c)));        \n\t}\n\treturn res/2.;\n}\n\nfloat3 raymarch( in float3 ro, float3 rd, float2 tminmax){\n    float t = tminmax.x;\n    //float dt = .02;\n    float dt = .2-.195*cos(iTime*.05);//animated\n    float3 col= float3(0.,0.,0.);\n    float c = 0.;\n    for( int i=0; i<64; i++ ){\n        t+=dt*exp(-2.*c);\n        if(t*.202>tminmax.y)break;\n        float3 pos = ro+t*rd;        \n        c = map(ro+t*rd);        \n        //col = .99*col+ .08*float3(c*c, c, c*c*c);//green\t\n        //col = .99*col+ .08*float3(c*c*c, c*c, c);//blue\n        float o = (.6*ns(sin(1.7*iTime)));\n        float o2 = (.2*ns(cos(iTime)))+(.2*ns(cos(iTime+.5))) ;\n        col = .99*col+.2*pow(cos(.75*c-float3(.8+o2,.75,.5+o)),float3(16.,16.,16.));\n    }    \n    return col;\n}\n\n\nfloat4 res(float2 p, float time, float2 m, Texture2D intex, SamplerState intexSampl) { \n    // iTime =time; tex=intex; texSampl=intexSampl;\n    p-=1.;\n    p *=1.3;\n    // camera\n    float3 ro = float3(4.,4.,4.);\n    ro.yz=mul(ro.yz,rot(m.y));\n    //ro.xz=mul(ro.xz,rot(m.x+ .1*time));\n    float3 ta = float3(0.,0.,0.);\n    float3 ww = normalize(ta-ro);\n    float3 uu = normalize(cross(ww,float3(0.,1.,0.)));\n    float3 vv = normalize(cross(uu,ww));\n    float3 rd = normalize(p.x*uu+p.y*vv+4.*ww);    \n    float2 tmm = iSphere(ro,rd,float4(0.,0.,0.,2.));\n\t// raymarch\n    float3 col = raymarch(ro,rd,tmm);\n    if (tmm.x<0.){\n    //col = texture(iChannel0, rd).rgb;\n    // // UE texture operation\n    //col = Texture2DSample(tex, texSampl, rd).rgb;\n    col = float3(0.,0.,0.);\n    }else {\n        float3 nor=(ro+tmm.x*rd)/2.;\n        nor = reflect(rd, nor);        \n        float fre = pow(.5+clamp(dot(nor,rd),0.,1.),3.)*1.3;\n        // UE texture operation\n        // col += Texture2DSample(tex, texSampl, nor).rgb * fre;\n        col += texture(iChannel0, nor).rgb * fre;\n    }\t\n\t// shade    \n    col = .5 *(log(1.+col));\n    col = clamp(col,0.,1.);\n    return float4(col,1.);\n}\n\n//float iTime; Texture2D tex; SamplerState texSampl;}; Func f; return f.res(in_uv, in_time, rot, tex, texSampler);\n\n//// HLSL -> ShaderToy\nvoid mainImage(out float4 fragColor, in float2 fragCoord) {    \n    float2 uv\t= fragCoord.xy / iResolution.y*2.;\n    float2 m = float2(0.,0.);\n\tif( iMouse.z>0.0 ) m = iMouse.xy/iResolution.xy*3.14;\n    m-=.5;\n    fragColor = res(uv, iTime, m, 1., 1.);\n}\n","name":"Image","description":"","type":"image"}]}