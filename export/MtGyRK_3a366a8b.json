{"ver":"0.1","info":{"id":"MtGyRK","date":"1536876662","viewed":92,"name":"Shader  #2","username":"jkashimura","description":"HW","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["beginner"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGzn","filepath":"/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","previewfilepath":"/media/ap/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Sphere - Signed Distance Function\nfloat sphere(vec3 p, float radius){\n    return length(p)-radius;\n}\n\n\n\n\n\n// Locate objects\nfloat map(vec3 p)\n{    \n    // Sphere radius\n    float sphereSize = cos(iTime)+1.;\n    \n    // Transform coordinate space so spheres repeat\n    vec3 q = fract(p) * 2.0 - 1.0;\n    \n     int tx = int(q.x);\n    float fft  = texelFetch( iChannel0, ivec2(tx,0), 0 ).x; \n\tfft *= 2.5;\n    // Signed distance of sphere\n    float s = sphere(q, sphereSize);\n    \n    float d = 0.1 * (cos(q.x*5.*fft) * cos(q.y*5.*fft) * cos(q.z*5.*fft) );\n    //return s +wave;\n    return s+d;\n}\n\n\n// Trace rays\nfloat trace(vec3 origin, vec3 r) \n{\n  float t = 0.0; // Distance Traveled\n    for (int i = 0; i < 100; ++i) {\n        vec3 p = origin + r * t*-sin(iTime);\n        float d = map(p); // Locate object\n        t += d * 0.2; // Step along the ray\n        \n        \n    }\n    return t; \n    \n    \n}\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 color = vec3(tan(iTime), cos(iTime*0.4), -sin(iTime)+3.);\n  \n    uv = uv *2.-1.; // Remap the space to -1. to 1.\n    uv.x *= iResolution.x/iResolution.y;\n    \n    \n\n   \t// Create ray to fire into scene\n   \tvec3 ray = normalize(vec3(uv, 1.5));\n    \n    // Create origin of scene\n    vec3 origin = vec3(0., 0.,iTime);\n   \n    \n    // Trace any objects in the scene\n    float t = trace(origin*cos(iTime)*.5, ray*-sin(iTime)*.5);\n    \n    t += smoothstep(-sin(iTime),-tan(iTime),cos(iTime));\n    \n    // Generate fog based on distance from t\n    float fog = 100. / (1.0 + t * t * 0.3);\n    float expFog = 2.0 / (t*t*0.1);\n    // Final color with includes sdf + fog\n    vec3 fc = vec3(expFog*7.);\n     //vec3 fc = vec3(expFog*7.,iTime/uv.xy-vec2(-cos(iTime),0));\n\t\n    //fc /= cos(log(color*fft)*0.5);\n    fc -= tan(color);\n    // Output to screen\n    fragColor = vec4(-cos(fc*0.7)+sin(fc*0.7),6.0);\n}\n/* \n    \n    \n    // Trace any objects in the scene\n    float t = trace(origin, ray);\n    \n    // Generate fog based on distance from t\n    float fog = 1.0 / (1.0 + t * t * 0.1);\n    \n    // Final color with includes sdf + fog\n    vec3 fc = vec3(fog);\n\n\n    //fc -= abs(log(tan(color))); //different transitioning of color   \n    fc -= tan(color);\n    \n    // Output to screen\n    fragColor = vec4(fc, color);\n*/\n\n\n","name":"Image","description":"","type":"image"}]}