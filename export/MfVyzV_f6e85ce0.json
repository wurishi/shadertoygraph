{"ver":"0.1","info":{"id":"MfVyzV","date":"1732123707","viewed":26,"name":"Multibrot d3","username":"petit_slimy","description":"big ass musquito, also what's public + API doing?","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int power = 3;\n//const int powerabs = abs(power);\n\nvec2 rotate(vec2 a, float angle){\nreturn vec2(cos(angle)*a.x - sin(angle)*a.y, sin(angle)*a.x + cos(angle)*a.y);\n}\n\nfloat modulus(vec2 a) {return sqrt(a.x*a.x + a.y*a.y);}\n\nfloat arg(vec2 a){return atan(a.y,a.x);}\n\nvec2 complexPower(vec2 a, float power){\nreturn exp(power * log(modulus(a)))*vec2(cos(power*arg(a)),sin(power*arg(a)));\n}\n\n\n\n\nvec2 complexPow(vec2 a){\nvec2 b=a;\nint pn = int(abs(float(power)));\n\nfor(int i = 1; i < power; i++){\nb= vec2(b.x * a.x - b.y*a.y, b.x*a.y + a.x*b.y);\n}\n\nif(power<0){\nreturn vec2(b.x/(b.x*b.x + b.y*b.y),-1.0*b.y/(b.x*b.x + b.y*b.y));\n}else{\nreturn b;\n}\n}\n\nint loopZ(vec2 c,int resolution){\n    vec2 z = vec2(0.0,0.0);\n    int steps = 0;\n    \n    for(int ind = 1; ind <= 256; ind++){\n    \n    z = complexPower(z,3.0)+c;\n \n    \n    if(sqrt(z.x*z.x + z.y*z.y)>2.0){\n    steps = ind;\n    break;\n    }\n}\n\nreturn steps;\n\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 ratio = vec2(iResolution.x / iResolution.y,1.0);\n    highp float size = 4.0;\n    int res =256;\n    \n    vec3 basecolor = vec3(0.0,0.1,0.5);\n    vec3 endcolor = vec3(0,1,1);\n    //try -0.05,.6805 with zÂ² or 0.225153,0.9995 with z^3\n    vec2 target = vec2(0.225153,0.9995);\n    \n    int steps = loopZ(target + rotate((uv - vec2(0.5,0.5))*size*ratio / pow(2.0,(1.0+sin(iTime/9.0 * (3.1415/2.0) -3.1415/2.0))*9.0),iTime/18.0),res);\n    vec3 assmusquito = vec3(0,0,0);\n    if(steps!=0){\n    float x = (float(steps)/float(res));\n    assmusquito = basecolor + (endcolor-basecolor) * pow(3.0*x*x - 2.0*x*x*x,1.5);\n    }\n    // Time varying pixel color\n    vec3 col = vec3(uv,0);\n\n    // Output to screen\n    fragColor = vec4(assmusquito,1.0);\n}","name":"Image","description":"","type":"image"}]}