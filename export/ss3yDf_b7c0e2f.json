{"ver":"0.1","info":{"id":"ss3yDf","date":"1654155713","viewed":59,"name":"Mandelbrot017","username":"SuvoJaso","description":"It is a noob version of mandelbrot set","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrotset"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592653589793238462643\n\nconst float MAX_ITER = 256.0;\nconst float MAX_Z_LENGTH = 8192.0;\n\nfloat lerp(float a, float b, float t)\n{\n    return a + (b - a) * t;\n}\n\nfloat ilerp(float v, float a, float b)\n{\n    return (v - a) / (b - a);\n}\n\nfloat map(float v, float fromA, float fromB, float toA, float toB)\n{\n    float t = ilerp(v, fromA, fromB);\n    return lerp(toA, toB, t);\n}\n\nvec2 rv(vec2 v, float r)\n{\n    float a = atan(v.y, v.x);\n    //a += r;\n    return vec2(cos(a), sin(a)) * length(v);\n}\n\nfloat mandelbrot(vec2 uv, float r)\n{\n    vec2 fractCoord = vec2(-0.1528, 1.0397);\n    \n    vec2 c = rv(uv, r) + fractCoord;\n    vec2 z = vec2(0.0);\n    float i = 0.0;\n    \n    //c = (c / pow(iTime, 2.0)) - vec2(0.65, 0.45);\n    \n    for (i = 0.0; i < MAX_ITER; i++)\n    {\n        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n        \n        if (dot(z, z) > MAX_Z_LENGTH * MAX_Z_LENGTH)\n        {\n            return i + 1.0 - log(log(length(z)) - 2.0);\n            //return i / MAX_ITER;\n        }\n    }\n    \n    return i + 1.0 - log(log(length(z)) - 2.0);\n    //return 0.0;\n}\n\nvec3 fcolor(float f)\n{\n    if (f < 512.0)\n    {\n        return vec3(0.5 * sin(f / 35.0));\n    }\n    \n    return vec3(0.0, 0.0, 0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspect = iResolution.x / iResolution.y;\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    vec2 offset = vec2(-0.3 * aspect, 0.0);\n    \n    float mZoom = 1.0e5;\n    float zTime = log(mZoom - 2.0);\n    float zoom = pow(2.731, mod(iTime, zTime));\n    float zPhase = mod(iTime / zTime, 1.0);\n    float r = (4.0 * PI - 4.0) * zPhase;\n    \n    float m1 = mandelbrot(uv / zoom, r);\n    float m2 = mandelbrot(uv * mZoom / zoom, r + 4.04);\n    \n    float w = pow(zPhase, 5.0);\n    vec3 col = vec3(0.0);\n    col = fcolor(m1) * (1.0 - w) * clamp(1.0 - 0.2 * m2, 0.0, 1.0);\n    col += fcolor(m2) * w;\n    \n    //col = pow(col, vec3(0.45));\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}