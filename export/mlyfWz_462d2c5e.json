{"ver":"0.1","info":{"id":"mlyfWz","date":"1701976642","viewed":43,"name":"Adjustable Julia Zoom","username":"noahsk","description":"This depicts a zoom into a specific Julia fractal of the Mandelbrot set, and you can adjust it however you'd like!","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","julia","mandelbrot","zoom","shader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Adjustable variables:\n    // - - - - - - - - - - -\n    // zoom's exponent (default 1.5) can be changed to control the speed of\n    // the zoom.\n    // center can be changed to zoom to a different point.\n    // c can be changed to make a different julia fractal\n    // maxIter can be changed to change the detail in the image\n    // - - - - - - - - - - -\n    \n    // If this helps you in your studies, projects, or whatnot, please\n    // mention me somewhere in your work!\n\n    \n\n    // Zoom and location parameters\n    float zoom = pow(1.5, (iTime - 4.0));\n    vec2 center = vec2(0.486647462939, -0.395369351479); // Center point of the zoom\n\n    // Normalized pixel coordinates adjusted for zoom and center\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / (iResolution.y * zoom) + center;\n\n    // Julia set constant\n    vec2 c = vec2(0.355, 0.355);\n    \n    // Iteration parameters\n    int maxIter = 800;\n    float escapeRadius = 16.0;\n\n    // Initialize z to the current pixel\n    vec2 z = uv;\n    int i;\n    for (i = 0; i < maxIter && dot(z, z) < escapeRadius; ++i)\n    {\n        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n    }\n\n    // Map the number of iterations to a color\n    float smoothColor = float(i) - log2(log2(dot(z, z))) + 4.0;\n    vec3 col = 0.5 + 0.5 * cos(3.0 + smoothColor * 0.1 + vec3(1.0, 0.5, 0.25));\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}