{"ver":"0.1","info":{"id":"ddGyz3","date":"1696368753","viewed":36,"name":"inktober 2023 #3 - Path","username":"Shalexder","description":"path","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","path","inktober"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURFACE_DIST 0.01\n\n\nfloat random (vec2 st) {\n  return fract(sin(dot(st.xy, vec2(12.9898,78.233)))*43758.5453123);\n  }\n\n\nfloat rand(float n){return fract(sin(n) * 43758.5453123);}\nfloat rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(float p){\n\tfloat fl = floor(p);\n  float fc = fract(p);\n\treturn mix(rand(fl), rand(fl + 1.0), fc);\n}\n\t\nfloat noise(vec2 n) {\n\tconst vec2 d = vec2(0.0, 1.0);\n  vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nvec2 rotate(vec2 p, float a){\n    float c = cos(a);\n    float s = sin(a);\n    mat2 m = mat2(c, s, -s, c);\n    return m*p;\n}\nfloat smoothMin( float d1, float d2, float k ) {\n  float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n  return mix( d2, d1, h ) - k*h*(1.0-h); }\nfloat smoothMax( float d1, float d2, float k ) {\n  float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n  return mix( d2, d1, h ) + k*h*(1.0-h); }\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat box(vec3 p){\n    p-=vec3(0., .34, 5.);\n    p.xz = rotate(p.xz, iTime);\n    p.yz = rotate(p.yz, iTime);\n    return sdBox(p, vec3(.12+.0*iTime*.02));\n}\n\n\nfloat grass(vec3 p){\n    p.xz *= 2.;\n    vec2 id = floor(p.xz);\n    p.xz = fract(p.xz);\n    \n    float r = rand(id);\n    //length(p.xz-.5)-.05;//\n    return sdCapsule(p, vec3(.5, 0., .5), vec3(.5, 3., .5), .08-p.y*.02+0.*.01*sin(6.28*r+p.y*10.));\n}\n\nfloat getDist(vec3 p){\n  float path = length(vec2(p.x/*sin(p.z*3.)*.02+sin(p.z*10.)*.025*/, p.y))-.1;\n  float ground = smoothMax(p.y, -path, .3);\n  float grass = grass(p);\n  \n  float s = length(p-vec3(0., .34, 5.))-2.;\n  float groundAndGrass = smoothMin(ground, grass, .1);\n  return min(max(groundAndGrass, -s), box(p));\n}\n\nfloat rayMarch(vec3 ro, vec3 rd){\n    float dO = 0.;\n    for(int i = 0; i < MAX_STEPS; i++){\n        float d = getDist(ro+dO*rd);\n        dO += d*.6;\n        if(d < SURFACE_DIST || dO > MAX_DIST) break;\n    }\n    return dO;\n}\n\nvec3 getNormal(vec3 p){\n    float d = getDist(p);\n    vec2 e = vec2(.01, 0.);\n    return normalize(d-vec3(\n        getDist(p-e.xyy),\n        getDist(p-e.yxy),\n        getDist(p-e.yyx)\n    ));\n}\n\nfloat getLight(vec3 p, vec3 lightPos){\n    vec3 ld = normalize(lightPos-p);\n    vec3 n = getNormal(p);\n    return clamp(dot(ld, n), 0., 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (gl_FragCoord.xy-.5*iResolution.xy)/iResolution.y;\n\n    float t = iTime-4.;\n    float anim = smoothstep(2.8, 3., t);\n    \n    vec3 ro = vec3(0., .3+mix(sin(t*10.)*.03, 0., anim), smoothMin(t, 3.-(t-3.), 2.)/*mix(t, 3.-(t-3.), smoothstep(1., 3., t))*/);\n    vec3 rd = normalize(vec3(uv.x, uv.y, mix(0., (t-3.)*.8, anim)+1.));\n    rd.yz = rotate(rd.yz, mix(sin(t*10.+3.14/2.+.1)*.05, 0., anim));\n    \n    float d = rayMarch(ro, rd);\n    vec3 p = ro+d*rd;\n    \n    vec3 col = vec3(0., 0., .15);\n    \n    if(rand(gl_FragCoord.xy) > .997){\n        col =vec3(.5); \n    }\n    \n    if(d < MAX_DIST){\n        col = (vec3(61, 54, 47)/255.);\n        vec2 rp = p.xz*2.;\n                    vec2 id = floor(rp.xy);\n    \n            float r = random(id);\n        rp.xy = fract(rp.xy);\n\n        col *= smoothstep(length(rp-.5)*7., 0., .2);\n        \n        col = mix(vec3(33, 31, 28)/255., col ,smoothstep(abs(p.x), 0., .1));\n        \n        float dGrass = grass(p);\n        if(dGrass <= SURFACE_DIST*2.){\n\n            col = mix(vec3(.2, .8, .3)*.3, vec3(.2, .8, .3)*.4, smoothstep(0.15, .2, (sin(6.28*r+p.y*50.)*.2)));\n        }\n\n        col /= (abs(p.x)+1.5);\n        col *= 1.5;\n        float distanceLight = 1.-d*.08;\n        vec3 lp = ro+vec3(2., 2., 2.);\n        float light = map(getLight(p, lp), 0., 1., .4, 1.)*distanceLight;\n        col *= light;\n        \n\n        if(box(p) < SURFACE_DIST){\n            col = vec3(1.);\n        }\n        \n    }\n    \n    col *= 1.3;\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}