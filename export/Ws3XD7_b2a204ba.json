{"ver":"0.1","info":{"id":"Ws3XD7","date":"1572549103","viewed":172,"name":"Halloween Graveyard","username":"96logda","description":"I know this code is not my best one but my goal was to get this effect done when it is halloween. \nI am quite proud of the effect. :)\nIt's my first halloween effect.\n\nI welcome all feedback.","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["2d","fractal","hell","ghost","halloween","dead","tombstone","graveyard"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Copyright (c) 2019-09-10 - 2019-10-31 by Angelo Logahd\n//Portfolio: https://angelologahd.wixsite.com/portfolio\n\n#define PI \t   3.14159265\n#define TWO_PI 6.28318530\n\nconst float GhostBaseHeight = 0.25;\n\nfloat sdGravestone(in vec2 st, int nrOfSides)\n{\n    float a = atan(st.x, st.y) + PI;\n    float r = TWO_PI / float(nrOfSides);\n    return cos(floor(0.5 + a / r) * r - a) * length(st);\n}\n\nbool ghost (vec2 pos, vec2 ghostPos) \n{  \n    vec2 pos2 = vec2(pos.x, pos.y * GhostBaseHeight);\n    \n    if (length(pos2 - ghostPos) > 1.0)\n    {\n        return false;\n    }\n    \n    vec2 leftEye  = ghostPos + vec2(-0.3, 0.5);\n    vec2 rightEye = ghostPos + vec2(0.3, 0.5); \n    if (length(pos2 - leftEye)  < 0.1 ||\n        length(pos2 - rightEye) < 0.1) \n    {\n        return false;\n    }  \n    if (pos.y < 0.1 * cos(10.0 * pos.x - ghostPos.x)) \n    {\n        return false;\n    }\n    \n    vec2 relativePos = pos - ghostPos;\n    if (abs(relativePos.y - 0.2 * cos(2.0 * iTime + 10.0 * relativePos.x)) < 0.05)\n    {\n        return false;\n    }\n    \n    return true;\n}\n\nbool sadghost (vec2 pos, vec2 ghostPos) \n{\n    vec2 pos2 = vec2(pos.x, pos.y * GhostBaseHeight);\n    \n    if (length(pos2 - ghostPos) > 1.0)\n    {\n        return false;\n    }\n    \n    vec2 leftEye  = ghostPos + vec2(-0.3, 0.5);\n    vec2 rightEye = ghostPos + vec2(0.3, 0.5); \n    if (length(pos2 - leftEye)  < 0.1 ||\n        length(pos2 - rightEye) < 0.1) \n    {\n        return false;\n    }  \n    if (pos.y < 0.1 * cos(10.0 * pos.x - ghostPos.x)) \n    {\n        return false;\n    }\n    \n    vec2 relativePos = pos - ghostPos;\n    if (abs(relativePos.y - 0.2 * cos(2.0 * iTime + 10.0 * relativePos.x)) < 0.05)\n    {\n        return false;\n    }\n    \n    relativePos = pos - ghostPos;\n    if (relativePos.x > -0.5 && relativePos.x < 0.5)\n    {\n        if (abs(relativePos.y - 1.3 * cos(1.5 * relativePos.x)) < 0.05) \n        {\n            return false;\n        }\n    }\n    \n    return true;\n}\n\nbool deadGhost (vec2 pos, vec2 ghostPos) \n{\n    vec2 pos2 = vec2(pos.x, pos.y * GhostBaseHeight);\n    \n    if (length(pos2 - ghostPos) > 1.0)\n    {\n        return false;\n    }\n    \n    if (pos.y < 0.1 * cos(10.0 * pos.x - ghostPos.x)) \n    {\n        return false;\n    }\n    \n    return true;\n}\n\nfloat box(in vec2 st, in vec2 size)\n{\n    size = vec2(0.5) - size * 0.5;\n    vec2 uv = smoothstep(size, size + vec2(0.001), st);\n    uv *= smoothstep(size, size + vec2(0.001), vec2(1.0) - st);\n    return uv.x * uv.y;\n}\n\nfloat sdCross2D(in vec2 st, vec2 size)\n{\n    return  box(st, vec2(size.x, size.y / 4.0)) +\n            box(st, vec2(size.x / 4.0, size.y));\n}\n\nfloat sdCross2D(in vec2 st, float size)\n{\n    return  box(st, vec2(size, size / 4.0)) +\n            box(st, vec2(size / 4.0, size));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    float zoom = 0.05;\n    vec2 pos   = uv / zoom;\n    \n    vec2 st = uv * 2.0 - 1.0;\n    \n    vec3 color = vec3(0.0);\n    \n    float d = sdGravestone(st + vec2(-0.8, -0.3), 5);\n    color = vec3(1.0 - smoothstep(0.4, 0.41, d));\n    if (d <= 0.4)\n    {\n        color = texture(iChannel0, st * 1.5).rgb * 0.85 * vec3(0.8, 0.6, 0.3);\n        \n        vec2 camera = vec2(-0.5, 0.05);  \n    \tfloat zoom  = 0.05;\n    \tvec2 pos    = (uv / zoom) - camera;\n        if (deadGhost(pos - vec2(18.5, 10.0), vec2(0.0, 0.1)))\n        {\n            color = color * vec3(0.3);\n            fragColor = vec4(color,1.0);\n        }\n        \n        color += vec3(sdCross2D(st - vec2(0.26, -0.25), 0.035));\n        color += vec3(sdCross2D(st - vec2(0.34, -0.25), 0.035));\n    }\n    else\n    {        \n        if (st.y < -0.1)\n        {\n            color = mix(texture(iChannel1, st).rgb, vec3(0.0, 1.0, 0.0), 0.1 * abs(1.0 - st.y));\n            color = mix(color, vec3(1.0 + st.y * d, 1.0, 1.0), st.y);\n            vec3 color1 = color;\n            \n            vec2 texUV = uv;\n            texUV.x *= 0.5;\n            texUV.y += 0.5;\n \t\t\tvec3 color2 = texture(iChannel2, texUV).rgb;\n            \n            color = mix(color, color2, st.y);\n            color.r = color1.r * 0.4;\n            \n           \tcolor = mix(color, color1, 0.3);\n        }\n        else\n        {\n            color = vec3(0.0, 0.0, 0.0);\n            color.r = 1.0 - st.y;\n            \n            vec2 texUV = uv;\n            texUV.x *= 0.5;\n            texUV.y -= 0.3;\n \t\t\tcolor = texture(iChannel2, texUV).rgb;\n        }\n    }\n    \n    vec2 gravenyardP = st - vec2(0.3, 0.05);\n    d = sdCross2D(gravenyardP, vec2(0.1, 0.135));\n    if (d > 0.0)\n    {\n        color = vec3(0.2);\n        fragColor = vec4(color, 1.0);\n        return;\n    }\n    \n    vec2 ghost1Pos = vec2(2.0, 0.0);\n    ghost1Pos.x += cos(iTime * 0.2) * 5.0 + 25.0;\n    if (ghost(pos, ghost1Pos)) \n    {\n        color = vec3(0.0);\n        color.r = uv.y * 2.0;\n        fragColor = vec4(color,1.0);\n        return;\n    }\n    \n    vec2 ghost2Pos = vec2(5.0, 0.5);\n    ghost2Pos.x += cos(iTime * 0.2) * 5.0 + 25.0;\n    if (ghost(pos, ghost2Pos))\n    {\n        color = vec3(0.0);\n        color.r = uv.y * 2.0;\n        fragColor = vec4(color,1.0);\n        return;\n    }\n    \n    if (sadghost(pos - vec2(5.0, 9.0), vec2(0.0, 0.3)))\n    {\n        color = vec3(1.0);\n        fragColor = vec4(color,1.0);\n        return;\n    }\n    \n    if (sadghost(pos - vec2(8.0, 9.0), vec2(0.0, 0.1)))\n    {\n        color = vec3(0.0, 1.0, 0.5);\n        fragColor = vec4(color,1.0);\n        return;\n    }\n    \n    if (sadghost(pos - vec2(11.0, 9.0), vec2(0.0, 0.2)))\n    {\n        color = vec3(1.0, 0.5, 0.0);\n        fragColor = vec4(color,1.0);\n        return;\n    }\n    \n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Copyright (c) 2019-09-10 - 2019-10-31 by Angelo Logahd\n//Portfolio: https://angelologahd.wixsite.com/portfolio\n\nconst vec2 juliaC = vec2(0.4, 0.3);\n\nvec2 complexZ(const in vec2 z)\n{\n    return mat2(z, -z.y, z.x) * z;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy - iResolution.xy * 0.5;\n\tuv *= 2.0 / min(iResolution.x, iResolution.y);\n    \n    uv.x += 1.15;\n    uv.y -= 0.3;\n    \n    vec3 col = vec3(0.0);\n    vec2 z = uv * 0.5;   \n    int count = 0;\n\tfor (; count < 4; ++count) \n    {\n \t\tz = complexZ(z) - juliaC;\n        z = complexZ(z) - juliaC;\n        z = complexZ(z) - juliaC;\n        z = complexZ(z) - juliaC;\n        \n        z = complexZ(z) + juliaC;\n        z = complexZ(z) + juliaC;\n        z = complexZ(z) - juliaC;\n        \n        if (dot(z, z) > 2.0)\n        {\n            break;\n \t\t} \n    }\n    \n    for (; count < 4; ++count) \n    {\n        z = complexZ(z) - juliaC;\n        z = complexZ(z) + juliaC; \n        \n        if (dot(z, z) > 2.0)\n        {\n            break;\n \t\t}\n    }\n    \n    col = texture(iChannel1, uv * 0.5).rgb / texture(iChannel0, uv).rgb;\n    col *= 0.25;\n    \n    float d = abs(dot(z, vec2(0.5)));\n    col -= step(d, 2.0);\n    col = mix(col, vec3(1.0, 1.0, 1.0), 0.7);\n    \n    vec2 texUV = vec2(float(count));\n    texUV /= 100.0;\n    \n    fragColor.rgb = mix(texture(iChannel0, texUV).rgb, texture(iChannel2, texUV).rgb, 0.25).rgb  * vec3(1.0, 0.9, 0.0) - col;\n    //fragColor.rgb = texture(iChannel0, texUV).rgb * vec3(0.0, 1.0, 1.0) - col;\n    fragColor.rgb = pow(fragColor.rgb, vec3(0.4545));\n    fragColor.a = 1.0;\n}","name":"Buffer A","description":"","type":"buffer"}]}