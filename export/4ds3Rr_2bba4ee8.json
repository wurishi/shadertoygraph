{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"//\tvec2 uv = fragCoord.xy / iResolution.xy;\n//\tfragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n\n// Inputs changed into more readable constants:\nfloat shaderparm=5., fov=.9, pitch=0., heading=90., dheading=0.;\nvec3 lightdir=vec3(1,1,1), position=vec3(0,0,1), speed=vec3(0,0,1.5);\n\n// constants for the other worm tunnel part:\n//float shaderparm=8, fov=.8, pitch=0, heading=-90, dheading=0;\n//vec3 lightdir=vec3(1,1,1), position=vec3(0,0,0), speed=vec3(0,0,0);\n\n\nvec3 rotatey(vec3 r, float v)\n{  return vec3(r.x*cos(v)+r.z*sin(v),r.y,r.z*cos(v)-r.x*sin(v)); \n}\nvec3 rotatex(vec3 r, float v)\n{ return vec3(r.y*cos(v)+r.z*sin(v),r.x,r.z*cos(v)-r.y*sin(v)); \n}\nfloat mat=0., tmax=10.;\nfloat eval(vec3 p) \n{ \n////// this is the (only) part that changes for the scenes in Sult\n  float t = iTime,r,c=0.,g,r2,r3;\n  vec3 pp;\n  p += ( sin(p.zxy*1.7+t)+sin(p.yzx+t*3.) )*.2;\n  if (shaderparm<6.)\n    c = length(p.xyz*vec3(1,1,.1)-vec3(0,-.1,t*.15-.3))-.34;\n  else\n    c = length(p.xy+vec2(.0,.7))-.3+ (sin(p.z*17.+t*.6)+sin(p.z*2.)*6.)*.01;\n  \n  p.xy = vec2( atan(p.x,p.y)*1.113, 1.6-length(p.xy)-sin(t*2.)*.3);\n  pp = fract(p.xzz+.5).xyz -.5; pp.y=(p.y-.35)*1.3;\n  r = max( abs(p.y-.3)-.05, abs(length(fract(p.xz)-.5)-.4)-.03);  \n  mat = step(c,r);\n  return min(min(r,c),p.y-.2);\n}\nvec3 diffdark= vec3(.19,.2,.24), difflight=vec3(1), \n     diffrefl= vec3(.45,.01,0),  background=vec3(.17,0,0);\n//////////\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 p = fragCoord.xy / iResolution.xy-.5;\n  vec3 vdir= normalize(\n               rotatey(rotatey(vec3(p.y*fov,p.x*fov*1.33,1),\n               -pitch*.035).yxz,(heading+dheading*iTime)*.035)),\n       vpos= position + speed*iTime;\n  \n  float cf=1.,rf=0.,t,stp,tmin=0.,c,r,m,d;\n  vec3 e=vec3(.01,0,0),cx=e.yyy,n;\n  \n\t//while (cf>.1)\n  for (int j=0;j<2;j++)\n\t{ \n    t=tmin;stp=1.;\n\t  //for (t=tmin,stp=1.;t<tmax && stp>.005;t+=stp)\n    //  stp = eval(vpos+vdir*t);\n    for (int i=0;i<64;i++)\n\t{\n\t\tt+=stp;\n\t\tif (t>tmax ||stp<0.005) break;\n\t\tstp = eval(vpos+vdir*t);\n\t}\n\tif (t<tmax) \n    { vpos+= vdir*t;\n      c= eval(vpos);\n      m = mat;\n      n= normalize(-vec3(c-eval(vpos+e.xyy),c-eval(vpos+e.yxy),\n                   c-eval(vpos+e.yyx)));\n      r= clamp(eval(vpos+n*.05)*4.+eval(vpos+n*.1)*2.+.5,.1,1.); // ao\n\t\n      // shade\n      rf = .1+m*.2;\n      n= normalize(n+step(4.,shaderparm)*mat*sin(vpos.yzx*40.)*.05);\n      vdir=reflect(vdir,n);\n      d=clamp(dot(normalize(lightdir),n),.0,1.);\n\t\t\n      n= mix(mix(diffdark,difflight,d),diffrefl*(d+.2), m)\n\t +vec3(.7 * pow( clamp( dot( normalize(lightdir),vdir)\n         ,.0,1.) ,12.)); // n = col..\n\n       cx += cf* mix(n*r, background, t/tmax);\n       cf*= rf*(1.-t/tmax);\n       tmin= .1;\n     }\n     else{\n       cx += cf*background;\n       cf=0.;\n     }\n   }   \n   fragColor.xyz= cx;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4ds3Rr","date":"1373671638","viewed":1490,"name":"Sult Tunnel","username":"Psycho","description":"adapted from shadertoy, adapted from Sult ;)","likes":21,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","tunnel","sult"],"hasliked":0,"parentid":"","parentname":""}}