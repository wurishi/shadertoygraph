{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"float det(vec2 a, vec2 b) { return a.x*b.y-b.x*a.y; }\n\nvec2 closestPointInSegment( vec2 a, vec2 b )\n{\n  vec2 ba = b - a;\n  return a + ba*clamp( -dot(a,ba)/dot(ba,ba), 0.0, 1.0 );\n}\n\n// From: http://research.microsoft.com/en-us/um/people/hoppe/ravg.pdf\nvec2 get_distance_vector(vec2 b0, vec2 b1, vec2 b2) {\n\t\n  float a=det(b0,b2), b=2.0*det(b1,b0), d=2.0*det(b2,b1); // ð›¼,ð›½,ð›¿(ð‘)\n  \n  if( abs(2.0*a+b+d) < 1000.0 ) return closestPointInSegment(b0,b2);\n\t\n  float f=b*d-a*a; // ð‘“(ð‘)\n  vec2 d21=b2-b1, d10=b1-b0, d20=b2-b0;\n  vec2 gf=2.0*(b*d21+d*d10+a*d20);\n  gf=vec2(gf.y,-gf.x); // âˆ‡ð‘“(ð‘)\n  vec2 pp=-f*gf/dot(gf,gf); // ð‘â€²\n  vec2 d0p=b0-pp; // ð‘â€² to origin\n  float ap=det(d0p,d20), bp=2.0*det(d10,d0p); // ð›¼,ð›½(ð‘â€²)\n  // (note that 2*ap+bp+dp=2*a+b+d=4*area(b0,b1,b2))\n  float t=clamp((ap+bp)/(2.0*a+b+d), 0.0 ,1.0); // ð‘¡Ì…\n  return mix(mix(b0,b1,t),mix(b1,b2,t),t); // ð‘£ð‘–= ð‘(ð‘¡Ì…)\n\n}\n\nfloat approx_distance(vec2 p, vec2 b0, vec2 b1, vec2 b2) {\n  return length(get_distance_vector(b0-p, b1-p, b2-p));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 xy = fragCoord.xy;\n\t\n\t// can we scale?\n\n\t// xy.x *= 0.5;\n\n\tfloat zoom = 0.33  + 0.33 * sin(iTime);\n\n\txy.x *= 1.0 / zoom;\n\txy.y *= 1.0 / zoom;\n\n\tvec2 b0 = vec2(0.25, .5) * iResolution.xy;\n\t// vec2 b1 = vec2(0.5, .75 + .1*sin(iTime)) * iResolution.xy;\n\tvec2 b1 = iMouse.xy;\n\tvec2 b2 = vec2(.75, .5) * iResolution.xy;\n\tvec2 mid = .5*(b0+b2) + vec2(0.0,0.01);\n\t\n\tfloat d = approx_distance(xy, b0, b1, b2);\n\t//float thickness = 1.0;\n\tfloat thickness = 8.0;\n\t\n\tfloat a;\n\t\n\tif(d < thickness) {\n\t  a = 1.0;\n\t} else {\n\t  // Anti-alias the edge.\n\t  a = 1.0 - smoothstep(d, thickness, thickness+0.5);\n\t}\n\t\n\n    // http://webcache.googleusercontent.com/search?q=cache:fYNtgTVCVwQJ:www.openscenegraph.org/projects/osg/browser/OpenSceneGraph-Data/trunk/shaders/volume_n_iso.frag%3Frev%3D8959%26format%3Draw+&cd=2&hl=en&ct=clnk&gl=ee\n\n// error CreateShader {{ infoLog = ERROR: 0:75: '/' :  wrong operand types  no operation '/' exists that takes \n// a left-hand operand of type 'highp float' and a right operand of type 'const int' (or there is no acceptable conversion)\n// http://www.lab4games.net/zz85/blog/2014/09/08/rendering-lines-and-bezier-curves-in-three-js-and-webgl/\n\n// clip viewport on the right\nif (fragCoord.x > (iResolution.x * zoom)) \n\t// keep the previous bytes, from the previous program \n\tdiscard;\n\nif (fragCoord.y > (iResolution.y * zoom)) \n\t// keep the previous bytes, from the previous program \n\tdiscard;\n\n\nif (fragCoord.x > (iResolution.x * 0.5)) \n{\n\tfloat aa = 1.0 - a;\n\n\t// how should we blend?\n\tfragColor = vec4(\n\t\t// are we supposed to be able to read pixels from last run?\n\t\tfragColor.r * aa + a * a,\n\t\tfragColor.g * aa + a * a,\n\t\tfragColor.b * aa + a * a, \n\t\tfragColor.a * aa + a * a\n\t);\n\treturn;\n}\n\nif (fragCoord.x < (iResolution.x * 0.25)) \n{\n\t// clear out bg\n\tfragColor = vec4(\n\t\ta,\n\t\ta,\n\t\ta, \n\t\t0.5\n\t);\n\treturn;\n}\n\n\n\n\t// fragColor = vec4(a,1.0,1.0, 1.0);\n\tfragColor = vec4(\n\t\ta,\n\t\t1.0,\n\t\t1.0, \n\t\t0.5\n\t);\n\n\t//fragColor = vec4(a,a,a, a);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ltXGDl","date":"1426089510","viewed":183,"name":"QuadraticBezier Alpha","username":"zproxy","description":"inspired by https://www.shadertoy.com/view/lts3Df","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["bezier"],"hasliked":0,"parentid":"","parentname":""}}