{"ver":"0.1","info":{"id":"3dBcRc","date":"1587034374","viewed":170,"name":"2*m-body","username":"icrbow","description":"color-coded force field","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["gravity"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU 6.28318530718\n\nfloat body_raidus = 8.0;\n\nfloat pull(vec3 body, vec2 pos) {\n    return body.z / pow(distance(body.xy, pos), 2.0);\n}\n\nvec3 pullV(vec3 body, vec2 pos) {\n    vec2 direction = normalize(body.xy - pos);\n    float force = pull(body, pos);\n    bool inBody = force >= body_raidus;\n\treturn vec3(direction * force, inBody);\n}\n\nvec3 RYB(in float tone) {\n    float frac = fract(tone) * 6.0;\n    \n    vec3 col = smoothstep(\n        vec3(3,0,3),\n        vec3(2,2,4),\n        vec3(frac)\n   \t);\n\n    col += smoothstep(\n        vec3(4,3,4),\n        vec3(6,4,6),\n        vec3(frac)\n    ) * vec3(1, -1, -1);\n    \n    return col;\n}\n\n\nfloat near_zero = 0.001;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Normalized mouse click\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    mouse.x *= iResolution.x / iResolution.y;\n    \n    // Normalized mouse drag start\n    // TODO: use to set mouseBody mass (https://www.shadertoy.com/view/Mss3zH)\n    // vec2 mouseStart = iMouse.zw / iResolution.xy;\n    // mouseStart.x *= iResolution.x / iResolution.y;\n    \n    // vec3 bodyMouse = vec3(mouseStart, mouseStart.x > 0.0 ? 0.1 * length(normalize(mouseStart - mouse)) : 0.0);\n    vec3 bodyMouse = vec3(mouse, 0.01);\n    \n    // TODO:  use arrays\n\tvec3 body1 = vec3(1.1, 0.75, 0.01);\n    vec3 body2 = vec3(0.5, 0.33, 0.015);\n    vec3 body3 = vec3(1.5, 0.66, 0.005);\n    vec3 body4 = vec3(1.0, 0.25, 0.05);\n\n    vec3 pulls = vec3(0.0);\n    pulls += pullV(body1, uv);\n    pulls += pullV(body2, uv);\n    pulls += pullV(body3, uv);\n \tpulls += pullV(body4, uv);\n    pulls += pullV(bodyMouse, uv);\n    \n    float pullN = length(pulls);\n    vec2 p = normalize(pulls.xy);\n    \n    float a = (atan(p.y, p.x) - 0.25) / TAU;\n    vec3 colorHSV = RYB(a);\n    \n    float alpha = length(pulls) / body_raidus;\n    \n    float gamma = 2.0;\n    vec3 color = pow(colorHSV * alpha, vec3(1.0/gamma));\n    \n    fragColor = vec4(\n      \tpulls.z > 0.0 ? vec3(0.75) : color,\n        1.0\n   \t);\n    \n}\n","name":"Image","description":"","type":"image"}]}