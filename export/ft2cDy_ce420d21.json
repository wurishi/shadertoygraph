{"ver":"0.1","info":{"id":"ft2cDy","date":"1650209296","viewed":189,"name":"Sunshyne","username":"jeanclaude","description":"a sun based on two other works \nhttps://www.shadertoy.com/view/4dXGR4 from flight404\nAnd\nhttps://www.shadertoy.com/view/XlfGRj from Kali","likes":7,"published":1,"flags":0,"usePreview":1,"tags":["fractal","sun","3dnoise","perlin","star","space","corona","stars"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// based on https://www.shadertoy.com/view/4dXGR4 by\n// flight404 and trisomie21 (THANKS!)\n#define GLOW_INTENSITY -.1\n#define NOISE 0.\n#define MOUSE_SENSIBILITY .5\n\n#define iterations 22\n   #define formuparam .55\n\n   #define volstepsBack 20\n   #define volstepsFront 2\n   #define stepsize 0.11\n\n   #define zoom   0.800\n   #define tile   0.850\n   #define speed  0.0005 \n\n   #define brightnessStar 0.0015\n   #define darkmatter 0.300\n   #define distfading 0.730\n   #define saturation 0.750\n   \nfloat snoise(vec3 uv, float res)\t// by trisomie21\n{\n\tconst vec3 s = vec3(1e0, 1e2, 1e4);\n\tuv *= res;\n\tvec3 uv0 = floor(mod(uv, res))*s;\n\tvec3 uv1 = floor(mod(uv+vec3(1.), res))*s;\n\tvec3 f = fract(uv); f = f*f*(3.0-2.0*f);\n\tvec4 v = vec4(uv0.x+uv0.y+uv0.z, uv1.x+uv0.y+uv0.z, uv0.x+uv1.y+uv0.z, uv1.x+uv1.y+uv0.z);\n\tvec4 r = fract(sin(v*1e-3)*1e5);\n\tfloat r0 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\tr = fract(sin((v + uv1.z - uv0.z)*1e-3)*1e5);\n\tfloat r1 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\treturn mix(r0, r1, f.z)*2.-1.;\n}\n\nfloat freqs[4];\n\nvec3 GetRayDir(vec2 uv, vec3 ro) {\n         vec3 f = normalize(vec3(0)-ro),\n              r = normalize(cross(vec3(0,1,0), f)),\n              u = cross(f, r),\n              c = ro + f,\n              i = c + uv.x*r + uv.y*u,\n              rd = normalize(i-ro);\n          return rd;\n      }\n\n//Star Nest by Pablo Roman Andrioli\n//https://www.shadertoy.com/view/XlfGRj\nvec3 StarNest(vec3 dir, float s, float fade, vec3 v, vec3 from, float mask){\n   //volumetric rendering\n   dir *= zoom +.5;\n\tfrom *= .05;\n   float time= iTime*speed+.25;\n   from+=vec3(time*2.,time,-2.);\n   for (int r=0; r<volstepsBack; r++) {\n      vec3 p = from + s * dir * .5;\n      p = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n      float pa,a=pa=0.;\n      for (int i=0; i<iterations; i++) { \n         p=abs(p)/dot(p,p)-formuparam; // the magic formula\n         a+=abs(length(p)-pa); // absolute sum of average change\n         pa=length(p) * (1.-mask);\n      }\n      float dm=max(0.,darkmatter-a*a*.001); //dark matter\n      a*=a*a; // add contrast\n      if (r>6) fade*=1.-dm; // dark matter, don't render near\n      v+=fade;\n      v+=vec3(s,s*s,s*s*s*s)*a*brightnessStar*fade * (1.-mask); // coloring based on distance\n      fade*=distfading ; // distance fading\n      s+=stepsize ;\n\n   }\n   return v;\n  }\n  \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float mouseX = (iMouse.x *.005 * MOUSE_SENSIBILITY) ;\n    float mouseY = (iMouse.y *.005 * MOUSE_SENSIBILITY) ;\n\tfreqs[0] = texture( iChannel1, vec2( 0.01, 0.25 ) ).x;\n\tfreqs[1] = texture( iChannel1, vec2( 0.07, 0.25 ) ).x;\n\tfreqs[2] = texture( iChannel1, vec2( 0.15, 0.25 ) ).x;\n\tfreqs[3] = texture( iChannel1, vec2( 0.30, 0.25 ) ).x;\n\n\tfloat brightness\t= freqs[1] * 0.25 + freqs[2] * 0.25;\n\tfloat radius\t\t= 0.24 + brightness * 0.2;\n\tfloat invRadius \t= 1.0/radius;\n\t\n\tvec3 orange\t\t\t= vec3( 0.8, 0.65, 0.3 );\n\tvec3 orangeRed\t\t= vec3( 0.8, 0.35, 0.1 );\n\tfloat time\t\t= iTime * 0.1;\n\tfloat aspect\t= iResolution.x / iResolution.y;\n\tvec2 uv\t\t\t= fragCoord.xy / iResolution.xy;\n\tvec2 p \t\t\t= -0.5 + uv;\n\tp.x *= aspect;\n\n\tfloat fade\t\t= pow( length( 2.05 * p ), 0.5 );\n\tfloat fVal1\t\t= 1.0 - fade;\n\tfloat fVal2\t\t= 1.0 - fade;\n\t\n\tfloat angle\t\t= atan( p.x * clamp((cos(mouseX)+.5),.5,1.), p.y * (sin(mouseY)+.5))/6.2832;\n\tfloat dist\t\t= length(p);\n\tvec3 coord\t\t= vec3( angle, dist, time * 0.1 );\n\t\n\tfloat newTime1\t= abs( snoise( coord + vec3( 0.0, -time * ( 0.35 + brightness * 0.001 ), time * 0.015 ), 15.0 ) );\n\tfloat newTime2\t= abs( snoise( coord + vec3( 0.0, -time * ( 0.15 + brightness * 0.001 ), time * 0.015 ), 45.0 ) );\t\n\t\n\tfloat power = pow( 2.0, 3.-clamp(NOISE ,0.,3.) );\n\tfVal1 += ( 0.5 / power ) * snoise( coord + vec3( 0.0, -time, time * 0.2 ), ( power * ( 10.0 ) * ( newTime1 + 1.0 ) ) );\n\tfVal2 += ( 0.5 / power ) * snoise( coord + vec3( 0.0, -time, time * 0.2 ), ( power * ( 25.0 ) * ( newTime2 + 1.0 ) ) );\n\t\n\t\n\tfloat corona\t\t= pow( fVal1 * max( 1.2 - fade, 0.0 ), 2. ) * 50.;\n\tcorona\t\t\t\t+= pow( fVal2 * max( 1.3 - fade, 0.0 ), 2. ) * 50.;\n\tcorona\t\t\t\t*= 1.2 - newTime1;\n\t\n\tvec2 sp = -1.0 + 2.0 * uv;\n\tsp.x *= aspect;\n\tsp *= ( 2.0 - brightness );\n  \tfloat r = dot(sp,sp);\n\tfloat f = (1.0-sqrt(abs(1.0-r)))/(r) + brightness * 0.5;\n    \n\tif( dist < radius ){\n\t\tcorona *= pow( dist * invRadius, 24.0 );\n        vec2 newUv = vec2((snoise(vec3(uv * 8.,uv.y ),5.)*2.))*.005 ;\n \t\tnewUv.x += sp.x*f - (iTime*.05) - mouseX;\n  \t\tnewUv.y += sp.y*f - mouseY;\n\t\t\n\t\tvec3 texSample \t= texture( iChannel0, newUv ).rgb;\n\t\tfloat uOff\t\t= ( texSample.g * brightness * 4.5 );\n\t\tvec2 starUV\t\t= newUv + vec2( uOff , 0.0 );\n\t\tvec3 starSphere\t\t= texture( iChannel0, starUV ).rgb;\n        fragColor.rgb += max(starSphere,.6) * fVal1 * .5;\n        fragColor.rgb += starSphere ; \n\t}\n    \n    vec3 ro = vec3(-mouseX,-mouseY,-5.4);\n    vec3 rd = GetRayDir(uv, ro);\n    \n    float diam = 1.;\n    float dia = clamp(1.0-length(vec2(p*diam)),0.,1.);\n    \n\tvec3 v = StarNest(rd, .1, 1., fragColor.rgb, ro, 0.);\n    v=mix(vec3(length(v)*.1),v,saturation); //color adjust\n    v *= mix(vec3(0.8),vec3(1.,1.,0.)+2.5,dia);\n    fragColor.rgb += vec3(v* .01) * (1.-dia);  \n    \n\tfloat starGlow\t= min( max( 1.0 - dist * ( clamp((1.-GLOW_INTENSITY),-1.,1.5)  - brightness ), 0.0 ), 1. );\n\tfragColor.rgb\t+= vec3( f * ( 0.75 + brightness * 0.3 ) * orange ) + corona * orange + starGlow * orangeRed;\n}\n\n","name":"Image","description":"","type":"image"}]}