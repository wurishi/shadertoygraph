{"ver":"0.1","info":{"id":"MtBXW1","date":"1443239914","viewed":434,"name":"Jazz Design","username":"mhnewman","description":"Dream of the 90s","likes":24,"published":1,"flags":0,"usePreview":0,"tags":["design","solo","jazz","cups"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"//\tConstants\nconst float brushSharpness = 30.0;\n\n//\tBig Stroke\nconst vec3 bigColor = vec3(0.0, 0.7, 0.7);\nconst float bigSpeed = 0.3;\nconst float bigConnection = 0.9;\nconst int bigCount = 6;\nconst float bigPitch = 0.5;\nconst vec2 bigTop = vec2(-0.4, 0.85);\nconst vec2 bigBottom = vec2(0.4, 0.15);\nconst vec2 bigBrush = vec2(-0.17, -0.01);\n\n// Small Stroke\nconst vec3 smallColor = vec3(0.8, 0.0, 0.8);\nconst float smallSpeed = 0.35;\nconst float smallConnection = 0.8;\nconst int smallCount = 8;\nconst float smallPitch = 0.3;\nconst vec2 smallTop = vec2(-0.25, 0.65);\nconst vec2 smallBottom = vec2(0.25, 0.35);\nconst vec2 smallBrush = vec2(-0.02, -0.05);\n\n\n//\tHash function adapted from David Hoskins:\n//\thttps://www.shadertoy.com/view/4djSRW\n\n\nconst mat2 m = mat2(1.616, 1.212, -1.212, 1.616);\nconst float bs1 = brushSharpness + 1.0;\nconst vec3 bigC = vec3(1.0) - bigColor;\nconst vec3 smallC = vec3(1.0) - smallColor;\n\nfloat hash11(float p) {\n\tvec2 p2 = fract(p * vec2(5.3983, 5.4427));\n    p2 += dot(p2.yx, p2.xy +  vec2(21.5351, 14.3137));\n\treturn fract(p2.x * p2.y * 95.4337);\n}\n\nvec2 hash21(float p) {\n\tvec2 p2 = fract(p * vec2(5.3983, 5.4427));\n    p2 += dot(p2.yx, p2.xy +  vec2(21.5351, 14.3137));\n\treturn fract(vec2(p2.x * p2.y * 95.4337, p2.x * p2.y * 97.597));\n}\n\nfloat hash12(vec2 p) {\n\tp = fract(p * vec2(5.3983, 5.4427));\n    p += dot(p.yx, p.xy + vec2(21.5351, 14.3137));\n\treturn fract(p.x * p.y * 95.4337);\n}\n\nfloat noise12(vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n\tvec2 u = f * f * (3.0 - 2.0 * f);\n    return mix(mix(hash12(i + vec2(0.0, 0.0)), \n                   hash12(i + vec2(1.0, 0.0)), u.x),\n               mix(hash12(i + vec2(0.0, 1.0)), \n                   hash12(i + vec2(1.0, 1.0)), u.x), u.y);\n}\n\nfloat fbm12(vec2 p) {\n    float f = noise12(p); p = m * p;\n    f += 0.5 * noise12(p); p = m * p;\n    f += 0.25 * noise12(p); p = m * p;\n    f += 0.125 * noise12(p);\n    return f / 1.875;\n}\n\nfloat addStroke(vec2 pos, vec2 a, vec2 b, vec2 brush, float edge, float falloff) {\n    vec2 dir = b - a;\n    vec2 p = pos - a;\n    float d = (dir.y * p.x - dir.x * p.y) / (dir.y * brush.x - dir.x * brush.y);\n    d = clamp(d, 0.0, 1.0);\n    p = pos - d * brush;\n    float e = (distance(p, a) + distance(p, b) - length(dir)) / edge;\n    return (1.0 - falloff * d) * max(1.0 - e, 0.0);\n}\n\nfloat brush(vec2 pos, float stroke) {\n    float p = brushSharpness * fbm12(70.0 * pos);\n    float s = 0.75 * stroke;\n    return 1.0 / (pow(1.0 / (1.0 - s), p) * pow(1.0 / s, p - bs1) / (s - 1.0) - 1.0) + 1.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 color = vec3(1.0);\n\n    vec2 pos = fragCoord.xy / iResolution.y + vec2(bigSpeed * iTime, 0.0);\n    float idOffset = floor(bigSpeed * iTime / bigPitch);\n    float stroke = 0.0;\n    vec2 last = vec2(-0.5, 0.5);\n    for (int i = 0; i < bigCount; ++i) {\n        float id = float(i) + idOffset;\n\n        vec2 offset = vec2(id * bigPitch, 0.0);\n        vec2 top = offset + bigTop + 0.1 - 0.2 * hash21(id);\n        vec2 bottom = offset + bigBottom + 0.1 - 0.2 * hash21(id + 0.1);\n\n        if (hash11(id + 0.2) < bigConnection)\n            stroke = max(stroke, addStroke(pos, last, top, bigBrush, 0.02, 0.6));\n        stroke = max(stroke, addStroke(pos, top, bottom, bigBrush, 0.02, 0.6));\n\n        last = bottom;\n    }\n    color *= vec3(1.0) - brush(pos, stroke) * bigC;\n    \n    pos = fragCoord.xy / iResolution.y + vec2(smallSpeed * iTime, 0.0);\n    idOffset = floor(smallSpeed * iTime / smallPitch);\n    stroke = 0.0;\n    last = vec2(-0.5, 0.5);\n    for (int i = 0; i < smallCount; ++i) {\n        float id = float(i) + idOffset;\n\n        vec2 offset = vec2(id * smallPitch, 0.0);\n        vec2 top = offset + smallTop + 0.05 - 0.1 * hash21(id + 0.3);\n        vec2 bottom = offset + smallBottom + 0.05 - 0.1 * hash21(id + 0.4);\n\n        if (hash11(id + 0.5) < smallConnection)\n            stroke = max(stroke, addStroke(pos, last, top, smallBrush, 0.01, 0.6));\n        stroke = max(stroke, addStroke(pos, top, bottom, smallBrush, 0.01, 0.6));\n\n        last = bottom;\n    }\n    color *= vec3(1.0) - brush(pos, stroke) * smallC;\n    \n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}