{"ver":"0.1","info":{"id":"WtsSWS","date":"1564097819","viewed":154,"name":"fleshy spectrum","username":"kloumpt","description":"Started to make a shader to plot functions while using a naive sampled derivative to tune the line width, ended up making a small spectrum plotter :))","likes":8,"published":1,"flags":96,"usePreview":0,"tags":["feedback","plotter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float f(float x) {\n    return (sin(x * 3.1415 * 16.0) * 0.5 + 0.5) * sin((x - iTime) * 3.1415 * 2.0) * 0.5;\n}\n\nvec2 eval_f(float x, float dx) {\n    return vec2(\n        f(x),\n        (f(x + dx / 2.0) - f(x - dx / 2.0)) / dx\n    );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float f(float x) {\n    return 1.5 * textureLod(iChannel1, vec2((x / 2.0 + 0.5), 0.0), 5.0).r - 1.0;\n    //return ((sin(x * 3.1415 * 8.0) * 0.5 + 0.5) * 0.5 ) * sin((x - iTime / 4.0) * 3.1415 * 2.0) * 0.5;\n}\n\nvec2 eval_f(float x, float dx) {\n    return vec2(\n        f(x),\n        (f(x + dx / 2.0) - f(x - dx / 2.0)) / dx\n    );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n\n    \n    vec2 y = eval_f(uv.x, 1. / iResolution.x);\n    \n    vec3 col = vec3(1.0) * (1.0 - smoothstep(1.0 / iResolution.y, (6.0 + abs(y.y) * abs(y.y) / 6.0) / iResolution.y, abs(uv.y - y.x))) ;\n    col.gb *= abs(y.y) / 2.0;\n    \n    col = mix(col, texture(iChannel0, (fragCoord - vec2(4.0, 6.0)) / iResolution.xy).rgb, 1.0 - step(0.1, length(col)));\n    \n    col *= step(1.0, fragCoord.y);\n\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"lts3RX","filepath":"https://soundcloud.com/viktor-tsoy/07-1","previewfilepath":"https://soundcloud.com/viktor-tsoy/07-1","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = mix(\n        texture(iChannel0, fragCoord.xy / iResolution.xy),\n        texture(iChannel1, fragCoord.xy / iResolution.xy),\n        0.95\n    );\n}","name":"Buffer B","description":"","type":"buffer"}]}