{"ver":"0.1","info":{"id":"ts2GWc","date":"1550185495","viewed":111,"name":"Zebra Lines","username":"johncurtis","description":"I proudly present... the zebra line noise shader! Cooked this up over the last few months, hope you all enjoy. I release it as public domain, do what you will with it but please do not harm any zebras.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["lines"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// I've spent the last few months playing around with procedural\n// and animated lines and have been cooking this shader up\n// I Thought I would share with the world, I am pretty proud of it\n// I call it the zebra shader\n// Enjoy!\n// \n\n/*\nThis is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <http://unlicense.org/>\n*/\n    \nfloat zebraNoise(vec2 uv)\n{\n\tconst float uvMultiplier = 1.879;\n\tconst float uv2Multiplier = 1.542;\n\tconst float clipNoiseBelow = 0.15;\n\n\tfloat t = iTime;\n\tfloat uvNoiseMultiplier = 0.7; // raise for thicker lines\n    float uv2NoiseMultiplier = 0.3; // raise for more bending\n\tfloat noise = 0.0;\n\tfloat nx, ny, nz, nw;\n\t\n\t// slide position to animate panning\n\tvec2 slide = vec2(t * 0.34, t * 0.42);\n\tuv += slide;\n\tvec2 uv2 = uv;\n\t\n    uv2 *= uv2Multiplier;\n    nx = sin(uv2.x);\n    ny = sin(uv2.y);\n    nz = sin(uv2.y + nx);\n    nw = (nx + ny);\n    vec2 uv2Noise = vec2(nz, nw);\n    \n   \t// rotate noise value to bend and wiggle the lines\n    // rotation function: https://stackoverflow.com/questions/2259476/rotating-a-point-about-another-point-2d\n\tfloat s = sin(t);\n\tfloat c = cos(t);\n    uv2Noise = vec2((uv2Noise.x * c) - (uv2Noise.y * s), (uv2Noise.x * s) + (uv2Noise.y * c));\n    uv += (uv2Noise * uv2NoiseMultiplier);\n\n    uv *= uvMultiplier;\n    nx = (uv.y);\n    ny = sin(uv.x);\n    \n    // clever trick from https://gamedev.stackexchange.com/questions/141916/antialiasing-shader-grid-lines\n    nz = abs(fract(nx + ny) - 0.5);\n    \n    nw = (nz * uvNoiseMultiplier);\n    nw *= max(0.0, ceil(nw - clipNoiseBelow));\n    noise += (nw);\n\t\n\treturn noise;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord / iResolution.xy) / max(iResolution.x, iResolution.y);\n\tuv *= 4096.0;\n    float noise = zebraNoise(uv);\n    vec3 col = vec3(noise, noise * abs(cos(iTime)), noise * abs(sin(iTime)));\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}