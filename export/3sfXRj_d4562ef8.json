{"ver":"0.1","info":{"id":"3sfXRj","date":"1553987981","viewed":599,"name":"Issues - Don Toliver","username":"IsaacAndersen","description":"Testing out soundcloud input. Random vectors for each fft freq. I took the background noise (FBM) from The Shader Book!\n\nFair warning: My CPU has been running really hot while testing this. Not sure if it's the for-loops or the frequent texture access.","likes":3,"published":1,"flags":64,"usePreview":0,"tags":["musicsynth"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Mtf3D4","filepath":"https://soundcloud.com/dontoliver/issues","previewfilepath":"https://soundcloud.com/dontoliver/issues","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float line(vec2 p, vec2 p0, vec2 p1)\n{\n    vec2 a = p-p0; // the vector that we want to project on b\n    vec2 b = p1-p0; // this line is our goal.\n    \n    vec2 proj = clamp((dot(a,b)/dot(b,b)),0.0,1.0)*b; // vector projection of a onto b\n    vec2 rejc = a-proj; // vector rejection or distance in other words\n    \n    return smoothstep(0.0,1.2,1.0-dot(rejc, rejc)*1e4);\n} // stolen: https://www.shadertoy.com/view/4d3fWr\n\nvec2 random12(float i) {\n    return normalize(vec2(sin(329.34+131.8*sin(722.1*i+8.23)),\n                sin(494.34+2871.1*sin(431.1*i+415.39))));\n}\n        \nfloat random (in vec2 _st) {\n    return fract(sin(dot(_st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 _st) {\n    vec2 i = floor(_st);\n    vec2 f = fract(_st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n#define NUM_OCTAVES 5\n\nfloat fbm ( in vec2 _st) {\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(100.0);\n    // Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5),\n                    -sin(0.5), cos(0.50));\n    for (int i = 0; i < NUM_OCTAVES; ++i) {\n        v += a * noise(_st);\n        _st = rot * _st * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    vec2 R = iResolution.xy;\n    vec2 uv = ( U - 0.5*R) / R.y;\n    float t = iTime/2.;\n    \n    float angle1 = (3.1415)* (t/4.0);\n        \n    float s1 = sin(angle1);\n    float c1 = cos(angle1);\n\n    uv *= mat2(c1, -s1, s1, c1);\n    \n    \n  \tvec2 bgUV = uv * 10.;\n    \n\tvec3 col = vec3(124,41,212)/255.0;\n   \n    \n    \n    float m = texture( iChannel0, vec2(1.,0.25) ).x;;\n    \n    float col_1 = -fbm(bgUV + vec2(t,0.)+fbm(bgUV + t));     \n    \n\tcol += col_1;\n    \n    vec3 col2 = vec3(0);\n\n    float numChannels = 16.; // all 512 seems overkill\n    float maxFreq = 0.;\n    for(float i = 0.; i < 1.; i += 1./numChannels) {\n        float fft  = texture( iChannel0, vec2(i,0.25) ).x;\n        \n        for(float j = 0.; j < 64./numChannels;j+= 1.) {\n            vec2 segment = random12(i+j)*fft;\n            col2 += line(uv, vec2(0),segment*fbm(segment+t))*fft;\n        }\n        \n    }\n    \n    col2 *= 0.4 + 0.6*sin(18.*smoothstep(-1.,1.,m)*(1.0-length(uv)));\n    \n    col += col2;\n\t\n\t// output final color\n\tO = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}