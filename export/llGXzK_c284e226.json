{"ver":"0.1","info":{"id":"llGXzK","date":"1485625266","viewed":260,"name":"perlin noise curl","username":"Teflo","description":"bla","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    fragColor.rgb = texture(iChannel2, uv).rgb;\n   \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const vec2 zOffset = vec2(37.0,17.0);\nconst vec2 wOffset = vec2(59.0,83.0);\n\nvec4 tex(vec2 uv)\t// Emulate a single texture fetch into the precalculated texture\n{\n    // NOTE: Precalculate texture, so we can do a single fetch instead of 4.\n    // Afaik we can't generate a texture of a specific size in shadertoy at the momemt.\n    float r = texture( iChannel0, (uv+0.5)/256.0, -100.0 ).r;\n    float g = texture( iChannel0, (uv+0.5 + zOffset)/256.0, -100.0 ).r;\n    float b = texture( iChannel0, (uv+0.5 + wOffset)/256.0, -100.0 ).r;\n    float a = texture( iChannel0, (uv+0.5 + zOffset + wOffset)/256.0, -100.0 ).r;\n    \n    return vec4(r, g, b, a);\n}\n\n\nfloat noise( in vec4 x )\n{\n    vec4 p = floor(x);\n    vec4 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n    \n\tvec2 uv = (p.xy + p.z*zOffset + p.w*wOffset) + f.xy;\n    \n   \tvec4 s = tex(uv);\n\treturn mix(mix( s.x, s.y, f.z ), mix(s.z, s.w, f.z), f.w);\n}\n\nfloat fbm(vec4 x)\n{\n    float f = 0.0;\n    float w = 0.5;\n    for(int i = 0; i < 4; i++)\n    {\n        f += noise(x) * w;\n        x *= 2.0;\n        w *= 0.5;\n    }\n    \n    return f;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    \n \tfragColor.rgb =  vec3(fbm(vec4(fragCoord * 0.01, iTime * 0.03, iTime * 0.1)));\n    \n    float d = length(fragCoord.xy - iMouse.xy) / 40.0;\n    if(iMouse.z > 0.1 && d < 1.0) {\n        fragColor.rgb = vec3(1.0 - d);\n    }\n    \n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"float dx( vec2 x )\n{\n    vec2 e = vec2(1.0) / iResolution.xy;\n    return (texture(iChannel0, x + vec2(e.x, 0.)).r - texture(iChannel0, x - vec2(e.x, 0.)).r) / ( 2.0 * e.x);\n}\n\nfloat dy( vec2 x )\n{\n    vec2 e = vec2(1.0) / iResolution.xy;\n    return (texture(iChannel0, x + vec2(0., e.y)).r - texture(iChannel0, x - vec2(0., e.y)).r) / ( 2.0 * e.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 d = normalize(vec2(dy(uv), -dx(uv)));\n    \n   \n    \n    \n    //fragColor.rgb = texture(iChannel1, uv - d * 0.001).rgb;\n    //fragColor.rgb += texture(iChannel0, uv).rgb * 0.1;\n    d += 1.0;\n    d *= 0.5;\n    fragColor.xy = d;\n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"float dx( vec2 x )\n{\n    vec2 e = vec2(1.0) / iResolution.xy;\n    return (texture(iChannel0, x + vec2(e.x, 0.)).r - texture(iChannel0, x - vec2(e.x, 0.)).r) / ( 2.0 * e.x);\n}\n\nfloat dy( vec2 x )\n{\n    vec2 e = vec2(1.0) / iResolution.xy;\n    return (texture(iChannel0, x + vec2(0., e.y)).r - texture(iChannel0, x - vec2(0., e.y)).r) / ( 2.0 * e.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 d = vec2(dy(uv), -dx(uv));\n    fragColor.rgb = texture(iChannel1, uv - d * 0.00001).rgb;\n    \n    if(iTime < 0.1) {\n        fragColor.rgb = texture(iChannel2, uv).rgb;\n    }\n}","name":"Buf C","description":"","type":"buffer"}]}