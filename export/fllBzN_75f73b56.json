{"ver":"0.1","info":{"id":"fllBzN","date":"1650621869","viewed":73,"name":"TP 2 Roua","username":"RouaBouhouch","description":"TP2","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["tp"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Texturing\n// Eric Galin\n\nconst int Steps = 200;      // Number of steps\nconst float Epsilon = 0.01; // Marching epsilon\nconst float PI=3.1415927;\n// Structure for objects\n// v : Field value\n// i : Texture index\n\n// Rotation matrix around the X axis.\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\n// Rotation matrix around the Y axis.\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\n// Rotation matrix around the Z axis.\nmat3 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\n\nvec3 Rotate_p(vec3 p ,float angle ,float speed, bool time , int Axis)\n{\n    switch (Axis)\n    {\n        case 1 :\n      \n            if(time)\n            {\n            p=p*rotateX(angle*iTime/speed);\n            }\n            else\n            {\n            p=p*rotateX(angle);\n            }\n      \n        case 2 :\n      \n          if(time)\n            {\n            p=p*rotateY(angle*iTime/speed);\n            }\n            else\n            {\n            p=p*rotateY(angle);\n            }\n       \n        case 3 :\n  \n         if(time)\n            {\n            p=p*rotateZ(angle*iTime/speed);\n            }\n            else\n            {\n            p=p*rotateZ(angle);\n            }\n   \n      \n    }\n    return p;\n}\n\n// Primitives \n\n// Sphere \n// p : point\n// c : center of skeleton\n// r : radius\n\nfloat Sphere(vec3 p, vec3 c,float r,vec3 n)\n{\n  return length(p-c)-r;\n}\n\n//cylinder \nfloat sdCappedCylinder( vec3 p, float h, float r, vec3 n )\n    {\n  p=p-n;\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n//box\n//p : point\n//b: lengh\n//n: position\n\n\nfloat sdBox( vec3 p, vec3 b , vec3 n)\n{\n  ;\n  vec3 q = abs(p-n) - b;\n  \n  \n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n\n// vertical capsule\nfloat sdVerticalCapsule( vec3 p, float h, float r, vec3 n )\n{ p=p-n;\n  p.y -= clamp( p.y, 0.0, h );\n\n  return length( p ) - r;\n}\n// Sphere \n// p : point\n// c : center of skeleton\n// r : radius\nfloat Sphere(vec3 p, vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n// Sphere \n// p : point\n// n : Normal of plane\n// o : Point on plane\nfloat Plane(vec3 p, vec3 n, vec3 o)\n{\n    return dot((p-o),n);\n}\n\n//capsule\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r,vec3 n)\n    {\n   p=p-n;\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n  //cone\n  //p : point\nfloat sdCone( in vec3 p, in vec2 c, float h ,vec3 n)\n{\n  // c is the sin/cos of the angle, h is height\n  // Alternatively pass q instead of (c,h),\n  // which is the point at the base in 2D\n  p=p-n;\n  vec2 q = h*vec2(c.x/c.y,-1.0);\n    \n  vec2 w = vec2( length(p.xz), p.y );\n  vec2 a = w - q*clamp( dot(w,q)/dot(q,q), 0.0, 1.0 );\n  vec2 b = w - q*vec2( clamp( w.x/q.x, 0.0, 1.0 ), 1.0 );\n  float k = sign( q.y );\n  float d = min(dot( a, a ),dot(b, b));\n  float s = max( k*(w.x*q.y-w.y*q.x),k*(w.y-q.y)  );\n  return sqrt(d)*sign(s);\n}\n\n// p : point\n// t : torus parameters\n// n : position parameter\nfloat sdTorus( vec3 p, vec2 t ,vec3 n)\n{\n  p=p-n;\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n    return min(a,b);\n}\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n    \n// Intersection\n// a,b : field function of left and right sub-trees\nfloat Intersection(float a,float b)\n{\n    return max(a,b);\n}vec2 opRepLim( in vec2 p, in float s, in vec2 limmin, in vec2 limmax )\n{\n    return p-s*clamp(round(p/s),-limmin,limmax);\n}\n\n\nstruct V {\n        float v; \n        int i;\n};\n\n// Structure for texture\n// c : Color\n// s : Specular\nstruct T {\n        vec3 c;\n        float s;\n};\n\n// Primitive functions -----------------------------------------------------------------------------------\n\n// Sphere \n// p : point\n// c : center \n// r : radius\nV Sphere(vec3 p, vec3 c,float r,int index)\n{\n  return V(length(p-c)-r,index);\n}\n\n// Cube \n// p : point\n// c : center \n// r : radius\nV Cube(vec3 p,vec3 c,float r,int index)\n{\n   vec3 q = abs(p-c) - vec3(r);\n  return V(length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0),index);\n}\n\n// Plane \n// p : point\n// n : Normal of plane\n// o : Point on plane\nV Plane(vec3 p, vec3 n, vec3 o,int index)\n{\n    return V(dot((p-o),n),index);\n}\n\n// Union\n// a : field function of left sub-tree\n// b : field function of right sub-tree\nV Union(V a,V b)\n{\n    if (a.v<b.v)\n        return V(a.v,a.i);\n    else \n    {\n        return V(b.v,b.i);\n    }\n}\n\n// Intersection, preserve the index of first object\n// a, b : field function of left and right sub-trees\nV Intersection(V a,V b)\n{\n    if (a.v>b.v)\n    {\n        return V(a.v,a.i);\n    }\n    else \n    {\n        return V(b.v,a.i);\n    }\n}\n\n// Dice \n// p : point\n// c : center \n// r : radius\nV Dice(vec3 p,vec3 c,float r,int index)\n{\n  return Intersection(Cube(p,c,r*0.75,index),Sphere(p,c,r,index));\n}\n\n\n//complex object 2\nfloat windmill (vec3 p , vec3 n)\n    {\n    \n  p=p-n;\n  p= Rotate_p(p ,PI/2. ,0.5, false ,3);\n  p= Rotate_p(p ,PI/2. ,0.5, false ,3);\n  p= Rotate_p(p ,PI/2. ,0.5, false ,3);\n  vec3 p2= vec3(Rotate_p(p ,PI/2. ,0.5, false ,1));\n  \n  \n     float v=sdBox(  p, vec3(5.,5.,7.) , vec3 (0.,7.,-9.));\n        v=opSmoothUnion(\n        v,\n        sdCone(  Rotate_p(p ,PI/2. ,0.5, false ,2)\n        ,  vec2 (3.,3.6),8.,vec3(-7.,6.,0.)),\n        .5\n        );\n        \n        v= opSmoothUnion(v,\n        sdCappedCylinder(  p, 2., 4., vec3 (0.,0.,0) ),\n        .5);\n          v=opSmoothUnion(v,\n          sdCapsule(  Rotate_p(p ,PI/2. ,0.5, true ,2) ,vec3 (1.,.2,9.)\n            , vec3 (1.), 1.,vec3 (0.,0.,0.))\n            ,.8);  \n            v=opSmoothUnion(v,\n          sdCapsule(  Rotate_p(p ,PI/4. ,0.25, true ,2) ,vec3 (1.,.2,9.)\n            , vec3 (1.), 1.,vec3 (0.,0.,-10.))\n            ,.8);  \n                v=opSmoothUnion(v,\n          sdCapsule(  Rotate_p(p2 ,PI/4. ,0.25, true ,2) ,vec3 (1.,.2,9.)\n            , vec3 (1.), 1.,vec3 (0.,0.,-10.))\n            ,.8);\n             v=opSmoothUnion(v,\n          sdCapsule(  Rotate_p(p2 ,PI/2. ,0.5, true ,2) ,vec3 (1.,.2,9.)\n            , vec3 (1.), 1.,vec3 (0.,0.,0.))\n            ,.8);  \n    return v;\n}\n\n\n// Potential field of the object\n// p : point\nV object(vec3 p)\n{\n    V u= V(windmill(p*1.2,vec3(0.,-20.,10.)),8);\n   u = Union(u,Plane(p,normalize(vec3(0.0,0.0,1.0)),vec3(0.0,0.0,-10.0),6));\n  \n  u=Union(u,Dice(p,vec3( 0.0, 0.0, 2.0),4.0,1));\n  u=Union(u,Dice(p,vec3( -10.0, 0.0, 2.0),4.0,0));\n  u=Union(u,Dice(p,vec3( 10.0, 0.0, 2.0),4.0,2));\n  u=Union(u,Dice(p,vec3( 10.0, 10.0, 2.0),4.0,3));\n    u=Union(u,Dice(p,vec3( -10.0, 10.0, 2.0),4.0,4));\n  u=Union(u,Dice(p,vec3( -0.0, 10.0, 2.0),4.0,8));\n   u=Union(u,Dice(p,vec3( -0.0, 20.0, 2.0),4.0,5));\n   u=Union(u,Dice(p,vec3( -10.0, 20.0, 2.0),4.0,7));\n  return u;\n}\n\n\n\n// Analysis of the scalar field --------------------------------------------------------------------------\n\n// Calculate object normal\n// p : point\nvec3 ObjectNormal(in vec3 p )\n{\n  float eps = 0.001;\n  vec3 n;\n  V vp = object(p);\n    float v = vp.v;\n  n.x = object( vec3(p.x+eps, p.y, p.z) ).v - v;\n  n.y = object( vec3(p.x, p.y+eps, p.z) ).v - v;\n  n.z = object( vec3(p.x, p.y, p.z+eps) ).v - v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance \n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o, vec3 u, float e,out bool h,out int s)\n{\n  h = false;\n\n    // Start at the origin\n    float t=0.0;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = object(p).v;\n    // Hit object\n      if (v < 0.0)\n      {\n          s=i;\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += max(Epsilon,v);\n      // Escape marched too far away\n      if (t>e)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(0.65,0.75,0.995),vec3(0.652,0.697,0.995), d.z*0.5+0.5);\n}\n\n\n// Direct lighting\nfloat Light(vec3 p,vec3 n)\n{\n   // point light\n  const vec3 lp = vec3(5.0, 10.0, 25.0);\n\n  vec3 l = normalize(lp - p);\n\n  // Phong shading\n  float diff = clamp(dot(n, l),0.0,1.0);\n\n    bool h;\n    int s;\n    float t=SphereTrace(p+0.1*n,l,100.0,h,s);\nif (!h)\n    {\n     return diff;\n    }\n    return 0.0; \n}\n\n\n\n// Shading and lighting ---------------------------------------------------------------------------\n//checker function\nint Checker ( float x , float y , float z ) {\nreturn ( abs(int ( x ) + int ( y ) + int ( z ) ) % 2) ;\n}\n//axial function\nfloat Axial ( float x , float y , float z ) {\nfloat r = sqrt ( x * x + y *y )  ;\nreturn abs(0.5 + 0.5 * cos (7.1415927 * r )) ;\n}\n\n\n\n// FBM ---------------------------------------------------------------------------\n\n\n//turbulence\n\n   float turbulence (vec3 P, int numFreq)\n   {\n      float val = 0.0;\n      float freq = 1.0;\n      for (int i=0; i<numFreq; i++) {\n         val += abs (Noise (P*freq) / freq);\n         freq *= 2.07;\n      }\n      return val;\n   }\n   \n    float turbulence2 (vec3 p, float N)\n   { float val;\n       for (float i=0.; i<N; i++) {\n    val=+sqrt(1./N)*(Noise(p*i))+abs(cos(p.y));\n\n  }\n      return val;\n   }\n   \n\nfloat Turbulance(in vec3 p, in int o, in float b, in float a, in float l)\n{\n    mat3 Q = Rz(0.);\n    float DN = 0.; \n    for(int i=0; i < o; i++)\n    {   Q = matrixCompMult(Q, Q);\n\n        a = a * pow(b, float(-i));\n        l = l * pow(b, float(-i));\n\n        DN += a * Noise((Q*p)/l);\n    }\n\n    return DN; \n} \n\n\n\n//different textures\n\n\n\n// texture Damier\nT Texture0(in vec3 p ,in vec3 n,in vec3 m,float c)\n    {\n    //returns color mutiplied by texture\n    int l=Checker(p.x,p.y,p.z);\n        float b = ((sin(PI *sqrt(p.x*p.x + p.y*p.y))) + 1.) / 2.;\n\n    \n       n = mix(c*n, \n           (1.-c)*n,\n           Turbulance(vec3(p.x,p.y,p.z),3, 2., .9, 2.5)*(2.-.7*Noise(40.*p)));\n             m = mix(c*m, \n           (1.-c)*m,\n           Turbulance(vec3(15.0*p.x,200.0*p.y,1.0*p.z),4, 2., .8, 2.5)*(1.-.7*Noise(150.*p)));\n    \n  return T(n*float(l)+m*b,0.25);   \n}\n\n\n// texture bois v1\nT Texture1(in vec3 p)\n{\n    p=p +0.1*Noise(p/0.5);\n    float m=Axial(p.x,p.y,p.z)+0.5*(sin(10.0)+1.0)+0.1*Noise(cos(p)+p*0.5);;\n  return T(vec3(0.8890732556644207,0.4413385225960074,0.12152799897571219)*float(m),0.25);   \n}\n\n\n//marbre texture\n//p:point\n\nT Texture2(in vec3 p)\n    {\n    \n  return T(vec3(0.82,0.91,0.90)*turbulence (p,8),0.9);   \n}\n\n\n\n\n\n// texture sable\n//p:point\n\nT Texture3(in vec3 p)\n{\n  return T(vec3(0.92,0.90,0.53)*Noise(p*20.),0.0);   \n}\n//texture marbre\n//p:point\n\nT Texture4(in vec3 p)\n{\n  return T(vec3(0.70,0.70,0.70)*turbulence2 (p,3.),0.9);   \n}\n\n/*Bois v2\n*/\n\nT Texture5(in vec3 p, float t, int o, in vec3 m, vec3 n, float c)\n{\n  vec3 pt = p - (Turbulance(p, o, 2., 2.8, 4.8) * (1. / t)); \n    float b = ((sin(PI *sqrt(pt.x*pt.x + pt.y*pt.y))) + 1.) / 2.;\n\n  m = mix(c*m,(1.-c)*m,\n  Turbulance(vec3(pt.x,pt.y,pt.z),3, 2., .9, 2.5)*(2.-.7*Noise(40.*pt)));  n = mix(c*n, (1.-c)*n, Turbulance(vec3(15.0*pt.x,200.0*pt.y,1.0*pt.z),4, 2., .8, 2.5)*(1.-.7*Noise(110.*pt)));\n\n  return T((1.-b)*m+ b*n, 0.8);\n}\n\nT Texture6(in vec3 p)\n{\n  return T(vec3(0.82,0.91,0.90),0.0);   \n}\n\n//vert\n//p : point\nT Texture7(in vec3 p)\n{  if (p.z<220.)\n  {return T(vec3(20./255., 148./255., 20./255.)*Noise(p*20.)*turbulence2 (p,0.6),0.1);}\n  else{\n  return T(vec3(1.,1,1.)+turbulence2 (p,1.),0.1);}\n}\n\n\n\n\n// texture rayure\nT Texture8(in vec3 p ,in vec3 n,in vec3 m,float c)\n    {\n       n = mix(c*n, \n           (1.-c)*n,\n           Turbulance(vec3(p.x,p.y,p.z),3, 2., .9, 2.5)*(2.-.7*Noise(40.*p)));\n             m = mix(c*m, \n           (1.-c)*m,\n           Turbulance(vec3(15.0*p.x,200.0*p.y,1.0*p.z),4, 2., .8, 2.5)*(1.-.7*Noise(150.*p)));\n    //returns color mutiplied by texture\n    float q=Axial(p.x,p.y,p.z);\n  return T(n*float(q)+m,0.25);   \n}\n\n// EAU\n\nT Texture9(in vec3 p)\n{\n  return T(vec3(.0,.5,.5),1.0);\n}\n\n// Compute texture \n// p : Point\n// n : Normal\nT Color(in vec3 p,in vec3 n)\n{\n    V vp= object(p);\n    if (vp.i==0){\n       \n        return Texture0(p,vec3(0.59, 0.69, 0.13), vec3(0.49, 0.29, 0.13)*1.7,0.7);\n    }\n    else if (vp.i==1)\n    {\n        return Texture1(p);\n    }\n    else if (vp.i==2)\n    {\n        return Texture2(p);\n    }\n    else if (vp.i==3)\n    {\n        return Texture3(p);\n    }\n      else if (vp.i==4)\n    {\n        return Texture4(p);\n    }\n      else if (vp.i==5)\n    {\n                return Texture5(p, 0.1,2,vec3(0.39, 0.30, 0.13), vec3(0.39, 0.20, 0.13)*2.7,0.6);\n\n    }\n       else if (vp.i==6)\n    {\n                return Texture6(p);\n\n    }\n    \n       else if (vp.i==7)\n    {\n                return Texture7(p);\n\n    }\n    \n       else if (vp.i==8)\n    {\n                return Texture8(p,vec3(0.39, 0.56, 0.33)*1.7,vec3(0.49, 0.56, 0.13)*1.7,0.2);\n\n    }\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n    bool h;\n    int s;\n    float t = SphereTrace(p,l,100.0,h,s);\n    if (!h)\n    {\n     return 1.0;\n    }\n    return 0.0; \n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p, vec3 n, vec3 e)\n{\n     // Point light\n    const vec3 lp = vec3(5.0, 10.0, 25.0);\n    \n    // Light direction to point light\n    vec3 l = normalize(lp - p);\n    \n\n    T tex=Color(p,n);\n\n    // Ambient color\n    vec3 ambient = 0.5*tex.c;\n        \n    // Shadow computation\n    float s = Shadow(p+0.01*n,n,l);\n\n// Phong diffuse\n    vec3 diffuse = 0.5  * clamp(dot(n, l),0.0,1.0) * tex.c;\n\n    // Specular\n    vec3 r = reflect(e,n);\n    vec3 specular = tex.s * pow(clamp(dot(r,l),0.0,1.0),28.0) * vec3(1.0,1.0,1.0);\n    vec3 c = ambient + s * (diffuse + specular);\n    return c;\n}\n\n// Picture in picture ------------------------------------------------------------------------------\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n   float t=float(n)/(float(Steps-1));\n   return 0.5+mix(vec3(0.05,0.05,0.5),vec3(0.65,0.39,0.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel, out bool pip)\n{\n    // Pixel coordinates\n    vec2 p = (-iResolution.xy + 2.0*pixel)/iResolution.y;\n   if (pip==true)\n   {    \n    const float fraction=1.0/4.0;\n    // Recompute pixel coordinates in sub-picture\n    if ((pixel.x<iResolution.x*fraction) && (pixel.y<iResolution.y*fraction))\n    {\n        p=(-iResolution.xy*fraction + 2.0*pixel)/(iResolution.y*fraction);\n        pip=true;\n    }\n       else\n       {\n           pip=false;\n       }\n   }\n   return p;\n}\n\n\n// Rendering \n// ro, rd : Ray origin and direction\n// pip : Picture in picture boolean\nvec4 Render( in vec3 ro, in vec3 rd, bool pip )\n{\n    // Light direction\n    vec3 light1 = normalize( vec3(-0.8,-0.3,0.4) );\n   \n    \n\tT col;\n    int it;\n    bool b;\n    float t = SphereTrace( ro, rd, 2500.,b , it);\n\tvec3 p = ro + t*rd;\n    V vp= object( p);\n    vec3 n = ObjectNormal( p );\n\n\n    col = Color(p,n);\n    // Sky\n    if( b==false )\n    {\n        col.c = vec3(0.35,0.65,0.95) - rd.z*rd.z*2.5;\n    }\n\telse \n\t{\n        vec3 ref = reflect( rd, n );\n        float fre = clamp( 1.0+dot(rd,n), 0.0, 1.0 );\n        vec3 hal = normalize(light1-rd);\n                   \n\n         // Pseudo diffuse lighting\n\t\tfloat dif = 0.5*(1.0+dot( light1, n ));\n        dif*=dif;\n        \n        col.c = 0.45*col.c+0.55*dif*vec3(0.35,0.35,0.35);\n\t}\n    \n    // Shading for iterations\n    if (pip==true)\n    {\n    \tfloat s=float(it)/float(Steps);\n\t\treturn vec4(0.112+0.824*s,0.418+0.556*s,0.611-0.515*s,t);\n    }\n    else\n    {\n    \t// Gamma with square root\n    \treturn vec4( sqrt(col.c), t );\n    }\n}\n\nvec2 RayDirection(in vec2 pixel, out bool pip)\n{\n    // Pixel coordinates\n    vec2 p = (-iResolution.xy + 2.0*pixel)/iResolution.y;\n   if (pip==true)\n   {    \n    const float fraction=1.0/4.0;\n    // Picture in picture\n    if ((pixel.x<iResolution.x*fraction) && (pixel.y<iResolution.y*fraction))\n    {\n        p=(-iResolution.xy*fraction + 2.0*pixel)/(iResolution.y*fraction);\n        pip=true;\n    }\n       else\n       {\n           pip=false;\n       }\n   }\n   return p;\n}\n\n\n// Image\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Picture in picture on\n    bool pip=true;\n   \n   // Pixel\n     vec2 pixel=Pip(fragCoord, pip);\n   \n    // Mouse\n    vec2 m=iMouse.xy/iResolution.xy;\n\n    // Camera\n    vec3 ro,rd;\n    Ray(m,pixel,ro,rd);\n\n  // Trace ray\n\n  // Hit and number of steps\n  bool hit;\n  int s;\n\n  float t = SphereTrace(ro, rd, 200.,hit, s);\n \n    // Position\n    vec3 pt = ro + t * rd;\n   \n  // Shade background\n  vec3 rgb = background(rd);\n\n  if (hit)\n  {\n    // Compute normal\n    vec3 n = ObjectNormal(pt);\n\n    // Shade object with light\n    rgb = Shade(pt, n, rd);\n  }\n\n  // Uncomment this line to shade image with false colors representing the number of steps\n  if (pip==true)\n  {\n      rgb = ShadeSteps(s);\n  }\n\n\n  fragColor=vec4(rgb, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\n// Hashing function\n// Returns a random number in [-1,1]\n// p : Vector in space\nfloat Hash(in vec3 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\n// Procedural value noise with cubic interpolation\n// x : Point \nfloat Noise(in vec3 p)\n{\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n  \n    f = f*f*(3.0-2.0*f);\n    // Could use quintic interpolation instead of cubic\n    // f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix(mix( Hash(i+vec3(0,0,0)), \n                        Hash(i+vec3(1,0,0)),f.x),\n                   mix( Hash(i+vec3(0,1,0)), \n                        Hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( Hash(i+vec3(0,0,1)), \n                        Hash(i+vec3(1,0,1)),f.x),\n                   mix( Hash(i+vec3(0,1,1)), \n                        Hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\n// Compute the distance to the Voronoi boundary\n// x : Point\n// Return (closest distance, second closest, cell id)\nvec3 Voronoi( in vec3 x )\n{\n    vec3 p = floor( x );\n    vec3 f = fract( x );\n\n\tfloat id = 0.0;\n    vec2 res = vec2( 100.0 );\n    for( int k=-1; k<=1; k++ )\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec3 b = vec3( float(i), float(j), float(k) );\n        vec3 r = vec3( b ) - f + Hash( p + b );\n        float d = dot( r, r );\n\n        if( d < res.x )\n        {\n\t\t\tid = dot( p+b, vec3(1.0,57.0,113.0 ) );\n            res = vec2( d, res.x );\t\t\t\n        }\n        else if( d < res.y )\n        {\n            res.y = d;\n        }\n    }\n\n    return vec3( sqrt( res ), abs(id) );\n}\n\n// Camera -----------------------------------------------------------------------\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n    float sa = sin(a); float ca = cos(a); \n    return mat3(ca,sa,0.0,    -sa,ca,0.0,  0.0,0.0,1.0);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(in vec2 m, in vec2 p,out vec3 ro,out vec3 rd)\n{\n    float a = 3.0*3.14*m.x;\n   \tfloat le = 3.8;\n    \n    ro=vec3(45.0,20.0,35.0);\n    ro*=Rz(3.0*3.14*m.x); \n\n    vec3 ta = vec3(0.0,0.0,0.0);\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,0.0,1.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\trd = normalize( p.x*uu + p.y*vv + le*ww );\n}\n\n","name":"Common","description":"","type":"common"}]}