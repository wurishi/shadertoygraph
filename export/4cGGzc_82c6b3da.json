{"ver":"0.1","info":{"id":"4cGGzc","date":"1713035594","viewed":54,"name":"Fractal: Mandelbrot Set","username":"Velll","description":"A simple mandebrot generator","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot","zoom","satisfying"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535897932384626433832795\n\nvec3 colorPick(in float time) {\n    vec3 a = vec3(0.3, 0.4, 0.1);\n    vec3 b = vec3(0.5, 1.2, 4.0);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(1.2, 1.5, 1.0);\n    \n    vec3 color = a + b * cos(2.0 * PI * (c * time + d));\n    return color;\n}\n\n// Un-comment the options to discover different effects\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    //float scale = 10.0; // A value\n    float scale = pow(2.0, -abs(mod(iTime - 20.0, 40.0) - 20.0)); //Continious panning in and zooming out\n\n    vec2 pos = vec2(-1.745077958057901, -0.0224752006107964); // A value\n    \n    vec3 colorMasks = colorPick(5.0); // Individual values\n    //vec3 colorMasks = colorPick(iTime / 4.0); //Going throught the color palette\n        \n    vec2 adjPos = ((fragCoord * 2.0 - iResolution.xy) / iResolution.y * scale) + pos;\n    vec2 mand = vec2(0.0, 0.0);\n    int iter = 0;\n    int maxIter = 500;\n    while ((mand.x * mand.x) + (mand.y * mand.y) <= 4.0 && iter <= maxIter) {\n        float xTemp = (mand.x * mand.x) - (mand.y * mand.y) + adjPos.x;\n        mand.y = (2.0 * mand.x * mand.y) + adjPos.y;\n        mand.x = xTemp;\n        \n        iter += 1;\n    }\n    \n    //fragColor = vec4(colorMasks * float(iter) / float(maxIter) * 10.0, 1.0); // Colors based on iteration\n    fragColor = vec4(mand.yyy * colorMasks, 1.0); // Masked colors\n}\n\n// Cantor Dust Jumpscare:\n// //   // //         // //   // //                           // //   // //         // //   // //","name":"Image","description":"","type":"image"}]}