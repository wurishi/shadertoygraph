{"ver":"0.1","info":{"id":"clXXR7","date":"1674460942","viewed":156,"name":"Sunrise Sunset","username":"jeffpeck","description":"Experimenting with 2d scenes","likes":1,"published":1,"flags":0,"usePreview":1,"tags":["sunrays","2dshapes","2dscene"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdSunRays(vec2 p, float radius, float num_rays, float rays_radius) {\n  return length(p) - max(radius, rays_radius * step(sin(atan(p.y, p.x) * num_rays), 0.));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord.xy / iResolution.y;\n\n  float slowed_time = iTime * .8;\n  \n  float sun_radius = .1;\n  float num_rays = 36.;\n  float rays_radius = .6;\n  \n  float hori_center_offset = ((iResolution.y / iResolution.x) - sun_radius);\n  vec2 sun_pos = vec2(\n    hori_center_offset + (sin(slowed_time) + 1.) * .5,\n    (cos(slowed_time) + 1.) - 1.\n  );\n  vec2 moon_pos = vec2(\n    hori_center_offset + (sin(slowed_time + 3.14) + 1.) * .5,\n    (cos(slowed_time + 3.14) + 1.) - 1.\n  );\n  \n  vec3 background_color = vec3(0., .1, .8) * uv.y * sun_pos.y + .2;\n  vec3 sun_color = vec3(.9, .8, .1);\n  vec3 moon_color = vec3(.8, .8, 1.) * (1.8 - uv.y);\n  vec3 foreground_color = vec3(.1, .9, .4) * 3. * uv.y * sun_pos.y + .3;\n\n  vec2 p = uv - sun_pos;\n\n  float d_sun = sdSunRays(p, sun_radius, num_rays, rays_radius);\n  vec3 color = mix(sun_color, background_color, smoothstep(0., 100. / iResolution.x, d_sun));\n\n  float d_moon = length(uv - moon_pos);\n  color = mix(color, moon_color, step(d_moon, .1));\n\n  color = mix(foreground_color, color, step(.6, (sin(iTime + uv.x  * 10.) + 4.) * uv.y));\n\n  fragColor = vec4(color, 1.);\n}","name":"Image","description":"","type":"image"}]}