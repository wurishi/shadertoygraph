{"ver":"0.1","info":{"id":"DdsGDf","date":"1666949955","viewed":468,"name":"Lissajous curves table","username":"kishimisu","description":"Mouse click: disable overlay\nOn the left and bottom edges, I'm plotting dots moving along a circle path with increasing frequency, then plot the intersection between each point's x component with the other axis y component, giving nice periodic patterns !","likes":26,"published":3,"flags":32,"usePreview":0,"tags":["sine","curve","plot","periodic","trigonometry"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Overlay\n\nvec3 palette( in float k, in vec3 a, in vec3 b, in vec3 c, in vec3 d ) {\n    return a + b*cos( 6.28318*(c*k+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n    if (iMouse.z > 0.5) return;\n    \n    vec2 uv = (fragCoord.xy)/iResolution.y;\n    vec2 fuv = fract(uv*7.)-.5;\n    vec2 fid = floor(uv*7.);\n    vec2 id0 = fid;\n    \n    if (fid.x+fid.y == 0.) return;\n    if (fid.x*fid.y == 0.) fid = vec2(max(fid.x, fid.y));\n\n    vec2 p = vec2( cos(iTime*.2 * fid.x), sin(iTime*.2 * fid.y) )*.45;\n    \n    // lines overlay\n    float d = 0.;\n    if (id0.y > 0.) d += smoothstep(.03, .0, abs(fuv.y - p.y)); // horizontal\n    if (id0.x > 0.) d += smoothstep(.03, .0, abs(fuv.x - p.x)); // vertical\n\n    float intensity = smoothstep(-1., 1., sin(iTime*.35)*8.)*.75;\n    fragColor.rgb += vec3(d)*intensity;\n    \n    // dots overlay\n    vec3 color = palette((fid.x+fid.y)/14., vec3(.75), vec3(0.5), vec3(1.), vec3(0., .25, .5));\n    fragColor.rgb = mix(fragColor.rgb, color+.4, smoothstep(.06, .04, length(fuv - p)) );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Dots trace\n\nvec3 palette( in float k, in vec3 a, in vec3 b, in vec3 c, in vec3 d ) {\n    return a + b*cos( 6.28318*(c*k+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord.xy/iResolution.y;\n    \n    // nicely handle resize thanks to @mla\n    fragColor = texelFetch(iChannel0,ivec2(fragCoord),0);\n    if (fragColor.a != iResolution.x) {\n      fragColor = vec4(0,0,0,iResolution.x);\n    }\n    \n    // repeat space\n    vec2 fuv = fract(uv*7.)-.5;\n    vec2 fid = floor(uv*7.);\n    \n    // edge cases\n    if (fid.x+fid.y == 0.) return;\n    if (fid.x*fid.y == 0.) fid = vec2(max(fid.x, fid.y));\n    \n    // get cell's dot position\n    vec2 p = vec2( cos(iTime*.2 * fid.x), sin(iTime*.2 * fid.y) )*.45;\n    \n    // plot dot\n    float d = smoothstep(.04, -.04, length(p - fuv));\n    vec3 color = palette((fid.x+fid.y)/14., vec3(.75), vec3(0.5), vec3(1.), vec3(0., .25, .5));\n    fragColor.rgb = mix(fragColor.rgb*.9994, color, d);\n}","name":"Buffer A","description":"","type":"buffer"}]}