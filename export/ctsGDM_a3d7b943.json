{"ver":"0.1","info":{"id":"ctsGDM","date":"1671852448","viewed":97,"name":"Fluid element","username":"steph","description":"Trabalho de computação gráfica.","likes":1,"published":1,"flags":0,"usePreview":1,"tags":["raymarching","texture"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SCALE 9.\n#define FREQUENCY 1.\n#define AMPLITUDE 1.\n#define PERSISTENCE 1.\n#define LACUNARITY 1.\n#define MAX_OCTAVES 8\n#define OCTAVES 8.\n#define OFFSET 0.3\n#define MULTIPLIER 1.\n#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define SURF_DIST 0.01\n#define PI 3.1415925359\n#define EPSILON 0.0001\n#define HASHSCALE1 .1031\n#define FIRST -0.81\n#define SECOND 1.\n\nstruct Tear {\n    float x;\n    vec3 yzw;\n    vec3 Tpos;\n};\n// Modulo 289 without a division (only multiplications)\nvec3 mod289(vec3 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\n// Modulo 7 without a division\nvec3 mod7(vec3 x) {\n    return x - floor(x * (1.0 / 7.0)) * 7.0;\n}\n\n// Permutation polynomial: (34x^2 + 6x) mod 289\nvec3 permute(vec3 x) {\n    return mod289((34.0 * x + 10.0) * x);\n}\n\n// Cellular noise, returning F1 and F2 in a vec2.\n// 3x3x3 search region for good F2 everywhere, but a lot\n// slower than the 2x2x2 version.\n// The code below is a bit scary even to its author,\n// but it has at least half decent performance on a\n// modern GPU. In any case, it beats any software\n// implementation of Worley noise hands down.\n\nvec2 cellular(vec3 P) {\n#define K 0.142857142857 // 1/7\n#define Ko 0.428571428571 // 1/2-K/2\n#define K2 0.020408163265306 // 1/(7*7)\n#define Kz 0.166666666667 // 1/6\n#define Kzo 0.416666666667 // 1/2-1/6*2\n#define jitter 1.0 // smaller jitter gives more regular pattern\n\n    vec3 Pi = mod289(floor(P));\n    vec3 Pf = fract(P) - 0.5;\n\n    vec3 Pfx = Pf.x + vec3(1.0, 0.0, -1.0);\n    vec3 Pfy = Pf.y + vec3(1.0, 0.0, -1.0);\n    vec3 Pfz = Pf.z + vec3(1.0, 0.0, -1.0);\n\n    vec3 p = permute(Pi.x + vec3(-1.0, 0.0, 1.0));\n    vec3 p1 = permute(p + Pi.y - 1.0);\n    vec3 p2 = permute(p + Pi.y);\n    vec3 p3 = permute(p + Pi.y + 1.0);\n\n    vec3 p11 = permute(p1 + Pi.z - 1.0);\n    vec3 p12 = permute(p1 + Pi.z);\n    vec3 p13 = permute(p1 + Pi.z + 1.0);\n\n    vec3 p21 = permute(p2 + Pi.z - 1.0);\n    vec3 p22 = permute(p2 + Pi.z);\n    vec3 p23 = permute(p2 + Pi.z + 1.0);\n\n    vec3 p31 = permute(p3 + Pi.z - 1.0);\n    vec3 p32 = permute(p3 + Pi.z);\n    vec3 p33 = permute(p3 + Pi.z + 1.0);\n\n    vec3 ox11 = fract(p11 * K) - Ko;\n    vec3 oy11 = mod7(floor(p11 * K)) * K - Ko;\n    vec3 oz11 = floor(p11 * K2) * Kz - Kzo; // p11 < 289 guaranteed\n\n    vec3 ox12 = fract(p12 * K) - Ko;\n    vec3 oy12 = mod7(floor(p12 * K)) * K - Ko;\n    vec3 oz12 = floor(p12 * K2) * Kz - Kzo;\n\n    vec3 ox13 = fract(p13 * K) - Ko;\n    vec3 oy13 = mod7(floor(p13 * K)) * K - Ko;\n    vec3 oz13 = floor(p13 * K2) * Kz - Kzo;\n\n    vec3 ox21 = fract(p21 * K) - Ko;\n    vec3 oy21 = mod7(floor(p21 * K)) * K - Ko;\n    vec3 oz21 = floor(p21 * K2) * Kz - Kzo;\n\n    vec3 ox22 = fract(p22 * K) - Ko;\n    vec3 oy22 = mod7(floor(p22 * K)) * K - Ko;\n    vec3 oz22 = floor(p22 * K2) * Kz - Kzo;\n\n    vec3 ox23 = fract(p23 * K) - Ko;\n    vec3 oy23 = mod7(floor(p23 * K)) * K - Ko;\n    vec3 oz23 = floor(p23 * K2) * Kz - Kzo;\n\n    vec3 ox31 = fract(p31 * K) - Ko;\n    vec3 oy31 = mod7(floor(p31 * K)) * K - Ko;\n    vec3 oz31 = floor(p31 * K2) * Kz - Kzo;\n\n    vec3 ox32 = fract(p32 * K) - Ko;\n    vec3 oy32 = mod7(floor(p32 * K)) * K - Ko;\n    vec3 oz32 = floor(p32 * K2) * Kz - Kzo;\n\n    vec3 ox33 = fract(p33 * K) - Ko;\n    vec3 oy33 = mod7(floor(p33 * K)) * K - Ko;\n    vec3 oz33 = floor(p33 * K2) * Kz - Kzo;\n\n    vec3 dx11 = Pfx + jitter * ox11;\n    vec3 dy11 = Pfy.x + jitter * oy11;\n    vec3 dz11 = Pfz.x + jitter * oz11;\n\n    vec3 dx12 = Pfx + jitter * ox12;\n    vec3 dy12 = Pfy.x + jitter * oy12;\n    vec3 dz12 = Pfz.y + jitter * oz12;\n\n    vec3 dx13 = Pfx + jitter * ox13;\n    vec3 dy13 = Pfy.x + jitter * oy13;\n    vec3 dz13 = Pfz.z + jitter * oz13;\n\n    vec3 dx21 = Pfx + jitter * ox21;\n    vec3 dy21 = Pfy.y + jitter * oy21;\n    vec3 dz21 = Pfz.x + jitter * oz21;\n\n    vec3 dx22 = Pfx + jitter * ox22;\n    vec3 dy22 = Pfy.y + jitter * oy22;\n    vec3 dz22 = Pfz.y + jitter * oz22;\n\n    vec3 dx23 = Pfx + jitter * ox23;\n    vec3 dy23 = Pfy.y + jitter * oy23;\n    vec3 dz23 = Pfz.z + jitter * oz23;\n\n    vec3 dx31 = Pfx + jitter * ox31;\n    vec3 dy31 = Pfy.z + jitter * oy31;\n    vec3 dz31 = Pfz.x + jitter * oz31;\n\n    vec3 dx32 = Pfx + jitter * ox32;\n    vec3 dy32 = Pfy.z + jitter * oy32;\n    vec3 dz32 = Pfz.y + jitter * oz32;\n\n    vec3 dx33 = Pfx + jitter * ox33;\n    vec3 dy33 = Pfy.z + jitter * oy33;\n    vec3 dz33 = Pfz.z + jitter * oz33;\n\n    vec3 d11 = dx11 * dx11 + dy11 * dy11 + dz11 * dz11;\n    vec3 d12 = dx12 * dx12 + dy12 * dy12 + dz12 * dz12;\n    vec3 d13 = dx13 * dx13 + dy13 * dy13 + dz13 * dz13;\n    vec3 d21 = dx21 * dx21 + dy21 * dy21 + dz21 * dz21;\n    vec3 d22 = dx22 * dx22 + dy22 * dy22 + dz22 * dz22;\n    vec3 d23 = dx23 * dx23 + dy23 * dy23 + dz23 * dz23;\n    vec3 d31 = dx31 * dx31 + dy31 * dy31 + dz31 * dz31;\n    vec3 d32 = dx32 * dx32 + dy32 * dy32 + dz32 * dz32;\n    vec3 d33 = dx33 * dx33 + dy33 * dy33 + dz33 * dz33;\n\n\t// Sort out the two smallest distances (F1, F2)\n#if 0\n\t// Cheat and sort out only F1\n    vec3 d1 = min(min(d11, d12), d13);\n    vec3 d2 = min(min(d21, d22), d23);\n    vec3 d3 = min(min(d31, d32), d33);\n    vec3 d = min(min(d1, d2), d3);\n    d.x = min(min(d.x, d.y), d.z);\n    return vec2(sqrt(d.x)); // F1 duplicated, no F2 computed\n#else\n\t// Do it right and sort out both F1 and F2\n    vec3 d1a = min(d11, d12);\n    d12 = max(d11, d12);\n    d11 = min(d1a, d13); // Smallest now not in d12 or d13\n    d13 = max(d1a, d13);\n    d12 = min(d12, d13); // 2nd smallest now not in d13\n    vec3 d2a = min(d21, d22);\n    d22 = max(d21, d22);\n    d21 = min(d2a, d23); // Smallest now not in d22 or d23\n    d23 = max(d2a, d23);\n    d22 = min(d22, d23); // 2nd smallest now not in d23\n    vec3 d3a = min(d31, d32);\n    d32 = max(d31, d32);\n    d31 = min(d3a, d33); // Smallest now not in d32 or d33\n    d33 = max(d3a, d33);\n    d32 = min(d32, d33); // 2nd smallest now not in d33\n    vec3 da = min(d11, d21);\n    d21 = max(d11, d21);\n    d11 = min(da, d31); // Smallest now in d11\n    d31 = max(da, d31); // 2nd smallest now not in d31\n    d11.xy = (d11.x < d11.y) ? d11.xy : d11.yx;\n    d11.xz = (d11.x < d11.z) ? d11.xz : d11.zx; // d11.x now smallest\n    d12 = min(d12, d21); // 2nd smallest now not in d21\n    d12 = min(d12, d22); // nor in d22\n    d12 = min(d12, d31); // nor in d31\n    d12 = min(d12, d32); // nor in d32\n    d11.yz = min(d11.yz, d12.xy); // nor in d12.yz\n    d11.y = min(d11.y, d12.z); // Only two more to go\n    d11.y = min(d11.y, d11.z); // Done! (Phew!)\n    return sqrt(d11.xy); // F1, F2\n#endif\n}\n\nfloat noise3(vec3 p) {\n    vec2 v = cellular(p);\n    return v.x * FIRST + v.y * SECOND;\n}\n\n// Rotation matrix.\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\n// SDF of a sphere, given its center and radius.\nTear dSphere(vec3 p, vec4 s, vec3 col) {\n    return Tear(length(p - s.xyz) - s.w, col, p);\n}\n\nTear dTorus(vec3 p, vec2 r, vec3 color) {\n    float x = length(p.xz) - r.x;\n\n    return Tear(length(vec2(x, p.y)) - r.y, color, p);\n}\n\n// B + A\nfloat unionSDF(float sda, float sdb) {\n    return min(sda, sdb);\n}\n\n// B * A\nfloat intersectionSDF(float sda, float sdb) {\n    return max(sda, sdb);\n}\n\n// B - A\nfloat differenceSDF(float sda, float sdb) {\n    return max(-sda, sdb);\n}\n\nTear minWithColor(Tear obj1, Tear obj2) {\n    if(obj2.x < obj1.x)\n        return obj2;\n    return obj1;\n}\nTear minWithColor(Tear obj1, float obj2) {\n    return obj1;\n}\n\n// Blend A and B\nTear blendSDF(Tear sda, Tear sdb, float k) {\n    float h = clamp(0.5 + 0.5 * (sdb.x - sda.x) / k, 0.0, 1.0);\n    vec3 c = clamp(0.5 + 0.5 * (sdb.yzw - sda.yzw) / k, 0.0, 255.);\n    //vec3 color = normalize(sdb.Tpos - sda.Tpos) length(sda.Tpos)\n    vec3 np = clamp(0.5 + 0.5 * (sdb.Tpos - sda.Tpos) / k, 0.0, 1.0);\n    return Tear(mix(sdb.x, sda.x, h) - k * h * (1.0 - h), sda.yzw, mix(sdb.Tpos, sda.Tpos, np) - k * np * (1.0 - np));\n}\n\n// Scene SDF: signed distance function.\nTear getDist(vec3 p) {\n\n    float s = sin(iTime);\n\n    vec3 bp = p - vec3(1, 0.5, 0) - vec3(0., 1.5, -1.);\n    bp.yz += vec2(sin(iTime * 2.), cos(iTime * 1.134) * 1.5);\n\n    vec3 bp2 = p - vec3(-1, 0.75, 0.5) - vec3(0., 1.5, -1.);\n    bp2.xz -= s / 2.;\n\n    vec3 bp3 = p - vec3(2, -0.2, -1) - vec3(0., 1.5, -1.);\n    bp3.xy += vec2(sin(-iTime * 1.167), -cos(iTime * 1.123));\n\n    float cx = -1.0;\n    cx -= s;\n\n    vec3 bp4 = p - vec3(-1, 0.75, 0.5) - vec3(0., 1.5, -1.);\n    bp4.xy += s;\n\n    vec3 t2 = p - vec3(0., 2.5, 4);\n    t2.x += cos(iTime * 2.) * 4.;\n    t2.xy *= Rot(PI / 2.);\n\n    vec3 CorEsferas = vec3(102., 153., 255.) / 255.;\n\n    Tear sd = dSphere(bp3, vec4(-2., -1., 6, 0.7), CorEsferas);\n    Tear sd2 = dSphere(bp, vec4(0, 0.5, 6, 0.75), CorEsferas);\n    Tear sd3 = dSphere(bp2, vec4(0, 1, 4.5, 0.9), CorEsferas);\n    Tear sd4 = dSphere(p - vec3(0., 1.5, -1.), vec4(0, 1, 5, 1), CorEsferas);\n    Tear sd5 = dSphere(p - vec3(0., 1.5, -1.), vec4(cx * 2. + 4., 1, 5, 0.5), CorEsferas);\n    Tear sd6 = dSphere(bp4, vec4(0, 1, 4.5, 0.5), CorEsferas);\n    Tear td2 = dTorus(t2, vec2(1. * (sin(iTime * 2.) + 1.), 0.3), CorEsferas);\n\n    Tear d = minWithColor(blendSDF(blendSDF(blendSDF(blendSDF(blendSDF(blendSDF(sd, sd2, 0.6), sd3, 0.6), sd4, 0.6), sd6, 0.6), sd5, 0.6), td2, 0.6), 1.);\n    d = minWithColor(d, td2);\n    return d;\n}\n\n// Walk through empty spheres until the ray hits an object\n// or is beyond MAX_DIST, meaning no hit. \nTear rayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.0;\n    Tear dS;\n    vec3 p;\n    for(int i = 0; i < MAX_STEPS; i++) {\n        p = ro + rd * dO;\n        dS = getDist(p);\n        dO += dS.x;\n        if(dO > MAX_DIST || dS.x < SURF_DIST)\n            break;\n    }\n\n    vec3 col = vec3(dS.yzw);\n\n    return Tear(dO, col, dS.Tpos);\n}\n\n// The normal is the gradient of the SDF scalar field at point p.\n// By using finite difference: \n// https://en.wikipedia.org/wiki/Finite_difference#Relation_with_derivatives \nvec3 getNormal(vec3 p) {\n    // arbitrary — should be smaller than any surface detail in your distance function, \n    // but not so small as to get lost in float precision\n    vec2 e = vec2(0.001, 0);\n\n    vec3 n = vec3(getDist(p + e.xyy).x, getDist(p + e.yxy).x, getDist(p + e.yyx).x) -\n        vec3(getDist(p - e.xyy).x, getDist(p - e.yxy).x, getDist(p - e.yyx).x);\n\n    return normalize(n);\n}\n\nfloat octaveNoise(vec3 p) {\n    float total = 0.;\n    float amplitude = AMPLITUDE;\n    float frequency = FREQUENCY;\n    float value = 0.;\n    for(int i = 0; i < MAX_OCTAVES; ++i) {\n        if(float(i) >= OCTAVES)\n            break;\n        value += noise3(p * frequency) * amplitude;\n        total += amplitude;\n        amplitude *= PERSISTENCE;\n        frequency *= LACUNARITY;\n    }\n    return value / total;\n}\n\nvec3 bumpLighting(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 N, vec3 lightPos, vec3 lightIntensity, vec3 cameraPos) {\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(cameraPos - p);\n    vec3 R = normalize(reflect(-L, N));\n\n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n\n    if(dotLN < 0.0) {\n            // Light not visible from this point on the surface\n        return k_a * lightIntensity;\n    }\n\n    if(dotRV < 0.0) {\n            // Light reflection in opposite direction as viewer, apply only diffuse\n            // component\n        return lightIntensity * (k_a + k_d * dotLN);\n    }\n    return lightIntensity * (k_a + k_d * dotLN + k_s * pow(dotRV, alpha));\n}\n\n// Phong illumination model, given a point and camera position.\nvec3 getLight(vec3 p, vec3 ro) {\n\n    vec3 lightPos = vec3(2, 5, 3);\n\n    //lightPos.xz += vec2(sin(iTime), cos(iTime)) * 2.0;\n\n    vec3 l = normalize(lightPos - p);\n    vec3 n = getNormal(p);\n    vec3 r = reflect(-l, n);\n\n    // ambient component\n    float amb = 0.1;\n    // ambient reflection coefficient\n    float ka = 1.0;\n\n    // diffuse component - apply Lambert's cosine law\n    float dif = clamp(dot(n, l), 0.0, 1.0);\n    // diffuse reflection coefficient\n    float kd = 0.7;\n\n    // specular component\n    float shininess = 100.;\n    vec3 v = normalize(ro - p);\n    float spec = clamp(dot(r, v), 0.0, 1.0);\n    spec = pow(spec, shininess);\n    // specular reflection coefficient\n    float ks = 1.0;\n\n    // slightly move point p in the direction of the normal,\n    // so the distance is not zero. Otherwise, the first hit \n    // will be at the plane.\n    Tear d = rayMarch(p + 2. * n * SURF_DIST, l);\n\n    // cast a ray to the light\n    if(d.x < length(lightPos - p)) {\n        // point in the shadow\n        dif *= 0.1;\n        spec *= 0.5;\n    }\n\n    // ambient + diffuse + specular components\n    return ka * vec3(amb) + kd * vec3(dif) + ks * vec3(spec);\n}\n\nfloat getNoiseColor(vec3 p) {\n    return OFFSET + MULTIPLIER * octaveNoise(SCALE * p);\n}\n\nvec3 noiseNormal(vec3 p) {\n    return normalize(vec3(getNoiseColor(p + vec3(EPSILON, 0.0, 0.0)) - getNoiseColor(p - vec3(EPSILON, 0.0, 0.0)), getNoiseColor(p + vec3(0.0, EPSILON, 0.0)) - getNoiseColor(p - vec3(0.0, EPSILON, 0.0)), getNoiseColor(p + vec3(0.0, 0.0, EPSILON)) - getNoiseColor(p - vec3(0.0, 0.0, EPSILON))));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / min(iResolution.x, iResolution.y);\n\n    // camera position\n    vec3 ro = vec3(0, 5, -4.);\n\n    // projection plane z = 1\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n\n    // Rotate camera down about the x-axis\n    rd.yz *= Rot(PI * 15. / 180.);\n\n    Tear tear = rayMarch(ro, rd);\n\n    // point hit by the ray\n    vec3 p = ro + rd * tear.x;\n\n    // illumination at point p\n    vec3 light_intensity = getLight(p, ro);\n\n    // dark grey\n    // vec3 background_color = vec3(.2, .2, .2);\n    vec3 background_color = texture(iChannel0, vec3(uv, 1)).rgb;\n\n    // Antique White color #FAEBD7\n    vec3 surface_color = vec3(102., 153., 255.) / 255.;\n\n    // pixel color\n    vec3 color;\n    vec3 N = getNormal(p);\n\n    if(tear.x < MAX_DIST) {\n        vec3 noise_normal = noiseNormal(tear.Tpos);\n        float colorChange = OFFSET + MULTIPLIER * octaveNoise(7. * tear.Tpos); //AQUI\n\n        if(dot(N, noise_normal) < 0.0) {\n            noise_normal = reflect(noise_normal, N);\n        }\n        N = normalize(N * 2. + noise_normal);\n\n        vec3 light = bumpLighting(vec3(0.3), vec3(0.8) * colorChange * 2., vec3(0.7), 100.0, p, N, vec3(2, 5, 3), vec3(light_intensity), ro);\n\n        // modulate surface color by the light intensity\n        color = tear.yzw * vec3(light);\n    } else {\n        color = background_color;\n    }\n\n    // output to screen\n    fragColor = vec4(color, 1.0);\n\n}","name":"Image","description":"","type":"image"}]}