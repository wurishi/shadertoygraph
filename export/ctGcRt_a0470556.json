{"ver":"0.1","info":{"id":"ctGcRt","date":"1700517568","viewed":19,"name":"Sine! Again!","username":"I_was_here","description":"Swagger","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sine"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\n// This shader computes the distance to the Mandelbrot Set for everypixel, and colorizes\n// it accoringly.\n// \n// Z -> ZÂ²+c, Z0 = 0. \n// therefore Z' -> 2Â·ZÂ·Z' + 1\n//\n// The Hubbard-Douady potential G(c) is G(c) = log Z/2^n\n// G'(c) = Z'/Z/2^n\n//\n// So the distance is |G(c)|/|G'(c)| = |Z|Â·log|Z|/|Z'|\n//\n// More info here: https://iquilezles.org/articles/distancefractals\n\n// contribution by Jason Wilkins - Tup/2016 - Generalized Mandelbrot and distance function\n\n// === the magic function.  ==========================================\n#define db_display(X,Y,val) {                                             \\\n    vec2 U = vec2(15,10)* ( gl_FragCoord.xy/iResolution.xy - vec2(X,Y) ); \\\n    st_assert( pFloat(U,val).x < .5 );                                    \\\n}\n\n// === fonts utils from https://www.shadertoy.com/view/llySRh =========\n// ( can't be hidden in Common because, you know, can't access textures there for odd reasons.)\n\nvec4 char(vec2 p, int c) {// --- display char\n    vec2 dFdx = dFdx(p/16.), dFdy = dFdy(p/16.);\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n\treturn textureGrad( iChannel3, p/16. + fract( vec2(c, 15-c/16) / 16. ), \n                        dFdx, dFdy );\n}\nfloat dx = .4;\nvec4 pInt(vec2 p, float n) {// --- display int\n    vec4 v = vec4(0);\n    if (n < 0.) \n        v += char(p - vec2(-.5,0), 45 ),\n        n = -n;\n\n    for (float i = 3.; i>=0.; i--) \n        n /=  9.999999, // 10., // for windows :-(\n        v += char(p - dx*vec2(i,0), 48+ int(fract(n)*10.) );\n    return v;\n}\nvec4 pFloat(vec2 p, float n) { // --- display float4.4\n    vec4 v = vec4(0);\n    if (n < 0.) v += char(p - vec2(-.5,0), 45 ), n = -n;\n    v += pInt(p,floor(n)); p.x -= 4.*dx; // comment this line in abs(n) < 1\n    v += char(p, 46);      p.x -= dx;\n    v += pInt(p,fract(n)*1e4);\n    return v;\n}\n\nvec2 refine(float xx, float yy, float time) \n{\n    float ax = xx;\n    float ay = pow(yy,sin(xx+yy));\n    return vec2(ax,ay);\n}\n\nfloat check(vec2 p, float time) {\n    float ax = (p.x);\n    float ay = (p.y);\n    return sin (\n        (p.x) +\n        pow(\n            (3.0*p.y),cos(p.y/p.x)\n        ) + \n        (3.0 * sin(2.0*p.x + cos(p.y+time)))\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //float x = fragCoord.x;\n    //float y = fragCoord.y;\n    \n    vec2 point = vec2(\n    fragCoord.x/10000.0,\n    fragCoord.y/500.0);\n    \n    // animation\t\n\tfloat t = -iTime/5.0;\n    \n    float color = float(1);\n    float hold = float(1);\n    // iterate\n    for( int i=0; i<256; i++ )\n    {\n        float value = check(point,t);\n        \n        if( (abs(value) > 0.9) || (abs(value) < 0.1) ) {\n       \n            //set to black\n            color -= float(1);\n\n            break;\n        }\n        \n        //color = abs(value);\n        \n        point = refine(float(point.x),float(point.y),t);\n    }\n    \n    color = check(point,t);\n    vec3 col = vec3( float(color) );\n    \n    fragColor = vec4(col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}