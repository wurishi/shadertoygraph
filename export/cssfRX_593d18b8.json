{"ver":"0.1","info":{"id":"cssfRX","date":"1689003436","viewed":70,"name":"RayMarching-test","username":"ProCeeDor","description":"simple ray marching tutorial ","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://blog.csdn.net/weixin_28710515/article/details/89533138\nconst int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float EPISILON = 1e-4;\n\nfloat sphereSDF(vec3 samplePoint){\n    return length(samplePoint)-1.0;\n}\nfloat sceneSDF(vec3 samplePoint){\n    return sphereSDF(samplePoint);\n}\nfloat shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end){\n    float depth = start;\n    for(int i=0;i<MAX_MARCHING_STEPS;i++){\n        float dist = sceneSDF(eye + marchingDirection*depth);\n        if(dist < EPISILON) return depth;\n        depth += dist;\n        if(depth >= end) return depth;\n    }\n    return depth;\n}\nvec3 rayDirection(float fov, vec2 size, vec2 fragCoord){\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fov) / 2.0);\n    return normalize(vec3(xy, -z));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 rd = rayDirection(45.0, iResolution.xy, fragCoord);\n    vec3 ro = vec3(0.0, 0.0, 5.0);\n    float dist = shortestDistanceToSurface(ro, rd, MIN_DIST, MAX_DIST);\n\n    if(dist > MAX_DIST - EPISILON){\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        return;\n    }\n    // Output to screen\n    fragColor = vec4(1.0,0.0,0.0,1.0);\n}","name":"Image","description":"","type":"image"}]}