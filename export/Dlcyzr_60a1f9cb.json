{"ver":"0.1","info":{"id":"Dlcyzr","date":"1698807439","viewed":34,"name":"Tricorn","username":"FishDrowned","description":"Tricorn fractal. Defined as z -> conjugate(z) ^ 2 + c.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractaltricorn"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Made via ShaderToy\n#define PI 3.1415926535\n\n// Constants\nbool COLORBAND = false;\nfloat SLOWTIME = 20.0;\nfloat RADIUS = 20.0;\nint ITERATIONS = 4000;\nfloat ZOOM_MAG = 1.0;\n\n// COLOR\nvec3 basic = vec3(.0, .1, .2);\nvec3 white = vec3(.0);\n\nvec3 color = vec3(.0, .1, .2);\n\nfloat COLORFULL = 10.0;\nvec3 COLORFOCUS = vec3(0.5);\nvec3 BRIGHTNESS = vec3(.5);\nvec3 HUE = vec3(1.0);\n\n// Positions\nvec2 zoomPosition = vec2(0.0);\n\n// Helper Functions\nvec2 conjugate(vec2 z) {return vec2(z.x, -z.y);}\nvec2 complexPow(vec2 z, float n){return pow(length( z ), n) * vec2(cos(atan(z.y, z.x) * n), sin(atan(z.y, z.x) * n));}\nfloat frac(float f){return f - floor(f);}\nvec3 mandelColor(float iteration){float t = frac(iteration/float(ITERATIONS) * float(COLORFULL) + .5);return (iteration != float(ITERATIONS))? (BRIGHTNESS+COLORFOCUS*cos(2.0*PI*(HUE*t+color)))*1.3 : vec3(0.0);}\n\n// MANDEL\nfloat tricorn(vec2 z_0, float i_m) {\n    vec2 z_n = z_0 = (3.6 * z_0 - vec2(.0, .0))/ ZOOM_MAG + zoomPosition;\n    \n    float i_z = 0.0;\n    while(i_z < i_m && length(z_n) < RADIUS){\n        z_n = complexPow(conjugate(z_n), 2.0) + z_0;\n        i_z += 1.0;\n        if(i_z == float(ITERATIONS)) {return float(ITERATIONS);}\n    }\n    return float(i_z + 1.0 - (log(log(length(z_n)))/log(2.0))); // Renormalization\n}\n\n// MAIN\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord.xy - 0.5 * iResolution.xy)/iResolution.y;\n    fragColor = vec4(mandelColor(tricorn(uv, float(ITERATIONS))), 1.0);\n}","name":"Image","description":"","type":"image"}]}