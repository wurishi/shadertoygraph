{"ver":"0.1","info":{"id":"MtcGWs","date":"1472334266","viewed":760,"name":"Contrast aware texture bombing","username":"huwb","description":"Based on iqs texture variation work. This tries to avoid ghosted bright features by doing \"contrast blends\" - taking relative intensity of texture values into account. Triangle in corner is white for new version. Not sure if it's useful, comments welcome.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["texture","contrast","blend","bombing","variation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modification by huwb. Original shader by iq: https://www.shadertoy.com/view/lt2GDd\n\n// Tries to avoid 'ghosted' bright features by doing \"contrast blends\" - taking\n// relative intensity of texture values into account and messing with the blend\n// parameter.\n\n// Since it prefers darker pixels when there is a intensity differential, the result\n// will appear darker than the original. To make it prefer the lighter pixel, one\n// can invert contrastAlpha (reversing the behaviour).\n\n// I am happy for the newly added code to be used in an unlimited way. I've included\n// the original header with license from iq below.\n\n//////////////// ORIGINAL HEADER //////////////////\n\n// Created by inigo quilez - iq/2015\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// One simple way to avoid texture tile repetition, at the cost of 4 times the amount of\n// texture lookups (still much better than https://www.shadertoy.com/view/4tsGzf)\n//\n// More info: https://iquilezles.org/articles/texturerepetition\n\n//////////////// ORIGINAL HEADER //////////////////\n\n\n#define USEHASH\nbool useOld;\n\nvec4 hash4( vec2 p ) { return fract(sin(vec4( 1.0+dot(p,vec2(37.0,17.0)), \n                                              2.0+dot(p,vec2(11.0,47.0)),\n                                              3.0+dot(p,vec2(41.0,29.0)),\n                                              4.0+dot(p,vec2(23.0,31.0))))*103.0); }\n\nvec4 contrastBlend( vec4 A, vec4 B, float alpha );\n\nvec4 textureNoTile( sampler2D samp, in vec2 uv )\n{\n    vec2 iuv = floor( uv );\n    vec2 fuv = fract( uv );\n\n#ifdef USEHASH    \n    // generate per-tile transform (needs GL_NEAREST_MIPMAP_LINEARto work right)\n    vec4 ofa = texture( iChannel1, (iuv + vec2(0.5,0.5))/256.0 );\n    vec4 ofb = texture( iChannel1, (iuv + vec2(1.5,0.5))/256.0 );\n    vec4 ofc = texture( iChannel1, (iuv + vec2(0.5,1.5))/256.0 );\n    vec4 ofd = texture( iChannel1, (iuv + vec2(1.5,1.5))/256.0 );\n#else\n    // generate per-tile transform\n    vec4 ofa = hash4( iuv + vec2(0.0,0.0) );\n    vec4 ofb = hash4( iuv + vec2(1.0,0.0) );\n    vec4 ofc = hash4( iuv + vec2(0.0,1.0) );\n    vec4 ofd = hash4( iuv + vec2(1.0,1.0) );\n#endif\n    \n    vec2 ddx = dFdx( uv );\n    vec2 ddy = dFdy( uv );\n\n    // transform per-tile uvs\n    ofa.zw = sign(ofa.zw-0.5);\n    ofb.zw = sign(ofb.zw-0.5);\n    ofc.zw = sign(ofc.zw-0.5);\n    ofd.zw = sign(ofd.zw-0.5);\n    \n    // uv's, and derivarives (for correct mipmapping)\n    vec2 uva = uv*ofa.zw + ofa.xy; vec2 ddxa = ddx*ofa.zw; vec2 ddya = ddy*ofa.zw;\n    vec2 uvb = uv*ofb.zw + ofb.xy; vec2 ddxb = ddx*ofb.zw; vec2 ddyb = ddy*ofb.zw;\n    vec2 uvc = uv*ofc.zw + ofc.xy; vec2 ddxc = ddx*ofc.zw; vec2 ddyc = ddy*ofc.zw;\n    vec2 uvd = uv*ofd.zw + ofd.xy; vec2 ddxd = ddx*ofd.zw; vec2 ddyd = ddy*ofd.zw;\n        \n    // fetch and blend\n    vec2 b = smoothstep(0.25,0.75,fuv);\n    \n    if( useOld )\n    {\n        //original approach from iq\n        return mix( mix( textureGrad( samp, uva, ddxa, ddya ), \n                         textureGrad( samp, uvb, ddxb, ddyb ), b.x ), \n                    mix( textureGrad( samp, uvc, ddxc, ddyc ),\n                         textureGrad( samp, uvd, ddxd, ddyd ), b.x), b.y );\n\n    }\n    \n    \n    // huwb modification - modify blend based on relative brightness\n    // to try to preserve intense features (don't add 50% white)\n    vec4 A = textureGrad( samp, uva, ddxa, ddya );\n    vec4 B = textureGrad( samp, uvb, ddxb, ddyb );\n    vec4 C = textureGrad( samp, uvc, ddxc, ddyc );\n    vec4 D = textureGrad( samp, uvd, ddxd, ddyd );\n    \n    vec4 AB = contrastBlend( A, B, b.x );\n    vec4 CD = contrastBlend( C, D, b.x );\n    return contrastBlend( AB, CD, b.y );\n}\n\n// huwb: this modifies the blend alpha based on the brightness of the texture.\n// i experimented with a couple of \"brightness\" measures and went with \nvec4 contrastBlend( vec4 A, vec4 B, float alpha )\n{\n    // brightness\n    float Ab = A.x * B.y * A.z;\n    float Bb = B.x * B.y * B.z;\n    \n    // work out blend param based on relative brightness, smoothstep\n    // to increase contrast.\n    float contrastAlpha = smoothstep(0.,1.,2.*Ab/(Ab+Bb));\n    \n    // push our alpha towards the contrastAlpha, but still follow alpha to 0 and 1.\n    \n    // goes to 0 when alpha is near 0 or 1\n    float proximityTo01 = min(alpha,1.-alpha);\n    // powering it up seems to give better results\n    proximityTo01 = pow( proximityTo01, .25 );\n    \n    // mix between alpha and contrast-aware alpha\n    alpha = mix( alpha, contrastAlpha, proximityTo01 );\n    \n    // blend\n    return mix( A, B, alpha );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord / iResolution.x;\n\t\n    useOld = fract(iTime/2.) < .5;\n    \n    // huwb stick with comparison of contrast vs no contrast\n\tfloat f = 0.; //smoothstep( 0.4, 0.6, sin(iTime    ) );\n    float s = 0.;//smoothstep( 0.4, 0.6, sin(iTime*0.5) );\n        \n    uv = (4.0 + 16.0*s)*uv + iTime*0.1;\n        \n\tvec3 cola = textureNoTile( iChannel0, uv ).xyz;\n    vec3 colb = texture( iChannel0, uv ).xyz;\n    \n    vec3 col = mix( cola, colb, f );\n    \n\tfragColor = vec4( col, 1.0 );\n\n    if( fragCoord.x+fragCoord.y < 15. )\n        fragColor = vec4( useOld ? 0. : 1. );\n}\n","name":"Image","description":"","type":"image"}]}