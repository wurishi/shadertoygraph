{"ver":"0.1","info":{"id":"mdf3DS","date":"1666713004","viewed":111,"name":"Artober - Sparkling ","username":"Flopine","description":"Day 22 of artober challenge! All the ideas I had for today failed but I still have to produce something :D Which can be a good exercise : I know it is by far not my best piece but at least I made something XD","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["2d","animation","truchet","pattern","multiscale"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings, FabriceNeyret and Blackle for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n\n#define PI acos(-1.)\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\n#define circle(u,s) (length(u)-s)\n#define AAstep(thre, val) smoothstep(-.7,.7,(val-thre)/min(0.03,fwidth(val-thre)))\n#define noise(u) textureLod(iChannel0, u, 0.).x\n\nfloat tile1 (vec2 uv)\n{\n    uv = fract(uv)-.5;\n    vec2 uu = uv;\n    \n    float s = (uv.x > -uv.y) ? 1. : -1.;\n    uv -= .5*s;\n    float d = AAstep( 0.15, abs(circle(uv,0.5)) );\n    \n    uv = uu;\n    uv = abs(uv) - .5;\n    d *= AAstep( 0.025, abs(circle(uv,0.125)) );\n    \n    uv = uu;\n    uv.y = abs(uv.y)-.5;\n    d += AAstep( circle(uv,0.1), 0.001 );\n    \n    uv = uu;\n    uv.x = abs(uv.x)-.5;\n    d += AAstep( circle(uv,0.1), 0.001 );\n    \n    return d;\n}\n\nfloat tile2 (vec2 uv)\n{\n    uv =  mod(uv, 0.5)-0.25;\n    vec2 uu = uv;\n    \n    float s = (uv.x > -uv.y) ? 1. : -1.;\n    uv -= .25*s;\n    float d = 1.-AAstep( 0.1, abs(circle(uv,0.25)) );\n    \n    uv = uu;\n    uv = abs(uv)-.25;\n    d += AAstep( circle(uv,0.1), 0.001 );\n    \n    return d;\n}\n\nfloat tile3 (vec2 uv)\n{\n    vec2 uu = uv;\n    uv =  mod(uv, 0.25)-0.125;\n    \n    float s = (uv.x > -uv.y) ? 1. : -1.;\n    uv -= .125*s;\n    float d = AAstep( 0.025, abs(circle(uv,0.125)) );\n    \n    return d;\n}\n\nfloat truchet (vec2 p, float gradient, vec2 id)\n{\n    if (noise(id*0.18+iTime*0.001)<.5) p.x *= -1.;\n    if (gradient <= 0.1) return tile1(p);\n    else if (gradient > 0.1 && gradient <= 0.6) return tile2(p); \n    else if (gradient > 0.6 && gradient <= 1.) return tile3(p);\n}\n\n// found in iq's shader\n// https://www.shadertoy.com/view/7tSXzt\n// signed distance to a n-star polygon with external angle en\nfloat sdRegularPolygon(in vec2 p, in float r, in int n )\n{\n    // these 4 lines can be precomputed for a given shape\n    float an = PI/float(n);\n    vec2  acs = vec2(cos(an),sin(an));\n\n    // reduce to first sector\n    float bn = mod(atan(p.x,p.y),2.0*an) - an;\n    p = length(p)*vec2(cos(bn),abs(sin(bn)));\n\n    // line sdf\n    p -= r*acs;\n    p.y += clamp( -p.y, 0.0, r*acs.y);\n    return length(p)*sign(p.x);\n}\n\nfloat mask (vec2 uv)\n{\n    uv *= rot(iTime);\n    float d = cos( sdRegularPolygon(uv,4., 3) - iTime*3.);\n    return d*0.7;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    uv *= 5.;\n    vec2 id = floor(uv);\n    float g = clamp(mask(id+.5), 0., 1.);\n    \n    vec3 col = mix(vec3(0.99, 0.99, 0.), vec3(.25, 0.9, 0.99), truchet(uv, g, id) );\n    \n    fragColor = vec4(sqrt(col), 1.0);\n}","name":"Image","description":"","type":"image"}]}