{"ver":"0.1","info":{"id":"4lSSDW","date":"1443509674","viewed":2308,"name":"Sands","username":"eddietree","description":"test","likes":20,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// a study on raymarching, soft-shadows, ao, etc\n// borrowed heavy from others, esp @cabbibo and @iquilezles and more\n// by @eddietree\n\nconst float MAX_TRACE_DISTANCE = 10.0;\nconst float INTERSECTION_PRECISION = 0.01;\nconst int NUM_OF_TRACE_STEPS = 70;\n\n\nvec3 projOnPlane( vec3 pos, vec3 planePt , vec3 normal){\n    \n    return pos - dot(pos - planePt, normal) * normal;\n}\n\n// Taken from https://www.shadertoy.com/view/4ts3z2\nfloat tri(in float x){return abs(fract(x)-.5);}\nvec3 tri3(in vec3 p){return vec3( tri(p.z+tri(p.y*1.)), tri(p.z+tri(p.x*1.)), tri(p.y+tri(p.x*1.)));}\n\nfloat triNoise3D(vec3 p, float spd)\n{\n    float z=10.4;\n\tfloat rz = 0.;\n    vec3 bp = p;\n\tfor (float i=0.; i<=3.; i++ )\n\t{\n        vec3 dg = tri3(bp*2.);\n        p += (dg+iTime*.1*spd);\n\n        bp *= 1.8;\n\t\tz *= 1.5;\n\t\tp *= 1.2;\n        //p.xz*= m2;\n        \n        rz+= (tri(p.z+tri(p.x+tri(p.y))))/z;\n        bp += 0.14;\n\t}\n\treturn rz;\n}\n\nvec3 hsv(float h, float s, float v)\n{\n  return mix( vec3( 1.0 ), clamp( ( abs( fract(\n    h + vec3( 3.0, 2.0, 1.0 ) / 3.0 ) * 6.0 - 3.0 ) - 1.0 ), 0.0, 1.0 ), s ) * v;\n}\n\nvoid buildBasis( in vec3 dir , in vec3 up , out vec3 x , out vec3 y , out vec3 z ){\n    \n\n //vec3( 0. , 1. , 0. );\n  //vec3  upVector = normalize( centerOfCircle );// vec3( 0. , 1. , 0. );\n  float upVectorProj = dot( up , dir );\n  vec3  upVectorPara = upVectorProj * dir;\n  vec3  upVectorPerp = up - upVectorPara;\n\n  vec3 basisX = normalize( upVectorPerp );\n  vec3 basisY = cross( dir , basisX );\n    \n    \n  x = basisX;\n  y = basisY;\n  z = dir;\n}\n\n\nfloat udBox( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\n\n\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat distSphere(vec3 p, float radius) {\n    return length(p) - radius;\n}\n\n\nfloat sdPlane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xy)-t.x,p.z);\n  return length(q)-t.y;\n}\n\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n\nfloat sdTriPrismMod( vec3 p, vec2 h, vec3 c )\n{\n    vec3 q = mod(p,c)-0.5*c;\n    return sdTriPrism( q, h );\n}\n\nfloat sdCone( vec3 p, vec2 c )\n{\n    // c must be normalized\n    float q = length(p.xy);\n    return dot(c,vec2(q,p.z));\n}\n\n\n//----\n// Camera Stuffs\n//----\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in float mouseX )\n{\n    float an = 0.3 + 10.0*mouseX + iTime*0.3;\n\tcamPos = vec3(5.0*sin(an),1.5,5.0*cos(an));\n    camTar = vec3(0.0,0.5,0.0);\n}\n\n// ROTATION FUNCTIONS TAKEN FROM\n//https://www.shadertoy.com/view/XsSSzG\nmat3 xrotate(float t) {\n\treturn mat3(1.0, 0.0, 0.0,\n                0.0, cos(t), -sin(t),\n                0.0, sin(t), cos(t));\n}\n\nmat3 yrotate(float t) {\n\treturn mat3(cos(t), 0.0, -sin(t),\n                0.0, 1.0, 0.0,\n                sin(t), 0.0, cos(t));\n}\n\nmat3 zrotate(float t) {\n    return mat3(cos(t), -sin(t), 0.0,\n                sin(t), cos(t), 0.0,\n                0.0, 0.0, 1.0);\n}\n\n\nfloat opRep( vec3 p, vec3 c )\n{\n    vec3 q = mod(p,c)-0.5*c;\n    return sdTorus( q, vec2(1.0,0.1) );\n}\n\nfloat smin( float a, float b, float k )\n{\n    float res = exp( -k*a ) + exp( -k*b );\n    return -log( res )/k;\n}\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d1,d2);\n}\n\nfloat opU( float d1, float d2 )\n{\n    return min(d1,d2);\n}\n\nmat3 fullRotate( vec3 r ){\n \n   return xrotate( r.x ) * yrotate( r.y ) * zrotate( r.z );\n    \n}\n\nfloat rotatedBox( vec3 p , vec3 rot , vec3 size , float rad ){\n    \n    vec3 q = fullRotate( rot ) * p;\n    return udRoundBox( q , size , rad );\n    \n    \n}\n\n\n\n// checks to see which intersection is closer\n// and makes the y of the vec2 be the proper id\nvec2 opU( vec2 d1, vec2 d2 ){\n\treturn (d1.x<d2.x) ? d1 : d2; \n}\n\nfloat opI( float d1, float d2 )\n{\n    return max(d1,d2);\n}\n\n//--------------------------------\n// Modelling \n//--------------------------------\nvec2 map( vec3 pos ){  \n   \n    // using super thin cube as plane\n    vec3 size = vec3( 5.0, .1 , 5.0 );\n   // vec3 rot = vec3( iTime * .1 , iTime * .4 , -iTime * .3 );\n    vec3 rot = vec3( 0.,0.,0. );\n    \n   \tvec2 res = vec2( 1.0, 1.0 );\n    \n    float sphere = distSphere(pos, 0.25);\n    float box = rotatedBox( pos - vec3(0.0,-0.5,0.0), rot , size , .001 );\n   \n    float t1 = box;\n    \n    for ( int i = 0; i < 12; i+=1 )\n    {\n        float i_f = float(i);\n\n        vec3 pos0 = xrotate( iTime*0.2 + sin(i_f)*50.0 ) * pos;\n\t\t//pos0 = pos0 * zrotate( iTime + i_f );                                   \n        pos0 = pos0 + vec3(0.0 + cos(iTime*0.1+i_f*0.3)*0.5,-0.1 + sin(iTime + i_f * 50.0),2.2 + sin(iTime*0.3 + i_f));\n        float prism = sdTriPrism( pos0, vec2(0.2 + cos(iTime + i_f*0.1)*0.1,0.7) );\n        //float prism = sdCone( pos0, vec2(0.3, 0.25) );\n\n        t1 = smin( prism, t1, 6.0 );\n        //t1 = min( prism, t1 );\n    }\n    //t1 = box;\n    \n    t1  = opS(sdTorus( pos * yrotate( 3.14159*0.5), vec2(2.36 + sin(iTime*0.1)*0.5,0.2 + cos(iTime*0.5)*0.2) ), t1 );\n    t1  = smin(sdTorus( (pos+vec3(0.0,-0.6,0.0)) * yrotate( 3.14159*0.5), vec2(2.5,0.02 + cos(iTime*5.0 + pos.y*2.0)*0.01) ), t1, 6.0 );\n    t1  = smin(sdTorus( (pos+ vec3( 0.0,-0.6,sin(iTime*0.3))) * yrotate( 3.14159*0.5), vec2(1.75,0.05 + sin(pos.y*3.0 + iTime)*0.2) ), t1, 10.0 );\n    t1  = smin(sdTorus( pos * yrotate( 3.14159*0.5), vec2(1.5,0.1) ), t1, 5.0 );\n    \n    \n   \n    res.x = t1;\n    \n   \t\n    \n\n   \treturn res;\n    \n}\n\n\nfloat shadow( in vec3 ro, in vec3 rd )\n{\n    const float k = 2.0;\n    \n    const int maxSteps = 50;\n    float t = 0.0;\n    float res = 1.0;\n    \n    for(int i = 0; i < maxSteps; ++i) {\n        \n        float d = map(ro + rd*t).x;\n            \n        if(d < INTERSECTION_PRECISION) {\n            \n            return 0.0;\n        }\n        \n        res = min( res, k*d/t );\n        t += d;\n    }\n    \n    return res;\n}\n\n\nfloat ambientOcclusion( in vec3 ro, in vec3 rd )\n{\n    const int maxSteps = 7;\n    const float stepSize = 0.05;\n    \n    float t = 0.0;\n    float res = 0.0;\n    \n    // starting d\n    float d0 = map(ro).x;\n    \n    for(int i = 0; i < maxSteps; ++i) {\n        \n        float d = map(ro + rd*t).x;\n\t\tfloat diff = max(d-d0, 0.0);\n        \n        res += diff;\n        \n        t += stepSize;\n    }\n    \n    return res;\n}\n\n// Calculates the normal by taking a very small distance,\n// remapping the function, and getting normal for that\nvec3 calcNormal( in vec3 pos ){\n    \n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nbool renderRayMarch(vec3 rayOrigin, vec3 rayDirection, out vec3 color ) {\n    const int maxSteps = NUM_OF_TRACE_STEPS;\n        \n    float t = 0.0;\n    \n    vec3 lightDir = normalize(vec3(1.0,0.4,0.0));\n    \n    for(int i = 0; i < maxSteps; ++i) {\n        \n        vec3 currPos = rayOrigin + rayDirection * t;\n        float d = map(currPos).x;\n        if(d < INTERSECTION_PRECISION) {\n            \n            vec3 normal = calcNormal( currPos ) ;;\n            float shadowVal = shadow( currPos - rayDirection* 0.01, lightDir  );\n            float ao = ambientOcclusion( currPos - normal*0.01, normal );\n            \n            float ndotl = abs(dot( -rayDirection, normal ));\n            float rim = pow(1.0-ndotl, 1.5);\n            //color = hsv( rim*5.0+0.1, 2.0, 1.0);\n            //color = vec3(rim);\n            \n            \n            //color = texture (iChannel0, normal).xyz;\n            \n            color = vec3( 1.0);\n            //color = vec3( step( 0.5, sin(currPos.y*20.0 )) );\n            color = mix( vec3(0.7,0.6,0.5), color, rim*0.3 );\n            //color = normal;\n            color *= vec3(mix(0.2,1.0,shadowVal));\n            color *= vec3(mix(0.2,1.0,ao));\n            \n            \n            return true;\n        }\n        \n        \n        t += d;\n    }\n    return false;\n        \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n    \n    // camera movement\n    vec3 ro, ta;\n    doCamera( ro, ta, iTime, m.x );\n\n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  // 0.0 is the camera roll\n    \n\t// create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy,2.0) ); // 2.0 is the lens length\n    \n    // calc color\n    vec3 col = vec3(0.7,0.6,0.5) * 0.7;\n    //vec3 col = texture (iChannel0, rd).xyz;\n    renderRayMarch( ro, rd, col );\n    \n    fragColor = vec4( col , 1. );\n    \n}","name":"","description":"","type":"image"}]}