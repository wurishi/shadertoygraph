{"ver":"0.1","info":{"id":"4cSBzD","date":"1724694787","viewed":25,"name":"Floating Blobs","username":"Gopherknee","description":"First attempt at 3d rendering, 3d mapping, and ray marching. Feel free to give suggestions to optimise/improve performance.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["blob","lamp","wax"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Constants for ray marching and scene setup\nconst int MAX_STEPS = 100;\nconst float MAX_DIST = 100.0, SURF_DIST = 0.001, SPAWN_RADIUS = 3.0;\nconst int WAX_BLOB_COUNT = 18;\n\n// Convert HSV to RGB colour space\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0/3.0, 1.0/3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n// Hash function for noise generation\nfloat hash(vec2 p) { return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453); }\n\n// 2D Value noise\nfloat noise(vec2 p) {\n    vec2 i = floor(p), f = fract(p);\n    return mix(mix(hash(i), hash(i + vec2(1.0,0.0)), f.x),\n               mix(hash(i + vec2(0.0,1.0)), hash(i + vec2(1.0,1.0)), f.x), f.y);\n}\n\n// Smooth noise function (combination of multiple noise octaves)\nfloat smoothNoise(vec2 p) {\n    return 0.53*noise(p) + 0.27*noise(p*2.0) + 0.13*noise(p*4.0) + 0.07*noise(p*8.0);\n}\n\n// Smooth minimum function for soft blending\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5*(b-a)/k, 0.0, 1.0);\n    return mix(b, a, h) - k*h*(1.0-h);\n}\n\n// Signed distance function for a sphere\nfloat sdSphere(vec3 p, float s) { return length(p) - s; }\n\n// Scene description - defines the shape and position of blobs\nfloat map(vec3 p) {\n    float d = MAX_DIST;\n    float ar = iResolution.x / iResolution.y; // Aspect ratio\n    \n    for (int i = 0; i < WAX_BLOB_COUNT; i++) {\n        float fi = float(i), t = iTime*0.3 + fi*1.1;\n        // Calculate blob center with some animation\n        vec3 center = vec3(\n            sin(t*0.5) * SPAWN_RADIUS*0.5,\n            sin(t*0.7 + fi) * SPAWN_RADIUS*0.5,\n            cos(t*0.6) * SPAWN_RADIUS*0.5\n        ) + vec3(sin(iTime*0.2), cos(iTime*0.15), sin(iTime*0.1))*0.5;\n        \n        // Constrain blobs to visible screen\n        center = clamp(center, vec3(-ar,-1.0,-1.0), vec3(ar,1.0,1.));\n        \n        float size = 0.2 + 0.1*sin(t + fi*2.0); // Animate blob size\n        d = smin(d, sdSphere(p - center, size), 0.2); // Soft-blend blobs\n    }\n    return d;\n}\n\n// Calculate normal at a point\nvec3 getNormal(vec3 p) {\n    vec2 e = vec2(0.01, 0);\n    return normalize(vec3(\n        map(p + e.xyy) - map(p - e.xyy),\n        map(p + e.yxy) - map(p - e.yxy),\n        map(p + e.yyx) - map(p - e.yyx)\n    ));\n}\n\n// Ray marching function\nfloat rayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.;\n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd * dO;\n        float dS = map(p);\n        dO += dS;\n        if (dO > MAX_DIST || abs(dS) < SURF_DIST) break;\n    }\n    return dO;\n}\n\n// Main rendering function\nvec3 render(vec3 ro, vec3 rd) {\n    float d = rayMarch(ro, rd);\n    if (d > MAX_DIST) return vec3(smoothNoise((rd.xy*0.5+0.5)*5.0 + iTime*0.1)*0.2); // Background\n    \n    vec3 p = ro + rd * d;\n    vec3 n = getNormal(p);\n    \n    // Rainbow gradient colour\n    float hue = fract(length(p)*0.1 - iTime*0.1);\n    vec3 col = hsv2rgb(vec3(hue, 0.8, 1.0));\n    \n    // Simple lighting\n    col *= (0.2 + 0.8*max(dot(n, normalize(vec3(1,2,-1))), 0.0));\n    \n    // Fresnel effect for waxy look\n    col += pow(1. - max(dot(n, -rd), 0.0), 3.0) * vec3(0.3, 0.2, 0.1);\n    \n    // Fog effect\n    return mix(col, vec3(0), 1.0 - exp(-0.1*d));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - .5*iResolution.xy) / iResolution.y;\n    vec3 ro = vec3(0, 0, -3); // Ray origin (camera position)\n    vec3 rd = normalize(vec3(uv, 1)); // Ray direction\n    fragColor = vec4(render(ro, rd), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}