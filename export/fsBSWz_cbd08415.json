{"ver":"0.1","info":{"id":"fsBSWz","date":"1619977326","viewed":100,"name":"Copper Light Dance","username":"jamque","description":"A first attempt to make a light and texture. I think it looks like a planar texture.  \nI know there are some errors calculation. Please teach me ^_^","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Come from : https://www.shadertoy.com/view/sdjXzm\n// Infinite cubes rotaing, trying to make a plannar texture and light\n// There are some errors....if anyone wants to teach me, welcome ^_^\n// Thx to IQ, Flopine, Evvvvil. My Teachers\n// Greetings: Fubu, JosSs, Napalm, duhow :3, Bran\n\nmat2 rot (float a) { return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nvec3 col = vec3 (0.4);\nfloat shade = 0., st= 128., pres=0.01; \nbool hit = false;\n#define PI acos(-1)\nint id=0;\nvec3 llum_pos = vec3(0.0);\n\nfloat box (vec3 p, vec3 size)\n{\n\tvec3 q = abs(p) - size;\n\treturn length(max(q,0.0));\n}\n\nfloat sph (vec3 p, float r)\n{\n\treturn length(p)-r;\n}\n\nfloat sphpos (vec3 p, float r, vec3 pos)\n{\n\treturn length(p-pos)-r;\n}\n\n\nfloat plane (vec3 p, float high)\n{\n\treturn p.y + high;\n}\n\nfloat SDF(vec3 p){\n    llum_pos = vec3(3.*cos(iTime),2.+3.*sin(0.2*iTime),5.*sin(iTime));\n\tvec3 po = p;\n\tfloat r = 1.0;\n\tr = min(r,plane(p, 1.));\n\tif (r < pres){ id ++;}\n\n\tp.xz = mod(p.xz,3.1)-1.1;\n\t\n\tp.xy*=rot(iTime);\n\tp.xz*=rot(iTime);\n\tr = min(r,box(p,vec3(0.3)));\n\tp.y += 0.3;\n\tr = min(r,sph(p,0.2));\n\tp.y -= 0.6;\n\tr = min(r,sph(p,0.2));\n\tp.y += 0.3;p.x += 0.3;\n\tr = min(r,sph(p,0.2));\n\tp.x -= 0.6;\n\tr = min(r,sph(p,0.2));\n\tif (r < pres){ id ++;}\n\t\n\tr = min(r,sphpos(po,0.2,llum_pos));\n\treturn r;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n\tuv -= 0.5;\n\tuv /= vec2(iResolution.y / iResolution.x, 1);\n\n\tvec3 ro;\n\tro += vec3(0.,3.,10.);\n\tro += vec3(4.5*cos(iTime),sin(0.5*iTime),-3.+8.*sin(iTime));\n\tvec3 rp = ro;\n\t//Camera\n\tvec3 pTarget = vec3(0.,0.,0.);\n\tvec3 Cfrontal = normalize(pTarget-ro);\n\tvec3 Cleft = normalize (cross(Cfrontal,vec3(0.,1.,0.)));\n\tvec3 Cup =normalize(cross(Cleft,Cfrontal));\n\tvec3 rd = normalize(Cfrontal+Cleft*uv.x+Cup*uv.y);\n\t\n\t\n\tfloat r = 0.0;\n\tfor (float i=0.; i<st;++i)\n\t{\n\t   r = SDF(rp);\n\t  if (r < pres)\n\t  {\n\t\thit =true;\n\t\tshade=i/st;\n\t\t break;\n\t  }\n\t  rp += rd*r;\n\t}\t\n\t//light\n\tvec3 llum = llum_pos;\n\tvec3 dirlight = normalize(llum-rp);\n\tfloat difuse = max(dot(rp,(dirlight)),0.);\n\n\tif (hit){\n\t\tvec3 tex=vec3(1.);\n\t\tif (id == 1) { // forma\n\t\t\ttex = (vec3(1.,0.5,0.) + 2.*difuse)* texture (iChannel0,0.1*rp.xy).rgb;\n\t\t}\n\t\tif (id == 2) { // plano\n\t\t\ttex = (vec3(0.1,0.1,0.7) + 1.*difuse) * texture (iChannel1,0.1*rp.xz).rgb;\n\t\t}\n\t\tcol = tex * vec3(sqrt(1.0-shade));\n\t}\n\tfragColor = vec4(col,1.0);\n    \n}","name":"Image","description":"","type":"image"}]}