{"ver":"0.1","info":{"id":"7stcD8","date":"1653424153","viewed":70,"name":"Closed N-Points Cubic Spline","username":"Envy24","description":"BufferA - drawing spline\nBufferB - drawing control points\nBufferC - drawind dashed convex hull\nImage - mixing and coloroing\n\nFour passes used for better readability of code.","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["spline","curve","cubic","interpolation","uniform","closed","hermit"],"hasliked":0,"parentid":"sdcyzM","parentname":"Closed 4-Points Cubic Spline"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 O, in vec2 SC )\n{\n    vec4 spline      = TEXF0(SC);\n    vec4 knot        = TEXF1(SC);\n    vec4 convex_hull = TEXF2(SC);\n    \n    float min = MIN3(spline.r, knot.r, convex_hull.r);\n    \n    O = \n        min == 1.0 ?\n            vec4(1) :                            // Background color\n            min == spline.r ?\n                vec4(0, spline.r, spline.r, 1) : // Spline color\n                min == knot.r ?\n                    vec4(0, knot.r, 0, 1) :      // Knot color\n                    vec4(convex_hull);           // Convex hull  color\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define R                           iResolution\n#define TO_CENTERED_NDC(SC)       ( ((SC)+(SC)-R.xy) / R.y )         // in range x=[-AR; AR], y=[-1.0; 1.0]\n#define INITIALLY_FAR               9e30\n#define TEXF0(SC)                 ( texelFetch(iChannel0, ivec2(SC), 0) )\n#define TEXF1(SC)                 ( texelFetch(iChannel1, ivec2(SC), 0) )\n#define TEXF2(SC)                 ( texelFetch(iChannel2, ivec2(SC), 0) )\n#define MIN3(a, b, c)             ( min(min((a), (b)), (c)) )\n#define NMX                       ( iMouse.x / R.x )                 // in range [0.0; 1.0]\n#define NMY                       ( iMouse.y / R.y )                 // in range [0.0; 1.0]\n#define NZMX                      ( (iMouse.x+iMouse.x-R.x) / R.x )  // in range [-1.0; 1.0]\n#define NZMY                      ( (iMouse.y+iMouse.y-R.y) / R.y )  // in range [-1.0; 1.0]\n#define MX                        ( iMouse.x )                       // in range [0.0; iMouse.x]\n#define MY                        ( iMouse.y )                       // in range [0.0; iMouse.y]\n#define LMB_IS_HOLD               ( iMouse.z > 0.0 )\n\n#define RANDOM\n\nconst int num_of_ctrls = 8;     \nvec2 derivatives[num_of_ctrls]; // Derivatives for C2 connected clamped cubic spline.\nvec2 ctrls[num_of_ctrls];\n/**\nvec2 ctrls[num_of_ctrls] = vec2[num_of_ctrls](\n    vec2( -1.0,  0.0),\n    vec2( -1.0,  0.5),\n    vec2(  0.0,  1.0),\n    vec2(  1.0,  0.0),\n    vec2(  0.0, -1.0)\n);\n/**/\nconst int matrix_size = num_of_ctrls * num_of_ctrls;\nconst int extended_size = 2 * matrix_size;\n\nfloat circleSQSDF(\n    in vec2 S,           // sample coordinates\n    in vec2 C,           // circle center\n    in float r,          // circle radius\n    in float smoothness) // AA parameter\n{\n    // Sample coordinates relative to circle center.\n    float _x = S.x - C.x; float _y = S.y - C.y;\n    \n    // Signed distance of areas (squared distancies).\n    float sds = _x * _x + _y *_y - r * r;\n    \n    float ss = smoothness * smoothness;\n    \n    // Smoothstep interpolation.\n    return smoothstep(-ss, ss, sds);\n    //return smoothstep(-ss, ss, sds * sds); // outline\n}\n\n/* \n    Returns random vec2([-1.0; 1.0], [-1.0; 1.0]).\n*/\nvec2 vector2HashUI32(\n    const uint x,\n    const uint y)\n{\n    // Pick some enthropy source values.\n    // Try different values.\n    const uint entropy0 = 123u;\n    const uint entropy1 = 456u;\n    const uint entropy2 = 789u;\n\n    // Use linear offset method to mix coordinates.\n    uint value0 = y * entropy2 + x;\n    uint value1 = x * entropy2 + y;\n\n    // Calculate hash.\n\tvalue0 += entropy1; value0 *= 445593459u; value0 ^= entropy0;\n    value1 += entropy1; value1 *= 445593459u; value1 ^= entropy0;\n    \n    // 2.0f / 4294967295.0f = 4.6566128730773926e-10\n\n    return \n        vec2(\n            float(value0 * value0 * value0) * 4.6566128730773926e-10f - 1.0f,\n            float(value1 * value1 * value1) * 4.6566128730773926e-10f - 1.0f);\n}\n\n//\nvoid randomize_ctrls(float time)\n{\n    uint T = uint(time);\n    for (int k = 0; k < num_of_ctrls; ++k)\n    {\n        ctrls[k] = vector2HashUI32(T + uint(k), 2u * T + uint(k * 2));\n    }\n}\n\nvoid randomize_ctrls2(float time)\n{\n    time *= 0.5;\n    float t = fract(time);\n    uint T = uint(time);\n\n    for (int k = 0; k < num_of_ctrls; ++k)\n    {\n        uint x = T + uint(k);\n        uint y = 2u * T + uint(k * 2);\n        vec2 c = vector2HashUI32(x, y);\n        vec2 n = vector2HashUI32(x + 1u, y + 2u);\n    \n        ctrls[k] = c * (1. - t) + n * t;\n    }\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/* if return_value >= N OR return_value == -1, then matrix is probably singular. */\nint to_upper_triangle(\n    inout float[extended_size] M,\n    in int N) // sqrt(extended_size / 2)\n{\n    int numOfSwaps = 0;\n    int rowSize = 2 * N;\n\n    for (int sub = 0; sub < N - 1;)\n    {\n        float diag = M[sub * rowSize + sub];\n\n        if (diag == 0.0)\n        {\n            int r = sub + 1;\n            while (M[r * rowSize + sub] == 0.0 && r < N) { ++r; }\n\n            if (r == N) { return -1; } // probably singular matrix\n\n            for (int c = 0; c < rowSize; ++c)\n            {\n                float t = M[r * rowSize + c];\n                M[r * rowSize + c] = M[sub * rowSize + c];\n                M[sub * rowSize + c] = t;\n            }\n\n            diag = M[sub * rowSize + sub];\n\n            if (numOfSwaps >= N) { return numOfSwaps; }\n\n            ++numOfSwaps;\n\n            continue;\n        }\n\n        for (int r = sub + 1; r < N; ++r)\n        {\n            if (M[r * rowSize + sub] == 0.0)\n            {\n                continue;\n            }\n\n            float ratio = M[r * rowSize + sub] / diag;\n\n            for (int c = sub; c < rowSize; ++c)\n            {\n                M[r * rowSize + c] -= M[sub * rowSize + c] * ratio;\n            }\n        }\n        ++sub;\n    }\n\n    return numOfSwaps;\n}\n\n/* if return_value >= N OR return_value == -1, then matrix is probably singular. */\nint to_lower_triangle(\n    inout float[extended_size] M,\n    in int N) // sqrt(extended_size / 2)\n{\n    int numOfSwaps = 0;\n    int Ndec = N - 1;\n    int rowSize = 2 * N;\n\n    for (int sub = 0; sub < Ndec;)\n    {\n        int mirror = (Ndec - sub);\n        float diag = M[mirror * rowSize + mirror];\n\n        if (diag == 0.0)\n        {\n            int r = mirror - 1;\n\n            while (M[r * rowSize + mirror] == 0.0 && r < N) { ++r; }\n\n            if (r == N) { return -1; } // probably singular matrix\n\n            for (int c = 0; c < N; ++c)\n            {\n                float t = M[r * rowSize + c];\n                M[r * rowSize + c] = M[mirror * rowSize + c];\n                M[mirror * rowSize + c] = t;\n            }\n\n            diag = M[mirror * N + mirror];\n\n            if (numOfSwaps >= N) { return numOfSwaps; }\n\n            ++numOfSwaps;\n\n            continue;\n        }\n\n        for (int r = mirror - 1; r >= 0; --r)\n        {\n            if (M[r * rowSize + mirror] == 0.0)\n            {\n                continue;\n            }\n\n            float ratio = M[r * rowSize + mirror] / diag;\n\n            for (int c = rowSize - 1; c > mirror - 1; --c)\n            {\n                M[r * rowSize + c] -= M[mirror * rowSize + c] * ratio;\n            }\n        }\n        ++sub;\n    }\n\n    return numOfSwaps;\n}\n\nvoid Jordan_Gauss_inverse(\n    inout float[extended_size] M,\n    in int N) // sqrt(extended_size / 2)\n{\n    to_upper_triangle(M, N);\n    to_lower_triangle(M, N);\n\n    int rowSize = 2 * N;\n\n    for (int r = 0; r < N; ++r)\n    {\n        float invDiag = 1.0 / M[r * rowSize + r];\n\n        for (int c = 0; c < N; ++c)\n        {\n            M[N + r * rowSize + c] *= invDiag;\n        }\n        M[r * rowSize + r] *= invDiag;\n    }\n}\n\nvoid read_right_matrix(\n    in float[extended_size] M,\n    inout float[matrix_size] I,\n    in int N) // sqrt(matrix_size)\n{\n    int rowSize = 2 * N;\n    int wOffset = 0;\n\n    for (int r = 0; r < N; ++r)\n    {\n        for (int c = 0; c < N; ++c)\n        {\n            I[wOffset++] = M[r * rowSize + N + c];\n        }\n    }\n}\n\nvoid write_right_matrix(\n    inout float[extended_size] M,\n    in float[matrix_size] I,\n    in int N) // sqrt(matrix_size)\n{\n    int rowSize = 2 * N;\n    int wOffset = 0;\n    for (int r = 0; r < N; ++r)\n    {\n        for (int c = 0; c < N; ++c)\n        {\n            M[r * rowSize + N + c] = I[wOffset++];\n        }\n    }\n}\n\nvoid read_left_matrix(\n    in float[extended_size] M,\n    inout float[matrix_size] O,\n    in int N) // sqrt(matrix_size)\n{\n    int rowSize = 2 * N;\n    int wOffset = 0;\n\n    for (int r = 0; r < N; ++r)\n    {\n        for (int c = 0; c < N; ++c)\n        {\n            O[wOffset++] = M[r * rowSize + c];\n        }\n    }\n}\n\nvoid write_left_matrix(\n    inout float[extended_size] M,\n    in float[matrix_size] O,\n    in int N) // sqrt(matrix_size)\n{\n    int rowSize = 2 * N;\n    int wOffset = 0;          \n\n    for (int r = 0; r < N; ++r)\n    {\n        for (int c = 0; c < N; ++c)\n        {\n            M[r * rowSize + c] = O[wOffset++];\n        }\n    }\n}\n\nvoid identity(\n    inout float[matrix_size] I,\n    in int N) // sqrt(matrix_size)\n{\n    for (int r = 0; r < N; ++r)\n    {\n        for (int c = 0; c < N; ++c)\n        {\n            I[r * N + c] = float(r == c);\n        }\n    }\n}\n\nvoid system_matrix(inout float[matrix_size] M)\n{\n    // Fill first line with sequence: 1, 4, 1, 0, 0, ...\n    M[0] = 1.; M[1] = 4.; M[2] = 1.;\n    for (int i = 3; i < num_of_ctrls; ++i) { M[i] = 0.; }\n    \n    for (int r = 1; r < num_of_ctrls; ++r)\n    {\n        for (int c = 0; c < num_of_ctrls; ++c)\n        {\n            int w_offset = r * num_of_ctrls + (c + 1) % num_of_ctrls;\n            int r_offset = (r - 1) * num_of_ctrls + c;\n            M[w_offset] = M[r_offset];\n        }\n    }\n}\n\nvoid calculateDerivatives(\n    inout vec2[num_of_ctrls] derivatives,\n    in vec2[num_of_ctrls] ctrls)\n{\n    /** Example of extended matrix for (num_of_ctrl == 4).\n    float M[extended_size] = float[extended_size](\n        1., 4., 1., 0.,    1., 0., 0., 0.,\n        0., 1., 4., 1.,    0., 1., 0., 0.,\n        1., 0., 1., 4.,    0., 0., 1., 0.,\n        4., 1., 0., 1.,    0., 0., 0., 1.\n    );\n    /**/\n    float M[extended_size];\n    float INV[matrix_size];\n    \n    system_matrix(INV);\n    write_left_matrix(M, INV, num_of_ctrls);\n    \n    identity(INV, num_of_ctrls);\n    write_right_matrix(M, INV, num_of_ctrls);\n    \n    /* Find inverse matrix */\n    Jordan_Gauss_inverse(M, num_of_ctrls);\n    read_right_matrix(M, INV, num_of_ctrls);\n\n    for (int i = 0; i < num_of_ctrls; ++i)\n    {\n        for (int k = 0; k < num_of_ctrls; ++k)\n        {\n            derivatives[i] += INV[i * num_of_ctrls + k] * 3.0 * (ctrls[(k + 2) % num_of_ctrls] - ctrls[k]);\n        }\n    }\n}\n\nvec2 uniformHermiteCubicSpline(\n    in vec2[2] ctrls,\n    in vec2[2] derivatives,\n    float t)\n{\n    vec2 a = 2.0 * (ctrls[0] - ctrls[1]) + derivatives[0] + derivatives[1];\n    vec2 b = 3.0 * (ctrls[1] - ctrls[0]) - 2.0 * derivatives[0] - derivatives[1];\n    vec2 c = derivatives[0];\n    vec2 d = ctrls[0];  \n\n    return d + t * (c + t * (b + a * t));\n}\n\nvec2 find_closest_spline_point_to_pixel(\n    in vec2[num_of_ctrls] ctrls,\n    in vec2 NDC)\n{\n    vec2 closestP = vec2(0);\n    float minSqDist = INITIALLY_FAR;\n    \n    float dt = 0.01;\n    \n    int num_of_segments = num_of_ctrls; // 2 knots per segment\n    \n    calculateDerivatives(derivatives, ctrls);\n    \n    for (int s = 0; s < num_of_segments; ++s)\n    {\n        vec2 _ctrls[2] = vec2[2](\n                ctrls[s % num_of_ctrls],\n                ctrls[(s + 1) % num_of_ctrls]\n            );\n        vec2 _derivatives[2] = vec2[2](\n            derivatives[s % num_of_ctrls],\n            derivatives[(s + 1) % num_of_ctrls]\n        );\n        \n        for (float t = 0.; t <= 1.; t += dt)\n        {\n            vec2 P = uniformHermiteCubicSpline(_ctrls, _derivatives, t);\n\n            vec2 diff = P - NDC;\n            float sqDist = dot(diff, diff);\n\n            minSqDist = min(minSqDist, sqDist);\n\n            closestP = \n                minSqDist == sqDist ? \n                    P :\n                    closestP;\n        }\n    }\n    \n    return closestP;\n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    vec2 NDC = TO_CENTERED_NDC(SC);\n\n#ifdef RANDOM\n    //randomize_ctrls(iTime);\n    randomize_ctrls2(iTime);\n#endif\n\n    O = vec4(circleSQSDF(\n        find_closest_spline_point_to_pixel(ctrls, NDC),\n        NDC,\n        0.01,\n        0.011));\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec2 find_closest_control_point_to_pixel(\n    in vec2[num_of_ctrls] ctrls,\n    in vec2 NDC)\n{\n    vec2 closestP = vec2(0);\n    float minSqDist = INITIALLY_FAR;\n\n    for (int k = 0; k < num_of_ctrls; ++k)\n    {\n        vec2 diff = ctrls[k] - NDC;\n        float sqDist = dot(diff, diff);\n       \n        minSqDist = min(minSqDist, sqDist);\n        \n        closestP = \n            minSqDist == sqDist ? \n                ctrls[k] :\n                closestP;\n    }\n    \n    return closestP;\n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    vec2 NDC = TO_CENTERED_NDC(SC);\n\n#ifdef RANDOM\n    //randomize_ctrls(iTime);\n    randomize_ctrls2(iTime);\n#endif\n\n    O = vec4(circleSQSDF(\n        find_closest_control_point_to_pixel(ctrls, NDC),\n        NDC,\n        0.02,\n        0.018));\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"4sXGR8","channel":0}],"code":"vec2 find_closest_convex_hull_point_to_pixel(\n    in vec2[num_of_ctrls] ctrls,\n    in vec2 NDC)\n{\n    vec2 closestP = vec2(0);\n    float minSqDist = INITIALLY_FAR;\n    \n    int num_of_lines = num_of_ctrls; // 2 knots per line\n     \n    for (int l = 0; l < num_of_lines; ++l)\n    {\n        for (float t = 0.; t <= 1.; t += 0.1)\n        {\n            vec2 P = ctrls[l % num_of_ctrls] * (1. - t) + ctrls[(l + 1) % num_of_ctrls] * t;\n\n            vec2 diff = P - NDC;\n            float sqDist = dot(diff, diff);\n\n            minSqDist = min(minSqDist, sqDist);\n\n            closestP = \n                minSqDist == sqDist ? \n                    P :\n                    closestP;\n        }\n    }\n    \n    return closestP;\n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    vec2 NDC = TO_CENTERED_NDC(SC);\n\n#ifdef RANDOM\n    //randomize_ctrls(iTime);\n    randomize_ctrls2(iTime);\n#endif\n\n    O = vec4(circleSQSDF(\n        find_closest_convex_hull_point_to_pixel(ctrls, NDC),\n        NDC,\n        0.008,\n        0.0088));\n}","name":"Buffer C","description":"","type":"buffer"}]}