{"ver":"0.1","info":{"id":"tlc3WH","date":"1576529720","viewed":634,"name":"glow-Airy filter - using cubemap","username":"FabriceNeyret2","description":"cube map version of [url]https://shadertoy.com/view/ttcGWn[/url]\nMouse.y tune intensity/glow.\nbottom: a small and large ultra-bright source.\ntop: integrating the glow due to Airy pattern in the sensor.\nGaussian part separable, 1/d³ part computed low res v","likes":6,"published":3,"flags":32,"usePreview":0,"tags":["glow","airy","gpmipmap","glowairy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rr","filepath":"/media/a//media/previz/cubemap00.png","previewfilepath":"/media/ap//media/previz/cubemap00.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// cube map version of https://shadertoy.com/view/ttcGWn\n// theory: https://shadertoy.com/view/tlc3zM\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O = U.y > R.y/2. ? texelFetch(iChannel0, ivec2(U), 0)\n                     : texture(iChannel1, vec3((2.*U-R)/R.y,1.) );\n\n    if ( U.y-.5 == floor(R.y/2.) ) O = vec4(0,1,0,1);\n    U = mod(U-.5, 32.); O.b += 1./(U.x*U.y);  // 32x32 grid\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define G 1.4\n#define Z 4.\n#define gain      ( length(iMouse.xy) < 20. ? 1. : 20.*iMouse.y/R.y )\n#define gauss(x)    exp(-.5*((x)*(x)) )\n\n#define R          (iResolution.xy)         // buffers resolution\n#define R0         vec2(1024)               // cubemap resolution\n\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dX3Rr","channel":0}],"code":"void mainCubemap( out vec4 O, vec2 U, vec3 rayOri, vec3 rayDir )\n{\n // U = ( .5 + .5* rayDir.xy/rayDir.z*vec2(1,-1)) * R0; // expends face 0 by projection\n    if ( rayDir.z < max(abs(rayDir.y),abs(rayDir.x)) )  return;\n#if 1\n    O = max(2.*texture(iChannel0,U/R + .2*cos(iTime+vec2(0,11)) )-1., 0.);\n // O = texture(iChannel0,U/R0);\n#else\n    U = ( 2.*U - R0 ) / R0.y;\n/*  O = 10. * step( length(U) , .1 ) * vec4( 1, .5, .25, 0);\n    U.x += .7; O += 1e3 * step( length(U) , 2./R0.y ) * vec4( 1, .5, .25, 0);\n*/\n               O =  1e2 * step( length(U) , .1      ) * vec4( 1, .5, .25, 0);\n    U.x += .7; O += 1e3 * step( length(U) , 2./R0.y ) * vec4( 1, .5, .25, 0);\n    U.x += .2; O += 1e2 * step( length(U) , 2./R0.y ) * vec4( 1, .5, .25, 0);\n   \n#endif\n}","name":"Cube A","description":"","type":"cubemap"},{"inputs":[{"id":"4dX3Rr","filepath":"/media/a//media/previz/cubemap00.png","previewfilepath":"/media/ap//media/previz/cubemap00.png","type":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// ---- Separable gaussian convolution at full resolution - part 1\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    //U /= R;\n    O = vec4(0);\n    float w, s = 0.;\n    for (float x = -2.*Z; x <= 2.*Z; x++) \n        s += w = gauss(x/Z/G),\n        O += w * texture(iChannel0, vec3( ( 2.*U -R )/R.y + 2.*vec2(x,0)/R0, 1) );\n     // ref https://shadertoy.com/view/tlc3zM :\n     //     abs(x) < 2. ? gauss(x/1.4) : ( gauss(x/1.4) + 2.7/abs(x*x*x) )/2.\n // O /= 17.; // s;\n}\n","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dX3Rr","filepath":"/media/a//media/previz/cubemap00.png","previewfilepath":"/media/ap//media/previz/cubemap00.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 O, vec2 U )\n{\n    //U /= R;\n    O = vec4(0);\n    \n// --- Separable gaussian convolution at full resolution - part 2\n    float w, s = 0.;\n    for (float y = -2.*Z; y <= 2.*Z; y++) \n        s += w = gauss(y/Z/G), // * (R/R0*R/R0).y,  // R²/R0² : to emulate sampling in cubemap\n        O += w * texture(iChannel0, U/R  + vec2(0,y)/R0 );\n    //O /= 17.; // s;\n // O *= gain; return;  // uncomment to keep only the Gaussian part\n\n// --- non separable part of the filter at low resolution\n    vec4 F = vec4(0);\n    s = 0.;\n#define dL 0.          // LOD offset to avoid MIPmap wrongness (OpenGL bugs)\n    float LOD = 3.-dL, // makes central tile fit the footprint already integrated above\n         sLOD = LOD;// + ceil(log2(R0/R).y);\n    float r =  2.*Z*exp2(dL);\n  //float r = .5*R.y/exp2(LOD); \n    for (float y = -r; y <= r; y++) \n        for (float x = -r; x <= r; x++) {\n            float d = x*x+y*y;        //d>0: requires 2Z/exp2(LOD)=1\n            if ( d > 0. && d <= r*r ) // central low res tile already computed before.\n                d = sqrt(d)/Z *exp2(LOD),\n                s += w = ( gauss(d/G) + 2.7/abs(d*d*d) )/2. * exp2(2.*LOD),\n                F += w * textureLod(iChannel1, vec3( ( 2.*U - R )/R.y  + 2.*vec2(x,y)*exp2(LOD)/R0, 1) , sLOD );\n            //  ref https://shadertoy.com/view/tlc3zM :\n            //      abs(x) < 2. ? gauss(x/1.4) : ( gauss(x/1.4) + 2.7/abs(x*x*x) )/2.\n        }\n    //F /= 17.*17. -1. ; // s;   \n    \n#if 1\n# define iL 2.\n    LOD += iL; sLOD += iL; // second crown, at even lower resolution\n    for (float y = -r; y <= r; y++) \n        for (float x = -r; x <= r; x++) {\n            float d = x*x+y*y;\n            if ( d >= r*r/exp2(2.*iL) ) // central disk already computed above\n                d = sqrt(d)/Z *exp2(LOD),\n                s += w = ( gauss(d/G) + 2.7/abs(d*d*d) )/2. * exp2(2.*LOD),\n                F += w * textureLod(iChannel1, vec3( ( 2.*U - R )/R.y  + 2.*vec2(x,y)*exp2(LOD)/R0, 1) , sLOD );\n        }    \n#endif\n    O += gain*F;\n}\n","name":"Buffer C","description":"","type":"buffer"}]}