{"ver":"0.1","info":{"id":"slXGDl","date":"1623082172","viewed":343,"name":"The Infinite Pattern ","username":"fancyzero","description":"Generate random patterns, using simple rules\n","likes":20,"published":1,"flags":32,"usePreview":0,"tags":["random","pattern","generate"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\n//naive edgedetect to make the block \"popup\"\nfloat edgedetect(vec2 fragCoord)\n{\n  vec4 v1 = texelFetch( iChannel0, ivec2(fragCoord) +ivec2(0,-1),0 );\n  vec4 v2 = texelFetch( iChannel0, ivec2(fragCoord) +ivec2(0,0),0);\n  vec4 v3 = texelFetch( iChannel0, ivec2(fragCoord) +ivec2(0,1),0);\n  vec4 v4 = texelFetch( iChannel0, ivec2(fragCoord) +ivec2(1,-1),0);\n  vec4 v5 = texelFetch( iChannel0, ivec2(fragCoord) +ivec2(1,0),0);\n  vec4 v6 = texelFetch( iChannel0, ivec2(fragCoord) +ivec2(1,1),0);\n  vec4 v7 = texelFetch( iChannel0, ivec2(fragCoord) +ivec2(-1,-1),0);\n  vec4 v8 = texelFetch( iChannel0, ivec2(fragCoord) +ivec2(-1,0),0);\n  vec4 v9 = texelFetch( iChannel0, ivec2(fragCoord) +ivec2(-1,1),0);\n  \n  float a = dot( vec4(1,0,0,0), v1+v2+v3 );\n  float b = dot( vec4(1,0,0,0), v4+v5+v6 );\n  float c = dot( vec4(1,0,0,0), v7+v8+v9 );\n  \n  float d = dot( vec4(1,0,0,0), v1+v4+v7 );\n  float e = dot( vec4(1,0,0,0), v2+v5+v8 );\n  float f = dot( vec4(1,0,0,0), v3+v6+v9 );\n  \n  if( a==b && c == 0.)\n      return 4.0;\n  if( a==c && b == 0.)\n      return -0.25;      \n  if( e==d && f == 0.)\n      return 4.0;     \n  if( e==f && d == 0.)\n      return -0.25;         \n  return 0.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec4 d= texture( iChannel0, fragCoord/iResolution.xy );\n    vec4 ed = vec4(edgedetect(fragCoord))*d.a;\n    //return;\n    \n    int p =  int(   mod(texture(iChannel1,vec2(0.5)).y,9.));\n    float brighten = 0.;\n    float flashDuration = .3;\n    if (iTime - d.y  < flashDuration && d.a > 0.)\n    {\n        brighten =clamp(-log((iTime-d.y)/flashDuration)*20.,0.,10.);\n\n     }\n    float a = d.z*2.718238271823;\n\n    //colorizing the block using frame number when spawned\n    fragColor =pal( a, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.33,0.67) ).xyzz*d.a;//I like this one\n     if (p == 6)\n            fragColor =pal( a, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.10,0.20) ).xyzz*d.a;\n    if (p == 7)\n            fragColor = pal( a, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.33,0.67) ).xyzz*d.a;\n    if (p == 8)\n            fragColor =pal( a, vec3(0.8,0.5,0.4),vec3(0.2,0.4,0.2),vec3(2.0,1.0,1.0),vec3(0.0,0.25,0.25) ).xyzz*d.a;\n    \n    fragColor += fragColor*brighten;\n    fragColor += (1.-d.a) * vec4(0.051,0.047,0.008,0);\n    fragColor += ed*fragColor;\n    \n    //fragColor = texture( iChannel2, fragCoord/iResolution.xy );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n  const uint k = 1103515245U;  // GLIB C\n\nvec3 hash( uvec3 x )\n{\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    \n    return vec3(x)*(1.0/float(0xffffffffU));\n}\nmat2 makerot(float r)\n{\n    mat2 rotmat = mat2(vec2(cos(r),sin(r)), vec2(-sin(r), cos(r)));\n    return rotmat;\n}\n\n\nfloat hex(in vec2 p){\n    const float hexSize = .5;\n    const vec2 s = vec2(1, 1.7320508);\n    \n    p = abs(p);\n    return max(dot(p, s*.5), p.x) - hexSize;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    //setup random parameters\n        \n    int rndFrame = int(texture(iChannel1,vec2(0.5)).x)%213;//iFrame / 332 +4;\n    float windowSize = iResolution.y/10.;\n    \n    int symetrical =int(texture(iChannel1,vec2(0.5)).y*10.) % 3;\n    if (symetrical != 0 )\n        rndFrame += int((fragCoord.x-iResolution.x/2.)/windowSize)+int((fragCoord.y-iResolution.y/2.)/windowSize)*10;\n    \n    int kernelShape = 0;\n    int rangeStart=16;\n    vec3 hh = hash(uvec3(rndFrame));\n    int frameDivid=int(hh.x*6.)+3;\n    hh = hash(uvec3(rndFrame+32));\n    int frameMod=int(hh.x*5.)+3;\n\n    hh = hash(uvec3(rndFrame+12));\n    int ppFrameDivid=int(hh.x*11.)+11;\n    hh = hash(uvec3(rndFrame+882));\n    int ppFrameMod=int(hh.x*4.)+3;;\n\n    kernelShape=int (hash(uvec3(iFrame+77)).x*100.)%20;\n    \n    int frame = iFrame % 200 ;\n    \n\n    \n\n    \n    // initial frame\n    // and clear buffer if resolution change detedted\n    if ( frame <= 1 )\n    {\n        vec2 diff = abs(fragCoord - iResolution.xy/2.);\n        float f = max(diff.x, diff.y);\n        fragColor = vec4(step(f,10.));// * step(hash(uvec3(fragCoord.xyy)).x,0.001);\n        vec2 oldres = texture( iChannel1, vec2(0.,0.)).xy;\n        bool resChanged = length(oldres.xy - iResolution.xy) > 1.0;\n        //if ( abs(texture( iChannel0, fragCoord/iResolution.xy).z -20.) < 5.)\n            //fragColor = texture( iChannel0, fragCoord/iResolution.xy);\n    }\n    else\n    {\n        frame += int(hash(uvec3(iFrame+77)).x*13.)+13;\n\n        int range = rangeStart>>((frame/frameDivid)%frameMod);    \n\n        if (range < 4 )\n            range = 4;    \n        fragColor = texture( iChannel0, fragCoord/iResolution.xy);\n        if (frame > 100 )\n            return;\n        //counting using a kernel\n        int total = 0;\n        ivec2 vc = ivec2(fragCoord);\n        for (int i = -range; i <= range; i++ )\n        {\n            for (int j = -range; j <= range; j++ )        \n            {\n                if ( i*i + j*j > range*range && kernelShape ==0)\n                    continue;\n                    \n                if ( abs(i)> abs(j)  && kernelShape <=2 && kernelShape > 0)\n                    continue;   \n                    \n                ivec2 tvc = (vc/2+ivec2(i,j));\n\n                \n                vec4 data = texelFetch( iChannel2, tvc,0);\n                vec4 mask =vec4(1);\n                int ix = (vc.x)%2;\n                int iy = (vc.y)%2;\n                \n                if ( ix == 0 )\n                {\n                    if ( i == range )\n                        mask *= vec4(0);\n                    if ( i == -range )\n                        mask *= vec4(0,1,0,1);                         \n                }\n                else\n                {\n                    if ( i == -range )\n                        mask *= vec4(0);\n                    if ( i == range )\n                        mask *= vec4(1,0,1,0);                                \n                }  \n                    \n                if (iy == 0 )\n                {\n                    if ( j == range )\n                        mask *= vec4(0);\n                    if ( j == -range )\n                        mask *= vec4(0,0,1,1);\n                }\n                else\n                {\n                    if ( j == -range )\n                        mask *= vec4(0);\n                    if ( j == range )\n                        mask *= vec4(1,1,0,0);                    \n                }  \n                \n                \n                total +=int(dot(mask, data));\n            }\n        }        \n                \n        \n        \n        int pp = range;\n        int m = pp/(frame/ppFrameDivid+1)%ppFrameMod;\n        if (m < 2 )\n            m = 2;\n        // where the magic happens\n        if ( (total <= m) && (total >0) && ((total % pp) < m))\n            fragColor = vec4(1,iTime,iFrame,1);\n        \n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//for random seeds and resolution change detect\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n        fragColor = texture(iChannel0,fragCoord/iResolution.xy);\n    if ( iFrame % 50 == 0 )\n        fragColor.x = (iDate.w);\n    if ( iFrame % 200 == 0 )\n        fragColor.y = (iDate.w);\n        \n    if ( iFrame % 200 == 0 && fragCoord.y<= 1.0)\n        fragColor.xy = iResolution.xy;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 f = ivec2(fragCoord) *2;\n    float a = texelFetch(iChannel0, f,0 ).x;\n    float b = texelFetch(iChannel0, f+ivec2(1,0),0 ).x;\n    float c = texelFetch(iChannel0, f+ivec2(0,1),0 ).x;\n    float d = texelFetch(iChannel0, f+ivec2(1,1),0 ).x;\n    \n    fragColor = vec4(a,b,c,d);\n\n}","name":"Buffer C","description":"","type":"buffer"}]}