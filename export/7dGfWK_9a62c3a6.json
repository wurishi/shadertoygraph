{"ver":"0.1","info":{"id":"7dGfWK","date":"1658955177","viewed":161,"name":"Incy Wincy(s)","username":"echosum","description":"Inspired by https://twitter.com/KomaTebe/status/1549001155338018818.\nNot very efficient but still learning the very very basics (like drawing a line lmao).","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","grid","learning","spider"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float rootTwo = 1.4142135623;\n\n// Create a grid.\nconst float gridSize = 20.;\n\n// To draw a line we basically figure out how far away we are from the projection of our current\n// point to the line, and then depending on our desired line thickness we can draw.\nfloat L(vec2 p, vec2 a,vec2 b) {               \n    vec2 pa = p-a;\n    vec2 ba = b-a;\n    // Normalised projection clamped between zero and one.\n    float proj = clamp(dot(pa,ba)/dot(ba,ba), 0., 1. );\n    // Distance from point and line.\n    return length(pa - ba*proj);\n}\n\nvec3 spider(vec2 C, vec2 grid, vec2 gv) {\n    vec3 col = vec3(0.);\n    \n    // Grid points near the spider.\n    if (distance(grid, C*gridSize) <= 1.9*rootTwo) {\n        col += smoothstep(3.*gridSize/iResolution.y, 0., length(gv));\n    }\n    // Spider legs.\n    // Totally redundant but I wanted to see how to smoothstep between arbitrary different colours.\n    vec3 legCol = vec3(1.);\n    vec2 anchor = floor(C*gridSize), offset;\n    float d, line;\n    for (int y=-2; y<=2; y++) {\n        for (int x=-2; x<=2; x++) {\n            offset = vec2(x, y);\n            d = distance(anchor+offset, C*gridSize);\n            if (d >= 1. && d <= 2.) {\n                line = L(grid, anchor+offset, C*gridSize);\n                col += mix(vec3(0.), legCol, smoothstep(1.4*gridSize/iResolution.y, 0., line));\n            }\n        }\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Centre of the screen is (0,0).\n    vec2 uv = (fragCoord - .5*iResolution.xy) / iResolution.y;\n    vec3 col = vec3(0.);\n    \n    vec2 grid = uv*gridSize;\n    // Coordinates inside each grid square.\n    vec2 gv = fract(grid);\n    \n    // Centre of moving spider.\n    vec2 C = .3*cos(.5*iTime+vec2(3,2)) + .15*sin(1.4*iTime+vec2(1,0));\n    col += spider(C, grid, gv);\n    // His friend (or maybe his enemy). \n    C = .3*sin(.5*iTime+vec2(3,2)) + .15*cos(1.4*iTime+vec2(1,0));\n    col += spider(C, grid, gv);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}