{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"float time;\nvec3  pos2;\n\nvec3 rotate(vec3 r, float v){ return vec3(r.x*cos(v)+r.z*sin(v),r.y,r.z*cos(v)-r.x*sin(v));}\n\nfloat terrain(vec3 pos){   \n\tpos2.xz = pos.xz = mod(pos.xz,400.0)-200.0;\n\tpos.xyz = rotate(pos.xyz,pos.z*0.003+pos.x*0.001+time*0.1);\n\tpos.xzy  = abs(pos.xyz)-50.0 + sin(time*0.3+1.3)*50.0;\n\treturn \t60.0 + sin(pos.x*0.12+time)*sin(pos.y*0.14+time)*sin(pos.z*0.11+time)*5.0 - length(pos);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    time        = iTime*1.0;\n    vec2 uv     = fragCoord.xy/(iResolution.xx*0.5)-vec2(1.0+cos(time*0.3)*0.4,0.9);\n    vec3 ray    = normalize(vec3(uv.x,uv.y,0.7));\n    vec3 campos = vec3(cos(time*0.32)*100.0,sin(time*0.5)*20.0-300.0,cos(time*0.1)*500.0);\n    vec3 pos    = campos;\n    \n    float test  = 0.0;\n    float trans = 0.0;\n\tfor(int i=0;i<60;i++){\n        test = terrain(pos); \n        pos += ray*clamp(test,-50.0,-2.0);\n        trans += smoothstep(0.0,4.0,abs(test));\n    }\n\t\n\tfloat c1 = smoothstep(50.0,20.0,trans);\n\tfloat c2 = smoothstep(-0.0,70.0,test);\n\tfloat c3 = smoothstep(70.0,45.0,trans);\n    vec3 col = c2*vec3(0.9,0.3,0.0) + c3*vec3(0.1,0.4,0.6) + c1;\n\tfragColor = vec4(col-dot(uv,uv)*0.2,1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XsX3R4","date":"1363210447","viewed":1499,"name":"Cells","username":"ztri","description":"Volumetric cells or something like that.","likes":38,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""}}