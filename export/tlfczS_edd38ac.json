{"ver":"0.1","info":{"id":"tlfczS","date":"1592349529","viewed":533,"name":"Simplex Noise Worms and Cells","username":"izutionix","description":"messing with  [url=https://www.shadertoy.com/view/Msf3WH]iq's simplex noise shader[/url]\nmouse y controls thickness (kind of)\npress spacebar to toggle cell treshold","likes":22,"published":1,"flags":16,"usePreview":0,"tags":["2d","voronoi","noise","worley","simplex","caustics","cells","worms","brain","trabeculum","trabeculum","trabeculum","scratches","intestines"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ss(t, b, g) smoothstep(t-b, t+b, g)\n#define screen(a, b) a+b-a*b\n\nvec2 hash( vec2 p ) // modified from iq's too\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\tp = -1.0 + 2.0*fract(sin(p)*43758.5453123);\n    return p;\n    //return normalize(p); // more uniform (thanks Fabrice)\n}\n\n// slightly modified version of iq's simplex noise shader: https://www.shadertoy.com/view/Msf3WH\nvec3 snoise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return 1e2*n; //return full vector\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n\tfloat b = iResolution.y;\n    float t =.25;\n    if(iMouse.xy!=vec2(0))\n    t = iMouse.y/b;\n    b = 4./b;\n    \n    vec3 n = snoise( 6.*(p-iTime/10.+5.) );\n\tvec3 an = abs(n);\n    vec4 s = vec4(\n        dot( n, vec3(1.) ),\n\t\tdot( an,vec3(1.) ),\n        length(n),\n        max(max(an.x, an.y), an.z ) );\n    \n\tfloat x;\n    \n    if(p.x<-.333)\n\t// worms\n\t\tx = 1.25*( s.y*t-abs(s.x) )/t;\n    else if(p.x<.333) {\t\n\t// cells\n    \tx = (1.-t)+(s.y-s.w/t)*t;\n        x *= 1.+t;\n        if(texelFetch( iChannel0, ivec2(32,2),0 ).x>.5) // spacebar pressed\n            x = ss(.6, b, x); // treshold\n        x *= x; // looks nicer\n    }\n\telse\n\t// intestines or brain\n\t\tx = .75*s.y;\n    \n    float border = ss( .002, b/4., abs(abs(p.x)-.333) );\n    x = screen( x*border, (1.-border) );\n\n\tfragColor = vec4(x);\n}","name":"Image","description":"","type":"image"}]}