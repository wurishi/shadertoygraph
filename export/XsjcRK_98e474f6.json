{"ver":"0.1","info":{"id":"XsjcRK","date":"1492823179","viewed":155,"name":"Reveal-JS4","username":"Thuiy","description":"Blur reveal project","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["blur"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 filterN(in vec2 fragCoord, mat3 kernel, sampler2D iChannel);\nvec4 circle(vec3 fill, vec3 bg, float r, vec2 pos, vec2 uv);\nvec3 sampleN(const int x, const int y, in vec2 fragCoord, sampler2D iChannel);\n\n//Kernels\nmat3 blur = mat3(0.111, 0.111,0.111,0.111,0.111,0.111,0.111,0.111,0.111);\nmat3 sharpen = mat3(\n    0.0, -1, 0.0,\n    -1, 5, -1,\n    0.0, -1, 0.0\n    );\n\nvec2 mousePos;\n\n//User variable\nfloat radius = 0.1;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    mousePos = iMouse.xy;\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    mousePos /= iResolution.xy;\n    \n    uv.y *= iResolution.y / iResolution.x;\n    mousePos.y *= iResolution.y / iResolution.x;\n    \n    vec3 blurred = filterN(fragCoord, blur, iChannel0);\n    vec3 sharpened = filterN(fragCoord, sharpen, iChannel1);\n    \n    fragColor = circle(sharpened, blurred, radius, mousePos, uv);\n\n}\n\n\n//Returns texture so I don't have to a million times\nvec3 sampleN(const int x, const int y, in vec2 fragCoord, sampler2D iChannel)\n{\n \tvec2 uv = fragCoord.xy / iResolution.xy * iChannelResolution[1].xy;\n    uv = (uv + vec2(x, y)) / iChannelResolution[1].xy;\n    return texture(iChannel, uv).xyz;\n}\n\n\n//Applies kernel to channel\nvec3 filterN(in vec2 fragCoord, mat3 kernel, sampler2D iChannel)\n{\n vec3 sum = sampleN(-1, -1, fragCoord, iChannel) * kernel[0][0]\n     + sampleN(-1, 0, fragCoord, iChannel) * kernel[0][1]\n     + sampleN(-1, 1, fragCoord, iChannel) * kernel[0][2]\n     + sampleN(0, -1, fragCoord, iChannel) * kernel[1][0]\n     + sampleN(0, 0, fragCoord, iChannel) * kernel[1][1]\n     + sampleN(0, 1, fragCoord, iChannel) * kernel[1][2]\n     + sampleN(1, -1, fragCoord, iChannel) * kernel[2][0]\n     + sampleN(1, 0, fragCoord, iChannel) * kernel[2][1]\n     + sampleN(1, 1, fragCoord, iChannel) * kernel[2][2];\n    \n    return sum;\n}\n\n\n//Returns the fill, returns bg around pos\nvec4 circle(vec3 fill, vec3 bg, float r, vec2 pos, vec2 uv)\n{\n\tif(length(pos - uv) < r)\n        return vec4(fill, 1.0);\n    return vec4(bg, 1.0);\n}","name":"Image","description":"","type":"image"}]}