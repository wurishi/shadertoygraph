{"ver":"0.1","info":{"id":"llB3zV","date":"1430358042","viewed":130,"name":"Untitled #1","username":"kindofsleepy","description":"Just practicin and learnin, messing with various functions and what not.  ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["yellow","green","practice"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":" \n#define POINTS 25.0\n#define RADIUS 500.0\n#define BRIGHTNESS 0.45\n#define COLOR vec3(1.0, 1.0, 0.0)\n#define SMOOTHNESS 40.0\n#define PI 3.14149\n#define LAG_A 0.325\n#define LAG_B 0.825\n#define LAG_C 0.825\n#define time iTime\nvec2 vUv = ( gl_FragCoord.xy / iResolution.xy );\nvec2 uv = gl_FragCoord.xy;\n// hash based 3d value noise\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\n\nfloat length(float x,float y){\n    return sqrt((x * x) + (y*y));\n}\n \n \n// LUT based 3d value noise\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\t\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = textureLod( iChannel0, (uv+ 0.5)/256.0, 0.0 ).yx;\n\treturn mix( rg.x, rg.y, f.z );\n}\n \n \nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n \nvec3 mod289(vec3 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n \nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n \nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n \nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n \nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n \n// Classic Perlin noise\nfloat cnoise(vec3 P)\n{\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n \n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n \n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n \n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n \n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n \n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n \n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n \n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n  return 2.2 * n_xyz;\n}\n \n#define WARP_ORDER 1.\n \n \n \nfloat hash21(in vec2 n){ return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453); }\n \nmat2 m2 = mat2( 0.80,  0.60, -0.60,  0.80 );\nfloat fbm( in vec2 p )\n{\t\n\tfloat z=2.;\n    vec3 point = vec3(z,z,z);\n\tfloat rz = 0.;\n\tp *= 0.25 * point.x;\n    \n    \n\tfor (float i= 1.;i < 6.;i++ )\n\t{\n\t\t//rz+= (sin(noise(vec3(p,0.0,0.0)*5.)*0.5+0.5) /z;\n\t\tz = z*2.;\n\t\tp = p*2.*m2;\n\t}\n\treturn rz;\n}\n \nvec2 field4( in vec2 x )\n{\n\tvec2 n = floor(x);\n\tvec2 f = fract(x);\n \n\tvec2 m = vec2(5.,0.);\n\t//4 samples\n\tfor(int j=0; j<=1; j++)\n\tfor(int i=0; i<=1; i++)\n    {\n\t\tvec2 g = vec2( float(i),float(j) );\n\t\tvec2 r = g - f;\n\t\tfloat minkpow = (iMouse.y/iResolution.x)*3.+.8;\n\t\tfloat d = pow(pow(abs(r.x * r.y),minkpow)+pow(abs(r.y),minkpow),1./minkpow)*.5;\n\t\td *= (iMouse.x/iResolution.x)*1.4+.5;\n\t\td = sin(d*10.+time*0.1);\n\t\tm.x *= d;\n\t\tm.y += d*1.2;\n    }\n\treturn pow(abs(m),vec2(0.8));\n}\n \nvec2 warp(vec2 uv, vec2 p, float offset)\n{\n\tuv -= p;\n\tfloat minkpow = WARP_ORDER;\n\tfloat d = pow(pow(abs(uv.x),minkpow)+pow(abs(uv.y),minkpow),1./minkpow);\n\tuv /= pow(d,2.)*1.-offset;\n\tuv += p;\n\treturn uv;\n}\n \n \n \nvec4 map( in vec3 p )\n{\n\tfloat d = 0.2 - p.y;\n \n\tvec3 q = p - vec3(1.0,0.1,0.0)*iTime;\n\tfloat f;\n    f  = 0.5000*noise( q ); q = q*2.02;\n    f += 0.2500*noise( q ); q = q*2.03;\n    f += 0.1250*noise( q ); q = q*2.01;\n    f += 0.0625*noise( q );\n \n\td += 3.0 * f;\n \n\td = clamp( d, 0.0, 1.0 );\n\t\n\tvec4 res = vec4( d );\n \n\tres.xyz = mix( 1.15*vec3(1.0,0.95,0.8), vec3(0.7,0.7,0.7), res.x );\n\t\n\treturn res;\n}\n \n \nvec3 sundir = vec3(-1.0,0.0,0.0);\n \n \nvec4 raymarch( in vec3 ro, in vec3 rd )\n{\n\tvec4 sum = vec4(0, 0, 0, 0);\n \n\tfloat t = 0.0;\n\tfor(int i=0; i<64; i++)\n\t{\n\t\tif( sum.a > 0.99 ) continue;\n \n\t\tvec3 pos = ro + t*rd;\n\t\tvec4 col = map( pos );\n\t\t\n\t\t#if 1\n\t\tfloat dif =  clamp((col.w - map(pos+0.3*sundir).w)/0.6, 0.0, 1.0 );\n \n        vec3 lin = vec3(0.65,0.68,0.7)*1.35 + 0.45*vec3(0.7, 0.5, 0.3)*dif;\n\t\tcol.xyz *= lin;\n\t\t#endif\n\t\t\n\t\tcol.a *= 0.35;\n\t\tcol.rgb *= col.a;\n \n\t\tsum = sum + col*(1.0 - sum.a);\t\n \n        #if 0\n\t\tt += 0.1;\n\t\t#else\n\t\tt += max(0.1,0.025*t);\n\t\t#endif\n\t}\n \n\tsum.xyz /= (0.001+sum.w);\n \n\treturn clamp( sum, 0.0, 1.0 );\n}\n \n \n#define TAU 9.28318530718\n#define MAX_ITER 9\n \nvec4 water( void ) \n{\n\tfloat time = iTime * .5+23.0;\n\tvec2 sp = gl_FragCoord.xy * iResolution.xy;\n \n\tvec2 p = mod(sp*TAU*2.0, TAU)-250.0;\n \n \n\tvec2 i = vec2(p);\n\tfloat c = 1.0;\n\tfloat inten = .005;\n \n\tfor (int n = 0; n < MAX_ITER; n++) \n\t{\n\t\tfloat t = time * (1.0 - (3.5 / float(n+1)));\n\t\ti = p + vec2((t - i.x) + (t + i.y), sin(t - i.y) + cos(t + i.x));\n\t\t//c += 1.0/length((p.x / ((i.x+t)/inten),p.y / ((i.y+t)/inten)));\n\t}\n\tc /= float(MAX_ITER);\n\tc = 1.17-pow(c, 1.4);\n\tvec3 colour = vec3(pow(abs(c), 8.0));\n    \n    vec4 march = raymarch(colour, colour);\n    \n\treturn march + vec4(clamp(colour + vec3(0.0, 0.35, 0.5), 0.0, 1.0), 1.0);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord.xy / iResolution.xy-0.5;\n\tp.x *= iResolution.x/iResolution.y;\n\tp*= 5.;\n\t\n\t#ifndef flat\n\tp = warp(p,vec2(0.),-.1);\n\t#endif\n\t\n\tvec2 rz = field4(p);\n\t\n\tvec3 col = sin(vec3(.9,0.6,0.2)*rz.y*1.4)*rz.x;\n    float n = cnoise(sin(vec3(.9,0.6,0.2)*rz.y*1.4)-rz.x);\n\tcol = pow(col,vec3(.99 + n))*0.55;\n\t\n\t//lights\n\tvec3 ligt = normalize(vec3(sin(time)*10.,1.,cos(time)*10.));\n\tvec3 nor = normalize(vec3(dFdx(rz.y), .08, dFdy(rz.y)));\n    \n    col *= (ligt - nor);\n\t\n\t//fbm variation on the normals\n//\tnor.xz *= fbm(p*4.);\n//\tvec3 bnor = nor;\n\t//nor.yz *= fbm(p*2.);\n\t\n\t//float dif = clamp(dot( nor,ligt ),0.0,1.0)*1.9;\n\t//col *= 0.5+.4*dif;\n\t//col *= 1.+3e2*pow(abs(dot(bnor,ligt)), 30.);\n\t\n\t//simple fbm \"texturing\"\n\t//col *= fbm(p*70.)*0.2+0.85;\n\t\n\t//vignetting\n\t//col *= 1.-pow(dot(p,p),3.)*0.9e-4;\n\t\n\tfragColor = water() * vec4(pow(col,vec3(0.6))-0.1,1.0);\n}","name":"","description":"","type":"image"}]}