{"ver":"0.1","info":{"id":"fdBSRy","date":"1620435185","viewed":116,"name":"buffer practice 2 balls","username":"csgradle","description":"learning how to use buffers part 2.  then I added some blur to the trails.","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["balls","buffer","gravity"],"hasliked":0,"parentid":"7dsSRS","parentname":"buffer practice 1"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    fragColor = texture(iChannel1, uv);\n} \n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.,0.,0.,0.); \n    ivec2 iFragCoord = ivec2(fragCoord); // change pixel location to int\n    \n    if(iFragCoord.x < PARTICLES && iFragCoord.y < 2) { // only run if the pixel is in the first 50 particle slots\n    \n        if(iFrame == 0) { // start conditions; set pos and vel to random\n            if(iFragCoord.y == 0) fragColor.xy = getRandomPos(fragCoord.x);\n            if(iFragCoord.y == 1) fragColor.xy = getRandomVel(fragCoord.x);\n        }\n        \n        if(iFrame>0) { // update every frame\n            if(iFragCoord.y == 0) fragColor.xy = getParticlePos(iFragCoord.x) + getParticleVel(iFragCoord.x)* iTimeDelta;\n            if(iFragCoord.y == 1) {\n                fragColor.xy = getParticleVel(iFragCoord.x) + vec2(0.,-0.01);\n                if(getParticlePos(iFragCoord.x).x > iResolution.x/iResolution.y/2.-PARTICLE_RADIUS*2.) fragColor.x = -abs(fragColor.x)*1.;\n                if(getParticlePos(iFragCoord.x).x < -iResolution.x/iResolution.y/2.+PARTICLE_RADIUS*2.) fragColor.x = abs(fragColor.x)*1.;\n                if(getParticlePos(iFragCoord.x).y > 0.5-PARTICLE_RADIUS) fragColor.y = -abs(fragColor.y)*0.9;\n                if(getParticlePos(iFragCoord.x).y < -0.5+PARTICLE_RADIUS) fragColor.y = abs(fragColor.y)*0.9;\n            }\n        }\n    }\n    \n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(iFrame==0) fragColor = vec4(0.);\n    if(iFrame >0) {\n\n        vec2 uv = (fragCoord.xy - .5 * iResolution.xy) / iResolution.y;\n        float sum = 0.;\n        for(int i = 0; i < PARTICLES; i++) {\n            vec2 pos = getParticlePos(i);\n            float d = 1.-step(PARTICLE_RADIUS,length(uv-pos));\n            sum += d*1.;\n        }\n        vec4 blur = vec4(0.);\n        for(int y = -1; y <= 1; y++) {\n            for(int x = -1; x <= 1; x++) {\n                blur += texelFetch(iChannel1, ivec2(fragCoord.xy)+ivec2(x,y), 0);\n            }\n        }\n        blur /= 9.;\n        fragColor = vec4(sum) + blur;\n    }\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define PARTICLES 1000\n#define PARTICLE_RADIUS 0.001\n\n#define getParticlePos(id) texelFetch(iChannel0, ivec2(id, 0), 0).xy\n#define getParticleVel(id) texelFetch(iChannel0, ivec2(id, 1), 0).xy\n\n\n// Hash from \"Hash without Sine\" by Dave_Hoskins (https://www.shadertoy.com/view/4djSRW)\nfloat Hash11(in float x) {\n    x = fract(x * 0.1031);\n    x *= x + 33.33;\n    x *= x + x;\n    return fract(x);\n}\nvec2 Hash12(in float x) {\n\tvec3 p3 = fract(x * vec3(0.1031, 0.103, 0.0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx + p3.yz) * p3.zy);\n\n}\n\nvec2 getRandomPos(in float x) {\n    return Hash12(x+iDate.w)-0.5;\n}\nvec2 getRandomVel(in float x){\n    return Hash12(x+iDate.w+30.)-0.5;\n}\n\n","name":"Common","description":"","type":"common"}]}