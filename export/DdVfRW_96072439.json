{"ver":"0.1","info":{"id":"DdVfRW","date":"1697985029","viewed":48,"name":"triangular grid","username":"DeltaT","description":"fixed","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["triangle","hexagon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2[3] getTri(vec2 v) {\n    mat2 unskew = mat2(1., 0., -0.5773503, 1.1547005); // approximately -(1/sqrt(0.75))/2 and 1/sqrt(0.75)\n    mat2 skew = mat2(1., 0., 0.5, 0.8660254); // approximately sqrt(0.75)\n    vec2 v1 = unskew*v;\n    vec2 grid = floor(v1);\n    float c = fract(v1).x + fract(v1).y < 1. ? 0. : 1.;\n    vec2 t1 = skew*(grid+vec2(-c+1., c));\n    vec2 t2 = skew*(grid+vec2(c, -c+1.));\n    vec2 t3 = skew*(grid+vec2(c));\n    vec2[3] points = vec2[3](t1, t2, t3);\n    \n    return points;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    uv *= 2.;\n    vec2[3] points = getTri(uv);\n    float dist = max(max(length(uv-points[0]), length(uv-points[1])), length(uv-points[2]));\n    \n    fragColor = vec4(vec3(dist), 1);\n}","name":"Image","description":"","type":"image"}]}