{"ver":"0.1","info":{"id":"WdV3DW","date":"1570275554","viewed":1616,"name":"NEON TUNNEL","username":"alro","description":"Tunnel with 2D shapes and SDF glow on multiple layers. Distance functions from [url]https://iquilezles.org/articles/distfunctions2d/distfunctions2d.htm[/url]","likes":61,"published":1,"flags":0,"usePreview":0,"tags":["2d","tunnel","sdf","glow","shapes","neon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Base values modified with depth later\nfloat intensity = 1.0;\nfloat radius = 0.05;\n\n//Distance functions from \n//https://iquilezles.org/articles/distfunctions2d\nfloat triangleDist(vec2 p){ \n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - 1.0;\n    p.y = p.y + 1.0/k;\n    if( p.x+k*p.y>0.0 ) p=vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nfloat boxDist(vec2 p){\n    vec2 d = abs(p)-1.0;\n    return length(max(d,vec2(0))) + min(max(d.x,d.y),0.0);\n}\n\nfloat circleDist( vec2 p){\n  return length(p) - 1.0;\n}\n\n//https://www.shadertoy.com/view/3s3GDn\nfloat getGlow(float dist, float radius, float intensity){\n    return pow(radius/dist, intensity);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    \n\tvec2 uv = fragCoord/iResolution.xy;\n    float widthHeightRatio = iResolution.x/iResolution.y;\n    vec2 centre;\n    vec2 pos;\n\t\n    float t = iTime * 0.05;\n    \n    float dist;\n    float glow;\n    vec3 col = vec3(0);\n    \n    //The spacing between shapes\n    float scale = 500.0;\n    //Number of shapes\n    float layers = 15.0;\n    \n    float depth;\n    vec2 bend;\n    \n    vec3 purple = vec3(0.611, 0.129, 0.909);\n    vec3 green = vec3(0.133, 0.62, 0.698);\n    \n    float angle;\n    float rotationAngle;\n    mat2 rotation;\n    \n    //For movement of the anchor point in time\n    float d = 2.5*(sin(t) + sin(3.0*t));\n\n    //Create an out of frame anchor point where all shapes converge to    \n    vec2 anchor = vec2(0.5 + cos(d), 0.5 + sin(d));\n    \n    //Create light purple glow at the anchor loaction\n    pos = anchor - uv;\n    pos.y /= widthHeightRatio;\n    dist = length(pos);\n    glow = getGlow(dist, 0.25, 3.5);\n    col += glow * vec3(0.6,0.4,1.0);\n    \n\tfor(float i = 0.0; i < layers; i++){\n        \n        //Time varying depth information depending on layer\n        depth = fract(i/layers + t);\n\n        //Move the focus of the camera in a circle\n        centre = vec2(0.5 + 0.2 * sin(t), 0.5 + 0.2 * cos(t));\n        \n        //Position shapes between the anchor and the camera focus based on depth\n        bend = mix(anchor, centre, depth);\n     \t\n        pos = bend - uv;\n    \tpos.y /= widthHeightRatio;\n\n        //Rotate shapes\n       \trotationAngle = 3.14 * sin(depth + fract(t) * 6.28) + i;\n        rotation = mat2(cos(rotationAngle), -sin(rotationAngle), \n                        sin(rotationAngle),  cos(rotationAngle));\n        \n        pos *= rotation;\n        \n        //Position shapes according to depth\n    \tpos *= mix(scale, 0.0, depth);\n    \t\n        float m = mod(i, 3.0);\n        if(m == 0.0){\n        \tdist = abs(boxDist(pos));\n        }else if(m == 1.0){\n        \tdist = abs(triangleDist(pos));\n        }else{\n        \tdist = abs(circleDist(pos));\n        }\n       \n        //Get glow from base radius and intensity modified by depth\n    \tglow = getGlow(dist, radius+(1.0-depth)*2.0, intensity + depth);\n        \n        //Find angle along shape and map from [-PI; PI] to [0; 1]\n        angle = (atan(pos.y, pos.x)+3.14)/6.28;\n        //Shift angle depending on layer and map to [1...0...1]\n\t\tangle = abs((2.0*fract(angle + i/layers)) - 1.0);\n        \n        //White core\n    \t//col += 10.0*vec3(smoothstep(0.03, 0.02, dist));\n        \n        //Glow according to angle value\n     \tcol += glow * mix(green, purple, angle);\n\t}\n    \n    //Tone mapping\n    col = 1.0 - exp(-col);\n    \n    //Gamma\n    col = pow(col, vec3(0.4545));\n    \n    //Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\n    Copyright (c) 2019 al-ro\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n*/","name":"Common","description":"","type":"common"}]}