{"ver":"0.1","info":{"id":"clyXz3","date":"1686234098","viewed":111,"name":"Chromatic Aberration Squared","username":"Pink","description":"Simple offset sin based colour mixing shader producing an exaggerated lens chromatic aberration type effect.","likes":6,"published":3,"flags":0,"usePreview":0,"tags":["2d","colourful"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float myTime = iTime*0.5;\n    \n    float zoom_out = 8.0;\n    float vignette = 2.3;\n    \n    // Centered aspect corrected normalized pixel coordinates (from -0.5 to 0.5)\n    vec2 uv = ((fragCoord * 2.0 - iResolution.xy) / iResolution.y) * (2.0 + sin(myTime));\n\n    float d = (1.0-length(uv) + (0.5 * 0.5 + sin(myTime))) + vignette;\n    uv *= zoom_out;\n    float red_one = 0.5 * 0.5 + sin(uv.x + (myTime * 1.0));\n    float green_one = 0.5 * 0.5 + sin(uv.x + (myTime * 1.3));\n    float blue_one = 0.5 * 0.5 + sin(uv.x + (myTime * 1.6));\n    \n    float red_two = 0.5 * 0.5 + cos(uv.y + (myTime * 1.1));\n    float green_two = 0.5 * 0.5 + cos(uv.y + (myTime * 1.4));\n    float blue_two = 0.5 * 0.5 + cos(uv.y + (myTime * 1.7));\n\n    vec3 col = vec3(red_one, green_one, blue_one) * vec3(red_two, green_two, blue_two);\n    col = smoothstep (0.1, 0.9, col);\n    col = d * pow(col,vec3(0.5)+0.5*sin(myTime));\n    col = smoothstep (0.15, 1.0, col);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}