{"ver":"0.1","info":{"id":"4d3fz7","date":"1524602513","viewed":97,"name":"Triangles ball","username":"rory618","description":"Old shader that I'd never released because I had no idea why a few of the triangles were missing","likes":2,"published":1,"flags":48,"usePreview":0,"tags":["3d","triangles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 o, in vec2 i )\n{\n    vec2 uv = i/R.xy;\n    o=texture(iChannel0,uv);\n    if(texture( iChannel3, vec2(32.5/256.0,0.75) ).x > .5){\n    \tuv.x=1.-uv.x;\n    \to+=texture(iChannel0,uv);\n    \tuv.y=1.-uv.y;\n    \to+=texture(iChannel0,uv);\n    \tuv.x=1.-uv.x;\n    \to+=texture(iChannel0,uv);\n    } else {\n        o*=4.;\n    }\n} ","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"void mainImage( out vec4 o, in vec2 i )\n{\n    vec2 uv = i/R.xy;\n    o = vec4(0);\n    for(int j = 0; j < 20; j++){\n        \n        vec4 r = hash44(vec4(F,i,j));       \n        vec4 t = texture(iChannel0,(i+randn(r.zw)*0.2)/R.xy);//sample random nearby points\n        vec3 barycentric;\n        //t = vec4(E(vec2(.5,.5)),E(vec2(.5,.6)),E(vec2(.6,.5)),0);\n        \n        \n        \n        vec2 A = D(t.x);\n        vec2 B = D(t.y);\n        vec2 C = D(t.z);\n        float d = abs(triangleDistance(A*R.xy,B*R.xy,C*R.xy,i,barycentric));\n        d = clamp(1.-d,0.,1.);\n        //if(length(A)>.01 && length(B)>.01 && length(C)>.01)\n        \to = max(o,4.*vec4(d)*sign(t.w))/10.*(.5+.5*sin(vec4(1,2,3,4)*t.w/200.));\n        \t//o = vec4(min((.5+.5*sin(vec4(1,2,3,4)*t.w/200.)),d));\n    }\n    o=mix(o,texture(iChannel1,uv),.2);\n}","name":"Buffer D","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 o, in vec2 i )\n{\n    o = vec4(0);\n    \n    vec4 r = hash44(vec4(-1,F,i));\n            \n    r.z = sqrt(-2.*log(r.z));\n    r.w *= 6.28318;\n    r.zw = r.z*vec2(cos(r.w),sin(r.w))*15.;\n    vec4 t = texture(iChannel0,(i+r.zw)/R.xy);\n    \n    vec2 A = D(t.x);\n    vec2 B = D(t.y);\n    vec2 C = D(t.z);\n    float w = 0.;\n    vec3 barycentric;\n    float d = triangleDistance(A*R.xy,B*R.xy,C*R.xy,i,barycentric);\n    \n    for(int j = 0; j < 20; j++){\n        vec4 r = hash44(vec4(j,F,i));\n                \n        r.z = sqrt(-2.*log(r.z));\n        r.w *= 6.28318;\n        r.zw = r.z*vec2(cos(r.w),sin(r.w))*8.;\n        t = texture(iChannel0,(i+r.zw)/R.xy);\n        \n        \n        \n        vec2 Ap = D(t.x);\n        vec2 Bp = D(t.y);\n        vec2 Cp = D(t.z);\n        float dp = triangleDistance(Ap*R.xy,Bp*R.xy,Cp*R.xy,i,barycentric);\n        \n        if(abs(dp)<abs(d)){\n            A = Ap;\n            B = Bp;\n            C = Cp;\n            d = dp;\n            w = t.w;\n        }\n    }\n    o = vec4(E(A),E(B),E(C),w);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 o, in vec2 i )\n{\n    o = vec4(0);\n    \n    vec4 r = hash44(vec4(-1,F,i));\n    vec4 t = texture(iChannel0,r.xy);\n    \n    vec2 A = D(t.x);\n    vec2 B = D(t.y);\n    vec2 C = D(t.z);\n    float w = 0.;\n    vec3 barycentric;\n    float d = triangleDistance(A*R.xy,B*R.xy,C*R.xy,i,barycentric);\n    \n    for(int j = 0; j < 20; j++){\n        vec4 r = hash44(vec4(j,F,i));\n        r.xy /= R.xy;\n        float tris = 11.*11.*20.*2./10.;//*abs(sin(iTime));\n        float ind = floor((9.*(iTime/3.))*tris+tris*fract(r.x+.01*r.y+100.*r.z));\n        ind=mod(ind,tris*10.);\n        //r.x = fract(r.x+iTime/R.x*6.);\n        //r.y = fract(r.y+iTime/R.y*6.);\n        t = texture(iChannel0,vec2(mod(ind,R.x),floor(ind/R.x))/R.xy);\n        \n        vec2 Ap = D(t.x);\n        vec2 Bp = D(t.y);\n        vec2 Cp = D(t.z);\n        float dp = triangleDistance(Ap*R.xy,Bp*R.xy,Cp*R.xy,i,barycentric);\n        \n        if(abs(dp)<abs(d)){\n            A = Ap;\n            B = Bp;\n            C = Cp;\n            d = dp;\n            w= t.w;\n        }\n    }\n    o = vec4(E(A),E(B),E(C),w/2.);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float h = sqrt(3.)/2.;\nfloat phi =( sqrt(5.)+1.)/2.;\n/*\n(0, ±1, ± φ)\n(±1, ± φ, 0) \n(± φ, 0, ±1)\n*/\nvoid mainImage( out vec4 o, in vec2 i )\n{\n    float d = 5.;\n    vec3 A,B,C;\n    vec3 verts[]=vec3[](\n        vec3(0,1,phi),\n        vec3(1,phi,0),\n        vec3(phi,0,1),\n        vec3(0,1,-phi),\n        vec3(1,-phi,0),\n        vec3(-phi,0,1),\n        vec3(0,-1,phi),\n        vec3(-1,phi,0),\n        vec3(phi,0,-1),\n        vec3(0,-1,-phi),\n        vec3(-1,-phi,0),\n        vec3(-phi,0,-1)\n            );\n    float v = 1.;\n        \n    int index = int(i.x)+int(i.y)*int(R.x);\n    \n    int i1 = index%20;\n    index /= 20;\n    if(i1<12){\n        int i2 = i1%3;\n        i1 /= 3;\n        int i3 = i1%2;\n        i1 /= 2;\n        int i4 = i1%2;\n        A=verts[i2+i3*3+i4*6];\n        B=verts[i2+i3*3+6-i4*6];\n        C=verts[(i2+2)%3+3-i4*3+i3*6];\n    } else {\n        int i2 = (i1%2)*2-1;\n        i1 /= 2;\n        int i3 = (i1%2)*2-1;\n        i1 /= 2;\n        int i4 = (i1%2)*2-1;\n        \n        A=verts[0]*vec3(i2,i3,i4);\n        B=verts[1]*vec3(i2,i3,i4);\n        C=verts[2]*vec3(i2,i3,i4);\n    }\n    \n    \n    float row = floor(sqrt(float(index)));\n    index -= int(row*row);\n    \n    float div = 12.;\n    vec3 AB = B-A;\n    vec3 AC = C-A;\n    vec3 BC = C-B;\n    B = A + AB/div;\n    C = A + AC/div;\n    A += AB*row/div;\n    A += BC*float(index)/div/2.;\n    B += AB*row/div;\n    B += BC*float(index)/div/2.;\n    C += AB*row/div;\n    C += BC*float(index)/div/2.;\n    if(index%2==1){\n        A+=(AC+AB)/2./div;\n        B-=(AC+AB)/2./div;\n        C-=(AC+AB)/2./div;\n    }\n    A/=length(A);\n    B/=length(B);\n    C/=length(C);\n    A/=3.;\n    B/=3.;\n    C/=3.;\n    vec3 D = (A+B+C)/3.;\n    \n    float t = atan(D.y,D.y);\n    \n    A += D * sin(iTime+.5)*.1*cos(t*4.);\n    B += D * sin(iTime+1.)*.1*cos(t*4.);\n    C += D * sin(iTime+1.5)*.1*cos(t*4.);\n    \n    /*\n    A = vec3(0, 0, sqrt(6.)/3.);\n    B = vec3( sqrt(6.)*2./9.,0,0);\n    B.xy*= T(pi*4./3.*i.x);\n    C = B.xyz;\n    C.xy*= T(pi*4./3.);\n    A.z-= sqrt(6.)/12.;\n    B.z-= sqrt(6.)/12.;\n    C.z-= sqrt(6.)/12.;\n    A/= floor(i.y/2.)/6.+1.4;\n    B/= floor(i.y/2.)/6.+1.4;\n    C/= floor(i.y/2.)/6.+1.4;\n*/\n    \n    \n    //vec4 r = hash44(vec4(floor(i/v),0,1));\n    //A = vec3(randn(r.xy),randn(r.zw).x)/3.;\n    //r = hash44(vec4(floor(i/v),0,2));\n    //B = vec3(randn(r.xy),randn(r.zw).x)/3.;\n    //r = hash44(vec4(floor(i/v),0,3));\n    //C = vec3(randn(r.xy),randn(r.zw).x)/3.;\n   \n    \n    o = vec4(E(((vec4(A,1)*(transform))).xy*vec2(R.y/R.x,1)+.5),\n             E(((vec4(B,1)*(transform))).xy*vec2(R.y/R.x,1)+.5),\n             E(((vec4(C,1)*(transform))).xy*vec2(R.y/R.x,1)+.5),\n             (i.x+i.y*R.x)*.4+1.);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define R iResolution\n#define F iFrame\n#define T(x) mat2(  cos(x+vec4(0,-pi,pi,0)) )\n#define E(x) uintBitsToFloat(packSnorm2x16(x))\n#define D(x) unpackSnorm2x16(floatBitsToUint(x))\n#define pi 1.570796\n#define cam (vec3(0.,0.,-2.1))\n#define theta ((iMouse.xy/iResolution.xy-.5)*4. +iTime*vec2(.0023,.0043))\n#define transform (mat4(1,0,-cam.x/cam.z,0,0,1,-cam.y/cam.z,0,0,0,1,0,0,0,-1./cam.z,1)*mat4(cos(theta.y),0,-sin(theta.y),0,0,1,0,0,sin(theta.y),0,cos(theta.y),0,0,0,0,1)*mat4(1,0,0,0,0,cos(theta.x),sin(theta.x),0,0,-sin(theta.x),cos(theta.x),0,0,0,0,1))\nvec4 hash44(vec4 p4)\n{\n\tp4 = fract(p4  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+19.19);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\nvec2 randn(vec2 randuniform){\n    vec2 r = randuniform;\n    r.x = sqrt(-2.*log(r.x));\n    r.y *= 6.28318;\n    r = r.x*vec2(cos(r.y),sin(r.y));\n    return r;\n}\n\n#define cross2(v0, v1) v0.x * v1.y - v0.y * v1.x\n#define IsIn(b) all(greaterThan(b, vec3(0.)))\n\nfloat lineDistanceWork(in vec2 p0, in vec2 p0p, in vec2 p1p, in vec2 p0p1, in vec2 p)\n{\n    vec2 p0p1Norm = normalize(p0p1);\n    \n    float t = dot(p0p, p0p1Norm);    \n    float nearestDistance = abs(cross2(p0p, p0p1Norm));\n        \n    return mix(\n        nearestDistance*nearestDistance,\n        min(dot(p0p,p0p), dot(p1p,p1p)),\n        float(t <= 0.0 || t*t >= dot(p0p1,p0p1))\n    );  \n}    \n\nfloat lineDistance(in vec2 p0, in vec2 p1, in vec2 p)\n{\n    vec2 p0p = p - p0;\n    vec2 p1p = p - p1;\n    vec2 p0p1 = p1 - p0;\n    \n    return sqrt(lineDistanceWork(p0, p0p, p1p, p0p1, p));  \n}\n\nfloat triangleDistance(in vec2 p0, in vec2 p1, in vec2 p2, in vec2 p, out vec3 barycentric)\n{\n    vec2 e0 = p1 - p0;\n\tvec2 e1 = p2 - p1;\n    vec2 e2 = p0 - p2;\n\n\tvec2 v0 = p - p0;\n\tvec2 v1 = p - p1;\n\tvec2 v2 = p - p2;\n    \n    float a = cross2(e0, e1);\n    \n    //Calculate distance to the triangle as a min distance to it's edges\n    float dst = \n        sqrt(min(min\n        (\n            lineDistanceWork(p0, v0, v1, e0, p),\n            lineDistanceWork(p1, v1, v2, e1, p)\n        ),  lineDistanceWork(p2, v2, v0, e2, p)));\n    \n    //Using simplified 2d version of barycentric coords\n    vec2 bar2 = vec2(cross2(v1, v2), cross2(v2, v0)) / a;\n    barycentric = vec3(bar2, 1.0 - bar2.x - bar2.y);\n    \n    bool isInside = IsIn(barycentric);\n    //When we inside a triangle the distance is negative\n    return dst * mix(1.0, -1.0, float(isInside));    \n}","name":"Common","description":"","type":"common"}]}