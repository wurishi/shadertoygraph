{"ver":"0.1","info":{"id":"slK3zc","date":"1638127715","viewed":109,"name":"time blobs!","username":"jneen","description":"some time blobs","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["timeblobs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float time;\n\nfloat box(vec3 p, vec3 a) {\n  vec3 q = abs(p)-a;\n  return length(max(q,0.))+min(0., max(q.x,max(q.y,q.z)));\n}\n\nmat2 rot(float a){float s=sin(a),c=cos(a);return mat2(c,s,-s,c); }\n\n\nvec3 M = vec3(0);\nfloat G=0.;\nfloat w(vec3 p) {\n  G += 1.;\n  p.xz *= rot(sin(time));\n\n\n  float plane = box(p+vec3(0,3,0), vec3(5,.2,5));//p.y + 5.;\n  //float c1 = length(p.xy) - .1 + .2*sin(time+3.);\n  //float c2 = length(p.xz) - .1 + .2*sin(time+2.);\n  //float c3 = length(p.zy) - .1 + .2*sin(time+1.);\n\n\n\n  p.xz *= rot(time);\n  p.xy *= rot(2.*time);\n  p.yz += .3*p.x;\n    p = abs(p) - 2.;\n\n  float B = box(p,vec3(1));\n\n\n  B = max(B, .8 - length(p.xy));\n  B = max(B, .8 - length(p.xz));\n  B = max(B, .8 - length(p.yz));\n  \n\n\n  B = mix(B, length(p)-1.5, 3.); // UNCLAMPED MIX LOL\n\n\n  //B = max(B, -c1);\n  //B = max(B, -c2);\n  //B = max(B, -c3);\n\n\n\n\n  M = plane < B ? vec3(.8, .1, 0.) : (1.-vec3(1, .1, .3));\n  return min(plane,B);\n}\n\nvec3 normal(vec3 p) {\n  mat3 k=mat3(p,p,p)-mat3(.01);\n  return normalize(w(p)-vec3(w(k[0]),w(k[1]),w(k[2])));\n}\n\nfloat ray(vec3 p,vec3 dir){\n    float d=.1,c;\n    for (int i=0;i<100;i++){\n      c=w(p+dir*d);d+=c*.5;\n      if(c<.01||d>50.)return d;\n    }\n    return 51.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv-=.5;\n    uv.x*=iResolution.x/iResolution.y;\n    \n    time = iTime;\n    \n    time += length(uv) + atan(uv.y+sin(iTime*.01),uv.x+cos(iTime*.01));\n #if 0   \n    time += mix(\n       atan(uv.y+sin(iTime*.01),uv.x+cos(iTime*.01)),\n       length(uv),\n       sin(iTime)\n    );\n  #endif  \n    vec3 col=vec3(0);\n    \n    vec3 cam=vec3(0,0,-10.*(.5+.5*sin(iTime)));\n    vec3 dir=normalize(vec3(uv,1));\n    float i;\n    \n    for (i=0.; i<2.; i+=1.) {\n        float dist=ray(cam,dir);\n        float glow = G;\n\n\n        if (dist > 50.) break;\n        //col *= .05 * vec3(.5,.5,0)*G;\n        vec3 mat = M;\n\n\n        vec3 hit = cam+dir*dist;\n        vec3 norm=normal(hit);\n\n        norm.xz *= rot(2.*iTime); // ROTATING LIGHTS YAY\n        float diff = length(.5+.5*sin(1.5*norm))/sqrt(3.);\n\n        col = mix(col, mat * diff, 1./pow(1.+i, 1.+10.*iTime));\n        \n        dir = reflect(dir,norm);\n        cam = hit+.1*dir;\n    }\n    \n    if (i < 1.) {\n      col.rgb += .005*G;\n    }\n    \n    //col.rgb = fwidth(col.bgr);\n    \n    fragColor = vec4(sqrt(col), 1);\n    \n    \n\n}","name":"Image","description":"","type":"image"}]}