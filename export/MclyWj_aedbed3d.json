{"ver":"0.1","info":{"id":"MclyWj","date":"1721628189","viewed":61,"name":"fireball-Hzzzch","username":"Hzzzch","description":"fireball effect, from:https://www.shadertoy.com/view/lss3zr, https://www.shadertoy.com/view/WslGWl, \nnoise from iq: https://www.shadertoy.com/view/Xsl3Dl\nhttps://www.shadertoy.com/view/MfsczB","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float density(vec3 p)\n{\t\n    return 0.1-length(p)*.06+fbm(p*.3 - iTime);\n}\n\nmat3 camera(vec3 cameraPos, vec3 lookAtPoint) {\n    vec3 cd = normalize(lookAtPoint - cameraPos); // camera direction\n    vec3 cr = normalize(cross(vec3(0, 1, 0), cd)); // camera right\n    vec3 cu = normalize(cross(cd, cr)); // camera up\n\n    return mat3(-cr, cu, -cd);\n}\n\n#define ZERO min(0, iFrame)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 lp = vec3(0.); \n    vec3 ro = 25. * vec3(cos(-iTime * 0.5), 0., sin(-iTime * 0.5));\n    vec3 rd = camera(ro, lp) * normalize(vec3(uv, -1)); // ray direction\n\tvec3 color = vec3(0.);\n    \n\tconst int MAX_STEP = 80;\n    const float MAX_DIST = 60.;\n\t\n\tfloat ds = MAX_DIST / float(MAX_STEP);\n    float T = 1.;\n    float absorption = 0.15;\n    float scatter = 0.2;\n    vec3  suncol = vec3(0.875,0.297,0.171); // sun color\n    \n\tfor(int i=ZERO; i<MAX_STEP; i++)\n\t{\n        vec3 p1 = ro + float(i) * ds * rd;\n        float d1 = density(p1);\n\t\tif(d1 > 0.)\n\t\t{\n\t\t\tT *= exp(- d1 * absorption * ds);\n\t\t\tif( T <= 0.6)\n\t\t\t\tbreak;\t\t\t\t\n\t\t\t\t\n\t\t\t //Light scattering\n\t\t\tfloat Tl = 1.0;\n\t\t\tfor(int j=ZERO; j < MAX_STEP/16; j++)\n\t\t\t{\n\t\t\t\tvec3 p2 = p1 + float(j) * ds * 16. * vec3(1.,.0,.0);\n                float d2 = density( p2 );\n\t\t\t\tif(d2 > 0.)\n                \tTl *= exp(- d2 * absorption * ds * 16.);\n                    if (Tl <= 0.2)\n                        break;\n\t\t\t}\n\t\t\t\n\t\t\tcolor += suncol * T * Tl * ds;\n\t\t}\n\t}\n    color = scatter * color;\n    fragColor = vec4(pow(color, vec3(2.0/2.2)), 1.);\n    \n\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\nvec3 hash( vec3 p ) // replace this by something better\n{\n\tp = vec3( dot(p,vec3(127.1,311.7, 74.7)),\n\t\t\t  dot(p,vec3(269.5,183.3,246.1)),\n\t\t\t  dot(p,vec3(113.5,271.9,124.6)));\n\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec3 p )\n{\n    vec3 i = floor( p );\n    vec3 f = fract( p );\n\n     // cubic interpolant\n    vec3 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( mix( dot( hash( i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ), \n                          dot( hash( i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ), \n                          dot( hash( i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), u.x), u.y),\n                mix( mix( dot( hash( i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ), \n                          dot( hash( i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ), \n                          dot( hash( i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) ), u.x), u.y), u.z );\n}\n\nmat3 m = mat3( 0.00,  0.80,  0.60,\n              -0.80,  0.36, -0.48,\n              -0.60, -0.48,  0.64 );\n\nfloat fbm( vec3 p )\n{\n    float f;\n    f  = 1.0000*noise( p );\n    p = m*p*2.02;  f += 0.5000*noise( p );\n    p = m*p*2.03;  f += 0.2500*noise( p );\n    p = m*p*2.04;  f += 0.1250*noise( p );\n    //p = m*p*2.01;  f += 0.0625*noise( p );\n    return 0.5 + 0.5 * f;\n}\n","name":"Common","description":"","type":"common"}]}