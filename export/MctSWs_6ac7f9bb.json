{"ver":"0.1","info":{"id":"MctSWs","date":"1714689335","viewed":53,"name":"Ray-Sphere Intersection :)","username":"Mybrainmelted","description":"Very basic","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raytracer","math","raysphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat EPSILON=0.000001;\n\n\n\n\n\n\nvec3 RaySphereIntersection(vec3 raypos, vec3 raydir, vec3 spherepos, float rad)\n     {\n      float a = dot(raydir,raydir);\n      float b = dot(vec3(2.0),raydir*(raypos-spherepos));\n      float c = dot(spherepos,spherepos)+dot(raypos,raypos)+(-2.0*dot(spherepos,raypos))-rad*rad;\n      if(b*b-4.0*a*c>0.0){\n         float t=(-b-sqrt(b*b-4.0*a*c))/2.0;\n         if(t>EPSILON){\n           vec3 intersection = vec3(raypos+raydir*t);\n           vec3 normal = 0.5+0.5*normalize(vec3(intersection-spherepos));\n           return normal;\n         }\n       }\n      return vec3(0.0);\n     }\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    \n    vec3 normdir = normalize(vec3(uv.x,uv.y,300.0));\n    vec3 col = RaySphereIntersection(vec3(0.0,0.0,-600.0), normdir, vec3(0.0,0.0,100.0), 1.0);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}