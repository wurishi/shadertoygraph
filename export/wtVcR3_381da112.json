{"ver":"0.1","info":{"id":"wtVcR3","date":"1611502093","viewed":150,"name":"floating in the sea","username":"changwenhan","description":"practicing sin wave and color mixing","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define sin(x) sin(mod(x,radians(360.)))\n\nfloat rand(vec2 p) {\n    p = fract(p * vec2(324.456, 863.789));\n    p += dot(p, p+89.56);\n    return fract(p.x*p.y);\n}\n\nfloat Wave(vec2 uv, float offset) {\n    uv.x += offset;\n    \n    return (    \n                sin(uv.x*48.313 + 312.123) + \n                sin(uv.x*10.) + \n                sin(uv.x*31. + 1.42) +\n                sin(uv.x*61.33 + 123.142) +\n                sin(uv.x*3.14)\n           ) / 5.\n           \n           *sin(uv.x*3.14*3.1)*1.3;\n}\n\n\nfloat Moon(vec2 uv, float radius) {\n    return step(length(uv), radius);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy-0.5*iResolution.xy)/iResolution.y;\n    vec2 moon_uv = uv;\n    \n    uv.y *= 10.;\n    \n    vec3 col;\n    \n    float border = .1;\n    \n    vec3 line_color = vec3(.8,.8,.8);\n    vec3 back_blue = vec3(.3,.4,.8) * .1;\n    vec3 back_lightblue = vec3(.3,.4,.8) * .7;\n    vec3 yellow = vec3(.9,.9,.5);\n    \n    float layers = 14.;\n    \n    for(float i=0.;i<layers/2.3;i+=1.) {\n        float offs = (layers/2.-i)*.5 + sin(iTime+i*321.131)*.1;\n        float waveOffs = layers/2.-i;\n        \n        waveOffs += 321.431 + iTime*(i+2.341)*.005 + rand(vec2(123.32,i))*iTime*.1 + rand(vec2(123.32,i))*.4;\n\n        float wave = Wave(uv, waveOffs) * 0.5;\n        \n        float new_line = step(wave-border*.5, uv.y-offs) - step(wave+border*.5, uv.y-offs);\n        float new_line_bottom = 1.-step(wave-border*.5, uv.y-offs);\n        \n        vec3 back_color = mix(back_lightblue, back_blue, 1.-i/layers);\n        \n        col = mix(col, line_color, new_line);\n        col = mix(col, back_color, new_line_bottom);\n\n    }\n    \n    col = mix(col, yellow, Moon(moon_uv, .2));\n    \n    for(float i=layers/2.3;i<layers;i+=1.) {\n        float offs = (layers/2.-i)*.5 + sin(iTime+i*321.131)*.1;\n        float waveOffs = layers/2.-i;\n        \n        waveOffs += 321.431 + iTime*(i+2.341)*.005 + rand(vec2(123.32,i))*iTime*.1 + rand(vec2(123.32,i))*.4;\n\n        float wave = Wave(uv, waveOffs) * 0.5;\n                \n        float new_line_bottom = 1.-step(wave-border*.5, uv.y-offs);\n        float new_line = step(wave-border*.5, uv.y-offs) - step(wave+border*.5, uv.y-offs);\n        \n        \n        float moonOffs = Wave(uv.yx, waveOffs)*.3;\n        vec2 v = vec2(moon_uv.x + moonOffs*.1, moon_uv.y);\n        float moon = Moon(v, .2) * step(uv.y-offs, wave+border*.5);\n        \n        vec3 back_color = mix(back_lightblue, back_blue, i/layers);\n        \n        col = mix(col, back_color, new_line_bottom);\n        col = mix(col, yellow, moon * (1. - i/layers) * 0.5);\n        col = mix(col, line_color, new_line);\n\n    }\n    \n    vec2 box_size = vec2(.85,.85);\n    float box_border = .02;\n    \n    float box = step(abs(uv.x), box_size.x/2.) * step(abs(uv.y), box_size.y/2. * 10.);\n    float smbox = step(abs(uv.x), box_size.x/2.-box_border) * step(abs(uv.y), (box_size.y/2.-box_border) * 10.);\n    \n    col *= box;\n    col = mix(col, line_color, box - smbox);\n    col = mix(back_blue*3., col , length(col));    \n    \n    //if( abs(fragCoord.x-iResolution.x/2.) < 1.) col.g = 1.;\n    //if( abs(fragCoord.y-iResolution.y/2.) < 1.) col.r = 1.;\n    \n    // Output to screen\n    fragColor = vec4(vec3(col),1.0);\n}","name":"Image","description":"","type":"image"}]}