{"ver":"0.1","info":{"id":"4fG3zD","date":"1712457702","viewed":127,"name":"Simple Water Ripple Test","username":"yyf1994","description":"my first pixel shader on ShaderToy !","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["noise","reflection","water","ripple"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// Fork of \"Simple Water Ripple \" by Ricku. https://shadertoy.com/view/4sXXRj\n// 2024-04-07 02:39:49\n\n#define tile_factor 0.2\n#define noise_factor 0.03\n\nfloat hash11(float x)\n{\n    float y = fract(sin(x)*100000.0);\n    return y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n\tvec2 position = fragCoord.xy / iResolution.xy;\n\tvec2 p = position  ;// vec2((position.x + 1.0)/2.0, position.y);\n\n \n\t\t// On Water Surface\n\t\tp.y=1.0-p.y;\n        \n        \n        float i = floor( iTime/10.0); // 整数（i 代表 integer）\n        float f = fract( iTime/10.0); // 小数（f 代表 fraction）\n\n\n        float t = fract(  iTime/30000.0 ) ;\n\n        t =  mix(hash11(i), hash11(i + 1.0), f);\n        \n \t\n\t\tvec2 waterCoord = vec2(p.x, 1.0-position.y);\n\t\tvec2 texCoordNormal0 = waterCoord * tile_factor;\n\t\ttexCoordNormal0 += t ;\n\t\t\n\t\tvec2 texCoordNormal1 = waterCoord * tile_factor;\n\t\ttexCoordNormal1.s -= t ;\n\t\ttexCoordNormal1.t += t ;\n\t\t\n\t\tvec3 normal0 = texture(iChannel1, texCoordNormal0).rgb * 2.0 - 1.0;\n\t\tvec3 normal1 = texture(iChannel1, texCoordNormal1).rgb * 2.0 - 1.0;\n\t\tvec3 normal = normalize(normal0 + normal1);\n\t\t\n\t\t//the final texture cooridnate is disturbed using the normal texture with some noise factor \n\t\tp += noise_factor * normal.xy;\n\t \n\tfragColor = texture(iChannel0, p);\n\t\n} ","name":"Image","description":"","type":"image"}]}