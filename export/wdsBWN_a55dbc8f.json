{"ver":"0.1","info":{"id":"wdsBWN","date":"1588288854","viewed":331,"name":"Cubes In The Mist","username":"julianlumia","description":"minimal version of: https://www.shadertoy.com/view/wlcXWn\nits a quick modification of my original version to hit a steady 60 fps","likes":28,"published":1,"flags":32,"usePreview":0,"tags":["cube"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//radial blur code from jeyko: https://www.shadertoy.com/view/WlKXRR :)\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord/iResolution.xy;\n\tvec2 uvn = (fragCoord - 0.5*iResolution.xy)/iResolution.xy;\n    float steps = 20.;\n    float scale = 0.00 + pow(length(uv - 0.5)*1.2,3.)*0.4;\n    float chromAb = pow(length(uv - 0.5),1.4)*2.1;\n    vec2 offs = vec2(0);\n    vec4 radial = vec4(0);\n    for(float i = 0.; i < steps; i++){  \n        scale *= 0.91;\n        vec2 target = uv + offs;\n        offs -= normalize(uvn)*scale/steps;\n    \tradial.r += texture(iChannel0, target + chromAb*1./iResolution.xy).x;\n    \tradial.g += texture(iChannel0, target).y;\n    \tradial.b += texture(iChannel0, target - chromAb*1./iResolution.xy).z;\n    }\n    radial /= steps;  \n    fragColor = radial*1.;   \n    fragColor *= 1.3;\n    fragColor = mix(fragColor,smoothstep(0.,1.,fragColor), 0.2);  \n    fragColor = max(fragColor, 0.);\n    fragColor.xyz = pow(fragColor.xyz, vec3(3.,sin(iTime)*0.3+0.9,0.8));\n    fragColor *= 1. - dot(uvn,uvn)*1.8;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float PI = 3.14159265359;\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0)); \n}\n\nfloat dBar(vec2 p, float width) {\n vec2 d = abs(p) - width;\n return min(max(d.x, d.y), 0.0) + length(max(d, 0.)) + 0.01 * width;\n}\n\nfloat dCrossBar(vec3 p, float x) {\n float bar_x = dBar(p.yz, x);\n float bar_y = dBar(p.zx, x);\n float bar_z = dBar(p.xy, x);\n return min(bar_z, min(bar_x, bar_y));\n}\n\nfloat dMengerSponge(vec3 p) \n{\n float d = sdBox(p, vec3(0.6));\n float itt = 5.;\n float one_third = 2. / itt;\n for (float i = 0.0; i < itt; i++) {\n  float k = pow(one_third, i);\n  float kh = k * 1.;\n  d = max(d, -dCrossBar(mod(p + kh, k * 2.) - kh, k * one_third));\n }\n return d;\n}\nfloat dMengerSponge2(vec3 p) \n{\n float d = sdBox(p, vec3(0.5));\n float itt = 4.;\n float one_third = 1. / itt;\n for (float i = 0.0; i < itt; i++) {\n  float k = pow(one_third, i);\n  float kh = k * 1.;\n  d = max(d, -dCrossBar(mod(p + kh, k * 2.) - kh, k * one_third));\n }\n return d;\n}\n\nfloat GetDist(vec3 p) {\t\n float gap = 1.; \n p = mod(p + gap,2.0 * gap) - gap;\n float d; d=1.; vec3 p5 = p;\n float dm1= (dMengerSponge(p5));\n p = abs(p-.4);   \n vec3 p1 = p-vec3(-.0,1.,1.0);\n vec3 p2 = p-vec3(1.,0.0,1.0);\n vec3 p4 = p-vec3(1.,1.0,.0);   \n float  dm2=(dMengerSponge2(p1));\n float  dm3=(dMengerSponge2(p2));\n float  dm4=(dMengerSponge2(p4));\n d = min( d,min(dm1,min(dm2,min(dm3,dm4))));\n return d;\n}\n\n\nfloat RayMarch (vec3 ro, vec3 rd) \n{\n float dO = 0.;\n for (int i=0; i<15; i++) \n {\n  vec3 p = ro + dO * rd;\n  float dS = GetDist (p);\n  dO += dS;\n  if (dS<0.001 || dO>4.) break;           \n }\n return dO;\n}\n\nvec3 cameraPath(float t) {\n t *= PI *.5 ;\n float t2 =  cos(t)+0.;\n float c = cos(t*2.); vec3 m; \n if (t2<0.){ m.x = 1. +c;};       \n if (t2>0.){ m.y = 1. +c;};\n// if (t2<0.){ m.x = 1. /1. + 2. +c;};       \n// if (t2>0.){ m.y = 1. /1. + 2. +c;};\n return m;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n vec3 col = vec3(0);\n float s = mod(iTime * 0.25, 1.0);\n float t = 2. * (2.0 * s - s * s);  \n vec3 cameraPos = cameraPath(t);\n vec3 ro = vec3(-cameraPos);\n vec3 rd = normalize(vec3(uv.x, uv.y, 0.4));\n float the = iTime *0.3;\n rd.xz *= mat2(cos(the), -sin(the), sin(the), cos(the));\n rd.yz *= mat2(cos(the), -sin(the), sin(the), cos(the));\n float d = RayMarch(ro, rd); \n float fog = 1. / (1. + d * d* 1.);\n col *= vec3(fog);  \n vec3 sky = vec3(1.);\n col = mix(sky, col, 1./(d*d/1./.1*.1+1.)); \n fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}