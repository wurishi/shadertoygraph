{"ver":"0.1","info":{"id":"NsfBDl","date":"1645527453","viewed":173,"name":"Alpha compositiing","username":"KrankerApfel","description":"read https://apoorvaj.io/alpha-compositing-opengl-blending-and-premultiplied-alpha/","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["alpha"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ALPHA1 abs(sin(iTime))\n#define ALPHA2 0.6\n#define ALPHA3 0.2\n\n\n#define SMOOTH 0.05\n#define RADIUS 0.35\n#define TWO_PI 6.28318530718\n#define SIDES 5.0\n#define WIDTH 0.1\n\n// 0 is pre multiplied\n// 1 is straight\n#define USE_PREMULTIPLIED 0\n\nfloat circle_mask(vec2 uv,vec2 pos, float radius)\n{\n    float d = distance(uv, pos);\n    return smoothstep(radius,radius-SMOOTH,d);\n}\n\nfloat no_smooth_circle_mask(vec2 uv,vec2 pos, float radius)\n{\n    float d = distance(uv, pos);\n    return smoothstep(radius,radius-0.001,d);\n}\n\n\nvec4 shape_mask(vec2 uv, float radius, float sides, float width){\n\n\tuv = uv * 2.0 - 1.0;\n\tfloat angle = atan(uv.x, uv.y);\n    float slice = TWO_PI / sides;\n\n    float d =  cos(floor(0.5 + angle / slice) * slice - angle) * length(uv);\n\n\n   \n  return vec4(\tsmoothstep(radius,radius,d),\t\t\t\t       // FILL\n\t\t\t\tsmoothstep(radius-width,radius-width,d),\t       // OUTLINE\n                smoothstep(radius,radius-SMOOTH,d),\t\t\t\t   // SMOOTHED FILL\n\t\t\t\tsmoothstep(radius-width,radius-width-SMOOTH,d)\t   // SMOOTHED OUTLINE\n\t\t\t  )\t;\n}\n\nvec4 blend_over(vec4 dst, vec4 src)\n{\n    //premultiplied alpha\n    float alpha =  src.a + dst.a * (1.0 - src.a);\n    // premultiplied RGB\n    vec3 pre_src = src.rgb * src.a;\n    vec3 pre_dst = dst.rgb * dst.a;\n    \n    vec3 rgb = pre_src + pre_dst * (1.0 - src.a);\n    return vec4(rgb,alpha);\n}\n\nvec4 blend_over_straight(vec4 dst, vec4 src)\n{\n   return dst + (1.0-dst.a)*src;\n\n // return vec4((src.rgb * src.a) + (dst.rgb * (1.0 - src.a)),1.0);\n\n}\n\n\n \nvec4 add_shape(vec2 uv,vec2 center, vec2 size, vec4 Border_Color, vec4 Fill_Color,vec4 col )\n{\n    vec2 s = shape_mask(uv, RADIUS, SIDES, WIDTH).xy;\n\n    if (USE_PREMULTIPLIED == 0)\n    {\n        col = blend_over(col,vec4(Fill_Color.rgb,Fill_Color.a)*(s.x-s.y)); // FILL\n        col = blend_over(col,vec4(Border_Color.rgb,Border_Color.a)*s.y);   // OUTLINE\n    }\n    else\n    {\n        col = blend_over_straight(col,vec4(Fill_Color.rgb,Fill_Color.a)*(s.x-s.y)); // FILL\n        col = blend_over_straight(col,vec4(Border_Color.rgb,Border_Color.a)*s.y);   // OUTLINE\n    }\n\t\n    return col;\n   // return mix( p.x * Fill_Color,(p.x-p.y)*(Border_Color), p.x-p.y);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     vec2 uv = 0.5-(fragCoord/iResolution.xy);\n     uv.x *= iResolution.x/iResolution.y;\n     uv+=0.5;\n\n    // straight colors\n    vec3 col1 = vec3(1.0,0.0,0.0);\n    vec3 col2 = vec3(0.0,0.0,1.0);\n    vec3 col3 = vec3(0.0,1.0,0.0);\n    vec3 col4 = vec3(1.0,1.0,0.0);\n\n    float alpha1  = ALPHA1;\n    float alpha2  = ALPHA2;\n    float alpha3  = ALPHA3;\n\n    // circle masks\n \n    \n    float c1 = circle_mask(uv, vec2(0.3,0.5), RADIUS);\n    float c2 = circle_mask(uv, vec2(0.7,0.5), RADIUS);\n    float c3 = circle_mask(uv, vec2(0.5,0.3), RADIUS);\n    \n  \n    \n    vec4 col = vec4(0.0);\n    \n    if (USE_PREMULTIPLIED == 0)\n    {\n    \n        col = blend_over(col,vec4(col1,alpha1)*c1);\n   \n        col = blend_over(col,vec4(col2,alpha2)*c2);\n\n     //   col =  add_shape(uv,vec2(0.4),vec2(RADIUS),vec4(col4,ALPHA_FILL),vec4(col1,ALPHA_BORDER), col) ;\n\n        col = blend_over(col,vec4(col3,alpha3)*c3);\n    }\n    else\n    {\n        col = blend_over_straight(col,vec4(col3,1.0)*c3) ;\n       // col = add_shape(uv,vec2(0.4),vec2(RADIUS),vec4(col4,ALPHA_FILL),vec4(col1,ALPHA_BORDER), col) ;\n\n        col = blend_over_straight(col,vec4(col2,1.0)*c2);\n        col = blend_over_straight(col, vec4(col1,1.0)*c1);\n\n    }\n   \n \n    \n    // Output to screen\n    fragColor = col;//vec4(s1,1.0);\n}","name":"Image","description":"","type":"image"}]}