{"ver":"0.1","info":{"id":"dtfGDN","date":"1671827445","viewed":71,"name":"circles, circles...","username":"ekicam2","description":"Inspired by water in this document https://www.youtube.com/watch?v=uDhqUUXCtMU\n\nTODO:\n1. animate it\n2. make AA prettier\n\nHonestly I don't know at this point how to achieve any of these, any help appreciated :)","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["2d","circles","pattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// AA == 0 : no anti aliasing at all, sharp corenrs and blocky shapes :>\n// AA == 1 : naive anti aliasing which looks awfully \n#define AA 1\n\nvec2 calc_uv(in vec2 pix_pos, in vec2 offset) {\n    return (pix_pos + offset) / iResolution.xy;\n}\n\nvec3 get_color(in sampler2D sampler, in vec2 frag_coord) {\n    vec3 color = vec3(0.0);\n#if AA == 1\n    // play with weights to see how it affects the image\n    // for me something like that seems most appealing\n    const float c_w = 0.57;\n    const float n_w = (1.0-c_w)/8.0;\n    \n\n    color += texture(sampler, calc_uv(frag_coord, vec2(-1., -1.))).rgb * n_w;\n    color += texture(sampler, calc_uv(frag_coord, vec2( 0., -1.))).rgb * n_w;\n    color += texture(sampler, calc_uv(frag_coord, vec2( 1., -1.))).rgb * n_w;\n    \n    color += texture(sampler, calc_uv(frag_coord, vec2(-1.,  0.))).rgb * n_w;\n    color += texture(sampler, calc_uv(frag_coord, vec2( 0.,  0.))).rgb * c_w;\n    color += texture(sampler, calc_uv(frag_coord, vec2( 1.,  0.))).rgb * n_w;\n    \n    color += texture(sampler, calc_uv(frag_coord, vec2(-1.,  1.))).rgb * n_w;\n    color += texture(sampler, calc_uv(frag_coord, vec2( 0.,  1.))).rgb * n_w;\n    color += texture(sampler, calc_uv(frag_coord, vec2( 1.,  1.))).rgb * n_w;\n#else\n    vec2 uv = frag_coord / iResolution.xy;\n    color = texture(sampler, uv).rgb;\n#endif\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec3 color = vec3(0.0);\n\n    float div = iResolution.x*0.5;\n\n    if (iMouse.z > 0.5) {\n        div = iMouse.x;\n    }\n\n    if (fragCoord.x < div) {\n        color = get_color(iChannel0, fragCoord);\n    } else {\n        color = get_color(iChannel1, fragCoord);\n    }\n    \n    color = mix(vec3(0.65, 0.0, 0.0), color, smoothstep(0.5, 0.8, abs(div - fragCoord.x)));\n\n    fragColor = vec4(color, 0.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float circle(in vec2 p, in vec2 o, in float r) { return distance(p, o) - r; }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y; // [-1,1] vertically\n    uv += vec2(0.0, 0.071);\n    \n    const float r = 0.3;\n    const float cd = 26.0;\n    \n    const float xo = 0.52;\n    const float yo = 0.16;\n    \n    float d = 0.0;\n    \n    int cnt = 0;\n    for(float j = 1.; j > -1.2; j -= yo) {\n        for(float i = -4.0; i < 4.0; i += xo) {\n            float c = circle(uv, vec2(i + (0.26* float(cnt % 2)),j), r);\n            float m = 1.0-step(0., c);\n            d = mix(d, step(0.5,fract(cd*c)) * m, m);\n\n        }\n        ++cnt;\n    }\n\n    \n    vec3 col = mix(\n        vec3(0.82, 0.59, 0.05),\n        vec3(0.0365, 0.024, 0.555),\n        d);\n\n    col = pow(col, vec3(1.0/2.2));\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"float circle(in vec2 p, in vec2 o, in float r) { return distance(p, o) - r; }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y; // [-1,1] vertically\n    uv += vec2(0.0, 0.071);\n    \n    const float r = 0.3;\n    const float cd = 26.0;\n    \n    const float xo = 0.52;\n    const float yo = 0.16;\n    \n    float d = 0.0;\n    \n    int cnt = 0;\n    for(float j = 1.; j > -1.2; j -= yo) {\n        for(float i = -4.0; i < 4.0; i += xo) {\n            float c = circle(uv, vec2(i + (0.26* float(cnt % 2)),j), r);\n            float m = 1.0-smoothstep(0., 0.0003, c);\n            d = mix(d, fract(cd*c) * m, m);\n\n        }\n        ++cnt;\n    }\n\n    \n    vec3 col = mix(\n        vec3(0.82, 0.59, 0.05),\n        vec3(0.42, 0.29, 0.05),\n        d);\n\n    col = pow(col, vec3(1.0/2.2));\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}