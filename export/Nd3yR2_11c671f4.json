{"ver":"0.1","info":{"id":"Nd3yR2","date":"1653688994","viewed":93,"name":"Multi-Mandelbrot rotation","username":"kugge","description":"Multibrot rotation","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["test","julia","mandelbrot","complex"],"hasliked":0,"parentid":"ftBfDD","parentname":"Mandelbrot zoom (test)"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926538\n// Complex Number math by julesb\n// https://github.com/julesb/glsl-util\n// Additions by Johan Karlsson (DonKarlssonSan)\n\n#define cx_mul(a, b) vec2(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x)\n#define cx_div(a, b) vec2(((a.x*b.x+a.y*b.y)/(b.x*b.x+b.y*b.y)),((a.y*b.x-a.x*b.y)/(b.x*b.x+b.y*b.y)))\n#define cx_modulus(a) length(a)\n#define cx_conj(a) vec2(a.x, -a.y)\n#define cx_arg(a) atan(a.y, a.x)\n#define cx_sin(a) vec2(sin(a.x) * cosh(a.y), cos(a.x) * sinh(a.y))\n#define cx_cos(a) vec2(cos(a.x) * cosh(a.y), -sin(a.x) * sinh(a.y))\n\nvec2 cx_sqrt(vec2 a) {\n    float r = length(a);\n    float rpart = sqrt(0.5*(r+a.x));\n    float ipart = sqrt(0.5*(r-a.x));\n    if (a.y < 0.0) ipart = -ipart;\n    return vec2(rpart,ipart);\n}\n\nvec2 cx_tan(vec2 a) {return cx_div(cx_sin(a), cx_cos(a)); }\n\nvec2 cx_log(vec2 a) {\n    float rpart = sqrt((a.x*a.x)+(a.y*a.y));\n    float ipart = atan(a.y,a.x);\n    if (ipart > PI) ipart=ipart-(2.0*PI);\n    return vec2(log(rpart),ipart);\n}\n\nvec2 cx_mobius(vec2 a) {\n    vec2 c1 = a - vec2(1.0,0.0);\n    vec2 c2 = a + vec2(1.0,0.0);\n    return cx_div(c1, c2);\n}\n\nvec2 cx_z_plus_one_over_z(vec2 a) {\n    return a + cx_div(vec2(1.0,0.0), a);\n}\n\nvec2 cx_z_squared_plus_c(vec2 z, vec2 c) {\n    return cx_mul(z, z) + c;\n}\n\nvec2 cx_sin_of_one_over_z(vec2 z) {\n    return cx_sin(cx_div(vec2(1.0,0.0), z));\n}\n\n////////////////////////////////////////////////////////////\n// end Complex Number math by julesb\n////////////////////////////////////////////////////////////\n\n// My own additions to complex number math\n#define cx_sub(a, b) vec2(a.x - b.x, a.y - b.y)\n#define cx_add(a, b) vec2(a.x + b.x, a.y + b.y)\n#define cx_abs(a) length(a)\nvec2 cx_to_polar(vec2 a) {\n    float phi = atan(a.y / a.x);\n    float r = length(a);\n    return vec2(r, phi); \n}\n    \n// Complex power\n// Let z = r(cos θ + i sin θ)\n// Then z^n = r^n (cos nθ + i sin nθ)\nvec2 cx_pow(vec2 a, float n) {\n    float angle = atan(a.y, a.x);\n    float r = length(a);\n    float real = pow(r, n) * cos(n*angle);\n    float im = pow(r, n) * sin(n*angle);\n    return vec2(real, im);\n}\n\n// START MULTI-MANDELBROT PROJECT\n\n#define maxIter 256.\n#define maxNorm 1000.\n\n\n// Color palette\nvec3 color(float v) {\n    vec3 co;\n    if(v == 1.)       co = vec3(25, 7, 26);\n    else if(v == 2.)  co = vec3(9, 1, 47);\n    else if(v == 3.)  co = vec3(4, 4, 73);\n    else if(v == 4.)  co = vec3(0, 7, 100);\n    else if(v == 5.)  co = vec3(12, 44, 138);\n    else if(v == 6.)  co = vec3(24, 82, 177);\n    else if(v == 7.)  co = vec3(57, 125, 209);\n    else if(v == 8.)  co = vec3(134, 181, 229);\n    else if(v == 9.)  co = vec3(211, 236, 248);\n    else if(v == 10.) co = vec3(241, 233, 191);\n    else if(v == 11.) co = vec3(248, 201, 95);\n    else if(v == 12.) co = vec3(255, 170, 0);\n    else if(v == 13.) co = vec3(204, 128, 0);\n   \telse if(v == 14.) co = vec3(153, 87, 0);\n    else if(v == 15.) co = vec3(106, 52, 3);\n    return co / 256.0;;\n}\n\n// Iterate mandelbrot sequence z² + c\nfloat iterMandelbrot(vec2 c, float powe) { \n    float i = 0.;\n    vec2 z = vec2(0.); // u_0\n    \n    for (i = 0.; i<maxIter; ++i) {\n        if (dot(z, z) > maxNorm) break;\n        z = cx_pow(z, powe) + c;\n    }\n    float lz = log(dot(z, z)) / 2.; // log(||z||)\n    float nu = log(lz / log(2.)) / log(2.);\n    return i;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy; // Normalize\n    uv -= 0.5; // Center\n    uv.x *= iResolution.x/iResolution.y;\n    uv *= 2.5;\n    uv.x -= 0.5;\n\n    float powe = float(iFrame)/120.+1.;\n    \n    float d = iterMandelbrot(uv, powe);\n    vec3 col = color(mod(d, 16.));\n    fragColor = vec4(col, 1.);\n}\n","name":"Image","description":"","type":"image"}]}