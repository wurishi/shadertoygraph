{"ver":"0.1","info":{"id":"MlVyD3","date":"1538407378","viewed":158,"name":"Eye of a Hurricane","username":"Shadeyboi","description":"Beginning of nature project to have a top-view of a hurricane design (Nature project 2/3)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["natureproject"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define repeat(v, r) (mod(v, r)-r/2.)\n\nstruct Shape{\n  float dist;\n  vec4 color;\n};\n\n\n    \n//=======================\n// Utility Functions\n//=======================\nfloat random(vec2 v) {\n  return fract(sin(dot(v*0.1, vec2(324.654, 156.546)))*46556.2);\n}\n\nmat2 rot(float a){\n  float r = cos(a);\n  float f = sin(a);\n  return mat2(r, -f, f, r);\n}\n\n\nfloat pole(vec2 v, float r){\n  return length(v)-r*2.;\n}\nfloat sphere(vec3 v, float r){\n  return length(v)-r;\n}\nfloat box(vec3 v, float r, float m) {\n  return max(length(v.xy), abs(v.z)-m);\n}\n\n\n\nfloat mixColors(float r, float v, float z){\n  return clamp((v-r), 0., 1.);\n}\n\nfloat mixShapes(float v, float f, float r){\n  float z = mixColors(v, f, r);\n  return mix(f,v,z)-r*z*(1.-z);\n}\n\nfloat pModPolar(inout vec2 v, float r){\n  float f = 6.28318/r;\n  float z = atan(v.y, v.x);\n  float m = floor(z/f)+z;\n  z = mod(z, f)-f*.5;\n  v = vec2(cos(z), sin(z))*length(v);\n  return m;\n}\n//=======================\n\nShape storm(vec3 c){\n  Shape shape;\n  float wall;\n  shape.dist = 1000.; // Draw Distance\n  shape.color = vec4(1.); // Initial Color\n\n  // Shape Attributes\n  float twist = 30.; // Hurricane piece Repeat\n  float wallOffset = 4.; // Column Offset, affects camera view\n\n\n  // Stems\n  vec3 i = c;\n    i.yz *= rot(c.y*0.1+1.5); //Shows top-view of hurricane\n    i.xz *= rot(c.y*.1+iTime*.1); //Spins hurricane, last float controls speed\n    float detail = pModPolar(i.xz, twist*1.1); \n    float x = mix(0., 1., mod(detail, 7.6)); // Split column orbs\n    i.x -= wallOffset-.5; // Offset columns\n  \tfloat stemWidth = .7; //Oscillates width of columns\n  \twall = pole(i.xz, stemWidth+.06*sin(i.y*x));\n\n\n  vec4 color = vec4(.7, .6, .7, .5);\n\t\t//Oscillates colors through most of R-B, and down to black\n  shape.dist = wall;\n  shape.color = color;\n    \n  float pattern = cos(sin(c.z*5.)) / cos(sin(c.y*2.));\n  shape.color /= pattern;\n\n  return shape;\n}\n\n\nShape map(vec3 c){\n  Shape hurricane = storm(c);\n  return hurricane;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 v = (fragCoord.xy-0.5 * iResolution.xy) / iResolution.y;\n\n  \n  vec3 cam = vec3(cos(iTime)*.1, sin(iTime)*.1, -11.);\n    //Above trig functions rotate camera around perimeter of hurricane\n    //Also effect the speed of movement around the hurricane\n  vec3 f = normalize(vec3(v, 1.));\n  vec3 scene = cam;\n  fragColor = vec4(.7, .7, .7, .85); //Sets a cloudy/stormy gray background\n\n  // Ray Marcher\n  for(float z = 0.1 ; z <= 1.; z += 0.04){\n    Shape c = map(scene); // Calc SDF\n    if(c.dist < 0.015){\n      fragColor = c.color*(1.-z); // Hit  - invert pixels\n      break;\n    }\n    scene += f * c.dist;\n\n\n  }\n}\n","name":"Image","description":"","type":"image"}]}