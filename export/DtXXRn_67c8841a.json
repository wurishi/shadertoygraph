{"ver":"0.1","info":{"id":"DtXXRn","date":"1674165320","viewed":139,"name":"Planar Quadrilateral Grid","username":"jt","description":"An C0 continuous surface constructed of PLANAR quadrilaterals aligned in a grid (using voxel ray-casting for acceleration).\nEntire structure is determined by two ONE-dimensional arrays.\nThis structure could actually be built out of planar flat wood planks","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["grid","heightmap","architecture","construction","planar","continuous","building","zonohedron","c0","quadrilaterals"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/DtXXRn Planar Quadrilateral Grid by jt\n// based on https://www.shadertoy.com/view/NstSR8 Cast Voxels March Sub-Objects\n\n// An C0 continuous surface constructed of PLANAR quadrilaterals aligned in a grid.\n// Using voxel ray-casting for acceleration and simple ray-plane distance inside voxel.\n// (planes could also be ray-traced but using ray-marching potentially allows cheap AO).\n// Note that the entire structure is determined by two ONE-dimensional arrays of heights\n// (one along x and one along y direction): all slopes in one direction must be the same!\n// This structure could be used to build a roof fairly easily because all tiles are flat.\n\n// tags: grid, heightmap, architecture, construction, planar, continuous, building, zonohedron, c0, quadrilaterals\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n//#define BOUNDING_BOX_FROM_DDA // XXX causes a hole-like artifact in a specific region (zero grid cell?) XXX\n\n#ifdef BOUNDING_BOX_FROM_DDA\n#else\nvec2 boxIntersection( vec2 ro, vec2 rd, vec2 boxSize ) // https://iquilezles.org/articles/intersectors\n{\n    vec2 m = 1.0/rd;\n    vec2 n = m*ro;\n    vec2 k = abs(m)*boxSize;\n    vec2 t1 = -n - k;\n    vec2 t2 = -n + k;\n    float tN = max( t1.x, t1.y );\n    float tF = min( t2.x, t2.y );\n    if( tN>tF || tF<0.0) return vec2(-1.0);\n    return vec2( tN, tF );\n}\n#endif\n\n#define MAX_DIST 1000.0\n\nfloat sdPlane(vec3 p, vec2 h)\n{\n    vec3 n = normalize(vec3(h, 1.0));\n    return dot(p, n);\n}\n\nint safemod(int x, int y) // I hope this solves the windows % problem\n{\n    y = abs(y);\n    return sign(x) < 0 ? y - (abs(x) % y) : (abs(x) % y);\n}\n\n#define pi 3.1415926\n\n#define COUNT 8\n//float hs[COUNT] = float[](0.0, 0.75, 1.0, 0.75, 0.0,-0.75,-1.0,-0.75);\n//float hs[COUNT] = float[](sin(2.0 * pi * 0.0 / 8.0), sin(2.0 * pi * 1.0 / 8.0), sin(2.0 * pi * 2.0 / 8.0), sin(2.0 * pi * 3.0 / 8.0), sin(2.0 * pi * 4.0 / 8.0), sin(2.0 * pi * 5.0 / 8.0), sin(2.0 * pi * 6.0 / 8.0), sin(2.0 * pi * 7.0 / 8.0));\n/*\nfloat scene(ivec2 mapPos, vec3 p)\n{\n    p -= vec3(mapPos, 0.0); // local coordinates inside tile\n\n    vec2 t = vec2(iTime) / vec2(1,2);\n    // can be replaced by precalculated constants\n    vec2 h[COUNT] =\n        vec2[]\n        (\n            sin(t + 2.0 * pi * 0.0 / 8.0),\n            sin(t + 2.0 * pi * 1.0 / 8.0),\n            sin(t + 2.0 * pi * 2.0 / 8.0),\n            sin(t + 2.0 * pi * 3.0 / 8.0),\n            sin(t + 2.0 * pi * 4.0 / 8.0),\n            sin(t + 2.0 * pi * 5.0 / 8.0),\n            sin(t + 2.0 * pi * 6.0 / 8.0),\n            sin(t + 2.0 * pi * 7.0 / 8.0)\n        );\n\n    float magic_constant = 1.2;\n    vec2 hm = vec2(h[safemod(4+mapPos.x - 1, COUNT)].x, h[safemod(4+mapPos.y - 1, COUNT)].y);\n    //vec2 hc = h[savemod(4+mapPos.x    , COUNT)];\n    vec2 hp = vec2(h[safemod(4+mapPos.x + 1, COUNT)].x, h[safemod(4+mapPos.y + 1, COUNT)].y);\n    return sdPlane(p-vec3(0,0,1.0-dot(vec2(magic_constant),(hp + hm)/2.0)), vec2((hp - hm).x/2.0, (hp - hm).y/2.0));\n}\n*/\nfloat scene(ivec2 mapPos, vec3 p)\n{\n    p -= vec3(mapPos, 0.0); // local coordinates inside tile\n\n    vec2 t = vec2(iTime) / vec2(1,2);\n    // can be replaced by precalculated constants\n    vec2 h[COUNT] =\n        vec2[]\n        (\n            sin(t + 2.0 * pi * 0.0 / 8.0),\n            sin(t + 2.0 * pi * 1.0 / 8.0),\n            sin(t + 2.0 * pi * 2.0 / 8.0),\n            sin(t + 2.0 * pi * 3.0 / 8.0),\n            sin(t + 2.0 * pi * 4.0 / 8.0),\n            sin(t + 2.0 * pi * 5.0 / 8.0),\n            sin(t + 2.0 * pi * 6.0 / 8.0),\n            sin(t + 2.0 * pi * 7.0 / 8.0)\n        );\n\n    vec2 hm = vec2(h[safemod(4+mapPos.x + 0, COUNT)].x, h[safemod(4+mapPos.y + 0, COUNT)].y);\n    vec2 hp = vec2(h[safemod(4+mapPos.x + 1, COUNT)].x, h[safemod(4+mapPos.y + 1, COUNT)].y);\n    return sdPlane(p-vec3(0,0,1.0-dot(vec2(0.5),(hp + hm)/2.0)), vec2((hp - hm).x/2.0, (hp - hm).y/2.0));\n}\n\nfloat checker(vec2 p)\n{\n    if(cos(iTime/6.0) < 0.0) p += 0.5;\n    return step(0.0, sin(pi * p.x + pi/2.0)*sin(pi *p.y + pi/2.0));\n}\n\nmat2 rotate(float t)\n{\n    return mat2(vec2(cos(t), sin(t)), vec2(-sin(t), cos(t)));\n}\n\n#define EPSILON 0.001\n\n#define MAX_ITER 100\n\n// raymarch subobject\nfloat march(ivec2 mapPos, vec3 ro, vec3 rd, float tmin, float tmax)\n{\n    int i;\n    float t;\n    for(t = tmin, i = 0; t < tmax && i < MAX_ITER; i++)\n    {\n        float h = scene(mapPos, ro + rd * t);\n        if(h < EPSILON)\n            return t;\n        t += h;\n    }\n    return MAX_DIST;\n}\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal(ivec2 mapPos, vec3 p)\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return normalize(k.xyy * scene(mapPos, p + k.xyy * h) +\n                     k.yyx * scene(mapPos, p + k.yyx * h) +\n                     k.yxy * scene(mapPos, p + k.yxy * h) +\n                     k.xxx * scene(mapPos, p + k.xxx * h));\n}\n\n// (could also be named process_voxel or process_cell)\nvec4 process_subobject(ivec2 mapPos, vec3 ro, vec3 rd, float tmin, float tmax)\n{\n    float d = march(mapPos, ro, rd, tmin, tmax);\n    vec3 n = normal(mapPos, ro + rd * d);\n\n    d = d < tmax ? d : MAX_DIST; // should not be necessary - just in case...\n    return vec4(n, d);\n}\n\n#define MAX_RAY_STEPS 64\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 I )\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    //I = 2.0 * I.xy / R - 1.0;\n    //I.x *= R.x / R.y;\n    I = (2.0 * I - R) / R.y; // concise scaling thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : 1.25 * pi / 2.0;\n\n    vec3 ro = vec3(0.0, 0.0, -5.0 );\n    vec3 rd = normalize(vec3(I.xy, 2.0)); // NOTE: omitting normalization results in clipped edges artifact\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n    \n    ro.z += 2.0;\n    vec3 color = vec3(0);\n    vec4 result = vec4(vec3(0.0), MAX_DIST);\n\n    {\n        // Initialization of https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting\n        vec2 deltaDist = 1.0 / abs(rd.xy);\n        ivec2 rayStep = ivec2(sign(rd));\n        ivec2 mapPos = ivec2(floor(ro));\n        vec2 sideDist = (sign(rd.xy) * (vec2(mapPos) - ro.xy) + (sign(rd.xy) * 0.5) + 0.5) * deltaDist;\n\n#ifdef BOUNDING_BOX_FROM_DDA\n        float tmin = length(vec2(lessThanEqual(sideDist.xy, sideDist.yx)) * sideDist) / length(rd);\n#endif\n        for (int i = 0; i < MAX_RAY_STEPS; i++)\n        //for (int i = min(iFrame,0); i < MAX_RAY_STEPS; i++) // prevent unrolling loop to prevent crash\n        {\n            {\n#ifdef BOUNDING_BOX_FROM_DDA\n                // try to reconstruct far distance to bounding box from DDA:\n                float tmax = length(vec2(lessThanEqual(sideDist.xy, sideDist.yx)) * sideDist) / length(rd); // hopefully this is correct...\n#else\n                // It appears to be safer to just do the box-intersection here (potential for optimization).\n                vec2 bounds = boxIntersection(ro.xy - vec2(mapPos) - 0.5, rd.xy, vec2(0.5)); // bounding box\n                float tmin = bounds.x; float tmax = bounds.y;\n#endif\n                result = process_subobject(mapPos, ro - 0.5, rd, tmin, tmax);\n#ifdef BOUNDING_BOX_FROM_DDA\n                tmin = tmax;\n#endif\n                if(result.w > 0.0 && result.w < MAX_DIST)\n                {\n                    color = vec3(1.0);\n                    //color *= 0.5 + 0.5 * normalize(result.xyz);\n                    vec3 dst = ro + rd * result.w;\n                    vec3 n = result.xyz;\n                    color = mix(color, 0.5 + 0.5 * n, 0.5 + 0.5 * sin(iTime/5.0));\n                    color = mix(color, vec3(0.5 + 0.5 * checker(dst.xy)), 0.5 + 0.5 * cos(iTime/3.0));\n\n                    break;\n                }\n            }\n            // Core from https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting\n            // https://en.wikipedia.org/wiki/Digital_differential_analyzer_(graphics_algorithm)\n            // \"The [voxel] raycasting code is somewhat based around a 2D raycasting tutorial found here:\n            //  http://lodev.org/cgtutor/raycasting.html\" (fb39ca4)\n            bvec2 mask = lessThanEqual(sideDist.xy, sideDist.yx);\n            sideDist += vec2(mask) * deltaDist;\n            mapPos += ivec2(vec2(mask)) * rayStep;\n        }\n    }\n\n    vec3 ambient = vec3(0.1);\n    vec3 lightdir = normalize(vec3(3.0, 2.0, 1.0));\n    color *= mix(ambient, vec3(1.0), clamp(dot(lightdir, result.xyz), 0.0, 1.0));\n\n    fragColor = vec4(sqrt(color), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}