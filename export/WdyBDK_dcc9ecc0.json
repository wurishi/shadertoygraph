{"ver":"0.1","info":{"id":"WdyBDK","date":"1608018843","viewed":178,"name":"Density Diffuse","username":"bluebean","description":"Density diffuse with time\nMouse click to add Density\nFrom Jos Stam's <<the art of fluid animation>>","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["diffuse"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nA = B + Source\nB = Solve(A)\nOut = B\n*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    fragColor = texture(iChannel0,uv); \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n//作为基础的随机函数\nfloat hash21(vec2 p)\n{\n\treturn fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n//基于晶格的值噪声\nfloat value_noise(vec2 p){\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n    // Ease Curve 平滑曲线\n    vec2 u = f*f*f*(6.0*f*f - 15.0*f + 10.0);\n    \n    return mix(mix(hash21(i+vec2(0.0,0.0)),hash21(i+vec2(1.0,0.0)),u.x),\n               mix(hash21(i+vec2(0.0,1.0)),hash21(i+vec2(1.0,1.0)),u.x),\n               u.y);\n}\n\n\nvec3 AddSource(in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 color = texture(iChannel0, uv).xyz;\n    vec2 dv = iMouse.xy - fragCoord;\n    float dist = dv.x*dv.x + dv.y*dv.y;\n    if(iMouse.z>0.01 && dist<1000.0){\n        vec2 p = vec2(iTime,iTime)+fragCoord*0.1;\n       color += vec3(value_noise(p),value_noise(p+1.1),value_noise(p+2.2))*0.25;\n    }\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    vec3 color = AddSource(fragCoord);\n    fragColor = vec4(color,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec3 LinSolver(in vec2 fragCoord,vec3 a,vec3 c)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 pixelSize = 1. / iResolution.xy;\n    vec2 d = pixelSize*1.0;\n    vec3 color = texture(iChannel0, uv).xyz;\n    vec3 left = texture(iChannel0, uv + d*vec2(-1,0)).xyz;\n    vec3 right = texture(iChannel0, uv + d*vec2(1,0)).xyz;\n    vec3 up = texture(iChannel0, uv + d*vec2(0,1.0)).xyz;\n    vec3 down = texture(iChannel0, uv + d*vec2(0,-1.0)).xyz;\n    vec3 newColor = color;\n    for(int i=0;i<25;i++){\n        newColor = (color + (left+right+up+down)*a)/c;\n    }\n    return newColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float diffuse = iTimeDelta*iResolution.x*iResolution.y*1.1;\n    vec3 a = vec3(diffuse,diffuse*1.4,diffuse*3.2);\n    vec3 color = LinSolver(fragCoord,a,1.0+4.0*a);\n    fragColor = vec4(color, 1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}