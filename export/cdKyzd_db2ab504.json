{"ver":"0.1","info":{"id":"cdKyzd","date":"1696471229","viewed":44,"name":"kinda cool record disc","username":"nextrix","description":"idk kinda looks cool","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["circle","rotate","iq","fisheye","mirror","record"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// basically just hella ripples the uhh hexagram (zoomed out) as u can see in the center\n// also is the abs(uv) so it has 4 segments that are all rotateable instead of fract(uv) which rotates all uv's individually (doesnt look that good)\n\n// i could optimize it by just makin a ripple distortion but i dont feel like it :\\\n\n\n#define SIZE 0.1\n#define DIST 0.25\n#define FADE 4.6\n#define SPEED 0.75 // lower = faster\n#define ITERATIONS 3.5\n\nvec2 rot(vec2 v, float a) {  // rot matrix\n    \n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, s, -s, c);\n\treturn m * v;\n}\n\n//maybe borrowed from iq\nfloat sdHexagram( in vec2 p, in float r )\n{\n    const vec4 k = vec4(-0.5,0.8660254038,0.5773502692,1.7320508076);\n    p = abs(p);\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    p -= 2.0*min(dot(k.yx,p),0.0)*k.yx;\n    p -= vec2(clamp(p.x,r*k.z,r*k.w),r);\n    return length(p)*sign(p.y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord/iResolution.xy - 0.5;\n\n    // borrowed fisheye from https://www.shadertoy.com/view/4s2GRR\n\n    vec2 p = fragCoord.xy / iResolution.x;//normalized coords with some cheat\n\t                                                         //(assume 1:1 prop)\n\tfloat prop = iResolution.x / iResolution.y;//screen proroption\n\tvec2 m = vec2(0.5, 0.5 / prop);//center coords\n\tvec2 d = p - m;//vector from center to current fragment\n\tfloat r = sqrt(dot(d, d)); // distance of pixel from center\n\n\tfloat power = ( 2.0 * 3.141592 / (2.0 * sqrt(dot(m, m))) ) *\n\t\t\t\t(-10000.0 / iResolution.x - 0.5);//amount of effect\n\n\tfloat bind;//radius of 1:1 effect\n\tif (power > 0.0) bind = sqrt(dot(m, m));//stick to corners\n\telse {if (prop < 1.0) bind = m.x; else bind = m.y;}//stick to borders\n\n\tuv = m + normalize(d) * tan(r * power) * bind / tan( bind * power);\n    \n    \n    \n    uv = rot(vec2(uv.x - 0.5, uv.y - 0.285) * ITERATIONS, iTime/SPEED); // rotate uv\n    \n    float spiralThing = sdHexagram(abs(uv)-DIST, SIZE); // create mirror quad\n    \n    spiralThing = spiralThing * FADE; // add fade\n\n    vec3 col = vec3(spiralThing) - 0.1;\n    \n    //col += 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4)); // add rgb\n\n    fragColor = vec4(col/-0.3,1.0);\n    //fragColor = vec4(col/-0.3,1.0);  uncomment to make white\n}","name":"Image","description":"","type":"image"}]}