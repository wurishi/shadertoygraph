{"ver":"0.1","info":{"id":"msGBWR","date":"1698108361","viewed":162,"name":"Hinged Hexagon UV","username":"fad","description":"Hinged hexagon tiling with UV mapping\nSee also: [url=/view/dsGBDR]truchet version[/url]","likes":5,"published":3,"flags":0,"usePreview":1,"tags":["texture","map","mapping","tiling","hex","tessellation","hinge"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.1415927;\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    vec2 R = iResolution.xy;\n    vec2 p = (2.0 * fragCoord - R) / R.y * 4.0;\n    float t = 1.0 - abs(1.0 - mod(iTime / 3.0, 2.0));\n    float a = smoothstep(0.0, 1.0, smoothstep(0.0, 1.0, t)) * PI / 3.0;\n    mat2 A = mat2(sqrt(3.0), 1.0, 0.0, 2.0);\n    vec2 b = inverse(A) * p / cos(a - PI / 6.0);\n    vec2 c = fract(b);\n    vec2 d = floor(b) + step((clamp(3.0 * c, 1.0, 2.0) - c).yx, 2.0 * c);\n    vec2 e = p - A * d * cos(a - PI / 6.0);\n    a = mod(d.x + d.y, 2.0) == 1.0 ? -a : a; // use anything to determine spin direction!\n    e = mat2(cos(a), sin(a), -sin(a), cos(a)) * e;\n    vec2 uv = e + A * sqrt(0.75) * d;\n    uv = (uv / 4.0 * R.y + R) / 2.0 / R;\n    vec2 f = abs(e);\n    float g = max(f.y, sqrt(0.75) * f.x + 0.5 * f.y) - sqrt(0.75);\n    fragColor = step(g, 0.0) * texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"}]}