{"ver":"0.1","info":{"id":"fsXfRj","date":"1645036212","viewed":264,"name":"Naos Wind Circulation Test","username":"zhannum","description":"Generates pressure systems (click to show) and wind flow patterns from a land/ocean map.\n\nBased on [url=https://web.archive.org/web/20130619132254/http://jc.tech-galaxy.com/bricka/climate_cookbook.html]The Climate Cookbook[/url] and some simple modelling.","likes":9,"published":1,"flags":32,"usePreview":0,"tags":["simulation","earth","map","flow","vector","model","atmosphere","particle","wind","pressure","circulation","climate"],"hasliked":0,"parentid":"MdGBWG","parentname":"Global Wind Circulation"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// comment out the following line for original style\n#define PAPER\n\n// uncomment the following line for Mollweide projection\n//#define ELLIPTICAL\n\n#ifdef PAPER\n#define  LOW_PRESSURE vec3(0.,0.5,1.)\n#define HIGH_PRESSURE vec3(1.,0.5,0.)\n#else\n#define  LOW_PRESSURE vec3(1.,0.5,0.)\n#define HIGH_PRESSURE vec3(0.,0.5,1.)\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float lat = 180. * fragCoord.y/iResolution.y - 90.;\n#ifdef ELLIPTICAL\n    fragCoord.x -= iResolution.x/2.;\n    fragCoord.x /= sqrt(1. - pow(lat/90., 2.));\n    if (abs(fragCoord.x/iResolution.x) > 0.5) return;\n    fragCoord.x += iResolution.x/2.;\n    fragCoord.x -= 0.05 * iTime * iResolution.x;\n    fragCoord.x -= iMouse.x;\n    fragCoord.x = mod(fragCoord.x, iResolution.x);\n#endif\n    vec2 p = fragCoord * MAPRES / iResolution.xy;\n    if (p.x < 1.) p.x = 1.;\n    vec2 uv = p / iResolution.xy;\n    float land = texture(iChannel0, uv).x;\n    fragColor = vec4(0,0,0,1);\n    if (0.25 < land && land < 0.75) fragColor.rgb = vec3(0.5);\n    float mbar = texture(iChannel1, uv + PASS3).x;\n    if (iMouse.z > 0.) {\n        vec3 r = LOW_PRESSURE;\n        r = mix(r, vec3(0), smoothstep(1000., 1012., floor(mbar)));\n        r = mix(r, HIGH_PRESSURE, smoothstep(1012., 1024., floor(mbar)));\n        fragColor.rgb += 0.5 * r;\n    } else {\n        vec2 v = texture(iChannel1, uv + PASS4).xy;\n        float flow = texture(iChannel2, fragCoord/iResolution.xy).z;\n        vec3 hue = vec3(1.,0.75,0.5);\n#ifndef PAPER\n        hue = .6 + .6 * cos(atan(v.y,v.x) + vec3(0,23,21));\n#endif\n        float alpha = clamp(length(v), 0., 1.) * flow;\n        fragColor.rgb = mix(fragColor.rgb, hue, alpha);\n    }\n#ifdef PAPER\n    fragColor.rgb = 0.9 - 0.8 * fragColor.rgb;\n    if (mod(fragCoord.x, floor(iResolution.x/36.)) < 1. ||\n        mod(fragCoord.y, floor(iResolution.y/18.)) < 1.)\n        fragColor.rgb = mix(fragColor.rgb, vec3(0.,0.5,1.), 0.2);\n#endif\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define MAPRES vec2(288,144)\n\n#define PASS1 vec2(0.0,0.0)\n#define PASS2 vec2(0.0,0.5)\n#define PASS3 vec2(0.5,0.0)\n#define PASS4 vec2(0.5,0.5)\n\n#define N vec2( 0, 1)\n#define E vec2( 1, 0)\n#define S vec2( 0,-1)\n#define W vec2(-1, 0)\n\n#define PI 3.14159265359\n\n// Hash without Sine\n// Creative Commons Attribution-ShareAlike 4.0 International Public License\n// Created by David Hoskins.\n\n// https://www.shadertoy.com/view/4djSRW\n// Trying to find a Hash function that is the same on ALL systens\n// and doesn't rely on trigonometry functions that change accuracy \n// depending on GPU. \n// New one on the left, sine function on the right.\n// It appears to be the same speed, but I suppose that depends.\n\n// * Note. It still goes wrong eventually!\n// * Try full-screen paused to see details.\n\n\n#define ITERATIONS 4\n\n\n// *** Change these to suit your range of random numbers..\n\n// *** Use this for integer stepped ranges, ie Value-Noise/Perlin noise functions.\n#define HASHSCALE1 .1031\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n#define HASHSCALE4 vec4(.1031, .1030, .0973, .1099)\n\n// For smaller input rangers like audio tick or 0-1 UVs use these...\n//#define HASHSCALE1 443.8975\n//#define HASHSCALE3 vec3(443.897, 441.423, 437.195)\n//#define HASHSCALE4 vec3(443.897, 441.423, 437.195, 444.129)\n\n\n\n//----------------------------------------------------------------------------------------\n//  1 out, 1 in...\nfloat hash11(float p)\n{\n        vec3 p3  = fract(vec3(p) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//----------------------------------------------------------------------------------------\n//  1 out, 2 in...\nfloat hash12(vec2 p)\n{\n        vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//----------------------------------------------------------------------------------------\n//  1 out, 3 in...\nfloat hash13(vec3 p3)\n{\n        p3  = fract(p3 * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//----------------------------------------------------------------------------------------\n//  2 out, 1 in...\nvec2 hash21(float p)\n{\n        vec3 p3 = fract(vec3(p) * HASHSCALE3);\n        p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n//----------------------------------------------------------------------------------------\n///  2 out, 2 in...\nvec2 hash22(vec2 p)\n{\n        vec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n//----------------------------------------------------------------------------------------\n///  2 out, 3 in...\nvec2 hash23(vec3 p3)\n{\n        p3 = fract(p3 * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\n//----------------------------------------------------------------------------------------\n//  3 out, 1 in...\nvec3 hash31(float p)\n{\n   vec3 p3 = fract(vec3(p) * HASHSCALE3);\n   p3 += dot(p3, p3.yzx+19.19);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n\n\n//----------------------------------------------------------------------------------------\n///  3 out, 2 in...\nvec3 hash32(vec2 p)\n{\n        vec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\n//----------------------------------------------------------------------------------------\n///  3 out, 3 in...\nvec3 hash33(vec3 p3)\n{\n        p3 = fract(p3 * HASHSCALE3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 1 in...\nvec4 hash41(float p)\n{\n        vec4 p4 = fract(vec4(p) * HASHSCALE4);\n    p4 += dot(p4, p4.wzxy+19.19);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n    \n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 2 in...\nvec4 hash42(vec2 p)\n{\n        vec4 p4 = fract(vec4(p.xyxy) * HASHSCALE4);\n    p4 += dot(p4, p4.wzxy+19.19);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n\n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 3 in...\nvec4 hash43(vec3 p)\n{\n        vec4 p4 = fract(vec4(p.xyzx)  * HASHSCALE4);\n    p4 += dot(p4, p4.wzxy+19.19);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 4 in...\nvec4 hash44(vec4 p4)\n{\n        p4 = fract(p4  * HASHSCALE4);\n    p4 += dot(p4, p4.wzxy+19.19);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Generated with https://github.com/rkibria/img2shadertoy\nconst vec2 bitmap_size = vec2(288, 144);\nconst int[] palette = int[] (\n0x00000200,\n0x00f0f3f1\n);\nconst int longs_per_line = 9;\nconst int[] bitmap = int[] (\n0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0x00000000, 0x00000000, 0x0007c000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0x00000000, 0x00000000, 0xffff0000, 0x00000fe1, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0x00000000, 0x00000000, 0xffff0000, 0x00000387, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0x00000000, 0x00000000, 0xffffffe0, 0x0000001f, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0x00000000, 0x00000000, 0xfffff000, 0x0000007f, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0x00000000, 0x00000000, 0xffe00000, 0x00000033, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0x00000000, 0x00000000, 0x3ff00000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0x00000000, 0x00000000, 0x00e00000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0x00000000, 0x00000000, 0x00f00000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0x00000000, 0xfd000000, 0x000033c3, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0x00000000, 0x3fe00000, 0x000077ff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0x00000000, 0xfff80000, 0x00007fff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0x00000000, 0xfff00000, 0x00007fff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0x00000000, 0xfffe0000, 0x0000ffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0x00000000, 0xfffe0000, 0x0001ffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0x00000000, 0xffffc000, 0x0001ffff, 0x00000000, 0x30000000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0x00000000, 0xffffc000, 0x0003ffff, 0x00000000, 0x7e000000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0x00000000, 0xfffff000, 0x03ffffff, 0x00000000, 0x4e080000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0x00000000, 0xfffff000, 0x3fffffff, 0x00000000, 0x00380000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0x00000000, 0xfff8f000, 0x7fffffff, 0x00000000, 0x061c0000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0x00000000, 0xff806200, 0xffffffff, 0x00000000, 0x001e0000, 0x00000000, 0x0001e000, 0x00000000,\n0x00000000, 0x00000000, 0xffff0000, 0xffffffff, 0x00000003, 0x001f0000, 0x00000000, 0x0001c000, 0x00000000,\n0x00000000, 0x00000000, 0xffffc000, 0xffffffff, 0x0000003f, 0x001e0000, 0x00000000, 0x00020000, 0x00000000,\n0x00000000, 0x00000000, 0xfffff000, 0xffffffff, 0x000000ff, 0x00300000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0x00000000, 0xfffff800, 0xffffffff, 0x00000fff, 0x00030000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0x00000000, 0xfffffe00, 0xffffffff, 0x00007fff, 0x020383c0, 0x00000000, 0xff800000, 0x0000003f,\n0x00000000, 0x00000000, 0xffffff00, 0xffffffff, 0x0001ffff, 0x020303f0, 0x00000000, 0xff800000, 0x000001ff,\n0x00000000, 0x00000000, 0xffffffe0, 0xffffffff, 0x00ffffff, 0x000203f0, 0x00000000, 0xffc00000, 0x000007ff,\n0x00000000, 0x00000000, 0xfffffff8, 0xffffffff, 0x7fffffff, 0x000001fe, 0x00000000, 0xffc00000, 0x00000fff,\n0x00000000, 0x00000000, 0xfffffffc, 0xffffffff, 0xffffffff, 0x400003ff, 0x00000000, 0xff800000, 0x00003fff,\n0x00000000, 0x00000000, 0xfffffffe, 0xffffffff, 0xffffffff, 0x000000ff, 0x00000000, 0xfe000000, 0x0000ffc3,\n0x00000000, 0x00000000, 0xfffffffe, 0xffffffff, 0xffffffff, 0x0000007f, 0x00000000, 0xfe000000, 0x00004001,\n0x00000000, 0x00000000, 0xfffffffe, 0xffffffff, 0xffffffff, 0x0000000f, 0x00000000, 0x7e000000, 0x00000000,\n0x00000000, 0x00000000, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000007, 0x00000000, 0x7e000000, 0x00000000,\n0x00000000, 0x80000000, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000003, 0x00000000, 0x7c000000, 0x00000000,\n0x00000000, 0xc0000000, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x30000000, 0x00000000,\n0x00000000, 0xe0000000, 0xffffffff, 0xffffffff, 0xffffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0xe0000000, 0xffffffff, 0xffffffff, 0x3fffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0xe0000000, 0xffffffff, 0xffffffff, 0x03ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0xe0000000, 0xffffffff, 0xffffffff, 0x03ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0xe0000000, 0xffffffff, 0xffffffff, 0x03fffff1, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0xfc000000, 0xffffffff, 0xffffffff, 0x01fffff8, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0xfe000000, 0xffffffff, 0x0fffffff, 0x00fffffc, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0xff000000, 0xffffffff, 0x07ffffff, 0x00fffffc, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0xff800000, 0xffffffff, 0x03ffffff, 0x007ffffc, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0xffe00000, 0xffffffff, 0x03ffffff, 0x003ffff8, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0xfff00000, 0xffffffff, 0x01ffffff, 0x001ffff8, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0xfff00000, 0xffffffff, 0x01ffffff, 0x000ffff8, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0x7ff00000, 0xfffffffe, 0x007fffff, 0x0007fff8, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0x7ff00000, 0xfffffffc, 0x0007ffff, 0x0007fffc, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0x7ff00000, 0xfffffff8, 0x100fffff, 0x0001ffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0x3fc00000, 0xfffffffc, 0x381fffff, 0x00000ff8, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0x3f800000, 0xffffff9c, 0x201fffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n0x00000000, 0x7f800000, 0xffffff84, 0x001fffff, 0x00000000, 0x00000000, 0x00000000, 0x00000060, 0x00000000,\n0x00000000, 0x7f000000, 0xffffff00, 0x001fffff, 0x00000000, 0x00000000, 0x06000000, 0x00000f70, 0x00000000,\n0x00000000, 0x02000000, 0xfffc1e00, 0x001fffff, 0x00000000, 0x00000000, 0x7f000000, 0x00001eff, 0x00000000,\n0x00000000, 0x00000000, 0xfff80000, 0x003fffff, 0x00000000, 0x00000000, 0xfff1f800, 0x00003fff, 0x00000000,\n0x00000000, 0x00000000, 0xfff80000, 0x003fffff, 0x00000000, 0x00000000, 0xfffff800, 0x0000ffff, 0x00000000,\n0x00000000, 0x00000000, 0xfff80000, 0x007fffff, 0x00000000, 0x00000000, 0xfffffe00, 0x0003ffff, 0x00000000,\n0x00000000, 0x00000000, 0xfffc0000, 0x007fffff, 0x00000000, 0x00000000, 0xfffffe00, 0x000fffff, 0x00000000,\n0x00000000, 0x00000000, 0xfff88800, 0x007fffff, 0x00000000, 0x00000000, 0xfffffc00, 0x001fffff, 0x00000000,\n0x00000000, 0x00000000, 0xfff30c00, 0x00ffffff, 0x00000000, 0x00000000, 0xfffffc00, 0x001fffff, 0x00000000,\n0x00000000, 0x00000000, 0xff800800, 0x01ffffff, 0x00000000, 0x00000000, 0xfffff800, 0x001fffff, 0x00000000,\n0x00000000, 0x00000000, 0xfd000800, 0x03ffffff, 0x00000000, 0x00000000, 0xfffff800, 0x001fffff, 0x00000000,\n0x00000000, 0x00008000, 0xf8001000, 0x03ffffff, 0x00000000, 0x00000000, 0xfffff800, 0x000fffff, 0x00000000,\n0x00000000, 0x0001c200, 0xf8002600, 0x07ffffff, 0x00000000, 0x00000000, 0xfffff000, 0x000fffff, 0x00000000,\n0x00000000, 0x0003e618, 0xf0006f00, 0x0fffffff, 0x00000000, 0x03b80000, 0xfffff800, 0x000fffff, 0x00000000,\n0x00000000, 0x0003f430, 0xf0016700, 0x0fffffff, 0x00000000, 0x033c0000, 0xfffff800, 0x000fffff, 0x00000000,\n0x00000000, 0x000ffc70, 0xf8006f00, 0x0fffffff, 0x00000000, 0x039e0000, 0xfffffc00, 0x000fffff, 0x00000000,\n0x00000000, 0x001ffe70, 0xfc003f00, 0x0fffffff, 0x00000000, 0x033f8000, 0xfffffc00, 0x000fffff, 0x00000000,\n0x00000000, 0x063ffff8, 0xfc007f80, 0x1fffffff, 0x000001e0, 0x039fc000, 0xfffffc00, 0x000fffff, 0x00000000,\n0x00000000, 0x067fffff, 0xfc007fe0, 0x3fffffff, 0x000001f0, 0x0fffc000, 0xfffffc00, 0x000fffff, 0x00000000,\n0xf0000000, 0x067fffff, 0xffc3fff0, 0xffffffff, 0x000001fb, 0x0fdfe000, 0xfffffc00, 0x000fffff, 0x00000000,\n0xf8000000, 0x067fffff, 0xffe7fff8, 0xffffffff, 0x000003e7, 0x1fe3e000, 0xfffffc00, 0x001fffff, 0x00000000,\n0xfe000000, 0x0cffffff, 0xfffffff8, 0xffffffff, 0x000007c7, 0xbfe06000, 0xfffffc00, 0x001fffff, 0x00000000,\n0xff000000, 0x04ffffff, 0xfdfffff0, 0xffffffff, 0x00000107, 0xfff02000, 0xfffffc03, 0x001fffff, 0x00000000,\n0xffc00000, 0x07ffffff, 0xfcfffff8, 0xffffffff, 0x00000006, 0xffe40000, 0xfffffe03, 0x001fffff, 0x00000000,\n0xffc00000, 0x07cfffff, 0xfefffffc, 0xffffffff, 0x00003002, 0xffe00000, 0xffffff83, 0x000fffff, 0x00000000,\n0xffc00000, 0x07067fff, 0xfe7ffffc, 0xffffffff, 0x00001080, 0xfff06000, 0xffffffaf, 0x0007ffff, 0x00000000,\n0xff800000, 0xe6003fff, 0xff3fffff, 0xffffffff, 0x000000c0, 0xffe06000, 0xffffffff, 0x0007ffff, 0x00000000,\n0xff800000, 0xfc003fff, 0xff3fffff, 0xffffffff, 0x000001c3, 0xffc06000, 0xffffffff, 0x0001ffff, 0x00000000,\n0xff800000, 0xf8001fff, 0xff3fffff, 0xffffffff, 0x000000cf, 0xffe06000, 0xffffffff, 0x0001ffff, 0x00000000,\n0xff000000, 0xf0001fff, 0xff9fffff, 0xffffffff, 0x0000007f, 0xffe06000, 0xffffffff, 0x0000ffff, 0x00000000,\n0xff000000, 0xe0003fff, 0xffdfffff, 0xf3ffffff, 0x0000003f, 0xffe06000, 0xffffffff, 0x00007fff, 0x00000000,\n0xff800000, 0x80001fff, 0xffeffe7f, 0xe3ffffff, 0x0000003f, 0xffc16000, 0xffffffff, 0x00007fff, 0x00000000,\n0xff000000, 0x00003fff, 0xfff7fe7e, 0x87ffffff, 0x0000003b, 0xffc3c000, 0xffffffff, 0x00007fff, 0x00000000,\n0xff800000, 0x00001fff, 0xfffb063c, 0x07ffffff, 0x00000010, 0xff81c000, 0xffffffff, 0x0000ffff, 0x00000000,\n0xff800000, 0x00003fff, 0xfff90018, 0x1fffffff, 0x00000000, 0xff86c000, 0xffffffff, 0x00007fff, 0x00000000,\n0xff000000, 0x0000ffff, 0xffff0000, 0x3fffffff, 0x00000000, 0xff80c000, 0xfbffffff, 0x00007fff, 0x00000000,\n0xff000000, 0x0000ffff, 0xffff0000, 0x3fffffff, 0x00000000, 0xff808000, 0xf3ffffff, 0x00007fff, 0x00000000,\n0xff000000, 0x0000ffff, 0xfffe0000, 0x3fffffff, 0x00000000, 0xffc00000, 0xc7ffffff, 0x00007fff, 0x00000000,\n0xff800000, 0x0001ffff, 0xfffe0000, 0x3fffffff, 0x00000000, 0xffe00000, 0x0fffffff, 0x0000ffff, 0x00000000,\n0xffc00000, 0x0033ffff, 0xfffc0000, 0x3fffffff, 0x00000000, 0xfff00000, 0x1fffffff, 0x0000ffe0, 0x00000000,\n0xffc00000, 0x807fffff, 0xff3c0000, 0x07ffffff, 0x00000000, 0xfffe0000, 0x7fffffff, 0x0000ffe0, 0x00000000,\n0xffc00000, 0xffffffff, 0xfc1c0002, 0x01ffffff, 0x00000000, 0xfffc0000, 0x7fffffff, 0x0000ff80, 0x00000000,\n0xff800000, 0xffffffff, 0xc0000000, 0x01ffffff, 0x00000000, 0xfff80000, 0x7fffffff, 0x0000fc00, 0x00000000,\n0xff000000, 0xffffffff, 0x80000000, 0x01ffffff, 0x00000000, 0xfff80000, 0x7fffffff, 0x0000f000, 0x00000000,\n0xfc000000, 0xefffffff, 0x00000000, 0x01fffff8, 0x00000000, 0xfff00000, 0xffffffff, 0x00000000, 0x00000000,\n0xfc000000, 0x40ffffff, 0x00000000, 0x00fffff0, 0x00000000, 0xffc00000, 0xffffffff, 0x00000001, 0x00000000,\n0xfc000000, 0x00e7ffff, 0x00000000, 0x0000fff0, 0x00000000, 0xffc00000, 0xffffffff, 0x00300001, 0x00000000,\n0xf8000000, 0x01c3ffff, 0x00000000, 0x0000f8f0, 0x00000000, 0xffe00000, 0xffffffff, 0x00200003, 0x00000000,\n0xf8000000, 0x01c3ffff, 0x00000000, 0x0000c000, 0x00000000, 0xfff00000, 0xffffffff, 0x00000003, 0x00000000,\n0x00000000, 0x018fffff, 0x00000000, 0x0000c000, 0x80000000, 0xfff00000, 0xffffffff, 0x00000006, 0x00000000,\n0x00000000, 0x001ffffe, 0x00000000, 0x0000c000, 0x00000000, 0xffe00001, 0xffffffff, 0xff000006, 0x0000000f,\n0x00000000, 0x001ffffc, 0x00000000, 0x00000000, 0x00000000, 0xfce00076, 0xffffffff, 0xff000003, 0x0000001f,\n0x00000000, 0x0007fff0, 0x00000000, 0x00000000, 0x00000000, 0xfcc00cfe, 0xffffffff, 0xfe000007, 0x00000003,\n0x00000000, 0x0003ffe0, 0x00000000, 0x00000000, 0x00000000, 0xfcc01ffe, 0xffffffff, 0xfc000007, 0x00000003,\n0x00000000, 0x0002ffc0, 0x00000000, 0x00000000, 0x00000000, 0xe000fffc, 0xffffffff, 0xf8000003, 0x00000007,\n0x00000000, 0x00007b80, 0x00000000, 0x00000000, 0x00000000, 0xf000fff8, 0xffffffff, 0xc0000007, 0x00000007,\n0x00000000, 0x00007000, 0x00000000, 0x00000000, 0x00000000, 0x0000ffe0, 0xfffffffc, 0x0000000f, 0x00000007,\n0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0003fffc, 0xfffffff8, 0x0000001f, 0x00000000,\n0x00000000, 0x00003000, 0x00000000, 0x00000000, 0x80000000, 0x0003ffff, 0xfffff7e0, 0x0000000f, 0x00000008,\n0x00000000, 0x00003800, 0x00000000, 0x00000000, 0xc0000000, 0x000fffff, 0xfffff7c0, 0x00000007, 0x00000078,\n0x00000000, 0x00007000, 0x00000000, 0x00000000, 0xc0000000, 0x001fffff, 0xffff0000, 0x00000001, 0x00000070,\n0x00000000, 0x0000f000, 0x00000000, 0x00000000, 0xf0000000, 0x001fffff, 0xfff00000, 0x00000003, 0x00000000,\n0x00000000, 0x0001fc00, 0x00000000, 0x00000000, 0xff000000, 0x001fc07f, 0xffc00000, 0x00000007, 0x00000000,\n0x00000000, 0x0001fc00, 0x00000000, 0x00000000, 0xff000000, 0x003c021f, 0xffc00000, 0x00000005, 0x00000000,\n0x00000000, 0x0001fe00, 0x00000000, 0x00000000, 0xff000000, 0x0038078f, 0xffc00000, 0x0000000f, 0x00000000,\n0x00000000, 0x0001ff00, 0x00000000, 0x00000000, 0xff000000, 0x003007e3, 0xffc00000, 0x0000007f, 0x00000000,\n0x00000000, 0x0001ffc0, 0x00000000, 0x00000000, 0xfb000000, 0x002001e3, 0xfff08000, 0x0000007f, 0x00000000,\n0x00000000, 0x1f80fffc, 0x00000000, 0x00000000, 0xff800000, 0x002003c7, 0xffff0000, 0x0000001d, 0x00000000,\n0x80000000, 0xff80ffff, 0x00000000, 0x00000000, 0xffc00000, 0x0010000f, 0x3e000000, 0x00000000, 0x00000000,\n0xfcc00000, 0xff807fff, 0x00000001, 0x00000000, 0xffc00000, 0x000c000f, 0x00000000, 0x00000000, 0x00000000,\n0xfff00000, 0xffe07fff, 0x00000001, 0x00000000, 0xffe00000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n0xffff8000, 0xffe1ffff, 0x00000007, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n0xffffc000, 0xf887ffff, 0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n0xfffff800, 0xf83fffff, 0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n0xffffffff, 0xf1ffffff, 0x00000003, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xff9f0000,\n0xffffffff, 0xc3ffffff, 0x00000007, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffff8000,\n0xffffffff, 0x33ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xffffff80,\n0xffffffff, 0xffffffff, 0x000007ff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0xf9f00000, 0xffffffff,\n0xffffffff, 0xffffffff, 0x0003ffff, 0x00000000, 0x00000000, 0xfe1ff800, 0x0e1fffff, 0xfffffe00, 0xffffffff,\n0xffffffff, 0xffffffff, 0x3fffffff, 0x00001000, 0xe2000000, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,\n0xffffffff, 0xffffffff, 0xffffffff, 0xfe3ffffd, 0xfffc021c, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,\n0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,\n0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,\n0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,\n0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,\n0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,\n0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff\n);\n\nint getPaletteIndexXY(in ivec2 fetch_pos) {\n    int palette_index = 0;\n    if(fetch_pos.x >= 0 && fetch_pos.y >= 0\n        && fetch_pos.x < int(bitmap_size.x)&& fetch_pos.y < int(bitmap_size.y)) {\n        int line_index = fetch_pos.y * longs_per_line;\n\n        int long_index = line_index + (fetch_pos.x >> 5);\n        int bitmap_long = bitmap[long_index];\n\n        int bit_index = fetch_pos.x & 0x1f;\n        palette_index = (bitmap_long >> bit_index)& 1;\n    }\n    return palette_index;\n}\n\n\nint getPaletteIndex(in vec2 uv) {\n    int palette_index = 0;\n    ivec2 fetch_pos = ivec2(uv * bitmap_size);\n    palette_index = getPaletteIndexXY(fetch_pos);\n    return palette_index;\n}\n\nvec4 getColorFromPalette(in int palette_index) {\n    int int_color = palette[palette_index];\n    return vec4(float(int_color & 0xff)/ 255.0,\n                float((int_color >> 8)& 0xff)/ 255.0,\n                float((int_color >> 16)& 0xff)/ 255.0,\n                0);\n}\n\nvec4 getBitmapColor(in vec2 uv) {\n    return getColorFromPalette(getPaletteIndex(uv));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / bitmap_size;\n    fragColor = getBitmapColor(uv);\n}\n\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// 2018 David A Roberts <https://davidar.io>\n\n// atmospheric pressure and circulation model\n\n#define buf(uv) texture(iChannel1, uv)\n\n#define SIGMA vec4(6,4,0,0)\nvec4 normpdf(float x) {\n\treturn 0.39894 * exp(-0.5 * x*x / (SIGMA*SIGMA)) / SIGMA;\n}\n\n// mean sea level pressure\nvec4 mslp(vec2 uv) {\n    float lat = 180. * (uv.y * iResolution.y / MAPRES.y) - 90.;\n    float land = texture(iChannel0, uv).x;\n    vec4 r;\n    if (land > 0.) { // land\n        r.x = 1012.5 - 6. * cos(lat*PI/45.); // annual mean\n        r.y = 15. * sin(lat*PI/90.); // January/July delta\n    } else { // ocean\n        r.x = 1014.5 - 20. * cos(lat*PI/30.);\n        r.y = 20. * sin(lat*PI/35.) * abs(lat)/90.;\n    }\n    return r;\n}\n\n// horizontally blurred MSLP\nvec4 pass1(vec2 uv) {\n    //if (iFrame > 10) return buf(uv + PASS1);\n    vec4 r = vec4(0);\n    for (float i = -20.; i <= 20.; i++)\n        r += mslp(uv + i*E/iResolution.xy) * normpdf(i);\n    return r;\n}\n\n// fully blurred MSLP\nvec4 pass2(vec2 uv) {\n    //if (iFrame > 10) return buf(uv + PASS2);\n    vec4 r = vec4(0);\n    for (float i = -20.; i <= 20.; i++)\n        r += buf(uv + i*N/iResolution.xy + PASS1) * normpdf(i);\n    return r;\n}\n\n// time-dependent MSLP\nvec4 pass3(vec2 uv) {\n    vec4 c = buf(uv + PASS2);\n    float t = mod(iTime, 12.); // simulated month of the year\n    float delta = c.y * (1. - 2. * smoothstep(1.5, 4.5, t) + 2. * smoothstep(7.5, 10.5, t));\n    return vec4(c.x + delta,0,0,0);\n}\n\n// wind vector field\nvec4 pass4(vec2 uv) {\n    vec2 p = uv * iResolution.xy;\n    float n = buf(mod(p + N, MAPRES)/iResolution.xy + PASS3).x;\n    float e = buf(mod(p + E, MAPRES)/iResolution.xy + PASS3).x;\n    float s = buf(mod(p + S, MAPRES)/iResolution.xy + PASS3).x;\n    float w = buf(mod(p + W, MAPRES)/iResolution.xy + PASS3).x;\n    vec2 grad = vec2(e - w, n - s) / 2.;\n    float lat = 180. * fract(uv.y * iResolution.y / MAPRES.y) - 90.;\n    vec2 coriolis = 15. * sin(lat*PI/180.) * vec2(-grad.y, grad.x);\n    vec2 v = coriolis - grad;\n    return vec4(v,0,0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    if (uv.x < 0.5) {\n        if (uv.y < 0.5) {\n    \t\tfragColor = pass1(uv - PASS1);\n        } else {\n    \t\tfragColor = pass2(uv - PASS2);\n        }\n    } else {\n        if (uv.y < 0.5) {\n    \t\tfragColor = pass3(uv - PASS3);\n        } else {\n    \t\tfragColor = pass4(uv - PASS4);\n        }\n    }\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// 2018 David A Roberts <https://davidar.io>\n\n// wind flow map\n\nvec2 getVelocity(vec2 uv) {\n    vec2 p = uv * MAPRES;\n    if (p.x < 1.) p.x = 1.;\n    vec2 v = texture(iChannel1, p/iResolution.xy + vec2(0.5,0.5)).xy;\n    if (length(v) > 1.) v = normalize(v);\n    return v;\n}\n\nvec2 getPosition(vec2 fragCoord) {\n    for(int i = -1; i <= 1; i++) {\n        for(int j = -1; j <= 1; j++) {\n            vec2 uv = (fragCoord + vec2(i,j)) / iResolution.xy;\n            vec2 p = texture(iChannel0, fract(uv)).xy;\n            if(p == vec2(0)) {\n                if (hash13(vec3(fragCoord + vec2(i,j), iFrame)) > 1e-4) continue;\n                p = fragCoord + vec2(i,j) + hash21(float(iFrame)) - 0.5; // add particle\n            } else if (hash13(vec3(fragCoord + vec2(i,j), iFrame)) < 8e-3) {\n                continue; // remove particle\n            }\n            vec2 v = getVelocity(uv);\n            p = p + v;\n            p.x = mod(p.x, iResolution.x);\n            if(abs(p.x - fragCoord.x) < 0.5 && abs(p.y - fragCoord.y) < 0.5)\n                return p;\n        }\n    }\n    return vec2(0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    fragColor.xy = getPosition(fragCoord);\n    fragColor.z = 0.9 * texture(iChannel0, fragCoord/iResolution.xy).z;\n    if (fragColor.x > 0.) fragColor.z = 1.;\n}","name":"Buffer C","description":"","type":"buffer"}]}