{"ver":"0.1","info":{"id":"43dGW2","date":"1717021337","viewed":47,"name":"Basic raymarch visualization","username":"Gnufoo","description":"a basic shader to learn the idea of raymarching","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalize pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Set the background color\n    vec3 col = vec3(1.0); // White background\n\n    // Ray origin and direction based on mouse position\n    vec2 ro = vec2(0.0, iMouse.y / iResolution.y); // Ray starts from the left at mouse y position\n    vec2 rd = normalize(vec2(1.0, 0.0)); // Ray direction is to the right\n\n    // Circle properties\n    vec2 circlePos1 = vec2(0.5, 0.7); // First circle position\n    vec2 circlePos2 = vec2(1.0, 0.2); // Second circle position\n    vec2 circlePos3 = vec2(1.5, 0.5); // Third circle position\n    float circleRadius1 = 0.2;\n    float circleRadius2 = 0.15;\n    float circleRadius3 = 0.3;\n\n    // Draw the main circles\n    if (length(uv - circlePos1) < circleRadius1) {\n        col = vec3(0.8, 0.8, 0.8); // Circle 1 color: light gray\n    }\n    if (length(uv - circlePos2) < circleRadius2) {\n        col = vec3(0.8, 0.8, 0.8); // Circle 2 color: light gray\n    }\n    if (length(uv - circlePos3) < circleRadius3) {\n        col = vec3(0.8, 0.8, 0.8); // Circle 3 color: light gray\n    }\n\n    // Initialize raymarching parameters\n    float t = 0.0; // Distance along the ray\n    float d; // Distance to the closest surface\n    vec2 hitPoint = vec2(0.0); // Point where the ray hits the circle\n\n    // Raymarching loop\n    for(int i = 0; i < 100; i++) {\n        // Compute the current position of the ray\n        vec2 pos = ro + rd * t;\n\n        // Evaluate the distance to the closest circle\n        float d1 = length(pos - circlePos1) - circleRadius1;\n        float d2 = length(pos - circlePos2) - circleRadius2;\n        float d3 = length(pos - circlePos3) - circleRadius3;\n        d = min(d1, min(d2, d3));\n\n        // Draw the ray\n        if(abs(uv.y - pos.y) < 0.002 && uv.x < pos.x) {\n            col = vec3(0.0, 0.0, 0.0); // Ray color: black\n        }\n\n        // Break once we get too far\n        if (d > 1.0) { \n            break;\n        }\n\n        // Draw the distance circle outline\n        float circleOutlineThickness = 0.002; // Thickness of the outline\n        if(abs(length(uv - pos) - d) < circleOutlineThickness) {\n            col = vec3(0.5, 0.5, 0.5); // Distance circle color: gray\n        }\n\n        // Advance the ray by the distance to the closest surface\n        t += d;\n\n        // Store the hit point if we are close to the surface\n        if (d < 0.001) {\n            hitPoint = pos;\n            break;\n        }\n    }\n\n    // Draw the hit point\n    float hitPointRadius = 0.01; // Radius of the hit point\n    if (length(uv - hitPoint) < hitPointRadius) {\n        col = vec3(1.0, 0.0, 0.0); // Hit point color: red\n    }\n\n    // Output the final color\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}