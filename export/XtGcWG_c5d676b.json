{"ver":"0.1","info":{"id":"XtGcWG","date":"1537401791","viewed":177,"name":"Cos^e Ambient Shading","username":"TinyTexel","description":"Approximate integration of white sky over clamped cosine lobe raised to a power (Mathematica code for exact solution included).\n(closed form solution is simple for odd integer powers but requires hypergeometric and gamma functions in the general case)","likes":6,"published":1,"flags":48,"usePreview":0,"tags":["shading","brdf","ambient","diffuse","cosine","lobe"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2018 Tiny Texel\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/*\nsee SCurveApprox(...) ~line 236\ncamera controls via mouse + shift key\n\n(note to self: bivarAO.nb)\n*/\n\n///////////////////////////////////////////////////////////////////////////\n//=======================================================================//\n\n#define rsqrt inversesqrt\n#define clamp01(x) clamp(x, 0.0, 1.0)\n#define If(cond, resT, resF) mix(resF, resT, cond)\n\n\nconst float Pi = 3.14159265359;\nconst float Pi2 = Pi * 2.0;\nconst float Pi05 = Pi * 0.5;\n\nconst float RcpPi05= 2.0 / (1.0 * Pi);\nconst float RcpPi  = 1.0 / (1.0 * Pi);\nconst float RcpPi2 = 1.0 / (2.0 * Pi);\nconst float RcpPi4 = 1.0 / (4.0 * Pi);\n\nfloat Pow2(float x) {return x*x;}\nfloat Pow3(float x) {return x*x*x;}\nfloat Pow4(float x) {return Pow2(Pow2(x));}\n\nfloat lerp(float a, float b, float l) {return a + (b - a) * l;}\n\nvec3 GammaEncode(vec3 x) {return pow(x, vec3(1.0 / 2.2));}\n\nvec2 CmplxMul(vec2 c0, vec2 c1)\n{\n\treturn vec2(c0.x*c1.x - c0.y*c1.y, c0.y*c1.x + c0.x*c1.y);\n}\n\nvec2 CmplxMul(vec2 c0, float ang)\n{\n\tvec2 c1 = vec2(cos(ang), sin(ang));\n\n\treturn vec2(c0.x*c1.x - c0.y*c1.y, c0.y*c1.x + c0.x*c1.y);\n}\n    \nstruct Cam\n{\n\tvec3 Front, Right, Up;\n\tfloat Aspect;\n\tfloat AxisLen;\t\n};\n\nCam NewCam(vec2 ang, float fov, float aspect)\n{\n    Cam cam;\n\n    float sinPhi   = sin(ang.x);\n    float cosPhi   = cos(ang.x);\n    float sinTheta = sin(ang.y);\n    float cosTheta = cos(ang.y);    \n\n    cam.Front = vec3(cosPhi * cosTheta, \n                              sinTheta, \n                     sinPhi * cosTheta);\n\n    cam.Right = vec3(-sinPhi, 0.0, cosPhi);\n    cam.Up    = cross(cam.Right, cam.Front);\n\n    cam.Aspect = aspect;\n    cam.AxisLen = aspect * tan(Pi05 - fov * 0.5);\n\n    return cam;\n}\n\n// tc [-1..1]\nvec3 NewRay(Cam cam, vec2 tc)\n{\n    tc.x *= cam.Aspect;\n\n    vec3 imgPos = cam.Front * cam.AxisLen + (cam.Right * tc.x + cam.Up * tc.y);\n    \n    vec3 dir = normalize(imgPos);\n\n    return dir;\n}\n\n    \nfloat map(vec3 x);\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 CalcNormal(vec3 p)\n{\n    const float h = 0.0001;\n    const vec2 k = vec2(1,-1);\n    \n    return normalize(k.xyy * map(p + k.xyy*h) + \n            \t\t k.yyx * map(p + k.yyx*h) + \n            \t\t k.yxy * map(p + k.yxy*h) + \n            \t\t k.xxx * map(p + k.xxx*h));\n}\n\nbool ImplicitRC(\nfloat funcScale,\nvec3 x, \nvec3 dir, \nfloat linCount,\nfloat binCount,\nfloat stepSizeAdd,\nout float t0, out float tm, out float t1)\n{\n\tbool hit = false;\n\n    t0 = tm = t1 = 0.0;\n    \n    float stepSize = abs(map(x)) + stepSizeAdd;\n    \n\tfor(float i = 0.0; i < linCount; ++i)// linear search\n\t{\t\n\t\tt1 += stepSize;\n\n        vec3 p = x + dir * t1;\n        \n        float f = map(p) * funcScale;\n        \n        stepSize = abs(f) + stepSizeAdd;\n        \n        hit = f < 0.0;\n\t\t\n        if(hit) {i=linCount;}\n        //if(hit) {break;}        \n        else {t0 = t1;}\n\t}\n\n    \n\tif(hit)\n    {\n        #if 1\n        for(float i = 0.0; i < binCount; ++i)// binary search\n\t\t{\n\t\t\ttm = (t0 + t1) * 0.5;\n\t\t\t\n            vec3 p = x + dir * tm;\n            \n\t\t\tif(map(p) * funcScale < 0.0)\n\t\t\tt1 = tm;\n\t\t\telse\n\t\t\tt0 = tm;\n\t\t}\n        \n        vec3 p0 = x + dir * t0;\n        vec3 p1 = x + dir * t1;\n        \n        float f0 = map(p0) * funcScale;\n        float f1 = map(p1) * funcScale;\n        \n        float div = f0 - f1;\n        \n        tm = mix(t0, t1, abs(div) > 1e-16 ? f0 / div : 0.5);// linear interpolation\n        #else\n        tm = (t0 + t1) * 0.5;\n        #endif\n        \n        return true;\n    }\n    else\n    return false;\n}\n\n// primitive normals\n// see: https://www.viz.tamu.edu/faculty/ergun/research/implicitmodeling/papers/sm99.pdf\n// #define a 0.5773502691896258\n// const vec3 PrimN3 = vec3( a, a, a);\n// const vec3 PrimN4 = vec3(-a, a, a);\n// const vec3 PrimN5 = vec3( a,-a, a);\n// const vec3 PrimN6 = vec3( a, a,-a);\n// #undef a\n\nfloat map(vec3 x)\n{\n    float r = length(x) - 1.0;\n    //return r;\n    \n    float t0 = 0.0;\n    float t1 = 0.0;\n    float t2 = 0.0;\n    \n    #if 1\n    float t = iTime * 0.6;\n    t0 = t * 1.23;\n    t1 = t * 1.37;\n    t2 = t * 2.11;\n    x.xz = CmplxMul(x.xz, t * 0.21);\n    #endif\n    \n    float o = 1.0;\n    float s = 11.0;\n    o *= cos(x.x * s + t0);\n    o *= sin(x.z * s + t1);\n    o *= cos(x.y * s + t2);\n\n    o = o*0.5+0.5;\n    \n    o = 1.0 - rsqrt(rsqrt(1.0 - o * 0.95));\n    \n    r -= o * 0.2;\n    \n    return r;\n}\n\nfloat Cubic(float x) {return x*x*(3.0-2.0*x);}\n\n// smoothstep build from two piecewise pows\n// I tried a couple of different smoothsteps but this one worked best and is probably as cheap as you can get\nfloat Smoothstep(float x, float p)\n{\n    float xp = x < 0.5 ? x * 2.0 : x * -2.0 + 2.0;\n    \n    float y = pow(xp, p);\n    \n    return x < 0.5 ? y * 0.5 : y * -0.5 + 1.0;\n}\n\n// map the cos lobe exponent to a power that can then be used together \n// with Smoothstep(..) as a coarse approx for the exact solution\n// (not required if you just use an empirical p anyway)\nfloat EtoP(float e)\n{\n    return sqrt(e + 4.0) * 1.372288 - 2.068529;\n}\n\n// approx. integrate {(1+e)/(2Pi)Dot(Dir, N)^e * (Dir.y > 0 ? 1 : 0)} for all Dir in hemisphere of N:\nfloat SCurveApprox(float Ny, float e)\n{\n    return Smoothstep(Ny * 0.5 + 0.5, EtoP(e));\n}\n/* the closed form solution is (in Mathematica syntax):\nsc[x, n] := 1/2 + ((-1 + 2 x) Gamma[1 + n/2] Hypergeometric2F1[1/2, (1 - n)/2, 3/2, (1 - 2 x)^2])/(Sqrt[\\[Pi]] Gamma[(1 + n)/2])\n\nsc[x, 1] -> x (pure diffuse)\nsc[x, 2] -> (2 Sqrt[-(-1 + x) x] (-1 + 2 x) + ArcCos[1 - 2 x])/\\[Pi]\nsc[x, 3] -> (3 - 2 x) x^2 (smoothstep)\nsc[x, 4] -> (-4 Sqrt[-(-1 + x) x] (3 + 2 x (1 + 4 x (-3 + 2 x))) + 6 ArcCos[1 - 2 x])/(6 \\[Pi])\nsc[x, 5] -> x^3 (10 + 3 x (-5 + 2 x)) (smootherstep)\nsc[x, 6] -> (2 Sqrt[-(-1 + x) x] (-1 + 2 x) (15 + 8 (-1 + x) x (-5 + 4 x) (1 + 4 x)) + 15 ArcCos[1 - 2 x])/(15 \\[Pi])\nsc[x, 7] -> (3 - 2 x) x^4 (35 - 2 x (42 + 5 x (-7 + 2 x)))\n...\n*/\n\nvec3 EvalSceneCol(\n    vec3 rp, Cam cam, vec2 uv0, bool right)\n{\n    vec3 col = vec3(1.0);\n    vec2 PixelCount = iResolution.xy;// * vec2(0.5, 1.0);\n    \n    vec2 tex = uv0.xy / PixelCount;\n    vec2 tex21 = tex * 2.0 - vec2(1.0);\n        \n     \n    vec3 rd = NewRay(cam, tex21);\n\n    // TODO: ray-bounding sphere intersection\n    \n    vec2 t; vec3 a;\n    float t0, tm, t1;\n    bool hit = ImplicitRC(1.0, rp, rd, 50.0, 5.0, 0.005, /*out*/ t0, tm, t1);\n\n    vec3 colTop = vec3(0.01, 0.2, 1.0) * 1.2;// blue\n    vec3 colBot = vec3(0.01, 1.0, 0.1) * 0.9;// green\n\n    col =  mix(colBot, colTop, rd.y < 0.0 ? 0.0 : 1.0);// bg\n    \n    if(!hit) return col;\n\n    \n    vec3 p = rp + rd * tm; \n\n    //n = normalize(GradientCD(p));\n\tvec3 N = CalcNormal(p);\n    \n    vec3 L = vec3(0.0, 1.0, 0.0);\n    vec3 V = -rd;\n    vec3 R = 2.0 * dot(N, V) * N - V;// reflection vector used for specular lobe\n\n    float NdL = clamp01(dot(N, L));\n    float NdV = clamp01(dot(N, V));\n    float VdL =         dot(V, L) ;\n\n    float F = mix(0.6, 1.0, pow(1.0 - NdV, 5.0));\n    \n    float d = N.y * 0.5 + 0.5;// for a vanilla cos lobe we get a simple linear ramp\n    vec3 diffuse = mix(colBot, colTop, d);\n    \n    float l0 = SCurveApprox(R.y, 2.0);//cos^2 (highlight tail)\n    float l1 = SCurveApprox(R.y, 60.0);//cos^60 (main highlight)    \n    vec3 specular = mix(colBot, colTop, mix(l0, l1, 0.3));\n        \n\tcol = mix(diffuse, specular, F);\n    \n    return col;\n}\n\nvoid mainImage( out vec4 outCol, in vec2 uv0 )\n{\n    vec3 col = vec3(0.0);\n    \n    vec2 uv = uv0.xy - 0.5;\n    \n    vec2 PixelCount = iResolution.xy;// * vec2(0.5, 1.0);\n    \n    bool right = uv.x > PixelCount.x * 0.5;\n    //if(right) uv.x -= PixelCount.x;\n    \n    vec4 bnoise = texelFetch(iChannel1, ivec2(uv) & 1023, 0); \n    \n    vec4 mouseAccu = texelFetch(iChannel0, ivec2(1, 0), 0); \n    vec4 wasdAccu  = texelFetch(iChannel0, ivec2(2, 0), 0); \n\n    vec2 lightAng = vec2(Pi * 0.0, Pi * 0.5);\n    lightAng.x += (wasdAccu.y - wasdAccu.w) * 0.06; \n    lightAng.y += (wasdAccu.x - wasdAccu.z) * 0.04;    \n    \n    \n    vec2 ang = vec2(-0.25 * Pi, -Pi * 0.2);\n    ang += mouseAccu.xy * 0.008;\n\n    Cam cam = NewCam(ang, Pi * 0.5, PixelCount.x / PixelCount.y);\n    vec3 cpos = -cam.Front * 2.0;\n    cpos = -cam.Front * (exp2(1.2 + mouseAccu.w * 0.02));\n    \n\n\t#if 1\n    col = vec3(EvalSceneCol(cpos, cam, uv0, right));  \n    #else        \n    col  = EvalSceneCol(cpos, cam, uv + vec2(0.3, 0.1), right);\n    col += EvalSceneCol(cpos, cam, uv + vec2(0.9, 0.3), right);\n    col += EvalSceneCol(cpos, cam, uv + vec2(0.5, 0.5), right);\n    col += EvalSceneCol(cpos, cam, uv + vec2(0.1, 0.7), right);\n    col += EvalSceneCol(cpos, cam, uv + vec2(0.7, 0.9), right);   \n    col *= 0.2; \n    #endif\n    \n//col = vec3(1.0);\n    #if 1\n    vec2 s = abs(uv0/iResolution.xy*2.0-1.0);\n    s.x = 1.0-Pow3(s.x);    s.y = 1.0-Pow3(s.y);\n    col = mix(col, mix(col * 0.4, vec3(0.2, 0.0, 0.0), 0.2), Pow2(1.0-sqrt(s.x*s.y)));\n    #endif\n    //col = vec3(uv0.x / iResolution.x);\n    //col *= col*col*col;\n    //col *= 0.01;\n    \n    //col += Sample_Triangle(bnoise.rgb * 2.0 - 1.0) / 255.0;\n    col += (bnoise.rgb - 0.5) / 255.0;\n\t\n         //col = 0.5 + 0.5*cos(iTime+uv.xyx/iResolution.xyx+vec3(0,2,4));\n\t//col = floor(col * 256.0) / 256.0;\n    \n\toutCol = vec4(GammaEncode(clamp01(col)), 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// \n// by TinyTexel\n// Creative Commons Attribution-ShareAlike 4.0 International Public License\n\n/*\n\ncamera controls via mouse + shift key\n*/\n\n\nvoid mainImage( out vec4 col, in vec2 uv0 )\n{  \n    col = vec4(0.0);\n    \n    vec2 uv = uv0 - 0.5;\n    \n    \n    vec4 iMouseLast     = texelFetch(iChannel0, ivec2(0, 0), 0);\n    vec4 iMouseAccuLast = texelFetch(iChannel0, ivec2(1, 0), 0);\n    vec4 wasdAccuLast   = texelFetch(iChannel0, ivec2(2, 0), 0);\n\n    bool shift = texelFetch(iChannel1, ivec2(16, 0), 0).x != 0.0;\n    \n    float kW = texelFetch(iChannel1, ivec2(0x57, 0), 0).x;\n    float kA = texelFetch(iChannel1, ivec2(0x41, 0), 0).x;\n    float kS = texelFetch(iChannel1, ivec2(0x53, 0), 0).x;\n    float kD = texelFetch(iChannel1, ivec2(0x44, 0), 0).x;\n    \n    vec4 wasdAccu = wasdAccuLast + vec4(kW, kA, kS, kD);\n    \n    vec2 mouseDelta = iMouse.xy - iMouseLast.xy;\n    \n    bool cond0 = iMouse.z > 0.0 && iMouseLast.z > 0.0;\n    vec2 mouseDelta2 = cond0 && !shift ? mouseDelta.xy : vec2(0.0);\n    vec2 mouseDelta3 = cond0 &&  shift ? mouseDelta.xy : vec2(0.0);\n    \n    vec2 iMouseAccu1 = iMouseAccuLast.xy + mouseDelta2;\n    vec2 iMouseAccu2 = iMouseAccuLast.zw + mouseDelta3;\n    \n    if(uv.x == 0.0 && uv.y == 0.0) col = iMouse;  \n    if(uv.x == 1.0 && uv.y == 0.0) col = vec4(iMouseAccu1, iMouseAccu2);\n    if(uv.x == 2.0 && uv.y == 0.0) col = wasdAccu;\n}","name":"Buffer A","description":"","type":"buffer"}]}