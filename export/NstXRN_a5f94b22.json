{"ver":"0.1","info":{"id":"NstXRN","date":"1632766499","viewed":96,"name":"RZ Kernal","username":"raymondzheng","description":"kernal","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["kernal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Originally by Nikos Papadopoulos, 4rknova / 2015\n// Heavily modified by Dr. Sajid Farooq, 2016\n//The blur matrix. Since there are 9 pixels, each weight is 1/9 = 0.111 \n// to ensure that each pixel is averaged properly\nmat3 blur = mat3(\n 0.111, 0.111, 0.111, // first column (not row!)\n 0.111, 0.111, 0.111, // second column\n 0.111, 0.111, 0.111 // third column\n);\n\nmat3 sharpen = mat3 (\n 0., -1, 0.0, // first column (not row!)\n -1, 5, -1, // second column\n 0., -1, 0.0 // third column\n);\n\n// my emobss\nmat3 embossVert = mat3 (\n    0., 1, 0., // first column (not row!)\n    0., 0, 0., // second column\n    0., -1, 0. // third column\n);\n\nmat3 embossHor = mat3 (\n    0., 0., 0., // first column (not row!)\n    1, 0, -1, // second column\n    0., 0., 0. // third column\n);\n\n// my first filter\nmat3 edge = mat3 (\n    -1, -1, 0-1, // first column (not row!)\n    -1, 8, -1, // second column\n    -1, -1, -1. // third column\n);\n\n// my second filter\n// add with edge\nmat3 laplacianOperator = mat3 (\n    0, -1, 0, // first column (not row!)\n    -1, 4, -1, // second column\n    0, -1, 0. // third column\n);\n\n\n\nvec3 aSample(const int x, const int y, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy * iChannelResolution[0].xy;\n    uv = (uv + vec2(x, y)) / iChannelResolution[0].xy ;\n    return texture(iChannel0, uv).xyz;\n}\n\nvec3 aFilter(in vec2 fragCoord, mat3 kernel) {\n    vec3 sum;\n    for (int i = 0; i < 3; i ++) {\n        for (int j = 0; j < 3; j++) {\n            sum += aSample(i - 1, j - 1, fragCoord) * kernel[i][j];\n        }\n    }\n    return sum;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 fc = fragCoord.xy;\n \n    //vec3 cf = aFilter(fc, blur);\n    //vec3 cf = aFilter(fc, edge);\n    //vec3 cf = aFilter(fc, embossVert);\n    //vec3 cf = aFilter(fc, embossHor);\n    vec3 cf = aFilter(fc, (edge + laplacianOperator));\n \n    //fragColor = texture(iChannel0, uv);\n    fragColor = vec4(cf, 1);\n}","name":"Image","description":"","type":"image"}]}