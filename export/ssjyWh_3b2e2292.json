{"ver":"0.1","info":{"id":"ssjyWh","date":"1643463322","viewed":206,"name":"High voltage arc","username":"stegu","description":"An attempt at mimicry of a high voltage discharge through air. In real life, the chaotic meandering of the conducting nitrogen-oxygen plasma channel is caused by turbulence and thermal effects, and a magnetic field caused by self-induction.","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["noise","arc","spark","tesla"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// One of my many experiments to see how psrdnoise() can be used and abused.\n// Most of them are not worth showing, but this one turned out okay.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // uv spans 0 to 1 in x, and 0 to whatever in y\n    vec2 uv = fragCoord/iResolution.x;\n\n    // I should try divergence-free \"curl noise\" here later\n    // to avoid loops and just have a meandering path, but\n    // this looks okay if we're not too picky with realism.\n    vec2 g;\n    float w = smoothstep(0.0,0.5,uv.x)-smoothstep(0.5,1.0,uv.x);\n    psrdnoise(uv*10.0-vec2(0.0,iTime), vec2(0.0), iTime*6.0, g);\n    vec2 arcuv = uv + w*0.01*g;\n    psrdnoise(uv*20.0-2.0*vec2(0.0,iTime), vec2(0.0), iTime*11.0, g);\n    arcuv += w*0.003*g;\n    psrdnoise(uv*1.0-iTime*0.2*vec2(sqrt(5.0),sqrt(3.0)), vec2(0.0), iTime*2.0, g);\n    arcuv +=w*0.015*g;\n    float d = lined(vec2(0.1,0.3), vec2(0.9,0.3), arcuv);\n    // I should write a 1D noise for animation, this 2D-as-1D is a bit wasteful\n    float flicker = (1.0-smoothstep(0.0, 0.3, d))\n        * psrdnoise(iTime*vec2(sqrt(5.0),sqrt(3.0)), vec2(0.0), 0.0, g);\n    // Add more noise detail to the arc\n    d += abs(0.005*psrdnoise(uv*40.0, vec2(0.0), iTime*16.0, g));\n    d += abs(0.0025*psrdnoise(uv*87.0, vec2(0.0), iTime*35.0, g));\n    float arc = 1.0-aastep(0.01, d);\n    float glow = 1.0-smoothstep(0.0,0.03, d);\n    vec3 bgcolor = 0.2+0.1*abs(flicker)*vec3(1.0,0.7,1.0);\n    vec3 mixcolor = mix(bgcolor, vec3(1.0,0.5,1.0), 1.5*glow);\n    mixcolor = mix(mixcolor, vec3(1.0), arc);\n    fragColor = vec4(mixcolor,1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// psrdnoise (c) Stefan Gustavson and Ian McEwan,\n// ver. 2021-12-02, published under the MIT license:\n// https://github.com/stegu/psrdnoise/\n\nfloat psrdnoise(vec2 x, vec2 period, float alpha, out vec2 gradient)\n{\n\tvec2 uv = vec2(x.x+x.y*0.5, x.y);\n\tvec2 i0 = floor(uv), f0 = fract(uv);\n\tfloat cmp = step(f0.y, f0.x);\n\tvec2 o1 = vec2(cmp, 1.0-cmp);\n\tvec2 i1 = i0 + o1, i2 = i0 + 1.0;\n\tvec2 v0 = vec2(i0.x - i0.y*0.5, i0.y);\n\tvec2 v1 = vec2(v0.x + o1.x - o1.y*0.5, v0.y + o1.y);\n\tvec2 v2 = vec2(v0.x + 0.5, v0.y + 1.0);\n\tvec2 x0 = x - v0, x1 = x - v1, x2 = x - v2;\n\tvec3 iu, iv, xw, yw;\n\tif(any(greaterThan(period, vec2(0.0)))) {\n\t\txw = vec3(v0.x, v1.x, v2.x);\n\t\tyw = vec3(v0.y, v1.y, v2.y);\n\t\tif(period.x > 0.0)\n\t\t\txw = mod(vec3(v0.x, v1.x, v2.x), period.x);\n\t\tif(period.y > 0.0)\n\t\t\tyw = mod(vec3(v0.y, v1.y, v2.y), period.y);\n\t\tiu = floor(xw + 0.5*yw + 0.5); iv = floor(yw + 0.5);\n\t} else {\n\t\tiu = vec3(i0.x, i1.x, i2.x); iv = vec3(i0.y, i1.y, i2.y);\n\t}\n\tvec3 hash = mod(iu, 289.0);\n\thash = mod((hash*51.0 + 2.0)*hash + iv, 289.0);\n\thash = mod((hash*34.0 + 10.0)*hash, 289.0);\n\tvec3 psi = hash*0.07482 + alpha;\n\tvec3 gx = cos(psi); vec3 gy = sin(psi);\n\tvec2 g0 = vec2(gx.x, gy.x);\n\tvec2 g1 = vec2(gx.y, gy.y);\n\tvec2 g2 = vec2(gx.z, gy.z);\n\tvec3 w = 0.8 - vec3(dot(x0, x0), dot(x1, x1), dot(x2, x2));\n\tw = max(w, 0.0); vec3 w2 = w*w; vec3 w4 = w2*w2;\n\tvec3 gdotx = vec3(dot(g0, x0), dot(g1, x1), dot(g2, x2));\n\tfloat n = dot(w4, gdotx);\n\tvec3 w3 = w2*w; vec3 dw = -8.0*w3*gdotx;\n\tvec2 dn0 = w4.x*g0 + dw.x*x0;\n\tvec2 dn1 = w4.y*g1 + dw.y*x1;\n\tvec2 dn2 = w4.z*g2 + dw.z*x2;\n\tgradient = 10.9*(dn0 + dn1 + dn2);\n\treturn 10.9*n;\n}\n\n// The functions below are public domain.\n// They may be used freely without restrictions.\n\n// Compute the shortest distance from p to a line segment from p1 to p2.\nfloat lined(vec2 p1, vec2 p2, vec2 p) {\n  vec2 p1p2 = p2 - p1;\n  vec2 v = normalize(p1p2);\n  vec2 s = p - p1;\n  float t = dot(v, s);\n  if (t<0.0) return length(s);\n  if (t>length(p1p2)) return length(p - p2);\n  return length(s - t*v);\n}\n\n// Auto-antialiased step function\nfloat aastep(float threshold, float value) {\n  float afwidth = 0.7 * length(vec2(dFdx(value), dFdy(value)));\n  return smoothstep(threshold-afwidth, threshold+afwidth, value);\n}\n","name":"Common","description":"","type":"common"}]}