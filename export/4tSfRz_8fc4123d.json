{"ver":"0.1","info":{"id":"4tSfRz","date":"1514152881","viewed":519,"name":"CJ - reduced IQ's Ellipse","username":"chrisjj","description":"Reduced https://www.shadertoy.com/view/MdfGWn\nSample output: https://i.imgur.com/oYJjvN5.png","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["math"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// CJ reduction of https://www.shadertoy.com/view/MdfGWn\n\n// The MIT License\n// Copyright Â© 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// An example of how to compute a distance estimation for an ellipse (which provides\n// constant thickness to its boundary). This is achieved by dividing the implicit \n// description by the modulo [modulus] of its gradient. The same process can be applied to any\n// shape defined by an implicity formula (ellipses, metaballs, fractals, mandelbulbs).\n//\n// More info here:\n// https://iquilezles.org/articles/distance\n\nfloat r;\n\nfloat ellipse2(vec2 p,float r) // approx. distance between p and nearest point on ellipse\n{\n    vec2 s = vec2(1.,3.);  // shape of ellipse\n    float f = length(p*s); // definition of ellipse\n    return abs(f-r)*f      // f(x,y)... \n        /length(p*s*s);    // ... divided by analytical gradient\n}\n\nfloat f(vec2 p)\n{\n\tfloat  r = length(p);float a = atan(p.y,p.x);\n    // return r-1.+0.5*sin(3.*a+2.*r*r);   \n    vec2 s = vec2(1.,3.);  // shape of ellipse\n    float f = length(p*s); // definition of ellipse\n    return f;\n}\n\nvec2 grad( in vec2 x )\n{\n    vec2 h = vec2( 0.01, 0.0 );\n    return vec2( f(x+h.xy) - f(x-h.xy),\n                 f(x+h.yx) - f(x-h.yx) )/(2.0*h.x);\n}\n\nfloat color( in vec2 x )\n{\n    float v = f( x );\n    vec2  g = grad( x );\n    float de = abs(v)/length(g);\n    return step( 1.2, de );\n}\n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    r = 1.0 + 0.1*sin(3.1415927*iTime);\n   \n\tvec2 uv = (2.0*fragCoord.xy-iResolution.xy) / iResolution.y;\n    \t     vec4 c = vec4(0.);\n    c.r = 1.0-step(0.01,ellipse2(uv,r));\n    c.g = 1.0-f(uv*2.);\n    c.b = 1.0-color(uv*2.);\n    //c.g = 1.0-step(0.5,colorO(uv));\n\tfragColor = c;\n}","name":"Image","description":"","type":"image"}]}