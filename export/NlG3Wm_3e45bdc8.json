{"ver":"0.1","info":{"id":"NlG3Wm","date":"1637942780","viewed":368,"name":"micro Texture NCA68 (minimal)","username":"Anony","description":"\"Texture Generation with Ultra-Compact Neural Cellular Automata\" supplementary material\nA collection of Texture generating NCA-68 rules.\nSee \"Buffer A\" for the NCA code","likes":20,"published":3,"flags":32,"usePreview":0,"tags":["ca"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0,uv*0.5)+0.5;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec4 rule2(vec4 s, vec4 p) {\n  return 1e-3*(vec4(4,-10,-27,18)+\n    mat4(-67,1,2,44,-13,-59,4,30,-1,16,-57,9,-10,-4,-2,-41)*s+\n    mat4(19,-18,-1,8,-4,35,8,0,-4,-4,-1,0,34,31,21,-25)*p+\n    mat4(4,13,18,-57,-79,-22,-25,71,-12,-11,24,27,-17,-8,-7,6)*abs(s)+\n    mat4(11,10,4,0,4,1,2,7,-26,-33,-15,-3,22,27,20,-34)*abs(p));     \n}\n\nvec4 hash43(vec3 p) {\n\tvec4 p4 = fract(vec4(p.xyzx)  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\nvec4 R(float x, float y) {\n    return texture(iChannel0, vec2(x, y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 dp = 1.0/iResolution.xy;\n  vec2 pos = fragCoord*dp;\n  \n  float x=pos.x, y=pos.y;\n  float l=x-dp.x, r=x+dp.x, u=y-dp.y, d=y+dp.y;\n  vec4 s = R(x,y);\n  if (s == vec4(0, 0, 0, 0)) { // random initialization\n    fragColor = hash43(vec3(fragCoord, iFrame))-0.5;\n    return;\n  }  \n  // perception\n  vec4 p = R(l,u)*vec4(1,1,-1, 1) + R(x,u)*vec4(2,2,0, 2) + R(r,u)*vec4(1,1,1, 1)\n         + R(l,y)*vec4(2,2,-2, 0) +  s*vec4(-12,-12,0, 0) + R(r,y)*vec4(2,2,2, 0)\n         + R(l,d)*vec4(1,1,-1,-1) + R(x,d)*vec4(2,2,0,-2) + R(r,d)*vec4(1,1,1,-1);\n  vec4 ds = rule2(s, p);  // NCA rule application\n  fragColor = clamp(s+ds, -1.5, 1.5);\n}","name":"Buffer A","description":"","type":"buffer"}]}