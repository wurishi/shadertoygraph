{"ver":"0.1","info":{"id":"dldcW4","date":"1699230700","viewed":58,"name":"SkyGrid","username":"LooXor","description":" ","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["grid","perspective"],"hasliked":0,"parentid":"wlGGRy","parentname":"Simple Perspective Grid"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    float d = 1./abs(uv.y); //depth\n    vec2 pv = vec2(uv.x*d, d); //perspective\n    pv.y += iTime; //offset\n    pv *= 2.; //scale\n\n    float g = 0.0; // Initialiser la grille à 0 (invisible)\n\n    // Dessiner la grille seulement pour la moitié inférieure de l'écran\n    if(uv.y < 0.0) {\n        pv += 0.5;\n        const float N = 64.0;\n        vec2 w = fwidth(pv) + 0.001;\n        vec2 a = pv + 0.5*w;\n        vec2 b = pv - 0.5*w;\n        vec2 i = (floor(a)+min(fract(a)*N,1.0)-floor(b)-min(fract(b)*N,1.0))/(N*w);\n        g = i.x + i.y - i.x*i.y;\n    }\n\n    vec3 col = vec3(1.0, 0.0, 0.0) * g;  // Utiliser le rouge pour les lignes de la grille\n\n    fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}