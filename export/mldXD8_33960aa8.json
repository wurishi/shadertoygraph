{"ver":"0.1","info":{"id":"mldXD8","date":"1685409980","viewed":77,"name":"Tutorials - Ray Marching","username":"ShuheCN","description":"Tutorials - Ray Marching","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["tutorials"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TMIN 0.1\n#define TMAX 20.\n#define RAYMARCH_TIMES 128\n#define PRECISION 0.001\n\nvec2 fixUV(in vec2 c)\n{\n    return (2. * c - iResolution.xy)/min(iResolution.x, iResolution.y);\n}\n\nfloat sdfSphere(in vec3 p)\n{\n    return length(p) - .5;\n}\n\n//https://iquilezles.org/articles/normalsSDF/\nvec3 calcNormal( in vec3 p ) // for function f(p)\n{\n    const float h = 0.0001; // replace by an appropriate value\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*sdfSphere( p + k.xyy*h ) + \n                      k.yyx*sdfSphere( p + k.yyx*h ) + \n                      k.yxy*sdfSphere( p + k.yxy*h ) + \n                      k.xxx*sdfSphere( p + k.xxx*h ) );\n}\n\nfloat rayMarch(in vec3 ro, in vec3 rd)\n{\n    float t = TMIN;\n    \n    for(int i = 0; i < RAYMARCH_TIMES && t < TMAX; ++i)\n    {\n        vec3 p = ro + t * rd;\n\n        float d = sdfSphere(p);\n        \n        if(d < PRECISION)\n        {\n            break;\n        }\n        \n        t += d;\n        \n    }\n    \n    return t;\n}\n\nvec3 render(vec2 uv)\n{\n    vec3 ro = vec3(0., 0., -2.);\n    vec3 rd = normalize(vec3(uv ,0.) - ro);\n    \n    float t = rayMarch(ro, rd);\n    \n    vec3 color = vec3(0.);\n    if(t < TMAX)\n    {\n        vec3 p = ro + t * rd;\n        vec3 n = calcNormal(p);\n\n        vec3 light = vec3(1., 2., -2.);\n\n        float dif = clamp(dot(normalize(light - p), n),0., 1.);\n        \n        float amb = .5;\n        color = amb * vec3(.5) + dif * vec3(1.);\n    }\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fixUV(fragCoord);\n\n    // Time varying pixel color\n    vec3 color = vec3(0.);\n    \n    color = render(uv);\n\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}