{"ver":"0.1","info":{"id":"slySRz","date":"1640065625","viewed":50,"name":"Battery Logo","username":"HyiKing","description":"Battery Logo","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["batterylogo"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdBox(in vec2 p, in vec2 b) {\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdTriangle( in vec2 p, in vec2 p0, in vec2 p1, in vec2 p2 ) {\n    vec2 e0 = p1-p0, e1 = p2-p1, e2 = p0-p2;\n    vec2 v0 = p -p0, v1 = p -p1, v2 = p -p2;\n    vec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\n    vec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\n    vec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\n    float s = sign( e0.x*e2.y - e0.y*e2.x );\n    vec2 d = min(min(vec2(dot(pq0,pq0), s*(v0.x*e0.y-v0.y*e0.x)),\n                     vec2(dot(pq1,pq1), s*(v1.x*e1.y-v1.y*e1.x))),\n                     vec2(dot(pq2,pq2), s*(v2.x*e2.y-v2.y*e2.x)));\n    return -sqrt(d.x)*sign(d.y);\n}\n\n// smooth min\nfloat smin(float a, float b, float k) {\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\n// smooth max\nfloat smax(float a, float b, float k) {\n  return -smin(-a, -b, k);\n}\n\nfloat createGlow(float load) {\n   float glowLoad = smoothstep(1.1, load, 0.5);\n   return min(glowLoad, step(0., load));\n}\n\n// Colors definition\nconst vec3 red = vec3(1.,0.,0.);\nconst vec3 orange = vec3(1., 150./255., 0.);\nconst vec3 yellow = vec3(1., 230./255., 0.);\nconst vec3 green = vec3(52./255.,211./255.,53./255.);\nconst vec3 blue = vec3(0.,180./255.,228./255.);\n\nvec3 drawScene(vec2 uv) {\n    float t2s = fract(iTime/2.);\n    float t12s = fract(iTime/8.);\n    vec3 col;\n    /*if (t2s > 0.9) {\n        col = vec3(0.75);\n    } else {\n        col = vec3(0.1);\n    }*/\n    //col = vec3(t2s/2.);\n    col = vec3(0.2);\n    \n    \n    // Contour\n    float boxBack = sdBox(uv, vec2(0.15, 0.32));\n    float boxIn = sdBox(uv, vec2(0.135, 0.305));\n    float top = sdBox(vec2(uv.x, uv.y - 0.325), vec2(0.08, 0.019));\n    \n    // Lightning\n    vec2 p1 = vec2(-0.1, -0.15);\n    vec2 p2 = vec2(0.01, -0.15);\n    vec2 p3 = vec2(0.04, 0.125);\n    float lightning1 = sdTriangle(vec2(uv.x,uv.y-0.115), p1, p2, p3);\n    float lightning2 = sdTriangle(vec2(-uv.x,-uv.y-0.115), p1, p2, p3);\n    float lightning = min(lightning1, lightning2);\n    \n    // Loads\n    float bottomOff = 0.240;\n    float heightLoad = 0.055;\n    float load1 = sdBox(vec2(uv.x, uv.y + bottomOff), vec2(0.125, heightLoad));\n    float load2 = sdBox(vec2(uv.x, uv.y + bottomOff-0.120*1.), vec2(0.125, heightLoad));\n    float load3 = sdBox(vec2(uv.x, uv.y + bottomOff-0.120*2.), vec2(0.125, heightLoad));\n    float load4 = sdBox(vec2(uv.x, uv.y + bottomOff-0.120*3.), vec2(0.125, heightLoad));\n    float load5 = sdBox(vec2(uv.x, uv.y + bottomOff-0.120*4.), vec2(0.125, heightLoad));\n    \n    float contour = max(boxBack, -boxIn);\n    float res = min(contour, top);\n    if (t12s < 0.83) {\n        res = min(res, load2);\n        res = min(res, load3);\n        res = min(res, load4);\n        res = min(res, load5);\n    } else if (t12s < 1.) {\n        res = min(lightning, res);\n    }\n    \n    res = step(0., res);\n    \n    // --\n    float finalLoad1 = createGlow(load1);\n    // --\n    float finalLoad2 = createGlow(load2);\n    \n    float step2Final = min(finalLoad1, finalLoad2);\n    // --\n    float finalLoad3 = createGlow(load3);\n    \n    float step3Final = min(step2Final, finalLoad3);\n    // --\n    float finalLoad4 = createGlow(load4);\n    \n    float step4Final = min(step3Final, finalLoad4);\n    // --\n    float finalLoad5 = createGlow(load5);\n    \n    float step5Final = min(step4Final, finalLoad5);\n    \n    // Color mix\n    col = mix(vec3(0,0,0), col, res);\n    //col = mix(red, col, load1);\n    if (t12s < 0.17) {\n        col = mix(blue, col, step5Final);\n    } else if (t12s < 0.33) {\n        col = mix(green, col, step4Final);\n    } else if (t12s < 0.5) {\n        col = mix(yellow, col, step3Final);\n    } else if (t12s < 0.67) {\n        col = mix(orange, col, step2Final);\n    } else if (t12s < 0.83) {\n        col = mix(red, col, finalLoad1);\n    } else if (t12s < 1.) {\n        col = mix(vec3(0,0,0), col, res);\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy; // <0, 1>\n    uv -= 0.5; // <-0.5,0.5>\n    uv.x *= iResolution.x/iResolution.y; // fix aspect ratio\n\n    vec3 col = drawScene(uv);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}