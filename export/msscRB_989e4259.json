{"ver":"0.1","info":{"id":"msscRB","date":"1686943741","viewed":63,"name":"Circle | Simple","username":"incorrectPleaseTryAgain","description":"First shader created.\n\nCreated following: https://inspirnathan.com/posts/48-shadertoy-tutorial-part-2","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["circle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Generate circle\nvec3 sdfCircle(vec2 uv, float r, vec2 offset){\n    \n    float x = uv.x - offset.x;\n    float y = uv.y - offset.y;\n    \n    // Get pixel distance from origin\n    float d = length(vec2(x, y)) - r;\n    \n    // Return color value\n    return d > 0. ? vec3(0.) : .5 +.5 * cos(iTime + vec3(0, 2, 4));\n    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -0.5 to 0.5)\n    vec2 uv = (fragCoord/iResolution.xy) - .5;\n    \n    // Fix aspect ratio\n    uv.x *= iResolution.x/iResolution.y;\n\n    // Move circle in circular pattern\n    vec2 offset = vec2(sin(iTime * 2.) * .2, cos(iTime * 2.) * .2);\n\n    // Time varying pixel color\n    vec3 col = sdfCircle(uv, .3, offset);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}