{"ver":"0.1","info":{"id":"4tBGWm","date":"1429405614","viewed":323,"name":"Squircle Candy Scroller","username":"pixelzealot","description":"Last one was OK but wanted to create something with a better feel of movement. Music used to adjust particular squircle shape colours inspired by Nicolas.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["plasma","squircle","candy","scroller"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// Noise from iq\nfloat snoise(vec3 x) \n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\t\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = textureLod( iChannel0, (uv+ 0.5)/256.0, 0.0 ).yx;\n\treturn mix( rg.x, rg.y, f.z );\n}\n\nfloat f(vec2 p, float mult)\n{\n    float radius = 0.085;\n    float power = 0.5 + 3.5 * mult;\n    power = clamp(power, 0.0, 4.0);\n    vec3 a = vec3(p, radius);\n    return dot(pow(abs(a), vec3(power)), vec3(1.0, 1.0, -1.0));\n}\n\nvec2 grad(in vec2 x, float mult)\n{\n    vec2 h = vec2( 0.01, 0.0 );\n    return vec2( f(x+h.xy, mult) - f(x-h.xy, mult),\n                 f(x+h.yx, mult) - f(x-h.yx, mult) ) / (2.0*h.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy/iResolution.xy;\n    uv = -1.0+2.0*uv;\n\tuv.x *= iResolution.x/iResolution.y;    \n\n    float freq[4];\n \tfreq[0] = texture( iChannel1, vec2( 0.01, 0.25 ) ).x;\n    freq[1] = texture( iChannel1, vec2( 0.07, 0.25 ) ).x;\n    freq[2] = texture( iChannel1, vec2( 0.15, 0.25 ) ).x;\n    freq[3] = texture( iChannel1, vec2( 0.30, 0.25 ) ).x;\n    \n    const float gridSize = 6.0;\n    \n    vec2 grid = vec2(gridSize);\n    vec2 coord = floor(uv * grid) / grid;\n    \n    vec2 c = vec2(1.0/gridSize);\n    vec2 p = mod(uv, c) - c*0.5;\n\n    float timeShift = iTime;\n    \n    float bn = snoise(vec3(coord + vec2(timeShift, 0.0), 0.0)) + \n        \t   snoise(vec3(coord + vec2(timeShift + 0.25, 0.0), 0.0)) + \n        \t   snoise(vec3(coord + vec2(timeShift - 0.25, 0.0), 0.0));\n    \n \tfloat cn = snoise(vec3(uv + vec2(timeShift, 0.0), 0.0)) + \n        \t   snoise(vec3(uv + vec2(timeShift + 0.25, 0.0), 0.0)) + \n        \t   snoise(vec3(uv + vec2(timeShift - 0.25, 0.0), 0.0));\n    \n    vec2 colorNoise = vec2(bn, cn);\n    colorNoise /= 3.0;\n\n    float cnS = 0.5 + 3.5 * (colorNoise.x * colorNoise.x);\n    float soundMix = 0.0;\n    if (cnS <= 4.0) { soundMix = freq[0]; }\n    if (cnS <= 3.0) { soundMix = freq[1]; }\n    if (cnS <= 2.0) { soundMix = freq[2]; }\n    if (cnS <= 1.0) { soundMix = freq[3]; }\n    soundMix *= 0.6;\n    \n    float v = f(p, (colorNoise.x * colorNoise.x));\n    vec2  g = grad(p, (colorNoise.x * colorNoise.x));\n    float de = v / length(g);\n    \n    colorNoise = min(vec2(1.0), colorNoise + 0.1);\n    \n    vec3 fCol = vec3(0.0);\n    fCol= mix(vec3(0.2, 1.0, 0.0), vec3(1.0, 0.2, 0.0), max(0.0,colorNoise.x-0.5)*2.0);\n    fCol= mix(vec3(0.2, 0.2, 1.0), fCol, max(0.0,colorNoise.x*2.0));\n    \n    fCol *= 1.0 - soundMix;\n    \n    float edge = 6.5 / iResolution.x;\n    float darken = smoothstep(0.0, edge * 2.0, abs(de));\n    \n    vec3 border = fCol * darken;\n    \n\tvec3 bCol = vec3(0.0);\n    bCol= mix(vec3(0.2, 1.0, 0.0), vec3(1.0, 0.2, 0.0), max(0.0,colorNoise.y-0.5)*2.0);\n    bCol= mix(vec3(0.2, 0.2, 1.0), bCol, max(0.0,colorNoise.y*2.0));    \n\n    vec3 col = bCol * 0.5;\n    col = mix( col, border, 1.0-smoothstep(0.0, edge, de));\n    \n    fragColor = vec4(pow(col, vec3(1.0/2.2)), 1.0); \n}","name":"","description":"","type":"image"}]}