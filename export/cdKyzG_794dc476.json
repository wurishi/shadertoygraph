{"ver":"0.1","info":{"id":"cdKyzG","date":"1699801654","viewed":33,"name":"_Raymarching boxIFS","username":"hyrofumi","description":"_Raymarching IFSBox","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot(float a) {\n    float c = cos(a), s = sin(a);\n    return mat2(c,s,-s,c);\n}\n\nfloat boxIFS(vec3 p, int iter) {\n    for(int i=0; i<iter; i++) {\n        p = abs(p) - 1.;\n        p.xz *= rot(iTime * 0.75);\n        p.xy *= rot(1. + iTime);\n        p.yz *= rot(0.5 + iTime * 1.25);\n    }\n    \n    float d = boxSDF(p, vec3(0.5));\n    \n    return d;\n}\n\n\n// GetDist\nfloat GetDist(vec3 p) {\n    float d=0.;\n    \n    vec3 bPos = p;\n    \n    \n    // d = roundBoxSDF(bPos, vec3(.5, .5, .5), .1);\n    // d = boxSDF(bPos, vec3(1.5));\n    // d = sphereSDF(p, 2.0);\n    d = boxIFS(p, 2);\n    \n    return d;\n}\n\n// RayMarch\nDist RayMarch(vec3 ro,vec3 rd)\n{\n    float dO = 0.;//Distane Origin\n    float ds = 0.;\n    for(int i=0; i<MAX_STEPS; i++)\n    {\n        vec3 p = ro + rd * dO;\n        ds = GetDist(p);// ds is Distance Scene\n        dO += ds;\n        if(dO > MAX_DIST || ds < SURF_DIST)\n        break;\n    }\n    Dist dist;\n    dist.d = dO;\n    dist.ds = ds;\n    return dist;\n}\n\n\n// GetNormal\nvec3 GetNormal(vec3 p) { \n  float d = GetDist(p); // Distance\n  vec2 e = vec2(.01,0); // Epsilon\n \n  vec3 n = d - vec3(\n    GetDist( p - e.xyy),  // e.xyy is the same as vec3(.01,0,0).\n    GetDist( p - e.yxy),\n    GetDist( p - e.yyx));\n \n  return normalize(n);\n}\n \n // GetLight\nfloat GetLight(vec3 p) { \n  // Directional light\n  vec3 lightPos = vec3(0. ,0., -4.0); // Light Position\n  vec3 l = normalize(lightPos - p); // Light Vector\n  vec3 n = GetNormal(p); // Normal Vector\n   \n  float dif = dot(n, l); // Diffuse light\n  dif = clamp(dif, 0., 1.); // Clamp so it doesnt go below 0\n \n  // Shadows\n  float d = RayMarch(p+n*SURF_DIST*2., l).d; \n \n  if(d<length(lightPos-p)) dif *= .1;\n  return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uv2 = (2. * (fragCoord.xy) - iResolution.xy) / iResolution.x;  //現在の画素位置を0.0-1.0に正規化\n    \n    // Camera\n    float fov = 120.0;\n\n    vec3 ro = vec3(0, 0, -4);// Ray Origin/Camera\n    \n    vec3 target = vec3(0);\n    vec3 up = vec3(0, 1, 0);\n    vec3 fwd = normalize(target - ro);\n    vec3 right = normalize(cross(up, fwd));\n    up = normalize(cross(fwd, right));\n    \n    vec3 rd = normalize(right * uv2.x + up * uv2.y + fwd / tan(fov * TAU / 720.));\n    \n    // for use light\n    float d = RayMarch(ro,rd).d;// Distance\n    \n    vec3 p = ro + rd * d;\n    float dif = GetLight(p); // Diffuse lighting\n\n    vec3 color = vec3(dif);\n    \n    fragColor = vec4(color, 1.0);\n    // - for use light\n    \n    /* Dist d = RayMarch(ro, rd);// Distance\n    vec3 p = ro + rd * d.d;\n    \n    if (d.ds < 0.001) {\n        fragColor = vec4(1);\n    } else {\n        fragColor = vec4(0);\n    }*/\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/////////////////////////////\n// Constants\n/////////////////////////////\n#define PI 3.1415925359\n#define PI2 PI*2.\n#define TAU PI*2.\n#define MAX_STEPS 100// Mar Raymarching steps\n#define MAX_DIST 100.// Max Raymarching distance\n#define SURF_DIST .001// Surface Distance\n\n\n/////////////////////////////\n// struct\n/////////////////////////////\nstruct Dist {\n    float d;\n    float ds;\n};\n\n/////////////////////////////\n// primitives\n/////////////////////////////\n// Round Box - exact\nfloat roundBoxSDF( vec3 p, vec3 b, float r ) {\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\n// Box - exact \nfloat boxSDF( vec3 p, vec3 b ) {\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sphereSDF(vec3 p,float r){\n    return length(p) - r;\n}\n\n/////////////////////////////\n// transform\n/////////////////////////////\n\n// Rotate\nmat2 Rotate(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c,-s,s,c);\n}\n\n/////////////////////////////\n// Smooth blending operators\n/////////////////////////////\n \nfloat smoothIntersectSDF(float distA, float distB, float k ) {\n  float h = clamp(0.5 - 0.5*(distA-distB)/k, 0., 1.);\n  return mix(distA, distB, h ) + k*h*(1.-h); \n}\n \nfloat smoothUnionSDF(float distA, float distB, float k ) {\n  float h = clamp(0.5 + 0.5*(distA-distB)/k, 0., 1.);\n  return mix(distA, distB, h) - k*h*(1.-h); \n}\n \nfloat smoothDifferenceSDF(float distA, float distB, float k) {\n  float h = clamp(0.5 - 0.5*(distA+distB)/k, 0., 1.);\n  return mix(distA, -distB, h ) + k*h*(1.-h); \n}","name":"Common","description":"","type":"common"}]}