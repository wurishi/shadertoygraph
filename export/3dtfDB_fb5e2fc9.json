{"ver":"0.1","info":{"id":"3dtfDB","date":"1605904158","viewed":297,"name":"Rainbow Edges","username":"oneshade","description":"A fuzzy version of my \"Simple Webcam Edge Detection\" shader plus color and rainbow edges.","likes":3,"published":3,"flags":2,"usePreview":0,"tags":["edgedetection","rainbow","webcam"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float sensitivity = 0.5;\nconst float SQRT_2 = sqrt(2.0);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    mat3 samples = mat3(0.0);\n    vec2 screenUV = fragCoord / iResolution.xy;\n    vec3 webcamPixel, curTexel;\n\n    // Collect samples from the surrounding texels:\n    for (int i=-1; i < 2; i++) {\n        for (int j=-1; j < 2; j++) {\n            if (i == 0 && j == 0) {\n                curTexel = texture(iChannel0, screenUV).rgb;\n                webcamPixel = curTexel;\n            }\n\n            else {\n                curTexel = texture(iChannel0, (fragCoord + vec2(i, j)) / iResolution.xy).rgb;\n            }\n\n            samples[i + 1][j + 1] = (curTexel.r + curTexel.g + curTexel.b) / 3.0;\n        }\n    }\n\n    // Check whether the gradient over the area around the current texel is continuous:\n    // If it is not continuous, theoretically there is some sort of division or edge.\n    float edginess = 0.0;\n    for (int i=0; i < 3; i++) {\n        for (int j=0; j < 3; j++) {\n            // Compute the difference between the texel the loop is currently on and the current (center) texel:\n            float gradient1 = samples[1][1] - samples[i][j];\n            // Compute the difference between the current (center) texel and the texel opposite the texel the loop is currently on:\n            float gradient2 = samples[2 - i][2 - j] - samples[1][1];\n            // If (i, j) is a corner, the differences need to be divided by sqrt(2) to be normalized:\n            if (i == j || (2 - i) == j) {\n                gradient1 /= SQRT_2;\n                gradient2 /= SQRT_2;\n            }\n   \n            // Check how continuous the gradient is:\n            edginess = abs((gradient1 / sensitivity) - (gradient2 / sensitivity));\n        }\n    }\n\n    // Return a color based on whether the current texel is on an edge:\n    vec3 edgeColor = 0.5 + 0.5 * cos(iTime + screenUV.xyx + vec3(0.0, 2.0, 4.0));\n    vec3 color = mix(webcamPixel, edgeColor, edginess);\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}