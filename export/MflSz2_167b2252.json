{"ver":"0.1","info":{"id":"MflSz2","date":"1705484122","viewed":92,"name":"float2rgba","username":"dkireev","description":"Encode/decode float as RGBA for GPGPU. Allow to have NoData pixels.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["gpgpu"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"highp vec4 float2rgba(highp float f, highp float nodata) {\n    if(abs(f - nodata) < 0.000001) return vec4(0, 0, 0, 0);\n    highp float Module = abs(f); \n    highp float Sign = sign(f);\n    highp float Norm = 1.0 - Sign*Sign;\n    highp float Exponent = floor(log2(Module + Norm)); \n    highp float Mantissa = 8388608.0 + Sign + Sign*8388608.0*(Module/exp2(Exponent) - 1.0);\n    highp vec4 rgba;\n    rgba[0] = floor(Mantissa/65536.0);\n    rgba[1] = floor(mod(Mantissa,65536.0)/256.0);\n    rgba[2] = floor(Mantissa - rgba[0]*65536.0 - rgba[1]*256.0);\n    rgba[3] = Exponent+128.0;\n    return rgba;\n}\n\nhighp float rgba2float(highp vec4 rgba, highp float nodata) {\n    if(rgba[3] <= 0.0) return nodata;\n    highp float Shift = rgba[0]*65536.0 - rgba[1]*256.0 - rgba[2] - 8388608.0;\n    highp float Sign = sign(Shift);\n    highp float Exponent = rgba[3]-128.0;\n    highp float Mantissa = 1.0 + abs(Shift)/8388608.0;\n    highp float Result =  Sign*Mantissa*exp2(Exponent); \n    return Result;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = 2.0*(fragCoord/iResolution.xy - vec2(0.5,0.5));\n    //using [-1,1] for testing encode/decode\n\tvec4 rgba = float2rgba(uv.x, 99999.0);\n    if(uv.y > 0.0)\n       fragColor = rgba/255.0;\n    else{\n       float f = abs(rgba2float(rgba, 1.0));\n       fragColor = vec4(f,f,f,f);\n    }\n}","name":"Image","description":"","type":"image"}]}