{"ver":"0.1","info":{"id":"7dBSDd","date":"1715533315","viewed":23,"name":"metalic raymarching","username":"ddpms","description":"metalic raymarching","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","metalic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEP 100.\nconst float EPS = 0.001;\nconst float MAX = 1000.;\n\nconst vec3 bgCol = vec3(0.027,0.398,0.545);\nconst vec3 lPos = vec3(10.);\nconst vec3 lCol = vec3(0.940,0.871,0.853);\n\nfloat map(float v, float v1, float v2, float v3, float v4){\n    float a, b;\n    a = (v4-v3)/(v2-v1);\n    b = v3- a*v1;\n    return a*v+ b;\n}\n\nfloat n(float f1, float f2){ return max(f1,f2); }\nfloat u(float f1, float f2){ return min(f1,f2); }\nfloat diff(float f1, float f2){ return max(f1,-f2); }\n\nfloat sphereSDF(vec3 ray, float r){\n    return distance(ray, vec3(0.))-r;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\n\nfloat SDF(vec3 ray){\n    // ray *= rotate()\n    float result;\n    \n    float s1 = sphereSDF(ray, 1.);\n    float b1 = sdBox(ray, vec3(.8));\n    result = n(s1, b1);\n    \n    float s2 = sphereSDF(ray, 0.918);\n    result = diff(result, s2);\n    \n    float s3 = sphereSDF(ray, 0.392);\n    result = u(result, s3);\n    \n    return result;\n\n}\n\nvec3 getN(vec3 p){\n    vec2 e = vec2(EPS, 0.);\n    \n    float dx = SDF(p)-SDF(p-e.xyy);\n    float dy = SDF(p)-SDF(p-e.yxy);\n    float dz = SDF(p)-SDF(p-e.yyx);\n    return normalize(vec3(dx, dy, dz));\n}\n\nfloat intersect(vec3 cam, vec3 dir){\n    float md = 0.;\n    \n    vec3 p;\n    for(int i=0; i<100; ++i){\n        p = cam + dir*md;\n        \n        float d = SDF(p);\n        if(d<EPS){\n            return md;\n        }\n        md += d;\n        if(md>MAX){\n            return MAX;\n        }\n    }\n    return MAX;\n}\n\nvec3 shading(vec3 a,vec3 d,vec3 s,float smoothness,float metalic,vec3 p,vec3 cam)\n{    \n    float fresnel = metalic;\n    \n    vec3 N = getN(p);\n    vec3 L = normalize(lPos - p);\n    vec3 C = normalize(cam - p);\n    vec3 H = normalize(L + C);\n    \n    float dp = clamp(dot(N, L), 0., 1.);\n    float sp = pow(clamp(dot(H, N), 0., 1.), smoothness);\n    float ap = pow(1.-clamp(dot(N, C), 0., 1.), map(pow(metalic, .5), 0., 1., 5., 2.));\n    \n    vec3 diffuse = d*dp*lCol;\n    vec3 specular = s*sp;\n    vec3 ambient = a*ap;\n    \n    vec3 retCol = diffuse*(1.-fresnel) + specular*fresnel + ambient;\n    \n    return retCol;\n}\n\nmat3 rotate(vec3 axis, float angle){\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat3(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s, \n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  \n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c);\n}\n\n\nmat3 easyCam( vec2 angle ) {// peasyCam effect\n    vec2 t = angle;\n    angle.x = t.y*-1.;\n    angle.y = t.x;\n\tvec2 c = cos( angle );\n\tvec2 s = sin( angle );\n\t\n\treturn mat3(c.y      ,  0.0, -s.y,\n                s.y * s.x,  c.x,  c.y * s.x,\n                s.y * c.x, -s.x,  c.y * c.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv*2.-1.;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 cam = vec3(0,0,3);\n    vec3 dir = normalize(vec3(uv, -1.));\n    \n    vec2 mouse = iMouse.xy/iResolution.xy;\n    mouse = mouse*2.-1.;\n    mouse *= 5.;\n    cam *= easyCam(mouse);\n    dir *= easyCam(mouse);\n    float dist = intersect(cam, dir);\n    \n    vec3 col;    \n\tif(dist>MAX-EPS){\n        col = bgCol;\n        vec3 C2L = normalize(lPos-cam);\n        \n        float sunR = pow(clamp(dot(dir, C2L), 0., 1.), 10.);\n        col = mix(col, lCol, sunR);\n        fragColor = vec4(col, 1.);\n        return;\n    }    \n    \n    vec3 p = cam + dir*dist;\n    vec3 a = bgCol;\n    vec3 d = vec3(0.449,0.995,0.094);\n    vec3 s = lCol;\n    float smoothness = 1000.120;\n    float metalic = 0.860; \n    col = shading(a,d,s,smoothness,metalic,p,cam);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}