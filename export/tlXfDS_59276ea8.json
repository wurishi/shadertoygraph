{"ver":"0.1","info":{"id":"tlXfDS","date":"1597590522","viewed":246,"name":"Mandala: Art Of Code","username":"nixaboo","description":"Messing around with a few techniques I learned in Art Of code \n","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["mandalaartofcode"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 COLOR_OUTLINE = vec3(0.);\nvec3 COLOR_1 = vec3(.807, .517, .678);\nvec3 COLOR_2 = vec3(0.807, 0.588, 0.650);\nvec3 COLOR_GREEN = vec3(0.698, 0.792, 0.568);\n\n\n#define S(a,b,c) smoothstep(a,b,c)\n\nconst float pi2 = 6.2831;\nconst float pi = 3.1415;\n\n#define S(a,b,c) smoothstep(a,b,c)\n\nmat2 Rot(float a) { \n    float s = sin(a), c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\n\nvec4 Circle(vec2 uv, vec3 color, float r, float blur) { \n    float d = length(uv);\n    float a = S(r, r - blur, length(uv));\n    return vec4(color, a);    \n}\n\n\nfloat RectByWidth(vec2 uv, float wb, float wt, float h, float edge) {\n    \n    float width = (wt - wb) * (h - uv.y)/h;\n    float x1 = (width * .5);\n    float x2 = -width * .5; //wb at y = 0, and wt at y = wt        \n    float y1 = h;\n    float y2 = 0.;\n        \n    float x = S(x1 - edge, x1, uv.x) * S(x2, x2-edge, uv.x);\n    float y = S(y1, y1-edge, uv.y) * S(y2, y2+edge, uv.y);\n    \n    return x*y;\n}\n\nfloat Rect(vec2 uv, float x1, float y1, float w, float h, float edge) {\n    \n    float x2 = x1 + w;\n    float y2 = y1 - h;\n    \n    float x = S(x1 - edge, x1, uv.x) * S(x2, x2-edge, uv.x);\n    float y = S(y1, y1-edge, uv.y) * S(y2, y2+edge, uv.y);\n    \n    return x*y;\n}\n\nvec4 Flower(vec2 uv, vec2 pos, float angle, vec3 baseColor, float yScale) {             \n    uv -= pos;\n    uv *= Rot(angle);    \n    vec2 st = vec2(atan(uv.x, uv.y), length(uv));\n    uv = vec2(st.x / 6.2831+.5, st.y); //x will be 0 to 1 from bottom to bottom going clockwise \n                                       //y will be the distance from the center \n    uv.y *= yScale;\n    \n    float x = uv.x * 5.; //you go from 0 to 1\n    \n    float id = floor(x);\n    float m = min(fract(x), fract(1.-x)); //assuming going from 0 to 1 it will give it a num\n                                          //going from 0 to .5 and then back to .0\n                                          \n    float s = max(((m+.3) - uv.y), 0.); // * (id == 2. ? 1. : 0.);    \n    float c = smoothstep(.0, .01, s);\n    \n    return vec4(baseColor, c); //played with this to get a leaf I like\n}\n\n\nvec4 DrawCenterCircle(vec2 uv) { \n    vec4 color = vec4(0.);\n    vec4 center_bg = Circle(uv, vec3(0., 0., 0.), .22, .004);\n    vec4 center = Circle(uv, COLOR_1, .2, .004);\n    \n    color = mix(color, center_bg, center_bg.a);\n    color = mix(color, center, center.a);\n    \n    return color;\n}\n\nvec4 DrawRects(vec2 uv, float count, vec3 baseColor, float dist, float startAngle) { \n    vec4 col = vec4(0.);    \n    \n    for(float d = 0.; d < pi2; d+= pi2/count) {        \n        vec2 pos = uv;\n\n        pos -= vec2(sin(startAngle + d), cos(startAngle+ d)) * dist;\n        pos = pos * Rot(1./4. * pi + d + startAngle + 0.02);\n        \n        vec4 rect = vec4(baseColor, Rect(pos, -.2, .2, .3, .3, .01));\n        col = mix(col, rect, rect.a);\n    }\n    \n    return col;\n}\n\nvec4 DrawTriangles(vec2 uv, float count, vec3 baseColor, float dist, float startAngle) { \n    dist = 1.21;\n    startAngle += 0.26;\n//    float r = RectByWidth(uv, 1., .0, 1., 0.01);\n//    col = mix(col, vec4(.5, .5, .5, r), r); \n    vec4 col = vec4(0.);\n    for(float d = 0.; d < pi2; d+= pi2/count) {        \n        vec2 pos = uv;\n\n        pos -= vec2(sin(startAngle + d), cos(startAngle+ d)) * dist;\n        pos = pos * Rot(d - 0.405);\n        \n        vec4 rect = vec4(baseColor, RectByWidth(pos, .28, .0, .3 + sin(iTime)*.03, .02));\n        col = mix(col, rect, rect.a);\n    }\n    \n    return col;\n}\n\nvec4 DrawCircles(vec2 uv, float count, vec3 baseColor, float dist, float radius, float startAngle) { \n    vec4 col = vec4(0.);    \n    \n    for(float d = 0.; d < pi2; d+= pi2/count) {        \n        vec2 pos = uv;\n\n        pos -= vec2(sin(startAngle + d), cos(startAngle+ d)) * dist;\n        \n        vec4 rect = Circle(pos, baseColor, radius, .01);\n        col = mix(col, rect, rect.a);\n    }\n    \n    return col;\n}\n\nvec4 DrawHalfCircles(vec2 uv, float count, vec3 baseColor, float dist, float bigR, float lilR, float startAngle) { \n    vec4 col = vec4(0.);    \n    \n    for(float d = 0.; d < pi2; d+= pi2/count) {        \n        vec2 pos = uv;\n\n        pos -= vec2(sin(startAngle + d), cos(startAngle+ d)) * dist;\n        pos *= Rot(d + 1./4. * pi  + sin(iTime)*2.);\n        vec4 c1 = Circle(pos, baseColor, bigR, .01);\n        vec4 c2 = Circle(pos, baseColor, lilR, .01);\n        \n        float rect = Rect(pos, -bigR, 0., bigR * 2., bigR, .005);\n        \n        col = mix(col, c1, c1 * (1. - c2.a) * (1. - rect));\n    }\n    \n    return col;\n}\n\n\nvec4 DrawLeaves(vec2 uv, float leafCount, vec3 leafColor, float scale, float yScale) { \n    vec4 col = vec4(0.);    \n    \n    float leafDistanceScale = 0.;\n    float d = 0.;\n//    for(float d = 0.; d < pi2; d+= pi2/1.) {        \n        vec2 pos = uv;\n        \n        vec4 flower = Flower(pos * scale, vec2(sin(d), cos(d)) * leafDistanceScale, d, leafColor, yScale);\n        vec4 flower_outline = Flower(pos * (scale * .9), vec2(sin(d), cos(d)) * leafDistanceScale, d, vec3(0., 0., 0), yScale);\n\n        col = mix(col, flower_outline, flower_outline.a);\n        col = mix(col, flower, flower.a);\n//    }\n    \n    return col;\n}\n\nfloat sin01(float time) { \n    return sin(time)*.5+.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime;\n    vec2 uv = (fragCoord.xy-.5*iResolution.xy)/iResolution.y;\n    uv *= 3.3;    \n    \n    vec4 col = vec4(1.);    \n    \n    \n    vec4 half_circles_1 = DrawHalfCircles(uv , 5., vec3(.6, .3, .3), 1.25 +  + sin01(time - pi)*.15, .25, .17, 0.63);\n    \n    vec4 triangles_1 = DrawTriangles(uv, 5., COLOR_GREEN, 1., 0.);\n    \n    vec4 circles_1 = DrawCircles(uv , 5., vec3(.5, .2, .2), 1.25 + sin01(time - pi)*.15, .14, 0.63 );\n    \n    vec4 diamonds_1 = DrawRects(uv, 5., vec3(0.), .85 + sin01(time - pi)*.15, 0.369);\n    vec4 diamonds_2 = DrawRects(uv, 5., vec3(0.), .85 + sin01(time - pi)*.15, 0.369 + 0.519);\n    \n    vec4 leaf_1 = DrawLeaves(uv , 7., COLOR_2, 1., 1. + + sin01(time)*.2);\n    vec4 leaf_2 = DrawLeaves(uv * Rot(2./4. * pi2) , 10., COLOR_GREEN, .8, 1. + sin01(time)*.1);\n    vec4 leaf_3 = DrawLeaves(uv * Rot(4./4. * pi2) , 10., COLOR_GREEN, .7, 1. + + sin01(time)*.05);\n\n\n    col = mix(col, half_circles_1, half_circles_1.a);\n    \n    float a = S(1., .8, sin01(time - pi));\n    col = mix(col, triangles_1, triangles_1.a - a);\n    col = mix(col, circles_1, circles_1.a);\n//    col = mix(col, circles_2, circles_2.a);\n    \n    col = mix(col, diamonds_1, diamonds_1.a);\n    col = mix(col, diamonds_1, diamonds_2.a);\n    \n    col = mix(col, leaf_3, leaf_3.a);\n    col = mix(col, leaf_2, leaf_2.a);\n    col = mix(col, leaf_1, leaf_1.a);\n    \n    vec4 center = DrawCenterCircle(uv);\n    col = mix(col, center, center.a);\n\n    fragColor = vec4(col);\n}\n","name":"Image","description":"","type":"image"}]}