{"ver":"0.1","info":{"id":"XfyyD3","date":"1732958187","viewed":19,"name":"DoubleSideRendering","username":"amenone","description":"DoubleSideRendering","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["doublesiderendering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 球の距離関数\nfloat sphereSDF(vec3 p, float radius) {\n    return length(p) - radius;\n}\n\n// 立方体の距離関数\nfloat boxSDF(vec3 p, vec3 size) {\n    vec3 d = abs(p) - size;\n    float outsideDistance = length(max(d, 0.0));\n    float insideDistance = min(max(d.x, max(d.y, d.z)), 0.0);\n    return outsideDistance + insideDistance;\n}\n\n// シーンの距離関数\nfloat sceneSDF(vec3 p) {\n    //float dSphere = sphereSDF(p, 1.0);\n    float dBox = boxSDF(p , vec3(1.0));\n\n    // 球と立方体を合体\n    return dBox;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // カメラの設定\n    vec2 p = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    // カメラの設定\n    vec3 target = vec3(0.0, 0.0, 0.0);      // カメラが注目するターゲット位置\n    vec3 cp = vec3(0.0, -7.0, -15.0);       // カメラの位置\n    vec3 cd = normalize(target - cp);       // カメラの視線方向\n    vec3 cs = normalize(cross(cd, vec3(0.0, 1.0, 0.0))); // 右方向\n    vec3 cu = normalize(cross(cd, cs));     // 上方向\n    \n    \n    float fov = 2.5; // 視野角\n    vec3 rd = normalize(cs * p.x + cu * p.y + cd * fov); // レイの方向\n    float originalDistance = 0.;\n    float d = 0.;\n\n    // レイマーチングのループ\n    float t = 0.0;\n    int maxSteps = 100;\n    vec3 col = vec3(0.);\n    for (int i = 0; i < maxSteps; i++) {\n        vec3 p = cp + t * rd;\n        \n        float d = sceneSDF(p);\n        d = abs(d);\n        \n        if (d < 0.001) \n        {\n            col +=  vec3(0.0, 0.0, 1.0) * .1;\n            t += 0.001;\n        }\n        \n        t += d;\n        if (t > 20.0) break;\n    }\n\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}