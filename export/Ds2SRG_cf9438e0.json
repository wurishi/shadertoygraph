{"ver":"0.1","info":{"id":"Ds2SRG","date":"1671721826","viewed":125,"name":"Healthy Bath in Phitamine Sea ðŸ”Š","username":"blurryroots","description":"Simple melody using sine, triangle and square tones.","likes":2,"published":1,"flags":40,"usePreview":0,"tags":["sound","audio","synthesizer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Shadertoy Educational License\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n// You are free however, to incorporate this work within the Shadertoy\n// ecosystem, e.g. by forking.\n// This work may incorporate other permissivly shared, educational work,\n// which is attributed appropriatly. Please do so as well.\n// Thanks to https://www.shadertoy.com/user/iq for inspiring this license.\n\n#define WITH_SOUND_IN 1\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    float t = iTime/1.;\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float pixel_size = 2.*phi0 > mod (t, 8.*phi0)\n        ? 32.\n        : 4.*phi0 < mod (t, 8.*phi0)\n            ? 8.\n            : 16.\n        ;    \n    vec3 pixel_res = iResolution;\n    vec2 pixel_coord = fragCoord;\n    vec2 pixel_uv = pixelise (pixel_size, fragCoord, pixel_res);\n    \n    vec4 m = melody (iTime);\n    \n    vec4 snd = texture (iChannel0, pixel_uv);    \n    vec3 c = vec3 (0.);\n    c += vec3 (snd.x, 0., snd.x);\n    c += vec3 (0., snd.y, snd.y);\n    c += vec3 (snd.z, snd.z, 0.);\n    c += vec3 (0., snd.w, 0.);\n    \n    vec4 bg = texture (iChannel1, pixel_uv);\n    \n    fragColor = mix (bg, vec4 (c, 1.), 0.5);\n    #if WITH_SOUND_IN\n    fragColor = max (fragColor, texture (iChannel2, uv));\n    #endif\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Shadertoy Educational License\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n// You are free however, to incorporate this work within the Shadertoy\n// ecosystem, e.g. by forking.\n// This work may incorporate other permissivly shared, educational work,\n// which is attributed appropriatly. Please do so as well.\n// Thanks to https://www.shadertoy.com/user/iq for inspiring this license.\n\nvec2 mainSound (int samp, float time) {    \n    vec4 m = melody (time);\n    \n    float s = m.x\n        + m.y\n        + m.z\n        + m.w\n        ;\n    s /= 4.;\n    return vec2 (s);\n}","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"// Shadertoy Educational License\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n// You are free however, to incorporate this work within the Shadertoy\n// ecosystem, e.g. by forking.\n// This work may incorporate other permissivly shared, educational work,\n// which is attributed appropriatly. Please do so as well.\n// Thanks to https://www.shadertoy.com/user/iq for inspiring this license.\n\nconst float pi = 355./115.;\nconst float tau = 2.0 * pi;\nconst float phi = (1.0 + sqrt (5.0)) / 2.0;\nconst float phi0 = phi - 1.0;\nconst float phi0i = 1.0 - phi0;\n\n// https://www.shadertoy.com/view/dts3zM\nvec2 pixelise (float pixel_size, inout vec2 coords, inout vec3 res) {\n    // Defines the amount of pixels to fill y.\n    float pixel_resolution_y = res.x / pixel_size;\n    // The factor to multiply incoming frag coordinates and screen resolution.\n    float pixel_factor = pixel_resolution_y / res.y;\n    \n    // Project fragment to pixel grid and discretise.\n    coords = floor (coords * pixel_factor);\n    // Project display resolution to pixel grid and discretise.\n    res = floor (res * pixel_factor);\n    \n    // Discretised uv space for texture sampling.\n    vec2 pixel_uv = coords.xy / res.xy;\n    return pixel_uv;\n}\n\nfloat psin (float t) {\n    return (1.0 + sin (t)) / 2.0;\n}\n\nfloat tune (float f, int i) {\n    float b = pow (2., (1./12.));\n    float s = pow (b, float (i));\n    return f * s;\n}\n\nfloat tr (float x) {\n    float p = 2.0;\n    float u = 4.0;\n    float a = 1.0;\n\n    float k = (u * a) / p;\n    float pu = p / u;\n\n    float d = mod (x - pu, p) - (2.0 * pu);\n    float s = k * abs (d) - a;\n\n    return s;\n}\n\nfloat sq (float x) {\n    float s = 0.5*sign (x);\n    return s;\n}\n\nfloat tone (float t, float f, int n, float d) {\n    return sin(tau * tune (f, n) * t) * exp(-t * d);\n}\nfloat ptone (float t, float f, int n, float d) {\n    return psin(tau * tune (f, n) * t) * exp(-t * d);\n}\nfloat sqtone (float t, float f, int n, float d) {\n    return sq(sin(tau * tune (f, n) * t)) * exp(-t * d);\n}\nfloat trtone (float t, float f, int n, float d) {\n    return tr(sin(tau * tune (f, n) * t)) * exp(-t * d);\n}\n\nvec4 melody (float time) {\n    float t = mod (time, phi0*1.);\n    float t2 = mod (time, phi0*phi);\n    float tt = mod (time, phi);\n    float t3 = mod (time, 4.0*phi) > phi\n        ? mod (time, phi0)\n        : mod (time, 2.0*phi)\n        ;\n    float t4 = mod (time, pi);\n    \n    float f = 432.0/2.0;\n    int af = 4.*phi0 >= mod (time, 8. * phi0)\n        ? -7\n        : (6.*phi0 < mod (time, 8. * phi0)\n            ? -3\n            : 0\n          )\n        ;\n    float a = sqtone (t, f, af, 16.0);\n    float b = tone (t2, f, 4, 9.0);\n    float c = trtone (tt, f, -12, 5.0);\n    float d = tone (t, f, -24, 10.0);\n    \n    return vec4 (a, b, c, d);\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Shadertoy Educational License\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n// You are free however, to incorporate this work within the Shadertoy\n// ecosystem, e.g. by forking.\n// This work may incorporate other permissivly shared, educational work,\n// which is attributed appropriatly. Please do so as well.\n// Thanks to https://www.shadertoy.com/user/iq for inspiring this license.\n\nfloat flash (vec2 uv, vec2 p, float a) {\n    float s = a / length (uv - p);\n    s = smoothstep (3. / iResolution.y, 2., s);\n    return s;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    \n    vec2 uv = (2. * fragCoord - iResolution.xy)\n        / min (iResolution.x, iResolution.y)\n        ;\n    \n    vec4 m = melody (iTime);\n    \n    vec4 l = vec4 (0.);\n    \n    float s1 = flash (uv, vec2 (-0.5, 0.), 1.*m.x);    \n    l.x = s1;\n    \n    float s2 = flash (uv, vec2 (+0.5, 0.), 1.*m.y);  \n    l.y = s2;\n    \n    float s3 = flash (uv, vec2 (+0., -0.5), 1.*m.z); \n    l.z = s3;\n    \n    float s4 = flash (uv, vec2 (+0., +0.5), 1.*m.w); \n    l.w = s4;\n    \n    fragColor = l;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"const bool SOUND_IN = true;\n// === icon message: \"sound in\". link: https://www.shadertoy.com/view/MtyXRW\nfloat message(vec2 uv) { // to alter in the icon\n    uv-=vec2(1.,10.); if ((uv.x<0.)||(uv.x>=32.)||(uv.y<0.)||(uv.y>=3.)) return -1.; \n    int i=1, bit=int(pow(2.,floor(32.-uv.x)));\n    if (int(uv.y)==2) i=  928473456/bit; // 00110111 01010111 01100001 01110000\n    if (int(uv.y)==1) i=  626348112/bit; // 00100101 01010101 01010000 01010000\n    if (int(uv.y)==0) i= 1735745872/bit; // 01100111 01110101 01100001 01010000\n \treturn float(i-2*(i/2));\n}\n// ===\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (SOUND_IN) {\n    // Overlay by FabriceNeyret2 https://www.shadertoy.com/view/MtyXRW\n    if (iResolution.y<2000.) {float c=message(fragCoord.xy/8.);if(c>=0.){fragColor=vec4(c);return;}}  \n    }\n}","name":"Buffer B","description":"","type":"buffer"}]}