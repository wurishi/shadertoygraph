{"ver":"0.1","info":{"id":"tllBR2","date":"1597226343","viewed":97,"name":"Noise waves 1","username":"RodzLabs","description":"This shader was generated using Material Maker (that's why the code is horrible :D).","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["generated"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//---\n\nfloat rand(vec2 x) {\n    return fract(cos(dot(x, vec2(13.9898, 8.141))) * 43758.5453);\n}\n\nvec2 rand2(vec2 x) {\n    return fract(cos(vec2(dot(x, vec2(13.9898, 8.141)),\n\t\t\t\t\t\t  dot(x, vec2(3.4562, 17.398)))) * 43758.5453);\n}\n\nvec3 rand3(vec2 x) {\n    return fract(cos(vec3(dot(x, vec2(13.9898, 8.141)),\n                          dot(x, vec2(3.4562, 17.398)),\n                          dot(x, vec2(13.254, 5.867)))) * 43758.5453);\n}\n\nvec3 rgb2hsv(vec3 c) {\n\tvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n\tvec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\n\tvec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\n\n\tfloat d = q.x - min(q.w, q.y);\n\tfloat e = 1.0e-10;\n\treturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c) {\n\tvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n\tvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n\treturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat fbm_value(vec2 coord, vec2 size, float seed) {\n\tvec2 o = floor(coord)+rand2(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec2 f = fract(coord);\n\tfloat p00 = rand(mod(o, size));\n\tfloat p01 = rand(mod(o + vec2(0.0, 1.0), size));\n\tfloat p10 = rand(mod(o + vec2(1.0, 0.0), size));\n\tfloat p11 = rand(mod(o + vec2(1.0, 1.0), size));\n\tvec2 t = f * f * (3.0 - 2.0 * f);\n\treturn mix(mix(p00, p10, t.x), mix(p01, p11, t.x), t.y);\n}\n\nfloat fbm_perlin(vec2 coord, vec2 size, float seed) {\n\tvec2 o = floor(coord)+rand2(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec2 f = fract(coord);\n\tfloat a00 = rand(mod(o, size)) * 6.28318530718;\n\tfloat a01 = rand(mod(o + vec2(0.0, 1.0), size)) * 6.28318530718;\n\tfloat a10 = rand(mod(o + vec2(1.0, 0.0), size)) * 6.28318530718;\n\tfloat a11 = rand(mod(o + vec2(1.0, 1.0), size)) * 6.28318530718;\n\tvec2 v00 = vec2(cos(a00), sin(a00));\n\tvec2 v01 = vec2(cos(a01), sin(a01));\n\tvec2 v10 = vec2(cos(a10), sin(a10));\n\tvec2 v11 = vec2(cos(a11), sin(a11));\n\tfloat p00 = dot(v00, f);\n\tfloat p01 = dot(v01, f - vec2(0.0, 1.0));\n\tfloat p10 = dot(v10, f - vec2(1.0, 0.0));\n\tfloat p11 = dot(v11, f - vec2(1.0, 1.0));\n\tvec2 t = f * f * (3.0 - 2.0 * f);\n\treturn 0.5 + mix(mix(p00, p10, t.x), mix(p01, p11, t.x), t.y);\n}\n\nfloat fbm_perlinabs(vec2 coord, vec2 size, float seed) {\n\treturn abs(2.0*fbm_perlin(coord, size, seed)-1.0);\n}\n\nfloat fbm_cellular(vec2 coord, vec2 size, float seed) {\n\tvec2 o = floor(coord)+rand2(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec2 f = fract(coord);\n\tfloat min_dist = 2.0;\n\tfor(float x = -1.0; x <= 1.0; x++) {\n\t\tfor(float y = -1.0; y <= 1.0; y++) {\n\t\t\tvec2 node = rand2(mod(o + vec2(x, y), size)) + vec2(x, y);\n\t\t\tfloat dist = sqrt((f - node).x * (f - node).x + (f - node).y * (f - node).y);\n\t\t\tmin_dist = min(min_dist, dist);\n\t\t}\n\t}\n\treturn min_dist;\n}\n\nfloat fbm_cellular2(vec2 coord, vec2 size, float seed) {\n\tvec2 o = floor(coord)+rand2(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec2 f = fract(coord);\n\tfloat min_dist1 = 2.0;\n\tfloat min_dist2 = 2.0;\n\tfor(float x = -1.0; x <= 1.0; x++) {\n\t\tfor(float y = -1.0; y <= 1.0; y++) {\n\t\t\tvec2 node = rand2(mod(o + vec2(x, y), size)) + vec2(x, y);\n\t\t\tfloat dist = sqrt((f - node).x * (f - node).x + (f - node).y * (f - node).y);\n\t\t\tif (min_dist1 > dist) {\n\t\t\t\tmin_dist2 = min_dist1;\n\t\t\t\tmin_dist1 = dist;\n\t\t\t} else if (min_dist2 > dist) {\n\t\t\t\tmin_dist2 = dist;\n\t\t\t}\n\t\t}\n\t}\n\treturn min_dist2-min_dist1;\n}\n\nfloat fbm_cellular3(vec2 coord, vec2 size, float seed) {\n\tvec2 o = floor(coord)+rand2(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec2 f = fract(coord);\n\tfloat min_dist = 2.0;\n\tfor(float x = -1.0; x <= 1.0; x++) {\n\t\tfor(float y = -1.0; y <= 1.0; y++) {\n\t\t\tvec2 node = rand2(mod(o + vec2(x, y), size))*0.5 + vec2(x, y);\n\t\t\tfloat dist = abs((f - node).x) + abs((f - node).y);\n\t\t\tmin_dist = min(min_dist, dist);\n\t\t}\n\t}\n\treturn min_dist;\n}\n\nfloat fbm_cellular4(vec2 coord, vec2 size, float seed) {\n\tvec2 o = floor(coord)+rand2(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec2 f = fract(coord);\n\tfloat min_dist1 = 2.0;\n\tfloat min_dist2 = 2.0;\n\tfor(float x = -1.0; x <= 1.0; x++) {\n\t\tfor(float y = -1.0; y <= 1.0; y++) {\n\t\t\tvec2 node = rand2(mod(o + vec2(x, y), size))*0.5 + vec2(x, y);\n\t\t\tfloat dist = abs((f - node).x) + abs((f - node).y);\n\t\t\tif (min_dist1 > dist) {\n\t\t\t\tmin_dist2 = min_dist1;\n\t\t\t\tmin_dist1 = dist;\n\t\t\t} else if (min_dist2 > dist) {\n\t\t\t\tmin_dist2 = dist;\n\t\t\t}\n\t\t}\n\t}\n\treturn min_dist2-min_dist1;\n}\n\nfloat fbm_cellular5(vec2 coord, vec2 size, float seed) {\n\tvec2 o = floor(coord)+rand2(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec2 f = fract(coord);\n\tfloat min_dist = 2.0;\n\tfor(float x = -1.0; x <= 1.0; x++) {\n\t\tfor(float y = -1.0; y <= 1.0; y++) {\n\t\t\tvec2 node = rand2(mod(o + vec2(x, y), size)) + vec2(x, y);\n\t\t\tfloat dist = max(abs((f - node).x), abs((f - node).y));\n\t\t\tmin_dist = min(min_dist, dist);\n\t\t}\n\t}\n\treturn min_dist;\n}\n\nfloat fbm_cellular6(vec2 coord, vec2 size, float seed) {\n\tvec2 o = floor(coord)+rand2(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec2 f = fract(coord);\n\tfloat min_dist1 = 2.0;\n\tfloat min_dist2 = 2.0;\n\tfor(float x = -1.0; x <= 1.0; x++) {\n\t\tfor(float y = -1.0; y <= 1.0; y++) {\n\t\t\tvec2 node = rand2(mod(o + vec2(x, y), size)) + vec2(x, y);\n\t\t\tfloat dist = max(abs((f - node).x), abs((f - node).y));\n\t\t\tif (min_dist1 > dist) {\n\t\t\t\tmin_dist2 = min_dist1;\n\t\t\t\tmin_dist1 = dist;\n\t\t\t} else if (min_dist2 > dist) {\n\t\t\t\tmin_dist2 = dist;\n\t\t\t}\n\t\t}\n\t}\n\treturn min_dist2-min_dist1;\n}\nvec2 transform(vec2 uv, vec2 translate, float rotate, vec2 scale, bool repeat) {\n \tvec2 rv;\n\tuv -= translate;\n\tuv -= vec2(0.5);\n\trv.x = cos(rotate)*uv.x + sin(rotate)*uv.y;\n\trv.y = -sin(rotate)*uv.x + cos(rotate)*uv.y;\n\trv /= scale;\n\trv += vec2(0.5);\n    if (repeat) {\n\t\treturn fract(rv);\n\t} else {\n\t\treturn clamp(rv, vec2(0.0), vec2(1.0));\n\t}\t\n}vec2 scale(vec2 uv, vec2 center, vec2 scale) {\n\tuv -= center;\n\tuv /= scale;\n\tuv += center;\n    return uv;\n}vec3 blend_normal(vec2 uv, vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*c1 + (1.0-opacity)*c2;\n}\n\nvec3 blend_dissolve(vec2 uv, vec3 c1, vec3 c2, float opacity) {\n\tif (rand(uv) < opacity) {\n\t\treturn c1;\n\t} else {\n\t\treturn c2;\n\t}\n}\n\nvec3 blend_multiply(vec2 uv, vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*c1*c2 + (1.0-opacity)*c2;\n}\n\nvec3 blend_screen(vec2 uv, vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*(1.0-(1.0-c1)*(1.0-c2)) + (1.0-opacity)*c2;\n}\n\nfloat blend_overlay_f(float c1, float c2) {\n\treturn (c1 < 0.5) ? (2.0*c1*c2) : (1.0-2.0*(1.0-c1)*(1.0-c2));\n}\n\nvec3 blend_overlay(vec2 uv, vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*vec3(blend_overlay_f(c1.x, c2.x), blend_overlay_f(c1.y, c2.y), blend_overlay_f(c1.z, c2.z)) + (1.0-opacity)*c2;\n}\n\nvec3 blend_hard_light(vec2 uv, vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*0.5*(c1*c2+blend_overlay(uv, c1, c2, 1.0)) + (1.0-opacity)*c2;\n}\n\nfloat blend_soft_light_f(float c1, float c2) {\n\treturn (c2 < 0.5) ? (2.0*c1*c2+c1*c1*(1.0-2.0*c2)) : 2.0*c1*(1.0-c2)+sqrt(c1)*(2.0*c2-1.0);\n}\n\nvec3 blend_soft_light(vec2 uv, vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*vec3(blend_soft_light_f(c1.x, c2.x), blend_soft_light_f(c1.y, c2.y), blend_soft_light_f(c1.z, c2.z)) + (1.0-opacity)*c2;\n}\n\nfloat blend_burn_f(float c1, float c2) {\n\treturn (c1==0.0)?c1:max((1.0-((1.0-c2)/c1)),0.0);\n}\n\nvec3 blend_burn(vec2 uv, vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*vec3(blend_burn_f(c1.x, c2.x), blend_burn_f(c1.y, c2.y), blend_burn_f(c1.z, c2.z)) + (1.0-opacity)*c2;\n}\n\nfloat blend_dodge_f(float c1, float c2) {\n\treturn (c1==1.0)?c1:min(c2/(1.0-c1),1.0);\n}\n\nvec3 blend_dodge(vec2 uv, vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*vec3(blend_dodge_f(c1.x, c2.x), blend_dodge_f(c1.y, c2.y), blend_dodge_f(c1.z, c2.z)) + (1.0-opacity)*c2;\n}\n\nvec3 blend_lighten(vec2 uv, vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*max(c1, c2) + (1.0-opacity)*c2;\n}\n\nvec3 blend_darken(vec2 uv, vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*min(c1, c2) + (1.0-opacity)*c2;\n}\n\nvec3 blend_difference(vec2 uv, vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*clamp(c2-c1, vec3(0.0), vec3(1.0)) + (1.0-opacity)*c2;\n}\nconst float p_o52326_amount = 1.000000000;\nconst float p_o46873_translate_x = 0.059999999;\nconst float p_o46873_rotate = 0.000000000;\nconst float p_o46873_scale_x = 1.000000000;\nconst float p_o46873_scale_y = 1.000000000;\nconst float p_o70492_repeat = 1.000000000;\nconst float p_o70492_rotate = 90.000000000;\nconst float p_o70492_gradient_0_pos = 0.000000000;\nconst float p_o70492_gradient_0_r = 0.000000000;\nconst float p_o70492_gradient_0_g = 0.000000000;\nconst float p_o70492_gradient_0_b = 0.000000000;\nconst float p_o70492_gradient_0_a = 1.000000000;\nconst float p_o70492_gradient_1_pos = 0.500000000;\nconst float p_o70492_gradient_1_r = 1.000000000;\nconst float p_o70492_gradient_1_g = 1.000000000;\nconst float p_o70492_gradient_1_b = 1.000000000;\nconst float p_o70492_gradient_1_a = 1.000000000;\nconst float p_o70492_gradient_2_pos = 1.000000000;\nconst float p_o70492_gradient_2_r = 0.000000000;\nconst float p_o70492_gradient_2_g = 0.000000000;\nconst float p_o70492_gradient_2_b = 0.000000000;\nconst float p_o70492_gradient_2_a = 1.000000000;\nvec4 o70492_gradient_gradient_fct(float x) {\n  if (x < p_o70492_gradient_0_pos) {\n    return vec4(p_o70492_gradient_0_r,p_o70492_gradient_0_g,p_o70492_gradient_0_b,p_o70492_gradient_0_a);\n  } else if (x < p_o70492_gradient_1_pos) {\n    return mix(vec4(p_o70492_gradient_0_r,p_o70492_gradient_0_g,p_o70492_gradient_0_b,p_o70492_gradient_0_a), vec4(p_o70492_gradient_1_r,p_o70492_gradient_1_g,p_o70492_gradient_1_b,p_o70492_gradient_1_a), 0.5-0.5*cos(3.14159265359*(x-p_o70492_gradient_0_pos)/(p_o70492_gradient_1_pos-p_o70492_gradient_0_pos)));\n  } else if (x < p_o70492_gradient_2_pos) {\n    return mix(vec4(p_o70492_gradient_1_r,p_o70492_gradient_1_g,p_o70492_gradient_1_b,p_o70492_gradient_1_a), vec4(p_o70492_gradient_2_r,p_o70492_gradient_2_g,p_o70492_gradient_2_b,p_o70492_gradient_2_a), 0.5-0.5*cos(3.14159265359*(x-p_o70492_gradient_1_pos)/(p_o70492_gradient_2_pos-p_o70492_gradient_1_pos)));\n  }\n  return vec4(p_o70492_gradient_2_r,p_o70492_gradient_2_g,p_o70492_gradient_2_b,p_o70492_gradient_2_a);\n}\nconst int seed_o140551 = 65287;\nconst float p_o140551_scale_x = 8.000000000;\nconst float p_o140551_scale_y = 2.000000000;\nconst float p_o140551_iterations = 4.000000000;\nconst float p_o140551_persistence = 0.200000003;\nfloat o140551_fbm(vec2 coord, vec2 size, int octaves, float persistence, float seed) {\n\tfloat normalize_factor = 0.0;\n\tfloat value = 0.0;\n\tfloat scale = 1.0;\n\tfor (int i = 0; i < octaves; i++) {\n\t\tvalue += fbm_cellular2(coord*size, size, seed) * scale;\n\t\tnormalize_factor += scale;\n\t\tsize *= 2.0;\n\t\tscale *= persistence;\n\t}\n\treturn value / normalize_factor;\n}\nconst float p_o13850_translate_x = 0.059999999;\nconst float p_o13850_rotate = 0.000000000;\nconst float p_o13850_scale_x = 1.000000000;\nconst float p_o13850_scale_y = 1.000000000;\nconst float p_o188138_cx = 0.000000000;\nconst float p_o188138_cy = 0.000000000;\nconst float p_o188138_scale_x = 1.000000000;\nconst float p_o188138_scale_y = -1.000000000;\nconst int seed_o147289 = 73358;\nconst float p_o147289_scale_x = 8.000000000;\nconst float p_o147289_scale_y = 2.000000000;\nconst float p_o147289_iterations = 4.000000000;\nconst float p_o147289_persistence = 0.200000003;\nfloat o147289_fbm(vec2 coord, vec2 size, int octaves, float persistence, float seed) {\n\tfloat normalize_factor = 0.0;\n\tfloat value = 0.0;\n\tfloat scale = 1.0;\n\tfor (int i = 0; i < octaves; i++) {\n\t\tvalue += fbm_cellular2(coord*size, size, seed) * scale;\n\t\tnormalize_factor += scale;\n\t\tsize *= 2.0;\n\t\tscale *= persistence;\n\t}\n\treturn value / normalize_factor;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\nfloat minSize = min(iResolution.x, iResolution.y);\nvec2 UV = vec2(0.0, 1.0) + vec2(1.0, -1.0) * (fragCoord-0.5*(iResolution.xy-vec2(minSize)))/minSize;\nfloat o70492_0_r = 0.5+(cos(p_o70492_rotate*0.01745329251)*((((UV))).x-0.5)+sin(p_o70492_rotate*0.01745329251)*((((UV))).y-0.5))/(cos(abs(mod(p_o70492_rotate, 90.0)-45.0)*0.01745329251)*1.41421356237);vec4 o70492_0_1_rgba = o70492_gradient_gradient_fct(fract(o70492_0_r*p_o70492_repeat));\nfloat o140551_0_1_f = o140551_fbm((transform(((UV)), vec2(p_o46873_translate_x*(2.0*(dot((o70492_0_1_rgba).rgb, vec3(1.0))/3.0)-1.0), (iTime*0.3)*(2.0*1.0-1.0)), p_o46873_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o46873_scale_x*(2.0*1.0-1.0), p_o46873_scale_y*(2.0*1.0-1.0)), true)), vec2(p_o140551_scale_x, p_o140551_scale_y), int(p_o140551_iterations), p_o140551_persistence, float(seed_o140551));\nvec4 o46873_0_1_rgba = vec4(vec3(o140551_0_1_f), 1.0);\nfloat o70492_2_r = 0.5+(cos(p_o70492_rotate*0.01745329251)*((scale((((UV))), vec2(0.5+p_o188138_cx, 0.5+p_o188138_cy), vec2(p_o188138_scale_x, p_o188138_scale_y))).x-0.5)+sin(p_o70492_rotate*0.01745329251)*((scale((((UV))), vec2(0.5+p_o188138_cx, 0.5+p_o188138_cy), vec2(p_o188138_scale_x, p_o188138_scale_y))).y-0.5))/(cos(abs(mod(p_o70492_rotate, 90.0)-45.0)*0.01745329251)*1.41421356237);vec4 o70492_0_3_rgba = o70492_gradient_gradient_fct(fract(o70492_2_r*p_o70492_repeat));\nvec4 o188138_0_1_rgba = o70492_0_3_rgba;\nfloat o147289_0_1_f = o147289_fbm((transform(((UV)), vec2(p_o13850_translate_x*(2.0*(dot((o188138_0_1_rgba).rgb, vec3(1.0))/3.0)-1.0), (iTime*0.4)*(2.0*1.0-1.0)), p_o13850_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o13850_scale_x*(2.0*1.0-1.0), p_o13850_scale_y*(2.0*1.0-1.0)), true)), vec2(p_o147289_scale_x, p_o147289_scale_y), int(p_o147289_iterations), p_o147289_persistence, float(seed_o147289));\nvec4 o13850_0_1_rgba = vec4(vec3(o147289_0_1_f), 1.0);\nvec4 o52326_0_0_rgba = vec4(blend_lighten((UV), o46873_0_1_rgba.rgb, o13850_0_1_rgba.rgb, p_o52326_amount*1.0*o46873_0_1_rgba.a), min(1.0, o13850_0_1_rgba.a+p_o52326_amount*1.0*o46873_0_1_rgba.a));\nfragColor = o52326_0_0_rgba;\n}\n","name":"Image","description":"","type":"image"}]}