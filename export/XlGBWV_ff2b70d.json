{"ver":"0.1","info":{"id":"XlGBWV","date":"1547742335","viewed":742,"name":"flow field particles","username":"skaplun","description":"Flow field particles animation. Not sure how to prevent collapse of particles. Any ideas? ","likes":10,"published":1,"flags":32,"usePreview":0,"tags":["noise","perlin","gradient","particles","animation","flowfield"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord){\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI 3.1415\n#define CELL_COUNT 16.\n#define MAX_H CELL_COUNT\n#define MAX_W (CELL_COUNT * iResolution.x/iResolution.y)\n#define SPEED 2.\n#define TIME (iTime * SPEED)\n\n#define PARTICLES_COUNT 20.\n#define MAX_PARTICLE_Y floor(PARTICLES_COUNT/iResolution.x)\n#define PIX (fragCoord.y * iResolution.x + fragCoord.x)\n\nstruct Line{vec2 p0, p1;};\n\n//3D gradient noise by Íñigo Quílez\nvec3 hash(vec3 p){\n\tp = vec3( dot(p,vec3(127.1,311.7, 74.7)),\n\t\t\t  dot(p,vec3(269.5,183.3,246.1)),\n\t\t\t  dot(p,vec3(113.5,271.9,124.6)));\n\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise(in vec3 p){\n    vec3 i = floor( p );\n    vec3 f = fract( p );\n\t\n\tvec3 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( mix( dot( hash( i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ), \n                          dot( hash( i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ), \n                          dot( hash( i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), u.x), u.y),\n                mix( mix( dot( hash( i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ), \n                          dot( hash( i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ), \n                          dot( hash( i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) ), u.x), u.y), u.z );\n}\n\nfloat remappedNoise(in vec3 p){\n\treturn .5 + .5 * (noise(p)/.6);\n}\n\nvec2 rotate2D (vec2 _st, float _angle) {\n    return  mat2(cos(_angle), -sin(_angle),\n                sin(_angle), cos(_angle)) * _st;\n}\n\nfloat dist2Line(vec2 a, vec2 b, vec2 p) { \n    p -= a, b -= a;\n\tfloat h = clamp(dot(p, b) / dot(b, b), 0., 1.); \n\treturn length( p - b * h );                       \n}\n\nvec2 randomOnEdge(vec2 uv, vec2 MAX){\n    uv *= .2;\n    float edge = remappedNoise(vec3(uv, 0.));\n    float pos = remappedNoise(vec3(uv, .5));\n    \n    return vec2(step(.5, edge) * MAX.x, MAX.y * pos);\n}\n\nvec3 hsv2rgb(vec3 c) {\n  // Íñigo Quílez\n  // https://www.shadertoy.com/view/MsS3Wc\n  vec3 rgb = clamp(abs(mod(c.x*6.+vec3(0.,4.,2.),6.)-3.)-1.,0.,1.);\n  rgb = rgb * rgb * (3. - 2. * rgb);\n  return c.z * mix(vec3(1.), rgb, c.y);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void checkForBounds(float pos, inout vec2 ptnt, inout vec2 prevPtnt){\n\tif(ptnt.x < 0. || ptnt.x > MAX_W || ptnt.y < 0. || ptnt.y > MAX_H)\n        prevPtnt = ptnt = randomOnEdge(vec2(pos, iTime), vec2(MAX_W, MAX_H));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    float partIndex = PIX;\n    if(partIndex <= PARTICLES_COUNT)\n        return;\n    vec2 pos;\n    if(iFrame != 0)\n        pos = texelFetch(iChannel0, ivec2(fragCoord), 0).zw;\n    else\n        pos = randomOnEdge(vec2(partIndex, iTime), vec2(MAX_W, MAX_H));\n    \n    float f = remappedNoise(vec3(pos * .1 + vec2(iTime, 0.), iDate.w));\n    vec2 velocity = rotate2D(vec2(-1., 0.), f * PI * 2.);\n    \n    vec2 newPos = pos + velocity * .1;\n    checkForBounds(partIndex, newPos, pos);\n    fragColor = vec4(pos, newPos);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec3 clr = hsv2rgb(vec3(noise(vec3(iDate.w * .1, 0., 0.)), 1., 1.));\n    vec2 uv = fragCoord/iResolution.yy * CELL_COUNT;\n    float seeds = 0.;\n    {\n        vec4 circlePos;\n        for(float i=0.; i<PARTICLES_COUNT; i++){\n        \tfloat x = mod(i, iResolution.x);\n            float y = floor(i/iResolution.x);\n            vec4 newCirclePos = texelFetch(iChannel0, ivec2(x, y), 0);\n    \t\t//seeds = max(seeds, smoothstep(.1, .05, dist2Line(newCirclePos.xy, newCirclePos.zw, uv)));\n\t\t\tseeds = max(seeds, step(distance(circlePos.zw, newCirclePos.zw), 3.) * step(1., i) * smoothstep(.1, .05, dist2Line(circlePos.zw, newCirclePos.zw, uv)));\n            circlePos = newCirclePos;\n        }\n    }\n\tfragColor = vec4(clr * seeds, 1) + texelFetch(iChannel1, ivec2(fragCoord), 0) * .975;\n}","name":"Buffer B","description":"","type":"buffer"}]}