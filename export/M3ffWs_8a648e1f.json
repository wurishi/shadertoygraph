{"ver":"0.1","info":{"id":"M3ffWs","date":"1729067434","viewed":114,"name":"Cathode-ray tube TV simulation","username":"Delincoter","description":"I saw an article about the imaging principles of old TVs, and wanted to use the GLSL to implement it based on the principles to see what the effect would be.","likes":4,"published":3,"flags":32,"usePreview":1,"tags":["2d","simulation","tv","oldtv"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    fragColor = texture(iChannel0, uv);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define fadeSpeed 0.03\n#define fps 1.5\n#define pointSize 0.02\n#define pointDensity 200\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 gv = uv;\n    \n    float ratio = iResolution.x/iResolution.y;\n    uv.x *= ratio;\n    \n    vec2 p = vec2(0.,0);\n\n    vec3 col = texture(iChannel1, gv).rgb;\n    \n    \n    p.y += fract(iTime * fps);\n    \n    for(int i = 0; i < pointDensity; i++)\n    {\n        float s = smoothstep(pointSize, 0., length(uv - p * vec2(ratio,1.)));\n        \n        col += texture(iChannel0, p).rgb*s;\n        \n        p.x += 1. / float(pointDensity);\n    }\n\n    fragColor = vec4(col,1.0)*(1. - fps * fadeSpeed);\n}","name":"Buffer A","description":"","type":"buffer"}]}