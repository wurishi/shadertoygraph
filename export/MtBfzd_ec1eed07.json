{"ver":"0.1","info":{"id":"MtBfzd","date":"1516841802","viewed":191,"name":"22/2018","username":"rimina","description":"This shader is part of my daily shader challenge. Again testing things out with path tracing. Also included some foggy thing from my past shader (https://www.shadertoy.com/view/ltSBzw). Still lot to optimize, fix and learn.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["pathtracing","dailyshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Simple path tracer. I used Iq's great article as a tutorial for this.\n//https://iquilezles.org/articles/simplepathtracing\n\n#define STEPS 30\n#define FAR 60.0\n#define EPSILON 0.001\n#define PIXELR 0.5/iResolution.x\n#define PI 3.14159265359\n\n#define BOUNCES 3\n#define SAMPLES 2.0\n\n\n//Hash method from https://www.shadertoy.com/view/4djSRW\n#define HASHSCALE1 .1031\n#define HASHSCALE3 vec3(443.897, 441.423, 437.195)\n\nvec2 hash23(vec3 p3){\n\tp3 = fract(p3 * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\nvec3 hash33(vec3 p3){\n\tp3 = fract(p3 * HASHSCALE3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\n\nfloat hash11(float p){\n\tvec3 p3  = fract(vec3(p) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 hash21(float p){\n\tvec3 p3 = fract((vec3(p) * HASHSCALE3));\n\tp3 += dot(p3, p3.yzx + 19.19);\n    return fract(((p3.xx+p3.yz)*p3.zy));\n}\nvec3 hash31(float p){\n   vec3 p3 = fract(vec3(p) * HASHSCALE3);\n   p3 += dot(p3, p3.yzx+19.19);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n\n//from http://amietia.com/lambertnotangent.html\nvec3 lambertNoTangent(vec3 normal, vec2 uv){\n   float theta = 6.283185 * uv.x;\n   uv.y = 2.0 * uv.y - 1.0;\n   vec3 spherePoint = vec3(sqrt(1.0 - uv.y * uv.y) * vec2(cos(theta), sin(theta)), uv.y);\n   return normalize(normal + spherePoint);\n}\n\nfloat noise3D(vec3 p){\n\treturn fract(sin(dot(p ,vec3(12.9898,78.233,128.852))) * 43758.5453)*2.0-1.0;\n}\n\nfloat simplex3D(vec3 p){\n\t\n\tfloat f3 = 1.0/3.0;\n\tfloat s = (p.x+p.y+p.z)*f3;\n\tint i = int(floor(p.x+s));\n\tint j = int(floor(p.y+s));\n\tint k = int(floor(p.z+s));\n\t\n\tfloat g3 = 1.0/6.0;\n\tfloat t = float((i+j+k))*g3;\n\tfloat x0 = float(i)-t;\n\tfloat y0 = float(j)-t;\n\tfloat z0 = float(k)-t;\n\tx0 = p.x-x0;\n\ty0 = p.y-y0;\n\tz0 = p.z-z0;\n\t\n\tint i1,j1,k1;\n\tint i2,j2,k2;\n\t\n\tif(x0>=y0)\n\t{\n\t\tif(y0>=z0){ i1=1; j1=0; k1=0; i2=1; j2=1; k2=0; } // X Y Z order\n\t\telse if(x0>=z0){ i1=1; j1=0; k1=0; i2=1; j2=0; k2=1; } // X Z Y order\n\t\telse { i1=0; j1=0; k1=1; i2=1; j2=0; k2=1; }  // Z X Z order\n\t}\n\telse \n\t{ \n\t\tif(y0<z0) { i1=0; j1=0; k1=1; i2=0; j2=1; k2=1; } // Z Y X order\n\t\telse if(x0<z0) { i1=0; j1=1; k1=0; i2=0; j2=1; k2=1; } // Y Z X order\n\t\telse { i1=0; j1=1; k1=0; i2=1; j2=1; k2=0; } // Y X Z order\n\t}\n\t\n\tfloat x1 = x0 - float(i1) + g3; \n\tfloat y1 = y0 - float(j1) + g3;\n\tfloat z1 = z0 - float(k1) + g3;\n\tfloat x2 = x0 - float(i2) + 2.0*g3; \n\tfloat y2 = y0 - float(j2) + 2.0*g3;\n\tfloat z2 = z0 - float(k2) + 2.0*g3;\n\tfloat x3 = x0 - 1.0 + 3.0*g3; \n\tfloat y3 = y0 - 1.0 + 3.0*g3;\n\tfloat z3 = z0 - 1.0 + 3.0*g3;\t\n\t\t\t\t \n\tvec3 ijk0 = vec3(i,j,k);\n\tvec3 ijk1 = vec3(i+i1,j+j1,k+k1);\t\n\tvec3 ijk2 = vec3(i+i2,j+j2,k+k2);\n\tvec3 ijk3 = vec3(i+1,j+1,k+1);\t\n            \n\tvec3 gr0 = normalize(vec3(noise3D(ijk0),noise3D(ijk0*2.01),noise3D(ijk0*2.02)));\n\tvec3 gr1 = normalize(vec3(noise3D(ijk1),noise3D(ijk1*2.01),noise3D(ijk1*2.02)));\n\tvec3 gr2 = normalize(vec3(noise3D(ijk2),noise3D(ijk2*2.01),noise3D(ijk2*2.02)));\n\tvec3 gr3 = normalize(vec3(noise3D(ijk3),noise3D(ijk3*2.01),noise3D(ijk3*2.02)));\n\t\n\tfloat n0 = 0.0;\n\tfloat n1 = 0.0;\n\tfloat n2 = 0.0;\n\tfloat n3 = 0.0;\n\n\tfloat t0 = 0.5 - x0*x0 - y0*y0 - z0*z0;\n\tif(t0>=0.0)\n\t{\n\t\tt0*=t0;\n\t\tn0 = t0 * t0 * dot(gr0, vec3(x0, y0, z0));\n\t}\n\tfloat t1 = 0.5 - x1*x1 - y1*y1 - z1*z1;\n\tif(t1>=0.0)\n\t{\n\t\tt1*=t1;\n\t\tn1 = t1 * t1 * dot(gr1, vec3(x1, y1, z1));\n\t}\n\tfloat t2 = 0.5 - x2*x2 - y2*y2 - z2*z2;\n\tif(t2>=0.0)\n\t{\n\t\tt2 *= t2;\n\t\tn2 = t2 * t2 * dot(gr2, vec3(x2, y2, z2));\n\t}\n\tfloat t3 = 0.5 - x3*x3 - y3*y3 - z3*z3;\n\tif(t3>=0.0)\n\t{\n\t\tt3 *= t3;\n\t\tn3 = t3 * t3 * dot(gr3, vec3(x3, y3, z3));\n\t}\n\treturn 96.0*(n0+n1+n2+n3);\n\t\n}\n\nfloat fbm(vec3 p)\n{\n\tfloat f;\n    f  = 0.50000*simplex3D( p ); p = p*2.01;\n    f += 0.25000*simplex3D( p ); p = p*2.02; //from iq\n    f += 0.12500*simplex3D( p ); p = p*2.03;\n    f += 0.06250*simplex3D( p ); p = p*2.04;\n    f += 0.03125*simplex3D( p );\n\treturn f;\n}\n\nfloat trace(vec3 ro, vec3 rd){\n    \n    float t = 0.0;\n    vec3 p = ro+rd;\n    \n    for(int i = 0; i < 3; ++i){\n        float d = fbm(p)*0.04;\n        t += d;\n        p += rd*d;\n        \n    }\n    \n    return t;\n}\n\n//Distance functions from Mercury's SDF library\n//http://mercury.sexy/hg_sdf/\n\n// Maximum/minumum elements of a vector\nfloat vmax3(vec3 v) {\n\treturn max(max(v.x, v.y), v.z);\n}\n\nfloat fSphere(vec3 p, float r) {\n\treturn length(p) - r;\n}\n\n// Box: correct distance to corners\nfloat fBox(vec3 p, vec3 b) {\n\tvec3 d = abs(p) - b;\n\treturn length(max(d, vec3(0))) + vmax3(min(d, vec3(0)));\n}\n\nfloat pReflect(inout vec3 p, vec3 planeNormal, float offset) {\n\tfloat t = dot(p, planeNormal)+offset;\n\tif (t < 0.0) {\n\t\tp = p - (2.0*t)*planeNormal;\n\t}\n\treturn sign(t);\n}\n\nfloat fOpUnionRound(float a, float b, float r) {\n\tvec2 u = max(vec2(r - a,r - b), vec2(0));\n\treturn max(r, min (a, b)) - length(u);\n}\n\nvec2 dist(vec3 p){\n    \n    vec3 pp = p-vec3(0.0, 0.0, 6.0);\n    \n    float ball = fSphere(p-vec3(0.0, -5.0, 0.0), 1.0);\n    float jalusta = fBox(p-vec3(0.0, -8.0, 0.0), vec3(1.5, 2.0, 1.5));\n    float patsas = fOpUnionRound(ball, jalusta, 0.8);\n    \n    pReflect(pp, vec3(0.0, 0.0, 1.0), 6.0);\n    float cube = fBox(pp, vec3(1.0, 10.0, 1.0));\n    \n    \n    float box = -fBox(p, vec3(20.0, 10.0, 20.0));\n    \n    float scene = min(patsas, min(cube,box));\n\n    float id = 0.0;\n    if(ball < cube && ball < box && ball < jalusta){\n        id = 1.0;\n    }\n    else if(cube < ball && cube < box && cube < jalusta){\n        id = 2.0;\n    }\n    else if(jalusta < ball && jalusta < cube && jalusta < box){\n        id = 3.0;\n    }\n    \n    return vec2(scene, id);\n}\n\nvec3 normals(vec3 p){\n    vec3 eps = vec3(EPSILON, 0.0, 0.0);\n    return normalize(vec3(\n        dist(p+eps.xyy).x-dist(p-eps.xyy).x,\n        dist(p+eps.yxy).x-dist(p-eps.yxy).x,\n        dist(p+eps.yyx).x-dist(p-eps.yyx).x\n    ));\n}\n\n//Enhanced sphere tracing algorithm introduced by Mercury\n\n// Sign function that doesn't return 0\nfloat sgn(float x) {\n\treturn (x < 0.0)?-1.0:1.0;\n}\n\nvec2 march(vec3 ro, vec3 rd){\n    float t = 0.001;//EPSILON;\n    float step = 0.0;\n\n    float omega = 1.0;//muista testata eri arvoilla! [1,2]\n    float prev_radius = 0.0;\n\n    float candidate_t = t;\n    float candidate_error = 1000.0;\n    float sg = sgn(dist(ro).x);\n\n    vec3 p = vec3(0.0);\n\n\tfor(int i = 0; i < STEPS; ++i){\n\t\tp = rd*t+ro;\n\t\tfloat sg_radius = sg*dist(p).x;\n\t\tfloat radius = abs(sg_radius);\n\t\tstep = sg_radius;\n\t\tbool fail = omega > 1. && (radius+prev_radius) < step;\n\t\tif(fail){\n\t\t\tstep -= omega * step;\n\t\t\tomega = 1.;\n\t\t}\n\t\telse{\n\t\t\tstep = sg_radius*omega;\n\t\t}\n\t\tprev_radius = radius;\n\t\tfloat error = radius/t;\n\n\t\tif(!fail && error < candidate_error){\n\t\t\tcandidate_t = t;\n\t\t\tcandidate_error = error;\n\t\t}\n\n\t\tif(!fail && error < PIXELR || t > FAR){\n\t\t\tbreak;\n\t\t}\n\t\tt += step;\n\t}\n    //discontinuity reduction\n    float er = candidate_error;\n    for(int j = 0; j < 6; ++j){\n        float radius = abs(sg*dist(p).x);\n        p += rd*(radius-er);\n        t = length(p-ro);\n        er = radius/t;\n\n        if(er < candidate_error){\n            candidate_t = t;\n            candidate_error = er;\n        }\n    }\n\tif(t <= FAR || candidate_error <= PIXELR){\n\t\tt = candidate_t;\n\t}\n    \n    p = ro+rd*t;\n    float id = dist(p).y;\n    \n\treturn vec2(t, id);\n}\n\nvec3 color(float obj){\n    vec3 base = vec3(0.0);\n    if(obj == 0.0){\n        base = vec3(0.6);\n    }\n    else if(obj == 1.0){\n        base = vec3(0.8);\n    }\n    else if(obj == 2.0){\n        base = vec3(0.25, 0.3, 0.35);\n    }\n    else if(obj == 3.0){\n        base = vec3(0.4);\n    }\n    return base;\n}\n\nvec3 light(float obj, vec3 p, vec3 ld, vec3 rd){\n    vec3 n = normals(p);\n    float lambertian = max(dot(n, ld), 0.0);    \n    vec3 color = vec3(0.2, 0.3, 0.4)+lambertian*0.6;\n    \n    return color;\n}\n\nvec3 render(vec3 o, vec3 d, vec3 rt, vec2 uv){\n    vec3 ro = o;\n    vec3 rd = d;\n    \n    vec3 tcol = vec3(0.0);\n    vec3 fcol = vec3(1.0);\n    \n    bool ref = false;\n    float density = trace(ro, rd);\n    \n    for(int i = 0; i < BOUNCES; ++i){\n        vec2 t = march(ro, rd);\n        \n        \n        vec3 p = ro+rd*t.x;\n        \n        if(t.y < 0.0 || t.x > FAR){\n            break;\n        }\n        \n        vec3 n = normals(p);\n        vec3 ld = -rd;\n        \n        vec3 scol = color(t.y);\n        vec3 dcol = light(t.y, p, ld, rd);\n        fcol *= scol;\n        tcol += fcol * dcol;\n        \n        tcol += density;\n        \n        float rnd = hash11(float(i));\n        \n        ro = p+(n*0.02);\n        \n        if(rnd < 0.25 && t.y < 3.0){\n            rd = reflect(rd,n);\n        }\n        else{\n            rd = rd = lambertNoTangent(n, hash23(vec3(uv, float(i)+iTime*0.01)));\n        }\n        \n    }\n    \n    return tcol;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 q = -1.0+2.0*uv;\n    q.x *= iResolution.x/iResolution.y;\n\n    vec3 ro = vec3(10.0*cos(iTime*0.2), -2.0+sin(iTime*0.05), 10.0*sin(iTime*0.2));\n    vec3 rt = vec3(0.0, -3.5+cos(iTime*0.02), 0.0);\n    \n    vec3 z = normalize(rt-ro);\n    vec3 x = normalize(cross(z, vec3(0.0, 1.0, 0.0)));\n    vec3 y = normalize(cross(x, z));\n    vec3 rd = normalize(mat3(x, y, z)*vec3(q, radians(90.0)));\n    \n    vec3 color = vec3(0.0);//render(ro, rd, rt);\n    \n    for(float i = 0.0; i < SAMPLES; ++i){\n    \tvec3 rd = normalize(mat3(x, y, z)*vec3(q, radians(90.0)));\n    \tcolor += render(ro, rd, rt, uv);\n    }\n    color /= SAMPLES;\n    \n    color = pow(color, 1.0/vec3(2.2));\n\n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}