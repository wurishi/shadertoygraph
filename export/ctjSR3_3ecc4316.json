{"ver":"0.1","info":{"id":"ctjSR3","date":"1676385354","viewed":109,"name":"TD9","username":"Toto_ShaderMan","description":"shader","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["incroyable"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define time iTime\n\n// fonction de rotation\nmat2 rot(float a)\n{\n    float ca = cos(a);\n    float sa = sin(a);\n    return mat2(ca, sa, -sa, ca);\n}\n\nfloat box(vec3 p, vec3 s)\n{\n    p = abs(p) - s;\n    return max(p.x, max(p.y, p.z) );\n}\n\nfloat map(vec3 p)\n{\n    for(float i=0.0; i<8.0; ++i) {\n    \n    p.xz *= rot(time*0.5);\n    p.xy *= rot(time*0.3);\n    p=abs(p)-1.2;\n    }\n    // box\n    //float d = box(p, vec3(1.0));\n    \n    // sphere\n    float d = length(p) - 1.0;\n    \n    return d;\n}\n\nvec3 norm(vec3 p, float dur)\n{\n    float centre = map(p);\n    float decal_x = map(p - vec3(dur, 0,   0) );\n    float decal_y = map(p - vec3(0,   dur, 0) );\n    float decal_z = map(p - vec3(0,   0,   dur) );\n    vec3 diff = centre - vec3(decal_x, decal_y, decal_z);\n    return normalize(diff);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy*0.5);\n    uv /= iResolution.y; \n\n    vec3 col = vec3(0);\n\n    // Raymarching loop\n    vec3 p = vec3(0,0,-70);\n    \n    //p.x += sin(time)*3.0;\n    \n    float focale = 3.0;\n    vec3 r = normalize( vec3(uv, focale) );\n    \n    vec3 light = vec3(1,3,-2);\n    light.xz *= rot(time);\n    light.xy *= rot(time*0.3);\n    //light.x += sin(time)*5.0;\n    light = normalize(light);\n    \n    for(float i=0.0; i<100.0; ++i)\n    {\n        float d = map(p);\n        if(d < 0.001) {\n                       \n            break;\n        }\n        \n        p += r * d;        \n        \n    }\n    \n  \n  /*  float depth = length(p - start);\n    float fog = clamp(1.0 - depth/100.0, 0.0 , 1.0);\n    col *= pow(fog, 2.01);\n    col += (1.0-pow(fog,*/\n    \n    vec3 n = norm(p, 0.01);\n            vec3 h = normalize(light - r);\n            \n            float lambert = max(0.0, dot(n, light) );\n            float spec = max(0.0, dot(n,h));\n            \n            float fresnel = 1.0 - abs(dot(n,r));\n            \n            vec3 diffuse =  vec3(0.4,0.5,1.0);\n           col += lambert * diffuse;\n            \n            col += lambert * pow(spec, 10.0) * diffuse;\n            col += pow(spec, 10.0);\n            \n            col += pow(fresnel,1.2) * vec3(0.4,0.6,1.0);\n            \n            //tone mapping\n            col = smoothstep(0.0,1.0,col);\n            \n//gamma\ncol= pow(col, vec3(0.4545));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}