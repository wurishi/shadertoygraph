{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// For a 2D function, I use the z component of a vector as the output value, and \n// the x and y components as the slope (derivative) of the function on those axes. \n// This function preserves an accurate slope when multiplying function outputs.\nvec3 multiplyWithSlope( vec3 a, vec3 b )\n{\n\treturn vec3( a.xy * b.z + b.xy * a.z, a.z * b.z );\n}\n\nvec3 ripple( vec2 v )\n{\n\t// time is a sawtooth wave from 0 to 1 every 2 seconds:\n\tfloat time = mod( iTime / 2.0, 1.0 );\n\t\n\tfloat radiusSqared = 2.0 * 2.0 * time;\n\t\n\tfloat lengthSquared = dot( v, v );\n\tif ( lengthSquared > radiusSqared ) return vec3(0.0);\n\t\n\tfloat frequency = 8.0;\n\tfloat phase = (lengthSquared - radiusSqared) * frequency;\n\tvec3 result = vec3( cos( phase ) * frequency * v * 2.0, sin( phase ) );\n\t\n\t// fade out towards the rim:\n\tvec3 ratio = -vec3( v * 2.0, lengthSquared - radiusSqared ) / radiusSqared;\n\tratio = multiplyWithSlope( ratio, ratio );\n\tresult = multiplyWithSlope( result, ratio );\n\t\n\t// fade out completely at end\n\tresult *= 1.0 - time;\n\t\n\treturn result * 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 v = fragCoord.xy / iResolution.xx;\n\tv -= vec2(0.5,0.3); // roughly centered\n\tv *= 10.0; // zoom out\n\tvec3 result = ripple( v );\n\t// use red and blue color channels to show slope, and green for height:\n\tfragColor.rbg = vec3( 0.5 - result.xy * 0.5, result.z + 0.5 );\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ltlGDH","date":"1421874885","viewed":1166,"name":"Pond Ripples Simple","username":"shaktool","description":"pond ripples","likes":16,"published":1,"flags":0,"usePreview":0,"tags":["pondripples"],"hasliked":0,"parentid":"","parentname":""}}