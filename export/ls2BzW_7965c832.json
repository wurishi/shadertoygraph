{"ver":"0.1","info":{"id":"ls2BzW","date":"1499815781","viewed":406,"name":"StarS(Rotatable)","username":"fewizz","description":"Rotate by mouse.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["starfield","cells","hash"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define STAR_SIZE 0.06\n#define VIEW_DIST 20.\n// horizontal\n#define FOV 95.\n#define Z_OFFSET 10.\n\n// from https://www.shadertoy.com/view/4djSRW\n///  3 out, 3 in...\nvec3 hash33(vec3 p3) {\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\nfloat distToStar(vec3 rd, vec3 ro, vec3 cell) {\n    vec3 hash = (hash33(cell) * (1. - STAR_SIZE * 2.)) + STAR_SIZE;\n    return length(cross(rd, cell - 0.5 + hash - ro));\n}\n\nfloat lenSq(vec3 v) {\n    return dot(v, v);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 wc = fragCoord.xy - iResolution.xy * .5;\n    \n    vec3 ro = vec3(wc / 10000., -Z_OFFSET);\n    vec3 dir = vec3(wc * sin(radians(FOV / 2.)), iResolution.x * .5 * cos(radians(FOV / 2.)));\n    dir = normalize(dir);\n    \n    vec2 m = (iMouse.xy - iResolution.xy * .5) / 80.;\n    m.y = -m.y;\n    m.y = clamp(3.14 / 2., -3.14 / 2., m.y);\n    \n    vec2 msin = sin(m);\n    vec2 mcos = cos(m);\n    \n    mat3 mat = mat3(1, 0, 0,\n                   0, mcos.y, -msin.y,\n                   0, msin.y, mcos.y);\n    mat *= mat3(mcos.x, 0, msin.x,\n                  0,        1, 0, \n                  -msin.x, 0, mcos.x);\n    \n    dir *= mat;\n    ro *= mat;\n    \n    ro.z += iTime;\n    \n    float br = 0.;\n    \n    vec3 stp = sign(dir);\n    vec3 cell = floor(ro) + 0.5;\n    \n    while(lenSq(cell - ro) < VIEW_DIST * VIEW_DIST) {\n        int closestDim = -1;\n        float minDistSq = 9000.;\n        \n        for(int d = 0; d < 3; d++) {\n            vec3 offset = vec3(0);\n            offset[d] = stp[d];\n            \n            float distSq = lenSq(cross((cell + offset) - ro, dir));\n            \n            if(distSq < minDistSq) {\n                minDistSq = distSq;\n                closestDim = d;\n            }\n        }\n        \n        cell[closestDim] += stp[closestDim];\n        \n        float dist = distToStar(dir, ro, cell);\n        \n        br += max(0., (STAR_SIZE - dist)) * (1. / STAR_SIZE);\n        \n        if(br >= 1.)\n            break;\n    }\n    \n\tfragColor = vec4(br);\n}","name":"Image","description":"","type":"image"}]}