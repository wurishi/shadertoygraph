{"ver":"0.1","info":{"id":"wlt3zs","date":"1588325285","viewed":202,"name":"Raytracing in a weekend","username":"mawasi","description":"Reference\nhttps://raytracing.github.io/\nhttps://raytracing.github.io/books/RayTracingInOneWeekend.html\n","likes":1,"published":1,"flags":0,"usePreview":1,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Ray Tracing in a Weekend\n\nstruct Ray{\n    vec3 origin;\n    vec3 dir;\n};\n\nstruct Material{\n    int type;\n    vec3 albedo;\n    float fuzz;\n    float refIdx;\n};\n\nstruct Sphere{\n    vec3 center;\n    float radius;\n    Material material;\n};\n\nstruct HitRecord{\n    bool front_face;\n    float t;\n    vec3 point;\n    vec3 normal;\n    Material material;\n};\n\nstruct Camera{\n    vec3 origin;\n    vec3 lower_left_corner;\n    vec3 horizontal;\n    vec3 vertical;\n    vec3 u;\n    vec3 v;\n    vec3 w;\n    float lens_radius;\n};\n\n\n// float最大値\nconst float FLT_MAX = 3.402823466e+38f;\nconst float PI = 3.1515926f;\n\n// ピクセルサンプリング回数\nconst float samples_per_pixel = 10.0;\n// Rayの反射回数\nconst float ray_depth = 5.0;\n\nconst float mr = 0.2;\nconst Material GLASS = Material(2, vec3(1.0, 1.0, 1.0), 0.0, 1.5);\n\nconst int OBJ_MAX = 100 + 4;\nSphere[OBJ_MAX] Spheres = Sphere[](\n\tSphere(vec3(-3.645230, 0.200000, 3.147237), 0.200000, Material(2, vec3(0.601982, 0.119547, 0.165649), 0.000000, 1.500000)),\n\tSphere(vec3(3.350085, 0.200000, 4.057920), 0.200000, Material(2, vec3(0.340220, 0.262971, 0.471957), 0.000000, 1.500000)),\n\tSphere(vec3(4.688678, 0.200000, -3.730132), 0.200000, Material(1, vec3(0.716101, 0.689215, 0.529842), 0.654079, 1.500000)),\n\tSphere(vec3(-2.789660, 0.200000, 4.133759), 0.200000, Material(1, vec3(0.720493, 0.450542, 0.988379), 0.748152, 1.500000)),\n\tSphere(vec3(-1.918330, 0.200000, 1.323593), 0.200000, Material(2, vec3(0.228977, 0.912578, 0.083821), 0.000000, 1.500000)),\n\tSphere(vec3(0.472206, 0.200000, -4.024596), 0.200000, Material(1, vec3(0.152378, 0.558269, 0.913337), 0.505499, 1.500000)),\n\tSphere(vec3(-3.116180, 0.200000, -2.215018), 0.200000, Material(0, vec3(0.462474, 0.825817, 0.503190), 0.000000, 1.500000)),\n\tSphere(vec3(4.928813, 0.200000, 0.468815), 0.200000, Material(0, vec3(0.996135, 0.546592, 0.538342), 0.000000, 1.500000)),\n\tSphere(vec3(4.964613, 0.200000, 4.575068), 0.200000, Material(1, vec3(0.442678, 0.854451, 0.078176), 0.447584, 1.500000)),\n\tSphere(vec3(4.676950, 0.200000, 4.648885), 0.200000, Material(2, vec3(0.498544, 0.106653, 0.604231), 0.000000, 1.500000)),\n\tSphere(vec3(2.258389, 0.200000, -3.423869), 0.200000, Material(2, vec3(0.004634, 0.979926, 0.961898), 0.000000, 1.500000)),\n\tSphere(vec3(4.811097, 0.200000, 4.705928), 0.200000, Material(2, vec3(0.977002, 0.774910, 0.034317), 0.000000, 1.500000)),\n\tSphere(vec3(-3.901382, 0.200000, 4.571670), 0.200000, Material(1, vec3(0.679520, 0.868695, 0.363186), 0.817303, 1.500000)),\n\tSphere(vec3(2.981058, 0.200000, -0.146244), 0.200000, Material(0, vec3(0.399783, 0.346233, 0.084436), 0.000000, 1.500000)),\n\tSphere(vec3(-2.029706, 0.200000, 3.002805), 0.200000, Material(1, vec3(0.800068, 0.045060, 0.259870), 0.855875, 1.500000)),\n\tSphere(vec3(-4.952165, 0.200000, -3.581137), 0.200000, Material(2, vec3(0.749941, 0.431414, 0.660119), 0.000000, 1.500000)),\n\tSphere(vec3(-3.875355, 0.200000, -0.782387), 0.200000, Material(1, vec3(0.982361, 0.181847, 0.132996), 0.910648, 1.500000)),\n\tSphere(vec3(1.397634, 0.200000, 4.157355), 0.200000, Material(2, vec3(0.145539, 0.095355, 0.263803), 0.000000, 1.500000)),\n\tSphere(vec3(3.784307, 0.200000, 2.922073), 0.200000, Material(0, vec3(0.802111, 0.136069, 0.282673), 0.000000, 1.500000)),\n\tSphere(vec3(0.036627, 0.200000, 4.594925), 0.200000, Material(0, vec3(0.579705, 0.077557, 0.869292), 0.000000, 1.500000)),\n\tSphere(vec3(2.979286, 0.200000, 1.557407), 0.200000, Material(0, vec3(0.008094, 0.549860, 0.627384), 0.000000, 1.500000)),\n\tSphere(vec3(-1.387060, 0.200000, -4.642883), 0.200000, Material(0, vec3(0.853031, 0.680287, 0.144955), 0.000000, 1.500000)),\n\tSphere(vec3(-2.880757, 0.200000, 3.491293), 0.200000, Material(2, vec3(0.438667, 0.622055, 0.533933), 0.000000, 1.500000)),\n\tSphere(vec3(1.813595, 0.200000, 4.339932), 0.200000, Material(0, vec3(0.513250, 0.199551, 0.350952), 0.000000, 1.500000)),\n\tSphere(vec3(-1.012615, 0.200000, 1.787352), 0.200000, Material(1, vec3(0.075967, 0.382333, 0.401808), 0.138001, 1.500000)),\n\tSphere(vec3(2.406473, 0.200000, 2.577401), 0.200000, Material(1, vec3(0.123319, 0.040471, 0.239916), 0.762421, 1.500000)),\n\tSphere(vec3(-0.252413, 0.200000, 2.431325), 0.200000, Material(0, vec3(0.504771, 0.183908, 0.252956), 0.000000, 1.500000)),\n\tSphere(vec3(-0.779123, 0.200000, -1.077730), 0.200000, Material(2, vec3(0.417267, 0.822605, 0.239953), 0.000000, 1.500000)),\n\tSphere(vec3(-3.261348, 0.200000, 1.554779), 0.200000, Material(2, vec3(0.823455, 0.049654, 0.981723), 0.000000, 1.500000)),\n\tSphere(vec3(-1.980869, 0.200000, -3.288133), 0.200000, Material(2, vec3(0.944787, 0.301827, 0.902716), 0.000000, 1.500000)),\n\tSphere(vec3(2.972799, 0.200000, 2.060461), 0.200000, Material(2, vec3(0.247848, 0.490864, 0.047944), 0.000000, 1.500000)),\n\tSphere(vec3(-1.834496, 0.200000, -4.681672), 0.200000, Material(0, vec3(0.337719, 0.544056, 0.489253), 0.000000, 1.500000)),\n\tSphere(vec3(3.724288, 0.200000, -2.230770), 0.200000, Material(2, vec3(0.343840, 0.900054, 0.887726), 0.000000, 1.500000)),\n\tSphere(vec3(-3.508860, 0.200000, -4.538286), 0.200000, Material(0, vec3(0.111203, 0.033269, 0.369247), 0.000000, 1.500000)),\n\tSphere(vec3(4.940685, 0.200000, -4.028682), 0.200000, Material(0, vec3(0.877364, 0.780252, 0.162872), 0.000000, 1.500000)),\n\tSphere(vec3(3.219033, 0.200000, 3.234578), 0.200000, Material(1, vec3(0.272753, 0.241691, 0.210302), 0.389739, 1.500000)),\n\tSphere(vec3(-3.748172, 0.200000, 1.948286), 0.200000, Material(2, vec3(0.096455, 0.492442, 0.403912), 0.000000, 1.500000)),\n\tSphere(vec3(2.637500, 0.200000, -1.829005), 0.200000, Material(1, vec3(0.942051, 0.490301, 0.131973), 0.223420, 1.500000)),\n\tSphere(vec3(-0.094110, 0.200000, 4.502221), 0.200000, Material(1, vec3(0.575209, 0.651969, 0.956135), 0.954943, 1.500000)),\n\tSphere(vec3(1.636055, 0.200000, -4.655539), 0.200000, Material(0, vec3(0.435246, 0.059780, 0.757504), 0.000000, 1.500000)),\n\tSphere(vec3(-3.741034, 0.200000, -0.612556), 0.200000, Material(2, vec3(0.353159, 0.552881, 0.234780), 0.000000, 1.500000)),\n\tSphere(vec3(-2.897909, 0.200000, -1.184416), 0.200000, Material(0, vec3(0.322511, 0.821194, 0.053153), 0.000000, 1.500000)),\n\tSphere(vec3(-4.487836, 0.200000, 2.655168), 0.200000, Material(2, vec3(0.043024, 0.404981, 0.015403), 0.000000, 1.500000)),\n\tSphere(vec3(-4.635588, 0.200000, 2.951999), 0.200000, Material(0, vec3(0.809137, 0.168990, 0.908434), 0.000000, 1.500000)),\n\tSphere(vec3(-0.912688, 0.200000, -3.131274), 0.200000, Material(0, vec3(0.731722, 0.258296, 0.649116), 0.000000, 1.500000)),\n\tSphere(vec3(2.939750, 0.200000, 1.463130), 0.200000, Material(2, vec3(0.493327, 0.647746, 0.129847), 0.000000, 1.500000)),\n\tSphere(vec3(4.208748, 0.200000, 2.093648), 0.200000, Material(0, vec3(0.547009, 0.378500, 0.450924), 0.000000, 1.500000)),\n\tSphere(vec3(3.075310, 0.200000, 2.546866), 0.200000, Material(1, vec3(0.744693, 0.287805, 0.296321), 0.718470, 1.500000)),\n\tSphere(vec3(2.057743, 0.200000, -2.239749), 0.200000, Material(2, vec3(0.811874, 0.188955, 0.623436), 0.000000, 1.500000)),\n\tSphere(vec3(-4.971816, 0.200000, 1.797027), 0.200000, Material(1, vec3(0.385711, 0.183511, 0.312508), 0.686775, 1.500000)),\n\tSphere(vec3(2.107038, 0.200000, 1.550980), 0.200000, Material(2, vec3(0.625619, 0.343930, 0.368485), 0.000000, 1.500000)),\n\tSphere(vec3(1.439610, 0.200000, -3.373883), 0.200000, Material(2, vec3(0.669285, 0.780227, 0.815769), 0.000000, 1.500000)),\n\tSphere(vec3(-0.439672, 0.200000, -3.810023), 0.200000, Material(1, vec3(0.458497, 0.929386, 0.379419), 0.081126, 1.500000)),\n\tSphere(vec3(2.739172, 0.200000, -0.016359), 0.200000, Material(0, vec3(0.486792, 0.303614, 0.775713), 0.000000, 1.500000)),\n\tSphere(vec3(0.737547, 0.200000, 4.597440), 0.200000, Material(0, vec3(0.488618, 0.435859, 0.910565), 0.000000, 1.500000)),\n\tSphere(vec3(3.767574, 0.200000, -1.596143), 0.200000, Material(1, vec3(0.108062, 0.306349, 0.755790), 0.446784, 1.500000)),\n\tSphere(vec3(3.081755, 0.200000, 0.852677), 0.200000, Material(2, vec3(0.510772, 0.393590, 0.508509), 0.000000, 1.500000)),\n\tSphere(vec3(-4.822261, 0.200000, -2.761881), 0.200000, Material(0, vec3(0.360861, 0.817628, 0.870187), 0.000000, 1.500000)),\n\tSphere(vec3(3.212460, 0.200000, 2.512671), 0.200000, Material(1, vec3(0.543805, 0.644318, 0.917118), 0.794831, 1.500000)),\n\tSphere(vec3(3.208407, 0.200000, -2.449049), 0.200000, Material(1, vec3(0.199873, 0.811580, 0.140144), 0.378609, 1.500000)),\n\tSphere(vec3(4.400741, 0.200000, 0.059571), 0.200000, Material(1, vec3(0.990110, 0.350727, 0.948925), 0.532826, 1.500000)),\n\tSphere(vec3(-0.873335, 0.200000, 1.990767), 0.200000, Material(2, vec3(0.875943, 0.240076, 0.939002), 0.000000, 1.500000)),\n\tSphere(vec3(-0.768349, 0.200000, 3.909033), 0.200000, Material(2, vec3(0.388615, 0.550156, 0.016521), 0.000000, 1.500000)),\n\tSphere(vec3(0.809567, 0.200000, 4.592914), 0.200000, Material(0, vec3(0.587045, 0.779689, 0.622475), 0.000000, 1.500000)),\n\tSphere(vec3(-3.419424, 0.200000, 0.472155), 0.200000, Material(0, vec3(0.540138, 0.207742, 0.476638), 0.000000, 1.500000)),\n\tSphere(vec3(2.617312, 0.200000, -3.613756), 0.200000, Material(1, vec3(0.900183, 0.470923, 0.018451), 0.301246, 1.500000)),\n\tSphere(vec3(-2.698439, 0.200000, -3.507060), 0.200000, Material(1, vec3(0.885998, 0.844309, 0.194495), 0.230488, 1.500000)),\n\tSphere(vec3(3.097345, 0.200000, -2.424917), 0.200000, Material(2, vec3(0.225922, 0.441223, 0.194764), 0.000000, 1.500000)),\n\tSphere(vec3(4.885216, 0.200000, 3.407172), 0.200000, Material(1, vec3(0.227664, 0.239502, 0.170708), 0.147829, 1.500000)),\n\tSphere(vec3(-1.675517, 0.200000, -2.457178), 0.200000, Material(1, vec3(0.311102, 0.473015, 0.435699), 0.799653, 1.500000)),\n\tSphere(vec3(-2.001683, 0.200000, 3.142848), 0.200000, Material(2, vec3(0.644551, 0.923380, 0.089823), 0.000000, 1.500000)),\n\tSphere(vec3(-4.864609, 0.200000, -2.564750), 0.200000, Material(0, vec3(0.184816, 0.633064, 0.430207), 0.000000, 1.500000)),\n\tSphere(vec3(-2.827621, 0.200000, 4.292637), 0.200000, Material(2, vec3(0.726654, 0.904881, 0.584382), 0.000000, 1.500000)),\n\tSphere(vec3(4.073647, 0.200000, -1.500163), 0.200000, Material(0, vec3(0.438870, 0.354638, 0.979748), 0.000000, 1.500000)),\n\tSphere(vec3(3.484677, 0.200000, -3.034048), 0.200000, Material(1, vec3(0.258065, 0.707322, 0.111119), 0.680407, 1.500000)),\n\tSphere(vec3(4.550176, 0.200000, -2.489161), 0.200000, Material(2, vec3(0.133736, 0.408720, 0.162329), 0.000000, 1.500000)),\n\tSphere(vec3(2.788977, 0.200000, 1.160447), 0.200000, Material(0, vec3(0.262212, 0.449556, 0.594896), 0.000000, 1.500000)),\n\tSphere(vec3(4.874596, 0.200000, -0.267112), 0.200000, Material(0, vec3(0.797364, 0.602843, 0.042054), 0.000000, 1.500000)),\n\tSphere(vec3(-4.324046, 0.200000, -1.483405), 0.200000, Material(0, vec3(0.221747, 0.167556, 0.711216), 0.000000, 1.500000)),\n\tSphere(vec3(2.935976, 0.200000, 3.308286), 0.200000, Material(2, vec3(0.324964, 0.117418, 0.831214), 0.000000, 1.500000)),\n\tSphere(vec3(0.945036, 0.200000, 0.852641), 0.200000, Material(0, vec3(0.318778, 0.655780, 0.296676), 0.000000, 1.500000)),\n\tSphere(vec3(2.327987, 0.200000, 0.497236), 0.200000, Material(2, vec3(0.781909, 0.424167, 0.420190), 0.000000, 1.500000)),\n\tSphere(vec3(1.952329, 0.200000, 4.171936), 0.200000, Material(0, vec3(0.085516, 0.113193, 0.507858), 0.000000, 1.500000)),\n\tSphere(vec3(1.798198, 0.200000, -2.141610), 0.200000, Material(1, vec3(0.801015, 0.181573, 0.262482), 0.993535, 1.500000)),\n\tSphere(vec3(-1.076796, 0.200000, 2.572002), 0.200000, Material(0, vec3(0.265921, 0.029220, 0.762931), 0.000000, 1.500000)),\n\tSphere(vec3(0.615575, 0.200000, 2.537291), 0.200000, Material(2, vec3(0.730331, 0.244138, 0.928854), 0.000000, 1.500000)),\n\tSphere(vec3(-2.919319, 0.200000, -1.195542), 0.200000, Material(1, vec3(0.578525, 0.344328, 0.488609), 0.100738, 1.500000)),\n\tSphere(vec3(-0.957915, 0.200000, -4.241457), 0.200000, Material(2, vec3(0.968640, 0.237284, 0.281627), 0.000000, 1.500000)),\n\tSphere(vec3(-1.472376, 0.200000, -4.460499), 0.200000, Material(2, vec3(0.963089, 0.213773, 0.458849), 0.000000, 1.500000)),\n\tSphere(vec3(-1.436548, 0.200000, 2.791672), 0.200000, Material(1, vec3(0.521136, 0.226551, 0.546806), 0.605928, 1.500000)),\n\tSphere(vec3(4.649664, 0.200000, 4.340107), 0.200000, Material(0, vec3(0.401571, 0.231594, 0.189905), 0.000000, 1.500000)),\n\tSphere(vec3(-3.455616, 0.200000, -3.700938), 0.200000, Material(0, vec3(0.624060, 0.413291, 0.488898), 0.000000, 1.500000)),\n\tSphere(vec3(-1.050918, 0.200000, 0.688236), 0.200000, Material(2, vec3(0.299052, 0.679136, 0.170152), 0.000000, 1.500000)),\n\tSphere(vec3(-1.127041, 0.200000, -0.306094), 0.200000, Material(1, vec3(0.151574, 0.367437, 0.636469), 0.395515, 1.500000)),\n\tSphere(vec3(2.269547, 0.200000, -4.880980), 0.200000, Material(2, vec3(0.037739, 0.769243, 0.987982), 0.000000, 1.500000)),\n\tSphere(vec3(-1.114302, 0.200000, -1.628773), 0.200000, Material(1, vec3(0.913287, 0.959222, 0.885168), 0.883969, 1.500000)),\n\tSphere(vec3(4.274929, 0.200000, -3.378177), 0.200000, Material(2, vec3(0.582846, 0.796184, 0.018066), 0.000000, 1.500000)),\n\tSphere(vec3(-0.638824, 0.200000, 2.942845), 0.200000, Material(0, vec3(0.261871, 0.766854, 0.098712), 0.000000, 1.500000)),\n\tSphere(vec3(3.626781, 0.200000, -1.887850), 0.200000, Material(0, vec3(0.129066, 0.335357, 0.327798), 0.000000, 1.500000)),\n\tSphere(vec3(1.203600, 0.200000, 0.285332), 0.200000, Material(2, vec3(0.136553, 0.291961, 0.679728), 0.000000, 1.500000)),\n\n    Sphere(vec3(0.0, -1000.0, 0.0), 1000.0, Material(0, vec3(0.5, 0.5, 0.5), 0.0, 0.0)),\n    Sphere(vec3(0.0, 1.0, 0.0), 1.0, Material(2, vec3(1.0, 1.0, 1.0), 0.0, 1.5)),\n    Sphere(vec3(-3.0, 1.0, 0.0), 1.0, Material(0, vec3(0.4, 0.2, 0.1), 0.0, 1.5)),\n    Sphere(vec3(3.0, 1.0, 0.0), 1.0, Material(1, vec3(0.7, 0.6, 0.5), 0.0, 1.5))\n);\n\n\n\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat rand(vec2 co, float min, float max)\n{\n    return min + (max - min) * rand(co);\n}\n\nvec3 randVec(vec2 co, float min, float max)\n{\n    float i = 0.0;\n    vec3 result;\n    result.x = rand(co+i, min, max); i += 0.1;\n    result.y = rand(co+i, min, max); i += 0.1;\n    result.z = rand(co+i, min, max); i += 0.1;\n    return result;\n}\n\nvec3 randomUnitVector(vec2 oc)\n{\n    float bias = 1.0;\n    float a = rand(oc+bias, 0.0, 2.0*PI);\n    bias += 1.0;\n    float z = rand(oc+bias, -1.0, 1.0);\n    float r = sqrt(1.0 - z*z);\n    return vec3(r*cos(a), r*sin(a), z);\n}\n\nvec3 randomInUnitSphere(vec2 oc)\n{\n    float i = 0.0;\n    while(true){\n        vec3 p;\n        p.x = rand(oc+i, -1.0, 1.0); i += 0.1;\n        p.y = rand(oc+i, -1.0, 1.0); i += 0.1;\n        p.z = rand(oc+i, -1.0, 1.0); i += 0.1;\n        if(length(p) >= 1.0) continue;\n        return p;\n    }\n}\n\nvec3 randomInHemisphere(vec2 oc, vec3 normal)\n{\n    vec3 inUnitSphere = randomInUnitSphere(oc);\n    if(dot(inUnitSphere, normal) > 0.0){\n        return inUnitSphere;\n    }\n    else{\n        return -inUnitSphere;\n    }\n}\n\nvec3 randomInUnitDisk(vec2 oc)\n{\n    float i = 0.0;\n    while(true){\n        vec3 p;\n        p.x = rand(oc+i, -1.0, 1.0); i += 0.1;\n        p.y = rand(oc+i, -1.0, 1.0); i += 0.1;\n        p.z = 0.0;\n        if(length(p) >= 1.0) continue;\n        return p;\n    }    \n}\n\nfloat deg2Rad(float degree)\n{\n    return degree * PI / 180.0f;\n}\n\n\nvoid setFaceNormal(Ray r, vec3 outwardNormal, inout HitRecord hitrecord)\n{\n    hitrecord.front_face = dot(r.dir, outwardNormal) < 0.0;\n    hitrecord.normal = hitrecord.front_face ? outwardNormal : -outwardNormal;\n}\n\nvec3 pointAtParameter(Ray r, float t)\n{\n    return r.origin + t * r.dir;\n}\n\n// Schlick approximation\nfloat schlick(float cosine, float refIdx)\n{\n    float r0 = (1.0 - refIdx) / (1.0 + refIdx);\n    r0 = r0 * r0;\n    return r0 + (1.0 - r0) * pow((1.0 - cosine), 5.0);\n}\n\nbool lambertianScatter(Ray ray, HitRecord hitrecord, inout vec3 attenuation, inout Ray scatterd, vec2 oc)\n{\n    vec3 scatterDicrection = hitrecord.normal + randomUnitVector(oc);\n    scatterd = Ray(hitrecord.point, scatterDicrection);\n    attenuation = hitrecord.material.albedo;\n    return true;\n}\n\nbool metalScatter(Ray ray, HitRecord hitrecord, inout vec3 attenuation, inout Ray scatterd, vec2 oc)\n{\n    vec3 reflected = reflect(normalize(ray.dir), hitrecord.normal);\n    scatterd = Ray(hitrecord.point, reflected + hitrecord.material.fuzz*randomInUnitSphere(oc));\n    attenuation = hitrecord.material.albedo;\n    return (dot(scatterd.dir, hitrecord.normal) > 0.0);\n}\n\nbool dielectricScatter(Ray ray, HitRecord hitrecord, inout vec3 attenuation, inout Ray scatterd, vec2 oc)\n{\n    attenuation = vec3(1.0, 1.0, 1.0);//hitrecord.material.albedo;\n    float etai_over_etat;\n    if(hitrecord.front_face){\n        etai_over_etat = 1.0 / hitrecord.material.refIdx;\n    }\n    else{\n        etai_over_etat = hitrecord.material.refIdx;\n    }\n\n    vec3 dir = normalize(ray.dir);\n    float cosTheta = min(dot(-dir, hitrecord.normal), 1.0);\n    float sinTheta = sqrt(1.0 - cosTheta*cosTheta);\n    if(etai_over_etat * sinTheta > 1.0){\n        vec3 reflected = reflect(dir, hitrecord.normal);\n        scatterd = Ray(hitrecord.point, reflected);\n        return true;\n    }\n    float reflectProb = schlick(cosTheta, etai_over_etat);\n    if(rand(oc) < reflectProb){\n        vec3 reflected = reflect(dir, hitrecord.normal);\n        scatterd = Ray(hitrecord.point, reflected);\n        return true;\n    }\n    vec3 refracted = refract(dir, hitrecord.normal, etai_over_etat);\n    scatterd = Ray(hitrecord.point, refracted);\n    return true;\n}\n\nbool scatter(Ray ray, HitRecord hitrecord, inout vec3 attenuation, inout Ray scatterd, vec2 oc)\n{\n    bool result;\n\n    if(hitrecord.material.type == 0){\n        result = lambertianScatter(ray, hitrecord, attenuation, scatterd, oc);\n    }\n    else if(hitrecord.material.type == 1){\n        result = metalScatter(ray, hitrecord, attenuation, scatterd, oc);\n    }\n    else if(hitrecord.material.type == 2){\n        result = dielectricScatter(ray, hitrecord, attenuation, scatterd, oc);\n    }\n    else{\n        result = lambertianScatter(ray, hitrecord, attenuation, scatterd, oc);\n    }\n\n    return result;\n}\n\nbool contactSphere(Sphere sphere, Ray r, float t_min, float t_max, inout HitRecord hitrecord)\n{\n    // ray vs sphere の判定\n    vec3 oc = r.origin - sphere.center;\n    float a = dot(r.dir, r.dir);\n    float half_b = dot(oc, r.dir);\n    float c = dot(oc, oc) - sphere.radius*sphere.radius;\n    float discriminant = half_b * half_b - a * c;\n\n    if(discriminant > 0.0){\n\n        float root = sqrt(discriminant);\n        float temp = (-half_b - root) / a;\n        if(temp < t_max && temp > t_min){\n            hitrecord.t = temp;\n            hitrecord.point = pointAtParameter(r, hitrecord.t);\n            vec3 outwardNormal = (hitrecord.point - sphere.center) / sphere.radius;\n            setFaceNormal(r, outwardNormal, hitrecord);\n            hitrecord.material = sphere.material;\n            return true;\n        }\n        temp = (-half_b + root) / a;\n        if(temp < t_max && temp > t_min){\n            hitrecord.t = temp;\n            hitrecord.point = pointAtParameter(r, hitrecord.t);\n            vec3 outwardNormal = (hitrecord.point - sphere.center) / sphere.radius;\n            setFaceNormal(r, outwardNormal, hitrecord);\n            hitrecord.material = sphere.material;\n            return true;\n        }\n    }\n    return false;\n}\n\n\nbool contactObjects(Ray r, float t_min, float t_max, inout HitRecord rec)\n{\n    HitRecord temp_rec;\n    bool hit_anything = false;\n    float closest_so_far = t_max;\n\n    for(int i = 0; i < OBJ_MAX; i++){\n        if(contactSphere(Spheres[i], r, t_min, closest_so_far, temp_rec)){\n            hit_anything = true;\n            closest_so_far = temp_rec.t;\n            rec = temp_rec;\n        }\n    }\n\n    return hit_anything;\n}\n\n\nvec3 rayColor(Ray r, float depth)\n{\n    HitRecord rec;\n\n    vec3 target;\n    Ray ray = r;\n\n    if(contactObjects(ray, 0.001, FLT_MAX, rec)){\n        vec3 attenuation;\n        bool result = scatter(ray, rec, attenuation, ray, r.dir.xy);\n\n        if(result){\n            for(float i = 0.0; i < depth; i++){\n                if(contactObjects(ray, 0.001, FLT_MAX, rec)){\n                    vec3 attenuation2;\n                    result = scatter(ray, rec, attenuation2, ray, r.dir.xy+i);\n                    if(result){\n                        attenuation *= attenuation2;\n                        continue;\n                    }\n                    return vec3(0.0, 0.0, 0.0);\n                }\n                vec3 unit_dir = normalize(ray.dir);\n                float t = 0.5f * (unit_dir.y + 1.0f);\n                return attenuation * mix(vec3(1.0f, 1.0f, 1.0f), vec3(0.5f, 0.7f, 1.0f), t);\n            }\n        }\n        return vec3(0.0, 0.0, 0.0);\n    }\n\n    vec3 unit_dir = normalize(ray.dir);\n    float t = 0.5f * (unit_dir.y + 1.0f);\n    return mix(vec3(1.0f, 1.0f, 1.0f), vec3(0.5f, 0.7f, 1.0f), t);\n\n}\n\n\nCamera createCamera(vec3 origin, vec3 lookat, vec3 vup, float fov, float aspect, float aperture, float focusDist)\n{\n    Camera cam;\n    cam.origin = origin;\n    cam.lens_radius = aperture / 2.0;\n\n    float rfov = deg2Rad(fov);\n    float halfHeight = tan(rfov/2.0);\n    float halfWidth = halfHeight * aspect;\n\n    cam.w = normalize(origin - lookat);\n    cam.u = normalize(cross(vup, cam.w));\n    cam.v = normalize(cross(cam.w, cam.u));\n\n    cam.lower_left_corner = origin\n                            - halfWidth * focusDist * cam.u\n                            - halfHeight * focusDist * cam.v\n                            - focusDist * cam.w;\n\n    cam.horizontal = 2.0 * halfWidth * focusDist * cam.u;\n\n    cam.vertical = 2.0 * halfHeight * focusDist * cam.v;\n\n    return cam;\n}\n\nRay createRay(in Camera cam, float u, float v, vec2 oc)\n{\n    vec3 rd = cam.lens_radius * randomInUnitDisk(oc);\n    vec3 offset = cam.u * rd.x + cam.v * rd.y;\n\n    return Ray(cam.origin + offset, cam.lower_left_corner + u * cam.horizontal + v * cam.vertical - cam.origin - offset);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n    float aspect = iResolution.x / iResolution.y;\n\n\n\n    float rot = 30.0*iTime;\n    rot = rot > 360.0 ? rot - 360.0 : rot;\n    rot = deg2Rad(rot);\n    float len = 5.0;\n\n    vec3 origin = vec3(len * cos(rot), 2.0f, len * sin(rot));\n    vec3 lookat = vec3(0.0, 0.0, 0.0);\n    vec3 vup = vec3(0.0, 1.0, 0.0);\n\n    float aperture = 0.0;\n    float focusDist = length(origin - lookat);\n\n    Camera cam = createCamera(origin, lookat, vup, 90.0, aspect, aperture, focusDist);\n\n\n    vec3 col = vec3(0.0, 0.0, 0.0);\n\n    for(float s = 0.0; s < samples_per_pixel; s++){\n        float u = (fragCoord.x + rand(uv+s)) / iResolution.x;\n        float v = (fragCoord.y + rand(uv+s)) / iResolution.y;\n        Ray r = createRay(cam, u, v, uv);\n        col += rayColor(r, ray_depth);\n    }\n    float scale = 1.0 / samples_per_pixel;\n\n    col.x = sqrt(col.x * scale);\n    col.y = sqrt(col.y * scale);\n    col.z = sqrt(col.z * scale);\n\n\tfragColor = vec4(col, 1.0f);\n\n}","name":"Image","description":"","type":"image"}]}