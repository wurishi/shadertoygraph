{"ver":"0.1","info":{"id":"fts3RM","date":"1621779503","viewed":46,"name":"RayMarching Practice by EricZhan","username":"doremi31618","description":"a raymarching demo","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n\n\n\n\n\nfloat GetDist(vec3 pos){\n    vec4 s = vec4(0, 1, 5, 1);\n    \n    float sphereDist = length(pos - s.xyz) - s.w;\n    float planeDist = pos.y;\n    \n    float d = min(sphereDist, planeDist);\n    return d;\n\n}\n\nvec3 GetNormal(vec3 p){\n    float d = GetDist(p);\n    vec2 e = vec2(0.01f, 0.0);\n    \n    \n    vec3 normal = d - vec3(\n        GetDist(p - e.xyy),\n        GetDist(p - e.yxy),\n        GetDist(p - e.yyx));\n        \n    return normalize(normal);\n}\n\n\n\nfloat RayMarching (vec3 ro, vec3 rd){\n    \n    float d0 = 0.;\n    for (int i=0; i<MAX_STEPS; i++){\n        vec3 p = ro + rd * d0;\n        float ds = GetDist(p);\n        d0 += ds;\n        if (d0 > MAX_DIST || ds < SURF_DIST)break;\n    }\n    return d0;\n\n}\nfloat GetLight(vec3 p){\n    vec3 lightPos = vec3(0, 5, 6);\n    \n    lightPos += vec3(sin(iTime), 0,cos(iTime)) * 5.0;\n    vec3 normal = GetNormal(p);\n    vec3 light = normalize(lightPos - p);\n    //float d = RayMarch\n    float dif = clamp(dot(normal, light), 0.0, 1.0);\n    \n    float d = RayMarching(p+normal * SURF_DIST, normalize(lightPos - p));\n    if (d < length(lightPos - p)) dif *= 0.1;\n    return dif;\n}\n\n//ray marching / shpere tracing \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 1, 1);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    \n    \n    float d = RayMarching(ro, rd);\n    //the hitted point \n    vec3 p = ro + rd * d;\n    float dif = GetLight(p);\n    col = vec3(dif);\n    //col = GetNormal(p);\n    fragColor = vec4 (col, 1.0);\n}","name":"Image","description":"","type":"image"}]}