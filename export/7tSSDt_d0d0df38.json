{"ver":"0.1","info":{"id":"7tSSDt","date":"1628850361","viewed":69,"name":"SDF-shapez.io","username":"bawr","description":"SDF shape assembly.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define saturate(x) clamp(x, 0.0, 1.0)\n\n\nfloat dLineSegment(in vec2 p0, in vec2 p1, in vec2 p2)\n{\n    vec2 q0 = p0 - p1;\n    vec2 q2 = p2 - p1;\n    \n    vec2 pq = p1 + q2 * saturate(dot(q0, q2) / dot(q2, q2));\n    \n    return distance(p0, pq);\n}\n\nfloat dHalfPlaneCW(in vec2 p0, in vec2 p1, in vec2 p2)\n{\n    vec2 q0 = p0 - p1;\n    vec2 q2 = p2 - p1;\n    vec2 pq = q0 * q2.yx;\n    \n    float d = pq[0] - pq[1];\n    \n    return d / length(q2);\n}\n\nfloat sHalfPlaneCW(in vec2 p0, in vec2 p1, in vec2 p2)\n{\n    vec2 q0 = p0 - p1;\n    vec2 q2 = p2 - p1;\n    vec2 pq = q0 * q2.yx;\n    \n    float d = pq[0] - pq[1];\n    \n    return sign(d);\n}\n\n\nfloat dTriangle(in vec2 p0, in vec2 p1, in vec2 p2, in vec2 p3)\n{\n    float d1 = dLineSegment(p0, p1, p2), s1 = sHalfPlaneCW(p0, p2, p1);\n    float d2 = dLineSegment(p0, p2, p3), s2 = sHalfPlaneCW(p0, p3, p2);\n    float d3 = dLineSegment(p0, p3, p1), s3 = sHalfPlaneCW(p0, p1, p3);\n    \n    float dM = min(min(d1, d2), d3);\n    float sM = max(max(s1, s2), s3);\n    \n    return dM * sM;\n}\n\nfloat dRectangle(in vec2 p0, in vec2 p1, in vec2 p2)\n{\n    vec2 q0 = p0 - p1;\n    vec2 q2 = p2 - p1;\n    vec2 hw = q2 * .5;\n    \n    vec2 d0 = abs(q0 - hw) - hw;\n    float a = length(max(d0, 0.0));\n    float b = min(max(d0.x, d0.y), 0.0);\n    \n    return a + b;\n}\n\nfloat dCircle(in vec2 p0, in vec2 p1, in vec2 p2)\n{\n    vec2 q0 = p0 - p1;\n    vec2 q2 = p2 - p1;\n    \n    return length(q0) - length(q2);\n}\n\nfloat dCircleSlice(in vec2 p0, in vec2 p1, in vec2 p2, in vec2 p3)\n{\n    float h2 = dHalfPlaneCW(p0, p2, p1);\n    float h3 = dHalfPlaneCW(p0, p1, p3);\n    float d1 = dCircle(p0, p1, p2);\n    \n    return max(max(h2, h3), d1);\n}\n\nfloat dConvexQuad(in vec2 p0, in vec2 p1, in vec2 p2, in vec2 p3, in vec2 p4)\n{\n    float d1 = dLineSegment(p0, p1, p2), s1 = sHalfPlaneCW(p0, p2, p1);\n    float d2 = dLineSegment(p0, p2, p3), s2 = sHalfPlaneCW(p0, p3, p2);\n    float d3 = dLineSegment(p0, p3, p4), s3 = sHalfPlaneCW(p0, p4, p3);\n    float d4 = dLineSegment(p0, p4, p1), s4 = sHalfPlaneCW(p0, p1, p4);\n    \n    float dM = min(min(d1, d2), min(d3, d4));\n    float sM = max(max(s1, s2), max(s3, s4));\n    \n    return dM * sM;\n}\n\n\nvec4 dColorize(in float d, in float f)\n{\n    if (d < 0.0) {\n        return vec4(\n            0.0,\n            0.0 - d / f,\n            1.0 + d / f,\n            1.0\n        );\n    } else {\n        return vec4(\n            1.0 - d / f,\n            0.0,\n            0.0,\n            1.0\n        );\n    }\n}\n\n\n\nfloat qC(in vec2 xy)\n{\n    return dCircleSlice(\n        xy,\n        vec2(0, 0),\n        vec2(0, 1),\n        vec2(1, 0)\n    );\n}\n\nfloat qR(in vec2 xy)\n{\n    return dRectangle(\n        xy,\n        vec2(0, 0),\n        vec2(1, 1)\n    );\n}\n\nfloat qS(in vec2 xy)\n{\n    float f = 2.0 / 3.0;\n    return dConvexQuad(\n        xy,\n        vec2(0, 0),\n        vec2(0, f),\n        vec2(1, 1),\n        vec2(f, 0)\n    );\n}\n\nfloat qW(in vec2 xy)\n{\n    float f = 2.0 / 3.0;\n    return dConvexQuad(\n        xy,\n        vec2(0, 0),\n        vec2(0, f),\n        vec2(1, 1),\n        vec2(1, 0)\n    );\n}\n\n\nvec4 q4(in float d, in vec3 c, in vec3 b)\n{\n    if (d < 0.0) {\n        if (d < -0.075)\n            return vec4(c, 1.0);\n        else\n            return vec4(b, 1.0);\n    }\n    return vec4(0.0);\n}\n\n\nint rng(in int seed, in int time, in int imax)\n{\n    return int(abs(sin(float(seed + iFrame / time))) * 131071.0) % imax;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 hw = iResolution.xy / 2.0;\n    vec2 xy = (fragCoord - hw) / min(hw.x, hw.y);\n    \n    mat2 R[] = mat2[] (\n        mat2(+1,  0,  0, +1),\n        mat2( 0, +1, -1,  0),\n        mat2(-1,  0,  0, -1),\n        mat2( 0, -1, +1,  0)\n    );\n    \n    vec3 C[] = vec3[] (\n        vec3(1.00, 0.40, 0.41),  // red\n        vec3(0.47, 1.00, 0.40),  // green\n        vec3(0.40, 0.65, 1.00),  // blue\n        vec3(0.98, 0.96, 0.16),  // yellow\n        vec3(0.87, 0.40, 1.00),  // purple\n        vec3(0.00, 0.98, 1.00),  // cyan\n        vec3(1.00, 1.00, 1.00),  // white\n        vec3(0.67, 0.67, 0.67)   // uncolored\n    );\n    \n    vec3 B = vec3(0.066, 0.078, 0.094);\n    \n    int Qi[] = int[] (\n        rng(2741, 60, 4),\n        rng(4409, 60, 4),\n        rng(6133, 60, 4),\n        rng(7919, 60, 4)\n    );\n    int Ci[] = int[] (\n        rng(1987, 60, 7),\n        rng(3571, 60, 7),\n        rng(5279, 60, 7),\n        rng(6997, 60, 7)\n    );\n    \n    fragColor = vec4(0.0);\n    xy /= 0.75;\n    \n    float d;\n    \n    for (int i = 0; i < 4; i++)\n    {\n        switch (Qi[i]) {\n            case 0: d = qC(R[i] * xy); break;\n            case 1: d = qR(R[i] * xy); break;\n            case 2: d = qS(R[i] * xy); break;\n            case 3: d = qW(R[i] * xy); break;\n        }\n        if (iMouse.z <= 0.0) {\n            fragColor += q4(d, C[Ci[i]], B);\n        } else {\n            fragColor[i] = d;\n        }\n    }\n    if (iMouse.z > 0.0) {\n        d = min(min(fragColor[0], fragColor[1]), min(fragColor[2], fragColor[3]));\n        fragColor = dColorize(d, 0.25);\n    }\n}\n","name":"Image","description":"","type":"image"}]}