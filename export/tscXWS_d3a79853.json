{"ver":"0.1","info":{"id":"tscXWS","date":"1712046001","viewed":22,"name":"basic marching","username":"neur0sys","description":"basic marching","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["neurotest"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat map(vec3 p)\n{\n    vec3 q = fract(p) * 2.0 - 1.0;\n\treturn length(q) - .25;\n}\n\nfloat trace(vec3 o, vec3 r)\n{\n\tfloat t = 0.0;\n    for (int i = 0; i < 32; i++) {\n    \tvec3 p = o + r * t;\n        float d = map(p);\n        t += d * 0.5;\n        if (d < 0.01 || d > 5.0) {\n        \tbreak;\n        }\n    }\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // [0, 1]\n    uv = uv * 2.0 - 1.0;\n    \n    // correct aspect ratio\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 r = normalize(vec3(uv, 1.0));\n    \n    float the = iTime / 2.0;\n    \n    // rotate around x axis\n    r.xz *= mat2(cos(the), -sin(the), sin(the), cos(the));\n    \n    // rotate around y axis\n    r.yz *= mat2(cos(the), -sin(the), sin(the), cos(the));\n    \n    // move origin x and y axis\n    vec3 o = vec3(cos(iTime) * 2.0 - 1.0, sin(iTime) * 2.0 - 1.0, iTime);\n    \n    \n    float t = trace(o, r);\n    \n    float fog = 1.0 / (1.0 + t * t * 0.1);\n\t\n    vec3 fc = vec3(fog);\n    \n    fragColor = vec4(fc, 1.0);\n}","name":"Image","description":"","type":"image"}]}