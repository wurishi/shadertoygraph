{"ver":"0.1","info":{"id":"llGGRV","date":"1475506876","viewed":147,"name":"My Ray Marching","username":"Tacoa","description":"GLSL Ray Marching","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["ray"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 cPos = vec3(-3.0,  3.0,  3.0);\nconst vec3 cDir = vec3(0.577, -0.577, -0.577);\nconst vec3 cUp  = vec3(0.577, 0.577, -0.577);\n\nconst vec3 lightDir = vec3(-0.577, 0.577, 0.577);\n\n// smoothing min\nfloat smoothMin(float d1, float d2, float k){\n    float h = exp(-k * d1) + exp(-k * d2);\n    return -log(h) / k;\n}\n\n// box distance function\nfloat distFuncBox(vec3 p){\n    return length(max(abs(p) - vec3(1.0+cos(iTime), 0.1, 1.0+sin(iTime)), 0.0)) - 0.1;\n}\n\n// torus distance function\nfloat distFuncTorus(vec3 p){\n    vec2 t = vec2(abs(2.0*cos(iTime)), 0.25);\n    vec2 r = vec2(length(p.xy) - t.x, p.z);\n    return length(r) - t.y;\n}\n\n// distance function\nfloat distFunc(vec3 p){\n    float d1 = distFuncTorus(p);\n    float d2 = distFuncBox(p);\n    return smoothMin(d1, d2, 8.0);\n}\n\nvec3 genNormal(vec3 p){\n    float d = 0.0001;\n    return normalize(vec3(\n        distFunc(p + vec3(  d, 0.0, 0.0)) - distFunc(p + vec3( -d, 0.0, 0.0)),\n        distFunc(p + vec3(0.0,   d, 0.0)) - distFunc(p + vec3(0.0,  -d, 0.0)),\n        distFunc(p + vec3(0.0, 0.0,   d)) - distFunc(p + vec3(0.0, 0.0,  -d))\n    ));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    // fragment position\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    // camera and ray\n    vec3 cSide = cross(cDir, cUp);\n    float targetDepth = 1.0;\n    vec3 ray = normalize(cSide * p.x + cUp * p.y + cDir * targetDepth);\n    \n    // marching loop\n    float tmp, dist;\n    tmp = 0.0;\n    vec3 dPos = cPos;\n    for(int i = 0; i < 256; i++){\n        dist = distFunc(dPos);\n        tmp += dist;\n        dPos = cPos + tmp * ray;\n    }\n    \n    // hit check\n    vec3 color;\n    if(abs(dist) < 0.001){\n        vec3 normal = genNormal(dPos);\n        float diff = clamp(dot(lightDir, normal), 0.1, 1.0);\n        color = vec3(1.0, 1.0, 1.0) * diff;\n    }else{\n        color = vec3(0.0);\n    }\n   \tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}