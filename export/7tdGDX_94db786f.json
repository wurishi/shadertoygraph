{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"buffer","id":"4dXGR8","filepath":"/media/previz/buffer00.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"// variant of https://shadertoy.com/view/stdGRl\n\n// percolation network -----------------------------------------\n// - denser network: change Common:N\n// - chasing the global connectivity threshold: change BuffA:17 + replace iTime with 0 in Common:C\n\n#define hue(v)  ( .6 + .6 * cos( 6.3*(v)  + vec4(0,23,21,0)  ) )\n\nfloat line(vec2 p, vec2 a,vec2 b) { \n    p -= a, b -= a;\n    return length(p - b * clamp(dot(p, b) / dot(b, b), 0., 1.));                      \n}\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 U = N *( u+u - R ) / R.y,\n         I = floor(U), F = fract(U), D,A,B;        \n    O-=O;\n // O = hue( T( I+floor(R/2.)).x );                // display power waves\n    float d;\n    for( int k=0; k<9; k++ ) {\n        D = vec2(k%3,k/3)-1., A = D + C(I+D);\n    //  O = max(O, .3 / length(F-A) );             // blobs\n        for( int j=0; j<9; j+= j==k?2:1 ) {\n            D = vec2(j%3,j/3)-1., B = D + C(I+D);\n            d = length(B-A); d = max(0., 1.5-d);\n            if (d>0.) O = max(O, smoothstep(3.*N/R.y,0., line(F,A,B) - .02 * d*4. )  *d*2. );\n            //*hue(d) \n    } }\n    d = T( I+floor(R/2.)).x;\n    O *=  d==0. ? vec4(1) : hue( d );              // display power waves\n}","name":"Image","description":"","type":"image"},{"outputs":[{"channel":0,"id":"4dXGR8"}],"inputs":[{"channel":0,"type":"buffer","id":"4dXGR8","filepath":"/media/previz/buffer00.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"// percolation: propagate power ( = iTime )\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    if (iFrame<1) { O-=O; return; }\n    \n    float V,d, dt = .4;\n    vec2  I=u-floor(R/2.),D,A=abs(I),B,P;        \n    O = T(u);                                        // previous state\n    if ( I.x < - (N-2.)*R.x/R.y ) O.r = dt*iTime;    // left border: inject fresh power = iTime\n    \n    I = floor(I);\n    A = C(I);             \n    for( int j=0; j<25; j+= j==11?2:1 ) {            \n        D = vec2(j%5,j/5)-2., B = D + C(I+D);\n        d = length(B-A); d = max(0., 1.5-d);\n        V = T(u+D).x;                                // neighbor value\n        if (d > 0.) O.x = max(O.x,                   // if connected, propagate freshest power\n                               // V -10.*dt*       (1.5-d)     );               // delay\n                               // V -10.*dt*max(0.,(1.5-d)-.9) );               // (non-linear)\n                                  O.x + ( V - O.x ) *min( 1., max(0.,d-.5) ) ); // flux (non-linear)\n   }\n}","name":"Buffer A","description":"","type":"buffer"},{"outputs":[],"inputs":[],"code":"float N = 10.; // cells density\n\n#define R     iResolution.xy \n#define T(U)  texelFetch(iChannel0, ivec2( U ), 0 )\n#define H(p)  fract(sin((p)*mat2(127.1,311.7, 269.5,183.3)) *43758.5453123)\n#define C(p) (.5+.3*H(p+.5)+.2*vec2( cos( (H(p).y-.5)*iTime + 6.3*H(p).x + vec2(0,33) ) ) )\n","name":"Common","description":"","type":"common"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":true,"mFlagMusicStream":false},"info":{"id":"7tdGDX","date":"1636875959","viewed":300,"name":"percolation network 3","username":"FabriceNeyret2","description":"In this variant of [url]https://shadertoy.com/view/stdGRl[/url], the flux (colors) propagates at a speed proportional to the bonding between nodes.\nTesting various bonding laws BuffA:18\n( I prefer the previous version :-) )","likes":14,"published":3,"flags":32,"usePreview":0,"tags":["short","network","connect","percolation","molecules","bonds"],"hasliked":0,"parentid":"","parentname":""}}