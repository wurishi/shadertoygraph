{"ver":"0.1","info":{"id":"NlG3z1","date":"1637138302","viewed":34,"name":"MELTING Snowman!!","username":"sheens","description":"snowman","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["snowman"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// BASIC RAY-MARCHING CLASS DEMO!\n//\n// Numerous methods borrowed from iq articles:\n//   https://iquilezles.org/www/index.htm\n// \n// 3D signed distance functions:\n//   https://iquilezles.org/articles/distfunctions\n// \n// Shadows:\n//   https://iquilezles.org/articles/rmshadows\n// \n// Ray-marching SDFs:\n//   https://iquilezles.org/articles/raymarchingdf\n// \n// Normals for SDFs:\n//   https://iquilezles.org/articles/normalsSDF\n// Snow from:\n// https://www.shadertoy.com/view/MscXD7\n\nfloat opUnion( float d1, float d2 ) {  return min(d1,d2); }\nvec4  opUnion(vec4 d1, vec4 d2) {\n return (d1.x < d2.x ? d1 : d2);   \n}\n\nfloat opIntersection( float d1, float d2 ) { return max(d1,d2); }\nvec4  opIntersection( vec4  d1, vec4  d2 ) {\n return (d1.x > d2.x ? d1 : d2);   \n    \n}\n\n// subtracts d1 from d2\nfloat opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\nvec4  opSubtraction( vec4  d1, vec4  d2 ) { \n  return opIntersection(vec4(-d1.x,d1.yzw), d2);\n}\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nfloat opSmoothSubtraction( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h); }\n\nfloat opSmoothIntersection( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) + k*h*(1.0-h); }\n\nfloat opOnion( in float sdf, in float thickness )\n{\n    return abs(sdf)-thickness;\n}\n\n// 3D gradient noise methods. \n// https://www.shadertoy.com/view/Xsl3Dl\nvec3 hash( vec3 p ) // replace this by something better\n{\n\tp = vec3( dot(p,vec3(127.1,311.7, 74.7)),\n\t\t\t  dot(p,vec3(269.5,183.3,246.1)),\n\t\t\t  dot(p,vec3(113.5,271.9,124.6)));\n\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\nfloat noise( in vec3 p )\n{\n    vec3 i = floor( p );\n    vec3 f = fract( p );\n\t\n\tvec3 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( mix( dot( hash( i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ), \n                          dot( hash( i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ), \n                          dot( hash( i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), u.x), u.y),\n                mix( mix( dot( hash( i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ), \n                          dot( hash( i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ), \n                          dot( hash( i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) ), u.x), u.y), u.z );\n}\nconst mat3 m = mat3( 0.00,  0.80,  0.60,\n                    -0.80,  0.36, -0.48,\n                    -0.60, -0.48,  0.64 );\nfloat fbm( in vec3 pos )\n{\n    vec3  q = 8.0*pos;\n    float f = 0.5000*noise( q ); q = m*q*2.01;\n    f += 0.2500*noise( q ); //q = m*q*2.02;\n    //f += 0.1250*noise( q ); q = m*q*2.03;\n    //f += 0.0625*noise( q ); \n    return f;\n}\n\n\n\n\nvec3 rotate_y(vec3 v, float angle)\n{\n\tfloat ca = cos(angle); float sa = sin(angle);\n\treturn v*mat3(\n\t\t+ca, +.0, -sa,\n\t\t+.0,+1.0, +.0,\n\t\t+sa, +.0, +ca);\n}\nvec3 rotate_x(vec3 v, float angle)\n{\n\tfloat ca = cos(angle); float sa = sin(angle);\n\treturn v*mat3(\n\t\t+1.0, +.0, +.0,\n\t\t+.0, +ca, -sa,\n\t\t+.0, +sa, +ca);\n}\nvec3 rotate_z(vec3 v, float angle)\n{\n\tfloat ca = cos(angle); float sa = sin(angle);\n\treturn v*mat3(\n\t\t+ca, -sa, +.0,\n\t\t+sa, +ca, 0.,\n\t\t+.0, +.0, 1.);\n}\n\n// iq distance functions, \n// See https://iquilezles.org/articles/distfunctions\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\nfloat sdSphere(vec3 p, float radius )\n{\n  return length(p)-radius;\n}\n\nfloat sdTorus(in vec3 p, in vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\nfloat sdRoundedCylinder( vec3 p, float ra, float rb, float h )\n{\n  vec2 d = vec2( length(p.xz)-2.0*ra+rb, abs(p.y) - h );\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rb;\n}\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\nfloat sdCappedCone( vec3 p, float h, float r1, float r2 )\n{\n  vec2 q = vec2( length(p.xz), p.y );\n  vec2 k1 = vec2(r2,h);\n  vec2 k2 = vec2(r2-r1,2.0*h);\n  vec2 ca = vec2(q.x-min(q.x,(q.y<0.0)?r1:r2), abs(q.y)-h);\n  vec2 cb = q - k1 + k2*clamp( dot(k1-q,k2)/dot2(k2), 0.0, 1.0 );\n  float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;\n  return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n  vec3 q = abs(p);\n  return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\nfloat sdPlane( vec3 p, vec3 n, float h )\n{\n  // n must be normalized\n  return dot(p,n) + h;\n}\nfloat sdBoundingBox( vec3 p, vec3 b, float e )\n{\n  p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\n// not exact\nfloat sdEllipsoid( vec3 p, vec3 r )\n{\n  float k0 = length(p/r);\n  float k1 = length(p/(r*r));\n  return k0*(k0-1.0)/k1;\n}\n\n// See https://www.shadertoy.com/view/Wdjfz3\nfloat sdEgg( in vec2 p, in float ra, in float rb )\n{\n    const float k = sqrt(3.0);\n    \n    p.x = abs(p.x);\n    \n    float r = ra - rb;\n\n    return ((p.y<0.0)       ? length(vec2(p.x,  p.y    )) - r :\n            (k*(p.x+r)<p.y) ? length(vec2(p.x,  p.y-k*r)) :\n                              length(vec2(p.x+r,p.y    )) - 2.0*r) - rb;\n}\nfloat sdCappedTorus(in vec3 p, in vec2 sc, in float ra, in float rb)\n{\n  p.x = abs(p.x);\n  float k = (sc.y*p.x>sc.x*p.y) ? dot(p.xy,sc) : length(p.xy);\n  return sqrt( dot(p,p) + ra*ra - 2.0*ra*k ) - rb;\n}\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\nvec3 bendPoint( in vec3 p , float amt)\n{\n    float k = amt; //  some amount, e.g., 10.\n    float c = cos(k*p.x);\n    float s = sin(k*p.x);\n    mat2  m = mat2(c,-s,s,c);\n    vec3  q = vec3(m*p.xy,p.z);\n    return q;\n}\n// Function to y-axis revolve a 2D SDF into a 3D SDF.\nvec2 revolvePoint( in vec3 p, float radius )\n{\n    return vec2( length(p.xz) - radius, p.y );\n}\n\n// NOT A PUMPKIM;; IT IS A SNOWMAN\nfloat sdPumpkin(vec3 pos) \n{\n\tfloat d = 1e10;\n    \n    \n    float an = sin(iTime);\n    \n    // opSmoothUnion\n    {\n    vec3 q = pos - vec3(0., 0., 2.);\n    float s1 = sdSphere( q-vec3(0.0,-0.9+0.3*an,0.0), 0.55 );\n    float s2 = sdSphere( q-vec3(0.0,-.5+0.3*2.*an,0.0), 0.4 );\n    float s3 = sdSphere( q-vec3(0.0,-.3+0.3*3.*an,0.0), 0.3 );\n    \n \n    float d3 = sdRoundBox(q- vec3(0.0, -1.0, 0.0), vec3(5.,0.,5.), 0.1 );\n    float d1 = opSmoothUnion(s2, s3, 0.05);\n    float d2 = opSmoothUnion(s1, d1, 0.05);\n    float dt = opSmoothUnion(d2,d3, 0.25);\n    d = min( d, dt );\n    }\n\n    return d;\n\n}\n\nfloat sdSmallSnowman(vec3 pos){\n   float d = 1e10;\n    \n    \n    float an = sin(iTime);\n    \n    // opSmoothUnion\n    {\n    vec3 q = pos - vec3(0., 0., 2.);\n    float s1 = sdSphere( q-vec3(0.0,-1.+0.3*an,0.0), 0.3 );\n    float s2 = sdSphere( q-vec3(0.0,-.9+0.3*2.*an,0.0), 0.2 );\n    \n \n    float d3 = sdRoundBox(q- vec3(0.0, -1.0, 0.0), vec3(5.,0.,5.), 0.1 );\n    float d2 = opSmoothUnion(s1, s2, 0.05);\n    float dt = opSmoothUnion(d2,d3, 0.25);\n    d = min( d, dt );\n    }\n\n    return d;\n}\n\n\n/// SCENE PARAMETERS (feel free to add your own):\nconst vec3 pumpkinCenter     = vec3(0., -0.15, -8.0);\nconst vec3 Cd_pumpkinOutside = vec3(1.2, 1.2, 1.1); \nconst vec3 Cd_pumpkinInside  = vec3(1.,0.7,0.);\nconst vec3 Cd_stem           = vec3(0.35,0.25,0.15);\n\n// SDF implementation for our scene. \n// Returns 4 values: (sdf, Cd)\n//   .x: SDF distance, \n//   .y: Cd.r\n//   .z: Cd.g\n//   .w: Cd.b\n// NOTE: You could return other things for yzw, e.g., y:objectID int to set more colors in \"render.\"\nvec4 mapV4(in vec3 p)\n{\n    // SDF vector (sdf, r,g,b) to be returned:\n    vec4 sdf = vec4(100000., -1., 0., 0.);\n    \n    float mx = iMouse.x/iResolution.x;\n\n\n    // TODO: REPLACE THE FOLLOWING WITH YOUR SCENE CODE:\n    \n    // Translate coordinate to pumpkin center:\n    vec3 c = pumpkinCenter;\n    p -= c;\n   \n    \n    {// BODY:\n\t\t// OUTSIDE: Union of ellipsoids\n        vec3 q = p;//local copy\n        sdf.x = sdPumpkin(q);\n        sdf.yzw = Cd_pumpkinOutside;// + 0.1*vec3(1.,1.,0.)*length(q.xz);\n   \n    }\n    \n    {//EYES\n   // float d = 1e10;\n    float an = sin(iTime);\n  \n    vec3 q = p - vec3(0., 0., 2.);\n   // float s5 = sdSphere( q-vec3(-0.1,-0.2+0.3*3.*an,.23), 0.05 );\n   // float eyes = min(s4, s5);\n   // sdf = min(sdf, vec4(min(d,eyes), vec3(0.)));\n    \n    float d = sdSphere( q-vec3(0.1,-0.2+0.3*3.*an,.23), 0.05 );\n    float d1 = sdSphere( q-vec3(-0.1,-0.2+0.3*3.*an,.23), 0.05 );\n    d = min(d, d1);\n        sdf = opUnion(sdf, vec4(d, vec3(.0)));\n    \n    }\n    {//NOSE\n  \n    float an = sin(iTime);\n  \n    vec3 q = p - vec3(0., 0., 2.);\n   \n    \n    float d = sdSphere( q-vec3(0.,-0.3+0.3*3.*an,.3), 0.05 );\n    \n   \n        sdf = opUnion(sdf, vec4(d, vec3(1., .6, .3)));\n    \n    }\n    \n   {//BUTTONS\n  \n    float an = sin(iTime);\n  \n    vec3 q = p - vec3(0., 0., 2.);\n   \n    \n    float d = sdSphere( q-vec3(0.,-0.7+0.35*3.*an,.3), 0.03 );\n    float d1 = sdSphere( q-vec3(0.,-0.85+0.37*3.*an,.35), 0.032 );\n    float d2 = sdSphere( q-vec3(-1.42,-1.2+0.32*3.*an,.16), 0.032 );\n    float d3 = sdSphere( q-vec3(-1.58,-1.2+0.32*3.*an,.16), 0.032 );\n    float d4 = sdSphere( q-vec3(1.42,-1.2+0.32*3.*an,.16), 0.032 );\n    float d5 = sdSphere( q-vec3(1.58,-1.2+0.32*3.*an,.16), 0.032 );\n    d = min(d, min(d1, min(d2, min(d3, min(d4, d5)))));\n    \n   \n        sdf = opUnion(sdf, vec4(d, vec3(.3, .2, .1)));\n    \n    }\n\n    {// ADD NOISE:  (use sparingly--ruins signed-distance property)\n    \tsdf += 0.006*noise(8.*p);\n        //sdf.x += 0.015*fbm(0.65*p); // costly. \n    }\n    { //SMALL SNOWMAN\n       vec3 q = p - vec3(-1.5, 0., 0.);//local copy\n        float d = sdSmallSnowman(q);\n         sdf = opUnion(sdf, vec4(d, Cd_pumpkinOutside));\n    }\n    { //SMALL SNOWMAN\n       vec3 q = p - vec3(1.5, 0., 0.);//local copy\n        float d = sdSmallSnowman(q);\n         sdf = opUnion(sdf, vec4(d, Cd_pumpkinOutside));\n    }\n   \n\n    // CUTAWAY PLANE:\n    #if 0\n        float d = sdPlane( p, normalize(vec3(-1.,0.,-1.)), 3.*(mx-0.5));\n        vec4 cutPlane = vec4(d, Cd_pumpkinInside);\n        //sdf = opIntersection(sdf, cutPlane); \n        sdf = opSubtraction(cutPlane, sdf); \n    #endif\n    \n    #if 0   \n    {// COORDINATE BOX GUIDE:\n    \tfloat d = sdBoundingBox(p, vec3(1.), 0.02);\n        sdf = opUnion(sdf, vec4(d, vec3(0.8)));\n    }\n    #endif \n    \n    return sdf;\n}\n\n\n// Scalar SDF implementation for our scene\nfloat map(in vec3 p)\n{\n    return mapV4(p).x;// just sdf value\n}\n\n//vec3 calcNormal( in vec3 p ) // for function map(p)\n//{\n//    const float eps = 0.0001; // or some other value\n//    const vec2  h   = vec2(eps,0);\n//    return normalize( vec3(map(p+h.xyy) - map(p-h.xyy),\n//                          map(p+h.yxy) - map(p-h.yxy),\n//                           map(p+h.yyx) - map(p-h.yyx) ) );\n//}\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n    \n#if 0\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.001;\n    return normalize( e.xyy*map( pos + e.xyy ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ) );\n#else\n    // inspired by tdhooper and klems - a way to prevent the compiler from inlining map() 4 times\n    vec3 n = vec3(0.0);\n    for( int i=0; i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*map(pos+0.001*e);\n    }\n    return normalize(n);\n#endif    \n}\n\n// Vector raymarch: \n// .x   : t* value of surface, or -1 if didn't hit anything.\n// .yzw : pass-thru from mapV4.yzw\n// \nvec4 raymarchV4(in vec3 ro, in vec3 rd) \n{\n    //int steps = int(round(200.0*iMouse.y/iResolution.y));\n    float t = .0;\n    for(int i=0; i<513; i++) {\n        vec3  rt = ro + rd*t;\n        vec4  f  = mapV4(rt);\n\t\tfloat d  = f.x;\n        \n        if(d<0.001) {// We hit it or went too far\n            f.x = t; // replace .x's sdf with t*\n            //f.yzw = vec3(1.,0.,0.);\n            return f;\n        }\n        else {// keep marching\n         \tt += 0.95*d; // conservative/smaller step for inexact/warped SDFs\n        }\n        \n        if(t > 100.) {\n            f.x = -1.;// -ve t* --> didn't hit anything\n            return f;\n        }\n    }\n    \n\treturn vec4(-1., vec3(0.)); // didn't hit anything\n}\n\n/// Returns t* value of surface, or -1. if didn't hit anything.\nfloat raymarch(in vec3 ro, in vec3 rd) \n{\n    return raymarchV4(ro,rd).x;  \n}\n\n// Raymarch SDF: \n// Returns: t* value of surface, or -1.0 if didn't hit anything.\nfloat raymarchVanilla(in vec3 ro, in vec3 rd) \n{\n    float t = 0.0;\n    for(int i=0; i<200; i++) {\n        vec3  rt = ro + rd*t;\n        float d  = map(rt); // SDF of scene\n        \n        if(d<0.001) {// We hit it (or went too far)\n            return t;\n        }\n        else {// keep marching\n         \tt += d; // Assumes exact SDFs\n        }\n        \n        if(t > 100.) {\n            return -1.0;\n        }\n    }\n    \n\treturn -1.0; // didn't hit anything\n}\n\nfloat shadow( in vec3 ro, in vec3 rd, float mint, float maxt )\n{\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t);\n        if( h<0.001 )\n            return .5;\n        t += 0.95*h;//can do slightly less for not-quite-SDFs\n    }\n    return 1.0;\n}\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n    float res = 1.0;\n    float ph = 1e20;\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t);\n        if( h<0.001 )\n            return .0;\n        \n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.,t-y) );\n        ph = h;\n        t += 0.95*h;//slightly less for not-quite-SDFs\n    }\n    return res;\n}\n\nvec3 render(in vec3 ro, in vec3 rd) \n{\n    vec3  col = vec3(0.5,0.8,1.);    // init color to background\n    vec4  ray = raymarchV4(ro, rd);// compute distance along ray to surface\n    float t   = ray.x;\n    vec3  Cd  = ray.yzw;// can passthru other shading values, e.g., objectID, but we did color.\n    \n\n    \n    if(t>.0) {//hit surface --> shade it:   \n\n\t    vec3  p  = ro + rd*t; // point on surface\n        vec3  N  = calcNormal(p); // sdf normal\n        \n        // DETERMINE MATERIAL COLOR: (todo: all orange for now)\n        //vec3  Cd = vec3(231./255., 111./255., 3./255.); // diffuse color\n        \n        // DIRECTIONAL LIGHT:\n        vec3  posL   = ro+ 10.*vec3(0.1, .7,0.);// light at eye (safe!)\n        vec3  L      = normalize(posL - p);\n        vec3  CL     = vec3(1.);// directional light color\n        float LdotN  = clamp(dot(L,N), 0., 1.);\n        //float shadL  = shadow(p, L, 0.01, 10.);\n        float sshadL = softshadow(p, L, .01, length(posL-p)/2., 3.);\n\t    col =  Cd*CL* LdotN*sshadL;// * sshadL; // * occ;\n        \n  \n    }\n    \n    return col;\n}\nfloat rnd(float x)\n{\n    return fract(sin(dot(vec2(x+47.49,38.2467/(x+2.3)), vec2(12.9898, 78.233)))* (43758.5453));\n}\n\nfloat drawCircle(vec2 center, float radius, vec2 uv)\n{\n    return 1.0 - smoothstep(0.0, radius, length(uv - center));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pXY = (fragCoord - 0.5*iResolution.xy)/iResolution.y; // normalized coordinates (unit height)\n    vec3 pix = vec3(pXY,    0.);    // position of virtual pixel (Z=0 depth)\n    vec3 ro  = vec3(0., 0., 3.);    // ray origin (EYE POSITION).. controls field-of-view\n    vec3 rd  = normalize(pix - ro); // ray direction\n    \n    vec3 col = render(ro, rd); // ray-march and evaluate color\n    \n    //SNOW\n    vec2 uv = fragCoord.xy / iResolution.x;\n    \n \n    float j;\n    vec4 snow = vec4(0.808, 0.89, 0.918, .0);\n    \n    for(int i=0; i<200; i++)\n    {\n        j = float(i);\n        float speed = 0.3+rnd(cos(j))*(0.7+0.5*cos(j/(float(200)*0.25)));\n        vec2 center = vec2((0.25-uv.y)*0.2+rnd(j)+0.1*cos(iTime+sin(j)), mod(sin(j)-speed*(iTime*1.5*(0.1+.2)), 0.65));\n        snow += vec4(0.09*drawCircle(center, 0.001+speed*0.012, uv));\n    }\n    \n\n    // Output to screen\n    fragColor = mix(snow,vec4(col,1.0), .6);\n}","name":"Image","description":"","type":"image"}]}