{"ver":"0.1","info":{"id":"mstXRB","date":"1680053007","viewed":95,"name":"India flag (Vande Mataram)","username":"RetiringSnake63","description":"Devoir ATI - India flag (Vande Mataram)\n\nIf you like the song, it's called Vande Matram (Revival), here's a YouTube link for you :)\nVande Mataram YouTube link : https://www.youtube.com/watch?v=LE4dwGS_1q4","likes":0,"published":1,"flags":64,"usePreview":0,"tags":["2d","3d","sound","india","ati"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Md33zr","filepath":"https://soundcloud.com/djviraltiktok/maa-tujhe-salaam?si=1c1202abbdaa4d658bf16d615815bd4a&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","previewfilepath":"https://soundcloud.com/djviraltiktok/maa-tujhe-salaam?si=1c1202abbdaa4d658bf16d615815bd4a&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 SAFFRON = vec3(1, 0.403, 0.121);\nvec3 WHITE = vec3(1);\nvec3 GREEN = vec3(0.015, 0.415, 0.219);\nvec3 NAVYBLUE = vec3(0.023, 0.011, 0.552);\n\n\n\n\n\nfloat DrawBox(vec2 p, float wb, float wt, float yb, float yt, float blur)\n{\n    float m = smoothstep(-blur, blur, p.y-yb);\n    m *= smoothstep(blur, -blur, p.y-yt);\n    \n    p.x = abs(p.x);\n    \n    float w = mix(wb, wt, (p.y-yb)/(yt-yb));\n    m *= smoothstep(blur, -blur, p.x-w);\n    return m;\n}\n\n\n\n\n\n// TIRANGA\nvec4 SaffronFlagPart(vec2 uv, vec3 col, float blur)\n{\n    float m = DrawBox(uv, 1.0, 1.0, 0.7, 1.2, blur); \n    \n    return vec4(col, m);\n}\nvec4 WhiteFlagPart(vec2 uv, vec3 col, float blur)\n{\n    float m = DrawBox(uv, 1., 1., 0.3, 0.7, blur); \n    \n    return vec4(col, m);\n}\nvec4 GreenFlagPart(vec2 uv, vec3 col, float blur)\n{\n    float m = DrawBox(uv, 1., 1., -0.2, 0.3, blur); \n    \n    return vec4(col, m);\n}\n// ___TIRANGA___\n\n\n\n\n\n// CHAKRA\nvec4 Chakra(vec2 uv, vec3 col, float blur)\n{\n    float spokeWidth = 0.15;\n    \n    float m = DrawBox(uv, 1.5, 1.5, 0.875, 1., blur*2.5); //OuterCircle\n    \n    m += DrawBox(uv, spokeWidth, 0., 0.375, 0.875, blur*30.); //SpokeTopRight\n    m += DrawBox(uv, spokeWidth/4., spokeWidth, 0.1875, 0.375, blur*30.); //SpokeBottomRight\n    \n    m += DrawBox(vec2(uv.x-1., uv.y), spokeWidth, 0., 0.375, 0.875, blur*30.); //SpokeTopLeft\n    m += DrawBox(vec2(uv.x-1., uv.y), spokeWidth/4., spokeWidth, 0.1875, 0.375, blur*30.); //SpokeBottomLeft\n    \n    m += DrawBox(uv, 1.5, 1.5, 0., 0.1875, blur*2.5); //InnerCircle\n    \n    //m += (smoothstep(0.001, -0.01, length(uv+vec2(-.5,-.875))-.04)); //Small Circle\n    \n    return vec4(col, m);\n}\n/*vec4 OuterCircle(vec2 uv, vec3 col, float blur)\n{\n    float m = DrawBox(uv, 1., 1., 0., 0.333, blur); \n    \n    return vec4(col, m);\n}\nvec4 SpokeTop(vec2 uv, vec3 col, float blur)\n{\n    float m = DrawBox(uv, 1., 1., 0., 0.333, blur); \n    \n    return vec4(col, m);\n}\nvec4 SpokeBottom(vec2 uv, vec3 col, float blur)\n{\n    float m = DrawBox(uv, 1., 1., 0., 0.333, blur); \n    \n    return vec4(col, m);\n}\nvec4 InnerCircle(vec2 uv, vec3 col, float blur)\n{\n    float m = DrawBox(uv, 1., 1., 0., 0.333, blur); \n    \n    return vec4(col, m);\n}*/\n// ___CHAKRA___\n\n\n\n\n\n// Chakra Rivets\nvec4 ChakraRivets(vec2 uv, vec3 col, float blur)\n{\n    uv.x += 0.5;\n    float m = (smoothstep(0.001, -0.01, length(uv+vec2(-.5,-.875))-.02)); //Small Circle\n    //uv.x *= 2.1;\n    \n    return vec4(col, m);\n}\n// ___Chakra Rivets___\n\n\n\n\n\n/*void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    vec2 uvPolar = uv;\n    vec2 st = vec2(atan(uv.x, uv.y), length(uv));\n    uvPolar = vec2(st.x/6.2831+.5, st.y);\n\n    //uv.y += 0.5;\n    uvPolar.y *= 5.;\n    uvPolar.x *= 24.;\n    //uv.x += 5.;\n    //uv.y += .5;\n    uvPolar.x = fract(uvPolar.x);\n    uvPolar.x += -.0;\n    \n    vec4 col = vec4(0);\n    \n    float blur = 0.005;\n    \n    vec4 ChakraComp = Chakra(uvPolar, NAVYBLUE, blur);\n    //ChakraComp.rgb *= 0.3;\n    col += mix(col, ChakraComp, ChakraComp.a);\n    //col.rg = uv;\n\n    // Output to screen\n    //fragColor = vec4(SAFFRON, 0);\n    fragColor = col;\n}*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Setting up 2 different UVs\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    float animFlagValue = (uv.x*2.)-(-2.*-iTime-uv.y*2.); //The value that multiplies the uv.x decides the number of waves, the vaue that multiplies the iTime decides the speed of the animation, and the value that multiplies the uv.y decides the importance of the slope of the waves.\n    uv.y += sin(animFlagValue)*.05; //This is where the flag is animated. We take the << sin >> of something that has to do with << iTime >> to make things go back and forth or in this case, up and down.\n    \n    vec2 uvNoBS = uv; //This is a normal no BS UV \n    uvNoBS.y += 0.5;\n    \n    vec2 uvPolar = uv; //This is a polar UV that turns everything into circle\n    vec2 st = vec2(atan(uv.x, uv.y), length(uv)); \n    uvPolar = vec2(st.x/6.2831+.5, st.y); //This line makes the polar UV seamless\n    \n    uvPolar.y *= 6.; //Bigger the value here, smaller the chakra gets\n    uvPolar.x *= 24.; //This is how many spokes the chakra has\n    uvPolar.x = fract(uvPolar.x); //This makes the UV repeat\n    uvPolar.x += -.0;\n    // ___Setting up 2 different UVs___\n    \n    \n    vec4 col = vec4(0); //Making a blank black canvas\n    \n    float blur = 0.003; //This is a variable that decides how sharp the edges between each part are\n    \n    \n    // Making the Tiranga\n    vec4 SaffronPartComp = SaffronFlagPart(uvNoBS, SAFFRON, blur);\n    //SaffronPartComp.rgb *= 0.3;\n    col = mix(col, SaffronPartComp, SaffronPartComp.a);\n    \n    \n    vec4 WhitePartComp = WhiteFlagPart(uvNoBS, WHITE, blur);\n    col = mix(col, WhitePartComp, WhitePartComp.a);\n    \n    vec4 GreenPartComp = GreenFlagPart(uvNoBS, GREEN, blur);\n    col = mix(col, GreenPartComp, GreenPartComp.a);\n    // ___Making the Tiranga___\n    \n    \n    // Making the Ashoka Chakra\n    vec4 ChakraComp = Chakra(uvPolar, NAVYBLUE, blur);\n    //ChakraComp.rgb *= 0.3;\n    col = mix(col, ChakraComp, ChakraComp.a);\n    //col += ChakraComp;\n    //col.rg = uv; //You can use this command to see each repetition of the UV more precisely\n    // ___Making the Ashoka Chakra___\n    \n    \n    // Making the Ashoka Chakra's Rivets\n    //uvPolar.x += 0.1;\n    vec4 ChakraRivetsComp = ChakraRivets(uvNoBS, NAVYBLUE, blur);\n    //col = mix(col, ChakraRivetsComp, ChakraRivetsComp.a);\n    // ___Making the Ashoka Chakra's Rivets___\n    \n    \n    // Creating the shadows\n    col *= .75+cos(animFlagValue)*0.25; //We just multiply by the derivative of the value of the animation. The derivative of a << sin >> is << cos >>. That aside, the first number decides the size of the shadow and the second number decides the intensity of the shadow.\n    // ___Creating the shadows___\n    \n\n    // Output to screen\n    //fragColor = vec4(SAFFRON, 0);\n    fragColor = vec4(col);\n}","name":"Image","description":"","type":"image"}]}