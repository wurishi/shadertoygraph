{"ver":"0.1","info":{"id":"wltSD7","date":"1581132083","viewed":328,"name":"blackhole-visualize","username":"feefi","description":"visualize photon path curved by gravity","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["blackhole","visualize"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define T fract(iTime/4.)\n\nconst float maxStep = 50.;\n\nfloat bh_p = 0.7;\nfloat bh_r = 0.2;\nfloat planet_r = 0.07;\nfloat planet_p = 1.3;\n\nfloat GM = 0.17; //black mass precomputered\nfloat dt = 0.05;\nvec3 planet_col = vec3(0.95,0.15,0.15);\n\nfloat sdLine(vec2 p,vec2 a,vec2 b)\n{\n    return length(-clamp(dot(p-=a,b-=a)/dot(b,b),0.,1.)*b+p);\n}\n\n\nfloat black_hole_sdf(vec2 p)\n{\n    return length(p-vec2(bh_p,0)) -bh_r;\n}\n\nfloat black_hole_sdf(vec3 p)\n{\n    return length(p-vec3(0,0,bh_p)) -bh_r;\n}\n\nfloat planet_sdf(vec3 p)\n{\n    return length(p-vec3(0,0,planet_p)) -planet_r;\n}\n\nfloat planet_sdf(vec2 p)\n{\n    return length(p-vec2(planet_p,0.)) -planet_r;\n}\n\nfloat scene(vec2 p)\n{\n    return min(black_hole_sdf(p),planet_sdf(p));\n}\n\nfloat visualize_photon(vec2 _p,vec2 ro, vec2 rd, float t)\n{\n    return length(_p-ro-rd*t)-.001;\n}\n\nfloat visual_march(vec2 ro, vec2 rd,vec2 _p)\n{\n    vec2 v = normalize(rd);\n    vec2 p = ro;\n    \n\tfloat t = 0.;\n    float _d = 1e10; // phonton path\n    float marcht =  clamp(T * 2.,0.,1.);\n    for(float i = 0.; i < maxStep* marcht; i++)\n    {\n        p += v * dt;\n        float d = scene(p);\n        vec2 dis2bh = vec2(bh_p,0.)-p;\n        vec2 a = GM/dot(dis2bh,dis2bh) * normalize(dis2bh);\n        v = v + a * dt;       \n\t\tt += dt;        \n\t\t_d = min(_d,visualize_photon(_p,p,normalize(v),dt));\n        if(planet_sdf(p) < -0.) break;\n        \n    }  \n    return _d;\n}\n\n//3d tracing\nvoid render_black3d( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.yy; //normalize to -1,1\n    vec3 ro = vec3(0,0,-1);\n    vec3 rd = normalize(vec3(uv.x,uv.y,1));\n\n   \tvec3 col = vec3(1.);   \n\tfloat hitbh = 0.;\n    \n    float st = 0.;  \n    \n    vec3 p = ro;\n    vec3 v = rd;\n\n    vec3 cp = vec3(0,0,bh_p);\n    for(float i = 0.;i<maxStep;++i)\n    {\n       \t//F = G * M * m / r^2;\n    \t//a = F/m\n    \t//v = v + a * dt;\n    \t//p = p + v * dt;\n        p += v * dt;\n        vec3 relP = p - cp; //黑洞相对原点的位置       \n        float r2 = dot(relP,relP);\n        vec3 a = GM/r2 * normalize(-relP); //加速度的方向朝向黑洞，为-relP\n        v += a * dt;        \n        float hit = black_hole_sdf(p); //hit表示距物体的最小距离\n\t\thitbh = step(hit,0.); \n        if(hit < -0.05) break;\n        float hitplanet = planet_sdf(p);\n        hitplanet = smoothstep(0.05,-0.05,hitplanet);\n        col -= hitplanet * (vec3(1.0)-planet_col) * (1.0- hitbh);\n    }\n   \tcol *= (1.-hitbh);\n    fragColor = vec4(col,1.0);\n    \n}\n\n//2d visualize\nvoid trace_visualize2d( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.yy;\n\t\n    \n    vec2 m = (2.*iMouse.xy-iResolution.xy)/iResolution.yy;\n    \n    if (iMouse.x < 10. && iMouse.y < 10.) m = vec2(0,.2);\n    \n    vec2 ro = vec2(-1.,-0.05);\n    vec2 rd = normalize(m-ro);\n    \n    //draw march to _d;\n    float _d = visual_march(ro,rd,uv);\n    \n    //draw camera\n    float camera =   min(abs(length(uv-ro)-.05)\n                     ,sdLine(uv,ro,ro+rd*.05)); \n    \n    // camera & scene\n    _d = min(_d,camera);\n\n  \t\n    _d = abs(_d)-1./iResolution.y;\n    float photon_path = 1.-smoothstep(_d,_d+.005,.005);\n    \n    //draw black hole\n    float bh = black_hole_sdf(uv);\n    bh = smoothstep(0.005,-0.005,bh);\n    \n    //draw planet\n    float planet = planet_sdf(uv);\n    planet = smoothstep(0.007,-0.007,planet);\n    vec3 ptcol = planet*(vec3(1.) - planet_col);\n    vec3 col = vec3(photon_path)*(0.95-bh) - ptcol ;\n\tfragColor = vec4(col,1.0);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(T <= 0.5){  \n    \ttrace_visualize2d(fragColor,fragCoord);\n    }\n    else\n    {\n    \trender_black3d(fragColor,fragCoord);\n    }\n}","name":"Image","description":"","type":"image"}]}