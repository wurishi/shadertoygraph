{"ver":"0.1","info":{"id":"wsK3Dy","date":"1570903825","viewed":290,"name":"UV blur","username":"ufna","description":"Simple blur using uv offsets (indirect texture access)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["blur","uv"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.1415926535897932384626433832795;\nconst float DoublePI = 2.0 * PI;\n\nconst float CircleSize = 1.0;\nconst float SmoothPadding = 0.33;\n\nconst float Distance = 0.04;\nconst float DistanceSteps = 8.0;\nconst float RadialSteps = 8.0;\nconst float RadialOffset = 0.5;\nconst float KernelPower = 1.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Clear color\n    vec3 ClearColor = texture(iChannel0, uv).rgb;\n\n    // Blur using UV access\n    float StepSize = Distance / DistanceSteps;\n    vec3 BlurColor = vec3(0);\n    vec2 SubUV = uv;\n    float CurDistance = 0.0;\n    vec2 CurOffset = vec2(0);\n    float SubOffset = 0.0;\n    float KernelDistance = 0.0;\n    float AccumulatedDistance = 0.0;\n\n    for(int i = 0; i < int(DistanceSteps); i++)\n    {\n        CurDistance += StepSize;\n\n        for (int j = 0; j < int(RadialSteps); j++)\n        {\n            SubOffset += 1.0;\n\n            CurOffset.x = cos(DoublePI * (SubOffset / RadialSteps));\n            CurOffset.y = sin(DoublePI * (SubOffset / RadialSteps));\n\n            SubUV.x = uv.x + CurOffset.x * CurDistance;\n            SubUV.y = uv.y + CurOffset.y * CurDistance;\n\n            KernelDistance = pow(CurDistance, KernelPower);\n            BlurColor += texture(iChannel0,SubUV).rgb * KernelDistance;       \n            AccumulatedDistance += KernelDistance;\n        }\n\n        SubOffset += RadialOffset;\n    }\n\n    BlurColor /= AccumulatedDistance;\n    \n    // Calculate clear vision circle\n    float AspectRatio = iResolution.x / iResolution.y;\n    vec2 VisionCenter = iMouse.xy/iResolution.xy;\n\n    vec2 v = uv - VisionCenter;\n    v.x = v.x * AspectRatio;\n\n    float CirleRadius = CircleSize / 2.0;\n    float SmoothRadius = CirleRadius * SmoothPadding;\n    float CircleMask = smoothstep(CirleRadius, CirleRadius - SmoothRadius, length(v));\n    BlurColor.rgb = mix(BlurColor.rgb, ClearColor.rgb, CircleMask);\n    \n    fragColor = vec4(BlurColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}