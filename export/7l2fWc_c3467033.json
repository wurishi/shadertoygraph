{"ver":"0.1","info":{"id":"7l2fWc","date":"1653160088","viewed":162,"name":"Space Dance","username":"milkru","description":"Dancing triangle lights.","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["tilingpatterntriangle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// kru\n\nfloat sdTriangle(in vec2 p, in vec2 q)\n{\n    p.x = abs(p.x);\n\tvec2 a = p - q * clamp(dot(p, q) / dot(q, q), 0.0, 1.0);\n    vec2 b = p - q * vec2(clamp(p.x / q.x, 0.0, 1.0), 1.0);\n    float k = sign(q.y);\n    float d = min(dot(a, a), dot(b, b));\n    float s = max(k * (p.x * q.y - p.y * q.x), k * (p.y - q.y));\n\treturn sqrt(d) * sign(s);\n}\n\nvoid mainImage(out vec4 fragCol, in vec2 fragCoord)\n{\n    vec3 totCol = vec3(0.0);\n    \n    const int AA = 2;\n    for(int m = 0; m < AA; ++m)\n    for(int n = 0; n < AA; ++n)\n    {\n        float time;\n        {\n            \n            float d = 0.5 * sin(fragCoord.x * 147.0) *\n                            sin(fragCoord.y * 131.0);\n                      \n            time = iTime - 0.5 * (1.0 / 24.0) *\n                   (float(m * AA + n) + d) /\n                    float(AA * AA - 1);\n        }\n        \n        vec2 uv;\n        {\n            vec2 off = vec2(float(m), float(n)) / float(AA) - 0.5;\n            uv = (2.0 * (fragCoord + off) - iResolution.xy) /\n                  iResolution.y - 0.5;\n            \n            float a = 0.1 * time;\n            uv *= mat2(cos(a), -sin(a),\n                       sin(a),  cos(a));\n\n            uv *= vec2(1.1547, 1.0);\n            uv *= 1.4;\n            uv *= 0.7 + 0.4 * smoothstep(0.5, 1.0, abs(sin(time)));\n            uv *= smoothstep(0.0, 1.0, (5.0 + 2.0 * sin(0.35 * time)) / 6.0);\n\n            uv = 2.0 * uv - 1.0;\n            \n            uv += 30.0 + vec2(3.1075 * smoothstep(0.0, 1.0, sin(3.0 * time)),\n                              2.5072 * smoothstep(0.0, 1.0, sin(4.0 * time)));\n            uv += 1.3 * time;\n        }\n\n        float ut, uc;\n        {\n            vec2 luv = uv;\n            luv += float(int(luv.x) % 2) * vec2(0.0, 0.5);\n\n            {\n                uc = 5.0 * texture(iChannel0, 0.01 *\n                           round(luv + 0.5) + 0.00005 * time).g;\n                uc += 7.5 * smoothstep(0.7, 1.4, (1.0 + sin(4.55*time)));\n            }\n            \n            luv  = 2.0 * fract(luv) - 1.0;\n            luv += vec2(0.0, -0.5);\n            luv *= mix(1.5, 1.0, smoothstep(0.5, 0.75,\n                                 abs(sin(0.5 + 1.5 * time))));\n\n            ut = sdTriangle(luv, vec2(1.0, -1.5));\n        }\n\n        float dt, dc;\n        {\n            vec2 luv = uv;\n            luv += vec2(1.0 / 3.0, 0.0);\n            luv += float(int(luv.x) % 2) * vec2(0.0, 0.5);\n\n            {\n                dc = 7.0 * texture(iChannel0, 0.01 *\n                           round(luv + 0.5) + 0.0095 * time).b;\n                dc *= smoothstep(0.1, 0.35,\n                      smoothstep(0.0, 0.75, abs(sin(time))));\n            }\n            \n            luv  = 2.0 * fract(luv) - 1.0;\n            luv *= vec2(1.0, -1.0);\n            luv += vec2(0.0, -0.5);\n            luv *= mix(1.5, 1.0, smoothstep(0.5, 0.75,\n                                 abs(sin(1.5 * time))));\n            \n            dt = sdTriangle(luv, vec2(1.0, -1.5));\n        }\n\n        uc *= smoothstep(0.0, 1.0, fract(clamp(1.0 * -ut, 0.0, 1.0)));\n        dc *= smoothstep(0.0, 1.0, fract(clamp(-dt, 0.0, 1.0)));\n\n        vec3 col = vec3(0.0);\n        col = mix(col, uc * vec3(0.957, 0.531, 0.246),\n                  1.0 - clamp(10000.2 * vec3(ut), 0.0, 1.0));\n        col = mix(col, dc * vec3(0.387, 0.789, 0.871),\n                  1.0 - clamp(10000.2 * vec3(dt), 0.0, 1.0));\n       \n\t    totCol += pow(col, vec3(0.45) );\n    }\n    \n    totCol /= float(AA * AA);\n    \n    vec2 fragCoordNorm = fragCoord / iResolution.xy;\n    totCol *= 0.5 + 0.5 * pow(16.0 * fragCoordNorm.x * fragCoordNorm.y *\n             (1.0 - fragCoordNorm.x) * (1.0 - fragCoordNorm.y), 1.25);\n\n    fragCol = vec4(totCol, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}