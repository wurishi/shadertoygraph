{"ver":"0.1","info":{"id":"wsK3WG","date":"1571054954","viewed":102,"name":"Rift","username":"peterszerzo","description":"A little play with rifts, gradients and magnetism","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["gradient","orthographic","streamline"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 hsvToRgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nconst float pi = 3.1415926535897932384;\n\nmat2 rotation ( in float _angle ) {\n    return mat2(\n        cos(_angle), sin(_angle),\n    \t-sin(_angle), cos(_angle)\n    );\n}\n\nfloat angle(in vec2 pos) {\n    if (abs(pos.x) < 0.0001) {\n        if (pos.y >= 0.0) {\n            return pi / 2.0;\n        }\n        if (pos.y < 0.0) {\n            return -pi / 2.0;\n        }\n    }\n    return atan(pos.y, pos.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float time = iTime * 0.75;\n    \n    vec2 uv = rotation(pi * 1.25) *\n        (fragCoord / iResolution.xy - 0.5);\n    \n    uv.x = uv.x * iResolution.x / iResolution.y;\n    \n    float theta = angle(uv) * 5.2 / pi;\n    \n    float uvrX = 19.0 * pow(\n        length(uv),\n        0.8\n    );\n    \n    vec2 uvr = vec2(\n        uvrX,\n        theta * 5.0 + 1.6 * sin(uvrX + 4.0 + time)\n    );\n    \n    vec3 color1 = hsvToRgb(vec3(\n        0.56,\n        0.7,\n        0.75\n    ));\n    \n    vec3 color2 = hsvToRgb(vec3(\n        0.68,\n        0.8,\n        0.60\n    ));\n    \n    vec2 uvrMacro = floor(uvr);\n    vec2 uvrMicro = fract(uvr);\n  \n    // Inside gradient\n    if (uvrMacro.x < 7.0) {\n        fragColor = vec4(mix(\n            color1,\n            color2,\n            0.5 + 0.5 * sin(uvr.x * 0.5 + uvr.y * 0.2)\n        ), 1.0);\n        return;\n    }\n\n    fragColor = vec4(\n        vec3(0.08 + 0.04 * sin(\n            (uv.y + 0.1 * (0.5 + 0.5 * sin(time)) +\n             (1.0 + 0.12 * sin(time)) * uv.y * uv.x) *\n            21.0 * (1.5 + 0.02 * sin(time + pi * 0.5))\n        )),\n        1.0\n    );\n}","name":"Image","description":"","type":"image"}]}