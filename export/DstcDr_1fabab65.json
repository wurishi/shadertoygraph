{"ver":"0.1","info":{"id":"DstcDr","date":"1694965734","viewed":113,"name":"Flow field along normals","username":"grom12345","description":"Just a quick sketch, looks a little bit like refraction.","likes":8,"published":1,"flags":32,"usePreview":0,"tags":["procedural","2d","3d","noise","perlin","flowfield"],"hasliked":0,"parentid":"XsX3zB","parentname":"3d simplex noise"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord.xy/iResolution.xy;\n    \n    vec2 p1 = p;\n\t\n\tfloat d = texture(iChannel0, p1).x;\n    vec2 e = vec2(0.01, 0.);\n\n    vec2 n = d - vec2(texture(iChannel0, p1 - e.xy).x,\n                      texture(iChannel0, p1 - e.yx).x);\n                      \n    vec3 color = vec3(0);\n    \n    //d = buff.a;\n    \n    d *= 100.;\n    \n    float edge = floor(d)-d;\n    \n    color += (1.-smoothstep(abs(edge), 0.01, 0.03))*100.5;//*0.1;\n    \n    //if(abs(edge)<0.03) color -= 0.1;\n    //else{\n        \n    //}\n    \n    vec4 buff = texture(iChannel1, p);\n    \n    //color += d;\n    \n    color += buff.rgb;\n    \n    if(p.x>0.95||p.x<0.05||p.y>0.95||p.y<0.05)\n       color = vec3(0);\n    \n    //color += smoothstep(floor(d)-d, 0.1, 0.01);\n    //\n    //color.rg += n*.5+0.5;\n    \n    \n\t//fragColor = vec4(texture(iChannel1, p).xyz,1.0);\n    color = normalize(color)-0.07;\n    color = pow(color*1.96, vec3(80.));\n\n\tfragColor = vec4(\n\t\t\tcolor,\n\t\t\t1.0);\n\treturn;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord.xy/iResolution.x;\n\tvec3 p3 = vec3(p*.05, iTime*0.001);\n\t\n\tfloat value;\n\n\tvalue = simplex3d_fractal(p3*8.0+8.0);\n\t\n\tvalue = 0.5 + 0.5*value;\n\t\n\tfragColor = vec4(\n\t\t\tvec3(value),\n\t\t\t1.0);\n\treturn;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy/iResolution.xy;\n    \n    //p = p;\n\t\n\tfloat d = texture(iChannel0, p).x;\n    vec2 e = vec2(0.01, 0.);\n\n    vec2 n = d - vec2(texture(iChannel0, p - e.xy).x,\n                      texture(iChannel0, p - e.yx).x);\n    \n    n = normalize(n);\n    vec2 nn = -normalize((p-0.5));\n    \n    //n = normalize(mix(nn, n, 0.4));\n\n    n = vec2(n.y, -n.x);;\n                      \n    vec3 c0 = texture(iChannel1, p+n*0.005).rgb;\n    vec3 c1 = texture(iChannel1, p-n*0.005).rgb;\n    \n    vec3 c = texture(iChannel1, p).rgb;\n    c = mix(c, c1, 0.7);\n                      \n    vec3 color = vec3(0);\n    \n    float d1 = d*100.;\n    \n    float edge = floor(d1)-d1;\n    \n    //color -= smoothstep(edge, 0.1, 0.1);\n    \n    /*if(abs(edge)<0.1) color += 1.;\n    else{\n        \n    }*/\n    \n    if(p.x>0.99||p.x<0.01||p.y>0.99||p.y<0.01||iTime<.1)\n       //color = mix(vec3(1,0,0), vec3(0,0,1), simplex3d(vec3(p*2., iTime)));\n       color = hash(vec3(p*.000000000001, iTime));\n    else\n       color = c;\n    \n    //color += smoothstep(floor(d)-d, 0.1, 0.01);\n    //\n    //color.rg += n*.5+0.5;\n\n\tfragColor = vec4(\n\t\t\tcolor,\n\t\t\td);\n\treturn;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"/* https://www.shadertoy.com/view/XsX3zB\n *\n * The MIT License\n * Copyright Â© 2013 Nikita Miropolskiy\n * \n * ( license has been changed from CCA-NC-SA 3.0 to MIT\n *\n *   but thanks for attributing your source code when deriving from this sample \n *   with a following link: https://www.shadertoy.com/view/XsX3zB )\n *\n * ~\n * ~ if you're looking for procedural noise implementation examples you might \n * ~ also want to look at the following shaders:\n * ~ \n * ~ Noise Lab shader by candycat: https://www.shadertoy.com/view/4sc3z2\n * ~\n * ~ Noise shaders by iq:\n * ~     Value    Noise 2D, Derivatives: https://www.shadertoy.com/view/4dXBRH\n * ~     Gradient Noise 2D, Derivatives: https://www.shadertoy.com/view/XdXBRH\n * ~     Value    Noise 3D, Derivatives: https://www.shadertoy.com/view/XsXfRH\n * ~     Gradient Noise 3D, Derivatives: https://www.shadertoy.com/view/4dffRH\n * ~     Value    Noise 2D             : https://www.shadertoy.com/view/lsf3WH\n * ~     Value    Noise 3D             : https://www.shadertoy.com/view/4sfGzS\n * ~     Gradient Noise 2D             : https://www.shadertoy.com/view/XdXGW8\n * ~     Gradient Noise 3D             : https://www.shadertoy.com/view/Xsl3Dl\n * ~     Simplex  Noise 2D             : https://www.shadertoy.com/view/Msf3WH\n * ~     Voronoise: https://www.shadertoy.com/view/Xd23Dh\n * ~ \n *\n */\n\n/* discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n/* skew constants for 3d simplex functions */\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\n/* 3d simplex noise */\nfloat simplex3d(vec3 p) {\n\t /* 1. find current tetrahedron T and it's four vertices */\n\t /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n\t /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n\t \n\t /* calculate s and x */\n\t vec3 s = floor(p + dot(p, vec3(F3)));\n\t vec3 x = p - s + dot(s, vec3(G3));\n\t \n\t /* calculate i1 and i2 */\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t /* x1, x2, x3 */\n\t vec3 x1 = x - i1 + G3;\n\t vec3 x2 = x - i2 + 2.0*G3;\n\t vec3 x3 = x - 1.0 + 3.0*G3;\n\t \n\t /* 2. find four surflets and store them in d */\n\t vec4 w, d;\n\t \n\t /* calculate surflet weights */\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n\t w = max(0.6 - w, 0.0);\n\t \n\t /* calculate surflet components */\n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.0), x3);\n\t \n\t /* multiply d by w^4 */\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t /* 3. return the sum of the four surflets */\n\t return dot(d, vec4(52.0));\n}\n\n/* const matrices for 3d rotation */\nconst mat3 rot1 = mat3(-0.37, 0.36, 0.85,-0.14,-0.93, 0.34,0.92, 0.01,0.4);\nconst mat3 rot2 = mat3(-0.55,-0.39, 0.74, 0.33,-0.91,-0.24,0.77, 0.12,0.63);\nconst mat3 rot3 = mat3(-0.71, 0.52,-0.47,-0.08,-0.72,-0.68,-0.7,-0.45,0.56);\n\n/* directional artifacts can be reduced by rotating each octave */\nfloat simplex3d_fractal(vec3 m) {\n    return   0.5333333*simplex3d(m*rot1)\n\t\t\t+0.2666667*simplex3d(2.0*m*rot2)\n\t\t\t+0.1333333*simplex3d(4.0*m*rot3)\n\t\t\t+0.0666667*simplex3d(8.0*m);\n}\n\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\n  const uint k = 1103515245U;  // GLIB C\n//const uint k = 134775813U;   // Delphi and Turbo Pascal\n//const uint k = 20170906U;    // Today's date (use three days ago's dateif you want a prime)\n//const uint k = 1664525U;     // Numerical Recipes\n\nvec3 uhash3( uvec3 x )         // iq version\n{\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    \n    return vec3(x)/float(0xffffffffU);\n}\n\n\nvec3 hash( vec3 f )            // $FaN: vec3 to vec3. any scaling. f.z=0 seed is ok.\n{ \n    return uhash3( floatBitsToUint(f) );\n // return uhash3( uvec3( floatBitsToUint(f.x),\n //                       floatBitsToUint(f.y),\n //                       floatBitsToUint(f.z) ) );\n}","name":"Common","description":"","type":"common"}]}