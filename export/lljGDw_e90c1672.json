{"ver":"0.1","info":{"id":"lljGDw","date":"1429655833","viewed":429,"name":"city bokeh blur","username":"joeedh","description":"bokeh blur","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["bokehblur"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"#define STEPS 10\n\nfloat bez(float a, float b, float c, float t) {\n    float r1 = a + (b - a)*t;\n    float r2 = b + (c - b)*t;\n    return r1 + (r2 - r1)*t;\n}\n\nfloat cubic(float a, float b, float c, float d, float t) {\n\treturn bez(a, b, c, t)*(1.0-t) + bez(b, c, d, t)*t;\n}\nfloat quart(float a, float b, float c, float d, float e, float t) {\n\treturn cubic(a, b, c, d, t)*(1.0-t) + cubic(b, c, d, e, t)*t;\n}\nfloat quint(float a, float b, float c, float d, float e, float f, float t) {\n\treturn quart(a, b, c, d, e, t)*(1.0-t) + quart(b, c, d, e, f, t)*t;\n}\n\nvec4 sampletex(sampler2D t, vec2 uv, vec2 focalpoint, float z) {\n    float asp = iChannelResolution[0][0]/iChannelResolution[0][1];\n    uv *= iChannelResolution[0].xy;\n\tfocalpoint *= iChannelResolution[0].xy;\n    \n    float rmul = 1.0/length(iChannelResolution[0].xy);\n    z *= rmul;\n    \n    float focallen = length(uv-focalpoint)*1.0;\n    //uv += (focalpoint-uv)*z*focalpoint;\n    uv = (uv - focalpoint)/(1.0+(rmul-z)*400.0*(focallen)*rmul) + focalpoint;\n    uv = (uv-focalpoint)*(0.5 + z*300.0)*1.2 + focalpoint;\n    \n    uv = floor(uv+0.001);\n    uv /= iChannelResolution[0].xy;\n    return texture(t, uv);\n    \n}\nvec4 sample1(float d, vec2 uv) {\n    //uv[1] *= iResolution[1]/iResolution[0];\n    uv[1] = 1.0 - uv[1];\n    \n    vec2 fpoint = vec2(0.45, 0.6);\n    float z = (sin(iTime*0.34)*0.5+0.5)*0.75;\n    \n    float focallen = length(uv-fpoint)*1.0;\n    \n    //uv += (fpoint-uv)*z*focallen;\n    \n    focallen = min(focallen, 0.5);\n    \n    float zmul = 0.875 - (z*0.4);\n    d *= focallen*zmul; //smoothstep(0.0, 1.0, focallen); \n    \n    float ds = d/float(STEPS);\n    float x = -ds*float(STEPS)*0.5;\n    float dw = 1.0/float(STEPS);\n    vec4 ret = vec4(0.0);\n    float totw = 0.0;\n    \n    float ss = 1.0;\n    float sstot = 1.0;\n    float sqr2 = sqrt(2.0);\n    float asp = iResolution[0]/iResolution[1]; //iChannelResolution[0][0]/iChannelResolution[0][1];\n    \n    for (int i=0; i<STEPS; i++) {\n\t    float y = -asp*ds*float(STEPS)*0.5;\n        \n        for (int j=0; j<STEPS; j++) {\n            vec2 xy = vec2(uv[0]+x, uv[1]+y);\n            float wx = dw*float(i)-0.5;\n            float wy = dw*float(j)-0.5;\n            \n            float w =  1.0 - sqrt(wx*wx + wy*wy)/sqr2;\n            vec4 clr = sampletex(iChannel0, xy, fpoint, z);\n            \n            float s = length(clr.xyz)*0.75;\n            \n            //s = ss/sstot; //*0.9 + 0.1*ss/sstot;\n            if (s < 1.0) s = 0.0001;\n                \n            float w2 = s*s;\n            float w3 = pow(w, 4.0);\n            float dis = w;\n            w = w3 + (w2 - w3)*pow(s, 20.0)*(dis > 0.7 ? 1.0 : 0.0);\n\t\t\t//w = w2;\n            //w = dis*dis*dis*dis;\n            \n            ret += clr*w;\n            totw += w;\n            y += ds*asp;\n            \n        }\n        x += ds;\n    }\n    \n    totw = 1.0 / totw;\n    return ret*totw;\n}\n\nfloat smoothstep2(float a, float b, float t, vec4 clr) {\n    float sign = t < 0.5 ? -1.0 : 1.0;\n    /*\n    t = abs(t-0.5)*2.0;\n    t = t;\n    t = t*0.5*sign + 0.5;\n    //*/\n    return smoothstep(0.0, 1.0, t);\n    float s = length(clr.xyz);\n    s *= 1.0;\n    //s = 0.0;\n    \n    return cubic(0.0, s, 1.0 - s, 1.0, t);\n    return quart(0.0, 0.0, s, 1.0, 1.0, t);\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    //uv[0] *= 0.1;\n    \n    float ps = 16.0; //-sin(iTime)*8.0;\n    \n    float d1 = 1.0/ps;\n    float d2 = 1.0/(0.5*ps);\n    \n    uv /= vec2(d1, d2);\n    \n    float x = floor(uv[0]), y = floor(uv[1]);\n    \n    vec4 k = sample1(d1, vec2(uv[0]*d1, uv[1]*d2));\n    fragColor = k;\n    \n#if 0\n    vec4 a = sample1(d1, vec2(x*d1, y*d2));\n    vec4 b = sample1(d1, vec2(x*d1, (y+1.0)*d2));\n    vec4 c = sample1(d1, vec2((x+1.0)*d1, (y+1.0)*d2));\n    vec4 d = sample1(d1, vec2((x+1.0)*d1, y*d2));\n    \n    float v = uv[0] - x, u = uv[1] - y;\n    \n    vec4 r1 = a + (b - a)*u;\n    vec4 r2 = d + (c - d)*u;\n    vec4 clr = r1 + (r2 - r1)*v;\n    //u = 1.0 - u;\n    //v = 1.0 - v;\n    u = smoothstep2(0.0, 1.0, u, clr);\n    v = smoothstep2(0.0, 1.0, v, clr);\n    \n    r1 = a + (b - a)*u;\n    r2 = d + (c - d)*u;\n    \n    clr = r1 + (r2 - r1)*v;\n    \n\tfragColor = clr;\n#endif    \n  \n    //fragColor = sample1(d1, fragCoord.xy / iResolution.xy);\n}","name":"","description":"","type":"image"}]}