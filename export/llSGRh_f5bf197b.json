{"ver":"0.1","info":{"id":"llSGRh","date":"1427828650","viewed":446,"name":"chrome fudge sea","username":"kig","description":"Chrome sea","likes":20,"published":1,"flags":0,"usePreview":0,"tags":["shadeaday","pingpong"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"\n#define THRESHOLD 0.005\n#define MAX_DISTANCE 2.0\n\n#define RAY_STEPS 30\n\n\n// iq's LUT based 3d value noise\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\t\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = texture( iChannel0, (mod(uv,256.0) + 0.5)/256.0, -100.0 ).yx;\n\treturn mix( rg.x, rg.y, f.z );\n}\n\nfloat map( in vec3 p )\n{\n\tvec3 q = p + 0.2*vec3(-1.0, 1.0, 2.2)*iTime;\n\tfloat f;\n    f = 0.500*noise( q ); q = q*2.0;\n    f += 0.25*noise( q ); q = q*2.0;\n    f += 0.125*noise( q ); q = q*2.0;\n//    f += 0.0625*noise( q ); q = q*2.0;\n//    f += 0.03125*noise( q ); q = q*2.0;\n//    f += 0.015625*noise( q );\n\treturn f;\n}\n\n\nfloat scene(vec3 p)\n{\n\treturn min(length(p-vec3(0.0, 0.9, 0.0))-0.7, (pow(map(p), 6.0)*-2.0+0.2+0.5+p.y));\n}\n\nvec3 normal(vec3 p, float d)\n{\n\tfloat e = 0.05;\n\tfloat dx = scene(vec3(e, 0.0, 0.0) + p) - d;\n\tfloat dy = scene(vec3(0.0, e, 0.0) + p) - d;\n\tfloat dz = scene(vec3(0.0, 0.0, e) + p) - d;\n\treturn normalize(vec3(dx, dy, dz));\n}\n\nvec3 shadeBg(vec3 nml, vec2 fragCoord)\n{\n\tvec2 aspect = vec2(iResolution.x/iResolution.y, 1.0);\n\tvec2 uv = (2.0 * fragCoord.xy / iResolution.xy - 1.0) * aspect;\n    float t = 144.57;\n\tvec3 bgLight = normalize(vec3(\n\t\tcos(t*0.2/0.954929658551372)*4.0, \n\t\tsin(t/1.1936620731892151)*3.0 - 4.0, \n\t\tsin(t*0.2/0.954929658551372)*8.0\n\t));\n\tvec3 sun = vec3(3.0, 1.0, 0.5);\n\tfloat bgDiff = dot(nml, vec3(0.0, -1.0, 0.0));\n\tfloat sunPow = dot(nml, bgLight);\n\tfloat sp = max(sunPow, 0.0);\n\tvec3 bgCol = max(0.0, bgDiff)*2.0*vec3(0.4, 0.7, 1.0);\n\tbgCol += max(0.0, -bgDiff)*vec3(0.4, 0.55, 0.7);\n\tbgCol += vec3(0.2, 0.5, 0.7)*((0.5*pow(1.0-abs(bgDiff), 5.0)*(5.0-dot(uv,uv))));\n\tbgCol += sun*(0.5*pow( sp, 3.0)+pow( sp, 256.0));\n\tbgCol += vec3(0.5, 0.2, 0.15)*(pow( sp, 8.0) + pow( sp, abs(bgLight.y)*128.0));\n    bgCol += vec3(1.9,0.,0.9) * ((1.0-pow(abs(bgDiff), 0.6)) * 1.0 * map(-nml) * map(-nml*nml.y));\n\treturn pow(max(vec3(0.0), bgCol), vec3(1.9));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 aspect = vec2(iResolution.x/iResolution.y, 1.0);\n\tif (iResolution.x < iResolution.y) {\n\t\taspect = vec2(1.0, iResolution.y / iResolution.x);\n\t}\n\tvec2 uv = (2.0 * fragCoord.xy / iResolution.xy - 1.0) * aspect;\n\tvec3 d = normalize(vec3(uv, 1.0));\n\tvec3 p = vec3(uv*-2.0, -6.5) + d*3.6;\n    for (int i=0; i<RAY_STEPS; i++) {\n        float dist = scene(p);\n        if (dist < THRESHOLD) {\n            vec3 nml = normal(p, dist);\n            d = reflect(d, nml);\n            p += (23.0*THRESHOLD) * d;\n        }\n        if (dist > MAX_DISTANCE) {\n            break; \n        }\n        p += dist * d;\n    }\n\tfragColor = vec4( 1.0 - exp(-1.3 * shadeBg(-d, fragCoord)), 1.0 );\n}","name":"","description":"","type":"image"}]}