{"ver":"0.1","info":{"id":"3stXWs","date":"1573147731","viewed":122,"name":"Raymarching [5] More models","username":"camelcoder","description":"Raymarching","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n/**\n * SDF's from:\n * https://iquilezles.org/articles/distfunctions\n **/\n\nfloat sd_sphere(vec3 p, float r) {\n\treturn length(p) - r;\n}\nfloat sd_box(vec3 p, vec3 s) {\n\tvec3 d = abs(p) - s;\n\treturn length(max(d, 0.0)) + min(max(d.x, max(d.y, d.z)), 0.0);\n}\nfloat sd_box(vec3 p, vec3 s, float r) {\n\tvec3 d = abs(p) - s;\n\treturn length(max(d, 0.0)) - r + min(max(d.x, max(d.y, d.z)), 0.0);\n}\nfloat sd_torus(vec3 p, vec2 s) {\n\treturn length(vec2(length(p.xz) - s.x, p.y)) - s.y;\n}\nfloat sd_cylinder(vec3 p, vec3 s) {\n\treturn length(p.xz - s.xy) - s.z;\n}\nfloat sd_octahedron(vec3 p, float s) {\n  p = abs(p);\n  return (p.x + p.y + p.z - s) * 0.57735027;\n}\n\nmat2 op_rotate(float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\treturn mat2(c, -s, s, c);\n}\nvec3 op_repeat(vec3 p, vec3 c) {\n\treturn mod(p, c) - 0.5 * c;\n}\nvec3 op_twist(vec3 p, float k)\n{\n\tfloat c = cos(k * p.y);\n\tfloat s = sin(k * p.y);\n\tmat2  m = mat2(c, -s, s, c);\n\treturn vec3(m*p.xz, p.y);\n}\nvec3 op_bend(vec3 p, float k)\n{\n\tfloat c = cos(k * p.x);\n\tfloat s = sin(k * p.x);\n\tmat2  m = mat2(c, -s, s, c);\n\treturn vec3(m*p.xy, p.z);\n}\n\n\n// https://iquilezles.org/articles/smin\nfloat smin(float a, float b, float k)\n{\n    float h = max(k - abs(a - b), 0.0);\n    return min(a, b) - h * h * 0.25 / k;\n}\n\n// https://iquilezles.org/articles/smin\nfloat smax(float a, float b, float k)\n{\n    float h = max(k - abs(a - b),0.0);\n    return max(a, b) + h * h * 0.25 / k;\n}\n\n\n\nfloat map(vec3 pos)\n{\n    // create floor\n    float d = pos.y - -0.5;\n\n#if 1\n\tvec3 p = pos - vec3(0, sin(iTime) * 1.3, 2);\n    float size = sin(iTime) * 0.5 + 0.8;\n\td = smin(d, mix(sd_box(p, vec3(size)), sd_torus(p, vec2(size, 0.1)), sin(iTime * 0.6) * 0.5 + 0.5), 1.0);\n\n    float change = clamp(sin(iTime * 0.5) * 1.25 + 0.5, 0.0, 1.0);\n\tp = pos - vec3(sin(iTime), 1, 2.0 + cos(iTime));\n\td = smin(d, mix(sd_sphere(p, 0.35), sd_octahedron(p, 0.35), change), 0.25);\n\n\n\tp = pos - vec3(sin(iTime + 3.1415), 1, 2.0 + cos(iTime + 3.1415));\n\td = smin(d, mix(sd_octahedron(p, 0.35), sd_sphere(p, 0.35), change), 0.25);\n\n#else\n    // If it dosn't look right\n    vec3 p = pos - vec3(0, sin(iTime) * 1.3, 2);\n    float size = sin(iTime) * 0.5 + 0.8;\n        d = min(d, sd_box(p, vec3(size)));\n\n    float change = clamp(sin(iTime * 0.5) * 1.25 + 0.5, 0.0, 1.0);\n        p = pos - vec3(sin(iTime), 1, 2.0 + cos(iTime));\n        d = min(d, sd_sphere(p, 0.35));\n\n\n        p = pos - vec3(sin(iTime + 3.1415), 1, 2.0 + cos(iTime + 3.1415));\n        d = min(d, sd_octahedron(p, 0.35));\n#endif\n    \n    return d;\n}\n\n\nvec3 calc_normal(vec3 p)\n{\n    vec2 e = vec2(0.0001, 0.0);\n    return normalize(vec3(map(p + e.xyy) - map(p - e.xyy),\n                          map(p + e.yxy) - map(p - e.yxy),\n                          map(p + e.yyx) - map(p - e.yyx)));\n}\nfloat cast_ray(vec3 ro, vec3 rd)\n{\n    float total = 0.0;\n    for (int i = 0; i < 100; ++i) {\n        vec3 pos = ro + total * rd;\n        \n        float dist = map(pos);\n        \n        if (dist < 0.001) break; // to close\n        total += dist;\n        if (total > 20.0) { // to far\n            total *= -1.0;\n            break;\n        }\n    }\n    return total;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    fragCoord *= 2.0;\n\tvec2 p = (fragCoord - iResolution.xy ) / iResolution.y;\n\n    vec3 ro = vec3(0.0, 1.0, -2.0); // ray origin\n    vec3 rd = normalize(vec3(p, 1.5)); // ray direction\n    \n    vec3 col = vec3(0.6, 0.7, 0.8) - 0.4 * rd.y; // sky\n    col = mix(col, vec3(0.75, 0.8, 0.85), exp(-13.0 * rd.y)); // horizon\n   \n    float total = cast_ray(ro, rd);\n    \n    if (total > 0.0) {\n        vec3 pos = ro + total * rd;\n        vec3 norm = calc_normal(pos);\n        \n        vec3 mate = vec3(0.18); // Don't do full white's\n        \n        // dot(a, b) -> how aligned are a and b\n        vec3 sun = normalize(vec3(0.8, 0.4, 0.2));\n        float sun_dif = clamp(dot(norm, sun), 0.0, 1.0);\n        // step(a, b) -> if a < b then 0 else 1\n        float sun_sha = step(cast_ray(pos + norm * 0.001, sun), 0.0);\n        col = mate * vec3(7.0, 4.5, 3.0) * sun_dif * sun_sha;\n        \n        \n        // Blueish sky light from above\n        float sky_dif = clamp(0.5 + 0.5 * dot(norm, vec3(0, 1, 0)), 0.0, 1.0);\n        col += mate * vec3(0.5, 0.8, 0.9) * sky_dif;\n        \n        // Remove blacks, by bouncing light of the ground\n        float bou_dif = clamp(0.5 + 0.5 * dot(norm, vec3(0, -1, 0)), 0.0, 1.0);\n        col += mate * vec3(0.7, 0.3, 0.2) * bou_dif;\n    }\n    col = pow(col, vec3(0.4545)); // Gamma correction\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}