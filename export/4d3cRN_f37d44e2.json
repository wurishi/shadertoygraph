{"ver":"0.1","info":{"id":"4d3cRN","date":"1518001968","viewed":154,"name":"Function drawer","username":"Ultraviolet","description":"Instructions: click to set new values to the function.","likes":8,"published":1,"flags":32,"usePreview":0,"tags":["curve","draw"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define BG_COLOR vec3(.9)\n#define FG_COLOR vec3(.8)\n#define ST_COLOR vec3(.1)\n\nfloat PointSegDistance(vec2 p, vec2 a, vec2 b)\n{\n\tvec2 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n}\n\nfloat val(int n)\n{\n    return texelFetch(iChannel0, ivec2(n, 0),0).r;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    int x = int(fragCoord.x);\n    float dx = 1./iResolution.x;\n    float v = val(x);\n    vec2 p  = vec2(uv.x   , v       );\n    vec2 pp = vec2(uv.x+dx, val(x+1));\n    vec2 pm = vec2(uv.x-dx, val(x-1));\n    \n    //*\n    if(x == 0)\n        pm = pp;\n    \n    if(x == int(iResolution.x)-1)\n        pp = pm;\n\t//*/\n        \n    float dp = min(PointSegDistance(uv,p, pp),PointSegDistance(uv,p, pm));\n    \n    float stroke_alpha = clamp(mix(1., 0., dp * iResolution.y), 0., 1.);\n    float bg_alpha = clamp((v-uv.y)* iResolution.y, -1., 1.)*.5+.5;\n    \n    \n    vec3 c = mix(BG_COLOR, FG_COLOR, bg_alpha);\n    c = mix(c, ST_COLOR, stroke_alpha);\n    \n    fragColor = vec4(c, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 ifragCoord = ivec2(floor(fragCoord));\n    \n    if(ifragCoord.y != 0)\n    {\n        fragColor = vec4(0.);\n        return;\n    }\n    \n    vec4 val = texelFetch(iChannel0, ifragCoord,0);\n    \n    if(iFrame < 2)\n    {\n        //val.x = 0.;\n        val.x = 0.5+0.2*sin(10.*fragCoord.x/iResolution.x);\n    }\n    \n    //*\n    if(iMouse.z>.5 && val.w<.5 && int(iMouse.x) == ifragCoord.x)\n    {\n        val.x = iMouse.y/iResolution.y;\n    }\n    //*/\n    \n    if(iMouse.z>.5 && val.w>.5)\n    {\n        float t = (fragCoord.x - val.y)/(iMouse.x - val.y);\n        if(0.<t && t<1.)\n            val.x = mix(val.z/iResolution.y, iMouse.y/iResolution.y, t);\n    }\n    \n    fragColor = vec4(val.x, iMouse.xyz);\n    \n    return;\n    \n    \n    // just testing things here.\n    // put your own function !\n    \n    float x = fragCoord.x/iResolution.x * 4. - 2.;\n    float y = x;\n    \n    //y = 0.5*sin(x*3.14*2.);\n    y = 1.-abs(1.-mod( x, 2.));\n    \n    fragColor.x = y;\n}","name":"Buffer A","description":"","type":"buffer"}]}