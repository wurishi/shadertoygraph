{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"struct\t\tobj\n{\n    int id;\n\tvec4 pos;\n\tvec3 dir;\n    vec3 col;\n    float ka;\n    float kd;\n    float ks;\n    float kl;\n};\n\nvec3 cam = vec3(0.0, -0.8, 8.0);\n\nobj olum = obj(0, vec4(0.0, 2.0, 0.0, 0.0), vec3(0.0), vec3(0.01, 0.01, 0.01), 0.0, 0.0, 0.0, 0.0);\nobj olum2 = obj(-1, vec4(0.0, 2.0, -100.0, 0.0), vec3(0.0), vec3(1.0, 0.2, 0.0), 0.0, 0.0, 0.0, 0.0);\nobj osph = obj(1, vec4(200.0, 110.0, -500.0, 10.0), vec3(0.0), vec3(1.0, 1.0, 1.0), 0.0, 0.4, 0.2, 1.0);\nobj opln = obj(2, vec4(0.0, -1.0, 0.0, -1.0), vec3(0.0), vec3(1.0, 0.0, 0.0), 0.0, 0.2, 0.8, 1.0);\nobj opln2 = obj(3, vec4(0.0, -0.9, 0.1, 200.0), vec3(0.0), vec3(0.0, 0.0, 1.0), 0.4, 1.0, 1.0, 1.0);\nobj osph2 = obj(4, vec4(0.0, -12.0, -200.0, 10.0), vec3(0.0), vec3(1.0, 0.2, 0.0), 1.0, 0.0, 0.0, 142.0);\n\nfloat rand;\nvoid randomize(vec2 c)\n{\n    rand = fract(sin(dot(c, vec2(113.421,17.329))) * 3134.1234);\n}\n\nfloat tri(in float x)\n{\n    return abs(fract(x) - 0.5);\n}\nvec3 tri3(in vec3 p)\n{\n    return vec3(tri(p.z + tri(p.y)), tri(p.z + tri(p.x)), tri(p.y+tri(p.x)));\n}\n                                 \nfloat noise3D(in vec3 p, in float spd)\n{\n    float z=1.4;\n\tfloat rz = 0.0;\n    vec3 bp = p;\n\tfor (float i = 0.0; i <= 3.0; i++ )\n\t{\n        vec3 dg = tri3(bp * 2.0);\n        p += (dg + iTime * 0.1 * spd);\n\n        bp *= 1.8;\n\t\tz *= 1.5;\n\t\tp *= 1.2;\n        \n        rz+= (tri(p.z + tri(p.x + tri(p.y)))) / z;\n        bp += 0.14;\n\t}\n\treturn rz;\n}\n\nobj\t\tgetObj(in int id)\n{\n\tif (id == 1)\n        return (osph);\n    if (id == 2)\n        return (opln);\n    if (id == 3)\n        return (opln2);\n    if (id == 4)\n        return (osph2);\n    return (olum);\n}\n\nfloat\tisphere(in vec3 ro, in vec3 rd, in int id)\n{\n\tobj o = getObj(id);\n    ro = ro - o.pos.xyz;\n    float a = dot(rd, rd);\n    float b = 2.0 * dot(ro, rd);\n    float c = dot(ro, ro) - o.pos.w * o.pos.w;\n    float d = b * b - 4.0 * a * c;\n    if (d < 0.001)\n        return (-1.0);\n    a *= 2.0;\n    return (min((-b - sqrt(d)) / a, (-b + sqrt(d)) / a));\n}\n\nvec3\tnsphere(in vec3 pos, in int id, in int type)\n{\n\tobj o = getObj(id);\n    vec3 n = (pos - o.pos.xyz) / o.pos.w;\n    if (type == 0 || id == 4)\n        return (n);\n    vec3 eps = vec3(0.9, 0.0, 0.0);\n    return (vec3(n.x + noise3D(n - eps, 0.0) - noise3D(n + eps, 0.0),\n                 n.y + noise3D(n - eps.yxz, 0.0) - noise3D(n + eps.yxz, 0.0),\n                 n.z + noise3D(n - eps.zyx, 0.0) - noise3D(n + eps.zyx, 0.0)));\n}\n\nfloat\tiplane(in vec3 ro, in vec3 rd, in int id)\n{\n    obj o = getObj(id);\n    if (id == 2)\n    \t//ro.y += noise3D(cos(vec3(rd.y, rd.x, rd.y + 2.0)) * 8.0, 0.2) / 1.5;\n    \tro.y += noise3D(rd, 0.6);\n        \n    float d = -(dot(ro, normalize(o.pos.xyz)) + o.pos.w) / dot(rd, normalize(o.pos.xyz));\n\n    return (d);\n}\n\nvec3\tnplane(in vec3 pos, in int id, in int type)\n{\n    vec3 n, eps;\n    obj o = getObj(id);\n\tn = o.pos.xyz * -1.0;\n    if (type == 0 || id == 3)\n        return (n);\n    vec3 nn = vec3(n.x + pos.x, 50.0 * n.y + 100.0 * pos.y, n.z + pos.z);\n    \n    eps = vec3(0.001, 0.0, 0.0);\n    return (vec3(n.x + noise3D(nn - eps, 0.6) - noise3D(nn + eps, 0.6),\n                 n.y + noise3D(nn - eps.yxz, 0.6) - noise3D(nn + eps.yxz, 0.6),\n                 n.z + noise3D(nn - eps.zyx, 0.6) - noise3D(nn + eps.zyx, 0.6)));\n}\n\nfloat\tgetIntersect(in vec3 ro, in vec3 rd, in int id)\n{\n\tif (id == 1 || id == 4)\n        return (isphere(ro, rd, id));\n    if (id > 1)\n        return (iplane(ro, rd, id));\n    return (-1.0);\n}\n\nvec3\tgetNormale(in vec3 pos, in int id, in int type)\n{\n\tif (id == 1 || id == 4)\n        return (nsphere(pos, id, type));\n    if (id > 1)\n        return (nplane(pos, id, type));\n    return (vec3(0.0));\n}\n\nvec3\tgetColor(in vec3 p, int id)\n{\n    if (id == 3)\n    {\n    \tp.z += iTime * 20.0;\n    }\n    vec3 c1, c2, c3;\n    float v1, v2, v3;\n    v1 = 0.0;\n    v2 = 0.3;\n    v3 = 10.0;\n    c1 = vec3(0.0, 0.0, 0.0);\n    c2 = vec3(0.5, 0.5, 0.5);\n    c3 = vec3(0.01, 0.01, 0.0);\n    \n    if (id == 2)\n    {\n    \tc1 = vec3(1.0, 1.0, 1.0);\n    \tc2 = vec3(0.0, 0.0, 0.5);\n    \tc3 = vec3(0.2, 0.5, 1.0);\n        v1 = 0.2;\n    \tv2 = 0.1;\n    \tv3 = 0.4;\n    }\n\t\n    float n = abs(noise3D(id == 2 ? p : p / 800.0, 0.02));\n    \n    if (n < v1)\n        return c1;\n    if (n < v2)\n    \treturn c1 * (n - v1) / (v2 - v1) + c2 * (v2 - n) / (v2 - v1);\n\tif (n < v3)\n        return c2 * (n - v2) / (v3 - v2) + c3 * (v3 - n) / (v3 - v2);\n    return c3;\n}\n\nint\t\tintersect(in vec3 ro, in vec3 rd, out float t)\n{\n    int id = -1;\n    \n    t = 1000000.0;\n    for (int i = 1; i < 5; i++)\n    {\n        float ti = getIntersect(ro, rd, i);\n        if (ti > 0.001 && ti < t)\n        {\n            id = i;\n            t = ti;\n        }\n    }\n    return (id);\n}\n\nvec3\tprocessColor(in vec2 uv, in vec3 ro, in vec3 rd, in float t, int id, int inside)\n{\n    obj o, l;\n\tvec3 amb, dif, spe, p, n, ln, lp, nlp, ocol;\n    float ps1, ps2, t1, coef;\n    int id2;\n\n    o = getObj(id);\n    p = ro + t * rd;\n    ocol = (id == 1 || id == 4) ? o.col : getColor(p, id);\n    if (id == 3 && osph2.pos.y > -12.5)\n    {\n    \tvec3 col2 = vec3(0.0, 0.6, 1.0);\n    \tocol -= mix(col2, vec3(0.0, 0.0, 0.0), (osph2.pos.y + 15.0) / 6.0);\n    }\n    n = getNormale(p, id, 1);\n    l = olum;\n    lp = normalize(l.pos.xyz - p);\n    nlp = normalize(p - l.pos.xyz);\n    ps1 = dot(n, lp);\n    ps2 = -dot(n, nlp);\n    amb = ocol * o.ka;\n    dif = spe = vec3(0.0);\n    if (ps1 > 0.0)\n    {\n        id2 = intersect(l.pos.xyz, nlp, t1);\n    \tif (id2 == id || id == 1)\n        {\n            dif = o.kd * ocol * ps1;\n    \t\tif (ps2 > 0.0)\n    \t\t    spe = l.col * o.ks * pow(ps2, o.kl);\n        }\n    }\n    l = olum2;\n    lp = normalize(l.pos.xyz - p);\n    nlp = normalize(p - l.pos.xyz);\n    ps1 = dot(n, lp);\n    ps2 = -dot(n, nlp);\n    if (ps1 > 0.0)\n    {\n        id2 = intersect(l.pos.xyz, nlp, t1);\n    \tif (id2 == id || id == 1)\n        {\n            dif += o.kd * ocol * ps1;\n    \t\tif (ps2 > 0.0)\n    \t\t    spe += l.col * o.ks * pow(ps2, o.kl);\n        }\n    }\n    return (amb + dif +spe);\n}\n\nvec3\tgetPixelColor(in vec2 uv, in vec3 ro, in vec3 rd)\n{\n    vec3 col = vec3(0.0);\n    float t = 1000.0;\n    int id = intersect(ro, rd, t);\n    \n    if (id > 0)\n    \treturn (processColor(uv, ro, rd, t, id, 0));\n    return (col);\n}\n\nmat3 mid = mat3(1.0, 0.0, 0.0,\n                0.0, 1.0, 0.0,\n                0.0, 0.0, 1.0);\n\nmat3\trotX(float a)\n{\n\tmat3 m;\n    \n    m = mid;\n    m[1][1] = cos(a);m[1][2] = -sin(a);\n    m[2][1] = sin(a);m[2][2] = cos(a);\n    return (m);\n}\n\nmat3\trotY(float a)\n{\n\tmat3 m;\n    \n    m = mid;\n    m[0][0] = cos(a);m[0][2] = -sin(a);\n    m[2][0] = -sin(a);m[2][2] = cos(a);\n    return (m);\n}\n\nmat3\trotZ(float a)\n{\n\tmat3 m;\n    \n    m = mid;\n    m[0][0] = cos(a);m[0][1] = -sin(a);\n    m[1][0] = sin(a);m[1][1] = cos(a);\n    return (m);\n}\n\nmat3\trot(float x,float y, float z)\n{\n\tmat3 m;\n    \n    x = x * 3.1415 / 180.0;\n    y = y * 3.1415 / 180.0;\n    z = z * 3.1415 / 180.0;\n    m = mid;\n    m *= rotX(x);\n    m *= rotY(y);\n    m *= rotZ(z);\n    return (m);\n}\n\nvoid\tmainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float e = tan(30.0 * 3.14 / 180.0);\n    float ratio = iResolution.x / iResolution.y;\n\tvec2 uv = (-1.0 + 2.0 * fragCoord.xy / iResolution.xy);\n    uv *= vec2(e, e / ratio);\n    vec3 ro = cam;\n    vec3 rd = normalize(vec3(uv, -1.0));\n    float y = sin(iTime) * 5.0 + 5.0;\n    osph2.pos.y += y;\n    olum2.pos.y += y;\n    osph2.col.y += y / 10.0;\n    osph.pos.z += y * y * y;\n    osph.ka *= 1.0 / y;\n    olum2.col *= y /50.0;\n    opln.kd += y / 20.0;\n    opln.kl -= y / 20.0;\n\n\tfragColor = vec4(getPixelColor(uv, ro, rd),1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ll2GzR","date":"1426692626","viewed":170,"name":"wake up","username":"Dermenslof","description":"cool, i love perlin noise","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sunsea"],"hasliked":0,"parentid":"","parentname":""}}