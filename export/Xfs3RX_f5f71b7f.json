{"ver":"0.1","info":{"id":"Xfs3RX","date":"1703295827","viewed":20,"name":"ewdlop's Bezier curve","username":"ewdlop","description":"https://www.youtube.com/watch?v=a4zMX6dDVXI\nAnd custom CubicBezier","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["beziercurve"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Circle(vec2 p, vec2 c)\n{\n    float d = length(p-c);\n    return smoothstep(fwidth(d),0.,d-.02);\n}\n\nfloat Line(vec2 p, vec2 a, vec2 b)\n{\n    vec2 pa = p-a;\n    vec2 ba = b-a;\n    float t = clamp(dot(pa, ba)/dot(ba,ba),0.,1.);\n    vec2 c = a + ba*t;\n    float d = length(c-p);\n    return smoothstep(fwidth(d),0.,d-.001);\n}\n\nvec2 Bezier(vec2 a, vec2 b,vec2 c, float t){\n    return mix(mix(a,c,t), mix(c,b,t),t);\n}\n\n// Cubic Bezier Function using mix\nvec2 CubicBezier(vec2 P0, vec2 P1, vec2 P2, vec2 P3, float t) {\n    float u = 1.0 - t;\n    // Linearly interpolate between points\n    vec2 A = mix(P0, P1, t); // point between P0 and P1\n    vec2 B = mix(P1, P2, t); // point between P1 and P2\n    vec2 C = mix(P2, P3, t); // point between P2 and P3\n\n    // Now interpolate between A, B, and C to find the curve point\n    vec2 D = mix(A, B, t); // point between A (P0-P1) and B (P1-P2)\n    vec2 E = mix(B, C, t); // point between B (P1-P2) and C (P2-P3)\n\n    // Finally, interpolate between D and E to get the point on the curve\n    vec2 curvePoint = mix(D, E, t); // Cubic Bezier Curve point\n\n    return curvePoint;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = vec3(0);\n\n    float t= sin(iTime)*.5+.5;\n    \n    vec2 A = vec2(-.8,-.4);\n    vec2 B = vec2(.8,.4);\n    vec2 C = (iMouse.xy-.5*iResolution.xy)/iResolution.y; //control point 1\n    vec2 D = C+ vec2(.1,.1); // control point 2\n    vec2 AC = mix(A,C,t);\n    vec2 CB = mix(C,B,t);\n    vec2 CD = mix(C,D,t);\n    vec2 ACB = mix(AC,CB,t);\n    vec2 AD = mix(A,D,t);\n    vec2 DB = mix(D,B,t);\n    vec2 ADB = mix(AD,DB,t);\n\n    vec2 ACD = mix(AC,CD,t);\n    vec2 CDB = mix(CD,DB,t);\n    vec2 ACDB = mix(ACD,CDB,t);\n    \n    \n    col+=vec3(1,0,0)*Circle(uv, A);\n    col+=vec3(0,1,0)*Circle(uv, B);\n    col+=vec3(1,0,1)*Circle(uv, C);    \n    col+=vec3(.5,.5,.5)*Circle(uv, D);\n\n    \n    col+=vec3(1,1,0)*Circle(uv,AC);\n    col+=vec3(0,1,1)*Circle(uv,CB);    \n    col+=vec3(0,1,1)*Circle(uv,CD);\n    col+=vec3(1,1,1)*Circle(uv,ACB);\n    \n    col+=vec3(1.,1.,.5)*Circle(uv,AD);\n    col+=vec3(.5,1.,1.)*Circle(uv,DB);\n    col+=vec3(0.5,1.,1.)*Circle(uv,ADB);\n    col+=vec3(1.,.5,1.)*Circle(uv,ACD);\n    col+=vec3(1.,.5,1.)*Circle(uv,CDB);\n    col+=vec3(1.,.5,1.)*Circle(uv,ACDB);\n    \n    col+= Line(uv,A,C) + Line(uv, C,B);   \n    col+= Line(uv,AC, CB);\n    \n    col+= Line(uv,A,D) + Line(uv, D,B);   \n    col+= Line(uv,AD, DB);\n    \n    col+= Line(uv,A,C) + Line(uv, C,DB);   \n    col+= Line(uv,AC, CD);\n    \n    col+= Line(uv,C,D) + Line(uv, D,B);   \n    col+= Line(uv,CD, DB);\n    \n    int NUM_SEGS = 25;\n    vec2 P, PP=A;\n    for(int i=1; i<=NUM_SEGS;i++){\n        t = float(i)/float(NUM_SEGS);\n        P = CubicBezier(A,C,D,B,t);\n        col += max(col,Line(uv,P,PP));\n        PP = P;\n    }\n    \n    NUM_SEGS = 25;\n    P=A;\n    PP=A;\n    for(int i=1; i<=NUM_SEGS;i++){\n        t = float(i)/float(NUM_SEGS);\n        P = Bezier(A,B,C,t);\n        col += max(col,Line(uv,P,PP));\n        PP = P;\n    }\n    \n        NUM_SEGS = 25;\n    P=A;\n    PP=A;\n    for(int i=1; i<=NUM_SEGS;i++){\n        t = float(i)/float(NUM_SEGS);\n        P = Bezier(A,B,D,t);\n        col += max(col,Line(uv,P,PP));\n        PP = P;\n    }\n    \n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}