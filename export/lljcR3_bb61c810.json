{"ver":"0.1","info":{"id":"lljcR3","date":"1509580987","viewed":223,"name":"Semi Optimized Smooth Voronoi ","username":"Panoptics","description":"There are still empty lanes which displeases the machine god.\n[Edit] It's starting to look like a convolution filter now. Time to change the hash function to one that can be done on a whole matrix.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec4 HASHSCALEXYXY = vec4(0.1031, 0.1030, 0.1031, 0.1030);\n\nconst mat4 m_vor = \nmat4(\n   -1,-1, 0,-1,\n   -1, 1,-1, 0,\n    1, 1, 1, 0,\n    1,-1, 0, 1\n);\n\n//x's   -1,-1,-1, 0,\n//       0, 0,,1, 1,\n\n//y's   -1, 0, 1,-1,\n//       0, 1,-1, 0\n\nvec2 hash22(vec2  p4) {\n  p4 += dot(p4, vec2(p4.yx)+19.19);\n  return fract((p4.xx+p4.yx)*p4.xy );\n}\n\nvoid hash44(inout vec4  p4) {\n    p4 = fract(p4  * HASHSCALEXYXY);\n    vec4 f1 = p4*(p4+19.19).yxwz;\n    p4 += (f1.xz+f1.yw).xxyy;\n    p4 =fract((p4.xxzz+p4.yxwz)*p4 );\n}\n\n// raise to the power of 8 the fast and accurate way\n// avoiding the exp(y*log(x) path induced by pow()\nfloat mpow8(float a) {\n    float a2=a*a;\n    float a3=a2*a2;\n    return 1.0/(a3*a3);\n}\n\nfloat m4pow8(vec4 a) {\n    vec4 a2=a*a;\n    vec4 a3=1.0/(a2*a2);\n    return dot(a3,a3);\n}\n\n\nfloat smoothVoronoi( in vec2 x ) {\n    vec4 p = floor( x ).xyxy;\n    vec4 f = fract( x ).xyxy;\n\n    vec2 r2 = -f.xy + hash22( fract( p.xy * HASHSCALEXYXY.xy)); // center pixel\n    float res = mpow8( dot(r2,r2) );\n    mat4 rm = (mat4(p,p,p,p)+m_vor);\n    hash44( rm[0] );\n    hash44( rm[1] );\n    hash44( rm[2] );\n    hash44( rm[3] );\n    rm = m_vor-mat4(f,f,f,f) + rm ;\n    rm[0] *= rm[0]; \n    rm[1] *= rm[1]; \n    rm[2] *= rm[2]; \n    rm[3] *= rm[3];\n      \n    res += m4pow8(vec4(rm[0].xz,rm[1].xz)+vec4(rm[0].yw,rm[1].yw)) +\n           m4pow8(vec4(rm[2].xz,rm[3].xz)+vec4(rm[2].yw,rm[3].yw));\n    \n    return pow( 1.0/(res), 1.0/16.0 );\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = vec4(smoothVoronoi(uv*20.0));\n}","name":"Image","description":"","type":"image"}]}