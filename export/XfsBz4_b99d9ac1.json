{"ver":"0.1","info":{"id":"XfsBz4","date":"1723460692","viewed":23,"name":"colors11111","username":"sao","description":"colors","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["color"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_ITER 750\n#define ZOOM_SPEED 0.6\n#define ANGLE_STEP 137.5 // Golden angle in degrees\n\n\n// Function to generate a complex fractal pattern\nvec3 fractalPattern(vec2 uv) {\n    vec2 z = uv;\n    float intensity = 1.0;\n\n    for (int i = 0; i < MAX_ITER; i++) {\n        z = mat2(cos(iTime * ZOOM_SPEED), -sin(iTime * ZOOM_SPEED),\n                 sin(iTime * ZOOM_SPEED), cos(iTime * ZOOM_SPEED)) * z + vec2(1.5, 2.0);\n        float dist = length(z);\n        intensity += exp(-dist * 1.0);\n    }\n    return vec3(intensity);\n}\n\n// Function to generate color based on angle\nvec3 angleColor(float angle) {\n    float r = 0.5 + 0.5 * cos(angle + 0.0);\n    float g = 0.5 + 0.5 * cos(angle + 2.0);\n    float b = 0.5 + 0.5 * cos(angle + 4.0);\n    return vec3(r, g, b);\n}\n\n// Main image function\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n    uv *= 2.0;\n\n    float angle = atan(uv.y, uv.x) + iTime * ZOOM_SPEED;\n    float radius = length(uv);\n\n    vec3 color = angleColor(angle) * fractalPattern(uv * radius * 20.0);\n\n    // Apply a zoom effect\n    float zoom = 1.0 + sin(iTime * ZOOM_SPEED) * 1.5;\n    uv *= zoom;\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}