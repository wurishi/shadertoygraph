{"ver":"0.1","info":{"id":"lcjfzy","date":"1725148728","viewed":46,"name":"voxel landscape suitable terrain","username":"jt","description":"Approximating a terrain/heightmap by triangles in a kisquadrille/tetrakis pattern.\nUsing DDA-raymarch hybrid to step through voxel columns.\nIntended to be combined with other voxel structures.\n\nAn impression of an icy landscape on a polar circle day.\n","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["3d","terrain","raymarch","voxels","sdf","random","heightmap","dda","hybrid","plugin","kisquadrille"],"hasliked":0,"parentid":"4cBfRR","parentname":"terrain approximation with tiles"},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/lcjfzy voxel landscape suitable terrain, 2024 by jt\n// using https://www.shadertoy.com/view/lXGGR3 raymarch voxels with color\n\n// Approximating a terrain/heightmap by triangles in a kisquadrille/tetrakis pattern.\n// Using DDA-raymarch hybrid to step through voxel columns.\n// Intended to be combined with other voxel structures.\n\n// An impression of an icy landscape on a polar circle day.\n\n// tags: 3d, terrain, raymarch, voxels, sdf, random, heightmap, dda, hybrid, plugin, kisquadrille\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// For correct ambient occlusion sample neighbor voxels (slow!)\n//#define HIGH_QUALITY\n// Faster: use planes and lines instead of triangles\n#define FUSED_SHAPE // XXX not exact yet XXX\n// Apparently voxelize plugin is NOT necessary here, just slows everything down.\n// Enable only when rendering additional voxel geometry.\n//#define VOXELIZE\n\nvec3 hash32(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\n#define pi 3.1415926\n#define tau (pi+pi)\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\nfloat box(vec2 p, vec2 b) // https://iquilezles.org/articles/distfunctions/\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat line(vec3 p, vec3 a, vec3 b) // https://iquilezles.org/articles/distfunctions/\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa,ba)/dot(ba,ba), 0.0, 1.0);\n    return length(pa - ba*h);\n}\n\nfloat dot2( in vec3 v ) { return dot(v,v); }\n\nfloat triangle(vec3 p, vec3 a, vec3 b, vec3 c) // https://iquilezles.org/articles/distfunctions/\n{\n    vec3 ba = b - a; vec3 pa = p - a;\n    vec3 cb = c - b; vec3 pb = p - b;\n    vec3 ac = a - c; vec3 pc = p - c;\n    vec3 nor = cross( ba, ac );\n\n    return sqrt(\n        (sign(dot(cross(ba,nor),pa)) +\n         sign(dot(cross(cb,nor),pb)) +\n         sign(dot(cross(ac,nor),pc))<2.0)\n         ?\n         min( min(\n         dot2(ba*clamp(dot(ba,pa)/dot2(ba),0.0,1.0)-pa),\n         dot2(cb*clamp(dot(cb,pb)/dot2(cb),0.0,1.0)-pb) ),\n         dot2(ac*clamp(dot(ac,pc)/dot2(ac),0.0,1.0)-pc) )\n         :\n         dot(nor,pa)*dot(nor,pa)/dot2(nor));\n}\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n#define ITER_MAX 200u\n\nstruct result\n{\n    vec3 color;\n    float dist;\n};\n/*\nfloat height(vec2 p)\n{\n    float l = length(p)-fract(iTime/2.0);\n    //return 10.0*sin(2.0*pi*p.x/40.0)*cos(2.0*pi*p.y/40.0)*cos(iTime);\n    //return 0.1*sin(-2.0*pi*l/10.0);\n    //return 0.5*sin(2.0*pi*l/10.0)/l;\n    return 4.0*texture(iChannel0, p*0.01).x - 1.5;\n}\n*/\nfloat wave(vec2 p, vec2 f)\n{\n    return sin(2.0*pi*p.x/f.x)*cos(2.0*pi*p.y/f.y);\n}\n\nfloat height(vec2 p)\n{\n    float l = length(p);\n    //return wave(p, vec2(40,40)) + wave(p, vec2(20,40));\n    return 1.0*(0.5*cos(-2.0*pi*l/10.0)+wave(p, vec2(20,20)));\n    //return texture(iChannel0, p*0.01).x - 0.5;\n}\n\nresult terrain_approximation_with_tiles(ivec2 v, vec3 l) // https://www.shadertoy.com/view/4cBfRR terrain approximation with tiles (jt)\n{\n    vec2 p = vec2(v);\n    vec2 o00 = vec2(0,0);\n    vec2 o01 = vec2(0,1);\n    vec2 o10 = vec2(1,0);\n    vec2 o11 = vec2(1,1);\n    vec2 o = vec2(0.5);\n    float h00 = height(p+o00);\n    float h01 = height(p+o01);\n    float h10 = height(p+o10);\n    float h11 = height(p+o11);\n    float h = height(p+o);\n    vec3 q00 = vec3(o00,h00);\n    vec3 q01 = vec3(o01,h01);\n    vec3 q10 = vec3(o10,h10);\n    vec3 q11 = vec3(o11,h11);\n    vec3 q = vec3(o,h);\n#ifdef FUSED_SHAPE\n    vec3 south = normalize(cross(q01-q,q00-q));\n    vec3 east = normalize(cross(q11-q,q01-q));\n    vec3 north = normalize(cross(q10-q,q11-q));\n    vec3 west = normalize(cross(q00-q,q10-q));\n\n    bool flag0 = dot(l.xy-0.5,normalize(vec2(1,1)))<0.0;\n    bool flag1 = dot(l.xy-0.5,normalize(vec2(1,-1)))<0.0;\n\n    // XXX not exact yet XXX\n    float d =\n        flag0\n        ?\n        flag1\n        ?\n        dot(south,l)-dot(south,q)\n        :\n        dot(west,l)-dot(west,q)\n        :\n        flag1\n        ?\n        dot(east,l)-dot(east,q)\n        :\n        dot(north,l)-dot(north,q);\n    //d = DIST_MAX;\n    d = min\n        (\n            d,\n            min\n            (\n                min\n                (\n                    min\n                    (\n                        line(l, q00, q),\n                        line(l, q01, q)\n                    ),\n                    min\n                    (\n                        line(l, q10, q),\n                        line(l, q11, q)\n                    )\n                ),\n                min\n                (\n                    min\n                    (\n                        line(l, q00, q01),\n                        line(l, q01, q11)\n                    ),\n                    min\n                    (\n                        line(l, q11, q10),\n                        line(l, q10, q00)\n                    )\n                )\n            )\n        );//-0.02;\n\n    d = max(d, box(l.xy-0.5, vec2(0.5))); // constrain to voxel column\n#else\n    float d =\n        min\n        (\n            min\n            (\n                triangle(l, q00, q01, q),\n                triangle(l, q01, q11, q)\n            ),\n            min\n            (\n                triangle(l, q11, q10, q),\n                triangle(l, q10, q00, q)\n            )\n        )-0.1;\n#endif\n    return result(vec3(1),d);\n    //return result(hash32(p),d-0.1);\n    //return result(vec3(0), DIST_MAX); // signal to skip this voxel\n}\n\nresult map(ivec2 v, vec3 l) // unit grid: voxel = float(position), local = fract(position)\n{\n    return terrain_approximation_with_tiles(v, l);\n}\n#ifdef HIGH_QUALITY\nresult map(vec3 p) // for correct ambient occlusion sample 2x2x2 voxels (slow!)\n{\n    // I think kastorp originally suggested to sample only 2x2x2 instead of 3x3x3, thanks!\n    result d = result(vec3(0), DIST_MAX);\n    ivec2 s = ivec2(step(0.5, fract(p.xy)));\n    ivec2 o;\n    for(o.y = s.y-1; o.y < s.y+1; o.y++)\n        for(o.x = s.x-1; o.x < s.x+1; o.x++)\n        {\n            result r = map(ivec2(floor(p.xy))+o, vec3(fract(p.xy)-vec2(o),p.z));\n            if(r.dist < d.dist)\n                d = r;\n        }\n    return d;\n}\n#else\nresult map(vec3 p)\n{\n    return map(ivec2(floor(p.xy)), vec3(fract(p.xy),p.z));\n}\n#endif\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal(vec3 p)\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return normalize(k.xyy*map(p + k.xyy*h).dist +\n                     k.yyx*map(p + k.yyx*h).dist +\n                     k.yxy*map(p + k.yxy*h).dist +\n                     k.xxx*map(p + k.xxx*h).dist);\n}\n\n// NOTE: Apparently sign fails on some systems! Thanks to spalmer for debugging this!\nvec2 sgn(vec2 v) // WORKAROUND FOR COMPILER ERROR on some systems\n{\n    return step(vec2(0), v) * 2.0 - 1.0;\n}\n\nresult trace(vec3 ro, vec3 rd, float t0, float t1) // ray-march sdf handling discontinuities between voxels  (jt)\n{\n    result h;\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++) // finite loop originally suggested by pyBlob to avoid stalling if ray parallel to surface just above EPSILON\n    {\n        vec3 p = ro + rd * t;\n        h = map(p);\n        if(h.dist < EPSILON)\n            return result(h.color, t);\n#ifdef VOXELIZE\n        // NOTE: An extra step per voxel, use if sdf discontinuous between voxels\n        //       Could make this conditional by prefixing sth. like if(voxel_changed) // suggested by spalmer, see variant below\n        // constrain step to voxels (voxel-snap ray-march plugin by jt, thanks to Shane for the idea!)\n        {\n            // NOTE: assuming unit grid\n            // sgn(rd)*0.5 are the walls in ray direction, fract(p) - 0.5 is center of voxel\n            vec2 sd = (sgn(rd.xy)*0.5 - (fract(p.xy) - 0.5))/rd.xy; // distances to voxel sides / walls\n            vec2 n = step(sd.xy, sd.yx); // component true if corresponding wall is nearest (at most one component true) NOTE: originally I used lessThanEqual, min from fb39ca4/kzy then switched to step, min by iq\n            float skip = dot(sd, n) + EPSILON; // distance to next voxel: sum up all components, weighted by the nearest flag (assuming only one component is true this selects the nearest component)\n            h.dist = min(h.dist, skip); // constrain step to at most next block to handle sdf discontinuities between voxels\n        }\n#endif\n        t += h.dist;\n    }\n\n    return result(h.color, t); // stop on running out of iterations\n    //return result(h.color, t1); // pass on running out of iterations\n}\n\n// NOTE: Don't forget to add +normal*EPSILON to the starting position\n//       to avoid artifacts caused by getting stuck in the surface\n//       due to starting at distance < EPSILON from the surface.\n//       (normal could be calculated here but that would most likely be redundant)\n//       Thanks to spalmer for pointing that out.\nfloat shadow(vec3 ro, vec3 rd, float t0, float t1)\n{\n    return trace(ro, rd, t0, t1).dist < t1 ? 0.0 : 1.0;\n}\n#ifdef HIGH_QUALITY\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow(vec3 ro, in vec3 rd, float t0, float t1, float k)\n{\n    float res = 1.0;\n    float ph = 1e20;\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++)\n    {\n        float h = map(ro + rd*t).dist;\n        if( h < EPSILON )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n#endif\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor ).dist;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\nfloat checker(vec2 p)\n{\n    return step(0.0, sin(p.x*pi)*sin(p.y*pi));\n}\n\nfloat checker(vec3 p)\n{\n    return step(0.0, sin(p.x*pi)*sin(p.y*pi)*sin(p.z*pi));\n}\n\nvec3 material(vec3 p)\n{\n    return vec3(1.0);\n    //return mix(vec3(0.25), vec3(0.75), checker(p*2.0+0.5));\n}\n\nvoid mainImage(out vec4 fragColor, vec2 I)\n{\n    float t = iTime/100.0+0.25;\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    I = (2.0 * I - R) / R.y; // concise scaling thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : pi/2.0+2.0 * pi * fract(t);\n    pitch = !demo ? pitch : mix(4.0/3.0,1.0,0.5+0.5* sin(tau*t)) * pi / 2.0;\n\n    vec3 ro = vec3(0.0, 0.0,-7.5);\n    vec3 rd = normalize(vec3(I.xy, 2.0));\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n    ro.z += 1.0;\n\n    //vec3 lightdir = normalize(vec3(1.0, 1.0, 1));\n    //vec3 lightdir = normalize(vec3(5.0, 1.0, 1));\n    //vec3 lightdir = normalize(vec3(mix(1.0,5.0,0.5+0.5*cos(tau*iTime/10.0)), 1.0*sin(tau*iTime/10.0), 1));\n    vec3 lightdir = normalize(vec3(cos(tau*t), sin(tau*t), 0.5+0.5* cos(tau*t)));\n\n    //vec3 sky_color = mix(vec3(0,0.5,0.5),vec3(0,0,1),abs(-rd.z));\n    vec3 sky_color = mix(vec3(0,0.25,0.5),vec3(0,0,1),abs(-rd.z));\n    vec3 color = vec3(1);\n    result r = trace(ro, rd, 0.0, DIST_MAX);\n    if(r.dist < DIST_MAX)\n    {\n        color *= r.color;\n        vec3 dst = ro + rd * r.dist;\n        vec3 n = normal(dst);\n\n        //color *= (n * 0.5 + 0.5);\n        color *= material(dst);\n\n        vec3 ambient = vec3(0.1);\n        float brightness = max(dot(lightdir, n), 0.0)*2.0;\n        if(brightness > 0.0)\n            brightness *= shadow(ro + rd * r.dist + n * 0.01, lightdir, 0.0, DIST_MAX);\n            //brightness *= softshadow(ro + rd * r.dist + n * 0.01, lightdir, 0.0, DIST_MAX, 20.0); // requires HIGH_QUALITY\n        color *= (ambient * calcAO(dst, n) + brightness);\n\n        if(brightness > 0.0)\n        {\n            float specular = pow(max(0.0, dot(n, normalize(-rd + lightdir))), 250.0);\n            color += specular;\n        }\n\n        //vec3 fog_color = vec3(0.2);\n        vec3 fog_color = sky_color;\n        color = mix(fog_color, vec3(color), exp(-pow(r.dist/20.0, 2.0))); // fog\n    }\n    else\n    {\n        color *= sky_color;\n\n        {\n            float d = max(0.0, dot(rd, lightdir));\n            float sun = 50.0*smoothstep(0.999, 1.000, d) + exp(-pow((1.0-d)*1000.0, 2.0)); // sun with halo\n            color += sun;\n        }\n    }\n\n    // dither to remove banding in the background\n    color += fract(sin(I.x*vec3(13,1,11)+I.y*vec3(1,7,5))*158.391832)/255.0; // iq\n\n    color = tanh(color); // roll-off overly bright colors\n    fragColor = vec4(color, 1);\n    fragColor = sqrt(fragColor); // approximate gamma\n}\n","name":"Image","description":"","type":"image"}]}