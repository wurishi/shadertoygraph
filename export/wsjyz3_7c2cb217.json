{"ver":"0.1","info":{"id":"wsjyz3","date":"1587088849","viewed":114,"name":"hindsight_reader","username":"Nedelstein","description":"hindsight reader shader","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise","gradient","parsons","hindsight"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float random1f(vec2 st){\n    return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.5453123);\n}\n\nfloat map(float v,float a,float b,float c,float d){\n    float nv=(v-a)/(b-a);\n    nv=pow(nv,3.);\n    float o=nv*(d-c)+c;\n    \n    return o;\n}\n\n   \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     vec2 uv=fragCoord/iResolution.xy;\n    uv=uv*2.-1.;\n    uv.y/=iResolution.x/iResolution.y;\n    \n    vec2 A=vec2(.151,-.2);\n    vec2 B=vec2(-.7,-.28);\n    vec2 C=vec2(.83,-.9);\n    vec2 D=vec2(1.,-.96);\n    vec2 E=vec2(.9,.79);\n    \n    vec2 F=vec2(.79,-.79);\n    \n    float k1=.7;// size\n    float k2=3.;// shape\n    \n    // warp domains\n    vec2 uvA=uv*vec2(.2,.1);\n    uvA.x+=sin(uv.y*4.+iTime)*.05;\n    vec2 uvB=uv*vec2(.4,.3);\n    uvB.y+=sin(uv.y*3.+iTime)*.15;\n    vec2 uvC=uv*vec2(.6,.8);\n    uvC.y+=sin(uv.x*4.+iTime)*.1;\n    vec2 uvD=uv*vec2(-1.2,-.9);\n    uvD.y+=sin(uv.x*11.+iTime)*.05;\n    vec2 uvE=uv*vec2(-1.1,.9);\n    uvE.x+=sin(uv.y*4.+iTime)*.1;\n    \n    vec2 uvF=uv*vec2(1.1,-.45);\n    uvF.x+=sin(uv.y*4.+iTime)*.1;\n    \n    // create shaped gradient\n    float dA=max(0.,1.-pow(distance(uvA,A)/k1,k2));\n    float dB=max(0.,1.-pow(distance(uvB,B)/k1,k2));\n    float dC=max(0.,1.-pow(distance(uvC,C)/k1,k2));\n    float dD=max(0.,1.-pow(distance(uvD,D)/k1,k2));\n    float dE=max(0.,1.-pow(distance(uvE,E)/k1,k2));\n    \n    float dF=max(0.,1.-pow(distance(uvF,F)/k1,k2));\n    \n    // smooth in, out\n    dA=smoothstep(0.,1.3,dA);\n    dB=smoothstep(0.,1.,dB);\n    dC=smoothstep(0.,1.,dC);\n    dD=smoothstep(0.,1.,dD);\n    dE=smoothstep(0.,1.,dE);\n    \n    dF=smoothstep(0.,1.,dF);\n    \n    // define colors\n    \n    vec3 blue=vec3(35.,122.,144.)/255.;\n    vec3 pink=vec3(255.,122.,114.)/255.;\n    vec3 green=vec3(44.,162.,148.)/255.;\n    vec3 black=vec3(20.,10.,0.)/255.;\n    vec3 orange=vec3(255.,78.,0.)/255.;\n    \n    vec3 vanta=vec3(-25,-25,-25)/255.;\n    \n    // lay in color blobs\n    vec3 color=vec3(0.);\n    color=mix(color,blue,dA);\n    color=mix(color,black,dC);\n    color=mix(color,pink,dB);\n    color=mix(color,green,dD);\n    // color=mix(color,orange,dE);\n    \n    color=mix(color,pink,dF);\n    \n    // add noise\n    color+=vec3(\n        random1f(uv),\n        random1f(uv+1.),\n        random1f(uv+2.)\n    )*.2;\n    // Output to screen\n    fragColor = vec4(color,1.);\n}","name":"Image","description":"","type":"image"}]}