{"ver":"0.1","info":{"id":"3lffWX","date":"1597836872","viewed":1011,"name":"Oceanic Storm","username":"jdspugh","description":"In the ocean at night. Impending moon.\n\n(pause and play if the sound effects don't work for you)","likes":24,"published":1,"flags":64,"usePreview":1,"tags":["ocean","glass","rain","drop","storm","droplets","drops","raining"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Mt23WG","filepath":"https://soundcloud.com/monie-thach/ocean-thunderstorm-sounds-for-sleeping-relaxing-thunder-rain-storm-waves-sea-lightning-ambience","previewfilepath":"https://soundcloud.com/monie-thach/ocean-thunderstorm-sounds-for-sleeping-relaxing-thunder-rain-storm-waves-sea-lightning-ambience","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0},{"id":"Ml23WG","filepath":"https://soundcloud.com/arimnaes/lightning-storm","previewfilepath":"https://soundcloud.com/arimnaes/lightning-storm","type":"musicstream","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// -----\n// drops\n// -----\n// drops are based on this shader:\n//\n// Heartfelt - by Martijn Steinrucken aka BigWings - 2017\n// Email:countfrolic@gmail.com Twitter:@The_ArtOfCode\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n#define S(a, b, t) smoothstep(a, b, t)\n\nvec3 N13(float p) {\n //  from DAVE HOSKINS\n vec3 p3 = fract(vec3(p) * vec3(.1031,.11369,.13787));\n p3 += dot(p3, p3.yzx + 19.19);\n return fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\n\nvec4 N14(float t) {\n  return fract(sin(t*vec4(123., 1024., 1456., 264.))*vec4(6547., 345., 8799., 1564.));\n}\n\nfloat N(float t) {\n  return fract(sin(t*12345.564)*7658.76);\n}\n\nfloat Saw(float b, float t) {\n\treturn S(0., b, t)*S(1., b, t);\n}\n\nvec2 DropLayer2(vec2 uv, float t) {\n  vec2 UV = uv;\n    \n  uv.y += t*0.75;\n  vec2 a = vec2(6., 1.);\n  vec2 grid = a*2.;\n  vec2 id = floor(uv*grid);\n    \n  float colShift = N(id.x); \n  uv.y += colShift;\n    \n  id = floor(uv*grid);\n  vec3 n = N13(id.x*35.2+id.y*2376.1);\n  vec2 st = fract(uv*grid)-vec2(.5, 0);\n    \n  float x = n.x-.5;\n    \n  float y = UV.y*20.;\n  float wiggle = sin(y+sin(y));\n  x += wiggle*(.5-abs(x))*(n.z-.5);\n  x *= .7;\n  float ti = fract(t+n.z);\n  y = (Saw(.85, ti)-.5)*.9+.5;\n  vec2 p = vec2(x, y);\n    \n  float d = length((st-p)*a.yx);\n    \n  float mainDrop = S(.4, .0, d);\n    \n  float r = sqrt(S(1., y, st.y));\n  float cd = abs(st.x-x);\n  float trail = S(.23*r, .15*r*r, cd);\n  float trailFront = S(-.02, .02, st.y-y);\n  trail *= trailFront*r*r;\n    \n  y = UV.y;\n  float trail2 = S(.2*r, .0, cd);\n  float droplets = max(0., (sin(y*(1.-y)*120.)-st.y))*trail2*trailFront*n.z;\n  y = fract(y*10.)+(st.y-.5);\n  float dd = length(st-vec2(x, y));\n  droplets = S(.3, 0., dd);\n  float m = mainDrop+droplets*r*trailFront;\n    \n  return vec2(m, trail);\n}\n\nfloat StaticDrops(vec2 uv, float t) {\n  uv *= 40.;\n    \n  vec2 id = floor(uv);\n  uv = fract(uv)-.5;\n  vec3 n = N13(id.x*107.45+id.y*3543.654);\n  vec2 p = (n.xy-.5)*.7;\n  float d = length(uv-p);\n    \n  float fade = Saw(.025, fract(t+n.z));\n  float c = S(.3, 0., d)*fract(n.z*10.)*fade;\n  return c;\n}\n\nvec2 Drops(vec2 uv, float t, float l0, float l1, float l2) {\n  float s = StaticDrops(uv, t)*l0; \n  vec2 m1 = DropLayer2(uv, t)*l1;\n  vec2 m2 = DropLayer2(uv*1.85, t)*l2;\n    \n  float c = s+m1.x+m2.x;\n  c = S(.3, 1., c);\n    \n  return vec2(c, max(m1.y*l0, m2.y*l1));\n}\n\nvoid mainDrops( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (fragCoord.xy-.5*iResolution.xy) / iResolution.y;\n  vec2 UV = fragCoord.xy/iResolution.xy;\n  vec3 M = iMouse.xyz/iResolution.xyz;\n  float T = 100.0 + iTime+M.y*2.; // make drop move up/down faster/slower if we move the \"glass\" up/down, like in reality\n    \n  float t = T*.2;\n    \n  float rainAmount = 1.0;\n  float maxBlur = mix(3., 6., rainAmount);\n  float minBlur = 1.0;\n    \n  float story = 0.;\n\n  float zoom = -0.8;\n  uv *= .7+zoom*.3;\n  UV = (UV-.5)*(.9+zoom*.1)+.5;\n    \n  float staticDrops = S(-.5, 1., rainAmount)*2.;\n  float layer1 = S(.25, .75, rainAmount);\n  float layer2 = S(.0, .5, rainAmount);\n    \n    \n  vec2 c = Drops(uv, t, staticDrops, layer1, layer2);\n  vec2 e = vec2(.001, 0.);\n  float cx = Drops(uv+e, t, staticDrops, layer1, layer2).x;\n  float cy = Drops(uv+e.yx, t, staticDrops, layer1, layer2).x;\n  vec2 n = vec2(cx-c.x, cy-c.x); // expensive normals\n    \n  float focus = mix(maxBlur-c.y, minBlur, S(.1, .2, c.x));\n  vec3 col = textureLod(iChannel0, UV+n, focus).rgb;\n    \n  // post processing\n  t = (T+3.)*.5;\t\t\t\t\t\t\t\t\t\t// make time sync with first lightning\n  float colFade = sin(t*.2)*.5+.5+story;\n  //col *= mix(vec3(1.), vec3(.8, .9, 1.3), colFade);\t// subtle color shift\n  float fade = S(0., 10., T);\t\t\t\t\t\t\t// fade in at the start\n  float lightning = sin(t*sin(t*10.));\t\t\t\t\t// lighting flicker\n  lightning *= pow(max(0., sin(t+sin(t))), 10.);\t\t// lightning flash\n  col *= 1.+lightning*fade*mix(1., .1, story*story);\t// composite lightning\n  col *= 1.-dot(UV-=.5, UV);\t\t\t\t\t\t\t// vignette\n  col *= fade;\t\t\t\t\t\t\t\t\t\t\t// composite start and end fade\n    \n  fragColor = vec4(col, 1.);\n}\n// -----\n\n\n// -----\n// waves\n// -----\n// waves are based on this shader:\n// \n// Very fast procedural ocean by afl_ext\n//\n#define DRAG_MULT 0.048\n#define ITERATIONS_RAYMARCH 13\n#define ITERATIONS_NORMAL 48\n\n#define Mouse (iMouse.xy / iResolution.xy)\n#define Resolution (iResolution.xy)\n#define Time (iTime)\n\nvec2 wavedx(vec2 position, vec2 direction, float speed, float frequency, float timeshift) {\n  float x = dot(direction, position) * frequency + timeshift * speed;\n  float wave = exp(sin(x) - 1.0);\n  float dx = wave * cos(x);\n  return vec2(wave, -dx);\n}\n\nfloat getwaves(vec2 position, int iterations){\n  float iter = 10.0;\n  float phase = 6.0;\n  float speed = 0.5;\n  float weight = 1.0;\n  float w = 0.0;\n  float ws = 0.0;\n  for(int i=0;i<iterations;i++){\n    vec2 p = vec2(sin(iter), cos(iter));\n    vec2 res = wavedx(position, p, speed, phase, Time);\n    position += normalize(p) * res.y * weight * DRAG_MULT;\n    w += res.x * weight;\n    iter += 12.0;\n    ws += weight;\n    weight = mix(weight, 0.0, 0.2);\n    phase *= 1.18;\n    speed *= 1.07;\n  }\n  return w / ws;\n}\n\nfloat raymarchwater(vec3 camera, vec3 start, vec3 end, float depth){\n  vec3 pos = start;\n  float h = 0.0;\n  float hupper = depth;\n  float hlower = 0.0;\n  vec2 zer = vec2(0.0);\n  vec3 dir = normalize(end - start);\n  for(int i=0;i<318;i++){\n    h = getwaves(pos.xz * 0.1, ITERATIONS_RAYMARCH) * depth - depth;\n    if(h + 0.01 > pos.y) {\n      return distance(pos, camera);\n    }\n    pos += dir * (pos.y - h);\n  }\n  return -1.0;\n}\n\nfloat H = 0.0;\nvec3 normal(vec2 pos, float e, float depth){\n  vec2 ex = vec2(e, 0);\n  H = getwaves(pos.xy * 0.1, ITERATIONS_NORMAL) * depth;\n  vec3 a = vec3(pos.x, H, pos.y);\n  return normalize(cross(normalize(a-vec3(pos.x - e, getwaves(pos.xy * 0.1 - ex.xy * 0.1, ITERATIONS_NORMAL) * depth, pos.y)), \n                         normalize(a-vec3(pos.x, getwaves(pos.xy * 0.1 + ex.yx * 0.1, ITERATIONS_NORMAL) * depth, pos.y + e))));\n}\n\nmat3 rotmat(vec3 axis, float angle) {\n  axis = normalize(axis);\n  float s = sin(angle);\n  float c = cos(angle);\n  float oc = 1.0 - c;\n  return mat3(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s, \n  oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s, \n  oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c);\n}\n\nvec3 getRay(vec2 uv){\n  uv = (uv * 2.0 - 1.0) * vec2(Resolution.x / Resolution.y, 1.0);\n  vec3 proj = normalize(vec3(uv.x, uv.y, 1.0) + vec3(uv.x, uv.y, -1.0) * pow(length(uv), 2.0) * 0.05);\t\n  if(Resolution.x < 400.0) return proj;\n    \n    vec2 mouse = vec2(0.5,0.5); // use these default mouse cooridnates so we're not staring at into the water before clicking\n    if (0.0 != Mouse.x) {mouse.x = Mouse.x;} // follow mouse if not at default position\n    if (0.0 != Mouse.y) {mouse.y = Mouse.y;} // follow mouse if not at default position\n  \n  vec3 ray = rotmat(vec3(0.0, -1.0, 0.0), 3.0 * (mouse.x * 2.0 - 1.0)) * rotmat(vec3(1.0, 0.0, 0.0), 1.5 * (mouse.y * 2.0 - 1.0)) * proj;\n  return ray;\n}\n\nfloat intersectPlane(vec3 origin, vec3 direction, vec3 point, vec3 normal)\n{ \n  return clamp(dot(point - origin, normal) / dot(direction, normal), -1.0, 9991999.0); \n}\n\nvec3 extra_cheap_atmosphere(vec3 raydir, vec3 sundir){\n  sundir.y = max(sundir.y, -0.07);\n  float special_trick = 1.0 / (raydir.y * 1.0 + 0.1);\n  float special_trick2 = 1.0 / (sundir.y * 11.0 + 1.0);\n  float raysundt = pow(abs(dot(sundir, raydir)), 2.0);\n  float sundt = pow(max(0.0, dot(sundir, raydir)), 8.0);\n  float mymie = sundt * special_trick * 0.2;\n  vec3 suncolor = mix(vec3(1.0), max(vec3(0.0), vec3(1.0) - vec3(5.5, 13.0, 22.4) / 22.4), special_trick2);\n  vec3 bluesky= vec3(5.5, 13.0, 22.4) / 22.4 * suncolor;\n  vec3 bluesky2 = max(vec3(0.0), bluesky - vec3(5.5, 13.0, 22.4) * 0.002 * (special_trick + -6.0 * sundir.y * sundir.y));\n  bluesky2 *= special_trick * (0.24 + raysundt * 0.24);\n  return bluesky2 * (1.0 + 1.0 * pow(1.0 - raydir.y, 3.0)) + mymie * suncolor;\n} \n\nvec3 getatm(vec3 ray){\n  return extra_cheap_atmosphere(ray, normalize(vec3(1.0))) * 0.5;\n}\n\nfloat sun(vec3 ray){\n  vec3 sd = normalize(vec3(1.0));   \n  return pow(max(0.0, dot(ray, sd)), 64.0) * 1100.0; // <moon smaller>) * <moon bigger>;\n}\n\nvec3 aces_tonemap(vec3 color){\t\n  mat3 m1 = mat3(\n    0.59719, 0.07600, 0.02840,\n    0.35458, 0.90834, 0.13383,\n    0.04823, 0.01566, 0.83777\n  );\n  mat3 m2 = mat3(\n    1.60475, -0.10208, -0.00327,\n    -0.53108,  1.10813, -0.07276,\n    -0.07367, -0.00605,  1.07602\n  );\n  vec3 v = m1 * color;    \n  vec3 a = v * (v + 0.0245786) - 0.000090537;\n  vec3 b = v * (0.983729 * v + 0.4329510) + 0.238081;\n  return pow(clamp(m2 * (a / b), 0.0, 1.0), vec3(1.0 / 2.2));\t\n}\n\nvoid mainWaves(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = fragCoord.xy / iResolution.xy;\n \t\n  float waterdepth = 2.1;\n  vec3 wfloor = vec3(0.0, -waterdepth, 0.0);\n  vec3 wceil = vec3(0.0, 0.0, 0.0);\n  vec3 orig = vec3(0.0, 0.0, 0.0); // (<>, <viewer's height above water>, <>)\n  vec3 ray = getRay(uv);\n  float hihit = intersectPlane(orig, ray, wceil, vec3(0.0, 1.0, 0.0));\n  if(ray.y >= -0.01){\n    // above the horizon\n    vec3 C = getatm(ray) * 1.5 + sun(ray); // <> * <horizon lightness> + <>\n    C = aces_tonemap(C);\n    fragColor = vec4(C,1.0);   \n  } else {\n    // below the horizon\n    float lohit = intersectPlane(orig, ray, wfloor, vec3(0.0, 1.0, 0.0));\n    vec3 hipos = orig + ray * hihit;\n    vec3 lopos = orig + ray * lohit;\n\tfloat dist = raymarchwater(orig, hipos, lopos, waterdepth);\n    vec3 pos = orig + ray * dist;\n\n\tvec3 N = normal(pos.xz, 0.001, waterdepth); // (<>, <water roughness>, <>)\n    vec2 velocity = N.xz * (1.0 - N.y);\n    N = mix(vec3(0.0, 1.0, 0.0), N, 1.0 / (dist * dist * 0.01 + 1.0));\n    vec3 R = reflect(ray, N);\n    float fresnel = (0.04 + (1.0-0.04)*(pow(1.0 - max(0.0, dot(-N, ray)), 5.0)));\n\t\n    vec3 C = fresnel * getatm(R) * 2.0 + fresnel * sun(R);\n    //tonemapping\n    C = aces_tonemap(C);\n    \n\tfragColor = vec4(C,1.0);\n  }\n}\n// -----\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  // waves\n  vec4 fragColorWaves;\n  mainWaves(fragColorWaves, fragCoord); \n    \n  // drops\n  vec4 fragColorDrops;\n  mainDrops(fragColorDrops, fragCoord);\n    \n  // combine\n  fragColor = fragColorWaves - fragColorDrops;\n    \n  // make b&w\n  //fragColor = vec4(fragColor.x, fragColor.x, fragColor.x, fragColor.x);\n  fragColor = vec4(fragColor.y, fragColor.y, fragColor.y, fragColor.y);\n  //fragColor = vec4(fragColor.z, fragColor.z, fragColor.z, fragColor.z);\n}","name":"Image","description":"","type":"image"}]}