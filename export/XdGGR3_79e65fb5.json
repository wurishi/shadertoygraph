{"ver":"0.1","info":{"id":"XdGGR3","date":"1455477275","viewed":613,"name":"Gold nugget","username":"MMGS","description":"Updated: Added a bloom effect\n*Modified*\nfrom Earth Rock to Earth Gold\nOriginal by yibojiang : https://www.shadertoy.com/view/ldKGzK","likes":22,"published":1,"flags":32,"usePreview":0,"tags":["gold","nugget"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"///////// Bloom by\n// source: https://www.shadertoy.com/view/lsXGWn  by use Seven\n//\n\nconst float blurSize = 1.0/512.0;\nconst float intensity = 0.35;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec4 sum = vec4(0);\n   vec2 texcoord = fragCoord.xy/iResolution.xy;\n   int j;\n   int i;\n\n   //thank you! http://www.gamerendering.com/2008/10/11/gaussian-blur-filter-shader/ for the \n   //blur tutorial\n   // blur in y (vertical)\n   // take nine samples, with the distance blurSize between them\n   sum += texture(iChannel0, vec2(texcoord.x - 4.0*blurSize, texcoord.y)) * 0.05;\n   sum += texture(iChannel0, vec2(texcoord.x - 3.0*blurSize, texcoord.y)) * 0.09;\n   sum += texture(iChannel0, vec2(texcoord.x - 2.0*blurSize, texcoord.y)) * 0.12;\n   sum += texture(iChannel0, vec2(texcoord.x - blurSize, texcoord.y)) * 0.15;\n   sum += texture(iChannel0, vec2(texcoord.x, texcoord.y)) * 0.16;\n   sum += texture(iChannel0, vec2(texcoord.x + blurSize, texcoord.y)) * 0.15;\n   sum += texture(iChannel0, vec2(texcoord.x + 2.0*blurSize, texcoord.y)) * 0.12;\n   sum += texture(iChannel0, vec2(texcoord.x + 3.0*blurSize, texcoord.y)) * 0.09;\n   sum += texture(iChannel0, vec2(texcoord.x + 4.0*blurSize, texcoord.y)) * 0.05;\n\t\n\t// blur in y (vertical)\n   // take nine samples, with the distance blurSize between them\n   sum += texture(iChannel0, vec2(texcoord.x, texcoord.y - 4.0*blurSize)) * 0.05;\n   sum += texture(iChannel0, vec2(texcoord.x, texcoord.y - 3.0*blurSize)) * 0.09;\n   sum += texture(iChannel0, vec2(texcoord.x, texcoord.y - 2.0*blurSize)) * 0.12;\n   sum += texture(iChannel0, vec2(texcoord.x, texcoord.y - blurSize)) * 0.15;\n   sum += texture(iChannel0, vec2(texcoord.x, texcoord.y)) * 0.16;\n   sum += texture(iChannel0, vec2(texcoord.x, texcoord.y + blurSize)) * 0.15;\n   sum += texture(iChannel0, vec2(texcoord.x, texcoord.y + 2.0*blurSize)) * 0.12;\n   sum += texture(iChannel0, vec2(texcoord.x, texcoord.y + 3.0*blurSize)) * 0.09;\n   sum += texture(iChannel0, vec2(texcoord.x, texcoord.y + 4.0*blurSize)) * 0.05;\n\n \t\tvec4 col ;\n    \ttexcoord.xy*=1.005;texcoord.x-=.005;texcoord.y-=.005;\n    if(texture(iChannel0,texcoord).w >0.5) col =sum + texture(iChannel0, texcoord);\n    else col = sum*.2+ texture(iChannel0, texcoord);\n\t   fragColor = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define FBM_Iteration 6\n#define pi 3.14159\n\nvec3 hash3(vec3 p){\n    p=vec3( dot( p, vec3(127.1, 311.7,121.1) ),\n            dot( p, vec3(269.5, 183.3,234.5) ),\n            dot( p, vec3(629.5, 43.3,32.1) ) );\n\n    return -1.0+2.0*fract(sin(p)*43758.5453123 );\n}\n\nvec3 cubemap( sampler2D sam, in vec3 d )\n{\n    vec3 n = abs(d);\n\n#if 0\n    // sort components (small to big)    \n    float mi = min(min(n.x,n.y),n.z);\n    float ma = max(max(n.x,n.y),n.z);\n    vec3 o = vec3( mi, n.x+n.y+n.z-mi-ma, ma );\n    return texture( sam, .1*o.xy/o.z ).xyz;\n#else\n    vec2 uv = (n.x>n.y && n.x>n.z) ? d.yz/d.x: \n              (n.y>n.x && n.y>n.z) ? d.zx/d.y:\n                                     d.xy/d.z;\n    return texture( sam, uv ).xyz;\n    \n#endif    \n}\nfloat perlin_noise3(vec3 p){\n \n    /*\n     not perlin noise anymore*/\n    \n    vec3 tex = cubemap(iChannel1,p);\n    return length(p+tex*.5)*0.5;\n}\n\n\nfloat fbm3(vec3 p){\n    float n=0.0;\n    n=perlin_noise3(p);\n\n    float a=0.1;\n    for (int i=0;i<FBM_Iteration;i++){\n        n+=a*perlin_noise3(p);\n        p=p*2.0;\n        a=a*0.5;\n    }\n    return n;\n}\n\nfloat sphere(vec3 p,float r){\n    //+cos(iTime+p.x*5.)*0.1+sin(iTime+p.z*5.)*0.1\n       vec3 tex = cubemap(iChannel1,p);\n    return length(p+cos(p.x*5.)*0.07+sin(p.z*5.)*0.05)- (r+ 0.1*( 0.5 + ( 0.5 * fbm3( p * 5.0  )  ) ) ) ;\n}\n\n\nvec2 map(vec3 p){\n    vec2 res=vec2(0.0,0.4);\n    float planeCol=0.4;\n    float sphereCol=14.3;\n\n    res=vec2( sphere(p-vec3(0.0,0.5,0.0),0.5), sphereCol  ) ;\n    return res;\n}\n\nvec3 caclNormal(vec3 p){\n    vec3 eps=vec3(0.001,0.0,0.0);\n    return normalize( vec3(\n            map(p+eps.xyy).x- map(p-eps.xyy).x,\n            map(p+eps.yxy).x- map(p-eps.yxy).x,\n            map(p+eps.yyx).x- map(p-eps.yyx).x ) );\n}\n\nmat3 rotate(float an){\n    return mat3(cos(an),0,-sin(an),\n                0,1,0,\n                sin(an),0,cos(an)\n    );\n}\n\nconst float precis=0.002;\nvec2 raymarch(in vec3 ro, in vec3 rd){\n    float tmin=1.0;\n    float tmax=20.0;\n    \n    float t=tmin;\n    float m=-1.0;\n    \n    for(int i=0;i<100;i++){\n        vec2 res=map(ro+rd*t);\n        if (res.x<precis || t>tmax) break;\n        \n        t+=res.x*0.7;\n        m=res.y;\n    }\n    \n    if(t>tmax) m=-1.0;\n    return vec2(t,m);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv=fragCoord.xy / iResolution.xy;\n\n    vec2 p=uv-vec2(0.5);\n\n\tp.y=p.y*iResolution.y/iResolution.x;\n    float precis=0.01;\n\n    float angle=0.2*iTime;\n\n    float watchDist=3.0;\n    vec3 pos= vec3(watchDist* sin(angle),0.5, -watchDist* cos(angle));\n\n    vec3 ro=pos;\n    vec3 rd=normalize(vec3(p.x,p.y,1.0) );\n    \n\n    rd=rd*rotate(angle);\n\n    \n    vec3 amb=vec3(0.11,0.1,0.13);\n    vec3 finalCol=vec3(1.0);\n    //finalCol=texture(iChannel0,uv).xyz;\n    vec2 res=raymarch(ro,rd);\n    float t=res.x;\n    float m=res.y;\n     float specular;\n    vec3 bgCol=finalCol;\n    if (m>-0.5){\n        //directional light\n        vec3 lig=normalize(vec3(.0,-1.0,0.0));\n        vec3 hit=ro+rd*t;\n        vec3 nor=caclNormal(hit);\n\n        vec3 resCol=1.0 * sin( vec3(0.06,0.08,0.1)* res.y );\n\n        \n        float diffuse=1.0*max(0.0,dot(-lig,nor) );\n        vec3 ref=reflect(-rd,nor);\n        vec3 h=normalize(-lig-rd);\n        specular=1.0*pow(max(0.0,dot(h, nor) ),40.0 );\n        \n        \n\n        finalCol=vec3(1.,215./255.,0.)*texture(iChannel0,reflect(nor,rd)).xyz\n            +resCol*(diffuse+specular-0.6)*0.6 +amb*2.;\n        \n        //float edge = smoothstep(0., 0.2, dot(hit, nor));\n\t\t//finalCol= mix(bgCol, finalCol, edge);\n\n\n    }\n    else{\n\n        vec3 bghit=ro-rd*100.0;\n        finalCol=texture (iChannel0,-bghit).xyz;\n    }\n\n\n    fragColor = vec4(finalCol.xyz,specular);\n}\n","name":"Buf A","description":"","type":"buffer"}]}