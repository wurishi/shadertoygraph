{"ver":"0.1","info":{"id":"dscGz8","date":"1676961442","viewed":193,"name":"Dot Matrix Test","username":"Symmetries","description":"printer dot matrix test","likes":2,"published":1,"flags":2,"usePreview":0,"tags":["dotmatrix"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float dx = 0.02;\n    vec2 st_r = uv;\n    vec2 st_g = uv;\n    vec2 st_b = uv;\n    st_r /= dx;\n    st_g /= dx;\n    st_b /= dx;\n    \n    vec2 p_r = 0.1 * iTime * vec2(1., 2.);\n    vec2 p_g = 0.1 * iTime * vec2(3., 2.);\n    st_r += p_r;\n    st_g += p_g;\n    \n    st_r = floor(st_r);\n    st_g = floor(st_g);\n    st_b = floor(st_b);\n    \n    st_r -= p_r;\n    st_g -= p_g;\n    st_r *= dx;\n    st_g *= dx;\n    st_b *= dx;\n    vec4 c_r = texture(iChannel0, st_r);\n    vec4 c_g = texture(iChannel0, st_g);\n    vec4 c_b = texture(iChannel0, st_b);\n    vec3 radius = 1.0 - vec3(c_r.r, c_g.g, c_b.b);\n    \n    float r = distance(st_r + dx/2., uv) > radius.r / 2. * dx ? 1.0 : 0.0;\n    float g = distance(st_g + dx/2., uv) > radius.g / 2. * dx ? 1.0 : 0.0;\n    float b = distance(st_b + dx/2., uv) > radius.b / 2. * dx ? 1.0 : 0.0;\n    // sample texture and output to screen\n    //fragColor = texture(iChannel0, uv);\n    fragColor = vec4(r, g, b, 1.);\n}","name":"Image","description":"","type":"image"}]}