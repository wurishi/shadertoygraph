{"ver":"0.1","info":{"id":"mss3Wr","date":"1666012971","viewed":155,"name":"Fluid Simulation Using Noise","username":"Plati","description":"This is a quit cheap fluid simulation using some noise sampling. It's using 4 samples average dispersion between the samples, temporal dispersion between the buffer and current frame, and curl for the interaction of the waves. Sample count can be changed.","likes":10,"published":1,"flags":32,"usePreview":1,"tags":["noise","fluid","fluidsimulation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// created by Ronny Mühle (Plati) - 2022\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// physically not correct fluid simulation using curl, dispersion and noise sampling\n// it can be used with a 2-axis blue noise to reduce the sample count\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // DISPLAY WATER REFRACTION\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float density = 0.0;\n    density += (texture(iChannel0, uv).y - 0.5) - (texture(iChannel0, uv + vec2(0.0, 0.01)).y - 0.5);\n    density += (texture(iChannel0, uv).x - 0.5) - (texture(iChannel0, uv + vec2(0.01, 0.0)).x - 0.5);\n    \n    float flow_speed = length(texture(iChannel0, uv).xy * 2.0 - 1.0);\n    \n    vec3 color_out = texture(iChannel1, uv - (texture(iChannel0, uv).xy - 0.5) * 0.2 ).xyz;\n\n    color_out += vec3(density);\n    color_out += vec3(flow_speed) * vec3(0.5, 0.7, 1.0) * 0.5;\n    \n    fragColor = vec4(vec3(color_out),1.0);\n    \n    // DISPLAY FLOW MAP\n    //fragColor = vec4(texture(iChannel0, uv).xyz, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":2,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// created by Ronny Mühle (Plati) - 2022\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// physically not correct fluid simulation using curl, dispersion and noise sampling\n// it can be used with a 2-axis blue noise to reduce the sample count\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = fragCoord/iResolution.xy;\n   vec4 mouse = iMouse.xyzw;\n   \n   // FLUID BEHAVIOR\n   int sample_count = 1;\n   float sample_offset = 0.004;\n   float sample_modifier = 3.5;\n   float energy_loss = 0.995;\n   \n   // FLOW INJECTION\n   vec3 flow_out;\n   //float flow_input_mask = pow(texture(iChannel1, uv).x, 10.0);\n   float flow_input_mask = smoothstep(0.03, 0.02, length( uv.xy - iMouse.xy / iResolution.xy ) );\n   vec2 flow_input_vector = vec2(sin(iTime * 5.0), 2.0) * 0.5 + 0.5;\n   flow_out.xy = (flow_input_vector * flow_input_mask);\n   \n   // FLOW COMPUTE\n   vec2 combined = vec2(0.0);\n   for(int i=0; i < sample_count; ++i)\n   {\n       // NORMALIZED NOISE VECTOR, MOVED BY TIME\n       vec2 noise_sample = texture(iChannel2, (fragCoord / 256.0) + iTime * 1.0 + vec2(float(i) * 0.01,0.0) ).xy * 2.0 - 1.0;\n       // SAMPLING OFFSET BASE ON FLOW\n       vec2 s_base = (texture(iChannel0, uv ).xy * 2.0 - 1.0) * sample_offset;\n       // 3 SAMPLES WITH RANDOM NOISE DIRECTION\n       vec2 s0 = texture(iChannel0, uv - s_base).xy * 2.0 - 1.0;\n       vec2 s1 = texture(iChannel0, uv + noise_sample * sample_offset - s_base ).xy * 2.0 - 1.0;\n       vec2 s2 = texture(iChannel0, uv + noise_sample * sample_offset * 2.0 - s_base * sample_modifier ).xy * 2.0 - 1.0;\n       // CURL AND DISPERSION\n       vec2 curl = (s1 - (s2 - s1));\n       vec2 disp = ((s1 + s2) * 0.5);\n       // COMBINED AVERAGED\n       combined += curl * 0.45 + disp * 0.4 + s0 * 0.15; // SUM MUST BE 1\n   }\n   \n   combined /= float(sample_count);\n   combined *= energy_loss;\n   combined = combined * 0.5 + 0.5;\n   \n   flow_out.xy += combined * (1.0 - flow_input_mask);\n   \n   // SET WINDOW COLOR TO 0.5 ON START\n   if(iFrame == 1) {\n       flow_out.xy = vec2(0.5);\n   };\n                   \n   fragColor = vec4(flow_out,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}