{"ver":"0.1","info":{"id":"3slcWN","date":"1584819282","viewed":1410,"name":"Oskar Stålberg every-other-pixel","username":"TomF","description":"An illustration of (what I think is) the maths behind Oskar Stålberg's clever \"every other texel is a line\" technique as shown in this tweet of his:\nhttps://twitter.com/OskSta/status/1241096929490149376","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["texturesampling","toonshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// An illustration of the maths behind\n// Oskar Stålberg's clever \"every other texel is a line\" technique as shown in this tweet of his:\n// https://twitter.com/OskSta/status/1241096929490149376\n\n// Note - I just did this from the tweet, I have not verified the maths is actually what Oskar is doing!\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time-varying \"line width\" for illustration\n    float width = fract ( iTime * 0.2 );\n    width *= 1.5f;\n    if ( width > 0.5 )\n    {\n        width = 1.0 - width;\n    }\n    width = max ( width, 0.05 );\n    \n    // Imagine a 16x16 texture (actually 32 texels - 16 big, 16 small)\n    vec2 uvScale = uv * 16.0;\n    \n    vec2 uvFrac = fract(uvScale);\n    vec2 uvWhole = uvScale-uvFrac;\n    vec2 uvNewFrac;\n    uvNewFrac.x = uvFrac.x > width ? 0.0 : 0.5;\n    uvNewFrac.y = uvFrac.y > width ? 0.0 : 0.5;\n    vec2 uvNew = uvWhole + uvNewFrac;\n    \n    // Scale down to 512x512 actual texture size.\n    // The 2.0 is because each \"pixel\" is two texels - the \"body\" and the \"line\"\n    uvNew *= ( 2.0 / 512.0 );\n        \n    vec4 col = texture ( iChannel0, uvNew );\n\n    // Output to screen\n    fragColor = vec4(col.xyz,1.0);\n}","name":"Image","description":"","type":"image"}]}