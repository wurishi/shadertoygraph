{"ver":"0.1","info":{"id":"DdKcz3","date":"1696412330","viewed":52,"name":"Filter -- Amplitude","username":"Nieb","description":"A filter to level off values above a threshold.\n\nThis example is of a landscape top surface (green) with a depth offset to the bottom bottom surface (red).\nThe bottom surface is then filtered (yellow) to fill in mountains above a threshold.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["filter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n#define INPUT_MOUSE 1\n#define FILTER_VARIATION 2\n#define PARAMETER_VISUALIZATION 1\n\n\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nconst float ViewSizY =  256.0;\n\nconst float ViewMinY = -128.0;\nconst float ViewMaxY =  128.0;\n\nconst float LsDepth = 16.0;\n\nfloat Filter_ThresholdY = -16.0;\nfloat Filter_Multiplier =   0.35;\n\n\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n#if FILTER_VARIATION == 2\n\n    float Filter(float x, float ThresholdY, float Multiplier) {\n        float dX = x - ThresholdY;\n        float blend = 1.0/(1.0 + pow(1.06,-dX*1.06));\n        return ((dX > 0.0) ? ThresholdY + mix(dX, dX*Multiplier, blend) : x);\n    }\n\n#elif FILTER_VARIATION == 1\n\n    float Filter(float x, float ThresholdY, float Multiplier) {\n        float dX = x - ThresholdY;\n        float blend = dX / abs(ThresholdY-ViewMaxY);\n        return ((dX > 0.0) ? ThresholdY + dX*Multiplier*blend : x);\n    }\n\n#else\n\n    float Filter(float x, float ThresholdY, float Multiplier) {\n        float dX = x - ThresholdY;\n        return ((dX > 0.0) ? ThresholdY + dX*Multiplier : x);\n    }\n\n#endif\n\n\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float ViewAspect = iResolution.x/iResolution.y;\n    float ViewSizX = ViewSizY * ViewAspect;\n\n    // Center of screen = (0,0)\n    vec2 ScrnPos = fragCoord.xy/iResolution.xy - 0.5;\n    ScrnPos *= vec2(ViewSizX, ViewSizY);\n\n#if INPUT_MOUSE\n    if (iMouse.x > 0.5) {\n        Filter_Multiplier =  iMouse.x/iResolution.x;\n        Filter_ThresholdY = (iMouse.y/iResolution.y - 0.5)*ViewSizY;\n    }\n#endif\n\n    //  Parameter Visualization:\n    float PM = 0.0;\n    float PT = 0.0;\n#if PARAMETER_VISUALIZATION\n    const float DashLen = 12.0;\n    float DashX = round(mod(fragCoord.x, DashLen) / DashLen);\n    float DashY = round(mod(fragCoord.y, DashLen) / DashLen);\n\n    PM = (Filter_Multiplier-0.5)*ViewSizX-ScrnPos.x;\n    PT =  Filter_ThresholdY              -ScrnPos.y;\n\n    PM = smoothstep( 1.5, 0.0, abs(PM)/fwidth(PM) ) * DashY;\n    PT = smoothstep( 1.5, 0.0, abs(PT)/fwidth(PT) ) * DashX;\n#endif\n\n    //  Axes:\n    float P0 = 0.0;\n    P0 =         smoothstep( 1.5, 0.0, abs(ScrnPos.x)/fwidth(ScrnPos.x) );   // X = 0\n    P0 = max(P0, smoothstep( 1.5, 0.0, abs(ScrnPos.y)/fwidth(ScrnPos.y) ));  // Y = 0\n\n    //  Landscape:\n    float LsEks = ScrnPos.x+iTime*24.0;\n    float LsTop = Landscape(LsEks);\n    float LsBtm = LsTop - LsDepth;\n    float LsFlt = Filter(LsBtm, Filter_ThresholdY, Filter_Multiplier);\n    float LsFil = (ScrnPos.y-LsFlt > 0.0 && ScrnPos.y-LsTop < 0.0) ? 1.0 : 0.0;\n\n    float P1 = Plot(LsBtm, 2.0, ScrnPos.y); // Red - Landscape Bottom\n    float P2 = Plot(LsTop, 2.0, ScrnPos.y); // Grn - Landscape Top\n    float P3 = Plot(LsFlt, 2.0, ScrnPos.y); // Ylw - Landscape Bottom Filtered\n\n    //  Combine Everything:\n    vec3 Plot = vec3(\n        max(P0*0.25, max(P1*0.33, max(P3*0.7, max(PT*0.2, PM*0.2)))),\n        max(P0*0.25, max(P2*0.27, max(P3*0.5, max(PT*0.2, PM*0.2)))),\n        max(P0*0.25                         , max(PT*0.2, PM*0.2)  )\n    );\n\n    vec3 Background = vec3(0.0);\n    if      (LsFil > 0.5)     { Background = vec3(0.85, 1.0 , 0.8)*0.15 ; }\n    else if (ScrnPos.y < 0.0) { Background = vec3(0.1 , 0.3 , 0.5)*0.125; }\n    else                      { Background = vec3(0.5 , 0.73, 1.0)*0.125; }\n\n    fragColor = vec4(clamp(Background+Plot, 0.0, 1.0), 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nvec4 DebugFloat(float x) {\n    if      (x <  -1.0) { return vec4(     0.0, 0.0, fract(abs(x)), 1.0); } // Blu  -Clipping\n    else if (x <   0.0) { return vec4(  abs(x), 0.0,       abs(x) , 1.0); } // Vlt  -\n    else if (x <=  1.0) { return vec4(      x ,  x ,          0.0 , 1.0); } // Ylw  +\n    else                { return vec4(fract(x), 0.0,          0.0 , 1.0); } // Red  +Clipping\n}\n\n\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nfloat Plot(float fX, float LineThickness, float PlotPosY) {\n    float Plot;\n    Plot = PlotPosY - fX;\n\n#if 1\n    Plot = abs(Plot) / fwidth(Plot);\n    Plot = smoothstep(LineThickness, max(0.0, LineThickness-1.5), Plot);\n#else\n    Plot = abs(Plot) / fwidth(Plot) * 0.01;\n#endif\n\n    return Plot;\n}\n\n\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nfloat Landscape(float x) {\n    const float A_Amp =   2.0;\n    const float A_Len =   5.0;\n    const float A_Off =  11.0; // mod( 11, 2*pi) = 4.71681469282041352307\n\n    const float B_Amp =  11.6;\n    const float B_Len =  15.6;\n    const float B_Off =  23.0; // mod( 23, 2*pi) = 4.15044407846124056922\n    \n    const float C_Amp =  10.8;\n    const float C_Len =  13.0;\n    const float C_Off =  47.0; // mod( 47, 2*pi) = 3.01770284974289466152\n    \n    const float D_Amp =  47.4;\n    const float D_Len =  38.0;\n    const float D_Off = 113.0; // mod(113, 2*pi) = 6.18584977794702989227\n\n    float A = cos(A_Off + x*1.0/A_Len) * A_Amp;\n    float B = cos(B_Off + x*1.0/B_Len) * B_Amp;\n    float C = cos(C_Off + x*1.0/C_Len) * C_Amp;\n    float D = cos(D_Off + x*1.0/D_Len) * D_Amp;\n\n    return A+B+C+D+16.0;\n}\n\n","name":"Common","description":"","type":"common"}]}