{"ver":"0.1","info":{"id":"Dl3fWB","date":"1701516888","viewed":56,"name":"mÃ¶bius by Simon Schuler ","username":"SchulerSimon","description":"Something that just emerged when I was trying something completely different :D But I like it. ","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["moebius","artsy","mbius","simon","schuler"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nAuthor: Simon Schuler (https://github.com/SchulerSimon)\n\nMIT License\n*/\n\n#define PI 3.1415926\n\nvec3 palette1(in float t)\n{\n    \n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.0, 0.333, 0.667);\n    return a + b*cos(6.28318 * (c * t+d));\n}\n\n// input from and to are vec2 with dist, angle\nfloat line(vec2 uv, vec2 from, vec2 to) {\n    vec2 a = vec2(sin(from.y), cos(from.y)) * from.x;\n    vec2 b = vec2(sin(to.y), cos(to.y)) * to.x;\n    float h = min(1.0, max(0.0, dot(uv - a, b - a) / dot(b - a, b - a)));\n    return smoothstep(0.005, 0.004, length(uv - a - (b - a) * h));\n}\n\nvoid mainImage(out vec4 color, in vec2 pixel)\n{\n    float uv_norm = iResolution.x > iResolution.y ? iResolution.y : iResolution.x;\n    vec2 uv = (pixel - 0.5 * iResolution.xy) / uv_norm;\n    \n    vec4 col = vec4(0.0);\n    float t = iTime;\n    \n    // background\n    float d = uv.y + 0.5;\n    col += 1.0 - d;\n    col *= vec4(vec3(0.1, 0.1, 0.1), 0.1);\n    \n    // mobius band\n    for(float i = 0.0; i < 30.0 ; i ++ ) {\n        for(float k = 0.0; k < 5.0; k ++ ) {\n            float dist = (sin(t * 3.0) * 0.13) + 0.25;\n            float angle = fract(t / 5.0) + i + k / 55.0;\n            angle *= 2.0 * PI;\n            vec2 from = vec2(dist * 1.1, angle);\n            \n            t -= 0.01 * k;\n            dist = (sin(t * 3.0) * 0.13) + 0.26;\n            angle = fract(t / 5.0) + i + k / 55.0;\n            angle *= 2.0 * PI;\n            vec2 to = vec2(dist, angle);\n            \n            col += vec4(vec3(line(uv, from, to)), 1.0 - 0.2 * k);\n        }\n    }\n    col.rgb *= palette1(iTime / 10.0);\n    color = col;\n}","name":"Image","description":"","type":"image"}]}