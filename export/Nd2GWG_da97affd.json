{"ver":"0.1","info":{"id":"Nd2GWG","date":"1617888374","viewed":44,"name":"Box Blending: Testbed","username":"matt77hias","description":"Per-face blend distance for box.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["blending"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Volume bounds\n    vec2 aabb_min = vec2(-70.0f, -50.0f);\n    vec2 aabb_max = vec2(120.0f, 100.0f);\n    \n    // Blend distances\n    vec2 blend_xs = vec2(10.0f, 20.0f);\n    vec2 blend_ys = vec2(30.0f, 60.0f);\n    \n    vec2 p = fragCoord - 0.5f * iResolution.xy;\n    vec2 p_clamped = clamp(p, aabb_min, aabb_max);\n    \n    vec3 color;\n    \n    int order_x = (p.x < aabb_min.x) ? 0 : (p.x > aabb_max.x) ? 1 : 2;\n    int order_y = (p.y < aabb_min.y) ? 0 : (p.y > aabb_max.y) ? 1 : 2;\n    if ((order_x == 2) && (order_y == 2))\n    {\n        color = vec3(0.0f, 1.0f, 0.0f);\n    }\n    else\n    {\n        float blend_x = (order_x != 2) ? blend_xs[order_x] : 1.0f /* non-zero-don't-care */;\n        float blend_y = (order_y != 2) ? blend_ys[order_y] : 1.0f /* non-zero-don't-care */;\n        vec2  blend   = vec2(blend_x, blend_y);\n        \n        float a2 = SqrLength((p_clamped - p) / blend); // Ellips (2D) -> Ellipsoid (3D)\n        if (a2 <= 1.0f) // Exploit +Inf/NaN comparison.\n        {\n            if ((order_x == 2) || (order_y == 2))\n            {\n                color = vec3(0.0f, 0.0f, 1.0f);\n            }\n            else\n            {\n                color = vec3(1.0f, 0.0f, 0.0f);\n            }\n            \n            color *= LinearToSRgb(1.0f - sqrt(a2)); // Perceptually linear for visualization purposes.\n        }\n    }\n    \n    fragColor = vec4(color, 1.0f);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float SqrLength(vec2 v)\n{\n    return dot(v, v);\n}\n\nfloat LinearToSRgb(float s)\n{\n    if (s <= 0.00031308f)\n    {\n        return 12.92f * s;\n    }\n    else\n    {\n        return 1.055f * pow(s, (1.0f / 2.4f)) - 0.055f;\n    }\n}","name":"Common","description":"","type":"common"}]}