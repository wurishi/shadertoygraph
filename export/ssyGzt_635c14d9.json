{"ver":"0.1","info":{"id":"ssyGzt","date":"1631939992","viewed":150,"name":"Sound Experiment #1","username":"oneshade","description":"Experimenting with sound tab. Hope it doesn't hurt anyone's ears!","likes":5,"published":3,"flags":8,"usePreview":0,"tags":["sound","experiment","short"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modified version of font loader from https://www.shadertoy.com/view/ltcXzs\nvoid drawChar(inout vec3 color, in vec3 charColor, in vec2 uv, in vec2 pos, in vec2 size, in int char) {\n    uv = (uv - pos) / size + 0.5;\n    vec2 charUv = uv / 16.0;\n    vec2 dfdx = dFdx(charUv);\n    vec2 dfdy = dFdy(charUv);\n    if (all(lessThan(abs(uv - 0.5), vec2(0.5)))) {\n        float val = textureGrad(iChannel0, charUv + fract(vec2(char, 15 - char / 16) / 16.0), dfdx, dfdy).r;\n        color = mix(color, charColor, val);\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Default shader\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 color = 0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0.0, 2.0, 4.0));\n    fragColor = vec4(color, 1.0);\n\n    // Correct aspect ratio\n    uv.x *= iResolution.x / iResolution.y;\n\n    // \"Sound In\" notification\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.3, 0.3), vec2(0.1), 83); // S\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.4, 0.3), vec2(0.1), 79); // O\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.5, 0.3), vec2(0.1), 85); // U\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.6, 0.3), vec2(0.1), 78); // N\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.7, 0.3), vec2(0.1), 68); // D\n\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.9, 0.3), vec2(0.1), 73); // I\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(1.0, 0.3), vec2(0.1), 78); // N\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 mainSound(int samp, float time) {\n    return vec2(makeNoise(time));\n}","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"#define TAU 6.28\n\nfloat whiteNoise(in float time) {\n    return fract(495.381 * cos(937.385 * time + 18.387));\n}\n\nfloat squareWave(in float time) {\n    return mod(floor(2.0 * time), 2.0);\n}\n\nfloat triWave(in float time) {\n    return (1.0 - 2.0 * abs(1.0 - 2.0 * fract(time + 0.25)));\n}\n\nfloat sineWave(in float time) {\n     return sin(TAU * time);\n}\n\nfloat bump(in float time, in float width, in float sharpness) {\n    time = max(0.0, abs(time) - width) * sharpness;\n    return exp(-time * time);\n}\n\nfloat expFade(in float time, in float sharpness) {\n    return exp2(-time * sharpness);\n}\n\nfloat makeNoise(in float time) {\n    float time1 = mod(time, 2.5);\n    float sound = sineWave(time1 * 200.0);\n    sound += triWave(time1 * 100.0);\n    sound *= expFade(time1, 3.0);\n    sound *= min(1.0, expFade(time1, -3.0) * sineWave(time1 * 3.0));\n    if (time > 5.0) {\n        sound *= 2.0;\n    }\n\n    if (time > 12.0 && time < 18.0) {\n        float time2 = mod(time - 12.0, 2.0);\n        sound /= mix(1.0, pow(abs(sineWave(time2 * 25.0)), 2.0) + 0.1, expFade(time2, 1.0));\n    }\n\n    if (time > 18.0) {\n        sound *= 2.0;\n    }\n\n    if (time > 23.0) {\n        sound *= expFade(time - 23.0, 0.5);\n    }\n\n    return sound;\n}","name":"Common","description":"","type":"common"}]}