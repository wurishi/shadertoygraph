{"ver":"0.1","info":{"id":"XXtSDj","date":"1719599257","viewed":88,"name":"sparkly 4d","username":"pb","description":"3d projection of 4d raymarch","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","4d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//logic taken from gaz: https://www.shadertoy.com/view/ftKBzt\n//and made more verbose and tweaked\n\n#define rot(x) mat2(cos(x+vec4(0,11,33,0)))\n\n//Rodrigues-Euler axis angle rotation\n#define ROT(p,axis,t) mix(axis*dot(p,axis),p,cos(t))+sin(t)*cross(p,axis)\n\n//formula for creating colors;\n#define H(h,d)  (  cos(  h + vec3(80,20,3)   )*.7 + .5 )\n\n//formula for mapping scale factor \n#define M(c)  2.*log(1.+c)\n\n#define R iResolution\n\n\nvoid mainImage( out vec4 O, vec2 U) {\n  \n    O = vec4(0);\n    \n    vec3 c=vec3(0);\n    vec4 rd = normalize( vec4(U-.5*R.xy, R.y, R.y*2.))*80.;\n    \n    float sc,dotp,totdist=0., t=iTime/2.;\n    \n    t+=17.;\n    \n    for (float i=0.; i<200.; i++) {\n        \n        vec4 p = vec4( rd*totdist);\n          \n        p.yzw = ROT(p.xyz+vec3(0,0,-.4), normalize( vec3(sin(t/2.), sin(t), cos(t/3.) )  ),t);\n\n        sc = 1.;  //scale factor\n        \n        \n        for (float j=0.; j<8.; j++) {\n                \n            p = abs(p)*.89;\n            \n            dotp = max(1./dot(p,p),.05);\n            sc *= dotp ;\n                               \n            p = abs(p) * dotp - .33 ;\n        }\n         \n        float dist = abs( length(p)-.05)/sc ;  //funky distance estimate\n        float stepsize = dist/20. ;     \n        totdist += stepsize;              //move the distance along rd\n        \n        //accumulate color, fading with distance and iteration count\n        c += mix( vec3(1), H(M(sc),id),.9) *.03*  exp(-i*i*stepsize*stepsize*1e3);\n    }\n    \n    //c*=c;\n    c = 1. - exp(-c);\n    O = ( vec4(c,0) );\n               \n}","name":"Image","description":"","type":"image"}]}