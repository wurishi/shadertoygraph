{"ver":"0.1","info":{"id":"cdBGzw","date":"1667464187","viewed":226,"name":"fractal diving","username":"ufffd","description":"playing with XT95's scene, added:\n- overlapped transitions\n- zoom in after each fractal\n- continuous zoom mode\n- variable timer\n- mouse look controls","likes":7,"published":3,"flags":0,"usePreview":0,"tags":["fractal","volumetric","glow"],"hasliked":0,"parentid":"ds2GRW","parentname":"Fractal doodling"},"renderpass":[{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// edit of xt95's fractal doodling: https://www.shadertoy.com/view/ds2GRW\n// which was inspired by gaz: https://www.shadertoy.com/user/gaz/\n\n// timer loop length\n#define TIMER 20.\n// constant zoom mode\n// #define CZOOM\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/R.xy;\n    vec3 rd = normalize(vec3(uv*2.-1., 2.));\n    \n    if (iMouse.z>0.5) {\n        vec2 muv = iMouse.xy/R.xy-0.5;\n        rd.xz = rot(muv.x*PI*2.) * rd.xz;\n        rd.yz = rot(muv.y*PI*2.) * rd.yz;\n    }\n    \n    fragColor = vec4(0.,0.,0.,1.);\n    \n    for(float cycle=0.;cycle<1.5;cycle++) {\n        vec3 ro = vec3(0.,0.,-.5);\n        float t = 0.;\n        float time = iTime + cycle*TIMER*100.5 + 157.;\n        float ntime = time/TIMER;\n        vec3 seed = hash3( uint(ntime) + 3u );\n        vec3 seed2 = hash3( uint(ntime) );\n        time = mod(time, TIMER);\n        ntime = time/TIMER;\n        ro.z += ntime*.25;\n        // cycle progress bars for debugging\n        /* if (uv.y>0.95 && cycle<0.5) {\n            if (uv.x>ntime) {fragColor = vec4(1.); return;}\n        }\n        if (uv.y<0.95 && uv.y>0.9 && cycle > 0.5) {\n            if (uv.x>ntime) {fragColor = vec4(1.); return;}\n        } */\n        #ifdef CZOOM\n            float fade = sin((ntime*2.-0.5)*PI)*0.5+0.5;\n            fade = smoothstep(0.,1.,fade);\n            float zoom = 2. - ntime*2.;\n        #else\n            float ease_in = smoothstep(.0,.2, ntime);\n            float ease_out = smoothstep(.75,.65, ntime);\n            float fade = ease_in * ease_out;\n            ease_in = smoothstep(.0,.3, ntime);\n            ease_out = smoothstep(.8,.6, ntime);\n            float zoom = .9 - ease_in + ease_out - ntime*0.5;\n        #endif\n\n        vec3 col = vec3(0.);\n        for(int i=0; i<100; i++) {\n            vec3 p = ro + rd * t;\n            p.z -= zoom * 0.6;\n            if (cycle>0.5)\n                p.xz = rot(-iTime*0.02+0.3) * p.xz;\n            else\n                p.xz = rot(iTime*0.02+0.3) * p.xz;\n            p.xy = rot(-iTime*0.03-.2) * p.xy;\n            float s = 2., r2;\n            for(int j=0; j<5+int(cycle*3.); j++) {\n                r2 = (3.2-zoom)/min(dot(p,p),1.9);\n                p = abs(p*r2) - (seed+.1)*5.;\n                s *= r2;\n            }\n\n            float d = length(p.xy)/s;\n            t += d*.5;\n            col += vec3(cos(vec3(1.,2.,3.)-iTime*1.5*(seed2.g*2.-1.) + log(s))*.5+.5) * 0.03 * exp(-.5*d*float(i*i));\n        }\n        col = clamp(col,0.,1.) * fade;\n        fragColor.rgb += col;;\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define R iResolution\n#define PI 3.14159\n// From Iq https://www.shadertoy.com/view/llGSzw\nvec3 hash3( uint n ) \n{\n    // integer hash copied from Hugo Elias\n\tn = (n << 13U) ^ n;\n    n = n * (n * n * 15731U + 789221U) + 1376312589U;\n    uvec3 k = n * uvec3(n,n*16807U,n*48271U);\n    return vec3( k & uvec3(0x7fffffffU))/float(0x7fffffff);\n}\nmat2 rot(float v) {\n    float a = cos(v);\n    float b = sin(v);\n    return mat2(a,b,-b,a);\n}","name":"Common","description":"","type":"common"}]}