{"ver":"0.1","info":{"id":"DdtcDM","date":"1695135501","viewed":50,"name":"Rotated color square","username":"ElisabetTorch","description":"Rotated color square","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["square"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rotate(vec2 uv, float angle) //метод который заставляет фигуру вращаться\n{\n    return mat2(cos(angle), sin(angle), \n    -sin(angle), cos(angle)) * uv;\n}\n\nvec3 sdfSquare(vec2 uv, float r, vec2 offset) // метод цвета и расположения фигуры\n{\n    float x = uv.x - offset.x;\n    float y = uv.y - offset.y;\n    vec2 rotated = rotate(vec2(x,y), iTime);\n    \n    float d = max(abs(rotated.x), abs(rotated.y)) - r;\n    \n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    return col * smoothstep(3.0/iResolution.y, 0.0, d);\n    //return d >.0 ? vec3(0) : 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy / 2.0) / iResolution.y;\n    \n    vec2 offset = vec2(sin(iTime* .6)*.5, cos(iTime*.6)*.5);\n    \n    vec3 col = sdfSquare(uv, .2, offset); \n    \n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}