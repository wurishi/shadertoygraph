{"ver":"0.1","info":{"id":"sldfRX","date":"1663445986","viewed":102,"name":"random indexed repetition 2d","username":"jt","description":"SDF of random objects in a grid - based on\n[url=https://www.shadertoy.com/view/3syGzz]Limited Repetition SDF[/url] by iq\n[url=https://www.shadertoy.com/view/WttXWX]\"Best\" Integer Hash[/url] by FabriceNeyret2.\n","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["repetition"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/sldfRX random indexed repetition 2d by jt\n// Combining iq's repetition example with Fabrice's hash function implementation.\n\n// https://www.shadertoy.com/view/3syGzz Limited Repetition SDF by iq\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2\n\n// --- from Chris Wellons https://nullprogram.com/blog/2018/07/31/\n// Note that it might not be costlier than the infamous fract(big*sin(big*x)) ;-) \n\n        // --- choose one:\n//#define hashi(x)   lowbias32(x)\n  #define hashi(x)   triple32(x) \n\n  #define hash(x)  ( float( hashi(x) ) / float( 0xffffffffU ) )\n\n//bias: 0.17353355999581582 ( very probably the best of its kind )\nuint lowbias32(uint x)\n{\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return x;\n}\n\n// bias: 0.020888578919738908 = minimal theoretic limit\nuint triple32(uint x)\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bbU;\n    x ^= x >> 11;\n    x *= 0xac4c1b51U;\n    x ^= x >> 15;\n    x *= 0x31848babU;\n    x ^= x >> 14;\n    return x;\n}\n\nuint hashi(uvec2 v)\n{\n    return hashi(v.x + hashi(v.y) );\n}\n\n/*\nvoid mainImage( out vec4 O, vec2 U )\n{\n    uvec2 V = uvec2(U);\n    float h = hash( V.x + hashi(V.y) ); // clean 2D hash\n  //float h = hash( V.x + (V.y<<16) );  // 2D hash (should be ok too )\n    O = vec4( h );\n  //O = vec4( pow( h, 1./2.2) );        // sRGB conversion\n}\n*/\n\n// https://www.shadertoy.com/view/3syGzz Limited Repetition SDF by iq\n\n// The MIT License\n// Copyright Â© 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// This shader shows the correct way to compute a number of\n// copies of an object (right), and the usual but incorrect\n// way to do it (left). The incorrect way is to do infinite\n// repetition and then clip it with a box.\n\n// Related techniques:\n//\n// Elongation  : https://www.shadertoy.com/view/Ml3fWj\n// Rounding    : https://www.shadertoy.com/view/Mt3BDj\n// Onion       : https://www.shadertoy.com/view/MlcBDj\n// Metric      : https://www.shadertoy.com/view/ltcfDj\n// Combination : https://www.shadertoy.com/view/lt3BW2\n// Repetition  : https://www.shadertoy.com/view/3syGzz\n// Extrusion2D : https://www.shadertoy.com/view/4lyfzw\n// Revolution2D: https://www.shadertoy.com/view/4lyfzw\n//\n// More information here: https://iquilezles.org/articles/distfunctions\n\n\n// Create infinite copies of an object -  https://iquilezles.org/articles/distfunctions\nvec2 opRep(in vec2 p)\n{\n    return p - 2.0*round(p/2.0);\n    //return fract(p) - 1.0;\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdBox( in vec2 p, in vec2 b ) \n{\n    vec2 q = abs(p) - b;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0));\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\n\n//-----------------------------\n\nivec2 opRepIdx(in vec2 p)\n{\n    return ivec2(floor((p + 1.0) / 2.0));\n}\n\nuint opRepIdxRnd(in vec2 p)\n{\n    return hashi(uvec2(opRepIdx(p)));\n    //return uint(iFrame/100) + hashi(uvec2(opRepIdx(p)));\n}\n\nbool opRepIdxRndBool(in vec2 p)\n{\n    return (opRepIdxRnd(p) & 1u) != 0u;\n}\n/*\nfloat cell(in vec2 q, in float s)\n{\n    vec2 r = opRep(q);\n    if(opRepIdxRndBool(q))\n        return sdBox(r, vec2(0.4, 0.2)) - 0.1;\n        \n    return sdCircle(r, 0.4) - 0.1;\n}\n*/\nfloat map(in vec2 p)\n{\n    //float s = mix(0.4, 0.8, cos(iTime/5.0) * 0.5 + 0.5);\n    float s = mix(0.4, 0.8, sin(iTime/5.0) * 0.5 + 0.5); // using sin instead of cos for a nicer first impression\n    //float s = 2.0;\n    vec2 r = opRep(p); // coordinates inside cell\n    //float d = 1.0 / 0.0;\n    float d = 10000.0; // maximal distance\n\n/*\n    if(opRepRndBool(p))\n        d = min(d, sdBox(r, vec2(0.4, 0.2)) - 0.1);\n    else\n        d = min(d, sdCircle(r, 0.4) - 0.1);\n*/\n\n    for(int v = -1; v <= +1; v++)\n    {\n        for(int u = -1; u <= +1; u++)\n        {\n            vec2 o = 2.0 * vec2(u, v); // offset\n            if(opRepIdxRndBool(p - o))\n                //d = min(d, sdBox(r + o, vec2(0.4, 0.2)) - 0.1);\n                d = min(d, sdBox(r + o, vec2(s, s)) - 0.1);\n            else\n                //d = min(d, sdCircle(r + o, 0.4) - 0.1);\n                d = min(d, sdCircle(r + o, s) - 0.1);\n        }\n    }\n\n    return d;\n}\n\nfloat map_scaled(in vec2 p)\n{\n    return map(p * 6.0) / 6.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    vec2 m = (2.0 * iMouse.xy - iResolution.xy) / iResolution.y;\n\n    float d = map_scaled(p);\n    \n    vec3 col = vec3(1.0) - sign(d) * vec3(0.1, 0.4, 0.7);\n\tcol *= 1.0 - exp(-24.0 * abs(d));\n\tcol *= 0.8 + 0.2 * cos(240.0*d);\n\tcol = mix(col, vec3(1.0), 1.0 - smoothstep(0.0, 0.01, abs(d)));\n\n    if(iMouse.z > 0.001)\n    {\n        d = map_scaled(m);\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0 - smoothstep(0.0, 0.005, abs(length(p - m) - abs(d)) - 0.0025));\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0 - smoothstep(0.0, 0.005, length(p - m) - 0.015));\n    }\n\n\tfragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}