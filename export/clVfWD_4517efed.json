{"ver":"0.1","info":{"id":"clVfWD","date":"1702077356","viewed":27,"name":"blobs2","username":"jneen","description":"some blobs ig","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["jneen"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 erot(vec3 p, vec3 ax, float ro){ax=normalize(ax);return mix(dot(ax,p)*ax,p,cos(ro))+cross(ax,p)*sin(ro);}\nvec2 uv;\n#define nsin(X) (.5+.5*sin(X))\n\n#define mksmin(T) T smin(T a,T b,float k){T h=max(k-abs(b-a),0.)/k;return min(a,b)-h*h*h*k/6.;}T smax(T a,T b,float k){return -smin(-a,-b,k);}\nmksmin(float)\nmksmin(vec3)\n#undef mksmin\n\nfloat T;\n\nfloat E=.0001;\n\nfloat box(vec3 p, vec3 a) {\n  vec3 q = abs(p)-a;\n  return length(max(q,0.));\n}\n\nfloat ls(vec3 p) {\n  float O;\n  O = length(p)-2.;\n  O = smax(O, -(length(p.yz)-1.5), .5);\n  //O = smax(O, .1-abs(p.x), 1.);\n  O = smax(O, -box(p, vec3(1.5)), .5);\n  return O;\n}\n\nfloat bl(vec3 p) {\n  float k=.5;\n  vec3 p1 = erot(p, erot(vec3(1,0,0),vec3(0,1,0),T), .001*sin(37.*T));\n  vec3 p2 = erot(p.zxy, erot(vec3(1,1,0),vec3(1,1,1),T*2.), .002*sin(40.*T))-2.1*sin(T);\n  vec3 p3 = erot(p.yzx, vec3(1,0,0), .03*sin(40.*T))-2.4*sin(T);\n\n  float O = smin(ls(p1), ls(p2),k);//smin(ls(p2),ls(p3),k),k);\n\n  return O;\n}\n\nvec3 sabs(vec3 a, float k) {\n  return smin(a,vec3(0),k) + smin(-a,vec3(0),k);\n}\n\nfloat bl2(vec3 p) {\n  float O = bl(erot(p.zyx+.4*nsin(10.*T), vec3(0,1,0),T));\n  O = smin(O, bl(p), .8);\n  \n  //O = mix(O, length(p)-2., nsin(T));\n  return O;\n}\n\nfloat w(vec3 p) {\n  float O = bl2(p);\n  O = min(O, bl2(p-vec3(8,0,0)));\n    O = min(O, bl2(p-vec3(0,8,0)));\n\n  O = smin(O, -p.z,.5);\n\n  return O;\n}\n\nvec3 P,N,dir;float D;\nvoid march(){D=0.;P+=.7*dir;for (int i=0;i<500;i++){float d=w(P);if(d<E||D>1000.)break;P+=d*dir;D+=d;}}\nvoid norm(){mat3 k=mat3(P,P,P)-mat3(E);N=normalize(w(P)-vec3(w(k[0]),w(k[1]),w(k[2])));}\n\nfloat studio(){ return length(nsin(N))/sqrt(3.); }\nfloat point(vec3 l){ return max(0., dot(normalize(l-P),N)); }\n\nvec3 render() {\n  if (D > 999.) return vec3(0);\n  norm();\n  \n  float st = studio();\n  float pt = point(vec3(0,0,0)) + point(vec3(10,10,0));\n  \n  return vec3(.9,.3,.6)*st + pt*vec3(0,.9,1)*mix(.6,.9,nsin(30.*T));\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    T = iTime*.5;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= .5;\n    uv *= 2.;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    \n    P = vec3(0,0,-4);\n    dir = normalize(vec3(-uv, 1.));\n    \n    float xrot = 1.5;\n    float yrot = 0.;//.01*abs(sin(2.*T));\n    float zrot = T;\n    \n    P = erot(P, vec3(1,0,0), xrot);\n    dir = erot(dir, vec3(1,0,0), xrot);\n    P = erot(P, vec3(0,1,0), yrot);\n    dir = erot(dir, vec3(0,1,0), yrot);\n    P = erot(P, vec3(0,0,1), zrot);\n    dir = erot(dir, vec3(0,0,1), zrot);\n \n    P -= abs(sin(T));\n    //dir -= abs(sin(T));\n    \n    march();\n    \n    vec3 col = render();\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}