{"ver":"0.1","info":{"id":"ttsSWs","date":"1564687704","viewed":260,"name":"Ray Tracing Simple","username":"96logda","description":"It is the first time I am implementing ray tracing lighting.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","sunlight","reflections","cubmap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Copyright (c) 2019-08-01 - 2019-08-02 by Angelo Logahd\n//Portfolio: https://angelologahd.wixsite.com/portfolio\n\n#define dot2(x) dot(x, x)\n#define pow5(x) pow(x, 5.0)\n\nconst vec3 GROUND_DIR \t       = vec3(0.0, 1.0, 0.0);\nconst vec3 SKY_DIR    \t \t   = vec3(0.0, 1.0, 0.0);\n\nconst float FRESNEL_BIAS  \t   = 0.3;\nconst float FRESNEL_SCALE \t   = 0.5;\nconst float FRESNEL_POWER \t   = 0.8;\n\nconst vec3 SCENE_COLOR    \t   = vec3(0.7, 0.5, 0.3);\nconst vec3 SUN_COLOR      \t   = vec3(2.0, 1.6, 1.0);\nconst vec3 AMBIENT_LIGHT_COLOR = vec3(0.2);\n\nconst float SUN_SCALE          = 0.4;\n\nfloat iGlobalTime \t\t  \t   = 0.0;\n\nstruct Ray\n{\n    vec3 ori;\n    vec3 dir;\n};\n\n// I have made some modifications.\n// https://www.shadertoy.com/view/ldS3DW\nfloat sphere(const in Ray ray, float radius)\n{\n    float c = dot2(ray.ori) - (radius * radius);\n  \tfloat b = dot(ray.dir, ray.ori);\n  \tfloat d = b * b - c;\n  \tfloat trace = -b - sqrt(abs(d));\n  \tfloat st = step(0.0, min(trace, d));\n  \treturn mix(0.0, trace, st);\n}\n\nfloat fresnel(const in Ray ray, const vec3 normal)\n{\n    return FRESNEL_BIAS + FRESNEL_SCALE * pow(clamp(1.0 + dot(ray.dir, normal), 0.0, 1.0), FRESNEL_POWER);\n}\n\nvec3 sky(vec3 rd, vec3 cubemap)\n{\n    float sky = max(0.0, dot(rd, SKY_DIR));\n    return pow5(sky) * cubemap;\n}\n\nvec3 sunLight(vec3 rd, vec3 lightDir)\n{\n    float sunF = max(0.0, dot(rd, lightDir));\n    return (pow(sunF, 256.0) + SUN_SCALE * pow5(sunF)) * SUN_COLOR;\n}\n\nvec3 sceneColor(vec3 rd)\n{\n  \tvec3   light = normalize(vec3(sin(iGlobalTime), 0.8, cos(iGlobalTime)));\n    float  ground = max(0.0, dot(rd, -GROUND_DIR));\n    vec3   cubemap = texture(iChannel0, rd).rgb;\n   \treturn sunLight(rd, light) + pow5(ground) * cubemap +\n           sky(rd, cubemap) * SCENE_COLOR;\n}\n\nvec3 trace(const in Ray ray)\n{\n    float t = sphere(ray, 1.0); \n    return ray.ori + ray.dir * t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  \tvec2 uv = -1.0 + 2.0 * (fragCoord.xy / iResolution.xy); \n    uv.x *= iResolution.x / iResolution.y;\n \n    iGlobalTime = iTime * 0.5;\n      \n    Ray ray;\n    ray.ori = vec3(0.0, 0.0, -2.0);\n    ray.dir = normalize(vec3(uv, 1.0));\n    \n  \tvec3 p = vec3(0.0, 0.0, 0.0);\n    vec3 rayPos = trace(ray);\n  \tvec3 normal = normalize(p - rayPos);\n  \tvec3 bgColor = sceneColor(ray.dir);\t\n    \n    Ray reflectRay;\n    reflectRay.ori = ray.ori;\n    reflectRay.dir = reflect(ray.dir, normal);\n   \n  \tvec3 reflectionColor = sceneColor(reflectRay.dir);\n    \n    float fresnel = fresnel(reflectRay, normal);\n    vec3 reflection = 2.0 * 0.5 * pow(texture(iChannel0, reflectRay.dir).rgb, vec3(1.0)) * fresnel;\n\treflectionColor += reflection;\n\n    vec3 color = mix(bgColor, reflectionColor, 0.8) + AMBIENT_LIGHT_COLOR;\n    fragColor = vec4(color, 1.0);\n    //fragColor = vec4(pow(resultColor, vec3(0.4545)), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}