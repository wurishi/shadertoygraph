{"ver":"0.1","info":{"id":"wtsSW4","date":"1563016554","viewed":1074,"name":"Gold Noise 3D","username":"theGiallo","description":"To see a XZ slice of the noise put TEMPORAL to 0.\nWith TEMPORAL 1 Z is time mod 1024.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["noise","bluenoise","goldennoise","goldnoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TEMPORAL 1\n\n#define GOLDEN_X 25\n#define GOLDEN_Y 65535\nfloat  mod1( float x )\n{\n    return x - floor( x );\n}\n\nfloat\ngolden_noise( vec2 f )\n{\n    #define a 0.618034\n    #define l GOLDEN_X\n\n    f.y *= texture(iChannel1,f).r * float(GOLDEN_X);\n    int ll = l * l;\n    float ret = a;\n    int c = ( ll + ( int(f.x) + int(f.y) * GOLDEN_Y ) % ll ) % ll ;\n    for ( int i = 0; i != ll; ++i )\n    {\n        ret = mod1( ret + a );\n        if ( c == i )\n        {\n            break;\n        }\n    }\n    #undef a\n    #undef l\n    \n    return ret;\n}\n\nfloat PHI = 1.61803398874989484820459 * 00000.1; // Golden Ratio   \nfloat PI  = 3.14159265358979323846264 * 00000.1; // PI\nfloat SQ2 = 1.41421356237309504880169 * 10000.0; // Square Root of Two\nfloat E   = 2.71828182846;\n\n////////////////////////////////////////////////////////////////////////////////\n// https://www.shadertoy.com/view/ltB3zD\nfloat gold_noise(in vec2 coordinate, in float seed){\n    return fract(tan(distance(coordinate*(seed+PHI), vec2(PHI, PI)))*SQ2);\n}\n////////////////////////////////////////////////////////////////////////////////\n\n\nfloat gold_noise3(in vec3 coordinate, in float seed){\n    return fract(tan(distance(coordinate*(seed+PHI), vec3(PHI, PI, E)))*SQ2);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    float g;\n    \n    if ( uv.x < 0.33 )\n    \tg = golden_noise( fragCoord );\n    else\n    if ( uv.x < 0.66 )\n    \tg = gold_noise( fragCoord, 0.0 );\n    else\n        #if TEMPORAL\n    \tg = gold_noise3( vec3(fragCoord.x,fragCoord.y,mod( floor(iTime*60.),1024. )), 0.0 );\n    \t//g = gold_noise3( vec3(fragCoord.x,fragCoord.y,float( int( floor(iTime*60.) ) % 1024 ) ), 0.0 );\n        #else\n    \tg = gold_noise3( vec3(fragCoord.x,0,fragCoord.y), 0.0 );\n        #endif\n        \n    col = vec3(g,g,g);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}