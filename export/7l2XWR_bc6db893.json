{"ver":"0.1","info":{"id":"7l2XWR","date":"1627467003","viewed":243,"name":"Chaos Wheel","username":"oneshade","description":"An excuse to improve my understanding of rotation physics.\nRecreation of the cool animation from this video: [url=https://www.youtube.com/watch?v=6z4qRhpBIyA[https://www.youtube.com/watch?v=6z4qRhpBIyA[/url]","likes":23,"published":3,"flags":32,"usePreview":0,"tags":["2d","animation","chaos","physics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// SDFs\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b, in float t) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0)) - t;\n}\n\nfloat sdBox(in vec2 p, in vec2 b) {\n    p = abs(p) - b;\n    return length(max(p, 0.0)) + min(0.0, max(p.x, p.y));\n}\n\nfloat sdIsosceles(in vec2 p, in float b, in float h) {\n    p.x = abs(p.x);\n    float q = clamp((b - p.x + p.y) / (b + h), 0.0, 1.0);\n    vec2 re = vec2(p.x - b + b * q, p.y - h * q);\n    vec2 be = vec2(p.x - b * min(p.x / b, 1.0), p.y);\n    return sqrt(min(dot(re, re), dot(be, be))) * sign(p.x + (p.y - h) * b / h * sign(p.y));\n}\n\n#define drawSDF(dist, col) color = mix(color, col, smoothstep(unit, 0.0, dist))\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y + vec2(0.0, 0.5 * BUCKET_SIZE.y);\n    float unit = 2.0 / iResolution.y;\n    vec3 color = texture(iChannel1, fragCoord / iResolution.xy).rgb;\n\n    // Wheel spokes\n    float wheelAngle = texelFetch(iChannel0, ivec2(0, 1), 0).x;\n    float co = cos(wheelAngle), si = sin(wheelAngle);\n    vec2 wheelUv = uv * mat2(co, si, -si, co);\n    float ang = mod(atan(wheelUv.y, wheelUv.x) + PI / BUCKETS, TAU / BUCKETS) - PI / BUCKETS;\n    wheelUv = vec2(cos(ang), sin(ang)) * length(wheelUv) - vec2(0.5 * WHEEL_RADIUS, 0.0);\n    drawSDF(sdBox(wheelUv, vec2(WHEEL_RADIUS, SPOKE_WIDTH) * 0.5), vec3(0.75, 0.4, 0.0));\n\n    float mask = 1e20;\n    vec2 maskPos = vec2(0.0);\n    for (float n=0.0; n < BUCKETS; n++) {\n        float bucket = texelFetch(iChannel0, ivec2(n, 0), 0).x;\n        vec2 waterLevel = BUCKET_SIZE * clamp(bucket, 0.001, 0.999); // clamp(0.001, 0.999) to avoid divide by zero in sdIsosceles()\n        float ang = TAU * n / BUCKETS + wheelAngle;\n        vec2 pos = vec2(cos(ang), sin(ang)) * WHEEL_RADIUS;\n\n        // Check before setting it as the spout mask\n        float shape = sdIsosceles(pos - uv + vec2(0.0, BUCKET_SIZE.y), BUCKET_SIZE.x, BUCKET_SIZE.y);\n        if (pos.x > -BUCKET_SIZE.x && pos.x < BUCKET_SIZE.x && pos.y > 0.0 && shape < mask) {\n            mask = shape;\n            maskPos = pos;\n        }\n\n        // Draw the bucket\n        drawSDF(shape, vec3(0.5));\n        drawSDF(sdIsosceles(pos - uv + vec2(0.0, waterLevel.y), waterLevel.x, waterLevel.y), vec3(0.0, 1.0, 1.0));\n    }\n\n    if (mask < 1e10) drawSDF(max(sdBox(uv - vec2(0.0, 0.55), vec2(0.01, 1.0)), min(mask, maskPos.y + BUCKET_SIZE.y - uv.y)), vec3(0.0, 1.0, 1.0));\n    drawSDF(sdBox(uv - vec2(0.0, 0.55), vec2(0.02, 0.025)), vec3(0.5));\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Constants\n#define PI 3.14159265359\n#define TAU 6.28318530718\n\n// Settings\n#define BUCKETS 8.0\n#define BUCKET_SIZE vec2(0.08, 0.15)\n\n#define WHEEL_RADIUS 0.3\n#define SPOKE_WIDTH 0.015\n#define WHEEL_DENSITY 0.02\n\n// ∫r^2dm = ∫∫(x^2+y^2) dy dx (x in range [0...WHEEL_RADIUS] and y in range [-SPOKE_WIDTH/2...SPOKE_WIDTH/2])\n#define WHEEL_INERTIA ((4.0 * SPOKE_WIDTH * pow(WHEEL_RADIUS, 3.0) + pow(SPOKE_WIDTH, 3.0) * WHEEL_RADIUS) / 12.0 * BUCKETS)\n\n#define WHEEL_FRICTION 0.95\n\n#define FILL_RATE 0.018\n#define DRAIN_RATE 0.0015\n#define FLUID_DENSITY 0.02\n\n#define GRAVITY 0.1","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Simulation\nvoid mainImage(out vec4 data, in vec2 addr) {\n    data = vec4(0.0);\n    addr -= 0.5; // Once again I am reminded that fragment coordinates weirdly go from (0.5, 0.5) to iResolution.xy+0.5\n    ivec2 iAddr = ivec2(addr);\n    if (iFrame == 0) {\n        if (iAddr.x == 0 && iAddr.y == 1) data.x = 0.05;\n        if (iAddr.x == 2 && iAddr.y == 0) data.x = 0.75;\n    }\n\n    if (iFrame > 0) {\n        data = texelFetch(iChannel0, iAddr, 0);\n        if (addr.x < BUCKETS && iAddr.y == 0) {\n            float ang = TAU * addr.x / BUCKETS + texelFetch(iChannel0, ivec2(0, 1), 0).x;\n            vec2 pos = vec2(cos(ang), sin(ang)) * WHEEL_RADIUS;\n\n            // Fill and drain\n            if (pos.x > -BUCKET_SIZE.x && pos.x < BUCKET_SIZE.x && pos.y > 0.0) data.x = min(1.0, data.x + FILL_RATE);\n            else data.x = max(0.0, data.x - DRAIN_RATE);\n        }\n\n        if (iAddr == ivec2(0, 1)) {\n            float torque = 0.0; // Angular equivalent of force\n            for (float n=0.0; n < BUCKETS; n++) {\n                float bucket = texelFetch(iChannel0, ivec2(n, 0), 0).x;\n                float ang = TAU * n / BUCKETS + data.x;\n                float mass = 0.5 * BUCKET_SIZE.x * BUCKET_SIZE.y * bucket * bucket * FLUID_DENSITY;\n                //vec2 force = vec2(0.0, -mass * GRAVITY);\n                //float tangentialForce = force.y * cos(ang) - force.x * sin(ang); // Project the force onto the spoke\n                float tangentialForce = -mass * GRAVITY * cos(ang);\n                torque += tangentialForce * WHEEL_RADIUS;\n            }\n\n            data.y += torque / WHEEL_INERTIA; // Angular equivalent to accel=force/mass\n            data.y *= WHEEL_FRICTION;\n            data.x += data.y;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Simulation recording\n#define drawSDF(dist, color) \nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y + vec2(0.0, 0.5 * BUCKET_SIZE.y);\n    float unit = 3.0 / iResolution.y;\n    fragColor = texture(iChannel1, fragCoord / iResolution.xy);\n\n    float time = iTime * 0.05 - 0.5 * iResolution.x / iResolution.y;\n    if (time > 0.0 && iFrame % 3 == 0) fragColor = texture(iChannel1, (fragCoord + vec2(1.0, 0.0)) / iResolution.xy);\n\n    float wheelAngVel = texelFetch(iChannel0, ivec2(0, 1), 0).y;\n    float point = length(uv - vec2(min(0.0, time), wheelAngVel * 5.0)) - 0.001;\n    fragColor.rgb = mix(fragColor.rgb, vec3(1.0, 0.0, 0.5), smoothstep(unit, 0.0, point));\n}","name":"Buffer B","description":"","type":"buffer"}]}