{"ver":"0.1","info":{"id":"MdXyz7","date":"1487491708","viewed":735,"name":"[ #04 ] - Disco balls","username":"Yrai","description":"For fun animation, testing lights on 2D scenes.","likes":1,"published":3,"flags":64,"usePreview":0,"tags":["2d","sound","light","animation","disco"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"lsB3Dy","filepath":"https://soundcloud.com/tom-m-c/who-da-funk-shiny-disco-balls-tom-mc-remix","previewfilepath":"https://soundcloud.com/tom-m-c/who-da-funk-shiny-disco-balls-tom-mc-remix","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define res_     iResolution\n#define time_    iTime\n#define pi_      3.14159265\n\n#define crot(a)  mat2(cos(a),-sin(a),sin(a),cos(a))\n\nvec2  domain(vec2 uv, float s);\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    // Initial calculations\n    // ---------------------------------------------------------------------------\n    vec2 p = domain(fragCoord, 2.);\n    vec2 np = fragCoord / res_.xy;\n    float sound = texture(iChannel0, vec2(-.2)).x;\n    float sound_movement = 2.*smoothstep(0., 3., sound);\n    // ---------------------------------------------------------------------------\n    \n    // Scene multiplication, depending on sound\n    // ---------------------------------------------------------------------------\n    if(sound_movement > .22) {\n        p.x = mod(p.x, 3.6) - .1;\n        p.y *= 2.1;\n        p.x *= 1.05;\n    \tp.y = mod(p.y, 4.2) - 2.3;\n    }\n\t// ---------------------------------------------------------------------------\n    \n    // Diagonal line\n    // --------------------------------------------------------------------------\n    float d_diagonal_line = abs(p.x - p.y) + .1*sound_movement*sin(21.*sound*p.x);\n    // --------------------------------------------------------------------------\n    \n    float fq = 1.;\n    \n    // Pendulum string\n    // --------------------------------------------------------------------------\n    vec2 pendulum_string_domain = p;\n    pendulum_string_domain -= vec2(2., 2.);\n    pendulum_string_domain *= crot(sound_movement * sin(fq*time_));\n    float d_vertical_line = abs(pendulum_string_domain.x) + .02*sin(11.*p.y);\n    // --------------------------------------------------------------------------\n    \n    // Circle\n    // --------------------------------------------------------------------------\n    float movment_angle = (-3.*pi_/2. - 1. * sound_movement*sin(fq*time_));\n    vec2 circle_domain = p;\n    circle_domain  -= vec2(2., 1.7 + sound_movement * 2.);  \n    circle_domain  += vec2(3.2 * cos(movment_angle), 3.2 * sin(movment_angle));\n    float d_circle  = abs(length(circle_domain) - .5);\n\tfloat d_disk    = (length(circle_domain) - .5);\n    // --------------------------------------------------------------------------\n    \n    // Light\n    // ---------------------------------------------------------------------\n    vec2 light = vec2(6., 2.); \n    float diffuse = 1. + max(0., dot(p, light));\n    // ---------------------------------------------------------------------\n    \n    // Shading\n    // ---------------------------------------------------------------------\n    vec3 color = vec3(0.);\n    \n    vec3 lb = vec3(0.1, 0.4, 1.7)*.5 + .3;\n    vec3 lg = vec3(0.1, 0.7, 0.1);\n    \n    color += fract(mix(lg, vec3(sin(14.*time_)*.5, .2, .4), p.x))*smoothstep(.06, .01, d_diagonal_line);\n   \t\n    if(pendulum_string_domain.y > -3. + sound_movement * 2.) \n        color += mix(lg, vec3(sin(14.*time_)*.5, .2, .4), pendulum_string_domain.y)*smoothstep(.06, .01, d_vertical_line);\n    \n    color += mix(lg, vec3(sin(14.*time_)*.5, .2, .4), p.x) * smoothstep(.04, .01, d_circle);\n    color += mix(lb, vec3(sin(14.*time_))*.5, 2.5*length(circle_domain + vec2(-.2)) - .001)\n             * smoothstep(.02, .01, d_disk);\n    \n    if(p.y > 2.01) color= vec3(0.);\n    // ---------------------------------------------------------------------\n   \n    color *= .12*diffuse * (vec3(250., 250., 175.) / 255.);\n   \n    fragColor = vec4(color, 1.);\n}\n\nvec2 domain(vec2 uv, float s) {\n    return (2.*uv.xy-res_.xy) / res_.y*s;\n}","name":"Image","description":"","type":"image"}]}