{"ver":"0.1","info":{"id":"7lScDt","date":"1650395912","viewed":133,"name":"Box Mask vignette","username":"nebbul","description":"draw a box mask with a smooth falloff as a vignette that scales with resolution","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["square","box","mask"],"hasliked":0,"parentid":"7dlyR7","parentname":"Box Mask"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define THICKNESS 0.2\n#define FALLOFF 0.1\n\n// math from Unreal engine node BoxMask-3D\nfloat boxMask(vec2 uv, vec2 pivot, vec2 bounds, float falloff)\n{\n\tvec2 p = abs(uv - pivot);\n\tp = max(p - (bounds * 0.5), 0.);\n\t\n\treturn 1.0 - min(length(p) / max(falloff, 0.00001), 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // UVs\n\tvec2 uv = fragCoord.xy/iResolution.yy;\n\n    float aspect = iResolution.x / iResolution.y;\n    \n    vec2 box_position = vec2(0.5 * aspect, 0.5); // center of screen\n\n    vec2 box_bounds = vec2(aspect - THICKNESS, 1.-THICKNESS);\n\n    float box = boxMask(uv, box_position, box_bounds, FALLOFF);\n    \n    float box_a = cos(box * 3.14f);\n    float box_b = 1.-smoothstep(0.,1., box);\n    \n    float line = (sin(iTime * 2.) + 1.0) / 2.0;\n    vec3 clr;\n    if(fragCoord.x/iResolution.x < line - 0.001) clr = mix(vec3(0.,0.,0.), vec3(1., 1., 1.), box_a);\n    if(fragCoord.x/iResolution.x > line + 0.001) clr = mix(vec3(0.,0.,0.), vec3(1., 1., 1.), box_b);\n    \n    fragColor = vec4(clr, 1.);\n}","name":"Image","description":"","type":"image"}]}