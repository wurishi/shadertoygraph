{"ver":"0.1","info":{"id":"wlGBDm","date":"1614452347","viewed":89,"name":"Simple Sin Color","username":"JosueFCONO","description":"A simple practise graphing sins using different offset and color channels. \nJust for myself and it's public in case any beginner like me finds it of use\n\nHope the long names are not an eyesore, i like names i can read\n\nC&C welcome","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["graph"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float remapSinTo01(float sinValue)\n{\n    return (sinValue + 1.0f) * 0.5f;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord)/(iResolution.xy);\n    \n    ///Define the time mults to evaluate sin.\n    const float blueTimeMult = 2.0f;\n    const float greenTimeMult = 2.2f;\n    const float redTimeMult = 2.4f;\n    \n    ///Define offsets for the sin, so they don't merge immediately\n    const float blueTimeOffset = 0.0f;\n    const float greenTimeOffset = 0.25f;\n    const float redTimeOffset = 0.5f;\n    \n    const float lineWidth = 0.5f;\n    \n    ///Calculate 3 sins, one for each color with a small offset and different time rate\n    float sinValueBlue =   remapSinTo01(sin(iTime * blueTimeMult  + uv.x + blueTimeOffset));\n    float sinValueGreen =  remapSinTo01(sin(iTime * greenTimeMult + uv.x + greenTimeOffset));\n    float sinValueRed =    remapSinTo01(sin(iTime * redTimeMult   + uv.x + redTimeOffset));\n\n    ///Calculate the pixel's YCoord distance to the current Y sinValue on that specific X Coord.\n    ///Remap it using linewidth\n    float distToSinValueBlue =  clamp(abs(uv.y - sinValueBlue), 0.0f, lineWidth) / lineWidth;    \n    float distToSinValueGreen = clamp(abs(uv.y - sinValueGreen), 0.0f, lineWidth) / lineWidth;\n    float distToSinValueRed = clamp(abs(uv.y - sinValueRed), 0.0f, lineWidth) / lineWidth;\n\n    // Build the color using the three distances.\n    vec3 col = vec3(1.0f - distToSinValueRed, 1.0f - distToSinValueGreen, 1.0f - distToSinValueBlue);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}