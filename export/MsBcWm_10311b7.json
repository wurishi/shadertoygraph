{"ver":"0.1","info":{"id":"MsBcWm","date":"1492340265","viewed":105,"name":"FINALE GRAPRG","username":"ideadnayou","description":"GG","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["gg"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PATTERN 8\n\n#define WOBBLE false\n#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n\n\nmat2 rotate(float angle)\n{\n    return mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n}\n\nmat2 scale(vec2 value)\n{\n    return mat2(value.x,0,0,value.y);\n}\n\nvec3 createPolygon(vec2 pos, vec2 uv, int sides, float ratio, vec3 color)\n{\n    // Position\n    vec2 shapePos = vec2(pos.x*ratio,pos.y);\n    uv -= shapePos;\n    uv *= rotate(-iTime);\n    uv *= scale(vec2(abs(sin(iTime))));\n    \n    // Angle and radius from the current pixel\n\tfloat a = atan(uv.x,uv.y)+PI;\n\tfloat rad = TWO_PI/float(sides);\n    \n    // Shaping function that modulate the distance\n\tfloat dist = cos(floor(.5+a/rad)*rad-a)*length(uv);\n    dist = step(dist,.2);\n    \n    return dist * color;\n}\n\n\nfloat random (in vec2 uv) {\n    return fract(sin(dot(uv.xy, vec2(12.9898,78.233)))*43758.5453123);\n}\n\nfloat rand(vec2 uv){\n    //return fract(sin(dot(uv, vec2(12.9898,78.233)))*10000.*iTime);\n\t//return fract(sin(dot(uv, iMouse.xy))*10000.);\n\t//return (fract(sin(dot(uv, vec2(12., 70.)))*100000.));\n    return (fract(sin(dot(uv, vec2(12., 70.)))*43758.5453123));\n}\n\n// Value noise\nfloat noise(in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = rand(i);\n    float b = rand(i + vec2(1.0, 0.0));\n    float c = rand(i + vec2(0.0, 1.0));\n    float d = rand(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners porcentages\n    return mix(a, b, u.x) + \n            (c - a)* u.y * (1.0 - u.x) + \n            (d - b) * u.x * u.y;\n}\n\n// Gradient noise\nvec2 hash( vec2 x ){\n    const vec2 k = vec2( 0.3183099, 0.3678794 );\n    x = x*k + k.yx;\n    return -1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) );\n}\n\nfloat gnoise( in vec2 p ){\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( hash( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), \n                     dot( hash( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( hash( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), \n                     dot( hash( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\nmat2 rotate2d(float angle){\n  return mat2(cos(angle), - sin(angle), sin(angle), cos(angle));   \n}\n\n// Simplex noise\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\nfloat snoise(vec2 v) {\n    const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,  // -1.0 + 2.0 * C.x\n                        0.024390243902439); // 1.0 / 41.0\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n    vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    i = mod289(i); // Avoid truncation effects in permutation\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n        + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n\n#define OCTAVES 6\nfloat fbm (in vec2 uv) {\n    // Initial values\n    float value = 0.0;\n    float amplitud = .5;\n    float frequency = 0.;\n    \n    // Loop of octaves\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitud * noise(uv);\n        uv *= 2.;\n        amplitud *= .5;\n    }\n    return value;\n}\n\nfloat swirl(vec2 uv,float Time, float tails){\n\tfloat value;\n    float angle = atan(uv.y,uv.x) + Time;\n    float k = WOBBLE ? sin(Time)*2.0 : 1.0;\n    angle += length(snoise(uv*2.)) * k;\n    \n    value = cos(tails*angle);\n    return value;\n}\n\n#if PATTERN == 1\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n\tvec3 value;\n    \n    value = mix(value, vec3(.39, .265, .192), vec3(fbm(uv.yy*5.)));\n    value = mix(value, vec3(.93, .493, .502), random(uv.xx)*.02);\n   \n\tfragColor = vec4(value,1.0);\n}\n\n#elif PATTERN == 2\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x/iResolution.y;\n    uv.x*=ratio;\n    \n    vec2 shapePos = vec2(.5*ratio, .5);\n    uv -= shapePos;\n    float zoom = 2.;\n    float scale = .02;\n    vec3 value;\n    \n    float offset = snoise(uv*zoom+iTime*2.)*scale;\n    value += noise(uv)+offset;\n    \n\tfragColor = vec4(value,1.0);\n}\n\n#elif PATTERN == 3\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x/iResolution.y;\n    uv.x*=ratio;\n    float zoom = 2.;\n    float scale = .02;\n    vec2 shapePos = vec2(.5*ratio, .5);\n    uv -= shapePos;\n    vec3 value;\n    \n    float offset = snoise(uv*zoom+iTime*4.)*scale;\n    value += swirl(uv, iTime, .8) / vec3(1,0,0)+offset;\n   \tvalue += swirl(uv, iTime, .4) + vec3(1,0,0)+offset;\n       \n    fragColor = vec4(value,1.0); \n}\n\n#elif PATTERN == 4\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n   \tfloat ratio = iResolution.x/iResolution.y;\n    uv.x*=ratio;\n    float zoom = 2.;\n    float scale = .02;\n    vec2 shapePos = vec2(.5*ratio, .5);\n    uv -= shapePos;\n    vec3 value;\n    \n    float offset = snoise(uv*zoom+iTime*4.)*scale;\n    value += noise(uv*15.*iTime)+offset;\n\n    \n\tfragColor = vec4(value,1.0);\n}\n\n#elif PATTERN == 5\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n   \tvec3 value;\n    \n    value += noise(uv*20.+iTime)*vec3(1,0,0);\n    value += gnoise(uv*22.+iTime)*vec3(1,0,0);\n    value += gnoise(uv*12.+iTime)*vec3(1,0,0);\n    value += snoise(uv*10.+iTime)*vec3(1,1,0);\n    value += gnoise(uv*8.+iTime)*vec3(1,1,0);\n\t\n    fragColor = vec4(value,1.0);\n}\n\n#elif PATTERN == 6\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float r = iResolution.x/iResolution.y;\n    \n    vec2 tileIdx = floor(uv);\n    \n    uv = fract(uv);\n    uv.x *= r;\n    \n    vec2 shapePos = vec2(.5*r, .5);\n    float dis = distance(shapePos, uv)*2.;\n    uv -= shapePos;\n    \n    float angle = atan(uv.y,uv.x);\n   \tangle -= iTime*2.;\n        \n    float rad = floor(tan(dis*50.+iTime)-sin(angle*9.))*10.+2.;\n    vec3 a = createPolygon(vec2(0),uv,9,r,vec3(0.,1,0.));\n    a *= rad;\n    \n    a *= gnoise(uv*30.+iTime);\n    \n\tfragColor = vec4(vec3(a),1.0);\n}\n\n#elif PATTERN == 7\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x/iResolution.y;\n    \n    vec3 value;\n    \n    float id = floor(uv.y * 100.);\n    float r = rand(vec2(id));\n    value += step(.0, uv.x) - step(1., uv.x);\n    uv.y = r * 2.5 - (iTime*0.2) * rand(vec2(id));\n    uv.y = fract(uv.y);\n    uv.x += r + (iTime/20.) / rand(vec2(id));\n    uv.x = fract(uv.x);\n    \n    \n    vec3 color = vec3(uv.x+abs(sin(iTime/2.)),uv.y-abs(cos(iTime/2.)),2.);\n    value *= color;\n    value *= gnoise(uv)/fbm(uv.xx);\n        \n\tfragColor = vec4(vec3(value),1.0);\n}\n\n#elif PATTERN == 8\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x/iResolution.y;\n    uv.x*=ratio;\n    \n    vec2 shapePos = vec2(.5*ratio, .5);\n    uv -= shapePos;\n    float t = iTime;\n    \n    vec3 value;\n   \n    vec3 stains = vec3(fbm((uv*12.)*1.5))*abs(sin(iTime/3.)+1.);\n    \n    value = mix(value, vec3(.25,.5,.1),(smoothstep(0.03,.11,stains) - smoothstep(.1,.15,stains)));\n    \n    fragColor = vec4(value,1.0); \n}\n\n#endif","name":"Image","description":"","type":"image"}]}