{"ver":"0.1","info":{"id":"XlBBWR","date":"1515196308","viewed":175,"name":"Ray-marching + lambert shading","username":"Brendan","description":"A simple ray marcher with lambertian shading. I know the lighting and shading are very crude but this is my first ray-marcher and my first shader toy shader. There's also probably a ton of errors/inefficiencies in the code too.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float EPSILON = 0.001;\nconst vec3 light = normalize(vec3(5,3,-1));\nconst float limit = 100.0;\n\nfloat map(vec3 p){\n    vec3 q = fract(p) * 3.0 - 1.5;\n\n    return length(q)-0.3;\n}\n\nfloat march(vec3 o, vec3 r){\n \tfloat t = 0.0;\n    for(int i=0;i<64;++i){\n        vec3 p = o+r*t;\n        float d = map(p);\n        t+=d*0.3;\n        if(t>limit){\n            return limit;\n        }\n    }\n    return t;\n}\n\nvec3 getNormal(vec3 p) {\n    return normalize(vec3(\n        map(vec3(p.x+EPSILON,p.y,p.z))-map(vec3(p.x-EPSILON,p.y,p.z)),\n        map(vec3(p.x,p.y+EPSILON,p.z))-map(vec3(p.x,p.y-EPSILON,p.z)),\n        map(vec3(p.x,p.y,p.z+EPSILON))-map(vec3(p.x,p.y,p.z-EPSILON))\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n    uv = uv * 2.0 - 1.0;\n\n    uv.x*= iResolution.x/iResolution.y;\n    \n    float theta = iTime/10.0;\n    \n    //took me forever to figure out this\n    mat3 rotate = mat3(\n        cos(theta),sin(theta),0,\n        -sin(theta),cos(theta),0,\n        0,0,1\n        );\n\n    vec3 r = normalize(vec3(uv,2))*rotate;\n\n    vec3 o = vec3(iTime,0,iTime);\n\n    float t = march(o,r);\n\n    if((t == limit) || map(t * r + o)>EPSILON){\n        fragColor = vec4(0,0,0,1);\n    }else{\n\n    vec3 n = getNormal(t * r + o);\n\n    vec3 fc = dot(n,light)*vec3(0.1,0.2,0.5)*2.0;\n\n\tfragColor = vec4(fc, 1);\n\n    }\n}","name":"Image","description":"","type":"image"}]}