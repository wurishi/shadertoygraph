{"ver":"0.1","info":{"id":"tdKfDd","date":"1608287453","viewed":114,"name":"Radial progress","username":"farious","description":"A simple shader that creates a radial progress animation.\n\ndirection - controls the direction of the progress.\nmoveCenter - controls the center point for radial progress\nblurry - controls how much blurry the edge line is\nRADIAL -  1/0 if radial or not","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["radial","progress"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float limit = 3.141592 * 2.0;\nconst float direction = -1.; // -1.0 - right; 1.0 - left\n//const vec2 center = vec2(0.25, 0.25); // vec2(0.,0.) to center on screen\nconst float moveCenter = 0.;\nconst float blurry = 0.1;\n\n#define RADIAL 0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // ShaderToy Specific\n    vec2 center = vec2(0.5) - vec2(sin(iTime*0.25)*0.25, -cos(iTime*0.25)*0.25) * moveCenter;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy ;\n    float u_percentage = fract(iTime/10.);\n    // End ShaderToy\n    \n    vec4 u_color = vec4(1.0, 1., 1., 1.0);\n    float rightDir = step(0.0, direction);\n    \n#if RADIAL\n    vec2 bc = uv - center;\n    vec2 ab = vec2(0.0, -0.5);\n    float uvAngle = acos(dot(ab, bc) / (length(ab) * length(bc)));\n    float invertScale = step(bc.x, 0.);\n    float ngAngle = mix((1.0 - invertScale), invertScale, rightDir);\n    float negate = step(ngAngle, 0.0);\n    \n    uvAngle = mix(uvAngle, (limit - uvAngle), negate);\n    \n    float edge = limit * (1.0 - u_percentage);\n    float progress = smoothstep(edge - blurry, edge + blurry, uvAngle);\n#else\n    vec2 bc = uv;\n    float edge = u_percentage;\n    float progress = mix(smoothstep(edge - blurry*blurry, edge + blurry*blurry, bc.x), smoothstep(bc.x - blurry, bc.x + blurry, 1.0 - edge), rightDir);\n#endif\n    \n    float highlight = mix(1.0, 0.65, progress); // Shade between progressed and non-progressed\n    fragColor = highlight * texture(iChannel0, uv) * u_color;\n}","name":"Image","description":"","type":"image"}]}