{"ver":"0.1","info":{"id":"ttB3zz","date":"1558269715","viewed":97,"name":"basic_raytracer","username":"lqt0223","description":"my practice of implementing a basic raytracer","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raytracer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rotate2d(vec2 st, float a) {\n    float c = cos(a);\n    float s = sin(a);\n    mat2 t = mat2(c,-s,s,c);\n    return t*st;\n}\n\nbool ray_sphere_sect (vec3 ro, vec3 rd, vec3 sc, float r, out vec3 normal, out vec3 hp, out float dist){\n    vec3 sr = sc - ro;\n    float d = sqrt(pow(length(sr), 2.)-pow(r, 2.));\n    vec3 cp = ro + d * rd;\n    vec3 t = cp-sc;\n    if (length(t) < r) {\n        float lpt = sqrt(pow(r, 2.)-pow(length(t), 2.));\n        vec3 p = ro + (d - lpt) * rd;\n        hp = p;\n        dist = length(hp - ro);\n        normal = normalize(p-sc);\n    }\n    return length(t) < r;\n}\n\nbool ray_yplane_sect(vec3 ro, vec3 rd, float y, float x1, float x2, float z1, float z2, out vec3 hp, out float dist) {\n    vec3 rb = vec3(0.0,y,0.0);\n    vec3 bd=normalize(rb);\n    float a = dot(bd, rd);\n    float lrb = length(rb);\n    float lrd = lrb/a;\n    vec3 hitpoint = ro + lrd * rd;\n    hp = hitpoint;\n    dist = lrd;\n    return hitpoint.x > x1 && hitpoint.x < x2 && hitpoint.z > z1 && hitpoint.z < z2;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 st = vec3(fragCoord / iResolution.xy, 0.);\n    st = st * 2.-1.;\n    st.z = 0.;\n    st.x*=iResolution.x/iResolution.y;\n\n    vec3 c_light = vec3(3.,3.,-1.);\n    vec3 c_light2 = vec3(-3.,2.,-1.);\n    c_light = normalize(c_light);\n    c_light2 = normalize(c_light2);\n    st.xz = rotate2d(st.xz, -iTime*1.);\n    vec3 camera = vec3(0,0,-1.5);\n    camera.xz = rotate2d(camera.xz, -iTime*1.);\n    vec3 ray = st-camera;\n    ray = normalize(ray);\n    vec3 ns,np;\n    vec3 hps,hpp;\n    float hds,hdp;\n    bool rsr = ray_sphere_sect(camera, ray, vec3(0.),.35, ns, hps, hds);\n    bool rpr = ray_yplane_sect(camera, ray, -.45 + .1*sin(iTime), -1., 1., -1.,1., hpp,hdp);\n    vec3 temp, tempns,temp2,tempns2;\n    float tempf,tempf2;\n    vec3 light = normalize(c_light-hps);\n    vec3 lightp = normalize(c_light-hpp);\n    vec3 light2 = normalize(c_light2-hps);\n    vec3 lightp2 = normalize(c_light2-hpp);\n    vec3 camerav = normalize(camera - hps);\n    vec3 camerapv = normalize(camera - hpp);\n\n    float diff = clamp(dot(light, ns), 0.,1.) + .2;\n    float diff2 = clamp(dot(lightp, vec3(0,1,0)), 0.,1.) + .1;\n    float diff3 = clamp(dot(light2, ns), 0.,1.) + .2;\n    float diff4 = clamp(dot(lightp2, vec3(0,1,0)), 0.,1.) + .1;\n\n    float spec = pow(max(dot(reflect(-light, ns), camerav), .0), 64.);\n    float spec2 = pow(max(dot(reflect(-lightp, vec3(0,1,0)), camerapv), .0), 64.);\n    float spec3 = pow(max(dot(reflect(-light2, ns), camerav), .0), 64.);\n    float spec4 = pow(max(dot(reflect(-lightp2, vec3(0,1,0)), camerapv), .0), 1024.);\n\n    if (rsr && rpr) {\n        if (hds < hdp) {\n            fragColor = vec4(vec3(.4*diff + .4*diff3 + spec + spec3), 1.);\n\t    fragColor.rgb *= vec3(.99,.2,.2);\n\t} else {\n\t    fragColor = vec4(vec3(.4*diff2 + .4*diff4 + spec2 + spec4), 1.);\n\t    fragColor.rgb *= vec3(.0,.6,.99);\n\t}\n    } else if (rsr) {\n\tfragColor = vec4(vec3(.4*diff + .4*diff3 + spec + spec3), 1.);\n\tfragColor.rgb *= vec3(.99,.2,.2);\n    } else if (rpr) {\n\tbool shadow = ray_sphere_sect(hpp, lightp, vec3(0.), .25,tempns, temp, tempf);\n\tbool shadow2 = ray_sphere_sect(hpp, lightp2, vec3(0.), .25,tempns2, temp2, tempf2);\n\ttempf = 1./tempf;\n\ttempf = .15*tempf;\n\ttempf = pow(tempf, 3.);\n\ttempf2 = 1./tempf2;\n\ttempf2 = .15*tempf2;\n\ttempf2 = pow(tempf2, 3.);\n\tif (shadow) {\n\t    fragColor = vec4(vec3(.4*diff2 + .4*diff4 + spec2 + spec4), 1.);\n\t    fragColor.rgb *= vec3(.0,.6,.99);\n\t    fragColor.rgb -= tempf;\n\t    fragColor.rgb -= tempf2;\n\t} else {\n\t    fragColor = vec4(vec3(.4*diff2 + .4*diff4 + spec2 + spec4), 1.);\n\t    fragColor.rgb *= vec3(.0,.6,.99);\n\t}\n    } else {\n        fragColor = vec4(vec3(.4), 1.);\n    }\n}\n","name":"Image","description":"","type":"image"}]}