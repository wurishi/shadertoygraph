{"ver":"0.1","info":{"id":"DtjyRy","date":"1691936649","viewed":37,"name":"Lattices-test","username":"tancredi","description":"some lattices test","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["lattices"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const mat2 M = inverse(mat2(\n        1., 0.,\n        .5, sqrt(3.)/2.\n    ));\n    /*const mat2 M = inverse(mat2(\n        1., 0.,\n        sqrt(2.)/2., sqrt(2.)/2.\n    ));*/\n    \n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-iResolution.xy * .5)/iResolution.x;\n\n    \n    \n    uv = M * uv;\n    \n    \n    uv *= 10000./iResolution.x*(6.+2.*sin(iTime*.4));\n    \n    \n    vec2 uv_f = fract(uv);\n    vec2 uv_i = floor(uv);\n    uv_f = abs(.5-uv_f);\n    \n    \n    vec2 a = inverse(M) * uv_f;\n    if (uv_f.x+uv_f.y > .7) {\n        a = 1. - a;\n        uv_i = 1. + uv_i;\n    }\n    uv_f = M * a;\n    \n    float c = cos(1.5*iTime + 3.5*atan(uv_i.y/uv_i.x));\n    float s = sin(1.5*iTime + 3.5*atan(uv_i.x/uv_i.y));\n    \n    mat2 R = mat2(c,-s,s,c);\n    \n    uv_f = R*uv_f;\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    float t = sin(iTime);\n    float r = abs(t*uv_f.x-(1.-t*t*t)*uv_f.y);\n    float g = abs((1.-abs(t))*uv_f.x-abs(t)*uv_f.y);\n    float b = abs(t*t*cos(t)*uv_f.x-abs(1.-t*t*cos(t))*uv_f.y);\n\n    // Output to screen\n    fragColor = vec4(r,g,b,1.0);\n}","name":"Image","description":"","type":"image"}]}