{"ver":"0.1","info":{"id":"McjcR1","date":"1721930258","viewed":52,"name":"Fluid Neon","username":"Okarin","description":"A perlin noise based shader in neon style.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["procedural","noise","perlinnoise","fluid","neon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Made by Okarin (Hackalot)\n// Tu tu ruuuuuuu\n\n// 2D Noise function by:\n// By Morgan McGuire @morgan3d, http://graphicscodex.com\n// Reuse permitted under the BSD license.\n\nfloat hash(float p) { p = fract(p * 0.011); p *= p + 7.5; p *= p + p; return fract(p); }\nfloat hash(vec2 p) {vec3 p3 = fract(vec3(p.xyx) * 0.13); p3 += dot(p3, p3.yzx + 3.333); return fract((p3.x + p3.y) * p3.z); }\n\nfloat noise(vec2 x) {\n    vec2 i = floor(x);\n    vec2 f = fract(x);\n\n\t// Four corners in 2D of a tile\n\tfloat a = hash(i);\n    float b = hash(i + vec2(1.0, 0.0));\n    float c = hash(i + vec2(0.0, 1.0));\n    float d = hash(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\treturn mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\nfloat stacknoiselayer(vec2 fragCoord, float size, int layers)\n{\n    float ret = 0.0;\n    float layersize = size;\n    for(int i=0; i<layers; i++)\n    {\n\t//float iMusicEnergy=iTime + sin(iTime*5.0);\n        vec2 coord = fragCoord.xy * layersize - vec2(iResolution.y / 4.0, (iTime * (float(i) - 1.0)));\n        ret += noise(coord);\n        layersize = layersize + layersize;\n    }\n    return ret/float(layers);\n}\n\nfloat band(float x, float minx, float maxx)\n{\n    return (x > minx && x < maxx)?1.0:0.0;\n}\n\nvec3 applycolor(float image, vec3 color)\n{\n    return vec3(color.r * image,color.g * image,color.b * image);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 screen = vec3(0.0);\n    float v = 0.0;\n\n    v = stacknoiselayer(fragCoord, 0.005, 3);\n\n    vec3 color_1 = vec3(0.933, 0.98, 0.145);\n    vec3 color_2 = vec3(0.965, 0.38, 0.078);\n    vec3 color_3 = vec3(0.969, 0.271, 0.667);\n    vec3 color_4 = vec3(0.231, 0.898, 0.306);\n    vec3 color_5 = vec3(0.22, 0.576, 0.784);\n    vec3 color_6 = vec3(0.933, 0.22, 0.157);\n    vec3 color_7 = vec3(0.627, 0, 0.682);\n    \n    // Output to screen\n    for(float i=0.0; i<42.0; i++)\n    {\n        vec3 color = vec3(0.0, 0.0, 0.0);\n        color += color_1 * abs(step(step(0.0,i), step(10.0,i)) - 1.0);\n        color += color_2 * abs(step(step(10.0,i), step(16.0,i)) - 1.0);\n        color += color_3 * abs(step(step(16.0,i), step(20.0,i)) - 1.0);\n        color += color_4 * abs(step(step(20.0,i), step(26.0,i)) - 1.0);\n        color += color_5 * abs(step(step(26.0,i), step(32.0,i)) - 1.0);\n        color += color_6 * abs(step(step(32.0,i), step(38.0,i)) - 1.0);\n        color += color_7 * abs(step(step(38.0,i), step(42.0,i)) - 1.0);\n        \n        screen += applycolor(band(v, 0.02*i, 0.0204*i), color);\n        //screen += band(v, 0.02*i, 0.0204*i); // black and white bands\n    }\n    \n    //screen += vec3(v); //Noise only\n\n    fragColor = vec4(screen, 1.0);\n}","name":"Image","description":"","type":"image"}]}