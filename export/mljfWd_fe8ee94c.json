{"ver":"0.1","info":{"id":"mljfWd","date":"1694636623","viewed":20,"name":"Flower By AdamsMX","username":"AdamsMX","description":"Try to match the given flower patterns!\n\nBrownie points: how do you change the color of the flower from the center?","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["circle"],"hasliked":0,"parentid":"dljfWd","parentname":"Spinning Flower By AdamsMX"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * @author rah, inspired by jonobr1 / http://jonobr1.com/\n */\n\n/* \n * Output circle colors at given center pos and radius\n */\nvec4 flower(vec2 uv, vec2 center, float radius, vec3 color)\n{\n    // Get distance of point from center, get difference from given radius\n\tfloat d = length(center - uv) - radius;\n\tfloat t = clamp(d, 0.0, 1.0);\n    \n    // If point is smaller than radius, set color alpha to 1, otherwise 0\n\treturn vec4(color, 1.0 - t);\n}\n\n/*\n * Your work here!\n */\nfloat computePulsingRadius(vec2 uv)\n{\n    float radius = 0.25 * iResolution.y;\n    float time = iTime;\n    \n    // Centered uv\n    vec2 uvCenter = (2.0f * uv - iResolution.xy);\n    uvCenter = rotatePoint2d(uvCenter, vec2(2.0f), time);\n    // Get pixel angle around the center\n    float a = atan(uvCenter.x,uvCenter.y);\n    \n    float amp =  impulse(.0f, .5f, sin(time) * 0.5 + 0.5) * sin(30.f * a);\n    return radius + 50.f * amp;\n}\n\nfloat computeSpinningRadius(vec2 uv)\n{\n    float radius = 0.25 * iResolution.y;\n    float time = iTime;\n    \n    // Centered uv\n    vec2 uvCenter = (2.0f * uv - iResolution.xy);\n    uvCenter = rotatePoint2d(uvCenter, vec2(2.0f), time);\n    // Get pixel angle around the center\n    float a = atan(uvCenter.x,uvCenter.y);\n    \n    float amp =  abs(fract(5.f * a / PI2) - 0.5);\n    return radius + 150.f * amp * sin(time);\n}\n\nfloat computeCustomRadius(vec2 uv)\n{\n    float radius = 0.25 * iResolution.y;\n    float time = 2.f * iTime;\n    \n    // Centered uv\n    vec2 uvCenter = (2.0f * uv - iResolution.xy);\n    uvCenter = rotatePoint2d(uvCenter, vec2(2.0f), time);\n    // Get pixel angle around the center\n    float a = atan(uvCenter.x,uvCenter.y);\n    int count = int(ceil(time / PI2));\n    count = count % 10;\n    \n    float amp =  abs(fract(float(count) * a / PI2) - 0.5);\n    return radius + 150.f * amp * sin(time);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 uv = fragCoord.xy;\n\tvec2 center = iResolution.xy * 0.5;\n    \n#define PULSING 0\n#define SPINNING 0\n#define CUSTOM 1\n   \n#if PULSING\n\tfloat radius = computePulsingRadius(uv);\n#elif SPINNING\n    float radius = computeSpinningRadius(uv);\n#elif CUSTOM\n    float radius = computeCustomRadius(uv);\n#endif    \n    // Background layer\n\tvec4 layer1 = vec4(rgb(255.0, 255.0, 210.0), 1.0);\n\t\n\t// Circle\n\tvec3 red = rgb(225.0, 50.0, 70.0);\n    vec3 yellow = rgb(255.0, 255.0, 210.0);\n    \n    \n\tvec4 layer2 = flower(uv, center, radius, red);\n\tvec4 layer3 = flower(uv, center, radius, red);\n    \n\t// Blend the two\n\tfragColor = mix(layer1, layer2, layer2.a);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI2 6.283185f\n#define PI 3.1415926f\n/*\n * Toolbox functions! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */ \nfloat bias(float t, float b) {\n    return (t / ((((1.0/b) - 2.0)*(1.0 - t))+1.0));\n}\n\n/*\n * Basic Utilities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */\n\n\n/* \n * Rotate an input point about some center by angle\n */\nvec2 rotatePoint2d(vec2 uv, vec2 center, float angle)\n{\n    vec2 rotatedPoint = vec2(uv.x - center.x, uv.y - center.y);\n    float newX = cos(angle) * rotatedPoint.x - sin(angle) * rotatedPoint.y;\n    rotatedPoint.y = sin(angle) * rotatedPoint.x + cos(angle) * rotatedPoint.y;\n    rotatedPoint.x = newX;\n    return rotatedPoint;\n}\n\n/*\n * Make a vec3 color from rgb values [0, 255]\n */\nvec3 rgb(float r, float g, float b)\n{\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n\nfloat GetBias(float x, float bias)\n{\n  return (x / ((((1.0/bias) - 2.0)*(1.0 - x))+1.0));\n}\n\nfloat GetGain(float x, float gain)\n{\n  if(x < 0.5)\n    return GetBias(x * 2.0,gain)/2.0;\n  else\n    return GetBias(x * 2.0 - 1.0,1.0 - gain)/2.0 + 0.5;\n}\n\nfloat impulse(float c, float w, float x)\n{\n    x = abs(x - c);\n    if(x > w) return 0.f;\n    x /= w;\n    return 1.f - x * x * (3.f - 2.f * x);\n}","name":"Common","description":"","type":"common"}]}