{"ver":"0.1","info":{"id":"XfS3z3","date":"1704446562","viewed":46,"name":"Newton Fractal with shade","username":"12ff54e","description":"Newton Fractal of z^3+1, darker color means more iteration times till convergence.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 c_conj(vec2 a) {\n    return vec2(a.x, -a.y);\n}\n\nvec2 c_times(vec2 a, vec2 b) {\n    return vec2(a.x*b.x - a.y*b.y, a.x*b.y+a.y*b.x);\n}\n\nvec2 c_divide(vec2 a, vec2 b) {\n    return c_times(a, c_conj(b))/(b.x*b.x+b.y*b.y);\n}\n\n// https://en.wikipedia.org/wiki/HSL_and_HSV#From_RGB\nvec3 rgb2hsl(vec3 rgb_color) {\n    float r = rgb_color.r;\n    float g = rgb_color.g;\n    float b = rgb_color.b;\n\n    float max_val = max(r, max(g, b));\n    float min_val = min(r, min(g, b));\n    float chroma = max_val - min_val;\n\n    float l = .5*(max_val+min_val);\n    float s,h;\n    if(chroma == 0.) {\n        h = 0.;\n    } else if(max_val == r) {\n        h = mod((g-b)/chroma, 6.)/6.;\n    } else if(max_val == g) {\n        h = ((b-r)/chroma+2.)/6.;\n    } else if(max_val == b) {\n        h = ((r-g)/chroma+4.)/6.;\n    }\n\n    if(l==0.||l==1.) {\n        s = 0.;\n    } else {\n        s = (max_val-l)/min(l, 1.-l);\n    }\n\n    return vec3(h, s, l);\n}\n\nfloat hsl2rgb_f(float n, vec3 hsl_color) {\n    float h = hsl_color.x;\n    float s = hsl_color.y;\n    float l = hsl_color.z;\n\n    float a = s*min(l, 1.-l);\n    float k = mod(n+12.*h, 12.);\n\n    return l - a*max(-1., min(1., min(k-3., 9.-k)));\n}\n\n// https://en.wikipedia.org/wiki/HSL_and_HSV#HSL_to_RGB_alternative\nvec3 hsl2rgb(vec3 hsl_color) {\n    return vec3(hsl2rgb_f(0., hsl_color), hsl2rgb_f(8., hsl_color), hsl2rgb_f(4., hsl_color));\n}\n\nvec3 darker(vec3 color, float r) {\n    vec3 hsl = rgb2hsl(color);\n    hsl.z = hsl.z*(1.-r);\n    return hsl2rgb(hsl);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates\n    vec2 z = (fragCoord/iResolution.xy-vec2(0.5,0.5))*4.*vec2(iResolution.x/iResolution.y, 1);\n    vec2 mouse_n = (iMouse.xy/iResolution.xy-vec2(0.5,0.5))*4.*vec2(iResolution.x/iResolution.y, 1);\n\n    const float omega = .1;\n    float theta = iTime*omega;\n    mat2 rot = mat2(cos(theta), -sin(theta), sin(theta), cos(theta));\n    \n    vec2 z0 = rot*vec2(-1, 0);\n    // vec2 z0 = mouse_n;\n    vec2 z1 = rot*vec2(0.5, -0.866025);\n    vec2 z2 = rot*vec2(0.5, 0.866025);\n\n    const int n = 20;\n    const float eps = 1.e-4;\n    float delta;\n    int iter;\n    for(iter = 0; iter < n; ++iter) {\n        vec2 f = c_times(z-z0, c_times(z-z1, z-z2));\n        vec2 fp = 3.*c_times(z, z)-2.*c_times(z0+z1+z2, z)+(c_times(z0, z1)+c_times(z1, z2)+c_times(z2, z0));\n        vec2 dz = c_divide(f, fp);\n        z = z - dz;\n        delta = length(dz);\n        if(delta < eps) {\n            break;\n        }\n    }\n\n    if(delta >= eps) {\n        fragColor = vec4(vec3(0), 1);\n        return;\n    }\n    \n    float d = 10.;\n    vec3 color;\n    if(d > distance(z0, z)) {\n        d = distance(z0, z);\n        color = vec3(0.368417, 0.506779, 0.709798);\n    }\n    if (d > distance(z1, z)) {\n        d = distance(z1, z);\n        color = vec3(0.560181, 0.691569, 0.194885);\n    }\n    if (d > distance(z2, z)) {\n        d = distance(z2, z);\n        color = vec3(0.880722, 0.611041, 0.142051);\n    }\n\n    color = darker(color, float(iter)/float(n));\n        \n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}