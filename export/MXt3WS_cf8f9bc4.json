{"ver":"0.1","info":{"id":"MXt3WS","date":"1716973389","viewed":44,"name":"curve_fyw","username":"dawanzhi","description":"curve_test","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["curve"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot(float angle) {\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat2(c, -s, s, c);\n}\n\nfloat myCurve(vec2 uv, float angle, float scale) {\n    uv.x*=iResolution.x/iResolution.y;\n    uv *= rot(angle);\n    uv *= scale;\n    float w = 1.0 / iResolution.y;\n    float ang = atan(uv.x, uv.y);\n    float d = length(uv);\n    float curve = d - sin(3.0 * ang);\n    float c = smoothstep(10.0 * w, -w, curve);\n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    //uv -= 0.5;\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec3 col = vec3(0.0);\n    col += myCurve(uv-vec2(0.15, 0.7), iTime, 4.0) * vec3(1.0, 0.0, 0.0);\n    col += myCurve(uv - vec2(0.45, 0.3), 2.0*iTime, 4.0) * vec3(0.0, 1.0, 0.0);\n    col += myCurve(uv - vec2(0.75, 0.7), 4.0*iTime, 6.0) * vec3(0.0, 1.0, 1.0);\n    col += myCurve(uv - vec2(0.75, 0.3), 10.0*iTime, 8.0) * vec3(0.0, 0.0, 1.0);\n    //col = vec3(1.0) - col;\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}