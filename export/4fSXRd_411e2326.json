{"ver":"0.1","info":{"id":"4fSXRd","date":"1706677086","viewed":64,"name":"point-line-shader-atan","username":"rikardio","description":"Point to line\nSome Gottfried JÃ¤ger in there some where too.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","atan","genuary2024","genuary30"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415\n#define R iResolution.xy\n// Timing function, reverse, slow down and give some time for line\n// to move across the screen\n#define T max(0., fract(-iTime *.2) - .75) * 20.\n\nvoid mainImage(out vec4 C, vec2 U){\n  // Normalize uv to -1/1 with center at 0,0, also scale to zoom\n  vec2 u = (U - R * .5) / R.y * (1. + T * T);\n  // This is the fun part, warp position with\n  // trigonometry functions. Try sin, tan, atan etc\n  u += atan(length(u) * 5.-2.) * T * T; //\n  // animate line\n  u.x -= fract(iTime*.2)*1.4-.35;\n  // atan mapped to uv\n  float v = smoothstep(-PI, PI,  atan(u.y, u.x));\n  // this is not good practice, but good for code golf\n  // better to do C = vec4(vec3(v+.1), 1.);\n  C.rgb += v+.1;\n}\n","name":"Image","description":"","type":"image"}]}