{"ver":"0.1","info":{"id":"wd3yWX","date":"1601837714","viewed":124,"name":"Mixing Periodic Functions","username":"Ezra_Szanton","description":"Interpolates between a circle and a lissajous curve","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["sine"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 square(vec2 uv, vec2 point, float size, vec3 color)\n{\n    vec3 col = color;\n    if(uv.x < point.x - size || uv.x > point.x + size || uv.y < point.y - size || uv.y > point.y + size)\n        col = vec3(0);\n    \n    \n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float numPoints = 100.;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy - 0.5;\n    uv.x = uv.x * iResolution.x / iResolution.y;\n    uv *= 4.2;\n    \n    vec3 col = vec3(0.);\n    \n    for(float i = 0.; i < 1.; i += 1./numPoints){\n        vec2 pos = vec2((i-0.5) * 5., 0.5  * sin(iTime*5. + i * 10.));\n        \n        vec2 circle = vec2(0.4 * cos(iTime*0.5 + i * 0.9 * sin(iTime / 10.12) * 100.), 0.5 * sin(iTime/5. + i * 100.));\n        \n        float siny = sin(iTime / 4.)*0.5 + 0.5;\n        \n        vec2 m = mix(pos, circle, siny * siny);\n        \n        if(uv.x - m.x < .5){\n        col += square(uv, m, (uv.y+2.)/100., vec3(0.7, 0.2, abs(fract(i + iTime/4.2234)*2. - 1. )));\n        }\n        \n    }\n    //col += square(uv, vec2(0., 0.), 2.);\n\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}