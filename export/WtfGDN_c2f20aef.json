{"ver":"0.1","info":{"id":"WtfGDN","date":"1556556320","viewed":226,"name":"Schrodinger","username":"kindpotato","description":"Here is my attempt at the schrodinger equation. Click to make a \"particle\" that moves in a random direction. The blue shows the energy well which is the distance from the center squared. Credit to wyatt","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["wavefunctionschrodinger"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 get(float x ,float y,vec2 coord){\n    return texture(iChannel0,(coord.xy+vec2(x,y))/iResolution.xy).rg;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 toCenter = fragCoord-0.5*iResolution.xy;\n    float energyWell = length(toCenter);\n    energyWell *= 0.000001*energyWell;\n    vec2 W = get(0.,0.,fragCoord);\n    \n    fragColor = vec4(0.2*(atan(W.x,W.y)/pi+1.)*length(W),length(W)/10.,energyWell,1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec2 get(float x ,float y,vec2 coord){\n    vec2 pos = coord + vec2(x,y);\n    if (pos.x > iResolution.x || pos.x < 0. || pos.y > iResolution.y || pos.y < 0.)\n   \t\treturn vec2(0);\n    return texture(iChannel0,(coord+vec2(x,y))/iResolution.xy).xy;\n}\n\nvec2 particle(vec2 coord){\n\tvec2 pos = coord;\n    float angle = dot(pos,vec2(cos(iTime/2.),sin(iTime/2.)));\n    vec2 W = vec2(cos(angle),sin(angle));\n\n    W *= normal(0.04*length(coord));\n    return W;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    if (iFrame < 4){\n    \tfragColor = vec4(0);\n        return;\n    }\n    vec2 W = get(0.,0., fragCoord);\n    if (iMouse.z > 0.1){\n    \tW += particle(fragCoord-iMouse.xy);\n    }\n    vec2 fromCenter = fragCoord.xy - 0.5*iResolution.xy;\n    float potential = dot(fromCenter,fromCenter)/20000.;\n    /*if (potential < 0.3)\n        potential = 0.3;*/\n    vec2 dWdt = (get(0.,-1., fragCoord)+get(0.,1., fragCoord)+get(1.,0., fragCoord)+get(-1.,0., fragCoord))/4.-W;\n    \n    dWdt += W*potential;\n    dWdt = 0.01*times(dWdt,vec2(0,1)); //Rate of curvature change in wave function times -i\n    \n    W += dWdt;\n    fragColor = vec4(W,0,0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define pi\nvec2 times(vec2 a, vec2 b)\n{\n    return vec2(a.x*b.x - a.y*b.y,a.x*b.y+a.y*b.x);\n}\nfloat normal(float x){\n    return exp(-x*x);\n}\nvec2 curve(vec2 a, vec2 b, vec2 c){\n\treturn (a+c)-2.*b;\n}","name":"Common","description":"","type":"common"}]}