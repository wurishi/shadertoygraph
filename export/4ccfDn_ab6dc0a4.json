{"ver":"0.1","info":{"id":"4ccfDn","date":"1732903247","viewed":80,"name":"chat gpt remake","username":"nayk","description":"create by gpt chat","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["particles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Center of the screen\n    vec2 center = vec2(0.5, 0.5);\n    \n    // Time variable for animation\n    float t = iTime;\n\n    // Number of circles and their size\n    float numCircles = 20.0;\n    float maxSize = 2.1;\n\n    // Result color\n    vec3 resultCol = vec3(0.0);\n\n    // Loop through the number of circles\n    for (float i = 0.0; i < numCircles; i++) {\n        // Calculate the angle and radius for each circle\n        float angle = (i / numCircles) * 6.28318; // 2 * PI\n        float radius = maxSize * 0.5 * (1.0 + sin(t + i)); // Pulsating effect\n\n        // Position of the circle\n        vec2 pos = center + radius * vec2(cos(angle), sin(angle));\n\n        // Calculate the distance from the current pixel to the circle's position\n        float dist = length(uv - pos);\n\n        // Color based on the distance and time\n        vec3 color = vec3(0.5 + 0.5 * sin(t + i), 0.5 + 0.5 * cos(t + i), 0.5 + 0.5 * sin(t + i * 2.0));\n\n        // If the current pixel is within the radius of the circle, add its color\n        if (dist < radius) {\n            resultCol += color * (1.0 - dist / radius); // Fade effect towards the edges\n        }\n    }\n\n    // Output to screen\n    fragColor = vec4(resultCol, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}