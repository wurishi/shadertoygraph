{"ver":"0.1","info":{"id":"MsVfDG","date":"1530736663","viewed":459,"name":"Ripple mouse","username":"ma77os","description":"Ripple studies 2","likes":14,"published":1,"flags":32,"usePreview":1,"tags":["ripple"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright © 2020 André Mattos\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n//\n// Forked from https://www.shadertoy.com/view/4dK3Ww\n// TODO: \n// - add direction of propagation, not only on center\n// - add noise to propagation, it's too regular\n// - add global noise to displace river constantly\n// - consider to use the faster shader: https://www.shadertoy.com/view/Xsd3DB\n\n\n\n#define TEXTURED 1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 q = fragCoord.xy/iResolution.xy;\n\n#if TEXTURED == 1\n    \n    vec3 e = vec3(vec2(1.)/iResolution.xy,0.);\n    float p10 = texture(iChannel0, q-e.zy).x;\n    float p01 = texture(iChannel0, q-e.xz).x;\n    float p21 = texture(iChannel0, q+e.xz).x;\n    float p12 = texture(iChannel0, q+e.zy).x;\n    \n    // Totally fake displacement and shading:\n    vec3 grad = normalize(vec3(p21 - p01, p12 - p10, 1.));\n    vec4 c = texture(iChannel1, fragCoord.xy*2./iChannelResolution[1].xy + grad.xy*.35);\n    vec3 light = normalize(vec3(.2,-.5,.7));\n    float diffuse = dot(grad,light);\n    float spec = pow(max(0.,-reflect(light,grad).z),32.);\n    //fragColor = mix(c,vec4(.7,.8,1.,1.),.25)*max(diffuse,0.) + spec;\n    //fragColor = c*max(diffuse,0.);\n    //fragColor = c+ spec;\n    fragColor = c;\n    \n#else\n    \n    float h = texture(iChannel0, q).x;\n    float sh = 1.35 - h*2.;\n    vec3 c =\n       vec3(exp(pow(sh-.75,2.)*-10.),\n            exp(pow(sh-.50,2.)*-20.),\n            exp(pow(sh-.25,2.)*-10.));\n    fragColor = vec4(c,1.);\n\n#endif\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//\n// Adapted from https://www.shadertoy.com/view/4dK3Ww\n\n#define rain 0\n#define depth 20.\n#define velPropagation 1.4\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 pixelToUV = vec2(velPropagation)/iResolution.xy;\n   vec3 e = vec3(pixelToUV,0.);\n   vec2 q = fragCoord.xy/iResolution.xy;\n   \n   vec4 c = texture(iChannel0, q);\n   \n   float p11 = c.y;\n   \n   //getting adjacent pixels\n   float p10 = texture(iChannel0, q-e.zy).x;\n   float p01 = texture(iChannel0, q-e.xz).x;\n   float p21 = texture(iChannel0, q+e.xz).x;\n   float p12 = texture(iChannel0, q+e.zy).x;\n   \n   float d = 0.;\n    \n   if (iMouse.z > 0.) \n   {\n      // Mouse interaction:\n      d = smoothstep(1.,depth,length(iMouse.xy - fragCoord.xy));\n   }\n#if rain == 1\n   else\n   {\n       \n      // Simulate rain drops\n      float t = iTime*2.;\n      vec2 pos = fract(floor(t)*vec2(0.456665,0.708618))*iResolution.xy;\n      float amp = 1.-step(.05,fract(t));\n      d = -amp*smoothstep(1.,depth,length(pos - fragCoord.xy));\n   }\n    \n#endif\n\n   // The actual propagation:\n   d +=  ((p10 + p01 + p21 + p12 - 2.) - (p11-.5)*2.);\n   d *= .99; // dampening\n   d *= float(iFrame>=2); // clear the buffer at iFrame < 2\n   d = d*.5 + .5;\n   \n   // Put previous state as \"y\":\n   fragColor = vec4(d, c.x, 0, 0);\n}","name":"Buffer A","description":"","type":"buffer"}]}