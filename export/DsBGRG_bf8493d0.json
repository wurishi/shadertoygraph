{"ver":"0.1","info":{"id":"DsBGRG","date":"1667753920","viewed":211,"name":"Windows 11 Boot Screen","username":"travertexs","description":"Windows 11 boot screen","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["windows","bootscreen","windows11","spinningcircle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//==========Configration==========//\n#define PI 3.14159265\n//#define Surface_Logo\n\nfloat scale        = 1.0;\nfloat anim_speed   = 0.7;\nfloat aa_level     = 1.375;\nfloat r_small_rate = 1.0 / 6.0;\n//==========Configration==========//\n\nvec2 GetClipCoord(in vec2 coord, in vec2 ar)\n{\n    coord = (coord / iResolution.xy) * 2.0 - 1.0;\n    return coord * ar;\n}\n\nfloat sdBox(in vec2 p, in float b)\n{\n    vec2 d = abs(p) - b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdCircle(in vec2 p, in float r)\n{\n    return length(p) - r;\n}\n\nfloat sdLogo(in vec2 p)\n{\n    float width_rate = 0.975;\n    float b = width_rate * 0.5;\n    vec2  c = vec2(b + (1.0 - width_rate));\n    \n    return sdBox(abs(p) - c, b);\n}\n\nvec3 Logo(in vec2 p, in float aa_width, out float t_logo)\n{\n#ifdef Surface_Logo\n    vec3 col      = vec3(1.0);\n#else\n    vec3 base_col = vec3(0.0, 0.2, 1.0);\n    vec3 col      = base_col * max(sqrt(p.y + 1.375), 0.001);\n#endif\n\n    t_logo = sdLogo(p);\n    t_logo = 1.0 - smoothstep(-aa_width, aa_width, t_logo);\n    col *= t_logo;\n    \n    return col;\n}\n\nfloat SpinningCircle(in vec2 p, in float aa_width)\n{\n    // Animation speed\n    float time = iTime * anim_speed;\n\n    // Get radius data\n    float r_big   = 1.0 / (r_small_rate + 1.0);\n    float r_small = r_big * r_small_rate;\n\n    // Ring\n    float t_ring = abs(sdCircle(p, r_big)) - r_small;\n          t_ring = 1.0 - smoothstep(-aa_width, aa_width, t_ring);\n    \n    // Circles\n    vec2  a = vec2(4.0 / 5.0, 5.0 / 4.0);\n          a = (pow(vec2(mod(time, 3.0) / 3.0), a) * 3.0) * PI * 2.0;\n    vec2  p_cir_1 = vec2(sin(a.x), cos(a.x)) * r_big;\n    vec2  p_cir_2 = vec2(sin(a.y), cos(a.y)) * r_big;\n\n    float t_cir =     sdCircle(p_cir_1 - p, r_small);\n          t_cir = min(sdCircle(p_cir_2 - p, r_small), t_cir);\n          t_cir = 1.0 - smoothstep(-aa_width, aa_width, t_cir);\n\n    vec2  p_dir = normalize(p);\n    float is_right_dir = step(0.0, p_dir.x) * 2.0 - 1.0;\n\n    float a_uv  = acos(p_dir.y * is_right_dir);\n          a_uv += step(is_right_dir, 0.0) * PI;\n    vec2  a_floor = floor(a / (PI * 2.0));\n\n    vec2 b_uv = a_uv + a_floor * PI * 2.0;\n         b_uv = step(vec2(0.0), min(b_uv - a.y, a.x - b_uv));\n    t_cir = min(1.0, max(b_uv.x, b_uv.y) + t_cir) * t_ring;\n    \n    return t_cir;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Coordinate\n    vec2 ar = max(iResolution.xy / iResolution.yx, vec2(1.0));\n    vec2 uv = GetClipCoord(fragCoord, ar) / scale;\n\n    vec3 col = vec3(0.0);\n    float aa_width = scale * aa_level / min(iResolution.x, iResolution.y);\n\n    float t_logo;\n    vec2 p_logo = (uv - vec2(0.0, 0.25)) * 7.0;\n    vec3 logo_col = Logo(p_logo, aa_width * 7.0, t_logo);\n    \n    vec2 p_sp_cir = (uv + vec2(0.0, 0.5)) * 22.0;\n    float t_sp_cir = SpinningCircle(p_sp_cir, aa_width * 22.0);\n    col = mix(logo_col, vec3(1.0), t_sp_cir);\n\n    // Output to screen\n    col = pow(col, vec3(1.0 / 2.2));\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}