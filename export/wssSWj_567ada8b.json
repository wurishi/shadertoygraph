{"ver":"0.1","info":{"id":"wssSWj","date":"1552245597","viewed":65,"name":"ShaderTaskmt","username":"mmtaipov","description":" cylinder, torus, cube,sphere,capsule","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["homework"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":" #define MAX_STEPS 150\n#define MAX_DISTANCE 100.\n#define SURFACE_DIST 0.0084\nbool cylinder=false,cube=false; \nfloat Capsule(vec3 p,vec3 a,vec3 b,float r)\n{\n vec3 abd=b-a;\n vec3 apd=p-a;\n    float tr=dot(abd,apd)/dot(abd,abd);\n    tr=clamp(tr,0.,1.);\n    vec3 m=a+tr*abd;\n    return(length(p-m)-r);\n    \n}\nfloat  Cylinder(vec3 p,vec3 a,vec3 b,float radius)\n{\n vec3 abd=b-a;\n vec3 apd=p-a;\n    float tr=dot(abd,apd)/dot(abd,abd);\n     \n    vec3 c=a+tr*abd;\n    float x=length(p-c)-radius;\n    float y=(abs(tr-0.5)-0.5)*length(abd);\n        float e=length(max(vec2(x,y),0.));\n    return e;\n    return(length(p-c)-radius);\n    \n}\nfloat  Torus(vec3 p ,vec2 radius)\n{\n  float x=length(p.xz)-radius.x;\n  return length(vec2(x,p.y))-radius.y;\n}\nfloat dBox(vec3 p,vec3 s)\n{\n    return length(max(abs(p)-s,0.));\n    \n}\nfloat GetDistance(vec3 p)\n{\n    \n vec4 s=vec4(3,2,8,0.7);   \n float sphereDist=length(p-s.xyz)-s.w;\n float planeDist=p.y;\n float cd=Capsule(p,vec3(0,1,6),vec3(1,2,6),0.2);\n    float td=Torus(p-vec3(0.2,0.6,12),vec2(1.5,0.5));\n    float bd=dBox(p-vec3(-2.,0.5,6),vec3(.5));\n    float cyld=Cylinder(p,vec3(0,1,3),vec3(3,0.3,4),0.2);\n float d=min(cd,planeDist);\n    d=min(d,td);\n    d=min(d,bd);\n    d=min(d,sphereDist);\n    d=min(d,cyld);\n    if (d==bd)\n        cube=true;\n    if (d==cd)\n        cylinder=true;\n    return d;\n}\n \nfloat RayMarch(vec3 ro,vec3 rd)\n{\n float dO=0.; \n    for (int i=0;i<MAX_STEPS;i++)\n    {\n        vec3 p=ro+rd*dO;\n        float dS=GetDistance(p);\n        dO+=dS;\n        if(dO>MAX_DISTANCE||dS<SURFACE_DIST)\n            break;\n        \n    }\n    \n    return dO;\n    \n}\n \n \nvec3  Normal(vec3 p)\n{\n float d=GetDistance(p);\n vec2 e=vec2(0.01,0);\n vec3 n=d-vec3(\n     GetDistance(p-e.xyy),\n     GetDistance(p-e.yxy),\n     GetDistance(p-e.yyx)\n         );    \n    return normalize(n);\n}\n \nfloat GetL(vec3 p)\n{\n    vec3 lightPos=vec3(0,6,6);\n    vec3 lightPos2=vec3(3,5,17);\n    lightPos.xz+=vec2(sin(iTime),cos(iTime))*3.;\n    vec3 l=normalize(lightPos-p);\n    vec3 l2=normalize(lightPos2-p);\n    vec3 n= Normal(p);\n    float diff,diff2;\n    if (cube==true)\n    {\n      diff=clamp(dot(n,l),0.,0.3);\n     diff2=clamp(dot(n,l2),0.,0.3);\n    }else if (cylinder==true)\n    { diff=clamp(dot(n,l),0.,0.7);\n     diff2=clamp(dot(n,l2),0.,0.7);\n    } else\n    {\n        diff=clamp(dot(n,l),0.,1.);\n     diff2=clamp(dot(n,l2),0.,1.);\n        \n    }\n    float d=RayMarch(p+n*SURFACE_DIST*2.,l);\n    float d2=RayMarch(p+n*SURFACE_DIST*2.,l2);\n    if(d<length(lightPos-p))\n    diff*=0.1;\n    if(d2<length(lightPos2-p))\n    diff2*=0.1;\n    return (diff+diff2);\n    \n}\n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     \n    vec2 uv = (fragCoord-0.35*iResolution.xy)/iResolution.y;\n\n      vec3 col=vec3(0.0);\n    vec3 ro=vec3(0,0.73,0);\n     \n    vec3 rd=normalize(vec3(uv.x,uv.y,1));\n    float dd=RayMarch(ro,rd);\n     \n    vec3 p=ro+rd*dd;\n     \n    float diff=GetL(p);\n    col=vec3(diff);\n    \n    \n    \n     \n    fragColor=vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}