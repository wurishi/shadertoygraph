{"ver":"0.1","info":{"id":"MfXyDN","date":"1721146663","viewed":24,"name":"Conway's Child","username":"Reversion","description":"See the comments at the beginning of the code to get some information, thanks! (Both Image and Sound)","likes":0,"published":1,"flags":8,"usePreview":0,"tags":["2d","starfield","hash","dot","gpusound"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// License: CC BY-SA 3.0\n// References: \n//    https://www.shadertoy.com/view/XtjcW3 created by patu\n//    https://www.shadertoy.com/view/3djSDD created by Junglefish\n\n#define PI 3.14159265\n#define H(P) fract(sin(dot(P,vec2(127.1,311.7)))*43758.545)\n#define pR(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\nvec3 RadarPing(in vec2 uv, in vec2 center, in float innerTail, \n               in float frontierBorder, in float timeResetSeconds, \n               in float radarPingSpeed, in float fadeDistance){\n    vec2 diff = center-uv;\n    float r = length(diff);\n    float time = mod(iTime, timeResetSeconds) * radarPingSpeed;\n   \n    float circle;\n    // r is the distance to the center.\n    // circle = BipCenter---//---innerTail---time---frontierBorder\n    //illustration\n    //https://sketch.io/render/sk-14b54f90080084bad1602f81cadd4d07.jpeg\n    circle += smoothstep(time - innerTail, time, r) * smoothstep(time + frontierBorder,time, r);\n\tcircle *= smoothstep(fadeDistance, 0.0, r); // fade to 0 after fadeDistance\n        \n    return vec3(circle);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  \n    vec2 uv = (fragCoord - .5 * iResolution.xy - .5) / iResolution.y;\n\n    uv *= 2.4; // FOV\n    \n    float time;\n    if (iTime < 9.*PI){time = iTime*0.2+0.2*PI;}\n    else {time = iTime*2. -16.*PI;}\n    float t = iTime < 9.*PI? iTime*.12:iTime*1.2;\n    \n    // camera\n    vec3 \n        vuv = vec3(sin(time * .3), 1., cos(time)), // up\n        ro = vec3(0., 0., 134.), // pos\n        vrp = vec3(5., sin(time) * (iTime < 9.*PI?0.:60.), 20.); // look at\n    \n    vrp.xz * pR(iTime);\n    vrp.yz * pR(iTime * .2);\n    \n    vec3\n    \tvpn = normalize(vrp - ro),\n        u = normalize(cross(vuv, vpn)),\n    \trd = normalize(\n            vpn + uv.x * u  + uv.y * cross(vpn, u)\n        ); // ray direction\n    \n    vec3 sceneColor = vec3(0.0, 0., 0.3); // background color\n    \n    vec3 flareCol = vec3(0.); // flare color accumulator   \n    float flareIntensivity = 0.; // flare intensity accumulator\n\n    for (float k = 0.; k < 400.; k++) {\n        float r = H(vec2(k)) * 2. - 1.; // random\n\n        // 3d flare position, xyz\n        vec3 flarePos =  vec3(\n            H(vec2(k) * r) * 20. - 10.,\n            r * 8.,\n            (mod(sin(k / 200. * PI * 4.) * 15. - t * 13. * k * .007, 25.))\n        );\n\t\t\n        float v = max(0., abs(dot(normalize(flarePos), rd)));\n        \n        // main dot\n        flareIntensivity += pow(v, 30000.) * 4.;\n        \n        // dot glow\n        flareIntensivity += pow(v, 1e2) * .15; \n        \n        // fade far\n        flareIntensivity *= 1.- flarePos.z / 25.; \n        \n        // accumulate\n        flareCol += vec3(flareIntensivity) * (vec3(sin(r * 3.12 - k), r, cos(k) * 2.)) * .3; \n    }\n    \n    sceneColor += abs(flareCol);\n    \n    // go grayscale from screen center\n    sceneColor = mix(sceneColor, sceneColor.rrr * 1.4, length(uv) / 2.);\n    \n    // explode\n    if (iTime >9.*PI-1. && iTime < 9.*PI+1.){\n        float fadeDistance = 20.0;\n        float resetTimeSec = 50.;\n        float radarPingSpeed = 1.2;\n        vec2 greenPing = vec2(0.0, 0.0);\n        vec3 radarCol = RadarPing(fragCoord, greenPing, 0.25, 0.025, resetTimeSec, \n                            radarPingSpeed, fadeDistance) * vec3(1.);\n        fragColor += vec4(radarCol, 1.0);\n    }\n    \n    // adjust contrast\n    fragColor.rgb = pow(sceneColor, vec3(1.1));\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// License: CC BY-SA 3.0\n//\n// This shader is for:\n//     A non-commercial, non-official rhythm game competition of the game Phigros, Li-Town Cup, as a secret track PV.\n//     A course in ShanghaiTech University, Fragment Shader Art (course code:ARTS1308) as hw12.\n//\n// References are listed around the functions.\n//\n// Related Song: Conway's Child, by Sta. This song is an original song for the game Tone Sphere.\n//     I do not own the original copyright of the song, but all the notes are analyzed by myself.\n//     It actually took me a long time to analyze so many notes XD\n//     Some rhythm and note may not be accurate, so there might be some parts that listens strange.\n//\n// Music will start playing after around 5 seconds, because it need to stay in sync with the video.\n\n#define PI 3.14159265\n\n#define BPM 171.\n\n#define p 1.059463094\n#define tau 6.2831\n\n//piano from https://www.shadertoy.com/view/ddtyzH\nfloat instrument1(int n, float t, float t0) {\n    if (t < t0) return 0.;\n    else {\n        float freq = 440. * p * p * pow(p, float(n));\n        float f = 0., a = 1.;\n        for (float k = 1.; k < 4.; k++) {\n            f += a * sin(tau * mod(freq * k * t, 1.)) * exp(-12.0*(t-t0)) ;\n            a /= 2.;\n        }\n        return f;\n    }\n}\n\n//choose instrument\nfloat play(int n, float t, float t0) {\n    return instrument1(n,t,t0);\n}\n\n#define C 1\n#define CH 2\n#define D 3\n#define DH 4\n#define E 5\n#define F 6\n#define FH 7\n#define G 8\n#define GH 9\n#define A 10\n#define AH 11\n#define B 12\n\n#define BEAT 0.35087719\n\n#define PL(i,a) s+=play(i, t, t0);t0+=BEAT*a/4.;\n\nvec2 mainSound( int samp, float time )\n{\n    // A 440 Hz wave that attenuates quickly overt time\n    float s = 0.;\n    float t=time;\n    float t0 = 9.*PI-16.*4.*BEAT;\n    t0+=BEAT; PL(DH+12,4.) PL(F,4.) PL(DH,4.) \n    PL(G,3.) PL(GH,3.) PL(G,2.) PL(DH,4.) PL(AH-12,4.)\n    PL(F,4.) PL(AH,4.) PL(F,4.) PL(CH,4.) PL(CH+12,16.)\n    \n    PL(DH+12,6.) PL(F,6.) PL(DH,4.) PL(G,4.) PL(AH,4.) PL(G,2.) PL(GH,2.) PL(AH,4.)\n    PL(F,4.) PL(FH,4.) PL(F,4.) PL(CH,2.) PL(CH+12,18.)\n    \n    t0+=BEAT; PL(DH+12,4.) PL(F,4.) PL(DH,4.) \n    PL(G,3.) PL(GH,3.) PL(G,2.) PL(DH,4.) PL(AH-12,4.)\n    PL(F,4.) PL(AH,4.) PL(F,4.) PL(CH,4.) PL(CH+12,16.)\n    \n    PL(DH+12,6.) PL(F,6.) PL(DH,4.) PL(G,4.) PL(AH,4.) PL(G,2.) PL(GH,2.) PL(AH,4.)\n    PL(F,4.) PL(FH,4.) PL(F,4.) PL(CH,2.) PL(CH+12,2.)\n    PL(GH,8./3.) PL(GH,8./3.) PL(GH,8./3.) PL(AH,8./3.) PL(AH,8./3.) PL(AH,8./3.)\n    \n    PL(AH-24,1.) PL(DH-12,1.) PL(G-12,1.) PL(AH-12,1.) \n    PL(DH-12,1.) PL(G-12,1.) PL(AH-12,1.) PL(DH,1.)\n    PL(G-12,1.) PL(AH-12,1.) PL(DH,1.) PL(G,1.)\n    PL(AH-12,1.) PL(DH,1.) PL(G,1.) PL(AH,1.)\n    PL(DH,1.) PL(AH,1.) PL(G,1.) PL(DH-12,1.)\n    PL(AH,1.) PL(G,1.) PL(DH-12,1.) PL(AH-12,1.)\n    PL(G,1.) PL(DH-12,1.) PL(AH-12,1.) PL(G-12,1.)\n    PL(DH-12,1.) PL(AH-12,1.) PL(G-12,1.) PL(DH-24,1.)\n    \n    PL(AH-24,1.) PL(D-12,1.) PL(G-12,1.) PL(D,1.) \n    PL(D-12,1.) PL(G-12,1.) PL(D,1.)  PL(G,1.)\n    PL(G-12,1.) PL(D,1.)  PL(G,1.) PL(C+12,1.)\n    PL(D,1.)  PL(G,1.) PL(C+12,1.) PL(G+12,1.)\n    \n    PL(F+12,1.) PL(E+12,1.) PL(C+12,1.) PL(G,1.)\n    PL(D,2.) PL(F,2.)\n    PL(G+12,2./3.) PL(F+12,2./3.) PL(E+12,2./3.) PL(C+12,2./3.) PL(G,2./3.) PL(E,2./3.)\n    PL(F+12,2./3.) PL(E+12,2./3.) PL(C+12,2./3.) PL(G,2./3.) PL(E,2./3.) PL(C,2./3.)\n    \n    PL(AH-24,1.) PL(DH-12,1.) PL(G-12,1.) PL(AH-12,1.) \n    PL(DH-12,1.) PL(G-12,1.) PL(AH-12,1.) PL(DH,1.)\n    PL(G-12,1.) PL(AH-12,1.) PL(DH,1.) PL(G,1.)\n    PL(AH-12,1.) PL(DH,1.) PL(G,1.) PL(AH,1.)\n    PL(DH,1.) PL(AH,1.) PL(G,1.) PL(DH-12,1.)\n    PL(AH,1.) PL(G,1.) PL(DH-12,1.) PL(AH-12,1.)\n    PL(G,1.) PL(DH-12,1.) PL(AH-12,1.) PL(G-12,1.)\n    PL(DH-12,1.) PL(AH-12,1.) PL(G-12,1.) PL(DH-24,1.)\n    \n    PL(AH-24,1.) PL(D-12,1.) PL(G-12,1.) PL(D,1.) \n    PL(D-12,1.) PL(G-12,1.) PL(D,1.)  PL(G,1.)\n    PL(G-12,1.) PL(D,1.)  PL(G,1.) PL(C+12,1.)\n    PL(D,1.)  PL(G,1.) PL(C+12,1.) PL(G+12,1.)\n    \n    PL(AH-36,1.) PL(C-24,1.) PL(F-24,1.) PL(AH-24,1.)\n    PL(C-12,1.) PL(F-12,1.) PL(AH-12,1.) PL(C,1.)\n    PL(F,1.) PL(AH,1.) PL(C+12,1.) PL(F+12,1.)\n    PL(G+12,2.) PL(G,2.)\n    \n    PL(AH-24,1.) PL(DH-12,1.) PL(G-12,1.) PL(AH-12,1.) \n    PL(DH-12,1.) PL(G-12,1.) PL(AH-12,1.) PL(DH,1.)\n    PL(G-12,1.) PL(AH-12,1.) PL(DH,1.) PL(G,1.)\n    PL(AH-12,1.) PL(DH,1.) PL(G,1.) PL(AH,1.)\n    PL(DH,1.) PL(AH,1.) PL(G,1.) PL(DH-12,1.)\n    PL(AH,1.) PL(G,1.) PL(DH-12,1.) PL(AH-12,1.)\n    PL(G,1.) PL(DH-12,1.) PL(AH-12,1.) PL(G-12,1.)\n    PL(DH-12,1.) PL(AH-12,1.) PL(G-12,1.) PL(DH-24,1.)\n    \n    PL(AH-24,1.) PL(D-12,1.) PL(G-12,1.) PL(D,1.) \n    PL(D-12,1.) PL(G-12,1.) PL(D,1.)  PL(G,1.)\n    PL(G-12,1.) PL(D,1.)  PL(G,1.) PL(C+12,1.)\n    PL(D,1.)  PL(G,1.) PL(C+12,1.) PL(G+12,1.)\n    \n    PL(F+12,1.) PL(E+12,1.) PL(C+12,1.) PL(G,1.)\n    PL(D,2.) PL(F,2.)\n    PL(G+12,2./3.) PL(F+12,2./3.) PL(E+12,2./3.) PL(C+12,2./3.) PL(G,2./3.) PL(E,2./3.)\n    PL(F+12,2./3.) PL(E+12,2./3.) PL(C+12,2./3.) PL(G,2./3.) PL(E,2./3.) PL(C,2./3.)\n    \n    PL(AH-24,1.) PL(DH-12,1.) PL(G-12,1.) PL(AH-12,1.) \n    PL(DH-12,1.) PL(G-12,1.) PL(AH-12,1.) PL(DH,1.)\n    PL(G-12,1.) PL(AH-12,1.) PL(DH,1.) PL(G,1.)\n    PL(AH-12,1.) PL(DH,1.) PL(G,1.) PL(AH,1.)\n    PL(DH,1.) PL(AH,1.) PL(G,1.) PL(DH-12,1.)\n    PL(AH,1.) PL(G,1.) PL(DH-12,1.) PL(AH-12,1.)\n    PL(G,1.) PL(DH-12,1.) PL(AH-12,1.) PL(G-12,1.)\n    PL(DH-12,1.) PL(AH-12,1.) PL(G-12,1.) PL(DH-24,1.)\n    \n    PL(AH-24,1.) PL(D-12,1.) PL(G-12,1.) PL(D,1.) \n    PL(D-12,1.) PL(G-12,1.) PL(D,1.)  PL(G,1.)\n    PL(G-12,1.) PL(D,1.)  PL(G,1.) PL(C+12,1.)\n    PL(D,1.)  PL(G,1.) PL(C+12,1.) PL(G+12,1.)\n    \n    PL(AH-36,1.) PL(C-24,1.) PL(F-24,1.) PL(AH-24,1.)\n    PL(C-12,1.) PL(F-12,1.) PL(AH-12,1.) PL(C,1.)\n    PL(F,1.) PL(AH,1.) PL(C+12,1.) PL(F+12,1.)\n    PL(G+12,2.) PL(G,2.)\n\n    return vec2(s);\n}","name":"Sound","description":"","type":"sound"}]}