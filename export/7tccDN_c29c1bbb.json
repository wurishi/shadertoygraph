{"ver":"0.1","info":{"id":"7tccDN","date":"1659848804","viewed":71,"name":"autogen 23 ","username":"asynth","description":"Generated by a program written in Rust.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["generative"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvec3 bi(vec3 x) { return 2. * x - 1.; }\nvec3 uni(vec3 x) { return 0.5 + 0.5 * x; }\n\nfloat tri(float x) { // triangle wave\n    float p = fract(x * .25 + .25) * 2. - 1.;\n    return 1. - 2.0 * abs(p);\n}\nvec3 tri(vec3 x) { // triangle wave\n    vec3 p = fract(x * .25 + .25) * vec3(2.) - vec3(1.);\n    return vec3(1.) - vec3(2.0) * abs(p);\n}\n\nvec3 well(vec3 x) { // a function that dips in the middle\n    return 1. - 2. / pow(1. + x*x, vec3(8.));\n}\n\nfloat quant(float a, float b) {\n    return b == 0.0 ? a : floor(a/b) * b;\n}\nvec2 quant(vec2 a, vec2 b) {\n    return vec2(\n        b.x == 0.0 ? a.x : floor(a.x/b.x) * b.x,\n        b.y == 0.0 ? a.y : floor(a.y/b.y) * b.y\n    );\n}\n\nvec3 quant(vec3 a, vec3 b) {\n    return vec3(\n        b.x == 0.0 ? a.x : floor(a.x/b.x) * b.x,\n        b.y == 0.0 ? a.y : floor(a.y/b.y) * b.y,\n        b.z == 0.0 ? a.z : floor(a.z/b.z) * b.z\n    );\n}\n\n\nvec3 sq(vec3 a) {\n    return a*a;\n}\n\nfloat sq(float a) {\n    return a*a;\n}\n\nvec3 sigmoid(vec3 a) {\n    return a / sqrt(1.0 + sq(a));\n}\n\nvec2 circ_inv(vec2 uv, vec2 center, float radius) {\n    float d = distance(uv, center);\n    if (d < radius) {\n        return uv;\n    } else {\n        float scale = sq(radius / d);\n        return (uv - center) * scale + center;\n    }\n}\n\n\nvec3 pthresh(float thresh, vec3 a, vec3 b, vec3 c) {\n    return vec3(\n        a.x < thresh ? b.x : c.x,\n        a.y < thresh ? b.y : c.y,\n        a.z < thresh ? b.z : c.z\n    );\n}\n\nvec2 xywarp(vec2 uv, vec2 a, vec2 b) {\n    return vec2(\n        uv.x + a.x * b.x,\n        uv.y + a.y * b.y\n    );\n}\n\nvec3 mix2(vec2 uv, vec3 a, vec3 b, vec3 c, vec3 d) {\n    return mix(mix(a, b, uv.xxx), mix(c, d, uv.xxx), uv.yyy);\n}\n\nvec2 mix2(vec2 uv, vec2 a, vec2 b, vec2 c, vec2 d) {\n    return mix(mix(a, b, uv.xx), mix(c, d, uv.xx), uv.yy);\n}\n\nfloat mix2(vec2 uv, float a, float b, float c, float d) {\n    return mix(mix(a, b, uv.x), mix(c, d, uv.x), uv.y);\n}\n\nfloat hash12(vec2 p)\n{\n    vec3 p3  = fract(p.xyx * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 noise(vec2 uv, vec2 period, float seed) {\n    vec2 quv = floor(uv / period) + seed;\n    vec2 fuv = mod(uv, period) / period;\n    float a = hash12(quv);\n    float b = hash12(quv + vec2(1.,0.));\n    float c = hash12(quv + vec2(0., 1.));\n    float d = hash12(quv + vec2(1.,1.));\n    \n    return vec3(mix2(smoothstep(0.,1.,fuv), a, b, c, d));\n} \n\nvec2 reflect_0(vec2 uv) { return vec2(uv.x, abs(uv.y)); }\nvec2 reflect_1(vec2 uv) { return vec2(abs(uv.x), uv.y); }\nvec2 reflect_2(vec2 uv) { return vec2(abs(uv.x), abs(uv.y)); }\nvec2 reflect_3(vec2 uv) { return uv.x > -uv.y ? uv : vec2(uv.y, uv.x); }\nvec2 reflect_4(vec2 uv) { return uv.x > uv.y ? uv : vec2(uv.y, uv.x); }\n\nvec2 repeat_0(vec2 uv, float q) { return vec2(quant(uv.x, q), uv.y); }\nvec2 repeat_1(vec2 uv, float q) { return vec2(uv.x, quant(uv.y, q)); }\nvec2 repeat_2(vec2 uv, float q) { return vec2(quant(uv.x, q), quant(uv.y, q)); }\nvec2 repeat_3(vec2 uv, float q) { return vec2(tri(uv.x / q) * q, uv.y); }\nvec2 repeat_4(vec2 uv, float q) { return vec2(uv.x, tri(uv.y / q) * q); }\nvec2 repeat_5(vec2 uv, float q) { return vec2(tri(uv.x / q) * q, tri(uv.y / q) * q); }\n\nvec2 rect_to_polar(vec2 uv) { return vec2(length(uv), atan(uv.y, uv.x)/1.570796); }\nvec2 polar_to_rect(vec2 uv) { float angle = uv.y*1.570796; return vec2(uv.x * cos(angle), uv.x * sin(angle)); }\n\nvec3 node_1(vec2 uv) {\n\tuv = repeat_4(uv, 0.5199);\n\tvec3 a1 = tri(vec3(uv.y)*5.8158 + 0.0511 + iTime*0.3663);\n\treturn a1;\n}\n\nvec3 node_2(vec2 uv) {\n\tuv = repeat_2(uv, 0.5745);\n\treturn node_1(uv);\n}\n\nvec3 node_3(vec2 uv) {\n\tuv = (mat2(1.3983,-0.9065,-0.7671,1.1574)*(uv-vec2(-0.0288,-0.7078)+vec2(-0.0288,-0.7078)));\n\treturn node_2(uv);\n}\n\nvec3 node_4(vec2 uv) {\n\tuv = reflect_2(uv);\n\tvec3 a1 = tri(node_3(uv)*1.6284 + 0.0768 + iTime*0.1506);\n\treturn a1;\n}\n\nvec3 node_5(vec2 uv) {\n\tuv = (mat2(-1.2604,-0.8446,0.7758,1.2577)*(uv-vec2(-0.1328,0.1964)+vec2(-0.1328,0.1964)));\n\treturn sq(vec3(uv.x));\n}\n\nvec3 node_6(vec2 uv) {\n\tvec3 a1 = noise(uv, vec2(0.4744918, 0.3874411), 0.946247);\n\tvec3 a2 = tri(vec3(uv.y)*1.4258 + 0.6081 + iTime*0.3907);\n\tvec3 a3 = vec3(0.3923, 0.4236, 0.6318);\n\tvec3 a4 = tri(vec3(uv.y)*2.9748 + 0.6849 + iTime*0.2398);\n\tuv = xywarp(uv, vec2(0.5934, -0.2431), min(mix(a1, a2, a3), a4).xy);\n\tvec3 b1 = vec3(0.8035, 0.3132, 0.1754);\n\tvec3 b2 = vec3(0.2253, 0.2789, 0.4909);\n\treturn (-(max(vec3(uv.x), b1) * b2));\n}\n\nvec3 node_7(vec2 uv) {\n\tuv = repeat_5(uv, 0.1630);\n\tvec3 a1 = well(vec3(uv.y)*5.0729 + 0.1714 + iTime*0.0508);\n\treturn a1;\n}\n\nvec3 node_8(vec2 uv) {\n\tvec3 a1 = tri(node_6(uv)*4.4342 + 0.0531 + iTime*0.2222);\n\tvec3 a2 = sin(vec3(uv.x)*2.3652 + 0.5404 + iTime*0.3436);\n\tvec3 a3 = noise(uv, vec2(0.24606767, 0.4134907), 0.311729);\n\tvec3 a4 = vec3(0.7700, 0.0009, 0.9911);\n\tvec3 a5 = well((a3 - sigmoid(quant(vec3(atan(uv.y, uv.x)), a4)))*1.2679 + 0.7074 + iTime*0.0783);\n\tuv = xywarp(uv, vec2(-0.1614, -0.6036), uni((node_4(uv) / (node_5(uv) + quant(a1, min(a2, a5))))).xy);\n\tvec3 b1 = noise(uv, vec2(0.31575212, 1.9231304), 0.253420);\n\tvec3 b2 = vec3(0.5585, 0.4346, 0.3769);\n\tvec3 b3 = sin(vec3(uv.y)*1.0688 + 0.0313 + iTime*0.1814);\n\tvec3 b4 = sin(node_7(uv)*5.3196 + 0.6728 + iTime*0.1369);\n\tvec3 b5 = vec3(0.7512, 0.6662, 0.3493);\n\tvec3 b6 = sin(mix(vec3(uv.x), vec3(uv.x), b5)*1.7678 + 0.7444 + iTime*0.1062);\n\tvec3 b7 = tri(mod((b2 / (((vec3(uv.y) - vec3(uv.y)) * mix(vec3(uv.x), quant(vec3(uv.x), vec3(uv.x)), b3)) + (b4 * vec3(atan(uv.y, uv.x))))), quant(abs(vec3(uv.x)), b6))*3.0231 + 0.9416 + iTime*0.3866);\n\treturn (b1 / b7);\n}\n\nvec3 node_9(vec2 uv) {\n\tuv = xywarp(uv, vec2(-0.8774, 0.1919), (vec3(uv.y) - vec3(atan(uv.y, uv.x))).xy);\n\tvec3 b1 = noise(uv, vec2(0.19348134, 0.9044718), 0.446994);\n\treturn mod(vec3(atan(uv.y, uv.x)), sq(uni((quant(vec3(atan(uv.y, uv.x)), sq(b1)) - vec3(uv.x)))));\n}\n\nvec3 node_10(vec2 uv) {\n\tuv = repeat_0(uv, 0.5853);\n\tvec3 a1 = noise(uv, vec2(3.3375576, 3.1750205), 0.837347);\n\treturn quant((vec3(uv.y) + a1), vec3(length(uv)));\n}\n\nvec3 node_11(vec2 uv) {\n\tuv = repeat_2(uv, 0.4503);\n\tvec3 a1 = vec3(0.8964, 0.2160, 0.9072);\n\tvec3 a2 = well(sq((uni(a1) - (quant(vec3(length(uv)), vec3(uv.x)) - node_10(uv))))*3.9802 + 0.8356 + iTime*0.0766);\n\treturn a2;\n}\n\nvec3 node_12(vec2 uv) {\n\tuv = (mat2(1.1221,-1.3472,1.0748,-0.7459)*(uv-vec2(-0.9953,0.6693)+vec2(-0.9953,0.6693)));\n\treturn vec3(uv.x);\n}\n\nvec3 node_13(vec2 uv) {\n\tuv = (mat2(-0.9328,-1.3945,0.9373,-1.1969)*(uv-vec2(0.3154,-0.7948)+vec2(0.3154,-0.7948)));\n\tvec3 a1 = noise(uv, vec2(3.9712415, 3.9900823), 0.738082);\n\treturn a1;\n}\n\nvec3 node_14(vec2 uv) {\n\tuv = repeat_0(uv, 0.1046);\n\treturn node_13(uv);\n}\n\nvec3 node_15(vec2 uv) {\n\tuv = (mat2(-1.2990,-0.7429,1.1444,0.7356)*(uv-vec2(-0.3132,0.1998)+vec2(-0.3132,0.1998)));\n\tvec3 a1 = well(vec3(atan(uv.y, uv.x))*4.4297 + 0.3140 + iTime*0.2790);\n\treturn a1;\n}\n\nvec3 node_16(vec2 uv) {\n\tuv = repeat_3(uv, 0.3170);\n\treturn vec3(uv.x);\n}\n\nvec3 node_17(vec2 uv) {\n\tvec3 a1 = vec3(0.1724, 0.3019, 0.4493);\n\tvec3 a2 = noise(uv, vec2(2.4050112, 0.99211144), 0.508664);\n\tvec3 a3 = well(pthresh(0.9704, mod(a1, vec3(uv.x)), bi(abs(node_9(uv))), mod(vec3(uv.x), a2))*3.7441 + 0.0142 + iTime*0.3385);\n\tvec3 a4 = tri((bi(a3) + node_11(uv))*1.9384 + 0.3869 + iTime*0.2349);\n\tvec3 a5 = vec3(0.8331, 0.1642, 0.7082);\n\tvec3 a6 = noise(uv, vec2(3.2389047, 1.8442276), 0.840260);\n\tuv = xywarp(uv, vec2(0.2762, 0.1939), quant(node_8(uv), min((a4 + sq(uni(sq(mix(abs(sigmoid(vec3(atan(uv.y, uv.x)))), a5, bi(node_12(uv))))))), a6)).xy);\n\tvec3 b1 = sin(mod(node_15(uv), vec3(uv.y))*4.9086 + 0.9484 + iTime*0.3854);\n\tvec3 b2 = noise(uv, vec2(0.43746945, 1.9537162), 0.400120);\n\treturn mod((-node_14(uv)), min(min(b1, node_16(uv)), mix(b2, vec3(uv.y), vec3(atan(uv.y, uv.x)))));\n}\n\nvec3 top(vec2 uv) {\n\treturn node_17(uv);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    vec3 col = abs(sin(top(uv)+0.04*iTime));\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}