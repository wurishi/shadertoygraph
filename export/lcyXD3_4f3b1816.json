{"ver":"0.1","info":{"id":"lcyXD3","date":"1715848388","viewed":71,"name":"Adjustable Cellular Automata","username":"LeeJBaxter","description":"Cellular Automata with adjustable rules, pre-set to rules for Conway's Game of Life.","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["conway","cellularautomata"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = texture(iChannel0, uv).rgb;\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const bool bornOn0Neighbours = false;\nconst bool bornOn1Neighbours = false;\nconst bool bornOn2Neighbours = false;\nconst bool bornOn3Neighbours = true;\nconst bool bornOn4Neighbours = false;\nconst bool bornOn5Neighbours = false;\nconst bool bornOn6Neighbours = false;\nconst bool bornOn7Neighbours = false;\nconst bool bornOn8Neighbours = false;\n\nconst bool survivesOn0Neighbours = false;\nconst bool survivesOn1Neighbours = false;\nconst bool survivesOn2Neighbours = true;\nconst bool survivesOn3Neighbours = true;\nconst bool survivesOn4Neighbours = false;\nconst bool survivesOn5Neighbours = false;\nconst bool survivesOn6Neighbours = false;\nconst bool survivesOn7Neighbours = false;\nconst bool survivesOn8Neighbours = false;\n\nint getCellHealth(\n    ivec2 cellReference)\n{\n    return (texelFetch(iChannel1, cellReference, 0).r > 0.5f) ? 1 : 0;\n}\n\nint getCellNeighbourCount(\n    ivec2 cellReference)\n{\n    return\n        getCellHealth(cellReference + ivec2(-1,-1)) +\n        getCellHealth(cellReference + ivec2(0,-1)) +\n        getCellHealth(cellReference + ivec2(1,-1)) +\n        getCellHealth(cellReference + ivec2(-1,0)) +\n        getCellHealth(cellReference + ivec2(1,0)) +\n        getCellHealth(cellReference + ivec2(-1,1)) +\n        getCellHealth(cellReference + ivec2(0,1)) +\n        getCellHealth(cellReference + ivec2(1,1));\n}\n\nint getNextGenerationCellHealth(\n    ivec2 cellReference)\n{\n    bool isCellAlive = (getCellHealth(cellReference) == 1);\n    int cellNeighbourCount = getCellNeighbourCount(cellReference);\n    \n    bool isNextGenerationCellAlive =\n        (cellNeighbourCount == 0) ? (isCellAlive ? survivesOn0Neighbours : bornOn0Neighbours) :\n        (cellNeighbourCount == 1) ? (isCellAlive ? survivesOn1Neighbours : bornOn1Neighbours) :\n        (cellNeighbourCount == 2) ? (isCellAlive ? survivesOn2Neighbours : bornOn2Neighbours) :\n        (cellNeighbourCount == 3) ? (isCellAlive ? survivesOn3Neighbours : bornOn3Neighbours) :\n        (cellNeighbourCount == 4) ? (isCellAlive ? survivesOn4Neighbours : bornOn4Neighbours) :\n        (cellNeighbourCount == 5) ? (isCellAlive ? survivesOn5Neighbours : bornOn5Neighbours) :\n        (cellNeighbourCount == 6) ? (isCellAlive ? survivesOn6Neighbours : bornOn6Neighbours) :\n        (cellNeighbourCount == 7) ? (isCellAlive ? survivesOn7Neighbours : bornOn7Neighbours) :\n        (cellNeighbourCount == 8) ? (isCellAlive ? survivesOn8Neighbours : bornOn8Neighbours) :\n        false;\n        \n    return isNextGenerationCellAlive ? 1 : 0;\n}\n\nvoid mainImage(\n    out vec4 fragColor,\n    in vec2 fragCoord)\n{\n    if (iFrame < 10)\n    {\n        vec2 uv = fragCoord / iResolution.xy;\n        int cellHealth = (texture(iChannel0, uv).r > 0.5f) ? 1 : 0;\n        \n        fragColor = vec4(cellHealth, cellHealth, cellHealth, 1.0f);\n    }\n    else\n    {\n        ivec2 cellReference = ivec2(fragCoord);\n        int cellHealth = getNextGenerationCellHealth(cellReference);\n        \n        fragColor = vec4(cellHealth, cellHealth, cellHealth, 1.0f);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}