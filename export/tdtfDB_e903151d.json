{"ver":"0.1","info":{"id":"tdtfDB","date":"1605945990","viewed":52,"name":"Hex distance function","username":"KJK","description":"Hex distance function","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["hexdistancefunction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 polar(float angle) {\n    return vec2(cos(angle), sin(angle));\n}\n\nconst float TAU = 6.283185307;\n\nfloat hexDistance(vec2 p, float apothem, bool flatSide) {\n    const float sideOverApothem = 2. * tan(TAU / 12.);\n    const float radiusOverApothem = 1. / cos(TAU / 12.);\n    \n    float side = apothem * sideOverApothem;\n    float radius = apothem * radiusOverApothem;\n    float halfSide = side * .5;\n    \n    vec2 norm12 = polar(TAU / 12.);\n    vec2 norm23 = polar(TAU / 4. );\n    vec2 edge12 = polar(TAU / 4. + TAU / 12.);\n    vec2 vert2 = radius * polar(TAU / 6.);\n    vec2 vert1 = radius * polar(.0);\n    \n    p = abs(p);\n    if (flatSide) {\n        float tmp = p.x;\n    \tp.x = p.y;\n    \tp.y = tmp;\n    }\n    \n    float h12 = dot(p, norm12) - apothem;\n    float h23 = dot(p, norm23) - apothem;\n    \n    if (h12 < .0 && h23 < .0) return max(h12, h23);\n    \n    if (p.x < halfSide) return h23;\n    \n    float v = dot(p, edge12);\n    if (v > halfSide) return length(p - vert2);\n    if (v < -halfSide) return length(p - vert1);\n    \n    return h12;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - iResolution.xy * .5) /iResolution.x;\n    \n    float rate = 40.;\n    float thickness = .005;\n    float d = hexDistance(uv, .2, false);\n    d = mod(d, 1. / rate) * rate;\n    d = d * TAU / 2.;\n    d = sin(d);\n    d = smoothstep(1. - thickness * rate, 1., d);\n    \n    vec3 col = vec3(d);\n\n    // Output to screen\n    fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}