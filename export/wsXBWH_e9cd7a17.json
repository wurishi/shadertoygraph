{"ver":"0.1","info":{"id":"wsXBWH","date":"1588128625","viewed":156,"name":"chroma trails","username":"hclarke","description":"chroma rotated trails","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["chroma"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n   \n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const mat3 YUV_to_RGB = mat3(\n         1.0,1.0,1.0,\n        0.0,-0.39465,2.03211,\n        1.13983,-0.58060,0.0);\n\nconst mat3 XYZ_to_RGB = mat3(\n    3.2406, -0.9689, 0.0557,\n    -1.5372, 1.8758, -0.2040,\n    -0.4986, 0.0415, 1.0570);\n\nconst vec3 D65_XYZ = vec3(.95047, 1.0, 1.08883);\nconst vec3 D65_xyY = vec3(0.31271, 0.32902, 1.0);\nconst vec3 D65_Yuv = vec3(1.0, 0.19784, 0.46834);\nconst vec3 ONE = vec3(1.0,1.0,1.0);\n\nvec3 XYZ_to_xyY(vec3 XYZ) {\n \tfloat inv_sum = 1.0/dot(XYZ,ONE);\n    return XYZ.xyy * vec3(inv_sum,inv_sum,1.0);\n}\n\nvec3 xyY_to_XYZ(vec3 xyY) {\n \tfloat s = xyY.z/xyY.y;\n    float z = 1.0-dot(vec2(1.0,1.0), xyY.xy);\n    return vec3(xyY.x, xyY.z, z) * vec3(s,1.0,s);\n}\n\nvec3 LUV_to_XYZ(vec3 LUV) {\n    vec2 uv = LUV.yz / (13.0*LUV.x) + D65_Yuv.yz;\n    float Y = LUV.x > 8.0 ? \n        D65_Yuv.x * pow((LUV.x+16.0)/116.0, 3.0) : \n    \tLUV.x * D65_Yuv.x * 0.00110705645;\n    float X = Y * 9.0 * uv.x / (4.0*uv.y);\n    float Z = Y * (12.0-3.0*uv.x-20.0*uv.y)/(4.0*uv.y);\n    return vec3(X,Y,Z);\n}\n\nvec3 XYZ_to_LUV(vec3 XYZ) {\n \tvec3 xyY = XYZ_to_xyY(XYZ);\n    float e = 0.008856;\n    float k = 903.3;\n    vec2 mul = vec2(4.0, 9.0);\n    float div = dot(XYZ, vec3(1.0, 15.0, 3.0));\n    \n    vec2 uv_ = XYZ.xy * mul / div;\n    float y_ = XYZ.y / D65_Yuv.x;\n    float L = y_ > e ? \n        116.0 * pow(y_, 1./3.) - 16. :\n\t\tk*y_;\n    return vec3(L, 13. * L * (uv_ - D65_Yuv.yz));\n\n}\n\nvec3 RGB_to_LUV(vec3 RGB) {\n \treturn XYZ_to_LUV(inverse(XYZ_to_RGB) * RGB);   \n}\n\nvec3 LUV_to_RGB(vec3 LUV) {\n \treturn XYZ_to_RGB * LUV_to_XYZ(LUV);   \n}\n\nvec3 LUV_to_HCL(vec3 LUV) {\n \tfloat H = atan(LUV.z, LUV.y);\n    float C = length(LUV.yz);\n    return vec3(H, C, LUV.x);   \n}\n\nvec3 HCL_to_LUV(vec3 HCL) {\n    float u = cos(HCL.x);\n    float v = sin(HCL.x);\n    vec2 uv = vec2(u,v);\n    return vec3(HCL.z, uv * HCL.y);\n}\n\nvec3 RGB_to_HCL(vec3 RGB) {\n \tvec3 LUV = RGB_to_LUV(RGB);\n    return LUV_to_HCL(LUV);\n}\n\nvec3 HCL_to_RGB(vec3 HCL) {\n \tvec3 LUV = HCL_to_LUV(HCL);\n    return LUV_to_RGB(LUV);\n}\n\n\n\nvec4 tex(vec2 uv) {\n    vec4 c = texture(iChannel1, uv);\n    if(uv.x < 0. || uv.x > 1. || uv.y < 0. || uv.y > 1.) return vec4(0);\n \t// cut out greenscreen\n    float ref = max(c.r, c.b) * 1.1;\n    float mask = smoothstep(-0.03, 0.03, ref-c.g);\n    c.a = mask;\n    c.g = min(c.g, (c.r + c.b) * 0.5);\n    \n    return c;\n}\n\nvec3 shift(vec3 c, float r) {\n  \tc = RGB_to_HCL(c);\n   \tc.x += r;\n    return HCL_to_RGB(c);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= vec2(0.5);\n    uv *= 1.01;\n    uv += vec2(0.5);\n  \n    \n    vec4 col = tex(uv);\n    vec4 bg = texture(iChannel0, uv);\n    if(uv.x < 0. || uv.x > 1. || uv.y < 0. || uv.y > 1.) bg = vec4(0.01);\n    bg.rgb *= 0.94;\n    bg.rgb = shift(bg.rgb, .3);\n    \n    col = mix(col, bg, 1.-col.a);\n    col = max(vec4(0.), col);\n    fragColor = col;\n}","name":"Buffer A","description":"","type":"buffer"}]}