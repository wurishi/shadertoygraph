{"ver":"0.1","info":{"id":"mdGfWK","date":"1698685320","viewed":27,"name":"Batsign","username":"Beowolve","description":"Modern Batman logo","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","logo","batman"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592\n#define S(v) smoothstep(aa,-aa,v)\n\n// IQs version from https://www.shadertoy.com/view/4lsXDN\nfloat sdEllipse( vec2 p, vec2 ab )\n{\n    // symmetry\n\tp = abs( p );\n\n    // find root with Newton solver\n    vec2 q = ab*(p-ab);\n\tfloat w = (q.x<q.y)? 1.570796327 : 0.0;\n    for( int i=0; i<5; i++ )\n    {\n        vec2 cs = vec2(cos(w),sin(w));\n        vec2 u = ab*vec2( cs.x,cs.y);\n        vec2 v = ab*vec2(-cs.y,cs.x);\n        w = w + dot(p-u,v)/(dot(p-u,u)+dot(v,v));\n    }\n    \n    // compute final point and distance\n    float d = length(p-ab*vec2(cos(w),sin(w)));\n    \n    // return signed distance\n    return (dot(p/ab,p/ab)>1.0) ? d : -d;\n}\n\n// https://iquilezles.org/articles/distfunctions2d/\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n\nfloat opUnion( float d1, float d2 ) { return min(d1,d2); }\n\nfloat opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\n\nfloat opIntersection( float d1, float d2 ) { return max(d1,d2); }\n\nvec2 rotate(vec2 uv, float th) {\n  return mat2(cos(th), sin(th), -sin(th), cos(th)) * uv;\n}\n\nfloat ring(vec2 p, float radius, float width, float aa) {\n    float d = length(p) - radius;\n    return max(d-width,-d);\n}\n\nfloat batsymbol(vec2 p) {\n    float d = sdEllipse(vec2(p.x, p.y+.2), vec2(.7,.45));\n    d = opSubtraction(sdEllipse(vec2(p.x, p.y-.15), vec2(.3,.12)), d);\n    d = opSubtraction(sdEllipse(rotate(vec2(abs(p.x)-.6, p.y+.22), .3), vec2(.3,.18)), d);\n    d = opSubtraction(sdEllipse(rotate(vec2(abs(p.x)-.15, p.y+.4), -1.1), vec2(.3,.2)), d);\n    d = opUnion(sdTriangleIsosceles(vec2(abs(p.x)-.05,p.y-.18), vec2(.05,-.2)), d);\n    d = opUnion(sdBox(p, vec2(.05,.1)), d);\n    return p.y > -0.29 ? d : 1.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord - .5*iResolution.xy) / iResolution.y;\n    float aa = .75/iResolution.y;\n    \n    vec3 white = vec3(1);\n    vec3 black = vec3(0);\n\n    vec3 col = mix(white, black, S(batsymbol(p)));\n    \n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}