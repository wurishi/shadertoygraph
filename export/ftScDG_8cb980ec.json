{"ver":"0.1","info":{"id":"ftScDG","date":"1650164781","viewed":79,"name":"Rotate arbitrary angle","username":"Uffe55","description":"Rotate around a abitrary axis and arbitrary center.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["experiment","rotate"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define PI2 = 6.28318\n\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n//Rotate a angle around y-axis, b angle around x-axis, c angle around z-axis\nvec3 RotXYZ(vec3 p,float a,float b,float c)\n{\n    p.xz *= Rot(a);   p.yz *= Rot(b);   p.xy *= Rot(c);\n\n  return p;\n}\nfloat sdBox(vec3 p, vec3 s) \n{\n   float angle;\n   angle = iTime; \n   float d1,d2,d3;\n   vec3 p1,p2,p3,p4,p5,p6;\n   float dist = 100.0;\n   p1 = p ;     p4=p;\n   p1.x += 3.0;   p4.x -= 3.0; //p1,p4 centerpoints moved from origo\n   //p1.y -= 1.0;   p4.y -= 1.0;\n   \n   p1 = RotXYZ( p1, angle*.2, angle*0.1 ,   angle*2.);//p1,p4 centerpoints rotated\n   p4 = RotXYZ( p4, 2.0     , angle*0.1 ,   angle);\n \n \n \t\n   float sDist = length(p1)-0.2;  //p1,p4 centerpoints as small spheres\n   sDist = min(sDist,length(p4)-0.2);\n   \n   p2 = p1; p5=p4;  // copy \"p\" from centerpoints to boxes\n   p3 = p1; p6=p4;\n   \n   vec3 vmove =vec3(0.0,1.0,1.0); // move boxes from centerpoints.\n   p2 += vmove; p5 += vmove; \n    vmove.y =-1.;\n   p3 += vmove; p6 += vmove;\n\n\n   p2= abs(p2)-s;\n   d2 = length(max(p2, 0.))+min(max(p2.x, max(p2.y, p2.z)), 0.);\n\n   p3 = abs(p3)-s;\n   d3 = length(max(p3, 0.))+min(max(p3.x, max(p3.y, p3.z)), 0.);\n   \n   dist = min(d3, d2);\n   \n   p5 = abs(p5)-s;\n   dist = min(dist,length(max(p5, 0.))+min(max(p5.x, max(p5.y, p5.z)), 0.));\n   p6= abs(p6)-s;\n   dist = min(dist,length(max(p6, 0.))+min(max(p6.x, max(p6.y, p6.z)), 0.));\n   \n   \n   //dist = min(dist,dot(p ,vec3(0,1.,0)) +5.0);\n    return min(dist,sDist);\n}\n\nfloat GetDist(vec3 p) {\n\n    float d = sdBox(p, vec3(.4,.07,1.2));\n    \n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        d = normalize( c + uv.x*r + uv.y*u);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(0.0, 3.0, -14.0);\n    ro.yz *= Rot(-m.y*2.9+1.2);\n    ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 1.5);\n    vec3 col = vec3(0.); \n    //fragColor =texture(iChannel2,uv);  \n    col=vec3(uv.y*0.5 +.5,uv.y,.50);      //texture(iChannel1,rd  ).rgb;\n    \n    float d = RayMarch(ro, rd);\n\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n  \n        float dif = dot(n, normalize(vec3(-3,4,1)))*.5+.5;\n      //abs(n)*dif;//\n        col = vec3(dif);\n        col = pow(col, vec3(.44545));\n   }\n   \n    fragColor = vec4(col,1.0);\n    \n    \n   \n}","name":"Image","description":"","type":"image"}]}