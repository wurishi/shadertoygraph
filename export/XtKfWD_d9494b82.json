{"ver":"0.1","info":{"id":"XtKfWD","date":"1542601932","viewed":136,"name":"Tiles dots","username":"Polytope","description":"Playing around with tile effect, from https://thebookofshaders.com/09/","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["test","tile"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xx;\n    uv *= 18.;\n    \n    uv.y += (1.-step(1.,mod(iTime,2.)))*iTime*step(1.,mod(uv.x,2.));\n    uv.y -= (1.-step(1.,mod(iTime,2.)))*iTime*(1.-step(1.,mod(uv.x,2.)));\n    \n    uv.x += (step(1.,mod(iTime,2.)))*iTime*step(1.,mod(uv.y,2.));\n    uv.x -= (step(1.,mod(iTime,2.)))*iTime*(1.-step(1.,mod(uv.y,2.)));\n    \n    vec2 f_uv = fract(uv);\n    \n    float c = smoothstep(.24,.25,length(vec2(.5)-f_uv));\n    \n    vec3 col = vec3(c);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}