{"ver":"0.1","info":{"id":"MdV3zG","date":"1455187873","viewed":347,"name":"Logistic Map PRNG","username":"Klems","description":"Using the chaotic behavior of the logistic map to generate random numbers. White pixels is the distribution between 0 and 1.","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["noise","random","logisticmap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord / iResolution.xy;\n    vec3 rgb = texture(iChannel0, uv).rgb;\n    float value = texture(iChannel1, vec2(uv.x, 0.0)).r / float(iFrame) * 100.0;\n    if (uv.y < value) {\n        fragColor = vec4(1,1,1,1);\n    } else {\n        fragColor = vec4(rgb,1);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor.a = 1.0;\n    if (iFrame == 0) {\n        // seed\n        fragColor.r = sin(uv.x*878.144855787)*sin(uv.y*104.778569785)*0.5+0.5;\n        fragColor.g = sin(uv.x*388.645199711)*sin(uv.y*288.022478931)*0.5+0.5;\n        fragColor.b = sin(uv.x*218.789245854)*sin(uv.y*458.978786345)*0.5+0.5;\n    } else {\n        vec3 prev = texture(iChannel0, uv).rgb;\n        prev = 4.0*prev*(1.0-prev);\n        fragColor.rgb = prev;\n    }\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float xMin = fragCoord.x/iResolution.x;\n    float xMax = (fragCoord.x+1.0)/iResolution.x;\n    // pick the same pixel\n    float value = texture(iChannel0, vec2(0.5)).r;\n    float base = texture(iChannel1, vec2(xMin, 0.0)).r;\n    if (value > xMin && value < xMax) {\n  \t\tbase += 1.0;\n    }\n    fragColor = vec4(vec3(base), 1.0);\n}","name":"Buf B","description":"","type":"buffer"}]}