{"ver":"0.1","info":{"id":"DdGfRc","date":"1698432089","viewed":210,"name":"Triverse (FLASH WARNING)","username":"NamdomNau","description":"Just tinkering around shaders","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["neon","tri"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Color Palette\nvec3 palette( float t ) {\n    vec3 a = vec3(0.5,0.5,0.5);\n    vec3 b = vec3(0.5,0.5,0.5);\n    vec3 c = vec3(1.0,1.0,1.0);\n    vec3 d = vec3(0.3,0.20,0.20);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n// Triangle Formula\nfloat tri( in vec2 p, in float r )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)*sign(p.y);\n}\n// Rotate\nmat2 rotate(float angle) {\n    return mat2(cos(angle), -sin(angle),\n                sin(angle), cos(angle));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Time \n    float t = iTime * 0.5;\n    // Shape Amount      \n    float m = 50.0;\n    // Triangles Sharpness (0.0 For Circle)\n    float p = 0.30;\n    // Middle Triangle Size\n    float n = 0.65;\n\n    // Normalized pixel coordinates\n        vec2 uv = (fragCoord * 2.0  - iResolution.xy)/ iResolution.y;\n        vec2 uvR = rotate(t*0.3) * uv;\n        vec3 fcol = vec3(0.0);\n        vec3 dcol = vec3(0.0);\n    \n    // Triangle & Triangles (IDK how it's work)\n        float tr = tri(uvR.xy,p);\n        vec3 col = palette(tr + t);\n        tr = sin(tr * m + t*10.0)/m;\n        tr = abs(tr);\n        float o = fract(tr * .0035); \n        float oo = 1. + o * 5.00; \n        uv = rotate(oo * iTime) * uv;\n        float d = abs(tri(uv,n));\n        float dc = length(uv);\n    // Final Touchs\n        tr = 0.001 / tr; //Brightness of Triangles\n        d = 0.029 / d; //Brightness of middle Triangle\n        dc = 0.099 / dc; //Brightness of middle Circle\n        fcol += col * d +  + (tr / sin(iTime / 3.0));\n        dcol += col * (tr + dc) ;\n    // Output to screen\n    fragColor = vec4(fcol + dcol,1.0);\n}","name":"Image","description":"","type":"image"}]}