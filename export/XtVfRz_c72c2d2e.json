{"ver":"0.1","info":{"id":"XtVfRz","date":"1541797679","viewed":262,"name":"floating bubbles mask","username":"perebalsach","description":"random circles / bubbles floating","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["circles","random"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float noise1(vec2 p)\n{\n    p = fract(p * vec2(233.42, 865.32));\n    p += dot(p, p+32.33);\n    return fract(p.x * p.y);\n}\n\nvec2 noise2(vec2 p)\n{\n    float n = noise1(p);\n    return vec2(n, noise1(p+n));\n}\n\nvec2 getPos(vec2 id)\n{\n    vec2 noise = noise2(id);\n    \n    float x = sin(iTime * noise.x);\n    float y = cos(iTime * noise.y);\n    \n    return vec2(x, y) * 0.4;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - .5 * iResolution.xy) /iResolution.y;\n\n    // Time varying pixel color\n   \n    vec3 col = vec3(.0);\n    uv *= 5.0;\n    float m = .0;\n    \n    vec2 gridUv = fract(uv) -.5;\n    vec2 cellId = floor(uv);\n    \n    vec2 p = getPos(cellId);\n    float d = length(gridUv - p);\n    m = smoothstep(.1, .05, d);\n        \n    col = vec3(m);\n    \n    // Grid debug\n    // col.rg = gridUv;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n}","name":"Image","description":"","type":"image"}]}