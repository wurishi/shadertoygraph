{"ver":"0.1","info":{"id":"4tlXWs","date":"1440667436","viewed":2173,"name":"Room scanning effect","username":"rosme","description":"Trying to reproduce the room scanning effect as seen in hololens demonstration. See https://www.youtube.com/watch?v=aYdB2xBNFek&t=60","likes":48,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","hololens"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"// Based on shaders:\n// Template - 3D \t\t\thttps://www.shadertoy.com/view/ldfSWs\n// Xor - Triangle Grid, \thttps://www.shadertoy.com/view/4tSGWz\n\n#define pi 3.14159265358979\n#define size 0.5\n#define reciproce_sqrt3 0.57735026918962576450914878050196\n#define lineThickness 0.01\n\nfloat planeDistance = 0.2;\nfloat offset;\n\n//------------------------------------------------------------------------\n// Camera\n//\n// Move the camera. In this case it's using time and the mouse position\n// to orbitate the camera around the origin of the world (0,0,0), where\n// the yellow sphere is.\n//------------------------------------------------------------------------\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in vec2 mouse )\n{\n    //float an = 0.0*iTime + se.x;\n\t//camPos = vec3(0.0, 2.0, 5.0);\n    camPos = vec3(3.5*sin(mouse.x*10.0), 1.0, 5.0*cos(mouse.x*10.0));\n    \n    camTar = vec3(0.0,0.0,0.0);\n}\n\n\n//------------------------------------------------------------------------\n// Background \n//\n// The background color. In this case it's just a black color.\n//------------------------------------------------------------------------\nvec3 doBackground( void )\n{\n    return vec3( 0.0, 0.0, 0.1);\n}\n\n\nfloat sdPlane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\n\n\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\n//------------------------------------------------------------------------\n// Modelling \n//\n// Defines the shapes (a sphere in this case) through a distance field, in\n// this case it's a sphere of radius 1.\n//------------------------------------------------------------------------\nfloat doModel( vec3 p )\n{\n    \n    return  min(udRoundBox(p -vec3(1.05,-0.5, 0.4), vec3(0.05, 0.4, 0.5), 0.1),\n\t\t\tmin(udRoundBox(p -vec3(-1.05,-0.5, 0.4), vec3(0.05, 0.4, 0.5), 0.1),                \n        \tmin(udRoundBox(p, vec3(0.8, 0.3, 0.1), 0.1),\n        \tmin(udRoundBox(p -vec3(0.0,-0.5, 0.6), vec3(0.8, 0.1, 0.3), 0.1), \n            min(sdPlane(p, vec4(0.0, 1.0, 0.0, 1.0)), sdPlane(p, vec4(0.0, 0.0, 1.0, 2.0)))))));\n}\n\nfloat r(float n)\n{\n \treturn fract(abs(sin(n*55.753)*367.34));   \n}\n\nfloat r(vec2 n)\n{\n    return r(dot(n,vec2(2.46,-1.21)));\n}\n\nvec3 smallTrianglesColor(vec3 pos)\n{\n    float a = (radians(60.0));\n    float zoom = 0.5;\n\tvec2 c = (pos.xy + vec2(0.0, pos.z)) * vec2(sin(a),1.0);//scaled coordinates\n    c = ((c+vec2(c.y,0.0)*cos(a))/zoom) + vec2(floor((c.x-c.y*cos(a))/zoom*4.0)/4.0,0.0);//Add rotations\n    float type = (r(floor(c*4.0))*0.2+r(floor(c*2.0))*0.3+r(floor(c))*0.5);//Randomize type\n    type += 0.2 * sin(iTime*5.0*type);\n    \n    float l = min(min((1.0 - (2.0 * abs(fract((c.x-c.y)*4.0) - 0.5))),\n        \t      (1.0 - (2.0 * abs(fract(c.y * 4.0) - 0.5)))),\n                  (1.0 - (2.0 * abs(fract(c.x * 4.0) - 0.5))));\n    l = smoothstep(0.06, 0.04, l);\n\t\n\treturn mix(type, l, 0.5) * vec3(0.2,0.5,1);\n} \n\nvec3 largeTrianglesColor(vec3 pos)\n{\n    float a = (radians(60.0));\n    float zoom = 2.0;\n\tvec2 c = (pos.xy + vec2(0.0, pos.z)) * vec2(sin(a),1.0);//scaled coordinates\n    c = ((c+vec2(c.y,0.0)*cos(a))/zoom) + vec2(floor((c.x-c.y*cos(a))/zoom*4.0)/4.0,0.0);//Add rotations\n    \n    float l = min(min((1.0 - (2.0 * abs(fract((c.x-c.y)*4.0) - 0.5))),\n        \t      (1.0 - (2.0 * abs(fract(c.y * 4.0) - 0.5)))),\n                  (1.0 - (2.0 * abs(fract(c.x * 4.0) - 0.5))));\n    l = smoothstep(0.03, 0.02, l);\n\t\n\treturn mix(0.01, l, 0.5) * vec3(0.2,0.5,1);\n}\n   \nvec3 gridColor(vec3 pos)\n{\n    float plane5 = abs(sdPlane(pos, vec4(1.0, 0.0, 0.0, 0)));\n    float plane6 = abs(sdPlane(pos, vec4(0.0, 1.0, 0.0, 0)));\n    float plane7 = abs(sdPlane(pos, vec4(0.0, 0.0, 1.0, 0)));\n\n    float   nearest = abs(mod(plane5, planeDistance) - 0.5 * planeDistance);\n    nearest = min(nearest, abs(mod(plane6, planeDistance) - 0.5 * planeDistance));\n    nearest = min(nearest, abs(mod(plane7, planeDistance) - 0.5 * planeDistance));\n\n    return mix(vec3(0.3, 0.3, 0.5), vec3(0.2), smoothstep(0.0, lineThickness, nearest));\n}\n\n \n//---------------------------------------------------------------\n// Material \n//\n// Defines the material (colors, shading, pattern, texturing) of the model\n// at every point based on its position and normal. In this case, it simply\n// returns a constant yellow color.\n//------------------------------------------------------------------------\nvec3 doMaterial( in vec3 pos, in vec3 nor )\n{\n\tfloat d = length(pos.xz - vec2(0.0, 2.0) + 0.5*cos(2.0*pos.xz + vec2(3.0, 1.0) * iTime)) +  pos.y + 0.2 * cos(pos.y - iTime);\n    float border = 12.0 * mod(iTime * 0.2, 1.0);\n \n    //vec3 c = gridColor(pos);\n    vec3 c1 = largeTrianglesColor(pos);\n    vec3 c = smallTrianglesColor(pos);\n    c *= smoothstep(border - 1.0, border - 2.5, d);\n    c += c1;\n    c = mix(c, vec3(0.01), smoothstep(border - 4.0, border - 10.0, d));\n    c = mix(c, vec3(0.01), smoothstep(border - 1.0, border, d));\n    c = mix(c, vec3(0.01), smoothstep(9.0, 12.0, border));\n    \n    return c;\n} \n//------------------------------------------------------------------------\n// Lighting \n//------------------------------------------------------------------------\nfloat calcSoftshadow( in vec3 ro, in vec3 rd );\n\nvec3 doLighting( in vec3 pos, in vec3 nor, in vec3 rd, in float dis, in vec3 mal )\n{\n    vec3 lin = vec3(0.0);\n\n    // key light\n    //-----------------------------\n    vec3  lig = normalize(vec3(1.0,0.7,0.9));\n    float dif = max(dot(nor,lig),0.0);\n    float sha = 0.0; if( dif>0.01 ) sha=calcSoftshadow( pos+0.01*nor, lig );\n    lin += dif*vec3(4.00,4.00,4.00)*sha;\n\n    // ambient light\n    //-----------------------------\n    lin += vec3(0.50,0.50,0.50);\n\n    \n    // surface-light interacion\n    //-----------------------------\n    vec3 col = mal*lin;\n\n    \n    // fog    \n    //-----------------------------\n\tcol *= exp(-0.01*dis*dis);\n\n    return col;\n}\n\nfloat calcIntersection( in vec3 ro, in vec3 rd )\n{\n\tconst float maxd = 20.0;           // max trace distance\n\tconst float precis = 0.001;        // precission of the intersection\n    float h = precis*2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    for( int i=0; i<90; i++ )          // max number of raymarching iterations is 90\n    {\n        if( h<precis||t>maxd ) break;\n\t    h = doModel( ro+rd*t );\n        t += h;\n    }\n\n    if( t<maxd ) res = t;\n    return res;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    const float eps = 0.002;             // precision of the normal computation\n\n    const vec3 v1 = vec3( 1.0,-1.0,-1.0);\n    const vec3 v2 = vec3(-1.0,-1.0, 1.0);\n    const vec3 v3 = vec3(-1.0, 1.0,-1.0);\n    const vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\n\treturn normalize( v1*doModel( pos + v1*eps ) + \n\t\t\t\t\t  v2*doModel( pos + v2*eps ) + \n\t\t\t\t\t  v3*doModel( pos + v3*eps ) + \n\t\t\t\t\t  v4*doModel( pos + v4*eps ) );\n}\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd )\n{\n    float res = 1.0;\n    float t = 0.0005;                 // selfintersection avoidance distance\n\tfloat h = 1.0;\n    for( int i=0; i<40; i++ )         // 40 is the max numnber of raymarching steps\n    {\n        h = doModel(ro + rd*t);\n        res = min( res, 64.0*h/t );   // 64 is the hardness of the shadows\n\t\tt += clamp( h, 0.02, 2.0 );   // limit the max and min stepping distances\n    }\n    return clamp(res,0.0,1.0);\n}\n\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //planeDistance = sin(iTime);\n    offset = 2.0 * sqrt(2.0) / sqrt(24.0);\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n\n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n    \n    // camera movement\n    vec3 ro, ta;\n    doCamera( ro, ta, iTime, m );\n\n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  // 0.0 is the camera roll\n    \n\t// create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy,2.0) ); // 2.0 is the lens length\n\n    //-----------------------------------------------------\n\t// render\n    //-----------------------------------------------------\n\n\tvec3 col = doBackground();\n\n\t// raymarch\n    float t = calcIntersection( ro, rd );\n    if( t>-0.5 )\n    {\n        // geometry\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n\n        // materials\n        vec3 mal = doMaterial( pos, nor );\n\n        col = doLighting( pos, nor, rd, t, mal );\n\t}\n\n\t//-----------------------------------------------------\n\t// postprocessing\n    //-----------------------------------------------------\n    // gamma\n\tcol = pow( clamp(col,0.0,1.0), vec3(0.5) );\n\t   \n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}