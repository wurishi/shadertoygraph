{"ver":"0.1","info":{"id":"ssKXD3","date":"1635437819","viewed":71,"name":"Color Interpolation 2","username":"Livie","description":"part 2","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["color","interpolation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//  conversion fns from IÃ±igo Quiles @ https://www.shadertoy.com/view/MsS3Wc\nvec3 rgb2hsb( in vec3 c ){\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz),\n                 vec4(c.gb, K.xy),\n                 step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r),\n                 vec4(c.r, p.yzx),\n                 step(p.x, c.r));\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)),\n                d / (q.x + e),\n                q.x);\n}\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\nvec3 calculateIDW(vec2 p) {\n    vec2 v1 = vec2(sin(5.+iTime*.1)*.5+.5, sin(iTime*1.2)*.5+.5);\n    vec2 v2 = vec2(sin(4.+iTime*.2)*.5+.5, sin(iTime*.9)*.5+.5);\n    vec2 v3 = vec2(sin(3.+iTime*.3)*.5+.5, sin(iTime*.6)*.5+.5);\n    vec2 v4 = vec2(sin(2.+iTime*.4)*.5+.5, sin(iTime*.3)*.5+.5);\n    vec2 v5 = vec2(sin(1.+iTime*.5)*.5+.5, sin(iTime*.1)*.5+.5);\n   \n    // convert to actual pixels to deal with stretching with non-square aspect ratios\n    float pWidth = 5.;\n    if (distance(p*iResolution.xy, v1*iResolution.xy) < pWidth ||\n        distance(p*iResolution.xy, v2*iResolution.xy) < pWidth ||\n        distance(p*iResolution.xy, v3*iResolution.xy) < pWidth ||\n        distance(p*iResolution.xy, v4*iResolution.xy) < pWidth ||\n        distance(p*iResolution.xy, v5*iResolution.xy) < pWidth) {\n        return vec3(0., 0., 1.);\n    }\n    \n    // Shepard's method\n    // https://en.wikipedia.org/wiki/Inverse_distance_weighting\n    float powerParam = 10. + 5.*sin(iTime);\n    float w1 = 1./pow(distance(p, v1), powerParam);\n    float w2 = 1./pow(distance(p, v2), powerParam);\n    float w3 = 1./pow(distance(p, v3), powerParam);\n    float w4 = 1./pow(distance(p, v4), powerParam);\n    float w5 = 1./pow(distance(p, v5), powerParam);\n    \n    vec3 u1 = vec3(.4,  1., .4);\n    vec3 u2 = vec3(.1,  1., 1.);\n    vec3 u3 = vec3(.5,  1., 1.);\n    vec3 u4 = vec3(.6, 1., 1.);\n    vec3 u5 = vec3(.7,  1., .4);\n    \n    /*\n    \n    vec3 u1 = vec3(.0, 1., 1.);\n    vec3 u2 = vec3(.2, 1., 1.);\n    vec3 u3 = vec3(.4, 1., 1.);\n    vec3 u4 = vec3(.6, 1., 1.);\n    vec3 u5 = vec3(.8, 1., 1.);\n    \n    vec3 u1 = vec3(217., 156., 94.)/255.;\n    vec3 u2 = vec3(231., 201., 125.)/255.;\n    vec3 u3 = vec3(11., 207, 139.)/255.;\n    vec3 u4 = vec3(34, 214., 153.)/255.;\n    vec3 u5 = vec3(122., 132., 94.)/255.;\n    */\n    vec3 u = (w1*u1 + w2*u2 + w3*u3 + w4*u4 + w5*u5)/(w1+w2+w3+w4+w5);\n    return u;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = calculateIDW(uv);\n    fragColor = vec4(hsb2rgb(col), 1.);\n}","name":"Image","description":"","type":"image"}]}