{"ver":"0.1","info":{"id":"4d3yWM","date":"1519054250","viewed":223,"name":"Sprawling nightmare","username":"Flopine","description":"Evil thing... yeurk","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","duplication","poulpy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n// Thanks to wsmind and leon for teaching me!\n\n\n#define ITER 100\n#define PI 3.141592\n#define TAU 2.*PI\n\nmat2 rot (float angle)\n{\n \tfloat c = cos(angle);\n    float s = sin(angle);\n    return mat2(c,s,-s,c);\n}\n\n\nvec2 moda (vec2 p, float per)\n{\n    float angle = atan(p.y,p.x);\n    float l = length(p);\n    angle = mod(angle-per/2.,per)-per/2.;\n    return vec2 (cos(angle),sin(angle))*l;\n}\n\nfloat cyl (vec3 p, float r)\n{\n    return length(p.yz)-r;\n}\n\nfloat sphe (vec3 p, float r)\n{\n    return length(p)-r;\n}\n\nfloat box (vec3 p, vec3 c)\n{\n    return length(max(abs(p)-c,0.));\n}\n\nfloat Prim_Element (vec3 p)\n{\n    float per = 2.;\n    float prim_cyl = cyl(p,1./p.x*1.5);\n    p.x -= iTime;\n    p.x = mod(p.x-per/2.,per)-per/2.;\n    float prim_sphe = sphe(p,0.4);\n    return min(prim_cyl, prim_sphe);\n}\n\nfloat tentacular_cross (vec3 p)\n{\n    p.x -= sin(-p.z+iTime);\n    p.xz= moda(p.xz, TAU/6.);  \n    return Prim_Element(p);\n}\n\nfloat tentacular_star (vec3 p)\n{\n    p.x = abs(p.x);\n    p.yz *= rot(PI/2.);\n    float one = tentacular_cross(p);\n    p.xz *= rot(PI/2.);\n    float two = tentacular_cross(p);\n    return min(one, two);\n}\n\nfloat SDF (vec3 p)\n{\n    float per = 10.;\n    //p.xy = mod(p.xy-per/2., per)-per/2.;\n    return tentacular_star(p);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = 2.*(fragCoord/iResolution.xy)-1.;\n\tuv.x *= iResolution.x/iResolution.y;\n    \n    vec3 p = vec3 (0.001,2.,-10);\n    vec3 dir = normalize(vec3(uv, 1.));\n    float shad = 1.;\n    \n    for (int i = 0; i<ITER; i++)\n    {\n        float d = SDF(p);\n        if (d<0.001 || d>30.)\n        {\n            shad = float(i)/float(ITER);\n            break;\n        }\n        p += d*dir;\n    }\n    \n    // Time varying pixel color\n    vec3 col = shad/vec3(length(p.z),0.5,0.7);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}