{"ver":"0.1","info":{"id":"tlGyRR","date":"1610389314","viewed":120,"name":"Heightmap land","username":"regis","description":"Mountain","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","heightmap","mountain"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 tpos = vec4(0.0, 0.0, 0.0, 0.0);\nfloat angle_tpos;\nbool done = false;\nfloat dist = 0.0;\n\nmat2 Rot(float a){float s = sin(a);float c = cos(a);return mat2(c, -s, s, c);}\nmat3 RotX(float a){float s = sin(a);float c = cos(a);return mat3(1., .0, .0, .0, c, -s, .0, s, c);}\nmat3 RotY(float a){float s = sin(a);float c = cos(a);return mat3(c, .0, s, .0, 1., .0, -s, .0, c);}\nmat3 RotZ(float a){float s = sin(a);float c = cos(a);return mat3(c, -s, .0, s, c, .0, .0, .0, 1.);}\n\n\n\nfloat opExtrusion(in vec3 p, in float d, in float h) {\n    // d is the distance to the 2D shape using the x and y components of p\n    vec2 w = vec2(d, abs(p.z) - h);\n    return min(max(w.x, w.y), 0.0) + length(max(w, 0.0));\n}\n\n/*\nvec4 opElongate( in vec3 p, in vec3 h )\n{\n    //return vec4( p-clamp(p,-h,h), 0.0 ); // faster, but produces zero in the interior elongated box\n    \n    vec3 q = abs(p)-h;\n    return vec4( max(q,0.0), min(max(q.x,max(q.y,q.z)),0.0) );\n}\n*/\n\nvec3 opTwist(in vec3 p, in float t) {\n    float c = cos(t * p.y);\n    float s = sin(t * p.y);\n    mat2 m = mat2(c, -s, s, c);\n    return vec3(m * p.xz, p.y);\n}\n\n// from iq\nfloat Noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n  \tf = f*f*(3.0-2.0*f);\n  \tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n  \tvec2 rg = textureLod( iChannel0, (uv+0.5)/256.0, 0.0).yx;\n  \treturn mix( rg.x, rg.y, f.z );\n}\n\n// ref https://www.shadertoy.com/view/Xs33Df\nfloat Noise3D(in vec3 p){\n    const vec3 s = vec3(7, 157, 113);\n\tvec3 ip = floor(p); // Unique unit cell ID.\n    vec4 h = vec4(0., s.yz, s.y + s.z) + dot(ip, s);\n\tp -= ip; // Cell's fractional component.\n    p = p*p*(3. - 2.*p);\n    h = mix(fract(sin(h)*43758.5453), fract(sin(h + s.x)*43758.5453), p.x);\n    h.xy = mix(h.xz, h.yw, p.y);\n    return mix(h.x, h.y, p.z); // Range: [0, 1].\n\t\n}\n\nvec2 hash( vec2 p )\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)),\n\t\t\t dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n\tconst float K1 = 0.366025404; // (sqrt(3)-1)/2;\n\tconst float K2 = 0.211324865; // (3-sqrt(3))/6;\n\t\n\tvec2 i = floor( p + (p.x+p.y)*K1 );\n\t\n\tvec2 a = p - i + (i.x+i.y)*K2;\n\tvec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0);\n\tvec2 b = a - o + K2;\n\tvec2 c = a - 1.0 + 2.0*K2;\n\t\n\tvec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\t\n\tvec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n\t\n\treturn dot( n, vec3(70.0) );\n}\n\nfloat fbm(vec2 uv)\n{\n\tfloat f;\n\tmat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n\tf  = 0.5000*noise( uv ); uv = m*uv;\n\tf += 0.2500*noise( uv ); uv = m*uv;\n\tf += 0.1250*noise( uv ); uv = m*uv;\n\tf += 0.0625*noise( uv ); uv = m*uv;\n\tf = 0.5 + 0.5*f;\n\treturn f;\n}\n\nfloat FBM( in vec3 p )\n{\n    float n = 0.0;\n    n += 0.50000*Noise( p*1.0 );\n    n += 0.25000*Noise( p*2.0 );\n    n += 0.12500*Noise( p*4.0 );\n    n += 0.06250*Noise( p*8.0 );\n    n += 0.03125*Noise( p*16.0 );\n    return n/0.984375;\n}\n\nfloat WaterMap( vec3 pos ) {\n    return FBM( vec3( pos.xz, iTime*0.3 )) * 1.;\n}\nvec3 WaterNormal(vec3 pos,float rz){\n    float EPSILON =rz*rz* 0.002;\n    vec3 dx = vec3( EPSILON, 0.,0. );\n    vec3 dz = vec3( 0.,0., EPSILON );\n      \n    vec3  normal = vec3( 0., 1., 0. );\n    float bumpfactor = 0.3 * pow(1.-clamp((rz)/1000.,0.,1.),6.);//\n    \n    normal.x = -bumpfactor * (WaterMap(pos + dx) - WaterMap(pos-dx) ) / (2. * EPSILON);\n    normal.z = -bumpfactor * (WaterMap(pos + dz) - WaterMap(pos-dz) ) / (2. * EPSILON);\n    return normalize( normal ); \n}\n\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r) {\n\tvec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    //t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t*ab;\n    \n    float x = length(p-c)-r;\n    float y = (abs(t-.5)-.5)*length(ab);\n    float e = length(max(vec2(x, y), 0.));\n    float i = min(max(x, y), 0.)-0.1;\n    \n    return e+i;\n}\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return -(length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r);\n}\n\nfloat Box(vec3 p, vec3 sc, float r){\n    return length(max(abs(p)-sc, 0.))-r;\n}\n\nfloat Box2(vec3 p, vec3 sc, float r, float an){\n    an = 80.0;\n    vec3 cs = vec3(cos(an*3.1415/180.0), sin(an*3.1415/180.0),cos(an*3.1415/180.0));\n    float c2 = length(cs);\n    \n    float a = length(max( abs(p)-(sc)  , 0.0)) - r;\n    float b = length(max(abs(p)-vec3(1.0, 2.0, 1.0), 0.));\n    return a;\n}\n\nfloat Capsule(vec3 p, vec3 sc, float r){\n    vec3 cs = vec3(cos(90.0*3.1415/180.0), sin(90.0*3.1415/180.0),cos(90.0*3.1415/180.0));  \n    float a = length(max( abs(p)- (sc*cs)  , 0.0)) - r;\n    return a;\n}\n\nfloat opRep( in vec3 p, in vec3 c, vec3 sc, float r )\n{\n    vec3 q = mod(p+0.5*c,c)-0.5*c;\n    return Box( q, sc, r );\n}\n\nfloat opRepS( in vec3 p, in vec3 c, vec4 pos )\n{\n    vec3 q = mod(p+0.5*c,c)-0.5*c;\n    return length(q) - pos.w;\n}\n\nvec3 add_tpos(vec3 tp){\n    return vec3(tp.x+tpos.x, tp.y+tpos.y, tp.z+tpos.z);\n    \n}\n\nvec3 rot_y(vec3 tp, float a){\n    tp.xz *= Rot(a);\n    return tp;\n\n}\n\nfloat noi(vec3 p){ \n  vec3 f=floor(p),s=vec3(7,157,113);\n  p-=f; vec4 h=vec4(0,s.yz,s.y+s.z)+dot(f,s);;\n  p=p*p*(3.-2.*p);\n  h=mix(fract(sin(h)*43758.5),fract(sin(h+s.x)*43758.5),p.x);\n  h.xy=mix(h.xz,h.yw,p.y);\n  return mix(h.x,h.y,p.z);  \n}\nvec2 add = vec2(1.0, 0.0);\n#define HASHSCALE1 .1031\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n#define HASHSCALE4 vec4(1031, .1030, .0973, .1099)\n\nfloat Hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\nvec2 Hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nfloat Noise( in vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    \n    float res = mix(mix( Hash12(p),          Hash12(p + add.xy),f.x),\n                    mix( Hash12(p + add.yx), Hash12(p + add.xx),f.x),f.y);\n    return res;\n}\n\nvec2 Noise2( in vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    float n = p.x + p.y * 57.0;\n   vec2 res = mix(mix( Hash22(p),          Hash22(p + add.xy),f.x),\n                  mix( Hash22(p + add.yx), Hash22(p + add.xx),f.x),f.y);\n    return res;\n}\nconst mat2 rotate2D = mat2(1.3623, 1.7531, -1.7131, 1.4623);\nfloat Terrain( in vec2 p)\n{\n\tvec2 pos = p*0.05;\n\tfloat w = (Noise(pos*.25)*0.75+.15);\n\tw = 66.0 * w * w;\n\tvec2 dxy = vec2(0.0, 0.0);\n\tfloat f = .0;\n\tfor (int i = 0; i < 5; i++)\n\t{\n\t\tf += w * Noise(pos);\n\t\tw = -w * 0.4;\t//...Flip negative and positive for variation\n\t\tpos = rotate2D * pos;\n\t}\n\tfloat ff = Noise(pos*.002);\n\t\n\tf += pow(abs(ff), 5.0)*275.-5.0;\n\treturn f;\n}\n\nfloat TerrainRM(in vec2 p){\n\n    vec2 q = p * 0.05;\n    float w = Noise(q);\n    w = 50.0*w;\n    float f = 0.0;\n    for(int i = 0;i < 5;i++){\n        f += w * Noise(q*0.85);\n        w = -w * 0.4;\n        q = rotate2D * q;\n    \n    }\n    \n    float ff = Noise(q * 0.002);\n    f += ff*250.-80.0;\n   \n    return f;\n\n\n}\n\nfloat TerrainRM2(in vec2 p){\n\n    vec2 q = p * 0.05;\n    float w = Noise(q);\n    w = 50.0*w;\n    float f = 0.0;\n    for(int i = 0;i < 5;i++){\n        f += w * Noise(q*0.85);\n        w = -w * 0.4;\n        q = rotate2D * q;\n    \n    }\n    \n    float ff = Noise(q * 0.002);\n   f += ff*250.-80.0;\n   \n    \n    \n    for (int i = 0; i < 6; i++)\n\t{\n\t\tf += w * Noise(q*0.85);\n\t\tw =  - w * 0.4;\n\t\tq = rotate2D * q;\n\t}\n\n    return f;\n\n}\n// High def version only used for grabbing normal information.\nfloat Terrain2( in vec2 p)\n{\n\t// There's some real magic numbers in here! \n\t// The Noise calls add large mountain ranges for more variation over distances...\n\tvec2 pos = p*0.05;\n\tfloat w = (Noise(pos*.25)*0.75+.15);\n\tw = 66.0 * w * w;\n\tvec2 dxy = vec2(0.0, 0.0);\n\tfloat f = .0;\n\tfor (int i = 0; i < 5; i++)\n\t{\n\t\tf += w * Noise(pos);\n\t\tw =  - w * 0.4;\t//...Flip negative and positive for varition\t   \n\t\tpos = rotate2D * pos;\n\t}\n\tfloat ff = Noise(pos*.002);\n\tf += pow(abs(ff), 5.0)*275.-5.0;\n\t\n/*\n\ttreeCol = Trees(p);\n\tf += treeCol;\n\tif (treeCol > 0.0) return f;\n\n\t*/\n\t// That's the last of the low resolution, now go down further for the Normal data...\n\tfor (int i = 0; i < 6; i++)\n\t{\n\t\tf += w * Noise(pos);\n\t\tw =  - w * 0.4;\n\t\tpos = rotate2D * pos;\n\t}\n\t\n\t\n\treturn f;\n}\n\nvec2 GetDist2(vec3 p, vec2 uv){\n\n\n    vec4 s = vec4(-3.0,3.0, 9.0,1.0);\n    vec4 s2 = vec4(3.0 ,3.0, 7.0, 1.0);\n    \n    \n    \n    \n    vec2 d=vec2(0.0);;\n    float pd = dot(p, vec3(0.0, 1.0, 0.0));\n    \n    pd = p.y - TerrainRM2(p.xz);\n    \n    if(p.y <= 0.0){\n        pd = p.y - Noise3D(p*0.7)*0.5 - sin(p.x+iTime*2.0)*0.2-cos(p.z+iTime*2.0)*0.1+sin(p.y*3.0+iTime)*0.1;\n    }\n    \n     \n  /*  pd = pd - noi(p*0.9)*1.2 ;\n    pd -= noi(p*3.0)*0.01;\n   pd -= noi(p*10.0)*0.1;*/\n   \n    \n    vec3 sp = (p)-s.xyz;\n    float sd = length((sp))-s.w;\n       \n       \n    \n    vec3 sp2 = (p)-s2.xyz;\n    //sp2.y += sin(iTime)*0.1;\n    float sd2 = length((sp2))-s2.w;\n   \n    \n   \n      \n      if(sd < sd2){\n          d.x = sd;\n          d.y = -1.0;\n       }\n       else\n       {\n           d.x = sd2;\n          d.y = -1.0;\n       }\n       \n       if(pd < d.x){\n          d.x = pd;\n          d.y = 2.0;\n       }\n       \n     \n       \n       \n      \n   // \n    return d;\n    \n    \n}\n\nvec2 GetDist(vec3 p, vec2 uv){\n\n\n    vec4 s = vec4(-3.0,3.0, 9.0,1.0);\n    vec4 s2 = vec4(3.0 ,3.0, 7.0, 1.0);\n    \n    \n    \n    \n    vec2 d=vec2(0.0);;\n    float pd = dot(p, vec3(0.0, 1.0, 0.0));\n    \n    pd = p.y - TerrainRM(p.xz);\n    \n    if(p.y <= 0.0){\n        pd = p.y - Noise3D(p*0.7)*0.5 - sin(p.x+iTime*2.0)*0.2-cos(p.z+iTime*2.0)*0.1+sin(p.y*3.0+iTime)*0.1;\n    }\n    \n     \n  /*  pd = pd - noi(p*0.9)*1.2 ;\n    pd -= noi(p*3.0)*0.01;\n   pd -= noi(p*10.0)*0.1;*/\n   \n    \n    vec3 sp = (p)-s.xyz;\n    float sd = length((sp))-s.w;\n       \n       \n    \n    vec3 sp2 = (p)-s2.xyz;\n    //sp2.y += sin(iTime)*0.1;\n    float sd2 = length((sp2))-s2.w;\n   \n    \n   \n      \n      if(sd < sd2){\n          d.x = sd;\n          d.y = -1.0;\n       }\n       else\n       {\n           d.x = sd2;\n          d.y = -1.0;\n       }\n       \n       if(pd < d.x){\n          d.x = pd;\n          d.y = 2.0;\n       }\n       \n     \n       \n       \n      \n   // \n    return d;\n    \n    \n}\n\nvec3 RayMarch2(vec3 eye, vec3 viewRayDirection, vec2 uv){\n    vec3 t = vec3(0.);\n    float max = -100000.0;\n    vec2 dd;\n    float depth = 0.0, end = 10.0, delta=0.0, v;\n    for (int i = 0; i < 150; i++) {\n        t.yz = GetDist(eye + t.x * viewRayDirection, uv).xy;\n       \n        \n        \n            \n        if (t.y < 0.01) {\n           \n           break;\n        }\n        //t.x += t.y;\n        \n        \n\n        if (t.x >= 10000.0) {\n            break;\n        }\n       \n        if(0.01>= 0.3*t.y)v= 0.01;\n        else v = 0.3*t.y;\n       delta = v + (t.x*0.0065);\n\t\t t.x += delta;\n    }\n    if (t.x >= 10000.0)t.x = -1.0;\n        \n       \n    \n    return t;\n\n\n}\n \nvec3 RayMarch3(vec3 eye, vec3 viewRayDirection, vec2 uv){\n    vec3 t = vec3(0.);\n    float max = -100000.0;\n    vec2 dd;\n    float depth = 0.0, end = 10.0, delta=0.0, v;\n    for (int i = 0; i < 150; i++) {\n        t.yz = GetDist2(eye + t.x * viewRayDirection, uv).xy;\n       \n        \n        \n            \n        if (t.y < 0.01) {\n           \n           break;\n        }\n        //t.x += t.y;\n        \n        \n\n        if (t.x >= 10000.0) {\n            break;\n        }\n       \n        if(0.01>= 0.3*t.y)v= 0.01;\n        else v = 0.3*t.y;\n       delta = v + (t.x*0.0065);\n\t\t t.x += delta;\n    }\n    if (t.x >= 10000.0)t.x = -1.0;\n        \n       \n    \n    return t;\n\n\n}\n\n\nfloat GetLight(vec3 p, vec2 uv, vec3 lg, out vec3 n){\n    vec3 lightpos = lg;\n    lightpos.xz += vec2(sin(iTime), cos(iTime));\n    vec3 l = normalize(lightpos-p);\n    \n    vec2 d = GetDist(p, uv);\n    vec2 e = vec2(0.01, 0);\n    \n    \n   // float dd = d.x;\n    n = d.x - vec3(\n        GetDist(p-e.xyy, uv).x,\n        GetDist(p-e.yxy, uv).x,\n        GetDist(p-e.yyx, uv).x);\n    \n    n = normalize(n);\n    \n    float dif = clamp(dot(n, l), .0, 1.);\n   // float dif = clamp(dot(n, l), 0., 1.);\n   // vec3 dd = RayMarch2(p+n*.01, l, uv);\n    //if(dd.x < length(lightpos-p))dif *= 0.1;\n    return (dif) ;\n\n}\n\n\nvec3 Mat2(vec3 p, vec3 n1, vec3 diff2, vec3 lightpos){\n    vec3 col = mix(vec3(1.0)*diff2, vec3(Noise(p.xz)*0.1), 0.5);\n    \n   \n   \n    if(p.y <= 0.0){\n                 \n             col = vec3(0.0, 0.8, 1.0) ;\n             col += mix(vec3(Noise(p.xz)*0.1) , diff2 * vec3(0.0, 0.8, 1.0), 0.6);\n    }\n    else if(p.y < 1.45){\n         col =  vec3(1.0, 1.0,0.0)*diff2;\n    }\n    else if( (p.y < 10.35) && (n1.y > 0.9)){\n        col = vec3(0.0,1.0, 0.0)*diff2;\n       \n    }\n   \n    else if ((p.y > 80.0)&& (n1.y > 0.5))\n    {\n        //col = mix(vec3(Noise(p.xz)*0.1)*vec3(1.0), vec3(1.0)*diff2+0.3, 0.9);\n        //col += 0.3;\n        col =  vec3(1.0)*diff2;\n       \n    }\n    else\n    {\n       col += vec3(150. ,75., 21.)/255.*diff2;\n    \n    }\n    \n    \n    \n    \n\n   \n    \n    \n       \n    \n    return clamp(col, 0., 1.);\n            \n}\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = GetDist2( ro + rd*t , vec2(1.0)).y;\n        res = min( res, 10.0*h/t );\n        t += clamp( h, 0.01, 0.10 );\n        if( h<0.0001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = GetDist2( aopos , vec2(1.0)).y;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\nvec3 GetLightM(vec3 p, vec2 uv, vec3 lg, out vec3 n, vec3 ro, vec3 rd){\n    vec3 lightpos = lg;\n    //lightpos.xz += vec2(sin(iTime), cos(iTime));\n    //p = p*2.0;\n    vec3 l = normalize(lightpos-p);\n    \n    vec2 d = GetDist2(p, uv);\n    \n    vec2 e = vec2(0.01, 0);\n    \n    n = d.x - vec3(\n        GetDist2(p-e.xyy, uv).x,\n        GetDist2(p-e.yxy, uv).x,\n        GetDist2(p-e.yyx, uv).x);\n    \n    \n    n = normalize(n);\n    \n    float occ = calcAO(p, n);\n    \n    \n            \n    float dif = clamp(dot(n, l), .0, 1.);\n    //dif *= calcSoftshadow(p, lightpos, 0.01, 10000. );\n    dif += occ*0.15;\n    \n    //\n \n    vec3 dd = RayMarch2(p+n*.01, l, uv);\n    p = ro + reflect(n, l) * dd.x;\n    \n    \n    \n         \n    if(dd.y < length(lightpos-p) && dd.x > 0.0){\n        if(dd.z == -1.0){\n            vec3 colXZ = texture(iChannel0, p.xz*0.1).rgb;\n             vec3 colYZ = texture(iChannel0, p.yz*0.1).rgb;\n             vec3 colXY = texture(iChannel0, p.xy*0.1).rgb;\n\n             n = abs(n);\n\n             n *= pow(n, vec3(20));\n             n /= n.x+n.y+n.z;\n\n             vec3 col = colYZ * n.x + colXZ * n.y + colXY*n.z;\n\n             uv = vec2(atan(p.x, p.z)/6.2832+.5, p.y/3.+0.5);\n             vec4 st = texture(iChannel0, uv);\n\n             col = vec3(dif) * mix(col, st.rgb, st.a);\n             return col;\n\n        }\n        else if(dd.z == 2.0)\n        {\n            vec3 col;\n            \n                        \n            col = Mat2(p, n, vec3(dif), lightpos);\n            \n            \n            return col;\n            \n            \n            \n        }\n        else if(dd.z == 3.0)\n        {\n            vec3 colXZ = texture(iChannel1, p.xz*0.1).rgb;\n             vec3 colYZ = texture(iChannel1, p.yz*0.1).rgb;\n             vec3 colXY = texture(iChannel1, p.xy*0.1).rgb;\n             \n             vec3 col = colYZ * n.x + colXZ * n.y + colXY*n.z;  \n             col *= vec3(1.0, 0.0, 0.0);\n             return col;\n        }\n        else if(dd.z == 4.0){\n             vec3 colXZ = texture(iChannel2, p.xz*0.1).rgb;\n             vec3 colYZ = texture(iChannel2, p.yz*0.1).rgb;\n             vec3 colXY = texture(iChannel2, p.xy*0.1).rgb;\n             \n             \n             vec3 col = colYZ * n.x + colXZ * n.y + colXY*n.z;\n             \n             col -= vec3(.3);\n             return col;\n         }\n        else\n            return vec3(dif);\n            \n     }\n     else\n         return vec3(dif);\n\n}\nvec3 lightDir = normalize( vec3(0.5,0.6,0.) );\nconst mat2 m2 = mat2( 0.60, -0.80, 0.80, 0.60 );\n//ref: https://www.shadertoy.com/view/Msdfz8\nvec3 Cloud(vec3 bgCol,vec3 ro,vec3 rd,vec3 cloudCol,float spd)\n{\n    vec3 col = bgCol;\n    float t = iTime * 0.15* spd;\n    vec2 sc = ro.xz + rd.xz*((3.)*40000.0-ro.y)/rd.y;\n    vec2 p = 0.00002*sc;\n    float f = 0.0;\n  \tfloat s = 0.5;\n  \tfloat sum =0.;\n  \tfor(int i=0;i<5;i++){\n    \tp += t;t *=1.5;\n    \tf += s*textureLod( iChannel0, p/256.0, 0.0).x; p = m2*p*2.02;\n    \tsum+= s;s*=0.6;\n  \t}\n    float val = f/sum; \n    col = mix( col, cloudCol, smoothstep(0.5,0.8,val) );\n    return col;\n}\nvec3 RayMarchCloud(vec3 ro,vec3 rd){\n    vec3 col = vec3(0.0,0.0,0.0);  \n    float sundot = clamp(dot(rd,lightDir),0.0,1.0);\n    \n     // sky      \n    col = vec3(0.2,0.5,0.85)*1.1 - rd.y*rd.y*0.5;\n    col = mix( col, 0.85*vec3(0.7,0.75,0.85), pow( 1.0-max(rd.y,0.0), 4.0 ) );\n    // sun\n    col += 0.25*vec3(1.0,0.7,0.4)*pow( sundot,5.0 );\n    col += 0.25*vec3(1.0,0.8,0.6)*pow( sundot,64.0 );\n    col += 0.4*vec3(1.0,0.8,0.6)*pow( sundot,512.0 );\n    // clouds\n    col = Cloud(col,ro,rd,vec3(1.0,0.95,1.0),1.);\n            // .\n    col = mix( col, 1.5*vec3(0.0,0.5,1.0), pow( 1.0-max(rd.y,0.0), 16.0 ) );\n    return col;\n}\n/**\n * Lighting contribution of a single point light source via Phong illumination.\n * \n * The vec3 returned is the RGB color of the light's contribution.\n *\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n * lightPos: the position of the light\n * lightIntensity: color/intensity of the light\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\nvec3 phongContribForLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,\n                          vec3 lightPos, vec3 lightIntensity, vec2 uv, out vec3 N) {\n    \n    vec2 d = GetDist(p, uv);\n    vec2 e = vec2(0.01, 0);\n    \n    \n    N = d.x - vec3(\n        GetDist(p-e.xyy, uv).x,\n        GetDist(p-e.yxy, uv).x,\n        GetDist(p-e.yyx, uv).x);\n    \n    N = normalize(N);\n    //vec3 N = estimateNormal(p);\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye - p);\n    vec3 R = normalize(reflect(-L, N));\n    \n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n    \n    if (dotLN < 0.0) {\n        // Light not visible from this point on the surface\n        return vec3(0.0, 0.0, 0.0);\n    } \n    \n    if (dotRV < 0.0) {\n        // Light reflection in opposite direction as viewer, apply only diffuse\n        // component\n        return lightIntensity * (k_d * dotLN);\n    }\n    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));\n}\n\n/**\n * Lighting via Phong illumination.\n * \n * The vec3 returned is the RGB color of that point after lighting is applied.\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\nvec3 phongIllumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye, vec2 uv, out vec3 n) {\n    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * k_a;\n    \n    vec3 light1Pos = vec3(4.0 * sin(iTime),\n                          2.0,\n                          4.0 * cos(iTime));\n    vec3 light1Intensity = vec3(0.4, 0.4, 0.4);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light1Pos,\n                                  light1Intensity,\n                                  uv,\n                                  n);\n    \n    vec3 light2Pos = vec3(2.0 * sin(0.37 * iTime),\n                          2.0 * cos(0.37 * iTime),\n                          2.0);\n    vec3 light2Intensity = vec3(0.4, 0.4, 0.4);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light2Pos,\n                                  light2Intensity,\n                                  uv,\n                                  n);    \n    return color;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n    // Time varying pixel color\n    vec3 col = vec3(0.0);\n    vec3 lightpos = vec3(0.0, 100., -50.);\n    \n    //iMouse.xy / iResolution.xy\n    vec3 lookat = vec3((iMouse.x/iResolution.x)*10.0, (iMouse.y/iResolution.y)*30.0, 30.0);//vec3(0.0, 1.5, 0.0);\n    vec3 ro = vec3(0, 20.0, -50.);\n    float speed = 50.0;\n    \n    //lightpos.z+= iTime*speed;\n    \n    float an = (iMouse.x/iResolution.x)*10.0;\n    ro -= lookat;\n    lookat -= lookat;\n    ro *= RotY(an);\n    lookat *= RotY(an);\n    ro += lookat;\n    lookat += lookat;\n    \n    //vec3 lightpos = vec3(0.0, 30., -30.);\n   \n    lightpos -= lookat;\n    lightpos *= RotY(an);\n    lightpos += lookat;\n    \n     lightpos.z += iTime*speed;\n    ro.z += iTime*speed;\n    lookat.z += iTime*speed;\n    \n    vec3 p;\n    float h = 0.0;\n    for (int i = 0; i < 4; i++)\n\t{\n        \n        h += Terrain(ro.xz) ;\n        //\n        \n    }\n    h+= 50.0;\n    ro.y += h;\n    lightpos.y += h;\n    //lightpos.y += h;\n    if(h <= 0.0){\n        lookat.y = ro.y +10.0 ;\n    \n    }\n    else\n    {\n        lookat.y = ro.y -10.0 ;\n    \n    }\n    \n    if(ro.y < 0.0){\n        ro.y = 5.0;\n    \n    }\n    \n    float zoom = 2.0;    \n    vec3 f = normalize(lookat-ro),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f, r),\n        c = ro + f * zoom,\n        i = c + uv.x * r + uv.y * u,\n        rd = normalize(i-ro);\n        \n    \n        \n     vec3 t;\n     float dO, dif, dif2, dif3, difT;\n     //vec3 p;\n     \n  \n     \n     t = RayMarch2(ro, rd, uv);\n     p = ro + rd * t.x;\n     \n    float alpha = 1.0;\n    vec3 n1, n2, n3, np;\n  \n   vec3 diff2 = GetLightM(p, uv, lightpos, n1, ro, rd);\n    \n    //vec3 ph = phongIllumination(vec3(1.0), vec3(dif), vec3(1.0, 1.0, 0.0), 50.0, p, ro, uv, np);\n    \n   \n    \n     if(t.x > 0.0){\n         \n             \n         \n         if(t.z == 0.0){\n             //col = ph * vec3(0.0, 1.0, 0.0);\n         }\n         else if(t.z == 1.0){\n             col = diff2* vec3(1.0, 0.0, 0.0);\n         }\n         else if(t.z == 2.0){\n         \n             \n                \n            col = Mat2(p, n1, diff2, lightpos);\n            \n            \n         \n             alpha = 0.1;\n             \n            \n             \n             \n         }\n         else if(t.z == -1.0){\n             vec3 colXZ = texture(iChannel0, p.xz*0.1).rgb;\n             vec3 colYZ = texture(iChannel0, p.yz*0.1).rgb;\n             vec3 colXY = texture(iChannel0, p.xy*0.1).rgb;\n             \n             \n             n1 = abs(n1);\n             \n             n1 *= pow(n1, vec3(20));\n             n1 /= n1.x+n1.y+n1.z;\n             \n             col = colYZ * n1.x + colXZ * n1.y + colXY*n1.z;\n             \n             uv = vec2(atan(p.x, p.z)/6.2832+.5, p.y/3.+0.5);\n             vec4 st = texture(iChannel0, uv);\n            \n             \n             col = diff2 * mix(col, st.rgb, st.a);\n         }\n         else if(t.z == 3.0){\n            \n             \n             float NdotL = max( 0., dot( n1, vec3(0.0, 6., 5.)-p ) );\n             float SpecularColor;\n            SpecularColor = SpecularColor + ( 1. - SpecularColor ) * pow( ( 1. - NdotL ), 5. );\n             \n             col = diff2*vec3(.003, .005, .005);\n             col = mix(diff2 * vec3(0.5, 0.5, 0.5)+SpecularColor*0.001, \n                       vec3(0., 0.5, 5.0)*diff2+vec3(0.2,0.5, 0.5)*SpecularColor*0.0001, 0.7 );\n             col += normalize(vec3(0.1, 0.1, 0.1));\n         \n         \n         }\n         else if(t.z == 4.0){\n             vec3 colXZ = texture(iChannel2, p.xz*0.1).rgb;\n             vec3 colYZ = texture(iChannel2, p.yz*0.1).rgb;\n             vec3 colXY = texture(iChannel2, p.xy*0.1).rgb;\n             \n             \n             col = colYZ * n1.x + colXZ * n1.y + colXY*n1.z;\n             col += diff2 * vec3(1.0, 0.5, 0.5);\n         }\n         else if(t.z == 5.0){\n             vec3 colXZ = texture(iChannel0, p.xz*0.1).rgb;\n             vec3 colYZ = texture(iChannel0, p.yz*0.1).rgb;\n             vec3 colXY = texture(iChannel0, p.xy*0.1).rgb;\n             \n             col = colYZ * n1.x + colXZ * n1.y + colXY*n1.z ;\n             col += diff2 * vec3(1.0, 0.5, 0.5);\n         \n             \n         }\n         \n         /*vec2 j = uv*3.0;\n         j.x += 0.0;\n         j.y += .1;\n         float sparkle = 1./dot(j,j);\n                \n         col += diff2*(sparkle*sin(mod(iTime*10.0, 3.1415))*0.01) ;\n    \n       */\n         \n         \n         \n     }\n     else\n     {\n         col = RayMarchCloud( ro, rd);\n         //col = mix(vec3(1.0, 1.0, 1.0), col, 0.3);\n         \n     }\n     \n     if(t.x > 1000.1)col = mix(vec3(1.0, 1.0, 1.0), col, exp(-t.x*0.0005));\n     //col = (1.0 - exp(-col * 6.0)) * 1.0024;\n\t\n   \n    // Output to screen\n    fragColor = vec4((col),alpha);\n}\n\n\n\n","name":"Image","description":"","type":"image"}]}