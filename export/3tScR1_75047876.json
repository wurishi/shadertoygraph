{"ver":"0.1","info":{"id":"3tScR1","date":"1593662597","viewed":117,"name":"Multicolor Metaballs Shaded","username":"Mischawake","description":"a shaded version of https://www.shadertoy.com/view/3llyDB","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["metaballs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define hsv2rgb(h) clamp( abs(mod( h*6.+vec3(0,4,2), 6.)-3.)-1., 0., 1. )\n\nvec2 calcInfluence( vec4 ball, vec2 uv)\n{ \n    float d = distance(ball.rg, uv);\n    ball.b /= d*d*d;\n    return  ball.ab;   \n}\n\nfloat calcShading( vec4 ball, vec2 uv )\n{\n    float d = distance(ball.rg, uv);\n    return max( (ball.b - d)/ball.b,0.);\n}\n  \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n    uv.x -= 0.333;\n    \n   \tfloat threshold = 100.0;\n    float reduce = 0.4;\n   \n    float bars = 18.0;\n    int i_bars = int(bars);\n    \n    float winningColor = 0.0;\n    float currentInfluence = 0.0;\n\n   \tfloat totalPositive = 0.0;\n    float totalNegative = 0.0;\n    float totalShade = 0.0;\n    \n    //first pass determine color with greatest influence\n    for( int i = 0; i < i_bars; i++ ){\n        \n        float i_float = float(i);\n        vec4 p0 = texture(iChannel0, vec2(i_float/bars + (1.0/bars*0.5),0.0));\n        vec2 ball0 = calcInfluence(p0, uv);\n        \n        if( ball0.y > currentInfluence ){\n           winningColor = ball0.x;\n           currentInfluence = ball0.y;     \n        }\n        \n        \n    }\n    \n    for( int i = 0; i < i_bars; i++ ){\n        \n        float i_float = float(i);   \n        vec4 p0 = texture(iChannel0, vec2(i_float/bars + (1.0/bars*0.5),0.0));\n        vec2 ball0 = calcInfluence(p0, uv);\n       \t\n        //same color as current winner, add to it\n        if( ball0.x == winningColor ){\n            totalPositive += ball0.y;\n            totalShade += pow( calcShading(p0,uv), 3.0);\n        }\n        else{\n            totalNegative += ball0.y;\n        }\n        \n        \n    }\n    \n    \n    totalShade = pow( totalShade, 1.0/3.0);\n   \n    \n    float influence = totalPositive - totalNegative * reduce;\n    \n   \tfloat step = smoothstep( threshold, threshold * 1.1, influence);\n   \n    \n    step *= 0.25 + totalShade;\n    \n    fragColor = vec4( hsv2rgb( winningColor ) * step, 1.0 );\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    \n    vec2 uv = fragCoord/iResolution.xy;\n    float rad = 0.15;\n    float bars = 18.0;\n    \n   \tfloat hue1 = 0.04;\n    float hue2 = 0.6;\n    float hue3 = 0.2;\n    float hue4 = 0.9;\n    \n    vec4 mouse = iMouse / iResolution.yyyy;\n    mouse.x -= 0.333;\n    \n    vec4 color;\n    \n    float jiggle = sin(iTime*3.0 + uv.x) * 0.01;\n    \n    if(uv.x < 1.0/bars)\n        color = vec4(0.2 + jiggle,0.2 - jiggle,rad, hue1);\n    \n    else if(uv.x < 2.0/bars)\n        color = vec4(0.2 - jiggle,0.4,rad, hue4);\n        \n    else if(uv.x < 3.0/bars)\n        color = vec4(0.2,0.6 + jiggle,rad, hue4);\n        \n   \telse if(uv.x < 4.0/bars)\n        color = vec4(0.2 - jiggle,0.8 - jiggle,rad, hue1);\n        \n    else if(uv.x < 5.0/bars)\n        color = vec4(0.4 + jiggle,0.2 - jiggle,rad, hue1);\n        \n    else if(uv.x < 6.0/bars)\n        color = vec4(0.4 + jiggle,0.4,rad, hue3);\n        \n    else if(uv.x < 7.0/bars)\n        color = vec4(0.4,0.6 + jiggle,rad, hue1);\n    \n    else if(uv.x < 8.0/bars)\n        color = vec4(0.4 - jiggle,0.8,rad, hue1);\n    \n    else if(uv.x < 9.0/bars)\n        color = vec4(0.6,0.2 - jiggle,rad, hue2);\n        \n    else if(uv.x < 10.0/bars)\n        color = vec4(0.6,0.4 - jiggle,rad, hue3);\n        \n    else if(uv.x < 11.0/bars)\n        color = vec4(0.6 - jiggle,0.6 - jiggle,rad, hue3);\n        \n    else if(uv.x < 12.0/bars)\n        color = vec4(0.6,0.8 - jiggle,rad, hue2);\n        \n    else if(uv.x < 13.0/bars)\n        color = vec4(0.8 + jiggle,0.2 + jiggle,rad, hue1);\n        \n    else if(uv.x < 14.0/bars)\n        color = vec4(0.8 + jiggle,0.4 - jiggle,rad, hue3);\n        \n    else if(uv.x < 15.0/bars)\n        color = vec4(0.8,0.6 + jiggle,rad, hue2);\n        \n    else if(uv.x < 16.0/bars)\n        color = vec4(0.8,0.8 - jiggle,rad, hue2);\n    \n    else if(uv.x < 17.0/bars)\n        color = vec4( mouse.xy, rad, hue3);\n        \n   \telse \n    \tcolor = vec4( abs(vec2(sin(iTime*0.25), cos(iTime*0.15))),rad, hue2);\n    \n        \n    fragColor = color;\n\n    \n}","name":"Buffer A","description":"","type":"buffer"}]}