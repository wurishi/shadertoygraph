{"ver":"0.1","info":{"id":"WlySDt","date":"1583790933","viewed":1566,"name":"Multi XOR sorting simplified","username":"michael0884","description":"Simplified code. Performance is exactly O(N*floor(log2(N))*ceil(log2(N))).","likes":26,"published":3,"flags":32,"usePreview":0,"tags":["xor","sort","sorting","parallel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Multi XOR sorting\" by michael0884. https://shadertoy.com/view/WlySDc\n// 2020-03-09 21:12:12\n\nvoid mainImage( out vec4 U, in vec2 p )\n{\n    p = floor((2.*N/iResolution.x)*p);\n    if(max(p.x, p.y) < N)\t//sorted array\n    {\n       \n    \tU.xyz = texel(ch0,p).xxx;\n    }\n    else if(max(p.x-N, p.y) < N) //sorting quality check\n    {\n        p.x -= N;\n\t\tfloat id = xy2i(p);\n    \tU.xyz = vec3(texel(ch0, i2xy(id+1.)).x < texel(ch0, i2xy(id)).x);\n    }\n    else discard;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 U, in vec2 p )\n{  \n    p = floor(p);\n    if(max(p.x, p.y) < N)\n    {\n        //pair ids\n        float id0 = xy2i(p);  //this pixel id\n        float id1 = float(xor_n(int(id0), imod(-iFrame-1, steps))); //pair pixel id, just by flipping first n bits, n - is the step\n  \n        if(id1 < size) // if inside the array - this allows sorting arrays of non power 2 size\n        {\n            float val0 = texel(ch0, i2xy(id0)).x;\n            float val1 = texel(ch0, i2xy(id1)).x;\n            U.x = (id0 > id1) ? max(val0, val1) : min(val0, val1); //swap sorted\n        }\n        else\n        {\n            U = texel(ch0, p);\n        }\n        \n        if(imod(iFrame, steps*stepsf) == 0)\n        {\n            U.x = hash12(p);\n        }\n    }\n    else discard;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define texel(a, p) texelFetch(a, ivec2(p), 0)\n#define ch0 iChannel0\n#define N 300.\n\nfloat size = N*N;\nfloat steps = ceil(log2(N*N));\nfloat stepsf = floor(log2(N*N));\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//mappings\nvec2 i2xy(float id)\n{\n    return vec2(mod(id, N), floor(id/N));\n}\n\nfloat xy2i(vec2 xy)\n{\n    return xy.x + xy.y*N;\n}\n\n//flip lowest n bits\nint xor_n(int x, int n)\n{\n    return x ^ ( (1<<(n+1)) - 1 );\n}\n\nint imod(int a, float b)\n{\n    return a - int(b*floor(float(a)/b));\n}\n","name":"Common","description":"","type":"common"}]}