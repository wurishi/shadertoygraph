{"ver":"0.1","info":{"id":"lcjGWK","date":"1704649385","viewed":30,"name":"colorful water ","username":"nayk","description":"water, colorful, metaballs, stars","likes":1,"published":1,"flags":1,"usePreview":0,"tags":["metaballs","water","colorful","stars"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*originals https://www.shadertoy.com/view/lslyRn https://www.shadertoy.com/view/DtGyWh https://www.shadertoy.com/view/4dfGzM */\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam; // the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.1-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.01,1.);\t\n}\nfloat time;\n\nvec3 rotate(vec3 r, float v){ return vec3(r.x*cos(v)+r.z*sin(v),r.y,r.z*cos(v)-r.x*sin(v));}\n\n\nvec3 blob(float i){ \n\tfloat time = iTime;\n\tfloat t   = max(0.0,time+(time*(mod(i,10.0)*0.1)));\n\tvec3  s   = vec3(sin(i*1.02),(mod(t*0.2+i*0.01+sin(i)*30.0,1.0)-0.5)*13.0,sin(i*0.1));\n\t\t  s  *= 1000.0;\n\tfloat f   = s.y+1000.0;\n\tfloat f1  = min(f,0.0)-abs(sin(abs(max(f,0.0)*0.0009)))*clamp(1.0-f/3000.0,0.0,1.0)*3000.0*mod(i*0.2,1.0);\n\tfloat f2  = s.y-f1;\n\tvec3  m  = s + s*f2*0.0004;\n\tvec3  ss = vec3(m.x,f1,m.z);\n\treturn ss;\n\t}\n\n\n#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(3,13,51))*.1+.5)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,iTime*0.02);\n\tfloat time2=iTime*speed+.25;\n    vec4 f =fragColor;\n    vec2 g = fragCoord;\nfloat time  = iTime*0.3;\n\n\tfloat BALL_SIZE = 0.9999;\n\tfloat BLEND_DEPTH = 200.0;\n\tfloat BLEND_BALL = 0.004;\n\t\n  \n\tfloat rot    = sin(time)*0.5+iMouse.x*0.01;\n    vec3  ray1   = rotate(-normalize(vec3(uv.x,uv.y-0.3,1.0)),rot);\n    vec3  campos = rotate(vec3(0.0,-3000.0,7000.0),rot);\n\tvec3  blobpos= vec3(0.0);\n    vec4 O=fragColor;\n    vec2 C =fragCoord;\nO=vec4(0);\n   \n    float i = 0.0;\n    float cl = 0.0;  \n\tfloat ca = 0.0;\n    vec3  cp = vec3(0.0);\n\tfloat cd = 99999.9;    \n\n\tfloat ii = 0.0;\n\t\n    for(int i=0;i<100;i++){\n        \n\t\tblobpos = blob(ii);\n\t\t\n        vec3  vect  = blobpos-campos;\n        float vectm = length(vect);     \n        vec3  vectn = vect/vectm;\n\t\t\n        float d = dot(ray1,vectn);\n\t\tfloat c = BALL_SIZE/d;\n\t\tfloat w = (smoothstep(-BLEND_DEPTH,0.0,cd-vectm) * smoothstep(c-BLEND_BALL,c,d));\n\t\t\n\t\tcd = mix(cd,vectm,w);\n\t\tcp = mix(cp,blobpos,w);\n\t\tcl = mix(cl,d,w);\n\n\t\tii ++;\n\t\t\n\t};\n    \n\n\tfloat a = dot(ray1, cp-campos );\n\tvec3  contact = campos+ray1*a;\n\tvec3  norm = normalize(cp-contact);\t\n\tfloat dist = length(cp-contact);\t\n\n\tfloat cut   = clamp(smoothstep(0.80,0.99,cl)-pow(smoothstep(400.0,0.0,dist),1.0),0.0,1.0);\n\tfloat angle = dot(norm,vec3(0.0,0.8,0.2));\n\t\n\tfloat sha  = smoothstep(-0.3,-0.5,angle)*0.5;\n\tfloat hil  = smoothstep(0.6,0.8,angle);\n\tfloat sha2 = smoothstep(1.0,0.0,max(0.0,-contact.y))*smoothstep(0.40,0.98,cl);\n\t\n\tvec3 backcol = vec3(0.25,0.35,0.4)-sha2*0.15+smoothstep(0.0,0.4,ray1.y-0.1)*0.4;\n\t\n\tvec3 blobcol = vec3(0.3,0.4,0.45);\n\t\t blobcol = mix(blobcol,vec3(0.0,0.0,0.05),sha); \n\t\t blobcol = mix(blobcol,vec3(1.0),hil); \n\n\n  vec3 n,q,r=iResolution,\n    d=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<110.;\n        O.xyz+=mix(vec3(1),H(g*.1),sin(.8))*1./e/8e3\n    )\n    {\n        n=g*d;\n        n.z+=iTime*0.0;\n       \n        a=10.;\n        n=mod(n-a,a*2.)-a;\n        s=6.;\n        for(int i=0;i++<8;){\n            n=.3-abs(n);\n            \n            n.x<n.z?n=n.zyx:n;\n            n.z<n.y?n=n.xzy:n;\n            n.y<n.x?n=n.zyx:n;\n            \n            s*=e=1.4+sin(iTime*.234)*.1;\n            n=abs(n)*e-\n                vec3(\n                    12.+cos(iTime*.11+2.1*cos(iTime*.205))*3.,\n                    180.+cos(iTime*.25)*5.,\n                    4.+cos(iTime*.25)*5.\n                 )*sqrt(mix(backcol,blobcol,cut))-dot(uv,uv)*0.4 ;\n         }\n         g+=e=length(n.yz)/s;\n         g+=e=length(n.yx)/s;\n    }\n\t\t\n        \n        \n      \n\tvec3 from=vec3(1.,.5,0.5)+O.xyz;\n\tfrom+=vec3(time2*2.,time2,-2.);\n\t\n\tmainVR(fragColor, fragCoord, from, dir);\n    \n   \tfragColor+= vec4(O.xyz,1.0);\n}\n","name":"Image","description":"","type":"image"}]}