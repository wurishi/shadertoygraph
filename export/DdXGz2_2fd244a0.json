{"ver":"0.1","info":{"id":"DdXGz2","date":"1666654119","viewed":62,"name":"Wave function \"propagating\"","username":"jean80it","description":"Wave function expanding from source. The phasor diagram shows you value for a sample point.\nThe slow expansion is for demonstration only - the wave function is computed as instantaneously everywhere.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["wavefunctionemanating"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926\n\n#define sqr(x) (x * x)\n\nvec2 rotate(vec2 p, float a)\n{\n    mat2 r = mat2(\n        cos(a), sin(a),\n        -sin(a), cos(a)\n        );\n        \n    return p * r;\n}\n\nvec2 translate(vec2 p, vec2 newPos)\n{\n    return p - newPos;\n}\n\nfloat sdRect(vec2 p, vec2 size) \n{\n    vec2 d = abs(p) - size / 2.0;\n    return max(d.x, d.y);\n}\n\nfloat combineSdUnion(inout float sd1, float sd2)\n{\n    sd1 = min(sd1, sd2);\n    return sd1;\n}\n\nfloat sdEllipse(vec2 p, vec2 r)\n{\n    return length(p * r.x / r) - r.x;\n}\n\nfloat sdEllipse(vec2 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat sdOutline(float sd, float thickness)\n{\n    return abs(sd) - thickness * 0.5;\n}\n\n// from iq\nfloat udSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 ba = b-a;\n    vec2 pa = p-a;\n    float h =clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length(pa-h*ba);\n}\n\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n\nfloat sdVector(in vec2 p, in float len, in float thickness, in float appPointR, vec2 arrowHeadSize)\n{\n    vec2 arrowLineSize = vec2(thickness, len);\n    float c = sdRect(p - vec2(0.0, (arrowLineSize.y - arrowHeadSize.y) / 2.0), arrowLineSize - vec2(0.0, arrowHeadSize.y));\n    c = min(c, sdEllipse(p, vec2(appPointR)));\n    c = min(c, sdTriangleIsosceles(p - vec2(0.0, arrowLineSize.y), vec2(arrowHeadSize.x, -arrowHeadSize.y)));\n    \n    return c;\n}\n\nvec3 drawSd(float d, inout vec3 prevCol, vec3 newCol, float aaTransitionWidth)\n{\n    prevCol = mix(prevCol, newCol, smoothstep(aaTransitionWidth, 0.0, d));\n    return prevCol;\n}\n\nvec3 drawSd(float d, inout vec3 prevCol, vec3 newCol, float mask, float aaTransitionWidth)\n{\n    prevCol = mix(prevCol, newCol, clamp(mask, 0.0, 1.0) * smoothstep(aaTransitionWidth, 0.0, d));\n    return prevCol;\n}\n\nvoid drawPhasorDiagram(vec2 p, inout vec3 color, float aaTransitionWidth, float frequency, float amplitude, float currentPhase, float thickness, vec3 vecCol, float alpha)\n{\n    vec2 phasorHOffs = vec2(0.0, 0.0);\n    \n    float appPointR = thickness * 2.0;\n    vec2 arrowHeadSize = thickness * vec2(4, 8);\n    \n    \n    drawSd(sdOutline(sdEllipse(translate(p, phasorHOffs),  vec2(amplitude)), thickness), color, vec3(1.0), alpha, aaTransitionWidth);\n    drawSd(sdVector(rotate(translate(p, phasorHOffs), currentPhase), amplitude, thickness, appPointR, arrowHeadSize), color, vecCol, alpha, aaTransitionWidth);    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n    vec2 size = vec2(iResolution.x / iResolution.y, 1.0);\n    vec2 center = size * 0.5;\n    float aaTransitionWidth = 1.0 / (min(iResolution.x, iResolution.y)) * 2.0;\n\n    float phase = max(0.0, (iTime - 4.0) * 5.0);\n\n    float d = distance(uv, center) * 100.0;\n    vec3 col = smoothstep(1.0, 0.0, d - phase) * vec3(sin(d) * 0.5 + 0.5);\n\n    vec2 frontPos = vec2(center.x + phase * 0.01, center.y);\n\n    drawSd(udSegment(uv, frontPos, vec2(1.5, 0.8)),\n            col, vec3(1.0, 0.0, 1.0), 0.5, aaTransitionWidth);\n\n    drawPhasorDiagram(translate(uv, vec2(1.5, 0.8)), col, aaTransitionWidth, 1.0, 0.15, phase, 0.002, vec3(1.0, 0.0, 1.0), 1.0);\n\n    drawSd(sdEllipse(translate(uv, frontPos), 0.01),\n            col, vec3(1.0, 0.0, 1.0), 1.0, aaTransitionWidth);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}