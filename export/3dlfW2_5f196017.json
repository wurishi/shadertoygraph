{"ver":"0.1","info":{"id":"3dlfW2","date":"1589114510","viewed":574,"name":"Wood Grain Texture","username":"jstrom2002","description":"Uniform random noise generator adapted from: https://people.sc.fsu.edu/~jburkardt/cpp_src/uniform/uniform.html\nNote: This code is distributed under the GNU LGPL license. See original website for details.\n'cnoise' and helper functions from S.Gustav","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise","random","uniform"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// GLSL textureless classic 2D noise \"cnoise\",\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n//https://github.com/ashima/webgl-noise/blob/master/src/classicnoise2D.glsl\nvec4 mod289(vec4 x)\n{\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n    return mod289(((x * 34.0) + 1.0) * x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n    return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec2 fade(vec2 t) {\n    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);\n}\n\n// Classic Perlin noise\nfloat cnoise(vec2 P)\n{\n    vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n    vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n    Pi = mod289(Pi); // To avoid truncation effects in permutation\n    vec4 ix = Pi.xzxz;\n    vec4 iy = Pi.yyww;\n    vec4 fx = Pf.xzxz;\n    vec4 fy = Pf.yyww;\n\n    vec4 i = permute(permute(ix) + iy);\n\n    vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0;\n    vec4 gy = abs(gx) - 0.5;\n    vec4 tx = floor(gx + 0.5);\n    gx = gx - tx;\n\n    vec2 g00 = vec2(gx.x, gy.x);\n    vec2 g10 = vec2(gx.y, gy.y);\n    vec2 g01 = vec2(gx.z, gy.z);\n    vec2 g11 = vec2(gx.w, gy.w);\n\n    vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\n    g00 *= norm.x;\n    g01 *= norm.y;\n    g10 *= norm.z;\n    g11 *= norm.w;\n\n    float n00 = dot(g00, vec2(fx.x, fy.x));\n    float n10 = dot(g10, vec2(fx.y, fy.y));\n    float n01 = dot(g01, vec2(fx.z, fy.z));\n    float n11 = dot(g11, vec2(fx.w, fy.w));\n\n    vec2 fade_xy = fade(Pf.xy);\n    vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n    float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n    return 2.3 * n_xy;\n}\n\n\n\n\n//====================================================\n// Uniform sampled noise from John Burkardt's page at\n// https://people.sc.fsu.edu/~jburkardt/cpp_src/uniform/uniform.cpp\nint i4_uniform_0i(inout int seed)\n{\n    const int ia = 16807;\n    const int ib15 = 32768;\n    const int ib16 = 65536;\n    const int ip = 2147483647;\n    int iprhi;\n    int ixhi;\n    int k;\n    int leftlo;\n    int loxa;\n    int value;\n    //\n    //  Don't let SEED be 0.\n    //\n    if (seed == 0)\n    {\n        seed = ip;\n    }\n    //\n    //  Get the 15 high order bits of SEED2.\n    //\n    ixhi = seed / ib16;\n    //\n    //  Get the 16 low bits of SEED and form the low product.\n    //\n    loxa = (seed - ixhi * ib16) * ia;\n    //\n    //  Get the 15 high order bits of the low product.\n    //\n    leftlo = loxa / ib16;\n    //\n    //  Form the 31 highest bits of the full product.\n    //\n    iprhi = ixhi * ia + leftlo;\n    //\n    //  Get overflow past the 31st bit of full product.\n    //\n    k = iprhi / ib15;\n    //\n    //  Assemble all the parts and presubtract IP.  The parentheses are\n    //  essential.\n    //\n    value = (((loxa - leftlo * ib16) - ip)\n        + (iprhi - k * ib15) * ib16) + k;\n    //\n    //  Add IP back in if necessary.\n    //\n    if (value < 0)\n    {\n        value = value + ip;\n    }\n    seed = value;\n\n    return value;\n}\n\n\n//====================================================\n// Uniform wood grain:\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    float scale = 100.0;\n    float displacement = float(iFrame)*0.001;\n    \n    // Perlin noise-generated seed w/ displacement factors.\n    int seed = int(cnoise(vec2(fragCoord.x/iResolution.x, fragCoord.y/iResolution.y)+displacement)*scale); \n       \n    float i1 = float(i4_uniform_0i(seed));\n    seed++;\n    float i2 = float(i4_uniform_0i(seed));\n    seed++;\n    float i3 = float(i4_uniform_0i(seed));\n    \n    // convert int -> float\n    i1 = float(i1)/2147483647.0;\n    i2 = float(i2)/2147483647.0;\n    i3 = float(i3)/2147483647.0;\n    \n    // clamp color to range for wood\n    i1 = clamp(i3,0.25,0.32);//R\n    i2 = clamp(i2,0.20,0.22);//G\n    i3 = clamp(i1,0.10,0.11);//B\n    \n    fragColor = vec4(normalize(vec3(i1,i2,i3)) * vec3(1.40,1.50,1.15), 1.0);\n}","name":"Image","description":"","type":"image"}]}