{"ver":"0.1","info":{"id":"XsGczG","date":"1522395168","viewed":124,"name":"RT Julia Explorer w/o distortion","username":"chronosis","description":"Real-time Julia Set explorer without distortion based on -- https://www.shadertoy.com/view/MdVyWm\n\n1024 Iterations with an orbit escape of 4\n\nHold-mouse down and drag to manually explore the set.\n","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","julia","juliaset","palette"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Non-UV-distorted version of https://www.shadertoy.com/view/MdVyWm\n\n#define scale 3.\n#define itr 1024.\n#define escape 4.\n#define cen vec2(0.5, 0.5)\n#define LEN(x) dot(x,x)\n\n//vec3 hsv2rgb(vec3 c) {\n//  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n//  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n//  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n//}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n// Madlebrot X - scaling factor\n//float scalex(float v, float s) {\n//   return (v * s) - (s * (5. / 7.));\n//}\n\nvec2 scalev(vec2 v, float s) {\n   return (v * s) - (s * 0.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float mn = min(iResolution.x, iResolution.y);\n    vec2 res = iResolution.xy,\n        off = cen * res,\n        uv = .5 + ( fragCoord - off ) / mn,\n    \tm = .5 + ( iMouse.xy - off ) / mn;\n      \t\n    if (iMouse.z <= 0.) {\n        float time = iTime * 1.5;\n        m = .5 + .3 * vec2(cos(time * .15), sin(time * .33));\n    }\n\n    // Julia/Mandlebrot is z(n) = z(n-1)^2 + c\n    // Julia: \n    //   Where z and c are points on the complex plane\n    //   z(0) is the point being drawn on the plane\n    //   c is an arbitrary point on the plane\n    // Mandlebrot:\n    //   Where z and c are points on the complex plane\n    //   z(0) is an arbitrary point on the plane usually initialized to 0 + 0i\n    //   c is the point being drawn on the plane\n    \n    // Complex numbers take the form (a + bi)\n    // Squared complex numbers take the following algebraic expansion\n    //   (x + yi) ^ 2\n\t//   ==> (x + yi)(x + yi)\n    //   ==> (x^2 + 2xyi + (yi)^2)\n    //   ==> (x^2 + 2xyi - y^2)\n    //   ==> (x^2 - y^2) + (2xy)i\n    //   ==> x' + y'i\n    // Where x' = (x^2 - y^2) and y' = 2xy\n    \n    // Julia\n    float xtemp = 0.;\n    vec2 z = scalev(uv, scale);\n\n    // Mandlebrot\n    //vec2 z = vec2(0.);\n\n    // Madlebrot (extended by mouse position)\n    //vec2 z = vec2(scalex(m.x, scale), scaley(m.y, scale));\n\n    float l = LEN(z);\n    float o = 0.;\n\n    for(float i = 1.; i <= itr; i++) {\n        vec2 s = scalev(m, scale);       \n        //xtemp = (z.x * z.x) - (z.y * z.y) + s.x;\n        //z.y = (2. * z.x * z.y) + s.y;\n        //z.x = xtemp;\n        \n        // deMoivre Matrix forumlation basically does the above\n        // |  z.x  z.y |   \n        // | -z.y  z.x | * | z.x  z.y | + s\n        //   ==> z.x = (z.x * z.x) - (z.y * -z.y)\n        //   ==> z.y = (z.x * z.y) + (z.x + z.y)\n        z = mat2(z, -z.y, z.x) * z + s;\n        l = LEN(z);\n\n        if(l > escape) {\n            o = i;\n            break;            \n        }\n    }          \n    \n    if (distance(m, uv) < 0.005) {\n        // Draw Indicator\n        fragColor = vec4(1.);\n    }\n    else if (o == 0.) {\n        // Inside Set (Black regions)\n        fragColor = vec4(0.);\n    } else {\n        // Escaped value, color by number of orbits to escape\n        float t = o / float(itr / 64.) + (0.5 * iTime);\n        vec3 cola = pal(t, vec3(0.5), vec3(0.5), vec3(1.0), vec3(0.0, 0.10, 0.20) );\n        vec3 colb = pal(t, vec3(0.5), vec3(0.5), vec3(1.0, 0.7, 0.4), vec3(0.0, 0.15, 0.20) );\n        vec3 col = mix(cola, colb, (sin(0.1 * iTime) + 1.) * 0.5);\n        fragColor = vec4(col, 1.);\n    }\n    \n    // Output to screen\n}","name":"Image","description":"","type":"image"}]}