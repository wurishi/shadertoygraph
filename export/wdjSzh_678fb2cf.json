{"ver":"0.1","info":{"id":"wdjSzh","date":"1553002396","viewed":305,"name":"raymarching prac","username":"imMurried","description":"basic raymarching","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float map(vec3 p)\n{\n    float r = 1.33;\n    float i = 5.0;\n    \n    p.y += sin(iTime);\n    \n    float displacement = sin(i * i * p.x) * cos(i * i * p.y) * sin(i * i * p.z) * 0.1;\n    \n    vec3 q = fract(p) * 2.0 - 1.0;\n    \n    return length(q) - r + (displacement * sin(iTime * 5.0));\n}\n\nfloat trace(vec3 o, vec3 r)\n{\n    // t = intersect\n    float t = 0.0;\n    for\t(int i = 0; i < 32; ++i)\n    {\n        vec3 p = o + r * t;\n        float d = map(p);\n        t += d * 0.5;\n    }\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\t\n    uv = uv * 2.0 - 1.0;\n    \n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 r = normalize(vec3(uv, 1.0));\n    \n    float the = iTime * 0.25;\n    r.xz *= mat2(cos(the), -sin(the), sin(the), cos(the));\n    \n    vec3 o = vec3(0.5, iTime * 0.2, iTime);\n    \n    float t = trace(o, r);\n    \n    float fog = 1.0 / (1.0 + t * t * 0.1);   \n    \n    vec3 fc = vec3(fog);    \n    \n    vec3 color = vec3(0.7 * sin(iTime * 0.5) * (t * t * 0.1 ) + 0.2,  4.0 * cos(iTime * 0.5) * (t * t * 0.4) + 0.1, 2.0 * sin((iTime + 2.0) * 0.75) * t * t * 0.15 + 0.2);\n    \n    fc *= color;\n    \n    \n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(fc,1.0);\n}","name":"Image","description":"","type":"image"}]}