{"ver":"0.1","info":{"id":"msycD1","date":"1696478425","viewed":149,"name":"Cheap grass anyone? (Not quite.)","username":"DwayneBrah","description":"Cheap grass anyone?\n\nThis is a dodgy implimentation of a decent idea.\nSimulate 3d grass - no matter how many blades you have - it still is affordable.\nA very odd way of rendering grass/trees etc.\nThis **could** be a great way of acheiving this at a ve","likes":10,"published":1,"flags":32,"usePreview":0,"tags":["fast","grass","cheap","forest","field","trees","speed","flyover","flyover"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    uv.y = (uv.y*0.90)+0.13;\n    \n    fragColor = texture(iChannel1, uv);\n    vec4 this_sample = texture(iChannel1, uv);\n    \n    \n\n     \n    //vec4 black = vec4(0.4, 0.8, 0.5, 1.0);\n    \n    // color grade\n    \n    float sun_dist = 1.0 - distance(vec2(0.50, 0.64), vec2(uv));\n\n    \n    \n    \n    if (uv.x > 0.95) {\n        fragColor = texture(iChannel0, uv);\n    };\n    \n    \n    if (uv.x < 0.90) {\n    \n        // shade trees\n        vec4 shade_sample = texture(iChannel1, uv);\n        vec4 shade_sample_1 = texture(iChannel1, uv+vec2(0.003, 0.0));\n        vec4 shade_sample_2 = texture(iChannel1, uv+vec2(-0.003, 0.0));\n        float tree_diff = shade_sample_1.g - shade_sample_2.g;\n        \n        vec4 tree_color = vec4(0.0, 0.0, 0.0, 1.0)+tree_diff*40.4;\n        tree_color =+ vec4(0.59, 0.638, 0.26, 1.0)*shade_sample.g*0.8;\n        \n        \n        vec4 graded = vec4(\n            fragColor.r*0.4,\n            fragColor.r,\n            fragColor.b*5.0,\n            1.0\n        );\n        vec4 ground = vec4(\n            fragColor.r*0.5,\n            fragColor.r*0.7,\n            0.12,\n            1.0\n        );\n        \n        ground += fragColor.b*fragColor.b*0.2;\n        \n        fragColor = mix(ground, tree_color*(sun_dist*0.2+0.3), clamp(shade_sample.g*5.5, 0.0, 0.8));// + shaded;\n        //fragColor -= ();\n        \n        \n        float g_prog = clamp((uv.y-0.62)*(1.0/0.62), 0.0, 3.0);\n        float g_prog_i = 1.0-clamp((uv.y-0.62)*(1.0/0.62), 0.0, 1.0);\n        \n        if (uv.y > 0.63) {\n        \n            \n            fragColor = this_sample;\n            \n        }\n\n\n        fragColor += sun_dist*sun_dist*sun_dist*sun_dist*0.1;\n        fragColor += sun_dist*sun_dist*sun_dist*sun_dist*sun_dist*0.4;\n        fragColor += abs((0.66-uv.y)*(0.3-uv.y))*-0.4;\n\n        fragColor.r += (g_prog_i * g_prog_i) * 0.08;\n        \n        \n    };\n    fragColor *= ((uv.y)*0.8+0.46) -(1.0-sun_dist*sun_dist)*0.4 +0.051;\n    \n    \n    // crush blacks??\n    \n    float brightness = (fragColor.r + fragColor.g*0.6 + fragColor.b) / 3.0;\n    float thresh = 0.32;\n    if (brightness < thresh && uv.y < 0.66) {\n        \n        float t_prog = brightness * (1.0/thresh);\n        \n        t_prog = 1.0 - t_prog;\n        \n        fragColor *=  (1.0 - t_prog*0.2);\n        \n    };\n    if (uv.y < 0.63) {\n        fragColor -= 0.08;\n    };\n    \n    \n\n   /*\n    float fade_height = 0.10;\n    \n    if (uv.y < 0.66 && uv.y > (0.66-fade_height)) {\n    \n        float fade_amount = (uv.y*fade_height+0.33);\n        fade_amount = clamp(fade_amount, 0.0, 1.0);\n        \n        vec4 fade_color = vec4(0.03*fade_amount, 0.12*fade_amount, 0.0, 1.0);\n\n        \n        \n        fragColor = mix(fade_color, fragColor, fade_amount);\n    \n    }\n    \n*/\n    \n    \n    \n    \n        \n   \n   \n   \n    \n\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\n\nCheap grass anyone?\n\nThis is a dodgy implimentation of a decent idea.\n\nSimulate 3d grass - no matter how many blades you have - it still the same gpu price.\n\nA very odd way of rendering grass/trees etc.\n\n\nThis **could** be a great way of acheiving this at a very small price.\nI've got tired and Ive altered it so many times now, I lost what the heck i was doing.\n\nThis could be re-weitten to be a decently efficient grass/tree thingy.\n\nFanks, Wayne.\n\n\n*/\n\n// 0: Use gradient noise (slower)\n// 1: Use value noise\n\n\n\n#define USE_VALUE_NOISE 1\n\n#if USE_VALUE_NOISE\n\n// Value noise - https://www.shadertoy.com/view/lsf3WH\nfloat hash(vec2 p) {\n    p  = 50.0*fract( p*0.3183099 + vec2(0.71,0.113));\n    return -1.0+2.0*fract( p.x*p.y*(p.x+p.y) );\n}\n\nfloat noise( in vec2 p ) {\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\tvec2 u = f*f*(3.0-2.0*f);\n    return .5+.5*mix( mix( hash( i + vec2(0.0,0.0) ), \n                     hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ), \n                     hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\n#else\n\n\n#endif\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec2 uv;\n\n//////////////////////////////////////////////////////////////////////\nuint seed = 0u;\nvoid hash(){\n    seed ^= 2747636419u;\n    seed *= 2654435769u;\n    seed ^= seed >> 16;\n    seed *= 2654435769u;\n    seed ^= seed >> 16;\n    seed *= 2654435769u;\n}\nvoid initRandomGenerator(vec2 fragCoord){\n    seed = uint(fragCoord.y*iResolution.x + fragCoord.x)+uint(iFrame)*uint(iResolution.x)*uint(iResolution.y);\n}\n\nfloat random(){\n    hash();\n    return float(seed)/4294967295.0;\n}\n/////////////////////////////////////////////////////////////////////\n\n\n\nfloat tex_pix = 2.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n   float pix_y = 1.0/iResolution.y;\n\n    uv = fragCoord.xy / iResolution.xy;\n    \n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    \n    //vec4 zs_1 = zoom_sample();\n    \n    float line_1 = 0.52;// + (sin( (uv.x+(iTime*2.00)) * 4.0 )/100.00);\n    \n    vec4 shifted = texture(iChannel0, uv+vec2(0.0, pix_y*tex_pix));\n    fragColor = shifted;\n    \n    /*if ( uv.y > (1.0) - pix_y*(tex_pix+1.0) && uv.y < (1.0) - pix_y*tex_pix) {\n        \n        vec4 this_px_b = texture(iChannel0, uv+vec2(0.0, 0.0-pix_y));\n        vec4 this_px_r = texture(iChannel0, uv+vec2(pix_y, 0.0));\n        \n        float rnd = mod(random(), 1.0);\n        if (rnd > 0.3) {\n            fragColor = this_px_b;\n\n        };\n        if (rnd > 0.6) {\n            fragColor = this_px_r;\n        };\n        \n        \n        \n    }*/\n    \n    if ( uv.y > 1.0-pix_y*tex_pix) {\n    \n        initRandomGenerator(fragCoord+float(iFrame));\n        float r = mod(random(), 1.00);\n        \n        vec2 uv_noise = uv + vec2(0.0, iTime * 0.08);\n        uv_noise.x *= 0.8;\n        uv_noise.y *= 2.2;\n        float height = -0.1;\n        \n        uv_noise *= 9.00; // SCALE\n        \n        uv_noise *= 6.33;\n        height += noise(uv_noise*04.00)*0.015;\n        uv_noise *= 0.50;\n        height += noise(uv_noise)*0.9;\n        \n        //height *= 1.0; // Height SCALE\n        \n        \n        float greeness = 0.00;\n        float height_type = 0.00;\n        if (r > (0.66 + height) ) {\n        \n            greeness = 1.00;\n            height_type = mod(random(), 0.20)*4.0;\n            \n            if (r > 0.90) {\n                greeness = 1.00;\n                height_type = mod(random(), 0.20)+1.0;\n            };\n        \n        } else {\n        \n            if (r > 0.16) {\n                greeness = 1.00;\n                height_type = mod(random(), 0.50);\n            };\n        \n        };\n        \n        float r_range = 0.8;\n        \n        r = r*r_range + (1.0-r_range);\n        //if (height_type < 0.2) {height_type = 0.04;}; \n        \n        \n        fragColor = (vec4(r+0.5, greeness, height_type, 1.0)) * 0.5;\n       \n    };\n    \n    \n    \n\n       \n       \n       \n       \n       \n    \n\n    \n    \n    \n    \n}\n\n\n\n\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec2 uv;\n\nvec4 zoom_sample (float zoom_factor) {\n\n    float center_offset_x = (1.0-zoom_factor)/2.0;\n    float center_offset_y = (1.0-zoom_factor)/2.0;\n    vec2 xy_offset = vec2(center_offset_x, center_offset_y+0.003);\n    vec4 last_frame_zoomed = texture(iChannel1,(uv*zoom_factor)+xy_offset);\n    \n    return(last_frame_zoomed);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    uv = fragCoord.xy / iResolution.xy;\n\n\n     \n    float y_normal = (uv.y)*1.55;\n    y_normal = clamp(y_normal, 0.00, 1.00);\n   \n    float scaler = 15.00;\n    float x_squish = 4.50;\n    \n    vec2 sample_uv = vec2(\n        (uv.x-0.5)/(1.0-y_normal)/(scaler/x_squish),\n        (y_normal/(1.0-y_normal))/scaler\n    );\n    \n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    \n    if (y_normal < 1.0 && y_normal > 0.0) {\n    \n        fragColor = texture(iChannel0, sample_uv);\n\n\n\n    };\n\n    float fade_height = 0.6;\n    \n    if (uv.y < 0.67 && uv.y > (0.67-fade_height)) {\n    \n        float fade_amount = (1.0-(uv.y*1.66))/fade_height+0.23;\n        fade_amount = clamp(fade_amount, 0.001, 1.0);\n        \n        //fragColor = mix(fade_color, fragColor, fade_amount);\n        \n        vec4 last_frame = texture(iChannel1, uv);\n        fragColor = mix(last_frame, fragColor, fade_amount*fade_amount);\n    \n    }    \n    vec4 this_sample = texture(iChannel1, uv);\n    \n\n    \n    \n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    fragColor = texture(iChannel1, uv);\n\n    \n    float sun_dist = 1.0 - distance(vec2(0.5, 0.60), vec2(uv));\n\n    if (uv.y < 0.63) {\n        \n        float grass_height = (0.66-uv.y)*0.012;\n        /*\n        float grass_height = (0.5-uv.y)*0.02;\n        float fade_amount = (1.1-(uv.y*2.0));\n        fade_amount *= fade_amount+1.1;\n        fade_amount = clamp(fade_amount, 0.0, 1.0);\n        */\n        \n            \n        for (int y_step = 0; y_step < 20; y_step += 1) {\n\n            float y_dis = abs(float(y_step)*grass_height);\n            vec2 grass_sample = uv-vec2(0.0, y_dis);\n            vec4 downwards_sample = texture(iChannel1, grass_sample);\n            downwards_sample.g *= 0.5;\n\n            if (downwards_sample.y > 0.0) {\n\n            };\n            if (downwards_sample.g > 0.0 && grass_sample.y > 0.0 && downwards_sample.b > float(y_step)*0.01) {\n                fragColor += vec4(0.0, downwards_sample.g*0.6, 0.0, 1.0)*(0.5+downwards_sample.b);\n                fragColor.g = clamp(fragColor.g, 0.0, 8.0);\n                /*if (downwards_sample.b > 0.80) {\n                fragColor.b =  downwards_sample.b * (float(y_step)*0.95)+0.8;\n                };*/\n                fragColor.b =  downwards_sample.b * (float(y_step)*0.37)+0.5;\n            };\n\n        };\n        \n        \n\n\n        \n    } else {\n        \n                \n        float g_prog = clamp((uv.y-0.62)*(1.0/0.62), 0.0, 3.0);\n        float g_prog_i = 1.0-clamp((uv.y-0.62)*(1.0/0.62), 0.0, 1.0);\n        if (uv.y > 0.634) {\n        \n            \n            fragColor.r += g_prog_i * g_prog_i * 1.13 + 0.6;\n            fragColor.g += g_prog_i * g_prog_i * 0.74 + 0.3;\n            fragColor.b = g_prog * 0.96 + 0.3;\n            fragColor += g_prog_i*0.1;\n            \n            fragColor *= 0.3+ sun_dist*sun_dist*0.05;\n            fragColor += sun_dist*sun_dist*sun_dist*sun_dist*0.2 + 0.15;\n            \n        };        //fragColor = vec4(0.4, 0.8, 0.5, 1.0);;\n\n        \n        \n    };\n}","name":"Buffer C","description":"","type":"buffer"}]}