{"ver":"0.1","info":{"id":"dldSR7","date":"1685302660","viewed":286,"name":"RIPPLES","username":"alro","description":"Simple water effect using propagating wave heightfield. Use mouse to perturb surface.","likes":15,"published":1,"flags":32,"usePreview":1,"tags":["2d","waves","ripples","simulation","heightfield","refraction","water"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    Heightfield wave simulation with reflective boundaries. Use mouse for interaction.\n    Based on https://web.archive.org/web/20160310071837/http://freespace.virgin.net/hugo.elias/graphics/x_water.htm\n*/\n\n\n// #define NORMALS\n\nvec3 getNormal(vec2 uv){\n    float eps = 1e-3;\n    return normalize(vec3(texture(iChannel0, uv + vec2(eps, 0.0)).r -\n                          texture(iChannel0, uv - vec2(eps, 0.0)).r, \n                          texture(iChannel0, uv + vec2(0.0, eps)).r -\n                          texture(iChannel0, uv - vec2(0.0, eps)).r, 2.0 * eps));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 normal = getNormal(uv);\n    uv = uv + refract(vec3(0,0,-1), normal, 1.0/1.333).xy;\n    vec3 col = texture(iChannel1, uv).rgb;\n    \n    #ifdef NORMALS\n    col = 0.5+0.5*normal;\n    #endif\n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Wave propagation solver\n\n// #define DROPLETS\n\n// https://www.shadertoy.com/view/4djSRW\nvec2 hash21(float p){\n\tvec3 p3 = fract(vec3(p) * vec3(0.1031, 0.1030, 0.0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord){\n\n    //Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Texture lookup distance\n    float eps = 5e-3;\n\n    vec2 data = texture(iChannel0, uv).rg;\n\n    // Find last frame's data around the current position\n    // Set reflective boundary conditions\n    vec2 samplePoint;\n\n    // ---------- x direction ----------\n    if(uv.x - eps < 0.0){\n        samplePoint = abs(uv - vec2(eps, 0.0));\n    }else{\n        samplePoint = uv - vec2(eps, 0.0);\n    }\n    float leftData = texture(iChannel0, samplePoint).r;\n\n    if(uv.x + eps > 1.0){\n        samplePoint = vec2(1.0 - fract(uv.x + eps), uv.y);\n    }else{\n        samplePoint = uv + vec2(eps, 0.0);\n    }\n    float rightData = texture(iChannel0, samplePoint).r;\n    \n    \n    // ---------- y direction ----------\n    \n    // Correct sampling distance for aspect ratio\n    eps *= iResolution.x/iResolution.y;\n    \n    if(uv.y - eps < 0.0){\n        samplePoint = abs(uv - vec2(0.0, eps));\n    }else{\n        samplePoint = uv - vec2(0.0, eps);\n    }\n    float bottomData = texture(iChannel0, samplePoint).r;\n\n    if(uv.y + eps > 1.0){\n        samplePoint = vec2(uv.x, 1.0 - fract(uv.y + eps));\n    }else{\n        samplePoint = uv + vec2(0.0, eps);\n    }\n    float topData = texture(iChannel0, samplePoint).r;\n\n    \n    // ---------- interaction ----------\n    \n    // The height of the water surface\n    float height = 0.0;\n\n    if(iMouse.z > 0.0){\n        float dist = length(iMouse.xy-fragCoord.xy)/iResolution.y;\n        height = -0.015 * smoothstep(0.045, 0.01, dist);\n    }\n\n    #ifdef DROPLETS\n    // Random droplets to stop the surface ever being still\n    if(mod(float(iFrame), 10.0) == 0.0){\n        vec2 p = uv / vec2(1, iResolution.x/iResolution.y);\n        float dist = length(hash21(float(iFrame)) - p);\n        height -= -0.01 * smoothstep(0.03, 0.0, dist);;\n\n    }\n    #endif\n\n    // ---------- propagation ----------\n\n    // Previous data is in the red channel\n    // Data before that is in green\n    height += data.r + (0.25 * (leftData + rightData + topData + bottomData) - data.g);\n\n\n    // How much energy is maintained every frame\n    float dampen = 0.98;\n\n    // Write new to red, previous to green\n    data = vec2(dampen * height, data.r);\n\n    fragColor = vec4(data, 0.0, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"/*\n    Copyright (c) 2023 al-ro\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n*/","name":"Common","description":"","type":"common"}]}