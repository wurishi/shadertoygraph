{"ver":"0.1","info":{"id":"NsKGWK","date":"1632203565","viewed":68,"name":"Shabash 2.0","username":"Ekateriner","description":"This dance immerses you in sleep....","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sdf","sleep"],"hasliked":0,"parentid":"NdV3DD","parentname":"Shabash"},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3  eye      = vec3 ( 0, 0, 3);\nconst vec3  light    = vec3  ( 1.0, 3.0, 5.0 );\nconst int   maxSteps = 70;\nconst float eps      = 0.01;\n\n// Rotation matrix around the X axis.\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\n// Rotation matrix around the Y axis.\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\n\nfloat dCone ( vec3 p, vec2 c, float h)\n{\n    float q = length ( p.xy );\n    return max(dot ( c, vec2 ( q, p.z ) ), -h - p.z);\n}\n\nfloat dSphere ( vec3 p, in vec3 c)\n{\n\treturn 20.0* length ( p - c ) - 1.0;// + 0.03 * sin(20.0*p.x + iTime);\n}\n\nfloat dCapCyl( vec3 p, float r, float h )\n{\n  vec2 d = abs(vec2(length(p.xy),p.z-h/2.0)) - vec2(r,h);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0)) + 0.03 * sin(20.0*p.x + iTime);\n}\n\nfloat length8 ( in vec2 p )\n{\n    return pow ( pow ( p.x, 8.0 ) + pow ( p.y, 8.0 ), 1.0/ 8.0 );\n}\n\nfloat length8 ( in vec3 p )\n{\n    return pow ( pow ( p.x, 8.0 ) + pow ( p.y, 8.0 ) + pow ( p.z, 8.0 ), 1.0/ 8.0 );\n}\n\n\nfloat dTorus ( vec3 p, vec2 t )\n{\n\tvec2\tq = vec2 ( length ( p.xy ) - t.x, p.z );\n\t\n\treturn length ( q ) - t.y;\n}\n\nfloat smin ( float a, float b, float k )\n{\n\tfloat res = exp ( -k*a ) + exp ( -k*b );\n\treturn -log ( res ) / k;\n}\n\nfloat sdf ( in vec3 p )\n{\n    //return dSphere ( p, vec3 ( 0, 0, 0 ) );\n    //return dBox ( p, vec3 ( 0.5, 0.2, 0.7 ) );\n\treturn dTorus ( p, vec2 ( 0.73, 0.5 ) );\n}\n\nfloat broom (in vec3 q) \n{\n    vec3 p = q * rotateX(sin(iTime)/5.0);\n    \n    return smin(smin(dCone(p, vec2(0.6, 0.2), 1.0), dSphere(p, vec3(0, 0, 0)), 1.0),\n                dCapCyl(p, 0.08, 1.0), 20.0);\n}\n\nfloat broom_wood (in vec3 q) \n{\n    vec3 p = q * rotateX(sin(iTime)/5.0);\n    \n    return dCapCyl(p, 0.08, 1.0);\n}\n\n\nfloat sdf ( in vec3 p, in mat3 m )\n{\n    vec3 q = m * p;\n    \n    float mortar = smin(max(dCapCyl(q - vec3(1.0, 1.0, -0.5), 0.8, 1.0), \n                        - dCapCyl(q - vec3(1.0, 1.0, -0.3), 0.6, 1.0)),\n                        dTorus(q - vec3(1.0, 1.0, 1.0), vec2(0.8, 0.1)), 5.0);\n    \n    float sceene = mortar;\n    for (int i = -1; i < 4; i = i+2){\n        for(int j = -1; j < 4; j=j+2) {\n            if (i != 1 || j != 1) {\n                sceene = min (sceene, broom(q - vec3(i, j, 0.0)));\n            }\n        } \n    }\n           \n    return sceene;\n}\n\nvec3 trace ( in vec3 from, in vec3 dir, out bool hit, in mat3 m )\n{\n\tvec3\tp         = from;\n\tfloat\ttotalDist = 0.0;\n\t\n\thit = false;\n\t\n\tfor ( int steps = 0; steps < maxSteps; steps++ )\n\t{\n\t\tfloat\tdist = sdf ( p, m );\n        \n\t\tif ( dist < 0.01 )\n\t\t{\n\t\t\thit = true;\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\ttotalDist += dist;\n\t\t\n\t\tif ( totalDist > 10.0 )\n\t\t\tbreak;\n\t\t\t\n\t\tp += dist * dir;\n\t}\n\t\n\treturn p;\n}\n\nvec3 generateNormal ( vec3 z, float d, in mat3 m )\n{\n    float e   = max (d * 0.5, eps );\n    float dx1 = sdf(z + vec3(e, 0, 0), m);\n    float dx2 = sdf(z - vec3(e, 0, 0), m);\n    float dy1 = sdf(z + vec3(0, e, 0), m);\n    float dy2 = sdf(z - vec3(0, e, 0), m);\n    float dz1 = sdf(z + vec3(0, 0, e), m);\n    float dz2 = sdf(z - vec3(0, 0, e), m);\n    \n    return normalize ( vec3 ( dx1 - dx2, dy1 - dy2, dz1 - dz2 ) );\n}\n\nint moddiv (int a, int b) {\n    return a - (b * (a/b));\n}\n\n//const float roughness = 0.2;\nconst vec3  r0   = vec3 ( 1.0, 0.92, 0.23 );\n//vec3  clr  = normalize(vec3(moddiv(int(iTime), 37), moddiv(int(iTime), 13), moddiv(int(iTime), 29)));\nconst float gamma = 2.2;\nconst float pi    = 3.1415926;\nconst float FDiel = 0.04;\t\t// Fresnel for dielectrics\n\nvec3 fresnel ( in vec3 f0, in float product )\n{\n\tproduct = clamp ( product, 0.0, 1.0 );\t\t// saturate\n\t\n\treturn mix ( f0, vec3 (1.0), pow(1.0 - product, 5.0) );\n}\n\nfloat D_blinn(in float roughness, in float NdH)\n{\n    float m = roughness * roughness;\n    float m2 = m * m;\n    float n = 2.0 / m2 - 2.0;\n    return (n + 2.0) / (2.0 * pi) * pow(NdH, n);\n}\n\nfloat D_beckmann ( in float roughness, in float NdH )\n{\n\tfloat m    = roughness * roughness;\n\tfloat m2   = m * m;\n\tfloat NdH2 = NdH * NdH;\n\t\n\treturn exp( (NdH2 - 1.0) / (m2 * NdH2) ) / (pi * m2 * NdH2 * NdH2);\n}\n\nfloat D_GGX ( in float roughness, in float NdH )\n{\n\tfloat m  = roughness * roughness;\n\tfloat m2 = m * m;\n\tfloat NdH2 = NdH * NdH;\n\tfloat d  = (m2 - 1.0) * NdH2 + 1.0;\n\t\n\treturn m2 / (pi * d * d);\n}\n\nfloat G_schlick ( in float roughness, in float nv, in float nl )\n{\n    float k = roughness * roughness * 0.5;\n    float V = nv * (1.0 - k) + k;\n    float L = nl * (1.0 - k) + k;\n\t\n    return 0.25 / (V * L);\n}\n\nfloat G_neumann ( in float nl, in float nv )\n{\n\treturn nl * nv / max ( nl, nv );\n}\n\nfloat G_klemen ( in float nl, in float nv, in float vh )\n{\n\treturn nl * nv / (vh * vh );\n}\n\nfloat G_default ( in float nl, in float nh, in float nv, in float vh )\n{\n\treturn min ( 1.0, min ( 2.0*nh*nv/vh, 2.0*nh*nl/vh ) );\n}\n\nvec4 cookTorrance ( in vec3 p, in vec3 n, in vec3 l, in vec3 v, in float roughness )\n{\n    vec3  h    = normalize ( l + v );\n\tfloat nh   = dot (n, h);\n\tfloat nv   = dot (n, v);\n\tfloat nl   = dot (n, l);\n\tfloat vh   = dot (v, h);\n\t\n\t\t\t// compute Beckman\n   \tfloat d = D_beckmann ( roughness, nh );\n\n            // compute Fresnel\n    vec3 f = fresnel ( r0, nv );\n\t\n            // default G\n    float g = G_default ( nl, nh, nv, vh );\n\t\n\t\t\t// resulting color\n\tvec3  ct   = f*(0.25 * d * g / nv);\n\tfloat diff = max(nl, 0.0);\n\tfloat ks   = 0.5;\n    \n    vec3  clr  = normalize(vec3(moddiv(int(iTime), 37), \n                                  moddiv(int(iTime), 13), \n                                  moddiv(int(iTime), 29)));\n\treturn vec4 ( diff * clr + ks * ct, 1.0 );\n}\n\nvec3 getTriplanarWeights ( in vec3 n ) \n{\n\tvec3 triW = abs(n);\n    \n\treturn triW / (triW.x + triW.y + triW.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n        // Normalized pixel coordinates (from 0 to 1)\n    bool hit;\n    vec3 mouse = vec3(iMouse.xy/iResolution.xy - 0.5,iMouse.z-.5);\n    mat3 m     = rotateX ( 6.0*mouse.y ) * rotateY ( 6.0*mouse.x);\n    vec2 scale = 9.0 * iResolution.xy / max ( iResolution.x, iResolution.y ) ;\n    vec2 uv    = scale * ( fragCoord/iResolution.xy - vec2 ( 0.5 ) );\n\tvec3 dir   = normalize ( vec3 ( uv, 0 ) - eye );\n    vec4 color = vec4 ( 0, 0, 0, 1 );\n    vec3 p     = trace ( eye, dir, hit, m );\n    \n    if ( hit && mod( iTime, 100.0 ) < 50.0 ) \n    {\n        vec3  l  = normalize        ( light - p );\n        vec3  v  = normalize        ( eye - p );\n\t\tvec3  n  = generateNormal   ( p, 0.001, m );\n\t\tfloat nl = max ( 0.0, dot ( n, l ) );\n        vec3  h  = normalize ( l + v );\n        float hn = max ( 0.0, dot ( h, n ) );\n        float sp = pow ( hn, 90.0 );\n\t\t\n\t\tcolor = cookTorrance ( p, n, l, v, 1.0 * (50.0 - mod( iTime, 100.0 )) / 50.0);\n        \n        vec3 tx = getTriplanarWeights ( n );\n        vec3 q  = m * p;\n        vec4 cx = texture ( iChannel1, q.yz );\n        vec4 cy = texture ( iChannel1, q.zz );\n        vec4 cz = texture ( iChannel1, q.xy );\n        color *=  tx.x * cx + tx.y * cy + tx.z * cz;\n    }\n\telse if ( hit )\n\t{\n\t\tvec3  l  = normalize        ( light - p );\n        vec3  v  = normalize        ( eye - p );\n\t\tvec3  n  = generateNormal   ( p, 0.001, m );\n\t\tfloat nl = max ( 0.0, dot ( n, l ) );\n        vec3  h  = normalize ( l + v );\n        float hn = max ( 0.0, dot ( h, n ) );\n        float sp = pow ( hn, 150.0 );\n\t\t  \n\t\tcolor = cookTorrance ( p, n, l, v, 1.0 * (mod( iTime, 100.0 ) - 50.0)/ 50.0);\n        \n        vec3 tx = getTriplanarWeights ( n );\n        vec3 q  = m * p;\n        vec4 cx = texture ( iChannel0, q.yz );\n        vec4 cy = texture ( iChannel0, q.zz );\n        vec4 cz = texture ( iChannel0, q.xy );\n        color *=  tx.x * cx + tx.y * cy + tx.z * cz;\n        //color = 0.5*vec4 ( nl ) + 0.5 * sp * vec4 ( light.x , light.y, light.z, 1 );\n\t} \n\n    // Output to screen\n    fragColor = color;\n}","name":"Image","description":"","type":"image"}]}