{"ver":"0.1","info":{"id":"7dKcRG","date":"1655110378","viewed":82,"name":"RayTracing Simple","username":"modern_shinobi","description":"Single object raytracing","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["spheres","glsl","shadows","raytrace","multiple"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Sphere{\n    float radius;\n    vec3 center;\n    vec3 color;\n    vec3 normal;\n};\n\nstruct Plane{\n    float height;\n    vec3 color;\n    vec3 normal;\n};\n\nstruct Light{\n    vec3 dir;\n    float mag;\n    vec3 color;\n};\n\nstruct Ray{\n    vec3 dir;\n    vec3 origin;\n};\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n\n    // Camera\n    vec3 cameraPos = vec3(0,1,-1);\n    Ray ray;\n    ray.origin = cameraPos;\n    ray.dir = normalize(vec3(cameraPos.x+uv.x, cameraPos.y+uv.y, 0) - cameraPos);\n    \n    // Light\n    Light light;\n    light.dir = vec3(sin(iTime), -1, cos(iTime));\n    // light.dir = vec3(-0.3, -0.8, 0.9);\n    light.mag = 1.0;\n    light.color = vec3(1,1,1);\n    light.dir = normalize(light.dir) * light.mag;\n    \n    // Objects\n    Sphere sphere;\n    sphere.radius = 1.0;\n    sphere.center = vec3(0,1,4);\n    sphere.color = vec3(1,0,0);\n    \n    Plane plane;\n    plane.height = 0.0;\n    plane.color = vec3(0,1,0);\n    plane.normal = vec3(0,1,0);\n\n    // Calculations\n    float d_plane = -1.0;\n    float d_sphere = -1.0;\n    float d;\n    vec3 col = vec3(0);\n    \n    // Plane calculations\n    if (ray.dir.y != 0.0)\n        d_plane = (plane.height - ray.origin.y)/ray.dir.y;\n    \n    // Sphere calculations\n    float a = dot(ray.dir, ray.dir);\n    float b = 2.0 * dot(ray.dir, ray.origin-sphere.center);\n    float c = dot(ray.origin-sphere.center, ray.origin-sphere.center) - \n                sphere.radius * sphere.radius;\n    \n    float det = b*b - 4.0*a*c;\n    if (det >= 0.0){\n        float d1 = (-b-sqrt(det))/2.0*a;\n        float d2 = (-b+sqrt(det))/2.0*a;\n        d_sphere = min(d1,d2);\n        vec3 point = ray.origin + d_sphere * ray.dir - sphere.center;\n        sphere.normal = normalize(point);\n    }\n    \n    // Color calculations\n    if (d_sphere > 0.0){\n        if (d_plane > 0.0){\n            if (d_plane <= d_sphere){\n                d = d_plane;\n                col += plane.color * dot(plane.normal, -light.dir);;\n            }\n            else if (d_sphere <= d_plane) {\n                d = d_sphere;\n                col += sphere.color * dot(sphere.normal, -light.dir);\n            }\n        } else {\n            d = d_sphere;\n            col += sphere.color * dot(sphere.normal, -light.dir);\n        }\n    } else {\n        if (d_plane > 0.0){\n            d = d_plane;\n            col += plane.color * dot(plane.normal, -light.dir);;\n        }\n    }\n    \n    // d = min(d_plane, d_sphere);\n    // col = vec3(1.0/d);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}