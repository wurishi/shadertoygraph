{"ver":"0.1","info":{"id":"7dlSWr","date":"1622889300","viewed":119,"name":"Rendering the pearl ball","username":"Haper","description":"How to remove noise?","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"-1","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 data;\n    vec2 uv = fragCoord / iResolution.xy;\n    data = texture( iChannel0, uv);\n    fragColor = data/float(iFrame);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec3 poin;\n   int i;\n   vec3 n;\n   vec4 s=vec4(0.0,1.5,7.0,1.5);\n   vec4 s2=vec4(2.0,2.0,6.0,0.4);\n   vec4 s3=vec4(3.0,0.8,5.0,0.8);\n   vec3 sun=vec3(-2.0,-4.0,2.0);\n   sun=norm(sun);\n   vec3 suncol=vec3(9.9,8.5,5.6);\n   suncol=norm(suncol);\n   vec3 skycol=vec3(0.9,1.0,2.3);\n   skycol=norm(skycol);\n   float lsky=1.5,lsun=500.0;\n   dist = iResolution.x/2.0;\n   vec2 uv = fragCoord / iResolution.xy;\n   vec4 data = texture( iChannel0, uv );\n   Ray ray,ray2;\n   ray.rgb=vec3(1.0,1.0,1.0);\n   xy=fragCoord;\n    \n   ray.v=vec3(xy.x-iResolution.x/2.0,xy.y-iResolution.y/2.0,dist);\n   ray.v=norm(ray.v);\n   \n   ray.v=vec3(xy.x-iResolution.x/2.0,xy.y-iResolution.y/2.0,dist);\n    ray.v=norm(ray.v);\n    ray2=ray;\n    ray.v.y=ray2.v.y*cos(anA)+ray2.v.z*sin(anA);\n    ray.v.z=-ray2.v.y*sin(anA)+ray2.v.z*cos(anA);\n    ray.v=norm(ray.v);\n \n    ray2=ray;\n    ray.v.x=ray2.v.x*cos(anB)+ray2.v.z*sin(anB);\n    ray.v.z=-ray2.v.x*sin(anB)+ray2.v.z*cos(anB);\n    ray.v=norm(ray.v);\n    ray2=ray;\n    cord = cam;\n    bool emis=false;\n   for(i=0; i<7 && !emis; i++)\n   {\n        emis=false;\n        l=10000000.0;\n        L=10000000.0;\n        point=cord;\n        uv+=vec2(rand(uv),rand(uv+vec2(1.3,1.1)))*iTime;\n        if(abs(rand(float(iTime)*uv))<0.0)\n        { \n            emis=false;\n            uv+=vec2(rand(uv),rand(uv+vec2(1.3,1.1)))*iTime;\n            L=rand(iTime)*10.0;\n            point=cord+ray.v*L;\n            \n            ray2.v+=vec3(abs(rand(vec3(uv,iTime+0.1)))-0.5,abs(rand(vec3(uv,iTime+12.1)))-0.5,abs(rand(vec3(uv,iTime+11.7547)))-0.5);\n            ray2.v=norm(ray2.v);\n        }\n        \n        l=spheretrig(cord, ray.v, s.xyz,s.w);\n        if(l>0.0 && L>l)\n        {\n            emis=false;\n            L=l;\n            ray2=ray;\n           \n            point=cord+ray.v*l;\n            poin=point;\n            \n            poin+=float(iFrame)*vec3(rand(vec4(point,rand(iTime+12.2))),rand(vec4(point,rand(iTime+1.678324))),rand(vec4(point,rand(iTime+14.124125))))*10.0;\n            poin+=vec3(0.01,0.01,0.01);\n            n=norm(point-s.xyz);\n            \n            float per=(1.0+dot(ray2.v,n))/2.0;\n            per = pow(per,0.45);\n             if(rand(iTime+81.2)<per)\n             ray2.rgb=vec3(ray2.rgb.r*0.9,ray2.rgb.g*0.9,ray2.rgb.b*0.75);\n             else\n             ray2.rgb=vec3(ray2.rgb.r*0.9,ray2.rgb.g*0.9,ray2.rgb.b*0.9);\n             \n            if(rand(iTime+52.57)>0.3)\n            n+=vec3(rand(vec4(point,rand(iTime+12.2)))-0.5,rand(vec4(point,rand(iTime+1.678324)))-0.5,rand(vec4(point,rand(iTime+14.124125)))-0.5)*1.0;\n            else\n            n+=vec3(rand(vec4(point,rand(iTime+12.2)))-0.5,rand(vec4(point,rand(iTime+1.678324)))-0.5,rand(vec4(point,rand(iTime+14.124125)))-0.5)*0.3;\n            n=norm(n);\n            point+=n*0.001;\n            ray2.v=reflect(ray2.v,n);\n            //ray2.v+=vec3(fract(iTime),fract(iTime),fract(iTime));\n            if(rand(iTime+52.57)>0.3)\n            ray2.v+=vec3(rand(vec4(poin,rand(float(iFrame))))-0.5,rand(vec4(poin,rand(float(iFrame)+1.2324)))-0.5,rand(vec4(poin,rand(float(iFrame)+4.124125)))-0.5)*2.5;\n            else\n            ray2.v+=vec3(rand(vec4(poin,rand(float(iFrame))))-0.5,rand(vec4(poin,rand(float(iFrame)+1.2324)))-0.5,rand(vec4(poin,rand(float(iFrame)+4.124125)))-0.5)*0.9;\n            ray2.v=norm(ray2.v);\n        }\n        l=spheretrig(cord, ray.v, s3.xyz,s3.w);\n        if(l>0.0 && L>l)\n        {\n            emis=false;\n            L=l;\n            ray2=ray;\n            ray2.rgb=vec3(ray2.rgb.r*1.0,ray2.rgb.g*0.3,ray2.rgb.b*0.3);\n            point=cord+ray.v*l;\n            poin=point;\n            \n            poin+=float(iFrame)*vec3(rand(vec4(point,rand(iTime+12.2))),rand(vec4(point,rand(iTime+1.678324))),rand(vec4(point,rand(iTime+14.124125))))*10.0;\n            poin+=vec3(0.01,0.01,0.01);\n            n=norm(point-s3.xyz);\n            n+=vec3(rand(vec4(point,rand(iTime+12.2)))-0.5,rand(vec4(point,rand(iTime+1.678324)))-0.5,rand(vec4(point,rand(iTime+14.124125)))-0.5);\n            n=norm(n);\n            point+=n*0.001;\n            ray2.v=reflect(ray2.v,n);\n            //ray2.v+=vec3(fract(iTime),fract(iTime),fract(iTime));\n            ray2.v+=vec3(rand(vec4(poin,rand(float(iFrame))))-0.5,rand(vec4(poin,rand(float(iFrame)+1.2324)))-0.5,rand(vec4(poin,rand(float(iFrame)+4.124125)))-0.5)*2.5;\n            ray2.v=norm(ray2.v);\n        }\n\n        \n        l=flortrig(ray,cord);\n        if(l>0.0 && L>l)\n        {\n            emis=false;\n            L=l;\n            ray2=ray;\n            //ray2.rgb*=0.7;\n             poin+=float(iFrame)*vec3(rand(vec4(point,rand(iTime+12.2))),rand(vec4(point,rand(iTime+1.678324))),rand(vec4(point,rand(iTime+14.124125))))*10.0;\n            point=cord+ray.v*l;\n            point.y+=0.001;\n            poin=point;\n            n=vec3(0.0,1.0,0.0);\n            \n            vec4 data;\n            vec2 uv2 = vec2(point.x,point.z)/10.0;\n            data = texture( iChannel1, uv2);\n\n            uv+=vec2(rand(uv),rand(uv+vec2(1.3,1.1)))*iTime;\n\n            n+=vec3(rand(vec3(uv,iTime))-0.5,rand(vec3(uv,iTime+1.53))-0.5,rand(vec3(uv,iTime+5.124))-0.5)*0.1;\n            n=norm(n);\n            if(rand(iTime+0.412)>0.55)\n            {\n            ray2.rgb*=0.5;\n            ray2.v=reflect(ray2.v,n);\n            ray2.v+=vec3(rand(vec4(poin,rand(float(iFrame))))-0.5,rand(vec4(poin,rand(float(iFrame)+1.2324)))-0.5,rand(vec4(poin,rand(float(iFrame)+4.124125)))-0.5)*0.1;\n            }\n            else\n            {\n            ray2.v=vec3(rand(vec4(poin,rand(float(iFrame))))-0.5,rand(vec4(poin,rand(float(iFrame)+1.2324)))-0.5,rand(vec4(poin,rand(float(iFrame)+4.124125)))-0.5);\n            ray2.v.y=abs(ray2.v.y);\n            ray2.rgb *= data.rgb;\n            }\n            ray2.v=norm(ray2.v);\n        }\n        if(i==6 && L<10000000.0)\n        ray2.rgb*=0.0;\n       ray2.v=norm(ray2.v);\n        cord=point;\n        ray=ray2;\n   }\n   \n     \n    if(L>=10000000.0 && !emis)\n    {\n        ray.rgb*=(vec3(ray.rgb.r*skycol.r,ray.rgb.g*skycol.g,ray.rgb.b*skycol.b)*lsky+lsun*suncol*pow(max(-dot(sun,ray.v),0.0),600.0));\n    }\n\n    data+=vec4(ray.rgb,1.0);\n    fragColor = data;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\nfloat dist,l,L;\nvec3 cord,point;\nvec4 nois;\nvec3 bright = vec3(1.0,1.0,1.0);\nvec3 cam =vec3(0.0,1.0,0.0);\nvec3 cam2;\nvec2 xy;\nfloat anA=0.0,anB=0.0;\nstruct Ray{\nvec3 v;\nvec3 rgb;\n};\nvec3 norm(vec3 a) \n{\n    float l=sqrt(a.x*a.x+a.y*a.y+a.z*a.z);\n    a/=l;\n    return a;\n}\nvec4 norm(vec4 a)\n{\n    float l=sqrt(a.x*a.x+a.y*a.y+a.z*a.z+a.w*a.w);\n    a/=l;\n    return a;\n}\nfloat comp(vec3 a, vec3 b)\n{\n     return a.x*b.x+a.y*b.y+a.z*b.z;\n}\nfloat flortrig(Ray ray,vec3 pos)\n{\n    float l=-pos.y/ray.v.y;\n    if(l<=50.0)\n    return l;\n    else\n    return -1.0;\n}\nfloat wallx(Ray ray,vec3 pos)\n{\n    float l=(20.0-pos.x)/ray.v.x;\n    if(l<=100.0)\n    return l;\n    else\n    return -1.0;\n}\nfloat spheretrig(vec3 ray_pos, vec3 ray_dir, vec3 spos, float r)\n{\n   //a == 1; // because rdir must be normalized\n\n  vec3 k = ray_pos - spos;\n\n  float b = dot(k,ray_dir);\n\n  float c = dot(k,k) - r*r;\n\n  float d = b*b - c;\n\n \n\n  if(d >=0.0)\n\n  {\n\n    float sqrtfd = sqrt(d);\n\n    // t, a == 1\n\n    float t1 = -b + sqrtfd;\n\n    float t2 = -b - sqrtfd;\n\n \n\n    float min_t  = min(t1,t2);\n\n    float max_t = max(t1,t2);\n\n \n\n    float t = (min_t >= 0.0) ? min_t : max_t;\n    return t;\n    };\n    return -1.0;\n}\nvec3 ref(vec3 v1, vec3 n, float n1, float n2) \n{\n    vec3 v2=v1+(sqrt((n2*n2-n1*n1)/(dot(v1,n)*dot(v1,n))+1.0)-1.0)*dot(v1,n)*n;\n    return v2;\n} \nfloat len(vec3 p1,vec3 p2)\n{\n    return sqrt((p1.x-p2.x)*(p1.x-p2.x)+(p1.y-p2.y)*(p1.y-p2.y)+(p1.z-p2.z)*(p1.z-p2.z));\n}\nfloat S(vec3 p1,vec3 p2,vec3 p3)\n{\n     float a=len(p1,p2);\n     float b=len(p2,p3);\n     float c=len(p1,p3);\n     float p=(a+b+c)/2.0;\n     \n     return sqrt(p*(p-a)*(p-b)*(p-c));\n}\nvec4 triangletrig(vec3 p1,vec3 p2,vec3 p3,vec3 pos,vec3 ray)\n{\n    float l;\n    float a=(p2.y-p1.y)*(p3.z-p1.z);\n    float b=(p3.x-p1.x)*(p2.z-p1.z);\n    float c=(p2.x-p1.x)*(p3.y-p1.y);\n    float d=(p3.x-p1.x)*(p2.y-p1.y);\n    float e=(p3.y-p1.y)*(p2.z-p1.z);\n    float f=(p2.x-p1.x)*(p3.z-p1.z);\n    \n    float A=a-e;\n    float B=b-f;\n    float C=c-d;\n    float D=-a*p1.x-b*p1.y-c*p1.z+d*p1.z+e*p1.x+f*p1.y;\n    if(A*ray.x+B*ray.y+C*ray.z==0.0)\n    return vec4(-1.0, 0.0,0.0,0.0);\n    \n   \n    l=-(D+A*pos.x+B*pos.y+C*pos.z)/(A*ray.x+B*ray.y+C*ray.z);\n\n    if(l<=0.0)\n    return vec4(l,0.0,0.0,0.0);\n    \n    vec3 p = pos+ray*l;\n    \n    vec3 MA = p - p1; \n    vec3 MB = p - p2;\n    vec3 MC = p - p3;\n    vec3 N=vec3(A,B,C);\n    N=norm(N);\n    float k = dot(N, cross(MA,MB));\n    float m = dot(N, cross(MB,MC));\n    float n = dot(N, cross(MC,MA));\n    bool ism=false;\n    \n    ism=(k<0.0);\n    \n    l=-1.0*float(!((ism && k<0.0 && m<0.0 && n<0.0)||(!ism && k>=0.0 && m>=0.0 && n>=0.0)))+\n    l*float((ism && k<0.0 && m<0.0 && n<0.0)||(!ism && k>=0.0 && m>=0.0 && n>=0.0));\n    return vec4(l,A,B,C);\n}\nfloat fade(float value, float start, float end)\n{\n    return (clamp(value,start,end)-start)/(end-start);\n}\n\nfloat rand(float co) { return fract(sin(co*(91.3458)) * 47453.5453); }\nfloat rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }\nfloat rand(vec3 co){ return rand(co.xy+rand(co.z)); }\nfloat rand(vec4 co){return rand(co.xyz*rand(co.w)); }\n","name":"Common","description":"","type":"common"}]}