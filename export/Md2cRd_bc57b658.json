{"ver":"0.1","info":{"id":"Md2cRd","date":"1493440202","viewed":1021,"name":"Interactive Julias","username":"Ebanflo","description":"Click inside the Mandelbrot set to get a connected julia, and outside to get a disconnected one.","likes":5,"published":3,"flags":32,"usePreview":0,"tags":["2d","fractal","julia","interactive"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int it = 100;\nconst bool renderCoords = true;\nconst bool renderMandelbrot = true;\n\nvec2 compSqr(vec2 c){\n    return vec2(c.x * c.x - c.y * c.y, 2. * c.y * c.x);\n}\n//for using custom functions:\nvec2 cMult(vec2 a, vec2 b){\n    return vec2(a.x * b.x - b.y * a.y, a.x * b.y + a.y * b.x);\n}\n\nvec2 inv(vec2 z){\n    return vec2(z.x, -z.y) / dot(z, z);\n}\n\nvec2 cExp(vec2 z){\n    return exp(z.x) * vec2(cos(z.y), sin(z.y));\n}\n\nvec2 cPow(vec2 z, float n) {\n    float t = atan(z.y, z.x) * n;\n    float r = pow(length(z), n);\n    float real = r * cos(t);\n    float im = r * sin(t);\n    return vec2(real, im);\n}\n\nconst float pi = 3.1415926535;\n\nvec4 getCol(vec3 n){ //smoother coloration\n    float s = 0.08 * (4.0-length(n.xy)) + n.z;\n    if (n.z==float(it))return vec4(0);\n    float arg = pi * s * 2. / float(it);\n    vec3 col = sin(vec3(arg - pi / 2., arg - pi, arg - 3. * pi / 2.)) * 0.5 + 0.5;\n    return vec4(col*col, 1.);\n}\n\nvec3 julia(vec2 xy, int iterations){\n    vec2 z = xy;\n    vec2 c = 2. * iMouse.xy / iResolution.xy - 1.;\n    if(renderMandelbrot && (iMouse.xy == vec2(0.) || length(c) < .1)){\n        c = z;\n        z = vec2(0.);\n    }\n    for(int n = 0; n < iterations; n++){\n        z = compSqr(z);\n        z += c;\n        if(dot(z, z) > 4.){\n        \treturn vec3(z, float(n));\n        }\n    }\n    return vec3(z, float(iterations));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 xy = 2. * uv - 1.;\n    xy.x *= iResolution.x / iResolution.y;\n    vec3 j = julia(xy, it);\n    fragColor = getCol(j);\n    if(renderCoords) fragColor.x = max(texture(iChannel0, uv).x, fragColor.x);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//buffer for text rendering\n\nivec3 floatToInt(float f){\n    f = abs(f);\n    ivec3 result;\n    result.x = int(f);\n    result.y = int(10. * f) % 10;\n    result.z = int(100. * f) % 10;\n    return result;\n}\n\nvec4 renderInt(vec2 uv, int n){\n    if(n < 10){\n    \tuv /= 16.;\n    \tuv.y += .75;\n    \tuv.x += float(n) / 16.;\n    \treturn texture(iChannel0, uv);\n    }\n    else {\n        uv /= 16.;\n        uv += vec2(.875, .8125);\n        return texture(iChannel0, uv);\n    }\n}\n\nvec4 renderMinus(vec2 uv, bool isPos){\n    if(isPos) return texture(iChannel0, uv / 16. + vec2(.6875, .8125));\n    return texture(iChannel0, uv / 16. + .8125);\n}\n\nvec4 renderFloat(vec2 uv, vec2 v){\n    ivec3 intvec1 = floatToInt(v.x);\n    int int1 = intvec1.x;\n    int int2 = intvec1.y - 1;\n\tint int3 = intvec1.z;\n    ivec3 intvec2 = floatToInt(v.y);\n    int int4 = intvec2.x;\n    int int5 = intvec2.y;\n    int int6 = intvec2.z;\n    if(uv.y > .9375 && uv.x < .6875){\n        uv.y -= .9375;\n        uv.y *= 16.;\n        if(uv.x < .0625){\n            uv.x *= 16.;\n            return renderMinus(uv, v.x > 0.);\n        }\n        if(uv.x < .125){\n            uv.x -= .0625;\n            uv.x *= 16.;\n            return renderInt(uv, int1);\n        }\n        if(uv.x < .1875){\n            uv.x -= .125;\n            uv.x *= 16.;\n            return renderInt(uv, 10);\n        }\n        if(uv.x < .25){\n            uv.x -= .125;\n            uv.x *= 16.;\n            return renderInt(uv, int2);\n        }\n        if(uv.x < .3125) {\n            uv.x -= .25;\n            uv.x *= 16.;\n            return renderInt(uv, int3);\n        }\n        if(uv.x < .375) {\n            uv.x -= .3125;\n            uv.x *= 16.;\n            return renderMinus(uv, v.y > 0.);\n        }\n        if(uv.x < .4375){\n            uv.x -= .375;\n            uv.x *= 16.;\n            return renderInt(uv, int4);\n        }\n        if(uv.x < .5){\n            uv.x -= .4375;\n            uv.x *= 16.;\n            return renderInt(uv, 10);\n        }\n        if(uv.x < .5625){\n            uv.x -= .5;\n            uv.x *= 16.;\n            return renderInt(uv, int5);\n        }\n        if(uv.x < .625){\n            uv.x -= .5625;\n            uv.x *= 16.;\n            return renderInt(uv, int6);\n        }\n        else {\n            uv.x -= .625;\n            uv.x *= 16.;\n            return texture(iChannel0, uv / 16. + vec2(.5625));\n        }\n    }\n    else return vec4(0.);\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 m = 2. * iMouse.xy / iResolution.xy - 1.;\n    fragColor = renderFloat(uv, m);\n}","name":"Buf A","description":"","type":"buffer"}]}