{"ver":"0.1","info":{"id":"wdBBW3","date":"1590956568","viewed":342,"name":"Happy Swirl","username":"BeardThings","description":"Happy Little Swirl\n\n(Interested in a way to reduce the high frequency noise)","likes":4,"published":3,"flags":32,"usePreview":0,"tags":["raymarched","swirl","sdf","blur","colorful","colourful","happy","pastel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv=fragCoord/iResolution.xy;\n   \tfragColor += textureLod(iChannel0, fragCoord/iResolution.xy, length(uv*2.-1.)*2.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float sdf(vec3 p,out vec3 c)\n{\n    vec3 colors[5] = vec3[5](\n        vec3(0.4,0.7,0.9),\n        vec3(0.5,0.8,0.9),\n        vec3(0.9,0.6,0.6),\n        vec3(0.9,0.4,0.5),\n        vec3(0.9,0.4,0.7));\n    \n    float sdf=1000.;\n    const int n=5;\n    for(int i = 0; i < n; i++)\n    {\n        float t=2.*3.1415/float(n)*float(i);\n        float r=0.4;\n        \n        float time = float(iFrame)*0.016;\n        vec3 o=vec3(cos(time+t+p.z*2.)*r,sin(time+t+p.z*2.)*r,0.);\n        \n    \tfloat pd=dot(p-o,p-o);\n    \tfloat sd=dot(p,vec3(0.,0.,1.));\n    \tfloat df=sqrt(pd-sd*sd)-.03;\n        if(df < sdf)\n        {\n            sdf = df;\n            c = colors[i]+pow(dot(normalize(p.xy-o.xy),vec2(1.,0.)),2.);\n        }\n    }\n    return sdf;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy*2.-1.;\n    fragColor = vec4(0.);\n    \n    vec3 o=vec3(0.,0.,-1.);\n    vec3 d=normalize(vec3(0.,0.,1.)+vec3(uv.x/iResolution.y*iResolution.x,0.,0.)+vec3(0.,uv.y,0.));\n    float s=0.;\n    for(int i=0;i<13;i++)\n    {\n        vec3 p=o+d*s;\n        \n        vec3 c;\n        float di=sdf(p, c);\n        if(di<0.01)\n        {\n            float e=0.001;\n            vec3 t;\n            vec3 n=normalize(vec3(di-sdf(p-vec3(e,0.,0.),t),\n                        di-sdf(p-vec3(0.,e,0.),t),\n                        di-sdf(p-vec3(0.,0.,e),t)));\n            \n            vec3 dir=d;\n            fragColor.rgb=c*(dot(-dir,n)+1.)*0.5;\n            fragColor.a=1.;\n            break;\n        }\n        s+=di;\n    }\n    \n    ivec2 tex=ivec2(fragCoord+vec2(1.));\n    vec4 c = textureLod(iChannel0, vec2(tex)/iResolution.xy, 1.);\n    fragColor = fragColor + c*(1.-fragColor.a);\n}","name":"Buffer A","description":"","type":"buffer"}]}