{"ver":"0.1","info":{"id":"7dBSDV","date":"1621023852","viewed":129,"name":"Pulsating circle","username":"david4jsus","description":"Learned to make a seamless little looping animation of a circle growing from the center outwards.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["circle","mask","pulsating"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Return if uv is in circle\nfloat Circle (vec2 uv, vec2 position, float radius, float blur) {\n\n    // Create output\n    float circle = 0.0;\n    \n    // Distance from (0, 0)\n    float distance = length (uv - position);\n    \n    // Create smooth border of circle\n    circle = smoothstep (radius, radius - blur, distance);\n    \n    // Return output\n    return circle;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    // Fix view distortion (adjust aspect ratio on the x axis of uv)\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5 * cos (iTime + uv.xyx + vec3 (0,2,4));\n    \n    // Circle position (centered on x-axis)\n    vec2 circlePosition = vec2 ((iResolution.x / iResolution.y) / 2.0, 0.5);\n    \n    // Vary radius of circle throughout time\n    float circleRadius = abs (mod (iTime, 0.75 * 3.0) * 0.75 );\n    \n    // Create circle\n    float c1 = Circle (uv, circlePosition, circleRadius, 0.02);       // Outer circle\n    float c2 = Circle (uv, circlePosition, circleRadius - 0.1, 0.25); // Inner circle\n    float circle = c1 - c2;\n\n    // Output to screen\n    fragColor = vec4 (col * circle, 1.0);\n}","name":"Image","description":"","type":"image"}]}