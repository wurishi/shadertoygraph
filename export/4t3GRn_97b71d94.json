{"ver":"0.1","info":{"id":"4t3GRn","date":"1467525016","viewed":246,"name":"4colorgradient","username":"0xec","description":"A simple pixel shader demonstrating an animated 4 color gradient.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec4 TLCOLOR = vec4(1.0, 0.0, 0.0, 0.0);\nconst vec4 TRCOLOR = vec4(0.0, 1.0, 0.0, 0.0);\nconst vec4 BLCOLOR = vec4(0.0, 0.0, 1.0, 0.0);\nconst vec4 BRCOLOR = vec4(1.0, 1.0, 0.0, 0.0);\nconst vec4 CCCOLOR = vec4(-0.01, -0.3, -0.5, 0.0);\n\nconst vec2 TL = vec2(0.0, 1.0);\nconst vec2 TR = vec2(1.0, 1.0);\nconst vec2 BL = vec2(0.0, 0.0);\nconst vec2 BR = vec2(1.0, 0.0);\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float ccX = abs(sin(iTime/5.0));\n    float ccY = 0.5 + sin(iTime)/2.0;\n    vec2 CC = vec2(ccX, ccY);\n\n    // current secreen coordinates normalized\n    vec2 cord;  \n    cord.xy = fragCoord.xy / iResolution.xy; \n    \n    // normalized distance to screen vertexes\n    float dTL = distance(cord, TL);\n    float dTR = distance(cord, TR);\n    float dBL = distance(cord, BL);\n    float dBR = distance(cord, BR);\n    float dCC = distance(cord, CC);    \n    \n    float iTL = (dTL == 0.0 ? 1.0 : 1.0/dTL);\n    float iTR = (dTR == 0.0 ? 1.0 : 1.0/dTR);\n    float iBL = (dBL == 0.0 ? 1.0 : 1.0/dBL);\n    float iBR = (dBR == 0.0 ? 1.0 : 1.0/dBR);\n    float iCC = (dCC == 0.0 ? 1.0 : 1.0/dCC);\n    \n    float sum = iTL + iTR + iBL + iBR + iCC;\n    float wTL = (iTL / sum);\n    float wTR = (iTR / sum);\n    float wBL = (iBL / sum);\n    float wBR = (iBR / sum);\n    float wCC = (iCC / sum);\n    \n    vec4 finalColor = \n        (iTL * TLCOLOR *wTL) + \n        (iTR * TRCOLOR *wTR) +\n        (iBL * BLCOLOR *wBL) +\n        (iBR * BRCOLOR *wBR) +\n        (iCC * CCCOLOR *wCC);\n      \n    fragColor = finalColor;\n}","name":"Image","description":"","type":"image"}]}