{"ver":"0.1","info":{"id":"4stBWB","date":"1527118064","viewed":491,"name":"Normal Map Projection ","username":"twitchingace","description":"Proof of concept for a planar reflection thing I'm working on.\n\nPretends the textured plane is .1 away along the z axis, and maps our UVs onto the texture plane to pretend at perturbed reflections.","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["reflection","normals","messy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy + vec2(cos(iTime*.1), sin(iTime*.1));\n    \n    //vec3 normal = vec3(0.,0.,1.);\n    vec3 normal = normalize(texture(iChannel0, uv).xyz*2. - 1.);\n   \n    vec3 col = texture(iChannel1, uv + (.1/normal.z)*normal.xy).xyz;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    //fragColor = vec4(normal,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float getHeight(vec2 uv) {\n  return texture(iChannel0, uv).r;\n}\n\nvec4 bumpFromDepth(vec2 uv, vec2 resolution, float scale) {\n  vec2 step = 1. / resolution;\n    \n  float height = getHeight(uv);\n    \n  vec2 dxy = height - vec2(\n      getHeight(uv + vec2(step.x, 0.)), \n      getHeight(uv + vec2(0., step.y))\n  );\n    \n  return vec4(normalize(vec3(dxy * scale / step, 1.)), height);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n  vec2 uv = fragCoord.xy / iResolution.xy;\n  fragColor = vec4(bumpFromDepth(uv, iResolution.xy, .1).rgb * .5 + .5, 1.);\n}","name":"Buf A","description":"","type":"buffer"}]}