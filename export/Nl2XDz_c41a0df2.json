{"ver":"0.1","info":{"id":"Nl2XDz","date":"1643965462","viewed":108,"name":"Fog Circle","username":"kubzoey95","description":"Some fog circle","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 hash( vec2 p ) // replace this by something better\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat atan2(in float y, in float x) {\n    bool s = (abs(x) > abs(y));\n    return mix(3.14159265358979/2.0 - atan(x,y), atan(y,x), s);\n}\n\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\n\n// -----------------------------------------------\n\nfloat complexNoise(in vec2 uv, in float scale)\n{\n    float f = 0.0;\n    uv *= scale;\n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n    f  = 0.5000*noise( uv ); uv = m*uv;\n    f += 0.2500*noise( uv ); uv = m*uv;\n    f += 0.1250*noise( uv ); uv = m*uv;\n    f += 0.0625*noise( uv ); uv = m*uv;\n    f += (0.0625 / 2.0)*noise( uv ); uv = m*uv;\n    f += (0.0625 / 4.0)*noise( uv ); uv = m*uv;\n    f += (0.0625 / 8.0)*noise( uv ); uv = m*uv;\n    \n\tf = 0.5 + 0.5*f;\n    \n    return f;\n}\n\nfloat grain(in vec2 uv){\n    float strength = 32.0;\n    \n    float x = (uv.x + 4.0 ) * (uv.y + 4.0 ) * (iTime * 10.0);\n\treturn (mod((mod(x, 13.0) + 1.0) * (mod(x, 123.0) + 1.0), 0.01)-0.005) * strength;\n}\n\nfloat circle(in vec2 coor, in vec2 circleCoor, in float circleRadius, in float distMin){\n    float dist = distance(distance(coor, circleCoor), circleRadius) / circleRadius;\n    dist = (1.0 - dist);\n    dist = distance(dist, distMin) * float(dist > distMin);\n    return dist;\n}\n\nfloat blurTex(in vec2 p){\n    float color = length(texture(iChannel0, p * 0.2));\n    \n    for(int i=0;i<5;++i)\n    {\n        color += length(texture(iChannel0, (p + vec2(complexNoise(p + vec2(210498.2131231,1249214.34543) * float(i), 1.), complexNoise(p + vec2(9821376.645634313,97213321.43234213) * float(i), 1.))) * 0.2));\n    }\n    return color / 6.;\n}\n\nvec4 renderFogCircle(in vec2 fragCoord){\n\n    vec2 p = fragCoord.xy / iResolution.xy;\n    \n    vec2 pAdj = p*vec2(iResolution.x/iResolution.y,1.0);\n\n\tvec2 uv = pAdj + iTime*0.25;\n    \n    vec2 circleCenter = vec2(0.5, 0.50);\n    vec2 radVect = pAdj - circleCenter;\n    float radius = length(radVect);\n    float realAngle = atan(radVect.y, radVect.x) * 2.0;\n    float angle = (realAngle + complexNoise(uv, 0.25) * 2.) / 3.;\n\tvec2 polarUV1 = vec2(angle, radius * 10.) + iTime*0.25;\n    \n    vec2 polarUV2 = vec2(angle, radius * 1.) + iTime*0.25;\n    \n    float noisMask = 1.;// complexNoise(uv, 0.5) * 5.0;\n    \n\tfloat f = 0.0;\n    \n    float thresh = 0.3;\n    float polarNoise2 = complexNoise(polarUV2, thresh);\n\n    polarNoise2 = float(polarNoise2 > thresh) * polarNoise2 * distance(polarNoise2, thresh) / (1.0 - thresh);\n    polarNoise2 *= 2.0;\n    \n    f = complexNoise(polarUV1, 0.5) * polarNoise2 * noisMask;\n    f *= circle(pAdj, circleCenter, 0.4, 0.5);\n    f *= (2.*3.14159265358979 - abs(realAngle)) / 2.*3.14159265358979;\n    f *= 0.25;\n    //vec4 color = texture(iChannel0, vec2(complexNoise(pAdj + iTime, 0.2), complexNoise(pAdj + 123. + iTime*0.2, 0.2)) * 3.);\n    float color = blurTex(pAdj);\n    float isGreater = float(color > 0.9999);\n    color =  isGreater * color + (1. - isGreater)*0.9999;\n    \n\treturn vec4( f, f, f, 1.0 ) * (1. - grain(p / 100.0)) * color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    fragColor = renderFogCircle(fragCoord);\n}","name":"Image","description":"","type":"image"}]}