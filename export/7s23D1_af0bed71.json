{"ver":"0.1","info":{"id":"7s23D1","date":"1618691862","viewed":66,"name":"magical","username":"lena210301","description":"d","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["h"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst vec3 CAMERA_POS = vec3(2.4, 3.2, -7.5);\n//const vec3 CAMERA_POS = vec3(-6.0, 3.0, -6);\n//const vec3 CAMERA_POS = vec3(10, 5.2, -8);\nconst vec3 SPH_POS = vec3(0, 0.5, 0);\nconst vec3 LIGHT1_POS = vec3(-3, 1.5, 5);\nconst float LIGHT1_RADIUS = 0.5;\nconst vec3 LIGHT1_COLOR = vec3(1, 1, 0);\n\nconst vec3 LIGHT2_POS = vec3(1, -0.5, -3);\nconst float LIGHT2_RADIUS = 0.45;\nconst vec3 LIGHT2_COLOR = vec3(0.1, 1, 0.2);\n\nconst vec3 LIGHT3_POS = vec3(0, 0.5, 0);\nconst float LIGHT3_RADIUS = 0.5;\nconst vec3 LIGHT3_COLOR = vec3(0, 0, 0);\n\nconst vec3 LIGHT4_POS = vec3(0, 1.0, -0.6);\nconst vec3 LIGHT5_POS = vec3(-0.3, 0.6, -0.5);\nconst vec3 LIGHT6_POS = vec3(0.0, 0.9, -0.5);\nconst vec3 LIGHT7_POS = vec3(-0.5, 0.7, -0.6);\nconst vec3 LIGHT8_POS = vec3(0.3, 0.5, -0.7);\nconst vec3 LIGHT9_POS = vec3(0, 0.3, -0.7);\nconst vec3 LIGHT10_POS = vec3(0.5, 0.8, -0.7);\nconst float LIGHT4_RADIUS = 0.015;\nconst vec3 LIGHT4_COLOR = vec3(1, 1, 1);\n\nvec3 randDir;\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\nconst float SPH_RADIUS = 1.0;\nconst float PLANE_HEIGHT = -1.25;\nconst float CYL_HEIGHT = -SPH_RADIUS - PLANE_HEIGHT;\nfloat DODEC_BASE = CYL_HEIGHT + PLANE_HEIGHT + 0.001;\n\nfloat triple(vec3 v1, vec3 v2, vec3 v3) {\n    return dot(v1, cross(v2, v3));\n}\n\n\n\n\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\n\nfloat traceTr(vec3 pos, vec3 dir, vec3 vert[3], out vec3 norm) {\n    vec3 d1 = vert[1] - vert[0];\n    vec3 d2 = vert[2] - vert[0];\n    norm = normalize(cross(d1, d2));\n    vec3 d0 = pos - vert[0];\n    float a = triple(dir, d1, d2);\n    if (a == 0.0) return INF;\n    float t = - triple(d0, d1, d2) / a;\n    \n    vec3 worldPos = pos + t * dir;\n    \n    for (int i = 0; i < 2; i++) {\n        vec3 de = vert[(i + 1) ] - vert[i];\n        vec3 dp = worldPos - vert[i];\n        vec3 norm1 = normalize(cross(de, dp));\n        if (dot(norm1 - norm, norm1 - norm) >= 0.5) return INF;\n    }\n    vec3 de = vert[0 ] - vert[2];\n        vec3 dp = worldPos - vert[2];\n        vec3 norm1 = normalize(cross(de, dp));\n        if (dot(norm1 - norm, norm1 - norm) >= 0.5) return INF;\n    if (t <= 0.0) {\n        return INF;\n    }\n    return t;\n}\n\n//float DODEC_BASE = CYL_HEIGHT + PLANE_HEIGHT + 0.001;\n\nfloat traceOctahedron(vec3 pos, vec3 dir, out vec3 norm) {\n    vec3 pentVert[6];\n    pentVert[0] = vec3(0.0, 0.0 + DODEC_BASE, 0.0); //A\n    pentVert[1] = vec3(0.0, 1.5 + DODEC_BASE, 1.5); //B\n    pentVert[2] = vec3(1.5, 1.5 + DODEC_BASE, 0.0); //C\n    pentVert[3] = vec3(0.0, 1.5 + DODEC_BASE, -1.5); //D\n    pentVert[4] = vec3(-1.5, 1.5 + DODEC_BASE, 0.0); //E\n    pentVert[5] = vec3(0.0, 3.0 + DODEC_BASE, 0.0); //F\n    \n    \n    \n    \n    vec3 cur_norm;\n    float t = INF, cur_t;\n    for (int i = 0; i < 6; i++) {\n        vec3 cur_face[3];\n        for (int j = 0; j < 3; j++) {\n            if (i * 5 + j == 0) {\n                cur_face[j] = pentVert[0];\n            }\n            if (i * 5 + j == 1) {\n                cur_face[j] = pentVert[1];\n            }\n            if (i * 5 + j == 2) {\n                cur_face[j] = pentVert[2];\n            }\n            if (i * 5 + j == 3) {\n                cur_face[j] = pentVert[0];\n            }\n            if (i * 5 + j == 4) {\n                cur_face[j] = pentVert[3];\n            }\n            if (i * 5 + j == 5) {\n                cur_face[j] = pentVert[2];\n            }\n            if (i * 5 + j == 6) {\n                cur_face[j] = pentVert[0];\n            }\n            if (i * 5 + j == 7) {\n                cur_face[j] = pentVert[3];\n            }\n            if (i * 5 + j == 8) {\n                cur_face[j] = pentVert[4];\n            }\n            if (i * 5 + j == 9) {\n                cur_face[j] = pentVert[0];\n            }\n            if (i * 5 + j == 10) {\n                cur_face[j] = pentVert[1];\n            }\n            if (i * 5 + j == 11) {\n                cur_face[j] = pentVert[4];\n            }\n            if (i * 5 + j == 12) {\n                cur_face[j] = pentVert[5];\n            }\n            if (i * 5 + j == 13) {\n                cur_face[j] = pentVert[2];\n            }\n            if (i * 5 + j == 14) {\n                cur_face[j] = pentVert[1];\n            }\n            if (i * 5 + j == 15) {\n                cur_face[j] = pentVert[5];\n            }\n            if (i * 5 + j == 16) {\n                cur_face[j] = pentVert[2];\n            }\n            if (i * 5 + j == 17) {\n                cur_face[j] = pentVert[3];\n            }\n            if (i * 5 + j == 18) {\n                cur_face[j] = pentVert[5];\n            }\n            if (i * 5 + j == 19) {\n                cur_face[j] = pentVert[4];\n            }\n            if (i * 5 + j == 20) {\n                cur_face[j] = pentVert[3];\n            }\n            if (i * 5 + j == 21) {\n                cur_face[j] = pentVert[5];\n            }\n            if (i * 5 + j == 22) {\n                cur_face[j] = pentVert[4];\n            }\n            if (i * 5 + j == 23) {\n                cur_face[j] = pentVert[1];\n            }\n            \n            \n            //cur_face[j] = pentVert[pentFace[i * 5 + j]];\n        }\n        cur_t = traceTr(pos, dir, cur_face, cur_norm);\n        if (cur_t < t) {\n            t = cur_t;\n            norm = cur_norm;\n        }\n    }\n    if (t <= 0.0) {\n        return INF;\n    }\n    return t;\n}\n\nfloat traceTriangle1(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-0.95 + pos.y - pos.x) / (dir.x - dir.y);\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (worldPos.y >= 1.0) {\n    return INF;\n    }\n    \n    if (worldPos.y <= 0.9) {\n    return INF;\n    }\n    if (worldPos.z <= -5.0) {\n    return INF;\n    }\n    \n    normal = vec3(1, 1, 0);\n    normal = normalize(normal);\n    return t;\n}\n\nfloat traceTriangle2(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-0.95 + pos.y - pos.z) / (dir.z - dir.y);\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (worldPos.y >= 1.0) {\n    return INF;\n    }\n    \n    if (worldPos.y <= 0.9) {\n    return INF;\n    }\n    if (worldPos.x <= 0.0) {\n    return INF;\n    }\n    \n    normal = vec3(0, 1, 1);\n    normal = normalize(normal);\n    return t;\n}\n\nfloat traceTriangle4(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (+2.5 - pos.y + pos.x) / (dir.x - dir.y);\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (worldPos.y <= -2.0) {\n    return INF;\n    }\n    if (worldPos.z >= -worldPos.y - 1.5) {\n    return INF;\n    }\n    if (worldPos.z >= worldPos.y - 1.5) {\n    return INF;\n    }\n    if (worldPos.y >= -1.0) {\n    return INF;\n    }\n    if (worldPos.z <= -1.0) {\n    return INF;\n    }\n    \n    normal = vec3(1, -1, 0);\n    normal = normalize(normal);\n    return t;\n}\n\nfloat traceTriangle3(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.0) * (-5.0 + pos.y - pos.z) / (dir.z - dir.y);\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (worldPos.y >= 1.0) {\n    return INF;\n    }\n    if (worldPos.x >= -worldPos.y) {\n    return INF;\n    }\n    if (worldPos.x >= worldPos.y) {\n    return INF;\n    }\n    if (worldPos.y <= 0.0) {\n    return INF;\n    }\n    if (worldPos.x <= -1.0) {\n    return INF;\n    }\n    \n    normal = vec3(1, 0, 1);\n    normal = normalize(normal);\n    return t;\n}\n\n\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 1.5) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 1.5;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 sphNorm;\n    float sphT = traceSphere(pos, dir, 1.0, sphNorm);\n    if (sphT < dist)\n        return true;\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 20.0 / distSq1;\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 10.0 / distSq2;\n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + texture(iChannel1, normal).rgb * 0.1\n    );\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    if (sinB > 1.0) {\n        return reflect(v, normal);\n    }\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5)) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    const float GLASS_N = 1.5;\n    const float AIR_N = 1.0;\n    float n1 = AIR_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    const float DIAMOND_N = 2.5;\n    float DIAMOND_R = pow2(DIAMOND_N - GLASS_N) / pow2(DIAMOND_N + GLASS_N);\n    \n    vec3 colorMult = vec3(1, 1, 1);\n    \n    for (int i = 0; i < 10; ++i) {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        \n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb;\n            //colorMult *= vec3(0.1, 1, 0.2);\n            \n            normal = planeNorm;\n        }\n        \n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n        \n        vec3 l3Norm;\n        float light3T = traceSphere(curPos - LIGHT3_POS, curDir, LIGHT3_RADIUS, l3Norm);\n        if (light3T < t) {\n            t = light3T;\n            materialType = EMISSION;\n            color = LIGHT3_COLOR;\n            normal = l3Norm;\n        }\n        \n        vec3 l4Norm;\n        float light4T = traceSphere(curPos - LIGHT4_POS, curDir, LIGHT4_RADIUS, l4Norm);\n        if (light4T < t) {\n            t = light4T;\n            materialType = EMISSION;\n            color = LIGHT4_COLOR;\n            normal = l4Norm;\n        }\n        \n        vec3 l5Norm;\n        float light5T = traceSphere(curPos - LIGHT5_POS, curDir, LIGHT4_RADIUS, l5Norm);\n        if (light5T < t) {\n            t = light5T;\n            materialType = EMISSION;\n            color = LIGHT4_COLOR;\n            normal = l5Norm;\n        }\n        \n        vec3 l6Norm;\n        float light6T = traceSphere(curPos - LIGHT6_POS, curDir, LIGHT4_RADIUS, l6Norm);\n        if (light6T < t) {\n            t = light6T;\n            materialType = EMISSION;\n            color = LIGHT4_COLOR;\n            normal = l6Norm;\n        }\n        \n        vec3 l7Norm;\n        float light7T = traceSphere(curPos - LIGHT7_POS, curDir, LIGHT4_RADIUS, l7Norm);\n        if (light7T < t) {\n            t = light7T;\n            materialType = EMISSION;\n            color = LIGHT4_COLOR;\n            normal = l7Norm;\n        }\n        \n        vec3 l8Norm;\n        float light8T = traceSphere(curPos - LIGHT8_POS, curDir, LIGHT4_RADIUS, l8Norm);\n        if (light8T < t) {\n            t = light8T;\n            materialType = EMISSION;\n            color = LIGHT4_COLOR;\n            normal = l8Norm;\n        }\n        \n        vec3 l9Norm;\n        float light9T = traceSphere(curPos - LIGHT9_POS, curDir, LIGHT4_RADIUS, l9Norm);\n        if (light9T < t) {\n            t = light9T;\n            materialType = EMISSION;\n            color = LIGHT4_COLOR;\n            normal = l9Norm;\n        }\n        \n        vec3 l10Norm;\n        float light10T = traceSphere(curPos - LIGHT10_POS, curDir, LIGHT4_RADIUS, l10Norm);\n        if (light10T < t) {\n            t = light10T;\n            materialType = EMISSION;\n            color = LIGHT4_COLOR;\n            normal = l10Norm;\n        }\n        //vec3 sphNorm1;\n        //float sphT1 = traceSphere(curPos, curDir, 1.5, sphNorm1);\n        //if (sphT1 < t) {\n        //    t = sphT1;\n        //    normal = sphNorm1;\n        //    if (randVals.x < GLASS_R) {\n        //        materialType = REFLECTION;\n        //    } else {\n        //        //colorMult *= vec3(0.5, 0.5, 1);\n        //        materialType = REFRACTION;\n        //        if (dot(curDir, normal) > 0.0) {\n        //            nEnter = AIR_N;\n        //        } else {\n        //            nEnter = GLASS_N;\n        //        }\n        //    }\n        //}\n        \n        vec3 sphNorm;\n        float sphT = traceSphere(curPos - SPH_POS, curDir, 0.6, sphNorm);\n        if (sphT < t) {\n            t = sphT;\n            normal = sphNorm;\n            materialType = EMISSION;\n            vec3 worldPos = t * curDir + curPos;\n            color.rgb = texture(iChannel3, worldPos.zx * worldPos.y * 4.5).rgb * (0.8) + color.rgb * (0.2);\n            //color.a = new_color.a + color.a * (1 - new_color.a)\n            \n            //color= texture(iChannel3, worldPos.zx * worldPos.y * 4.5).rgb;\n            //colorMult *= vec3(0.1, 1, 0.2);\n            colorMult *= vec3(0.7, 0.65, 1);\n            //color = texture(iChannel3, worldPos.xz * 1.5).rgb;\n            normal = sphNorm;\n        }\n        \n        \n        \n        \n        vec3 octNorm;\n        \n        float octT = traceOctahedron(curPos, curDir, octNorm);\n        if (octT < t) {\n            t = octT;\n            normal = octNorm;\n            //materialType = REFLECTION;\n            if (randVals.x < GLASS_R) {\n                materialType = REFLECTION;\n            } else {\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n            \n        }\n        \n        \n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) {\n                fragColor.rgb = color * colorMult;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            } else if (materialType == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, nEnter);\n                curPos = worldPos + curDir * 1e-5;\n                n1 = nEnter;\n            }\n        } else {\n            fragColor.rgb = texture(iChannel1, curDir).rgb;// * colorMult;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}