{"ver":"0.1","info":{"id":"4l2cRc","date":"1509567490","viewed":84,"name":"Tutorial 5: Arreglos y ciclos","username":"aaecheve","description":"Tutorial 5 CC7615","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["tutorial","cc7615"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Es posible también trabajar con arreglos y ciclos. El tamaño\n//de los arreglos debe ser definido en tiempo de compilación\n//no existe memoria dinámica en shaders\n\nstruct Circle {\n  vec2 position;\n  float radius;\n  vec4 color;\n};\n    \nbool testCircle(Circle c, vec2 pixelCoords)\n{\n  return distance(c.position,pixelCoords) < c.radius;\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    Circle circles[3];\n\tcircles[0] = Circle(vec2(0.5,0.2), 0.1, vec4(1.0,0.0,0.0,1.0));\n    circles[1] = Circle(vec2(0.2,0.5), 0.1, vec4(0.0,1.0,0.0,1.0));\n    circles[2] = Circle(vec2(0.7,0.7), 0.1, vec4(0.0,0.0,1.0,1.0));\n    fragColor = vec4(1.0);  \n    for(int i=0; i<3; i++)\n  \t{\n    \tif(testCircle(circles[i], uv))\n        \tfragColor = circles[i].color;\n    }\n}","name":"Image","description":"","type":"image"}]}