{"ver":"0.1","info":{"id":"ctsczB","date":"1690900134","viewed":53,"name":"mandelbrot b/w","username":"qabas","description":"just trying something","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float maxIter = 50.;\n\nfloat iterate(vec2 uv) {\n\n    // f(z) = z^2 + c\n    // z = x + yi\n    // f(z) = (x+yi)^2+c\n    // f(z) = x^2 - y^2 + 2xyi + c\n    \n    // c is the complex number being tested (uv - see below)\n    \n    vec2 z = vec2(0.);\n    \n    for(float i = 0.; i < maxIter; i++) {\n        z = vec2(pow(z.x, 2.) - pow(z.y, 2.), 2.*z.x*z.y) + uv*2.;\n        \n        if(length(z) > 2.) {\n            return i/maxIter;\n        }\n  \n    }\n    \n    return 1.;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalized pixel coordinates + shifting origin to center\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n\n    // black background\n    vec3 col = vec3(0.);\n    \n    // the colour will change depending on the result of the mandelbrot iteration\n    // the colour will be closer to white\n    col += iterate(uv);\n\n    // Output to screen\n    fragColor = vec4(col,1.0); \n}","name":"Image","description":"","type":"image"}]}