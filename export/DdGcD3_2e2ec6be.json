{"ver":"0.1","info":{"id":"DdGcD3","date":"1696664522","viewed":36,"name":"sin vignette","username":"nextrix","description":"fuckin around with shadertoy sin(iTime) shit ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sin","utility","vignette"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define RADIUS 1.\n\n#define ROTAMP 10.\n#define ROTSPEED 1.\n\n#define ZOOMSPEED 1.\n#define ZOOM 10.\n\n#define FRACTALSPEED 1.\n\n#define ITERATIONS iMouse.y / 15.\n\n#define BRIGHTNESS 1.    //      0 - 1\n#define INVERT 0.        //   1 = inverted\n\n\n\nvec2 rot(vec2 uv, float s) {\n\treturn mat2(cos(s), sin(s), -sin(s), cos(s)) * uv;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy - 0.5;\n    vec3 col = vec3(0.0);\n    \n    uv = rot(uv, sin(iTime * ROTSPEED) / ROTAMP) * ZOOM;\n    uv *= uv * cos(iTime * ZOOMSPEED);\n\n    for(int i = 0; i < int(ITERATIONS + 10.); i++) {\n        uv += abs(rot(uv, sin(iTime) / FRACTALSPEED) ) - 0.5;\n        col = vec3(length(uv) - RADIUS);\n    }\n    \n    vec3 color = vec3(col.r, col.g + 0.8, col.b + 1.3) - INVERT;\n\n    fragColor = vec4(min(clamp(color, 0., 1.), BRIGHTNESS),1.0);\n}","name":"Image","description":"","type":"image"}]}