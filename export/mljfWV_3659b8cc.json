{"ver":"0.1","info":{"id":"mljfWV","date":"1694559360","viewed":126,"name":"Dancing fractal","username":"athibaul","description":"Just a dancing fractal created using complex number multiplication (similar to Newton's fractal).","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["fractal","julia","abstract","newton","dance"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Bandlimited cos from Inigo Quilez\n// https://iquilezles.org/articles/bandlimiting/\nvec3 fcos( in vec3  x )\n{\n    vec3 w = fwidth(x);\n    return cos(x) * smoothstep(6.28, 0.0, w );\n}\n\n// cosine based palette adapted from Inigo Quilez:\n// https://iquilezles.org/articles/palettes/\nvec3 pal(in float t)\n{\n    vec3 a = vec3(.5), b = vec3(.5), c = vec3(1), d = vec3(0,.1,.2);\n    return a + b*fcos( 6.28318*(c*t+d) );\n}\n\nvec2 cmul(vec2 a, vec2 b) { return vec2(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x); }\nvec2 cinv(vec2 a) { return vec2(a.x, -a.y) / dot(a,a); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord - iResolution.xy) / iResolution.y;\n    uv.xy = uv.yx * 1.5 + vec2(0. + 0.1*cos(iTime),0.);\n    vec2 z = uv;\n    z = cmul(z, vec2(cos(iTime/3.), sin(iTime/3.)));\n    z -= cinv(cmul(z, z)) * (0.1);\n    z = cmul(z, vec2(1.,0.5*cos(iTime)));\n    vec2 z1 = z;\n    z -= cinv(cmul(z, z)) *.3;\n    z = cmul(z, vec2(1.,0.5*cos(iTime-1.)));\n    vec2 z2 = z;\n    z -= cinv(cmul(z, z)) * (.6+ 0.3 * sin(iTime));\n    z = cmul(z, vec2(1.,0.5*cos(iTime-2.)));\n    z -= cinv(cmul(z, z)) * .3;\n    vec3 col = pal(z.y * 0.5 + z2.x + 0.3*iTime);\n    col = mix(col, vec3(1), smoothstep(0., 10., length(z)));\n    col *= smoothstep(1.8, 0.5, length(z1));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}