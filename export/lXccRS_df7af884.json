{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"// Shadertoy compatible shader: \"Ultimate Translucent Sphere\"\n// Author: Your Name\n// Description: A ray-marched scene with a central translucent sphere, caustics, volumetric lighting, and post-processing.\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define SURF_DIST 0.001\n#define PI 3.14159265359\n\n// Smooth minimum function\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}\n\n// Sphere distance function\nfloat sdSphere(vec3 p, float r) {\n    return length(p) - r;\n}\n\n// Ground plane distance function\nfloat sdPlane(vec3 p) {\n    return p.y + 1.0;\n}\n\n// Scene distance function\nfloat scene(vec3 p) {\n    float sphere = sdSphere(p, 1.0); // Central sphere\n    float ground = sdPlane(p); // Ground plane\n    return smin(sphere, ground, 0.5);\n}\n\n// Raymarching function\nfloat rayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.0; // Distance from origin\n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd * dO;\n        float dS = scene(p); // Distance to scene\n        if (dS < SURF_DIST || dO > MAX_DIST) break;\n        dO += dS;\n    }\n    return dO;\n}\n\n// Normal calculation\nvec3 getNormal(vec3 p) {\n    float d = scene(p);\n    vec2 e = vec2(0.01, 0.0);\n    vec3 n = d - vec3(\n        scene(p - e.xyy),\n        scene(p - e.yxy),\n        scene(p - e.yyx)\n    );\n    return normalize(n);\n}\n\n// Soft shadows\nfloat softShadow(vec3 ro, vec3 rd, float k) {\n    float res = 1.0;\n    float ph = 1e20;\n    for (float t = 0.01; t < MAX_DIST; ) {\n        float h = scene(ro + rd * t);\n        if (h < SURF_DIST) return 0.0;\n        float y = h * h / (2.0 * ph);\n        float d = sqrt(h * h - y * y);\n        res = min(res, k * d / max(0.0, t - y));\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n// Ambient occlusion\nfloat ambientOcclusion(vec3 p, vec3 n) {\n    float occ = 0.0;\n    float sca = 1.0;\n    for (int i = 0; i < 5; i++) {\n        float hr = 0.01 + 0.12 * float(i) / 4.0;\n        vec3 aopos = n * hr + p;\n        float dd = scene(aopos);\n        occ += -(dd - hr) * sca;\n        sca *= 0.95;\n    }\n    return clamp(1.0 - 3.0 * occ, 0.0, 1.0);\n}\n\n// Refraction function\nvec3 calculateRefraction(vec3 rd, vec3 n, float eta) {\n    float cosI = -dot(n, rd);\n    float sinT2 = eta * eta * (1.0 - cosI * cosI);\n    if (sinT2 > 1.0) return vec3(0.0); // Total internal reflection\n    float cosT = sqrt(1.0 - sinT2);\n    return eta * rd + (eta * cosI - cosT) * n;\n}\n\n// Environment mapping\nvec3 envMap(vec3 rd) {\n    vec3 skyColor = vec3(0.1, 0.2, 0.4);\n    vec3 sunColor = vec3(1.0, 0.8, 0.6);\n    float sun = pow(max(dot(rd, normalize(vec3(0.8, 0.6, 0.4))), 0.0), 32.0);\n    return skyColor + sunColor * sun;\n}\n\n// Caustics effect\nfloat caustics(vec3 p) {\n    float c = 0.0;\n    for (int i = 0; i < 3; i++) {\n        p = abs(p) / dot(p, p) - 0.5;\n        c += length(p) * 0.1;\n    }\n    return c;\n}\n\n// Volumetric lighting\nvec3 volumetricLight(vec3 ro, vec3 rd, float d) {\n    vec3 col = vec3(0.0);\n    float stepSize = d / 16.0;\n    for (float t = 0.0; t < d; t += stepSize) {\n        vec3 p = ro + rd * t;\n        float density = 0.01 / (1.0 + length(p));\n        col += density * envMap(rd);\n    }\n    return col;\n}\n\n// Bloom effect\nvec3 applyBloom(vec3 col, vec2 uv) {\n    float blur = 0.0;\n    for (float x = -1.0; x <= 1.0; x += 1.0) {\n        for (float y = -1.0; y <= 1.0; y += 1.0) {\n            blur += texture(iChannel0, uv + vec2(x, y) / iResolution.xy).r;\n        }\n    }\n    blur /= 9.0;\n    return mix(col, col * blur * 2.0, 0.5);\n}\n\n// Main rendering function\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized coordinates\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    // Camera setup\n    float time = iTime * 0.1;\n    vec3 ro = vec3(4.0 * sin(time), 2.0, 4.0 * cos(time)); // Ray origin (camera position)\n    vec3 lookAt = vec3(0.0, 0.0, 0.0); // Look at point\n    vec3 forward = normalize(lookAt - ro);\n    vec3 right = normalize(cross(vec3(0.0, 1.0, 0.0), forward));\n    vec3 up = cross(forward, right);\n    vec3 rd = normalize(forward + uv.x * right + uv.y * up); // Ray direction\n    \n    // Raymarch the scene\n    float d = rayMarch(ro, rd);\n    vec3 p = ro + rd * d;\n    \n    // Lighting and material\n    vec3 col = vec3(0.0);\n    if (d < MAX_DIST) {\n        vec3 n = getNormal(p);\n        vec3 lightPos = vec3(3.0, 5.0, 2.0);\n        vec3 lightDir = normalize(lightPos - p);\n        \n        // Refraction and reflection\n        float eta = 1.0 / 1.5; // Air to glass ratio\n        vec3 refr = calculateRefraction(rd, n, eta);\n        vec3 refl = reflect(rd, n);\n        \n        // Fresnel effect\n        float fresnel = pow(1.0 - dot(-rd, n), 5.0);\n        col = mix(refr, refl, fresnel);\n        \n        // Caustics\n        float c = caustics(p);\n        col += vec3(c * 0.5);\n        \n        // Soft shadows\n        float shadow = softShadow(p + n * SURF_DIST * 2.0, lightDir, 8.0);\n        \n        // Ambient occlusion\n        float ao = ambientOcclusion(p, n);\n        \n        // Soft lighting\n        float diff = max(dot(n, lightDir), 0.0) * shadow;\n        col *= diff * vec3(1.0, 0.8, 0.6) * ao;\n    }\n    \n    // Volumetric lighting\n    col += volumetricLight(ro, rd, d);\n    \n    // Environment mapping\n    col = mix(col, envMap(rd), smoothstep(0.0, MAX_DIST, d));\n    \n    // Bloom effect\n    col = applyBloom(col, fragCoord / iResolution.xy);\n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lXccRS","date":"1735246733","viewed":70,"name":"Deepseek 2","username":"darrinm","description":"Another Deepseek test","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["3d","raymarch"],"hasliked":0,"parentid":"","parentname":""}}