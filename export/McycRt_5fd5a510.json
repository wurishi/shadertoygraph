{"ver":"0.1","info":{"id":"McycRt","date":"1732224779","viewed":141,"name":"Optimal constant integer power","username":"ttg","description":"Implementation of pow(b,n) that, provided compile-time constant integer exponent n, optimizes to shortest possible execution time on AMD.\n\nplayground: [url]https://shader-playground.timjones.io/f71674b8d56434d882622a2fe50ef0fc[/url]\n","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["optimization","amd","pow","isacode"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\nImplementation of pow(b,n) that, provided compile-time constant integer n,\noptimizes to shortest possible execution time on AMD.\n\nplayground: https://shader-playground.timjones.io/f71674b8d56434d882622a2fe50ef0fc\n\n*/\n\nfloat pow_best_constexp (float b, int n) {\n  float x=b;\n  float v=1.;\n  int h=0,c=-1;\n  for (int k=0;k<8;k++) {\n    // use factor b^(2^k) if bit k is set\n    if ((n>>k&1)>0) h=k,c++,v*=x;\n    // get next b^(2^k)\n    x*=x;\n  }\n  // log/mul/exp costs 8+4+16 cycles on AMD = 7x cost of one mul\n  // use it when pure-mul implementation would be more expensive\n  if (n>128||h+c>7) return pow(b,float(n));\n  return v;\n}\n\nvoid mainImage (out vec4 O, vec2 f ) {\n  vec2 u=f/iResolution.xy;\n  O=vec4(0);\n  float x=u.x;\n  float yy=u.y*13.;\n  int N=int(floor(x*130.));\n  float b=1.02;\n  if(yy<pow(b,float(N))) O.x++;\n  if(yy<pow_best_constexp(b,N)) O.y++;\n}\n","name":"Image","description":"","type":"image"}]}