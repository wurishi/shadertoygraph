{"ver":"0.1","info":{"id":"MX23zz","date":"1708160658","viewed":82,"name":"fast terrain","username":"0x177","description":"sine waves my beloved","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","terrain"],"hasliked":0,"parentid":"l3XGRl","parentname":"raymarching startingpoint"},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 300.\n// low quality but webgl performance is hit or miss on linux\n#define SURF_DIST .1\n#define TAU 6.283185\n#define PI 3.141592\n#define li lightPos.xz * Rot(iTime*0.5)\n\nconst float globalAmbient = 0.8; // how strong is the ambient lightning\nconst float globalDiffuse = 0.5; // how strong is the diffuse lightning\nconst float globalSpecular = 1.0; // how strong is the specular lightning\nconst float globalSpecularExponent = 64.0; // how focused is the shiny spot\nconst vec3 lightPos = vec3(2.0, 1.0, -0.3); // position of the light source\nconst vec3 lightColor = vec3(0.3, 0.3, 0.3); // color of the light source\nconst vec3 ambientColor = vec3(0.1, 0.1, 0.1); // ambient color\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat noise(vec2 p) {\n    return sin(p.x)+sin(p.y);\n}\n\nfloat fbm(vec2 p) {\n    float h = 0.0;\n    float a = 0.3;\n    float f = 2.5;\n    \n    for (float i = 0.0; i<6.0; i++) {\n        h += a * noise(p);\n        a *= 0.5;\n        p = p*f*Rot(3.1415/4.0)-h*0.4;\n    }\n    \n    return h;\n}\n\nvec4 GetDist(vec3 p) {\n    p.y += 12.0;\n    float d = 999.0;\n    vec3 mat = vec3(0.941,0.902,0.549);\n    \n    d = p.y+2.0;\n    d -= 8.0*noise(p.xz*0.1);\n    d += 10.0 * fbm(p.xz*0.1);\n    d -= 2.0 * sin(0.6*d);\n    d *= 0.3;\n    \n    return vec4(d,mat);\n}\n\nvec4 RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    vec3 mat;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        vec4 dS = GetDist(p);\n        dO += dS.x;\n        mat = dS.yzw;\n        if(dO>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n    }\n    \n    return vec4(dO,mat);\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(.001, 0);\n    vec3 n = GetDist(p).x - \n        vec3(GetDist(p-e.xyy).x, GetDist(p-e.yxy).x,GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nfloat ambientOcclusion(vec3 p, vec3 n){\n    const int steps = 1;\n    const float delta = 0.5;\n\n    float a = 0.0;\n    float weight = 0.75;\n    float m;\n    for(int i=1; i<=steps; i++) {\n        float d = (float(i) / float(steps)) * delta;\n        a += weight*(d - GetDist(p + n*d).x);\n        weight *= 0.5;\n    }\n    return clamp(1.0 - a, 0.0, 1.0);\n}\n\nvec3 blinn_phong(  vec3 position,\n                           vec3 lightPosition,\n                           vec3 ambientCol,\n                           vec3 lightCol,\n                           float ambientCoeff,\n                           float diffuseCoeff,\n                           float specularCoeff,\n                           float specularExponent,\n                           vec3 camera_pos\n)\n{\n      vec3 l = lightPosition;\n      l.xz = li;\n      vec3 normal = GetNormal(position);\n      vec3 toEye = normalize(camera_pos - position);\n      vec3 toLight = normalize(l - position);\n      vec3 reflection = reflect(-toLight, normal);\n\n      vec3 ambientFactor = ambientCol * ambientCoeff;\n      vec3 diffuseFactor = diffuseCoeff * lightCol * max(0.0, dot(normal, toLight));\n      vec3 specularFactor = lightCol * pow(max(0.0, dot(toEye, reflection)), specularExponent)\n                     * specularCoeff;\n\n    return ambientFactor + diffuseFactor + specularFactor;\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<100; i++ )\n    {\n\t\tfloat h = GetDist( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += h*.25;\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.1, 1. );\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\nvec3 sky(vec3 p, vec3 rd) {\n    vec3 col = vec3(0.0);\n    vec3 l = lightPos;\n    l.xz = li;\n    float sun = 0.01 / (1.0-dot(rd,normalize(l)));\n    col = mix(col,vec3(0.2),2.0 * fbm(vec2(length(1.4*rd.xz),rd.y)));\n    col += sun * 0.1;\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(0, 12, -29.);\n    ro.yz *= Rot(-m.y*PI+1.);\n    ro.xz *= Rot(-m.x*TAU);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 0.5);\n    //vec3 col = mix(vec3(0.459,0.416,0.714),vec3(1.,0.898,0.898),rd.y*0.9)*0.6;\n   \n    vec4 rm = RayMarch(ro, rd);\n    float d = rm.x;\n    vec3 p = ro + rd * d;\n    vec3 col = sky(p,rd);\n\n    if(d<MAX_DIST) {\n        //col = rm.yzw;\n        vec3 n = GetNormal(p);\n        vec3 colXZ = texture(iChannel0, p.xz/2.0*.5+.5).rgb;\n        vec3 colYZ = texture(iChannel0, p.yz/2.0*.5+.5).rgb;\n        vec3 colXY = texture(iChannel0, p.xy/2.0*.5+.5).rgb;\n        col = colYZ*n.x+colXZ*n.y+colXY*n.z;\n        col *= 2.0;\n        vec3 l = lightPos;\n        l.xz = li;\n        col *= blinn_phong(p,l,ambientColor,lightColor,globalAmbient,globalDiffuse,globalSpecular,globalSpecularExponent,ro);\n        col *= ambientOcclusion(p+n*0.1,n);\n        col *= softshadow(p,l,0.1,50.);\n    }\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}