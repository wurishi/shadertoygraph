{"ver":"0.1","info":{"id":"XtyGzV","date":"1475436310","viewed":15867,"name":"wiggle demo","username":"mattz","description":"Demo using ease curve from [url]https://www.shadertoy.com/view/XlG3RV[/url].\n\nHit the 'A' key to toggle animation.","likes":10,"published":3,"flags":16,"usePreview":0,"tags":["wiggle","easecurve"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* wiggle demo, by mattz.\n   License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n   Demonstrate the use of a wiggle curve (see https://www.shadertoy.com/view/XlG3RV)\n   to animate each parameter of a homography (3D perspective transform) individually.\n\n*/\n\n\nfloat w(float u) {\n    return 27.0*(1.0 - 2.0*u)*u*u; \n}\n\nfloat wiggle(float u) {\n    return u < 0.5 ? w(u) : -w(1.0-u);\n}\n\n//First 8 letters from Andre's \"shadertext\" https://www.shadertoy.com/view/lddXzM\n\nfloat _o(vec2 uv) {\n    return abs(length(vec2(uv.x,max(0.,abs(uv.y)-.15)))-.25)+.4;\n}\n\nfloat _l(vec2 uv) {\n    uv.y -= .2;\n    return length(vec2(uv.x,max(0.,abs(uv.y)-.6)))+.4;\n}\nfloat _u(vec2 uv,float w,float v) {\n    return length(vec2(\n                abs(length(vec2(uv.x,\n                                max(0.0,-(.4-v)-uv.y) ))-w)\n               ,max(0.,uv.y-.4))) +.4;\n}\nfloat _i(vec2 uv) {\n    return length(vec2(uv.x,max(0.,abs(uv.y)-.4)))+.4;\n}\nfloat _j(vec2 uv) {\n    uv.x+=.2;\n    float t = _u(uv,.25,-.15);\n    float x = uv.x>0.?t:length(vec2(uv.x,uv.y+.8))+.4;\n    return x;\n}\n\n// Here is the alphabet\nfloat aa(vec2 uv) {\n    uv = -uv;\n    float x = abs(length(vec2(max(0.,abs(uv.x)-.05),uv.y-.2))-.2)+.4;\n    x = min(x,length(vec2(uv.x+.25,max(0.,abs(uv.y-.2)-.2)))+.4);\n    return min(x,(uv.x<0.?uv.y<0.:atan(uv.x,uv.y+0.15)>2.)?_o(uv):length(vec2(uv.x-.22734,uv.y+.254))+.4);\n}\nfloat bb(vec2 uv) {\n    float x = _o(uv);\n    uv.x += .25;\n    return min(x,_l(uv));\n}\nfloat cc(vec2 uv) {\n    float x = _o(uv);\n    uv.y= abs(uv.y);\n    return uv.x<0.||atan(uv.x,uv.y-0.15)<1.14?x:length(vec2(uv.x-.22734,uv.y-.254))+.4;\n}\nfloat dd(vec2 uv) {\n    uv.x *= -1.;\n    return bb(uv);\n}\nfloat ee(vec2 uv) {\n    float x = _o(uv);\n    return min(uv.x<0.||uv.y>.05||atan(uv.x,uv.y+0.15)>2.?x:length(vec2(uv.x-.22734,uv.y+.254))+.4,\n               length(vec2(max(0.,abs(uv.x)-.25),uv.y-.05))+.4);\n}\nfloat ff(vec2 uv) {\n    uv.x *= -1.;\n    uv.x += .05;\n    float x = _j(vec2(uv.x,-uv.y));\n    uv.y -= .4;\n    x = min(x,length(vec2(max(0.,abs(uv.x-.05)-.25),uv.y))+.4);\n    return x;\n}\nfloat gg(vec2 uv) {\n    float x = _o(uv);\n    return min(x,uv.x>0.||uv.y<-.65?_u(uv,0.25,-0.2):length(vec2(uv.x+0.25,uv.y+.65))+.4 );\n}\nfloat hh(vec2 uv) {\n    uv.y *= -1.;\n    float x = _u(uv,.25,.25);\n    uv.x += .25;\n    uv.y *= -1.;\n    return min(x,_l(uv));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    float scl = 40.0/iResolution.y;\n    vec2 uv = (fragCoord.xy - 0.5*iResolution.xy) * scl;\n    \n    float a = 1.0, b = 0.0, c = 0.0;\n    float d = 0.0, e = 1.0, f = 0.0;\n    float g = 0.0, h = 0.0;\n    \n    float t = mod(0.5*iTime, 8.0);\n    float ft = fract(t);\n    \n    vec2 textUV = fragCoord.xy - vec2(20, 50);\n    float textScl = 30.0;\n    float tol = 0.45;\n    float eps = 1.0/textScl;\n    \n\tfloat letter_dist = 100.0;\n    \n    if (t < 1.0) {\n        a -= wiggle(ft)*0.5;\n        letter_dist = aa(textUV/textScl);\n    } else if (t < 2.0) {\n        b -= wiggle(ft)*0.25;\n        letter_dist = bb(textUV/textScl);\n    } else if (t < 3.0) {\n        c -= wiggle(ft)*12.0;\n        letter_dist = cc(textUV/textScl);\n    } else if (t < 4.0) {\n        d -= wiggle(ft)*0.25;\n        letter_dist = dd(textUV/textScl);\n    } else if (t < 5.0) {\n        e -= wiggle(ft)*0.5;\n        letter_dist = ee(textUV/textScl);\n    } else if (t < 6.0) {\n        f -= wiggle(ft)*8.0;\n        letter_dist = ff(textUV/textScl);\n    } else if (t < 7.0) {\n        g -= wiggle(ft)*0.03;\n        letter_dist = gg(textUV/textScl);\n    } else {\n        h -= wiggle(ft)*0.04;\n        letter_dist = hh(textUV/textScl);\n    }\n        \n    mat3 H = mat3(a, d, g,\n                  b, e, h,\n                  c, f, 1.0);\n    \n    vec3 Huv = H * vec3(uv, 1.0);\n    \n    const vec2 nyanDims = vec2(40.0, 32.0);\n    vec2 texDims = iChannelResolution[0].xy;\n\n    vec2 tex = Huv.xy / Huv.z + 0.5*nyanDims;\n    \n   \ttex = clamp(tex, vec2(0.0), nyanDims);\n    \n\n    const float KEY_A = 65.5 / 256.0;\n    \n    float anim = texture(iChannel2, vec2(KEY_A, 0.75)).x;\n    \n    float frame = anim*floor(mod(6.0*iTime, 6.0));\n    \n    vec4 texColor = texture(iChannel0, (tex + nyanDims*vec2(frame, 0))/texDims);\n\t\n    fragColor = texture(iChannel1, uv*0.01 + vec2(0.4 + 0.1*anim*iTime, 0.5)).bgra;\n    fragColor.rgb = pow(fragColor.rgb, vec3(2.0));\n    \n\tfragColor.rgb = mix(fragColor.rgb, texColor.rgb, texColor.a);\n    \n    \n    \n    fragColor.rgb = mix(vec3(1.0), fragColor.rgb,smoothstep(0.0, eps, letter_dist-tol));\n    \n}","name":"Image","description":"","type":"image"}]}