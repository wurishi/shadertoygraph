{"ver":"0.1","info":{"id":"NlS3RR","date":"1623172915","viewed":64,"name":"Mandelbrot Try 1","username":"trashy","description":"This is probably poorly coded ðŸ˜…\nPossible TODOs:\n* Infinite/longer Zoom\n* Fix resolution at high zoom levels\n* Dynamic centerpoint\n\nCouldn't have done it without the Shiff\nhttps://www.youtube.com/watch?v=6z7GQewK-Ks","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_ITER 256.0 \n#define PI 3.14159265359\n#define MIN_X -2.0\n#define MAX_X  2.0\n#define MIN_Y -1.5\n#define MAX_Y  1.5\n\nprecision highp float;\n\n//  Function from IÃ±igo Quiles\n//  https://www.shadertoy.com/view/MsS3Wc\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                            6.0)-3.0)-1.0,\n                    0.0,\n                    1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\n\n// https://gist.github.com/companje/29408948f1e8be54dd5733a74ca49bb9\nfloat map(float value, float min1, float max1, float min2, float max2) {\n    return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nfloat crosshair(vec2 st, vec2 m) {\n    return (step(st.x-0.001, m.x) - step(st.x+0.001, m.x)) + (step(st.y-0.002, m.y) - step(st.y+0.002, m.y));\n}\n\n//map 0-1 to mandelbrot space\nvec2 normalToMandelCoord(vec2 norm, vec2 center, float zoom) {\n    return center + vec2(\n        map(norm.x, 0.0, 1.0, MIN_X, MAX_X),\n        map(norm.y, 0.0, 1.0, MIN_Y, MAX_Y)\n     ) / zoom;\n}\n\n//map mandelbrot space to 0-1\nvec2 mandelToNormalCoord(vec2 norm, float zoom) {\n    return vec2(\n        map(norm.x, MIN_X/zoom, MAX_X/zoom, 0.0, 1.0),\n        map(norm.y, MIN_Y/zoom, MAX_Y/zoom, 0.0, 1.0)\n     );\n}\n\n        \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 st = fragCoord/iResolution.xy;\n    //vec2 m = iMouse.xy/iResolution.xy;\n    \n    //resolution breaks at ~38 seconds\n    float maxZoomTime = (1.0 + sin(iTime/72.0 * PI*2.0 - PI/2.0))*18.0;\n\n    //float zoom = 2.0;\n    //float zoom = 1.25 + sin(iTime) * 0.25;\n    float zoom = 0.1 + pow(maxZoomTime, maxZoomTime/10.0);\n    \n    //I want to zoom to this point ðŸ¤”\n    vec2 center = vec2(-0.745156, 0.112574);\n    vec2 stCoords = normalToMandelCoord(st, center, zoom);\n    \n    float a = stCoords.x;\n    float b = stCoords.y;\n\n    float ca = a;\n    float cb = b;\n    float n = 0.0;\n    \n    for(float i=0.0;i<MAX_ITER;i++) {\n        float real = pow(a, 2.0) - pow(b, 2.0);\n        float imag = 2.0 * a * b;\n\n        a = real + ca;\n        b = imag + cb;\n        n = i;\n\n        if(a*a + b*b > 4.0) break;\n    }\n    //while is not working on iOS ðŸ¤”\n    //} while(abs(a + b) < 4.0 && n < MAX_ITER);\n\n    vec3 color = hsb2rgb( vec3((n/MAX_ITER), 1.0, 1.0 - (n/MAX_ITER)) );\n    \n    //color += crosshair(st, mandelToNormalCoord(center, zoom))*0.4;\n\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}