{"ver":"0.1","info":{"id":"tlByzD","date":"1594884799","viewed":145,"name":"Shader实验室:fragment drawing","username":"zhengxiangkui","description":"Use mathematical functions to draw in fragment Shader。更多Shader实验可关注知乎App “Shader实验室”","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["math","tutorial","text","draw"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// text color\nvec4 textColor = vec4(1.,1.,1.,1.);\n// Draw the head\nvec4 drawHead(vec2 uv, vec4 color) {\n    vec4 resCol = color;\n\tvec2 headUv = uv;\n    vec4 hatCol = vec4(.7,0.1,0.1,1.);\n    vec4 hatLineCol = vec4(1.);\n    \n\n    float headTLineF = abs(pow(headUv.x, 2.)/pow(3.04,2.)+pow((headUv.y-2.125), 2.)/pow(2.14, 2.));\n    float headTLine = smoothstep(1.0, 0.9, headTLineF);\n    resCol = mix(resCol, hatLineCol, headTLine);\n    float hatLerp = smoothstep(1.0, 0.9, abs(pow(headUv.x, 2.)/pow(1.5,2.)+pow(headUv.y-3.25, 2.)));\n    resCol = mix(resCol, hatCol, hatLerp);\n    \n    if(2.45<abs(headUv.x) && abs(headUv.x)<=3.1) {\n        float headLAndR = smoothstep(0.04,0.05,0.56*sqrt((1.-pow((headUv.y-2.13)/1.13, 2.)))+ 2.45 - abs(headUv.x));\n        resCol = mix(resCol, hatCol, headLAndR);\n    }\n    \n    return resCol;\n}\n// Draw the face\nvec4 drawFace(vec2 uv, vec4 color) {\n\tvec4 resColor = color;\n    vec2 faceUv = uv;\n    vec4 faceLineCol = vec4(0.0);\n    vec4 faceFillCol = vec4(1.);\n    if(faceUv.y >= 0.18) {\n       float faceTLineF = sqrt(1.-(pow(faceUv.x,2.)/1.62))+0.1 - faceUv.y;\n       float faceTLine = smoothstep(0.03, 0.02, abs(faceTLineF));\n       resColor = mix(resColor, faceLineCol, faceTLine);\n    }\n    if(faceUv.y<=0.783) {\n       float faceBLineF = length(pow(faceUv.x, 2.) + pow(faceUv.y-0.1, 2.));\n       float faceBLine = smoothstep(1.5, 1.49, abs(faceBLineF));\n       resColor = mix(resColor, faceFillCol, faceBLine);\n    }\n    \n    float faceEyeOutF = pow(abs(faceUv.x) - 0.5, 2.)/pow(0.15,2.)+pow(faceUv.y-0.52, 2.)/pow(0.23,2.) - 1.;\n    float faceEyeOut = smoothstep(0.4, 0.02, abs(faceEyeOutF));\n    resColor = mix(resColor, faceLineCol, faceEyeOut);\n    float faceEyeInF = abs(pow(abs(faceUv.x)-0.5, 2.)+pow(faceUv.y-0.52,2.)-1./100.);\n    float faceEyeIn = smoothstep(0.006, 0.004, abs(faceEyeInF));\n    resColor = mix(resColor, faceLineCol, faceEyeIn);\n    if(faceUv.x>= -0.55 && faceUv.x<=0.55) {\n    \tfloat smouthTLineF = abs(-0.625 * sqrt(1.-pow(faceUv.x, 2.))+0.3 - faceUv.y);\n    \tfloat smouthTLine = smoothstep(0.03, 0.02,smouthTLineF);\n        resColor = mix(resColor, faceLineCol, smouthTLine);\n    }\n    if(faceUv.y <= -0.222) {\n    \tfloat smouthBLineF = abs(1.75*pow(faceUv.x,2.)-0.8-faceUv.y);\n        float smouthBLine = smoothstep(0.03, 0.02, smouthBLineF);\n        resColor = mix(resColor, faceLineCol, smouthBLine);\n    }\n    if(faceUv.y>=-0.73 && faceUv.y<=-0.5) {\n    \tfloat smouthILineF = abs(0.2*sqrt(1.-pow(faceUv.x,2.)/0.04)-0.7-faceUv.y);\n        float smouthILine = smoothstep(.1, 0.12, smouthILineF);\n        resColor = mix(resColor, vec4(.7,0.1,0.1,1.), smouthILine);\n    }\n    return resColor;\n\n}\n\nvoid _drawLine(float coord, float s, float t, float c1, float c2, inout vec4 res) {\n\t// The limit is between s and t\n    float st = step(s, c1) - step(t, c1);\n    float stV = coord - c2;\n    float str = step(abs(stV), 0.06);\n    res = mix(res, textColor,str*st);\n}\n\nvoid _drawSlash(float k, float x, float y, float b, float minV, float maxV, float bold, inout vec4 res) {\n    // The limit is between minV and maxV\n    float sl = step(minV, y) - step(maxV, y);\n    float slV = k * x + b - y;\n    float slr = step(abs(slV), bold);\n    res = mix(res, textColor,slr*sl);\n}\n// draw the text\nvec4 drawText(vec2 fragCoord, vec4 color) {\n    float a = sin(iTime)+4.5;\n    float b = cos(iTime)+ 11.;\n\tvec4 resColor = color;\n    vec2 uv = 8.*(2.0 * fragCoord-iResolution.xy)/iResolution.y;\n    \n    float sl = -0.4 * sqrt(1. - pow(uv.y-7.+b, 2.)/0.2) - 6. - a - uv.x;\n    float slV = smoothstep(0.2, 0.1, abs(sl));\n    resColor = mix(resColor, textColor, slV);\n    \n    float sr = 0.4 * sqrt(1. - pow(uv.y-6.1+b, 2.)/0.2) - 6. - a - uv.x;\n    float srV = smoothstep(0.2, 0.1, abs(sr));\n    resColor = mix(resColor, textColor, srV);\n    \n    _drawLine(7.375-b, -6.28-a, -5.7 - a, uv.x, uv.y, resColor);\n    _drawLine(5.73-b, -6.3-a, -5.8 - a, uv.x, uv.y, resColor);\n    _drawLine(-4.58-a, 5.658-b, 7.445 - b, uv.y, uv.x, resColor);\n    _drawLine(6.56-b, -4.58-a, -3.75 - a, uv.x, uv.y, resColor);\n    _drawLine(-3.75-a, 5.658-b, 7.445 - b, uv.y, uv.x, resColor);\n    // A\n    if(uv.y >= 5.658 - b) {\n    \tfloat at = -2.5*abs(uv.x+2.2+a)+7.42-b-uv.y;\n        float atV = smoothstep(0.2, 0.1, abs(at));\n    \tresColor = mix(resColor, textColor, atV);\n    }\n    _drawLine(6.56-b, -2.544-a, -1.856-a, uv.x, uv.y, resColor);\n    // D\n    _drawLine(-0.5 - a, 5.76-b, 7.35-b, uv.y, uv.x, resColor);\n    \n    float dr = sqrt(1.- pow((uv.y-6.56+b), 2.)/0.64)-0.5-a-uv.x;\n    float drV = smoothstep(0.2, 0.1, abs(dr));\n    resColor = mix(resColor, textColor, drV);\n    // E\n    _drawLine(7.28 - b, 1.5-a, 2.5-a, uv.x, uv.y, resColor);\n    _drawLine(6.56 - b, 1.5-a, 2.5-a, uv.x, uv.y, resColor);\n    _drawLine(5.76 - b, 1.5-a, 2.5-a, uv.x, uv.y, resColor);\n    _drawLine(1.5 - a, 5.76-b, 7.28-b, uv.y, uv.x, resColor);\n    // R\n    _drawLine(3.5 - a, 5.65-b, 7.28-b, uv.y, uv.x, resColor);\n    if(uv.x>=3.5-a) {\n        float rl = -200.*pow((uv.y-6.8+b), 8.)+4.5-a-uv.x;\n        float rlv = smoothstep(0.2, 0.1, abs(rl));\n        resColor = mix(resColor, textColor, rlv);\n    }\n    _drawSlash(-1., uv.x+a, uv.y, 10.5-b, 5.65-b, 6.35-b, 0.15, resColor);\n    \n    // 实\n    _drawSlash(-2., uv.x-7.+a, uv.y, 7.9-b, 7.9-b, 8.22-b, 0.15, resColor);\n    _drawSlash(-7., uv.x-6.+a, uv.y, 7.8-b, 7.2-b, 7.7-b, 0.4, resColor);\n    _drawLine(7.7 - b, 6.-a, 8.-a, uv.x, uv.y, resColor);\n    _drawSlash(9., uv.x-8.+a, uv.y, 7.7-b, 7.2-b, 7.7-b, 0.4, resColor);\n    _drawSlash(-1., uv.x-6.5+a, uv.y, 7.2-b, 6.9-b, 7.2-b, 0.1, resColor);\n    _drawSlash(-1., uv.x-6.4+a, uv.y, 7.-b, 6.7-b, 7.-b, 0.1, resColor);\n    _drawLine(6.6-b, 6.-a, 8.-a, uv.x, uv.y, resColor);\n    _drawSlash(2., uv.x-7.+a, uv.y, 6.6-b, 5.65-b, 7.2-b, 0.15, resColor);\n    _drawSlash(-2., uv.x-7.+a, uv.y, 6.6-b, 5.65-b, 6.6-b, 0.15, resColor);\n    // 验\n    _drawLine(7.7 - b, 9.4-a, 10.4-a, uv.x, uv.y, resColor);\n    _drawLine(10.4 - a, 7.-b, 7.7-b, uv.y, uv.x, resColor);\n    _drawLine(9.5 - a, 6.6-b, 7.7-b, uv.y, uv.x, resColor);\n    _drawLine(6.6 - b, 9.5-a, 10.4-a, uv.x, uv.y, resColor);\n    _drawLine(10.4 - a, 5.7-b, 6.6-b, uv.y, uv.x, resColor);\n    _drawSlash(-1., uv.x-10.4+a, uv.y, 5.7-b, 5.7-b, 6.-b, 0.1, resColor);\n    _drawSlash(.2, uv.x-10.4+a, uv.y, 6.3-b, 6.12-b, 6.3-b, 0.03, resColor);\n    if(uv.y > 7.-b) {\n    \tfloat yr = -1.*abs(1.3*(uv.x-11.5+a))+8.-b-uv.y;\n        float yrV = smoothstep(0.2, 0.1, abs(yr));\n        resColor = mix(resColor, textColor, yrV);\n    }\n    _drawLine(-2.2+9.-b, 11.-a, 12.-a, uv.x, uv.y, resColor);\n    _drawSlash(-2., uv.x-11.+a, uv.y, -2.7+9.-b, 6.-b, 6.4-b, 0.1, resColor);\n    _drawSlash(-2., uv.x-11.5+a, uv.y, -2.7+9.-b, 6.-b, 6.4-b, 0.1, resColor);\n    _drawSlash(2., uv.x-12.+a, uv.y, -2.7+9.-b, 6.-b, 6.4-b, 0.1, resColor);\n    _drawLine(5.8 - b, 10.9-a, 12.2-a, uv.x, uv.y, resColor);\n    // 室\n    _drawSlash(-2., uv.x-14.7+a, uv.y, 7.9-b, 7.9-b, 8.22-b, 0.1, resColor);\n    _drawSlash(-7., uv.x-13.5+a, uv.y, 7.8-b, 7.2-b, 7.7-b, 0.4, resColor);\n    _drawLine(7.7 - b, 13.5-a, 15.5-a, uv.x, uv.y, resColor);\n    _drawSlash(9., uv.x-15.5+a, uv.y, 7.7-b, 7.2-b, 7.7-b, 0.4, resColor);\n    _drawLine(7.2 - b, 13.9-a, 15.1-a, uv.x, uv.y, resColor);\n    _drawSlash(1.8, uv.x-14.3+a, uv.y, 7.2-b, 6.7-b, 7.2-b, 0.2, resColor);\n    _drawLine(6.7 - b, 14.-a, 15.-a, uv.x, uv.y, resColor);\n    _drawSlash(1.8, uv.x-14.3+a, uv.y, 7.2-b, 6.7-b, 7.2-b, 0.2, resColor);\n    _drawSlash(-1., uv.x-15.+a, uv.y, 6.7-b, 6.6-b, 6.9-b, 0.1, resColor);\n    _drawLine(6.22 - b, 14.-a, 15.-a, uv.x, uv.y, resColor);\n    _drawLine(5.8 - b, 13.8-a, 15.3-a, uv.x, uv.y, resColor);\n    _drawLine(14.5 - a, 5.8-b, 6.5-b, uv.y, uv.x, resColor);\n    return resColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates\n    vec2 uv = 5.*(2.0 * fragCoord-iResolution.xy)/iResolution.y;\n    vec4 col = vec4(0.,0.,0.,0.);\n    textColor = vec4(abs(sin(iTime)),abs(cos(iTime)+sin(iTime)),abs(cos(iTime)),1.);\n\tvec4 res = drawHead(uv, col);\n    res = drawFace(uv, res);\n    res = drawText(fragCoord, res);\n    // Output to screen\n    fragColor = res;\n}","name":"Image","description":"","type":"image"}]}