{"ver":"0.1","info":{"id":"XsGBRK","date":"1529434515","viewed":507,"name":"Simple Shaded Sphere","username":"Zeppelin7","description":"A simple shaded sphere with softening around the edges.","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["beginner","sphere","shaded"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 calc(float, vec2);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv -= vec2(0.5,0.5);\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 col;\n    float r = length(uv);\n    float c;\n    \n    \n    \n    if (r < 0.2) {\n        col = calc(r, uv);\n    }\n    \n    else {\n        vec3 on = calc(r, uv);\n        \n        vec3 off = vec3(0.);\n        \n        float mixFactor = smoothstep(0.2,0.21,r);\n        //float mixFactor = 0.; -> interesting effect\n        \n        col = mix(on, off, mixFactor);\n    }\n    \n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\nvec3 calc(float r, vec2 uv) {\n    vec3 col;\n    float c;\n    \n    float lightX = sin(iTime);\n    float lightY = cos(iTime);\n    \n    vec3 light = normalize(vec3(lightX,lightY,0.7));\n    \n    float h;\n    \n    //r==0.2 creates an interesting effect\n    (r<0.2)? h = sqrt(0.04-pow(r,2.)) : h = 0.;\n    \n    vec3 n = normalize(vec3(uv.x,uv.y,h));\n\n    c = dot(n, light);\n\n    c = clamp(c,0.05,1.);\n    \n    col = vec3(c);\n    \n    return col;\n}","name":"Image","description":"","type":"image"}]}