{"ver":"0.1","info":{"id":"NtGXzw","date":"1640315956","viewed":128,"name":"SnowFlake  Generator","username":"plosique","description":"a hexagonal snowflake generator. Parameters are set in the common section or via the mouse. ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["christmas","geometry"],"hasliked":0,"parentid":"flySzw","parentname":"SnowFlake Generator"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 white = vec3(1.);\nconst vec3 black = vec3(0.);\n\n\n\n#define S(v,v0,r)  smoothstep( 1.5/R.y, -1.5/R.y, length(v-(v0)) - (r) ) \n\n\nvec2 rotate(vec2 uv,float theta){\n    return vec2(cos(theta)*uv.x-sin(theta)*uv.y,sin(theta)*uv.x+cos(theta)*uv.y); \n}\n\n\nvec2 map2Triangle(vec2 uv){\n     float theta = atan(uv.y,uv.x); \n     theta=mod(theta,pi/3.);\n     \n     return vec2(length(uv)*cos(theta),length(uv)*sin(theta));\n    \n}\n\nbool inCircle(vec2 c, float radius, vec2 point){\n    return length(c - point) <= radius;\n}\n\nvec2 op(vec2 uv,float angle,float dist){\n    return rotate(vec2(uv.x - 0.5*dist,abs(uv.y)),-angle); \n}\n\nfloat smoothjump(float lval,float rval,float x){ \n    float pixWidth = 1./iResolution.y;\n    return smoothstep(lval-pixWidth,lval,x) - smoothstep(rval,rval+pixWidth,x);; \n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;  \n    \n    \n    // Normalize Mouse coordinates (from 0 to 1) \n    vec2 mouse = iMouse.xy/iResolution.y; \n    \n    angle = 2.*pi*mouse.y; \n    distanceMultiplier = mouse.x; \n    \n    \n    vec2 uvn = map2Triangle(uv); \n    uvn = rotate(uvn,-pi/6.);\n    \n    float dist  = initialDistance;\n    float thick = initialThickness; \n     \n    bool isWhite = false;\n    float whiteness = 0.; \n    \n    for(int i=1;i<=depth; i++){\n        //isWhite = isWhite || (uvn.x<=dist && abs(uvn.y)<=thick);\n        \n        //whiteness = smoothjump(-thick,thick,uvn.y); \n        whiteness = whiteness + smoothjump(-thick,thick,uvn.y)*smoothjump(0.,dist,uvn.x); \n        \n        uvn = op(uvn,angle,dist); \n        dist = dist*distanceMultiplier; \n        thick = thick*thicknessMultiplier; \n        \n    }\n\n    \n    vec3 col;\n    if(isWhite){\n        col = white;  \n    }else{\n        col = black; \n    }\n    \n    col = vec3(whiteness); \n   \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//parameters\nint depth = 20;\nfloat initialThickness = .02;\nfloat thicknessMultiplier = .75;\n\nfloat initialDistance = 0.7;\nfloat distanceMultiplier = 0.5;//mouse.x (0 to 1)\n\nconst float pi = acos(-1.); \nfloat angle = 3.*pi/5.; //mouse.y (0 to 2 pi) \n\n\n\n\n","name":"Common","description":"","type":"common"}]}