{"ver":"0.1","info":{"id":"wsyXRy","date":"1574277053","viewed":153,"name":"Night sky by robotj","username":"robotjatek","description":"Sky at night","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sky","stars","night","starry"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 topColor = vec3(0,0,0.0);\nconst vec3 bottomColor = vec3(0,0,0.2);\nconst float topTransientCoord = 0.6;\nconst float bottomTransientCoord = 0.2;\nconst float starCutoff = 0.9995f;\n\nfloat rand(vec2 uv)\n{    \n    float ret = fract(abs(sin(uv.x * 542.0f + uv.y * 736.f) * 1112.0));\n    return ret;\n}\n\nfloat Noise(vec2 uv)\n{\n    vec2 r = vec2(floor(uv));\n    vec2 r1 = vec2(floor(uv) + vec2(1,0));\n    vec2 r2 = vec2(floor(uv) + vec2(0,1));\n    vec2 r3 = vec2(floor(uv) + vec2(1,1));\n    \n    float c = rand(r.xy);\n    float c1 = rand(r1.xy);\n    float c2 = rand(r2.xy);\n    float c3 = rand(r3.xy);\n\n    float i = mix(c, c1, smoothstep(0.,1.,fract(uv.x)));\n    float i1 = mix(c2, c3, smoothstep(0.,1.,fract(uv.x)));\n    \n    float z = mix(i, i1, smoothstep(0.,1.,fract(uv.y)));\n    \n    return z;\n}\n\nfloat layeredNoise(vec2 uv)\n{\n    float z = 0.0;\n    z += Noise(uv * 4.0);\n    z+= Noise(uv * 8.0) * 0.5;\n    z+= Noise(uv * 16.0) * 0.25;\n    z+= Noise(uv * 32.0) * 0.125;\n    z+= Noise(uv * 64.0) * 0.0625;\n    z+= Noise(uv * 128.0) * 0.03125;\n    z *= 0.5;\n    return z;\n}\n\nvec3 star(vec2 uv)\n{\n    vec3 col = vec3(rand(uv));\n    if(col.r < starCutoff || uv.y < bottomTransientCoord)\n    {\n        col = vec3(0);\n    }\n    return col;\n}\n\n\nvec3 clouds(vec2 uv)\n{\n    const float cutOff = 0.5;\n    vec3 col = vec3(0);\n\n    float val = layeredNoise(uv);\n    col = vec3(val - cutOff) / cutOff;\n    if(val < cutOff)\n    {\n        col = vec3(0);\n    };\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col;\n    if(uv.y < bottomTransientCoord)\n    {\n        col = bottomColor;\n    }\n    else if(uv.y >= bottomTransientCoord && uv.y < topTransientCoord)\n    {\n        const float transientLength = topTransientCoord - bottomTransientCoord;\n        float scaledTransientCoordinate = (uv.y - bottomTransientCoord) / transientLength;\n        col = mix(bottomColor, topColor, smoothstep(0.0,1.0,scaledTransientCoordinate));\n    }\n    else\n    {\n        col = topColor;\n    }\n    \n    col += star(uv);\n    col.r += clouds(uv).r;\n   \n    // Output to screen\n    fragColor = vec4(clamp(col, vec3(0), vec3(1)),1.0);\n}","name":"Image","description":"","type":"image"}]}