{"ver":"0.1","info":{"id":"3tByDW","date":"1594304641","viewed":178,"name":"Under ground","username":"gaz","description":"fractal","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Data {\n    float interval;\n    vec3 pos0, pos1, dir0, dir1;\n};\n\nData data[] = Data[]( \n\tData(9., vec3(.3,1,-1),   vec3(0,.5,0),   vec3(1,0,1),  vec3(0,1,1)),\n    Data(8., vec3(0,.3,.6),   vec3(0,0,.6),   vec3(0,1,1),  vec3(1,1,1)),\n    Data(8., vec3(0,0,.4),    vec3(0,0,1.2),  vec3(1,0,-1), vec3(1,1,1)),\n    Data(8., vec3(-.8,.4,.6), vec3(-.5,.6,0), vec3(0,0,1),  vec3(1,0,1)),\n    Data(8., vec3(0,.4,.7),   vec3(.4,0,.7),  vec3(1,-1,0), vec3(0,1,1)),\n    Data(7., vec3(.8,.6,.3),  vec3(.2,-.8,0), vec3(1,0,1),  vec3(0,1,1))\n);\n\n#define PI acos(-1.)\n#define TAU PI*2.\n#define PIH PI*.5\n#define pmod(p,n)length(p)*sin(vec2(0.,PIH)+mod(atan(p.y,p.x),TAU/n)-PI/n)\n#define fold(p,v)p-2.*min(0.,dot(p,v))*v;\n\nfloat map(vec3 p)\n{\n\tfloat s = 1.0;\n    p.z=fract(p.z)-.5;\n\tfor(int i=0;i<20;i++)\n\t{\n\t    p.y += .15;\n\t    p.xz = abs(p.xz);\n\t    for(int j=0;j<2;j++)\n        {\n\t        p.xy = pmod(p.xy,8.);\n\t        p.y -= .18;\n\t    }\n\t    p.xy = fold(p.xy,normalize(vec2(1,-.8)));\n\t\tp.y = -abs(p.y);\n\t\tp.y += .4;\n\t    p.yz = fold(p.yz,normalize(vec2(3,-1)));\n\t\tp.x -= .47;\n\t\tp.yz = fold(p.yz,normalize(vec2(2,-7)));\n\t\tp -= vec3(1.7,.4,0);\n        float r2= 3.58/dot(p,p);\n        p *= r2;\n\t\tp += vec3(1.8,.7,.0);\n\t\ts *= r2;\n\t}\n\treturn length(p)/s;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int idx, size = data.length();\n\tfloat sam = 0.;\n    for(int i=0; i<size; i++) sam += data[i].interval;\n    float time = mod(iTime,sam);\n    sam = 0.;\n    for(idx=0; idx<size && time>sam; idx++)\n        sam += data[idx].interval;\n    Data P = data[idx-1];\n    float t = (time-sam+P.interval)/P.interval;\n    const float zoom = 3.;\n\tvec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    vec3 ro = mix(P.pos0, P.pos1, t)*zoom,\n          w = normalize(mix(P.dir0, P.dir1, t)),\n          u = normalize(cross(w,vec3(0,1,0))),\n         rd = mat3(u,cross(u,w),w)*normalize(vec3(uv,2));\n    float h = 0.0,d,i;\n    vec3 p;\n    for(i=1.;i<100.;i++)\n    {\n        p = ro+rd*h;\n        p /= zoom;\n\t    d = map(p);\n        if(d<0.001)break;\n        h += d;\n    }\n\tfragColor.xyz=30.*vec3(cos(p*1.5)*.5+.5)/i;\n}\n","name":"Image","description":"","type":"image"}]}