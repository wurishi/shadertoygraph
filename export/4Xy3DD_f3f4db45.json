{"ver":"0.1","info":{"id":"4Xy3DD","date":"1717698269","viewed":63,"name":"Simple Quantizer","username":"oops","description":"basic color quantization","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["quantize"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float scale          = 5.0;\nconst int   QuantizeAmount = 4;\n\nvec3 Quantize(vec3 color, int amount){\n\tfloat scale = exp2(float(amount)) - 1.0;\n\treturn floor(color * scale + 0.5f) / scale;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    // (not) Normalized pixel coordinates (from 0 to scale)\n    vec2 uv = fragCoord / iResolution.xy * scale;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0, 2, 4));\n\n    // Output to screen\n    fragColor = vec4(vec3(Quantize(col, QuantizeAmount)), 1.0);\n}","name":"Image","description":"","type":"image"}]}