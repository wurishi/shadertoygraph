{"ver":"0.1","info":{"id":"4fcXzn","date":"1713465978","viewed":64,"name":"T_Tech_Dot_N","username":"MichaelPohoreski","description":"Recreating UE5's T_Tech_Dot_N normal texture.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["triplanar","sphere","normal","normalmapping","ue5","unrealengine"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nUE5 Tech Dot N\nCopyleft {C} Michaelangel007\nInspired/recreated from:\n\n* Your Triplanar is wrong. Here's how to make one that works. [UE5]\n  https://youtu.be/Cq5H59G-DHI?t=307\n\nRelated:\n\n* https://en.wikipedia.org/wiki/Normal_mapping\n  Specifically, \n  https://upload.wikimedia.org/wikipedia/commons/2/2e/Normal_map_example_with_scene_and_result.png\n  On line 24 change\n    from: FLIP_Y 1\n      to: FLIP_Y 0\n\nAlso see:\n\n* Shader Fundamentals - Normal Mapping\n  https://youtu.be/6_-NNKc4lrk?t=308\n*/\n//#define SphereNormal SphereNormalNew\n//#define SphereNormal SphereNormalOld\n#define SphereNormal SphereNormalTest\n#define FLIP_Y  1\n#define CORNERS 1\n#define DEBUG_R 0\n#define DEBUG_G 0\n#define DEBUG_B 0\n#define DEBUG_N 0\n\n#if DEBUG_N\n  #undef  CORNERS\n  #define CORNERS 0\n#endif\n\n\n\n// Normal -> Color\nvec3 VisualizeNormal( vec3 n )\n{\n    vec3 c = (n * 0.5) + 0.5; // [-1 .. +1] -> [0 .. 1]\n    return c;\n}\n\n// Color -> Normal\nvec3 NormalizeColor( vec3 c )\n{\n    vec3 n = (c - 0.5) * 2.0; // [0 .. 1] -> [-1 .. +1]\n    return n;\n}\n\nvec3 SphereNormalTest( vec2 p, float r )\n{\n#if FLIP_Y\n    vec3 n = vec3(p.x, -p.y, 1.0);\n#else\n    vec3 n = vec3(p.x,  p.y, 1.0);\n#endif\n    n = normalize(n);\n    n = ((n+r) * 0.5) / r; // [-r .. 0 .. +r] -> [0 .. 0.5 .. 1]\n    n.z = cos(sqrt(p.x*p.x + p.y*p.y) / r);\n    return n;\n}\n\n// @param p 2D point\n// @param r radius\nvec3 SphereNormalNew( vec2 p, float r )\n{\n#if FLIP_Y\n    vec3 n = vec3(p.x, -p.y, 0.0);\n#else\n    vec3 n = vec3(p.x,  p.y, 0.0);\n#endif\n    n = ((n+r) * 0.5) / r; // [-r .. 0 .. +r] -> [0 .. 0.5 .. 1]\n    n.z = cos(sqrt(p.x*p.x + p.y*p.y) / r);\n\n#if DEBUG_N\n    float d = length(n);\n    if (d > 1.0) return vec3(0.);\n#endif\n\n    n = normalize(n);\n    return n;\n}\n\n// @param p 2D point\n// @param r radius\nvec3 SphereNormalOld( vec2 p, float r )\n{\n    vec3 n = vec3(0.0, 0.0, 0.0);\n#if FLIP_Y\n    n.x =        (p.x + r)  * 0.5 / r ; // [-r .. 0 .. +r] -> [0 .. 0.5 .. 1]\n    n.y = 1.0 - ((p.y + r)  * 0.5 / r); // [-r .. 0 .. +r] -> [1 .. 0.5 .. 0]\n#else\n    n.x =        (p.x + r)  * 0.5 / r ; // [-r .. 0 .. +r] -> [0 .. 0.5 .. 1]\n    n.y =        (p.y + r)  * 0.5 / r ; // [-r .. 0 .. +r] -> [0 .. 0.5 .. 1]\n#endif\n    n.z =cos(sqrt(p.x*p.x + p.y*p.y)/r); // [-r .. 0 .. +r] -> [0 .. 1.0 .. 0]\n    n = normalize(n);\n    vec3 col = n;\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2  p = (2.0*fragCoord-iResolution.xy)/iResolution.y; // [-1..+1]\n    vec3 col = VisualizeNormal( vec3(0., 0., 1.) ); // +Z = 0.5, 0.5, 1.0\n\n    float radius = 0.65;\n#if DEBUG_N\n    radius = 1.0;\n#endif\n    //r = mod( (iTime / 10.0), 1.);\n\n    vec2 m = (2.0*iMouse.xy - iResolution.xy) / iResolution.y;\n    float q = sqrt(m.x*m.x + m.y*m.y);\n#if DEBUG_N\n    if (iMouse.z > 0.5)\n        radius = q;\n#endif\n    radius = min( abs(radius), 1.0 );\n\n    vec2 t = p; // center\n    if (sqrt(dot(t,t)) < radius)\n        col = SphereNormal(t, radius);\n\n#if CORNERS\n    t = p - vec2(1.0,1.0); // top right\n    if (sqrt(dot(t,t)) < radius)\n        col = SphereNormal( t, radius );\n\n    t = p - vec2( 1.0,-1.0); // bottom right\n    if (sqrt(dot(t,t)) < radius)\n        col = SphereNormal( t, radius );\n\n    t = p - vec2(-1.0,1.0); // top left\n    if (sqrt(dot(t,t)) < radius)\n        col = SphereNormal( t, radius );\n\n    t = p - vec2( -1.0,-1.0); // bottom left;\n    if (sqrt(dot(t,t)) < radius)\n        col = SphereNormal( t, radius );\n#endif\n\n    // mask off square\n    if (p.x < -1.0) col = vec3(0.0,0.0,0.0);\n    if (p.x > +1.0) col = vec3(0.0,0.0,0.0);\n\n    // Output to screen\n    vec3 mask = vec3( 1.0 );\n#if DEBUG_R\n    mask = vec3( 1.0, 0.0, 0.0 );\n#endif\n#if DEBUG_G\n    mask = vec3( 0.0, 1.0, 0.0 );\n#endif\n#if DEBUG_B\n    mask = vec3( 0.0, 0.0, 1.0 );\n#endif\n    col *= mask;\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}