{"ver":"0.1","info":{"id":"ltVcDG","date":"1537580812","viewed":820,"name":"Amsterdam","username":"tqle","description":"Project on Spheres","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["spheres"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Rotation\nmat2 rot(float a) {\n    return mat2(cos(a), -sin(a),\n                sin(a), cos(a));\n}\n//Changing vector p\nvoid pMod(inout vec3 p, vec3 rad) {\n\tp = mod(p + rad*0.5, rad) - rad*.5;\n}\n//Create spheres\nfloat sphere(vec3 p, float rad) {\n    return length(p) - rad;\n}\n\n//Map distance\nfloat map(vec3 p) {\n    vec3 q = p;\n\n    pMod(q, vec3(0.75, 1., 0.8));\n    \n    float s1 = sphere(p, sin(iTime)); \n    float s2 = sphere(q, .5);\n    \n    float disp = .75 * (p.x *\n                       p.y *\n                       p.z);\n    s1 += disp;\n\treturn min(s1, s2); //return union    \n}\n\n//Trace\nfloat trace(vec3 origin, vec3 ray) \n{\n  float disp = 0.0;\n    for (int i = 0; i < 128; ++i) {\n        vec3 p = origin + ray * disp;\n        float d = map(p);\n        disp += d*.05;\n        }\n    return disp;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 color = vec3(0.924, 0.24, 0.336);\n    uv = uv *2.-1.; // Remap the space to -1. to 1.\n    uv.x *= iResolution.x/iResolution.y;\n    \n    \t\n   \tfloat FOV = cos(iTime)*.75;\n   \tvec3 ray = normalize(vec3(uv, FOV));\n    \n    \n    vec3 og = vec3(iTime, 0.0, -1.75);\n    float tr = trace(og, ray);\n    //Other experiments\n    //tr -= smoothstep(.5, tan(iTime), sin(iTime)*length(uv));\n    //tr *= 1.- smoothstep(.1, sin(iTime), length(uv));\n    float expFog = 0.5 / (tr*tr* 0.45); //fog\n    vec3 fc = vec3(expFog); //instantiating fog\n    \n    fragColor = vec4(cos(fc*cos(iTime)+color),sin(iTime)*1.2);\n}","name":"Image","description":"","type":"image"}]}