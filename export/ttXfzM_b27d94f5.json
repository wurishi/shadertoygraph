{"ver":"0.1","info":{"id":"ttXfzM","date":"1596315369","viewed":172,"name":"Liquid Cellular Automata","username":"alexmalyutndev","description":"Liquid Cellular Automata","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["liquid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float f(float x)\n{\n\treturn sqrt(1. - (x - 1.) * (x - 1.));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float high = texture(iChannel0, uv).r;\n    high = sqrt(high);\n    fragColor = vec4(high, high, high, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI 3.14159265\n#define STEPS 1\n#define FLUIDITY 0.01\n\n// Form funcs\nfloat f0(float x) { return x*x * 0.5 + 0.5; }\nfloat f1(float x) { return 1. - sqrt(1. - x * x); }\nfloat f(float x) { return f0(x); }\n\n// Helpers\nfloat lerp(float a, float b, float t) { return (1. - t) * a + t * b; }\nfloat saturate(float a) { return clamp(a, 0., 1.); }\n\n//Main\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 force = vec2(0., -1.);\n   \tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float level = texture(iChannel0, uv).r;\n   \n    vec2 offset;\n    float neibour;\n    float l = level;\n    const float steps = 3.;\n    \n    for (float y = -steps; y <= steps; y++)\n    {\n        for (float x = -steps; x <= steps; x++)\n        {\n            if (abs(x) + abs(y) < 0.1)\n                continue;\n            \n            offset = vec2(x, y);\n            float dist = length(offset); \n            dist *= dist;\n            offset /= iResolution.xy;\n            \n            neibour = texture(iChannel0, uv + offset).r;\n            \n            float diff = abs(f(level) - f(neibour));\n            \n            \n            if (neibour < FLUIDITY || diff < FLUIDITY * 0.01)\n                continue;\n\n            \n            float speed =  dot(-force, offset) / length(offset);\n            //speed = abs(speed) * sign(speed);\n            \n            l = lerp(l, neibour, FLUIDITY * (1. + diff * speed) / dist);\n        }\n    }\n    \n    level = saturate(l);\n   \n    if (iMouse.z >=0.0)\n    {\n    \tlevel += step(distance(fragCoord.xy,iMouse.xy), iResolution.y * 0.02) * 0.2;\n        level = saturate(level);\n    }\n    \n    fragColor = vec4(level, 0.0, 0.0, 1.0);\n}\n\n\n\n","name":"Buffer A","description":"","type":"buffer"}]}