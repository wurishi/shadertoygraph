{"ver":"0.1","info":{"id":"WlcyRl","date":"1609670809","viewed":61,"name":"新年快乐","username":"yuehongliang","description":"happy new year","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","shape"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//https://www.shadertoy.com/view/XlsSRr\n//https://www.shadertoy.com/view/tsyfDm\n#define LINEWIDTH .03\n// Signed Distance to 2D Arc by Adam Simmons\n// Based roughly on code by Behdad Esfahbod\n\n// Arc segment with certain depth\nstruct Arc {\n  vec2 p0;\n  vec2 p1;\n    \n  // Depth of the Arc, valid range of (-1.0, 1.0)\n  // with 0.0 = straight line, 1.0 = semi-circle\n  //狐所在大圆半径\n  float d;\n};\n\nvec2 perpendicular (const vec2 v) {\n  return vec2 (-v.y, v.x);\n}\n\nfloat tan2atan (float d) {\n  return 2. * d / (1. - d * d);\n}\n\nvec2 computeArcCenter (const Arc a) {\n  return mix (a.p0, a.p1, .5) +\n\t perpendicular (a.p1 - a.p0) / (2. * tan2atan (a.d));\n}\n\nfloat sdArcWedge (Arc a, const vec2 p) {\n  vec2 c = computeArcCenter (a);\n  return -sign (a.d) * (distance (a.p0, c) - distance (p, c));\n}\n\nbool isPointInsideArcWedge (const Arc a, const vec2 p) {\n  float d2 = tan2atan (a.d);\n  return dot (p - a.p0, (a.p1 - a.p0) * mat2(1,  d2, -d2, 1)) >= 0. &&\n\t dot (p - a.p1, (a.p1 - a.p0) * mat2(1, -d2,  d2, 1)) <= 0.;\n}\n\nfloat sdArcOutsideWedge (const Arc a, const vec2 p) {\n  vec2 m = mix (a.p0, a.p1, .5);\n  float d2 = tan2atan (a.d);\n  if (dot (p - m, a.p1 - m) < 0.)\n    return -dot (p - a.p0, normalize ((a.p1 - a.p0) * mat2(+d2, -1, +1, +d2)));\n  else\n    return -dot (p - a.p1, normalize ((a.p1 - a.p0) * mat2(-d2, -1, +1, -d2)));\n}\n\nfloat sdArc(Arc arc, vec2 p) {\n  // trick to avoid depth values very close to 0.0\n//   arc.d = max(abs(arc.d), 0.0001) * (2. * step(0.9, sign(arc.d)) - 1.);\n  \n  if (isPointInsideArcWedge(arc, p))\n    return sdArcWedge(arc, p);\n  \n  return min (distance (p, arc.p0), distance (p, arc.p1)) * sign(sdArcOutsideWedge(arc, p));\n}\n\nfloat DrawSmoothArc(vec2 uv,vec2 a,vec2 b,float d){\n    Arc arc;\n    arc.p0=a;\n    arc.p1=b;\n    arc.d=d;\n    float dist=abs(sdArc(arc,uv));\n\n    float s=pow(smoothstep(0.,LINEWIDTH,dist),10.);\n\n    return 1.-s;\n}\n\nfloat DistanceToLine(vec2 a, vec2 b, vec2 p)\n{\n    vec2 pos = p - a;\n    vec2 dir = b - a;\n    float len = length(dir);\n    dir /= len;//线朝向\n    float f = dot(dir, pos);\n    if (f < 0.0)//点在a点外侧，即朝向线段反方向\n        return distance(a, p);\n   \telse if (f > len)//点在线段上投影距离大于线段距离\n        return distance(b, p);\n    else\n        return distance(a + dir * f, p);//向量a加（p向量在线朝向上），和向量终点落在线段上\n}\nfloat DrawSmoothLine(vec2 fragCoord, vec2 a, vec2 b, float thickness)\n{\n    //uv到线段的距离\n    float d = DistanceToLine(a, b, fragCoord);\n    //线宽归一化,扩大10倍\n    float s = pow(smoothstep(0., thickness, d), 10.);//边缘有黑色，待剔除\n    return 1.-s;\n}\n\nfloat Circle(vec2 uv, vec2 centre, float radius)\n{\n    float d = length(uv - centre);\n    float blur=abs(sin(iTime));\n    float c = smoothstep(radius, radius - .002, d*blur);\n    return c;\n}\n\nfloat line(vec2 uv,vec2 start,vec2 end,float linewidth)\n{\n    vec2 kv=end-start;\n    float k=kv.y==0.?0.:kv.x/kv.y;\n    float slit=(uv.x-start.x)*(end.x-uv.x)>0.?1.:0.;\n    float line=smoothstep(linewidth, 0.0,abs(uv.y - k*uv.x))*slit;\n    return line;\n}\n\nvec2 Rotate(vec2 coord, vec2 center,float deg)\n{\n    vec2 dist=coord-center;\n\n    float angle = radians(deg);\n    vec2 rot = dist * mat2(cos(angle), sin(angle), -sin(angle), cos(angle));\n    rot+=center;\n    return rot;\n}\nvec3 xin(vec2 uv){\n    //新\n    vec3 color=vec3(1.,.8,.8);\n    vec2 line_start=vec2(-.95,0.47);\n    vec2 line_end=vec2(-.9,.45);\n    vec3 slice1=DrawSmoothLine(uv,line_start,line_end,LINEWIDTH)*color;\n    line_start=vec2(-.98,.4);\n    line_end=vec2(-.83,.4);    \n    vec3 slice2=DrawSmoothLine(uv,line_start,line_end,LINEWIDTH)*color;\n    line_start=vec2(-.98,.35);\n    line_end=vec2(-.94,.3);\n    vec3 slice3=DrawSmoothLine(uv,line_start,line_end,LINEWIDTH)*color;\n    line_start=vec2(-.82,.35);\n    line_end=vec2(-.86,.3);\n    vec3 slice4=DrawSmoothLine(uv,line_start,line_end,LINEWIDTH)*color;\n    line_start=vec2(-1.,.25);\n    line_end=vec2(-.8,.25); \n    vec3 slice5=DrawSmoothLine(uv,line_start,line_end,LINEWIDTH)*color;\n    line_start=vec2(-.97,.17);\n    line_end=vec2(-.83,.17); \n    vec3 slice6=DrawSmoothLine(uv,line_start,line_end,LINEWIDTH)*color;\n    line_start=vec2(-.9,.19);\n    line_end=vec2(-.9,.02); \n    vec3 slice7=DrawSmoothLine(uv,line_start,line_end,LINEWIDTH)*color;\n    line_start=vec2(-.95,.1);\n    line_end=vec2(-.98,.05); \n    vec3 slice8=DrawSmoothLine(uv,line_start,line_end,LINEWIDTH)*color;\n    line_start=vec2(-.85,.1);\n    line_end=vec2(-.82,.05); \n    vec3 slice9=DrawSmoothLine(uv,line_start,line_end,LINEWIDTH)*color;\n    line_start=vec2(-.92,.01);\n    line_end=vec2(-.925,.02); \n    vec3 slice10=DrawSmoothLine(uv,line_start,line_end,LINEWIDTH)*color;\n    \n    vec2 arc_start=vec2(-.75,.4);\n    vec2 arc_end=vec2(-.55,.44);\n    vec3 slice11=DrawSmoothArc(uv,arc_start,arc_end,.2)*color;\n    arc_start=vec2(-.75,.0);\n    arc_end=vec2(-.75,.35);\n    vec3 slice12=DrawSmoothArc(uv,arc_start,arc_end,.2)*color;\n    line_start=vec2(-.68,.3);\n    line_end=vec2(-.55,.3); \n    vec3 slice13=DrawSmoothLine(uv,line_start,line_end,LINEWIDTH)*color;\n    line_start=vec2(-.62,.253);\n    line_end=vec2(-.62,.0); \n    vec3 slice14=DrawSmoothLine(uv,line_start,line_end,LINEWIDTH)*color;\n\n    vec3 font=mix(slice1,slice2,slice2.x);\n    font=mix(font,slice3,slice3.x);\n    font=mix(font,slice4,slice4.x);\n    font=mix(font,slice5,slice5.x);\n    font=mix(font,slice6,slice6.x);\n    font=mix(font,slice7,slice7.x);\n    font=mix(font,slice8,slice8.x);\n    font=mix(font,slice9,slice9.x);\n    font=mix(font,slice10,slice10.x);\n    font=mix(font,slice11,slice11.x);\n    font=mix(font,slice12,slice12.x);\n    font=mix(font,slice13,slice13.x);\n    font=mix(font,slice14,slice14.x);\n    return font;\n}\nvec3 nian(vec2 uv){\n    //年\n    vec3 color=vec3(1.,.8,.8);\n    vec2 arc_start=vec2(-.46,.25);\n    vec2 arc_end=vec2(-.38,.44);\n    vec3 slice1=DrawSmoothArc(uv,arc_start,arc_end,.2)*color;\n    vec2 line_start=vec2(-.33,.38);\n    vec2 line_end=vec2(-.1,.38);\n    vec3 slice2=DrawSmoothLine(uv,line_start,line_end,LINEWIDTH)*color;\n    line_start=vec2(-.35,.25);\n    line_end=vec2(-.1,.25);\n    vec3 slice3=DrawSmoothLine(uv,line_start,line_end,LINEWIDTH)*color;\n    line_start=vec2(-.4,.1);\n    line_end=vec2(-.1,.1);\n    vec3 slice4=DrawSmoothLine(uv,line_start,line_end,LINEWIDTH)*color;\n    line_start=vec2(-.35,.19);\n    line_end=vec2(-.35,.15);\n    vec3 slice5=DrawSmoothLine(uv,line_start,line_end,LINEWIDTH)*color;\n    line_start=vec2(-.23,.33);\n    line_end=vec2(-.23,-.05);\n    vec3 slice6=DrawSmoothLine(uv,line_start,line_end,LINEWIDTH)*color;\n\n    vec3 font=mix(slice1,slice2,slice2.x);\n    font=mix(font,slice3,slice3.x);\n    font=mix(font,slice4,slice4.x);\n    font=mix(font,slice5,slice5.x);\n    font=mix(font,slice6,slice6.x);\n\n    return font;\n}\nvec3 kuai(vec2 uv){\n    vec3 color=vec3(1.,.8,.8);\n    vec2 line_start=vec2(.0,.18);\n    vec2 line_end=vec2(.01,.23);\n    vec3 slice1=DrawSmoothLine(uv,line_start,line_end,LINEWIDTH)*color;\n    line_start=vec2(.08,.35);\n    line_end=vec2(.08,-.05);\n    vec3 slice2=DrawSmoothLine(uv,line_start,line_end,LINEWIDTH)*color;\n    line_start=vec2(.15,.19);\n    line_end=vec2(.15,.22);\n    vec3 slice3=DrawSmoothLine(uv,line_start,line_end,LINEWIDTH)*color;\n    line_start=vec2(.2,.28);\n    line_end=vec2(.36,.28);\n    vec3 slice4=DrawSmoothLine(uv,line_start,line_end,LINEWIDTH)*color;\n    line_start=vec2(.36,.23);\n    line_end=vec2(.36,.2);\n    vec3 slice5=DrawSmoothLine(uv,line_start,line_end,LINEWIDTH)*color;\n    line_start=vec2(.2,.15);\n    line_end=vec2(.42,.15);\n    vec3 slice6=DrawSmoothLine(uv,line_start,line_end,LINEWIDTH)*color;\n    line_start=vec2(.28,.33);\n    line_end=vec2(.28,.2);\n    vec3 slice7=DrawSmoothLine(uv,line_start,line_end,LINEWIDTH)*color;\n\n    vec2 arc_start=vec2(.22,-.05);\n    vec2 arc_end=vec2(.28,.1);\n    vec3 slice8=DrawSmoothArc(uv,arc_start,arc_end,.2)*color;\n    arc_start=vec2(.33,.05);\n    arc_end=vec2(.39,-.05);\n    vec3 slice9=DrawSmoothArc(uv,arc_start,arc_end,.2)*color;\n\n    vec3 font=mix(slice1,slice2,slice2.x);\n    font=mix(font,slice7,slice7.x);\n    font=mix(font,slice3,slice3.x);\n    font=mix(font,slice4,slice4.x);\n    font=mix(font,slice5,slice5.x);\n    font=mix(font,slice6,slice6.x);\n    font=mix(font,slice8,slice8.x);\n    font=mix(font,slice9,slice9.x);\n\n    return font;\n}\nvec3 le(vec2 uv){\n    //年\n    vec3 color=vec3(1.,.8,.8);\n    vec2 arc_start=vec2(.5,.28);\n    vec2 arc_end=vec2(.8,.33);\n    vec3 slice1=DrawSmoothArc(uv,arc_start,arc_end,.2)*color;\n    vec2 line_start=vec2(.5,.22);\n    vec2 line_end=vec2(.5,.16);\n    vec3 slice2=DrawSmoothLine(uv,line_start,line_end,LINEWIDTH)*color;\n    line_start=vec2(.5,.1);\n    line_end=vec2(.85,.1);\n    vec3 slice3=DrawSmoothLine(uv,line_start,line_end,LINEWIDTH)*color;\n    line_start=vec2(.65,.2);\n    line_end=vec2(.65,-.11);\n    vec3 slice4=DrawSmoothLine(uv,line_start,line_end,LINEWIDTH)*color;\n    line_start=vec2(.58,.0);\n    line_end=vec2(.53,-.1);\n    vec3 slice5=DrawSmoothLine(uv,line_start,line_end,LINEWIDTH)*color;\n    line_start=vec2(.73,.0);\n    line_end=vec2(.78,-.1);\n    vec3 slice6=DrawSmoothLine(uv,line_start,line_end,LINEWIDTH)*color;\n    line_start=vec2(.6,-.1);\n    line_end=vec2(.63,-.12);\n    vec3 slice7=DrawSmoothLine(uv,line_start,line_end,LINEWIDTH)*color;\n\n    vec3 font=mix(slice1,slice2,slice2.x);\n    font=mix(font,slice4,slice4.x);\n    font=mix(font,slice3,slice3.x);\n    font=mix(font,slice5,slice5.x);\n    font=mix(font,slice6,slice6.x);\n    font=mix(font,slice7,slice7.x);\n\n    return font;\n}\nfloat rnd(float x)\n{\n    return fract(sin(dot(vec2(x+47.49,38.2467/(x+2.3)), vec2(12.9898, 78.233)))* (43758.5453));\n}\nvec3 starts(vec2 uv,vec2 pos,float size){\n    vec3 color=vec3(1.,1.,0.8);\n    float c=1.0 - sqrt(smoothstep(0.0, size, length(uv - pos)));\n    return c*color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //-1~1\n    vec2 uv = (2.0 * fragCoord-iResolution.xy) / iResolution.y;\n    vec3 background=vec3(.8,1.,1.);\n    vec3 xin=xin(uv);\n    vec3 color=mix(background,xin,xin.z);\n    vec3 nian=nian(uv);\n    vec3 kuai=kuai(uv);\n    vec3 le=le(uv);\n    color=mix(color,nian,nian.z);\n    color=mix(color,kuai,kuai.z);\n    color=mix(color,le,le.z);\n\n    for(float i=1.;i<=50.;i++){\n        for(float j=1.;j<=20.;j++){\n            if(j>20./i) break;\n            float size=0.001*i*(1.+rnd(j)/2.);\n            float speed=size*.75+rnd(i)/1.5;\n            vec2 pos=vec2(0.);\n            pos.x=-1.+rnd(j*i)*1.9+.1*cos(iTime+sin(j*i));\n            pos.y=fract(sin(j)-speed*iTime)/1.3;\n            color+=vec3(1.-i/50.)*starts(uv,pos,size);\n        }\n    }\n\n    fragColor =vec4(color,1.);\n}\n","name":"Image","description":"","type":"image"}]}