{"ver":"0.1","info":{"id":"DtBcWw","date":"1691822389","viewed":43,"name":"fosfenos quadratica 2 log pow","username":"davidmachadosf","description":"patterns repeats at many different scales...","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fosfenos"],"hasliked":0,"parentid":"ctBcWw","parentname":"fosfenos quadratica"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI   =   3.141592;\nconst float pot  =     .85;\nconst float freq =   5.;\n\n\nconst vec3 a = vec3(  .086,   .086,   .109); // bgcolor: eigengrau\n\n\nconst vec3 b = vec3(  .251,  .553, .150); \nconst vec3 c = vec3(  .052,  .561, .464);\nconst vec3 d = vec3(  .103,  .203, .813);\n\nvec3 palette( float t ) {\n    return 10.*a*t;// + b*cos(t*t*t) + c*sin(t*t) + d*cos(t);\n}\n\nvec3 paletteReal( float w ) {\n    \n    float red, green, blue;\n\n    if (w >= 380. && w < 440.) {\n        red   = -(w - 440.) / (440. - 380.);\n        green = 0.;\n        blue  = 1.;\n    }\n    else \n    if (w >= 440. && w < 490.) {\n        red   = 0.;\n        green = (w - 440.) / (490. - 440.);\n        blue  = 1.;\n    }\n    else \n    if (w >= 490. && w < 510.) {\n        red   = 0.;\n        green = 1.;\n        blue  = -(w - 510.) / (510. - 490.);\n    }\n    else \n    if (w >= 510. && w < 580.) {\n        red   = (w - 510.) / (580. - 510.);\n        green = 1.;\n        blue  = 0.;\n    }\n    else \n    if (w >= 580. && w < 645.) {\n        red   = 1.;\n        green = -(w - 645.) / (645. - 580.);\n        blue  = 0.;\n    }\n    else \n    if (w >= 645. && w < 781.) {\n        red   = 1.;\n        green = 0.;\n        blue  = 0.;\n    }\n    else {\n        red   = 0.;\n        green = 0.;\n        blue  = 0.;\n    }\n\n\n    // Let the intensity fall off near the vision limits\n    float factor;\n    if (w >= 380. && w < 420.)\n        factor = .3 + .7*(w - 380.) / (420. - 380.);\n    else \n    if (w >= 420. && w < 701.)\n        factor = 1.;\n    else \n    if (w >= 701. && w < 781.)\n        factor = .3 + .7*(780. - w) / (780. - 700.);\n    else\n        factor = 0.;\n\n    float gamma = .8;\n    float R = (red   > 0. ? 255.*pow(red   * factor, gamma) : 0.);\n    float G = (green > 0. ? 255.*pow(green * factor, gamma) : 0.);\n    float B = (blue  > 0. ? 255.*pow(blue  * factor, gamma) : 0.); \n    \n    return vec3(R/255.,G/255.,B/255.);\n    //return vec3(r,0.,b);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float yRat = (iResolution.y/iResolution.x);\n    \n    vec2 uv = 2.*(fragCoord/iResolution.x - vec2(.5,yRat/2.));\n    \n    float x = abs(log(pow(abs(1.*uv.x),5.)));\n    float y = abs(log(pow(abs(1.*uv.y),5.)));\n\n    float valxy = \n        1. -\n         pow( (1.+sin((2.*PI)*freq*(sin(.1*iTime*(x*y))) ))/2., pot) * \n         pow( (1.+cos((2.*PI)*freq*(cos(.1*iTime-(y/x))) ))/2., pot);\n    \n    \n    //vec3 col = palette(valxy);\n    vec3 col = paletteReal(780. - 401.*valxy );\n    \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}