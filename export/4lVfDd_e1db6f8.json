{"ver":"0.1","info":{"id":"4lVfDd","date":"1544563233","viewed":119,"name":"drawing equations","username":"tbaudon","description":"testing how to draw equations. went out of control...","likes":4,"published":1,"flags":64,"usePreview":0,"tags":["test","math","geometry"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"ltXGzN","filepath":"https://soundcloud.com/rachid-neddad/il-etait-une-fois-la-vie-generique","previewfilepath":"https://soundcloud.com/rachid-neddad/il-etait-une-fois-la-vie-generique","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//---------------------------\n// constants\n\nconst int BLEND_NORMAL = 0;\n\n//---------------------------\n\n//---------------------------\n// maths\n\nfloat lerp(float a, float b, float t) {\n    return a - (a - b) * t;\n}\n\n//---------------------------\n// drawing functions\n\nvec4 line(vec4 color, vec2 coord, vec2 offset, float a, float b, float width) {\n    \n    vec4 pixel = vec4(0.0, 0.0, 0.0, 0.0);\n    \n    float x = coord.x - offset.x;\n    float y = coord.y - offset.y;\n    \n    float eq = a * x + b - y;\n    \n    float dWidth = width / 2.0;\n    \n    if (eq >= -dWidth && \n        eq <= dWidth) {\n        pixel = color;\n    }\n    \n    return pixel;\n    \n}\n\nvec4 sinusoidale(vec4 color, vec2 coord, vec2 offset, float freq, float amp, float width) {\n    vec4 pixel = vec4(0.0, 0.0, 0.0, 0.0);\n    \n    float x = coord.x;\n    float y = coord.y - offset.y;\n    \n    float eq = sin(x * (freq / iResolution.x) - offset.x) * amp - y;\n    \n    float dWidth = width / 2.0;\n    \n    if (eq >= -dWidth && \n        eq <= dWidth) {\n        pixel = color;\n    }\n    \n    return pixel;\n}\n\nvec4 disc(vec4 color, vec2 coord, vec2 center, float radius) {\n    vec4 pixel = vec4(0.0, 0.0, 0.0, 0.0);\n    \n    float distX = coord.x - center.x;\n    float distY = coord.y - center.y;\n    \n    if ((distX * distX + distY * distY) < radius * radius)\n        pixel = color;\n    \n    return pixel;\n}\n\nvec4 draw(vec4 canvas, vec4 drawable, int blendMode) {\n\n    switch(blendMode) {\n        case BLEND_NORMAL :\n        \n        canvas.r = (canvas.r * (1.0 - drawable.a) + drawable.r * drawable.a);\n        canvas.g = (canvas.g * (1.0 - drawable.a) + drawable.g * drawable.a);\n        canvas.b = (canvas.b * (1.0 - drawable.a) + drawable.b * drawable.a);\n        canvas.a = 1.0;\n        \n        break;\n        \n        default: \n        break;\n    }\n    \n    return canvas;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    float beatCoef = texture( iChannel0, vec2(0.2, 0.1) ).x * 5.0;    \n    \n    vec3 bg = vec3(0.4, 0.1, 0.15) * beatCoef;\n\n    // Output to screen\n    fragColor = vec4(bg,1.0);\n    \n    float t = fragCoord.x / iResolution.x;\n    \n    vec3 bgColor = vec3(0.8, 0.3, 0.4);\n    bgColor *= 1.0 - abs(sin(iTime * 20.0 - fragCoord.x / 20.0) * 0.3);\n    bgColor *= 1.3 - abs(sin(fragCoord.y / (iResolution.y*0.5) + iResolution.y) * 1.0);\n    \n    fragColor = draw(\n        fragColor, \n        line(\n            vec4(bgColor, 1.0), \n            fragCoord, \n            vec2(0.0, 170), \n            0.0, 50.0, \n            50.0 * (sin(t * 30.0 - iTime * 60.0) * 0.2 + -abs(cos(iTime) * 2.0) + 7.0)\n        ), \n        BLEND_NORMAL\n    );\n    \n    fragColor = draw(\n        fragColor,\n        sinusoidale(\n            vec4(1.0, 1.0, 1.0, 1.0),\n            fragCoord,\n            vec2(\n                iTime * 20.0, \n                200.0\n            ),\n            lerp(2.0, 25.0 - 5.0 * beatCoef, t),\n            lerp(50.0, 25.0 - beatCoef * 5.0, t),\n            lerp(20.0, 0.0, t+0.05)\n        ),\n        BLEND_NORMAL\n    );\n    \n    fragColor = draw(\n        fragColor,\n        disc(\n            vec4(1.0, 1.0, 1.0, 1.0),\n            vec2(\n                fragCoord.x / 1.3,\n                fragCoord.y \n\t\t\t),\n            vec2(\n                30.0,\n                200.0 + sin(9.5 + iTime * 20.0) * 50.0\n            ),\n            30.0\n        ),\n        BLEND_NORMAL\n    );\n    \n    float a = fragCoord.x / iResolution.x;    \n    float b = fragCoord.y / iResolution.y;\n\n    \n    //fragColor = texture( iChannel0, vec2(a, b) );\n}","name":"Image","description":"","type":"image"}]}