{"ver":"0.1","info":{"id":"ftdyR4","date":"1659368890","viewed":86,"name":"leinad-5","username":"leinad","description":"circular filling of circles in a wave","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["circles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    float aspectRatio = iResolution.y / iResolution.x;\n    uv.y *= aspectRatio;\n    \n    uv *= 8.0;\n    float timeMultiplier = floor(uv.x) + floor(uv.y) + 1.0;\n    uv = fract(uv);\n\n    uv -= 0.5;\n    uv *= 2.0;\n    \n    float x = uv.x;\n    float y = uv.y;\n    \n    float d = length(uv);\n    \n    if (d > 1.0) {\n        return;\n    }\n    \n    float dotP = dot(normalize(uv), vec2(1.0, 0.0));\n    \n    float time = fract(iTime * timeMultiplier / 8.0);\n    \n    float upper = max(-8.0 * time + 1.0, -1.0);\n    float upperTrail = max(-8.0 * (time - 0.5) + 1.0, -1.0);\n    float lower = clamp(8.0 * time - 3.0, -1.0, 1.0);\n    float lowerTrail = clamp(8.0 * (time - 0.5) - 3.0, -1.0, 1.0);\n\n    if (y > 0.0) {\n        if (dotP > upper && dotP < upperTrail) {\n            fragColor = vec4(col, 1.0) * (1.0 - smoothstep(0.98, 1.0, d));\n            return;\n        }\n    } else {\n        if (dotP < lower && dotP > lowerTrail) {\n            fragColor = vec4(col, 1.0) * (1.0 - smoothstep(0.98, 1.0, d));\n            return;\n        }\n    }\n    fragColor = vec4(0.0);\n}","name":"Image","description":"","type":"image"}]}