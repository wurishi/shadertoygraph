{"ver":"0.1","info":{"id":"Ntsfzr","date":"1650491672","viewed":51,"name":"Fork wave_solve justinluo4 442","username":"justinluo4","description":"feahttps://www.shadertoy.com/img/themes/classic/play.png","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["dzfv"],"hasliked":0,"parentid":"flXBRn","parentname":"heat_solver"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    float col = texture(iChannel0, uv).x;\n    col = pow(col, 0.666);\n    // Output to screen\n    fragColor = vec4(col, 0,0, 0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float getVal(in vec2 px){\n    if(!bounded(px, 0., 1.)||iFrame == 0) return 0.;\n    return 2.*(texture(iChannel0, px).x - 0.5);\n}\n\nvec2 del2x(in vec2 fx){\n    const float[5] fdc = float[](-1./12., 4./3., -5./2., 4./3.,-1./12.);\n    vec2 px; \n    vec2 del = vec2(0.0, 0.0);\n    for(int i = 0; i < 5; i++){\n        px = fx;\n        px.x += float(i - 2);\n        px /= iResolution.xy;\n        del.x += getVal(px)*fdc[i];\n        px = fx;\n        px.y += float(i - 2);\n        px /= iResolution.xy;\n        del.y += getVal(px)*fdc[i];\n    }\n    return del;\n}\nvec2 delx(in vec2 fx){\n    const float[5] fdc = float[](1./12., -2./3., 0.0, -2./3.,1./12.);\n    vec2 px; \n    vec2 del = vec2(0.0, 0.0);\n    for(int i = 0; i < 5; i++){\n        px = fx;\n        px.x += float(i - 2);\n        px /= iResolution.xy;\n        del.x += getVal(px)*fdc[i];\n        px = fx;\n        px.y += float(i - 2);\n        px /= iResolution.xy;\n        del.y += getVal(px)*fdc[i];\n    }\n    return del;\n}\nbool init(in vec2 px){\nvec2 c = vec2(0.8, 0.4);\nc = iMouse.xy/iResolution.xy;\nvec2 rv = c - px;\nrv.x *= 2.;\nreturn length(rv)< 0.01;\nreturn (px.x > 0.7 && px.x < 0.71) && (px.y > 0.4 && px.y < 0.42);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    float pv = getVal(uv);\n    if(iFrame == 0) pv = 0.0;\n    if(init(uv)) pv = sin(float(iFrame)/100.)/1.2;\n    float dx = (texture(iChannel2, uv).x-0.5)*2.;\n    if(iFrame == 0) dx = 0.;\n    fragColor = vec4((pv + dx*0.5+1.)/2., 0.0, 0.0, 0.0);\n    \n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"float getVal(in vec2 px){\n    if(!bounded(px, 0., 1.) || iFrame == 0) return 0.;\n    return 2.*(texture(iChannel0, px).x - 0.5);\n}\n\nvec2 del2x(in vec2 fx){\n    const float[5] fdc = float[](-1./12., 4./3., -5./2., 4./3.,-1./12.);\n    vec2 px; \n    vec2 del = vec2(0.0, 0.0);\n    for(int i = 0; i < 5; i++){\n        px = fx;\n        px.x += float(i - 2);\n        px /= iResolution.xy;\n        del.x += getVal(px)*fdc[i];\n        px = fx;\n        px.y += float(i - 2);\n        px /= iResolution.xy;\n        del.y += getVal(px)*fdc[i];\n    }\n    return del;\n}\nvec2 delx(in vec2 fx){\n    const float[5] fdc = float[](1./12., -2./3., 0.0, -2./3.,1./12.);\n    vec2 px; \n    vec2 del = vec2(0.0, 0.0);\n    for(int i = 0; i < 5; i++){\n        px = fx;\n        px.x += float(i - 2);\n        px /= iResolution.xy;\n        del.x += getVal(px)*fdc[i];\n        px = fx;\n        px.y += float(i - 2);\n        px /= iResolution.xy;\n        del.y += getVal(px)*fdc[i];\n    }\n    return del;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    float pv = (texture(iChannel1, uv).x-0.5)*2.;\n    if(iFrame == 0) pv = 0.;\n    vec2 del = del2x(fragCoord);\n    float c = 2.;\n    if(uv.x > uv.y) c = 3.;\n    fragColor = vec4((pv + (del.x + del.y)/(c*c)+1.)/2., 0.0, 0.0, 0.0);\n    \n    \n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"bool bounded(in float p, in float l, in float r){\n    return p >= l && p <= r; \n}\nbool bounded(in vec2 v, in float l, in float r){\n    return bounded(v.x, l, r) && bounded(v.y, l, r); \n}","name":"Common","description":"","type":"common"}]}