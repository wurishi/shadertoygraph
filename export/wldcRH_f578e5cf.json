{"ver":"0.1","info":{"id":"wldcRH","date":"1608663945","viewed":131,"name":"Animated Face","username":"darklord9423","description":"A practice and modification of the shader originally from: https://www.shadertoy.com/view/lsXcWn","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["2d","animated","face"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define sat(x) clamp(x, 0.0, 1.0)\nconst float PI = 3.1415926;\n\nfloat RemapSinple(float t1, float t2, float x)\n{\n    return sat((x-t1)/ (t2-t1));\n}\n\nfloat Remap(float t1, float t2, float s1, float s2, float x)\n{\n    return sat((x-t1)/ (t2-t1)* (s2-s1)+ s1);\n}\n\nvec2 RectangleboxRemap(vec2 uv, vec4 rect)\n{\n    //x=left boundary, y=top boundary, z=x scale, w=y scale\n    return (uv-rect.xy)/ (rect.zw-rect.xy);\n}\n\n\nvec4 Head(vec2 uv, float t)\n{\n    //Base Color\n    vec4 col = vec4(mix(vec3(0.9333, 0.6431, 0.2118), vec3(0.9529, 0.0667, 0.0667), t), 1.0);\n    float d = length(uv);\n    col.a = smoothstep(0.5, 0.49, d);\n    \n    //Edge Darken\n    float edgeval = RemapSinple(0.35, 0.5, d);\n    edgeval *= edgeval;\n    col.rgb *= 1.0- edgeval* 0.5;\n    \n    //Outline\n    col.rgb = mix(col.rgb, mix(vec3(1.0, 0.6, 0.0), vec3(0.9, 0.0667, 0.0667), t), smoothstep(0.48, 0.5, d));\n    \n    //Highlight\n    float highlight = smoothstep(0.4, 0.39, d);\n    highlight *= Remap(0.4, -0.1, 0.75, 0.0, uv.y);\n    highlight *= smoothstep(0.18, 0.19, length((uv-vec2(0.21, 0.1))));\n    col.rgb = mix(col.rgb, vec3(1.0), highlight);\n    \n    //Cheek\n    d = length(uv- vec2(0.25, -0.2));\n    float cheek = smoothstep(0.2, 0.01, d);\n    col.rgb = mix(col.rgb, mix(vec3(0.9216, 0.3451, 0.6627), vec3(0.9529, 0.4667, 0.0667), t), cheek);\n    \n    return col;    \n}\n\nvec4 Eye(vec2 uv, float side, vec2 m, float t)\n{\n    uv -= 0.5;\n    uv.x *= side;\n    \n    //Base Color\n    vec4 col = vec4(1.0);\n    float d = length(uv);\n    col.a *= smoothstep(0.5, 0.48, d);\n    \n    //Eye White\n    vec3 eyewhite = vec3(0.1647, 0.6039, 0.6588);\n    col.rgb = mix(col.rgb, eyewhite, smoothstep(0.1, 0.7, d));\n    col.rgb *= 1.0- smoothstep(0.45, 0.5, d)* 0.5* sat(-uv.y-uv.x*side);        \n    \n    //Pupil\n    d = length(uv-m*0.45);\n    col.rgb = mix(col.rgb, vec3(0.0), smoothstep(0.3, 0.28, d));\n    eyewhite *= 1.0+ smoothstep(0.28, 0.02, d);\n    float eyemask = smoothstep(0.28, 0.25, d);\n    col.rgb = mix(col.rgb, eyewhite, eyemask);\n    \n    d = length(uv-m*0.6);\n    float pupilsize = mix(0.4, 0.16, t);\n    col.rgb = mix(col.rgb, vec3(0.0), smoothstep(pupilsize, pupilsize*0.85, d)* eyemask);\n    \n    //Highlight\n    float t2 = iTime* 3.0;\n    vec2 offset = vec2(sin(uv.x* 25.0+ t2), sin(uv.y* 25.0+ t2));\n    offset *= 0.01*(1.0-t);\n    uv += offset;\n    \n    float highlight = smoothstep(0.1, 0.09, length((uv-vec2(-0.15, 0.15))));\n    highlight += smoothstep(0.07, 0.06, length((uv+vec2(-0.08, 0.08))));\n    col.rgb = mix(col.rgb, vec3(1.0), highlight);\n    \n    return col;\n}\n\nvec4 Mouth(vec2 uv, float t)\n{\n    uv -= 0.5;\n    \n    //Base Color\n    vec4 col = vec4(0.502, 0.2196, 0.149, 1.0);\n    float d = length(uv);\n    \n    //Teeth Shape Origin\n    vec2 toptuv = uv;   \n    toptuv.x *= mix(3.0, 1.0, t);\n    toptuv.y += abs(toptuv.x)* 0.5* (1.0-t);\n    float topteeth = length(toptuv- vec2(0.0, mix(0.6, 0.4, t)));\n    float buttomteeth = length(uv+ vec2(0.0, mix(1.0 ,0.6, t)));\n    \n    \n    //Mouth Shape and Color\n    uv.y *= 1.5;\n    uv.y += uv.x* uv.x* 2.5* t;\n    uv.x *= mix(2.5, 1.0, t);\n    d = length(uv);    \n    col.a *= smoothstep(0.5, 0.48, d);\n    \n    //Tongue Shape\n    float tongue = length(uv+ vec2(0.0, mix(0.5, 1.0, t)));\n    \n    //Teeth and Tongue Color\n    vec3 teethcol = vec3(1.0) * smoothstep(0.6, 0.35, d);\n    col.rgb = mix(col.rgb, vec3(0.9255, 0.549, 0.8118), smoothstep(0.5, 0.2, tongue));\n    col.rgb = mix(col.rgb, teethcol, smoothstep(0.5, 0.48, topteeth));\n    col.rgb = mix(col.rgb, teethcol, smoothstep(0.5, 0.48, buttomteeth));\n    \n    \n    return col;\n}\n\nvec4 Brow(vec2 uv, float t)\n{\n    //Warp the Shape\n    uv.y += uv.x* mix(0.5, -0.8, t)+ 0.03;\n    uv.x += mix(-0.05, 0.15, t);\n    uv -= 0.5;\n    \n    //Brow Shape\n    vec4 col = vec4(0.0);\n    float d1 = length(uv);\n    float s1 = smoothstep(0.4, 0.3, d1);\n    float d2 = length(uv+ vec2(0.1, mix(-0.2, 0.2, t))* 0.7);\n    float s2 = smoothstep(0.4, 0.3, d2);\n    float browmask = sat(s2-s1);\n    \n    //Brow Color\n    float browhighlight = smoothstep(0.45, mix(0.0, 0.35, t), length(uv));\n    vec4 browcol = mix(vec4(0.0), vec4(0.5137, 0.2078, 0.0039, 1.0), browmask);\n    browcol.rgb = mix(browcol.rgb, vec3(1.0, 0.0667, 0.0), browhighlight);\n    \n    //Brow Shadow\n    float shadowblur = mix(0.3, 0.1, t);\n    uv.y += mix(0.15, 0.0, t);\n    d1 = length(uv);\n    s1 = smoothstep(0.4, 0.4-shadowblur, d1);\n    d2 = length(uv+ vec2(0.1, mix(-0.2, 0.2, t))* 0.7);\n    s2 = smoothstep(0.4, 0.4-shadowblur, d2);    \n    float shadowmask = sat(s2-s1);\n    col = mix(vec4(0.0), vec4(vec3(0.0), 1.0), smoothstep(0.0, 1.0, shadowmask)* 0.5);\n    \n    col = mix(col, browcol, smoothstep(0.45, 0.65, browmask));\n    \n    return col;\n}\n\nvec4 Face(vec2 uv, vec2 m, float t)\n{\n    vec4 col = vec4(0.0);\n    float side = sign(uv.x);\n    uv.x = abs(uv.x);\n    \n    vec4 head = Head(uv, t);\n    vec4 eye = Eye(RectangleboxRemap(uv, vec4(0.03, -0.1, 0.4, 0.25)), side, m, t);\n    vec4 mouth = Mouth(RectangleboxRemap(uv, vec4(-0.3, -0.4, 0.3, -0.1)), t);\n    vec4 brow = Brow(RectangleboxRemap(uv, vec4(0.03, 0.2, 0.4, 0.45)), t);\n    col = mix(col, head, head.a);\n    col = mix(col, eye, eye.a);\n    col = mix(col, mouth, mouth.a);\n    col = mix(col, brow, brow.a);\n    \n    return col;\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv -= 0.5;\n    uv.x *= iResolution.x/ iResolution.y;\n    \n    //Time -> [0.0, 1.0]\n    float t = sin(iTime- PI/2.0)* 0.5+ 0.5;\n    \n    //Normalize Mouse\n    vec2 m = iMouse.xy/ iResolution.xy;\n    m -= 0.5;\n    \n    //Animate the shader when the mouse hasn't been used\n    if (m.x < -0.49 && m.y < -0.49)\n    {\n        m = vec2(t-0.5, 0.0);           \n    }\n    \n    //back to origin when exit fullscreen\n    if (length(m) > 0.707) m*= 0.0;\n    \n    uv += m* (dot(uv, uv)- 0.25);\n\n    // Output to screen\n    vec4 col = Face(uv, m, t);\n    fragColor = vec4(col);\n}","name":"Image","description":"","type":"image"}]}