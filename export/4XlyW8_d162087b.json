{"ver":"0.1","info":{"id":"4XlyW8","date":"1726089231","viewed":106,"name":"Signed Jump Flooding","username":"iq","description":"Signed Jump Flooding, to create a SIGNED distance field of a shape of which we only know it's inside and outside regions.","likes":11,"published":3,"flags":32,"usePreview":0,"tags":["2d","flood","jumpflooding","jf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2024 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// SIGNED Jump Flooding, to create a SDFs of a shapes for which\n// we only know the interior and exterior pixels.\n//\n// Basically I flood interior and exterior pixels independently\n// but in the same number of passes (but reads twice the amount\n// of bytes. See Buffer A\n//\n// Similar to https://www.shadertoy.com/view/ct2cDV and https://www.shadertoy.com/view/McByRd\n\n\n// .x  = distance\n// .yz = closet\nvec3 map( in vec2 p )\n{\n    vec4  co = texelFetch(iChannel0,ivec2(p),0);\n    float d1 = length(p-co.xy);\n    float d2 = length(p-co.zw);\n    return (d1>d2) ? vec3(d1,co.xy) : vec3(-d2,co.zw);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord;\n    vec2 m = iMouse.z>0.001 ? iMouse.xy : iResolution.xy*(0.4 + 0.4*sin(iTime*vec2(0.3,0.5)+vec2(0.0,2.0)));\n    \n    // distance\n    vec3 dc = map(p);\n    vec2 gra = (p-dc.yz)/dc.x;\n\n    // colorize\n    vec3 col = (dc.x>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n    \n    if( iFrame>0 )\n    {\n    float d = 2.0*dc.x/iResolution.y;\n    if( sin(6.283185*iTime/8.0)<0.0 ) col *= 1.0 + vec3(0.5*gra,0.0);\n    col *= 1.0 - exp2(-24.0*abs(d));\n    col *= 0.8 + 0.2*smoothstep(-0.5,0.5,cos(128.0*d));\n    col = mix( col, vec3(1.0), 1.0-smoothstep(1.0,3.0,abs(dc.x)) );\n\n    // mouse probe\n    dc = map(m);\n    float l = length(p-m);\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(2.0, 3.0, abs(l-abs(dc.x))));\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 1.0, l-8.0));\n    l = length(p-dc.yz);\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 1.0, l-8.0));\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float dot2( in vec2 x ) { return dot(x,x); }\n\n// some binary shape (0=inside, 1=outside)\nfloat shape( in vec2 p )\n{\n    // circle\n    // return length(p)<0.5?0.0:1.0;\n    \n    // mandelbrot set\n    vec2 z = vec2(0.0);\n    vec2 c = p - vec2(0.75,0.0);\n    for( int i=0; i<16; i++ )\n    {\n        z = vec2(z.x*z.x-z.y*z.y,2.0*z.x*z.y) + c;\n        if( dot2(z)>4.0 ) return 1.0;\n    }\n    return 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // first frame we mark interior and exterior pixels\n    if( iFrame==0 )\n    {\n        vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n        float d = shape(uv);\n        fragColor = (d>0.5) ? vec4(-1.0,-1.0,fragCoord) : vec4(fragCoord,-1.0,-1.0);\n    }\n    // next 12 frames, do one Jump Flood algorithm pass (allows up to 2048x2048 buffers)\n    else if( (iFrame>=1) && (iFrame<=12) )\n    {\n        ivec2 ip = ivec2(fragCoord);\n\n        int width = (1<<(12-iFrame));\n        \n        vec3 minExt = vec3(1e20);\n        vec3 minInt = vec3(1e20);\n        for( int y=-1; y<=1; y++ )\n        for( int x=-1; x<=1; x++ )\n        {\n            vec4 c = texelFetch(iChannel0,ip+ivec2(x,y)*width,0);\n            \n            if( c.x>0.0 ) // flood exterior pixels\n            {\n                float d = dot2(c.xy - vec2(ip));\n                if( d<minExt.z ) minExt = vec3(c.xy,d);\n            }\n            \n            if( c.z>0.0 ) // flood interior pixels (optional)\n            {\n                float d = dot2(c.zw - vec2(ip));\n                if( d<minInt.z ) minInt = vec3(c.zw,d);\n            }\n        }        \n        fragColor = vec4(minExt.xy,minInt.xy);\n    }\n    // 13th frame, copy content (because shadertoy ping-pongs two textures per pass)\n    else if( iFrame==13 )\n    {\n        fragColor = texelFetch(iChannel0,ivec2(fragCoord),0);\n    }\n    // following frames, do nothing, we are done here\n    else\n    {\n        discard;\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}