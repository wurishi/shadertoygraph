{"ver":"0.1","info":{"id":"tdGSRt","date":"1574710926","viewed":208,"name":"Polar Rep KIFS","username":"efairbanks","description":"Haven't done a raymarch fractal from memory in a while so IDK here's something.","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","kifs","idk"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\nvec2 c2p(vec2 c){return vec2(atan(c.y,c.x),length(c));}\nvec2 p2c(vec2 p){return vec2(cos(p.x)*p.y,sin(p.x)*p.y);}\nvec2 crep(vec2 uv, float c){\n\tuv=c2p(uv);\n    uv.x=uv.x+PI;\n    uv.x=mod(uv.x,2.*PI/c);\n    uv.x=abs(uv.x-PI/c);\n    uv.x=uv.x-PI;\n    return p2c(uv);\n}\nvec3 look(vec2 uv, vec3 o, vec3 t)\n{\n    vec3 fwd=normalize(t-o);\n    vec3 right=normalize(cross(fwd,vec3(0.,1.,0.)));\n    vec3 up=normalize(cross(fwd,right));\n    return fwd+right*uv.x+up*uv.y;\n}\nfloat box(vec3 p, float s)\n{\n    float d=abs(p.y)-s;\n    d=max(d,abs(p.x)-s);\n    d=max(d,abs(p.z)-s);\n    return d;\n}\nfloat map(vec3 p)\n{\n    p-=6.5;\n    p=mod(p,13.)-6.5;\n    for(int i=0;i<5;i++)\n    {\n        p.xz=crep(p.xz,9.-float(i));\n        p.xz+=0.7-0.01;\n        float t=p.x;\n        p.x=p.y;\n        p.y=p.z;\n        p.z=t;\n    }\n    float d=box(p,0.45);\n    return d;\n}\nvec3 gradient(vec3 p)\n{\n    vec2 e=vec2(0.,0.001);\n    return normalize(vec3(map(p+e.yxx)-map(p-e.yxx),\n                map(p+e.xyx)-map(p-e.xyx),\n                map(p+e.xxy)-map(p-e.xxy)));\n}\nfloat march(vec3 o, vec3 r)\n{\n    float t=0.2;\n    for(int i=0;i<70;i++)\n    {\n        float d=map(o+r*t);\n        if(d<0.004) return t;\n        t+=d*0.8;\n    }\n    return 0.;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv=uv-0.5;\n    uv.x=uv.x*iResolution.x/iResolution.y;\n\n\tvec3 o=vec3(cos(iTime),cos(iTime),sin(iTime))*(sin(iTime*0.6)+1.15)*4.;\n    vec3 t=vec3(0.);\n    vec3 r=look(uv,o,t);\n    float d=march(o,r);\n\n    fragColor=vec4(0.);\n    if(d==0.) return;\n    float shade=dot(normalize(vec3(o)),gradient(o+r*d))/pow(1.1,d);\n    // Output to screen\n    fragColor = vec4(vec3(shade),1.0);\n}","name":"Image","description":"","type":"image"}]}