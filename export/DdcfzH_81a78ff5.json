{"ver":"0.1","info":{"id":"DdcfzH","date":"1732768634","viewed":162,"name":"Lava Lamp Gradient","username":"welches","description":"A mesh gradient with noise distortion. Includes film grain and interpolates between a light and dark theme.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["gradient","lavalamp","meshgradient","meshdistortion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define filmGrainIntensity 0.1;\n\n// Inspired by https://www.shadertoy.com/view/wdyczG\n// Licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License:\n// https://creativecommons.org/licenses/by-nc-sa/3.0/deed.en\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nvec2 hash(vec2 p) {\n    p = vec2(dot(p, vec2(2127.1, 81.17)), dot(p, vec2(1269.5, 283.37)));\n    return fract(sin(p)*43758.5453);\n}\n\nfloat noise(in vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n\n    vec2 u = f*f*(3.0-2.0*f);\n\n    float n = mix(mix(dot(-1.0+2.0*hash(i + vec2(0.0, 0.0)), f - vec2(0.0, 0.0)),\n    dot(-1.0+2.0*hash(i + vec2(1.0, 0.0)), f - vec2(1.0, 0.0)), u.x),\n    mix(dot(-1.0+2.0*hash(i + vec2(0.0, 1.0)), f - vec2(0.0, 1.0)),\n    dot(-1.0+2.0*hash(i + vec2(1.0, 1.0)), f - vec2(1.0, 1.0)), u.x), u.y);\n    return 0.5 + 0.5*n;\n}\n\nfloat filmGrainNoise(in vec2 uv) {\n    return length(hash(vec2(uv.x, uv.y)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    float aspectRatio = iResolution.x / iResolution.y;\n    \n    // Transformed uv\n    vec2 tuv = uv - .5;\n\n    // Rotate with noise\n    float degree = noise(vec2(iTime*.05, tuv.x*tuv.y));\n\n    tuv.y *= 1./aspectRatio;\n    tuv *= Rot(radians((degree-.5)*720.+180.));\n    tuv.y *= aspectRatio;\n\n    // Wave warp with sine\n    float frequency = 5.;\n    float amplitude = 30.;\n    float speed = iTime * 2.;\n    tuv.x += sin(tuv.y*frequency+speed)/amplitude;\n    tuv.y += sin(tuv.x*frequency*1.5+speed)/(amplitude*.5);\n    \n    // Light gradient colors\n    vec3 amberYellow = vec3(299, 186, 137) / vec3(255);\n    vec3 deepBlue = vec3(49, 98, 238) / vec3(255);\n    vec3 pink = vec3(246, 146, 146) / vec3(255);\n    vec3 blue = vec3(89, 181, 243) / vec3(255);\n    \n    // Dark gradient colors\n    vec3 purpleHaze = vec3(105, 49, 245) / vec3(255);\n    vec3 swampyBlack = vec3(32, 42, 50) / vec3(255);\n    vec3 persimmonOrange = vec3(233, 51, 52) / vec3(255);\n    vec3 darkAmber = vec3(233, 160, 75) / vec3(255);\n    \n    // Interpolate between light and dark gradient\n    float cycle = sin(iTime * 0.5);\n    float t = (sign(cycle) * pow(abs(cycle), 0.6) + 1.) / 2.;\n    vec3 color1 = mix(amberYellow, purpleHaze, t);\n    vec3 color2 = mix(deepBlue, swampyBlack, t);\n    vec3 color3 = mix(pink, persimmonOrange, t);\n    vec3 color4 = mix(blue, darkAmber, t);\n\n    // Blend the gradient colors and apply transformations\n    vec3 layer1 = mix(color3, color2, smoothstep(-.3, .2, (tuv*Rot(radians(-5.))).x));\n    vec3 layer2 = mix(color4, color1, smoothstep(-.3, .2, (tuv*Rot(radians(-5.))).x));\n    \n    vec3 color = mix(layer1, layer2, smoothstep(.5, -.3, tuv.y));\n\n    // Apply film grain\n    color = color - filmGrainNoise(uv) * filmGrainIntensity;\n    \n    fragColor = vec4(color, 1.0);  \n}","name":"Image","description":"","type":"image"}]}