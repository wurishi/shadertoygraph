{"ver":"0.1","info":{"id":"slyXWR","date":"1640470472","viewed":220,"name":"Stochastic Texture Tiling","username":"mr_bepe","description":"Stochastic tiling of textures ported from https://gist.github.com/unitycoder/6c09f186da7c626e534f16f8c4063bef","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["textures"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n//hash for randomness\nvec2 hash2D2D (vec2 s)\n{\n    //magic numbers\n    return fract(sin(mod(vec2(dot(s, vec2(127.1,311.7)), dot(s, vec2(269.5,183.3))), 3.14159))*43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x = uv.x * 1.5 + 0.04* iTime;\n    \n    uv *= 4.0;\n    \n    //uv transformed into triangular grid space with UV scaled by approximation of 2*sqrt(3)\n    vec2 skewUV = mat2x2 (1.0 , 0.0 , -0.57735027 , 1.15470054) * (uv * 3.464);\n    \n    //vertex IDs and barycentric coords\n    vec2 vxID = vec2 (floor(skewUV));\n    vec3 barry = vec3 (fract(skewUV), 0);\n    barry.z = 1.0-barry.x-barry.y;\n    \n    \n    mat4x3 a = mat4x3(vec3(vxID, 0), vec3(vxID + vec2(0, 1), 0), vec3(vxID + vec2(1, 0), 0), barry.zyx);\n    mat4x3 b = mat4x3(vec3(vxID + vec2 (1, 1), 0), vec3(vxID + vec2 (1, 0), 0), vec3(vxID + vec2 (0, 1), 0), vec3(-barry.z, 1.0-barry.y, 1.0-barry.x));\n\n    mat4x3 BW_vx = (barry.z > 0.0) ? a : b;\n\n\n    //calculate derivatives to avoid triangular grid artifacts\n    vec2 dx = dFdx(uv);\n    vec2 dy = dFdy(uv);\n    \n    //blend samples with calculated weights\n    vec4 color = (textureGrad(iChannel0, uv + hash2D2D(BW_vx[0].xy), dx, dy)* BW_vx[3].x) + \n                (textureGrad(iChannel0, uv + hash2D2D(BW_vx[1].xy), dx,dy)* BW_vx[3].y) + \n                (textureGrad(iChannel0, uv + hash2D2D(BW_vx[2].xy),dx,dy)* BW_vx[3].z);\n\n    fragColor = vec4(color.x, color.y, color.z, 1.0f);\n}","name":"Image","description":"","type":"image"}]}