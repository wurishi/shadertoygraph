{"ver":"0.1","info":{"id":"DtXcWN","date":"1690732290","viewed":64,"name":"Blending Modes Study","username":"AndreiDespinoiu","description":"Shader meant for studying some of the blending modes found in Substance Designer.\nNotice how the corner is changing every 0.87 seconds or so.\nYou're welcome to play around with the values at the top.\nCheck out the \"Blend modes\" article on Wikipedia.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["rgb","blendmodes","blending","rainbow","blendingmodes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float density    =  4.2;\nconst float thickness  =  0.25;\nconst float bleed      =  0.8;\nconst float angle      =  45.0 * (3.1415926535897/180.0); // 45 degrees converted to radians\nconst bool  isGrid     =  false;\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv  =  fragCoord / iResolution.xy;\n    uv.x    *=  iResolution.x / iResolution.y; // Square it, by multiplying by the aspect ratio\n\n    vec2 uv2 = uv * density; // Create a new vec2 and leave the original UV intact since it will be used later\n\n    if (isGrid)\n        uv2 = fract(uv2); // Only caring about the fractional part (what comes after the decimal point)\n\n    float hor  = smoothstep(0.0, uv2.x, thickness); // Horizontal line\n    float vert = smoothstep(0.0, uv2.y, thickness); // Vertical line\n\n    int choice = int(iTime * 0.87) % 9; // Alternate between 9 available blending modes every 0.87 seconds\n\n    float combined;\n    switch (choice) // Replace \"choice\" here with whatever number you want to see\n    {\n        case 0:  combined  =  clamp(hor + vert, 0.0, 1.0);                                               break; // \"Add (Linear Dodge)\"\n        case 1:  combined  =  clamp(hor - vert, 0.0, 1.0);                                               break; // \"Subtract\"\n        case 2:  combined  =  hor * vert;                                                                break; // \"Multiply\"\n        case 3:  combined  =  max(hor, vert);                                                            break; // \"Max (Lighten)\"\n        case 4:  combined  =  min(hor, vert);                                                            break; // \"Min (Darken)\"\n        case 5:  combined  =  hor / max(vert, 0.001);                                                    break; // \"Divide\"\n        case 6:  combined  =  hor < 0.5 ? (2.0 * hor * vert) : (1.0 - 2.0 * (1.0 - hor) * (1.0 - vert)); break; // \"Overlay\"\n        case 7:  combined  =  1.0 - ((1.0 - hor) * (1.0 - vert));                                        break; // \"Screen\"\n        case 8:  combined  =  (1.0 - 2.0 * vert) * (hor * hor) + 2.0 * vert * hor;                       break; // \"Soft Light\" (Pegtop's formula. Not sure if it's what Substance Designer uses)\n        default: combined  =  0.0;\n    }\n\n    vec3 color = vec3(combined);\n    color = pow(color, vec3(bleed)); // Extend it out a bit, as a \"bleed\" effect\n\n    uv.x = cos(angle) * uv.x - sin(angle) * uv.y; // \"Rotation around the Z-axis\" from learnopengl.com/Getting-started/Transformations\n    uv.y = sin(angle) * uv.x + cos(angle) * uv.y;\n\n    vec3 rainbow = 0.5 * cos(6.283 * (iTime * 0.2 - uv.x + vec3(0.0, -0.33333, 0.33333))) + 0.5;\n\n    fragColor = vec4(color * rainbow, 1.0);\n}","name":"Image","description":"","type":"image"}]}