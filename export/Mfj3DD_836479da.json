{"ver":"0.1","info":{"id":"Mfj3DD","date":"1704257787","viewed":28,"name":"Rainbow Bungie Jump","username":"blubbers122","description":"Well, it started with triangles","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","triangle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//https://iquilezles.org/articles/distfunctions2d/\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n\n//http://dev.thi.ng/gradients/\nvec3 palette2(float t) {\n    vec3 a = vec3(0.667, 0.500, 0.500);\n    vec3 b = vec3(0.500, 0.667, 0.500);\n    vec3 c = vec3(0.667, 0.666, 0.500);\n    vec3 d = vec3(0.200, 0.000, 0.500);\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nmat2 rot2D(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    float angleSpeed1 = sin(iTime / 8.);\n    float angleSpeed2 = sin(iTime / 3.);\n    float angleSpeed3 = cos(iTime / 5.);\n    float angleSpeed4 = cos(iTime / 2.55);\n    \n    float depth = -2.5 + tan(angleSpeed3) * 1.5;\n    \n    \n    uv *= depth;\n    uv *= rot2D(angleSpeed2);\n    \n    float distFromCenter = angleSpeed4 * .1;\n    \n    uv += vec2(10.,0) * distFromCenter * rot2D(angleSpeed3);\n\n    vec2 uv0 = uv;\n    \n    vec3 col = vec3((angleSpeed3));\n    \n    vec2 tri = vec2(0.15,.15) + sin(iTime) * .05;\n    vec2 dir = vec2(0., -1.);\n    for (float i = 0.; i < 4.; i++) {\n        float angle = angleSpeed2;\n        vec2 uv1 = uv;\n        uv = fract(uv * 2.) - 0.5;\n        \n        for (float j = 0.; j < 8.; j++) {\n            uv *= rot2D(angle);\n            \n            float distLerper = (angleSpeed2 + 1.) / 2.;\n            \n            float d = pow(length(mix(abs(uv - uv1), abs(uv0 - uv1), distLerper)), (angleSpeed4 + 1.) / 2. * 1.5 + .25);\n            col += smoothstep(sdTriangleIsosceles(uv, tri), sdTriangleIsosceles(uv, tri)+ .05, .01);\n            \n            vec3 c = (vec3(1.) - mix(palette(d), palette2(d), angleSpeed1 + 1.));\n            col *= c;\n\n            angle += 6.28 / 4.;\n        }\n        \n    }\n\t\n\n\n\n    // Output to screen\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}