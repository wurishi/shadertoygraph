{"ver":"0.1","info":{"id":"ltXSRS","date":"1437468734","viewed":268,"name":"Abstract Cave","username":"anlumo","description":"Went into a more abstract direction from the cave.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["nuclai15"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"const vec3 fog_color = vec3(0.7,0.85,1.0);\nconst float fog_density = 0.02;\n\n//-------------------------------------------------------------------------\n// MAP\n//\n// The cave structure is represented algorithmically as a signed\n// distance field:\n//      - positive numbers mean empty space\n//      - negative numbers are solid space\n//\n// This distance is returned as the .x component of a 2D vector, and\n// the .y component represents an optional texture \"number\".\n//-------------------------------------------------------------------------\nvec2 mapCave( in vec3 pos )\n{\n    // ---- CEILING ----\n\n    float ceiling_y =\n        // global offset upwards of ceeling\n        0.1 + sin(iTime*3.1415926 / 10.0) / 4.0\n\t;\n    \n   \t// ---- FLOOR ----\n           \n    float floor_y =\n        // global offset downwards of floor\n        0.7\n        // curve minimum around origin and slopes upward\n        +1.0 - 0.25 * sqrt(pos.x*pos.x + pos.z*pos.z)\n    ;\n    \n    floor_y += (sin(pos.x*3.1415926*4.0) + sin(pos.z*3.1415926*4.0))/8.0;\n    floor_y += sin(iTime*3.1415926*pos.x*pos.z);\n\n    // The cave is made up of two planes with variable offsets.  \n    return vec2( min(pos.y + floor_y, -pos.y + ceiling_y), 0.0 );\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  return length( vec2(length(p.xz)-t.x,p.y) )-t.y;\n}\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\nvec2 map(in vec3 pos) {\n    return opU(mapCave(pos), vec2(sdTorus(pos-vec3( 0.0,0.25, 1.0), vec2(0.20,0.05)), 25.0));\n}\n\n//----------------------------------------------------------------------\n// TEXTURE\n//\n// The texture of the cave is computed based on a 3D position, usually\n// around the contour where the signed distance field is zero.  This\n// function also takes the material returned from the map() function,\n// and then computes a color as a 3D vector. \n//----------------------------------------------------------------------\nvec3 texture( in vec3 pos, in float mat )\n{    \n    // Default texture for the cave. This is currently a checkerboard.\n//    float f = mod( floor(5.0*pos.z) + floor(5.0*pos.x), 2.0);\n    float f = (sin(pos.z*3.1415926*10.0) + sin(pos.x*3.1415926*10.0) + 1.0)/2.0;\n    return 0.2 + 0.1*f*vec3(0.2, (sin(iTime*3.1415926 * 100.0)+1.0) / 2.0, 1.0);\n}\n\n//----------------------------------------------------------------------\n// RENDERING\n//\n// A form of ray marching is used to trace through the signed distance\n// field, then perform simple physically-based lighting.\n//\n// NOTE: You shouldn't need to change this unless you need more advanced\n// customizations of the rendering process (e.g. reflections).\n//----------------------------------------------------------------------\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 0.1;\n    float tmax = 12.0;\n    float scale = 0.1;\n\tfloat precis = 0.0001;\n    float t = tmin;\n    float m = -1.0;\n\tvec2 last = vec2(0.0, 0.0);\n    for( int i=0; i<500; i++ )\n    {\n\t    vec2 res = map( ro+rd*t );\n        if( abs(res.x)<precis || t>tmax ) break;\n        if( res.x * last.x < 0.0 ) {\n            scale *= 0.5;\n        }\n        else if (res.x > last.x) {\n        \tscale = min(0.1, scale * 2.0);\n\t\t}\n        t += res.x * scale;\n\t    m = res.y;\n        last = res;\n    }\n\n    if( t>tmax ) m=-1.0;\n    return vec2( t, m );\n}\n\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    vec3 col = vec3(0.8, 0.9, 1.0);\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n\n    if( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        vec3 ref = reflect( rd, nor );\n\n        col = texture(pos, m);\n\n        // Lighting calculations.  \n        float occ = calcAO( pos, nor );\n\t\tvec3  lig = normalize( vec3(0.0, 1.0, 0.0) - pos );\n\t\tfloat amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n        float dom = smoothstep( -0.1, 0.1, ref.y );\n        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n\t\tfloat spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);\n\n        // You can customize the weights and colors\n        // for each of these lighting components. \n\t\tvec3 brdf = vec3(0.0);\n        brdf += 1.20*dif;\n\t\tbrdf += 1.20*spe*dif;\n        brdf += 0.30*amb*occ;\n        brdf += 0.40*dom*occ;\n        brdf += 0.30*bac*occ;\n        brdf += 0.40*fre*occ;\n\t\tbrdf += 0.02;\n\t\tcol = col*brdf;\n\n        // Fog calculation.\n    \t//col = mix( col, fog_color, 1.0-exp( -fog_density*t*t ) );\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\n//----------------------------------------------------------------------\n// MAIN\n//----------------------------------------------------------------------\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n\tp.x *= iResolution.x/iResolution.y;\n    vec2 mo = iMouse.xy/iResolution.xy;\n\n    // Camera origin and target. \n\tfloat time = 15.0 + iTime;\n\tvec3 ro = vec3( -0.5+3.2*cos(0.1*time + 6.0*mo.x), mo.y-0.5, 0.5 + 3.2*sin(0.1*time + 6.0*mo.x) );\n\tvec3 ta = vec3( -0.5, -0.4, 0.5 );\n    mat3 ca = setCamera( ro, ta, 0.0 );\n    \n    // Ray direction.\n\tvec3 rd = ca * normalize( vec3(p.xy,2.5) );\n\n    // Render this pixel.\n    vec3 col = render( ro, rd );\n\tcol = pow( col, vec3(0.4545) );\n    fragColor = vec4( col, 1.0 );\n}\n","name":"","description":"","type":"image"}]}