{"ver":"0.1","info":{"id":"WljSRm","date":"1565821943","viewed":59,"name":"square_tests","username":"pmabres","description":"test","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["square","sine"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Element {\n\tvec2 pos;\n    vec3 color;\n    float size;\n    int type;\n};\n                 \nstruct FrameData {\n    vec2 resolution;\n    vec2 uv;\n    vec2 coordinate;\n};\n\nvec3 paintSquare(FrameData frameData, Element element) \n{\n    vec2 calcSize = element.size/frameData.resolution.xy;\n\tif (frameData.uv.x <= element.pos.x + calcSize.x && frameData.uv.x >= element.pos.x - calcSize.x\n        && frameData.uv.y <= element.pos.y + calcSize.y && frameData.uv.y >= element.pos.y - calcSize.y )\n        return element.color;\n    else\n        return vec3(.0f,.0f,.0f);\n}\n\nvec3 paintCircle(FrameData frameData, Element element) \n{\n    vec2 newUv = frameData.uv;\n    newUv.x *= frameData.resolution.x / frameData.resolution.y;\n    element.pos.x *= frameData.resolution.x / frameData.resolution.y;\n    float size = element.size/frameData.resolution.y;\n    float d = length(newUv - element.pos);\n    float c = smoothstep(size, size - 0.01, d);\n    return vec3(c*element.color);\n}\n       \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    Element elements[4];\n    FrameData frameData = FrameData(iResolution.xy, uv, fragCoord);\n\t//vec3 col = vec3(.0f,.0f,.0f);\n    vec2 squarePos = vec2(0.5f, 0.5f);\n    elements[0] = Element(vec2(0.5f, 0.5f), vec3(1.0,1.0,1.0), 50.0, 1);\n    elements[1] = Element(vec2(0.1f, 0.1f), vec3(.5,.3,1.0), 20.0, 1);\n    elements[2] = Element(vec2(0.5f, 0.5f), vec3(1.0,1.0,1.0), 50.0, 0);\n    elements[3] = Element(vec2(0.1f, 0.1f), vec3(.5,.3,1.0), 20.0, 0);\n    vec3 outcolor;\n    for (int i=0;i<elements.length();i++){\n        switch(elements[i].type) {\n        \tcase 0:\n            \telements[i].pos.x = sin((iTime))*0.5+0.5;\n            \toutcolor += paintCircle(frameData, elements[i]);\n            \tbreak;\n            case 1:\n                //elements[i].pos.x = sin((iTime))*0.5+0.5;\n            \toutcolor += paintSquare(frameData, elements[i]);\n            \tbreak;\n        }\n    \t\n    }\n    fragColor = vec4(outcolor,1.0);\n}","name":"Image","description":"","type":"image"}]}