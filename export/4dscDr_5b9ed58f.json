{"ver":"0.1","info":{"id":"4dscDr","date":"1487776517","viewed":157,"name":"GRAPROG Midterm Patterns","username":"lyradss","description":"Midterms = No Chill < Passion","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["patterns","circle","polygons","shape"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n\n#define PATTERN 9\n\nvec3 colorB1 = vec3(0.000, 0.000, 0.400);\nvec3 colorR1 = vec3(0.820, 0.031, 0.114);\nvec3 colorO = vec3(1.000,0.549,0.000);\nvec3 colorY = vec3(1.000,1.000,0.000);\nvec3 colorB = vec3(0.000,0.000,1.000);\nvec3 colorLB = vec3(0.000,0.749,1.000);\nvec3 colorG = vec3(0.000, 1.000, 0.000);\nvec3 colorR = vec3(1.000, 0.000, 0.000);\nvec3 colorS = vec3(0.647, 0.949, 0.952);\nvec3 colorW = vec3(1.000, 1.000, 1.000);\nvec3 colorP = vec3(1.000, 0.078, 0.576);\nvec3 colorA = vec3(0.831, 0.404, 0.098);\n\nmat2 rotate2d(float angle)\n{\n    return mat2(cos(angle), -sin(angle), sin(angle), cos(angle)); \n}\t\n\nmat2 scale2d(vec2 value)\n{\n    return mat2(value.x, 0, 0, value.y);\n}\n\n\nfloat createPolygon(vec2 uv, int sides, float size)\n{\n\n    float a = atan(uv.x,uv.y) + PI;\n\tfloat r = TWO_PI / float(sides);\n\n\tfloat dist = cos(floor(.5+a/r)*r-a)*length(uv);\n    \n    float value = 1. - smoothstep(.4, .41, dist * 3.);\n    \n    \n    return value;\n}\n\nfloat createPolygon2(vec2 uv, int sides, float size)\n{\n\n    float a = atan(uv.x,uv.y) + PI;\n\tfloat r = TWO_PI / float(sides);\n  \n\tfloat dist = cos(floor(.5+a/r)*r-a)*length(uv);\n\n    float value = 1. - smoothstep(.4, .41, dist * 3.); \n    value +=abs(cos(dist * 500.  ) *0.3) * sin(iTime * 2.) ;\n    \n    \n    return value;\n}\n\nfloat createPolygon3(vec2 uv, int sides, float size)\n{\n\n    float a = atan(uv.x,uv.y) + PI;\n\tfloat r = TWO_PI / float(sides);\n\n\tfloat dist = cos(floor(.5+a/r)*r-a)*length(uv);\n    \n    float value = 1. - smoothstep(.4, .41, dist * 3.); \n    value +=abs(cos(dist * 500.  ) *0.3) * sin(iTime * 2.) ;\n    value += floor(cos(dist*(sin(iTime)))+.3)* .1;\n    value += floor(cos (dist*400.) * 0.2) * sin(iTime * 2.);\n    \n    \n    \n    return value;\n}\n\nfloat createCircle1(vec2 uv, vec2 circlepoints, float radius)\n{\n    \n \n    float dist = distance(circlepoints,uv)*2.;\n    uv -= circlepoints;\n    \n    float angle = atan(uv.y, uv.x);\n    angle += iTime;\n    \n    radius = floor(cos (angle*10.) * 0.9) * sin(iTime * 2.);\n    radius += floor(cos(angle*abs(sin(iTime)))+.3)* .1;\n    \n    float value = 1. - step(radius,dist);  \n    \n   \n    return value;\n}\n\nfloat createCircle2(vec2 uv, vec2 circlepoints, float radius)\n{\n    \n \n    float dist = distance(circlepoints,uv)*2.;\n    uv -= circlepoints;\n    \n    float angle = atan(uv.y, uv.x);\n    angle += iTime;\n    \n    radius = floor(cos (angle*10.) * 0.9) * sin(iTime * 2.);\n    radius += abs(cos(angle * 40.) *0.4) * sin(iTime * 4.);\n    radius += abs(sin(angle * 40. * sin(iTime * 2.)));\n    \n    float value = 1. - step(radius,dist);  \n    \n   \n    return value;\n}\n\nfloat createCircle3(vec2 uv, vec2 circlepoints, float radius)\n{\n    \n \n    float dist = distance(circlepoints,uv)*2.;\n    uv -= circlepoints;\n    \n    float angle = atan(uv.y, uv.x);\n    angle += iTime;\n    \n    radius = cos(3.*angle - 3.);\n    radius += abs(sin(angle * 3.) * sin(iTime * .5));\n    radius /= 2.;\n    \n    float value = 1. - step(radius,dist);  \n    \n   \n    return value;\n}\n\n\nfloat createCircle4(vec2 circle, vec2 uv, float radius)\n{\n    \n \n    float dist = distance(circle,uv)*2.;\n    uv -= circle;\n    \n    float angle = atan(uv.y, uv.x);\n    angle -= iTime;\n   \t\n    radius = cos(10.*angle);\n    radius += cos((60.*angle)*0.1);\n    radius += floor(cos (angle*400.) * 0.2) * sin(iTime * 2.);\n    radius *= abs(cos(angle * 40.) *0.4);\n    radius *= abs(sin(angle * 4.) * sin(iTime * .5)); \n    radius += floor(cos(angle*abs(sin(iTime)))+.3)* .1;\n    \n        \n    float value = 1. - step(radius,dist);\n    \n    \n    \n    return value;\n}\n\nfloat createCircle5(vec2 circle, vec2 uv, float radius)\n{\n    \n \n    float dist = distance(circle,uv)*2.;\n    uv -= circle;\n    \n    float angle = atan(uv.y, uv.x);\n   \tangle += iTime * 5.;\n    radius = cos(10.*angle);\n       \n        \n    float value = 1. - step(radius,dist);\n    \n    \n    \n    return value;\n}\n\n\nfloat createCircle6(vec2 circle, vec2 uv, float radius)\n{\n    \n \n    float dist = distance(circle,uv)*2.;\n    uv -= circle;\n    \n    float angle = atan(uv.y, uv.x);\n   \tangle -= iTime * 5.;\n    radius = cos(10.*angle);\n       \n        \n    float value = 1. - step(radius,dist);\n    \n    \n    \n    return value;\n}\n\nfloat createCircle7(vec2 uv, vec2 circlepoints, float radius)\n{\n    \n \n    float dist = distance(circlepoints,uv)*2.;\n    uv -= circlepoints;\n    \n    float angle = atan(uv.y, uv.x);\n    angle += iTime;\n    \n    radius = sin(4.*angle - 4.);\n    radius += abs(sin(angle * 30.) * sin(iTime * .50));\n    radius /= 2.;\n    \n    float value = 1. - step(radius,dist);  \n    \n   \n    return value;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    \n    if (PATTERN == 1 ){\n        \n    uv*= 5.;\n    \n    vec2 tileIdx = floor(uv);\n \n    float offset = step(1., mod(uv.x, 2.));\n    uv.y += offset*iTime;\n    \n    vec3 color = vec3(0.0);\n    float ratio = iResolution.x/iResolution.y;\n    uv = fract(uv);\n    uv.x *= ratio;\n    \n    vec2 shapePos = vec2(.5*ratio, .5);\n    uv -= shapePos;\n    uv *= rotate2d(sin(iTime * 4.));\n    \n    color = vec3(createPolygon(uv, 4, 5.)) * colorB1;\n    \n    if (tileIdx.x == 1. && tileIdx.y == 0. ||\n        tileIdx.x == 1. && tileIdx.y == 1. ||\n        tileIdx.x == 1. && tileIdx.y == 2. ||\n        tileIdx.x == 1. && tileIdx.y == 3. ||\n        tileIdx.x == 1. && tileIdx.y == 4. ||\n        tileIdx.x == 3. && tileIdx.y == 0. ||\n        tileIdx.x == 3. && tileIdx.y == 1. ||\n        tileIdx.x == 3. && tileIdx.y == 2. ||\n        tileIdx.x == 3. && tileIdx.y == 3. ||\n        tileIdx.x == 3. && tileIdx.y == 4.)\n        color = vec3(createPolygon(uv, 10, 5.)) * colorR1;\n        \n    else if (tileIdx.x == 2. && tileIdx.y == 0. ||\n        tileIdx.x == 2. && tileIdx.y == 1. ||\n        tileIdx.x == 2. && tileIdx.y == 2. ||\n        tileIdx.x == 2. && tileIdx.y == 3. ||\n        tileIdx.x == 2. && tileIdx.y == 4.)\n        color = vec3(createPolygon(uv, 5, 5.)) * colorW;\n      \n\tfragColor = vec4(color,1.0);\n    }\n    \n    \n    //\n    \n    else if (PATTERN == 2 ){\n    \n    uv*= 7.;\n    \n    vec2 tileIdx = floor(uv);\n  \n    float offset = step(1., mod(uv.y, 2.));\n    offset -= step (1.,mod(uv.x, 2.));\n    uv.x += offset*iTime;\n    uv.y += offset*iTime;\n      \n    vec3 color = vec3(0.0);\n    float ratio = iResolution.x/iResolution.y;\n    uv = fract(uv);\n    uv.x *= ratio;\n    \n    vec2 shapePos = vec2(.5*ratio, .5);\n    uv -= shapePos;\n    uv *= rotate2d(sin(iTime * 4.));\n\n    color = vec3(createPolygon(uv, 5, 5.)) * colorLB;\n    \n    if (tileIdx.x == 0. && tileIdx.y == 0. ||\n        tileIdx.x == 0. && tileIdx.y == 2. ||\n        tileIdx.x == 0. && tileIdx.y == 4. ||\n        tileIdx.x == 0. && tileIdx.y == 6. ||\n        tileIdx.x == 1. && tileIdx.y == 1. ||\n        tileIdx.x == 1. && tileIdx.y == 3. ||\n        tileIdx.x == 1. && tileIdx.y == 5. ||\n        tileIdx.x == 2. && tileIdx.y == 0. ||\n        tileIdx.x == 2. && tileIdx.y == 2. ||\n        tileIdx.x == 2. && tileIdx.y == 4. ||\n        tileIdx.x == 2. && tileIdx.y == 6. ||\n        tileIdx.x == 3. && tileIdx.y == 1. ||\n        tileIdx.x == 3. && tileIdx.y == 3. ||\n        tileIdx.x == 3. && tileIdx.y == 5. ||\n        tileIdx.x == 4. && tileIdx.y == 0. ||\n        tileIdx.x == 4. && tileIdx.y == 2. ||\n        tileIdx.x == 4. && tileIdx.y == 4. ||\n        tileIdx.x == 4. && tileIdx.y == 6. ||\n        tileIdx.x == 5. && tileIdx.y == 1. ||\n        tileIdx.x == 5. && tileIdx.y == 3. ||\n        tileIdx.x == 5. && tileIdx.y == 5. ||\n        tileIdx.x == 6. && tileIdx.y == 0. ||\n        tileIdx.x == 6. && tileIdx.y == 2. ||\n        tileIdx.x == 6. && tileIdx.y == 4. ||\n        tileIdx.x == 6. && tileIdx.y == 6. )\n        color = vec3(createPolygon(uv, 4, 5.)) * colorB;\n      \n\tfragColor = vec4(color,1.0);\n    }\n    \n    \n    //\n    \n    else if (PATTERN == 3 ){\n\n    uv*= 2.;\n    \n    vec2 tileIdx = floor(uv);\n \n    vec3 color = vec3(0.0);\n    float ratio = iResolution.x/iResolution.y;\n    uv = fract(uv);\n    uv.x *= ratio;\n    \n    \n    vec2 shapePos = vec2(.5*ratio, .5);\n    uv -= shapePos;\n    uv *= rotate2d(sin(iTime * 10.));\n    uv *= scale2d(vec2(abs(sin(iTime ))));\n    \n    color = vec3(createPolygon2(uv, 8, 5.)) * colorR;\n      \n\tfragColor = vec4(color,1.0);\n    }\n    \n    //\n    \n    else if (PATTERN == 4 ){\n\n    uv*= 3.;\n    \n    vec2 tileIdx = floor(uv);\n \n    vec3 color = vec3(0.0);\n    float ratio = iResolution.x/iResolution.y;\n    uv = fract(uv);\n    \n    vec2 shapePos = vec2(.5*ratio, .5);\n   \n    color = createCircle1(uv, vec2(.5,.5), 0.1) * colorG;\n      \n\tfragColor = vec4(color,1.0);\n    }\n    \n    \n    //\n    \n    \n    else if (PATTERN == 5 ){\n       \n    uv*= 2.;\n    \n    vec2 tileIdx = floor(uv);\n \n    vec3 color = vec3(0.0);\n    float ratio = iResolution.x/iResolution.y;\n    uv = fract(uv);\n    \n    vec2 shapePos = vec2(.5*ratio, .5);\n   \n    color = createCircle2(uv, vec2(.5,.5), 0.1) * colorS;\n      \n\tfragColor = vec4(color,1.0);\n    }\n    \n    \n    //\n    \n     else if (PATTERN == 6 ){\n        \n    uv*= 4.;\n    \n    float offset = step(1., mod(uv.x, 2.));\n    uv.y += offset*iTime;\n    offset += step(0., mod(uv.x, 2.));\n    uv.y += offset*iTime/2.;\n        \n    vec2 tileIdx = floor(uv);\n    vec3 color = vec3(0.0);\n    float ratio = iResolution.x/iResolution.y;\n    uv = fract(uv);\n\n    vec2 shapePos = vec2(.5*ratio, .5);\n   \n    color = createCircle3(uv, vec2(.5,.5), 0.1) * mix(colorS, colorP, abs(sin(iTime / 3.0)));\n      \n\tfragColor = vec4(color,1.0);\n    }\n    \n    \n    else if (PATTERN == 7 ){\n        \n    uv*= 4.;\n    \n    vec2 tileIdx = floor(uv);\n        \n    vec3 color = vec3(0.0);\n    float ratio = iResolution.x/iResolution.y;\n    uv = fract(uv);\n    \n    vec2 shapePos = vec2(.5*ratio, .5);\n    \n    color = createCircle4(uv, vec2(.5,.5), 0.1) * mix(colorW, colorR, abs(sin(iTime / 3.0)));\n     if(tileIdx.x == 0. && tileIdx.y == 0. ||\n        tileIdx.x == 0. && tileIdx.y == 2. ||\n        tileIdx.x == 1. && tileIdx.y == 1. ||\n        tileIdx.x == 1. && tileIdx.y == 3. ||\n        tileIdx.x == 2. && tileIdx.y == 0. ||\n        tileIdx.x == 2. && tileIdx.y == 2. ||\n        tileIdx.x == 3. && tileIdx.y == 1. ||\n        tileIdx.x == 3. && tileIdx.y == 3.)\n        \n        color = createCircle4(uv, vec2(.5,.5), 0.1) * mix(colorR, colorW, abs(sin(iTime / 3.0)));\n      \n\tfragColor = vec4(color,1.0);\n    }\n    \n    \n    //\n    \n    \n    else if (PATTERN == 8 ){\n     \n    uv*= 6.;\n   \n    vec2 tileIdx = floor(uv);\n    vec3 color = vec3(0.0);\n    float ratio = iResolution.x/iResolution.y;\n    uv = fract(uv); \n    \n    vec2 shapePos = vec2(.5*ratio, .5);\n    \n    color = createCircle5(uv, vec2(.5,.5), 0.1) * colorR;\n     if(tileIdx.x == 0. && tileIdx.y == 3. ||\n        tileIdx.x == 0. && tileIdx.y == 5. ||\n        tileIdx.x == 1. && tileIdx.y == 4. ||\n        tileIdx.x == 2. && tileIdx.y == 3. ||\n        tileIdx.x == 2. && tileIdx.y == 5.)\n        \n        color = createCircle6(uv, vec2(.5,.5), 0.1) * mix(colorW, colorB, abs(sin(iTime * 3.0)));\n        \n     else if(tileIdx.x == 0. && tileIdx.y == 4. ||\n        tileIdx.x == 1. && tileIdx.y == 3. ||\n        tileIdx.x == 1. && tileIdx.y == 5. ||\n        tileIdx.x == 2. && tileIdx.y == 4.)\n        \n        color = createCircle6(uv, vec2(.5,.5), 0.1) * mix(colorB, colorW, abs(sin(iTime * 3.0)));\n         \n     if(tileIdx.x == 0. && tileIdx.y == 0. ||\n        tileIdx.x == 1. && tileIdx.y == 0. ||\n        tileIdx.x == 2. && tileIdx.y == 0. ||\n        tileIdx.x == 3. && tileIdx.y == 0. ||\n        tileIdx.x == 4. && tileIdx.y == 0. ||\n        tileIdx.x == 5. && tileIdx.y == 0. ||\n        tileIdx.x == 0. && tileIdx.y == 2. ||\n        tileIdx.x == 1. && tileIdx.y == 2. ||\n        tileIdx.x == 2. && tileIdx.y == 2. ||\n        tileIdx.x == 3. && tileIdx.y == 2. ||\n        tileIdx.x == 4. && tileIdx.y == 2. ||\n        tileIdx.x == 5. && tileIdx.y == 2. ||\n        tileIdx.x == 3. && tileIdx.y == 4. ||\n        tileIdx.x == 4. && tileIdx.y == 4. ||\n        tileIdx.x == 5. && tileIdx.y == 4.)\n       \n         color = createCircle6(uv, vec2(.5,.5), 0.1) * colorW;\n         \n\tfragColor = vec4(color,1.0);\n    }\n    \n    \n    //\n    \n    \n    else if (PATTERN == 9 ){\n\n    uv*= 5.;\n\n    vec2 tileIdx = floor(uv);\n    vec3 color = vec3(0.0);\n    float ratio = iResolution.x/iResolution.y;\n    uv = fract(uv);\n    uv.x *= ratio;\n    \n    vec2 shapePos = vec2(.5*ratio, .5);\n    uv -= shapePos;\n    uv *= scale2d(vec2(abs(sin(iTime ))));\n    \n    color = vec3(createPolygon3(uv, 4, 5.)) * colorS;\n      \n\tfragColor = vec4(color,1.0);\n    }\n    \n    \n    //\n    \n    \n    else if (PATTERN == 10 ){\n\n    uv*= 3.;\n \n    float offset = step(1., mod(uv.x, 2.));\n    uv.y += offset*iTime;\n        \n    vec2 tileIdx = floor(uv);\n    vec3 color = vec3(0.0);\n    float ratio = iResolution.x/iResolution.y;\n    uv = fract(uv);\n\n    vec2 shapePos = vec2(.5*ratio, .5);\n      \n    color = createCircle7(uv, vec2(.5,.5), 0.1) * colorA;\n      \n\tfragColor = vec4(color,1.0);\n    }\n    \n}","name":"Image","description":"","type":"image"}]}