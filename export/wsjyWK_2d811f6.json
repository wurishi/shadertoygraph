{"ver":"0.1","info":{"id":"wsjyWK","date":"1587394412","viewed":1047,"name":"Cosmic rays","username":"NonGrate","description":"Simple audio generation of data gathered from cosmic rays.\nHere: [url]http://www.tien-shan.org/she/vardbaccess/frames-vari.html[/url], 31.03.2020, 0:00:00-3:19:00\nImage: [url]https://bit.ly/2yqzpqO[/url]\n\nFor info: See comments","likes":10,"published":1,"flags":40,"usePreview":0,"tags":["procedural","sound","cosmos","generation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 t_uv = fragCoord/iChannelResolution[3].xy;\n    \n    // Rotation angle\n    float rotation = radians(iTime * -0.3);\n    // Rotation matrix\n    mat2 matrix = mat2(cos(rotation), -sin(rotation), sin(rotation), cos(rotation));\n    // Shift by half to set screen center to 0; 0\n    vec2 rotated_uv = t_uv - 0.5;\n    // Apply rotation matrix\n   \trotated_uv = matrix * rotated_uv;\n    // Reset center to center of screen\n    rotated_uv += 0.5;\n    \n    // Fetch rotated stars texture\n    vec4 stars = texture(iChannel2, rotated_uv * 1.2) * 0.8;\n    // Backup texture if custom is not loaded\n    stars = texture(iChannel1, rotated_uv * 4.0) * 0.3;\n    \n    // https://www.shadertoy.com/view/XlfGRj texture\n    stars = texture(iChannel3, t_uv) * 0.6;\n\n    // Fetch audio generated texture\n    mainSound( in int samp,iTime);\n    vec4 visualization = FRAG_COLOR * 0.6;\n    \n    // As we have R for Low, G for Mid and B for High sounds\n    // We can separate the stars mask by colour:\n    \n    // If stars R and \"audio\" R are within 0.3\n    // Set the pixel to avg of buffer and stars\n    // Set to 0.0 otherwise\n    if (abs(visualization.r - stars.r) > 0.3) {\n        fragColor.r = stars.r / 2.0;\n    } else {\n        fragColor.r = 0.0;\n    }\n    \n    // Same as above for G channel\n    if (abs(visualization.g - stars.g) > 0.3) {\n        fragColor.g = stars.g / 1.5;\n    } else {\n        fragColor.g = 0.0;\n    }\n    \n    // Same as above for B channel\n    // + bigger coefficient, because blue is not visible enough\n    if (abs(visualization.b - stars.b) > 0.3) {\n        fragColor.b = stars.b / 2.0;\n    } else {\n        fragColor.b = 0.0;\n    }\n    \n    // Dim the audio visualization effects\n    fragColor /= 1.1;\n    \n    // Add underlying stars texture\n    fragColor += stars;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"struct Note {\n    // in Hz, see \"common\" tab\n    float frequency;\n    // offset - time in seconds when to start playing note\n    float offset;\n    // duration of a note (1/4, 1/8, ...), see \"common\" tab\n    float duration;\n};\n    \nconst float SPEED = 1.0; // Speed of the sound\n    \nconst float leadTempoRatio = 2.0; // 2 ticks per second\nconst float midTempoRatio = 2.0/3.0; // 1.5 ticks/second\nconst float bassTempoRatio = 1.0; // 1 tick per second\n\n// 200 items, see above\nconst float[] dataLead = float[] (5504.00, 5308.00, 5309.00, 5289.00, 5225.00, 5208.00, 5190.00, 5250.00, 5362.00, 5486.00, 5314.00, 5467.00, 5292.00, 5305.00, 5167.00, 5423.00, 5402.00, 5280.00, 5420.00, 5428.00, 5260.00, 5306.00, 5379.00, 5283.00, 5234.00, 5340.00, 5252.00, 5568.00, 5476.00, 5248.00, 5494.00, 5480.00, 5230.00, 5609.00, 5323.00, 5392.00, 5304.00, 5478.00, 5321.00, 5435.00, 5179.00, 5444.00, 5289.00, 5413.00, 5275.00, 5389.00, 5500.00, 5221.00, 5276.00, 5356.00, 5250.00, 5414.00, 5269.00, 5269.00, 5216.00, 5512.00, 5410.00, 5300.00, 5426.00, 5433.00, 5156.00, 5482.00, 5281.00, 5377.00, 5279.00, 5317.00, 5111.00, 5455.00, 5435.00, 5239.00, 5353.00, 5342.00, 5519.00, 5242.00, 5281.00, 5226.00, 5374.00, 5190.00, 5232.00, 5292.00, 5466.00, 5298.00, 5265.00, 5521.00, 5435.00, 5252.00, 5245.00, 5506.00, 5491.00, 5343.00, 5390.00, 5287.00, 5349.00, 5332.00, 5515.00, 5358.00, 5369.00, 5396.00, 5187.00, 5308.00, 5322.00, 5207.00, 5355.00, 5388.00, 5265.00, 5217.00, 5254.00, 5494.00, 5306.00, 5380.00, 5352.00, 5297.00, 5395.00, 5387.00, 5410.00, 5448.00, 5301.00, 5182.00, 5465.00, 5327.00, 5617.00, 5362.00, 5417.00, 5470.00, 5549.00, 5283.00, 5425.00, 5419.00, 5307.00, 5405.00, 5286.00, 5228.00, 5400.00, 5426.00, 5378.00, 5396.00, 5514.00, 5393.00, 5314.00, 5318.00, 5431.00, 5236.00, 5257.00, 5239.00, 5447.00, 5439.00, 5399.00, 5484.00, 5455.00, 5226.00, 5586.00, 5491.00, 5338.00, 5390.00, 5275.00, 5278.00, 5474.00, 5332.00, 5320.00, 5355.00, 5387.00, 5435.00, 5406.00, 5196.00, 5363.00, 5500.00, 5466.00, 5443.00, 5248.00, 5510.00, 5342.00, 5270.00, 5123.00, 5485.00, 5318.00, 5469.00, 5249.00, 5330.00, 5406.00, 5543.00, 5203.00, 5281.00, 5395.00, 5416.00, 5249.00, 5252.00, 5372.00, 5397.00, 5327.00, 5260.00, 5430.00, 5334.00, 5309.00, 5435.00, 5381.00, 5324.00, 5399.00, 5504.00, 5320.00, 5458.00);\n\n// 150 items\nconst float[] dataMid = float[] (3813.00, 3653.00, 3763.00, 3790.00, 3801.00, 3833.00, 3674.00, 3822.00, 3639.00, 3848.00, 3866.00, 3794.00, 3747.00, 3938.00, 3823.00, 3989.00, 3963.00, 3852.00, 3836.00, 3694.00, 3883.00, 3748.00, 3802.00, 3884.00, 3790.00, 3684.00, 3895.00, 3872.00, 3885.00, 4011.00, 3844.00, 3901.00, 3713.00, 3870.00, 3868.00, 3772.00, 3866.00, 3939.00, 3856.00, 3720.00, 3640.00, 3929.00, 3905.00, 3811.00, 3811.00, 3899.00, 3699.00, 3868.00, 3892.00, 3746.00, 3878.00, 3778.00, 3894.00, 3740.00, 3709.00, 3710.00, 3812.00, 3856.00, 3811.00, 3935.00, 3850.00, 3859.00, 3800.00, 3748.00, 3725.00, 3814.00, 3897.00, 3745.00, 3763.00, 3833.00, 3964.00, 3770.00, 3846.00, 3776.00, 3945.00, 3791.00, 3799.00, 3709.00, 3922.00, 3825.00, 3804.00, 3869.00, 3829.00, 3770.00, 3838.00, 3820.00, 3734.00, 3979.00, 3765.00, 3764.00, 3857.00, 3861.00, 3869.00, 3787.00, 3963.00, 3780.00, 3847.00, 3759.00, 3857.00, 3782.00, 3711.00, 3843.00, 3909.00, 3839.00, 3811.00, 3874.00, 3849.00, 3883.00, 3925.00, 3752.00, 3847.00, 3731.00, 3824.00, 3905.00, 3901.00, 3926.00, 3897.00, 3751.00, 3896.00, 3752.00, 3854.00, 3936.00, 3767.00, 3812.00, 3933.00, 3889.00, 3808.00, 3703.00, 3948.00, 3883.00, 3872.00, 3762.00, 3870.00, 3899.00, 3818.00, 3900.00, 3774.00, 3951.00, 3818.00, 3893.00, 3821.00, 3823.00, 3801.00, 3833.00, 3744.00, 3769.00, 3864.00, 3923.00, 3974.00, 3810.00);\n\n// 100 items\nconst float[] dataBass = float[] (20.00, 14.00, 13.00, 14.00, 10.00, 23.00, 16.00, 18.00, 6.00, 16.00, 18.00, 7.00, 15.00, 13.00, 14.00, 22.00, 12.00, 14.00, 12.00, 14.00, 19.00, 18.00, 8.00, 16.00, 13.00, 12.00, 21.00, 17.00, 22.00, 19.00, 11.00, 16.00, 16.00, 24.00, 16.00, 20.00, 18.00, 20.00, 17.00, 22.00, 23.00, 14.00, 17.00, 16.00, 23.00, 14.00, 15.00, 10.00, 12.00, 14.00, 20.00, 22.00, 14.00, 14.00, 20.00, 24.00, 14.00, 23.00, 20.00, 25.00, 14.00, 17.00, 21.00, 21.00, 18.00, 18.00, 13.00, 11.00, 21.00, 22.00, 16.00, 13.00, 24.00, 26.00, 29.00, 27.00, 18.00, 23.00, 15.00, 18.00, 8.00, 17.00, 24.00, 14.00, 12.00, 18.00, 16.00, 15.00, 25.00, 12.00, 19.00, 11.00, 18.00, 25.00, 21.00, 16.00, 19.00, 24.00, 19.00, 14.00);\n\n//\"Correct\" notes. Currently - C Major scale from C0 to B8\nconst float[] scale = float[] (16.35, 18.35, 20.60, 21.83, 24.50, 27.50, 30.87, 32.70, 36.71, 41.20, 43.65, 49.00, 55.00, 61.74, 65.41, 73.42, 82.41, 87.31, 98.00, 110.00, 123.47, 130.81, 146.83, 164.81, 174.61, 196.00, 220.00, 246.94, 261.63, 293.66, 329.63, 349.23, 392.00, 440.00, 493.88, 523.25, 587.33, 659.25, 698.46, 783.99, 880.00, 987.77, 1046.50, 1174.66, 1318.51, 1396.91, 1567.98, 1760.00, 1975.53, 2093.00, 2349.32, 2637.02, 2793.83, 3135.96, 3520.00, 3951.07, 4186.01, 4698.63, 5274.04, 5587.65, 6271.93, 7040.00, 7902.13);\n\nvec4 FRAG_COLOR = vec4(0.0);\n\nfloat noteFreq(Note note, float time) {\n    // 6.2831 = 2pi\n    // exp() goes exponentially down to fade out the volume\n    // (time / SPEED) to fix pitch after speed change\n    return cos(6.2831 * note.frequency * (time / SPEED)) * exp(-1.0/note.duration * (time - note.offset));\n}\n\n// Maps frequency to the nearest note from [scale]\nfloat nearestNote(float value) {\n    //if (scale[0] > value) return scale[0];\n    \n    // Find last note that is lower than our input frequency\n    for (int i = 1; i < scale.length(); i++) {\n        if (scale[i] > value) {\n            return scale[i - 1];\n        }\n    }\n    \n    // Means the input data is out of \"normal\" range\n    // Try modifying the functions below\n    return scale[0];\n}\n\n// Maps original lead value to comprehensible frequency\n// You can do any changes, 'cause the [nearestNote()]\n// will fix all deviations from the scale\nfloat fixLead(float value) {\n    return nearestNote(value / 8.0);\n}\n\n// Maps original mid value to comprehensible frequency\nfloat fixMid(float value) {\n    return nearestNote(value / 10.0);\n}\n\n// Maps original bass value to comprehensible frequency\nfloat fixBass(float value) {\n    return nearestNote(value * 7.0);\n}\n\n// Main method that is used in the Sound tab to generate sound\n// And in the Buffer A tab to reuse the values in realtime.\n// Both Sound and Image (Buffer) are dependent on time, so we can \"replay\"\n// the data generation and transform it to some image\nvec2 mainSound( in int samp,float time) {\n    time *= SPEED;\n    \n    float result = 0.0;\n    vec4 frag_color = vec4(0.0);\n    frag_color.a = 1.0;\n    \n    // High voice\n    for (int i = 0; i < dataLead.length(); i++) {\n        // Lead instrument; 2.0x tempo, all quarter notes (1/4), start on 2nd second\n        Note noteLead = Note(fixLead(dataLead[i]), float(i) + 2.0, 1.0/4.0);\n        \n        // result = sound\n        // frag_color = picture\n        // += is here because we are combining result with\n        // the \"values\" of previous and/or simultaneous notes\n        if (time > noteLead.offset) {\n            float amplitude = noteFreq(noteLead, time);\n            result += amplitude;\n        \tfrag_color.b += amplitude;\n        }\n    }\n    \n    // Mid voice\n    for (int i = 0; i < dataMid.length(); i++) {\n        // Mid instrument; 1.5x tempo, all half notes (1/4), start on 2nd second\n        Note noteMid = Note(fixMid(dataMid[i]), float(i) * 1.5 + 2.0, 1.0/2.0);\n        \n        if (time > noteMid.offset) {\n            float amplitude = noteFreq(noteMid, time);\n            result += amplitude;\n        \tfrag_color.g += abs(amplitude) * 0.6;\n        }\n    }\n    \n    // Bass voice\n    for (int i = 0; i < dataBass.length(); i++) {\n        // Mid instrument; 1.0x tempo, all whole notes (1/1), start on 2nd second\n        Note noteBass = Note(fixBass(dataBass[i]), float(i) * 2.0 + 2.0, 1.0/1.0);\n        \n        if (time > noteBass.offset) {\n            float amplitude = noteFreq(noteBass, time);\n            result += amplitude;\n        \tfrag_color.r += abs(amplitude) * 0.7;\n        }\n    }\n    \n    // Setting global var for Buffer A to use it\n    FRAG_COLOR = frag_color;\n    \n    // Returning audio for Sound rocessing\n    return vec2(result * 0.20);\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Star Nest by Pablo Roman Andrioli\n// https://www.shadertoy.com/view/XlfGRj\n\n// This content is under the MIT License.\n\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   1.200\n#define tile   0.850\n#define speed  0.001 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,1.);\n\tfloat time=iTime*speed+.25;\n\n\t//mouse rotation\n\tfloat a1=.5+iMouse.x/iResolution.x*2.;\n\tfloat a2=.8+iMouse.y/iResolution.y*2.;\n\tmat2 rot1=mat2(cos(a1),sin(a1),-sin(a1),cos(a1));\n\tmat2 rot2=mat2(cos(a2),sin(a2),-sin(a2),cos(a2));\n\tdir.xz*=rot1;\n\tdir.xy*=rot2;\n\tvec3 from=vec3(1.,.5,0.5);\n\tfrom+=vec3(time*2.,time,-2.);\n\tfrom.xz*=rot1;\n\tfrom.xy*=rot2;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam; // the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.01,1.);\t\n\t\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// vec2 mainSound( in int samp,float time) {} in Common","name":"Sound","description":"","type":"sound"}]}