{"ver":"0.1","info":{"id":"clXSWH","date":"1711361155","viewed":70,"name":"Torus tutorial (AoC)","username":"voland","description":"Just relaxing lesson from AoC","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","torus"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - .5 * iResolution.xy)/iResolution.y;\n    float t = iTime *.2;\n    \n    vec3 ro = vec3(0, 0, -1);\n    vec3 lookat = vec3(0);\n    float zoom = .5;\n    \n    vec3 f = normalize(lookat - ro), // forward\n         r = normalize(cross(vec3(0,1,0), f)), // right\n         u = normalize(cross(f, r)),\n         c = ro + f * zoom, // center of the screen (virtual)\n         i = c + uv.x * r + uv.y * u, // intersection with the real screen\n         rd = normalize(i - ro);\n         \n         \n    \n    float dS, dO;\n    float d1;\n    vec3 p;\n    \n    // RayMarsher\n    for (int i = 0; i < 100; i++) {\n        p = ro + rd * dO;\n        d1 = length(p.xz) - 1.;\n        dS = -(length(vec2(d1, p.y)) - .75);// Torus df (inverted aka \"inside\")\n        if (dS < .001) break;\n        dO += dS;\n        \n    }\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    \n    if (dS < .001){\n        // uv on torus surface\n        float x = atan(p.x, p.z) + t * .5; // -pi to pi\n        float y = atan(d1, p.y);\n        float bands = sin(10. * y + 30. * x);\n        float ripples = sin((10. * x - 30. * y) * 3.) * .5 + .5;\n        float waves = sin(2. * x - 6. * y + 20. * t);\n        \n        float b1 = smoothstep(-.2, .2, bands);\n        float b2 = smoothstep(-.2, .2, bands - .5);\n        float m = b1 * (1. - b2);\n        // col += bands; love this!...\n        m = max(m, ripples * b2 * max(0., waves));\n        m += max(0., waves * .3 * b2);\n        m = mix(m, 1. - m, smoothstep(-.3, .3, sin(2.*x + t)));\n        \n        col += m;\n    }\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}