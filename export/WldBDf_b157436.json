{"ver":"0.1","info":{"id":"WldBDf","date":"1613602669","viewed":195,"name":"Matrix visualization","username":"sarbes","description":"A quick and dirty port of my visualization (https://github.com/xbmc/visualization.matrix) for the Kodi Mediacenter version 19 (codename \"Matrix\"). It will be featured in the upcoming release.\n\nSorry for the mess, but I lack time for cleanup.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["visualization","matrix"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGzn","filepath":"/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","previewfilepath":"/media/ap/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst float cRNDSEED1 = 170.12;\nconst float cRNDSEED2 = 7572.1;\nconst float cINTENSITY = 1.0;\nconst float cMININTENSITY = 0.075;\nconst float cDISTORTFACTORX = 0.6;\nconst float cDISTORTFACTORY = 0.4;\nconst float cVIGNETTEINTENSITY = 0.05;\nconst float cDotSize = 8.000000;\n#define cColumns iResolution.x/cDotSize\nconst float cNoiseFluctuation = 0.0025000;\nconst float cDistortThreshold = 0.250000;\nconst float cRainHighlights = 1.120000;\nconst vec3 cColor = vec3(0.200000,0.800000,1.000000);\n#define dNoise\n#define dCrtCurve\n\nfloat h11(float p)\n{\n return fract(20.12345+sin(p*cRNDSEED1)*cRNDSEED2);\n}\n\nfloat waveform(vec2 uv)\n{\n float wave = texture(iChannel0,vec2(uv.x*.15+.5,0.75)).x*.5 + uv.y;\n return abs(smoothstep(.225,.275,wave) -.5);\n}\n\n#ifdef dNoise\nfloat noise(vec2 gv)\n{\n return texture(iChannel2, (gv*.035431) + iTime*cNoiseFluctuation).x;\n}\n#endif\n\nvec3 bw2col(float bw, vec2 uv)\n{\n float d = length(fract(uv*cColumns)-.5);\n float peakcolor = smoothstep(.35,.0,d)*bw;\n float basecolor = smoothstep(.85,.0,d)*bw;\n return basecolor*cColor+peakcolor;\n}\n\n#ifdef dCrtCurve\nvec2 getUV(vec2 fragCoord)\n{\n vec2 uv = (fragCoord.xy-0.5*iResolution.xy)/iResolution.y;\n uv = uv / (1.00 - length(uv*.1));\n return uv;\n}\n#else\nvec2 getUV(vec2 fragCoord)\n{\n vec2 uv = (fragCoord.xy-0.5*iResolution.xy)/iResolution.y;\n return uv;\n}\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //general stuff\n    vec2 uv = getUV(fragCoord);\n    \n    //rain\n    vec2 gv = floor(uv*cColumns);\n    float rnd = h11(gv.x) + 0.1;\n    float bw = 1. - fract((gv.y*.0024)+(iTime+20.)*.25*rnd);\n    \n    //VHS-like distortions\n    float wav = texture( iChannel0, vec2((uv.y +1.)*.5,1.0) ).x-.5;\n\tfloat distort = sign(wav) * max(abs(wav)-cDistortThreshold,.0);\n    \n    //KODI texture\n    float tex = texture(iChannel1, (uv+vec2(.3,0))*vec2(.15,1.)+.5-vec2(distort*cDISTORTFACTORX,distort*cDISTORTFACTORY)).a;\n    tex *= sign(.4 + uv.x);\n    tex *= sign(0.45 - uv.x);\n    tex *= .9 - wav*.2;\n    //Shadow effect around the KODI texture. Needs a prepared texture to work.\n    float shadow = (wav+.5)*.25;\n    tex = (max(shadow,tex)-shadow)/(1.-shadow);\n    \n    //\"interlaced\" logo distortion effect\n    float line = mod(gv.y*sign(wav),2.);\n    float distort_abs = abs(distort);\n    tex *= 1. - (line*10.*distort_abs + 5.*distort_abs);\n    \n    bw *= tex*.7 + .1;\n    \n    //brightens lines where distortion are occuring\n\tbw += distort_abs*.2;\n    \n    //FFT stuff (visualization)\n    //might need some scaling\n    float fft = texture( iChannel0, vec2((1.-abs(uv.x-distort*.2))*.7,0.0) ).x;\n    fft *= 1.25;\n    fft *= (3.2 -abs(0.-uv.x*1.3))*0.75;\n    fft *= 1.8;\n    \n    bw=bw+bw*fft*0.4*cRainHighlights;\n    bw += bw*clamp((pow(fft*1.3*cRainHighlights,2.)-12.),.0,.6);\n    bw += bw*clamp((pow(fft*1.0*cRainHighlights,3.)-23.),.0,.7);\n    \n    //noise texture\n\tbw *= noise(gv);\n\n\t//vignette effect\n\tfloat vignette = length(uv)*cVIGNETTEINTENSITY;\n\tbw -= vignette;\n\t\n    //pseudo pixels (dots)\n    vec3 col = bw2col(bw,uv);\n    \n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}