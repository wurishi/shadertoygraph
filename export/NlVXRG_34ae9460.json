{"ver":"0.1","info":{"id":"NlVXRG","date":"1641063064","viewed":122,"name":"Metaballs lava lamp","username":"LucasR","description":"Here's my second shader: a lava lamp made with metaballs","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["metaballs","lavalamp"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float smin(float a, float b, float k){ // smooth min\n// source: https://inspirnathan.com/posts/51-shadertoy-tutorial-part-5\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\nfloat sdfCircle(vec2 uv, vec2 center, float radius){\n    return length(uv - center) - radius;\n}\n\nfloat dot2(in vec2 v){return dot(v,v);} // same source as trapezoid SDF\n\nfloat sdTrapezoid(in vec2 p, in float r1, float r2, float he){\n// source: https://iquilezles.org/articles/distfunctions2d\n    vec2 k1 = vec2(r2,he);\n    vec2 k2 = vec2(r2-r1,2.0*he);\n\n\tp.x = abs(p.x);\n    vec2 ca = vec2(max(0.0,p.x-((p.y<0.0)?r1:r2)), abs(p.y)-he);\n    vec2 cb = p - k1 + k2*clamp( dot(k1-p,k2)/dot2(k2), 0.0, 1.0 );\n    \n    float s = (cb.x < 0.0 && ca.y < 0.0) ? -1.0 : 1.0;\n    \n    return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\nfloat udSegment(in vec2 p, in vec2 a, in vec2 b){\n    vec2 ba = b-a;\n    vec2 pa = p-a;\n    float h =clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length(pa-h*ba);\n}\n\nfloat metaballs(vec2 uv){\n    float sp = 0.2; // speed\n    float t = iTime * sp;\n    float r = 0.05;\n    float m1 = sdfCircle(uv, vec2(0.2*abs(sin(t)*sin(t))-0.1, 0.15*sin(t)+0.072), r);\n    float m2 = sdfCircle(uv, vec2(0.15*sin(3.1415/2.*t), 0.02*sin(5.*t)), r);\n    float m3 = sdfCircle(uv, vec2(0.104646*cos(t-2.), 0.1254684*sin(-t+0.4)), r);\n    float m4 = sdfCircle(uv, vec2(0.2*cos(t)-0.2, 0.13*sin(t)), r);\n    \n    float smFac = 0.1; // smoothing factor\n    float res = smin(m1, m2, smFac);\n    res = smin(res, m3, smFac);\n    res = smin(res, m4, smFac);\n    return res;\n}\n\nvec4 draw(vec2 uv){\n    float t = iTime;\n    vec4 bgCol = mix(vec4(1., 1., 0., 1.), vec4(0., 0., 1., 1.), sin(10.*sin(0.31415*t)*uv.y)+.5);\n    bgCol = mix(bgCol, vec4(0., 0.8, 0., 1.), sin(10.*cos(0.1*t)*uv.x)+.5);\n    //bgCol = vec4(0.7); // in case the background is distracting, just uncomment this line\n    vec4 frameCol = vec4(1., 0.15, 0., 1.);\n    vec4 glassCol = vec4(182., 243., 250., 255.)/255.;\n    vec4 mtCol = vec4(1., 0.3, 0., 1.);\n    float blur = 0.004;\n    // glass background - the min and the offset make it transparent\n    vec4 col = mix(glassCol, bgCol, min(1., .4+smoothstep(0., blur, sdTrapezoid(uv-vec2(0., 0.075), 0.2, 0.1, 0.172)) ));\n    // metaballs - the max makes them be visible only inside the glass\n    col = mix(mtCol, col, smoothstep(0., blur, max(metaballs(uv), sdTrapezoid(uv-vec2(0., 0.075), 0.2, 0.1, 0.172)) ));\n    // glass borders\n    col = mix(glassCol, col, smoothstep(0., blur, udSegment(vec2(abs(uv.x), uv.y), vec2(0.2, -0.1), vec2(0.1, 0.25)) ));\n    // top\n    col = mix(frameCol, col, smoothstep(0., blur, sdTrapezoid(uv-vec2(0., 0.35), 0.1, 0.05, 0.1)));\n    // bottom\n    col = mix(frameCol, col, smoothstep(0., blur, sdTrapezoid(uv-vec2(0., -0.2), 0.1, 0.2, 0.1)));\n    // base\n    col = mix(frameCol, col, smoothstep(0., blur, sdTrapezoid(uv-vec2(0., -0.35), 0.15, 0.1, 0.1)));\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5; // move origin to center of viewport\n    uv.x *= iResolution.x/iResolution.y; // make viewport square\n    \n    vec4 col = draw(uv);\n    \n    // Output to screen\n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}