{"ver":"0.1","info":{"id":"dscXRj","date":"1680089976","viewed":62,"name":"Mandelbrot and other fractals","username":"RJVB09","description":"one of my first fractals","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float INVSPEED = 100.0;\n\nvec3 hsl2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\n\nvec3 getColor(float t) {\n    vec3 color;\n    if (t < 0.5) {\n        color = mix(vec3(0, 0, 0), hsl2rgb(vec3((iTime*0.07/INVSPEED),1.0,0.5)), t * 2.0);\n    } else {\n        color = mix(hsl2rgb(vec3((iTime*0.07/INVSPEED)+0.125,1.0,0.5)), vec3(1.0, 1.0, 1.0), (t - 0.5) * 2.0);\n    }\n    return color;\n}\n\nvec2 mandelbrot(vec2 z, vec2 c)\n{\n    return vec2(z.x*z.x - z.y*z.y + c.x, 2.0*z.x*z.y + c.y);\n}\n\nvec2 mandelbrotcubed(vec2 z, vec2 c)\n{\n    return vec2(z.x*z.x*z.x - 3.0*z.x*z.y*z.y - c.x, 3.0*z.y*z.x*z.x - z.y*z.y*z.y + c.y);\n}\n\nvec2 burningship(vec2 z, vec2 c)\n{\n    return vec2(z.x*z.x - z.y*z.y + c.x, 2.0*abs(z.x*z.y) - c.y);\n}\n\nvec2 rotateVector(vec2 v, float t)\n{\n    return vec2(v.x*cos(t)-v.y*sin(t),v.x*sin(t)+v.y*cos(t));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 camPos = vec2(0,0);\n    float zoom = 1.0;\n\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspect = iResolution.x/iResolution.y;\n    uv -= vec2(0.5,0.5);\n    uv /= vec2(0.25*zoom,0.25*zoom*aspect);\n    uv += camPos;\n    uv = rotateVector(uv,0.0);\n    \n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    int iterations = 200;\n    int currentIterations = 0;\n    vec3 col = vec3(0.0,0.0,0.0);\n    //float speed = 4.0*pow(cos(iTime/4.0),2.0)+4.0;\n    //float inverseSpeed = 100.0;\n    \n    vec2 c = 0.7885*vec2(0.8*cos(iTime/INVSPEED)-0.17,sin(iTime/INVSPEED));\n    //vec2 c = 0.2885*vec2(cos(iTime/4.0)+0.1*cos(iTime/0.40),sin(iTime/4.0)+0.1*sin(iTime/0.40));\n    vec2 z = uv.xy;\n    //vec2 z = vec2(0.0,0.0);\n    //vec2 c = uv.xy;\n    \n    for (int i = 1; i < iterations; i++)\n    {\n        z = mandelbrot(z,c);\n        if (length(z) > 2.0)\n        {\n            col = vec3(1.0,1.0,1.0)/float(i);\n            currentIterations = i;\n            break;\n        }\n    }\n    \n    if (currentIterations == 0 && length(c) <= 2.0)\n        col = vec3(0.0,0.0,0.0);\n    else\n        col = getColor(pow(float(currentIterations)/float(iterations),0.5));\n        //col = hsl2rgb(vec3(0.025*float(currentIterations),1.0,0.5));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}