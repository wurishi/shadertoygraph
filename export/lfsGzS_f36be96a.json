{"ver":"0.1","info":{"id":"lfsGzS","date":"1703213204","viewed":45,"name":"Unreachable","username":"banni","description":"Raymarched scene. Thanks Inigo & Kishimisu.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","octahedron"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec3 palette(float t) {\n    return .5+.5*cos(6.28318*(t+vec3(.3,.416,.557)));\n}\nfloat sdSphere(vec3 p, float s)\n{\n    return length(p) - s;\n}\n\nfloat sdOctahedron(vec3 p, float s) {\n    p = abs(p);\n    return (p.x+p.y+p.z-s)*0.57735027;\n}\n\nfloat map(vec3 p)\n{\n    vec3 q = p;\n    q.z += iTime * 5.;\n    q.xy = mod(q.xy, 2.) - 2./2.;\n    q.z = mod(q.z, .55) - .55 / 2.;\n    float d = sdOctahedron(q, .9995);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    vec3 ro = vec3(0.0f, 2.0f, -3.0f);\n    vec3 rd = normalize(vec3(uv, 3.0f));\n    //rd.xz *= mat2(c,-s,s,c);\n    float t = 0.0f;\n    vec3 col = vec3(0);\n    int i;\n    for(i = 0; i < 100; i++)\n    {\n        vec3 p = ro + rd * t;\n        p.x += sin(t) * .05;\n        p.y += sin(t * .234234) * .2;\n        float a = t * .1 * sin(iTime * .03) * .5;\n        p.xy *= mat2(cos(a), -sin(a), sin(a), cos(a));\n        \n        float d = map(p);\n        t += d;\n        if( d < .001 || t > 1000.)break;\n    }\n    col = palette(t * .05 + float(i) * 222.);\n    fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}