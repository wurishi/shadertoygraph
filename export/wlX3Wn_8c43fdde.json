{"ver":"0.1","info":{"id":"wlX3Wn","date":"1556032716","viewed":771,"name":"Zelda illumination","username":"munrocket","description":"Trying to implement cartoon-like shader.","likes":22,"published":1,"flags":0,"usePreview":1,"tags":["cartoon","shading","zelda"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {    \n    // Grid parameters\n    vec2 gridsize = vec2(5., 3.);\n    float zoom = 0.75;\n    \n    // Cell coordinates\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 cellcoord = fract(uv * gridsize);\n    vec2 cellgrid = floor(uv * gridsize) / gridsize;\n    vec2 ratio = vec2(iResolution.x / gridsize.x / iResolution.y * gridsize.y , 1.0);\n    vec2 xy = (2. * cellcoord - 1.) / zoom * ratio;\n        \n    // AA mask, planet normals, noize\n    float aa_mask = smoothstep(1. + 0.02 * gridsize.y, 1., dot(xy, xy));\n    vec3 N = vec3(xy, sqrt(1. - clamp(dot(xy, xy), 0., 1.)));\n    vec3 noize = texture(iChannel0, uv).xyz;\n    \n    // Material/scene properties\n    vec3 albedo = vec3(.25 + .5*cellgrid.x, .45, 0.25 + .5*cellgrid.y);\n    vec3 white = vec3(.99, .95, .8);\n    float Kd = 0.33;\n    float Kh = 0.5;\n    float Kb = -0.1;\n    vec3 V = vec3(0.,0.,1.);\n    vec3 L = normalize(vec3(sin(iTime/2.),cos(iTime/2.), sin(iTime/8.)));\n    \n    // Diffuse light\n    float ldotn = dot(L, N);\n    vec3 diffuse = mix(vec3(0), 1.0 - albedo, Kd * smoothstep(0.0, 0.02, ldotn));\n    \n    // Halo light\n    float vdotn = smoothstep(0.73, .85, 1. - dot(V, N));\n    vec3 halo = vdotn * mix(vec3(Kb), Kh * white, smoothstep(0.0, 0.08, ldotn));\n    \n    // Result color\n    vec3 planet = albedo + diffuse + halo;\n    vec3 space = vec3(step(1.46, length(noize - vec3(1.)))) * (1. - noize);\n    fragColor = vec4(mix(space, planet, aa_mask), 1.);\n}","name":"Image","description":"","type":"image"}]}