{"ver":"0.1","info":{"id":"ddX3zB","date":"1666314565","viewed":136,"name":"Carbon background","username":"BadBadDog","description":"Use this to generate desktop backgrounds or textures. You can change the material type and the scale in the code.","likes":2,"published":1,"flags":0,"usePreview":1,"tags":["carbon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n\n\n\n\n\nfloat scale = 1.0;\n\n\nvec3 material = vec3(0.5, 0.5, 0.5);\n\n\n\nvec3 GetHex( vec2 uv )\n{\n    float size = 20.0;\n    \n    uv.x = uv.x + (0.5/size) * floor(uv.y*size*2.0);\n\n    vec3 ret = vec3( (fract(uv.x*size)-0.5)*0.2, 1, pow(abs(fract(uv.y*size*2.0)-0.5),3.0));\n    \n    vec3 crs = vec3( (fract(uv.x*size+0.5)-0.5), 1, pow(abs(fract(uv.y*size*2.0)-0.5),2.0));\n    \n    ret = mix( crs*0.2, ret, smoothstep(0.1, 0.2, fract(uv.x*size)) * smoothstep( 0.9, 0.8, fract(uv.x*size) ) );\n    \n    material = mix( vec3(0.2), material, smoothstep(0.1, 0.3, fract(uv.x*size)) * smoothstep( 0.9, 0.7, fract(uv.x*size) ) );\n\n    return normalize(ret);\n}\n\n\n\n\n\n\nvec3 GetLeap( vec2 uv )\n{\n    float size = 100.0;\n    \n    uv.x = uv.x + (0.5/size) * floor(uv.y*size*2.0);\n\n    vec3 ret = vec3( (fract(uv.x*size)-0.5)*0.2, 1, pow(abs(fract(uv.y*size*2.0)-0.5),3.0));\n    \n    vec3 crs = vec3( (fract(uv.x*size+0.5)-0.5), 1, pow(abs(fract(uv.y*size*2.0)-0.5),2.0));\n    \n    ret = mix( crs*0.2, ret, smoothstep(0.1, 0.2, fract(uv.x*size)) * smoothstep( 0.9, 0.8, fract(uv.x*size) ) );\n    \n    material = mix( vec3(0.2), material, smoothstep(0.1, 0.3, fract(uv.x*size)) * smoothstep( 0.9, 0.7, fract(uv.x*size) ) );\n\n    return normalize(ret);\n}\n\n\n\n\nvec3 GetBrick( vec2 uv )\n{\n    float size = 80.0;\n    \n    uv.x = uv.x + (0.5/size) * floor(uv.y*size*2.0);\n\n    vec3 ret = vec3( (fract(uv.x*size)-0.5)*0.2, 1, pow(abs(fract(uv.y*size*2.0)-0.5),3.0));\n    \n    \n\n    return normalize(ret);\n}\n\n\nvec3 GetCarbon( vec2 uv )\n{\n    float size = 90.0;\n    \n    vec2 uv1 = uv;\n    vec2 uv2 = uv;\n    \n    uv1.x = uv1.x + (0.5/size) * floor(uv.y*size*2.0);\n\n    vec3 ret1 = vec3( (fract(uv1.x*size)-0.5)*0.2, 1, pow(abs(fract(uv.y*size*2.0)-0.5),5.0));\n    \n    uv2.y = uv2.y + (0.5/size) * floor(uv.x*size*2.0);\n    \n    vec3 ret2 = vec3( pow(abs(fract(uv.x*size*2.0)-0.5),5.0), 1, (fract(uv2.y*size)-0.5)*0.5);\n    \n\n    float sw = float(int((uv1.x+10.0)*size)%2);\n    vec3 ret = mix( ret1, ret2, sw );\n    \n    material = mix( material, vec3(0.1), sw );\n\n    return normalize(ret);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv -= vec2(0.5);\n    uv.x *= iResolution.x/iResolution.y;\n\n\n    //uv += tx.xy*0.01;\n\n    //vec3 normal = GetHex( uv );\n    //vec3 normal = GetLeap( uv );\n    //vec3 normal = GetBrick( uv );\n    vec3 normal = GetCarbon( uv );\n    \n    //vec4 tx = texture( iChannel0, uv );\n    //vec3 normal = normalize(vec3( (tx.z*2.0-1.0)*0.01, 1.0-tx.z, (tx.y*2.0-1.0)*0.01 ));\n    \n    \n    vec3 light = vec3(0.0, 1.0, -0.2);\n    vec3 toEye = normalize(vec3(0.0,2.0,0.0) - vec3(uv.x, 0.0, uv.y));    \n    vec3 lightRef = normalize(reflect(-light, normal)); \n    float spec = pow(dot(lightRef, toEye), 16.0f);  \n    vec3 col = 0.8 * material*max(spec, 0.0); \n\n\n    //col = mix( col, vec3(0.0, 0.0, 0.9), smoothstep( 0.9, 0.1, normal.y ) );\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}