{"ver":"0.1","info":{"id":"Xcdfzf","date":"1733341343","viewed":127,"name":"2d Rain in water","username":"LucasNunes","description":"Rain effect over water with 2d image as background","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["2d","water","rain"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float random(float seed) {\n    return fract(sin(seed) * 43758.5453);\n}\n\nfloat randomInRange(float seed, float a, float b) {\n    return a + (b - a) * random(seed);\n}\n\nvec2 getRandomPoint(float seed, float timeOffset) {\n    return vec2(randomInRange(seed + timeOffset, -0.2, 0.2), randomInRange(seed + timeOffset + 1.0, -0.2, 0.2));\n}\n\nvec2 getRandomPoint2(float seed) {\n    return vec2(randomInRange(seed, -0.2, 0.2), randomInRange(seed + 1.0, -0.2, 0.2));\n}\n\nfloat triangularWave(float x) {\n    return 1.0 - abs(2.0 * x - 1.0);\n}\n\nvec3 pointsT1[60] = vec3[](\n    vec3(-1.2,  0.7, 1.0),\n    vec3(-0.7, -0.4, 1.0),\n    vec3( 0.3,  0.7, 1.0),\n    vec3( 1.5, -1.0, 1.0),\n    vec3( 1.2, -0.5, 1.0),\n    vec3(-2.0, -0.2, 1.0),\n    vec3( 0.1,  0.9, 1.0),\n    vec3( 1.3,  0.5, 1.0),\n    vec3(-0.8, -0.6, 1.0),\n    vec3( 0.6, -0.1, 1.0),\n    vec3(-1.4, -0.9, 1.0),\n    vec3(-1.5,  0.7, 1.0),\n    vec3( 0.2, -0.8, 1.0),\n    vec3( 1.0, -0.9, 1.0),\n    vec3(-0.2,  0.1, 1.0),\n    vec3(-1.1,  0.2, 1.0),\n    vec3( 1.2,  0.7, 1.0),\n    vec3( 0.6,  0.0, 1.0),\n    vec3(-1.7,  0.4, 1.0),\n    vec3( 0.1, -0.7, 1.0),\n    vec3(-0.6,  0.1, 1.0),\n    vec3( 0.8, -0.8, 1.0),\n    vec3( 1.4,  0.2, 1.0),\n    vec3(-0.6,  0.6, 1.0),\n    vec3( 1.0,  0.1, 1.0),\n    vec3(-1.9,  0.3, 1.0),\n    vec3( 0.5, -0.8, 1.0),\n    vec3(-0.2,  0.7, 1.0),\n    vec3( 1.7, -0.5, 1.0),\n    vec3( 1.4,  0.6, 1.0),\n    vec3(-1.5, -0.3, 1.0),\n    vec3( 0.2, -0.9, 1.0),\n    vec3(-0.6,  0.5, 1.0),\n    vec3( 1.9, -0.4, 1.0),\n    vec3( 0.8,  0.9, 1.0),\n    vec3(-0.7, -0.1, 1.0),\n    vec3( 1.2,  0.3, 1.0),\n    vec3(-1.8, -0.7, 1.0),\n    vec3( 1.0, -0.2, 1.0),\n    vec3(-0.9,  0.2, 1.0),\n    vec3( 1.5, -0.6, 1.0),\n    vec3( 0.7,  0.4, 1.0),\n    vec3(-1.6,  0.0, 1.0),\n    vec3( 1.1, -0.8, 1.0),\n    vec3(-0.3,  0.8, 1.0),\n    vec3( 0.6,  0.1, 1.0),\n    vec3(-1.2, -0.5, 1.0),\n    vec3( 0.4,  0.3, 1.0),\n    vec3( 1.8, -0.6, 1.0),\n    vec3(-1.0,  0.2, 1.0),\n    vec3( 1.6, -0.4, 1.0),\n    vec3( 0.3,  0.7, 1.0),\n    vec3(-0.5, -0.9, 1.0),\n    vec3( 1.3,  0.5, 1.0),\n    vec3(-1.7, -0.2, 1.0),\n    vec3( 0.9,  0.6, 1.0),\n    vec3(-0.4, -0.8, 1.0),\n    vec3( 1.4,  0.9, 1.0),\n    vec3(-1.3,  0.0, 1.0),\n    vec3( 0.1, -0.7, 1.0)\n);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.y;\n    int pointCount = 60;\n    \n    float scale = 2.0;\n    float speed = iTime * 0.6;\n    float ray = 0.5;\n    float fractions = 9.0;\n    vec4 waterCollor = vec4(0.0, 0.1, 0.2, 1);\n    vec4 dropCollor = vec4(0.03, 0.03, 0.045, 1);\n    float intensity = 1.0;\n    float sizeByTime = 1.2;\n    float startSize = 0.1;\n\n    float minResolution = min(iResolution.x, iResolution.y);\n    vec2 pos = (fragCoord.xy * 2.0 - iResolution.xy) / minResolution;\n    \n    vec4 dropsColor = vec4(0.0);\n    vec2 refractionOffset = vec2(0.0);\n    \n    for (int i = 0; i < pointCount; i++)\n    {   \n        float distortion = abs(fract(pointsT1[i].x + pointsT1[i].y));\n        \n        ray = clamp(distortion, 0.1, 0.6);\n        \n        float timeOffset = speed / pointsT1[i].x * 0.5;\n        float z = pointsT1[i].z - cos(timeOffset) * 0.5;\n\n        float coordToPoint = length(pos - pointsT1[i].xy) / scale;\n        \n        float ray_speed_distort = ray * (speed + distortion);\n        float d = ray_speed_distort - coordToPoint;\n        float blur = sizeByTime * coordToPoint + (startSize * distortion) * 2.0;\n        \n        float fracted = smoothstep(-blur, 0.0, fract(d * fractions + distortion) - ray);\n        fracted *= 1.0 - fracted;\n\n        float alpha = smoothstep(ray, 0.0, coordToPoint) * 10.0;\n        dropsColor += dropCollor * alpha * fracted * triangularWave(fract(z));   \n        \n        vec2 direction = normalize(pos - pointsT1[i].xy);\n        refractionOffset += direction * fracted * 0.2 * dropsColor.b;\n    }\n    \n    vec2 refractedUV = uv + refractionOffset;\n    vec4 _floor = texture(iChannel0, refractedUV).rgba;\n    fragColor = (_floor + waterCollor + dropsColor + (dropsColor * _floor)) * intensity;\n}\n","name":"Image","description":"","type":"image"}]}