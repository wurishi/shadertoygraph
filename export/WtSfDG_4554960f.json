{"ver":"0.1","info":{"id":"WtSfDG","date":"1599688650","viewed":209,"name":"Particle Accelerator (song)","username":"athibaul","description":"A simple song, developing a small idea I had in SuperCollider.\n/!\\ FLASHING VISUALS /!\\","likes":11,"published":1,"flags":8,"usePreview":0,"tags":["sound","song"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pal(x,c,d) 0.5+0.5*cos(c*x+d)\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0*fragCoord - iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    float animTime = iTime;\n    float animAmpl = 1.0;\n    if(22. < iTime && iTime < 24.)\n    {\n        animTime *= 4.0;\n        animAmpl = 2.0;\n    }\n    if(24. < iTime && iTime < 40.)\n    {\n        animTime *= 2.0;\n        animAmpl = 1.5;\n    }\n    if(40. < iTime && iTime < 56.)\n    {\n        animTime *= 6.0;\n        animAmpl *= 2.0;\n    }\n    vec3 bg = pal(dot(uv,animAmpl*vec2(cos(animTime),sin(animTime*1.618))), vec3(1.0,0.812,0.618), vec3(animTime+3.));\n    col = mix(col, pow(bg, vec3(2.2)), 0.5);\n    \n\t// Axes\n    col = mix(col, vec3(1.0), smoothstep(0.01,0.0,abs(uv.y)));\n    //col = mix(col, vec3(1.0), smoothstep(0.01,0.0,abs(uv.x)));\n    \n    \n    // Plot the sound signal!\n    vec2 sig = mainSound(0,snapTime(iTime) + 0.001*uv.x) * 2.0;\n    // Shadows\n    col = mix(col, vec3(0), 0.3*smoothstep(1.0,0.0,abs(sig.x-uv.y)));\n    col = mix(col, vec3(0), 0.3*smoothstep(1.0,0.0,abs(sig.y-uv.y)));\n    // Bloom\n    //col = mix(col, vec3(1), 0.2*abs(sig.x)*smoothstep(0.5,0.0,abs(sig.x-uv.y)));\n    // Filled curve\n    col = mix(col, vec3(0.9,0.7,0.3), 0.7*smoothstep(0.0,0.1,sign(sig.x)*(sig.x-uv.y)) * step(0.0,sign(sig.x)*sign(uv.y)));\n    col = mix(col, vec3(0.3,0.7,0.9), 0.7*smoothstep(0.0,0.1,sign(sig.y)*(sig.y-uv.y)) * step(0.0,sign(sig.y)*sign(uv.y)));\n    //col = mix(col, vec3(0.9,0.7,0.3), smoothstep(1.5*fwidth(wy),0.0,abs(wy-uv.y)));\n\n    col = pow(col, vec3(1.0/2.2));\n    \n    float time = iTime;\n    if(  39. < time && time < 40.\n      || 54. < time && time < 56.)\n    {\n        // Big breakdown! Let's blink the visuals.\n        col = (iFrame % 6) <= 1 ? col : 1.0-col;\n    }\n    \n       \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\nAdapting my SuperCollider snippet:\nplay{Mix(((LFPulse.kr(1/8)/3+1)*[1,3/2,2.4]).collect{|f|BPF.ar(Saw.ar(f*[220,221]),LFDNoise0.kr(8,500,800),LFDNoise0.kr(4,0.1,0.15))})/14}\n\nSince GPU computes each sample in parallel, using filters is no good,\nso let's instead use a custom waveform with some strong peaking frequencies!\n(cf. Common tab)\n\n\n\n*/\n\n\n// mainSound defined in Common tab","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"#define TAU 2.0*3.1415926\n\n#define W(t,o,w) (sin(TAU*fract(t)*((o)+(w))) + sin(TAU*fract(t)*((o)-(w))))*0.5\n#define HASH3(p) vec3(hash11(p+0.0), hash11(p+0.1), hash11(p+0.2))\n\nfloat myWaveform( float t, float order, float w )\n{\n    return W(t,order,w);\n}\n\n\n// Hash function by Dave Hoskins\n// https://www.shadertoy.com/view/4djSRW\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\n\n\n\nmat2x3 frequency( float time )\n{\n    vec2 fundamental = vec2(220, 220.1);\n    if(54. < time && time < 56.)\n        fundamental *= exp2(-round(3.0*smoothstep(54.,56.,time)));\n    \n    if(22. < time && time < 24.\n      || 39. < time && time < 40.\n      || 54. < time && time < 56.)\n        return outerProduct(vec3(0.25,0.5,1.5), fundamental);\n    vec3 ratios = vec3(1, 1.5, 2.4);\n    if(24. < time && time < 39.)\n        ratios.x *= 0.5;\n    if(40. < time && time < 54.)\n        ratios.x *= 0.25;\n    mat2x3 freqs = outerProduct(ratios, fundamental);\n    float playTheFourth = 1.0 + 0.333*step(0.0,sin(TAU*0.25*time));\n    return freqs * playTheFourth;\n}\n\nvec3 resonanceParam( float time )\n{\n    if(time < 16.)\n        return vec3(1.0);\n    if(16. < time && time < 22.)\n        return vec3(1.0 + 10.0*smoothstep(16.,24.,time));\n    if(22. < time && time < 24.)\n        return vec3(3.0 + 10.0*smoothstep(22.,24.,time));\n    if(24. < time && time < 39.)\n        return exp2(vec3(3.0,4.0,4.0)*HASH3(floor(time*8.0)));\n    if(39. < time && time < 40.)\n        return vec3(3.0 + 10.0*smoothstep(39.,40.,time));\n    if(40. < time && time < 54.)\n        return exp2(vec3(4.0,6.0,5.0)*HASH3(floor(time*8.0)));\n    if(54. < time && time < 56.)\n        return vec3(1.0 + 13.0*smoothstep(56.,54.,time));\n}\n\nvec3 waveformParam( float time )\n{\n    if(time < 8.)\n        return vec3(0.5*smoothstep(6.,8.,time));\n    if(8. < time && time < 22.)\n    {\n        return HASH3(floor(time*4.0));\n    }\n    if(22. < time && time < 24.)\n        return vec3(0.5);\n    if(24. < time && time < 39.)\n        return HASH3(floor(time*4.0));\n    \n    return vec3(0.5);\n}\n\nvec3 mainVolume( float time )\n{\n    vec3 slowTremolo = 1.0 + 0.1*sin(TAU*vec3(1.0,1.41,1.62)*time);\n    float pumping = fract(2.0*time);\n    if(time < 8.)\n        return 0.07*smoothstep(0.,1.0,time)*slowTremolo;\n    if(8. < time && time < 22.)\n        return 0.1*mix(vec3(1.0,0.9,0.8),vec3(1),fract(2.0*time)) * slowTremolo;\n    if(22. < time && time < 24.)\n        return mix(vec3(0.02,0.2,0.05),vec3(0.2,0.05,0.2),\n                   smoothstep(22.5,22.,time) + smoothstep(23.5,24.,time));\n    if(24. < time && time < 39.)\n        return mix(vec3(0.05,0,0), vec3(0.2,0.12,0.1), pumping);\n    if(40. < time && time < 54.)\n        return mix(vec3(0.05,0.0,0.0), vec3(0.25,0.2,0.2), pumping);\n    if(54. < time)\n        return mix(vec3(0.2,0.15,0.15), vec3(0), smoothstep(55.5,56.,time));\n    \n    return vec3(0.15);\n}\n\n\nvec2 mainSound( in int samp, float time )\n{\n    mat2x3 freqs = frequency(time);\n    vec3 w = waveformParam(time);\n    vec3 r = resonanceParam(time);\n    vec3 v = mainVolume(time);\n    float left = dot(W(freqs[0]*time,r,w), v) ;\n    float right = dot(W(freqs[1]*time+0.5,r,w), v) ;\n    return vec2(left, right);\n    //return vec2(sin(TAU*vec2(219,221)*time)) * 0.1;\n    //return vec2(myWaveform(440.0*time, 1.0, 5.-5.*cos(time))) * 0.1;\n}\n\nfloat snapTime( float time )\n{\n    // Snap time to a multiple of a period so that signal moves less on the screen\n    float f0 = 220.05*0.1;\n    float playTheFourth = 1.0 + 0.333*step(0.0,sin(TAU*0.25*time));\n    f0 *= playTheFourth;\n    //float f0 = frequency(time)[0][0] * 0.1 + 0.005;\n    return round(time*f0)/f0;\n}","name":"Common","description":"","type":"common"}]}