{"ver":"0.1","info":{"id":"XlSyzR","date":"1507074263","viewed":158,"name":"Reveal - Layers & Kernels ","username":"walth23","description":"Reveal texture layer underneath top layer with mouse movement","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","classassignment"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float blurVal = 0.111; \n\n//Kernel matrices\nmat3 blur = mat3(\n    blurVal, blurVal, blurVal, // first column \n    blurVal, blurVal, blurVal,\n    blurVal, blurVal, blurVal \n); \n\nmat3 sharpen = mat3(\n    0.0, -1, 0.0,\n    -1, 5, -1, \n    0.0, -1, 0.0 \n);\n\nmat3 emboss = mat3(\n    -2, -1, 0.0,\n    -1, 1, 1,\n    0.0, 1, 2\n);\n\nmat3 outline = mat3(\n    -1, -1, -1,\n    -1, 8, -1,\n    -1, -1, -1\n);\n\nmat3 topSobel = mat3(\n    1, 2, 1,\n    0.0, 0.0, 0.0,\n    -1, -2, -1\n);\n\n//Layer variables\nvec3 bgColor = vec3(0.5, 0.9, 1.0);\nvec3 layerColor = vec3(0.0, 0.0, 0.0);\n\nvec4 layer1,layer2, layer3;\nvec4 compositeLayers;\n\nconst float Layer1Alpha = 1.0; //set transparency\nconst float Layer2Alpha = 1.0;\nfloat layer3Alpha;\n\nconst float RevealRadius = 0.1;\n\n//Pixel coordinate variables\nvec2 fragC, uv, mouseUv;\n\n//Perform pixel-specific processing\nvec3 pixelSample(const int X, const int Y, in vec2 fragCoord, sampler2D textureName)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy * iChannelResolution[0].xy;\n    uv = (uv + vec2(X, Y)) / iChannelResolution[0].xy ;\n    \n    return texture(textureName, uv).xyz;\n}\n\n//Apply processing to all screenspace pixels\nvec3 applyFilter(in vec2 fragCoord, const mat3 kernel, in sampler2D textureName)\n{\n    vec3 sum = vec3(0.0,0.0,0.0);\n\t     \n    for (int i = 0; i <= 2; i++)\n    {\n        for (int j = 0; j <= 2; j++)\n        {\n        \tsum += (pixelSample((i-1), (j-1), fragCoord, textureName) * kernel[i][j]);\n        }\n    }\n\n    return sum;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfragC = fragCoord.xy;\n    \n  \tuv = fragC / iResolution.xy;\n    uv.y *= iResolution.y / iResolution.x;\n    \n  \tmouseUv = iMouse.xy / iResolution.xy;  \n\tmouseUv.y *= iResolution.y / iResolution.x;\n   \n    //Background\n    layer1 = vec4(bgColor, Layer1Alpha);\n    \n    //Mid Sharpened Layers\n    layerColor = applyFilter(fragC, sharpen, iChannel0);   \n    layer2 = vec4(layerColor, Layer2Alpha);\n    \n    //Top Blurred Layer \n   \tlayerColor = applyFilter(fragC, blur, iChannel1);\n    layer3Alpha = step(RevealRadius, length(uv - mouseUv));\n    layer3 = vec4(layerColor, layer3Alpha);\n    \n    //output\n    compositeLayers = mix(layer1, layer2, layer2.a);\n    compositeLayers = mix(compositeLayers, layer3, layer3.a);\n    \n\tfragColor = compositeLayers;\n}","name":"Image","description":"","type":"image"}]}