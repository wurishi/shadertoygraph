{"ver":"0.1","info":{"id":"ss3cDX","date":"1654149358","viewed":165,"name":"Scale Noise","username":"LuncyTB","description":"Try to combie Perlin noise and Voronoi noise.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n * Copyright (c) 2022 LuncyTB. All rights reserved.\n */\n\n#define PI 3.14159\n\n// #define ABS\n\nvec2 hash2_s(in vec2 uv) {\n    vec2 k = vec2(\n        fract(sin(uv.x * 23.31 + uv.y * -36.31) * 70.1321),\n        fract(sin(uv.y * 7.30 + uv.x * -53.12) * 55.5791)\n    );\n    float r = k.x * PI * 2.0;\n    float l = pow(k.y + 0.001, 0.5);\n    return vec2(cos(r) * l, sin(r) * l);\n}\n\nfloat perlinNoise(in vec2 uv, in float size) {\n    vec2 e = vec2(0.0, 1.0);\n    vec2 v00 = normalize(hash2_s(floor(uv / size) + e.xx));\n    vec2 v01 = normalize(hash2_s(floor(uv / size) + e.xy));\n    vec2 v11 = normalize(hash2_s(floor(uv / size) + e.yy));\n    vec2 v10 = normalize(hash2_s(floor(uv / size) + e.yx));\n    vec2 k = fract(uv / size);\n    /* if (k.x < 0.5) {\n        if (k.y < 0.5) {\n            return v00.x * 0.5 + 0.5;\n        } else {\n            return v01.x * 0.5 + 0.5;\n        }\n    } else {\n        if (k.y < 0.5) {\n            return v10.x * 0.5 + 0.5;\n        } else {\n            return v11.x * 0.5 + 0.5;\n        }\n    } */ // Debug\n    \n#ifdef ABS\n    return 2.0 * abs(mix(\n        mix(dot(v00, k - e.xx), dot(v01, k - e.xy), -cos(k.y * PI) * 0.5 + 0.5),\n        mix(dot(v10, k - e.yx), dot(v11, k - e.yy), -cos(k.y * PI) * 0.5 + 0.5),\n        -cos(k.x * PI) * 0.5 + 0.5\n    ));\n#endif\n    return mix(\n        mix(dot(v00, k - e.xx), dot(v01, k - e.xy), -cos(k.y * PI) * 0.5 + 0.5),\n        mix(dot(v10, k - e.yx), dot(v11, k - e.yy), -cos(k.y * PI) * 0.5 + 0.5),\n        -cos(k.x * PI) * 0.5 + 0.5\n    ) + 0.5;\n    // I use cos to smoothly interpolate.\n}\n\nfloat cloud(in vec2 uv, in float size, in float times, in float att) {\n    float v = 0.0, sum = 0.0;\n    for (float i = 0.0; i < times + 1.0; i++) {\n        float k = pow(att, i);\n        v += k * perlinNoise(uv, size * pow(0.5, i));\n        sum += k;\n    }\n    return v / sum;\n}\n\n#define PI 3.14159\n\n#define INVERSE\n\nvec2 hash2(in vec2 uv) {\n    vec2 n = vec2(\n        fract(sin(uv.x * 34.0123 + uv.y * 3.7712) * 99.7803),\n        fract(sin(uv.y * 48.1333 - uv.x * 19.571) * 64.1601)\n    );\n    float r = n.x * PI * 2.0;\n    float l = pow(n.y, 0.5);\n    return vec2(cos(r) * l, sin(r) * l);\n}\n\nfloat vnoise(in vec2 uv, in float size, in float thin) {\n    vec3 e = vec3(0.0, 1.0, -1.0);\n    float d = 10.0;\n    vec2 v00 = e.xx + 0.5 + hash2(floor(uv / size) + e.xx) * 0.5;\n    vec2 v01 = e.xy + 0.5 + hash2(floor(uv / size) + e.xy) * 0.5;\n    vec2 v11 = e.yy + 0.5 + hash2(floor(uv / size) + e.yy) * 0.5;\n    vec2 v10 = e.yx + 0.5 + hash2(floor(uv / size) + e.yx) * 0.5;\n    vec2 v1b = e.yz + 0.5 + hash2(floor(uv / size) + e.yz) * 0.5;\n    vec2 v0b = e.xz + 0.5 + hash2(floor(uv / size) + e.xz) * 0.5;\n    vec2 vbb = e.zz + 0.5 + hash2(floor(uv / size) + e.zz) * 0.5;\n    vec2 vb0 = e.zx + 0.5 + hash2(floor(uv / size) + e.zx) * 0.5;\n    vec2 vb1 = e.zy + 0.5 + hash2(floor(uv / size) + e.zy) * 0.5;\n    vec2 k = fract(uv / size);\n    d = min(d, distance(k, v00));\n    d = min(d, distance(k, v01));\n    d = min(d, distance(k, v11));\n    d = min(d, distance(k, v10));\n    d = min(d, distance(k, v1b));\n    d = min(d, distance(k, v0b));\n    d = min(d, distance(k, vbb));\n    d = min(d, distance(k, vb0));\n    d = min(d, distance(k, vb1));\n#ifdef INVERSE\n    return 1.0 - (pow(d, thin));\n#endif\n    return pow(d, thin);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragCoord += 64.0 * vec2(cos(iTime * 0.40), sin(iTime * 0.21));\n    vec2 e = vec2(1.0, -1.0) * 0.1;\n    float plsize = 64.0;\n    float ctrv = cloud(fragCoord, plsize, 1.0, 0.2);\n    float baseTime = perlinNoise(fragCoord, 123.0) * PI * 0.6 + 0.4;\n    vec3 normal = normalize(\n        cross(vec3(e.xy, cloud(fragCoord + e.xy, plsize, 1.0, 0.2) - ctrv), \n            vec3(e.xx, cloud(fragCoord + e.xx, plsize, 1.0, 0.2) - ctrv)) +\n        cross(vec3(e.yx, cloud(fragCoord + e.yx, plsize, 1.0, 0.2) - ctrv), \n            vec3(e.yy, cloud(fragCoord + e.yy, plsize, 1.0, 0.2) - ctrv)));\n\n    float press = abs(cos((baseTime * 0.2 + 0.8) * baseTime + iTime * 5.0));\n    vec3 col = vec3(vnoise(fragCoord - press * 628.0 * normal.xy, 32.0, 1.2));\n    col = col * (0.1 + 0.9 * ctrv) * vec3(0.4, 0.6, 0.7) + \n        mix(vec3(0.0), vec3(1.0, 0.6, 0.3) * 0.3, pow(press, 2.0) * 0.2);\n\n    // Output to screen\n    fragColor = vec4(pow(col, vec3(1.0 / 2.2)), 1.0);\n}","name":"Image","description":"","type":"image"}]}