{"ver":"0.1","info":{"id":"7lKyRD","date":"1661093991","viewed":86,"name":"Manhattan Noise","username":"aria","description":"Manhattan / taxicab / Linfinity distance evaluates distances with max(|x2-x1|,|y2-y1|).\n\nYou can also play with L2 distance, L1 distance, octogonal distance by uncommenting lines.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","worley","bug","pattern","short","voronoid"],"hasliked":0,"parentid":"MtlyR8","parentname":"Manhattan Voronoi distance"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define N 3   // tested neighborhood. Make it odd > 3 if R is high \n#define R .5  // jittering radius. .5 = anywhere in the tile. could be < or >\n\n// rand 1D, rand 2D, signed rand\n#define rnd(p)\tfract(sin( dot(p, vec2(12.9898, 78.233) )       ) * 43758.5453 )\n#define rnd2(p) fract(sin( (p) * mat2(127.1,311.7, 269.5,183.3) ) * 43758.5453 )\n             // mat3( 127.1,311.7, 74.7, 269.5,183.3,246.1, 113.5,271.9,124.6))\n#define srnd(p)  ( 2.*rnd(p) -1. )\n#define srnd2(p) ( 2.*rnd(p) -1. )\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U /= 100.;\n    float m=1e9,m2, c=1e2, v,w;\n    \n    for (int k=0; k<N*N; k++) {          // --- visit 3x3 neighbor tiles ------------------\n        vec2 iU = floor(U)+.5,           // tile center \n              g = iU + vec2(k%N,k/N)-1., // neighbor cell\n              p =  g+ srnd2(g)*R -U     // vector to jittered cell node\n                 +.1*sin(vec2(1.6,0)+3.14*srnd(g)),         // time jittering\n              q = p * mat2(1,-1,1,1)*.707;                        // pi/4 rotation\n        c = min(c,length(p));            \n                                         \n        p = abs(p); v = max(p.x,p.y);    \n        if (v < m) m2 = m, m = v;      \n        else if (v < m2) m2 = v;        \n    }\n                          // distance to voronoi diagram\n    O = vec4( 1.-m );\n}","name":"Image","description":"","type":"image"}]}