{"ver":"0.1","info":{"id":"l3yGDm","date":"1717715758","viewed":111,"name":"Kaleidoscope_","username":"illus0r","description":"Tried to make simple kaleidoscope tiling. Are there any simpler/faster ways to achieve this?","likes":5,"published":3,"flags":0,"usePreview":0,"tags":["kaleidoscope"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// folding by @gaz\nvec2 fold(vec2 p, vec2 n) {\n    float g = dot(p, n);\n    return (p - (g - abs(g)) * n);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord.xy * 2. - iResolution.xy) / iResolution.y + .0001;\n    uv *= 2.;\n\n    vec2 n = vec2(.5, sqrt(3.) / 2.);\n\n    uv = mod(uv, vec2(3, n.y * 2.));\n\n    uv.x -= 1.;\n    for (int i = 0; i < 4; i++) {\n        uv.x -= 1.;\n        uv = fold(uv, vec2(n.y, n.x));\n        uv = fold(uv, vec2(n.y, -n.x));\n    }\n    \n    fragColor = texture(iChannel0, uv);\n}\n","name":"Image","description":"","type":"image"}]}