{"ver":"0.1","info":{"id":"lsffDS","date":"1497813371","viewed":281,"name":"Playing with IQs code","username":"pthextract","description":"Testing iq's code.\n\nOriginal code:\n[url]https://www.shadertoy.com/view/Xds3zN[/url]\n\nI did create a simple ripple in the plane when touching down, but there is a problem with normals I think because distfield is not correct when plane is distorted. :) \n\n\n","likes":2,"published":1,"flags":64,"usePreview":0,"tags":["raymarching","sphere","iq","checker","code","pattern","capsule"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"ldfXR2","filepath":"https://soundcloud.com/espenvh/heightened-senses","previewfilepath":"https://soundcloud.com/espenvh/heightened-senses","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n    \n\n// A list of useful distance function to simple primitives, and an example on how to \n// do some interesting boolean operations, repetition and displacement.\n//\n// More info here: https://iquilezles.org/articles/distfunctions\n\n// Modified by pthextract in 2017-Jun-18\n\n\n#define AA 1   // make this 1 is your machine is too slow\n\n//------------------------------------------------------------------\n\n\n\n\nfloat sdCapP( vec3 p, vec3 a, vec3 b, float la,float lb)\n{\n    float l=length(a-b);\n    float l1=clamp(dot(a-p,a-b)/l/l,0.,1.);\n    float ll=length((p-=a)-(b-=a)*clamp(dot(p,b)/dot(b,b), 0.0, 1.0 ));\n    //float l2=dot(b-p,b-a)/length(b-a)/length(b-a);\n    return (-lb*l1--+la*l1)+ll;\n}\n\n\n\nfloat sdPlane( vec3 p )//with some topografi\n{\n    \n\treturn p.y-.1*sin(length(p))-.1/length(p)+.1*sin(p.x)-.3;\n}\n\nfloat sdPlaneVec(vec3 p, vec3 a,vec3 b,float len)\n{\n    return dot(p,b-a)/length(b-a)-len;\n  \n}\n\n\nfloat sdTruePlane( vec3 p )\n{\n\treturn p.y-.5/length(1./p);\n}\n\n\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    p=p.xzy;\n    vec3 q = abs(p);\n#if 0\n    return max(q.z-h.y,max((q.x*0.866025+q.y*0.5),q.y)-h.x);\n#else\n    float d1 = q.z-h.y;\n    float d2 = max((q.x*0.866025+q.y*0.5),q.y)-h.x;\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n#endif\n}\n\n\n\n\n\n//------------------------------------------------------------------\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d2,d1);\n}\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn ((d1.x<d2.x) ? d1 : d2);\n    \n}\n\n\n\n\n\n//------------------------------------------------------------------\n\nvec2 map( in vec3 pos )\n{\n    \n   //for (float x=0.;x<2;x??)\n    vec3 upndown=vec3(-.5*mod(iDate.w*3.,22.),2.*pow(sin(iDate.w*3.)+1.,.33)-1.,0); \n        vec3 groin=vec3( -.0,1.5, 0)+upndown;\n    vec3 lknee=groin+vec3( .4,-.3,-.2);\n    vec3 rknee=groin+vec3( 0,-.4,.2);\n    vec3 leg=vec3(-0.1,-.4,0);\n     vec3 chest=groin+vec3(0,.4,0);\n    vec3 shjoint=vec3(0,.2,0);\n    vec3 arm=vec3(0,0,.3);\n    vec3 rarm=vec3(0.2,-0.2,.6);\n    vec3 larm=vec3(0,-0.2,-.6);\n      vec3 head=vec3(0,-.45,0);\n     vec3 forearm=vec3(.4,-.2,0);\n    vec3 toe=vec3(.4,0,0)/2.;\n    float color=44. ;\n    vec3 hand=vec3(0.1,0,0);\n    vec3 thumb=vec3(0.04,.14,0);\n    vec3 hip=vec3(0,0,.6)/4.;\n    vec3 under=vec3(0.,sdTruePlane(rknee+leg),0.);\n    float underover=clamp(under.y,-.05,.05);\n    under.y=clamp(under.y,-100.,.05);\n    float cdist=6.*distance(pos,rknee+leg);\n    vec3 under2=vec3(0.,sdTruePlane(lknee+leg),0.);\n    under2.y=clamp(under.y,-100.,.05);\n    float cdist2=9.*distance(pos,lknee+leg);\n    \nvec2 \n    \n    //res = opU( , vec2( sdCapP(    pos, groin+vec3( 0,-.4,.4),groin,.1,.3 ), (1.+sin(iTime))*20. ) );\n    //res = opU( vec2( sdPlane(     pos+vec3(0,.5,0)), .0 ), sdPlane(     pos+vec3(0,.5,0)), .0 ) );\n    \n     // res = opU( vec2( sdPlane(     pos+vec3(0,.5,0)), .0 ), sdPlane(     pos+vec3(0,.5,0)), color) );\n     \n     res = opU( vec2(sdTruePlane(     pos+vec3(0,0,0)-.9*under/cdist-.9*under2/cdist2), .0 ), vec2( sdCapP(    pos,lknee,groin-hip,.1,.2 ), color) );\n  \n     //res = opU( vec2(sdPlane(     pos+vec3(0,0,0)), .0 ), vec2( sdCapP(    pos,lknee,groin,.1,.3 ), color) );\n  \n    res = opU( res, vec2( sdCapP(    pos, rknee,groin+hip,.1,.2 ), color ));\n     res = opU( res, vec2( sdCapP(    pos,lknee,lknee+leg,.1,.1 ), color ));\n    res = opU( res, vec2( sdCapP(    pos, rknee,rknee+leg,.1,.1 ), color ));\n      res = opU( res, vec2( sdCapP(    pos,lknee+leg+toe,lknee+leg,.1,.1 ), color ));\n    res = opU( res, vec2( sdCapP(    pos, rknee+leg+toe,rknee+leg,.1,.1 ), color ));\n    \n    res = opU( res, vec2( sdCapP(    pos,chest,groin,.35,.25 ), color+10.));\n       res = opU( res, vec2( sdCapP(    pos,chest+shjoint+arm,chest+rarm,.2,.1 ), color ));\n        res = opU( res, vec2( sdCapP(    pos,chest+shjoint-arm,chest+larm,.2,.1 ), color ));\n    res = opU( res, vec2( sdCapP(    pos,chest,chest-head,.1,.25 ), color+25. ));\n    under.y=underover/8.;\n    under.y=under.y/abs(under.y)*pow(abs(under.y),.5);\n        res = opU( res, vec2( sdCapP(    pos,chest+rarm+forearm+under,chest+rarm,.09,.1 ), color ));\n        res = opU( res, vec2( sdCapP(    pos,chest+larm+forearm+under,chest+larm,.09,.1 ), color ));\n     res = opU( res, vec2( sdCapP(    pos,chest+rarm+forearm+under,chest+rarm+forearm+hand+under,.09,.08 ), color ));\n        res = opU( res, vec2( sdCapP(    pos,chest+larm+forearm+under,chest+larm+forearm+hand+under,.09,.08 ), color ));\n  res = opU( res, vec2( sdCapP(    pos,chest+rarm+forearm+under,chest+rarm+forearm+thumb+under,.06,.05 ), color ));\n        res = opU( res, vec2( sdCapP(    pos,chest+larm+forearm+under,chest+larm+forearm+thumb+under,.06,.05 ), color ));\n    float hexc=acos(0.)/3.;\n    for (float x=0.;x++<12.;)\n    {res = opU( res,-.1+ vec2( sdHexPrism(  pos-2.5*vec3(sin(iDate.w+hexc*x),sin(iDate.w*x+x)/19., cos(iDate.w+hexc*x)), vec2(.5,.5) ),10.0*x ) );\n    }\n  vec3 nupos=clamp(pos,1.+.1*sin(3.*(pos.x+pos.z)),9.);\nres = opU( res,vec2(7.-length(nupos)-.5*sin(pos.y),iDate.w*10.+10.*pos.x+10.*pos.z+2.*pos.y));\n\n    \n   \n    \n    return res;\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 1.0;\n    float tmax = 30.0;\n   \n#if 0\n    // bounding volume\n    float tp1 = (0.0-ro.y)/rd.y; if( tp1>0.0 ) tmax = min( tmax, tp1 );\n    float tp2 = (1.6-ro.y)/rd.y; if( tp2>0.0 ) { if( ro.y>1.6 ) tmin = max( tmin, tp2 );\n                                                 else           tmax = min( tmax, tp2 ); }\n#endif\n    \n    float t = tmin;\n    float m = -1.0;\n    for( int i=0; i<64; i++ )\n    {\n\t    float precis = 0.0005*t;\n\t    vec2 res = map( ro+rd*t );\n        if( res.x<precis || t>tmax ) break;\n        t += res.x;\n\t    m = res.y;\n    }\n\n    if( t>tmax ) m=-1.0;\n    return vec2( t, m );\n}\n\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    return normalize( e.xyy*map( pos + e.xyy ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ).x );\n    /*\n\tvec3 eps = vec3( 0.0005, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n\t*/\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    vec3 col = vec3(0.7, 0.9, 1.0) +rd.y*0.8;\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    if( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        vec3 ref = reflect( rd, nor );\n        \n        // material        \n\t\tcol = 0.45 + 0.35*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n        if( m<1.5 )\n        {\n            \n            float f = mod( floor(5.0*pos.z) + floor(5.0*pos.x), 2.0);\n            col = 0.3 + 0.1*f*vec3(1.0);\n        }\n\n        // lighitng        \n        float occ = calcAO( pos, nor );\n\t\tvec3  lig = normalize( vec3(-0.4, 0.7, -0.6) );\n\t\tfloat amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n        float dom = smoothstep( -0.1, 0.1, ref.y );\n        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n\t\tfloat spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);\n        \n        dif *= softshadow( pos, lig, 0.02, 5.5 );\n        dom *= softshadow( pos, ref, 0.02, 5.5 );\n\n\t\tvec3 lin = vec3(0.0);\n        lin += 1.30*dif*vec3(1.00,0.80,0.55);\n\t\tlin += 2.00*spe*vec3(1.00,0.90,0.70)*dif;\n        lin += 0.40*amb*vec3(0.40,0.60,1.00)*occ;\n        lin += 0.50*dom*vec3(0.40,0.60,1.00)*occ;\n        lin += 0.50*bac*vec3(0.25,0.25,0.25)*occ;\n        lin += 0.25*fre*vec3(1.00,1.00,1.00)*occ;\n\t\tcol = col*lin;\n\n    \tcol = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0002*t*t*t ) );\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mo = iMouse.xy/iResolution.xy;\n\tfloat time = 15.0 + iTime;\n\n    \n    vec3 tot = vec3(0.0);\n#if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n#else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n#endif\n\n\t\t// camera\t\n        vec3 ro = vec3( -0.5+4.*cos(0.3*time + 6.0*mo.x), 20. + 5.0*mo.y, 0.5 + 3.0*sin(0.3*time + 6.0*mo.x) );\n \t\tro.y-=0.9*    sdPlane(ro);//drop 90% towards ground\n        \n          vec3 ta = vec3( -0., 1.0, 0. );\n        // camera-to-world transformation\n        mat3 ca = setCamera( ro, ta, 0.0 );\n        // ray direction\n        vec3 rd = ca * normalize( vec3(p.xy,2.0) );\n\n        // render\t\n        vec3 col = render( ro, rd );\n\n\t\t// gamma\n        col = pow( col, vec3(0.4545) );\n\n        tot += col;\n#if AA>1\n    }\n    tot /= float(AA*AA);\n#endif\n\n    \n    fragColor = vec4( tot, 1.0 );\n    fragColor=fragColor*.7+.3*fragColor*fragColor;\n}","name":"Image","description":"","type":"image"}]}