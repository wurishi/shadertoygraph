{"ver":"0.1","info":{"id":"flcXW7","date":"1639192750","viewed":206,"name":"Circular floodfill with colors","username":"Balint","description":"Draw with the mouse","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["floodfillvoronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Output to screen\n    vec4 raw = texture(iChannel0, uv);\n    if (fragCoord.x < iResolution.x / 2.0) {\n        fragColor = raw;\n    } else {\n        float len = length(raw.xy - 0.5);\n        if (len > 30.0 / 255.0) {\n            fragColor.rgb = vec3(0);\n            return;\n        }\n        float hue = raw.b;\n        vec3 color = hsv2rgb(vec3(hue, 1.0, 1.0));\n        fragColor.rgb = color;\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// This buffer stores all previous click positions\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    if (iMouse.z > 0.0) {\n        // If there was a click, check if it was over the current pixel\n        if (distance(iMouse.xy, fragCoord) < 1.0) {\n            // If it was, set the color to white\n            fragColor = vec4(1.0, 1.0, float(iFrame % 256) / 255.0, 1);\n            return;\n        }\n    }\n    // Otherwise sample the previous color (for temporal storage)\n    vec2 uv = fragCoord / iResolution.xy;    \n    fragColor = texture(iChannel0, uv);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"const float MAX_VALUE = 30.0 / 255.0;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    // Sample Buffer A to check for clicks\n    vec3 click = texture(iChannel0, uv).rgb;\n    if (click.r > 0.5) {\n        // If there was a click here, set value to maximum\n        fragColor.rgb = vec3(0.5, 0.5, click.b);\n        return;\n    }\n    \n    // Otherwise sample the neighbours in the previous state of this buffer\n    ivec2 iFragCoord = ivec2(fragCoord);\n    vec3 neighbourLeft = texelFetch(iChannel1, iFragCoord - ivec2(1, 0) , 0).xyz + vec3(1.0, 0.0, 0.0) / 255.0;\n    vec3 neighbourRight = texelFetch(iChannel1, iFragCoord + ivec2(1, 0) , 0).xyz - vec3(1.0, 0.0, 0.0) / 255.0;\n    vec3 neighbourUp = texelFetch(iChannel1, iFragCoord - ivec2(0, 1) , 0).xyz + vec3(0.0, 1.0, 0.0) / 255.0;\n    vec3 neighbourDown = texelFetch(iChannel1, iFragCoord + ivec2(0, 1) , 0).xyz - vec3(0.0, 1.0, 0.0) / 255.0;\n    // Select the largest neighbour\n    vec3 closestNeighbour = neighbourLeft;\n    if (length(neighbourRight.xy - 0.5) < length(closestNeighbour.xy - 0.5)) closestNeighbour = neighbourRight;\n    if (length(neighbourUp.xy - 0.5) < length(closestNeighbour.xy - 0.5)) closestNeighbour = neighbourUp;\n    if (length(neighbourDown.xy - 0.5) < length(closestNeighbour.xy - 0.5)) closestNeighbour = neighbourDown;\n    if (length(closestNeighbour.xy - 0.5) > MAX_VALUE) {\n        fragColor.rgb = vec3(0);\n        return;\n    }\n    \n    // Set the value of the current pixel to 1 minus the largest neighbour\n    fragColor.rgb = vec3(closestNeighbour);\n}","name":"Buffer B","description":"","type":"buffer"}]}