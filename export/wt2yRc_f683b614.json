{"ver":"0.1","info":{"id":"wt2yRc","date":"1618870724","viewed":521,"name":"glitch art gif screen","username":"Carandiru","description":"motion graphics gif for my voxel flatscreen !\nbeam me that pixel light !","likes":13,"published":3,"flags":32,"usePreview":0,"tags":["retro"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// http://bit.ly/supersinfulsilicon\n\n// shader by Jason Tully is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License.\n// Based on a work at https://www.shadertoy.com/view/wt2yRc\n// Permissions beyond the scope of this license may be available at http://bit.ly/supersinfulsilicon\n\n\n// glitch method originally by *airtight* https://www.shadertoy.com/view/Msfyzf\n\nfloat rand(in float t)\n{\n    t *= 1.0f / iChannelResolution[0].x;\n    t = fract(t);\n    return textureLod(iChannel0, vec2(t, fract(GOLDEN_RATIO * t)), 0.0f).r;\n}\n\nfloat noise1d(float p){\n\tfloat fl = floor(p);\n\tfloat fc = fract(p);\n\treturn mix(rand(fl), rand(fl + 1.0), fc);\n}\n\nfloat glitch (vec2 uv, float stripCount, float amount, float maxShift){\n    \n    float speed = 15.0;\n    float t = iTime * speed;\n    float stepT = floor(t); //every second\n    float seed = rand(stepT); //rand every second\n    \n    //rand y offset\n    uv.y += seed * stripCount;\n    \n    float stripId = floor(uv.y * stripCount) / stripCount;\n    float xOffset = (rand(stripId) - 0.5f * maxShift) * maxShift ; //-maxShift <-> maxShift\n    \n    // only apply xoffset to small chunks of x range\n    float xn = noise1d(( seed + uv.x + stripId * 20.0 )* stripCount/4. );\n    float showOffset  = step(1.0 - amount ,xn);\n    \n    return showOffset * xOffset;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 invR = 1.0f / iResolution.xy;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 uvd = uv;\n    \n    //pulsate glitch amount\n    float glitchAmount = sin(iTime* 8.0) /2.0 + 0.5;\n    \n    //spikey noise\n    glitchAmount *= smoothstep(0.15,1.,texture(iChannel1,uv).r) * 8.0f;\n    \n    //fatty chunks\n    float offset = glitch (uv, 15., 0.2 , 0.1  * glitchAmount);\n    \n    //medium chunks\n    offset += glitch (uv, 50., 0.1, 0.05 * glitchAmount);\n    uvd.x += offset;\n   \n    vec3 col = max(texture(iChannel1,uvd).rgb, texture(iChannel1,uv).rgb);\n    float dither = textureLod(iChannel0, uv * iResolution.xy / 128.0f, 0.0).b;\n    \n    fragColor.rgb = col.rgb + col.rgb * dither / 17.0f;\n    fragColor.w = (col.r * GOLDEN_RATIO_ZERO + col.b * GOLDEN_RATIO_ZERO);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Fork of \"scanline spark\" by Carandiru. https://shadertoy.com/view/WtKSDm\n// 2020-07-17 15:10:45\n\n#define LINE (0.01666f)\n#define BEGIN (0.3333f * 0.5f)\n#define END (1.0f - BEGIN)\n#define SEP ((1.0f / LINE) * 0.74f)\n\nfloat rand(in float t)\n{\n    t *= 1.0f / iChannelResolution[0].x;\n    t = fract(t);\n    return textureLod(iChannel0, vec2(t, fract(GOLDEN_RATIO * t)), 0.0f).r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 invR = 1.0f / iResolution.xy;\n\tvec2 uv = fragCoord.xy * invR;\n\n    float sides = 0.0f;\n    float y = BEGIN;\n    \n    float r = rand(floor(iTime));\n    float tt = sin(iTime * 8.0f * (1.0f - r)) * r * GOLDEN_RATIO * 0.5f;\n    \n    do {\n        \n        float d, h, w;\n        \n        d = ((uv.x - tt) - 0.25f - y);\n        h = abs(LINE / d);\n        w = smoothstep(0.01f, r, r);\n        sides += h * w * w;\n        \n        y += invR.y * SEP;\n    \n    } while( y < (END * r) );\n    \n    sides = smoothstep(-0.15f, 1.0f, sides);\n    \n    vec3 color;\n    \n    color = GOOD_COLOR * sides*(abs(tt));\n    color += GOOD_COLOR * sides;\n    /*\n    float t_second = fract(iTime);\n    \n    float x_spark = 1.0f - \n                                ((uv.y - abs(uv.y - t_second) \n                                 / mod(t_second, (GOLDEN_RATIO_MIN_ONE * 0.1f * t_second) \n                                       / (GOLDEN_RATIO_MIN_ONE * t_second))) * 0.5f + 0.5f );\n    \n    float y_scanline = smoothstep(0.0f, 0.666f, abs(uv.y - t_second));\n    \n    float scanline = LINE / ((LINE*0.666f) + (x_spark * 0.0666f) + y_scanline * GOLDEN_RATIO_MIN_ONE);\n    \n\n    fragColor = vec4(vec3(0.5f, 0.5f, 1.0f) * GOOD_COLOR * scanline, 1.0f);\n*/\n    fragColor = vec4(color, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define GOLDEN_RATIO (1.61803398874989484820)\n#define GOLDEN_RATIO_ZERO (0.61803398874989484820)\n#define GOLDEN_RATIO_MIN_ONE (GOLDEN_RATIO - 1.0)\n#define GOOD_COLOR (vec3(239.0/255.0, 6.0/255.0, 105.0/255.0))","name":"Common","description":"","type":"common"}]}