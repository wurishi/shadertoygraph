{"ver":"0.1","info":{"id":"cld3Dn","date":"1682251575","viewed":335,"name":"20230423_rotate2D on SuperSaw","username":"0b5vr","description":"This code describes how to stereo-separate your synth using rotate2D","likes":13,"published":1,"flags":40,"usePreview":0,"tags":["audio"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// (c) 2021 0b5vr, MIT License\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// ** Music shader code is in \"Common\" tab **\n\nconst float SQRT2 = sqrt( 2.0 );\nconst float INV_SQRT2 = 1.0 / SQRT2;\n\nfloat plot( vec2 p ) {\n  int MAX_SAMPLES = min( 1024, int( iResolution.x ) );\n  float d = 2.0 / iResolution.y;\n  \n  float sum = 0.0;\n  for ( int i = 0; i < MAX_SAMPLES; i ++ ) {\n    vec2 s = texelFetch( iChannel0, ivec2( i, 0 ), 0 ).xy * mat2( -0.5, 0.5, 0.5, 0.5 );\n    float r = length( p - s );\n    sum += smoothstep( d, 0.0, r - 0.003 );\n  }\n  return sum;\n}\n\nfloat bgPattern( vec2 p ) {\n  float d = 2.0 / iResolution.y;\n\n  float rect = 0.0;\n  rect += smoothstep( 2.0 * d, 0.0, abs( p.x + p.y ) ) * smoothstep( 2.0 * d, 0.0, abs( p.x - p.y ) - 0.95 );\n  rect += smoothstep( 2.0 * d, 0.0, abs( p.x - p.y ) ) * smoothstep( 2.0 * d, 0.0, abs( p.x + p.y ) - 0.95 );\n  rect += smoothstep( 2.0 * d, 0.0, abs( abs( p.x + p.y ) - 1.0 ) ) * smoothstep( 2.0 * d, 0.0, abs( p.x - p.y ) - 1.0 );\n  rect += smoothstep( 2.0 * d, 0.0, abs( abs( p.x - p.y ) - 1.0 ) ) * smoothstep( 2.0 * d, 0.0, abs( p.x + p.y ) - 1.0 );\n  rect += smoothstep( 2.0 * d, 0.0, abs( p.x ) ) * smoothstep( d, 0.0, abs( p.y ) - 0.95 );\n  return min( rect, 1.0 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = fragCoord / iResolution.xy;\n  vec2 p = 2.0 * uv - 1.0;\n  p.x *= iResolution.x / iResolution.y;\n  \n  float shape = 0.0;\n  \n  shape += plot( p );\n  shape += 0.1 * bgPattern( p );\n\n  fragColor = vec4( vec3( shape ), 1.0 );\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  if ( fragCoord.y > 1.0 ) {\n    fragColor = vec4( 0.0 );\n  } else {\n    float BEAT = 1.0 / BPS;\n    float BAR = 4.0 * BEAT;\n    float SIXTEEN_BAR = 64.0 * BEAT;\n\n    vec4 time = mod( vec4( iTime - fragCoord.x / iSampleRate ), vec4( BEAT, BAR, SIXTEEN_BAR, 1E9 ) );\n\n    vec2 s = mainAudio( time );\n\n    fragColor = vec4( s, 0.0, 1.0 );\n  }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"vec2 mainSound( int samp, float _time ) {\n  int BEAT = int( iSampleRate / BPS );\n  int BAR = 4 * BEAT;\n  int SIXTEEN_BAR = 64 * BEAT;\n\n  vec4 time = vec4( samp % ivec4( BEAT, BAR, SIXTEEN_BAR, 0x7fffffff ) ) / iSampleRate;\n\n  return mainAudio( time );\n}\n","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"#define saturate(i) clamp(i,0.,1.)\n#define clip(i) clamp(i,-1.,1.)\n#define linearstep(a,b,x) saturate(((x)-(a))/((b)-(a)))\n#define lofi(i,m) (floor((i)/(m))*(m))\n#define tri(p) (1.-4.*abs(fract(p)-0.5))\n#define p2f(i) (exp2(((i)-69.)/12.)*440.)\n#define repeat(i,n) for(int i=0;i<(n);i++)\n\nconst float BPM = 140.0;\nconst float BPS = BPM / 60.0;\nconst float B2T = 60.0 / BPM;\n\nconst float PI = acos( -1.0 );\nconst float TAU = 2.0 * PI;\n\nuvec3 pcg3d( uvec3 v ) {\n  v = v * 1145141919u + 1919810u;\n  v.x += v.y * v.z;\n  v.y += v.z * v.x;\n  v.z += v.x * v.y;\n  v ^= v >> 16u;\n  v.x += v.y * v.z;\n  v.y += v.z * v.x;\n  v.z += v.x * v.y;\n  return v;\n}\n\nvec3 pcg3df( vec3 v ) {\n  uvec3 r = pcg3d( floatBitsToUint( v ) );\n  return vec3( r ) / float( -1u );\n}\n\nmat2 rotate2D( float x ) {\n  float c = cos( x );\n  float s = sin( x );\n\n  return mat2( c, s, -s, c );\n}\n\nvec2 orbit( float t ) {\n  return vec2( cos( TAU * t ), sin( TAU * t ) );\n}\n\nvec2 boxMuller( vec2 xi ) {\n  float r = sqrt( -2.0 * log( xi.x ) );\n  float t = xi.y;\n  return r * orbit( t );\n}\n\nfloat cheapFilterSaw( float phase, float k ) {\n  float wave = mod( phase, 1.0 );\n  float c = smoothstep( 1.0, 0.0, wave / k );\n  return ( wave + c ) * 2.0 - 1.0 - k;\n}\n\nvec2 mainAudio( vec4 time ) {\n  vec2 dest=vec2( 0.0 );\n\n  { // supersaw\n    float arp[ 6 ] = float[]( 0.0, 7.0, 15.0, 14.0, 7.0, 10.0 );\n\n    float t = mod( time.y, 0.25 * B2T );\n    float st = mod( floor(  time.y * BPS * 4.0 ), 6.0 );\n    float freq = p2f( 60.0 + arp[ int( st ) ] );\n\n    repeat( i, 64 ) {\n      float fi = float( i );\n      vec3 dice = pcg3df( vec3( fi, st, 0.0 ) );\n\n      float freqv = freq * ( 1.0 + 0.01 * boxMuller( dice.xy ).x ); // \"detune\"\n      float phase = freqv * t + dice.y;\n    \n      float k = 1.0 * ( 1.0 - 1.0 * exp( -5.0 * t ) ); // \"filter\"\n      float amp = linearstep( 0.0, 0.001, t ) * exp( -5.0 * t );\n      \n      vec2 wave = vec2( cheapFilterSaw( phase, k ) / 32.0 );\n      if ( mod( time.z, 8.0 * B2T ) >= 4.0 * B2T ) {\n        wave *= rotate2D( TAU * dice.z ); // rotate2D here\n      }\n\n      dest += amp * wave;\n    }\n  }\n\n  return clip(1.3*tanh(dest));\n}\n","name":"Common","description":"","type":"common"}]}