{"ver":"0.1","info":{"id":"MfGcWw","date":"1731942118","viewed":41,"name":"mandelbrot shiv","username":"shivbhatia10","description":"first attempt","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Mandelbrot Set Visualizer in Shadertoy\n// Press and drag mouse to pan\n// Scroll or use zoom controls to zoom in/out\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Set up normalized coordinates\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Initialize parameters for Mandelbrot\n    vec2 c = vec2(uv.x, uv.y) * 2.5; // Initial zoom scale\n    c += vec2(-0.5, 0.0); // Offset to center the Mandelbrot set\n\n    // Apply zoom and pan based on mouse interaction\n    float zoom = pow(1.2, iMouse.z * -10.0);\n    c = (c - vec2(iMouse.x / iResolution.x * 2.5, iMouse.y / iResolution.y * 2.5)) / zoom;\n\n    // Initialize z and iteration variables\n    vec2 z = vec2(0.0);\n    int maxIter = 100; // Maximum number of iterations\n    int iter = 0;\n\n    // Mandelbrot iteration\n    for (int i = 0; i < maxIter; i++) {\n        if (dot(z, z) > 4.0) break; // Escape condition\n        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n        iter++;\n    }\n\n    // Compute color based on iteration count\n    float color = float(iter) / float(maxIter);\n    fragColor = vec4(vec3(color * 0.8, color * 0.4, 1.0 - color * 0.6), 1.0);\n}","name":"Image","description":"","type":"image"}]}