{"ver":"0.1","info":{"id":"XXlyR4","date":"1725914910","viewed":102,"name":"marching tetrahedra raytrace DDA","username":"jt","description":"Implementation of [url=https://paulbourke.net/geometry/polygonise/]Paul Bourke's \"Polygonising a Scalar Field Using Tetrahedrons\"[/url] using DDA and ray-tracing - so much faster than raymarching!\nWORK IN PROGRESS - still some glitches (try sphere to see)","likes":12,"published":1,"flags":0,"usePreview":1,"tags":["3d","raytracing","voxels","raycasting","voxel","cubes","marching","tetrahedra","field","dda","subobjects","polygonise","bufferless"],"hasliked":0,"parentid":"M3XcRN","parentname":"voxel ray-trace with sub-objects"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/XXlyR4 marching tetrahedra raytrace dda, 2024 by jt\n// using https://www.shadertoy.com/view/M3XcRN voxel ray-trace with sub-objects\n\n// ray-tracing variant of https://www.shadertoy.com/view/MXXyz8 marching tetrahedra voxel hybrid\n\n// Implementation of\n// [url=https://paulbourke.net/geometry/polygonise/]Paul Bourke's \"Polygonising a Scalar Field Using Tetrahedrons\"[/url]\n// using DDA and ray-tracing - so much faster than ray-marching!\n\n// WORK IN PROGRESS - still some glitches (try sphere to see). Also normals have random sign.\n\n// Some other great polygonalization shaders:\n//     https://www.shadertoy.com/view/MdSBRc [SH17C] Surface Mesh Generation by Shane\n//     https://www.shadertoy.com/view/7tXGDf Marching Cubes III by kastorp\n//     https://www.shadertoy.com/view/wtfXWB by fizzer\n\n// tags: 3d, raytracing, raycasting, voxel, voxels, dda, subobjects, cubes, marching, tetrahedra, field, polygonise, bufferless\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n//#define SHADOWS\n\n#define MAX_VOXEL_STEPS 64\n\n#define SIZE 7\n\n#define pi 3.1415926\n#define tau (pi+pi)\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\n#define DIST_MAX 1000.0\n\nvec4 triangle_intersection(vec3 v0, vec3 v1, vec3 v2, vec3 ro, vec3 rd) // based on https://iquilezles.org/articles/intersectors/\n{\n    vec3 v1v0 = v1 - v0;\n    vec3 v2v0 = v2 - v0;\n    vec3 rov0 = ro - v0;\n    vec3  n = cross( v1v0, v2v0 );\n    vec3  q = cross( rov0, rd );\n    float d = 1.0/dot( rd, n );\n    float u = d*dot( -q, v2v0 );\n    float v = d*dot(  q, v1v0 );\n    float t = d*dot( -n, rov0 );\n    if(u<0.0 || v<0.0 || (u+v)>1.0) t = DIST_MAX;\n    return vec4(normalize(n), t);\n}\n\nfloat field(vec3 p)\n{\n    //return abs(length(p)-5.0)-.2; // spalmer's Nyquist limit demo\n    //return length(p)-5.0; // sphere\n    //return length(p.xzy*vec3(1,1,2))-5.0; // sphere (anisotropic scale)\n    //return torus(vec2(3.0,1.5),p.xzy);\n/*\n    // Lemniscate\n    {\n        float x = p.x / 5.0;\n        float y = length(p.yz) / 5.0;\n        //float x = length(p.xy) / 5.0;\n        //float y = p.z / 5.0;\n        float a = 0.7;\n        return length(vec2(pow(x-a,2.0)+y*y))*length(vec2(pow(x+a,2.0)+y*y))-a*a;\n    }\n*/\n    return p.x*p.x+p.y*p.y-p.z*p.z-25.0*(0.5+0.5*cos(tau*iTime/10.0)); // hyperboloid\n    //return min(min(length(p.xy)-2.5, length(p.yz)-2.5), length(p.zx)-2.5); // crossing tubes\n    //return sin(p.x)*cos(p.y)+sin(p.y)*cos(p.z)+sin(p.z)*cos(p.x); // gyroid\n    //return texture(iChannel0, p/100.0).x-0.5; // 3d texture - set filter to LINEAR!\n}\n\nvec4 pass_through(ivec3 v)\n{\n    return vec4(v, field(vec3(v)));\n}\n\n// Linearly interpolate the position where an isosurface cuts\n// an edge between two vertices, each with their own scalar value.\nvec3 vertex_lerp(vec4 p0, vec4 p1, float isolevel) // adapted from http://paulbourke.net/geometry/polygonise/\n{\n    float mu = (isolevel - p0.w) / (p1.w - p0.w);\n    //return mix(p0.xyz,p1.xyz,mu); // XXX glitches XXX\n    if (abs(isolevel - p0.w) < 0.00001)\n        return vec3(p0);\n\n    if (abs(isolevel - p1.w) < 0.00001)\n        return vec3(p1);\n\n    if (abs(p0.w - p1.w) < 0.00001)\n        return vec3(p0);\n\n    return vec3(\n        p0.x + mu * (p1.x - p0.x),\n        p0.y + mu * (p1.y - p0.y),\n        p0.z + mu * (p1.z - p0.z));\n}\n\n// Source: Polygonising a Scalar Field Using Tetrahedrons\n//         Also known as: \"3D Contouring\", \"Marching Tetrahedrons\", \"Surface Reconstruction\"\n//         Written by Paul Bourke, May 1994\n//         http://paulbourke.net/geometry/polygonise/\n\n/*\n   Polygonise a tetrahedron given its vertices within a cube\n   This is an alternative algorithm to polygonisegrid.\n   It results in a smoother surface but more triangular facets.\n\n                      0\n                     /|\\\n                    3---1\n                     \\|/\n                      2\n\n*/\n\nvec4 combine(vec4 a, vec4 b)\n{\n    if(a.w < b.w) return a;\n    return b;\n}\n\n// adds none, one or two triangles to distance-dield\nvec4 polygonise(vec4[8] voxels, float isolevel, ivec4 index, vec3 ro, vec3 rd) // adapted from http://paulbourke.net/geometry/polygonise/\n{\n    // Determine which of the 16 cases we have given which vertices\n    // are above or below the isosurface\n    uint triindex = 0u;\n    if (voxels[index[0]].w < isolevel) triindex |= 1u;\n    if (voxels[index[1]].w < isolevel) triindex |= 2u;\n    if (voxels[index[2]].w < isolevel) triindex |= 4u;\n    if (voxels[index[3]].w < isolevel) triindex |= 8u;\n\n    // TODO: fix CW/CCW triangles\n    switch (triindex)\n    {\n    case 0x00u:\n    case 0x0Fu:\n        return vec4(vec3(0),DIST_MAX);\n    case 0x0Eu:\n    case 0x01u:\n        return\n            triangle_intersection\n            (\n                vertex_lerp(voxels[index[0]], voxels[index[1]], isolevel),\n                vertex_lerp(voxels[index[0]], voxels[index[2]], isolevel),\n                vertex_lerp(voxels[index[0]], voxels[index[3]], isolevel),\n                ro,\n                rd\n            );\n    case 0x0Du:\n    case 0x02u:\n        return\n            triangle_intersection\n            (\n                vertex_lerp(voxels[index[1]], voxels[index[0]], isolevel),\n                vertex_lerp(voxels[index[1]], voxels[index[3]], isolevel),\n                vertex_lerp(voxels[index[1]], voxels[index[2]], isolevel),\n                ro,\n                rd\n            );\n    case 0x0Cu:\n    case 0x03u:\n        return\n            combine\n            (\n                triangle_intersection\n                (\n                    vertex_lerp(voxels[index[0]], voxels[index[3]], isolevel),\n                    vertex_lerp(voxels[index[0]], voxels[index[2]], isolevel),\n                    vertex_lerp(voxels[index[1]], voxels[index[3]], isolevel),\n                    ro,\n                    rd\n                ),\n                triangle_intersection\n                (\n                    vertex_lerp(voxels[index[1]], voxels[index[3]], isolevel),\n                    vertex_lerp(voxels[index[1]], voxels[index[2]], isolevel),\n                    vertex_lerp(voxels[index[0]], voxels[index[2]], isolevel),\n                    ro,\n                    rd\n                )\n            );\n    case 0x0Bu:\n    case 0x04u:\n        return\n            triangle_intersection\n            (\n                vertex_lerp(voxels[index[2]], voxels[index[0]], isolevel),\n                vertex_lerp(voxels[index[2]], voxels[index[1]], isolevel),\n                vertex_lerp(voxels[index[2]], voxels[index[3]], isolevel),\n                ro,\n                rd\n            );\n    case 0x0Au:\n    case 0x05u:\n        return\n            combine\n            (\n                triangle_intersection\n                (\n                    vertex_lerp(voxels[index[0]], voxels[index[1]], isolevel),\n                    vertex_lerp(voxels[index[2]], voxels[index[3]], isolevel),\n                    vertex_lerp(voxels[index[0]], voxels[index[3]], isolevel),\n                    ro,\n                    rd\n                ),\n                triangle_intersection\n                (\n                    vertex_lerp(voxels[index[0]], voxels[index[1]], isolevel),\n                    vertex_lerp(voxels[index[1]], voxels[index[2]], isolevel),\n                    vertex_lerp(voxels[index[2]], voxels[index[3]], isolevel),\n                    ro,\n                    rd\n                )\n            );\n    case 0x09u:\n    case 0x06u:\n        return\n            combine\n            (\n                triangle_intersection\n                (\n                    vertex_lerp(voxels[index[0]], voxels[index[1]], isolevel),\n                    vertex_lerp(voxels[index[1]], voxels[index[3]], isolevel),\n                    vertex_lerp(voxels[index[2]], voxels[index[3]], isolevel),\n                    ro,\n                    rd\n                ),\n                triangle_intersection\n                (\n                    vertex_lerp(voxels[index[0]], voxels[index[1]], isolevel),\n                    vertex_lerp(voxels[index[0]], voxels[index[2]], isolevel),\n                    vertex_lerp(voxels[index[2]], voxels[index[3]], isolevel),\n                    ro,\n                    rd\n                )\n            );\n    case 0x07u:\n    case 0x08u:\n        return\n            triangle_intersection\n            (\n                vertex_lerp(voxels[index[3]], voxels[index[0]], isolevel),\n                vertex_lerp(voxels[index[3]], voxels[index[2]], isolevel),\n                vertex_lerp(voxels[index[3]], voxels[index[1]], isolevel),\n                ro,\n                rd\n            );\n    }\n\n    return vec4(vec3(0),DIST_MAX);\n}\n\n// assuming ro at start of voxel\nvec4 triangles(ivec3 v0, vec3 ro, vec3 rd) // adapted from http://paulbourke.net/geometry/polygonise/\n{\n    ivec3 v1 = v0 + 1;\n    vec4 voxels[8];\n    // NOTE: simplified voxel-numbering compared to article\n    voxels[0] = pass_through(v0+ivec3(0,0,0));\n    voxels[1] = pass_through(v0+ivec3(1,0,0));\n    voxels[2] = pass_through(v0+ivec3(0,1,0));\n    voxels[3] = pass_through(v0+ivec3(1,1,0));\n    voxels[4] = pass_through(v0+ivec3(0,0,1));\n    voxels[5] = pass_through(v0+ivec3(1,0,1));\n    voxels[6] = pass_through(v0+ivec3(0,1,1));\n    voxels[7] = pass_through(v0+ivec3(1,1,1));\n\n    float isolevel = 0.0;\n\n    vec4 result = // NOTE: indices adjusted - the original indices don't work here due to different voxel numbering! (jt)\n        combine\n        (\n            combine\n            (\n                polygonise(voxels, isolevel, ivec4(0u, 3u, 2u, 6u), ro, rd),\n                polygonise(voxels, isolevel, ivec4(0u, 3u, 7u, 6u), ro, rd)\n            ),\n            combine\n            (\n                combine\n                (\n                    polygonise(voxels, isolevel, ivec4(0u, 4u, 7u, 6u), ro, rd),\n                    polygonise(voxels, isolevel, ivec4(0u, 7u, 1u, 3u), ro, rd)\n                ),\n                combine\n                (\n                    polygonise(voxels, isolevel, ivec4(0u, 7u, 1u, 4u), ro, rd),\n                    polygonise(voxels, isolevel, ivec4(5u, 7u, 1u, 4u), ro, rd)\n                )\n            )\n        );\n\n    // return result; // XXX normal signs flipped randomly XXX\n    // brute-force fix: flip normal if it points away from viewer\n    return dot(rd, result.xyz) > 0.0 ? vec4(-result.xyz,result.w) : result;\n}\n\nstruct result\n{\n    vec3 norm;\n    float dist;\n    vec3 col;\n};\n\nresult combine(result a, result b)\n{\n    if(a.dist < b.dist) return a;\n    return b;\n}\n\n// returns normal & distance\nresult traverse(vec3 ray_pos, vec3 ray_dir)\n{\n    result res = result(-ray_dir, DIST_MAX, vec3(0)); // sky\n\n    // dda initialization (four lines) adapted from\n    // https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4\n    // implementing https://lodev.org/cgtutor/raycasting.html\n    ivec3 voxel_pos = ivec3(floor(ray_pos)); // round down position to get tile position\n    vec3 delta_dist = 1.0 / abs(ray_dir); // reciprocal absolute ray direction\n    ivec3 ray_step = ivec3(sign(ray_dir)); // sign of ray direction\n    vec3 side_dist = (sign(ray_dir) * (vec3(voxel_pos) - ray_pos) + (sign(ray_dir) * 0.5) + 0.5) * delta_dist; // initial distances to nearest walls by dimension\n    bvec3 nearest = bvec3(0);\n\n    for(int i = 0; i < MAX_VOXEL_STEPS; i++)\n    {\n        // dda core (three lines) adapted from\n        // https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4\n        // implementing https://lodev.org/cgtutor/raycasting.html\n        bvec3 nearest_next = lessThanEqual(side_dist.xyz, min(side_dist.yzx, side_dist.zxy)); // component is true if nearest wall in that dimension\n        vec3 side_dist_next = side_dist + vec3(nearest_next) * delta_dist; // sign of ray direction\n        ivec3 voxel_pos_next = voxel_pos + ivec3(vec3(nearest_next)) * ray_step; // step to next vpxel in direction of nearest wall\n\n        if(all(lessThan(abs(voxel_pos), ivec3(SIZE))))\n        {\n            vec4 enter = vec4(vec3(nearest)*vec3(-ray_step), length(vec3(nearest) * (side_dist - delta_dist)));\n            vec4 leave = vec4(vec3(nearest_next)*vec3(-ray_step), length(vec3(nearest_next) * (side_dist_next - delta_dist)));\n\n            vec3 local = ray_pos - vec3(voxel_pos) - vec3(0.5);\n            result current = res;\n            {\n                vec4 normdist = triangles(voxel_pos, ray_pos, ray_dir);\n                current = result(normdist.xyz, normdist.w, vec3(1));\n            }\n\n            if(current.dist > 0.0 && current.dist < DIST_MAX)\n            {\n/*\n                // constrain sub-object to voxel - is this still necessary?\n                if(current.dist < enter.w)\n                    current = result(enter.xyz, enter.w, current.col);\n                else if(current.dist > leave.w)\n                    current = result(leave.xyz, leave.w, current.col);\n                //else\n                //    current = current;\n*/\n                res = current; // can just assign here for opaque objects...\n                //res = combine(res, current); // ...but e.g. transparent objects would need this\n\n                break;\n            }\n        }\n\n        nearest = nearest_next;\n        side_dist = side_dist_next;\n        voxel_pos = voxel_pos_next;\n    }\n\n    return res;\n}\n\nvoid mainImage(out vec4 o, in vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    I = (I + I - R) / R.y; // concise pixel-position mapping thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    //float pitch = pi - pi * float(iMouse.y) / float(R.y);\n    //float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    float pitch = pi - pi * float(iMouse.y) / float(R.y);\n    //float pitch = -pi*1.0 - 0.5 * pi * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    //pitch = !demo ? pitch : 1.0 * pi/2.0;\n    pitch = !demo ? pitch : 4.0/3.0 * pi/2.0;\n\n    //vec3 ray_pos = vec3(0.0, 0.0, -12.5);\n    vec3 ray_pos = vec3(0.0, 0.0, -25.0);\n    vec3 ray_dir = normalize(vec3(I.x, I.y, 2.0));\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n\n    ray_pos = M * ray_pos;\n    ray_dir = M * ray_dir;\n\n    result res = traverse(ray_pos, ray_dir);\n    vec3 color = res.col;\n    if(res.dist >= 0.0 && res.dist < DIST_MAX)\n    {\n        vec3 normal = res.norm;\n        float dist = res.dist;\n\n        vec3 dst = ray_pos + ray_dir * dist;\n        //color *= texture(iChannel0, dst).xyz;\n        //color *= vec3(0.5 + 0.5 * checker(dst));\n        //color *= 0.5 + 0.5 * normal; // debug normals\n        //color *= dot(ray_dir,normal) < 0.0 ? vec3(0,1,0) : vec3(1,0,0); // debug normals\n\n        vec3 light_dir = normalize(vec3(1, 2, 3));\n        //vec3 light_dir = normalize(vec3(cos(iTime/5.0), sin(iTime/5.0), 1));\n        float diffuse = max(0.0, dot(light_dir, normal));\n        //float diffuse = abs(dot(light_dir, normal)); // WORKAROUND for flipped normals\n#ifdef SHADOWS\n        float brightness = diffuse > 0.0 ? traverse(dst + normal * 0.001, light_dir).dist < DIST_MAX ? 0.0 : 1.0 : 0.0;\n#else\n        float brightness = 1.0;\n#endif\n        float specular = pow(max(0.0, dot(normal, normalize(-ray_dir + light_dir))), 50.0);\n        vec3 ambient = vec3(0.01);\n\n        color *= ambient + (diffuse + specular) * brightness;\n\n        //vec3 fog_color = vec3(0.25, 0.4, 0.5); // fog\n        vec3 fog_color = vec3(0); // darken with distance\n        color = mix(fog_color, color, exp(-pow(dist / 40.0, 2.0))); // fog for depth impression & to suppress flickering\n    }\n    else\n    {\n        color = vec3(0);\n    }\n\n    color = tanh(color); // roll-off / soft-clamp overly bright colors\n    o = vec4(sqrt(color), 1);\n}\n","name":"Image","description":"","type":"image"}]}