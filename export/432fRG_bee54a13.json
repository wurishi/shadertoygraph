{"ver":"0.1","info":{"id":"432fRG","date":"1729608977","viewed":44,"name":"Dumb Dithering","username":"sampajama","description":"Uses a simple form of R2 high discrepancy noise.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["simple","dithering"],"hasliked":0,"parentid":"XXSfWD","parentname":"Dumb Temporal Dithering"},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 dither = vec4(loop(\n        fract(floor(fragCoord.x) / c_psi_3) +\n        fract(floor(fragCoord.y) / c_psi_2) + \n        fract(float(iFrame) / c_psi_1)\n    ));\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n    fragColor = round(\n        pow(\n            fragColor, \n            vec4(2.2)\n        ) + dither - 0.5\n    );\n    \n    fragColor = vec4(dither);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Trig Constants\nconst float c_pi = 2.0 * acos(0.0);\nconst float c_tau = 2.0 * c_pi;\n\n// 1D low discrepancy noise\nconst float c_phi = (1.0 + sqrt(5.0)) / 2.0;\n\n// 2D low discrepancy noise\nconst float c_rho_1 = (\n    2.0 * cosh(acosh(3.0 * sqrt(3.0) / 2.0) / 3.0) / sqrt(3.0)\n);\n\nconst float c_rho_2 = c_rho_1 * c_rho_1; \n\nconst float c_psi_1 = (1.22074408461);\nconst float c_psi_2 = c_psi_1 * c_psi_1;\nconst float c_psi_3 = c_psi_2 * c_psi_1;\n\nfloat loop(float x) { \n    return acos(cos(c_tau * fract(x))) / c_pi; \n}\n","name":"Common","description":"","type":"common"}]}