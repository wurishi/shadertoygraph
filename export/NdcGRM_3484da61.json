{"ver":"0.1","info":{"id":"NdcGRM","date":"1629324953","viewed":177,"name":"Light Temple","username":"Flopine","description":"Doodle of the day! :D ","likes":17,"published":1,"flags":32,"usePreview":0,"tags":["raymarching","glow","chromatic","isometric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings and FabriceNeyret for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 cuv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n    \n    fragColor = vec4(texture(iChannel0, uv).r,\n                    texture(iChannel0, uv+length(cuv*0.002)).g,\n                    texture(iChannel0, uv+length(cuv*0.003)).b,\n                    1.\n                    );\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI acos(-1.)\n#define TAU (2.*PI)\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define mo(p,d) p=abs(p)-d;if(p.y>p.x)p=p.yx\n#define ao(p,n,e) (SDF(p+e*n).d/e)\n#define crep(p,c,l) p-=c*clamp(round(p/c),-l,l)\n\n#define plane(p,n) dot(p,normalize(n))\n\n#define frt(sp,off) fract((iTime+off)*sp)\n#define swi(sp,off) floor(sin(frt(sp,off)*TAU)+1.)\n\n\nstruct obj{\n    float d;\n    vec3 sha;\n    vec3 li;\n};\n\nobj minobj (obj a, obj b)\n{\n    if (a.d<b.d) return a ;\n    else return b;\n}\n\nfloat box (vec3 p, vec3 c)\n{\n    vec3 q = abs(p)-c;\n    return min(0.,max(q.x,max(q.y,q.z)))+length(max(q,0.));\n}\n\nobj prim1 (vec3 p)\n{ \n    float d = box(p,vec3(1.9));\n    mo(p.xz,vec2(1.));\n    mo(p.xy,vec2(1.));\n    mo(p.yz,vec2(0.5));\n    d = max(-plane(p,vec3(0.2,0.,0.6)),d);\n    obj cube = obj(d,vec3(0.),vec3(.6,1.,0.));\n    \n    p.xy *= rot(PI/4.);\n    p -= 0.5;;\n    float pi = box(p,vec3(0.5,1.9,0.5));\n    obj pillar = obj(pi, vec3(0.),vec3(0.8,0.9,0.4));\n    \n    return minobj(cube,pillar);\n}\n\nfloat g1=0.;\nobj SDF (vec3 p)\n{\n    p.yz *= rot(-atan(1./sqrt(2.)));\n    p.xz *= rot(PI/4.);\n    \n    vec3 pp = p;\n    \n    crep(p.xz,27.,1.);\n    obj set = obj(1e5,vec3(0.),vec3(0.));\n    float d=1e10,off=sin(pp.y*3.-iTime*20.)*0.02;\n    for(int i=0;i<2;i++)\n    {\n        mo(p.xz,vec2(3.));\n        p.xz *= rot(PI/4.);\n        set = minobj(set,prim1(p));\n        d = min(d,box(p-vec3(0.,10.,0.),vec3(0.2+off,12.,0.2+off)));\n        set = minobj(set,obj(d,vec3(0.),vec3(1.)));\n    }\n    g1 += 0.01/(0.01+d*d);\n   \n    return set;\n}\n\nvec3 getnorm (vec3 p)\n{\n    vec2 eps = vec2(0.001,0.);\n    return normalize(SDF(p).d-vec3(SDF(p-eps.xyy).d,SDF(p-eps.yxy).d,SDF(p-eps.yyx).d));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    float size = swi(.2,0.)>0.5?3.5:8.;\n    \n    vec3 ro = vec3(uv*size,-31.),rd=vec3(0.,0.,1.),p=ro,\n    col=vec3(0.),l=normalize(vec3(-1.,2.,-4.));\n\n    bool hit = false; obj O;\n    for(float i=0.;i<64.;i++)\n    {\n        O = SDF(p);\n        if (O.d<0.001)\n        {hit=true;break;}\n        p += O.d*rd;\n    }\n\n    if (hit)\n    {\n        vec3 n = getnorm(p);\n        float light = max(dot(n,l),0.);\n        float AO = ao(p,n,0.05)+ao(p,n,0.2)+ao(p,n,0.6);\n        col = mix(O.sha,O.li,light)*AO/3.;\n    }\n    \n    col += g1*exp(fract(iTime*5.)*.2)*0.15;\n\n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}