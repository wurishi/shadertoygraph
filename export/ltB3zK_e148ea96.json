{"ver":"0.1","info":{"id":"ltB3zK","date":"1430346043","viewed":1579,"name":"CRT Screen","username":"bisse","description":"Specialization of https://www.shadertoy.com/view/MsjXzh# with warp removed and some optimizations.","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["retro","pixel","crt","scanline","bloom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"//\n// PUBLIC DOMAIN CRT STYLED SCAN-LINE SHADER\n//\n//   by Timothy Lottes\n//\n// This is more along the style of a really good CGA arcade monitor.\n// With RGB inputs instead of NTSC.\n// The shadow mask example has the mask rotated 90 degrees for less chromatic aberration.\n//\n// Left it unoptimized to show the theory behind the algorithm.\n//\n// It is an example what I personally would want as a display option for pixel art games.\n// Please take and use, change, or whatever.\n//\n\n// Emulated input resolution.\n// Fix resolution to set amount.\n#define resX 90.0\n#define resY 70.0\nconst vec2 res = vec2(resX, resY);\n\n// Hardness of scanline.\n//  -8.0 = soft\n// -16.0 = medium\n#define hardScan -12.0\n\n// Hardness of pixels in scanline.\n// -2.0 = soft\n// -4.0 = hard\n#define hardPix -10.0\n\n// Hardness of short vertical bloom.\n//  -1.0 = wide to the point of clipping (bad)\n//  -1.5 = wide\n//  -4.0 = not very wide at all\n#define hardBloomScan -2.0\n\n// Hardness of short horizontal bloom.\n//  -0.5 = wide to the point of clipping (bad)\n//  -1.0 = wide\n//  -2.0 = not very wide at all\n#define hardBloomPix -1.5\n\n// Amount of small bloom effect.\n//  1.0/1.0 = only bloom\n//  1.0/16.0 = what I think is a good amount of small bloom\n//  0.0     = no bloom\n#define bloomAmount 1.0/16.0\n\n// Amount of shadow mask.\n#define maskDark 0.8\n#define maskLight 1.2\n\n//------------------------------------------------------------------------\n\n// sRGB to Linear.\n// Assuing using sRGB typed textures this should not be needed.\nfloat ToLinear1(float c){return(c<=0.04045)?c/12.92:pow((c+0.055)/1.055,2.4);}\nvec3 ToLinear(vec3 c){return vec3(ToLinear1(c.r),ToLinear1(c.g),ToLinear1(c.b));}\n\n// Linear to sRGB.\n// Assuing using sRGB typed textures this should not be needed.\nfloat ToSrgb1(float c){return(c<0.0031308?c*12.92:1.055*pow(c,0.41666)-0.055);}\nvec3 ToSrgb(vec3 c){return vec3(ToSrgb1(c.r),ToSrgb1(c.g),ToSrgb1(c.b));}\n\n// Nearest emulated sample given floating point position and texel offset.\n// Also zero's off screen.\nconst vec3 black = vec3(0.0,0.0,0.0);\nvec3 Fetch(vec2 pos,vec2 off){\n  pos=floor(pos*res+off)/res;\n  if(max(abs(pos.x-0.5),abs(pos.y-0.5))>0.5)return black;\n  return ToLinear(texture(iChannel0,pos.xy,-16.0).rgb);}\n\n// Distance in emulated pixels to nearest texel.\nvec2 Dist(vec2 pos) {return -(fract(pos*res)-vec2(0.5));}\n    \n// 1D Gaussian.\nfloat Gaus(float pos,float scale){return exp2(scale*pos*pos);}\n\n// 3-tap Gaussian filter along horz line.\nvec3 Horz3(vec2 pos,float off){\n  vec3 b=Fetch(pos,vec2(-1.0,off));\n  vec3 c=Fetch(pos,vec2( 0.0,off));\n  vec3 d=Fetch(pos,vec2( 1.0,off));\n  float dst=Dist(pos).x;\n  // Convert distance to weight.\n  float scale=hardPix;\n  float wb=Gaus(dst-1.0,scale);\n  float wc=Gaus(dst+0.0,scale);\n  float wd=Gaus(dst+1.0,scale);\n  // Return filtered sample.\n  return (b*wb+c*wc+d*wd)/(wb+wc+wd);}\n\n// 5-tap Gaussian filter along horz line.\nvec3 Horz5(vec2 pos,float off){\n  vec3 a=Fetch(pos,vec2(-2.0,off));\n  vec3 b=Fetch(pos,vec2(-1.0,off));\n  vec3 c=Fetch(pos,vec2( 0.0,off));\n  vec3 d=Fetch(pos,vec2( 1.0,off));\n  vec3 e=Fetch(pos,vec2( 2.0,off));\n  float dst=Dist(pos).x;\n  // Convert distance to weight.\n  float scale=hardPix;\n  float wa=Gaus(dst-2.0,scale);\n  float wb=Gaus(dst-1.0,scale);\n  float wc=Gaus(dst+0.0,scale);\n  float wd=Gaus(dst+1.0,scale);\n  float we=Gaus(dst+2.0,scale);\n  // Return filtered sample.\n  return (a*wa+b*wb+c*wc+d*wd+e*we)/(wa+wb+wc+wd+we);}\n\n// 7-tap Gaussian filter along horz line.\nvec3 Horz7(vec2 pos,float off){\n  vec3 a=Fetch(pos,vec2(-3.0,off));\n  vec3 b=Fetch(pos,vec2(-2.0,off));\n  vec3 c=Fetch(pos,vec2(-1.0,off));\n  vec3 d=Fetch(pos,vec2( 0.0,off));\n  vec3 e=Fetch(pos,vec2( 1.0,off));\n  vec3 f=Fetch(pos,vec2( 2.0,off));\n  vec3 g=Fetch(pos,vec2( 3.0,off));\n  float dst=Dist(pos).x;\n  // Convert distance to weight.\n  float scale=hardBloomPix;\n  float wa=Gaus(dst-3.0,scale);\n  float wb=Gaus(dst-2.0,scale);\n  float wc=Gaus(dst-1.0,scale);\n  float wd=Gaus(dst+0.0,scale);\n  float we=Gaus(dst+1.0,scale);\n  float wf=Gaus(dst+2.0,scale);\n  float wg=Gaus(dst+3.0,scale);\n  // Return filtered sample.\n  return (a*wa+b*wb+c*wc+d*wd+e*we+f*wf+g*wg)/(wa+wb+wc+wd+we+wf+wg);}\n\n// 5-tap Gaussian filter along horz line.\nvec3 Horz5Bloom(vec2 pos,float off){\n  vec3 b=Fetch(pos,vec2(-2.0,off));\n  vec3 c=Fetch(pos,vec2(-1.0,off));\n  vec3 d=Fetch(pos,vec2( 0.0,off));\n  vec3 e=Fetch(pos,vec2( 1.0,off));\n  vec3 f=Fetch(pos,vec2( 2.0,off));\n  float dst=Dist(pos).x;\n  // Convert distance to weight.\n  float scale=hardBloomPix;\n  float wb=Gaus(dst-2.0,scale);\n  float wc=Gaus(dst-1.0,scale);\n  float wd=Gaus(dst+0.0,scale);\n  float we=Gaus(dst+1.0,scale);\n  float wf=Gaus(dst+2.0,scale);\n  // Return filtered sample.\n  return (b*wb+c*wc+d*wd+e*we+f*wf)/(wb+wc+wd+we+wf);}\n\n// Return scanline weight.\nfloat Scan(vec2 pos,float off){\n  float dst=Dist(pos).y;\n  return Gaus(dst+off,hardScan);}\n\n// Return scanline weight for bloom.\nfloat BloomScan(vec2 pos,float off){\n  float dst=Dist(pos).y;\n  return Gaus(dst+off,hardBloomScan);}\n\n// Allow nearest three lines to effect pixel.\nvec3 Tri(vec2 pos){\n  vec3 a=Horz3(pos,-1.0);\n  vec3 b=Horz5(pos, 0.0);\n  vec3 c=Horz3(pos, 1.0);\n  float wa=Scan(pos,-1.0);\n  float wb=Scan(pos, 0.0);\n  float wc=Scan(pos, 1.0);\n  return a*wa+b*wb+c*wc;}\n\n// Small bloom.\nvec3 Bloom(vec2 pos){\n  vec3 a=Horz5(pos,-2.0);\n  vec3 b=Horz7(pos,-1.0);\n  vec3 c=Horz7(pos, 0.0);\n  vec3 d=Horz7(pos, 1.0);\n  vec3 e=Horz5(pos, 2.0);\n  float wa=BloomScan(pos,-2.0);\n  float wb=BloomScan(pos,-1.0);\n  float wc=BloomScan(pos, 0.0);\n  float wd=BloomScan(pos, 1.0);\n  float we=BloomScan(pos, 2.0);\n  return a*wa+b*wb+c*wc+d*wd+e*we;}\n\n// Very compressed TV style shadow mask.\nvec3 Mask1(vec2 pos){\n  float line=maskLight;\n  float odd=0.0;\n  if(fract(pos.x/6.0)<0.5)odd=1.0;\n  if(fract((pos.y+odd)/2.0)<0.5)line=maskDark;  \n  pos.x=fract(pos.x/3.0);\n  vec3 mask=vec3(maskDark,maskDark,maskDark);\n  if(pos.x<0.333)mask.r=maskLight;\n  else if(pos.x<0.666)mask.g=maskLight;\n  else mask.b=maskLight;\n  mask*=line;\n  return mask;}   \n\n// Aperture-grille.\nvec3 Mask2(vec2 pos){\n  pos.x=fract(pos.x/3.0);\n  vec3 mask=vec3(maskDark,maskDark,maskDark);\n  if(pos.x<0.333)mask.r=maskLight;\n  else if(pos.x<0.666)mask.g=maskLight;\n  else mask.b=maskLight;\n  return mask;}      \n\n// Stretched VGA style shadow mask (same as prior shaders).\nvec3 Mask3(vec2 pos){\n  pos.x+=pos.y*3.0;\n  vec3 mask=vec3(maskDark,maskDark,maskDark);\n  pos.x=fract(pos.x/6.0);\n  if(pos.x<0.333)mask.r=maskLight;\n  else if(pos.x<0.666)mask.g=maskLight;\n  else mask.b=maskLight;\n  return mask;}    \n\n// VGA style shadow mask.\nvec3 Mask4(vec2 pos){\n  pos.xy=floor(pos.xy*vec2(1.0,0.5));\n  pos.x+=pos.y*3.0;\n  vec3 mask=vec3(maskDark,maskDark,maskDark);\n  pos.x=fract(pos.x/6.0);\n  if(pos.x<0.333)mask.r=maskLight;\n  else if(pos.x<0.666)mask.g=maskLight;\n  else mask.b=maskLight;\n  return mask;}\n\n\n// Entry.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n  vec2 pos=fragCoord.xy/iResolution.xy;\n  fragColor.rgb=Tri(pos)*Mask4(fragCoord.xy);\n  fragColor.rgb+=Bloom(pos)*bloomAmount;\n  fragColor.a=1.0;  \n  fragColor.rgb=ToSrgb(fragColor.rgb);}\n\n","name":"","description":"","type":"image"}]}