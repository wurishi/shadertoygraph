{"ver":"0.1","info":{"id":"3scXzH","date":"1571429495","viewed":340,"name":"Jupiter test","username":"michael0884","description":"Trying to simulate the hydrodynamics of Jupiter's atmosphere. Up key to see the complex field","likes":7,"published":1,"flags":16,"usePreview":0,"tags":["simulation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rr","filepath":"/media/a//media/previz/cubemap00.png","previewfilepath":"/media/ap//media/previz/cubemap00.png","type":"cubemap","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat sphere_intersection(vec3 r, vec3 p, vec4 sphere)\n{\n\tp = p - sphere.xyz;\n\tif(p == vec3(0)) return sphere.w;\n\t\n\tfloat b = dot(p, r);\n\tfloat c = sphere.w*sphere.w - dot(p,p);\n\tfloat d = b*b + c;\n\t\n\tif((d <= 0.)) //if no intersection\n\t{\n\t\treturn 0.;\n\t}\n\telse\n\t{\n\t\treturn -sqrt(d) - b; //use closest solution in the direction of the ray\n\t}\n}\n\nvec3 planet_texture(float phi, float theta)\n{\n    vec3 color = vec3(0);\n    float bands = Bands;\n    float band_angle = bands*theta;\n    float band = round(band_angle/(PI));\n    float amplitude =  (0.8+0.2*sin(30.*phi))*abs(cos(band_angle));\n    vec3 background = vec3(0.2);\n    if(mod(band,2.)<1.)\n    {\n        color = vec3(0.7,0.3,0.3);\n    }\n    else\n    {\n        color = vec3(0.9,0.8,0.8);\n    }\n    \n \n\treturn amplitude*color + (1.-amplitude)*background;\n}\n\nconst int KEY_UP = 38;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates \n   \n    vec2 pos = (fragCoord - iResolution.xy*0.5)/max(iResolution.x,iResolution.y);\n    \n    vec2 uv = iMouse.xy/iResolution.xy;\n    vec2 angles = vec2(uv.x*2., uv.y - 0.5)*PI;\n    \n    vec3 camera_z = vec3(cos(angles.x)*cos(angles.y),sin(angles.x)*cos(angles.y),sin(angles.y));\n    vec3 camera_x = normalize(vec3(cos(angles.x+PI*0.5), sin(angles.x+PI*0.5),0.)); \n    vec3 camera_y = -normalize(cross(camera_x,camera_z));\n    \n    vec3 ray = normalize(camera_z + FOV*(pos.x*camera_x + pos.y*camera_y));\n    vec3 cam_pos = -R*vec3(cos(angles.x)*cos(angles.y),sin(angles.x)*cos(angles.y),sin(angles.y));\n    \n    vec4 sphere = vec4(0.,0.,0., 1.);\n    \n    float t = sphere_intersection(ray, cam_pos, sphere);\n    \n    if(t != 0.)\n    {\n        //sphere\n        vec3 sph_pos = normalize(cam_pos + ray*t - sphere.xyz);\n        vec4 params = texture(iChannel1, sph_pos);\n        vec2 psi = params.xy;\n        vec2 uv = (params.zw + vec2(PI,0.))/vec2(2.*PI,PI);\n        vec2 red = vec2(1,0), green = vec2(-0.5,sqrt(3.)*0.5), blue = vec2(-0.5,-sqrt(3.)*0.5);\n        vec3 RGB =  (0.5 + vec3(dot(psi, red),dot(psi, green),dot(psi, blue)))/1.5;\n        \n        if(texelFetch( iChannel3, ivec2(KEY_UP,2), 0 ).x < 0.5)\n   \t    {\n            fragColor.xyz =planet_texture(params.z,params.w);\n        }\n        else\n        {\n            fragColor.xyz = RGB;\n        }\n    }\n    else\n    {    \n        //background\n        fragColor = texture(iChannel0, ray.yzx);\n    }\n \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dX3Rr","filepath":"/media/a//media/previz/cubemap00.png","previewfilepath":"/media/ap//media/previz/cubemap00.png","type":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dX3Rr","channel":0}],"code":"vec2 vortex_psi(vec2 pos, float Radius)\n{   \n    //number of windings, essentially the velocity\n    float n = 30.; //necessarily integer for the wave function to be continuous, thus vorticity is quantized\n\tfloat phase = n*( 0.5*iTime + atan(pos.x, pos.y));\n    //it is zero at pos = 0, so it is continuos, even if atan(pos.x, pos.y) aka the phase is not\n    return exp(-pow(length(pos)/Radius,2.0))*length(pos)*vec2(sin(phase), cos(phase));\n}\n\n\nvec2 initial_conditions(float phi, float theta)\n{\n    vec2 psi = vec2(0);\n    //BANDS\n    float bands = Bands;\n    float band_angle = bands*theta;\n    float band = round(band_angle/(PI));\n    float velocity = floor(30.*pow((bands - band)*band/bands,2.0));\n    float amplitude = abs(cos(band_angle));\n    float phi_equator = phi*velocity*sign(cos(band_angle));\n    vec2 equator = vec2(sin(phi_equator),cos(phi_equator));\n    psi = amplitude*equator + vec2(1,0)*(1.-amplitude);\n    \n    //BIG SPOT\n    vec2 vortex = 3.*vortex_psi(4.*vec2(phi,theta-0.55*PI), 0.5);\n    float vdens =length(vortex);\n    psi=psi*(1.-vdens)+vortex*vdens;\n    \n    return psi;\n}\n\nfloat angle_between(vec2 a,vec2 b)\n{\n    return atan(a.x*b.y-a.y*b.x,dot(a,b));\n}\n\n\n#define eps 0.5/1024.\nvec4 Laplacian_sphere(vec3 pos)\n{\n    //get the spherical axes\n    vec3 axphi = normalize(cross(vec3(0,0,1),pos)); //phi axis\n    vec3 axtheta = normalize(cross(axphi,pos)); //theta axis\n    \n    vec4 a =  texture(iChannel0, pos);\n    vec4 p0 = texture(iChannel0, normalize(pos-eps*axphi));\n    vec4 p1 = texture(iChannel0, normalize(pos+eps*axphi));\n    vec4 t0 = texture(iChannel0, normalize(pos-eps*axtheta));\n    vec4 t1 = texture(iChannel0, normalize(pos+eps*axtheta));\n    \n    return p0+p1+t0+t1-4.*a;\n}\n\nvec2 getVelocity(vec3 pos)\n{\n    //get the spherical axes\n    vec3 axphi = normalize(cross(vec3(0,0,1),pos)); //phi axis\n    vec3 axtheta = normalize(cross(axphi,pos)); //theta axis\n    \n    vec4 p0 = texture(iChannel0, normalize(pos-eps*axphi));\n    vec4 p1 = texture(iChannel0, normalize(pos+eps*axphi));\n    vec4 t0 = texture(iChannel0, normalize(pos-eps*axtheta));\n    vec4 t1 = texture(iChannel0, normalize(pos+eps*axtheta));\n    \n    //gradient of the complex phase of the field components normalized over the densities \n    float vx = angle_between(p1.xy,p0.xy);\n    float vy = angle_between(t1.xy,t0.xy);\n\treturn vec2(vx, vy);\n}\n\nvec2 advection(vec3 pos)\n{\n    //get the spherical axes\n    vec3 axphi = normalize(cross(vec3(0,0,1),pos)); //phi axis\n    vec3 axtheta = normalize(cross(axphi,pos)); //theta axis\n    \n    vec2 v = 5.*getVelocity(pos)*eps;\n    \n    return texture(iChannel0, normalize(pos+v.x*axphi+v.y*axtheta)).zw;\n}\n\nvec2 force(vec2 psi)\n{\n    return -0.5*psi*(dot(psi,psi) - 1.);\n}\n    \nvoid mainCubemap( out vec4 fragColor, in vec2 fragCoord, in vec3 rayOri, in vec3 rayDir )\n{\n    fragColor = texture(iChannel0, rayDir);\n   \tvec2 uv = fragCoord/1024.;\n    \n    float theta = acos(rayDir.z);\n    float phi = atan(rayDir.x/sin(theta),rayDir.y/sin(theta));\n    \n    if(iFrame%2 == 0)\n    {\n        fragColor.x += dt*(Laplacian_sphere(rayDir).xy + force(fragColor.xy)).y;\n    }\n    else\n    {\n        fragColor.y -= dt*(Laplacian_sphere(rayDir).xy + force(fragColor.xy)).x;\n    }\n    \n    fragColor.zw = advection(rayDir);\n    \n    if(iFrame < 6)\n    {\n        fragColor.xy = initial_conditions(phi, theta);\n        fragColor.zw = vec2(phi, theta);\n    }\n}","name":"Cube A","description":"","type":"cubemap"},{"inputs":[],"outputs":[],"code":"#define PI 3.14159265\n#define FOV 2.\n#define R 2.3\n#define dt 0.30\n#define Bands 10.","name":"Common","description":"","type":"common"}]}