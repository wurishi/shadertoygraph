{"ver":"0.1","info":{"id":"3sXXWH","date":"1554639844","viewed":181,"name":"3d raymarch","username":"adimineman","description":"not my creation (only remix)","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarch3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 50\n#define MAX_DIST 500.\n#define SURF_DIST 0.001\n\nmat3 rX(float a){\n\tfloat s=sin(a);\n    float c=cos(a);\n    return mat3(1,0,0,0,c,-s,0,s,c);\n}\nmat3 rY(float a){\n\tfloat s=sin(a);\n    float c=cos(a);\n    return mat3(c,0,s,0,1,0,-s,0,c);\n}\nmat3 rZ(float a){\n\tfloat s=sin(a);\n    float c=cos(a);\n    return mat3(c,-s,0,s,c,0,0,0,1);\n}\n\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r) {\n\tvec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t*ab;\n    \n    return length(p-c)-r;\n}\n\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r) {\n\tvec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    //t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t*ab;\n    \n    float x = length(p-c)-r;\n    float y = (abs(t-.5)-.5)*length(ab);\n    float e = length(max(vec2(x, y), 0.));\n    float i = min(max(x, y), 0.);\n    \n    return e+i;\n}\n\nfloat sdTorus(vec3 p, vec2 r) {\n\tfloat x = length(p.xz)-r.x;\n    return length(vec2(x, p.y))-r.y;\n}\n\nfloat dBox(vec3 p, vec3 s) {\n    //p.x=mod(p.x+1.,3.)-1.;\n    //p*=rY(p.x/2.);\n\treturn length(max(abs(p)-s, 0.));\n}\n\nfloat dSphere(vec3 p, float s){\n    p*=rY(radians(p.x+90.));\n    p.x=mod(p.x+1.,5.)-1.;\n    p.z=mod(p.z+1.,2.)-1.;\n    return (length(p)-s);\n}\n\nfloat GetDist(vec3 p) {\n    float planeDist = p.y+3.;\n    \n    float cd = sdCapsule(p, vec3(0, 0, 0), vec3(sin(iTime*.8+324.)*2., sin(iTime*5.)*2., sin(iTime*8.+578.)*2.), .5); \n    //float td = sdTorus(p -vec3(0,.5,6), vec2(1.5, .4));\n    float bd = dBox(p-vec3(0,-2,0),vec3(5,1,5));\n    //float cyld = sdCylinder(p, vec3(0, .3, 3), vec3(3, .3, 5), .3);\n    \n    float d = min(bd,cd);\n    //d = min(d, cd);\n    //d = min(d, bd);\n    //d = min(d, cyld);\n    \n    return min(d,planeDist);\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(0, 5, 0);\n    //lightPos.xz += vec2(cos(iTime/5.)/**/, sin(iTime/5.)/**/)*2.;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), .01, 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l);\n    if(d<length(lightPos-p)) dif *= .5;\n    \n    return dif;\n}\n\nfloat GetLight(vec3 p,vec3 lightPos) {\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), .01, 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l);\n    if(d<length(lightPos-p)) dif *= .5;\n    \n    return dif;\n}\n\nfloat GetSun(vec3 p) {\n    vec3 lightPos = vec3(p.x, 10, p.z);\n    //lightPos.xz += vec2(cos(iTime/5.)/**/, sin(iTime/5.)/**/)*2.;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), .01, 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l);\n    if(d<length(lightPos-p)) dif *= .5;\n    \n    return dif;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    float t=iTime/5.0;\n    \n    vec3 col = vec3(0);\n    float a = -3.14/2.;\n    vec3 ro = vec3(cos(t+a)*5./**/, iMouse.y/iResolution.y*8.-3., sin(t+a)*5./**/);\n    vec3 rd = vec3(uv.x, uv.y, .5);\n    rd*=rX(radians(iMouse.y/iResolution.y*45.));\n   \trd*=rY(-t);\n    rd=normalize(rd);\n    \n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd * d;\n    \n    float dif = GetLight(p,ro+vec3(0,2,0));\n    float dif1 = GetLight(p);\n    float dif2 = GetSun(p);\n    col = vec3(dif,dif1,dif2);\n    \n    \n    fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}