{"ver":"0.1","info":{"id":"ts2SDt","date":"1555391273","viewed":1814,"name":"Basics - Patterns","username":"trevorleake","description":"Study in basic shaders and combining techniques of coordinate manipulation.","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["patterns","dots","translation","basics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.1415926535897932384626433832795;\n\n\nfloat circles(vec2 uv, float r){\n    // Position of point assuming center is (.5,.5)\n    vec2 pos = vec2(0.5)-fract(uv);\n    \n    // Find squared distance from origin\n    float lineLength = distance(pos, vec2(0.));\n    return 1.-step(r, lineLength);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.yy;\n\n    // Scale the coords up by 5\n    uv *= 5.;\n    \n    // Note the column and row of each coord\n\tvec2 colRow = floor(uv);\n\n    // Grab fractional remainders for each to create [0, 1] blocks\n    uv = fract(uv);\n\n    // This flips if seconds are even or odd\n    bool flipper = mod(floor(iTime), 2.) == 0.;\n    \n    // Scaled and offset so seconds are in increments of Pi\n    float t = PI/2.+(fract(iTime)*PI);\n    \n    float v = (sin(t)+1.)/2.;\n    if(flipper){\n        // For any pixel in an even column\n        if(mod(colRow.x, 2.) == 0.)\n            uv += vec2(0, v);\n        else\n            uv -= vec2(0, v);\n    }\n    else{\n        // For any pixel in an even row\n        if(mod(colRow.y, 2.) == 0.)\n            uv += vec2(v,0.);\n        else\n            uv -= vec2(v,0.);\n    }\n\n    \n    \n    // Lets look at colors now    \n    vec3 col = vec3(0.);\n\n    // Paint the coordinate system with colors\n//  col = vec3(uv.x, uv.y,0);\n    \n    // Paint in the circles, without destroying the background\n    float val = circles(uv, .1);\n    if(val != 0.)\n\t    col = vec3(val);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}