{"ver":"0.1","info":{"id":"7tS3DV","date":"1624726349","viewed":107,"name":"Gravity Lense","username":"MrBopas","description":"A simple script that simulates the effect of gravitational lensing.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["blackhole"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 lensePosition = vec2(iMouse.x, iMouse.y) / iResolution.xy;\n    vec2 lenseDirection = lensePosition - uv;\n    \n    float distanceToLense = length(lenseDirection);\n    \n    vec2 newUv = uv + 0.1 * lenseDirection / length(lenseDirection);\n    \n    vec4 color = texture(iChannel0, newUv);\n    fragColor = color;\n}","name":"Image","description":"","type":"image"}]}