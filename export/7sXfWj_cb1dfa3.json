{"ver":"0.1","info":{"id":"7sXfWj","date":"1645389132","viewed":44,"name":"gyroid test","username":"bit2shift","description":"hello world","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","sdf","gyroid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float EPSY = 0.001;\nconst int STEPS = 128;\n\n// GYROID = {1, 2, 3}\n#define GYROID 2\n\nfloat map(vec3 p)\n{\n    return max(\n        0.5 * abs(\n#if GYROID == 1\n            dot(cos(p), vec3(1))\n#elif GYROID == 2\n            dot(\n                sin(p.xxyz),\n                vec4(sin(p.y), cos(p.yzx)) *\n                vec4(sin(p.z), cos(p.zxy))\n            )\n#elif GYROID == 3\n            dot(sin(p), cos(p.yzx))\n#endif\n        ),\n        length(max(abs(p) - 8.0, 0.0))\n    );\n}\n\nvec4 march(vec3 origin, vec3 direction)\n{\n    for(int i = 0; i < STEPS; i++)\n    {\n        float dist = map(origin);\n        if(dist < EPSY)\n            return vec4(origin, dist);\n        else\n            origin += (direction * dist);\n    }\n    return vec4(origin, 1e3);\n}\n\nmat3 rotY(float angle)\n{\n    float cs = cos(radians(angle));\n    float sn = sin(radians(angle));\n    \n    vec3 c0 = vec3(cs, 0, -sn);\n    vec3 c1 = vec3( 0, 1,   0);\n    vec3 c2 = vec3(sn, 0,  cs);\n    return mat3(c0, c1, c2);\n}\n\nvoid mainImage(out vec4 color, in vec2 coord)\n{\n    vec2 uv = (2.0 * coord - iResolution.xy) / iResolution.y;\n    \n    mat3 rot = rotY(iTime * 20.0);\n    vec3 origin = rot * vec3(0, 0, -16);\n    vec3 direction = rot * normalize(vec3(uv, 1));\n    \n    vec4 p = march(origin, direction);\n    if(p.w < EPSY)\n        color = vec4(1, 0.5, 0.25, 0) / (0.1 * distance(origin, p.xyz));\n    else\n        color = texture(iChannel0, direction);\n}","name":"Image","description":"","type":"image"}]}