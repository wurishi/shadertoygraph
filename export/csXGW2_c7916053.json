{"ver":"0.1","info":{"id":"csXGW2","date":"1666787620","viewed":74,"name":"Matter(s) of heart","username":"blurryroots","description":"Searching for the heart of things. You carry it everywhere you go. It's made up of heart and heart is made up of it. You see it when you look for it, believe in it, trust in it. It's never too late and certainly never too soon.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","animation","superformula"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Shadertoy Educational License\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n// You are free however, to incorporate this work within the Shadertoy\n// ecosystem, e.g. by forking.\n// This work may incorporate other permissivly shared, educational work,\n// which is attributed appropriatly. Please do so as well.\n// Thanks to https://www.shadertoy.com/user/iq for inspiring this license.\n\n#define PI 3.14159\n#define TWO_PI 6.28319\n\nconst float Gold = (1.0+sqrt(5.0)) / 2.0;\nconst float InvGold = 1. / Gold;\nconst float OneMinusInvGold = 1.0 - InvGold;\nconst float OneMinusInvGoldSquared = OneMinusInvGold * OneMinusInvGold;\n\nfloat superformula (float angle, vec4 shape, vec2 symmetry) {    \n    float m = shape.x;\n    float n1 = shape.y;\n    float n2 = shape.z;\n    float n3 = shape.w;\n    float a = symmetry.x;\n    float b = symmetry.y;\n\n    float rpart = (m * angle) / 4.;\n    float apart = abs (cos (rpart) / a);\n    float bpart = abs (sin (rpart) / b);\n\n    float r = pow (\n        pow (apart, n2) + pow (bpart, n3),\n        -1. / n1\n    );\n    \n    return r;\n}\n\nfloat angleBetween (vec2 a, vec2 b) {\n    float cosTheta = dot (a, b) / (length (a) * length (b));\n    \n    return acos (cosTheta);\n}\n\nvec4 createShape (float t) {    \n    float m = 1. + abs (sin (t) + cos (1.6 * t)) * 8.;\n    float n1 = 1. + abs (sin (2. * t) * 4.);\n    float n2 = 1. + (cos (t + PI / 1.6) * 2.);\n    float n3 = 2. + sin (1.6 * t + PI) * 4.;\n    \n    return vec4 (m, n1, n2, n3);\n}\n\nvec2 createSymmetry (float t) {\n    return  vec2 (.618 + sin (t + PI / 2.) * .5, .5 + cos (t) * .618);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    float restraint = Gold * PI;\n    float radius = iResolution.y / restraint;\n    float border = 23.07;\n    //vec4 borderColor = vec4 (0.618, 0.123, 0.987, 1.0);\n    \n    vec2 center = iResolution.xy / 2.;\n    vec2 d = fragCoord - center*vec2(1., 1.1);\n    vec2 up = vec2 (0., 1.);\n    vec2 uv = fragCoord.xy / iResolution.xy;\n        \n    float t = iTime * 0.6;\n    float angle = angleBetween (up, d);\n    //vec2 symmetry = createSymmetry (t);\n    vec2 symmetry = vec2 (1., .18);\n    //vec4 shape = createShape (t);\n    vec4 shape = mix (       \n        vec4 (1., .85, 1., -2.),\n        vec4 (1., 1., 1., 0.),\n        sin (t)\n    );\n    //float r = superformula (angle, shape, symmetry) * radius;\n    float r = superformula (angle, shape, symmetry) * radius;\n    \n    vec4 coreColor = vec4(0.890, 0.123, 0.123, 1.0);\n    float size = length (d); \n    //vec4 colorFromShape = 1.-normalize (shape)*0.2;\n    vec4 colorFromShape = coreColor;\n    \n    if (size <= r) {\n        vec4 noise = vec4(OneMinusInvGoldSquared);\n        float much = (r-size);\n        fragColor = vec4(colorFromShape.rgb, much) + (noise*InvGold);\n    }\n    else if (size <= (r+border)) {\n        float much = ((r+border)-size)/border;\n        vec4 borderColor = vec4 (0.618, 0.123, 0.123, 1.0);\n        fragColor = mix(borderColor, colorFromShape, much);\n    }\n    else {\n        vec4 noise = vec4(OneMinusInvGoldSquared);\n        fragColor = noise;//vec4 (vec3(OneMinusInvGoldSquared), 1.) + OneMinusInvGoldSquared*vec4((.5*sin(iTime)+.5)*noise.rgb, 1.0);\n    }\n}\n\n/** SHADERDATA\n{\n\t\"title\": \"Matter(s) of the heart\",\n\t\"description\": \"Searching for the heart of things. You carry it everywhere you go. It's made up of heart and heart is made up of it. You see it when you look for it, believe in it, trust in it. It's never too late and certainly never too soon.\",\n\t\"model\": \"person\"\n}\n*/","name":"Image","description":"","type":"image"}]}