{"ver":"0.1","info":{"id":"XfVGWm","date":"1712850899","viewed":86,"name":"prak","username":"Mariya","description":"mya","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["figures"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define myPi 3.141592654f\n\nconst int n = 11, m = 36;\nint ind_ar[n] = int[](0, 3, 6, 9, 12, 16, 21, 24, 27, 30, 33);\nint size_ar[n] = int[](3, 3, 3, 3, 4, 5, 3, 3, 3, 3, 3);//треугольник*4(тетраэдр),квадрат, пятиугольник\nvec3 vert_ar[m]; //точки фигур против часовой задать надо\nvec4 colors[n]; //здесь пишем в кажом век4 цвета каждого полигона\n\n\n\nvoid initPolygons(out vec3 vert_ar[m], in float time){\n    vec3 a = vec3(-0.12 + 0.152 * cos(time)*0.6, 0.1 - 0.122 * cos(time), -2.0 -0.05 + 1.252 * cos(time) +0.75);//a\n    vec3 b = vec3(0.04 + 0.152 * cos(time), 0.07 - 0.152 * cos(time)*0.2, 0.2 + 0.02 + 1.252 * cos(time));//b\n    vec3 c = vec3(0.2 + 0.152 * cos(time), 0.07 - 0.122 * cos(time),-1.6 -0.08 + 1.252 * cos(time));//c\n    vec3 s = vec3(0.05 + 0.152 * cos(time), 0.36 + 0.012 * sin(time),-1.2 + 0.03 - 1.252 * cos(time));//s\n    //тетраэдр\n    //низ\n    vert_ar[0] = c;\n    vert_ar[1] = b;\n    vert_ar[2] = a;\n    //левая \n    vert_ar[3] = a;\n    vert_ar[4] = b;\n    vert_ar[5] = s;\n    //правая\n    vert_ar[6] = b;\n    vert_ar[7] = c;\n    vert_ar[8] = s;\n    //задняя\n    vert_ar[9] = c;\n    vert_ar[10] = s;\n    vert_ar[11] = a;\n    \n    vec3 smeth = vec3(0.5, 0.0,0.4);\n    //квадрат\n    vert_ar[12] = smeth + vec3(0.18  + 0.06- cos(time)*0.108, -0.18 + 0.03 - sin(time)*0.118, 0.0);//право низ\n    vert_ar[13] = smeth + vec3(0.18 + 0.06 - cos(time)*0.108, 0.18  - 0.03 - sin(time)*0.118, 0.0);//право верх\n    vert_ar[14] = smeth + vec3(-0.18 + 0.12 - cos(time)*0.108, 0.18  - 0.03 - sin(time)*0.118, 0.0);//лево верх\n    vert_ar[15] = smeth + vec3(-0.18 + 0.12 - cos(time)*0.108, -0.18 + 0.03 - sin(time)*0.118, 0.0);//лево низ\n    \n    //пятиугольник\n    vert_ar[16] = smeth*1.02 + vec3(-0.40 + 0.25 + 0.17*sin(time), -0.20, 0.0 - 0.003*sin(time)); //низ лево\n    vert_ar[17] = smeth*1.02 + vec3(-0.16 + 0.25 + 0.17*sin(time), -0.25, 0.07 - 0.003*sin(time)); //низ право\n    vert_ar[18] = smeth*1.02 + vec3(-0.03 + 0.25 + 0.17*sin(time), -0.05, 0.03 - 0.003*sin(time)); //право\n    vert_ar[19] = smeth*1.02 + vec3(-0.17 + 0.25 + 0.17*sin(time), 0.1, -0.03 - 0.003*sin(time)); //верхушка\n    vert_ar[20] = smeth*1.02  + vec3(-0.38 + 0.25 + 0.17*sin(time), 0.03, -0.01 - 0.003*sin(time)); //лево\n    //треугольник\n    vert_ar[21] = vec3(0.73, -0.36, 2.0);\n    vert_ar[22] = vec3(0.53, 0.48, 0.0);\n    vert_ar[23] = vec3(0.5, -0.2, -0.19);\n    //тeтраэдр2\n    vec3 N = vec3(0.01 - 0.03*sin(time), 0.12 -0.04*cos(time), -0.25 - 0.5 - 0.5 + 1.07*sin(time));\n    vec3 k = vec3(-0.12 + 0.03*sin(time), -0.11 + 0.03*cos(time), 1.05 - 0.65*cos(time));\n    vec3 l = vec3(0.02 - 0.05*cos(time), -0.03 -0.04*sin(time), 1.5 - 0.5 - 1.14*cos(time));\n    vec3 m = vec3(0.15 - 0.05*cos(time), -0.13 + 0.04*sin(time), -0.25 + 0.5 - 1.03*cos(time));\n    //vec3 N = vec3(0.1 -0.09 - 0.03*sin(time),0.1+ 0.02 -0.04*cos(time),-0.5 + 0.14 + 0.87*sin(time));\n    //vec3 k = vec3(0.1 -0.22 + 0.03*sin(time),0.1 -0.21 + 0.03*cos(time),-0.5 -0.25 - 0.75*cos(time));\n    //vec3 l = vec3(0.1 -0.08 - 0.05*cos(time),0.1 -0.13 -0.04*sin(time),1.0 - 0.5*cos(time));\n    //vec3 m = vec3(0.1 + 0.05 - 0.05*cos(time),0.1 -0.23 + 0.04*sin(time),-0.5 -0.25);\n    \n    \n    //лево\n    vert_ar[24] = N;\n    vert_ar[25] = k;\n    vert_ar[26] = l;\n    //низ\n    vert_ar[27] = k;\n    vert_ar[28] = m;\n    vert_ar[29] = l;\n    //сзади\n    vert_ar[30] = m;\n    vert_ar[31] = N;\n    vert_ar[32] = k;\n    //право\n    vert_ar[33] = m;\n    vert_ar[34] = N;\n    vert_ar[35] = l;\n}\nvoid initColors(out vec4 colors[n], in float time){\n    //тетраэдр\n    colors[0] = vec4(0.6, 0.17, 0.67, 0.0);// низ\n    colors[1] = vec4(0.74, 0.0, 0.84, 0.0); //левая сторона\n    colors[2] = vec4(0.85, 0.43, 0.92, 0.0); //правая сторона\n    colors[3] = vec4(0.9, 0.45, 0.65, 0.0); //сзади \n    //квадрат\n    colors[4] = vec4(0.047, 0.42, 0.42, 0.0);\n    //пятиугольник\n    colors[5] = vec4(mix(vec3(0.59, 0.33 + cos(time)*0.127, 0.22), vec3(0.87, 1.0 + 0.127*cos(time), 0.95), smoothstep(-3.3, 9.0, 0.78)), 0.0);\n    colors[6] = vec4(0.73, 0.6, 0.83, 0.0);\n    //тетраэдр\n    colors[7] = vec4(0.10, 0.47, 0.57, 0.0); //лево\n    colors[8] = vec4(0.0, 0.37, 0.44, 0.0); //низ\n    colors[9] = vec4(0.0, 0.14, 0.27, 0.0); //сзади\n    colors[10] = vec4(0.00, 0.64, 0.74, 0.0); //право\n}\n\nbool in_Poly(int num, vec2 vector){  \n    int size = size_ar[num], start = ind_ar[num], i;\n    vec2 a;\n    vec2 b;\n    // смотрим на знак 3-й координаты векторного произведения для всех сторон, кроме последней, так как у нее будет другая формула\n    for(i = start; i < size + start - 1; i++)\n    {\n        a = vec2(vert_ar[i + 1].x - vert_ar[i].x, vert_ar[i + 1].y - vert_ar[i].y);//отрезок фигуры\n        b = vec2(vector.x - vert_ar[i].x, vector.y - vert_ar[i].y); //вектор до координаты точки от начала отрезка\n        if ( a.x * b.y - b.x * a.y  < 0.0){ \n            return false; \n        }\n    }\n    //смотрим на знак векторного произведения последней стороны\n    a = vec2(vert_ar[start].x - vert_ar[i].x, vert_ar[start].y - vert_ar[i].y);\n    b = vec2(vector.x - vert_ar[i].x, vector.y - vert_ar[i].y);\n    if (a.x * b.y - b.x * a.y  < 0.0){ \n        return false; \n    }\n    return true;   \n}\nfloat get_z(int i, vec2 uv){\n    vec3 a = vert_ar[ind_ar[i]];\n    vec3 b = vert_ar[ind_ar[i]+1];\n    vec3 c = vert_ar[ind_ar[i]+2];    \n    vec3 normal = cross(b-a, c-a);\n    float D = (normal.x*a.x + normal.y*a.y + normal.z*a.z);\n    return (D - (normal.x*uv.x + normal.y*uv.y))/normal.z;\n}\n\nbool point_in_figure (int i, float x, float y, float z, vec3 center[5], float radius[5]){\n    vec3 r = vec3(x, y, z) - center[i];\n    if (dot(r, r) <= radius[i]*radius[i]){\n        return true; //просто проверка на принадлежность к сфере\n    } return false;\n}\nvec3 color (int i, float x, float y, float z, vec3 center[5], float radius[5], float time){\n    vec3 r = vec3(x, y, z) - center[i];\n    r /= vec3(length(r)); //нормировка, чтобы цвета норм были\n    //return vec3(1.0*r.x - 0.28*cos(time) - 0.3, 0.68*r.y+ 0.73 - 0.124*sin(r.y), 0.8 - cos(time));\n    return vec3(mix(vec3(0.09, 0.63 + cos(r.x)*0.27, 0.72), vec3(0.67, 0.9 + cos(r.y)*0.27, 0.95), smoothstep(-1.3, 20.0, 2.6)));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5; //made the coordinate center in the middle\n    uv.x *= iResolution.x/iResolution.y; //alignment\n    vec4 m = iMouse / iResolution.x;\n    initPolygons(vert_ar, iTime);\n    initColors(colors, iTime);\n    \n    vec3 col = vec3(0.94, 0.81, 1.0);\n    fragColor = vec4(col,1.0);\n    \n    vec3 coll = vec3(.3, .3, .3);\n    vec3 center[5];\n    center[0] = vec3(-0.6 + 0.156 * cos(iTime), 0.3*cos(iTime), -0.06 + 0.19*sin(iTime));\n    center[1] = vec3(-0.6, 0.0, 0.02);\n    center[2] = vec3(-0.6 + 0.18 * cos(1.4*iTime), 0.1  + 0.18 * cos(1.4*iTime), 0.02 + 0.4*cos(iTime));\n    center[3] = vec3(-0.6 -0.15 * cos(iTime), 0.0 - 0.4*sin(iTime), 0.04 + 0.3*sin(iTime + 0.75));\n    center[4] = vec3(-0.6 + 0.2*cos(iTime), 0.0 + 0.2*sin(iTime), 0.02 - 0.2*sin(iTime));\n    \n    \n    float radius[5];\n    radius[0] = 0.05 + 0.08*center[0].z;\n    radius[1] = 0.12;\n    radius[2] = 0.085 + 0.08*center[2].z;\n    radius[3] = 0.067 + 0.08*center[3].z;\n    radius[4] = 0.025 + 0.08*center[4].z;\n    \n    float z_max = -100.0, tmp;\n    //проходимся по полигонам\n    for (int i = 0; i < n; i++){\n        if(in_Poly(i, uv)){\n            tmp = get_z(i, uv);\n            if(tmp > z_max){\n                z_max = tmp;\n                if (i==4){\n                    if(m.z>0.0){\n                    col = vec3(-0.55, -0.25, -0.23)  + abs(sin(1.3*uv.xyx+vec3(colors[i].x,colors[i].y,colors[i].z + 0.87*cos(colors[i].x))));\n                    col = abs(vec3(0.15, 0.0, 0.0) - col*0.8);\n                    fragColor = vec4(col,1.0);\n                    }\n                    else{\n                    col = vec3(-0.05, -0.25, -0.23)  + abs(sin(1.3*uv.xyx+vec3(colors[i].x,colors[i].y,colors[i].z + 0.87*cos(colors[i].x))));\n                    col = abs(vec3(0.15, 0.0, 0.0) - col*0.8);\n                    fragColor = vec4(col,1.0);\n                    }\n                }\n                else if (i==5){\n                    if(m.z>0.0){\n                        col = vec3(-0.12, 0.05, 0.0) -0.34 + (sin(1.5*uv.xyx+vec3(colors[i].x,colors[i].y,colors[i].z)));\n                        col = abs(vec3(0.15, 0.04, 0.0) - col);\n                        fragColor = vec4(col,1.0);\n                    }\n                    else{\n                        col = vec3(0.02, 0.05, 0.0) -0.34 + (sin(1.5*uv.xyx+vec3(colors[i].x,colors[i].y,colors[i].z)));\n                        col = abs(vec3(0.15, 0.04, 0.0) - col);\n                        fragColor = vec4(col,1.0);\n                    }\n                }\n                else{\n                    fragColor = vec4(colors[i].x + tmp*0.1, colors[i].y + tmp*0.1, colors[i].z + tmp*0.1, 0.0);\n                }\n            }\n        }\n    }\n    float z;\n    bool flag = false;\n    for (z = 0.5; z >= -0.5; z-=0.01){\n        int i;\n        for (i = 0; (i < 6) && flag!=true; i++){\n            if (point_in_figure(i, uv.x, uv.y, z, center, radius)){\n                if (m.z>0.0){\n                coll = color(i, uv.x, uv.y, z, center, radius, iTime);\n                fragColor = vec4(coll - vec3(-0.08*(float(i)*uv.x -0.5),-0.15*(float(i)*uv.x -0.35) - 0.4*z,0.08*(float(i) -5.1005)),1.0);\n                flag = true;\n                }\n                else{\n                coll = color(i, uv.x, uv.y, z, center, radius, iTime);\n                fragColor = vec4(coll - vec3(-0.08*(float(i)*uv.x -0.5) - 0.2*z,-0.15*(float(i)*uv.x -0.35) - 0.2*z,0.08*(float(i) -0.65)),1.0);\n                flag = true;\n                }\n            }\n        }\n    }\n}","name":"Image","description":"","type":"image"}]}