{"ver":"0.1","info":{"id":"3lXfz8","date":"1595925549","viewed":122,"name":"elektrykow","username":"nexor","description":".","likes":5,"published":1,"flags":96,"usePreview":0,"tags":["raymarching","sound","multipass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = vec3(0.);\n    vec3 bg = vec3(.0);\n    \n    \n    vec2 p = (fragCoord.xy-.5*iResolution.xy)/iResolution.y;\n    \n    vec2 tuv = uv;\n    //uv.y-=sin((uv.x*20.+audio*350.+iTime*1.)*6.)*.005;\n    \n    float d = length(tuv-.5)-.05;\n    \n    bg += vec3(.2,.6,.3)*d*d;\n    \n    \n    float mask = 0.;\n    fragColor = texture(iChannel0,uv);\n    col = fragColor.rgb;\n    mask = fragColor.a;\n    \n    col *= .8;\n    \n    col = mix(col,bg,1.-mask);\n    \n    fragColor.rgb = col;\n    fragColor += vec4(1.,.2,.2,1.)*texture(iChannel1,uv);\n    fragColor.rgb = pow(fragColor.rgb,vec3(1./2.2)); //gamma correction\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"MtjGzt","filepath":"https://soundcloud.com/flamingosis/flight-of-the-flamingo-2?in=flamingosis/sets/bright-moments-1","previewfilepath":"https://soundcloud.com/flamingosis/flight-of-the-flamingo-2?in=flamingosis/sets/bright-moments-1","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float pi = 3.14159;\nvec2 mouse = vec2(.0);\nfloat audio;\n\nvec3 replim(vec3 p, float c, vec3 a, vec3 b)\n{\n \treturn p-c*clamp(round(p/c),a,b);   \n}\n\nmat2 rot(float a)\n{\n \tfloat c=cos(a),s=sin(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat sphere(vec3 p, float r)\n{\n \treturn length(p)-r;   \n}\nfloat box(vec3 p, vec3 b)\n{\n \tp=abs(p)-b;\n    return length(max(p,.0))+min(0.,max(max(p.x,p.y),p.z));\n}\n\nfloat plane(vec3 p, vec3 n, float d)\n{\n    return dot(p,normalize(n)) + d;   \n}\n    \nfloat map(vec3 p)\n{\n    p.xz *= rot(-mouse.x);\n    p.zy *= rot(mouse.y);\n    \n \tfloat d = 1e3;\n    vec3 q = p;\n    p.y-=.1;\n    q=p;\n    p.yz*=rot(pi/8.);\n    p.xz*=rot(-pi/6.);\n    p.x += sin(audio*p.z)*.015;\n    p.y += sin(audio*p.x+35.)*.015;\n    p.z += sin(audio*p.y+15.)*.015;\n    \n    \n    d = 1.-sphere(q,7.); // inside the sphere\n    q = sin(audio*q);\n    d -= q.x*q.y*q.z*.015;\n    q=p;\n    p.x-=-.5;\n    d = min(d,box(p,vec3(.5,.3,.4)));\n    p.y-=.1;\n    p.x-=.2;\n    p = replim(p,.4,vec3(-1.,.0,.0),vec3(0.,.0,.0));\n    d = max(d,-box(p,vec3(.1,.255,.45)));\n    \n    q.x-=.5;\n    d = min(d,box(q,vec3(.3,.3,.4)));\n    q.y-=.2;\n    d = max(d,-box(q,vec3(.1,.135,.45)));\n    q.y-=-.4;\n    q.x-=-.1;\n    d = max(d,-box(q,vec3(.22,.125,.45)));\n    \n    \n    return d;\n}\n\nvec3 normal(vec3 p)\n{\n \tvec2 e=vec2(1e-5,.0);   \n    return normalize(\n    \tmap(p)-vec3(\n            map(p-e.xyy),\n        \tmap(p-e.yxy),\n        \tmap(p-e.yyx)\n            )\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    if (iMouse.x==0.&&iMouse.y==0.)\n    {\n        mouse = vec2(.5);\n    }\n    else\n    {\n     \tmouse = iMouse.xy/iResolution.xy;\n    \t\n    }\n    mouse -= .5;\n    \n    mouse *= vec2(6.,8.);\n    \n    \n    audio  = texture(iChannel0,vec2(.6,.0)).r;\n    audio *= pi*32.;\n    vec3 col = vec3(0.);\n    float object = 0.;\n    vec3 ro = vec3(0.,0.,-7.);\n    \n    float AA = 1.;\n    for(float xaa=0.;xaa<AA;++xaa)\n    for(float yaa=0.;yaa<AA;++yaa)\n    {\n        vec2 uv = (fragCoord+vec2(xaa,yaa)/AA-.5*iResolution.xy)/iResolution.y;\n        vec3 rd = normalize(vec3(uv,4.));\n\n        float t=0.;\n        float i=0.;\n        float max_iter = 80.;\n        for(;i<max_iter;++i)\n        {\n            vec3 p = ro+rd*t;\n            float d = map(p);\n            if (d<1e-3)break;\n            t += d;\n        }\n        \n        if(t>0. && t<20.)\n        {\n            vec3 p = ro+rd*t;\n            float is_edge = .0;\n            {\n                vec2 e = vec2(.0125,.0);\n\n                is_edge = max(0.,dot(normal(p+e.xyy),normal(p-e.xyy)));\n                is_edge = min(is_edge,max(0.,dot(normal(p+e.yxy),normal(p-e.yxy))));\n                is_edge = 1.-is_edge;\n            }\n            vec3 n = normal(p);\n            col += is_edge;\n            object+=is_edge;\n        }\n    }\n    col /= AA*AA;\n    object /= AA*AA;\n    \n    fragColor = vec4(col,object);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    float blurSize = 1.0/iResolution.x;\n    \n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec4 col = vec4(0.);\n    \n    col += texture(iChannel0,uv - vec2(3.75*blurSize,.0)) * .05;\n    col += texture(iChannel0,uv - vec2(2.25*blurSize,.0)) * .09;\n    col += texture(iChannel0,uv - vec2(1.5*blurSize,.0)) * .12;\n    col += texture(iChannel0,uv - vec2(1.*blurSize,.0)) * .15;\n    col += texture(iChannel0,uv                       ) * .16;\n    col += texture(iChannel0,uv + vec2(1.*blurSize,.0)) * .15;\n    col += texture(iChannel0,uv + vec2(1.5*blurSize,.0)) * .12;\n    col += texture(iChannel0,uv + vec2(2.25*blurSize,.0)) * .09;\n    col += texture(iChannel0,uv + vec2(3.75*blurSize,.0)) * .05;\n    \n    fragColor = col;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float blurSize = 1.0/iResolution.y;\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec4 col = vec4(0.);\n    \n    col += texture(iChannel0,uv - vec2(3.75*blurSize,.0).yx) * .05;\n    col += texture(iChannel0,uv - vec2(2.25*blurSize,.0).yx) * .09;\n    col += texture(iChannel0,uv - vec2(1.5*blurSize,.0).yx) * .12;\n    col += texture(iChannel0,uv - vec2(1.*blurSize,.0).yx) * .15;\n    col += texture(iChannel0,uv                          ) * .16;\n    col += texture(iChannel0,uv + vec2(1.*blurSize,.0).yx) * .15;\n    col += texture(iChannel0,uv + vec2(1.5*blurSize,.0).yx) * .12;\n    col += texture(iChannel0,uv + vec2(2.25*blurSize,.0).yx) * .09;\n    col += texture(iChannel0,uv + vec2(3.75*blurSize,.0).yx) * .05;\n    \n    fragColor = col;\n}","name":"Buffer C","description":"","type":"buffer"}]}