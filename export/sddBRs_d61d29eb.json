{"ver":"0.1","info":{"id":"sddBRs","date":"1657045655","viewed":116,"name":"Mandelbrot Deform","username":"mattdeeds","description":"Click and drag to use different parameters.  The algorithm transforms a grid using z=z^2+c four iterations.  Instead of making a full step each time, the x-position of the mouse controls what portion of a step to make.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal","noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define kStepCount 10\n#define kLoopSize 9.0\n#define kSensitivity 0.3\n\nvec2 cMultiply(in vec2 a, in vec2 b) {\n  return vec2(a.x * a.x - b.y * b.y, 2.0 * a.x * b.y);\n}\n\n\nvec2 smallIterate(in vec2 a, in float stepSize) {\n  float t = (iMouse.y / iResolution.y) * 2.0 * 3.1415926;\n  vec2 a0 = vec2(\n    a.x * cos(t) - a.y * sin(t),\n    a.x * sin(t) + a.y * cos(t));\n  \n  for (int i = 0; i < kStepCount; ++i) {\n    vec2 nextA = cMultiply(a, a) + a0;\n    a = mix(a, nextA, stepSize);\n    a = kLoopSize * sin(a / kLoopSize);\n  }\n  return a;\n}\n\n\nfloat grid(in vec2 xy) {\n  vec2 uv = xy * 10.0;\n  return min(smoothstep(-0.95, -0.80, cos(uv.x)), \n             smoothstep(-0.95, -0.80, cos(uv.y)));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord/iResolution.xy - 0.5) * vec2(16, 8);\n    vec2 a = smallIterate(uv, kSensitivity * (iMouse.x / iResolution.x - 0.5));\n\n    // Time varying pixel color\n    float intensity = grid(a);\n    vec3 col = vec3(1.0, 0.8, 0.9) * intensity;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}