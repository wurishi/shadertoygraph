{"ver":"0.1","info":{"id":"4syyDK","date":"1523309149","viewed":1065,"name":"Webcam feedback oscillated","username":"cacheflowe","description":"My first attempt at using a 2nd buffer on Shadertoy","likes":18,"published":1,"flags":34,"usePreview":0,"tags":["feedback"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uvCam = fragCoord/iResolution.xy;\n    uvCam.x = 1. - uvCam.x; // mirror camera\n    fragColor = 1.3 * mix(texture(iChannel0, uv), texture(iChannel1, uvCam), 0.25);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI     3.14159265358\n#define TWO_PI 6.28318530718\n#define feedbackSpeed\t0.002\n\nfloat luma(vec3 color) {\n  return dot(color, vec3(0.299, 0.587, 0.114));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // get webcam color\n   \tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 uvCam = fragCoord/iResolution.xy;\n    uvCam.x = 1. - uvCam.x; // mirror camera\n    vec4 texColor = texture(iChannel0, uvCam);\n    \n    // oscillate or manually control brightness threshold for seed pixels\n    float brightnessThreshold = 0.6 + 0.4 * sin(iTime);\n    if(iMouse.z > 0.) brightnessThreshold = iMouse.x / iResolution.x;\n    if(luma(texColor.rgb) > brightnessThreshold) {\n        // if bright enough, modify color & draw seed pixels on top\n        fragColor = vec4(\n            texColor.r + 0.25 * sin(iTime),\n            texColor.g + 0.25 * sin(iTime * 0.8),\n            texColor.b + 0.25 * sin(iTime * 0.7),\n            1.\n            );\n    } else {\n        // otherwise, run feedback\n        // turn color into a rotation for feedback smearing\n        float colorToRads = TWO_PI * luma(texColor.rgb) * 3.;\n        uv += vec2(cos(colorToRads) * feedbackSpeed, sin(colorToRads) * feedbackSpeed);\n\t\tfragColor = texture(iChannel1, uv);\n    }\n}","name":"Buf A","description":"","type":"buffer"}]}