{"ver":"0.1","info":{"id":"ddB3RD","date":"1667308650","viewed":49,"name":"Colour Distort","username":"jurnip","description":"Shifting waves of distorted colour\nUse mouse to manipulate","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["chromaticaberration","distort","colour","cosine"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by Jared Berghold 2022 (https://www.jaredberghold.com/)\n// Licensed under CC BY 4.0\n\nconst float MAX_SCALE = 5.0;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n  // Calculate pixel coordinate\n  vec2 uv = fragCoord/iResolution.xy;\n  \n  // Transform the input fragment shader co-ordinate as follows:\n  // We want 'pos' to range from 0 -> 1 in the shorter dimension \n  // and j -> k in the longer dimension, where j is less than 0,\n  // and k is greater than 1.\n  // Note that fragCoord is in the range (0,0) to (width,height) of the\n  // render area. If the render area is width = 1000 and height = 500\n  // then the range is (0,0) to (1000,500).\n  vec2 pos = fragCoord.xy / min(iResolution.x, iResolution.y);\n  vec2 lengths = iResolution.xy / min(iResolution.x, iResolution.y);\n  pos -= 0.5 * lengths - 0.5;\n  \n  // Transform the mouse position in the same way, so it can be\n  // compared to the rendering position, 'pos'.\n  vec2 mousePos = iMouse.xy / min(iResolution.x, iResolution.y);\n  mousePos -= 0.5 * lengths - 0.5;\n  \n  // Calculate the distance from the current point being\n  // rendered, 'pos', and the mouse cursor position.\n  vec2 dM = pos - mousePos;\n  float distFromMouse = length(dM);\n\n  // Adjust the range from 0.0 to 1.0, to -0.5 to 0.5\n  uv = uv - 0.5;\n  \n  float scale = 5.0 * (0.3 - 0.7 * cos(iTime / 3.0)) * (0.5 - 0.5 * cos(iTime / 17.0));\n\n  uv = uv / mix(1.0, 0.5, scale / MAX_SCALE) * mix(1.0, 1.0 - distFromMouse, scale / MAX_SCALE);\n\n  // Manipulate the uv before sampling the texture\n  //uv.y = uv.y * sin(iTime);\n  //uv.y = uv.y * (1.0 - 0.25 * distFromMouse);\n\n  float uvRy, uvGy, uvBy;\n  uvRy = uv.y + scale * (0.2 * distFromMouse * sin(0.5 * iTime) + 0.3 * distFromMouse * sin(0.9 * iTime + 0.5));\n  uvGy = uv.y + scale * (0.2 * distFromMouse * sin(0.7 * iTime) + 0.3 * distFromMouse * sin(0.7 * iTime + 0.5));\n  uvBy = uv.y + scale * (0.2 * distFromMouse * sin(0.9 * iTime) + 0.3 * distFromMouse * sin(0.5 * iTime + 0.5));\n\n  uv.x = mix(1.0, 0.5, scale / MAX_SCALE) * (uv.x + scale * (0.01 * sin(iTime + 20.0 * uv.y) + 0.02 * sin(iTime + 21.0 * uv.y)));\n\n  // Adjust the range from -0.5 to 0.5, to 0.0 to 1.0\n  uv = uv + 0.5;\n\n  // Sample the texture with uv\n  vec4 red = texture(iChannel0, vec2(uv.x, uvRy + 0.5));\n  vec4 green = texture(iChannel0, vec2(uv.x, uvGy + 0.5));\n  vec4 blue = texture(iChannel0, vec2(uv.x, uvBy + 0.5));\n  \n  vec4 texCol = vec4(red.x, green.y, blue.z, 1.0);\n  \n  // The following block of code can be used\n  // to test the mouse cursor position.\n  // For small values of distFromMouse (i.e. near the mouse cursor),\n  // the value 'c' will be high (white). Whereas the further away\n  // 'pos' is from the mouse cursor the lower 'c' will be (black).\n  //float c = 0.01 / distFromMouse;\n  //vec3 dotCol = vec3(c, c, c);\n  //fragColor = vec4(dotCol, 1.0);\n  \n  // Combine the mouse position and the effect for testing.\n  //float c = 0.01 / distFromMouse;\n  //vec4 dotCol = vec4(c, c, c, 1.0);\n  //fragColor = vec4(mix(texCol, dotCol, 0.5));\n\n  // Optionally apply gamma correction\n  //float gamma = 2.2;\n  //texCol.rgb = pow(texCol.rgb, vec3(1.0 / gamma));\n\n  // Pass the colour to the output fragColor for rendering, and\n  // include an alpha value of 1.0 (i.e. fully opaque).\n  fragColor = vec4(texCol);\n}","name":"Image","description":"","type":"image"}]}