{"ver":"0.1","info":{"id":"4fSSDD","date":"1708210100","viewed":69,"name":"circle distortions","username":"dactorwatson","description":"radial, vertical, and horizontal perturbation of radius","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["geometry"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sin_func(float x, float size, float speed) {\n    return sign(sin(x * size + iTime * speed)) + 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uv_n = fragCoord/iResolution.x;\n\n    vec2 center = vec2(0.5, 0.5 * iResolution.y / iResolution.x);\n    float radius = 0.2;\n    \n    vec2 delta = uv_n - center;\n    \n    float cos_theta = atan(delta.x, radius);\n    float sin_theta = atan(delta.y, radius);\n    float radial_theta = atan(delta.y, delta.x);\n    \n    float d = distance(center, uv_n);\n    \n    float cos_displ = sin(cos_theta * 15.0 + iTime);\n    float sin_displ = sin(sin_theta * 15.0 + iTime);\n    float radial_displ = sin(radial_theta * 15.0 + iTime);\n    \n    float circ = step(d + (cos_displ * 0.01 * iTime) + (sin_displ * 0.01 * iTime) + (radial_displ * 0.01 * iTime), radius);\n    vec3 col = vec3(circ);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}