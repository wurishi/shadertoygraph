{"ver":"0.1","info":{"id":"XtSSzR","date":"1440813669","viewed":346,"name":"Anemone Ocean","username":"public_int_i","description":"anemone ocean","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":" //Ethan Alexander Shulman 2015   http://etahn.com/\n  //Raymarched scene\n\n  \n  #define EPSILON .01\n  #define ITERATIONS 128\n  //#define USE_SMIN\n  #define SMIN_AMOUNT .4\n  #define VIEW_DISTANCE 90.\n  \n  //thank you to inigo quilez for your awesome tutorials and examples on raymarching https://iquilezles.org/articles/distfunctions\n  float sdCapsule( vec3 p, vec3 a, vec3 b, float r ) {\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n  }\n  \n  float smin( float a, float b, float k ) {\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n  }\n  \n  \n  vec2 rot(in vec2 v, in float ang) {\n    float si = sin(ang);\n    float co = cos(ang);\n    return v*mat2(si,co,-co,si);\n}\n  \n      const vec3 REPEAT = vec3(2.,0.,2.); \n  float thingy(in vec3 p) {\n    vec3 lp = mod(abs(p),REPEAT)-REPEAT/2.;\n    vec3 flp = floor(abs(p)/vec3(REPEAT.x,1.,REPEAT.z));\n    float ph = ((cos(flp.x+iTime)+cos(flp.z+cos(flp.x*16.452+iTime*2.234)))+2.5);\n        \n      \n    vec3 pa = lp;\n    vec3 ba = vec3(0.,1.,0.);\n      ba.y *= ph*1.4;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n      float r = .5;//.499-max(0.,(ph-2.5))*.2;\n    return length( pa - ba*h ) - r;\n      \n      //return sdCapsule(lp,vec3(0.,0.,0.),vec3(0.,ph*1.4,0.),.499-max(0.,(ph-2.5))*.2);\n  }\n\n  float getDistance(in vec3 p) {\n    #ifdef USE_SMIN\n      return smin(thingy(p),\n          smin(thingy(p-vec3(.5,0.,0.)*REPEAT),\n            smin(thingy(p-vec3(0.,0.,.5)*REPEAT),\n              smin(thingy(p+vec3(.5,0.,0.)*REPEAT),thingy(p+vec3(0.,0.,.5)*REPEAT),SMIN_AMOUNT),SMIN_AMOUNT),SMIN_AMOUNT), SMIN_AMOUNT\n          )*.65;\n    #else\n    return min(thingy(p),\n          min(thingy(p-vec3(.5,0.,0.)*REPEAT),\n            min(thingy(p-vec3(0.,0.,.5)*REPEAT),\n              min(thingy(p+vec3(.5,0.,0.)*REPEAT),thingy(p+vec3(0.,0.,.5)*REPEAT))))\n          )*.65;\n  #endif\n  }\n  vec3 getNormal(in vec3 p) {\n     const vec2 NE = vec2(0.04,0.0);\n     return normalize(vec3(getDistance(p+NE.xyy)-getDistance(p-NE.xyy),\n                          getDistance(p+NE.yxy)-getDistance(p-NE.yxy),\n                          getDistance(p+NE.yyx)-getDistance(p-NE.yyx)));\n  }\n  vec3 getBackground(in vec3 dir) {\n    return vec3(0.);\n  }\n  \n  float ambientOcclusion(in vec3 p, in vec3 norm) {\n\n  #define AO_ITERATIONS 14\n  #define AO_PRECISION .25\n  #define AO_INTENSITY 1.\n  #define AO_ATTEN 0.44\n\n    float sum = 0.0;\n    float atten = 1.0;\n    float s = AO_PRECISION;\n    \n    float d;\n    \n\t    for (int i = 0; i < AO_ITERATIONS; i++) {\n        d = getDistance(p+norm*s);\n        \n        sum += (s-d)*atten;\t\t\n        s += AO_PRECISION;\t\n        atten *= AO_ATTEN;\n\t    }\n\t\n\t    return 1.0-max(0.0,sum*AO_INTENSITY);\n  \n  }\n  \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 R = iResolution.xy;\n\n    vec3 ro = vec3(0.,10.,0.);\n    vec2 cuv = (fragCoord.xy-R*.5)/R;\n    vec3 rd = normalize(vec3(rot(cuv,0.),1.0));\n  \n    float d,s = 0.01;\n    for (int i = 0; i < ITERATIONS; i++) {\n         d = getDistance(ro+rd*s);\n         if (d < EPSILON || s > VIEW_DISTANCE) break;\n         s += d;\n         rd = normalize(vec3(rot(cuv,pow(s/40.,2.4)),1.0));\n    }\n  \n    if (d > EPSILON) {\n      fragColor = vec4(0.,0.,0.,1.);\n      return;\n    }\n  \n    vec3 hit = ro+rd*s;\n    vec3 normal = -getNormal(hit);\n    vec3 c = vec3(.3,.45,.94)*(.6+(cos(hit.x*.2+iTime)+cos(hit.y*.2+iTime)+cos(hit.z*.2-iTime*3.)*.2+.4));\n    \n    vec3 globalLightDir = normalize(vec3(2.,8.,4.));\n    c = c*ambientOcclusion(hit,-normal)*(.5+max(0.,1.-dot(normal,rd))*.5);\n    c *= 1.6;\n  \n    c = mix(c,vec3(0.),min(1.,pow(s/VIEW_DISTANCE,.5)));\n    \n   fragColor = vec4(c,1.0);\n  }\n","name":"","description":"","type":"image"}]}