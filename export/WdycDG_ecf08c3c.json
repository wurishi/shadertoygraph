{"ver":"0.1","info":{"id":"WdycDG","date":"1603565072","viewed":905,"name":"Fast Bloom/Blur","username":"opezdl","description":"im learning how to blur stuff\nbased on https://john-chapman.github.io/2019/03/29/convolution.html\n\ntbd - make good bloom","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["blur","bloom","multipass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n \tvec4 OriginalColor \t= texture(iChannel0, uv, 1.0);\n    vec4 BlurredColor \t= texture(iChannel1, uv);\n    \n    float lum1 = dot(BlurredColor.rgb, lumvec);\n    vec4 bloom = Pow(BlurredColor, BLOOM_SATURATION);\n    float lum2 = dot(bloom.rgb, lumvec);\n    bloom.rgb*= lum1/(lum2 + 0.001);\n\n    #ifdef BLOOM_THRESHOLD_TYPE_HARD\n    \tbloom -= BLOOM_THRESHOLD;\n    \tbloom = max(bloom, vec4(0));\n    \tbloom *= 1.0 / (1.0 - BLOOM_THRESHOLD);\n    #endif\n    #ifdef BLOOM_THRESHOLD_TYPE_SOFT\n    \tvec4 black = vec4(0,0,0,1);\n    \tvec2 mixingparams = vec2(clamp(BLOOM_THRESHOLD - BLOOM_Window, 0.0, 1.0), clamp(BLOOM_THRESHOLD + BLOOM_Window, 0.0, 1.0));\n    \tbloom = mix(black, bloom, smoothstep ( mixingparams.x , mixingparams.y , lum2));\n    #endif\n\n    \n    #ifdef DO_BLOOM\n    \t//OriginalColor.rgb = LinearTosRGB(OriginalColor.rgb);\n    \t//BlurredColor = bloom;\n    \tBlurredColor = 1.0 - (1.0 - OriginalColor) * (1.0 - 1.00 * bloom);\n    \t//OriginalColor.rgb = sRGBtoLinear(OriginalColor.rgb);\n    #endif\n    \n    //BlurredColor.rgb = sRGBtoLinear(BlurredColor.rgb);\n    \n    float f = sin(3.14*uv.x + 0.6*iTime);\n\tfragColor = mix( OriginalColor, BlurredColor, smoothstep( -0.1, 0.1, f ) );\n\tfragColor.a = 1.0;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 tex_coord = fragCoord / iResolution.xy;\n    vec4 original_tex = texture(iChannel0, tex_coord, LOD);\n    vec4 thresholded_tex = original_tex - vec4(BLOOM_THRESHOLD);\n    \n    thresholded_tex.rgb = max(thresholded_tex.rgb, vec3(0.0));\n    thresholded_tex.rgb *= 1.0 / ( 1.0 - BLOOM_THRESHOLD);\n    //float lum2 = dot(thresholded_tex.rgb, lumvec);\n    //vec4 black = vec4(0,0,0,1);\n    //vec2 mixingparams = vec2(clamp(BLOOM_THRESHOLD - BLOOM_Window, 0.0, 1.0), clamp(BLOOM_THRESHOLD + BLOOM_Window, 0.0, 1.0));\n    //thresholded_tex = mix(black, thresholded_tex, smoothstep ( mixingparams.x , mixingparams.y , lum2));\n    \n    fragColor = original_tex;\n    #ifdef DO_BLOOM\n    \tfragColor = thresholded_tex;\n    #endif\n    fragColor.a = 1.0;\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 texel_size = 1.0 / iResolution.xy;\n    vec2 tex_coord = (fragCoord + 0.5) / iResolution.xy;\n    //tex_coord += 0.5;\n    vec2 lum;\n    vec4 sample_summ = texture(iChannel0, tex_coord, LOD);\n    vec4 weight_summ = vec4(1.0);    \n    for(int i=0; i<5; i++)\n    {\n    \tvec4 six \t= texture(iChannel0, tex_coord + vec2(1.0,0) * texel_size * offsets[i] * LOD, LOD);\n\t\tvec4 eight \t= texture(iChannel0, tex_coord - vec2(1.0,0) * texel_size * offsets[i] * LOD, LOD);\n        //six.rgb = LinearTosRGB(six.rgb);\n        //eight.rgb = LinearTosRGB(eight.rgb);\n        lum.x = dot(six.rgb, lumvec);\n        lum.y = dot(eight.rgb, lumvec);\n        sample_summ += six * weights[i];// * lum.x;\n        sample_summ += eight * weights[i];// * lum.y;\n        weight_summ += 2.0 * weights[i];// * dot(lum, vec2(0.5));\n    }\t   \n    sample_summ /= weight_summ;\n    fragColor = sample_summ;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"float LOD = 4.0;\n//const float weights[3] \t= float[3](0.260047, 0.192949, 0.047005); \n//const float offsets[3] \t= float[3](0.642658, 2.370237, 4.277608);\nconst float weights[5] \t= float[5](0.121647, 0.217609, 0.139405, 0.06253, 0.019632); \nconst float offsets[5] \t= float[5](0.0, 1.465881, 3.420932, 5.378059, 7.335473);\n#define DO_BLOOM\n#define BLOOM_SATURATION 1.0\n\n//#define BLOOM_THRESHOLD_TYPE_SOFT  // HARD or SOFT\n#define BLOOM_THRESHOLD 0.6f\n#define BLOOM_Window 0.12f\n\n\n\nvec3 lumvec = vec3(0.212500006, 0.715399981, 0.072100013);\n\nvec3 sRGBtoLinear (vec3 Color)\n{\n\treturn vec3(pow(Color.r, 0.45455), pow(Color.g, 0.45455), pow(Color.b, 0.45455));\n}\n\nvec3 LinearTosRGB (vec3 Color)\n{\n\treturn vec3(pow(Color.r, 2.2), pow(Color.g, 2.2), pow(Color.b, 2.2));\n}\n\nvec4 Pow (vec4 Input, float factor)\n{\n    return vec4(pow(Input.x, factor), pow(Input.y, factor), pow(Input.z, factor), pow(Input.w, factor));\n}\n\nvec3 Pow (vec3 Input, float factor)\n{\n    return vec3(pow(Input.x, factor), pow(Input.y, factor), pow(Input.z, factor));\n}\n\nvec2 Pow (vec2 Input, float factor)\n{\n    return vec2(pow(Input.x, factor), pow(Input.y, factor));\n}\n\nfloat Clamp(float value, float lo, float hi)\n{\n    return (value < lo) ? lo : (hi < value) ? hi : value;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 texel_size = 1.0 / iResolution.xy;\n    vec2 tex_coord = (fragCoord + 0.5) / iResolution.xy;\n    //tex_coord += 0.5;\n    vec2 noise_coord = fragCoord / iChannelResolution[1].xy;\n    vec2 lum;\n    vec4 sample_summ = texture(iChannel0, tex_coord, LOD);\n    vec4 weight_summ = vec4(1.0);  \n    for(int i=1; i<5; i++)\n    {\n     \tvec4 six \t= texture(iChannel0, tex_coord + vec2(0.0 ,1.0) * texel_size * offsets[i] * LOD, LOD);\n\t\tvec4 eight \t= texture(iChannel0, tex_coord - vec2(0.0, 1.0) * texel_size * offsets[i] * LOD, LOD);\n        vec4 noise1 \t= texture(iChannel1, noise_coord + vec2(1.0,0) * texel_size * offsets[i]);\n\t\t//vec4 noise2 \t= texture(iChannel1, noise_coord - vec2(1.0,0) * texel_size * offsets[i]);\n        //noise\n        lum.x = dot(six.rgb, lumvec);\n        lum.y = dot(eight.rgb, lumvec);\n        sample_summ += (0.95 * six + 0.05 * noise1) * weights[i]; //  * lum.x;//\n        sample_summ += (0.95 * eight + 0.05 * noise1.gbra) * weights[i];// * lum.y;//\n        weight_summ += 2.0 * weights[i];// * dot(lum, vec2(0.5));\n    }\t    \n    sample_summ /= weight_summ;   \n\tfragColor = sample_summ;\n}","name":"Buffer C","description":"","type":"buffer"}]}