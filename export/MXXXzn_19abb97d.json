{"ver":"0.1","info":{"id":"MXXXzn","date":"1709069044","viewed":105,"name":"voronoi layers","username":"elias_n_d","description":"oh yeah, it's a bunch of voronoi layers with colors","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define BREATHE  // Comment out to speed up\n\n#define EPSILON .00001\n\nvec2 random2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 scale = vec2(6.,4.);\n    int octaves = 5;\n    \n    float val = 1.;\n    float width = 0.05;\n    vec3 cellCol = vec3(.0001);\n    \n    for (int i = 0; i < octaves; i++)\n    {\n        #ifdef BREATHE\n        float animation = sin(iTime*(float(i+1)))/2.+.5;\n\n        vec2 cell = floor((scale+animation)*(uv-animation/scale/2.));\n        vec2 frac = fract((scale+animation)*(uv-animation/scale/2.));\n        #else\n        vec2 cell = floor(scale*uv);\n        vec2 frac = fract(scale*uv);\n        #endif\n\n        vec2 mc; // Cell of nearest point\n        vec2 mr; // Vector to nearest point\n        float dist = 8.; // Distance to nearest point\n\n        for( int j=-1; j<=1; j++ )\n        for( int i=-1; i<=1; i++ )\n        {\n            vec2 c = vec2(i, j);  // Cell\n            vec2 p = sin(iTime+6.21*random2(cell+c))*.5+.5;\n            vec2 r = (c+p)-frac;  // Vector from frac to point in cell\n            float d = dot(r,r); // Squared distance of r\n\n            if( d < dist )\n            {\n                dist = d;\n                mr = r;\n                mc = c;\n            }\n        }\n\n        dist = 8.0; // Cache closest vector and cell, reset dist\n        for( int j=-2; j<=2; j++ )\n        for( int i=-2; i<=2; i++ )\n        {\n            vec2 c = mc + vec2(i, j); // Cell offset from min cell\n            vec2 p = sin(iTime+6.21*random2(cell+c))*.5+.5;\n            vec2  r = (c+p) - frac;\n            \n            if( dot(mr-r,mr-r)>EPSILON ) // skip the same cell\n            dist = min( dist, dot(0.5*(mr+r), normalize(r-mr)) );\n        }\n        \n        \n        cellCol = (1.-step(0.,-cellCol)) * (cellCol + vec3(random2(cell+mc),random2((cell+mc)*2.).x)) / (float(i+1)*.8)*1.8;\n        cellCol *= step(width, dist);\n        scale *= 2.;\n        width *= 1.3;\n    }\n\n    // Output to screen\n    fragColor = vec4(cellCol,1.0);\n}","name":"Image","description":"","type":"image"}]}