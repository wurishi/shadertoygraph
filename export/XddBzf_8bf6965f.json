{"ver":"0.1","info":{"id":"XddBzf","date":"1526231812","viewed":106,"name":"Sphere01","username":"Benstyle","description":"My first ray marching experience !!!!","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["spheretestfirstone"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nfloat sphere(vec3 o,vec3 v,vec3 p, vec3 l, float lint, float r)\n{\n\tfloat d = length(o-p) - r;\n    vec3 t = v;\n\n\tfor (int i = 0; i <= 64; i++)\n    {\n        t += d*v;\n        d = (length( o + t - p) - r); // ray marching algorithm we look for the nearest point on the sphere\n        \n        \n            }\n    if(d < 0.1) {\n        float intensity = 0.;\n        vec3 LtoPoint = o + t - l;\n        vec3 normale = o + t - p;\n        normale = normale/(length(normale)); // creating two vectors for lighting\n                           \n        vec3 StoPoint = normale + vec3(texture(iChannel0,normale.xy*.3).x/10.,texture(iChannel0,normale.xy*.3).y/10.,0); // adding bump map ( iChannel 0)\n        float l1 = length(LtoPoint);\n        float l2 = length(StoPoint);\n        \n            \n        intensity = (lint*dot(LtoPoint,-StoPoint)/(l1*l1*l2)); // calculating light intensity\n        intensity = (intensity + abs(intensity))/2.;\n        intensity += .1;\n        \n      \n            \n            \n\treturn intensity;\n        }\n    else{\n        return .7;\n            }\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy - 0.5 ;\n    \n    uv.x *= iResolution.x/iResolution.y;\n\n    // creating the camera, the screen the sphere and the light\n    \n    vec3 o = vec3(0.,0.,-2.);\n    vec3 v = vec3(uv.x,uv.y, 0) - o;\n    v = v/length(v);\n    \n    float t = iTime;\n    \n    vec3 p = vec3(0. + cos(.5*t)*5., 0., 20. + sin(.5*t)*10.);\n    vec3 l = vec3(40.*(iMouse.x/iResolution.x - .5),40.*(iMouse.y/iResolution.y - .5),2.);\n    \n    float intensity = sphere(o,v, p, l,10., 5.);\n\n    // Output to screen\n    \n    vec4 sphereCol = vec4(intensity*.5,intensity*.5,intensity,1.0);\n    \n    fragColor = sphereCol;\n}","name":"Image","description":"","type":"image"}]}