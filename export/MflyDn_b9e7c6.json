{"ver":"0.1","info":{"id":"MflyDn","date":"1721030300","viewed":16,"name":"BelousovZhabotinsky(Projet POGL)","username":"Oscartichaud","description":"TW Epilepsy!","likes":0,"published":1,"flags":48,"usePreview":0,"tags":["bzf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nstruct Gradient {\n    vec4 colors[5];\n    float positions[5];\n};\n\nvec4 interpolate(vec4 color1, vec4 color2, float factor) {\n    return mix(color1, color2, factor);\n}\n\nvec4 apply_gradient(float val, Gradient gradient) {\n    for (int i = 0; i < 4; ++i) {\n        if (val >= gradient.positions[i] && val <= gradient.positions[i+1]) {\n            float factor = (val - gradient.positions[i]) / (gradient.positions[i+1] - gradient.positions[i]);\n            return interpolate(gradient.colors[i], gradient.colors[i+1], factor);\n        }\n    }\n    return gradient.colors[4];\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float cell_state = texture(iChannel0, fragCoord/(iResolution.xy * scale)).r;\n    float val = cell_state / q;\n    \n    // Define gradient\n    Gradient gradient;\n    gradient.colors[0] = vec4(0.0, 0.0, 0.0, 1.0); // Black\n    gradient.colors[1] = vec4(0.207, 0.071, 0.416, 1.0); // Blue / Purple\n    gradient.colors[2] = vec4(0.976, 0.074, 0.384, 1.0); // Pink / Red\n    gradient.colors[3] = vec4(1.0, 0.556, 0.267, 1.0); // Yellow / Orange\n    gradient.colors[4] = vec4(1.0, 1.0, 1.0, 1.0); // White\n\n    gradient.positions[0] = 0.0;\n    gradient.positions[1] = 0.25;\n    gradient.positions[2] = 0.5;\n    gradient.positions[3] = 0.75;\n    gradient.positions[4] = 1.0;\n    \n    fragColor = apply_gradient(val, gradient);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float sample_tex(vec2 uv, float i, float j)\n{\n    vec2 delta_ij = vec2(i,j) / iResolution.xy;\n    float val = texture(iChannel0, uv + delta_ij).r;\n    if (val > 0.0)\n    {\n        return val;\n    }\n    return 0.0;\n}\n\nvec3 count_neighbours(vec2 uv)\n{\n    vec3 count = vec3(0.0, 0.0, 0.0);\n    for (int i=-1; i <= 1; i += 1)\n    {\n        for (int j=-1; j <= 1; j += 1)\n        {\n            float val = sample_tex(uv, float(i), float(j));\n            if ((i != 0) || (j != 0))\n            {\n                if (val > 0.5)\n                {\n                    if (val > (q - 0.5))\n                    {\n                        count = count + vec3(0.0, 1.0, 0.0);\n                    }\n                    else\n                    {\n                        count = count + vec3(1.0, 0.0, 0.0);\n                    }\n                }\n            }\n            count = count + vec3(0.0, 0.0, val);\n        }\n    }\n    return count;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 size = iResolution.xy;\n    \n    vec2 uv = fragCoord / size;\n    \n    if (iFrame == 0)\n    {\n        float factor = texture(iChannel2, uv).r;\n        fragColor = factor * ill;\n    }\n    else\n    {\n        vec4 val = texture(iChannel0, uv);\n        \n        int frame = iFrame % gen_nb_frames;\n        if (frame == 0)\n        {\n            vec3 neighbours = count_neighbours(uv);\n            float a = neighbours[0];\n            float b = neighbours[1];\n            float s = neighbours[2];\n\n            float cell = val.r;\n            \n            if (cell < 0.5) // Current cell is healthy\n            {\n                fragColor = id(float(int(a / k1) + int(b / k2)));\n            }\n            else if (cell < (q - 0.5)) // Current cell is infected\n            {\n                fragColor = id(float(int(s/(a + b + 1.0))) + g);\n            }\n            else // Current cell is ill\n            {\n                fragColor = healthy;\n            }\n        }\n        else\n        {\n            fragColor = val;\n        }\n    }\n    \n    if (iMouse.z > 0.0 && distance(iMouse.xy, fragCoord * scale) < brush_radius)\n    {\n        fragColor = healthy;\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"float scale = 2.0;\nint gen_nb_frames = 2;\n\n#define healthy vec4(0.0, 0.0, 0.0, 1.0)\n#define ill vec4(q, q, q, 1.0)\n#define id(val) vec4(val, val, val, 1.0)\n\n#define brush_radius 40.0\n\n#define q 200.0\n// integer in the range [2, 255]\n\n#define k1 2.0\n// 2 or 3 for best results\n#define k2 3.0\n// 3 for best results\n\n#define g 70.0\n// integer in the range [0,100]","name":"Common","description":"","type":"common"}]}