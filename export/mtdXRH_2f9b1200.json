{"ver":"0.1","info":{"id":"mtdXRH","date":"1685044123","viewed":84,"name":"Stateless Randomwalk","username":"fungi","description":"using simplex noise to simulate random movement.\nit is important for the transformation noise to be bijective, as otherwise points could get duplicated or deleted temporarily.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["simplex"],"hasliked":0,"parentid":"dttGWl","parentname":"Bijective Distortion"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 hash( vec2 p )\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise1( in vec2 p )\n{\n    // noise by IQ\n    // https://www.shadertoy.com/view/4s23zz\n    \n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\n\nfloat noise2(in vec2 p)\n{\n    return\n        0.500*noise1(p*1.0)\n       +0.250*noise1(p*2.0)\n       +0.125*noise1(p*4.0)\n    ;\n}\n\nvec2 noise3(in vec2 p)\n{\n    return vec2(noise2(p), noise2(p + 20.0));\n}\n\nvec2 t1(in vec2 p)\n{\n    return p + .69 * noise3(0.05 * p);\n}\n\nvec2 transform(in vec2 p, in float time)\n{\n    time *= 0.2;\n    vec2 timeOffset = 10. * vec2(cos(time), sin(time));\n    timeOffset = t1(t1(timeOffset));\n    return t1(t1(t1(t1(t1(p)) + timeOffset) - timeOffset));\n}\n\nvec2 deriv(in vec2 p, in float time)\n{\n    float delta = 0.001;\n    float inv_delta = 1000.0;\n    vec2 t0 = transform(p, time);\n    vec2 t1 = transform(p + vec2(delta, 0.0), time);\n    vec2 t2 = transform(p + vec2(0.0, delta), time);\n    return vec2(length(t1 - t0) * inv_delta, length(t2 - t0) * inv_delta);\n}\n\n\nvoid Image(out vec4 fragColor, in vec2 uv)\n{\n    vec2 p = uv * 5.0;\n    float g = 0.02;\n    vec3 col = vec3(1.);\n    \n    int x = 50;\n    float dt = 0.0;\n    \n    while (x --> 0) {\n        float time = iTime + dt * 10.0;\n        vec2 t = transform(p, time);\n        t = fract(t*0.5 - 0.5)*2.0 - 0.5;\n        if (dot(t,t) < g*g) {\n            col = vec3(1.-dt*2.);\n        }\n        dt += 0.01;\n    }\n    fragColor = vec4(col,1.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy - vec2(.5);\n    uv.x *= iResolution.x/iResolution.y;\n    vec4 outColor;\n    Image(fragColor, uv);\n}","name":"Image","description":"","type":"image"}]}