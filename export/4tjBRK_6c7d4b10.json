{"ver":"0.1","info":{"id":"4tjBRK","date":"1516495844","viewed":103,"name":"18/2018","username":"rimina","description":"This shader is part of my daily shader challenge. Today I needed to get my shadow calculus back up. I had there a small bug with self collision that I hunted down for more than an hour not realizing what the issue was. I felt so stupid :D","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["shadows"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define STEPS 64\n#define FAR 80.0\n#define EPSILON 0.5/iResolution.x\n\n#define FOG_COLOR vec3(0.55, 0.6, 0.75)\n#define SUN_COLOR vec3(0.8, 0.75, 0.7)\n\n\n//Distance functions and helpper functions from Mercury's SDF library\n//http://mercury.sexy/hg_sdf/\n\n// Sign function that doesn't return 0\nfloat sgn(float x) {\n\treturn (x < 0.0)?-1.0:1.0;\n}\n\n// Plane with normal n (n is normalized) at some distance from the origin\nfloat fPlane(vec3 p, vec3 n, float distanceFromOrigin) {\n\treturn dot(p, n) + distanceFromOrigin;\n}\n\nfloat fSphere(vec3 p, float r) {\n\treturn length(p) - r;\n}\n\nfloat dist(vec3 p){\n    float plane = fPlane(p, vec3(0.0, 1.0, 0.0), 1.0);\n    float sphere = fSphere(p-vec3(-3.0, 1.0, 0.0), 1.5);\n    sphere = min(sphere, fSphere(p-vec3(3.0, 1.0, 0.0), 1.5));\n    return min(plane, sphere);\n}\n\n\nvec3 normals(vec3 p){\n    vec3 eps = vec3(EPSILON, 0.0, 0.0);\n    return normalize(vec3(\n        dist(p+eps.xyy)-dist(p-eps.xyy),\n        dist(p+eps.yxy)-dist(p-eps.yxy),\n        dist(p+eps.yyx)-dist(p-eps.yyx)\n    ));\n}\n\nfloat march(vec3 ro, vec3 rd){\n    float t = 0.0;\n    vec3 p = ro;\n    for(int i = 0; i < STEPS; ++i){\n        float d = dist(p);\n        p += rd*d;\n        t += d;\n        \n        if(d < EPSILON || t >= FAR){\n            break;\n        }\n    }\n    return t;\n}\n\nfloat marchShadow(vec3 ro, vec3 rd){\n    float t = 0.0;\n    vec3 p = ro;\n    float s = 1.0;\n    for(int i = 0; i < 32; ++i){\n        float d = dist(p);\n        p += rd*d;\n        t += d;\n        \n        if(d < 0.01){\n            s = 0.0;\n            break;\n        }\n    }\n    return s;\n}\n\n\n//Fog introduced in https://iquilezles.org/articles/fog\nvec3 fog(vec3 col, vec3 p, vec3 ro, vec3 rd, vec3 ld){\n    float dist = length(p-ro);\n\tfloat sunAmount = max( dot( rd, ld ), 0.0 );\n\tfloat fogAmount = 1.0 - exp( -dist*0.06);\n\tvec3  fogColor = mix(FOG_COLOR, SUN_COLOR, pow(sunAmount, 1.0));\n    return mix(col, fogColor, fogAmount);\n}\n\nvec3 objColor(vec3 p, vec3 rd, vec3 ld){\n    vec3 n = normals(p);\n    float lambertian = max(dot(n, ld), 0.0);\n    float angle = max(dot(reflect(-ld, n), rd), 0.0);\n    float specular = pow(angle, 40.0);\n   \n    float shadow = marchShadow(p+n*0.02, ld);\n    \n    vec3 color = vec3(0.8, 0.4, 0.65)+lambertian*FOG_COLOR+specular*SUN_COLOR;\n    \n    return color*shadow;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 q = -1.0+2.0*uv;\n    q.x *= iResolution.x/iResolution.y;\n    \n    vec3 ro = vec3(7.0*sin(iTime*0.5), 0.0, 7.0*cos(iTime*0.5));\n    vec3 rt = vec3(0.0, 0.0, 0.0);\n    \n    vec3 z = normalize(rt-ro);\n    vec3 x = normalize(cross(z, vec3(0.0, 1.0, 0.0)));\n    vec3 y = normalize(cross(x, z));\n    \n    vec3 rd = normalize(mat3(x, y, z)*vec3(q, radians(90.0)));\n    vec3 ld = normalize(vec3(0.5, 2.0, 0.0));\n    \n    vec3 color = FOG_COLOR;\n    float t = march(ro, rd);\n    vec3 p = ro+rd*t;\n    if(t < FAR){\n        color = objColor(p, rd, ld);\n    }\n    color = fog(color, p, ro, rd, ld);\n    \n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}