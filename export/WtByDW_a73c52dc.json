{"ver":"0.1","info":{"id":"WtByDW","date":"1594305687","viewed":279,"name":"Geometric cubes","username":"Oggbog","description":"A recreation of the classic geometric cube pattern","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["pattern","geometric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 tile(vec2 uv, float s){\n    // thanks to book of shaders for the brick tile algorithm :-)\n    // https://thebookofshaders.com/09/\n    uv *= s;\n    uv.x += step(1., mod(uv.y,2.0)) * 0.5;\n\n    return fract(uv);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord/iResolution.y;\n    uv.x += iTime/2.;\n    uv.y += sin(iTime)*.2;\n    \n   \tvec3 col = vec3(0.);\n    \n\tuv = tile(uv,6.)-.5;\n    \n    col = (uv.x>0. && uv.y<0.) || (uv.x<0. && uv.y>.0) ? vec3(.1,.4,.1): vec3(0.2,0.7,0.2);\n    \n    float y = uv.y, y1 = uv.y-.5;\n    float x = uv.x, x1 = uv.x-.5;\n    float b = .03;\n    float t = smoothstep(y1,y1+b,x)*smoothstep(y1,y1+b,-x);\n    t -= smoothstep(y,y+b,-x-.5)+smoothstep(y,y+b,x1);\n    \n    if (t>0.) col = vec3(.3,.9,.3);\n\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}