{"ver":"0.1","info":{"id":"dtjczV","date":"1692048528","viewed":37,"name":"line rot","username":"ewornotloc","description":"test","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int p_length = 8;\n\nconst vec3 offset = vec3(0.25,0.25,0.25);\n\nvec3 points[p_length] = vec3[](\n    vec3(0,0,0)-offset,\n    vec3(.5,0,0)-offset,\n    vec3(0,.5,0)-offset,\n    vec3(0,0,.5)-offset,\n    vec3(.5,.5,0)-offset,\n    vec3(0,.5,.5)-offset,\n    vec3(.5,0,.5)-offset,\n    vec3(.5,.5,.5)-offset\n);\n\nfloat get_dist_2(vec3 a, vec3 b){\n    float d = 0.0;\n    for(int k; k < 2; k++){\n        d += pow(a[k]-b[k],2.0);\n    }\n    d = pow(d,0.5);\n    return d;\n}\n\nbool in_dist_2(vec3 a, vec3 b, float dist){\n    float d = 0.0;\n    for(int k; k < 2; k++){\n        d += pow(a[k]-b[k],2.0);\n    }\n    d = pow(d,0.5);\n    return d <= dist;\n}\n\nbool l_in_dist_2(vec3 a, vec3 b, vec3 p, float dist){\n    float d = abs((b[0]-a[0])*(a[1]-p[1])-(a[0]-p[0])*(b[1]-a[1]));\n    d /= pow(pow((b[0]-a[0]),2.0)+pow((b[1]-a[1]),2.0),0.5);\n    return d <= dist;\n}\n\nfloat sigmoid(float f){\n    return 1.0/(1.0+exp(-f));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n    mat3 r1;\n    \n    float phi = sigmoid(cos(2.0*(iTime/10.0-1.0)))*6.28*.6+.3;\n    \n    r1[0] = vec3(cos(phi),0,-sin(phi));\n    r1[1] = vec3(0,1,0);\n    r1[2] = vec3(sin(phi),0,cos(phi));\n    \n    mat3 r2;\n    \n    float garbo = iTime/10.0*6.28*.6+.3;\n    \n    r2[0] = vec3(1,0,0);\n    r2[1] = vec3(0,cos(garbo),-sin(garbo));\n    r2[2] = vec3(0,sin(garbo),cos(garbo));\n\n    // Normalized pixel coordinates (from 0 to 1)\n    float aspect_ratio = iResolution.xy[0]/iResolution.xy[1];\n    vec2 uv = fragCoord/min(iResolution.xy[0],iResolution.xy[1]);\n    uv -= vec2(0.5*aspect_ratio, 0.5);\n    uv *= 2.0;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx/2.0+vec3(0,2,4));\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n    vec3 l1 = r1*r2*vec3(0.0-.25,0.0-.25,0.0-.25);\n    vec3 l2 = r1*r2*vec3(0.5-.25,0.5-.25,0.0-.25);\n    \n    float maxtf = -20.0;\n    \n    for(int k; k < p_length-1; k++){\n        l1 = r1*r2*points[k];\n        l2 = r1*r2*points[k+1];\n        if (l_in_dist_2(l1,l2,vec3(uv,0),0.01)){\n             if (in_dist_2((l1+l2)/2.0,vec3(uv,0),get_dist_2(l1,l2)/2.0)){\n                 if (min(l1[2],l2[2]) < maxtf){continue;}\n                    maxtf = min(l1[2],l2[2]);\n                 fragColor = vec4(col-sigmoid(min(l1[2],l2[2])*5.0),1);\n             }\n        }\n    }\n    \n    for(int k; k < p_length; k++){\n        vec3 tf = r1*r2*(points[k]);\n        if (in_dist_2(vec3(uv,0),tf,0.1*sigmoid(tf[2]))){\n            if (tf[2] < maxtf){continue;}\n            maxtf = tf[2];\n            fragColor = vec4(col-sigmoid(tf[2]*5.0),1);\n        }\n    }\n}","name":"Image","description":"","type":"image"}]}