{"ver":"0.1","info":{"id":"4cyXRW","date":"1714841584","viewed":110,"name":"Sound: Mid-Side Processing","username":"taylormatson","description":"This shader performs mid-side encoding and decoding to demonstrate the necessary steps of MS Processing.","likes":2,"published":3,"flags":8,"usePreview":0,"tags":["sound","stereo","side","mid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// === icon message: \"sound in\". link: https://www.shadertoy.com/view/MtyXRW\n\nfloat message(vec2 uv) { // to alter in the icon\n    uv-=vec2(1.,10.); if ((uv.x<0.)||(uv.x>=32.)||(uv.y<0.)||(uv.y>=3.)) return -1.; \n    int i=1, bit=int(pow(2.,floor(32.-uv.x)));\n    if (int(uv.y)==2) i=  928473456/bit; // 00110111 01010111 01100001 01110000\n    if (int(uv.y)==1) i=  626348112/bit; // 00100101 01010101 01010000 01010000\n    if (int(uv.y)==0) i= 1735745872/bit; // 01100111 01110101 01100001 01010000\n \treturn float(i-2*(i/2));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    //  if (iResolution.y<200.) to display only in the icon \n    if (iResolution.y<2000.) {float c=message(fragCoord.xy/8.);if(c>=0.){fragColor=vec4(c);return;}}\n\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 mainSound( int samp, float time )\n{\n    vec2 stereo_in;\n    vec2 stereo_out;\n    vec2 midside_out;\n    \n    // Input signal here -------------------------------------\n    float LFO = 100.*sin(TAU*.3*time);\n    \n    vec2 amp = vec2(.5); \n    float freq = 40.;\n    vec2 stereo_osc = vec2(sin(TAU*freq*time));\n    stereo_in = squarePan(stereo_osc, LFO);\n    // =======================================================\n\n    // Encoding\n    float width = 1.5; // Width: [0. - narrow, 2. - wide] - Be more than 0 and less that 2\n    midside_out = midsideEncode(stereo_in, width); // .x is the mid, .y is the sides\n    \n    // Apply distortion to the mid\n    float alpha1 = 1000.; // 0 kills the signal\n    midside_out.x = cubicSoftClip(midside_out.x, alpha1);\n    \n    // Apply distortion to the sides\n    float alpha2 = 100.; // 0 kills the signal\n    midside_out.y = cubicSoftClip(midside_out.y, alpha2);\n    \n    // Decode the signal\n    stereo_out = midsideDecode(midside_out);\n\n    return amp*stereo_out;\n    \n}","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"// Functions by Taylor Matson, education from Eric Tarr\n// Sound: Mid-Side Â© 2024 by Taylor Matson is licensed under CC BY 4.0 \n// You may reuse with attribution please!\n\n#define PI 3.14159265\n#define TAU 6.28318530\n\nvec2 midsideEncode(vec2 stereo_in, float width)\n{\n    vec2 midside_out;\n    \n    // MS Encoding\n    float sides = .5*(stereo_in.x-stereo_in.y); // left minus right\n    float mid = .5*(stereo_in.x+stereo_in.y); // left plus right\n    \n    // Width Processing\n    sides = width * sides;\n    mid = (2. - width) * mid;\n    \n    midside_out = vec2(mid, sides);\n    \n    return midside_out;\n}\n\nvec2 midsideDecode(vec2 midside_in)\n{\n    vec2 stereo_out;\n    \n    // MS Decoding\n    stereo_out.x = midside_in.x + midside_in.y; // mid plus sides\n    stereo_out.y = midside_in.x - midside_in.y; // mid minus sides\n    \n    return stereo_out;\n}\n\n// Check out other distortions at https://www.shadertoy.com/view/MfySRD\nfloat cubicSoftClip( float mono_in, float alpha )\n{\n    // Cubic Soft Clipping\n    // set alpha to amplify distortion\n    float clipped_signal;\n    clipped_signal = (alpha/3.)*pow((mono_in), 3.);\n    return clipped_signal;\n}\n\n// Check out other panning laws at https://www.shadertoy.com/view/4fVSzh\nvec2 squarePan(vec2 stereo_in, float panValue)\n{\n    float pan_max =  100.;\n    float pan_min = -100.; \n    float pan_rng = abs((pan_min)-(pan_max)); // range is 200\n\n    float x = panValue/pan_rng + .5;\n    \n    //Stereo Amp Attenuation/Boost\n    float leftAmp = x;\n    float rightAmp = 1.-x;\n    \n    //Process Signal\n    return vec2( stereo_in.x*sqrt(leftAmp), stereo_in.y*sqrt(rightAmp));\n}","name":"Common","description":"","type":"common"}]}