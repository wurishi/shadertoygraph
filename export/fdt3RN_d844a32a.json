{"ver":"0.1","info":{"id":"fdt3RN","date":"1629279091","viewed":253,"name":"WASHI - Japanese Paper","username":"shiyuugo","description":"和紙 (WASHI) Japanese Paper 2D\nbetter looks in full screen ","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["noise","fbm","paper","japanesepaper"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PAPER_COLOR vec3(1.0, 0.9, 0.93)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float minRes = min(iResolution.x,iResolution.y);\n    vec2 uv = (fragCoord*2.0-0.5)/minRes;\n    int oct = 16;\n    float seed = 0.;\n    float noise = fbm(uv, oct, seed);\n    float l = length(vec2(dFdx(noise), dFdy(noise)));\n    l = mix(pow(l,0.5),1.0, 0.7);\n    \n    vec3 col = PAPER_COLOR * l;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\n//--- pickup functions\n\n//\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n// \nvec4 mod289(vec4 x) {\nreturn x - floor(x * (1.0 / 289.0)) * 289.0;\n}\nvec3 mod289(vec3 x) {\nreturn x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\nreturn x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nfloat mod289(float x) {\nreturn x - floor(x * (1.0 / 289.0)) * 289.0; \n}\n\nfloat permute(float x) {\nreturn mod289(((x*34.0)+1.0)*x);\n}\n\nvec3 permute(vec3 x) {\nreturn mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 permute(vec4 x) {\nreturn mod289(((x*34.0)+1.0)*x);\n}\n\n\nfloat snoise(vec3 v)\n{ \nconst vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\nconst vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\nvec3 i  = floor(v + dot(v, C.yyy) );\nvec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\nvec3 g = step(x0.yzx, x0.xyz);\nvec3 l = 1.0 - g;\nvec3 i1 = min( g.xyz, l.zxy );\nvec3 i2 = max( g.xyz, l.zxy );\n\n//   x0 = x0 - 0.0 + 0.0 * C.xxx;\n//   x1 = x0 - i1  + 1.0 * C.xxx;\n//   x2 = x0 - i2  + 2.0 * C.xxx;\n//   x3 = x0 - 1.0 + 3.0 * C.xxx;\nvec3 x1 = x0 - i1 + C.xxx;\nvec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\nvec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\ni = mod289(i); \nvec4 p = permute( permute( permute( \ni.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n+ i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n+ i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\nfloat n_ = 0.142857142857; // 1.0/7.0\nvec3  ns = n_ * D.wyz - D.xzx;\n\nvec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\nvec4 x_ = floor(j * ns.z);\nvec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\nvec4 x = x_ *ns.x + ns.yyyy;\nvec4 y = y_ *ns.x + ns.yyyy;\nvec4 h = 1.0 - abs(x) - abs(y);\n\nvec4 b0 = vec4( x.xy, y.xy );\nvec4 b1 = vec4( x.zw, y.zw );\n\n//vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n//vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\nvec4 s0 = floor(b0)*2.0 + 1.0;\nvec4 s1 = floor(b1)*2.0 + 1.0;\nvec4 sh = -step(h, vec4(0,0,0,0));\n\nvec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\nvec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\nvec3 p0 = vec3(a0.xy,h.x);\nvec3 p1 = vec3(a0.zw,h.y);\nvec3 p2 = vec3(a1.xy,h.z);\nvec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\nvec4 norm =  1.79284291400159 - 0.85373472095314 * vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3));\np0 *= norm.x;\np1 *= norm.y;\np2 *= norm.z;\np3 *= norm.w;\n\n// Mix final noise value\nvec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\nm = m * m;\nreturn 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \ndot(p2,x2), dot(p3,x3) ) );\n}\n\n\n\n///--- FractalBrownMotion\nfloat fbm(vec2 uv, int oct, float time)\n{    \n    vec2 pos = uv;\n    float amp = 1.0;\n    float val = 0.0;\n\n    for( int i=0; i<oct; i++ )\n    {\n        val += amp * snoise(vec3(pos, time));\n        pos *= 2.0;\n        amp *= 0.5;\n    }\n    return val;\n}\n\n\n","name":"Common","description":"","type":"common"}]}