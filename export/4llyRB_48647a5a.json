{"ver":"0.1","info":{"id":"4llyRB","date":"1505298078","viewed":350,"name":"uffizi disco","username":"vahokif","description":"experimenting with sphere subdivision","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["grid","sphere","discoball"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rotate(vec2 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, -s, s, c);\n\treturn m * v;\n}\n\nconst float PI = 3.14159265359;\nconst int resolution = 12;\n\nfloat f(float chi, float psi) {\n  float chi2 = pow(chi, 2.0);\n  float chi3 = pow(chi, 3.0);\n  float psi2 = pow(psi, 2.0);\n  float omchi2 = 1.0 - chi2;\n  return chi*(1.37484847732 - 0.37484847732*chi2) +\n    chi*psi2*omchi2*(-0.13161671474 +\n                     0.136486206721*chi2 +\n                     (1.0 - psi2) *\n                     (0.141189631152 +\n                      psi2*(-0.281528535557 + 0.106959469314*psi2) +\n                      chi2*(0.0809701286525 +\n                            0.15384112876*psi2 -\n                            0.178251207466*chi2))) +\n    chi3*omchi2*(-0.159596235474 -\n                 (omchi2 * (0.0759196200467 - 0.0217762490699*chi2)));\n}\n\nvec2 remap2(vec2 face) {\n\treturn vec2(f(face.x, face.y), f(face.y, face.x)) / 2.0 + 0.5;    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 rayOrigin = vec3(0.0, 0.0, 3.0);\n    vec3 rayDirection = normalize(vec3(uv, -1.0));\n    \n    rayOrigin.xz = rotate(rayOrigin.xz, iTime * 0.3);\n    rayOrigin.xy = rotate(rayOrigin.xy, sin(iTime * 0.1337) * 0.3);\n    rayDirection.xz = rotate(rayDirection.xz, iTime * 0.3);\n    rayDirection.xy = rotate(rayDirection.xy, sin(iTime * 0.1337) * 0.2);\n    \n    float a = dot(rayDirection, rayDirection);\n    float b = 2.0 * dot(rayDirection, rayOrigin);\n    float c = dot(rayOrigin, rayOrigin) - 1.0;\n    \n    float determ = b * b - 4.0 * a * c;\n    \n    vec3 color;\n    if (determ >= 0.0) {\n        float x = (-b - sqrt(determ)) / (2.0 * a);\n        \n        vec3 hit = rayOrigin + rayDirection * x;\n        \n        float biggestMag = 0.0;\n        vec3 faceUnit;\n        vec3 otherUnit;\n        vec3 thirdUnit;\n        for (int comp = 0; comp < 3; comp++) {\n            if (hit[comp] > biggestMag) {\n                biggestMag = hit[comp];\n                faceUnit = vec3(0.0);\n                faceUnit[comp] = 1.0;\n                otherUnit = vec3(0.0);\n                otherUnit[(comp + 1) % 3] = 1.0;\n                thirdUnit = vec3(0.0);\n                thirdUnit[(comp + 2) % 3] = 1.0;\n            } else if (-hit[comp] > biggestMag) {\n                biggestMag = -hit[comp];\n                faceUnit = vec3(0.0);\n                faceUnit[comp] = -1.0;\n                otherUnit = vec3(0.0);\n                otherUnit[(comp + 1) % 3] = -1.0;\n                thirdUnit = vec3(0.0);\n                thirdUnit[(comp + 2) % 3] = -1.0;\n            }\n        }\n        \n        vec2 remapped = remap2(vec2(dot(hit, otherUnit) / biggestMag, dot(hit, thirdUnit) / biggestMag));\n        \n        vec2 grid = fract(remapped * float(resolution));\n        \n        const float border = 0.1;\n        if (border < grid.x && grid.x < (1.0 - border) && border < grid.y && grid.y < (1.0 - border)) {\n            vec3 ref = reflect(rayDirection, hit);\n                       \n            color = texture(iChannel0, ref).xyz;\n        } else {\n            color = vec3(0.3 * min(grid.x - border, grid.y - border));\n        }\n    } else {\n        color = texture(iChannel0, rayDirection).xyz;\n    }\n    \n\tfragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}