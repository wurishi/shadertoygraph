{"ver":"0.1","info":{"id":"lXt3zB","date":"1716712951","viewed":63,"name":"Stochastic anisotropic filter","username":"GeForceLegend","description":"Simple implementation of [url=https://research.nvidia.com/labs/rtr/publication/pharr2024stochtex/]Stochastic Texture Filtering[/url] on anisotropic filter by directly offseting sample coordinate\nScene from [url]https://www.shadertoy.com/view/4lXfzn[/url]","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["textures","filtering","anisotropic","stochastic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 coord )\n{\n    fragColor = texture(iChannel0, coord / iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 O, vec2 u )\n{\n    ivec2 U = ivec2( u / iResolution.xy * 8. ) % 2;\n    O = vec4( U.x == U.y );\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Rand from https://www.shadertoy.com/view/MfyXzV\nvec2 rand(vec2 co){\n    return fract(sin(co.xy * vec2(12.9898,78.233)) * 43758.5453);\n}\n\nvec3 catmullRomFilter(sampler2D colortex, vec2 coord, vec2 resolution) {\n    vec2 prevST = coord * resolution;\n    vec2 prevUV = floor(prevST - vec2(0.5)) + vec2(0.5);\n\n    vec2 t = prevST - prevUV;\n    vec2 t2 = t * t;\n    vec2 t3 = t2 * t;\n    const float s = 0.5;\n    vec2 w0 = -s * t3 + 2.0 * s * t2 - s * t;\n    vec2 w1 = (2.0 - s) * t3 + (s - 3.0) * t2 + 1.0;\n    vec2 w2 = (s - 2.0) * t3 + (3.0 - 2.0 * s) * t2 + s * t;\n    vec2 w3 = s * t3 - s * t2;\n    vec2 s0 = w1 + w2;\n    vec2 f0 = w2 / s0;\n    vec2 m0 = (prevUV + f0) / resolution;\n    vec2 tc0 = (prevUV - 1.0) / resolution;\n    vec2 tc3 = (prevUV + 2.0) / resolution;\n\n    vec4 prevColor =\n        vec4(textureLod(colortex, vec2(m0.x, tc0.y), 0.0).rgb, 1.0) * s0.x * w0.y +\n        vec4(textureLod(colortex, vec2(tc0.x, m0.y), 0.0).rgb, 1.0) * w0.x * s0.y +\n        vec4(textureLod(colortex, m0, 0.0).rgb               , 1.0) * s0.x * s0.y +\n        vec4(textureLod(colortex, vec2(tc3.x, m0.y), 0.0).rgb, 1.0) * w3.x * s0.y +\n        vec4(textureLod(colortex, vec2(m0.x, tc3.y), 0.0).rgb, 1.0) * s0.x * w3.y;\n    return prevColor.rgb / prevColor.w;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 coord )\n{\n    vec2 R = iResolution.xy;\n\n    // Ray\n    vec3 r = vec3( 2.* coord / R - 1. , 1 );\n    // Intersection\n    vec2 p = - r.xz / r.y + .1 * iTime;\n    p *= .25;\n\n    fragColor = vec4(.5, .7, .9, 1);\n    if (r.y < -1.1 / R.y) {\n        vec2 dX = dFdx(p);\n        vec2 dY = dFdy(p);\n\n        vec2 noise = rand(coord + iTime * 114.514) - 0.5;\n        vec4 currColor = texture(iChannel0, p + noise.x * dX + noise.y * dY);\n\n        vec2 prevP = p * 4. + .1 * iTimeDelta - .1 * iTime;\n        vec2 prevR;\n        prevR.y = -1.0 / prevP.y;\n        prevR.x = -prevP.x * prevR.y;\n        vec4 prevColor = vec4(catmullRomFilter(iChannel1, prevR * 0.5 + 0.5, R), 1.0);\n\n        fragColor = mix(prevColor, currColor, 0.05);\n    }\n}","name":"Buffer B","description":"","type":"buffer"}]}