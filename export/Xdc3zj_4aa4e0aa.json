{"ver":"0.1","info":{"id":"Xdc3zj","date":"1538609396","viewed":1784,"name":"Anthropo[s]cene is dead","username":"iapafoto","description":"Just try to create a powerpoint shadertoy\ninspired by #DataGueule (https://www.youtube.com/watch?v=OQBcrKqyHJI)\n","likes":28,"published":1,"flags":32,"usePreview":0,"tags":["2d","text","animation","graph","slideshow","easing","xr"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":2,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by sebastien durand - 10/2018\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// ---------------------------------------------------------\n//\n// Based / Adapted / Inspired from:\n//\n// [asalga] Metal Ball - https://www.shadertoy.com/view/MssGRl\n// [Dave_Hoskins] 2Tweet Water Caustic - https://www.shadertoy.com/view/MdKXDm\n// [Davidar] Global Wind Circulation - https://www.shadertoy.com/view/MdGBWG\n// [FabriceNeyret2] message: click to see #2 - https://www.shadertoy.com/view/llyXRW\n// [iq] Palettes - https://www.shadertoy.com/view/ll2GD3\n// [iq] Plotter - https://www.shadertoy.com/view/lslBzS\n// [Maarten] 2d signed distance functions - https://www.shadertoy.com/view/4dfXDn\n// [mattz] SDF texture filtering, take 2 - https://www.shadertoy.com/view/4sVyWh\n// [TekF] Humanoid Silhouettes - https://www.shadertoy.com/view/4scBWN\n// [Virgil] Bouncing cam - https://www.shadertoy.com/view/llK3Dy)\n// --------------------------------------------------------\n\n\n#define WITH_XR\n\n\nconst vec2 shadowDelta = vec2(-.03,.03);\nfloat gTime;\n\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\n// --------------------------------------------------------\n// [iq] https://www.shadertoy.com/view/ll2GD3\n// --------------------------------------------------------\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\nvec3 palette(float k) {\n    return pal( k, vec3(.5),vec3(.5),vec3(1),vec3(0.,.33,.67) );\n}\n\n// --------------------------------------------------------\n// [Hazel Quantock] https://www.shadertoy.com/view/4scBWN\n// --------------------------------------------------------\n\nfloat RoundMax(float a, float b, float r) {\n    a += r; b += r;\n    float f = ( a > 0. && b > 0. ) ? sqrt(a*a+b*b) : max(a,b);\n    return f - r;\n}\n\nfloat RoundMin(float a, float b, float r) {\n    return -RoundMax(-a,-b,r);\n}\n\n// --------------------------------------------------------\n// [TekF] Humanoid Silhouettes - https://www.shadertoy.com/view/4scBWN\n// --------------------------------------------------------\nfloat sdHumanoid(in vec2 uv, in float phase ) {\n    #define Rand(idx) fract(phase*pow(1.618,float(idx)))\n    float n3 = sin((uv.y-uv.x*.7)*11.+phase)*.014; // \"pose\"\n    float n0 = sin((uv.y+uv.x*1.1)*23.+phase*2.)*.007;\n    float n1 = sin((uv.y-uv.x*.8)*37.+phase*4.)*.004;\n    float n2 = sin((uv.y+uv.x*.9)*71.+phase*8.)*.002;\n    float head = length((uv-vec2(0,1.65))/vec2(1,1.2))-.15/1.2;\n    float neck = length(uv-vec2(0,1.5))-.05;\n    float torso = abs(uv.x)-.25;\n    torso = RoundMax( torso, uv.y-1.5, .2 );\n    torso = RoundMax( torso, -(uv.y-.5-.4*Rand(3)), .0 );\n    float f = RoundMin(head,neck,.04);\n    f = RoundMin(f,torso,.02);\n    float leg =\n        Rand(1) < .3 ?\n        abs(uv.x)-.1-.1*uv.y : // legs together\n    \tabs(abs(uv.x+(uv.y-.8)*.1*cos(phase*3.))-.15+.1*uv.y)-.05-.04*Rand(4)-.07*uv.y; // legs apart\n    leg = max( leg, uv.y-1. );\n    f = RoundMin(f,leg,.2*Rand(2));\n    f += (-n0+n1+n2+n3)*(.1+.9*uv.y/1.6);\n    return max( f, -uv.y );\n}\n\n\nfloat sdHumans(in vec2 p, in int nb) {\n    float d = 9999.;\n    for (int i=0; i<nb; i++) {\n        d = min(d, sdHumanoid(p, float(i)/float(nb)));\n        p.x-=.6; //+.1*cos(float(i+1)*1245.);\n    }\n    return d;\n}\n\n// ------------------------------------------------------------\n\n\nfloat sdFish(vec2 p) {\n    float dsub = min(length(p-vec2(.8,.0)) - .45, length(p-vec2(-.14,.05)) - .11);  \n    p.y = abs(p.y);\n    float d = length(p-vec2(.0,-.15)) - .3;\n    d = min(d, length(p-vec2(.56,-.15)) - .3);\n    d = max(d, -dsub);\n    return d-.055;\n}\n\nfloat sdMedusa(vec2 p) {\n    p /= .5;\n    float d = max(length(p) - .5, -p.y);\n    p+=.05*sin(15.*p.y+5.*gTime);\n    float d2 = smoothstep(0.,.5,abs(p.x));\n    p+=.2;\n    d2 = min(d2, smoothstep(0.,.5,abs(p.x)));\n    p-=.4;\n    d2 = min(d2, smoothstep(0.,.5,abs(p.x)));\n    d2 = max(-p.y-.6,max(p.y,d2));\n    return min(d,d2)*.5;\n}\n\n//  Maarten : https://www.shadertoy.com/view/4dfXDn\nfloat triangleDist(vec2 p, float width, float height) {\n\tvec2 n = normalize(vec2(height, width / 2.0));\n\treturn max(\tabs(p.yx).x*n.x + p.x*n.y - (height*n.y), -p.x);\n}\n\n\n//  Maarten : https://www.shadertoy.com/view/4dfXDn\nfloat boxDist(vec2 p, vec2 size) {\n\t//size -= vec2(radius);\n\tvec2 d = abs(p) - size;\n  \treturn min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\n}\n\n\nfloat sdFactory(vec2 p) { \t\n    p += vec2(.2);\n    float d = triangleDist(p, .2, .2);\n    d = min(d,triangleDist(p-vec2(.2,0), .2, .2));\n    d = min(d,triangleDist(p.yx-vec2(-.2,.45), .15, 1.));\n    d = min(d, boxDist(p - vec2(.2,-.1), vec2(.2,.1))); \n    d = max(d, p.y-.4); \n    d = max(d, -boxDist(p-vec2(.1,-.075), vec2(.05,.05))); \n    d = max(d, -boxDist(p-vec2(.3,-.075), vec2(.05,.05))); \n    return d;\n}\n\n// ------------------------------------------------------------\n\nfloat sdTriPrism( vec2 p, float k) {\n    vec2 q = abs(p);\n    return max(q.x*0.866025+p.y*0.5,-p.y)-k;\n}\n\nfloat udBox( vec2 p, vec2 b ) {\n  return length(max(abs(p)-b,0.0));\n}\n \nfloat sdArrow(vec2 p) {\n    return min(sdTriPrism(p,.3), \n               udBox( p + vec2(0,0.9), vec2(0.2, 0.6) ) );\n}\n\n// ------------------------------------------------------------\n\nfloat lineSegDist( vec2 uv, vec2 ba, vec2 a, float r ) {\n    vec2 pa = uv - a - ba*r; ba = -ba*r;\n    return length( pa - ba*clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 ) );\n}\n\nfloat snowFlake(vec2 p) {\n    p*=4.;\n    p.y = -abs(p.y);\n\n    float d2 = lineSegDist(p, vec2(-1., 0.), vec2(-1.2,-.5), 1.2); \n    d2 = min(d2, lineSegDist(p, vec2(-1., 0.), vec2(-1.6,-.15), .8)); \n\n    p.x = abs(p.x);\n    \n\n    float a = .6;\n    float d = lineSegDist(p, vec2(1., 0.), vec2(.0,0.), 1.);\n    d = min(d, lineSegDist(p, vec2(.5, -.866), vec2(0.,0.), 1.));\n    d = min(d, lineSegDist(p, vec2(.5, -.866), vec2(a,0.), .25));\n    d = min(d, lineSegDist(p, vec2(-.5, -.866), vec2(a*.5,-.866*a), .25));\n    d = min(d, lineSegDist(p, vec2(1., 0.), vec2(a*.5,-.866*a), .25));\n\t\n    return min(d, d2)-.08;\n}\n\n\nfloat hash( const in vec3 p ) {\n\tfloat h = dot(p,vec3(127.1,311.7,758.5453123));\t\n    return fract(sin(h)*43758.5453123);\n}\n\nfloat hash( const in vec2 p ) {\n\tfloat h = dot(p,vec2(127.1,311.7));\t\n    return fract(sin(h)*43758.5453123);\n}\n\n\n// rotation \nvec2 rotate(vec2 uv, float a) {\n    float ca = cos(a), sa = sin(a);\n    return uv*mat2(ca,sa,-sa,ca);\n}\n\n// rotation arround a center point\nvec2 rotate(vec2 uv, float a, vec2 c) {\n    float ca = cos(a), sa = sin(a);\n    return (uv-c)*mat2(ca,sa,-sa,ca)+c;\n}\n\nvec3 shadow(float dShape, vec3 c, vec3 cfill) {\n    return mix(c, cfill, .75*(1.-smoothstep(.0,.05, max(0.,dShape))));\n}\n\n// fill shape\nvec3 fill(float dShape, vec3 c, vec3 cfill) {\n    return mix(c, cfill, 1.-smoothstep(.0,.01, dShape));\n}\n\nvec3 fill(float dShape, vec3 c, vec4 cfill) {\n    return mix(c, cfill.rgb, cfill.a*(1.-smoothstep(.0,.01, dShape)));\n}\n\n// draw shape\nvec3 draw(float dShape, vec3 c, vec3 cdraw, float ep) {\n    return mix(c, cdraw, 1.-smoothstep(0., .01, 2.5*abs(dShape-ep/2.)-ep));\n}\n\n\n// Bouncing cam by Virgil (https://www.shadertoy.com/view/llK3Dy)\nfloat Bounce(float t) {\n    return fract(t-1.)<1.? fract(-t)*0.1*sin(45.*t):0.;\n}\n\n\nfloat anim(float t, float t0, float dt) {\n\treturn clamp((t-t0)/dt, 0., 1.);\n}\n\n//----------------------------------------------------------\n// FONT\n//----------------------------------------------------------\n// Adapted from\n//  [mattz] https://www.shadertoy.com/view/4sVyWh\n//----------------------------------------------------------\nfloat sample_dist_gaussian(vec2 uv) {\n    const int nstep = 3;\n    const float w[3] = float[3](1., 2., 1.);\n    float d, wij, dsum = 0., wsum = 0.;    \n    for (int i=0; i<nstep; ++i) {\n        for (int j=0; j<nstep; ++j) {\n            vec2 delta = vec2(float(i-1), float(j-1))/1024.;\n            d = textureLod(iChannel0, uv-delta, 0.).w - 127./255.;\n            wij = w[i]*w[j];\n            dsum += wij * d;\n            wsum += wij;\n        }\n    }\n    return dsum / wsum;\n}\n\nfloat sdFont(vec2 p, int c) {\n    vec2 uv = (p + vec2(float(c%16), float(15-c/16)) + .5)/16.;\n    return max(max(abs(p.x) - .25, max(p.y - .35, -.38 - p.y)), sample_dist_gaussian(uv));\n}\n\n\n//----------------------------------------------------------\n// Adapted from\n//  [FabriceNeyret2] https://www.shadertoy.com/view/llyXRW\n//----------------------------------------------------------\nfloat sdMessage(vec2 p, int[52] text, int start, float scale, float bold, float italic) { // --- to alter in the icon with the alter message\n    p /= scale;\n    p.x += p.y*italic;\n    float d = 9999., bounce;\n    vec2 pp;\n    //for (int i=start; i<text.length(); i++) {  // Compile time : 14s\n    for (int i=min(iFrame,0)+start; i<text.length(); i++) { // COmpile time 2s [Thanks iq :)]   \n        if (text[i] == 0) break;\n        // anim ---\n        bounce = ElasticEaseOut(anim(float(i)-5.*gTime, -3., 2.));\n        pp = p;\n       // pp.y += bounce;\n        pp = rotate(pp,bounce);\n        // ---\n        d = min(d, sdFont(pp, text[i]));\n        p.x-=.5;\n\n    }\n    return d*scale - bold;\n}\n\n//----------------------------------------------------------\n// [Dave_Hoskins] https://www.shadertoy.com/view/MdKXDm\n//----------------------------------------------------------\n#define F length(.5-fract(k.xyw*=mat3(-2,-1,2, 3,-2,1, 1,2,2)*\nvec4 water(vec2 p) {\n    vec4 k;\n    k.xy = p*(sin(k=iDate*.5).w+2.)/2e2;\n    return pow(min(min(F.5)),F.4))),F.3))), 7.)*25.+vec4(0,.35,.5,1);\n}\n\nvec4 mapSphere(in vec2 uv, float r, in vec2 c) {\n    float d = distance(uv,c);\n\tif (d < r) {\n\t\tvec3 n = mix(vec3(0,0,1), normalize(vec3(uv-c, 0)), d/r);\n\t\tfloat lat = acos(-n.y), \t\t\n\t\t\t  u = -acos(n.x/sqrt(1.0-n.y*n.y)) / (2. * PI) + gTime / 2.0,\n              v = lat / PI; // rotation\n        vec3 dirLight = normalize(vec3(1,0,1)),\n\t\t\t col = vec3(1.);//vec3(.5)+.5*vec3(dot(n, dirLight));\n        float k = smoothstep(r*.9,r,d);\n\t\treturn vec4(mix(col,vec3(0),k), 1.-k) *  texture(iChannel1, fract(vec2(u,v))*vec2(160,72)/iChannelResolution[1].xy);\n\t}\n  \treturn vec4(0);\n}\n\n                  \nint[] txt = int[] (_T,_e,_m,_p,_e,_r,_a,_t,_u,_r,_e,0,_J,_e,_l,_l,_y,_F,_i,_s,_h,0,_A,_c,_i,_d,0,_P,_o,_p,_u,_l,_a,_t,_i,_o,_n,0,_S,_c,_e,_n,_e,2,_i,_s,2,_D,_e,_a,_d,0);\n\n\nfloat cubicPulse( float c, float w, float x ){\n    x = abs(x - c);\n    if( x>w ) return 0.0f;\n    x /= w;\n    return 1.0f - x*x*(3.0f-2.0f*x);\n}\n\nfloat CubicPulse(vec2 p){\n\treturn p.y - cubicPulse(0.5, 0.2, p.x);\n}\n\nfloat impulse( float k, float x ){\n    float h = k*x;\n    return max(0.,h*exp(1.0f-h));\n}\n\nfloat Impulse(vec2 p){\t\n\treturn p.y - 1.5*impulse(1.-p.x, 5.0);\n}\n\nvec3 animFactory(float t0, vec2 uv, vec3 c) {\n    float ss = smoothstep(7.,12.,t0);\n    vec4 col = mapSphere(uv+vec2(-1,0), .3, vec2(0));\n    c = mix(c, mix(col.rgb,vec3(col.r+col.g+col.b)*.3,ss), col.a);\n    float k = smoothstep(.0,.02,abs(length(uv+vec2(-1,0))-.29));\n    c = mix(vec3(0), c, k);\n    uv.x -= 1.;\n    float scale = 1.+.2*(t0-4.);\n    uv *= scale;\n    uv.y -= ExpoEaseOut(fract(t0));\n    uv = mod(uv+.5,1.)-.5; \n\n    vec3 cu = shadow(sdFactory(uv+shadowDelta),c,vec3(0));\n    cu = fill(sdFactory(uv),cu,mix(vec3(1,0,0),vec3(.4),ss));\n    cu = draw(sdFactory(uv),cu,vec3(0),.03);\n    return mix(c, cu, smoothstep(5.,12.,t0));\n}\n\nvec3 animPopulation(float t0, vec2 uv, vec3 c) {\n    uv.y += .5;\n    uv.x +=.55;\n    vec2 uv0 =uv;\n    uv = rotate(uv, -1.57*BounceEaseOut(anim(t0, 43.5-28., 1.)));\n\n    float nb = 50.*(impulse(1.-.08*(t0-1.), 5.0));\n\n    uv0.x += -3.+t0*.1; \n\n    PLOT(Impulse, vec3(1,0,0), c, uv0-vec2(.5,0));\n    c = fill(sdMessage(uv0*3.+vec2(+4.,.22), txt, 27, .5, 0., .0)/3., c, vec4(1,0,0,1));\n\n    float dShape = sdHumans(uv*10., 1+int(nb))/10.;\n    float dShapeSh = sdHumans(uv*10.+shadowDelta, 1+int(nb))/10.;         \n\n    c = shadow(dShapeSh, c, vec3(0,0.,0.));\n    c = fill(dShape, c, vec3(1));\n\treturn c;\n}\n\nvec3 animOcean(float t0, vec2 uv, vec3 c, vec2 fc) {\n\n    vec2 uv0 = uv;\n    uv.y += .1*cos(t0-9.);\n    uv.x += .3*(t0)-2.;\n    vec2 uv2 = mod(uv+.2,.4)-.2;\n\n    c = mix(c, mix(water(fc).rgb, vec3(0,1,1),.1*t0), .1);\n\n    vec3 col;\n    float hsh = hash(floor((uv+.2)/.4));\n\tfloat dShape=999., dShapeSh=999.;\n    if (hsh>.1*(t0-2.)) {\n        dShape = sdFish(3.*uv2)/3.;\n        dShapeSh = sdFish(3.*(uv2+shadowDelta))/3.;\n        col = vec3(1,0,0);\n\n    } else if (hsh>.2+.05*(t0-3.)) {\n        dShape = sdMedusa(3.*uv2)/3.;\n        dShapeSh = sdMedusa(3.*(uv2+shadowDelta))/3.;\n        col = vec3(0,1.,.7);\n    }\n\n    c = shadow(dShapeSh, c, vec3(0,0.,0.));\n    c = fill(dShape, c, col);\n\n    uv.x -= .6;\n    dShape = mix(sdMessage(uv, txt, 17, .5, .0, .0), sdMessage(uv, txt, 12, .5, .0, .0), smoothstep(3.5,8.5,t0));\n    c = fill(dShape, c, vec4(0,.7,.7,.2));\n\n\n    float k = 1.+2.8*BounceEaseOut(anim(t0, 7.,2.));\n    uv0+=vec2(k*.17,-(k-1.)*.2);\n    uv0 /= k;\n    uv0 = rotate(uv0, -1.57*BounceEaseOut(anim(t0, 7., 4.)));\n    c = fill(sdMessage(uv0, txt, 22, .5, 0., .0)*k, c, mix(vec4(0), vec4(0,1,0,.2), smoothstep(2.,10.,t0)));\n\n    return c;\n}\n\n\nvec3 animTemperature(float t0, vec2 uv, vec3 c) {\n    float dShape = 999.;\n    float dShapeSh = 999.;\n    vec2 uv0 = uv;\n    uv0.x -= .5;\n    uv0.y += 2.5-smoothstep(0.,2.,t0) + 4.*QuadEaseIn(anim(t0, 7.,1.));;\n    float move = BounceEaseOut(anim(t0, 4.,4.));\n    uv0.y -= 2.*move;\n    uv0 = rotate(uv0, move);\n    dShape = 999.;\n    dShapeSh = 999.;\n    for (int i=0;i<10; i++) {\n        vec2 uv2 = uv0 + (.2*hash21(float(i))-1.);\n        uv2.y += .1*cos(10.*t0+float(i));\n        dShape = sdArrow(3.*uv2)/3.;\n        dShapeSh = sdArrow(3.*(uv2+shadowDelta))/3.;\n        c = shadow(dShapeSh, c, vec3(0));\n        c = fill(dShape, c, palette(.1*float(i)));\n        c = draw(dShape, c, vec3(0,0.,0.), .04);\n        uv0.x += .15;\n    }\n\n    uv.y += .2;\n    float bounce = BounceEaseOut(anim(t0, 1.,2.));\n    uv.y -= bounce;\n\n    uv = rotate(uv, -1.57*BounceEaseOut(anim(t0, 5., 1.)));\n    uv.x -= 8.*QuadEaseIn(anim(t0, 6., 1.));  \n\n    dShape = sdMessage(uv+vec2(.5,0), txt, 0, .5, -.005+.01*anim(t0, 4.,1.), -.2);\n    dShapeSh = sdMessage(uv+vec2(.5,0)+shadowDelta, txt, 0, .5, .01, -.2);\n\n    c = shadow(dShapeSh, c, vec3(0,0.,0.));\n    c = fill(dShape, c, vec3(1.,1.,1.));\n    c = draw(dShape, c, vec3(0,0.,0.), .04);\n\treturn c;\n}\n\nvec4 XR(vec2 U) {\n\tvec2 p = iResolution.xy;\n    return vec4(2,7,3,1) * \n        min(.1,abs(max(length(p=abs(U+U-p)/p.y)-.8,\n        min(.5-p, .6*p-.7*p.x).y))/.1 -.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n    \n\n\tvec2 uv = 2.*(fragCoord.xy / iResolution.y) -1.;\n\tvec2 q = fragCoord.xy / iResolution.xy;\n   \n    // Background\n    vec3 colBack =  .2*vec3(hash(vec3(q,1.)))*vec3(.32,.48,.54);\n    colBack = pow(colBack, vec3(0.41545) );   \n    colBack *= 10.*pow(q.x*q.y*(1.0-q.x)*(1.0-q.y), .838);\n\n    vec3 c = colBack;\n    float a1 = 13., a2 = a1 + 18., a3 = a2+9., a4 = a3 + 18., a5 = a4 + 16.;\n    \n#ifdef WITH_XR       \n    gTime = mod(iTime,  a5 + 20.);\n#else\n    gTime = mod(iTime,  a5 + 10.);\n#endif\n    \n    if (gTime < a1){\n        float t0 = gTime-2.;\n\t\tc = animPopulation(t0, uv, c);\n\n    } else if (gTime < a2) {\n        float t0 = gTime-a1;\n        c = animFactory(t0, uv, c);\n        \n    } else if (gTime < a3){\n     \tfloat t0 = gTime - a2;\n        c = animTemperature(t0, uv, c);\n        \n    } else if (gTime < a4) { \n        float t0 = gTime-a3;\n        c = animOcean(t0, uv, c, fragCoord);\n \n    } else if (gTime < a5) {\n        float t0 = gTime-a4;\n        c = animPopulation(t0+8., uv, c);\n        \n     \n    } else if (gTime < a5 + 10.) {\n        uv *=1.1;\n        \n\t\tfloat tt = mod(gTime,2.)/1.5;\n    \tfloat ss = pow(tt,.2)*0.5 + 0.5;\n    \tfloat gPulse = (.25+ss*0.5*sin(tt*6.2831*3.0)*exp(-tt*4.0));\n        \n   \t\tfloat d = sdMessage(uv+vec2(.62+.025*gPulse,.00*gPulse), txt, 38, .5+.01*gPulse, .01, -.2);\n        // Heart pulse  \n      \n    \tc = draw(d, c, vec3(1,0,0), .01 + gPulse*.02);\n     \n    } \n    \n\n    if (gTime >= a5 + 10.) {\n        fragColor = XR(fragCoord);\n    } else {\n    \tc = pow(c,vec3(1.1,1.1,.9));\n    \tfragColor = vec4(c,1.);\n    }\n\n\n    \n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\n// https://github.com/jesusgollonet/ofpennereasing/tree/master/PennerEasing\n#define PI 3.141592653589\n#define _2PI 6.28318530718\n#define PI_2 1.57079632679\n\n#define _A 65\n#define _B 66\n#define _C 67\n#define _D 68\n#define _E 68\n#define _F 70\n#define _G 71\n#define _H 72\n#define _I 73\n#define _J 74\n#define _K 75\n#define _L 76\n#define _M 77\n#define _N 78\n#define _O 79\n#define _P 80\n#define _Q 81\n#define _R 82\n#define _S 83\n#define _T 84\n#define _U 85\n#define _V 86\n#define _W 87\n#define _X 88\n#define _Y 89\n#define _Z 90\n#define _a 97\n#define _b 98\n#define _c 99\n#define _d 100\n#define _e 101\n#define _f 102\n#define _g 103\n#define _h 104\n#define _i 105\n#define _j 106\n#define _k 107\n#define _l 108\n#define _m 109\n#define _n 110\n#define _o 111\n#define _p 112\n#define _q 113\n#define _r 114\n#define _s 115\n#define _t 116\n#define _u 117\n#define _v 118\n#define _w 119\n#define _x 120\n#define _y 121\n#define _z 122\n\nfloat BackEaseIn(float t) {\n\tfloat s = 1.70158;\n\tfloat postFix = t;\n\treturn (postFix)*t*((s+1.)*t - s);\n}\nfloat BackEaseOut(float t) {\t\n\tfloat s = 1.70158;\n\treturn ((t=t-1.)*t*((s+1.)*t + s) + 1.);\n}\n\nfloat BackEaseInOut(float t) {\n\tfloat s = 1.70158;\n\tif (t < .5) \n\t\treturn .5*t*t*(((s*=(1.525))+1.)*t - s);\n\tt -= 2.;\n\treturn .5*t*t*(((s*=(1.525))+1.)*t + s) + 1.;\n}\n\nfloat ElasticEaseIn (float t) {\n\tt-=1.;\n\treturn -pow(2., 10.*t) * sin((t-.3/4.)*_2PI/.3 );\n}\n\nfloat ElasticEaseOut(float t) {\n    return pow(2.,-10.*t) * sin((t-.3/4.)*_2PI/.3) + 1.;\n}\n\nfloat ElasticEaseInOut(float t) {\n\treturn t < .5 ? .5*ElasticEaseIn(2.*t) : .5*ElasticEaseOut(2.*t-1.)+.5;\n}\n\nfloat CircEaseIn (float t) {\n\treturn 1. - sqrt(1. - t*t);\n}\nfloat CircEaseOut(float t) {\n\tt--;\n\treturn sqrt(1. - t*t);\n}\n\nfloat CircEaseInOut(float t) {\n\treturn t < .5 ? -.5 * (sqrt(1. - t*t) - 1.) : .5 * (sqrt(1. - t*(t-=2.)) + 1.);\n}\n\n\nfloat QuadEaseIn (float t) {\n\treturn t*t;\n}\nfloat QuadEaseOut(float t) {\n\treturn - t*(t-2.);\n}\n\nfloat QuadEaseInOut(float t) {\n\treturn .5* (t<.5 ? t*t : ((t-2.)*(--t) - 1.));\n}\n\nfloat CubicEaseIn (float t) {\n\treturn t*t*t;\n}\nfloat CubicEaseOut(float t) {\n\treturn (t=t-1.)*t*t + 1.;\n}\n\nfloat CubicEaseInOut(float t) {\n\treturn t<.5 ? .5*t*t*t: .5*((t-=2.)*t*t + 2.);\t\n}\n\n\nfloat QuintEaseIn (float t) {\n\treturn t*t*t*t*t;\n}\n\nfloat QuintEaseOut(float t) {\n\treturn (t=t-1.)*t*t*t*t + 1.;\n}\n\nfloat QuintEaseInOut(float t) {\n\treturn t<.5 ? .5*t*t*t*t*t : .5*((t-=2.)*t*t*t*t + 2.);\n}\n\nfloat BounceEaseOut(float t) {\n\tif (t < (1./2.75)) {\n\t\treturn 7.5625*t*t;\n\t} else if (t < 2./2.75) {\n\t\tt-= 1.5/2.75;\n\t\treturn 7.5625*t*t + .75;\n\t} else if (t < 2.5/2.75) {\n\t\tt-= 2.25/2.75;\n\t\treturn 7.5625f*t*t + .9375;\n\t} else {\n\t\tt-= 2.625/2.75;\n\t\treturn 7.5625*t*t + .984375;\n\t}\n}\n\nfloat BounceEaseIn (float t) {\n\treturn 1. - BounceEaseOut(1.-t);\n}\n\nfloat BounceEaseInOut(float t) {\n\treturn t < .5 ? .5*BounceEaseIn(t*2.) : .5*BounceEaseOut(t*2.-1.) + .5;\n}\n\nfloat ExpoEaseIn (float t) {\n\treturn pow(2., 10. * (t - 1.));\n}\nfloat ExpoEaseOut(float t) {\n\treturn -pow(2., -10. * t) + 1.;\t\n}\n\nfloat ExpoEaseInOut(float t) {\n\treturn t < .5 ? .5*ExpoEaseIn(t*2.) : .5*ExpoEaseOut(t*2.-1.) + .5;\n}\n\nfloat SineEaseIn(float t) {\n\treturn 1. - cos(t * PI_2);\n}\n\nfloat SineEaseOut(float t) {\t\n\treturn sin(t * PI_2);\t\n}\n\nfloat SineEaseInOut(float t) {\n\treturn .5 - .5 * cos(PI*t);\n}\n\n\n// [IQ] https://www.shadertoy.com/view/lslBzS Implicit / f(x) plotter thing.\n\n//XY range of the display.\n#define DISP_SCALE 3.0 \n\n//Line thickness (in pixels).\n#define LINE_SIZE 2.0\n\nconst vec2 GRAD_OFFS = vec2(0.001, 0);\n\n#define GRAD(f, p) (vec2(f(p) - f(p + GRAD_OFFS.xy), f(p) - f(p + GRAD_OFFS.yx)) / GRAD_OFFS.xx)\n\n//PLOT(Function, Color, Destination, Screen Position)\n#define PLOT(f, c, d, p) d = mix(c, d, smoothstep(0.0, (LINE_SIZE / iResolution.y * DISP_SCALE), abs(f(p) / length(GRAD(f,p)))))\n\n\n\n","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Sphere texture mapping : \n// https://www.shadertoy.com/view/MssGRl\n// [Davidar] https://www.shadertoy.com/view/MdGBWG\n\n// EARTH\n// 1-bit land/ocean map, 2.5 degree resolution\n// auto-generated by https://github.com/rkibria/img2shadertoy\nconst ivec2 size = ivec2(160, 72);\nconst int[] rle = int[] ( 0x1ff91, 0x03ff9100, 0xf8000000, 0x8ff8f, 0xfffc0000, 0xf80fffff, 0x10aff89, 0xfe000000, 0x39ffffff, 0xff88fc3c, 0x0000030a, 0xffffc000, 0xc0003fff, 0x0100ff88, 0x80050084, 0xffbf, 0xff87fe, 0x7008607, 0x20000078, 0xf7ffffff, 0xf00ff83, 0x20000086, 0x20060083, 0xffff8fff, 0x873fff, 0x844000, 0x7004, 0x89f437, 0xcd0100, 0x921800, 0x920c00, 0x921c00, 0x8a1c00, 0x00860800, 0x008a3800, 0x00861000, 0x00897800, 0x00870400, 0x0089f800, 0x86400201, 0x01f80100, 0x0f000088, 0xf80b0087, 0x80000003, 0x00000007, 0x871fc3c0, 0x07f80b00, 0x0f800000, 0xc0000000, 0x871fff, 0xff80b, 0x1f8000, 0xffc00000, 0xb00871f, 0x1ff0, 0x1fc0, 0x1fffe000, 0xf00b0087, 0xc000003f, 0x0000063f, 0x870fffe0, 0xfff00b00, 0x3fe00000, 0xc0000004, 0x00870fff, 0x00fff00b, 0x0c3fe000, 0xfe000000, 0x0b008703, 0x0000fffc, 0x000cffe0, 0x027c0000, 0xfe0a0087, 0xe00000ff, 0x000008ff, 0x00883000, 0x01fffe05, 0x8dffe000, 0xffff0500, 0xffe00003, 0xff0b008d, 0xe00003ff, 0xff, 0x87060004, 0xffff0b00, 0xfff00000, 0x02000000, 0x008703c1, 0x0007ff0a, 0x01fff000, 0x31710000, 0xff090088, 0xf000000f, 0x800003ff, 0x09008971, 0x000007fe, 0x0007fff0, 0x00896140, 0x0001fe09, 0x0ffffdf0, 0x88410100, 0xfec00b00, 0xfff80000, 0x80000fff, 0x00870600, 0x0008200a, 0xfffffc00, 0x200c009, 0x700b0088, 0xfe000000, 0xc007ffff, 0x87010f80, 0x001e0b00, 0xfffc0000, 0x80e01eff, 0x00860107, 0x081bc00b, 0xfffc0000, 0xc3e07e7f, 0x0b008703, 0x000101c0, 0x7ffffe00, 0x07e7f0ff, 0xe00c0087, 0x00000001, 0x7fbffffc, 0x017ff7f8, 0xf00b0086, 0x00000081, 0x8ffffffc, 0x87ffffff, 0x83fc0c00, 0xf0000000, 0xfff7ffff, 0x8601ffff, 0x7ffa0700, 0xf0000000, 0xff83e77f, 0xfe070087, 0x000001ff, 0x83c00fe0, 0x853000ff, 0xff800800, 0x000003ff, 0x83c00f00, 0x85c800ff, 0xffc00e00, 0x000003ff, 0xcffb00f0, 0x043fffff, 0x0d008401, 0x07ffffc0, 0x61f00000, 0xffffcf67, 0x00850fff, 0xffffc00e, 0x8000000f, 0xfff707d7, 0x023fffff, 0xc00d0084, 0x003fffff, 0xafff8000, 0xffffffc3, 0x0900857f, 0x3fffffc0, 0xff800002, 0xff83e7ff, 0xe0070085, 0x03ffffff, 0x85fec000, 0x840100ff, 0xfff00700, 0x0001ff7f, 0xff85f890, 0x83c000, 0xfff80108, 0x7e1f, 0xff842840, 0x1c07f0f, 0x7000000, 0x6e03fffe, 0x7c000000, 0x0eff84fc, 0x00000101, 0xffffffc0, 0x00700603, 0x84ee7c00, 0x1f7f0eff, 0xff800000, 0x384fffff, 0xf00380f8, 0x0cff85fe, 0x8700007f, 0x7fffffff, 0x0003f878, 0x0eff87e0, 0xffc00000, 0x1e5c7bff, 0x80003ff8, 0x84df007f, 0x0d0084ff, 0xfc07f63e, 0x0000007f, 0xfffff820, 0x00841fef, 0xfd03c00c, 0x00fffc01, 0x00400000, 0x00875ffe, 0xf0e91204, 0x0083ffff, 0x1fa00302, 0x80060087, 0xfffff3f8, 0x83f000, 0x880300, 0xfffff004, 0xc603ff );\nconst int rlb = rle.length() << 2;\n\n#define RLE(id) rle[id>>2]>>((id & 0x03)<<3)\n\nvoid mainImage( out vec4 fragColor, in vec2 uv ) {\n    if (uv.y<float(size.y) && uv.x<float(size.x)) {\n        bool seq;\n        int id = int(uv.y) * (size.x>>3) + (int(uv.x)>>3);\n        int k = 0, ri = 0, crb, n, cbi = 0;\n    \twhile (ri < rlb){\n            crb = RLE(ri);\n            n = 1 + crb & 0x7f;\n            seq = (crb & 0x80) == 0;\n            if (id >= cbi && id < cbi + n ) {  \n                k = RLE( ri + 1 + (seq ? id-cbi : 0));\n                break;\n            }\n            ri += seq ? n + 1 : 2;\n            cbi += n; \n        }\n\t\tfragColor = (k>>(int(uv.x)&0x07)&1) > 0 ? vec4(.3,.5,.2,1) : vec4(.6,.7,.9,1);\n    } else {\n        fragColor = vec4(.6,.7,.9,1);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}