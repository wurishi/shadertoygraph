{"ver":"0.1","info":{"id":"NtVfWG","date":"1665172473","viewed":162,"name":"Parametric SDF L1, L2, Linf","username":"Envy24","description":"Stupid routine for calculating approximate sdf for parametric curves (without solving minimization problem).\nJust to see how sdf should look like.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["sdf","norm","parametric","metric","l1","l2","linf"],"hasliked":0,"parentid":"stVcDz","parentname":"Minimal Plotter"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R                           iResolution\n#define AR                        ( R.x / R.y )                      // Aspect ratio (AR > 1.0).\n#define TO_CENTERED_NDC(SC)       ( ((SC)+(SC)-R.xy) / R.y )         // in range x=[-AR; AR], y=[-1.0; 1.0]\n#define NZMX                      ( (iMouse.x+iMouse.x-R.x) / R.x )  // in range [-1.0; 1.0]\n#define NZMY                      ( (iMouse.y+iMouse.y-R.y) / R.y )  // in range [-1.0; 1.0]\n#define LMB_IS_HOLD               ( iMouse.z > 0.0 )\n#define FIELD_SCALE                 2.0\n#define TAU                         6.2831853071795862\n#define PI                          3.1415926535897932\n\n/* Pick metric and segment *\n#define METRIC(B, E) ( L1(B, E) )\n#define SEGMENT(P, B, E, R) ( segmentSDF_L1(P, B, E, R) )\n/**/\n#define METRIC(B, E) ( L2(B, E) )\n#define SEGMENT(P, B, E, R) ( segmentSDF_L2(P, B, E, R) )\n/**\n#define METRIC(B, E) ( Linf(B, E) )\n#define SEGMENT(P, B, E, R) ( segmentSDF_Linf(P, B, E, R) )\n/**/\n\n// Define parametric curve\nvec2 parametric_curve2(float t)\n{\n    return vec2(tan(sin(t)), tan(cos(t)));\n}\nfloat parametric_curve1(float t) \n{ \n    return sin(t);\n}\n\n/* Pick curve definition. */\n#define CURVE(T) ( parametric_curve2(T) )\n//#define CURVE(T) ( vec2(T, parametric_curve1(T)) )\n\n/* by points *\n\nfloat parametricSDF(\n    vec2 NDC)\n{\n    float min_dist = 99.,\n          count = 500.,\n          a = -AR*FIELD_SCALE, b = AR*FIELD_SCALE,\n          dt = (b-a) / (count-1.);\n\n    for (float i = 0.; i < count; i += 1.)\n    {\n        min_dist = min(min_dist, METRIC(CURVE(a+dt * i), NDC));\n    }\n\n    float R = sinOSC(0.0, 0.3, iTime); \n    return min_dist-R;\n}\n/* by segments */\n\nfloat parametricSDF(\n    in vec2 NDC)\n{\n    float min_dist = 99.,\n          count = 200.,\n          a = -AR*FIELD_SCALE, b = AR*FIELD_SCALE,\n          dt = (b-a) / (count-1.);\n    \n    vec2 B = CURVE(a);\n      \n    for (float i = 1.; i < count; i += 1.)\n    {\n        vec2 E = CURVE(a + dt * i);\n        min_dist = \n            min(min_dist, SEGMENT(NDC, B, E, 0.));\n        B = E;\n    }\n    \n    float R = sinOSC(0.0, 0.3, iTime); \n    return min_dist-R;\n}\n/**/\n\n/* https://www.shadertoy.com/view/ddfGz2 */\nvec3 colorize_field(float dist, vec3 color)\n{    \n    float F = 30., freq = F*dist, aa = 1./F, C = 0.7, amp = 0.2, width = 0.3,\n          waves_sdf = C + amp*smoothstep(8./R.y, 0., (width+cos(freq)) * aa),\n          exp_raise = 1. - exp(-4.*abs(dist));\n        \n    color = 1.0 - sign(dist) * color; // Change color if dist is negative. \n    color *= exp_raise;               // Attenuate color around edges.     \n    color *= waves_sdf;               // Add waves.\n    \n    return mix(color, vec3(1), smoothstep(8./R.y, 0., abs(dist)) );\n}\n\nvec3 add_metric_circle(\n    vec2 NDC,\n    vec3 color)\n{\n    float unit = 7.0 / R.y;\n\n    vec2 M = \n        LMB_IS_HOLD ?\n            TO_CENTERED_NDC(iMouse.xy) * FIELD_SCALE :\n            rotateAroundZ(vec2(1, 0), iTime * 0.5) * 1.5;\n            //vec2(0);\n    \n    //M=vec2(2.5, 0.0);\n    \n    // Add point\n    color = mix(color, vec3(1.0, 1.0, 0.0), smoothstep(unit, 0.0, length(NDC - M) - 0.008));\n\n    float dist_form_point_to_box_edge = METRIC(NDC, M) - abs(parametricSDF(M));\n    float outline = abs(dist_form_point_to_box_edge);\n    \n    // Add metric circle\n    return mix(color, vec3(1.0, 1.0, 0.0), smoothstep(unit, 0.0, outline));\n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    float x = sinOSC(0.1, 4.0, iTime);\n\n    vec2 NDC = TO_CENTERED_NDC(SC) * FIELD_SCALE;\n    float minDist = parametricSDF(NDC);\n    \n    // Blending.\n    vec3 color = colorize_field(minDist, vec3(0.1, 0.4, 0.7));\n    color = add_metric_circle(NDC, color);\n\n    O = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/* Returns sine modulated value in range [min, max]. */\nfloat sinOSC(in float min, in float max, in float T)\n{\n    float v = (sin(T) + 1.0) * 0.5; // map T to [0.0, 1.0];\n    return min + v * (max - min);   // map T to [min, max];\n}\n\nvec2 rotateAroundZ(vec2 p, float a)\n{\n    float s = sin(a);\n    float c = cos(a);\n\n    return vec2(\n        p.x * c - p.y * s,\n        p.y * c + p.x * s);\n}\n\nfloat L1(vec2 B, vec2 E)\n{\n    vec2 D = E - B;\n    return abs(D.x) + abs(D.y);\n}\n\nfloat L2(vec2 B, vec2 E)\n{\n    vec2 D = E - B;\n    return sqrt(D.x*D.x + D.y*D.y);\n}\n\nfloat Linf(vec2 B, vec2 E)\n{\n    vec2 D = E - B;\n    return max(abs(D.x), abs(D.y));\n}\n\n#define P(t) (S + (E - S)*t)\nfloat segmentSDF_L1(\n    vec2 NDC,\n    vec2 S,\n    vec2 E,\n    float R)\n{\n    float invD0 = 1.0 / (S.y-E.y);\n    return min(L1(P(clamp((NDC.x-S.x) / (E.x-S.x), 0.0, 1.0)), NDC), \n               min(L1(P(clamp((NDC.y+S.y) * invD0, 0.0, 1.0)), NDC),\n                   L1(P(clamp((S.y-NDC.y) * invD0, 0.0, 1.0)), NDC))) - R;\n}\n\nfloat segmentSDF_L2(\n    in vec2 NDC,\n    in vec2 B,   \n    in vec2 E,\n    float R)\n{\n    vec2 BP = NDC - B, BE = E - B;\n    return length(BP - BE * clamp(dot(BP, BE) / dot(BE, BE), 0.0, 1.0)) - R;\n}\n\nfloat segmentSDF_Linf(\n    vec2 NDC,\n    vec2 S,\n    vec2 E,\n    float R)\n{\n    return min(Linf(P(clamp((S.y-S.x+NDC.x-NDC.y)/(E.x-S.x+S.y-E.y), 0.0, 1.0)), NDC), \n               Linf(P(clamp((S.y-NDC.y+S.x-NDC.x)/(S.x-E.x+S.y-E.y), 0.0, 1.0)), NDC)) - R;\n}","name":"Common","description":"","type":"common"}]}