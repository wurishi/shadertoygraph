{"ver":"0.1","info":{"id":"cl2fWh","date":"1694086636","viewed":91,"name":"Minimal Overlapping Circles SDF","username":"TheTurk","description":"Distance function for circles arranged in a hexagonal lattice, which represents the most efficient arrangement of circles that is covering the plane.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["distancefield","grid","sdf","lens","circle","hexagon","distance","pattern","tiling","disk","overlap","arc","hexagonal","lattice","cover"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float circle(vec2 position, float radius) {\n    vec2 s = vec2(sqrt(3.0), 3.0) * radius;\n    position = (fract(position / s) - 0.5) * s;   \n    position = abs(position);   \n    position -= 2.0 * min(dot(position - vec2(sqrt(3.0) * 0.5 * radius, 0.5 * radius), vec2(-0.5, -sqrt(3.0) * 0.5)), 0.0) * vec2(-0.5, -sqrt(3.0) * 0.5);   \n    position = abs(position);\n    position -= min(position.x - sqrt(3.0) * position.y, 0.0) * vec2(0.5, -sqrt(3.0) * 0.5);\n    float d1 = length(position - vec2(sqrt(3.0) * radius, 0.0)) - radius;\n    float d2 = length(position) - radius;\n    return max(d1, d2);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 position = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    \n    float radius = 1.0 / sqrt(3.0);\n    float d = circle(position, radius);\n    \n    // same colorization that Inigo Quilez uses in his shaders\n    vec3 color = vec3(1.0) - sign(d) * vec3(0.1, 0.4, 0.7); \n    color *= 1.0 - exp(-4.0 * abs(d)); \n\tcolor *= 0.8 + 0.2 * cos(120.0 * d);\n\tcolor = mix(color, vec3(1.0), 1.0 - smoothstep(0.0, 3.0, (abs(d) - 0.002) * iResolution.y));\n    if (iMouse.z > 0.0) {\n        vec2 mousePosition = (2.0 * iMouse.xy - iResolution.xy) / iResolution.y;\n        float d = circle(mousePosition, radius);\n        color = mix(color, vec3(1.0, 1.0, 0.0), 1.0 - smoothstep(0.0, 3.0, abs(length(position - mousePosition) - abs(d)) * iResolution.y - 1.0));\n    }\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}