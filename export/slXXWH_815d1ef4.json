{"ver":"0.1","info":{"id":"slXXWH","date":"1625583208","viewed":99,"name":"{3,3,n}","username":"calimops","description":"a normal mapped version of the poincare view of a cell of the {3,3,n} tesselations","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["mathsmathtetrahedronsdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// {3,3,6}\n//const float radius = 2.8284;\n//const float center = 1.7321;\n\n// {3,3,7}\nconst float radius = 2.1436;\nconst float center = 1.3656;\n\n// {3,3,8}\n// const float radius = 1.8887;\n// const float center = 1.2339;\n\n// {3,3,9}\n//const float radius = 1.7554;\n//const float center = 1.1664;\n\n// {3,3,10}\n//const float radius = 1.6742;\n//const float center = 1.1259;\n\n// {3,3,11}\n//const float radius = 1.6202;\n//const float center = 1.0993;\n\n// {3,3,12}\n//const float radius = 1.5821;\n//const float center = 1.0806;\n\n//float sdf(vec3 p) {\n//    return max(max(max(\n//    length( p ) - 1.0,\n//    radius - length( p - vec3(center , center, -center))),\n//    radius - length( p - vec3(center , -center, center))),\n//    radius - length( p - vec3(-center , center, center)));\n//}\n\n\nvec3 rotateX ( in vec3 p, float thetax ) {\n    \n    float ct = cos( thetax );\n    float st = sin( thetax );\n    \n    return vec3(p.x, ct * p.y - st * p.z, st * p.y + ct * p.z);\n}\n\nvec3 rotateY ( in vec3 p, float thetay ) {\n    \n    float ct = cos( thetay );\n    float st = sin( thetay );\n    \n    return vec3(ct * p.x - st * p.z, p.y, st * p.x + ct * p.z);\n}\n\nvec3 rotateZ ( in vec3 p, float thetaz ) {\n    \n    float ct = cos( thetaz );\n    float st = sin( thetaz );\n    \n    return vec3(ct * p.x - st * p.y, st * p.x + ct * p.y, p.z);\n}\n\n\nfloat sdf(vec3 p) {\n\n    p = mod(p, 4.)-vec3(2.0);\n    p = rotateY(p, 0.1 * 3.141 * sin(iTime) );\n    p = rotateZ(p, 0.1 * 3.141 * sin(iTime+3.0) );\n    p = rotateX(p, 0.1 * 3.141 * cos(iTime+3.0) );\n\n    \n    return max(max(max(max(\n    length( p ) - 1.0,\n    radius - length( p - vec3(center , center, -center))),\n    radius - length( p - vec3(center , -center, center))),\n    radius - length( p - vec3(-center , center, center))),\n    radius - length( p - vec3(-center , -center, -center)));\n}\n\n\n\n//float sdf(vec3 p) {\n    //return min(length(p-vec3(0.5, 0.0, 0.0)) - 1.0, length(p-vec3(-0.5, 0.0, 0.0))-1.0);\n//    return length(p-vec3(0.0, 0.0, 0.0))-1.0;\n//}\n\n//vec4 sky_sample(vec3 ray)\n//{\n//    return texture(iChannel0, ray);\n//}\n\nconst float eta = 0.67;\nconst float FresnelFactor = 5.0;\n\n\nconst float F = ((1.0-eta)*(1.0-eta))/((1.0+eta)*(1.0+eta));\n\n\nvec3 calcNormal( in vec3 p ) {\n    const float h = 0.0001;\n    const vec2 k = vec2(1, -1);\n    return normalize( k.xyy * sdf( p + k.xyy * h ) + \n                      k.yyx * sdf( p + k.yyx * h ) + \n                      k.yxy * sdf( p + k.yxy * h ) + \n                      k.xxx * sdf( p + k.xxx * h ) );\n}\n\n\nconst int numberOfIterations = 100;\n\nvec2 marchRay(vec3 pos, vec3 dir){\n\n    vec3 ip;\n    float t = 0.0;\n    int visible = 0;\n    \n    for( int i = 0; i < numberOfIterations; i++) {\n        \n        ip = pos + dir * t;\n        float temp = abs(sdf( ip ));\n\n        if(temp < 0.0001 ) {\n            visible = i;\n            break;\n        }\n        \n        t += abs(temp);\n\n    }\n    \n    return vec2(t, visible);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 uv = ( fragCoord.xy / iResolution.xy ) * 2.0 - 1.0;\n\tuv.x *= iResolution.x / iResolution.y;\n\n\t//vec3 pos = rotateX(rotateY(vec3( 0.0, 0.0, -2.0), 0.2 * iTime ), sin(0.2*iTime));\n\t//vec3 dir = rotateX(rotateY(normalize( vec3(uv, 1.0) ), 0.2 * iTime ), sin(0.2*iTime));\n    \n    vec3 pos = vec3(2.0, 2.0, 0.5);\n\tvec3 dir = normalize( vec3(uv, 1.0));\n    \n    vec2 intersect = marchRay( pos, dir );\n    \n    if( intersect.y > 0.0 && intersect.x < 30.0) {\n        vec3 inter =  pos + dir * intersect.x;\n        vec3 n = calcNormal( inter );\n    \n        float light = pow(( abs(n.y) + 1.0) / 2.0, 1.0 + 1.0 / (1.0 + intersect.x));\n        \n        //float distToCenter = distance(vec3(0.0),inter);\n        \n        float factor = 1.0 / cosh(0.1*intersect.x);\n        \n        //vec3 a = mix(vec3(.01,.01,.1),vec3(0,1,1), 0.5);\n        \n        vec3 b = mix(vec3(0,0,0),vec3(2.0,sin(iTime*.4)+1.0,cos(iTime*.4)+1.0),light);\n        \n        fragColor.rgb = 0.5*factor*b;\n        \n        //fragColor = vec4(normalize( calcNormal( pos + dir * intersect.x ) * 0.5 + 0.5 ), 1.0);\n       \n   //     vec3 hit = pos + dir * intersect.x;\n     //   vec3 norm = normalize( calcNormal(hit) );\n//        \n //       vec3 Reflect = reflect( dir, norm );\n  //      \n   //     vec3 dir2 = refract( dir, norm, eta );\n    //    \n     //   hit -= 0.05 * norm;\n      //  \n       // vec2 intersect2 = marchRay(hit, dir2);\n        \n       // vec3 hit2 = hit + dir2 * intersect2.x;\n        \n//        vec3 norm2 = normalize( calcNormal( hit2 ) );\n        \n  //      vec3 dir3 = refract( normalize(dir2), -norm2, 1.0 / eta);\n        \n    //    vec3 dir5 = vec3(0.0,0.0,0.0);\n        \n      //  if(1.0 - dot(normalize(dir2), norm2) * dot(normalize(dir2), norm2)  > (eta * eta)) {\n        \n        //    vec3 dir4 = reflect (normalize(dir2), -norm2);\n          //  vec2 intersect3 = marchRay(hit2 - 0.05 * norm2, dir4);\n        \n            //vec3 hit3 = hit2 + dir4 * intersect3.x;\n        \n   //         vec3 norm3 = normalize( calcNormal( hit3 ) );\n     ///       \n        //    dir5 = refract( normalize(dir4), -norm3, 1.0 / eta);\n            \n          //  if(1.0 - dot(normalize(dir5), norm3) * dot(normalize(dir5), norm3)  > (eta*eta)) {\n                \n            //    dir5 = dir4;\n            \n           // }\n            \n        \n       // }\n        \n      //  float ratio = F + (1.0 - F) * pow( 1.0 - dot( -dir, norm ), FresnelFactor );\n        \n        //fragColor = mix(sky_sample(dir3+dir5), sky_sample(Reflect), ratio);\n        \n        //fragColor = sky_sample(dir2);\n        \n        //fragColor -= vec4(0.1, 0.15, 0.1, 0.0);\n    } else {\n        fragColor = vec4(0.8, 0.8, 0.8, 1.0);\n        //fragColor = sky_sample(dir);\n    }\n\n}","name":"Image","description":"","type":"image"}]}