{"ver":"0.1","info":{"id":"llXBWB","date":"1513112199","viewed":622,"name":"Bubbles music visualizer","username":"liyouvane","description":"bubbles....\nreference : https://github.com/ashima/webgl-noise\nreference : I/O fragment shader by movAX13h https://www.shadertoy.com/view/XsfGDS","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["sound"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","previewfilepath":"/media/ap/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// reference : https://github.com/ashima/webgl-noise\n// reference : I/O fragment shader by movAX13h, August 2013 \n// https://www.shadertoy.com/view/XsfGDS\n\n#define SHOW_BLOCKS\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec2 fade(vec2 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat cnoise(vec2 P)\n{\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n  Pi = mod289(Pi); // To avoid truncation effects in permutation\n  vec4 ix = Pi.xzxz;\n  vec4 iy = Pi.yyww;\n  vec4 fx = Pf.xzxz;\n  vec4 fy = Pf.yyww;\n\n  vec4 i = permute(permute(ix) + iy);\n\n  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0;\n  vec4 gy = abs(gx) - 0.5;\n  vec4 tx = floor(gx + 0.5);\n  gx = gx - tx;\n\n  vec2 g00 = vec2(gx.x,gy.x);\n  vec2 g10 = vec2(gx.y,gy.y);\n  vec2 g01 = vec2(gx.z,gy.z);\n  vec2 g11 = vec2(gx.w,gy.w);\n\n  vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\n  g00 *= norm.x;\n  g01 *= norm.y;\n  g10 *= norm.z;\n  g11 *= norm.w;\n\n  float n00 = dot(g00, vec2(fx.x, fy.x));\n  float n10 = dot(g10, vec2(fx.y, fy.y));\n  float n01 = dot(g01, vec2(fx.z, fy.z));\n  float n11 = dot(g11, vec2(fx.w, fy.w));\n\n  vec2 fade_xy = fade(Pf.xy);\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n  return 2.3 * n_xy;\n}\n\n\nfloat rand(float x)\n{\n    return fract(sin(x) * 4358.5453123);\n}\n\nfloat rand(vec2 co)\n{\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5357);\n}\n\nfloat circle(vec2 p, vec2 b, float r)\n{\n  return length(p-b)-r;\n}\n\nfloat box(vec2 p, vec2 b, float r)\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat sampleMusic()\n{\n\treturn 0.5 * (\n//\t\ttexture( iChannel0, vec2( 0.01, 0.25 ) ).x + \n//\t\ttexture( iChannel0, vec2( 0.07, 0.25 ) ).x + \n\t\ttexture( iChannel0, vec2( 0.15, 0.25 ) ).x + \n\t\ttexture( iChannel0, vec2( 0.30, 0.25 ) ).x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tconst float speed = 0.4;\n\tconst float ySpread = 1.6;\n\tconst int numBlocks = 30;\n\tconst int numBubbles = 50;\n\tfloat pulse = sampleMusic();\n\t\n\tvec2 uv = fragCoord.xy / iResolution.xy - 0.5;\n\tfloat aspect = iResolution.x / iResolution.y;\n\tvec3 baseColor = uv.x > 0.0 ? vec3(0.0,0.3, 0.3) : vec3(0.3, 0.0, 0.3);\n\n\tvec3 color = 5. * pulse*baseColor*0.5*(0.9-cos(uv.x*8.0));\n\tuv.x *= aspect;\n\t\n\tfor (int i = 0; i < numBubbles; i++)\n\t{\n\t\tfloat z = 1.0-0.7*rand(float(i)*1.4333); // 0=far, 1=near\n\t\tfloat tickTime = iTime*z*speed + float(i)*1.23753;\n\t\tfloat tick = floor(tickTime);\n\t\t\n\t\tvec2 pos = vec2(0.6*aspect*(rand(tick)-0.5), -abs(sign(uv.x))*ySpread*(0.5-fract(tickTime)));\n\t\tpos.x += 0.18*sign(pos.x); // move aside\n\t\tif (abs(pos.x) < 0.1) pos.x++; // stupid fix; sign sometimes returns 0\n\t\t\n\t\tvec2 size = 1.8*z*vec2(0.04, 0.04 + 0.1*rand(tick+0.2));\n\t\tfloat b = circle(uv, pos, 0.01 + 0.15 * pulse);\n\t\tfloat dust = z*smoothstep(0.22, 0.0, b)*pulse*0.5;\n\t\tfloat block = 0.2*z*smoothstep(0.012, 0.0, b);\n\t\tfloat shine = 0.6*z*pulse*smoothstep(-0.002, b, 0.007);\n        float u_Scale = 9.;\n        float noise = sin(abs(cnoise(u_Scale * uv.xy)+0.5*cnoise(2. * u_Scale * uv.xy)+0.25*cnoise(4. * u_Scale * uv.xy)+0.125*cnoise(8. * u_Scale * uv.xy)));\n\t\tcolor += dust*baseColor*(1.+3. * noise) + block*z + shine;\n\t}\n    baseColor = vec3(0.1, 0.3, 0.0);\n    for (int i = 0; i < numBlocks; i++)\n\t{\n\t\tfloat z = 1.0-0.7*rand(float(i)*1.4333); // 0=far, 1=near\n\t\tfloat tickTime = iTime*z*speed + float(i)*1.23753;\n\t\tfloat tick = floor(tickTime);\n\t\t\n\t\tvec2 pos = vec2(0.6*aspect*(rand(tick)-0.5), -abs(sign(uv.x))*ySpread*(0.5-fract(tickTime)));\n\t\tpos.x += 0.24*sign(pos.x); // move aside\n\t\tif (abs(pos.x) < 0.1) pos.x++; // stupid fix; sign sometimes returns 0\n\t\t\n\t\tvec2 size = 1.8*z*vec2(0.04, 0.04 + 0.1*rand(tick+0.2));\n\t\tfloat b = circle(uv-pos, size, 0.02);\n\t\tfloat dust = z*smoothstep(0.22, 0.0, b)*pulse*0.5;\n\t\tfloat block = 0.2*z*smoothstep(0.002, 0.0, b);\n\t\tfloat shine = 0.6*z*pulse*smoothstep(-0.002, b, 0.007);\n        float u_Scale = 9.;\n        float noise = sin(abs(cnoise(u_Scale * uv.xy)+0.5*cnoise(2. * u_Scale * uv.xy)+0.25*cnoise(4. * u_Scale * uv.xy)+0.125*cnoise(8. * u_Scale * uv.xy)));\n\t\tcolor += dust*baseColor*(1.+noise) + block*z + shine;\n\t}\n\tcolor /= 1.5;\n\tcolor -= rand(uv)*0.04;\n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}