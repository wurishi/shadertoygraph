{"ver":"0.1","info":{"id":"3tXfRN","date":"1596093596","viewed":490,"name":"Ellipse Elliptic Coordinate Dist","username":"strawbry_jam","description":"Distance to ellipse using elliptic coordinate conversion to find the closest point to the surface.\nhttps://en.wikipedia.org/wiki/Elliptic_coordinate_system\nhttp://www.sciencepublishinggroup.com/journal/paperinfo?journalid=389&doi=10.11648/j.mma.20170204.1","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["2d","distance","ellipse"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n// Analytical distance to an 2D ellipse, which is more complicated than it seems. It ends up being\n// a quartic equation, which can be resolved through a cubic, then a quadratic. Some steps through the\n// derivation can be found in this article: \n//\n// https://iquilezles.org/articles/ellipsedist\n//\n\n\n// List of some other 2D distances:\n//\n// Circle:               https://www.shadertoy.com/view/3ltSW2\n// Segment:              https://www.shadertoy.com/view/3tdSDj\n// Triangle:             https://www.shadertoy.com/view/XsXSz4\n// Isosceles Triangle:   https://www.shadertoy.com/view/MldcD7\n// Regular Triangle:     https://www.shadertoy.com/view/Xl2yDW\n// Regular Pentagon:     https://www.shadertoy.com/view/llVyWW\n// Regular Octogon:      https://www.shadertoy.com/view/llGfDG\n// Rounded Rectangle:    https://www.shadertoy.com/view/4llXD7\n// Rhombus:              https://www.shadertoy.com/view/XdXcRB\n// Trapezoid:            https://www.shadertoy.com/view/MlycD3\n// Polygon:              https://www.shadertoy.com/view/wdBXRW\n// Hexagram:             https://www.shadertoy.com/view/tt23RR\n// Regular Star:         https://www.shadertoy.com/view/3tSGDy\n// Star5:                https://www.shadertoy.com/view/wlcGzB\n// Ellipse 1:            https://www.shadertoy.com/view/4sS3zz\n// Ellipse 2:            https://www.shadertoy.com/view/4lsXDN\n// Quadratic Bezier:     https://www.shadertoy.com/view/MlKcDD\n// Uneven Capsule:       https://www.shadertoy.com/view/4lcBWn\n// Vesica:               https://www.shadertoy.com/view/XtVfRW\n// Cross:                https://www.shadertoy.com/view/XtGfzw\n// Pie:                  https://www.shadertoy.com/view/3l23RK\n// Arc:                  https://www.shadertoy.com/view/wl23RK\n// Horseshoe:            https://www.shadertoy.com/view/WlSGW1\n// Parabola:             https://www.shadertoy.com/view/ws3GD7\n// Parabola Segment:     https://www.shadertoy.com/view/3lSczz\n// Rounded X:            https://www.shadertoy.com/view/3dKSDc\n// Joint:                https://www.shadertoy.com/view/WldGWM\n// Simple Egg:           https://www.shadertoy.com/view/Wdjfz3\n//\n// and many more here:   https://iquilezles.org/articles/distfunctions2d\n\n//======================================================================================================\n\n// sdEllipse2()\n\n//Rough draft of elliptic coordinate conversion to map point to surface\n\n//Sun, C. (2017). Explicit Equations to Transform from Cartesian to Elliptic Coordinates.\n//http://www.sciencepublishinggroup.com/journal/paperinfo?journalid=389&doi=10.11648/j.mma.20170204.12\n\n//https://en.wikipedia.org/wiki/Elliptic_coordinate_system\n\n//Might be possible to get an exact ellipsoid using one of the 3d elliptic coordinate systems.\n\n//======================================================================================================\n\n//#define USE_APPROXIMATION\nfloat msign(in float x) { return (x<0.0)?-1.0:1.0; }\n\nfloat sdEllipse( vec2 p, in vec2 ab )\n{\n\tp = abs( p ); if( ab.x > ab.y ){ p=p.yx; ab=ab.yx; }\n\t\n\tfloat l = ab.y*ab.y - ab.x*ab.x;\n\t\n    float m = ab.x*p.x/l; \n\tfloat n = ab.y*p.y/l; \n\tfloat m2 = m*m;\n\tfloat n2 = n*n;\n\t\n    float c = (m2 + n2 - 1.0)/3.0; \n\tfloat c3 = c*c*c;\n\n    float q = c3 + m2*n2*2.0;\n    float d = c3 + m2*n2;\n    float g = m + m*n2;\n\n    float co;\n\n    if( d<0.0 )\n    {\n        float h = acos(q/c3)/3.0;\n        float s = cos(h);\n        float t = sin(h)*sqrt(3.0);\n        float rx = sqrt( -c*(s + t + 2.0) + m2 );\n        float ry = sqrt( -c*(s - t + 2.0) + m2 );\n        co = ( ry + sign(l)*rx + abs(g)/(rx*ry) - m)/2.0;\n    }\n    else\n    {\n        float h = 2.0*m*n*sqrt(d);\n        float s = msign(q+h)*pow( abs(q+h), 1.0/3.0 );\n        float u = msign(q-h)*pow( abs(q-h), 1.0/3.0 );\n        float rx = -s - u - c*4.0 + 2.0*m2;\n        float ry = (s - u)*sqrt(3.0);\n        float rm = sqrt( rx*rx + ry*ry );\n        co = (ry/sqrt(rm-rx) + 2.0*g/rm - m)/2.0;\n    }\n\n    float si = sqrt( max(1.0-co*co,0.0) );\n \n    vec2 r = ab * vec2(co,si);\n\t\n    return length(r-p) * msign(p.y-r.y);\n}\n\n//conversion to elliptic coordinates\nfloat sdEllipse2( vec2 p, in vec2 ab )\n{\n    if( ab.x == ab.y ){ return length(p)-ab.x; }\n    p = abs( p ); if( ab.x < ab.y ){ p=p.yx; ab=ab.yx; }\n    \n    float fp2 = ab.x*ab.x - ab.y*ab.y;\n    float fp = sqrt(fp2);\n    \n    float b = p.x*p.x+p.y*p.y-fp2;\n    float rt = sqrt(b*b + 4.0*fp2*p.y*p.y);\n    float q1 = (rt-b)/(2.0*fp2);\n    float q2 = (fp2-(ab.x*ab.x))/fp2;\n    \n    vec2 elco = vec2(-log(1.0-2.0*(q2+sqrt(q2*q2-q2)))/2.0,asin(sqrt(q1)));\n    //vec2 elco = vec2(ab.y,asin(sqrt(q1)));\n    \n    vec2 cart = vec2(fp*cosh(elco.x)*cos(elco.y),fp*sinh(elco.x)*sin(elco.y));\n    \n    return length(p-cart) * msign( p.x - cart.x);\n\n}\n\n// See: https://iquilezles.org/articles/ellipsoids\nfloat sdEllipsoidApproximated( in vec2 p, in vec2 r ) \n{\n    float k0 = length(p/r);\n    float k1 = length(p/(r*r));\n    return k0*(k0-1.0)/k1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n\t\n    vec2 m = iMouse.xy/iResolution.xy;\n\tm.x *= iResolution.x/iResolution.y;\n\t\n    #ifdef USE_APPROXIMATION\n\tfloat d = sdEllipsoidApproximated( uv, vec2(0.3,0.3)*m + vec2(1.0,0.5)  );\n    #else\n\tfloat d = sdEllipse2( uv, vec2(0.5,0.5)*m + vec2(0.5,0.5)  );\n    #endif\n    \n    vec2 abb = vec2(0.5,0.5)*m + vec2(0.5,0.5);\n    vec2 fpp = vec2(0.0);\n    vec2 uvv = vec2(0.0);\n    if( abb.x > abb.y ){ \n    \tfpp = vec2(sqrt(abb.x*abb.x - abb.y*abb.y),0.0);\n        uvv = vec2(abs(uv.x),uv.y);\n    } else {\n        fpp = vec2(0.0,sqrt(abb.y*abb.y - abb.x*abb.x));\n        uvv = vec2(uv.x,abs(uv.y));\n    }\n    \n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-2.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(120.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.02,abs(d)) );\n    \n    col = mix(col,vec3(1,1,0),1.0-smoothstep(0.03,0.04,length(vec2(abs(uv.x),uv.y)-vec2(abb.x,0.0))));\n    col = mix(col,vec3(1,1,0),1.0-smoothstep(0.03,0.04,length(vec2(uv.x,abs(uv.y))-vec2(0.0,abb.y))));\n    if( abb.x != abb.y ){ \n    \tcol = mix(col,vec3(1,0.2,0),1.0-smoothstep(0.03,0.04,length(uvv-fpp)));\n    }\n\n\tfragColor = vec4( col, 1.0 );;\n}","name":"Image","description":"","type":"image"}]}