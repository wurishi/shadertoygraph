{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"vec4 hsv_to_rgb(float h, float s, float v, float a)\n{\n\tfloat c = v * s;\n\th = mod((h * 6.0), 6.0);\n\tfloat x = c * (1.0 - abs(mod(h, 2.0) - 1.0));\n\tvec4 color;\n \n\tif (0.0 <= h && h < 1.0) {\n\t\tcolor = vec4(c, x, 0.0, a);\n\t} else if (1.0 <= h && h < 2.0) {\n\t\tcolor = vec4(x, c, 0.0, a);\n\t} else if (2.0 <= h && h < 3.0) {\n\t\tcolor = vec4(0.0, c, x, a);\n\t} else if (3.0 <= h && h < 4.0) {\n\t\tcolor = vec4(0.0, x, c, a);\n\t} else if (4.0 <= h && h < 5.0) {\n\t\tcolor = vec4(x, 0.0, c, a);\n\t} else if (5.0 <= h && h < 6.0) {\n\t\tcolor = vec4(c, 0.0, x, a);\n\t} else {\n\t\tcolor = vec4(0.0, 0.0, 0.0, a);\n\t}\n \n\tcolor.rgb += v - c;\n \n\treturn color;\n}\n\nbool test(float x, float width, float ms){\n\treturn ( x * sin(x) - width * sin(ms*0.7) ) < 1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tfloat width = iResolution.x;\n\tfloat height = iResolution.y;\n\tfloat x = fragCoord.x;\n\tfloat y = fragCoord.y;\n    float ms = iTime * 0.7;\n\n\tif(test(x, width, (ms+3.0)*1.1) || test(width-x, width, (ms+3.0)*1.2)){\n\t\tfragColor = hsv_to_rgb(abs(cos(ms*0.3)), 0.3*abs(sin(ms*0.1))*y/height, 1.0, 1.0);\n\t}else{\n\t\tfragColor = hsv_to_rgb(abs(cos(ms*0.3)), abs(sin(ms)), y/height * (width-x)/width, 1.0);\n\t}\n}\n\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lsBXRz","date":"1408328824","viewed":158,"name":"Upset Lines","username":"atmarksharp","description":"Upset Lines","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["line","colors","mod","gradation"],"hasliked":0,"parentid":"","parentname":""}}