{"ver":"0.1","info":{"id":"DdjyWV","date":"1688188449","viewed":77,"name":"damnnn","username":"JJmartinodev","description":"noob stuff\n","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["nobbieee"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 spheres[3];\nfloat rads[3];\n\nfloat df(vec3 a, out uint i) {\n    i = 0u;\n    float a0 = distance(spheres[0],a)-rads[0];\n    float a1 = distance(spheres[1],a)-rads[1];\n    float a2 = distance(spheres[2],a)-rads[2];\n    if(a0 < a1) {\n        if(a0 < a2) {\n            i = 0u;\n            return a0;\n        } else {\n            i = 2u;\n            return a2;\n        }\n        \n    }\n    else {\n        if(a1 < a2) {\n            i = 1u;\n            return a1;\n        } else {\n            i = 2u;\n            return a2;\n        }\n    }\n}\n\n#define THRESHOLD 0.\n#define RANGE 0.5\n#define MIN_MARCH 100.0\n\nbool march(inout vec3 r,vec3 d,out vec3 n,out float g) {\n    n = vec3(0);\n    for(int i = 0; i < 300; i++) {\n        uint e;\n        float f = min(df(r,e),MIN_MARCH);\n        if(f < 0.1) {\n            n = normalize(r-spheres[e]);\n            return true;\n        }\n        if(f < THRESHOLD+RANGE || f < THRESHOLD-RANGE) {\n            g+= fract(f);\n        }\n        r += d * f;\n    }\n    return false;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspect = iResolution.x/iResolution.y;\n    vec2 uv = fragCoord/iResolution.xy*2.-1.;\n    uv.x *= aspect;\n    \n    spheres[0] = vec3(0,-50,100);\n    spheres[1] = vec3(0,10009.,10);\n    spheres[2] = vec3(0,0,20);\n    \n    rads[0] = 70.0;\n    rads[1] = 10000.0;\n    rads[2] = 10.0;\n    \n    vec3 ecam = vec3(uv,-1);\n    vec3 cam = vec3(0);\n    \n    vec3 r = cam - ecam;\n    vec3 d = normalize(r - cam);\n    vec3 n0 = vec3(0);\n    float g = 0.;\n    bool hit0 = march(r,d,n0,g);\n    \n    fragColor = vec4(0);\n    if(hit0) {\n        //fragColor = vec4(-dot(l,n));\n        fragColor = texture(iChannel0,d)/g;\n    }\n}","name":"Image","description":"","type":"image"}]}