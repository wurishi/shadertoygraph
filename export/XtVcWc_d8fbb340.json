{"ver":"0.1","info":{"id":"XtVcWc","date":"1537993545","viewed":1162,"name":"Filter reference","username":"nmz","description":"Collection of 15 useful filters (only 11 are shown). Mouse left/right to select filter up/down to change width.\n\nEdit: added derivative plot","likes":39,"published":1,"flags":32,"usePreview":0,"tags":["filter","filtering","reference","kernel","lanczos","mitchell","reconstruction","hann","hamming","blackman","tukey","parzen"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Survey of useful filters by nmz (twitter: @stormoid)\n\n//The MIT License\n//Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n//Turned off by default to help visualize the kernels, should be done before using the filters\n//#define SINC_MULTIPLY\n//N.B. The Lanczos and Mitchell-Netravali filters have an internal sinc() multiplication \n\n/*\n\tIncluded filters:\n\t\tSmoothstep based\n\t\tQuintic smoothstep basef\n\t\tLanczos (mostly historical)\n\t\tMitchell-Netravali (fixed width 3, great for bicubic filtering)\n\t\tMax filter (useful parameterization)\n\t\tTriangular (2nd order B-spline)\n\t\tParzen (4th order B-spline)\n\t\tHann (cosine sum window)\n\t\tHamming (cosine sum window)\n\t\tBlackman (cosine sum window)\n\t\tNuttall (cosine sum window, C1 continuous)\n\t\tTukey (tapered cosine window)\n\t\tCook (truncated gaussian)\n\t\tBlackman-Nuttall (cosine sum window)\n\t\tBlackman-Harris (cosine sum window)\n\n\tReferences:\n\t\thttps://developer.nvidia.com/gpugems/GPUGems/gpugems_ch24.html\n\t\thttps://web.archive.org/web/20120122064506/http://www.control.auc.dk/~awkr00/graphics/filtering/filtering.html\n\t\thttps://en.wikipedia.org/wiki/Window_function\n*/\n\n\nfloat sqr(float x){return x*x;}\nfloat cub(float x){return x*x*x;}\n\nfloat quintic(float a, float b, float x)\n{\n    x = clamp((x - a) / (b - a), 0.0, 1.0);\n\treturn x*x*x*(x*(x*6.0 - 15.0) + 10.0);\n}\n\nfloat mitchellNetravali(float x, float B, float C)\n{\n\tfloat ax = abs(x);\n    float ax3 = ax*ax*ax;\n    if (ax < 1.) \n    {\n        return ((12. - 9. * B - 6. * C) * ax * ax * ax +\n                (-18. + 12. * B + 6. * C) * ax * ax + (6. - 2. * B)) / 6.;\n    } \n    else if ((ax >= 1.) && (ax < 2.)) \n    {\n        return ((-B - 6. * C) * ax * ax * ax +\n                (6. * B + 30. * C) * ax * ax + (-12. * B - 48. * C) *\n                ax + (8. * B + 24. * C)) / 6.;\n    } \n    else\n    {\n        return 0.;\n    }\n}\n\n//Max filter: https://web.archive.org/web/20120122064506/http://www.control.auc.dk/~awkr00/graphics/filtering/filtering.html\nfloat maxFilt(float x, float w, float s)\n{\n    x = abs(x);\n    if (abs(x) > w || x < 0.)\n        return 0.;\n    else if(x <= s)\n        return 1. - (x*x)/(s*w);\n    else\n        return (w-x)*(w-x)/(w*(w-s));\n}\n\nfloat sinc(float x)\n{\n    float pix = 3.14159265358979*x;\n    return sin(pix)/(pix+1e-9);\n}\n\n//The following kernels are sinc windows (attenuating sinc to 0 at the edges)\nfloat lanczos(float x, float w)\n{\n    if (abs(x) < w)\n    return sinc(x)*sinc(x/w);\n    else\n    \treturn 0.;\n}\n\nfloat hann(float x, float w)\n{\n    const float pi = 3.14159265358979;\n    if (abs(x) > w)\n        return 0.;\n    return 0.5-0.5*cos(pi*x/w + pi);\n}\n\nfloat hamming(float x, float w)\n{\n    const float pi = 3.14159265358979;\n    if (abs(x) > w)\n        return 0.;\n    //return 0.54-0.46*cos(pi*x/w + pi);\n    return 0.53836 - 0.46164*cos(pi*x/w + pi);\n}\n\nfloat blackman(float x, float w)\n{\n    const float pi = 3.14159265358979;\n    if (abs(x) > w)\n        return 0.;\n    return 0.42-0.5*cos(pi*x/w + pi) + 0.08*cos(2.*pi*x/w);\n}\n\n\n//C1 continuous\nfloat nuttall(float x, float w)\n{\n    const float pi = 3.14159265358979;\n    if (abs(x) > w)\n        return 0.;\n    return 0.355768 - 0.487396*cos(pi*x/w + pi) + 0.144232*cos(2.*pi*x/w) - 0.012604*cos(3.*pi*x/w + pi*3.);\n}\n\nfloat tukey(float x, float w, float a)\n{\n    w *= 2.0;\n    x += w*0.5;\n    const float pi = 3.14159265358979;\n    float xoa = 2.*x/(a*w);\n    if (x < 0. || abs(x) > w)\n        return 0.;\n    if (x < a*w*0.5)\n        return 0.5*(1.+cos(pi*(xoa-1.)));\n    else if (x < w*(1.-a*0.5))\n        return 1.;\n    else\n        return 0.5*(1.+cos(pi*(xoa - 2./a + 1.)));\n}\n\nfloat parzen(float x, float w)\n{\n    float nx = abs(x);\n    if (nx > w)\n        return 0.;\n   \telse if (nx <= w/2.)\n    \treturn 1.0 - 6.0*sqr(x/w)*(1.0 - nx/w);\n    else\n        return 2.0*cub(1.0 - nx/w);\n}\n\n//Cook filter (truncated Gaussian)\n//not shown\nfloat cook(float x, float w)\n{\n    const float e = 2.718281828459;\n    if (abs(x) > w)\n        return 0.;\n\treturn pow(e,-x*x)-pow(e,-w*w);\n}\n\n//not shown\nfloat blackman_nuttall(float x, float w)\n{\n    const float pi = 3.14159265358979;\n    if (abs(x) > w)\n        return 0.;\n    return 0.3635819 - 0.4891775*cos(pi*x/w + pi) + 0.1365995*cos(2.*pi*x/w) - 0.0106411*cos(3.*pi*x/w + pi*3.);\n}\n\n//not shown\nfloat blackman_harris(float x, float w)\n{\n    const float pi = 3.14159265358979;\n    if (abs(x) > w)\n        return 0.;\n    return 0.35875 - 0.48829*cos(pi*x/w + pi) + 0.14128*cos(2.*pi*x/w) - 0.01168*cos(3.*pi*x/w + pi*3.);\n}\n\n//not shown\nfloat triangular(float x, float w)\n{\n    if (abs(x) > w)\n        return 0.;\n    return 1.-abs(x/w);\n}\n\nfloat f(float x, float w, int type)\n{\n    float rz= 0.;\n    switch (type){\n        case 0: rz = smoothstep(w,0., abs(x)); break;\n        case 1: rz = quintic(w,0., abs(x)); break;\n        case 2: rz = lanczos(x, w); break;\n        case 3: rz = maxFilt(x, w, 0.5); break;\n        case 4: rz = parzen(x, w); break;\n        case 5: rz = hann(x, w); break;\n        case 6: rz = hamming(x, w); break;\n        case 7: rz = blackman(x, w); break;\n        case 8: rz = nuttall(x, w); break;\n        case 9: rz = tukey(x, w, 0.95); break;\n        case 10: rz = mitchellNetravali(x, 0.3333, 0.3333); break;\n    }\n\n    //Bonus filters!\n    //rz = triangular(x, w);\n    //rz = blackman_nuttall(x, w);\n    //rz = blackman_harris(x, w);\n    //rz =cook(x, w);    \n    //rz = mitchellNetravali(x, 1., 0.); //Cubic B-spline\n    //rz = mitchellNetravali(x, 0., 0.5); //Catmull-rom\n    \n    #ifdef SINC_MULTIPLY\n    if (type != 2 && type != 10)\n    \treturn rz*sinc(x);\n    else\n        return rz;\n    #else\n    return rz;\n    #endif\n}\n\nfloat smoothPlot(vec2 p, float w, int type)\n{\n    float v = f(p.x, w, type)-p.y;\n\tfloat e = 0.1;\n    float g = 0.1 + sqr(f(p.x + e, w, type) - f(p.x - e, w, type));\n    return float(smoothstep(0., .035, abs(v)/sqrt(g)));\n}\n\nfloat derivPlot(vec2 p, float w, int type)\n{\n    float e = 0.01;\n    float dr = (f(p.x+e, w, type) - f(p.x-e, w, type))/(e*2.);\n    return smoothstep(0.01,.0, abs(dr-p.y));\n}\n\n#define chr(A) col -= getChar(pp, A),pp.x-=0.5\n\n//for codes see: https://www.shadertoy.com/view/ldSBzd\nfloat getChar(vec2 p, int char)\n{\n\tvec2 pos = vec2(char%16, 15 - char / 16);\n\tpos += clamp(p, 0.001, 0.999);\n\treturn textureLod(iChannel0, pos/16., 0.).r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 q = fragCoord/iResolution.xy;\n    vec2 p = q-0.5;\n    p.x *= iResolution.x/iResolution.y;\n    vec2 mo = iMouse.xy/iResolution.xy;\n    \n    int type = int(iTime*0.5)%11;\n    \n    if (textureLod(iChannel1, q, 0.).x > 0.5)\n    \ttype = int(mo.x*11.);\n\n    p *= 3.37;\n    p.y += 0.25;\n    float w = 3. - mo.y*2.;\n    float rz = smoothPlot(p, w, type);\n    vec3 col = vec3(rz)*vec3(0.975,.985,0.995);\n    \n#if 1\n   //Grid \n    col -= smoothstep(0.018,0.0, abs(p.x-0.005))*vec3(.25,0.17,0.02);\n    col -= smoothstep(0.018,0.0, abs(p.y-0.005))*vec3(.25,0.17,0.02);\n    vec2 rp = mod(p,1.)-0.005;\n    col -= smoothstep(0.01,0.0, abs(rp.x))*vec3(.25,0.15,0.02);\n    col -= smoothstep(0.01,0.0, abs(rp.y))*vec3(.25,0.15,0.02);\n    if (type != 10)\n    \tcol -= smoothstep(0.01,0.0, abs(abs(p.x)-w))*vec3(.02,0.3,0.25);\n#endif\n    \n    vec2 wd = 35./iResolution.xy;\n    vec2 lc = vec2(9,7)*wd;\n    \n    vec2 pp = (p + vec2(3.,-1.7))*4.2;\n    switch (type){\n        case 0:  //Smoothstep\n            chr(83);chr(109);chr(111);chr(111);chr(116);\n            chr(104);chr(115);chr(116);chr(101);chr(112);\n            break;\n        case 1: //Quintic\n            chr(83);chr(109);chr(111);chr(111);chr(116);chr(104);\n            chr(101);chr(114);chr(115);chr(116);chr(101);chr(112);\n            break;\n        case 2: //Lanczos\n            chr(76);chr(97);chr(110);chr(99);chr(122);chr(111);chr(115);\n            break;\n        case 3: //Max Filter\n            chr(77);chr(97);chr(120);pp.x-=0.5;\n        \tchr(70);chr(105);chr(108);chr(116);chr(101);chr(114);pp.x-=0.5;\n        \tchr(115);chr(61);chr(48);chr(46);chr(53);\n            break;\n        case 4: //Parzen\n            chr(80);chr(97);chr(114);chr(122);chr(101);chr(110);\n            break;\n        case 5: //Hann\n            chr(72);chr(97);chr(110);chr(110);\n            break;\n        case 6: //Hamming\n            chr(72);chr(97);chr(109);chr(109);chr(105);chr(110);chr(103);\n            break;\n        case 7: //Blackman\n            chr(66);chr(108);chr(97);chr(99);chr(107);chr(109);chr(97);chr(110);\n            break;\n        case 8: //Nuttall\n            chr(78);chr(117);chr(116);chr(116);chr(97);chr(108);chr(108);\n            break;\n        case 9: //Tukey\n            chr(84);chr(117);chr(107);chr(101);chr(121);\n        \tpp.x-=0.5;chr(97);chr(61);chr(48);chr(46);chr(57);chr(53);\n            break;\n        case 10: //Mitchell-Netravali\n            chr(77);chr(105);chr(116);chr(99);chr(104);chr(101);chr(108);chr(108);chr(45);\n        \tchr(78);chr(101);chr(116);chr(114);chr(97);chr(118);chr(97);chr(108);chr(105);\n        \tpp.x-=0.5;chr(98);chr(61);chr(49);chr(47);chr(51);\n        \tpp.x-=0.5;chr(99);chr(61);chr(49);chr(47);chr(51);\n            break;\n    }\n    \n    col -= derivPlot(p, w, type)*vec3(0.7,0.3,0.7);\n    \n    col *= (smoothstep(0.26,.25,(fract(sin(dot(p.x, p.y))*150130.1)))*0.03+0.97)*vec3(1.005,1.,0.99);\n    col *= clamp(pow( 256.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.09 ),0.,1.)*0.3+0.7;\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Mouse state\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float tx = texture(iChannel0, fragCoord.xy/iResolution.xy).x;\n    float rz = max(iMouse.z, tx);\n    \n    if (iFrame < 20)\n        rz = 0.;\n    fragColor = vec4(rz,0.0,1.0,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}