{"ver":"0.1","info":{"id":"ttSXzt","date":"1566752833","viewed":111,"name":"Mandelbulb Jungle","username":"96logda","description":"I wanted to do something creative so I played with my Mandelbulb Tempel shader and got this as a result. :)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbulb","shadow","menger","sponge","mengersponge","jungle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Copyright (c) 2019-08-25 by Angelo Logahd\n//Portfolio: https://angelologahd.wixsite.com/portfolio\n\n#define PI\t\t\t\t\t3.14\n\n#define saturate(x) \t\tclamp(x, 0.0, 1.0)\n#define dot2(x) \t\t\tdot(x, x)\n\n#define MENGER_ITERATIONS\t2\n#define SOFT_SHADOW_STEPS \t16\n\n#define INTERSECT_STEPS\t\t500\n#define INTERSECT_MIN_DIST\t0.0001\n#define INTERSECT_MAX_DIST\t100.0\n\n\nvec2 rotate2D(vec2 p, float angle)\n{\n    float sRot = sin(angle);\n    float cRot = cos(angle);\n    return p * cRot + p.yx * sRot * vec2(-1.0, 1.0);\n}\n\nfloat sdPlane(vec3 p, float height)\n{\n   \treturn p.y - height;\n}\n\n//Based on https://www.shadertoy.com/view/ltfSWn and \n//https://www.skytopia.com/project/fractal/2mandelbulb.html\nfloat mandelbulb(vec3 p)\n{\n    vec3 w = p;\n    float m = dot2(w);\n    float dz = 1.0;\n    for(int i = 0; i < 3; ++i)\n    {\n\t\tdz = 8.0 * pow(sqrt(m), 7.0) * dz + 1.0;\n        float r = length(w);\n        float b = 8.0 * acos(w.y / r);\n        float a = 8.0 * atan(w.x, w.z);\n        w = p + pow(r, 8.0) * vec3(cos(b) * sin(a), sin(b), cos(b) * cos(a));\n        \n        m = dot2(w);\n\t\tif (m > 255.0)\n\t\t{\n            break;\n\t\t}\n    }\t\n    return 0.1 * log(m) * sqrt(m) / dz;\n}\n\nvec4 opU(vec4 d1, vec4 d2)\n{\n     return (d1.x < d2.x) ? d1 : d2;\n}\n\nvec4 map(in vec3 p)\n{\t\n    float ground = sdPlane(p, 1.8);\n    \n    p.xz = mod(p.xz + 1.0, 2.0) - 1.0;\n    p.y  = mod(p.y  + 1.0, 2.0) - 1.0;\n\t\n    float d = mandelbulb(p - vec3(0.0, 0.5, 0.0));\n    vec4 res = vec4(d, 1.0, 0.0, 2.0);\n    \n    return opU(res, vec4(ground, 1.0, 0.0, 1.0));\n}\n\nvec4 intersect(in vec3 ro, in vec3 rd)\n{\n    float t = 0.0;\n    vec4 res = vec4(-1.0);\n    vec4 h = vec4(1.0);\n    for (int i = 0; i < INTERSECT_STEPS; i++ )\n    {\n\t\tif(h.x < INTERSECT_MIN_DIST || t > INTERSECT_MAX_DIST) \n\t\t{\n\t    \tbreak;\n\t\t}\n\t\n        h = map(ro + rd * t);\n        res = vec4(t, h.yzw);\n        t += h.x;\n    }\n\n    if (t > INTERSECT_MAX_DIST) \n    {\n\t\tres = vec4(-1.0);\n    }\n    \n    return res;\n}\n\nfloat softshadow(in vec3 ro, in vec3 rd)\n{\n    float res = 1.0;\n    float t = 0.0;\n    for (int i = 0; i < SOFT_SHADOW_STEPS; ++i)\n    {\n\t\tvec3 pos = ro + rd * t;\n        float h = map(pos).x;\n        res = min(res, float(SOFT_SHADOW_STEPS) * h / t);\n        if(res < 0.0001)\n\t\t{\n\t    \tbreak;\n\t\t}\n        t += clamp(h, 0.01, 0.2);\n    }\n    return saturate(res);\n}\n\nvec3 calcNormal(in vec3 pos)\n{\n    vec3 eps = vec3(0.0001, 0.0, 0.0);\n    vec3 n;\n    n.x = map(pos + eps.xyy).x - map(pos - eps.xyy).x;\n    n.y = map(pos + eps.yxy).x - map(pos - eps.yxy).x;\n    n.z = map(pos + eps.yyx).x - map(pos - eps.yyx).x;\n    return normalize(n);\n}\n\nvec3 GetMaterialColor(in vec3 p, float materialID)\n{\n    if (materialID < 1.5)\n    {\n         vec2 uv = p.xz;\n         vec3 texRGB = texture(iChannel0, abs(sin(uv * 10.0)), 0.0).rgb;\n         return texRGB * 0.2 * vec3(1.0, 0.5, 1.0);\n    }\n    else if (materialID < 2.5)\n    {\n         vec2 uv = p.xy;\n         vec3 texRGB = texture(iChannel0, uv, 0.0).rgb;\n         return texRGB * vec3(0.65, 0.4, 1.0);\n    }\n    return vec3(0.0);\n}\n\nvec3 render(in vec3 ro, in vec3 rd)\n{\n    vec3 color = vec3(0.0);\n    vec4 res = intersect(ro,rd);\n    if(res.x > 0.0)\n    {\n        const vec3 light = vec3(0.0, 0.0, -0.2);\n        \n        vec3 pos = ro + res.x * rd;    \n        vec3 normal = calcNormal(pos);\n        \n        float occ = res.y;\n        float shadow = softshadow(pos + 0.01 * normal, light);\n        \n        vec3 baseColor = GetMaterialColor(pos, res.w);\n        vec3 ambient = vec3(0.2) * baseColor;      \n        vec3 diffuse = baseColor * shadow * occ;\n        \n        color = diffuse + (ambient * occ);\n    }\n\n    return pow(color, vec3(0.4545));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) \n{\n    vec2 p = 2.0 * (fragCoord.xy / iResolution.xy) - 1.0;\n    p.x *= iResolution.x / iResolution.y;\n\t \n    vec2 mouseXY = iMouse.xy / iResolution.xy;\n    \n    // camera\n    vec3 ro = vec3(15.0, 2.9, -2.0);\n    vec3 ww = normalize(vec3(0.0, mouseXY.y * 5.0 * PI, 0.0) - ro); \n    ww.xz = rotate2D(ww.xz, iMouse.x * 2.0 * PI);\n    vec3 uu = normalize(cross(vec3(0.0, 1.0, 0.0), ww));\n    vec3 vv = normalize(cross(ww, uu));\n    vec3 rd = normalize(p.x * uu + p.y * vv + 2.0 * ww);\n    rd.xz = rotate2D(rd.xz, PI * 2.55);\n\n    ro.z -= iTime * 0.1; //Camera movement\n    \n    vec3 color = vec3(0.2);\n    color -= vec3(0.3, 0.3, 0.9);\n \tcolor += render(ro + vec3(0.0, -1.0, 0.0), rd);\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}