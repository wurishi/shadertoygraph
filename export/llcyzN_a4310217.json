{"ver":"0.1","info":{"id":"llcyzN","date":"1531780925","viewed":97,"name":"Regular tilings 1","username":"saidwho12","description":"test","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159265;\nconst float TAU = 2.0*PI;\n\nmat2 rotate(in float theta) {\n\tfloat c = cos(theta), s = sin(theta);\n    return mat2(c, s, -s, c);\n}\n\nfloat polygon(in vec2 p, in vec2 o, in float n, in float theta) {\n\tfloat t = 0.0;\n    \n    for(float i = 0.0; i < n; i++) {\n        float d = (rotate(i/n*TAU + theta)*(p-o)).y-1.0;\n    \tt = max(t, d);\n    }\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 p = (2.0*fragCoord - iResolution.xy) / iResolution.y;\n    float zoom = 4.0;\n    p *= zoom;\n    vec3 col = vec3(0.0);\n    \n    const float MIN_SIDES = 3.0;\n    const float MAX_SIDES = 6.0;\n   \t\n    float N = floor(mod(iTime, MAX_SIDES-MIN_SIDES+1.0))+MIN_SIDES;\n    \n    // sum of angles must equal\n    float alpha = (N-2.0)*PI;\n    \n    // interior angle\n    float beta = alpha/N;\n    \n    // radial angle\n    float gamma = TAU/N;\n    \n    // number of polygons to equal 360.0 degrees\n    float count = floor(TAU/beta);\n    \n    // length of hypotenuse of given half side triangle\n    // c = b/sin(B) * sin(C)\n    float B = 0.5*beta;\n    float c = 1.0/sin(B)*sin(radians(90.0));\n    \n    vec2 o = vec2(cos(B), sin(B))\n        *(c+0.025+0.26*(sin(TAU*iTime)*0.5+0.5))\n        ;\n    \n    float theta = (2.0*PI)/count;\n    //o = rotate(TAU*iTime)*o;\n    \n    for(float i = 0.0; i < count; i++) {\n        float angle = i/float(count);\n    \tfloat d = polygon(p, rotate(TAU*angle)*o, N, mod(i+1.0, 2.0)*theta);\n        col = mix(col, vec3(1,0,0), smoothstep(3.0/iResolution.y*zoom, 0., d - 0.005)*0.9);\n        col = mix(col, vec3(angle*0.9+0.25, 0.54, 0.36), smoothstep(3.0/iResolution.y, 0.0, d));\n    }\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}