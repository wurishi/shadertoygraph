{"ver":"0.1","info":{"id":"WtdBzH","date":"1612256865","viewed":121,"name":"Ray Marcher Simple","username":"ArenaGrenade","description":"A simple Ray marching shader.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define SURF_DIST 0.01\n\nfloat signedDstToSphere(vec3 p, vec4 sphere) {\n    return length(sphere.xyz - p) - sphere.w;\n}\n\nfloat signedDstToBox(vec3 p, vec3 center, vec3 size) {\n    vec3 offset = abs(p - center) - size;\n    float unsignedDst = length(max(offset, 0.0));\n    float dstInsideBox = max(max(min(offset.x, 0.0), min(offset.y, 0.0)), min(offset.z, 0.0));\n    return unsignedDst + dstInsideBox;\n}\n\nfloat smoothMin(float dstA, float dstB, float k) {\n    float h = max(k - abs(dstA - dstB), 0.0) / k;\n    return min(dstA, dstB) - h * h * h * k * 1.0 / 6.0;\n}\n\nfloat GetDist(vec3 p) {    \n    float boxDist = signedDstToBox(p, vec3(-1, 1, 6), vec3(1, 1, 1));\n    float sphereDist = signedDstToSphere(p, vec4(1, 1, 6, 1));\n    float planeDist = p.y;\n    float d = smoothMin(smoothMin(sphereDist, planeDist, 0.0), smoothMin(boxDist, planeDist, 0.0), 0.0);\n    return d;\n}\n\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n    float d0 = 0.0;\n    \n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd * d0;\n        float dS = GetDist(p);\n        d0 += dS;\n        \n        if (d0 > MAX_DIST || dS < SURF_DIST) break;\n    }\n    \n    return d0;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p);\n    vec2 e = vec2(0.01, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p - e.xyy),\n        GetDist(p - e.yxy),\n        GetDist(p - e.yyx)\n    );\n    \n    return normalize(n);\n}\n\nfloat GetLight (vec3 p) {\n    vec3 lightPos = vec3(0, 5, 6);\n    lightPos.xz += vec2(sin(iTime), cos(iTime)) * 2.0;\n    vec3 l = normalize(lightPos - p);\n    vec3 n = GetNormal(p);\n    \n    float diff = clamp(dot(n, l), 0.0, 1.0);\n    \n    float d = RayMarch(p + n * SURF_DIST * 2.0, l);\n    if (d < length(lightPos - p)) diff *= 0.1;\n    \n    return diff;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 1, 0);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    \n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd * d;\n    float diff = GetLight(p);\n    \n    col = vec3(diff);\n\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}