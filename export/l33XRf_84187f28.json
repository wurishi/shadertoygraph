{"ver":"0.1","info":{"id":"l33XRf","date":"1719338393","viewed":123,"name":"Colorful Hexagon Grid","username":"inspirnathan","description":"Example of making a hexagonal grid in Shadertoy. Learn more about how this all works in my tutorial: [url]https://inspirnathan.com/posts/174-interactive-hexagon-grid-tutorial-part-5[/url]","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["grid","tutorial","hexagon","tiling","inspirnathan"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Visit my tutorial to learn how this works: https://inspirnathan.com/posts/174-interactive-hexagon-grid-tutorial-part-5\n\nconst vec2 hexSide = vec2(1.7320508, 1); // proportion between two sides of 30-60-90 triangle\n\n// hexagonal distance\nfloat hexD(in vec2 p)\n{    \n    p = abs(p);\n    \n    return max(dot(p, hexSide * .5), p.y);\n}\n\n// hexagonal coordinates\nvec4 hexC(vec2 p)\n{   \n    // hexagon centers\n    vec4 hc = floor(vec4(p, p - vec2(hexSide.x/2., .5)) / hexSide.xyxy) + .5;\n    \n    // rectangular grids\n    vec4 rg = vec4(p - hc.xy * hexSide, p - (hc.zw + .5) * hexSide);\n    \n    // hexagonal grid and IDs\n    return dot(rg.xy, rg.xy) < dot(rg.zw, rg.zw)\n        ? vec4(rg.xy, hc.xy)\n        : vec4(rg.zw, hc.zw + .5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0);\n    \n    vec2 uv = (fragCoord - iResolution.xy * .5)/iResolution.y;\n    \n    uv *= 5.;\n    \n    vec4 h = hexC(uv);\n\n    // Colorful grid without blue\n    //col = vec3(h.zw * 0.2 + 0.5, 0);\n    \n    // Colorful grid with blue\n    col = vec3(h.zw * 0.2 + 0.5, 1);\n    \n    // Black and white pattern\n    /*\n    if (h.y > 0.) col = vec3(1);\n    else col = vec3(0);\n    */\n\n    // Colorful grid with blue and gradient\n    // Credit: \"aladin\" in the comments\n    //col = vec3(h.zy * 0.2 + 0.5, 1);\n    \n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}