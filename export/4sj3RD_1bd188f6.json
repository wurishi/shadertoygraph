{
    "ver": "0.1",
    "renderpass": [
        {
            "outputs": [],
            "inputs": [
                {
                    "channel": 0,
                    "type": "music",
                    "id": "4df3Rn",
                    "filepath": "/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3",
                    "sampler": {
                        "filter": "linear",
                        "wrap": "clamp",
                        "vflip": "false",
                        "srgb": "false",
                        "internal": "byte"
                    }
                }
            ],
            "code": "// Yuqin Shao, https://github.com/yuqinshao\n// Hao Wu, https://github.com/wuhao1117 \n// GPU Programming and Architecture Hackathon, University of Pennsylvania\n// http://www.seas.upenn.edu/~cis565/\n\nconst float PI\t= 3.14159;\n\nconst int max_step = 250;\n\nvec2 fov = vec2(45.0, 45.0);\t\nvec3 eye = vec3(0.0, 0.0, 5.0);\nvec3 view = vec3(0.0, 0.0, -1.0);\n\nfloat udBox( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\nfloat sdCylinder( vec3 p, vec3 c )\n{\n  return length(p.xz-c.xy)-c.z;\n}\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\nfloat sdCone( vec3 p, vec2 c )\n{\n    // c must be normalized\n    float q = length(p.xy);\n    return dot(c,vec2(q,p.z));\n}\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.yx)-t.y,p.z);\n  return length(q)-t.x;\n}\nvec3 opTwist( vec3 p )\n{\n    float c = cos(20.0*p.z);\n    float s = sin(20.0*p.z);\n    mat2  m = mat2(c,-s,s,c);\n    vec3  q = vec3(m*p.xy,p.z);\n    return q;\n}\nvec3 repeat(vec3 pos, vec3 c)\n{\n\treturn mod(pos, c)-0.5*c;\n}\n\nvec3 opCheapBend( vec3 p )\n{\n    float c = cos(50.0*p.y);\n    float s = sin(50.0*p.y);\n    mat2  m = mat2(c,-s,s,c);\n    vec3  q = vec3(m*p.xy,p.z);\n    return q;\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max(q.x+q.y*0.57735,q.y*1.1547)-h.x);\n}\n\nfloat getDist(vec3 pos,vec2 uv)\n{    \n\t\n\t//c3 q =  repeat(pos,vec3(10.0));\n\tfloat tex = max(length(texture(iChannel0,uv+iTime*vec2(1.0))+texture(iChannel1,uv))*5.0,10.0);\n\t\n\t//tex /= 10.0;\n\tvec3 q =  repeat(pos,vec3(tex));\n\t\n\tfloat s = abs(0.5*sin(iTime) + length(texture(iChannel1,uv)));\n\t//float s = length(texture(iChannel0,uv+iTime*vec2(1.0)));\n\t//return sdTorus(q/s,vec2(.5,2.0))*s;\n\treturn min(sdTorus(q/s,vec2(.5,2.0))*s +sin(2.0*pos.x)*sin(2.0*pos.y)*sin(2.0*pos.z), min(max(-sdHexPrism(q,vec2(1.5,2.0)),sdTorus(q,vec2(1.5, 1.0))),sdTorus(q,vec2(1.5, 0.25)))); \n\n}\n\n\nvec3 getNormal(vec3 pos,vec2 uv)\n{\n  vec3 eps = vec3(0.001, 0.0, 0.0);\n  vec3 nor;\n  nor.x = getDist(pos+eps.xyy,uv) - getDist(pos-eps.xyy,uv);\n  nor.y = getDist(pos+eps.yxy,uv) - getDist(pos-eps.yxy,uv);\n  nor.z = getDist(pos+eps.yyx,uv) - getDist(pos-eps.yyx,uv);\n  return normalize(nor);\n}\nvec3 cameraDir(vec3 eye, vec3 view, vec2 fov, vec2 fragCoord){\n\t\n    vec3 M, H, V, A, B, P;\n\tvec3 up = vec3(0.0, 1.0, 0.0);\n    vec3 dir;\n\t\n    M = eye + view;\n    A = cross(view, up);\n    B = cross(A, view);\n    V = B * (tan(fov[1] / 180.0 * PI) * (length(view) / length(B)));\n    H = A * (tan(fov[0] / 180.0 * PI) * float(iResolution.x)/float(iResolution.y) * (length(view) / length(A)));\n\n    P = M + H * (2.0 * fragCoord.x/(iResolution.x-1.0) - 1.0) + V * (2.0 * (fragCoord.y/(iResolution.y-1.0))-1.0);\n    dir = normalize(P - eye);\n     \n    return dir;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t\n\tvec3 mouse = vec3(iMouse.xy/iResolution.xy - 0.5,iMouse.z-.5);\n\t\n\tvec2 camRot = 1.6 *(vec2(.3,-.05)+vec2(.5,.25)*(iMouse.xy-iResolution.xy*.5)/iResolution.x);\n\teye.yz = cos(camRot.y)*eye.yz + sin(camRot.y)*eye.zy*vec2(-1,1);\n\teye.xz = cos(camRot.x)*eye.xz + sin(camRot.x)*eye.zx*vec2(1,-1);\n\teye = vec3(-10.0 + 5.0*cos(iTime), 10.0 + 5.0*sin(iTime*0.5), 2.0*sin(iTime*0.1));\n\t\n\tvec3 color = vec3(1.0);\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t\n\tvec3 rayDir = normalize(cameraDir(eye, view, fov, fragCoord));\n\t\n\tvec3 currentHead = eye;\n\tfloat stepSize = 0.0;\n\tfloat dist;\n\tfloat travel = 0.0;\n    for(int i = 0; i < max_step; ++i)\n\t{\n\t\tcurrentHead += stepSize*rayDir;\n\t\ttravel += stepSize;\n\t\tstepSize = getDist(currentHead,uv);\n\t\tif(abs(stepSize) < 0.001) \n\t\t{\n\t\t\tcolor = vec3(1.0, 0.0, 0.0);\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tvec3 lightPos = vec3(1.0, 1.0, 1.0);\n\tvec3 normal = currentHead;\n\tnormal = getNormal(currentHead,uv);\n\t\n\t//fragColor = vec4(mix(vec3(0.0), vec3(abs(clamp(dot(normal, lightPos - currentHead), 0.0, 1.0))), exp(-0.01*travel)), 1.0);\n    fragColor = vec4(mix(vec3(0.0), abs(normal), exp(-0.01*travel)), 1.0);\n}\n\n",
            "name": "Image",
            "description": "",
            "type": "image"
        }
    ],
    "flags": {
        "mFlagVR": false,
        "mFlagWebcam": false,
        "mFlagSoundInput": false,
        "mFlagSoundOutput": false,
        "mFlagKeyboard": false,
        "mFlagMultipass": false,
        "mFlagMusicStream": false
    },
    "info": {
        "id": "4sj3RD",
        "date": "1384663032",
        "viewed": 193,
        "name": "Hackathon shader",
        "username": "wuhao1117",
        "description": "Yuqin Shao, Hao Wu",
        "likes": 0,
        "published": 1,
        "flags": 0,
        "usePreview": 0,
        "tags": [
            "hackthon"
        ],
        "hasliked": 0,
        "parentid": "",
        "parentname": ""
    }
}