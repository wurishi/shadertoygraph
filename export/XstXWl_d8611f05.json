{"ver":"0.1","info":{"id":"XstXWl","date":"1462257763","viewed":469,"name":"Raytracing in one weekend","username":"ndeboar","description":"My attempt at Peter Shirley's 'Raytracing in one weekend'. ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raytrace"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rnd(float seed) { return fract(sin(seed++)*43758.5453123); }\n\n\nstruct ray\n{\n\tvec3 orig;\n    vec3 dir;\n};\n    \n    \nstruct sphere\n{\n    vec3 center;\n\tfloat radius;\n    vec3 P;\n    vec3 N;\n};\n    \nsphere spSurfData(sphere inSph, ray inRay, float t)\n{\n    inSph.P = inRay.orig + t * inRay.dir;\n    inSph.N = normalize(inSph.P - inSph.center);\n    return(inSph);\n}\n\n\nfloat hitSphere(sphere inSp, ray r)\n{\n    vec3 oc = r.orig - inSp.center;\n    float a = dot(r.dir, r.dir);\n    float b = 2.0 * dot(oc, r.dir);\n    float c = dot(oc,oc) - inSp.radius*inSp.radius;\n    float discriminant = b*b - 4.0*a*c;\n    if (discriminant < 0.0) {\n        return -1.0;}\n    else {\n        return (-b - sqrt(discriminant)) / (2.0 * a);}\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float seed = iTime + iResolution.y * fragCoord.x / iResolution.x + fragCoord.y / iResolution.y;\n    \n    vec3 buf = vec3(0.0);\n\n    \n    vec3 lowLeftCor = vec3(-2.0, -1.0, -1.0);\n    vec3 orig = vec3(0.0, 0.0, 0.0);\n    vec3 horz = vec3(4.0, 0.0, 0.0);\n    vec3 vert = vec3(0.0, 2.0, 0.0);\n    \n    sphere spheres[2];\n    \n    spheres[0] =  sphere(vec3(0,0,sin(iTime * 2.0) - 2.0), 0.5, vec3(0,0,0), vec3(0,0,0));\n    spheres[1] =  sphere(vec3(0.5,0,-1), 0.5, vec3(0,0,0), vec3(0,0,0));\n\n    \n    \n    ///samples\n    for (int s=0; s < 64; s++)\n    {\n        seed = seed + float (s); \n        float u = (fragCoord.x + rnd(seed) * 2.0) / iResolution.x;\n        float v = (fragCoord.y + rnd(seed+1.0) * 2.0) / iResolution.y;\n        float tmin = 5000.0;\n        \n        ray cRay = ray(orig,lowLeftCor + horz * u + vert * v);\n        //  draws the sky everywhere, should happen if it doesnt hit something\n        vec3 hitCol = mix(vec3(1.0, 1.0, 1.0), vec3(0.1, 0.5, 0.7), 0.5 * ( normalize(cRay.dir).y + 1.0 ) );\n        \n        for (int i = 0; i <=1; i++)\n        {\n            float t = hitSphere(spheres[i], cRay);\n\n            if (t > 0.0 && t < tmin)\n                {\n                    tmin = t;\n                    spheres[i] = spSurfData(spheres[i], cRay, t);\n                    hitCol = (spheres[i].N +1.0) * 0.5;\n                }\n\n        }\n        buf += hitCol;\n\n    }\n    ///end samples\n    \n    fragColor = vec4(vec3(buf)/64.0,1.0);\n}","name":"Image","description":"","type":"image"}]}