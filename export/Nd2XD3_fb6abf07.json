{"ver":"0.1","info":{"id":"Nd2XD3","date":"1621193845","viewed":126,"name":"Bubbles Rising 3","username":"cultureulterior","description":"Fullscreen, can move the mouse","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","raycasting","voxel"],"hasliked":0,"parentid":"sdSSD3","parentname":"SnowRising"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst int MAX_RAY_STEPS = 64;\n\n// sph intersect, credits iq\nvec2 sphIntersect2( in vec3 ro, in vec3 rd, in vec4 sph)\n{\n\tvec3 oc = ro - sph.xyz;\n\tfloat b = dot( oc, rd );\n\tfloat c = dot( oc, oc ) - sph.w*sph.w;\n\tfloat h = b*b - c;\n\tif( h<0.0 ) return vec2(-1.0,-1.0);\n    h = sqrt( h );\n    return vec2(-b - h, -b + h);\n}\n\n// credits anastadunbar\nfloat rand(float co) { return fract(sin(co*(91.3458)) * 47453.5453); }\nfloat rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }\nfloat rand(vec3 co){ return rand(co.xy+rand(co.z)); }\nfloat randrise(ivec3 co,float time){ return rand(vec3(co.x,co.y+int(time),co.z));}\n\n//mine\nfloat bubblesRising( vec3  rayDir, vec3  rayPos, \n                     float iTime)  \n{\n     \n    float bubble = -iTime*2.0;\n    float fbubble = fract(bubble);\n    float ibubble = floor(bubble);\n    // instead of offsetting the snow rise inside the voxel trace, we offset the ray\n    vec3 offset = vec3(0,fract(bubble),0); \n    rayPos+=offset;\n    vec3 orp = rayPos;\n    // branchless voxel tracing initialization, credits fb39ca4 dda\n\tivec3 mapPos = ivec3(floor(rayPos + 0.0));\n\tvec3 deltaDist = abs(vec3(length(rayDir)) / rayDir);\n\tivec3 rayStep = ivec3(sign(rayDir));\n\tvec3 sideDist = (sign(rayDir) * (vec3(mapPos) - rayPos) + (sign(rayDir) * 0.5) + 0.5) * deltaDist; \n\tbvec3 mask;\n    float mist = 0.0;\n\tfor (int i = 0; i < MAX_RAY_STEPS; i++) {            \n            // branchless voxel tracing, credits fb39ca4 dda\n            mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));\t\n\t\t\tsideDist += vec3(mask) * deltaDist;\n\t\t\tmapPos += ivec3(vec3(mask)) * rayStep;\n            vec2 randomness = vec2(randrise(mapPos,floor(bubble)),ibubble);\n            if(randomness.x>0.9)\n                 {\n                    // found a bubble in our voxel- where is it?\n                    vec3 position=vec3(rand(vec2(mapPos.xz)),rand(vec2(mapPos.xz)+vec2(10203,2021)),rand(vec2(mapPos.xz)+vec2(121,-221)))*0.8 - 0.4;\n                    // disable popping at max_ray_steps\n                    float fade = smoothstep(0.0,10.0,float(MAX_RAY_STEPS-i))*0.1;\n                    // offset snowflake to center, and randomize\n                    vec3 msp = vec3(mapPos)+vec3(0.5,0.5,0.5)+position;\n                    // intersect with sphere to get simple bubble- want to make this better\n                    vec2 t = sphIntersect2(orp,rayDir,vec4(msp,(randomness.x-0.85)*1.5));\n                    mist += abs(t.x-t.y) * fade;\n                 }\n\t}             \n    return mist;\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //camera setup, credits iq\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m =                iMouse.xy      /iResolution.xy;\n    vec3 ro = 4.0*normalize(vec3(sin(3.0*m.x), 0.8*m.y, cos(3.0*m.x))) - vec3(0.0,0.1,0.0);\n\tvec3 ta = vec3(0.0, -1.0, 0.0);\n    mat3 ca = setCamera( ro, ta, 0.07*cos(0.25*iTime) );\n    vec3 rd = ca * normalize( vec3(p.xy,1.5));\n\n    vec3 col = vec3(0.0);\n    float h=bubblesRising(rd, ro, iTime);\n    if( h>0.0 )\n    {\n            col = mix( col, vec3(0.2,0.5,1.0), h );\n            col = mix( col, 1.15*vec3(1.0,0.9,0.6), h*h*h );\n    }\n    col = sqrt( col )*1.3;\n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}