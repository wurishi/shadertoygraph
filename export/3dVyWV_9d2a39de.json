{"ver":"0.1","info":{"id":"3dVyWV","date":"1603798024","viewed":110,"name":"Checkerboard and Mirror Sphere","username":"diabolix17","description":"Infinite checkerboard and sphere rendered with very simple raytracing","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 intersect_plane(vec3 origin, vec3 ray){\n    \n    if(ray.y == 0.0){\n        return vec3(0.0,0.0,1.0);\n    }\n    float a = -origin.y/ray.y;\n    if(a <= 0.0){\n        return vec3(0.0,1.0,1.0);\n    }\n    ivec2 grid_coord = ivec2(floor((origin + a*ray).xz));\n    int grid = abs(grid_coord.x % 2) ^ abs(grid_coord.y % 2);\n    return (grid != 0) ? vec3(0.0, min(10.0/a, 1.0), 0.0) : vec3(0.0, 0.0, 0.0);\n}\n\nvec3 intersect_sphere(vec3 origin, vec3 ray){\n    \n    ray = normalize(ray);\n    //vec3 center = vec3(cos(iTime), cos(0.5*iTime) + 2.0, sin(iTime) + 3.0);\n    vec3 center = vec3(4.0*(iMouse.xy / iResolution.xy - vec2(0.5)) + vec2(0.0, 1.0), 2.0*iTime + 2.5);\n    //float radius = 0.5*cos(iTime) + 0.6;\n    float radius = 1.0;\n    center.y = max(center.y, radius);\n\n    float a = 1.0;\n    float b = 2.0 * dot(ray, origin - center);\n    float c = dot(origin - center, origin - center) - radius*radius;\n    float disc = b*b - 4.0*a*c;\n    if(disc <= 0.0){\n        return intersect_plane(origin, ray);\n    }\n    float s = (-b - sqrt(disc))/(2.0*a);\n    if(s <= 0.0){\n        s = (-b + sqrt(disc))/(2.0*a);\n        if(s <= 0.0){\n            return intersect_plane(origin, ray);\n        }\n    }\n    vec3 intersection = origin + s*ray;\n    vec3 normal = normalize(intersection - center);\n    vec3 ray2 = 2.0*dot(normal, -ray)*normal + ray;\n    return 0.6*intersect_plane(intersection, ray2);\n}\n\n#define NUM_SAMPLES 4\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    //uv = floor(300.0*uv)/300.0;\n\n    mat3 rot = mat3(vec3(cos(iTime), 0.0, -sin(iTime)), vec3(0.0, 1.0, 0.0), vec3(sin(iTime), 0.0, cos(iTime)));\n    vec3 ray = vec3(2.0*(uv - vec2(0.5)), 1.0);\n    //ray = rot*ray;\n    //vec3 origin = vec3(0.0, cos(iTime) + 2.0, 0.0);\n\tvec3 origin = vec3(0.0, 1.5, 2.0*iTime);\n    \n    vec2 pixeldim = vec2(1.0/iResolution.x, 1.0/iResolution.y);\n    vec3 ray_curr = ray;\n    vec3 col = vec3(0.0);\n    for(int i = 0; i < NUM_SAMPLES; i++){\n        for(int j = 0; j < NUM_SAMPLES; j++){\n     \n        \tcol += intersect_sphere(origin, ray_curr);\n            ray_curr += vec3(pixeldim.x/float(NUM_SAMPLES), 0.0, 0.0);\n        }\n        ray_curr.x = ray.x;\n        ray_curr += vec3(0.0, pixeldim.y/float(NUM_SAMPLES), 0.0);\n    }\n    col /= float(NUM_SAMPLES*NUM_SAMPLES);\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}