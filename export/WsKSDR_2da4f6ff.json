{"ver":"0.1","info":{"id":"WsKSDR","date":"1573856884","viewed":84,"name":"PacMan","username":"Sorangon","description":"Here is an animated pacman shader, the first time I create a shader with shadertoy (I mainly use CG in Unity) !","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["videogame"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nfloat saturate(float x){\n    return clamp(x,0.0,1.0);\n}\n\n//Screen space UV\nvec2 SSUV(vec2 uv){\n    return vec2(uv.x/ iResolution.x, uv.y/ iResolution.y);\n}\n\nfloat Circle(float radius, vec2 center, vec2 uv){\n    vec2 centeredUV = uv - center;\n    centeredUV.x *= iResolution.x/iResolution.y;\n    float circle = floor((1.0 - length(centeredUV)) + radius);\n    \n    return saturate(circle);\n}\n\n\nfloat Mouth(vec2 uv, vec2 center){\n    vec2 coordinate = uv - center;\n    float mouth = atan(coordinate.y, coordinate.x) / PI;\n    mouth = 1.0 - abs(mouth);\n    \n    float t = iTime * 30.0;\n    \n    float mouthPercentage = 0.38;\n    mouth = floor(mouth + (sin(t) + 1.0) / 2.0 * mouthPercentage);\n    \n    return mouth;\n}\n    \n\nfloat Balls(vec2 fragCoord, float scrolling, float spacing, float scale){\n    vec2 scrollinUV = vec2(fragCoord.x + scrolling, fragCoord.y);\n    \n    float heightMiddle = (iResolution.y/2.0) - scale/2.0;\n    \n    float circleSize = scale;\n    vec2 circleGrid = vec2(fract(scrollinUV.x / circleSize) - 0.5, fract((scrollinUV.y - heightMiddle)/ circleSize) - 0.5);\n    float c = 1.0 - length(circleGrid) * 2.0;\n    \n    float halfHeight = (fragCoord.y / iResolution.y) / 2.0;\n    float halfMask = (fragCoord.y - heightMiddle) / circleSize;\n    float ballsMask = -2.0 * (halfMask * halfMask) + 2.0 * halfMask;\n    ballsMask = ceil(saturate(ballsMask) * 2.0);\n    c = ceil(saturate(ballsMask * c));\n    \n    \n    \n    float verticalGrid = 1.0 - scrollinUV.x / circleSize;\n    verticalGrid /= spacing;\n    \n    verticalGrid = fract(verticalGrid);\n    verticalGrid = ceil(saturate(1.0 - (verticalGrid * spacing)));\n    c *= verticalGrid;\n    \n    float halfWidthMask = ceil((fragCoord.x / iResolution.x) - 0.25);\n    \n    return halfWidthMask * c;\n} \n\n\nvec4 Background(vec2 fragCoord){\n    float horizontalSineVal = SSUV(fragCoord).y * PI;\n    float background = sin(horizontalSineVal * 30.0) + 1.0 - sin(horizontalSineVal);\n    background = max(background, 0.0);\n              \n    float verticalSineVal = SSUV(fragCoord).x * 50.0 + iTime * 18.0;\n    float parralax = (1.0 - sin(verticalSineVal * PI) * 1.0);\n    parralax *= ceil(1.0 - fract((verticalSineVal - 1.0)/ 14.0)* 14.0);\n    parralax -= sin(horizontalSineVal);\n    parralax = saturate(parralax);\n    \n    return vec4(0.0, 0.0, 0.15, 1.0) * (max(background, parralax));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    float t = iTime * 6.0;\n    vec2 imageUV = fragCoord - vec2(sin(t) * 15.0, cos(t * 0.5) * 5.0) - vec2(-190,0.0);\n    vec2 screenSpaceUV = SSUV(imageUV);\n    vec4 color = vec4(1.0, 0.95, 0.0, 0.0);\n    \n    vec4 circle1  = vec4(vec3(Circle(0.3, vec2(0.5, 0.5), screenSpaceUV)), 1.0) * color;\n    \n    float eye = Circle(0.05, vec2(0.44, 0.6), screenSpaceUV);\n    float innerEye = Circle(0.04, vec2(0.44, 0.6), screenSpaceUV);\n    \n    \n    float mouth = Mouth(screenSpaceUV, vec2(0.5, 0.5));\n    \n    vec4 pacMan = circle1 - eye * 0.7 - innerEye * 0.15 - mouth;\n    pacMan = clamp(pacMan,0.0,1.0);\n    \n    float pacManMask = ceil(length(pacMan));\n    \n    vec4 balls = vec4(vec3(Balls(fragCoord, iTime * 1200.0,4.0, 70.0)), 0.0);\n    balls *= color;\n    balls *= saturate(1.0 - pacManMask);\n    \n    vec4 result = pacMan + balls;\n    \n    //Calculate background\n    if(length(result) <= 0.0){\n        result = Background(fragCoord);\n    }\n    \n    fragColor = result;\n    \n}","name":"Image","description":"","type":"image"}]}