{"ver":"0.1","info":{"id":"mtKyD3","date":"1700750579","viewed":145,"name":"Butterfly Blaze","username":"MV10","description":"Three-way mix of phreax's butterfly effect, the related [url=https://www.shadertoy.com/view/cdl3Rs]version 2[/url], and Andre's very cool and useful [url=https://www.shadertoy.com/view/MscGWX]fire effect[/url]. This one needs audio reactivity...","likes":16,"published":1,"flags":32,"usePreview":0,"tags":["raymarching","postprocessing","edgedetection","kifs","effects"],"hasliked":0,"parentid":"3tcBz7","parentname":"[phreax]  butterfly effect"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// The third and final output stage of Andre's fire effect.\n\n// Some parts of this look better if channel 0 points to buffer B,\n// which is the desaturated version. But other parts are too dark.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = max(texture(iChannel0,uv),texture(iChannel1,uv+0.002));\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n// BufferA is a combination of elements of phreax's butterfly effect shaders\n\n#define PI 3.141592\n#define SIN(x) (sin(x)*.5+.5)\n#define hue(v) ( .6 + .6 * cos( 6.3*(v) + vec3(0,23,21) ) )\n\nfloat tt;\n\nmat2 rot2(float a) { return mat2(cos(a), sin(a), -sin(a), cos(a)); }\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 getPal(int id, float t) \n{\n    id = id % 7;\n    vec3          col = pal( t, vec3(.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,-0.33,0.33) );\n    if( id == 1 ) col = pal( t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.10,0.20) );\n    if( id == 2 ) col = pal( t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.3,0.20,0.20) );\n    if( id == 3 ) col = pal( t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,0.5),vec3(0.8,0.90,0.30) );\n    if( id == 4 ) col = pal( t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,0.7,0.4),vec3(0.0,0.15,0.20) );\n    if( id == 5 ) col = pal( t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(2.0,1.0,0.0),vec3(0.5,0.20,0.25) );\n    if( id == 6 ) col = pal( t, vec3(0.8,0.5,0.4),vec3(0.2,0.4,0.2),vec3(2.0,1.0,1.0),vec3(0.0,0.25,0.25) );\n    \n    return col;\n}\n\nfloat curve(float t, float d) {\n  t/=d;\n  return mix(floor(t), floor(t)+1., pow(smoothstep(0.,1.,fract(t)), 10.));\n}\n\nvec3 transform(vec3 p) {\n    float a = PI*.5*curve(iTime, 4.);\n    p.xz *= rot2(a);\n    p.xy *= rot2(a);\n    return p;\n}\n\nfloat map(vec3 p) {\n\n    vec3 bp = p;\n\n    p = transform(p);\n\n    p.x = abs(p.x) -.5*SIN(tt*.5);\n    p.y = abs(p.y) -.9*SIN(tt*.8);\n    p.y -= 0.1;\n    p.y = abs(p.y) -.1;\n    p.x -= 0.2;\n    p.x = abs(p.x) -.9; \n    p.z = abs(p.z) -.5;\n\n    p.zy -= 0.5;\n    p.xy *= rot2(0.1*tt);\n    p.zy *= rot2(-.04*tt);\n\n    float r1 = 1.0;\n    float r2 = mix(0.03, 0.3, SIN(iTime));\n    \n    vec2 cp = vec2(length(p.xz) - r1, p.y);\n    vec2 cp2 = cp;\n    \n    float a = atan(p.z, p.x);\n    cp *= rot2(3.*a+tt);\n    cp.x = abs(cp.x) - .3;\n    cp *= rot2(3.*a);\n\n    float n = 10.;\n    for(float i = 0.; i< n; i++) {\n    \n        cp.y = abs(cp.y) -.05*(.5*sin(tt)+.9);\n        \n        cp *= rot2(0.1*a*sin(0.1*iTime));\n        cp -= i*0.01/n;\n    }\n\n    float d = length(cp) - r2;\n  \n    return .4*d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    float cz = -5.+1.5*sin(curve(iTime, 4.));\n    \n    vec3 ro = vec3(0, .0, cz),\n         rd = normalize(vec3(uv, .7));\n         \n    vec3 p = ro;\n    vec3 col;\n    \n    float t, d = 0.1;\n    \n    tt = iTime;  \n    tt = tt+2.*curve(tt, 2.);\n    \n    float acc = 0.0;\n    for(float i=.0; i<200.; i++) {\n    \n        d = map(p);\n        \n        if(d < 0.0001 || t > 100.) break;\n        \n        d = max(abs(d), 0.009);\n        acc += 0.07;\n        \n        t += d;\n        p += rd*d;\n    }\n       \n    if(d < 0.001) {\n        col += acc*clamp(1., 0., 1.2*abs(cz)/(t*t));\n          \n        float sl = dot(p,p);\n        col *= 0.5*getPal(4, 1.-0.1*sqrt(sl)+0.05*p.z+.25*iTime+curve(iTime, 8.));\n    }\n    \n    col = pow(col, vec3(1.2))*1.4;\n   \n    fragColor = vec4(col, 1.0 - t * 0.3);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\n// BufferB is the first step in Andre's fire effect shader.\n\n// The original version uses the black & white Lustre Cream video as input.\n// We apply a slight (randomized) desaturation to the primary shader because\n// in most cases that makes the flame effect much stronger and more obvious.\n\n// My standalone music viz program can generate random-value uniforms.\n#define grayscaleFactor 0.65\n\nvec4 generic_desaturate(vec3 color, float factor)\n{\n\tvec3 lum = vec3(0.299, 0.587, 0.114);\n\tvec3 gray = vec3(dot(lum, color));\n\treturn vec4(mix(color, gray, factor), 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 px = 4.0/vec2(640.0,360.0);\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n    vec4 grayscale = generic_desaturate(texture(iChannel0, uv).rgb, grayscaleFactor); \n    vec4 tex = pow(grayscale * 1.3, vec4(1.8));\n\n    float d = 1.0-smoothstep(0.0,0.08,length(tex));\n    if (d > 0.0)\n    {\n        uv -= 0.5*px;\n        vec4 tex2 = texture(iChannel1,uv);\n        uv += px;\n        tex2 += texture(iChannel1,uv);\n        uv.x -= px.x -.018 *sin(iTime*4.1+tex2.r);\n        uv.y += px.y +.015 * cos(iTime*4.1+tex2.g);\n        tex2 += texture(iChannel1,uv);\n        uv.y -= px.y;\n        tex2 += texture(iChannel1,uv);\n        tex2 /= 4.013;\n        tex2 = clamp(tex2*1.02-0.012,0.0,1.0);\n        tex = max(clamp(tex*(1.0-d),0.0,1.0),mix(tex,tex2,smoothstep(-1.3,0.23,d)));\n     }\n        \n\tfragColor = tex;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"\n// BufferC is the second step in Andre's fire effect shader. No changes.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 px = 2.5 / vec2(640.0,360.0);\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 tx = texture(iChannel1,uv);\n    float dist = distance(tx,texture(iChannel1,uv+px));\n    px.y *= -1.0;\n    dist += distance(tx,texture(iChannel1,uv+px));\n    px.x *= -1.0;\n    dist += distance(tx,texture(iChannel1,uv+px));\n    px.y *= -1.0;\n    dist += distance(tx,texture(iChannel1,uv+px));\n    uv *= mat2(0.999,0.001,-0.001,0.999);\n\tfragColor = texture(iChannel0,uv*0.995+0.0025)*vec4(0.93,0.91,0.0,0.0)+\n        vec4(smoothstep(0.05,1.3,dist),smoothstep(0.1,2.8,dist),0.0,1.0)*.245;\n}","name":"Buffer C","description":"","type":"buffer"}]}