{"ver":"0.1","info":{"id":"dtVfWD","date":"1711396849","viewed":112,"name":"water polo","username":"totan","description":"polo world","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat hash(float n){return fract(sin(n) * 7343.54);}\nvec4 hash(vec4 n)  {return fract(sin(n) * 7343.54);}\n\nfloat noise(in vec3 x)\n{\n    #if 1\n    {\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f * f * (3.0 - 2.0 * f);\n    float n = p.x + p.y * 57.0 + 113.0 * p.z;\n    \n    vec4 RES1=vec4(0.0,57.0,113.0,170.0);\n    RES1+=n;\n    \n    float res = mix(mix(mix(hash(n +   0.0), hash(n +   1.0), f.x),\n                        mix(hash(n +  57.0), hash(n +  58.0), f.x), f.y),\n                    mix(mix(hash(n + 113.0), hash(n + 114.0), f.x),\n                        mix(hash(n + 170.0), hash(n + 171.0), f.x), f.y), f.z);\n    return res;\n    }\n    #else\n    {\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f * f * (3.0 - 2.0 * f);\n    float n = p.x + p.y * 57.0 + 113.0 * p.z;\n    vec4 RES1=vec4(0.0,57.0,113.0,170.0);\n    RES1+=n;\n    RES1=mix(hash(RES1),hash(RES1+1.),f.x);\n    RES1.xy=mix(RES1.xy,RES1.zw,f.y);\n    return  mix(RES1.x,RES1.y,f.z);\n    }\n    #endif\n}\n\nconst mat3 m = mat3( 0.00,  0.80,  0.60,\n                  -0.80,  0.36, -0.48,\n                  -0.60, -0.48,  0.64);\n\nfloat FBM(vec3 p)\n{\n    \n    float f = 0.5000 * noise(p); p = m * p * 2.02;\n    f += 0.2500 * noise(p); p = m * p * 2.03;\n    //f += 0.1250 * noise(p);\n    return f;\n}\n#define D(a,b,c)  d=max(d,dot(p0-(a), normalize(cross(c-(a),b-(a)))));// dot(...)点p到abc所在面的距离\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\nfloat MAP(in vec3 p0){\n    #if 1\n    \n    p0+=iTime;\n    vec3 mm=p0;\n    //p0.xyz+=fract(sin(mm.xzy-mm.zxy-mm.xyz)*346.43)*1.;\n    vec3 p=mod(p0,8.)-4.;\n    mm-=p;\n    p.xz+=fract(sin(mm.xy-mm.zy-mm.xz)*.43)*2.;\n    float R=length(p)-2.0+FBM(p+iTime)*.6;\n    return R;\n    \n    #else\n    {\n    p0=mod(p0-5.,10.)-5.;\n    p0+=2.;\n    //float t=iTime; p0.xy*=rot(t*.3),p0.yz*=rot(t); p0.zx*=rot(t*.5);\n    float PI =3.1415926535,sz=2.,d=-sz,i,j;\n    for(i=j=1.;i<5.;i++)p0.xz*=rot(-PI / j),p0.z=abs(p0.z),j+=j;\n    vec3 a,b,c,e,f,g,h,s,u,v,w;\n    a.x=e.y=sz;            // vec3(sz,0,0) vec3(0,sz,0)\n    b = a, b.xz *=rot(PI/8.);\n    c = b*.5+e*.35;//.5\n    s = c,s.z=-s.z;\n    f = a*.93-e*.13;\n    g = b*.85-e*.25;\n    h=g, h.z=-h.z;\n    u = a*.5-e*.4;\n    v = u, v.xz*=rot(PI/4.);\n    w.y=u.y;\n    D(a,c,s)//d=max(d,dot(p-(a), N(cross(c-(a),b-(a)))));\n    D(a,b,c)\n    D(b,a,g)\n    D(h,g,f)\n    D(g,u,v)\n    D(u,w,v)\n    return max(d, length(p0.xz)-sz*.98);\n    }\n    #endif\n}\n\nvec3 getNormal(vec3 p)\n{\n    const float eps = 0.0001;\n    #if 1\n    vec2 e = vec2(eps, 0);    \n    return normalize(\n        vec3(MAP(p + e.xyy) - MAP(p - e.xyy),\n             MAP(p + e.yxy) - MAP(p - e.yxy),\n             MAP(p + e.yyx) - MAP(p - e.yyx)));\n    #else\n    vec2 e = vec2(eps, 0);    \n    return normalize(\n        vec3(MAP(p + e.xyy),\n             MAP(p + e.yxy),\n             MAP(p + e.yyx) )-MAP(p));\n    #endif\n            \n}\n\nvec3 getRefract(vec3 d,vec3 n,float m){\n    //vec3 n = getNormal(p);\n    const float np=1.2;\n    const float np2=1./np;\n    return refract(d,n,m>0.? np:np2);\n    //return reflect(d,n);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord*2.0-iResolution.xy)/iResolution.y;\n    vec3 dir = vec3(uv.x,uv.y,5.0),dir2=dir;\n    dir = normalize(dir);\n    vec3 pos = vec3(0.0, 0.0, -10.0);\n    \n    vec3 col = vec3(0.2,0.5,1.0);\n    vec3 total_col=vec3(0.0);\n    float i=0.0,d,total_d = 0.0,total_m=0.0;\n    \n    float m=1.;\n    \n    for(; i<140.0; i++){\n        d=min(MAP(pos),1.);\n        if(d<0.0){\n            if(d*m<0.0){\n                vec3 n = getNormal(pos);\n                dir2 = dir;\n                dir = getRefract(dir,n,m);\n                \n                m*=dot(dir2,n) < dot(dir,-n) ? -1.:1.;\n            }\n            total_col+=(col*total_d*0.02*0.04);\n            \n            d=abs(d);\n        }\n        total_d += (d+0.02);\n        pos += dir*(d+0.02);\n        \n    }\n    \n    //vec3 fog = vec3(1.0,1.0,1.0)*(i/60.0)*.5;\n    fragColor = vec4(total_col,1.0);\n}","name":"Image","description":"","type":"image"}]}