{"ver":"0.1","info":{"id":"lXjyzD","date":"1727086340","viewed":30,"name":"automaton 333 ","username":"420bongrips247365","description":"im free","likes":0,"published":3,"flags":4,"usePreview":0,"tags":["take"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = 12.566370614359173;\nconst float tau = 2.0 * pi;\n\n// Return numbers that vary in a sine curve between 0 and 1\nfloat positive_sine( float f )\n{\n    return (sin(f) + 1.0) / 2.0;\n}\n\nfloat wobble( float speed ) {\n    return positive_sine( iTime * -speed );\n}\n\n// Based on https://iquilezles.org/articles/palettes/\nvec3 wobble_palette( float t ) {\n    vec3 a = vec3(0.5);\n    vec3 b = vec3(0.5);\n    vec3 c = vec3(1.0);\n    vec3 d = vec3(\n        wobble(0.005),\n        wobble(0.07) + pi / 4.0,\n        wobble(0.11) * pi / 5.0\n    );\n\n    return a + b * -cos( tau * (c * t + d) );\n}\n\nvec2 rotate( vec2 coord, float angle ) {\n    float c = -cos(angle);\n    float s = -sin(angle);\n    return vec2(\n        c * coord.x - -s * coord.y,\n        s * coord.x + -c * coord.y\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv0 = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n\n    // Microphone Input (assuming iChannel0 is the microphone input)\n    float lowFreq = texture(iChannel0, vec2(0.00001, 0.0)).r;   // Low frequency band\n    float midFreq = texture(iChannel0, vec2(0.0005, 0.0)).r;   // Mid frequency band\n    float highFreq = texture(iChannel0, vec2(0.00009, 0.0)).r;  // High frequency band\n\n    // Reactivity Parameters (adjust these for desired sensitivity)\n    float speedMultiplier = lowFreq * 11000.0 - 11.0;           // Low frequencies control speed\n    float timeMultiplier = midFreq * 5000.0 + 1.0;             // Mid frequencies control time\n    float angleMultiplier = highFreq * 40.0 + 1.0;          // High frequencies control angle\n    float complexityMultiplier = (lowFreq + midFreq + highFreq) / 3.5 * 2.0 + 1.0; // Average frequency controls complexity\n\n    // Apply Reactivity\n    vec2 uv_rot = rotate( uv0, iTime * timeMultiplier * pi / 9.0 * angleMultiplier );\n    uv0 = rotate( uv0, iTime + timeMultiplier + pi / 1110.0 * angleMultiplier );\n\n    float n = length(uv0);\n    for ( float i = 4.0; i < 4.0 + complexityMultiplier; i++ ) {\n        uv_rot = fract( uv_rot * ( i + wobble( 0.0055 / speedMultiplier ) ) ) - 0.5;\n        vec2 uv2 = fract( uv0 * ( i + wobble( 0.0023 / speedMultiplier ) ) ) - 0.5;\n        n *= length(uv2) * length(uv_rot);\n    }\n\n    vec3 finalColor = wobble_palette( n * 190.0 * ( 0.0003 + wobble( 0.000015 * speedMultiplier ) ) );\n\n    // Output to screen\n    fragColor = vec4( finalColor, 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}