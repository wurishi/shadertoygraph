{"ver":"0.1","info":{"id":"7sK3zK","date":"1631820202","viewed":123,"name":"Fork 4D raymarc ArthMax 952","username":"ArthMax","description":"Objects of scene are completelly fixed, no animation of geometry, only camera moving in 4D space.\n","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","4d","geometry","tesseract","3sphere"],"hasliked":0,"parentid":"4sjGWw","parentname":"4D raymarching"},"renderpass":[{"inputs":[],"outputs":[],"code":"// Created by sebastien durand - 2013 \n// Modified by ArthMax - 2021 \n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Based on iq famous exemple\n// More info here: https://iquilezles.org/articles/distfunctions\n\n // Change this to improve quality (3 is good)\n#define ANTIALIASING 3\n\n#define RAY_STEP 200\n//#define DRAWAXES\n\n                   float minIn(in vec4 r){\n                        float m=r.x;\n                         if(m>r.y)m=r.y;\n                         if(m>r.z)m=r.z;\n                         if(m>r.w)m=r.w;\n                          return m;\n                       }   \n                   float maxIn(in vec4 r){\n                        float M=r.x;\n                         if(M<r.y)M=r.y;\n                         if(M<r.z)M=r.z;\n                         if(M<r.w)M=r.w;\n                          return M;\n                       }       \n            \n                float sdPlane( vec4 p ) {\n                \treturn p.y;\n                }\n                \n                // 3-sphere (4d sphere)\n                float sdSphere( vec4 p, float r ) {\n                    return length(p)-r;\n                }\n                \n                float sdEllipsoid( in vec4 p, in vec4 r) {\n                    return (length(p/r) - 1.) * minIn(r);\n                }\n                \n                // tesseract (4d hypercube)\n                float sdTesseract( vec4 p, vec4 b ) {\n                  vec4 d = abs(p) - b;\n                   return min(maxIn(d),0.0) + length(max(d,0.0));\n                }\n                \n                float udRoundTesseract( vec4 p, vec4 b, float r) {\n                  return length(max(abs(p)-b,0.0))-r;\n                }\n                \n                float sdCapsule( vec4 p, vec4 a, vec4 b, float r ) {\n                \tvec4 pa = p - a;\n                \tvec4 ba = b - a;\n                \t float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n                \t  return length( pa - ba*h ) - r;\n                }\n                \n                \n                float sdCylinder(in vec4 p,in vec2 h ) {\n                  return max(length(p.xzw)-h.x, abs(p.y)-h.y );\n                }\n                \n                float sdCone(in vec4 p,in vec2 h ) {\n                  return max( length(p.xzw)-h.x, abs(p.y)-h.y) - h.x*p.y;\n                }\n                \n                // http://eusebeia.dyndns.org/4d/cubinder\n                float sdCubicalCylinder(vec4 p, vec3 rh1h2) {\n                \tvec3 d = abs(vec3(length(p.xz), p.y, p.w)) - rh1h2;\n                \t return min(max(d.x,max(d.y,d.z)),0.) + length(max(d,0.));\n                }\n                \n                // http://eusebeia.dyndns.org/4d/duocylinder\n                float sdDuoCylinder( vec4 p, vec2 r1r2) {\n                  vec2 d = abs(vec2(length(p.xz),length(p.yw))) - r1r2;\n                   return min(max(d.x,d.y),0.) + length(max(d,0.));\n                }\n                \n                \n                float opS( float d1, float d2 ) {\n                    return max(-d2,d1);\n                }\n                \n                vec2 opU( vec2 d1, vec2 d2 ) {\n                \treturn (d1.x<d2.x) ? d1 : d2;\n                }\n                \n                vec4 opRep( vec4 p, vec4 c ) {\n                    return mod(p,c)-0.5*c;\n                }\n                \n                vec4 opRepW(vec4 p, float c) {\n                \tp.w = mod(p.w,c)-0.5*c;\n                     return p;\n                }\n                \n                vec4 opTwist( vec4 p ) {\n                    float  c = cos(10.0*p.y+10.0);\n                    float  s = sin(10.0*p.y+10.0);\n                     mat2   m = mat2(c,-s,s,c);\n                      return vec4(m*p.xz,p.y, p.w);\n                }\n            \n            //----------------------------------------------------------------------\n            \n            vec2 map( in vec4 pos ) {\n                vec2 res = vec2(99999.,0);\n            \n                 #ifdef DRAWAXES\n                 //\tpos.xy *= mat2(c2,-s2,s2,c2);\n                 \t\n                 \tres = opU( res, vec2( sdCapsule(   pos,vec4(0), vec4(10.,0.,0.,0.), 0.05  ), 31.9 ) );\n                 \tres = opU( res, vec2( sdCapsule(   pos,vec4(0), vec4(0.,10.,0.,0.), 0.05  ), 41.9 ) );\n                 \tres = opU( res, vec2( sdCapsule(   pos,vec4(0), vec4(0.,0.,10.,0.), 0.05  ), 51.9 ) );\n                 \tres = opU( res, vec2( sdCapsule(   pos,vec4(0), vec4(0.,0.,0.,10.), 0.05  ), 61.9 ) );\n                 #else\n                 \tres = vec2(sdPlane(pos),1.);\n                 #endif\n                 \n                    res = opU( res, vec2(sdCubicalCylinder(pos-vec4(-.5,.3, -.8, .1), vec3(.2,.3,.2)), 60.9 ) );\n                    res = opU( res, vec2(sdDuoCylinder( pos-vec4(-.2,.3, -.2, -.1), vec2(.2,.3) ), 53.9 ) );\n                    \n                    \n            \t    res = opU( res, vec2( sdTesseract(       pos-vec4( 1.0,0.25, 0.1, 0.2), vec4(0.25) ), 3.0 ) );\n                    \n            \t    res = opU( res, vec2( sdCapsule(   pos,vec4(-1.3,0.20,-0.1, -.3), vec4(-1.0,0.20,0.2,1.5), 0.1  ), 31.9 ) );\n            \t    res = opU( res, vec2( sdCylinder(  pos-vec4( 1.0,0.30,-1.0, -.5), vec2(0.1,0.2) ), 4.0 ) );\n            \t//res = opU( res, vec2( sdCone(      pos-vec4( 1.0,0.30,-1.0, 0.10), vec2(0.1,0.4) ), 4.0 ) );\n            \t\n            \t\n            \tvec4 posPeriodicSphere=pos; \n                 float d=2.0;\n                 posPeriodicSphere.w = mod(pos.w,d)-.5*d;\n                  res = opU( res, vec2( sdSphere(posPeriodicSphere-vec4( 0.0,0.25, 0.0, 0.25), 0.25 ), 46.9 ) );\n              //  res = opU( res, vec2( sdEllipsoid(pos-vec4( 0.0,0.25, 0.0, 0.25), vec4(.25,.1,.15,.3) ), 46.9 ) );\n              \n                vec4 posPeriodicRoundTesseract=pos; \n                   \n                   posPeriodicRoundTesseract = mod(pos,d)-.5*d;\n                    res = opU( res, vec2( udRoundTesseract(  posPeriodicRoundTesseract-vec4( 1.0,0.25, 1.0, 0.0), vec4(0.15), 0.1 ), 41.0 ) );\n                    \n            \t     return res;\n            }\n        \n        \n        vec2 castRay( in vec4 ro, in vec4 rd, in float maxd ) {\n            float t = 2.0;\n        \tfloat precis = 0.0005;\n             float h=precis*2.0;\n    \n        \tvec2 res;\n            for( int i=0; i<RAY_STEP; i++ ) {\n                if (abs(h)<precis || t>maxd ) break;\n                 \n                 t += h;\n                  res = map( ro+rd*t );\n                   h = res.x;\n            }\n             return vec2( t, t>=maxd ? -1. : res.y );\n        }\n    \n        float softshadow( in vec4 ro, in vec4 rd, in float mint) {\n        \tfloat res = 1.0;\n            float h,t = mint;\n             for( int i=0; i<15; i++ ) {\n                 h = map( ro + rd*t ).x;\n                  res = min( res, 7.*h/t );\n                   t += 0.028;\n             }\n              return clamp( res-.6, 0.0, 1.0 );\n        }\n    \n        const vec2 eps = vec2( 0.001, 0.0);\n        vec4 calcNormal( in vec4 pos ){\n        \treturn normalize(vec4(\n        \t    map(pos+eps.xyyy).x - map(pos-eps.xyyy).x,\n        \t    map(pos+eps.yxyy).x - map(pos-eps.yxyy).x,\n        \t    map(pos+eps.yyxy).x - map(pos-eps.yyxy).x,\n        \t\tmap(pos+eps.yyyx).x - map(pos-eps.yyyx).x\n        \t));\n        }\n    \n        float calcAO( in vec4 pos, in vec4 nor ){\n        \tfloat dd, hr, totao = 0.0;\n            float sca = 1.0;\n            vec4 aopos; \n             for( int aoi=0; aoi<5; aoi++ ) {\n                 hr = 0.01 + 0.05*float(aoi);\n                  aopos =  nor * hr + pos;\n                   totao += -(map( aopos ).x-hr)*sca;\n                   \n                    sca *= 0.75;\n            }\n             return clamp( 1.0 - 4.0*totao, 0.0, 1.0 );\n        }\n    \n    vec3 render( in vec4 ro, in vec4 rd ){ \n        vec3 col = vec3(0);\n        vec2 res = castRay(ro,rd, 19.0);\n         float t = res.x;\n    \t float m = res.y;\n          if( m>-0.5 )\n          {\n            vec4 pos = ro + t*rd;\n             vec4 nor = calcNormal( pos );\n          \n    \t  \tcol = vec3(0.6) + 0.4*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n    \t  \t\n              float ao = calcAO( pos, nor );\n          \n    \t  \tvec4 lig = normalize( vec4(-0.6, 0.7, -0.5, 0.5) );\n    \t  \t   float amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n               float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n               float bac = clamp( dot( nor, normalize(vec4(-lig.x,0.0,-lig.z,0.0))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n          \n    \t  \tfloat sh = 1.0;\n    \t  \t    if( dif>0.02 ) { sh = softshadow( pos, lig, 0.025); dif *= sh; }\n          \n    \t  \tvec3 brdf = vec3(0.0);\n    \t  \t    brdf += 0.20*amb*vec3(0.0,0.93,0.13)*ao;\n                brdf += .2*bac*vec3(0.15)*ao;\n                brdf += 1.20*dif*vec3(1.00,0.90,0.70);\n          \n    \t  \t   float pp = clamp( dot( reflect(rd,nor), lig ), 0.0, 1.0 );\n    \t  \t    float spe = sh*pow(pp,16.0);\n    \t  \t   float fre = ao*pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n          \n    \t  \t     col = col*brdf + vec3(1.0)*col*spe + 0.7*fre*(0.5+0.5*col);\n    \t  }\n          \n    \t    col *= exp( -0.01*t*t );\n          \n    \t     return vec3( clamp(col,0.0,1.0) );\n    }\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n     vec2 mo = vec2(1.0,0.0); \n           mo += iMouse.xy/iResolution.xy;\t \n     \n\tfloat time = iTime/8.0;\n\tvec3 colorSum = vec3(0.);\n\n          \t// rotation around xy plane\n\tfloat \n\t\ta = time/2.03,\n\t\tb = time/2.1,\n\t\t c1 = cos(a)*mo.x, s1 = sin(a)*mo.y,\n\t\t c2 = cos(b)*mo.x, s2 = sin(b)*mo.y;\n\t      mat2 rot1 = mat2(c1,-s1,s1,c1),\n               rot2 = mat2(c2,-s2,s2,c2);\n    \n    vec4 rd,\n        ro = vec4( -0.5+3.2*cos(0.1*time + 6.0*mo.x), 1.0 + 2.0*mo.y, 0.5 + 3.2*sin(0.1*time + 6.0*mo.x),0.),\n        ta = vec4( -0.5, -0.4, 0.5, 0. ),\n         cw = normalize( ta-ro ),\n        cp = vec4( 0., 1., 0., 0. ),\n          cu = normalize( vec4(cross(cw.xyz,cp.xyz),0.)),\n           cv = normalize( vec4(cross(cu.xyz,cw.xyz),0.));\n\n           // Rotation of 4D scene\n            ro.zw *= rot1;\n           \tro.xw *= rot2;\n    \nfloat fA=float(ANTIALIASING);               \nfloat aspect=iResolution.x/iResolution.y;\n#if (ANTIALIASING == 1)\t\n\tint i=0;\n#else\n\tfor (int i=0;i<ANTIALIASING;i++) {\n#endif\n        float fi=6.28*float(i)/fA; \n\t\t vec2 q = (fragCoord.xy+.4*vec2(cos(fi),sin(fi)))/iResolution.xy;\n\t\t  vec2 p = -1.0+2.0*q;\n\t\t        p.x *= aspect;\n\n         \t\t// Camera is still a 2D plane because human vision is in 2D (brain recalculates 3D)\n         \t\t// (The scene is time rotated around xy plan)\n         \t\t rd = normalize( p.x*cu + p.y*cv + 2.5*cw );\n         \t\t// Rotation of 4D scene\n             \t  rd.zw *= rot1;\n         \t\t  rd.xw *= rot2;\n        \n\t\t           colorSum += sqrt(render( ro, rd ));\n#if (ANTIALIASING > 1)\t\n\t}\n     fragColor = vec4(colorSum/fA, 1.);\n#else\n\tfragColor=vec4(colorSum, 1.);\n#endif\n}\n","name":"Image","description":"","type":"image"}]}