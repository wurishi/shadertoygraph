{"ver":"0.1","info":{"id":"M3BSDR","date":"1710444321","viewed":66,"name":"TP3 - Lifgraphique Miali ","username":"mattbread","description":"TP3 - Shadowing","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["shadowing"],"hasliked":0,"parentid":"4XBSR1","parentname":"L2 - TP3 - Shadows"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modeling - 2024.02.06\n// Eric Galin\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\nstruct Ray {\n    vec3 ro; // Ray origin\n    vec3 rd; // Direction\n};\n\nstruct SphereStruct{\n    vec3 c; // Center\n    float r; // Radius\n};\n\n// Compute a point on the ray\n// ray : Ray\n// t   : depth\nvec3 Point(Ray ray,float t)\n{\n  return ray.ro+t*ray.rd;\n}\n\n// Compute the ray\n//     m : Mouse position\n//     p : Pixel\nRay CreateRay(vec2 m,vec2 p)\n{\n  float a=3.*3.14*m.x; \n  float le=3.5;\n  \n  // Origin\n  vec3 ro=vec3(35.,0.,18.)*Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(0.,0.,3.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  vec3 rd=normalize(p.x*u+p.y*v+le*w);\n  return Ray(ro,rd);\n}\n\n// Primitives\n\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\nfloat Sphere(vec3 p,vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n// Plane\n// p : point\n// c : center of skeleton\n// n : Normal\nfloat Plane(vec3 p,vec3 c,vec3 n)\n{\n  return dot(p-c,n);\n}\n\n// Circle\n// p : point\n// c : center of skeleton\n// n : normal vector of plane\nfloat Circle(vec3 p,vec3 c,vec3 n, float r)\n{\n  float h = dot(p-c, n);\n  float m = sqrt(pow(length(p-c),2.) - pow(h,2.));\n  float l = m - r;\n  return sqrt(pow(h,2.) + pow(l,2.));\n}\n\n// TorusWithNormal\n// p : point\n// c : center\n// n : normal\n// major : major radius\n// minor : minor radius\n\nfloat TorusWithNormal(vec3 p, vec3 c, vec3 n, float minor, float major )\n{\n  return Circle(p, c, n, minor) - major; \n}\n\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n  return min(a,b);\n}\n\n// Union, extension to four sub-trees\n// a,b,c : field function of left and right sub-trees\nfloat Union(float a,float b,float c,float d)\n{\n  return min(min(a,b),min(c,d));\n}\n\n// Intersection\n// a,b : field function of left and right sub-trees\nfloat Inter(float a,float b)\n{\n  return max(a,b);\n}\n\n\n\n// Difference\n// a,b : field function of left and right sub-trees\nfloat Difference(float a,float b)\n{\n  return max(a,-b);\n}\n\n// Blend Offset\n// a,b : field function of left and right sub-trees\n// r : blend radius\nfloat offset(float a, float b, float r)\n{\n  float h = max(r - abs(a-b),0.) / r;\n  return (1./6.) * r * pow(h, 3.);\n}\n\n// Blend\n// a,b : field function of left and right sub-trees\n// r : blend radius\n\nfloat Blend(float a, float b, float r)\n{\n    return Union(a,b) - offset(a,b,r);\n}\n\n// Cube\n// p : point\n// c : center of cube\n// l : lenght of square's side\n\nfloat Cube(vec3 p,vec3 c,float l)\n{\n  l /= 2.;\n  float v = Plane(p, vec3(c.x,c.y,c.z - l), vec3(0,0,-1));\n  v = Inter(v, Plane(p, vec3(c.x,c.y,c.z), vec3(0,0,1)));\n  v = Inter(v, Plane(p, vec3(c.x,c.y - l,c.z), vec3(0,-1,0)));\n  v = Inter(v, Plane(p, vec3(c.x,c.y,c.z), vec3(0,1,0)));\n  v = Inter(v, Plane(p, vec3(c.x - l,c.y,c.z), vec3(-1,0,0)));\n  v = Inter(v, Plane(p, vec3(c.x,c.y,c.z), vec3(1,0,0)));\n  return v;\n}\n\n// SphereLine\n// p : point\n// ic : initial center of the first sphere\n// nb : number of sphere on the line\n// r : radius of the sphere\n\nfloat SphereLine(vec3 p, vec3 ic, int nb, float r){\n    float v = 10000.0;\n    v = Sphere(p, ic, r);\n    for (int i=1; i < nb; i++){\n        ic.x += r + 1.;\n        v = Blend(v, Sphere(p, ic, r), 1.);\n    }\n    return v;\n}\n\n// Potential field of the object\n// p : point\nfloat object(vec3 p)\n{\n  \n  float v = Sphere(p,vec3(3.,0.,6.),4.);\n    \n  v=Union(v,\n    Sphere(p,vec3(0.,2.,3.),3.));\n  \n  float d=Union(\n      Sphere(p,vec3(5.,1.,5.),3.),\n    Sphere(p,vec3(-1.,1.,6.),3.),\n    Sphere(p,vec3(-1.,2.,2.),2.),\n    Sphere(p,vec3(1.,1.,6.),2.));\n  v=Difference(v,d);\n  \n  v=Union(v,\n    Plane(p,vec3(0.,0.,-1.),vec3(0.,0.0,1.0))\n  );\n  \n  /*\n  float v = SphereLine(p, vec3(-5,-5,5), 10, 5.);\n  v=Union(v,\n    Plane(p,vec3(0.,0.,-1.),vec3(0.,0.0,1.0))\n  );\n  */\n  \n  return v;\n}\n\n// Analysis of the scalar field\n\nconst int Steps=200;// Number of steps\nconst float Epsilon=.01;// Marching epsilon\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  float v=object(p);\n  n.x=object(vec3(p.x+eps,p.y,p.z))-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z))-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps))-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// ray : Ray \n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(Ray ray,float e,out bool h,out int s)\n{\n  h=false;\n  \n  // Start at the origin\n  float t=0.;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=Point(ray,t);\n    float v=object(p);\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n#define M_PI 3.1415926535897932384626433832795\n\n\n// Lighting\n\n// Hard Shadow\n// p : Point\n// lp : light position\nfloat HardShadow(vec3 p, vec3 lp)\n{    \n    bool h;\n    int steps;\n    Ray sr;\n    vec3 l = normalize(lp - p);\n    sr.ro = p + 0.1 * l;\n    sr.rd = l;\n    SphereTrace(sr, length(lp - p), h, steps);\n    \n    if(h){\n        return 0.;\n    }\n    \n    else{\n        return 1.;\n    }\n}\n\n\n// Fibonacci \n// i : indice of the point\n// n : total number of points\nvec3 Fibonacci(int i, int n)\n{\n    float phi = float(i) * (M_PI * (3. - sqrt(5.)));\n    float offset = 2. / float(n);\n    float y = offset * float(i) - 1. + (offset / 2.);\n    float r = sqrt(1. - pow(y, 2.));\n    return vec3(r * cos(phi), y, r * sin(phi));\n}\n\n// Soft Shadow with sphere as light source\n// p : point\n// s : sphere struct with center and radius\n// n : amount of points\nfloat SoftShadow(vec3 p, SphereStruct s, int n){\n    float l = 0.;\n    for(int i = 0; i < n; i++){\n        vec3 si = Fibonacci(i, n) * s.r;\n        l += HardShadow(p + si, s.c);\n    }\n    return l/float(n);\n}\n\n\n// Ambient Occlusion\n// p : point\n// c : center, source of light\n// n : amount of points\nfloat Occlusion(vec3 p, vec3 c, int n){\n    float l = 0.;\n    for(int i = 0; i < n; i++){\n        vec3 si = normalize(Fibonacci(i, n));\n        if (HardShadow(p, c) == 0.)\n        {\n            l += 1.;\n        }\n    }\n    return 1.0 - (l / float(n));\n}\n\n// Background color\n// d : Ray direction\nvec3 Background(vec3 d)\n{\n  return mix(vec3(.99,.0,.0),vec3(.0,.99,.0),d.z*.5+.5);\n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p, vec3 n, vec3 e)\n{\n    // Point light\n    const vec3 lp = vec3(10., 10., 30.);\n  \n    // Light direction to point light\n    vec3 l = normalize(lp - p);\n  \n    // Ambient color\n    vec3 ambient = .3 + .3 * Background(n);\n    \n    //Shadow\n    float softShadow = SoftShadow(p, SphereStruct(lp, 4.), 100); \n    float occlusionShadow = Occlusion(p, lp, 100);\n    float Shadow = softShadow * occlusionShadow;\n  \n    // Phong diffuse\n    vec3 diffuse = .35 * clamp(dot(n, l), 0., 1.) * vec3(1., 1., 1.);\n  \n    // Specular\n    vec3 r = reflect(e, n);\n    vec3 specular = .15 * pow(clamp(dot(r, l), 0., 1.), 35.) * vec3(1., 1., 1.);\n    \n    // Lighting\n    vec3 c = ambient + Shadow * (diffuse + specular);\n    \n    return c;\n}\n\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)  \n{\n  // Pixel\n  vec2 pixel=(-iResolution.xy+2.*pxy)/iResolution.y;\n\n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n  \n  // Camera\n  Ray ray=CreateRay(m,pixel);\n  \n  \n  // Hit and number of steps\n  bool hit;\n  int s;\n  \n   // Trace ray\n float t=SphereTrace(ray,75.,hit,s);\n  \n  // Shade background\n  vec3 rgb=Background(ray.rd);\n  \n  if(hit)\n  {\n    // Position\n    vec3 p=Point(ray,t);\n    \n    // Compute normal\n    vec3 n=ObjectNormal(p);\n    \n    // Shade object with light\n    rgb=Shade(p,n,ray.rd);\n  }\n    \n  color=vec4(rgb,1.);\n}","name":"Image","description":"","type":"image"}]}