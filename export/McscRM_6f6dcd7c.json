{"ver":"0.1","info":{"id":"McscRM","date":"1720961677","viewed":79,"name":"weird tunnel","username":"workingclasshacker","description":"Based off of an effect I saw here, that I cannot remember who or what was. It is changed a bit from the original \"Vortex\" effect. I added the ability to change the particle shape, as well as make the tunnel follow a Lissajous curve, and changed some color","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["vortexeffect"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R(angle) mat2(cos(angle), sin(angle), -sin(angle), cos(angle))\n#define PI 3.1415926535897932384626433832795\n#define NUM_STEPS 100  // Increase for more precision\nmat2 lissajousRotation(float time, float a, float b, float delta) {\n    // a and b are the frequencies for the sine and cosine components,\n    // delta is the phase shift in radians.\n    float x = sin(a * time + delta);\n    float y = cos(b * time);\n    return mat2(x, -y, y, x);\n}\nfloat circle(vec3 position) {\n    return length(position);\n}\n\nfloat diamond(vec3 position) {\n    return abs(position.x) + abs(position.y);\n}\n\nfloat star(vec3 position, float time) {\n    float angle = atan(position.y, position.x);\n    float radius = length(position);\n    float starFactor = 0.5 + 0.5 * sin(5.0 * angle + time);\n    return radius * starFactor;\n}\nfloat lissajousDistance(vec2 point, float A, float B, float a, float b, float delta) {\n    float minDist = 10000.0;  // Start with a large minimum\n    float t = 0.0;\n    float dt = 2.0 * PI / float(NUM_STEPS);\n\n    for (int i = 0; i < NUM_STEPS; ++i) {\n        float x = A * sin(a * t + delta);\n        float y = B * sin(b * t);\n        float dist = distance(point, vec2(x, y));\n        minDist = min(minDist, dist);\n        t += dt;\n    }\n\n    return minDist;\n}\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    vec3 resolution = iResolution;\n    vec3 position;\n    float time = iTime;\n    float temp = 0.1;\n    float distance, x;\n    float numDots = PI/14.0;\n    fragColor = vec4(-.2); // Initialize fragColor\n    float a = 1.0;  // Frequency for x\n    float b = 2.0;  // Frequency for y\n    float delta = PI / 2.0;  // Phase shift\n\n    for (float e = 0.0; e < 40.0; e++) {\n        position.y += temp * temp * 0.12;\n        position.z = mod(position.z + time, 0.2) - 0.1;\n        x = temp * 0.86 - time * 0.2;\n\n        float angle = round((atan(position.y, position.x) - x) / numDots) * numDots + x;\n        mat2 rotMatrix = R(angle);\n\n        position.xy *= rotMatrix;\n        position.x = fract(position.x) - .47;\n\n        distance = star(position, time); // Can switch to diamond(position) or star(position, time)\n\n        fragColor += (1.0 + sin(temp *.4* cos(time*.02)*4. + time + vec4(1,-1,-2,0)))\n                   * (.4 + cos(400.0 * temp + time * 1002.0) / 400.)\n                   / (9.0 + distance * 450.0);\n\n        temp += x = length(position) * (numDots*PI*.6)-0.004;\n        rotMatrix = lissajousRotation(time * 0.35, a, b, delta);\n        position = temp * normalize(vec3((fragCoord + fragCoord - resolution.xy) * rotMatrix, resolution.y));\n        fragColor -= -0.01*sin(position.z*20.);\n    }\n    \n}\n","name":"Image","description":"","type":"image"}]}