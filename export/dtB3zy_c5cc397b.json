{"ver":"0.1","info":{"id":"dtB3zy","date":"1673475514","viewed":99,"name":"smooth hash noise","username":"ianertson","description":"Simple smooth noise","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["noise","hash","smooth"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NUM_HASH 32\n#define MAX_HASH 250\n\nint HASH[NUM_HASH] = int[NUM_HASH](\n120,\n47,\n232,\n43,\n237,\n38,\n88,\n106,\n183,\n126,\n235,\n3,\n112,\n74,\n221,\n96,\n242,\n121,\n13,\n69,\n136,\n11,\n132,\n250,\n154,\n150,\n202,\n56,\n69,\n133,\n138,\n194\n);\n\nint makeidx(float v) {\n   v = abs(v);\n   float vv = floor(fract(v) * float(NUM_HASH-1));\n   \n   return (int(vv)) % NUM_HASH;\n}\n\n\nfloat gethash(float v) {\n   return float(HASH[makeidx(v)]) / float(MAX_HASH);\n}\n\nfloat hash0(vec2 uv) {\n    float x = gethash(gethash(gethash(uv.x)*(0.5+uv.x*0.5)));\n    float y = gethash(gethash(gethash(uv.y)*(0.5+uv.y*0.5)));\n    \n    float z = fract(cos(length(uv)+atan(x, y)) * dot(uv, vec2(x, y)));\n    \n    float u = gethash(x+z);\n    float v = gethash(y+z);\n    \n    return mix(u, v, smoothstep(0.0, 1.0, z));\n}\n\n\nfloat hash1(vec2 uv, float mag) {\n    vec2 lv = smoothstep(0.0, 1.0, fract(uv));\n    vec2 id = floor(uv);\n    \n    float lr = hash0(id);\n    float r = hash0(id + vec2(1.0*mag, 0.0));\n    float a = mix(lr, r, lv.x);\n    \n    float tb = hash0(id + vec2(0.0, 1.0*mag));\n    float t = hash0(id + vec2(1.0*mag, 1.0*mag));\n    float b = mix(tb, t, lv.x);\n    \n    return mix(a, b, lv.y);\n}\n\nfloat rsign(vec2 uv) {\n   float v = hash1(uv, 1.0);\n   return mix(-1.0, 1.0, v);\n}\n\nfloat noise(vec2 uv) {\n    uv /= 1.6;\n    vec2 lv = smoothstep(0.0, 1.0, fract(uv));\n    vec2 id = floor(uv);\n    \n    float mag = 1.0;\n    float s = hash1(uv, 1.0);\n    int c = 16;\n    \n    float ps = s;\n    vec2 off = vec2(0.0);\n    for (int i = 0; i < c; i++) {\n        mag = float(i) / float(c);\n        \n        s += hash1(uv+(off*0.5*mag), 1.0);\n        vec2 nextoff = vec2(s, ps);\n        off += ((nextoff * rsign(nextoff))*0.5*mag);\n        ps = s;\n        \n        \n        \n    }\n    \n    return fract(s / float(c));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 res = iResolution.xy;\n    // Time varying pixel color\n    float freq = res.x*0.16;\n    \n    freq = freq * (0.1 + (0.5 + (0.5*cos(iTime*0.5))));\n    \n    uv += vec2(cos(iTime*0.5), sin(iTime*0.5));\n    vec3 col = vec3(noise(uv*freq));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}