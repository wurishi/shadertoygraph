{"ver":"0.1","info":{"id":"Mc3GDj","date":"1712124382","viewed":70,"name":"S3 square spin","username":"raphaeleg","description":"- used Square function\n- used Rotation Matrix\n-----\npurely for learning purposes\nTutorial by Nathan Vaughn","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["rotate","square"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdfSquare(vec2 uv, float size, vec2 offset) {\n  float x = uv.x - offset.x;\n  float y = uv.y - offset.y;\n  return max(abs(x), abs(y)) - size;\n}\nvec3 pinkCol() {\n    return vec3(1.0,0.5,0.5);\n}\nvec2 rotate(vec2 uv, float th) {\n    // rotation matrix:\n    // |cos(th), -sin(th)|\n    // |sin(th),  cos(th)|\n    // multiply by uv = vec2. in other words, apply to uv\n    return mat2(cos(th), sin(th), -sin(th), cos(th)) * uv;\n}\n\nvec4 v1_0 (in vec2 fragCoord) {\n    vec2 uv = (fragCoord/iResolution.xy) * 2. - 1.; // <0,1>\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec2 offset = vec2(0.);\n    float d = sdfSquare(uv,0.5,offset);\n    \n    vec3 bgCol = vec3(1.0,1.0,1.0);\n    // can change between pinkCol and gradientCol\n    vec3 squareCol = pinkCol();\n    \n    vec3 finalCol = bgCol;\n    if (d <= 0.0) { // if within radius = circle\n        finalCol = squareCol;\n    }\n    \n    return vec4(finalCol,1.0);\n}\n\nvec4 v2_0 (in vec2 fragCoord) {\n    vec2 uv = (fragCoord/iResolution.xy) * 2. - 1.; // <0,1>\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec2 offset = vec2(0.);\n    vec2 rotated = rotate(uv, iTime);\n    float d = sdfSquare(rotated,0.5,offset);// use rotate instead of uv\n    \n    vec3 bgCol = vec3(1.0,1.0,1.0);\n    vec3 squareCol = pinkCol();\n    \n    vec3 finalCol = bgCol;\n    if (d <= 0.0) {\n        finalCol = squareCol;\n    }\n    \n    return vec4(finalCol,1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = v2_0(fragCoord);   \n}","name":"Image","description":"","type":"image"}]}