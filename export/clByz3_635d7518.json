{"ver":"0.1","info":{"id":"clByz3","date":"1692055665","viewed":79,"name":"Background Integer Pixel Grid","username":"Blindman67","description":"Simple 3 level background grid with fixed width origin lines.","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["grid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define GRID_PIXELS 10.0\n#define GRID_AREAS_A 5.0\n#define GRID_AREAS_B 10.0\n\n#define ZOOM_RATE 0.1\n#define MIN_ZOOM 0.5\n#define ZOOM_RANGE 4.0\n\n#define COL_1 vec3(0.5)\n#define COL_2 vec3(0.34)\n#define COL_3 vec3(0.25)\n#define COL_4 vec3(0.125)\n#define LINE_COL vec3(0.69)\n\nconst float invPxScale    = 1.0 / GRID_PIXELS;\nconst float invAreaScaleA = 1.0 / GRID_AREAS_A;\nconst float invAreaScaleB = 1.0 / GRID_AREAS_B;\n\nvec3 color;\n\nfloat unitSin(float a) { return sin(a) * 0.5 + 0.5; }\nbool gridId(vec2 coord) { return bool((uint(coord.x) + uint(coord.y)) % 2u); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 coord = abs(fragCoord - iResolution.xy * 0.5);\n    if (coord.x <= 0.5 || coord.y <= 0.5) {    \n        color = LINE_COL;\n    } else {\n        float zoom = unitSin(iTime * ZOOM_RATE) * ZOOM_RANGE + MIN_ZOOM;\n        vec2 coordModA = coord * zoom * invPxScale;\n        vec2 coordModB = coordModA * invAreaScaleA;\n        vec2 coordModC = coordModB * invAreaScaleB;\n        bool pA = gridId(coordModA);\n        bool pB = gridId(coordModB);\n        bool pC = gridId(coordModC);\n        color = (pB ? (pA ? COL_1 : COL_2) : (pA ? COL_3 : COL_4)) * (pC ? 1.0 : 0.75);  \n    }\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}