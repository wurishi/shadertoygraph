{"ver":"0.1","info":{"id":"msXXRX","date":"1669280365","viewed":125,"name":"Weighted Local Interpolation","username":"FatalSleep","description":"Local Interpolation of downscaled images with color weights.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["interpolation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float downScale = 50.0;\nconst vec3 colors[4] = vec3[4](\n    vec3(1.0,0.0,0.0),\n    vec3(1.0,1.0,1.0),\n    vec3(0.0,1.0,0.0),\n    vec3(0.0,0.0,1.0)\n);\n\nvec3 COMPOSITE(vec3 tl, vec3 tr, vec3 bl, vec3 br, vec2 uv) {\n    return mix(mix(tl, tr, uv.y),\n        mix(bl, br, uv.y), uv.x);\n}\n\nvec3 WCOMPOSITE(vec3 colors[4], float weights[4], vec2 uv) {\n    vec3 tl = colors[0], tr = colors[2];\n    vec3 bl = colors[1], br = colors[3];\n    float weightA = (uv.y * weights[0] * weights[2]) + (weights[2] * (1.0 - weights[0]));\n    vec3 colorA = mix(tl, tr, weightA);\n    float weightB = (uv.y * weights[1] * weights[3]) + (weights[3] * (1.0 - weights[1]));\n    vec3 colorB = mix(bl, br, weightB);\n    return mix(colorA, colorB, uv.x);\n}\n\nvec3 DOWNSCALED(vec2 coord, float weights[4]) {\n    coord = floor(coord / downScale) * downScale;\n    \n    return WCOMPOSITE(colors, weights,\n            coord.xy * (1.0/iResolution.xy));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 offsets[4];\n\toffsets[0] = vec2(0.0, 0.0);\n\toffsets[1] = vec2(1.0, 0.0);\n\toffsets[2] = vec2(0.0, 1.0);\n\toffsets[3] = vec2(1.0, 1.0);\n    \n    float weights[4] = float[4](\n        1.0, // red\n        1.0, // white\n        1.0, // green\n        1.0  // blue\n    );\n    weights[0] = abs(sin(iTime/2.));\n    weights[1] = abs(cos(iTime/2.));\n    weights[2] = abs(sin(iTime/2.));\n    weights[3] = abs(cos(iTime/2.));\n    \n    vec3 col[4];\n    col[0] = DOWNSCALED(fragCoord + (offsets[0] * downScale), weights);\n    col[1] = DOWNSCALED(fragCoord + (offsets[1] * downScale), weights);\n    col[2] = DOWNSCALED(fragCoord + (offsets[2] * downScale), weights);\n    col[3] = DOWNSCALED(fragCoord + (offsets[3] * downScale), weights);\n    \n    vec2 uvFrag = mod(fragCoord, downScale) * (1.0/downScale);\n    if (fragCoord.x <= iMouse.x) {\n        float w[4] = float[4](1.,1.,1.,1.);\n        fragColor = vec4(WCOMPOSITE(col, w,uvFrag),1.0);\n    } else {\n        // 4-COLOR GRADIENT:\n        //fragColor = vec4(COMPOSITE(colors[3],colors[0],colors[1],colors[2],fragCoord * (1.0/iResolution.xy)),1.0);\n        // DOWNSCALED:\n        fragColor = vec4(COMPOSITE(col[0],col[2],col[1],col[3],fragCoord * (1.0/iResolution.xy)),1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}