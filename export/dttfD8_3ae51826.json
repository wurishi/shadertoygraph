{"ver":"0.1","info":{"id":"dttfD8","date":"1701364921","viewed":85,"name":"infinite balls","username":"aerowave","description":"raymarcher base: https://www.shadertoy.com/view/4dSBz3\n\nalso if anyone understands why my attempt to improve performance (lines 42-46 of Buffer A), please comment!","likes":2,"published":3,"flags":32,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"4dSBz3","parentname":"Super simple raymarching example"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    \n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define CRT 1\n\n// Super simple raymarching example. Created by Reinder Nijhoff 2017\n// Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.\n// @reindernijhoff\n// \n// https://www.shadertoy.com/view/4dSBz3\n//\n// This is the shader used as example in my ray march tutorial: https://www.shadertoy.com/view/4dSfRc\n//\n// Created for the Shadertoy Competition 2017 \n//\n\n//\n// Distance field function for the scene. It combines\n// the seperate distance field functions of three spheres\n// and a plane using the min-operator.\n//\nfloat sceneSDF(vec3 p) {\n    return length(mod(p + 1.5, 3.) - 1.5) - 0.4;\n}\n\n//\n// Calculate the normal by taking the central differences on the distance field.\n//\nvec3 calcNormal(in vec3 p) {\n    vec2 e = vec2(1.0, -1.0) * 0.5773 * 0.0005;\n    return normalize(\n        e.xyy * sceneSDF(p + e.xyy) +\n        e.yyx * sceneSDF(p + e.yyx) +\n        e.yxy * sceneSDF(p + e.yxy) +\n        e.xxx * sceneSDF(p + e.xxx));\n}\n\nint CRT_ = CRT + 1;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    int MAX_STEPS = 4096;\n\n    // does this even work as an optimization? i thought reducing\n    if (CRT_ > 0 && int(fragCoord.y * float(CRT_) + fragCoord.x) % (CRT_ * CRT_) != iFrame % (CRT_ * CRT_)) {\n        fragColor = texture(iChannel0, fragCoord/iResolution.xy) - (1.0 / float(CRT_ * CRT_));\n        return;\n    }\n\n    // start of raymarcher code\n    vec3 cameraPos = vec3(1.5, 1.5, 0) + vec3(3.0 * iMouse.xy/iResolution.xy, -iTime * 2.0);\n    vec3 ro = vec3(0, 0, 1);                           // ray origin\n\n    vec2 q = (fragCoord.xy - .5 * iResolution.xy ) / iResolution.y;\n    vec3 rd = normalize(vec3(q, 0.) - ro);             // ray direction for fragCoord.xy\n\n    // March the distance field until a surface is hit.\n    float h, t = 1.;\n    for (int i = 0; i < MAX_STEPS; i++) {\n        h = sceneSDF(ro + rd * t + cameraPos);\n        t += h;\n        // hit distance gets bigger the farther away the ray is from the camera\n        if (h < 0.01) break;\n    }\n\n    if (h < 0.01) {\n        vec3 p = ro + rd * t + cameraPos;\n        vec3 normal = calcNormal(p);\n\n        fragColor = vec4(normal + vec3(0.5, 0.5, 0.5), 1);\n    } else {\n        fragColor = vec4(0,0,0,1);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}