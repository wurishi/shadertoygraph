{"ver":"0.1","info":{"id":"wdBGD3","date":"1550103224","viewed":118,"name":"Led Balls","username":"cbrpnk","description":"Everyday","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot(float a)\n{\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat random(vec3 p)\n{\n    return fract(sin(dot(p, vec3(123.2345, 345.6546, 789.65648))) * 345879823.234234);\n}\n\nvec3 ptrn(vec2 p)\n{\n    p = abs(p);\n    vec2 backup = p;\n    p *= rot(floor(iTime*2.)) + abs(sin(fract(iTime)))*.1;\n    p = mod(p, .5);\n    p = mod(p, .2);\n    float zoom = 25.;\n    float t = pow(iTime, 1.);\n    vec2 id = floor(p * zoom);\n    vec2 fra = fract(p * zoom);\n    float size = pow(2., id.y+2.);\n    float shade;\n    if(mod(floor(t*10.)+id.x*id.x, size) > size/2.) shade = 0.;\n    else shade = 1.;\n    shade *= sin(backup.x*400.);\n    shade *= sin(backup.y*400.);\n    vec3 col = vec3(shade*fra.x) * vec3(1., 1., .4);\n    col.r *= p.x * 3.;\n    col.g *= p.y * 20.;\n    col.b *= length(p)*5.;\n    col += pow(col, vec3(.5));\n    col.g *= abs(sin(floor(iTime*2.)));\n    return sqrt(col);\n}\n\nfloat map(vec3 p)\n{\n    float walls = min(p.y+.5, p.z+1.);\n    p.x += 1.;\n    p.xz = mod(p.xz+vec2(1.), 2.)-vec2(1.);\n    float s = length(p) - .5;\n    return min(s, walls);\n}\n\nfloat march(vec3 ro, vec3 rd)\n{\n    float t = 0.;\n    for(int i=0; i<128; ++i)\n    {\n    \tfloat d = map(ro+rd*t);\n        if(d <.001) break;\n        t += d;\n    }\n    return t;\n}\n\nvec3 getNormal(vec3 p)\n{\n    vec2 eps = vec2(.001, 0.);\n    return normalize(vec3(\n    \tmap(p+eps.xyy) - map(p-eps.xyy),\n        map(p+eps.yxy) - map(p-eps.yxy),\n        map(p+eps.yyx) - map(p-eps.yyx)\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy - vec2(.5);\n    uv.x *= iResolution.x/iResolution.y;\n\t\n    vec3 eye = vec3(0., 0., 5.);\n    eye.z += sin(iTime*.25+1.57)*2.;\n    \n    vec3 dir = normalize(vec3(uv.x, uv.y, -1.));\n    dir.yz *= rot(sin(iTime*.25+1.57)*.5);\n    float d = march(eye, dir);\n    vec3 p = eye+dir*d;\n    vec3 normal = getNormal(p);\n    vec3 col;\n    \n    if(dot(normal, vec3(0., 1., 0.)) == 0.) {\n        col = ptrn(p.xy);\n    } else {\n        vec3 bounceDir = dir - 2.*(dir * normal) * normal;\n    \tvec3 bounceOrigin = p+normal*.002;\n        float bounceD = march(bounceOrigin, bounceDir);\n        vec3 bp = p+bounceDir*bounceD;\n        \n        \n        col += ptrn(bp.xy);\n        col /= bounceD*20.;\n        col *= pow(d*.05, .5);\n    }\n\t\n    col.r *= uv.x+1.;\n    col *= 1.-length(uv)*.8;\n    col = sqrt(col);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}