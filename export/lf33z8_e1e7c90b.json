{"ver":"0.1","info":{"id":"lf33z8","date":"1711371050","viewed":45,"name":"Composing Different Shapes Ex.","username":"billrockx","description":"The Book of Shaders Exercise.\nRecreate more complicated patterns by composing different shapes.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["tbos"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265358979323846\n\nvec2 rotate2D(vec2 st, float angle){\n    st -= 0.5;\n    st =  mat2(cos(angle),-sin(angle),\n                sin(angle),cos(angle)) * st;\n    st += 0.5;\n    return st;\n}\n\nvec2 tile(vec2 st, float zoom){\n    st *= zoom;\n    return fract(st);\n}\n\nfloat box( vec2 st,  vec2 size){\n    float w =  4.5/iResolution.y;\n    size = 0.5 - size * 0.5;\n    st = smoothstep(0., w, min(st, 1.0 - st) - size );\n    return st.x * st.y;\n}\n\nvec2 scale2D(vec2 st, vec2 scale){\n    st -= 0.5;\n    st = mat2(scale.x,0.0,\n                0.0,scale.y) * st;\n    st += 0.5;\n\treturn st;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord.xy/iResolution.y;\n    vec3 color = vec3(0.0);\n\n    // Divide the space in 4\n    st = tile(st,4.);\n    \n    st += 0.5;\n    color = vec3(box(st, vec2(1.1))) - vec3(box(st, vec2(0.9)));\n    st -= 1.0;\n    color += vec3(box(st, vec2(1.1))) - vec3(box(st, vec2(0.9)));\n    st += 0.5;\n\n\tst = rotate2D(st, PI/4.0);\n    st = scale2D(st, vec2(5.0));\n    // Draw a square\n    color += vec3(box(st,vec2(1.5)));\n    color = 1.0-min(1.0-vec3(box(st,vec2(1.3))), color);\n    // color = vec3(st,0.0);\n\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}