{"ver":"0.1","info":{"id":"mssSWM","date":"1669513880","viewed":163,"name":"XY Transform collection","username":"ChunderFPV","description":"I made this as a tool to see a smooth transition between XY and whatever we're turning that into.\n\nMouse X to move between transforms.  Mouse Y to zoom.  T key toggles texture.","likes":13,"published":1,"flags":16,"usePreview":1,"tags":["2d","tool","transform"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SCALE 6.0\n#define R iResolution.xy\n#define M iMouse\n#define PI 3.14159265358979\n#define PI2 6.2831853071795865\n#define KT(i) texelFetch(iChannel1, ivec2(i, 2), 0).x > 0.0\n\nvoid mainImage( out vec4 RGBA, in vec2 XY )\n{\n    float t = iTime;\n    float nt = 8.0; // number of transforms\n    float ts = 10.0; // time between transforms\n    float ct = 20.0; // cell time\n    vec2 m = M.xy/R; // mouse coords\n    if (M.z > 0.0) t = m.x*nt*ts; // time from mouse x\n    float z = (M.z > 0.0) ? 1.0/(1.0-m.y): 1.0; // zoom from mouse y\n    vec2 uv = (XY-0.5*R)/R.y*SCALE*z; // screen coords\n    \n    vec2 uv2 = uv;\n    float x = uv.x;\n    float y = uv.y;\n    float r = length(uv); // screen radius\n    float a = atan(uv.x, uv.y); // screen arc\n    float mode = mod(floor(t/ts), nt)+1.0; // mode from time\n    float tt = (cos(PI+t*PI2/ts)+1.0)/2.0; // transform with time\n    \n    if (mode == 1.0) // polar\n    {\n        uv2 = vec2( a/PI2, r*5.0 );\n    }\n    else if (mode == 2.0) // metallic series\n    {\n        uv2 = ((x*x+y*y)-1.0)/uv; // dot(uv-vec2(1, 0), uv+vec2(1, 0))/uv;\n    }\n    else if (mode == 3.0) // power series\n    {\n        vec2 v = log(abs(uv));\n        uv2 = vec2( v.y/v.x, v.x/v.y );\n    }\n    else if (mode == 4.0) // waves\n    {\n        uv2 = y-vec2( cos(x), sin(x) );\n    }\n    else if (mode == 5.0) // circles & squares\n    {\n        vec2 v = sin(uv*PI);\n        uv2 = vec2( v.x+v.y, v.x-v.y );\n    }\n    else if (mode == 6.0) // archimedean spirals\n    {\n        float v = a/PI2;\n        uv2 = r+vec2( v*3.0, -v*12.0 );\n    }\n    else if (mode == 7.0) // inverse square\n    {\n        vec2 v = uv/dot(uv, uv); // = uv/(x*x+y*y); // uv*pow(length(uv), -2.0);\n        uv2 = v*3.0;\n    }\n    else if (mode == 8.0) // mobius\n    {\n        vec2 u = uv-vec2(1.0, 0);\n        vec2 v = u/dot(u, u);\n        v.x += 0.5;\n        uv2 = log(length(v)) * 1.5 + atan(v.y, v.x) / PI2 * vec2(4, -12);\n    }\n    \n    uv = uv*(1.0-tt)+uv2*tt; // transform x & y\n    \n    vec3 c = vec3(0); // background\n    \n    if (KT(84)) // T key toggle\n    {\n        c += texture(iChannel0, uv, 1.0).rgb;\n        vec2 dl = max(vec2(0.25), abs(sin(uv*PI))); // dark lines\n        c *= min(dl.x, dl.y);\n    }\n    \n    vec2 fw = fwidth(uv); // pixel size\n    vec2 g = abs(fract(uv+0.5)-0.5)/fw; // grid\n    c += max(0.0, 1.0-min(g.x, g.y))*0.3; // lines\n    c += max(0.0, 1.0-max(g.x, g.y)/2.0)*0.6; // points\n    \n    vec2 c1 = (fract(uv-vec2(t/ct*round(uv.y), 0)+0.5)-0.5)/fw/3.0; // x cells\n    vec2 c2 = (fract(uv-vec2(0, t/ct*round(uv.x))+0.5)-0.5)/fw/3.0; // y cells\n    c.r += max(0.0, 1.0-length(c1)); // red dots\n    c.b += max(0.0, 1.0-length(c2)); // blue dots\n    \n    RGBA = vec4(c, 1.0);\n}","name":"Image","description":"","type":"image"}]}