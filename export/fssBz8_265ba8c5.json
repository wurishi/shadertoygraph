{"ver":"0.1","info":{"id":"fssBz8","date":"1644517330","viewed":78,"name":"Reaction-Diffusion Sim","username":"Gucky","description":"Simulates a reaction-diffusion system with two components after the Gray-Scott Model and uses it as a heightmap for some coloring. The mouse can be used to draw additional seed points for the reaction if it is too slow.","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["2d","simulation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 Normal(vec2 uv, float delta, float strength) {\n    float xp = texture(iChannel1, uv+vec2(delta, 0.0)).x;\n    float xm = texture(iChannel1, uv+vec2(-delta, 0.0)).x;\n    float yp = texture(iChannel1, uv+vec2(0.0, delta)).x;\n    float ym = texture(iChannel1, uv+vec2(0.0, -delta)).x;\n    \n    return normalize(vec3(strength*(yp-ym), strength*(xm-xp), 1.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // lighting\n    vec3 colormap = vec3(1.0, 0.4, 0.2);\n    vec3 light_direction = normalize(vec3(2.0, 1.0, 1.));\n    vec3 normal = Normal(uv, 0.002, 7.0);\n    float light_strength = dot(normal, light_direction);\n    //float angle = atan(normal.x-uv.x, normal.y-uv.y);\n    fragColor = vec4((light_strength + texture(iChannel1, uv).x)*colormap - vec3(0.3, 0.3, 0.0) * texture(iChannel0, uv).x, 1.0);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Buffer A <=> reagent u, iChannel0\nconst float D_u = 0.2;\nconst float dt = 1.;\n\n// Reaction probability for concentrations u, v if v+v+u => v+v+v \nfloat R(float u, float v) {\n    return u*v*v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // initialization\n    if (iFrame == 1) {\n        if (length(fragCoord.xy/iResolution.xy - vec2(0.5)) < 0.01) {\n            fragColor.xyz = vec3(0.5);    \n        } else {\n            fragColor.xyz = vec3(1.0);\n        }\n        fragColor.w = 1.0;\n    } else {\n        // check for mouse click\n        if (iMouse.z > 0.0 && length(iMouse.xy - fragCoord.xy) < 5.0) {\n            fragColor.xyzw = vec4(0.5, 0.5, 0.5, 1.0);\n            return;\n        }\n        // F is the feed rate, varying along the y-axis\n        float F = 0.005 + 0.08 * (fragCoord.y/iResolution.y);\n        // Laplacian kernel\n        float nabla_u = -4.0*texture(iChannel0, fragCoord.xy/iResolution.xy).x\n                          + texture(iChannel0, (fragCoord - vec2( 0.0,  1.0)).xy/iResolution.xy).x\n                          + texture(iChannel0, (fragCoord - vec2( 0.0, -1.0)).xy/iResolution.xy).x\n                          + texture(iChannel0, (fragCoord - vec2( 1.0,  0.0)).xy/iResolution.xy).x\n                          + texture(iChannel0, (fragCoord - vec2(-1.0,  0.0)).xy/iResolution.xy).x;\n    \n        float val_u = texture(iChannel0, fragCoord.xy/iResolution.xy).x;\n        float val_v = texture(iChannel1, fragCoord.xy/iResolution.xy).x;\n        val_u += dt * (D_u * nabla_u) - R(val_u, val_v) + F*(1.0 - val_u);\n        fragColor.xyzw = vec4(val_u, val_u, val_u, 1.0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Buffer B <=> reagent v, iChannel1\nconst float D_v = 0.1;\nconst float dt = 1.;\n\n// Reaction probability for concentrations u, v if v+v+u => v+v+v \nfloat R(float u, float v) {\n    return u*v*v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     // initialization\n    if (iFrame == 1) {\n        if (length(fragCoord.xy/iResolution.xy - vec2(0.5)) < 0.01) {\n            fragColor.xyz = vec3(0.25);    \n        } else {\n            fragColor.xyz = vec3(0.0);\n        }\n        fragColor.w = 1.0;\n    } else {\n        // check for mouse click\n        if (iMouse.z > 0.0 && length(iMouse.xy - fragCoord.xy) < 5.0) {\n            fragColor.xyzw = vec4(0.25, 0.25, 0.25, 1.0);\n            return;\n        }\n        // F is the feed rate, K the kill rate\n        float F = 0.005 + 0.08 * (fragCoord.y/iResolution.y);\n        float K = 0.035 + 0.035 * (fragCoord.x/iResolution.x);\n        // Laplacian kernel\n        float nabla_v = -4.0*texture(iChannel1, fragCoord.xy/iResolution.xy).x\n                          + texture(iChannel1, (fragCoord - vec2( 0.0,  1.0)).xy/iResolution.xy).x\n                          + texture(iChannel1, (fragCoord - vec2( 0.0, -1.0)).xy/iResolution.xy).x\n                          + texture(iChannel1, (fragCoord - vec2( 1.0,  0.0)).xy/iResolution.xy).x\n                          + texture(iChannel1, (fragCoord - vec2(-1.0,  0.0)).xy/iResolution.xy).x;\n    \n        float val_u = texture(iChannel0, fragCoord.xy/iResolution.xy).x;\n        float val_v = texture(iChannel1, fragCoord.xy/iResolution.xy).x;\n        val_v += dt * (D_v * nabla_v) + R(val_u, val_v) - (K+F)*val_v;\n        fragColor.xyzw = vec4(val_v, val_v, val_v, 1.0);\n    }\n}","name":"Buffer B","description":"","type":"buffer"}]}