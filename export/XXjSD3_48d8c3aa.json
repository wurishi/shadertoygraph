{"ver":"0.1","info":{"id":"XXjSD3","date":"1711139274","viewed":54,"name":"NonLogical Blobs","username":"nonlogical","description":"blobs","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["blobs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* https://www.shadertoy.com/view/XsX3zB\n *\n * The MIT License\n * Copyright Â© 2013 Nikita Miropolskiy\n *\n * ( license has been changed from CCA-NC-SA 3.0 to MIT\n *\n *   but thanks for attributing your source code when deriving from this sample\n *   with a following link: https://www.shadertoy.com/view/XsX3zB )\n *\n * ~\n * ~ if you're looking for procedural noise implementation examples you might\n * ~ also want to look at the following shaders:\n * ~\n * ~ Noise Lab shader by candycat: https://www.shadertoy.com/view/4sc3z2\n * ~\n * ~ Noise shaders by iq:\n * ~     Value    Noise 2D, Derivatives: https://www.shadertoy.com/view/4dXBRH\n * ~     Gradient Noise 2D, Derivatives: https://www.shadertoy.com/view/XdXBRH\n * ~     Value    Noise 3D, Derivatives: https://www.shadertoy.com/view/XsXfRH\n * ~     Gradient Noise 3D, Derivatives: https://www.shadertoy.com/view/4dffRH\n * ~     Value    Noise 2D             : https://www.shadertoy.com/view/lsf3WH\n * ~     Value    Noise 3D             : https://www.shadertoy.com/view/4sfGzS\n * ~     Gradient Noise 2D             : https://www.shadertoy.com/view/XdXGW8\n * ~     Gradient Noise 3D             : https://www.shadertoy.com/view/Xsl3Dl\n * ~     Simplex  Noise 2D             : https://www.shadertoy.com/view/Msf3WH\n * ~     Voronoise: https://www.shadertoy.com/view/Xd23Dh\n * ~\n *\n */\n \n#define PI 3.141592\n\n/* discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n/* skew constants for 3d simplex functions */\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\n/* 3d simplex noise */\nfloat simplex3d(vec3 p) {\n\t /* 1. find current tetrahedron T and it's four vertices */\n\t /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n\t /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n\n\t /* calculate s and x */\n\t vec3 s = floor(p + dot(p, vec3(F3)));\n\t vec3 x = p - s + dot(s, vec3(G3));\n\n\t /* calculate i1 and i2 */\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\n\t /* x1, x2, x3 */\n\t vec3 x1 = x - i1 + G3;\n\t vec3 x2 = x - i2 + 2.0*G3;\n\t vec3 x3 = x - 1.0 + 3.0*G3;\n\n\t /* 2. find four surflets and store them in d */\n\t vec4 w, d;\n\n\t /* calculate surflet weights */\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\n\t /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n\t w = max(0.6 - w, 0.0);\n\n\t /* calculate surflet components */\n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.0), x3);\n\n\t /* multiply d by w^4 */\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\n\t /* 3. return the sum of the four surflets */\n\t return dot(d, vec4(52.0));\n}\n\n/* const matrices for 3d rotation */\nconst mat3 rot1 = mat3(-0.37, 0.36, 0.85,-0.14,-0.93, 0.34,0.92, 0.01,0.4);\nconst mat3 rot2 = mat3(-0.55,-0.39, 0.74, 0.33,-0.91,-0.24,0.77, 0.12,0.63);\nconst mat3 rot3 = mat3(-0.71, 0.52,-0.47,-0.08,-0.72,-0.68,-0.7,-0.45,0.56);\n\n/* directional artifacts can be reduced by rotating each octave */\nfloat simplex3d_fractal(vec3 m) {\n    return   0.5333333*simplex3d(m*rot1)\n\t\t\t+0.2666667*simplex3d(2.0*m*rot2)\n\t\t\t+0.1333333*simplex3d(4.0*m*rot3)\n\t\t\t+0.0666667*simplex3d(8.0*m);\n}\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nfloat contrastSigmoid(float x) {\n\t//return 1.0 / (1.0 + (exp(-(x * 14.0 - 7.0))));\n    return 1.0 / (1.0 + (exp(-(x - 0.5) * 14.0)));\n}\n\nfloat contrastSigmoidN(float x, int n) {\n   for (int s = 0; s < n; s++) {\n        x = contrastSigmoid(x);\n   }\n   return x;\n}\n\nfloat contrastLinear(float x, float m) {\n   if (x < 0.5) return x / m;\n   return x*m;\n}\n\nfloat colorChannelTransform(\n    float v,\n    float vs,\n    float ve,\n    float vms,\n    float vme,\n    int ci,\n    float ss\n) {\n    float o = 0.0;\n    if (v > vs && v < ve) {\n      o = map(v, vs, ve, vms, vme);\n\t  o = contrastLinear(contrastSigmoidN(o, ci), ss);\n    }\n    return o;\n}\n\nfloat noiseValue(vec3 p3, vec2 p) {\n\tfloat value = simplex3d(p3);\n\tvalue = 0.5 + 0.5*value;\n\t//value *= smoothstep(0.0, 0.005, abs(0.6-p.x)); // hello, iq :)\n    return value;\n}\n\n// GLSL main function\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord.xy/iResolution.x;\n    \n    float pd = iTime*0.005;\n\tvec3 p3 = vec3(p, pd);\n    \n    float d = map(sin(iTime-PI/4.0), -1.0, 1.0, 0.0, 1.0);\n\n    vec3 os = vec3(0.0, 0.0, 0.1*d);\n    int contrast = 1;\n    \n    float ss = 1.0+(1.0);\n\n    float rs = 0.4;\n    float re = 1.0;\n    float rms = 0.3;\n    float rme = 0.9;\n\n\tfloat vR = noiseValue(p3*32.0+(os*1.), p);\n    float cR = colorChannelTransform(vR, rs, re, rms, rme, contrast, ss);\n\t\n    float vG = noiseValue(p3*32.0+(os*2.), p);\n    float cG = colorChannelTransform(vG, rs, re, rms, rme, contrast, ss);\n    \n    float vB = noiseValue(p3*32.0+(os*3.), p);\n    float cB = colorChannelTransform(vB, rs, re, rms, rme, contrast, ss);\n    \n    \n    fragColor = vec4(cR, cG, cB, 1.0);\n\treturn;\n}\n","name":"Image","description":"","type":"image"}]}