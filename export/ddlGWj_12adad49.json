{"ver":"0.1","info":{"id":"ddlGWj","date":"1666830984","viewed":77,"name":"circular window","username":"jt","description":"A simple (reflective) circular window - experimenting with cubemaps.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["window","architecture","circular","construction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https: https://www.shadertoy.com/view/ddlGWj circular window by jt\n// based on https://www.shadertoy.com/view/cdl3D2 cylindrical hollow\n\n// tags: window, architecture, circular, construction\n\n// MIT License, as in https://www.shadertoy.com/terms\n\n/*\n\nCopyright (c) 2022 Jakob Thomsen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n\nfloat box(vec3 p, vec3 b)\n{\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.0)) + min(max(q.x,max(q.y,q.z)), 0.0);\n}\n\nfloat cylinder(vec3 p, float r)\n{\n    return length(p.xy) - r;\n}\n\nfloat circle( vec3 p, float r )\n{\n    return length(vec2(length(p.xy)-r,p.z));\n}\n\nfloat cylinderical_hollow(vec3 p, vec3 s, float r)\n{\n    return abs(p.z) < s.z ? max(box(p, s), -cylinder(p, r)) : length(p.xy) >= r ? box(p, s) : circle(abs(p)-vec3(0,0,s.z), r);\n}\n\nfloat cylinder(vec3 p, float r, float h)\n{\n    vec2 d = abs(vec2(length(p.xy),p.z)) - vec2(h,r);\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nvec2 combine(vec2 a, vec2 b)\n{\n    return a.x < b.x ? a : b;\n}\n\n#define DIFFUSE 1.0\n#define REFLECTIVE 2.0\n#define TRANSPARENT 3.0\n\nvec2 circular_window(vec3 p)\n{\n    float th = 0.025;\n    return\n        combine\n        (\n            combine\n            (\n                vec2(cylinderical_hollow(p, vec3(4.0,4.0,0.25), 2.0), DIFFUSE),\n                vec2(box(p, vec3(4,4,0)), TRANSPARENT)\n                //vec2(box(p, vec3(4,4,0)), REFLECTIVE)\n            ),\n            vec2\n            (\n                min\n                (\n                    circle(p, 2.0) - th,\n                    min\n                    (\n                        cylinder(p.xzy, 2.0, th),\n                        cylinder(p.zyx, 2.0, th)\n                    )\n                ),\n                DIFFUSE\n            )\n        );\n}\n\nvec2 map(vec3 p)\n{\n    return circular_window(p.xzy);\n}\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal(vec3 p) \n{\n    const float h = EPSILON;\n    const vec2 k = vec2(+1,-1);\n    return normalize(k.xyy*map(p + k.xyy*h).x + \n                     k.yyx*map(p + k.yyx*h).x + \n                     k.yxy*map(p + k.yxy*h).x + \n                     k.xxx*map(p + k.xxx*h).x);\n}\n\n#define MAX_ITERATIONS 250u\n\nvec2 raymarch(vec3 ro, vec3 rd, float t0, float t1)\n{\n    float t;\n    uint i;\n    for(i = 0u, t = t0; i < MAX_ITERATIONS && t < t1; i++)\n    {\n        vec2 h = map(ro + rd * t);\n        if(h.x < EPSILON)\n            return vec2(t, h.y);\n        t += h.x;\n    }\n    return vec2(t1, 0.0);\n}\n/*\nfloat raymarch(vec3 ro, vec3 rd, float t0, float t1)\n{\n    if(t0 < 1.0)\n    {\n        for(float t = t0; t < 1.0;)\n        {\n            float h = map(ro + rd * t);\n            if(h < EPSILON)\n                return t;\n            t += h;\n        }\n        t0 = 1.0;\n    }\n\n    for(float t = t0; t < t1;)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON * t) // optimization: coarser epsilon in the distance\n            return t;\n        t += h;\n    }\n\n    return t1;\n}\n*/\n// https://iquilezles.org/articles/rmshadows\nfloat shadow( in vec3 ro, in vec3 rd, float mint, float maxt )\n{\n    float t;\n    uint i;\n    for(i = 0u, t = mint; i < MAX_ITERATIONS && t<maxt; i++)\n    {\n        float h = map(ro + rd*t).x;\n        if( h<EPSILON )\n            return 0.0;\n        t += h;\n    }\n    return 1.0;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n    float t;\n    uint i;\n    float res = 1.0;\n    float ph = 1e20;\n    for(i = 0u, t = mint; i < MAX_ITERATIONS && t < maxt; i++)\n    {\n        float h = map(ro + rd*t).x;\n        if( h < EPSILON )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map(pos + h*nor).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\nvec3 sky(vec3 n)\n{\n    float v = abs(n.z);\n    return mix(vec3(1), vec3(0,0,0.5), v);\n}\n\nstruct result\n{\n    vec3 color;\n    vec3 dst;\n    vec3 dir;\n    bool next;\n};\n\nresult render(vec3 ro, vec3 rd)\n{\n    result res;\n    res.color = vec3(0);\n    res.dst = vec3(0);\n    res.dir = vec3(0);\n    res.next = false;\n\n    vec2 result = raymarch(ro, rd, 0.01, DIST_MAX);\n    float dist = result.x;\n    if(dist < DIST_MAX)\n    {\n        res.dst = ro + rd * dist;\n        vec3 n = normal(res.dst);\n        //color = n*0.5+0.5;\n\n        if(abs(result.y - DIFFUSE) < 0.5)\n        {\n            //res.color = vec3(1);\n            res.color = vec3(1,1,0.5);\n\n            vec3 lightdir = normalize(vec3(1,1,1));\n            vec3 ambient = vec3(0.01);\n            float brightness = max(dot(lightdir, n), 0.0);\n\n            vec2 shadow = raymarch(res.dst + n * 0.01,lightdir, 0.0, DIST_MAX);\n            if(shadow.x < DIST_MAX && !(abs(shadow.y - TRANSPARENT) < 0.5))\n                brightness *= 0.0;\n\n            //brightness *= shadow(res.dst + n * 0.01,lightdir, 0.0, DIST_MAX);\n            //brightness *= softshadow(res.dst + n * 0.01,lightdir, 0.0, DIST_MAX, 10. );\n            res.color = (ambient * calcAO(res.dst, n) + brightness) * res.color;\n            //color = (ambient + calcAO(dst, n) * brightness) * color;\n\n            //color *= brightness;\n            res.next = false; // stop\n        }\n        else if(abs(result.y - REFLECTIVE) < 0.5)\n        {\n            res.dir = reflect(rd, n);\n            //res.color = vec3(0,1,0)*0.1;\n            res.color = vec3(0.5,1,1)*0.1;\n            //res.color = texture(iChannel0, res.dir.xzy).xyz * 0.0;\n            //res.color = sky(res.dir);\n            res.next = true; // continue\n        }\n        else if(abs(result.y - TRANSPARENT) < 0.5)\n        {\n            res.dir = rd; // could refract here instead\n            //res.color = vec3(0,0,1)*0.1;\n            res.color = vec3(0.5,1,1)*0.1;\n            //res.color = texture(iChannel0, res.dir.xzy).xyz;\n            //res.color = sky(res.dir);\n            res.next = true; // continue\n        }\n    }\n    else\n    {\n        res.dir = rd;\n        res.color = texture(iChannel0, res.dir.xzy).xyz;\n        //res.color = sky(res.dir);\n    }\n    \n    return res;\n}\n\n#define pi 3.1415926\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 ndc = 2.0 * uv - 1.0;\n    ndc.x *= float(iResolution.x) / float(iResolution.y);\n    float mx = 2.0 * pi * float(iMouse.x) / float(iResolution.x);\n    float my = pi * float(iMouse.y) / float(iResolution.y);\n    mx = (iMouse.x > 10.0) ? mx : -pi / 4.0 + 2.0 * pi * fract(iTime * 0.025);\n    my = (iMouse.y > 10.0) ? my : pi / 2.0;\n\n    mat2 Yaw = mat2(vec2(cos(mx), sin(mx)), vec2(-sin(mx), cos(mx)));\n    vec3 ro = vec3(0.0, 0.0, -5.0);\n    mat2 Pitch = mat2(vec2(cos(my), sin(my)), vec2(-sin(my), cos(my)));\n    ro.yz = Pitch * ro.yz;\n    ro.xy = Yaw * ro.xy;\n\n    vec3 rd = normalize(vec3(0.5 * ndc.xy, 1.0)); // NOTE: omitting normalization results in clipped edges artifact\n    rd.yz = Pitch * rd.yz;\n    rd.xy = Yaw * rd.xy;\n\n    result res = render(ro, rd);\n    vec3 color = res.color;\n    if(res.next)\n    {\n        res = render(res.dst, res.dir);\n        color += res.color * 0.5;\n        //color = vec3(1,0,0);\n    }\n\n    //color = mix(vec3(color), vec3(0.0), smoothstep(DIST_MAX - 2.0, DIST_MAX, dist));\n    color = sqrt(color); // approximate gamma\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}