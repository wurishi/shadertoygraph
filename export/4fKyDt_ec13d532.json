{"ver":"0.1","info":{"id":"4fKyDt","date":"1732559825","viewed":106,"name":"JellyFish_model","username":"Bakju","description":"BLOB","likes":7,"published":3,"flags":0,"usePreview":0,"tags":["jelly"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash(float n) { return fract(sin(n)*753.5453123); }\n\nfloat noise(vec3 x) {\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    float n = p.x + p.y*157.0 + 113.0*p.z;\n    return mix(\n        mix(mix(hash(n+0.0), hash(n+1.0), f.x),\n            mix(hash(n+157.0), hash(n+158.0), f.x), f.y),\n        mix(mix(hash(n+113.0), hash(n+114.0), f.x),\n            mix(hash(n+270.0), hash(n+271.0), f.x), f.y), f.z);\n}\n\n// Plasma effect for alien texture\nfloat plasma(vec3 p, float t) {\n    float f = 0.0;\n    p.y += t * 0.5;\n    f += sin(p.x * 12.0 + t);\n    f += sin(p.y * 5.0 + t * 5.0);\n    f += sin(length(p.xz) * 5.0 - t * 3.0);\n    f += sin(length(p) * 3.0);\n    return f * 0.25;\n}\n\n// Wild tentacle system\nfloat wildTentacle(vec3 p, float ang, float t, float index) {\n    vec3 tp = p;\n    \n    // Complex rotation\n    float rotSpeed = sin(index * 0.5) * 0.5;\n    mat2 rot = mat2(cos(ang + t * rotSpeed), -sin(ang + t * rotSpeed), \n                    sin(ang + t * rotSpeed), cos(ang + t * rotSpeed));\n    tp.xz = rot * tp.xz;\n    \n    // Spiral movement\n    float spiral = sin(tp.y * 3.0 + t + index) * (1.0 - exp(-abs(tp.y)));\n    float twist = cos(tp.y * 2.0 - t * 2.0 + index) * 0.3;\n    \n    // DNA-like double helix\n    float helix1 = sin(tp.y * 8.0 + t * 3.0) * 0.15;\n    float helix2 = cos(tp.y * 8.0 + t * 3.0) * 0.15;\n    \n    vec3 displacement = vec3(spiral + helix1, 0.0, twist + helix2);\n    \n    // Varying thickness with organic falloff\n    float thickness = 0.02 * (1.0 + sin(tp.y * 4.0 + t)) * exp(-abs(tp.y));\n    \n    return length(tp - displacement) - thickness;\n}\n\n// Modified Energy strings with increased visibility\nfloat energyStrings(vec3 p, float t) {\n    float strings = 999.0;\n    for(float i = 0.0; i < 12.0; i++) {\n        float ang = i * 3.14159 * -2.0 / -12.0;\n        vec3 sp = p;\n        sp.xz = mat2(cos(ang), -sin(ang), sin(ang), cos(ang)) * sp.xz;\n        \n        // Increased wave amplitude and thickness\n        float wave = sin(sp.y * 10.0 + t * 4.0 + i) * 0.15; // Increased from 0.1\n        wave += cos(sp.y * 5.0 - t * 2.0) * 0.05; // Increased from 0.05\n        \n        float string = length(vec2(sp.x - wave, sp.z)) - 0.015; // Increased from 0.01\n        strings = min(strings, string);\n    }\n    return strings;\n}\n\nfloat map(vec3 p, float t) {\n    // Animate jellyfish position with complex movement\n    vec3 jellyfishPos = vec3(sin(t * 0.5) * 0.2, \n                            sin(t * 0.7) * 0.1, \n                            cos(t * 0.3) * 0.2);\n    vec3 q = p - jellyfishPos;\n    \n    // Morphing alien body\n    float bodyBase = length(q) - 0.5;\n    bodyBase += plasma(q * 3.0, t) * 0.1;\n    \n    // Add body details\n    float bodyDetail = sin(q.y * 8.0 + t) * 0.05;\n    bodyDetail += cos(length(q.xz) * 6.0 - t) * 0.05;\n    float body = bodyBase + bodyDetail;\n    \n    // Wild tentacles\n    float tentacles = 999.0;\n    for(float i = 0.0; i < 16.0; i++) {\n        float ang = i * 3.14159 * 2.0 / 16.0;\n        tentacles = min(tentacles, \n                       wildTentacle(p - jellyfishPos - vec3(0.0, -0.4, 0.0), \n                                  ang, t, i));\n    }\n    \n    // Energy strings\n    float strings = energyStrings(p - jellyfishPos - vec3(0.0, -0.3, 0.0), t);\n    \n    // Combine with smooth blend\n    float blend = exp(-abs(body - tentacles) * 8.0);\n    float d = mix(min(body, tentacles), max(body, -tentacles), blend);\n    d = min(d, strings);\n    \n    // Add pulsing effect\n    d += sin(t * 3.0 + length(q) * 5.0) * 0.02;\n    \n    return d;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    float t = iTime * 0.5;\n    \n    // Camera setup with movement\n    float camT = t * 0.3;\n    vec3 ro = vec3(sin(camT) * 4.0, sin(camT * 0.5) * 0.5, cos(camT) * 4.0);\n    vec3 ta = vec3(0.0, 0.0, 0.0);\n    vec3 ww = normalize(ta - ro);\n    vec3 uu = normalize(cross(ww, vec3(0.0, 1.0, 0.0)));\n    vec3 vv = normalize(cross(uu, ww));\n    vec3 rd = normalize(uv.x * uu + uv.y * vv + 2.0 * ww);\n    \n    // Colors\n    vec3 jellyColor = vec3(0.2, 0.8, 0.9);\n    vec3 glowColor = vec3(0.1, 0.4, 1.0);\n    vec3 energyColor = vec3(1.0, 0.3, 0.7);\n    vec3 col = vec3(0.0);\n    float alpha = 0.0; // Initialize alpha\n    \n    // Ray marching\n    float totdist = 0.0;\n    float d;\n    vec3 p;\n    \n    for(int i = 0; i < 128; i++) {\n        p = ro + totdist * rd;\n        d = map(p, t);\n        if(d < 0.001 || totdist > 20.0) break;\n        totdist += d;\n    }\n    \n    if(totdist < 20.0) {\n        vec2 e = vec2(0.001, 0.0);\n        vec3 n = normalize(vec3(\n            map(p + e.xyy, t) - map(p - e.xyy, t),\n            map(p + e.yxy, t) - map(p - e.yxy, t),\n            map(p + e.yyx, t) - map(p - e.yyx, t)\n        ));\n        \n        // Enhanced lighting\n        float diff = max(dot(n, normalize(vec3(1.0, 1.0, -1.0))), 0.0);\n        float spec = pow(max(dot(reflect(normalize(vec3(1.0, 1.0, -1.0)), n), rd), 0.0), 32.0);\n        float fresnel = pow(1.0 - max(dot(n, -rd), 0.0), 4.0);\n        \n        // Plasma-based coloring\n        float plasmaVal = plasma(p * 5.0, t);\n        vec3 baseColor = mix(jellyColor, energyColor, plasmaVal * 0.5 + 0.5);\n        \n        // Final color calculation with transparency\n        col = baseColor * (diff * 0.5 + 0.5);\n        col += glowColor * fresnel * 0.8;\n        col += spec * glowColor * 0.5;\n        col += plasmaVal * energyColor * 0.3;\n        \n        // Increased energy string visibility\n        float stringIntensity = smoothstep(0.02, 0.0, energyStrings(p - vec3(sin(t * 0.5) * 0.2, \n                                                                            sin(t * 0.7) * 0.1, \n                                                                            cos(t * 0.3) * 0.2) - vec3(0.0, -0.3, 0.0), t));\n        col += energyColor * stringIntensity * 2.0; // Increased energy string glow\n        \n        // Subsurface scattering\n        float sss = pow(max(dot(rd, -normalize(vec3(1.0, 1.0, -1.0))), 0.0), 2.0);\n        col += baseColor * sss * 0.8;\n        \n        // Modified transparency calculation\n        alpha = fresnel * 0.5 + 0.3;\n        if (length(col) < 0.1) alpha = 0.0; // Make dark areas completely transparent\n        \n        // Distance fade with transparency preservation\n        col *= exp(-totdist * 0.1);\n        alpha *= exp(-totdist * 0.1);\n    } else {\n        // Make background completely transparent\n        col = vec3(0.0);\n        alpha = 0.0;\n    }\n    \n    // Add volumetric glow\n    col += glowColor * 0.01;\n    col += energyColor * pow(max(dot(rd, normalize(vec3(1.0, 1.0, -1.0))), 0.0), 16.0) * 0.2;\n    \n    // Post-processing\n    col = pow(col, vec3(0.4545));\n    col = mix(col, col * vec3(1.0, 1.2, 1.4), 0.3);\n    \n    // Final output with modified alpha\n    fragColor = vec4(col, alpha);\n}","name":"Image","description":"","type":"image"}]}