{"ver":"0.1","info":{"id":"M33SDN","date":"1719088827","viewed":109,"name":"cathedral eyes visualizer","username":"technowizard","description":"oh yes oh yes","likes":9,"published":1,"flags":4,"usePreview":0,"tags":["visualizer","pixelart","microphone"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"# define depth 2.\n# define grid (16.*sin(iTime/5.) +32.)\n\n# define vol(cds)(pow(texture(iChannel0, vec2(cds.x*.25-.5, cds.y*.3)).r,1.1))\n# define bloom()(vol(vec2(-1.65,1.)))\n# define sharp()(vol(vec2(.45,0.)))\n\n# define pixelate true\n\n\n// todo radial rays, noise\n// more detail on the cathedral\n\nvec3 palette (float t){\n vec3 a = vec3(0.688, 0.478, 0.758);\n vec3 b = vec3(0.158, 0.408, 0.158);\n vec3 c = vec3(0.918, 0.488, 0.948);\n vec3 d = vec3(0.800, 0.448, 0.308);\n \n return a + b * cos (6.28318*(c*t+d) );\n}\n\nfloat Bayer2(vec2 a) {\n    a = floor(a);\n    return fract(a.x / 2. + a.y * a.y * .75);\n}\n\n#define Bayer4(a)   (Bayer2 (.5 *(a)) * .25 + Bayer2(a))\n#define Bayer8(a)   (Bayer4 (.5 *(a)) * .25 + Bayer2(a))\n\nvec2 radMap(vec2 uv){\n    vec2 RadUv = vec2(0.,0.);    \n\tRadUv.x = ((atan(uv.x,uv.y) * 0.15915494309189533576888376337251 /*OneOverTau*/) ) +0.5;\n    RadUv.y = length(uv);\n    return RadUv;\n}\n\n// by iq\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    float c = length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n    float bl = bloom()*.05;\n    return smoothstep(.9+bl,1.-bl,1.-c);\n}\n\n// by iq\nfloat sdCross( in vec2 p, in vec2 b, float r ) \n{\n    p = abs(p); p = (p.y>p.x) ? p.yx : p.xy;\n    vec2  q = p - b;\n    float k = max(q.y,q.x);\n    vec2  w = (k>0.0) ? q : vec2(b.y-p.x,-k);\n    float c = sign(k)*length(max(w,0.0)) + r;\n      float bl = bloom()*.05;\n    return smoothstep(.9+bl,1.-bl,1.-c);\n}\n\n// by iq\nfloat sdTunnel( in vec2 p, in vec2 wh )\n{\n    p.x = abs(p.x); p.y = -p.y;\n    vec2 q = p - wh;\n    \n    vec2 v1 = vec2(max(q.x,0.0),q.y);\n    float d1 = dot(v1,v1);\n    q.x = (p.y>0.0) ? q.x : length(p)-wh.x;\n    vec2 v2 = vec2(q.x,max(q.y,0.0));\n    float d2 = dot(v2,v2);\n    float d = sqrt( min(d1,d2) );\n    \n    float c =(max(q.x,q.y)<0.0) ? -d : d;\n    \n    float bl = bloom()*.05;\n    return smoothstep(.9+bl,1.-bl,1.-c);\n}\n\n// by iq\n\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    float c = -sqrt(d.x)*sign(d.y);\n    float bl = bloom()*.05;\n    return smoothstep(.9+bl,1.-bl,1.-c);\n}\n\nfloat window( vec2 uv, float r) {\n    float c = 0.;\n    c -= smoothstep(.9+.05*bloom(),1.-.05*bloom(),r*1.4-length(uv));\n    c += sdCross(uv, vec2(.5*(r-.1),.13*(r-.6)), .05);\n    return c;\n}\n\nfloat circ (vec2 uv, float r ){\n    return length(uv)-r;\n}\n\nfloat Hash21(vec2 p){\n    p = fract(p*vec2(123.34,456.821));\n    p += dot(p,p+45.32);\n    return fract(p.x*p.y);\n}\n\n\nfloat noise( in vec2 p )\n{\n    vec2 i = vec2(floor( p ));\n    vec2 f = fract( p );\n\n    // cubic interpolant\n    vec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( Hash21( i + vec2(0.,0.) ), \n                     Hash21( i + vec2(1.,0.) ), u.x),\n                mix( Hash21( i + vec2(0.,1.) ), \n                     Hash21( i + vec2(1.,1.) ), u.x), u.y);\n}\n\nfloat cathedral (vec2 uv){\n    float c = 0.;\n    uv*=10.;\n    uv+=vec2(0.,.0);\n    c += sdBox(uv+vec2(0.,.3),vec2(1.5,1.));\n    c += sdTriangleIsosceles(uv*vec2(1.,-1.)+vec2(1.25,2.3),vec2(.17,1.6));\n    c += sdTriangleIsosceles(uv*vec2(1.,-1.)+vec2(-1.25,2.3),vec2(.17,1.6));\n  \n    \n    c += sdTunnel(uv+vec2(0.,-1.1),vec2(.7,.6));\n    c = clamp(c,.0,1.);\n    float door = sdTunnel(uv+vec2(0.,-.0), vec2(.3,1.4));\n    c += window(uv+vec2(0.,-1.15),1.);\n    // small windows\n    c += window(uv+vec2(-.7,0.7),.8);\n    c += window(uv+vec2(-1.2,0.7),.8);\n    c += window(uv+vec2(-.95,-0.1),.9);\n    c += window(uv+vec2(.95,-0.1),.9);\n    c += window(uv+vec2(.7,0.7),.8);\n    c += window(uv+vec2(1.2,0.7),.8);\n    \n    \n    c-= door;\n    c = clamp(c,.0,1.);\n    \n    return c;\n}\n\n\nfloat eye (vec2 uv, float o, float fade) {\n    vec2 uv2=abs(uv)+vec2(0.,0.2);\n    float c = 0.;\n    float d1 = circ(uv2,.6);\n    float b = bloom()*.025;\n    c+= fade * clamp(smoothstep(.925+b,.975-b,1.-abs(d1)),0.,1.);\n    float d2 = circ(uv2,.3);\n    c+= fade * clamp(smoothstep(.8+b,.85-b,1.-abs(d2)),0.,1.);\n    float c1 = fade*smoothstep(0.0+b*1.5,.075-b*1.5,.05-circ(uv,.2));\n    c -= c1;\n    if(c1 >= .1){\n       c +=fade*cathedral(uv/(o)*.5);\n    }\n     return c;   \n\n}\n\nfloat micSample(vec2 uv){\n    float c = 0.;\n  // volume sampler\n    vec2 coords = vec2(.45,0.);\n    if(length(uv-coords)<.05) c = 1.;\n    else if(uv.x<.9) c = vol(uv);\n    else c = vol(coords);\n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    if(pixelate) uv = floor(uv*grid)/grid;\n\n    float c = 0.;\n    \n    for(float i = 0.; i<1.; i+= 1./depth){\n        float o = fract(iTime/30.+i);\n        float fade = smoothstep(.0,.01,1.-o);\n        fade *= smoothstep(.0,.01,o);\n        o = o*o;\n        vec2 uv1 = uv / (.1+(o*o)*40.);\n        float r = eye (uv1, o, fade);\n        c = max(c,r);\n    }\n    \n    vec2 uvr = radMap(uv);\n    \n    // noise\n    clamp(c,0.,1.);\n    float n = 0.;\n    /**/\n    n += (.5+.5*sin(uvr.x*(3.1415926535 * 20.)-iTime+2.*uvr.y));    \n    float noiseRes = 5.+10.*sharp();\n    n += (sharp()*.5+.25)*noise(vec2(sin(iTime+uvr.x*noiseRes*3.14),uvr.y*2.*noiseRes-iTime));\n    if(pixelate) n += Bayer8((uv+vec2(5.,5.))*grid)*.75;\n    n *= max(0.,uvr.y-.25);\n    c += n;\n\n    /**/\n    /**/\n    // stars\n    float s = 0.;\n    s += smoothstep(.9-.1*sharp(),1.,noise(vec2(sin(uvr.x*30.*3.14+iTime+sin(-uvr.y*2.)),uvr.y*3.-iTime*5.)));\n    s *= max(0.,uvr.y-.05);\n    c += s;\n    /**/\n    /**/\n    // sound\n    /**/\n    vec2 uvr1 = uvr*vec2(sin(iTime*5.)+3.14*4.,4.);\n    c+= vol(uvr1) * max(0.,uvr.y-.1);\n    /**/\n  \n    vec3 col = vec3(c);\n    /**/\n    // colorize\n    c=sqrt(c);\n    c = floor(c*7.)/7.;\n    col = palette(1.-c);\n    /**/\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n}","name":"Image","description":"","type":"image"}]}