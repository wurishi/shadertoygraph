{"ver":"0.1","info":{"id":"3tXXz8","date":"1561979572","viewed":309,"name":"Rectangular to Polar UV","username":"nebbul","description":"simple function that make rectangular UVs Polar","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["uv","polarcoordinates"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TileU 1.0\n#define TileV 2.0\n\n#define M_PI 3.1415926535897932384626433832795\n\n// polar coordinate UVs\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    // define the UVs, make them square by using the same iRes dimension\n\tvec2 uv = fragCoord.xy/iResolution.xy;\n\n\tvec2 delta = uv - vec2(0.5,0.5);\n\tfloat radius = length(delta);\n\tfloat angle = atan(delta.y, delta.x) / 2. / M_PI;\n\n    radius *= TileU;\n    angle *= TileV;\n    \n    vec2 polarUV = vec2(radius, angle);\n\n    float mixer = smoothstep(0.,1., (1.5*sin(iTime)+1.)/2.);\n    vec2 finalUV = mix(uv, polarUV, mixer);\n\n    fragColor = texture(iChannel0, finalUV);\n}","name":"Image","description":"","type":"image"}]}