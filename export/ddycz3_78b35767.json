{"ver":"0.1","info":{"id":"ddycz3","date":"1696374331","viewed":58,"name":"reconstruct rect from triangular","username":"jt","description":"Reconstruct rectangular coordinates given integer triangular coordinates (and parity and side).\nUsed for example in [url=https://www.shadertoy.com/view/ddyyDm]tri dir box stacks + tri terrain[/url].","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","3d","grid","grid","barycentric","rectangular","project","triangular","coordinate","reconstruct","lift"],"hasliked":0,"parentid":"DtBBzV","parentname":"three directions city grid tiles"},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/ddycz3 reconstruct rect from triangular, 2023 by jt\n\n// Reconstruct rectangular coordinates given integer triangular coordinates (and parity and side).\n// Used for example in https://www.shadertoy.com/view/ddyyDm tri dir box stacks + tri terrain\n\n// tags: 2d, 3d, lift, project, reconstruct, rectangular, coordinate, grid, triangular, barycentric, grid\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvec3 permute(uint direction, vec3 v)\n{\n    return direction == 2u ? v.zxy : direction == 1u ? v.yzx : v.xyz;\n}\n\nivec3 permute(uint direction, ivec3 v)\n{\n    return direction == 2u ? v.zxy : direction == 1u ? v.yzx : v.xyz;\n}\n\nivec2 reconstruct(bool even, bool side, ivec3 tile) // reconstruct rectangular coordinates given only integral triangular coordinates with parity and triangle side\n{\n    if((tile.z & 1) == 0)\n    {\n        side = !side;\n        even = !even;\n    }\n    return ivec2((tile.y-tile.x+(even?0:(side?-1:+1)))>>1,tile.z);\n}\n\n#define scale (20.0)\n\nvoid mainImage( out vec4 o, in vec2 I )\n{\n    vec2 R = iResolution.xy;\n    I = (2.0 * I - R) / R.y; // mind aspect ratio\n    // coordinate-system along plane orthogonal to diagonal (1,1,1)\n    mat2x3 T =\n        mat2x3\n        (\n            normalize(vec3(-1,+1, 0)),\n            normalize(vec3(-1,-1,+2))\n        );\n    vec3 triangular = T*I*scale*sqrt(1.5);\n\n    ivec3 tile = ivec3(floor(triangular));\n    bool even = ((tile.x ^ tile.y ^ tile.z) & 1) == 0;\n    vec3 fractional = fract(triangular);\n    //vec3 fractional = triangular - vec3(tile);\n    if(!even) fractional = 1.0 - fractional;\n\n    uint choice = uint(iTime) % 3u;\n    \n    bool side = dot(vec2(-1,+1), permute(choice, fractional).xy) > 0.0;\n    //fractional = permute(choice, fractional);\n    //bool side = fractional.y > fractional.x;\n    ivec2 local = reconstruct(even, side, permute(choice, tile));\n\n    o = texture(iChannel0, 0.5+vec2(local)/scale/2.);\n    //o = texture(iChannel0, 0.5+vec2((permute(choice, tile).y-permute(choice, tile).x)>>1,permute(choice, tile).z)/scale/2.0); // without reconstruction\n\n    if(iMouse.z > 0.0)\n    {\n        o = mix(o, vec4(0.2*(choice == 2u ? vec3(0,0,1) : choice == 1u ? vec3(0,1,0) : vec3(1,0,0)), 1.0), 0.5);\n    }\n\n    o = sqrt(o); // gamma\n}\n","name":"Image","description":"","type":"image"}]}