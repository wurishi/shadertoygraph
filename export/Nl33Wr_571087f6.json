{"ver":"0.1","info":{"id":"Nl33Wr","date":"1636366219","viewed":188,"name":"Jonix water ripple","username":"Hultsborn10","description":"A simulation of water ripples inspired by CodingTrain.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["waterripplejonix"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**************************************************************/\n//Try a value between 5.0 and 100.0 \n//and fullscreen (if your GPU can handle it...)\nconst float WAVE_NR = 10.0;\n\n/*************************************************************/\n    \n\nvoid mainImage( out vec4  \nfragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // Move origin so x and y goes from -0.5 to 0.5\n    uv -= 0.5;\n    // Scale x coordinate to rectangular window (x is about -0.8 to 0.8)\n    uv.x *= iResolution.x / iResolution.y;\n \n    float WAVE_WIDTH = 0.02/sqrt(WAVE_NR);\n    //nr_factor allows the waves to live for 10 seconds\n    float nr_factor = WAVE_NR/10.0;\n    //Background color\n    //solid color\n    vec3 col = vec3(0.1,0.4,0.7);\n    //soft moving bluish color\n    float red   = (sin(iTime*0.354)+1.0)*0.15;\n    float green = (sin(iTime*0.123)+1.0)*0.15+0.25;\n    float blue  = (sin(iTime*0.678)+1.0)*0.25+0.5;\n    col = vec3(red,green,blue);\n    //White color (for wave)\n    vec3 white = vec3(1.0);\n    //\"Integer\" part of iTime (adjusted with nr_factor if more than 10 waves)\n    float intTime = floor(iTime*nr_factor)/nr_factor;\n    //Create a loop that looks back in time\n    for (float i = 0.0; i < WAVE_NR; i++)\n    {\n        //Calculate time backwards\n        float iT = (intTime - i/nr_factor);\n        //See where the startPoint was some time ago\n        vec2 startPoint = 0.5*vec2(sin(iT*0.95), cos(iT*0.67));\n        //Get the distance from a previous startpoint to the current point (pixel)\n        float dist = distance(uv,startPoint);\n        //The edge of the wave has a radius that grows.\n        //The further back in time, the larger the radius\n        //The radius goes from 0.0 up to 1.0, because i goes from 0.0 to 10.0\n        float waveRadius = (fract(iTime*nr_factor)/nr_factor + i/nr_factor)/10.0;\n        //Compare the distance to the wave radius\n        float wave = abs(dist-waveRadius);\n        //If the distance and the radius are close then color this pixel\n        if (wave < WAVE_WIDTH){\n            //The center of the wave edge should be most intense\n            //float intensity = (WAVE_WIDTH-wave)*50.0;\n            float intensity = 0.5*smoothstep(WAVE_WIDTH,0.5*WAVE_WIDTH,wave);\n            //Create fading effect\n            //If the distance is small, the color should be intense\n            //If the distance is large, the color should be pale\n            intensity = (1.0-dist)*intensity;\n            //Use intensity to make white color\n            col += white*intensity;\n            \n        }\n        //Testing the path of startpoint\n        //if (dist < 0.1) col += vec3(0.5,0.0,0.5)/i;\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}