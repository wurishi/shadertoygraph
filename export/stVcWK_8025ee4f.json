{"ver":"0.1","info":{"id":"stVcWK","date":"1662288779","viewed":192,"name":"ray marching inu","username":"soncho_E","description":"「Shaderの集い」サーバー アイコンコンテスト用\n未整理です。\n\n【参考にさせていただいた記事】　\nレイマーチングってそもそもなに？\nhttps://qiita.com/doxas/items/cafb2bd2e7cfe9ba323f\nレイマーチング基礎\nhttps://logicalbeat.jp/blog/8203/\n後光の書き方\nhttps://qiita.com/doxas/items/2cae64200d7b1d285ac1\n3D楕円の距離関数\nhttps://qiita.com/mur","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI     3.14159265\n\n//頭のサイズを定数として定義\nconst float head_size=0.9;\nconst vec3 blackParts_color=vec3(.9,.8,.5);\nconst vec3 head_color=vec3(.3,.2,.2);\n\nconst vec3 sunColor=vec3(.8,.7,.4);\n\n\n/// 回転行列の生成----------------------\n//https://wgld.org/d/glsl/g017.html\nvec3 rotate(vec3 p, float angle, vec3 axis)\n{\n    vec3 a = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float r = 1.0 - c;\n    mat3 m = mat3(\n        a.x * a.x * r + c,\n        a.y * a.x * r + a.z * s,\n        a.z * a.x * r - a.y * s,\n        a.x * a.y * r - a.z * s,\n        a.y * a.y * r + c,\n        a.z * a.y * r + a.x * s,\n        a.x * a.z * r + a.y * s,\n        a.y * a.z * r - a.x * s,\n        a.z * a.z * r + c\n    );\n    return m * p;\n}\n\n//マウス座標からクオータニオン取得----------------------------------\n//取得したマウス座標をもとに回転軸ベクトルと回転角を割り出しクォータニオンを生成。\n//https://wgld.org/d/webgl/w033.html\n\nvec3 getRotatePosFromMouse(vec2 pos,vec3 rayPos){\n\n\n    float canvasW = iResolution.x;\n    float canvasH = iResolution.y;\n    float wh = 1.0 / sqrt(canvasW * canvasW + canvasH * canvasH);\n    \n    //float x = e.clientX - c.offsetLeft - cw * 0.5;\n    //float y = e.clientY - c.offsetTop - ch * 0.5;\n    //canvas の中心点からマウスポインタまでの相対的な位置を調べる\n    vec2 mouse_pos=(iMouse.xy*2.-iResolution.xy)/min(iResolution.x,iResolution.y);\n    \n    //軸ベクトルと回転角を算出\n    float sq = sqrt(mouse_pos.x * mouse_pos.x + mouse_pos.y * mouse_pos.y);\n    float angle = sq * 2.0 * PI;\n    if(angle <-90.0){\n        angle = -90.0;\n    }\n    if(angle >90.0){\n        angle = 90.0;\n    }\n    if(sq != 1.0){\n        sq = 1.0 / sq;\n        mouse_pos.x *= sq;\n        mouse_pos.y *= sq;\n        }\n    vec3 rotatePos = rotate(rayPos, -angle, vec3(-mouse_pos.y,mouse_pos.x, 0.0));\n    //vec3 rotatePos = vec3(rayPos.x,rayPos.y,rayPos.z);\n    return rotatePos;\n    \n}\n\n/// 基本の距離関数----------------------\n\n// 楕円体の距離関数\n// 鼻パーツに使用\n//https://qiita.com/muripo_life/items/9d8043ea24295c310f73\nfloat ellipsoidDistance(vec3 p,vec3 r)\n{\n    return(sqrt(p.x/r.x*p.x/r.x+p.y/r.y*p.y/r.y+p.z/r.z*p.z/r.z)-1.)*min(min(r.x,r.y),r.z);\n}\n\n//トーラスの距離関数\n//https://qiita.com/muripo_life/items/1736da4175028e3fb2b7\n//https://kaiware007.hatenablog.jp/entry/2020/12/03/233714\n\nfloat sdTorus(vec3 p,float largeRadius,float smallRadius)\n{\n    vec2 t = vec2(largeRadius,smallRadius);\n    vec2 q = vec2(length(p.xz)-t.x,p.y);\n    return length(q)-t.y;\n}\n\n/// オブジェクト同士を補間して結合する関数----------------------\n//https://wgld.org/d/glsl/g016.html\nfloat smoothMin(float distance1, float distance2, float intensity){\n    float h = exp(-intensity * distance1) + exp(-intensity * distance2);\n    return -log(h) / intensity;\n}\n\n///各パーツの距離関数作成-------------------------------------\n// オブジェクトの中心を原点とした時の引数の位置と球の距離を返す\n //現在のレイ地点からの顔までの距離を取得\n\n// 顔パーツの距離関数\nfloat headDistance(vec3 rayPos)\n{\n    ///ベースの頭作成---------\n    float head_distance = length(rayPos+vec3(0.))-head_size;\n    \n    \n    ///眉間しわ作成---------\n    \n    //頭のサイズに合わせて眉間しわ調整\n    vec3 shiwa_l_pos = vec3(head_size*0.13, head_size*-0.45,-head_size*0.73);\n    vec3 shiwa_r_pos = vec3(head_size*-0.15, head_size*-0.47,-head_size*0.72);\n    \n    //眉間しわの位置を回転調整\n    vec3 shiwa_l_rotatePos = rotate(rayPos+shiwa_l_pos, radians(-85.0), vec3(0,1,1)); \n    vec3 shiwa_r_rotatePos = rotate(rayPos+shiwa_r_pos, radians(85.0), vec3(0,1,1)); \n    \n    //眉間しわをトーラスで作成\n    float shiwa_l_torus =  sdTorus(shiwa_l_rotatePos,  head_size*0.15, head_size*0.06);\n    float shiwa_r_torus =  sdTorus(shiwa_r_rotatePos,  head_size*0.14, head_size*0.06);\n    \n    float shiwa_torus = smoothMin(shiwa_l_torus,shiwa_r_torus,300.0);\n    \n    ///鼻タブ作成---------\n    \n    //頭のサイズに合わせて鼻タブサイズ調整\n    float hanatabu_size=head_size*.2;\n\n    //頭のサイズに合わせて鼻タブ位置調整\n    vec3 hanatabu_l_pos=vec3(head_size*.15,0.0,-head_size*0.95);\n    vec3 hanatabu_r_pos=vec3(-hanatabu_l_pos.x,-hanatabu_l_pos.y,hanatabu_l_pos.z);\n\n    //現在のレイ地点からの鼻タブまでの距離を取得\n    float hanatabu_l_sphere=length(rayPos+hanatabu_l_pos)-hanatabu_size;\n    float hanatabu_r_sphere=length(rayPos+hanatabu_r_pos)-hanatabu_size;\n\n    //左右の鼻タブをなめらかに補間和集合\n    float hanatabu = smoothMin(hanatabu_l_sphere,hanatabu_r_sphere,130.0);\n\n    ///唇作成---------\n\n    //頭のサイズに合わせて唇の位置調整\n    vec3 kutibiru_pos = vec3(0.0, head_size*0.15,-head_size*0.95);\n    //唇の位置をx軸を基準に90度回転\n    vec3 kutibiru_rotatePos = rotate(rayPos+kutibiru_pos, radians(90.0), vec3(1,0,0)); \n    //唇をトーラスで作成\n    float kutibiru_torus =  sdTorus(kutibiru_rotatePos, head_size*0.1, head_size*0.07);\n    \n    //口の穴作成---------\n    //唇に合わせて二重顎の位置調整\n    vec3 ana_pos = vec3(kutibiru_pos.x, kutibiru_pos.y, kutibiru_pos.z+0.1);\n    float ana_sphere=length(rayPos+ana_pos)-0.1;\n\n    \n    ///二重顎作成---------\n\n    //唇に合わせて二重顎の位置調整\n    vec3 ago_pos = vec3(kutibiru_pos.x, kutibiru_pos.y + 0.07, kutibiru_pos.z+0.05);\n    //唇の位置をx軸を基準に90度回転\n    vec3 ago_rotatePos = rotate(rayPos+ago_pos, radians(90.0), vec3(1,0,0));\n    //二十顎をトーラスで作成\n    float ago_torus =  sdTorus(ago_rotatePos, head_size*0.15, head_size*0.05);\n\n    //パーツを合体----------\n    \n    float base = smoothMin(head_distance,shiwa_torus,100.0);\n    base = smoothMin(base,smoothMin(kutibiru_torus,ago_torus,130.0),100.0);\n    base = min(hanatabu,base);\n    //口に穴をあける\n    //base = min(base,ana_sphere);\n    base = max(base,-ana_sphere);\n    return base;\n\n}\n\n//目のパーツの距離関数\nfloat eyeDistance(vec3 rayPos)\n{\n    //頭のサイズに合わせて目のサイズ調整\n    float eye_size=head_size*.1;\n\n    //頭のサイズに合わせて目の位置調整\n    vec3 eye_l_pos=vec3(head_size*.3,head_size*-.3,-head_size*0.9);\n    vec3 eye_r_pos=vec3(head_size*-.3,head_size*-.3,-head_size*0.9);\n\n    //現在のレイ地点からの目までの距離を取得\n    float eye_l_sphere=length(rayPos+eye_l_pos)-eye_size;\n    float eye_r_sphere=length(rayPos+eye_r_pos)-eye_size;\n\n    return min(eye_l_sphere,eye_r_sphere);\n}\n\n//鼻パーツの距離関数\nfloat noseDistance(vec3 rayPos)\n{\n    //頭のサイズに合わせて鼻のサイズ調整\n    vec3 nose_size=vec3(head_size*.12,head_size*.05,head_size*.08);\n\n    //頭のサイズに合わせて鼻の位置調整\n    vec3 nose_pos=vec3(0.,head_size*-.18,-head_size*0.95);\n\n    //現在のレイ地点からの鼻までの距離を取得\n    float nose_ellipsoid=ellipsoidDistance(rayPos+nose_pos,nose_size);\n    return nose_ellipsoid;\n}\n\n//頭目鼻の距離関数を合体させる\nfloat getAllDistance(vec3 rayPos)\n{\n    //頭と目と鼻の距離関数を和集合する\n    float allDistance = min(headDistance(rayPos),min(eyeDistance(rayPos),noseDistance(rayPos)));\n    return allDistance;\n}\n\n//頭目鼻の距離関数を使用してカラーを変更する\nvec3 getAllColor(vec3 rayPos)\n{\n    float blackParts_distance=min(eyeDistance(rayPos),noseDistance(rayPos));\n    //複数のオブジェクトを描く場合には、戻り値として距離関数の結果が小さい（0に近い）ほうを採用する\n    vec3 color=headDistance(rayPos) < blackParts_distance ? blackParts_color:head_color;\n    return color;\n}\n\n///法線処理-------------------------------------\n\n// 法線ベクトル取得関数\n// レイがぶつかった位置を偏微分をして球の法線ベクトルを計算\nvec3 getNormal(vec3 rayPos)\n{\n    float delta=.0001;\n    return normalize(vec3(\n            getAllDistance(rayPos)-getAllDistance(vec3(rayPos.x-delta,rayPos.y,rayPos.z)),\n            getAllDistance(rayPos)-getAllDistance(vec3(rayPos.x,rayPos.y-delta,rayPos.z)),\n            getAllDistance(rayPos)-getAllDistance(vec3(rayPos.x,rayPos.y,rayPos.z-delta))\n        ));\n}\n///背景-------------------------------------\n\n//後光作成関数\nvec3 createGokou(float distance)\n{\n    //頭のサイズに合わせて後光を作成\n\n    float outline=1.-distance;\n    float ring=abs(.01/(distance-head_size));\n    vec3 gokou=sunColor*outline+ring;\n    return gokou;\n}\n\n//後光マスク作成関数\nvec3 createGokouMask(float distance)\n{\n    vec3 white=(1.-distance)*vec3(1.,1.,1.);\n    vec3 black=distance*vec3(0.,0.,0.);\n    vec3 mask=white+black;\n    return mask;\n}\n\n// エントリポイント-------------------------------------\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    ///原点の定義 ---------------------------------\n    // 原点が中心となる二次元座標を生成する\n    // 描画位置がpxで返ってくるので-1.0 ~ +1.0に正規化\n    vec2 pos=(fragCoord.xy*2.-iResolution.xy)/min(iResolution.x,iResolution.y);\n\n    ///原点からの距離を定義---------------------------------\n    float distance_from_origin=length(pos);\n\n    ///カラーの定義--------------------------------\n    vec3 col= createGokou(distance_from_origin);\n\n    ///ライトの定義---------------------------------\n\n    // ライトの方向と色を決定\n    vec3 lightDir=normalize(vec3(.6,0.9,.9));\n    vec3 lightCol=vec3(1.,1.,1.);\n\n    ///カメラの定義---------------------------------\n\n    // カメラの位置\n    vec3 cameraPos=vec3(0.,0.,300.);\n    // カメラの向き\n    vec3 cameraDir=vec3(0.,0.,-1.);\n    // カメラの天面の向き\n    vec3 cameraUP=vec3(0.,1.,0.);\n    // カメラの進行方向と天面方向から横方向を計算\n    vec3 cameraSide=cross(cameraDir,cameraUP);\n    // フォーカスする深度\n    float targetDepth=1.;\n\n    ///レイの定義---------------------------------\n\n    // カメラパラメータから三次元のレイの情報を生成する\n    vec3 ray=normalize(cameraSide*pos.x+cameraUP*pos.y+cameraDir*targetDepth);\n\n    // レイの方向(カメラから描画位置へのベクトル)を決定\n    vec3 rayDir=normalize(vec3(pos,0.)-cameraPos);\n\n    // 現在のレイの先端座標\n    vec3 rayPos=cameraPos;\n\n    // レイが進んだ総距離\n    float rayLen=0.;\n\n    // 距離関数の戻り値を格納するための変数\n    float dist=0.;\n\n    ///レイマーチンググループ---------------------------------\n\n    // 今回はレイを進める回数が最大256回\n    for(int i=0;i<256;i++)\n    {\n        // レイの先端と球の距離を計測\n        \n        vec3 rotatePos  = vec3(getRotatePosFromMouse(pos,rayPos));\n        //vec3 rotatePos = rotate(rayPos, radians(-15.0), vec3(1,1,-0.5)); \n        float distance=getAllDistance(rotatePos);\n\n        \n        // 距離が限りなく0に近い＝レイと球が衝突している\n        if(distance<.00001)\n        {     \n            ///ハーフランバート拡散\n            //https://megumisoft.hatenablog.com/entry/2015/10/09/224207\n            // レイが衝突した位置における法線ベクトルを取得\n            vec3 normal=getNormal(rotatePos);\n            \n            // 法線ベクトルとライトのベクトルで内積をとる(ランバート反射)\n            float diff=dot(normal,lightDir);\n            \n            //影の部分がかなり暗くなってしまうので、明るく補正をかける\n            float harfDiff = (diff * 0.5 + 0.5)*(diff * 0.5 + 0.5);\n            \n            // 内積結果とマテリアルの色とライトの色をかけて描画色を決定\n            vec3 diffuseReflection =vec3(harfDiff)*getAllColor(rotatePos)* lightCol;\n            \n            // 環境\n            // https://megumisoft.hatenablog.com/entry/2015/10/09/224207\n\t        vec3 ambientColor = sunColor*0.4;    \n            col = diffuseReflection +  ambientColor;\n            \n\n            break;\n        }\n        //頭と背景の後光をlerpで組み合わせ\n        vec3 gokou = createGokou(distance);\n        vec3 gokouMask=createGokouMask(distance);\n        //col = mix(col,gokou,0.1);\n        col = col;\n        \n        // レイを進める\n        //rayLen += distance;\n        //rayPos += cameraPos + ray *rayLen;\n        rayPos+=rayDir*distance;\n\n    }\n\n    fragColor=vec4(col,1.0);\n\n}","name":"Image","description":"","type":"image"}]}