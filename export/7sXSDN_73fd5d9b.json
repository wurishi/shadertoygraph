{"ver":"0.1","info":{"id":"7sXSDN","date":"1618648340","viewed":121,"name":"Kozhemyak_v5v6_328","username":"kv_msu","description":"Выполнено: \n1)вся база\n2)резкие тени\n3)мягкие тени\n4)куб-мапа\n5)Ambient Occlusion\n6)Окружение в виде текстурированной плоскости","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["water","icosaedron"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rr","filepath":"/media/a//media/previz/cubemap00.png","previewfilepath":"/media/ap//media/previz/cubemap00.png","type":"cubemap","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nfloat rand(vec2 p)\n{\n    return fract(sin(dot(p, vec2(93.9898, 60.1414))) * 43758.5453);\n}\n\nconst float INF = 1e10;\nconst vec3 CAMERA_POS = vec3(3,2,7);\nvec3 randDir;\nconst int EMISSION = 0;\nconst int DIFFUSE = 1;\nconst int REFLECTION = 2;\nconst int REFRACTION = 3;\n\nconst vec3 PLANE_COLOR = vec3(1, 1, 1);\nconst float PLANE_HEIGHT = -1.4;\n\nstruct Light {\n    vec3 pos;\n    float radius;\n    vec3 color;\n    float intensity;\n};\n\nconst int LIGHT_NUM = 2;\n\nLight Lights[LIGHT_NUM] = Light[LIGHT_NUM](\nLight(vec3(-3, 1.5, 0), 0.5, vec3(0.3, 0.5, 1), 20.0f),\nLight(vec3(3, 1.5, 0), 0.25, vec3(1.0, 1, 1), 20.0f));\n\nconst float CYL_RADIUS = 1.0;\nconst float CYL_SLOPE = 0.2;\nconst float CYL_HEIGHT = 0.5;\nconst vec3 CYL_BASE_POS = vec3(0, PLANE_HEIGHT + 0.001, 0);\n\nconst vec3 ICO_COLOR = vec3(1.0, 1.0, 1.0);\n\n//const vec3 ICO_COLOR = vec3(0.0, 0.8, 1.0);\n\nconst float AIR_N = 1.0;\nconst float GLASS_N = 1.5;\nconst float WATER_N = 1.33;\n\nconst float BLUR_RATE = 0.05;\nconst float BLUR_RATE_2 = 0.075;\n\nvec3 RAND_DIR;\n\nconst float ICO_BASE = CYL_HEIGHT + CYL_BASE_POS.y + 1.0;\nconst vec3 ICO_CENTRE = vec3(0.0, 1.11 + ICO_BASE, 0.0);\n\nstruct Cube {\n    vec3 centre;\n    float size;\n    int type;\n};\n\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame) {\n    return fract(sin(dot(vec3(frame), vec3(12.9898, 78.233, 45.5432))) * 43758.5453);\n}\n\nfloat randNormal(float frame)\n{\n    float S = 0.0;\n    for (int i = 0; i < 12; ++i) {\n        S += rand(frame);\n    }\n    return (S - 6.0) / 12.0;\n}\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir, dir);\n    float b = 2.0 * dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - 4.0 * a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = (-b - sqrt(D)) / (2.0 * a);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = (-b + sqrt(D)) / (2.0 * a);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, float radius, float height, out vec3 normal) {\n    float t = INF;\n    vec3 worldPos;\n    float curT = (height - pos.y) / dir.y;\n    if (t > curT && curT > 0.0) {\n        worldPos = curT * dir + pos;\n        if (dot(worldPos.xz, worldPos.xz) < radius) {\n            normal = vec3(0, 1, 0);\n            t = curT;\n        }\n    }\n    \n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - radius;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    curT = (-b - sqrt(D)) / a;\n    if (t > curT && curT > 0.0) {\n        worldPos = curT * dir + pos;\n        if (worldPos.y <= height) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            t = curT;\n        }\n    }\n    curT = (-b + sqrt(D)) / a;\n    if (t > curT && curT > 0.0) {\n        worldPos = curT * dir + pos;\n        if (worldPos.y <= height) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            t = curT;\n        }\n    }\n    return t;\n}\n\nfloat triple(vec3 v1, vec3 v2, vec3 v3) {\n    return dot(v1, cross(v2, v3));\n}\n\n\n\nfloat traceTriangle(vec3 pos, vec3 dir, vec3 vert[3], vec3 centre, out vec3 norm) {\n    vec3 d1 = vert[1] - vert[0];\n    vec3 d2 = vert[2] - vert[0];\n    norm = normalize(cross(d1, d2));\n    vec3 d0 = pos - vert[0];\n    float a = triple(dir, d1, d2);\n    if (a == 0.0) return INF;\n    float t = - triple(d0, d1, d2) / a;\n    if (t < 0.0) return INF;\n    \n    vec3 worldPos = pos + t * dir;\n    \n    for (int i = 0; i < 3; i++) {\n        vec3 de = vert[(i + 1) % 3] - vert[i];\n        vec3 dp = worldPos - vert[i];\n        vec3 norm1 = normalize(cross(de, dp));\n        if (dot(norm1 - norm, norm1 - norm) > 0.5) return INF;\n    }\n    \n    if (dot(vert[0] + 0.01 * norm - centre, vert[0] + 0.01 * norm - centre) < dot(vert[0] - centre, vert[0] - centre)) {\n        norm = -norm;\n    }\n    \n    return t;\n}\n\nint THREE_FACE[20 * 3] = int[20 * 3]\n(0,6,1, \n0,11,6, \n1,4,0, \n1,8,4,\n1,10,8,\n2,5,3,\n2,9,5,\n2,11,9,\n3,7,2,\n3,10,7,\n4,8,5,\n4,9,0,\n5,8,3,\n5,9,4,\n6,10,1,\n6,11,7,\n7,10,6,\n7,11,2,\n8,10,3,\n9,11,0);\n\nvec3 THREE_VERT[12] = vec3[12]\n(vec3(-0.26286500 * 2.0, 0.0000000 + ICO_BASE, 0.42532500 * 2.0),\nvec3(0.26286500 * 2.0, 0.0000000 + ICO_BASE, 0.42532500 * 2.0),\nvec3(-0.26286500 * 2.0, 0.0000000 + ICO_BASE, -0.42532500 * 2.0),\nvec3(0.26286500 * 2.0, 0.0000000 + ICO_BASE, -0.42532500 * 2.0),\nvec3(0.0000000 * 2.0, 0.42532500 * 2.0 + ICO_BASE, 0.26286500 * 2.0),\nvec3(0.0000000 * 2.0, 0.42532500 * 2.0 + ICO_BASE, -0.26286500 * 2.0),\nvec3(0.0000000 * 2.0, -0.42532500 * 2.0 + ICO_BASE, 0.26286500 * 2.0),\nvec3(0.0000000 * 2.0, -0.42532500 * 2.0 + ICO_BASE, -0.26286500 * 2.0),\nvec3(0.42532500 * 2.0, 0.26286500 * 2.0 + ICO_BASE, 0.0000000),\nvec3(-0.42532500 * 2.0, 0.26286500 * 2.0 + ICO_BASE, 0.0000000),\nvec3(0.42532500 * 2.0, -0.26286500 * 2.0 + ICO_BASE, 0.0000000),\nvec3(-0.42532500 * 2.0, -0.26286500 * 2.0 + ICO_BASE, 0.0000000)\n);\n\nfloat traceIcosaedron(vec3 pos, vec3 dir, out vec3 norm) {\n    vec3 cur_norm;\n    float t = INF, cur_t;\n    for (int i = 0; i < 20; i++) {\n        vec3 cur_face[3];\n        for (int j = 0; j < 3; j++) {\n            cur_face[j] = THREE_VERT[THREE_FACE[i * 3 + j]];\n        }\n        cur_t = traceTriangle(pos, dir, cur_face, ICO_CENTRE, cur_norm);\n        if (cur_t < t) {\n            t = cur_t;\n            norm = cur_norm;\n        }\n    }\n    \n    return t;\n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 sphNorm;\n    float sphT = traceSphere(pos, dir, 1.0, sphNorm);\n    if (sphT < dist)\n        return true;\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos - CYL_BASE_POS, dir, CYL_RADIUS, CYL_HEIGHT, cylNorm);\n    return (cylT < dist);\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = Lights[0].pos - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, Lights[0].pos + randDir * Lights[0].radius) ? 0.0 : 30.0f / distSq1;\n    vec3 toLight2 = Lights[1].pos - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, Lights[1].pos + randDir * Lights[1].radius) ? 0.0 :25.0f / distSq2;\n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * Lights[0].color\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * Lights[1].color\n        + texture(iChannel1, normal).rgb * 0.1\n    );\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    if (sinB > 1.0) return reflect(v, normal);\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 6)), rand(float(iFrame + 13)));\n    RAND_DIR = normalize(randVals - 0.5);\n    fragColor = vec4(0, 0, 0, 1.0);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5) * 2.0) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    \n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    float n1 = AIR_N;\n    float n2 = WATER_N;\n    float r = pow2(n1 - n2) / pow2(n1 + n2);\n    float n;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    float WATER_R = pow2(WATER_N - GLASS_N) / pow2(WATER_N + GLASS_N);\n    const float DIAMOND_N = 2.5;\n    float DIAMOND_R = pow2(DIAMOND_N - GLASS_N) / pow2(DIAMOND_N + GLASS_N);\n    for (int i = 0; i < LIGHT_NUM; i++) {\n        Lights[i].pos = Lights[i].pos + vec3(0, 1, 0) * randVals.x * BLUR_RATE;\n    }\n    \n   \n    vec3 curPos = CAMERA_POS;\n    vec3 curView = viewVec;\n    \n    \n    vec3 colorMult = vec3(1, 1, 1);\n    for (int i = 0; i < 10; i++) {\n        float t = INF;\n        int materialType;\n        vec3 normal;\n        vec3 color;\n        float nEnter = AIR_N;\n            \n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curView, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curView + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb;\n            normal = planeNorm;\n        }\n        vec3 lightNorm;\n        float lightT;\n        for (int i = 0; i < LIGHT_NUM; i++) {\n            vec3 lightNorm;\n            lightT = traceSphere(curPos - Lights[i].pos, curView, Lights[i].radius, lightNorm);\n            if (lightT < t) {\n                t = lightT;\n                normal = lightNorm;\n                materialType = EMISSION;\n                vec3 worldPos = curPos + t * curView;\n                color = Lights[i].color;\n            }\n        }\n        \n        vec3 icoNorm;\n        float icoT = traceIcosaedron(curPos, curView, icoNorm);\n        if (icoT < t) {\n            t = icoT;\n            normal = icoNorm;\n            if (randVals.x < GLASS_R) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= ICO_COLOR;\n                materialType = REFRACTION;\n                if (dot(curView, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n        }\n        vec3 sphNorm;\n        float sphT = traceSphere(curPos, curView, 0.4, sphNorm);\n        if (sphT < t) {\n            t = sphT;\n            normal = sphNorm;\n            vec3 worldPos = curPos + t * curView;\n            if (randVals.x < WATER_R) {\n                materialType = REFLECTION;\n            } else {\n                colorMult = texture(iChannel3, worldPos.xyz).rgb;\n                materialType = REFRACTION;\n                if (dot(curView, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = WATER_N;\n                }\n            }\n        }\n       \n        \n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos - CYL_BASE_POS, curView, CYL_RADIUS, CYL_HEIGHT, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curView + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n        if (t != INF) {\n            vec3 worldPos = t * curView + curPos;\n            if (materialType == EMISSION) {\n                fragColor.rgb = color * colorMult;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            } else if (materialType == REFLECTION) {\n                curView = reflect(curView, normal);\n                curPos = worldPos + curView * 1e-5;\n            } else if (materialType == REFRACTION) {\n                curView = refraction(curView, normal, n1, nEnter);\n                curPos = worldPos + curView * 1e-5;\n                n1 = nEnter;\n            }\n        } else {\n            fragColor.rgb = texture(iChannel1, curView).rgb * colorMult;\n        }\n    }\n    \n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"4dX3Rr","channel":0}],"code":"const int NUM_STEPS = 8;\nconst float PI\t \t= 3.141592;\nconst float EPSILON\t= 1e-3;\n#define EPSILON_NRM (0.1 / iResolution.x)\n#define AA\n\n// sea\nconst int ITER_GEOMETRY = 3;\nconst int ITER_FRAGMENT = 5;\nconst float SEA_HEIGHT = 0.6;\nconst float SEA_CHOPPY = 4.0;\nconst float SEA_SPEED = 0.8;\nconst float SEA_FREQ = 0.16;\nconst vec3 SEA_BASE = vec3(0.0,0.09,0.18);\nconst vec3 SEA_WATER_COLOR = vec3(0.8,0.9,0.6)*0.6;\n#define SEA_TIME 0.0\nconst mat2 octave_m = mat2(1.6,1.2,-1.2,1.6);\n\n// math\nmat3 fromEuler(vec3 ang) {\n\tvec2 a1 = vec2(sin(ang.x),cos(ang.x));\n    vec2 a2 = vec2(sin(ang.y),cos(ang.y));\n    vec2 a3 = vec2(sin(ang.z),cos(ang.z));\n    mat3 m;\n    m[0] = vec3(a1.y*a3.y+a1.x*a2.x*a3.x,a1.y*a2.x*a3.x+a3.y*a1.x,-a2.y*a3.x);\n\tm[1] = vec3(-a2.y*a1.x,a1.y*a2.y,a2.x);\n\tm[2] = vec3(a3.y*a1.x*a2.x+a1.y*a3.x,a1.x*a3.x-a1.y*a3.y*a2.x,a2.y*a3.y);\n\treturn m;\n}\nfloat hash( vec2 p ) {\n\tfloat h = dot(p,vec2(127.1,311.7));\t\n    return fract(sin(h)*43758.5453123);\n}\nfloat noise( in vec2 p ) {\n    vec2 i = floor( p );\n    vec2 f = fract( p );\t\n\tvec2 u = f*f*(3.0-2.0*f);\n    return -1.0+2.0*mix( mix( hash( i + vec2(0.0,0.0) ), \n                     hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ), \n                     hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\n// lighting\nfloat diffuse(vec3 n,vec3 l,float p) {\n    return pow(dot(n,l) * 0.4 + 0.6,p);\n}\nfloat specular(vec3 n,vec3 l,vec3 e,float s) {    \n    float nrm = (s + 8.0) / (PI * 8.0);\n    return pow(max(dot(reflect(e,n),l),0.0),s) * nrm;\n}\n\n// sky\nvec3 getSkyColor(vec3 e) {\n    e.y = (max(e.y,0.0)*0.8+0.2)*0.8;\n    return vec3(pow(1.0-e.y,2.0), 1.0-e.y, 0.6+(1.0-e.y)*0.4) * 1.1;\n}\n\n// sea\nfloat sea_octave(vec2 uv, float choppy) {\n    uv += noise(uv);        \n    vec2 wv = 1.0-abs(sin(uv));\n    vec2 swv = abs(cos(uv));    \n    wv = mix(wv,swv,wv);\n    return pow(1.0-pow(wv.x * wv.y,0.65),choppy);\n}\n\nfloat map(vec3 p) {\n    float freq = SEA_FREQ;\n    float amp = SEA_HEIGHT;\n    float choppy = SEA_CHOPPY;\n    vec2 uv = p.xz; uv.x *= 0.75;\n    \n    float d, h = 0.0;    \n    for(int i = 0; i < ITER_GEOMETRY; i++) {        \n    \td = sea_octave((uv+SEA_TIME)*freq,choppy);\n    \td += sea_octave((uv-SEA_TIME)*freq,choppy);\n        h += d * amp;        \n    \tuv *= octave_m; freq *= 1.9; amp *= 0.22;\n        choppy = mix(choppy,1.0,0.2);\n    }\n    return p.y - h;\n}\n\nfloat map_detailed(vec3 p) {\n    float freq = SEA_FREQ;\n    float amp = SEA_HEIGHT;\n    float choppy = SEA_CHOPPY;\n    vec2 uv = p.xz; uv.x *= 0.75;\n    \n    float d, h = 0.0;    \n    for(int i = 0; i < ITER_FRAGMENT; i++) {        \n    \td = sea_octave((uv+SEA_TIME)*freq,choppy);\n    \td += sea_octave((uv-SEA_TIME)*freq,choppy);\n        h += d * amp;        \n    \tuv *= octave_m; freq *= 1.9; amp *= 0.22;\n        choppy = mix(choppy,1.0,0.2);\n    }\n    return p.y - h;\n}\n\nvec3 getSeaColor(vec3 p, vec3 n, vec3 l, vec3 eye, vec3 dist) {  \n    float fresnel = clamp(1.0 - dot(n,-eye), 0.0, 1.0);\n    fresnel = pow(fresnel,3.0) * 0.5;\n        \n    vec3 reflected = getSkyColor(reflect(eye,n));    \n    vec3 refracted = SEA_BASE + diffuse(n,l,80.0) * SEA_WATER_COLOR * 0.12; \n    \n    vec3 color = mix(refracted,reflected,fresnel);\n    \n    float atten = max(1.0 - dot(dist,dist) * 0.001, 0.0);\n    color += SEA_WATER_COLOR * (p.y - SEA_HEIGHT) * 0.18 * atten;\n    \n    color += vec3(specular(n,l,eye,60.0));\n    \n    return color;\n}\n\n// tracing\nvec3 getNormal(vec3 p, float eps) {\n    vec3 n;\n    n.y = map_detailed(p);    \n    n.x = map_detailed(vec3(p.x+eps,p.y,p.z)) - n.y;\n    n.z = map_detailed(vec3(p.x,p.y,p.z+eps)) - n.y;\n    n.y = eps;\n    return normalize(n);\n}\n\nfloat heightMapTracing(vec3 ori, vec3 dir, out vec3 p) {  \n    float tm = 0.0;\n    float tx = 1000.0;    \n    float hx = map(ori + dir * tx);\n    if(hx > 0.0) return tx;   \n    float hm = map(ori + dir * tm);    \n    float tmid = 0.0;\n    for(int i = 0; i < NUM_STEPS; i++) {\n        tmid = mix(tm,tx, hm/(hm-hx));                   \n        p = ori + dir * tmid;                   \n    \tfloat hmid = map(p);\n\t\tif(hmid < 0.0) {\n        \ttx = tmid;\n            hx = hmid;\n        } else {\n            tm = tmid;\n            hm = hmid;\n        }\n    }\n    return tmid;\n}\n\nvec3 getPixel(in vec2 coord, float time) {    \n    vec2 uv = coord / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;    \n        \n    // ray\n    vec3 ang = vec3(0.1,1,11);    \n    vec3 ori = vec3(0.0,3.5,0);\n    vec3 dir = normalize(vec3(uv.xy,-2.0)); dir.z += length(uv) * 0.14;\n    dir = normalize(dir) * fromEuler(ang);\n    \n    // tracing\n    vec3 p;\n    heightMapTracing(ori,dir,p);\n    vec3 dist = p - ori;\n    vec3 n = getNormal(p, dot(dist,dist) * EPSILON_NRM);\n    vec3 light = normalize(vec3(0.0,1.0,0.8)); \n             \n    // color\n    return mix(\n        getSkyColor(dir),\n        getSeaColor(p,n,light,dir,dist),\n    \tpow(smoothstep(0.0,-0.02,dir.y),0.2));\n}\n\nvoid mainCubemap( out vec4 fragColor, in vec2 fragCoord, in vec3 rayOri, in vec3 rayDir )\n{\n    float time = iTime;\n\t\n#ifdef AA\n    vec3 color = vec3(0.0);\n    for(int i = -1; i <= 1; i++) {\n        for(int j = -1; j <= 1; j++) {\n        \tvec2 uv = fragCoord+vec2(i,j)/3.0;\n    \t\tcolor += getPixel(uv, time);\n        }\n    }\n    color /= 9.0;\n#else\n    vec3 color = getPixel(fragCoord, time);\n#endif\n    \n    // post\n\tfragColor = vec4(pow(color,vec3(0.65)), 1.0);\n}","name":"Cube A","description":"","type":"cubemap"}]}