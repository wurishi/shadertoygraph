{"ver":"0.1","info":{"id":"dsGfRm","date":"1698054506","viewed":17,"name":"why can't we all call it Pong","username":"MarshmallowFellow","description":"a never ending game of pong","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["game","realtime"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sawWave(float value)\n{\n    return (fract(value*0.5) > 0.5 ? fract(value) : 1.0 - fract(value));\n}\n\nbool withinRange (float A, float B, float delta)\n{\n    return abs(A - B) < delta;\n}\n\nfloat paddlePadding = 0.03;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float speed = 0.6;\n    vec2 boundaryWidth = vec2(0.1, 0.1);\n    \n    //create an X,Y coordinate based off time.  it's a simple saw wave on both axis going at different speeds\n    vec2 position = vec2\n    (\n        sawWave(float(iTime * speed)) * (1.0 - boundaryWidth.x) + boundaryWidth.x / 2.0,\n        sawWave(float(iTime * 1.354 * speed)) * (1.0 - boundaryWidth.y) + boundaryWidth.y / 2.0\n    );\n    \n    //compare the x and y position of each pixel to the previously generated position variable. scaled to the aspect ratio of the screen to make the ball square.\n    bool ballBounds = \n    (\n        (withinRange(fragCoord.x/iResolution.x * (iResolution.x/iResolution.y), position.x * (iResolution.x/iResolution.y), 0.05)) &&\n        (withinRange(fragCoord.y/iResolution.y, position.y, 0.05))\n    );\n    \n    //same as the steps for the ball but this time blending the y position from the balls y position to the middle of the screen depending on how close the X position is to that paddles side of the screen\n    bool paddleLeft = withinRange\n    (\n        fragCoord.x/iResolution.x, paddlePadding, 0.013) && \n        withinRange(fragCoord.y/iResolution.y , clamp(mix(position.y, mix(1.0 - position.y, 0.5, 0.8), position.x), 0.2, 0.8), 0.2\n    ); \n    \n        bool paddleRight = withinRange\n    (\n        (iResolution.x - fragCoord.x)/iResolution.x, paddlePadding, 0.013) && \n        withinRange(fragCoord.y/iResolution.y , clamp(mix(position.y, mix(1.0 - position.y, 0.5, 0.8), 1.0 - position.x), 0.2, 0.8), 0.2\n    ); \n    \n    \n    // Output to screen\n    fragColor = vec4(vec3(float(ballBounds || paddleLeft || paddleRight)),1.0);\n    \n    \n    \n    \n    \n    \n    \n    \n}","name":"Image","description":"","type":"image"}]}