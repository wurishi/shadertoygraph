{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"volume","id":"XdX3Rr","filepath":"/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"code":"#define PI 3.14159265359\n\nvec3 zmarch (vec3 X1, mat3 R) { \n    for (int i=0;i<1000;i++) {\n        vec3 X = R*X1;\n        //return scaledX;\n        float s = vmax(X);\n        if (s <=size){\n            //snapX(X);\n            return X; \n        }\n        X1.z -= s-size+1.;\n        if (X1.z<-size*rt2) return vec3(-10.);\n    }\n    return pink;\n}\n\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord-iResolution.xy/2.);\n    float theta = iTime/2.;\n    mat3 Rx = mat3 (1.,0.,0., 0.,cos(theta),sin(theta), 0.,-sin(theta),cos(theta));\n    mat3 Ry = mat3 (cos (theta), 0.,-sin(theta), 0.,1.,0., sin(theta), 0., cos (theta));\n    mat3 Rz = mat3(cos(theta),sin(theta),0., -sin(theta),cos(theta),0., 0.,0.,1.);\n    R = Rx*Ry;\n    \n    vec3 X1 = vec3 (uv, size*2.);\n    //vec3 X = R1*X1;\n    \n    //if (vmax(X) <=size) write((X/size+1.)/2.);\n    //else write(black);\n    \n    vec3 X = zmarch (X1, R);\n    //vec3 normal = calcNormal(X) + texture(iChannel0,X).xyz;\n    vec3 col = vec3(calcLighting(light,X,iChannel0)) + vec3(0.2);\n    \n    if (X.x == -10.) write(white); \n    else write (col);\n    \n    //fragColor = texture(iChannel0,scaledX);\n}","name":"Image","description":"","type":"image"},{"outputs":[],"inputs":[],"code":"#define size 100.\n#define vmax(X) max( max( abs(X.x), abs(X.y)), abs(X.z))\n#define rt2 1.41421356237\n#define scaledX (X/(size)+1.)/2.\n\n#define black vec3(0.)\n#define pink vec3(1.,0.,0.5)\n#define white vec3(.8)\n#define write(col) fragColor = vec4(col,1.)\n\nmat3 R;\nvec4 light = vec4(500.,500.,500.,0.5);\n\nvoid snapX(vec3 X){\n    float maxval = vmax(X);\n    if (X.x == maxval) X.x = size;\n    if (X.x == -maxval) X.x = -size;\n    if (X.y == maxval) X.y = size;\n    if (X.y == -maxval) X.y = -size;\n    if (X.z == maxval) X.z = size;\n    if (X.z == -maxval) X.z = -size;\n}\n\nvec3 calcNormal(vec3 X){\n    vec3 N;\n    if (size-X.x < 1.) N = vec3(1.,0.,0.);\n    if (X.x+size < 1.) N = vec3(-1.,0.,0.);\n    if (size-X.y < 1.) N = vec3(0.,1.,0.);\n    if (X.y+size < 1.) N = vec3(0.,-1.,0.);\n    if (size-X.z < 1.) N = vec3(0.,0.,1.);\n    if (X.z+size < 1.) N = vec3(0.,0.,-1.);\n    return transpose(R)*N;\n}\n\nfloat calcLighting(vec4 light, vec3 X, sampler3D noise){\n    vec3 lightDir = light.xyz-transpose(R)*X;\n    lightDir = normalize(lightDir);\n    //float intensity = light.w/(length(lightDir)*length(lightDir));\n    float val = dot(calcNormal(X)+texture(noise,scaledX).xyz/50.,lightDir);\n    return clamp(val*light.w,0.,1.);\n}","name":"Common","description":"","type":"common"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XflBRs","date":"1733686778","viewed":31,"name":"rotating cube with lighting ","username":"sp3ctre","description":"Cube rendering cause it was needed in a bigger project.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d","lighting"],"hasliked":0,"parentid":"","parentname":""}}