{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"cubemap","id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"//CONSTANTS\nconst int maxSteps = 128;\nconst vec3 size = vec3(1.5);\nconst float threshold = 0.00001;\nconst float normalStep = 0.001;\n\n//STRUCTS\nstruct Ray {\n    vec3 position;\n    vec3 direction;\n    vec3 normal;\n    bool hit;\n};\n\nstruct Camera {\n    vec3 position;\n    vec3 direction;\n};\n\n//DISTANCE FUNCTIONS\nfloat udBox(vec3 p, vec3 b) {\n\treturn length(max(abs(p) - b, 0.0));\n}\n\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\n// get distance in the world\nfloat distField( vec3 pos ) {\n\t// ...add objects here...\n\t\n\n\tfloat d0 =  udRoundBox(pos, size, 0.2);\n\t\n\n\tfloat d1 = sdSphere(pos, 2.0);\n\t\t\n\t// union     : min( d0,  d1 )\n\t// intersect : max( d0,  d1 )\n\t// subtract  : max( d1, -d0 )\n\t//return max( -d1, d0 );\n\n\treturn max( d0,  -d1 );\n}\n\n//Get intersect with distance field for a given ray\nRay intersect(Ray ray) {\n\tfor (int i=0; i<maxSteps; i++) {\n\t\tfloat dist = distField(ray.position);\n\t\tif (dist < threshold) {\n            ray.hit = true;\n            return ray;\n\t\t}\n\t\tray.position += ray.direction * dist;\n\t}\n    return ray;\n}\n\n//?????\nvec3 Rx(vec3 vector, float angle) {\n    float rx = vector.x * cos(angle) + vector.z * sin(angle);\n    float rz = vector.z * cos(angle) - vector.x * sin(angle);\n    return vec3(rx, vector.y, rz);\n}\n\n//Get the worldspace ormal of a given point\nvec3 worldSpaceNormal( vec3 pos ) {\n\tconst vec3 dx = vec3( normalStep, 0.0, 0.0 );\n\tconst vec3 dy = vec3( 0.0, normalStep, 0.0 );\n\tconst vec3 dz = vec3( 0.0, 0.0, normalStep );\n\treturn normalize (\n\t\tvec3(\n\t\t\tdistField(pos + dx) - distField(pos - dx),\n            distField(pos + dy) - distField(pos - dy),\n            distField(pos + dz) - distField(pos - dz)\n\t\t)\n\t);\n}\n\n//Just add pink fluffy unicorns\nvec3 rainbow(Ray ray) {   \n\treturn (ray.position + size)/(size*2.0);\n}\n\n//Basic phong shading\nvec3 phong( vec3 v, vec3 n, vec3 eye ) {\n\t// ...add lights here...\n\t\n\tfloat shininess = 16.0;\n\t\n\tvec3 final = vec3( 0.0 );\n\t\n\tvec3 ev = normalize( v - eye );\n\tvec3 ref_ev = reflect( ev, n );\n\t\n\t// light 0\n\t{\n\t\tvec3 light_pos   = vec3( 20.0, 20.0, 20.0 );\n\t\tvec3 light_color = vec3( 1.0, 0.7, 0.7 );\n\t\n\t\tvec3 vl = normalize( light_pos - v );\n\t\n\t\tfloat diffuse  = max( 0.0, dot( vl, n ) );\n\t\tfloat specular = max( 0.0, dot( vl, ref_ev ) );\n\t\tspecular = pow( specular, shininess );\n\t\t\n\t\tfinal += light_color * ( diffuse + specular ); \n\t}\n\t\n\t// light 1\n\t{\n\t\tvec3 light_pos   = vec3( -20.0, -20.0, -20.0 );\n\t\tvec3 light_color = vec3( 0.3, 0.7, 1.0 );\n\t\n\t\tvec3 vl = normalize( light_pos - v );\n\t\tfloat diffuse  = max( 0.0, dot( vl, n ) );\n\t\tfloat specular = max( 0.0, dot( vl, ref_ev ) );\n\t\tspecular = pow( specular, shininess );\n\t\t\n\t\tfinal += light_color * ( diffuse + specular ); \n\t}\n\n\treturn final;\n}\n\nvec3 render(Ray ray, Camera cam){\n\tif(ray.hit){\n\t\tvec3 normal = worldSpaceNormal( ray.position );\n        vec3 reflection = texture( iChannel0, reflect(ray.direction ,normal) ).xyz;;\n       \n        //vec3 phong = phong( ray.position, normal, cam.position );\n        vec3 multicolor = rainbow(ray)/2.0;\n        \n        return reflection + multicolor;\n\t} else {\n\t\treturn texture( iChannel0, ray.direction ).xyz;;\n\t}\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//Setup screen\n\tfloat aspect_ratio = iResolution.x / iResolution.y;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec2 p = (uv - vec2(0.5)) * vec2(aspect_ratio, 1.0);\n    \n    //Move the scene\n    float angle = iTime / 2.0;\n    \n    if (iMouse.z > 0.0) {\n    \tangle = iMouse.x / iResolution.x * 6.0 + 0.5;\n    }\n    \n    //Create Camera\n    Camera cam;\n    cam.position = 6.0 * vec3(-sin(angle), 0.0, -cos(angle));\n    cam.direction = vec3(sin(angle), 0.0, cos(angle));\n    \n    //Create Ray\n    Ray ray;\n    ray.position = cam.position;\n    ray.direction = Rx(normalize(vec3(p, 1.0)), angle);\n    ray.hit = false;\n    ray.normal = vec3(0.0);\n\n    //Where the magic happens\n\tray = intersect(ray);    \n    vec3 col = render(ray, cam);\n    \n    //Set the end result\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Xs2Xzz","date":"1408533907","viewed":555,"name":"Rainbow reflection","username":"flunque","description":"Trying to figure out how to do raymarching. Combined several shaders found here on shadertoy to come up with this. Feedback is much appreciated.","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["reflection","rainbow"],"hasliked":0,"parentid":"","parentname":""}}