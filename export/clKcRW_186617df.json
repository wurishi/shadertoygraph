{"ver":"0.1","info":{"id":"clKcRW","date":"1699988967","viewed":107,"name":"Smoothmax Blobs","username":"zilian","description":"I've been learning to write some shaders\n\nSmoothmax between large blob made up of randomly moving smaller blobs, and then again with particle field.","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["blobs","sdf","particles","glow","smoothmax"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#ifdef GL_ES\nprecision mediump float;\n#endif\n\nconst int blob_count = 20;\nconst float particleCount = 40.0; \nconst float particleRadius = 0.025;\nconst vec2 particleVelocity = vec2(-1.0, 0.0);\n\nfloat random(vec2 uv) {\n    return fract(sin(dot(uv, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nvec2 fade(vec2 t) {\n    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);\n}\n\nvec4 permute(vec4 x) {\n    return mod(((x * 34.0) + 1.0) * x, 289.0);\n}\n\nfloat cnoise(vec2 P) {\n    vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n    vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n    Pi = mod(Pi, 289.0); // To avoid truncation effects in permutation\n\n    vec4 ix = Pi.xzxz;\n    vec4 iy = Pi.yyww;\n    vec4 fx = Pf.xzxz;\n    vec4 fy = Pf.yyww;\n    vec4 i = permute(permute(ix) + iy);\n    vec4 gx = 2.0 * fract(i * 0.0243902439) - 1.0; // 1/41 = 0.024...\n    vec4 gy = abs(gx) - 0.5;\n    vec4 tx = floor(gx + 0.5);\n    gx = gx - tx;\n    vec2 g00 = vec2(gx.x, gy.x);\n    vec2 g10 = vec2(gx.y, gy.y);\n    vec2 g01 = vec2(gx.z, gy.z);\n    vec2 g11 = vec2(gx.w, gy.w);\n    vec4 norm = 1.79284291400159 - 0.85373472095314 *\n        vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11));\n    g00 *= norm.x;\n    g01 *= norm.y;\n    g10 *= norm.z;\n    g11 *= norm.w;\n    float n00 = dot(g00, vec2(fx.x, fy.x));\n    float n10 = dot(g10, vec2(fx.y, fy.y));\n    float n01 = dot(g01, vec2(fx.z, fy.z));\n    float n11 = dot(g11, vec2(fx.w, fy.w));\n    vec2 fade_xy = fade(Pf.xy);\n    vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n    float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n    return 2.3 * n_xy;\n}\n\nfloat smoothMax(float a, float b, float k) {\n    return log(exp(k * a) + exp(k * b)) / k;\n}\n\nvec3 palette(float t) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263, 0.416, 0.557);\n\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nfloat sdCircle(vec2 p, float r) {\n    float d = length(p) - r;\n    return d;\n}\n\nfloat blob(vec2 uv, float scale, inout vec3 finalColor, float time) {\n    uv /= scale;\n\n    float baseRadius = 0.2;\n    float k = 12.0;\n    float maxDistance = -1e10; // Start with a very low distance\n\n    for(int i = 0; i < blob_count; i++) {\n        float fi = float(i);\n        vec2 circleSeed = vec2(fi, fi * 1.3);\n        float radius = clamp(baseRadius + cnoise(circleSeed + time) * 0.3, 0.1, 1.0);\n\n        // Translate in a random vec2 direction based on time and noise\n        vec2 noiseDirection = vec2(cnoise(circleSeed + 0.3), cnoise(circleSeed * 2.0 + 0.3));\n        vec2 translate = noiseDirection * cnoise(circleSeed + vec2(time, time * 1.3)); // Remove normalize and vary time\n\n        float circle = sdCircle(uv + translate, radius);\n\n        // Get color from palette and apply to circle\n        vec3 color = palette(fi / float(blob_count));\n\n        // Combine the color with the distance field of the circle\n        finalColor = max(finalColor, color * circle);\n\n        // Update maxDistance with the new circle distance\n        maxDistance = smoothMax(maxDistance, -circle, k);\n    }\n\n    return maxDistance;\n}\n\nfloat particleField(vec2 uv, inout vec3 finalColor, float time) {\n    vec3 fieldColor = vec3(0.0);\n    float minDist = 1e10; // Use a large positive number for minimum distance initialization\n\n    float aspect = iResolution.x / iResolution.y;\n    float left = -1.0 * aspect;\n    float right = 1.0 * aspect;\n    float screenWidth = right - left;\n\n    for(float i = 1.0; i <= particleCount; i += 1.0) {\n        float noiseX = random(vec2(i * 1.2));\n        float noiseY = random(vec2(i * 1.15)) - 0.5;\n\n        vec2 vel = particleVelocity * (noiseX + 0.5);\n\n        vec2 pos = time * vel + vel;\n        pos.x = fract(pos.x + noiseX) * screenWidth - screenWidth / 2.0;\n        pos.y = noiseY * 2.0; // Assuming you have defined screenHeight somewhere\n\n        float dCircle = sdCircle(uv - pos, particleRadius);\n        minDist = min(minDist, dCircle); // Update the minimum distance\n\n        // Calculate color based on the minimum distance\n        vec3 color = palette(i / float(particleCount));\n        float alpha = smoothstep(particleRadius, particleRadius + 0.1, dCircle);\n        fieldColor = max(fieldColor, color * alpha); // Blend the color based on the smoothed step function\n    }\n\n    // The final color is divided by the particle count to average the contributions of each particle\n    finalColor = max(finalColor, fieldColor / particleCount);\n\n    return minDist;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.y;\n    float time = iTime * 0.6;\n\n    vec3 finalColor = vec3(0.0);\n\n    float dBlob = blob(uv, 1.0, finalColor, time);\n    float dParticles = particleField(uv, finalColor, time);\n    float d = smoothMax(-dParticles, dBlob, 8.0);\n\n    finalColor *= 0.007 / abs(d);\n\n    fragColor = vec4(finalColor, 1.0); // Combine blobs and particles\n}","name":"Image","description":"","type":"image"}]}