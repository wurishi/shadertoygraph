{"ver":"0.1","info":{"id":"4cdyRN","date":"1730327181","viewed":153,"name":"Comic Halftone Implementation","username":"hectobreak","description":"My attempt at implementing a comic-style halftone shader. Very simple idea, really. Drag and drop to compare the dithered result with the original texture.","likes":5,"published":3,"flags":0,"usePreview":0,"tags":["demo","dithering","style"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Simplex Noise implementation borrowed from Inigo Quilez\n// https://www.shadertoy.com/view/Msf3WH\n\nvec2 hash( vec2 p ) // replace this by something better\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\n\nfloat smoothnoise( in vec2 p ){\t\n    p += iTime*0.05;\n    float f = 0.0;\n\t\n\tp *= 5.0;\n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n\tf  = 0.5000*noise( p ); p = m*p;\n\tf += 0.2500*noise( p ); p = m*p;\n    f += 0.1250*noise( p ); p = m*p;\n\tf += 0.0625*noise( p ); p = m*p;\n\n\treturn 0.5 + 0.5*f;\n}\n\n// ----------------------------------------------------\n\nfloat dither_radius = 0.02;\n\nfloat dither( in vec2 p ) {\n    // Sample points are laid in a hexagonal grid\n    float dx = dither_radius;\n    // sqrt(3) / 2 = 0.866...\n    float dy = 0.866025403784 * dither_radius; \n    float TAU = 6.28318530718;\n    \n    // Computing the closest grid point to our current coordinate\n    ivec2 ip2 = ivec2(int(p.x / dx), int(p.y / dy));\n    vec2 p2 = vec2(float(ip2.x) * dx, float(ip2.y) * dy) + vec2(dx * 0.5, dy * 0.5);\n    if(ip2.y % 2 == 0){\n        ivec2 ip2 = ivec2(int((p.x + dx/2.0) / dx), int(p.y / dy));\n        p2 = vec2(float(ip2.x) * dx, float(ip2.y) * dy) + vec2(0.0, dy * 0.5);\n    }\n    \n    // Computing the result\n    float ret = 0.0;\n    for(int i = 0; i <= 1; i++){ // Not the most elegant way of doing this, but I'm lazy rn\n        float r = dx * float(i);\n        for(int j = 0; j < 6; ++j){\n            vec2 delta = r * vec2(cos(TAU * float(j) / 6.0), sin(TAU * float(j) / 6.0));\n            vec2 p3 = p2 + delta;\n            float value = smoothnoise(p3); // Reading the texture\n            value = pow(value, 1.5);\n            float dif = length(p3 - p) - value * dx;\n            if(dif < 0.0) \n                ret += 1.0 - smoothstep(- 3.0 / iResolution.x, 0.0, dif); // For anti-aliasing\n            if(i == 0) break;\n        }\n    }\n    \n    return ret > 1.0 ? 1.0 : ret;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy / iResolution.xy;\n\tvec2 uv = p*vec2(iResolution.x/iResolution.y,1.0);\n    float vertical = iMouse.x / iResolution.x;\n    float f = p.x > vertical ? dither( uv ) : smoothnoise( uv );\n    f *= smoothstep( 0.0, 0.005, abs(p.x-vertical) );\t\n\tfragColor = vec4( f, f, f, 1.0 );\n}","name":"Image","description":"","type":"image"}]}