{"ver":"0.1","info":{"id":"msSBzR","date":"1689334007","viewed":70,"name":"Trillumi","username":"wgslv","description":"an illuminated triangle","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 pallete( float t) {\n    vec3 a = vec3(0.518, 0.500, 0.500);\n    vec3 b = vec3(0.500, -0.402, 0.500);\n    vec3 c = vec3(3.138, 1.000, 1.000);\n    vec3 d = vec3(0.000, 0.333, 0.667);\n     \n    return a + b*cos(6.28318*(c*t+d));\n}\n\nfloat sdEquilateralTriangle( in vec2 p, in float r )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    p *= 2.0;\n    m *= 2.0;\n\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = (uv - 0.5) * 2.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    float d = sdEquilateralTriangle(p, 1.0);\n    vec3 col = pallete(d);\n    \n    \n    d = (sin(d*8. + iTime)/8.);\n    d = abs(d);\n    \n    d = 0.02/d;\n    \n    col *= d;\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n\n","name":"Image","description":"","type":"image"}]}