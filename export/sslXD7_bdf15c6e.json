{"ver":"0.1","info":{"id":"sslXD7","date":"1618736019","viewed":72,"name":"Morphing 3Objects Basic","username":"kithy","description":"morphing sphere,octahedron,and cube.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","octahedron","morphing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_DIST 128\n#define EPS 0.001\n\nmat2 rot(float a){\n\tfloat s=sin(a);\n\tfloat c=cos(a);\n\treturn mat2(c,s,-s,c);\n}\n\nfloat cube(vec3 p,float r){\n\tvec3 q=abs(p)-r;\n\treturn length(max(q,0.0))+min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sphere(vec3 p,float r){\n\treturn length(p)-r;\n}\n\n//from iq\nfloat octahedron(vec3 p,float s){\n\tp=abs(p);\n\tfloat m=p.x+p.y+p.z-s;\n\tvec3 r=3.0*p-m;\n\t\n\tvec3 q;\n\tif(r.x<0.0)q=p.xyz;\n\telse if(r.y<0.0)q=p.yzx;\n\telse if(r.z<0.0)q=p.zxy;\n\telse return m*0.57735027;\n\n\tfloat k=clamp(0.5*(q.z-q.y+s),0.0,s);\n\treturn length(vec3(q.x,q.y-s+k,q.z-k));\n}\n\nfloat mainDist(vec3 p){\n\tp.xz*=rot(iTime);\n\tp.yz*=rot(iTime);\n\tfloat b=cube(p,2.0);\n\tfloat s=sphere(p,1.2);\n\tfloat o=octahedron(p,2.0);\n\n\tfloat changeSpeed=0.5+cos(iTime)*0.5;\n\treturn mix(s,mix(b,o,changeSpeed),changeSpeed);\n}\n\nvec3 genNormal(vec3 p){\n\treturn normalize(vec3(\n\t\tmainDist(vec3(p.x+EPS,p.y,p.z))-mainDist(vec3(p.x-EPS,p.y,p.z)),\n\t\tmainDist(vec3(p.x,p.y+EPS,p.z))-mainDist(vec3(p.x,p.y-EPS,p.z)),\n\t\tmainDist(vec3(p.x,p.y,p.z+EPS))-mainDist(vec3(p.x,p.y,p.z-EPS))\n\t));\n}\n\nvec3 rayMarch(const vec3 eye,const vec3 ray,out float depth,out float steps){\n\tdepth=0.0;\n\tsteps=0.0;\n\tfloat dist;\n\tvec3 rp;\n\n\tfor(int i=0;i<MAX_DIST;i++){\n\t\trp=eye + depth*ray;\n\t\tdist = mainDist(rp);\n\t\tdepth+= dist;\n\t\tsteps++;\n\t\tif(dist<EPS)break;\n\t}\n\t\n\treturn rp;\n}\n\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord){\n\tvec2 uv=(2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n\tvec3 ray=normalize(vec3(uv,1.0));\n\tvec3 camPos=vec3(0.0,0.0,-3.0);\n\n\tfloat depth=0.0;\n\tfloat steps=0.0;\n\tvec3 rp=rayMarch(camPos+EPS*ray,ray,depth,steps);\n\n\tfloat ao=steps*0.01;\n\tao=1.0-ao/(ao+0.5);\n\n\tfragColor=vec4(0.0,0.0,ao,1.0);\n}\n","name":"Image","description":"","type":"image"}]}