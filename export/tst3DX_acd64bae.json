{"ver":"0.1","info":{"id":"tst3DX","date":"1569427956","viewed":650,"name":"analytical antialiasing of sine","username":"FabriceNeyret2","description":"Antialiasing borders or bands is easy with smoothstep, but when a whole detail goes below ~2 pixels you need to integrate the pixel content to avoid aliasing. One could do that with oversampling subpixels, but analytically integrating a sine is easy :-)","likes":21,"published":3,"flags":0,"usePreview":0,"tags":["antialiasing","antiderivative"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define f(x)   cos( k* (x) - t )           // signal\n#define F(x)   sin( k* (x) - t ) / k       // antiderivative\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         U = (u - .5*vec2(R.x,0) ) / R.y;  // normalize coordinates\n    float pix = 1./R.y,                    // pixel size\n          PI = 3.14159,\n           t = 10.*iTime,\n        \n            k = 2.*PI * mix( 1., .7*R.y, exp2(floor(U.y*30.)/30.)-1. ),\n            v = U.x<0. \n               ? f(U.x) // Left:  raw sampled signal \n               :        // Right: integral of the signal over the pixel\n                 k > PI/pix ? 0.  // case needed only because it's a naive box integrator\n                   : ( F(U.x+pix) - F(U.x-pix) ) / (2.*pix);\n    \n    v = .5+.5*v;                           // to [0,1] range\n    if (iMouse.z<=0.) v = pow( v,1./2.2);  // final sRGB conversion (click to see when missing)\n    O = vec4(v);\n}","name":"Image","description":"","type":"image"}]}