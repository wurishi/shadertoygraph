{"ver":"0.1","info":{"id":"cllXWr","date":"1675285250","viewed":70,"name":"Discrete terrain","username":"gdaskal","description":"WIP\nBased on the ray-marching starting point here: https://www.shadertoy.com/view/WtGXDD","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"RayMarching starting point\" \n// by Martijn Steinrucken aka The Art of Code/BigWings - 2020\n// The MIT License\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// Email: countfrolic@gmail.com\n// Twitter: @The_ArtOfCode\n// YouTube: youtube.com/TheArtOfCodeIsCool\n// Facebook: https://www.facebook.com/groups/theartofcode/\n//\n// You can use this shader as a template for ray marching shaders\n\n#define MAX_STEPS 600\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define TAU 6.283185\n#define PI 3.141592\n#define S smoothstep\n#define T iTime\n\n#define AA 2.\n\nvec3 color = vec3(0.0);\n\nfloat rand(vec2 n) { \n    return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(vec2 p){\n    vec2 ip = floor(p);\n    vec2 u = fract(p);\n    u = u*u*(3.0-2.0*u);\n\n    float res = mix(\n        mix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),\n        mix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);\n    return res*res;\n}\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nvec2 edge(vec2 p) {\n    vec2 p2 = abs(p);\n    if(p2.x > p2.y) return vec2(sign(p.x), 0.);\n    return vec2(0., sign(p.y));\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\n\n// Repetition technique from https://www.youtube.com/watch?v=I8fmkLK1OKg\n// Helps with overshooting. Although, in my case, it doesn't eliminate it completely.\nfloat GetDist(vec3 p) {\n    float scale = 5.;\n    p *= scale;\n    float boxW = 0.47;\n    float boxH = 4.;\n    p += 7.;\n    vec2 np = floor(p.xz) + 0.5;\n    vec2 neighbour = np + edge(p.xz - np);\n\n    //p.y += sin(iTime + np.x);\n\n    float d = sdBox(p - vec3(np.x, 0., np.y), vec3(boxW, 4. + noise(np * 0.1 + iTime * 0.3) * boxH, boxW));\n    float d1 = sdBox(p - vec3(neighbour.x, 0., neighbour.y), vec3(boxW, 4.+ boxH, boxW));\n    \n    return (min(d, d1) - 0.02) / scale;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(.001, 0);\n    vec3 n = GetDist(p) - \n        vec3(GetDist(p-e.xyy), GetDist(p-e.yxy),GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n vec3 col = vec3(0);\n vec3 light = vec3(1.0, 0.4, 0.2) * 2.;\n vec3 shadow = vec3(0.01, 0.02, .08) * 0.7;\n vec3 sky = vec3(0.6, 0.6, 1.0);\n // I should look into a faster version of AA\n for(float i = 0.; i < AA; i++) {\n        for(float j = 0.; j < AA; j++) {\n            float shadowP = 0.;\n            vec2 off = vec2(i,j) / AA - 0.5;\n            vec2 uv = (2.*(fragCoord + off) - iResolution.xy)/iResolution.y;\n            vec2 m = iMouse.xy/iResolution.xy;\n\n            vec3 ro = vec3(0, 3, -3);\n            ro.yz *= Rot(-m.y*PI + PI/1.5);\n            ro.xz *= Rot(-m.x*TAU + PI/2.);\n\n            vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 1.);\n            float d = RayMarch(ro, rd);\n            vec3 tcol;\n            if(d < MAX_DIST) {\n                vec3 p = ro + rd * d;\n                vec3 n = GetNormal(p);\n                vec3 r = reflect(rd, n);\n\n                float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n                \n                // calc Shadow\n  \n                float shadowDist = RayMarch(p + n * SURF_DIST + 0.01, normalize(vec3(11., 5., 0.)));\n                if(shadowDist < MAX_DIST) {\n                  dif = 0.;\n                } \n                \n                dif += 0.2;\n                tcol = mix(light, shadow, 1.-dif);\n                tcol = mix(tcol, sky, d/MAX_DIST);\n            } else {\n                // Sky\n                tcol = sky;\n            }\n            col += tcol;\n        }\n    }\n    \n    col /= AA*AA;\n    col = pow(col, vec3(.4545));\t// gamma correction\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}