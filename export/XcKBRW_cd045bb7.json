{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"texture","id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"\nfloat easeInOutQuad(float t) {\n    return t < 0.5 ? 2.0 * t * t : -1.0 + (4.0 - 2.0 * t) * t;\n}\n\n// Cubic Easing\nfloat easeInCubic(float t) {\n    return t * t * t;\n}\n\nfloat easeOutCubic(float t) {\n    float f = t - 1.0;\n    return f * f * f + 1.0;\n}\n\nfloat easeInOutCubic(float t) {\n    return t < 0.5 ? 4.0 * t * t * t : (t - 1.0) * (2.0 * t - 2.0) * (2.0 * t - 2.0) + 1.0;\n}\n\n// Quartic Easing\nfloat easeInQuart(float t) {\n    return t * t * t * t;\n}\n\nfloat easeOutQuart(float t) {\n    float f = t - 1.0;\n    return 1.0 - f * f * f * f;\n}\n\nfloat easeInOutQuart(float t) {\n    return t < 0.5 ? 8.0 * t * t * t * t : 1.0 - 8.0 * (t - 1.0) * (t - 1.0) * (t - 1.0) * (t - 1.0);\n}\n\n// Sine Easing\nfloat easeInSine(float t) {\n    return 1.0 - cos((t * 3.141592653589793) / 2.0);\n}\n\nfloat easeOutSine(float t) {\n    return sin((t * 3.141592653589793) / 2.0);\n}\n\nfloat easeInOutSine(float t) {\n    return -0.5 * (cos(3.141592653589793 * t) - 1.0);\n}\n\n// Exponential Easing\nfloat easeInExpo(float t) {\n    return t == 0.0 ? 0.0 : pow(2.0, 10.0 * (t - 1.0));\n}\n\nfloat easeOutExpo(float t) {\n    return t == 1.0 ? 1.0 : 1.0 - pow(2.0, -10.0 * t);\n}\n\nfloat easeInOutExpo(float t) {\n    if (t == 0.0) return 0.0;\n    if (t == 1.0) return 1.0;\n    return t < 0.5 ? 0.5 * pow(2.0, 20.0 * t - 10.0) : 1.0 - 0.5 * pow(2.0, -20.0 * t + 10.0);\n}\n\n// Back Easing\nfloat easeInBack(float t) {\n    const float c1 = 1.70158;\n    return (c1 + 1.0) * t * t * t - c1 * t * t;\n}\n\nfloat easeOutBack(float t) {\n    const float c1 = 1.70158;\n    float f = t - 1.0;\n    return 1.0 + (c1 + 1.0) * f * f * f + c1 * f * f;\n}\n\nfloat easeInOutBack(float t) {\n    const float c1 = 1.70158;\n    const float c2 = c1 * 1.525;\n    return t < 0.5\n        ? (pow(2.0 * t, 2.0) * ((c2 + 1.0) * 2.0 * t - c2)) / 2.0\n        : (pow(2.0 * t - 2.0, 2.0) * ((c2 + 1.0) * (t * 2.0 - 2.0) + c2) + 2.0) / 2.0;\n}\n\n\n//use to scale the window\nvec2 scaleUV(vec2 uv, vec2 scale)\n{\n  // Put texture coordinate origin to center of window.\n  uv = uv * 2.0 - 1.0;\n\n  //scale\n  uv /= mix(vec2(1.0,1.0), vec2(0.0,0.0), scale);\n\n  // scale from center\n  uv = uv * 0.5 + 0.5;\n\n  return uv;\n}\n\nvec3 offsetHue(vec3 color, float hueOffset) {\n    // Convert RGB to HSV\n    float maxC = max(max(color.r, color.g), color.b);\n    float minC = min(min(color.r, color.g), color.b);\n    float delta = maxC - minC;\n\n    float hue = 0.0;\n    if (delta > 0.0) {\n        if (maxC == color.r) {\n            hue = mod((color.g - color.b) / delta, 6.0);\n        } else if (maxC == color.g) {\n            hue = (color.b - color.r) / delta + 2.0;\n        } else {\n            hue = (color.r - color.g) / delta + 4.0;\n        }\n    }\n    hue /= 6.0;\n\n    float saturation = (maxC > 0.0) ? (delta / maxC) : 0.0;\n    float value = maxC;\n\n    // Offset the hue\n    hue = mod(hue + hueOffset, 1.0);\n\n    // Convert HSV back to RGB\n    float c = value * saturation;\n    float x = c * (1.0 - abs(mod(hue * 6.0, 2.0) - 1.0));\n    float m = value - c;\n\n    vec3 rgb;\n    if (hue < 1.0 / 6.0) {\n        rgb = vec3(c, x, 0.0);\n    } else if (hue < 2.0 / 6.0) {\n        rgb = vec3(x, c, 0.0);\n    } else if (hue < 3.0 / 6.0) {\n        rgb = vec3(0.0, c, x);\n    } else if (hue < 4.0 / 6.0) {\n        rgb = vec3(0.0, x, c);\n    } else if (hue < 5.0 / 6.0) {\n        rgb = vec3(x, 0.0, c);\n    } else {\n        rgb = vec3(c, 0.0, x);\n    }\n\n    return rgb + m;\n}\n\n\n\nvec4 blur(vec2 uv, float radius, float samples) {\n  vec4 color = vec4(0.0);\n\n  const float tau        = 6.28318530718;\n  const float directions = 15.0;\n\n  for (float d = 0.0; d < tau; d += tau / directions) {\n    for (float s = 0.0; s < 1.0; s += 1.0 / samples) {\n      vec2 offset = vec2(cos(d), sin(d)) * radius * (1.0 - s) / iResolution.xy;\n      //color += getInputColor(uv + offset);\n      color += texture(iChannel0, uv + offset);\n    }\n  }\n\n  return color / samples / directions;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    float T_MAX = 1.50;\n    float time = mod(iTime, T_MAX);\n    float t = time/ T_MAX;\n    t = 1.0 - t;\n    \n    float progress = t;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    uv = scaleUV(uv, vec2(progress));\n    //vec4 oColor = texture(iChannel0, uv);\n    vec4 oColor = blur(uv,progress * 500.0,3.0);\n    \n    vec4 tint = vec4(1.0,0.0,0.0,1.0);\n    tint.rgb = offsetHue(tint.rgb, progress * 1.0);\n    tint = mix(vec4(1.0),tint*5.0,progress);\n    \n    oColor *= tint;\n\n    // Output to screen\n    fragColor = oColor;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XcKBRW","date":"1733802419","viewed":27,"name":"20241209","username":"jgarza9788","description":"20241209","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["20241209"],"hasliked":0,"parentid":"","parentname":""}}