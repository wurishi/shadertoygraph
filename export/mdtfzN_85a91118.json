{"ver":"0.1","info":{"id":"mdtfzN","date":"1696946497","viewed":86,"name":"Raindrops v0.1.2","username":"bananabajanana","description":"My first ever shader! I tried as practice to make some sort of simple top-down raindrops effect...\nAny suggestions for improvements or what to do next as part of my shader-learning journey are highly appreciated!","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["2d","learningshaders"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define RAIN_INTENSITY 20\n#define EPSILON 0.001\n#define DROP_MAX_SIZE_FACT 3.0\n#define DROP_MIN_SIZE_FACT 10.0\n\nvec2 Hash12(float t) {\n    float x = fract(sin(t*486.2) * 621.4);\n    float y = fract(sin((t+x)*127.6) * 816.5);\n    \n    return vec2(x,y);\n}\n\nfloat Hash11(float t) {\n    return fract(sin(t*187.9) * 973.4);\n}\n\nvec3 plop(float t, vec2 origin, float sizeFact) {\n\n    if (t != 0.0){\n        float d1 = abs(length(sizeFact*origin)-sqrt(t/2.0));\n        \n        // v0.1 - return vec3(0.01/d1) * (1.0-t); \n        \n        // v0.1.2 - suggestion for antialiasing by FabriceNeyret2\n        return vec3(smoothstep(sizeFact*3./iResolution.y,.0,d1) * (1.-t));\n    }\n    return vec3(0.);\n    \n}\n\nvec3 plops(vec2 uv, float tLen, float tOff) {\n    float t = fract((iTime+tOff)/tLen)*tLen;\n\n    vec3 mask = vec3(0.);\n    float sfactMin = float(DROP_MIN_SIZE_FACT);\n    float sfactMax = float(DROP_MAX_SIZE_FACT);\n    for(int i = 0; i < RAIN_INTENSITY; i++) {\n        float index=float(i);\n        float temp = float(RAIN_INTENSITY);\n    \n        vec2 drop = (Hash12(floor((iTime+tOff)/tLen)+index)*2.0 - 1.0)*2.0 + uv;\n        \n        float tOffset = Hash11(index);\n        float t1 = max((t-tOffset)*(1.0-step(1.0,t-tOffset)),0.0);\n        \n        float sizeFactor = Hash11(index+543.6)*(sfactMin - sfactMax) + sfactMax;\n        mask += plop(t1, drop, sizeFactor);\n    }\n    return mask;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n\n    vec3 col = vec3(1.);\n    \n\n    vec3 mask = vec3(0.);\n    \n    mask += plops(uv, 2.0, 0.0);\n    mask += plops(uv, 2.0, 999.0);\n    \n    fragColor = vec4(col * mask,1.0);\n}","name":"Image","description":"","type":"image"}]}