{"ver":"0.1","info":{"id":"4XVXRR","date":"1719838532","viewed":96,"name":"The Night of Myopia","username":"AndyCamelopardalis","description":"In the eyes of the nearsighted, the lights in the city appear in the form of diffuse circles in the nearsighted vision, weaving, flowing, rotating...","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//MIT License\n\n//Copyright (c) [2024] [AndyCamelopardalis]\n\n//Permission is hereby granted, free of charge, to any person obtaining a copy\n//of this software and associated documentation files (the \"Software\"), to deal\n//in the Software without restriction, including without limitation the rights\n//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n//copies of the Software, and to permit persons to whom the Software is\n//furnished to do so, subject to the following conditions:\n\n//The above copyright notice and this permission notice shall be included in all\n//copies or substantial portions of the Software.\n\n//THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n//SOFTWARE.\n\n\n//This program draws on some of the iq code\nfloat sdRoundSquare( in vec2 p, in float s, in float r ) \n{\n    vec2 q = abs(p)-s+r;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r;\n}\n\nvec3 hash3( vec2 p )\n{\n    vec3 q = vec3( dot(p,vec2(1.1,1.7)), \n\t\t\t\t   dot(p,vec2(9.5,1.3)), \n\t\t\t\t   dot(p,vec2(4.2,1.9)) );\n\treturn fract(sin(q)*iTime*0.03);\n}\n\nfloat noise( in vec2 p, float u, float v,float d)\n{\n\tfloat k;\n    if( iMouse.z>0.001 ){\n    if (d > 0.0) {\n    k = 1.0+(350.0+80.0*cos(0.7*iTime))*pow(1.0-v,6.0);\n    }else if (d < 0.0) {\n    k = 1.0+(3500.0+80.0*cos(0.7*iTime))*pow(1.0-v,6.0);\n    }\n    }else {\n    k = 1.0+(350.0+80.0*cos(0.7*iTime))*pow(1.0-v,6.0);\n    }\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n\tvec2 a = vec2(0.0,0.0);\n    for( int y=-2; y<=2; y++ )\n    for( int x=-2; x<=2; x++ )\n    {\n        vec2  g = vec2( x, y );\n\t\tvec3  o = hash3( i + g )*vec3(u,u,1.0);\n\t\tvec2  d = g - f + o.xy;\n\t\tfloat w = pow( 1.0-smoothstep(0.0,1.414,length(d)), k );\n\t\ta += vec2(o.z*w,w);\n    }\n    return a.x/a.y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 uv = fragCoord / iResolution.xx;\n    vec2 p = 0.5 - 0.5*cos(160.90+vec2(0.0,2.0) );\n    \n    vec2 t = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\tfloat si = 0.7;\n    float ra = si*(0.5 - 0.5*cos(33.636)); \n\tfloat d = sdRoundSquare( t, si, ra );\n\n\tp = p*p*(3.0-2.0*p);\n\tp = p*p*(3.0-2.0*p);\n\tp = p*p*(3.0-2.0*p);\n\tfloat f = noise( 24.0*uv, p.x, p.y ,d);\n\tfragColor = vec4( f, f, f, 1.0 );\n}","name":"Image","description":"","type":"image"}]}