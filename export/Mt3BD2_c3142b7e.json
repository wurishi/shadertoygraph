{"ver":"0.1","info":{"id":"Mt3BD2","date":"1541061883","viewed":212,"name":"aa point sample via hardware fix","username":"ming","description":"I am not the author, I just fix the compile errors on webgl2 and make it works for any textures on shadertoy.\nThe author is mmalex and the original shader can be found at: https://www.shadertoy.com/view/ldlSzS \nRegards.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["aa","pointsample","bilinear"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// use the hardware bilinear filter to do all the work, \n// but remap the uv coords to move along in a kind of 'bumpy' way to give anti-aliased point sampling\n\n// now with 3 splits: on the left, no anti-aliasing. in the middle, smoothstep ('softer'). on the right, linear ('sharper').\n\n\nvec4 AntiAliasPointSampleTexture_None(vec2 uv, vec2 texsize) {\t\n\treturn texture(iChannel0, (floor(uv+0.5)+0.5) / texsize);\n}\n\nvec4 AntiAliasPointSampleTexture_Smoothstep(vec2 uv, vec2 texsize) {\t\n\tvec2 w=fwidth(uv);\n\treturn texture(iChannel0, (floor(uv)+0.5+smoothstep(0.5-w,0.5+w,fract(uv))) / texsize);\t\n}\n\nvec4 AntiAliasPointSampleTexture_Linear(vec2 uv, vec2 texsize) {\t\n\tvec2 w=fwidth(uv);\n\treturn texture(iChannel0, (floor(uv)+0.5+clamp((fract(uv)-0.5+w)/w,0.,1.)) / texsize);\t\n}\n\n\t\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float split = floor(iResolution.x / 3.0);\n\tvec2 uv = fragCoord.xy;\n    if (floor(uv.x)==split || floor(uv.x)==split*2.) { fragColor=vec4(0.); return ; }\n\t\n\t// rotate the uv with time\t\t\n\tfloat c=cos(iTime*0.01),s=sin(iTime*0.01);\n\tuv=uv*mat2(c,s,-s,c)*0.1;\t\n\t\n\t// sample the texture!\n\tfloat anisotest=1.; // if you want stretchy pixels, try change this number to 0.1 \n\tuv*=vec2(1.0,anisotest);\n\t\n\tif (fragCoord.x<split)\n\t\tfragColor = AntiAliasPointSampleTexture_None(uv,iChannelResolution[0].xy);\t\n\telse if (fragCoord.x<split*2.)\n\t\tfragColor = AntiAliasPointSampleTexture_Smoothstep(uv,iChannelResolution[0].xy);\t\n\telse\n\t\tfragColor = AntiAliasPointSampleTexture_Linear(uv,iChannelResolution[0].xy);\t\n}","name":"Image","description":"","type":"image"}]}