{"ver":"0.1","info":{"id":"4ccGWN","date":"1711829539","viewed":21,"name":"Fork L2 - TP3 - sow1236 623","username":"sow1236","description":"TP4 - Shadowing","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["shadowing"],"hasliked":0,"parentid":"4XBSR1","parentname":"L2 - TP3 - Shadows"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modeling - 2024.02.06\n// Eric Galin\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\nstruct Ray {\nvec3 ro; // Ray origin\nvec3 rd; // Direction\n};\n\n// Compute a point on the ray\n// ray : Ray\n// t   : depth\nvec3 Point(Ray ray,float t)\n{\n  return ray.ro+t*ray.rd;\n}\n\n// Compute the ray\n//     m : Mouse position\n//     p : Pixel\nRay CreateRay(vec2 m,vec2 p)\n{\n  float a=3.*3.14*m.x; \n  float le=3.0;\n  \n  // Origin\n  vec3 ro=vec3(35.,0.,10.)*Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(0.,0.,3.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  vec3 rd=normalize(p.x*u+p.y*v+le*w);\n  return Ray(ro,rd);\n}\n\n// Primitives\n\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\nfloat Sphere(vec3 p,vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n// Plane\n// p : point\n// c : center of skeleton\n// n : Normal\nfloat Plane(vec3 p,vec3 c,vec3 n)\n{\n  return dot(p-c,n);\n}\n\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n  return min(a,b);\n}\n\n// Union, extension to four sub-trees\n// a,b,c : field function of left and right sub-trees\nfloat Union(float a,float b,float c,float d)\n{\n  return min(min(a,b),min(c,d));\n}\n\n// Difference\n// a,b : field function of left and right sub-trees\nfloat Difference(float a,float b)\n{\n  return max(a,-b);\n}\n\n// Potential field of the object\n// p : point\nfloat object(vec3 p)\n{\n\n  float v=  Sphere(p,vec3(3.,0.,6.),4.);\n\n  v=Union(v,\n    Sphere(p,vec3(0.,2.,3.),3.));\n  \n  float d=Union(\n      Sphere(p,vec3(5.,1.,5.),3.),\n    Sphere(p,vec3(-1.,1.,6.),3.),\n    Sphere(p,vec3(-1.,2.,2.),2.),\n    Sphere(p,vec3(1.,1.,6.),2.));\n  v=Difference(v,d);\n  \n  v=Union(v,\n    Plane(p,vec3(0.,0.,-1.),vec3(0.,0.0,1.0))\n  );\n  \n  return v;\n}\n\n// Analysis of the scalar field\n\nconst int Steps=200;// Number of steps\nconst float Epsilon=.01;// Marching epsilon\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  float v=object(p);\n  n.x=object(vec3(p.x+eps,p.y,p.z))-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z))-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps))-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// ray : Ray \n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(Ray ray,float e,out bool h,out int s)\n{\n  h=false;\n  \n  // Start at the origin\n  float t=0.;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=Point(ray,t);\n    float v=object(p);\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Lighting\n\n// Background color\n// d : Ray direction\nvec3 Background(vec3 d)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),d.z*.5+.5);\n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\n\n// Fonction pour calculer le i-ème point d'une série de n sur une sphère en utilisant la séquence de Fibonacci\nvec3 FibonacciSphere(float i, float n) {\n    float phi = i * (3.1415926535897932384626433832795 * (3.0 - sqrt(5.0)));\n    float y = 1.0 - (i / (n - 1.0)) * 2.0;\n    float radius = sqrt(1.0 - y * y);\n    float x = cos(phi) * radius;\n    float z = sin(phi) * radius;\n    return vec3(x, y, z);\n}\n// Fonction pour calculer la i-ème direction unitaire d'une série de n points sur une sphère en utilisant la séquence de Fibonacci\nvec3 Hemisphere(float i, float n) {\n    float phi = i * (3.1415926535897932384626433832795 * (3.0 - sqrt(5.0)));\n    float y = 1.0 - (i / (n - 1.0)) * 2.0;\n    float radius = sqrt(1.0 - y * y);\n    float x = cos(phi) * radius;\n    float z = sin(phi) * radius;\n    return normalize(vec3(x, y, z));\n}\n\n// Fonction pour calculer l'ombre dur\nfloat Shadow(vec3 point, vec3 normal) {\n    // Position de la lumière ponctuelle\n    const vec3 lightPosition = vec3(5., 10., 30.);\n    \n    // Direction de la lumière par rapport au point\n    vec3 lightDirection = normalize(lightPosition - point);\n    \n    // Créer un rayon partant du point vers la lumière\n    Ray shadowRay = Ray(point + normal * Epsilon, lightDirection);\n    \n    // Variables pour enregistrer la détection et le nombre d'étapes\n    bool hitShadow;\n    int shadowSteps;\n    \n    // Traçage du rayon d'ombre\n    SphereTrace(shadowRay, length(lightPosition - point), hitShadow, shadowSteps);\n    \n    // Si le rayon d'ombre touche un objet avant d'atteindre la source lumineuse, le point est dans l'ombre\n    if (hitShadow) {\n        return 0.0;\n    } else {\n        return 1.0;\n    }\n}\n\n\n// Fonction pour approximer une ombre douce\nfloat SoftShadow(vec3 point, vec3 normal, float n) {\n    float shadow = 0.0;\n    for (float i = 0.0; i < n; i++) {\n        vec3 lightDirection = normalize(vec3(5., 10., 30.) - point);\n        vec3 samplePoint = FibonacciSphere(i, n);\n        float cosineAngle = dot(normalize(samplePoint), lightDirection);\n        shadow += smoothstep(0.3, 1.0, cosineAngle);\n    }\n    return shadow / n;\n}\n// Fonction pour approximer l'occlusion ambiante\nfloat Occlusion(vec3 point, vec3 normal, float n) {\n    float occlusion = 0.0;\n    for (float i = 0.0; i < n; i++) {\n        vec3 sampleDirection = Hemisphere(i, n);\n        float cosineAngle = dot(normalize(sampleDirection), normal);\n        occlusion += smoothstep(0.3, 1.0, cosineAngle);\n    }\n    return occlusion / n;\n}\n\n\nvec3 Shade(vec3 p,vec3 n,vec3 e)\n{\n  // Point light\n  const vec3 lp=vec3(5.,10.,30.);\n  \n  // Light direction to point light\n  vec3 l=normalize(lp-p);\n  \n  // Ambient color\n  vec3 ambient=.25+.25*Background(n);\n  \n  // Shadow computation\n  float shadow=Shadow(p,n);\n  // Phong diffuse\n  vec3 diffuse=.35*clamp(dot(n,l),0.,1.)*vec3(1.,1.,1.);\n  \n  // Specular\n  vec3 r=reflect(e,n);\n  vec3 specular=.15*pow(clamp(dot(r,l),0.,1.),35.)*vec3(1.,1.,1.);\n  vec3 c=ambient+shadow*(diffuse+specular);\n  return c;\n}\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)  \n{\n  // Pixel\n  vec2 pixel=(-iResolution.xy+2.*pxy)/iResolution.y;\n\n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n  \n  // Camera\n  Ray ray=CreateRay(m,pixel);\n  \n  \n  // Hit and number of steps\n  bool hit;\n  int s;\n  \n   // Trace ray\n float t=SphereTrace(ray,75.,hit,s);\n  \n  // Shade background\n  vec3 rgb=Background(ray.rd);\n  \n  if(hit)\n  {\n    // Position\n    vec3 p=Point(ray,t);\n    \n    // Compute normal\n    vec3 n=ObjectNormal(p);\n    \n    // Shade object with light\n    rgb=Shade(p,n,ray.rd);\n  }\n    \n  color=vec4(rgb,1.);\n}\n","name":"Image","description":"","type":"image"}]}