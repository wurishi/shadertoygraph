{"ver":"0.1","info":{"id":"4f2BDG","date":"1725458752","viewed":28,"name":"perlin continues","username":"kofi","description":"P.S.: if you are interested, the main problem now is to make all neighboring cells work together,. If you want to see it with multiple cells, change CELLS value to some arbitrary value. If anyone may help, please, comment :)","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["perlin"],"hasliked":0,"parentid":"McjBz3","parentname":"perlin in process"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926f\n#define CELLS 1.\n#define SPEED .5\nfloat rand(vec2 pos) {\n    return \n        fract(sin(dot(pos, vec2(23.2342, 82.29561))) * 82931.1857193);\n    \n}\nfloat fade(float t) {\n    return 6.*t*t*t*t*t - 15.*t*t*t*t + 10.*t*t*t;\n}\nfloat lerp(float a, float b, float k) {\n    return a + k * (b - a);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    //uv.x *= iResolution.x/iResolution.y;\n    //uv += .25 * iTime;\n    uv *= CELLS;\n    float time = iTime*SPEED;\n    vec2 b = floor(uv)/CELLS;\n    vec2 vll = vec2(sin(fract(rand(b))*(360.+time)), \n                    cos(fract(rand(b))*(360.+time))),\n         vlr = vec2(sin(fract(rand(vec2(b.x + 1., b.y)))*(360.+time)), \n                    cos(fract(rand(vec2(b.x + 1., b.y)))*(360.+time))),\n         vtl = vec2(sin(fract(rand(vec2(b.x, b.y + 1.)))*(360.+time)), \n                    cos(fract(rand(vec2(b.x, b.y + 1.)))*(360.+time))),\n         vtr = vec2(sin(fract(rand(vec2(b.x + 1., b.y + 1.)))*(360.+time)), \n                    cos(fract(rand(vec2(b.x + 1., b.y + 1.)))*(360.+time)));\n         \n    float dll = dot(vll, normalize(fract(uv) - vec2(0., 0.))),\n          dlr = dot(vlr, normalize(fract(uv) - vec2(1., 0.))),\n          dtl = dot(vtl, normalize(fract(uv) - vec2(0., 1.))),\n          dtr = dot(vtr, normalize(fract(uv) - vec2(1., 1.)));\n    \n        \n    \n    vec3 col = vec3(\n            //1./dot(uv, vector), -1./dot(uv, vector)\n            //vec2(lerp(lerp(dtl, dtr, fract(uv.x)), lerp(dll, dlr, fract(uv.x)), fract(uv.y))),\n            fade(dll+dlr+dtl+dtr)/4., fade(-dll-dlr-dtl-dtr)/4.\n            //rand(b), rand(b)\n            , 0.5\n          ) + .4;\n          if (col.x >=1. || col.y >= 1.) col = vec3(1.);\n    fragColor = vec4(col,1.0);\n}\n\n\n","name":"Image","description":"","type":"image"}]}