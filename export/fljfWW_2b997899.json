{"ver":"0.1","info":{"id":"fljfWW","date":"1652210479","viewed":52,"name":"DZ","username":"Kamilla","description":"DZ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["dz"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define myPi 3.141592654f\n#define Eps 1e-8\n#define maxZ 100.0\n\nconst int n = 4;\nvec3 colVec[n] = vec3[n](vec3(0.36, 0.63, 0.9), vec3(0.7, 0.1, 0.9), vec3(0.4, 0.9, 0.5), vec3(0.5, 0.3, 0.9));\nvec3 BGcol = vec3(1.0, 1.0, 1.0);\n\nint sizes[n] = int[n](3, 3, 3, 4), inds[n] = int[n](0, 3, 6, 10); const int m = 15;\nvec2 polygonsXY[m]; float polygonsZ[m];\n\nvoid initPolygons(out vec2 polygonsXY[m], out float  polygonsZ[m], in float time){\n// 0 -- triangle\n    polygonsXY[0] = vec2(0.8, 0.1); polygonsZ[0] = 0.1; \n    polygonsXY[1] = vec2(0.8, 0.9); polygonsZ[1] = 0.2;\n    polygonsXY[2] = vec2(0.2, 0.7); polygonsZ[2] = 0.1;\n \n// 1 -- triangle\n    float w = 3.0;\n    vec3 center = vec3(0.5, 0.3*sin(time*0.6) + 0.5, 0.9 + 0.1*cos(time*w)); float r = 0.3;\n    int i; float j = 0.9, phi = myPi/3.0;\n    float ang = 2.0*myPi/8.0; \n    vec3 tmpVec;\n    mat3 rot = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(phi), sin(phi)), vec3(0.0, sin(phi), cos(phi)) );\n    for (i = 3; i < 6; i++){\n        tmpVec = rot*(r*vec3(cos(j*ang + time), sin(j*ang + time), 0.0)); \n        polygonsXY[i] = tmpVec.xy + center.xy;\n        polygonsZ[i] = tmpVec.z + center.z;\n        j = j + 1.0;\n    }\n    \n// 2 -- triangle\n  w = 2.0;\n   center = vec3(0.55, 0.5, 0.1 + 0.05*sin(time*w)); r = 0.4;\n    j =0.0, phi = myPi/6.0;\n    ang = 1.0*myPi/4.0; \n    rot = mat3(vec3(0.9, 0.0, 0.0), vec3(0.0, cos(phi), sin(phi)), vec3(0.0, -sin(phi), cos(phi)) );\n    for (i = 6; i < 10; i++){\n        tmpVec = rot*(r*vec3(cos(j*ang + time), sin(j*ang + time), 0.0)); \n        polygonsXY[i] = tmpVec.xy + center.xy;\n        polygonsZ[i] = tmpVec.z + center.z;\n       j = j + 2.0;\n    }\n// 3 -- rotated square\n    polygonsXY[11] = vec2(0.2, 0.15); polygonsZ[11] = 0.1;\n    polygonsXY[12] = vec2(0.3, 0.4); polygonsZ[12] = 0.05;\n    polygonsXY[13] = vec2(0.3, 0.9); polygonsZ[13] = 0.05;\n    polygonsXY[14] = vec2(0.4, 1.0); polygonsZ[13] = 0.5;\n    \n}\n\nvoid initColors(out vec3 colVec[n], in float time) {\n    vec3 col = colVec[0] + 0.1*sin(time)*vec3(0.2, 0.3, 0.4);\n    col = colVec[1];\n    col = colVec[2];\n}\n\n\n\nint leftTurn(in vec2 a, in vec2 b, in vec2 c)\n{\n    float tmp = (c.x - a.x)*(b.y - a.y) - (c.y - a.y)*(b.x - a.x);\n    if (abs(tmp) < Eps) \n        return 0;\n    else \n        return tmp > 0.0 ? 1: -1;\n}\n\n\nbool inPolygon(in int ind0, in int size, in vec2 vert[m], in vec2 p) // vertices in counter clockwise order\n{\n    bool res = leftTurn(vert[ind0 + size-1], vert[ind0], p) <= 0; int i = ind0;\n    while(res && (i < ind0 + size -1))\n    {\n        res = res && (leftTurn(vert[i], vert[i+1], p) <= 0); i++;\n    }\n    return res;\n}\n\nfloat zInPlane(in vec3 a, in vec3 b, in vec3 c, in vec2 p) // z coordinate for (x,y) point of a plane (a-b, c-b)\n{\n    vec3 nrm = cross(a-b, c-b);\n    if (abs(nrm.z) < Eps) return a.z;\n    else return (dot(nrm, b) - nrm.x*p.x - nrm.y*p.y)/nrm.z;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float time = iTime, tmp; //iTime;\n    initPolygons(polygonsXY, polygonsZ, time);\n    initColors(colVec, time);\n    vec3 col = BGcol; float z = maxZ; \n    int i;\n\n    for (i =0; i < n - 2; i++){\n        if ( inPolygon(inds[i], sizes[i], polygonsXY, uv) ){\n            tmp = zInPlane(vec3(polygonsXY[inds[i]].x, polygonsXY[inds[i]].y, polygonsZ[inds[i]]), \\\n            vec3(polygonsXY[inds[i]+1].x, polygonsXY[inds[i]+1].y, polygonsZ[inds[i]+1]), \\\n            vec3(polygonsXY[inds[i]+2].x, polygonsXY[inds[i]+2].y, polygonsZ[inds[i]+2]), uv);\n            if (tmp < z){\n                z = tmp; col = colVec[i]; \n            }\n        }\n    }\n    \n    if ( inPolygon(inds[3], sizes[3], polygonsXY, uv) ){\n            tmp = zInPlane(vec3(polygonsXY[inds[3]].x, polygonsXY[inds[3]].y, polygonsZ[inds[3]]), \\\n            vec3(polygonsXY[inds[3]+1].x, polygonsXY[inds[3]+1].y, polygonsZ[inds[3]+1]), \\\n            vec3(polygonsXY[inds[3]+2].x, polygonsXY[inds[3]+2].y, polygonsZ[inds[3]+2]), uv);\n            if (tmp < z){\n                z = tmp; col = colVec[3] + 0.7*sin(iTime)*vec3(0.6, 0.9, 1.0);; \n            }\n        }\n      if ( inPolygon(inds[2], sizes[2], polygonsXY, uv) ){\n            tmp = zInPlane(vec3(polygonsXY[inds[3]].x, polygonsXY[inds[2]].y, polygonsZ[inds[2]]), \\\n            vec3(polygonsXY[inds[2]+1].x, polygonsXY[inds[2]+1].y, polygonsZ[inds[2]+1]), \\\n            vec3(polygonsXY[inds[2]+2].x, polygonsXY[inds[2]+2].y, polygonsZ[inds[2]+2]), uv);\n            if (tmp < z){\n                z = tmp; col = colVec[2] + 0.25*cos(iTime)*vec3(0.0, 0.7, 1.0);; \n            }\n        }  \n     if ( inPolygon(inds[2], sizes[1], polygonsXY, uv) ){\n            tmp = zInPlane(vec3(polygonsXY[inds[1]].x, polygonsXY[inds[1]].y, polygonsZ[inds[1]]), \\\n            vec3(polygonsXY[inds[1]+1].x, polygonsXY[inds[1]+1].y, polygonsZ[inds[1]+1]), \\\n            vec3(polygonsXY[inds[1]+2].x, polygonsXY[inds[1]+2].y, polygonsZ[inds[1]+2]), uv);\n            if (tmp < z){\n                z = tmp; col = colVec[1] + 0.6*sin(iTime)*vec3(0.3, 0.0, 0.9);; \n            }\n        }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}