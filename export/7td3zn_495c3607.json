{"ver":"0.1","info":{"id":"7td3zn","date":"1635631580","viewed":1569,"name":"20211031_Shader Royale (0b5vr)","username":"0b5vr","description":"Shader Royale @ InÃ©rcia Demoparty, 2nd place. Coded in 70 minutes.\n\nhttps://inercia.pt/\n\nMy perspective: https://youtu.be/yoTBYAWQEaQ\n","likes":56,"published":1,"flags":32,"usePreview":1,"tags":["3d","fractal","pathtracer","isometric","livecoding","orthographic","octree"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n  fragColor = texture(iChannel0,fragCoord/iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define lofi(i,j) (floor((i)/(j))*(j))\n#define fs(i) (fract(sin((i)*114.514)*1919.810))\n\nfloat time;\nfloat seed;\n\nconst float FAR=20.;\nconst float PI=acos(-1.);\nconst float TAU=PI*2.;\n\nfloat random(){\n  seed++;\n  return fs(seed);\n}\n\nmat2 r2d(float t){\n  float c=cos(t);\n  float s=sin(t);\n  return mat2(c,-s,s,c);\n}\n\nmat3 orthBas(vec3 z){\n  z=normalize(z);\n  vec3 up=abs(z.y)>.999?vec3(0,0,1):vec3(0,1,0);\n  vec3 x=normalize(cross(up,z));\n  return mat3(x,cross(z,x),z);\n}\n\nvec3 sampleLambert(vec3 N){\n  float p=TAU*random();\n  float ct=sqrt(random());\n  float st=sqrt(1.0-ct*ct);\n  return orthBas(N)*vec3(cos(p)*st,sin(p)*st,ct);\n}\n\nvec4 ibox(vec3 ro,vec3 rd,vec3 s){\n  vec3 o=ro/rd;\n  vec3 t=abs(s/rd);\n  vec3 fv=-o-t;\n  vec3 bv=-o+t;\n  float f=max(fv.x,max(fv.y,fv.z));\n  float b=min(bv.x,min(bv.y,bv.z));\n  if(f<.0||b<f){return vec4(FAR);}\n  vec3 N=-sign(rd)*step(fv.zxy,fv)*step(fv.yzx,fv);\n  return vec4(N,f);\n}\n\nfloat heck(vec3 p){\n  float dice=fs(dot(p,vec3(7,1,-3)));\n  return .5*time+.1*dot(p,vec3(1,-1,1))+.1*dice;\n}\n\nbool isHole(vec3 p){\n  if(dot(p,vec3(1))>1.){return true;}\n  \n  float h=heck(p);\n  float s=floor(h);\n  float dens=mix(.4,.8,step(1.,mod(h,2.)));\n\n  float dice=fs(s+dot(p,vec3(5,8,1)));\n  return dice>dens;\n}\n\nstruct QTR {\n  vec3 cell;\n  vec3 pos;\n  float len;\n  float size;\n  bool hole;\n};\n\nQTR qt(vec3 ro,vec3 rd){\n  QTR r;\n  r.size=1.;\n  vec3 dicecell=lofi(ro+rd*1E-2*0.5,0.5)+0.5/2.;\n  float dice=dot(dicecell,vec3(1,-3,0));\n  float piston=smoothstep(-.5,.5,sin(dice+time));\n  vec3 off=vec3(0,0,piston);\n  ro+=off;\n  \n  for(int i=0;i<4;i++){\n    r.size/=2.;\n    r.cell=lofi(ro+rd*1E-2*r.size,r.size)+r.size/2.;\n    \n    if(isHole(r.cell)){break;}\n    \n    float dice=fs(dot(r.cell,vec3(3,4,5)));\n    if(dice>r.size+.2){break;}\n  }\n  vec3 o=(ro-r.cell)/rd;\n  vec3 t=abs(r.size/2./rd);\n  vec3 bv=-o+t;\n  float b=min(bv.x,min(bv.y,bv.z));\n  r.len=b;\n  \n  r.pos=r.cell-off;\n  r.hole=isHole(r.cell);\n  \n  return r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n  vec2 uv = vec2(gl_FragCoord.x / iResolution.x, gl_FragCoord.y / iResolution.y);\n  vec2 p=uv*2.-1.;\n  p.x*=iResolution.x/iResolution.y;\n  \n  time=iTime;\n  seed=texture(iChannel0,uv*8.).x*8.;\n  seed+=fract(time);\n\n  vec3 col=vec3(0);\n  vec3 colRem=vec3(1);\n  \n  vec3 co=vec3(3,1,1.5);\n  vec3 ct=vec3(0,0,0);\n  mat3 basis=orthBas(co-ct);\n  \n  vec3 ro0=co+(basis*vec3(2.*p,0));\n  ro0+=orthBas(vec3(1))*vec3(0,-.4*time,0);\n  vec3 ro=ro0+basis*vec3(random(),random(),0)/iResolution.y*2.;\n  vec3 rd0=basis*normalize(vec3(p*.0,-1));\n  vec3 rd=rd0;\n  \n  float samples=1.;\n  bool shouldInit=false;\n  bool isFirstRay=true;\n  \n  for(int i=0;i<200;i++){\n    if(shouldInit){\n      ro=ro0;\n      rd=rd0+basis*vec3(random(),random(),0)/iResolution.y*2.;\n      colRem=vec3(1);\n      samples++;\n      shouldInit=false;\n    }\n    \n    QTR qtr=qt(ro,rd);\n    \n    if(!qtr.hole){\n      float size=qtr.size/2.;\n      size-=.01;\n      size=max(0.,size);\n      vec4 isect=ibox(ro-qtr.pos,rd,vec3(size));\n      if(isect.w<FAR){\n        ro+=rd*isect.w;\n\n        vec3 N=isect.xyz;\n        \n        float h=heck(qtr.cell);\n        float sw=step(1.,mod(h,2.));\n        \n        vec3 m=fs(floor(h)+cross(qtr.cell,vec3(6,8,1)));\n        \n        float rough=pow(random(),mix(2.,.5,sw)); // cringe\n        \n        const vec3 ikea0=vec3(.7,.6,.2);\n        const vec3 ikea1=vec3(.1,.1,.7);\n        \n        float fresnel=1.0-abs(dot(rd,N));\n        fresnel=pow(fresnel,5.);\n        if(random()<fresnel){\n          rough=.0;\n        }else if(m.x<.2){\n          colRem*=.1;\n        }else if(m.x<.4){\n          colRem*=.5+.5*sin(vec3(0,2,4)+1.*lofi(m.y,.25)+sw);\n        }else if(m.x<.5){\n          if(sw<.5){\n            col+=colRem*2.;\n          }else{\n            colRem*=.8;\n          }\n          rough=.1;\n        }else{\n          colRem*=.8;\n        }\n        \n        rd=mix(\n          reflect(rd,N),\n          sampleLambert(N),\n          rough\n        );\n        isFirstRay=false;\n        \n        if(length(colRem)<.1){\n          shouldInit=true;\n        }\n      }\n    }\n    \n    if(isFirstRay){\n      ro0=ro;\n    }\n      \n    ro+=rd*qtr.len;\n    \n    if(length(ro-ro0)>FAR||(dot(ro,vec3(1))>2.&&dot(rd,vec3(1))>0.)){\n      float h=heck(ro);\n      float sw=step(1.,mod(h,2.));\n      col+=colRem*mix(.1,2.,sw);\n      float scan=step(.99,sin(.2*ro.y+4.0*time));\n      col+=colRem*scan*vec3(10.,.1,.1);\n      shouldInit=true;\n    }\n  }\n  \n  col=pow(col/samples,vec3(.4545));\n  col*=1.0-.3*length(p);\n  col=vec3(\n    smoothstep(.1,.9,col.x),\n    smoothstep(.0,1.0,col.y),\n    smoothstep(-.1,1.1,col.z)\n  );\n  \n  col=mix(texture(iChannel1,uv).rgb,col,.3);\n\n  fragColor = vec4(col,1);\n}","name":"Buffer A","description":"","type":"buffer"}]}