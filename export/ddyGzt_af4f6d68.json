{"ver":"0.1","info":{"id":"ddyGzt","date":"1678931639","viewed":184,"name":"GPT-4 generated code","username":"shyuriken","description":"\"Write a GLSL code that can be copied and pasted into the Image pane of shadertoy.com to display a animation of a red 3D sphere gradually changing into a green 3D cube on the ocean\"","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["ai","gpt4"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 lightPos = vec3(0, 10, 0);\nconst vec3 cameraPos = vec3(0, 3, 5);\n\nfloat sphere(vec3 p, float radius) {\n    return length(p) - radius;\n}\n\nfloat box(vec3 p, vec3 size) {\n    vec3 d = abs(p) - size;\n    return length(max(d, vec3(0))) + min(max(d.x, max(d.y, d.z)), 0.0);\n}\n\nfloat sea(vec3 p) {\n    return p.y + 0.15 * sin(10.0 * p.x + iTime) + 0.1 * sin(10.0 * p.z + iTime);\n}\n\nfloat map(vec3 p) {\n    float t = smoothstep(0.0, 10.0, iTime);\n    float sphereDist = sphere(p - vec3(0, 1, 0), 1.0);\n    float boxDist = box(p - vec3(0, 1, 0), vec3(1));\n    float surfaceDist = sea(p);\n    float objectDist = mix(sphereDist, boxDist, t);\n    return min(objectDist, surfaceDist);\n}\n\nvec3 normal(vec3 p) {\n    vec2 eps = vec2(0.001, 0);\n    return normalize(vec3(\n        map(p + eps.xyy) - map(p - eps.xyy),\n        map(p + eps.yxy) - map(p - eps.yxy),\n        map(p + eps.yyx) - map(p - eps.yyx)\n    ));\n}\n\nfloat raymarch(vec3 ro, vec3 rd) {\n    float t = 0.0;\n    for (int i = 0; i < 64; i++) {\n        vec3 p = ro + rd * t;\n        float d = map(p);\n        if (d < 0.001) return t;\n        t += d;\n        if (t > 100.0) break;\n    }\n    return -1.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec3 rd = normalize(vec3(uv, -1.0));\n    float t = raymarch(cameraPos, rd);\n\n    vec3 color = vec3(0);\n    if (t > 0.0) {\n        vec3 p = cameraPos + rd * t;\n        vec3 n = normal(p);\n        vec3 lightDir = normalize(lightPos - p);\n        vec3 r = reflect(-lightDir, n);\n        vec3 viewDir = normalize(cameraPos - p);\n\n        float diff = max(dot(n, lightDir), 0.0);\n        float spec = pow(max(dot(r, viewDir), 0.0), 64.0);\n\n        float smoothT = smoothstep(0.0, 10.0, iTime);\n        vec3 objectColor = mix(vec3(1, 0, 0), vec3(0, 1, 0), smoothT);\n\n        color = objectColor * diff + vec3(1) * spec;\n        color = mix(color, vec3(0.1, 0.3, 0.7), 0.6 * (1.0 - diff));\n    \n        }\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}