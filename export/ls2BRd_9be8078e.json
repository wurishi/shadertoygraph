{"ver":"0.1","info":{"id":"ls2BRd","date":"1501785259","viewed":353,"name":"~Mountains~","username":"kloumpt","description":" ","likes":9,"published":1,"flags":64,"usePreview":0,"tags":["new","shoes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sfSD2","filepath":"https://soundcloud.com/bordelloaparigi/ichisan-od-lagune-do-lagune","previewfilepath":"https://soundcloud.com/bordelloaparigi/ichisan-od-lagune-do-lagune","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define FRACT_NOISE_ITERATIONS 8\n#define FRACT_NOISE_SCALE 2.10\n\n\n\n\n#define ORIGINAL_COLOR     vec3(0.75, 0.50, 0.60)\n\n\n#define SUPA_ORANGE_COLOR  vec3(3.00, 0.50, 0.60)\n\n#define SUPA_VIOLET_COLOR  vec3(0.75, 0.50, 2.00)\n\n#define SUPA_PEACH_COLOR   vec3(1.50, 0.50, 0.60)\n\n#define SUPA_PEARL_COLOR   vec3(0.90, 0.90, 1.50)\n\n#define SUPA_DIAMS_COLOR   vec3(0.50, 0.90, 1.50)\n\n\n#define YOUR_OWN_COLOR     vec3(0.50, 0.50, 0.50)\n\n\n// Change it to one of the colors above ;)\n#define BASE_COLOR SUPA_PEACH_COLOR\n\n\n#define LAYER_COUNT 6\n\n\n\n\n\nfloat rand(vec2 p) {\n    return texture(iChannel0, p / iChannelResolution[0].xy).r;\n}\n\nfloat fract_noise (vec2 p) {\n    float result = 0.0;\n    float k_sum = 0.0; \n    for (int i = 0; i < FRACT_NOISE_ITERATIONS; i++) {\n        float k = pow(FRACT_NOISE_SCALE, -float(i));\n        k_sum += k;\n        result += rand(p * pow(FRACT_NOISE_SCALE, float(i))) * k;\n    }\n    \n    return result / k_sum;\n}\n\nvec3 to_background_color(vec3 base_color, float weight) {\n    return base_color +  (vec3(1.0) - base_color.bgr * 0.6) * weight * 0.7;\n}\n\nvec3 compute_for_p(vec2 uv) {\n    vec3 texture_color = texture(iChannel1, uv).rgb;\n    \n    vec3 base_color = BASE_COLOR * (0.5 + 0.4 * uv.y);\n    \n    vec3 background_color = to_background_color(base_color, 1.0);\n    vec3 color = background_color;\n    \n    float position_offset = iTime  * 0.5 - 5.0 * iMouse.x / iResolution.x;\n    \n    bool second_mountain = false;\n    bool second_mountain_processed = false;\n    float mountain_blend = 0.0;\n    for (int layer = 0; layer < LAYER_COUNT; layer++) {\n        float parralax = 3.0 / (2.0 + float(layer));\n        \n        float position_in_mountain = uv.x * 10.0 + rand(vec2(float(float(layer) / float(LAYER_COUNT) * iResolution.x))) * iResolution.x  + position_offset * parralax;\n        float layer_height_relative = fract_noise(vec2(position_in_mountain, 0.0));\n       \tfloat layer_height_absolute = pow((0.015 + float(layer) * 0.75) / (10.0 + float(LAYER_COUNT) * 2.0), 0.5) + 2.0 * layer_height_relative / float(LAYER_COUNT);\n        \n        \n        \n        if (uv.y < layer_height_absolute) {\n            vec3 new_color = to_background_color(base_color, float(layer) / float(LAYER_COUNT));\n            \n            if (second_mountain) {\n                second_mountain_processed = true;\n                color +=  (1.0 - mountain_blend) * new_color;\n\t            break;\n                \n            } else {\n                second_mountain = true;\n                mountain_blend = smoothstep(-2.0 / iResolution.y, 2.0 / iResolution.x, layer_height_absolute - uv.y);\n                color =  mountain_blend * new_color;\n                    \n            }\n        }\n    }\n    if (second_mountain && !second_mountain_processed) {\n    \tcolor += (1.0 - mountain_blend) * background_color;\n    }\n        \n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 color = vec3(0.0);\n    color = compute_for_p(uv);\n    \n   \tcolor += (rand(fragCoord + iTime * iResolution.x) * 2.0 - 1.0 ) / 256.0;\n   \n    \n    \n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}