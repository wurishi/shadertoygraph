{"ver":"0.1","info":{"id":"lsVXDR","date":"1463895587","viewed":394,"name":"Creepy Forest","username":"zackpudil","description":"My first attempt at mixing volumetric ray casting and sphere tracing.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","distancefields","volumetric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159\n\nvec2 hash(vec2 n) {\n\tvec2 x = vec2(\n\t\tdot(n, vec2(171.0, 311.0)),\n\t\tdot(n, vec2(269.0, 382.0)));\n\t\n\treturn fract(sin(x)*43578.5453);\n}\n\nfloat hash(float n) {\n\treturn fract(sin(n)*43758.5453);\n}\n\nfloat noise(vec3 x) {\n\tvec3 p = floor(x);\n\tvec3 f = fract(x);\n\t\n\tf = f*f*(3.0 - 2.0*f);\n\tfloat n = p.x + p.y*57.0 + p.z*113.0;\n\t\n\treturn mix(\n\t\tmix(\n\t\t\tmix(hash(n + 000.0), hash(n + 001.0), f.x),\n\t\t\tmix(hash(n + 057.0), hash(n + 058.0), f.x),\n\t\t\tf.y),\n\t\tmix(\n\t\t\tmix(hash(n + 113.0), hash(n + 114.0), f.x),\n\t\t\tmix(hash(n + 170.0), hash(n + 171.0), f.x),\n\t\t\tf.y),\n\t\tf.z);\n}\n\nconst mat3 m3 = mat3( 0.00,  0.80,  0.60,\n              -0.80,  0.36, -0.48,\n              -0.60, -0.48,  0.64 );\n\nfloat fbm(vec3 p) {\n\tfloat f = 0.0;\n\t\n\tf += 0.5000*noise(p); p *= m3*2.03;\n\tf += 0.2500*noise(p); p *= m3*2.07;\n\tf += 0.1250*noise(p); p *= m3*2.01;\n\tf += 0.0625*noise(p);\n\tf /= 0.9375;\n\t\n\treturn f;\n}\n\nfloat smin(float a, float b, float k) {\n\tfloat res = exp(-a*k) + exp(-b*k);\n\t\n\treturn -log(res)/k;\n}\n\nfloat volume(vec3 p) {\n\tfloat d = -p.y - 1.2;\n\td = clamp(d + 1.0*fbm(2.0*p + 0.2*iTime), 0.0, 1.0);\n\treturn d;\n}\n\nvec4 volumetric(vec3 ro, vec3 rd, float md, vec2 p) {\n\tfloat s = 0.05, t = 0.0;\n\tvec4 sum = vec4(0);\n\t\n\tt += 0.1*hash(p).x;\n\t\n\tfor(int i = 0; i < 100; i++) {\n\t\tif(sum.a > 0.99) continue;\n\t\tif(t > md) continue;\n\t\t\n\t\tfloat d = volume(ro + rd*t);\n\t\t\n\t\tvec4 vol = vec4(mix(vec3(0.7), vec3(1.0), d), d);\n\t\tvol.rgb = mix(vol.rgb, vec3(0), 1.0 - exp(-0.6*t));\n\t\t\n        vol.a *= 0.3;\n\t\tvol.rgb *= vol.a;\n\t\tsum += vol*(1.0 - sum.a);\n\t\t\n\t\tt += s;\n\t}\n\t\n\treturn clamp(sum, 0.0, 1.0);\n}\n\nfloat map(vec3 p) {\n\tvec3 q = p;\n\t\n\tq.z += 30.0;\n\tq = q + noise(q);\n\tfloat n = dot(cos(q*PI/2.0), sin(q.yzx*PI/2.0));\n\tfloat s =  .45 - .45*n + 0.2*fbm(10.0*p) - 0.2*smoothstep(0.1, 1.0, noise(3.0*p))*fbm(50.0*p);\n\t\n\treturn smin(p.y + 1.2, s, 10.0);\n}\n\nfloat march(vec3 ro, vec3 rd) {\n\tfloat t = 0.0;\n\t\n\tfor(int i = 0; i < 50; i++) {\n\t\tfloat h = map(ro + rd*t);\n\t\tif(abs(h) < 0.001 || t >= 10.0) break;\n\t\tt += h*0.75;\n\t}\n\t\n\treturn t;\n}\n\nvec3 normal(vec3 p) {\n\tvec2 h = vec2(0.001, 0.0);\n\tvec3 n = vec3(\n\t\tmap(p + h.xyy) - map(p - h.xyy),\n\t\tmap(p + h.yxy) - map(p - h.yxy),\n\t\tmap(p + h.yyx) - map(p - h.yyx)\n\t);\n\t\n\treturn normalize(n);\n}\n\nfloat ao(vec3 p, vec3 n) {\n\tfloat s = 0.005;\n\tfloat t = s;\n\t\n\tfloat o = 0.0;\n\tfloat w = 1.0;\n\t\n\tfor(int i = 0; i < 15; i++) {\n\t\tfloat h = map(p + n*t);\n\t\t\n\t\to += (t - h)*w;\n\t\tw *= 0.95;\n\t\t\n\t\tt += s;\n\t}\n\t\n\treturn 1.0 - clamp(o, 0.0, 1.0);\n}\n\nmat3 camera(vec3 eye, vec3 lat) {\n\tvec3 ww = normalize(lat - eye);\n\tvec3 uu = normalize(cross(vec3(0, 1, 0), ww));\n\tvec3 vv = normalize(cross(ww, uu));\n\t\n\treturn mat3(uu, vv, ww);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = -1.0 + 2.0*(fragCoord.xy/iResolution.xy);\n\tuv.x *= iResolution.x/iResolution.y;\n    \n\tvec3 col = vec3(0);\n\t\n\tvec3 ro = vec3(iTime*0.4, -0.4 - 0.01*sin(9.0*iTime), -4.0);\n    float x = smoothstep(-1.0, 1.0, 2.0*cos(iTime))*sign(cos(0.5*iTime));\n\tvec3 rd = normalize(camera(ro, ro + vec3(1.0, 0, x))*vec3(uv, 1.97));\n\t\n\tfloat i = march(ro, rd);\n\t\n\tif(i < 10.0) {\n\t\tvec3 pos = ro + rd*i;\n\t\tvec3 nor = normal(pos);\n\t\t\n\t\tvec3 rig = vec3(0, .5, 0);\n\t\tvec3 lig = normalize(pos - rig);\n\t\t\n\t\tcol  = 0.3*vec3(1);\n\t\tcol += 0.8*clamp(dot(lig, nor), 0.0, 1.0)*vec3(1);\n\t\t\n\t\tvec3 mat= mix(vec3(0.62, 0.32, 0.17), vec3(0.0), fbm(10.0*pos*vec3(1.77, 0, 2.0)));\n        mat = mix(mat, vec3(0.2, 0.55, 0.2), smoothstep(0.4, 1.0, noise(3.0*pos)));\n\t\t\n\t\tcol *= mat;\n\t\tcol *= ao(pos, nor);\n\t}\n\t\n\tvec4 vol = volumetric(ro, rd, i, uv);\n\tcol = mix(col, vec3(0), 1.0 - exp(-0.39*i));\n\tcol = mix(col, smoothstep(0.0, 1.0, vol.rgb), vol.a);\n\tcol = pow(col, vec3(.454545));\n\t\n\tfragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}