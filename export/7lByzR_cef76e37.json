{"ver":"0.1","info":{"id":"7lByzR","date":"1649013060","viewed":121,"name":"Light Totem (Twitch)","username":"rimina","description":"Some playing with glow from my Twitch live coding stream 3rd of April 2022.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","sdf","glow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Copyright Â© 2022 rimina.\n// All rights to the likeness of the visuals reserved.\n\n// Any individual parts of the code that produces the visuals is\n// available in the public domain or licensed under the MIT license,\n// whichever suits you best under your local legislation.\n\n// This is to say: you can NOT use the code as a whole or the visual\n// output it produces for any purposes without an explicit permission,\n// nor can you remix or adapt the work itself without a permission.*\n// You absolutely CANNOT mint any NFTs based on the Work or part of it.\n// You CAN however use any individual algorithms or parts of the Code\n// for any purpose, commercial or otherwise, without attribution.\n\n// *(In practice, for most reasonable requests, I will gladly grant\n//   any wishes to remix or adapt this work :)).\n\n\n//Huge thanks to the live coding community,\n//I've learned so much from you, e.g. the glow trick!!!\n\nconst float E = 0.001;\nconst float FAR = 100.0;\nconst int STEPS = 64;\n\nvec3 glow = vec3(0.0);\n\nstruct Material{\n    vec3 lamb;\n    vec3 spec;\n    float shiny;\n};\n\nMaterial M;\n\nMaterial getMaterial(int id){\n    Material m;\n\n    m.lamb = vec3(0.8, 0.5, 0.2);\n    m.spec = vec3(0.8, 0.5, 0.2)*1.25;\n    m.shiny = 20.0;\n\n    if(id == 0){\n        m.lamb = vec3(0.0);\n        m.spec = m.lamb;\n        m.shiny = 100.0;\n    }\n\n    return m;\n    }\n\nfloat box(vec3 p, vec3 b){\n    vec3 d = abs(p)-b;\n    return length(max(d, 0.0)) + min(max(d.x, max(d.y, d.z)), 0.0);\n}\n\nfloat sphere(vec3 p, float r){\n    return length(p)-r;\n}\n\nvoid rot(inout vec2 p, float a){\n    p = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\nfloat scene(vec3 p){\n    vec3 pp = p;\n\n    pp.y = abs(pp.y) - 20.0;\n    float ground = box(pp, vec3(40.0, 1.5, 15.0));\n\n    pp.x = abs(pp.x) - 35.0;\n    for(int i = 0; i < 3; ++i){\n        pp.z = abs(pp.z) - 3.75;\n    }\n    rot(pp.xz, radians(20.0));\n    ground = min(ground, box(pp-vec3(0.0, -10.0, 0.0), vec3(1.0, 10.0, 1.2)));\n\n\n    pp = p;\n    for(int i = 0; i < 5; ++i){\n        pp = abs(pp) - vec3(0.75, 2.0, 1.5);\n        rot(pp.xz, iTime*0.1);\n        rot(pp.zy, /*fft*2.0*/iTime*0.05);\n        rot(pp.xy, /*fft*0.5+*/iTime*0.1);\n    }\n\n    float cubes = box(pp, vec3(5.0, 0.2, 5.0));\n\n    glow += vec3(0.8, 0.25, 0.15) * 0.05 / (abs(cubes) + 0.01);\n\n\n    if(ground < cubes){\n        M = getMaterial(1);\n    }\n    else{\n        M = getMaterial(0);\n    }\n\n    return ground;\n}\n\nfloat march(vec3 ro, vec3 rd){\n    float t = E;\n    vec3 p = ro;\n    for(int i = 0; i < STEPS; ++i){\n        float d = scene(p);\n        t += d;\n        p = ro + rd * t;\n\n        if(d < E || t > FAR){\n          break;\n        }\n    }\n    return t;\n}\n\nvec3 normals(vec3 p){\n    vec3 e = vec3(E, 0.0, 0.0);\n    return normalize(vec3(\n        scene(p + e.xyy) - scene(p - e.xyy),\n        scene(p + e.yxy) - scene(p - e.yxy),\n        scene(p + e.yyx) - scene(p - e.yyx)\n    ));\n}\n\nvec3 shade(vec3 rd, vec3 p, vec3 ld, Material m){\n    vec3 n = normals(p);\n\n    float l = max(dot(n, ld), 0.0);\n    float a = max(dot(reflect(rd, ld), n), 0.0);\n    float s = pow(a, m.shiny);\n\n    return m.lamb*l + m.spec*s;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 q = -1.0 + 2.0*uv;\n    q.x *= iResolution.x/iResolution.y;\n\n    vec3 ro = vec3(0.0, -4.0, 37.0);\n    vec3 rt = vec3(0.0, 0.0, -1.0);\n\n    vec3 z = normalize(rt-ro);\n    vec3 x = normalize(cross(z, vec3(0.0, 1.0, 0.0)));\n    vec3 y = normalize(cross(x, z));\n\n    vec3 rd = normalize(mat3(x, y, z) * vec3(q, 1.0/radians(60.0)));\n\n    float t = march(ro, rd);\n    vec3 p = ro + rd * t;\n    vec3 ld = normalize(vec3(0.0, 0.0, -10.0)-p);\n    Material m = M;\n\n    vec3 gradient = smoothstep(-0.1, 1.0, vec3(length(q)));\n    vec3 col = mix(vec3(0.0, 0.1, 0.15), vec3(0.0, 0.0, 0.05) ,gradient);\n    if(t < FAR){\n        col = shade(rd, p, ld, m);\n    }\n\n    col += glow;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}