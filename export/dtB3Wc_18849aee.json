{"ver":"0.1","info":{"id":"dtB3Wc","date":"1674048482","viewed":264,"name":"Fractal Shader 2 by AI (ChatGPT)","username":"Patan77","description":"Animated fractal shader generated using openAi ChatGPT","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","ai","chatgpt"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Shader generated using ChatGPT\n// Original promot > Create code for a shadertoy shader that creates colorful animated fractal patterns.\n// Some code and parameters slightly modified manually.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime * 0.5;\n    vec2 z = (fragCoord.xy / iResolution.x) * 1.0 - 0.5;\n    vec2 c = vec2(-0.2 + 0.25*sin(time), 0.6 + 0.03*cos(time));\n    float d = 0.0;\n    float n = 0.0; \n    for (int i = 0; i < 200; i++)  \n    {\n        z = vec2(z.x*z.x - z.y*z.y, 2.0*z.x*z.y) + c; \n        d = dot(z,z);\n        n += 0.0002/ d; \n        if (d > 200.0) break;\n    }\n    vec3 color = vec3(abs(sin(n*20.0)), abs(cos(n*10.0)), abs(sin(n*5.0))); //\n    fragColor = vec4(color,1.0);\n}\n\n\n// Description generated with ChatGPT\n\n/*\nGeneral description: This code defines a function that generates a color value for each pixel of an image. \nThe color value is calculated based on the pixel's position, the current time and the number of iterations of a mathematical expression that involve the Mandelbrot set. \nThis can be used to create a fractal animation.\n\nThis code is written in GLSL, which is a C-like language used for programming shaders.\nIt defines a function called \"mainImage\" that takes in two inputs, \"fragColor\" and \"fragCoord\", and uses them to calculate and output a color value.\n\nThe first line declares the function \"mainImage\" with two input parameters: \"fragColor\" and \"fragCoord\". \"fragColor\" is the output of the function, and \"fragCoord\" is a vector containing the 2D coordinates of the current pixel being processed.\n\nThe next line declares a variable \"time\" and assigns it the value of \"iTime\" multiplied by 0.5. \"iTime\" is a built-in variable that holds the current time in seconds.\n\nThe next line declares a variable \"z\" and assigns it the result of a mathematical expression. The expression takes the xy-coordinates of \"fragCoord\", divides them by the x-resolution of the image, multiplies by 1.0 and then subtracts 0.5. It maps the pixel coordinates of the image to a range of -0.5 to 0.5.\n\nThe next line declares a variable \"c\" and assigns it a value that is the result of a mathematical expression. The expression uses the sin and cos functions to create an animation effect that changes over time.\n\nThe next line declares a variable \"d\" and assigns it the value of 0.0. It will be used later to store the dot product of the \"z\" variable.\n\nThe next line declares a variable \"n\" and assigns it the value of 0.0. It will be used later to store the number of iterations.\n\nThe next line is a for loop that iterates 200 times. Within the loop, it updates the value of \"z\" using a mathematical expression that involves squaring the x and y components of \"z\" and adding the \"c\" vector.\n\nThe next line computes the dot product of \"z\" and assigns it to the \"d\" variable.\n\nThe next line updates the value of \"n\" by adding the result of the division of 0.0002 by \"d\".\n\nThe next line is an if statement, which checks if the value of \"d\" is greater than 200.0. If it is, the loop will break.\n\nThe next line declares a variable \"color\" and assigns it a value that is the result of several calls to the sin and cos functions, with \"n\" being used as an argument.\n\nFinally, the function sets the \"fragColor\" output to a vec4 value which is the \"color\" variable with an alpha value of 1.0.\n\n\n*/","name":"Image","description":"","type":"image"}]}