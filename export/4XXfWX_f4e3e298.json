{"ver":"0.1","info":{"id":"4XXfWX","date":"1728993670","viewed":68,"name":"Wood Texture 3D","username":"VL","description":"2D slice of 3D Trees.\nleft : front view\nright : top view","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["pattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 hash22(vec2 p)\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(192.1031, 172.1030, 184.0973));\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\n\nfloat simplexNoise(vec2 uv)\n{\n    const float k1 = 0.366025f;\n    const float k2 = 0.211324f;\n\n    vec2 idx = floor(uv + (uv.x + uv.y) * k1);\n    vec2 a = uv - ((idx) - float(idx.x + idx.y) * k2);\n    vec2 tb = a.y > a.x ? vec2(0, 1) : vec2(1, 0);\n    vec2 b = a - tb + k2;\n    vec2 c = a - 1.f + k2 * 2.f;\n    \n    vec3 kernel = max(0.5f - vec3(dot(a, a), dot(b, b), dot(c, c)), 0.f);\n    vec3 noise = (kernel * kernel) * (kernel * kernel)\n    * vec3(dot(a, hash22(idx) * 2.f - 1.f), dot(b, hash22(idx + tb) * 2.f - 1.f), dot(c, hash22(idx + 1.) * 2.f - 1.f));\n    \n    return dot(vec3(70.f), noise);\n}\n\n\nfloat smoothMin(float a, float b, float k, float n)\n{\n    return min(a, b) - pow(max(k - abs(a - b), 0.f) / k, n) * k / (2.f * n);\n}\n\nfloat sdf3dInfCylinder(vec3 p, vec4 cylinder, vec3 cylinderDirection)\n{\n    p -= cylinder.xyz;\n    return length(p - dot(p, cylinderDirection) * cylinderDirection) - cylinder.w;\n}\n\nfloat woodDist(vec3 p, vec2 idx)\n{\n    p.xz -= idx;\n    p.xz -= 0.5;\n    p.xz -= simplexNoise(p.xz + idx + p.y*0.4)*0.1;\n\n    vec2 off = hash22(idx)*2.0-1.0;\n    off *= 0.4;\n    float dist = sdf3dInfCylinder(p, vec4(off.x,0.,off.y,1.0),vec3(0.,1.,0.));\n    \n    return dist;\n}\n\nfloat sawtooth(float t)\n{\n    const float PI = 3.141593;\n    t += 0.5;\n    float w = 0.;\n    float s = 1.;\n    for(int i = 1; i < 10; ++i)\n    {\n        w += (s/float(i)) * sin(2.*PI*t*float(i));\n        s = -s;\n    }\n    \n    return w/PI + 0.5;\n}\n\nvec3 lerpColor(vec3 colorA, vec3 colorB, vec3 colorC, vec3 colorD, float t) {\n\n    float a = 0.3333;\n    float b = 0.6666;\n    float c = 1.;\n    \n    if (t < a) \n        return mix(colorA, colorB, t / a);    \n    else if (t < b) \n        return mix(colorB, colorC, (t - a) / (b-a));\n    else\n        return mix(colorC, colorD, (t - b) / (c-b));\n}\n\nvec3 woodTex(vec3 p)\n{   \n    vec2 idx = floor(p.xz);\n    float t = 1000.;\n    \n    for(int z = -1; z<= 1; z++)\n    {\n        for(int x = -1; x<= 1; x++)\n            t = smoothMin(t, woodDist(p ,idx + vec2(x,z)),0.05,2.);\n    }    \n\n    t = t*18.+ simplexNoise(p.xz*25. + p.y)*0.1;\n    \n    \n    float s = 1.- sawtooth(t);\n    s += sin(t/3.14)*0.15;\n    \n    float nos = simplexNoise(p.xz*50. + p.y*10.);\n    vec3 col = lerpColor(\n    vec3(0.392+nos*0.1,0.110,0.047),\n    vec3(0.773,0.459+nos*0.1,0.169),\n    vec3(0.875,0.701,0.376)+nos*0.1,\n    vec3(0.988,0.859,0.682)+nos*0.1,\n    s);  \n\n    return pow(col*0.9,vec3(0.7)) + simplexNoise(p.xz*5. + p.y*0.2)*0.08;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float s = 1.8;\n    vec2 uv = (2.0*(fragCoord)-iResolution.xy)/iResolution.y*s;\n    \n    float t = iTime * 0.1;\n    if(uv.x < 0.)\n        fragColor = vec4(woodTex(vec3(uv.x, uv.y, t)),1.0);\n    else\n        fragColor = vec4(woodTex(vec3(uv.x-s, sin(t)*s, uv.y + t)),1.0);   \n}","name":"Image","description":"","type":"image"}]}