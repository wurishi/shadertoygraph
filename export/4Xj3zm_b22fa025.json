{"ver":"0.1","info":{"id":"4Xj3zm","date":"1708330558","viewed":132,"name":"fluffy fur","username":"MonterMan","description":"playing with fur tech\n\ninspired & based on this furball shader: https://www.shadertoy.com/view/XsfGWN","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fur"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\nTODO:\n\n. improve fur geom model\n.   twist clumping [x]\n.   proper fractal clumping [ ]\n.   wavy hair [ ]\n. try a few scattering models\n. adapt to general SDF shapes?\n\n*/\n\nconst int sampleN = 16;\nconst vec2 kStrandGap = vec2(0.02);\nconst float kStrandWidth = 0.006;\nconst float kStrandBlur = 0.0005;\nconst float kStrandDampen = 0.15;\n\n#define T_MAX 20.0\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 toSpherical(vec3 p)\n{\n    float r = length(p);\n    vec3 q = p / r;\n    \n    float phi = asin(q.y);\n    float theta = atan(q.z, q.x);\n    \n    return vec3(phi, theta, r);\n}\n\nvec2 opMod(vec2 p, vec2 period, out vec2 outId)\n{\n    outId = floor((p+0.5*period)/period);\n    return mod(p+0.5*period, period)-0.5*period;\n}\n\nfloat map(vec3 p)\n{\n    return length(p) - 1.0;\n}\n\nfloat furDensity(vec2 uv, float h)\n{\n    float hc = clamp(h, 0.0, 1.0);\n    uv.x += kStrandDampen*hc*hc;\n    uv.x += cos(30.0*uv.y); // this \"twist\" accidentally give hair clumping\n    vec2 strandId;\n    uv = opMod(uv, kStrandGap, strandId);\n    uv += (hash22(strandId) - 0.5) * kStrandGap;\n    float strandDist = length(uv);\n    \n    float strandW = kStrandWidth*(1.0-hc*hc);\n    return smoothstep(strandW+kStrandBlur, strandW, strandDist) *\n           smoothstep(1.0+kStrandBlur, 1.0, h);\n}\n\nvec3 render(vec2 uv, float uvHash)\n{\n    float animT = 9.4;\n    //animT = 0.1*iTime;\n    vec3 ro = 1.7*vec3(cos(animT), 0.5, -sin(animT));\n    vec3 at = vec3(0);\n    \n    vec3 cam_z = normalize(at - ro);\n    vec3 cam_x = normalize(cross(vec3(0, 1, 0), cam_z));\n    vec3 cam_y = cross(cam_z, cam_x);\n    vec3 rd = normalize(uv.x * cam_x + uv.y * cam_y + 1.3 * cam_z);\n    \n    bool hit = false;\n    float t = 0.0;\n    for (int i = 0; i < 256 && t < T_MAX; ++i)\n    {\n        vec3 p = ro + t * rd;\n        float dist = map(p);\n        if (abs(dist) < 0.001)\n        {\n            hit = true;\n            break;\n        }\n        t += dist;\n    }\n\n    vec3 col = vec3(0);\n    if (hit)\n    {\n        vec3 p = ro + t*rd;\n        vec3 smoothN = normalize(p);\n        vec3 l = normalize(vec3(1, 1, -1));\n        \n        float vis = 1.0;\n        const float furDepth = 0.2;\n        const float shellDepth = furDepth + 0.03; // make shell bigger than fur, so we can trace through silhouette\n        const int sampleCount = 128;\n        const float furStep = shellDepth / float(sampleCount);\n        float sampleJitter = 0.5*(2.0*uvHash-1.0);\n        for (int i = 0; i < sampleCount; ++i)\n        {\n            vec3 sampleP = p + rd * furStep * (float(i)+sampleJitter);\n            vec3 sampleSC = toSpherical(sampleP);\n            float ballCoreR = (1.0 - shellDepth); // radius of sphere core\n            float shellT = (sampleSC.z - ballCoreR) / furDepth;\n            float alpha = furDensity(sampleSC.xy, shellT);\n            col += vis * alpha * mix(0.1, 1.0, pow(shellT, 4.0));\n            vis *= 1.0 - alpha;\n            if (vis < 0.01) break;\n        }\n        \n        col *= 0.5 * dot(smoothN, l) + 0.5;\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = 2.0 * uv - 1.0;\n    float ar = iResolution.x/iResolution.y;\n    uv.x *= ar;\n    float uvHash = hash12(fragCoord);\n    \n    vec3 col = vec3(0);\n    vec2 pixelDim = vec2(2.0*ar, 2.0) / iResolution.xy;\n    for (int sampleI = 0; sampleI < sampleN; ++sampleI)\n    {\n        float sampleHash = hash13(vec3(fragCoord, float(sampleI)));\n        vec2 jitter = pixelDim * (hammersley(sampleI, sampleN) - 0.5);\n        col += render(uv + jitter, sampleHash);\n    }\n    col /= float(sampleN);\n    \n    // Output to screen\n    col = sqrt(col);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float radicalInverse(int x, float base)\n{\n    int baseI = int(base);\n    float result = 0.0;\n    float b = 1.0 / base;\n    while (x > 0)\n    {\n        result += float(x % baseI) * b;\n        x /= baseI;\n        b /= base;\n    }\n    return result;\n}\n\nvec2 halton23(int index)\n{\n    return vec2(radicalInverse(index, 2.0), radicalInverse(index, 3.0));\n}\n\nvec2 hammersley(int index, int N)\n{\n    return vec2(float(index)/float(N), radicalInverse(index, 2.0));\n}","name":"Common","description":"","type":"common"}]}