{"ver":"0.1","info":{"id":"ctffDS","date":"1693383393","viewed":40,"name":"Tri- NOISE - test","username":"willis","description":"test","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(vec2 p){\n    return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat n2rand(vec2 n)\n{\n\tfloat t = fract(iTime);\n\tfloat nrnd0 = rand( n + 0.07*t );\n\n    // Convert uniform distribution into triangle-shaped distribution.\n    float orig = nrnd0*2.0-1.0;\n    //nrnd0 = orig*inversesqrt(abs(orig));\n    nrnd0 = sign(orig) * sqrt(abs(orig));  //  @FabriceNeyret2\n    nrnd0 = max(-1.0,nrnd0); // Nerf the NaN generated by 0*rsqrt(0). Thanks @FioraAeterna!\n    nrnd0 = nrnd0-sign(orig)+0.5;\n    return nrnd0;\n    \n    // Result is range [-0.5,1.5] which is\n    // useful for actual dithering.\n    // convert to [0,1] for histogram.\n    //return (nrnd0+0.5) * 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float basic = floor(uv.x * 8.) / 8. ;\n    \n    vec2 uv2 = uv + n2rand(uv) / 8.;\n    float dithered = floor(uv2.x * 8.) / 8.;\n\n    vec3 col = vec3(0.);\n    \n    if(uv.y < 0.33) col = vec3(basic);\n    else if(uv.y < 0.66) col = vec3(dithered);\n         else col = vec3(uv.x);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}