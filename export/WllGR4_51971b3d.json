{"ver":"0.1","info":{"id":"WllGR4","date":"1555756016","viewed":103,"name":"Julia Sets for increasing powers","username":"Tezza48","description":"Having a little fun with complex numbers :D","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","julia","mandelbrot","power"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ITERATIONS 20.0\n#define POWER 3\n\n#define JULIA\n\n#define SMOOTHFRACT\n\nvec2 cSquare(vec2 c)\n{\n    return vec2(c.x * c.x - c.y * c.y, 2.0 * c.x * c.y);\n}\n\nvec2 cMul(vec2 a, vec2 b)\n{\n \treturn vec2(a.x * b.x - a.y * b.y, a.y * b.x + a.x * b.y);   \n}\n\nvec2 cPow(vec2 c, int p)\n{\n\tvec2 res = c;\n \tfor (int i = 1; i < p; i++)\n    {\n    \tres = cMul(res, c);\n    }\n    return res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord/iResolution.xy * 2.0) - 1.0;\n    uv.y /= iResolution.x / iResolution.y;\n\n    #ifdef JULIA\n    vec2 z = uv * 2.0;\n    vec2 c = vec2(sin(iTime * 0.5) * 0.8, cos((iTime * 0.1 + sin(iTime * 0.21)) * 0.5));\n    #else\n    vec2 z = vec2(0.0);\n    vec2 c = (uv * 2.5);\n    #endif\n    \n    float i;\n    for (i = 0.0; i < ITERATIONS; i++)\n    {\n        z = cPow(z, POWER) + c;\n        if(dot(z, z) > 4.0)\n            break;\n    }\n    \n    #ifdef SMOOTHFRACT\n    float log2=0.69314718056;\n    float L = log(dot(z, z))/2.0;\n    float nu = log(L/log2)/log2;\n    i+=1.0-nu;\n    #endif\n    \n    float dist = float(i) / 10.0;\n    \n    fragColor = vec4(sin(dist * 2.0));\n}","name":"Image","description":"","type":"image"}]}