{"ver":"0.1","info":{"id":"ddcyRl","date":"1695339191","viewed":112,"name":"textured terrain by triangle DDA","username":"jt","description":"Proof-of-concept: implementation of a triangular heightmap by stepping through a 2d triangle grid using a VOXEL DDA along the plane orthogonal to the main diagonal (1,1,1).\nIn addition this version is also textured.\nTo enable shadows: #define USE_SHADOWS","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["3d","raytracing","grid","terrain","raycasting","triangle","triangles","voxel","heightmap","slice","dda","step","textured","polygonal"],"hasliked":0,"parentid":"DtfXzS","parentname":"Triangle Terrain (via Voxel DDA)"},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/ddcyRl textured terrain by triangle DDA, 2023 by jt\n// based on https://www.shadertoy.com/view/DtfXzS Triangle Terrain (via Voxel DDA)\n// based on https://www.shadertoy.com/view/mlfXD7 Triangle DDA via Voxel DDA Slice\n// based on https://www.shadertoy.com/view/mtfXDM Branchless Voxel Raycasting Tex2\n// clean-up of https://www.shadertoy.com/view/7dK3D3 Branchless Voxel Raycasting Tex\n// building on voxel DDA of https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4\n// (with loop optimization by kzy), DDA based on http://lodev.org/cgtutor/raycasting.html\n\n// Proof-of-concept: implementation of a triangular heightmap\n// by stepping through a 2d triangle grid using a VOXEL DDA\n// along the plane orthogonal to the main diagonal (1,1,1).\n// In addition this version is also textured.\n\n// tags: 3d, raytracing, grid, terrain, raycasting, triangle, triangles, voxel, heightmap, slice, dda, step, textured, polygonal\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nuint uhash(ivec3 i)\n{\n    return uint(i & 1);\n}\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\n#define DIST_MAX 1000.0\n\n#define MAX_RAY_STEPS 64\n\n#define USE_SHADOWS\n\nvec3 triangle_center(vec3 a, vec3 b, vec3 c)\n{\n    return (a+b+c)/3.0;\n}\n\nvec3 triangle_normal(vec3 a, vec3 b, vec3 c)\n{\n    return normalize(cross(a - b, c - b));\n}\n\nfloat plane_intersection(vec3 pp, vec3 pn, vec3 ro, vec3 rd)\n{\n    return dot(pp - ro,pn)/dot(rd,pn);\n}\n\nfloat height(ivec3 i)\n{\n    vec3 p = vec3(i);\n    float s = 10.0;\n    return 4.0*mix(cos(iTime/10.0)*sin(2.0*pi*(p.x+iTime)/s) * sin(2.0*pi*(p.y+iTime)/s) * sin(2.0*pi*(p.z+iTime)/s), cos(2.0*pi*(length(p)-iTime)/s) * exp(-dot(p/s,p/s)), 0.5+0.5*cos(2.0*pi*iTime/23.0));\n}\n\nstruct result\n{\n    vec3 normal;\n    float dist;\n    vec3 color;\n};\n\nresult combine(result a, result b)\n{\n    //return a.dist < b.dist ? a : b; // ??? why doesn't this compile ???\n    if(a.dist < b.dist)\n        return a;\n    return b;\n}\n\n#define ESSENTIAL_MATRIX\n\nvec3 improved_texture_lookup(vec3 ray_pos_orig, vec3 ray_dir_orig, mat2x3 transform, vec3 center, vec3 normal, vec2 coords) // thanks to pyblob, joins triangles more smoothly\n{\n    // bypass fract, still has problems at occlusions\n    vec3 color = textureGrad(iChannel0, fract(coords/5.0), dFdx(coords/5.0), dFdy(coords/5.0)).xyz;\n/*\n    // analytic gradients (assuming camera is not at infinity) ... let's hope, I got the derivatives correct. Though, I think you can still simplify a bit.\n    // mat3x2(-1,0, 1,0, 0,1) * flip * flip * T * (rd.xy * dot(pp - ro, pn) / dot(rd, pn));\n    vec3 rd = ray_dir_orig, ro = ray_pos_orig;//, pp = m, pn = normal;\n    vec2 px = (dFdx(rd.xy) - dot(dFdx(rd), normal) / dot(rd, normal) / 2. * rd.xy) * dot(center - ro, normal) / dot(rd, normal);\n    vec2 py = (dFdy(rd.xy) - dot(dFdy(rd), normal) / dot(rd, normal) / 2. * rd.xy) * dot(center - ro, normal) / dot(rd, normal);\n    mat2 Q = mat3x2(-1,0, 1,0, 0,1) * transform;\n    vec3 color = textureGrad(iChannel0, fract(coords/5.0), Q*px/5.0, Q*py/5.0).xyz;\n*/\n    return color;\n}\n\n// given a symmetric matrix\n//     / a b c \\\n// M = | b d e |\n//     \\ c e f /\n// this function returns a (non-unique) factorization T of M so that T*transpose(T) = M\n// https://math.stackexchange.com/questions/246065/factorization-of-an-invertible-symmetric-matrix\n// (reordered the matrix to fit this example, apparently there are many possible factorizations)\n// Unfortunately this function is not numerically stable:\n// due to low accuracy a \"negative zero\" in a square-root results in NaN instead of zero here\n// (correct result using double when checked in C).\nmat3 factor_symmetric_matrix(float a, float b, float c, float d, float e, float f)\n{\n    mat3 T;\n    T[0][0] = -(b*f-c*e)/sqrt(f*(d*f-e*e));\n    T[0][1] = c/sqrt(f);\n    T[0][2] = sqrt((a - c*c/f) + pow(c*e-b*f, 2.0)/(f*(e*e-d*f)));\n    T[1][0] = -sqrt(d*f-e*e)/sqrt(f);\n    T[1][1] = e/sqrt(f);\n    T[1][2] = 0.0;\n    T[2][0] = 0.0;\n    T[2][1] = sqrt(f);\n    T[2][2] = 0.0;\n    \n    return T;\n}\n\nmat3 triangle_matrix() // easier to remember than all the square-roots\n{\n    vec3 a = vec3(+1,-1,0);\n    vec3 c = vec3(-1,-1,-1);\n    vec3 b = cross(c, a);\n    return mat3(normalize(a),normalize(b), normalize(c));\n}\n\nresult triangle_trace(vec3 ray_pos_orig, vec3 ray_dir_orig) // step triangles by stepping through voxels along plane orthogonal to main diagonal (jt)\n{\n    result content = result(-ray_dir_orig, DIST_MAX, mix(vec3(0,0.5,0.5),vec3(0,0,1),abs(ray_dir_orig.z))); // sky sphere\n#ifdef ESSENTIAL_MATRIX\n    // coordinate-system along plane orthogonal to diagonal (1,1,1)\n    /*\n    mat2x3 T =\n        mat2x3\n        (\n            vec3(+1.0/sqrt(2.0),-1.0/sqrt(2.0), 0.0),\n            vec3(-1.0/sqrt(6.0),-1.0/sqrt(6.0), 2.0/sqrt(6.0))\n        );\n    */\n    mat2x3 T =\n        mat2x3 // using normalize is way easier to remember than all the square-roots\n        (\n            normalize(vec3(+1,-1, 0)), // NOTE: sum of components is zero\n            normalize(vec3(-1,-1, 2))  // NOTE: sum of components is zero\n        );\n    // step through voxels along plane orthogonal to main diagonal (1,1,1)\n    vec3 ray_pos = T * ray_pos_orig.xy;\n    vec3 ray_dir = T * ray_dir_orig.xy;\n#else\n    // coordinate-system along plane orthogonal to diagonal (1,1,1)\n    /*\n    mat3 T =\n        mat3\n        (\n            vec3(+1.0/sqrt(2.0),-1.0/sqrt(2.0), 0.0),\n            vec3(-1.0/sqrt(6.0),-1.0/sqrt(6.0), 2.0/sqrt(6.0)),\n            vec3(-1.0/sqrt(3.0),-1.0/sqrt(3.0),-1.0/sqrt(3.0))\n        );\n    */\n    mat3 T = triangle_matrix();\n    //mat3 T = factor_symmetric_matrix(+2.0/3.0,-1.0/3.0,-1.0/3.0,+2.0/3.0,-1.0/3.0,+2.0/3.0); // XXX unfortunately due to low accuracy a \"negative zero\" in a square-root results in NaN instead of zero here (correct result using double when checked in C) XXX\n    // step through voxels along plane orthogonal to main diagonal (1,1,1)\n    vec3 ray_pos = T * vec3(ray_pos_orig.xy, 0);\n    vec3 ray_dir = T * vec3(ray_dir_orig.xy, 0);\n#endif\n    // initialization from https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4 implementing https://lodev.org/cgtutor/raycasting.html\n    ivec3 tile = ivec3(floor(ray_pos));\n    // decompose ray direction into reciprocal absolute ray direction and sign (-1,+1)\n    vec3 delta_dist = 1.0 / abs(ray_dir); // reciprocal absolute ray direction\n    ivec3 ray_step = ivec3(sign(ray_dir)); // sign of ray direction\n    // initial distances to nearest walls by dimension:\n    //     calculate ray position in relation to tile origin\n    //     (requires adding one half because tile origin is floor of ray position)\n    //     adjust sign according to ray direction\n    //     because tile has size 1 and we start in the middle wall is located at 0.5 (sign depends on ray direction)\n    //     divide by ray direction (to get distance with respect to ray)\n    vec3 side_dist = (sign(ray_dir) * (vec3(tile) - ray_pos) + (sign(ray_dir) * 0.5) + 0.5) * delta_dist; // initial distances to nearest walls by dimension\n    bvec3 nearest = bvec3(0); // component is true if nearest wall in that dimension\n    for (int i = 0; i < MAX_RAY_STEPS; i++)\n    {\n        uint direction = uhash(tile);\n\n        float h = 3.0 + 10.0 * height(tile);\n\n        //bool even = abs(tile.x + tile.y + tile.z) == 2;\n        bool even = ((tile.x ^ tile.y ^ tile.z) & 1) == 0;\n        float flip = even?-1.0:+1.0;\n\n        float tmin = length(vec3(nearest) * (side_dist - delta_dist)); // calculate distance to intersection point assuming ray_dir normalized\n\n        // core from https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4 implementing https://lodev.org/cgtutor/raycasting.html\n        bvec3 nearest_next = lessThanEqual(side_dist.xyz, min(side_dist.yzx, side_dist.zxy)); // component is true if nearest wall in that dimension\n        vec3 side_dist_next = side_dist + vec3(nearest_next) * delta_dist; // update distances to nearest walls by dimension\n        ivec3 tile_next = tile + ivec3(vec3(nearest_next)) * ray_step; // step to next tile in direction of nearest wall\n        float tmax = length(vec3(nearest_next) * (side_dist_next - delta_dist)); // calculate distance to intersection point assuming ray_dir normalized\n\n        {\n            ivec3 tile_x = tile - (even ? ivec3(1,0,0) : ivec3(0,1,1));\n            ivec3 tile_y = tile - (even ? ivec3(0,1,0) : ivec3(1,0,1));\n            ivec3 tile_z = tile - (even ? ivec3(0,0,1) : ivec3(1,1,0));\n#ifdef ESSENTIAL_MATRIX\n            vec3 a = vec3(vec3(tile_x)*T,height(tile_x));\n            vec3 b = vec3(vec3(tile_y)*T,height(tile_y));\n            vec3 c = vec3(vec3(tile_z)*T,height(tile_z));\n#else\n            vec3 a = vec3(tile_x)*T + vec3(0,0,height(tile_x)-sqrt(3.0));\n            vec3 b = vec3(tile_y)*T + vec3(0,0,height(tile_y)-sqrt(3.0));\n            vec3 c = vec3(tile_z)*T + vec3(0,0,height(tile_z)-sqrt(3.0));\n#endif\n            vec3 n = triangle_normal(a,b,c);\n            vec3 m = triangle_center(a,b,c);\n\n            float ground_dist = plane_intersection(m, n, ray_pos_orig, ray_dir_orig);\n#ifdef ESSENTIAL_MATRIX\n            vec3 local =\n                (\n                    flip\n                    *\n                    T\n                    *\n                    (\n                        ray_pos_orig.xy\n                        +\n                        ray_dir_orig.xy * ground_dist\n                        -\n                        vec3(tile)*T\n                    )\n                    +\n                    1.0/3.0\n                );\n#else\n            mat3 Z = mat3(1,0,0,0,1,0,0,0,0);\n/*\n            vec3 local =\n                (\n                    T*Z*(flip*(ray_pos_orig + ray_dir_orig * ground_dist - vec3(tile)*T))\n                    +\n                    1.0/3.0\n                );\n*/\n            mat3 M = mat3(+2,-1,-1,-1,+2,-1,-1,-1,+2)/3.0; // M=T*transpose(T) where last vector of T zeroed out - could T be calculated by factoring M?\n            vec3 local = // NOTE: if last column of T zeroed then Z can be omitted here\n                (\n                    flip\n                    *\n                    (\n                        T*Z*ray_pos_orig\n                        +\n                        T*Z*ray_dir_orig * ground_dist\n                        -\n                        M*(vec3(tile))\n                    )\n                    +\n                    1.0/3.0\n                );\n#endif\n            //vec3 color = local; // debug barycentric coordinates\n            if(even) local = 1.0 - local;\n            vec2 coords = vec2(local.y-local.x, local.z) + vec2(tile.y-tile.x, tile.z); // Calculate texture-coordinates from tile and local coordinates (trivial alternative below)\n            //vec2 coords = sqrt(2.0)*vec2(-1.0,1.0/sqrt(3.0))*(ray_pos_orig + ray_dir_orig * ground_dist).xy; // D'oh - complicated texture coordinate computation above can be replaced by this simple line!\n            //vec3 color = texture(iChannel0, fract(coords/5.0)).xyz; // simple lookup has artifacts at triangle boundaries\n            vec3 color = improved_texture_lookup(ray_pos_orig, ray_dir_orig, mat2x3(T[0], T[1]), m, n, coords); // thanks to pyblob, joins triangles more smoothly\n            //vec3 color = fract(vec3(coords/10.0, 0.0)); // debug texture coordinates\n            if(ground_dist >= max(0.0, tmin) && ground_dist <= tmax)\n            {\n                content = combine(content, result(n, ground_dist, color)); // hit plane\n            }\n        }\n\n        if(content.dist < tmax)\n            return content;\n\n        // update state\n        nearest = nearest_next;\n        tile = tile_next;\n        side_dist = side_dist_next;\n    }\n\n    return content;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 I )\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    //I = 2.0 * I.xy / R - 1.0;\n    //I.x *= R.x / R.y;\n    I = (2.0 * I - R) / R.y; // concise pixel-position mapping thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : 1.25 * pi/2.0;\n\n    vec3 ray_pos = vec3(0.0, 0.0, -10.0);\n    vec3 ray_dir = vec3(I.x, I.y, 2.0);\n    ray_dir = normalize(ray_dir);\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ray_pos = M * ray_pos;\n    ray_dir = M * ray_dir;\n    //ray_pos.z += 0.;\n\n    result res = triangle_trace(ray_pos, ray_dir);\n    vec3 color = res.color;\n    vec3 skycolor = mix(vec3(0,0.5,0.5),vec3(0,0,1),abs(ray_dir.z));\n    if(res.dist < DIST_MAX)\n    {\n        res.normal *= dot(res.normal, ray_dir) < 0.0 ? +1.0 : -1.0; // repair front-back\n\n        if(false)\n        {\n            vec3 light_dir = normalize(vec3(1,2,3));\n            //vec3 light_dir = normalize(vec3(cos(iTime),sin(iTime),1));\n            float diffuse = max(0.0, dot(res.normal, light_dir));\n            color *= diffuse;\n        }\n        else\n        {\n            vec3 dst = ray_pos + ray_dir * res.dist;\n            //vec3 light_pos = vec3(0,0,5);\n            vec3 light_pos = vec3(10.0*vec2(cos(iTime/5.0),sin(iTime/5.0)),5);\n            vec3 light_diff = light_pos - dst;\n            float light_dist = length(light_diff);\n            vec3 light_dir = light_diff / light_dist;\n#ifdef USE_SHADOWS\n            //bool shadow = triangle_trace(dst+res.normal*0.001, light_dir).dist < DIST_MAX;\n            bool shadow = triangle_trace(dst+light_dir*light_dist, -light_dir).dist < light_dist - .001; // suggested by pyblob to avoid artifacts (missing shadows)\n#else\n            bool shadow = false;\n#endif\n            vec3 light_color = vec3(1) * 100.0;\n            //vec3 diffuse = shadow ? vec3(0) : light_color * max(0.0, dot(res.normal, light_dir)) / (light_dist * light_dist);\n            vec3 diffuse = shadow ? vec3(0) : light_color * abs(dot(res.normal, light_dir)) / (light_dist * light_dist);\n            float ambient = 0.01;\n\n            //color *= (0.5 + 0.5 * result.xyz); // visualize normals\n            color *= (diffuse + ambient); // apply light\n            //color = vec3(fract(result.w));\n\n            color = mix(skycolor, color, exp(-pow(res.dist/25.0, 2.0))); // distance fog\n        }\n    }\n    else // sky\n    {\n        color = skycolor;\n    }\n    color = tanh(color); // roll-off / soft-clamp overly bright colors\n    fragColor = vec4(sqrt(color), 1.0); // gamma\n}\n","name":"Image","description":"","type":"image"}]}