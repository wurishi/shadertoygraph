{"ver":"0.1","info":{"id":"lXyGWV","date":"1718224476","viewed":70,"name":"Fork Magma city honestcactus","username":"honestcactus","description":"just some personal tweaks and learning notes.\n\nCurrently trying to remove balcony pillars from foreground and reduce light beams in the city","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["test","city","neon"],"hasliked":0,"parentid":"wlKBDV","parentname":"Magma city"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n===========================================================\nOriginal by Daizuukee https://www.shadertoy.com/view/wlKBDV\nHelp from the wonderful Berelium\n===========================================================\n*/\n\n#define CityDepth 8\n#define Paralax .03\n#define CityWidth 1\n#define BuildingWidth 10.0\n    //BackCol defines the color values of background buildings, NOT sky\n#define BackCol vec4(0.161,0.184,0.839,1)\n    //This second BackCol changes between the two colors -->\n//#define BackCol lerp(vec4(0.525,0.035,0.231,1),vec4(0.553,0.341,0.165,1),.1+.1*sin(iTime))\n#define FrontCol vec4(0.396,0.122,0.396,1)\n#define BalcCol vec4(0.129,0.063,0.196,1)\n\n/*Remove for Low Quality -> */\n#define HighQ\n/**/\n\nvec4 lerp(vec4 v1,vec4 v2,float t){\n    return(v2-v1)*t+v1;\n}\n\nfloat random(vec2 st){\n    return fract(sin(dot(st,\n                vec2(12.9898,78.233)))*\n            40000.5453123);\n        }\n        //Stars\n        float noise(vec2 st){\n            vec2 st0=floor(st);\n            vec2 st1=0.5-cos((st-st0)*3.14)*0.5;\n            float a0=random(vec2(int(st0.x),int(st0.y)));\n            float a1=random(vec2(int(st0.x)+1,int(st0.y)));\n            \n            float a2=random(vec2(int(st0.x),int(st0.y)+1));\n            float a3=random(vec2(int(st0.x)+1,int(st0.y)+1));\n            \n            float b0=(a1-a0)*st1.x+a0;\n            \n            float b1=(a3-a2)*st1.x+a2;\n            return(b1-b0)*st1.y+b0;\n            \n        }\n        \n        bool isBuilding(vec2 uv){\n            for(int j=-CityWidth;j<=CityWidth;j++){\n                for(int n=0;n<5;n++){\n                    float h=float(n)*.01+(random(vec2(floor(uv.x*BuildingWidth+float(j)),n))-.5)/2.+.25;\n                    if(h>=uv.y&&\n                        fract(uv.x*BuildingWidth)-.5-float(j)*1.5<float(CityWidth+1)*1.-float(n)/7.+fract(floor((h-uv.y)*100.*random(vec2(floor(uv.x*BuildingWidth))))/2.)*.1&&\n                        fract(uv.x*BuildingWidth)-.5-float(j)*1.5>-float(CityWidth-2)*float(n)/7.-fract(floor((h-uv.y)*100.*random(vec2(floor(uv.x*BuildingWidth))))/2.)*.1){\n                            return true;\n                        }\n                    }\n                }\n                return false;\n            }\n            \n            bool isBalc(vec2 uv){\n                return uv.y<.3||\n                (uv.y<.4&&uv.y>.37)||\n                (uv.y<.4&&fract((uv.x+iTime*.35)*10.)<.2);\n            }\n\n            \n            //Calculates Balc colors\n            void mainImage(out vec4 fragColor,in vec2 fragCoord)\n            {\n                fragColor = vec4(0);\n                vec2 uv=fragCoord/iResolution.xy;\n                vec2 sv=uv;\n                uv+=noise(uv*1.+iTime)*.002;\n                uv.x+=iTime/50.-947.2984;\n                if(isBalc(uv)){\n                    if(isBalc(uv+vec2(.005,0))){\n                        if(isBalc(vec2(uv.x+(sv.x-.5)*(sv.y-.3),.5-uv.y))||uv.y>.2)\n                        fragColor=BalcCol;\n                        else\n                        fragColor=lerp(BackCol,BalcCol,.5-uv.y/.5);\n                    }\n                    else\n                    fragColor=BackCol;\n                }\n                else{\n                    bool broke=false;\n                    for(int i=0;i<CityDepth;i++){\n                        float mult=iTime*Paralax*float(CityDepth-i);\n                        if(isBuilding(uv+vec2(mult,0))){\n                            fragColor+=lerp(BackCol,FrontCol,1./float(i+1));\n                            broke=true;\n                            break;\n                        }\n                        if(broke){\n                            break;\n                        }\n                        else{\n                            #ifdef HighQ\n                            vec4 c=lerp(BackCol,FrontCol,1./float(i+1));\n                            fragColor+=c*2.*max(0.,.7+.3*noise(vec2(uv.x+mult,float(i)*292.293))-sv.y);\n                            if(fract(uv.x+mult+.2723)<.1){\n                                fragColor+=vec4(0,0,.1,0)*max(0.,(8.-uv.y*10.));\n                            }\n                            #endif\n                        }\n                        uv.x*=1.1;\n                        uv.y-=1./float(CityDepth)/3.5;\n                    }\n                    //Sky\n                    if(!broke){\n                        fragColor+=lerp(vec4(0.929,0.275,0.114,1),vec4(0.161,0.000,0.800,1.0),uv.y);\n                        float f=noise(vec2(iTime*10.,0)+sv*iResolution.xy*0.5);\n                        if(f>0.95&&noise(vec2(iTime*10.,0)+sv*50.0)>0.5)\n                        fragColor+=(f-0.9)/0.1;\n                    }\n                }\n            }\n            ","name":"Image","description":"","type":"image"}]}