{"ver":"0.1","info":{"id":"WslfRl","date":"1588872141","viewed":142,"name":"monoflame","username":"ukeyshima","description":"monoflame","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["mono"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592\n\nfloat random(float p) { return fract(sin(p * 452.21) * 223.32); }\n\nvec2 random2(vec2 p) {\n  return vec2(fract(sin(dot(p, vec2(12.43, 24.12) * 452.21)) * 223.32),\n              fract(sin(dot(p, vec2(46.26, 57.84) * 681.37)) * 412.49));\n}\n\nfloat perlinNoise1d(float p) {\n  float i1 = floor(p), i2 = i1 + 1.;\n  float p1 = p - i1, p2 = p - i2;\n  float r1 = random(i1), r2 = random(i2);\n  float d1 = dot(r1, p1), d2 = dot(r2, p2);\n  float j = fract(p);\n  j = j * j * (3. - 2. * j);\n  return mix(d1, d2, j) * .5 + .5;\n}\n\nfloat perlinNoise2d(vec2 p) {\n  vec2 i1 = floor(p), i2 = i1 + vec2(1., 0.), i3 = i1 + vec2(1., 1.),\n       i4 = i1 + vec2(0., 1.);\n  vec2 p1 = p - i1, p2 = p - i2, p3 = p - i3, p4 = p - i4;\n  vec2 r1 = random2(i1), r2 = random2(i2), r3 = random2(i3), r4 = random2(i4);\n  float d1 = dot(r1, p1), d2 = dot(r2, p2), d3 = dot(r3, p3), d4 = dot(r4, p4);\n  vec2 j = fract(p);\n  j = j * j * (3. - 2. * j);\n  return mix(mix(d1, d2, j.x), mix(d4, d3, j.x), j.y);\n}\n\nfloat cellularNoise(vec2 p) {\n  vec2 ci = floor(p);\n  vec2 cf = fract(p);\n  float minDist = 1000.0;\n\n  for (int y = -1; y <= 1; y++) {\n    for (int x = -1; x <= 1; x++) {\n      vec2 neighbor = vec2(float(x), float(y));\n      vec2 neighborPoint = random2(ci + neighbor);\n      neighborPoint = 0.5 + 0.5 * sin(iTime * 3.5 + PI * 2.0 * neighborPoint);\n      vec2 diff = neighborPoint + neighbor - cf;\n      float dist = length(diff);\n      minDist = min(minDist, dist);\n    }\n  }\n  return minDist;\n}\n\nfloat moreNoise(vec2 p) { return 1.0 - 1.0 * cellularNoise(p); }\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 p = fragCoord.xy / iResolution.xy;\n\n  p.x +=iTime/90.;\n\n  p.x += perlinNoise2d(p * vec2(12.2, 8.9) + vec2(iTime*0.8, 0.)) / 9.;\n  p.y += perlinNoise2d(p * vec2(9.2, 6.9) + vec2(iTime*1.1, 0.)) / 9.;\n\n  float color = smoothstep(1., 0., p.y) * 2. - 1.;\n  color += cellularNoise(p * vec2(22.,7.) - vec2(0., iTime * 2.)); \n\n  float hei = perlinNoise1d(p.x * 12.) * 4. - 1.9;\n  float color2 = smoothstep(hei, hei + 0.8, p.y) * 2. - 1.;\n  color2 += moreNoise(p * vec2(25.,16.) - vec2(0., iTime * 2.));\n\n  color = color - color2;\n  color = step(0.5, color);\n  color = 1. - color;\n\n  fragColor = vec4(vec3(color), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}