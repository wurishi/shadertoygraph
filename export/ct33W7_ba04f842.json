{"ver":"0.1","info":{"id":"ct33W7","date":"1689486120","viewed":108,"name":"Crystal Clockwork Fractal","username":"Crystalize","description":"I made a fractal and had some of the usual complex fun with it. :)","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["crystalclockworkfractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592\n#define TWOPI 6.283185\n#define S2inv 0.707106\n#define R vec2(1.,0.)\n#define I vec2(0.,1.)\n#define iters 6\n\nvec2 cmul(vec2 z, vec2 c) {\n    return vec2(z.x * c.x - z.y * c.y, z.x * c.y + z.y * c.x);\n}\n\nvec2 cdiv(vec2 z, vec2 c) {\n    float r = dot(c, c);\n    return vec2(z.x * c.x + z.y * c.y, z.y * c.x - z.x * c.y) / r;\n}\n\n\nvec2 mobius(vec2 z, vec2 a, vec2 b, vec2 c, vec2 d) {\n    return cdiv(cmul(a,z)+b,cmul(c,z)+d);\n}\n\nvec2 cpow(vec2 z, vec2 p) {\n    float a = atan(z.y, z.x);\n    float lnr = 0.5 * log(dot(z,z));\n    float m = exp(p.x * lnr - p.y * a);\n    float angle = p.x * a + p.y * lnr + TWOPI;\n    return vec2(cos(angle), sin(angle)) * m;\n}\n\nvec2 clog(vec2 z) {\n    return vec2(0.5 * log(dot(z,z)), atan(z.y,z.x));\n}\n\nvec2 catan(vec2 z) {\n    return clog(mobius(z,R,R,-R,R));\n}\n\nvec2 casin(vec2 z) {\n    return clog(z+cpow(cmul(z,z)+R,R*0.5));\n}\n\nvec2 cagm(vec2 ari, vec2 geo) {\n    vec2 a = ari;\n    vec2 g = geo;\n    for(int i = 0; i < 10; i++) {\n        a = cdiv(a + g,2.*R);\n        g = cpow(cmul(a,g),R*0.5);\n    }\n    return g;\n}\n\nvec2 cahm(vec2 ari, vec2 har) {\n    vec2 a = ari;\n    vec2 h = har;\n    for(int i = 0; i < 10; i++) {\n        a = cdiv(a + h,2.*R);\n        h = cdiv(2.*R,cdiv(R,a)+cdiv(R,h));\n    }\n    return h;\n}\n\nvec2 cghm(vec2 geo, vec2 har) {\n    vec2 g = geo;\n    vec2 h = har;\n    for(int i = 0; i < 10; i++) {\n        g = cpow(cmul(g,h),R*0.5);\n        h = cdiv(2.*R,cdiv(R,g)+cdiv(R,h));\n    }\n    return g;\n}\n\nfloat l(float r) {\n    return 2. / PI * atan(r);\n}\n\nfloat hue2rgb(float p, float q, float t) {\n    do{\n      if(t < 0.0) t += 1.0;\n      if(t > 1.0) t -= 1.0;\n    } while (t < 0.0 || t > 1.0);\n\n  if(t < 1.0 / 6.0) return p + (q - p) * 6.0 * t;\n  if(t < 1.0 / 2.0) return q;\n  if(t < 2.0 / 3.0) return p + (q - p) * (2.0 / 3.0 - t) * 6.0;\n  return p;\n}\n\nvec3 hslToRgb(float h, float s, float l) {\n  float r, g, b;\n\n  if(s == 0.0) {\n    r = g = b = l; // achromatic\n  } else {\n    float q = l < 0.5 ? l * (1.0 + s) : l + s - l * s;\n    float p = 2.0 * l - q;\n\n    r = hue2rgb(p, q, h + 1.0 / 3.0);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 1.0 / 3.0);\n  }\n\n  return vec3(r,g,b);\n}\n\nvec3 domainColoring(vec2 z) {\n    float H = mod(iTime*0.0125,1.)-atan(z.y,z.x)/ TWOPI - TWOPI / 3.0;\n    float S = 1.0;\n    float L = l(length(z));\n    return hslToRgb(H,S,L);\n}\n\nvec4 fC(vec2 fragCoord )\n{\n    vec2 uv = 2.0 * (fragCoord.xy - 0.5*iResolution.xy) / -iResolution.y;\n\n    float t = iTime * 0.125;\n\n    uv.x += 0.5;\n    uv = dot(uv,uv)<1.0?uv:vec2(-uv.x,uv.y);\n    uv = mobius(uv,R,-R,R,R);\n    uv.x = -abs(uv.x);\n    uv = mobius(uv,R,R,-R,R);\n\n    uv = mobius(uv,R,0.75*R,0.75*R,R);\n\n    uv = cmul(uv,vec2(cos(t),sin(t)));\n\n    uv *= 14.01;\n    \n    uv = cdiv(R,uv);\n    \n    for(int i = 0; i < 20; i++){\n        uv = cahm(cmul(uv,uv),cdiv(R,cmul(uv,uv)));\n    }\n    \n    vec2 nuv = uv/(0.1*PI);\n\n    float grid = mod(floor(nuv.x)+floor(nuv.y),2.);\n    \n    vec3 col = -0.5 * length(vec2(grid)) + domainColoring(uv);\n\n    // Output to screen\n    return vec4(col,1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0);\n    float A = 2.,\n          s = 1./A, x, y;\n    \n    for (x=-.5; x<.5; x+=s) for (y=-.5; y<.5; y+=s) fragColor += min ( fC(vec2(x,y)+fragCoord), 1.0);\n        \n\tfragColor /= A*A;\n}","name":"Image","description":"","type":"image"}]}