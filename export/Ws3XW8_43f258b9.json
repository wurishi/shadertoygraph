{"ver":"0.1","info":{"id":"Ws3XW8","date":"1571833958","viewed":313,"name":"Conserved advection smoke","username":"michael0884","description":"I'm experimenting with advection methods that conserve the advected quantities. In this simulation I'm advecting the coordinates first and then I'm accurately resampling the advected density using those coordinates to conserve stuff. ","likes":11,"published":1,"flags":32,"usePreview":0,"tags":["simulation","fluid","smoke","advection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 color1 = vec3(0.05,0.1,1.2);\nvec3 color2 = vec3(1.1,0.5,0.4);\n\nvoid mainImage( out vec4 fragColor, in vec2 pos )\n{\n    // Output to screen\n    vec4 vcol = SAMPLE(iChannel0, pos, size);\n   \n    \n    fragColor.xyz = sin(6.*color1*vcol.z) + sin(2.5*color2*vcol.w);\n\t//fragColor.xyz = (vec3(G)-0.99)*50.;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define size iResolution.xy\n#define SAMPLE(a, p, s) texture((a), (p)/s)\n\n//scales\n#define dt 1.0\n#define dx 1.\n\n#define PI 3.14159265\n\n#define mouse_amplitude 0.01\n#define mouse_radius 2.\n#define eps 0.005\n#define ADVECTION_SAMPLES 4.\n\nfloat bilinear_interp(vec2 pos, vec4 sqr)\n{\n    return dot(sqr, vec4((1.-pos.x)*(1.-pos.y),pos.x*(1.-pos.y),(1.-pos.x)*pos.y,pos.x*pos.y));\n}\n\nvec4 AdvectionResampling(sampler2D F, sampler2D UV, vec2 pos, vec2 sz)\n{\n    vec2 uv1 = SAMPLE(UV, pos + vec2(-1,0), sz).xy;\n    vec2 uv2 = SAMPLE(UV, pos + vec2(1,0), sz).xy;\n    vec2 uv3 = SAMPLE(UV, pos + vec2(0,-1), sz).xy;\n    vec2 uv4 = SAMPLE(UV, pos + vec2(0,1), sz).xy;\n    \n    float G = 0.5+0.5*(uv2.x-uv1.x)*(uv4.y-uv3.y)/4.;\n    \n    vec4 stuff = vec4(0);\n    float ns = sqrt(ADVECTION_SAMPLES)*0.5;\n    for(float i = -ns; i <= ns; i+=1.)\n    {\n        for(float j = -ns; j <= ns; j+=1.)\n        {\n\t\t\tvec2 duv = 0.1*vec2(i,j)/ns;\n            vec2 thisUV =  SAMPLE(UV, pos + duv, sz).xy;\n    \n            stuff += SAMPLE(F, thisUV, sz);\n   \t\t}\n    }\n    return stuff*G/((ns*2.+1.)*(ns*2.+1.)); //rescaling the density according to the gradient of the new coordinates to conserve stuff\n}\n\nvec4 Laplacian(sampler2D F, vec2 pos, vec2 sz)\n{\n    vec4 a = SAMPLE(F, pos, sz);\n\tvec4 x0 = SAMPLE(F, pos + vec2(-1,0), sz);\n    vec4 x1 = SAMPLE(F, pos + vec2(1,0), sz);\n    vec4 y0 = SAMPLE(F, pos + vec2(0,1), sz);\n    vec4 y1 = SAMPLE(F, pos + vec2(0,-1), sz);\n \n\treturn (x0+x1+y0+y1-4.f*a)/(dx*dx);\n}\n\n\n//get the vorticity field\nfloat Vorticity(sampler2D F, vec2 pos, vec2 sz)\n{\n\tvec4 x0 = SAMPLE(F, pos + vec2(-1,0), sz);\n    vec4 x1 = SAMPLE(F, pos + vec2(1,0), sz);\n    vec4 y1 = SAMPLE(F, pos + vec2(0,1), sz);\n    vec4 y0 = SAMPLE(F, pos + vec2(0,-1), sz);\n    \n\treturn ((x1.y-x0.y)-(y1.x-y0.x))/(2.*dx);\n}\n\n\nfloat Divergence(sampler2D F, vec2 pos, vec2 sz)\n{\n\tvec4 x0 = SAMPLE(F, pos + vec2(-1,0), sz);\n    vec4 x1 = SAMPLE(F, pos + vec2(1,0), sz);\n    vec4 y1 = SAMPLE(F, pos + vec2(0,1), sz);\n    vec4 y0 = SAMPLE(F, pos + vec2(0,-1), sz);\n    \n\treturn ((x1.x-x0.x)+(y1.y-y0.y))/(2.*dx);\n}\n\nvec2 Gradient(sampler2D F, vec2 pos, vec2 sz)\n{\n\tvec4 x0 = SAMPLE(F, pos + vec2(-1,0), sz);\n    vec4 x1 = SAMPLE(F, pos + vec2(1,0), sz);\n    vec4 y1 = SAMPLE(F, pos + vec2(0,1), sz);\n    vec4 y0 = SAMPLE(F, pos + vec2(0,-1), sz);\n    \n\treturn vec2((x1.x-x0.x),(y1.x-y0.x))/(2.*dx);\n}\n\n\nfloat gauss(vec2 x, float r)\n{\n    return tanh(200.*exp(-pow(length(x)/r,2.)));\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// coordinate advection\n\nvoid mainImage( out vec4 uv, in vec2 pos )\n{\n    vec2 velocity = SAMPLE(iChannel1, pos, size).xy;\n    uv.xy = pos - 1.*velocity*dt;\n    uv.zw = vec2(0.);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// velocity and stuff resampling and pressure project\n\nvoid mainImage( out vec4 params, in vec2 pos )\n{\n\tparams = AdvectionResampling(iChannel1, iChannel0, pos, size);\n    params.xy -= dt*Gradient(iChannel2,pos,size);\n    \n    if(iFrame < 1)\n    {\n        params = vec4(1.,0.,2.,0.6)*gauss(pos - size*0.5, mouse_radius);\n    }\n    \n    float phase = 1.5*iTime;\n    vec2 pvec = vec2(sin(phase),cos(phase));\n    float d = gauss(pos - size*0.5, mouse_radius*3.);\n    params.zw += 0.01*clamp(vec2((sin(phase+0.01*dot(pvec,pos))),(-sin(phase+0.01*dot(pvec,pos)))),0.,1.)*d;\n    params.xy = params.xy*(1.-d) + 0.5*pvec*d;\n    if(iMouse.z>0.)\n         params += mouse_amplitude*vec4(0.5*pvec,abs(sin(phase+0.01*dot(pvec,pos))),abs(cos(phase+0.01*dot(pvec,pos))))*gauss(pos - iMouse.xy, 2.*mouse_radius);\n    \n    if(pos.x < 1. || pos.y < 1.|| pos.y > size.x-1.|| pos.y > size.y-1.)\n    {\n         params = vec4(0.);\n    }\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// pressure solve\n\nvoid mainImage( out vec4 pressure, in vec2 pos )\n{\n    vec4 x0 = SAMPLE(iChannel2, pos + vec2(-1,0), size);\n    vec4 x1 = SAMPLE(iChannel2, pos + vec2(1,0), size);\n    vec4 y0 = SAMPLE(iChannel2, pos + vec2(0,1), size);\n    vec4 y1 = SAMPLE(iChannel2, pos + vec2(0,-1), size);\n \n\tpressure.x = (x0 + x1 + y0 + y1 - Divergence(iChannel1,pos,size)).x*0.25;\n    pressure.yzw = vec3(0.);\n}","name":"Buffer C","description":"","type":"buffer"}]}