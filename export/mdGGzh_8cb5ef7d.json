{"ver":"0.1","info":{"id":"mdGGzh","date":"1678178504","viewed":299,"name":"integrated Lissajous","username":"FabriceNeyret2","description":"variant of [url] https://shadertoy.com/view/4dcfW8 [/url]\njust integrating the Lissajous over time.\n\nblack lines are self masking (i.e. correlation): try switching the flag.\nI think white lines also are (due to polyline angles)","likes":20,"published":3,"flags":32,"usePreview":0,"tags":["lines","antialiasing","lissajous","utils","tuto","segments"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// variant of \"line segment (tuto)\" by FabriceNeyret2. https://shadertoy.com/view/4dcfW8\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    O = texelFetch( iChannel0, ivec2(u),0 );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// variant of \"line segment (tuto)\" by FabriceNeyret2. https://shadertoy.com/view/4dcfW8\n\nfloat line(vec2 p, vec2 a,vec2 b) { \n    p -= a, b -= a;\n    float h = clamp(dot(p, b) / dot(b, b), 0., 1.); \n    return dot(p - b * h, p);  \n}\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         U = 1.2* ( u+u - R ) / R.y;\n    O = .995* texelFetch( iChannel0, ivec2(u),0 ); \n\n    float d = 1e5, t= float(iFrame)/60. -4.;\n#define f(x) vec2( sin(6.*x-t) , cos(8.*x-t) ) -.2*sin(x) // func to draw\n    vec2 _P, P=f(0.);\n    \n#if 1  // version with self masking\n    for (float x = 0.; x < 4.; x += .03 )\n        d = min(d, line( U, _P = P, P = f(x)) );\n   \n    O += .1* smoothstep( 3./R.y, 0., sqrt(d) );\n  \n#else  //  version without self masking\n\n    for (float x = 0.; x < 4.; x += .03 ) // try 0.003\n        d =  line( U, _P = P, P = f(x)) ,\n        O += .1* smoothstep( 3./R.y, 0., sqrt(d) );\n#endif\n}","name":"Buffer A","description":"","type":"buffer"}]}