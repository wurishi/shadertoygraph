{"ver":"0.1","info":{"id":"WlcfzH","date":"1612195601","viewed":227,"name":"Neural human 3d","username":"iuryBorgesRodrigues","description":"Neural human 3d","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["neural","humam"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\n//like the last few shaders I've published, this is a neural network experiment.\n//this time, the neural network reproduces an SDF given the x,y,z coordinates\n//using siren networks with skip connections: https://vsitzmann.github.io/siren/\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n    return mix(dot(p,ax)*ax,p,cos(ro))+sin(ro)*cross(ax,p);\n}\n\nfloat scene(vec3 p) {\n    //sdf is undefined outside the unit sphere, uncomment to witness the abominations\n    if (length(p) > 1.) {\n        return length(p)-.9;\n    }\n    \n    //neural networks can be really compact... when they want to be\n    vec4 f0_0=sin(p.y*vec4(2.057,-2.118,-3.094,2.111)+p.z*vec4(-2.209,1.484,1.337,-3.312)+p.x*vec4(-4.227,1.529,-2.733,-1.672)+vec4(-8.017,1.715,.814,4.908));\nvec4 f0_1=sin(p.y*vec4(-1.590,-2.353,1.392,1.726)+p.z*vec4(-3.486,-1.055,-2.756,.048)+p.x*vec4(-2.446,-2.044,.194,-2.526)+vec4(-8.674,7.417,7.120,1.235));\nvec4 f0_2=sin(p.y*vec4(-2.957,.489,-1.138,-2.165)+p.z*vec4(2.529,-1.467,-2.774,3.574)+p.x*vec4(2.126,2.909,1.262,-2.823)+vec4(-7.604,-7.397,6.981,4.360));\nvec4 f0_3=sin(p.y*vec4(2.796,3.212,-1.945,3.542)+p.z*vec4(-.590,.789,-.475,-3.595)+p.x*vec4(.906,-.806,-.280,-3.517)+vec4(-2.332,2.753,-4.574,-1.273));\nvec4 f1_0=sin(mat4(.399,-.163,.484,.010,-.005,.277,.241,-.590,-.117,.343,-.637,.038,.070,-.190,-.619,-.123)*f0_0+\n    mat4(.194,.145,-.249,.356,.261,.484,.094,-.510,-.810,.079,-.769,1.155,-.186,.491,.622,.220)*f0_1+\n    mat4(-.123,.054,-.046,-.087,.280,.060,.238,.024,.681,-.346,.799,.180,-.045,.038,-.425,-.408)*f0_2+\n    mat4(-.170,-.073,-.869,-.980,-.340,.647,-.007,.668,.131,-.717,-.179,-.278,.292,-.003,-.052,-.141)*f0_3+\n    vec4(1.340,-.908,2.484,-1.047))/1.0+f0_0;\nvec4 f1_1=sin(mat4(-.491,-.310,.285,-.771,.161,-.809,-.445,-.236,-.503,-.303,-.502,-.670,-.170,-.322,-.405,-.089)*f0_0+\n    mat4(-.206,-.081,-.575,-.080,.621,-.635,.394,-.085,1.414,-.603,-.595,-.401,-.094,-.382,-.441,-.241)*f0_1+\n    mat4(.040,-.110,.694,.071,.329,-.269,-.148,.365,.771,-.784,.932,-.435,-.079,-.039,.255,-.197)*f0_2+\n    mat4(.569,-.044,.065,-.339,.241,.005,-.266,-.350,.596,-.816,-1.244,-.138,-.042,.029,-.084,.061)*f0_3+\n    vec4(3.492,-1.592,-3.910,-3.144))/1.0+f0_1;\nvec4 f1_2=sin(mat4(.437,.170,.087,-.622,.564,.469,-.338,.212,.465,.312,.495,.518,1.220,-.354,-.390,-.010)*f0_0+\n    mat4(-1.219,-.096,-.347,.394,-.592,.496,.411,.774,.325,.287,.516,-.245,.688,.420,-.281,.351)*f0_1+\n    mat4(-.188,.080,-.285,.094,-.324,-.140,-.083,-.801,.301,-.220,1.100,-.188,.729,.489,.095,-.209)*f0_2+\n    mat4(-.798,-.085,.525,.092,-.435,.202,-.048,-.521,.564,-.023,.701,.449,-.416,.024,.132,-.007)*f0_3+\n    vec4(1.176,2.539,-.878,2.372))/1.0+f0_2;\nvec4 f1_3=sin(mat4(-.006,-.649,-.079,-.097,-.052,-.168,-.030,.235,-.600,-.489,-.703,.122,.738,.085,.355,.125)*f0_0+\n    mat4(.635,-.490,.109,-.291,.127,.060,.160,-.253,.474,.442,-.055,.556,.353,-.115,-.171,.288)*f0_1+\n    mat4(-.544,-.435,-.455,-.200,.278,.273,.853,.675,-.974,-.046,.182,.035,-.238,.557,.003,.454)*f0_2+\n    mat4(.770,.539,.029,.025,-.733,.085,.009,.006,.867,.396,-.604,-.334,.178,1.159,.080,-.226)*f0_3+\n    vec4(.482,-.570,1.079,3.577))/1.0+f0_3;\nvec4 f2_0=sin(mat4(.296,.359,-1.390,-.018,-.508,-.728,-2.673,1.130,.033,-.251,-.933,-.538,-.648,.282,-1.108,-.730)*f1_0+\n    mat4(.234,-.231,-.865,-.171,.324,-.522,.093,.303,-.287,-.741,.576,-.022,-.659,-.110,.064,-.420)*f1_1+\n    mat4(.544,-.584,.750,.597,-.067,.375,-1.151,.461,-.229,.002,-.011,-.305,.057,-.471,.271,-.706)*f1_2+\n    mat4(-.818,-.359,.207,.711,.093,.603,-.301,.187,.112,-.188,-.568,1.188,.183,.145,.325,.097)*f1_3+\n    vec4(-1.898,-2.423,3.352,3.075))/1.4+f1_0;\nvec4 f2_1=sin(mat4(-1.133,-.241,.444,-.863,-.693,-.534,-.046,.292,-.047,-.107,-.710,-.109,-.369,-.028,.519,.208)*f1_0+\n    mat4(-.443,-.437,-.420,-.412,.169,.604,.515,.086,.677,.249,-.126,.465,.416,.188,.019,.898)*f1_1+\n    mat4(-.359,.222,-.465,-.316,-.118,-.434,.308,.439,-.596,.318,.555,-.721,-.229,.133,-.367,.465)*f1_2+\n    mat4(.236,.557,.885,-.145,-.813,.153,.460,.432,.921,.160,-.260,-.508,.007,-.488,-.125,.023)*f1_3+\n    vec4(-2.122,-1.079,1.690,.545))/1.4+f1_1;\nvec4 f2_2=sin(mat4(-.590,.116,.008,.383,.691,-.787,-.551,-.133,-.124,-.315,-.360,.444,.136,.403,-.120,1.350)*f1_0+\n    mat4(.212,.204,-.806,-.413,1.343,.148,.449,-.241,.168,.066,-.084,-.515,-.136,.471,.576,.465)*f1_1+\n    mat4(-.171,.084,-.722,.080,.085,.567,.513,.085,.320,-.212,-.593,-.403,.478,.682,.200,-.082)*f1_2+\n    mat4(.622,-.019,-.949,.167,.382,-.174,-.017,-.041,.234,-.739,-.327,.200,-.074,.076,.437,.044)*f1_3+\n    vec4(-1.055,.376,-2.075,2.178))/1.4+f1_2;\nvec4 f2_3=sin(mat4(-1.025,-.739,-.826,-.406,.815,1.078,-.042,-.302,-.173,.038,-.105,-.219,.364,.260,.547,.331)*f1_0+\n    mat4(.496,.624,-.611,.839,.298,.038,-.625,-.311,.448,-.508,.302,.240,-.485,.367,.016,.519)*f1_1+\n    mat4(-.190,-.918,-.224,-.139,.443,.027,-.638,-.199,-.140,-.536,.205,-.121,.688,.679,.477,.167)*f1_2+\n    mat4(-.568,.227,-.550,.147,-.524,-.495,.042,.264,-1.729,-.024,-1.016,-.479,.741,1.574,.613,.063)*f1_3+\n    vec4(-3.090,.562,-2.917,1.186))/1.4+f1_3;\nreturn dot(f2_0,vec4(.077,-.050,.041,-.048))+\n    dot(f2_1,vec4(-.037,-.077,.057,-.056))+\n    dot(f2_2,vec4(-.036,.042,.060,-.026))+\n    dot(f2_3,vec4(.060,.026,.081,-.080))+\n    0.236;\n\n\n}\n\nvec3 norm(vec3 p) {\n    mat3 k = mat3(p,p,p)-mat3(0.001);\n    return normalize(scene(p) - vec3(scene(k[0]),scene(k[1]),scene(k[2])));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec2 mouse = (iMouse.xy-0.5*iResolution.xy)/iResolution.y;\n\n    vec3 cam = normalize(vec3(1.5,uv));\n    vec3 init = vec3(-3.,0,0);\n    \n    float yrot = 0.5;\n    float zrot = iTime*.2;\n    if (iMouse.z > 0.) {\n        yrot += -4.*mouse.y;\n        zrot = 4.*mouse.x;\n    }\n    cam = erot(cam, vec3(0,1,0), yrot);\n    init = erot(init, vec3(0,1,0), yrot);\n    cam = erot(cam, vec3(0,0,1), zrot);\n    init = erot(init, vec3(0,0,1), zrot);\n    \n    vec3 p = init;\n    bool hit = false;\n    for (int i = 0; i < 150 && !hit; i++) {\n        float dist = scene(p/vec3(1.0))-0.02;\n        hit = dist*dist < 1e-6;\n        p+=dist*cam;\n        if (distance(p,init)>5.) break;\n    }\n    vec3 n = norm(p);\n    vec3 r = reflect(cam,n);\n    //don't ask how I stumbled on this texture\n    vec3 nz = p - erot(p, vec3(1), 2.) + erot(p, vec3(1), 4.);\n    float spec = length(sin(r*3.5+sin(nz*120.)*.15)*.4+.6)/sqrt(3.);\n    spec *= smoothstep(-.3,.2,scene(p+r*.2));\n    vec3 col = vec3(.1,.1,.12)*spec + pow(spec,8.);\n    float bgdot = length(sin(cam*8.)*.4+.6)/2.;\n    vec3 bg = vec3(.1,.1,.11) * bgdot + pow(bgdot, 10.);\n    fragColor.xyz = hit ? col : bg;\n    fragColor = smoothstep(-.02,1.05,sqrt(fragColor)) * (1.- dot(uv,uv)*.5);\n}","name":"Image","description":"","type":"image"}]}