{"ver":"0.1","info":{"id":"lXVXzV","date":"1720222508","viewed":96,"name":"240705_02_unitCircle","username":"soncho_E","description":"Unit circle and trigonometric functions","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["shaderlearning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define S(v) smoothstep(6.0 / iResolution.y, 0.0, abs(v))\n\nconst float PI = 3.14159265358979323;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n\n    vec3 bgCol = vec3(0.4, 0.5, 0.6);\n    vec3 bgLineCol = vec3(0.9, 0.9, 0.9);\n    vec3 intersectionCol = vec3(1.0, 0.1, 0.0);\n    vec3 moveLineCol = vec3(0.35, 0.35, 0.35);\n\n    float dist = length(uv);\n    float unitCircleRadius = 1.0;\n\n    float unitCircleLine = S(unitCircleRadius - dist);\n    float yAxisLine = S(uv.x);\n    float xAxisLine = S(uv.y);\n    float xUnitLine = S(1.0 - uv.x);\n\n    float theta = mod(iTime, 2.0 * PI);\n    float sinLine = S(sin(theta) - uv.y);\n    float cosLine = S(cos(theta) - uv.x);\n\n    float radian = atan(uv.y, uv.x);\n    radian = radian < 0.0 ? radian + 2.0 * PI : radian;\n    float radiusThr = 6.0 / iResolution.y /dist;\n    float radiusLine = smoothstep(radiusThr,0.0, abs(theta - radian)); \n    float intersection = radiusLine * xUnitLine; // = tan\n\n    vec3 col = mix(bgCol, bgLineCol, unitCircleLine);\n    col = mix(col, bgLineCol, yAxisLine + xAxisLine + xUnitLine);\n    col = mix(col, moveLineCol, sinLine + cosLine);\n    col = mix(col, moveLineCol, radiusLine);\n    col = mix(col, intersectionCol, intersection);\n\n    fragColor = vec4(col, 1.0);\n\n}\n","name":"Image","description":"","type":"image"}]}