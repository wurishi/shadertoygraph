{"ver":"0.1","info":{"id":"tdKBWV","date":"1608025345","viewed":236,"name":"Packing of 3D normals to 2 bytes","username":"bjarkeck","description":"Well... In this case, it's 4 bytes, but the results should be very similar when using a half.\n\nThe left half is the original normals visualized. Right is the packed and unpacked version.\n\nAnd no bitwise oprators allowed! :)\n","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["normals","packing","unpacking"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// x and y are stored through atan, and z is scaled so that when renormalized, the proportions between xy and z remain the same.\n// The magic numbers are found through hyperparameter optimization.\n// I'm sure it can be cleaned up and improved a lot. It does suffer from a few artifacts.\n// I'm not sure if there are better methods out there? The ones I've tried did not produce very good results.\n\nvec3 unpackNormal(float f)\n{\n\tfloat flipZ = sign(f);\n\tf = abs(f);\n\tfloat atanXY = floor(f) / 67.5501 * (3.14159274 * 2.) - 3.14159274;\n\tvec3 n = vec3(sin(atanXY), cos(atanXY), 0.);\n\tn.z = ((fract(f) * 1869.2296) / 427.67993);\n\tn = normalize(n);\n\tn.z *= flipZ;\n\treturn n;\n}\n\nfloat packNormal(vec3 n)\n{\n\tfloat flipZ = sign(n.z);\n\tn.z = abs(n.z);\n\tn /= 23.065746;\n\tfloat xy = floor((atan(n.x, n.y) + 3.14159274) / (3.14159274 * 2.0) * 67.5501);\n\tfloat z = floor((n.z) * 427.67993) / 1869.2296;\n\tz *= 1. / max(0.01, length(vec2(n.x, n.y)));\n\treturn (xy + z) * flipZ;\n}\n\n\n// Noise by iq: https://www.shadertoy.com/view/Msf3WH\nvec2 hash( vec2 p )\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uvSplit = vec2(fract(uv.x * 2.0), uv.y);\n    if (uv.x > 0.5) { uvSplit.x = 1.0 - uvSplit.x; } // mirror\n    \n    float scale = 4.1;\n    \n    vec3 col = vec3(0.0);\n\n    vec3 norm = vec3(0.0);\n    norm.x = noise(vec2(uvSplit.x * scale, uvSplit.y * scale));\n    norm.y = noise(vec2(4.142 + uvSplit.x * scale, uvSplit.y * scale));\n    norm.z = noise(vec2(uvSplit.x * scale, 3.142 + uvSplit.y * scale));\n    norm = normalize(norm);\n    \n    if (uv.x < 0.5)\n    {\n        col = norm * 0.5 + vec3(0.5);\n    } else {\n        float packed = packNormal(norm);\n        vec3 unpacked = unpackNormal(packed);\n        \n        col = unpacked * 0.5 + vec3(0.5);\n    }\n    \n    \n    int cmp = int(mod(uv.y * 6.0, 6.0));\n    if (cmp == 0) { col.xy = vec2(0.); }\n    if (cmp == 1) { col.yz = vec2(0.); }\n    if (cmp == 2) { col.zx = vec2(0.); }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}