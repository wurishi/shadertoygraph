{"ver":"0.1","info":{"id":"MlVyDG","date":"1537575247","viewed":161,"name":"Rectangle/Smiley","username":"rlarp","description":"Simple rectangle + smiley","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["rectangle","education","school","homework"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Circle(vec2 uv, vec2 p, float r, float blur){ // Function creates a circle of radius r, with blur \n    float d = length(uv-p); // Distance formula \n    float c = smoothstep(r, r-blur, d); // Blurs the edges \n    return c; // Returns the circle\n}\n\nfloat Band(float t, float start, float end, float blur){\n    float step1 = smoothstep(start-blur, start+blur, t); // Cuts of the smoothstep to start/end and uses the blur value to add the interval of start/end by a bit to achieve blur\n    float step2 = smoothstep(end+blur, end-blur, t); // Horizontal Band, above is Vertical Band\n\treturn step1*step2; // Gets the area in which both step1 and step2 = 1. (if one is .0, it's all .0\n}\n\nfloat Rect(vec2 uv, float left, float right, float bottom, float top, float blur){\n    float band1 = Band(uv.x, left, right, blur); // Vertical band (x coord)\n    float band2 = Band(uv.y, bottom, top, blur); // Horizontal band (y coord)\n    return band1*band2; \n}\n\nfloat Smiley(vec2 uv, vec2 p, float size) { // Function creates a smiley face (so you don't have to do all the things in main\n    uv -= p; // Change the location of the Smiley (relocate the coordinate system)\n    uv /= size; // Change size of Smiley by scaling the coordinate system\n    \n    float mask = Circle(uv, vec2(0.), .4, .05); // Uses the circle function to create the outline for the Smiley\n    \n    mask -= Circle(uv, vec2(-.13, .2), .07, 0.01); // Cuts out part of circle to make eyes\n    mask -= Circle(uv, vec2(.13, .2), .07, 0.01); \n    \n    float mouth = Circle(uv, vec2(0., 0.), 0.3, 0.02); // Makes an ellipse like shape using Circle for the mouth\n    mouth -= Circle(uv, vec2(0., 0.1), 0.3, 0.02);\n    \n    mask -= mouth; // Subtract the area of the mouth so that it seems like there is a mouth \n    return mask; // Returns the smiley \n}\n\nfloat remap01(float a, float b, float t){ // Returns float between 0.0-1.0 depending on distance to value a/b.\n    return (t-a) / (b-a);\n}\n\nfloat remap(float a, float b, float c, float d, float t){ // High blur on right, low blur on left\n    return remap01(a,b,t) * (d-c) + c; \n}\n    \n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy/iResolution.xy; // set the resolution\n    float t = iTime; \n    uv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y; // equal out x/y\n    \n    // Note: I didn't take comments on a few of these things for they were already pre-made when the video started.\n    \n    vec3 col = vec3(0.);\n    \n    float mask = .0; // If you want rectangle\n    // float mask = Smiley(uv, vec2(0., .0), 1.); // If you want smiley\n    \n    float x = uv.x; // Seperate uv coords into x and y components\n    float m = sin(t+x*8.)*.1; // Manipulate y component according to a function\n    float y = uv.y-m;\n    \n    float blur = remap(-.5, .5, .01, .25, x);\n    blur = pow(blur*4., 3.); // Manipulate blur. \n    \n    mask = Rect(vec2(x,y), -.5, .5, -.1, .1, blur); // Utilizes the smoothstep function to split the screen\n   \n    col = vec3(1., 1., 1.)*mask; // Only colors the mask \n    \n    fragColor = vec4(col, 1.0); // Adds color the the smiley\n    \n    // \n}\n    ","name":"Image","description":"","type":"image"}]}