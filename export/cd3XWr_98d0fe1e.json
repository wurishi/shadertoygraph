{"ver":"0.1","info":{"id":"cd3XWr","date":"1679604541","viewed":1038,"name":"AgX Minimal","username":"bwrensch","description":"Minimal version of Troy Sobotka's AgX using a 6th order polynomial approximation instead of the more complex sigmoid function or lookup table.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["agx"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Minimal implementation of Troy Sobotka's AgX based on\n// \n// https://github.com/sobotka/AgX\n//\n// using a 6th order polynomial approximation instead\n// of the more complex sigmoid function or lookup table.\n//\n// Some more details here: \n// https://iolite-engine.com/blog_posts/minimal_agx_implementation\n//\n// Changelog\n// ---------\n// - Added \"full round trip\" based on Troy's feedback (https://www.shadertoy.com/view/mdcSDH)\n\n// Set to > 0 to show a video instead of the color gradients\n#define SHOW_VIDEO 0\n// 0: Default, 1: Golden, 2: Punchy\n#define AGX_LOOK 0\n\n// AgX\n// ->\n\n// Mean error^2: 3.6705141e-06\nvec3 agxDefaultContrastApprox(vec3 x) {\n  vec3 x2 = x * x;\n  vec3 x4 = x2 * x2;\n  \n  return + 15.5     * x4 * x2\n         - 40.14    * x4 * x\n         + 31.96    * x4\n         - 6.868    * x2 * x\n         + 0.4298   * x2\n         + 0.1191   * x\n         - 0.00232;\n}\n\nvec3 agx(vec3 val) {\n  const mat3 agx_mat = mat3(\n    0.842479062253094, 0.0423282422610123, 0.0423756549057051,\n    0.0784335999999992,  0.878468636469772,  0.0784336,\n    0.0792237451477643, 0.0791661274605434, 0.879142973793104);\n    \n  const float min_ev = -12.47393f;\n  const float max_ev = 4.026069f;\n\n  // Input transform\n  val = agx_mat * val;\n  \n  // Log2 space encoding\n  val = clamp(log2(val), min_ev, max_ev);\n  val = (val - min_ev) / (max_ev - min_ev);\n  \n  // Apply sigmoid function approximation\n  val = agxDefaultContrastApprox(val);\n\n  return val;\n}\n\nvec3 agxEotf(vec3 val) {\n  const mat3 agx_mat_inv = mat3(\n    1.19687900512017, -0.0528968517574562, -0.0529716355144438,\n    -0.0980208811401368, 1.15190312990417, -0.0980434501171241,\n    -0.0990297440797205, -0.0989611768448433, 1.15107367264116);\n    \n  // Undo input transform\n  val = agx_mat_inv * val;\n  \n  // sRGB IEC 61966-2-1 2.2 Exponent Reference EOTF Display\n  //val = pow(val, vec3(2.2));\n\n  return val;\n}\n\nvec3 agxLook(vec3 val) {\n  const vec3 lw = vec3(0.2126, 0.7152, 0.0722);\n  float luma = dot(val, lw);\n  \n  // Default\n  vec3 offset = vec3(0.0);\n  vec3 slope = vec3(1.0);\n  vec3 power = vec3(1.0);\n  float sat = 1.0;\n \n#if AGX_LOOK == 1\n  // Golden\n  slope = vec3(1.0, 0.9, 0.5);\n  power = vec3(0.8);\n  sat = 0.8;\n#elif AGX_LOOK == 2\n  // Punchy\n  slope = vec3(1.0);\n  power = vec3(1.35, 1.35, 1.35);\n  sat = 1.4;\n#endif\n  \n  // ASC CDL\n  val = pow(val * slope + offset, power);\n  return luma + sat * (val - luma);\n}\n\n// <-\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord/iResolution.xy;\n  \n  vec3 col;\n#if SHOW_VIDEO > 0\n  col = textureLod(iChannel0, uv, 0.0).rgb;\n  col = toLinear(vec4(col, 1.0)).rgb;\n#else\n  col = colorGradients(fragCoord, iResolution);\n#endif\n  \n  // AgX\n  // ->\n  col = agx(col);\n  col = agxLook(col);\n  col = agxEotf(col);\n  // <-\n  \n  fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec4 fromLinear(vec4 linearRGB) {\n  bvec4 cutoff = lessThan(linearRGB, vec4(0.0031308));\n  vec4 higher = vec4(1.055)*pow(linearRGB, vec4(1.0/2.4)) - vec4(0.055);\n  vec4 lower = linearRGB * vec4(12.92);\n\n  return mix(higher, lower, cutoff);\n}\n\nvec4 toLinear(vec4 sRGB) {\n  bvec4 cutoff = lessThan(sRGB, vec4(0.04045));\n  vec4 higher = pow((sRGB + vec4(0.055))/vec4(1.055), vec4(2.4));\n  vec4 lower = sRGB/vec4(12.92);\n  \n  return mix(higher, lower, cutoff);\n}\n\n// https://www.shadertoy.com/view/dtSGD1\nvec3 colorGradients(vec2 fragCoord, vec3 iResolution) {\n  float h = floor(1.0+24.0*fragCoord.y/iResolution.y)/24.0 * 3.141592 * 2.;\n  float L = floor(fragCoord.x*24.0/iResolution.y)/(24.0/iResolution.y)/iResolution.x - 0.4;\n  vec3 color = cos(h + vec3(0.0,1.0,2.0)* 3.141592*2.0/3.0);\n  float maxRGB = max(color.r, max(color.g, color.b));\n  float minRGB = min(color.r, min(color.g, color.b));\n  \n  return exp(15.0*L)*(color-minRGB)/(maxRGB-minRGB);\n}","name":"Common","description":"","type":"common"}]}