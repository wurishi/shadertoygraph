{"ver":"0.1","info":{"id":"4tXcW2","date":"1506365009","viewed":84,"name":"FirstProject","username":"pjdevpl","description":"First attemt to learn the sphere tracing from scratch","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["procedural","3d","spheretracing","generated"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define add(a,b)    min((a),(b))\n#define com(a,b)    max((a),(b))\n#define neg(a)        (-(a))\n#define sub(a,b)    com((a),neg(b))\n#define inf(a,v)    ((a)+(v))\n\n#define pmod(a,b)    ( mod(mod((a),(b))+(b),(b)) )\n#define rep(a,r)    ( pmod(((a)+(r)*.5),(r))-(r)*.5 )\n\n#define repx(a,r)    vec3( rep((a).x,(r)), (a).yz )\n#define repy(a,r)    vec3( (a).x, rep((a).y,(r)), (a).z )\n#define repz(a,r)    vec3( (a).xy,rep((a).z,(r)) )\n#define repxy(a,r)    vec3( rep((a).xy,(r)), (a).z )\n#define repyz(a,r)    vec3( (a).x, rep((a).yz,(r)) )\n#define repxz(a,r)    vec3( rep((a).x,(r)), (a).y, rep((a).z,(r)) )\n\n#define scale(p,s)    ((p)/(s))*(s)\n\n//#define pmod(a,b)    \n//{ \n//    mod(mod(a,b)+b,b) \n//}\n\n//float opScale( vec3 p, float s )\n//{\n//    return primitive(p/s)*s;\n//}\n\n#define pi2            (2.*3.141593)\n#define R(plane,a)  (plane=vec2(cos((a)*pi2)*plane.x+sin((a)*pi2)*plane.y,cos((a)*pi2)*plane.y-sin((a)*pi2)*plane.x))\n\nfloat smin( float a, float b, float k )\n{\n    float res = exp( -k*a ) + exp( -k*b );\n    return -log( res )/k;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat udBox( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat displacement(vec3 p)\n{\n    return sin(1.2*p.x)*sin(1.2*p.y)*sin(1.2*p.z);\n}\n\nvec3 opTwist( vec3 p )\n{\n    float  c = cos(10.0*p.y+10.0);\n    float  s = sin(10.0*p.y+10.0);\n    mat2   m = mat2(c,-s,s,c);\n    return vec3(m*p.xz,p.y);\n}\n\nvec3 opCheapBend( vec3 p )\n{\n    float c = cos(2.0*p.y);\n    float s = sin(2.0*p.y);\n    mat2  m = mat2(c,-s,s,c);\n    return vec3(m*p.xy,p.z);\n}\n\n//float opScale( vec3 p, float s )\n//{\n//    return primitive(p/s)*s;\n//}\n\nfloat fn(vec3 pos) \n{\n    R(pos.xy,iTime/8.);\n    //float s = udBox(pos,vec3(.5,.5,.5));\n    float s = udBox(opCheapBend(pos),vec3(.5,.5,.5));\n    //float s = sdSphere(pos,.5);\n    //float d = displacement(pos);\n    \n    float t = sdTorus(pos,vec2(.8, .25));\n    //float t = sdTorus(opTwist(pos),vec2(.8, .25));\n    //float t = sdTorus(opCheapBend(pos),vec2(.8, .25));\n    //float s = sdSphere(pos, 0.75);\n    \n    float sm = smin(s, t, 32.);\n    \n    return sm;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 vpos = uv*2.-1.;\n    vpos.x *= iResolution.x/iResolution.y;\n    vpos *= .8;\n\n    vec3 front = normalize(vec3(-1,0,1));\n    vec3 up = vec3(0,-1,0);\n    vec3 right = cross(up,front);\n    vec3 pos = vec3(0.,0.,0.)-front*2.5;\n\n    vec3 rdir = normalize(front + vpos.x*right + vpos.y*up);\n\n    vec3 rpos = pos;\n\n    for(int i=0;i<50;i++)\n    {\n        float d = fn(rpos);\n        //float d = opTwist(pos);\n        rpos += d*rdir;\n        if(d<0.01) break;\n        //rpos = 1;\n    }\n\n\n    fragColor = vec4(length(rpos-pos)-1.);\n}","name":"Image","description":"","type":"image"}]}