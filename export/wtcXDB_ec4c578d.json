{"ver":"0.1","info":{"id":"wtcXDB","date":"1581615508","viewed":169,"name":"Emerald","username":"Flopine","description":"A small doodle I made... for fun!","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","crystal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, Coyhot, Alkama and YX for teaching me\n// Thanks LJ for giving me the love of shadercoding :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n#define PI 3.141592\n#define TAU (2.*PI)\n#define ITER 64.\n#define BPM (110./60.)\n\nmat2 rot (float a)\n{return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nfloat hash11 (float x)\n{return fract(sin(x)*1245.5);}\n\nvoid mo (inout vec2 p, vec2 d)\n{\n    p = abs(p)-d;\n    if (p.y>p.x) p = p.yx;\n}\n\nfloat box (vec3 p, vec3 c)\n{\n    vec3 q = abs(p)-c;\n    return min(0.,max(q.x,max(q.y,q.z)))+length(max(q,0.));\n}\n\nfloat plane (vec3 p, vec3 n, float d)\n{return dot (p,normalize(n)) + d;}\n\nfloat cut_planes(vec3 p)\n{\n    p = abs(p)-0.7;\n    \n    mo(p.xz, vec2(0.8,1.));   \n    mo(p.yz, vec2(0.6,0.4));\n    mo(p.xy, vec2(0.05)); \n    return plane(p, vec3(0.5,0.8,0.7), 0.);\n}\n\nfloat SDF (vec3 p)\n{\n    p.y += sin(iTime)*0.1;\n    p.xz *= rot(iTime*0.2);\n\n    return max(cut_planes(p),box(p,vec3(1.)));\n}\n\nvec3 getnorm (vec3 p)\n{\n    vec2 eps = vec2(0.001,0.);\n    return normalize(SDF(p)-vec3(SDF(p-eps.xyy),SDF(p-eps.yxy),SDF(p-eps.yyx)));\n}\n\nfloat spec (vec3 rd, vec3 l, vec3 n)\n{\n    vec3 h = normalize(l-rd);\n    float dotNH = dot(h, n);\n    return pow(max(dotNH,0.), 10.);\n}\n\nfloat fresnel (vec3 rd, vec3 n, float p)\n{return pow(clamp(1.-dot(-rd,n),0.,1.), p);}\n\nfloat lighting (vec3 n, vec3 l)\n{return max(dot(n,l),0.);}\n\nvec3 palette (float t)\n{\n    vec3 a,b = vec3(0.7);\n    vec3 c = vec3(.5);\n    vec3 d = vec3(0.,0.8,0.2);\n    return a+b*cos(TAU*(c*t+d));\n}\n\nvec3 background (vec2 uv, float detail)\n{\n    vec2 uu = uv;\n    \n    uv.y *= detail; \n    float horizon_id = floor(uv.y)-0.5;\n    uv.y = fract(uv.y)-0.5;\n    \n    float m1 = smoothstep(0.05, 0.01,abs(uv.y)-(1.-abs(uv.x)*0.2)*(1./(detail*8.)));\n    float m2 = step(uv.x+hash11(horizon_id)*2.,0.5+exp(-fract(iTime*BPM)));\n    float horizon_m = clamp(m1*m2,0.,1.);\n    \n    uv = uu;\n    uv.x *= detail;\n    float vertical_id = floor(uv.x)-0.5;\n    uv.x = fract(uv.x)-0.5;\n    \n    float m3 = smoothstep(0.05, 0.01,abs(uv.x)-(1.-abs(uv.y))*(1./(detail*7.)));\n    float m4 = step(uv.y+hash11(vertical_id)*2.,0.5+exp(-fract(iTime*BPM)));\n    float vertical_m = clamp(m3*m4,0.,1.);\n    \n    float end_m = clamp(horizon_m + vertical_m,0.,1.);\n    \n\treturn vec3(.98)*(1.-end_m)\n        +vec3(hash11(horizon_id),hash11(horizon_id)*0.8,0.9)*(horizon_m)\n        + vec3(hash11(vertical_id)*0.2,0.8,hash11(vertical_id))*(vertical_m);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    vec3 ro = vec3(0.001,0.001,-2.1),\n        rd = normalize(vec3(uv,1.)),\n        p = ro,\n        l = normalize(vec3(-1.5,-1.,-2.5)),\n        col = background(abs(uv)-0.2, 5.);\n    \n    float shad = 0.;\n    bool hit = false;\n    \n    for (float i=0.; i<ITER; i++)\n    {\n        float d = SDF(p);\n        if (d<0.001)\n        {\n            hit = true;\n            shad = i/ITER;\n            break;\n        }\n        p += d * rd;\n    }\n    \n    if (hit)\n    {\n        vec3 n = getnorm(p);\n        col = palette(clamp(dot(-rd,n),0.,1.));\n        col += lighting(n,l);\n        col += spec(rd,n,l)*0.8;\n        col += fresnel(rd, n, 4.);\n        \n        col *= (1.-shad);\n    }\n    \n\t// vignetting (from iq)\n\tvec2 q = fragCoord.xy / iResolution.xy;\n\tcol *= .5 + 0.5 * pow(16. * q.x * q.y * (1. - q.x) * (1. - q.y), 0.2);\n    \n    // Output to screen\n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}