{"ver":"0.1","info":{"id":"Dts3WN","date":"1671781579","viewed":213,"name":"only two directions","username":"vivavolt","description":"A cute little Fibonacci sphere. It's a bit like my little [url=https://www.shadertoy.com/view/7lKSzw]Christmas tree shader[/url], but I rewrote it from scratch and used a slightly different approach.","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["glow","golf","twotweet"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Little Fibonacci Sphere\" by Xor. https://shadertoy.com/view/7tVSDh\n// 2022-12-23 07:29:48\n\n//twigl: https://t.co/Eqa9WrS2Yg\n//tweet: https://twitter.com/XorDev/status/1475524322785640455\n\n//Thanks to Fabrice for some tricks and ideas.\nvoid mainImage( out vec4 O, vec2 I)\n{\n    //Clear base color.\n    O-=O;\n    \n    //Iterate though 400 points and add them to the output color.\n    for(float i=-1.; i<1.; i+=9e-3)\n    {\n        vec2 r = iResolution.xy, //A shortened resolution variable, because we use it twice.\n        p = cos(i*sin(iTime / 100. +10.)*2e2+iTime+vec2(0., 11.))*sqrt(1.-i*i);  //Rotate and scale xy coordinates.\n        O += (cos(i+vec4(3,3,3,3))+1.)*(1.-p.y) /      //Color and brightness.\n        dot(p=(I+I-r)/r.y+vec2(p.x,i)/(p.y+1.+1.*sin(iTime / 10.)),p)/1e4; //Project light point.\n    }\n}\n","name":"Image","description":"","type":"image"}]}