{"ver":"0.1","info":{"id":"NsyGWh","date":"1631398961","viewed":297,"name":"procedural solid wood [fork]","username":"jt","description":"Building on [url]https://www.shadertoy.com/view/XtyyDh[/url] by [url]https://www.shadertoy.com/user/antovsky[/url].\nTweaked colors, added shadows & ambient occlusion.","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["procedural","texture","wood","material"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/NsyGWh\n// procedural solid wood [fork]\n// Playing around with wood material (2021 jt)\n// building on iq's raymarching & antovsky's wood material:\n// tweaked colors, added shadows & ambient occlusion.\n\n// material from https://www.shadertoy.com/view/XtyyDh procedural solid wood by antovsky\n\n#define PI 3.14159265359\n#define TAU (2.0*PI)\n\nvec4 quat(vec3 axis, float angle) { return vec4(axis*sin(angle*0.5), cos(angle*0.5)); }\nvec4 quat_i() { return vec4(0,0,0,1); }\nvec4 quat_conj(vec4 q) { return vec4(-q.xyz,q.w); }\nvec4 quat_mul(vec4 a, vec4 b) { return vec4(cross(a.xyz,b.xyz) + a.xyz*b.w + b.xyz*a.w, a.w*b.w - dot(a.xyz,b.xyz)); }\nvec3 quat_mul(vec4 q, vec3 v) { return v-2.0*cross(cross(q.xyz,v)-q.w*v,q.xyz); }\n\nfloat hash(vec2 p)  // replace this by something better\n{\n    p  = 50.0*fract( p*0.3183099 + vec2(0.71,0.113));\n    return -1.0+2.0*fract( p.x*p.y*(p.x+p.y) );\n}\n\nfloat noise( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\n    vec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( hash( i + vec2(0.0,0.0) ),\n                     hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ),\n                     hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\nfloat noise( in float p )\n{\n    return noise(vec2(p, 0.0));\n}\n\n\nfloat hash(vec3 p)  // replace this by something better\n{\n    p  = fract( p*0.3183099+.1 );\n    p *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\n    return mix(mix(mix( hash(p+vec3(0,0,0)),\n                        hash(p+vec3(1,0,0)),f.x),\n                   mix( hash(p+vec3(0,1,0)),\n                        hash(p+vec3(1,1,0)),f.x),f.y),\n               mix(mix( hash(p+vec3(0,0,1)),\n                        hash(p+vec3(1,0,1)),f.x),\n                   mix( hash(p+vec3(0,1,1)),\n                        hash(p+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\nvec3 texture_wood(vec3 pos) {\n    pos = quat_mul(quat(vec3(1,0,0),-0.0), pos);\n    //pos.z -= 1.0;\n    vec2 core = vec2(cos(pos.z), sin(pos.z))*0.1;\n    pos.xy -= core;\n\n    float r = length(pos.xy);\n    float a = (TAU/2.0 + atan(pos.x,pos.y)) / TAU;\n\n    float r_noise = noise(vec2(cos(a*TAU*2.0), sin(a*TAU*2.0)));\n    r_noise += noise(vec2(10.0) + vec2(cos(a*TAU*4.0), sin(a*TAU*4.0))) * 0.5; // squigglyness\n    r_noise += noise(vec2(100.0) + vec2(cos(a*TAU*8.0), sin(a*TAU*8.0))) * 0.4; // squigglyness\n    r_noise += noise(vec2(1000.0) + vec2(cos(a*TAU*16.0), sin(a*TAU*16.0))) * 0.2; // squigglyness\n\n    r_noise += noise(pos.z*0.5)*3.0; // knottyness\n\n    r_noise *= noise(r*3.0)*5.0; // whorlyness\n    r += r_noise*0.05*clamp(r,0.0,1.0); // scale and reduce at center\n\n    vec3 col = vec3(1.0,0.65,0.35);\n    //float c = 0.5 + 0.5*sin(r*100.0); // 100 rings per meter ~ 1cm rings\n    float c = fract(r*5.0);\n    //c = smoothstep(0.0,1.0, c/0.15) * smoothstep(1.0,0.0, (c-0.15)/0.85);\n    c = smoothstep(0.0,1.0, c/0.15) * smoothstep(1.0,0.0, sqrt(clamp((c-0.15)/0.85,0.0,1.0)));\n    //c = smoothstep(0.0,1.0, c/0.15) * smoothstep(1.0,0.0, pow(clamp((c-0.15)/0.85,0.0,1.0), 0.25));\n    col = mix(col, vec3(0.4,0.1,0.0), c); // ring gradient\n    col = mix(col, col*vec3(0.8, 0.5, 0.5), noise(r*20.0)); // ring-to-ring brightness\n\n    return col;\n}\n\n// Alternative, suggested by Shane: \"Cheap, low quality, wood grain shade. Made up, in under two minutes.\"\nvec3 texture_wood2(vec3 p)\n{\n    p /= 2.;\n    \n    vec3 p0 = p;\n    \n    \n    // Old trick to mix things up. I use it too much. \n    p = sin(p*4.3 + cos(p.yzx*6.7));\n\n    \n    float n = dot(p + sin(p*13.)*.03, vec3(3.));\n    \n    float grain = 1.-abs(dot(sin(p0*120.5 + n*6.283 + sin(p0.zxy*121.3)), vec3(.333)));\n\n    \n    // Smooth fract. Old trick. Like fract, but smoother.\n    n = fract(n + fract(n*4.)*.1);\n    n = min(n, n*(1.-n)*6.); // The final term controls the smoothing.\n    \n    float w = min(n*.85 + grain*.2, 1.);\n    \n    // Quick coloring. Needs work. \n    return mix(vec3(.5, .15, .025), vec3(.75, .3, .1)*2., w*.75 + .25)*(w*.6 + .4);\n    \n    //return vec3(w);\n}\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n\nfloat halfspace(vec3 p)\n{\n    return p.z + 1.2;\n}\n\nfloat sphere(vec3 p)\n{\n    return length(p) - 1.0;\n}\n\nfloat box(vec3 p)\n{\n    vec3 d = abs(p) - 1.0;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat cylinder( vec3 p )\n{\n    vec2 d = abs(vec2(length(p.xy),p.z)) - vec2(1,1);\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat map(vec3 p)\n{\n    return min(min(box(p+vec3(+1.0,0.0,0.0)), cylinder(p+vec3(-1.0,0.0,0.0))), halfspace(p));\n    //return min(min(box(p+vec3(+1.0,0.0,0.0)), sphere(p+vec3(-1.0,0.0,0.0))), halfspace(p));\n    //return box(p);\n}\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal( vec3 p )\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*map( p + k.xyy*h ) +\n                      k.yyx*map( p + k.yyx*h ) +\n                      k.yxy*map( p + k.yxy*h ) +\n                      k.xxx*map( p + k.xxx*h ) );\n}\n\nfloat trace(vec3 ro, vec3 rd)\n{\n    for(float t = 0.0; t < DIST_MAX;)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON)\n            return t;\n        t += h;\n    }\n    return DIST_MAX;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat shadow( in vec3 ro, in vec3 rd, float mint, float maxt )\n{\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t);\n        if( h<EPSILON )\n            return 0.0;\n        t += h;\n    }\n    return 1.0;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor );\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\n#define pi 3.1415926\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 ndc = 2.0 * uv - 1.0;\n    ndc.x *= float(iResolution.x) / float(iResolution.y);\n    float mx = 6.28 * float(iMouse.x) / float(iResolution.x);\n    float my = pi / 2.0 + pi / 2.0 * float(iMouse.y) / float(iResolution.y);\n    mx = (iMouse.x != 0.0) ? mx : 6.28 * fract(iTime * 0.1);\n    my = (iMouse.y != 0.0) ? my : pi / 2.0;\n\n    mat2 R = mat2(vec2(cos(mx), sin(mx)), vec2(-sin(mx), cos(mx)));\n    vec3 ro = vec3(0.0, 0.0, -5.0 );//vec3(0.0, -10.0 * my, 0.0);\n    //mat2 S = mat2(vec2(0.0, 1.0), vec2(-1.0, 0.0));\n    mat2 S = mat2(vec2(cos(my), sin(my)), vec2(-sin(my), cos(my)));\n    ro.yz=S*ro.yz;\n    ro.xy = R * ro.xy;\n\n    vec3 rd = normalize(vec3(0.5 * ndc.xy, 1.0)); // NOTE: omitting normalization results in clipped edges artifact\n    rd.yz=S*rd.yz;\n    rd.xy = R * rd.xy;\n\n    float dist = trace(ro, rd);\n    vec3 dst = ro + rd * dist;\n    vec3 n = normal(dst);\n\n    vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n    vec3 ambient = vec3(0.4);\n    float brightness = max(dot(lightdir, n), 0.0);\n    brightness *= shadow(ro+rd*dist+n*0.001,lightdir, 0.01, DIST_MAX ); // XXX artifacts on cylinder XXX\n    //vec3 color = (n * 0.5 + 0.5);\n    vec3 color = mix(vec3(0.1), texture_wood(dst), step(-1.0, dst.z));\n    color = (ambient * calcAO(dst, n) + brightness) * color;\n\n    fragColor = mix(vec4(color, 1.0), vec4(0.0), step(DIST_MAX, dist));\n    fragColor = sqrt(fragColor); // approximate gamma\n}\n","name":"Image","description":"","type":"image"}]}