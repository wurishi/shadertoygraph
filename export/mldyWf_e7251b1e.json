{"ver":"0.1","info":{"id":"mldyWf","date":"1699784331","viewed":33,"name":"Circle rolling on a hexagon","username":"Proger","description":"Simple 2d animation","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2dsdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdc(vec2 p, float r){ return length(p) - r; }\nfloat sdh( in vec2 p, in float r )\n{\n    const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n    p = abs(p);\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n    return length(p)*sign(p.y);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    float BS = (abs(cos(iTime/3.)) + .3) * 0.1;\n    float CR = (abs(sin(iTime/2.))+ .3) * 0.1;\n    vec2 uv = (fragCoord-iResolution.xy*.5)/iResolution.x;\n    vec3 col = vec3(0);\n    float sdB = sdh(uv, BS);\n    vec2 rt = vec2(cos(iTime), sin(iTime));\n    vec2 cP = rt*(BS*sqrt(2.)+CR);\n    float cr = sdh(cP, BS)-CR;\n    vec2 cPL = rt*(BS*sqrt(2.)+CR-cr);\n    col += .001 / vec3(sdB)*vec3(1, 0, 0);\n    col += .001 / vec3(sdc(uv - cPL, CR))*vec3(0, 0, 1);\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}