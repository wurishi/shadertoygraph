{"ver":"0.1","info":{"id":"WscBR7","date":"1604601280","viewed":72,"name":"PathTracing Attempt 1","username":"Pjbomb2","description":"First decent attempt at path tracing, going mainly off of/from IQ's tutorials and projects\nWASD and mouse for controls, and clicking resets the image to black\n","likes":2,"published":1,"flags":48,"usePreview":0,"tags":["raymarching","pathtracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//One question to anyone who feels like answering, how could I make this run better?\n//also where would be a good place to start learning refraction and caustics with path tracing?\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t\n    vec3 col = vec3(0.0);\n    \n   if( iFrame>0 )\n    {\n        col = texture( iChannel2, uv ).xyz;\n        col /= float(iFrame);\n        col = pow( col, vec3(0.4545) );\n    }\n\n    // color grading and vigneting\n    col = pow( col, vec3(0.8) ); col *= 1.6; col -= vec3(0.03,0.02,0.0);\n    \n    col *= 0.5 + 0.5*pow( 16.0*uv.x*uv.y*(1.0-uv.x)*(1.0-uv.y), 0.1 );\n    \n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Created by genis sole - 2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International.\n\n#define store(P, V) if (all(equal(ivec2(fragCoord), P))) fragColor = V\n#define load(P) texelFetch(iChannel1, ivec2(P), 0)\n#define key(K)  step(0.5, texelFetch(iChannel0, ivec2(K, 0), 0).x)\n\nconst ivec2 MEMORY_BOUNDARY = ivec2(4, 3);\n\nconst ivec2 POSITION = ivec2(1, 0);\n\nconst ivec2 VMOUSE = ivec2(1, 1);\nconst ivec2 PMOUSE = ivec2(2, 1);\n\nconst ivec2 TARGET = ivec2(0, 2);\n\nconst ivec2 RESOLUTION = ivec2(3, 1);\n\n// Keyboard constants definition\nconst int KEY_BSP   = 8;\nconst int KEY_SP    = 32;\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\nconst int KEY_A     = 65;\nconst int KEY_B     = 66;\nconst int KEY_C     = 67;\nconst int KEY_D     = 68;\nconst int KEY_E     = 69;\nconst int KEY_F     = 70;\nconst int KEY_G     = 71;\nconst int KEY_H     = 72;\nconst int KEY_I     = 73;\nconst int KEY_J     = 74;\nconst int KEY_K     = 75;\nconst int KEY_L     = 76;\nconst int KEY_M     = 77;\nconst int KEY_N     = 78;\nconst int KEY_O     = 79;\nconst int KEY_P     = 80;\nconst int KEY_Q     = 81;\nconst int KEY_R     = 82;\nconst int KEY_S     = 83;\nconst int KEY_T     = 84;\nconst int KEY_U     = 85;\nconst int KEY_V     = 86;\nconst int KEY_W     = 87;\nconst int KEY_X     = 88;\nconst int KEY_Y     = 89;\nconst int KEY_Z     = 90;\nconst int KEY_COMMA = 188;\nconst int KEY_PER   = 190;\n\n#define KEY_BINDINGS(FORWARD, BACKWARD, RIGHT, LEFT) const int KEY_BIND_FORWARD = FORWARD; const int KEY_BIND_BACKWARD = BACKWARD; const int KEY_BIND_RIGHT = RIGHT; const int KEY_BIND_LEFT = LEFT;\n\n#define ARROWS  KEY_BINDINGS(KEY_UP, KEY_DOWN, KEY_RIGHT, KEY_LEFT)\n#define WASD  KEY_BINDINGS(KEY_W, KEY_S, KEY_D, KEY_A)\n#define ESDF  KEY_BINDINGS(KEY_E, KEY_D, KEY_F, KEY_S)\n\n#define INPUT_METHOD  WASD\nvec2 KeyboardInput() {\n    INPUT_METHOD\n    \n\tvec2 i = vec2(key(KEY_BIND_RIGHT)   - key(KEY_BIND_LEFT), \n                  key(KEY_BIND_FORWARD) - key(KEY_BIND_BACKWARD));\n    \n    float n = abs(abs(i.x) - abs(i.y));\n    return i * (n + (1.0 - n)*inversesqrt(2.0));\n}\n\nvec3 CameraDirInput(vec2 vm) {\n    vec2 m = vm/iResolution.x;\n    m.y = -m.y;\n    \n    mat3 rotX = mat3(1.0, 0.0, 0.0, 0.0, cos(m.y), sin(m.y), 0.0, -sin(m.y), cos(m.y));\n    mat3 rotY = mat3(cos(m.x), 0.0, -sin(m.x), 0.0, 1.0, 0.0, sin(m.x), 0.0, cos(m.x));\n    \n    return (rotY * rotX) * vec3(KeyboardInput(), 0.0).xzy * 10.0;\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    if (any(greaterThan(ivec2(fragCoord), MEMORY_BOUNDARY))) return;\n    \n    fragColor = load(fragCoord);\n    \n    vec2 resolution = load(RESOLUTION).xy;\n    store(RESOLUTION, vec4(iResolution.xy, 0.0, 0.0));\n    \n    if (iTime == 0.0 || iFrame == 0 || any(notEqual(iResolution.xy, resolution))) {\n        store(POSITION, vec4(0.0, 0.0, 0.0, 0.0));\n        store(TARGET, vec4(0.0, 0.0, 0.0, 0.0));\n        store(VMOUSE, vec4(0.0));\n        store(PMOUSE, vec4(0.0));\n        \n        return;\n    }\n\n    vec3 target      = load(TARGET).xyz;   \n    vec3 position    = load(POSITION).xyz;\n    vec2 pm          = load(PMOUSE).xy;\n    vec3 vm          = load(VMOUSE).xyz;\n    \n    vec3 ptarget = target;\n    target += CameraDirInput(vm.xy) * iTimeDelta * 5.0;\n    \n\n    \n    position += (0.1 * target - position);\n    \n    store(TARGET, vec4(target, 0.0));\n    store(POSITION, vec4(position, 0.0));\n    \n    if (any(greaterThan(iMouse.zw, vec2(0.0)))) {\n    \tstore(VMOUSE, vec4(pm + (iMouse.zw - iMouse.xy), 1.0, 0.0));\n    }\n    else if (vm.z != 0.0) {\n    \tstore(PMOUSE, vec4(vm.xy, 0.0, 0.0));\n    }\n\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define load(P) texelFetch(iChannel1, ivec2(P), 0)\nconst ivec2 VMOUSE = ivec2(1, 1);\n\nconst float PI = 3.141592;\n\nconst ivec2 POSITION = ivec2(1, 0);\n\nvec3 calcColor(in float mat, out float refl, out float emmis) {\n    \n    vec3 col = 0.2 + 0.2*sin( mat*2.0 + vec3(0.0,1.0,2.0) );\n    refl = 0.5;\n    if(mat == 1.0) {\n        emmis = 10000.0;\n    }else {emmis = 0.0;}\n    return col;\n    \n    \n}\n\nfloat hash(float seed)\n{\n    return fract(sin(seed)*43758.5453 );\n}\n\nvec3 uniformVector( in float seed)\n{\n    float a = 3.141593*hash( 78.233 + seed);\n    float b = 6.283185*hash( 10.873 + seed);\n    return vec3( sin(b)*sin(a), cos(b)*sin(a), cos(a) );\n}\n\n\nvec3 cosineDirection( in float seed, in vec3 nor)\n{\n    float u = hash( 78.233 + seed);\n    float v = hash( 10.873 + seed);\n\n    \n \n        float a = 6.2831853 * v;\n        u = 2.0*u - 1.0;\n        return normalize( nor + vec3(sqrt(1.0-u*u) * vec2(cos(a), sin(a)), u) );\n}\n\n\n\n\n\n\nfloat opSubtraction( float d1, float d2 )\n{\n    return (-d1 > d2) ? -d1:d2;\n}\n\nvec2 find_nearest(vec2 d1, vec2 d2) {\n    return (d1.x < d2.x) ? d1:d2;\n}\n\nfloat sdPlane( vec3 p, vec3 n, float h )\n{\n  return dot(p,n) + h;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n\nvec2 map(in vec3 p) {\n    \n vec2 ret = vec2(1000, 1);\n\n\n/*\n    //ret = find_nearest(ret, vec2(vec2(opSubtraction(sdBox(p - vec3(0, 6, 0), vec3(2,2,2)), sdBox(p - vec3(0, 6, 0), vec3(10,1,10))), 5)));\n    ret = find_nearest(ret, vec2(vec2(sdBox(p - vec3(0, 6, 0), vec3(10,1,10)), 2)));\n    ret = find_nearest(ret, vec2(vec2(sdBox(p - vec3(0, -6, 0), vec3(10,1,10)), 2)));\n    ret = find_nearest(ret, vec2(vec2(sdBox(p - vec3(0, 0, 6), vec3(10,10,1)), 3)));\n    ret = find_nearest(ret, vec2(vec2(sdBox(p - vec3(0, 0, -6), vec3(10,10,1)), 3)));\n    ret = find_nearest(ret, vec2(vec2(sdBox(p - vec3(6, 0, 0), vec3(1,10,10)), 4)));\n    ret = find_nearest(ret, vec2(vec2(sdBox(p - vec3(-6, 0, 0), vec3(1,10,10)), 4))); \n*/\n    ret = find_nearest(ret, vec2(sdBox(p - vec3(0, 0, 1), vec3(0.1,0.1,0.1)), 1));\n  \n    \n    \n    \n        vec3 w = p;\n    vec3 q = p;\n\n    q.xz = mod( q.xz+1.0, 2.0 ) -1.0;\n    \n    float d = sdBox(q,vec3(1.0));\n    float s = 1.0;\n    for( int m=0; m<1; m++ )\n    {\n        float h = float(m)/6.0;\n\n        p =  q - 0.5*sin( abs(p.y) + float(m)*3.0+vec3(0.0,3.0,1.0));\n\n        vec3 a = mod( p*s, 2.0 )-1.0;\n        s *= 4.0;\n        vec3 r = abs(1.0 - 3.0*abs(a));\n\n        float da = max(r.x,r.y);\n        float db = max(r.y,r.z);\n        float dc = max(r.z,r.x);\n        float c = (min(da,min(db,dc))-1.0)/s;\n\n        d = max( c, d );\n   }\n\n    \n   float d1 = length(w-vec3(0.22,0.35,0.4)) - 0.09;\n   d = min( d, d1 );\n\n   float d2 = w.y + 0.22;\n   d =  min( d,d2);\n\n    \n   ret = find_nearest(ret, vec2(d, 2.1));\n\n    \n    return ret;\n    \n}\n\n\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec3 eps = vec3(0.0001,0.0,0.0);\n\n    return normalize( vec3(\n      map( pos+eps.xyy ).x - map( pos-eps.xyy ).x,\n      map( pos+eps.yxy ).x - map( pos-eps.yxy ).x,\n      map( pos+eps.yyx ).x - map( pos-eps.yyx ).x ) );\n}\n\n\nfloat shadow( in vec3 ro, in vec3 rd )\n{\n    float res = 0.0;\n    \n    float tmax = 12.0;\n    \n    float t = 0.001;\n    for(int i=0; i<40; i++ )\n    {\n        float h = map(ro+rd*t).x;\n        if( h<0.0001 || t>tmax) break;\n        t += h;\n    }\n\n    if( t>tmax ) res = 1.0;\n    \n    return res;\n}\n\nfloat intersect(in vec3 ro, in vec3 rd) {\n\tfloat res = -1.0;\n    float tmax = 12.0;\n    float t = 0.01;\n    for(int i = 0; i < 64; i++) {\n    \tfloat h = map(ro+rd*t).x;\n        if((h<0.0001) || (t>tmax)) break;\n        t += h;\n            \n    }\n    if(t<tmax) res = t;\n    \n    return res;\n    \n}\n\nfloat intersect2(in vec3 ro, in vec3 rd) {\n\tfloat res = -1.0;\n    float tmax = 12.0;\n    float t = 0.01;\n    for(int i = 0; i < 128; i++) {\n    \tfloat h = map(ro+rd*t).x;\n        if((h<0.0001) || (t>tmax)) break;\n        t += h;\n            \n    }\n    if(t<tmax) res = t;\n    \n    return res;\n    \n}\n\nvec3 sunDir = normalize(vec3(-0.3,1.3,0.1));\n\n\nvec3 calcFinalColor(vec3 ro, vec3 rd, float sa) {\n    vec3 colorMask = vec3(1.0);\n    vec3 accumulatedColor = vec3(0.0);\n    vec3 oro = ro;\n    vec3 ord = rd;\n    vec3 emmiscol = vec3(0.0);\n    vec3 emmisloc = vec3(0.0);\n    \n        float fdis = 0.0;\n    \n    for(int bounce = 0; bounce <4; bounce++) {\n    float t = intersect(ro, rd);\n                     if( t < 0.0 )\n        {\n            //if( bounce==0 ) return mix( 0.05*vec3(0.9,1.0,1.0), skyCol, smoothstep(0.1,0.25,rd.y) );\n            if( bounce==0 ) { fdis=16.0; accumulatedColor = mix( 0.05*vec3(0.9,1.0,1.0), vec3(1.0), smoothstep(0.1,0.25,rd.y) ); break; }\n            //fdis = 16.0;\n            break;\n        }\n    if(bounce == 0) fdis = t;\n    vec3 pos = ro+rd*t;\n    vec3 norm = calcNormal(pos);\n    float refl = 0.0;\n    float emmis = 0.0;\n    vec3 surfaceColor = calcColor(map(pos).y, refl, emmis);\n    colorMask *= surfaceColor;\n    vec3 iColor = vec3(0.0);\n        \n        \n                float isDif = 0.5;\n        if( hash(sa + 1.123 + 7.7*float(bounce)) < isDif )\n        {\n           rd = cosineDirection(76.2 + 73.1*float(bounce) + sa + 17.7*float(iFrame), norm);\n        }\n        else\n        {\n            float glossiness = 0.2;\n            rd = normalize(reflect(rd, norm)) + uniformVector(sa + 111.123 + 65.2*float(bounce)) * glossiness;\n        }\n    \n    iColor = (emmis * surfaceColor) + 2.0 * accumulatedColor * dot(norm, rd);\n        accumulatedColor += colorMask * iColor;\n        \n        if(emmis > 100.0) {\n            emmiscol = surfaceColor;\n            emmisloc = pos;\n                }\n        ro = pos;\n    }\n    \n    float ff = exp(-0.01*fdis*fdis);\n    accumulatedColor *= ff; \n    accumulatedColor += (1.0-ff)*0.05*vec3(0.9,1.0,1.0);\n    \n           // volumetrics\n   float dt = 0.8;\n   float acc = 0.0;\n   for( int i=0; i<5; i++ )\n   {\n       float t = fdis*hash(sa+1.31+13.731*float(i)+float(iFrame)*7.773);\n       vec3 pos = oro + ord*t;\n       acc += dt*shadow( pos, normalize(pos - emmisloc) );//*exp(-0.25*t);\n   }\n    accumulatedColor += vec3(0.1)*pow(acc,2.0)*vec3(1.0)*0.4;\n    \n    \n    \n    return accumulatedColor;\n    \n}\n\n\n\n\nvoid Camera(in vec2 fragCoord, out vec3 ro, out vec3 rd) \n{\n    ro = load(POSITION).xyz;\n    vec2 m = load(VMOUSE).xy/iResolution.x;\n    m.y = -m.y;\n    \n    float a = 1.0/max(iResolution.x, iResolution.y);\n    rd = normalize(vec3((fragCoord - iResolution.xy*0.5)*a, 0.5));\n    \n    mat3 rotX = mat3(1.0, 0.0, 0.0, 0.0, cos(m.y), sin(m.y), 0.0, -sin(m.y), cos(m.y));\n    mat3 rotY = mat3(cos(m.x), 0.0, -sin(m.x), 0.0, 1.0, 0.0, sin(m.x), 0.0, cos(m.x));\n    \n    rd = (rotY * rotX) * rd;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     vec2 mo = iMouse.xy/iResolution.xy;\n\tfloat time = 32.0 + iTime*1.5;\n    float sa = hash( dot( fragCoord, vec2(12.9898, 78.233) ) + 1113.1*float(iFrame) );\n    \n\n    vec3 ro = vec3(0.0);\n    vec3 rd = vec3(0.0);\n    Camera(fragCoord, ro, rd);\n    \n\tvec3 col = texture( iChannel2, fragCoord/iResolution.xy ).xyz;\n    if( iFrame==0 ) col = vec3(0.0);\n     col += calcFinalColor(ro,rd, sa);//vec3(intersect(ro,rd));\n    \n        if(iMouse.z < 1.0){\n    col += calcFinalColor( ro, rd, sa );\n    }else {col = calcFinalColor( ro, rd, sa);}\n    // Output to screen\n    // Output to screen\n\n    fragColor = vec4(col,1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}