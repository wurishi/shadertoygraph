{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"\n#define MAXITER     255\n#define THRESHOLD   42.\n#define STRENGTH\t0.1\n#define ANIM_SPEED\t2.1\n#define RE_SPEED\t0.2\n#define IM_SPEED\t0.1\n\n\nconst vec2 fracCenter = vec2(-1.0017, 0.312);\nconst float time = 50.;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{       \n    // float s = 0.01;\n    float s = log(exp(1.0 / (10. + pow(time, ANIM_SPEED))));\n\tvec2 b = vec2(fracCenter.x - 0.5 * s * iResolution.x,\n                  fracCenter.y - 0.5 * s * iResolution.y);\n\n    vec2 z = vec2( STRENGTH - 2. * STRENGTH * sin(iTime * RE_SPEED),\n                  -STRENGTH + 2. * STRENGTH * cos(iTime * IM_SPEED));\n    vec2 c = s * fragCoord.xy + b;\n    vec4 col = vec4(0., 0., 0., 1.);\n    \n    int i;\n    for (int i = 0; i < MAXITER; ++i) {\n        z = vec2(z.x * z.x - z.y * z.y, 2. * z.x * z.y) + c;\n        \n        col.b = 0.5 + 0.2 * sin(iTime * sin(0.00001 * iTime));\n        col.g = float(i) * 0.03;\n        col.r = 0.5 + 0.2 * cos(iTime * cos(0.00001 * iTime));\n        \n        if (dot(z, z) > THRESHOLD) {\n            break;\n        }\n    }\n    \n    vec2 rPos = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n    vec4 tex = texture(iChannel0, rPos);\n    \n    col.r = 0.96 * col.r  + 0.04 * sin(tex.r * iTime);\n    col.g = 0.98 * col.g  + 0.02 * sin(tex.g * iTime * 0.6);\n    col.b = 0.95 * col.b  + 0.05 * sin(tex.b * iTime * 0.8);\n   \n    \n    fragColor = col;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Xll3RS","date":"1423055784","viewed":162,"name":"scrub-marine","username":"silentlamb","description":"Animation with fractals.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractals"],"hasliked":0,"parentid":"","parentname":""}}