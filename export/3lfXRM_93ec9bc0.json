{"ver":"0.1","info":{"id":"3lfXRM","date":"1562334676","viewed":126,"name":"random- ejemplo-v2","username":"jorge2017a1","description":"random- ejemplo-v1","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["random"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\n// 2D Random\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n/*void main() {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy;\n\n    // Scale the coordinate system to see\n    // some noise in action\n    vec2 pos = vec2(st*5.0);\n\n    // Use the noise function\n    float n = noise(pos);\n\n    gl_FragColor = vec4(vec3(n), 1.0);\n}\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\t\n    vec2 pos = vec2(uv*5.0+iTime/0.50);\n    \n    pos.x = uv.x*5.0+iTime/0.50;\n    pos.y = uv.y+iTime/1.50;\n\n    // Use the noise function\n    float n = noise(pos);\n\n    //gl_FragColor = vec4(vec3(n), 1.0);\n    \n    \n    \n    // Output to screen\n    //fragColor = vec4(col,1.0);\n    //fragColor = vec4(vec3(n)-col,1.0);\n    fragColor = vec4(vec3(n*col),1.0);\n}","name":"Image","description":"","type":"image"}]}