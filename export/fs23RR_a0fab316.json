{"ver":"0.1","info":{"id":"fs23RR","date":"1616952335","viewed":89,"name":"Midterm SS2","username":"GiangLe","description":"remove green screen by video","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["removegreen"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Fragment Shader: trả về chỉ số 4 màu rbg và độ trong suốt a\n//USing ChromaKey \n//conversion between rgb (read,green,blue) and YUV\n//dùng hệ màu YUV gồm độ sáng Y và thành phần màu U,V. Tính theo RGB cho màu đúng hơn\n\n//hệ số chuyển đổi:\nmat4 RGBtoYUV = mat4(0.257,  0.439, -0.148, 0.0,\n                     0.504, -0.368, -0.291, 0.0,\n                     0.098, -0.071,  0.439, 0.0,\n                     0.0625, 0.500,  0.500, 0.0 );\n\n//green color to be removed\nvec4 chromaKey = vec4(0.05, 0.63, 0.14, 1); //rbga của green screen\n\n//dùng để xác định foreground hay background\n//if the current distance from pixel color to chromaKey is smaller then maskRange.x we use background,\n//if the current distance from pixel color to chromaKey is bigger then maskRange.y we use foreground,\n//else, we blend them\n\nvec2 maskRange = vec2(0.005, 0.26);\n\n//Tính khoảng cách màu trong mặt phẳng UV và so sánh khoảng cách với maskRange.x,y để xác định \nfloat colorclose(vec3 yuv, vec3 keyYuv, vec2 tol)\n{\n    float tmp = sqrt(pow(keyYuv.g - yuv.g, 2.0) + pow(keyYuv.b - yuv.b, 2.0));//tính dựa vào tọa độ\n    if (tmp < tol.x)\n      return 0.0;\n   \telse if (tmp < tol.y)\n      return (tmp - tol.x)/(tol.y - tol.x);\n   \telse\n      return 1.0;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 fragPos =  fragCoord.xy / iResolution.xy; //lấy tọa độ của pixel hiện tại, chia cho tọa độ dựa theo kích thước màn hình\n    vec4 texColor0 = texture(iChannel0, fragPos); //lấy dữ liệu video và tọa độ (x,y) của iChannel0 và trả về màu của các tọa độ đó dưới dạng matrix 4\n    vec4 texColor1 = texture(iChannel1, fragPos);\n\n    //convert from RGB to YCvCr/YUV\n\tvec4 keyYUV =  RGBtoYUV * chromaKey; \n    vec4 yuv = RGBtoYUV * texColor0; //màu anh bạn cầm kiếm\n\n    float mask = 1.0 - colorclose(yuv.rgb, keyYUV.rgb, maskRange); \n    fragColor = max(texColor0 - mask * chromaKey, 0.0) + texColor1 * mask;//set screen pixel \n}\n","name":"Image","description":"","type":"image"}]}