{"ver":"0.1","info":{"id":"7lBGzt","date":"1624479085","viewed":82,"name":"Slice unit square","username":"Envy24","description":"Some slicing (masking) functions for showing multiple results on screen.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["triangles","square","slice","unit"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 color = vec4(1.0, 0.0, 0.0, 1.0);\n    \n    float t = 0.0 + mod(iTime, 6.0);\n    \n    switch (\n        int(t >= 1.0) |\n       (int(t >= 2.0) << 1) |\n       (int(t >= 3.0) << 2) |\n       (int(t >= 4.0) << 3) |\n       (int(t >= 5.0) << 4))\n    {\n        case 0: color = sliceUnitSquareToTwoTriangles(uv.x, uv.y); break;\n        case 1: color = sliceUnitSquareToFourTriangles(uv.x, uv.y); break;\n        case 3: color = sliceUnitSquareToEightTriangles(uv.x, uv.y); break;\n        case 7: color = sliceUnitSquareToTwoRectangles(uv.x, uv.y); break;\n        case 15: color = sliceUnitSquareToThreeRectangles(uv.x, uv.y); break;\n        default: color = sliceUnitSquareToThreeRegions(uv.x, uv.y, 0.5); break;\n    }\n    \n    // Output to screen\n    fragColor = color;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec4 sliceUnitSquareToTwoTriangles(\n    float x, // in range [0.0; 1.0]\n    float y) // in range [0.0; 1.0]\n{\n    // f0(x) = x;\n    // f1(x) = 1.0 - x;\n\n    y = smoothstep(0.0, 1.0, y); // Some curvature.\n\n    int case_ =\n        int(y >= x); // OR int(y >= (1.0 - x));\n        \n    switch (case_)\n    {\n        case 0: return vec4(1.0, 0.0, 0.0, 1.0); break;\n        default: break;\n    }\n\n    return vec4(1.0, 0.0, 1.0, 1.0);\n}\n\nvec4 sliceUnitSquareToFourTriangles(\n    float x, // in range [0.0; 1.0]\n    float y) // in range [0.0; 1.0]\n{\n    // f0(x) = x;\n    // f1(x) = 1.0 - x;\n \n    //y = smoothstep(0.0, 1.0, y); // Some curvature.             \n\n    int case_ =\n        int(y >= (1.0 - x)) |\n        (int(y < x) << 1);\n        \n    switch (case_)\n    {\n        case 0: return vec4(1.0, 0.0, 0.0, 1.0); break;\n        case 1: return vec4(0.0, 1.0, 0.0, 1.0); break;\n        case 2: return vec4(0.0, 0.0, 1.0, 1.0); break;\n        default: break;\n    }\n\n    return vec4(1.0, 0.0, 1.0, 1.0);\n}\n\nvec4 sliceUnitSquareToEightTriangles(\n    float x, // in range [0.0; 1.0]\n    float y) // in range [0.0; 1.0]\n{\n    // f0(x) = x;\n    // f1(x) = 1.0 - x;\n       \n    //y = smoothstep(0.0, 1.0, y);   // Some curvature.\n\n    int case_ =\n        int(y >= (1.0 - x)) |\n        (int(y < x) << 1) |\n        (int(x >= 0.5) << 2) |\n        (int(y < 0.5) << 3);\n        \n    switch (case_)\n    {\n        /* TOP */\n        case 0: return vec4(0.0,       0.0, 1.0, 1.0); break;  \n        case 1: return vec4(1.0 / 3.0, 0.0, 1.0, 1.0); break;\n        case 5: return vec4(2.0 / 3.0, 0.0, 1.0, 1.0); break;\n        case 7: return vec4(1.0, 0.0,  1.0, 1.0); break;\n        \n        /* BOTTOM */\n        case 8:  return vec4(0.0,       0.0, 0.0, 1.0); break;\n        case 10: return vec4(1.0 / 3.0, 0.0, 0.0, 1.0); break;\n        case 14: return vec4(2.0 / 3.0, 0.0, 0.0, 1.0); break;\n        default: break;\n    }\n\n    return vec4(1.0, 0.0, 0.0, 1.0);\n}\n\nvec4 sliceUnitSquareToTwoRectangles(\n    float x, // in range [0.0; 1.0]\n    float y) // in range [0.0; 1.0]\n{\n    int case_ =\n        int(x >= 0.5); // OR int(y >= 0.5)\n        \n    switch (case_)\n    {\n        case 0: return vec4(1.0, 0.0, 0.0, 1.0); break;\n        default: break;\n    }\n\n    return vec4(0.0, 0.0, 1.0, 1.0);\n}\n\nvec4 sliceUnitSquareToThreeRectangles(\n    float x, // in range [0.0; 1.0]\n    float y) // in range [0.0; 1.0]\n{\n    x *= 3.0;\n    y *= 3.0;\n    \n    /* Aspect corrected \n        R = iResolution *\n    x = x / R.y * (R.y / R.x) * 3.0;\n    y /= R.y;\n    /* */\n    \n    int case_ =\n        int(x >= 1.0) |        // OR int(y >= 1.0)\n        (int(x >= 2.0) << 1);  // OR (int(y >= 2.0) << 1)\n        \n    switch (case_)\n    {\n        case 0: return vec4(1.0, 0.0, 0.0, 1.0); break;\n        case 1: return vec4(0.0, 1.0, 0.0, 1.0); break;\n        default: break;\n    }\n\n    return vec4(0.0, 0.0, 1.0, 1.0);\n}\n\nvec4 sliceUnitSquareToThreeRegions(\n    float x, // in range [0.0; 1.0]\n    float y, // in range [0.0; 1.0]\n    float t) // in range [0.0; 1.0]\n{\n    // f0(x) = x;\n    // f1(x) = 1.0 - x;\n \n    y = y*((1.0 - y) * (1.0 + t));\n    //y = smoothstep(0.0, 1.0, y);  // Some curvature.\n\n    int case_ =\n        int(y >= (1.0 - x)) |\n        (int(y < x) << 1);\n        \n    switch (case_)\n    {\n        case 0: return vec4(1.0, 0.0, 0.0, 1.0); break;\n        case 2: return vec4(0.0, 1.0, 0.0, 1.0); break;\n        default: break;\n    }\n\n    return vec4(.0, 0.0, 1.0, 1.0);\n}\n\n// ...","name":"Common","description":"","type":"common"}]}