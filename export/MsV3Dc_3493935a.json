{"ver":"0.1","info":{"id":"MsV3Dc","date":"1456892850","viewed":176,"name":" optical illusion2","username":"flush_11","description":"make optical illusion with noise function.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["noise","random","opticalillusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// optical illusion\n//@flush_11\n\n// 2D Random\nfloat random (in vec2 st) { \n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\n//http://thebookofshaders.com/11/\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners porcentages\n    return mix(a, b, u.x) + \n            (c - a)* u.y * (1.0 - u.x) + \n            (d - b) * u.x * u.y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 st = (2.0*fragCoord.xy-iResolution.xy) /min( iResolution.x,iResolution.y);\n    vec2 pos = vec2((st+vec2(-0.1))*2.0);\n    vec2 pos2 = vec2(st*8.0);\n\tfloat rand = random(pos);\n    float noise1 = noise(pos);\n    float noise2 = noise(pos2);\n    float d = distance(st/2.0, st);\n    float step = step(d, 0.25);\n    float c = (1.0-step)*noise2 + step*noise1;\n    vec3 color = vec3(c);\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}