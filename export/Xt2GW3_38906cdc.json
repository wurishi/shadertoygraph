{"ver":"0.1","info":{"id":"Xt2GW3","date":"1433039892","viewed":141,"name":"Study iQ's Sierpinski","username":"tyleeer","description":"Change it to circle","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// A Sierpinski Carpet like structure (2D Cantor). Instead of removing the central square \n// of a 3x3 subdivided square, in this shader I divide the square in 5x5 sub-squares and I \n// remove the four in the corners of the central one.\n\nvec2 pixelSpaceToUVSpace(vec2 p, vec2 resolution) {\n  vec2 uv = p/resolution;\n  if (resolution.x > resolution.y)\n      uv[0] *= resolution.x/resolution.y;\n  else\n      uv[1] *= resolution.y/resolution.x;\n  return fract(uv);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // animate\t\n    float s = 0.1*smoothstep( 0.0, 1.0, sin(3.1416*iTime) );\n\t\n    // unit square covering the whole screen\n\tvec2 z = pixelSpaceToUVSpace(fragCoord.xy,iResolution.xy);\n\n    // make it all white\n    float f = 1.0;\n\t\n    // iterate\t\n\tfor( int i=0; i<4; i++ ) \n\t{\n        //remove subsquares (1,1), (3,1), (1,3) and (3,3)\n\t\tf *=  1.0 - step(sqrt(pow(abs(z.x-0.5)-0.25,2.0)+pow(abs(z.y-0.5)-0.25,2.0)),s);;\n        // scale the shole thing down by a factor of 5\n\t\tz = fract( z*4.0 );\n\t}\n\t\n\tfragColor = vec4( f, f, f, 1.0 );\n}\n\n","name":"","description":"","type":"image"}]}