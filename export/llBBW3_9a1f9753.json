{"ver":"0.1","info":{"id":"llBBW3","date":"1517354573","viewed":107,"name":"Harmonic_Fourier","username":"PGrad","description":"Fourier transform with the cycle of the fourier frequency being harmonic fractions of the wave frequency.\nCode by me.\nCritiques are welcome!","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fourier","fouriertransform"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define EPSILON 1e-6\nfloat periodic(float x, float amp, float freq, float phase, float shift) {\n\treturn cos((x + phase) * freq) * amp + shift;\n}\nfloat make01(float x, float waves, float low, float high) {\n\treturn clamp(((x + waves) / (2. * waves)) * high, low, high);\n}\nfloat over(float a, float b) {\n    return 1. - (1. - a) * (1. - b);\n}\nvec2 fourier(float g, float f, float t) {\n    float exponent = -2. * PI * f * t;\n\treturn g * vec2(cos(exponent), sin(exponent));\n}\nint getInts(float c, float mult, int range) {\n\treturn int(c * mult) % range;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    uv.x -= .4;\n    vec3 prevColor = vec3(0.);\n    float T = 10.;\n    float f = 60. / T;\n    vec3 color;\n    int slices = 300;\n    float ival = (360. / float(slices));\n    float t, g, fourier_r, uv_r, angle, diff, max_angle = .05, mix_val;\n    float width = .1;\n    float freq_ratio = 1. / float(getInts(make01(periodic(iTime, 1., .4, 0., 0.), 1., 0., 1.), 10. - EPSILON, 10) + 1);\n    vec2 c, uv_unit;\n    vec3 base = vec3(1., 1., 1.);\n    vec3 mixcol = vec3(0., 1., 0.);\n    for(int i = 0; i < slices; ++i) {\n        t = radians(iTime + ival * float(i));\n        g = clamp((cos(2. * PI * f * t) + 1.) / 4., 0., .5);\n        c = fourier(g, f * freq_ratio, t);\n        fourier_r = length(c);\n        uv_unit = uv - vec2(.5);\n        uv_r = length(uv_unit);\n        angle = acos(dot(uv_unit, c) / (fourier_r * uv_r));\n        diff = distance(fourier_r, uv_r);\n        mix_val = smoothstep(0., width, diff);\n        color = clamp( max( prevColor, base - over( smoothstep(0., max_angle, angle), mix_val ) ), 0., 1.) * mixcol;\n    \tprevColor = color;\n    }\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}