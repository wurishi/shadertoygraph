{"ver":"0.1","info":{"id":"tdlyWS","date":"1706724418","viewed":53,"name":"1D Value","username":"Coedo","description":"Simple implementation of 1D value noise","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(float x) {\n    return fract(sin(x)*100000.0);\n}\n\nfloat smootherstep(float x) {\n    x = clamp(x, 0., 1.);\n    return x * x * x * (x * (x * 6. - 15.) + 10.);\n}\n\nfloat noise(float point) {\n    float i1 = floor(point);\n    float f  = fract(point);\n    \n    float i2 = i1 + 1.;\n    \n    float v1 = rand(i1);\n    float v2 = rand(i2);\n    \n    float t = smootherstep(f);\n    \n    return mix(v1, v2, t);\n}\n\n#define scale 15.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\t\n    float noise = noise(uv.x * scale + float(iTime));\n    // Time varying pixel color\n\n    vec3 col = vec3(noise);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}