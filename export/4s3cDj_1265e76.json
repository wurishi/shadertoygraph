{"ver":"0.1","info":{"id":"4s3cDj","date":"1520638113","viewed":118,"name":"Bases And Digits 2 buggy version","username":"samuelotherion","description":"Bases and Digits 2 ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["hex","float","print","bases","dec","bin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define VO void\n#define BO bool\n#define FL float\n#define V2 vec2\n#define V3 vec3\n#define V4 vec4\n#define FLOOR 13.\n#define FRACT 8.\n\n// oh what nice wobbling letters!\n#define BOLD V2( .125, .0125 ) - V2( .125, .025 ) * cos( 3.14159 * iTime + 6. * 6.283 * N.y ) + ( V2( .75, .975 ) + V2( .25, .025 ) * cos( 3.14159 * iTime + 6. * 6.283 * N.y ) )\n\n// switch that stupid whobble animation off!\n//#define BOLD 1.\n\n// resolution of letters texture\n#define RTX ( iChannelResolution[ 0 ].xy )\n\n// just for swizzling\nconst V4\n    Q = V4( +1, 0, -1, .5 );\n\n// some globals\nV4\n    O,   // output color\n    R,   // resolution and its inverse\n    CRS; // cursor pos and size\n\nV3\n    ASP, // aspect ratio and reverse\n    BCL, // background\n    FCL; // foreground\n\nV2\n    I,   // pixel from (0,0) bis iResolution.xy - 1 \n    N,   // (0,0) bis (1,1)\n    S;   // (0,0) bis ASX.xy\n\n// v in [0,1] ?\nBO\n\tin1( FL v ) { \n        \n        return abs( v - .5 ) <= .5; \n    }\n\n// v in ([0,1],[0,1]) ?\nBO\n\tin2( V2 p ) {\n        \n        return in1( p.x ) && in1( p.y ); \n    }\n\n// the bases from bottom to top\nconst FL \n    bases[ 8 ] = FL[ ] ( 2., 3., 4., 8., 10., 16., 32., 52. );\n\n// the colors \nconst V3\n    colors[ 16 ] = V3[ ] (\n        V3( .1, .1, .1 ), V3( .4, .1, .1 ), V3( .1, .4, .1 ), V3( .4, .4, .1 ),\n\t\tV3( .1, .1, .4 ), V3( .4, .1, .4 ), V3( .1, .4, .4 ), V3( .4, .4, .4 ),\n    \tV3( .3, .3, .3 ), V3( .7, .2, .2 ), V3( .2, .7, .2 ), V3( .7, .7, .2 ),\n    \tV3( .2, .2, .7 ), V3( .7, .2, .7 ), V3( .2, .7, .7 ), V3( .7, .7, .7 ) );\n\n// pos-th digit of num for a certain base\n// doF( 32.10, +1., 10. ) = 3.  doF( 32.10, 0., 10. ) = 2.  doF( 32.10, -1., 10. ) = 1.  doF( 32.10, -2., 10. ) = 0.\n// doF( 5, 0., 2. ) = 1.  doF( 5, 1., 2. ) = 0.  doF( 5, 2., 2. ) = 1.\n// doF( 253., 1., 16. ) = 15.  doF( 253., 0., 16. ) = 13. \nFL\n    doF( FL num, FL pos, FL base ) {\n        \n        return mod( floor( num * pow( base + ( pos < 0. ? 1e-6 : -1e-5 ), -pos ) ), base );\n    }\n\n// print symbol ( not for direct use )\nVO\n    ps( V2 p ) {\n\n        V4\n        tx = texture( iChannel0, p );\n\n        O = V4( mix( BCL, .33 * pow( 10. * tx.b,  tx.b - 2.75 * tx.g ) * FCL, tx.r ), 1. ); \n    }\n\n// print letter from (col,row) in Font-texture col = [0.,15.], row = [0.,15.]\nVO\n    _( FL c, FL r ) {\n\n        V2 \n        n = ( S - CRS.xy ) / CRS.zw;\n\n        if( in2( n ) )\n\n            ps( ( V2( c, 15. - r ) + BOLD * n ) / 16. );\n\n        CRS.x += CRS.z;\n    }\n\n// get pos in texture of i-th number digit sign\n// 0 1 2 3 4 5 6 7 8 9 a b c d e f g h i j k l m o p q r s t u v w x y z alpha - omega\n// bin|\n//             oct|\n//                 dec|\n//                             hex|\n//                                                           b32|\n//                                                               some crazy base of 52|\nV2\n    chr( FL i ) {\n\n        return \n            i < 10. \n                ? V2( i, 12. ) // 0 - 9\n                : i < 25.\n                    ? V2( i - 9., 9. ) // a - o\n                    : i < 36.\n                        ? V2( i - 25., 8. )  // p - z\n                        : V2( i - 36., 7. ); // alpha - omega                            \n    }\n\n// print a positive float v as integer with flr digits in a certain base\n// pUInt( 5., 4., 2. )  0101\nVO\n    pUInt( FL v, FL flr, FL base ) {\n\n        V2 \n        n = ( S - CRS.xy ) / CRS.zw;\n\n        if( in1( n.x / flr ) && in1( n.y ) )\n\n              ps( ( BOLD * fract( n ) + chr( doF( abs( v ), flr - floor( n.x ) - 1., base ) ) ) / 16. );\n\n        CRS.x += flr * CRS.z;\n    }\n\n// print a signed float v as integer with flr digits in a certain base and a sign\n// pInt( -7., 2., 4. )  -13\nVO\n    pInt( FL v, FL flr, FL base ) {\n\n        _( 12. - ( v < 0. ? -1. : +1. ), 2. );\n\n        pUInt( v, flr, base );    \n    }\n\n// print abs( v ) with flr digits in front of the . and frct behind in base base\nVO\n    pAbs( FL v, FL flr, FL frct, FL base ) {\n\n        V2 \n        n = ( S - CRS.xy ) / CRS.zw;\n\n        if( ( in1( n.x / ( flr + frct + 1. ) ) && in1( n.y ) ) ) {\n\n            FL\n            pos = flr - floor( n.x ),\n\t\t\tdof = doF( abs( v ), flr - floor( n.x ) - ( pos < 0. ? 0. : 1. ), base );\n\n            ps( ( BOLD * fract( n ) + ( pos == 0. ? V2( 14, 13 ) : chr( dof ) ) ) / 16. );\n        }\n\n        CRS.x += ( 1. + flr + frct ) * CRS.z;\n    }\n\n// print v with a sign, flr digits in front of the . and frct behind in base base\nVO\n    pFlt( FL v, FL flr, FL frct, FL base ) {\n\n        _( 12. + ( v < 0. ? +1. : -1. ), 2. );\n\n        pAbs( v, flr, frct, base );    \n    }\n\nVO\n    pBug( ) {\n        \n        FCL = V3( 2., .4, .0 );\n        \n        if( doF( 52. * 52. + sin( .1 * iTime ), 1., 52. ) == 0. ) {\n        \n\t        CRS = V4( V2( 3.13, 13.8 ) * ASP.xy / V2( FRACT + FLOOR + 12., 16. ), .0125, .025 );\n        \n\t        _( 2., 6. ); _( 5., 5. ); _( 7., 6. );\n        }\n        \n\t\tif( doF( 52. * 52. + sin( .1 * iTime ), 0., 52. ) == 0. ) {\n\n\t\t\tCRS = V4( V2( 4.13, 13.8 ) * ASP.xy / V2( FRACT + FLOOR + 12., 16. ), .0125, .025 );\n        \n\t\t\t_( 2., 6. ); _( 5., 5. ); _( 7., 6. );\n        }\n        \n\t\tif( doF( 52. * 52. + sin( .1 * iTime ), -1., 52. ) == 0. ) {\n\n\t\t\tCRS = V4( V2( 6.13, 13.8 ) * ASP.xy / V2( FRACT + FLOOR + 12., 16. ), .0125, .025 );\n        \n\t\t\t_( 2., 6. ); _( 5., 5. ); _( 7., 6. );\n        }\n    }\n\n// init some global vars\nVO\n    init( V2 i ) {\n        \n        // inverse resolution\n        R.zw = 1. / ( R.xy = iResolution.xy );\n        \n        // aspect ratio and inverse\n        ASP = V3( R.x * R.w, 1., R.y * R.z );\n        \n        // pixel pos as integer pair\n        I = floor( i );\n        \n        // N normed coord\n        // S with aspect ratio\n        S = ASP.xy * ( N = i * R.zw );\n        \n        // background col\n        BCL = V3( .8, .85, .9 );\n        \n        // foreground\n        FCL = V3( 0.5, .85, 1. );\n        \n        // output set to zero\n        O = Q.yyyy;\n    }\n\nVO\n    finish( out V4 o ) {\n        \n        // save real output \n        \n        float \n            fabricesSuggestion = 3.,\n            mySuggestion = 1.,\n            compromise = .5 * ( fabricesSuggestion + mySuggestion );\n        \n        o = clamp( V4( compromise * O.rgb / O.a, 1. ), 0., 1. );\n    }\n\nVO\n    work( ) {\n        \n        FL\n            tm = iTime;\n        \n        V2\n            sz = V2( FRACT + FLOOR + 12., 16. ), // size of one row in letters space\n            i  = floor( sz * N ), // row\n            k  = sz * N - i - .5;\n        \n        FL\n            f = ( 1. - 2. * dot( k, k ) ),\n            flr1 = 1. + floor( log2( tm ) / log2( bases[ int( mod( i.y, 8. ) ) ] ) ),\n            flr2 = 1. + floor( log2( abs( 52. * 52. * sin( .01 * tm ) ) ) / log2( bases[ int( mod( i.y, 8. ) ) ] ) ),\n            frc = floor( 8. / log( bases[ int( mod( i.y, 8. ) ) ] ) );\n        \n        f *= f;\n        \n        \n        BCL = .2 * ( V3( .3 -.025 * ( ( i.y - 8. ) * ( i.x - 8. ) / 16. ) ) + .1 + mod( i.y, 2. ) * V3( .1 ) );\n        FCL = colors[ int( i.y ) ];// + .1 * V3( sin( 7.123 * tm + .5 * i.x ), sin( 5.234 * tm + i.y  ), sin( 3.345 * tm + .125 * i.y * i.x  ) );\t\t\n        \n        O = V4( BCL, 1 );\n        \n        // second 8 rows is sin( .1 * iTime ) in different bases\n        if( i.y < 8. ) {\n            \n\t        CRS = V4( ( 20. - flr2 ) * ASP.x, i.y, ASP.xy ) / sz.xyxy;\n            \n            pFlt( 52. * 52. * sin( .01 * tm ), flr2, frc, bases[ int( i.y ) ] );\n\n        }\n        // first 8 rows is iTime\n        else {\n            \n\t        CRS = V4( ( 20. - flr1 ) * ASP.x, i.y, ASP.xy ) / sz.xyxy;\n            \n\t        pFlt( tm, flr1, frc, bases[ int( i.y - 8. ) ] );\n        }\n\t\t\n        BCL = O.rgb;\n\n////////////////////////////////////////////////////////////////\n// THE BUG\n////////////////////////////////////////////////////////////////\n// these are the 2 lines top left\n        \n// What goes on here????\n        \n        // correct\n        if( i.y == 15. ) {\n            \n        \tCRS.xy = V2( 1. * ASP.x / sz.x, ASP.y - 1. / sz.y ); // set cursor to top line\n \n            pFlt( 52. * 52. + sin( .1 * tm ), 3., 5., bases[ int( 7. ) ] ); // print 52^2 3 digits . 5 digits   bases[7] ==> base 52\n        }\n        \n        // incorrect\n        if( i.y == 14. ) {\n            \n        \tCRS.xy = V2( 1. * ASP.x / sz.x, ASP.y - 2. / sz.y );  // set cursor to second line\n        \n\t       \tpFlt( 52. * 52. + sin( .1 * tm ), 3., 5., bases[ int( i.y - 7. ) ] );  // print 52^2 3 digits . 5 digits i.y = 14, 14. - 7. = 7. bases[7] ==> base 52\n        }\n\n/////////////////////////////////////////////////////////////////\n        \n        // use what is seen so far as background for further calcs\n        BCL = O.rgb;\n        \n        // orange foreground\n        FCL = V3( .8, .3, .012 );\n        \n        // cursor size scale x*2 y*7\n        CRS.zw *= V2( 2., 7. );\n        \n        // cursor pos half width and moving down and op\n        CRS.xy = V2( 0.5 * CRS.z , ASP.y - ( 1.75 + .5 * sin( tm ) ) * CRS.w );\n        \n        // print frame rate in format xx.xx as decimal\n        pAbs( iFrameRate, 2., 2., 10. );\n        \n        pBug( );\n    }\n\nvoid\n    mainImage( out V4 o, V2 i ) {\n\n        init( i );\n        \n        work( );\n        \n        finish( o );\n}","name":"Image","description":"","type":"image"}]}