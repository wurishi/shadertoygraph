{"ver":"0.1","info":{"id":"ss3yDN","date":"1653464286","viewed":62,"name":"Rainbow Multibrot power 8","username":"Progdruid","description":"Multibrot in GLSL with ShaderToy","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float threshold = 9600.;\n\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\nvec2 mc (vec2 v1, vec2 v2) {\n    float i = v1.x * v2.y + v2.x * v1.y;\n    float r = v1.x * v2.x - v1.y * v2.y * sign(v1.y * v2.y);\n    return vec2(r, i);\n}\n\nfloat mandelbrot (vec2 c, int steps) {\n    vec2 z = c;\n    vec2 nz = c;\n    float dist = 0.;\n    \n    int i = 0;\n    while (i < steps)  {\n        z = nz;\n        nz = mc(mc(mc(z, z), mc(z, z)), mc(mc(z, z), mc(z, z))) + c;\n        \n        dist = distance(z, nz);\n        if (dist >= threshold)\n            return float(i) / float(steps);\n        i++;\n    }\n    \n    return 0.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord.xy/iResolution.xy;\n    st.x *= iResolution.x/iResolution.y;\n    \n    st -= vec2(0.5);\n    st.x -= 0.4;\n    st *= 2.3;\n    \n    float val = mandelbrot(st, 40);\n    val = sqrt(val);\n    val = sqrt(val);\n    vec3 color = hsb2rgb(vec3(val + iTime, val, sqrt(val) + 0.3));\n    \n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}