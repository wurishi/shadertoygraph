{"ver":"0.1","info":{"id":"wdfSW7","date":"1551395020","viewed":73,"name":"Nations","username":"Chosen","description":"http://www.worldometers.info/world-population/population-by-country/\n\nUnfinished!\n\nTo do:\n+ Coats of Arms (bitmaps?)\n+ Anthems ?\n+ More nations","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["shapes","flags"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float char(vec2 uv, int ascii)\n{\n\treturn float(fract(uv) == uv) *\n        textureGrad(iChannel1, uv / 16. + fract(vec2(ascii, 15 - ascii / 16) / 16.), dFdx(uv / 16.), dFdy(uv / 16.)).x;\n}\n\nfloat label(vec2 uv, int start, int end)\n{\n    float col = 0.;\n    uv.x += .5 * float(end - start + 1) * LETTERSPACE;\n    for(int loop = start; loop != end; ++loop, uv.x -= LETTERSPACE){\n        col += char(uv, text[loop]);\n    }\n    return col;\n}\n\nvec3 combine(vec3 col, vec4 add){\n    add = clamp(add, 0., 1.);\n    return mix(col, add.xyz, add.a);\n}\n\n#define SPACING 2.2\n#define FLAG(FN,TX) col = combine(col, FN(wave - vec2(xpos, 0), edge) + vec4(label(6.*(tuv + vec2(-float(xpos), 1.4)), TX))); xpos += SPACING;\n#define FLAGS 19.\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float zoom = 1.6;\n    float edge = 1.5 * zoom / min(iResolution.x,iResolution.y);\n    vec2 uv = zoom * (fragCoord - .5*iResolution.xy) / min(iResolution.x,iResolution.y)\n        // TO DO: Following calc is 'good enough' but not quite right somehow\n        + vec2(-smoothstep(0., 1., iTime) + mod((.5 * iTime + .25 * sin(3.141593 * iTime)), FLAGS + 2.) * SPACING, -.1);\n    vec2 wave = uv, tuv = uv - vec2(0, .6);\n    vec3 col = vec3(.2,.3,.6);\n    float xpos = 0.;\n\n    wave.y = uv.y + .1 * sin(M_TAU * uv.x * .5 + iTime);\n\n    col += label(6.*(tuv + vec2(-float(xpos), .5)), TX_FLAGS_OF);\n    col += char(6.*(tuv + vec2(-float(xpos - .11), .75)), 48 + int(floor(FLAGS / 10.)));\n    col += char(6.*(tuv + vec2(-float(xpos - .04), .75)), 48 + int(mod(FLAGS, 10.)));\n    col += label(6.*(tuv + vec2(-float(xpos), 1.)), TX_NATIONS);\n\n    // TO DO: Use alpha channel to allow background\n    xpos += SPACING;\n    FLAG(flagChina, TX_CHINA)\n\tFLAG(flagIndia, TX_INDIA)\n    FLAG(flagUS, TX_US)\n    FLAG(flagIndonesia, TX_INDONESIA)\n    FLAG(flagBrazil, TX_BRAZIL)\n    FLAG(flagPakistan, TX_PAKISTAN)\n    FLAG(flagNigeria, TX_NIGERIA)\n    FLAG(flagBangladesh, TX_BANGLADESH)\n    FLAG(flagRussia, TX_RUSSIA)\n    FLAG(flagMexico, TX_MEXICO)\n    FLAG(flagJapan, TX_JAPAN)\n    FLAG(flagEthiopia, TX_ETHIOPIA)\n    FLAG(flagPhilipines, TX_PHILIPPINES)\n    FLAG(flagEgypt, TX_EGYPT)\n    FLAG(flagVietnam, TX_VIETNAM)\n          // Missed some\n    FLAG(flagGermany, TX_GERMANY)\n          // Missed some\n    FLAG(flagMyanmar, TX_MYANMAR)\n          // Missed some\n    FLAG(flagColombia, TX_COLOMBIA)\n    FLAG(flagSpain, TX_SPAIN)\n\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define M_TAU 6.283185\n#define M_PI 3.141593\n#define SS(d) smoothstep(edge, 0., d)\n#define LETTERSPACE .46\n\nfloat inStar(vec2 pos, float points, float radius, float pixelSize)\n{\n    // I got help from a tutorial https://www.youtube.com/watch?v=q-gXr6XrgWk\n    float total = 0., a1, a2;\n    vec2 p1, p2;\n    \n    for(int i = 0; i != int(points); ++i){\n    \ta1 = M_TAU / points * float(i);\n        a2 = M_TAU / points * float(i - 2);\n        p1 = radius * vec2(sin(a1), cos(a1));\n        p2 = radius * vec2(sin(a2), cos(a2));\n        total += clamp(dot(normalize(vec2(p2.y - p1.y, p1.x - p2.x)), p1 - pos)\n              / pixelSize + .5, 0., 1.);\n    }\n    return clamp(total + 2. - points, 0., 1.);\n}\n\nmat2 rotate(float theta){\n    float s = sin(M_TAU * theta), c = cos(M_TAU * theta);\n    return mat2(c, s, -s, c);\n}\n\n// TO DO: Check star size and position\nvec4 flagChina(vec2 uv, float edge){\n    vec2 starCen = vec2(uv.x + .5, uv.y - .25);\n    float stars = inStar(starCen, 5., .15, .75*edge);\n    for(int i = -1; i != 3; ++i)\n        stars += inStar(starCen * rotate(float(i)*.0625) - vec2(7., -2.)/20., 5., .05, .75*edge);\n    return vec4(mix(vec3(222,41,16)/255., vec3(1,222./255.,0), stars), 1)\n        * SS(abs(uv.y) - .5) * SS(abs(uv.x) - .75);\n}\n\n// TO DO: Chakra arms could be more detailed\nfloat inChakra(vec2 uv, float edge){\n    float r = 37./240.;\n    float theta = fract(atan(uv.y, uv.x) / M_TAU);\n    return SS(length(uv) - r)\n        * ((1. - SS(length(uv) - .875*r))\n        + SS(length(uv) - .175*r)\n        + SS(mod(theta, 1./24.) * .3)\n           );\n}\n\nvec4 flagIndia(vec2 uv, float edge){\n    return vec4(mix(mix(vec3(1.,.6,.2),\n                   mix(vec3(1), vec3(0, 0, 136./255.), inChakra(uv, edge)),\n                   smoothstep(-edge, edge, 1./6. - uv.y)),\n               vec3(.0745, .533, .03137), smoothstep(edge, -edge, uv.y + 1./6.)), 1)\n        * SS(abs(uv.y) - .5) * SS(abs(uv.x) - .75);\n}\n\n// TO DO: Tidy code\n#define STRIPES 13.\n#define US_WIDTH 1.9\n#define CANTON 0.76\n#define STAR_POINTS 5.\n#define STAR_X_GAP 0.0633\n#define STAR_Y_GAP 0.0538\n#define STAR_WIDTH 0.0616\n\nvec4 flagUS(vec2 uv, float edge){\n    float starsA = inStar(vec2(mod(uv.x - .5*US_WIDTH - 2.*STAR_X_GAP, 2.*STAR_X_GAP) - STAR_X_GAP,\n                              mod(uv.y - .5 - 2.*STAR_Y_GAP, 2.*STAR_Y_GAP) - STAR_Y_GAP), STAR_POINTS,\n                         .5*STAR_WIDTH, edge);\n    float starsB = mix(inStar(vec2(mod(uv.x - .5*US_WIDTH - STAR_X_GAP, 2.*STAR_X_GAP) - STAR_X_GAP,\n                              mod(uv.y - .5 - STAR_Y_GAP, 2.*STAR_Y_GAP) - STAR_Y_GAP), STAR_POINTS,\n                         .5*STAR_WIDTH, edge), 0.,\n                       length(uv.x + .5*US_WIDTH - .5*CANTON) > .5*CANTON - .5*STAR_X_GAP\n                       \t|| length(uv.y - .25) > .25 - .6*STAR_Y_GAP);\n    float stripeWidth = 1./STRIPES;\n    \n    return vec4(mix(\n        mix(vec3(.698,.132,.203), vec3(1), smoothstep(stripeWidth + edge,\n                                     stripeWidth - edge,\n                                     2. * stripeWidth * (.5 + .5*cos(M_PI * uv.y * STRIPES)))),\n        mix(vec3(.234,.233,.430), vec3(1), max(starsA, starsB)),\n        SS(abs(uv.y) - .5) * SS(-uv.y - .5/STRIPES) * SS(abs(uv.x) - .5*US_WIDTH)\n        \t* SS(uv.x + .5*US_WIDTH - CANTON)), 1)\n        * SS(abs(uv.y) - .5 + edge) * SS(abs(uv.x) - .5*US_WIDTH + edge);\n}\n\nvec4 flagIndonesia(vec2 uv, float edge){\n    return vec4(mix(vec3(1), vec3(1, 0, 0), smoothstep(-edge, edge, uv.y)), 1)\n        * SS(abs(uv.y) - .5) * SS(abs(uv.x) - .75);\n}\n\n// TO DO: Detailed parts, text, stars\nvec4 flagBrazil(vec2 uv, float edge){\n    return vec4(mix(vec3(0, 156., 59.)/255.,\n               mix(vec3(1., 223./255., 0.), vec3(0, 39., 118.)/255., SS(length(uv) - 7./28.)),\n               SS(dot(abs(uv), vec2(100./(8.3*7.), 14./5.3)) - 1.)), 1)\n        * SS(abs(uv.y) - .5) * SS(abs(uv.x) - 10./14.);\n}\n\nvec4 flagPakistan(vec2 uv, float edge){\n    vec2 offcentre = vec2(uv.x - 3./16., uv.y);\n    vec2 corner = vec2(.5 * 1.125, .5);\n    return vec4(mix(vec3(1., 65., 28.)/255.,\n               vec3(1), SS(uv.x + .375)\n               + SS(length(offcentre) - 11./40.)\n               * (1. - SS(length(offcentre - corner * (1. - 13./(20.*length(corner)))) - 11./40.))\n               + inStar((offcentre - corner * (1. - 11./(20.*length(corner))))\n                        * rotate(atan(-corner.y, corner.x)), 5., .1, edge)), 1)\n        * SS(abs(uv.y) - .5) * SS(abs(uv.x) - .75);\n}\n\nvec4 flagNigeria(vec2 uv, float edge){\n    return vec4(mix(vec3(0, 135., 83.)/255., vec3(1), SS(abs(uv.x) - 1./3.)), 1)\n        * SS(abs(uv.y) - .5) * SS(abs(uv.x) - 1.);\n}\n\nvec4 flagBangladesh(vec2 uv, float edge){\n    return vec4(mix(vec3(0, 106., 78.)/255., vec3(244., 42., 65.)/255.,\n               SS(length(vec2(uv.x + 1./12., uv.y)) - 1./3.)), 1)\n        * SS(abs(uv.y) - .5) * SS(abs(uv.x) - 5./6.);\n}\n\nvec4 flagRussia(vec2 uv, float edge){\n    return vec4(mix(mix(vec3(1), vec3(0, 57., 166.)/255., smoothstep(-edge, edge, 1./6. - uv.y)),\n               vec3(213., 43., 30.)/255., smoothstep(edge, -edge, uv.y + 1./6.)), 1)\n        * SS(abs(uv.y) - .5) * SS(abs(uv.x) - .75);\n}\n\n// TO DO: Coat of arms\nvec4 flagMexico(vec2 uv, float edge){\n    return vec4(mix(mix(vec3(1), vec3(0, 104., 71.)/255., SS(uv.x + 1./3.)),\n                   vec3(206., 17., 38.)/255., SS(1./3. - uv.x)), 1)\n        * SS(abs(uv.y) - .5) * SS(abs(uv.x) - 1.);\n}\n\nvec4 flagJapan(vec2 uv, float edge){\n    return vec4(mix(vec3(1), vec3(188., 0, 45.)/255., SS(length(uv) - .3)), 1)\n        * SS(abs(uv.y) - .5) * SS(abs(uv.x) - .75);\n}\n\n// TO DO: Fix emblem\nvec4 flagEthiopia(vec2 uv, float edge){\n    vec3 gold = vec3(252., 221., 9.)/255.;\n    vec3 emblem = mix(vec3(15.,71.,175.)/255., gold,\n            inStar(uv, 5., .2, edge));\n    return vec4(mix(mix(mix(vec3(7., 137., 48.)/255., gold,\n                            smoothstep(-edge, edge, 1./6. - uv.y)),\n                        vec3(218., 18., 26.)/255., smoothstep(edge, -edge, uv.y + 1./6.)),\n        emblem, SS(length(uv) - .25)), 1)\n        * SS(abs(uv.y) - .5) * SS(abs(uv.x) - 1.);\n}\n\n// TO DO: Sun & stars\nvec4 flagPhilipines(vec2 uv, float edge){\n    return vec4(mix(mix(vec3(0, 56./255., 168./255.), vec3(206./255., 17./255., 38./255.),\n               smoothstep(-edge, edge, -uv.y)),\n               vec3(1), SS(dot(vec2(uv.x + 1. - sqrt(.75), abs(uv.y)), vec2(.5, sqrt(.75))))), 1)\n        * SS(abs(uv.y) - .5) * SS(abs(uv.x) - 1.);\n}\n\n// TO DO: Coat of arms\nvec4 flagEgypt(vec2 uv, float edge){\n    return vec4(mix(mix(vec3(206, 17, 38)/255., vec3(1),\n                   smoothstep(-edge, edge, 1./6. - uv.y)),\n               vec3(0), smoothstep(edge, -edge, uv.y + 1./6.)), 1)\n        * SS(abs(uv.y) - .5) * SS(abs(uv.x) - .75);              \n}\n\nvec4 flagVietnam(vec2 uv, float edge){\n    return vec4(mix(vec3(218, 37, 29)/255., vec3(1, 1, 0),\n                   inStar(uv, 5., .3, edge)), 1)\n        * SS(abs(uv.y) - .5) * SS(abs(uv.x) - .75);              \n}\n\n// DR Congo - easyish\n// Turkey - easyish - similar to pakistan\n// Iran - tricky bits\n// Germany - easy\nvec4 flagGermany(vec2 uv, float edge){\n    return vec4(mix(mix(vec3(0), vec3(1, 0, 0),\n                   smoothstep(-edge, edge, 1./6. - uv.y)),\n               vec3(255, 204, 0)/255., smoothstep(edge, -edge, uv.y + 1./6.)), 1)\n        * SS(abs(uv.y) - .5) * SS(abs(uv.x) - .75);              \n}\n\n\n// Thailand - easy\n// UK - medium\n// France - easy horiz3col\n// Tanzania - easy - similar dr congo stripe\n// Italy - easy horiz3col\n// South Africa - medium\n// Myanmar - easy\nvec4 flagMyanmar(vec2 uv, float edge){\n    // Can't find specification of star radius or position\n    // TO DO: Measure star on photos\n    return vec4(mix(mix(mix(vec3(254, 203, 0)/255., vec3(52, 178, 51)/255.,\n                   smoothstep(-edge, edge, 1./6. - uv.y)),\n               vec3(234, 40, 57)/255., smoothstep(.5*edge, -.5*edge, uv.y + 1./6.)),\n               vec3(1), inStar(uv + vec2(0, .04), 5., .35, edge)), 1)\n        * SS(abs(uv.y) - .5) * SS(abs(uv.x) - .75);              \n}\n// Kenya - hard\n// South Korea - medium\n// Colombia - easy\nvec4 flagColombia(vec2 uv, float edge){\n    return vec4(mix(mix(vec3(252, 209, 22)/255., vec3(0, 56, 147)/255.,\n                   smoothstep(-.5*edge, .5*edge, -uv.y)),\n               vec3(206, 17, 38)/255., smoothstep(.5*edge, -.5*edge, uv.y + .25)), 1)\n        * SS(abs(uv.y) - .5) * SS(abs(uv.x) - .75);              \n}\n\n// Spain - TO DO: Coat of arms\nvec4 flagSpain(vec2 uv, float edge){\n    return vec4(mix(vec3(170, 21, 27)/255., vec3(241, 191, 0)/255.,\n                   SS(abs(uv.y) - .25)), 1)\n        * SS(abs(uv.y) - .5) * SS(abs(uv.x) - .75);              \n}\n\n// ASCII codes\n#define EOL 0\n#define _ 32,\n#define BANG 33,\n#define QUOT 34,\n#define HASH 35,\n#define DOLLAR 36,\n#define PERCENT 37,\n#define AMP 38,\n#define QUOTE 39,\n#define OPEN 40,\n#define CLOSE 41,\n#define STAR 42,\n#define PLUS 43,\n#define COMMA 44,\n#define DASH 45,\n#define DOT 46,\n#define SLASH 47,\n#define ZERO 48,\n#define ONE 49,\n#define TWO 50,\n#define THREE 51,\n#define FOUR 52,\n#define FIVE 53,\n#define SIX 54,\n#define SEVEN 55,\n#define EIGHT 56,\n#define NINE 57,\n#define COLON 58,\n#define SEMICOLON 59,\n#define LT 60,\n#define EQ 61\n#define GT 62,\n#define QUESTION 63,\n#define AT 64,\n#define A 65,\n#define B 66,\n#define C 67,\n#define D 68,\n#define E 69,\n#define F 70,\n#define G 71,\n#define H 72,\n#define I 73,\n#define J 74,\n#define K 75,\n#define L 76,\n#define M 77,\n#define N 78,\n#define O 79,\n#define P 80,\n#define Q 81,\n#define R 82,\n#define S 83,\n#define T 84,\n#define U 85,\n#define V 86,\n#define W 87,\n#define X 88,\n#define Y 89,\n#define Z 90,\n#define OPENSQ 91,\n#define BACKSLASH 92,\n#define CLOSESQ 93,\n#define HAT 94,\n#define UNDERSCORE 95,\n#define BACKTICK 96,\n#define x_ 120,\n#define y_ 121,\n#define z_ 122,\n#define w_ 119,\n#define r_ 114,\n#define g_ 103,\n#define b_ 98,\n#define a_ 97,\n#define c 99,\n#define d 100,\n#define e 101,\n#define f 102,\n#define h 104,\n#define i 105,\n#define j 106,\n#define k 107,\n#define l 108,\n#define m 109,\n#define n 110,\n#define o 111,\n#define p 112,\n#define q 113,\n#define s 115,\n#define t 116,\n#define u 117,\n#define v 118,\n#define OPENBRACE 123,\n#define BAR 124,\n#define CLOSEBRACE 125,\n#define TILDE 126,\n// End of ASCII codes \n\nconst int[] text = int[](\n    C h i n a_\n    I n d i a_\n    U S\n    I n d o n e s i a_\n    B r_ a_ z_ i l\n    P a_ k i s t a_ n\n    N i g_ e r_ i a_\n    B a_ n g_ l a_ d e s h\n    R u s s i a_\n    M e x_ i c o\n    J a_ p a_ n\n    // Ethiopia - approximate emblem for starters\n    E t h i o p i a_\n    // Philippines - tricky bits\n    P h i l i p p i n e s\n    // Egypt - miss off coat of arms\n    E g_ y_ p t\n    // Vietnam - easy!\n    V i e t n a_ m\n    // DR Congo - easyish\n    D R _ C o n g_ o\n    // Turkey - easyish - similar to pakistan\n    T u r_ k e y_\n    // Iran - tricky bits\n    I r_ a_ n\n    // Germany - easy\n    G e r_ m a_ n y_\n    // Thailand - easy\n    T h a_ i l a_ n d\n    // UK - medium\n    U K\n    // France - easy\n    F r_ a_ n c e\n    // Tanzania - easy\n    T a_ n z_ a_ n i a_\n    // Italy - easy\n    I t a_ l y_\n    // South Africa - medium\n    S o u t h _ A f r_ i c a_\n    // Myanmar - easy\n    M y_ a_ n m a_ r_\n    // Kenya - hard\n    K e n y_ a_\n    // South Korea - medium\n    S o u t h _ K o r_ e a_\n    // Colombia - easy\n    C o l o m b_ i a_\n    // Spain - miss coat of arms\n    S p a_ i n\n    \n    // Uganda - miss coat of arms\n    // Argentina - have a go at the coat of arms??\n    // Ukraine - easy\n    // Algeria - similar to pakistan\n    // Sudan - easy\n    F l a_ g_ s _ o f\n    N a_ t i o n s\n    EOL\n);\n\n#define TX_CHINA 0, 5\n#define TX_INDIA 5, 10\n#define TX_US 10, 12\n#define TX_INDONESIA 12, 21\n#define TX_BRAZIL 21, 27\n#define TX_PAKISTAN 27, 35\n#define TX_NIGERIA 35, 42\n#define TX_BANGLADESH 42, 52\n#define TX_RUSSIA 52, 58\n#define TX_MEXICO 58, 64\n#define TX_JAPAN 64, 69\n#define TX_ETHIOPIA 69, 77\n#define TX_PHILIPPINES 77, 88\n#define TX_EGYPT 88, 93\n#define TX_VIETNAM 93, 100\n#define TX_DR_CONGO 100, 108\n#define TX_TURKEY 108, 114\n#define TX_IRAN 114, 118\n#define TX_GERMANY 118, 125\n#define TX_THAILAND 125, 133\n#define TX_UK 133, 135\n#define TX_FRANCE 135, 141\n#define TX_TANZANIA 141, 149\n#define TX_ITALY 149, 154\n#define TX_SOUTH_AFRICA 154, 166\n#define TX_MYANMAR 166, 173\n#define TX_KENYA 173, 178\n#define TX_SOUTH_KOREA 178, 189\n#define TX_COLOMBIA 189, 197\n#define TX_SPAIN 197, 202\n#define TX_END 202\n#define TX_FLAGS_OF TX_END, TX_END+8\n#define TX_NATIONS TX_END+8, TX_END+15\n","name":"Common","description":"","type":"common"}]}