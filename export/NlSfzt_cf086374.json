{"ver":"0.1","info":{"id":"NlSfzt","date":"1652566847","viewed":61,"name":"TestError1","username":"Evgeniy2030","description":"Test1","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["test1"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 multiply(vec4 original, vec4 ratio);\nvec4 multiply(vec4 original, float ratio);\nfloat customRound(float number, float degree);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float SUB_PIXEL_WIDTH = 2.; //цвета вертикальных полосок и частота\n    float PIXEL_WIDTH = SUB_PIXEL_WIDTH * 3.; //вертикальные полоски на фото\n    vec4 red = vec4(1.2, 0.9, 0.9, 0.);\n    vec4 green = vec4(0.9, 1.2, 0.9, 0.); //три цвета картинки\n    vec4 blue = vec4(0.9, 0.9, 1.2, 0.);\n    vec4 original = texture(iChannel0, fragCoord / iResolution.xy);\n    \n    \n    // Color aligned\n    vec4 colorAligned = original;\n    \n    colorAligned.x = customRound(colorAligned.x, 4.);\n    colorAligned.y = customRound(colorAligned.y, 4.);\n    colorAligned.z = customRound(colorAligned.z, 4.);\n\n    // Create a mask\n    vec4 rgbMasked = colorAligned;\n    if (mod(fragCoord.x, PIXEL_WIDTH) < SUB_PIXEL_WIDTH) {\n        rgbMasked = multiply(rgbMasked, red);\n    }\n    if (mod(fragCoord.x + SUB_PIXEL_WIDTH, PIXEL_WIDTH) < SUB_PIXEL_WIDTH) {\n        rgbMasked = multiply(rgbMasked, green);\n    }\n    if (mod(fragCoord.x + SUB_PIXEL_WIDTH * 2., PIXEL_WIDTH) < SUB_PIXEL_WIDTH) {\n        rgbMasked = multiply(rgbMasked, blue);\n    }\n    \n    if (mod(fragCoord.x, 2.) == 0. || mod(fragCoord.y, 2.) == 0.) {\n        rgbMasked.x *= 0.5;\n    }\n    \n    vec4 noise = rgbMasked;\n    float location = iResolution.y * (1. - mod(iTime, 1.));\n    float dim = 0.1;\n    if (fragCoord.y > location - 20. && fragCoord.y < location + 20.) {\n        noise.x -= dim * (1. + 1. / abs(fragCoord.y - location));\n        noise.y -= dim * (1. + 1. / abs(fragCoord.y - location));\n        noise.z -= dim * (1. + 1. / abs(fragCoord.y - location));\n    }\n    \n    // Result\n\tfragColor = noise;\n}\n\nvec4 multiply( vec4 original, vec4 ratio ) {\n    original.x *= ratio.x;\n    original.y *= ratio.y;\n    original.z *= ratio.z;\n\n    return original;\n}\n\nvec4 multiply( vec4 original, float ratio ) {\n    original.x *= ratio;\n    original.y *= ratio;\n    original.z *= ratio;\n\n    return original;\n}\n\nfloat customRound(float number, float degree) {\n    float ratio = 1. / degree;\n    \n    for (float i = 1.; i <= degree; i++) {\n        if (number < ratio*i) {\n            return ratio * (i - 1.);\n    \t}\n    }\n}","name":"Image","description":"","type":"image"}]}