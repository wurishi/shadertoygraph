{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"texture","id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"code":"\nfloat easeInOutQuad(float t) {\n    return t < 0.5 ? 2.0 * t * t : -1.0 + (4.0 - 2.0 * t) * t;\n}\n\n// Cubic Easing\nfloat easeInCubic(float t) {\n    return t * t * t;\n}\n\nfloat easeOutCubic(float t) {\n    float f = t - 1.0;\n    return f * f * f + 1.0;\n}\n\nfloat easeInOutCubic(float t) {\n    return t < 0.5 ? 4.0 * t * t * t : (t - 1.0) * (2.0 * t - 2.0) * (2.0 * t - 2.0) + 1.0;\n}\n\n// Quartic Easing\nfloat easeInQuart(float t) {\n    return t * t * t * t;\n}\n\nfloat easeOutQuart(float t) {\n    float f = t - 1.0;\n    return 1.0 - f * f * f * f;\n}\n\nfloat easeInOutQuart(float t) {\n    return t < 0.5 ? 8.0 * t * t * t * t : 1.0 - 8.0 * (t - 1.0) * (t - 1.0) * (t - 1.0) * (t - 1.0);\n}\n\n// Sine Easing\nfloat easeInSine(float t) {\n    return 1.0 - cos((t * 3.141592653589793) / 2.0);\n}\n\nfloat easeOutSine(float t) {\n    return sin((t * 3.141592653589793) / 2.0);\n}\n\nfloat easeInOutSine(float t) {\n    return -0.5 * (cos(3.141592653589793 * t) - 1.0);\n}\n\n// Exponential Easing\nfloat easeInExpo(float t) {\n    return t == 0.0 ? 0.0 : pow(2.0, 10.0 * (t - 1.0));\n}\n\nfloat easeOutExpo(float t) {\n    return t == 1.0 ? 1.0 : 1.0 - pow(2.0, -10.0 * t);\n}\n\nfloat easeInOutExpo(float t) {\n    if (t == 0.0) return 0.0;\n    if (t == 1.0) return 1.0;\n    return t < 0.5 ? 0.5 * pow(2.0, 20.0 * t - 10.0) : 1.0 - 0.5 * pow(2.0, -20.0 * t + 10.0);\n}\n\n// Back Easing\nfloat easeInBack(float t) {\n    const float c1 = 1.70158;\n    return (c1 + 1.0) * t * t * t - c1 * t * t;\n}\n\nfloat easeOutBack(float t) {\n    const float c1 = 1.70158;\n    float f = t - 1.0;\n    return 1.0 + (c1 + 1.0) * f * f * f + c1 * f * f;\n}\n\nfloat easeInOutBack(float t) {\n    const float c1 = 1.70158;\n    const float c2 = c1 * 1.525;\n    return t < 0.5\n        ? (pow(2.0 * t, 2.0) * ((c2 + 1.0) * 2.0 * t - c2)) / 2.0\n        : (pow(2.0 * t - 2.0, 2.0) * ((c2 + 1.0) * (t * 2.0 - 2.0) + c2) + 2.0) / 2.0;\n}\n\n\nfloat WIDTH = 1.5;\nfloat SPREAD = 0.33;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float T_MAX = 3.0;\n    float time = mod(iTime, T_MAX);\n    float t = time/ T_MAX;\n    //t = 0.5;\n    //t = 1.0-t;\n    float progress = t;\n    //progress = 1.0;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 mask = vec4(0.0);\n\n    \n    float ts = SPREAD*0.0;\n    mask.r = mix(0.0 - (1.0-ts),1.0+WIDTH+(ts),progress)-uv.y;    \n    mask.r = abs(mask.r);\n    mask.r /= WIDTH;\n    mask.r = clamp(1.0 - mask.r,0.0,1.0);\n    mask.r = easeInOutSine(mask.r);\n\n    ts = SPREAD*1.0;\n    mask.g = mix(0.0 - (1.0-ts),1.0+WIDTH+(ts),progress)-uv.y;\n    mask.g = abs(mask.g);\n    mask.g /= WIDTH;\n    mask.g = clamp(1.0 - mask.g,0.0,1.0);\n    mask.g = easeInOutSine(mask.g);\n    \n    ts = SPREAD*2.0;\n    mask.b = mix(0.0 - (1.0-ts),1.0+WIDTH+(ts),progress)-uv.y;\n    mask.b = abs(mask.b);\n    mask.b /= WIDTH;\n    mask.b = clamp(1.0 - mask.b,0.0,1.0);\n    mask.b = easeInOutSine(mask.b);\n    \n    ts = SPREAD*3.0;\n    mask.a = mix(0.0 - (1.0-ts),1.0+WIDTH+(ts),progress)-uv.y;\n    mask.a /= WIDTH;\n    mask.a = (mask.a >= 1.0) ? 1.0 :mask.a;\n    \n    mask = clamp(mask,vec4(0.0),vec4(1.0));\n\n    //fragColor = vec4(abs( (mask.r-uv.y) ));\n    \n    fragColor = vec4(mask.r,mask.g,mask.b,0.0);\n    //fragColor = vec4(mask.a);\n    //fragColor = vec4(mask.r,mask.g,mask.b,0.0) + vec4(mask.a*0.33);\n    //fragColor = vec4(mask.r);\n    \n    vec4 oColor =  vec4(1.0);\n    oColor.r = texture(iChannel0, uv + vec2(0.0,mask.r*-0.25)).r * mix(1.0,5.0,mask.r);\n    oColor.g = texture(iChannel0, uv + vec2(0.0,mask.g*-0.25)).g * mix(1.0,5.0,mask.g);\n    oColor.b = texture(iChannel0, uv + vec2(0.0,mask.b*-0.25)).b * mix(1.0,5.0,mask.b);\n    oColor *= mask.a;\n    \n    fragColor = oColor;\n    \n\n/*\n    vec4 color = vec4(0.0,1.0,1.0,1.0);\n    color *= 1.0;\n\n    float T_MAX = 1.50;\n    float time = mod(iTime, T_MAX);\n    float t = time/ T_MAX;\n    //t = 0.5;\n    t = 1.0-t;\n    \n    //t = 1.0;\n    //t = 0.01;\n    //t = 0.25;\n    \n    float progress = t;\n    //progress = easeOutExpo(progress);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n\n    float stretch  = 0.0;\n    float ts = mix(0.0,1.5,progress);\n    stretch = abs(ts-uv.y) ; // / 0.25 ;\n    stretch = 1.0 - stretch;\n    stretch =  clamp(stretch,0.0 ,1.0);\n    \n    \n    float thickness= mix(100.0,2.0,0.99);\n    stretch = pow(stretch,thickness);\n    \n    float xmask = 1.0;\n    if (ts-uv.y < 0.0)\n    {\n        xmask = 0.0;\n        stretch = 0.0;\n    }\n    \n    fragColor = vec4(stretch);\n    \n    vec4 oColor =  vec4(0.0);\n\n    \n    float y = uv.y;\n    uv.y = y + (stretch*0.25*-1.0);\n    oColor.r = texture(iChannel0, uv).r;\n    uv.y = y + (stretch*0.20*-1.0);\n    oColor.g = texture(iChannel0, uv).g;\n    uv.y = y + (stretch*0.15*-1.0);\n    oColor.b = texture(iChannel0, uv).b;\n    oColor.a = 1.0;\n    \n    \n    oColor *= xmask * (1.0 - stretch);\n    \n    //oColor = mix(oColor * color,oColor,1.0 - stretch);\n*/\n\n    /*\n    oColor.r *= pow((1.0 - stretch),20.0) ;\n    oColor.g *= pow((1.0 - stretch),1.0) ;\n    oColor.b *= pow((1.0 - stretch),20.0) ;\n    */\n    //fragColor = oColor;\n    \n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MfVfWV","date":"1734489439","viewed":26,"name":"20241217","username":"jgarza9788","description":"20241217","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["20241217"],"hasliked":0,"parentid":"","parentname":""}}