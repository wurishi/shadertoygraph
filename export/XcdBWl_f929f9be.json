{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\n// Extrude and revolve around corners\nvec2 opExtRev( vec3 p, vec2 bx, vec2 bz)\n{\n    // Closest point on rect (replace x or z with 0 for segment)\n    // (replace with closest point on different SDF to wrap\n    //  around that SDF instead e.g. hexagon)\n    vec3 c = vec3(clamp(p.x, bx.x, bx.y), \n                  0,\n                  clamp(p.z, bz.x, bz.y));\n    \n    // 2D coordinate of p-c in plane with axes:\n    // m = vec3(0,1,0)\n    // n = normalize(vec3(p.x-c.x, 0, p.z-c.z))\n    // i.e. p-c = p.y * m + length(p.xz-c.xz) * n\n    p -= c;\n    return vec2(p.y, length(p.xz));\n}\n\nfloat map( in vec3 p )\n{\n    float t = iTime;\n    \n    // Parameters\n    vec2 b = vec2(-.2, .2);\n    vec2 bx = b * (1.+tanh(4.*cos(.7*t))); // x bounds\n    vec2 bz = b * (1.+tanh(4.*sin(.7*t))); // z bounds\n    float th = .005;                       // Thickness\n    \n    vec2 P = opExtRev(p, bx, bz);\n    \n    // Use a 2D sdf with P as coordinate\n    /*\n    P *= rot(-3.14159/2.);\n    return arc(P, 1.5 + 1.5 * sin(.3*t), .2, th);\n    //*/\n    \n    vec2 q = vec2(-.1, .1);\n    vec2 of = .08 * vec2(cos(t), sin(t));\n    return seg(P, q-of, q+of) - th;\n}\n\n\n// The MIT License\n// Copyright Â© 2022 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// https://iquilezles.org/articles/rmshadows\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, float tmin, float tmax, const float k )\n{\n\tfloat res = 1.0;\n    float t = tmin;\n    for( int i=0; i<64; i++ )\n    {\n\t\tfloat h = map( ro + rd*t );\n        res = min( res, k*h/t );\n        t += clamp( h, 0.01, 0.10 );\n        if( res<0.002 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    const float eps = 0.0005;\n    return normalize( e.xyy*map( pos + e.xyy*eps ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*eps ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*eps ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*eps ) );\n}\n    \n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 3\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     // camera movement\t\n\tfloat an = sin(0.2*iTime);\n\tvec3 ro = vec3( 1.0*cos(an), 0.2, 1.0*sin(an) );\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    \n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (2.0*(fragCoord+o)-iResolution.xy)/iResolution.y;\n        #else    \n        vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n        #endif\n\n\t    // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n        // raymarch\n        const float tmax = 5.0;\n        float t = 0.0;\n        for( int i=0; i<256; i++ )\n        {\n            vec3 pos = ro + t*rd;\n            float h = map(pos);\n            if( h<0.0001 || t>tmax ) break;\n            t += h;\n        }\n        \n    \n        // shading/lighting\t\n        vec3 col = vec3(0.0);\n        if( t<tmax )\n        {\n            vec3 pos = ro + t*rd;\n            vec3 nor = calcNormal(pos);\n            vec3 lig = vec3(0.57703);\n            float dif = clamp( dot(nor,lig), 0.0, 1.0 );\n            if( dif>0.001 ) dif *= calcSoftshadow( pos+nor*0.001, lig, 0.001, 1.0, 32.0 );\n            float amb = 0.5 + 0.5*dot(nor,vec3(0.0,1.0,0.0));\n            col = vec3(0.2,0.3,0.4)*amb + vec3(0.8,0.7,0.5)*dif;\n        }\n\n        // gamma        \n        col = sqrt( col );\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n\tfragColor = vec4( tot, 1.0 );\n}","name":"Image","description":"","type":"image"},{"outputs":[],"inputs":[],"code":"// https://iquilezles.org/articles/distfunctions2d/\nfloat arc( in vec2 p, in float theta, in float ra, float rb )\n{\n    vec2 sc = vec2(sin(theta),cos(theta));\n    p.x = abs(p.x);\n    return ((sc.y*p.x>sc.x*p.y) ? length(p-sc*ra) : \n                                  abs(length(p)-ra)) - rb;\n}\n\nfloat seg( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}","name":"Common","description":"","type":"common"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XcdBWl","date":"1733677482","viewed":169,"name":"Extrude-Revolve Operator","username":"SnoopethDuckDuck","description":"This is basically a fusion of the extrude + revolve operators from here: \nhttps://www.shadertoy.com/view/4lyfzw\n\nA 2D SDF is wrapped around a segment or rect, turning as it goes around corners. \n\nThanks iq for the raymarching code + other functions :)","likes":24,"published":3,"flags":0,"usePreview":0,"tags":["procedural","3d","raymarching","distancefield","sdf","primitives","segment","arc","extrude","operator","extrusion","revolution","revolve"],"hasliked":0,"parentid":"XccfW2","parentname":"Arc on Arc SDF"}}