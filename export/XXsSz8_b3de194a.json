{"ver":"0.1","info":{"id":"XXsSz8","date":"1716556749","viewed":73,"name":"bouncing ball by Erik","username":"eriben0628","description":"sdsd","likes":3,"published":1,"flags":8,"usePreview":0,"tags":["sdsd"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define LightPos vec3(-3.0,-0.5,2.0)\n#define LightColor vec4(1.0,1.0,1.0,1.0)\n#define LightStrength 10.0\n#define SphereColor vec4(0.8,0.2,0.1,1.0)\n#define PlaneColor vec4(0.7)\n\n\nfloat sqr(float x) {\n    return x*x;\n}\n\nvec4 distanceToSphere(vec3 O, vec3 D, vec3 C, float r) {\n    float determinant = r*r - dot(O-C,O-C) + sqr(dot(D, (O-C)));\n    \n    if(determinant >= 0.0) {\n        float t = -dot(D, O-C) - sqrt(determinant);\n        if( dot(D, O-C) > 0.0 ) return vec4(0.0,0.0,0.0,1000000.0);\n        vec3 P = O + D*t;\n        return vec4((P-C)/r,t);        \n    }\n    \n    return vec4(0.0,0.0,0.0,1000000.0);\n}\n\nvec4 distanceToPlane(vec3 O, vec3 D, vec3 C, vec3 N) {\n    float t = dot(C-O,N)/dot(D,N);\n    if(t <= 0.1) return vec4(0.0,0.0,0.0,1000000.0);\n    return vec4(N,t);\n}\n\nvec3 rand(vec2 co){\n    float x = fract(sin(dot(co, vec2(12.9298, 78.233))) * 43758.5453);\n    float y = fract(cos(dot(co, vec2(15.9898, 78.233))) * 43758.5453);\n    float z = fract(sin(dot(co, vec2(16.9833, 78.233))) * 43758.5453);\n    \n    return vec3 (x,y,z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv*2.0-1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    \n    vec3 Dir = normalize(vec3(uv,1.0));\n    vec3 Origin = vec3(0.0,0.0,-1.0);\n    \n    float height = 1.0;\n    float gravity = 9.82;\n    float T = 2.0*sqrt(2.0*height/gravity);\n    float X = mod(iTime,T);\n    \n    float Y = X*sqrt(2.0*gravity*height) - gravity*X*X*0.5;\n    \n    //vec3 SphereCenter = vec3(1.0,-1.0+sin(iTime*3.0), 3.0);\n    vec3 SphereCenter = vec3(1.0,-1.0+Y, 3.0);\n    vec3 PlaneCenter = vec3(0.0,-2.0,0.0);\n\n    vec4 SphereHit = distanceToSphere(Origin, Dir, SphereCenter, 1.0);\n    vec4 PlaneHit = distanceToPlane(Origin, Dir, PlaneCenter, vec3(0.0,1.0,0.0));\n    \n    if(min(SphereHit.w,PlaneHit.w) > 1000.0) {\n        fragColor = vec4(0.0);\n        return;\n    }\n    \n    vec4 color;\n    \n    if(SphereHit.w < PlaneHit.w) {\n        vec3 P = Origin + Dir*SphereHit.w;\n        vec3 L = normalize(LightPos - P);\n        \n        float TowardsLightDist = distanceToPlane(P, L, PlaneCenter, vec3(0.0,1.0,0.0)).w;\n        float InShadow = sign(TowardsLightDist - length(P-LightPos));\n        \n        \n        float diffuse = max(dot(SphereHit.xyz, L),0.0)*0.5*InShadow+0.5;\n        color = LightStrength*SphereColor*LightColor*diffuse/length(P-LightPos);\n        color /= 1.0+color;\n    }\n    else {\n        vec3 P = Origin + Dir*PlaneHit.w;\n        float Diffuse = 0.0;\n        \n        for(int i = 0; i< 100; i++) {\n            vec3 LP = LightPos + rand(vec2(float(i)))*0.8; \n            vec3 L = normalize(LP - P);\n        \n            float TowardsLightDist = distanceToSphere(P, L, SphereCenter, 1.0).w;\n            float InShadow = sign(TowardsLightDist - length(P-LightPos));\n            float diffuse = max(dot(PlaneHit.xyz, L),0.0)*0.5*InShadow+0.5;\n            Diffuse += diffuse*0.01;\n        }\n        \n        color = LightStrength*PlaneColor*LightColor*Diffuse/length(P-LightPos);\n        color /= 1.0+color;\n    \n    }\n    \n    \n\n    // Output to screen\n    fragColor =color;//distanceToSphere(Origin, Dir, vec3(1.0,-1.0,3.0), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 mainSound( int samp, float time )\n{\n\n    float height = 1.0;\n    float gravity = 9.82;\n    float T = 2.0*sqrt(2.0*height/gravity);\n    float X = mod(time,T);\n    \n    float t = mod(time, 10.0);\n    float value = sin(6.2831*220.0*t)+sin(6.2831*440.0*t)*0.5;\n    \n    // A 440 Hz wave that attenuates quickly overt time\n    return vec2( value*exp(-5.0*X) );\n}","name":"Sound","description":"","type":"sound"}]}