{"ver":"0.1","info":{"id":"MXGXRR","date":"1719823729","viewed":55,"name":"metallic metaballs","username":"valvw","description":"metaballs","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["metaballs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 200\n#define MIN_DIST 0.001\n#define MAX_DIST 100.0\n\nfloat sdSphere(vec3 p, float s) {\n    return length(p) - s;\n}\n\nfloat opSmoothUnion(float d1, float d2, float k) {\n    float h = max(k - abs(d1 - d2), 0.0);\n    return min(d1, d2) - h * h * 0.25 / k;\n}\n\nfloat scene(vec3 p) {\n    float k = 0.4; // Smoothing factor\n    float d = 1e10;\n\n    // movement\n    for (int i = 0; i < 10; i++) {\n        float angle = iTime * (0.5 + float(i) * 0.1);\n        vec3 pos = vec3(sin(angle + float(i)) * 1.0, cos(angle * 1.5 + float(i)) * 1.0, sin(angle * 0.5 + float(i)) * 1.0);\n        d = opSmoothUnion(d, sdSphere(p - pos, 0.4), k); \n    }\n\n    return d;\n}\n\nvec3 getNormal(vec3 p) {\n    vec2 e = vec2(0.001, 0.0);\n    return normalize(vec3(\n        scene(p + e.xyy) - scene(p - e.xyy),\n        scene(p + e.yxy) - scene(p - e.yxy),\n        scene(p + e.yyx) - scene(p - e.yyx)\n    ));\n}\n\nvec3 render(vec3 ro, vec3 rd) {\n    vec3 p = ro;\n    float t = 0.0;\n    for (int i = 0; i < 100; i++) {\n        float d = scene(p);\n        if (d < 0.001) break;\n        t += d;\n        p = ro + t * rd;\n    }\n    \n    vec3 color = vec3(0.0);\n    if (t < 10.0) {\n        vec3 normal = getNormal(p);\n        vec3 lightDir = normalize(vec3(5.0, 5.0, -5.0));\n        float diff = max(dot(normal, lightDir), 0.0);\n        \n        vec3 viewDir = normalize(ro - p);\n        vec3 reflectDir = reflect(-viewDir, normal);\n        float spec = pow(max(dot(viewDir, reflectDir), 0.0), 128.0); // Increased the shininess\n        \n        vec3 baseColor = vec3(0.2, 0.2, 0.2);  // Base color similar to mercury\n        vec3 highlightColor = vec3(0.9);  // Highlight color for metallic look\n        \n        vec3 envColor = vec3(1.0, 1.0, 1.0) * pow(max(dot(reflectDir, normal), 0.0), 8.0); \n\n        color = baseColor * diff + highlightColor * spec + envColor * 0.8; \n\n        vec3 ambient = vec3(0.05);  \n        color += ambient;\n    }\n\n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec3 ro = vec3(0.0, 0.0, -3.0);\n    vec3 rd = normalize(vec3(uv, 1.0));\n\n    vec3 color = render(ro, rd);\n    \n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}