{"ver":"0.1","info":{"id":"XlVSDG","date":"1485887385","viewed":99,"name":"eriwine_reveal","username":"eriwine","description":"viewport reveals other texture\nhold left mouse button to move","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["reveal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Radius of the circle (percent 0-1)\nfloat radius = 0.1;\n\nmat3 blur = mat3(\n 0.111, 0.111, 0.111,\n 0.111, 0.111, 0.111,\n 0.111, 0.111, 0.111\n);\n\nmat3 sharpen = mat3(\n 0.0, -1.0, 0.0,\n -1.0,  5.0, -1.0, \n 0.0, -1.0, 0.0\n);\n\nmat3 edgeDetection = mat3(\n -1.0, -1.0, -1.0,\n -1.0,  8.0, -1.0, \n -1.0, -1.0, -1.0\n);\n\nmat3 emboss = mat3(\n -2.0, -1.0, 0.0,\n -1.0,  1.0, 1.0, \n  0.0, 1.0, 2.0\n);\n\nmat3 edgeEnhance = mat3(\n 0.0, 0.0, 0.0,\n -1.0,  1.0, 0.0, \n 0.0, 0.0, 0.0\n);\n\n//Effect inside the shader\nmat3 effectInside = emboss;\n\n//Effect ouside the circle\nmat3 effectOutside = blur;\n\n//returns the resolution of a sampler 0-3\nvec3 getResolution(sampler2D sampler)\n{\n    if (sampler == iChannel0)\n        return iChannelResolution[0];\n    else if (sampler == iChannel1)\n        return iChannelResolution[1];\n    else if (sampler == iChannel2)\n        return iChannelResolution[2];\n    else\n        return iChannelResolution[3];\n}\n\nvec3 sample(sampler2D sampler, const int x, const int y, in vec2 fragCoord)\n{\n vec3 resolution = getResolution(sampler);\n vec2 uv = (fragCoord.xy / iResolution.xy) * resolution.xy;\n uv = (uv + vec2(x, y)) / resolution.xy;\n return texture(sampler, uv).xyz;\n}\n\nvec3 filter(sampler2D sampler, in vec2 fragCoord, mat3 kernel)\n{\n vec3 sum = sample(sampler, -1, -1, fragCoord) * kernel[0][0]\n + sample(sampler,-1, 0, fragCoord) * kernel[0][1]\n + sample(sampler,-1, 1, fragCoord) * kernel[0][2]\n + sample(sampler, 0, -1, fragCoord) * kernel[1][0]\n + sample(sampler, 0, 0, fragCoord) * kernel[1][1]\n + sample(sampler, 0, 1, fragCoord) * kernel[1][2]\n + sample(sampler, 1, -1, fragCoord) * kernel[2][0]\n + sample(sampler, 1, 0, fragCoord) * kernel[2][1]\n + sample(sampler, 1, 1, fragCoord) * kernel[2][2];\n \n return sum;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n vec2 uv = fragCoord.xy / iResolution.xy;\n uv.y*=(iResolution.y/iResolution.x);\n    \n vec2 mouseuv = iMouse.xy / iResolution.xy;\n mouseuv.y*=(iResolution.y/iResolution.x);\n    \n vec2 fc = fragCoord.xy;\n vec3 color;\n    \n    if (length(uv - mouseuv) < radius)\n    {\n        color = filter(iChannel0, fc, effectInside);\n    }\n    else\n    {\n        color = filter(iChannel1, fc, effectOutside);  \n    }\n \n \tfragColor = vec4(color, 1);\n}\n","name":"Image","description":"","type":"image"}]}