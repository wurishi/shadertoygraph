{"ver":"0.1","info":{"id":"4d2yDG","date":"1493595156","viewed":177,"name":"Newton-Raphson Fractal","username":"DonKarlssonSan","description":"A fractal based on the Newtonâ€“Raphson method\nz^3-1 in the complex plane\nUsing smoothing from here:\nhttp://www.hiddendimension.com/fractalmath/Convergent_Fractals_Main.html","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","newton"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Complex Number math by julesb\n// https://github.com/julesb/glsl-util\n\n#define PI 3.14159265\n\n#define cx_mul(a, b) vec2(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x)\n#define cx_div(a, b) vec2(((a.x*b.x+a.y*b.y)/(b.x*b.x+b.y*b.y)),((a.y*b.x-a.x*b.y)/(b.x*b.x+b.y*b.y)))\n#define cx_modulus(a) length(a)\n#define cx_conj(a) vec2(a.x,-a.y)\n#define cx_arg(a) atan2(a.y,a.x)\n#define cx_sin(a) vec2(sin(a.x) * cosh(a.y), cos(a.x) * sinh(a.y))\n#define cx_cos(a) vec2(cos(a.x) * cosh(a.y), -sin(a.x) * sinh(a.y))\n\nvec2 cx_sqrt(vec2 a) {\n    float r = sqrt(a.x*a.x+a.y*a.y);\n    float rpart = sqrt(0.5*(r+a.x));\n    float ipart = sqrt(0.5*(r-a.x));\n    if (a.y < 0.0) ipart = -ipart;\n    return vec2(rpart,ipart);\n}\n\nvec2 cx_tan(vec2 a) {return cx_div(cx_sin(a), cx_cos(a)); }\n\nvec2 cx_log(vec2 a) {\n    float rpart = sqrt((a.x*a.x)+(a.y*a.y));\n    float ipart = atan(a.y,a.x);\n    if (ipart > PI) ipart=ipart-(2.0*PI);\n    return vec2(log(rpart),ipart);\n}\n\nvec2 cx_mobius(vec2 a) {\n    vec2 c1 = a - vec2(1.0,0.0);\n    vec2 c2 = a + vec2(1.0,0.0);\n    return cx_div(c1, c2);\n}\n\nvec2 cx_z_plus_one_over_z(vec2 a) {\n    return a + cx_div(vec2(1.0,0.0), a);\n}\n\nvec2 cx_z_squared_plus_c(vec2 z, vec2 c) {\n    return cx_mul(z, z) + c;\n}\n\nvec2 cx_sin_of_one_over_z(vec2 z) {\n    return cx_sin(cx_div(vec2(1.0,0.0), z));\n}\n\n\n////////////////////////////////////////////////////////////\n// end Complex Number math by julesb\n////////////////////////////////////////////////////////////\n\n#define cx_sub(a, b) vec2(a.x - b.x, a.y - b.y)\n#define cx_abs(a) sqrt(a.x * a.x + a.y * a.y)\n\n\n// z^3 - 1  \nvec2 f(vec2 z) {\n  vec2 z3 = cx_mul(z, cx_mul(z, z));\n  return vec2(z3.x - 1.0, z3.y);\n} \n\n// f(z) derivated\n// 3z^2  \nvec2 fPrim(vec2 z) {\n  vec2 z2 = cx_mul(z, z);\n  return vec2(3.0*z2.x, 3.0*z2.y);\n}\n\n\nint maxIterations = 50;\nvec2 one = vec2(1, 0);\nfloat newtonRapson(vec2 z, vec2 uv) {\n    vec2 oldZ = z;\n\tfloat s = 0.0;\n    \n    for(int i = 0; i < maxIterations; i++){\n        z = cx_sub(z, cx_div(f(z), fPrim(z))); \n        if(abs(oldZ.x - z.x) < 0.001 && abs(oldZ.y - z.y) < 0.001) {\n            if(uv.x > 0.5) {\n                return s * 3.7;\n            }\n            else {\n           \t    return float(i) * 2.0;\n            }\n        }\n        vec2 w = cx_div(one, cx_sub(oldZ, z));\n        float wAbs = cx_abs(w);\n\n        s += exp(-wAbs);\n        oldZ = z;\n    }\n    return float(maxIterations);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float zoom = (sin(iTime)*0.5+0.5)*3.0+0.3;\n    vec2 scaled = zoom*(uv*6.0-3.0);\n    float cs = cos(iTime);\n\tfloat sn = sin(iTime);\n    vec2 rotated = vec2(scaled.x * cs - scaled.y * sn, scaled.x * sn + scaled.y * cs);\n    float c = 1.0 - newtonRapson(rotated, uv) / float(maxIterations);\n    fragColor = vec4(c, c, c, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}