{"ver":"0.1","info":{"id":"l3tGWr","date":"1716363652","viewed":69,"name":"posterize antialiased","username":"weepy","description":"x","likes":1,"published":1,"flags":2,"usePreview":0,"tags":["x"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ShaderToy GLSL code for a posterization effect with anti-aliasing\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec4 texColor = texture(iChannel0, uv);\n    \n    // Define your input colors\n    const vec3 colors[6] = vec3[](\n        vec3(0.0, 0.0, 0.0), // BLACK\n        vec3(1.0, 1.0, 1.0),  // WHITE\n        vec3(0.0, 1.0, 0.0), // Green\n        vec3(0.0, 0.0, 1.0), // Blue\n        vec3(1.0, 1.0, 0.0), // Yellow\n        vec3(0.0, 1.0, 1.0)  // Cyan\n\n    );\n\n    // Find the nearest color for the current pixel color\n    vec3 nearestColor = colors[0];\n    float minDistance = distance(texColor.rgb, colors[0]);\n    \n    for (int i = 1; i < 6; i++) {\n        float d = distance(texColor.rgb, colors[i]);\n        if (d < minDistance) {\n            minDistance = d;\n            nearestColor = colors[i];\n        }\n    }\n    \n    // Posterize the color\n    vec3 posterizedColor = nearestColor;\n\n    // Anti-aliasing\n    float aaRadius = 2.0 / iResolution.x; // Anti-aliasing radius\n    vec3 sumColor = vec3(0.0);\n    float totalWeight = 0.0;\n    \n    for (int dx = -1; dx <= 1; dx++) {\n        for (int dy = -1; dy <= 1; dy++) {\n            vec2 offset = vec2(dx, dy) * aaRadius;\n            vec4 sampleColor = texture(iChannel0, uv + offset);\n            \n            // Find the nearest color for the sample color\n            vec3 nearestSampleColor = colors[0];\n            float minSampleDistance = distance(sampleColor.rgb, colors[0]);\n            \n            for (int j = 1; j < 6; j++) {\n                float d = distance(sampleColor.rgb, colors[j]);\n                if (d < minSampleDistance) {\n                    minSampleDistance = d;\n                    nearestSampleColor = colors[j];\n                }\n            }\n            \n            float weight = 1.0 / (1.0 + distance(texColor.rgb, sampleColor.rgb));\n            sumColor += nearestSampleColor * weight;\n            totalWeight += weight;\n        }\n    }\n    \n    vec3 finalColor = sumColor / totalWeight;\n\n    fragColor = vec4(finalColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}