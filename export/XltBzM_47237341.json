{"ver":"0.1","info":{"id":"XltBzM","date":"1539048946","viewed":126,"name":"forest fire-Nature","username":"jkashimura","description":"HW","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["beginner"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define repeat(v, r) (mod(v, r)-r/2.)\n\nstruct Shape{\n  float dist;\n  vec4 color;\n};\n\n\n    \n//=======================\n// Utility Functions\n//=======================\nfloat random(vec2 v) {\n  return fract(sin(dot(v*0.1, vec2(324.654, 156.546)))/46556.2);\n}\n\nmat2 rot(float a){\n  float r = cos(a);\n  float f = sin(a);\n  return mat2(r, f, -f, r);\n}\n\n\nfloat pole(vec2 v, float r){\n  return length(v)-r;\n}\nfloat sphere(vec3 v, float r){\n  return length(v)-r;\n}\nfloat box(vec3 v, float r, float m) {\n  return max(length(v.xy)-r, abs(v.z)-m);\n}\n\n\n\nfloat mixColors(float r, float v, float z){\n  return clamp(0.5+0.5*(v-r)/z, 0., 1.);\n}\n\nfloat mixShapes(float v, float f, float r){\n  float z = mixColors(v, f, r);\n  return mix(f,v,z)-r*z*(1.-z);\n}\n\nfloat pModPolar(inout vec2 v, float r){\n  float f = 6.28318/r;\n  float z = atan(v.y, v.x)+f*0.5;\n  float m = floor(z/f);\n  z = mod(z, f)-f*0.5;\n  v = vec2(cos(z), sin(z))*length(v);\n  return m;\n}\n//=======================\n\nShape vines(vec3 c){\n  Shape shape;\n  float vine;\n  shape.dist = 1000.; // Draw Distance\n  shape.color = vec4(1.); // Initial Color\n\n  // Shape Attributes\n  float twist = 10.; // Vine Repeat\n  float vineOffset = 3.; // Leaf Offset\n\n\n\tvineOffset -= tan(iTime*0.5)+0.5;\n\n  // Stems\n  \tvec3 i = c;\n    i.xz *= rot(c.y*0.35+iTime); \n    i.y = repeat(i.y, .8); //repeat\n\n    float detail = pModPolar(i.xz, twist); \n    \n    //float x = mix(-2., 1., mod(detail, 1.));// Small Ripples\n    //float x = mix(0., 1., pModPolar(i.xy, 10.)); \n    \n    \n    i.x -= vineOffset; // Offset Stems\n  \tfloat stemWidth = cos(iTime)*.9;\n  \tvine = pole(i.xz, stemWidth+0.02*sin(i.y));\n\n\n  vec4 color = vec4(.1, .1, sin(iTime)*.5+0.8, 1.);\n    \n    float pattern = cos(sin(c.z*10.)) /\n        cos(sin(c.y*2.));\n\n  shape.dist = vine;\n  shape.color = color;\n  shape.color /= pattern;\n\n  return shape;\n}\n\n\nShape orb(vec3 c){\n  Shape shape;\n  float orb;\n  shape.dist = 0.1; // Draw Distance\n  shape.color = vec4(1.,0.5,1.,1.); // Initial Color\n\n  // Stems\n  vec3 i = c;\n    i.xy *= rot(iTime); //rotate\n    i.y = repeat(i.y, .8); //repeat\n    i.x = repeat(i.x, 0.8);\n\n    i.x = abs(i.x)-0.5; //duplicate\n    i.z = abs(i.z)-0.5;\n    orb = sphere(i, cos(sin(iTime)*1.25)*0.25);\n    \n\n  vec4 color = vec4(4.1, 0.75, 7.4, 1.);\n\n  shape.dist = orb;\n  shape.color = color;\n\n  return shape;\n}\n\n\nShape map(vec3 c){\n  Shape vines = vines(c);\n  Shape orbs = orb(c);\n    \n  float df = mixShapes(vines.dist, orbs.dist, 1.);\n  vines.dist = df;\n    \n  vines.color = mix(vines.color, \n                    orbs.color*2., \n                    mixColors(orbs.dist, vines.dist, 1.));\n\n  return vines;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 v = (fragCoord.xy-0.5 * iResolution.xy) / iResolution.y;\n\n  \n  vec3 cam = vec3(0., 0., -10.);\n  vec3 f = normalize(vec3(v, 1.));\n  vec3 scene = cam;\n  fragColor = vec4(0.);\n\n  // Ray Marcher\n  for(float z = 0.1 ; z <= 1.; z += 0.05){\n    Shape c = map(scene); // Calc SDF\n    if(c.dist < 0.01){\n      fragColor = c.color*(1.-z); // Hit  - invert pixels\n      break;\n    }\n    c.dist *= smoothstep(0., cos(iTime)*.2+.2, length(v.x/v.y)); //line in middle\n    scene += f * c.dist;\n\n\n  }\n}\n","name":"Image","description":"","type":"image"}]}