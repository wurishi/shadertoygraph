{"ver":"0.1","info":{"id":"wd3cWl","date":"1601956669","viewed":49,"name":"Cosine Scales","username":"Ezra_Szanton","description":"found a cool effect I liked from overlapping cosine functions","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["cosine","periodic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 blobLayer(vec2 uv, vec2 timeOffset)\n{\n    vec3 col = vec3(0.);\n    uv += iTime * timeOffset;\n    \n    float r = (sin(uv.x)/(2. + abs(4.*sin(iTime))) + cos(uv.y)/(2. + abs(4.*cos(iTime))));\n    float g = (sin(uv.x)/(2. + abs(2.2*sin(iTime))) + cos(uv.y)/(2.523 + abs(4.*cos(iTime))));\n    float b = (sin(uv.x)/(2. + abs(3.14*cos(iTime))) + cos(uv.y)/(2. + abs(4.*cos(iTime))));\n    \n    col += abs (vec3(r,g,b) / 3.);\n    \n    return col;   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.*iResolution.xy)/iResolution.y;\n\n    float size = 20.;\n    \n    uv *= size;\n    \n    \n    vec2 gv = fract(uv * size);\n    vec2 id = floor(uv * size) / size;\n    \n    vec3 col = vec3(0.);\n    col += blobLayer(uv, vec2(-0.2, 0.3));\n    col += blobLayer(uv, vec2(1));\n    col += blobLayer(uv, vec2(1.4, -2.321));\n    \n    col.z = (col.z + 0.5) / 2.;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}