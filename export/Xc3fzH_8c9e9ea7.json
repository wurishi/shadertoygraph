{"ver":"0.1","info":{"id":"Xc3fzH","date":"1732724686","viewed":64,"name":"Kuko Zoom","username":"kukovisuals","description":"Simple fractal with zoom and rotation","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Dynamic wave effect with rotation and zoom using the Mandelbrot set path\n\nfloat calculateMandelbrotSet(vec2 c) {\n    const float escapeRadius = 256.0;\n    float iteration = 0.0;\n    vec2 z = vec2(0.0);\n\n    for (int i = 0; i < 512; i++) {\n        // Perform the Mandelbrot iteration\n        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n        // Check for escape condition\n        if (dot(z, z) > (escapeRadius * escapeRadius)) break;\n        iteration += 1.0;\n    }\n\n    if (iteration > 511.0) return -1.0; // Special value for Mandelbrot points\n\n    // Smooth iteration count for gradient calculation\n    float smoothIteration = iteration - log2(log2(dot(z, z))) + 4.0;\n\n    return smoothIteration;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Initialize color\n    vec3 color = vec3(0.0);\n\n    // Normalize pixel coordinates to range [-1, 1]\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n\n    // Dynamic zoom effect\n    float zoom = 0.0006 * pow(1.5, sin(iTime * 0.1)); // Oscillating zoom\n\n    // Rotation effect\n    float angle = iTime * 0.03; // Rotate over time\n    mat2 rotation = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n\n    // Map screen coordinates to complex plane with rotation and zoom\n    vec2 c = vec2(-0.7381, 0.153) + rotation * uv * zoom;\n\n    // Calculate Mandelbrot iteration count for the point\n    float iteration = calculateMandelbrotSet(c);\n\n    // Apply the effect only to escaped points\n    if (iteration > 0.0) {\n        // Create a glowing wave effect along the Mandelbrot path\n        float wave = 0.5 + 0.5 * sin(iTime * 1.0 + iteration * 0.05);\n        float intensity = exp(-abs(wave - 0.5) * 10.0); // Sharpen the wave\n        color = vec3(0.2, 0.6, 1.0) * intensity; // Blue glow effect\n    }\n\n    // Output the final color\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}