{"ver":"0.1","info":{"id":"wdySzR","date":"1573213288","viewed":104,"name":"Image Processing tests 08112019","username":"clepirelli","description":"A few image processing kernels I tried out after a lecture about the subject","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["blur","edge","kernel","processing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define tex(a) texture(iChannel0, a)\n\n\n//1 : Laplacian\n//2 : low pass filter (mean)\n//3 : Gaussian blur\n//4 : sharpening\n//5 : high pass filter (mean)\n#define KERNEL_TYPE 1\n\n\nfloat kernel[9] =\n#if KERNEL_TYPE == 1\n    float[9](.0, -1., .0, -1., 4., -1., .0, -1., .0);\n#elif KERNEL_TYPE == 2\n\tfloat[9](1./9., 1./9., 1./9., 1./9.,  1./9.,  1./9.,  1./9.,  1./9.,  1./9.);\n#elif KERNEL_TYPE == 3\n\tfloat[9](1./16., 1./8., 1./16., 1./8., 1./4., 1./8., 1./16., 1./8., 1./16.);\n#elif KERNEL_TYPE == 4\n\tfloat[9](1.,1.,1.,1.,-7.,1.,1.,1.,1.);\n#elif KERNEL_TYPE == 5\n\tfloat[9](-1./9.,-1./9.,-1./9.,-1./9.,8./9.,-1./9.,-1./9.,-1./9.,-1./9.);\n#endif\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n        \n    if(fract(iTime/10.) > .5)\n    {\n    \tvec2 pixelSize = 1./iResolution.xy;\n    \tpixelSize.x *= iResolution.x/iResolution.y;\n    \t\n    \tvec3 total = vec3(.0);\n    \tfor(int i = 0; i < 3; i++)\n    \t    for(int j = 0; j < 3; j++)\n    \t    {\n    \t        vec2 sampleUV = vec2(uv.x + float(i-1)*pixelSize.x, uv.y + float(j-1)*pixelSize.y);\n    \t    \t\n    \t        total += tex(sampleUV).xyz*kernel[j*3+i];\n    \t    }\n        \n    \tvec3 blurIndicator = vec3(.0,1.0,.0)*smoothstep(.05, .045,distance(uv, vec2(.1)));\n        \n        \n        fragColor = vec4(clamp(total,.0,1.)+blurIndicator,1.0);\n    } else \n    {\n    \tfragColor = tex(uv);\n    }\n}","name":"Image","description":"","type":"image"}]}