{"ver":"0.1","info":{"id":"lfSXR1","date":"1706021578","viewed":23,"name":"Painful Kaleidoscolonoscopy","username":"PG_TG","description":"Description","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tag"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*-----------------------------\n  PAINFUL KALEIDOSCOLONOSCOPY\n-----------------------------*/\n\n#define PI acos(-1.0)\n\n// POLYGON FUNCTION\nvec4 polygon(vec2 uv, vec2 pos, float s, float rot, float sides, vec3 col) {\n    uv -= pos;\n    float a = atan(uv.x, uv.y) + rot;\n    float r = (PI * 2.0)/sides;\n    float d = cos(floor(0.5 + a/r) * r - a) * length(uv);\n    return vec4(col, step(s, d));\n}\n\n// ROTATION FUNCTION\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle), -sin(_angle),\n                sin(_angle), cos(_angle));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Secondary UV for vignette\n    vec2 uv2 = uv;\n    uv2 *= 1.0 - uv2.yx;\n\n    // Tertiary UV for scanlines\n    vec2 uv3 = uv;\n    uv3 = uv3 * 2. - 1.;\n    uv3.x *= iResolution.x/iResolution.y;\n\n    // Aspect Ratio Fix\n    uv = uv * 2. - 1.;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    // UV Movement\n    uv *= rotate2d(iTime/3.);\n    uv *= 3.0 + cos(iTime/6.) * 3.0;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    // Set up background\n    vec4 background, foreground;\n    background = vec4(col, 1.0);\n    \n    // Draw layers\n    vec2 uv4 = uv;\n    vec3 col2 = col;\n    float size = 5.0;\n    for (float i = 1.0; i <= 32.0; i++) {\n        uv2 = -uv2;\n        col2 = 1.0 - col2;\n        foreground = polygon(\n            uv4,\n            vec2(0.),\n            size * 1.1,\n            0.0,\n            6.0 + sin(iTime/2.0) * 3.0,\n            vec3(1.)\n        );\n        background = mix(foreground, background, foreground.a);\n        foreground = polygon(\n            uv4,\n            vec2(0.),\n            size * 1.05,\n            0.0,\n            6.0 + sin(iTime/2.0) * 3.0,\n            vec3(0.)\n        );\n        background = mix(foreground, background, foreground.a);\n        foreground = polygon(\n            uv4,\n            vec2(0.),\n            size,\n            0.0,\n            6.0 + sin(iTime/2.0) * 3.0,\n            col2\n        );\n        size = size/2.;\n        background = mix(foreground, background, foreground.a);\n    }\n    // Vignette Layer\n    float vig = uv2.x * uv2.y * 32.;\n    vig = pow(vig, 0.66);\n    foreground = vec4(vig);\n\n    // Scanlines\n    float count = iResolution.y * 16.;\n    vec2 sl = vec2(sin(uv3.y * count), cos(uv3.y * count));\n\tvec3 scanlines = vec3(sl.x, sl.y, sl.x);\n    foreground = mix(foreground, vec4(scanlines, 1.0), foreground.a);\n\n    // Output to screen\n    fragColor = mix(foreground, background, foreground.a);\n}","name":"Image","description":"","type":"image"}]}