{"ver":"0.1","info":{"id":"MtVcRV","date":"1536972279","viewed":120,"name":"Homestuck Aspect Hope","username":"dahart","description":"Homestuck Aspect Hope. Use mouse to scrub time.\nInspired by https://www.reddit.com/r/homestuck/comments/7eemlw/hope_pixel_art/","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","animation","aspect","homestuck","hope","eridan","yokcos"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// https://www.reddit.com/r/homestuck/comments/7eemlw/hope_pixel_art/ (found via https://www.reddit.com/user/yokcos700/posts?sort=top)\n// https://www.reddit.com/r/PixelArt/comments/7j0h0t/homestuck_aspects_oc/\n// http://mspaintadventures.wikia.com/wiki/Aspect\n\n//#define PIXELATE\n\n#define H(a,b,t) (step(a,t)*(1.-step(b,t)))\n\n#define white vec3(1.0, 1.0, 1.0)\n#define orange vec3(0.98, 0.76, 0.2)\n//const vec2 texSize = vec2(1.0, 1.0) / 64.0;\n\nconst vec3 curve1[8] = vec3[8](\n                       vec3(0.50, 0.43, 0.03)\n                      ,vec3(0.40, 0.50, 0.04) \n                      ,vec3(0.31, 0.68, 0.06) \n                      ,vec3(0.18, 0.68, 0.05)\n                      ,vec3(0.11, 0.64, 0.04)\n                      ,vec3(0.04, 0.69, 0.02)\n                      ,vec3(0.07, 0.74, 0.01)\n                      ,vec3(0.10, 0.72, 0.003));\n\nconst vec3 curve2[8] = vec3[8](\n                       vec3(0.50, 0.40, 0.02)\n                      ,vec3(0.38, 0.43, 0.02) \n                      ,vec3(0.33, 0.46, 0.03) \n                      ,vec3(0.29, 0.51, 0.022)\n                      ,vec3(0.25, 0.60, 0.025)\n                      ,vec3(0.15, 0.58, 0.025)\n                      ,vec3(0.08, 0.58, 0.01)\n                      ,vec3(0.06, 0.61, 0.003));\n\nconst vec3 curve3[8] = vec3[8](\n                       vec3(0.51, 0.36, 0.02)\n                      ,vec3(0.40, 0.38, 0.021) \n                      ,vec3(0.30, 0.40, 0.03) \n                      ,vec3(0.25, 0.46, 0.025)\n                      ,vec3(0.21, 0.49, 0.025)\n                      ,vec3(0.18, 0.50, 0.025)\n                      ,vec3(0.15, 0.46, 0.015)\n                      ,vec3(0.16, 0.43, 0.01));\n\nfloat stripe(vec2 uv, vec2 p, vec2 r) {\n    vec2 d = abs(uv - p) - r;\n    if (all(lessThan(d, X.yy))) return 1.0;\n    return 0.0;\n}\n\nfloat stripeRep(float t, vec2 uv, vec2 p, vec2 r, vec2 v) {\n    return stripe(uv+X.yx*r.y, X*p + mod((X.xx*t+X.yx*p)*v,1.0+2.0*r.y), r);\n}\n\nfloat sdCurve(vec2 p, int n, vec3[8] pts) {\n    // use 0 and n to include endpoints\n    float d = sdBezier(p, pts[0], pts[0], 0.5*(pts[0]+pts[1])).x;\n    int n1 = n-1;\n    for (int i = 1; i < n1; i++) \n    {\n        d = min(d, sdBezier(p, 0.5*(pts[i-1]+pts[i]), pts[i], 0.5*(pts[i]+pts[i+1])).x);\n    }\n    d = min(d, sdBezier(p, 0.5*(pts[n1-1]+pts[n1]), pts[n1], pts[n1]).x);\n    return d;\n}\n\nvec3 hope( vec2 uv, float time, float dx )\n{\n    float color = 0.;\n    float d;\n\n    // BG stripes\n    const float x1 = 10./64.;\n    const float x2 = 24./64.;\n    if      ( uv.x < x1 || uv.x > (1.-x1) ) color = 0.;\n    else if ( uv.x < x2 || uv.x > (1.-x2) ) color = 1.;\n    else                                    color = 2.;\n    \n    // feet\n    if (uv.y < 0.2 && uv.x > 0.2 && uv.x < 0.8) {\n        float a = radians(20.0);\n        vec2 s = vec2(1.0, 1.5);\n        d = maxFloat;\n        if (uv.x < 0.5) {\n            d = min(d, length( (uv - vec2(0.35, 0.1)) * rot(-a) * s ) - 0.1);\n            d = min(d, length( (uv - vec2(0.36, 0.02)) * rot(a+a) * s ) - 0.08);\n        } else {\n            d = min(d, length( (uv - vec2(0.65, 0.1)) * rot(a) * s ) - 0.1);\n            d = min(d, length( (uv - vec2(0.64, 0.02)) * rot(-a-a) * s ) - 0.08);\n        }\n        if (d < dx) color -= 1. * S(0., -dx, d);\n    }\n    \n    // hair & horns\n    if (uv.y > 0.78 && uv.x > 0.2 && uv.x < 0.8) {\n        vec2 huv = vec2(0.5-abs(uv.x-0.5), uv.y);    \n        d = maxFloat;\n        d = min(d, sdBezier(huv, \n                     vec3(0.30, 0.92, 0.03),\n                     vec3(0.22, 0.89, 0.01),\n                     vec3(0.26, 0.80, 0.005)).x);\n        d = min(d, sdBezier(uv, \n                     vec3(0.31, 0.92, 0.03),\n                     vec3(0.45, 1.04, 0.08),\n                     vec3(0.69, 0.92, 0.03)).x);\n        d = min(d, sdBezier(uv, \n                     vec3(0.37, 0.94, 0.03),\n                     vec3(0.42, 0.90, 0.02),\n                     vec3(0.42, 0.87, 0.00)).x);\n        d = min(d, sdBezier(uv, \n                     vec3(0.45, 0.95, 0.05),\n                     vec3(0.55, 0.88, 0.03),\n                     vec3(0.55, 0.82, 0.00)).x);\n        d = min(d, sdBezier(uv, \n                     vec3(0.57, 0.94, 0.03),\n                     vec3(0.65, 0.88, 0.02),\n                     vec3(0.65, 0.85, 0.00)).x);\n        if (d < dx) color -= 1.*S(0., -dx, d);\n    }\n            \n    // stripes\n    float nStripes = 64.0;\n    float width = 1. / nStripes;\n    float stripeId = floor(uv.x * nStripes);\n    float x = stripeId / nStripes;\n    vec4 rnd = texelFetch(iChannel0, ivec2(stripeId, 7), 0);\n    float y = rnd.y;\n    if (int(stripeId) % 2 == 0) {\n        // moving stripes\n        float height = 0.05 + rnd.x * 0.05;\n        float vel = 1.0 + rnd.z;\n        if (stripeRep(time, uv, vec2(x,y), vec2(width, height), vec2(0.0, vel)) > 0.5) color = 2.;\n    } else {\n        // stationary stripes\n\t    //if (uv.x > 0.19 && uv.x < 0.81) y = mix(0.25, 0.7, y); // keep stationary stripes off hair & feet\n        float height = (0.05 + rnd.x * 0.05) * (1.0 + 0.15 * sin(9.0 * (1.0+rnd.z) * (time + rnd.z)));\n        float vel = 1.0 + rnd.z;\n\n        if (stripe(uv, vec2(x,y), vec2(width, height)) > 0.5) {\n            if (color >= 1.5) color -= 1.;\n            else color += 1.;\n        }\n    }\n\n    // flashing, shaking symbol of hope\n    if (uv.y > 0.2 &&  uv.y < 0.8) {\n        float shakeFreq = 5.0;\n        float shake = sin(shakeFreq*pi*time);\n        vec2 buv = vec2(0.5-abs(uv.x+0.01*shake-0.5), uv.y);    \n        d = maxFloat;\n        d = min(d, sdCurve(buv, 8, curve1));\n        d = min(d, sdCurve(buv, 8, curve2));\n        d = min(d, sdCurve(buv, 8, curve3));\n        d = min(d, sdBezier(buv, \n                             vec3(0.50, 0.38, 0.03)\n                            ,vec3(0.42, 0.31, 0.02)\n                            ,vec3(0.33, 0.24, 0.0)\n                            ).x);\n        const float b0 = 0.0;\n        const float b1 = 0.01;\n        const float b2 = 0.025;\n        if (d < b2) { \n            float shakeTime = shakeFreq * time;\n            float s = H(0., 1., mod(shakeTime, 4.));\n            float bright = 2. * (1.-fract(shakeTime)) * s;\n            color = mix(color, 2., S(b2, b2-dx, d));\n            if (d < b1+dx) {\n            \tcolor = mix(color, 0. + bright, S(b1, b1-dx, d));\n            \tif (d < b0+dx) { \n                    color = mix(color, 1. + bright, S(b0, b0-dx, d)); \n                }\n            }\n        }\n    }\n    \n    return mix(orange, white, S(0., 2., color));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float margin = (iResolution.x - iResolution.y) / 2.0;\n\tvec2 uv = (fragCoord.xy - X*margin) / iResolution.yy;\n    float dx = fwidth(length(uv)) * 1.5;\n    float time = iTime + iMouse.x/iResolution.x;\n    \n#ifdef PIXELATE\n    uv = floor(uv * 64.) / 64.;\n    time = floor(time * 16.) / 16.;\n#endif // PIXELATE\n\n    fragColor = vec4(0.);\n    if (uv.x >= 0.0 && uv.x <= 1.0) fragColor = vec4(hope(uv, time, dx), 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\n#define S(a,b,t) smoothstep(a,b,t)\n#define unlerp(a,b,t) ((t-a)/(b-a))\n#define v30 vec3(0.)\n\n// lump between a and b. \n// returns 0 when t is outside [a,b]\n// returns 1 at t=(a+b)/2.\n// smoothstep from center to either end (t==a, t==b)\nfloat L(float a, float b, float t) {\n    float u = unlerp(a, b, t);\n    return S(0., 1., 2.*u) * S(0., 1., 2. - u*2.);\n}\n\n// take [0, 1], return [0, .5] + [.5, 0]\nfloat mirror(float x) { return .5-abs(x-.5); }\n\nfloat N(float t) {\n\treturn fract(sin(t*10234.324)*123423.23512);\n}\n\n// remove r from n, i.e., project n onto plane with normal r\nvec3 remove(vec3 n, vec3 r) {\n    return n - r * dot(n, r) / dot(r, r);\n}\nvec2 remove(vec2 n, vec2 r) {\n    return n - r * dot(n, r) / dot(r, r);\n}\n\nvec2 rot90(vec2 v) {\n    return vec2(v.y, -v.x);\n}\n\nconst vec2 X = vec2(1., 0.);\nconst vec3 nop = vec3(-1., 0., 1.);\nconst float pi = 4. * atan(1.); //3.14159265358979323;\nconst float tau = 8. * atan(1.); //2. * pi;\nconst float maxFloat = intBitsToFloat(0x7f7fffff);\n\nvec4 premult(vec4 color) {\n    return vec4(color.rgb * color.a, color.a);\n}\n\nvec4 premult(vec3 rgb, float alpha) {\n    return vec4(rgb * alpha, alpha);\n}\n\nvec4 comp(vec4 bg, vec4 fg) {\n    return fg + bg * (1. - fg.a);\n}\n    \nvec4 comp(vec4 bg, vec3 fg, float a) {\n    return vec4(fg + bg.rgb * (1. - a), bg.a + a);\n}\n    \nvec3 comp(vec3 bg, vec3 fg, float a) {\n    return fg + bg * (1. - a);\n}\n\n//https://www.shadertoy.com/view/ltXSDB\n// Solve cubic equation for roots\nvec3 solveCubic(float a, float b, float c)\n{\n    float p = b - a*a / 3., p3 = p*p*p;\n    float q = a * (2.*a*a - 9.*b) / 27. + c;\n    float d = q*q + 4.*p3 / 27.;\n    float offset = -a / 3.;\n    if(d >= 0.) { \n        float z = sqrt(d);\n        vec2 x = (vec2(z, -z) - q) / 2.;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1./3.));\n        return vec3(offset + uv.x + uv.y);\n    }\n    float v = acos(-sqrt(-27. / p3) * q / 2.) / 3.;\n    float m = cos(v), n = sin(v)*1.732050808;//sqrt(3.);\n    return vec3(m + m, -n - m, n - m) * sqrt(-p / 3.) + offset;\n}\n\n// Test if point p crosses line (a, b), returns sign of result\nfloat testCross(vec2 a, vec2 b, vec2 p) {\n    return sign((b.y-a.y) * (p.x-a.x) - (b.x-a.x) * (p.y-a.y));\n}\n\n// Determine which side we're on (using barycentric parameterization)\nfloat signBezier(vec2 A, vec2 B, vec2 C, vec2 p)\n{ \n    vec2 a = C - A, b = B - A, c = p - A;\n    vec2 bary = vec2(c.x*b.y-b.x*c.y,a.x*c.y-c.x*a.y) / (a.x*b.y-b.x*a.y);\n    vec2 d = vec2(bary.y * 0.5, 0.0) + 1.0 - bary.x - bary.y;\n    return mix(sign(d.x * d.x - d.y), mix(-1.0, 1.0, \n        step(testCross(A, B, p) * testCross(B, C, p), 0.0)),\n        step((d.x - d.y), 0.0)) * testCross(A, C, B);\n}\n\n//https://www.shadertoy.com/view/ltXSDB\n// Find the signed distance from a point to a bezier curve\n// returns a vec4: (dist to boundary, dist to curve, sign, parameter [0-1])\nvec4 sdBezier(vec2 p, vec3 A, vec3 B, vec3 C)\n{    \n    //B = (4.0 * B - A - C) / 2.0;\n    // handle instability when B is midpoint between A and C\n    //B = vec3(mix(B.xy + vec2(1e-4), B.xy, abs(sign(B.xy * 2.0 - A.xy - C.xy))), B.z);\n    \n    vec3 a = B - A;\n    vec3 b = A - B * 2.0 + C;\n    vec3 c = a * 2.0;\n    vec2 d = A.xy - p;\n    \n    vec3 k = vec3(3.*dot(a.xy,b.xy),2.*dot(a.xy,a.xy)+dot(d.xy,b.xy),dot(d.xy,a.xy)) / dot(b.xy,b.xy);      \n    vec3 t = clamp(solveCubic(k.x, k.y, k.z), 0., 1.);\n    vec3 it = vec3(1.0) - t;\n\n    vec3 pos0 = A + (c + b*t.x)*t.x;\n    vec3 pos1 = A + (c + b*t.y)*t.y;\n    vec3 pos2 = A + (c + b*t.z)*t.z;\n\n    float dis0 = length(pos0.xy - p) - pos0.z;\n    float dis1 = length(pos1.xy - p) - pos1.z;\n    float dis2 = length(pos2.xy - p) - pos2.z;\n    \n\tfloat minT = t.x;\n    vec3 minP = pos0;\n\tfloat minDis = dis0;\n\tif (dis1 < minDis) { minDis = dis1; minT = t.y; minP = pos1; }\n\tif (dis2 < minDis) { minDis = dis2; minT = t.z; minP = pos2; }\n            \n    return vec4(minDis, minDis + minP.z, signBezier(A.xy, B.xy, C.xy, p), minT);\n}\n\nfloat sdBezierMin2(vec2 p, vec3 a, vec3 b, vec3 c, float dist) {\n    vec4 d = sdBezier(p, a, b, c);\n    if (d.x < dist) return d.x;\n    else return dist;\n}\n\nfloat sdBezier2(vec2 p, vec3 a, vec3 b, vec3 c) {\n    vec4 d = sdBezier(p, a, b, c);\n    return d.x;\n}\n\n// returns a vec4: (dist to boundary, dist to curve, sign, parameter [0-1])\nvec4 sdCurve(vec2 p, int n, vec3[16] pts) {\n    int nn = n - 1;\n    vec4 d = vec4(maxFloat);    \n    vec3 pp1 = mix(pts[0], pts[1], -0.001), pp2;\n    float oofn = 1. / (float(n));\n    vec4 e;\n    for (int i = 0; i < nn; i++) {\n        pp2 = .5 * (pts[i] + pts[i+1]);\n        e = sdBezier(p, pp1, pts[i], pp2);\n        pp1 = pp2;\n        if (e.x < d.x) d = vec4(e.xyz, (e.w+float(i))*oofn);\n    }\n    pp2 = pts[nn];\n    e = sdBezier(p, pp1, pts[nn], pp2);\n    if (e.x < d.x) d = vec4(e.xyz, (e.w+float(nn))*oofn);\n\n    // signBezier fails on the first & last segments, here's a patch\n    if (d.w <= oofn) {\n        d.z = dot(p - pts[0].xy, rot90( pts[0].xy - pts[1].xy ) ) < 0. ? 1. : -1.;\n    }\n    else if (d.w >= 1.-oofn) {\n    \td.z = dot(p - pts[nn].xy, rot90( pts[nn-1].xy - pts[nn].xy ) ) < 0. ? 1. : -1.;\n    }\n\n    return d;\n}\n\n// 2 output vectors: curvePoint, curveTangent\nvoid evalBezier(float t, vec2 a, vec2 b, vec2 c, out vec2 curvePoint, out vec2 curveTangent) {\n    t = clamp(t, 0., 1.);\n    curvePoint = mix(mix(a, b, t), mix(b, c, t), t);\n    curveTangent = 2. * (( a + c - 2. * b ) * t + ( b - a ));\n}\n\n// 2 output vectors: curvePoint, curveTangent\nvoid evalCurve(float t, int n, vec3[16] pts, out vec2 curvePoint, out vec2 curveTangent) {\n    float nt = clamp(t, 0.0001, .9999) * float(n);\n    int j = int(nt);\n    int i = max(0, j - 1);\n    int k = min(n-1, j + 1);\n    float tSegment = nt - float(j);\n    \n    vec2 a = pts[i].xy;\n    vec2 b = pts[j].xy;\n    vec2 c = pts[k].xy;\n    \n    a = mix(a, b, .5);\n    c = mix(b, c, .5);\n    \n    curvePoint = mix(mix(a, b, tSegment), mix(b, c, tSegment), tSegment);\n  \tvec2 ba = b-a;\n   \tcurveTangent = 2. * (( c - b - ba ) * tSegment + ( ba ));\n}\n\nstruct Hit {\n    float dBound;\n    float dCurve;\n    float sign;\n    vec2 pos;\n    vec2 tangent;\n    vec3 normal;\n    vec2 uv;\n};\n\n// vec4 d is the same format as return from sdBezier: vec4( dBound, dCurve, sign, param )\nvec2 calcBezierUv(float dBound, float dCurve, float sign, float param) {\n    return vec2(param, .5 + .5 * sign * dCurve / (abs(dBound) + dCurve));\n}\n\nHit calcBezierHit(vec2 uv, vec3 a, vec3 b, vec3 c) {\n    Hit hit;\n    vec4 d = sdBezier(uv, a, b, c);\n    hit.dBound = d.x;\n    hit.dCurve = d.y;\n    hit.sign = d.z;\n    hit.uv = calcBezierUv(d.x, d.y, d.z, d.w);\n    evalBezier(d.w, a.xy, b.xy, c.xy, hit.pos, hit.tangent);\n    float z = sin(hit.uv.y * pi);\n    hit.normal = normalize(vec3( (1.-z)*normalize(uv - hit.pos), .25*z));\n    return hit;\n}\n\nHit calcCurveHit(vec2 uv, int n, vec3[16] pts) {\n    Hit hit;\n    vec4 d = sdCurve(uv, n, pts);\n    hit.dBound = d.x;\n    hit.dCurve = d.y;\n    hit.sign = d.z;\n    hit.uv = calcBezierUv(d.x, d.y, d.z, d.w);\n    evalCurve(d.w, n, pts, hit.pos, hit.tangent);\n    float z = sin(hit.uv.y * pi);\n    hit.normal = normalize(vec3( (1.-z)*normalize(uv - hit.pos), .25*z));\n    return hit;\n}\n\nvec3 calcCurveRoundNormal(vec2 uv, Hit hit) {\n    float z = sin(hit.uv.y * pi);\n    return normalize(vec3( (1.-z)*normalize(uv - hit.pos), .25*z));\n}\n\nvec3 calcCurveTentNormal(vec2 uv, Hit hit) {\n    float z = abs(hit.uv.y);\n    return normalize(vec3( (1.-z)*normalize(uv - hit.pos), .25*z));\n}\n\n// a & b are two points w/ radius. a.xy = 2d point, a.z = radius\n// u=along curve v=perpendicular\nfloat sdFatLine2All(vec2 p, vec3 a, vec3 b, out float distToCurve, out vec2 uv) {\n    vec2 d = b.xy - a.xy;\n    vec2 pd = p - a.xy;\n    float t = dot(pd, d) / dot(d, d);\n    t = min(1.0, max(0.0, t));\n    vec2 cp = a.xy + t * d;\n    \n    vec2 n = p - cp;\n    distToCurve = length(n);\n    \n    // remember a.z & b.z are radius\n    float cr = mix(a.z, b.z, t);\n    float v = .5 + .5 * dot(vec2(-pd.y, pd.x), normalize(d)) / cr;\n    uv = vec2(t, v);\n\n    float distToBoundary = distToCurve - cr;\n    \n    return distToBoundary;\n}\n\nfloat sdFatLine2(vec2 p, vec3 a, vec3 b)\n{\n    float dummy_dc;\n    vec2 dummy_uv;\n    return sdFatLine2All(p, a, b, dummy_dc, dummy_uv);\n}\n\nmat2 rot(float a)\n{\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\treturn mat2(c, s, -s, c);\n}\n\nfloat remap(float v, float min1, float max1, float min2, float max2) {\n    return min2 + (max2 - min2) * (v - min1) / (max1 - min1);\n}\n\nfloat bias(float x, float b) { return pow(x,log(b)/log(0.5)); }\n\nfloat gain(float x, float g) { return (x<0.5) ? bias(2.*x,1.-g)/2. : 1. - bias(2.-2.*x,1.-g)/2.; }\n\nfloat aaFloor(float x) {\n    float dx = 2. * length(vec2(dFdx(x), dFdy(x)));\n    float fx = fract(x), idx = 1. - dx;\n    return (fx < idx) ? x - fx : remap(fx, idx, 1., x-fx, x);\n}\n\nfloat aaFract(float x) {\n    float dx = 2. * length(vec2(dFdx(x), dFdy(x)));\n    float fx = fract(x), idx = 1. - dx;\n    return (fx < idx) ? fx : remap(fx, idx, 1., fx, 0.);\n}\n\nfloat stairs(float x, float steps) {\n    return floor(x * steps) / steps;\n}\n\nfloat stairs2(float x, float steps) {\n    return round(x * steps) / steps;\n}\n\nfloat escalator(float x, float steps, float time) {\n    float dx = 1. / steps;\n    x = remap(x, 0., 1., -dx/2., 1.+dx/2.) + dx/2.;\n    float ex = (x - time*dx) * steps;\n    float ey = (aaFloor(ex) + time) * dx;\n    return clamp(ey, 0., 1.);\n}\n\nvec2 escalatorId(float x, float steps, float time) {\n    float dx = 1. / steps;\n    x = remap(x, 0., 1., -dx/2., 1.+dx/2.) + dx/2.;\n    float ex = (x - time*dx) * steps;\n    float id = floor(ex);\n    float ey = (aaFloor(ex) + time) * dx;\n    return vec2(clamp(ey, 0., 1.), id);\n}\n\nfloat saw(float x) {\n    float mx = mod(x,1.);\n    return 2. * min(mx, 1.-mx);\n}\n\nfloat dline(vec2 p, vec2 lp, vec2 ld) {\n    return dot(p-lp, ld);\n}\n\nfloat sqr(float x) { return x*x; }\n\nfloat d2a (vec2 d) {\n    return atan(d.y, d.x);\n}\n\nvec2 a2d (float a) {\n    return vec2(cos(a), sin(a));\n}\n\nfloat sdEdgeNormal(vec2 x, vec2 p, vec2 normal) {\n    return dot(x-p, normal);\n}\n\nfloat sdEdgePoints(vec2 x, vec2 p1, vec2 p2) {\n    return dot(x-p1, normalize(rot90(p2 - p1)));\n}\n\n\n// lots of distance functions from IQ\n// https://iquilezles.org/articles/distfunctions\n\nfloat sdBox3( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat sdBox2( vec2 p, vec2 b )\n{\n  vec2 d = abs(p) - b;\n  return min(max(d.x,d.y),0.) + length(max(d,0.));\n}\n\nfloat udRoundBox( vec2 p, vec2 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat udBox( vec2 p, vec2 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\n\nfloat sdCircle( vec2 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\nfloat sdCapsule2All( vec2 p, vec2 a, vec2 b, float r, out float distToCenter, out vec2 uv, out vec2 pCenter )\n{\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    distToCenter = length( pa - ba*h );\n    float distToBoundary = distToCenter - r;\n    return distToBoundary;\n}\n\nfloat sdCapsule2( vec2 p, vec2 a, vec2 b, float r )\n{\n    vec2 dummy_pc, dummy_uv;\n    float dummy_dc;\n    return sdCapsule2All(p, a, b, r, dummy_dc, dummy_uv, dummy_pc);\n}\n\n// https://iquilezles.org/articles/smin\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\n// d1 minus d2\nfloat sdSubtract( float d1, float d2 )\n{\n    return max(d1, -d2);\n}\n\n// d1 union d2\nfloat sdUnion( float d1, float d2 )\n{\n    return min(d1, d2);\n}\n","name":"Common","description":"","type":"common"}]}