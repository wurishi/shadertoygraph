{"ver":"0.1","info":{"id":"fdKSRz","date":"1634260543","viewed":96,"name":"The Cherno's Circle Shader","username":"MartianDays","description":"My first shader! A fun little 'bit' from youtuber \"The Cherno\" going over how to draw a circle in Shadertoy. Modified a touch for user-configuration and tweaking. Fun to do.\n\nClick + drag mouse up + down to increase / decrease circle size! :)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["circle","thecherno"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//User-Configurable Vars\n\n//The base-size of the circle.\nfloat size = 1.0;\n//Use mouse + click to set thickness. If false, use static \"thickness\" parameter instead.\nbool useMouseThickness = true;\nfloat thickness = 0.025;\n//softness of the circle edges [can set to 0 for the hard, pure, aliased result.\nfloat fade = 0.01;\n//the color of the circle\nvec3 color = vec3(0.0, 0.5, 1.0);\n\n//main fuction\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1), then remapped to -1 to 1 range.\n    // This way, centre of the uv box is 0, 0.\n    vec2 uv = fragCoord/iResolution.xy * 2.0 - 1.0;\n    \n    // Calculate aspect ratio\n    float aspect = iResolution.x / iResolution.y;\n    \n    //correct uv coordinates by aspect ratio\n    uv.x *= aspect;\n    \n    //colour the box per UV input\n    fragColor.rg = uv;\n    \n    //choose whether to use mouse-click position thickness or static variable based on the bool 'UseMouseThickness'.\n    if (useMouseThickness)\n    {\n        thickness = iMouse.y / iResolution.y; \n    }\n    else\n    {\n        thickness;\n    }\n    \n    //calculate distance from centre to pixel position to determine if the pixel is part of the circle.\n    //init distance variable [will give a nice gradiant]\n    float distance = size - length(uv);\n    \n    //outer cricle\n    vec3 col = vec3(smoothstep(0.0, fade, distance));\n    //inner circle\n    col *= vec3(smoothstep(thickness + fade, thickness, distance));\n    \n    //draw circle with distance function above.\n    fragColor.rgb = col;\n    fragColor.rgb *= color;\n    \n    //demonstrate letterboxing for aspect ratio shtuffs.\n    if (any(greaterThan(uv, vec2(1.0))) || any(lessThan(uv, vec2(-1.0))))\n    {\n        fragColor.rgb = vec3(0.0);\n    }\n}","name":"Image","description":"","type":"image"}]}