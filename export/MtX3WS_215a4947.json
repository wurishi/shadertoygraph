{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"cubemap","id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"#define time iTime\n#define EPSILON .001\nconst float PI=3.14159265;\nconst int MAX_ITER = 120;\nvec3 lightDir       =normalize(vec3(1., 1., 1.)); \nstruct mat\n{\n  float typeMat;        \n     \n};\nmat materialMy = mat(0.0);\nvec3 colGlow = vec3(0.);\nconst vec3 col1 = vec3(0.065, 0.4, 1.);\nconst vec3 col2 = vec3(1., 0.65,0.56);\n//-----------------------------\nvec3 getNormal(in vec3 p);\nfloat renderFunction(in vec3 pos);\nfloat render(in vec3 posOnRay, in vec3 rayDir);\nvec4 getColorPixel(inout vec3 ro, vec3 rd, inout vec3 normal, float dist, float typeColor);\n//-----------------------------\n//---------------------------------------------\nvec3 rotationCoord(vec3 n)\n{\n vec3 result;\n //--------------------------------------------\n   float t = time * 0.1;\n   vec2 sc = vec2(sin(t), cos(t));\n   mat3 rotate;\n   \n      rotate = mat3( sc.y,  0.0, -sc.x,\n                     0.0,   1.0,  0.0,\n                     sc.x,  0.0, sc.y);   \n  result = n * rotate;\n  return result;\n}\n//----------------------------------------------------\n\n//-------------------------------------------------- \nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n//--------------------------------------------------\nfloat doubleCapsuleY(vec3 p, float r, float h)\n{\n    p.y -= clamp(p.y, 0.0, h * 3.);\n    return max(length(p) - r ,  abs(p.z)- r * 0.5);\n}\n\n//----------------------------------------------------\nfloat sdHeart(in vec3 pos, in float r, in float d) \n{\n    pos.x = abs(pos.x);\n    pos.xy = sqrt(2.) * 0.5 *mat2(1.,-1.,1.,1.)*pos.xy;\n    return  doubleCapsuleY(pos-vec3(r, 0, 0), r, d);\n}\n//--------------------------------------------------\nfloat dSphere(vec3 p, float r)\n{\n   return length(p) - r;\n}\n//--------------------------------------------------\nfloat noise(vec3 p) \n{\n        vec3 i = floor(p);\n        vec4 a = dot(i, vec3(1., 57., 21.)) + vec4(0., 57., 21., 78.);\n        vec3 f = cos((p-i)*acos(-1.))*(-.5)+.5;\n        a = mix(sin(cos(a)*a),sin(cos(1.+a)*(1.+a)), f.x);\n        a.xy = mix(a.xz, a.yw, f.y);\n        return mix(a.x, a.y, f.z);\n}\n\nfloat flame(vec3 p)\n{\n        float d = dSphere(p * vec3(0.14, 0.72, 0.04) + vec3(0., 2.2, 0.), 3.);\n        return d +(noise(p+vec3(.0,iTime*2.,.0)) + noise(p*3.)*.5)*.25 *(p.y);\n}\nfloat fire(vec3 p)\n{\n        return min(300.-length(p) , abs(flame(p)) );\n}\n//--------------------------------------------------\nfloat smin( float a, float b, float k ) \n{\n   float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n   return mix( b, a, h ) - k*h*(1.0-h);\n}\n//------------------------------------------\nfloat distMat(inout float curDist, float dist, in float typeMat)\n{\n   float res = curDist;\n   if (dist < curDist) \n   {\n      materialMy.typeMat     = typeMat;\n      res                    = dist;\n     return res;\n   }\n   return curDist;\n}\n\n//--------------------------------------------------\nfloat myObject(in vec3 p)\n{\np = -p;\n   float d =  1.0;\n   materialMy.typeMat = 0.0;\n   vec3 pos = p;\n    \n//----------------------------------\n   pos = p + vec3(0., 0., -4.);\n   pos = rotationCoord(pos);  \n    float t = abs(sin(time))*1.5;\n    float off = pow(t,.2)*0.5 + 0.5;\n    pos *=  off ; \n   \n   float s = 1.7;\n   d =  distMat(d,   sdHeart(pos, s ,s * 2.0),  2.0);  \n//----------------------------------\n\n   pos = p + vec3(0., -3.5, -4.);\n   pos = rotationCoord(pos);\n   d =  distMat(d, fire(pos ),  3.0);\n//----------------------------------\n\n   return d; \n}\n//-------------------------------------------------\n// Ð²Ñ‹Ð²Ð¾Ð´ Ð¾Ð±ÑŠÐµÐºÑ‚Ð°\nfloat renderFunction(in vec3 pos)\n{\n    return  myObject(pos);    \n}\n//------------------------------------------------- \nvec3 getNormal(in vec3 p)\n{\n\nconst float precis = 0.001;\n    vec3  eps = vec3(precis,0.0,0.0);\n    vec3 nor;\n    nor.x = renderFunction(p+eps.xyy) - renderFunction(p-eps.xyy);\n    nor.y = renderFunction(p+eps.yxy) - renderFunction(p-eps.yxy);\n    nor.z = renderFunction(p+eps.yyx) - renderFunction(p-eps.yyx);\n    return normalize(nor);\n\n}\n//-------------------------------------------------\nvec3 getLighting(in vec3 ro, in vec3 rd ,in vec3 norm, in vec3 lightDir, in vec4 color,  in vec2 fragCoord )\n{\n    vec3 col = vec3(0.);\n\n    vec3 ref = reflect( rd, norm );\n    float rim = 0.04+0.96*pow( clamp( 1.0 + dot(norm,rd), 0.0, 1.0 ), 4.0 );\n    col += mix( vec3(0.05,0.02,0.0), 1.2*vec3(0.8,0.9,1.0), 0.5 + 0.5*norm.y );\n    col *= 1.0 + 1.5*vec3(0.7,0.5,0.3)*pow( clamp( 1.0 + dot(norm,rd), 0.0, 1.0 ), 2.0 );\n    col += 27. *clamp(0.3 + 2. * norm.y, 0.0,1.0)* pow(texture( iChannel0, ref ).xyz,vec3(2.2));//*(rim);\n    col *= color.rgb;\n    col = pow( col, vec3(0.5) );\n  \n   vec2 q =  fragCoord.xy / iResolution.xy ;    \n   col *= -0.16 + 0.68 * pow( 16.0 *q.x * q.y*(1.0-q.x)*(1.0-q.y), 0.15 );  \n    return col ;    \n\n}\n\n//----------------------------------------------------------------------\nvec4 getColorPixel(inout vec3 ro, vec3 rd, inout vec3 normal, float dist, float typeColor,  in vec2 fragCoord )\n{\n\n  vec4 color = vec4(1.);\n  vec3 hitPos = ro + rd * dist;\n  normal = normalize(getNormal(hitPos));  \n  float diffuse = max(0.0, dot(normal, -lightDir)) * 0.5 + 0.5;\n//----------------------------------\n   if (materialMy.typeMat == 0.0) \n     color.rgb = texture( iChannel0, rd ).xyz;\n//   if(materialMy.typeMat !=0. )\n   if(materialMy.typeMat !=0. && materialMy.typeMat != 2.)\n      color.rgb =  getLighting(hitPos, rd, normal, lightDir, color, fragCoord);\n   if(materialMy.typeMat == 2.) \n      color *=   diffuse;\n    \n    ro = hitPos;\n    \n    color.rgb = mix(color.rgb, colGlow, 0.5);\n  return color;\n}\n\n//-------------------------------------------------\nfloat render(in vec3 posOnRay, in vec3 rayDir)\n{ \n  float t = 0.0;\n  float maxDist = 40.;\n  float opacity = 0.;\n  for(int i=0; i<MAX_ITER; ++i)\n  {\n   vec3 ro = posOnRay + t*rayDir;\n    float d = renderFunction(ro); \n    if (abs(d) <EPSILON || t > maxDist) \n         break;\n    t += d;\n    //----------------------\n    if(materialMy.typeMat == 2.)\n    {\n\n       float  clarity = smoothstep(0.9, 0., sqrt( d ));\n       vec4 currCol = vec4(mix(col1, col2,  clarity  * (ro.y + 3.)),  clarity);\n       colGlow +=  (1. -  clarity) * currCol.rgb * currCol.a ;\n    }\n    if(materialMy.typeMat == 3.)\n    {\n       float  clarity = smoothstep(0.5, 0., sqrt( d ));\n       vec4 currCol = vec4(mix(col1, col2,  clarity * (ro.y + 3.) * 0.3),  clarity);\n       colGlow +=  (1. -  clarity) * currCol.rgb * currCol.a ;\n    }\n    //----------------------\n\n  }\n   return t;\n}\n//------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pos     =  fragCoord.xy / iResolution.xy * 2. - 1.;\n    pos.x *= iResolution.x / iResolution.y;  \n\n    float t = time* 0.1;\n    vec3 camP = vec3(0., 3, 10.);\n    vec3 camUp = vec3(0. , 1., 0.);\n    vec3 camDir = normalize(-camP);\n    vec3 u = normalize(cross(camUp,camDir));\n    vec3 v = cross(camDir,u);\n    vec3 rayDir = normalize(camDir * 2. + pos.x * u + pos.y * v);  \n\n   vec4 color    = vec4(1.0);\n    vec3 normal   = vec3(1.0);\n    vec3 posOnRay = camP; \n    float path = 0.;\n  //--------------------------- \n     path =  render(posOnRay, rayDir);  \n     color = getColorPixel(posOnRay, rayDir, normal, path, materialMy.typeMat, fragCoord); \n    // ----------------------------------------------------------------------\n    // POST PROCESSING\n    // Gamma correct\n    color.rgb = pow(color.rgb , vec3(0.45));\n    // Contrast adjust - cute trick learned from iq\n     color.rgb  = mix( color.rgb , vec3(dot(color.rgb ,vec3(0.333))), -0.6 );\n\n     fragColor =  color;\n\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MtX3WS","date":"1424704772","viewed":287,"name":"Heart on fire","username":"Lio","description":"Attempt to create a glow\nsource : https://www.shadertoy.com/view/MtlGzX\nhttps://www.shadertoy.com/view/MdX3zr","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["transparency","smoothstep"],"hasliked":0,"parentid":"","parentname":""}}