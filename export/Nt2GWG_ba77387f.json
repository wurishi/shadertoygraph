{"ver":"0.1","info":{"id":"Nt2GWG","date":"1624613123","viewed":153,"name":"Spherical Shell with Slits","username":"Kamoshika","description":"I also posted this on NEORT.\nhttps://neort.io/art/c3aovvc3p9f8s59beu50","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://twitter.com/kamoshika_vrc/status/1363003599656079361\n\nconst float PI = acos(-1.);\n\nvec3 hue(float h) {\n    return clamp(abs(fract(h + vec3(0, 2, 1) / 3.) * 6. - 3.) - 1., 0., 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord * 2. - iResolution.xy) / min(iResolution.x, iResolution.y);\n    vec3 rayPos = vec3(0, 0, 5);\n    vec3 col = vec3(0);\n    float d, a, L;\n    float c = 0.;\n    \n    for(float i = 0.;i < 99.;i++){\n        L = length(rayPos);\n        a = acos(rayPos.y / L) - sign(rayPos.z) * acos(rayPos.x / length(rayPos.zx)) - iTime;\n        d = max(abs(L - 2.) - .01, sin(a * 10.) * .03);\n        if(d < 1e-4){\n            break;\n        }\n        rayPos += normalize(vec3(p, -2)) * d;\n        c++;\n    }\n    \n    if(L < 2.){\n        col = hue(a / PI / 2.);\n    }else if(L < 2.1){\n        col = vec3(1.);\n    }\n    \n    fragColor = vec4(col * 20. / c, 1.);\n}","name":"Image","description":"","type":"image"}]}