{"ver":"0.1","info":{"id":"wlfBRN","date":"1596135182","viewed":193,"name":"Capsule Practice","username":"reatured","description":"Capsule and shades","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST 0.01\n\n\n\n\n\nfloat cd(vec3 p, vec3 a, vec3 b, float r){\n    vec3 ab = b-a;\n    vec3 ap = p-a;\n    float t = dot(ab, ap)/dot(ab, ab);\n    \n    t = clamp(t, 0.,1.);\n    \n    vec3 c = a + t*ab;\n    return length(p-c)-r;\n}\n\nfloat GetDist(vec3 p){\n    vec4 s = vec4(0., 1., 6., 4.);\n    float planeDist = p.y;\n    vec3 topP = vec3(2., 3., 5.);\n    topP.x += sin(iTime);\n    topP.y += cos(iTime);\n    float cd = cd(p,\n                  vec3(-2., 1., 3.),\n                  topP,\n                  1.);\n    \n    return min(cd, planeDist);\n    \n}\nfloat RayMarch(vec3 ro, vec3 rd){\n\tfloat dO = 0.; \t//distance\n    \n    for(int i = 0; i<MAX_STEPS; i++){\n     \tvec3 p = ro + rd*dO;//step destination vector\n        float dS = GetDist(p);//dist to destination\n        dO += dS; \n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    }\n    return dO;\n}\n\nvec3 GetNormal(vec3 p){\n \tfloat d = GetDist(p);\n    vec2 e = vec2(.01, 0.);\n    \n    vec3 n = d - vec3(GetDist(p-e.xyy),\n                      GetDist(p-e.yxy),\n                      GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p, vec3 lightPos){\n    //lightPos.xz += vec2(sin(iTime), cos(iTime)) * 2.;\n    vec3 l = normalize(lightPos - p);\n    vec3 n = GetNormal(p); //obj normal\n    \n    float dif = clamp(dot(n, l),0.,1.);//shadow\n    float d = RayMarch(p + n*SURF_DIST * 2.,l);\n    if(d<length(lightPos - p))\t dif *= .2;\n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv = (uv- 0.5) *2.;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    uv.y += sin(iTime*1.5+sin(uv.x*12.0))*0.05;\n    vec3 col = vec3(0.1);\n    vec3 ro = vec3(0.,1.,0.);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1. - uv.x*sin(iTime)));\n    \n    float d = RayMarch(ro, rd);\n    \n        vec3 p = ro + rd * d;\n    float dif  = GetLight(p, vec3(0., 7., 3.));//the position on obj\n    dif  += GetLight(p, vec3(3., 2., 1.));//the position on obj\n    \n    \n    d /= 6.;\n    col += vec3(0.2 + uv.x*0.2,0.5 + uv.x *-0.6,0.7)*dif;\n    \n    // Time varying pixel color\n\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}