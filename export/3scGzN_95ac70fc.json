{"ver":"0.1","info":{"id":"3scGzN","date":"1567884421","viewed":1007,"name":"Mac GLSL bug","username":"coyote","description":"Please check it on your Mac. Top half and bottom half of the screen should both have repeating squares with smooth 2d gradient. However, on my Mac mini top half of the screen have smooth gradients, while bottom half has gradients in 4x4 pixel blocks.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["bug","osx","mac","macos"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//please check it on your Mac\n\n//shader must be played, or compiled at least 2 times, because if you press\n//Alt-Enter only once it looks correct, but on second compilation, or\n//after play is pressed it becomes incorrect\n\n//shader shows simple repetitive squares with smooth 2d gradient\n//top and bottom halfs of the screen should be exactly the same since m and n are both zero\n//and there is only one pass through the loops\n\n//however, on my Mac mini with MacOS 10.12.6 (Sierra) and Intel Iris gfx\n//  top screen half    -> gradient is smooth                (correct)\n//  bottom screen half -> gradient is in 4x4 pixel blocks   (incorrect!)\n\n//several ways to \"correct\" the behaviour:\n//  if within loops a is set to vec2(.001) then it works correct\n//  if within loops a is set to vec2(m)+.001 or vec2(n)+.001 then it works correct\n//  if within loops a is set to vec2(m,n), and .001 is added within mod, also correct\n//  if for loops are put within else block of the subsequent if, it works correct\n\n#define REP_SIZE 32.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 a, col ;\n    int m, n ;\n\n    for( m = 0 ; m < 1 ; ++m ) {\n        for( n = 0 ; n < 1 ; ++n ) {\n            a = vec2( m, n ) + .001 ;\n            col = vec2( mod( fragCoord + a, REP_SIZE ) / REP_SIZE ) ;\n        }\n    }\n\n    if( fragCoord.y >= iResolution.y / 2. ) {\n        a = vec2( 0, 0 ) + .001 ;\n        col = vec2( mod( fragCoord + a, REP_SIZE ) / REP_SIZE ) ;\n    }\n\n    fragColor = vec4( col.xyy, 1 ) ;\n}","name":"Image","description":"","type":"image"}]}