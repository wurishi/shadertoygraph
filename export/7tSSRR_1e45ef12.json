{"ver":"0.1","info":{"id":"7tSSRR","date":"1626892697","viewed":118,"name":"Cloudy Planet","username":"Dunk","description":"An amalgamation of https://www.shadertoy.com/view/WdVfDD and https://www.shadertoy.com/view/3lf3z2","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["noise","planet","dither"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Dither functions from: https://github.com/hughsk/glsl-dither\n// Improved version: https://www.shadertoy.com/view/tsKfDW\n\nfloat dither2x2(vec2 position, float brightness) {\n  int x = int(mod(position.x, 2.0));\n  int y = int(mod(position.y, 2.0));\n  int index = x + y * 2;\n  float limit = 0.0;\n\n  if (x < 8) {\n    if (index == 0) limit = 0.25;\n    if (index == 1) limit = 0.75;\n    if (index == 2) limit = 1.00;\n    if (index == 3) limit = 0.50;\n  }\n\n  return brightness < limit ? 0.0 : 1.0;\n}\n\n\nfloat dither4x4(vec2 position, float brightness) {\n  int x = int(mod(position.x, 4.0));\n  int y = int(mod(position.y, 4.0));\n  int index = x + y * 4;\n  float limit = 0.0;\n\n  if (x < 8) {\n    if (index == 0) limit = 0.0625;\n    if (index == 1) limit = 0.5625;\n    if (index == 2) limit = 0.1875;\n    if (index == 3) limit = 0.6875;\n    if (index == 4) limit = 0.8125;\n    if (index == 5) limit = 0.3125;\n    if (index == 6) limit = 0.9375;\n    if (index == 7) limit = 0.4375;\n    if (index == 8) limit = 0.25;\n    if (index == 9) limit = 0.75;\n    if (index == 10) limit = 0.125;\n    if (index == 11) limit = 0.625;\n    if (index == 12) limit = 1.0;\n    if (index == 13) limit = 0.5;\n    if (index == 14) limit = 0.875;\n    if (index == 15) limit = 0.375;\n  }\n\n  return brightness < limit ? 0.0 : 1.0;\n}\n\nfloat dither8x8(vec2 position, float brightness) {\n  int x = int(mod(position.x, 8.0));\n  int y = int(mod(position.y, 8.0));\n  int index = x + y * 8;\n  float limit = 0.0;\n\n  if (x < 8) {\n    if (index == 0) limit = 0.015625;\n    if (index == 1) limit = 0.515625;\n    if (index == 2) limit = 0.140625;\n    if (index == 3) limit = 0.640625;\n    if (index == 4) limit = 0.046875;\n    if (index == 5) limit = 0.546875;\n    if (index == 6) limit = 0.171875;\n    if (index == 7) limit = 0.671875;\n    if (index == 8) limit = 0.765625;\n    if (index == 9) limit = 0.265625;\n    if (index == 10) limit = 0.890625;\n    if (index == 11) limit = 0.390625;\n    if (index == 12) limit = 0.796875;\n    if (index == 13) limit = 0.296875;\n    if (index == 14) limit = 0.921875;\n    if (index == 15) limit = 0.421875;\n    if (index == 16) limit = 0.203125;\n    if (index == 17) limit = 0.703125;\n    if (index == 18) limit = 0.078125;\n    if (index == 19) limit = 0.578125;\n    if (index == 20) limit = 0.234375;\n    if (index == 21) limit = 0.734375;\n    if (index == 22) limit = 0.109375;\n    if (index == 23) limit = 0.609375;\n    if (index == 24) limit = 0.953125;\n    if (index == 25) limit = 0.453125;\n    if (index == 26) limit = 0.828125;\n    if (index == 27) limit = 0.328125;\n    if (index == 28) limit = 0.984375;\n    if (index == 29) limit = 0.484375;\n    if (index == 30) limit = 0.859375;\n    if (index == 31) limit = 0.359375;\n    if (index == 32) limit = 0.0625;\n    if (index == 33) limit = 0.5625;\n    if (index == 34) limit = 0.1875;\n    if (index == 35) limit = 0.6875;\n    if (index == 36) limit = 0.03125;\n    if (index == 37) limit = 0.53125;\n    if (index == 38) limit = 0.15625;\n    if (index == 39) limit = 0.65625;\n    if (index == 40) limit = 0.8125;\n    if (index == 41) limit = 0.3125;\n    if (index == 42) limit = 0.9375;\n    if (index == 43) limit = 0.4375;\n    if (index == 44) limit = 0.78125;\n    if (index == 45) limit = 0.28125;\n    if (index == 46) limit = 0.90625;\n    if (index == 47) limit = 0.40625;\n    if (index == 48) limit = 0.25;\n    if (index == 49) limit = 0.75;\n    if (index == 50) limit = 0.125;\n    if (index == 51) limit = 0.625;\n    if (index == 52) limit = 0.21875;\n    if (index == 53) limit = 0.71875;\n    if (index == 54) limit = 0.09375;\n    if (index == 55) limit = 0.59375;\n    if (index == 56) limit = 1.0;\n    if (index == 57) limit = 0.5;\n    if (index == 58) limit = 0.875;\n    if (index == 59) limit = 0.375;\n    if (index == 60) limit = 0.96875;\n    if (index == 61) limit = 0.46875;\n    if (index == 62) limit = 0.84375;\n    if (index == 63) limit = 0.34375;\n  }\n\n  return brightness < limit ? 0.0 : 1.0;\n}\n\nfloat hash(vec2 p) { return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); }\nfloat noise(vec2 x) {\n\tvec2 i = floor(x);\n\tvec2 f = fract(x);\n\tfloat a = hash(i);\n\tfloat b = hash(i + vec2(1.0, 0.0));\n\tfloat c = hash(i + vec2(0.0, 1.0));\n\tfloat d = hash(i + vec2(1.0, 1.0));\n\tvec2 u = f * f * (3.0 - 2.0 * f);\n\treturn mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\n#define octaves 14\n#define speed 1.0\n#define sunspeed 1.0\nfloat fbm (in vec2 p) {\n\n    float value = 0.0;\n    float freq = 1.0;\n    float amp = 0.5;    \n\n    for (int i = 0; i < octaves; i++) {\n        value += amp * (noise((p - vec2(1.0)) * freq));\n        freq *= 1.9;\n        amp *= 0.6;\n    }\n    return value;\n}\n\nfloat pattern(in vec2 p) {\n    vec2 offset = vec2(-0.5);\n    float time = iTime * speed;\n\n    float xOff = 0.0;\n    vec2 aPos = vec2(sin(time * 0.005) + xOff, sin(time * 0.01)) * 6.;\n    vec2 aScale = vec2(3.0);\n    float a = fbm(p * aScale + aPos);\n\n    vec2 bPos = vec2(sin(time * 0.01) + xOff, sin(time * 0.01)) * 1.;\n    vec2 bScale = vec2(0.6);\n    float b = fbm((p + a) * bScale + bPos);\n\n    vec2 cPos = vec2(-0.6, -0.5) + vec2(sin(-time * 0.001) + xOff, sin(time * 0.01)) * 2.;\n    vec2 cScale = vec2(2.6);\n    float c = fbm((p + b) * cScale + cPos);\n    return c;\n}\n\nvec3 palette(in float t) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.45, 0.25, 0.14);\n    vec3 c = vec3(1.0 ,1.0, 1.0);\n    vec3 d = vec3(0.0, 0.1, 0.2);\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    vec2 p = fragCoord.xy / iResolution.xy;\n    p.x *= 1.0 + 0.1 * abs(cos((0.5 - p.y) * 3.14));\n    \n    p.x *= iResolution.x / iResolution.y;\n    p.x *= abs(cos((0.5-p.y) * 3.14 * 0.5));\n    float value = pow(pattern(p), 2.); // more \"islands\"\n   \tvec3 color = palette(value);\n    float bright = dot(color, vec3(0.4,0.6,0.3));\n    \n    \n    \n    vec3 ditherCol = color * vec3(dither8x8(fragCoord, bright));\n    \n    vec2 ratio = vec2(iResolution.x / iResolution.y, 1.);\n   \tvec2 pos = vec2(fragCoord / iResolution.xy);\n    vec2 npos = 2. * pos - 1.;\n    vec2 cpos = npos * ratio;\n    \n    vec3 viewVec = vec3(0,0,1);\n   \t\n    vec3 sun = vec3(cos(iTime * 0.25 * sunspeed), 0., sin(iTime * 0.25 * sunspeed));\n    vec3 norm = normalize(vec3(cpos, sqrt(1. - dot(cpos, cpos))));\n    \n    float d = length(cpos);    \n    float a = dot(sun, norm);\n    \n    float spec = pow(clamp(dot(reflect(sun, -norm), -viewVec), 0.0, 1.0), 64.0) * 4.0;\n    a += 0.1 + spec;\n    a = clamp(a, 0.0, 1.0);\n    \n    ditherCol *= a;\n    \n    if (d < 0.99) {\n    \t// Output to screen\n    \tfragColor = vec4(ditherCol, 1.0);\n        //fragColor = vec4(1) * ceil(a);\n    } else if (d > 1.0) {\n        fragColor = vec4(0);\n    } else {\n     \tfragColor = vec4(0.5,0.5,0.5,1.0) * a;\n    }\n}","name":"Image","description":"","type":"image"}]}