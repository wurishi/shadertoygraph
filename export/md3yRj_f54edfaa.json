{"ver":"0.1","info":{"id":"md3yRj","date":"1695243171","viewed":52,"name":"Hexagonal Dot Grid","username":"Konod","description":"A hexagonal grid filled with dots alterning between red, blue and green. You can replace the dots with actual hexagons by changing the SDF.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["hexagon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float UnitCircle(vec2 uv, vec2 center, float radius) {\n    return smoothstep(0.f, .05f, radius - length(uv - center));\n}\n\n//This method uses the properties of hexagonal tiling.\n//The grid is in a rectangural tile of size (2, 2*sqrt(3))/dim.\n//len is the size of the circles relative to the grid. At len = 1, the circles are tangent.\nfloat HexagonGrid(vec2 uv, float dim, float len) {\n    vec2 uvCentered = mod(uv*dim, vec2(2.f, 3.46410162f));\n    if (uvCentered.x > 1.f) uvCentered.x = 2.f - uvCentered.x;\n    if (uvCentered.y > 1.73205081f) uvCentered.y = 3.46410162f - uvCentered.y;\n    float o = UnitCircle(uvCentered, vec2(0.f, 0.f), len);\n    o +=UnitCircle(uvCentered, vec2(1.f, 1.73205081f), len);\n    return o;\n}\n\n//Same parameters. Here, the circles are tangent when len = 1/sqrt(3).\nvec3 RGBHexagonGrid(vec2 uv, float dim, float len) {\n    vec3 o;\n    o.r = HexagonGrid(uv, dim, len);\n    o.g = HexagonGrid(uv + vec2(0.f, 1.15470054f/dim), dim, len);\n    o.b = HexagonGrid(uv + vec2(0.f, 2.30940108f/dim), dim, len);\n    return o;\n} \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord - iResolution.xy)/min(iResolution.x, iResolution.y);\n\n    vec3 col;\n    col = RGBHexagonGrid(uv, 50.f, 0.57735027f);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}