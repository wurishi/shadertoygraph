{"ver":"0.1","info":{"id":"mdtcR7","date":"1694884285","viewed":58,"name":"normalised SDF ratio","username":"bolex","description":"This fragment shader implements a Signed Distance Function (SDF) to render a 2D rounded box. The SDF allows for precise and smooth rendering of shapes, respecting a specified aspect ratio and ensuring normalization. The rounded box is defined by its cente","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","aspectratio","sdf","distance","ratio","roundedbox","normalised"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2023 Basile LECOUTURIER\n// Description:\n// This fragment shader implements a Signed Distance Function (SDF) to render a 2D rounded box. The SDF allows for precise and smooth rendering of shapes, respecting a specified aspect ratio and ensuring normalization. The rounded box is defined by its center coordinates, dimensions, and corner radius. The shader employs distance calculations to efficiently render the shape.\n//\n// This shader is based on the work of Inigo Quilez and is provided under the MIT License. Inigo Quilez is known for his contributions to the field of computer graphics and his educational content on platforms like YouTube and his personal website.\n//\n// Credit:\n// Inigo Quilez\n// https://www.youtube.com/c/InigoQuilez\n// https://iquilezles.org\n// https://iquilezles.org/articles/distfunctions2d/\n//\n// Signed distance to a 2D rounded box. Tutorials explaining\n// how it works: \n//\n// https://www.youtube.com/watch?v=62-pRVZuS5c\n// https://www.youtube.com/watch?v=s5NGeUV2EyU\n//\n// List of some other 2D distances: https://www.shadertoy.com/playlist/MXdSRf\n// and iquilezles.org/articles/distfunctions2d\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    // Uv comming from vertex shader if needed\n    vec2 vUv = fragCoord.xy / iResolution.xy;\n\n    float ratio = iResolution.x / iResolution.y;\n    \n    float radius = 0.3 * ((sin(iTime * 2.) + 1.) / 2.);\n        \n    float newRatio = (ratio - radius) / (1. - radius);\n\n    vec2 p = (vUv * vec2(ratio * 2., 2.) - vec2(ratio, 1.)) /vec2((ratio, 1.));\n\n\tfloat d = sdBox( p, vec2(newRatio *(1. - radius), 1. - radius));\n\n\tfragColor = vec4(vec3(step(radius, d)),1.0);\n}","name":"Image","description":"","type":"image"}]}