{"ver":"0.1","info":{"id":"mslSRj","date":"1669238782","viewed":168,"name":"TensorPatterns : fingerprints","username":"Boogaloo","description":"A somewhat interesting TensorPatterns automaton","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["automata","cellular","tensor"],"hasliked":0,"parentid":"csj3RK","parentname":"TensorPatterns"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n\tfragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"mat3 mats[9];\n\nfloat cutit(float inp){\nreturn clamp(inp, 0., 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n//The configuration tensor (change these values for different patterns):\nmats[0] =  mat3(0., .003, -.003, -.003, 0., .003, .003, -.003, 0.);\nmats[1] =  mat3(0., .003, -.003, -.003, 0., .003, .003, -.003, 0.);\nmats[2] =  mat3(0., .003, -.003, -.003, 0., .003, .003, -.003, 0.);\nmats[3] =  mat3(0., .003, -.003, -.003, 0., .003, .003, -.003, 0.);\nmats[4] =  mat3(1. , 0., 0., 0., 1., 0., 0., 0., 1.);\nmats[5] =  mat3(0., .003, -.003, -.003, 0., .003, .003, -.003, 0.);\nmats[6] =  mat3(0., .003, -.003, -.003, 0., .003, .003, -.003, 0.);\nmats[7] =  mat3(0., .003, -.003, -.003, 0., .003, .003, -.003, 0.);\nmats[8] =  mat3(0., .003, -.003, -.003, 0., .003, .003, -.003, 0.);\n    ;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    vec3 rtot = vec3(0.,0.,0.);\n    \n    int ind = 0;\n    \n    \n//the convolution kernel is just the Moore neighborhood of a given cell\n//take the RGB values as vectors and apply a matrix transform specified via the configuration tensor, then sum\n    for(float i = -1.0; i <= 1.0; i += 1.0)\n    {\n        for( float j = -1.0; j <= 1.0; j += 1.0)\n        {\n        \tvec2 offset = vec2(i, j) / iResolution.xy;\t\t \n        \trtot += mats[ind]*texture(iChannel0, uv + offset).rgb;\n            ind++;\n        }\n    }\n    \n\n    \n    vec3 rfin = vec3(cutit(rtot.x), cutit(rtot.y), cutit(rtot.z));\n    \n    if(rfin.x+rfin.y+rfin.z>1.5){\n    vec3 tem = vec3(rfin);\n    rfin.x = abs(tem.x-tem.y);\n    rfin.y = abs(tem.y-tem.z);\n    rfin.y = abs(tem.z-tem.x);}\n   \n   \n//initialize random colors for each cell    \n    if(iFrame < 10) { \n        rfin = vec3(texture(iChannel1, fragCoord.xy / iResolution.xx));\n    }\n\n//paint on pixels manually with the mouse\n    if(iMouse.z > 0.0 && abs(fragCoord.x-iMouse.x)<1.0 && abs(fragCoord.y-iMouse.y)<1.0){\n    rfin = vec3(1.0,1.0,1.0);\n    }\n    \n    \n    \n    fragColor = vec4(rfin,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}