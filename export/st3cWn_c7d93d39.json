{"ver":"0.1","info":{"id":"st3cWn","date":"1659705571","viewed":81,"name":"Alien Screensaver","username":"Mojomajor","description":"random grid experimentz","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["grid","crt","screensaver"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Basic Quad Truchet by Martijn Steinrucken aka BigWings - 2019\n// countfrolic@gmail.com\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// \n// This is the end result of one of my video tutorials\n// on YouTube that you can see here:\n// https://youtu.be/2R7h76GoIJM\n\n// waves\n// https://stackoverflow.com/questions/1073606/is-there-a-one-line-function-that-generates-a-triangle-wave\n\n//TODO: play with ids\n// cool functions https://thebookofshaders.com/05/\nfloat noise(vec2 st){\n    return fract(sin(dot(vec2(12.23,74.343),st))*43254.);  \n}\n\n#define pi acos(-1.)\nfloat noise2D(vec2 st){\n  \n  //id,fract\n  vec2 id =floor(st);\n  vec2 f = fract(st);\n  \n  //nachbarn\n  float a = noise(id);\n  float b = noise(id + vec2(1.,0.));\n  float c = noise(id + vec2(0.,1.));\n  float d = noise(id + vec2(1.));\n  \n  \n  //f\n  f = smoothstep(0.,1.,f);\n  \n  //mix\n  float ab = mix(a,b,f.x);\n  float cd = mix(c,d,f.x);\n  return mix(ab,cd,f.y);\n}\n\nmat2 rot45 = mat2(0.707,-0.707,0.707,0.707);\n\nmat2 rot(float a){\n  float s = sin(a); float c = cos(a);\n  return mat2(c,-s,s,c);\n}\nfloat fbm(vec2 st, float N, float rt){\n    st*=3.;\n \n  float s = .5;\n  float ret = 0.;\n  for(float i = 0.; i < N; i++){\n     \n      ret += noise2D(st)*s; st *= 2.9; s/=2.; st *= rot((pi*(i+1.)/N)+rt*8.);\n      st.x += iTime/10.;\n  }\n  return ret;\n  \n}\n\nvec4 otherImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (fragCoord.xy - iResolution.xy*0.5)/iResolution.y;\n\n\n  uv.x += iTime*0.04;\n  float fa1 = fbm(uv*rot(sin(uv.x)*0.001) ,5., 3.);\n  float fb1 = fbm(uv ,5., 5.);\n  \n  float fa2 = fbm(uv+sin(uv.x*15.) + fa1*5. ,4., 8.);\n  float fb2 = fbm(uv + fb1 , 5., 6.);\n \n  float fa3 = fbm(uv*1.5 + fa2 ,5., 1.);\n  float fb3 = fbm(uv + fa2, 3., 2.);\n  \n  vec3 col = vec3(0);\n  float circle = (fa3);\n  \n  //salt stained marble thing\n  //metal blue\n  col=mix(col,vec3(0.1,0.3,0.6),pow(fa3*2.4,1.5));\n  \n  //metal red\n  col=mix(col,vec3(0.9,0.3,0.3),clamp(pow(fb2*.7,1.9),0.,1.));\n  \n  //black\n  //col=mix(col,vec3(0.,0.,0.),clamp(pow(fa2*2.,9.),0.,1.)*0.3);\n  \n  //gold\n  col=mix(col,vec3(0.9,0.6,0.3),clamp(pow(fa2*1.5,20.)*0.7,0.,1.));\n  \n  //black\n col=mix(col,vec3(0.),clamp(pow(fb1*1.6,1.)*0.8,0.,1.));\n  \n  //white\n  col=mix(col,vec3(0.99),clamp(pow(fb2*1.4-0.05,20.),0.,1.));\n \n  col.yz *= rot(-0.12);\n \n \n\n return vec4(col,1.);\n}\n#define RND_SQRS 1\n#define RAINBOW 1\n#define DANCE 0\nfloat random (in vec2 _st) {\n            return fract(sin(dot(_st.xy,\n                                vec2(12.9898*sin(iTime),78.233)))*\n                43758.5453123);\n        }\n        /*\nfloat noise (in vec2 _st) {\n            vec2 i = floor(_st);\n            vec2 f = fract(_st);\n\n            // Four corners in 2D of a tile\n            float a = random(i);\n            float b = random(i + vec2(1.0, 0.0));\n            float c = random(i + vec2(0.0, 1.0));\n            float d = random(i + vec2(1.0, 1.0));\n\n            vec2 u = f * f * (3.0 - 2.0 * f);\n\n            return mix(a, b, u.x) +\n                    (c - a)* u.y * (1.0 - u.x) +\n                    (d - b) * u.x * u.y;\n        }*/\n// https://www.youtube.com/watch?v=LWFzPP8ZbdU\nuint noiseSquirrel3(in int position) {\n    uint BIT_NOISE1 = uint(0xB5297A4D);\n    uint BIT_NOISE2 = uint(0x68E31DA4);\n    uint BIT_NOISE3 = uint(0x1B56C4E9);\n    \n    uint mangled = uint(position);\n    mangled *= BIT_NOISE1;\n    mangled ^= (mangled >> 8);\n    mangled += BIT_NOISE2;\n    mangled ^= (mangled << 8);\n    mangled *= BIT_NOISE3;\n    mangled ^= (mangled >> 8);\n    \n    return mangled;\n}\nfloat Hash21(vec2 p) {\n\tp = fract(p*vec2(234.34, 435.345));\n    p += dot(p, p+34.23);\n    return fract(p.x*p.y);\n}\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nfloat sineWave(float x, float elon, float freq) {\n    return elon-30. * sin(x / freq);\n}\nfloat cosWave(float x, float elon, float freq) {\n    return elon * cos(x / freq);\n}\nfloat tanWave(float x, float elon, float freq) {\n    return elon * tan(x / freq);\n}\nfloat plot(vec2 st, float pct, float thickness){\n  return  smoothstep( pct-thickness, pct, st.y) -\n          smoothstep( pct, pct+thickness, st.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 UV = fragCoord.xy/iResolution.xy;\n    \n    vec3 col = vec3(0);\n    \n    uv += iTime*.05;\n    uv *= 10.;\n    vec2 gv = fract(uv)-.5;\n    vec2 id = floor(uv);\n    \n    float n = Hash21(id); // random number between 0 and 1\n    float nse = noise(gv);\n    float iNoise = float(noiseSquirrel3(352+int(n*100.))/uint(1000));\n    float iNoiseConst = float(noiseSquirrel3(352)/uint(100));\n    #if RND_SQRS\n      if(n<mod(cos(iNoise),2.)) gv.x *= -1.;\n    #endif\n\n    vec2 cUv = gv-sign(gv.x+gv.y+.01)*.5;\n    //cUv = rotate2d( iTime*10. ) *cUv;\n    float d = length(cUv);\n    #if DANCE\n    gv = rotate2d( iTime*10. ) * gv;\n    #endif\n    vec3 colR =  0.5*sin(uv.xyx+vec3(0,2,4))*abs(sin(cos(iTime+3.*uv.y)*2.*uv.x+iTime));\n    \n    float thickness = pow(d,2.)*sin(iNoiseConst);\n    \n    float _sin = sin(iTime)*.5+1.5;\n    float _tan = tan(iTime)*.5+0.5;\n    float wave = sineWave(d*_sin, 1.,20.);\n    float pct = plot(gv,wave, thickness);\n    \n    // white\n    col = (1.0-pct)*col+pct*vec3(1.);\n    \n    \n    vec3 tex = texture(iChannel0, gv).xyz;\n    col *= tex*(sin(iNoise)/cos(iNoiseConst)+n);\n    \n    \n    #if RAINBOW\n    col = col * colR*id.y*0.1;\n    col *= 5.5;\n    #endif\n    \n    \n    if(gv.x>=.49 || gv.y>=.49) {\n       //col = vec3(1,0,0);\n        \n    }else {\n        \n        //col *= colR;\n    }\n    vec4 oi = otherImage(fragColor, fragCoord);\n    \n    fragColor = vec4(oi.xyz-col,1.0);\n}","name":"Image","description":"","type":"image"}]}