{"ver":"0.1","info":{"id":"ts2cRc","date":"1587110070","viewed":510,"name":"RainbowFish","username":"mmis1000","description":"Yet another particle effects","likes":20,"published":1,"flags":32,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Simple \"random\" function\nfloat random(float co)\n{\n    return fract(sin(co*12.989) * 43758.545);\n}\n\n\nvec2 getPositionNoIterop(float seed, float time) {\n    return vec2(\n    \trandom(time * 987.0 + seed),\n    \trandom(time * 987.0 + seed + 98765.0)\n    );\n}\n\nvec3 hueShift(vec3 col, float shift){\n    vec3 m = vec3(cos(shift), -sin(shift) * .57735, 0);\n    m = vec3(m.xy, -m.y) + (1. - m.x) * .33333;\n    return mat3(m, m.zxy, m.yzx) * col;\n}\n\nvec2 getPosition(float seed, float time) {\n    float PERIOD = 2.0;\n    \n    vec2 pos0 = getPositionNoIterop(seed, float(int(time / PERIOD)));\n    vec2 pos1 = getPositionNoIterop(seed, float(int(time / PERIOD) + 1));\n    vec2 pos2 = getPositionNoIterop(seed, float(int(time / PERIOD) + 2));\n    vec2 pos3 = getPositionNoIterop(seed, float(int(time / PERIOD) + 3));\n    \n    float tension = 0.5;\n\n    vec2 t1 = (pos2 - pos0) * tension;\n    vec2 t2 = (pos3 - pos1) * tension;\n\n    float st = (time / PERIOD) - float(int(time / PERIOD));\n\n    float c1 =   2.0 * pow(st, 3.0) - 3.0 * pow(st, 2.0) + 1.0;\n    float c2 = - 2.0 * pow(st, 3.0) + 3.0 * pow(st, 2.0);\n    float c3 =         pow(st, 3.0) - 2.0 * pow(st, 2.0) + st;\n    float c4 =         pow(st, 3.0) -       pow(st, 2.0);\n\n    return c1 * pos1 + c2 * pos2 + c3 * t1 + c4 * t2;\n}\n\n// pos in resolution\nvec3 mapI(vec2 pos, float time, float seed) {\n    float hueRotateInitial = random(seed) * 30.0;\n\n    vec2 dotPos = getPosition(seed, time);\n    float dist = length((pos - dotPos) * iResolution.xy);\n    \n    float width = min(iResolution.x, iResolution.y);\n    \n    float intensity = 1.0 / (1.0 + dist / width * 240.0);\n    \n    return hueShift(vec3(intensity, 0.0, 0.0), hueRotateInitial - time);\n}\n\n// pos in resolution\nvec3 map(vec2 pos, float time, float seed) {\n    return mapI(pos, time,                    seed) / 5.0 +\n           mapI(pos, time + 1.0 / 60.0 / 5.0, seed) / 5.0 +\n           mapI(pos, time + 2.0 / 60.0 / 5.0, seed) / 5.0 +\n           mapI(pos, time + 3.0 / 60.0 / 5.0, seed) / 5.0 +\n           mapI(pos, time + 4.0 / 60.0 / 5.0, seed) / 5.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 sum = vec3(0.0, 0.0, 0.0);\n    \n    for (int i = 0; i < 16; i++) {\n    \tsum += map(uv * 1.2 - vec2(0.1, 0.1), float(iFrame) / 60.0 + float(i) / 16.0, float(i) * 3.5);\n    }\n    \n    // Output to screen\n    fragColor = vec4(sum, 1.0) + \n        texture(iChannel0, uv) * 0.85;\n}","name":"Buffer A","description":"","type":"buffer"}]}