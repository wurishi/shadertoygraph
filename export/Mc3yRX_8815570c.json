{"ver":"0.1","info":{"id":"Mc3yRX","date":"1730936443","viewed":32,"name":"rgb stripes","username":"toxicaliengf","description":"split colors of an input image into stripes for red, green, and blue components. with some extra sauce >:)","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["posterize"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float select(float dither, float valueA, float valueB)\n{\n    return step(valueA, dither) * step(dither, valueB);\n}\n\nvec3 posterize(vec3 src, float steps) \n{ \n\n    return vec3(ceil(src.rgb * steps) / steps); \n\n} //thanks kowbell\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float highlightBleed = 1.5;\n    float luminanceStrength = .7;\n    float posterSteps = 3.;\n    float posterBlend = .4;\n    float pixelSizeMin = 28.;\n    float pixelSizeMax = 28.;\n    float speed = .8;\n    float distortionStrength = .2;\n\n    float pixelSize = mix(pixelSizeMin, pixelSizeMax, .5 + (cos(iTime * .05 * speed) * .5));\n\n    float gridSize = iResolution.y / pixelSize;\n    float aspectRatio = iResolution.x / iResolution.y;\n\n\n    vec2 screenUV = fragCoord/iResolution.xy;\n    vec2 pixelatedUV;\n    pixelatedUV.x = floor(screenUV.x * gridSize * aspectRatio) / (gridSize * aspectRatio);\n    pixelatedUV.y = floor(screenUV.y * gridSize) / gridSize;\n    \n    vec2 pixelatedUV2;\n    pixelatedUV2.x = floor(screenUV.x * (gridSize * 8.) * aspectRatio) / ((gridSize * 8.) * aspectRatio);\n    pixelatedUV2.y = floor(screenUV.y * (gridSize * 8.)) /  (gridSize * 8.);\n\n    vec2 noiseUV = screenUV;\n    noiseUV.xy += iTime * speed * .002;\n    noiseUV *= 4.;\n    vec2 distortion = texture(iChannel1, noiseUV).xx * distortionStrength;\n    vec2 distortedUV = screenUV;\n    distortedUV.y += distortion.y * .04;\n    distortedUV.y += iTime * -.01 * speed;\n\n\n    vec2 gridUV;\n    gridUV.x = fract(distortedUV.x * gridSize * aspectRatio);\n    gridUV.y = fract(distortedUV.y * gridSize);\n    vec3 col = texture(iChannel0, screenUV).xyz;\n\n\n    vec3 gradientCol = 0.5 + 0.5*cos( (iTime * .3) +screenUV.xyx+vec3(0,2,4));\n    float time2 = .5 + (.5 * sin(iTime  * speed * .2));\n    col *= mix(gradientCol, vec3(1.,1.,1.), time2);\n    \n    float dither = 1. - (gridUV.y);\n\n    float luminance = (0.299 * col.x + 0.587 * col.y + 0.114 * col.z);\n    luminance = clamp(luminance * luminanceStrength, 0.,1.);\n\n\n    float tK = clamp(mix(1.,0., luminance * 2.),0.,1.);\n    float tW = clamp(mix(0.,1., (luminance - .5) * 2.), 0.,1.);\n    \n    float sum = col.x + col.y + col.z;\n    sum += tK * 1.;\n    \n    float tR = col.x / sum;\n    float tG = col.y / sum;\n    float tB = col.z / sum;\n\n    //blue -> red -> green in order of luminance importance\n    float startB = tK;\n    float endB = startB + tB;\n    float startR = endB;\n    float endR = startR + tR;\n    float startG = endR;\n    float endG = startG + tG;\n    \n    float bleed = tW * luminance * highlightBleed;\n\n    float maskR = select(dither, startR - bleed, endR + bleed);\n    float maskG = select(dither, startG - bleed, endG + bleed);\n    float maskB = select(dither, startB - bleed, endB + bleed);\n    \n    vec3 pureRGB = vec3(maskR, maskG, maskB);\n    \n    col = posterize(col, posterSteps);\n    col *= pureRGB;\n    col = mix(pureRGB, col, posterBlend);\n    \n    fragColor = vec4(col,1);\n}","name":"Image","description":"","type":"image"}]}