{"ver":"0.1","info":{"id":"mlSfRV","date":"1694239841","viewed":25,"name":"right here indicator","username":"pkclsoft","description":"fork of resize button to provide simple arrows pointing to the centre.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["button","arrow","resize"],"hasliked":0,"parentid":"cdcXR7","parentname":"resize button"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\n\nfloat createShape(float N,vec2 st,float size , float angleDir,vec2 location){\n    st = st * 2.-1. + location;\n    float a = atan(st.x,st.y) + angleDir;\n    float r = PI*2./N;\n    // Shaping function that modulate the distance\n\n    float d = cos(floor(.5+a/r)*r-a)*length(st);\n    return 1.0-smoothstep(size+-0.01,size+0.01,d);\n}\n\nvec2 rotateLine(vec2 st,float angle){\n   float s = sin(angle);\n   float c = cos(angle);\n  float xnew = st.x * c - st.y * s;\n  float ynew = st.x * s + st.y * c;\n    return vec2(xnew,ynew);\n}\n\n//Function to draw a line, taken from the watch shader\nfloat line(vec2 st, vec2 a, vec2 b, float thickness,vec2 location,float angle)\n{\n    st = st * 2.-1.-location;\n    st = rotateLine(st,angle);\n\tvec2 pa = st - a;\n\tvec2 ba = b - a;\n\tfloat h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n\treturn 1.0 - smoothstep(thickness * 0.8, thickness * 1.1, length(pa - ba * h));\n}\t\n\nfloat createArrowTop(vec2 st,float movement) {\n\n    return createShape(3.,st,.06,2.*PI,vec2(1.0, movement/4.0)) + line(st,vec2(0.0),vec2(-.15),0.02,vec2(-1.0, -movement/4.0),PI*0.75);\n}\n\nfloat createArrowBottom(vec2 st,float movement) {\n\n    return createShape(3.,st,.06,3.*PI,vec2(1.0, movement/4.0)) + line(st,vec2(0.0),vec2(.15),0.02,vec2(-1.0, -movement/4.0),PI*0.75);\n}\n\nfloat createArrowRight(vec2 st,float movement){\n    return  createShape(3.,st,.06,-PI/2.,vec2(-movement, 1.0)) + line(st,vec2(0.0),vec2(.1),0.03,vec2(movement, -1.0),PI/4.);\n}\n\nfloat createArrowLeft(vec2 st,float movement){\n    return  createShape(3.,st,.06,PI/2.,vec2(-movement, 1.0)) + line(st,vec2(0.0),vec2(-.1),0.03,vec2(movement, -1.0),PI/4.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n   // vec2 st = fragCoord/iResolution.xy;\n    vec2 st = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    // Time varying pixel color\n    vec3 color = vec3(0,2,4);\n    float allArrows = createArrowTop(st,-abs(sin(iTime))+2.0);\n    allArrows += createArrowBottom(st,abs(sin(iTime))+6.0);\n    allArrows += createArrowRight(st,abs(sin(iTime))-0.5);\n    allArrows += createArrowLeft(st,-abs(sin(iTime))-1.5);\n\n    color *= allArrows;\n    \n    // Output to screen\n    fragColor = vec4(color,0.0);\n}","name":"Image","description":"","type":"image"}]}