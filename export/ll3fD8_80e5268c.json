{"ver":"0.1","info":{"id":"ll3fD8","date":"1539354797","viewed":222,"name":"Intersection of sphere and line","username":"gaz","description":"Intersection of sphere and line","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["3d","intersection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rotate(float a)\n{\n\treturn mat2(cos(a), sin(a), -sin(a), cos(a));\t\n}\n\nfloat deLine(vec3 p, vec3 v, vec3 c)\n{\n\treturn length(cross(p - c, normalize(v)))-0.05;\n}\n\nfloat dePoint(vec3 p, vec3 c)\n{\n\treturn length(p - c) -0.2;\n}\n\nfloat deCircle(vec3 p, vec3 c, vec3 n, float r)\n{\n\tp -= c;\n\treturn max(abs(dot(p, n))-0.01, abs(length(cross(p, n))-r))-0.05;\n}\n\n#define Info \\\n    vec3 axis = normalize(vec3(1,5,1));\\\n    vec3 ro = vec3(-1,sin(iTime), 8.0+4.0*sin(iTime));\\\n    vec3 rd = normalize(vec3(1,0,3));\\\n    vec3 o = vec3(0);\\\n    vec3 u = normalize(cross(ro,rd));\\\n    vec3 w = normalize(cross(u,rd));\\\n    float l = dot(ro,w);\\\n    float r =5.0;\\\n    vec3 v = w*l;\\\n    vec3 a = v -sqrt(r*r-l*l)*rd;\\\n    vec3 b = v +sqrt(r*r-l*l)*rd;\n\n#define V_axis(p) deLine(p,axis,o)\n#define V_ro(p) deLine(p,ro,o)\n#define V_rd(p) deLine(p,rd,ro)\n#define V_u(p) deLine(p,u,ro)\n#define V_w(p) deLine(p,w,o)\n#define P_o(p) dePoint(p,o)\n#define P_ro(p) dePoint(p,ro)\n#define P_v(p) dePoint(p,v)\n#define P_a(p) dePoint(p,a)\n#define P_b(p) dePoint(p,b)\n#define C_axis(p) deCircle(p,o,axis,r)\n#define C_a(p) deCircle(p,o,normalize(cross(a,axis)),r)\n#define C_b(p) deCircle(p,o,normalize(cross(b,axis)),r)\n\n#define Color(a,b) if (a(p)<0.01) return b;\n#define R vec3(1,0,0)\n#define G vec3(0,1,0)\n#define B vec3(0,0,1)\n\nvec3 doColor(vec3 p)\n{\n    Info\n\tColor(V_axis, R)\n\tColor(V_axis, G)\n\tColor(V_ro, G)\n\tColor(V_rd, vec3(1,0.5,0))\n\tColor(V_u, G)\n\tColor(V_w, G)\n\tColor(P_o, G)\n\tColor(P_ro, vec3(1))\n\tColor(P_v, B)\n\tColor(P_a, R)\n\tColor(P_b, R)\n\tColor(C_axis, B)\n\tColor(C_a, B)\n\tColor(C_b, B)\n\n\treturn vec3(1);\n}\n\n#define De(a) de = min(de, a(p)); \nfloat map(vec3 p)\n{\n    Info\n\tfloat de = 1.0;\n\tDe(V_axis)\n\tDe(V_ro)\n\tDe(V_rd)\n\tDe(V_u)\n\tDe(V_w)\n\tDe(P_o)\n\tDe(P_ro)\n\tDe(P_v)\n\tDe(P_a)\n\tDe(P_b)\n\tDe(C_axis)\n\tDe(C_a)\n\tDe(C_b)\n\treturn de;\n}\n\nmat3 lookat(vec3 eye, vec3 target, vec3 up)\n{\n    vec3 w = normalize(target-eye), u = normalize(cross(w,up));\n    return mat3(u,cross(u,w),w);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 d = normalize(vec3((fragCoord * 2.0 - iResolution.xy) / iResolution.y,2));\n \tvec3 p = vec3(0,5,18);\n\tp.xz = rotate(iTime*0.5) * p.xz;\n\tvec3 ta = vec3(0);\n\td = lookat(p,ta,vec3(0,1,0)) * d;\n\tfloat t=0., x;\n\tvec3 col = vec3(0.2);\n\tfor (float i=1.; i>0.; i-=.01) \n  \t{\n\t\tt +=x =map(p);\n\t\tif(x < 0.01){\n\t\t\tcol = i*i*i*(1.0+doColor(p));\n\t\t\tbreak;\n\t\t}\n\t\tp+=d*x;\n\t}\n    col = pow(col, vec3(2));\n    fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}