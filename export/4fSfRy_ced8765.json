{"ver":"0.1","info":{"id":"4fSfRy","date":"1725058983","viewed":21,"name":"Truchet not Trebuchet","username":"jcraw","description":"Learning Truchet","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["truchet"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI     3.14159265\n\nfloat N21(vec2 p) {\n    return fract(sin(p.x * 100.  +p.y * 6574.)*5000.);\n}\n\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(234.34, 435.345));\n    p += dot(p, p+34.23);\n    return fract(p.x*p.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 originalUv = fragCoord.xy/iResolution.xy;\n    vec2 uv = (fragCoord- .5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    uv.x += iTime * .1;\n\n   \n    uv *= 3.;\n    vec2 gridUv = fract(uv) - .5; // move the origin of box to the center \n    vec2 gridIndex = floor(uv);\n    \n    // grid boundaries\n    //if(abs(gridUv.x) >= .49 || abs(gridUv.y) >= .49) col = vec3(1, 0, 0);\n\n    float hash = Hash21(gridIndex);\n    \n    bool flip = hash >= .5;\n    if(flip) gridUv.x *= -1.;\n        \n    float d = abs(abs(gridUv.x + gridUv.y) - .5);\n    \n    vec2 circleUv = gridUv - sign(gridUv.x + gridUv.y + .001) *.5;\n    d = length(circleUv);\n    \n    float lineWidth = .2;\n    lineWidth = lineWidth * originalUv.x / 2. + lineWidth/2.;\n    \n    \n    float lineMask = smoothstep(.01, -.01, abs(d -.5) - lineWidth); // subtract from abs to make it thicker\n    \n    float angle = atan( circleUv.x/circleUv.y ); // -PI to PI\n    float checker = mod(gridIndex.x + gridIndex.y, 2.)*2.-1.; // gives every other \n    //checker += mod(gridIndex.y, 2.);\n    //checker = abs(checker - 1.);\n    \n    float flow = sin(iTime + sign(checker - .5) * angle * 10.);  // sin wave flowing along the truchet \n    \n    float x = checker*angle/(PI/2.) - iTime*.3;\n    float y = (d - (.5-lineWidth))/(2.*lineWidth);  // but this doesn't tile correctly\n    y = abs(y-.5)*2.; // fix the tiling issue by offsetting the UV \n    //y = smoothstep(.4, .5, d - lineWidth);\n    //col += flow * lineMask;\n    vec2 truchetUv = vec2(x, y);\n    \n    //col.rg += truchetUv * lineMask;\n    col += texture(iChannel0, truchetUv).rgb * lineMask;\n    //col += texture(iChannel1, truchetUv).rgb * lineMask;\n    col *= 1.-truchetUv.y;\n    \n    // background\n    vec3 background = vec3(0.2);\n    background *= 1.-lineMask;\n    col += background;\n    \n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}