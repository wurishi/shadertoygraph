{"ver":"0.1","info":{"id":"mtsXDn","date":"1674606229","viewed":154,"name":"Fake water refraction","username":"ianertson","description":"Fake water refraction","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise","refraction","water"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// wave frequency\n#define FREQ 3.5\n\n// noise iterations\n#define DEPTH 3\n\n// distortion amount\n#define AMOUNT 0.46\n\n///////////////////////////////////////////////////////\n#define T (iTime*0.25)\n\nfloat hash21(vec2 p) {\n    p += vec2(3.2918, 9.29184);\n    p *= fract(cos(p*3.29184)*10.29184);\n    const int MAX_HASH = 823785;\n    float hx = float(int(92.2918+p.x * float(MAX_HASH)) % MAX_HASH) / float(MAX_HASH);\n    float hy = float(int(92.2918+p.y * float(MAX_HASH)) % MAX_HASH) / float(MAX_HASH);\n    vec2 p2 = vec2(hx, hy);\n    return fract(10.92718 * cos(atan(hx, hy) * 9.291854) * dot(p, p2));\n} \n\nfloat noise(vec2 p) {\n    vec2 id = floor(p);\n    vec2 lv = smoothstep(0.0, 1.0, fract(p));\n    float a = hash21(id);\n    float b = hash21(id+vec2(1.0, 0.0));\n    float ab = mix(a, b, lv.x);\n    float c = hash21(id+vec2(0.0, 1.0));\n    float d = hash21(id+vec2(1.0, 1.0));\n    float cd = mix(c, d, lv.x);\n    return mix(ab, cd, lv.y);\n}\n\nfloat perlin(vec2 p, float freq, int depth) {\n    float n = 0.0;\n    for (int i = 0; i < depth; i++) { n += noise(p*freq); freq *= 1.6;}\n    return n / float(depth);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec3 col = vec3(0.0);\n   vec2 uv = fragCoord/iResolution.xy;\n   vec2 timeOffset = vec2(cos(T), sin(T));\n   vec2 constantOffset = vec2(T*0.5, T*0.5) * (0.01*(0.5+(0.5*cos((T + 9.289178)*0.5))));\n\n   float nx = perlin((uv + timeOffset) + constantOffset, FREQ, DEPTH);\n   float ny = perlin(constantOffset + (uv - timeOffset)+vec2(3.14281, 3.91892), FREQ, DEPTH);\n   float nz = perlin(vec2(nx, ny)*timeOffset, FREQ*0.5, DEPTH);\n   float nw = perlin(uv*nz, FREQ, DEPTH);\n   \n   vec2 offset = vec2(nx-nw, ny+nw)*nz;\n   \n\n   vec2 offsetUv = mix(uv, uv+offset, clamp(AMOUNT*max(0.16, nw), 0.0, 1.0));\n   vec3 bg = texture(iChannel0, offsetUv).rgb;\n   col += bg;\n   float absorb = max(0.25, pow((nx+ny+nz)/3.0, 2.2)) / 1.6;\n   col.r -= absorb*0.89;\n   col.g -= absorb*0.40;\n   col.b -= absorb*0.33;\n   \n   col += pow(nz,3.0)*0.86;\n   \n   col = pow(col, vec3(0.8512));\n\n    \n   fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}