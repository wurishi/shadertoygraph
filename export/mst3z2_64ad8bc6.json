{"ver":"0.1","info":{"id":"mst3z2","date":"1677576067","viewed":126,"name":"Wobbly rounded polygons","username":"sig","description":"Wob wob!","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["geometric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926\n#define TWOPI 6.2831852\n\nvec2 unit(float angle) {\n    return vec2(cos(angle), sin(angle));\n}\n\nfloat poly(vec2 p, float n, float outer_R, float inner_R, float lineWidth, float pixelWidth) {\n    float A = TWOPI / n;\n    float a = floor(atan(p.y, p.x) / A) * A;\n        \n    vec2 q = p - inner_R * unit(a + A * 0.5);\n    float b = atan(q.y, q.x);\n   \n    float r = mod(a - b, TWOPI) < PI ? dot(q, unit(a)) :     // b < a\n              mod(A + a - b, TWOPI) > PI ? dot(q, unit(a + A)) : length(q);   // b > a + A\n    \n    return smoothstep(lineWidth + pixelWidth, lineWidth - pixelWidth, abs(outer_R - r));\n}\n\nmat2 rotate(float angle) {\n  float s = sin(angle);\n  float c = cos(angle);\n  return mat2(\n    c, -s,\n    s, c\n  );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = 10.0 * ((2.0 * fragCoord - iResolution.xy) / iResolution.y);\n    float pixelWidth = 10.0 / iResolution.y;\n    float lineWidth = 0.5;    \n    \n    float S = sin(iTime) + 2.0;\n    \n    float x = poly(0.25 * rotate(iTime) * (p - vec2(-12.5, 4.0)), 7.0, 2.0, 1.5, lineWidth, pixelWidth);\n    float y = poly(0.25 * rotate(iTime) * (p - vec2(-14.0, 4.0)), 9.0, 2.0, 3.0, lineWidth, pixelWidth);\n    float z = poly(0.25 * rotate(iTime) * (p - vec2(-13.0, 4.3)), 5.0, 2.0, 0.5, lineWidth, pixelWidth);\n   \n    // Output to screen\n    fragColor = vec4(x, y, z, 1.0);\n}","name":"Image","description":"","type":"image"}]}