{"ver":"0.1","info":{"id":"mdsXzf","date":"1669351995","viewed":143,"name":"alien water","username":"vivavolt","description":"a trippy liquid effect","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"magic curtain 3\" by vivavolt. https://shadertoy.com/view/dslXzf\n// 2022-11-25 04:51:03\n\n#define alpha .5\n#define beta .5\n#define gamma .5\n\n#define t (iTime / 5. + 1.)\n\nmat2 move(in float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c, -s, s, -c);\n}\n\nfloat map(in vec3 st) {\n    st.xy *= move(t * (0.2 + 0.2 * alpha));\n    st.xz *= move(t * (0.2 + 0.2 * beta));\n    vec3 p = st * (.2*sin(t / 10. * alpha) + 8. + 3.*beta) * 2.0 + t;\n    return length(st + vec3(sin(cos(t * 0.5 * gamma)))) + sin(p.x + sin(cos(p.y) + cos(p.z)*gamma)) * 0.5 - 2.0;\n}\n\nconst float noiseSizeCoeff = 0.61; // Bigger => larger glitter spots\nconst float noiseDensity = 53.0;  // Bigger => larger glitter spots\n\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  { \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n  // First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n  // Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n  // Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n  // Gradients: 7x7 points over a square, mapped onto an octahedron.\n  // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n  // Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n  // Mix final noise value\n  vec4 m = max(noiseSizeCoeff - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return noiseDensity * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\n\nfloat softLight( float s, float d )\n{\n\treturn (s < 0.5) ? d - (1.0 - 2.0 * s) * d * (1.0 - d) \n\t\t: (d < 0.25) ? d + (2.0 * s - 1.0) * d * ((16.0 * d - 12.0) * d + 3.0) \n\t\t\t\t\t : d + (2.0 * s - 1.0) * (sqrt(d) - d);\n}\n\nvec3 softLight( vec3 s, vec3 d )\n{\n\tvec3 c;\n\tc.x = softLight(s.x,d.x);\n\tc.y = softLight(s.y,d.y);\n\tc.z = softLight(s.z,d.z);\n\treturn c;\n}\n\nfloat hardLight( float s, float d )\n{\n\treturn (s < 0.5) ? 2.0 * s * d : 1.0 - 2.0 * (1.0 - s) * (1.0 - d);\n}\n\nvec3 hardLight( vec3 s, vec3 d )\n{\n\tvec3 c;\n\tc.x = hardLight(s.x,d.x);\n\tc.y = hardLight(s.y,d.y);\n\tc.z = hardLight(s.z,d.z);\n\treturn c;\n}\n\nfloat vividLight( float s, float d )\n{\n\treturn (s < 0.5) ? 1.0 - (1.0 - d) / (2.0 * s) : d / (2.0 * (1.0 - s));\n}\n\nvec3 vividLight( vec3 s, vec3 d )\n{\n\tvec3 c;\n\tc.x = vividLight(s.x,d.x);\n\tc.y = vividLight(s.y,d.y);\n\tc.z = vividLight(s.z,d.z);\n\treturn c;\n}\n\nvec3 linearLight( vec3 s, vec3 d )\n{\n\treturn 2.0 * s + d - 1.0;\n}\n\nfloat pinLight( float s, float d )\n{\n\treturn (2.0 * s - 1.0 > d) ? 2.0 * s - 1.0 : (s < 0.5 * d) ? 2.0 * s : d;\n}\n\nvec3 pinLight( vec3 s, vec3 d )\n{\n\tvec3 c;\n\tc.x = pinLight(s.x,d.x);\n\tc.y = pinLight(s.y,d.y);\n\tc.z = pinLight(s.z,d.z);\n\treturn c;\n}\n\nfloat vignette(vec2 uv) {\n    uv *=  1.0 - uv.yx;   //vec2(1.0)- uv.yx; -> 1.-u.yx; Thanks FabriceNeyret !\n    \n    float vig = uv.x*uv.y * 15.0; // multiply with sth for intensity\n    \n    vig = pow(vig, 0.25); // change pow for modifying the extend of the  vignette\n    return vig;\n}\n\nvec3 pixel(vec2 p) {\n    vec2 st = p / iResolution.xy - vec2(1.0, 0.5);\n\n    vec3 col = vec3(beta, gamma, alpha);\n    float dist = 2.5;\n\n    for (int i = 0; i <= 3; i++) {\n        vec3 st = vec3(0.0, 0.0, beta) + normalize(vec3(st, -1.0)) * dist;\n        float rz = map(st);\n        float f = clamp((rz - map(st + 0.1)) * 0.5, -0.5, 1.0);\n        vec3 l = vec3(0.1588235294*alpha, 0.1254901961*beta, 0.349019608*gamma) + vec3(4.0, 2.5, 2.5) * f;\n        col = col * l + smoothstep(5.0, 2.0, rz) * 0.4 * l;\n        dist += min(rz, t);\n    }\n    \n    return col;\n}\n\nvec3 blur9(vec2 p, vec2 resolution, vec2 direction) {\n  vec3 color = vec3(0.0);\n  vec2 off1 = vec2(1.3846153846) * direction;\n  vec2 off2 = vec2(3.2307692308) * direction;\n  color += pixel(p) * 0.2270270270;\n  color += pixel(p + (off1 / resolution)) * 0.3162162162;\n  color += pixel(p - (off1 / resolution)) * 0.3162162162;\n  color += pixel(p + (off2 / resolution)) * 0.0702702703;\n  color += pixel(p - (off2 / resolution)) * 0.0702702703;\n  return color;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {    \n    vec3 col = blur9(fragCoord.xy, iResolution.xy, vec2(255., 255.));\n    fragColor = vec4(col,1.0);\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float vig = vignette(uv);\n \n    float fadeLR = .7 - abs(uv.x - .4);\n    float fadeTB = 1.1 - uv.y;\n    vec3 pos = vec3(uv * vec2( 3. , 1.) - vec2(0., iTime * .00005), iTime * .006);\n   \n    float n = fadeLR * fadeTB * smoothstep(.50, 1.0, snoise(t + pos * iResolution.y / 10.)) * 8.;\n  \n    // a bunch of constants here to shift the black-white of the noise to a greyer tone\n    vec3 noiseGreyShifted = min((vec3(n) + 1.) / 3. + .3, vec3(1.)) * .91;\n    \n    \n    vec3 mixed = col.xyz;\n    //mixed = softLight(noiseGreyShifted, s);\n    //mixed = mix(col.xyz, hardLight(noiseGreyShifted, col.xyz), .2);\n    mixed = mix(col.xyz, vividLight(noiseGreyShifted, col.xyz), .02);\n    \n    fragColor = vec4(mixed, 1.0);\n    \n    float k = (sin(t / 1.0) + 1.0)/4.0 + 0.75;\n   \n    #define heartoffset vec2(sin(uv.x + iTime)*10., cos(uv.x * 10. + 0.01*sin(iTime) + iTime)*15.*(1.5-uv.y)*0.4)\n    #define heartcoord fract(((fragCoord.xy + heartoffset) - iResolution.xy/2.) / cellsize)\n    \n    //vec3 col = vec3(0.2588235294, 0.1254901961, 0.2549019608);\n\n    \n    // Add a bit of shading to make things seem more 3-dimensional\n    fragColor -= (heartoffset.y + heartoffset.x) * 0.01 * k * (1.-uv.y)*0.4;\n    fragColor -= vec4((1.-uv.y)*0.1*k,0,0,1.);\n    fragColor -= (vec4(uv.y, uv.y * 0.8, uv.y, 1.)) / 8.0;\n    fragColor *=  vig;\n}","name":"Image","description":"","type":"image"}]}