{"ver":"0.1","info":{"id":"43fBRH","date":"1727981628","viewed":36,"name":"classic dancing crosses","username":"garrisonhh","description":"inefficient implementation but I've wanted to figure this one out for a while :) so satisfying","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["illusion","crosses"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.1415;\nconst float TAU = PI * 2.0;\n\nmat2 matRotate(float angle) {\n    return mat2(\n        cos(angle), -sin(angle),\n        sin(angle), cos(angle)\n    );\n}\n\nfloat drawCrossRect(vec2 coord, vec2 center, vec2 size, float rotation) {\n    vec2 offset = size / 2.0;\n    vec2 pos = matRotate(rotation) * (coord - center);\n\n    return\n        step(-offset.x, pos.x) *\n        step(-offset.y, pos.y) *\n        step(pos.x, offset.x) *\n        step(pos.y, offset.y);\n}\n\nfloat drawCross(vec2 fragCoord, vec2 center, float crossSize, float rotation) {\n    return max(\n        drawCrossRect(fragCoord, center, vec2(crossSize, crossSize / 3.0), rotation),\n        drawCrossRect(fragCoord, center, vec2(crossSize / 3.0, crossSize), rotation)\n    );\n}\n\nfloat drawCrossGrid(vec2 fragCoord, float crossSize, vec2 gridOffset, float t) {\n    vec2 extra = iResolution.xy / vec2(crossSize);\n    vec2 offset = vec2(-crossSize / 3.0) * extra + gridOffset;\n    ivec2 crossCount = ivec2(2.0 * extra + ceil(iResolution.xy / crossSize));\n    \n    // determine cross grid\n    float rotation = 0.0;\n    float rotValue = t * 2.0;\n    int rotMod = int(rotValue) % 2;\n    switch (rotMod) {\n    case 0: rotation = fract(rotValue) * PI / 2.0; break;\n    case 1: rotation = (1.0 - fract(rotValue)) * PI / 2.0; break;\n    }\n\n    float value = 0.0;\n    for (int y = 0; y < crossCount.y; ++y) {\n        float rowOffset = float(y) * crossSize;\n        vec2 pos = offset + vec2(rowOffset / 3.0, rowOffset);\n        \n        for (int x = 0; x < crossCount.x; ++x) {\n            float c = drawCross(fragCoord, pos, crossSize, rotation);\n            value = max(value, c);\n            \n            pos += vec2(crossSize, -crossSize / 3.0);\n        }\n        \n    }\n    \n    return value;\n}\n\nfloat drawInterlockingCrossGrid(vec2 fragCoord, float crossSize, float t) {\n    vec2 crossDist = vec2(crossSize, -crossSize / 3.0);\n    vec2 oppositeCrossDist = vec2(crossSize * 2.0 / 3.0, crossSize / 3.0);\n    vec2 movingGridOffset = crossDist * fract(t);\n    \n    int tP = int(t * 2.0) % 2;\n    if (tP == 0) {\n        return drawCrossGrid(fragCoord, crossSize, movingGridOffset, t);\n    } else {\n        float v = drawCrossGrid(fragCoord, crossSize, movingGridOffset - oppositeCrossDist, t);\n        return 1.0 - v;\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float crossSize = 100.0;\n\n    float c = drawInterlockingCrossGrid(fragCoord, crossSize, iTime * 0.5);\n    fragColor = vec4(vec3(c),1.0);\n}","name":"Image","description":"","type":"image"}]}