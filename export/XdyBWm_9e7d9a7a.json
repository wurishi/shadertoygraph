{"ver":"0.1","info":{"id":"XdyBWm","date":"1528982660","viewed":104,"name":"e3dgeughraytracer","username":"Pac85","description":"simple sphere ray intersection","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["ray"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nstruct SphereIntD\n{\n   bool Intersect;\n   float HitD;\n   vec3 IntPoint;\n   vec3 Normal;\n   int HitIndex; \n    \n   vec3 color, emi;\n};\n\nstruct Sphere\n{\n    vec3 center;\n    float rad;\n    vec3 color;\n    vec3 EmissionColor;\n};\n   \nstruct Ray\n{\n    vec3 origin;\n    vec3 direction;\n};\n\n\nSphereIntD RCsphere(Ray ray,  Sphere sphere)\n{\n    SphereIntD Temp;\n    vec3 op = sphere.center - ray.origin;\n    float t ,eps = 1e-3;\n    float b = dot(op , ray.direction);\n    float det = b * b - dot(op,op) + sphere.rad*sphere.rad;\n    if(det < 0.0){Temp.Intersect = false; return Temp;} else det = sqrt(det);\n    Temp.HitD = (t = b - det) > eps ? t : ((t = b + det) > eps ? t : 0.0);\n        if (Temp.HitD == 0.0){Temp.Intersect = false;return Temp;} else \n        {\n            Temp.IntPoint = ray.origin + ray.direction * Temp.HitD;\n         \tTemp.Normal = normalize(sphere.center - Temp.IntPoint);\n        \tTemp.Intersect = true;\n        }\n    return Temp;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    /*****************************Primaryray**********************************************************/\n\tvec2 uv = (-1.0 + 2.0*fragCoord.xy / iResolution.xy) * vec2(iResolution.x/iResolution.y, 1.0);\n    Ray PrRay;\n    PrRay.origin = vec3(0.0,50.0,-100.0);\n    PrRay.direction = normalize(vec3(uv, 1.0));\n    /*****************************Primaryray**********************************************************/\n    \n    Sphere TestSphere;\n    TestSphere.center = vec3(70.0,40.0,0.0);\n    TestSphere.rad = 20.0;\n    TestSphere.color = vec3(1.0,0.0,0.1);\n    TestSphere.EmissionColor = vec3(1.0,0.0,0.1);\n    \n    \n    SphereIntD intD = RCsphere(PrRay, TestSphere);\n    \n    fragColor = vec4((intD.Intersect?vec3(1.0,1.0,1.0):vec3(.0,.0,.0)),1.0);\n}","name":"Image","description":"","type":"image"}]}