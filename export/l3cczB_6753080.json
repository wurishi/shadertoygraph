{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"texture","id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"code":"// https://www.shadertoy.com/view/l3cczB rainy day in the raytraced swamp, 2024 by jt\n// based on https://www.shadertoy.com/view/XXtcR4 raytraced grass triangle terrain\n// based on https://www.shadertoy.com/view/l33yzN triangular grid on mountain wave\n// based on https://www.shadertoy.com/view/ddcyRl textured terrain by triangle DDA\n// based on https://www.shadertoy.com/view/mlfXD7 Triangle DDA via Voxel DDA Slice\n// based on https://www.shadertoy.com/view/mtfXDM Branchless Voxel Raycasting Tex2\n// clean-up of https://www.shadertoy.com/view/7dK3D3 Branchless Voxel Raycasting Tex\n// building on voxel DDA of https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4\n// (with loop optimization by kzy), DDA based on http://lodev.org/cgtutor/raycasting.html\n\n// Using triangular (prism) grid to efficiently render some clumpy grass\n// https://www.shadertoy.com/view/clGBzm orthogonal circles flower sdf 2\n// on a terrain ray-traced via cube-grid dda (lift->3d, dda, project->2d).\n\n// In this variant most effects are enabled by default.\n\n// tags: 3d, raytracing, grid, terrain, raycasting, triangle, voxel, prism, heightmap, slice, dda, step, textured, triangular, polygonal\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// TODO: fix glitches when using vertex-relative / unsheared local prism coordinates\n// TODO: apply light under water\n\n#define USE_SHADOWS\n#define PEBBLES\n#define RAIN\n#define WATER\n#define GROW\n\nfloat hash13(vec3 p3) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    p3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 hash33(vec3 p3) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    p3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\n#define pi 3.1415926\n#define tau (pi+pi)\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\n#define DIST_MAX 1000.0\n\n#define MAX_RAY_STEPS 64\n\nvec3 triangle_center(vec3 a, vec3 b, vec3 c)\n{\n    return (a+b+c)/3.0;\n}\n\nvec3 triangle_normal(vec3 a, vec3 b, vec3 c)\n{\n    return normalize(cross(a - b, c - b));\n}\n\nfloat plane_intersection(vec3 pp, vec3 pn, vec3 ro, vec3 rd)\n{\n    return dot(pp - ro,pn)/dot(rd,pn);\n}\n\nfloat heightmap(vec2 p)\n{\n    float t = 1.0;\n\n    return\n        4.0\n        *\n        // edgy\n        (\n            1.0\n            -\n            mix\n            (\n                abs(sin(tau*(p.x+t)/20.0))*abs(cos(tau*(p.y+t)/20.0)),\n                abs(sin(tau*((p.x+p.y)/sqrt(2.0)+t)/20.0))*abs(cos(tau*((-p.y+p.x)/sqrt(2.0)+t)/20.0)),\n                0.5\n            )\n        )\n        -\n        1.0;\n\n    return\n        4.0\n        *\n        // smooth\n        mix\n        (\n            0.5+0.5*sin(tau*(p.x+t)/20.0)*cos(tau*(p.y+t)/20.0),\n            0.5+0.5*sin(tau*((p.x+p.y)/sqrt(2.0)+t)/20.0)*cos(tau*((-p.y+p.x)/sqrt(2.0)+t)/20.0),\n            0.5\n        );\n}\n\nvec4 random_unit_quaternion(vec3 r) // r in [0,1] https://stackoverflow.com/questions/31600717/how-to-generate-a-random-quaternion-quickly\n{\n    return\n        vec4\n        (\n            sqrt(1.0-r.x) * sin(2.0*pi*r.y),\n            sqrt(1.0-r.x) * cos(2.0*pi*r.y),\n            sqrt(    r.x) * sin(2.0*pi*r.z),\n            sqrt(    r.x) * cos(2.0*pi*r.z)\n        );\n}\n\n// https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation#Quaternion-derived_rotation_matrix\nmat3 quaternion_to_matrix(vec4 q) // https://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToMatrix/index.htm\n{\n    float s = dot(q,q); // just in case, not needed for uniform quaternions\n    return\n        /*\n        mat3\n        (\n            vec3(1.0-2.0*(q.y*q.y+q.z*q.z),       2.0*(q.x*q.y-q.z*q.w),       2.0*(q.x*q.z+q.y*q.w)),\n            vec3(    2.0*(q.x*q.y+q.z*q.w), 1.0 - 2.0*(q.x*q.x+q.z*q.z),       2.0*(q.y*q.z-q.x*q.w)),\n            vec3(    2.0*(q.x*q.z-q.y*q.w),       2.0*(q.y*q.z+q.x*q.w), 1.0 - 2.0*(q.x*q.x+q.y*q.y))\n        );\n        */\n        mat3(1) // identity\n        +\n        2.0\n        *\n        mat3 // could swizzle with cross-product be used to compactify this?\n        (\n            vec3(-q.y*q.y-q.z*q.z,+q.x*q.y-q.z*q.w,+q.x*q.z+q.y*q.w),\n            vec3(+q.x*q.y+q.z*q.w,-q.x*q.x-q.z*q.z,+q.y*q.z-q.x*q.w),\n            vec3(+q.x*q.z-q.y*q.w,+q.y*q.z+q.x*q.w,-q.x*q.x-q.y*q.y)\n        )\n        /\n        s;\n}\n\nmat3 random_rotation(vec3 r)\n{\n    return quaternion_to_matrix(random_unit_quaternion(r));\n}\n\nvec4 box(vec3 ro, vec3 rd, vec3 sz) // modified https://iquilezles.org/articles/intersectors/\n{\n    vec3 m = 1.0/rd; // can precompute if traversing a set of aligned boxes\n    vec3 n = m*ro;   // can precompute if traversing a set of aligned boxes\n    vec3 k = abs(m)*sz;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n    float tN = max( max( t1.x, t1.y ), t1.z );\n    float tF = min( min( t2.x, t2.y ), t2.z );\n    if( tN>tF || tF<0.0) return vec4(0,0,0,DIST_MAX); // no intersection\n    vec3 nor = (tN>0.0) ? step(vec3(tN),t1) : // ro ouside the box\n                           step(t2,vec3(tF));  // ro inside the box\n    nor *= -sign(rd);\n    return vec4(nor, tN);\n}\n\n// Construction of the radius formula:\n// The leafs of the flower-shape are circle-arcs\n// inside the unit-circle originating at (0,-1).\n// Each circle-arc is tangential to the y axis.\n// wxmaxima:\n// circle:(x-x_0)^2+(y-y_0)^2=r^2; /* the leafs of the flower are circles */\n// origin:(0-x_0)^2+(-1-y_0)^2=r^2; /* the origin is at (0,-1) */\n// tangent:x_0=r; /* circles are tangent to y axis (orthogonal to unit circle) */\n// solve([circle, origin, tangent],[x_0,y_0,r]);\n// [[x_0=(y^2+2*y+x^2+1)/(2*x),y_0=-1,r=(y^2+2*y+x^2+1)/(2*x)]]\nfloat ortho_circle_flower_sdf(vec2 p) // https://www.shadertoy.com/view/clGBzm orthogonal circles flower sdf 2, 2023 jt\n{\n    float n = 11.0; // must be odd integer\n\n    float slice = pi/n;\n\n    p.x = abs(p.x); // mirror horizontally\n    float r = (p.y*p.y+2.0*p.y+p.x*p.x+1.0)/(2.0*p.x); // calculate radius of circular arc leaf passing through this point\n\n    // equidistant circle segment endpoints on unit circle\n    float r0 = tan(floor(atan(r)/slice)*slice); // to angle then quantize then to length\n    float r1 = tan( ceil(atan(r)/slice)*slice); // to angle then quantize then to length\n\n    // circle center\n    vec2 c0 = vec2(r0,-1); // lower leaf\n    vec2 c1 = vec2(r1,-1); // upper leaf\n\n    // endpoints\n    float mu = atan(p.x,p.y);\n    mu = (floor(mu/slice/2.0)+0.5)*slice*2.0;\n    vec2 c = vec2(sin(mu),cos(mu));\n\n    return\n        //length(p) < 1.0; // approximate\n        dot(p, c) < 1.0 // thanks to tdhooper for fixing remaining discontinuities by changing length(p) < 1.0 to dot(p, c) < 1.0 (turns circle into polygon)\n        ?\n        min(abs(length(p-c0)-r0),abs(length(p-c1)-r1)) // circular arc leafs\n        :\n        length(p-c); // leaf endpoints\n}\n\nstruct result\n{\n    vec3 normal;\n    float dist;\n    vec3 color;\n};\n\nresult combine(result a, result b)\n{\n    //return a.dist < b.dist ? a : b; // ??? why doesn't this compile ???\n    if(a.dist < b.dist)\n        return a;\n    return b;\n}\n\nvec2 sphere(vec3 ro, vec3 rd, vec3 ce, float ra) // modified https://iquilezles.org/articles/intersectors/\n{\n    vec3 oc = ro - ce;\n    float b = dot( oc, rd );\n    vec3 qc = oc - b*rd;\n    float h = ra*ra - dot(qc, qc);\n    if(h < 0.0) return vec2(DIST_MAX); // no intersection\n    h = sqrt(h);\n    vec2 d = vec2(-b-h, -b+h);\n    return vec2(d.x < 0.0 ? DIST_MAX : d.x, d.y < 0.0 ? DIST_MAX : d.y);\n}\n\nvec2 ellipse(vec3 ro, vec3 rd, vec3 ra) // modified https://iquilezles.org/articles/intersectors/\n{\n    vec3 ocn = ro/ra;\n    vec3 rdn = rd/ra;\n    float a = dot( rdn, rdn );\n    float b = dot( ocn, rdn );\n    float c = dot( ocn, ocn );\n    float h = b*b - a*(c-1.0);\n    if(h < 0.0) return vec2(DIST_MAX); //no intersection\n    h = sqrt(h);\n    vec2 d = vec2(-b-h,-b+h)/a;\n    return vec2(d.x < 0.0 ? DIST_MAX : d.x, d.y < 0.0 ? DIST_MAX : d.y);\n}\n\n#define ESSENTIAL_MATRIX\n\n#ifdef RAIN\nfloat fade_in_rain()\n{\n    return tanh(iTime/30.0);\n}\n#endif\nvec3 improved_texture_lookup(vec3 ray_pos_orig, vec3 ray_dir_orig, mat2x3 transform, vec3 center, vec3 normal, vec2 coords) // thanks to pyblob, joins triangles more smoothly\n{\n    // bypass fract, still has problems at occlusions\n    vec3 color = textureGrad(iChannel0, fract(coords/5.0), dFdx(coords/5.0), dFdy(coords/5.0)).xyz;\n/*\n    // analytic gradients (assuming camera is not at infinity) ... let's hope, I got the derivatives correct. Though, I think you can still simplify a bit.\n    // mat3x2(-1,0, 1,0, 0,1) * flip * flip * T * (rd.xy * dot(pp - ro, pn) / dot(rd, pn));\n    vec3 rd = ray_dir_orig, ro = ray_pos_orig;//, pp = m, pn = normal;\n    vec2 px = (dFdx(rd.xy) - dot(dFdx(rd), normal) / dot(rd, normal) / 2. * rd.xy) * dot(center - ro, normal) / dot(rd, normal);\n    vec2 py = (dFdy(rd.xy) - dot(dFdy(rd), normal) / dot(rd, normal) / 2. * rd.xy) * dot(center - ro, normal) / dot(rd, normal);\n    mat2 Q = mat3x2(-1,0, 1,0, 0,1) * transform;\n    vec3 color = textureGrad(iChannel0, fract(coords/5.0), Q*px/5.0, Q*py/5.0).xyz;\n*/\n#ifdef RAIN\n    return color*mix(1.0,0.125,fade_in_rain()); // darken ground to make it look more wet\n#else\n    return color;\n#endif\n}\n\n#ifdef ESSENTIAL_MATRIX\nmat2x3 triangle_matrix()\n{\n    return\n        mat2x3 // using normalize is way easier to remember than all the square-roots\n        (\n            normalize(vec3(+1,-1, 0)), // NOTE: sum of components is zero\n            normalize(vec3(-1,-1, 2))  // NOTE: sum of components is zero\n        );\n}\n#else\nmat3 triangle_matrix() // easier to remember than all the square-roots\n{\n    vec3 a = vec3(+1,-1,0);\n    vec3 c = vec3(-1,-1,-1);\n    vec3 b = cross(c, a);\n    return mat3(normalize(a),normalize(b), normalize(c));\n}\n#endif\n#ifdef RAIN\nvec3 skycolor(vec3 ray_dir) { return mix(vec3(0.2,0.4,0.8),vec3(0.2,0.3,0.5),abs(ray_dir.z)); }\n#else\nvec3 skycolor(vec3 ray_dir) { return mix(vec3(0.2,0.4,0.8),vec3(0,0,1),abs(ray_dir.z)); }\n#endif\nresult triangle_trace(vec3 ray_pos_orig, vec3 ray_dir_orig) // step triangles by stepping through voxels along plane orthogonal to main diagonal (jt)\n{\n    result content = result(-ray_dir_orig, DIST_MAX, skycolor(ray_dir_orig)); // sky sphere\n#ifdef ESSENTIAL_MATRIX\n    // coordinate-system along plane orthogonal to diagonal (1,1,1)\n    mat2x3 T = triangle_matrix();\n    // step through voxels along plane orthogonal to main diagonal (1,1,1)\n    vec3 ray_pos = T * ray_pos_orig.xy;\n    vec3 ray_dir = T * ray_dir_orig.xy;\n#else\n    // coordinate-system along plane orthogonal to diagonal (1,1,1)\n    mat3 T = triangle_matrix();\n    // step through voxels along plane orthogonal to main diagonal (1,1,1)\n    vec3 ray_pos = T * vec3(ray_pos_orig.xy, 0);\n    vec3 ray_dir = T * vec3(ray_dir_orig.xy, 0);\n#endif\n    // initialization from https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4 implementing https://lodev.org/cgtutor/raycasting.html\n    ivec3 tile = ivec3(floor(ray_pos));\n    // decompose ray direction into reciprocal absolute ray direction and sign (-1,+1)\n    vec3 delta_dist = 1.0 / abs(ray_dir); // reciprocal absolute ray direction\n    ivec3 ray_step = ivec3(sign(ray_dir)); // sign of ray direction\n    // initial distances to nearest walls by dimension:\n    //     calculate ray position in relation to tile origin\n    //     (requires adding one half because tile origin is floor of ray position)\n    //     adjust sign according to ray direction\n    //     because tile has size 1 and we start in the middle wall is located at 0.5 (sign depends on ray direction)\n    //     divide by ray direction (to get distance with respect to ray)\n    vec3 side_dist = (sign(ray_dir) * (vec3(tile) - ray_pos) + (sign(ray_dir) * 0.5) + 0.5) * delta_dist; // initial distances to nearest walls by dimension\n    bvec3 nearest = bvec3(0); // component is true if nearest wall in that dimension\n    for (int i = 0; i < MAX_RAY_STEPS; i++)\n    {\n        //bool even = abs(tile.x + tile.y + tile.z) == 2;\n        bool even = ((tile.x ^ tile.y ^ tile.z) & 1) == 0;\n        float flip = even?-1.0:+1.0;\n\n        float tmin = length(vec3(nearest) * (side_dist - delta_dist)); // calculate distance to intersection point assuming ray_dir normalized\n\n        // core from https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4 implementing https://lodev.org/cgtutor/raycasting.html\n        bvec3 nearest_next = lessThanEqual(side_dist.xyz, min(side_dist.yzx, side_dist.zxy)); // component is true if nearest wall in that dimension\n        vec3 side_dist_next = side_dist + vec3(nearest_next) * delta_dist; // update distances to nearest walls by dimension\n        ivec3 tile_next = tile + ivec3(vec3(nearest_next)) * ray_step; // step to next tile in direction of nearest wall\n        float tmax = length(vec3(nearest_next) * (side_dist_next - delta_dist)); // calculate distance to intersection point assuming ray_dir normalized\n\n        {\n            ivec3 tile_x = tile - (even ? ivec3(1,0,0) : ivec3(0,1,1));\n            ivec3 tile_y = tile - (even ? ivec3(0,1,0) : ivec3(1,0,1));\n            ivec3 tile_z = tile - (even ? ivec3(0,0,1) : ivec3(1,1,0));\n#ifdef ESSENTIAL_MATRIX\n            vec3 a = vec3(vec3(tile_x)*T,heightmap(vec3(tile_x)*T));\n            vec3 b = vec3(vec3(tile_y)*T,heightmap(vec3(tile_y)*T));\n            vec3 c = vec3(vec3(tile_z)*T,heightmap(vec3(tile_z)*T));\n#else\n            vec3 a = vec3(tile_x)*T + vec3(0,0,heightmap((vec3(tile_x)*T).xy)-sqrt(3.0));\n            vec3 b = vec3(tile_y)*T + vec3(0,0,heightmap((vec3(tile_y)*T).xy)-sqrt(3.0));\n            vec3 c = vec3(tile_z)*T + vec3(0,0,heightmap((vec3(tile_z)*T).xy)-sqrt(3.0));\n#endif\n            vec3 n = triangle_normal(a,b,c);\n            vec3 m = triangle_center(a,b,c);\n\n            float ground_dist = plane_intersection(m, n, ray_pos_orig, ray_dir_orig);\n\n            if(ground_dist >= max(0.0, tmin) && ground_dist <= tmax)\n            {\n#ifdef ESSENTIAL_MATRIX\n                vec3 local =\n                    (\n                        flip\n                        *\n                        T\n                        *\n                        (\n                            ray_pos_orig.xy\n                            +\n                            ray_dir_orig.xy * ground_dist\n                            -\n                            vec3(tile)*T\n                        )\n                        +\n                        1.0/3.0\n                    );\n#else\n                mat3 Z = mat3(1,0,0,0,1,0,0,0,0);\n/*\n                vec3 local =\n                    (\n                        T*Z*(flip*(ray_pos_orig + ray_dir_orig * ground_dist - vec3(tile)*T))\n                        +\n                        1.0/3.0\n                    );\n*/\n                mat3 M = mat3(+2,-1,-1,-1,+2,-1,-1,-1,+2)/3.0; // M=T*transpose(T) where last vector of T zeroed out - could T be calculated by factoring M?\n                vec3 local = // NOTE: if last column of T zeroed then Z can be omitted here\n                    (\n                        flip\n                        *\n                        (\n                            T*Z*ray_pos_orig\n                            +\n                            T*Z*ray_dir_orig * ground_dist\n                            -\n                            M*(vec3(tile))\n                        )\n                        +\n                        1.0/3.0\n                    );\n#endif\n                if(even) local = 1.0 - local;\n                vec2 coords = vec2(local.y-local.x, local.z) + vec2(tile.y-tile.x, tile.z); // Calculate texture-coordinates from tile and local coordinates (trivial alternative below)\n                //vec2 coords = sqrt(2.0)*vec2(-1.0,1.0/sqrt(3.0))*(ray_pos_orig + ray_dir_orig * ground_dist).xy; // D'oh - complicated texture coordinate computation above can be replaced by this simple line!\n\n                vec3 lifted_ground_pos = ray_pos + ground_dist * ray_dir;\n                //vec3 actual_ground_pos = ray_pos_orig + ground_dist * ray_dir_orig;\n                vec3 vertex_id = hash33(lifted_ground_pos-fract(lifted_ground_pos-0.5)); // subdivides plane into hexagons and triangles\n\n                //vec3 color = local; // debug barycentric coordinates\n                //vec3 color = texture(iChannel0, fract(coords/5.0)).xyz; // simple lookup has artifacts at triangle boundaries\n                vec3 color = improved_texture_lookup(ray_pos_orig, ray_dir_orig, mat2x3(T[0], T[1]), m, n, coords); // thanks to pyblob, joins triangles more smoothly\n                //vec3 color = vec3(0.55,0.30,0.15)+0.1*(hash33((ray_pos_orig + ground_dist * ray_dir_orig)*123.0)*2.0-1.0);\n                //vec3 color = fract(vec3(coords/10.0, 0.0)); // debug texture coordinates\n\n                //color = hash33(vec3(tile)); // debug tile index\n                //color = vertex_id; // debug vertex index\n\n                content = combine(content, result(n, ground_dist, color)); // hit plane\n            }\n\n            if(tmin > 0.0) // XXX workaround because first step at 0 instead of at prism wall XXX\n            {\n                vec3 actual_prism_pos = ray_pos_orig + tmin * ray_dir_orig; // no need to tilt: distance matric normalized, so distance can be used with original origin and direction\n#ifdef GROW\n                float h = tanh(iTime/60.0)*2.0;\n#else\n                float h = 2.0;\n#endif\n                float d = dot(n, actual_prism_pos - m - vec3(0,0,h)); // orthogonal distance from prism wall to offset ground plane\n                if(d < 0.0)\n                {\n                    vec3 v =\n                        distance(actual_prism_pos.xy, a.xy) < distance(actual_prism_pos.xy, b.xy) && distance(actual_prism_pos, a) < distance(actual_prism_pos.xy, c.xy)\n                        ?\n                        a\n                        :\n                        distance(actual_prism_pos.xy, b.xy) < distance(actual_prism_pos.xy, c.xy)\n                        ?\n                        b\n                        :\n                        c;\n\n                    vec3 lifted_prism_pos = ray_pos + tmin * ray_dir;\n                    vec3 vertex_id = hash33(lifted_prism_pos-fract(lifted_prism_pos-0.5)); // subdivides plane into hexagons and triangles\n\n                    //float x = fract(nearest.x ? lifted_prism_pos.y : nearest.y ? lifted_prism_pos.z : lifted_prism_pos.x);\n                    //float x = fract(dot(lifted_prism_pos.yzx,vec3(nearest)))-0.5; // center of edge: looks flat\n                    float x = fract(0.5+dot(lifted_prism_pos.yzx,vec3(nearest)))-0.5; // at vertex: 3d look by exploiting overlap\n                    x /= d;\n                    float y = 1.0+d/dot(n, vec3(0,0,h)); // local height above surface, (x,y) sheared\n                    //float y = actual_prism_pos.z - v.z; // local height relative to nearest vertex: (x,y) discontinuous XXX glitches! why ?! XXX\n                    //vec3 color = vec3(0,1,0);\n                    //vec3 color = vec3(0,y,1.0-y);\n                    //vec3 color = vec3(x,1.0-x,0);\n                    float s = mix(0.2,0.5,hash13(vertex_id));\n                    float flower = ortho_circle_flower_sdf(vec2(x,y)/s-vec2(0,1.0-0.2/*start slightly below surface*/))*s;\n                    flower /= s*s*2.0; // tweak: make leafs of smaller plants QUADRATICALLY thinner\n                    if(flower < 0.025)\n                    {\n                        //vec3 color = hash33(vec3(tile));\n                        //vec3 color = hash33(vec3(tile))*vec3(0.5,1,0.1);\n                        vec3 color = vertex_id*vec3(0.5,1,0.1);\n                        //vec3 color = mix(vec3(0.25,1,0.1),vec3(0.75,1,0.1),hash33(vec3(tile)));\n                        vec3 n = normalize(vec3((vec3(nearest) * T).xy, 0));\n                        content = combine(content, result(n, tmin, color)); // hit plane\n                    }\n\n\n                }\n            }\n#ifdef PEBBLES\n            {\n                vec3 center = m;\n                center.z -= 0.1;\n                float r = hash13(m*123.0);\n                //if(r < 0.1) // sparse pebbles\n                if(m.z < 1.0) // pebbles rolled down so limited to some height\n                {\n                    //r /= 0.1; // sparse pebbles\n#if 0\n                    float radius = mix(0.1, 0.5, r);\n                    vec2 dist = sphere(ray_pos_orig, ray_dir_orig, center, radius);\n                    //vec2 dist = ellipse(ray_pos_orig - center, ray_dir_orig, vec3(1,1,0.5) * radius); XXX glitches ?! XXX\n                    if(dist.x < DIST_MAX)\n                    {\n                        vec3 pos = ray_pos_orig + dist.x * ray_dir_orig;\n                        vec3 n = normalize(pos - center);\n                        content = combine(content, result(n, dist.x, vec3(r*r)));\n                    }\n#else\n                    float radius = mix(0.1, 0.4, r);\n                    mat3 R = random_rotation(hash33(m*123.0));\n                    vec4 collision = box(R*(ray_pos_orig - center), R*ray_dir_orig, vec3(radius));\n                    if(collision.w < DIST_MAX)\n                    {\n                        content = combine(content, result(collision.xyz*R, collision.w, vec3(r*r)));\n                    }\n#endif\n                }\n            }\n#endif\n#ifdef RAIN\n            {\n                vec3 R = hash33(m*123.0);\n                float r = R.x;\n                if(R.y < fade_in_rain())\n                {\n                    float t = fract(iTime/1.0+r);\n                    vec3 center = m;\n                    center.z += (1.0 - t) * 10.0; // rain height\n                    float radius = 0.001*(0.5-0.5*cos(t*tau));\n                    //vec2 dist = sphere(ray_pos_orig, ray_dir_orig, center, radius);\n                    vec2 dist = ellipse(ray_pos_orig - center, ray_dir_orig, radius*vec3(1,1,100));\n                    if(dist.x < DIST_MAX)\n                    {\n                        vec3 pos = ray_pos_orig + dist.x * ray_dir_orig;\n                        vec3 n = normalize(pos - center);\n                        content = combine(content, result(n, dist.x, vec3(1)));\n                    }\n                }\n            }\n#endif\n        }\n\n        if(content.dist < tmax)\n            return content;\n\n        // update state\n        nearest = nearest_next;\n        tile = tile_next;\n        side_dist = side_dist_next;\n    }\n\n    return content;\n}\n\nfloat trochoids_approx(float A, float t) // https://www.shadertoy.com/view/ltjXDG inverse trochoids approximation (jt)\n{\n    return -A + 2.0 * A * pow(1.0 - pow(0.5 + 0.5 * sin(t), A + 1.0), 1.0/(A + 1.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 I )\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    I = (I + I - R) / R.y; // concise pixel-position mapping thanks to Fabrice\n    float yaw = tau * float(iMouse.x) / float(R.x);\n    float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : tau * fract(iTime * 0.01) - pi * 0.4; // offset to tweak for preview at 10s\n    //pitch = !demo ? pitch : 1.25 * pi/2.0; // circle flight demo\n    pitch = !demo ? pitch : (1.0+0.25*exp(-iTime/20.0)) * pi/2.0; // hover camera demo\n\n    vec3 ray_pos = vec3(0.0, 0.0, -10.0 * (1.0+exp(-iTime/10.0)));\n    vec3 ray_dir = vec3(I.x, I.y, 2.0);\n    ray_dir = normalize(ray_dir);\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ray_pos = M * ray_pos;\n    ray_dir = M * ray_dir;\n    ray_pos.z = max(ray_pos.z, heightmap(ray_pos.xy)+2.0); // hover camera above terrain\n\n    result res = triangle_trace(ray_pos, ray_dir);\n    vec3 color = res.color;\n#ifdef WATER\n    float water_level = 1.0;\n    //if(-(ray_pos.z-water_level)/(ray_dir.z) < res.dist) color = vec3(0.0,0.1,1); // simple water\n    float water_dist = -(ray_pos.z-water_level)/(ray_dir.z);\n    if(water_dist > 0.0 && water_dist < res.dist)\n    {\n        vec3 dst = ray_pos + ray_dir * water_dist;\n#ifdef ESSENTIAL_MATRIX\n        mat2x3 T = triangle_matrix();\n        vec3 center = vec3(fract(T * dst.xy - 0.5) * T, 0);\n#else\n        mat3 T = triangle_matrix();\n        vec3 center = fract(T * vec3(dst.xy, 0) - 0.5) * T;\n#endif\n        float d = length(center.xy) * 2.0;\n#ifdef RAIN\n        // approximate ripples with cosine - less realistic but looks better\n        vec3 water_normal = normalize(vec3(fade_in_rain() * normalize(center.xy) * cos(tau*(d*5.0-iTime))*0.2*exp(-d),1));\n        // approximate ripples with trochoids - more realistic but looks worse\n        //vec3 water_normal = normalize(vec3(fade_in_rain() * normalize(center.xy) * (-trochoids_approx(exp(-d*2.0), tau*(d*5.0-iTime)))*0.2*exp(-d),1));\n#else\n        vec3 water_normal = vec3(0,0,1);\n#endif\n        ray_dir = reflect(ray_dir, water_normal); // reflect direction\n        ray_pos = dst - ray_dir * water_dist; // reflect position\n        res = triangle_trace(dst, ray_dir); // continue reflected ray from water surface\n        res.dist += water_dist; // add distance from viewer to surface\n        color = mix(0.125*color, res.color, 1.0-pow(abs(ray_dir.z),2.0)); // TODO: apply light under water\n        //color = 0.25*res.color;//*(1.0-abs(ray_dir.z));\n    }\n#endif\n    if(res.dist < DIST_MAX)\n    {\n        res.normal *= dot(res.normal, ray_dir) < 0.0 ? +1.0 : -1.0; // repair front-back\n\n        // point-light\n        {\n            vec3 dst = ray_pos + ray_dir * res.dist;\n            //vec3 light_pos = vec3(5,-5,5);\n            vec3 light_pos = vec3(0,0,5);\n            //vec3 light_pos = vec3(10.0*vec2(cos(iTime/5.0),sin(iTime/5.0)),5);\n            vec3 light_diff = light_pos - dst;\n            float light_dist = length(light_diff);\n            vec3 light_dir = light_diff / light_dist;\n#ifdef USE_SHADOWS\n            //bool shadow = triangle_trace(dst+res.normal*0.001, light_dir).dist < DIST_MAX;\n            bool shadow = triangle_trace(dst+light_dir*light_dist, -light_dir).dist < light_dist - .001; // suggested by pyblob to avoid artifacts (missing shadows)\n#else\n            bool shadow = false;\n#endif\n            float brightness = shadow ? 0.0 : max(0.0, dot(res.normal, light_dir)) / (light_dist * light_dist);\n            vec3 light_color = vec3(1) * 50.0;\n            vec3 diffuse = light_color * brightness;\n            //vec3 diffuse = shadow ? vec3(0) : light_color * abs(dot(res.normal, light_dir)) / (light_dist * light_dist); // translucent\n            float ambient = 0.01;\n\n            //color *= (0.5 + 0.5 * result.xyz); // visualize normals\n            color *= (diffuse + ambient); // apply light\n            //color = vec3(fract(result.w));\n#ifdef RAIN\n            if(brightness > 0.0)\n            {\n                float specular = pow(max(0.0, dot(res.normal, normalize(-ray_dir + light_dir))), 250.0);\n                color += specular * fade_in_rain();\n            }\n#endif\n            color = mix(skycolor(ray_dir), color, exp(-pow(distance(ray_pos.xy,dst.xy)/25.0, 2.0))); // distance fog (but not vertically)\n        }\n    }\n    color = tanh(color); // roll-off / soft-clamp overly bright colors\n    color = sqrt(color); // approximate gamma\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"l3cczB","date":"1735262839","viewed":154,"name":"rainy day in the raytraced swamp","username":"jt","description":"Using triangular (prism) grid to efficiently render some clumpy grass\n[url=https://www.shadertoy.com/view/clGBzm]orthogonal circles flower sdf 2[/url]\non a terrain ray-traced via cube-grid dda (lift->3d, dda, project->2d).\nWait for plants to grow.","likes":17,"published":1,"flags":0,"usePreview":1,"tags":["3d","raytracing","grid","terrain","raycasting","triangle","voxel","prism","heightmap","dda","translucent","textured","triangular","polygonal"],"hasliked":0,"parentid":"XXtcR4","parentname":"raytraced grass triangle terrain"}}