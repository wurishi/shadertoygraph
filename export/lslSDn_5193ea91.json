{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"float sinZeroOne(float what) {\n  return (1.0 + sin(what)) / 2.0;\n}\n\nfloat sinZeroOne() {\n  return (1.0 + sin(iTime*4.0)) / 2.0;\n}\n\n\nvec4 generateXORTexture(vec2 coords, float size, float dash, float tolerance) {\n\tvec4 color = vec4(0.0);\n\t\n\tif (abs(mod(coords.x, size)) <= tolerance || abs(mod(coords.y, size)) <= tolerance) {\n\t\tif (mod(coords.x, dash*2.0) <= dash ^^ mod(coords.y, dash*2.0) <= dash) {\n\t\t    color = vec4(0.0, 0.0, 1.0, 1.0);\t\n\t\t} else {\n\t\t\tcolor = vec4(1.0, 1.0, 1.0, 1.0);\t\n\t\t}\n\t} else {\n\t\tif (mod(coords.x, size*2.0) <= size ^^ mod(coords.y, size*2.0) <= size) {\n\t\t\tcolor = vec4(sinZeroOne(), sinZeroOne(coords.x), sinZeroOne(coords.y), 1.0);\t\n\t\t} else {\n\t\t    color = vec4(sinZeroOne(coords.y), sinZeroOne(), sinZeroOne(coords.x), 1.0);\t\t\n\t\t}\t  \n\t}\n\treturn color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat size = 30.0;\n\tfloat dash = 1.0;\n\tfloat tolerance = 1.0;\n\tvec2 center = vec2(iResolution.x / 2.0, iResolution.y / 2.0);\n\tvec2 coords = fragCoord.xy - center;\t\n\t\n\tfloat fi = iTime*1.0;\n\t\n    coords *= mat2(\n\t  cos(fi), -sin(fi),\n\t  sin(fi), cos(fi)\n\t);\n\t\n\tcoords /= vec2(1.0 + sinZeroOne()*2.0);\n\t\n\tfloat blur = (1.0 + sin(iTime*sinZeroOne()*0.02)) / 2.0;\n\tblur *= 0.1 * distance(fragCoord.xy, center);\n\t\n\tvec2 K = vec2(\n\t\tdistance(fragCoord.xy, center),\n\t\tdistance(fragCoord.xy, center)\n\t);\n\t\t\n\tK *= vec2(0.05, 0.05);\n\tsize -= length(K);\n\t\t\t\t   \n\tvec4 colorUP    = generateXORTexture( coords+vec2( 0.0,  -blur), size, dash, tolerance);\n\tvec4 colorDOWN  = generateXORTexture( coords+vec2( 0.0,   blur), size, dash, tolerance);\n\tvec4 colorLEFT  = generateXORTexture( coords+vec2(-blur,  0.0), size, dash, tolerance);\n\tvec4 colorRIGHT = generateXORTexture( coords+vec2( blur,  0.0), size, dash, tolerance);\n\n\tvec4 colorDUL = generateXORTexture( coords+vec2(-blur, -blur), size, dash, tolerance);\n\tvec4 colorDUR = generateXORTexture( coords+vec2( blur,  blur), size, dash, tolerance);\n\tvec4 colorDBL = generateXORTexture( coords+vec2(-blur,  blur), size, dash, tolerance);\n\tvec4 colorDBR = generateXORTexture( coords+vec2( blur,  blur), size, dash, tolerance);\n\n\tvec4 color = colorUP+colorDOWN+colorLEFT+colorRIGHT +  colorDUL + colorDUR + colorDBL + colorDBR;\n\tcolor = color / vec4(8.0);\n\t\t\n\tcolor -= mix(\n\t\tvec4(0.0),\n\t\tvec4(1.0),\n\t\tsmoothstep(0.0, min(iResolution.x, iResolution.y), distance( fragCoord.xy, center)));\n\t\t\n\n\tfragColor = color;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lslSDn","date":"1399465088","viewed":161,"name":"xored psycho","username":"LukasPukenis","description":"xored psycho","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["xor"],"hasliked":0,"parentid":"","parentname":""}}