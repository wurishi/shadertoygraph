{"ver":"0.1","info":{"id":"sdj3D1","date":"1625180968","viewed":76,"name":"gol_classic23","username":"edwardbraed","description":"Classic realization \"game of life\" (evolutionary algorithm)\nClick - for add 'life'\nClick (with pressing 'D-key') - for delete 'life'\nPress 'R-key' - for clear all field\nPress 'F-key' - for randomize field\nPress 'space' - for play/stop game","likes":1,"published":1,"flags":48,"usePreview":0,"tags":["gameoflife","cellularautomata"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 chp = round(uv * FIELD_SIZE);\n    float ch = mod(chp.x + chp.y, 2.0) * 0.15;\n    \n    // Output to screen\n    fragColor = vec4(mix(vec3(ch), COLOR, sign(texture(iChannel0, uv).x)), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define FIELD_SIZE vec2(192, 128)\n#define COLOR vec3(0.0, 0.3, 1.0)","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define cmpv(a, b, s) (b.x > (a.x - s.x) && b.x < (a.x + s.x) && b.y > (a.y - s.y) && b.y < (a.y + s.y))\n#define brnd2(v) round(fract(sin(dot(v, vec2(12.9898, iTime))) * 43758.5453) * 0.59)\n\nfloat cntLifes(vec2 uv, vec2 s) // count lifes around cell\n{\n    float cnt = 0.0;\n    cnt += texture(iChannel0, uv + s * vec2(-1.0, -1.0)).x;\n    cnt += texture(iChannel0, uv + s * vec2( 0.0, -1.0)).x;\n    cnt += texture(iChannel0, uv + s * vec2( 1.0, -1.0)).x;\n    cnt += texture(iChannel0, uv + s * vec2(-1.0,  0.0)).x;\n    cnt += texture(iChannel0, uv + s * vec2( 1.0,  0.0)).x;\n    cnt += texture(iChannel0, uv + s * vec2(-1.0,  1.0)).x;\n    cnt += texture(iChannel0, uv + s * vec2( 0.0,  1.0)).x;\n    cnt += texture(iChannel0, uv + s * vec2( 1.0,  1.0)).x;\n    return cnt;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 fs = FIELD_SIZE;\n    vec2 fc = 1.0 / fs;             // field coof\n    vec2 hfc = fc * 0.5;            // half field coof\n    vec2 rp = round(uv / fc) * fc;  // field position (round)\n    \n    vec4  state = texture(iChannel0, uv);\n    float res   = state.x; // cell state (0.0 - dead, 1.0 - life)\n    float ply   = state.y; // playing state\n    float ltm   = state.z; // last time (for input delay)\n    \n    float sbtn = texelFetch(iChannel1, ivec2(32, 0), 0).x; // space-key\n    float dbtn = texelFetch(iChannel1, ivec2(68, 0), 0).x; // D-key\n    float rbtn = texelFetch(iChannel1, ivec2(82, 0), 0).x; // R-key\n    float fbtn = texelFetch(iChannel1, ivec2(70, 0), 0).x; // F-key\n    \n    if(sbtn > 0.1 && (ltm + 0.3) < iTime)\n    {\n        ply = abs(ply - sbtn);\n        ltm = iTime;\n    }\n    \n    if(ply > 0.0)\n    {\n        // - processing rules ----------------------\n        // Birth 3 / Survival 2-3\n        \n        int lcnt = int(round(cntLifes(rp, fc)));\n        \n        if(res > 0.0)\n            res = float(lcnt == 2 || lcnt == 3);\n        else\n            res = float(lcnt == 3);\n    }\n    else\n    {\n        // - edit mode -----------------------------\n        \n        vec2 m = iMouse.xy / iResolution.xy;\n        vec2 mp = round(m / fc) * fc;\n\n        if(iMouse.z > 0.0 && cmpv(rp, mp, hfc))\n            res = 1.0 - dbtn;\n            \n        res = mix(res, 0.0, rbtn);\n        res = mix(res, brnd2(round(uv * FIELD_SIZE)), float(fbtn > 0.0));\n    }\n    \n    // Output to screen\n    fragColor = vec4(res, ply, ltm, 0.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}