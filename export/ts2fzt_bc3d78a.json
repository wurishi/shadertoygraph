{"ver":"0.1","info":{"id":"ts2fzt","date":"1590640709","viewed":96,"name":"Vicsek Snowflake","username":"blepfo","description":"Another KIFS loop","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["kifs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI (3.14)\n#define ITERATIONS (5)\n\nfloat cubeSdf(vec2 p, vec2 halves) {\n    vec2 edgeDist = abs(p) - halves;\n    return length(max(edgeDist, 0.)) \n        + min(max(edgeDist.x, edgeDist.y), 0.);\n}\n\nvec2 fold(vec2 uv, float theta) {\n\tvec2 normal = vec2(sin(-theta), cos(-theta));\n    // proj(uv, n) = dot(uv, n) / dot(n, n)\n    // n has norm 1\n    float d = dot(uv, normal);\n    return uv - (2. * max(d, 0.) * normal);\n}\n\nvec2 vicsekSnowflake(vec2 uv, float time) {\n    // Period 0 -- fold angle from (PI / 4) -> (PI / 6)\n    // angle denominator increment ranges 0->2 from 0->1\n    // Period 1 -- Translate 1 from 0.5 to 1.5\n    time = mod(time, 4.);\n    float denominatorIncrement = \n        // Transition from 0 to 1\n        ((1. - step(1., time)) * fract(time) * 2.)\n        // After 1 stay at 2, but stay back down after 3\n        + ((step(1., time) * 2.) * (1. - step(3., time)))\n        // After 2 decrease from 2 back to 0\n        - ((step(2., time) * fract(time) * 2.) * (1. - step(3., time)));\n    \t\n    \n    float translateIncrement = \n        // Transition from 1 to 2\n        ((1. - step(2., time)) * step(1., time) * fract(time))\n    \t// After 2 stay at 1\n        + step(2., time)\n    \t// After 3 decrease to 0\n    \t- (step(3., time) * fract(time));\n    \n    \n    for (int i = 0; i < ITERATIONS; i++) {\n        uv *= 3.;\n        uv = abs(uv);\n    \tuv = fold(uv, PI / (4. + denominatorIncrement));\n    \tuv.x -= 0.5 + translateIncrement;\n    \tuv.x = abs(uv.x);\n    \tuv.x -= 0.5;\n    }\n    return uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n\t\n    uv = vicsekSnowflake(uv, iTime* 0.8);\n    \n    float s = cubeSdf(uv, vec2(0.5));\n    float pixelSize = (1. * pow(3., float(ITERATIONS))) / iResolution.x;\n    float c = smoothstep(-pixelSize, pixelSize, s);\n    \n    vec3 color = vec3(uv.x, uv.y, 0.);\n    color = vec3(0.105,0.154,0.300);\n    color = mix(color, vec3(0.81,0.93,1.), 1.-c);\n\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}