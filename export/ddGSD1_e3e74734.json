{"ver":"0.1","info":{"id":"ddGSD1","date":"1681027779","viewed":67,"name":"Hash Function for GPU Rendering","username":"IBets","description":"https://www.reedbeta.com/blog/hash-functions-for-gpu-rendering/","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise","random","hash"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct CRNG \n{\n    uint Seed;\n};\n\nuint Hash(uint seed) \n{\n    uint state = seed * 747796405u + 2891336453u;\n    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;\n    return (word >> 22u) ^ word;\n}\n\nfloat Rand(inout CRNG rng)\n{\n    rng.Seed = Hash(rng.Seed);\n    return uintBitsToFloat(0x3f800000u | (rng.Seed >> 9u)) - 1.0;\n}\n\nCRNG InitCRNG(uvec2 id, uint frameIndex) \n{\n    CRNG rng;\n    rng.Seed = frameIndex + Hash((id.x << 16) | id.y);\n    return rng;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    CRNG rng = InitCRNG(uvec2(fragCoord), uint(iFrame));\n    fragColor = vec4(Rand(rng), Rand(rng), Rand(rng), 1.0);\n}","name":"Image","description":"","type":"image"}]}