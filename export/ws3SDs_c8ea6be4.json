{"ver":"0.1","info":{"id":"ws3SDs","date":"1573132236","viewed":171,"name":"Montreal","username":"antoineMoPa","description":"Here is a shader I made this summer while in Montreal. Now I'm away from Montreal and it snows through all Quebec.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["2d","city"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define time iTime\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-0.5)/iResolution.xy;\n    float x = uv.x;\n    float y = uv.y;\n    \n    // Screen adaptation from shadergif to shadertoy\n    float ratio = iResolution.y / iResolution.x;\n\tvec2 p = uv - 0.5;\n    p *= 0.8;\n    p.x -= 0.03; // Tweak city positioon\n    p.x /= ratio;\n    \n\tvec4 col = vec4(0.0);\n\n    #define _c(x) clamp(x,0.0,1.0)\n    #define _s(x,f) (floor(x*f)/f)\n    float h = 0.0;\n    \n    float reflection = 0.0;\n    \n    vec2 real_p = p;\n    // reflection hack\n    if(p.y < -0.26){\n        reflection += 1.0;\n        p.y = -p.y - 0.5;\n        p.x += 0.002 * cos(pow(p.y-0.4,1.0) * 40.0 + time * 6.2832);\n    }\n    \n    // Mountain\n    float m = 0.05 * cos(p.x * 5.0 + 3.2) + 0.2;\n    m += 0.0006 * cos(p.x * 200.0);\n    m += 0.01 * cos(p.x * 24.0 + 2.4);\n    m = 1.0 - _c((p.y + m)/0.004);\n    col.rgba = vec4(0.2,0.3,0.3,1.0) * m + col.rgba * (1.0-m);\n    \n    // 1000 gauchetiere\n    float i = 0.17;\n    float g = _c((p.x-i)/0.004);\n    g *= 1.0-_c((p.x-i-0.024)/0.004);\n    g *= 1.0-_c((p.y+0.13 + (abs(p.x-i-0.014)))/0.004);\n    g = _c(g);\n    \n    // Place Ville-Marie\n    float v = _c(p.x - 0.3)/0.003;\n    v *= _c(1.0-(p.y + 0.135)/0.003);\n    v *= 1.0-_c(p.x - 0.34)/0.003;\n    \n    m = _c(v+m+g);\n    \n    h = 0.01 * _s(cos(p.x*3.0+2.3), 4.0);\n    h += (h + 0.3) * 0.1 * _s(cos(p.x*10.0-0.1), 2.0);\n    h += h * 0.3 * _s(cos(p.x*22.0+1.0), 2.0);\n    h += h * 0.2 * _s(cos(p.x*24.0+2.1), 2.0);\n    float sky = _c((p.y + 0.2 + h)/0.01);\n    vec4 _sky = sky * vec4(0.4 - p.y * 0.4,0.2 - p.y * 0.4,0.2+p.y * 0.2,1.0);\n    col = _sky * (1.0 - m);\n    \n    \n    \n    float city = _c(1.0 - sky + v + g);\n    float windows = city;\n    \n    windows *= _c((cos(p.x * 1000.0 + h * 1e4 + cos(h * 40.0)*1e3) - 0.4));\n    windows *= _c((cos(p.y * (500.0+cos(h*30.0)*1100.0)+h*1e2) - 0.1));\n    windows *= 0.7 + 0.8 *cos(p.x * 10.0 + h * 100.0 + m * 2.0+ v * 2.0 + (p.y * 400.0 * v + g) + 0.3 * cos(time * 6.2832 + p.x * 10.0));\n    windows *= 1.0 + 0.3 * cos(time * 6.2832 + p.x * 3e3);\n    windows *= 1.0 + 0.3 * cos(time * 6.2832 + p.y * 3e6+ h * 10.0);\n    windows *= (p.y + 0.24)/0.02;\n    \n    col.rg += vec2(0.8,0.4) * windows;\n    \n    // Left part city\n    float glow = 1.2 * _c(1.0 - pow(2.0 * length(p - vec2(-0.3,-0.4)), 0.4));\n    // right part city\n    glow += 1.2 *_c(1.0 - pow(2.0 * length(p - vec2(0.2,-0.4)), 0.4));\n    // sun\n    glow += _c(1.0 - pow(1.1 * length(p - vec2(-0.5,-0.5)), 0.4));\n    \n    col.rg += vec2(0.6,0.4) * sky * glow;\n    \n    // Place ville-marie beacon\n    vec2 bp = p;\n    bp += vec2(-0.32,0.13);\n    vec2 polar = vec2(atan(bp.y,bp.x), length(bp));\n    polar.x += time * 8.0- 1.0;\n    bp = polar.y * vec2(cos(polar.x), sin(polar.x));\n    \n    float b = 1.0-abs(bp.x) / 0.01;\n    b *= _c(1.0 - abs(bp.x) / 0.01);\n    b *= 1.0 - _c(bp.y / 0.3);\n    b *= _c(bp.y / 0.005);\n    b = _c(b);\n    b *= _c(1.0-cos(time * 14.0 + 2.9));\n    b = (time > 0.3)? 0.0:b;\n    col.rgb += b * 0.09;\n    \n    // Autoroute bonaventure\n    float a = 0.0;\n    a = 1.0-(abs(p.y+0.24+cos(p.x * 4.0+1.0)*0.01))/0.005;\n    a *= _c((-p.x+0.2)/0.1);\n    a = _c(a);\n    // red lights\n    col.r += pow(a,1.9) * _c(cos(p.x * 200.0 + time * 6.2832) * cos(p.x * 30.0) * cos(p.x * 3.0)) * 2.9;\n    // white lights\n    col.rgb += a * _c(cos(p.x * 400.0 - time * 6.2832) * cos(p.x * 30.0) * cos(p.x * 3.0)) * 0.8;\n    \n    // Tweak reflection color\n    col -= reflection * 0.04;\n    col.g += reflection * 0.1;\n    col.b += reflection * 0.1;\n    col += reflection * 0.01 * cos(0.2 * cos(p.x*30.0) + p.y * 400.0 + time * 6.2832);\n    \n    col = _c(col);\n    \n    col += 0.025; // Instagram \"fade\"\n    col = pow(0.7 * col, vec4(1.3)); // Contrast tweak\n    col *= 1.0 - pow(1.6 * length(real_p), 2.0); // instagram vignette\n    col.rgb += vec3(-0.1,0.0,0.00);\n\tcol.a = 1.0;\n    col.b *= 1.1;\n    col = _c(col);\n\n    \n\n    // Output to screen\n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}