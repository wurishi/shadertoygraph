{"ver":"0.1","info":{"id":"msfGD7","date":"1666215511","viewed":96,"name":"Emperors Cloak","username":"horrowind","description":" Based on \"Symmetry and chaos\" by Michael Field, Martin Golubitsky","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["chaos","symmetry"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 mul(vec2 a, vec2 b) {\n    return vec2(a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x); \n}\n\nfloat len_sq(vec2 a) {\n    return sqrt(a.x*a.x + a.y*a.y);\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    vec2 param = iMouse.xy / iResolution.xy - vec2(0.5, 0.5);\n\n    float l = -1.806, a = 1.806, b = 0.0, c = 1.0, o = 0.0; int s = 5;\n    \n    l += 0.5*param.x + 0.2*cos(0.07*iTime) - 0.2;\n    c -= 0.5*param.x + 0.2*cos(0.07*iTime) - 0.2;\n    b += param.y + 0.7*cos(0.13*iTime);\n    o += 0.4*cos(0.11*iTime);\n    \n    float scale = 2.6;\n    vec2 uv = 2.0*scale*fragCoord/iResolution.xy - scale;\n    uv.y *= iResolution.y / iResolution.x;\n\n    \n    \n    float m = 1.0;\n    \n    vec2 jitter[5];\n    jitter[0] = vec2( .000,  .000);\n    jitter[1] = vec2( .000,  .001);\n    jitter[2] = vec2( .001,  .000);\n    jitter[3] = vec2( .000, -.001);\n    jitter[4] = vec2(-.001,  .000);\n    \n    for (int r = 0; r < 5; r++) {\n        vec2 z = uv + jitter[r];\n        for(int j = 0; j < (1<<5); j++) {\n            vec2 p = z;\n\n            for(int k = 1; k < s - 1; k++) {\n                p = mul(p, z);\n            }\n            vec2 q = vec2(p.x, -p.y);\n            p = mul(p, z);\n\n            z = (l + a*len_sq(z) + b*p.x)*z + o*vec2(-z.y, z.x) + c*q;\n            if (j > 9) {\n                m = min(m, len_sq(z - uv));\n            }\n        }   \n    }\n    float value = pow(max(0.0, 1.0 - m * 0.2), 7.0);\n    vec3 col = 0.5 + 0.5*cos(4.0*m + iTime+uv.xyx+vec3(0,2,4));\n    col *= value;\n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}