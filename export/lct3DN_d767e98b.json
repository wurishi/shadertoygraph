{"ver":"0.1","info":{"id":"lct3DN","date":"1715284777","viewed":60,"name":"AK FYP17: 2D Neon Particles","username":"AKHC","description":" A particle system created to test the use of array data structures within the fragment shader for more complex particle system uses later on, and using the GLSL functions to change the appearance of colour blending. Use mouse to drag system around.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["particle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SEED 0.12345679\n#define DIE_TIME 0.9\n#define SIZE 0.124\n#define PI 3.14159265359\n\nfloat smin( float a, float b, float k )\n{\n    k *= 4.0;\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min( a, b ) - h*h*k*(1.0/4.0);\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nvec3 palette1( in float t)\n{\n    vec3 a = vec3(0.756, 0.054, 0.590);\n    vec3 b = vec3(0.787, 0.227, 0.048);\n    vec3 c = vec3(1.195, 0.263, 0.702);\n    vec3 d = vec3(2.939, 0.116, 3.415);\n    \n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat rand (vec2 p) {\n    return fract(sin(dot(p.xy,\n                         vec2(6.8245,7.1248)))*\n        9.1283);\n}\n\nstruct Part\n{\n    float spawnedTime;\n    vec2 anchor;\n    vec2 velocity;\n};\n\nPart particles[50];\n\nfloat processParticle(Part pData, vec2 uv, float creationTime)\n{\n    float particleTime = max(0., iTime - creationTime); //is 0 until reaching index time\n    \n    float size = SIZE * max(0., DIE_TIME - particleTime);\n    \n    //velocity basically is 0 and starts increasing constantly after a certain time\n    vec2 velocityOffset = pData.velocity * particleTime; \n    \n    vec2 point = pData.anchor + velocityOffset;\n    \n    float dist = distance(uv, point);\n    float hit = smoothstep(size, 0., dist);\n    \n    return hit;\n}\n\nvec3 currentColorTEST() {\n  float c = iTime * 0.2;\n  float r = sin(c * PI) / 2. + .5;\n  float g = sin((c + .6) * PI) / 2. + .5;\n  float b = sin((c + 1.2) * PI) / 2. + .5;\n  return vec3(r, g, b);\n}\n\n\n\n\n\n//distance to scene function\nfloat map(vec3 p)\n{\n\n    vec3 q = p; //input point copy\n    \n    float sphere = sdSphere(p, 0.6);\n\n    return sphere;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord.xy/iResolution.xx;\n\n    //vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    //vec2 m = (iMouse.xy * 2. - iResolution.xy) / iResolution.y;\n\n    vec3 col = vec3(0.);\n    \n    vec2 mousePos = vec2(iMouse.x / iResolution.x, iMouse.y / iResolution.x);\n    \n    //process particles\n    for (float i = 0.; i < 50.; i++)\n    {\n        float seed = SEED + floor(i / 50. + iTime);\n        vec2 newVelocity = vec2(mix(-.5, .5, rand(vec2(seed, i))), mix(-.05, 1., rand(vec2(i, seed) / 3.)));\n        float creationTime = iTime - fract(i / 50. + iTime);\n        \n        highp int index = int(i);\n        particles[index].spawnedTime = iTime;\n        particles[index].anchor += mousePos;\n        particles[index].velocity += newVelocity;\n    \n        col += processParticle(particles[index], uv, creationTime) * palette1(iTime);\n    }\n    \n    \n\n\n    //RAYMARCH\n    \n\n    //define ray origin at z -3 in world \n    vec3 ro = vec3(0, 0, -3);\n    //field of view\n    float fov = 0.5;\n    //ray direction\n    vec3 rd = normalize(vec3(uv * fov, 1));\n    float t = 0.;\n\n    //Raymarching\n    //current position along ray\n    for(int i = 0; i < 200; i++)\n    {\n    \n    \n    \n    \n    \n        vec3 p = ro + rd * t;   //marches ray: ray origin + the direction\n        float d = map(p);   //get distance to closest point from p\n        t += d; //assigns distance travelled to total distance\n        \n        if(d < 0.001f) break;   //stop if ray gets too close to object\n        if(t > 1000.) break; //stop if ray goes too far\n\n    }\n\n    //col += vec3(t * .2);\n    col = smoothstep(.9, .9, col); //gets rid of soft edges\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}