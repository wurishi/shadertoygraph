{"ver":"0.1","info":{"id":"3dXBRr","date":"1588866480","viewed":117,"name":"CIS461: Noise and UV Mapping","username":"raykim1996","description":"Noise and UV Mapping practice","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["cis461"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float FOVY = 3.14159 * 0.25;\nconst int RAY_STEPS = 256;\nconst float PI = 3.14159;\nconst float TWO_PI = 3.14159 * 2.0;\nconst vec3 matteWhite = vec3(0.85, 0.81, 0.78);\nconst vec3 matteRed = vec3(0.63, 0.065, 0.05);\nconst vec3 matteGreen = vec3(0.14, 0.45, 0.091);\nvec3 center = vec3(-5.0, 2.0, -1.0);\nconst vec3 lightPos = vec3(-1.0, 6.5, -15);\n\n\n//Intersection\nstruct Intersection\n{\n    float t;\n    vec3 color;\n    vec3 p;\n    int object; // unique ID for every object\n};    \n\n// Box with side lengths b\nfloat cube(vec3 p, vec3 b)\n{\n  return length(max(abs(p) - b, 0.0));\n}\n\n// SquarePlane SDF\nfloat plane(vec3 p, vec4 n)\n{\n    n = normalize(n);\n    return dot(p, n.xyz) + n.w;\n}\n\n// Sphere with radius r at center c\nfloat sphere(vec3 p, float r, vec3 c)\n{\n    return distance(p, c) - r;\n}\n\nvec3 palette(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d)\n{\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\n//Worley===============================================\n// noise basis function\nvec2 noiseBasis(vec2 p) {\n    return fract(sin(vec2(dot(p,vec2(127.1, 161.979)),\n                          dot(p, vec2(469.73, 837.43))))\n                 *28347.4939);\n}\n\n// worleyNoise function\nfloat worleyNoise(vec2 uv) {\n    uv *= 0.1; //Now the space is 10x10 instead of 1x1. Change this to any number you want.\n    vec2 uvInt = floor(uv);\n    vec2 uvFract = fract(uv);\n    float minDist = 1.0; //Minimum distance initialized to max.\n    for(int y = -1; y <= 1; ++y) {\n        for(int x = -1; x <= 1; ++x) {\n            vec2 neighbor = vec2(float(x), float(y)); //Direction in which neighbor cell lies\n            vec2 point = noiseBasis(uvInt + neighbor); //Get the Voronoi centerpoint for the neighboring cell\n            \n            point = 0.5 + 0.5 * sin(iTime + 6.2831 * point); // 0 to 1 range\n\n            vec2 diff = neighbor + point - uvFract; //Distance between fragment coord and neighborâ€™s Voronoi point\n            float dist = length(diff);\n            minDist = min(minDist, dist);\n        }\n    }\n    return minDist;\n}\n\n//FBM===============================================\n//sphere 2d mapper\nvec2 sphereMapper(vec3 p)\n{\n    float phi = atan(p.z, p.x);\n    if (phi < 0.0) {\n        phi += TWO_PI;\n    }\n    float theta = acos(p.y);\n    \n    float u = 1.0 - (phi / TWO_PI);\n    float v = 1.0 - (theta / PI);\n\n    return (vec2(u, v) + 0.1 * iTime) / 0.1; // 0 to 1 range\n}\n\n//noise basis function\nfloat noiseFBM2D(vec2 n)\n{\n    return (fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453));\n}\n\n//interpNoise2D\nfloat interpNoise2D(float x, float y)\n{\n    float intX = floor(x);\n    float fractX = fract(x);\n    float intY = floor(y);\n    float fractY = fract(y);\n\n    float v1 = noiseFBM2D(vec2(intX, intY));\n    float v2 = noiseFBM2D(vec2(intX + 1.0, intY));\n    float v3 = noiseFBM2D(vec2(intX, intY + 1.0));\n    float v4 = noiseFBM2D(vec2(intX + 1.0, intY + 1.0));\n\n    float i1 = mix(v1, v2, fractX);\n    float i2 = mix(v3, v4, fractX);\n    return mix(i1, i2, fractY);\n}\n\n//fbm function\nfloat fbm(float x, float y)\n{\n    float total = 0.0;\n    float persistence = 0.5;\n    float octaves = 4.0;\n\n    for(float i = 1.0; i <= octaves; i++) {\n        float freq = pow(2.0, i);\n        float amp = pow(persistence, i);\n\n        total += interpNoise2D(x * freq, y * freq) * amp;\n    }\n    return total;\n}\n\n//Perlin===============================================\nvec3 random3(vec3 p) {\n    return fract(sin(vec3(dot(p,vec3(127.1, 315.6, 382.919)),\n                          dot(p,vec3(739.5, 283.3, 732.14)),\n                          dot(p, vec3(838.69, 283.2,109.21))))\n                 *74738.3207);\n}\n\nfloat surflet(vec3 p, vec3 gridPoint) {\n    // Compute the distance between p and the grid point along each axis, and warp it with a\n    // quintic function so we can smooth our cells\n    vec3 t2 = abs(p - gridPoint);\n    vec3 t = vec3(1.0) - 6.0 * pow(t2, vec3(5.0)) + 15.0 * pow(t2, vec3(4.0)) - 10.0 * pow(t2, vec3(3.0));\n    // Get the random vector for the grid point (assume we wrote a function random2\n    // that returns a vec2 in the range [0, 1])\n    vec3 gradient = random3(gridPoint) * 2. - vec3(1., 1., 1.);\n    // Get the vector from the grid point to P\n    vec3 diff = p - gridPoint;\n    // Get the value of our height field by dotting grid->P with our gradient\n    float height = dot(diff, gradient);\n    // Scale our height field (i.e. reduce it) by our polynomial falloff function\n    return height * t.x * t.y * t.z;\n}\n\nfloat perlinNoise3D(vec3 p) {\n    float surfletSum = 0.0;\n    // Iterate over the four integer corners surrounding uv\n    p = (p + (iTime + 721.22913)) * 0.5; // 0 to 1 range\n    for(int dx = 0; dx <= 1; ++dx) {\n        for(int dy = 0; dy <= 1; ++dy) {\n            for(int dz = 0; dz <= 1; ++dz) {\n                surfletSum += surflet(p, floor(p) + vec3(dx, dy, dz));\n            }\n        }\n    }\n    return surfletSum;\n}\n\n\n#define BACK_WALL 0\n#define LEFT_WALL 1\n#define RIGHT_WALL 2\n#define FLOOR 3\n#define SPHERE1 4\n#define SHORT_CUBE 5\n#define BIG_CUBE 6\n#define BACK_WALL_SDF plane(pos, vec4(0.0, 0.0, -1.0, 10.0))\n#define LEFT_WALL_SDF plane(pos, vec4(1.0, 0.0, 0.0, 5.0))\n#define RIGHT_WALL_SDF plane(pos, vec4(-1.0, 0.0, 0.0, 5.0))\n#define CEILING_SDF plane(pos, vec4(0.0, -1.0, 0.0, 7.5))\n#define FLOOR_SDF plane(pos, vec4(0.0, 1.0, 0.0, 4.0))\n#define SPHERE1_SDF sphere(rotateY(pos, 15.0 * 3.14159 / 180.0), 3.5, vec3(-5.0, 2.0, -1.0))\n#define SHORT_CUBE_SDF cube(rotateY(pos + vec3(-2, 1.5, -0.75), -17.5 * 3.14159 / 180.0), vec3(2.2, 3, 2.2))\n\nvec3 rotateY(vec3 p, float a)\n{\n    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);   \n}\n\n// function to create whole scene\nvoid sceneMap3D(vec3 pos, out float t, out int obj)\n{\n    t = BACK_WALL_SDF;\n    obj = BACK_WALL;\n    \n    float t2;\n    if ((t2 = FLOOR_SDF) < t) {\n        t = t2;\n        obj = FLOOR;\n    }\n    if ((t2 = SPHERE1_SDF) < t) {\n        t = t2;\n        obj = SPHERE1;\n    }\n    if ((t2 = SHORT_CUBE_SDF) < t) {\n        t = t2;\n        obj = SHORT_CUBE;\n    }\n}\n\nfloat sceneMap3D(vec3 pos)\n{\n    float t = BACK_WALL_SDF;\n    \n    float t2;\n    if ((t2 = FLOOR_SDF) < t) {\n        t = t2;\n    }\n    if ((t2 = SPHERE1_SDF) < t) {\n        t = t2;\n    }\n    if ((t2 = SHORT_CUBE_SDF) < t) {\n        t = t2;\n    }\n    return t;\n}\n\nvoid march(vec3 origin, vec3 dir, out float t, out int hitObj)\n{\n    t = 0.001;\n    for (int i = 0; i < RAY_STEPS; ++i) {\n        vec3 pos = origin + t * dir;\n        float m;\n        sceneMap3D(pos, m, hitObj);\n        if (m < 0.001) {\n            return;\n        }\n        t += m;\n    }\n    t = -1.0;\n    hitObj = -1;\n}\n\nvec3 computeMaterial(int hitObj, vec3 p, vec3 n, vec3 lightVec, vec3 view)\n{\n    float lambert = dot(lightVec, n);\n    switch(hitObj) {\n        case BACK_WALL:\n        return lambert * palette(worleyNoise(p.xy), vec3(0.8,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,0.7,0.4),vec3(0.0,0.15,0.20));\n        break;\n        case FLOOR:\n        return lambert * palette(worleyNoise(p.xz), vec3(0.8,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,0.7,0.4),vec3(0.0,0.15,0.20));\n        break;\n        case SPHERE1:\n        return lambert * palette(fbm(sphereMapper(normalize(p-center)).x, sphereMapper(normalize(p-center)).y), vec3(0.1,0.5,0.5), vec3(0.5), vec3(1.0), vec3(0.00, 0.10, 0.20));\n        break;\n        case SHORT_CUBE:\n        return lambert * palette(perlinNoise3D(p), vec3(0.5,0.8,0.8),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.3,0.20,0.20));\n        break;\n        case -1:\n        return vec3(0, 0, 0) * lambert;\n        break;\n    }\n    return vec3(0, 0, 0) * lambert;\n}\n\nvec3 computeNormal(vec3 pos)\n{\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize(vec3(sceneMap3D(pos + epsilon.yxx) - sceneMap3D(pos - epsilon.yxx),\n                         sceneMap3D(pos + epsilon.xyx) - sceneMap3D(pos - epsilon.xyx),\n                         sceneMap3D(pos + epsilon.xxy) - sceneMap3D(pos - epsilon.xxy)));\n}\n\nIntersection sdf3D(vec3 dir, vec3 eye)\n{\n    float t;\n    int hitObj;\n    march(eye, dir, t, hitObj);\n    \n    vec3 isect = eye + (t * dir);\n    \n    vec3 nor = computeNormal(isect);\n    vec3 lightDir = normalize(lightPos - isect);\n    vec3 surfaceColor = computeMaterial(hitObj, isect, nor, lightDir, normalize(eye - isect));\n    \n    return Intersection(t, surfaceColor, isect, hitObj);\n}\n\n// Returns direction of ray\nvec3 rayCast(vec3 eye, vec3 ref, vec2 ndc)\n{\n    vec3 F = ref - eye;\n    vec3 R = normalize(cross(vec3(0, 1, 0), F));\n    vec3 U = normalize(cross(R, -F));\n    \n    vec3 V = U * length(F) * tan(FOVY * 0.5);\n    vec3 H = R * length(F) * tan(FOVY * 0.5) * float(iResolution.x) / iResolution.y;\n    \n    vec3 p = ref + ndc.x * H + ndc.y * V;\n    \n    return normalize(p - eye);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // Convert range to [-1, 1]\n    uv = uv * 2.0 - vec2(1.0, 1.0);\n    \n    vec3 eye = vec3(7, 5.5, -16);\n    vec3 ref = vec3(-2, 1.5, 0);\n    \n    vec3 rayDir = rayCast(eye, ref, uv);\n    \n    Intersection isect = sdf3D(rayDir, eye);\n    \n    fragColor = vec4(isect.color, 1.0);\n}","name":"Image","description":"","type":"image"}]}