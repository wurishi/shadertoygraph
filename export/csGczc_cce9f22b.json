{"ver":"0.1","info":{"id":"csGczc","date":"1696369452","viewed":212,"name":"Screen Space Volumetric lighting","username":"winlandiano","description":"Old school screen space volumetric lighting (crepuscular rays) presented in GPU Gem3 Chap. 13 by Kenny Mitchell, simply multi-sampling towards light's screen space.\n\nThanks @KilledByAPixel for the neat city model!","likes":21,"published":1,"flags":32,"usePreview":0,"tags":["shadow","volumetric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Screen Space Volumetric Lighting as Post Pross, by Ridge/winlandiano\n// Originally presented in GPU Gem3 Chap. 13, by Kenny Mitchell.\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define NUM_SAMPLES 100\n#define DENSITY 2.\n#define WEIGHT 0.1\n#define DECAY 0.92\n#define EXPOSURE 0.4\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 col = texture(iChannel0, uv);\n    \n    vec2 mouse = iMouse.xy/iResolution.xy;\n    \n    vec2 lightPos = vec2(0.5, 0.5);\n    bool mousePressed = iMouse.z > 0.;\n    if(mousePressed)\n        lightPos = iMouse.xy / iResolution.xy;\n        \n    vec2 sampleStep = (uv - lightPos);\n    sampleStep *= DENSITY / float(NUM_SAMPLES);\n    \n    float illuminationDecay = 1.;\n\n    for (int i = 0; i < NUM_SAMPLES; i++)\n    {\n        uv -= sampleStep;\n        vec4 sampleCol = texture(iChannel0, uv);\n        \n        // sampleCol *= illuminationDecay * WEIGHT;\n        // col += sampleCol;\n        \n        float brightness = (sampleCol.x + sampleCol.y + sampleCol.z) / 3.;\n        brightness *= illuminationDecay * WEIGHT;\n        col += vec4(brightness);\n        \n        illuminationDecay *= DECAY;\n    }\n    \n    fragColor = vec4(col.xyz * EXPOSURE, 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Credit: City in a Bottle by Frank Force\n// https://www.shadertoy.com/view/7dccRj\n\nvoid mainImage(out vec4 c, vec2 f)\n{\n  for (                         // loop\n    vec3 p                      // everything is a vec3\n    = vec3(f+f, 2)/iResolution, // ray direction\n    t = --p,                    // texture\n    a = vec3(30.*iTime, 17, 4), // position\n    s = a/a,                    // shading\n    w = 99.*s;                  // max Z\n    a.z < w.z;                  // loop until ray hits max Z\n    c.rgb = s*a.z/99.-t.y)      // set pixel color\n  {\n    ivec3 b = ivec3(a += p);    // advance ray, convert to int\n    b.y < (32<b.z && 27<b.x%99 ? b.x/9^b.z/8 : 0)*8%46 ? // collision test\n        s != (t = vec3((b&b.x&b.z)%3)/a.z, p /= p) ?     // set texture, cast to light\n        w = s : s = a.z/w : s;                           // stop : shading : unused\n  }\n}","name":"Buffer A","description":"","type":"buffer"}]}