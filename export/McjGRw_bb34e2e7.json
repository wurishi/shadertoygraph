{"ver":"0.1","info":{"id":"McjGRw","date":"1704950905","viewed":83,"name":"berp","username":"nrebei2","description":"barycentric interpolation","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["interpolation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 berp(vec2 a, vec2 b, vec2 c, vec2 x) {\n    vec2 ab = inverse(mat2(b-a, c-a)) * (x-a);\n    if ((ab.x + ab.y) > 1. || ab.x < 0. || ab.y < 0.) {\n        return vec3(0.);\n    }\n    return vec3(1.-ab.x-ab.y, ab.x, ab.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord - iResolution.xy)/(iResolution.x);\n    \n    vec2 a = vec2(-0.7, 0.3);\n    vec2 b = vec2(0.6, 0.5);\n    vec2 c = vec2(0.2, -0.5);\n    \n    float gamma = 1.5;\n\n    vec3 col = berp(a, b, c, uv);\n    col = pow(col, vec3(1./gamma));\n    //col = sqrt(col);\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}