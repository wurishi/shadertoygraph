{"ver":"0.1","info":{"id":"DsjcRh","date":"1687418384","viewed":105,"name":"broken koch curve","username":"MonterMan","description":"broken koch curve???","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["kifs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926\n\nvec2 fold(vec2 p, vec2 n)\n{\n    float proj = dot(p, n);\n    if (proj > 0.0)\n    {\n        return p - 2.0 * proj * n;\n    }\n    else\n    {\n        return p;\n    }\n}\n\nmat2 rotate2d(float theta)\n{\n    return mat2(cos(theta), -sin(theta), sin(theta), cos(theta));\n}\n\nfloat render(vec2 uv)\n{\n    float foldAngle = PI / 3.0;\n    \n    const int ITER_COUNT = 8;\n    for (int i = 0; i < ITER_COUNT; ++i)\n    {\n        // space folding\n        uv.x = abs(uv.x);\n        uv.x -= 0.5;\n        uv = fold(uv, vec2(-sin(foldAngle), cos(foldAngle)));\n        \n        uv *= rotate2d(sin(0.1*iTime)*float(i));\n        \n        uv.x -= 0.5;\n        uv *= 2.0;\n    }\n\n    // dist to line\n    uv.x -= min(1.0, uv.x);\n    float dist = length(uv - vec2(0, 0));\n    float thickness = 0.003 * pow(2.0, float(ITER_COUNT));\n    return 3.0 / dist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = 2.0 * uv - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    uv *= 2.0;\n    \n    vec3 col;\n    col.r = render(uv);\n    col.g = render(uv*1.03);\n    col.b = render(uv*1.06);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}