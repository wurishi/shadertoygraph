{"ver":"0.1","info":{"id":"4tGSRw","date":"1483470984","viewed":296,"name":"[WIP] 惡の華","username":"lara","description":"The flower from the manga \"Aku No Hana\".\n[url=http://plannueve.net/wp-content/uploads/2016/04/aku-no-hana-3877855-1-1140x860.jpg]Reference Image[/url]\n---\nI suck at shading :x","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["no","aku","hana"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define S 512   // Steps\n#define R 5.    // Sub steps\n#define P 0.001 // Precision\n#define D 100.   // Max distance\n#define A 5.    // AO steps\n\n#define T iTime\n#define PI 3.1415926\n#define TAU (PI*2.0)\n\nstruct Ray { vec3 o, d; }, _ray;\nstruct Camera { vec3 p, t; }, _cam;\nstruct Hit { vec3 p; float t, d; };\n\nvec2 _uv;\nfloat _d, _s;\nfloat _dfield;\nfloat _dgrass;\nfloat _dhead;\nfloat _dtentacles;\nfloat _deye;\nfloat _dstem;\nfloat _dsky;\n\n/* ============= */\n/* === UTILS === */\n/* ============= */\n\nfloat hash21(vec2 n)\n{\n    return fract(sin(dot(n,vec2(50159.91193,49681.51239)))*73943.1699);\n}\n\n// https://iquilezles.org/articles/smin\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nmat2 rot(float a)\n{\n    float c=cos(a),s=sin(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat sdLine(vec3 p,vec3 a,vec3 b,float r)\n{\n    return length(-clamp(dot(p-=a,b-=a)/dot(b,b),0.,1.)*b+p)-r;\n}\n\nfloat sdLineFlat(vec3 p,vec3 a,vec3 b,float r)\n{\n    return length(-clamp(dot(p-=a,b-=a)/dot(b,b),0.,1.)*b+p)-r;\n}\n\n/* ============= */\n/* === SCENE === */\n/* ============= */\n\nfloat sdTentacles(vec3 p)\n{\n    float s = 40.;\n    float r = length(p);\n    \n    float a1 = atan(p.y,p.x);\n    float a2 = atan(p.z,length(p.xy));\n    \n    float f1 = mod(a1+PI,TAU/s)/TAU*s-.5;\n    float f2 = mod(a2+PI,TAU/s)/TAU*s-.5;\n    \n    if (a2 < -.8) return 1e10;\n    \n    float i = (hash21(vec2(floor(a1+PI)/TAU*s,floor((a2+PI)/TAU*s)))-.5)*TAU;\n    \n    p = vec3(r,f1,f2)+vec3(0,cos(i+T),cos(i+T))*.1;\n    \n    p.yz *= rot(r*TAU);\n    \n    vec3 p1 = vec3(1,0,0);\n    vec3 p2 = vec3(1.4+(i/TAU+.5)*.2,cos(i)*.2,sin(i)*.2);\n    \n    return sdLine(p,p1,p2,mix(.2,.0,length(p)-.6));\n}\n\nfloat sdField(vec3 p)\n{\n    float f = 6.;\n    \n    f += sin(p.x*.01)*10. * sin(p.z*.1);\n    f += textureLod(iChannel0,p.xz*.01,0.).x*.2;\n    \n    return p.y + f;\n}\n\nfloat sdGrass(vec3 p)\n{\n    vec3 p1 = p;\n    vec3 p2 = p+vec3(0.5,0,0.5);\n    \n    p1.xz = mod(p1.xz,1.)-.5;\n    p2.xz = mod(p2.xz,1.)-.5;\n    \n    float i1 = (hash21(floor(p.xz)*.001)-.5)*TAU;\n    float i2 = (hash21(floor(p.xz+.5)*.001)-.5)*TAU;\n    \n    float f = sin(1./exp(length(p.xz*.01))*20.-2.8)*5.;\n    float h = sdField(p)+f;\n    \n    return min(\n\t\tsdLine(p1,vec3(0,-5.-h,0),vec3(cos(i1)*.2,-4.-h,sin(i2)*.2),.1-sin(p.y-6.5+h)*.08),\n        sdLine(p2,vec3(0,-5.-h,0),vec3(cos(i2)*.2,-4.-h,sin(i1)*.2),.1-sin(p.y-6.5+h)*.08)\n    );\n}\n\n\n\nfloat scene(vec3 p)\n{\n    _d = 1e10;\n    \n    vec3 q;\n    float d = 1e10;\n    \n    _dgrass = sdGrass(p);\n    _dfield = smin(sdField(p),_dgrass,1.);\n    \n    _dsky = abs(length(p)-90.)-P;\n\n    // head\n    d = length(p)-1.;\n    d = max(d,-max(length(p.xy)-.5+abs(p.y)*max(sin(T),0.),p.z));\n    // eye lids\n    _dhead = d;\n    \n    // tentacles\n    q = p;\n    d = sdTentacles(q);\n    //q.xy *= rot(PI/8.);\n    //q.yz *= rot(-0.2);\n    //q.z -= .1;\n    //d = min(d,sdTentacles(q));\n    _dtentacles = smin(d,_dhead,.6);\n    \n    // eye\n    _deye = length(p+vec3(0,0,.2))-.8;\n    \n    // stem\n    q = p;\n    q.xy *= rot(sin(p.y*2.)*.05);\n    q.yz *= rot(sin(p.y*2.)*.02);\n    _dstem = max(length(q.xz)-.1,p.y);\n    \n    _d = min(_d,_dhead);\n    _d = min(_d,_dtentacles);\n    _d = min(_d,_deye);\n    _d = min(_d,_dstem);\n    _d = min(_d,_dfield);\n    _d = min(_d,_dgrass);\n    _d = min(_d,_dsky);\n    \n    //_d = min(_d,length(p.xy)-.1);\n    \n    return _d;\n}\n\n/* ================ */\n/* === MARCHING === */\n/* ================ */\n\nvec3 getNormal(vec3 p)\n{\n\tvec2 e = vec2(P,0);\n    \n\treturn normalize(vec3(\n\t\tscene(p+e.xyy)-scene(p-e.xyy),\n\t\tscene(p+e.yxy)-scene(p-e.yxy),\n\t\tscene(p+e.yyx)-scene(p-e.yyx)\n\t));\n}\n\nHit march(Ray r)\n{\n    float t = 0.0, d;\n    \n    for(int i = 0; i < S; i++)\n    {\n        d = scene(r.o+r.d*t);\n        t += d/R;\n        \n        if (d < P || t > D) { _s = float(i); break; }\n    }\n    \n    return Hit(r.o+r.d*t, t, d);\n}\n\nRay lookAt(Camera cam, vec2 uv)\n{\n    vec3 d = normalize(cam.t-cam.p);\n    vec3 r = normalize(cross(d, vec3(0,1,0)));\n    vec3 u = cross(r, d);\n\n    return Ray(cam.p,normalize(r*uv.x + u*uv.y + d));\n}\n\n/* =============== */\n/* === SHADING === */\n/* =============== */\n\nfloat getAmbientOcclusion(Hit h) \n{    \n    float t = 0., a = 0.;\n    \n    for(float i = 0.; i < A; i++)\n    {\n        float d = scene(h.p-_ray.d*i/A*.1);\n        t += d;\n    }\n\n    return clamp(t/A*20.,0.,1.);\n}\n\nvec3 getColor(Hit h)\n{\n    if (h.d > P) { return vec3(0); }\n    \n    vec3 l = vec3(5,10,5);\n    vec3 c = vec3(0);\n    vec3 n = getNormal(h.p);\n\n    float diff = max(dot(n, normalize(l-h.p)),0.);\n    float spec = max(dot(reflect(normalize(h.p-l),n),normalize(_cam.p-h.p)),0.);\n    float ao = getAmbientOcclusion(h);\n    \n    if (_d == _dhead)\n    {\n        c += diff-hash21(h.p.xz)*.3;\n    }\n    else if (_d == _deye)\n    {\n        float f = 1.;\n        float l = length(h.p.xy);\n        float a = atan(h.p.y,h.p.x);\n        \n        // pupile\n        f *= 1.-step(l,.15+.05*max(sin(T),0.));\n        // iris\n        f *= 1.-step(l,.3)+(sin(a*37.+l)+1.)/4.*smoothstep(l,l+.1,.3);\n        c = vec3(f);\n    }\n    else if (_d == _dtentacles)\n    {\n        c = max(diff,.3)*vec3(length(h.p)-1.);\n       \n    }\n    else if (_d == _dgrass)\n    {\n        c = mix(vec3(0),vec3(0,.2,0)+spec*.5,1.-step(length(h.p.xz*.1),1.));\n    }\n    else if (_d == _dfield)\n    {\n        vec2 q = vec2(h.p.xz*.01);\n        //c = texture(iChannel1,q).r*vec3(.1,.4,.1);\n        //c += texture(iChannel1,q+vec2(.05)).b*vec3(.6,.2,0);\n        //c += .3;\n       \tc += ao*.3;\n    }\n    \n    \n    if (_d == _dsky)\n    {\n        vec3 p = h.p;\n        \n        p.yz *= rot(-T*.005);\n        \n        float s = 1000.;\n\n        float a1 = atan(p.z,p.x);\n        float a2 = atan(p.y,length(p.xz));\n\n        float f1 = (mod(a1+PI,TAU/s)/TAU*s-.5)*2.;\n        float f2 = (mod(a2+PI,TAU/s)/TAU*s-.5)*2.;\n        \n        vec2 q = vec2(floor((a1+PI)/TAU*s)/s,floor((a2+PI)/TAU*s)/s);\n        \n        float h1 = hash21(q);\n        float h2 = hash21(q+.1);\n        float f = step(h1,.01)*(1.-length(vec2(f1,f2)))*(1.+2.*step(h2,.1));\n        \n    \tfloat d = pow(length(h.p-_cam.p)/D,2.);\n    \ts = pow(max(dot(_ray.d,normalize(l)),0.),100.*d)*2.;\n        \n        f += s;\n        \n        c = vec3(f)-vec3(0,0,.2)*((a2+PI)/TAU-.7);\n    }\n    else\n    {\n        c *= 1./exp(length(h.p)/20.);\n    }\n   \n    // \"lense flare\"\n    return c + pow(max(dot(_ray.d,normalize(l)),0.),10.);\n}\n\n/* ============ */\n/* === MAIN === */\n/* ============ */\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    _uv = (2.0*fragCoord.xy-iResolution.xy)/iResolution.yy;\n    vec2 uvm = iMouse.xy/iResolution.xy;\n    \n    _cam = Camera(vec3(0,2,-3), vec3(1,0,0));\n\n    if (iMouse.x > 10. || iMouse.y > 10.)\n    {\n        _cam.p.yz *= rot(-(uvm.y-.4)*2.);\n        _cam.p.xz *= rot((uvm.x-.5)*2.*PI);\n    }\n    else\n    {\n        _cam.p.xz *= rot(-.5);\n        _cam.p.yz *= rot(.1-(sin(T*.2)+1.)/2.);\n    }\n    \n    _ray = lookAt(_cam,_uv);\n    \n    float f = 1.-length((2.0*fragCoord.xy-iResolution.xy)/iResolution.xy)*0.25;\n    \n    f += (hash21(_uv+iTime*.001)-.5)*.05;\n    \n    fragColor = vec4(getColor(march(_ray))*f, 1.0);\n}","name":"Image","description":"","type":"image"}]}