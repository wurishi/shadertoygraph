{"ver":"0.1","info":{"id":"mldXDr","date":"1685305128","viewed":28,"name":"Shifting and flowing","username":"shlick","description":"A circle based mandala-like recursive shader that fades from darks to brights, very WIP and not optimized whatsoever","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["mandala"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette( float t ) {\n    vec3 a = vec3(0.35, 0.40, 0.43);\n    vec3 b = vec3(0.53, 0.40, 0.33);\n    vec3 c = vec3(0.83, 0.35, 0.81);\n    vec3 d = vec3(0.45,0.32,0.65);\n\n    return a + b*sin(3.1415*3.1415*(c*t+d)/1.5 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / (iResolution.y);\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    \n    float shift = 3.1415/1.;\n    float bpm = 80.;\n    float delay = bpm/60.;\n    \n    for (float i = 0.0; i < 5.0; i++) {\n        uv = fract(uv * 2.) - 0.5;\n        float d = length(uv) * exp(-length(uv));\n\n        vec3 col = palette(length(uv0) + (i+1.)*2.5 + iTime*.25);\n\n        d = cos(d*18. + iTime + sin(iTime*0.5*3.1415*delay + shift)/1.0);\n        d = abs(d);\n\n        d = pow(0.2 / d, 2.0);\n        \n        d = ((d*d*sin(iTime*delay*(3.1415/1.) + shift)*0.25)+(d*sin(iTime*delay*(3.1415/2.) + shift)*5.)+(0.));\n\n        finalColor += (col * ((d))*2.)/48.;\n    }\n        \n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}