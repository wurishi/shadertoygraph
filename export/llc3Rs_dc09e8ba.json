{"ver":"0.1","info":{"id":"llc3Rs","date":"1470857043","viewed":206,"name":"fn voronoi texture","username":"KukaTails","description":"four different version of Fn function used by voronoi texture","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Hash(vec2 p)\n{\n    float h = dot(p, vec2(17.1, 311.7));\n    return -1.0 + 2.0 * fract(sin(h) * 4358.5453);\n}\n\n\nfloat Noise(vec2 p)\n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    \n    return mix(mix(Hash(i + vec2(0.0, 0.0)),\n                   Hash(i + vec2(1.0, 0.0)), u.x),\n               mix(Hash(i + vec2(0.0, 1.0)),\n                   Hash(i + vec2(1.0, 1.0)), u.x), u.y);\n \n}\n\n\nfloat Voronoi(vec2 x)\n{\n    ivec2 p = ivec2(floor(x));\n    vec2  f = fract(x);\n\n    float res = 8.0;\n    for(int j = -1; j <= 1; ++j)\n        for(int i = -1; i <= 1; ++i) {\n        ivec2 b = ivec2(i, j);\n        vec2  r = vec2(b) - f + 0.5 + 0.4 * sin(iTime + 6.2831 * Noise(vec2(p + b)));\n        float d = dot(r, r);\n        res = min(res, d);\n    }\n    return sqrt(res);\n}\n\nvec3 VoronoiFn(vec2 x)\n{\n    ivec2 p = ivec2(floor(x));\n    vec2 f = fract(x);\n    \n    float f1 = 18.0;\n    float f2 = 18.0;\n    float f3 = 18.0;\n    for (int j = -1; j <= 1; ++ j) {\n        for (int i = -1; i <= 1; ++ i) {\n            ivec2 b = ivec2(i, j);\n            vec2 r = vec2(b) + 0.5 + 0.4 * sin(iTime + 6.2831 * Hash(vec2(p + b))) - f;;\n            float d = dot(r, r);\n            \n            if (d < f1) {\n                f3 = f2;\n                f2 = f1;\n                f1 = d;\n            } else if (d < f2) {\n                f3 = f2;\n                f2 = d;\n            } else if (d < f3) {\n                f3 = d;\n            }\n        }\n    }\n    return vec3(f1, f2, f3);       \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    float val = 0.0;\n\n    vec3 f_vec = VoronoiFn(10.0 * uv);\n\n    if (uv.x < 0.0 && uv.y < 0.0) {\n        val = f_vec.x;\n    }\n    if (uv.x < 0.0 && uv.y > 0.0) {\n        val = f_vec.y;\n    }\n    if (uv.x > 0.0 && uv.y < 0.0) {\n        val = f_vec.z + f_vec.x - f_vec.y;\n    }\n    if (uv.x > 0.0 && uv.y > 0.0) {\n        val = f_vec.y - f_vec.x;\n    }\n    \n    fragColor = vec4(sin(val) * sin(val), sin(val), sin(val + 0.2) + 0.05, 1.0);    \n}","name":"Image","description":"","type":"image"}]}