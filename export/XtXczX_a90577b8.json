{"ver":"0.1","info":{"id":"XtXczX","date":"1528243223","viewed":363,"name":"Octree rendering attempt","username":"tylerbata","description":"attempt at octree ray casting using SDF and get voxel at multiple resolutions","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["octree"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int MAX_RAY_STEPS = 256;\nfloat scale = 2.0;\n\nfloat min3(vec3 v) {\n\treturn min(min(v.x, v.y), v.z);\n}\nfloat max3(vec3 v) {\n\treturn max(max(v.x, v.y), v.z);\n}\n\nvec2 rotate2d(vec2 v, float a) {\n\tfloat sinA = sin(a);\n\tfloat cosA = cos(a);\n\treturn vec2(v.x * cosA - v.y * sinA, v.y * cosA + v.x * sinA);\t\n}\n\nfloat sdSphere(vec3 p, float d) { return length(p) - d; } \n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) +\n         length(max(d,0.0));\n}\n\nfloat map(vec3 p) {\n    return min(max(-sdSphere(p, 7.5 * scale), sdBox(p, vec3(6.0) * scale)), -sdSphere(p, 25.0 * scale));\n    //return max(-sdSphere(p, 7.5), sdBox(p, vec3(6.0)));\n}\n\n\n\nfloat getVoxel(vec3 c) {\n\tvec3 p = floor(c) + vec3(0.5);\n\tfloat d = map(p);\n\treturn float(d < 0.0);\n}\n\n\n\n\n\n\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 screenPos = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n\tvec3 cameraDir = vec3(0.0, 0.0, 0.8);\n\tvec3 cameraPlaneU = vec3(1.0, 0.0, 0.0);\n\tvec3 cameraPlaneV = vec3(0.0, 1.0, 0.0) * iResolution.y / iResolution.x;\n\tvec3 rd = cameraDir + screenPos.x * cameraPlaneU + screenPos.y * cameraPlaneV;\n\tvec3 ro = vec3(0.0, 2.0 * sin(iTime), -12.0);\n\t\t\n\tro.xz = rotate2d(ro.xz, iTime*0.1);\n\trd.xz = rotate2d(rd.xz, iTime*0.1);\n\t\n\n    \n    \n    \n    /*\n\tvec3 offset = vec3(floor(ro));\n    vec3 ri = 1.0 / rd;\n    vec3 rs = sign(rd);\n    vec3 dd = abs(vec3(length(rd)) * ri);\n\tvec3 sd = (rs * (offset - ro) + (rs * 0.5) + 0.5) * dd; \n\tvec3 mask;\n\n    \n\tfor (int i = 0; i < MAX_RAY_STEPS; i++) {\n\t\tif (bool(getVoxel(offset))) break;\n\t\tmask = step(sd.xyz, sd.yzx) * step(sd.xyz, sd.zxy);\n\t\tsd += mask * dd;\n\t\toffset += mask * rs;\n\t}\n    */\n    \n    \n   \n    \n    scale = 1.0;\n    ro = ro * scale;\n    float lod = 0.0;\n    float LOD = 4.0;\n    \n    vec3 offset = vec3(floor(ro));\n    vec3 ri = 1.0 / rd;\n    vec3 rs = sign(rd);\n    vec3 exit = rs * 0.5 + 0.5;\n    vec3 dd = abs(ri);\n\tvec3 mask;\n    vec3 what;\n    \n    \n    vec3 col = rd;\n    \n    for (int i = 0; i < MAX_RAY_STEPS; i++) {\n        \n\t\tif (bool(getVoxel(offset))){\n        \tif(lod < LOD) {\n                \n                \n                \n                \n                \n                float tt = min3(what) * 2.0;\n                \n                \n            \tlod += 1.0;\n            \tro = ro * 2.0;\n                vec3 hh = ro + rd*tt;\n                scale = scale * 2.0;\n                \n            \toffset = floor(hh + rd*0.01);\n        \t} else {\n           \t\tbreak;\n        \t}\n        } else {\n\t\t\twhat = (rs * (offset - ro + 0.5) + 0.5) *dd;\n\t\t\tmask = step(what.xyz, what.yzx) * step(what.xyz, what.zxy);\n\t\t\toffset += mask * rs;\n        }\n        \n\t}\n    \n    float t = min3(what);\n    \n    vec3 hit = ro + rd * t;\n    if ( bool(getVoxel(offset)) )col = hit;\n    \n    \n    \n    \n    /*\n    vec3 col = rd;\n    \n    \n    scale = 32.0;\n    \n    ro = ro * scale;\n    \n\tvec3 offset = vec3(floor(ro));\n\tvec3 ri = 1.0 / rd;\n\tvec3 rs = sign(rd);\n\tvec3 exit = rs * 0.5 + 0.5;\n\tvec3 dd = abs(ri);\n\tvec3 mask;\n\n\tfor(int j = 0; j < 8; j++) {\n\t\tif ( bool(getVoxel(offset)) )break;\n\t\tscale /= 2.0;\n    \tro /= 2.0;\n    \toffset = floor(offset / 2.0);\n\t\n\t\n\t\n\t\tfor (int i = 0; i < MAX_RAY_STEPS; i++) {\n\t\t\tif (bool(getVoxel(offset))) break;\n\t\t\tmask = (rs * (offset - ro + 0.5) + 0.5) *dd;\n\t\t\tmask = step(mask.xyz, mask.yzx) * step(mask.xyz, mask.zxy);\n\t\t\toffset += mask * rs;\n\t\t}\n\t}\n\tif ( bool(getVoxel(offset)) )col = mask;\n    */\n\n    \n    \n    \n    \n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}