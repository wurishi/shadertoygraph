{"ver":"0.1","info":{"id":"stscWn","date":"1647852825","viewed":92,"name":"s0lar system","username":"natnatnat","description":"solar system","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["solarsystem"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14;\nconst float TAU = 2. * PI;\nconst float e = 2.71;\nconst float magnify = 2.;\n\n// sun\nconst float sunR = 0.04; // radius\nconst float sunH = 0.02; // halo radius\nconst vec4 sunC = vec4(1., 1., 0., 1.); // color\n\n// mercury\nconst float mercuryR = 0.006; // radius\nconst float mercuryH = 0.006; // halo radius\nconst vec4 mercuryC = vec4(.9, .56, .08, 1.); // color\nconst float mercuryA = 0.24; // aphelion \nconst float mercuryE = 0.2; // eccentricity\nconst float mercuryVelocity = 0.1; // velocity\n\n// venus\nconst float venusR = 0.006; // radius\nconst float venusH = 0.006; // halo radius\nconst vec4 venusC = vec4(.77, .25, .14, 1.); // color\nconst float venusA = 0.42; // aphelion \nconst float venusE = 0.007; // eccentricity\nconst float venusVelocity = 0.2; // velocity \n\n// earth\nconst float earthR = 0.01; // radius\nconst float earthH = 0.01; // halo radius\nconst vec4 earthC = vec4(0., 0., 1., 1.); // color\nconst float earthA = 0.66; // aphelion \nconst float earthE = 0.01671; // eccentricity\nconst float earthVelocity = 0.1; // velocity\n\n// moon\nconst float moonR = 0.005; // radius\nconst float moonH = 0.005; // halo radius\nconst vec4 moonC = vec4(.5, .5, .5, 1.); // color\nconst float moonA = 0.08; // aphelion \nconst float moonE = 0.0549; // eccentricity\nconst float moonVelocity = 0.5; // velocity \n\n// mars\nconst float marsR = 0.005; // radius\nconst float marsH = 0.005; // halo radius\nconst vec4 marsC = vec4(0.84, 0.27, 0.094, 1.); // color\nconst float marsA = 0.86; // aphelion \nconst float marsE = 0.0935; // eccentricity\nconst float marsVelocity = 0.05; // velocity \n\n// jupiter\nconst float jupiterR = 0.025; // radius\nconst float jupiterH = 0.004; // halo radius\nconst vec4 jupiterC = vec4(0.85, 0.73, 0.45, 1.); // color\nconst float jupiterA = 1.06; // aphelion \nconst float jupiterE = 0.0487; // eccentricity\nconst float jupiterVelocity = 0.03; // velocity\n\n// saturn\nconst float saturnR = 0.02; // radius\nconst float saturnH = 0.003; // halo radius\nconst vec4 saturnC = vec4(0.88, 0.6, 0.33, 1.); // color\nconst float saturnA = 1.2; // aphelion \nconst float saturnE = 0.0520; // eccentricity\nconst float saturnVelocity = 0.06; // velocity\n\n// uranus\nconst float uranusR = 0.008; // radius\nconst float uranusH = 0.001; // halo radius\nconst vec4 uranusC = vec4(0.055, 0.48, 0.75, 1.); // color\nconst float uranusA = 1.32; // aphelion \nconst float uranusE = 0.0520; // eccentricity\nconst float uranusVelocity = 0.045; // velocity\n\n// neptune\nconst float neptuneR = 0.008; // radius\nconst float neptuneH = 0.001; // halo radius\nconst vec4 neptuneC = vec4(0.14, 0.4, 0.49, 1.); // color\nconst float neptuneA = 1.44; // aphelion \nconst float neptuneE = 0.0520; // eccentricity\nconst float neptuneVelocity = 0.04; // velocity\n\nvec4 drawBody(float radius, float haloRadius, vec4 color, vec2 center, vec3 uv) {\n    float r = distance(uv.xy * vec2(1., 1./uv.z), center * vec2(1., 1./uv.z));\n    float v = min(exp((-r + radius * magnify)/(haloRadius/2.)), 1.);\n    return color * v;\n}\n\nvec2 getCurrentPosition(float aphelion, float eccentricity, vec2 uv, float velocity) {\n    float angle = mod(velocity * TAU, TAU);\n    float r = aphelion * (1. - eccentricity * eccentricity) / (1. + eccentricity * cos(angle));\n    return vec2(r * cos(angle), r * sin(angle));\n}\n\nvec4 drawOrbit(float aphelion, float eccentricity, vec2 uv) {\n    float r = length(uv);\n    float angle = atan(uv.y, uv.x);\n    float v = aphelion * (1. - eccentricity * eccentricity) / (1. + eccentricity * cos(angle));\n    return 0.05 * vec4(1. - smoothstep(0., 0.008, abs(r - v)));\n}\n\nvoid mainImage( out vec4 O, in vec2 u )\n{\n    vec2 uv0 = ( 2. * u - iResolution.xy ) / iResolution.y;\n    vec3 uv = vec3(uv0, 0.4 * abs(log(8000. * (1. + (u.y)/iResolution.y))));\n    uv.y *= uv.z;\n    O = vec4(0.);\n    vec4 sun = drawBody(sunR, sunH, sunC, vec2(0.), uv);\n    \n    vec2 earthPosition = getCurrentPosition(earthA, earthE, uv.xy, earthVelocity * iTime);\n    vec4 earth = drawBody(earthR, earthH, earthC, earthPosition, uv) + drawOrbit(earthA, earthE, uv.xy);\n    \n    vec2 moonPosition = getCurrentPosition(moonA, moonE, uv.xy - earthPosition, moonVelocity * iTime) + earthPosition;\n    vec4 moon = drawBody(moonR, moonH, moonC, moonPosition, uv) + drawOrbit(moonA, moonE, uv.xy - earthPosition);\n    \n    vec2 mercuryPosition = getCurrentPosition(mercuryA, mercuryE, uv.xy, mercuryVelocity * iTime);\n    vec4 mercury = drawBody(mercuryR, mercuryH, mercuryC, mercuryPosition, uv) + drawOrbit(mercuryA, mercuryE, uv.xy);\n    \n    vec2 venusPosition = getCurrentPosition(venusA, venusE, uv.xy, venusVelocity * iTime);\n    vec4 venus = drawBody(venusR, venusH, venusC, venusPosition, uv) + drawOrbit(venusA, venusE, uv.xy);\n    \n    vec2 marsPosition = getCurrentPosition(marsA, marsE, uv.xy, marsVelocity * iTime);\n    vec4 mars = drawBody(marsR, marsH, marsC, marsPosition, uv) + drawOrbit(marsA, marsE, uv.xy);\n    \n    vec2 jupiterPosition = getCurrentPosition(jupiterA, jupiterE, uv.xy, jupiterVelocity * iTime);\n    vec4 jupiter = drawBody(jupiterR, jupiterH, jupiterC, jupiterPosition, uv) + drawOrbit(jupiterA, jupiterE, uv.xy);\n    \n    vec2 saturnPosition = getCurrentPosition(saturnA, saturnE, uv.xy, saturnVelocity * iTime);\n    vec4 saturn = drawBody(saturnR, saturnH, saturnC, saturnPosition, uv) + drawOrbit(saturnA, saturnE, uv.xy);\n    \n    vec2 uranusPosition = getCurrentPosition(uranusA, uranusE, uv.xy, uranusVelocity * iTime);\n    vec4 uranus = drawBody(uranusR, uranusH, uranusC, uranusPosition, uv) + drawOrbit(uranusA, uranusE, uv.xy);\n    \n    vec2 neptunePosition = getCurrentPosition(neptuneA, neptuneE, uv.xy, neptuneVelocity * iTime);\n    vec4 neptune = drawBody(neptuneR, neptuneH, neptuneC, neptunePosition, uv) + drawOrbit(neptuneA, neptuneE, uv.xy);\n    \n    O += sun + earth + moon + mercury + venus + mars + jupiter + saturn + uranus + neptune;\n}","name":"Image","description":"","type":"image"}]}