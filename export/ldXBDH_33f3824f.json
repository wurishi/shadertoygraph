{"ver":"0.1","info":{"id":"ldXBDH","date":"1495928165","viewed":135,"name":"Collatz Fractal, Sort of","username":"DonKarlssonSan","description":"Collatz","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","collatz"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Complex Number math by julesb\n// https://github.com/julesb/glsl-util\n\n#define PI 3.14159265\n\n#define cx_mul(a, b) vec2(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x)\n#define cx_div(a, b) vec2(((a.x*b.x+a.y*b.y)/(b.x*b.x+b.y*b.y)),((a.y*b.x-a.x*b.y)/(b.x*b.x+b.y*b.y)))\n#define cx_modulus(a) length(a)\n#define cx_conj(a) vec2(a.x,-a.y)\n#define cx_arg(a) atan2(a.y,a.x)\n#define cx_sin(a) vec2(sin(a.x) * cosh(a.y), cos(a.x) * sinh(a.y))\n#define cx_cos(a) vec2(cos(a.x) * cosh(a.y), -sin(a.x) * sinh(a.y))\n\nvec2 cx_sqrt(vec2 a) {\n    float r = length(a);\n    float rpart = sqrt(0.5*(r+a.x));\n    float ipart = sqrt(0.5*(r-a.x));\n    if (a.y < 0.0) ipart = -ipart;\n    return vec2(rpart,ipart);\n}\n\nvec2 cx_tan(vec2 a) {return cx_div(cx_sin(a), cx_cos(a)); }\n\nvec2 cx_log(vec2 a) {\n    float rpart = length(a);\n    float ipart = atan(a.y, a.x);\n    if (ipart > PI) ipart=ipart-(2.0*PI);\n    return vec2(log(rpart),ipart);\n}\n\nvec2 cx_mobius(vec2 a) {\n    vec2 c1 = a - vec2(1.0,0.0);\n    vec2 c2 = a + vec2(1.0,0.0);\n    return cx_div(c1, c2);\n}\n\nvec2 cx_z_plus_one_over_z(vec2 a) {\n    return a + cx_div(vec2(1.0,0.0), a);\n}\n\nvec2 cx_z_squared_plus_c(vec2 z, vec2 c) {\n    return cx_mul(z, z) + c;\n}\n\nvec2 cx_sin_of_one_over_z(vec2 z) {\n    return cx_sin(cx_div(vec2(1.0,0.0), z));\n}\n\n\n////////////////////////////////////////////////////////////\n// end Complex Number math by julesb\n////////////////////////////////////////////////////////////\n\n\n// From Stackoveflow\n// http://stackoverflow.com/questions/15095909/from-rgb-to-hsv-in-opengl-glsl\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n// https://github.com/msfeldstein/glsl-map/blob/master/index.glsl\nfloat map(float value, float inMin, float inMax, float outMin, float outMax) {\n    return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);\n}\n\n// My own additions to complex number math\n#define cx_sub(a, b) vec2(a.x - b.x, a.y - b.y)\n#define cx_add(a, b) vec2(a.x + b.x, a.y + b.y)\n#define cx_abs(a) length(a)\nvec2 cx_to_polar(vec2 a) {\n    float phi = atan(a.y / a.x);\n    float r = length(a);\n    return vec2(r, phi); \n}\n\nvec3 cx_exp(vec2 z) { \n    return vec3(exp(z.x), vec2(cos(z.y), sin(z.y)));\n}\n\nvec2 cx_exp_jk(vec2 z) { \n    return exp(z.x) * vec2(vec2(cos(z.y), sin(z.y)));\n}\n    \n// Complex power\n// Let z = r(cos θ + i sin θ)\n// Then z^n = r^n (cos nθ + i sin nθ)\nvec2 cx_pow(vec2 a, float n) {\n    float angle = atan(a.y, a.x);\n    float r = length(a);\n    float real = pow(r, n) * cos(n*angle);\n    float im = pow(r, n) * sin(n*angle);\n    return vec2(real, im);\n}\n   \nvec2 f(vec2 z) {\n\treturn (7.0 * z + 2.0 - cx_mul(cx_cos(PI * z), (5.0 * z + 2.0))) / 4.0;\n}\n   \n// Collatz and Self Similarity by Inigo Quilez\n// https://www.youtube.com/watch?v=GJDz4kQqTV4\nvec2 f3(vec2 z) {\n    vec2 a = 7.0 * z + 2.0;\n   \n    //vec3 e = cx_exp(PI * z);\n\t//vec2 b = e.x * cx_mul(e.yz, (5.0 * z + 2.0));\n    \n    vec2 e = cx_exp_jk(PI * z);\n\tvec2 b = cx_mul(e, (5.0 * z + 2.0));\n    \n    return (a - b) / 4.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.xy;\n    float zoom = (sin(iTime / 2.0) * 0.5 + 0.5001) * 100.0;\n    zoom *= zoom;\n    vec2 z = vec2(-uv.y, uv.x) * 1.0 / zoom;\n\tint iteration = 0;\n    const int max_iteration = 100;\n    float xtemp;\n    // while loops not supported on iPhone!!\n    for(int i = 0; i < max_iteration; i++) {\n        z = f3(z);\n        iteration = i;\n        if(length(z) > 1000000.0) break;\n    }\n    float h = float(iteration)/float(max_iteration);\n    vec3 hsv = vec3(h*2.0, 1.0, 1.0);\n    vec3 rgb = hsv2rgb(hsv);\n    fragColor = vec4(rgb, 1.0);\n}","name":"Image","description":"","type":"image"}]}