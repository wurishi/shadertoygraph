{"ver":"0.1","info":{"id":"Mfc3DX","date":"1712212016","viewed":58,"name":"DFC - Pixel dance","username":"DinoFireChief","description":"Mucking about ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["simple","pixel","experimentai"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Set the pixel black. Works as the background color.\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = ((fragCoord * vec2(2, 2)) / iResolution.xy) - vec2(1, 1);\n\n    // Pixel size\n    vec2 pixSize = vec2(10, 10);\n\n    // Adjusted by resolution \n    vec2 pixAdjSize = pixSize.xy / iResolution.xy;\n    pixAdjSize.x += iTime * 0.1;\n\n    // Initialize to zero and adjust based on time\n    vec2 pixCenter = vec2(0, 0);\n\n    if(pixAdjSize.x < 1.0)\n    {\n        // Change rate for pixel dance\n        float rate = (iTime * 0.5) * (iTime * 1.0);\n\n        // Current position of pixel \n        pixCenter = vec2(sin(rate) * (1.0 - pixAdjSize.x), 0.0);\n    }\n    else\n    {\n        pixAdjSize.x = 1.0;\n        pixAdjSize.y += (iTime - 10.0) * 0.1;\n        \n        if(pixAdjSize.y > 1.0)\n            pixAdjSize.y = 1.0;\n    }\n\n    // Distance from current fragment location to pix center\n    vec2 pixDist = pow(pixCenter - uv, vec2(2,2));\n\n    // Square style compare to determine if fragment location is \n    //    part of the pixel.\n    if(pixDist.x < pow(pixAdjSize.x, 2.0) && pixDist.y < pow(pixAdjSize.y, 2.0))\n    {\n        // Time varying pixel color\n        vec3 col = 0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0, 2, 4));\n\n        // Output to screen\n        fragColor = vec4(col, 1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}