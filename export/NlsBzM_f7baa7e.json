{"ver":"0.1","info":{"id":"NlsBzM","date":"1650663169","viewed":348,"name":"Sliding Spheres [239 bytes]","username":"Xor","description":"Some abstract code art.","likes":19,"published":1,"flags":0,"usePreview":0,"tags":["abstract","codeart","golf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Tweet: https://twitter.com/XorDev/status/1517616659590266886\n//Twigl: https://bit.ly/3OHnB6i\n\n//Inspired by: https://www.shadertoy.com/view/sdBBWK\n\n//Golfed with FabriceNeyret2's help\nvoid mainImage(out vec4 O, vec2 I)\n{\n    vec3  r = iResolution,\n          t = iTime +r-r,\n          P =   ( I+I - r.xy ) / r.y\n              * mat3x2(707,-408, 0,816, -707,-408) / 3e2\n              +.5;\n\n    O = ( length( fract( P +   ( t - sin(t*6.283)/6. ) \n                             * ceil( mod( vec3(2,0,1) - t , 3. ) - 2. )\n                             *  cos( ceil( P[int(t)%3] ) *3.14 ) \n                       ) -.5\n                )\n           -.5 ) *.1 * r.yyyy;\n}\n\n//Original (266 chars)\n/*\nvoid mainImage(out vec4 O, vec2 I)\n{\n    //Tau approximation (pi * 2).\n    float T = 6.283,\n    //Shortened time variable.\n    t = iTime;\n    //Resolution for scaling.\n    vec3 r = iResolution,\n    //Ray origin position (rotated to for isometric view)\n    P = (vec3(I+I,1)-r)*mat3(707,-408,577, 0,816,577, -707,-408,577)/3e2/r.y;\n    //Get length to nearest sphere center (scaled to pixel).\n    O = r.yyyy*.1*(length(fract(P+.5\n    //Smoothly move alternating through axes.\n    +(t-sin(t*T)/T)*(mod(vec3(2,0,1)-ceil(t),3.)-1.)\n    //Alternate direction per row.\n    *cos(round(P[int(t)%3])*T*.5))-.5)-.5);\n}\n*/","name":"Image","description":"","type":"image"}]}