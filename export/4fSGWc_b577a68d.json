{"ver":"0.1","info":{"id":"4fSGWc","date":"1704681101","viewed":2,"name":"Cristais gray","username":"Elsio","description":"Confesse, tá te dando uma enorme vontade de consertar os erros desse shader, não? ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","cubes","subdivision","subdivide"],"hasliked":0,"parentid":"McB3Rd","parentname":"Cristais"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MDIST 350.0\n#define STEPS 128.0\n#define pi 3.1415926535\n#define rot(a) mat2(cos(a), sin(a), -sin(a), cos(a))\n\n#define h21(a) fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123)\n#define h11(a) fract(sin((a) * 12.9898) * 43758.5453123)\n#define pmin(p) min(p.x, min(p.y, p.z))\n#define spring(x) (smoothstep(-.4, .4, x) + smoothstep(-.3, .3, x) - smoothstep(-.7, .7, x))\n\n#define box(p, b) length(max(abs(p) - (b), .0))    // problem??\n\n\nvec3 rdg;\nfloat id;\n\nfloat blocks(vec3 p, vec3 rd) {\n    \n    vec3 scl   = vec3(20),\n         dMin  = -.5 * scl,\n         dMax  =  .5 * scl,\n         dMini = dMin,\n         dMaxi = dMax,\n         delta = dMax - dMin,\n         divHash, div, center;\n    \n    float i, t = iTime,\n          seed = floor(t / 100.),\n          MIN_SIZE = .5,\n          ITERS = 3.,\n          PAD_FACTOR = 1.01, pad = .01,\n          BREAK_CHANCE = .02;\n          \n    bvec3 isEdge;\n    \n    while(i++ < ITERS) {\n        dMax = mix(dMax,  div, step(p, div));\n        dMin = mix( div, dMin, step(p, div));\n        center = (dMin + dMax) / 2.;\n        delta = dMax - dMin;\n        \n        id = length(mix(-div, div, step(p, div)) + 1.);\n\n        divHash = \n            vec3(\n                h21(vec2(i + id     , seed)), \n                h21(vec2(i + id + 2., seed)), \n                h21(vec2(i + id + 4., seed))\n            );\n\n        div = \n            clamp(\n                divHash * delta + dMin,\n                dMin + MIN_SIZE * PAD_FACTOR, \n                dMax - MIN_SIZE * PAD_FACTOR\n            );\n\n\n        if( pmin(min(abs(dMin - div), abs(dMax - div))) < MIN_SIZE || h11(id) < BREAK_CHANCE) \n            break;\n    }\n    \n    //\n    \n    vec3 dAxis = \n            abs( p \n              - mix(\n                    dMin, \n                    dMax, \n                    step(.0, rd)\n                )\n            ) / (abs(rd) + 1E-4);\n            \n            \n    float dEdge = pmin(dAxis);\n    float a = dEdge;\n    \n    isEdge = \n        bvec3(\n            dMaxi.x - dMax.x < pad ||  dMin.x - dMini.x < pad,\n            dMaxi.y - dMax.y < pad ||  dMin.y - dMini.y < pad,\n            dMaxi.z - dMax.z < pad ||  dMin.z - dMini.z < pad \n        );                 \n        \n    if(any(isEdge)) {\n        float expand = spring(sin(h11(id) + t)) + 1.2;\n        \n        if(isEdge.x) center.x *= expand;\n        if(isEdge.y) center.y *= expand;\n        if(isEdge.z) center.z *= expand;\n        \n        a = box(p - center, delta * .4 - .2) - .2;\n    }\n\n    return min(a, dEdge);\n}\n\n\nfloat map(vec3 p) {\n    vec3 D = rdg;\n    \n    p.xz *= rot(iTime / 3.);\n    p.xy *= rot(pi / 4.);\n    \n    D.xz *= rot(iTime / 3.);\n    D.xy *= rot(pi / 4.);\n\n    return blocks(p, D) + .01;\n}\n\n\nvoid mainImage(out vec4 o, vec2 u) {\n    vec3 R = iResolution, q, p,\n         D = (vec3(u, R.y) - R/2.) / R.y;\n         \n    float d, s, f, i, j;\n    \n    o *= i; \n    p.z = -40.;\n    \n    rdg = D;\n    \n    while(i++ < 84.) {\n        q = p + d * D;\n        \n        s = map(q);\n        \n        s = abs(s) - .004, \n        f = 2.  - s * 1e2, \n        f > .0 \n            ? o += f / d * i / 200. \n            : o;\n        \n        d += max(s, 1e-3);\n    }\n     \n    o += vec4(0,0,.01,0);\n}\n\n","name":"Image","description":"","type":"image"}]}