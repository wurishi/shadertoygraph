{"ver":"0.1","info":{"id":"DdK3zK","date":"1678813728","viewed":389,"name":" Fibonacci Sphere :)","username":"Ridah","description":"changed some params and got the nice effect. \nhope someone could simplify the code or get a higher framerate in some way.\ncomment pls   :(","likes":11,"published":3,"flags":0,"usePreview":0,"tags":["3d","sphere","glow","fibonacci"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//learn from : https://www.shadertoy.com/view/dtf3Ws\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     // thank for jolle's comment,the extended glow cause great waste!\n     //but it doesn't look so natural on the edge\n     vec2 d = (fragCoord-iResolution.xy*0.5)/iResolution.y;\n     if (dot(d, d) > 0.1)\n     {\n     fragColor = vec4(0.);\n     return;\n     }\n        \n     //Clear base color.\n    fragColor-=fragColor;\n    \n    vec2 r = iResolution.xy, p,\n         t = iTime-vec2(0,11), I = 2.*d;\n    \n    //Iterate though 400 points and add them to the output color.\n    for(float i=-1.; i<1.; i+=6e-3)\n        {     \n        //Xor's neater code!\n        p = cos(i*4e5+t.yx+11.)*sqrt(1.-i*i),\n        fragColor += (cos(i+vec4(4,3,2.*sin(t)))+1.)*(1.-p.y) /\n        dot(p=I+vec2(i,p/3.)/(p.y+2.),p)/3e4,\n        // dot(p=I+vec2(p.x,i)/(p.y+2.),p)/3e4,\n       \n        p = sin(i*4e4-t)*sqrt(1.-i*i), \n        fragColor += (cos(i+vec4(1,4,6,0))+1.)*(1.-p.y) / \n        dot(p=I+vec2(p.x,i)/(p.y+2.),p)/3e5,\n        \n        p = sin(i*4e4-t+80.)*sqrt(1.-i*i), \n        fragColor += (cos(i+vec4(2,8,6,0))+1.)*(1.-p.y) / \n        dot(p=I+vec2(p.x,i)/(p.y+2.),p)/3e5,\n        \n        p = sin(i*4e4-t+4e2)*sqrt(1.-i*i), \n        fragColor += (cos(i+vec4(2,4,12,0))+1.)*(1.-p.y) / \n        dot(p=I+vec2(p.x,i)/(p.y+2.),p)/3e5;      \n        }\n}","name":"Image","description":"","type":"image"}]}