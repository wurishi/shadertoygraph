{"ver":"0.1","info":{"id":"clXcRn","date":"1690549375","viewed":163,"name":"X Logo SDF","username":"TheTurk","description":"Distance function (exact) for the current X logo.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["distancefield","sdf","line","lines","logo","x","polygon","twitter","exact","twitterlogo"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int MAX_POINT_COUNT = 16;\n\nfloat polygon(vec2 position, vec2[MAX_POINT_COUNT] points, int pointCount) {\n    vec2 p = position - points[0];\n    float d = dot(p, p);\n    float s = 1.0;\n    vec2 start = points[pointCount - 1];\n    for (int i = 0; i < pointCount; i++) {\n        vec2 end = points[i];\n        vec2 e = end - start;\n        vec2 p = position - start;\n        float h = clamp(dot(p, e) / dot(e, e), 0.0, 1.0);\n        vec2 c = p - e * h;\n        d = min(d, dot(c, c));\n        // even-odd rule\n        if ((p.y > 0.0) != (p.y > e.y)) {\n            if ((e.y * p.x < e.x * p.y) != (e.y < 0.0)) {\n                s = -s;\n            } \n        }\n        start = end;\n    }\n    return sqrt(d) * s;\n}\n\nfloat logo(vec2 position) {\n    float scale = 0.075;\n    position /= scale;\n    position.y = -position.y;\n    position -= vec2(-12.0, -12.0);\n    vec2[MAX_POINT_COUNT] points1;\n    points1[0] = vec2(18.244, 2.25);\n    points1[1] = vec2(21.552, 2.25);\n    points1[2] = vec2(14.325, 10.51);\n    points1[3] = vec2(22.827, 21.75);\n    points1[4] = vec2(16.17, 21.75); \n    points1[5] = vec2(10.956, 14.933);\n    points1[6] = vec2(4.99, 21.75);\n    points1[7] = vec2(1.68, 21.75);\n    points1[8] = vec2(9.41, 12.915);\n    points1[9] = vec2(1.254, 2.25); \n    points1[10] = vec2(8.08, 2.25);\n    points1[11] = vec2(12.793, 8.481);\n    float d1 = polygon(position, points1, 12);\n    vec2[MAX_POINT_COUNT] points2;\n    points2[0] = vec2(17.083, 19.77);\n    points2[1] = vec2(18.916, 19.77);\n    points2[2] = vec2(7.084, 4.126);\n    points2[3] = vec2(5.117, 4.126);\n    float d2 = polygon(position, points2, 4);\n    return max(d1, -d2)  * scale;\n}\n\n/*\n// thin variant\n\nfloat logo(vec2 position) {\n    float scale = 0.0012;\n    position /= scale;\n    position.y = -position.y;\n    position -= vec2(-600.0, -600.0);\n    vec2[MAX_POINT_COUNT] points1;\n    points1[0] = vec2(714.163, 519.284);\n    points1[1] = vec2(1160.89, 0.0);\n    points1[2] = vec2(1055.03, 0.0);\n    points1[3] = vec2(667.137, 450.887);\n    points1[4] = vec2(357.328, 0.0);\n    points1[5] = vec2(0.0, 0.0);\n    points1[6] = vec2(468.492, 681.82);\n    points1[7] = vec2(0.0, 1226.37);\n    points1[8] = vec2(105.866, 1226.37);\n    points1[9] = vec2(515.491, 750.218); \n    points1[10] = vec2(842.672, 1226.37);\n    points1[11] = vec2(1200.0, 1226.37);\n    points1[12] = vec2(714.137, 519.284);\n    float d1 = polygon(position, points1, 13);\n    vec2[MAX_POINT_COUNT] points2;\n    points2[0] = vec2(569.165, 687.828);\n    points2[1] = vec2(521.697, 619.934);\n    points2[2] = vec2(144.011, 79.6944);\n    points2[3] = vec2(306.615, 79.6944);\n    points2[4] = vec2(611.412, 515.685);\n    points2[5] = vec2(658.88, 583.579);\n    points2[6] = vec2(1055.08, 1150.3);\n    points2[7] = vec2(892.476, 1150.3);\n    points2[8] = vec2(569.165, 687.854);\n    points2[9] = vec2(569.165, 687.828);\n    float d2 = polygon(position, points2, 10);\n    return max(d1, -d2) * scale;\n}\n*/\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) { \n    vec2 position = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    float d = logo(position);\n    vec3 color = mix(vec3(0.88, 0.68, 0.6), vec3(0.7, 0.75, 0.85), clamp(d * 0.85, 0.0, 1.0));\n    color -= mix(vec3(0.03, 0.21, 0.21), vec3(0.0), smoothstep(0.0, 3.0, d * iResolution.y));\n    float d1 = 1.0 - smoothstep(0.0, 3.0, (abs(d) - 0.0025) * iResolution.y);\n    float d2 = 1.0 - smoothstep(0.0, 3.0, abs((mod(d + 0.15, 0.3) - 0.15) * iResolution.y) - 2.0);\n    float d3 = 1.0 - smoothstep(0.0, 3.0, abs((mod(d + 0.025, 0.05) - 0.025) * iResolution.y) - 2.0);\n    color -= max(d1 * 0.85, max(d2 * 0.25, d3 * 0.05));    \n    if (iMouse.z > 0.0) {\n        vec2 mousePosition = (2.0 * iMouse.xy - iResolution.xy) / iResolution.y;\n        float d = logo(mousePosition);\n        color -= 0.8 * (1.0 - smoothstep(0.0, 3.0, abs(length(position - mousePosition) - abs(d)) * iResolution.y - 1.0));\n        color -= 0.2 * (1.0 - smoothstep(0.0, 3.0, (length(position - mousePosition) - max(abs(d) - 0.02, 0.0)) * iResolution.y - 1.0));\n    }\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}