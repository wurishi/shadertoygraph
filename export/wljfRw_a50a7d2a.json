{"ver":"0.1","info":{"id":"wljfRw","date":"1598569093","viewed":81,"name":"Ray-marching Tutorial","username":"tomon9086","description":"atomic reaction??","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["practice"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define EPS 0.0001\n\nvec3 camera(vec2 pos, vec3 cameraPos) {\n  vec3 sensor = vec3(pos, cameraPos.z - 1.);\n  return normalize(sensor - cameraPos);\n}\n\nfloat sphere(vec3 rayPos, vec3 spherePos, float r) {\n  return length(rayPos - spherePos) - r;\n}\n\nvec3 getSphereNorm(vec3 rayPos, vec3 spherePos) {\n  return normalize(rayPos - spherePos);\n}\n\nfloat sdf(vec3 rayPos) {\n  return min(\n    sphere(rayPos, vec3(cos(iTime), sin(iTime), tan(iTime)), 2.),\n    min(\n      sphere(rayPos, vec3(sin(iTime) + 2.*sin(iTime), sin(iTime), tan(iTime - 1.)), 2.),\n      min(\n        sphere(rayPos, vec3(2.*cos(iTime), sin(iTime), tan(iTime + 1.)), 2.),\n        sphere(rayPos, vec3(cos(iTime), 3.*cos(iTime), .5 * sin(sin(iTime) * 20.)), 2.)\n      )\n    )\n  );\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 pos = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n  vec3 cameraPos = vec3(0, 0, 10);\n  vec3 ray = camera(pos, cameraPos);\n  vec3 cur = cameraPos;\n\n  for(int i = 0; i < 16; i++) {\n    float d = sdf(cur);\n    if(d < EPS) {\n      fragColor = vec4(getSphereNorm(ray, cur), 1.) + vec4(.5, .5, .5, 0);\n      break;\n    }\n    cur += ray * d;\n    fragColor = vec4(0, 0, 0, 0);\n  }\n}\n","name":"Image","description":"","type":"image"}]}