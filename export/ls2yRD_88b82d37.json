{"ver":"0.1","info":{"id":"ls2yRD","date":"1491246861","viewed":100,"name":"simple SDF","username":"Incompetent","description":"Simple SDF Test","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float cubeDistance(vec3 rayPosition, vec3 cubePosition, vec3 cubeSize) {\n    vec3 d = abs(rayPosition - cubePosition) - cubeSize;\n    return min(max(d.x, max(d.y,d.z)), 0.0) + length(max(d,0.0));\n}\n\nfloat sphereDistance(vec3 rayPosition, vec3 spherePosition, float sphereRadius)\n{\n    float d = length(rayPosition - spherePosition) - sphereRadius;\n    return d;\n}\n\nfloat smin( float a, float b, float k )\n{\n  float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n  return mix( b, a, h ) - k*h*(1.0-h);\n}\n\n\nfloat scene(vec3 rayPosition)\n{\n    float blend = 3.*iMouse.y/iResolution.y;\n\tvec3 spherePosition = vec3(4.*sin(iTime), 2., 0.);\n\tfloat sdf = sphereDistance(rayPosition, spherePosition, 2.5);\n\tsdf = smin(sdf,sphereDistance(rayPosition, vec3(0.,0.,0.), 1.5),blend);\n    sdf = smin(sdf,cubeDistance(rayPosition,vec3(0.,-3.*sin(iTime),0.), vec3(1.,1.,1.)),blend);\n    return sdf;\n}\n\nconst float EPS = 0.01;\nvec3 getNormal( in vec3 p )\n{\n\treturn normalize( vec3(\n\t\tscene(p+vec3(EPS,0.,0.))-scene(p-vec3(EPS,0.,0.)),\n\t\tscene(p+vec3(0.,EPS,0.))-scene(p-vec3(0.,EPS,0.)),\n\t\tscene(p+vec3(0.,0.,EPS))-scene(p-vec3(0.,0.,EPS))\n\t) );\n}\n\nvec3 rayCast(vec3 rayPosition, vec3 rayDirection)\n{    \n    vec3 color = rayDirection*0.5+0.5;\n    \n    for(int i = 0; i < 128; ++i)\n    {\n        float d = scene(rayPosition);\n        rayPosition += d * rayDirection;\n        \n        if(d <= 0.01)\n        {\n            color = getNormal(rayPosition)*0.5+0.5;\n            break;\n        }\n    }\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float aspect = iResolution.x / iResolution.y;\n    uv -= .5;\n    uv.x = aspect * uv.x;    \n    \n    vec3 cameraPosition = vec3(0, 3, -10.0);\n    float angle = iMouse.x*0.01;\n    cameraPosition.xz = vec2(cos(angle),sin(angle));\n    cameraPosition.xz *= 10.;\n    vec3 cameraTarget = vec3(0);\n    vec3 cameraForward = normalize(cameraTarget - cameraPosition);\n    vec3 cameraUp = vec3(0,1,0);\n    vec3 cameraRight = normalize( cross(cameraForward, cameraUp));\n    \n    vec3 rayPosition = cameraPosition;\n    vec3 rayDirection = normalize(cameraForward + uv.x * cameraRight + uv.y * cameraUp);\n                                \n    vec3 color = rayCast(rayPosition, rayDirection);\n    \n\tfragColor = vec4(color, 1);\n}","name":"Image","description":"","type":"image"}]}