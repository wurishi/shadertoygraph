{"ver":"0.1","info":{"id":"MlXyzB","date":"1505243654","viewed":233,"name":"polynomial interpolation","username":"uchapow","description":"A very basic demo of the Lagrange interpolation formula. 4 points are used here.\n\nFirst contribution on Shadertoy :)","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["2d","interpolation","lagrange"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define N 4\n\n\nfloat lagrange(int j, float x, vec2 p[N])\n{\n\tfloat r = 1.0;\n\tfloat xi, xj = p[j].x;\n\t\n\tfor(int i=0; i<N; i++)\n\t{\n\t\tif(i != j)\n\t\t{\n\t\t\txi = p[i].x;\n\t\t\tr *= (x - xi) / (xj - xi);\n\t\t}\n\t}\n\t\n\treturn r;\n}\n\nfloat g(float x, vec2 p[N])\n{\n\tfloat y = 0.0;\n\tfor(int j=0; j<N; j++) y += lagrange(j, x, p) * p[j].y;\n\t\n\treturn y;\n}\n\n\nvec3 drawPoint(vec3 col, vec2 pos, vec2 fragCoord)\n{\n\tfloat c = distance(fragCoord, pos);\n\tcol += vec3(1.0,0.0,0.0)*exp(-10.0*c*c);\n\treturn col;\n}\n\nvec3 drawCurve(vec3 col, float y, vec2 fragCoord, vec2 p[N])\n{\n\tvec3 curveColour = vec3(0.0,1.0,0.0);\n\tif(fragCoord.x < p[0].x || fragCoord.x > p[N-1].x)\n\t\tcurveColour = vec3(0.0,0.5,1.0);\n\tcol += (smoothstep(y - 0.2, y, fragCoord.y)\n          - smoothstep(y, y + 0.2, fragCoord.y)) * curveColour;\n\treturn col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = -1.0 + 2.0*fragCoord.xy / iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    uv *= 15.0; // zoom\n    \n    vec2 points[N] = vec2[N](\n        vec2(-8.0, 3.0+2.0*sin(iTime*2.0)),\n        vec2(-1.0, 2.0+6.0*sin(iTime*3.0)),\n        vec2(3.0, -1.0+4.0*sin(iTime*1.0)),\n        vec2(8.0, -1.0+4.0*sin(iTime*1.0))\n    );\n\t\n\tvec3 col = vec3(0.0);\n\tfor(int i=0; i<N; i++)\n        col = drawPoint(col, points[i], uv);\n\tcol = drawCurve(col, g(uv.x, points), uv, points);\n\t\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}