{"ver":"0.1","info":{"id":"7lB3WD","date":"1623904632","viewed":82,"name":"Twirl compare","username":"Envy24","description":"Use mouse to change maxDistance and circle coordinates.\n\nLeft: twirl with atan\nMiddle: twirl withoun atan, smoothstep interpolation\nRight: twirl without atan, linear interpolation\n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["twirl","compare"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU 6.2831853071795862 // 2*PI\n\nvec2 twirlLeft(\n    float u,\n    float v,\n    float uCenter,\n    float vCenter,\n    float maxDistance,\n    float theta)\n{\n    u -= uCenter;\n    v -= vCenter;\n    \n    float distance_ = sqrt(u * u + v * v);\n\n    float alpha = atan(v, u) + theta * ((maxDistance - distance_) / maxDistance);\n\n    return vec2(\n        distance_ <= maxDistance ?\n            uCenter + distance_  * cos(alpha) :\n            uCenter + u,\n        distance_ <= maxDistance ?\n            vCenter + distance_  * sin(alpha) :\n            vCenter + v);\n}\n\n/* Without using atan https://www.shadertoy.com/view/slfGzN \n   \n   Uses smoothstep interpolation\n*/\nvec2 twirlMiddle(\n    float u,\n    float v,\n    float uCenter,\n    float vCenter,\n    float maxDistance,\n    float theta)\n{\n    u -= uCenter;\n    v -= vCenter;\n    \n    float alpha = \n        smoothstep(\n            0.0, maxDistance,\n            maxDistance - sqrt(u * u + v * v)) * theta;\n    \n    float c = cos(alpha);\n    float s = sin(alpha);\n\n    return vec2(\n        uCenter + u * c - v * s,\n        vCenter + u * s + v * c);\n}\n\n/* Without using atan\n   \n   Uses linear interpolation\n*/\nvec2 twirlRight(\n    float u,\n    float v,\n    float uCenter,\n    float vCenter,\n    float maxDistance,\n    float theta)\n{\n    u -= uCenter;\n    v -= vCenter;\n    \n    float t =  maxDistance - sqrt(u * u + v * v);\n    t = max(min(t, 1.0), 0.0); // clamp\n    \n    float alpha = maxDistance * t * theta;\n    \n    float c = cos(alpha);\n    float s = sin(alpha);\n\n    return vec2(\n        uCenter + u * c - v * s,\n        vCenter + u * s + v * c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n   \n\n    float maxDistance = iMouse.z > 0.0 ? iMouse.x / iResolution.x : 0.5;\n    \n    /**/\n    uv.x *= 3.0;\n    \n    if (uv.x <= 1.0)\n    {\n        float xCenter = iMouse.z > 0.0 ? iMouse.x / iResolution.x : 0.5;\n        float yCenter = iMouse.z > 0.0 ? iMouse.y / iResolution.y : 0.5;\n        float theta = sin(iTime * 0.5) * TAU * 1.0;\n    \n        uv = \n            twirlLeft(\n                uv.x,\n                uv.y,\n                xCenter,\n                yCenter,\n                maxDistance,\n                theta);\n    }  \n    else if (uv.x > 1.0 && uv.x <= 2.0)\n    {\n        float xCenter = iMouse.z > 0.0 ? 1.0 + iMouse.x / iResolution.x : 1.5;\n        float yCenter = iMouse.z > 0.0 ? iMouse.y / iResolution.y : 0.5;\n        float theta = sin(iTime * 0.5) * TAU * 1.0;\n        \n        uv = \n            twirlMiddle(\n                uv.x,\n                uv.y,\n                xCenter,\n                yCenter,\n                maxDistance,\n                theta);\n    }\n    else\n    {\n        float xCenter = iMouse.z > 0.0 ? 2.0 + iMouse.x / iResolution.x : 2.5;\n        float yCenter = iMouse.z > 0.0 ? iMouse.y / iResolution.y : 0.5;\n        float theta = sin(iTime * 0.5) * TAU * 4.0;\n        \n        uv = \n            twirlRight(\n                uv.x,\n                uv.y,\n                xCenter,\n                yCenter,\n                maxDistance,\n                theta);\n    }\n    /**/\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"}]}