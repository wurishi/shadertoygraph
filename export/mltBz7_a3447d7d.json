{"ver":"0.1","info":{"id":"mltBz7","date":"1701105480","viewed":15,"name":"Projection onto a cylinder","username":"GBA","description":"projection of a moving sphere onto a cylinder","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarchingprojection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159;\n// cylinder radius\nconst float cRad = 2.0;\nconst float yScale = 3.0;\n\nvec3 sPos() {\n    return vec3(4.0 * cos(iTime), 0.3, 2.0 * sin(iTime));\n}\n\nfloat map(vec3 pos) {\n    vec3 sc = sPos();\n    return length(pos - sc) - 0.9;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = 2.0 * uv - 1.0;\n    uv.y /= iResolution.x / iResolution.y;\n    float angle = uv.x * PI;\n    vec3 rd = vec3(cos(angle), 0.0, sin(angle));\n    vec3 ro = vec3(cRad * rd.x, yScale * uv.y, cRad * rd.z);\n    bool hit;\n    vec3 p;\n    float t;\n    for(int i = 0; i < 100; i++) {\n        p = ro + t * rd;\n        float d = map(p);\n        if(d < 0.001) {\n            hit = true;\n            break;\n        }\n        \n        t += d;\n        if(t > 1000.) break;\n    }\n    \n    \n    // Time varying pixel color\n    vec3 col = vec3(hit, 0.0, 0.0);\n    \n    if(hit){\n        vec3 n = normalize(p - sPos());\n        col *= max(0.0, dot(n, -rd));\n    }\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}