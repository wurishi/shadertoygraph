{"ver":"0.1","info":{"id":"3s2XW1","date":"1553792625","viewed":243,"name":"space shader","username":"kbooz","description":"test","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["helloworld"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float xor(float a, float b) {\n\treturn a*(1.-b) + b* (1.-a);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord -.5 * iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0.);\n    \n    // Rotação\n    float angle = .78;\n    float sinA = sin(angle);\n    float cosA = cos(angle);\n    uv*= mat2(cosA, -sinA, sinA, cosA);\n    \n    // Scale\n    uv*= 15.;\n    \n    vec2 gv = fract(uv)-.5;\n    \n    vec2 id = floor(uv);\n    \n    float circle = 0.;\n    float time = iTime;\n    \n    \n    for(float y=-1.; y<=1.; y++){\n        for(float x=-1.; x<=1.; x++){\n            vec2 offs = vec2(x,y);\n    \t\tfloat dist = length(gv-offs);\n            \n            float distUV = length(id+offs)*.3;\n            float radiusPos = sin(distUV-time)*.5 + .5;\n            \n            float radius = mix(.3, 1.5, radiusPos);\n            \n            float blur = mix(.8, .9, -sin(dist));\n            \n            circle = xor(circle, smoothstep(radius,radius*blur,dist));\n            \n        }\n    }\n    \n    //col.rb = gv;\n\tcol += mod(circle, 2.);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}