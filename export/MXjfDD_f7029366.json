{"ver":"0.1","info":{"id":"MXjfDD","date":"1729499724","viewed":59,"name":"Gradient meter","username":"Iunave","description":"Simple animated meter. (Drag mouse to move)\nCriticism and improvements welcome!","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["animated"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI float(3.1415926535897932384626433)\n\nfloat sdCircle(vec2 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat sdRing(in vec2 p, in vec2 n, in float r, float th)\n{\n    p.x = abs(p.x);\n    p = mat2x2(n.x,n.y,-n.y,n.x)*p;\n    return max(abs(length(p)-r)-th*0.5,length(vec2(p.x,max(0.0,abs(r-p.y)-th*0.5)))*sign(p.x));\n}\n\n//modified to start at the base and not tip of the triangle\nfloat sdTriangleIsosceles(in vec2 p, in vec2 q)\n{\n    p.y += q.y;\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float k = sign( q.y );\n    float d = min(dot( a, a ), dot(b, b));\n    float s = max( k*(p.x*q.y-p.y*q.x), k*(p.y-q.y) );\n    return sqrt(d)*sign(s);\n}\n\nvec3 palette(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d)\n{\n    return a + b*cos( 6.283185*(c*t+d) );\n}\n\nvec3 meterGradient(vec2 uv)\n{\n    vec3 a = vec3(0.700, 0.700, -3.142);\n    vec3 b = vec3(0.500, 0.500, -3.142);\n    vec3 c = vec3(0.500, 0.500, -3.142);\n    vec3 d = vec3(0.600, -0.107, -3.142);\n    float t = atan(uv.y, uv.x) / PI;\n    return palette(t, a, b, c, d);\n}\n\nfloat antiAliasDist(vec2 uv, float d) \n{\n    float dxy = length(fwidth(uv));\n    return smoothstep(-dxy, dxy, -d);\n}\n\nfloat drawCircle(vec2 uv) \n{\n    float d = sdCircle(uv, 0.2);\n    return antiAliasDist(uv, d);\n}\n\nfloat drawTriangle(vec2 uv)\n{\n    float anim = iMouse.x / iResolution.x;\n    float th = (PI / 2.0) + (anim * PI);\n    vec2 rot = mat2x2(cos(th), sin(th), -sin(th), cos(th)) * uv;\n    vec2 tri = vec2(0.1, 1.7);\n    float d = sdTriangleIsosceles(rot, tri);\n    float dRound = d - 0.01;\n    return antiAliasDist(uv, dRound);\n}\n\nfloat drawRing(vec2 uv) \n{\n    float d = sdRing(uv, vec2(0.0, 1.0), 1.3, 0.8);\n    float dRound = d - 0.05;\n    return antiAliasDist(uv, dRound);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    uv *= 2.0;\n    uv -= vec2(1.0, 0.22);\n    uv.x *= iResolution.x / iResolution.y;\n    \n    fragColor = mix(vec4(0.5), vec4(meterGradient(uv), 1.0), drawRing(uv));\n    fragColor = mix(fragColor, vec4(vec3(0.0), 1.0), drawTriangle(uv));\n    fragColor = mix(fragColor, vec4(vec3(0.0), 1.0), drawCircle(uv));\n}","name":"Image","description":"","type":"image"}]}