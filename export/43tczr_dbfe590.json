{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"texture","id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"code":"#define PARAM_shift 0\n#define PARAM_rotate 1\n\n#ifdef UNIFORM_PARAM\n\nuniform sampler2D iChannel0; //[texture26]\n\nuniform int tiles; //[20,50,100]\nuniform bool fixedSize; // [false]\n\n#else\n\nconst int tiles = 50;\nconst bool fixedSize = false;\n\n#endif\n\nfloat sdCircle(vec2 p, float r)\n{\n    return length(p) - r;\n}\n\nvec3 cellColor(vec2 u, float size)\n{\n    vec2 R = iResolution.xy;\n    vec2 pos = mod((u - 0.5) * R, size) - size / 2.0;\n    vec2 uv = u - pos / R;\n    return texture(iChannel0, uv).rgb;\n}\n\nvec2 rotate(vec2 p, float angle, vec2 center) {\n    float s = sin(angle);\n    float c = cos(angle);\n    p -= center;\n    return vec2(p.x * c - p.y * s, p.x * s + p.y * c) + center;\n}\n\nfloat whichGroup(vec2 id, float groups) {\n    vec2 hashVal = fract(sin(dot(id, vec2(12.9898, 78.233))) * vec2(43758.5453, 15937.5453));\n    return floor(hashVal.x * groups);\n}\n\nvec3 angleToColor(float angle) {\n    return 0.5 + 0.5 * vec3(sin(angle), sin(angle + 2.0944), sin(angle + 4.1888));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 R = iResolution.xy;\n    vec2 u = fragCoord / R;\n    vec2 p = (fragCoord - 0.5 * R) / min(R.x, R.y);\n    vec2 p0 = (fragCoord - 0.5 * R) / min(R.x, R.y);\n    vec2 m = (iMouse.y - 0.5 * R) / R.y;\n\n    float num = float(tiles) * (1.0 + ((iMouse.z > 0.0) ? m.x : 0.25 * sin(0.5 * iTime)));\n    float size = min(R.x, R.y) / num;\n    float speed = 0.5;\n    float groupOffset = 1.;\n\n    vec2 cellId = p * num;\n    vec2 cellCenter = (cellId + 0.5) / num;\n\n    vec3 col = vec3(0.0);\n\n    float nGroups = 4.0;\n    float group = whichGroup(cellId, nGroups);\n\n#if PARAM_rotate\n    float rot = iTime/2.;\n    if (iMouse.z > 0.0) {\n        float interp = -iMouse.x / iResolution.x;\n        rot = mix(0.0, nGroups * (1.0 + nGroups) * 6.28318, interp); // Full rotations from 0 to 2*PI*nGroups\n    }\n    float angle = rot * speed * (1.+group) * groupOffset;\n    if (mod(group, 2.0) < 1.0) angle *= -1.0;\n    u = rotate(u, angle, vec2(0.5));\n    p = rotate(p, angle, vec2(0.0));\n#endif\n\n    vec3 tc = cellColor(u, size);\n    float l = fixedSize ? 1.0 : (tc.r + tc.g + tc.b) / 3.0;\n\n    vec2 fp = fract(p * num);\n    float d = sdCircle(fp - 0.5, 0.5 * l);\n    float a = 1.5 * num / min(R.x, R.y);\n    float c = smoothstep(0.0, -a, d);\n\n    col += fixedSize ? mix(vec3(0.0), tc, c) : vec3(c);\n\n    // Correctly overlay colored lines pointing up relative to the angle\n    float lineThickness = 0.02;\n    vec2 lineDir = vec2(sin(angle), cos(angle));\n    float lineDistance = dot(p0, lineDir);\n    float lineOpacity = step(lineDistance, 0.0);\n    vec3 lineColor = angleToColor(angle);\n\n    col = mix(col, lineColor, lineOpacity);\n\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"43tczr","date":"1734717537","viewed":42,"name":"converging image","username":"bombblob","description":"spinning dots converge occasionally to show an image.\n\nmouse.x changes rotation amount, mouse.y changes dot size","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["postprocessing","halftone","pixelation","hiddenimage"],"hasliked":0,"parentid":"McKSzm","parentname":"Fork Halftone Effect"}}