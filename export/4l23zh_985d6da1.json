{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// I'm having a weird problem with a Firefox/Opera/Chrome (not IE) bug and was \n// wondering if anyone else could help me out by reproducing it.\n\n// Change line 48 to float time = mod(iTime, 2.0);\n// and the shader no longer builds.\n\n\n// Returns the location of the current fragment relative to the center of the screen, where 0.5 is the distance to the nearest screen border.\n// This will return values > +-0.5 on the X axis in widescreen, and the Y axis in portrait.\nvec2 pixelCoord(vec2 fragCoord) { \n\treturn ((fragCoord - (iResolution.xy / 2.0)) / min(iResolution.x, iResolution.y)); \n}\n\nstruct ray {\n\tvec3 start;\n\tvec3 normal;\n};\n\t\n// Builds a ray at 0, 0, 0 looking down Z+.\nray lens(vec2 pixelCoord, float fieldOfView) {\n\treturn ray(vec3(0.0, 0.0, 0.0), normalize(vec3(pixelCoord, fieldOfView)));\n}\n\n// These functions find the distance to a plane on the given axis at the given location.\n// Mask is a predicate, given the other two axes at the point of intersection.\n// If it returns false, the plane is not processed.\n#define planeX(xLoc, mask) { float distance = (xLoc - ray.start.x) / ray.normal.x; if(distance < nearest && distance >= 0.0) { vec2 intersection = ray.start.yz + ray.normal.yz * distance; if(mask) nearest = distance; } }\n#define planeZ(zLoc, mask) { float distance = (zLoc - ray.start.z) / ray.normal.z; if(distance < nearest && distance >= 0.0) { vec2 intersection = ray.start.xy + ray.normal.xy * distance; if(mask) nearest = distance; } }\n#define planeY(yLoc, mask) { float distance = (yLoc - ray.start.y) / ray.normal.y; if(distance < nearest && distance >= 0.0) { vec2 intersection = ray.start.xz + ray.normal.xz * distance; if(mask) nearest = distance; } }\n\n#define shade(col) color += intensity * col; intensity = 0.0;\n\n#define light(origin, compute) { vec3 _origin = origin; float along = dot(_origin - ray.start, ray.normal); along = min(nearest, mix(nearest, along, clamp(along, 0.0, 1.0))); vec3 closest = ray.start + ray.normal * along; intensity += compute; }\n#define radial(rate, exponent) (1.0 / (1.0 + pow(rate * distance(closest, _origin), exponent)))\n#define directional(normal, exponent) (pow(max(0.0, dot(normal, normalize(closest - _origin))), exponent))\n\n#define rotateY(value, angle) { float _angle = angle; float cosine = cos(angle); float sine = sin(angle); value = vec3(cosine * value.x - sine * value.z, value.y, cosine * value.z + sine * value.x); }\n\n#define keyframe(duration, location, yaw, pitch) { float _duration = duration; vec3 _location = location; float _yaw = yaw; float _pitch = pitch; if(time < _duration && time > 0.0) { time /= _duration; ray.start = mix(previousLocation, _location, time); rotateY(ray.normal, mix(previousYaw, _yaw, time)) time = -1.0; } else { time -= _duration; } previousLocation = _location; previousYaw = _yaw; previousPitch = _pitch; }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tray ray = lens(pixelCoord(fragCoord), 0.5);\n    \n    // Camera\n    // --------------------------------------------------\n    \n    float time = iTime;\n    vec3 previousLocation;\n    float previousYaw;\n    float previousPitch;\n    \n    // Starting room.\n    keyframe(0.0, vec3(1.5, 0.0, -1.0), 0.5, 0.0)\n    keyframe(2.0, vec3(-0.375, 0.0, 1.5), 0.0, 0.0)\n        \n    // Corridor.\n    keyframe(1.5, vec3(-3.0, 0.0, 2.25), 1.0, 0.0)\n    keyframe(1.5, vec3(-5.5, 0.0, 2.25), 0.6, 0.0)\n        \n    // Around first bend.\n    keyframe(1.5, vec3(-5.5, 0.0, 6.875), -0.1, 0.0)     \n        \n    // Turn towards stairwell.\n    keyframe(0.5, vec3(-5.5, 0.0, 7.875), 0.9, 0.0)     \n        \n    // Occluders.\n    // --------------------------------------------------\n    // IE11 doesn't allow infinity.\n    float nearest = 10000.0;\n    \n    // Front wall of starting room.\t\n    planeZ(1.0, \n            intersection.x > -6.5           \n            && intersection.x < 2.0\n            && intersection.y < 1.0\n            && intersection.y > -1.0\n            && (\n            \tintersection.y >= 0.75 \n            \t|| intersection.x >= 0.25\n                || intersection.x < -6.125\n                || ( intersection.x >= -4.875 && intersection.x < -1.0 )\n            )\n\t)     \n        \n    // Ceiling of starting area.\n    planeY(1.0, \n            intersection.x > -11.0\n            && intersection.x < 4.5\n            && intersection.y > -1.0\n            && intersection.y < 14.75\n\t)        \n        \n    // Floor of starting area.\n    planeY(-1.0, \n            intersection.x > -11.0\n            && intersection.x < 4.5\n            && intersection.y > -1.0\n            && intersection.y < 14.75\n\t)    \n     \n\t// Right wall of starting room.\n    planeX(2.0, \n            intersection.x < 1.0\n            && intersection.x > -1.0\n          \t&& intersection.y > -1.0\n           \t&& intersection.y < 3.25\n           \t&& (\n                intersection.x > 0.5\n                || intersection.y > 2.875\n                || intersection.y < 1.625\n            )\n\t)     \n        \n    // Left wall of starting room.\n    planeX(-1.5, \n            intersection.x < 1.0\n            && intersection.x > -1.0\n          \t&& intersection.y > -1.0\n           \t&& intersection.y < 1.0\n\t) \n        \n    // Left doorframe of starting room.\n    planeX(-1.0, \n           intersection.x >= -1.0\n           && intersection.x < 0.75\n           && intersection.y >= 1.0\n           && intersection.y <= 1.25\n\t)           \n        \n    // Right doorframe of starting room.\n    planeX(0.25, \n           intersection.x >= -1.0\n           && intersection.x < 0.75\n           && intersection.y >= 1.0\n           && intersection.y <= 1.25\n\t)         \n        \n    // Top of doorframes on starting level.\n    planeY(0.75, \n           intersection.x >= -1.0\n           && intersection.x < 0.25\n           && intersection.y >= 1.0\n           && intersection.y <= 1.25\n\t)           \n        \n    // Back wall of corridor.\t\n    planeZ(3.25, \n            intersection.x >= -4.5\n           && intersection.x <= 4.5\n           && intersection.y >= -1.0\n           && intersection.y <= 1.0\n\t)           \n        \n    // Left wall of corridor.\t\n    planeX(-6.5, \n           intersection.x <= 1.0\n           && intersection.x >= -1.0\n           && intersection.y >= 1.25\n           && intersection.y <= 14.75\n           && (\n               // Above doors.\n               intersection.x > 0.75\n               // Make a hole for the doorway you pass.\n               || intersection.y < 3.625\n               || (\n                   intersection.y > 4.875\n               // Make a hole for the doorway to the stairwell.\n                   && intersection.y < 7.25\n               )\n               || intersection.y > 8.5\n           )\n\t)            \n        \n    // Right wall of corridor.\t\n    planeX(-4.5, \n            intersection.x <= 0.75\n           && intersection.x >= -1.0\n           && intersection.y >= 3.25\n           && intersection.y <= 14.75\n\t)  \n        \n    // Left wall of corridor.\t\n    planeX(-6.75, \n           intersection.x <= 1.0\n           && intersection.x >= -1.0\n           && intersection.y >= 1.25\n           && intersection.y <= 10.5\n           && (\n               // Above doors.\n               intersection.x > 0.75\n               // Make a hole for the doorway you pass.\n               || intersection.y < 3.625\n               || (\n                   intersection.y > 4.875\n               // Make a hole for the doorway to the stairwell.\n                   && intersection.y < 7.25\n               )\n               || intersection.y > 8.5\n           )\n\t)         \n        \n    // Lights.\n    // --------------------------------------------------\n    float intensity = 0.0;\n    vec3 color = vec3(0.0);\n    \n    // Starting room.\n    light(vec3(0.5, 0.9, 0.0), radial(8.0, 2.0) + radial(1.0, 3.0) * directional(vec3(0.0, -1.0, 0.0), 2.0))\n    shade(vec3(0.3, 0.6, 1.0));\n    \n    // Corridor outside starting room.\n    light(vec3(-1.0, 1.0, 2.25), radial(8.0, 2.0) + radial(1.0, 3.0) * directional(vec3(0.0, -1.0, 0.0), 2.0))\n    light(vec3(-3.5, 1.0, 2.25), radial(8.0, 2.0) + radial(1.0, 3.0) * directional(vec3(0.0, -1.0, 0.0), 2.0))\n    \n    // Around corner.\n\tlight(vec3(-5.5, 1.0, 4.25), radial(8.0, 2.0) + radial(1.0, 3.0) * directional(vec3(0.0, -1.0, 0.0), 2.0))        \n    light(vec3(-5.5, 1.0, 7.875), radial(8.0, 2.0) + radial(1.0, 3.0) * directional(vec3(0.0, -1.0, 0.0), 2.0))        \n    shade(vec3(0.8, 0.7, 0.3));    \n    \n    // Post processing.\n    // --------------------------------------------------    \n    \n    // In addition to distance fog, this puts some very nice fake AO in corners of the room because they're further than the centre of the walls.\n    color *= vec3(1.0 / (1.0 + nearest * 10.0));\n    \n    // This darkens the scene considerably however so boost the brightness after.\n    color *= 16.0;\n    \n    // Draw a backdrop if no occluder was hit.\n    if(nearest == 1.0 / 0.0)\n        color += mix(vec3(0.1, 0.1, 0.01), vec3(0.0, 0.01, 0.0), pow(ray.normal.y +0.5, 0.5));\n    \n    fragColor = vec4(pow(color, vec3(1.0 / 2.2)), 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4l23zh","date":"1426933397","viewed":389,"name":"Speeding in the Dark - bug?","username":"jameswilddev","description":"Trying to maintain\nThe feeling in your heart","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["volumetrics"],"hasliked":0,"parentid":"","parentname":""}}