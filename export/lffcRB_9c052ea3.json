{"ver":"0.1","info":{"id":"lffcRB","date":"1721246218","viewed":22,"name":"[steve] checker","username":"import_shader_steve","description":"basic checker pattern","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["checker"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float remap01(float x, float low, float high) {\n    return clamp((x - low) / (high - low), 0., 1.);\n}\n\nfloat remap(float x, float lowIn, float highIn, float lowOut, float highOut) {\n    return mix(lowOut, highOut, remap01(x, lowIn, highIn));\n}\n\nfloat sdSphere(vec2 uv, float r) {\n    return length(uv) - r;\n}\n\nfloat sdChecker(vec2 uv, float a) {\n    vec2 id = floor(uv / a);\n    if (mod(id.x, 2.) + mod(id.y, 2.) == 1.) return 1.;\n    else return 0.;\n}\n\nvoid clearColor(inout vec3 col) {\n    col = vec3(0.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n\n    vec3 col = vec3(0.);\n    \n    float d = sdSphere(uv, 0.5);\n    d = smoothstep(fwidth(d), -fwidth(d), d);\n    col = vec3(d);\n    \n    clearColor(col);\n    d = sdChecker(uv, 0.1);\n    col = vec3(d);\n    \n    clearColor(col);\n    float offset = sin(uv.x + iTime * 1.);\n    vec2 uv2 = uv + vec2(0., offset * 0.2);\n    d = sdChecker(uv2, 0.1);\n    col = vec3(d);\n    float light = remap(pow(offset * 0.9, 4.), 0., 1., -1., 1.) * 0.4;\n    col += vec3(light);\n    \n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}