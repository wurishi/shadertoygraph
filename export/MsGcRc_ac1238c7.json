{"ver":"0.1","info":{"id":"MsGcRc","date":"1522869861","viewed":185,"name":"divisionism 2","username":"kariluoma","description":"Use splotches of color (restricted to a predefined pallette) to represent the target color. ","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["pointillism","divisionism"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SUBCELLS 3\n\nvec4 value(vec4 color)\n{\n    const int size = 3;\n    const vec3 values[size] = vec3[] (vec3(1.0), vec3(0.5), vec3(0.0));\n    int best = 0;\n    for (int i=0; i<size; i++) \n         if ( distance(color.rgb, values[i]) < distance(color.rgb, values[best]) )\n         \tbest = i;\n    return vec4(values[best], color.a);\n}\n\nvec4 palette(vec4 color)\n{\n    const vec3 bg      = vec3(13./255.,  163./255., 38./255.);\n    if (distance(color.rgb, bg) < 0.3) return vec4(bg, color.a);\n    \n    const vec3 glasses = vec3(191./255., 102./255.,  0./255.);\n    const vec3 skinl =   vec3(157./255., 124./255., 87./255.);\n    const vec3 skinm =   vec3(191./255., 151./255., 106./255.);\n    const vec3 skinh =   vec3(219./255., 183./255., 147./255.);\n    const vec3 hair =    vec3(63./255.,  55./255.,  49./255.);\n    const vec3 shirt =   vec3(45./255.,  42./255.,  43./255.);\n    const vec3 pants =   vec3(55./255.,  61./255.,  61./255.);\n    const vec3 metall =  vec3(157./255., 166./255., 160./255.);\n    const vec3 metalh =  vec3(193./255., 204./255., 197./255.);\n    const vec3 fire  =   vec3(204./255., 45./255.,  9./255.);\n    const int size = 11;\n    const vec3 palette[size] = vec3[] (bg, glasses, skinl, skinm, skinh, hair, shirt, pants, metalh, metall, fire);\n    int best = 0;\n    for (int i=0; i<size; i++) \n         if ( distance(color.rgb, palette[i]) < distance(color.rgb, palette[best]) )\n         \tbest = i;\n    return vec4(palette[best], color.a);\n}\n\nint which_cell(vec2 w)\n{\t\n\t// returns an int between 0 and (SUBCELLS*SUBCELLS)-1\n\tw = floor(w*float(SUBCELLS)); \n\tint i = int(w.x), j = int(w.y); \n\treturn i + SUBCELLS*j;\n}\n\n//iChannel0: texture (e.g. Claude Van Damme)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float fSUB = float(SUBCELLS);\n    #if 1\n    // good default\n    float CELL_1 = iResolution.y/3.;\n    #else\n    // use mouse.x to fine-tune\n\tfloat CELL_1 = iResolution.y/iMouse.x*10.;\n    #endif\n\tfloat CELL_2 = CELL_1 * fSUB;\n    \n    vec2 xy = CELL_1 * fragCoord.xy  / iResolution.y;\n    vec2 s1 = floor(xy); // sample bottom-left corner of CELL_1\n    vec2 T = iChannelResolution[0].xy; \n    vec4 t = texture(iChannel0, s1 / CELL_1 * T.y / T); // target color\n    \n    vec2 s2 = floor(xy * fSUB); // represent the target color with (SUBCELLS*SUBCELLS) cells\n\n    vec4 c = t; // sampled color\n    \n    switch (which_cell( s2 / fSUB - s1 ))\n    {\n        case 0: c = palette(t);\tbreak;\tcase 1: c = palette(t);\tbreak;\tcase 2: c = value(t);\tbreak;\n        case 3: c = value(t);\tbreak;\tcase 4: c = palette(t);\tbreak;\tcase 5: c = palette(t);\tbreak;\n        case 6: c = palette(t);\tbreak;\tcase 7: c = value(t);\tbreak;\tcase 8: c = palette(t);\tbreak;\n        default: break;\n    }\n    \n    \n    vec2 d = xy*fSUB - s2 - 0.5; // transform coordinates to unit circle\n   \t\n    if (length(d) <  0.443)\tfragColor = c;\n    else           \t\t\tfragColor = value(t);\n}\n","name":"Image","description":"","type":"image"}]}