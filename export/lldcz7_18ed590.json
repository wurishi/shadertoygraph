{"ver":"0.1","info":{"id":"lldcz7","date":"1532100857","viewed":112,"name":"Metaspheres","username":"Veggiebob","description":"Metaballs! Mouseable","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["mouse","distancefields","texture"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rr","filepath":"/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","previewfilepath":"/media/ap/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","type":"volume","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float align (float diff, float dim){\n    if(diff>=dim){\n        return diff-dim;\n    } else {\n        return 0.;\n    }\n}\nfloat box3D (vec3 boxPos, vec3 boxSize, vec3 pos){\n    float n = align(abs(pos.x-boxPos.x), boxSize.x)+align(abs(pos.y-boxPos.y), boxSize.y);\n    n+=align(abs(pos.z-boxPos.z), boxSize.z);//just to keep the lines short\n    return n;\n}\nfloat sphere (vec3 spherePos, vec3 pos, float radius){\n    return length(pos-spherePos)-radius;\n}\nfloat sq (float x){\n    return x*x;\n}\nvec4 trace (vec3 o, vec3 r, float bigness) {\n    float t = 0.;\n    vec3 p = o;\n    float rad = bigness*sqrt(2.);\n    float d1 = 0.;\n    float d2 = 0.;\n    for(int i = 0; i<64; i++){\n        p = o+r*t;\n        d1 = sphere(vec3(0.), p, rad);\n        d2 = sphere(vec3(sin(iTime)*rad*3.), p, rad);\n        float d = min(d1, d2)-0.01/sq(d1+d2);\n        t+=d*0.7;\n    }\n    float extraShade = pow(0.01, abs(d1-d2))*0.01;\n    return vec4(p, t+extraShade);\n}\nvec3 fractalColor (vec3 p, float iters){\n    vec3 c = texture(iChannel1, p).rgb;\n    for(float i = 0.; i<iters; i++){\n        c+=texture(iChannel1, p*pow(2., i)+iTime*0.05).rgb*pow(0.8, i);\n    }\n    return c;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 mouse = iMouse.xy/iResolution.xy - vec2(0.5, 0.);\n    if(iMouse.xy == vec2(0.))mouse = vec2(0.5, 0.5);\n    mouse.x*=5.;\n    mouse.y*=2.;\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv-=0.5;\n    uv.x*=iResolution.x/iResolution.y;\n    float groundHeight = 0.;\n    float angle = mouse.x;\n    float fov = 0.5;\n    float bigness = 0.1;\n    float camDist = mouse.y+bigness*2.;\n    vec3 camera = vec3(cos(mouse.x)*camDist, 0., sin(mouse.x)*camDist);\n    vec3 ray = vec3(-cos(mouse.x+uv.x*fov)*2., uv.y, -sin(mouse.x+uv.x*fov)*2.);\n    ray = normalize(ray);\n    \n    vec4 v = trace(camera, ray, bigness);\n    vec3 col = fractalColor(v.xyz, 5.);//fractalize\n    col*=1./length(col);//normalize\n\tfloat fog = 1./(1.+pow(v.w, 2.)*0.1);\n    col*=fog;\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}