{"ver":"0.1","info":{"id":"tltcW4","date":"1609133401","viewed":107,"name":"distance functions demo","username":"HaleyHalcyon","description":"switches every second between linear, squared, log, and exponential","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["spiral"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 color(float x) {\n    const float offset = 0.8;\n    x *= 2. * 3.14159265;\n    return 0.5 + 0.4 * sin(vec3(\n        x - offset,\n        x,\n        x + offset\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Scales pixel coordinates, so that\n    // the center is distance 0 and\n    // diagonals are distance 1\n    vec2 uv = (fragCoord / length(iResolution.xy)\n\t- (iResolution.xy / length(iResolution.xy) / 2.)) * 2.;\n    \n    float which = floor(mod(iTime, 4.));\n    \n    float lenSq = uv.x*uv.x+uv.y*uv.y;\n    float angle = iTime * 2. + atan(uv.y, uv.x) / 3.14159265358979 * 0.5;\n    \n    vec3 col = \n    color(\n        fract(\n            angle * 2. + mix(\n                mix(\n                    length(uv) * 4.,\n                    lenSq * 4.,\n                    step(1., which)\n                ), mix(\n                    log(uv.x * uv.x + uv.y * uv.y) * 0.6,\n                    3.5 * sqrt(length(uv)),\n                    step(3., which)\n                ),\n                step(2., which)\n            )\n        )\n    );\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}