{"ver":"0.1","info":{"id":"3slXW7","date":"1552900271","viewed":174,"name":"a few animated circles","username":"nebbul","description":"a few simple animated circles","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["simple","circle","animated"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define DIV 10.0\n#define MINRADIUS 0.1\n#define MAXRADIUS 0.9\n#define PULSEFREQ 4.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    // define the UVs, make them square by using the same iRes dimension\n\tvec2 uv = fragCoord.xy/iResolution.xx;\n    // define UV squares\n    vec2 uvShift = floor( uv * DIV ) / DIV * PULSEFREQ;\n    // make UV gradients inside the squares\n\tuv = fract( uv * DIV ) * 2.0 - 1.0;\n\n    // circle radius pulse offset by the UV squares\n    float sinTime = sin(iTime * 2.0 - uvShift.x - uvShift.y);\n    // remap sinTime output to min/max radius\n    float radius = (sinTime + 1.0) / 2.0 * (MAXRADIUS - MINRADIUS) + MINRADIUS;\n    \n    float circle = length(uv) - radius; \n    \n    // anti aliasing\n    float pix = DIV * 2.0 / iResolution.x;\n    float t = smoothstep(-.75, .75, circle / pix);\n\n    // Background color RGBA\n\tvec4 bg_color = vec4(0.0, 0.0, 0.0, 1.0);\n    // foreground color RGBA (circle)\n\tvec4 fg_color = vec4(1.0, 1.0, 1.0, 1.0);\n    \n\t// Blend the BG and FG colors\n\tfragColor = vec4(mix(fg_color, bg_color, t));\n}","name":"Image","description":"","type":"image"}]}