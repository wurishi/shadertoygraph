{"ver":"0.1","info":{"id":"stB3RD","date":"1623433140","viewed":105,"name":"Space war automata","username":"SnoopethDuckDuck","description":"I think this should go on forever (best in full screen)\nSquiggles make gliders and white patches.\nGliders and squiggles make more squiggles.\nWhite patches get destroyed after a while.\n\npress r to reset ","likes":4,"published":1,"flags":48,"usePreview":0,"tags":["cellularautomata"],"hasliked":0,"parentid":"7lSGRW","parentname":"Squiggle automata 2"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code forked from Inigo Quilez's game of life shader\n// https://www.shadertoy.com/view/XstGRf\n// Reset code stolen from somewhere else - sorry!\n// (Press R to reset shader)\n// + thanks Fabrice for the improvements\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\nfragColor.rgb = vec3[] ( \n                vec3(34,  32, 52),\n                vec3(69,  40, 60),\n                vec3(172, 50, 50),\n                vec3(223,113, 38),\n                vec3(255,182, 45),\n                vec3(251,242, 54),\n                vec3(255)) \n[ min( 7, int( 42. *  texelFetch( iChannel0, ivec2(fragCoord), 0 ).x) ) ] / 255.;\n\n\n\n//fragColor = vec4( 1. - step(3. * texelFetch( iChannel0, ivec2(fragCoord), 0 ).x ,0.2));\n/*\nfloat x = 6. *  texelFetch( iChannel0, ivec2(fragCoord), 0 ).x;\nx = min(x,1.);\nvec3 col = vec3(34.,32.,52.) / 255.;\nvec3 col2 = vec3(69.,40.,60.) / 255.;\nvec3 col3 = vec3(172.,50.,50.) / 255.;\nvec3 col4 = vec3(223.,113.,38.) / 255.;\nvec3 col5 = vec3(255.,182.,45.) / 255.;\nvec3 col6 = vec3(251.,242.,54.) / 255.;\n\n//vec3 col6 = vec3(1.);\nfloat m = 1. / 7.;\nif (x < m)\nfragColor = vec4(col,1.);\nelse if (x < 2. * m)\nfragColor = vec4(col2,1.);\nelse if (x < 3. * m)\nfragColor = vec4(col3,1.);\nelse if (x < 4. * m)\nfragColor = vec4(col4,1.);\nelse if (x < 5. * m)\nfragColor = vec4(col5,1.);\nelse if (x < 6. * m)\nfragColor = vec4(col6,1.);\nelse\nfragColor = vec4(1.);\n//fragColor = 1. - fragColor;\n*/\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define KEYBOARD iChannel1\n#define KEY_RESET 82\n//#define hash(p)  fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453)\n\nfloat Cell( in ivec2 p )\n{\n    // do wrapping\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    \n    // fetch texel\n    return texelFetch(iChannel0, p, 0 ).x;\n}\n\n\nfloat hash1( float n )\n{\n    return fract(sin(n)*138.5453123);\n}\n\nbool key_down(int key) {\n    return int(texelFetch(KEYBOARD, ivec2(key, 0), 0).x) == 1;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\nivec2 px = ivec2( fragCoord );\n    \n\nif (key_down(KEY_RESET) || iFrame==0) \n{    \nfloat d = length((fragCoord -.5* iResolution.xy ) / iResolution.y);\nfloat g = hash1(fragCoord.x * 13.0  + 10.131 * iTime + 100.19414 + hash1(fragCoord.y*73.1 + 1931.1));\ng =  step(0.85,g);\nfragColor = vec4(g, 0.0, 0.0, 0.0 );\nreturn;\n}\n    \n// center cell\nfloat e = Cell(px); \n\n// neighbour cells\nfloat t = Cell(px + ivec2(0,-1));\nfloat b = Cell(px + ivec2(0,1));\nfloat l = Cell(px + ivec2(-1,0));\nfloat r = Cell(px + ivec2(1,0));   \n\n// \"average\" of neighbours\nfloat k = 0.5 * max(t + b, l + r);\n\n// difference between \"average\" and center\nfloat j = abs(e - k);\n\nif (e < k - 0.3)\ne = 1. * k +  10000. * j * e * e * e; \nelse if (k > 0.01 && e > 0.46 && j < 0.5)\n{\n//if (j > k)\n//e = 0.;\n//else\n \n//e= k - 0.1 * e * j; // <- should get some stable swirly things\ne = k + 0.3 * j;\n}\nelse \ne = k;\ne -= 0.16 * j;\ne *= 0.99; // pretty much any number >0.445 looks interesting. \n//0.45 is like 0.5 but more intense\n//0.49 makes little gliders and fuses\n\n\ne = clamp(e,0.,1.);\n \nfragColor = vec4( e, 0.0, 0.0, 0.0 );\n}","name":"Buffer A","description":"","type":"buffer"}]}