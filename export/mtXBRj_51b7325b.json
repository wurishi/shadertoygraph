{"ver":"0.1","info":{"id":"mtXBRj","date":"1693571412","viewed":180,"name":"Fork Pixel Sort juk 008","username":"juk","description":"This is a variation of the Pixel Sorting shader by @cornusammonis here https://www.shadertoy.com/view/XdcGWf\n\nIt works on video by blending the sorted image to the incoming video by  a factor of 100 to 1.\n\nAlso uses real luminance equation.\n","likes":0,"published":1,"flags":34,"usePreview":0,"tags":["video","pixel","feedback","sorting"],"hasliked":0,"parentid":"XlGXzw","parentname":"Pixel Sorting for Video"},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 texel = 1. / iResolution.xy;\n    \n    float step_y = texel.y + sin(iTime*0.5) * 0.005;\n    vec2 s  = vec2(0.0, -step_y);\n    vec2 n  = vec2(0.0, step_y);\n\n    vec4 im_n =  texture(iChannel0, uv+n);\n    vec4 im =    texture(iChannel0, uv);\n    vec4 im_s =  texture(iChannel0, uv+s);\n    \n    // use luminance for sorting\n    float len_n = dot(im_n, vec4(0.299, 0.587, 0.114, 0.));\n    float len = dot(im, vec4(0.299, 0.587, 0.114, 0.));\n    float len_s = dot(im_s, vec4(0.299, 0.587, 0.114, 0.));\n    \n    if(int(mod(float(iFrame) + fragCoord.y, 2.0)) == 0) {\n        if ((len_s > len)) { \n            im = im_s;    \n        }\n    } else {\n        if ((len_n < len)) { \n            im = im_n;    \n        }   \n    }\n    \n    // blend with image\n    if(iFrame<1) {\n        fragColor = texture(iChannel1, uv);\n    } else {\n        fragColor = (texture(iChannel1, uv) + im * 99. ) / 100.;\n    }\n    \n}","name":"Buffer A","description":"","type":"buffer"}]}