{"ver":"0.1","info":{"id":"4fBXRt","date":"1706718032","viewed":872,"name":"[demotoy] Bajo el Radar","username":"Kali","description":"Press rewind button if music doesn't play or is out of sync. Details in the code comments.","likes":74,"published":1,"flags":40,"usePreview":1,"tags":["234324"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//        ___.                       ___            .___ ___________\n// ,___ _\\(   |._____________ __. __\\(__/___. ______\\|_  \\\\          )_. ________,\n// |%%% |     ||            //  |/          |/        /                | %%%%%%%%|\n// |%%% |    _||                |           |        _                 | %%%%%%%%|\n// |'_ _|    \\                 _|          _|        |                 |_ _ `%%%%|\n//  .\\)\\_______________________)|__________)|________|__________________/(/.\n// <------------------------------------------------------------------------diP->>\n//         l a t i t u d e  i n d e p e n d e n t  a s s o c i a t i o n\n// <<---------------------------------------------------------------------------->\n// \n//                                     L.I.A.\n// \n//                                    presents\n// \n//                                 \"Bajo el Radar\"\n// \n// \n//                                a Shadertoy demo\n// \n// \n// --------------------------------- Release Info --------------------------------\n// \n// \n//   For the final task of the Genuary 2024 event, Kali coded a demo on Shadertoy \n//   that encompasses the prompts of skeuomorphism, SDFs, shaders, and generative \n//   music (days 28, 29, 30, and 31 respectively).\n//\n//   Press rewind button if music doesn't play or is out of sync\n//\n//   What's Genuary? check genuary.art\n//\n// \n// ------------------------------------ Members -----------------------------------\n// \n//      Bitnenfer - Foco - Kali - Shining Monster - Riq - Uctumi - Mr. Roboto\n// \n// ---------------------------------- Greetings ----------------------------------\n// \n//   Thanks to Piter Pasma for Genuary, his support and contributions to the \n//   generative art community.\n//                                                                     \n// -------------------------------------------------------------------------------\n// \n//  \n//                         Signing off... The LIA crusaders\n\n\n\n#define PI 3.14159\n#define resolution iResolution.xy\n#define time iTime\n#define vTexCoord (gl_FragCoord.xy/iResolution.xy)\n#define tx iChannel0\n\nconst float max_rad=.03;\nconst float it=100.;\n\nuniform float force ;\n\n#define time iTime\n\n\nmat2 rot(float a){\n\tfloat s=sin(a);\n    float c=cos(a);\n    return mat2(c,s,-s,c);\n}\n\nfloat hash(vec2 p)\n{\n    p*=1342.;\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat rnd(float p)\n{\n    p*=123.;\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    return fract(2.*p*p);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord/iResolution.xy;\n\tmat2 spin=rot(2.39996);\n    vec2 p=vec2(0.,1.);\n    vec3 res=vec3(0.);\n    float ti=mod(time*.5,10.);\n    float rad_step=max_rad/it+hash(uv+ti)*.0003;\n\tfloat rad=0.;\n    float ru=step(18.,time)*smoothstep(21.,20.,time);\n    vec4 col=texture(iChannel0,uv+sin(time*20.)*ru*.03);\n    for (float i=0.;i<it; i++) {\n        rad+=rad_step;\n        p*=spin;\n        vec4 col=texture(iChannel0,uv+p*rad);\n        res+=smoothstep(.2,1.,max(col.r,max(col.g,col.b)))*col.rgb;\n    };\n    res/=it;\n    vec4 ff = vec4(col.rgb*.5+res*1.3,1.0)*1.4; \n    if (ru>0.) {\n        ff.rgb=ff.rrr*vec3(.5,1.,.3);\n        ff+=(hash(vTexCoord+(ti*20.))-.5)*.5;\n    }\n    ff+=step(21.,time)*smoothstep(21.5,21.0,time);\n    ff.rgb=mix(length(ff.rgb)*vec3(.5),ff.rgb,.8);\n    ff.rgb=clamp(ff.rgb,0.,1.);\n    fragColor = ff*min(1.,iTime*.2)*smoothstep(58.,54.,time);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI 3.14159\n#define resolution iResolution.xy\n#define mouse 1.\n#define time iTime\n#define vTexCoord (gl_FragCoord.xy/iResolution.xy)\n\nfloat det=.01;\nvec3 shipos;\nvec3 advship;\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\nmat3 lookat(vec3 dir) {\n\tdir=normalize(dir);vec3 rt=normalize(cross(dir,vec3(0.,1.,0.)));\n    return mat3(rt,cross(rt,dir),dir);\n}\n\nvec3 path(float t) {\n    vec3 p = vec3(sin(t*.01+cos(t*.02))*20., 20.*smoothstep(-.5,.5,sin(t*.01)), t);\n    p.xy*=smoothstep(12.,15.,time);\n    p.xy*=smoothstep(43.,38.,time)+.2;\n    return p;\n}\n\nfloat hash(vec2 p)\n{\n    p=floor(p*1000.);\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat rnd(float p)\n{\n    p*=1234.;\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    return fract(2.*p*p);\n}\n\nmat2 rot(float a)\n{\n    float s=sin(a),c=cos(a);\n    return mat2(c,s,-s,c);\n}\n\nfloat sdCappedCone( vec3 p, float h, float r1, float r2 )\n{\n  vec2 q = vec2( length(p.xz), p.y );\n  vec2 k1 = vec2(r2,h);\n  vec2 k2 = vec2(r2-r1,2.0*h);\n  vec2 ca = vec2(q.x-min(q.x,(q.y<0.0)?r1:r2), abs(q.y)-h);\n  vec2 cb = q - k1 + k2*clamp( dot(k1-q,k2)/dot2(k2), 0.0, 1.0 );\n  float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;\n  return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\nfloat sdRoundedCylinder( vec3 p, float ra, float rb, float h )\n{\n  vec2 d = vec2( length(p.xz)-2.0*ra+rb, abs(p.y) - h );\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rb;\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n  const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n  p = abs(p);\n  p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\n  vec2 d = vec2(\n       length(p.xy-vec2(clamp(p.x,-k.z*h.x,k.z*h.x), h.x))*sign(p.y-h.x),\n       p.z-h.y );\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdVerticalCapsule( vec3 p, float h, float r )\n{\n  p.y -= clamp( p.y, 0.0, h );\n  return length( p ) - r;\n}\n\nfloat opSmoothUnion( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nfloat opSmoothSubtraction( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h);\n}\n\nvec3 fcol;\nfloat l;\nfloat fractal(vec2 p) {\n    float m=100.; \n    l=100.;\n    vec2 c=vec2(100.);\n    p*=.35;\n    p.y*=.7;\n    p.y-=.5;\n    p.x=abs(p.x);\n    for (int i=0; i<5; i++) {\n    \tp=abs(p+.75)-abs(p-.75)-p;\n        p+=vec2(0.,2.);\n        p=p*2.5/clamp(dot(p,p),.2,1.)-1.5;\n        l=min(l,min(abs(p.x),abs(p.y)));\n        m=min(m,abs(p.x));\n        c=min(c,abs(p));\n    }\n    l=exp(-10.*l);\n    fcol=l*vec3(c.y,length(p)*.03,c.x)*abs(.5-fract(p.y*.1-time))*20.;\n    return l;\n}\n\nfloat dpla=100.;\nfloat plasma(vec3 p) {\n    vec3 ps=p;\n    p.z-=3.;\n    float d=length(p*vec3(.6,1.,1.))-.3;\n    p.x=abs(p.x)-1.3+max(0.,sign(p.y-.5))*.5;\n    p.y=abs(p.y-.5)-.3;\n    p.z+=.4;\n    d=min(d,length(p)-.15)-sin(time*70.)*.03;\n    p.z+=1.3;\n    p.xy*=rot(time*30.);\n    float hel=abs(p.x);\n    hel=max(hel,abs(p.y)-.1);\n    hel=max(hel,abs(p.z)-1.);\n    d=min(d,hel);\n    dpla=d;\n    return d;\n}\n\n\nfloat turbinas(vec3 p) {\n    p.yz*=rot(PI/2.);\n    p.x=abs(p.x)-1.3-min(0.,sign(p.z+.5))*.5;\n    p.z=abs(p.z+.5)-.3;\n    p.y-=1.5;    \n    float d=sdRoundedCylinder(p, 0.2, .2 ,1.);\n    d=max(d,-length(p.xz)+.3);\n    return d;\n}\n\n\nfloat wings(vec3 p) {\n    p.yz*=rot(PI/2.);\n    p.z+=.2;\n    p.z-=abs(p.x)*.1;\n    p.y*=3.;\n    p.y-=3.+abs(p.x);\n    p.z+=.5;\n    float d=sdHexPrism(p, vec2(3.,-.05-abs(p.x)*.03))-.2+l*.05;\n    d=max(d,abs(p.x)-3.);\n    p.y+=p.z*2.;\n    d=min(d,max(abs(p.z+.5)-1.,max(abs(p.x)-.05,abs(p.y)-1.5)));\n    return d*.5;\n}\n\n\nfloat id_fus;\nfloat fuselaje(vec3 p) {\n    float f=fractal(p.xz);\n    p.yz*=rot(PI/2.);\n    p.y*=.7;\n    vec3 ps=p;\n    p.xz*=1.+smoothstep(-3.,3.,p.y)*.5;\n    p.xz*=1.+smoothstep(1.,3.,p.y);\n    p.x=abs(p.x)-.4;    \n    p.x+=smoothstep(-0.,-3.,p.y)*.4;\n    p.z-=smoothstep(-0.,-4.,p.y)*.5;\n    p.z+=smoothstep(-2.,2.,p.y)*sign(p.z)*.4;\n    p.x+=smoothstep(1.5,1.,abs(p.y-1.))*.7;\n    p.x*=1.-smoothstep(0.5,1.,p.z)*.5*smoothstep(2.,1.,p.y);\n    float base=sdCappedCone(p, 2.2, 0.1, 2.)-.1+f*.02;\n    base=max(base,-length(p.xz)+2.*smoothstep(0.,3.,p.y))*.7;\n    base=max(base,p.y-2.2);\n    p=ps;\n    p.x*=1.+smoothstep(0.,-2.,p.y)*.3;\n    p.z+=1.+p.y*.6;\n    p.y+=1.3;\n    float cabin=sdVerticalCapsule(p, 1., .7)+f*.01;\n    cabin=max(cabin,-base);\n    p=ps;\n    p.x*=1.-smoothstep(-3.,3.,p.y)*.5;\n    p.z+=1.+p.y*.2;\n    p.z-=smoothstep(0.,3.,p.y);\n    p.z+=smoothstep(.2,0.,abs(p.x))*.2;\n    float turbo=sdVerticalCapsule(p, 1.5, .6)+sqrt(f)*.1;\n    float d=min(base,cabin);\n    d=min(d, turbo);\n    if (d==base) id_fus=0.;\n    if (d==turbo) id_fus=1.;\n    if (d==cabin) id_fus=2.;\n    return d*.5;\n}\n\nfloat id;\nvec3 pos;\nfloat spaceship(vec3 p) {\n    p-=shipos;\n    float bou=length(p)-4.;\n    if (bou>0.) return bou+.1;\n    p=lookat(advship)*p;\n    p.xy*=rot(advship.x);\n    p.xz*=rot(-advship.x*.3);\n    p.z*=.8;\n    pos=p;\n    id=0.;\n    float fuse=fuselaje(p);\n    float win=wings(p);\n    float tur=turbinas(p);\n    float pla=plasma(p);\n    float d=opSmoothUnion(fuse,win,.2);\n    if (abs(d-win)<.1) id=1.; \n    d=min(d,tur);\n    d=min(d,pla);\n    if (d==tur) id=2.;\n    if (d==pla) id=3.;\n    return d;\n}\n\nvec3 ot;\nvec3 pomo;\nfloat id2;\nfloat mothership(vec3 po) {\n    id2=0.;\n    ot=vec3(100.);\n    po.x-=10.;\n    po.y+=40.*smoothstep(10.,0.,time);\n    po.y+=10.*smoothstep(23.,25.,time);\n    po.xy-=path(po.z).xy;\n    if (po.y>34.) return po.y;\n    vec3 pp=po;\n    pomo=pp;\n    po*=.1;\n    po.z=abs(5.-mod(po.z,10.));\n    vec4 p=vec4(po,1.5);\n    float end=smoothstep(46.,41.,time);\n    for (int i=0; i<6; i++) {\n\t\tp.xz = abs(p.xz+1.)-abs(p.xz-1.)-p.xz;\n\t\tp=p*2./clamp(dot(p.xyz,p.xyz),.15,1.)-vec4(end+.5,.5,1.-end,0.);\n\t\tp.xy*=rot(.8*end);\n        p.yz*=rot(smoothstep(23.,27.,time)*end);\n        ot=min(ot,abs(p.xyz));\n    }\n    float fr=max(-po.x-4.,(length(max(vec2(0.),p.yz-3.)))/p.w);\n\tpp.y-=0.;\n    pp.x+=10.;\n    pp.x=abs(pp.x)-12.;\n    float tub=length(pp.xy)-.5;\n    tub*=.3;\n    float d=min(fr, tub);\n    if (d==tub) id2=1.;\n    d=min(d,max(-abs(po.x+1.)+4.,po.y+sin(po.x*.5)+cos(po.z)));\n    return d/.1*.5;\n}\n\nfloat cual;\nfloat de(vec3 p) {\n    cual=0.;\n    vec3 p1=p;\n    p1.y+=5.;\n    float ship=spaceship(p);\n    float moth=mothership(p1);\n    float d=min(ship,moth);\n    if (d==moth) cual=1.;\n    return d;\n}\n\nvec3 normal(vec3 p)\n{\n    vec2 e=vec2(0.,det);\n    return normalize(vec3(de(p+e.yxx),de(p+e.xyx),de(p+e.xxy))-de(p));\n}\n\nvec3 march(vec3 from, vec3 dir) \n{\n    vec3 skycol=vec3(.1,.3,.5)*smoothstep(.5,-.2,dir.y)*1.3;    \n    vec3 tdir=dir;\n    if (time<17.||time>39.) {\n        float j=smoothstep(11.,7.,time)+.1+smoothstep(15.,17.,time)*.2+step(47.,time)-smoothstep(47.,53.,time)*1.2;\n        float tt=(step(46.,time)*fract(time*2.*step(52.,time)))*480000.;\n        float ty=smoothstep(13.,17.,time)*.1;\n        skycol+=pow(max(dot(tdir, normalize(vec3(.3*j,0.15-ty,-1.))),0.),500000.-tt);\n        skycol+=pow(max(dot(tdir, normalize(vec3(-.25*j,0.15-ty,-1.))),0.),500000.-tt);\n        skycol+=pow(max(dot(tdir, normalize(vec3(-.1*j,0.2-ty,-1.))),0.),500000.-tt);\n    }\n    vec3 shipcol=vec3(.6,0.,0.);\n    vec3 plasmacol=vec3(1.5,1.,.5)*.9;\n    vec3 mothcol=vec3(.2,.4,.6);\n    float td=0.,d=.01,maxdist=300.,g=0.;\n    vec3 p=from,col=skycol;\n    for (int i=0; i<500; i++)\n    {\n        p+=dir*d;\n        d=de(p);\n        if (d<det || td>maxdist) break;\n        td+=d;\n        g+=exp(-15.*dpla)*.1;\n    }\n    vec3 ldir=normalize(vec3(.3,2.,-1.));\n    vec3 n=normal(p);\n    vec3 ref=reflect(dir,n);\n\n    if (d<det) \n    {\n        if (cual==0.) {\n            if (id==0.) {\n                fcol=fcol.bgr, col+=fcol*.7;\n                if(id_fus==0.||id_fus==1.) {\n                    col=shipcol;\n                    col+=fcol*.25;\n                    col+=smoothstep(.06,.04,abs(pos.x))*.8;\n                    col+=smoothstep(.06,.04,abs(abs(pos.x)-.8-pos.z*.12))*step(.4,pos.y)*.8;\n                }\n                if(id_fus==2.) {\n                    col=vec3(.1)+fcol*.3;\n                    col+=pow(max(0.,dot(ldir,ref)),50.)*skycol;\n                }\n            }\n            if (id==1.) {\n                col=shipcol+fcol*.1;\n            }\n            if (id==2.) {\n                col=shipcol;\n            }\n            if (id==3.) {\n                col=plasmacol;\n            } else {\n                col*=max(.3,dot(ldir,n));\n                col+=pow(max(0.,dot(ldir,ref)),20.)*.5;\n            }\n        } else {\n            ot=exp(-10.*ot);\n            col=mothcol-(ot.rrr+ot.ggg+ot.bbb)/3.+skycol*-max(0.,-n.y);\n            col.r+=ot.g*1.3;\n            col.g+=ot.g*.2;\n            col*=max(.2,dot(ldir,n))*.8;\n            col+=pow(max(0.,dot(ldir,ref)),20.)*.5;            \n            pomo.x=abs(pomo.x+10.)-10.;\n            if (id2==1.) col=pow(mothcol*1.4,vec3(2.))*1.5;\n            else col+=0.*exp(-3.*abs(pomo.x))*mothcol;\n        }\n    }\n    else\n    {\n        td=maxdist;\n\n    };\n    if (!(cual==1.&&id2==1.)&&td!=maxdist) col=mix(col,skycol,td/maxdist);\n    col+=g*plasmacol;\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t=time*50.;\n    vec2 uv = vTexCoord-.5;\n    uv.x*=resolution.x/resolution.y;\n    float fov=.3+smoothstep(0.,10.,time)*2.5;\n    fov-=smoothstep(7.,9.,time);\n    fov-=smoothstep(18.,21.,time)*step(time,21.);\n    fov-=smoothstep(39.,40.,time)*.5;\n    fov-=smoothstep(48.,52.,time)*.7;\n    vec3 dir=normalize(vec3(uv,fov));\n    vec3 from=path(t+0.);\n    if (time<12.||time>39.) from=path(t+40.);\n    if (time>15.&&time<19.) from=path(floor(t/250.)*250.+125.);\n    if (time>31.&&time<39.) from=path(floor(t/250.)*250.+125.);\n    if (time>42.5&&time<45.) from=path(floor(t/250.)*250.+125.);\n    from.y+=5.+sin(time*.5-2.*step(21.,time))*7.*step(time,50.)-6.*step(50.,time);\n    from.x+=6.;\n    vec3 adv=path(t+20.);\n    shipos=adv;\n    advship=normalize(shipos-path(t+25.));\n    shipos.z+=30.*smoothstep(49.,52.,time);\n    shipos.y+=20.*smoothstep(49.5,52.,time);\n    dir=lookat(adv-from)*dir;\n    dir.xz*=rot(-.2*smoothstep(6.,8.,time)*smoothstep(12.,10.,time));\n    dir.yz*=rot(-.2*smoothstep(6.,8.,time)*smoothstep(12.,10.,time));\n    dir.yz*=rot(-.2*step(15.,time)*smoothstep(17.,16.,time));\n    vec2 m=mouse/resolution-.5;\n    vec3 col=march(from, dir);\n    col=mix(col,texture(iChannel0,vTexCoord).rgb,cual==0.?.6:.4);\n    fragColor = vec4(col,1.0);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define st(a) smoothstep(0.005,0.0,a)\n\nfloat hash(float n){\n    return fract(cos(n*89.42)*343.42);\n}\n\nfloat noise(float a) {\n    float fr=fract(a);\n    float fl=floor(a);\n    return mix(hash(fl),hash(fl+1.),fr);\n}\n\nmat2 rot(float a) {\n    float s=sin(a),c=cos(a);\n    return mat2(c,s,-s,c);\n}\n\nvec3 gauge(vec2 p, float a) {\n    vec3 colg=vec3(.2,1.,.5);\n    vec3 cola=vec3(1.,1.,.3);\n    vec3 colr=vec3(1.2,.2,.0);\n    vec3 col=colg;\n    if (a>.5) col=cola;\n    if (a>.8) col=colr;\n    vec3 c=vec3(0.);\n    float disco=length(p)-.3;\n    c+=st(disco)*.05;\n    float luz=length(p)-.28;\n    c+=col*st(luz)*smoothstep(.6,-.6,p.y);\n    p.y+=.12;\n    vec2 ps2=p;\n    p=vec2(atan(p.x,p.y)*.2,length(p)-.17);\n    p.y-=.07;\n    vec2 ps=p;\n    p.x-=.03;\n    p.x=fract(p.x*(1.-p.x*2.)*50.);\n    c-=step(p.x,.5+p.x*.2)*step(abs(p.y),.015+ps.x*(1.+ps.x)*.03)*step(abs(ps.x),.2);\n    p=ps;\n    p.y+=.04;\n    c-=step(abs(p.y),.003)*step(abs(ps.x+.002),.205);\n    c-=step(abs(p.y),.003)*step(abs(ps.x+.002),.205);\n    c-=step(abs(p.y+.03),.03)*step(abs(ps.x+.002),.205)*step(0.1,p.x);\n    p.y+=.06;\n    c-=step(abs(p.y),.003)*step(abs(ps.x+.002),.205)*step(0.,p.x);\n    p.y-=.03;\n    p.x=fract(p.x*10.);\n    c-=step(.9,p.x-p.y)*step(abs(p.y),.03)*step(abs(ps.x),.21);    \n    p=ps;\n    vec2 pr=p+vec2(.2-.4*a,0.);\n    float agu=step(abs(pr.x)+pr.y*.1,.01)*step(abs(pr.y+.12),.16);\n    c=mix(c,vec3(.3,.0,.0),agu);\n    c-=step(p.y,-.13);\n    p=ps2;\n    c-=step(p.y,0.)*st(luz)*.75;\n    float icon=length(p)-.09;\n    c=mix(c,col*.6,st(abs(length(p)-.09)-.003));\n    c=mix(c,col*.6,st(abs(length(p)-.07)-.002));\n    c=mix(c,col*.6,st(abs(length(p)-.05)-.002));\n    c=mix(c,col*.6,st(abs(length(p)-.03)-.002));\n    ps=p;\n    p.y+=.06;\n    c=mix(c,col,st(length(p)-.01)*step(.5,fract(iTime/3.14159*2.)));\n    p=ps;\n    p*=rot(-iTime*4.+3.);\n    c=mix(c,col,st(abs(p.x))*st(icon)*step(p.y,0.));\n    return c;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = fragCoord/iResolution.xy-.5;\n    uv.x*=iResolution.x/iResolution.y;\n    uv.y+=.34;\n    uv.x-=.73;\n    uv*=2.5;\n    float a=0.;\n    a+=smoothstep(6.5,7.,iTime)*.5;\n    a-=smoothstep(19.,20.,iTime)*.3;\n    a+=smoothstep(43.,45.,iTime)*.49;\n    a+=smoothstep(47.,49.,iTime)*.2;\n    //a=.8;\n    a+=noise(iTime*10.)*.15;\n    a=clamp(a,0.,1.);\n    vec3 col = gauge(uv, a);\n    for (float i=-3.;i<3.;i++) {\n        for (float j=-3.;j<3.;j++) {\n            vec2 p=uv+vec2(i,j)*.25/iResolution.xy;\n            col+=gauge(p, a);\n        }\n    }\n    col*=.03;\n    vec3 prev=texture(iChannel0,fragCoord/iResolution.xy).rgb;\n    col=mix(prev,col,.8*st(length(uv)-.3));\n    fragColor = vec4(col,1.);\n}\n\n","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define bpm 30.\n#define notes 16.\n#define tick 60./bpm\n#define tickcount ti*tick\n#define note tick/notes\n#define notecount ti*notes\n#define comp notecount/notes\n\n\n#define C  32.703\n#define CS 34.648\n#define D  36.708\n#define DS 38.891\n#define E  41.203\n#define F  43.654\n#define FS 46.249\n#define G  48.999\n#define GS 51.913\n#define A  55.0\n#define AS 58.270\n#define B  61.735\n\nfloat ti=0.;\n\nfloat noise( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\n\n\nfloat kick(float t, float b, float f, float o) {\n\tt=mod(t-o*tick/notes,b/60.);\n    return (sin(.3+t*f))*exp(-5.0*t);\n}\n\nfloat snare(float t, float b, float f, float o) {\n\tt=mod(t-o*tick/notes,b/60.);\n    return (sin(.1+t*f*10.)+noise(t*f))*exp(-15.0*t);\n}\n\nfloat hithat(float t, float b, float f, float o) {\n\tt=mod(t-o*tick/notes,b/60.);\n    return noise(t*f)*exp(-25.0*t);\n}\n\nfloat bass(float t, float b, float f, float o) {\n\tt=mod(t-o*tick/notes,b/60.);\n    return exp(-.3*max(0.,1.-t))*clamp((.5-mod(t*f,1.)),-.1,.1)*exp(-50.0*t*t)*5.;\n}\n\nfloat chords(float t, float b, float f, float o) {\n\tt+=noise(t*.21358)*.0002;\n    t=mod(t-o*tick/notes,b/60.);\n    float c=min(1.,sqrt(abs(t))*.5)*clamp(sin(t*f*50.+sin(t*f*50.)*10.),-.4,.4)*exp(-35.0*t*t);\n    t-=.5;\n\tc+=min(1.,sqrt(abs(t))*.5)*clamp(sin(t*f*50.+sin(t*f*50.)*10.),-.4,.4)*exp(-35.0*t*t)*.5;\n    return c*.7;\n\n}\n\nfloat lead(float t, float b, float f, float o) {\n    t=mod(t-o*tick/notes,b/60.);\n\tt*=3.2;\n\tt+=noise(ti*.25)*.002;\n    float c=(1.-mod(t*f*10.,2.))+(1.-mod(t*f*5.,2.));\n\tc=smoothstep(-.5,.5,clamp(c,-.5,.5));\n    c*=max(0.5,sin(t*note*128.));\n    return c*.2;\n\n}\n\n\n\nfloat bassnotes1(float n) {\n\n\tfloat s=0.;\n    s=C*step(0.,n)*(1.-step(2.,n));\n    s+=C*step(6.,n)*(1.-step(8.,n))*2.;\n    s+=D*step(8.,n)*(1.-step(10.,n))*2.;\n    s+=D*step(12.,n)*(1.-step(14.,n));\n    s+=D*step(14.,n)*(1.-step(15.,n))*2.;\n    return s;\n\n}\n\nfloat leadnotes(float n) {\n\n\tfloat s=0.;\n    s=D*step(0.,n)*(1.-step(2.,n));\n    s+=E*step(2.,n)*(1.-step(4.,n));\n    s+=A*.5*step(4.,n)*(1.-step(5.,n));\n    s+=G*.5*step(5.,n)*(1.-step(6.,n));\n    s+=C*step(6.,n)*(1.-step(8.,n));\n    s+=E*.5*step(8.,n)*(1.-step(16.,n));\n    s+=D*step(16.,n)*(1.-step(18.,n));\n    s+=E*step(18.,n)*(1.-step(20.,n));\n    s+=A*.5*step(20.,n)*(1.-step(21.,n));\n    s+=G*.5*step(21.,n)*(1.-step(22.,n));\n    s+=F*.5*step(22.,n)*(1.-step(26.,n));\n    s+=C*.5*step(26.,n);\n    \n    \n    return s;\n\n}\n\n\n\n\nvec2 mainSound( in int samp,float time)\n{\n    \n    \n    float basss;\n\t//time+=20.;\n    ti=time;\n    float s=0.;\n    s+=fract(time*500.)*.2*step(.5,fract(time*5.))*step(48.,time);\n\tfloat ch=0.;\n     if (comp<21.) {\n    \tch=chords(time,bpm,D,0.);\n\t\tch+=chords(time,bpm,F,1.);\n\t\tch+=chords(time,bpm,A,2.);\n    } else if (comp>25.) {\n        ch=chords(time,bpm,F,0.);\n\t\tch+=chords(time,bpm,A,1.);\n\t\tch+=chords(time,bpm,C,2.);\n\t\tch+=chords(time,bpm,mod(comp,4.)>2.?E:D,3.);\n\t\tch*=min(1.,(comp-25.)*.1);\n    } else ch=0.;\n    if (comp>5.) kick(time,bpm,100.,0.)*2.;\n\tif (comp>7.) s+=kick(time,bpm*4.,300.,2.);\n\tif (comp>2.) s+=snare(time,bpm*2.,50.,4.)*.3;\n\tif (comp>9.) s+=snare(time,bpm*8.,80.,2.)*.2;\n\tif (comp>11.) s+=snare(time,bpm*8.,50.,6.)*.2;\n\tif (comp>0.) s+=hithat(time,bpm,50.,0.)*.15;\n\tif (comp>2.) s+=hithat(time,bpm,10.,2.)*.15;\n\tif (comp>21.) s+=hithat(time,bpm*.5,100.,1.)*.1;\n\tfloat ll=lead(time,bpm,leadnotes(comp-23.),0.)*.5\n        \t\t\t+lead(time,bpm,leadnotes(comp-24.),0.)*.3;\n\t\n    if (comp>23.) s+=ll;\n    if (comp>30.) time+=noise(ti*.15)*.002;\n    if (comp>21.) basss=bass(time,bpm*.5,bassnotes1(mod(notecount,16.)),0.)*.7; \n    \t\t\telse basss=bass(time,bpm*.5,D,0.)*min(1.,time*time*.01)*.5;\n    if (comp>4.) s+=basss;\n    if (comp>7.) s+=ch;\n    if (abs(floor(comp)-19.)<2.) s=basss*.5+sin(ti*ti*ti*1000.)*.05;\n    if (comp>52.) s=(ll+basss+sin(sin(ti*ti*.1+1.5+noise(ti*.5)*.001)*1000.)*.1)*exp(-.4*(comp-52.));\n   \n    s*=min(1.,ti*.3);\n    return vec2(sin(tickcount*4.),cos(tickcount*4.))*s;\n}","name":"Sound","description":"","type":"sound"}]}