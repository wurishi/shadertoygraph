{"ver":"0.1","info":{"id":"DsccWN","date":"1695049812","viewed":74,"name":"sound -super-saw-test","username":"jorge2017a2","description":"sound -super-saw-test","likes":5,"published":1,"flags":8,"usePreview":0,"tags":["test","sound","tile","supersaw"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//por jorge2017a2\n//por JorgeFloresP.\n\n//referencia\n//https://iquilezles.org/articles/distfunctions2d\n///\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(0.8),b,d)\n#define S2(d,b) smoothstep(6.0*antialiasing(0.5),b,d)\n#define PI     3.14159265\n#define TWO_PI 6.28318530\n\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}    \n\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n\n\nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b;  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);  }\n\nfloat sdCircle( vec2 p, float r )\n{ return length(p) - r;}\n\n\nvec3 mozaico00(vec2 p, vec3 col, vec3 colIn)\n{\nfloat r1=0.2;\nvec2 pos;\npos=vec2(1.18,2.96);\nfloat d1= sdCircle(p-pos,r1);\n\n\nfloat r2=0.2;\n pos=vec2(1.81,2.97);\nfloat d2= sdCircle(p-pos,r2);\n\nfloat r3=0.2;\n pos=vec2(1.18,3.44);\nfloat d3= sdCircle(p-pos,r3);\n\nfloat r4=0.2;\n pos=vec2(1.81,3.44);\nfloat d4= sdCircle(p-pos,r4);\n\n\nfloat r5=0.2;\n pos=vec2(1.81,2.48);\nfloat d5= sdCircle(p-pos,r5);\n\nfloat r6=0.2;\npos=vec2(1.18,2.48);\nfloat d6= sdCircle(p-pos,r6);\n\npos=vec2(1.5,2.96);\nvec2 med=vec2(0.315,0.48);\nfloat d7= sdBox(p-pos, med );\n\nfloat dt;\n    dt=d7;\n    dt=min(dt,d1);\n    dt=min(dt,d2);\n    dt=differenceSDF(dt,d3);\n    dt=differenceSDF(dt,d4);\n    dt=differenceSDF(dt,d5);\n    dt=differenceSDF(dt,d6);\n\n    col= DrawFigBorde(colIn, col, dt);\n    \n return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n    float t=-iTime;\n    uv-=vec2(-0.65+cos(t),-1.5+ 1.0*sin(t));\n    float esc=2.0;\n    uv*=esc;\n    vec2 uv0=uv;\n    //vec3 col=vec3(1.0);\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    col=mozaico00(uv,col, vec3(0.0,1.0,0.0)); //centro\n    float x,y,k;\n    vec2 ps;\n   \n    \n    for(x=-5.0; x<5.0;x++)\n    {\n     for(y=-5.0; y<5.0;y++)\n     {\n      ps=vec2(x*1.32,y*1.0);k++;  \n      col=mozaico00(uv+ps,col, vec3(0.0,1.0,0.0));\n     }     \n    }\n    \n    col=pow(col,  vec3(0.554545));\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//por JorgeFloresP.\n//super saw----Referencia\n///---- Porter Robinson - Language Cover\n///Created by MysteryPancake in\n///https://www.shadertoy.com/view/ddfXRX\n\n//Referencia : Iq ,gaz , otros;\n\n\nconst float BPM = 128.0;\nconst float STEP =1.0 ;// 60.0 / BPM;  //60.0/128.0=0.46875\nconst float LOOPSTEPS = 96.0;\n\nconst float MIDIOFFSET = 69.0;\n\n\nconst float PI = 3.1415926;\nconst float TAU = 6.28318530;\n#define PIH (PI*.5)\n\n\n#define NOTE(note, start, end) if (time >= start * STEP && time < end * STEP) result += note;  \n\n#define NOTE_SAW(note, start, end) NOTE(superSaw(noteFreq(note), time, voices, detune) * amplitude, start, end);\n#define NOTE_SINE(note, start, end) NOTE(superSine(noteFreq(note), time - start * STEP, voices, detune) * amplitude, start, end);\n#define NOTE_BASSVI(note, start, end) NOTE(bassvi(noteFreq(note), time - start * STEP) * amplitude, start, end);\n#define V vec3(0.,1.,-1.)\n\n#define NOTE_BASS(note, start, end) NOTE(sine(noteFreq(note), time - start * STEP, 0.0, fade) * amplitude, start, end);\n\n// 1D hash, from https://www.shadertoy.com/view/4djSRW\nfloat hash(float p) {\n\tp = fract(p * 0.2031);\n\tp *= p + 66.66;\n\tp *= p + 33.33;\n\treturn fract(p*1.1);\n}\n\n//gaz\n#define osc_sin(x)sin((x)*TAU)\n#define osc_saw(x)(1.-fract(x)*2.)\n#define osc_sqr(x)sign(0.5-fract(x))\n#define osc_tri(x)(asin(sin((x)*PI))/PIH)\nfloat noize(float t,  float a, float b){\n    float g=fract(cos(t*exp2(a))*exp2(b))+6.0;\n    return exp(-0.08*g*g) *40.0-1.;\n}\n\nfloat noize01(float t,  float a, float b){\n    float g=fract(cos(t*exp2(a))*exp2(b))+6.0;\n    return exp(-0.08*g*g) *40.0-1.;\n}\n\nfloat kick(float t)\n{  return clamp(1.5*asin(cos(320.0*t-30.0*exp(-40.0*t))),-1.,1.)*exp(-4.*t);}\n\nfloat kick2(float t)\n{ return clamp(1.5*asin(cos(620.0*t-30.0*exp(-40.0*t))),-1.,1.)*exp(-4.*t); }\n\nfloat snare(float t)\n{   float n=noize(t,10.,10.)*exp(-t*10.);\n    float f=t*160.,a=.3*osc_tri(1.2*f)*exp(-t*3.);\n    float b=.05*osc_sin(10.*f+a)*exp(-t*3.);\n    float c=osc_sin(f+b)*exp(-t*15.), z;\n    return n+c;\n}\n\nfloat snare2(float t)\n{   float n=noize(t,10.,10.)*exp(-t*10.);\n    float f=t*260.,a=.3*osc_tri(1.2*f)*exp(-t*3.);\n    float b=.05*osc_sin(10.*f+a)*exp(-t*3.);\n    float c=osc_sin(f+b)*exp(-t*15.), z;\n    return n+c;\n}\n\n\nfloat snare3(float t)\n{   float n=noize(t,10.,10.)*exp(-t*10.);\n    float f=t*160.;\n    float a=.3*osc_tri(1.2*f)*exp(-t*3.);\n    float b=.05*osc_sin(10.*f+a)*exp(-t*3.);\n    float c=osc_tri(f+b)*exp(-t*15.), z;\n    return n+c;\n}\n\n\nfloat hihat01(float t)\n{ return noize01(t,10.,18.)*exp(-t*15.);}\n\n\n\n\n// saw wave iq\nfloat sawRaw( in float p, in float dpdt )\n{   float x = mod(p,TAU)/TAU;\n    return 2.0*x-1.0;\n}\n\n// square wave iq\nfloat squareRaw( in float p, in float dpdt )\n{   float t = fract(p/TAU);\n    return sign(0.5-t);\n}\n///-------\n\n\nvec2 bassvi( float _freq, float _phase ) {\n  if ( _phase < 0.0 ) \n  { return V.xx; }\n  vec2 p = _freq * vec2( 0.999, 1.001 ) * _phase * TAU;\n  float dl = exp( -_phase * 1.0 );\n  float ds = exp( -_phase * 14.0 );\n  return sin(\n    p +\n    sin( p ) * 1.5 * dl +\n    sin( p + sin( p * 10.0 ) * 2.5 * ds ) * 3.0 * ds +\n    sin( p + sin( p * 18.0 ) * 1.5 * ds ) * 0.5 * dl\n  ) * 0.5 * dl;\n}\n\n//-------\n\n// For sawtooth synths\nfloat saw(float freq, float time, float phase) \n{\treturn fract(phase + freq * time) * 2.0 - 1.0; }\n\n// For lead whistle\nfloat sine(float freq, float time, float phase, float fade) {\n\treturn sin(freq * (time + phase) * TAU) * exp(-fade * time);\n}\n\n\n\n// For cymbals\nvec2 noiseHit(float time, float fade) {\n\treturn (vec2(hash(time * 512.0), hash(time * 1024.0)) - 0.5) * exp(-fade * time);\n}\n\n// Multiple saws detuned to make a unison effect\nvec2 superSaw(float freq, float time, float voices, float detune) {\n    vec2 result = vec2(0.0);\n    // See https://www.shadertoy.com/view/mdlSRj\n    for (float i = -voices; i <= voices; i++) {\n        float frequency = freq + i * detune;\n        result.x += saw(frequency, time, hash(2.0 * i));\n        result.y += saw(frequency, time, hash(2.0 * i + 1.0));\n    }\n    return result / voices / 2.0;\n}\n\n// Multiple sines detuned to make a unison effect\nvec2 superSine(float freq, float time, float voices, float detune) {\n    vec2 result = vec2(0.0);\n    // See https://www.shadertoy.com/view/mdlSRj\n    for (float i = -voices; i <= voices; i++) {\n        float frequency = freq + i * detune;\n        result.x += sine(frequency, time, hash(2.0 * i) * PI, 1.5);\n        result.y += sine(frequency, time, hash(2.0 * i + 1.0) * PI, 1.5);\n    }\n    return result / voices / 2.0;\n}\n\n// From https://www.shadertoy.com/view/sls3WM\nfloat coloredNoise(float time, float freq, float Q) {\n    // Forgot to remap the hash to -1, 1, whoops\n    return sin(TAU * freq * fract(time)) * hash(time * Q);\n}\n\n\n// MIDI note to frequency formula\nfloat noteFreq(float note) {\n\treturn 440.0 * exp2((note - MIDIOFFSET) / 12.0);\n}\n\nvec2 leadBass(float time, float voices, float detune, float amplitude) {\n    time = mod(time, STEP * 16.0);\n    vec2 result = vec2(0.0);\n    NOTE_SAW(57.0, 0.0, 2.5);\n    NOTE_SAW(38.0, 0.0, 2.5);\n    NOTE_SAW(57.0, 2.5, 6.5);\n    NOTE_SAW(38.0, 2.5, 6.5);\n    NOTE_SAW(57.0, 6.5, 8.0);\n    NOTE_SAW(38.0, 6.5, 8.0);\n    NOTE_SAW(61.0, 8.0, 9.5);\n    NOTE_SAW(42.0, 8.0, 9.5);\n    NOTE_SAW(59.0, 9.5, 10.5);\n    NOTE_SAW(40.0, 9.5, 10.5);\n    NOTE_SAW(59.0, 10.5, 12.0);\n    NOTE_SAW(40.0, 10.5, 12.0);\n    NOTE_SAW(56.0, 12.0, 13.5);\n    NOTE_SAW(37.0, 12.0, 13.5);\n    NOTE_SAW(57.0, 13.5, 14.5);\n    NOTE_SAW(38.0, 13.5, 14.5);\n    NOTE_SAW(57.0, 14.5, 16.0);\n    NOTE_SAW(38.0, 14.5, 16.0);\n    return result;\n}\n\n\nvec2 bassvi(float time, float fade, float amplitude) {\n    time = mod(time, STEP * 16.0);\n    vec2 result = vec2(0.0);\n    NOTE_BASSVI(38.0, 0.5, 1.0);\n    NOTE_BASSVI(38.0, 1.0, 1.5);\n    NOTE_BASSVI(38.0, 1.5, 2.0);\n    NOTE_BASSVI(38.0, 2.5, 3.0);\n    NOTE_BASSVI(38.0, 3.0, 3.5);\n    NOTE_BASSVI(38.0, 3.5, 4.0);\n    NOTE_BASSVI(38.0, 4.0, 4.5);\n    NOTE_BASSVI(38.0, 4.5, 5.0);\n    NOTE_BASSVI(38.0, 5.0, 5.5);\n    NOTE_BASSVI(38.0, 5.5, 6.0);\n    NOTE_BASSVI(38.0, 6.5, 7.0);\n    NOTE_BASSVI(38.0, 7.0, 7.5);\n    NOTE_BASSVI(38.0, 7.5, 8.0);\n    NOTE_BASSVI(42.0, 8.0, 8.5);\n    NOTE_BASSVI(42.0, 8.5, 9.0);\n    NOTE_BASSVI(42.0, 9.0, 9.5);\n    NOTE_BASSVI(40.0, 9.5, 10.0);\n    NOTE_BASSVI(40.0, 10.5, 11.0);\n    NOTE_BASSVI(40.0, 11.0, 11.5);\n    NOTE_BASSVI(40.0, 11.5, 12.0);\n    NOTE_BASSVI(37.0, 12.0, 12.5);\n    NOTE_BASSVI(37.0, 12.5, 13.0);\n    NOTE_BASSVI(37.0, 13.0, 13.5);\n    NOTE_BASSVI(38.0, 13.5, 14.0);\n    NOTE_BASSVI(38.0, 14.5, 15.0);\n    NOTE_BASSVI(38.0, 15.0, 15.5);\n    NOTE_BASSVI(38.0, 15.5, 16.0);\n    return result;\n}\n\nfloat gen( float time )\n{ return sin(time*440.+10.0*cos(time*2.0));}\n\nvec2 mainSound( int samp, float ptime )\n{\n    float ti = mod(ptime, STEP * 16.0);\n    vec2 res = vec2(0.0);\n    float sidechain = 1.0;\n    vec2 result;\n    result += bassvi(ti, 6.0, 0.6 * sidechain);\n    result += leadBass(ti, 0.5, 5.5, 0.35);\n    res=result;\n    \n    float t2 =mod(ptime, 2.0);\n    res+= snare3(t2)+snare(t2+3.0*sin(t2));\n    \n    float t3 =mod(ptime, 2.);\n    res+=  kick2(t3);\n\n    return res*0.5;\n}","name":"Sound","description":"","type":"sound"}]}