{"ver":"0.1","info":{"id":"cltfWn","date":"1701143006","viewed":25,"name":"rotate image","username":"peixu001","description":"rotate","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["rotate"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rotate(vec2 uv, float scale, float angle){\n    vec2 center = vec2(0.5, 0.5);\n    vec2 offset = vec2(0.0, 0.0);\n    vec2 rotatedUV = vec2(cos(angle) * (uv.x - center.x) - sin(angle) * (uv.y - center.y) + center.x,\n                           sin(angle) * (uv.x - center.x) + cos(angle) * (uv.y - center.y) + center.y);\n    vec2 scaledUV = rotatedUV * scale + offset;\n    return scaledUV;\n}\nmat2 rot(float angle){\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\n\tmat2 m = mat2(c, -s, s, c);\n\treturn m;\n}\nvec3 methed1(vec2 fragCoord){\n    // This solution can achieve rotation without deformation and manual rotation control;\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    float angle = iMouse.x/(iResolution.x * 0.158);\n    vec3 col = vec3(0.0);\n    if (iMouse.xy ==vec2(0.0)){\n        col = texture(iChannel0, uv).rgb;\n    }else{\n        uv *= rot(angle);\n        col = texture(iChannel0, uv).rgb;\n    }\n    return col;\n}\nvec3 methed2(vec2 fragCoord){\n  //This operation is based on methed1. The x-axis operates the rotation direction and the y-axis operates the scale.\n    vec2 uv = fragCoord/iResolution.y;\n    float scale = (iMouse.y/iResolution.y) * 2.5;\n    float angle = iMouse.x/(iResolution.x * 0.158);\n    vec3 col = vec3(0.0);\n    if (iMouse.xy ==vec2(0.0)){\n        col = texture(iChannel0, uv).rgb;\n    }else{\n        uv = rotate(uv, scale, angle);\n        col = texture(iChannel0, uv).rgb;\n    }\n    return col;\n}\nvec3 methed3(vec2 fragCoord){\n    // This solution can achieve rotation without deformation\n    vec2 uv = fragCoord/iResolution.xy;\n    float ratio = iResolution.x/iResolution.y;\n    uv = rot(iTime) * vec2((uv.x * 2.0 -1.0) * ratio, uv.y * 2.0 -1.0);\n    uv = vec2((uv.x/ratio + 1.0)/2.0, (uv.y + 1.0)/2.0);\n    float matt = step(uv.x, 1.0) * step(uv.y, 1.0) * step(0.0, uv.x) * step(0.0, uv.y); // Do not want border padding to appear\n    vec3 col = texture(iChannel0, uv).rgb * matt;\n    return col;\n    \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.0);\n    //col = methed1(fragCoord);\n    //col = methed2(fragCoord);\n    col = methed3(fragCoord);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}