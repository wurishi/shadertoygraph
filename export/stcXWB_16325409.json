{"ver":"0.1","info":{"id":"stcXWB","date":"1639682849","viewed":141,"name":"Fork of SDF SVG viewer","username":"TheoHonohan","description":"Fork of FabriceNeyret2's SVG viewer\n\nOriginal desc:\n===\n\n\nSVG viewer.    Copy-Paste-adapt your SVG data: see comments \nslow GPU: decrease N.\n\nV2: more robust interior detection ( thanks to  TimoKinnunen ! )\n\nNB: 3260 chars: 1700 for data 1560 for code.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["bezier","logo","svg"],"hasliked":0,"parentid":"ldXyRn","parentname":"svg viewer v2 / nVidia logo"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// improved version of https://www.shadertoy.com/view/MlVSWc\n// === SVG Player ====      short spec: https://www.w3.org/TR/2008/REC-SVGTiny12-20081222/paths.html\n\n#define N 20.  // splines discretization. Lower it on slow GPUs\n// absolute main SVG commands\n#define M2(x,y)             x0 = _x = x;   y0 = _y = y;\n#define L(x,y)             d = min(d, line(uv, vec2(_x,_y), vec2(x,y)) ); _x=x,_y=y;\n#define C(x1,y1,x2,y2,x,y) d = min(d, bezier(uv, vec2(_x,_y), vec2(x1,y1),vec2(x2,y2), vec2(x,y)) ); _x=x,_y=y; \n#define H(x)               d = min(d, line(uv, vec2(_x,_y), vec2(x,_y)) ); _x=x;\n#define V(y)               d = min(d, line(uv, vec2(_x,_y), vec2(_x,y)) ); _y=y;\n#define Z                  d = min(d, line(uv, vec2(_x,_y), vec2(x0,y0)) );\n// relative main SVG commands\n#define m(x,y)             M2(_x+x,_y+y)\n#define l(x,y)             L(_x+x,_y+y)\n#define c(x1,y1,x2,y2,x,y) C(_x+x1,_y+y1,_x+x2,_y+y2,_x+x,_y+y)\n#define h(x)               H(_x+x)\n#define v(y)               V(_y+y)\n#define z1                  Z\n\n#define style(f,c)         fill=f; S=1.; COL = mod(vec4((c)/65536,(c)/256,c,1),256.)/255.;\n#define path(cmd)          d = 1e38; cmd; return draw(d,O);\n#define path2(cmd)         d = 1e38; cmd;\n\nfloat bezier(vec2,vec2,vec2,vec2,vec2);\nfloat line(vec2,vec2,vec2);\nvec3  draw(float,inout vec4);\nconst float FILL=1., CONTOUR=0.;\nvec4 COL = vec4(0); float fill=FILL, S=1., contrast=1.;  // style state\nfloat d = 1e38;   // global to allow unique distance field\n\n// === SVG drawing ===============================================================\nvec3 SVG(vec2 uv, inout vec4 O) \n{\n    float _x, _y, x0, y0; // d = 1e38; \n    uv *= 400.;                             // scaling\n    contrast = 1.;\n\n// Copy-paste your SVG pathes here.  Slight adaptations : \n//  - add () around command params and  comma between points, \n//  - split polylines and polybéziers into sets of 1 vs 3 pairs of coordinates\n//  - path( style( FILL/CONTOUR, color(hexa) )\n//          commands \n//        )    \n\n// Replaced logo with SVG map pin with hole\n\n    path( style(FILL,0xFF0000)  // Location\n    M2(69.5944, 60.6173)\n    C(86.387, 43.7942, 113.613, 43.7942, 130.406, 60.6173)\n    C(139.733, 69.9617, 143.879, 82.5309, 142.845, 94.7424)\n    C(141.151, 114.739, 125.487, 130.665, 111.163, 144.721)\n    C(106.882, 148.921, 102.792, 152.0, 100.0, 152.0)\n    C(97.2082, 152, 93.1181, 148.921, 88.8374, 144.721)\n    C(74.5132, 130.665, 58.8487, 114.739, 57.1549, 94.7424)\n    C(56.1205, 82.5309, 60.267, 69.9617, 69.5944, 60.6173)\n    M2(117.0, 94.0)\n    C(117.0, 103.389, 109.389, 111.0, 100.0, 111.0)\n    C(90.6112, 111.0, 83.0, 103.389, 83.0, 94.0)\n    C(83.0, 84.6112, 90.6112, 77.0, 100.0, 77.0)\n    C(109.389, 77.0, 117.0, 84.6112, 117.0, 94.0)\n    Z\n    )\n}\n\n\n\n// --- spline interpolation ( inspired from revers https://www.shadertoy.com/view/MlGSz3 )\nvec2 interpolate(vec2 G1, vec2 G2, vec2 G3, vec2 G4, float t)\n{\n    vec2 A = G4-G1 + 3.*(G2-G3),\n         B = 3.*(G1-2.*G2+G3),\n         C = 3.*(G2-G1),\n         D = G1;\n    return t * (t * (t * A + B) + C) + D;\n}\n\n\nfloat line(vec2 p, vec2 a, vec2 b) \n{\n\tvec2 pa = p - a, ba = b - a,\n\t     d = pa - ba * clamp(dot(pa, ba) / dot(ba, ba) , 0., 1.); // distance to segment\n    if  ( (a.y>p.y) != (b.y>p.y) &&\n           pa.x < ba.x * pa.y / ba.y ) S = -S;     // track interior vs exterior\n\treturn dot(d,d); //length(d);                  // optimization by deferring sqrt\n}\n// interior detection (sign S): ( thanks TimoKinnunen https://www.shadertoy.com/view/4lySWd )\n// see http://web.archive.org/web/20161116163747/https://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html - previously on https://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n\nfloat bezier( vec2 uv, vec2 A, vec2 B, vec2 C, vec2 D)    \n{\n    //float d = 1e5;                               // for global field\n    vec2 p = A;\n    for (float t = 1.; t <= N; t++) {\n        vec2 q = interpolate(A, B, C, D, t/N);\n        float l = line(uv, p, q);\n        d = min(d, l );\n\t\tp = q;\n\t}\n\treturn d;\n}\n\nvec3 draw(float d, inout vec4 O) \n{\n\n    \n    d = min(sqrt(d)*contrast*2.,1.);             // optimization by deferring sqrt here\n    O = mix(COL, O, fill>0. ? .5+.5*S*d : d);    // paint\n\n    return mix(COL, O, fill>0. ? .5+.5*S*d : d).xyz;\n}\n\n\nfloat dist(vec2 uv) \n{\n    float _x, _y, x0, y0; // d = 1e38; \n    uv *= 400.;                             // scaling\n    contrast = 1.;\n\n// Copy-paste your SVG pathes here.  Slight adaptations : \n//  - add () around command params and  comma between points, \n//  - split polylines and polybéziers into sets of 1 vs 3 pairs of coordinates\n//  - path( style( FILL/CONTOUR, color(hexa) )\n//          commands \n//        )    \n\n// Replaced logo with SVG map pin with hole\n\n    path2( style(FILL,0xFF0000)  // Location\n    M2(69.5944, 60.6173)\n    C(86.387, 43.7942, 113.613, 43.7942, 130.406, 60.6173)\n    C(139.733, 69.9617, 143.879, 82.5309, 142.845, 94.7424)\n    C(141.151, 114.739, 125.487, 130.665, 111.163, 144.721)\n    C(106.882, 148.921, 102.792, 152.0, 100.0, 152.0)\n    C(97.2082, 152, 93.1181, 148.921, 88.8374, 144.721)\n    C(74.5132, 130.665, 58.8487, 114.739, 57.1549, 94.7424)\n    C(56.1205, 82.5309, 60.267, 69.9617, 69.5944, 60.6173)\n    M2(117.0, 94.0)\n    C(117.0, 103.389, 109.389, 111.0, 100.0, 111.0)\n    C(90.6112, 111.0, 83.0, 103.389, 83.0, 94.0)\n    C(83.0, 84.6112, 90.6112, 77.0, 100.0, 77.0)\n    C(109.389, 77.0, 117.0, 84.6112, 117.0, 94.0)\n    Z\n    )\n\n\n   return d;\n}\n\nvoid mainImage(out vec4 O, vec2 U) \n{\n\tvec2 p2 = (2.0*U-iResolution.xy)/iResolution.y;\n    vec2 m2 = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    \n    float f = smoothstep(-0.2,0.2,cos(2.0*iTime));\n    float d2 = 0.0;\n    \n    vec3 col = vec3(1.0) - vec3(1.0,1.0,1.0)*mix(sign(d),1.0,f);\n    \n    vec3 col2;\n    \n    O = vec4(1);\n    vec2 R = iResolution.xy;\n    U.y = R.y-U.y; U /= R.x;\n    \n    vec2 mousecoord = iMouse.xy;\n    mousecoord.y = R.y-iMouse.y;\n    mousecoord /= R.x;\n    \n\tcol2 = SVG(U, O);\n    \n\n    if( iMouse.z > 0.001 )\n    {\n        d2 = dist(mousecoord); \n    \n        float d3 = sqrt(d2);\n        \n        float r2 = d3 / ((iResolution.y / iResolution.x) * 200.0);\n      \n        col2 = mix(col2, vec3(0.0,0.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p2-m2)-r2)-0.0015));\n        col2 = mix(col2, vec3(0.0,0.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p2-m2)-0.0015));\n        O = vec4(col2,1.0);\n    } \n \n\n}","name":"Image","description":"","type":"image"}]}