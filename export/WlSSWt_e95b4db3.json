{"ver":"0.1","info":{"id":"WlSSWt","date":"1567505919","viewed":369,"name":"Star Field w Music","username":"cedricl","description":"this is a test","likes":8,"published":1,"flags":40,"usePreview":0,"tags":["sound","music","starfield"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n //   fragColor = vec4(uv.x);\n        \n    fragColor = texture(iChannel0, uv);    \n    fragColor *= 1.0 - 0.8 * length(uv - vec2(0.5));\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define FAR 800.0\n#define GRAN 14.0\n#define GRAN2 (GRAN*0.5)\n#define GLOW 0.286\n#define GLOW_POW 1.3\n#define AADelta 0.0005\n#define CHROMA 0.005\n\nfloat map(vec3 p) { return length(mod(p, GRAN) - GRAN2); }\nvec3 doColor(in vec2 t) { return vec3(pow(16.8*t.y, 4.5)); }\n\nvec2 trace(in vec3 o, in vec3 rd)\n{\n    float t = 0.;\n    float glow = 0.;\n    for(int i = 0; i < 200; i++)\n    {\n        float d = map(o);\n        if(d < 0.0001 || t > FAR)\n\t\t    return vec2(t, glow);\n        \n        o += rd * d;\n        t += d;\n        glow += GLOW / (pow(d*t, GLOW_POW));\n    }\n    \n    return vec2(FAR, glow);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord - iResolution.xy*.5) / iResolution.y;\n    float Time = iTime * .8;\n    \n\tvec3 ro = vec3(Time*10.3 + 10.7 * sin(Time*0.3), 15.7 * sin(Time*.3), -Time*50. + 50.*sin(Time*0.3));\n    \n    ro += vec3(0., 0., 50.0) * texture(iChannel1, vec2(0.0, 0.0)).x;\n\tvec3 lk = ro + vec3(0.5*sin(Time*0.24), 0.65*sin(Time*0.097), -1.0);\n    lk.y += 0.004 * sin(153.0*iTime) * pow(max(0.0, 1.0 - 4.*Beat(iTime, 4., 2.0)), 1.1);\n\n    float FOV = 3.14159/8.0;\n    vec3 forward = normalize(lk-ro);\n    vec3 right = normalize(vec3(forward.z, 0.15*sin(Time*0.13), -forward.x )); \n    vec3 up = cross(forward, right);\n\n    vec3 rd = normalize(forward + FOV*uv.x*right + FOV*uv.y*up);\n    vec2 t = trace(ro, rd);\n    fragColor = vec4(sqrt(clamp(doColor(t), 0.0, 1.0)), 1.0);\n\n    fragColor += vec4(18,0.0,0.,1.) * pow(max(-rd.y, 0.), 2.8);\n    fragColor += vec4(1.9,1.7,0,1.) * pow(max(-rd.y, 0.), 0.6);\n    fragColor += vec4(0.0,10.0,10,1.) * pow(max(rd.y, 0.), 2.5);\n    fragColor += vec4(0.0,.0,5.9,1.) * pow(max(rd.y, 0.), 0.8);\n    fragColor += vec4(5.5,5.5,5.5,1.) * pow(1.-abs(rd.y), 20.);\n\n    float Chroma = pow(abs(uv.x)+abs(uv.y), 3.0)*CHROMA;\n    rd = normalize(forward + FOV*(uv.x+Chroma)*right + FOV*uv.y*up);\n    t = trace(ro, rd);\n    fragColor += 8.0*vec4(1,0,0,1) * vec4(sqrt(clamp(doColor(t), 0.0, 1.0)), 1.0);\n    \n    rd = normalize(forward + FOV*(uv.x-Chroma)*right + FOV*uv.y*up);\n    t = trace(ro, rd);\n    fragColor += 8.0*vec4(0,1,1,1) * vec4(sqrt(clamp(doColor(t), 0.0, 1.0)), 1.0);\n    \n    rd = normalize(forward + FOV*(uv.x+AADelta)*right + FOV*uv.y*up);\n    t = trace(ro, rd);\n    fragColor += vec4(sqrt(clamp(doColor(t), 0.0, 1.0)), 1.0);\n    \n    rd = normalize(forward + FOV*(uv.x-AADelta)*right + FOV*uv.y*up);\n    t = trace(ro, rd);\n    fragColor += vec4(sqrt(clamp(doColor(t), 0.0, 1.0)), 1.0);\n    \n    rd = normalize(forward + FOV*uv.x*right + FOV*(uv.y+AADelta)*up);\n    t = trace(ro, rd);\n    fragColor += vec4(sqrt(clamp(doColor(t), 0.0, 1.0)), 1.0);\n    \n    rd = normalize(forward + FOV*uv.x*right + FOV*(uv.y-AADelta)*up);\n    t = trace(ro, rd);\n    fragColor += vec4(sqrt(clamp(doColor(t), 0.0, 1.0)), 1.0);\n    \n    fragColor *= vec4(0.22, 0.22, 0.22, 1.0);\n    fragColor += 0.15*texture(iChannel0, fragCoord.xy / iResolution.xy);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define SYNTH_HARMONICS 20\n\nfloat GetNoteFreq(float off) { return 440.0 * pow(1.059463, off); }\nfloat Rnd(float x) { return mod(sin(x*15345.733*sin(x*2342.)), 1.0); }\n\nfloat Hh(float notetime, float time)\n{\n    float env = pow(max(0., 1. - 2.0 * notetime), 1.1);\n    return env * ((sin(88000.0*time) + sin(87000.0*time)) + 0.2 * Rnd(notetime));\n}\n\nfloat Bd(float notetime, float time)\n{\n    float env = pow(max(0., 1. - 0.6*notetime), 1.8);\n    return env * sin(60.0*notetime + env*10.0*notetime);\n}\n\nfloat Sn(float notetime, float time)\n{\n    float env = pow(max(0., 1. - 0.6*notetime), 2.8);\n    return 0.6 * env * sin(150.0*notetime + env*10.0*notetime) + (Rnd(notetime) * pow(max(0., 1. - 0.6*notetime), 3.2));\n}\n\nfloat Synth(float freq, float notetime, float time)\n{\n    float Out = 0.0;\n    for(int i = 0; i < SYNTH_HARMONICS; i++)\n        Out += smoothstep(0.4, 0.61, sin((freq + .237 * float(i)) * notetime) / pow(float(i+1), 0.8));\n\n    return Out / (pow(notetime + 1.0, 0.5) * float(SYNTH_HARMONICS));\n}\n\nfloat Synth2(float freq, float notetime, float time)\n{\n    float pwm = 0.5 * sin(time * .5);\n    return smoothstep(0.4+pwm, 0.61+pwm, sin(freq * time))\n        + 0.3*smoothstep(0.1+pwm, 0.41+pwm, sin(freq*1.0001 * time));\n}\n\nvec2 mainSound( in int samp, float time )\n{\n    vec2 Out = vec2(0.1 * Hh(Beat(time, 0.5, 0.0), time));\n    Out += 0.2 * (Sn(Beat(time, 4., 2.0), time) + Sn(Beat(time, 32., 28.5), time));\n    Out += 1.2 * (Bd(Beat(time, 2.0, 0.0), time) + Bd(Beat(time, 16.0, 15.0), time));\n\n    float har[12] = float[12](-12.,-9.,-7.,-12.,-5.,-4.,-6.,-4.,-2.,-8.,-4.,-2.);\n    int haroff = 3 * int(mod(time / (TIME_INTERVAL * 16.0), 4.0));\n    for(int i = 0; i < 3; i++)\n    {\n        float HTime = max(0.0, time - float(i)*0.1);\n        Out +=  (1. / float(i+1)) * 0.85 * (Synth(GetNoteFreq(har[0+haroff]), Beat(HTime, 16.0, 0.0), HTime) \n                      + Synth(GetNoteFreq(har[1+haroff]), Beat(HTime, 16.0, 1.0), HTime)\n                      + Synth(GetNoteFreq(har[2+haroff]), Beat(HTime, 16.0, 3.0), HTime));\n    }\n\n    Out += 3.85 * (Synth(GetNoteFreq(har[haroff]-24.), Beat(time, 1.0, 0.0), time));\n    Out += .03 * vec2(sin(time), cos(time)) * (Synth2(GetNoteFreq(0.), Beat(time, 16.0, 0.0), time/TIME_INTERVAL));\n\n    return 0.4 * Out * min(time * 0.3, 1.);\n}","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"#define TIME_INTERVAL 0.25\nfloat Beat(float time, float loop, float offset) { return max(0., mod(time / TIME_INTERVAL, loop) - offset); }\n","name":"Common","description":"","type":"common"}]}