{"ver":"0.1","info":{"id":"wtG3Dm","date":"1579065952","viewed":82,"name":"The Colors","username":"dedmoros","description":"Experiments on falloff functions and weighted sums","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 points[4] = vec2[](vec2(-3.0, -2.25), vec2(1., .75), vec2(.25, .75), vec2(.75, -2.25));\nvec3 colors[4] = vec3[](vec3(.7,.4,.23), vec3(.23,.4,.8), vec3(.23,.8,.4), vec3(.8,.23,.63));\n\nfloat scale = 3.;\n\nvec2 getPosition(int i) {\n    vec2 p = points[i];\n\tfloat noise = (iTime + 1000.) / (90.+float(i) * 10.);\n\tvec2 offs = texture(iChannel0, vec2(noise, float(i) / 4.)).rg * 2. - 1.;\n    offs *= 4.;\n    p += offs;\n\treturn p;\n}\n\nfloat quadric(float x, float[4] params) {\n    float y = 0.;\n    for (int i = 4; i > 1; i--) {\n        y += params[4-i] * pow(x, float(i)); // a*x^4+b*x^3+c*x^2+d*x\n    }\n    return y;\n}\n\nvec3 project(vec2 x) {\n\tvec3 col = vec3(0.);\n    float att[4];\n    float sum = 0.;\n    float quadricParams[] = float[](1., -2.3, 1.4, 0.);\n    for (int i = 0; i < 4; i++) {\n    \tvec2 p = getPosition(i);\n        float dist = length(p - x);\n        att[i] =  1. / quadric(dist, quadricParams);\n        sum += att[i];\n    }\n    for (int i = 0; i < 4; i++) {\n        att[i] /= sum;\n    }\n    for (int i = 0; i < 4; i++) {\n    \tcol += colors[i] * att[i];\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2. - 1.;\n    // Aspect ratio\n    float ar = iResolution.y / iResolution.x;\n    uv.y *= ar;\n    vec3 col = vec3(0.);\n    col += project(uv*scale);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}