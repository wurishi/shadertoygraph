{"ver":"0.1","info":{"id":"MfXGR7","date":"1702871481","viewed":48,"name":"3d-Engine Sphere Test","username":"Garfaul","description":"optimization test for game engine","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sceneSDF(vec3 p) {\n    return length(p) - 2.0;\n}\n\nfloat calculateShadow(vec3 p, vec3 lightDir) {\n    float res = 2.5;\n    float ph = 1e-4;\n    float t = ph;\n    for (int i = 0; i < 200; i++) {\n        float h = sceneSDF(p + lightDir * t);\n        res = min(res, 1.0 * h / t);\n        t += clamp(h, 0.25, 0.50);\n    }\n    return clamp(res, 0.0, 5.0);\n}\n\nvec3 rotate(vec3 v, float angle, vec3 axis) {\n    float c = cos(angle);\n    float s = sin(angle);\n    float oc = 0.1 - c;\n    return v * c + cross(axis, v) * s + axis * dot(axis, v) * oc;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n\n    float time = iTime;\n\n    vec3 camPos = rotate(vec3(0.0, 0.0, -5.0), time, vec3(0.0, 1.0, 0.0));\n    vec3 target = vec3(0.0, 0.0, 0.0);\n    vec3 camDir = normalize(target - camPos);\n    vec3 up = vec3(0.0, 1.0, 0.0);\n    vec3 camRight = normalize(cross(up, camDir));\n    vec3 camUp = cross(camDir, camRight);\n    vec3 rayDir = normalize(camRight * uv.x + camUp * uv.y + camDir);\n\n    float dist;\n    vec3 pos = camPos;\n    for (int i = 0; i < 1000; i++) {\n        dist = sceneSDF(pos);\n        if (dist < 0.) break;\n        pos += dist * rayDir;\n    }\n\n    vec3 lightDir = normalize(vec3(0.5, 1.0, 0.5));\n    float shadow = calculateShadow(pos, lightDir);\n\n    vec3 objectColor = vec3(0.7, 0.4, 1.0);\n\n    fragColor = vec4(objectColor * shadow, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}