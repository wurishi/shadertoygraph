{"ver":"0.1","info":{"id":"McjyDd","date":"1723205165","viewed":20,"name":"Liquid Sphere","username":"Abstract","description":"A weird raytracer","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["ray","sphere","raytrace"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float dot2(vec3 v) { return dot(v, v); }\n\nbool iSphere(vec3 r, vec3 p, float s)\n{\n    return (length(r - p) <= s);\n}\n\nbool iPlane(vec3 r, vec3 p, vec3 n)\n{\n    return (dot(r-p, n) == 0.);\n}\n\n\n\n// Direction to vector\nvec3 dtv(vec2 d)\n{\n    return vec3(\n        sin(d.x)  *cos(d.y),\n        sin(d.y), \n        cos(d.x) * cos(d.y)\n        );\n}\n\n// Initialize\nvoid init(vec2 d, vec3 o, vec2 uv, out vec3 dir, out vec3 pos)\n{\n    dir = dtv(d);\n    \n    // Rotate the origin points according to the direction\n    pos = dtv(vec2(d.x, d.y+.25))*vec3(uv, 1)+o;\n}\n\nvoid mainImage( out vec4 col, in vec2 coord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = coord/1.-iResolution.xy/2.;\n\n    // Ray Initialization\n    col = vec4(0., 0., 0., 1.);\n    vec2 FishEye = vec2(iTime/100.);\n    vec2 ScreenSize = vec2(9);\n    vec3 dir;\n    vec3 pos;\n    init(uv * FishEye, vec3(uv * ScreenSize, 0.), vec2(uv.x, uv.y), dir, pos);\n   \n    \n    // Ray Loop\n    for (int i = 0; i < 10; ++i)\n    {\n        // Intersection Checks\n        if (iSphere(pos, vec3(0., 0., 5.), 1000.)) { col = vec4(1.); }\n        if (iPlane(pos, vec3(0., -5., 0.), vec3(0., 1., 0.))) { col = vec4(1.); }\n        \n        // Upadate Ray\n        pos += dir;\n    }\n    \n    // Output to screen\n    \n}","name":"Image","description":"","type":"image"}]}