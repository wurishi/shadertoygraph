{"ver":"0.1","info":{"id":"X3XGWs","date":"1708224822","viewed":45,"name":"Jo√£o Pedro S. pov ","username":"reganly1809","description":"for connor","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["homework"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float map(vec3 p) {\nfloat movement = sin(iTime) * 2.0;\nfloat sphereRadius = 0.8;\n    float distanceToSphere1 = length(p + vec3(1.0, 0., 0.0 + movement)) - sphereRadius;\n    float distanceToSphere = length(p + vec3(-1.0, 0., 0.0 + movement)) - sphereRadius;\n    vec3 q = abs(p + vec3(0.0,0.2,1.0 + movement)) - vec3(1.0); \n    float Cube = length(max(q, 0.1)) + min(max(q.x + 0.5, max(q.y + 0.5, q.z + 0.5)), 0.0);\n    \n    return min(min(distanceToSphere1, distanceToSphere), Cube);\n}\nvec3 estimateNormal(vec3 p) {\n    float eps = 0.1;\n    vec3 normal = vec3(\n        map(p + vec3(eps, 0, 0)) - map(p - vec3(eps, 0, 0)),\n        map(p + vec3(0, eps, 0)) - map(p - vec3(0, eps, 0)),\n        map(p + vec3(0, 0, eps)) - map(p - vec3(0, 0,eps))\n    );\n    return normalize(normal);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n\n//initialization\n    vec3 rayOrigin = vec3(-0.2,0.4,-3.0);\n    vec3 rayDirection = normalize(vec3(uv, 0.8));\n    vec3 col = vec3(0);\n    \n    float t = 1.;\n    \n    //raymarching\n    for (int i = 0; i < 80; i++) {\n        vec3 p = rayOrigin + rayDirection * t;\n        \n    \n        float d = map(p);\n    \n        t+=d;\n        \n        col = vec3(i) / 30.;\n        \n          if (d < 0.01 || t > 40.0) {\n            vec3 normal = estimateNormal(p);\n            float diffuse = max(dot(normal, normalize(vec3(0.,.7, -0.8))), 0.1);\n            col = vec3(0.1) + diffuse * vec3(0.55, 0.38, 0.35);\n            break;\n        }\n    }\n    \n    fragColor = vec4(col,1);\n}","name":"Image","description":"","type":"image"}]}