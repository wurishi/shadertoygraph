{"ver":"0.1","info":{"id":"csfXD8","date":"1668766323","viewed":68,"name":"复合图形 圆+方 naive","username":"lukawa","description":"复合图形 圆+方 naive","likes":1,"published":1,"flags":0,"usePreview":0,"tags":[],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float aspect = 1280.0 / 720.0; \n\n// 画线\nfloat lineStep(float _inner,float _outer,float dist){\n    if (.0<=dist && dist<_inner){\n        return -1.0;\n    }\n    else if (_inner<=dist && dist<=_outer){\n        return 1.0;\n    }else{\n        return .0;\n    }\n}\n// 用于画圆的函数\nfloat circle(in vec2 _st, in float _radius){\n    float d = distance(_st,vec2(0.5*aspect,0.5));\n\treturn lineStep(_radius-0.002,_radius+0.002,d);\n}\n\n// 用于画正方形的函数\nfloat square(in vec2 _st, in float width){\n    float dx = distance(_st,vec2(0.5*aspect,_st.y));\n    float dy =  distance(_st,vec2(_st.x,.5));\n    \n\treturn lineStep(width-0.002,width+0.002,dx+dy) ;\n}\n\n// 用于融合图形，依据外侧\nfloat mixShape(float _a, float _b, vec2 st){\n    \n    float _distA = distance(_a*st,vec2(0.5*aspect,0.5));\n    float _distB = distance(_b*st,vec2(0.5*aspect,0.5));\n    \n    if ( _a==0.0){\n        _distA = 0.0;\n    }\n    if ( _b==0.0){\n        _distB = 0.0;\n    }\n    \n    if (_distA>=_distB){\n        return _distA;\n    }else{\n        return _distB;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 st = fragCoord/iResolution.xy;\n    st.x *= aspect;\n    \n    // float d = distance(st,vec2(0.5*aspect,0.5));\n    vec3 drawSquare = vec3(square(st,0.3));\n    vec3 drawCircle = vec3(circle(st,0.24));\n    //vec3 color = vec3(mixShape(square(st,0.3),circle(st,0.25),st));\n    vec3 color = vec3(drawSquare+drawCircle);\n    \n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}