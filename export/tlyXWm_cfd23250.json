{"ver":"0.1","info":{"id":"tlyXWm","date":"1582855215","viewed":230,"name":"Mandelbrot Fourier series 2","username":"rory618","description":"Least efficient and most complicated way I know of to make something mandelbroty. For more info: http://www.mrob.com/pub/muency/laurentseries.html\n\nComment out line 3 common (#define USE_PRECOMPUTED) to compute the coefficients in the shader","likes":19,"published":1,"flags":32,"usePreview":0,"tags":["2d","fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 O, in vec2 I )\n{\n    O = vec4(1);\n    vec4 d = texture(iChannel0,I/R.xy);\n    O = min(O,vec4(d.x));\n    O = min(O,vec4(d.y));\n    //O = abs(texture(iChannel1, I/R.xy))/10.;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float[] x = float[](-0.5,\n0.125,\n-0.25,\n0.1171875,\n0.0,\n-0.0458984375,\n-0.0625,\n0.030120849609375,\n0.0,\n-0.014011383056640625,\n0.03125,\n-0.014550447463989258,\n0.0,\n-0.02054736018180847,\n-0.041015625,\n0.02759087970480323,\n0.,\n-0.00958755548344925,\n0.01904296875,\n-0.008741356719838222,\n-0.015625,\n-0.0022058940562601492,\n0.01416015625,\n-0.00025794322824879146,\n0.,\n0.00627789280520652,\n-0.00792694091796875,\n-0.002447594480047166,\n-0.00390625,\n-0.010415658002275605,\n-0.008733749389648438,\n0.005870615653135042,\n0.,\n-0.0021057886362261507,\n0.0027189254760742188,\n-0.0051262377166050406,\n-0.0009765625,\n0.0008157541176291787,\n0.005486667156219482,\n-0.0013344333522704675,\n0.,\n0.0006824721806692933,\n-0.0034244805574417114,\n0.0009338022920411115,\n-0.010009765625,\n-0.0007297655417124279,\n0.008409813046455383,\n-0.0018054806434445823,\n0.,\n0.0022869196081968237,\n-0.0034234257182106376,\n-0.0025678994205525158,\n0.0040283203125,\n0.0036886948038130207,\n-0.0008747992978896946,\n-0.0010763903483377536,\n0.,\n-0.001670918603098355,\n-0.00040554576844442636,\n-0.004522178252675655,\n0.000244140625,\n-0.00213422292745167,\n-0.0107750440683958,\n0.006371861782096671);\n\nvec2 brd(int n){\n    return texelFetch(iChannel1, ivec2(0,n), 0).zw;\n}\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    vec2 p = (I+I-R.xy)/R.y*1.5;\n    float sc = 2./R.y*1.5;\n    vec2 c = vec2(cos(iTime*.2),sin(iTime*.2));\n    vec2 z = vec2(1,0);\n    O=texture(iChannel0,I/R.xy);\n    vec2 s = vec2(c);\n    O.x = dLineCircle(p,vec2(0),s)/sc;\n    #ifndef USE_PRECOMPUTED\n    int iters = 24;\n    #else\n    int iters = 64;\n    #endif\n    for(int i = 0; i < iters; i++){\n        #ifndef USE_PRECOMPUTED\n        vec2 bv = brd(i);\n        #else\n        vec2 bv = vec2(x[i],1);\n        #endif\n        if(bv.y != 1.) {O = vec4(1,1,s); return; }\n        vec2 ns = s+z*bv.x;\n        O.x = min(O.x, dLineCircle(p,s,ns)/sc);\n        s = ns;\n        z = mat2(z, -z.y, z.x) * (c * vec2(1,-1));\n    }\n    if(iFrame<3){\n        O.y = 1.;\n    } else {\n        O.y = min(O.y, dLine(p,s,O.zw)/sc);\n    }\n    O.zw = s;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define R iResolution\n\n#define USE_PRECOMPUTED\n\nfloat dCircle(vec2 p, vec2 c, float r){\n    return abs(length(p)-r);\n}\n\nfloat dLine(vec2 p, vec2 a, vec2 b){\n    p-=a;\n    b-=a;\n    float l2 = dot(b,b);\n    p -= b*clamp(dot(p,b/l2),0.,1.);\n    return length(p);\n}\n\nfloat dLineCircle(vec2 p, vec2 a, vec2 b){\n    p-=a;\n    b-=a;\n    float l = length(b);\n    float l2 = dot(b,b);\n    float d = abs(length(p)-l);\n    p -= b*clamp(dot(p,b/l2),0.,1.);\n    return min(d,length(p));\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec2 w(int n, int m);\nvec2 u(int j, int k);\nvec2 a(int j);\nvec2 b(int n);\n\nvec2 wrd(int n, int m){\n    return texelFetch(iChannel0, ivec2(n+1,m), 0).xy;\n}\nvec2 urd(int n, int k){\n    return texelFetch(iChannel0, ivec2(n+1,k), 0).zw;\n}\nvec2 ard(int j){\n    return texelFetch(iChannel0, ivec2(0,j), 0).xy;\n}\nvec2 brd(int n){\n    return texelFetch(iChannel0, ivec2(0,n), 0).zw;\n}\n\nvec2 w(int n, int m){\n    vec2 t = wrd(n, m);\n    if(t.y == 1.) return t; \n    if(n==0) return vec2(0,1); \n    vec2 av = ard(m-1);\n    if(av.y != 1.) return vec2(0);\n    vec2 wv = wrd(n-1, m);\n    if(wv.y != 1.) return vec2(0);\n    float r = av.x + wv.x;\n    for(int j = 0; j <= m-2; j++){\n        av = ard(j);\n        if(av.y != 1.) return vec2(0);\n        wv =  wrd(n-1, m-j-1);\n        if(wv.y != 1.) return vec2(0);\n        r += av.x * wv.x;\n    }\n    return vec2(r,1);\n}\nvec2 u(int n, int k){\n    vec2 t = urd(n,k);\n    if(t.y == 1.) return t;\n    if((1<<n) - 1==k && n <= 12){\n        return vec2(1);\n    } else if((1<<n) - 1 > k || n > 12){\n        float r = 0.;\n        for(int j = 0; j <= k; j++){\n            vec2 uv1 = urd(n-1,j);\n            if(uv1.y!=1.) return vec2(0);\n            vec2 uv2 = urd(n-1,k-j);\n            if(uv2.y!=1.) return vec2(0);\n            r += uv1.x*uv2.x;\n        }\n        return vec2(r,1);\n    } else if((2<<n) - 1>k || n > 12){\n        return vec2(0,1);\n    } else {\n        vec2 uv = urd(n+1,k);\n        if(uv.y!=1.) return vec2(0);\n        float r = uv.x;\n        for(int j = 1; j <= k-1; j++){\n            vec2 uv1 = urd(n,j);\n            if(uv1.y!=1.) return vec2(0);\n            vec2 uv2 = urd(n,k-j);\n            if(uv2.y!=1.) return vec2(0);\n            r -= uv1.x*uv2.x;\n        }\n        return vec2(r/2.,1);\n    } \n}\nvec2 a(int j){\n    vec2 t = ard(j);\n    if(t.y == 1.) return t;\n    vec2 uv = urd(0, j+1);\n    if(uv.y != 1.) return vec2(0);\n    return vec2(uv.x,1);\n}\nvec2 b(int n){\n    vec2 t = brd(n);\n    if(t.y == 1.) return t;\n    if(n == 0) return vec2(-0.5, 1);\n    vec2 wv = wrd(n,n+1);\n    if(wv.y != 1.) return vec2(0);\n    return vec2(-wv.x/float(n), 1);\n}\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    #ifndef USE_PRECOMPUTED\n    if(I.x<1.){\n        O = vec4(a(int(I.y)), b(int(I.y)));\n    } else {\n        O = vec4(w(int(I.x) - 1, int(I.y)), u(int(I.x) - 1, int(I.y)));\n    }\n    if(iFrame<3){\n        O = vec4(0);\n    }\n    #endif\n}","name":"Buffer B","description":"","type":"buffer"}]}