{"ver":"0.1","info":{"id":"MdBczW","date":"1491110301","viewed":582,"name":"Kissing Donuts","username":"balkhan","description":"Inspired by iq's Apollonian : https://www.shadertoy.com/view/4ds3zn, but I prefer donuts. \nEperimenting with fake colors (no lights) and campaths, first hit in cam around 60 sec :)","likes":21,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","pseudokleinian","nolights"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n* License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n* Created by bal-khan\n*/\n\n#define I_MAX\t100\n#define E\t\t0.001\n\n//#define SEE_ALL\n//#define SPIRAL\n\nvoid\trotate(inout vec2 v, float angle);\nfloat\tsdTorus( vec3 p, vec2 t );\nvec2\tmarch(vec3 pos, vec3 dir);\nvec3\tcamera(vec2 uv);\nvec3\tblackbody(float Temp);\nfloat\tscene(vec3 p);\n\nfloat\tg; //coloring id\nfloat\tt; // time\nfloat\ta; // angle\nvec3\tss;// tmp var recording old ray position\n\n// blackbody by aiekick : https://www.shadertoy.com/view/lttXDn\n\n// -------------blackbody----------------- //\n\n// return color from temperature \n//http://www.physics.sfasu.edu/astro/color/blackbody.html\n//http://www.vendian.org/mncharity/dir3/blackbody/\n//http://www.vendian.org/mncharity/dir3/blackbody/UnstableURLs/bbr_color.html\n\nvec3 blackbody(float Temp)\n{\n\tvec3 col = vec3(255.);\n    col.x = 56100000. * pow(Temp,(-3. / 2.)) + 148.;\n   \tcol.y = 100.04 * log(Temp) - 623.6;\n   \tif (Temp > 6500.) col.y = 35200000. * pow(Temp,(-3. / 2.)) + 184.;\n   \tcol.z = 194.18 * log(Temp) - 1448.6;\n   \tcol = clamp(col, 0., 255.)/255.;\n    if (Temp < 1000.) col *= Temp/1000.;\n   \treturn col;\n}\n\n// -------------blackbody----------------- //\n\nvoid mainImage(out vec4 o, in vec2 f )\n{\n    t = iTime*.5;\n    vec2 R = iResolution.xy,\n          uv  = vec2(f-R/2.) / R.y;\n\tvec3\tdir = camera(uv);\n    vec3\tpos = vec3(.5, .5, 10.0-t*4.5);\n    rotate(dir.zx, cos(t)*.25);\n    vec2\tinter = (march(pos, dir));\n \to.xyz = vec3(inter.y*.051 - (inter.x)*.001);\n    o.xyz *= vec3(abs(sin(1.04+t) ), abs(sin(2.09+t) ), abs(sin(3.14+t) ));\n    o.xyz += (1.-sin(t+1.57))*blackbody((15.-(2.*inter.y-.1*inter.x) )*50.);\n    o.xyz += (1.-sin(t))*vec3(abs(sin(t+1.04+g)), abs(sin(t+2.09+g)), abs(sin(t+3.14+g)))*inter.x*.005;\n    o.xyz *= (1.1-length(uv)*1.);\n}\n\nfloat\tscene(vec3 p)\n{\n\tfloat scale = 1.0;\n    float r2,k;\n    a = cos( .8*(p.z *.5) +t*1.5);\n    p.y+=-.5;\n    p.x+=.5;\n    rotate(p.yx, (a) );\n    ss = p;\n    for( int i=0; i<5; i++ )\n\t{\n        p.xyz = 1.0 - 2.0*fract(0.5*p.xyz+0.5);\n        p*=1.12;\n\t\tr2 = sdTorus(p, vec2(.21,.12) );\n        if(r2 > 5./float(i) )\n            break;\n\t\tk = 1./(r2);\n\t\tp     *= k;\n\t\tscale *= k;\n\t}\n\tss=p*(fract(ss)+.5);\n    #ifndef\tSEE_ALL\n    return (-.085*(1.-sin(t))+0.25*(abs(p.x))/scale);\n    #else\n    return (-.085*(1.-sin(t))+0.25*(abs(p.x)+length(fract(ss.xz)-.5 )*.25)/scale);\n    #endif\n}\n\nvec2\tmarch(vec3 pos, vec3 dir)\n{\n    vec2\tdist = vec2(0.0);\n    vec3\tp = vec3(0.0);\n    vec2\ts = vec2(0.0);\n\n    vec3\tdirr;\n    for (int i = 0; i < I_MAX; ++i)\n    {\n        dirr = dir;\n    \trotate(dirr.zx, .05*dist.y*sin(t*1.5));\n        #ifdef\tSPIRAL\n        rotate(dirr.yx, .8*dist.y*sin(t*.5));\n        #endif\n    \tp = pos + dirr * dist.y;\n        dist.x = scene(p);\n        dist.y += dist.x;\n        if (dist.x < E || dist.y > 20.)\n        {\n            p=ss;\n            g = p.y;\n\t        g += (step(sin(5.*p.x), .5) \n             + step(sin(20.*p.x), .5) );\n           break;\n        }\n        s.x++;\n    }\n    s.y = dist.y;\n    return (s);\n}\n\n// Utilities\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n\tvec2 q = vec2(length(p.zy)-t.x,p.x);\n\n    return length(q)-t.y;\n}\n\nvec3\tcamera(vec2 uv)\n{\n    float   fov = 1.;\n\tvec3    forw  = vec3(0.0, 0.0, -1.0);\n\tvec3    right = vec3(1.0, 0.0, 0.0);\n\tvec3    up    = vec3(0.0, 1.0, 0.0);\n\n    return (normalize((uv.x) * right + (uv.y) * up + fov * forw));\n}\n\nvoid rotate(inout vec2 v, float angle)\n{\n\tv = vec2(cos(angle)*v.x+sin(angle)*v.y,-sin(angle)*v.x+cos(angle)*v.y);\n}\n","name":"Image","description":"","type":"image"}]}