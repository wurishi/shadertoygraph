{"ver":"0.1","info":{"id":"DljcDz","date":"1691671329","viewed":44,"name":"Practica_GLSL_2","username":"Igor_Voronetchi","description":"Final_result","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["igorvoronetchi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//https://iquilezles.org/articles/palettes/\nvec3 palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     // Normalized pixel coordinates (from 0 to 1)\n     vec2 uv = fragCoord/iResolution.xy;\n     uv.x *= iResolution.x/iResolution.y;//fixing the aspect ratio\n     uv = uv - 0.5;\n     uv *= 2.0;\n     vec3 finalColor = vec3(0.0); //black\n     vec2 uv0 = uv;\n     for(float i = 0.0; i<3.0; i++){\n     uv = uv*2.0;\n     uv = fract(uv+1.5);\n     uv -= 0.5;\n     float d = length(uv);\n     vec3 col = palette(length(uv0)+iTime*.4);\n     //d -= 0.5;//\n     d = sin(d*8.+ iTime)/8.;\n     d = abs(d);\n     //d = step(0.1, d);\n     //d = smoothstep(0.0, 0.1, d);\n     d = pow(0.01 / d, 1.2);\n     finalColor += col * d;\n     }\n     // Output to screen\n    fragColor = vec4(finalColor,1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}