{"ver":"0.1","info":{"id":"4styRr","date":"1517858754","viewed":144,"name":"CIS 566: Paw Metaballs","username":"BobMowzie","description":"For CIS 566 Procedural Graphics\nResources used:\nhttp://iquilezles.org/www/index.htm\nhttp://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["metaballs","homework"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float EPSILON = 0.0001;\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat sphereSDF(vec3 samplePoint) {\n    return length(samplePoint) - 1.0;\n}\n\nfloat sceneSDF(vec3 samplePoint) {\n    samplePoint /= 1.5;\n    float scene = MAX_DIST;\n    int numBalls = 8;\n    for (int i = 1; i <= numBalls; i++) {\n        float amp = 0.34;\n        float angle = radians(float(i) * 360. / float(numBalls));\n        float x = amp * sin(angle) * cos(float(iFrame)*0.04 + angle);\n        float y = amp * cos(angle) * cos(float(iFrame)*0.04 + angle);\n        x += (amp * 0.6) * sin(angle);\n        y += (amp * 0.6) * cos(angle);\n        vec3 point = samplePoint + vec3(x, y, 0.);\n    \tfloat sphere = sphereSDF(point / 0.075) * 0.075;\n        scene = smin(scene, sphere, 0.25);\n    }\n    return scene * 1.5;\n}\n\nfloat shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end) {\n    float depth = start;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        float dist = sceneSDF(eye + depth * marchingDirection);\n        if (dist < EPSILON) {\n\t\t\treturn depth;\n        }\n        depth += dist;\n        if (depth >= end) {\n            return end;\n        }\n    }\n    return end;\n}\n            \n\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 dir = rayDirection(45.0, iResolution.xy, fragCoord);\n    vec3 eye = vec3(0.0, 0.0, 5.0);\n    float dist = shortestDistanceToSurface(eye, dir, MIN_DIST, MAX_DIST);\n    \n    if (dist > MAX_DIST - EPSILON) {\n        // Didn't hit anything\n        fragColor = vec4(1.0, 1.0, 1.0, 1.0);\n\t\treturn;\n    }\n    \n    fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n}","name":"Image","description":"","type":"image"}]}