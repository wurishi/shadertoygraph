{"ver":"0.1","info":{"id":"WtSSWz","date":"1565517697","viewed":108,"name":"Theta","username":"jahnertz","description":"Playing around with uv transformations.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fisheye","geometry"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#ifndef PI\n#define PI 3.14159265\n#endif\n\n#ifndef deg2rad\n#define deg2rad (PI/180.0)\n#endif\n\n\nconst vec4 cross_color = vec4(0.008,0.018,0.270,1.000);\n\n// Transformations\nvec2 rotate( vec2 uv, float degree ){\n  float theta = -degree * deg2rad;\n  return vec2( cos(theta) * uv.x - sin(theta) * uv.y,\n\t\t\t   sin(theta) * uv.x + cos(theta) * uv.y\n\t\t\t   );\n }\n\nvec2 blind_offset( vec2 uv, vec2 offset, float width ){\n  //vec2 fragCoord.xy = uv * iResolution;\n  if ( mod( uv.t * iResolution.t / width, 2.0 ) > 1.0 ) {\n\tuv *= offset;\n\t}\n  return uv;\n  }\n\nvec2 tile( vec2 uv, float tiles ){\n  return fract( uv * vec2( tiles ) - vec2( 0.5 ) );\n  }\n\n// Shapes\nvec4 draw_rect(float width, float height, vec2 uv, vec4 color) {\n  vec4 canvas = vec4(0.0);\n  if ( -width < uv.s && uv.s < width  ) {\n\tif ( -height < uv.t && uv.t < height ) {\n\t  canvas = color;\n\t  }\n    }\n  return canvas;\n  }\n\nvec4 draw_cross( float width, float height, vec2 uv, vec4 color) {\n  vec4 canvas = vec4(0.0);\n  vec4 rect1 = draw_rect( width, height / 2.0, uv, color );\n  vec4 rect2 = draw_rect( width, height / 2.0, rotate( uv, 90.0 ), color );\n  canvas = mix(rect1,rect2,rect2.a);\n  return canvas;\n  }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 st = fragCoord/iResolution.xy;\n  st -= vec2 (0.5);\n  st.x *= iResolution.x/iResolution.y;\n  st *= vec2( abs(cos(length( st ) * cos(iTime / 10.0) * 10.0)) ); //multiply by distance from center\n  st = rotate( st, iTime * 10.0 );\n  st = blind_offset( st, vec2( 0.01, 0.01), sqrt(length(st) - 0.25) * 10.0);\n  st = tile( st, 3.0 );\n  vec4 color = vec4( length(st)/2.0, ( 1.0 - length(st - vec2(0.5)) + (sin(iTime)-0.5)/2.0) * 0.7, 0.5, 1.0 );\n  st -= vec2 (0.5, 0.5);\n  st = rotate( st, iTime * -30.0 );\n  vec4 cros = draw_rect( 0.05 * (sin(iTime / 10.0) + 1.0), 0.5, st, cross_color);\n  color = mix( color, cros, cros.a );\n  fragColor = color;\n  }\n","name":"Image","description":"","type":"image"}]}