{"ver":"0.1","info":{"id":"XtXcRB","date":"1506620618","viewed":279,"name":"gyroscope balls","username":"balkhan","description":"circular thingy","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n* License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n* Created by bal-khan\n*/\n\nvec2\tmarch(vec3 pos, vec3 dir);\nvec3\tcamera(vec2 uv);\nvoid\trotate(inout vec2 v, float angle);\nvec3\tcalcNormal( in vec3 pos, float e, vec3 dir);\nfloat\tloop_circle(vec3 p);\nfloat\tcircle(vec3 p, float phase);\nfloat\tsdTorus( vec3 p, vec2 t, float phase );\nfloat\tmylength(vec2 p);\nfloat\tnrand( vec2 n );\n\nfloat \tt;\t\t\t// time\nvec3\tret_col;\t// torus color\nvec3\th; \t\t\t// light amount\n\n#define I_MAX\t\t40.\n#define E\t\t\t0.0001\n#define FAR\t\t\t8.5\n#define MAXI\t\t7.\t\t// num torus\n#define PI\t\t\t3.14\n\nvoid mainImage(out vec4 c_out, in vec2 f)\n{\n    t  = iTime*.125;\n    vec3\tcol = vec3(0., 0., 0.);\n\tvec2 R = iResolution.xy,\n          uv  = vec2(f-R/2.) / R.y;\n\tvec3\tdir = camera(uv);\n    vec3\tpos = vec3(.0, .0, 7.0);\n\n    pos.z = 4.5+3.*sin(t*3.);\n\n    #ifdef\tLOOKING_AROUND\n    dir.zy *= mat2(cos(t*.5),sin(t*.5),-sin(t*.5),cos(t*.5) );\n    dir.xy *= mat2(cos(1.57+t*.5),sin(1.57+t*.5),-sin(1.57+t*.5),cos(1.57+t*.5) );\n    #endif\n    \n    vec2\tinter = (march(pos, dir));\n    if (inter.y <= FAR)\n        col.xyz = ret_col*(1.-inter.x*.025);\n    else\n        col *= 0.;\n    col += h*.005125;\n    c_out =  vec4(col,1.0);\n}\n\nfloat\tscene(vec3 p)\n{  \n    float\tmind = 1e5;\n\n    vec2\trot = vec2( cos(t), sin(t) );\n\n\tmind = loop_circle(p);\n\t\n    return (mind);\n}\n\n#define VL(p) (1./((length(p)-.0)*(length(p)-.0) ) )\n\nvec2\tmarch(vec3 pos, vec3 dir)\n{\n    vec2\tdist = vec2(0.0, 0.0);\n    vec3\tp = vec3(0.0, 0.0, 0.0);\n    vec2\ts = vec2(0.0, 0.0);\n\n    dist.y = dist.x = length(p)-1.5;\n    if (dist.x < E )\n    {\n        dist.y-=dist.x;\n\t    for (float i = -1.; i < I_MAX; ++i)\n\t    {\n\t    \tp = pos + dir * dist.y;\n\t        dist.x = scene(p);\n\t        if (dist.x < length(p)-1.75)\n\t            dist.x = length(p)-1.75;\n\t        dist.y += dist.x;\n\t        if (dist.x < E || dist.y > FAR)\n            {\n                break;\n            }\n\t        s.x++;\n\t    }\n    }\n    s.y = dist.y;\n    return (s);\n}\n\nfloat nrand( vec2 n )\n{\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nfloat\tmylength(vec2 p)\n{\n\tfloat\tret;\n    \n    p = p*p*p*p;\n    \n    ret = (p.x+p.y);\n    ret = pow(ret, 1./4.);\n    \n    return ret;\n}\n\nfloat sdTorus( vec3 p, vec2 t, float phase )\n{\n\tvec2 q = vec2(length(p.xy)-t.x,p.z);\n    float\tvar = (sin(iTime*1.+phase))*3.14;\n    vec3\tcol;\n    col = vec3(\n        abs(sin(nrand(vec2(7.*phase*10., 7.*phase/3.14))*6.14+iTime*.125+0.00))\n        ,\n        abs(sin(nrand(vec2(7.*phase*10., 7.*phase/3.14))*6.14+iTime*.125+1.04))\n        ,\n        abs(sin(nrand(vec2(7.*phase*10., 7.*phase/3.14))*6.14+iTime*.125+2.08))\n    );\n    h += VL(p-.75*vec3(cos(var), sin(var), 0.)) * .125 * col;\n    h += VL(p-.75*vec3(cos(3.14), sin(3.14), 0.)) * .125 * col;\n    return min(min(\n        (mylength(q)-t.y)\n        +\n        1e5*step( var , (atan(p.y,p.x))+.0 )\n        ,\n        length(p-.75*vec3(cos(var), sin(var), 0.))-.125\n        )\n        ,\n        length(p-.75*vec3(cos(3.14), sin(3.14), 0.))-.125\n        )\n        ;\n}\n\nfloat\tcircle(vec3 p, float phase)\n{\n\tfloat\tret;\n    \n    ret = sdTorus(p, vec2(.75, .0625), phase );\n\n    return ret;\n}\n\nfloat\tloop_circle(vec3 p)\n{\n\tfloat\tret, old_ret;\n    \n    ret_col = vec3(0.);\n    ret = 1e5;old_ret = 1e5;p*=1.;\n    vec3 op = p;\n    \n    for(float i = 0.; i < MAXI; i++)\n    {\n        p = op;\n        rotate(p.xz, i/2.+iTime*2.);\n        rotate(p.zy, i/3.+iTime*2.);\n        rotate(p.yx, i/1.+iTime*2.);\n        old_ret = ret;\n    \tret = min(old_ret,\n        \t\t\tcircle(p, i/(7.))\n        \t\t\t);\n       if (ret != old_ret && ret > 0.)\n            ret_col = vec3(abs(sin(nrand(vec2(i*10., i/3.14))*6.14+t+0.00)),\n                           abs(sin(nrand(vec2(i*10., i/3.14))*6.14+t+1.04)),\n                           abs(sin(nrand(vec2(i*10., i/3.14))*6.14+t+2.08)));\n\n        op*=.9;\n    }\n    ret = min(ret, length(p)-.1);\n    return\tret;\n}\n\n// Utilities\n\nvoid rotate(inout vec2 v, float angle)\n{\n\tv = vec2(cos(angle)*v.x+sin(angle)*v.y,-sin(angle)*v.x+cos(angle)*v.y);\n}\n\nvec2\trot(vec2 p, vec2 ang)\n{\n\tfloat\tc = cos(ang.x);\n    float\ts = sin(ang.y);\n    mat2\tm = mat2(c, -s, s, c);\n    \n    return (p * m);\n}\n\nvec3\tcamera(vec2 uv)\n{\n    float\t\tfov = 1.;\n\tvec3\t\tforw  = vec3(0.0, 0.0, -1.0);\n\tvec3    \tright = vec3(1.0, 0.0, 0.0);\n\tvec3    \tup    = vec3(0.0, 1.0, 0.0);\n\n    return (normalize((uv.x) * right + (uv.y) * up + fov * forw));\n}\n\nvec3 calcNormal( in vec3 pos, float e, vec3 dir)\n{\n    vec3 eps = vec3(e,0.0,0.0);\n\n    return normalize(vec3(\n           march(pos+eps.xyy, dir).y - march(pos-eps.xyy, dir).y,\n           march(pos+eps.yxy, dir).y - march(pos-eps.yxy, dir).y,\n           march(pos+eps.yyx, dir).y - march(pos-eps.yyx, dir).y ));\n}","name":"Image","description":"","type":"image"}]}