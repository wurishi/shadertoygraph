{"ver":"0.1","info":{"id":"msGBzG","date":"1703162688","viewed":27,"name":"Pseudochemical","username":"xtr1984","description":"Pseudochemical simulator\nWell, just an attempt..\n\n\n","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["dynamics","molecular","pseudochemical"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 50\n#define MAX_DIST 5.0\n#define EPSILON 0.001\n\nfloat sdSphere(vec3 p, float r){\n    return length(p)-r;\n}\n\n\nfloat sdPlane(vec3 p, vec3 n, float d){\n    return dot(p,n) +d;\n}\n\nvec2 sdUnion(vec2 res1, vec2 res2){\n    return (res1.x<res2.x)? res1: res2;\n}\n\n\n\nmat3 getCam(vec3 ro, vec3 LookAt){\n    vec3 F = normalize(LookAt-ro);\n    vec3 R = normalize(cross(vec3(0.0,0.1,0.0),F));\n    vec3 U = cross(F,R);\n    return mat3(R,U,F);\n}\n\n\nvec2 map(vec3 p){\n    vec2 res=vec2(100,0);\n    for (int i =0; i< ATOMS.length();i++){\n        //atoms spheres\n        vec4 postype = GETBUF(BPOS_T, i);\n        vec3 pos = postype.xyz*SCALE;\n        int type = int(postype.w);\n        float rad = RADTAB[type]*SCALE;\n        float d = sdSphere(p-pos, rad);\n        vec2 atom = vec2(d, float(i));\n        res = sdUnion(res, atom );\n        //nodes spheres\n        #ifdef SHOWNODES\n        for(int ni=0;ni<type;ni++){\n            vec3 npos = get_node_pos(type,ni)*SCALE;\n            vec4 rot = GETBUF(BROT,i);\n            vec3 rnpos = rotate_vector(npos, rot)+pos;\n            float d = sdSphere(p-rnpos, rad*0.2);\n            vec2 node = vec2(d, 10000);\n            res = sdUnion(res, node );\n        }\n        #endif\n    }\n    return res;\n}\n\nvec2 rayMarch(vec3 ro, vec3 rd, out vec3 hitpos){\n     vec2 obj,hit;\n     for(int s =0; s<MAX_STEPS; s++){\n         vec3 p = ro + obj.x*rd;\n         hit = map(p);\n         obj.x += hit.x;\n         obj.y = hit.y;\n         if (abs(hit.x)<EPSILON ) {\n             hitpos = p;\n             break;\n         }\n         if (obj.x> MAX_DIST) break;\n             \n     }\n     return obj;\n}\n\nvoid render(inout vec3 col, in vec2 uv) {\n     vec3 ro;\n     vec4 postype;\n     float fFrame = float(iFrame);\n     float cx = cos(fFrame/100.0);\n     float cz = sin(fFrame/100.0);\n     ro = vec3(cx,2.0,cz);\n     //ro = vec3(0.0,1.0,-2.0);\n     \n     vec3 lookAt = vec3(0.0);\n     //vec4 postype = GETBUF(BPOS_T,0);\n     //vec3 lookAt = vec3(postype.xyz*SCALE);\n     mat3 cam = getCam(ro, lookAt);\n     vec3 rd = cam*normalize(vec3(uv,2.0));\n     \n     vec3 hitpos = vec3(-1.0);\n     vec2 obj = rayMarch(ro, rd,hitpos);\n     int id = int(obj.y);\n     if (id!=10000){\n         postype = GETBUF(BPOS_T,id);\n         vec3 pos = postype.xyz*SCALE;\n         int type = int(postype.w);\n         col = COLTAB[type];\n         //light \n         if (hitpos!=vec3(-1)){ \n             vec3 lightPos = vec3(1.0f,5.0f,-2.0f);\n             vec3 lightColor = vec3(1.0);\n             vec3 norm = normalize(hitpos-pos);\n             vec3 lightDir = normalize(lightPos - hitpos);\n             float diff = max(dot(norm, lightDir), 0.0);\n             vec3 diffuse = diff * lightColor;\n             float ambientStrength = 0.7f;\n             vec3 ambient = ambientStrength * lightColor;\n             col*= diff+ambient;\n         }\n     }\n     else col = COLTAB[0];\n     if (obj.x > MAX_DIST) col = vec3(0.0);\n     \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.0*fragCoord - iResolution.xy)/iResolution.y;\n    //vec2 uv = (fragCoord/iResolution.y);\n    //uv.x -= iResolution.x/iResolution.y/2.0;\n    //uv.y -= 0.5;\n\n    vec3 col = vec3(0.0);\n    render(col, uv);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 ifrag = ivec2(fragCoord);  //this is nigthmare!\n    int i = int(ifrag.x); //atom's index\n    int subbuf = int(ifrag.y);\n//############ init ######################\n    if(iFrame==0){\n        switch(subbuf){\n        case BPOS_T:\n            fragColor = vec4(ATOMS[i]);\n            break;\n        case BVEL:\n            fragColor = vec4(0.0);\n            break;\n        case BROT:\n            fragColor = normalize(ATOMSROT[i]);\n            break;\n        }\n        return;\n    }\n\n//############ iFrame>0 ###############################\n    vec3 pos,vel,pos_i,pos_j;\n    float rad_i, rad_j;\n    vec4 postype;\n    vec3 newpos;\n    int type;\n    \n    postype = GETBUF(BPOS_T,i);\n    pos= postype.xyz;\n    vel = GETBUF(BVEL,i).xyz;\n    \n    if (subbuf == BPOS_T){\n        newpos=pos+vel;\n        fragColor = vec4(newpos,postype.w);\n        return;\n    }\n    else { //BVEL BROT\n        int type_i = int(postype.w);\n        \n        \n        if (pos.x + vel.x < -BOX.x){\n            vel.x = - vel.x;\n        }\n        if (pos.x + vel.x > BOX.x){\n            vel.x = - vel.x;\n        }\n        \n        if (pos.y + vel.y <  -BOX.y){\n            vel.y = - vel.y;\n        }\n        if (pos.y + vel.y > BOX.y){\n            vel.y = - vel.y;\n        }\n        \n        if (pos.z + vel.z < -BOX.z){\n            vel.z = - vel.z;\n        }\n\n        if (pos.z + vel.z > BOX.z ){\n            vel.z = - vel.z;\n        }\n        \n\n        pos_i= pos + vel;\n        \n        vec3 F = vec3(0.0);\n        vec3 Fn = vec3(0.0);\n        \n        rad_i = RADTAB[type_i];\n        \n        float f = 0.0;\n        \n        vec4 qni = ATOMS_Q[i];\n        float qi = qni.x+ qni.y+qni.z+qni.w;\n        vec4 rot_i = GETBUF(BROT,i);\n        vec4 totalrot = vec4(0.0,0.0,0.0,1.0);\n    \n        for (int j=0;j<ATOMS.length();j++){\n             if(i==j) continue;\n\n             vec3 vel_j = GETBUF(BVEL,j).xyz;\n             postype = GETBUF(BPOS_T,j);\n             pos_j = postype.xyz + vel_j;\n             float r = distance(pos_i, pos_j);\n             if(r==0.0) continue;\n\n             int type_j = int(postype.w);\n             vec3 delta = pos_i - pos_j;\n             float rad_j = RADTAB[type_j];\n             vec4 rot_j = GETBUF(BROT,j);\n             \n             vec4 qnj = ATOMS_Q[j];\n             \n             float qj = qnj.x+ qnj.y+qnj.z+qnj.w;\n\n\n             f = qi*qj *INTERACT_KOEFF/r;\n             F += f*delta/r;\n            \n         \n             if(r<NODEINTERACTD){\n         \n                f =0.0;\n                if (r<(rad_i+rad_j+REPULSION1)){\n                    f= 1.0/r * REPULSION_KOEFF1;\n                }\n                if (r<(rad_i+rad_j+REPULSION2)){\n                    f= 1.0/r * REPULSION_KOEFF2;\n                }\n        \n                F +=  delta/r*f;\n \n            \n                for(int ni = 0; ni<type_i; ni++){\n                    vec3 npos_i = get_node_pos(type_i,ni);\n                    vec3 ni_realpos = rotate_vector(npos_i, rot_i); \n                    for(int nj=0; nj<type_j; nj++){\n                       Fn = vec3(0.0); \n                       f = 0.0;\n                       vec3 npos_j = get_node_pos(type_j,nj);\n                       vec3 nj_realpos = rotate_vector(npos_j, rot_j);\n                       vec3 ndelta = ni_realpos - nj_realpos + delta;\n                       float rn = distance(ni_realpos+pos_i, nj_realpos+pos_j);\n                   \n                       if(rn<=BONDR){\n                            f= -rn*BOND_KOEFF;\n                       }\n                       if(rn>BONDR){\n                            f += qni[ni]*qnj[nj]*INTERACT_KOEFF*0.5/rn;\n    \n                       }\n                       if(rn!=0.0) Fn = f * ndelta/rn;\n\n                       F += Fn;  \n                       if(subbuf==BROT){\n                           vec3 target_direction = nj_realpos + pos_j - pos_i;\n                           vec3 v1 = normalize(ni_realpos);\n                           vec3 v2 = normalize(target_direction);\n                           if (v1!=v2){\n                                    float dt = dot(v1,v2);\n                                    dt = clamp(dt,-1.0,1.0);\n                                    vec3 axis = cross(v1,v2);\n                                    float angle = acos(dt);\n                                    angle = -angle * f * ROTA_KOEFF/MTAB[type_i]; //- stabilize\n                                    vec4 rot = normalize(vec4(sin(angle/2.0)* axis,cos(angle/2.0) )); // quat\n                                    totalrot = qmul(rot, totalrot);\n                           }\n                       }\n                   } //for nj\n    \n                }//for ni\n                \n             }//if nodes\n         \n         } //for j\n   \n       switch (subbuf){\n       case BVEL:\n           vel += F/MTAB[type_i];\n           vel = clamp(vel, vec3(-MAXVEL), vec3(MAXVEL));\n           fragColor = vec4(vel,1.0);\n           break;\n       case BROT:\n           fragColor = normalize(qmul(totalrot,rot_i));\n           break;\n       }\n   \n\n    } //BVEL BROT\n     \n\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define SCALE 0.01\n#define MAXVEL 3\n#define BONDR 4.0\n#define BOND_KOEFF 0.18\n#define ROTA_KOEFF 1.0\n#define INTERACT_KOEFF 0.5\n#define REPULSION_KOEFF1  20.0\n#define REPULSION1  -3.0\n#define REPULSION_KOEFF2  0.6\n#define REPULSION2  6.0\n#define NODEINTERACTD 60.0\n\n#define SHOWNODES     //little faster without\n\n\n#define GETBUF(BUFFER,index) texelFetch(iChannel0, ivec2(index,BUFFER),0)\n//#define GETBUFB(BUFFER,index) texelFetch(iChannel1, ivec2(index,BUFFER),0)\n\n//subbuffers\n#define BPOS_T 0\n#define BVEL 1\n#define BROT 3    //quaternion\n\n\n\nvec3 BOX = vec3(150.0,150.0,150.0);  //1/4\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n\nvec4 qmul(vec4 q1, vec4 q2)\n{\n         return vec4(\n             q2.xyz * q1.w + q1.xyz * q2.w + cross(q1.xyz, q2.xyz),\n             q1.w * q2.w - dot(q1.xyz, q2.xyz)\n         );\n}\n   \n// Vector rotation with a quaternion\n// http://mathworld.wolfram.com/Quaternion.html\nvec3 rotate_vector(vec3 v, vec4 r)\n{\n         vec4 r_c = r * vec4(-1.0, -1.0, -1.0, 1.0);\n         return qmul(r, qmul(vec4(v, 0.0), r_c)).xyz;\n}\n\n\n\n\n\nfloat RADTAB[5]= float[5](20.0,6.0,8.0,9.0,10.0);\nfloat MTAB[5]= float[5](100.0,1.0,16.0,14.0,12.0);\n\nvec3 COLTAB[6] = vec3[6]( vec3(1.0,0.0,1.0),\n                          vec3(0.0,0.0,1.0),\n                          vec3(1.0,0.0,0.0),\n                          vec3(0.5,0.5,0.5),\n                          vec3(1.0,1.0,0.0),\n                          vec3(1.0,0.0,1.0)\n                        );\n                        \n//nodes 1\nvec3 nodes1[1] = vec3[1]( vec3(            6.0,            0.0,            0.0 ));\n//nodes 2\nvec3 nodes2[2] = vec3[2]( vec3(            8.0,            0.0,            0.0 ),\n                          vec3(     -1.99628,      7.74693,            0.0 ));\n//nodes3\nvec3 nodes3[3] = vec3[3]( vec3(          9.0,          0.0,            0.0 ),\n                          vec3(         -4.5,      7.79423,            0.0 ),\n                          vec3(         -4.5,     -7.79423,            0.0 ));\n//nodes4\nvec3 nodes4[4] = vec3[4](   vec3(          0.0,          0.0,      10.0 ),\n                            vec3(      9.42816,          0.0,     -3.33313),\n                            vec3(     -4.71408,      8.16503,     -3.33313),\n                            vec3(     -4.71408,     -8.16503,     -3.33313 ));\n\n\n//just test\nfloat getv(vec4 v, int i){\n    switch(i){\n        case 0:\n            return v.x;\n        case 1:\n            return v.y;\n        case 2:\n            return v.z;\n        case 3:\n            return v.w;\n    }\n}\n\nvec3 get_node_pos(int type, int i){\n    switch(type){\n        case 1:\n            return nodes1[i];\n        case 2:\n            return nodes2[i];\n        case 3:\n            return nodes3[i];\n        case 4:\n            return nodes4[i];\n    }\n    \n}\n\n\nvec4 ATOMS[] = vec4[](\nvec4(       63.662,          6.5,  0.000152588,            4.0) ,\nvec4(       78.662,         11.5,  0.000152588,            1.0) ,\nvec4(       63.662,         -9.5,  0.000152588,            2.0) ,\nvec4(       78.662,         -8.5,  0.000152588,            1.0) ,\nvec4(      60.5461,          6.5,      19.6728,            4.0) ,\nvec4(       74.812,         11.5,      24.3081,            1.0) ,\nvec4(      60.5461,         -9.5,      19.6728,            2.0) ,\nvec4(       74.812,         -8.5,      24.3081,            1.0) ,\nvec4(      51.5036,          6.5,      37.4198,            4.0) ,\nvec4(      63.6389,         11.5,      46.2365,            1.0) ,\nvec4(      51.5036,         -9.5,      37.4198,            2.0) ,\nvec4(      63.6389,         -8.5,      46.2365,            1.0) ,\nvec4(      37.4196,          6.5,      51.5038,            4.0) ,\nvec4(      46.2363,         11.5,      63.6391,            1.0) ,\nvec4(      37.4196,         -9.5,      51.5038,            2.0) ,\nvec4(      46.2363,         -8.5,      63.6391,            1.0) ,\nvec4(      19.6726,          6.5,      60.5462,            4.0) ,\nvec4(      24.3079,         11.5,      74.8122,            1.0) ,\nvec4(      19.6726,         -9.5,      60.5462,            2.0) ,\nvec4(      24.3079,         -8.5,      74.8122,            1.0) ,\nvec4(          0.0,          6.5,      63.6621,            4.0) ,\nvec4(          0.0,         11.5,      78.6621,            1.0) ,\nvec4(          0.0,         -9.5,      63.6621,            2.0) ,\nvec4(          0.0,         -8.5,      78.6621,            1.0) ,\nvec4(     -19.6726,          6.5,      60.5462,            4.0) ,\nvec4(     -24.3079,         11.5,      74.8122,            1.0) ,\nvec4(     -19.6726,         -9.5,      60.5462,            2.0) ,\nvec4(     -24.3079,         -8.5,      74.8122,            1.0) ,\nvec4(     -37.4196,          6.5,      51.5038,            4.0) ,\nvec4(     -46.2364,         11.5,      63.6391,            1.0) ,\nvec4(     -37.4196,         -9.5,      51.5038,            2.0) ,\nvec4(     -46.2364,         -8.5,      63.6391,            1.0) ,\nvec4(     -51.5036,          6.5,      37.4198,            4.0) ,\nvec4(     -63.6389,         11.5,      46.2365,            1.0) ,\nvec4(     -51.5036,         -9.5,      37.4198,            2.0) ,\nvec4(     -63.6389,         -8.5,      46.2365,            1.0) ,\nvec4(     -60.5461,          6.5,      19.6728,            4.0) ,\nvec4(      -74.812,         11.5,      24.3081,            1.0) ,\nvec4(     -60.5461,         -9.5,      19.6728,            2.0) ,\nvec4(      -74.812,         -8.5,      24.3081,            1.0) ,\nvec4(      -63.662,          6.5,  0.000152588,            4.0) ,\nvec4(      -78.662,         11.5,  0.000152588,            1.0) ,\nvec4(      -63.662,         -9.5,  0.000152588,            2.0) ,\nvec4(      -78.662,         -8.5,  0.000152588,            1.0) ,\nvec4(     -60.5461,          6.5,     -19.6725,            4.0) ,\nvec4(      -74.812,         11.5,     -24.3077,            1.0) ,\nvec4(     -60.5461,         -9.5,     -19.6725,            2.0) ,\nvec4(      -74.812,         -8.5,     -24.3077,            1.0) ,\nvec4(     -51.5036,          6.5,     -37.4194,            4.0) ,\nvec4(     -63.6389,         11.5,     -46.2362,            1.0) ,\nvec4(     -51.5036,         -9.5,     -37.4194,            2.0) ,\nvec4(     -63.6389,         -8.5,     -46.2362,            1.0) ,\nvec4(     -37.4196,          6.5,     -51.5034,            4.0) ,\nvec4(     -46.2364,         11.5,     -63.6387,            1.0) ,\nvec4(     -37.4196,         -9.5,     -51.5034,            2.0) ,\nvec4(     -46.2364,         -8.5,     -63.6387,            1.0) ,\nvec4(     -19.6726,          6.5,      -60.546,            4.0) ,\nvec4(     -24.3079,         11.5,     -74.8119,            1.0) ,\nvec4(     -19.6726,         -9.5,      -60.546,            2.0) ,\nvec4(     -24.3079,         -8.5,     -74.8119,            1.0) ,\nvec4(          0.0,          6.5,     -63.6618,            4.0) ,\nvec4(          0.0,         11.5,     -78.6618,            1.0) ,\nvec4(          0.0,         -9.5,     -63.6618,            2.0) ,\nvec4(          0.0,         -8.5,     -78.6618,            1.0) ,\nvec4(      19.6726,          6.5,      -60.546,            4.0) ,\nvec4(      24.3079,         11.5,     -74.8119,            1.0) ,\nvec4(      19.6726,         -9.5,      -60.546,            2.0) ,\nvec4(      24.3079,         -8.5,     -74.8119,            1.0) ,\nvec4(      37.4196,          6.5,     -51.5034,            4.0) ,\nvec4(      46.2363,         11.5,     -63.6387,            1.0) ,\nvec4(      37.4196,         -9.5,     -51.5034,            2.0) ,\nvec4(      46.2363,         -8.5,     -63.6387,            1.0) ,\nvec4(      51.5036,          6.5,     -37.4194,            4.0) ,\nvec4(      63.6389,         11.5,     -46.2362,            1.0) ,\nvec4(      51.5036,         -9.5,     -37.4194,            2.0) ,\nvec4(      63.6389,         -8.5,     -46.2362,            1.0) ,\nvec4(      60.5461,          6.5,     -19.6725,            4.0) ,\nvec4(       74.812,         11.5,     -24.3077,            1.0) ,\nvec4(      60.5461,         -9.5,     -19.6725,            2.0) ,\nvec4(       74.812,         -8.5,     -24.3077,            1.0) );\n\nvec4 ATOMSROT[] = vec4[](\nvec4(     0.707107,          0.0,          0.0,     0.707107 ),\nvec4(  4.32978e-17,    -0.707107,     0.707107,  4.32978e-17 ),\nvec4(          0.0,          0.0,          0.0,            1 ),\nvec4(  4.32978e-17,    -0.707107,     0.707107,  4.32978e-17 ),\nvec4(     0.698401,    -0.110616,     0.110616,     0.698401 ),\nvec4(    -0.110616,    -0.698401,     0.698401,    -0.110616 ),\nvec4(          0.0,    -0.156434,          0.0,     0.987688 ),\nvec4(    -0.110616,    -0.698401,     0.698401,    -0.110616 ),\nvec4(     0.672499,    -0.218508,     0.218508,     0.672499 ),\nvec4(    -0.218508,    -0.672499,     0.672499,    -0.218508 ),\nvec4(          0.0,    -0.309017,          0.0,     0.951057 ),\nvec4(    -0.218508,    -0.672499,     0.672499,    -0.218508 ),\nvec4(     0.630037,     -0.32102,      0.32102,     0.630037 ),\nvec4(     -0.32102,    -0.630037,     0.630037,     -0.32102 ),\nvec4(          0.0,     -0.45399,          0.0,     0.891007 ),\nvec4(     -0.32102,    -0.630037,     0.630037,     -0.32102 ),\nvec4(     0.572061,    -0.415627,     0.415627,     0.572061 ),\nvec4(    -0.415627,    -0.572061,     0.572061,    -0.415627 ),\nvec4(          0.0,    -0.587785,          0.0,     0.809017 ),\nvec4(    -0.415627,    -0.572061,     0.572061,    -0.415627 ),\nvec4(          0.5,         -0.5,          0.5,          0.5 ),\nvec4(         -0.5,         -0.5,          0.5,         -0.5 ),\nvec4(          0.0,    -0.707107,          0.0,     0.707107 ),\nvec4(         -0.5,         -0.5,          0.5,         -0.5 ),\nvec4(     0.415627,    -0.572061,     0.572061,     0.415627 ),\nvec4(    -0.572061,    -0.415627,     0.415627,    -0.572061 ),\nvec4(          0.0,    -0.809017,          0.0,     0.587785 ),\nvec4(    -0.572061,    -0.415627,     0.415627,    -0.572061 ),\nvec4(      0.32102,    -0.630037,     0.630037,      0.32102 ),\nvec4(    -0.630037,     -0.32102,      0.32102,    -0.630037 ),\nvec4(          0.0,    -0.891007,          0.0,      0.45399 ),\nvec4(    -0.630037,     -0.32102,      0.32102,    -0.630037 ),\nvec4(     0.218508,    -0.672499,     0.672499,     0.218508 ),\nvec4(    -0.672499,    -0.218508,     0.218508,    -0.672499 ),\nvec4(          0.0,    -0.951057,          0.0,     0.309017 ),\nvec4(    -0.672499,    -0.218508,     0.218508,    -0.672499 ),\nvec4(     0.110616,    -0.698401,     0.698401,     0.110616 ),\nvec4(    -0.698401,    -0.110616,     0.110616,    -0.698401 ),\nvec4(          0.0,    -0.987688,          0.0,     0.156434 ),\nvec4(    -0.698401,    -0.110616,     0.110616,    -0.698401 ),\nvec4(  4.32978e-17,    -0.707107,     0.707107,  4.32978e-17 ),\nvec4(    -0.707107, -8.65956e-17,  8.65956e-17,    -0.707107 ),\nvec4(          0.0,           -1,          0.0,  6.12323e-17 ),\nvec4(    -0.707107, -8.65956e-17,  8.65956e-17,    -0.707107 ),\nvec4(    -0.110616,    -0.698401,     0.698401,    -0.110616 ),\nvec4(    -0.698401,     0.110616,    -0.110616,    -0.698401 ),\nvec4(          0.0,    -0.987688,          0.0,    -0.156434 ),\nvec4(    -0.698401,     0.110616,    -0.110616,    -0.698401 ),\nvec4(    -0.218508,    -0.672499,     0.672499,    -0.218508 ),\nvec4(    -0.672499,     0.218508,    -0.218508,    -0.672499 ),\nvec4(          0.0,    -0.951057,          0.0,    -0.309017 ),\nvec4(    -0.672499,     0.218508,    -0.218508,    -0.672499 ),\nvec4(     -0.32102,    -0.630037,     0.630037,     -0.32102 ),\nvec4(    -0.630037,      0.32102,     -0.32102,    -0.630037 ),\nvec4(          0.0,    -0.891007,          0.0,     -0.45399 ),\nvec4(    -0.630037,      0.32102,     -0.32102,    -0.630037 ),\nvec4(    -0.415627,    -0.572061,     0.572061,    -0.415627 ),\nvec4(    -0.572061,     0.415627,    -0.415627,    -0.572061 ),\nvec4(          0.0,    -0.809017,          0.0,    -0.587785 ),\nvec4(    -0.572061,     0.415627,    -0.415627,    -0.572061 ),\nvec4(         -0.5,         -0.5,          0.5,         -0.5 ),\nvec4(         -0.5,          0.5,         -0.5,         -0.5 ),\nvec4(          0.0,    -0.707107,          0.0,    -0.707107 ),\nvec4(         -0.5,          0.5,         -0.5,         -0.5 ),\nvec4(    -0.572061,    -0.415627,     0.415627,    -0.572061 ),\nvec4(    -0.415627,     0.572061,    -0.572061,    -0.415627 ),\nvec4(          0.0,    -0.587785,          0.0,    -0.809017 ),\nvec4(    -0.415627,     0.572061,    -0.572061,    -0.415627 ),\nvec4(    -0.630037,     -0.32102,      0.32102,    -0.630037 ),\nvec4(     -0.32102,     0.630037,    -0.630037,     -0.32102 ),\nvec4(          0.0,     -0.45399,          0.0,    -0.891007 ),\nvec4(     -0.32102,     0.630037,    -0.630037,     -0.32102 ),\nvec4(    -0.672499,    -0.218508,     0.218508,    -0.672499 ),\nvec4(    -0.218508,     0.672499,    -0.672499,    -0.218508 ),\nvec4(          0.0,    -0.309017,          0.0,    -0.951057 ),\nvec4(    -0.218508,     0.672499,    -0.672499,    -0.218508 ),\nvec4(    -0.698401,    -0.110616,     0.110616,    -0.698401 ),\nvec4(    -0.110616,     0.698401,    -0.698401,    -0.110616 ),\nvec4(          0.0,    -0.156434,          0.0,    -0.987688 ),\nvec4(    -0.110616,     0.698401,    -0.698401,    -0.110616 ));\n\n\nvec4 ATOMS_Q[] = vec4[](\nvec4(          1.0,         -1.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(         -1.0,         -1.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(          1.0,         -1.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(         -1.0,         -1.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(          1.0,         -1.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(         -1.0,         -1.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(          1.0,         -1.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(         -1.0,         -1.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(          1.0,         -1.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(         -1.0,         -1.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(          1.0,         -1.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(         -1.0,         -1.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(          1.0,         -1.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(         -1.0,         -1.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(          1.0,         -1.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(         -1.0,         -1.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(          1.0,         -1.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(         -1.0,         -1.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(          1.0,         -1.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(         -1.0,         -1.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(          1.0,         -1.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(         -1.0,         -1.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(          1.0,         -1.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(         -1.0,         -1.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(          1.0,         -1.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(         -1.0,         -1.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(          1.0,         -1.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(         -1.0,         -1.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(          1.0,         -1.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(         -1.0,         -1.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(          1.0,         -1.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(         -1.0,         -1.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(          1.0,         -1.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(         -1.0,         -1.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(          1.0,         -1.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(         -1.0,         -1.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(          1.0,         -1.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(         -1.0,         -1.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(          1.0,         -1.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(         -1.0,         -1.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ));\n\n\n\n//phenylalanine\n/*\nvec4 ATOMS[] = vec4[](\nvec4(     -35.3513,      7.88135,      6.77283,            4.0) ,\nvec4(      -45.021,      1.96542,      3.02771,            2.0) ,\nvec4(      -34.844,      14.0658,      22.7646,            2.0) ,\nvec4(     -48.5623,      12.4177,      25.0435,            1.0) ,\nvec4(     -22.2109,      10.5393,     -6.81256,            4.0) ,\nvec4(     -27.1709,      3.99106,     -19.1338,            1.0) ,\nvec4(     -5.50851,      6.65866,      2.71399,            4.0) ,\nvec4(      4.94595,      11.8325,     -4.77048,            1.0) ,\nvec4(     -9.54572,      12.2211,      16.4637,            1.0) ,\nvec4(     -17.6909,      27.4122,     -13.3407,            3.0) ,\nvec4(     -2.79419,      29.3936,     -14.5319,            1.0) ,\nvec4(     -29.3528,       35.322,     -14.0689,            1.0) ,\nvec4(      23.5322,      1.76001,     -1.31732,            4.0) ,\nvec4(      34.6211,     -4.57547,     -2.48236,            4.0) ,\nvec4(      34.6999,     -24.1633,     -1.43552,            4.0) ,\nvec4(      23.6179,      -30.588,      -0.3508,            4.0) ,\nvec4(      6.40063,     -21.0652,    -0.035675,            4.0) ,\nvec4(      6.35434,     -8.23425,     0.132874,            4.0) ,\nvec4(      26.4312,      16.1641,      1.09396,            1.0) ,\nvec4(      49.7749,     0.445923,     -1.99023,            1.0) ,\nvec4(      49.0134,     -31.0404,    -0.334503,            1.0) ,\nvec4(      26.2175,     -45.1166,     0.699738,            1.0) ,\nvec4(     -7.48248,     -27.3249,      1.63318,            1.0));\n\n\nvec4 ATOMSROT[] = vec4[](\nvec4(   -0.0582029,     0.134992,     0.258473,     0.954768 ),\nvec4(    0.0881047,    -0.130069,     -0.18426,     0.970241 ),\nvec4(     0.110257,    -0.436791,     0.891336,     -0.05077 ),\nvec4(  -0.00314392,    0.0867678,    0.0134135,     0.996133 ),\nvec4(     0.295375,    -0.178805,    -0.882511,     0.319308 ),\nvec4( -0.000166688,    -0.631942,   -0.0229808,     0.774675 ),\nvec4(      0.68789,     0.258845,    0.0235662,     0.677681 ),\nvec4(   -0.0617365,    -0.875542,     0.172972,     0.446874 ),\nvec4(     -0.34566,     0.601576,    -0.172537,     0.699182 ),\nvec4(   -0.0825799,    0.0532733,    0.0691951,     0.992751 ),\nvec4(   0.00957288,  0.000324861,     0.997465,   -0.0705138 ),\nvec4( -9.07866e-05,  -0.00150814,   -0.0693212,     0.997593 ),\nvec4(     0.132764,     0.323833,    -0.229291,     0.908257 ),\nvec4(    -0.150549,    -0.213478,     0.236886,      0.93576 ),\nvec4(     0.212732,     -0.90924,     0.198073,     0.297984 ),\nvec4(     0.208811,     0.935627,     0.106994,     0.263729 ),\nvec4(    -0.687901,    -0.649692,    -0.144429,     0.289537 ),\nvec4(     0.908242,     0.278268,    -0.173651,     0.259825 ),\nvec4(   -0.0807795,   -0.0166129,      0.90614,    -0.414859 ),\nvec4(   -0.0368233,   -0.0044737,     0.997165,   -0.0654715 ),\nvec4(    0.0440076,  -0.00882508,     0.965174,     0.257728 ),\nvec4(     0.105225,  -0.00809784,     0.891348,     0.440864 ),\nvec4(   0.00194998,  -0.00781425,     0.037937,     0.999248 ));\n\nvec4 ATOMS_Q[] = vec4[](\nvec4(          1.0,           0.0,          1.0,            1 ),\nvec4(         -1.0,         -1.0,           0.0,           0.0 ),\nvec4(         -1.0,         -1.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(           0.0,         -1.0,           0.0,            1 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(           0.0,         -1.0,         -1.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(         -1.0,         -1.0,         -1.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(           0.0,           0.0,         -1.0,           0.0 ),\nvec4(           0.0,         -1.0,           0.0,           0.0 ),\nvec4(           0.0,           0.0,           0.0,           -1 ),\nvec4(           0.0,           0.0,           0.0,           -1 ),\nvec4(           0.0,           0.0,           0.0,           -1 ),\nvec4(           0.0,           0.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ),\nvec4(          1.0,           0.0,           0.0,           0.0 ));\n*/\n","name":"Common","description":"","type":"common"}]}