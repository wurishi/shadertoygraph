{"ver":"0.1","info":{"id":"4dKyRV","date":"1523126885","viewed":1045,"name":"Misty Mountain Hop","username":"Hamneggs","description":"I wanted to make a weird 80's mountain thing, but I accidentally made a somber ode to Tiny Wings.","likes":45,"published":1,"flags":32,"usePreview":0,"tags":["2d","sun","fog","mountains","misty"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// #quickandmessy\n\nvec4 shadeSky( in vec2 uv )   \n{\n    // Distance from the center of the sun.\n    float ds = length((uv-SUNPOS_N)*vec2(.5,1.));\n    \n    return mix(vec4(.8,0,.2,1),vec4(.1,0,.4,1),pow(ds,.5));\n}\n\nvec4 shadeMountains( in vec2 uv )\n{\n    // Get the raw mountain texel.\n    vec4 m = texture(iChannel0,uv);\n    \n    float isMtn = step(.001,m.a);\n    \n    // Get a nice round looking top.\n    float top = (uv.y/m.y)*isMtn;\n    top = .75*pow(top,44.0); \n    \n    // Now we can also add stripes.\n    float pattern = (m.z+uv.x+uv.y*iResolution.y/iResolution.x);\n    pattern = mod(pattern*100.*(1.0-m.a),2.0);\n    pattern = floor(pattern);\n    \n    // Return a vec4 that's a mix between the two stripe colors with\n    // a \"depth\" based alpha, and clamped between 0 and 1.\n    return clamp(vec4(mix(vec3(.273438,0,.164063),vec3(.5,0,.117188),pattern)*top,m.a),0.0,1.0);\n}\n\nvec4 shadeSun( in vec2 uv )\n{\n    // Get a texel from the sunshaft buffer.\n    vec4 sun = texture(iChannel1,uv);\n    \n    // This one is simple.\n    return sun * vec4(1.4,.75,.9,.8);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 mountain = texture(iChannel0,uv);\n    fragColor = mountain.rrrr*mountain.a;\n    \n    // Come up with the sky color.\n    vec4 s = shadeSky(uv);\n    \n    // Get a texel from the mountain scene.\n    vec4 m = shadeMountains(uv);\n    \n    // Get the sample from the sunshafts.\n    vec4 sun = shadeSun(uv);\n    \n    // Add everything together based on alpha.\n    fragColor = s;\n    fragColor = mix(fragColor,m,m.a);\n    fragColor = mix(fragColor,sun,sun.a);\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/**\n * This pass just renders the mountains, with the ground being black and\n * the sky being white.\n */\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float time = iTime*TSCALE;\n    \n    // Okay, now we're going to draw an eff-ton of mountains,\n    // their layers stored in the alpha.\n    vec3 m0 = mountain(uv, iTime, TSCALE*.1250, NSCALE, .905, .5, .40, iChannel0).rgb;\n    vec3 m1 = mountain(uv, iTime, TSCALE*.3750, NSCALE, .192, .5, .35, iChannel0).rgb;\n    vec3 m2 = mountain(uv, iTime, TSCALE*.5000, NSCALE, .4, .5, .30, iChannel0).rgb;\n    vec3 m3 = mountain(uv, iTime, TSCALE*.6250, NSCALE, .6, .5, .25, iChannel0).rgb;\n    vec3 m4 = mountain(uv, iTime, TSCALE*.7500, NSCALE, .8, .5, .20, iChannel0).rgb;\n    vec3 m5 = mountain(uv, iTime, TSCALE*1.000, NSCALE, .9, .5, .15, iChannel0).rgb;\n  \n    fragColor = mix(vec4(0),   vec4(m0,.1), m0.r);\n    fragColor = mix(fragColor, vec4(m1,.2), m1.r);\n    fragColor = mix(fragColor, vec4(m2,.3), m2.r);\n    fragColor = mix(fragColor, vec4(m3,.4), m3.r);\n    fragColor = mix(fragColor, vec4(m4,.5), m4.r);\n    fragColor = mix(fragColor, vec4(m5,.6), m5.r);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define SUNPOS_N  vec2(.22,.6667)\n#define SUNPOS_SS vec2(.5,-.1667)\n\n#define NSCALE .025\n#define TSCALE .2\n#define BSAMPS 128\n\n\n// 1D texture lookup noise.\nfloat n1( in float x, in sampler2D t){\n    vec2 uv = vec2(fract(x),floor(x)/256.0);\n    return texture(t,uv).r;\n}\n\n// 4 octave fbm.\nfloat fbm1( in float x, in sampler2D t)\n{\n    float r =  n1(x    ,t)*.50000;\n    \t  r += n1(x*2.0,t)*.25000;\n    \t  r += n1(x*4.0,t)*.12500;\n    \t  r += n1(x*8.0,t)*.06250;\n    \t  r += n1(x*8.0,t)*.03125;\n    \t  return r*1.03225;\n    \n}\n\nvec3 mountain( in vec2 uv, in float time, in float tscale,\n              in float nscale, in float noffset, in float height,\n              in float voffset, in sampler2D tex)\n{\n    time *= tscale;\n    uv.x += time;\n    uv.x *= nscale;\n    \n    float n = fbm1(uv.x+noffset,tex)*height + voffset;\n    return vec3(step(uv.y,n),n,mod(time,10.0)); // So we don't get pattern stutter.\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\nfloat sun( in vec2 uv )\n{\n    // We want square pixels for this.\n    uv -= .5;\n\tuv.x *= iResolution.x/iResolution.y;\n    uv += SUNPOS_SS;\n    \n    return step(length(uv),.05);\n}\n\n#define MASK(c) ((1.-texture(iChannel0,c).r)*sun(c))\n\n// Mildly golfed version of https://www.shadertoy.com/view/lsKyDD\nfloat rblur( in vec2 uv, in vec2 c, float f )\n{\n    uv -= c;\n    float inv = 1.0 / float(BSAMPS),r=0.0,r0=0.0,r1=0.0,r2=0.0,r3=0.0;\n    vec4 ind = vec4(0,1,2,3), s = vec4(0);\n    \n    for( int i = 0; i < BSAMPS; i+=4 )\n    {\n        s = ind*inv;\n        r0 = MASK(uv*s.x + c);r1 = MASK(uv*s.y + c);\n        r2 = MASK(uv*s.z + c);r3 = MASK(uv*s.w + c);\n        ind += 4.0;\n        r += r0+r1+r2+r3;\n    }\n    return pow(r * inv,f);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float b = rblur(uv,SUNPOS_N,1.75);\n    fragColor = vec4(vec3(step(.0001,b)),b);\n}","name":"Buf B","description":"","type":"buffer"}]}