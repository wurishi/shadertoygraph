{"ver":"0.1","info":{"id":"dtdczN","date":"1698967030","viewed":37,"name":"Melted Christmas","username":"kp1197","description":"A truly hideous shader.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fbm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst vec3 N = vec3(0.1);\nconst vec3 A = vec3(0.5,0.1,0.1);\nconst vec3 B = vec3(0.1,0.5,0.1);\nconst vec3 C = vec3(0.1,0.1,0.5);\nconst vec3 D = vec3(0.9);\n\n// hash, simplex_noise, fbm functions by or derived from work by Inigo Quilez\n\n\nvec2 hash( vec2 p )\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat simplex_noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\n\n\n\nconst mat2 mtx = mat2( vec2(0.80,  0.60), vec2(-0.60,  0.80 ));\n\n\nfloat fbm( vec2 p )\n{\n    float f = 0.0;\n\tf += simplex_noise(p); \n\tp = mtx*p*1.99;\n\tf += 0.50000*simplex_noise(p ); \n\tp = mtx*p*1.99;\n\tf += 0.25000*simplex_noise(p  ); \n\tp = mtx*p*1.99;\n\tf += 0.125000*simplex_noise(p); \n\tp = mtx*p*1.99;\n\tf += 0.062500*simplex_noise(p); \n\treturn f;\n}\n\nfloat fbm_(vec2 p) {\n    float t1 = fbm(vec2(p.x,iTime/10.)) - 0.5;\n    float t2 = fbm(vec2(p.y,iTime/10.)) - 0.5;\n    return fbm(p + t1 * fbm(p + t2 * fbm(p) ) );\n}\n\nfloat a(vec2 p) {\n\treturn exp(fbm_( mtx  * p / (2.02)));\n}\n\nfloat b(vec2 p) {\n\treturn exp(fbm_( mtx * mtx * p / (2.02 * 2.02)));\n}\n\nfloat c(vec2 p) {\n\treturn exp(fbm(mtx * mtx * mtx * p / (2.02 * 2.02 * 2.02)));\n}\n\nfloat d(vec2 p) {\n\treturn exp(fbm_( mtx * mtx * mtx * p / (2.02 * 2.02 * 2.02 * 2.02)));\n}\n\nconst float ZOOM = 1.0;\n\nvec3 fragment(vec2 UV) {\n\t\n\tvec2 p = 2.0 * (UV - 0.5);\n\tp = p * ZOOM;\n\t\n\t// zones w/ softmax applied\n\tfloat n_ = exp(0.5);\n\tfloat a_ = exp(a(p));\n\tfloat b_ = exp(b(p));\n\tfloat c_ = exp(c(p));\n\tfloat d_ = exp(d(p));\n\tfloat softmaxDenominator = n_ + a_ + b_ + c_ + d_;\n    n_ /= n_;\n\ta_ /= softmaxDenominator;\n\tb_ /= softmaxDenominator;\n\tc_ /= softmaxDenominator;\n\td_ /= softmaxDenominator;\n\t\n\t// zone base color for viz\n\tvec3 color = n_ * N +\n        a_ * A + \n\t\tb_ * B +\n\t\tc_ * C + \n\t\td_ * D;\n\t\t\n\treturn color;\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 UV = fragCoord.xy/iResolution.xx;\n    vec3 col = fragment(UV);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}