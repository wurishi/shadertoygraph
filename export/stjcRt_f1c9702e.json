{"ver":"0.1","info":{"id":"stjcRt","date":"1650175930","viewed":217,"name":"Pixel Sorting 4x","username":"kastorp","description":"same as [url]https://www.shadertoy.com/view/4dcGDf[/url]\nuisng a branchless sort of 8 neighbors at each frame","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["pixel","sorting"],"hasliked":0,"parentid":"XdcGWf","parentname":"Pixel Sorting"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"//pixel Sorting 4x by Kastorp\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//pixel Sorting 4x by Kastorp\n\n#if 1 \n    int id=0;\n    //hierarchical\n    vec4[2] sort2(vec4 a,vec4 b) {\n        return vec4[2]((a[id])<(b[id])?a:b,a[id]<b[id]?b:a);\n    }\n\n    vec4[4] sort4(vec4 v0, vec4 v1, vec4 v2,vec4 v3){\n         vec4[2] vA=sort2(v0,v1),vB=sort2(v2,v3), vC=sort2(vA[0],vB[0]), vD=sort2(vA[1],vB[1]), vE=sort2(vC[1],vD[0]);\n        return vec4[4](vC[0],vE[0],vE[1],vD[1]);\n    }                \n    vec4[4] sort4(vec4[4] v){return  sort4(v[0],v[1],v[2],v[3]);}\n\n    vec4[8] sort8(vec4 v0, vec4 v1, vec4 v2,vec4 v3,vec4 v4, vec4 v5,vec4 v6,vec4 v7){\n         vec4[4] vA=sort4(v0,v1,v2,v3),\n              vB=sort4(v4,v5,v6,v7),\n              vC=sort4(vA[0],vA[1],vB[0],vB[1]), \n              vD=sort4(vA[2],vA[3],vB[2],vB[3]),\n              vE=sort4(vC[2],vC[3],vD[0],vD[1]);\n        return vec4[8](vC[0],vC[1],vE[0],vE[1],vE[2],vE[3],vD[2],vD[3]);\n    }\n    vec4[8] sort8(vec4[8] v, bool vert){id=vert?0:1; return  sort8(v[0],v[1],v[2],v[3],v[4],v[5],v[6],v[7]);}\n#else\n    //sorting network https://www.shadertoy.com/view/XsXGDX\n    #define SWAP(a,b)  if((v[a][id])>(v[b][id])) {vec4 t = v[a]; v[a] =v[b]; v[b] = t; }\n\n    vec4[8] sort8(vec4[8] v,bool vert){\n        int id=vert?0:1;\n        SWAP(0, 1);  SWAP(2, 3); SWAP(0, 2); SWAP(1, 3); SWAP(1, 2); SWAP(4, 5); SWAP(6, 7); SWAP(4, 6); SWAP(5, 7); SWAP(5, 6); SWAP(0, 4); SWAP(1, 5); SWAP(1, 4); SWAP(2, 6); SWAP(3, 7); SWAP(3, 6); SWAP(2, 4); SWAP(3, 5); SWAP(3, 4);\n        return v;\n    }\n\n#endif\n\nvec4 hash42(vec2 p)\n{\n\tvec4 p4 = fract(vec4(p.xyxy) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n\n}\nvoid mainImage( out vec4 O, in vec2 U )\n{\n           \n    if(iFrame<10 || texelFetch(iChannel0,ivec2(iResolution.xy-1.),0)==vec4(0.)){ \n        O.xy=hash42(U/iResolution.xy).xy;return;\n    }\n    float t=1.;\n    if(iMouse.z>0. && length(U-iMouse.xy)<iResolution.y*.05) t=1.5- .5* length(U/iResolution.xy);    \n    \n    bool vert= (iFrame&2)>0; //vertical or horizontal \n    int i=vert? int(U.y):int(U.x), \n        s= ((i&4)/4 == (iFrame&1)) ?0:1, //s switch \n        m= s*4 +(i&3), //relative position\n        h= min(i -(i&3),i -(i&3)-s*4) ; //first position in array  \n                \n    vec4[8] P;\n    for(int k=0;k<8;k++){\n        if(vert) P[k] =  texelFetch(iChannel0,ivec2(U.x,h+k),0)*t;\n        else P[k]=  texelFetch(iChannel0,ivec2(h+k,U.y),0)*t;\n    }\n    \n    if(h>=0 && h+4  < (int(vert?iResolution.y:iResolution.x)&4092) )  O =sort8(P,vert)[m]; \n    else O=vec4(P[m]);\n    \n\n}\n","name":"Buffer A","description":"","type":"buffer"}]}