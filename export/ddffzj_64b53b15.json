{"ver":"0.1","info":{"id":"ddffzj","date":"1688946335","viewed":40,"name":"psych wave","username":"AntonJeva","description":"waves with colors changing over time. a very simple shader.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["wave","shader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//variables to play with\n#define scale 3.5\n#define speed .1\n\n#define red_shift .01\n#define green_speed 1.\n\n#define red_scale .9\n#define green_scale .8\n#define blue_scale 1.\n\n#define cube(i) i*i*i\n\n//distance\nfloat dist(vec2 p1, vec2 p2) {\n    vec2 d = p1-p2;\n    d.x *= d.x;\n    d.y *= d.y;\n    return sqrt(d.x + d.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates\n    vec2 uv = fragCoord.xy/iResolution.xy - .5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    //distance and ripple base, fract(r) for ripples\n    float d = dist(uv, vec2(0., 0.));\n    float rb = d*scale-iTime*speed;\n    \n    //rgb\n    float red = fract(rb-red_shift);\n    red = cube(red)*red_scale;\n    \n    float green = cube(sin(iTime*speed*green_speed));//squeezed sine of time\n    green *= fract(rb)*green*green_scale;\n    \n    float blue = fract(rb)*blue_scale;\n    \n    // Output to screen\n    fragColor = vec4(red, green, blue, 1.0);\n}","name":"Image","description":"","type":"image"}]}