{"ver":"0.1","info":{"id":"fsKSR3","date":"1635100510","viewed":167,"name":"After Effects: Levels","username":"barton","description":"Possible implementation of Levels effect from After Effects","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["effect","effects","levels","aftereffects","aftereffects","aftereffects","after"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \n//\n// Somewhere I made full replication of some plugins/effects from After Effects.\n// All plugins are written in C++ and use Metal for rendering.\n// So, I would like to demonstrate some of them.\n//\n// This shader shows possible implementation of Levels effect from After Effects.\n//\n// Effect Inputs:\n// - Channel: RGB|Red|Green|Blue|Alpha\n// - Histogram\n// - Input Black\n// - Input White\n// - Gamma\n// - Output Black\n// - Output White\n//\n// So, this shader shows Levels effect in action but only changing Input Black parameter.\n//\n// The link about effect. The video is not mine, it's just for effect demonstration.\n// https://www.youtube.com/watch?v=UHFnAwZlzCA\n// https://www.youtube.com/watch?v=nP47ynBc3B8\n// \n\nconst float minInputBlack = 0.0;\nconst float maxInputBlack = 255.0;\n\nconst float minInputWhite = 0.0;\nconst float maxInputWhite = 255.0;\n\nconst float minGamma = 0.0;\nconst float maxGamma = 5.0;\n\nconst float minOutputBlack = 0.0;\nconst float maxOutputBlack = 255.0;\n\nconst float minOutputWhite = 0.0;\nconst float maxOutputWhite = 255.0;\n\nvec3 gammaControl(vec3 color, float gamma) {\n    float r = pow(color.r, 1.0 / gamma);\n    float g = pow(color.g, 1.0 / gamma);\n    float b = pow(color.b, 1.0 / gamma);\n    return vec3(r, g, b);\n}\n\nvec3 inputControl(vec3 color, float minInput, float maxInput) {\n    return (color - minInput) / (maxInput - minInput);\n}\n\nvec3 outputControl(vec3 color, float minOutput, float maxOutput) {\n    float r = mix(minOutput, maxOutput, color.r);\n    float g = mix(minOutput, maxOutput, color.g);\n    float b = mix(minOutput, maxOutput, color.b);\n    return vec3(r, g, b);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 outColor = texture(iChannel0, uv);\n\n    float value = abs(sin(iTime * 0.5));\n    \n    // Generating only inputBlack for demonstration.\n    float inputBlack = mix(minInputBlack + 50.0, maxInputBlack - 50.0, value);\n    float inputWhite = 255.0;\n    float gamma = 1.0;\n    float outputBlack = 0.0;\n    float outputWhite = 255.0;\n    \n    outColor.rgb = outputControl(gammaControl(inputControl(outColor.rgb, inputBlack/255.0, inputWhite/255.0), gamma), outputBlack/255.0, outputWhite/255.0);\n\n    fragColor = outColor;\n}","name":"Image","description":"","type":"image"}]}