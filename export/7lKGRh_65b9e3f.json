{"ver":"0.1","info":{"id":"7lKGRh","date":"1637183678","viewed":326,"name":"FPS Gauge","username":"AntoineC","description":"Display current, average and min fps as bars. Useful when working on shaders with non uniform GPU usage and to check performance in fullscreen.  ","likes":9,"published":1,"flags":32,"usePreview":0,"tags":["tool"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ----------------------------------------------------------------------------------------\n//\t\"FPS Gauge\" by Antoine Clappier - Nov 2021\n//\n//\tLicensed under:\n//  A Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.\n//\thttp://creativecommons.org/licenses/by-nc-sa/4.0/\n// ----------------------------------------------------------------------------------------\n\n// Fps gauges:\n//   - Top bar   : current fps\n//   - Middle bar: moving average on last 60 frames \n//   - Bottom bar: lowest fps since start \n//\n// Colors:\n//   - [ 0  15] fps: dark red\n//   - [15  30] fps: red\n//   - [30  45] fps: dark orange\n//   - [45  60] fps: orange\n//   -   > 60   fps: green\n\n\n// Modify AA to increase/lower fps:\n#define AA 3.0\n\n\n\n#define t (iTime/8.0)\n#define ZERO float(min(iFrame,0))\nvoid SampleShader(out vec4 fragColor, in vec2 p)\n{\n    float s = 0.0;\n    for(float m = ZERO; m < AA*AA; m++)\n    {\n        vec3 z = vec3(0.0);\n        vec2 c = (vec2(floor(m/AA), mod(m,AA))/AA + p - 0.5*iResolution.xy)/iResolution.y;\n             c = mat2(cos(0.5*t),-sin(0.5*t),sin(0.5*t),cos(0.5*t))*c*pow(2.0, -7.2*(1.0+sin(t-1.5707))) + vec2(-0.74915, 0.1);\n        for( ; z.z<250.0; z.z++ )\n        {\n            z.xy = z.xx*z.xy + z.yy*vec2(-z.y, z.x) + c; \n            if(length(z.xy)>32.0 ) break;\n        }\n        s += z.z==250.0 ? 0.10-0.08*sin(20.0*pow(max(0.0,length(z.xy)),0.5)) \n                        : pow(1.0-fract(20.0*(z.z - log2(2.0*log2(length(z.xy))))/250.0), 0.7);\n    }\n    fragColor = vec4(pow(s/AA/AA,1./2.2));\n   \tfragColor.rgb += fract(sin(mat3(1.1,3.7,7.7,2.5,8.3,6.1,3.5,1.9,4.6)*vec3(p,fract(iTime)))*43758.5453123)/255.0;\n}\n\n\n\n\n\n// --------------------------------------------------------------------\n// --------------------------------------------------------------------\n\nvoid FpsGauge(inout vec4 c, in vec2 p)\n{\n    vec3 low = vec3(1.,0.,0.), mid = vec3(1.,.5,0.), hgh = vec3(0.,1.,0.);\n    int x = int(p.x/30.0);\n   \tif(p.y < 10.0)\n\t{\n        // Min FPS:\n\t\tfloat f = 2.0*Load(mMinFps);\n\t\tc.rgb = mix(0.5*(1.5+float(x%2))*(x<2?low:(x<4?mid:hgh)), c.rgb, vec3(p.x>f));\n\t}\n   \telse if(p.y > 11.0 && p.y < 20.0)\n\t{\n        // Moving average:\n   \t\tfloat f = 2.0*Load(mAverageFps60);\n\t\tc.rgb = mix(0.5*(1.5+float(x%2))*(x<2?low:(x<4?mid:hgh)), c.rgb, vec3(p.x>f));\n\t}\n   \telse if(p.y > 21.0 && p.y < 30.0)\n\t{\n        // Current FPS:\n\t\tfloat f = 2.0/iTimeDelta;\n\t\tc.rgb = mix(0.5*(1.5+float(x%2))*(x<2?low:(x<4?mid:hgh)), c.rgb, vec3(p.x>f));\n\t}\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    SampleShader(fragColor, fragCoord);\n\n    FpsGauge(fragColor, fragCoord);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    if(fragCoord.y > 2.0)\n    {\n        discard;\n    }\n\n\t// Current fps:\n\tfloat fps = 1.0/iTimeDelta;\n\n    // FPS moving average on 20 and 60 frames:\n\tfloat averageFps20 = Load(mAverageFps20) + (fps - Load(mFps60 + vec2((iFrame+60-20)%60, 0))) / 20.0;\n\tfloat averageFps60 = Load(mAverageFps60) + (fps - Load(mFps60 + vec2((iFrame+60-60)%60, 0))) / 60.0;\n\n    // Min FPS is calculated on an average to avoid spurious FPS change:\n    //  Drop the 30 first frames\n\tfloat minFps = Load(mMinFps);\n    minFps = iFrame < 30 ? fps :  min(minFps, averageFps20);\n\n\t// Store:\n\tfragColor.a = fragCoord.y < 3.0 && fragCoord.x < 64.0 ? texture(iChannel0, fragCoord/iResolution.xy, -100.0).a : fragColor.a;\n    Store(mMinFps, minFps, fragColor, fragCoord);\n    Store(mAverageFps20, averageFps20, fragColor, fragCoord);\n    Store(mAverageFps60, averageFps60, fragColor, fragCoord);\n    Store(mFps60 + vec2(float(iFrame%60), 0), fps, fragColor, fragCoord);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// Load/Store from IQ (https://www.shadertoy.com/view/MddGzf)\nfloat isInside( vec2 p, vec2 c ) { vec2 d = abs(p-0.5-c) - 0.5; return -max(d.x,d.y); }\nfloat LoadInternal(in vec2 address, in sampler2D sampler, in vec2 resolution) {return texture(sampler, (0.5+address) / resolution, -100.0 ).a; }\nvoid Store(in vec2 address, in float value, inout vec4 fragColor, in vec2 fragCoord) { fragColor = (isInside(fragCoord,address) > 0.0) ? vec4(fragColor.rgb, value) : fragColor; }\n#define Load(address) LoadInternal((address), iChannel0, iResolution.xy)\n\nconst vec2 mMinFps       = vec2(0.0, 0.0);\nconst vec2 mAverageFps20 = vec2(1.0, 0.0);\nconst vec2 mAverageFps60 = vec2(2.0, 0.0);\nconst vec2 mFps60        = vec2(3.0, 0.0); // to vec2(63.0, 0.0)\n","name":"Common","description":"","type":"common"}]}