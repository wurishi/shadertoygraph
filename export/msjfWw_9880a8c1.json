{"ver":"0.1","info":{"id":"msjfWw","date":"1689788609","viewed":69,"name":"Droplets in a row","username":"Plecra","description":"Emulating the refraction of light through ripples on water. It's still a bit too clean, but some smart use of noise should do the trick :) We model the ripple as a carrier wave emanating from each point, attenuated by the energy as it travells outwards.","likes":3,"published":1,"flags":0,"usePreview":1,"tags":["2d","water","ripple"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PEAKS 7.\n#define CARRYING_PEAKS 2.\n#define PI radians(180.)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // setup our coordinate system\n\tvec2 uv = fragCoord.xy / iResolution.y; // fragment location\n    float gt = fract(iTime/3.); // local time.\n    float outr = 0.;\n    float outg = 0.;\n    vec2 distortion = vec2(0, 0);\n    for (int i = 0; i < 5; i++) {\n      vec2 p = vec2(.5 + 0.2*float(i), 0.5); // center of ripple\n      vec2 v = p - uv; // vector to center of ripple\n      float t = min(1., gt * 2. - float(i) * 0.2);\n      float radius = t;\n      float d = 2.*length(v) - radius; // get distance to ripple wavefront. is length(p + normalize(v) * radius - uv)\n    \n      float carrier = sin(PEAKS*2.*PI*d); // the carrier wave in the water\n      float span = d/(CARRYING_PEAKS/PEAKS); // which is span wide\n      float x = clamp(span + 1., -1., 1.); // \n      float energy = 1.-(x * x * (3. - 2.*abs(x)));\n      float magnitude = carrier * energy * pow(1. - t, 2.);\n      distortion += normalize(v) * magnitude;\n    }\n    fragColor.rgb = texture(iChannel0, uv - 0.11*distortion).rgb;\n    \n    vec3 n = vec3(distortion, sqrt(1. - dot(distortion, distortion)));\n    fragColor.rgb += 5.*pow(clamp(dot(n, normalize(vec3(-1., 0.6, 0.6))), 0., 1.), 6.);\n    //fragColor.r = outr;\n    //fragColor.g = outg;\n}","name":"Image","description":"","type":"image"}]}