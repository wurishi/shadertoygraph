{"ver":"0.1","info":{"id":"wdSfzK","date":"1590448694","viewed":66,"name":"Smiley Attempt 2 :P","username":"hopeliz","description":"Smiley attempt 2 based on a tutorial by The Art of Code:  https://youtu.be/ZlNnrpM0TRg\nCreated for Day 14 of a 100 Days of Shaders and Textures project","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["smiley"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define S(a, b, t) smoothstep(a, b, t)\n#define sat(x) clamp(x, 0.0, 1.0)\n\nfloat remap01(float a, float b, float t) {\n    return sat((t - a) / (b - a));\n}\n\nfloat remap(float a, float b, float c, float d, float t) {\n    return sat((t - a) / (b - a)) * (d - c) + c;\n}\n\nvec2 within(vec2 uv, vec4 rect) {\n    return (uv - rect.xy) / (rect.zw - rect.xy);\n}\n\nvec4 createEye(vec2 uv) {\n    // Re-center uv\n    uv -= 0.5;\n    \n    float dist = length(uv);\n    \n    // Create iris\n    vec4 irisColor = vec4(0.396, 0.263, 0.129, 1.0);\n    \n    vec4 irisColorInner = vec4(0.055, 0.169, 0.114, 0.5);\n    \n    // White of the eye\n    vec4 color = vec4(1.0);\n    \n    color = mix(color, irisColor, S(0.1, 0.7, dist) * 0.5);\n    \n    // Edge shadow for white of eyes\n    color.rgb *= 1.0 - S(0.45, 0.5, dist) * 0.5 * sat(-uv.y - uv.x);\n    \n    // Iris outline\n    color.rgb = mix(color.rgb, vec3(0.0), S(0.3, 0.28, dist));\n    \n    irisColor.rgb *= 0.75 + S(0.35, 0.07, dist) * irisColorInner.rgb * 5.0; \n    irisColorInner.rgb *= 1.0 + S(0.2, 0.05, dist);\n    \n    color.rgb = mix(color.rgb, irisColor.rgb, S(0.28, 0.27, dist));\n    //color.rgb = mix(color.rgb, irisColorInner.rgb, S(0.23, 0.20, dist));\n    \n    // Pupil\n    color.rgb = mix(color.rgb, vec3(0.0), S(0.15, 0.14, dist));\n    \n    // Highlights\n    float highlight = S(0.1, 0.05, length(uv - vec2(-0.15, 0.15)));\n    highlight += S(0.07, 0.01, length(uv - vec2(0.08, -0.08)));\n    \n    color.rgb = mix(color.rgb, vec3(1.0), highlight);\n    \n    color.a = S(0.5, 0.48, dist);\n    \n    return color;\n}\n\nvec4 createMouth(vec2 uv) {\n    // Reset origin\n    uv -= 0.5;\n    \n    vec4 color = vec4(0.5, 0.18, 0.05, 1.0);\n    \n    uv.y *= 1.6;\n    uv.y -= uv.x * uv.x * 4.0;\n    \n    float dist = length(uv);\n    color.a = S(0.3, 0.28, dist);\n    \n    // Teeth\n    float teethDist = length(uv - vec2(0.0, 0.45));\n    vec3 teethColor = vec3(1.0) * S(0.6, 0.35, dist);\n    color.rgb = mix(color.rgb, teethColor, S(0.4, 0.37, teethDist));\n    \n    // Tongue\n    float tongueDist = length(uv + vec2(0.0, 0.5));\n    color.rgb = mix(color.rgb, vec3(1.0, 0.5, 0.5), S(0.5, 0.2, tongueDist));\n    return color;\n}\n\nvec4 createHead(vec2 uv) {\n    // Orange color\n    vec4 color = vec4(0.9, 0.65, 0.1, 1.0);\n    \n    // Create a circle\n    float dist = length(uv);\n    color.a = S(0.5, 0.49, dist);\n    \n    // Create the edge shadow\n    float edgeShadow = remap01(0.35, 0.5, dist);\n    edgeShadow *= edgeShadow;\n    color.rgb *= 1.0 - edgeShadow * 0.5;\n    \n    // Create outline\n    color.rgb = mix(color.rgb, vec3(0.6, 0.3, 0.1), S(0.4799, 0.48, dist));\n    \n    // Create highlight\n    float highlight = S(0.41, 0.39, dist);\n    highlight *= remap(0.41, -0.1, 0.75, 0.0, uv.y);\n    color.rgb = mix(color.rgb, vec3(1.0), highlight);\n    \n    // Create cheeks\n    dist =  length(uv - vec2(0.25, -0.2));\n    float cheek = S(0.2, 0.01, dist) * 0.3;\n    cheek *= S(0.17, 0.16, dist);\n    color.rgb = mix(color.rgb, vec3(1.0, 0.1, 0.1), cheek);\n    \n    \n    return color;\n}\n\nvec4 createSmiley(vec2 uv) {\n    vec4 color = vec4(0.0);\n    \n    // Mirror face\n    uv.x = abs(uv.x);\n    \n    vec4 head = createHead(uv);\n    vec4 eye = createEye(within(uv, vec4(0.03, -0.1, 0.37, 0.25)));\n    vec4 mouth = createMouth(within(uv, vec4(-0.3, -0.41, 0.3, -0.11)));\n    \n    color = mix(color, head, head.a);\n    color = mix(color, eye, eye.a);\n    color = mix(color, mouth, mouth.a);\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    // Move origin to the center\n    uv -= 0.5;\n    \n    // Account for aspect ratio\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 color = vec3(0.0);\n\t\n    // Output to screen\n    fragColor = createSmiley(uv);\n}","name":"Image","description":"","type":"image"}]}