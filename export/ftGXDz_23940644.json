{"ver":"0.1","info":{"id":"ftGXDz","date":"1640451849","viewed":149,"name":"Twisting concentric rectangles","username":"akb74","description":"Create a base image consisting of concentric rectangles, then apply a twisting effect to it.","likes":0,"published":3,"flags":32,"usePreview":0,"tags":["polar","twist"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Here's where we try and apply interesting effect(s)/math/art to the base image\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n    // Normalized pixel coordinates (from 0 to 1)\n\tvec2 normalized = fragCoord.xy / iResolution.xy;\n    \n    vec2 fromCenter = normalized - vec2(0.5, 0.5);\n\n    // Convert to polar coordinates\n    float distance = sqrt((fromCenter.x * fromCenter.x) + (fromCenter.y * fromCenter.y));\n    float angle = atan(fromCenter.x, fromCenter.y);\n\n    // Mess with the angle\n    angle = angle + (sin(iTime * 0.5) * distance * 2.0);\n\n    // Convert back to cartesian coordinates\n    fromCenter = vec2(distance * cos(angle), distance * sin(angle));\n    vec2 uv = fromCenter + vec2(0.5, 0.5);\n\n    // Display the (distorted) base image\n    vec4 col = texture(iChannel0, uv);\n    fragColor = vec4(col.rgb, 1.);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// An attempt to copy u/camilleroux's base image, but making a complete mess of shapes and colors\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 normalized = fragCoord / iResolution.xy;\n\n    vec2 fromCenter = normalized - vec2(0.5, 0.5);\n    float rectRadius = max(abs(fromCenter.x), abs(fromCenter.y));\n    int band = int(ceil(16.0 * rectRadius));\n    \n    const float brightness = 0.7;\n    vec3 col;\n    \n    switch(band) {\n    case 4:\n    case 8:\n        col = brightness * vec3(1.0, 1.0, 1.0);\n        break;\n    case 3:\n    case 7:\n        col = brightness * vec3(0, 1.0, 1.0);\n        break;\n    case 2:\n    case 6:\n        col = brightness * vec3(1.0, 0.0, 0.0);\n        break;\n    case 1:\n    case 5:\n        col = brightness * vec3(1.0, 0.5, 0);\n        break;\n    default:\n        col = vec3(0.80, 0.80, 0.80);\n    }\n\n    // Output to screen\n    fragColor = vec4(col ,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}