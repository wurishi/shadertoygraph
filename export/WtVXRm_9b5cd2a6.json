{"ver":"0.1","info":{"id":"WtVXRm","date":"1582442661","viewed":141,"name":"Simple Star field","username":"hedyla2055","description":"A simple star field shader.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["starfield"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define FORTY_FIVE_DEGREES acos(-1.) / 4.\n#define SPACE_PURPLE vec3(0.409, 0.157, 0.567)\n#define WHITE vec3(1.0)\n#define ZOOM_OUT 6.8\n\nmat2 Rotate(float angle)\n{\n\tfloat c = cos(angle), s = sin(angle);\n    return mat2(c, -s, s, c); \n}\n\n// Random number between 0 and 1\nfloat Random(vec2 seed)\n{\n    seed = fract(seed * vec2(123.34, 456.21));\n\tseed += dot(seed, seed + 632.39);\n    return fract(seed.x * seed.y);\n}\n\n\nfloat Star(vec2 pos, float glow, float size)\n{\n    float d = length(pos);\n    float res = 0.01 / d;\n\t\n    float rays = max(0., 1.0 - abs(pos.x * pos.y) * 1000.) * glow * 0.3 * size;\n\tpos *= Rotate(FORTY_FIVE_DEGREES);\n    rays += max(0., 5. - abs(pos.x * pos.y) * 100000.) * glow * .2;\n    res += rays;\n        \n    // Fade the star light with distance\n    res *= smoothstep(1., .3, d) * size;\n    \n    return res;\n}\n\n// Remaps the global uv coord to cell uv coord\nvec2 Remap(vec2 pos, float rand, float origin)\n{\n\tvec2 pos_in_cell = fract(pos) - origin;\n    vec2 id = floor(pos); // get the id of the cell\n    pos_in_cell -= vec2(rand, fract(rand * 34.));\n    \n    return pos_in_cell;\n}\n\nfloat LayoutStars(vec2 pos)\n{\n    float res = 0.;\n    vec2 id = floor(pos);\n\tfor (int y = -4; y <= 4; ++y)\n    {\n    \tfor (int x = -4; x <= 4; ++x)\n        {\n            vec2 neighbor_id = vec2(x, y); // Adds neighboring star contribution\n        \tfloat rand = Random(id + neighbor_id);\n            res += Star(Remap(pos, rand, 0.7) - neighbor_id,\n                        rand * .3,\n                       \trand * 2.5);\n        }\n    }\n    \n    return res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n    uv *= ZOOM_OUT;\n    vec3 col = SPACE_PURPLE * .3;\n    vec2 id = floor(uv);\n    float randP = Random(cos(vec2(iTime)));\n    col += LayoutStars(uv)* (randP * SPACE_PURPLE + WHITE);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}