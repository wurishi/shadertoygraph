{"ver":"0.1","info":{"id":"MtjBRK","date":"1516552549","viewed":151,"name":"FloorCaster","username":"TheTophatDemon","description":"3D floor rendering through raytracing/raycasting.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raytracer","raycast","raytrace","floor","raycaster"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float floorHeight = -32.0;\nconst float ceilHeight = 32.0;\nconst float textureRes = 128.0;\nconst float fogDensity = 128.0;\n\n\nvec3 floorCast(vec3 o, vec3 d, float planeHeight)\n{\n    //Finds the point at which a ray intersects a certain y value.\n    //Equation of a ray:\n\t//p1 = p0 + d * t\n\t//We know p1.y is on the projection plane, so solve for t\n\t//p1.y = p0.y + d.y * t\n\t//p1.y - p0.y = d.y * t\n\t//(p1.y - p0.y) / d.y = t\n\t//Then plug t into x and z components of the equation\n\tfloat t = (planeHeight - o.y) / d.y;\n    return o+(d*t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    //Calculate the orientation of the ray for each pixel on screen.\n    //The top left ray points toward the top left corner of the camera frustrum, and so on.\n    vec2 uvCentered = vec2(-1.0) + (uv * 2.0);\n    vec3 camPos = vec3(0.0, 0.0, iTime * 50.0);\n    vec3 rayDir = vec3(uvCentered * vec2(1.0, 0.5), 1);\n    \n    //Transform rayDir to rotation\n    float yaw = radians(sin(iTime) * 20.0);\n    float pitch = radians(cos(iTime) * 20.0);\n    mat3 rotation = mat3(cos(yaw), 0.0, sin(yaw), 0.0, 1.0, 0.0, -sin(yaw), 0.0, cos(yaw));\n    rotation *= mat3(1.0, 0.0, 0.0, 0.0, cos(pitch), sin(pitch), 0.0, -sin(pitch), cos(pitch));\n    rayDir = normalize(rotation * rayDir);\n    \n    //Find point at which ray intersects floor; find corresponding texel.\n    vec4 color = vec4(1.0, 1.0, 1.0, 1.0);\n    vec3 projection = vec3(0.0);\n    if (rayDir.y <= 0.0)\n    {\n        projection = floorCast(camPos, rayDir, floorHeight);\n        color = texture(iChannel0, projection.xz / textureRes);\n    }\n    else\n    {\n        projection = floorCast(camPos, rayDir, ceilHeight);\n        color = texture(iChannel1, projection.xz / textureRes);\n    }\n    \n    //Fog: Divide color by distance squared\n    vec3 diff = projection.xyz - camPos + rayDir;\n    color /= clamp(((diff.x*diff.x) + (diff.z * diff.z) + (diff.y * diff.y)) / (fogDensity * 64.0), 1.0, 50.0);\n    \n    fragColor = vec4(color.xyz, 1.0);\n}","name":"Image","description":"","type":"image"}]}