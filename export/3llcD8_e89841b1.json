{"ver":"0.1","info":{"id":"3llcD8","date":"1591978457","viewed":197,"name":"Slicing example [Terah]","username":"Terah","description":"Example of slicing function","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["raymarcher","slice"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = acos(-1.);\nconst float TAU = 2.*PI;\n\n\nmat2 rot(float a) {\n  float ca=cos(a);\n  float sa=sin(a);\n  return mat2(ca,sa,-sa,ca);\n}\n\nfloat sdPlane( vec3 p, vec3 n, float h )\n{\n  return dot(p,normalize(n)) + h;\n}\n\nfloat sdBox(vec3 p, vec3 b, float s) {\n    vec3 d = abs(p) - b;\n  \treturn length(max(d,0.0)) + min(max(d.x,max(d.y,d.z)),0.0) - s; \n}\n\n// Slicing function example\nfloat slice(vec3 p, float objectToSlice, float a, float b) {\n    \n    vec3 p1 = p;\n    vec3 p2 = p;\n    \n    p1.xz *= rot(a);\n    p2.xz *= rot(b-PI);\n    \n    float d1 = sdPlane(p1, vec3(0.,0.,1.), 0.0);\n    float d2 = sdPlane(p2, vec3(0.,0.,1.), 0.0);\n    \n    float s = max(d1,d2);\n    \n    return max(objectToSlice,-s);\n}\n\nfloat map(vec3 p) {\n    \n    p.yz *= rot(-.5);\n    p.xz *= rot(PI*.5 + iTime*0.3);\n    \n    float box = sdBox(p, vec3(1), 0.05);\n    \n    // Angles for the slice\n    float a = -1.1 + sin(iTime); \n    float b = .7 + sin(iTime+PI*.5);\n    \n    // Slicing the box with angles a and b\n    float slicedObject = slice(p, box, a, b);\n\n    return slicedObject;\n}\n\nvec3 norm(vec3 p) {\n\tvec2 o=vec2(0.002, 0.0);\n    return normalize(vec3(\n        map(p+o.xyy)-map(p-o.xyy),\n        map(p+o.yxy)-map(p-o.yxy),\n        map(p+o.yyx)-map(p-o.yyx)\n    ));\n}\n\nvec3 march(vec3 s, vec3 r) {\n      \n    float d=0.0;\n    int i=0;\n    vec3 p=s;\n    \n    for (; i<100; ++i) {             \n        d = map(p);   \n        if (abs(d)<0.001) {\n            break;\n        }       \n        p+=d*r;\n    }        \n    \n    vec3 col = vec3(0.1);\n    float li = 1.;\n    \n    vec3 n = norm(p);\n    vec3 l = normalize(vec3(.5,1,-2));\n    float lb = max(0.0,dot(n,l));\n    col += lb * vec3(0.8,0.6,0.8) * li;\n    \n    vec3 h = normalize(l + -r);\n    float sa = max(dot(h, n), 0.0);\n    float sp = pow(sa, 5.0);\n    if (lb>0.0) {\n        col += sp * vec3(0.5,0.5,0.5);\n    }\n\n    float fog = 1.0-float(i)/100.0;\n\tcol = mix(vec3(0.01, 0.05, 0.05), col, fog);\n    \n    return col;\n    \n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    vec3 ro = vec3(0, 0, -5.0);\n    vec3 rd = normalize(vec3(uv, 1));\n\n    \n    vec3 col = march(ro, rd);\n\n    fragColor = vec4(col,1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}