{"ver":"0.1","info":{"id":"sslSDB","date":"1619366936","viewed":76,"name":"Zotov, magic pyramid, Task 2 ","username":"Zotik","description":"Сделана базовая часть.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["water","pyramid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst vec3 CAMERA_POS = vec3(7, 1.7, -2);\n\nconst vec3 LIGHT1_POS = vec3(-3, 1.5, 5);\nconst float LIGHT1_RADIUS = 0.5;\nconst vec3 LIGHT1_COLOR = vec3(1, 1, 1);\n\nconst vec3 LIGHT2_POS = vec3(1, 0.5, 2);\nconst float LIGHT2_RADIUS = 0.25;\nconst vec3 LIGHT2_COLOR = vec3(0.1, 1, 0.2);\n\nconst vec3 WATER1_POS = vec3(0, 0.3, 0);\nconst float WATER1_RADIUS = 0.45;\n\nconst vec3 BUBBLE1_POS = vec3(0.1, 0.4, 0.2);\nconst float BUBBLE1_RADIUS = 0.1;\n\n\nconst vec3 BUBBLE2_POS = vec3(0.1, 0.24, -0.2);\nconst float BUBBLE2_RADIUS = 0.07;\n\nconst vec3 BUBBLE3_POS = vec3(-0.1, 0.3, -0.2);\nconst float BUBBLE3_RADIUS = 0.02;\n\nconst vec3 BUBBLE4_POS = vec3(0.3, 0.35, -0.2);\nconst float BUBBLE4_RADIUS = 0.03;\n\nconst vec3 BUBBLE5_POS = vec3(0., 0.45, -0.2);\nconst float BUBBLE5_RADIUS = 0.04;\n\nconst vec3 BUBBLE6_POS = vec3(-0.3, 0.29, 0.);\nconst float BUBBLE6_RADIUS = 0.01;\n\nconst float EPS = 1e-5;\n\nvec3 randDir;\n\n\n// (CAMERA_POS + t * viewVec).y == -1\n// t = (-1 - CAMERA_POS.y) / viewVec.y;\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 225.0) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1. - EPS - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 2.) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 2.;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\nvec3 planeThrough3Points(vec3 p1, vec3 p2, vec3 p3) {\n    vec3 p1p2 = p1 - p2;\n    vec3 p1p3 = p1 - p3;\n    \n    vec3 normal = cross(p1p2, p1p3);\n    return normal;\n}\n\nfloat traceTriangle(vec3 pos, vec3 dir, out vec3 normal, vec3 x0, vec3 x1, vec3 x2)\n{\n    vec3 edge1, edge2, h, s, q;\n    float a,f,u,v;\n    edge1 = x1 - x0;\n    edge2 = x2 - x0;\n    h = cross(dir, edge2);\n    a = dot(edge1, h);\n    if (abs(a) < EPS) {\n        return INF;    \n    }\n    f = 1.0/a;\n    s = pos - x0;\n    u = dot(f * s, h);\n    if (u < 0.0 || u > 1.0) {\n        return INF;\n    }\n    q = cross(s, edge1);\n    v = dot(f * dir, q);\n    if (v < 0.0 || u + v > 1.0) {\n        return INF;\n    }\n    float t = dot(f * edge2, q);\n    if (t > EPS)\n    {\n        normal = normalize(cross(edge1, edge2));\n        return t;\n    }\n    return INF;\n}\n\n\nfloat tracePyramid(vec3 pos, vec3 dir, out vec3 normal)\n{\n    vec3 A = vec3(-1.,-1.0,-1.);\n    vec3 B = vec3(1.,-1.0,-1.);\n    vec3 C = vec3(1.,-1.0,1.);\n    vec3 D = vec3(-1.,-1.0,1.);\n    vec3 S = vec3(0,2.,0);\n    vec3 norm;\n    float t = INF;\n    float T;\n    T = traceTriangle(pos,dir,norm,B, A ,S);\n    if(T<t){\n        normal = norm;\n        t=T;\n    }\n    T = traceTriangle(pos,dir,norm, C, B, S);\n    if(T<t){\n        normal = norm;\n        t=T;\n    }\n    T = traceTriangle(pos,dir,norm,D, C ,S);\n    if(T<t){\n        normal = norm;\n        t=T;\n    }\n    T = traceTriangle(pos,dir,norm,A, D,S);\n    if(T<t){\n        normal = norm;\n        t=T;\n    }\n    T = traceTriangle(pos,dir,norm, B, A, D);\n    if(T<t){\n        normal = vec3(0., -1.0,0.);\n        t=T;\n    }\n    T = traceTriangle(pos,dir,norm,C,B,D);\n    if(T<t){\n        normal = vec3(0., -1.0,0.);\n        t=T;\n    }\n    return t;\n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 trNorm;\n    float trT = tracePyramid(pos, dir, trNorm);\n    if (trT < dist) return true;\n    \n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 20.0f / distSq1;\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 10.0f / distSq2;\n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + texture(iChannel1, normal).rgb * 0.1\n    );\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2, vec3 randVals, out bool flag) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    \n    if (sinB - 0.6 > randVals.x || sinB > 1.0){\n        flag = true;\n        return reflect(v, normal);\n    }\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5)) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    const float GLASS_N = 1.5;\n    const float AIR_N = 1.;\n    float n1 = AIR_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    const float WATER_N = 1.33;\n    float WATER_R = pow2(WATER_N - GLASS_N) / pow2(WATER_N + GLASS_N);\n    bool isFullResolation = false;\n    \n    vec3 colorMult = vec3(1, 1, 1);\n    \n    for (int i = 0; i < 20; ++i) {\n        randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        \n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb;\n            normal = planeNorm;\n        }\n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n        vec3 trNorm;\n        \n        float trT = tracePyramid(curPos, curDir, trNorm);\n        if (trT < t) {\n            t = trT;\n            normal = trNorm;\n            if (randVals.x < 5.*GLASS_R) {\n                materialType = REFLECTION;\n            } else {\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n                \n            }\n        }\n        vec3 sphNorm;\n        float sph2T = traceSphere(curPos - WATER1_POS + (randVals - 0.5) * 0.05, curDir, WATER1_RADIUS, sphNorm);\n        if (sph2T < t) {\n            t = sph2T;\n            normal = sphNorm;\n            if (randVals.x < WATER_R) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= vec3(0.5, 0.5, 1);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = GLASS_N;\n                } else {\n                    nEnter = WATER_N;\n                }\n            }\n        }\n        \n        sph2T = traceSphere(curPos - BUBBLE1_POS+ (randVals - 0.5) * 0.03, curDir, BUBBLE1_RADIUS, sphNorm);\n        if (sph2T < t) {\n            t = sph2T;\n            normal = sphNorm;\n            materialType = REFRACTION;\n            if (dot(curDir, normal) > 0.0) {\n                nEnter = WATER_N;\n            } else {\n                nEnter = AIR_N;\n            }\n        }\n        \n        sph2T = traceSphere(curPos - BUBBLE2_POS+ (randVals - 0.5) * 0.03, curDir, BUBBLE2_RADIUS, sphNorm);\n        if (sph2T < t) {\n            t = sph2T;\n            normal = sphNorm;\n            materialType = REFRACTION;\n            if (dot(curDir, normal) > 0.0) {\n                nEnter = WATER_N;\n            } else {\n                nEnter = AIR_N;\n            }\n        }\n        \n        sph2T = traceSphere(curPos - BUBBLE3_POS+ (randVals - 0.5) * 0.03, curDir, BUBBLE3_RADIUS, sphNorm);\n        if (sph2T < t) {\n            t = sph2T;\n            normal = sphNorm;\n            materialType = REFRACTION;\n            if (dot(curDir, normal) > 0.0) {\n                nEnter = WATER_N;\n            } else {\n                nEnter = AIR_N;\n            }\n        }\n        \n        sph2T = traceSphere(curPos - BUBBLE4_POS+ (randVals - 0.5) * 0.03, curDir, BUBBLE4_RADIUS, sphNorm);\n        if (sph2T < t) {\n            t = sph2T;\n            normal = sphNorm;\n            materialType = REFRACTION;\n            if (dot(curDir, normal) > 0.0) {\n                nEnter = WATER_N;\n            } else {\n                nEnter = AIR_N;\n            }\n        }\n        \n        sph2T = traceSphere(curPos - BUBBLE5_POS+ (randVals - 0.5) * 0.03, curDir, BUBBLE5_RADIUS, sphNorm);\n        if (sph2T < t) {\n            t = sph2T;\n            normal = sphNorm;\n            materialType = REFRACTION;\n            if (dot(curDir, normal) > 0.0) {\n                nEnter = WATER_N;\n            } else {\n                nEnter = AIR_N;\n            }\n        }\n        \n        sph2T = traceSphere(curPos - BUBBLE6_POS+ (randVals - 0.5) * 0.03, curDir, BUBBLE6_RADIUS, sphNorm);\n        if (sph2T < t) {\n            t = sph2T;\n            normal = sphNorm;\n            materialType = REFRACTION;\n            if (dot(curDir, normal) > 0.0) {\n                nEnter = WATER_N;\n            } else {\n                nEnter = AIR_N;\n            }\n        }\n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) {\n                fragColor.rgb = color * colorMult;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            } else if (materialType == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, nEnter, randVals, isFullResolation);\n                curPos = worldPos + curDir * 1e-5;\n                if (!isFullResolation){\n                    n1 = nEnter;\n                }\n            }\n        } else {\n            fragColor.rgb = texture(iChannel1, curDir).rgb * colorMult;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}