{"ver":"0.1","info":{"id":"MlyBRw","date":"1545230476","viewed":61,"name":"Activit√© 5","username":"Elra","description":"Shadow ray-casting","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["act5"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float FLT_MAX = 1000000.0; \nstruct Material {\n    float Ka; //ambiant coef\n    float Kd; //diffuse coef\n    float Ks; //specular coef\n    float Kn; //specular power coef\n};\n\n//sky parameters\nconst vec3 skyCol = vec3(0); //black\nconst int skyId = 0;\n    \n//Camera parameters\nconst vec3 cameraPos = vec3(6,4,-5);\nconst vec3 cameraTarget = vec3(3,1,-8);\nconst float cameraFovY = 80.0;\n\n//Sphere parammeters\nconst int sphereId = 1;\nconst vec3 spherePos = cameraTarget + vec3(0,1,2);\nconst float sphereRadius = 1.0;\nconst vec3 sphereCol = vec3(1,0,0); //red\nconst Material sphereMat = Material(0.2, 0.7, 1.0, 50.0);\n\n// Light(s) parameters\nconst vec3 ambiantCol = vec3(0,0,1);\nconst vec3 lightCol = vec3(1,1,1); //white\nconst vec3 lightPos = vec3(8, 10, -12);\n\n//Plane parameters\nconst vec3 planePos = vec3(0.,0.1,0.);\nconst vec3 planeNormal = vec3(0.,1.0,0);\nconst vec3 planeCol1 = vec3(1.0); //white\nconst vec3 planeCol2 = vec3(0.4); //gray\nconst Material planeMat = Material(0.2,1.0,0.2,5.0);\nconst int planeId = 2;\n\nfloat f, delta, a , b, c, t, t1, t2;\nvec2 pt;\nvec3 PT, cz, PO, cyT, cxT, cx, cy, OS, PS, SP, SO;\nfloat res=-1.0; float dir=1.0;\n\nvec2 transform_to_apply(vec2 fragCoord){\nvec2 pt;\npt = (2.0*fragCoord.xy - iResolution.xy) / iResolution.y;\nreturn pt;\n}\n\nvoid computeCameraRayFromPixel(in vec2 pixCoord, out vec3 rayPos, out vec3 rayDir){\nrayPos = cameraPos;\nf = 1.0/tan(radians(cameraFovY) / 2.0);\nPT = cameraTarget - cameraPos;\n\ncz = normalize(PT);\nPO = f * cz;\ncyT = vec3(0.0, -1.0, 0.0);\ncxT = cross(cyT, cz);\ncx = normalize(cxT);\ncy = cross(cz, cx);\npt = transform_to_apply(pixCoord);\nOS = pt.x * cx - pt.y * cy;\nPS = PO + OS;\nrayDir = normalize(PS);\n}\n\nfloat raySphere(vec3 rayPos, vec3 rayDir, vec3 spherePos, float sphereRadius, out vec3 intersecS,out vec3 normalS){\n    SO = rayPos - spherePos;\n    a = dot(rayDir, rayDir);\n    b = 2.0* dot(SO, rayDir);\n    c = dot(SO, SO) - dot ( sphereRadius, sphereRadius);\n    delta = b*b - 4.0*a*c;\n    if (delta <= 0.0){\n        res = -1.0;\n    }\n  \n    if (delta > 0.0){\n        t1 = (-b + sqrt(delta)) / 2.0*a;\n        t2 = (-b - sqrt(delta)) / 2.0*a;\n        if (t1 >=0.0 && t2 >=0.0){\n            res = t2;\n        }else {\n            res = -1.0;\n        }\n    }\n    return res;\n}\n\nvec3 computePhongShading(vec3 objectCol, Material objectMat,float shadowFactor, vec3 N, vec3 L, vec3 R, vec3 V){\n    vec3 ambiant = objectMat.Ka * ambiantCol;\n    vec3 diffuse  = objectMat.Kd * objectCol * lightCol * max(dot(N,L), 0.);\n    vec3 specular = objectMat.Ks * lightCol * pow(max(dot(R,V), 0.), objectMat.Kn);\n    \n    float shadowFactorSpec = shadowFactor < 1.0 ? 0.0 : 1.0;\n    \n    vec3 phongCol = ambiant + (diffuse * shadowFactor) + (specular * shadowFactorSpec);\n\n    return phongCol;\n}\n\nfloat rayPlane ( vec3 rayPos, vec3 rayDir, vec3 planePos, vec3 planeNormal, out vec3 intersecPt, out vec3 normalPt){\n            \n    if (dot(planeNormal, rayDir) == 0.0f)\n        return -1.0;\n    \n    float t = dot(planePos - rayPos,planeNormal) / dot(planeNormal, rayDir); \n    \n    intersecPt = rayPos + t * rayDir;\n    normalPt = -sign(dot(planeNormal, rayDir)) * planeNormal;\n    \n    return t;\n}\n\nfloat computeNearestIntersection(vec3 rayPos, vec3 rayDir,out int objectId, out vec3 intersecI, out vec3 normalI){\n    float minDist  = FLT_MAX;\n    objectId = skyId;\n    \n    // Sphere\n    vec3 intersecS, normalS;\n    float distS = raySphere(rayPos, rayDir, spherePos, sphereRadius, intersecS, normalS);\n    intersecS = rayPos + distS * rayDir;\n    normalS = normalize(intersecS - spherePos);\n    if ((distS > 0.0) && (distS < minDist))\n    {\n        objectId = sphereId;\n        minDist = distS;\n        intersecI = intersecS;\n        normalI = normalS;\n    }\n    \n    // Plane\n    vec3 intersecPt, normalPt;\n    float distP =  rayPlane(rayPos, rayDir,  planePos,  planeNormal, intersecPt, normalPt);\n    if ((distP > 0.0) && (distP < minDist))\n    {\n        objectId = planeId;\n        minDist = distP;\n\t    intersecI = intersecPt;\n    \tnormalI = normalPt;\n    }\n    \n    if (objectId == skyId)\n        minDist = -1.0;\n    \n    return minDist;\n}\n\nvec3 getSphereColorAtPoint(vec3 pt){\n    return sphereCol;\n}\n\nvec3 getPlaneColorAtPoint(vec3 pt){\n    vec3 worldX = vec3(1,0,0);\n    vec3 axisX  = normalize(worldX - dot(worldX, planeNormal) * planeNormal);\n    vec3 axisY  = normalize(cross(planeNormal, axisX));\n\n    vec3 diff = pt - planePos; \n    float u = dot(diff, axisX);\n    float v = dot(diff, axisY);\n    \n    return mod(floor(u * 0.5) + floor(v * 0.5), 2.0) < 1.0  ? planeCol1 : planeCol2;\n\n}\n\nvec3 getObjectColorAtPoint(int objectId, vec3 pt, out Material objectMat){\n\tif (objectId == sphereId)\n    {\n        objectMat = sphereMat;\n        return getSphereColorAtPoint(pt);\n    }\n    else if (objectId == planeId)\n    {\n        objectMat = planeMat;\n        return getPlaneColorAtPoint(pt);\n    }\n        \n    return skyCol;\n}\n\nfloat getShadowFactorAtPoint(vec3 I, vec3 N, Material objectMat, vec3 L, float Ldist){\n\tfloat shadow;\n    int objectId;\n    vec3 intersectI;\n    vec3 normalI;\n    float nearest = computeNearestIntersection(I,L,objectId,intersectI,normalI);\n    if (nearest <= Ldist && nearest>0.0){\n        shadow = objectMat.Ka;\n    }else{\n        shadow = 1.0;\n    }    \n   return shadow;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tMaterial objectMat;\n   \tvec3 rayPos, rayDir;\n    computeCameraRayFromPixel(fragCoord, rayPos, rayDir);\n    \n    int objectId;\n    vec3 intersecI, normalI;\n    float distI = computeNearestIntersection(rayPos, rayDir, objectId, intersecI, normalI);\n      \n    if (distI>0.0){\n        // unit-vector going from the surface point toward the light\n        vec3 L =normalize(lightPos - intersecI);\n        float Ldist = length(lightPos - intersecI);\n        // unit-vector of the reflection direction of the light at the surface point\n        vec3 R = 2.0*normalI*dot(normalI,L) -L;\n        // unit-vector going from the surface point toward the camera\n        vec3 V = -rayDir;\n  \n        vec3 objectCol = getObjectColorAtPoint(objectId, intersecI, objectMat);\n        \n        //ombre\n        vec3 ptI = intersecI + normalI * 0.001;\n        float shadowFactor = getShadowFactorAtPoint(ptI, normalI, objectMat, L, Ldist);\n        \n        fragColor = vec4(computePhongShading(objectCol, objectMat, shadowFactor, normalI, L, R, V), 1);\n    }\n    else { //we did not hit the sphere, so we have the sky color (black)\n        fragColor = vec4(skyCol, 1);\n    }\n\n}","name":"Image","description":"","type":"image"}]}