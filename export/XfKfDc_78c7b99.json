{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"texture","id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"code":"// Configurable parameters\n#define HOLO vec2(0.5, 0.5)  // holographic effect parameters\n#define TEXTURE_DETAILS vec4(0.0, 0.0, 1.0, 1.0)  // xy: offset, zw: scale\n#define IMAGE_DETAILS vec2(1.0, 1.0)\n#define HOVER_STRENGTH .1;\n\nfloat hue(float s, float t, float h) {\n    float hs = mod(h, 1.0) * 6.0;\n    if (hs < 1.0) return (t-s) * hs + s;\n    if (hs < 3.0) return t;\n    if (hs < 4.0) return (t-s) * (4.0-hs) + s;\n    return s;\n}\n\nvec4 RGB(vec4 c) {\n    if (c.y < 0.0001)\n        return vec4(vec3(c.z), c.a);\n\n    float t = (c.z < 0.5) ? c.y*c.z + c.z : -c.y*c.z + (c.y+c.z);\n    float s = 2.0 * c.z - t;\n    return vec4(hue(s,t,c.x + 1.0/3.0), hue(s,t,c.x), hue(s,t,c.x - 1.0/3.0), c.w);\n}\n\nvec4 HSL(vec4 c) {\n    float low = min(c.r, min(c.g, c.b));\n    float high = max(c.r, max(c.g, c.b));\n    float delta = high - low;\n    float sum = high + low;\n\n    vec4 hsl = vec4(0.0, 0.0, 0.5 * sum, c.a);\n    if (delta == 0.0)\n        return hsl;\n\n    hsl.y = (hsl.z < 0.5) ? delta / sum : delta / (2.0 - sum);\n\n    if (high == c.r)\n        hsl.x = (c.g - c.b) / delta;\n    else if (high == c.g)\n        hsl.x = (c.b - c.r) / delta + 2.0;\n    else\n        hsl.x = (c.r - c.g) / delta + 4.0;\n\n    hsl.x = mod(hsl.x / 6.0, 1.0);\n    return hsl;\n}\n\n// Mouse hover effect calculation\nvec2 calculateHoverEffect(vec2 position, vec2 mousePos) {\n    if (iMouse.z < 0.0) { // If mouse is not clicked/hovering\n        return position;\n    }\n    \n    vec2 screenCenter = iResolution.xy * 0.5;\n    float midDist = length(position - screenCenter) / length(iResolution.xy);\n    vec2 mouseOffset = (position - mousePos);\n    float hoverStrength = HOVER_STRENGTH;\n    \n    float scale = 0.2 * (-0.03 - 0.3 * max(0.0, 0.3 - midDist))\n                 * hoverStrength * (length(mouseOffset) * length(mouseOffset))\n                 / (2.0 - midDist);\n                 \n    return position + vec2(0.0, scale);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Apply hover effect to fragment coordinate\n    vec2 adjustedCoord = calculateHoverEffect(fragCoord, iMouse.xy);\n    \n    // Convert to UV coordinates\n    vec2 uv = adjustedCoord/iResolution.xy;\n    \n    // Sample the texture\n    vec4 tex = texture(iChannel0, uv);\n    vec2 texture_coords = uv;\n    \n    // Calculate effect UVs\n    vec2 effect_uv = (((texture_coords)*(IMAGE_DETAILS)) - TEXTURE_DETAILS.xy*TEXTURE_DETAILS.ba)/TEXTURE_DETAILS.ba;\n    \n    // Initial HSL conversion with blue shift\n    vec4 hsl = HSL(0.5*tex + 0.5*vec4(0.0, 0.0, 1.0, tex.a));\n\n    // Time-based animation\n    float t = HOLO.y*7.221 + iTime;\n    vec2 floored_uv = (floor((effect_uv*TEXTURE_DETAILS.ba)))/TEXTURE_DETAILS.ba;\n    vec2 uv_scaled_centered = (floored_uv - 0.5) * 250.0;\n    \n    // Field calculations\n    vec2 field_part1 = uv_scaled_centered + 50.0*vec2(sin(-t / 143.6340), cos(-t / 99.4324));\n    vec2 field_part2 = uv_scaled_centered + 50.0*vec2(cos( t / 53.1532),  cos( t / 61.4532));\n    vec2 field_part3 = uv_scaled_centered + 50.0*vec2(sin(-t / 87.53218), sin(-t / 49.0000));\n\n    float field = (1.0 + (\n        cos(length(field_part1) / 19.483) + \n        sin(length(field_part2) / 33.155) * cos(field_part2.y / 15.73) +\n        cos(length(field_part3) / 27.193) * sin(field_part3.x / 21.92) ))/2.0;\n    \n    float res = (0.5 + 0.5 * cos((HOLO.x) * 2.612 + (field + -0.5) * 3.14));\n\n    // Color calculations\n    float low = min(tex.r, min(tex.g, tex.b));\n    float high = max(tex.r, max(tex.g, tex.b));\n    float delta = 0.2 + 0.3*(high - low) + 0.1*high;\n\n    // Grid effect\n    float gridsize = 0.79;\n    float fac = 0.5*max(\n        max(\n            max(0.0, 7.0*abs(cos(effect_uv.x*gridsize*20.0))-6.0),\n            max(0.0, 7.0*cos(effect_uv.y*gridsize*45.0 + effect_uv.x*gridsize*20.0)-6.0)\n        ), \n        max(0.0, 7.0*cos(effect_uv.y*gridsize*45.0 - effect_uv.x*gridsize*20.0)-6.0)\n    );\n    \n    // Final HSL adjustments\n    hsl.x = hsl.x + res + fac;\n    hsl.y = hsl.y*1.3;    \n    hsl.z = hsl.z*0.6+0.4;\n\n    // Combine original and processed colors\n    tex = (1.0-delta)*tex + delta*RGB(hsl)*vec4(0.9, 0.8, 1.2, tex.a);\n    \n    // Alpha adjustment\n    if (tex.a < 0.7)\n        tex.a = tex.a/3.0;\n        \n    fragColor = tex;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XfKfDc","date":"1734534819","viewed":306,"name":"Holographic Balatro","username":"Cheesy_Brik","description":"Holographic card effect from Balatro","likes":1,"published":1,"flags":0,"usePreview":1,"tags":["balatro"],"hasliked":0,"parentid":"","parentname":""}}