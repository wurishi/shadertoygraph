{"ver":"0.1","info":{"id":"XllfD8","date":"1511773640","viewed":96,"name":"mandelbrot bezo97","username":"bezo97","description":"mandelbrot","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float AAradius=0.0f;\nfloat AAstep=0.5f;\nbool julia=false;\n\nint calc(float Cre, float Cim, float Zr, float Zi, int maxiter, float bailout, out float col)\n{\n    //iter\n    float Zre = Zr;\n    float Zim = Zi;\n    int iterCnt = 0;\n    while (Zre * Zre + Zim * Zim < bailout && iterCnt < maxiter)\n    {\n        float ZreTmp = Zre * Zre - Zim * Zim + Cre;\n        Zim = (2.0f * Zre * Zim + Cim);\n        Zre = (ZreTmp);\n        iterCnt++;\n    }\n\n    float fractIter = float(iterCnt);\n    if (iterCnt < maxiter)\n    {\n        float log_zn = log(Zre * Zre + Zim * Zim) / 2.0f;\n        float nu = log(log_zn / log(2.0f)) / log(2.0f);\n        fractIter = fractIter + 1.0f - nu;\n    }\n\n    col = fractIter;\n    return iterCnt;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float zoom = iTime*100.0f;    \n    float dX=-iMouse.x+iResolution.x/2.0f;\n    float dY=-iMouse.y+iResolution.y/2.0f;\n\t//vec2 uv = fragCoord.xy / iResolution.xy;\n\t//fragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n    float px = fragCoord.x;\n    float py = fragCoord.y;\n\n            //map position\n            vec3 acc;\n            for (float aax = -AAradius; aax <= AAradius; aax += AAstep)//anti-alias dolgok\n            {\n                for (float aay = -AAradius; aay <= AAradius; aay += AAstep)\n                {\n                    float colInterp = 0.0f;\n                    int iterNr;\n                    if (julia)\n                    {\n                        float Zr = float(px + dX - iResolution.x / 2.0f) / zoom;\n                        float Zi = float(py + dY - iResolution.y / 2.0f) / zoom;\n                        iterNr = calc(-0.4f, -0.6f, Zr, Zi, 255, 40.0f, colInterp);\n                    }\n                    else\n                    {\n                        float Cre = float(px + dX - iResolution.x / 2.0f + aax) / zoom;//-2 to 2\n                        float Cim = float(py + dY - iResolution.y / 2.0f + aay) / zoom;//-2 to 2\n                        iterNr = calc(Cre, Cim, 0.0f, 0.0f, 255, 40.0, colInterp);\n                    }\n\n                    float color1 = floor(float(iterNr) / 15.0f);\n                    float color2 = floor(float(iterNr+1) / 15.0f);\n                    colInterp = mix(color1, color2, fract(colInterp));//vagy mix\n                    vec3 colS = vec3(colInterp);\n\n\n                    float aar = sqrt(aax * aax + aay * aay);\n                    if (AAradius == 0.0f)\n                        aar = 0.0f;\n                    acc += colS*(1.0-aar);\n\n                }\n            }\n            float normalizalo = 1.5f*pow(2.0f * AAradius / AAstep, 2.0);//TODO cone filter normalizalas meg ide jon\n            if (AAradius == 0.0)\n                normalizalo = 1.0;\n   \t\t\tfragColor = vec4(acc / normalizalo,1.0);\n}\n","name":"Image","description":"","type":"image"}]}