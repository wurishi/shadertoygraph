{"ver":"0.1","info":{"id":"NlVBzy","date":"1664759436","viewed":164,"name":"SelfReflectingSquare","username":"MrHAX00","description":"Was trying to make a different effect using video feedback again but ended up with this instead.\n\nUse your cursor to pan/zoom!","likes":11,"published":1,"flags":32,"usePreview":0,"tags":["fractal","videofeedback"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Rectangle(vec2 uv, vec2 Size, vec2 Pos, float Blur) {\n    uv /= Size;\n    uv -= Pos;\n    \n    float XBand = smoothstep(-Size.x - Blur, -Size.x + Blur, uv.x) * smoothstep(Size.x + Blur, Size.x - Blur, uv.x);\n    float YBand = smoothstep(-Size.y - Blur, -Size.y + Blur, uv.y) * smoothstep(Size.y + Blur, Size.y - Blur, uv.y);\n    return XBand * YBand;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int Address = int(fragCoord.x);\n    if (Address > BufferSize || int(fragCoord.y) > 0) discard;\n    \n    vec2 MouseAt = (iMouse.xy - iResolution.xy * .5) / iResolution.y;\n    \n    if (Address == CamAddress) {\n        fragColor = CamData;\n        \n        if (fragColor.x == 0. && fragColor.y == 0.) {\n            fragColor = vec4(3.01, .0125, MouseAt);\n        }\n    \n        float Angle = .5 - (acos(dot(vec2(1., 0.), normalize(MouseAt))) / pi) * .5;\n        if (MouseAt.y <= 0.) {\n            Angle = .5 - Angle + .5;\n        }\n        float Zoom = 1. / length(MouseAt);\n         \n        float DeltaX = Angle - fragColor.z;\n        float DeltaY = Zoom - fragColor.w;\n        \n        if (iMouse.w > 0.) {\n            DeltaX = 0.;\n            DeltaY = 0.;\n        }\n        \n        fragColor.x += DeltaX;\n        fragColor.z = Angle;\n        fragColor.y += DeltaY;\n        fragColor.y = clamp(fragColor.y, 0., 9999999999999.);\n        fragColor.w = Zoom;\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define pi 3.14159\n\n//Buffer addresses:\n//Camera:\n#define CamAddress 0\n#define CamData texelFetch(iChannel0, ivec2(0), 0)\n\n#define BufferSize 1","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define ColorDelta .01 + cos(iTime) * .01\n\nfloat Rectangle(vec2 uv, vec2 Size, vec2 Pos, float Blur) {\n    uv -= Pos;\n    uv /= Size;\n    \n    float XBand = smoothstep(-Size.x - Blur, -Size.x + Blur, uv.x) * smoothstep(Size.x + Blur, Size.x - Blur, uv.x);\n    float YBand = smoothstep(-Size.y - Blur, -Size.y + Blur, uv.y) * smoothstep(Size.y + Blur, Size.y - Blur, uv.y);\n    return XBand * YBand;\n}\n\nvec3 GetColor(float In)\n{\n    In += iTime * .075;\n    In *= pi * 2.;\n    return vec3(cos(In + pi * .333333) * .5 + .5, cos(In + pi * .666666) * .5 + .5, -cos(In + pi) * .5 + .5);\n}\n\nfloat Screen(vec2 uv, float Rot, vec2 Size, vec2 Pos)\n{\n    uv -= Pos;\n    uv /= Size;\n   \tuv *= mat2(cos(Rot), -sin(Rot), sin(Rot), cos(Rot));\n    \n    if (Rectangle(uv, vec2(.7), vec2(0.), .0001) == 0.) {\n        return .0075;\n    }\n    uv = (uv * iResolution.y + .5 * iResolution.xy) / iResolution.xy;\n    \n    return fract((uv.x + uv.y) * ColorDelta + texture(iChannel1, uv).w - ColorDelta);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy * .5) / iResolution.y;\n    vec2 Cam = CamData.xy;\n    float Rot = Cam.x * pi * 2.;\n   \tuv *= mat2(cos(Rot), -sin(Rot), sin(Rot), cos(Rot));\n    uv *= Cam.y * .766;\n    \n    float Sum = Screen(uv, 0., vec2(1.), vec2(0.));\n    \n    fragColor = vec4(vec3(GetColor(Sum)), Sum);\n}","name":"Buffer B","description":"","type":"buffer"}]}