{"ver":"0.1","info":{"id":"3lfyDB","date":"1592897927","viewed":374,"name":"Voronoi Wave","username":"ZnW","description":"Slight variation of procedural voronoi with gradient colors and wave motion","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","wave","gradient","motion","pattern","wallpaper"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int POINTS = 140; // Also gives 14 point rows (point rows are determined like N / 10, from bottom to up)\n\nvoid voronoi(vec2 uv, inout vec3 col)\n{\n    vec3 voronoi = vec3(0.0);\n    float time = (iTime + 3000.0); \t\t\t// 3k time offset gives better wave pattern\n    float bestDistance = 999.0;\t\t\n    float lastBestDistance = bestDistance;\t// Used for Bloom & Outline\n    for (int i = 0; i < POINTS; i++)\t\t// Is there a proper GPU implementation of voronoi out somewhere?\n    {\n        float fi = float(i);\n        vec2 p = vec2(mod(fi, 1.0) * 0.1 + sin(fi),\n                      -0.05 + 0.15 * float(i / 10) + cos(fi + time * cos(uv.x * 0.025)));\n        float d = distance(uv, p);\n        if (d < bestDistance)\n        {\n            lastBestDistance = bestDistance;\n            bestDistance = d;\n            \n            // Two colored gradients for voronoi color variation\n            voronoi.x = p.x;\n            voronoi.yz = vec2(p.x * 0.4 + p.y, p.y) * vec2(0.9, 0.87);\n        }\n    }\n    col *= 0.64 + 0.29 * voronoi;\t// Mix voronoi effect and default shadertoy gradient\n    col += smoothstep(0.99, 1.05, 1.0 - abs(bestDistance - lastBestDistance)) * 0.9;\t\t\t// Outline\n    col += smoothstep(0.95, 1.05, 1.0 - abs(bestDistance - lastBestDistance)) * 0.2 * col;\t\t// Outline fade border\n    col += (voronoi) * 0.1 * smoothstep(0.5, 1.0, 1.0 - abs(bestDistance - lastBestDistance));\t// Bloom\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    // Effect looks nice on this uv scaling\n    voronoi(uv * 2.0 - 1.0, col); \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}