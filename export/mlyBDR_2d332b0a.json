{"ver":"0.1","info":{"id":"mlyBDR","date":"1702212693","viewed":19,"name":"D7 - Rainbow shader","username":"SilverFox","description":"Rainbow Shader: A shader that cycles through rainbow colors on 2D object.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["aoc","raindbow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 raindbowColors[7] = vec3[]\n(\n    vec3(1.0, 0.0, 0.0), // Red\n    vec3(1.0, 0.5, 0.0), // Orange\n    vec3(1.0, 1.0, 0.0), // Yellow\n    vec3(0.0, 1.0, 0.0), // Green\n    vec3(0.0, 0.0, 1.0), // Blue\n    vec3(0.29, 0.0, 0.51), // Indigo\n    vec3(0.56, 0.0, 1.0)  // Violet\n);\n\n//\nvec3 generateRaindbowColor(float uvPosition) \n{\n  \n    // Calculate index based on the position\n    float index = uvPosition * 6.0;\n    int i = int(index);\n    float f = fract(index);\n\n    // Interpolate between the two colors\n    return mix(raindbowColors[i], raindbowColors[i + 1], f);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Get the rainbow color based on the adjusted UV\n    vec3 color = generateRaindbowColor(uv.y);\n\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}