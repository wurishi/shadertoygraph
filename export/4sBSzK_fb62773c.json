{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"const vec3 color1 = vec3(0.0, 0.5,  1.0);\nconst vec3 color2 = vec3(0.3,  0.7,  1.0);\nconst vec3 color3 = vec3(0.5,  0.8, 1.0);\n\nconst float animationSpeed = 20.0;\n\nfloat scale = 1.0;\n\nfloat patternHeight = 80.0;\n\nfloat sinus1Amplitude = 15.0;\nfloat sinus2Amplitude = 10.0;\nfloat sinus3Amplitude = 10.0;\n\nfloat sinus1Lambda = 40.0;\nfloat sinus2Lambda = 30.0;\nfloat sinus3Lambda = 33.0;\n\nfloat sinus1Y = (80.0 / 3.0) * 2.0;\nfloat sinus2Y = (80.0 / 3.0);\nfloat sinus3Y = 0.0;\n\nfloat sinusYRandomFactor = 0.000002;\n\nfloat sinus1Movement = -2.0;\nfloat sinus2Movement =  2.3;\nfloat sinus3Movement =  0.2;\n\nfloat layer1Distance = 2.0;\nfloat layer2Distance = 5.0;\nfloat layer3Distance = 13.0;\nfloat layer4Distance = 25.0;\nfloat layer5Distance = 40.0;\n\n\nfloat layerDarkenFactor = 0.1; // good for day night transformations..\n\n\n/**\n * Drakens the assigned color by the assigned amount.\n */\nvec3 darken(vec3 color, float amount) {\n    return vec3(color.x - amount, color.y -amount, color.z - amount);\n}\n\nfloat rand(vec2 co){\n    float rnd = fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n    if(rnd < 0.35) {\n        rnd = 0.35;\n    }\n    return rnd;\n}\n\n\nfloat getLayerColorFactor(float distance) {\n   float factor = 1.0;\n   \n   factor -= layerDarkenFactor*smoothstep( -1.0, 1.0, distance-layer2Distance );\n   factor -= layerDarkenFactor*smoothstep( -1.0, 1.0, distance-layer3Distance );\n   factor -= layerDarkenFactor*smoothstep( -1.0, 1.0, distance-layer4Distance );\n   factor -= layerDarkenFactor*smoothstep( -1.0, 1.0, distance-layer5Distance );\n   factor = mix( factor, 1.3, 1.0-smoothstep( -1.0, 1.0, distance-layer1Distance ) );\n\n   return factor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec3 appliedColor = vec3(0.0, 0.0, 0.0);\n    float tick = iTime * animationSpeed;\n     \n    float patternRelativeY  = mod(fragCoord.y, patternHeight);\n    float patternNumber = floor(fragCoord.y /  patternHeight);\n    bool isOddpattern = mod(fragCoord.y  / patternHeight, 2.0) > 1.0; \n    \n    float rnd =  rand(vec2(patternNumber, patternNumber));\n    float rnd0 = rand(vec2(patternNumber - 1.0, patternNumber - 1.0));\n\n\n    sinus1Movement *= tick * rnd;\n    sinus2Movement *= tick * rnd;\n    sinus3Movement *= tick;\n\n    \n    //sinus1Amplitude *= (rnd + 0.3);\n    //sinus2Amplitude *= (rnd + 0.3);\n    //sinus3Amplitude *= (rnd + 0.3);\n    \n    float sinus1 = sin( (fragCoord.x + sinus1Movement) / sinus1Lambda) * sinus1Amplitude;\n    float sinus2 = sin( (fragCoord.x + sinus2Movement) / sinus2Lambda) * sinus2Amplitude;\n    float sinus3 = sin( (fragCoord.x + sinus3Movement) / sinus3Lambda) * sinus3Amplitude;\n    \n\n    // shift to pattern relative position\n    sinus1 = sinus1 + sinus1Y + sin(tick / 8.0 * rnd) * 5.0 * rnd;\n    sinus2 = sinus2 + sinus2Y + sin(tick / 10.0 * rnd) * 5.0 * rnd;\n    sinus3 = sinus3 + sinus3Y;\n    \n    // expect to be in wave 1...\n    appliedColor = color2;\n    \n    float f = patternRelativeY - sinus3-patternHeight;\n    f = smoothstep( -1.0, 1.0, f );\n    appliedColor = mix( appliedColor, color3*getLayerColorFactor(sinus3 + patternHeight - patternRelativeY), 1.0-f );\n    \n    f = patternRelativeY - sinus1;\n    f = smoothstep( -1.0, 1.0, f );\n    appliedColor = mix( appliedColor, color1*getLayerColorFactor(sinus1 - patternRelativeY), 1.0-f );\n    \n    f = patternRelativeY - sinus2;\n    f = smoothstep( -1.0, 1.0, f );\n    appliedColor = mix( appliedColor, color2*getLayerColorFactor(sinus2 - patternRelativeY), 1.0-f );\n\n    f = patternRelativeY - sinus3;\n    f = smoothstep( -1.0, 1.0, f );\n    appliedColor = mix( appliedColor, color3*getLayerColorFactor(sinus3 - patternRelativeY), 1.0-f );\n    \n    fragColor = vec4( appliedColor, 1.0 );\n}\n\n\n\n\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4sBSzK","date":"1413548645","viewed":1997,"name":"Cartoon Water","username":"LucaHofmann","description":"A cartoon water shader.","likes":48,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d"],"hasliked":0,"parentid":"","parentname":""}}