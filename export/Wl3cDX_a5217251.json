{"ver":"0.1","info":{"id":"Wl3cDX","date":"1609982960","viewed":82,"name":"Ellipse - Fine Woodworking","username":"NGimbal","description":"https://www.youtube.com/watch?v=Et3OdzEGX_w\n\nCalculate something that looks like a signed distance to an ellipse based on a woodworking / drafting technique. Any advice on how to improve distance at the minor axis would be much appreciated.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["ellipse","primitive"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// attempt at simple ellipse distance\n\n// iq ellipse I\n// https://www.shadertoy.com/view/4sS3zz\n\n// iq ellipse II\n// https://www.shadertoy.com/view/4lsXDN\n\n// quagnz ellipse\n// https://www.shadertoy.com/view/tt3yz7\n\n\nfloat sdEllipse( vec2 p, in vec2 ab ) {\n    \n    float polesDist = sqrt(pow(ab.x * 2., 2.) - pow(ab.y * 2., 2.));\n\n    float majorAxis = max(ab.x, ab.y);\n    \n    // thanks iq!\n    vec2 pole1 = vec2( (ab.x>ab.y)?0.5*polesDist:0.0, \n                       (ab.y>ab.x)?0.5*polesDist:0.0);\n    vec2 pole2 = -pole1;\n    \n    float d = (distance(p, pole1) + distance(p, pole2)) - (majorAxis * 2.0);\n    \n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n\t\n    vec2 m = iMouse.xy/iResolution.xy;\n\tm.x *= iResolution.x/iResolution.y;\n        \n    float w = 1.0;\n    float h = 0.5;\n    \n    vec2 ab = max(vec2(0.0),m);\n    //vec2 ab = vec2(w, h);\n    \n    // distance to p1 representing 1/2 distance and  1/2 height\n    float p1 = 1.0 - smoothstep(0.0,0.01,distance(uv, ab) - 0.025);\n    \n    float polesDist = sqrt(pow(ab.x * 2., 2.) - pow(ab.y * 2., 2.));\n    \n    float majorAxis = max(ab.x, ab.y);\n\n    vec2 pole1 = vec2( (ab.x>ab.y)?0.5*polesDist:0.0, \n                       (ab.y>ab.x)?0.5*polesDist:0.0);\n    vec2 pole2 = -pole1;\n    \n    float p2 = 1.0 - smoothstep(0.0,0.01,distance(uv, pole1) - 0.025);\n    float p3 = 1.0 - smoothstep(0.0,0.01,distance(uv, pole2) - 0.025);\n    \n\tfloat d = sdEllipse( uv, ab);\n    \n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-2.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(120.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n    // draw p1 representing width and height\n    col += vec3(p1) * vec3(1.0,0.0,0.0);\n    col += vec3(p2) * vec3(1.0,0.0,0.0);\n    col += vec3(p3) * vec3(1.0,0.0,0.0);\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}