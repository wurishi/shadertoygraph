{"ver":"0.1","info":{"id":"3tcBWX","date":"1613523064","viewed":72,"name":"Exercise: Mandelbrot Basics","username":"endymion","description":"Desperately trying to understand fractal math. *BigWIngs* explanation on https://www.youtube.com/watch?v=6IWXkV82oyY definitely helped. ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * Basic mandelbrot math\n * @param vec2 z - current position\n * @param vec2 c - origin\n * @src https://www.youtube.com/watch?v=6IWXkV82oyY\n * @src BigWIngs\n */\nvec2 mandelbrot(in vec2 z, in vec2 c) {\n    // f(z) = z^2 + c;\n    return vec2(\n        z.x * z.x - z.y * z.y,\n        2. * z.x * z.y\n    ) + c;\n}\n\n/**\n * Fractal iterations\n * @src https://www.youtube.com/watch?v=6IWXkV82oyY\n */\nfloat mandelbrot(in vec2 c, in int maxIterations, in float bound) {\n    vec2 z = vec2(0, 0);\n    int iterations = 0;\n    for (int i = 0; i < maxIterations; i++) {\n        z = mandelbrot(z, c);\n        if (length(z) > bound) break;\n        iterations++;\n    }\n    return float(iterations)/float(maxIterations);\n}\n\n/**\n * @main\n */\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord.xy - .5 * iResolution.xy) / iResolution.y;\n    uv *= 3.;\n    \n    float d = mandelbrot(uv, 100, 2.);\n    d = sqrt(d);\n    fragColor = vec4(vec3(d),1.0);\n}","name":"Image","description":"","type":"image"}]}