{"ver":"0.1","info":{"id":"NsKfR3","date":"1658595729","viewed":108,"name":"Seeded Feedback Octave Noise","username":"tsuhre","description":"Octave noise generated using a feedback buffer seeded with an arbitrary hash or random texture (togglable in Buffer A). Each channel progressively blurs and mixes the previous channel x -> y -> z -> w. Also see https://www.shadertoy.com/view/WdGGRy","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["noise","feedback","hash","prng","octave","buffered","seeded"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by Ben Matthews, 2022\n// License - MIT\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 noise = texture(iChannel0, fragCoord/iResolution.xy);\n    \n    //level and mix octaves\n    //replace magic leveling numbers with statistical sigma based on the expected value distribution, post kernel\n    float n = (level(noise.x, 2.0, 4.0)+\n               level(noise.y, 3.6, 4.0)+\n               level(noise.z, 4.5, 4.0)+\n               level(noise.w, 6.0, 4.0))/16.0;\n    \n    fragColor = vec4(n);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define timeMult 0.5\n#define lerpAmt  0.1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    #if 1\n    float seed = hash(uvec2(fragCoord));\n    #else\n    float seed = texture(iChannel1, fragCoord/iResolution.xy).x;\n    #endif\n    \n    float h = abs(1.0-fract(seed*(iTime*timeMult+100.0))*2.0);\n    float x = mix(kernel(0, iChannel0), h                   , lerpAmt);\n    float y = mix(kernel(1, iChannel0), kernel(0, iChannel0), lerpAmt);\n    float z = mix(kernel(2, iChannel0), kernel(1, iChannel0), lerpAmt);\n    float w = mix(kernel(3, iChannel0), kernel(2, iChannel0), lerpAmt);\n   \n    fragColor = vec4(x, y, z, w);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define textureOffset(tex, offset) texture(tex, (fragCoord+offset)/iResolution.xy)\n#define textureL(tex) textureOffset(tex, vec2( 1, 0))\n#define textureR(tex) textureOffset(tex, vec2(-1, 0))\n#define textureU(tex) textureOffset(tex, vec2( 0, 1))\n#define textureD(tex) textureOffset(tex, vec2( 0,-1))\n#define avgLRUD(channel, tex) (textureL(tex)[channel] + textureR(tex)[channel] + textureU(tex)[channel] + textureD(tex)[channel])/4.0\n#define kernel avgLRUD\n#define level(n, mx, mult) clamp((n-0.5)*mx+0.5, 0.0, 1.0)*mult\n\n//see https://www.shadertoy.com/view/4tXyWN\nfloat hash( uvec2 x )\n{\n    uvec2 q = 1103515245U * ( (x>>1U) ^ (x.yx   ) );\n    uint  n = 1103515245U * ( (q.x  ) ^ (q.y>>3U) );\n    return float(n) * (1.0/float(0xffffffffU));\n}","name":"Common","description":"","type":"common"}]}