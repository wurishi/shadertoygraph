{"ver":"0.1","info":{"id":"WtlyWS","date":"1592961925","viewed":82,"name":"Burning Ship fractal","username":"lukeathedev","description":"Very similar to the mandelbrot fractal. Would be a cool prog metal band album cover lol","likes":1,"published":3,"flags":32,"usePreview":0,"tags":["fractal","maths"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// fractais sao legais\n// by lucas\n\n// These are complex number helper functions\n\nvec2\ncmul(vec2 c0, vec2 c1)\n{\n    return vec2(c0.x * c1.x - c0.y * c1.y, c0.x * c1.y + c0.y * c1.x);\n}\n\nfloat\ncabs(vec2 c)\n{\n    return c.x * c.x + c.y * c.y;\n}\n\n// https://stackoverflow.com/questions/15095909/from-rgb-to-hsv-in-opengl-glsl\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n// This is the burning ship fractal\n// https://en.wikipedia.org/wiki/Burning_Ship_fractal\n\nfloat\nfractal(vec2 c, int range)\n{   \n    int i;\n    vec2 z = vec2(0.0);\n    for (i = 0; i < range; ++i)\n    {\n        z = vec2(abs(z.x), abs(z.y));\n        z = cmul(z, z) - c;\n        if (cabs(z) > 4.0) break;\n    }\n    \n    return float(i) / float(range);\n}\n\nvoid\nmainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalize coordinates\n    vec2 xy = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    \n    // Get offset variable from texture map\n    float scale = 2.5 / pow(1.5, iTime);\n    if (scale < 0.05) scale = 0.05;\n    vec2 offset = texelFetch(iChannel0, ivec2(0, 0), 0).xy;\n    \n    // Calculate pixel color value based on fractal function\n    float pixel = fractal(xy * scale + offset, 75);\n    if (pixel == 1.0) pixel = 0.0;\n    \n    vec3 col = hsv2rgb(vec3(sin(pixel + 0.6), 0.75, 1.0));\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// I'll implement mouse panning eventually\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // 0,0 offset; 1,0 mouseDown (bool)\n\n    if (ivec2(fragCoord) == ivec2(0, 0))\n    {\n        fragColor = vec4(1.76, 0.0375, 0.0, 0.0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}