{"ver":"0.1","info":{"id":"msjyzw","date":"1688310649","viewed":40,"name":"Buffer Practice - Agar Game","username":"dansh0","description":"Testing buffer to hold data. Played with noise and color as well. Reminds me of the agar game! Open to optimization feedback.\n\nAccelerate using arrow keys after clicking on the screen. Consume the other blobs before they consume you.","likes":1,"published":1,"flags":48,"usePreview":0,"tags":["noise","game","blob","keyboard","physics","agar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define REGIONS 6\n\nvec4 getDataVal(int index) \n{\n    return texture(iChannel0, vec2(float(index)/float(REGIONS)+0.5/float(REGIONS), 0.0));\n}\n\nfloat drawCircle(vec4 data, vec2 fragCoord)\n{\n    float dist = length(fragCoord-data.xy*iResolution.xy);\n    return (1.5 - 0.25*texture(iChannel1, float(iFrame)/100000000.-fragCoord.xy/iResolution.xy).r - 0.25*texture(iChannel1, data.w*fragCoord.xy/iResolution.xy).r- dist/data.w);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    bool flicker = mod(float(iFrame+10), 500.) < 10.;\n    vec3 color = vec3(float(flicker));\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec4 data;\n    float whitePix = 0.0;\n    vec4[] colors = vec4[5](      \n        vec4(86.,3.,173.,255.),\n        vec4(131.,103.,199.,255.),\n        vec4(179.,233.,199.,255.),\n        vec4(194.,248.,203.,255.),\n        vec4(240.,255.,241.,255.)  \n    );\n    \n    for (int i=0; i<REGIONS; ++i)\n    {\n        data = getDataVal(i);\n        whitePix = drawCircle(data, fragCoord);\n\n        if (whitePix > 0.0) {\n            color = color - (float(flicker)*2.-1.0)*colors[i].xyz/255.*whitePix;\n        }\n        \n    }\n    \n    \n    fragColor = vec4(color, 1.0);\n\n    // debug buffer A\n    // fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define REGIONS 6\n#define BOUNCE 0.4\n\nvec4 getDataVal(int index, int channel) \n{\n    return texture(iChannel0, vec2((float(index)+0.5)/float(REGIONS), (float(channel)+0.5)/2.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 pos[REGIONS];\n    vec4 velo[REGIONS];\n    for (int i=0;i<REGIONS;++i){\n        \n        // get starting vals\n        if (mod(float(iFrame),500.0) < 1.0) {\n            if (i == (REGIONS-1)) {\n                pos[i] = vec4(0.5, 0.5, 1.0, 50.1);\n                velo[i] = vec4(0.0);\n            } else {\n                pos[i] = vec4(sin(float(i)/float(REGIONS-1)*2.0*3.1415)/3.0+0.5, cos(float(i)/float(REGIONS-1)*2.0*3.1415)/3.0+0.5, 1.0, 25.0);\n                velo[i] = vec4(0.0);\n            }\n        } else {\n            pos[i] = getDataVal(i, 0);\n            velo[i] = getDataVal(i, 1);\n        }\n        \n        \n        if (i == (REGIONS-1)) {\n        \n            float accel = 0.025;\n            \n            // keyboard input\n            if (texelFetch(iChannel2, ivec2(37,0), 0).x > 0.) {\n                velo[i].x += -accel;\n            }\n            if (texelFetch(iChannel2, ivec2(38,0), 0).x > 0.) {\n                velo[i].y += accel;\n            }\n            if (texelFetch(iChannel2, ivec2(39,0), 0).x > 0.) {\n                velo[i].x += accel;\n            }\n            if (texelFetch(iChannel2, ivec2(40,0), 0).x > 0.) {\n                velo[i].y += -accel;\n            }\n            \n        } else {\n        \n            // modify velocity\n            vec4 rand = texture(iChannel1, vec2(mod(float(iTime)*float(i+1), 256.0)/256.0, mod(float(iFrame)*float(i+1), 256.0)/256.0));\n            velo[i] = velo[i] + (rand-0.5)/10.;\n            \n            // grow enemies\n            pos[i].w += 0.15;\n        }\n        \n        if (pos[i].x <= 0.0 || pos[i].x >= 1.0) {\n            velo[i].x = velo[i].x*-BOUNCE;\n            pos[i].x = round(pos[i].x);\n        }\n\n        if (pos[i].y <= 0.0 || pos[i].y >= 1.0) {\n            velo[i].y = velo[i].y*-BOUNCE;\n            pos[i].y = round(pos[i].y);\n        }\n            \n            //velo[i].w = length(velo[i].xyz); // velocity magnitude\n        \n        // modify position\n        pos[i].xyz = pos[i].xyz + velo[i].xyz/100.;\n        \n        \n    }\n    \n    // eat\n    for (int i=0;i<REGIONS;++i){\n        for (int j=0; j<REGIONS; ++j) {\n            if (pos[j].w > 0.0 && abs(pos[i].x-pos[j].x) < 0.8*(pos[i].w+pos[j].w)/iResolution.x && abs(pos[i].y-pos[j].y) < 0.8*(pos[i].w+pos[j].w)/iResolution.y) {\n                if (pos[i].w >= pos[j].w) {\n                    pos[j].w = pos[j].w - 1.0;\n                    pos[i].w = pos[i].w + 1.0;\n                    if (pos[i].w > 500.) { pos[i].w = 500.; }\n                }\n            }\n        }\n    }\n    \n    \n    vec2 uv = fragCoord / iResolution.xy;\n    int index = int(floor(uv.x*float(REGIONS)));\n    \n    // bottom half is position data, top half is velocity data\n    if (uv.y < 0.5) {\n        fragColor = vec4(pos[index]);\n    } else {\n        fragColor = vec4(velo[index]);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}