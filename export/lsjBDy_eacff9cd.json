{"ver":"0.1","info":{"id":"lsjBDy","date":"1502089197","viewed":1282,"name":"isNaN, isInf, + precompiler bug","username":"FabriceNeyret2","description":"isNaN and isInf.  Bug: OpenGL precompiler doesn't know these IEEEfloat features: \n4 strips display:  isNaN with dynamic vs const,  isInf with dynamic vs const, + bit decompositon\nexpected result (wit bug) after 1\" :  W,B,W,B    bits: 7FFFFFFF,0,80000000,0","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["glsl","isnan","isinf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#if 1    // 0 to test the webGL2 built-in isnan() and isinf() funcs.\n  #define isNaN(x) ( (x) != (x)    )\n  #define isInf(x) ( (x) == (x)+1. )\n#else\n  #define isNaN isnan\n  #define isInf isinf\n#endif\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    bool b = sin(3.*U.y) > 0.;\n    vec2 R = iResolution.xy;\n    U *= 4./R;\n    float v;\n    \n    O = vec4(   U.x<1. ? isNaN( v = sqrt( -floor(iTime)) )\n              : U.x < 1.01 ? b\n              : U.x<2. ? isNaN( v = sqrt( -1.) )            // precompiler is not IEEE\n              : U.x < 2.01 ? b\n              : U.x<3. ? isInf( v = 1./floor(1./iTime) )\n              : U.x < 3.01 ? b\n              :          isInf( v = 1./0. )                // precompiler is not IEEE\n             );\n    \n#if 1   // bit decomposition\n    int bits = floatBitsToInt(v);\n        if(abs(mod(U.x*4.,4.)-1.5)<0.5){\n            bits = bits >> int(U.y*8.);\n            O = mix(vec4(0,.3,.5,0),vec4(1,0,0,0), vec4(bits & 1));\n           if ( fract(U.y*8.) < 31./R.y) O--;\n           if ( fract(U.y) < 11./R.y) O--;\n        }\n#endif    \n}","name":"Image","description":"","type":"image"}]}