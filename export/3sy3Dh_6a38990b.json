{"ver":"0.1","info":{"id":"3sy3Dh","date":"1570046196","viewed":448,"name":"Divide & rotate","username":"xazzzi","description":"Looks kinda like stained glass.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["uv"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 cm(vec2 a, vec2 b) {\n    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);\n}\n\nvec2 iter(vec2 uv, vec2 rot, float scale) {\n    vec2 gv = fract(cm(uv, rot) * scale);\n    float boundDist = 1. - max(abs(gv.x), abs(gv.y));\n    float mask = step(.03, boundDist);\n    gv *= mask;\n    return gv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalize coords\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n    vec2 mouse = (iMouse.xy - .5 * iResolution.xy) / iResolution.y;\n    \n    // Add  some time rotation and offset\n    float t = iTime * .05;\n    vec2 time = vec2(sin(t), cos(t));\n    uv += time;\n    \n    // Imaginary component has to be mirrored for natural feeling rotation\n    mouse.y *= -1.;\n    \n    // Draw few layers of this to bend space\n    vec2 rot = cm(mouse, time);\n    for (float i=1.; i<=3.; i++) {\n        uv = iter(uv, rot, 1.5);\n    }\n    \n    vec3 col = texture(iChannel0, uv).rgb;\n    if (uv.x == 0. && uv.y == 0.) {\n        col = vec3(0);    \n    }\n        \n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}