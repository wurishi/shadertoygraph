{"ver":"0.1","info":{"id":"wttSRS","date":"1581249538","viewed":550,"name":"grid of poles (pseudo phasor no)","username":"FabriceNeyret2","description":"artificials phasor noise with no discont.\nMouse.y: grid scale  Mouse.x: jitter scale\nSettle poles at nodes of square grid so that phasor angle does 1 turn around node (in checkered direction).\nHue = phasor (i.e. phase offset in the regular oscillation)\n","likes":8,"published":3,"flags":0,"usePreview":0,"tags":["noise","interpolation","phasor"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// interp from triangle sides : see https://www.desmos.com/calculator/anchdwvynw\n\n#define hue(v)  ( .6 + .6 * cos( 6.3*(v)  + vec4(0,23,21,0)  ) ) // https://www.shadertoy.com/view/ll2cDc\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         V = u/R.y,\n         M = iMouse.xy/R,\n         U = V * (iMouse.x < 10. ? 5. : 20.*M.y),\n         F = fract(U)*2.-1.,     // coords in tile in [-1,1]Â²\n         I = mod(floor(U),2.);   // tile id in checker pattern\n\n    float n = iMouse.x < 10. ? 10. : 20.*M.x,      // noise scale\n          x = F.x, y = F.y, k=0., X,Y,Z, a,c, v, s = sqrt(2.);\n                                                // --- settle phase at edges\n#if 1                   // checker : 2pi turn around nodes\n    a = I==vec2(0) ? abs(y) > abs(x) ? 4. : 0.  // phase along diagonals\n                   : I.y==0. ? I.x : 3.-I.x;\n    c = abs(y) < abs(x) ? I.y==0. ?  .5 : 2.5   // phase along tile border\n                        : I.x==0. ? 3.5 : 1.5;\n    a /= 4.; c /= 4.;\n#else                   // no checker : 8pi turn around nodes\n    float S = I.x==I.y ? 1. : 0.;\n    a =  abs(y) > abs(x) ? S : 1.-S;            // phase along diagonals\n    c = .5;                                     // phase along tile border\n#endif\n                                                // --- get triangle coordinates\n    if ( abs(y) > abs(x) ) k=x,x=y,y=k;         // wrap to first quadrant (right triangle in tile)\n    x = abs(x), \n    X = (x-y)/s, Y = (x+y)/s, Z = 1.-x;         // coords in triangle\n    float A = Y*Z, B=X*Z, C=X*Y;                // --- interp within triangle\n    v = ( a*A + a*B + c*C ) / (A+B+C) ;\n\n    v += 1.*texture(iChannel0,(n*V+.5*0.)/iChannelResolution[0].x).x; // global perturbations\n    O = hue(v); //return;\n    // v = .5+.5*sin(30.*6.28*v);               // display isolines\n    \n    v = .5 + .5* sin( 150.* dot(V-.5, cos(.1*iTime+vec2(0,11))) + 6.28*v ); // phasor\n    \n    O *= vec4(v);\n\n}","name":"Image","description":"","type":"image"}]}