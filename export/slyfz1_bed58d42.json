{"ver":"0.1","info":{"id":"slyfz1","date":"1664042367","viewed":101,"name":"spherelet","username":"jt","description":"A lightweight fake sphere - for applications  where ray-tracing / ray-marching would be overkill\n(like [url=https://www.shadertoy.com/view/ftKBzh]here[/url]).\nOld textured variant [url=https://www.shadertoy.com/view/ll2XRt]here[/url].","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fake","sphere","spherelet"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/slyfz1 spherelet by jt\n\n// A lightweight fake sphere - for applications  where ray-tracing / ray-marching would be overkill.\n\n// MIT License, as in https://www.shadertoy.com/terms\n\n/*\n\nCopyright (c) 2022 Jakob Thomsen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n#define pi 3.1415926\n\nvec3 checker(vec3 c0, vec3 c1, vec2 p)\n{\n    //p = fract(p) - 0.5;\n    p = sin(2.0 * pi * p);\n    //vec2 edges = (1.0 - exp2(-p*p*1000.0)); // edges used to hide aliasing\n    vec2 edges = (1.0 - exp2(-p*p*iResolution.xy/1.0)); // edges used to hide aliasing\n    return mix(c0, c1, step(0.0, p.x * p.y)) * edges.x * edges.y;\n}\n\n// returns normal of either sphere (n, 1) or background plane (n, 0)\nvec4 sphere_normal(vec2 p)\n{\n    float t = 1.0 - p.x * p.x - p.y * p.y;\n    //float choose = t < 0.0 ? 0.0 : 1.0;\n    float choose = smoothstep(0.0, 0.02, t);\n    vec3 normal_plane = vec3(0,0,1);\n    if(t < 0.0) // avoid NaN later on\n        return vec4(normal_plane, 0.0); // background plane\n    vec3 normal_sphere = normalize(vec3(p.x, p.y, sqrt(t)));\n    //return vec4(normal_sphere, 1.0); // sphere\n    return vec4(mix(normal_plane, normal_sphere, step(0.0, t)), choose); // antialiased version\n}\n\nvec4 sphere_lighted(vec2 p, vec3 c0, vec3 c1, vec2 t, vec3 l) // (could be parametrized further)\n{\n    vec3 rd = vec3(p, 1.0);\n\n    vec4 r = sphere_normal(p);\n    vec3 n = vec3(r);\n    vec3 h = normalize(l + normalize(rd));\n    float specular = pow(max(dot(h, n), 0.0), 50.0);\n    //float diffuse = 0.5 * max(dot(n, l), 0.0); // correct\n    float diffuse = max((0.5 * dot(n, l)) + 0.5, 0.0); // hack: light goes \"around\" a bit\n    float ambient = 0.0;\n\n    //vec2 q = vec2(0.5 - 0.5 * atan(n.z, n.x) / PI, -0.5 + 0.5 * p.y);\n    // https://en.wikipedia.org/wiki/Mercator_projection\n    vec2 q = vec2(0.5 - 0.5 * atan(n.z, n.x) / pi, 1.0-acos(n.y) / pi); // looks ok but is this correct?\n    q.y = (1.0 - n.z/5.0/*cam-dist*/) * (2.0 * q.y - 1.0) * 0.5 + 0.5; // perspective\n    vec3 color = (ambient + diffuse) * checker(c0, c1, vec2(iTime / 10.0, 0.0) + q * t);\n    color += specular * 0.75;\n\n    return vec4(color, r.w);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n\n    vec3 l = normalize(vec3(1.0, 1.0, 1.0));\n    //vec3 l = vec3(sin(iTime), 0.0, cos(iTime));\n    vec4 s = sphere_lighted(p, vec3(0.1), vec3(0.9), vec2(6.0, 4.0), l);\n    //vec4 s = sphere_lighted((p+0.5)*2.0, vec3(0.1), vec3(0.9), vec2(6.0, 4.0), l);\n    vec3 color = mix(vec3(0.0), vec3(s), s.w);\n\n    fragColor = vec4(sqrt(color), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}