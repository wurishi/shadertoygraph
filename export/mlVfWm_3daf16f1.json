{"ver":"0.1","info":{"id":"mlVfWm","date":"1702170930","viewed":54,"name":"orthogonal circles shell sdf 3d","username":"jt","description":"Loopless, exact SDF for orthogonal circles shell.\nWhen cutting through xz plane circle arcs are orthogonal to and endpoints are equidistant on the unit-circle.\nInspired by Real_NC's [url=https://www.shadertoy.com/view/mlGBRm]suggestion[/url].","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["sdf","circle","distance","conformal","disk","loopless","shell","exact","orthogonal"],"hasliked":0,"parentid":"ctyBzm","parentname":"orthogonal circles flower sdf 3d"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/mlVfWm orthogonal circles shell sdf 3d, 2023 jt\n// based on https://www.shadertoy.com/view/clGBzm orthogonal circles flower sdf 2\n// based on https://www.shadertoy.com/view/dldBWl orthogonal circles flower sdf\n// exact sdf for shape related to https://www.shadertoy.com/view/cltfW2 orthogonal circles flower\n\n// nested tori sibling: https://www.shadertoy.com/view/ctyBzm orthogonal circles flower sdf 3d\n\n// Loopless, exact SDF for orthogonal circles shell. When cutting through xz plane\n// circle arcs are orthogonal to and endpoints are equidistant on the unit-circle.\n\n// Inspired by Real_NC's suggestion https://www.shadertoy.com/view/mlGBRm\n\n// TODO: include unit-sphere cutout in sdf (currently done by intersection)\n\n// Sibling with discs instead of sphere caps:\n// https://www.shadertoy.com/view/dtVfzG abstract desert rose\n\n// tags: sdf, shell, circle, distance, conformal, disk, loopless, exact, orthogonal\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define pi 3.1415926\n\nfloat ortho_circle_flower_sdf(int n, vec3 p) // https://www.shadertoy.com/view/dldBWl orthogonal circle flower sdf, 2023 jt\n{\n    n = 2*n+1; // n must be odd integer\n    float slice = pi/float(n);\n\n    p.x = abs(p.x); // mirror horizontally\n    float r = (p.z*p.z+2.0*p.z+p.y*p.y+p.x*p.x+1.0)/(2.0*p.x); // calculate radius of circular sphere cap passing through this point\n\n    // equidistant circle segment endpoints on unit circle\n    float r0 = tan(floor(atan(r)/slice)*slice); // to angle then quantize then to length\n    float r1 = tan( ceil(atan(r)/slice)*slice); // to angle then quantize then to length\n\n    // sphere center\n    vec3 c0 = vec3(r0,0,-1); // lower leaf\n    vec3 c1 = vec3(r1,0,-1); // upper leaf\n\n    return // TODO: include unit-sphere cut-off in sdf\n        min(abs(length(p-c0)-r0),abs(length(p-c1)-r1)); // nested sphere leafs\n}\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\nfloat map(vec3 p)\n{\n    int n = int(mix(3.0, 11.0, 0.5+0.5*cos(2.0*pi*iTime/10.0))); // animate number of leafs\n    return ortho_circle_flower_sdf(n, p)-0.005;\n}\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n#define ITER_MAX 200u\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal( vec3 p )\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*map( p + k.xyy*h ) +\n                      k.yyx*map( p + k.yyx*h ) +\n                      k.yxy*map( p + k.yxy*h ) +\n                      k.xxx*map( p + k.xxx*h ) );\n}\n\nfloat trace(vec3 ro, vec3 rd, float t0, float t1) // pass on running out of iterations\n{\n    // NOTE: Limited number of iterations to avoid stalling\n    //       when ray passes closely (just above EPSILON)\n    //       in parallel to a surface.\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON)\n            return t;\n        t += h;\n    }\n\n    return t; // stop on running out of iterations\n    //return t1; // pass on running out of iterations\n}\n\n// NOTE: Don't forget to add +normal*EPSILON to the starting position\n//       to avoid artifacts caused by getting stuck in the surface\n//       due to starting at distance < EPSILON from the surface.\n//       (normal could be calculated here but that would most likely be redundant)\nfloat shadow(vec3 ro, vec3 rd, float t0, float t1)\n{\n    return trace(ro, rd, t0, t1) < t1 ? 0.0 : 1.0;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow(vec3 ro, in vec3 rd, float t0, float t1, float k)\n{\n    float res = 1.0;\n    float ph = 1e20;\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++)\n    {\n        float h = map(ro + rd*t);\n        if( h < EPSILON )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor );\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\nfloat checker(vec2 p)\n{\n    return step(0.0, sin(p.x*pi)*sin(p.y*pi));\n}\n\nfloat checker(vec3 p)\n{\n    return step(0.0, sin(p.x*pi)*sin(p.y*pi)*sin(p.z*pi));\n}\n\nvec3 material(vec3 p)\n{\n    //return vec3(1.0); // TODO\n    return mix(vec3(0.25), vec3(0.75), checker(p*2.0+0.5));\n}\n\nvec2 sphIntersect( in vec3 ro, in vec3 rd, in vec3 ce, float ra ) // https://iquilezles.org/articles/intersectors/\n{\n    vec3 oc = ro - ce;\n    float b = dot( oc, rd );\n    vec3 qc = oc - b*rd;\n    float h = ra*ra - dot( qc, qc );\n    if( h<0.0 ) return vec2(DIST_MAX); // no intersection\n    h = sqrt( h );\n    return vec2( -b-h, -b+h );\n}\n\nvoid mainImage(out vec4 fragColor, vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    I = (2.0 * I - R) / R.y; // concise scaling thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : 4.0/3.0 * pi / 2.0;\n\n    vec3 ro = vec3(0.0, 0.0,-2.5);\n    vec3 rd = normalize(vec3(I.xy, 2.0)); // NOTE: omitting normalization results in clipped edges artifact\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n    //ro.z += 1.0;\n\n    vec2 bounds = sphIntersect(ro, rd, vec3(0), 1.0); // unit-sphere cut-out WORKAROUND until included in sdf\n\n    vec3 color = vec3(1);\n    //float dist = trace(ro, rd, 0.0, DIST_MAX);\n    float dist = trace(ro, rd, bounds.x, bounds.y);\n    //if(dist < DIST_MAX)\n    if(dist < bounds.y)\n    {\n        vec3 dst = ro + rd * dist;\n        vec3 n = normal(dst);\n\n        //color *= (n * 0.5 + 0.5);\n        color *= material(dst);\n\n        vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n        vec3 ambient = vec3(0.4);\n        float brightness = max(dot(lightdir, n), 0.0);\n        if(brightness > 0.0)\n            //brightness *= shadow(ro + rd * dist + n * 0.01, lightdir, 0.0, DIST_MAX);\n            brightness *= shadow(ro + rd * dist + n * 0.01, lightdir, 0.0, bounds.y);\n            //brightness *= softshadow(ro + rd * dist + n * 0.01, lightdir, 0.0, DIST_MAX, 20.0);\n            //brightness *= softshadow(ro + rd * dist + n * 0.01, lightdir, 0.0, bounds.y, 20.0);\n        color *= (ambient * calcAO(dst, n) + brightness);\n\n        if(brightness > 0.0)\n        {\n            float specular = pow(max(0.0, dot(n, normalize(-rd + lightdir))), 250.0);\n            color += specular;\n        }\n\n        vec3 fog_color = vec3(0.2);\n        color = mix(fog_color, vec3(color), exp(-pow(dist/20.0, 2.0))); // fog\n    }\n    else\n    {\n        //color *= mix(vec3(0,0.5,0.5),vec3(0,0,1),abs(-rd.z)); // sky\n        color *= 0.0;\n    }\n\n    if(iMouse.z > 0.0)\n    {\n        if(bounds.x < DIST_MAX) // Real_NC's \"hologram\"\n        {\n            vec3 ri2 = ro + rd*bounds.x;\n            color = mix(color, vec3(0,1,0), smoothstep(.02, .01, min(abs(fract(atan(ri2.x, ri2.y)/pi*10.) - .5)*length(ri2.xy),abs(fract(acos(ri2.z)/pi*14.)-.5)*.5)));\n        }\n    }\n\n    color = tanh(color); // roll-off overly bright colors\n    color = sqrt(color); // approximate gamma\n    fragColor = vec4(color, 1);\n}\n","name":"Image","description":"","type":"image"}]}