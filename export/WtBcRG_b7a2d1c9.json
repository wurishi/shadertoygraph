{"ver":"0.1","info":{"id":"WtBcRG","date":"1594604303","viewed":184,"name":"Quadrupole Contour Plot","username":"Mr_Mayhem","description":"Four singularities in a square, combined with a mouse singularity having opposite phase.\nUpdated to color the \"zero contour line\" black (or white by un-commenting alternate code). \nUse mouse or tap touchscreen.\n\n","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["distancefields","contours","noloop","fields","topo","quadrupole"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// by Mr_Mayhem July 2020\n// An animated contour plot with sharper lines than earlier posts. \n// Use mouse or tap touchscreen.\n\n// Heavily modified from https://www.shadertoy.com/view/lltBWM by 8x\n// As the animation cycles, the poles become zeroes and the zeroes become poles.\n// Another way to explain this, is the hills become valleys and the valleys become hills.\n// Thanks to FabriceNeyret2 for many improvements.\n\n#define addPole(u,v)  z +=  h / (1. + length(fragCoord - R*vec2(u, v)));\n#define addZero(u,v)  z += -h / (1. + length(fragCoord - R*vec2(u, v)));\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2  R = iResolution.xy;\n    float h = 1000.; // try increasing this, heh.\n    float z = 0.0;   // Equivalent to z value or height in 3d at this pixel location\n    float th = 1.0;  // threshold used to skip painting coutours at pixels near zero height\n                     // (removes the permanent artifact contour line at zero height)\n    \n    // create some poles and zeros\n    // (positive and negative values of 'sum' with respect to xy location)\n    // (like peaks and valleys in terrain)\n    // 4 zeros in a square make a Quadrupole\n    addZero(0.3, 0.3); // (a negative dip around a point, like a circularly symmetrical valley in 3d)\n    addZero(0.3, 0.7);    \n    addZero(0.7, 0.3);\n    addZero(0.7, 0.7);        \n            \n    // Place a pole at the mouse location when clicked \n    // (a positive peak around a point, like a circularly symmetrical hill in 3d)\n    addPole(iMouse.x/R.x, iMouse.y/R.y);\n    z *=  0.5; // divide the combined height value by half\n    \n    // animate\n    z *= sin(iTime/2.);\n    \n    // Thanks to FabriceNeyret for helping me sort this out\n    float d = fract(z);\n    d = mod(z, 2.) > 1.  ? d = 1. -d : d;\n    d = sign(z) * smoothstep(1.5, .0, d / fwidth(z));\n    \n    // Set the final output color\n    // green and red contours with white color at the zero-gradient contour line\n    // fragColor = abs(z) > th ? vec4(-d, d, 0, 1) : vec4(abs(d));\n    \n    // green and red contours with black color at the zero-gradient contour line\n    fragColor = abs(z) > th ? vec4(-d, d, 0, 1) : vec4(0.0);\n    \n    // black background with white contour lines\n    // fragColor = abs(z) > th ? vec4(abs(d)) : vec4(0.0);\n}\n\n","name":"Image","description":"","type":"image"}]}