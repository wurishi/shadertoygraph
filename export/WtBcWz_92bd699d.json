{"ver":"0.1","info":{"id":"WtBcWz","date":"1594114767","viewed":76,"name":"brickz","username":"miko3k","description":"simple bricks shader... Some includes some smoothing and randomness\n\nCould be improved by adding some noise","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["bricks"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float BRICK_RATIO = 2.0f;\nconst float BRICK_EDGE = 0.10f;\nconst float BRICK_SIZE = 1.0/10.0;\nconst vec4 MORTAR_COLOR = vec4(1.0, 1.0, 0.9, 1.0);\nconst vec4 BRICK_COLOR = vec4(0.5, 0.2, 0.2, 1.0);\n\n\nfloat getEdge(float t, float edge) {\n    float e1 = edge/4.0;\n    float e2 = edge/2.0;\n    \n\treturn (1.0-smoothstep(e1, e2, t)) + smoothstep(1.0-e2, 1.0-e1, t);    \n}\n\n\nvec4 brick(vec3 b) {\n    b /= BRICK_SIZE;\n    b.xy /= BRICK_RATIO;\n    b.xy += step(1., mod(b.z,2.0)) * 0.5;\n    \n\n    vec3 fl = floor(b);\n\tvec3 fr = fract(b);\n    \n    //vec2 map = getMixAmount((fl+(0.5, 0.5)) * vec2(BRICK_RATIO*BRICK_SIZE, BRICK_SIZE));\n    float presence = 0.0;//map.x + rand(map)/4.0;\n    \n    float edge = getEdge(fr.x, BRICK_EDGE/BRICK_RATIO) + getEdge(fr.z, BRICK_EDGE);\n    /*vec3 rnd = vec3(\n        snoise(fl/10.0)+rand(fl), \n        rand(fl+0.123), \n        0.0);*/\n    \n   // float pattern = 1.0-smoothstep(0.4, 0.9, snoise(b*2.0))*0.3;\n    \n    vec4 color = BRICK_COLOR  /*+ vec4(rnd*0.16, 0.0)*/;\n    return (edge * MORTAR_COLOR + (1.0-edge) * color) * step(presence, 0.5);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    float w = iResolution.x/iResolution.y;\n    \n    vec2 uv = fragCoord/iResolution.y;\n    uv.x -= (w-1.0)/2.0;\n    \n    \n    uv += vec2(sin(iTime/2.0)/4.0, cos(iTime/4.0));\n    \n    \n    if(squareOne(uv) != 0.0) {\n        fragColor = vec4(0.5,1.6,0.6,1.0); \n    } else {\n\t\tfragColor = brick(vec3(uv.x, 0.0, uv.y)); \n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 getMixAmount(vec2 where) {\n\treturn where;\n}\n\n\nvec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\n\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n\n\nconst float SQUARE_A = -0.01;\nconst float SQUARE_B = 0.01;\nconst float SQUARE_C = 0.99;\nconst float SQUARE_D = 1.01;\n \nfloat squareOne(vec2 uv) {\n    float v = (uv.x >= SQUARE_A && uv.x <= SQUARE_D && ((uv.y >= SQUARE_A && uv.y <= SQUARE_B) || (uv.y >= SQUARE_C && uv.y <= SQUARE_D))) ? 1.0 : 0.0; \n    float h = (uv.y >= SQUARE_A && uv.y <= SQUARE_D && ((uv.x >= SQUARE_A && uv.x <= SQUARE_B) || (uv.x >= SQUARE_C && uv.x <= SQUARE_D))) ? 1.0 : 0.0; \n    \n    return step(0.5, v+h);\n        \n}\n\n\nfloat snoise(vec2 v){\n  const vec4 C = vec4(0.211324865405187, 0.366025403784439,\n           -0.577350269189626, 0.024390243902439);\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod(i, 289.0);\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n  + i.x + vec3(0.0, i1.x, 1.0 ));\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n    dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}","name":"Common","description":"","type":"common"}]}