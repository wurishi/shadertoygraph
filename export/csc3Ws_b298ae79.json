{"ver":"0.1","info":{"id":"csc3Ws","date":"1678026552","viewed":188,"name":"n-color gradient map","username":"ducttapecode","description":"gradient map with n number of colors with position","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["gradient","gradientmap"],"hasliked":0,"parentid":"fssSRf","parentname":"Gradient Map (N colors)"},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// vec4(Red, Green, Blue, GradientPosition = 0 to 1)\nconst vec4 color[] = vec4[](\n    vec4(1.0, 0.0, 0.0, 0.0),\n    vec4(1.0, 1.0, 0.0, 0.250),\n    vec4(0.0, 1.0, 1.0, 0.350),\n    vec4(1.0, 0.0, 1.0, 0.567),\n    vec4(0.0, 0.0, 1.0, 0.789),\n    vec4(1.0, 0.0, 0.0, 1.0)\n);\n\n// boundary positions\n// color[0].a = 0.0;\n// color[color.length - 1].a = 1.0;\n\n// for a smooth loop align boundaries\n// color[color.length - 1].rgb = color[0].rgb;\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // horizontal gradient\n    float t = uv.x;\n    \n#if 1\n    // shape gradient through texture\n    t = texture(iChannel0, uv).r;\n    \n    // loop over time\n    t += fract(iTime*0.2); \n    if (t > 1.0) {t = t - 1.0;}\n#endif\n\n    \n    // find the correct color index\n    int i;\n    for(i = 1; i < color.length(); i++) {\n      if (t < color[i].a) {\n        break;\n      }\n    }\n\n    // normalize t\n    t = (t - color[i-1].a) / (color[i].a - color[i-1].a);\n\n#if 0\n    // non-smooth gradient\n    t = step(0.5, t);\n#endif\n    \n    // mix final color\n    vec3 col = mix(color[i-1].rgb, color[i].rgb, t);  \n    \n\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}