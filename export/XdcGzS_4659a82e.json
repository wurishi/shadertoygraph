{"ver":"0.1","info":{"id":"XdcGzS","date":"1450295740","viewed":323,"name":"BinarySubDivPolar","username":"jt","description":"Radial resp. Polar version of [url]https://www.shadertoy.com/view/4t2SWc[/url]\n(Applying polar transform & rotation inspired by lycium's https://www.shadertoy.com/view/4l2SRW)","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["radial","polar","subdivision","short","binarytree","dyadicseries"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"// Binary Sub-Division Pattern in Polar Coordinates - written 2015 by Jakob Thomsen\n// (essentially a polar(radial version of my https://www.shadertoy.com/view/4t2SWc)\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// (Applying polar transform & rotation inspired by lycium's https://www.shadertoy.com/view/4l2SRW)\n\nvoid mainImage(out vec4 o, vec2 I) // optimized thanks to FabriceNeyret2\n{\n    vec2  R = iResolution.xy;\n    float l = length( I+= I-R ) / R.y,\n          a = atan(I.y,I.x)/6.28;\n    o -= o;\n    l < 1. ? o += step(.5, fract(exp2(ceil(l*7.)) * a + iTime)) : o;\n}\n\n//void mainImage(out vec4 o, vec2 I) // original\n//{\n//    vec2 R = iResolution.xy;\n//    I = (I+I-R)/R.y;\n//    //I = (I+I-(I=iResolution.xy))/I.y; // NOT COMPATIBLE\n//    I = vec2(fract(atan(I.y,I.x)/6.28),length(I));\n//    o -= o;\n//    //if(I.y < 1.) o += step(.5, fract(exp2(ceil(I.y * 7.)) * I.x + iDate.w));\n//    I.y < 1. ? o += step(.5, fract(exp2(ceil(I.y * 7.)) * I.x + iDate.w)) : o; // FabriceNeyret2's optimization\n//}\n","name":"Image","description":"","type":"image"}]}