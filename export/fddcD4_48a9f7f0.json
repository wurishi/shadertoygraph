{"ver":"0.1","info":{"id":"fddcD4","date":"1655193716","viewed":197,"name":"BSDFs.","username":"VL","description":"From left\n{\nLambertian diffuse\nOrenNayar \nSpecular transmission\nSpecular reflection & transmission\nSpecular reflection\nMicrofacet reflection & diffuse\nBeckmann         Microfacet reflection\nTrowbridgeReitz\nMicrofacet Transmission\n}\nref : pbrt-v3","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 tex = texelFetch( iChannel0, ivec2(fragCoord), 0 );\n    vec3 col = tex.xyz/tex.w;\n\n    col = pow(col ,vec3(0.4545));\n    fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nmat3 viewMatrix(vec3 look)\n{\n    vec3 right = normalize(cross(vec3(0.f, 1.f, 0.f), look));\n    vec3 up = cross(look, right);\n    return transpose(mat3(right, up, look));\n}\n\nvec2 hash(vec2 p)\n{\n    p.x += iTime;\n    vec3 p3 = fract(vec3(p.xyx) * vec3(134.1031, 155.1030, 195.0973));\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx + p3.yz) * p3.zy );\n}\n\nvec3 hash(vec3 p3)\n{\n    p3.x += iTime;\n    p3 = fract(p3 * vec3(134.1031, 154.1030, 166.0973));\n    p3 += dot(p3, p3.yxz + 33.33);\n    return fract((p3.xxy + p3.yxx) * p3.zyx );\n}\n\nfloat sphereIntersect(vec3 ro, vec3 rd, vec4 p)\n{\n    vec3 rop = ro - p.xyz;\n    \n    float b = dot(rop, rd);\n    float ac = dot(rop,rop) - p.w*p.w;\n    \n    float h = b*b -ac;\n    \n    if(h < 0.)\n        return -1.;\n        \n    h = sqrt(h);\n    return -b - h;\n}\n\nmat3 sphereNormTrans(vec3 p, vec3 p0, vec3 n)\n{\n    float u = atan(n.z, n.x);\n    float v = acos(n.y);\n    \n    float su = sin(u);\n    float cu = cos(u);\n    \n    float sv = sin(v);\n    float cv = n.y;\n    \n    vec3 t = vec3(cu*cv, -sv, su*cv);\n    vec3 s = cross(n, t);\n    \n    return transpose(mat3(s, n, t));\n}\n\nfloat planeIntersect(vec3 ro, vec3 rd, vec3 n, vec3 p)\n{\n    float nrd = dot(n, rd);\n\n    return dot(n, p-ro) / nrd;\n}\n\nfloat cosTheta(vec3 w)\n{\n    return w.y;\n}\n\nfloat cosTheta2(vec3 w)\n{\n    return w.y*w.y;\n}\n\nfloat sinTheta2(vec3 w)\n{\n     return max(0., 1. - cosTheta2(w));\n}\n\nfloat sinTheta(vec3 w)\n{\n    return sqrt(sinTheta2(w));\n}\n\nfloat cosPhi(vec3 w) {\n    float st = sinTheta(w);\n    return (st == 0.) ? 1. : clamp(w.x / st, -1., 1.);\n}\n\nfloat sinPhi(vec3 w) {\n    float st = sinTheta(w);\n    return (st == 0.) ? 0. : clamp(w.z / st, -1., 1.);\n}\n\nfloat orenNayar(float sigma, vec3 wo, vec3 wi, mat3 trans)\n{\n    wo = trans * wo;\n    wi = trans * wi;\n    \n    float cosThetaI = abs(cosTheta(wi));\n    float sinThetaI = sinTheta(wi);\n    \n    float cosThetaO = abs(cosTheta(wo));\n    float sinThetaO = sinTheta(wo);\n    \n    float cosPhiI = cosPhi(wi);\n    float sinPhiI = sinPhi(wi);\n        \n    float cosPhiO = cosPhi(wo);\n    float sinPhiO = sinPhi(wo);\n        \n    float cosPhiIO = max(cosPhiI * cosPhiO + sinPhiI * sinPhiO, 0.);\n    \n    float sinMax = cosThetaI > cosThetaO ? sinThetaO : sinThetaI;\n    float tanMax = cosThetaI > cosThetaO ? sinThetaI/cosThetaI : sinThetaO/cosThetaO;    \n    \n    float sigma2 = sigma * sigma;    \n    float A = 1. - sigma2/(2.*(sigma2+0.33));\n    float B = 0.45*sigma2/(sigma2+0.09);\n    \n    return (A + B*cosPhiIO*sinMax*tanMax)/3.141592;\n}\n\nfloat fresnelDielectric(vec3 wi, float etaI, float etaT)\n{\n    float cosThetaI = clamp(cosTheta(wi), -1., 1.);\n    if(cosThetaI < 0.)\n    {\n        cosThetaI = -cosThetaI;\n        float tmp = etaI;\n        etaI = etaT;\n        etaT = tmp;\n    }\n    float sinThetaI = sqrt(1. - cosThetaI * cosThetaI);\n    \n    float sinThetaT = (etaI/etaT) * sinThetaI;\n    \n    if (sinThetaT >= 1.) \n        return 1.;\n    float cosThetaT = sqrt(1. - sinThetaT * sinThetaT);\n    \n    float rParl = (etaT*cosThetaI - etaI*cosThetaT)/(etaT*cosThetaI + etaI*cosThetaT);\n    float rPerp = (etaI*cosThetaI - etaT*cosThetaT)/(etaI*cosThetaI + etaT*cosThetaT);\n    \n    \n    return 0.5 * (rParl*rParl + rPerp*rPerp);\n}\n\nfloat fresnelDielectricf(float cosThetaI, float etaI, float etaT)\n{\n    cosThetaI = clamp(cosThetaI, -1., 1.);\n    if(cosThetaI < 0.)\n    {\n        cosThetaI = -cosThetaI;\n        float tmp = etaI;\n        etaI = etaT;\n        etaT = tmp;\n    }\n    float sinThetaI = sqrt(1. - cosThetaI * cosThetaI);\n    \n    float sinThetaT = (etaI/etaT) * sinThetaI;\n    \n    if (sinThetaT >= 1.) \n        return 1.;\n    float cosThetaT = sqrt(1. - sinThetaT * sinThetaT);\n    \n    float rParl = (etaT*cosThetaI - etaI*cosThetaT)/(etaT*cosThetaI + etaI*cosThetaT);\n    float rPerp = (etaI*cosThetaI - etaT*cosThetaT)/(etaI*cosThetaI + etaT*cosThetaT);\n    \n    \n    return 0.5 * (rParl*rParl + rPerp*rPerp);\n}\n\n\nvec3 fresnelConductor(vec3 wi, vec3 n, vec3 etaI, vec3 etaT, vec3 k)\n{\n    float cosThetaI = clamp(abs(dot(wi, n)), 0., 1.);\n    vec3 eta = etaT/etaI;\n    vec3 etak = k/etaI;\n    \n    float cosThetaI2 = cosThetaI * cosThetaI;\n    float sinThetaI2 = 1. - cosThetaI2;\n    vec3 eta2 = eta * eta;\n    vec3 etak2 = etak * etak;\n\n    vec3 t0 = eta2 - etak2 - sinThetaI2;\n    vec3 a2plusb2 = sqrt(t0 * t0 + 4. * eta2 * etak2);\n    vec3 t1 = a2plusb2 + cosThetaI2;\n    vec3 a = sqrt(0.5 * (a2plusb2 + t0));\n    vec3 t2 = 2. * cosThetaI * a;\n    vec3 Rs = (t1 - t2) / (t1 + t2);\n\n    vec3 t3 = cosThetaI2 * a2plusb2 + sinThetaI2 * sinThetaI2;\n    vec3 t4 = t2 * sinThetaI2;\n    vec3 Rp = Rs * (t3 - t4) / (t3 + t4);\n\n    return 0.5 * (Rp + Rs);\n}\n\nvec3 cosHemisphere(mat3 normTrans, vec3 p)\n{\n    vec3 rand = hash(p);\n    \n    float x = sqrt(rand.x)*cos(2.*3.141592*rand.y);\n    float y = sqrt(rand.x)*sin(2.*3.141592*rand.y);\n    float z = sqrt(1.-x*x-y*y);\n    \n    return transpose(normTrans) * vec3(x, y, z);\n}\n\nfloat beckmannDistribution(vec3 wh, float x, float y)\n{\n    float cosTheta2 = cosTheta2(wh);\n    if(cosTheta2 == 0.)\n        return 0.;\n        \n    float sinTheta2 = sinTheta2(wh);\n    float tanTheta2 = sinTheta2 /cosTheta2;\n    float cosPhi = cosPhi(wh);\n    float sinPhi = sinPhi(wh);\n   \n   return exp(-tanTheta2 * (cosPhi*cosPhi/(x*x) + sinPhi*sinPhi/(y*y)))\n           /(3.141592*x*y*cosTheta2*cosTheta2);\n}\n\nvec3 beckmannWh(vec3 wo, vec3 p, float x, float y, mat3 trans)\n{\n    vec3 rand = hash(p);    \n    float phiH = atan(tan(2.*3.141592*rand.y)*y/x);\n    float cosPhiH = cos(phiH);\n    float sinPhiH = sin(phiH);\n    \n    float logX = log(rand.x);\n    float tanThetaH2 = -logX/(cosPhiH*cosPhiH/(x*x) + sinPhiH*sinPhiH/(y*y)); \n    \n    float cosThetaH = 1./sqrt(1.+tanThetaH2);\n    float sinThetaH = sqrt(max(1. - cosThetaH*cosThetaH,0.));\n    \n    return transpose(trans) * vec3(cosPhiH*sinThetaH, cosThetaH, sinPhiH*sinThetaH);\n}\n\nvec3 fresnelBlend(vec3 p, vec3 wo, vec3 wi, vec3 n, mat3 trans, vec3 Rd, vec3 Rs, float x, float y)\n{\n    vec3 wh = wo + wi;\n    float lenH = length(wh);\n    if(lenH == 0.)\n        return vec3(0.);\n    wh /= lenH;\n    \n    float cosThetaI = abs(dot(n, wi));\n    float cosThetaO = abs(dot(n, wo));\n    float idh = dot(wi,wh);\n    \n    vec3 diffuse = (28./(23.*3.141592)) * Rd * (1. - Rs)\n                   * (1.-pow(1.-0.5*cosThetaI,5.))*(1.-pow(1.-0.5*cosThetaO,5.));\n    vec3 specular = (Rs + pow(1.-idh,5.)*(1. - Rs)) * beckmannDistribution(trans * wh, x, y)\n    /(4.* abs(idh)*max(cosThetaI,cosThetaO));\n\n    return diffuse + specular;\n}\n\nfloat beckmannLamda(vec3 w, float x, float y)\n{\n    float cosTheta2 = cosTheta2(w);\n    if(cosTheta2 == 0.)\n        return 0.;\n        \n    float sinTheta2 = sinTheta2(w);\n    float tanTheta2 = sinTheta2/cosTheta2;\n    float cosPhi = cosPhi(w);\n    float sinPhi = sinPhi(w);\n    \n    float alpha = sqrt(cosPhi*cosPhi*x*x + sinPhi*sinPhi*y*y);\n    float a = 1./(alpha * sqrt(tanTheta2));\n    if(a >= 1.6)\n        return 0.;\n    return (1. - 1.259 * a + 0.396 * a * a) / (3.535 * a + 2.181 * a * a);\n}\n\nvec3 beckmannReflection(vec3 wo, vec3 wi, vec3 n, mat3 trans, vec3 etaI, vec3 etaT, vec3 k, float x, float y)\n{\n    float cosThetaO = abs(dot(n, wo));\n    float cosThetaI = abs(dot(n, wi));\n    \n    if(cosThetaO == 0. || cosThetaI == 0.)\n        return vec3(0.);\n        \n    vec3 wh = wo + wi;\n    float lenH = length(wh);\n    if(lenH == 0.)\n        return vec3(0.);\n    wh /= lenH;\n    \n    vec3 fr = fresnelConductor(wi, wh, etaI, etaT, k);\n    float d = beckmannDistribution(trans * wh, x,y);\n    float g = 1./(1. + beckmannLamda(trans * wo, x, y) + beckmannLamda(trans * wi, x, y));\n    \n    return fr * d * g/(4.*cosThetaI*cosThetaO); \n}\n\nfloat trowbridgeReitzDistribution(vec3 wh, float x, float y)\n{\n    float cosTheta2 = cosTheta2(wh);\n    if(cosTheta2 == 0.)\n        return 0.;\n        \n    float sinTheta2 = sinTheta2(wh);\n    float tanTheta2 = sinTheta2 /cosTheta2;\n    float cosPhi = cosPhi(wh);\n    float sinPhi = sinPhi(wh);\n    \n    float t = 1. + tanTheta2*(cosTheta2/(x*x) + sinTheta2/(y*y));\n    \n    return 1./(3.141592*x*y*cosTheta2*cosTheta2*t*t);\n}\n\nfloat trowbridgeReitzLamda(vec3 w, float x, float y)\n{\n    float cosTheta2 = cosTheta2(w);\n    if(cosTheta2 == 0.)\n        return 0.;\n        \n    float sinTheta2 = sinTheta2(w);\n    float tanTheta2 = sinTheta2/cosTheta2;\n    float cosPhi = cosPhi(w);\n    float sinPhi = sinPhi(w);\n    float alpha = sqrt(cosPhi*cosPhi*x*x + sinPhi*sinPhi*y*y);\n    \n    return 0.5*(-1. + sqrt(1. + alpha* alpha * tanTheta2));\n}\n\nvec3 trowbridgeReitzWh(vec3 wo, vec3 p, float x, float y, mat3 trans)\n{\n    vec3 rand = hash(p);    \n    float phiH = atan(tan(2.*3.141592*rand.y)*y/x);\n    float cosPhiH = cos(phiH);\n    float sinPhiH = sin(phiH);\n    \n    float tanThetaH2 = rand.x/(1.-rand.x) * 1./(cosPhiH*cosPhiH/(x*x) + sinPhiH*sinPhiH/(y*y)); \n    \n    float cosThetaH = 1./sqrt(1.+tanThetaH2);\n    float sinThetaH = sqrt(max(1. - cosThetaH*cosThetaH,0.));\n    \n    return transpose(trans) * vec3(cosPhiH*sinThetaH, cosThetaH, sinPhiH*sinThetaH);\n}\n\nvec3 trowbridgeReitzReflection(vec3 wo, vec3 wi, vec3 n, mat3 trans, vec3 etaI, vec3 etaT, vec3 k, float x, float y)\n{\n    float cosThetaO = abs(dot(n, wo));\n    float cosThetaI = abs(dot(n, wi));\n    \n    if(cosThetaO == 0. || cosThetaI == 0.)\n        return vec3(0.);\n        \n    vec3 wh = wo + wi;\n    float lenH = length(wh);\n    if(lenH == 0.)\n        return vec3(0.);\n    wh /= lenH;\n    \n    vec3 fr = fresnelConductor(wi, wh, etaI, etaT, k);\n    float d = trowbridgeReitzDistribution(trans * wh, x,y);\n    float g = 1./(1. + trowbridgeReitzLamda(trans * wo, x, y) + trowbridgeReitzLamda(trans * wi, x, y));\n    \n    return fr * d * g/(4.*cosThetaI*cosThetaO); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 col = vec4(0.);\n \n    vec2 offs = -0.5 + hash(fragCoord);\n    vec2 uv = (2.0*(fragCoord+offs)-iResolution.xy)/iResolution.y;\n    uv.x = -uv.x;\n    vec3 tar = vec3(0.f, 0.f,-2.6f);\n    \n    float moy = clamp((-2.*(iMouse.y / iResolution.y) + 1.)*3., 0., 3.141592*0.5);\n    vec3 ro = vec3(0.f, 2.5*cos(moy), 1.3 * sin(moy));\n    \n    vec3 rd = viewMatrix(normalize(tar - ro)) * normalize(vec3(uv, 1.f));\n    \n    \n    offs *= 0.5;\n    vec3 lightDir = normalize(vec3(3.+ offs.y, 5.,4.5 + offs.x));\n    vec3 lightPow = vec3(4.,2.5,2.2);\n    vec3 skyCol = vec3(1.,1.5,3.);\n    \n    int before = 0;\n    int idx = 0;\n    vec3 b = vec3(1.);\n    vec3 sky = mix( vec3(0.5,0.6,0.9), skyCol, smoothstep(0.05,0.9,rd.y) );\n\n    for(int i = 0; i < 4; ++i)\n    {\n        float tmin = 1000000.;\n\n        vec3 f = vec3(0.);\n        vec3 n = vec3(0.);\n        mat3 trans = mat3(vec3(1.,0.,0.),vec3(0.,1.,0.),vec3(0.,0.,1.));\n        idx = 0;\n        \n        float pl = planeIntersect(ro, rd, vec3(0.,1.,0.), vec3(0.,-1.,0.));\n        if(pl > 0.)\n        {\n            tmin = pl;\n            n = vec3(0.,1.,0.);\n            f = (ro + rd*tmin).z <-2.6? vec3(0.2,0.2,0.3) : vec3(0.7,0.7,0.9);\n            f /= 3.141592;\n            idx = 1;\n        }\n        \n        vec4 spLambPos = vec4(-5.6,-0.42,-2.6,0.6);\n        float spLamb = sphereIntersect(ro, rd, spLambPos);\n        if(spLamb > 0. && spLamb < tmin )\n        {\n            tmin = spLamb;\n            n = normalize(ro + rd* tmin - spLambPos.xyz);\n            trans = sphereNormTrans(ro + rd*tmin, spLambPos.xyz, n);\n            f = vec3(0.2,0.3,0.9)/ 3.141592;\n            idx = 1;\n        }\n    \n    \n        vec4 spOrenPos = vec4(-4.,-0.42,-2.6,0.6);\n        float spOren = sphereIntersect(ro, rd, spOrenPos);\n        if(spOren > 0. && spOren < tmin )\n        {\n            tmin = spOren;\n            n = normalize(ro + rd* tmin - spOrenPos.xyz);\n            trans = sphereNormTrans(ro + rd*tmin, spOrenPos.xyz, n);\n            f = vec3(0.9,0.3,0.9) * orenNayar(0.3, -rd, lightDir, trans);\n            idx = 2;\n        }\n        \n        vec4 spSpecReflPos = vec4(0.1, -0.42, -2.6, 0.6);\n        float spSpecRefl = sphereIntersect(ro, rd, spSpecReflPos);\n        if(spSpecRefl > 0. && spSpecRefl < tmin )\n        {\n            tmin = spSpecRefl;\n            n = normalize(ro + rd* tmin - spSpecReflPos.xyz);\n            f = vec3(0.);\n            idx = 3;\n        }\n        \n        vec4 spSpecTranPos = vec4(-2.6, -0.42, -2.6, 0.6);\n        float spSpecTran = sphereIntersect(ro, rd, spSpecTranPos);\n        if(spSpecTran > 0. && spSpecTran < tmin )\n        {\n            tmin = spSpecTran;\n            n = normalize(ro + rd* tmin - spSpecTranPos.xyz);\n            trans = sphereNormTrans(ro + rd*tmin, spSpecTranPos.xyz, n);\n            f = vec3(0.);\n            idx = 4;\n        }\n        \n        vec4 spFrReflTranPos = vec4(-1.2, -0.42, -2.6, 0.6);\n        float spFrReflTran = sphereIntersect(ro, rd, spFrReflTranPos);\n        if(spFrReflTran > 0. && spFrReflTran < tmin )\n        {\n            tmin = spFrReflTran;\n            n = normalize(ro + rd* tmin - spFrReflTranPos.xyz);\n            trans = sphereNormTrans(ro + rd*tmin, spFrReflTranPos.xyz, n);\n            f = vec3(0.);\n            idx = 5;\n        }\n        \n\n        vec4 spFrBlendPos = vec4(1.4, -0.42, -2.6, 0.6);\n        float spFrBlend = sphereIntersect(ro, rd, spFrBlendPos);\n        if(spFrBlend > 0. && spFrBlend < tmin )\n        {\n            tmin = spFrBlend;\n            n = normalize(ro + rd* tmin - spFrBlendPos.xyz);\n            trans = sphereNormTrans(ro + rd*tmin, spFrBlendPos.xyz, n);\n            f = fresnelBlend(ro + rd*tmin, -rd, lightDir, n, trans, vec3(0.2,0.3,0.9), vec3(0.5,0.3,0.5),0.5,0.5);\n            idx = 6;\n        }\n        \n        vec4 spBeckmannPos = vec4(2.7, -0.42, -2.6, 0.6);\n        float spBeckmann = sphereIntersect(ro, rd, spBeckmannPos);\n        if(spBeckmann > 0. && spBeckmann < tmin )\n        {\n            tmin = spBeckmann;\n            n = normalize(ro + rd* tmin - spBeckmannPos.xyz);\n            trans = sphereNormTrans(ro + rd*tmin, spBeckmannPos.xyz, n);\n            f = vec3(0.95,0.84,0.1) \n            * beckmannReflection(-rd, lightDir, n, trans, vec3(1.), vec3(0.1428,0.3741,1.4394), vec3(3.9747,2.3807,1.6), 0.5, 0.5);\n            idx = 7;\n        }\n        \n        vec4 spTrowReitzPos = vec4(4.1, -0.42, -2.6, 0.6);\n        float spTrowReitz = sphereIntersect(ro, rd, spTrowReitzPos);\n        if(spTrowReitz > 0. && spTrowReitz < tmin )\n        {\n            tmin = spTrowReitz;\n            n = normalize(ro + rd* tmin - spTrowReitzPos.xyz);\n            trans = sphereNormTrans(ro + rd*tmin, spTrowReitzPos.xyz, n);\n            f = vec3(0.4)\n            * trowbridgeReitzReflection(-rd, lightDir, n, trans, vec3(1.), vec3(0.1549,0.1165,0.138), vec3(4.8181,3.1156,2.1424), 0.5, 0.5);\n            idx = 8;\n        }\n        \n         vec4 spMicroTransPos = vec4(5.7, -0.42, -2.6, 0.6);\n        float spMicroTrans = sphereIntersect(ro, rd, spMicroTransPos);\n        if(spMicroTrans > 0. && spMicroTrans < tmin )\n        {\n            tmin = spMicroTrans;\n            n = normalize(ro + rd* tmin - spMicroTransPos.xyz);\n            trans = sphereNormTrans(ro + rd*tmin, spMicroTransPos.xyz, n);\n            f = vec3(0.);\n            idx = 9;\n        }\n        \n        sky = mix( vec3(0.5,0.6,0.9), skyCol, smoothstep(0.05,0.9,rd.y) );\n    \n        if(idx != 0)\n        {\n            ro = ro + rd*tmin;\n            bool shd = planeIntersect(ro + lightDir * 0.001, lightDir, vec3(0.,1.,0.), vec3(0.,-1.,0.)) < 0.;\n            shd = shd && (sphereIntersect(ro + lightDir * 0.001, lightDir, spLambPos) < 0.);\n            shd = shd && (sphereIntersect(ro + lightDir * 0.001, lightDir, spOrenPos) < 0.);\n            shd = shd && (sphereIntersect(ro + lightDir * 0.001, lightDir, spSpecReflPos) < 0.);\n            shd = shd && (sphereIntersect(ro + lightDir * 0.001, lightDir, spSpecTranPos) < 0.);\n            shd = shd && (sphereIntersect(ro + lightDir * 0.001, lightDir, spFrReflTranPos) < 0.);\n            shd = shd && (sphereIntersect(ro + lightDir * 0.001, lightDir, spFrBlendPos) < 0.);\n            shd = shd && (sphereIntersect(ro + lightDir * 0.001, lightDir, spBeckmannPos) < 0.);\n            shd = shd && (sphereIntersect(ro + lightDir * 0.001, lightDir, spTrowReitzPos) < 0.);\n            shd = shd && (sphereIntersect(ro + lightDir * 0.001, lightDir, spMicroTransPos) < 0.);\n            \n            col.rgb += b * f * lightPow * max(dot(n,lightDir),0.) * max(float(shd),0.1);\n            col.rgb += b * f * skyCol * smoothstep(-1.5, 2.5, ro.y);\n        \n            if(idx == 1)\n            {\n                rd = cosHemisphere(trans, ro);\n                if(dot(n, rd) < 0.)\n                    rd = -rd;\n                b *= f * 3.141592;\n            }\n            else if(idx == 2)\n            {\n                vec3 wi = cosHemisphere(trans, ro);\n                if(dot(n, wi) < 0.)\n                    wi = -wi;\n                b *= vec3(0.9,0.3,0.9) * orenNayar(0.3, -rd, wi, trans)*3.141592;\n                rd = wi;\n            \n            }\n            else if(idx == 3)\n            {\n                vec3 wi = reflect(rd, n);\n                b *= vec3(0.9);\n                rd = wi;\n            }\n            else if(idx == 4)\n            {\n                float eta = dot(-rd, n) > 0.? 1./1.6 : 1.6/1.;\n                vec3 wi = refract(rd, n, eta);\n                float fresnel = fresnelDielectric(trans * (-rd), 1., 1.6);\n                b *= vec3(0.8) * (1. - fresnel) * eta * eta;\n                rd = wi;\n            }\n            else if(idx == 5)\n            {\n                vec3 wi;\n                b *= vec3(0.9);\n                float fresnel = fresnelDielectric(trans * (-rd), 1., 1.6);\n                if(hash(ro).x < fresnel)\n                {\n                    wi = reflect(rd, n);\n                }\n                else\n                {\n                    float eta = dot(-rd, n) > 0.? 1./1.6 : 1.6/1.;\n                    wi = refract(rd, n, eta);\n                    b *= eta * eta;\n                }\n                rd = wi;\n            }\n            else if(idx == 6)\n            {\n                vec3 wi;\n                if(hash(ro).x < 0.5)\n                {\n                    wi = cosHemisphere(trans, ro);\n                    if(dot(n, wi) < 0.)\n                       wi = -wi;\n                }\n                else\n                {\n                    vec3 wh = beckmannWh(-rd, ro, 0.5, 0.5, trans);\n                    if(dot(n, wh) < 0.)\n                        wh = -wh;\n                    wi = reflect(rd, wh);\n                }\n                if(dot(n, wi) > 0.)\n                {\n                vec3 wh = normalize(-rd + wi);\n                float pdf = 0.5*(dot(n,wi)/3.141592 + beckmannDistribution(trans * wh, 0.5, 0.5) * dot(n, wh)/(4.*dot(-rd,wh)));\n                b *= fresnelBlend(ro, -rd, wi, n, trans, vec3(0.2,0.3,0.9), vec3(0.5,0.3,0.5),0.5,0.5) * dot(n,wi) / pdf;\n                }\n                else\n                {\n                    col.rgb += vec3(0.2,0.3,0.9)*b * sky;\n                    b *= 0.;\n                }\n                rd = wi;\n            }\n            else if(idx == 7)\n            {\n                vec3 wh = beckmannWh(-rd, ro, 0.5, 0.5, trans);\n                if(dot(n, wh) < 0.)\n                    wh = -wh;\n                vec3 wi = reflect(rd, wh);\n                if(dot(n, wi) > 0.)\n                {\n                b *= vec3(0.95,0.84,0.1) * abs(dot(n, wi));\n                b *= beckmannReflection(-rd, wi, n, trans, vec3(1.), vec3(0.1428,0.3741,1.4394), vec3(3.9747,2.3807,1.6), 0.5, 0.5);\n                b /= beckmannDistribution(trans * wh, 0.5, 0.5) * dot(n, wh)/(4.*dot(-rd,wh));\n                }\n                else\n                {\n                    col.rgb += vec3(0.95,0.84,0.1)*b * sky;\n                    b *= 0.;\n                }\n                rd = wi;\n            }\n            else if(idx == 8)\n            {\n                vec3 wh = trowbridgeReitzWh(-rd, ro, 0.5, 0.5, trans);\n                if(dot(n, wh) < 0.)\n                    wh = -wh;\n                vec3 wi = reflect(rd, wh);\n                if(dot(n, wi) > 0.)\n                {\n                b *= vec3(0.4) * abs(dot(n, wi));\n                b *= trowbridgeReitzReflection(-rd, wi, n, trans, vec3(1.), vec3(0.1549,0.1165,0.138), vec3(4.8181,3.1156,2.1424), 0.5, 0.5);\n                b /= trowbridgeReitzDistribution(trans * wh, 0.5, 0.5) * dot(n, wh)/(4.*dot(-rd,wh));\n                }\n                else\n                {\n                    col.rgb += vec3(0.4) * b * sky;\n                    b *= 0.;\n                }\n                rd = wi;   \n            }\n            else if(idx == 9)\n            {\n                vec3 wh = beckmannWh(-rd, ro, 0.5, 0.5, trans);\n                if(dot(n, wh) < 0.)\n                    wh = -wh;\n                float eta = dot(-rd, wh) > 0.? 1./1.6 : 1.6/1.;\n                vec3 wi = refract(rd, wh, eta);\n                b *= vec3(0.8);\n                if(dot(n,wi) < 0. && dot(wh, n) > 1e-4)\n                {\n                    b *= 1. - fresnelDielectricf(dot(-rd, wh), 1., 1.6);\n                    b *= 1./(1. + beckmannLamda(trans * (-rd), 0.5, 0.5) + beckmannLamda(trans * wi, 0.5, 0.5));\n                    b *= abs(dot(-rd, wh));\n                    b /= dot(-rd, n) * dot(wh,n);\n                }\n\n                rd = wi;\n            }\n\n            ro += rd * 0.001;\n            before = idx;           \n        }\n        else \n        {        \n            if(i == 0 || before == 3 || before == 4 || before == 5)\n                col.rgb += b * sky;\n            else if(before == 6)\n                col.rgb += vec3(0.2,0.3,0.9)* b * sky/3.141592;\n            else if(before == 7)\n                col.rgb += vec3(0.95,0.84,0.1)*b * sky/3.141592;\n            else if(before == 8)\n                col.rgb += vec3(0.4) * b * sky / 3.141592; \n            else if(before == 9)\n                col.rgb += vec3(0.8) * b * sky / 3.141592; \n            break;\n        }\n    }\n\n    col.a = 1.;\n    \n    if(iFrame == 0 || iMouse.z > 0.)\n        fragColor = col;\n    else\n        fragColor = texture( iChannel0, fragCoord/iResolution.xy) + col;\n}","name":"Buffer A","description":"","type":"buffer"}]}