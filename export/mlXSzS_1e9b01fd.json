{"ver":"0.1","info":{"id":"mlXSzS","date":"1674947615","viewed":71,"name":"Ruler Lines Improved","username":"zeejfps","description":"Simple shader that displays ruler like lines","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["lines","lol","ruler","healthbar"],"hasliked":0,"parentid":"dlsSD7","parentname":"Ruler Lines"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define WIDTH .003\n#define HEIGHT .5\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float numOfTicks = 50.0;\n    float divisor = 5.0;\n        \n    float tickWidth = WIDTH * iResolution.x;\n    float tickHeight = HEIGHT * iResolution.y;\n    float maxTickWidth = iResolution.x / numOfTicks;\n\n    // Probably should be a constant\n    vec3 backgroundColor = vec3(1, 1, 1);\n    float tickIndex = round(fragCoord.x / maxTickWidth);\n    \n    // Check which tick we are, 100 / 10 would mean every 10th tick is thicker\n    float remainder = mod(tickIndex, divisor);\n    bool shouldBeThick = remainder == 0.0;\n    if (shouldBeThick) {\n        // Probably could be a constant too\n        tickWidth = tickWidth * 2.0;\n        tickHeight = 1.0 * iResolution.y;\n    }\n     \n    float tickHalfWidth = tickWidth * 0.5;\n    float tickCoordX = (tickIndex * maxTickWidth);    \n    \n    vec3 color = backgroundColor;\n    \n    if (fragCoord.x > tickCoordX - tickHalfWidth && \n        fragCoord.x < tickCoordX + tickHalfWidth && \n        // Inverting height so the lines are cut of at the bottom\n        fragCoord.y > iResolution.y - tickHeight) \n    {\n        color = vec3(0, 0, 0);\n    }\n    \n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}