{"ver":"0.1","info":{"id":"MtccR4","date":"1531732850","viewed":332,"name":"Burning ship","username":"darkeclipz","description":"Burning ship fractal. yes, another fractal, i love fractals.\n\ni hope its not too gpu intensive.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["fractal","burningship"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Palette\n\nstruct palette {\n    vec3 c0, c1, c2, c3, c4;\n};\n\npalette palette_red_accented() {\n    palette p; \n    p.c0 = vec3(0,0,16)/255.;\n    p.c1 = vec3(202,202,200)/255.;\n    p.c2 = vec3(255)/255.;\n    p.c3 = vec3(182,132,107)/255.;\n    p.c4 = vec3(247,49,73)/255.;\n    return p;    \n}\n\n    \npalette palette_calm_blue() {\n    palette p; \n    p.c0 = vec3(5,8,49)/255.;\n    p.c1 = vec3(19,48,114)/255.;\n    p.c2 = vec3(213,230,247)/255.;\n    p.c3 = vec3(213,230,247)/255.;\n    p.c4 = vec3(5,8,49)/255.;\n    return p;    \n}\n    \npalette palette_green() {\n    palette p; \n    p.c0 = vec3(0,120,122)/255.;\n    p.c1 = vec3(148,235,216)/255.;\n    p.c2 = vec3(0,179,73)/255.;\n    p.c3 = vec3(0,121,57)/255.;\n    p.c4 = vec3(0,61,52)/255.;\n    return p;    \n}\n\npalette palette_blue() {\n    palette p; \n    p.c0 = vec3(0,2,5)/255.;\n    p.c1 = vec3(8,45,58)/255.;\n    p.c2 = vec3(38,116,145)/255.;\n    p.c3 = vec3(167,184,181)/255.;\n    p.c4 = vec3(207,197,188)/255.;\n    return p;    \n}\n\n// Random\n\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nfloat randSeed = 0.;\nvec2 nextRand2() {\n    vec2 v = vec2( randSeed++, randSeed++ );\n\treturn vec2( random( v+0.34 ), random( v+0.75 ) );    \n}\n\n// Mapping\n\nvec3 cmap( float t, palette p ) {\n    vec3 col = vec3(0);\n    col = mix( p.c0,  p.c1, smoothstep(0. , .2, t));\n    col = mix( col, p.c2, smoothstep(.2, .4 , t));\n    col = mix( col, p.c3, smoothstep(.4 , .6, t));\n    col = mix( col, p.c4, smoothstep(.6,  .8, t));\n    col = mix( col, p.c0, smoothstep(.8, 1.,  t));\n    return col;\n}\n\n//#define MAX_ITER 1024.\n#define MAX_ITER 80.\n#define THRESHOLD 16.\nfloat bship(vec2 uv) {\n    \n    // z = ( |Re(z)| + i|Im(z)| )^2\n    \n\tvec2 c = 0.1*(uv - vec2(.2,0)) - vec2(1.74,0.035); \n    vec2 z = vec2(0); \n    float i = 0.;\n    \n    for(; ++i <= MAX_ITER ;) {\n        z = abs(z);\n        z = mat2(z, -z.y, z.x) * z + c;\n    \tif( dot(z,z) > THRESHOLD ) break;\n\t}\n  \n    float l2 = log(2.);\n    return i - log(log(dot(z,z))/l2)/l2;\t\t    \n}\n\n// Main\n\n#define SAMPLES 8.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    vec2 R = iResolution.xy;\n        \n    palette pal = palette_blue();\n    \n    vec3 col = vec3(0);\n\n    for(float i=0.; i < SAMPLES; i++) {\n        vec2 p = 0.5*(2.*fragCoord-R+nextRand2())/R.y ;\n        p.y = -p.y;\n        float orbit = bship(p) / MAX_ITER;\n    \tcol += cmap( orbit   , pal ); \n    }\n    \n    col /= SAMPLES;\n\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}