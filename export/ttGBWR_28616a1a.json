{"ver":"0.1","info":{"id":"ttGBWR","date":"1614252236","viewed":188,"name":"Blotting","username":"bboettcher3","description":"neon blot filter. Click and drag your mouse vertically to change the color and smile type.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["lines","x","smile","neon","blot","blotting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Signed distance to a 2D rounded X shape. It is exact in the\n// exterior, and a bound in the interior.\n\n// List of some other 2D distances:\n//\n// Circle:               https://www.shadertoy.com/view/3ltSW2\n// Segment:              https://www.shadertoy.com/view/3tdSDj\n// Triangle:             https://www.shadertoy.com/view/XsXSz4\n// Isosceles Triangle:   https://www.shadertoy.com/view/MldcD7\n// Regular Triangle:     https://www.shadertoy.com/view/Xl2yDW\n// Regular Pentagon:     https://www.shadertoy.com/view/llVyWW\n// Regular Octogon:      https://www.shadertoy.com/view/llGfDG\n// Rounded Rectangle:    https://www.shadertoy.com/view/4llXD7\n// Rhombus:              https://www.shadertoy.com/view/XdXcRB\n// Trapezoid:            https://www.shadertoy.com/view/MlycD3\n// Polygon:              https://www.shadertoy.com/view/wdBXRW\n// Hexagram:             https://www.shadertoy.com/view/tt23RR\n// Regular Star:         https://www.shadertoy.com/view/3tSGDy\n// Star5:                https://www.shadertoy.com/view/wlcGzB\n// Ellipse 1:            https://www.shadertoy.com/view/4sS3zz\n// Ellipse 2:            https://www.shadertoy.com/view/4lsXDN\n// Quadratic Bezier:     https://www.shadertoy.com/view/MlKcDD\n// Uneven Capsule:       https://www.shadertoy.com/view/4lcBWn\n// Vesica:               https://www.shadertoy.com/view/XtVfRW\n// Cross:                https://www.shadertoy.com/view/XtGfzw\n// Pie:                  https://www.shadertoy.com/view/3l23RK\n// Arc:                  https://www.shadertoy.com/view/wl23RK\n// Horseshoe:            https://www.shadertoy.com/view/WlSGW1\n// Parabola:             https://www.shadertoy.com/view/ws3GD7\n// Parabola Segment:     https://www.shadertoy.com/view/3lSczz\n// Rounded X:            https://www.shadertoy.com/view/3dKSDc\n// Joint:                https://www.shadertoy.com/view/WldGWM\n// Simple Egg:           https://www.shadertoy.com/view/Wdjfz3\n//\n// and many more here:   https://iquilezles.org/articles/distfunctions2d\n\nfloat intensity = 2.;\nfloat ra = 0.04;\nfloat wi = .15;\nvec2 faceCenter = vec2(0.5, .8);\nvec2 eyeOffset = vec2(.15, 0.0);\nvec2 mouthOffset = vec2(0.0, -0.5);\nfloat smileLen = .79; /* Arc len */\nfloat smileWidth = 0.05; /* Width */\nfloat smileRa = .6;\n\nfloat sdRoundedX( in vec2 p, in float w, in float r )\n{\n    p = abs(p);\n    return length(p-min(p.x+p.y,w)*0.5);\n}\n\nfloat sdCircle( in vec2 p, in float r ) \n{\n    return abs(length(p)-r);\n}\n\nfloat udSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 ba = b-a;\n    vec2 pa = p-a;\n    float h =clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length(pa-h*ba);\n}\n\n// scb is the sin/cos of the aperture\nfloat sdArc( in vec2 p, in vec2 scb, in float ra, in float rb )\n{\n    p *= mat2(1.,0.,0.,1.);\n    p.x = abs(p.x);\n    float k = (scb.y*p.x>scb.x*p.y) ? dot(p.xy,scb) : length(p);\n    k *= 2.;\n    return sqrt( dot(p,p) + ra * (ra - k) ) - rb;\n}\n\nfloat sdSmile(in vec2 p, in float radius) {\n    return abs(sdArc(p,vec2(sin(smileLen),cos(smileLen)), radius, smileWidth));\n}\n\nfloat getGlow(float dist, float radius, float intensity){\n    return pow(radius/dist, intensity);\n}\n\n/* Returns rgb vec from input 0-1 */\nvec3 getRainbowColor(in float val) {\n    /*convert to rainbow RGB*/\n    float a = (1.0 - val) * 6.0;\n    int X = int(floor(a));\n    float Y = a - float(X);\n    float r = 0.;\n    float g = 0.;\n    float b = 0.;\n    if (X == 0) {\n        r = 1.; g = Y; b = 0.;\n    } else if (X == 1) {\n        r = 1. - Y; g = 1.; b = 0.;\n    } else if (X == 2) {\n        r = 0.; g = 1.; b = Y;\n    } else if (X == 3) {\n        r = 0.; g = 1. - Y; b = 1.;\n    } else if (X == 4) {\n        r = Y; g = 0.; b = 1.;\n    } else if (X == 5) {\n        r = 1.; g = 0.; b = 1. - Y;\n    } else {\n        r = 0.; g = 0.; b = 0.;\n    }\n    return vec3(r, g, b);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float widthHeightRatio = iResolution.x/iResolution.y;\n    vec2 eye1Center = faceCenter - eyeOffset;\n    vec2 eye2Center = faceCenter + eyeOffset;\n    vec2 mouthCenter = faceCenter + mouthOffset;\n    vec2 eye1Pos = eye1Center - uv;\n    vec2 eye2Pos = eye2Center - uv;\n    vec2 mouthPos = mouthCenter - uv;\n    vec2 smilePos = faceCenter - uv;\n    vec2 linePos1 = vec2(0.1, 0.1);\n    vec2 linePos2 = vec2(0.1, 0.9);\n    eye1Pos.y /= widthHeightRatio;\n    eye2Pos.y /= widthHeightRatio;\n    mouthPos.y /= widthHeightRatio;\n    smilePos.y /= widthHeightRatio;\n    //linePos1.y /= widthHeightRatio;\n    //linePos2.y /= widthHeightRatio;\n\n    float lineDist = udSegment(uv, linePos1, linePos2);\n\tfloat eye1Dist = sdRoundedX( eye1Pos, wi, ra );\n    float eye2Dist = sdRoundedX( eye2Pos, wi, ra );\n    float mouthDist = sdCircle(mouthPos, .1);\n    float smileDist = sdSmile(smilePos, smileRa / widthHeightRatio);\n    float glowLine = getGlow(lineDist, ra, intensity);\n    float glowEye1 = getGlow(eye1Dist, ra, intensity);\n    float glowEye2 = getGlow(eye2Dist, ra, intensity);\n    float glowMouth = getGlow(mouthDist, ra, intensity);\n    float glowSmile = getGlow(smileDist, ra, intensity);\n    \n    vec3 col = vec3(0.0);\n    float timeNorm = mod(iTime, 5.) / 5.;\n    vec3 glowCol = getRainbowColor(timeNorm);\n    col += 10.0*vec3(smoothstep(0.006, 0.003, lineDist));\n    col += glowLine * glowCol;\n    col += 10.0*vec3(smoothstep(0.006, 0.003, eye1Dist));\n    col += glowEye1 * glowCol;\n    col += 10.0*vec3(smoothstep(0.006, 0.003, eye2Dist));\n    col += glowEye2 * glowCol;\n    if (timeNorm > 0.5) {\n      col += 1.0*vec3(smoothstep(0.006, 0.003, mouthDist));\n      col += glowMouth * glowCol;\n    } else {\n      col += 10.0*vec3(smoothstep(0.006, 0.003, smileDist));\n      col += glowSmile * glowCol;\n    }\n    \n    \n    /*Tone mapping*/\n    col = 1.0 - exp(-col);\n    /*Gamma*/\n    col = pow(col, vec3(0.6));\n\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}