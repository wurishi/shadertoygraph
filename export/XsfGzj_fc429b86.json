{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"webcam","id":"4sf3zn","filepath":"/presets/webcam.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"vec2 mirror(vec2 x)\n{\n\treturn abs(fract(x/2.0) - 0.5)*2.0;\t\n}\n\n// There are two versions\n// One adds up the colors from all the iterations, the other uses only the last.\n#if 0\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = -1.0 + 2.0*fragCoord.xy / iResolution.xy;\n\n\tfloat a = iTime*0.2;\n\tvec4 color = vec4(0.0);\n\tfor (float i = 1.0; i < 10.0; i += 1.0) {\n\t\tuv = vec2(sin(a)*uv.y - cos(a)*uv.x, sin(a)*uv.x + cos(a)*uv.y);\n\t\tuv = mirror(uv);\n\t\t\n\t\t// These two lines can be changed for slightly different effects\n\t\t// This is just something simple that looks nice\n\t\ta += i;\n\t\ta /= i;\n\t\tcolor += texture(iChannel0, mirror(uv*2.0)) * 10.0/i;\n\t}\n\t\n\tfragColor = color / 28.289;\n}\n#else\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = -1.0 + 2.0*fragCoord.xy / iResolution.xy;\n\n\tfloat a = iTime*0.2;\n\t\n\tfor (float i = 1.0; i < 10.0; i += 1.0) {\n\t\tuv = vec2(sin(a)*uv.y - cos(a)*uv.x, sin(a)*uv.x + cos(a)*uv.y);\n\t\tuv = mirror(uv);\n\t\t\n\t\t// These two lines can be changed for slightly different effects\n\t\t// This is just something simple that looks nice\n\t\ta += i;\n\t\ta /= i;\n\n\t}\n\t\n\tfragColor = texture(iChannel0, mirror(uv*2.0));\n}\n#endif","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":true,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XsfGzj","date":"1373949109","viewed":2057,"name":"Kaleidoscopic webcam IFS","username":"gleurop","description":"A kaleidoscope effect created by a simple rotate/mirror loop.","likes":29,"published":1,"flags":2,"usePreview":0,"tags":["2d","webcam"],"hasliked":0,"parentid":"","parentname":""}}