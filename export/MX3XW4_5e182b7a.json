{"ver":"0.1","info":{"id":"MX3XW4","date":"1719014688","viewed":69,"name":"Hash White Noise","username":"saxha","description":"White noise using hash functions","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["noise","time","hash","whitenoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 hash13(float p) {\n    vec3 p3 = fract(vec3(p) * 0.1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xxy + p3.yzz) * p3.zyx);\n}\n\nfloat hash21(vec2 p) {\n    p = fract(p * vec2(123.34, 234.56));\n    p += dot(p, p + 34.34);\n    return fract(p.x * p.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    // Motion blur\n    vec2 motionDir = vec2(0.1, 0.05);\n    int samples = 5;\n    float totalWeight = 0.0;\n    vec3 col = vec3(0.0);\n\n    for (int i = 0; i < samples; i++) {\n        float t = float(i) / float(samples - 1);\n        vec2 offset = t * motionDir;\n        vec3 samples = hash13(hash21(uv + mod(iTime / 100., 100.) + offset));\n        float weight = 1.0 - t;\n        col += samples * weight;\n        totalWeight += weight;\n    }\n    \n    col /= totalWeight;\n    \n    // Vignette\n    uv *= 1.0 - uv.yx;\n    float vig = uv.x * uv.y * 15.0;\n    vig = pow(vig, 0.25);\n    \n    col *= vig;\n    col -= 0.4;\n    col *= 4.;\n    \n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}