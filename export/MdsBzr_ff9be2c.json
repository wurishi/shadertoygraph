{"ver":"0.1","info":{"id":"MdsBzr","date":"1494702158","viewed":139,"name":"Newton Fractal ----","username":"DonKarlssonSan","description":"n","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["fractal","newton"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Complex Number math by julesb\n// https://github.com/julesb/glsl-util\n\n#define PI 3.14159265\n\n#define cx_mul(a, b) vec2(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x)\n#define cx_div(a, b) vec2(((a.x*b.x+a.y*b.y)/(b.x*b.x+b.y*b.y)),((a.y*b.x-a.x*b.y)/(b.x*b.x+b.y*b.y)))\n#define cx_modulus(a) length(a)\n#define cx_conj(a) vec2(a.x,-a.y)\n#define cx_arg(a) atan2(a.y,a.x)\n#define cx_sin(a) vec2(sin(a.x) * cosh(a.y), cos(a.x) * sinh(a.y))\n#define cx_cos(a) vec2(cos(a.x) * cosh(a.y), -sin(a.x) * sinh(a.y))\n\nvec2 cx_sqrt(vec2 a) {\n    float r = length(a);\n    float rpart = sqrt(0.5*(r+a.x));\n    float ipart = sqrt(0.5*(r-a.x));\n    if (a.y < 0.0) ipart = -ipart;\n    return vec2(rpart,ipart);\n}\n\nvec2 cx_tan(vec2 a) {return cx_div(cx_sin(a), cx_cos(a)); }\n\nvec2 cx_log(vec2 a) {\n    float rpart = length(a);\n    float ipart = atan(a.y, a.x);\n    if (ipart > PI) ipart=ipart-(2.0*PI);\n    return vec2(log(rpart),ipart);\n}\n\nvec2 cx_mobius(vec2 a) {\n    vec2 c1 = a - vec2(1.0,0.0);\n    vec2 c2 = a + vec2(1.0,0.0);\n    return cx_div(c1, c2);\n}\n\nvec2 cx_z_plus_one_over_z(vec2 a) {\n    return a + cx_div(vec2(1.0,0.0), a);\n}\n\nvec2 cx_z_squared_plus_c(vec2 z, vec2 c) {\n    return cx_mul(z, z) + c;\n}\n\nvec2 cx_sin_of_one_over_z(vec2 z) {\n    return cx_sin(cx_div(vec2(1.0,0.0), z));\n}\n\n\n////////////////////////////////////////////////////////////\n// end Complex Number math by julesb\n////////////////////////////////////////////////////////////\n\n\n// From Stackoveflow\n// http://stackoverflow.com/questions/15095909/from-rgb-to-hsv-in-opengl-glsl\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n// My own additions to complex number math\n#define cx_sub(a, b) vec2(a.x - b.x, a.y - b.y)\n#define cx_add(a, b) vec2(a.x + b.x, a.y + b.y)\n#define cx_abs(a) length(a)\nvec2 cx_to_polar(vec2 a) {\n    float phi = atan(a.y / a.x);\n    float r = length(a);\n    return vec2(r, phi); \n}\n    \n// Complex power\n// Let z = r(cos θ + i sin θ)\n// Then z^n = r^n (cos nθ + i sin nθ)\nvec2 cx_pow(vec2 a, float n) {\n    float angle = atan(a.y, a.x);\n    float r = length(a);\n    float real = pow(r, n) * cos(n*angle);\n    float im = pow(r, n) * sin(n*angle);\n    return vec2(real, im);\n}\n   \nmat2 rotate(float a) {\n\treturn mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\n// End utils, here comes the actual fractal\n\n// z^6 + z^3 - 1 \nvec2 f(vec2 z) {\n    return cx_pow(z, 6.0) + cx_pow(z, 3.0) - 1.0;\n} \n\n// f(z) derivated\n// 6*z^5 + 3*z^2\nvec2 fPrim(vec2 z) {\n    vec2 a = 6.0 * cx_pow(z, 5.0);\n    \n\tvec2 b = 3.0 * cx_pow(z, 2.0);\n    return cx_add(a, b);\n}\n\nconst int maxIterations = 90;\nvec2 one = vec2(1, 0);\nvec3 newtonRapson(vec2 z) {\n  vec2 oldZ = z;\n  float s = 0.0;\n  for(int i = 0; i < maxIterations; i++){\n    z = cx_sub(z, cx_div(f(z), fPrim(z))); \n    if(abs(oldZ.x - z.x) < 0.0001 && abs(oldZ.y - z.y) < 0.0001) {\n      break;\n    }\n    \n    vec2 w = cx_div(one, cx_sub(oldZ, z));\n    float wAbs = cx_abs(w);\n    \n    s += exp(-wAbs);\n    oldZ = z;\n  }\n  return vec3(s, cx_to_polar(z));\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float zoom = (sin(iTime/3.0)*0.5+0.5)*3.0 + 1.0;\n    vec2 centered = (fragCoord - iResolution.xy * 0.5) / iResolution.xy * zoom;\n\tvec2 rotated = centered * rotate(iTime/2.0);\n    vec3 result = newtonRapson(rotated);\n    float c = 1.0-result.x/float(maxIterations)*7.0;    \n    vec3 color = hsv2rgb(vec3(result.z*3.0 + iTime/15.0, 1.0, c));    \n    fragColor = vec4(color, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}