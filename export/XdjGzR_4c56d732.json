{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"cubemap","id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"\n\nvec3 castcube(vec3 pos, vec3 dir)\n{\n\t// clip ray from point against unit cube\n\t// not optimized at all\n\t\n\t\n\tvec3 planepts[6]; // representative points on each plane (side of unit cube)\n\tplanepts[0] =\tvec3(0.0, 1.0, 0.0); // up\n\tplanepts[1] = \tvec3(0.0, -1.0, 0.0); // down\n\tplanepts[2] = \tvec3(-1.0, 0.0, 0.0); // left\n\tplanepts[3] = \tvec3(1.0, 0.0, 0.0); // right\n\tplanepts[4] = \tvec3(0.0, 0.0, -1.0); // near\n\tplanepts[5] = \tvec3(0.0, 0.0, 1.0); // far\n\t\n\tvec3 planenorms[6];\n\tplanenorms[0] =\t\tvec3(0.0, -1.0, 0.0); // up\n\tplanenorms[1] = \tvec3(0.0, 1.0, 0.0); // down\n\tplanenorms[2] = \tvec3(1.0, 0.0, 0.0); // left\n\tplanenorms[3] = \tvec3(-1.0, 0.0, 0.0); // right\n\tplanenorms[4] = \tvec3(0.0, 0.0, 1.0); // near\n\tplanenorms[5] = \tvec3(0.0, 0.0, -1.0); // far\n\t\n\tfloat dist = 10000.0;\n\tfor (int i = 0; i < 5; i++)\n\t{\n\t\t// clip ray against *this* plane\n\t\tfloat thisdist = (dot(-planenorms[i], pos-planepts[i]) / dot(planenorms[i], normalize(dir)));\n\t\tif (thisdist > 0.0 && thisdist < dist) \n\t\t{\n\t\t\tdist = thisdist; // yes this is probably non-uniform control, please fix it for me (max/min don't work thanks to sign\n\t\t\t\t\t\t\t// it seems to work on all platforms i've tried but it's technically undefined\n\t\t}\n\t}\n\t\n\treturn pos + normalize(dir)*dist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec2 mouseuv = iMouse.xy/iResolution.xy;\n\t\n\tvec3 center = vec3(((mouseuv)*2.0) - vec2(1.0, 1.0) , sin(iTime)*0.5); // center of the rather crap sphere/sphereoid we try to render (only sphere if 1:1 aspect ratio)\n\t\n\tvec2 pos = ((uv* 2.0) - vec2(1.0, 1.0)) - vec2(center.x, center.y); // distance from center of crap sphereoid thing\n\t\n\tfloat radius = 0.5/(1.0-center.z);\n\tif (distance(vec2(0.0, 0.0), pos) > radius)\n\t{ // ugh move this to the end of shader eventually but i'm too tired to do it now\n\t\tdiscard;\n\t}\n\t\n\tvec3 spos_rel = vec3(pos.x, pos.y, sqrt(0.5 + radius*radius - ((pos.x*pos.x) + (pos.y*pos.y))));\n\tvec3 spos = spos_rel + center;\n\tvec3 norm = normalize(vec3(spos_rel.x, spos_rel.y, spos_rel.z));\n\t\n\t// generic \"ooh shiny\" cubemap reflection/refraction/whatever goes here\n\tvec3 texraydir = reflect(\n\t\tnormalize(vec3(0.0, 0.0, -1.0) - spos) // eye ray from (0, 0, -1) to the sphere, we exploit the fact that spheroid normal = pos / radius\n\t\t\t\t, norm\n\t\t\t\t);\n\t\n\tvec3 intersect = castcube(spos, texraydir);\n\tintersect = normalize(intersect);\n\tfragColor = texture(iChannel0, intersect);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XdjGzR","date":"1382717520","viewed":211,"name":"translated cubemaps","username":"XMPPwocky","description":"artifact cleanup squad to aisle 3\n\nand this ladies and gents is why you stay away from edges of cubemaps","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["relaxingforestscenewowsuchcalmwowsonature"],"hasliked":0,"parentid":"","parentname":""}}