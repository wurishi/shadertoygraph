{"ver":"0.1","info":{"id":"4sdGRM","date":"1448624601","viewed":152,"name":"Chapter 5 - drawing","username":"hamoid","description":"Learning from the book of shaders","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"#define PI 3.14159265359\n#define MODE6\n\n// Plot a line on Y using a value between 0.0-1.0\nfloat plot(vec2 st, float pct){\n  return smoothstep( pct-0.2, pct, st.y) - \n         smoothstep( pct, pct+0.01, st.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // Interactive mouse x\n    #ifdef MODE0\n    float y = 0.5 + 0.5 * sin(uv.x * 2.0 * PI);\n    y = pow(y, iMouse.x / 50.0);\n    y = step(0.5, y);\n    y = smoothstep(0.45, 0.55, y);\n    #endif\n\n    #ifdef MODE1\n    float y = smoothstep(0.4,0.5,uv.x) - smoothstep(0.5,0.6,uv.x);\n    #endif\n    \n    #ifdef MODE2\n    float y = 0.5 + 0.5*sin(sin(uv.x*PI)*sin(uv.x * uv.x - iTime));\n    #endif\n    \n    #ifdef MODE3\n    float y = fract(3.0 * sin(uv.y + iTime) * 3.0 * sin(uv.x*6.0 - iTime));\n    #endif\n\n    // rombos\n    #ifdef MODE4\n    float y = 0.5 * sin(10.0 * uv.y + iTime) + \n              0.5 * sin(60.0 * uv.x - iTime);\n    //threshold for rombos\n    y = ceil(y) + floor(y);\n    #endif\n\n    // glass courtain\n    #ifdef MODE5\n    float x = uv.x * 8.0;\n    float y = fract(x + iTime) * ceil(x) * 0.3;\n    y = y - 0.1 * floor(x * 0.4 + uv.y) *  abs(uv.y*3.0);\n    y = y * 0.5;\n    #endif\n\n\n\t// crocodile lsd\n    #ifdef MODE6\n\tfloat d = 40.0 * distance(uv, vec2(0.5));\n\tfloat y = 0.5 + \n      0.25 * sin(uv.x * d) + \n      0.25 * sin(uv.y * d);\n    y = mod(y * 5.0 + iTime, 1.0);\n    y = smoothstep(0.1, 0.5, y) - smoothstep(0.5, 0.8, y);\n\t#endif\n    \n    \n    // get angle -PI ~ PI\n    #ifdef MODE7\n    vec2 toCenter = vec2(0.5) - uv;\n    float a = atan(toCenter.y, toCenter.x);\n    float y = 0.5 + 0.5 * a / PI;\n    y = mod(y * 5.0 + iTime * 0.2, 1.0);    \n    vec3 color = vec3(y);    \n    float pct = plot(uv, y);\n    color = (1.0 - pct) * color +\n        pct * vec3(sin(a), \n                   sin(a+1.0),\n                   sin(a+2.0));\n   \t#else\n        vec3 color = vec3(y);    \n\t#endif\n    \n    fragColor = vec4(color, 1.0);\n}","name":"","description":"","type":"image"}]}