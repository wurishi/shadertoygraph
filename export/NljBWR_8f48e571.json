{"ver":"0.1","info":{"id":"NljBWR","date":"1652073793","viewed":167,"name":"Lorenz Equations","username":"TreborHuang","description":"Lorenz equations. Uncomment the commented lines will reveal the original form of the Lorenz attractor. The displayed is a reconstruction of the attractor from just one dimension of data.","likes":8,"published":1,"flags":32,"usePreview":0,"tags":["pde"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SIGMA 10.0\n#define RHO 28.0\n#define BETA 2.6667\n\nconst vec3 CENTER = vec3(0.,0.,RHO - 1.);\n\n#define SAMPLE 6\n#define HISTORY 50\n\n#define hue(v)  ( .6 + .6 * cos( 6.3*(v)  + vec4(0,23,21,0)  ) )\n// Thanks @FabriceNeyret2 for the tips :)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec2 coord = (2. * fragCoord - iResolution.xy) / iResolution.x * 70.;\n    fragColor = vec4(0,0,0,1);\n    \n    float phi = iTime*.7 - sin(iTime*.5);\n    \n    for(int i = 0; i < SAMPLE; i++) {\n    vec4 hue = hue(float(i) / float(SAMPLE));\n    \n    for(int k = 0; k < HISTORY; k ++) {\n        vec3 position = vec3(\n            texelFetch( iChannel0 , ivec2(k,i), 0).y,\n            texelFetch( iChannel0 , ivec2(k+10,i), 0).y,\n            texelFetch( iChannel0 , ivec2(k+20,i), 0).y\n        ) - CENTER.yyy;\n        // Replace with this line to display the Lorenz attractor verbatim.\n        // vec3 position = texelFetch( iChannel0 , ivec2(k,i), 0).xyz - CENTER\n    \n        vec3 F = mat3(\n             cos(phi),   0,  sin(phi),\n                    0,   1,         0,\n            -sin(phi),   0,  cos(phi)\n        ) * position;\n        \n        float dist = length(F.xy - coord);\n\n        fragColor += exp(-4.*abs(dist)) * hue;\n    }\n    }\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define SIGMA 10.0\n#define RHO 28.0\n#define BETA 2.6667\nconst vec3 CENTER = vec3(0.,0.,RHO - 1.);\n\n#define MAXDIST 80.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // SIGMA(y-x), x(RHO-z)-y, xy-BETA z\n    if( iFrame < 2 ) {\n        fragColor = vec4(1. + fragCoord.y / 1000.,1.,1.,1.); return;\n    }\n    if( fragCoord.x < 1. ) {\n        vec4 F = texelFetch( iChannel0 , ivec2(fragCoord), 0);\n        F /= max(length(F)/MAXDIST, 1.);\n        vec4 dF = vec4(\n            SIGMA * (F.y - F.x),\n            F.x*(RHO-F.z)-F.y,\n            F.x*F.y - BETA*F.z,\n            0.\n        );\n        fragColor = F + dF * 0.008;\n    } else {\n        fragColor = texelFetch( iChannel0 , ivec2(fragCoord)-ivec2(1,0), 0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}