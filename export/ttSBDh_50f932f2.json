{"ver":"0.1","info":{"id":"ttSBDh","date":"1598794111","viewed":204,"name":"Minimalism #07","username":"Flopine","description":"Seventh piece of a shader serie about minimalism, how to do small and quick artwork that are about composition and animation.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","triangle","animation","motion","minimalist"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan and slerpy for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n#define PI acos(-1.)\n#define TAU 6.2831853\n\n#define BPM (120./60.)\n#define dt(speed) fract(iTime*speed)\n#define AnimOutExpo(speed) easeOutExpo(dt(speed))\n\n#define AAstep(thre, val) smoothstep(-.7,.7,(val-thre)/min(0.07,fwidth(val-thre)))\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\nfloat easeOutExpo (float x)\n{ \treturn x == 1. ? 1. : 1. - pow(2., -10. * x); }\n\nfloat equitri (vec2 p, float r)\n{\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/sqrt(3.);\n    if (p.x+sqrt(3.)*p.y>0.) p=vec2(p.x-sqrt(3.)*p.y,-sqrt(3.)*p.x-p.y)/2.;\n    p.x -= clamp( p.x, -2.*r, 0. );\n    return -length(p)*sign(p.y);\n}\n\nfloat frame (vec2 uv)\n{\n    uv.y += 0.25;\n    float thin = 0.02;\n    float size = 1.;\n    float mask = 1.;\n    float offsettime = 0.05; \n    for (int i=0; i<6; i++)\n    {\n        uv *= rot(AnimOutExpo(BPM/4.-offsettime-PI)*TAU/3.);\n        mask *= AAstep(thin,abs(equitri(uv,size)));\n        offsettime += 0.05;\n        thin += 0.008;\n        size -= 0.2;\n    } \n    return mask;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.y;\n    uv *= 1.4;\n    vec2 ruv = uv*(1.-AnimOutExpo(BPM/4.+0.05)*0.3);\n    vec2 guv = uv*(1.-AnimOutExpo(BPM/4.+0.1)*0.05);\n    vec2 buv = uv*(1.-AnimOutExpo(BPM/4.+0.15)*0.2);\n    vec3 col = vec3(1.-frame(ruv), 1.-frame(guv),frame(buv)); \n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}