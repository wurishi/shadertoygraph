{"ver":"0.1","info":{"id":"lffcDr","date":"1721006245","viewed":38,"name":"interactive - Grid misal ","username":"mosaic","description":"Interactive version - drag to increase lines\n ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["grid","polygon"],"hasliked":0,"parentid":"MffyDr","parentname":"Grid misaligned, another behind"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nmat2 rot(float angle) {\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat2(c, -s, s, c);\n}\n\nvoid bars(inout vec3 col, vec3 barCol, vec2 uv) {\n    float f = abs(fract(uv.y + 0.5) - 0.5);\n    f = smoothstep(0.06, 0.0, f);\n    \n    col = mix(col, barCol, f);\n}\n\nvec3 hueToRGB(float hue) {\n    // Spaghetti courtesy of my Desmos tomfoolery:\n    // https://www.desmos.com/calculator/gwuinskaqy\n    return clamp(abs(6.*fract(hue - vec3(0., 1., 2.)/3.0)-3.0) - 1.0, 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\nfloat N = 80.*abs(iMouse.x/iResolution.x);\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.xx;\n    uv *= 20.0;\n\n    // Time varying pixel color\n    vec3 col = vec3(0);\n    \n    mat2 R = rot(radians(180.0 / N));\n    \n    for (float i = 0.0; i < N; i+=1.0) {\n        // Fade color to white for higher N to avoid visual overload\n        vec3 barCol = clamp(hueToRGB(i/N) + smoothstep(3., 5., N), 0., 1.);\n        bars(col, barCol, uv);\n        uv *= R;\n    }\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}