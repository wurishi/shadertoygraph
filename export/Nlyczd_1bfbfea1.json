{"ver":"0.1","info":{"id":"Nlyczd","date":"1661982507","viewed":64,"name":"Acanthosphere?maybe","username":"TheoWU","description":"Try fractal in 3D","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["practice"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGzn","filepath":"/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","previewfilepath":"/media/ap/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"# define tpi 3.1415926\n# define pi 3.1415926\n\nmat2 Rotate(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nvec2 N(float angle) {\n    return vec2(sin(angle), cos(angle));\n}\n\nvec2 fractal(vec2 uv) {\n    uv.x = abs(uv.x);\n    \n    vec3 col = vec3(0);\n    float d;\n    \n    float angle = 0.;\n    vec2 n = N((3./4.)*pi);\n    \n    uv.y += tan((3./4.)*pi)*.5;\n   \td = dot(uv-vec2(.5, 0), n);\n    uv -= max(0.,d)*n*2.;\n    \n    float scale = 1.;\n    \n    n = N((3./2.)*pi);\n    uv.x += .5;\n    for(int i=0; i<4; i++) {\n        uv *= 3.;\n        scale *= 3.;\n        uv.x -= 1.5;\n        \n        uv.x = abs(uv.x);\n        uv.x -= .5;\n        d = dot(uv, n);\n        uv -= min(0.,d)*n*2.;\n    }\n    uv /= scale;\n    return uv;\n}\n\n\nfloat GetDist(vec3 p) {\n    \n    p.xz *= Rotate(iTime*.2);\n\n    vec2 xz = fractal(vec2(length(p.xz), p.y));\n    vec2 yz = fractal(vec2(length(p.yz), p.x));\n    vec2 xy = fractal(vec2(length(p.xy), p.z));\n    float d = max(xy.x, max(yz.x, xz.x));\n    \n    d = mix(d, length(p)-.5, .5);\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat d=0.;\n    \n    for(int i=0; i<100; i++) {\n    \tvec3 p = ro + rd*d;\n        float ds = GetDist(p);\n        d += ds;\n        if(d>100.0 || abs(ds)<0.001) break;\n    }\n    \n    return d;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 mouse = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(0, 10, -3);\n    ro.yz *= Rotate(-mouse.y*pi+1.);\n    ro.xz *= Rotate(-mouse.x*tpi);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0,0),3.);\n    vec3 col = vec3(0);\n   \n    float d = RayMarch(ro, rd);\n\n    if(d<100.0) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n\n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        col = vec3(dif);\n        \n        //col = n*.5+.5; //normal\n        col *= texture(iChannel0, r).rgb; //envmap\n        //col *= texture(iChannel0, uv+mouse).rgb; //texture\n    }\n\n    col = pow(col, vec3(.4545));\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}