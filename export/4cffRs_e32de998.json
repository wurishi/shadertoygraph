{"ver":"0.1","info":{"id":"4cffRs","date":"1724165049","viewed":27,"name":"WaterFlow","username":"armin","description":"The water Flow Shader is a dynamic and visually captivating shader designed to simulate the appearance of water in motion.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["water","flow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// --- Water Flow Shader ---\n\n// Simple noise function\nfloat noise(vec2 p) {\n    return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n// Smooth noise function for more natural patterns\nfloat smoothNoise(vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    return mix(mix(noise(i + vec2(0.0, 0.0)), noise(i + vec2(1.0, 0.0)), u.x),\n               mix(noise(i + vec2(0.0, 1.0)), noise(i + vec2(1.0, 1.0)), u.x), u.y);\n}\n\n// Function for fractional Brownian motion (fbm)\nfloat fbm(vec2 p) {\n    float value = 0.0;\n    float amplitude = 0.5;\n    float frequency = 1.0;\n\n    for (int i = 0; i < 5; i++) {\n        value += amplitude * smoothNoise(p * frequency);\n        frequency *= 2.0;\n        amplitude *= 0.5;\n    }\n\n    return value;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 R = iResolution.xy; // Screen resolution\n    vec2 uv = fragCoord / R; // Normalized coordinates\n\n    // Time component to animate the flow\n    float time = iTime * 0.3;\n\n    // Flow direction and speed for the water effect\n    vec2 flowDirection = vec2(1.0, 0.5);\n    vec2 displacedUV = uv + flowDirection * time * 0.2;\n\n    // Apply fbm noise to simulate water surface ripples\n    float waterRipples = fbm(displacedUV * 6.0);\n\n    // Additional displacement to enhance the flowing effect\n    displacedUV += vec2(waterRipples * 0.1, waterRipples * 0.05);\n\n    // Final water surface pattern\n    float waterPattern = fbm(displacedUV * 6.0 + time);\n\n    // Base water color (blue tones)\n    vec3 waterColor = vec3(0.1, 0.3, 0.7) + vec3(0.1, 0.2, 0.3) * waterPattern;\n\n    // Light reflection effect\n    float lightReflection = smoothstep(0.4, 0.8, waterPattern);\n    vec3 reflectionColor = vec3(0.8, 0.9, 1.0) * lightReflection;\n\n    // Final color combining the water color and light reflection\n    vec3 finalColor = mix(waterColor, reflectionColor, 0.5);\n\n    // Output the final color\n    fragColor = vec4(finalColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}