{"ver":"0.1","info":{"id":"wsGfDK","date":"1607979813","viewed":111,"name":"RayMarchSpheresDonald","username":"Donald","description":"Spheres","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["ray"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*float sdf(in vec3 pos){\npos.y=fract(pos.y);\npos-=.5;\npos*=pos;\n\nreturn sqrt(pos.x+pos.y+pos.z)-0.5;\n\n}*/\n\nvec4 dmin(in vec4 i1, in vec4 i2){\n    if (i1.w>i2.w){\n        return i2;\n    }\n    return i1;\n}\n\n//vec4 sphereSheet(in vec3 pos, float ii){\nvec4 sdmin(in vec4 i1, in vec4 i2,float sm){\n//float t=smoothstep(0.,1.,(i2.w-i1.w)/sm+.5);\n    float t=clamp((i2.w-i1.w)/sm+.5,0.,1.);\n    return i1*t+i2*(1.-t);\n}\n\nvec2 f(in float v,float sm){// df,f\n    float g=abs(v);\n    if (g>=sm){\n        return vec2(sign(v),g);\n    }\n    else{\n        return vec2(v/sm,.5*v*v/sm+sm*.5);\n    }\n}\n\nfloat square(in float a){return a*a;}\nvec4 sdmin2(in vec4 i1, in vec4 i2,float sm){\n//float d=clamp(i2.w-i1.w,-sm,sm);\n//float t=(d-sm)*(d+sm);\n//float t2=square(t);\nvec4 u=i1+i2;\nvec4 v=i1-i2;\nvec2 k=f(v.w,sm);\nu.xyz-=k.x*v.xyz;\nu.w-=k.y;\nreturn u*.5;\n\n\n}\nvec4 sphere(vec3 pos,float s){\nfloat d=length(pos);\nreturn vec4(pos/d,d-s);\n}\n\n/*\nvec4 sphereSheet(in vec3 pos, float ii){\n\npos.x+=sin(ii*7.77);\npos.y+=cos(ii*3.45);\npos.xy=fract(pos.xy);\npos.z-=ii;\npos-=.5;\nfloat d=length(pos);\nreturn vec4(pos/d,d-0.2);\n}*/\n\n\n\nvec4 sdf(in vec3 pos,int i){\nfloat sct=0.75;\nfloat t=1.5;\nvec4 s=sphere(pos,t*sct);\nvec3 dir=vec3(1.,0.,0.1);\nfor (int j=0;j<i;j++){\n    vec3 pos2=dir*(t*sign(dot(dir,pos)));\n    dir=vec3(dir.y,dir.x*0.6+dir.z*0.8,dir.x*0.8-dir.z*0.6);\n    //dir=dir.yzx;\n    t*=.7;\n    pos=(pos-pos2);\n    //pos=pos.yzx;\n    s= sdmin2(sphere(pos,t*sct),s,t*0.5);\n\n\n}\n\n\nreturn s;\n\n\n}\n//return sdmin2(sphere(pos-vec3(0.,0.,0.),1.),sphere(pos-vec3(0.6,0.8,0.),.1),.08);\n//}\n/*vec4 sdf(in vec3 pos){\nfloat ii=floor(pos.z+.5);\nif (ii<=0.){return sphereSheet(pos,0.);}\nelse{return dmin(sphereSheet(pos,ii),sphereSheet(pos,ii-1.));}\n/*pos.x+=sin(ii*7.77);\npos.y+=cos(ii*3.45);\npos.xy=fract(pos.xy);\nif (pos.z>0.){pos.z=fract(pos.z);}\npos-=.5;\n\nfloat d=length(pos);\nreturn vec4(pos/d,d-0.4);*/\n\n//}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.x;\n    vec4 mxy=(iMouse-.5*iResolution.xyxy)/iResolution.x*5.;\n    vec2 sm=sin(mxy.xy);\n    vec2 cm=cos(mxy.xy);\n    vec3 light1=vec3(0.9,0.4,-0.6);\n    light1/=length(light1);\n    vec3 light2=vec3(0.3,-0.4,0.6);\n    light2/=length(light2);\n    vec3 pos=vec3(sm.x*cm.y,cm.x*cm.y,sm.y);\n    vec3 mu1=vec3(sm.x*sm.y,cm.x*sm.y,-cm.y);\n    vec3 mu2=cross(pos,mu1);\n    vec3 dir=uv.x*mu1+uv.y*mu2-pos;\n    pos*=10.;\n    dir/=length(dir);\n    vec4 r;\n    vec3 col=vec3(0.,0.,0.);\n    for (int i=0; i<300;i++){\n        \n        r=sdf(pos,12);\n        \n        if (r.w<0.0001){\n        col=vec3(0.1)+vec3(0.9,0.8,0.7)*max(0.,dot(r.xyz,light1))+vec3(1.,1.,0.9)*pow(max(0.,dot(r.xyz,light1)),20.)+vec3(0.5,1.,0.9)*max(0.,dot(r.xyz,light2));\n        \n        break;}\n        pos+=dir*r.w;\n        if (length(pos)>10000.){break;}\n    }\n    \n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);//r.www*.5+.5\n}","name":"Image","description":"","type":"image"}]}