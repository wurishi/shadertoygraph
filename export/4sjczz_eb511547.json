{"ver":"0.1","info":{"id":"4sjczz","date":"1490677806","viewed":914,"name":"Heat Blur","username":"SalikSyed","description":"Light bends towards where it can travel fastest in a non-homogenous medium (Eikonal Equation). This shader uses 3 layers of noise to simulate heat then offsets the texture coordinate. smoke from: https://www.shadertoy.com/view/MdyGzR by ehji","likes":27,"published":1,"flags":32,"usePreview":0,"tags":["blur"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NUM_SAMPLES 8\n#define NUM_RADIUS_SAMPLES 8\n#define MAX_GRAD 0.01\n\n// Finds the shortest path through the heat\nvec2 compute_gradient(vec2 uv, sampler2D b) {\n    vec2 gradient = vec2(0., 0.);\n\tfloat magnitude = -1.0;\n    for(int i = 0; i <= NUM_SAMPLES; i++) {\n        float t = (float(i)/float(NUM_SAMPLES)) * 6.28;\n        for(int j = 0; j < NUM_RADIUS_SAMPLES; j++) {\n            float r = float(j)/float(NUM_RADIUS_SAMPLES) * MAX_GRAD;\n            vec2 a = r * vec2(cos(t), sin(t));\n\t\t\tfloat l = length(texture(b, uv+a).rgb);\n            if (magnitude < 0. || l < magnitude) {\n             \tmagnitude = l;\n                gradient = a;\n            }\n        }\n    }\n    return gradient;\n}\n\nvec3 compute_final_color(vec2 uv) {\n    vec2 g = uv;\n    // the total offset through 3 layers of heat\n    g += 0.4*compute_gradient(g, iChannel0);\n    g += 0.4*compute_gradient(g, iChannel2);\n    g += 0.8*compute_gradient(g, iChannel3);\n    return texture(iChannel1, g).rgb;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n\tvec3 clouds = texture(iChannel0, uv).rgb;\n    fragColor = vec4(compute_final_color(uv) + 0.1*clouds, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  { \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\nfloat normnoise(float noise) {\n    return 0.5*(noise+1.0);\n}\n\n\nfloat clouds(vec2 uv) {\n    uv += vec2(iTime*0.05, + iTime*0.01);\n    \n    vec2 off1 = vec2(50.0,33.0);\n    vec2 off2 = vec2(0.0, 0.0);\n    vec2 off3 = vec2(-300.0, 50.0);\n    vec2 off4 = vec2(-100.0, 200.0);\n    vec2 off5 = vec2(400.0, -200.0);\n    vec2 off6 = vec2(100.0, -1000.0);\n      float scale1 = 3.0;\n    float scale2 = 6.0;\n    float scale3 = 12.0;\n    float scale4 = 24.0;\n    float scale5 = 48.0;\n    float scale6 = 96.0;\n    return normnoise(snoise(vec3((uv+off1)*scale1,iTime*0.5))*0.8 + \n                     snoise(vec3((uv+off2)*scale2,iTime*0.4))*0.4 +\n                     snoise(vec3((uv+off3)*scale3,iTime*0.1))*0.2 +\n                     snoise(vec3((uv+off4)*scale4,iTime*0.7))*0.1 +\n                     snoise(vec3((uv+off5)*scale5,iTime*0.2))*0.05 +\n                     snoise(vec3((uv+off6)*scale6,iTime*0.3))*0.025);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv.y *= iResolution.y/iResolution.x;\n    fragColor =  vec4(vec3(clouds(uv)), 1.);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\n\nfloat computeIllumination(vec2 start, float len, vec2 uv) {\n    vec2 p0 = vec2(start.x, start.y);\n    vec2 p1 = vec2(start.x + len, start.y);\n\t// compute illumination based on equation:\n\treturn log(p1.x-uv.x + length(uv - p1)) - log(p0.x-uv.x + length(uv-p0));\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // testing out \n    // contribution to O=(0,0) of 1 edge, \n    // assumed horizontal from P0=(x0,y) to P1=(x1,y): ln(x1 + ||OP1||) - ln(x0+||OP0||)\n\t\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n   \t\n    \n    float illumination = 0.0;\n    vec2 start = vec2(0.2, 0.5);\n    illumination += 0.5*(0.5*sin(iTime)+1.0) * computeIllumination(start, 0.4, uv);\n\tfragColor = vec4(vec3(sqrt(0.3*illumination)), 1.);\n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XdfGR8","channel":0}],"code":"\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  { \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\nfloat normnoise(float noise) {\n    return 0.5*(noise+1.0);\n}\n\n\nfloat clouds(vec2 uv) {\n    uv += vec2(iTime*0.05, + iTime*0.01);\n    \n    vec2 off1 = vec2(50.0,33.0);\n    vec2 off2 = vec2(0.0, 0.0);\n    vec2 off3 = vec2(-300.0, 50.0);\n    vec2 off4 = vec2(-100.0, 200.0);\n    vec2 off5 = vec2(200.0, -400.0);\n    vec2 off6 = vec2(300.0, -8000.0);\n      float scale1 = 3.0;\n    float scale2 = 6.0;\n    float scale3 = 12.0;\n    float scale4 = 24.0;\n    float scale5 = 48.0;\n    float scale6 = 96.0;\n    return normnoise(snoise(vec3((uv+off1)*scale1,iTime*0.5))*0.8 + \n                     snoise(vec3((uv+off2)*scale2,iTime*0.4))*0.4 +\n                     snoise(vec3((uv+off3)*scale3,iTime*0.1))*0.2 +\n                     snoise(vec3((uv+off4)*scale4,iTime*0.7))*0.1 +\n                     snoise(vec3((uv+off5)*scale5,iTime*0.2))*0.05 +\n                     snoise(vec3((uv+off6)*scale6,iTime*0.3))*0.025);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv.y *= iResolution.y/iResolution.x;\n    fragColor =  vec4(vec3(clouds(uv)), 1.);\n}","name":"Buf D","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"4sXGR8","channel":0}],"code":"\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  { \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\nfloat normnoise(float noise) {\n    return 0.5*(noise+1.0);\n}\n\n\nfloat clouds(vec2 uv) {\n    uv += vec2(iTime*0.05, + iTime*0.01);\n    \n    vec2 off1 = vec2(50.0,33.0);\n    vec2 off2 = vec2(0.0, 0.0);\n    vec2 off3 = vec2(-300.0, 50.0);\n    vec2 off4 = vec2(-100.0, 200.0);\n    vec2 off5 = vec2(500.0, -100.0);\n    vec2 off6 = vec2(200.0, -2000.0);\n      float scale1 = 3.0;\n    float scale2 = 6.0;\n    float scale3 = 12.0;\n    float scale4 = 24.0;\n    float scale5 = 48.0;\n    float scale6 = 96.0;\n    return normnoise(snoise(vec3((uv+off1)*scale1,iTime*0.5))*0.8 + \n                     snoise(vec3((uv+off2)*scale2,iTime*0.4))*0.4 +\n                     snoise(vec3((uv+off3)*scale3,iTime*0.1))*0.2 +\n                     snoise(vec3((uv+off4)*scale4,iTime*0.7))*0.1 +\n                     snoise(vec3((uv+off5)*scale5,iTime*0.2))*0.05 +\n                     snoise(vec3((uv+off6)*scale6,iTime*0.3))*0.025);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv.y *= iResolution.y/iResolution.x;\n    fragColor =  vec4(vec3(clouds(uv)), 1.);\n}","name":"Buf C","description":"","type":"buffer"}]}