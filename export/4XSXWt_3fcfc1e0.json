{"ver":"0.1","info":{"id":"4XSXWt","date":"1711247455","viewed":42,"name":"triangle_random_vertex","username":"yufengjie","description":"ddd","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["triangle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float fftsize = 512.;\n\nvec3 palette(float t) {\n  vec3 a = vec3(0.613, 0.232, 0.012);\n  vec3 b = vec3(0.780, 0.265, 0.388);\n  vec3 c = vec3(0.066, 1.535, 0.275);\n  vec3 d = vec3(2.145, 3.592, 1.964);\n  return a + b * cos(6.28318 * (c * t + d));\n}\nfloat rand(float x) {\n  return fract(sin(dot(x, (12.9898,78.233)))* 43758.5453123);\n // return fract((sin(x)) * 0.5 + 0.5);\n}\n\n\nfloat noise(float x) {\n  float i = floor(x);\n  float f = fract(x);\n  return mix(rand(i), rand(i+1.), smoothstep(0.,1.,f));\n}\nfloat getWave(float i){\n    return texture(iChannel0, vec2(i / fftsize, 0.)).x;\n}\n\nfloat getPoint(float i){\n    return noise(i+iTime) * 2. - 1.;\n    //return getWave(i) * 2. - 1.;\n}\n// p 屏幕坐标 abc三角形顶点坐标\nfloat getTriangle(vec2 p,vec2 a,vec2 b, vec2 c) {\n    // 按照顺时针/逆时针定义向量方向\n    vec2 ab = b-a;\n    vec2 bc = c-b;\n    vec2 ca = a-c;\n    \n    // 法向量\n    vec2 abf = vec2(ab.y,-ab.x);\n    vec2 bcf = vec2(bc.y,-bc.x);\n    vec2 caf = vec2(ca.y,-ca.x);\n    \n    // 从顶点到屏幕坐标的向量\n    vec2 ap = p-a;\n    vec2 bp = p-b;\n    vec2 cp = p-c;\n    \n    // 点乘用来判断p点是否在三角形中\n    float va = dot(abf, ap);\n    float vb = dot(bcf, bp);\n    float vc = dot(caf, cp);\n    \n    float triangle = 0.;\n    \n    // 全都整数/负数代表着p点是否在三角形之内\n    if(va>0.&&vb>0.&&vc>0.) {\n        triangle = 1.;\n    }\n    \n    if(va<0.&&vb<0.&&vc<0.) {\n        triangle = 1.;\n    }\n    \n    return triangle;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy)/iResolution.y;\n    vec3 fin_col = vec3(0.);\n    float t = sin(iTime);\n    for(float i=0.;i<30.;i+=1.){\n        float a1 = getPoint(i*6. + 1.+ t);\n        float a2 = getPoint(i*6. + 2.+ t);\n        float b1 = getPoint(i*6. + 3.+ t);\n        float b2 = getPoint(i*6. + 4.+ t);\n        float c1 = getPoint(i*6. + 5.+ t);\n        float c2 = getPoint(i*6. + 6.+ t);\n\n        float triangle = getTriangle(uv, vec2(a1, a2), vec2(b1, b2), vec2(c1, c2));\n        vec3 color = palette(a1);\n        fin_col += triangle * color;\n    }\n\n    fragColor = vec4(fin_col,1.0);\n\n}","name":"Image","description":"","type":"image"}]}