{"ver":"0.1","info":{"id":"lfBGRD","date":"1703880071","viewed":125,"name":"Generation CCA","username":"antonOTI","description":"I finally found one of the rule set that mesmerized me when I was younger and playing with Golly, the Cellular Automata Software (I was a fun kid)\n\nThis is Star Wars by Mirek Wojtowicz. 345/2/4\nI found it here : https://golly.sourceforge.io/\n","likes":9,"published":3,"flags":32,"usePreview":0,"tags":["gameoflife","multipass"],"hasliked":0,"parentid":"McBGRh","parentname":"Fork conway representation"},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//source: https://iquilezles.org/articles/palettes/\n// cosine based palette, 4 vec3 params\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n#define COLOR_PALETTE vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,0.5),vec3(0.8,0.90,0.30)\n\n// main\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float value = texture(iChannel0, uv).r;\n    value = value / lifeSpan;\n    value = 1. - (value * .66 + .33);\n\tfragColor.rgb = palette(value, COLOR_PALETTE);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define lookup(pos) texture(iChannel0,mod(pos,iResolution.xy)).x\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 invResolution = 1. / iResolution.xy;\n    vec2 uv = fragCoord.xy * invResolution;\n    \n    ;\n    float birthingValue = lifeSpan - 1.;\n    \n    float e = 0.;\n    for (float x = -1.; x <= 1.; ++x)\n    {\n        for (float y = -1.; y <= 1.; ++y)\n        {\n            if (x == 0. && y == 0.)\n            {\n                continue;\n            }\n            \n            float value = lookup(uv + vec2(x, y) * invResolution);\n\n            if (value == birthingValue)\n            {\n                e++;\n            }\n        }\n    }\n    \n    fragColor = texture(iChannel0,uv);\n    float prevState = fragColor.x;\n    if( prevState < 1. )\n        for (int index = 0; index < birthValues.length(); ++index)\n        {\n            if(e == birthValues[index])\n            {\n                fragColor.r = birthingValue;\n                break;\n            }\n        }\n    else\n    {\n        if (prevState == birthingValue)\n        {\n            fragColor.r = prevState - 1.;\n            for (int index = 0; index < surviveValues.length(); ++index)\n            {\n                if(e == surviveValues[index])\n                {\n                    fragColor.r = birthingValue;\n                    break;\n                }\n            }\n        }\n        else\n        {\n            fragColor.r = prevState - 1.;\n        }\n    }\n    \n    if(iMouse.z > .5)\n    {\n    \tfragColor.r = max(fragColor.r, step(length(iMouse.xy - fragCoord), 5.) * birthingValue);\n    }\n    else if (iFrame < 10)\n    {\n        fragColor = vec4(0.);\n        vec2 hr = iResolution.xy / 2.;\n        if (fragCoord.x > hr.x && fragCoord.x < hr.x + 2. && fragCoord.y > hr.y && fragCoord.y < hr.y + 2.)\n        {\n            fragColor.r = birthingValue;\n        }\n    }\n        \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 invResolution = 1. / iResolution.xy;\n    \n    fragColor = vec4(0.);\n    \n    float kernelSize = 3.;\n    for (float x = -kernelSize; x <= kernelSize; ++x)\n    {\n        for (float y = -kernelSize; y <= kernelSize; ++y)\n        {\n            fragColor += texture(iChannel1, uv + vec2(x, y) * invResolution);\n        }\n    }\n    \n    float side = kernelSize * 2. + 1.;\n    fragColor /= (side * side);\n    fragColor *= .9;\n    \n\tfragColor = max(fragColor, texture(iChannel0,uv));\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\nfloat[] surviveValues = float[](3.,4.,5.);\nfloat[] birthValues = float[](2.);\nfloat lifeSpan = 4.;","name":"Common","description":"","type":"common"}]}