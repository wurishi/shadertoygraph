{"ver":"0.1","info":{"id":"wstXR7","date":"1571714055","viewed":280,"name":"ant colony","username":"matthen","description":"ant colony","likes":9,"published":1,"flags":32,"usePreview":0,"tags":["ants","cellularautomaton"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float getCell(in ivec2 p) {\n    p = p % ivec2(iResolution.xy);\n    return texelFetch(iChannel0, p, 0).x;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(vec3(getCell(ivec2(fragCoord))), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"int getCell(in ivec2 p) {\n    p = p % ivec2(iResolution.xy);\n    return int(step(0.5, texelFetch(iChannel0, p, 0).x));\n}\n\nfloat hash(in float x) {\n\treturn fract(sin(0.222 * x + 77.2) * 72.2 + 231.2);\n}\n\nint getNext(in ivec2 p) {\n    \n    int frame = iFrame;\n    ivec2 pp = (p + ivec2(frame % 2, frame / 2)) % 2;\n    ivec2 notpp = 1 - pp;\n    \n    ivec4 o = ivec4(-pp.x, 1 - pp.x, -pp.y, 1 - pp.y);\n    \n    \n    int topLeft = getCell(p + o.xz); \n    int topRight = getCell(p + o.yz); \n    int bottomLeft = getCell(p + o.xw); \n    int bottomRight = getCell(p + o.yw); \n    \n    int next = topLeft + 2 * topRight + 4 * bottomLeft + 8 * bottomRight;\n    \n    float id = float(p.x + o.x) + 1027.8 * float(p.y + o.z);\n    \n    int shift = int(4. * hash(id));\n    next = next << shift | (next >> (4 - shift));\n    \n    \n    \n    return (next >> (pp.x + 2 * pp.y)) % 2;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n   \tfloat val;\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n    \n    \n    \n    ivec2 p = ivec2(fragCoord);\n    val = float(getNext(p));\n    \n    if (iFrame == 0) {\n        val += step(0.1, max(abs(uv.x), abs(uv.y)));\n        \n        val -= step(0.2, max(abs(uv.x), abs(uv.y)));\n    }\n    \n    \n    fragColor = vec4(val, 0., 0., 0.);\n}","name":"Buffer A","description":"","type":"buffer"}]}