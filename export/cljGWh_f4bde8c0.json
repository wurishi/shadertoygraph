{"ver":"0.1","info":{"id":"cljGWh","date":"1673231459","viewed":76,"name":"T-square  anim","username":"trasnodalua","description":"Simple T-square fractal","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"Xl3czs","parentname":"T-square "},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//saturate from hlsl\nfloat saturate(float a)\n{\nreturn clamp(a,0.0,1.0);\n}\n\n\nvoid mainImage( out vec4 ts, in vec2 fragCoord )\n{\n//vec2 uv = (fragCoord/iResolution.xy)*vec2(1.777,1.0)- vec2(0.3885,0.0);\nvec2 uv = (fragCoord/iResolution.xy);\nfloat TSF = 0.0;\n\n\nfloat levels =6.0; //define LEVELS\nfloat iterations = 2.0;//define ITERATIONS\n//int t = int(fract(iTime*0.2)*iterations)+1;\n\nfloat time = 1.0; //define TIME\nfloat animTimming= 2.0;// min 1.3, default 2.0\nfloat center = abs(sin(iTime*time)*animTimming); //define fractal center position (2.0 for centered)\nfloat kaleidoscopic = 1.0; //define pattern times repetition. Default 1.0\n\nint t1 = int(abs(cos(iTime*time))*levels)+1;//use 'cos' or 'sin' for different animation\nint t2 = int(abs(sin(iTime*time))*levels)+1;//use 'cos' or 'sin' for different animation\n\nfor(int i=0;i < t1; i++)\n{\nif(i==0)\n{\nTSF = round(min(min(fract(uv).x,1.0-fract(uv).x),min(fract(uv).y,1.0-fract(uv).y))*center/kaleidoscopic);\n}\nelse\n{\nTSF += round(min(min(fract(uv*iterations).x,1.0-fract(uv*iterations).x),min(fract(uv*iterations).y,1.0-fract(uv*iterations).y))*center );\niterations *=2.0;\n}\n} \n\n//TSF = saturate(TSF);\n    vec2 color = uv;\n    // Output to screen\n  \n    ts = vec4(TSF,TSF,TSF,1.0);\n}","name":"Image","description":"","type":"image"}]}