{"ver":"0.1","info":{"id":"XtffDs","date":"1513855198","viewed":243,"name":"Another Forest Fire","username":"Ultraviolet","description":"Originally inspired by [url]http://ncase.me/simulating/[/url].\nUse the mouse and hold:\n - [b]SPACE[/b] for removing tree\n - [b]T[/b] for adding trees\n - [b]F[/b] for starting fires","likes":8,"published":1,"flags":48,"usePreview":0,"tags":["fire","forest","automata","cellular","dynamic","system"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define THIRD 0.33333333333\n\n\nvec3 fireColor(float temp)\n{\n    //return vec3(1./1. ,  1./4. , 1./16.)* exp(4.*(temp*1.2-0.5) - 0.8);\n    return vec3(1./1. ,  1./4. , 1./16.)* exp(4.*(temp*1.) - 0.8) - exp(-.8);\n}\n\nvec3 treeColor(float time)\n{\n    return vec3(0., time, 0.);\n}\n\nvec3 colorFromState(vec4 state)\n{\n    vec3 baseCol = vec3(0.);\n    vec3 treeCol = treeColor(state.y);\n    vec3 fireCol = fireColor(state.y);\n    \n    //return vec3(state.y*(1.-step(state.x, 2.*THIRD)),state.y*(1.-step(state.x, THIRD))*step(state.x, 2.*THIRD),0.);\n    return fireCol*(1.-step(state.x, 2.*THIRD)) + treeCol*(1.-step(state.x, THIRD))*step(state.x, 2.*THIRD);\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec4 state  = texture(iChannel0, (fragCoord+vec2(0.5))/iResolution.xy);\n    fragColor = vec4(colorFromState(state), 1.);\n    \n    return;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n\n\n//noise from https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat noise12(vec2 p)\n{\n\tfloat a = 0.0, b = a;\n    for (int t = 0; t < ITERATIONS; t++)\n    {\n        float v = float(t+1)*.152;\n        vec2 pos = (p * v + iTime * 1500. + 50.0);\n        a += hash12(pos);\n    }\n    return a / float(ITERATIONS);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(iFrame == 0)\n    {\n    \tfragColor = vec4(noise12(fragCoord)< 0.3?.5*THIRD:1.5*THIRD,noise12(fragCoord + vec2(1321.21,2135.469)),noise12(fragCoord + 2.*vec2(1321.21,2135.469)),0.0);\n\n        if(length(fragCoord - iResolution.xy*.5) < 5. )\n            fragColor = vec4(2.5*THIRD, 1., 0., 0.);\n        \n        return;\n    }\n    \n    vec4 state  = texture(iChannel0, fragCoord/iResolution.xy);\n    \n    if(texelFetch(iChannel1, ivec2(32, 0), 0).x > 0.5 && iMouse.z > 0.5 && length(iMouse.xy-fragCoord) < 5.)\n    {\n    \tfragColor = vec4(THIRD*.5, 0., 0., .0);\n        return;\n    }\n    \n    \n    \n    if(state.x < THIRD)\t\t\t\t// EMPTY SPACE\n    {\n        // SPONTANEOUS SPROUTS\n        if(noise12(fragCoord) < SPONTANEOUS_SPROUT)\n        {\n            state.x = 1.5*THIRD;\n            state.y = 0.;\n            state.z = .2+.8*noise12(fragCoord+vec2(1321.21,2135.469));\n            \n        }\n        \n        /*\n        vec4 stateN = texture(iChannel0, (fragCoord+vec2(0.0, 1.0))/iResolution.xy);\n        vec4 stateS = texture(iChannel0, (fragCoord-vec2(0.0, 1.0))/iResolution.xy);\n        vec4 stateE = texture(iChannel0, (fragCoord+vec2(1.0, 0.0))/iResolution.xy);\n        vec4 stateW = texture(iChannel0, (fragCoord-vec2(1.0, 0.0))/iResolution.xy);\n         \n        /*/\n        vec4 stateN = texelFetch(iChannel0, (ivec2(fragCoord)+ivec2(0, 1)) % ivec2(iResolution.xy), 0);\n        vec4 stateS = texelFetch(iChannel0, (ivec2(fragCoord)-ivec2(0, 1)) % ivec2(iResolution.xy), 0);\n        vec4 stateE = texelFetch(iChannel0, (ivec2(fragCoord)+ivec2(1, 0)) % ivec2(iResolution.xy), 0);\n        vec4 stateW = texelFetch(iChannel0, (ivec2(fragCoord)-ivec2(1, 0)) % ivec2(iResolution.xy), 0);\n\t\t//*/\n        \n        // TRANSMISSION SPROUTS\n        if (stateN.x>THIRD && stateN.x<2.*THIRD && stateN.y>.5\n         || stateS.x>THIRD && stateS.x<2.*THIRD && stateS.y>.5\n         || stateE.x>THIRD && stateE.x<2.*THIRD && stateE.y>.5\n         || stateW.x>THIRD && stateW.x<2.*THIRD && stateW.y>.5f\n         || noise12(fragCoord) < SPONTANEOUS_SPROUT\n         || iMouse.z > 0.5 && length(iMouse.xy-fragCoord) < 5. && texelFetch(iChannel1, ivec2(84, 0), 0).x > 0.5)\n        {\n            if(noise12(fragCoord) < SPROUT_TRANSMISSION)\n            {\n                state.x = 1.5*THIRD;\n                state.y = 0.;\n                state.z = .2+.8*noise12(fragCoord+vec2(1321.21,2135.469));\n                \n            }\n        }\n    }\n    \n    else if(state.x < 2.*THIRD)\t\t// TREE\n    {\n        // GROWTH\n        state.y += 0.1;\n        state.y = clamp(state.y, 0., state.z);\n        \n        /*\n        vec4 stateN = texture(iChannel0, (fragCoord+vec2(0.0, 1.0))/iResolution.xy);\n        vec4 stateS = texture(iChannel0, (fragCoord-vec2(0.0, 1.0))/iResolution.xy);\n        vec4 stateE = texture(iChannel0, (fragCoord+vec2(1.0, 0.0))/iResolution.xy);\n        vec4 stateW = texture(iChannel0, (fragCoord-vec2(1.0, 0.0))/iResolution.xy);\n        \n        /*/\n        vec4 stateN = texelFetch(iChannel0, (ivec2(fragCoord)+ivec2(0, 1)) % ivec2(iResolution.xy), 0);\n        vec4 stateS = texelFetch(iChannel0, (ivec2(fragCoord)-ivec2(0, 1)) % ivec2(iResolution.xy), 0);\n        vec4 stateE = texelFetch(iChannel0, (ivec2(fragCoord)+ivec2(1, 0)) % ivec2(iResolution.xy), 0);\n        vec4 stateW = texelFetch(iChannel0, (ivec2(fragCoord)-ivec2(1, 0)) % ivec2(iResolution.xy), 0);\n\t\t//*/\n        \n        // FIRE TRANSMISSION AND TRIGGERING\n        if (stateN.x>2.*THIRD \n         || stateS.x>2.*THIRD \n         || stateE.x>2.*THIRD \n         || stateW.x>2.*THIRD  \n         || noise12(fragCoord) < SPONTANEOUS_FIRE\n         || iMouse.z > 0.5 && length(iMouse.xy-fragCoord) < 5. && texelFetch(iChannel1, ivec2(70, 0), 0).x > 0.5)\n        {\n            \n            if(noise12(fragCoord) < FIRE_TRANSMISSION)\n            {\n                state.x = 2.5*THIRD;\n                //state.y = 1.0;\n            }\n        }\n        \n        if(noise12(fragCoord+vec2(1321.21,2135.469)) < SPONTANEOUS_DEATH)\n        {\n            state.x = .5*THIRD;\n        }\n        \n    }\n    else \t\t\t\t\t\t\t// FIRE\n    {\n        // COOLING\n        state.y *= .9;\n        //state.y -= .1;\n        \n        // EXTINCTION\n        if(state.y < 0.01)\n        {\n            state.x = .5*THIRD;\n            state.y = 0.;\n        }\n    }\n    \n    \n    fragColor = state;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\n#define SPONTANEOUS_FIRE\t0.01\n//#define SPONTANEOUS_FIRE\t0.03\n#define SPONTANEOUS_SPROUT\t0.05\t\n//#define SPONTANEOUS_SPROUT\t0.05\t\n#define FIRE_TRANSMISSION\t0.4\n#define SPROUT_TRANSMISSION\t0.6\n//#define SPONTANEOUS_DEATH\t0.12\n#define SPONTANEOUS_DEATH\t0.0\n\n\n\n\n\n#define HASHSCALE1 .1031\n#define ITERATIONS 4\n#define THIRD 0.33333333333\n","name":"Common","description":"","type":"common"}]}