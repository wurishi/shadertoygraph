{"ver":"0.1","info":{"id":"ddBSDy","date":"1670801661","viewed":105,"name":"Conway's Game of Life (tej)","username":"tej","description":"Conway's Game of Life","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["game","life","conway","of","conways"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    if (!isOddFrame(iFrame)) {\n        fragColor = texture(iChannel1, uv);\n    } else {\n        fragColor = texture(iChannel2, uv);\n    }\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define ALIVE (vec4(1.0,1.0,1.0,1.0))\n#define DEAD (vec4(0.0,0.0,0.0,1.0))\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    if (iFrame == 0) {\n        //setup\n        \n        fragColor = setup(fragCoord);\n    } else if (isOddFrame(iFrame)) {\n        // simulation\n        \n        fragColor = next(iChannel0, uv, vec2(1.0, 1.0) / iResolution.xy);\n    } else {\n        fragColor = texture(iChannel0, uv);\n    }\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    if (!isOddFrame(iFrame)) {\n        // simulation\n        \n        vec2 uv = fragCoord / iResolution.xy;\n        fragColor = next(iChannel0, uv, vec2(1.0, 1.0) / iResolution.xy);\n    } else {\n        vec2 uv = fragCoord / iResolution.xy;\n        fragColor = texture(iChannel0, uv);\n    }\n}\n","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define ALIVE (vec4(1.0,1.0,1.0,1.0))\n#define DEAD (vec4(0.0,0.0,0.0,1.0))\n\n// Uncomment the five lines below the starting pattern you would like to see.\n// Make sure only one is not commented at a time.\n\n// Puf Train\nint SIZE_X = 5;\nint SIZE_Y = 18;\nint OFFS_X = 20;\nint OFFS_Y = 216;\nint[] PATTERN = int[] (0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1);\n\n\n// Double Zig-Zag\n// int SIZE_X = 39;\n// int SIZE_Y = 1;\n// int OFFS_X = 100;\n// int OFFS_Y = 225;\n// int[] PATTERN = int[] (1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1);\n\n\n// Gosper Gun\n// int SIZE_X = 36;\n// int SIZE_Y = 9;\n// int OFFS_X = 10;\n// int OFFS_Y = 10;\n// int[] PATTERN = int[] (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n\n\n// Spacefiller\n// int SIZE_X = 30;\n// int SIZE_Y = 43;\n// int OFFS_X = 385;\n// int OFFS_Y = 204;\n// int[] PATTERN = int[] (0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0);\n\n\n// Zig-Zag 1\n// int SIZE_X = 8;\n// int SIZE_Y = 6;\n// int OFFS_X = 396;\n// int OFFS_Y = 222;\n// int[] PATTERN = int[] (0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0);\n\n\n// Zig-Zag 2\n// int SIZE_X = 5;\n// int SIZE_Y = 5;\n// int OFFS_X = 398;\n// int OFFS_Y = 223;\n// int[] PATTERN = int[] (1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1);\n\n\n// Acorn\n// int SIZE_X = 7;\n// int SIZE_Y = 3;\n// int OFFS_X = 397;\n// int OFFS_Y = 224;\n// int[] PATTERN = int[] (0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1);\n\n\n// Die Hard\n// int SIZE_X = 8;\n// int SIZE_Y = 3;\n// int OFFS_X = 396;\n// int OFFS_Y = 224;\n// int[] PATTERN = int[] (0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1);\n\n\n// R-pentomino\n// int SIZE_X = 3;\n// int SIZE_Y = 3;\n// int OFFS_X = 399;\n// int OFFS_Y = 224;\n// int[] PATTERN = int[] (0, 1, 1, 1, 1, 0, 0, 1, 0);\n\n\n// Beacon\n// int SIZE_X = 4;\n// int SIZE_Y = 4;\n// int OFFS_X = 398;\n// int OFFS_Y = 223;\n// int[] PATTERN = int[] (1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1);\n\n\n// Pentadecathlon\n// int SIZE_X = 10;\n// int SIZE_Y = 1;\n// int OFFS_X = 395;\n// int OFFS_Y = 225;\n// int[] PATTERN = int[] (1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n\n\n// Pulsar\n// int SIZE_X = 3;\n// int SIZE_Y = 5;\n// int OFFS_X = 399;\n// int OFFS_Y = 223;\n// int[] PATTERN = int[] (0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0);\n\n\n// Toad\n// int SIZE_X = 4;\n// int SIZE_Y = 2;\n// int OFFS_X = 398;\n// int OFFS_Y = 224;\n// int[] PATTERN = int[] (0, 1, 1, 1, 1, 1, 1, 0);\n\n\n// Glider\n// int SIZE_X = 3;\n// int SIZE_Y = 3;\n// int OFFS_X = 399;\n// int OFFS_Y = 224;\n// int[] PATTERN = int[] (0, 0, 1, 1, 0, 1, 0, 1, 1);\n\n\n// Heavy-Weight Space Ship\n// int SIZE_X = 7;\n// int SIZE_Y = 5;\n// int OFFS_X = 397;\n// int OFFS_Y = 223;\n// int[] PATTERN = int[] (0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1);\n\n\n// Light-Weight Space Ship\n// int SIZE_X = 5;\n// int SIZE_Y = 4;\n// int OFFS_X = 398;\n// int OFFS_Y = 223;\n// int[] PATTERN = int[] (1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1);\n\n\n// Medium-Weight Space Ship\n// int SIZE_X = 6;\n// int SIZE_Y = 5;\n// int OFFS_X = 397;\n// int OFFS_Y = 223;\n// int[] PATTERN = int[] (0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1);\n\n\n// Beehive\n// int SIZE_X = 4;\n// int SIZE_Y = 3;\n// int OFFS_X = 398;\n// int OFFS_Y = 224;\n// int[] PATTERN = int[] (0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0);\n\n\n// Boat\n// int SIZE_X = 3;\n// int SIZE_Y = 3;\n// int OFFS_X = 399;\n// int OFFS_Y = 224;\n// int[] PATTERN = int[] (1, 1, 0, 1, 0, 1, 0, 1, 0);\n\n\n// Flower\n// int SIZE_X = 10;\n// int SIZE_Y = 10;\n// int OFFS_X = 395;\n// int OFFS_Y = 220;\n// int[] PATTERN = int[] (0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0);\n\n\n// Loaf\n// int SIZE_X = 4;\n// int SIZE_Y = 4;\n// int OFFS_X = 398;\n// int OFFS_Y = 223;\n// int[] PATTERN = int[] (0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0);\n\n\n// Ship\n// int SIZE_X = 3;\n// int SIZE_Y = 3;\n// int OFFS_X = 399;\n// int OFFS_Y = 224;\n// int[] PATTERN = int[] (1, 1, 0, 1, 0, 1, 0, 1, 1);\n\n\nvec4 setup(vec2 coord) {\n    int x = int(coord.x) - OFFS_X;\n    int y = int(coord.y) - OFFS_Y;\n\n    if (\n        x >= 0 && x < SIZE_X &&\n        y >= 0 && y < SIZE_Y &&\n        PATTERN[y * SIZE_X + x] == 1\n    ) {\n        return ALIVE;\n    } else {\n        return DEAD;\n    }\n}\n\n\nbool isOddFrame(int frame) {\n    return (frame / 2) * 2 == frame;\n}\n\n\nvec4 next(sampler2D buf, vec2 uv, vec2 d)\n{\n    vec2 offs0 = uv + vec2( d.x,  0.0);\n    vec2 offs1 = uv + vec2(-d.x,  0.0);\n    vec2 offs2 = uv + vec2( 0.0,  d.y);\n    vec2 offs3 = uv + vec2( 0.0, -d.y);\n    vec2 offs4 = uv + vec2( d.x,  d.y);\n    vec2 offs5 = uv + vec2(-d.x,  d.y);\n    vec2 offs6 = uv + vec2( d.x, -d.y);\n    vec2 offs7 = uv + vec2(-d.x, -d.y);\n\n    vec4 nei0 = texture(buf, offs0);\n    vec4 nei1 = texture(buf, offs1);\n    vec4 nei2 = texture(buf, offs2);\n    vec4 nei3 = texture(buf, offs3);\n    vec4 nei4 = texture(buf, offs4);\n    vec4 nei5 = texture(buf, offs5);\n    vec4 nei6 = texture(buf, offs6);\n    vec4 nei7 = texture(buf, offs7);\n\n    int liveNeighbors =\n        (nei0.r >= 0.5 ? 1 : 0) +\n        (nei1.r >= 0.5 ? 1 : 0) +\n        (nei2.r >= 0.5 ? 1 : 0) +\n        (nei3.r >= 0.5 ? 1 : 0) +\n        (nei4.r >= 0.5 ? 1 : 0) +\n        (nei5.r >= 0.5 ? 1 : 0) +\n        (nei6.r >= 0.5 ? 1 : 0) +\n        (nei7.r >= 0.5 ? 1 : 0);\n\n    bool isAlive = texture(buf, uv).r >= 0.5;\n\n    if (isAlive) {\n        if (liveNeighbors == 2 || liveNeighbors == 3) {\n            return ALIVE;\n        } else {\n            return DEAD;\n        }\n    } else {\n        if (liveNeighbors == 3) {\n            return ALIVE;\n        } else {\n            return DEAD;\n        }\n    }\n}\n","name":"Common","description":"","type":"common"}]}