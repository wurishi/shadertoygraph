{"ver":"0.1","info":{"id":"dtjcRh","date":"1691487805","viewed":104,"name":"Tesla RVC Radar Ring","username":"lianglei","description":"Simulate the radar loop effect formed by vehicle obstacles in Tesla's reverse image","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define A -0.7\n#define B (sin(iTime* 0.8) * 0.5)\n#define C (iMouse.z <= 0.0 ? 0.1 : iMouse.y / iResolution.y - 0.5)\n#define D 0.1\n\n#define DA (B - A)\n#define DB (C - B)\n#define DC (D - C)\n\n#define EDGE   0.01\n#define SMOOTH 0.0001\n\n// F(x,y) = F(x) - y\n//A start B controllerPoint1  C controllerPoint2  D endpoint\nfloat F ( in vec2 coords )\n{\n    float T = coords.x;\n    return\n        (A * (1.0-T) * (1.0-T) * (1.0-T)) + \n        (B * 3.0 * (1.0-T) * (1.0-T) * T) +\n        (C * 3.0 * (1.0-T) * T * T) +\n        (D * T * T * T) -\n        coords.y;\n}\n\n\n\n// a proper gradient function finally\nvec2 Grad( in vec2 coords )\n{\n    float T = coords.x;\n    float T2 = T * T;\n    float S = (1.0 - T);\n    float S2 = S * S;\n    \n    float DF =\n        DA * S2 +\n        DB * 2.0 * S * T +\n        DC * T2;\n    \n    return vec2 (\n        3.0*DF,\n        -1.0\n    );\n}\n\n// signed distance function for F(x,y)\nfloat SDF( in vec2 coords )\n{\n    float v = F(coords);\n    vec2  g = Grad(coords);\n    return abs(v)/length(g);\n}\n\n// signed distance function for Circle, for control points\nfloat SDFCircle( in vec2 coords, in vec2 offset )\n{\n    coords -= offset;\n    float v = coords.x * coords.x + coords.y * coords.y - EDGE*EDGE;\n    vec2  g = vec2(2.0 * coords.x, 2.0 * coords.y);\n    return v/length(g); \n}\n\n//-----------------------------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    float aspectRatio = iResolution.x / iResolution.y;\n    vec2 percent = ((fragCoord.xy / iResolution.xy) - vec2(0.25,0.4));\n    percent.x *= aspectRatio;\n\n    vec3 color = vec3(1.0,1.0,1.0);\n    float dist = SDFCircle(percent, vec2(0.0,A));\n\t    \n    \n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = texture(iChannel0,uv).rgb;\n    dist = SDF(percent);\n    if (dist < EDGE + SMOOTH)\n    {\n        dist = smoothstep(EDGE - SMOOTH,EDGE + SMOOTH,dist);\n        color *= (percent.x >= 0.0 && percent.x <= 1.0) ? vec3(col) : vec3(1.0);\n    }\n      \n   //show radar color bg\n   \n    //color *= mix(color,col,0.25);\n    \n\tfragColor = vec4(color,1.0);\n   \n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float dis_c(vec2 center, float r, vec2 coord){\n    \n    float d = distance( center, coord ) - r;\n    return d;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.x;\n    uv = vec2(uv.x/0.8,uv.y)+vec2(-0.1,0);\n    vec4 bg = vec4(1.0,1.0,1.0, 1.0);\n    \n    float dc1 = dis_c(vec2(0.5,0.3),0.12,uv);  \n    vec4 shape1 = vec4(vec3(0.9568,0.2196,0.1882),1.0 - smoothstep(-0.03,0.03,dc1));\n    \n    //stroke\n    float stroke = 0.14; //stroke size\n    vec4 strokeLayer = vec4(vec3(1.0, 0.9059, 0.4275),1.0-smoothstep(-0.03,0.03,dc1-stroke));//Expand a circle to stroke;\n    \n    shape1 = vec4(mix(strokeLayer.rgb, shape1.rgb, shape1.a), strokeLayer.a);\n    //end stroke.\n\n     //stroke\n    float stroke2 = 0.2; //stroke size\n    vec4 strokeLayer2 = vec4(vec3(0.9176, 0.9608, 0.9608),1.0-smoothstep(-0.025,0.025,dc1-stroke2));//Expand a circle to stroke;\n    shape1 = vec4(mix(strokeLayer2.rgb, shape1.rgb, shape1.a), strokeLayer2.a);\n    \n    vec4 layer1 = mix(bg,shape1,shape1.a);\n    fragColor = layer1;\n    \n}","name":"Buffer A","description":"","type":"buffer"}]}