{"ver":"0.1","info":{"id":"ttlfzj","date":"1597223726","viewed":1198,"name":"GameBoy Palette (Dithering)","username":"hobbes","description":"pixelation, palette filter, dithering :)","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["gameboy","dithering","nintendo"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float size = 128.; // Pixelated resolution x-component\nfloat threshold = .006; // Threshold for dithering (0.0045 found to be optimal)\nmat2 dither_2 = mat2(0.,1.,1.,0.);\n\nstruct dither_tile {\n    float height;\n};\n\n\nvec3[4] gb_colors() {\n \tvec3 gb_colors[4];\n    gb_colors[0] = vec3(15., 56., 15.)\t\t/255.;\n    gb_colors[1] = vec3(48., 98., 48.)\t\t/255.;\n    gb_colors[2] = vec3(139., 172., 15.)\t/255.;\n    gb_colors[3] = vec3(155., 188., 15.)\t/255.;\n    return gb_colors;\n}\n\nfloat[4] gb_colors_distance(vec3 color) {\n    float distances[4];\n    distances[0] = distance(color, gb_colors()[0]);\n    distances[1] = distance(color, gb_colors()[1]);\n    distances[2] = distance(color, gb_colors()[2]);\n    distances[3] = distance(color, gb_colors()[3]);\n    return distances;\n}\n\nvec3 closest_gb(vec3 color) {\n    int best_i = 0;\n    float best_d = 2.;\n    \n    vec3 gb_colors[4] = gb_colors();\n    \n    for (int i = 0; i < 4; i++) {\n        float dis = distance(gb_colors[i], color);;\n        if (dis < best_d) {\n            best_d = dis;\n            best_i = i;\n        }\n    }\n    \n    \n    return gb_colors[best_i];\n}\n\nvec2 get_tile_sample(vec2 coords, vec2 res) {\n    return floor(coords * res / 2.) * 2. / res;\n}\n\nvec3[2] gb_2_closest(vec3 color) {\n \tfloat distances[4] = gb_colors_distance(color);\n    \n    int first_i = 0;\n    float first_d = 2.;\n    \n    int second_i = 0;\n    float second_d = 2.;\n    \n    for (int i = 0; i < distances.length(); i++) {\n        float d = distances[i];\n        if (distances[i] <= first_d) {\n            second_i = first_i;\n            second_d = first_d;\n            first_i = i;\n            first_d = d;\n        } else if (distances[i] <= second_d) {\n            second_i = i;\n            second_d = d;\n        }\n    }\n    vec3 colors[4] = gb_colors();\n    vec3 result[2];\n    if (first_i < second_i) {\n        result = vec3[2](colors[first_i], colors[second_i]);\n    } else {\n     \tresult = vec3[2](colors[second_i], colors[first_i]);   \n    }\n    \n    \n    return result;\n}\n\nbool needs_dither(vec3 color) {\n    float distances[4] = gb_colors_distance(color);\n    \n    int first_i = 0;\n    float first_d = 2.;\n    \n    int second_i = 0;\n    float second_d = 2.;\n    \n    for (int i = 0; i < distances.length(); i++) {\n        float d = distances[i];\n        if (d <= first_d) {\n            second_i = first_i;\n            second_d = first_d;\n            first_i = i;\n            first_d = d;\n        } else if (d <= second_d) {\n            second_i = i;\n            second_d = d;\n        }\n    }\n    return abs(first_d - second_d) <= threshold;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    vec2 resolution = vec2(size, iResolution.y / iResolution.x * size);\n    vec2 uv = floor(fragCoord/iResolution.xy * resolution) / resolution;\n    \n    vec2 tileSample = get_tile_sample(uv, resolution);\n    vec3 sampleColor = texture(iChannel0, tileSample).xyz;\n    \n    vec3 colors[2] = vec3[2](vec3(1.,1.,1.), vec3(0.,0.,0.));\n    \n    if (needs_dither(sampleColor)) {\n        ivec2 ti = ivec2(floor((uv - tileSample) * 2. * resolution));\n        //fragColor = vec4(closest_gb(texture(iChannel0, uv).xyz),1.0);\n        fragColor = vec4(gb_2_closest(sampleColor)[int(dither_2[ti.x][ti.y])], 1.);\n        \n        //fragColor = vec4(colors[int(dither_2[ti.x][ti.y])], 1.);\n    } else {\n        fragColor = vec4(closest_gb(texture(iChannel0, uv).xyz),1.0);\n    }\n    \n    // Output to screen\n    \n}","name":"Image","description":"","type":"image"}]}