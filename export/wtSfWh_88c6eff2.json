{"ver":"0.1","info":{"id":"wtSfWh","date":"1599149050","viewed":405,"name":"try some ground fog","username":"cailuming","description":"another explore to see how fbm works, and what might it be look like","likes":18,"published":1,"flags":0,"usePreview":0,"tags":["fbm","fog","style","china"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define FAR 128\n#define PI 3.1415926\n \nstruct Ray{\n  vec3 o;\n  vec3 d;\n};\n\nmat2 rot2D(float a){\n  float c = cos(a);\n  float s = sin(a);\n  return mat2(c,s,-s,c);  \n}\n//from iq\nvec3 palette(float h,float s,float v){\n   vec3 a = vec3(v);\n   vec3 b = vec3(s);\n   vec3 c = vec3(1);\n   vec3 d = vec3(0.0,0.33,0.67);\n   return a+b*cos(2.0*PI*(c*h+d)); \n}\n \n\nvec2 hash( vec2 x ) \n{\n    const vec2 k = vec2( 0.3183099, 0.3678794 );\n    x = x*k + k.yx;\n    vec2 v = -1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) ); \n    return v;\n}\n\nfloat noise2D(vec2 uv){\n    vec2 p = floor(uv);\n    vec2 f = fract(uv);\n    vec2 e = vec2(1.0,0.0);\n    \n    vec2 p00 = p;\n    vec2 p01 = p+e.yx;\n    vec2 p10 = p+e.xy;\n    vec2 p11 = p+e.xx;\n    \n    float v00 = dot(f-e.yy,hash(p00));\n    float v01 = dot(f-e.yx,hash(p01));\n    float v10 = dot(f-e.xy,hash(p10));\n    float v11 = dot(f-e.xx,hash(p11));\n    \n    f = f*f*f*(f*(f*6.-15.)+10.); \n    \n    return mix(mix(v00,v01,f.y),mix(v10,v11,f.y),f.x);\n}\n\nfloat fresnal(float f0,float hv){\n    return f0+(1.0-f0)*pow(1.0-hv,5.0);\n}    \n\nfloat fbm(vec3 p){\n    float ret = 0.0;\n    float freq = 1.0;\n    float amp  = 0.5;\n    for(int i=0;i<5;i++){\n       ret +=texture(iChannel1,(p+vec3(0,0,iTime*0.25))*freq).x*amp/5.0;\n       freq*=0.5;\n       amp*=2.5;\n       p+=ret; \n    }\n    \n    return ret;\n}\n\nvoid setCamera(inout Ray r,vec2 uv,vec3 eye,vec3 tar){\n   vec3 look  = normalize(tar -eye);\n   vec3 right = normalize(cross(vec3(0,1,0),look)); \n   vec3 up    = normalize(cross(look,right));\n   \n   r.o = eye;\n   r.d = normalize(right*uv.x+up*uv.y+look);   \n}\n \n\nvec2 roof(vec3 c,vec3 p){\n   p-=c;\n    \n   float top_y = clamp(p.y,-PI*0.05,PI*0.5); \n   float sqd = max(max(abs(p.x)+sin(top_y),abs(p.y)),abs(p.z)+sin(top_y))-0.05;\n\n   return vec2(sqd,2);\n}\n\nvec2 cube(vec3 c,vec3 p){\n   p-=c;\n   float v = max(max(abs(p.x),abs(p.y)+0.09),abs(p.z))-0.1;\n   return vec2(v,3.0); \n}\n\nvec2 pillar(vec3 c,vec3 p){\n   p-=c;\n   float v = length(vec3(p.x,clamp(p.y,0.0,p.y+0.17),p.z))-0.01;\n     \n   return vec2(v,3); \n}\n\nvec2 ground(vec3 c,vec3 p){\n   p-=c;\n   float h  =  noise2D(p.xz*0.15)*1.0;\n   float h1 =  noise2D(p.xz*15.0)*.01;\n   vec3 tcol = texture(iChannel0,p.xz*0.7).xyz;\n        \n   return vec2(p.y+2.0+mix(h,h1+tcol.x*0.04,p.z),1);\n}\n\nvoid cmp(inout vec2 a,vec2 b){\n   a = a.x>b.x?b:a;\n}\n\nvec2 map(vec3 p){\n   vec2 r = vec2(1);\n   \n   cmp(r,ground(vec3(0,0,5),p));\n   cmp(r,roof(vec3(-4.3,1.82,-6.4),p));\n   cmp(r,pillar(vec3(-4.36,1.76,-6.45),p));\n   cmp(r,pillar(vec3(-4.36,1.76,-6.36),p));\n   cmp(r,pillar(vec3(-4.24,1.76,-6.45),p));\n   cmp(r,pillar(vec3(-4.24,1.76,-6.36),p));\n   cmp(r,cube(vec3(-4.25,1.5,-6.29),p));\n    \n   return r; \n}\n\nvec3 norm(vec3 p){\n   vec2  e = vec2(1.0,0.0)*0.001;\n   float m = map(p).x;\n   return -normalize(\n       vec3(\n           m-map(p+e.xyy).x,\n           m-map(p+e.yxy).x,\n           m-map(p+e.yyx).x\n       )); \n}\n\nvoid rayHit(Ray r,inout vec2 h){\n   float t = 0.1;\n     \n   for(int i=0;i<FAR;i++){\n       \n       h = map(r.o+r.d*t);\n       \n       t+=h.x;\n       \n       if(h.x<=0.005||t>256.0){\n       \n          break;\n       }\n   }\n    \n   h = vec2(t,h.y); \n    \n}\n\nfloat volumetric(vec3 p,vec3 dir,float t,float h){\n    float ret = 0.0;\n    float sp = 0.0;\n    for(int i=0;i<32;i++){\n       p+=dir*t/32.0;\n       ret+=fbm(p*0.05)*t/1000.0;\n    }\n    \n    return ret*(exp(-max(p.y*0.45+h,0.0)));\n}\n\nvoid shading(inout vec3 col,Ray ray,vec2 res,vec3 lp){\n   vec3 o = ray.o;\n   vec3 d = ray.d;\n    \n   vec3 p = o+d*res.x;\n    \n   vec3 n = norm(p);\n   vec3 v = -d;\n\n   vec3 l = normalize(lp-p); \n   vec3 h = normalize(l+v);\n   \n   float nl = max(dot(n,l),0.0);\n   float nh = max(dot(h,n),0.0);\n   float vh = max(dot(h,v),0.0);\n   float f  = fresnal(0.04,nh);\n\n   float g  = smoothstep(0.0,1.0,pow(nh,1350.0)); \n   float cosv = max(dot(vec3(0,1,0),n),0.0);\n   \n   if((res.y==1.0)){\n      \n       vec3 tcol = texture(iChannel0,p.xz*0.01).xyz;\n       col += palette(0.6,0.4,0.5)*vec3((f+g*4.+nl))*cosv/3.0;\n       col+=tcol;\n   }else if((res.y==2.0)){\n       \n       col += palette(0.39,0.2,1.2)*vec3((f+g+nl))*cosv;\n   }else if((res.y==3.0)){\n       col += palette(0.006,0.05,0.22)*vec3((g+nl*4.));\n   }\n        \n   col += volumetric(ray.o,ray.d,res.x,1.0);\n      \n   col = mix(col,vec3(0.6,0.7,0.8),1.0-exp(-0.015*res.x)); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy-vec2(0.5);\n    uv.x*= iResolution.x/iResolution.y;\n    float mtime = iTime*0.2;\n    // Time varying pixel color\n    vec3 col = vec3(0);\n    vec3 eye = vec3(-6.0,4.0,-10.0);\n    vec3 tar = vec3(0.0+cos(mtime),0,2.0+sin(mtime));\n    vec3 lp   = vec3(10.0,10,-10.0);\n    vec2 h    = vec2(0);\n    \n    Ray ray;\n    setCamera(ray,uv,eye,tar);\n      \n    rayHit(ray,h);\n    shading(col,ray,h,lp);\n    // Output to screen\n    col = smoothstep(0.0,1.0,col);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}