{"ver":"0.1","info":{"id":"MXyGDt","date":"1718389926","viewed":61,"name":"bae #019 ~ Galactic Gloom","username":"BretHudson","description":"Folding UV space & applying a texture to the resulting space with a mask","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal","kifs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592\n\nfloat sdfSquare(vec2 p, float r)\n{\n    return length(p) - r;\n    p = abs(p) - r;\n    return max(p.x, p.y);\n}\n\nmat2 rot2D(float angle)\n{\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat2(c, -s, s, c);\n}\n\nfloat tOffset = 16.7;\nfloat distanceFractal(inout vec2 p, inout float s)\n{\n    float dis = 1e20;\n    \n    float scale = 2.2;\n    float offset = 6.3;\n    \n    vec2 n1 = vec2(sin(PI * .15), cos(PI * .25));\n    vec2 n2 = vec2(sin(PI * .75), cos(PI * -.3));\n    \n    for (int i = 0; i < 6; ++i)\n    {\n        p -= n1 * max(0., dot(p, n1)) * 2.;\n        p -= n2 * max(0., dot(p, n2)) * 2.;\n        \n        dis = min(dis, sdfSquare(p, 1.) * s);\n        \n        p *= scale;\n        s /= scale;\n        p.x = abs(p.x) - offset;\n    }\n    \n    return dis;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    vec2 _uv = uv;\n    vec2 m = iMouse.xy / iResolution.xy;\n    \n    float t = iTime + tOffset;\n    \n    uv *= 2.;\n    uv *= rot2D(t * .6 + length(uv) * -.6);\n    \n    float s = 1.;\n    \n    float angle = .5 * PI;\n    vec2 n;\n    n = vec2(sin(angle), cos(angle));\n    uv -= n * max(0., dot(uv, n)) * 2.;\n    n = vec2(sin(PI), cos(PI));\n    uv -= n * max(0., dot(uv, n)) * 2.;\n    \n    float d = distanceFractal(uv, s);\n    float mask = smoothstep(1./iResolution.x, 0., d);\n    d = smoothstep(1. / iResolution.x, 0., abs(d) - 0.01);\n    vec3 col = vec3(0, 0, .2);\n    col += vec3(d * .2);\n    col += texture(iChannel0, uv / (1. / s) + t * .08).rrg * mask;\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}