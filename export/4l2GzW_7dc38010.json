{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"//Revised 2018 version.\nvec2 Hash(vec2 P)\n{\n \treturn fract(cos(P*mat2(-64.2,71.3,81.4,-29.8))*8321.3); \n}\nfloat Worley(vec2 P)\n{\n    float Dist = 1.;\n    vec2 I = floor(P);\n    vec2 F = fract(P);\n    \n    for(int X = -1;X<=1;X++)\n    for(int Y = -1;Y<=1;Y++)\n    {\n        float D = distance(Hash(I+vec2(X,Y))+vec2(X,Y),F);\n        Dist = min(Dist,D);\n    }\n    return Dist;\n\t\n}\nvoid mainImage( out vec4 Color, in vec2 Coord)\n{\n\tColor = vec4(vec3(Worley(Coord.xy/32.0+iTime)),1.0);\n}\n\n/*Original 2015 version.\n\nfloat r(float n)\n{\n \treturn fract(cos(n*89.42)*343.42);\n}\nvec2 r(vec2 n)\n{\n \treturn vec2(r(n.x*23.62-300.0+n.y*34.35),r(n.x*45.13+256.0+n.y*38.89)); \n}\nfloat worley(vec2 n,float s)\n{\n    float dis = 2.0;\n    for(int x = -1;x<=1;x++)\n    {\n        for(int y = -1;y<=1;y++)\n        {\n            vec2 p = floor(n/s)+vec2(x,y);\n            float d = length(r(p)+vec2(x,y)-fract(n/s));\n            if (dis>d)\n            {\n             \tdis = d;   \n            }\n        }\n    }\n    return dis;\n\t\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float dis = worley(fragCoord.xy+iTime*32.0,32.0);\n\tfragColor = vec4(vec3(dis),1.0);\n}\n*/","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4l2GzW","date":"1427301945","viewed":2578,"name":"Xor - Infinite Worley Noise","username":"Xor","description":"This is an infinite 2D Worley noise test.","likes":42,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d","voronoi","noise","worley","xor","infinite"],"hasliked":0,"parentid":"","parentname":""}}