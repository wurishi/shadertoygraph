{"ver":"0.1","info":{"id":"XfSyDc","date":"1723049098","viewed":38,"name":"Rotating hexagon","username":"lau","description":"sdf, rotation","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sdf","rotation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://iquilezles.org/articles/distfunctions2d/\nfloat sdHexagon( in vec2 p, in float r )\n{\n    const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n    p = abs(p);\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n    return length(p)*sign(p.y);\n}\n\n// https://iquilezles.org/articles/palettes/\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec2 rotate2D(vec2 p, float angle) {\n    float cosA = cos(angle);\n    float sinA = sin(angle);\n    return vec2(\n        cosA * p.x - sinA * p.y,\n        sinA * p.x + cosA * p.y\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  // unit vector - iResolution is the canvas size w,h,d\n  // ranges from -1,-1 to 1,1\n  vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n  vec2 p = fragCoord.xy / iResolution.xy;\n  p.x += 0.002*iTime;\n  \n  // rotate based on time\n  uv = rotate2D(uv, sin(iTime));\n  p = rotate2D(p, sin(0.1*iTime));\n\n  vec3 color = palette(p.x, vec3(0.8,0.5,0.4),vec3(0.2,0.4,0.2),vec3(2.0,1.0,1.0),vec3(0.0,0.25,0.25));\n    \n\n  float d = sdHexagon(uv, .5);\n  \n  d = 0.02 / abs(sin(d * 15. - cos(iTime) - iTime * 0.5) / 20.);\n\n  color *= d;\n\n  fragColor = vec4(color,1.);\n}\n","name":"Image","description":"","type":"image"}]}