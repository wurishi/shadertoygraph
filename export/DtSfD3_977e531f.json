{"ver":"0.1","info":{"id":"DtSfD3","date":"1694627225","viewed":19,"name":"Shader Assignment - 1B","username":"neguete10","description":"hw","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["computergraphics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdBoxFrame( vec3 p, vec3 b, float e )\n{\n       p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\nfloat sdLink( vec3 p, float le, float r1, float r2 )\n{\n  vec3 q = vec3( p.x, max(abs(p.y)-le,0.0), p.z );\n  return length(vec2(length(q.xy)-r1,q.z)) - r2;\n}\n\n/*\nvec3 checker(vec2 Pos){\n Pos = floor(Pos);\n return vec3(mod(Pos.x + mod(Pos.y, 2.0), 2.0));\n}\n*/\nvec3 bubbles(vec2 Pos){\n    float radius = 0.5; // bubble radius\n    vec2 gridPos = floor(Pos);\n    vec2 offset = Pos - gridPos - vec2(0.5); // center of each bubble\n\n    float inBubble = step((length(offset)), radius);\n\n    vec3 color = vec3(mod(gridPos.x, 2.0), mod(gridPos.y, 2.0), 0.0);\n\n    return cos(mix(vec3(1.0), color, inBubble));\n}\n\n \nfloat random(vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float s = sin(iTime);\n    float c = cos(iTime);\n \n    //Rotation Matrices\n    mat3 rotX = mat3(\n        1.0, 0.0, 0.0,\n        0.0, c,   s,\n        0.0, -s,  c\n      );\n     \n    mat3 rotZ = mat3(\n        c,   s, 0.0,\n        -s,  c, 0.0, \n        0.0, 0.0, 1.0\n      ); \n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.xy -= 0.5;\n\n    //Background\n    \n    vec3 col = bubbles(fragCoord.xy /50.0 + fract(sin(iTime))) + 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n\n    //Ray \n    vec3 rayPt = vec3(uv.xy, 0);\n    vec3 rayPtdx = vec3(uv.x + 0.00001, uv.y, 0);\n    vec3 rayPtdy = vec3(uv.x, uv.y + 0.00001, 0);\n    \n    vec3 eyePos = vec3(0,0,-10);\n    vec3 rayDir = normalize(vec3(uv.xy, 0) - eyePos);\n  \n    float t = 0.0, tdx = 0.0, tdy = 0.0; //ray parameter\n    \n    //Properties of Link & BoxFrame\n    vec3 boxFrameProps = vec3(0.2, 0.1, 0.4); //vec2 to vec3\n    vec3 boxFramePos = vec3(0.0, 0.0, 3.0);\n    vec3 linkPos = vec3(0.0, 0.0, 15.0);\n    \n    //placeholder !!!!!!!!!!\n    float le = 0.2, r1 = 0.3, r2 = 0.7;  // Modify as needed\n \n    \n    for(int i = 0; i < 20; i++){\n    \n        //calculate a point 5 units along the ray\n        vec3 pos = rayPt + rayDir * t;    \n        vec3 posdx = rayPtdx + rayDir * tdx;\n        vec3 posdy = rayPtdy + rayDir * tdy;\n             \n        //Box Frame + Link (Combination of Primitives)\n        float dist = min(sdBoxFrame(rotX*rotZ*(pos - boxFramePos), boxFrameProps, boxFrameProps.y),\n                         sdLink(rotX*rotZ*(pos - linkPos), le, r1, r2));\n        float distdx = min(sdBoxFrame(rotX*rotZ*(posdx - boxFramePos), boxFrameProps, boxFrameProps.x),\n                           sdLink(rotX*rotZ*(posdx - linkPos),  le, r1, r2));\n        float distdy = min(sdBoxFrame(rotX*rotZ*(posdy - boxFramePos), boxFrameProps, boxFrameProps.x),\n                           sdLink(rotX*rotZ*(posdy - linkPos),  le, r1, r2));\n        \n        \n        if(dist < 0.001  && distdx < 0.001 && distdy < 0.001){\n        \n            vec3 lightDir = rayDir;\n            \n            vec3 shape = vec3(1,0,1);\n\n            col = shape*dot(-lightDir, normalize(cross(posdy - pos, posdx - pos)));\n                    \n            break;\n        } \n                \n        t = t + dist;\n        tdx = tdx + distdx;\n        tdy = tdy + distdy;\n    }\n\n\n    //Noisy Pattern over the entire screen\n    col = mix(col,vec3(texture(iChannel0, uv.xy).rrr), 0.3);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}