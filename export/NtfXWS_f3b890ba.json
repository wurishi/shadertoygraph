{"ver":"0.1","info":{"id":"NtfXWS","date":"1626463746","viewed":615,"name":"Voxel Heightmap - Amanatides DDA","username":"dip16","description":"Fork of https://www.shadertoy.com/view/3sKXDK\n\nAmanatides 3D DDA marching implementation\nPaper: http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.42.3443&rep=rep1&type=pdf\n","likes":19,"published":1,"flags":0,"usePreview":1,"tags":["3d","raymarching","terrain","voxel","heightmap","dda","amanatides"],"hasliked":0,"parentid":"3sKXDK","parentname":"Bunny Amanatide"},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of https://www.shadertoy.com/view/3sKXDK by SebH (https://twitter.com/SebHillaire)\n// by ootsta (https://twitter.com/ootsta)\n\n// Amanatides 3D DDA marching implementation - Paper: http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.42.3443&rep=rep1&type=pdf\n// Use mouse left to rotate camera (X axis)\n// Morphed from https://www.shadertoy.com/view/MdlyDs\n\n#define VOLUME_SIZE 128\n#define USE_TEXTURE 1\n\nfloat sampleMap(vec3 uvs, out vec3 col)\n{\t\n#if USE_TEXTURE\n    vec4 t = texture(iChannel0, uvs.xz);\n#else\n    vec4 t = vec4(1.0*sin(uvs.x*uvs.z*15.0), 0.1+uvs.y, 0.1+uvs.y, 1.0); \n#endif\n    col = t.rgb;    \n    return uvs.y*8.0 > t.r ? 0.0: 1.0;\n        \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    const float sz = float(VOLUME_SIZE);\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 color = vec3(0.0, 0.0, 0.0);\n    \n\tvec2 mouseControl = iMouse.xy / iResolution.xy;\n    vec3 viewDir = normalize(vec3((fragCoord.xy - iResolution.xy*0.5) / iResolution.y, 1.0));\n    float viewAngle = iMouse.z<=0.0 ? iTime*0.2 : mouseControl.x * 10.0f;\n    float camDist = 0.5 * sz;\n    vec3 camTarget = vec3(sz/2.0,0.0,sz/2.0);\n    vec3 camPos = camTarget + vec3(camDist*cos(viewAngle), camDist, camDist*sin(viewAngle));\n    \n    vec3 camUp = vec3(0,1.0,0);\n    vec3 forward = normalize(camTarget - camPos);\n    vec3 left = normalize(cross(forward, camUp));\n    vec3 up = cross(left, forward);\n    vec3 worldDir = normalize(viewDir.x*left + viewDir.y*up + viewDir.z*forward);\n    \n    vec3 D = worldDir; // Ray direction\n    vec3 P = camPos;   // Ray position\n\n    // Amanatides 3D-DDA data preparation\n    vec3 stepSign = sign(D);\n    vec3 tDelta = abs(1.0 / D);\n    vec3 tMax = vec3(0.0, 0.0, 0.0);\n    vec3 refPoint = floor(P);\n    tMax.x = stepSign.x > 0.0 ? refPoint.x+1.0 - P.x : P.x - refPoint.x; // floor is more consistent than ceil\n    tMax.y = stepSign.y > 0.0 ? refPoint.y+1.0 - P.y : P.y - refPoint.y;\n    tMax.z = stepSign.z > 0.0 ? refPoint.z+1.0 - P.z : P.z - refPoint.z;\n    tMax.x *= tDelta.x;\n    tMax.y *= tDelta.y;\n    tMax.z *= tDelta.z;\n\n\n    for (int i=0; i<384; i++) {\n        // Amanatides 3D-DDA \n        if(tMax.x < tMax.y) {\n            if(tMax.x < tMax.z) {\n                P.x += stepSign.x;\n                tMax.x += tDelta.x;\n            } else {\n                P.z += stepSign.z;\n                tMax.z += tDelta.z;\n            }\n        } else {\n            if(tMax.y < tMax.z) {\n                P.y += stepSign.y;\n                tMax.y += tDelta.y;\n            } else {\n                P.z += stepSign.z;\n                tMax.z += tDelta.z;\n            }\n        }\n        \n        if (P.x < 0.0 || P.x > sz || P.z < 0.0 || P.z > sz) break;\n\n        vec3 voxel = floor(P);\n        vec3 voxelcol;\n        if(sampleMap(vec3(voxel)/sz, voxelcol) > 0.0) {\n            color = voxelcol;\n            break;\n        }\n    }        \n    \n    fragColor = vec4(pow(color, vec3(1.0/1.5)),1.0); // simple linear to gamma\n}\n\n\n","name":"Image","description":"","type":"image"}]}