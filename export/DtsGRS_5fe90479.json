{"ver":"0.1","info":{"id":"DtsGRS","date":"1671943274","viewed":207,"name":"Pseudo-Random SDF - Distance 2D","username":"MysteryPancake","description":"Layering a few triangle waves produces a cheap random looking SDF :)","likes":6,"published":3,"flags":0,"usePreview":0,"tags":["2d","voronoi","distancefield","grid","sdf","circle","random","distance","dots","chaos"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float iterations = 32.0;\n\nfloat noise(float n) {\n\treturn fract(cos(n * 7589.42) * 343.53);\n}\n\n// Ping-pong triangle waveform\nvec2 triangle(vec2 p, vec2 period) {\n    return abs(mod(p, period) - period * 0.5);\n}\n\n// Overlap a bunch of triangle waveforms\nfloat chaos(vec2 p) {\n\n    float spread = 0.5 + cos(iTime * 2.0) * 0.5;\n    float dist = 9999.9;\n    \n    for (float i = 1.0; i <= iterations; i++) {\n        // Random starting offset for each waveform\n        vec2 offset = vec2(noise(i), noise(i + iterations));\n        // Period could be randomized, kept linear here\n        vec2 period = vec2(spread) + i * 0.02;\n        // Generate triangle waveform\n        vec2 tri = triangle(p + offset * spread, period);\n        // Pick closest point\n        dist = min(dist, length(tri));\n    }\n    return dist - 0.05;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n\t// Normalized coordinates, ripped from Inigo Quilez\n\tvec2 p = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n\tvec2 m = (2.0 * iMouse.xy - iResolution.xy) / iResolution.y;\n\t\n\tfloat d = chaos(p);\n\n\t// Coloring, ripped from Inigo Quilez\n\tvec3 col = vec3(1.0) - sign(d) * vec3(0.1, 0.4, 0.7);\n\tcol *= 1.0 - exp(-6.0 * abs(d));\n\tcol *= 0.8 + 0.2 * cos(120.0 * d);\n\tcol = mix(col, vec3(1.0), 1.0 - smoothstep(0.0, 0.015, abs(d)));\n\n\tif (iMouse.z > 0.001) {\n\t\td = chaos(m);\n\t\tcol = mix(col, vec3(1.0, 1.0, 0.0), 1.0 - smoothstep(0.0, 0.005, abs(length(p - m) - abs(d)) - 0.0025));\n\t\tcol = mix(col, vec3(1.0, 1.0, 0.0), 1.0 - smoothstep(0.0, 0.005, length(p - m) - 0.015));\n\t}\n\t\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}