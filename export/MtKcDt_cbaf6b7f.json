{"ver":"0.1","info":{"id":"MtKcDt","date":"1538228880","viewed":1304,"name":"Pie Chart","username":"unbird","description":"Simple pie chart.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["2d","chart","shape","pie"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/MtKcDt\n\n#define ANIMATE 1\n\n// number of parts\n#define COUNT 5\n// automatically close the chart to full circle\n#define CLOSED 1\n\n// angles for each pie slice in radians\nconst float angles[COUNT] = float[5](0.1,0.2,0.3,0.4,0.5);\n\n\n// constants\n#define PI 3.1415926535897932384626433832795\n\nconst vec4 Red = vec4(1,0,0,1);\nconst vec4 LightRed = vec4(1,0.8,0.8,1);\nconst vec4 Yellow = vec4(1,1,0,1);\nconst vec4 Green = vec4(0,1,0,1);\nconst vec4 LightGreen = vec4(0.8,1.0,0.8,1);\nconst vec4 Blue = vec4(0,0,1,1);\nconst vec4 LightBlue = vec4(0.8,0.8,1,1);\nconst vec4 White = vec4(1,1,1,1);\nconst vec4 Gray = vec4(0.5,0.5,0.5,1);\nconst vec4 Black = vec4(0,0,0,1);\nconst vec4 TransparentWhite = vec4(1,1,1,0);\nconst vec4 Brown = vec4(0.8, 0.4, 0.2,1);\n\n// pie sclice colors\nconst vec4 colors[COUNT] = vec4[5](Red,Green, Blue, Yellow, LightBlue);\n\n\nfloat intersect(float d1, float d2)\n{\n\treturn max(d1, d2);\n}\n\nfloat merge(float d1, float d2)\n{\n\treturn min(d1, d2);\n}\n\nfloat pie(vec2 p, float angle)\n{\n\tvec2 n = vec2(-cos(angle), sin(angle));\n\treturn p.x * n.x + p.y*n.y;\n}\n\nfloat sceneDist(vec2 p, inout vec4 color)\n{    \n    float time = iTime;    \n\tvec2 center = iResolution.xy / 2.0;\n    p = p - center;\n    \n    float a[COUNT];    \n\n    for(int i = 0; i < COUNT; i++)\n    {\n#ifdef ANIMATE\n        a[i] = 2.0*angles[i] + angles[i] * cos(time * float(i+1) + float(i));                                               \n#else\n        a[i] = angles[i];\n#endif\n    }\n    \n    float cc = 0.0;\n    float start = 0.0;\n    float circle = length(p) - center.y * 0.9;    \n    \n    for(int i = 0; i < COUNT + CLOSED; i++)\n    {\n        float end;\n        vec4 pieColor;        \n\t\tif(i == COUNT)\n        {\n            end = 2.0 * PI;\n            pieColor = Gray;\n        }\n        else\n        {\n            end = start + a[i];\n            pieColor = colors[i];\n        }                \n    \t\n        float c = pie(p, start);    \n        float c2 = pie(p, end);    \n        float delta = end - start;\n        if(delta < PI)\n        \tcc = intersect(c,1.0 - c2);\n        else\n            cc = merge(c,1.0 - c2);\n        cc = intersect(circle, cc);\n        color = mix(color, pieColor, clamp(1.0-cc,0.0,1.0) );\n        start = end;\n    }    \n    \n\treturn cc;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord.xy + vec2(0.5);\n\tvec2 c = iResolution.xy / 2.0;\n\t\n\t// background\t\n\tvec4 col = vec4(0.2, 0.2, 0.4, 1.0);\n\tfloat dist = sceneDist(p, col);\n\n\tfragColor = clamp(col, 0.0, 1.0);\n}\n\n\n","name":"Image","description":"","type":"image"}]}