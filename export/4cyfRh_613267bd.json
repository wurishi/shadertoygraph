{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"cubemap","id":"4dX3zn","filepath":"/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define TAU 6.283185\n#define PI 3.141592\n#define S smoothstep\n#define T iTime\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nvec2 N(float angle){\n    return vec2(sin(angle), cos(angle));\n}\n\nfloat Hash21(vec2 p){\n    return fract(dot(p.x*64.33, p.y*74.242)*71.11+93.23);\n}\n\nfloat sdSphere(vec3 p, float r){\n    return length(p)-r;\n}\n\nfloat Bow(vec3 p){\n    p.zy *= Rot(PI/2.);\n    float box = sdBox(p, vec3(1., length(p.xy)/2., .2));\n    float b = sdBox(p, vec3(.3, .1, .3));\n    float s1 = sdSphere(p-vec3(.7, 0, 0), .75);\n    float s2 = sdSphere(p+vec3(.7, 0, 0), .75);\n    float s3 = sdSphere(p/2.*cos(p.x*20.), .4);\n    \n    float d = mix(min(s1, s2), box, .6);\n    d = min(d, mix(b, s3, .1));\n    \n    return d;\n}\n\nfloat GetDist(vec3 p) {\n    float d = Bow(p);\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(.001, 0);\n    vec3 n = GetDist(p) - \n        vec3(GetDist(p-e.xyy), GetDist(p-e.yxy),GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\nfloat N21(vec2 p){\n    return fract(dot(p.x*46.23, p.y*47.42)*47.411+93.23);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n    //uv *= Rot(length(uv)*T);\n    vec3 ro = vec3(0, 3, -3);\n    ro.yz *= Rot(-m.y*PI+1.);\n    ro.xz *= Rot(-m.x*TAU);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 1.5);\n    vec3 col = vec3(0);\n    \n    float d = RayMarch(ro, rd);\n\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n\n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        col = vec3(dif);\n        \n        col = n*.5+.5;\n        col *= texture(iChannel0, r).rgb*.5+.4;\n    }\n    \n    col *= sin(T+length(-uv)+vec3(2.134, 1.768, 4.923))*.5+.7;\n    \n    col = pow(col, vec3(.45));\t\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4cyfRh","date":"1733728764","viewed":38,"name":"Bow :)","username":"vanshika","description":"raymarching random shapes","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching"],"hasliked":0,"parentid":"4ftBWs","parentname":"raymarching :)"}}