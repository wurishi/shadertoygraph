{"ver":"0.1","info":{"id":"wldyz8","date":"1612733304","viewed":140,"name":"sphere_fog23","username":"edwardbraed","description":"Simple fog realization..","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","sphere","fog"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS_MARCH 64\n#define SPHERE_RADIUS 0.5\n#define FOG_COLOR vec3(0.5, 0.7, 0.0)\n\nvec2 calcAspect(vec2 iRes)\n{\n    vec2 aspect = vec2(float(iRes.x < iRes.y) * iRes.x / iRes.y,\n\t\t\t\t\t   float(iRes.y < iRes.x) * iRes.y / iRes.x);\n    aspect.x += float(aspect.x == 0.0);\n    aspect.y += float(aspect.y == 0.0);\n    return aspect;\n}\n\nvec3 raymarch(vec3 ro, vec3 rd, vec3 lp)\n{\n    float t = 0.0;\n    float d = 0.0;\n    vec3 color = vec3(0.0);\n    float depth = 0.0;\n    for(int x = 0; x < MAX_STEPS_MARCH; x++)\n    {\n        vec3 pos = ro + t * rd;\n        float d = length(pos) - SPHERE_RADIUS;\n        if(d < 0.001)\n        {\n            vec3 n = normalize(pos);\n            vec3 l = normalize(-lp - ro);\n\t\t\tvec3 v = normalize(pos - ro);\n\t\t\tvec3 r = normalize(reflect(-l, n));\n\t\t\tfloat spec = 0.7 * clamp(pow(max(dot(r, v), 0.0), 128.0), 0.0, 1.0);\n            float deff = dot(normalize(lp), n);\n            color = vec3(deff + spec);\n            depth = 1.0 - clamp(abs(ro.z - pos.z), 0.0, 1.0);\n            break;\n        }\n        \n        t += d;\n    }\n    \n    return mix(FOG_COLOR, color, depth);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // aspect ratio for correction rays..\n    vec2 aspect = calcAspect(iResolution.xy);\n    \n    // pseudo perspective pyramid (directions rays)\n    vec2 dTr = vec2(1.0, 1.0);\n    vec2 dTl = vec2(-1.0, 1.0);\n    vec2 dBr = vec2(1.0, -1.0);\n    vec2 dBl = vec2(-1.0, -1.0);\n    \n    // common uv ray direction\n    vec3 rd = vec3(mix(mix(dBl, dBr, uv.x),\n                       mix(dTl, dTr, uv.x), uv.y) * aspect,\n                   1.0);\n    \n    // origin direction (or pseudo camera position)\n    float roZ = (sin(iTime) + 1.0) * 0.5 * 0.25; // 0.0-0.25\n    vec3 ro = vec3(0.0, 0.0, -1.2 - roZ);\n    // light vector\n    vec3 lv = vec3(sin(iTime) * 5.0, 5.0, cos(iTime) * 5.0);\n    \n    vec3 rgb = raymarch(ro, rd, lv);\n\n    // Output to screen\n    fragColor = vec4(rgb, 1.0);\n}","name":"Image","description":"","type":"image"}]}