{"ver":"0.1","info":{"id":"ttSfz1","date":"1598299827","viewed":486,"name":"Minimalism #01","username":"Flopine","description":"First piece of a shader serie about minimalism, how to do small and quick artwork that are about composition and animation.\nI coded this one during a Twitch stream on my channel: https://www.twitch.tv/flopine","likes":30,"published":1,"flags":0,"usePreview":0,"tags":["2d","animation","minimalist"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan and slerpy for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n\n#define PI acos(-1.)\n#define TAU 6.28\n\n#define BPM (120./60.)\n#define time(speed) fract(iTime*speed)\n#define bouncy(speed) (abs(sqrt(sin(time(speed)*PI))))\n#define switchanim(speed) (floor(sin(time(speed)*TAU))+1.)\n#define animoutexpo(speed) easeOutExpo(time(speed))\n\n#define AAstep(thre, val) smoothstep(-.7,.7,(val-thre)/min(0.1,fwidth(val-thre)))\n#define circle(s,puv) AAstep(s, length(puv))\n#define square(s,puv) AAstep(s, max(abs(puv.x),abs(puv.y)))\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\nfloat easeOutExpo (float x) \n{\n    return x == 1. ? 1. : 1. - pow(2., -10. * x);\n}\n\nvec3 frame (vec2 uv)\n{\n    float timing = BPM/2.;\n    vec2 uu = uv;\n    uu.y += 0.65;\n    uu.y -= bouncy(timing)*1.3;\n    uu *= rot(time(timing)*PI/2.);\n    float f = (switchanim(timing/2.)<=0.) ? square(0.25, uu) : circle(0.255,uu);\n    float wave = sin(abs(uv.x*2.)-time(timing*PI)*TAU);\n    float ground = mix(uv.y+wave*0.15,uv.y,animoutexpo(timing));\n    f *= AAstep(-0.65,ground);\n    vec3 col = (f<=0.)?vec3(0.3,0.1,0.2):vec3(0.2,0.8,0.5);\n    return clamp((switchanim(timing/2.)<=0.) ? col : 1.-col,0.,1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(frame(uv));\n\n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}