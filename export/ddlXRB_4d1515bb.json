{"ver":"0.1","info":{"id":"ddlXRB","date":"1669149789","viewed":209,"name":"Fork The wall of-color","username":"jorge2017a2","description":"The wall of speakers\n\nsound:\nminutesunlimited\nhttps://soundcloud.com/minutesunlimited\n\n","likes":11,"published":1,"flags":64,"usePreview":1,"tags":["graphicdesign","cineshader"],"hasliked":0,"parentid":"DdSGWh","parentname":"The wall of speakers"},"renderpass":[{"inputs":[{"id":"Ml2SDW","filepath":"https://soundcloud.com/pmmsm/the-klf-3am-eternal-live-at?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","previewfilepath":"https://soundcloud.com/pmmsm/the-klf-3am-eternal-live-at?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//----------image\n//The wall of speakers ---por Created by yasuo in 2022-11-03\n///modificado por  jorge2017a2- 22-nov-2022\n//I just wanted to see how a color looks :P\n\n///music\n//The KLF - 3AM Eternal (Live at the S.S.L.) (Official Video)\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define MIN_DIST 0.001\n#define EPSILON 0.001\n#define Ka 0.5\n#define Kd 0.4\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material);\nvec3 getMaterial( vec3 pp, float id_material);\nvec3 light_pos1;  vec3 light_color1 ;\nvec3 light_pos2;  vec3 light_color2 ;\n\n#define SURF_DIST .0005\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define Tri(p,s,a) max(-dot(p,vec2(cos(-a),sin(-a))),max(dot(p,vec2(cos(a),sin(a))),max(abs(p).x-s.x,abs(p).y-s.y)))\n#define DF(a,b) length(a) * cos( mod( atan(a.y,a.x)+6.28/(b*8.0), 6.28/((b*8.0)*0.5))+(b-1.)*6.28/(b*8.0) + vec2(0,11) )\n#define ZERO (min(iFrame,0))\n\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(234.56,789.34));\n    p+=dot(p,p+34.56);\n    return fract(p.x+p.y);\n}\n\n#define opU2(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat sdTorus( vec3 p, vec2 t )\n{ vec2 q = vec2(length(p.xy)-t.x,p.z); return length(q)-t.y;}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat sdBox( vec3 p, vec3 b )\n{ vec3 q = abs(p) - b; return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\n// tweaked as the center aligned horizontal capsule. \nfloat sdHorizontalCapsule( vec3 p, float w, float r )\n{ p.x-= clamp( p.x, -w*0.5, w*0.5 ); return length( p ) - r;}\n\n\nfloat speaker(vec3 p){\n    vec3 prevP = p;\n    float d = sdBox(p, vec3(0.45,0.95,0.34))-0.03;\n    float d2 = length(p-vec3(0.,-0.2,-0.53))-0.38;  d = max(-d2,d);\n    d2 = sdTorus(p-vec3(0.,-0.2,-0.36),vec2(0.36,0.03));  d = min(d,d2);\n    d2 = sdTorus(p-vec3(0.,-0.2,-0.32),vec2(0.32,0.025)); d = min(d,d2);\n    d2 = length(p-vec3(0.,-0.25,-0.08))-0.12;  d = min(d,d2);\n    d2 = sdHorizontalCapsule(p-vec3(0.,-0.75,-0.36),0.6,0.06); d = max(-d2,d);\n    d2 = length(p-vec3(0.,0.55,-0.36))-0.2;  d = max(-d2,d);\n    d2 = sdTorus(p-vec3(0.,0.55,-0.36),vec2(0.2,0.03));  d = min(d,d2);\n    p.z-=-0.36; p.x = abs(p.x)-0.4; p.y = abs(p.y)-0.9;\n    d2 = length(p)-0.03; d = min(d,d2);\n    return d;\n}\n\nfloat speaker2(vec3 p){\n    vec3 prevP = p;\n    float d = sdBox(p, vec3(0.95,0.45,0.34))-0.03;\n    float d2 = sdBox(p-vec3(0.,0.,-0.35), vec3(0.9,0.4,0.01))-0.03;\n    d = max(-d2,d);\n    p.x = abs(p.x);\n    d2 = length(p-vec3(0.4,0.,-0.5))-0.36;  d = max(-d2,d);\n    d2 = sdTorus(p-vec3(0.4,0.,-0.3),vec2(0.34,0.03)); d = min(d,d2);\n    d2 = sdTorus(p-vec3(0.4,0.,-0.29),vec2(0.3,0.025)); d = min(d,d2);\n    d2 = length(p-vec3(0.45,0.,-0.08))-0.1; d = min(d,d2);\n    p.z-=-0.3;\n    p.x = abs(p.x)-0.86; p.y = abs(p.y)-0.36; d2 = length(p)-0.03;\n    d = min(d,d2);\n    return d;\n}\n\nfloat speaker3(vec3 p){\n    vec3 prevP = p;\n    float d = sdBox(p, vec3(0.95,0.95,0.34))-0.03;\n    float d2 = length(p-vec3(0.0,0.,-0.68))-0.66;  d = max(-d2,d);\n    d2 = sdTorus(p-vec3(0.0,0.,-0.35),vec2(0.64,0.05)); d = min(d,d2);\n    d2 = sdTorus(p-vec3(0.0,0.,-0.33),vec2(0.6,0.045)); d = min(d,d2);\n    d2 = length(p-vec3(0.0,0.,0.1))-0.2; d = min(d,d2);\n    d2 = sdTorus(p-vec3(0.0,0.,-0.3),vec2(0.56,0.035)); d = min(d,d2);    \n    d2 = sdTorus(p-vec3(0.0,0.,-0.24),vec2(0.52,0.035)); d = min(d,d2);        \n    d2 = sdTorus(p-vec3(0.0,0.,-0.19),vec2(0.47,0.035)); d = min(d,d2);  \n    d2 = abs(length(p.xy)-0.73)-0.07;\n    d = min(d,max((abs(p.z)-0.38),d2));\n    \n    p.z-=-0.37;\n    p.x = abs(p.x)-0.86; p.y = abs(p.y)-0.86;d2 = length(p)-0.03;d = min(d,d2);    \n    \n    p = prevP; p.z-=-0.37; p.xy = DF(p.xy,3.0); p.xy -= vec2(0.52);\n    d2 = length(p)-0.03;d = min(d,d2); \n    \n    p = prevP;\n    p.xy*=Rot(radians(sin(iTime)*120.));\n    p.z-=-0.37;\n    p.y=abs(p.y)-0.93;\n    d2 = Tri(p.xy,vec2(0.08),radians(45.));\n    d = min(d,max((abs(p.z)-0.02),d2));    \n    \n    p = prevP;\n    p.xy*=Rot(radians(90.+sin(iTime)*120.));\n    p.z-=-0.37;\n    p.y=abs(p.y)-0.93;\n    d2 = Tri(p.xy,vec2(0.08),radians(45.));\n    d = min(d,max((abs(p.z)-0.02),d2));      \n    \n    return d;\n}\n\nfloat changeSpeakers(vec3 p, float start, float speed){\n    vec3 prevP = p;\n    float endTime = 3.;\n    float t = iTime*speed;\n    float scenes[3] = float[](0.,1.,2.);\n    for(int i = 0; i<scenes.length(); i++){ scenes[i] = mod(scenes[i]+start,endTime); }\n    float scene = scenes[int(mod(t,endTime))];\n    \n    float d = 10.;\n    if(scene<1.) {\n        p.x=abs(p.x)-0.5;\n        d = speaker(p);\n    } else if (scene >= 1. && scene<2.){\n        p.y=abs(p.y)-0.5;\n        d = speaker2(p);\n    } else {\n        d = speaker3(p);\n    }\n    return d;\n}\n\nvec2 GetDist(vec3 p) \n{\n    vec2 res= vec2(9999.0, -1.0);      \n    vec3 prevP = p;\n    \n    p.y -=iTime*0.5;\n    vec2 id = floor(p.xy*0.5);\n    p.z-=3.;\n    p.xy = mod(p.xy,2.0)-1.0;\n\n    id*=.5;\n    float rand = Hash21(id);\n    \n    float d = 10.;\n    float opc=0.0;\n    \n    p.z-=rand*0.3;\n    if(rand<0.3)\n    {\n        d = changeSpeakers(p,1.,0.5+rand);\n        opc=8.0;\n    } \n    else if(rand>=0.3 && rand<0.7) \n    {\n        d = speaker3(p);\n        opc=23.0; //17 //23\n    } else {\n        p.x=abs(p.x)-0.5;\n        d = speaker(p);\n        if(1.5* sin(iTime)>0.0)\n        opc=14.0; //14\n        else\n        opc=61.0; //14\n        \n    }\n    \n    //return vec2(d,0);\n    res =opU2(res, vec2(d,opc));\n    \n    return res;\n}\n\n\nvec3 GetNormal(vec3 p)\n{   float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3(GetDist(p-e.xyy).x,GetDist(p-e.yxy).x,GetDist(p-e.yyx).x);\n    return normalize(n);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, int PMaxSteps)\n{   vec3 p;\n    vec2 hit, object=vec2(0.1,0.0);\n    for(int i=0; i <= PMaxSteps; i++) \n    { p = ro + rd*object.x;\n      hit = GetDist(p);\n      object.x += hit.x;\n      object.y = hit.y;\n      if (abs(hit.x) < EPSILON || object.x > MAX_DIST) break;\n    }    \n    return object;\n}\n\n\nfloat getSoftShadow(vec3 p, vec3 lightPos) {\n    float res = 9999.0;\n    float dist = 0.01;\n    float lightSize = 0.03;\n    for (int i = 0; i < MAX_STEPS; i++) {\n      float hit = GetDist(p + lightPos * dist).x;\n      res = min(res, hit / (dist * lightSize));\n      dist += hit;\n      if (hit < 0.0001 || dist > 60.0) break;\n    }\n    return clamp(res, 0.0, 1.0);\n}\n\nfloat occlusion(vec3 pos, vec3 nor)\n{   float sca = 2.0, occ = 0.0;\n    for(int i = 0; i < 10; i++) {    \n      float hr = 0.01 + float(i) * 0.5 / 4.0;\n      float dd = GetDist(nor * hr + pos).x;\n      occ += (hr - dd)*sca;\n      sca *= 0.6;\n    }\n    return clamp( 1.0 - occ, 0.0, 1.0 );    \n}\n\nvec3 lightingv3(vec3 normal,vec3 p, vec3 lp, vec3 rd, vec3 ro,vec3 lightColor, float t) \n{   vec3 lightPos=lp;\n    vec3 worldPos = p;\n    vec3 V = -rd;\n    vec3 N = normal;\n    vec3 L = normalize (lightPos - worldPos);\n    vec3 R = reflect (-L, N);\n    float lightDist = max(length(L), .001);\n    float atten=1.0 / (1.0 + lightDist * 0.125 + lightDist * lightDist * .05);\n    L /= (lightDist*atten);\n    float shadow = getSoftShadow(worldPos, L);// shadows\n        \n    float occ = occlusion(worldPos, N);// occ\n    vec3 ambient = Ka + Ka * dot(normal, vec3(0., 1., 0.))*lightColor;\n    ambient*=0.5;\n\n    vec3 fresnel =  lightColor *  pow(clamp(1.0 + dot(rd, N), 0.0, 1.0), 2.0);;\n    float diff= clamp(dot(N, L), 0.0, 1.0);\n    //diff = pow(diff, 0.75) * 4.0;   //antes\n    vec3 diffuse =  lightColor * diff;\n    float shininess=10.0;\n    float specular    = pow(max(dot(R, V), 0.0), shininess);\n\n    vec3 back = 0.5 * lightColor * clamp(dot(N, -L), 0.0, 1.0); // back\n    vec3 colOut = occ*lightColor*(ambient+diffuse*shadow+.25 +back) + vec3(.7,.9,1)*specular*specular;\n    return colOut;\n}\n\nvec3 getColorTextura( vec3 p, vec3 nor,  int i)\n{\tvec3 col;\n    if (i==100 )\n    { col=tex3D(iChannel0, p/32., nor); return col*2.0; }\n\tif (i==101 ) { return tex3D(iChannel1, p/32., nor); }\n\t\n}\n\n\nvec3 GetMaterial(vec3 p,  vec3 nor, vec3 ro,  vec3 rd, int id_color)\n{  \tvec3 colobj; \n     if (id_color<40) { colobj=getColor(int( id_color));  return colobj; }\n     \n   if (id_color==61)\n   { vec3 mat = vec3(0.3, 0.6, 1.0);\n     float f = smoothstep(0.5, 1., mod(length(p.xz), 2.3));\n     mat = mix(mat, vec3(1.0, 1.0, 1.0), 1.0 - f);\n     return mat;\n   } \n}\n\nvec3 linear2srgb(vec3 c) \n{ return mix(12.92 * c,1.055 * pow(c, vec3(1.0/1.8)) - 0.055, step(vec3(0.0031308), c)); }\n\nvec3 exposureToneMapping(float exposure, vec3 hdrColor) \n{ return vec3(1.0) - exp(-hdrColor * exposure); }\n\nvec3 ACESFilm(vec3 x)\n{   float a,b,c,d,e;\n    a = 2.51; b = 0.03; c = 2.43;d = 0.59; e = 0.14;\n    return (x*(a*x+b))/(x*(c*x+d)+e);\n}\n\n\nvec3 Render(vec3 ro, vec3 rd)\n{  vec3 col = vec3(0);\n  vec3 p;\n     vec2 hit=RayMarch(ro,rd, MAX_STEPS);\n      if(hit.x<MAX_DIST)\n       {   p = (ro + rd * hit.x );\n        vec3 nor=GetNormal(p);\n        vec3 colobj;\n        colobj=GetMaterial( p, nor, ro, rd,  int(hit.y));\n        vec3 result;\n         result= lightingv3(nor, p,light_pos1, rd,ro,colobj,hit.x)*light_color1;\n        result+= lightingv3(nor, p,light_pos2,rd, ro,colobj,hit.x)*light_color2;\n        col= result/2.0;\n        col= (ACESFilm(col)+linear2srgb(col)+col+ exposureToneMapping(3.0, col))/4.0 ;        \n    }\n    \n   return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n   \n    float t0=iTime;\n \tlight_pos1= vec3(-10.0, 55.0,-15.0); light_color1=vec3( 1.0,1.0,1.0 );\n \tlight_pos2= vec3(10.0, 0.0, -15.0 ); light_color2 =vec3( 1.0,1.0,1.0 ); \n    \n   vec3 ro=vec3(-3.0+abs(3.0*sin(t0*0.5)),0.5-2.5*sin(t0),0.0+2.0*sin(t0*1.2));\n   //ro= getMouse(ro);  \n    vec3 rd=normalize( vec3(uv.x,uv.y,1.0));\n   \n    //light_pos1+=ro;\n    //light_pos2+=ro;\n    vec3 col= Render( ro,  rd);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//-------common\n#define PI 3.14159265\n\nstruct Ray\n{   vec3 ro; // origin\n    vec3 rd; // direction\n};\n\nvec3 hsv(vec3 c)\n{ vec4 k=vec4(1.,2./3.,1./3.,3.);\n  vec3 p=abs(fract(c.xxx+k.xyz)*6.-k.www);\n  return c.z*mix(k.xxx,clamp(p-k.xxx,0.,1.),c.y);\n}\n\n///Gracias a Shane...16-jun-2020\nvec3 tex3D( sampler2D tex, in vec3 p, in vec3 n ){    \n  n = max(n*n - .2, .001); // max(abs(n), 0.001), etc.\n  n /= dot(n, vec3(1)); \n  vec3 tx = texture(tex, p.yz).xyz;\n  vec3 ty = texture(tex, p.zx).xyz;\n  vec3 tz = texture(tex, p.xy).xyz;\n  return mat3(tx*tx, ty*ty, tz*tz)*n; \n}\n\nfloat random(vec2 uv) \n{ return fract(sin(dot(uv, vec2(12.9898, 78.233)) ) * 43758.5453); }\n\nvec3 checkerBoard(float u, float v, float interval)\n{ float uu = floor(u/interval*2.0);\n  float vv = floor(v/interval*2.0);\n  float p =mod(uu+vv,2.0);\n  return vec3(0.1+0.9*p);\n}\n\nvec3  Arrcolores[] = vec3[] (\nvec3(0,0,0),  //0\nvec3(1.,1.,1.), //1\nvec3(1,0,0),  //2\nvec3(0,1,0),   //3\nvec3(0,0,1),   //4\nvec3(1,1,0),  //5\nvec3(0,1,1),  //6 \nvec3(1,0,1),   //7\nvec3(0.7529,0.7529,0.7529),  //8\nvec3(0.5,0.5,0.5),  //9\nvec3(0.5,0,0),   //10\nvec3(0.5,0.5,0.0),  //11\nvec3(0,0.5,0),   //12\nvec3(0.5,0,0.5),  //13\nvec3(0,0.5,0.5),  //14\nvec3(0,0,0.5),    //15\nvec3(1.0, 0.8, 0.737),  //16\nvec3(0.8, 0.8, 0.8),  //17\nvec3(0.5, 0.5, 0.8),  //18\nvec3(1, 0.5, 0),      //19\nvec3(1.0, 1.0, 1.0),  //20\nvec3(0.968,0.6588,  0.721),//21\nvec3(0, 1, 1), //22 \nvec3(0.333, 0.803, 0.988),//23\nvec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 ),//24 \nvec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ),//25  \nvec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ),//26\nvec3(0.1, 0.5, 1.0),//27   \nvec3(0.0, 0.6, 0.0),//28 \nvec3(0.1,0.1,0.7), //29\nvec3(0.99, 0.2, 0.1), //30\nvec3(.395, .95, 1.), //31\nvec3(0.425, 0.56, 0.9), //32\nvec3(0.7333, 0.1412, 0.1412), //33\nvec3(0.1843, 0.3333, 0.1843), //34\n vec3(0.6549, 0.6549, 0.9922), //35\n vec3(0.8549, 0.8549, 0.8549)  //36\n);\n\nvec3 getColor(int i)\n{   //if (i==-2 ) {return mObj.color; }       \n    if (i>-1 )  return Arrcolores[i];\n}\n","name":"Common","description":"","type":"common"}]}