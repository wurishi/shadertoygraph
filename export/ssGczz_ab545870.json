{"ver":"0.1","info":{"id":"ssGczz","date":"1654319473","viewed":169,"name":"Metallic series","username":"ChunderFPV","description":"The metallic ratios described using circles.  You can find the ratios along x.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["math","phi","loopless","metallic","ratio"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// metallic ratio equation: (n+sqrt((n*n)+4))/2\n// n/2 = x offset | sqrt((n*n)+4) = circle diameter\n// circle at xy: n = ((x*x+y*y)-1)/x\n\n#define SCALE 8.0\n#define R iResolution.xy\n#define PI radians(180.0)\n#define C(u) min(length(u), 1.0/length(u))\n#define PT(u,r) smoothstep(0.0, r, r-length(u))\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    vec4 m = iMouse; m.xy = (m.xy-0.5*R)/R.y*SCALE;\n    vec2 uv = (U-0.5*R)/R.y*SCALE;\n    float x = uv.x;\n    float y = uv.y;\n    float lu = length(uv);\n    float px = length(fwidth(uv));\n    vec3 c = vec3(0);\n    \n    float n = (x*x+y*y-1.0)/x; // circle at xy\n    float g = min(abs(n), 1.0/abs(n)); // gradient\n    vec3 gold = vec3(1.0, 0.6, 0.0)*g;\n    vec3 blue = vec3(0.3, 0.5, 0.9)*(1.0-g);\n    vec3 rgb = max(gold*lu, blue);\n    \n    n = round(n);\n    float xo = n/2.0; // x offset\n    float r = sqrt(n*n+4.0)/2.0; // radius\n    vec2 u = vec2(x-xo, y)/r; // coords\n    float mrc = pow(C(u), 40.0+pow(n, 2.0)); // circles\n    c += mrc*rgb*pow(g, 0.75)*4.0; // blend\n    c += pow(C(lu), 12.0); // unit circle\n    \n    if (m.z > 0.0) // on click\n    {\n        vec2 xyg = abs(fract(uv+0.5)-0.5)/px; // xy grid\n        c = mix(c, vec3(0), 1.0-min(min(xyg.x, xyg.y), 1.0)); // lines\n        c = mix(c, vec3(0.75), 1.0-min(max(xyg.x/2.0, xyg.y/2.0), 1.0)); // points\n    }\n    \n    float mr = (abs(n)+sqrt((n*n)+4.0))/2.0; // metallic ratios\n    c += PT(vec2(abs(x)-mr, y), 0.08); // mr points along x\n    \n    float mn = (m.x*m.x+m.y*m.y-1.0)/m.x; // n from mouse\n    if (m.z < 1.0) mn = tan(iTime);\n    float ml = sqrt(mn*mn+4.0)/2.0; // radius\n    c.g += pow(C(vec2(x-(mn/2.0), y)/ml), 80.0);\n        \n    c += PT(vec2(x-mn, abs(y)-1.0), px*4.0); // points on cot\n    float a = atan(1.0/mn);\n    vec2 cs = vec2(cos(a), sin(a));\n    vec2 xys = vec2(cs.y*cs.x, cs.y*cs.y); // sin(a) on slope\n    if (m.x != 0.0) c += PT(vec2(x+xys.x, abs(y)-xys.y), 0.08);\n    \n    O = vec4(c*sqrt(c)*1.6, 1.0);\n}","name":"Image","description":"","type":"image"}]}