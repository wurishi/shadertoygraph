{"ver":"0.1","info":{"id":"WscyDn","date":"1600716782","viewed":407,"name":"11 - Line grid waves","username":"Krabcode","description":"Expanding on ideas from The Universe Within by Art of Code on Youtube","likes":19,"published":1,"flags":0,"usePreview":0,"tags":["grid","line","sin","rgb"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"10 - Line grid\" by Krabcode. https://shadertoy.com/view/3s3yR7\n// 2020-09-21 17:53:36\n\n// Based on ideas from LiveCoding - The Universe Within by Art of Code\n// https://youtu.be/3CycKKJiwis\n\n#define tau 6.28\n\nfloat scl = 15.;\n\nmat2 rotate(float rad){\n    float c = cos(rad);\n    float s = sin(rad);\n    return mat2(c, -s, s, c);\n}\n\n// cubic pulse by iq\nfloat cubicPulse( float c, float w, float x )\n{\n    x = abs(x - c);\n    if( x>w ) return 0.0;\n    x /= w;\n    return 1.0 - x*x*(3.0-2.0*x);\n}\n\n// 2D sdf by iq\nfloat sdOrientedBox( in vec2 p, in vec2 a, in vec2 b, float th )\n{\n    float l = length(b-a);\n    vec2  d = (b-a)/l;\n    vec2  q = (p-(a+b)*0.5);\n    q = mat2(d.x,-d.y,d.y,d.x)*q;\n    q = abs(q)-vec2(l,th)*0.5;\n    return length(max(q,0.0)) + min(max(q.x,q.y),0.0);    \n}\n\nfloat sdRoundedLine(in vec2 p, in vec2 a, in vec2 b, float weight, float roundedness){\n    return sdOrientedBox(p, a, b, weight)-roundedness;\n}\n\nfloat sdGridLine(vec2 cellPos, vec2 a, vec2 b){\n    float lineLength = distance(a,b);\n    float line = sdOrientedBox(cellPos, a, b, 0.);\n    float smallLength = 0.0;\n    float bigLength = 1.5;\n    float closeness = smoothstep(bigLength, smallLength, lineLength); \n    float thickness = 0.05;\n    return closeness*smoothstep(thickness, 0., line);\n}\n\n// Hash without Sine\n// David Hoskins.\n\nfloat hash12(vec2 p)\n{\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 getGridPoint(vec2 id){\n    float t = float(iFrame) * .001;\n    float d = smoothstep(scl*.33, 0., length(id));\n    float theta = tau*(t+731.154*hash12(id));\n    float x = d*0.4*cos(theta);\n    float y = d*0.4*sin(theta);\n    vec2 wave = (1.-d)*.03*id*sin(length(id)-t*scl*.66);\n\treturn vec2(x,y)+wave;\n}\n\nfloat allLinesOnThisCell(vec2 cellPos, vec2[9] points){\n \tfloat sum = 0.;\n    sum += sdGridLine(cellPos, points[4], points[0]);\n    sum += sdGridLine(cellPos, points[4], points[1]);\n    sum += sdGridLine(cellPos, points[4], points[2]);\n    sum += sdGridLine(cellPos, points[4], points[3]);\n    sum += sdGridLine(cellPos, points[4], points[5]);\n    sum += sdGridLine(cellPos, points[4], points[6]);\n    sum += sdGridLine(cellPos, points[4], points[7]);\n    sum += sdGridLine(cellPos, points[4], points[8]);\n    sum += sdGridLine(cellPos, points[1], points[3]);\n    sum += sdGridLine(cellPos, points[1], points[5]);\n    sum += sdGridLine(cellPos, points[3], points[7]);\n    sum += sdGridLine(cellPos, points[5], points[7]);   \n    return sum;\n}\n\nvec2[9] createPointMatrix(vec2 cellId){\n \tvec2[9] pointMatrix;\n    float range = 1.;\n    int i = 0;\n    for(float x = -range; x <= range; x++){\n        for(float y = -range; y <= range; y++){\n            vec2 offset = vec2(x,y);\n            pointMatrix[i] = getGridPoint(cellId + offset) + offset;\n            i++;\n        }\n    }   \n    return pointMatrix;\n}\n\nfloat render(vec2 uv){\n    float pct = 0.12;\n    vec2 cellPos = fract(uv * scl) - .5;    \n    vec2 cellId = floor(uv * scl) + .5;\n    vec2[9] pointMatrix = createPointMatrix(cellId);\n    return allLinesOnThisCell(cellPos, pointMatrix);\n}\n\nvec3 gammaCorrection(vec3 rgb){\n    float gamma = 2.2;\n    return pow(max(rgb, 0.), vec3(1.0/gamma));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tvec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 colorOffset = normalize(uv)*.003*smoothstep(0.2, 0.5, length(uv));\n    vec3 col = vec3(\n        render(uv-colorOffset),\n        render(uv),\n        render(uv+colorOffset));\n    fragColor = vec4(gammaCorrection(col), 1.);\n}\n","name":"Image","description":"","type":"image"}]}