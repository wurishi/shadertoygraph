{"ver":"0.1","info":{"id":"NdtczX","date":"1653842469","viewed":110,"name":"Flying snake-like skinned tube","username":"axelduch","description":"I'm pretty uninspired, and using cos/sin what a shame","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 500\n#define MAX_DIST 50.f\n#define SURF_DETECT .005f\n#define EPSILON 0.4f\n\n\nvec3 grass = vec3(.8, .35, 0.);\n\n\nfloat smin( float a, float b, float k )\n{\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min( a, b ) - h*h*k*(1.0/4.0);\n}\n\n\nfloat sphere(vec3 p, float r) {\n    return length(p) - r;\n}\n\n\nfloat dist_field(vec3 p) {\n    float texel = pow(texture(iChannel0, mod(iTime, 10.) + p.xz * .1).x * .3, 2.) - cos(40.) * 2.4;\n    \n    return min(\n        sphere(vec3(mod(5. + 2. * cos(iTime * .2) * (1. - p.x + p.z + p.y), .4) + .5, sin(iTime * p.x * 0.4) * .05 + (p.x + p.y - 8.), p.z * 1. - 1.), 2.),\n        mix(\n            p.y + 1.5,\n               -texel * sphere(vec3(p.x, p.y - 1., p.z- 2.), 1.),\n            .35\n        )\n    );\n    \n}\n\n\nfloat dist_light(vec3 light_pos, vec3 p) {\n    return length(light_pos - p) - .1;\n}\n\n\nfloat ray_march(vec3 ro, vec3 rd) {\n    float dist = 0.;\n    \n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd * dist;\n        float _dist = dist_field(p);\n\n        dist += _dist;\n\n        if (_dist <= SURF_DETECT || dist > MAX_DIST) break;\n    }\n\n    return dist;\n}\n\n\nvec3 get_normal(vec3 p) {\n    vec2 e = vec2(EPSILON, 0.);\n    float d = dist_field(p);\n    vec3 n = vec3(\n        d - dist_field(p - e.xyy),\n        d - dist_field(p - e.yxy),\n        d - dist_field(p - e.yyx)\n    );\n    \n    return normalize(n);\n}\n\n\nfloat get_light(vec3 light_pos, vec3 p, float spec_pow) {\n    vec3 l = normalize(light_pos - p);\n    vec3 n = get_normal(p);\n    \n    float ambient = .2;\n    float d = ray_march(p+n*EPSILON*2., l);\n    \n    float diffuse = clamp(dot(n, l), 0., 1.);\n    float specular = .0;\n    \n    if (d < length(light_pos - p)) {\n        diffuse *= .1;\n    } else {\n        specular = pow(max(dot(l, reflect(-l, n)), 0.), spec_pow); \n    }\n\n    return ambient + diffuse + specular;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    // Time varying pixel color\n    vec3 sky = vec3(.4, .55, .8);\n    vec3 col = grass + vec3(uv.y);\n    vec3 eye = vec3(cos(iTime),sin(iTime * 0.1) * -2. + 10.,-7.);\n    vec3 eye_dir = vec3(uv, 1.);\n    float d = ray_march(eye, eye_dir);\n    vec3 p = eye + eye_dir * d;\n    \n    vec3 light_pos = vec3(1., 18., -10. + sin(iTime) * 2.);\n    float light = get_light(light_pos, p, 1024.);\n\n    \n    if (d <= MAX_DIST) {\n       col *= light;\n    } else {\n        col = sky;\n    }\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}