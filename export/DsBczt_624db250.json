{"ver":"0.1","info":{"id":"DsBczt","date":"1688024926","viewed":25,"name":"HelloWorldRayMarch","username":"ma1069","description":"just following a tutorial","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["test","raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5*(a-b)/k, 0.0, 1.0);\n    return mix(a, b, h) - k*h*(1.0-h);\n}\n\n\nfloat GetDist(vec3 p) {\n\n    float d = p.y; //Distance to plane\n    vec4 s = vec4(0, 1, 6, 1);\n    \n    float dS = 0.;\n    for (float mul = -1.; mul < 1.1; mul += .9) {\n        s.z = 10.+1.6*cos(mul*iTime);\n        s.x = 1.6*(1.-sin(mul*iTime))-2.;\n        s.y = 1. + mul + sin(iTime);\n    \n        dS = length(p-s.xyz)-s.w;\n    \n        d = smin(d, dS, (1.2 + cos(iTime)));\n    }\n    \n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.;\n    \n    for (int i=0; i<MAX_STEPS; i++) {\n        vec3 p = ro + dO*rd;\n        float dS = GetDist(p);\n        dO += dS;\n        if (dS<SURF_DIST || dO > MAX_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(0, 5, 6);\n    lightPos.xz += vec2(sin(iTime), cos(iTime))*2.;\n    vec3 l = normalize(lightPos - p);\n    vec3 n = GetNormal(p);\n\n    float dif = clamp(dot(n, l),0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l);\n    if (d<length(lightPos-p)) { //Shadows are EASY\n        dif *= .8;\n    }\n    \n    return dif;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n\n    \n    vec3 ro = vec3(0, 1, 0);\n    vec3 rd = normalize(vec3(uv.xy, 1));\n    \n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd * d;\n    \n    float dif = GetLight(p);\n    col = vec3(dif);\n    \n    fragColor = vec4(col,1.0);\n}\n\n\n","name":"Image","description":"","type":"image"}]}