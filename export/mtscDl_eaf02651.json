{"ver":"0.1","info":{"id":"mtscDl","date":"1692366932","viewed":138,"name":"Metablob Spheres","username":"gunthern","description":"Raymarched smooth minimum of spheres with different material properties. ","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","sdf","metaballs","cloud","metaball","smoothmin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Thanks @elenzil for the advice on improving things by moving material properties outside the raymarching \n// loop and not using an array for the spheres in the getDist function.\n\n#define MAX_STEPS 100\n#define  MAX_DIST 100.0\n#define SURFACE_DIST 0.001\n\n// Surface constructor\nstruct Surface {\n\n    float dist;\n    vec3 col;\n    float spec;\n    float met;\n    vec3 refl;\n    vec3 refr;\n    vec3 emis;\n    \n};\n\n// Smooth min\nSurface smin(Surface a, Surface b, float k) {\n    \n    float h = clamp(0.5 + 0.5*(b.dist - a.dist)/k, 0.0, 1.0);\n\n    float d = mix(b.dist, a.dist, h) - k*h*(1.0-h);\n    \n    return Surface(\n        d,\n        mix(b.col, a.col, h),\n        mix(b.spec, a.spec, h),\n        mix(b.met, a.met, h),\n        mix(b.refl, a.refl, h),\n        mix(b.refr, a.refr, h),\n        mix(b.emis, a.emis, h)\n    );\n    \n}\n\n// Sphere sdf from https://iquilezles.org/articles/distfunctions/\nSurface sdSphere(vec3 p, float r, vec3 c, vec3 col, float spec, float met, vec3 refl, vec3 refr, vec3 emis) {\n    \n    return Surface(length(p-c.xyz)-r, col, spec, met, refl, refr, emis);\n    \n}\n\n// Thanks @elenzil for this improved getDist without using array\nSurface GetDistColor(vec3 p) {\n   \n    vec3 v0 = vec3(0.0);\n    Surface meta = Surface(1e9, v0, 0.0, 0.0, v0, v0, v0);\n    \n    float k = 0.75 + sin(iTime*0.33)*0.35;\n    \n    meta = smin(meta, sdSphere(\n        p,\n        0.5, // radius\n        vec3(-0.9+cos(iTime*0.62), sin(iTime)*0.75, 4.0 + sin(iTime*0.9)*0.25), // position\n        vec3(1.0, 0.4, 1.0), // base color\n        500.0, // specularity\n        1.0, // metalness\n        vec3(1.0), // reflection color\n        vec3(0.0), // refraction color\n        vec3(0.0) // emissive color\n    ), k);\n    \n    meta = smin(meta, sdSphere(\n        p,\n        0.5, // radius\n        vec3(0.9+sin(iTime*0.9), cos(iTime), 4.0 + cos(iTime*0.72)*0.25), // position\n        vec3(0.0, 0.9, 0.3), // base color\n        100.0, // specularity\n        0.0, // metalness\n        vec3(0.0), // reflection color\n        vec3(0.0, 0.5, 0.9), // refraction color\n        vec3(0.0, 0.1, 0.3) // emissive color\n    ), k);\n    \n    meta = smin(meta, sdSphere(\n        p,\n        0.5, // radius\n        vec3(cos(iTime)*2.0, sin(iTime*0.81)*0.75, 4.0 + cos(iTime*0.92)*0.25), // position\n        vec3(1.0, 0.3, 0.3), // base color\n        100.0, // specularity\n        1.0, // metalness\n        vec3(0.0), // reflection color\n        vec3(0.0), // refraction color\n        vec3(1.0, 0.3, 0.1) // emissive color\n    ), k);\n    \n    meta = smin(meta, sdSphere(\n        p,\n        0.5, // radius\n        vec3(sin(iTime*0.5)*2.0, cos(iTime*0.5), 4.0 + sin(iTime*0.6)*0.25), // position\n        vec3(0.3, 1.0, 0.0), // base color\n        100.0, // specularity\n        0.0, // metalness\n        vec3(0.0), // reflection color\n        vec3(0.0), // refraction color\n        vec3(0.0) // emissive color\n    ), k);\n    \n    meta = smin(meta, sdSphere(\n        p,\n        0.5, // radius\n        vec3(sin(iTime*0.75)*2.0, cos(iTime*0.35), 4.0 + sin(iTime*0.45)*0.25), // position\n        vec3(1.0, 0.4, 0.0), // base color\n        500.0, // specularity\n        0.0, // metalness\n        vec3(1.0, 0.0, 0.0), // reflection color\n        vec3(0.0), // refraction color\n        vec3(0.0, 0.0, 0.4) // emissive color\n    ), k);\n    \n    meta = smin(meta, sdSphere(\n        p,\n        0.5, // radius\n        vec3(sin(iTime*0.46)*2.5, cos(iTime*0.85), 4.0 + sin(iTime*0.85)*0.35), // position\n        vec3(0.0), // base color\n        100.0, // specularity\n        0.9, // metalness\n        vec3(0.2), // reflection color\n        vec3(0.0), // refraction color\n        vec3(0.7, 0.5, 0.0) // emissive color\n    ), k);\n    \n    \n    return meta;\n    \n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDistColor(p).dist;\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n        GetDistColor(p-e.xyy).dist,\n        GetDistColor(p-e.yxy).dist,\n        GetDistColor(p-e.yyx).dist);\n        \n    return normalize(n);\n}\n\nSurface RayMarch(vec3 ro, vec3 rd){\n\n    float dO = 0.0;\n    \n    Surface distColor;\n    vec3 p;\n    \n    for (int i=0; i<MAX_STEPS; i++){\n        p = ro + rd*dO;\n        distColor = GetDistColor(p);\n        float dS = distColor.dist;\n        dO += dS;\n        if (dO>MAX_DIST || dS<SURFACE_DIST) break;\n    }\n    \n    vec3 col = distColor.col; \n    float spec = distColor.spec;\n    float met = distColor.met;\n    vec3 refl = distColor.refl * pow(texture(iChannel0, reflect(rd, GetNormal(p))).xyz, vec3(2.2));\n    vec3 refr = distColor.refr * texture(iChannel0, refract(rd, GetNormal(p), 0.5)).xyz;\n    vec3 emis = distColor.emis;\n    \n    return Surface(dO, col, spec, met, refl, refr, emis);\n    \n}\n\nvec3 GetLight(vec3 p, vec3 c, vec3 lp) {\n    vec3 l = normalize(lp - p);\n    vec3 n = GetNormal(p); \n    \n    float diff = dot(n, l);\n    float d = RayMarch(p+n*SURFACE_DIST*2.0, l).dist;\n    if (d<length(lp-p) && d>0.01) diff *= 0.01;\n    \n    return diff * c;\n}\n\nvec3 GetSpecular(vec3 p, vec3 c, vec3 lp, vec3 ro, float sp) {\n    \n    vec3 l = normalize(lp - p);\n    vec3 h = normalize(l + normalize(ro - p));\n    vec3 n = GetNormal(p);\n    \n    return c * pow(max(0.0, dot(n, h)), sp);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    //ray origin\n    vec3 ro = vec3(0.0);\n    //ray direction\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1.0));\n    \n    // Raymarch and get diffuse color\n    Surface rs = RayMarch(ro, rd);\n    float d = rs.dist;\n    \n    vec3 p = (ro + rd * d);\n    \n    // diffuse lighting\n    vec3 diff = GetLight(p, vec3(1.0), vec3(2.0, 5.0, 2.0));\n    // ambient lighting\n    diff = max(diff, vec3(0.1));\n    \n    // specular\n    vec3 spec = GetSpecular(p, vec3(1.0), vec3(2.0, 5.0, 2.0), ro, rs.spec);\n    \n    // background\n    //vec3 background = texture(iChannel0, vec3(uv.x, uv.y, 1.0)).xyz;\n    vec3 background = vec3(0.0);\n    \n    // sceme color\n    vec3 color = rs.dist < MAX_DIST ? min(clamp(diff * rs.col + mix(spec, spec * rs.col, rs.met) + rs.refr*(1.0-rs.met), 0.0, 1.0) + mix(rs.refl, rs.refl * rs.col, rs.met) + rs.emis, 1.0) : background;\n    \n    //fragColor = vec4(diff, 1.0);\n    //fragColor = vec4(rs.col, 1.0);\n    //fragColor = vec4((spec), 1.0);\n    //fragColor = vec4(vec3(rs.met), 1.0);\n    //fragColor = vec4(rs.refl, 1.0);\n    //fragColor = vec4(rs.refr, 1.0);\n    //fragColor = vec4(rs.emis, 1.0);\n    \n    fragColor = vec4(color, 1.0);\n    \n}","name":"Image","description":"","type":"image"}]}