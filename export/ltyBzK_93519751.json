{"ver":"0.1","info":{"id":"ltyBzK","date":"1543146564","viewed":251,"name":"noise mountain","username":"ukeyshima","description":"noiseMountain","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float random(vec3 p){\n    return fract(sin(dot(p.xyz,vec3(12.9898,0.0,78.233)))*36.253);\n}\nfloat valueNoise(vec3 p){\n    vec3 i=vec3(floor(p.x),p.y,floor(p.z));\n    vec3 f=vec3(fract(p.x),p.y,fract(p.z));\n    float f1=random(i);\n    float f2=random(i+vec3(1.0,0.0,0.0));\n    float f3=random(i+vec3(0.0,0.0,1.0));\n    float f4=random(i+vec3(1.0,0.0,1.0));\n    // f=smoothstep(0.0,1.0,f);\n    f=f*f*(3.0-2.0*f);\n    return (f1*(1.0-f.x)+f2*f.x)*(1.0-f.z)+(f3*(1.0-f.x)+f4*f.x)*f.z;\n}\nfloat octaveValueNoise(vec3 p){\nfloat value=0.0;\nfloat maxValue=0.0;\nfor(float i=0.0;i<9.0;i++){\n    value+=pow(0.5,i)*valueNoise(vec3(p.x*pow(2.0,i),p.y,p.z*pow(2.0,i)));\n    maxValue+=pow(0.5,i);\n}\nreturn value/maxValue;\n}\n\nfloat mountainDistFunc(vec3 p){\n    vec3 pos=vec3(0.0,1.0,0.0);\n    vec3 n=normalize(pos);\n   return dot(p,n)/5.0+octaveValueNoise(p)/3.0;\n}\n\nfloat distFunc(vec3 p){\n    float obj1;\n    obj1=mountainDistFunc(p);\n    return obj1;\n}\n\nvec3 genNormal(vec3 p){\n    float d=0.001;\n    return normalize(vec3(\n        distFunc(p+vec3(d,0.0,0.0))-distFunc(p+vec3(-d,0.0,0.0)),\n        distFunc(p+vec3(0.0,d,0.0))-distFunc(p+vec3(0.0,-d,0.0)),\n        distFunc(p+vec3(0.0,0.0,d))-distFunc(p+vec3(0.0,0.0,-d))\n        ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 p = (fragCoord.xy*2.0 - iResolution.xy) / min(iResolution.x,iResolution.y);   \n    p*=5.0; \n    vec3 lightPos=vec3(30.0,30.0,0.0);\n    vec3 ambientColor=vec3(0.1);\n    vec3 cPos=vec3(0.0,0.0,10.0-iTime/3.0);\n    vec3 cDir=vec3(0.0,-0.5,-1.0);\n    vec3 cUp=vec3(0.0,1.0,0.0);\n    vec3 cSide=cross(cDir,cUp);    \n    float targetDepth=1.0;\n    vec3 ray=normalize(cSide*p.x+cUp*p.y+cDir*targetDepth);\n    float distance=0.0;\n    float rLen=0.0;\n    vec3 rPos=cPos;\n    vec3 color=vec3(242.0/255.0,242.0/255.0,232.0/255.0);\n    float maxDist=100.0;\n    for(int i=0;i<70;i++){\n        distance=distFunc(rPos);\n        if(abs(distance)<0.09){\n            color=vec3(octaveValueNoise(vec3(rPos.x,0.0,0.0)),octaveValueNoise(vec3(rPos.x,0.0,rPos.z)),octaveValueNoise(vec3(0.0,0.0,rPos.z)));\n            vec3 normal=genNormal(rPos);\n            color=color*vec3(clamp(dot(lightPos,normal),0.0,1.0))+ambientColor+rLen/30.0;\n            break;\n        }\n        rLen+=distance;\n        rPos=cPos+ray*rLen;\n        if(rLen>maxDist){\n            break;\n        }\n    }    \n    fragColor=vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}