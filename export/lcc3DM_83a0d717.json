{"ver":"0.1","info":{"id":"lcc3DM","date":"1711815611","viewed":86,"name":"amanatidesWoo voxels","username":"martin_B","description":" ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["voxel","amanatideswoo","amantatides"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rr","filepath":"/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","previewfilepath":"/media/ap/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","type":"volume","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define GRID_MIN vec3(-16)\n#define GRID_MAX vec3(16)\n#define EPSYLON 1./128.\n\nbool intersect(vec3 ro, vec3 rd, vec3 bMin, vec3 bMax, out float tMin, out float tMax) {\n    vec3 t0 = (bMin - ro) / rd;\n    vec3 t1 = (bMax - ro) / rd;\n    \n    vec3 tmp_tMax = (max(t0, t1));\n    vec3 tmp_tMin = (min(t0, t1));\n    \n    tMin = max(max(tmp_tMin.x, tmp_tMin.y), tmp_tMin.z);\n    tMax = min(min(tmp_tMax.x, tmp_tMax.y), tmp_tMax.z);\n    \n    return tMin < tMax;\n}\n\nvec4 trace(vec3 ro, vec3 rd) {\n    const vec3 GRID_SIZE = abs(GRID_MAX-GRID_MIN);\n    const int MAX_STEP = int(ceil(length(GRID_SIZE)));\n\n    float tMin;\n    float tMax;\n    \n    bool ray_intersects_box = intersect(ro, rd, GRID_MIN, GRID_MAX, tMin, tMax);\n    if (!ray_intersects_box) return vec4(0.);\n    \n    \n    vec3 rayStart = ro + rd * tMin;\n    vec3 rayEnd = ro + rd * tMax;\n    \n    rayStart = clamp(rayStart, GRID_MIN, GRID_MAX-1.);\n    rayEnd = clamp(rayEnd, GRID_MIN, GRID_MAX-1.);\n    \n    vec3 index = floor(rayStart);\n    vec3 endIndex = floor(rayEnd);\n    \n    vec3 steps = sign(rd);\n    \n    vec3 tDelta = abs(1./rd);\n    vec3 tMaxes = (1.-fract(steps*rayStart)) * tDelta;\n    \n    vec4 o = vec4(vec3(0.), 1.);\n    \n    for (int i = 0; i < MAX_STEP; i++) {\n        vec4 c = textureLod(iChannel0, (index-(GRID_MIN))/GRID_SIZE,.0);\n        \n        bvec3 a = lessThan(tMaxes, tMaxes.yzx);\n        bvec3 b = lessThanEqual(tMaxes, tMaxes.zxy);\n        vec3 select = vec3(a) * vec3(b);\n        \n        o.rgb += (c.rgb * c.a * o.a);\n        o.a *= (1.-c.a);\n\n        if(o.a <= EPSYLON) break;\n\n        if (!any(notEqual(index, endIndex))) break;\n        \n        index += select * steps;\n        tMaxes += select * tDelta;\n    }\n    \n    return vec4(o);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy/2.)/min(iResolution.x, iResolution.y);\n    \n    float angle = radians(iTime*25.);\n    \n    mat3x3 rot = mat3x3(cos(angle), 0, sin(angle),0, 1, 0,-sin(angle), 0, cos(angle));\n    \n    vec4 o = trace(-vec3(0, 0, 64)*rot, normalize(vec3(uv, 1.))*rot);\n    \n    fragColor = vec4(o);\n}","name":"Image","description":"","type":"image"}]}