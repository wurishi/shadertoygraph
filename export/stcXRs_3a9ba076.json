{"ver":"0.1","info":{"id":"stcXRs","date":"1639578620","viewed":864,"name":"20211215_The intended one","username":"0b5vr","description":"of my TDF2021 Shader Showdown Quarterfinals\nCoded in 25 (+Î±) minutes.\n\nStream: https://youtu.be/7L-yWGsUI2o?t=6287\n","likes":54,"published":1,"flags":0,"usePreview":1,"tags":["3d","pathtracing","quadtree"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define lofi(i,j) (floor((i)/(j))*(j))\n#define fs(i) (fract(sin((i)*114.514)*1919.810))\n\nfloat time;\nfloat seed;\n\nfloat random(){\n  seed++;\n  return fs(seed);\n}\n\nmat2 r2d(float t){\n  return mat2(cos(t),sin(t),-sin(t),cos(t));\n}\n\nmat3 orthBas(vec3 z){\n  z=normalize(z);\n  vec3 up=abs(z.y)>.999?vec3(0,0,1):vec3(0,1,0);\n  vec3 x=normalize(cross(up,z));\n  return mat3(x,cross(z,x),z);\n}\n\nvec3 lamb(vec3 n){\n  float phi16=acos(-1.)*2.*random();\n  float ct=sqrt(random());\n  float st=sqrt(1.0-ct*ct);\n  return orthBas(n)*vec3(\n    cos(phi16)*st,\n    sin(phi16)*st,\n    ct\n  );\n}\n\nvec4 ibox(vec3 ro,vec3 rd,vec3 s){\n  vec3 src=ro/rd;\n  vec3 dst=abs(s/rd);\n  vec3 fv=-src-dst;\n  vec3 bv=-src+dst;\n  float f=max(max(fv.x,fv.y),fv.z);\n  float b=min(min(bv.x,bv.y),bv.z);\n  if(f<.0||b<f){return vec4(1E2);}\n  vec3 n=-sign(rd)*step(fv.zxy,fv)*step(fv.yzx,fv);\n  return vec4(n,f);\n}\n\n\nstruct QTR {\n  vec3 cell;\n  vec3 size;\n  float len;\n  bool hole;\n};\n\nQTR qt(vec3 ro,vec3 rd){\n  QTR r;\n  r.hole=false;\n  r.size=vec3(1,1E3,1);\n  for(int i=0;i<4;i++){\n    r.size/=2.;\n    r.cell=lofi(ro+rd*1E-2*r.size.x,r.size)+r.size/2.;\n    r.hole=r.cell.y>0.;\n    if(r.hole){break;}\n    float di=fs(dot(r.cell,vec3(3,4,5)));\n    if(di>.5){break;}\n  }\n  vec3 src=(ro-r.cell)/rd;\n  vec3 dst=abs(r.size/2./rd);\n  vec3 bv=-src+dst;\n  r.len=min(min(bv.x,bv.y),bv.z);\n  \n  return r;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  \n  time=iTime;\n  seed=texture(iChannel0,uv*8.).x;\n  seed+=fract(time);\n  \n  vec2 p=uv*2.-1.;\n  p.x*=iResolution.x/iResolution.y;\n  p*=r2d(.3);\n  \n  float h=mod(lofi(time,5.),2.);\n  float haha=exp(-5.0*fract(time/5.));\n  \n  vec3 co=vec3(0,1,2.+2.*h);\n  co.zx*=r2d(.2*time);\n  vec3 ct=vec3(0,-1,0);\n  vec3 cz=normalize(co-ct);\n  mat3 cb=orthBas(cz);\n\n  vec3 col=vec3(0);  \n  vec3 colRem=vec3(1);\n\n  vec3 ro0=co;\n  vec3 rd0=cb*normalize(vec3(p,-2));\n  \n  for(int iS=0;iS<10;iS++){\n    vec3 ro=ro0;\n    vec3 rd=rd0;\n    vec3 fp=ro+rd*(2.-1.5*haha);\n    ro+=.04*cb*(lamb(vec3(0,0,1))*vec3(1,1,0));\n    rd=normalize(fp-ro);\n    colRem=vec3(1);\n    \n    for(int i=0;i<100;i++){\n      QTR qtr=qt(ro,rd);\n\n      vec4 isect=vec4(1E2);\n      vec3 off=vec3(0);\n      if(!qtr.hole){\n        vec3 size=qtr.size/2.-.01;\n        float di=fs(dot(qtr.cell,vec3(2,6,6)));\n        float ph=time+dot(qtr.cell,vec3(1))+3.*di;\n        off.y-=0.5+0.5*sin(ph);\n        isect=ibox(ro-qtr.cell-off,rd,size);\n      }\n      \n      if(isect.w<1E2){\n        vec3 n=isect.xyz;\n        ro+=rd*isect.w;\n        \n        float di=fs(dot(qtr.cell,vec3(3,4,-1)));\n        if((ro-off).y>-.1&&di<.3){\n          if(di<.1){\n            col+=colRem*5.;\n          }else{\n            col+=colRem*5.*vec3(1,.1,.1);\n          }\n          colRem*=0.;\n        }else{\n          colRem*=.5;\n        }\n        \n        rd=mix(lamb(n),reflect(rd,n),0.5);\n      }else{\n        ro+=rd*qtr.len;\n      }\n      \n      if(colRem.x<.1){break;}\n      if(rd.y>.0&&ro.y>.0){break;}\n      if(length(ro)>10.){break;}\n    }\n    \n    col+=colRem*.1;\n  }\n  \n  col/=10.;\n  col/=1.0+col;\n  col=pow(col,vec3(.4545));\n  col*=1.0-length(p)*.2;\n  col=vec3(\n    smoothstep(.1,.9,col.x),\n    smoothstep(.0,1.,col.y),\n    smoothstep(-.1,1.1,col.z)\n  );\n\n  fragColor = vec4(col,1);\n}","name":"Image","description":"","type":"image"}]}