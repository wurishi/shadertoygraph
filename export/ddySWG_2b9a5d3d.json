{"ver":"0.1","info":{"id":"ddySWG","date":"1681597738","viewed":147,"name":"fwidth ray tracer test","username":"pnoqable","description":"A simple idea how to use fwidth in ray tracing for anti aliasing the edge of a sphere. Turned out to be a bit tricky though as fwidth doesn't like to be nested inside if blocks..","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["fwidth"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 sphere(vec3 ro, vec3 rd, vec3 c, float r) {\n    vec3 roc = c - ro;\n    float x = dot(rd, roc);\n    float yy = dot(roc, roc) - x*x;\n    float dxdx = r*r - yy;\n    float w = fwidth(dxdx);\n\n    if(dxdx > 0.) {\n        float dx = sqrt(dxdx);\n        float x0 = x - dx;\n        \n        if(x0 > 0.) {\n            float alpha = smoothstep(0., 2.*w, dxdx);\n            return vec4(ro + x0 * rd, alpha);\n        }\n    }\n    \n    return vec4(0.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord - iResolution.xy)/iResolution.y;\n    \n    vec3 col = vec3(1. - length(uv/2.));\n    \n    vec3 lightDir = normalize(vec3(sin(iTime), -0.3, cos(iTime)));\n    \n    vec3 ro = vec3(0, 0, -1.5);\n    vec3 rd = normalize(vec3(uv, 1.));\n\n    vec4 sphere = sphere(ro, rd, vec3(0), 1.);\n\n    if(sphere.a > 0.) {\n        vec3 normal = sphere.xyz;\n        float brightness = pow(max(0., dot(-lightDir, normal)), 4.);\n        col = mix(col, vec3(brightness), sphere.a);\n    }\n    \n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}