{"ver":"0.1","info":{"id":"dllXzN","date":"1674433869","viewed":95,"name":"Color-picker or viewer","username":"ianertson","description":"Color-picker thing.\nPress and hold with the mouse to view the values of a pixel.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["text","color","rgb","font","tool","tools","colorpicker"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R iResolution.xy\n#define FONT_SIZE 32.0\n#define T (iTime)\n#define NORM(v) (0.5+(0.5*v))\n\n\nfloat circle(vec2 fc, vec2 pos) {\n    float radius = 32.0;\n    float feather = radius*0.25;\n    \n    return 1.0 - smoothstep(radius-feather, radius+feather, distance(fc, pos));\n}\n\n\nvoid mainImage( out vec4 O, in vec2 fc )\n{\n    vec3 col = vec3(0.0);\n    vec2 uv = fc / R.xy;\n    vec4 m = iMouse;\n    bool interactive = m.z > 0.01;\n    \n    col = texture(iChannel0, uv).rgb;\n    \n    vec2 pos = interactive ? m.xy : (R.xy/2.0)+0.25*vec2((cos(T)) * (R.x*0.5), (sin(T)) * (R.y*0.5));\n    \n    vec2 rgbUv = pos / R.xy;\n    vec3 rgb = texture(iChannel0, rgbUv).rgb;\n    \n    float margin = FONT_SIZE+(FONT_SIZE / 2.0);\n    \n    col = mix(col, rgb, circle(fc, pos));\n    \n    pos += vec2(margin, margin);\n    \n    vec3 inv = vec3(1.0) - col;\n    \n    col = mix(col, inv, drawFloat(iChannel1, fc, pos, FONT_SIZE, rgb.r).r); pos.y += margin;\n    col = mix(col, inv, drawFloat(iChannel1, fc, pos, FONT_SIZE, rgb.g).r); pos.y += margin;\n    col = mix(col, inv, drawFloat(iChannel1, fc, pos, FONT_SIZE, rgb.b).r); pos.y += margin;\n    \n    \n    O = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define NUM_DECIMALS 3\n#define STACK_SIZE 16\n\n\n\nstruct Box {\n    vec2 min;\n    vec2 max;\n    vec2 uv;\n    vec3 color;\n};\n\n\n\nfloat getChar(sampler2D texp, vec2 uv, int digit) {\n    uv.y -= 3.0;\n    uv.x += 1.0;\n    uv.x += float(digit);\n    uv /= 16.0;\n    return textureLod(texp, uv, 0.0).r;\n}\n\n\nfloat getDot(sampler2D texp, vec2 uv) {\n    uv.x += 11.0;\n    uv.y += 5.0;\n    uv /= 16.0;\n    return textureLod(texp, uv, 0.0).r;\n}\n\n\n\nbool getBox(sampler2D texp, vec2 fc, vec2 boxPos, float bsize, inout Box box, int digit, bool isDot) {\n    box.min = boxPos - vec2(bsize);\n    box.max = boxPos + vec2(bsize);\n\n    if (fc.x < box.min.x || fc.x > box.max.x) return false;\n    if (fc.y < box.min.y || fc.y > box.max.y) return false;\n    \n    vec2 size = box.max - box.min;\n    box.uv = ((box.max - fc)/size)*-1.0;\n    \n    if (isDot) box.uv.y += 0.3;\n\n    box.color = isDot ? vec3(getDot(texp, box.uv)) : vec3(getChar(texp, box.uv, digit));\n\n    return true;\n}\n\n\nint countDigits(float num) {\n    int count = 0;\n    int stack[STACK_SIZE];\n    int stackptr = 0;\n\n    for (int i = 0; i < STACK_SIZE && stackptr < STACK_SIZE; i++) {\n        num /= 10.0;\n        int digit = int(num);\n        int remain = int(num*10.0)%10;\n        stack[stackptr++] = remain;\n        if (digit <= 0) break;\n    }\n    \n    for (int i = 0; i < stackptr; i++) {\n        int idx =  (stackptr-1)-i;\n        int digit = stack[idx];\n        count += 1;\n    }\n    \n    return count;\n}\n\nvec3 drawNum(sampler2D texp, vec2 fc, inout vec2 boxPos, float boxSize, float num) {\n    num = abs(num);\n    \n    vec3 col = vec3(0.0);\n    \n    int stack[STACK_SIZE];\n    int stackptr = 0;\n    Box boxes[STACK_SIZE];\n\n    for (int i = 0; i < STACK_SIZE && stackptr < STACK_SIZE; i++) {\n        num /= 10.0;\n        int digit = int(num);\n        int remain = int(num*10.0)%10;\n        stack[stackptr++] = remain;\n        if (digit <= 0) break;\n    }\n    \n    for (int i = 0; i < stackptr; i++) {\n        int idx =  (stackptr-1)-i;\n        int digit = stack[idx];\n        \n        if (getBox(texp, fc, boxPos, boxSize, boxes[i], digit, false))\n            col += boxes[i].color; boxPos.x += boxSize;\n    }\n    \n    return col;\n}\n\n\nvec3 drawFloat(sampler2D texp, vec2 fc, vec2 boxPos, float boxSize, float num) {\n    int numDigits = countDigits(num);\n    boxPos.x -= float(numDigits)*boxSize*0.5;\n    float decimals = fract(num)*(pow(10., float(NUM_DECIMALS)));\n    vec3 col = vec3(0.0);\n    col += drawNum(texp, fc, boxPos, boxSize, num);\n    Box box; if (getBox(texp, fc, boxPos, boxSize, box, 0, true)) col += box.color; boxPos.x += boxSize;\n    col += drawNum(texp, fc, boxPos, boxSize, decimals);\n    \n    return col;\n}\n","name":"Common","description":"","type":"common"}]}