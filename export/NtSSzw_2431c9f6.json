{"ver":"0.1","info":{"id":"NtSSzw","date":"1627366373","viewed":59,"name":"SWS3005_12","username":"lyfzero","description":"real-time ray tracing on GPU, assignment 5 task 2, group 12.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raytracer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","previewfilepath":"/media/ap/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//============================================================================\n// PROJECT ID: 12\n//\n// GROUP NUMBER: \n//\n// STUDENT NAME: YAO PENG(姚鹏)\n// NUS User ID.: t0922555\n//\n// STUDENT NAME: LI YIFAN(李一帆)\n// NUS User ID.: t0922558\n//\n// STUDENT NAME: \n// NUS User ID.: \n//\n// COMMENTS TO GRADER: \n//\n//============================================================================\n\n\n// FRAGMENT SHADER FOR SHADERTOY\n// Run this at https://www.shadertoy.com/new\n// See documentation at https://www.shadertoy.com/howto\n\n// Your browser must support WebGL 2.0.\n// Check your browser at http://webglreport.com/?v=2\n\n\n//============================================================================\n// Constants.\n//============================================================================\n\nconst float PI = 3.1415926536;\n\nconst vec3 BACKGROUND_COLOR = vec3( 0.1, 0.2, 0.6 );\n\n// Vertical field-of-view angle of camera. In radians.\nconst float FOVY = 50.0 * PI / 180.0;\n\n// Use this for avoiding the \"epsilon problem\" or the shadow acne problem.\nconst float DEFAULT_TMIN = 10.0e-4;\n\n// Use this for tmax for non-shadow ray intersection test.\nconst float DEFAULT_TMAX = 10.0e6;\n\n// Equivalent to number of recursion levels (0 means ray-casting only).\n// We are using iterations to replace recursions.\nconst int NUM_ITERATIONS = 2;\n\n// Constants for the scene objects.\nconst int NUM_LIGHTS = 4;\nconst int NUM_MATERIALS = 7;\nconst int NUM_PLANES = 4;\nconst int NUM_SPHERES = 8 + 6;\nconst int NUM_CONES = 2;\nconst int NUM_BOXS = 1;\n\n//============================================================================\n// Define new struct types.\n//============================================================================\nstruct Ray_t {\n    vec3 o;  // Ray Origin.\n    vec3 d;  // Ray Direction. A unit vector.\n};\n\nstruct Plane_t {\n    // The plane equation is Ax + By + Cz + D = 0.\n    float A, B, C, D;\n    int materialID;\n};\n\nstruct Sphere_t {\n    vec3 center;\n    float radius;\n    int materialID;\n};\n\nstruct Cone_t {\n\tfloat cosa;  // Half angle\n\tfloat h;  // Height\n\tvec3 c;  // Tip position\n\tvec3 v;  // Axis\n\tint materialID;\n};\n\nstruct Box_t {\n\tvec3 rad;\n    vec3 center;\n\tint materialID;\n\tmat4 M;\n};\n\nstruct Light_t {\n    vec3 position;  // Point light 3D position.\n    vec3 I_a;       // For Ambient.\n    vec3 I_source;  // For Diffuse and Specular.\n};\n\nstruct Material_t {\n    vec3 k_a;   // Ambient coefficient.\n    vec3 k_d;   // Diffuse coefficient.\n    vec3 k_r;   // Reflected specular coefficient.\n    vec3 k_rg;  // Global reflection coefficient.\n    float n;    // The specular reflection exponent. Ranges from 0.0 to 128.0.\n};\n\n//----------------------------------------------------------------------------\n// The lighting model used here is similar to that on Slides 8 and 12 of\n// Lecture Topic B08 (Basic Ray Tracing). Here it is computed as\n//\n//     I_local = SUM_OVER_ALL_LIGHTS {\n//                   I_a * k_a +\n//                   k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ]\n//               }\n// and\n//     I = I_local  +  k_rg * I_reflected\n//----------------------------------------------------------------------------\n\n\n//============================================================================\n// Global scene data.\n//============================================================================\nPlane_t Plane[NUM_PLANES];\nSphere_t Sphere[NUM_SPHERES];\nCone_t Cone[NUM_CONES];\nBox_t Box[NUM_BOXS];\nLight_t Light[NUM_LIGHTS];\nMaterial_t Material[NUM_MATERIALS];\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Initializes the scene.\n/////////////////////////////////////////////////////////////////////////////\nvoid InitScene()\n{\n    // Horizontal plane.\n    Plane[0].A = 0.0;\n    Plane[0].B = 1.0;\n    Plane[0].C = 0.0;\n    Plane[0].D = 0.0;\n    Plane[0].materialID = 0;\n\n    // far plane.\n    Plane[1].A = 0.0;\n    Plane[1].B = 0.0;\n    Plane[1].C = 1.0;\n    Plane[1].D = 10.0;\n    Plane[1].materialID = 6;\n        \n    // left plane\n    Plane[2].A = 1.0;\n    Plane[2].B = 0.0;\n    Plane[2].C = 0.0;\n    Plane[2].D = 10.0;\n    Plane[2].materialID = 3;\n    \n    // right plane\n    Plane[3].A = -1.0;\n    Plane[3].B = 0.0;\n    Plane[3].C = 0.0;\n    Plane[3].D = 10.0;\n    Plane[3].materialID = 3;\n    \n    // box\n    Box[0].rad = vec3(3.0,1.0,3.0);\n\tBox[0].center = vec3(0.0,0.0,-3.0);\n\tBox[0].materialID = 4;\n\tBox[0].M = mat4 (vec4(cos(315.0 / 180.0 * PI ),0,sin(315.0 / 180.0 * PI ),0),\n    vec4(0,1,0,0),\n    vec4(-sin(315.0 / 180.0 * PI ),0,cos(315.0 / 180.0 * PI ),0),\n    vec4(0,0,0,1))*mat4 (vec4(1,0,0,0),vec4(0,1,0,0),vec4(0,0,1,0),vec4(-Box[0].center,1));\n\n\n    float sec = mod(iTime, 1.);\n    float spI = floor(mod(iTime, 8.0));\n    \n    if(mod(floor(iTime / 8.0), 2.0) == 0.0) {\n        Sphere[0].center = vec3(0.0 * 2.0 - 1.0, 0.0 * 2.0 + 3.0, 0.0 * 2.0 - 3.0);\n    } else {\n        Sphere[0].center = vec3(0.0, 3.0, -5.0);\n    }\n    Sphere[0].radius = 0.7 + float(mod(iTime, 8.0) >= 0.0) * 0.1 * sin(sec * 50.) / sqrt(sec) * ( 1.-sqrt(sec));\n    Sphere[0].materialID = mod(iTime, 8.0) >= 0.0 ? 0 : 3;\n    \n    if(mod(floor(iTime / 8.0), 2.0) == 0.0) {\n        Sphere[1].center = vec3(1.0 * 2.0 - 1.0, 0.0 * 2.0 + 3.0, 0.0 * 2.0 - 3.0);\n    } else {\n        Sphere[1].center = Sphere[0].center + vec3(1.5, 0, 1.5);\n    }        \n    Sphere[1].radius = 0.7 + float(mod(iTime, 8.0) >= 1.0) * 0.1 * sin(sec * 50.) / sqrt(sec) * ( 1.-sqrt(sec));\n    Sphere[1].materialID = mod(iTime, 8.0) >= 1.0 ? 0 : 3;\n\n    if(mod(floor(iTime / 8.0), 2.0) == 0.0) {\n        Sphere[2].center = vec3(0.0 * 2.0 - 1.0, 1.0 * 2.0 + 3.0, 0.0 * 2.0 - 3.0);\n    } else {\n        Sphere[2].center = Sphere[1].center + vec3(1.5, 0, 1.5);\n    }\n    Sphere[2].radius = 0.7 + float(mod(iTime, 8.0) >= 2.0) * 0.1 * sin(sec*50.) / sqrt(sec) * ( 1.-sqrt(sec));\n    Sphere[2].materialID = mod(iTime, 8.0) >= 2.0 ? 0 : 3;\n\n    if(mod(floor(iTime / 8.0), 2.0) == 0.0) {\n    Sphere[3].center = vec3(1.0 * 2.0 - 1.0, 1.0 * 2.0 + 3.0, 0.0 * 2.0 - 3.0);\n    } else {\n        Sphere[3].center = Sphere[0].center + vec3(-1.5, 0, 1.5);\n    }\n    Sphere[3].radius = 0.7 + float(mod(iTime, 8.0) >= 3.0) * 0.1 * sin(sec*50.) / sqrt(sec) * ( 1.-sqrt(sec));\n    Sphere[3].materialID = mod(iTime, 8.0) >= 3.0 ? 0 : 3;\n    \n    if(mod(floor(iTime / 8.0), 2.0) == 0.0) {    \n    Sphere[4].center = vec3(0.0 * 2.0 - 1.0, 0.0 * 2.0 + 3.0, 1.0 * 2.0 - 3.0);\n    } else {\n        Sphere[4].center = Sphere[3].center + vec3(-1.5, 0, 1.5);\n    }\n    Sphere[4].radius = 0.7 + float(mod(iTime, 8.0) >= 4.0) * 0.1 * sin(sec*50.) / sqrt(sec) * ( 1.-sqrt(sec));\n    Sphere[4].materialID = mod(iTime, 8.0) >= 4.0 ? 0 : 3;\n\n    if(mod(floor(iTime / 8.0), 2.0) == 0.0) {\n    Sphere[5].center = vec3(1.0 * 2.0 - 1.0, 0.0 * 2.0 + 3.0,  1.0 * 2.0 - 3.0);\n    } else {\n        Sphere[5].center = Sphere[4].center + vec3(1.5, 0, 1.5);\n    }\n    Sphere[5].radius = 0.7 + float(mod(iTime, 8.0) >= 5.0) * 0.1 * sin(sec*50.) / sqrt(sec) * ( 1.-sqrt(sec));\n    Sphere[5].materialID = mod(iTime, 8.0) >= 5.0 ? 0 : 3;\n\n    if(mod(floor(iTime / 8.0), 2.0) == 0.0) {\n    Sphere[6].center = vec3(0.0 * 2.0 - 1.0, 1.0 * 2.0 + 3.0, 1.0 * 2.0 - 3.0);\n    } else {\n        Sphere[6].center = Sphere[5].center + vec3(1.5, 0, 1.5);\n    }\n    Sphere[6].radius = 0.7 + float(mod(iTime, 8.0) >= 6.0) * 0.1 * sin(sec*50.) / sqrt(sec) * ( 1.-sqrt(sec));\n    Sphere[6].materialID = mod(iTime, 8.0) >= 6.0 ? 0 : 3;\n\n    if(mod(floor(iTime / 8.0), 2.0) == 0.0) {\n    Sphere[7].center = vec3(1.0 * 2.0 - 1.0, 1.0 * 2.0 + 3.0, 1.0 * 2.0 - 3.0);\n    } else {\n        Sphere[7].center = Sphere[2].center + vec3(-1.5, 0, 1.5);\n    }\n    Sphere[7].radius = 0.7 + float(mod(iTime, 8.0) >= 7.0) * 0.1 * sin(sec*50.) / sqrt(sec) * ( 1.-sqrt(sec));\n    Sphere[7].materialID = mod(iTime, 8.0) >= 7.0 ? 0 : 3;\n   \n    \n    \n    // Center bouncing sphere.\n    Sphere[8].center = vec3( 5.0, (mod(iTime, 3.0) + 0.2) * abs(sin(2.0 * PI * iTime)) + 0.7, 2.0 );\n    Sphere[8].radius = 0.7;\n    Sphere[8].materialID = 1;\n    \n    Sphere[9].center = vec3( -5.0, (mod(iTime, 3.0) + 0.2) * abs(sin(2.0 * PI * iTime)) + 0.7, 2.0 );\n    Sphere[9].radius = 0.7;\n    Sphere[9].materialID = 1;\n    \n    Sphere[10].center = vec3( 5.0, (mod(iTime + 1.0, 3.0) + 0.5) * abs(sin(2.0 * PI * iTime)) + 0.7, -6.0 );\n    Sphere[10].radius = 0.7;\n    Sphere[10].materialID = 1;\n    \n    Sphere[11].center = vec3(-5.0, (mod(iTime + 1.0, 3.0) + 0.5) * abs(sin(2.0 * PI * iTime)) + 0.7, -6.0 );\n    Sphere[11].radius = 0.7;\n    Sphere[11].materialID = 1;\n    \n    Sphere[12].center = vec3( 7.0, (mod(iTime + 2.0, 3.0) + 0.8) * abs(sin(2.0 * PI * iTime)) + 0.7, -2.0 );\n    Sphere[12].radius = 0.7;\n    Sphere[12].materialID = 1;\n    \n    Sphere[13].center = vec3( -7.0, (mod(iTime + 2.0, 3.0) + 0.8) * abs(sin(2.0 * PI * iTime)) + 0.7, -2.0 );\n    Sphere[13].radius = 0.7;\n    Sphere[13].materialID = 1;\n\n    // Cone\n    Cone[0].cosa = 0.95;\n    Cone[0].h = 10.0;\n    Cone[0].c = vec3(9.9, 10.0, -9.9);\n    Cone[0].v = vec3(0.0, -1.0, 0.0);\n    Cone[0].materialID = 4;\n    \n    Cone[1].cosa = 0.95;\n    Cone[1].h = 10.0;\n    Cone[1].c = vec3(-9.9, 10.0, -9.9);\n    Cone[1].v = vec3(0.0, -1.0, 0.0);\n    Cone[1].materialID = 4;\n\n    // Silver material.\n    Material[0].k_d = vec3( 0.5, 0.5, 0.5 );\n    Material[0].k_a = 0.2 * Material[0].k_d;\n    Material[0].k_r = 2.0 * Material[0].k_d;\n    Material[0].k_rg = 0.5 * Material[0].k_r;\n    Material[0].n = 64.0;\n\n    // Gold material.\n    Material[1].k_d = vec3( 0.8, 0.7, 0.1 );\n    Material[1].k_a = 0.2 * Material[1].k_d;\n    Material[1].k_r = 2.0 * Material[1].k_d;\n    Material[1].k_rg = 0.5 * Material[1].k_r;\n    Material[1].n = 64.0;\n\n    // Green plastic material.\n    Material[2].k_d = vec3( 0.0, 0.8, 0.0 );\n    Material[2].k_a = 0.2 * Material[2].k_d;\n    Material[2].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[2].k_rg = 0.5 * Material[2].k_r;\n    Material[2].n = 32.0;\n    \n    // plastic material.\n\tMaterial[3].k_d = vec3( 0.5, 0.3, 0.5 );\n    Material[3].k_a = 0.9 * Material[3].k_d;\n    Material[3].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[3].k_rg = 0.1 * Material[3].k_r;\n    Material[3].n = 64.0;\n\n\t// plastic material.\n\tMaterial[4].k_d = vec3( 0.8, 0.2, 0.1 );\n    Material[4].k_a = 0.9 * Material[4].k_d;\n    Material[4].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[4].k_rg = 0.2 * Material[4].k_r;\n    Material[4].n = 32.0;\n\n\t// plastic material.\n    Material[5].k_d = vec3( 0.8, 0.2, 0.8 );\n    Material[5].k_a = 0.9 * Material[5].k_d;\n    Material[5].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[5].k_rg = 0.2 * Material[5].k_r;\n    Material[5].n = 32.0;\n    \n\t// plastic material.\n    Material[6].k_d = vec3( 0.8, 0.7, 0.1 );\n    Material[6].k_a = 0.9 * Material[6].k_d;\n    Material[6].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[6].k_rg = 0.2 * Material[6].k_r;\n    Material[6].n = 32.0;\n    \n    \n\n    // Light 0.\n    Light[0].position = vec3( 9.9, 12.0, -9.9 );\n    Light[0].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[0].I_source = vec3( 0.8*abs(sin(0.2*PI*iTime)), 0.8*abs(cos(0.2*PI*iTime)), 0.8*abs(sin(1.2*PI*iTime)) );\n\n    // Light 1.\n    Light[1].position = vec3( -9.9, 12.0, -9.9 );\n    Light[1].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[1].I_source = vec3( 0.6*abs(sin(0.2*PI*iTime)), 0.6*abs(cos(0.1*PI*iTime)), 0.6*abs(sin(1.4*PI*iTime)) );\n    \n    // Light 2\n    Light[2].position = vec3( 9.9, 12.0, 9.9 );\n    Light[2].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[2].I_source = vec3( 0.8*abs(sin(0.2*PI*iTime)), 0.8*abs(cos(0.4*PI*iTime)), 0.8*abs(sin(1.3*PI*iTime)) );\n\n    // Light 3.\n    Light[3].position = vec3( -9.9, 12.0, 9.9 );\n    Light[3].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[3].I_source = vec3( 0.6*abs(sin(0.1*PI*iTime)), 0.6*abs(cos(0.3*PI*iTime)), 0.6*abs(sin(1.1*PI*iTime)) );\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is such an intersection, outputs the value of t, the position\n// of the intersection (hitPos) and the normal vector at the intersection\n// (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax,\n                     out float t, out vec3 hitPos, out vec3 hitNormal )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n\n    // We have a hit -- output results.\n    t = t0;\n    hitPos = ray.o + t0 * ray.d;\n    hitNormal = normalize( N );\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is one or two such intersections, outputs the value of the\n// smaller t, the position of the intersection (hitPos) and the normal\n// vector at the intersection (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax,\n                      out float t, out vec3 hitPos, out vec3 hitNormal )\n{\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n        // Compute a vector from center to ray origin\n    // represent the distance\n    vec3 D = ray.o-sph.center;\n    // d = b*b-4*a*c\n    float a = dot(ray.d,ray.d);\n    float b = 2.0*dot(D,ray.d);\n    float c = dot(D,D)-sph.radius*sph.radius;\n    float discr = b*b - 4.0*a*c;\n\n    // no intersection\n    if(discr<0.0)\n        return false;\n    \n    // compute intersection\n    float sqrt_discr = sqrt(discr);\n    // two intersection: t1>=t2\n    float t1 = (-b + sqrt_discr) / 2.0 / a;\n\tfloat t2 = (-b - sqrt_discr) / 2.0 / a;\n    // we only want the positive one\n\tif (t1 <= 0.0)\n\t\treturn false;\n    \n    // output\n    // choose the closet positive one\n    t = (t2 > 0.0) ? t2 : t1;\n    hitPos = ray.o + t * ray.d;\n    hitNormal = (hitPos-sph.center)/sph.radius;\n\n    if ( t < tmin || t > tmax ) return false;\n    return true;\n    /////////////////////////////////\n\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax )\n{\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n        // Compute a vector from center to ray origin\n    // represent the distance\n    vec3 D = ray.o-sph.center;\n    // d = b*b-4*a*c\n    float a = dot(ray.d,ray.d);\n    float b = 2.0*dot(D,ray.d);\n    float c = dot(D,D)-sph.radius*sph.radius;\n    float discr = b*b - 4.0*a*c;\n\n    // no intersection\n    if(discr<0.0)\n        return false;\n    \n    // compute intersection\n    float sqrt_discr = sqrt(discr);\n    // two intersection: t1>=t2\n    float t1 = (-b + sqrt_discr) / 2.0 / a;\n\tfloat t2 = (-b - sqrt_discr) / 2.0 / a;\n    // we only want the positive one\n\tif (t1 <= 0.0)\n\t\treturn false;\n    \n    float t = (t2 > 0.0) ? t2 : t1;\n    if ( t < tmin || t > tmax ) return false;\n    return true;\n    /////////////////////////////////\n\n}\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a cone and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectCone( in Cone_t cone, in Ray_t ray, in float tmin, in float tmax,\n                     out float t, out vec3 hitPos, out vec3 hitNormal ) \n{\n    vec3 co = ray.o - cone.c;\n\n    float a = dot(ray.d, cone.v)*dot(ray.d, cone.v) - cone.cosa * cone.cosa;\n    float b = 2. * (dot(ray.d, cone.v) * dot(co, cone.v) - dot(ray.d, co) * cone.cosa * cone.cosa);\n    float c = dot(co, cone.v) * dot(co, cone.v) - dot(co, co) * cone.cosa * cone.cosa;\n\n    float det = b * b - 4. * a * c;\n    if (det < 0.) return false;\n\n    det = sqrt(det);\n    float t1 = (-b - det) / 2.0/ a;\n    float t2 = (-b + det) / 2.0/ a;\n\n    t = t1;\n    if (t < 0. || t2 > 0. && t2 < t) t = t2;\n    if (t < 0.) return false;\n\n    vec3 cp = ray.o + t * ray.d - cone.c;\n    float h = dot(cp, cone.v);\n    if (h < 0. || h > cone.h) return false;\n\n    hitPos = ray.o + t * ray.d;\n    hitNormal = normalize(cp * dot(cone.v, cp) / dot(cp, cp) - cone.v);\n\n    return (t >= tmin && t<= tmax);\n}\n\n// Computes intersection between a cone and a ray for shadow ray intersection.\nbool IntersectCone( in Cone_t cone, in Ray_t ray, in float tmin, in float tmax )\n{\n    vec3 co = ray.o - cone.c;\n\n    float a = dot(ray.d, cone.v)*dot(ray.d, cone.v) - cone.cosa * cone.cosa;\n    float b = 2. * (dot(ray.d, cone.v) * dot(co, cone.v) - dot(ray.d, co) * cone.cosa * cone.cosa);\n    float c = dot(co, cone.v) * dot(co, cone.v) - dot(co, co) * cone.cosa * cone.cosa;\n\n    float det = b * b - 4. * a * c;\n    if (det < 0.) return false;\n\n    det = sqrt(det);\n    float t1 = (-b - det) / 2.0/ a;\n    float t2 = (-b + det) / 2.0/ a;\n\n    float t = t1;\n    if (t < 0. || t2 > 0. && t2 < t) t = t2;\n    if (t < 0.) return false;\n    vec3 cp = ray.o + t * ray.d - cone.c;\n    float h = dot(cp, cone.v);\n    if (h < 0. || h > cone.h) return false;\n\n    return (t >= tmin && t<= tmax);\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a box and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is such an intersection, outputs the value of t, the position\n// of the intersection (hitPos) and the normal vector at the intersection \n// (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectBox(in Box_t box, in Ray_t ray, in float tmin, in float tmax, out float t, out vec3 hitPos, out vec3 hitNormal)\n{\n\tvec3 sco = (box.M * vec4(ray.o,1.0)).xyz;\n\tvec3 scd = normalize((transpose(inverse(box.M))*vec4(ray.d,1.0)).xyz);\n    vec3 m = 1.0/scd;\n    vec3 n = m * sco;\n    vec3 k = abs(m) * box.rad;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n    \n    float tN = max( max( t1.y, t1.z ), t1.x );\n    float tF = min( min( t2.y, t2.z ), t2.x );\n\t\n    if( tN>tF || tF<0.0) return false;\n\tif ( tN < tmin || tN > tmax ) return false;\n\tt = tN;\n\thitPos = (inverse(box.M) * vec4((sco + t * scd),1.0)).xyz;\n\thitNormal = (transpose(inverse(box.M)) * vec4((-sign(ray.d)*step(t1.zxy,t1.xyz)*step(t1.yzx,t1.xyz)),1.0)).xyz;\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a box and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectBox(in Box_t box, in Ray_t ray, in float tmin, in float tmax )\n{\n\n\tvec3 sco = (box.M * vec4(ray.o,1.0)).xyz;\n\tvec3 scd = normalize((transpose(inverse(box.M))*vec4(ray.d,1.0)).xyz);\n    vec3 m = 1.0/scd;\n    vec3 n = m * sco;\n    vec3 k = abs(m) * box.rad;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\n    float tN = max( max( t1.y, t1.z ), t1.x );\n    float tF = min( min( t2.y, t2.z ), t2.x );\n\t\n    if( tN>tF || tF<0.0) return false;\n\tif ( tN < tmin || tN > tmax ) return false;\n    return true;\n}\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes (I_a * k_a) + k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ].\n// Input vectors L, N and V are pointing AWAY from surface point.\n// Assume all vectors L, N and V are unit vectors.\n/////////////////////////////////////////////////////////////////////////////\nvec3 PhongLighting( in vec3 L, in vec3 N, in vec3 V, in bool inShadow,\n                    in Material_t mat, in Light_t light )\n{\n    if ( inShadow ) {\n        return light.I_a * mat.k_a;\n    }\n    else {\n        vec3 R = reflect( -L, N );\n        float N_dot_L = max( 0.0, dot( N, L ) );\n        float R_dot_V = max( 0.0, dot( R, V ) );\n        float R_dot_V_pow_n = ( R_dot_V == 0.0 )? 0.0 : pow( R_dot_V, mat.n );\n\n        return light.I_a * mat.k_a +\n               light.I_source * (mat.k_d * N_dot_L + mat.k_r * R_dot_V_pow_n);\n    }\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Casts a ray into the scene and returns color computed at the nearest\n// intersection point. The color is the sum of light from all light sources,\n// each computed using Phong Lighting Model, with consideration of\n// whether the interesection point is being shadowed from the light.\n// If there is no interesection, returns the background color, and outputs\n// hasHit as false.\n// If there is intersection, returns the computed color, and outputs\n// hasHit as true, the 3D position of the intersection (hitPos), the\n// normal vector at the intersection (hitNormal), and the k_rg value\n// of the material of the intersected object.\n/////////////////////////////////////////////////////////////////////////////\nvec3 CastRay( in Ray_t ray,\n              out bool hasHit, out vec3 hitPos, out vec3 hitNormal, out vec3 k_rg )\n{\n    // Find whether and where the ray hits some object.\n    // Take the nearest hit point.\n\n    bool hasHitSomething = false;\n    float nearest_t = DEFAULT_TMAX;   // The ray parameter t at the nearest hit point.\n    vec3 nearest_hitPos;              // 3D position of the nearest hit point.\n    vec3 nearest_hitNormal;           // Normal vector at the nearest hit point.\n    int nearest_hitMatID;             // MaterialID of the object at the nearest hit point.\n\n    float temp_t;\n    vec3 temp_hitPos;\n    vec3 temp_hitNormal;\n    bool temp_hasHit;\n\n    /////////////////////////////////////////////////////////////////////////////\n    // TASK:\n    // * Try interesecting input ray with all the planes and spheres,\n    //   and record the front-most (nearest) interesection.\n    // * If there is interesection, need to record hasHitSomething,\n    //   nearest_t, nearest_hitPos, nearest_hitNormal, nearest_hitMatID.\n    /////////////////////////////////////////////////////////////////////////////\n\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    // Try intersect with spheres\n    for(int i = 0; i < NUM_SPHERES; i++){\n        temp_hasHit = IntersectSphere(Sphere[i], ray, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal);\n\n        // record the front-most (nearest) interesection\n        if (temp_hasHit && temp_t < nearest_t) {\n    \t\thasHitSomething = true;\n    \t\tnearest_t = temp_t;\n    \t\tnearest_hitPos = temp_hitPos;\n    \t\tnearest_hitNormal = temp_hitNormal;\n    \t\tnearest_hitMatID = Sphere[i].materialID;\n    \t}\n    }\n    // Try intersect with planes\n    // use the recorded above nearest_t to decide whether write in new intersection\n    for (int i = 0; i < NUM_PLANES; i++ ){\n        temp_hasHit = IntersectPlane(Plane[i], ray, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal);\n\n        // record the front-most (nearest) interesection\n        if (temp_hasHit && temp_t < nearest_t ) {\n    \t\thasHitSomething = true;\n    \t\tnearest_t = temp_t;\n    \t\tnearest_hitPos = temp_hitPos;\n    \t\tnearest_hitNormal = temp_hitNormal;\n    \t\tnearest_hitMatID = Plane[i].materialID;\n    \t}\n    }\n\n    // Try intersect with cones\n    // use the recorded above nearest_t to decide whether write in new intersection\n    for (int i = 0; i < NUM_CONES; i++ ) {\n    \ttemp_hasHit = IntersectCone(Cone[i], ray, DEFAULT_TMIN, nearest_t, temp_t, temp_hitPos, temp_hitNormal);\n\n        // record the front-most (nearest) interesection    \t\n        if (temp_hasHit && temp_t < nearest_t ) {\n    \t\thasHitSomething = true;\n    \t\tnearest_t = temp_t;\n    \t\tnearest_hitPos = temp_hitPos;\n    \t\tnearest_hitNormal = temp_hitNormal;\n    \t\tnearest_hitMatID = Cone[i].materialID;\n    \t}\n    \t\n    }\n    for(int i = 0; i < NUM_BOXS; i++){\n        temp_hasHit = IntersectBox(Box[i], ray, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal);\n\n        // record the front-most (nearest) interesection\n        if (temp_hasHit && temp_t < nearest_t) {\n    \t\thasHitSomething = true;\n    \t\tnearest_t = temp_t;\n    \t\tnearest_hitPos = temp_hitPos;\n    \t\tnearest_hitNormal = temp_hitNormal;\n    \t\tnearest_hitMatID = Box[i].materialID;\n    \t}\n    }\n    /////////////////////////////////\n\n\n\n    // One of the output results.\n    hasHit = hasHitSomething;\n    if ( !hasHitSomething ) return BACKGROUND_COLOR;\n\n    vec3 I_local = vec3( 0.0 );  // Result color will be accumulated here.\n\n    /////////////////////////////////////////////////////////////////////////////\n    // TASK:\n    // * Accumulate lighting from each light source on the nearest hit point.\n    //   They are all accumulated into I_local.\n    // * For each light source, make a shadow ray, and check if the shadow ray\n    //   intersects any of the objects (the planes and spheres) between the\n    //   nearest hit point and the light source.\n    // * Then, call PhongLighting() to compute lighting for this light source.\n    /////////////////////////////////////////////////////////////////////////////\n    \n\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    // Accumulate lighting\n    Ray_t ShadowRay[NUM_LIGHTS];\n    bool inshadow[NUM_LIGHTS];\n    for(int i = 0; i < NUM_LIGHTS; i++){\n        // create shadow ray->Light1,2\n        ShadowRay[i].o = nearest_hitPos;\n    \tShadowRay[i].d = normalize(Light[i].position - ShadowRay[i].o);\n\n        // consider intersecting with spheres\n        for (int j = 0; j < NUM_SPHERES; j++ ) {\n    \t\tif(!inshadow[i]) {\n    \t\t// The point is in shadow if the shadow ray intersects with anything\n    \t\tinshadow[i] = IntersectSphere(Sphere[j], ShadowRay[i], DEFAULT_TMIN, \n    \t\t\tdistance(nearest_hitPos, Light[i].position));\n    \t\t}\n    \t}\n        // consider intersection with planes\n    \tif (!inshadow[i]) {\n    \t\tfor(int j = 0; j < NUM_PLANES; j++ ) {\n    \t\t\tif(!inshadow[i]) {\n    \t\t\t\tinshadow[i] = IntersectPlane(Plane[j], ShadowRay[i], DEFAULT_TMIN, \n    \t\t\t\t    distance(nearest_hitPos, Light[i].position));\n    \t\t\t}\n    \t\t}\n    \t}\n        // consider intersection with cones\n        if (!inshadow[i]) {\n    \t\tfor(int j = 0; j < NUM_CONES; j++ ) {\n    \t\t\t// If already in shadow, inshadow[i] becomes inaccessible\n    \t\t\tif(!inshadow[i]) {\n    \t\t\t\tinshadow[i] = IntersectCone(Cone[j], ShadowRay[i], DEFAULT_TMIN, \n    \t\t\t\tdistance(nearest_hitPos, Light[i].position));\n    \t\t\t}\n    \t\t}\n    \t}\n\n        // call PhongLighting() to compute lighting for this light source\n        I_local += PhongLighting( ShadowRay[i].d, nearest_hitNormal, - ray.d, inshadow[i], Material[nearest_hitMatID], Light[i] );\n    }\n    /////////////////////////////////\n\n\n\n    // Populate output results.\n    hitPos = nearest_hitPos;\n    hitNormal = nearest_hitNormal;\n    k_rg = Material[nearest_hitMatID].k_rg;\n\n    return I_local;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Execution of fragment shader starts here.\n// 1. Initializes the scene.\n// 2. Compute a primary ray for the current pixel (fragment).\n// 3. Trace ray into the scene with NUM_ITERATIONS recursion levels.\n/////////////////////////////////////////////////////////////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    InitScene();\n    \n    // Scale pixel 2D position such that its y coordinate is in [-1.0, 1.0].\n    vec2 pixel_pos = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n    float an = 0.3*iTime - 7.0*m.x;\n    // Position the camera.\n    vec3 cam_pos = vec3( 3.5*sin(an), 10.0, 3.5*cos(an)+8.0 );\n    vec3 cam_lookat = vec3( 0, 4.0, -1.0 );\n    vec3 cam_up_vec = vec3( 0.0, 1.0, 0.0 );\n\n\n    // Set up camera coordinate frame in world space.\n    vec3 cam_z_axis = normalize( cam_pos - cam_lookat );\n    vec3 cam_x_axis = normalize( cross(cam_up_vec, cam_z_axis) );\n    vec3 cam_y_axis = normalize( cross(cam_z_axis, cam_x_axis));\n\n    // Create primary ray.\n    float pixel_pos_z = -1.0 / tan(FOVY / 2.0);\n    Ray_t pRay;\n    pRay.o = cam_pos;\n    pRay.d = normalize( pixel_pos.x * cam_x_axis  +  pixel_pos.y * cam_y_axis  +  pixel_pos_z * cam_z_axis );\n\n\n    // Start Ray Tracing.\n    // Use iterations to emulate the recursion.\n\n    vec3 I_result = vec3( 0.0 );\n    vec3 compounded_k_rg = vec3( 1.0 );\n    Ray_t nextRay = pRay;\n\n    for ( int level = 0; level <= NUM_ITERATIONS; level++ )\n    {\n        bool hasHit;\n        vec3 hitPos, hitNormal, k_rg;\n\n        vec3 I_local = CastRay( nextRay, hasHit, hitPos, hitNormal, k_rg );\n\n        I_result += compounded_k_rg * I_local;\n\n        if ( !hasHit ) break;\n\n        compounded_k_rg *= k_rg;\n\n        nextRay = Ray_t( hitPos, normalize( reflect(nextRay.d, hitNormal) ) );\n    }\n\n    fragColor = vec4( I_result, 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}