{"ver":"0.1","info":{"id":"ssGyzD","date":"1654523339","viewed":126,"name":"Burning Ship POI (Temporal)","username":"MisterSirCode","description":"Copy of the supersampled POI version, this one implements stb's temporal AA method.\n\nCredit to stb: [URL]https://www.shadertoy.com/view/fsGyRW[/URL]\n\nPart of my Simple Fractals playlist: [URL]https://www.shadertoy.com/playlist/NfSGW3[/URL]","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["fractal","burning","aa","ship","temporal"],"hasliked":0,"parentid":"7dtyWl","parentname":"Burning Ship POI (Supersampled)"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 frac = texture(iChannel0, fragCoord / iResolution.xy).xy;\n    fragColor = vec4(vec3(1.9, .7, .2) * pow(frac.x, 2.0), 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec2 hash21(float p) {\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nfloat sampler(vec2 p, float itr) {\n    vec2 z = vec2(0);\n    float l = 0.;\n    for (l = 0.; l < itr; l += 1.) {\n        z = vec2(z.x * z.x - z.y * z.y, abs(2. * z.x * z.y)) + p;\n        if(dot(z, z) > 65536.0) break;\n    }\n    return l - log2(log2(dot(z, z))) + 4.;\n}\n\nvec2 diskPt(vec2 p) {\n    return sqrt(p.x) * vec2(sin(6.2832*p.y), cos(6.2832*p.y));\n}\n\nbool useSquareDistribution = false; // Disk is much cleaner\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 res = iResolution.xy;\n    vec4 pr = texture(iChannel0, fragCoord / res);\n    vec2 uv = ((2. * fragCoord - res) / -res.y);\n    float ct = pr.w; // grab current time from last frame\n    if (useSquareDistribution) \n        uv += 1.333 * hash21(mod(iTime, 1000.)) / res;\n    else\n        uv += 1.15 * diskPt(hash21(mod(iTime, 1000.))) / res;\n    uv /= 15.;\n    uv = vec2(uv.x - 1.76, uv.y - 0.03);\n    float fr = sampler(uv, 1000.);\n    fr = (fr > 99.) ? 0. : sin(fr / 20.);\n    fr = clamp(fr, 0., 1.);\n    \n    float cfr = mix(fr, pr.x, .99);\n    cfr = mix(fr, cfr, clamp(ct, 0.0, 1.0));\n    \n    ct += 0.01;\n    \n    fragColor = vec4(vec3(cfr, res), ct);\n}","name":"Buffer A","description":"","type":"buffer"}]}