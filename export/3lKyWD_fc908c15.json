{"ver":"0.1","info":{"id":"3lKyWD","date":"1611047374","viewed":309,"name":"sdf fwidth aa","username":"iradicator","description":"using fwidth to smooth / aa sdf function","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["sdf","aa","screenspace","fwidth"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Based on http://www.numb3r23.net/2015/08/17/using-fwidth-for-distance-based-anti-aliasing/\n\n#if 0\n    #define fg (vec3(1.0,1.0,1.0))\n    #define bg (vec3(0.0,0.0,0.0))\n    #define th (vec3(1.0,0.0,0.0))\n#else\n    #define fg (vec3(0.62,0.55,0.42))\n    #define bg (vec3(0.22,0.17,0.12))\n    #define th (vec3(0.21,0.27,0.38))\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float l = uv.x - (0.5*sin(0.4*iTime)+0.5);\n    float s = smoothstep(0.86, 1.0, sin(0.75*iTime));\n    \n    float dst = 2.0*dot(abs(uv-vec2(0.5)), vec2(1.0));\n\n#if 1\n    float aaf = length(vec2(dFdx(dst),dFdy(dst)));\n#else\n    float aaf = fwidth(dst);\n#endif\n\n    vec3 col_noaa = mix(fg,bg,step(1.0,dst));\n    vec3 col_aa = mix(fg,bg,smoothstep(1.0-aaf,1.0,dst));\n    \n    vec3 col = mix(col_aa,col_noaa,smoothstep(0.0,2.0/iResolution.x,l));\n    col = mix(th,col,smoothstep(0.0,2.0/iResolution.x,abs(l)));\n\n    vec3 col_delta = 1.0*abs(col_noaa-col_aa);\n\n    fragColor = vec4(mix(col,col_delta,s),1.0);\n}","name":"Image","description":"","type":"image"}]}