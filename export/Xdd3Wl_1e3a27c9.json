{"ver":"0.1","info":{"id":"Xdd3Wl","date":"1452766858","viewed":154,"name":"Colorreduction With Dithering","username":"Marrrk","description":"Allows color redurction with dithering.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["color","correction","dithering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float ditherThreshold = 0.5;\n// change this to the colors per component you wish to use\nconst float colorCountPerComponent = 4.0;\n// change this if you want to use or not use dithering\nconst bool allowDithering = true;\n\nfloat reduceColorComponent(float component, float colorCountPerComponent, bool dither)\n{\n    float a = floor(component * colorCountPerComponent) / colorCountPerComponent;\n    \n    if (dither)\n    {\n        float step = 1.0 / colorCountPerComponent;\n        if (a + step * ditherThreshold < component)\n            return a+step;\n    }\n    return a;\n}\n\nvec3 reduceColor(vec3 color, float colorCountPerComponent, bool dither)\n{\n    return vec3(reduceColorComponent(color.x, colorCountPerComponent, dither),\n                reduceColorComponent(color.y, colorCountPerComponent, dither),\n                reduceColorComponent(color.z, colorCountPerComponent, dither));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    bool mustDither = false;\n    if (allowDithering && (iMouse.y / iResolution.y < uv.y || (iMouse.y == 0.0 && uv.y > 0.5)))\n        mustDither = mod(fragCoord.x + fragCoord.y, 2.0) < 1.0;\n    \n    // Click in the viewport to change the color reduction terminator\n    bool mustReduceColors = iMouse.x / iResolution.x < uv.x || (iMouse.x == 0.0 && uv.x > 0.5);\n    \n    \n    vec4 color = texture(iChannel0, uv);\n    if (mustReduceColors)\n    \tcolor.xyz = reduceColor(color.xyz, colorCountPerComponent, mustDither); // <- this reduces the color count per Channel\n    fragColor = color;\n}","name":"Image","description":"","type":"image"}]}