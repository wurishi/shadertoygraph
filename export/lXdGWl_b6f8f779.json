{"ver":"0.1","info":{"id":"lXdGWl","date":"1717150970","viewed":35,"name":"RayMarch Unique","username":"Khan","description":"Torus","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","torus","unique"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat Length(vec3 p,float getPow){\n    return sqrt(pow(p.x,getPow)+pow(p.y,getPow)+pow(p.z,getPow));\n}\nfloat sdCapsule(vec3 pos, vec3 start, vec3 end, float radius) {\n\tvec3 ab = end-start;\n    vec3 ap = pos-start;\n    \n    float t = dot(ab, ap) / pow(Length(ab,2.),2.0);// dot(ab, ab);\n    t = clamp(t, 0., 1.);\n    \n    //ab.y = ab.y + (sin(t*20.)/5.);\n    //radius = clamp(radius*(abs(sin(smoothstep(t*30.,0.0,10.)*(distance(start,end)*3.) ))), 0.1, 1.0);\n    \n    vec3 center = start + (t*(ab));\n    return  Length(pos-center,2.0)-radius;\n}\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r) {\n\tvec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    //t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t*ab;\n    \n    float x = length(p-c)-r;\n    float y = (abs(t-.5)-.5)*length(ab);\n    float e = length(max(vec2(x, y), 0.));\n    float i = min(max(x, y), 0.);\n    \n    return e+i;\n}\nfloat sdTorus(vec3 p, float mainR, float followR) {\n\tfloat x = length(p.xz)-mainR;\n    return length(vec2(x*clamp(abs(p.x),0.2,1.0), p.y))-followR;\n}\nfloat dBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\nfloat sphereSDF(vec3 p,float r){\n    return length(p)-r;\n}\nfloat planeSDF(vec3 p){\n    return p.y;\n}\n\nfloat GetDist(vec3 p){\n    vec3 start = vec3(-2,1,0);\n    vec3 end = vec3(2,1,0);\n    float p1 = planeSDF(p);\n    \n    vec3 sphPos = p;\n    sphPos.xz *= Rot(sin(iTime)/2.);\n    float s1 = dBox(sphPos+vec3(-2,-1,0),vec3(0.6));\n    float s2 = dBox(sphPos+vec3(2,-1,0),vec3(0.6));\n    float s3 = sphereSDF(sphPos+vec3(-2,-1,0),0.5);\n    float s4 = sphereSDF(sphPos+vec3(2,-1,0),0.5);\n    \n\n    vec3 addPosCap = vec3(0.0, 0.1, 0.0);\n    float radiusCapsules = 5.;\n    \n    float c1 = sdCapsule(sphPos+addPosCap,start+vec3(0.0, 0.0, 0.0)/radiusCapsules,end+vec3(0.0, 0.0, 0.0)/radiusCapsules,0.08);\n    float c2 = sdCapsule(sphPos+addPosCap,start+vec3(0.0, 1.0, 1.0)/radiusCapsules,end+vec3(0.0, 1.0, 1.0)/radiusCapsules,0.08);\n    float c3 = sdCapsule(sphPos+addPosCap,start+vec3(0.0, 1.0, -1.0)/radiusCapsules,end+vec3(0.0, 1.0, -1.0)/radiusCapsules,0.08);\n    \n    vec3 torPos = p;\n    torPos.xz *= Rot(sin(-iTime));\n    float t1 = sdTorus(torPos+vec3(0,-1.,0),2.0,0.2);\n    float b1 = dBox(p+vec3(0,-1,0), vec3(1.));\n    \n    float spheres = min(s1,s2);\n    float spheresSmall = min(s3,s4);\n    float capsules = min(min(c1,c2),c3);\n    float d = min(p1,c1/4.);\n    d = min(p1,t1/2.);\n    d = max(d,-spheres);\n    d = min(d,spheresSmall);\n    d = min(d,capsules);\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = abs( GetDist(p));\n        dO += dS;\n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetLight(vec3 p) {\n    vec3 lightPos = vec3(sin(iTime)*3., 4, cos(iTime)*5.);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l)*.5+.5, 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l);\n    if(p.y<.01 && d<length(lightPos-p)) dif *= .5;\n    \n    return dif*vec3(1.);//vec3(0.7,0.9,0.1);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n    \n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 4, -5);\n    ro.yz *= Rot(-m.y*2.+1.0);\n    ro.xz *= Rot(/*iTime*/.2-m.x*6.2831);\n    \n    vec3 rd = R(uv, ro, vec3(0,0,0), .7);\n\n    float d = RayMarch(ro, rd);\n    \n    if(d<MAX_DIST) {\n    \tvec3 p = ro + rd * d;\n    \n    \tcol = GetLight(p);\n    }\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}