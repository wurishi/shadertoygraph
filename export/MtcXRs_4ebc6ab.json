{"ver":"0.1","info":{"id":"MtcXRs","date":"1481142378","viewed":120,"name":"glowing triangles","username":"zproxy","description":"from https://www.shadertoy.com/view/MldXzf","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"Quake Logo\" by Krzysztof Narkowicz @knarkowicz\n\nconst float MATH_PI = float( 3.14159265359 );\n\nfloat VisibilityTerm( float roughness, float ndotv, float ndotl )\n{\n\tfloat m2\t= roughness * roughness;\n\tfloat visV\t= ndotl * sqrt( ndotv * ( ndotv - ndotv * m2 ) + m2 );\n\tfloat visL\t= ndotv * sqrt( ndotl * ( ndotl - ndotl * m2 ) + m2 );\n\treturn 0.5 / max( visV + visL, 0.00001 );\n}\n\nfloat DistributionTerm( float roughness, float ndoth )\n{\n\tfloat m2\t= roughness * roughness;\n\tfloat d\t\t= ( ndoth * m2 - ndoth ) * ndoth + 1.0;\n\treturn m2 / ( d * d * MATH_PI );\n}\n\nvec3 FresnelTerm( vec3 specularColor, float vdoth )\n{\n\tvec3 fresnel = clamp( 50.0 * specularColor.y, 0.0, 1.0 ) * specularColor + ( 1.0 - specularColor ) * pow( ( 1.0 - vdoth ), 5.0 );\n\treturn fresnel;\n}\n\nvec3 LightSpecular( vec3 normal, vec3 viewDir, vec3 lightDir, vec3 lightColor, float roughness, vec3 specularColor )\n{\n\tvec3 halfVec = normalize( viewDir + lightDir );\n\n\tfloat vdoth = clamp( dot( viewDir,\thalfVec\t ), 0.0, 1.0 );\n\tfloat ndoth\t= clamp( dot( normal,\thalfVec\t ), 0.0, 1.0 );\n\tfloat ndotv = clamp( dot( normal,\tviewDir  ), 0.0, 1.0 );\n\tfloat ndotl = clamp( dot( normal,\tlightDir ), 0.0, 1.0 );\n    \n   \tvec3\tf = FresnelTerm( specularColor, vdoth );\n\tfloat\td = DistributionTerm( roughness, ndoth );\n\tfloat\tv = VisibilityTerm( roughness, ndotv, ndotl );\n    \n    vec3 specular;\n\tspecular = lightColor * f * ( d * v * MATH_PI * ndotl );\n\treturn specular;\n}\n\nfloat Cylinder( vec3 p, float r, float height ) \n{\n\tfloat d = length( p.xz ) - r;\n\td = max( d, abs( p.y ) - height );\n\treturn d;\n}\n\nfloat Sphere( vec3 p, float s )\n{\n\treturn length( p ) - s;\n}\n\n \n\n\nfloat Box( vec3 p, vec3 b )\n{\n \n    \n    \n\tvec3 d = abs( p ) - b;\n\t\n    float filler = min( \n        \n        max( d.x, max( d.y, d.z ) )\n        \n        , 0.0 ) + length( max( d, 0.0 ) );\n    \n    \n    //if (p.y > 0.0)\n    //    return 200.0;\n    \n    return filler;\n   \n}\n\nfloat Substract( float a, float b )\n{\n    return max( a, -b );\n}\n\nfloat SubstractRound( float a, float b, float r ) \n{\n\tvec2 u = max( vec2( r + a, r - b ), vec2( 0.0, 0.0 ) );\n\treturn min( -r, max( a, -b ) ) + length( u );\n}\n\nfloat Union( float a, float b )\n{\n    return min( a, b );\n}\n\nfloat UnionRound( float a, float b, float k )\n{\n    float h = clamp( 0.5 + 0.5 * ( b - a ) / k, 0.0, 1.0 );\n    return mix( b, a, h ) - k * h * ( 1.0 - h );\n}\n\nfloat TriPrism( vec3 p, float rot )\n{        \n    vec3 q = abs( p );\n    \n     return max(\n        // creates some type of symmetry\n        q.y - 0.05, \n     \n        // vertical line\n        p.x * cos(rot) + p.z * sin(rot)   \n     );\n}\n\nvoid AddTriangle(\n    // spatial point\n    inout vec3 p, \n    inout float canvas,\n\tvec2 A,\t\n    vec2 B,\n\tvec2 C\n\t)\n{\n      \tvec2 a1 = A ;\n    \n    // looks like a steam engine\n        vec2 b1 = B;\n    \n        vec2 c1 = C;\n    \n    // A needs be to the right of B\n    \n    // need to check y too?\n    if (B.x > A.x)\n    {\n        a1 = B;\n        b1 = A;\n    }\n            \n    \n      \n        float slice2AC = TriPrism(  p + vec3(\n        \n        // up\n        c1.y,\n              // back\n              -0.0,\n              \n              // right\n              c1.x\n        ), \n                                \n                                // rot1 + MATH_PI + 0.8\n                               \n                                -atan(a1.y-c1.y, a1.x-c1.x) \n                               );\n    \n    \n    \n    // could we have atoolbar so we could move the dots?\n        float slice0BC = TriPrism(  p + vec3(\n        \n        // up\n        b1.y,\n              // back\n              -0.0,\n              \n              // right\n              b1.x\n        ),// rot1 + MATH_PI - 1.1\n                               \n                                -atan(b1.y-c1.y, b1.x-c1.x) + MATH_PI\n                               );\n    \n    \n    \n    // atan2(deltaY, deltaX)\n    float slice1BA = TriPrism(  p + vec3(\n        \n        // up\n        a1.y,\n              // back\n              -0.0,\n              \n              // right\n              a1.x \n        ), -atan(b1.y-a1.y, b1.x-a1.x));\n\n    \n    \n    \n        //float slice = min(slice2AC,min(slice1BA,slice0BC))                    ;\n\t\t//float slice = slice0BC;\n    //float slice = max(slice0BC, slice1BA);\n        float i = max(slice2AC,max(slice1BA,slice0BC))                    ;\n    \n    \n     \n    \n    \n    // need triangle markers?\n    //if (false)\n    // make A twice as big, while B moves\n     i = min(i,  Box(  p + vec3(a1.y,0.0,a1.x), vec3(\n                   \n                   // height\n                   0.2, \n                   \n                   //depth\n                   0.25, \n                   \n                   // width\n                   0.2)   )\n      );\n        \n    i = min(i,  Box(  p + vec3(b1.y,0.0,b1.x), vec3(\n                   \n                   // height\n                   0.1, \n                   \n                   //depth\n                   0.25, \n                   \n                   // width\n                   0.1)   )\n      );\n    \n        i = min(i,  Box(  p + vec3(c1.y,0.0,c1.x), vec3(\n                   \n                   // height\n                   0.1, \n                   \n                   //depth\n                   0.25, \n                   \n                   // width\n                   0.1)   )\n      );\n    \n    \n    // union\n    //canvas = min(canvas, i);\n    \n    canvas = min(i, canvas);\n}\n\nfloat Scene( vec3 p, mat3 localToWorld )\n{\n    // shadertoy should have time slider.\n    \n    p = p * localToWorld;\n    \n    \n    \n     \n    // can we move the objects?\n    \n    p += vec3(\n        \n        // up\n        0.0 ,\n              // back\n              -2.0,\n              \n              // right\n              0.0 );\n\n    vec2 a1 = vec2( 2.0,  0.6  + cos(iTime)) ;\n    // looks like a steam engine\n    vec2 b1 = vec2(1.75 + sin(iTime),  -1. + cos(iTime * 0.1));\n    vec2 c1 = vec2( 1.5, -1);\n\n    \n    // do we need some initial geometry?\n    float canvas1 = 10000.0;\n    AddTriangle(p, canvas1, a1, b1, c1);\n    \n    \n    \n      vec2 a2 = vec2( 0.5,  0.6  + cos(iTime)) ;\n    // looks like a steam engine\n    vec2 b2 = vec2(-1.25 + sin(iTime),  1);\n    vec2 c2 = vec2( -0.5, -1);\n\n    \n    // do we need some initial geometry?\n    //float canvas2 =  10000.0;\n    AddTriangle(p, canvas1, a2, b2, c2);\n    \n    return canvas1;\n    \n}\n\nvec2 CastRay( in vec3 ro, in vec3 rd, mat3 localToWorld )\n{\n    const float maxd = 15.0;\n    \n\tfloat h = 0.5;\n    float t = 0.0;\n    float steps = 0.0;\n   \n    for ( int i = 0; i < 150; ++i )\n    {\n        if ( h < 0.001 || t > maxd ) \n        {\n            break;\n        }\n        \n\t    h = Scene( ro + rd * t, localToWorld );\n        t += h;\n        steps += 0.03;\n    }\n\n    if ( t > maxd )\n    {\n        t = -1.0;\n    }\n\t\n    return vec2(t, steps);\n}\n\nvec3 SceneNormal( in vec3 pos, mat3 localToWorld )\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    Scene( pos + eps.xyy, localToWorld ) - Scene( pos - eps.xyy, localToWorld ),\n\t    Scene( pos + eps.yxy, localToWorld ) - Scene( pos - eps.yxy, localToWorld ),\n\t    Scene( pos + eps.yyx, localToWorld ) - Scene( pos - eps.yyx, localToWorld ) );\n\treturn normalize( -nor );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n\tp.x *= iResolution.x / iResolution.y;\n\n    // have comera zoom in and out to reveal boundaries\n\tvec3 rayOrigin \t= vec3( 0.0, -0.0, -3.5 + 0.1 *sin( iTime * 2.0) );\n    vec3 rayDir \t= normalize( vec3( p.x, p.y, 2.0 ) );\n    \n    float theta = -0.5 * MATH_PI;\n    mat3 rotX = mat3(\n        vec3( cos( theta ), sin( theta ), 0.0 ),\n        vec3( -sin( theta ), cos( theta ), 0.0 ),\n\t\tvec3( 0.0, 0.0, 1.0 )\n        );    \n    \n    vec2 mo = iMouse.xy / iResolution.xy;    \n    \n    float phi = 0.25 * MATH_PI + 10.0 * mo.x;    \n    //float phi = 0.25 * MATH_PI; \n    \n    // look straight at it. no mouse\n    //float phi = 0.5 * MATH_PI;    \n\n    mat3 rotY = mat3(\n        vec3( 1.0, 0.0, 0.0 ),\n        vec3( 0.0, cos( phi ), sin( phi ) ),\n        vec3( 0.0, -sin( phi ), cos( phi ) )\n        );\n    \n    //mat3 localToWorld = rotX * rotY;    \n    mat3 localToWorld = rotX * rotY;    \n\n\n\tvec3 color = texture( iChannel0, q ).yyy * 0.3;\n    \n\tvec2 result = CastRay( rayOrigin, rayDir, localToWorld );\n    \n    if ( result.x > 0.0 )\n    {\n      color = vec3(result.y*2.0, result.y*0.3, result.y*0.2);\n    }\n    else\n    {\n      color = vec3(0.0, result.y*abs(sin(iTime*1.8)),0.0);\n    }\n    \n    fragColor = vec4( color, 1.0 );\n}\n\n","name":"Image","description":"","type":"image"}]}