{"ver":"0.1","info":{"id":"3sjGzG","date":"1549205677","viewed":208,"name":"integrated atmospherics","username":"isak","description":"atmospherics, planet","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["raycast","planet","analytical"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.141592653589793\n\nstruct Ray { vec3 pos, dir; };\n\nmat3 rot_yz(float a){\n    float ca = cos(a), sa = sin(a);\n\treturn mat3(1.0, 0.0, 0.0, 0.0, ca, -sa, 0.0, sa, ca);\n}\n\nmat3 rot_xz(float a){\n    float ca = cos(a), sa = sin(a);\n\treturn mat3(ca, 0.0, -sa, 0.0, 1.0, 0.0, sa, 0.0, ca);\n}\n\nbool ball_hit(float r, in vec3 c, in Ray R, out vec3 enter, out vec3 exit){\n    \n    // returns true if we hit and where we enter / exit\n    \n    vec3 dv = c - R.pos;  \t\t\t     \n    float d = length(dv);   \t\t\t        \n    float D = (r*r)/(d*d);    \t\t\t     \n    \n   \tfloat cos_a = dot(dv/d, R.dir);\t\n    float discr = 1. - (1. - cos_a*cos_a)/D;\n    \n    if (discr < 0.) return false;\n        \n    float root  = sqrt(discr);\n    enter = R.pos + (d*cos_a - r*root)*R.dir;\n    exit  = R.pos + (d*cos_a + r*root)*R.dir;\n\n    return true;\n}\n\nvec3 integral(in vec3 c, in Ray R, float t){\n    return t*R.pos + .5*t*t*R.dir - t*c;\n}\n\nfloat atmosphere(float r, float w, in vec3 c, in Ray R, in vec3 light_pos) {\n    \n    /*\n\t\treturns atmospheric light\n\t\t\n\t\tr : radius\n        w : width in percentage of r\n        c : center\n\t*/\n    \n    vec3 light = normalize(c - light_pos);\n    \n    float r1 = r;     // outer radius\n    float r2 = w*r;   // inner radius\n    \n    // ray cast of two concentric balls\n    vec3 r1m, r1p, r2m, r2p;\n    bool hit1 = ball_hit(r1, c, R, r1m, r1p);\n    if (!hit1) return 0.0;    \n    bool hit2 = ball_hit(r2, c, R, r2m, r2p);\n\n    // ray parameter start - stop\n   \tfloat t0 = length(r1m - R.pos);\n    float t1 = hit2 ? length(r2m - R.pos) : length(r1p - R.pos);\n    \n    // integrate atmosphere normal along ray\n    vec3 integ_n = integral(c, R, t1) - integral(c, R, t0);\n    \n    // return integrated light along ray\n    return (1.0/r1)*dot(integ_n, -light);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    vec2 uv = 2.0*(fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    Ray ray;\n    ray.dir = normalize(vec3(tan(.5*60.*pi/180.)*uv, 1.0));\n    ray.pos = vec3(uv + vec2(6.0, 3.0),-20.0);\n\n    vec3 light = rot_yz(0.5*0.3*iTime)*rot_xz(0.3*iTime)*vec3(1.0, 0.0, 0.0);\n    \n    // parameters\n    float r1 = 6.5;      // radius\n    float w  = 0.97;     // width\n    vec3  c  = vec3(0);  // center\n    \n    // atmosphere\n\tfloat atm = atmosphere(r1, w, c, ray, light);\n    vec3 ent, ext; bool hit = ball_hit(r1*w, c, ray, ent, ext);\n    vec3 n = normalize(ent - c);\n    \n    // surface and stars\n    mat3 rot = rot_yz(0.33*iTime)*rot_xz(0.1*iTime); ent *= rot;\n    float surf = texture(iChannel0, uv/(r1*w - 0.1*dot(ent.xy, ent.xy))).x;\n    vec4 star = texture(iChannel1, fragCoord/iResolution.y);\n    \n    // surface lighting\n    float dref = dot(reflect(ray.dir,n), light);\n    float dotn = dot(n, light);\n    \n    fragColor = 1.5*atm*vec4(0.4, 0.7, 1.0, 0.0)\n              + (clamp(dref + 1.0*dotn, 0.0, 1.0))*float(hit)*surf*vec4(0.5,0.5,0,0)\n              + 0.8*clamp(pow(dref, 101.0), 0.01, 1.0)*vec4(1.0);\n    \n    fragColor += (1.0 - float(hit))*(star*star.zzzz);\n}","name":"Image","description":"","type":"image"}]}