{"ver":"0.1","info":{"id":"3sjBzc","date":"1590531228","viewed":117,"name":"Raymarching glitch sphere","username":"0xspig","description":"Followed Art of Codes raymarching tutorial and turned it into this.","likes":4,"published":1,"flags":64,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XljGRV","filepath":"https://soundcloud.com/tylersmckee/opening","previewfilepath":"https://soundcloud.com/tylersmckee/opening","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 300\n#define MAX_DIST 75.\n#define SURF_DIST .001\n\n//abs(sin(tan(p.z)*sin(p.y/p.x)/tan(iTime)))\n\nfloat GetDist(vec3 p)\n{\n\tvec4 s = vec4(cos(iTime), 0., sin(iTime) *2.+ 2.5, abs(sin(tan(p.z)*sin(p.y/p.x)/tan(iTime))));\n    \n    float sphereDist = length(p - s.xyz) - s.w;\n    float planeDist = sin(length(p.xy)) + cos(p.z /p.y + iTime * 3.) +1.;\n    \n    return min(sphereDist, planeDist);\n    \n}\n\nfloat RayMarch(vec3 ro, vec3 rd)\n{\n\tfloat dO = 0.;\n    for(int i = 0; i < MAX_STEPS; i++)\n    {\n    \tvec3 p = ro + rd * dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO > MAX_DIST || abs(dS) < SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p)\n{\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n    \tGetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx)    \n    );\n    \n    return normalize(n);\n}\n    \n\nfloat GetLight(vec3 p)\n{\n    vec3 lightPos = vec3(0., 3., .0);\n    vec3 l = normalize(lightPos - p);\n    vec3 n = GetNormal(p);\n    \n    float d = RayMarch(p+n*SURF_DIST*5., l);\n    \n  \tfloat dif = dot(l, n);\n    \n    if(d < length(lightPos - p))\n       dif *= smoothstep(0., .7, d);\n        \n\treturn dif;\t\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n \n    //sound\n    int tx = int((uv.x + 1.)*512.0/2.);\n    float wave = texelFetch( iChannel0, ivec2(tx,1), 0 ).x;\n    \n   \tvec3 col = vec3(uv.x, uv.y, 1.);\n    \n    vec3 ro = vec3(0.,.1, -10);\n    vec3 lp = vec3(0., 0., 2.);\n    vec3 f = normalize(lp - ro);\n    vec3 r = cross(f, vec3(.0, -1., .0));\n    vec3 u = cross(f, r);\n    \n    float zoom = 2.;\n    \n    vec3 i = (ro + f * zoom) + uv.x * r + uv.y*u;\n    \n    vec3 rd = normalize(i - ro);\n    \n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd * d;\n    \n    float l = GetLight(p);\n    col = l * vec3(.5,.6,.4);\n\tcol *= sin(uv.x/sin(uv.x/sin(iTime)*uv.y*30.)) * tan(sin(uv.y/uv.x*-300.*sin(iTime))) + .2;\n    col.g /= abs(cos(iTime/2.)* uv.x/uv.y/abs(sin(iTime))) + .5;\n    col.r /= abs(sin(iTime/4.)* uv.y/uv.x/abs(cos(iTime)))+ .5;\n    col.b /= ((wave * wave)-.5)*6.+sin(cos(iTime*uv.x*uv.x)/(uv.y*uv.y*tan(iTime)));\n\n\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}