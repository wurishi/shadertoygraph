{"ver":"0.1","info":{"id":"NlXyWs","date":"1648876155","viewed":62,"name":"FunShader","username":"lionjove","description":"Simple point light shader.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["light"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float lightPower = 1.0;\n\nvec3 GetMousePos()\n{\n    return vec3(iMouse.xy / iResolution.xy, 1);\n}\n\nfloat AmbientOcclusion(in vec2 coord)\n{\n    vec2 texelSize = 1.0 / vec2(textureSize(iChannel0, 0));\n    float result = 0.0;\n    for (int x = -2; x < 2; ++x) \n    {\n        for (int y = -2; y < 2; ++y) \n        {\n            vec2 offset = vec2(float(x), float(y)) * texelSize;\n            result += texture(iChannel0, coord + offset).r;\n        }\n    }\n    return result / (4.0 * 4.0);\n}\n\nvec4 ApplyLight(in vec4 diff, in vec3 pos, in vec3 norm)\n{\n    vec3 dir = GetMousePos() - pos;\n    \n    float cosTheta = clamp(dot(norm, normalize(dir)), 0.0, 1.0);\n    \n    float dist = length(dir);\n    float intencity = 1.0 / (dist * dist);\n    return diff * intencity * lightPower * cosTheta * AmbientOcclusion(pos.xy);\n}\n\nvec4 ApplyReflections(in vec3 norm)\n{\n   return texture(iChannel1, norm);\n}\n\nvec3 CalculateNormal(in vec2 coord)\n{\n    vec2 texelSize = 1.0 / vec2(textureSize(iChannel0, 0));\n    float strength = 8.0f;\n\n    // surrounding pixels\n    float tl = texture(iChannel0, coord + vec2(texelSize.x,  texelSize.y)).x;  // top left\n    float  l = texture(iChannel0, coord + vec2(texelSize.x,  0)).x;            // left\n    float bl = texture(iChannel0, coord + vec2(texelSize.x,  -texelSize.y)).x; // bottom left\n    float  t = texture(iChannel0, coord + vec2(0,            texelSize.y)).x;  // top\n    float  b = texture(iChannel0, coord + vec2(0,            -texelSize.y)).x; // bottom\n    float tr = texture(iChannel0, coord + vec2(-texelSize.x, texelSize.y)).x;  // top right\n    float  r = texture(iChannel0, coord + vec2(-texelSize.x, 0)).x;            // right\n    float br = texture(iChannel0, coord + vec2(-texelSize.x, -texelSize.y)).x; // bottom right\n\n    // sobel filter\n    float dX = (tr + 2.0 * r + br) - (tl + 2.0 * l + bl);\n    float dY = (bl + 2.0 * b + br) - (tl + 2.0 * t + tr);\n    float dZ = 1.0 / strength;\n\n    return normalize(vec3(dX, dY, dZ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 normalizedFragCoord = fragCoord / iResolution.xy;\n    \n    float height = texture(iChannel0, normalizedFragCoord).x;\n    \n    vec3 norm = CalculateNormal(normalizedFragCoord);\n    \n    //fragColor = ApplyReflections(norm);\n    \n    vec4 diff = vec4(0.04, 0.04, 0.04, 1);\n    \n    vec3 envdiff = texture(iChannel1, norm).xyz;\n    \n    diff = vec4(mix(diff.xyz, envdiff, height), 1.0);\n    \n    fragColor = ApplyLight(diff, vec3(normalizedFragCoord, height), norm);\n}\n","name":"Image","description":"","type":"image"}]}