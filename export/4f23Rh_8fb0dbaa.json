{"ver":"0.1","info":{"id":"4f23Rh","date":"1703820497","viewed":20,"name":"I deep fried it","username":"Orsonster","description":"I deep fried it","likes":0,"published":1,"flags":16,"usePreview":0,"tags":["deepfried"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float fieldOfView = 1.5;\n\nfloat sdSphere( vec3 p, float s ) {\n    return length(p) - s;\n}\n\nfloat sdBox( vec3 p, vec3 b ) {\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat smin( float a, float b, float k ) {\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min( a, b ) - h*h*h*k*(1.0/6.0);\n}\n\nvec3 rot3D(vec3 p, vec3 axis, float angle) {\n    // Rodrigues' Rotation Formula\n    return mix(dot(axis, p) * axis, p, cos(angle))\n            + cross(axis, p) * sin(angle);\n}\n\nmat2 rot2D(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    \n    return mat2(c, -s, s, c);\n}\n\nvec3 palette(float t) {\n    return .5+.5*cos(6.28318*(t+vec3(.3,.416,.557)));\n}\n\n\n// Distance to the scene\nfloat map(vec3 p) {\n    vec3 spherePosition = vec3(sin(iTime)*3.0, 0, 0);\n    float sphere = sdSphere(p - spherePosition, 1.0); // SphereSDF\n    \n    vec3 q = p;\n    \n    //q.xy *= rot2D(iTime);\n    q = rot3D(q, vec3(0, 0, 1), iTime);\n    q = rot3D(q, vec3(1, 0, 0), iTime);\n    \n\n    \n    //float box = sdBox(q, vec3(0.75));// BoxSDF\n    float box = sdBox(q, vec3(1.0));\n    \n    float ground = p.y + 0.75;\n\n    // closest distance to the scene\n    return min(ground, smin(box, sphere, 2.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mouse = (iMouse.xy * 2.0 - iResolution.xy) / iResolution.y;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    \n    \n    // Initialization\n    vec3 rayOrigin = vec3(0, 0, -3); // ray origin\n    vec3 rayDirection = normalize(vec3(uv * fieldOfView, 1)); // ray direction\n    vec3 finalPixelColor = vec3(0); // final pixel color\n    \n    float totalDistanceTravelled = 0.0;\n    \n    \n    //Camera Rotation\n    \n    //Vertical\n    rayOrigin.yz *= rot2D(-mouse.y);\n    rayDirection.yz *= rot2D(-mouse.y);\n    \n    //Horizontal\n    rayOrigin.xz *= rot2D(-mouse.x);\n    rayDirection.xz *= rot2D(-mouse.x);\n    \n    // Raymarching\n    for (int i = 0; i < 80; i++) {\n        vec3 p = rayOrigin + rayDirection * totalDistanceTravelled; // Position along the ray\n\n        float currentDistanceToScene = map(p); // Current distance to the scene\n\n        totalDistanceTravelled += currentDistanceToScene; // \"March\" the ray\n        \n        \n        // Clip Viewpoints\n        if (currentDistanceToScene < 0.001 || totalDistanceTravelled > 100.0) break;\n        \n\n        \n    }\n   \n    \n    \n    // Coloring\n    //finalPixelColor = vec3(totalDistanceTravelled * 0.2); // Color Based On Distance\n    finalPixelColor = palette(totalDistanceTravelled * 1.0);\n    \n    // Output to screen\n    fragColor = vec4(finalPixelColor, 1);\n}","name":"Image","description":"","type":"image"}]}