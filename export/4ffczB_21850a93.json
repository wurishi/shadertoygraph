{"ver":"0.1","info":{"id":"4ffczB","date":"1721230839","viewed":112,"name":"Dithered Sun #1","username":"AzazelN28","description":"Sun","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["sun","star"],"hasliked":0,"parentid":"tdVfRh","parentname":"Sun #1"},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592\n#define TAU PI * 2.\n\nconst vec4 colorMain = vec4(1., 0.9, 0.1, 1.);\nconst vec4 colorBlack = vec4(0);\nconst vec4 colorWhite = vec4(1);\n\nfloat from(float x, float min, float max) {\n    return (x - min) / (max - min);\n}\n\n\nfloat dither2x2(vec2 position, float brightness) {\n  int x = int(mod(position.x, 2.0));\n  int y = int(mod(position.y, 2.0));\n  int index = x + y * 2;\n  float limit = 0.0;\n\n  if (x < 8) {\n    if (index == 0) limit = 0.25;\n    if (index == 1) limit = 0.75;\n    if (index == 2) limit = 1.00;\n    if (index == 3) limit = 0.50;\n  }\n\n  return brightness < limit ? 0.0 : 1.0;\n}\n\n\nfloat dither4x4(vec2 position, float brightness) {\n  int x = int(mod(position.x, 4.0));\n  int y = int(mod(position.y, 4.0));\n  int index = x + y * 4;\n  float limit = 0.0;\n\n  if (x < 8) {\n    if (index == 0) limit = 0.0625;\n    if (index == 1) limit = 0.5625;\n    if (index == 2) limit = 0.1875;\n    if (index == 3) limit = 0.6875;\n    if (index == 4) limit = 0.8125;\n    if (index == 5) limit = 0.3125;\n    if (index == 6) limit = 0.9375;\n    if (index == 7) limit = 0.4375;\n    if (index == 8) limit = 0.25;\n    if (index == 9) limit = 0.75;\n    if (index == 10) limit = 0.125;\n    if (index == 11) limit = 0.625;\n    if (index == 12) limit = 1.0;\n    if (index == 13) limit = 0.5;\n    if (index == 14) limit = 0.875;\n    if (index == 15) limit = 0.375;\n  }\n\n  return brightness < limit ? 0.0 : 1.0;\n}\n\n\nfloat dither8x8(vec2 position, float brightness) {\n  int x = int(mod(position.x, 8.0));\n  int y = int(mod(position.y, 8.0));\n  int index = x + y * 8;\n  float limit = 0.0;\n\n  if (x < 8) {\n    if (index == 0) limit = 0.015625;\n    if (index == 1) limit = 0.515625;\n    if (index == 2) limit = 0.140625;\n    if (index == 3) limit = 0.640625;\n    if (index == 4) limit = 0.046875;\n    if (index == 5) limit = 0.546875;\n    if (index == 6) limit = 0.171875;\n    if (index == 7) limit = 0.671875;\n    if (index == 8) limit = 0.765625;\n    if (index == 9) limit = 0.265625;\n    if (index == 10) limit = 0.890625;\n    if (index == 11) limit = 0.390625;\n    if (index == 12) limit = 0.796875;\n    if (index == 13) limit = 0.296875;\n    if (index == 14) limit = 0.921875;\n    if (index == 15) limit = 0.421875;\n    if (index == 16) limit = 0.203125;\n    if (index == 17) limit = 0.703125;\n    if (index == 18) limit = 0.078125;\n    if (index == 19) limit = 0.578125;\n    if (index == 20) limit = 0.234375;\n    if (index == 21) limit = 0.734375;\n    if (index == 22) limit = 0.109375;\n    if (index == 23) limit = 0.609375;\n    if (index == 24) limit = 0.953125;\n    if (index == 25) limit = 0.453125;\n    if (index == 26) limit = 0.828125;\n    if (index == 27) limit = 0.328125;\n    if (index == 28) limit = 0.984375;\n    if (index == 29) limit = 0.484375;\n    if (index == 30) limit = 0.859375;\n    if (index == 31) limit = 0.359375;\n    if (index == 32) limit = 0.0625;\n    if (index == 33) limit = 0.5625;\n    if (index == 34) limit = 0.1875;\n    if (index == 35) limit = 0.6875;\n    if (index == 36) limit = 0.03125;\n    if (index == 37) limit = 0.53125;\n    if (index == 38) limit = 0.15625;\n    if (index == 39) limit = 0.65625;\n    if (index == 40) limit = 0.8125;\n    if (index == 41) limit = 0.3125;\n    if (index == 42) limit = 0.9375;\n    if (index == 43) limit = 0.4375;\n    if (index == 44) limit = 0.78125;\n    if (index == 45) limit = 0.28125;\n    if (index == 46) limit = 0.90625;\n    if (index == 47) limit = 0.40625;\n    if (index == 48) limit = 0.25;\n    if (index == 49) limit = 0.75;\n    if (index == 50) limit = 0.125;\n    if (index == 51) limit = 0.625;\n    if (index == 52) limit = 0.21875;\n    if (index == 53) limit = 0.71875;\n    if (index == 54) limit = 0.09375;\n    if (index == 55) limit = 0.59375;\n    if (index == 56) limit = 1.0;\n    if (index == 57) limit = 0.5;\n    if (index == 58) limit = 0.875;\n    if (index == 59) limit = 0.375;\n    if (index == 60) limit = 0.96875;\n    if (index == 61) limit = 0.46875;\n    if (index == 62) limit = 0.84375;\n    if (index == 63) limit = 0.34375;\n  }\n\n  return brightness < limit ? 0.0 : 1.0;\n}\n\nfloat ditherTexture8x8(vec2 position, float brightness) {\n  float limit = texture(iChannel2, position / 1024.).x;\n  return brightness < limit ? 0.0 : 1.0;\n}\n\nvec4 renderSun(in vec2 fragCoord) {\n    vec4 fragColor  = vec4(0);\n    \n    vec3 light = vec3(cos(iTime), .0, sin(iTime));\n    vec2 ratio = vec2(iResolution.x / iResolution.y, 1.);\n    vec2 pos = fragCoord / iResolution.xy;\n    vec2 npos = 2. * pos - 1.;\n    vec2 cpos = npos * ratio;\n    float apos = atan(cpos.y, cpos.x);\n    vec3 norm = normalize(vec3(cpos, sqrt(1. - dot(cpos, cpos))));\n    vec2 tpos = vec2(\n      atan(norm.z, norm.x) / TAU,\n      asin(norm.y) / TAU\n    );\n    \n    vec2 tdpos0 = vec2(\n        mod(iTime * .1, 1.),\n        mod(-iTime* 0.01, 1.)\n    ) + tpos;\n    vec4 tex0 = texture(\n      iChannel0,\n      tdpos0\n    );\n    \n    vec2 tdpos1 = vec2(\n        mod(iTime * .1, 1.),\n        mod(iTime * 0.01, 1.)\n   \t) + tpos;\n    vec4 tex1 = texture(\n        iChannel1,\n        tdpos1\n    );\n    \n    float rx = atan(norm.y, norm.x) / PI;\n    float ry = mod(iTime * 0.01, 1.);\n    vec2 rpos = vec2(rx, ry);\n    vec4 rtex0 = texture(\n        iChannel0,\n        rpos\n    );\n    vec4 rtex1 = texture(\n        iChannel1,\n        rpos\n    );\n    float incidence = dot(light, norm);\n    float dist = length(cpos);\n    float ndist = 1. - dist;\n    if (dist > 1.0) {\n        fragColor = vec4(0);\n        fragColor += mix(\n            colorMain,\n            colorBlack,\n            pow(dist - 1., .25)\n        );\n        \n        float ldist = 1.0 + rtex1.x * .75;\n        if (dist < ldist) {\n            vec4 corona = mix(\n                colorMain * 0.1,\n                colorBlack,\n                from(dist, 1.0, ldist)\n            );\n            fragColor += corona;\n        }\n        \n        float hdist = 1.0 + rtex0.x * 0.05 + rtex1.x * 0.1;\n        if (dist < hdist) {\n            vec4 corona = mix(\n                colorMain * 0.5,\n                colorBlack,\n                from(dist, 1.0, hdist)\n            );\n            fragColor += corona;\n        }\n        \n        float rdist = 1.0 + rtex0.x * 0.1;\n        if (dist < rdist) {\n            vec4 corona = mix(\n                colorMain + vec4(0.5, 0.5, 0.5, 1.),\n                colorBlack,\n                from(dist, 1.0, rdist)\n            );\n            fragColor += corona;\n        }\n    } else {\n    \tfragColor = vec4(\n            mix(\n                colorWhite * 0.1,\n                colorMain,\n            \t(tex0.x + tex1.x) * 0.5\n            )\n        ) * ndist;\n        \n        fragColor += vec4(\n            mix(\n                colorMain,\n                colorBlack,\n                pow(ndist, 0.8)\n            )\n        );\n        \n        fragColor += vec4(\n            mix(\n                colorMain * 0.7,\n                colorBlack,\n                pow(ndist, 0.09)\n            )\n        );\n    }\n    return fragColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  fragColor = renderSun(fragCoord);\n  float brightness = (fragColor.x + fragColor.y + fragColor.z) / 3.0;\n  fragColor = vec4(dither8x8(fragCoord, brightness));\n}","name":"Image","description":"","type":"image"}]}