{"ver":"0.1","info":{"id":"WdXfDj","date":"1589231081","viewed":78,"name":"circles and waves","username":"szczuro","description":"3 circles on a grid make nice wave pattern,\nI added some colours and rotation animation to make it look better.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["circles","grid","wave","pattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// simple helper to smoothstep\nfloat vsmooth(float c, float s, float val ) {\n    float v = s/2.;\n    return smoothstep(c-v,c+v,val);\n}\n\n// draw circle\nfloat circle(vec2 uv, float r, float thick, float fuz) {\n    float len = length(uv);\n    float b = thick/2.;\n   \treturn vsmooth(r-b,-fuz,len) + vsmooth(r+b,fuz,len);\n}\n\n// rotate uv in time \nvec2 uv_rotator(vec2 uv, float time) {\n    float a = sin(time*.02);\n    float s = 1.*sin(a);\n    float c = 2.*cos(a+.3);\n    // rotation\n    uv*= mat2(c, -s,s,c);\n    // offset\n    uv +=vec2(s,s)-vec2(c,c);\n    return uv;   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime*2.;\n\n    vec2 uv_g = 4.*(fragCoord-.5*iResolution.xy)/iResolution.y;\n    uv_g += length(uv_g-vec2(.5))/20.; // little disortion\n    uv_g =uv_rotator(uv_g,t); // uv rotation\n   \n    vec2 uv1 = fract(uv_g); // cell uv\n    vec2 uv2 = 1. - uv1;\n    vec2 uvc = fract(uv_g + .5);\n        \n    // prepare parameters\n    float fuz = .03;\n    float thick = sin(t * .2 / 1.) / 15. + .15;\n        \n    // waves patterns\n    float r = .5;\n    float wave1 = circle(uv1, r, thick, fuz);\n    float wave2 = circle(uv2, r, thick, fuz);\n    \n    // circle pattern\n    r /= 2.;\n    float c = circle(uvc - .5, r, thick, fuz);\n    \n    // whole pattern    \n    float p = (1. - wave1) + (1. - wave2) + (1. - c);\n    \n    // preapre color\n    float contrast = cos(t * .1) * .07 + uv_g.x*.02;\n    //contrast = clamp(contrast,-.1,.1);\n    p *= contrast;\n    float G = sin(t * .21) * .05 + .1;\n    float R = cos(t * .3) * .03 + .1;\n    \n    // mix\n    vec3 rgb = vec3(R - p * .2-.1, G, .5) + p ;\n    //vec3 col = vec3(rgb + p);\n\n    fragColor = vec4(rgb, 1.0); \n}","name":"Image","description":"","type":"image"}]}