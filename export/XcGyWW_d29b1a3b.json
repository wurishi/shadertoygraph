{"ver":"0.1","info":{"id":"XcGyWW","date":"1731902040","viewed":52,"name":"Audio scope - Phasing","username":"dray","description":"Effect: Phasing, Flanging (reel-to-reel tape recorder technique), Comb Filter\nRed plot is difference of signal and delayed signal which causes cancelation or reinforcement of frequencies.\nAlternating near impulse and white noise source.\n","likes":2,"published":1,"flags":8,"usePreview":0,"tags":["sound","scope"],"hasliked":0,"parentid":"MfdyWN","parentname":"Audio scope - sin error"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nEffect: Phasing, Flanging (reel-to-reel tape recorder technique), Comb Filter\nRed plot is difference of signal and delayed signal which causes cancelation or reinforcement of frequencies.\nAlternating near impulse and white noise source.\n*/\n\nvec3 plot(float y,float va,float vb,vec3 clr) {\n    return abs( y*2. - (va+vb) ) <= abs(va-vb)+1.1/iResolution.y ? clr : vec3(0);\n}\n\nvoid mainImage( out vec4 O, vec2 U ) {\n    U = U/iResolution.xy; // 0-1,0-1\n    float scale = 2./FREQ; // show 2 cycles of this frequency\n    float start = floor(iTime/scale)*scale;\n    vec2 v1 = sound( start + U.x*scale );\n    vec2 v2 = sound( start + (U.x+1.001)*scale );\n    vec3 col =\n      plot( U.y - .75, v1.y, v2.y, vec3(0,.9,0) ) +\n      plot( U.y - .25, v1.x, v2.x, vec3(0,0,1) ) + \n      plot( U.y - .5, v1.x-v1.y, v2.x-v2.y, vec3(.9,0,0) ) +\n      plot( U.y - .5, 0., 0., vec3(.3) );\n    O = vec4(col,1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI 3.141592653589793\n#define TAU (2.*PI)\n\n#define COS(X) cos(mod(X,TAU))\n\n#define FS 44100. // example sample rate\n\n#define FREQ  (FS/800.)\n\nfloat noise(int a) {\n  a = (a * 54321) ^ (a * 14873);\n  a ^= a >> 16; // graycode\n  a ^= a >> 8;\n  a ^= a >> 4;\n  a ^= a >> 2;\n  a ^= a >> 1;\n  return float(a & 65535)/65535. - .5;\n}  \n\n\nfloat tones(int samp) {\n    if ( samp/int(FS) % 20 > 10 )\n        return noise(samp);\n#if 1\n    return samp % int(FS/FREQ) < 4 ? 1. : 0.;\n#else\n    float sum=0., cnt=0., time=float(samp)/FS;\n    for ( float fc=FREQ; fc<5000.; fc+=FREQ )\n    {\n        sum += COS(time*fc*TAU);\n        cnt += 1.;\n    }\n    return sum/cnt;\n#endif    \n}\n\nvec2 sound(float t) {\n    int samp = int(t*FS);\n    float a = tones(samp);\n    float b = tones(samp-1-int((.5+.5*sin(t*TAU*.2))*FS/200.));\n    return vec2( a, b ) * .2;\n}\n","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[],"code":"\n// Fun stuff is in Common, not here\n\nvec2 mainSound( int samp, float time ) {\n    vec2 val=sound(time);\n    \n    // return val; <-- Not as interesting with headphones !\n    // The brain/ears have too little resolution without frequency cancellation\n    // & reinforcement in air before reaching the ears.\n    \n    return vec2(val.x-val.y);\n}\n","name":"Sound","description":"","type":"sound"}]}