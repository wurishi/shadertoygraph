{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// z = a*I+b => mag2 = |a|^2 + |b|^2\nfloat mag2(mat2 m) {\n\treturn abs(m[0][0])*abs(m[0][0]) + abs(m[1][0])*abs(m[1][0]);\n}\n\nconst int maxIter = 50;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 c = fragCoord.xy / iResolution.y;\n\tvec2 ratio = iResolution.xy / iResolution.y;\n\tvec2 m = iMouse.xy / iResolution.xy;\n\t//c = (c*2.0 - ratio)*m.y + vec2(m.x,0.0); // for mouse control, vertical shift and zoom\n\tc = (c*2.0 - ratio) + vec2(-0.5,0.0); // coordinates = complex plane\n\tmat2 mc = mat2(c.x, c.y, -c.y, c.x); // matrix representation of a complex number\n\t\n\tmat2 mz = mat2(0.0, 0.0, 0.0, 0.0); // inital number\n\tint nIter = 0; // number of iterations before breaking the loop\n\tint iterBreak = 0; // was the loop broken?\n\tfor(int i=0; i < maxIter; i++) {\n\t\tmz = mz*mz + mc; // iterate the sequence according to the mandelbrot set rule. z_{n+1} = z_n^2 + c\n\t\tif(mag2(mz) > 4.0 && iterBreak == 0) { // if the magnitude of z_n > 2 then end iteration\n\t\t\tnIter = i; // at which step is the iteration broken?\n\t\t\titerBreak = 1;\n\t\t}\n\t}\n\n\tif(iterBreak==0) nIter = maxIter;\n\t//float col = float(nIter)/float(maxIter); // constant coloring\n\t//float col = mod(float(nIter)+50.0*iTime, 50.0)/float(maxIter); // pulses out\n\tfloat col = (sin( 3.1415*(float(nIter)+iTime*5.0)/float(maxIter) )+1.0)*0.5;\n\n\tfragColor = vec4(col, col, col, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MsB3DG","date":"1392855492","viewed":205,"name":"Study 4: Mandelbrot","username":"vug","description":"Yet another Mandelbrot fractal\nUsed matrix representation of complex numbers","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal"],"hasliked":0,"parentid":"","parentname":""}}