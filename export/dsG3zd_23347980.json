{"ver":"0.1","info":{"id":"dsG3zd","date":"1679055435","viewed":56,"name":"nouns screensaver ⌐◨-◨","username":"huaizhe","description":"nouns screensaver ⌐◨-◨","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["web3theoffice"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The Office Screensaver Nouns version\n//⌐◨-◨\n\nfloat[8] nouns_frame(vec2 uv, float size, vec2 offset, vec3 squareColor) {\n    float rb_x = uv.x - offset.x; // right box x\n    float rb_y = uv.y - offset.y; // right box y\n    \n    float lb_x = uv.x + size*2.0 +size/3.0;\n    float lb_y = uv.y;\n    \n    //float leyex = uv.x*0.8;\n    //float leyey = uv.y*0.8;\n    \n    float nosex = uv.x + size + size/6.0;\n    float nosey = uv.y - size/6.0;\n    \n    float temples1x = lb_x + size + size/6.0;\n    float temples1y = uv.y - size/6.0;\n    \n    float temples2x = temples1x + size/3.0;\n    float temples2y = uv.y - size/6.0;\n    \n    float temples3x = temples2x + size/3.0;\n    float temples3y = uv.y - size/6.0;\n    \n    float temples4x = temples2x + size/3.0;\n    float temples4y = uv.y + size/6.0;\n    \n    float temples5x = temples2x + size/3.0;\n    float temples5y = temples4y + size/3.0;\n    \n    \n    float rb = max(abs(rb_x), abs(rb_y)) - size;\n    float lb = max(abs(lb_x), abs(lb_y)) - size;\n    float nose = max(abs(nosex), abs(nosey)) - size/6.0;\n    float temples1 = max(abs(temples1x), abs(temples1y)) - size/6.0;\n    float temples2 = max(abs(temples2x), abs(temples2y)) - size/6.0;\n    float temples3 = max(abs(temples3x), abs(temples3y)) - size/6.0;\n    float temples4 = max(abs(temples4x), abs(temples4y)) - size/6.0;\n    float temples5 = max(abs(temples5x), abs(temples5y)) - size/6.0;\n    \n    bool glasses_bool = (rb > 0. && lb>0. && nose>0. && temples1 > 0. && temples2 > 0. && temples3 > 0. && temples4 > 0. && temples5 > 0.);\n    \n    \n    \n    return float[](rb, lb, nose, temples1, temples2, temples3, temples4, temples5);\n    \n}\n\nfloat[2] nouns_lens(vec2 uv, float size, vec2 offset){\n    float rb_x = uv.x - offset.x; // right box x\n    float rb_y = uv.y - offset.y;\n    \n    float lb_x = uv.x + size*2. +size/3.0;\n    float lb_y = uv.y;\n    \n    float rb = max(abs(rb_x), abs(rb_y)) - size*4.0/6.0;\n    float lb = max(abs(lb_x), abs(lb_y)) - size*4.0/6.0;\n    \n    return float[](rb, lb);\n    \n}\n\n\nfloat[2] nouns_eyes(vec2 uv, float size, vec2 offset){\n    float rb_x = uv.x - offset.x - (size * 2.0/6.0); // right box x\n    float rb_y = uv.y - offset.y;\n    \n    float lb_x = uv.x + size*2. + size/3.0 - (size*2.0/6.0);\n    float lb_y = uv.y;\n    \n    float rb = max(abs(rb_x*2.), abs(rb_y)) - size*4.0/6.0;\n    float lb = max(abs(lb_x*2.), abs(lb_y)) - size*4.0/6.0;\n    \n    return float[](rb, lb);\n    \n}\n\n\n\n\nvec3 drawScene(vec2 uv, vec3 color) {\n  vec3 col = vec3(0);\n  float frames[8] = nouns_frame(uv, 0.1, vec2(0, 0), color); \n  float lens[2] = nouns_lens(uv, 0.1, vec2(0, 0));\n  float eyes[2] = nouns_eyes(uv, 0.1, vec2(0, 0));\n  \n  for (int i=0; i<8; i++){\n      col = mix(color, col, step(0., frames[i]));\n  }\n  \n  for (int i=0; i<2; i++){\n      col = mix(vec3(1.0, 1.0, 1.0), col, step(0.0, lens[i]));\n  }\n  \n  for (int i=0; i<2; i++){\n      col = mix(vec3(0.0, 0.0, 0.0), col, step(0.0, eyes[i]));\n  }\n  \n  return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float squareSize = 0.1; \n    int size_x = int(squareSize * iResolution.y*8.0/3.0);\n    int size_y = int(squareSize * iResolution.y);\n    int speed = 2;\n    \n    float rgb = 255.;\n    vec3[3] ballColors = vec3[](\n    vec3(43./rgb, 131./rgb, 246./rgb),\n    vec3(255./rgb, 239.0/rgb, 22.0/rgb),\n    vec3(243.0/rgb, 50.0/rgb, 44.0/rgb)\n    );\n    int colors = 3; // num of square color\n    \n    \n    int time = int(iTime*100.0)*speed;\n    int Xres = int(iResolution.x)-size_x*2;\n    int Yres = int(iResolution.y)-size_y*2;\n     \n    \n    int Xpos = abs(Xres - time % Xres * 2)+int(size_x);\n    int Ypos = abs(Yres - time % Yres * 2)+int(size_y);\n    \n    vec2 point = vec2(Xpos, Ypos)/iResolution.xy;\n    //point = point * iResolution.xy;\n    point.x = point.x * (iResolution.x / iResolution.y) + 10.0/6.0*squareSize;\n    \n    //uv.x = uv.x + 5.0/6.0*squareSize;\n    \n    \n    int numBound = time/(Xres/2) + time/(Yres/2);\n    \n    float timeWave = abs(sin(iTime));\n    //vec2 point = vec2(uv.x - timeWave, uv.y-timeWave);\n\n    vec2 offset = vec2(0.0, 0.0);\n    vec3 squareColor = ballColors[numBound%colors];\n    uv.x *= iResolution.x / iResolution.y;\n    // drawscene\n    vec3 col = drawScene(uv-point, squareColor);\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}