{"ver":"0.1","info":{"id":"dsfBDn","date":"1688613609","viewed":61,"name":"Ray Marching - Eduardo","username":"eduardokotaotomo","description":"Eduardo Kota Otomo - DRE 118147443\nUFRJ (Rio de Janeiro Federal University)\n\nTrabalho de computação gráfica.\nComputer graphics homework assignment.","likes":8,"published":1,"flags":0,"usePreview":1,"tags":["raymarching","ufrj"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Martijn Steinrucken\n//\n// https://twitter.com/the_artofcode?lang=en\n// https://www.youtube.com/TheArtOfCodeIsCool \n//\n// https://www.youtube.com/watch?v=PGtv-dBi2wE\n// https://www.youtube.com/watch?v=Ff0jJyyiVyw\n// https://www.youtube.com/watch?v=AfKGMUDWfuE\n// https://www.youtube.com/watch?v=Vmb7VGBVZJA\n//\n// https://michaelwalczyk.com/blog-ray-marching.html\n// https://www.lcg.ufrj.br/cwdc/13-webgl/shaderToy.mp4\n//\n// A very simple ray marching implementation,\n// with a few SDF functions: sphere, torus, box, cylinder.\n// Boolean operations are also available: \n// union, intersection, difference and blend.\n// \n// The beauty of the method is that there are no more polygons or vertices, \n// but objects are just scalar fields, given by Signed Distance Functions (SDFs).\n//\n// Paulo Roma\n// 17/07/2022\n// Eduardo Kota Otomo\n// 05/07/2023\n\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define SURF_DIST 0.01\n#define PI 3.1415925359\n\n// Rotation matrix.\nmat2 Rot (float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\n// SDF of a torus at the origin given its two radius.\nfloat dTorus(vec3 p, vec2 r) {\n    float x = length(p.xz) - r.x;\n    \n    return length(vec2(x, p.y)) - r.y;\n}\n\n// SDF of a box at the origin given its size (width, height and depth).\nfloat dBox(vec3 p, vec3 s) {\n    return length(max(abs(p) - s, 0.0));\n}\n\n\n// SDF of a sphere, given its center and radius.\nfloat dSphere(vec3 p, vec4 s) {\n    return length(p - s.xyz) - s.w;\n}\n\n\n// B + A\nfloat unionSDF (float sda, float sdb) {\n    return min(sda, sdb);\n}\n\n// B * A\nfloat intersectionSDF (float sda, float sdb) {\n    return max(sda, sdb);\n}\n\n// B - A\nfloat differenceSDF (float sda, float sdb) {\n    return max(-sda, sdb);\n}\n\n// Blend A and B\nfloat blendSDF(float sda, float sdb, float k) {\n    float h = clamp(0.5 + 0.5 * (sdb - sda) / k, 0.0, 1.0);\n    return mix(sdb, sda, h) - k * h * (1.0 - h);\n}\n\n// Scene SDF: signed distance function.\nfloat getDist(vec3 p) {\n    float planeDist = p.y;\n    \n    float s = sin(iTime);\n    float c = cos(iTime);\n    float s2 = sin(2.0*iTime);\n    float c2 = cos(2.0*iTime);\n    \n    \n    // box 1\n    vec3 bp1 = p - vec3(0, 1, 6); // center\n    bp1.xz += vec2 (s*4.0, c*4.0); // translation\n    bp1.xz *= Rot(4.0*iTime); // rotation\n    \n    // box 4 around box 1\n    vec3 bp4 = bp1;\n    bp4.xz += vec2 (s, c); // translation\n    bp4.xz *= Rot(2.0*iTime); // rotation\n    \n    \n    // torus 1\n    vec3 tp = p - vec3(0, 0.5, 6);\n    tp.y -= 0.6;\n    tp.xy *= Rot(2.0*iTime);\n    \n    // torus 2\n    vec3 tp2 = p - vec3(0, 0.5, 6);\n    tp2.y -= 0.6;\n    tp2.yz *= -Rot(iTime);\n    \n    // torus 3\n    vec3 tp3 = p - vec3(0, 0.5, 6);\n    tp3.y -= 0.6;\n    tp3.yz *= -Rot(0.5*iTime);   \n    tp3.xy *= Rot(0.5*iTime);\n    \n    \n    // shrinking and expanding box\n    vec3 bp2 = p - vec3(0, 1.15, 6.0);\n    bp2.x -= s*4.0;\n\n    \n    // blending spheres\n    vec3 p2 = p;\n    p2.xz += Rot(1.5*iTime)*vec2(0, 1.2); // wobble\n   \n\n    float sd  = dSphere(p, vec4(0, 1, 6 , 0.7+0.2*s2));\n    float sd2 = dSphere(p, vec4(0, 1.2, 6.0, 1.2));\n    float td  = dTorus (tp, vec2(1.2, 0.03));\n    float td2  = dTorus (tp2, vec2(1.5, 0.03));\n    float td3  = dTorus (tp3, vec2(2, 0.03));\n    float bd1  = dBox(bp1, vec3(0.2));\n    float bd4 = dBox(bp4, vec3(0.1));\n    float bd2 = dBox(bp2, vec3(0.7+0.3*c2,0.7+0.6*c2,0.5+0.2*c2));\n\n    \n    float sd3 = dSphere(p2, vec4(-s*3.0, 3, 5, 0.2));\n    float sd4 = dSphere(p2, vec4(0, 3, 5, 0.3));\n    float sd5 = dSphere(p2, vec4(s*3.0, 3, 5, 0.2));\n    \n    \n    \n    float d = min(sd, planeDist);\n    d = min(d, td);\n    d = min(d, td2);\n    d = min(d, td3);\n    d = min(d, bd1);\n    d = min(d, bd4);\n    d = min(differenceSDF(sd2, bd2), d);\n    d = min(blendSDF(sd3, sd4, 0.2), d);\n    d = min(blendSDF(sd4, sd5, 0.2), d);\n    \n    return d;\n}\n\n// Walk through empty spheres until the ray hits an object\n// or is beyond MAX_DIST, meaning no hit. \nfloat rayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.0;\n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd * dO;\n        float dS = getDist(p);\n        dO += dS;\n        if (dO > MAX_DIST || dS < SURF_DIST) break;\n    }\n    return dO;\n}\n\n// The normal is the gradient of the SDF scalar field at point p.\n// By using finite difference: \n// https://en.wikipedia.org/wiki/Finite_difference#Relation_with_derivatives \nvec3 getNormal(vec3 p) {\n    // arbitrary — should be smaller than any surface detail in your distance function, \n    // but not so small as to get lost in float precision\n    vec2 e = vec2(0.001, 0);\n    \n    vec3 n = \n        vec3(\n        getDist(p + e.xyy),\n        getDist(p + e.yxy),\n        getDist(p + e.yyx)) - \n        vec3(\n        getDist(p - e.xyy),\n        getDist(p - e.yxy),\n        getDist(p - e.yyx));\n        \n    return normalize(n);\n}\n\n// Phong illumination model, given a point and camera position.\nfloat getLight(vec3 p, vec3 ro) {\n    vec3 lightPos = vec3(0, 5, 6);\n    \n    lightPos.xz += vec2(sin(iTime), cos(iTime)) * 2.0;\n    \n    vec3 l = normalize(lightPos - p);\n    vec3 n = getNormal(p);\n    vec3 r = reflect(-l,n);\n    \n    // ambient component\n    float amb = 0.1;\n    // ambient reflection coefficient\n    float ka = 1.0;\n    \n    // diffuse component - apply Lambert's cosine law\n    float dif = clamp(dot(n, l), 0.0, 1.0);\n    // diffuse reflection coefficient\n    float kd = 0.8;\n    \n    // specular component\n    float shininess = 100.;\n    vec3 v = normalize(ro-p);\n    float spec = clamp(dot(r, v), 0.0, 1.0);\n    spec = pow(spec,shininess);\n    // specular reflection coefficient\n    float ks = 1.0;\n    \n    // slightly move point p in the direction of the normal,\n    // so the distance is not zero. Otherwise, the first hit \n    // will be at the plane.\n    float d = rayMarch(p + 2. * n * SURF_DIST , l);\n    \n    // cast a ray to the light\n    if (d < length(lightPos - p)) {\n        // point in the shadow\n        dif *= 0.1;\n        spec *= 0.5;\n    }\n    \n    // ambient + diffuse + specular components\n    return ka * amb + kd * dif + ks * spec;\n}\n\n// Fragment shader.\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // normalized pixel coordinates (from -0.5 to 0.5)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / min(iResolution.x, iResolution.y);\n\n    // camera position\n    vec3 ro = vec3(0, 2, 0);\n    \n    // projection plane z = 1\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    \n    // Rotate camera down about the x-axis\n    rd.yz *= Rot(PI * 10. / 180.); \n    \n    float d = rayMarch(ro, rd);\n    \n    // point hit by the ray\n    vec3 p = ro + rd * d;\n    \n    // illumination at point p\n    float light_intensity = getLight(p, ro);\n    \n    // dark grey\n    // vec3 background_color = vec3(.2, .2, .2);\n    vec3 background_color = texture(iChannel0, uv*vec2(1.,2.)).rgb;\n    \n    // Antique White color #FAEBD7\n    vec3 surface_color = vec3(250, 235, 215) / 255.;\n    \n    // pixel color\n    vec3 color;\n    \n    if (d < MAX_DIST) \n        // modulate surface color by the light intensity\n        color = surface_color * vec3(light_intensity);\n    else \n        color = background_color;\n\n    // output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}