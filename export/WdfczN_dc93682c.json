{"ver":"0.1","info":{"id":"WdfczN","date":"1584235427","viewed":145,"name":"Thinking about a donut","username":"Axioplase","description":"Raymarching an infinite grid. Based on (my own) https://www.shadertoy.com/view/WdsyzH. Thanks to mla for helping me address my issue! Added a torus to play with smooth union.","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","grid","torus","infinite"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Base code:\n///// \"RayMarching starting point\" \n//// by Martijn Steinrucken aka BigWings/CountFrolic - 2020\n//// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define MAX_STEPS 200\n#define MAX_DIST 10.\n#define SURF_DIST .001\n\n#define S(a, b, t) smoothstep(a, b, t)\n#define M(x, y, a) mix(x, y, a) \n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdLine(vec3 p, vec3 o, vec3 dir, float t) {\n    vec3 a = o;\n    vec3 b = a+dir;\n    vec3 bMinusA = b-a;\n    float h = min(t, max(-t, dot((p-a), bMinusA)/dot(bMinusA,bMinusA)));\n    //float h = dot(p-a, bMinusA)/dot(bMinusA,bMinusA);\n    float dist = length(p - a +-(b-a) * h )- 0.05;\n    return dist;\n}\n\nmat3 rx(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat3(1,0,0,0,c,-s,0,s,c);\n}\nmat3 ry(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat3(c,0,s,0,1,0,-s,0,c);\n}\nmat3 rz(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat3(c,-s,0,s,c,0,0,0,1);\n}\n\nfloat smoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\n\nvec4 sdTorus(vec3 p, vec2 t) {\n    p-=0.5;\n    p = rx(3.*sin(iTime*1.0244)) * p;\n    p = ry(2.72*sin(325.+iTime*1.79)) * p;\n    p = rz(1.35*sin(12.4+iTime*0.984)) * p;\n    p += vec3(sin(iTime/5.), cos(iTime/7.), sin(cos(iTime/8.)))/3.;\n    vec2 q = vec2(length(p.xz)-t.x,p.y);\n     \n    \n    return vec4(length(q)-t.y, 0.4, max(0., .9*sin(iTime)*sin(iTime)), max(0., .9*sin(iTime)*sin(iTime)));\n}\n\n\nvec4 grid(vec3 p) {\n    vec3 pp = mod(p+1.,3.)-1.;\n    float dist = MAX_DIST;\n    float x =0.5, y=0.5, z = 0.5;\n    float t1 = .5+0.5*sin(iTime);\n    float t2 = .5+0.5*cos(iTime*2.);\n    float t3 = .5+0.5*sin(3.*iTime+3.141592);\n    dist = smoothUnion(dist, sdLine(pp, vec3(x,y,z), vec3(1,0,0), MAX_DIST), 0.1);\n    dist = smoothUnion(dist, sdLine(pp, vec3(x,y,z), vec3(0,1,0), MAX_DIST), 0.1);\n    dist = smoothUnion(dist, sdLine(pp, vec3(x,y,z), vec3(0,0,1), MAX_DIST), 0.1);\n\n    \n    if (dist >= MAX_DIST) {\n    return vec4(dist, .00001, .00001, .00001);\n    }\n    return vec4(dist, max(0.,max(0.,.9*sin(iTime)*sin(iTime))), .04, .02);\n}\n\nvec4 GetDist(vec3 p) {\n    vec4 distCol;\n    vec4 distGrid = grid(p);\n    vec4 distTorus = sdTorus(p, vec2(0.5, 0.2));\n    float newDist = smoothUnion(distGrid.x, distTorus.x, 0.7+0.3*sin(iTime));\n    vec3 newCol = M(distGrid.yzw, distTorus.yzw, clamp(0.,1., distGrid.x/distTorus.x));\n    return vec4(newDist, newCol.x, newCol.y, newCol.z);\n}\n\nvec4 RayMarch(vec3 ro, vec3 rd) {\n    vec4 dCol = vec4(0.);\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dCol.x;\n        vec4 dS = GetDist(p);\n        dCol.x += dS.x;\n        dCol.yzw = dS.yzw;\n        if(dCol.x>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n    }\n    \n    return dCol;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n    \n    vec3 col = vec3(.00001);\n    \n    vec3 ro = 3.*vec3(cos(iTime/2.), sin(iTime/3.), -sin(cos(iTime)));\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0.5), 1.);\n\n    vec4 d = RayMarch(ro, rd);\n        \n    if(d.x<MAX_DIST) {\n    \tvec3 p = ro + rd * d.x;\n    \tvec3 n = GetNormal(p);\n        \n    \tfloat dif = clamp(dot(n, normalize(vec3(1,2,3)))*.5+.5, 0.2, 0.8);\n    \tcol = vec3(dif)*d.yzw;\n        col = d.yzw;\n        col *= 0.5+0.5*n.y;\n        col = M(col, vec3(0.), S(1.,10.,d.x));\n    }\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}