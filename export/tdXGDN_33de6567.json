{"ver":"0.1","info":{"id":"tdXGDN","date":"1546260141","viewed":416,"name":"RD Waves : Decomposed Shading ","username":"aiekick","description":"use mouse for move layers","likes":2,"published":3,"flags":48,"usePreview":0,"tags":["waves","shading","diffusion","rd","reaction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by Stephane Cuillerdier - @Aiekick/2018\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// my last for this year :)\n\n// use keyboard space for reset view\n// use mouse for draw\n\n// 1 : gray scott pattern\n// 2 : one channel extracted\n// 3 : add color base on gradient and applied from center along distance to center with radial offset\n// 4 : mix 4 channel of returned color\n\nvoid mainImage( out vec4 fragColor, in vec2 g )\n{\n    vec2 s = iResolution.xy;\n    vec2 v = (g+g-s)/s.y;\n    float a = atan(v.x,v.y) + length(v) * 4. - iTime * 2.;\n    float cc = get(iChannel0, g, iResolution.xy, 0., 0.).r;\n    float cc2 = get(iChannel0, g, iResolution.xy, cos(a)*.8, sin(a)*.8).r;\n    \n    fragColor = get(iChannel0, g, iResolution.xy, 0., 0.);\n    \n    if (iMouse.z > 0.) s.x += iMouse.x*3.;\n    \n    if (g.x > 0.25 * s.x)\n    \tfragColor = vec4(cc*cc);\n    if (g.x > 0.5 * s.x)\n    \tfragColor += vec4(.5, .2, 1,1)*max(cc2*cc2*cc2 - cc*cc*cc, 0.0)*iResolution.y*.2;\n    if (g.x > 0.75 * s.x)\n    \tfragColor = fragColor * .2 + fragColor.grba * .3;\n    \n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define mainImage(f,g) f = frag(iChannel0, g, iResolution.xy, iFrame, iMouse, iChannel1);","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"/* feed rate */ \t\t\t\t#define fr .01131\n/* kill rate */ \t\t\t\t#define kr .04\n/* laplacian corner ratio */\t#define lc .2\n/* laplacian side ratio */ \t\t#define ls .8\n/* key space */ \t\t\t\t#define kbd_space 32\n\nvec4 get(sampler2D sam, vec2 g, vec2 s, float x, float y)\n{\n    vec2 v = g + vec2(x,y);\n    //if (v.x < 0.) v.x = s.x;\n    //if (v.y < 0.) v.y = s.y;\n    //if (v.x > s.x) v.x = 0.;\n    //if (v.y > s.y) v.y = 0.;\n\treturn texture(sam, v / s);\n}\n\nvec4 frag(sampler2D sam, vec2 g, vec2 s, int i, vec4 mo, sampler2D kbd)\n{\n    vec4 l \t= \tget(sam, g, s, -1. ,  0.);\n\tvec4 lt = \tget(sam, g, s, -1. ,  1.);\n\tvec4 t \t= \tget(sam, g, s,  0. ,  1.);\n\tvec4 rt = \tget(sam, g, s,  1. ,  1.);\n\tvec4 r \t= \tget(sam, g, s,  1. ,  0.);\n\tvec4 rb = \tget(sam, g, s,  1. , -1.);\n\tvec4 b \t= \tget(sam, g, s,  0. , -1.);\n\tvec4 lb = \tget(sam, g, s, -1. , -1.);\n\tvec4 c \t= \tget(sam, g, s,  0. ,  0.);\n\tvec4 lap = (l+t+r+b)/4.*ls + (lt+rt+rb+lb)/4.*lc - c; // laplacian\n\n\tfloat re = c.x * c.y * c.y; // reaction\n    c.xy += lap.xy + vec2(fr * (1. - c.x) - re, re - (fr + kr) * c.y); // grayscott formula\n\t\n\tif (i < 2)\tc = vec4(1,0,0,1);\n\tif (texelFetch(kbd, ivec2(kbd_space,1),0).x > 0.) c = vec4(1,0,0,1);\n\tif (length(g - s * 0.5) < 5.) c = vec4(0,1,0,1);\n\tif (mo.z > 0.) if (length(g - mo.xy) < 5.) c = vec4(0,1,0,1);\n        \n\treturn vec4(clamp(c.xy, 0., 1e1), 0, 1);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define mainImage(f,g) f = frag(iChannel0, g, iResolution.xy, iFrame, iMouse, iChannel1);","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"#define mainImage(f,g) f = frag(iChannel0, g, iResolution.xy, iFrame, iMouse, iChannel1);","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"#define mainImage(f,g) f = frag(iChannel0, g, iResolution.xy, iFrame, iMouse, iChannel1);","name":"Buffer D","description":"","type":"buffer"}]}