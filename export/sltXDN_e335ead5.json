{"ver":"0.1","info":{"id":"sltXDN","date":"1639226200","viewed":88,"name":"Totalistic Rule CAs","username":"diabolix17","description":"Plug in any rule and it gives you the totalistic CA output starting from a single cell with value 1.","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["automata"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ZOOM 1.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    fragCoord.y = iResolution.y - fragCoord.y;\n    float state = texelFetch(iChannel0,ivec2((fragCoord.xy+vec2(iResolution.x/2.0,0.0)*(ZOOM-1.0))/ZOOM),0).r;\n\n    vec4 col;\n    col = vec4(1.0-vec3(state / 2.0),1.0);\n\n    fragColor = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define RULE 534\n\nint next_state(int sum, int rule){\n\n    int i = 0;\n    \n    while(i < sum && i < 7){\n    \n        rule -= rule % 3;\n        rule /= 3;\n        i++;\n    }\n    \n    return rule % 3;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    if(fragCoord.y < 1.0){\n        if(int(fragCoord.x) == int(iResolution.x/2.0)){\n            fragColor = vec4(1.0);\n        } else {\n            fragColor = vec4(vec3(0.0),1.0);\n        }\n    } else if(iTime > 0.1){\n        ivec2 p1 = ivec2(fragCoord.xy - vec2(1.0,1.0));\n        ivec2 p2 = ivec2(fragCoord.xy - vec2(0.0,1.0));\n        ivec2 p3 = ivec2(fragCoord.xy - vec2(-1.0,1.0));\n        float sum = texelFetch(iChannel0,p1,0).r + texelFetch(iChannel0,p2,0).r + texelFetch(iChannel0,p3,0).r;\n    \n        float col = float(next_state(int(sum),RULE));\n\n        fragColor = vec4(col);\n    \n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}