{"ver":"0.1","info":{"id":"wsSGRd","date":"1549692850","viewed":2887,"name":"Jasz Universe","username":"jaszunio15","description":"Created instead of studying :')\n\nIf you have good PC uncomment #define HIGH_QUALITY in Common tab. Enjoy!\n\nMusic: \nOceanvs Orientalis feat. Idil Mese - The Cube \nhttps://soundcloud.com/bar25/oceanvs-orientalis-the-cube-original-mix-promo-snippetbar25-042","likes":83,"published":1,"flags":64,"usePreview":0,"tags":["raymarching","volumetric","fog"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"ltlGW8","filepath":"https://soundcloud.com/bar25/oceanvs-orientalis-the-cube-original-mix-promo-snippetbar25-042","previewfilepath":"https://soundcloud.com/bar25/oceanvs-orientalis-the-cube-original-mix-promo-snippetbar25-042","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//License: CC BY 3.0\n//Author: Jan Mr√≥z (jaszunio15)\n\nfloat hash(vec3 v)\n{\n \treturn fract(sin(dot(v, vec3(11.51721, 67.12511, 9.7561))) * 1551.4172);   \n}\n\nfloat getNoiseFromVec3(vec3 v)\n{\n\tvec3 rootV = floor(v);\n    vec3 f = smoothstep(0.0, 1.0, fract(v));\n    \n    //Cube vertices values\n    float n000 = hash(rootV);\n    float n001 = hash(rootV + vec3(0,0,1));\n    float n010 = hash(rootV + vec3(0,1,0));\n    float n011 = hash(rootV + vec3(0,1,1));\n    float n100 = hash(rootV + vec3(1,0,0));\n    float n101 = hash(rootV + vec3(1,0,1));\n    float n110 = hash(rootV + vec3(1,1,0));\n    float n111 = hash(rootV + vec3(1,1,1));\n    \n    //trilinear interpolation\n    vec4 n = mix(vec4(n000, n010, n100, n110), vec4(n001, n011, n101, n111), f.z);\n    n.xy = mix(vec2(n.x, n.z), vec2(n.y, n.w), f.y);\n    return mix(n.x, n.y, f.x);\n}\n\nfloat volumetricFog(vec3 v, float noiseMod)\n{\n    float noise = 0.0;\n    float alpha = 1.0;\n    vec3 point = v;\n    for(float i = 0.0; i < NOISE_LAYERS_COUNT; i++)\n    {\n        noise += getNoiseFromVec3(point) * alpha;\n     \tpoint *= NOISE_SIZE_MULTIPLIER;\n        alpha *= NOISE_ALPHA_MULTIPLIER;\n    }\n    \n    //noise = noise / ((1.0 - pow(NOISE_ALPHA_MULTIPLIER, NOISE_LAYERS_COUNT))/(1.0 - NOISE_ALPHA_MULTIPLIER));\n    noise *= 0.575;\n\n    //edge + bloomy edge\n#ifdef MUTATE_SHAPE\n    float edge = 0.1 + getNoiseFromVec3(v * 0.5 + vec3(iTime * 0.03)) * 0.8;\n#else\n    float edge = 0.5;\n#endif\n    noise = (0.5 - abs(edge * (1.0 + noiseMod * 0.05) - noise)) * 2.0;\n    return (smoothstep(1.0 - SHARPNESS * 2.0, 1.0 - SHARPNESS, noise * noise) + (1.0 - smoothstep(1.3, 0.6, noise))) * 0.2;\n}\n\n\nvec3 nearPlanePoint(vec2 v, float time)\n{\n \treturn vec3(v.x, NEAR_PLANE * (1.0 + sin(time * 0.2) * 0.4), v.y);   \n}\n\nvec3 fogMarch(vec3 rayStart, vec3 rayDirection, float time, float disMod)\n{\n    float stepLength = RENDER_DISTANCE / float(RAYS_COUNT);\n \tvec3 fog = vec3(0.0);   \n    vec3 point = rayStart;\n    \n    for(int i = 0; i < RAYS_COUNT; i++)\n    {\n     \tpoint += rayDirection *stepLength;\n        fog += volumetricFog(point, disMod) //intensity\n            * mix(COLOR1, COLOR2 * (1.0 + disMod * 0.5), getNoiseFromVec3((point + vec3(12.51, 52.167, 1.146)) * 0.5)) //coloring\n            * mix(1.0, getNoiseFromVec3(point * 40.0) * 2.0, DITHER)\t//Dithering\n            * getNoiseFromVec3(point * 0.2 + 20.0) * 2.0;\t//Cutting big holes\n        \n        stepLength *= STEP_MODIFIER;\n    }\n    \n    //There is a trick\n    //Cutting mask in result, it will fake dynamic fog change, cover imperfections and add more 3D feeling\n   \tfog = (fog / float(RAYS_COUNT)) * (pow(getNoiseFromVec3((rayStart + rayDirection * RENDER_DISTANCE)), 2.0) * 3.0 + disMod * 0.5);\n\t\n    return fog;\n}\n\n//Getting kick volume from spectrum\nfloat getBeat()\n{\n \tfloat sum = 0.0;\n    for (float i = 0.0; i < 16.0; i++)\n    {\n     \tsum += texture(iChannel0, vec2(i * 0.001 + 0.0, 0.0)).r;   \n    }\n    return smoothstep(0.6, 0.9, pow(sum * 0.06, 2.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime;\n    float musicVolume = getBeat();\n    vec2 res = iResolution.xy;\n    vec2 uv = (2.0 * fragCoord - res) / res.x;\n    \n    //Random camera movement\n    vec3 cameraCenter = vec3(sin(time * CAMERA_SPEED) * 10.0, time * CAMERA_SPEED * 10.0, cos(time * 0.78 * CAMERA_SPEED + 2.14) * 10.0);\n    \n    //Creating random rotation matrix for camera\n    float angleY = sin(time * CAMERA_ROTATION_SPEED * 2.0);\n    float angleX = cos(time * 0.712 * CAMERA_ROTATION_SPEED);\n    float angleZ = sin(time * 1.779 * CAMERA_ROTATION_SPEED);\n    mat3 rotation =   mat3(1, 0, \t\t\t0,\n                           0, sin(angleX),  cos(angleX),\n                           0, -cos(angleX), sin(angleX))\n        \t\t\t* mat3(sin(angleZ),  cos(angleZ), 0,\n                           -cos(angleZ), sin(angleZ), 0,\n                           0, \t\t\t 0, \t\t  1)\n        \t\t\t* mat3(sin(angleY),  0, cos(angleY),\n                           0, \t\t\t 1, 0,\n                           -cos(angleY), 0, sin(angleY));\n    \n    vec3 rayDirection = rotation * normalize(nearPlanePoint(uv, time));\n    vec3 rayStart = rayDirection * 0.2 + cameraCenter;\t//Ray start with little clipping\n    \n    //Thanks to adx for jittering tip, looks and works really better with this line:\n    rayStart += rayDirection * (hash(vec3(uv + 4.0, fract(iTime) + 2.0)) - 0.5) * JITTERING;\n    \n    vec3 fog = fogMarch(rayStart, rayDirection, time, musicVolume);\n    \n    //postprocess\n    fog *= 2.5 * BRIGHTNESS;\n    fog += 0.07 * mix(COLOR1, COLOR2, 0.5);\t//Colouring the darkness\n    fog = sqrt(smoothstep(0.0, 1.5, fog)); //Dealing with too bright areas (sometimes it happen)\n    \n    fragColor = vec4(fog * smoothstep(0.0, 10.0, iTime), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//Generation settings\n#define NOISE_ALPHA_MULTIPLIER 0.5\n#define NOISE_SIZE_MULTIPLIER 1.8\n\n//Uncomment to disable fog shape animation over time\n#define MUTATE_SHAPE\n\n//Rendering settings\n\n//Uncoment to get high quality version (if you have good PC)\n//#define HIGH_QUALITY\n\n#ifdef HIGH_QUALITY\n    #define RAYS_COUNT 150\n    #define STEP_MODIFIER 1.007\n    #define SHARPNESS 0.009\n\t#define NOISE_LAYERS_COUNT 5.0\n\t#define JITTERING 0.03\n#else\n    #define RAYS_COUNT 54\n    #define STEP_MODIFIER 1.0175\n    #define SHARPNESS 0.02\n\t#define NOISE_LAYERS_COUNT 4.0\n\t#define JITTERING 0.08\n#endif\n\n#define DITHER 0.3\n#define NEAR_PLANE 0.6\n#define RENDER_DISTANCE 2.0\n\n//Colors\n#define BRIGHTNESS 5.0\n#define COLOR1 vec3(0.0, 1.0, 1.0)\n#define COLOR2 vec3(1.0, 0.0, 0.9)\n\n//Camera and time\n#define TIME_SCALE 1.0\n#define CAMERA_SPEED 0.04\n#define CAMERA_ROTATION_SPEED 0.06\n#define FOG_CHANGE_SPEED 0.02","name":"Common","description":"","type":"common"}]}