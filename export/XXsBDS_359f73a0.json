{"ver":"0.1","info":{"id":"XXsBDS","date":"1728849465","viewed":11,"name":"Apple Logo Project1","username":"ac791228","description":"apple logo","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["apple"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.14159265358979323846264\n\nfloat sdCircle(vec2 uv, float r, vec2 center) {\n  float x = uv.x - center.x;\n  float y = uv.y - center.y;\n\n  return length(vec2(x, y)) - r;\n}\n\nfloat sdSquare(vec2 uv, float size, vec2 center) {\n  float x = uv.x - center.x;\n  float y = uv.y - center.y;\n\n  return max(abs(x), abs(y)) - size;\n}\n\nfloat sdEllipse(vec2 uv, float a, float b, float c, vec2 center) {\n  float x = uv.x - center.x;\n  float y = uv.y - center.y;\n\n  return pow(x, 2.0) / (a * a) + pow(y, 2.0) / (b * b) - c;\n}\n\nvec2 rotate(vec2 uv, float degree) {\n  degree = radians(degree);\n  return mat2(cos(degree), sin(degree), -sin(degree), cos(degree)) * uv;\n}\n\nfloat checkDegree(vec2 uv, vec2 center, float startDegree, float targetDegree) {\n  float angle = atan(uv.y - center.y, uv.x - center.x);\n  if (angle < 0.0) {\n    angle += 2.0 * pi;\n  }\n  \n  float startRad = radians(startDegree);\n  float targetRad = radians(targetDegree);\n  if (angle >= startRad && angle <= targetRad) {\n    return -1.0;\n  } \n  else {\n    return 0.0; \n  }\n}\n\nvec3 drawScene(vec2 uv) {\n  vec3 col = vec3(0.0);\n  float res;\n  vec2 center;\n  {\n      vec2 symmetryX = uv;\n      symmetryX.x = abs(symmetryX.x);\n\n      center = vec2(0.015, -0.07);\n      float e1 = sdEllipse(rotate(symmetryX, 30.0), 0.3, 0.6, 0.2, center);\n      float degree1 = checkDegree(symmetryX, center, 50.0, 70.0);\n      e1 = max(e1, degree1);\n      res = min(res, e1);\n\n      center = vec2(0.035, -0.08);\n      float e2 = sdEllipse(rotate(symmetryX, 20.0), 0.3, 0.6, 0.2, center);\n      float degree2 = checkDegree(symmetryX, center, 40.0, 60.0);\n      e2 = max(e2, degree2);\n      res = min(res, e2);\n\n      center = vec2(0.0355, -0.07);\n      float e3 = sdEllipse(rotate(symmetryX, 10.0), 0.3, 0.6, 0.2, center);\n      float degree3 = checkDegree(symmetryX, center, 0.0, 40.0);\n      e3 = max(e3, degree3);\n      res = min(res, e3);\n\n      center = vec2(0.028, -0.025);\n      float e4 = sdEllipse(rotate(symmetryX, 0.0), 0.3, 0.6, 0.2, center);\n      float degree4 = checkDegree(symmetryX, center, 330.0, 350.0);\n      e4 = max(e4, degree4);\n      res = min(res, e4);\n\n      center = vec2(0.027, -0.04);\n      float e5 = sdEllipse(rotate(symmetryX, 0.0), 0.3, 0.6, 0.2, center);\n      float degree5 = checkDegree(symmetryX, center, 320.0, 340.0);\n      e5 = max(e5, degree5);\n      res = min(res, e5);\n\n      center = vec2(0.025, -0.06);\n      float e6 = sdEllipse(rotate(symmetryX, 0.0), 0.3, 0.6, 0.2, center);\n      float degree6 = checkDegree(symmetryX, center, 320.0, 340.0);\n      e6 = max(e6, degree6);\n      res = min(res, e6);\n\n      center = vec2(0.025, -0.044);\n      float e7 = sdEllipse(rotate(symmetryX, 0.0), 0.3, 0.7, 0.2, center);\n      float degree7 = checkDegree(symmetryX, center, 305.0, 330.0);\n      e7 = max(e7, degree7);\n      res = min(res, e7);\n\n      center = vec2(0.035, -0.01);\n      float e8 = sdEllipse(rotate(symmetryX, 0.0), 0.3, 0.7, 0.2, center);\n      float degree8 = checkDegree(symmetryX, center, 280.0, 300.0);\n      e8 = max(e8, degree8);\n      res = min(res, e8);\n\n      center = vec2(0.06, 0.007);\n      float e9 = sdEllipse(rotate(symmetryX, 0.0), 0.3, 0.7, 0.2, center);\n      float degree9 = checkDegree(symmetryX, center, 260.0, 275.0);\n      e9 = max(e9, degree9);\n      res = min(res, e9);\n\n      center = vec2(0.05, -0.1);\n      float e10 = sdEllipse(rotate(symmetryX, 10.0), 0.3, 0.6, 0.2, center);\n      float degree10 = checkDegree(symmetryX, center, 90.0, 110.0);\n      e10 = max(e10, degree10);\n      res = min(res, e10);\n      \n      center = vec2(0.00, -0.18);\n      float e11 = sdSquare(symmetryX, 0.1, center);\n      float degree11 = checkDegree(symmetryX, center, 0.0, 360.0);\n      e11 = max(e11, degree11);\n      res = min(res, e11);\n\n      center = vec2(0.00, 0.005);\n      float e12 = sdSquare(symmetryX, 0.12, center);\n      float degree12 = checkDegree(symmetryX, center, 0.0, 360.0);\n      e12 = max(e12, degree12);\n      res = min(res, e12);\n\n      center = vec2(0.07, -0.084);\n      float e13 = sdEllipse(rotate(symmetryX, 10.0), 0.3, 0.6, 0.2, center);\n      float degree13 = checkDegree(symmetryX, center, 81.0, 100.0);\n      e13 = max(e13, degree13);\n      res = min(res, e13);\n\n      res = step(0., res);\n      col = mix(vec3(1.0), col, res);\n\n      center = vec2(0.00, -0.528);\n      float e14 = sdEllipse(rotate(symmetryX, 0.0), 0.2, 0.8, 0.1, center);\n      float degree14 = checkDegree(symmetryX, center, 83.0, 90.0);\n      e14 = max(e14, degree14);\n      res = e14;\n\n      center = vec2(0.00, 0.383);\n      float e15 = sdEllipse(rotate(symmetryX, 0.0), 0.2, 0.8, 0.1, center);\n      float degree15 = checkDegree(symmetryX, center, 270.0, 275.0);\n      e15 = max(e15, degree15);\n      res = min(e14, e15);\n\n      res = step(0., res); \n      col = mix(vec3(0.0), col, res);\n  }\n  \n  {\n      // bite - black\n      center = vec2(-0.055, 0.23);\n      float e1 = sdEllipse(rotate(uv, 20.0), 0.12, 0.45, 0.03, center);\n      float degree1 = checkDegree(uv, center, 0.0, 360.0);\n      e1 = max(e1, degree1);\n      res = e1;\n      \n      res = step(0., res); \n      col = mix(vec3(1.0), col, res);\n      \n      // leaf - white\n      center = vec2(-0.18, 0.03);\n      float e2 = sdEllipse(rotate(uv, 175.0), 0.25, 0.4, 0.1, center);\n      float degree2 = checkDegree(uv, center, 0.0, 360.0);\n      e2 = max(e2, degree2);\n      res = e2;\n      \n      res = step(0., res); \n      col = mix(vec3(0.0), col, res);\n  }\n  \n  // color\n  {\n      if(col == vec3(1.0))\n      {\n          if(uv.y > 0.08)\n          {\n              col = vec3(0.378, 0.734, 0.266);\n          }\n          else if(uv.y > 0.00)\n          {\n              col = vec3(0.988, 0.723, 0.133);\n          }\n          else if(uv.y > -0.08)\n          {\n              col = vec3(0.958, 0.512, 0.098);\n          }\n          else if(uv.y > -0.16)\n          {\n              col = vec3(0.879, 0.215, 0.234);\n          }\n          else if(uv.y > -0.24)\n          {\n              col = vec3(0.56, 0.227, 0.594);\n          }\n          else if(uv.y > -0.32)\n          {\n              col = vec3(0., 0.618, 0.863);\n          }\n      }\n  }\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord/iResolution.xy; // <0, 1>\n  uv -= 0.5; // <-0.5,0.5>\n\n  vec3 col = drawScene(uv);\n  fragColor = vec4(col,1.0); // Output to screen\n}","name":"Image","description":"","type":"image"}]}