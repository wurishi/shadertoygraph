{"ver":"0.1","info":{"id":"McG3Wh","date":"1712677076","viewed":65,"name":"hidden cube","username":"tono","description":"I wrote cool visuals with code as part of my rehabilitation","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot(float a ){return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\n\n#define LOOP 2 \n#define TT(x,y,z) (floor(x / z) + pow(fract(x / z),y)) * z\nfloat pi = acos(-1.);\nvec2 boxes(vec3 p){\n\tfloat o = 0.;\n    \n    vec3 pp = p;\n    vec3 s = vec3(1.,1.,1.);\n\tfloat t = TT(iTime/7. + p.y/3., 5.,pi);\n    pp.xz *= rot(t + pi/3.);\n    \n    pp -= clamp(pp,-s,s);    \n    //pp.y += sin(time + p.x*2.);\n    o = length(pp) - .01;\n    \n    for(int i = 1; i < LOOP; i++)\n    {\n        \n        //s = s / 1;\n        //p.y += float(i) ;\n        s = vec3(1.,0.5,0.5);\n        float t = TT(iTime/7. + p.y/3., 5.,pi);\n        pp.zy *= rot(0.5 + float(i) + iTime);\n    \tpp.xz *= rot(t + pi/3.);\n        pp -= clamp(pp,-s,s);   \n        float u = length(pp) - 0.3;\n       // o = max(-o,u);\n        \n        o /= u;\n    }\n    \n    return vec2(o,0.);\n}\n\nvec2 map(vec3 p){\n\tvec2 o = vec2(0.);\n    o = boxes(p);\n    return o;\n}\n\nvec2 march(vec3 cp , vec3 rd){\n\tfloat depth  = 0.;\n    \n    for(int i = 0 ; i < 99 ; i++){\n    \tvec2 d = map( cp + rd * depth );\n        if(abs(d.x)  < 0.001){\n        \treturn vec2(depth , d.y);\n    \t}\n        depth += d.x;\n    }\n\treturn vec2(-depth);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n\t\n    vec3 target = vec3(0.,0.,0.);\n    vec3 cp = vec3(0.,1.,-7.);\n    cp.y += tan(TT(iTime/1. , 36., .1) );\n    cp.z += sin(cp.y + iTime);\n    cp.xz *= rot(TT(iTime , 23.,1.));\n    vec3 cd = normalize(target - cp );\n    vec3 cs = normalize(cross(cd , vec3(0.,1.,0.) ) );\n    vec3 cu = normalize(cross(cs,cd));\n    \n    float fov = 2.5;\n    vec3 rd = normalize(cd * fov + p.x * cs + p.y * cu);\n    \n    vec3 col = vec3(0.);\n    \n    vec2 d = march(cp , rd);\n    \n    if(d.x > 0.){\n    \tvec3 pos = cp + rd * d.x;\n        \n        col = vec3(1.) * exp(-0.003 * d.x * d.x * d.x);\n    }\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}