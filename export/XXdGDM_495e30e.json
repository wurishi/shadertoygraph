{"ver":"0.1","info":{"id":"XXdGDM","date":"1716566020","viewed":49,"name":"raymarchingTestByMouse","username":"JasonQin","description":"raymarchingTestByMouse","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 200\n#define MAX_DIST 200.0\n#define SURF_DIST 0.001\n\nfloat GetDist(vec3 p,vec2 fragCoord){\n    \n    //鼠标位置\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    vec2 mouseView = (mouse - 0.5)*2.0;\n    mouseView.y *= iResolution.y/iResolution.x;\n    \n    //球位置与半径\n    vec4 s = vec4(mouseView.x*10.0,1.0,mouseView.y*10.0+5.0,(sin(iTime)+1.0)/3.0+0.2);\n    \n    vec3 boxCenter = vec3(-3.0, 1.0, 10.0); \n    vec3 boxHalfSize = vec3(1, 1, 1.0); \n    vec3 d = abs(p - boxCenter) - boxHalfSize;\n    float boxDist = length(max(d, 0.0)) + min(max(d.x, max(d.y, d.z)), 0.0);\n    \n    float sphereDist = length(p - s.xyz) - s.w;\n    float planeDist = p.y;\n    return min(boxDist,min(sphereDist,planeDist));\n}\n\n\nfloat RayMarch(vec3 ro, vec3 rd,vec2 fragCoord){\n    float d = 0.0;\n    for(int i = 0;i<MAX_STEPS;i++){\n        vec3 p = ro + rd * d;\n        float ds = GetDist(p,fragCoord);\n        d += ds;\n        if(d > MAX_DIST || ds < SURF_DIST) break;\n    }\n    return d;\n}\n\n//有限差分函数\nvec3 GetNormal(vec3 p,vec2 fragCoord) {\n    float d = GetDist(p,fragCoord);\n    vec2 e = vec2(0.001, 0);\n    //扰动\n    vec3 n = d - vec3(\n        GetDist(p - vec3(e.x, e.y, e.y),fragCoord),\n        GetDist(p - vec3(e.y, e.x, e.y),fragCoord),\n        GetDist(p - vec3(e.y, e.y, e.x),fragCoord)\n    );\n    return normalize(n);\n}\n\nfloat GetLight(vec3 p, vec3 lightPos,vec2 fragCoord){\n    vec3 l = normalize(lightPos - p);\n    vec3 n = GetNormal(p,fragCoord);\n    float dif = clamp(dot(n,l),0.0,1.0);\n    float d = RayMarch(p+n*SURF_DIST*2.0,l,fragCoord);\n    if(d<length(lightPos - p)) dif*=0.1;\n    return dif;\n}\n \nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    vec2 mouseView = (mouse - 0.5)*2.0;\n    mouseView.y *= iResolution.y/iResolution.x;\n    \n    //灯光位置\n    vec3 lightPos = vec3(1,2,3.0);\n    //灯光跟随鼠标位置\n    //vec3 lightPos = vec3(mouseView.x*10.0,5.0,mouseView.y*10.0);\n        \n    vec3 ro = vec3(0.0,1.0,0.0);\n    vec3 rd = normalize(vec3(uv.x,uv.y,1.0));\n    float d = RayMarch(ro,rd,fragCoord);\n    vec3 p = ro + rd*d;\n    \n    float dif = GetLight(p,lightPos,fragCoord);\n    vec3 col = vec3(dif);\n    col = pow(col,vec3(0.4545));\n    fragColor = vec4(col,1.0);\n    \n}","name":"Image","description":"","type":"image"}]}