{"ver":"0.1","info":{"id":"XfG3WK","date":"1713764765","viewed":79,"name":"Grid_Dots_Hexagonal","username":"tholzer","description":"Based on https://shadertoy.com/view/wtdSzX, but set as minimal example. See the shader for more info.\nThe hexagon centers build the triagonal dot grid.\nmouse.x = zoom, \nmouse.y = hexagon size","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["grid","dots","hexagonal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Grid_Dots_Hexagonal.glsl\n\n// Fork of \"Minimal Hexagonal Shader/Grid\" by leftofzen. \n// https://shadertoy.com/view/wtdSzX   2024-04-16 08:01\n\n#define FLAT_TOP_HEXAGON\n#define xVARIANT1\n\n// Helper vector. If you're doing anything that involves regular triangles or hexagons, the\n// 30-60-90 triangle will be involved in some way, which has sides of 1, sqrt(3) and 2.\n#ifdef FLAT_TOP_HEXAGON\n  const vec2 s = vec2(1.7320508, 1);   // horizontal\n#else\n  const vec2 s = vec2(1, 1.7320508);   // vertical\n#endif\n\n// The 2D hexagonal isosuface function: If you were to render a horizontal line and one that\n// slopes at 60 degrees, mirror, then combine them, you'd arrive at the following. As an aside,\n// the function is a bound -- as opposed to a Euclidean distance representation, but either\n// way, the result is hexagonal boundary lines.\nfloat hex(in vec2 p)\n{    \n  p = abs(p);\n    \n  #ifdef FLAT_TOP_HEXAGON\n    return max(dot(p, s*.5), p.y); // h.Hexagon\n  #else\n    return max(dot(p, s*.5), p.x); // v.Hexagon\n  #endif    \n}\n\n// This function returns the hexagonal grid coordinate for the grid cell, and the corresponding \n// hexagon cell ID -- in the form of the central hexagonal point. That's basically all you need to \n// produce a hexagonal grid.\n//\n// When working with 2D, I guess it's not that important to streamline this particular function.\n// However, if you need to raymarch a hexagonal grid, the number of operations tend to matter.\n// This one has minimal setup, one \"floor\" call, a couple of \"dot\" calls, a ternary operator, etc.\n// To use it to raymarch, you'd have to double up on everything -- in order to deal with \n// overlapping fields from neighboring cells, so the fewer operations the better.\nvec4 getHex(vec2 p)\n{    \n  // The hexagon centers: Two sets of repeat hexagons are required to fill in the space, and\n  // the two sets are stored in a \"vec4\" in order to group some calculations together. The hexagon\n  // center we'll eventually use will depend upon which is closest to the current point. Since \n  // the central hexagon point is unique, it doubles as the unique hexagon ID.\n    \n  #ifdef FLAT_TOP_HEXAGON\n    vec4 hC = floor(vec4(p, p - vec2(1, .5))/s.xyxy) + .5;\n  #else\n    vec4 hC = floor(vec4(p, p - vec2(.5, 1))/s.xyxy) + .5;\n  #endif\n    \n  // Centering the coordinates with the hexagon centers above.\n  vec4 h = vec4(p - hC.xy*s, p - (hC.zw + .5)*s);\n    \n  // Nearest hexagon center (with respect to p) to the current point. In other words, when\n  // \"h.xy\" is zero, we're at the center. We're also returning the corresponding hexagon ID -\n  // in the form of the hexagonal central point.\n  //\n  // On a side note, I sometimes compare hex distances, but I noticed that Iomateron compared\n  // the squared Euclidian version, which seems neater, so I've adopted that.\n  return dot(h.xy, h.xy) < dot(h.zw, h.zw) \n    ? vec4(h.xy, hC.xy) \n    : vec4(h.zw, hC.zw + .5);\n}\n\n// 2nd variant from https://www.shadertoy.com/view/XcXXzS\nfloat hex2(vec2 p)   \n{\n  #ifdef FLAT_TOP_HEXAGON\n    p.x *= 0.57735*2.0;\n    p.y += mod(floor(p.x),2.0)*0.5;\n    p = abs(mod(p,1.0)-0.5);\n    return abs(max(p.x*1.5 + p.y, p.y*2.0) - 1.0);\n  #else\n    p.y *= 0.57735*2.0;\n    p.x += mod(floor(p.y),2.0)*0.5;\n    p = abs(mod(p,1.0)-0.5);\n    return abs(max(p.y*1.5 + p.x, p.x*2.0) - 1.0);\n  #endif\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Aspect correct screen coordinates.\n\tvec2 u = (fragCoord - iResolution.xy*.5)/iResolution.y;\n\tvec2 m = (iMouse.xy - iResolution.xy*1.06)/iResolution.y;\n    \n    // Scaling, translating, then converting it to a hexagonal grid cell coordinate and\n    // a unique coordinate ID. The resultant vector contains everything you need to produce a\n    // pretty pattern, so what you do from here is up to you.\n    vec4 h = getHex(u*15.*m.x);\n    \n    // The beauty of working with hexagonal centers is that the relative edge distance will simply \n    // be the value of the 2D isofield for a hexagon.\n    // variant 1\n  #ifdef VARIANT1\n    float eDist1 = hex(h.xy);   // Edge distance.\n    float my = -0.1 +iMouse.y / (iResolution.y*2.5);\n    float sd = smoothstep(0.3, .0, eDist1 - my);\n  #else\n    // variant 2\n    float eDist2 = hex2(h.xy);   // Edge distance.\n    float my = 0.1 +iMouse.y / (iResolution.y*1.4);\n    float sd = smoothstep(0., .03, eDist2 - my + .04);\n  #endif\n    \n    // Initiate the background to a white color, putting in some dark borders.\n    vec3 col = mix(vec3(1.), vec3(0), sd);    \n    fragColor = vec4(col, 1);    \n}","name":"Image","description":"","type":"image"}]}