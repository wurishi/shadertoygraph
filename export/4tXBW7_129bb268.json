{"ver":"0.1","info":{"id":"4tXBW7","date":"1525557796","viewed":214,"name":"Quadratic vs cubic Bspline","username":"dahart","description":"Comparison of quadratic and cubic bsplines. ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["cubic","quadratic","bspline","chaikin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const bool showCps   = bool(0);\nconst bool showQuad  = bool(1);\nconst bool showCubic = bool(1);\n\nmat3x3 qm = mat3x3(\n    vec3(1.0, 0.0, 0.0),\n    vec3(-2.0, 2.0, 0.0),\n    vec3(1.0, -2.0, 1.0)\n    );\n\nmat3x3 qi = mat3x3(\n    vec3(0.5, 0.5, 0.0),\n    vec3(0.0, 1.0, 0.0),\n    vec3(0.0, 0.5, 0.5)\n    );\n\nvec2 quadratic(vec2 a, vec2 b, vec2 c, float u) {\n    vec3 uu = vec3(1.0, u, u*u);\n    mat3x2 abc = mat3x2(a, b, c);\n    vec2 p = abc * qi * qm * uu;\n    return p;\n}\n\nmat4x4 cm = (1.0 / 6.0) * mat4x4(\n    vec4(1.0, 4.0, 1.0, 0.0),\n    vec4(-3.0, 0.0, 3.0, 0.0),\n    vec4(3.0, -6.0, 3.0, 0.0),\n    vec4(-1.0, 3.0, -3.0, 1.0)\n);\n\nvec2 cubic(vec2 a, vec2 b, vec2 c, vec2 d, float u) {\n    vec4 uu = vec4(1.0, u, u*u, u*u*u);\n    mat4x2 abcd = mat4x2(a, b, c, d);\n    vec2 p = abcd * cm * uu;\n    return p;\n}\n\nconst float cptXStart = 20.f;\nconst float cptXSpread = 30.f;\nconst int cptCount = 20;\n    \nvec2 getCpt(int i) {\n    float fi = float(i);\n    return vec2(cptXStart + fi * cptXSpread, 200.0 + 100.0 * sin(exp(fi/5.0) + 5.0 * sin(iTime)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    \n    vec2 pts[cptCount];\n    \n    float cptX = (fragCoord.x - cptXStart) / cptXSpread;\n    int cptIdx = int((fragCoord.x - cptXStart) / cptXSpread + .5);\n    int offset = (fragCoord.x < cptX) ? 0 : 0;\n    int cptIdxm2 = max(0, cptIdx - 2 + offset);\n    int cptIdxp2 = min(cptCount - 1, cptIdx + 2 + offset);\n    \n    for (int i = 0; i < cptCount; i++) pts[i] = getCpt(i);\n    //for (int i = cptIdxm2; i <= cptIdxp2; i++) pts[i] = getCpt(i);\n   \n    //if (cptIdx % 2 == 0) fragColor = vec4(.2, .2, .2, 1.);\n    //if (cptIdx == 0)     fragColor = vec4(.2, .0, .0, 1.);\n    \n    if (showCps) { \n        if (distance(fragCoord.xy, pts[cptIdx]) < 6.0) fragColor = vec4(1.0, 1.0, 0.0, 1.0);\n    }\n\n    if (showCubic) {\n        for (int i = cptIdxm2; i <= cptIdxp2; i++) \n        {\n            for (float u = 0.; u < 1.; u += .05) {\n                vec2 p = cubic(pts[i-2], pts[i-1], pts[i-0], pts[i+1], u);\n                if (distance(fragCoord.xy, p) < 2.0) fragColor = vec4(1.0, u, 1.0-u, 1.0);\n            }\n        }\n    }\n\n    if (showQuad) {\n        for (int i = cptIdxm2+1; i <= cptIdxp2-1; i++) {\n            for (float u = .0; u < 1.; u += .05) {\n                vec2 p = quadratic(pts[i-1], pts[i], pts[i+1], u);\n                if (distance(fragCoord.xy, p) < 2.0) fragColor = vec4(u, 1.0-u, 1.0, 1.0);\n            }\n        }\n    }\n\n    if (showCps) {\n        for (int i = cptIdxm2; i <= cptIdxp2; i++) {\n            vec2 a = 0.5 * (pts[i-1] + pts[i]);\n            vec2 b = pts[i];\n            vec2 c = 0.5 * (pts[i] + pts[i+1]);\n\n            if (distance(fragCoord.xy, a) < 4.0) fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n            if (distance(fragCoord.xy, b) < 6.0) fragColor = vec4(0.0, 1.0, 0.0, 1.0);\n            if (distance(fragCoord.xy, c) < 8.0) fragColor = vec4(0.0, 0.0, 1.0, 1.0);\n        }\n    }\n    \n}\n","name":"Image","description":"","type":"image"}]}