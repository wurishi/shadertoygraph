{"ver":"0.1","info":{"id":"lssfDj","date":"1498261548","viewed":611,"name":"Code training 02","username":"antonOTI","description":"Training  my shader fu.\nafter some duel with Ponk and Koltes, I wanted to keep toying with Bonzomatic, this is the result ","likes":6,"published":3,"flags":0,"usePreview":0,"tags":["raymarching","training","shaderdojo"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rot(vec2 v, float a)\n{\n\tfloat sa = sin(a);float ca = cos(a);\n\treturn mat2(ca,-sa,sa,ca) * v;\n}\n\nfloat map(vec3 pos)\n{\n  vec3 p = pos;\n  \n  p.xy = rot(p.xy,p.z * .03);\n\n  p = mod(p ,vec3(10.)) - 5.;\n  \n  \n  float time = iTime - pow(pos.z * .05,2.) ;// iTime + pow(pos.z,.5);\n\n  float f1 = distance(p.xy, vec2(0.+ cos(time),2. + sin(time))) - 1.2;\n  \n\n  return f1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1.);\n\n  vec3 ro = vec3(0.,0.,-5.); \n  vec3 rd = normalize(vec3(uv,1)); \n  vec3 cp = ro;\n  int STEP = 256;\n  int cs = 0;\n  float hit = 0.;\n  for(; cs < STEP; ++cs)\n  {\n    float d = map(cp);\n    if(d < .001)\n      {\n        hit = 1.;\n        break;\n      }\n    cp += rd * d * .25;\n  }\n\n  float f =  1. - distance(cp,ro) / 500.;\n    \n  f = f * sin((sin(cp.z * .03 + 10.)*.5+.5));\n\n  fragColor = vec4(f);\n}","name":"Image","description":"","type":"image"}]}