{"ver":"0.1","info":{"id":"WsKyzy","date":"1603151224","viewed":636,"name":"Mirrors in Space (sound)","username":"athibaul","description":"Sound from outer space. Sit back, and relax.","likes":25,"published":1,"flags":8,"usePreview":0,"tags":["music","filter","synth","saw","pad","lowpass","stab"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.y;\n\t\n    vec4 col = vec4(0);\n    \n    // Plot starfield\n    vec3 ro = vec3(0,iTime,0);\n    vec3 rd = vec3(uv.x, 2, uv.y);\n    \n    float time = iTime*0.1 + 1.;\n    float th = 0.618*3.14159;\n    float xshift = sin(0.01*iTime);\n    uv.x += sin(th*floor(time)) * 10.;\n    //uv *= mat2(cos(floor(time)*th),sin(floor(time)*th),-sin(floor(time)*th),cos(floor(time)*th));\n    const float LAYERS = 50.;\n    for(float i=0.; i<LAYERS; i++)\n    {\n        float z = i+1. - fract(time);\n        vec2 uv1 = (uv-vec2(time*xshift,0))*z*0.01;\n        vec2 uv2 = (uv-vec2(time*xshift*0.8,0))*z*0.01;\n        vec4 stars = texture(iChannel0, uv1);\n        vec3 starcol = vec3(1.);//stars.r*vec3(0.8,1.0,0.2) + 2.*stars.g*vec3(0.3,0.1,1.);\n        starcol *= pow(texture(iChannel1, uv2*10.).rgb, vec3(2.)) * 2.;\n        starcol *= (LAYERS-1.-i)/LAYERS;\n        starcol = max(starcol, 0.);\n        stars.a = smoothstep(0.99,1.0,stars.a);\n        stars.a *= smoothstep(0.,3.,z);\n        uv.x += xshift;\n        uv *= mat2(cos(th), sin(th), -sin(th), cos(th));\n        col.rgb = mix(col.rgb, starcol, clamp(stars.a*(1.-col.a), 0., 1.));\n        col.a = 1.-(1.-col.a)*(1.-stars.a);\n    }\n    \n    col.rgb = pow(col.rgb*col.a, vec3(1./2.2));\n    \n    fragColor = vec4(col.rgb,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// See Common tab","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"// Hash function by Dave Hoskins\n// https://www.shadertoy.com/view/4djSRW\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\n\n// ===========================================================\n\n\nvec2 lpfSaw( float time, vec2 f, vec2 fc, float Q )\n{\n    // A low-pass-filtered sawtooth wave.\n    // Approximation : we attenuate the resonance at the end of each cycle.\n    // See https://www.shadertoy.com/view/wsGyWm\n    vec2 omega_c = 2.*3.14159*fc/f; // relative\n    vec2 t = f*time - floor(f*time);\n    return 1. - 2.*t -2.*exp(-omega_c*t/Q)*cos(omega_c*t)*(1.-t);\n}\n\n\n#define midicps(note) exp2(((note)-69.)/12.)*440.\n\nvec2 stab( float t, vec2 f )\n{\n    // \"Saw synth stab\"\n    vec2 cutoff = vec2(15000.*exp(-t*45.) + 30.);\n    float h = t*20.;\n    float env = h*exp(1.-h);\n    return lpfSaw(t, f, cutoff, 2.) * env;\n}\n\n\nfloat noise( float t, float sprate )\n{\n    // Read from texture. This is a pretty bad way, but easy.\n    t *= sprate;\n    //return texelFetch(iChannel0, ivec2(mod(t*vec2(1.,1./256.), 256.)), 0).r*2. - 1.;\n    return hash11(floor(t))*2.-1.;\n}\n\nfloat noiseLin( float t, float f )\n{\n    // Linearly interpolated noise\n    t = f*t;\n    float it = floor(t), ft = fract(t);\n    //ft = smoothstep(0.,1.,ft); // to make transitions smoother\n    return mix(noise(it, 1.), noise(it+1., 1.), ft);\n}\n\n\n\nvec2 lushPad( float t, mat3 notes )\n{\n    vec2 sig;\n    for(int i=0; i<3; i++)\n    {\n        for(int j=0; j<3; j++)\n        {\n    \t\tfloat envModHz = 0.5 + dot(vec2(i,j),vec2(-0.1,-0.05));\n            float prevEnvModHz = 0.5 + dot(vec2(i-1,j),vec2(-0.1,-0.05));\n            float offs = 10.*float(i)+100.*float(j);\n            float prevOffs = 10.*float(i-1)+100.*float(j);\n            vec2 env = vec2(noiseLin(t + offs/envModHz, envModHz),\n                            -noiseLin(t + prevOffs/prevEnvModHz, prevEnvModHz));\n            env = exp(2.*env);\n            vec2 freq = midicps(notes[i][j]) * vec2(1.,1.01);\n            freq += 0.2*sin(t+float(i+3*j))/max(abs(t), 1.);\n            vec2 cutoff = 2.*freq*env.yx;\n            sig += lpfSaw(t, freq, cutoff, 2.) * env;\n        }\n    }\n    return sig * 0.05;\n}\n\nvec2 lushPad2( float t, mat3 notes)\n{\n    // Add interaural time difference + one early reflection to improve sense of space\n    return lushPad(t, notes) \n        + 0.5*lushPad(t-0.02, notes).yx\n        + 0.5*vec2(1,-1)*lushPad(t-0.1, notes);\n}\n\n\nvec2 padChords(float t)\n{\n    mat3 notes = mat3(36,48,55,60,62,63,65,67,70); // C minor\n    mat3 notes2 = mat3(29,41,53,56,58,60,63,65,67); // F minor\n    float fade = clamp(0.5-3.*sin(0.2*t), 0., 1.);\n    vec2 sig = mix(lushPad2(t, notes), lushPad2(t, notes2), fade);\n    return sig;\n}\n\nvec2 padChordsDelay(float t)\n{\n    return padChords(t) + 0.5*vec2(1,-1)*padChords(t-0.5).yx;\n}\n\n\nvec2 mainSound( in int samp, float t )\n{\n    \n    //return vec2( 0.1 * stab(mod(t, 0.25), vec2(80.,81.)));\n    //return vec2(0.1)*noiseLin(t, 500.);\n    vec2 sig = padChordsDelay(t);\n    float declick = 1.-exp(-t);\n    return sig * 0.1 * declick;\n}","name":"Common","description":"","type":"common"}]}