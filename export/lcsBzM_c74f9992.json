{"ver":"0.1","info":{"id":"lcsBzM","date":"1723548530","viewed":45,"name":"Koch Snowflake with texture","username":"tomdelie","description":"A basic fractal pattern","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","kifs","koch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* based on https://www.shadertoy.com/view/tdcGDj */\n\nvec2 N(float angle) {\n  return vec2(sin(angle), cos(angle));\n}\n\nfloat oscillate(float minv, float maxv) {\n    return minv + (sin(iTime) + 1.0) * (maxv - minv) / 2.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = (fragCoord.xy - iResolution.xy * .5) / iResolution.y;\n  uv *= 2.;\n\n  vec3 col = vec3(0.0);\n  float snowflakeA = 5./6. * 3.1415;\n  vec2 snowflakeN = N(snowflakeA);\n  \n  float hatA = oscillate(1./2., 2./3.) * 3.1415;\n  vec2 hatN = N(hatA);\n  \n  uv.x = abs(uv.x);\n  uv.y += tan(snowflakeA) * 0.5;\n  uv -= snowflakeN*max(0., dot(uv-vec2(.5, 0), snowflakeN))*2.;\n\n  uv.x += 0.5;\n  float scale = 1.;\n  for(int i = 0; i < 4; i++) {\n    uv *= 3.;\n    uv.x -= 1.5;\n    scale *= 3.;\n\n    uv.x = abs(uv.x);\n    uv.x -= 0.5;\n    uv -= hatN*min(0., dot(uv, hatN))*2.;\n  }\n\n  float d = length(uv - vec2(clamp(uv.x, -1., 1.), 0.));\n  col += smoothstep(2./iResolution.y, 0.0, d/scale);\n  \n  uv /= scale;\n  col += texture(iChannel0, uv*2.-iTime*.03).rgb;\n\n  fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}