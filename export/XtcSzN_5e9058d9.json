{"ver":"0.1","info":{"id":"XtcSzN","date":"1478339563","viewed":277,"name":"Torus euclidean + taxi + maxnorm","username":"Dain","description":"\nTorus shape that combines euclidean distance, taxi distance(manhatten) and maxnorm distance.\nHas 4 weights in addition to standard torus params.\n\n\n","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["sdf","torus","distance","manhatten","maxnorm","prim","taxi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* \n   Torus shape that combines \n   euclidean distance, \n   taxi distance(manhatten) \n   and maxnorm distance\n \n*/\n\n//taxi_scale: lower value == more taxi\n//maxn_scale: lower value == more maxn\nfloat etm_norm(vec2 p,  float taxi_scale, float maxn_scale){\n    \n    float maxn_distance = max(abs(p.x), abs(p.y));\n \n    float euclidean_distance = length(p);\n    \n    float taxi_distance = abs(p.x) + abs(p.y);\n   \n \t//apply scaling\n    maxn_distance *= maxn_scale;\n    taxi_distance *= taxi_scale;\n    \n    //return closest\n    return min(min(euclidean_distance, maxn_distance), taxi_distance);\n}\n\n//signed distance to torus using custum  distance metric\n//combines 3 distance metrics\nfloat sdTorusETM(vec3 p ,float x, float y, \n                 vec2 taxi_scale, \n                 vec2 maxn_scale )\n{\n\n    float d1 = etm_norm(vec2(p.x, p.z), taxi_scale.x, maxn_scale.x);\n                           \n    vec2 q = vec2(d1 - x, p.y);\n    \n    float d2 = etm_norm(q, taxi_scale.y, maxn_scale.y);\n    \n    return d2 - y;\n \n}\n\n\nvec4 mapC( vec3 q )\n{\n    float r = 1.01;\n   \n   \n    q.xyz = q.xzy;\n    //4 scaling params\n    vec2 taxi_scale = vec2(0.85,0.8285);\n    vec2 maxn_scale = vec2( 1.31313, 1.315122);\n    \n    //Apply time based adjusments to scaling so we \n    //can see various shapes\n    taxi_scale += vec2(sin(10.0 + iTime*0.451)*0.3,\n                      cos(iTime*0.351)*0.23);\n    \n    maxn_scale += vec2(sin(iTime*0.451)*0.3,\n                       cos(iTime*0.551)*0.32);\n    \n    float innerRad = .1318651310;\n    \n    //some shapes produced when innerR == r are pretty cool\n    float shrink = pow(sin(iTime*0.12),2.0);;\n    shrink = max(0.0, (shrink-0.5)*2.0);\n    //innerRad += \n    \n    float dist = sdTorusETM(q, 1.0-shrink*.5,innerRad+shrink*0.5 , taxi_scale, maxn_scale);\n    \n    return vec4(dist, \n                vec3(0.0,0.0,0.0));\n}\n\n//Rest of code is by iq I think\n//// Created by inigo quilez - iq/2015\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\nfloat hash1( float n )\n{\n    return fract(sin(n)*43758.5453123);\n}\n\nfloat hash1( in vec2 f ) \n{ \n    return fract(sin(f.x+131.1*f.y)*43758.5453123); \n}\n\n\nconst float PI = 3.1415926535897932384626433832795;\nconst float PHI = 1.6180339887498948482045868343656;\n\nvec3 forwardSF( float i, float n) \n{\n    float phi = 2.0*PI*fract(i/PHI);\n    float zi = 1.0 - (2.0*i+1.0)/n;\n    float sinTheta = sqrt( 1.0 - zi*zi);\n    return vec3( cos(phi)*sinTheta, sin(phi)*sinTheta, zi);\n}\n\n//const float sca = 0.5 + 0.15*sin(iTime-10.0);\nvec4 grow = vec4(1.0);\n\nfloat map( vec3 q )\n{\n    return mapC(q).x;\n}\n\nvec4 intersect( in vec3 ro, in vec3 rd )\n{\n   \n\tconst float maxd = 7.0;\n\tvec4 dc;\n\tfloat precis = 0.001;\n    float h = 1.0;\n    float t = 1.0;\n    for( int i=0; i<1256; i++ )\n    {\n        if( (h<precis) || (t>maxd) ) break;\n        dc = mapC( ro+rd*t );;\n\t    h = dc.x;\n        t += h;\n    }\n\n    if( t>maxd ) t=-1.0;\n\treturn vec4(t,dc.yzw);\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec3 eps = vec3(0.005,0.0,0.0);\n\treturn normalize( vec3(\n           map(pos+eps.xyy) - map(pos-eps.xyy),\n           map(pos+eps.yxy) - map(pos-eps.yxy),\n           map(pos+eps.yyx) - map(pos-eps.yyx) ) );\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor, in vec2 pix )\n{\n\tfloat ao = 0.0;\n    for( int i=0; i<64; i++ )\n    {\n        vec3 ap = forwardSF( float(i), 64.0 );\n\t\tap *= sign( dot(ap,nor) ) * hash1(float(i));\n        ao += clamp( map( pos + nor*0.05 + ap*1.0 )*32.0, 0.0, 1.0 );\n    }\n\tao /= 64.0;\n\t\n    return clamp( ao*ao, 0.0, 1.0 );\n}\n\nfloat calcAO2( in vec3 pos, in vec3 nor, in vec2 pix )\n{\n\tfloat ao = 0.0;\n    for( int i=0; i<32; i++ )\n    {\n        vec3 ap = forwardSF( float(i), 32.0 );\n\t\tap *= sign( dot(ap,nor) ) * hash1(float(i));\n        ao += clamp( map( pos + nor*0.05 + ap*0.2 )*100.0, 0.0, 1.0 );\n    }\n\tao /= 32.0;\n\t\n    return clamp( ao, 0.0, 1.0 );\n}\n\nvec4 texCube( sampler2D sam, in vec3 p, in vec3 n, in float k )\n{\n\tvec4 x = texture( sam, p.yz );\n\tvec4 y = texture( sam, p.zx );\n\tvec4 z = texture( sam, p.xy );\n    vec3 w = pow( abs(n), vec3(k) );\n\treturn (x*w.x + y*w.y + z*w.z) / (w.x+w.y+w.z);\n}\n\nvec3 mapP( vec3 p )\n{\n    p.xyz += 1.000*sin(  2.0*p.yzx )*grow.x;\n    p.xyz += 0.500*sin(  4.0*p.yzx )*grow.y;\n    p.xyz += 0.250*sin(  8.0*p.yzx )*grow.z;\n    p.xyz += 0.050*sin( 16.0*p.yzx )*grow.w;\n    return p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy+2.0*fragCoord.xy)/iResolution.y;\n\tvec2 q = fragCoord/iResolution.xy;\n\n    vec2 m = vec2(0.5);\n\tif( iMouse.z>0.0 ) m = iMouse.xy/iResolution.xy;\n\n\n    \n    grow = smoothstep( 0.0, 1.0, (iTime-vec4(0.0,1.0,2.0,3.0))/3.0 );\n\n    \n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n\t\n\tfloat an = 1.1 + 0.05*(iTime-10.0) - 7.0*m.x;\n\n\tvec3 ro = vec3(4.5*sin(an),1.0,4.5*cos(an));\n    vec3 ta = vec3(0.0,0.2,0.0);\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\t// create view ray\n\tvec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n\n    //-----------------------------------------------------\n\t// render\n    //-----------------------------------------------------\n    \n\tvec3 col = vec3(0.07)*clamp(1.0-length(q-0.5),0.0,1.0);\n\n\t// raymarch\n    vec4 tc = intersect(ro,rd);\n    float t = tc.x;\n    vec3 torusColor = tc.yzw;\n\n    if( t>0.0 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n\t\tvec3 ref = reflect( rd, nor );\n        vec3 sor = nor;\n        \n        vec3 q = mapP( pos );\n        float occ = calcAO( pos, nor, fragCoord ); occ = occ*occ;\n\n        // materials\n\t\tcol = vec3(0.04);\n        float ar = clamp(1.0-0.7*length(q-pos),0.0,1.0);\n        col = mix( col, vec3(2.1,2.0,1.2), ar);\n        col  *= 0.3;          \n        col *= mix(vec3(1.0,0.4,0.3), vec3(0.8,1.0,1.3), occ);\n        float occ2 = calcAO2( pos, nor, fragCoord );\n        \n        \n        col *= 1.0*mix( vec3(2.0,0.4,0.2), vec3(1.0), occ2*occ2*occ2 );\n        float ks = texCube( iChannel0, pos*1.5, nor, 4.0 ).x;\n        ks = 0.5 + 1.0*ks;\n        ks *= (1.0-ar);\n        \n        // lighting\n        float sky = 0.5 + 0.5*nor.y;\n        float fre = clamp( 1.0 + dot(nor,rd), 0.0, 1.0 );\n        float spe = pow(max( dot(-rd,nor),0.0),8.0);\n\t\t// lights\n\t\tvec3 lin  = vec3(0.0);\n\t\t     lin += 3.0*vec3(0.7,0.80,1.00)*sky*occ;\n             lin += 1.0*fre*vec3(1.2,0.70,0.60)*(0.1+0.9*occ);\n        col += 0.3*ks*4.0*vec3(0.7,0.8,1.00)*smoothstep(0.0,0.2,ref.y)*(0.05+0.95*pow(fre,5.0))*(0.5+0.5*nor.y)*occ;\n        col += 4.0*ks*1.5*spe*occ*col.x;\n        col += 2.0*ks*1.0*pow(spe,8.0)*occ*col.x;\n        col = col * lin;\n    }\n\n\tcol = pow(col,vec3(0.4545));\n\n    col = pow( col, vec3(1.0,1.0,1.4) ) + vec3(0.0,0.02,0.14);\n    \n    col += (1.0/255.0)*hash1( fragCoord );\n    \n    fragColor = vec4( col, 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}