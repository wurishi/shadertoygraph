{"ver":"0.1","info":{"id":"fdBGDD","date":"1618424960","viewed":50,"name":"hw_ivan444410","username":"Ivan444410","description":"my hw","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["hw"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) /float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const vec3 CAMERA_POS = vec3(3, 3.0, -5);\nconst float INF = 1e10;\nvec3 randDir;\n\nconst vec3 LIGHT1_POS = vec3(-2, 0.5, 5);\nconst float LIGHT1_RADIUS = 0.5;\nconst vec3 LIGHT1_COLOR = vec3(1,0.1,1);\n\n\n\nconst vec3 LIGHT2_POS = vec3(1.5, 1.15, -1);\nconst float LIGHT2_RADIUS = 0.25;\nconst vec3 LIGHT2_COLOR = vec3(0.1,1,0.2);\n\n\n\n\nconst vec3 SPHR = vec3(0, 0.115, 0);\nconst float SPHR_RADIUS = 2.115;\n//const vec3 SPHR_COLOR = vec3(0.5,1,1);\n\n\n\n\n\n\n\nfloat ABSORPTION = 0.5;\n\nfloat fogSdf(vec3 pos)\n{\n    return length(pos) - 0.75;\n}\n\nfloat BeerLambert(float absorptionCoefficient, float distanceTraveled)\n{\n    return exp(-absorptionCoefficient * distanceTraveled);\n}\n\nvec4 sampleFog(vec3 pos, vec3 dir)\n{\n    float t = fogSdf(pos);\n    const float MARCH_SIZE = 0.01;\n    float opacity = 1.0;\n    float absorption = 10.0;\n    float totalAbs = 0.0;\n    for (int i = 0; i < 50; ++i) {\n        vec3 curPos = pos + (float(i) * MARCH_SIZE + t) * dir;\n        float sdf = fogSdf(curPos);\n        if (sdf < 0.0) {\n            float prevOpacity = opacity;\n            opacity *= BeerLambert(absorption * (\n            texture(iChannel3, curPos * 0.2).x\n            + texture(iChannel3, curPos * 0.4).x\n            + texture(iChannel3, curPos * 0.8).x\n            + texture(iChannel3, curPos * 1.6).x\n            ) * 0.25 * abs(sdf), MARCH_SIZE);\n            float absorptionLastStep = prevOpacity - opacity;\n            totalAbs += absorptionLastStep;\n        }\n    }\n    return vec4(vec3(5, 2, 5) * totalAbs, 1.0 - opacity);\n}\n\n\n\n\n\n\nfloat tracePentagon(vec3 pos, vec3 dir, vec3 vert[5], out vec3 norm) {\n    vec3 d1 = vert[2] - vert[4];\n    vec3 d2 = vert[3] - vert[4];\n    norm = normalize(cross(d1, d2));\n    float dirnorm = dot(dir, norm);\n\tfloat t = dot(vert[4] - pos, norm) / dirnorm;\n    if (t < 0.0){\n        return INF;\n    }\n    vec3 worldPos = pos + t * dir;\n    for (int i = 0; i < 5; i++) {\n        vec3 norm1 = normalize(cross(vert[(i + 1) % 5] - vert[i], worldPos - vert[i]));\n        if (dot(norm1 - norm, norm1 - norm) > 1.0) return INF;\n    }\n    return t;\n}\n\n\n\nfloat traceFour(vec3 pos, vec3 dir, vec3 vert[4], out vec3 norm) {\n    vec3 d1 = vert[0] - vert[3];\n    vec3 d2 = vert[2] - vert[3];\n    norm = normalize(cross(d1, d2)); \n    float dirnorm = dot(dir, norm);\n\tfloat t = dot(vert[3] - pos, norm) / dirnorm;\n    if (t < 0.0){\n        return INF;\n    }\n    vec3 worldPos = pos + t * dir;\n    for (int i = 0; i < 4; i++) {\n        vec3 norm1 = normalize(cross( vert[(i + 1) % 4] - vert[i], worldPos - vert[i]));\n        if (dot(norm1 - norm, norm1 - norm) > 1.0){\n            return INF;\n        }\n    } \n    return t;\n}\n\n\nfloat traceDodek(vec3 pos, vec3 dir, out vec3 norm) {\n    float t = INF;\n    vec3 norm_now;\n    float t_now;    \n    vec3 pentVert[20];\n    pentVert[0] = vec3(-0.5, -1.0, -0.69); \n    pentVert[1] = vec3(0.5, -1.0, -0.69); \n    pentVert[2] = vec3(0.81, -1.0, 0.26); \n    pentVert[3] = vec3(0.0, -1.0, 0.85); \n    pentVert[4] = vec3(-0.81, -1.0, 0.26); \n    pentVert[5] = vec3(0.81, -0.15, -1.12); \n    pentVert[6] = vec3(1.31, -0.15, 0.42); \n    pentVert[7] = vec3(0.0, -0.15, 1.37); \n    pentVert[8] = vec3(-1.31, -0.15, 0.42); \n    pentVert[9] = vec3(- 0.81, -0.15, -1.12); \n    pentVert[10] = vec3(0.0, 0.38, -1.38);\n    pentVert[11] = vec3(1.31, 0.38, -0.43); \n    pentVert[12] = vec3(0.81, 0.38, 1.11);\n    pentVert[13] = vec3(-0.81, 0.38, 1.11); \n    pentVert[14] = vec3(-1.31, 0.38, -0.43); \n    pentVert[15] = vec3(0.0, 1.23, -0.85); \n    pentVert[16] = vec3(0.81, 1.23, -0.26); \n    pentVert[17] = vec3(0.5, 1.23, 0.69); \n    pentVert[18] = vec3(-0.5, 1.23, 0.69); \n    pentVert[19] = vec3(-0.81, 1.23, -0.26); \n    int pentFace[12 * 5];\n    pentFace[0] = 0;\n    pentFace[1] = 1;\n    pentFace[2] = 2;\n    pentFace[3] = 3;\n    pentFace[4] = 4;\n    \n    pentFace[5] = 1;\n    pentFace[6] = 2;\n    pentFace[7] = 6;\n    pentFace[8] = 11;\n    pentFace[9] = 5;\n    \n    pentFace[10] = 0;\n    pentFace[11] = 1;\n    pentFace[12] = 5;\n    pentFace[13] = 10;\n    pentFace[14] = 9;\n    \n    pentFace[15] = 4;\n    pentFace[16] = 0;\n    pentFace[17] = 9;\n    pentFace[18] = 14;\n    pentFace[19] = 8;\n    \n    pentFace[20] = 3;\n    pentFace[21] = 4;\n    pentFace[22] = 8;\n    pentFace[23] = 13;\n    pentFace[24] = 7;\n    \n    pentFace[25] = 15;\n    pentFace[26] = 16;\n    pentFace[27] = 11;\n    pentFace[28] = 5;\n    pentFace[29] = 10;\n    \n    pentFace[30] = 18;\n    pentFace[31] = 19;\n    pentFace[32] = 14;\n    pentFace[33] = 8;\n    pentFace[34] = 13;\n    \n    pentFace[35] = 2;\n    pentFace[36] = 3;\n    pentFace[37] = 7;\n    pentFace[38] = 12;\n    pentFace[39] = 6;\n     \n    pentFace[40] = 16;\n    pentFace[41] = 17;\n    pentFace[42] = 12;\n    pentFace[43] = 6;\n    pentFace[44] = 11;\n    \n    pentFace[45] = 17;\n    pentFace[46] = 18;\n    pentFace[47] = 13;\n    pentFace[48] = 7;\n    pentFace[49] = 12;\n   \n    pentFace[50] = 19;\n    pentFace[51] = 15;\n    pentFace[52] = 10;\n    pentFace[53] = 9;\n    pentFace[54] = 14;\n   \n    pentFace[55] = 15;\n    pentFace[56] = 16;\n    pentFace[57] = 17;\n    pentFace[58] = 18;\n    pentFace[59] = 19;\n    for (int i = 0; i < 12; i++) {\n        vec3 surface[5];\n        for (int j = 0; j < 5; j++) {\n            surface[j] = pentVert[pentFace[i * 5 + j]];\n        }\n        t_now = tracePentagon(pos, dir, surface, norm_now);\n        if (t_now < t) {\n            t = t_now;\n            norm = norm_now;\n        }\n    }\n    return t;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal){\n    float t = (-1.2 - CAMERA_POS.y) / dir.y;\n    if(t <= 0.0){\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if(dot(worldPos.xz, worldPos.xz) >= 100.0){\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal){\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r*r;\n    float D = b * b - a*c;\n    if (D < 0.0){\n        return INF;\n    }\n    float t = - b - sqrt(D);\n    if(t > 0.0){\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D - a * r * r);\n    if(t < 0.0){\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\n\n\n\n\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal){\n    float t = (-1.0 - CAMERA_POS.y) / dir.y;\n    if(t <= 0.0){\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if(dot(worldPos.xz, worldPos.xz) < 0.5){\n        normal = vec3(0,1,0);\n        return t;\n    }\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 0.5;\n    float D = b * b - a*c;\n    if (D < 0.0){\n        return INF;\n    }\n    t = (- b - sqrt(D))/a;\n    worldPos = t *dir + pos;\n    if(t > 0.0){\n        if (worldPos.y <= -1.0){\n            normal = normalize (vec3(worldPos.x, 0, worldPos.y));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D))/a;\n    if(t < 0.0){\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    if (worldPos.y <= -1.0){\n       normal = normalize (vec3(worldPos.x, 0, worldPos.y));\n       return t;\n    }\n    return INF;\n}\n\n\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 sphNorm;\n    float sphT = traceDodek(pos, dir, sphNorm);\n    if (sphT < dist)\n        return true;\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n}\n\n\n\n\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal){\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS) ? 0.0 : 20.0f / distSq1;\n    \n    \n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 10.0f / distSq2;\n    return color * max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR \n    + color * max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR + texture(iChannel1, normal).rgb * 0.1;\n}\n\n\n\n\n\n\n\n\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    if (sinB > 1.0){\n        return reflect(v, normal);\n    }\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\n\n\n\n\n\n\n\n\n\nfloat pow2(float x){\n    return x*x;\n}\n\nfloat rand(float frame){\n    return fract(sin(dot(vec3(frame), vec3(12.9898, 78.233, 45.5432)))  * 43759.5453);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n     randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5)*2.0) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0,1,0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up*uv.y);\n    float mult = 1.0;\n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    const float AIR_N = 1.0;\n    float n1 = AIR_N;\n    const float GLASS_N = 1.5;\n    float n2 = GLASS_N;\n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    \n    for(int i = 0; i < 10; ++i){\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t){\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb;\n            normal = planeNorm;\n            if(randVals.y < 0.1){\n                materialType = REFLECTION;\n            }\n        }\n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t){\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t){\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }  \n        \n        \n        \n        \n        \n   \n        \n        \n        \n        \n        \n        \n        vec3 FourNorm;\n        vec3 surface[4];\n        surface[0] = vec3(-0.25, -0.75, 0.25);\n        surface[1] = vec3(0.25, -0.75, 0.25);\n        surface[2] = vec3(0.25, -0.25, 0.25);\n        surface[3] = vec3(-0.25, -0.25, 0.25);\n        float t_now = traceFour(curPos, curDir, surface, FourNorm);\n        if (t_now < t) {\n            if(randVals.x < GLASS_R*22.5){\n                materialType = REFRACTION;\n            }\n            else{\n                t = t_now;\n                materialType = EMISSION;\n                normal = FourNorm;\n                color = vec3(1,1,0);\n            }\n         }\n         \n         \n         \n         \n  \n  \n        surface[0] = vec3(0.25, -0.25, 0.25);\n        surface[1] = vec3(0.25, -0.25, -0.25);\n        surface[2] = vec3(-0.25, -0.25, -0.25);\n        surface[3] = vec3(-0.25, -0.25, 0.25); \n        t_now = traceFour(curPos, curDir, surface, FourNorm);\n        if (t_now < t) {\n            if(randVals.x < GLASS_R*22.5){\n                materialType = REFRACTION;\n            }\n            else{\n                t = t_now;\n                materialType = EMISSION;\n                normal = FourNorm;\n                color = vec3(0,0,0);\n            }\n         }\n  \n  \n\n      \n        surface[0] = vec3(0.25, -0.75, 0.25);\n        surface[1] = vec3(0.25, -0.25, 0.25);\n        surface[2] = vec3(0.25, -0.25, -0.25);\n        surface[3] = vec3(0.25, -0.75, -0.25); \n        t_now = traceFour(curPos, curDir, surface, FourNorm);\n        if (t_now < t) {\n            if(randVals.x < GLASS_R*22.5){\n                materialType = REFRACTION;\n            }\n            else{\n                t = t_now;\n                materialType = EMISSION;\n                normal = FourNorm;\n                color = vec3(1,1,0);\n           }\n         }\n         \n         \n         \n        surface[0] = vec3(0.251, -0.4, 0.15);\n        surface[1] = vec3(0.251, -0.3, 0.15);\n        surface[2] = vec3(0.251, -0.3, 0.05);\n        surface[3] = vec3(0.251, -0.4, 0.05); \n        t_now = traceFour(curPos, curDir, surface, FourNorm);\n        if (t_now < t) {\n            if(randVals.x < GLASS_R*22.5){\n                materialType = REFRACTION;\n            }\n            else{\n                t = t_now;\n                materialType = EMISSION;\n                normal = FourNorm;\n                color = vec3(0.5,1,1);\n           }\n         }\n         \n         \n         \n         \n         \n         \n         \n         \n         \n        surface[0] = vec3(0.251, -0.6, 0.15);\n        surface[1] = vec3(0.251, -0.5, 0.15);\n        surface[2] = vec3(0.251, -0.5, 0.05);\n        surface[3] = vec3(0.251, -0.6, 0.05); \n        t_now = traceFour(curPos, curDir, surface, FourNorm);\n        if (t_now < t) {\n            if(randVals.x < GLASS_R*22.5){\n                materialType = REFRACTION;\n            }\n            else{\n                t = t_now;\n                materialType = EMISSION;\n                normal = FourNorm;\n                color = vec3(0.5,1,1);\n            }\n         }\n         \n         \n         \n         \n         \n         \n         \n         \n        surface[0] = vec3(0.251, -0.6, -0.15);\n        surface[1] = vec3(0.251, -0.5, -0.15);\n        surface[2] = vec3(0.251, -0.5, -0.05);\n        surface[3] = vec3(0.251, -0.6, -0.05); \n        t_now = traceFour(curPos, curDir, surface, FourNorm);\n        if (t_now < t) {\n            if(randVals.x < GLASS_R*22.5){\n                materialType = REFRACTION;\n            }\n            else{\n                t = t_now;\n                materialType = EMISSION;\n                normal = FourNorm;\n                color = vec3(0.5,1,1);\n           }\n         }\n         \n         \n         \n         \n         \n         \n         \n        surface[0] = vec3(0.251, -0.4, -0.15);\n        surface[1] = vec3(0.251, -0.3, -0.15);\n        surface[2] = vec3(0.251, -0.3, -0.05);\n        surface[3] = vec3(0.251, -0.4, -0.05); \n        t_now = traceFour(curPos, curDir, surface, FourNorm);\n        if (t_now < t) {\n            if(randVals.x < GLASS_R*22.5){\n                materialType = REFRACTION;\n            }\n            else{\n                t = t_now;\n                materialType = EMISSION;\n                normal = FourNorm;\n                color = vec3(0.5,1,1);\n            }\n         }\n         \n         \n         \n          \n        \n         \n        surface[0] = vec3(-0.25, -0.75, 0.25);\n        surface[1] = vec3(-0.25, -0.25, 0.25);\n        surface[2] = vec3(-0.25, -0.25, -0.25);\n        surface[3] = vec3(-0.25, -0.75, -0.25); \n        t_now = traceFour(curPos, curDir, surface, FourNorm);\n        if (t_now < t) {\n            if(randVals.x < GLASS_R*22.5){\n                materialType = REFRACTION;\n            }\n            else{\n                t = t_now;\n                materialType = EMISSION;\n                normal = FourNorm;\n                color = vec3(1,1,0);\n            }\n         }\n\n\n\n        surface[0] = vec3(-0.25, -0.75, -0.25);\n        surface[1] = vec3(0.25, -0.75, -0.25);\n        surface[2] = vec3(0.25, -0.25, -0.25);\n        surface[3] = vec3(-0.25, -0.25, -0.25);\n        t_now = traceFour(curPos, curDir, surface, FourNorm);\n        if (t_now < t) {\n            if(randVals.x < GLASS_R*22.5){\n                materialType = REFRACTION;\n            }\n            else{\n                t = t_now;\n                materialType = EMISSION;\n                normal = FourNorm;\n                color = vec3(1,1,0);\n            }\n         }\n          \n          \n          \n          \n        surface[0] = vec3(-0.15, -0.75, -0.251);\n        surface[1] = vec3(-0.05, -0.75, -0.251);\n        surface[2] = vec3(-0.05, -0.5, -0.251);\n        surface[3] = vec3(-0.15, -0.5, -0.251);\n        t_now = traceFour(curPos, curDir, surface, FourNorm);\n        if (t_now < t) {\n            if(randVals.x < GLASS_R*22.5){\n                materialType = REFRACTION;\n            }\n            else{\n                t = t_now;\n                materialType = EMISSION;\n                normal = FourNorm;\n                color = vec3(0,0,0);\n            }\n         } \n         \n          \n        vec3 pentNorm;\n        float pentT = traceDodek(curPos, curDir, pentNorm);\n        if (pentT < t) {\n            t = pentT;\n            normal = pentNorm;\n            if (randVals.x < GLASS_R*10.0) {\n                materialType = REFLECTION;\n            }else if(randVals.x < GLASS_R*20.0){\n                vec3 worldPos = t * curDir + curPos;\n                materialType = EMISSION;\n                vec4 fog = sampleFog(worldPos, viewVec);\n                color = fog.rgb * fog.a * mult;\n                mult *= 1.0 - fog.a;\n            } else {\n                materialType = REFRACTION;\n            }\n        }\n        \n     \n        \n        \n       \n        vec3 cyNorm;\n        float cylT = traceCylinder(curPos, curDir, cyNorm);\n        if (cylT < t){\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cyNorm;\n        }\n        \n        if(t != INF){\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if(materialType == EMISSION){\n                fragColor.rgb = color;\n                break;\n            } else if (materialType == DIFFUSE){\n                fragColor.rgb = computeLight(worldPos, color, normal);\n                break;\n            } else if (materialType == REFLECTION){\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            } else if (materialType == REFRACTION){\n                curDir = refraction(curDir, normal, n1, n2);\n                curPos = worldPos + curDir * 1e-5;\n                float tmp = n1;\n                n1 = n2;\n                n2 = tmp;\n            }\n        } else{\n            fragColor = texture(iChannel1, curDir); \n        }\n    }\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     \n    vec2 uv = fragCoord/iResolution.xy;\n\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}