{"ver":"0.1","info":{"id":"DlGSRR","date":"1685887798","viewed":184,"name":"pitcross","username":"skaplun","description":"reference - https://twitter.com/El_Uatu/status/1664586594672623616","likes":21,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","reproduction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float CROSS_SIZE = 0.47;\nconst vec3 CLR = vec3(0.000,0.227,0.761);\nconst float iterations = 12.;\nfloat sdCross(vec2 uv, vec2 center, float width)\n{\n    return min(max(abs(uv.x - center.x) - width, abs(uv.y - center.y) - CROSS_SIZE),\n               max(abs(uv.x - center.x) - CROSS_SIZE, abs(uv.y - center.y) - width));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 aspect = iResolution.xy/iResolution.y;\n    vec2 uv = fragCoord/iResolution.xy * aspect;\n    vec2 center = aspect * 0.5;\n    \n    vec3 resColor = CLR;\n    for (float i = iterations; i >= 0.0; i--)\n    {\n        float scale = 1.0 + pow(i/iterations, 2.2) * 9.0;\n        vec2 offset = vec2(noise(vec3(113.2, iTime * 2.0 + i * 0.1, 1.0)) * 0.2,\n                           noise(vec3(17., 1.1, iTime * 1.1 + i * 0.1)) * 0.2); \n        float crss = sdCross(uv * scale, center * scale + offset * scale, CROSS_SIZE * 1./aspect.x * 0.75);\n        float stencil = step(0.0, crss);\n        resColor = mix(resColor, mix(vec3(1.0), CLR, pow(i/iterations, .5)), stencil);\n        resColor *= max(0.8 + 0.2 * smoothstep(0., -0.05, crss), stencil);\n        //resColor += 0.077 * stencil;\n    }\n    fragColor = vec4(resColor, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//by iq\n#define INTERPOLANT 0\nvec3 hash( vec3 p ) // replace this by something better\n{\n\tp = vec3( dot(p,vec3(127.1,311.7, 74.7)),\n\t\t\t  dot(p,vec3(269.5,183.3,246.1)),\n\t\t\t  dot(p,vec3(113.5,271.9,124.6)));\n\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise(in vec3 p)\n{\n    vec3 i = floor( p );\n    vec3 f = fract( p );\n\n    #if INTERPOLANT==1\n    // quintic interpolant\n    vec3 u = f*f*f*(f*(f*6.0-15.0)+10.0);\n    #else\n    // cubic interpolant\n    vec3 u = f*f*(3.0-2.0*f);\n    #endif    \n\n    return mix( mix( mix( dot( hash( i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ), \n                          dot( hash( i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ), \n                          dot( hash( i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), u.x), u.y),\n                mix( mix( dot( hash( i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ), \n                          dot( hash( i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ), \n                          dot( hash( i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) ), u.x), u.y), u.z );\n}","name":"Common","description":"","type":"common"}]}