{"ver":"0.1","info":{"id":"XtfBW8","date":"1512685040","viewed":88,"name":"Hello World/Shadertoy","username":"PeterTheGreat","description":"This is my first attempt to make 3D perspective art; the lines in 3D space overlap to form the words \"Hello World\" from one angle and \"Shadertoy\" from a different one. Mostly a proof-of-concept project.\n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d","shadertoy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265\n#define PHI 1.61803398875\n#define EPSILON .0001\n//If is set to true, the x coordinate of the mouse determines the \n// number of points drawn between the verticies. If false, the number of points\n// will remain a constant 15.\n#define MOUSE_INPUT_DOTS false\n\n#define DrawPoint(A,D,P,r) smoothstep( r, r - .01, length(cross(P-A, D)) / length(D) )\n#define DistToLine(A1,D1,A2,D2) abs( dot(A2 - A1, cross(D1, D2))) / length(cross(D1, D2))\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    const int CUBE_SIZE = 90; \n\n    // stores verticies of 3D line segments\n    vec3 cube[CUBE_SIZE];\n    \n    cube [0] = vec3(-9., 2., -8.);\n    cube [1] = vec3(-9., 0., -9.);\n    \n    cube [2] = vec3(-9., 0., -8.);\n    cube [3] = vec3(-9., -2., -9.);\n    \n    cube [4] = vec3(-9., 0., -9.);\n    cube [5] = vec3(-8., 0., -8.);\n    \n    cube [6] = vec3(-8., 2., -7.);\n    cube [7] = vec3(-8., 0., -7.);\n    \n    cube [8] = vec3(-8., 0., -7.);\n    cube [9] = vec3(-8., -2., -7.);\n    \n    cube [10] = vec3(-7., -1., -1.);\n    cube [11] = vec3(-6., -1., 0.);\n    \n    cube [12] = vec3(-6., -1., 0.);\n    cube [13] = vec3(-6., 0., 0.);\n    \n    cube [14] = vec3(-6., 0., -6.);\n    cube [15] = vec3(-7., 0., -7.);\n    \n    cube [16] = vec3(-7., 0., -6.);\n    cube [17] = vec3(-7., -1., -6.);\n    \n    cube [18] = vec3(-7., -1., -6.);\n    cube [19] = vec3(-7., -2., -6.);\n    \n    cube [20] = vec3(-7., -2., -3.);\n    cube [21] = vec3(-6., -2., -2.);\n    \n    cube [22] = vec3(-5., 2., -7.);\n    cube [23] = vec3(-5., 0., -7.);\n    \n    cube [24] = vec3(-5., 0., -5.);\n    cube [25] = vec3(-5., -2., -5.);\n    \n    cube [26] = vec3(-4., 2., -7.);\n    cube [27] = vec3(-4., 0., -7.);\n    \n    cube [28] = vec3(-4., 0., -5.);\n    cube [29] = vec3(-4., -2., -5.);\n    \n    cube [30] = vec3(-3., 0., -4.);\n    cube [31] = vec3(-3., -2., -4.);\n    cube [76] = vec3(-3., -1., -4.);\n    cube [77] = vec3(-3., -2., -5.);\n    \n    cube [32] = vec3(-3., -2., -1.);\n    cube [33] = vec3(-2., -2., 0.);\n    \n    cube [34] = vec3(-2., -2., -3.);\n    cube [35] = vec3(-2., 0., -3.);\n    \n    cube [36] = vec3(-2., 0., -5.);\n    cube [37] = vec3(-3., 0., -4.);\n    cube [78] = vec3(-2., 0., -3.);\n    cube [79] = vec3(-3., 0., -2.);\n    \n    cube [38] = vec3(0., 2., -2.);\n    cube [39] = vec3(0., 0., -2.);\n    \n    cube [40] = vec3(0., 0., -2.);\n    cube [41] = vec3(0., -2., -2.);\n    \n    cube [42] = vec3(0., -2., 4.);\n    cube [43] = vec3(2., -2., 5.);\n    \n    cube [44] = vec3(2., -2., 1.);\n    cube [45] = vec3(2., 0., 1.);\n    \n    cube [46] = vec3(2., 0., -2.);\n    cube [47] = vec3(2., 2., -2.);\n    cube [82] = vec3(2., 0., 4.);\n    cube [83] = vec3(2., 1., 4.);\n    \n    cube [48] = vec3(1., -2., -1.);\n    cube [49] = vec3(1., 0., -1.);\n    \n    cube [50] = vec3(3., 0., 1.);\n    cube [51] = vec3(3., -2., 1.);\n    \n    cube [52] = vec3(3., -2., 6.);\n    cube [53] = vec3(4., -2., 7.);\n    \n    cube [54] = vec3(4., -2., 4.);\n    cube [55] = vec3(4., 0., 4.);\n    \n    cube [56] = vec3(4., 0., -1.);\n    cube [57] = vec3(3., 0., 0.);\n    cube [80] = vec3(4., 0., 1.);\n    cube [81] = vec3(3., 0., 2.);\n    \n    cube [58] = vec3(5., -2., 6.);\n    cube [59] = vec3(5., 0., 6.);\n    \n    cube [60] = vec3(5., 0., 3.);\n    cube [61] = vec3(6., 0., 5.);\n    \n    cube [62] = vec3(7., 2., -2.);\n    cube [63] = vec3(7., 0., -2.);\n    cube [86] = vec3(7., 1., 8.);\n    cube [87] = vec3(7., 0., 8.);\n    \n    cube [64] = vec3(7., 0., 7.);\n    cube [65] = vec3(7., -2., 7.);\n    \n    cube [66] = vec3(9., 0., 6.);\n    cube [67] = vec3(8., 0., 7.);\n    cube [84] = vec3(9., 0., 8.);\n    cube [85] = vec3(8., 0., 9.);\n    \n    cube [68] = vec3(8., 0., 9.);\n    cube [69] = vec3(8., -2., 9.);\n    \n    cube [70] = vec3(8., -2., 8.);\n    cube [71] = vec3(9., -2., 9.);\n    \n    cube [72] = vec3(9., -2., 9.);\n    cube [73] = vec3(9., 0., 9.);\n    \n    cube [74] = vec3(9., 0., -2.);\n    cube [75] = vec3(9., 2., -2.);\n    cube [88] = vec3(9., 0., 9.);\n    cube [89] = vec3(9., 1., 9.);\n    \n    \n    \n\tvec2 uv = (fragCoord - .5* iResolution.xy) / iResolution.y;\n    \n    float t = iTime / 4.;\n    \n    vec3 origin;\n    if (iMouse.z >= 1.) {\n    \tvec2 m = iMouse.xy/iResolution.xy;\n        origin = vec3(-500. + 3500. * cos(0.1 * t + 6.0 * m.x), -5000. + 10000. * m.y, 500. + 4000. * sin(0.1 * t + 6.0 * m.x));\n\n    }\n    else\n        origin = vec3(1200. - (sin(t) + 1.) * 600., 0. + 200. * sin(2. * t), -1200. - (sin(t) - 1.) * 600.);\n\n\n    vec3 cameraFocus = vec3(0.);\n    \n    float zoom = length(origin) / 4.;\n    \n    vec3 f = normalize(cameraFocus - origin);\n\tvec3 r = vec3(f.z, 0., -f.x);\n    vec3 u = cross(f, r);\n    \n    vec3 center = origin + f * zoom;\n    vec3 i = center + uv.x * r + uv.y * u;\n    vec3 direction = i - origin;\n    \n    \n    vec3 point = vec3(0. + cos(t), 0., 1. + sin(t));\n    \n    float radius = .04;\n    \n    float d = 0.;\n    \n    float numDots = 15.;\n    if (MOUSE_INPUT_DOTS)\n        numDots = floor(iMouse.x * .06);\n   \n    for (int i = 0; i < CUBE_SIZE; i += 2) {\n        cube[i] /= 5.;\n        cube[i+1] /= 5.;\n        if (DistToLine(origin, direction, cube[i], cube[i + 1] - cube[i]) < radius)\n            for (float k = 0.; k < numDots; ++ k)\n                if (d < 1.)\n                    d += DrawPoint(origin, direction, (k * cube[i] + (numDots - k) * cube[i + 1]) / numDots, radius);\n    }\n\n    \n    d += .25;\n    \n    uv *= 15. / zoom;\n    fragColor = vec4(0.3, d, 1. - d, 0.) / 2.;\n    \n    if (d > .3)\n    \tfragColor += d * vec4(uv,0.5+0.5*sin(iTime),1.0) / 2.;\n    \n}","name":"Image","description":"","type":"image"}]}