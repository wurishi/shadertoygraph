{"ver":"0.1","info":{"id":"sltXDj","date":"1639833877","viewed":68,"name":"attenuation test 2D","username":"flying_monster","description":"Just a light attenuation test.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["attenuation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n    Just my tests for light attenuation.\n*/\n\n\n//#define LINEAR\n//#define TEST0\n//#define TEST1\n#define TEST2\n\n#define DEBUG 0.1\n\nfloat attenuation(in float dist, in float radius)\n{\n#if defined LINEAR\n    return smoothstep(radius, 0.0, dist);\n#elif defined TEST0\n    float value = 1.0 / pow(exp(dist / radius), 3.0);\n    return (value > 0.05) ? value : DEBUG;\n#elif defined TEST1\n    float att = clamp(dist / radius, 0.0, 1.0);\n    float attenuation_koeff = 0.125;\n    float value = 1.0 - pow(att, attenuation_koeff);\n    return (value > 0.0) ? value : DEBUG;\n#elif defined TEST2\n    float att = clamp(dist / radius, 0.0, 1.0);\n    return 1.0 - (att * (dist * 2.0));\n#else\n    float val = (dist / radius);\n    return exp2(-(val * val) * 4.0);\n#endif\n}\n\nconst float line_width = 0.002;\nconst vec2 line_pos = vec2(0.75, 0.53);\nconst vec3 line_color = vec3(1.0, 0.65, 0.1);\n\nvoid mainImage(out vec4 FragColor, in vec2 FragCoord)\n{\n    vec2 texcoords = FragCoord / iResolution.xy;\n    vec2 uv = texcoords;\n    float aspect = iResolution.x / iResolution.y;\n\n    bool line = false;\n\n    uv -= vec2(0.5, 0.5);\n    uv /= vec2(1.0, aspect);\n    texcoords /= vec2(1.0, aspect);\n\n    if((texcoords.x > (line_pos.x - line_width) && texcoords.x < (line_pos.x + line_width)) ||\n       (texcoords.y > (line_pos.y - line_width) && texcoords.y < (line_pos.y + line_width)))\n        line = true;\n\n    float dist = sqrt(dot(uv, uv)) * 2.0;\n    float radius = 0.5;\n\n    FragColor = vec4(vec3(attenuation(dist, radius)), 1.0);\n\n    if(line)\n        FragColor.rgb = line_color;\n}","name":"Image","description":"","type":"image"}]}