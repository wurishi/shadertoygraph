{"ver":"0.1","info":{"id":"ddsBzj","date":"1688968698","viewed":79,"name":"Ray Marching Union. ","username":"janseninline","description":"Trabalho de ray marching.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["sphereunion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 70.0\n#define EPS 0.01\n\n\nfloat smoothMin(\n    float a, float b, float c, \n    float d, float e, float f, float t){\n\n    return -log(\n        exp(t * -a) + exp(t * -b) + exp(t * -c) +\n        exp(t * -d) + exp(t * -e) + exp(t * -f)\n    ) / t;\n}\n\n\nfloat getDist(vec3 p){\n    float ang = iTime / 4.;\n\n    vec4 v1 = vec4(cos(3.0 * ang), sin(2.0 * ang), cos(ang), 1);\n    vec4 v2 = vec4(cos(3.0 * ang), sin(ang), sin(2.0 * ang), 1);\n    vec4 v3 = vec4(sin(ang), cos(3.0 * ang), sin(2.0 * ang), 1);\n\n    vec4 v4 = vec4(cos(4.0 * ang), sin(3.0 * ang), cos(ang), 1);\n    vec4 v5 = vec4(cos(4.0 * ang), sin(ang), sin(3.0 * ang), 1);\n    vec4 v6 = vec4(sin(ang), sin(4.0 * ang), sin(3.0 * ang), 1);\n\n    vec4 bola1 = vec4(-1, 1, 1, .4) * v1 + vec4(0, 0, 4, 0);\n    vec4 bola2 = vec4(2, -2, 2, .2) * v2 + vec4(0, 0, 4, 0);\n    vec4 bola3 = vec4(2, 2, -2, .2) * v3 + vec4(0, 0, 4, 0);\n\n    vec4 bola4 = vec4(-1, -1, 1, .6) * v4 + vec4(0, 0, 4, 0);\n    vec4 bola5 = vec4(1, -1, -1, .6) * v5 + vec4(0, 0, 4, 0);\n    vec4 bola6 = vec4(-1, 1, -1, .6) * v6 + vec4(0, 0, 4, 0);\n    \n    return min(1.0 + p.y, smoothMin(\n        length(p - bola1.xyz) - bola1.w,\n        length(p - bola2.xyz) - bola2.w,\n        length(p - bola3.xyz) - bola3.w,\n        length(p - bola4.xyz) - bola4.w,\n        length(p - bola5.xyz) - bola5.w,\n        length(p - bola6.xyz) - bola6.w,\n        12.6\n    ));\n}\n\n\nvec3 normal(vec3 p){\n    float d = getDist(p);\n    vec2 e = 10. * vec2(EPS, 0);\n    vec3 n = d - vec3(\n        getDist(p - e.xyy),\n        getDist(p - e.yxy),\n        getDist(p - e.yyx)\n    );\n    return 1.6 * normalize(n);\n}\n\n\nvec3 shadow(vec3 p){\n    vec3 l1 = vec3(0.22, 0.22, 6.);\n    float light1 = dot(normal(p), normalize(l1 - p));\n    return pow(vec3(light1 / 5.0 + 1.0), vec3(1.8, 1.8, 1.0) / 0.8) - .4;\n}\n\n\nfloat rayMarch(vec3 ro, vec3 rd){\n    float t = 0.;\n    for(int i = 0; i < MAX_STEPS; i++){\n        float step = getDist(ro + t * rd);\n        t += step;\n        if(t > MAX_DIST || step < EPS) break;\n    }\n    return t;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n    \n    vec3 ro = vec3(0, 0, -1);\n    vec3 rd = vec3(uv, 1.);\n    float t = rayMarch(ro, rd);\n    vec3 col = shadow(ro + t * rd);\n    \n    if (t > MAX_DIST) col = vec3(.5,.6,.7);\n\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}