{"ver":"0.1","info":{"id":"ttG3zc","date":"1579482369","viewed":177,"name":"The Fractal Void","username":"acandy","description":"Trippy moving fractal using code altered from a tutorial made by the youtube channel, \"The Art Of Code\"","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Xor(float a, float b) {\n    return a*(1.-b) + b*(1.-a);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    \n    float t = iTime*.02+iDate[2];\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    float centDist = length(uv)*(8.*pow(0.5*sin(t*2.43)+1., 2.+sin(t*1.06)));\n    \n    \n    float a = 0.786;\n    float totalSpinTime = 2.;\n    float spinOccurance = 20.;\n    //Get it to spin every so often\n    if (mod(t, spinOccurance) <= totalSpinTime) {\n        a += (3.1416*2.)*smoothstep(0., 1., mod(t, spinOccurance)/totalSpinTime);\n    } \n    float s = sin(a);\n    float c = cos(a);   \n    uv *= mat2(c, -s, s, c);\n    \n    float uvZoom = (4.+8.*pow(sin(t*0.187+length(uv))*0.5+0.5, 2.+sin(0.278*t))+4.*sin(t*2.5)) * (0.5*sin(t*5.7)+1.);\n    uv *= uvZoom;\n    \n    float blur = uvZoom*0.003;\n    \n    float lineWidth = uvZoom*0.005 + sin(2.7*t)*0.003;\n    float lineBlur = uvZoom*0.002;\n    vec3 lineCol = vec3(0.);\n    \n    float extraLineWidth = uvZoom*0.01 + sin(2.7*t)*0.003;\n    float extraLineBlur = extraLineWidth/3.;\n    vec3 extraLineCol = vec3(0.);\n    float extraLineCutoff = 11.;\n    float extraLineCutoff2 = 6.;\n    \n    \n    vec2 gv = fract(uv+0.5)-0.5;\n    vec2 id = floor(uv+0.5);\n    \n    float m = 0.;\n    \n    for(float y=-2.; y<=2.; y++) {\n        for(float x=-2.; x<=2.; x++) {\n            vec2 offs = vec2(x, y);\n            \n            float dCir = length(gv-offs);\n            float dSqu = abs(abs((gv-offs)[0])-abs((gv-offs)[1]));\n            float d = mix(dCir, dSqu, 1.*(0.5*sin(t*.63) +0.5));\n            \n   \t\t\tfloat dist = length(id+offs)*.3*(0.5*sin(0.93*t)+0.5);\n            \n            \n            float rMix = 0.6*pow(sin(-t+dist*0.6)*.5 +.5, 4.) + 0.4*(sin(3.*t+dist*0.6)*.5 +.5);\n            float r = mix(1.1, 2.5, rMix);\n            \n            if (d>r-lineWidth/2. && d<r) {\n                float blurRat = (d-(r-lineWidth/2.)) / ((r-lineWidth/2.+lineBlur)-(r-lineWidth/2.));\n                lineCol+=mix(0., 1., smoothstep(0., 1., blurRat));  \n                //lineCol+=1.;\n            }\n            else if((d<r+lineWidth/2. && d>r)) {\n                float blurRat = (d-(r+lineWidth/2.)) / ((r+lineWidth/2.-lineBlur)-(r+lineWidth/2.));\n                lineCol+=mix(0., 1., smoothstep(0., 1., blurRat));\n                //lineCol+=1.;\n            }\n            \n            \n            if (uvZoom < extraLineCutoff) {\n                float extraLineFade = (uvZoom-extraLineCutoff)/(0.-extraLineCutoff);\n                float r2 = r/2.;\n            \tif (d>r2-extraLineWidth/2. && d<r2) {\n                    float blurRat = (d-(r2-extraLineWidth/2.)) / ((r2-extraLineWidth/2.+extraLineBlur)-(r2-extraLineWidth/2.));\n                    extraLineCol+=mix(0., 1., smoothstep(0., 1., blurRat*extraLineFade));  \n            \t}\n            \telse if((d<r2+extraLineWidth/2. && d>r2)) {\n                    float blurRat = (d-(r2+extraLineWidth/2.)) / ((r2+extraLineWidth/2.-extraLineBlur)-(r2+extraLineWidth/2.));\n                    extraLineCol+=mix(0., 1., smoothstep(0., 1., blurRat*extraLineFade));\n            \t}\n            }\n            \n            if (uvZoom < extraLineCutoff2) {\n                float extraLineFade = (uvZoom-extraLineCutoff2)/(0.-extraLineCutoff2);\n                float r3 = r*(0.5*sin(t*5.)+0.5);\n            \tif (d>r3-extraLineWidth/2. && d<r3) {\n                    float blurRat = (d-(r3-extraLineWidth/2.)) / ((r3-extraLineWidth/2.+extraLineBlur)-(r3-extraLineWidth/2.));\n                    extraLineCol+=mix(0., 1., smoothstep(0., 1., blurRat*extraLineFade));  \n            \t}\n            \telse if((d<r3+extraLineWidth/2. && d>r3)) {\n                    float blurRat = (d-(r3+extraLineWidth/2.)) / ((r3+extraLineWidth/2.-extraLineBlur)-(r3+extraLineWidth/2.));\n                    extraLineCol+=mix(0., 1., smoothstep(0., 1., blurRat*extraLineFade));\n            \t}\n            }\n            \n            m = Xor(m, smoothstep(r, r-blur, d));\n        }\n    }\n    \n    //col.rg = gv;\n    vec3 col = vec3(0);\n    col+=vec3(m*(0.5*sin(t*0.2)+0.5), m*(0.5*sin(t*0.25)+0.5), m*(0.5*sin(t*0.15)+0.5));\n    vec3 colMult = vec3(0.5*sin(6.1*t + centDist)+0.7, 0.5*sin(7.2*t+centDist)+0.7, 0.5*sin(8.3*t+centDist)+0.7);\n    lineCol *= colMult;\n    extraLineCol *= col*0.7;\n    \n    col*= colMult;\n    col+=lineCol;\n    col+=extraLineCol;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}