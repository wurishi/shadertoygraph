{"ver":"0.1","info":{"id":"XdKfWw","date":"1529073860","viewed":232,"name":"Particules Test","username":"FlorianDuf","description":"Test Particules.\n\nThey are many little problem in my particules simulator. Like the noise and the non chaotic movement of my particules.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["particules2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(float n){\n    return 2.0*fract(cos(n*89.42)*343.42);\n}\n\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\n\n\nbool point(in vec2 p, in vec2 pRef, in float distMax)\n{\n    return distance(p, pRef) <= distMax;\n}\n\nvec2 point_pos = vec2(0.0);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 xy = -1.0 + 2.0*fragCoord.xy/iResolution.xy;\n    vec2 uv = xy * vec2(iResolution.x/iResolution.y, 1.0);\n\n    // Time varying pixel color\n    vec3 col = vec3(0.0);\n    float maxPoint = 40.0;\n    float size_point = 0.02;\n    \n    for (float i = 0.0; i < maxPoint; ++i)\n    {\n        float hazard=rand(i);\n        for (float j = 0.0; j < maxPoint; ++j)\n        {\n            float hazard2=rand(j);\n            point_pos = vec2(sin(hazard * hash(j) * iTime + hash(i + j+1.0)), sin(hazard2 *hash(i) * iTime + hash(i - j+1.0)));\n            \tif ( point(uv, point_pos, size_point) )\n                {\n                    //col = vec3(1.0);\n                    col = vec3(hash(j)); // Inferno's proposal\n                \t//col = vec3(hash(i),hash(j), hash(i*j));        \n                }\n        }\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}