{"ver":"0.1","info":{"id":"M3lBD7","date":"1728494175","viewed":28,"name":"triangle of sportyoga life","username":"nayk","description":"originals  https://www.shadertoy.com/view/43ffDM","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["triangle","light","emblema"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\nconst float PI = 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481;\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n \nfloat sdTriangleSharp(vec2 p, float r) {\n    r *= 2.6/4.5;\n    float a = PI/0.75 - PI/2.0; //2.6179938779914943653855361527329190701643078328125881841457\n    float d1 = dot(p, vec2(cos(-a), sin(-a)))+r;\n    float d2 = -dot(p, vec2(cos(a), sin(a)))+r;\n    float d3 = dot(p, vec2(0.0,1.0))+r;\n    return -min(d1,min(d2,d3));\n}\nvoid mainImage(out vec4 O, vec2 C)\n{\n    O=vec4(0);\n    vec2 uv = ( C - .5*iResolution.xy ) / iResolution.y;\n    \n     //Sawtooth function to pulse from centre.\n    float offset = (iTime- floor(iTime))/iTime;\n\tfloat CurrentTime = (iTime)*(offset);    \n      vec2 p2 = (2.0*C.xy-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    p2*= 2.0;\n    m *= 2.0;\n    \n\tfloat d2 = sdTriangleSharp( p2, 1.0 );\n\n    vec3 col = (d2>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n\tcol *= 1.0 - exp(-4.0*abs(d2));\n\tcol *= 0.8 + 0.2*cos(60.0*d2);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.02,abs(d2)) );\n\n    if( iMouse.z>0.001 )\n    {\n    d2 = sdTriangleSharp( m, 1.0 );\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.01, abs(length(p2-m)-abs(d2))-0.005));\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.01, length(p2-m)-0.03));\n    }\n\tvec3 WaveParams = vec3(10.0, 0.8, 0.1 ); \n    \n    float ratio = iResolution.y/iResolution.x;\n    \n    //Use this if you want to place the centre with the mouse instead\n\t// vec2 WaveCentre = vec2( iMouse.xy / iResolution.xy );\n       \n    vec2 WaveCentre = vec2(0.5, 0.5);\n    WaveCentre.y *= ratio; \n   \n\tvec2 texCoord = C.xy / iResolution.xy;      \n    texCoord.y *= ratio;    \n\tfloat Dist = distance(texCoord, WaveCentre);\n    \n\t\n\tvec4 Color = texture(iChannel0, texCoord);\n    \n//Only distort the pixels within the parameter distance from the centre\nif ((Dist <= ((CurrentTime) + (WaveParams.z))) && \n\t(Dist >= ((CurrentTime) - (WaveParams.z)))) \n\t{\n        //The pixel offset distance based on the input parameters\n\t\tfloat Diff = (Dist - CurrentTime); \n\t\tfloat ScaleDiff = (1.0 - pow(abs(Diff * WaveParams.x), WaveParams.y)); \n\t\tfloat DiffTime = (Diff  * ScaleDiff);\n        \n        //The direction of the distortion\n\t\tvec2 DiffTexCoord = normalize(texCoord - WaveCentre);         \n        \n        //Perform the distortion and reduce the effect over time\n\t\ttexCoord += ((DiffTexCoord * DiffTime) / (CurrentTime * Dist * 40.0));\n        vec2 offset = vec2(0.05, 0.0);\n        \n        \n\t\t;  \n        \n        \n        //Blow out the color and reduce the effect over time\n\t\tColor += (Color * ScaleDiff) / (CurrentTime * Dist * 40.0);\n\t} \n    \n    vec3 p,q,r=iResolution,\n    d=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<70.;\n        O.xyz+=mix(vec3(1),H(g*.1),.8)*1./e/8e3\n    )\n    {\n        p=g*d+Color.xyz;\np.z+=iTime*2.;\n        a=20.;\n        p=mod(p-a,a*2.)-a;\n        s=3.;\n        for(int i=0;i++<8;){\n            p=.3-abs(p);\n            p.x<p.z?p=p.zyx:p;\n            p.z<p.y?p=p.xzy:p;\n            s*=e=1.7+sin(iTime*.001)*.1;\n            p=abs(p)*e-\n                vec3(\n                    5.+sin(iTime*.3+.5*sin(iTime*.03))*3.,\n                    120,\n                    8.+cos(iTime*.05)*5.\n                 )*col;\n         }\n         g+=e=length(p.yxyz)/s;\n    }\n    uv *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 \n  O*= vec4(happy_star(uv, anim) * vec3(0.55,0.5,1.35)*2., 1.0);\n}","name":"Image","description":"","type":"image"}]}