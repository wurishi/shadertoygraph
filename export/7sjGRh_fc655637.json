{"ver":"0.1","info":{"id":"7sjGRh","date":"1616999237","viewed":210,"name":"snow accumulation","username":"dysangel","description":"Simulating falling snow\n\nyou can uncomment some code on Buffer A line 149 to add rudimentary wind response (reacts to audio volume)","likes":0,"published":1,"flags":48,"usePreview":0,"tags":["snow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 Q, in vec2 U )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = U/iResolution.xy;\n    \n    // Output to screen\n    Q =  texture(iChannel0, uv).r * 2. +\n        (texture(iChannel1, uv - vec2(iTime*0.02,0.)) * 0.04) +\n        (texture(iChannel1, uv - vec2(iTime*-0.01,0.)) * 0.04);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define INTENSITY_THRESHOLD 0.07\n\nfloat rand() {\n    return fract (sin(iTime + 0.1) + 0.5 * .9931);\n}\n\nfloat rand_at_pix(float x, float y) {\n    return fract (sin((iTime * 0.1) + x * 1242.451 + y * 1946.11) * 25.1837);\n}\n\nvoid mainImage( out vec4 Q, in vec2 U )\n{\n    vec2 uv = U/iResolution.xy;\n    \n    if (iFrame == 0 || keyboard(CH_SPC))\n    {\n        Q = CLEAR;\n    }\n    else //if (iFrame == 1)\n    {\n        if (iMouse.z > 0.) {\n            vec4 n = iMouse.xyxy;\n            if (uv.x >= iMouse.x)\n            {\n                Q = SNOW;\n            }\n        }\n\n        float snow_momentum = -1.;\n        float snow_intensity = 1.7;//texture(iChannel3, vec2(0.5, 0.1)).r;\n\n        if (U.y >= iResolution.y - 1.)\n        {\n            if ((texture(iChannel2, vec2(rand_at_pix(uv.x,1.), rand_at_pix(uv.x, 15.))).r < 0.05 + (snow_intensity / 4.)))\n            {\n                float direction_counter = rand_at_pix(uv.x,1.);\n                float movement_ticker = rand_at_pix(uv.x, 2.);\n                float ticker_increment = rand_at_pix(uv.x, iTime) * 0.1 - 0.05;\n                \n                Q = vec4(1.,direction_counter,movement_ticker, ticker_increment);\n            }\n            else\n            {\n                Q = CLEAR;\n            }\n        }\n        \n        vec2 here = uv;\n        vec2 up = vec2(uv.x, uv.y + rely(1.));\n        vec2 down = vec2(uv.x, uv.y - rely(1.));\n\n        vec2 left = vec2(uv.x - relx(1.), uv.y);\n        vec2 right = vec2(uv.x + relx(1.), uv.y);\n\n        vec2 up_left = vec2(uv.x - relx(1.), uv.y + rely(1.));\n        vec2 up_right = vec2(uv.x + relx(1.), uv.y + rely(1.));\n        \n        if (U.x >= iResolution.x - 1.)\n        {\n            up_right.x = 0.;\n        }\n        if (U.x < 1.)\n        {\n            up_left.x += relx(iResolution.x);\n        }\n        \n        vec2 down_left = vec2(uv.x - relx(1.), uv.y - rely(1.));\n        vec2 down_right = vec2(uv.x + relx(1.), uv.y - rely(1.));\n\n        float y_cutoff = iResolution.y - 1.;\n        \n        float meltRate = 0.991;\n\n        if (isSnow(left))       { meltRate += 0.0042; }\n        if (isSnow(right))      { meltRate += 0.0042; }\n        if (isSnow(down))       { meltRate += 0.0005; }\n        \n            \n        if (U.y <= 1.1)\n        {\n            meltRate += 0.001;\n            \n            vec4 snow = texture(iChannel0, here);\n            float snowValue = clamp(snow.r * meltRate, 0., 1.);\n            snow.r = snowValue;\n        \n            if (isSnow(here))\n            {\n                Q = snow;\n            }\n            else\n            {\n                Q = CLEAR;\n            }\n        }\n        else if (isSnow(here))\n        {\n            vec4 snow = texture(iChannel0, here);\n            float snowValue = clamp(snow.r * meltRate, 0., 1.);\n            snow.r = snowValue;\n            \n            Q = snow;\n            \n            if (snow.b >= 1. && isClear(down_right))\n            {\n                Q = CLEAR;\n            }\n            else if (snow.b <= 0. && isClear(down_left))\n            {\n                Q = CLEAR;\n            }\n            else if (isClear(down))\n            {\n                Q = CLEAR;\n            }\n            else if (isSnow(down))\n            {\n                Q = snow;\n            }\n        }\n        \n        if (isClear(here) && (U.y <= iResolution.y - 1.))\n        {\n            if (isSnow(up_right))\n            {\n                vec4 snow = texture(iChannel0, up_right);\n\n                if (snow.b <= 0.)\n                {\n                    snow.b = 0.5;\n                    Q = snow;\n                }\n            }\n\n            if (isSnow(up_left))\n            {\n                vec4 snow = texture(iChannel0, up_left);\n                if (snow.b >= 1.)\n                {\n                    snow.b = 0.5;\n                    Q = snow;\n                }\n            }\n\n            vec4 snow = texture(iChannel0, up);\n            if (isSnow(up) && snow.b > 0. && snow.b < 1.)\n            {\n                vec4 snow = texture(iChannel0, up);\n                snow.b += snow.a; // + (sin(snow_intensity * 20.) * 1.);\n                Q = snow;\n            }\n            \n            \n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define PI 3.141592653\n\n#define keyboard(k) texelFetch(iChannel1, ivec2(k,0), 0).r>.5\n#define CH_SPC 32\n\n#define y_adjust (iResolution.y / iResolution.x)\n#define x_pixels (1. / iResolution.x)\n#define y_pixels (1. / iResolution.y)\n#define relx(i) (i / iResolution.x)\n#define rely(i) (i / iResolution.y)\n#define rel(i,j) vec2(mod(i / iResolution.x, iResolution.x), mod(j / iResolution.y, iResolution.y))\n\n#define lookup0(i,j) texture(iChannel0, vec2(i,j))\n\n#define isSnow(i) texture(iChannel0, i).r > 0.3\n#define isClear(i) texture(iChannel0, i).r < 0.3\n\n#define SNOW vec4(1.,1.,1.,1.)\n#define CLEAR vec4(0.,0.,0.,1.)\n#define RED vec4(1.,0.,0.,1.)","name":"Common","description":"","type":"common"}]}