{"ver":"0.1","info":{"id":"stt3RH","date":"1635739807","viewed":112,"name":"Normal map from noise","username":"TheDoubleAP","description":"generate normal maps from noise","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["noise","normalmap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// from: https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\n\nfloat rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\n\nfloat noise(vec2 n) {\n\tconst vec2 d = vec2(0.0, 1.0);\n  vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n\n\n\n\nfloat randNorm(vec2 p){\n  return mix(noise(p*150.), .5, .5);\n}\n\n// from: https://www.shadertoy.com/view/3ld3Wl\nvec3 genNormMap( vec2 p )\n{\n    vec2 texelsize = vec2(.001);\n\n    float dx = 0.;\n    float dy = 0.;\n    \n    dx -= randNorm(vec2(p.x - texelsize.x, p.y - texelsize.y)) * 1.0;\n\tdx -= randNorm(vec2(p.x - texelsize.x, p.y              )) * 2.0;\n\tdx -= randNorm(vec2(p.x - texelsize.x, p.y + texelsize.y)) * 1.0;\n\tdx += randNorm(vec2(p.x + texelsize.x, p.y - texelsize.y)) * 1.0;\n\tdx += randNorm(vec2(p.x + texelsize.x, p.y              )) * 2.0;\n\tdx += randNorm(vec2(p.x + texelsize.x, p.y + texelsize.y)) * 1.0;\n    \n    dy -= randNorm(vec2(p.x - texelsize.x, p.y - texelsize.y)) * 1.0;\n\tdy -= randNorm(vec2(p.x              , p.y - texelsize.y)) * 2.0;\n\tdy -= randNorm(vec2(p.x + texelsize.x, p.y - texelsize.y)) * 1.0;\n\tdy += randNorm(vec2(p.x - texelsize.x, p.y + texelsize.y)) * 1.0;\n\tdy += randNorm(vec2(p.x              , p.y + texelsize.y)) * 2.0;\n\tdy += randNorm(vec2(p.x + texelsize.x, p.y + texelsize.y)) * 1.0;\n    \n    float nx = dx;\n    float ny = dy;\n    \n    vec3 norm = vec3(nx,\n                     ny,\n                    sqrt(1.0 - nx*nx - ny*ny));\n    \n    return vec3(norm * vec3(0.5, 0.5, 1.0) + vec3(0.5, 0.5, 0.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n\n    vec3 col = genNormMap(uv);\n    //vec3 col = normalize(genNormMap(uv) * 2. - 1.);\n\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}