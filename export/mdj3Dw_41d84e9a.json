{"ver":"0.1","info":{"id":"mdj3Dw","date":"1667731406","viewed":138,"name":"Alien temple in the desert","username":"kastorp","description":"another application of jt [url=https://www.shadertoy.com/view/ddjGzW]sdf[/url] function","likes":18,"published":1,"flags":0,"usePreview":0,"tags":["sdf","geometric","serie"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Alien Temple in the desert\n//another application of jt sdf function:   https://www.shadertoy.com/view/ddjGzW\n#define PI 3.1416\nfloat map2d(int i,float ns,float ds){         \n    return (ns -float(i)/5.)*ds;\n}\n\n#if 1\nfloat map2(vec2 p)\n{\n    float n=5.;\n    p = abs(p);\n\n    float n1 = n - 1.0;\n    float b = n / n1;\n    vec2 s = floor(log2(p)/log2(b));\n    float m = max(s.x, s.y);\n    p = fract(p/pow(b, m)*n1);\n\n    p = 0.5-abs(p-0.5);\n    float d = min(p.x, p.y);\n    //d = min(d,length(p-0.5)-0.5); // circles\n    return d*pow(b, m)*b/n;\n}\n#else\n\n\nfloat map2(vec2 p)\n{\n    float a= PI/8.; \n    vec2 n=-vec2(cos(a),sin(a));\n    for(float i=0.; i<20.; i++){ //repetition\n    \tp.xy=abs(p.xy);\n\t\tfloat g=dot(p,n)+.12;//cell size\n\t\tp-=(g-abs(g))*n;\n    }\n   return         length(max(abs(p)-vec2(.1,.0),0.0)) ;\n}\n#endif\n\n\nfloat map (vec3 ps){\n    float bottom=0., sz=.5;\n    int N =2;\n    vec2 p=vec2(ps.y,0);\n    float  d=1e5, sg=1.;\n    float   ds=1.,\n           ns= map2(ps.xz)-.05;\n    float  yn=map2d(N,ns,ds);\n    for(int i=0;i<N;i++){   \n        float y0=map2d(i,ns,ds),\n              y1=map2d(i+1,ns,ds);\n        float  a= 0.,\n               c=y0,\n               b=(y1-y0)/sz,\n               shift=float(i)*sz;\n        //K<0 inflate, k>0 deflate\n        //float k=-.12 ; a+= k/sz/sz; b-= k/sz ;\n        \n\n        vec2 pp=p-vec2(shift+bottom,0);\n        if(pp.x>0. && pp.x<sz && pp.y<c+pp.x*b+pp.x*pp.x*a) sg=-1.; //sign\n                    \n        float xx=clamp(p.x-shift-bottom,0.,sz),\n              yy=c+xx*b +xx*xx*a;            \n        d = min(d, length(p-vec2(xx+shift+bottom,yy)));       \n    }\n     float top=bottom+float(N)*sz;\n    d=min(d, length(p- vec2(top,yn) +vec2(0,1)*  clamp(vec2(top,yn)-p.y  , 0., 1e6)));\n\n    d*=sg;\n    d=min(d,ps.y);\n    d=min(d,length(ps-vec3(0,.25,0))-.25);\n    return d;\n}\n\n\n\n//-------------------------\n\n//Iq\nvec3 calcN(vec3 p, float t) {\n\tfloat h = .0001 * t;\n\tvec3 n = vec3(0);\n\tfor (int i = min(iFrame, 0); i < 4; i++) {\n\t\tvec3 e = .5773 * (2. * vec3((((i + 3) >> 1) & 1), (i >> 1) & 1, i & 1) - 1.);\n\t\tn += e * map(p + e * h);\n\t}\n\treturn normalize(n);\n}\n\n\n//Iq\nvec3 vignette(vec3 c, vec2 fc) {\n\tvec2 q = fc.xy / iResolution.xy;\n\tc *=  .5 + .5 * pow(16. * q.x * q.y * (1. - q.x) * (1. - q.y), .4);\n\treturn c;\n}\n\nvec3 getRayDir(vec3 ro, vec3 lookAt, vec2 uv) {\n\tvec3 f = normalize(lookAt - ro),\n\t\t r = normalize(cross(vec3(0,1., 0), f));\n\treturn normalize(f + r * uv.x + cross(f, r) * uv.y);\n}\n\n//Iq\nfloat calcShadow(vec3 p, vec3 ld) {\n\tfloat s = 1., t = .004;\n\tfor (float i = 0.; i < 40.; i++)\n\t{\n\t\tfloat h = map(p + ld * t);\n\t\ts = min(s, 25. * h / t);\n\t\tt += h;\n\t\tif (s < .001) break;\n\t}\n\treturn clamp(s, 0., 1.);\n}\n\nvec3 lights(vec3 p, vec3 rd, float d) {\n    vec3 lightDir = normalize( vec3(6.,6.,18.) );\n\tvec3 ld = lightDir, n = calcN(p, d) ;\n\n\tfloat ao = 1.,\n\tl1 = .5 + .5 * dot(ld, n),\n\tspe = max(0., dot(rd, reflect(ld, n))) * .2,\n\tfre = smoothstep(.7, 1., 1. + dot(rd, n));\n\n\tl1 *= .3+ .7* calcShadow(p+.002*n, ld);\n\tvec3 lig = clamp(l1 * ao + spe,0.,5.) * vec3(4.) ;\n\treturn mix(.3, .4, fre) * lig;\n}\n\nvec3 march(vec3 ro, vec3 rd) {\n\tvec3 p;\n\tfloat d = .001;\n\tfor (float i = 0.; i < 100.; i++) {\n\t\tp = ro + rd * d;\n\t\tfloat h = map(p);\n\t\tif (abs(h) < .001  )break;\n        if(d >30.) return vec3(.4,.9,.9);\n\t\td += h;\n\t} \n    vec3 col= p.y<.001?vec3(0.85,0.45,0.01):vec3(0.604,0.247,0.094);\n\treturn mix(vec3(.4,.9,.9), col*lights(p, rd, d),exp(-d*d * .005));\n}\n\n\n\nvoid mainImage(out vec4 fragColor, vec2 fc)\n{\t\n    vec2 m=2.*iMouse.xy/iResolution.xy-1.;\n    float t=iTime*.3;\n\tvec3 ro = ( iMouse.x>0.)? vec3(4.,2.1 +2.*m.y, 4.*m.x):vec3(cos(t)*3.,sin(t*.2)+1.5,sin(t)*2.);\t\n\tvec2 uv = (fc - .5 * iResolution.xy) / iResolution.y;\n\tfragColor = vec4(vignette(pow(march(ro, getRayDir(ro, vec3(0), uv)), vec3(.4)), fc), 0);\n}\n","name":"Image","description":"","type":"image"}]}