{"ver":"0.1","info":{"id":"WdySWG","date":"1574861765","viewed":236,"name":"Radial Segments by Dmitry","username":"dmitrykolesnikovich","description":"Radial Indicator.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["segment"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**WORK IN PROGRESS*/\n\n// common utils\n#define PI             \t\t\t\t3.141592\n#define layout(vec) \t\t\t\t(2.* vec - iResolution.xy) / iResolution.y;\n#define pixels_to_uv(pixelLength) \tpixelLength / iResolution.y;\n#define degreeOf(uv)\t\t\t\tatan(uv.y, uv.x) / PI * 180.0;\n\n// shader uniforms\n#define radius_in_pixels     \t\t320.0\n#define hole_radius_in_pixels  \t\t160.0\n#define minDegree         \t\t\t-30.0           \t// [-180..180]\n#define degree1         \t\t\t80.0            \t// [-180..180]\n#define degree2         \t\t\t190.0           \t// [0..360]\n#define maxDegree         \t\t\t220.0           \t// [0..360]   \n#define violet           \t\t\tvec3(0.8, 0.8, 1.0)\n#define yellow           \t\t\tvec3(1.0, 0.8, 0.2)\n#define red           \t\t\t\tvec3(1.0, 0.0, 0.0)\n#define AA                          0.5\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // layout\n  \tvec2 uv = layout(fragCoord);\n    \n    // 1. convert uniforms from pixels to uv \n    float radius      = pixels_to_uv(radius_in_pixels);\n    float hole_radius = pixels_to_uv(hole_radius_in_pixels);\n    \n    // 2. draw anti-aliased circle\n    float d = length(uv);\n    float wd = fwidth(d);\n    float circle = smoothstep(radius + wd, radius - wd, d);\n        \n    // 3. draw colored segments\n    vec3 color;\n    float degree = degreeOf(uv);\n    if (-180.0 < degree && degree < (maxDegree - 360.0)) degree += 360.0;    \n    if (minDegree < degree && degree < degree1) {\n      color = violet;\n    } else if (degree1 < degree && degree < degree2 - AA) {\n      color = yellow;\n    } else if(degree2 - AA <= degree && degree <= degree2 + AA) {    \n      color = mix(yellow, red, smoothstep(degree2 - AA, degree2 + AA, degree));\n    } else if (degree2 + AA < degree && degree < maxDegree) { \n      color = red;\n    }\n    vec3 circleColor = circle * color;  \n    \n    // 4. draw hole inside circle\n    circleColor -= vec3(smoothstep(hole_radius + wd, hole_radius - wd, d));    \n    \n    // result\n    fragColor = vec4(circleColor, 1);    \n}","name":"Image","description":"","type":"image"}]}