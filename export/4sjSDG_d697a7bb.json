{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// Â© 2014 jaw ^ vovoid, do whatever you like with this\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float vtime1 = 1000.0 + sin(iTime * 0.11) * 20.0;\n    float vtime2 = 800.0  + sin(iTime * 0.15) * 22.0;\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec4 t = texture(iChannel0, \n                       vec2(\n                           sin(uv.x + vtime1 * 0.005) * cos(vtime1 * 0.01), \n                           cos(uv.y + vtime1 * 0.001) * cos(vtime1 * 0.02)\n                       ) * 5.0 \n                      );\n\n    vec4 t2 = texture(iChannel0, \n                       vec2(\n                           sin(uv.x + vtime1 * 0.001), \n                           cos(uv.y + vtime1 * 0.005)\n                       ) * 1.0 \n                      );\n    \n    fragColor = vec4(\n        0.0\n        ,\n        (\n            t.r *\n            (sin(\n                vtime1 * \n                (\n                    sin(uv.y * 0.5) + \n                    0.01 * sin(uv.x * 5.0 + vtime2)\n                )\n            )) *\n            sin(\n                vtime1 * 0.1 * t2.r *\n                (uv.x - sin(vtime2 * 0.05)) \n                * \n                sin( (uv.y-sin(vtime1 * 0.035)) * 5.0 ) + \n                sin(0.1 * vtime2)\n            ) * 0.5 \n            \n            + t2.r * abs(sin(\n                vtime1 * (uv.x-0.5) * sin(uv.y+0.5))\n            ) * 0.5\n            \n            + t.r * \n            \t(\n                    sin( \n                        vtime1 * (uv.x - sin(vtime1 * 0.1)) * \n                        sin( uv.y - sin(vtime1 * 0.1)) * 0.2 \n                    )\n                ) * 0.1\n        )\n        ,\n        \n        (\n            t.r *\n            (sin(\n                vtime2 * \n                (\n                    sin(uv.y * 0.25) + \n                    0.01 * sin(uv.x * 3.0 + vtime2)\n                )\n            )) *\n            abs(sin(\n                vtime1 * 0.09 * t2.r *\n                (uv.x - sin(vtime2 * 0.04)) \n                * \n                sin( (uv.y-sin(vtime1 * 0.035)) * 5.0 ) + \n                sin(0.1 * vtime2)\n            )) * 0.5 \n            \n            + t2.r * abs(sin(\n                vtime1 * (uv.x-0.5) * sin(uv.y+0.5))\n            ) * 0.5\n            \n            + t.r * abs(sin( vtime1 * (uv.x-sin(vtime1 * 0.1)) * sin(uv.y-sin(vtime1 * 0.1)) * 0.2 )) * 0.1\n        )\n        ,\n        1.0\n    );\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4sjSDG","date":"1415533893","viewed":317,"name":"Plasma field","username":"jaw","description":"Just a basic plasma shader needed for a project. Will be used with glow post processing.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["plasma"],"hasliked":0,"parentid":"","parentname":""}}