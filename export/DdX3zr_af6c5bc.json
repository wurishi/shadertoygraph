{"ver":"0.1","info":{"id":"DdX3zr","date":"1665518762","viewed":134,"name":"approx hyperbolic paraboloid sdf","username":"jt","description":"Transformed [url=https://www.shadertoy.com/view/XsdBW8]helix 1[/url] by FabriceNeyret2 to a hyperbolic paraboloid.\nProbably not an exact sdf (had to scale distance by factor 3 to avoid glitches).\nUsed [url=https://www.shadertoy.com/view/mdX3Rn]here[/url].","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["distance","surface","architecture","saddle","construction","hyperbolic","approximate","paraboloid","structure","building","ruled","roof"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/DdX3zr approx hyperbolic paraboloid sdf by jt\n\n// Transformed https://www.shadertoy.com/view/XsdBW8 helix 1 by FabriceNeyret2\n// to a hyperbolic paraboloid (z=x*y, https://www.wolframalpha.com/input?i=z%3Dx*y ) :\n//  * adjust number of rotations\n//  * replace bounding cylinder by bounding unit box\n//  * adjust rotation angle to match diagonals\n//  * straighten-out intersection of helix with box-wall to line\n// Probably not an exact sdf (had to scale distance by factor 3 to avoid glitches).\n\n// tags: distance, surface, architecture, saddle, construction, hyperbolic, approximate, paraboloid, structure, building, ruled, roof\n\n// https://en.wikipedia.org/wiki/Ruled_surface\n// https://en.wikipedia.org/wiki/Saddle_roof\n\n// MIT license, from https://www.shadertoy.com/terms\n\n/*\n\nCopyright (c) 2022 Jakob Thomsen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n\n#define pi 3.1415926\n\n// https://iquilezles.org/articles/distfunctions/\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n// https://iquilezles.org/articles/distfunctions/\nfloat sdBoxFrame( vec3 p, vec3 b, float e )\n{\n       p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\nfloat halfspace(vec3 p)\n{\n    return p.z+1.0;\n}\n\n// Transformed https://www.shadertoy.com/view/XsdBW8 helix 1 by FabriceNeyret2\n// to a hyperbolic paraboloid:\n//  * adjust number of rotations\n//  * replace bounding cylinder by bounding unit box\n//  * adjust rotation angle to match diagonals\n//  * straighten-out intersection of helix with box-wall to line\n// Probably not an exact sdf (had to scale distance by factor 3 to avoid glitches).\nfloat approx_hyperbolic_paraboloid(vec3 q)\n{\n    float t = sdBox(q, vec3(1,1,1)); // bounding box\n    t = max(t, abs(sin(atan(q.y,q.x)-q.z*0.95/*???*//sqrt(1.+q.z*q.z/2.)))/3./*noglitch*/ * min(1.,length(q.xy))); // hyperbolic paraboloid\n    //t = max(t, abs(sin(atan(q.y,q.x)-q.z*pi/4.0))/3. * min(1.,length(q.xy))); // original helix\n    return t;\n}\n\nfloat map(vec3 p)\n{\n    float d = DIST_MAX;\n    d = min(d, sdBoxFrame(p, vec3(1), 0.01)); // unit-frame\n    //d = min(d, halfspace(p));\n    //d = min(d, approx_hyperbolic_paraboloid(p));\n    d = min(d, approx_hyperbolic_paraboloid(p.xzy));\n    return d;\n}\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal( vec3 p ) \n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*map( p + k.xyy*h ) + \n                      k.yyx*map( p + k.yyx*h ) + \n                      k.yxy*map( p + k.yxy*h ) + \n                      k.xxx*map( p + k.xxx*h ) );\n}\n\nfloat trace(vec3 ro, vec3 rd, float t0, float t1)\n{\n    for(float t = t0; t < t1;)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON)\n            return t;\n        t += h;\n    }\n    return t1;\n}\n/*\nfloat trace(vec3 ro, vec3 rd, float t0, float t1)\n{\n    if(t0 < 1.0)\n    {\n        for(float t = t0; t < 1.0;)\n        {\n            float h = map(ro + rd * t);\n            if(h < EPSILON)\n                return t;\n            t += h;\n        }\n        t0 = 1.0;\n    }\n\n    for(float t = t0; t < t1;)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON * t) // optimization: coarser epsilon in the distance\n            return t;\n        t += h;\n    }\n\n    return t1;\n}\n*/\n// https://iquilezles.org/articles/rmshadows\nfloat shadow( in vec3 ro, in vec3 rd, float mint, float maxt )\n{\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t);\n        if( h<EPSILON )\n            return 0.0;\n        t += h;\n    }\n    return 1.0;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n    float res = 1.0;\n    float ph = 1e20;\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t);\n        if( h < EPSILON )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor );\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = 2.0 * (fragCoord.xy) / iResolution.xy - 1.0;\n    p.x *= float(iResolution.x) / float(iResolution.y);\n    float mx = 2.0 * pi * float(iMouse.x) / float(iResolution.x);\n    float my = pi / 2.0 + pi / 2.0 * float(iMouse.y) / float(iResolution.y);\n    mx = (iMouse.x > 10.0) ? mx : 2.0 * pi * fract(iTime * 0.05);\n    my = (iMouse.y > 10.0) ? my : pi / 2.0;\n\n    mat2 Yaw = mat2(vec2(cos(mx), sin(mx)), vec2(-sin(mx), cos(mx)));\n    vec3 ro = vec3(0.0, 0.0, -5.0 );//vec3(0.0, -10.0 * my, 0.0);\n    //mat2 Pitch = mat2(vec2(0.0, 1.0), vec2(-1.0, 0.0));\n    mat2 Pitch = mat2(vec2(cos(my), sin(my)), vec2(-sin(my), cos(my)));\n    ro.yz = Pitch * ro.yz;\n    ro.xy = Yaw * ro.xy;\n\n    vec3 rd = normalize(vec3(0.5 * p.xy, 1.0)); // NOTE: omitting normalization results in clipped edges artifact\n    rd.yz = Pitch * rd.yz;\n    rd.xy = Yaw * rd.xy;\n\n    float dist = trace(ro, rd, 0.0, DIST_MAX);\n    vec3 dst = ro + rd * dist;\n    vec3 n = normal(dst);\n\n    vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n    vec3 ambient = vec3(0.1);\n    float brightness = max(dot(lightdir, n), 0.0);\n    brightness *= shadow(ro+rd*dist,lightdir, 0.01, DIST_MAX );\n    //brightness *= softshadow(ro+rd*dist,lightdir, 0.01, DIST_MAX, 50. );\n    vec3 color = (n * 0.5 + 0.5);\n    //color = vec3(5.0-abs(opRepIdx(dst, 5.0)));\n    //vec3 color = mix(vec3(0.25), vec3(1), step(0.01, dst.z)); // quick hack to color ground differently\n    color = (ambient * calcAO(dst, n) + brightness) * color;\n    //color = (ambient + calcAO(dst, n) * brightness) * color;\n\n    color = mix(color, vec3(0.0), step(DIST_MAX, dist));\n    \n    fragColor = vec4(sqrt(color), 1.0); // approximate gamma\n}\n","name":"Image","description":"","type":"image"}]}