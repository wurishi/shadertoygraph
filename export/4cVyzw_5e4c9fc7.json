{"ver":"0.1","info":{"id":"4cVyzw","date":"1731634921","viewed":82,"name":"分形隧道shader","username":"catto1234","description":"分形隧道shader","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["shader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 基础设置\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n// 旋转矩阵\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\n// 简化版分形距离场函数\nfloat GetDist(vec3 p) {\n    vec3 z = p;\n    float dr = 1.0;\n    float r = 0.0;\n    \n    for(int i = 0; i < 5; i++) {\n        r = length(z);\n        if(r > 2.0) break;\n        \n        // 转换为球坐标\n        float theta = acos(z.z/r);\n        float phi = atan(z.y, z.x);\n        dr = pow(r, 7.0-1.0) * 7.0 * dr + 1.0;\n        \n        // 分形迭代\n        float zr = pow(r, 8.0);\n        theta = theta * 8.0;\n        phi = phi * 8.0;\n        \n        z = zr * vec3(sin(theta) * cos(phi),\n                     sin(theta) * sin(phi),\n                     cos(theta));\n        z += p;\n    }\n    return 0.5 * log(r) * r / dr;\n}\n\n// 法线计算\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(.001, 0);\n    vec3 n = GetDist(p) - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    return normalize(n);\n}\n\n// 光线步进\nfloat RayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n        vec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\n// 主函数\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    // 相机设置\n    vec3 ro = vec3(0, 0, -4); // 相机位置\n    ro.xz *= Rot(iTime*.2);   // 相机旋转\n    \n    vec3 rd = normalize(vec3(uv.x, uv.y, 1)); // 射线方向\n    rd.xz *= Rot(iTime*.2);\n    \n    float d = RayMarch(ro, rd);\n    vec3 p = ro + rd * d;\n    \n    // 计算颜色\n    vec3 col = vec3(0);\n    \n    if(d < MAX_DIST) {\n        vec3 n = GetNormal(p);\n        \n        // 基础颜色\n        col = 0.5 + 0.5*cos(iTime+p.xyx+vec3(0,2,4));\n        \n        // 添加简单光照\n        vec3 light = normalize(vec3(1,2,3));\n        float diff = dot(n, light)*.5+.5;\n        col *= diff;\n    }\n    \n    // 添加辉光\n    col += vec3(0.1,0.3,0.5) * (1.0/d);\n    \n    // gamma校正\n    col = pow(col, vec3(.4545));\n    \n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}