{"ver":"0.1","info":{"id":"flSBRd","date":"1652571449","viewed":109,"name":"bump bump","username":"ejosiah","description":"Bump mapping ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["spherebumps"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define _2PI 6.283185307179586476925286766559\n#define PI 3.1415926535897932384626433832795\n#define BUMP_DENSITY 64.\n#define BUMP_SIZE .15\n\nfloat sdSphere(vec3 p, float r){\n    return length(p) - r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2. * fragCoord - iResolution.xy)/iResolution.y;\n    \n    vec3 origin = vec3(0, 0, 0);\n    vec3 dir = normalize(vec3(uv, -1));\n    \n    vec3 col = vec3(1);\n    vec3 albedo = vec3(0.7, 0.6, 0.18);\n    vec3 lightPos = vec3(0, 0, 1);\n    vec3 center = vec3(0, 0, -3);\n    float radius = 2.;\n    \n    float dist = 0.2;\n    for(int i = 0; i < 100; i++){\n        vec3 p = origin + dir * dist;\n        \n        vec3 x = p - center;\n        float t = sdSphere(x, radius);\n        if(t < 0.0001){\n            vec3 n = normalize(x);\n            float theta = atan(x.z, x.x);\n            float phi = acos(x.y/radius);\n            \n            vec3 t = vec3(-sin(theta) * sin(phi), 0, cos(theta) * sin(phi));\n            vec3 b = vec3(cos(theta) * cos(phi), -sin(phi), sin(theta) * cos(phi));\n            \n            mat3 tbn = transpose(mat3(t, b, n));\n            vec3 L = normalize(lightPos - p);\n            vec3 V = normalize(origin - p);\n            L = tbn * L;\n            V = tbn * V;\n            vec3 H = normalize(V + L);\n            \n            vec2 uv = vec2(theta/_2PI + .5, phi/PI);\n            vec2 i = floor(uv * 16.);\n            float cc = step(mod(i.x + i.y, 2.), 0.);\n            albedo = mix(vec3(0.6), vec3(1), cc);\n            \n            vec2 c = BUMP_DENSITY * uv;\n            vec2 p = fract(c) - vec2(.5);\n            \n            float d, f;\n            d = dot(p, p);\n            \n            f = inversesqrt(d + 1.);\n            \n            \n            if(d >= BUMP_SIZE) {\n                p = vec2(0);\n                f = 1.;\n            }\n            vec3 normDelta = vec3(p, 1) * f;\n            \n            col = albedo * max(dot(normDelta, L), 0.);\n            col += albedo * pow(max(0., dot(normDelta, H)), 250.);\n            break;\n        }\n        dist += t;\n        \n    }\n\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}