{"ver":"0.1","info":{"id":"ltVSWm","date":"1484763539","viewed":542,"name":"curl noise experiment","username":"Teflo","description":"some stuff I'm experimenting with","likes":18,"published":1,"flags":32,"usePreview":0,"tags":["perlincurlnoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"    \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //pixelation size\n    float s = 1.0;\n    vec2 p = floor(fragCoord.xy / s) * s;\n\tvec2 uv = p / iResolution.xy;\n    \n    \n    //see the perlin noise\n    fragColor = texture(iChannel1, uv);\n    \n    //see the curl noise motion\n    fragColor = texture(iChannel0, uv);\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//samples the noise texture and scales it accordingly to the octave\nfloat sampleNoise(vec2 uv, float oct)\n{\n    float f = pow(2., oct);\n\treturn (texture(iChannel0, uv * f).x / f);\n}\n\n//add multiple noise octaves together to create the perlin noise\n\nfloat noise2D(vec2 p)\n{\n    float c = 0.;\n    \n    c += sampleNoise(p, 1.);\n    c += sampleNoise(p, 2.);\n    c += sampleNoise(p, 3.);\n    c += sampleNoise(p, 4.);\n    return c;\n}\n\n//not real 3D noise, just messin' around to get it change over time\n\nfloat noise3D(vec3 p)\n{\n\tfloat n0 = noise2D(p.xy + vec2(sin(p.z * 3.14), cos(p.z * 3.14)));\n    float n1 = noise2D(p.xy * sin(p.z));\n    \n    return n0* n1;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    uv *= 0.2; //scale the noise\n    float c = noise3D(vec3(uv, iTime * 0.01));\n    \n    fragColor.xyz = vec3(c * c);\n    \n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//pixel offset for gradient calculation\nvec2 ex;\nvec2 ey;\n\n//returns the gradient in x direction\nfloat dx(vec2 uv) {\n    return (texture(iChannel0, uv + ex.xy).x - texture(iChannel0, uv - ex.xy).x) / (2. * ex.x);\n}\n\n//returns the gradient in y direction\nfloat dy(vec2 uv) {\n    return (texture(iChannel0, uv + ey.xy).x - texture(iChannel0, uv - ey.xy).x) / (2. * ey.y);\n}     \n\n//by huwb\nvec2 hash2( float n ) { return fract(sin(vec2(n,n+1.0))*vec2(43758.5453123,22578.1459123)); }\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    ex = vec2(1. / iResolution.x, 0.);\n   \tey = vec2(0., 1. / iResolution.y);\n    \n    //get the gradient vector\n    vec2 d = vec2(dx(uv), dy(uv));\n    \n    //see the curl noise\n    //fragColor.xy = d;\n    \n    \n    //calculate gradient from [0, 1] to [-1, 1]\n    d = d * 2.0 - 1.0;\n    \n    //calculate the normal perpendicular (curl) vector\n    vec2 v = vec2(d.y, -d.x);\n    \n    //upward movement\n    vec2 off = vec2(0., 4.);\n    \n    float speed = 0.1;\n    float fade = 0.08;\n    \n    //move colors with the curl vector and fade them out\n    fragColor = (1. - fade) * texture(iChannel1, uv - (v + off) / iResolution.xy * speed);\n    \n    \n    //fire ball\n    float t = iTime * 2.0;\n    vec2 p = vec2(cos(t) * 3.0, sin(t * 2.0));\n    p *= 60.0;\n    p += iResolution.xy / 2.0;\n    \n    if( iMouse.z > 0.)\n    {\n        p = iMouse.xy;\n    }\n    \n     if( length(fragCoord-p) < 10. )\n    {\n        fragColor += .7*vec4(uv,0.5+0.5*sin(iTime),1.0);\n    }\n    \n    //fire line\n    if( fragCoord.y < 60. && fragCoord.y > 40.){\n        fragColor += .1*vec4(uv + vec2(0.7, 0.8), 0.2 + 0.2 * sin(iTime), 1.0);\n    }\n    \n    fragColor += vec4(0.006, 0.004, 0.004, 0.01);\n    \n        \n    \n    \n    \n}","name":"Buf B","description":"","type":"buffer"}]}