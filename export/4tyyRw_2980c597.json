{"ver":"0.1","info":{"id":"4tyyRw","date":"1535425631","viewed":239,"name":"CRT Curve","username":"ngubbins","description":"A visual effect to emulate the distortion caused by a curved screen on a display device.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["retro","crt","curve","visualeffect"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float dimmer = 0.75;\nfloat stretch = 0.5;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = vec3(1, 1, 1);\n    \n    //loop effect\n    //dimmer = abs(sin(iTime));\n    \n    //need to offset uv to be centre\n    vec2 c = uv;\n    c.x -= 0.5;\n    c.y -= 0.5;\n    \n    //vector disatance from centre\n    vec2 dis = vec2(0,0) - c;\n    \n    //get float value of distance\n    float mag = length(dis);\n    \n    //alter brightness\n    mag *= dimmer;\n    \n    //decrease all color values by distance from centre    \n    vec3 colScale = col - mag;\n    \n    vec2 curve = uv;\n    \n    //get distortion scale\n    vec2 distortion = curve - mag*stretch;\n    \n    //Change uv co-ordinates  by distotion scale\n    curve *= distortion;\n    \n    //Get Channel Input\n\tcol = texture(iChannel0, curve).rgb;\n    \n    //Change frag color by scale\n  \tcol *= colScale;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}