{"ver":"0.1","info":{"id":"fdlSR4","date":"1618767083","viewed":119,"name":"SamofalovaUV-magic_sphere","username":"ulakir","description":"University project CMC MSU","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["magicspherewithfireballinside"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rr","filepath":"/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","previewfilepath":"/media/ap/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","type":"volume","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGzr","filepath":"/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","previewfilepath":"/media/ap/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst vec3 CAMERA_POS = vec3(4.0 , 2.2, -12.0);\nconst float MARCH_SIZE = 0.08;\nint MAX_STEPS = 1000;\nfloat ABSORPTION = 25.0;\nvec3 randDir;\n\nstruct sphere {\n    vec3 center;\n    float radius;\n    vec3 color;\n};\n\nsphere LIGHT1;\nsphere LIGHT2;\nsphere SPHERE;\n\nsphere LIGHTS[2];\n\n\n\nfloat tracePlane (vec3 pos, vec3 dir,  out vec3 normal) {\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t*dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 50.0) {\n        return INF;\n    }   \n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t*dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t*dir);\n    return t;\n}\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-0.5 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t*dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 1.3) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }   \n    \n    \n    float a = dot(dir.xz, dir.xz);\n    float b = dot(dir.xz, pos.xz);\n    float c = dot(pos.xz, pos.xz) - 1.3;\n    float D = b * b - a * c;\n    if (D < 0.0 ) {\n        return INF;\n    }\n    \n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -0.5) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n     t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    } \n    worldPos = t * dir + pos;\n    if (worldPos.y <= -0.5) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    } \n    return INF;\n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 sphNorm;\n    float sphT = traceSphere(pos, dir, 1.0, sphNorm);\n    if (sphT < dist)\n        return true;\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 res = texture(iChannel1, normal).rgb * 0.8;\n    int size = 2;\n    for (int i = 0; i <  size; i++) {\n        vec3 toLight = LIGHTS[i].center - pos;\n        float distSq = dot(toLight, toLight);\n        float att1 =  isOccluded(pos, LIGHTS[i].center + randDir * LIGHTS[i].radius) ? 0.0 : 20.0f / distSq;\n        res += max(0.0, dot(normal, normalize(toLight))) * att1 * LIGHTS[i].color;\n     }\n    return color * res;\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\nfloat sphereSdf(vec3 pos) {\n    float scale = mix(0.25, 1.0, 0.0);\n    return length((pos - SPHERE.center)) - SPHERE.radius;\n}\n\nfloat BeerLambert(float absorptionCoefficient, float distanceTraveled)\n{\n    return exp(-absorptionCoefficient * distanceTraveled);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 4)), rand(float(iFrame + 8)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5)) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    const int EMISSION = 0;\n    const int DIFFUSION = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    const float GLASS_N = 1.5;\n    const float AIR_N = 1.0;\n    float n1 = AIR_N;\n    float n2 = GLASS_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    \n    LIGHT1.center = vec3(-3, 1.2, 1) + randVals*0.05;\n    LIGHT1.radius = 0.5;\n    LIGHT1.color = vec3(1, 0.5, 0.3);\n    \n    LIGHT2.center = vec3(1.6, 0.5, 2.7) + randVals*0.05;\n    LIGHT2.radius = 0.2;\n    LIGHT2.color = vec3(0.75, 0.5, 0.5);\n    LIGHTS[0] = LIGHT1;\n    LIGHTS[1] = LIGHT2;\n    \n    SPHERE.center = vec3(0.0, 0.5, 0.0);\n    SPHERE.radius = 0.5;\n    SPHERE.color = vec3(1.0, 1.0, 1.0);\n    \n    vec3 result = vec3(0.0);\n    float opacity = 1.0;\n    vec3 fogEffect = vec3(0.0);\n    vec3 colorMult = vec3(1, 1, 1);\n    \n    for (int i = 0; i < MAX_STEPS; ++i) {\n        vec3 currPos = CAMERA_POS + viewVec * MARCH_SIZE * float(i);\n        float sdf = sphereSdf(currPos);\n        if (sdf < 0.0) {\n            float prevOpacity = opacity;\n            opacity *= BeerLambert(10.0* (texture(iChannel2, curPos.xz * 0.2).x\n            + texture(iChannel3, curPos * 0.4).x\n            + texture(iChannel2, curPos.xz * 0.8).x\n            + texture(iChannel3, curPos * 1.6).x\n            ) * 0.25 * abs(sdf), MARCH_SIZE);\n            float absorbtion = prevOpacity - opacity;\n            vec3 fogColorAtPoint = texture(iChannel3, currPos*0.5).rgb * 6.0;\n            fogEffect += vec3(absorbtion)*vec3(0.2+fogColorAtPoint.x*2.8, fogColorAtPoint.y,0.0);\n        }\n    }\n    for (int i; i < 5; ++i) {\n        float t = INF;\n        int materialtype;\n        vec3 color = vec3(0.5, 0.3, 0.6);\n        vec3 normal;\n        vec3 normalPlane;\n        vec3 normalLight1;\n        vec3 normalLight2;\n        vec3 normalCyl;;\n        float planeT = tracePlane(curPos, curDir, normalPlane);\n        if (planeT < t) {\n            t = planeT;\n            vec3 worldPos = t*curDir + curPos;\n            materialtype = DIFFUSION;\n            color = texture(iChannel0, worldPos.xz*0.1).rgb;\n            normal = normalPlane;\n        }\n        float light_1 = traceSphere(curPos - LIGHT1.center, curDir, LIGHT1.radius, normalLight1);\n        if ( light_1 < t) {\n            t = light_1;\n            materialtype = EMISSION;\n            color = LIGHT1.color;\n            normal = normalLight1;\n        }\n        float light_2 = traceSphere(curPos - LIGHT2.center, curDir, LIGHT2.radius, normalLight2);\n        if (light_2 < t) {\n            t = light_2;\n            materialtype = EMISSION;\n            color = LIGHT2.color;\n            normal = normalLight2;\n        }\n        vec3 normalsph1;\n        float sph1 = traceSphere(curPos - vec3(0.0,0.5,0.0), curDir, 1.0, normalsph1);\n        if ( sph1 < t) {\n            t = sph1;\n            if (randVals.x < GLASS_R) {\n                materialtype = REFLECTION;\n            } else {\n                colorMult *= vec3(0.8, 0.7, 0.9);\n                materialtype = REFRACTION;\n            }\n            normal = normalsph1;\n        }\n        float cyl1 = traceCylinder(curPos, curDir,normalCyl);\n        if (cyl1 < t) {\n            t = cyl1;\n            materialtype = DIFFUSION;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = normalCyl;\n        }\n        \n        if (t != INF) {\n            vec3 worldPos = t*curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialtype == EMISSION) {\n                fragColor.rgb = color* colorMult;\n                break;\n            } else if (materialtype == DIFFUSION) {\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            } else if (materialtype == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            } else if (materialtype == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, n2);\n                curPos = worldPos + curDir * 1e-5;\n                float tmp = n1;\n                n1 = n2;\n                n2 = tmp;\n            }\n        } else {\n            fragColor.rgb = texture(iChannel1, curDir).rgb;\n        }\n    }\n    result = mix(fogEffect, fragColor.rgb, opacity);\n    fragColor = vec4(result, 1.0);\n    fragColor.rgb = fragColor.rgb* colorMult;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}