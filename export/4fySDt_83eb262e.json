{"ver":"0.1","info":{"id":"4fySDt","date":"1716053234","viewed":99,"name":"casse-tete","username":"sedcore","description":"a little puzzle\nplay with keyboard: left, right, space\ngoal: everything out to the right","likes":2,"published":3,"flags":48,"usePreview":0,"tags":["game","keyboard","puzzle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float item_color(vec2 uv, int rot, int x, bool last)\n{\n  int cos[4] = int[](0, -1, 0, 1);\n  int sin[4] = int[](-1, 0, 1, 0);\n  mat2 rotation_matrix = mat2(cos[rot], sin[rot], -sin[rot], cos[rot]);\n  /* center item, head up */\n  uv.x -= float(x) * .25;\n  uv = rotation_matrix * uv;\n  \n  if (length(uv) < .17\n      && length(uv-vec2(.25,0.)) > .18\n      && length(uv+vec2(.25,0.)) > .18\n      && (last ? uv.y > -.13 : length(uv+vec2(0.,.25)) > .18)) return 1.;\n  return 0.;\n}\n\nfloat background_color(vec2 uv)\n{\n  if (uv.y > .25) return 0.;\n  if (uv.y > .19) return 1.;\n  if (uv.x > 0.4 && uv.y > .15) return 1.;\n  if (uv.y < -.2) return 0.;\n  if (uv.y < -.14 && length(uv) > .18) return 1.;\n  return 0.;\n}\n\nvoid mainImage(out vec4 o, in vec2 fragCoord)\n{\n  vec2 uv = (2.*fragCoord-iResolution.xy) / iResolution.y;\n\n  GAME_STATE;\n  GET_GAME_STATE;\n\n  float c = 0.;\n  for (int i = 0; i < 7; i++) c += item_color(uv, item[i], i-game_pos, i==6);\n  c += background_color(uv);\n  c += .25;\n  o = vec4(c*.7,c*.7,c, 0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Row 0: contain the current state of the 256 keys. \n// Row 1: contains Keypress.\n// Row 2: contains a toggle for every key.\nconst int KEY_LEFT  = 37;\nconst int KEY_RIGHT = 39;\nconst int KEY_SPACE = 32;\n\n#define KEY(k) (texelFetch(iChannel1, ivec2(k,1), 0).x == 1.)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  GAME_STATE;\n\n  if (!IN_STATE) { fragColor = vec4(0); return; }\n\n  /* initialize */\n  if (iFrame == 0) {\n    for (int i = 0; i < 7; i++) item[i] = HOLE_UP;\n    game_pos = 6;\n    SET_GAME_STATE;\n    return;\n  }\n\n  GET_GAME_STATE;\n\n  /* handle key press */\n  if (KEY(KEY_LEFT)) {\n    if (game_pos < 0 || item[game_pos] != HOLE_DOWN)\n      game_pos++;\n  } else\n  if (KEY(KEY_RIGHT)) {\n    if ((game_pos >= 6 || item[game_pos + 1] != HOLE_UP)\n        && (game_pos < 0 || item[game_pos] != HOLE_DOWN))\n      game_pos--;\n  } else\n  /* space to rotate the current item */\n  if (KEY(KEY_SPACE)) {\n    if (game_pos >= 0 && game_pos <= 6\n        && (game_pos != 5 || item[6] != HOLE_RIGHT)\n        && (game_pos == 6 || item[game_pos + 1] != HOLE_LEFT)\n        && (game_pos == 0 || item[game_pos - 1] != HOLE_RIGHT))\n      /* rotate is +1 mod 4 */\n      item[game_pos] = (item[game_pos] + 1) & 3;\n  }\n\n  SET_GAME_STATE;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define HOLE_LEFT  0\n#define HOLE_DOWN  1\n#define HOLE_RIGHT 2\n#define HOLE_UP    3\n\n#define GET(v) int(texelFetch(iChannel0, ivec2(v,0), 0).x)\n\n#define GET_GAME_STATE \\\n  item[0] = GET(0); \\\n  item[1] = GET(1); \\\n  item[2] = GET(2); \\\n  item[3] = GET(3); \\\n  item[4] = GET(4); \\\n  item[5] = GET(5); \\\n  item[6] = GET(6); \\\n  game_pos = GET(7);\n\n#define SET(a, v) \\\n  if (int(fragCoord.x) == a && int(fragCoord.y) == 0) \\\n    fragColor = vec4(v, 0, 0, 1);\n\n#define SET_GAME_STATE \\\n  SET(0, item[0]); \\\n  SET(1, item[1]); \\\n  SET(2, item[2]); \\\n  SET(3, item[3]); \\\n  SET(4, item[4]); \\\n  SET(5, item[5]); \\\n  SET(6, item[6]); \\\n  SET(7, game_pos);\n\n#define IN_STATE (int(fragCoord.x) <= 7 && int(fragCoord.y) == 0)\n\n#define GAME_STATE \\\n  int item[7]; \\\n  int game_pos;","name":"Common","description":"","type":"common"}]}