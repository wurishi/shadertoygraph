{"ver":"0.1","info":{"id":"flcyzB","date":"1660006697","viewed":93,"name":"autogen 59","username":"asynth","description":"Generated by a program written in Rust.\n","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["generative"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvec3 bi(vec3 x) { return 2. * x - 1.; }\nvec3 uni(vec3 x) { return 0.5 + 0.5 * x; }\n\nfloat tri(float x) { // triangle wave\n    float p = fract(x * .25 + .25) * 2. - 1.;\n    return 1. - 2.0 * abs(p);\n}\nvec3 tri(vec3 x) { // triangle wave\n    vec3 p = fract(x * .25 + .25) * vec3(2.) - vec3(1.);\n    return vec3(1.) - vec3(2.0) * abs(p);\n}\n\nvec3 well(vec3 x) { // a function that dips in the middle\n    return 1. - 2. / pow(1. + x*x, vec3(8.));\n}\n\nfloat quant(float a, float b) {\n    return b == 0.0 ? a : floor(a/b) * b;\n}\nvec2 quant(vec2 a, vec2 b) {\n    return vec2(\n        b.x == 0.0 ? a.x : floor(a.x/b.x) * b.x,\n        b.y == 0.0 ? a.y : floor(a.y/b.y) * b.y\n    );\n}\n\nvec3 quant(vec3 a, vec3 b) {\n    return vec3(\n        b.x == 0.0 ? a.x : floor(a.x/b.x) * b.x,\n        b.y == 0.0 ? a.y : floor(a.y/b.y) * b.y,\n        b.z == 0.0 ? a.z : floor(a.z/b.z) * b.z\n    );\n}\n\n\nvec3 sq(vec3 a) {\n    return a*a;\n}\n\nfloat sq(float a) {\n    return a*a;\n}\n\nvec3 sigmoid(vec3 a) {\n    return a / sqrt(1.0 + sq(a));\n}\n\nvec2 circ_inv(vec2 uv, vec2 center, float radius) {\n    float d = distance(uv, center);\n    if (d < radius) {\n        return uv;\n    } else {\n        float scale = sq(radius / d);\n        return (uv - center) * scale + center;\n    }\n}\n\n\nvec3 pthresh(float thresh, vec3 a, vec3 b, vec3 c) {\n    return vec3(\n        a.x < thresh ? b.x : c.x,\n        a.y < thresh ? b.y : c.y,\n        a.z < thresh ? b.z : c.z\n    );\n}\n\nvec2 xywarp(vec2 uv, vec2 a, vec2 b) {\n    return vec2(\n        uv.x + a.x * b.x,\n        uv.y + a.y * b.y\n    );\n}\n\nvec3 mix2(vec2 uv, vec3 a, vec3 b, vec3 c, vec3 d) {\n    return mix(mix(a, b, uv.xxx), mix(c, d, uv.xxx), uv.yyy);\n}\n\nvec2 mix2(vec2 uv, vec2 a, vec2 b, vec2 c, vec2 d) {\n    return mix(mix(a, b, uv.xx), mix(c, d, uv.xx), uv.yy);\n}\n\nfloat mix2(vec2 uv, float a, float b, float c, float d) {\n    return mix(mix(a, b, uv.x), mix(c, d, uv.x), uv.y);\n}\n\nfloat hash12(vec2 p)\n{\n    vec3 p3  = fract(p.xyx * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 noise(vec2 uv, vec2 period, float seed) {\n    vec2 quv = floor(uv / period) + seed;\n    vec2 fuv = mod(uv, period) / period;\n    float a = hash12(quv);\n    float b = hash12(quv + vec2(1.,0.));\n    float c = hash12(quv + vec2(0., 1.));\n    float d = hash12(quv + vec2(1.,1.));\n    \n    return vec3(mix2(smoothstep(0.,1.,fuv), a, b, c, d));\n} \n\nvec2 reflect_0(vec2 uv) { return vec2(uv.x, abs(uv.y)); }\nvec2 reflect_1(vec2 uv) { return vec2(abs(uv.x), uv.y); }\nvec2 reflect_2(vec2 uv) { return vec2(abs(uv.x), abs(uv.y)); }\nvec2 reflect_3(vec2 uv) { return uv.x > -uv.y ? uv : vec2(uv.y, uv.x); }\nvec2 reflect_4(vec2 uv) { return uv.x > uv.y ? uv : vec2(uv.y, uv.x); }\n\nvec2 repeat_0(vec2 uv, float q) { return vec2(quant(uv.x, q), uv.y); }\nvec2 repeat_1(vec2 uv, float q) { return vec2(uv.x, quant(uv.y, q)); }\nvec2 repeat_2(vec2 uv, float q) { return vec2(quant(uv.x, q), quant(uv.y, q)); }\nvec2 repeat_3(vec2 uv, float q) { return vec2(tri(uv.x / q) * q, uv.y); }\nvec2 repeat_4(vec2 uv, float q) { return vec2(uv.x, tri(uv.y / q) * q); }\nvec2 repeat_5(vec2 uv, float q) { return vec2(tri(uv.x / q) * q, tri(uv.y / q) * q); }\n\nvec2 rect_to_polar(vec2 uv) { return vec2(length(uv), atan(uv.y, uv.x)/1.570796); }\nvec2 polar_to_rect(vec2 uv) { float angle = uv.y*1.570796; return vec2(uv.x * cos(angle), uv.x * sin(angle)); }\n\nvec3 node_1(vec2 uv) {\n\tuv = xywarp(uv, vec2(-0.7076, 0.1919), vec3(atan(uv.y, uv.x)).xy);\n\tvec3 b1 = sin(vec3(uv.x)*1.3840 + 0.2756 + iTime*0.2822);\n\treturn abs(b1);\n}\n\nvec3 node_2(vec2 uv) {\n\tuv = reflect_4(uv);\n\tvec3 a1 = mix2(uv, vec3(0.0048, 0.3349, 0.8035), vec3(0.7267, 0.1524, 0.9637), vec3(0.1973, 0.1873, 0.8052), vec3(0.3759, 0.0365, 0.7807));\n\treturn mod(abs(a1), vec3(uv.x));\n}\n\nvec3 node_3(vec2 uv) {\n\tuv = repeat_2(uv, 0.2559);\n\tvec3 a1 = well(vec3(uv.y)*1.5260 + 0.0059 + iTime*0.1027);\n\tvec3 a2 = noise(uv, vec2(2.5885656, 0.8088145), 0.892936);\n\treturn uni(pthresh(0.3384, abs(a1), sigmoid(node_2(uv)), a2));\n}\n\nvec3 node_4(vec2 uv) {\n\tuv = repeat_1(uv, 0.4249);\n\tvec3 a1 = mix2(uv, vec3(0.5032, 0.5966, 0.1376), vec3(0.7287, 0.3798, 0.4806), vec3(0.1297, 0.4748, 0.5475), vec3(0.8323, 0.0960, 0.5722));\n\tvec3 a2 = noise(uv, vec2(0.5096809, 2.4974675), 0.029693);\n\tvec3 a3 = mix2(uv, vec3(0.1778, 0.0599, 0.2256), vec3(0.7495, 0.5773, 0.0105), vec3(0.1332, 0.5349, 0.8376), vec3(0.3517, 0.6071, 0.9685));\n\tvec3 a4 = sin(a3*3.6672 + 0.8744 + iTime*0.1612);\n\tvec3 a5 = tri(a4*4.3488 + 0.1543 + iTime*0.1614);\n\tvec3 a6 = sin((-mod(node_3(uv), mix((mix(a1, vec3(uv.x), vec3(length(uv))) / pthresh(0.6017, vec3(length(uv)), a2, vec3(uv.y))), vec3(uv.y), a5)))*2.3926 + 0.0369 + iTime*0.1985);\n\treturn bi(a6);\n}\n\nvec3 node_5(vec2 uv) {\n\tuv = xywarp(uv, vec2(0.6841, -0.9031), (vec3(uv.y) + vec3(uv.x)).xy);\n\tvec3 b1 = vec3(0.7506, 0.6051, 0.2222);\n\treturn (b1 * vec3(length(uv)));\n}\n\nvec3 node_6(vec2 uv) {\n\tuv = reflect_4(uv);\n\tvec3 a1 = noise(uv, vec2(1.1482841, 3.499948), 0.191383);\n\treturn abs(uni(mix(vec3(uv.y), a1, vec3(length(uv)))));\n}\n\nvec3 node_7(vec2 uv) {\n\tvec3 a1 = tri(vec3(length(uv))*4.9009 + 0.6453 + iTime*0.3875);\n\tuv = xywarp(uv, vec2(0.6243, 0.4207), a1.xy);\n\tvec3 b1 = vec3(0.2373, 0.6846, 0.6157);\n\tvec3 b2 = well(b1*4.1211 + 0.0807 + iTime*0.2714);\n\treturn min(node_6(uv), b2);\n}\n\nvec3 node_8(vec2 uv) {\n\tuv = (mat2(1.3281,-0.7800,1.0381,-0.7265)*(uv-vec2(-0.6483,-0.8268)+vec2(-0.6483,-0.8268)));\n\treturn mod(node_5(uv), node_7(uv));\n}\n\nvec3 top(vec2 uv) {\n\tvec3 a1 = mix2(uv, vec3(0.7001, 0.0940, 0.5373), vec3(0.1566, 0.2174, 0.6314), vec3(0.4220, 0.4856, 0.7847), vec3(0.1912, 0.7433, 0.9489));\n\tvec3 a2 = tri(sigmoid(mod(vec3(atan(uv.y, uv.x)), mod(vec3(uv.x), vec3(uv.y))))*5.4397 + 0.0028 + iTime*0.3252);\n\tvec3 a3 = noise(uv, vec2(1.8115304, 1.5118419), 0.980985);\n\tvec3 a4 = noise(uv, vec2(1.0479615, 0.95487016), 0.598401);\n\tvec3 a5 = mix2(uv, vec3(0.1751, 0.2949, 0.6264), vec3(0.3922, 0.7768, 0.1240), vec3(0.8640, 0.0281, 0.1624), vec3(0.6061, 0.8571, 0.5884));\n\tvec3 a6 = tri(min(node_4(uv), (max(a3, a4) / a5))*2.9580 + 0.6652 + iTime*0.3811);\n\tvec3 a7 = well(a6*1.7547 + 0.2124 + iTime*0.3731);\n\tvec3 a8 = vec3(0.6383, 0.2471, 0.3098);\n\tvec3 a9 = sin(mix(a2, max((-vec3(uv.y)), node_1(uv)), (a7 - (sigmoid(node_8(uv)) / abs(a8))))*1.9123 + 0.8838 + iTime*0.1057);\n\treturn abs(sigmoid((a1 * ((vec3(length(uv)) / vec3(atan(uv.y, uv.x))) / a9))));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    vec3 col = abs(sin(top(uv)));\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}