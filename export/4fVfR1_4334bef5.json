{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"// All SDFs by Inigo Quilez\n\nfloat sdEquilateralTriangle( in vec2 p, in float r )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n\n\nfloat hash11(float p) {\n    p = fract(p * 0.1031);\n    p *= p + 33.33;\n    p *= p;\n    return fract(p);\n}\n\nfloat cityLayer(vec2 p, float d, float top, float btm) {\n    float t = floor(p.x * d);\n    float h = hash11(t + d*183.32) * (top-btm) + btm;\n    if (p.y < h) {\n        return 1.;\n    } else if (hash11(t + d*381.23) > .8) {\n        float r = floor(hash11(t + d*38353.1)*4.);\n        // Special tops of buildings\n        if (r == 0.) {\n            vec2 bp = vec2(t/d, h);\n            vec2 up = vec2(t/d, h + .05); \n            return smoothstep(0., 0.001, clamp(1. - sdSegment(p, bp, up)*50., 0., 1.));\n        } else if (r == 1.) {\n            p.x -= (t+.5)/d;\n            p.y -= h;\n            return smoothstep(0., 0.3, clamp(1. - sdEquilateralTriangle(p, 1./d)*500., 0., 1.));\n        } else if (r == 2.) {\n            p.x -= (t+.5)/d;\n            p.y -= h;\n            return smoothstep(0., .3, clamp(1. - sdCircle(p, 1./d)*500., 0., 1.));\n        } else if (r == 3.) {\n            vec2 bp = vec2((t + .5)/d, h);\n            vec2 up = vec2((t + .5)/d, h + .05); \n            return smoothstep(0., 0.1, clamp(1. - sdSegment(p, bp, up)*500., 0., 1.));\n        }\n    }\n    return 0.;\n}\n\nfloat city(vec2 p, int n, float top, float btm, float t) {\n    float ogX = p.x;\n    float val = 0.;\n    for (int i = 0; i < n; i++) {\n        p.x += iTime*(float(i)*0.1 + 1.)/float(n);\n        float addVal = 1.*(1. - float(i)/(float(n)));\n        float c = cityLayer(\n            p,\n            t - float(i)*t/(float(n) * 2.),\n            top - float(i)*(top-btm)/(float(n) * 2.),\n            btm + (float(n) - float(i))*(top-btm)/(float(n) * 2.)\n        );\n        \n        if (c != 0.) { val = val * (1.-c) + addVal * c; }\n        p.x = ogX;\n    }\n    \n    return val;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float density = 0.1;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n    // Time varying pixel color\n    uv.y -= .4;\n    \n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    bool underwater = false;\n    if (uv.y < 0.) {\n        uv.y = abs(uv.y);\n        uv.x += sin(uv.y*200. + iTime*10.)*.002;\n        underwater = true;\n    }\n    float c = city(uv, 10, .4, 0., 16.);\n    if (underwater) {\n        col = (c*.5+.5)*vec3(1., .4, .4);\n    } else {\n        col = (c*.5+.5)*vec3(1., .4, 0.);\n\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4fVfR1","date":"1733957121","viewed":55,"name":"Basic City Skyline","username":"GarlicGraphix","description":"for future project","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["city"],"hasliked":0,"parentid":"","parentname":""}}