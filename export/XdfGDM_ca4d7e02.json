{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"const vec3 cameraPosition = vec3(0.5, 0.5, 1);\n\n//ray-sphere intersection\nfloat intersect(vec3 rayOrigin, vec3 rayDir, vec3 sphereCenter, float radius)\n{\n  float a = dot(rayDir, rayDir);\n  float b = dot(rayOrigin - sphereCenter, rayDir);\n  float c = dot(rayOrigin - sphereCenter, rayOrigin - sphereCenter) - radius*radius;\n  \n  float discr = b*b - a*c;\n  if(discr < 0.0)\n    return -1.0;\n  \n  discr = sqrt(discr);\n  float t0 = (-b - discr) / a;\n  float t1 = (-b + discr) / a;\n  return min(t0,t1);\n    \n}\n\n//Lambert shading\nvec4 getColor(vec3 p, vec3 center, vec4 diffuseColor, vec3 lightPosition)\n{\n  vec3 n = p - center;\n  n = normalize(n);\n  vec3 l = lightPosition - p;\n  l = normalize(l);  \n  return diffuseColor * max(0.0, dot(n,l));\n}  \n\nvec4 drawSphere(vec3 rayDir, vec3 pos, float r, vec4 color, vec3 light)\n{\n  vec4 outColor = vec4(-1,-1,-1,-1); \t\n  float t = intersect(cameraPosition, rayDir, pos, r);\n  if(t > -1.0)\n    outColor = getColor(cameraPosition + t*rayDir, pos, color, light);\n  \n  return outColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec3 normalizedPosition = vec3(fragCoord.xy / iResolution.x, 0);\n  vec2 normalizedMouse = iMouse.xy / iResolution.x;\n  vec3 rayDir = normalizedPosition - cameraPosition;\n  rayDir = normalize(rayDir);\n\n  vec4 outColor = vec4(0,0,1,1);\t\n  //Light\n  vec3 lightPosition = vec3(normalizedMouse, 0);\t\n\t\n  //Sphere1\n  vec3 pos = vec3(1.3,0.2,-1.8);\n  vec4 color = vec4(1,0,0,1);\n  float r = 0.3;\n  vec4 sphereColor = drawSphere(rayDir, pos, r, color, lightPosition);\n  if(sphereColor.x != -1.0)\n    outColor = sphereColor;\n  \n  //Sphere2\n  pos = vec3(0.3,0.2,-0.8);\n  color = vec4(1,1,0,1);\n  r = 0.3;\n  sphereColor = drawSphere(rayDir, pos, r, color, lightPosition);\n  if(sphereColor.x > -1.0)\n    outColor = sphereColor;\n    \n  fragColor = outColor;\n  \n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XdfGDM","date":"1371427707","viewed":288,"name":"Raytracing1","username":"aaecheve","description":"Basic implementacion of sphere raytracing with lambert shading","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""}}