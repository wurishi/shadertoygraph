{"ver":"0.1","info":{"id":"XdlfRl","date":"1497556659","viewed":560,"name":"cheap typesetting","username":"ollj","description":"a cheap fast normal mapping trick where height decreases with distance and increases with iteration count.\ngood enough for fat 3d type setting.","likes":5,"published":3,"flags":0,"usePreview":0,"tags":["cheap","ground"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//https://www.shadertoy.com/view/XljXRt\n//3d terrain fast efficient lazy displacement floor\n\n//remove line below for a simpler scene\n#define wavey\n\nmat3 rotx(float a) { mat3 rot; rot[0] = vec3(1.0, 0.0, 0.0); rot[1] = vec3(0.0, cos(a), -sin(a)); rot[2] = vec3(0.0, sin(a), cos(a)); return rot; }\nmat3 roty(float a) { mat3 rot; rot[0] = vec3(cos(a), 0.0, sin(a)); rot[1] = vec3(0.0, 1.0, 0.0); rot[2] = vec3(-sin(a), 0.0, cos(a)); return rot; }\n\nvoid traceground(inout vec3 rp, in vec3 rd)\n{\n    rp += rd * (rp.y / abs(rd.y));\n    \n    for (int i = 0; i < 30; ++i)\n    {\n        vec2 uv = rp.xz * 0.005;\n        float a=texture(iChannel0, uv * 0.5).x;\n        #ifdef wavey\n        vec4 color =vec4(mix(a,1.-a,(sin(-iTime*.5+(length(rp.xz)-rp.y)*.02))*.5+.5));\n\t    #else\n        vec4 color=vec4(1.-a);\n        #endif\n        color *= texture(iChannel1, uv * 4.5)*.3;\n    \trp += rd * color.r * 3.0;\n    }\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= vec2(0.5);\n    uv.y /= iResolution.x / iResolution.y;\n    \n    vec2 m = iMouse.xy / iResolution.xy;\n    m -= vec2(0.5);\n    \n    if(iMouse.x == 0.0)\n    {\n        m = vec2(0.0, 0.05);\n    }\n    m *= 5.0;\n    \n    vec3 rp = vec3(1.0, 30.0, -1.0 + iTime * 20.0);\n    vec3 rd = normalize(vec3(uv, 1.0));\n    float t = iMouse.xy == vec2(0.0) ? iTime : 0.0;\n    rd *= rotx(m.y);\n    rd *= roty(m.x + sin(t * 0.5));\n    \n    fragColor = mix(vec4(.57, .3, .1, .0), vec4(0.0, .0, .0, .0), rd.y * 0.5 + 0.5);\n    // thanks to Shane for pointing out that moving the camera causes texture shifting,\n    // this piece of code attempts to fix that issue.\n    float bottomy = -3.0;\n\tif(rd.y < 0.0)    \n    {\n    \ttraceground(rp, rd);\n        rp -= rd * max(bottomy - rp.y, 0.0); \n        fragColor = texture(iChannel0, rp.xz * 0.005 * 0.5);\n        fragColor *= texture(iChannel1, rp.xz * 0.005 * 4.5);\n        \n    }\n    \n}","name":"Image","description":"","type":"image"}]}