{"ver":"0.1","info":{"id":"4sdfRj","date":"1525933430","viewed":166,"name":"Raymarching DF Template","username":"Voltage","description":"Teaching the abs basics of raymarching distance fields to some friends, this is how I do things, it's not necessarily the best way.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// this is where you define your scene\n// this function returns true if it hits something, and the distance to the nearest object from 'position'\nbool TestScene(vec3 position, out float di)\n{\n    di = length(position);\n    return di<=0.3;\n}\n\nvec3 GetRayColourFromScene(vec3 rayStart, vec3 rayDirection)\n{\n    vec3 colour = vec3(0);\n    \n    vec3 currentPixel = rayStart;\n\tfloat dist = 0.;\n    bool hitSomething = false;\n    for (int i = 0; i<10; i++)\n    {\n        hitSomething = TestScene(currentPixel, dist);\n        \n        // early exit\n        if (hitSomething) \n        {\n\t\t\tcolour = vec3(1);\n            break;\n        }\n\n        currentPixel += rayDirection * dist;\n    }\n    \n\treturn colour;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//vec3 pixelPos = vec3((fragCoord / iResolution.xy - 0.5) * 2.0, 0.0);\n    //pixelPos.x *= float(iResolution.x) / float(iResolution.y); // fix aspect ratio\n    vec3 pixelPos = vec3( (2.*fragCoord - iResolution.xy ) / iResolution.y , 0);\n    vec3 camera = vec3(0, 0, -1);\n\n    vec3 ray = normalize(pixelPos - camera);\n    \n\tvec3 finalColour = GetRayColourFromScene(camera, ray);\n    \n    fragColor = vec4(finalColour, 1.0);\n}","name":"Image","description":"","type":"image"}]}