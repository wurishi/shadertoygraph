{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"// The MIT License\n// Copyright Â© 2019 J. M.\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Plot the clothoid/Euler spiral/Cornu spiral (https://en.wikipedia.org/wiki/Euler_spiral); see also https://doi.org/10.1007/s00283-012-9304-1\n// forked from https://www.shadertoy.com/view/Xlf3zl by Inigo Quilez\n\n#define S2P 0.797884560803 // sqrt(2/PI)\n\n// squared line segment distance\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n\t  vec2 pa = p - a, ba = b - a;\n      vec2 v = pa - ba * clamp( dot(pa, ba)/dot(ba, ba), 0.0, 1.0 );\n\t  return dot(v, v);\n}\n\n// ODE for (rescaled) Fresnel auxiliary functions\n// cf. formula 7.3.21 in Abramowitz and Stegun (http://people.math.sfu.ca/~cbm/aands/page_301.htm)\n\nvec2 rhs( float t, vec2 p )\n{\n     return vec2(-2.0 * t * p.y, 2.0 * t * p.x - S2P);\n}\n\n// Use the (explicit) midpoint method/modified Euler method (https://en.wikipedia.org/wiki/Midpoint_method) to solve the ODE\n// and transform the solution using the relations between the Fresnel auxiliary functions and Fresnel integrals\n// cf. formulae 7.3.5 and 7.3.6 in Abramowitz and Stegun (http://people.math.sfu.ca/~cbm/aands/page_300.htm)\n\nfloat clothoid( vec2 p )\n{\n    int n = 150; // number of steps\n    float h = 6.0/float(n); // step size\n    \n\tfloat t = 0.0; // initial conditions\n    vec2 f = vec2(0.5);\n\n    vec2 a = vec2(0.0), b = a;\n    float d = dot( p - a, p - a );\n    \n    for( int i = 0; i < n; i++ )\n    {\n        vec2 f1 = f + 0.5 * h * rhs(t, f); // Runge-Kutta steps\n        f = f + h * rhs(t + 0.5 * h, f1);\n        t += h;\n        \n        float ct = cos(t * t), st = sin(t * t);\n        b = 0.5 - f * mat2(ct, st, -st, ct);\n\n        d = min( d, min(sdSegment( p, a, b ), sdSegment( p, -a, -b )) ); // use symmetry\n\t\ta = b;\n\t}\n    \n\treturn sqrt(d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 aspect = iResolution.xy / iResolution.y;\n    vec2 p = 2.0 * ( fragCoord.xy / iResolution.y ) - aspect;\n\n    float d = clothoid(p);\n        \n    vec3 col = vec3(0.992, 0.965, 0.89);\n    col *= 1.0 - 0.03 * smoothstep(-0.3, 0.3, sin( 120.0 * d ));\n    \n    col = mix(vec3(0.165, 0.631, 0.596), col, smoothstep(0.0, 4.0/iResolution.y, d));\n    \n    col *= 1.0 - 0.1 * dot(p, p); // vignetting\n\n\tfragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"WlXGWj","date":"1558101907","viewed":352,"name":"Clothoid","username":"tpfto","description":"Plot a [url=https://en.wikipedia.org/wiki/Euler_spiral]clothoid[/url] using the explicit midpoint method.","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["2d","math","curve"],"hasliked":0,"parentid":"","parentname":""}}