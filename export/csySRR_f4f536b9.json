{"ver":"0.1","info":{"id":"csySRR","date":"1680662238","viewed":51,"name":"Chroma -YUV Difference","username":"abhi_bansal","description":"Trying out Chroma Key removal","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["chromakey"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n// Define the chroma key color in YUV space\n    vec3 chromaKeyColor = vec3(0.0, 0.5, -0.5);\n    float chromaKeyThreshold = 0.80;\n    float blendRadius = 5.0;\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // BG color\n    vec3 bgColor = texture(iChannel0, uv).rgb;\n    \n    // Forground color\n    vec3 color = texture(iChannel1, uv).rgb;\n    \n     // Convert the color to YUV space\n    float Y = 0.299 * color.r + 0.587 * color.g + 0.114 * color.b;\n    float U = color.b - Y;\n    float V = color.r - Y;\n    \n      // Calculate the difference between the chroma key color and the current pixel color in YUV space\n    float chromaDiff = distance(vec3(U, V, 0.0), chromaKeyColor);\n    \n    // Calculate the edge blending factor based on the distance to the chroma key threshold\n    //float blendFactor = smoothstep(chromaKeyThreshold - blendRadius, chromaKeyThreshold, chromaDiff);\n     // Apply edge blending to the alpha channel\n    //float alpha = mix(1.0, 0.0, blendFactor);\n    \n    float alpha = 1.0;\n    // Check if the current pixel is within the chroma key threshold\n    if (chromaDiff < chromaKeyThreshold) {\n        // If the pixel is within the threshold, set its alpha to 0 to make it transparent\n        fragColor = vec4(color, alpha);;\n    } else {\n        // If the pixel is not within the threshold, keep its color and alpha values\n        fragColor = vec4(bgColor, 1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}