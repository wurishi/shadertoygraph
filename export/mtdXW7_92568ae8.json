{"ver":"0.1","info":{"id":"mtdXW7","date":"1685487613","viewed":75,"name":"TorusCaleidoscopio","username":"Raistlin_fuego","description":"Torus, Caleidoscopio, Circles","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["circles","torus","caleidoscopio"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MS 100\n#define mD .001\n#define PI 3.1415\n#define TAU 6.28\n\nmat2 Rot(float a){\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c, s, -s, c);\n\n}\n\nfloat Torus(vec3 p, float r){\n    return length(vec2(length(p.xz)-1., p.y))-r;\n\n}\n\nvec3 GetRayDir(vec2 uv, vec3 ro, vec3 l, float z){\n    vec3 f = normalize(l-ro);\n    vec3 r = normalize(cross(vec3(0,1,0), f));\n    vec3 u = cross(r, f);\n    vec3 c = ro + f*z;\n    vec3 i = c + uv.x*r + uv.y * u;\n    return normalize(i-ro);\n\n}\n\nfloat N21(vec2 p){\n    p += p +1.;\n    return fract(cos(dot(p, vec2(194.2343, 25.23432)))*6834.2353);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    vec3 col = vec3(0);\n    \n    \n    vec3 ro = vec3(0,0,-1);\n    ro.xz *= Rot(iTime*.1);\n    ro.xz *= Rot(mouse.x*3.);\n    vec3 lookat = vec3(0, 0,0);\n    lookat.xz *= Rot(iTime*.3);\n    float zoom = mix(.45, .55, cos(iTime*.3)*.5+.5);\n    vec3 rd = GetRayDir(uv, ro, lookat, zoom);\n    \n    float d, dist;\n    vec3 p;\n    \n    for(int i = 0; i < MS; i++){\n        p = ro + rd * dist;\n        d = -Torus(p, .5);\n        dist += d;\n        if(d<mD)break;\n    \n    }\n    \n    if(d<mD){\n        \n        float x = (atan(p.x, p.z)+PI)/TAU;\n        float y = (atan(length(p.xz)-1.,p.y)+PI)/TAU;\n        vec2 av = vec2(x*25., y*10.);\n        vec2 aGv = fract(av)-.5;\n        vec2 aId = floor(av);\n        float m, r;\n        \n        if(aId.y > 0. && aId.y < 4.){\n            for(float i = -1.; i <= 1.; i++){\n                for(float j = -1.; j <= 1.; j++){\n                    vec2 offs = vec2(i, j);\n                    vec2 desf;\n                    float v;\n\n                    if(aId.y > 1. && aId.y < 3.){\n                       desf = offs * aGv;\n                       v = 1.;\n                    }\n                    else{\n                        desf = offs + aGv;\n                        v = .6;\n\n                        }\n\n                    float c = length(aId-offs);\n                    r = mix(0.3, 1.5, cos((iTime+100.)*N21(aId*offs)*v)*.5+.5);\n                    m += smoothstep(.01, .0, length(desf)-r);\n\n                }\n            }\n            \n        }\n        else \n        {\n            float v = iTime *.2;\n            aGv = fract(av-v)-.5;\n            aId = floor(av-v);\n            col += aGv.x*aGv.y*N21(aId)*3.5*vec3(.9,N21(aId),.6);\n        }\n        \n        m = mod(m, (aId.y+5.)/4.);\n        col += m*.85*N21(aId)*vec3(.9,N21(aId),.6);\n        \n        if(aId.y > 0. && aId.y < 4.){\n            if(aGv.y > .35) col = vec3(0);\n        }\n\n    }\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}