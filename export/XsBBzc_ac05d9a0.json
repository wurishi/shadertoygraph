{"ver":"0.1","info":{"id":"XsBBzc","date":"1501360621","viewed":122,"name":"LookingEye","username":"mv","description":"based on https://www.shadertoy.com/view/XsSfRc, but using a radius of 2.0 for the rounded rectangle instead of 1.0","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["eye"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float dist_circle(vec2 p, float r) {\n    return length(p) - r;\n}\n\nfloat dist_rounded_rectangle(vec2 p, vec2 b, float r) {\n    return length(max(abs(p)-(b-r), 0.0)) - r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = 2.0 * fragCoord.xy / iResolution.xy - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    uv *= 1.2;\n\n    // w seconds transition, with 1-w seconds pause inbetween\n    float w = 0.2;\n    float t = 2.0*fract(0.5*iTime);\n    t = smoothstep((1.0 - w)/2.0, (1.0 + w)/2.0, abs(t - 1.0));\n    \n    vec2 p1 = uv;\n    vec2 p2 = uv + vec2(-1.0 + 2.0*t, 0.0);\n    \n    float d1 = dist_rounded_rectangle(p1, vec2(2.0, 1.0), 2.0);\n    float d2 = dist_circle(p2, 0.95);\n\n    // 0.03 units transition zone\n    float s1 = 1.0 - smoothstep(0.0, 0.03, d1);\n    float s2 = 1.0 - smoothstep(0.0, 0.03, d2);\n\n    vec3 color1 = vec3(1.0, 1.0, 1.0);\n    vec3 color2 = vec3(65.0, 105.0, 225.0)/255.0;\n    vec3 color3 = vec3(0.28, 0.28, 0.28);\n    \n    // blending based on signed distance smoothstep \n    vec3 c = color1;\n    c = s2*c + (1.0 - s2)*color2;\n    c = s1*c + (1.0 - s1)*color3;\n    \n    fragColor = vec4(c, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}