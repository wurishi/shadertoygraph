{"ver":"0.1","info":{"id":"tlSGDV","date":"1561126009","viewed":117,"name":"Shaded voronoi flow","username":"TSalty21","description":"Just messing around","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float random (vec2 st) {\n    return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.5453123);\n}\n\nvec2 random2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/min(iResolution.x, iResolution.y);\n    \n    vec2 st = uv;\n    \n    st -= iTime*vec2(-0.1, 0.1);\n    \n    st *= 8.0;\n    \n    vec2 i_st = floor(st);\n    vec2 f_st = fract(st);\n    \n    float m_dist = 8.0;\n    float m_angle;\n    vec2 mb;\n    vec2 mr;\n    \n    for (int y= -1; y <= 1; y++) {\n        for (int x= -1; x <= 1; x++) {\n            // Neighbor place in the grid\n            vec2 neighbor = vec2(float(x),float(y));\n            \n            vec2 point = random2(i_st + neighbor);\n            \n            point = 0.5 + 0.5*sin(0.5*iTime + 6.2831*point);\n            \n            vec2 diff = neighbor + point - f_st;\n\n            // Distance to the point\n            float dist = dot(diff, diff);\n\n            // Keep the closer distance\n            if(dist < m_dist) {\n                m_dist = dist;\n                m_angle = atan(diff.y, diff.x);\n                mb = neighbor;\n                mr = diff;\n            }\n        }\n    }\n    \n    \n    \n    m_dist = 8.0;\n    vec2 nb;\n    vec2 nr;\n    \n    for (int y= -2; y <= 2; y++) {\n        for (int x= -2; x <= 2; x++) {\n            // Neighbor place in the grid\n            vec2 neighbor = mb + vec2(float(x),float(y));\n            \n            vec2 point = random2(i_st + neighbor);\n            \n            point = 0.5 + 0.5*sin(0.5*iTime + 6.2831*point);\n            \n            vec2 diff = neighbor + point - f_st;\n\n            // Distance to the point\n            float dist = dot(0.5*(mr+diff), normalize(diff-mr));\n\n            // Keep the closer distance\n            if(dist < m_dist) {\n                m_dist = dist;\n                nb = point;\n                nr = 0.5*(diff-mr);\n            }\n            \n        }\n    }\n    \n    \n    float n_dist = m_dist/1.0;\n    \n    float c_id = random(i_st + mb);\n    \n    float th = 0.35*0.5*(sin(iTime + 101.0*c_id)+1.0);\n    \n    float height = step(th, n_dist)*(n_dist-th)*(length(nr)-th);\n    vec3 point = vec3(uv.xy, height);\n    vec3 normal = normalize(vec3(step(th, n_dist)*nr, 1.0));\n    \n    vec3 light = vec3(-0.6, 0.6, 2.5);\n    \n    vec3 diff = light-point;\n    float l_intensity = 4.75/pow(length(diff), 2.0);\n    \n    \n    float t1 = l_intensity*clamp(0.0, 1.0, dot(normalize(diff), normal));\n    \n    vec3 bg = vec3(0.83, 0.46, 0.38);\n    vec3 c1 = vec3(0.22, 0.36, 0.94);\n    \n    vec3 col = 1.5*mix(t1*c1, (1.0-t1)*bg, 1.0-t1);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}