{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"music","id":"4dfGzn","filepath":"/media/a/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"//This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 Unported License.\n\n//Made ALT_MODE default\n//Added x-distortion, noise overlay to ALT_MODE\n\n//uncomment for a more intense color scheme suited for ourpithyator, etc\n//comment for a calmer color scheme suited for 8 bit mentality, etc\n#define ALT_MODE\n\n//up to your taste. Might go well with ALT_MODE?\n//If you comment gamma but leave contrast you'll get a solarized effect.\n//#define POST_PROC\n\n\n#define BEAT_POINT 0.3\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//screenspace mapping\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t\n\tvec3 final_color, bg_color, wave_color;\n\t\n\t//establish a reasonable beat estimation\n\tfloat beat = texture(iChannel0, vec2(BEAT_POINT, 0.0)).x;\n\tbeat = beat * beat;\n\t\n\t//sun.x is desaturation. (-1.0 - 1.0) is good\n\t//sun.y is hue-related (keep around 0.2 - 1.0)\n\t//sun.z is contrast-related (keep around 0.7 - 1.0)\n\t//base values are -0.64, 0.96, 0.99\n\tvec3 sun = vec3(-0.64, 0.96, 0.99);\n\t\n\t//forget static shading. let's get dynamic!\n\tsun.x = -0.8 + beat*1.5;\n\tsun.y = 0.7 + 0.3 * cos(uv.x*6.0+20.0*(uv.y-0.5)*(beat-0.2) + iTime);\n\tsun.z = 0.9 + 0.1 * cos(iTime);\n\t\n\t//crazy intense dubstep-ize the colors\n\t#ifdef ALT_MODE\n\t\tsun.x = -cos(iTime);\n\t\tsun.y = 0.7 + 0.3 * cos(uv.x*6.0+20.0*(uv.y-0.5)*(beat-0.2) + iTime);\n\t\tsun.z = 0.85 + 0.35 * cos(iTime);\n\t#endif\n\t\n\tsun.xy = 0.5 + 0.5 * sun.xy;\n\tsun = normalize(sun);\n\t\n\t//waveform at x-coord\n\tfloat hwf = texture(iChannel0, vec2(uv.x,1.0)).x;\n\tfloat vwf = texture(iChannel0, vec2(uv.y,1.0)).x;\n\t\n\t#ifdef ALT_MODE\n\tfloat noise = texture(iChannel0, vec2(vwf,1.0)).x;\n\tfloat distort = (vwf - 0.5) * beat * beat * beat;\n\t\n\t//distort and wrap, triangle mod\n\tuv.x = abs(uv.x + distort);\n\tif (uv.x > 1.0) uv.x = 2.0 - uv.x;\n\t#endif\n\t\n\t\n\t//four distortion patterns\n\tfloat coord1 = sin(uv.x + hwf) - cos(uv.y);\n\tfloat coord2 = sin(1.0 - uv.x + hwf) - sin(uv.y * 3.0);\n\t//float coord3 = cos(uv.x+sin(0.2*iTime)) - sin(2.5*uv.y - wf);\n\tfloat coord4 = mix(coord1, coord2,hwf);\n\tfloat coord5 = mix(coord1, coord2, beat);\n\t\n\tfloat coorda = mix(coord1, coord2, 0.5 + 0.5 *sin(iTime*0.7));\n\tfloat coordb = mix(coord5, coord4, 0.5 + 0.5 *sin(iTime*0.5));\n\t\n\t//mix distortions based on time\n\tfloat coord = mix(coorda, coordb, 0.5 + 0.5 *sin(iTime*0.3));\n\n\t//distort the spectrum image using the above coords\n\tfloat j = (texture(iChannel0, vec2(abs(coord),0.0)).x - 0.5) * 2.0;\n\n\t//greyscale -> color with a lot of dot products\n\tfloat fac1 = dot(vec3(uv.x,uv.y,j),sun);\n\tfloat fac2 = dot(vec3(uv.y,j,uv.x),sun);\n\tfloat fac3 = dot(vec3(j,uv.x,uv.y),sun);\n\tbg_color = vec3(fac1,fac2,fac3);\n\n\t\n\t//extract some info about wave shape\n\tfloat w1 = texture(iChannel0, vec2(0.1,0.0)).x;\n\tfloat w2 = texture(iChannel0, vec2(0.2,0.0)).x;\n\tfloat w3 = texture(iChannel0, vec2(0.4,0.0)).x;\n\tfloat w4 = texture(iChannel0, vec2(0.8,0.0)).x;\n\t\n\t//save screenspace for later\n\tvec2 ouv = uv;\n\t\n\t\n\tfloat wave_width = 0.0;\n\tfloat wave_amp = 0.0;\n\t\n\t//rescale to aspect-aware [-1, 1]\n\tuv  = -1.0 + 2.0 * uv;\n\tuv.y *= iResolution.y/iResolution.x;\n\t\n\t#ifdef ALT_MODE\n\t//bend-spin-stretch the coord system based on wave shape\n\tfloat theta = (w1 - w2 + w3 - w4) * 3.14;\n\tuv = uv*mat2(cos(theta * 0.2),-sin(theta * 0.3),sin(theta * 0.5),cos(theta * 0.7));\n\t#endif\n\t\n\t//for polar calculations\n\tfloat rad = length(uv) - 0.3;\n\t\n\tfloat h;\n\t\n\t//slightly based on Waves by bonniem \n\tfor(float i = 0.0; i < 10.0; i++) {\n\t\t//build a simple trig series based on wave shape\n\t\t//note that waves are in rectangular coords\n\t\th = sin(uv.x*8.0+iTime)*0.2*w1+ \n\t\t\tsin(uv.x*16.0-2.0*iTime)*0.2*w2 + \n\t\t\tsin(uv.x*32.0+3.0*iTime)*0.2*w3 + \n\t\t\tsin(uv.x*64.0-4.0*iTime)*0.2*w4;\n\t\trad += h * 0.4;\n\t\t//find the wave section's width in polar coords\n\t\twave_width = abs(1.0 / (100.0 * rad));\n\t\twave_amp += wave_width;\n\t}\n\t\n\t//color waves based on sonar shape and screen position\n\twave_color = vec3(0.2 + w2*1.5, 0.1 + w4*2.0 + uv.y*0.1, 0.1 + w3*2.0+uv.x*0.1);\n\t\n\t#ifdef ALT_MODE\n\t//fade with beat\n\twave_amp *= beat * 3.0;\n\t#endif\n\t\n\t//modulate with waveform. doesn't do much.\n\twave_amp *= hwf*2.0;\n\t\n\t\n\t//fade bg in from 0 to 5 sec\n\tfinal_color = bg_color*smoothstep(0.0,5.0,iChannelTime[0]);\n\tfinal_color += 0.12*wave_color*wave_amp;\n\t\n\t//postproc code from iq :)\n\t#ifdef POST_PROC\n\t //gamma. remove this for a solarized look\t\n\tfinal_color = pow( clamp( final_color, 0.0, 1.0 ), vec3(1.7) );\n\n    //contrast\n\tfinal_color = final_color*0.3 + 0.7*final_color*final_color*(3.0-2.0*final_color);\n\t#endif\n\t\n\t//vignette\n\tfinal_color *= 0.5 + 0.5*pow( 16.0*ouv.x*ouv.y*(1.0-ouv.x)*(1.0-ouv.y), 0.2);\n\n\t#ifdef ALT_MODE\n//\tfinal_color = mix(final_color, vec3(noise), distort * 10.0);\n\tfinal_color += vec3(noise) * distort * 10.0;\n\t#endif\n\t\n\tfragColor = vec4(final_color, 1.0);\n}\n/*\nsplit into vwf and hwf\nuse vwf to self-modulate a texture for distort phase\ndistort uv of beginning with vwf\ntext!\nsimple float arrays for each line, stored at half or less res\nuse +1 for words, -1 for outline, inbet for glow effect\neg 0.0, 0.1, 0.3, 0.5, 0.9, -1.0, -1.0, 1.0, 1.0...\nuse timecodes of channel to get a time offset for text anim,\na text centre, and a lyric file.\n*/\n\n/*\nLean out in the window, take a look and see\nMetal moons are dreaming both of you and me\nStaring in the sky they are for days and weeks\nPainting cubes and ribbons like in demoscene\n\nCircuit-bent, eight-bit made, but how is your heart?\npixel pelt, low-fi brain, that makes you so smart\nbeeps and voice, glitch and noise, you're not a machine any more\n\nCoding every minute, coding every bit\nparties you can visit, people you can meet\nturn on your computer, make a brand new beat\ndance it like a human with your robot feet\n\nWhat is high definition for\nwhen you still play on Commodore?\n\nAny more\n*/","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XssGRj","date":"1374473941","viewed":2521,"name":"Audio Reaktive","username":"choard1895","description":"Playing around with audio-reactive imagery. Uses a fancy combination of dot-products to color a greyscale distorted audio waveform. Works well with most songs, especially 8bit Mentality. Enabling ALT_MODE is recommended for ourpithyator.","likes":20,"published":1,"flags":0,"usePreview":0,"tags":["2d","visualization","music","audio"],"hasliked":0,"parentid":"","parentname":""}}