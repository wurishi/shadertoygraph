{"ver":"0.1","info":{"id":"M3dXRj","date":"1719303531","viewed":58,"name":"光路2.0","username":"lage","description":"Change start position and end position to play this shader","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat GetGrid(float x){\n    return abs(2.0*x-2.0*floor(x)-1.0);\n}\n\nvec3 BackGround(vec3 col,vec2 uv){\n    float gx = GetGrid(uv.x);\n    float gy = GetGrid(uv.y);\n    \n    float gridx = step(0.95,gx);\n    float gridy = step(0.95,gy);\n    \n    col = mix(col,vec3(1),gridx);\n    col = mix(col,vec3(1),gridy);\n    \n    return col*0.5;\n}\n\nfloat Rectangle(float cor, float x, float dir){\n    dir = dir>0.0? 1.0:-1.0;\n    float delta = (cor-x);\n    float degree = smoothstep(0.0,0.9,dir*delta+1.0) - smoothstep(0.9,1.0,dir*delta+1.0);\n    return degree;\n}\n\nfloat DrawLine(float cor,float pos){\n    return 1.0-step(0.025,abs(cor-pos));\n}\n\nvec3 LineAni(vec2 pos,vec2 uv,vec2 dir){\n    \n    bool vertical = dir.x == 0.0;\n    \n    if(vertical){\n        float degree = Rectangle(uv.y,pos.y,dir.y);\n        vec3 col = mix(vec3(0.0),vec3(1.0),DrawLine(uv.x,pos.x))*degree;\n        //col += vec3(1) * Rectangle(uv.y,pos.y,dir.y);\n        return col;\n    }\n    else{\n        float degree = Rectangle(uv.x,pos.x,dir.x);\n        vec3 col = mix(vec3(0),vec3(1),DrawLine(uv.y,pos.y))*degree;\n        //col += vec3(1) * Rectangle(uv.x,pos.x,dir.x);\n        return col;\n    }\n}\n\nfloat GetRange(vec2 start,vec2 dir,vec2 uv){\n    if(dir.x == 0.0){\n        float diry = sign(dir.y);\n        return diry*(step(start.y-diry*0.025,uv.y)-step((start+dir+diry*0.025).y,uv.y));\n    }\n    else if(dir.y == 0.0){\n        float dirx = sign(dir.x);\n        return dirx*(step(start.x-dirx*0.025,uv.x)-step((start+dir).x+dirx*0.025,uv.x));\n    }\n}\n\nvec3 RunInterval(vec2 uv,vec2 start,vec2 dir,float st){\n    vec2 pos = start+(exp(mod(iTime,2.0))-1.0-st)*dir;\n    vec3 col = LineAni(pos,uv,dir);\n    col *= GetRange(start,dir,uv);\n    return col;\n}\n\n\nvec3 Run(vec3 col,vec2 uv,vec2[10] list,int n){\n    for(int i=0;i<n-1;i++){\n        if(iTime>=log(float(i)+1.0)){\n            col += RunInterval(uv,list[i],list[i+1]-list[i],float(i));\n        }\n    }\n    return col;\n}\n\nvec3 Test(vec3 col,vec2 uv){\n\n    if(iTime>=0.0){\n        col += RunInterval(uv,vec2(0.0,0.0),vec2(0.0,1.0),0.0);\n    }\n    if(iTime>=1.0){\n        col += RunInterval(uv,vec2(0.0,0.0),vec2(0.0,1.0),0.0);\n    }\n    if(iTime>=2.0){\n        col += RunInterval(uv,vec2(0.0,1.0),vec2(0.0,1.0),1.0);\n    }\n    return col;\n}\n\n\nvec2 list1[10]=vec2[10](vec2(0.,0.),vec2(1.,0.),vec2(1.,1.),vec2(2.,1.),vec2(2.,2.),vec2(2.,3.),vec2(0.,0.),vec2(1.,0.),vec2(1.,1.),vec2(2.,1.));\nvec2 list2[10]=vec2[10](vec2(0.,0.),vec2(-1.,0.),vec2(-1.,-1.),vec2(-2.,-1.),vec2(-2.,-2.),vec2(-2.,-3.),vec2(0.,0.),vec2(1.,0.),vec2(1.,1.),vec2(2.,1.));\n\n\nvec2 Rotate(vec2 v){\n    mat2 mat = mat2(0,-1,1,0);\n    \n    return v*mat;\n\n}\nfloat random (float x,float seed) {\n    return fract(sin(x * (1318.0+1000.0*seed))*45538.5323 );\n}\nbool Vertical(float n,float seed){\n    float m = random(n,seed);\n    return m>0.5;\n}\nvec2[10] InitList(vec2 uv,vec2 startPos,vec2 endPos,float seed){\n    vec2[10] list;\n    float n = abs(endPos.x-startPos.x)+abs(endPos.y-startPos.y);\n    list[0] = startPos;\n    vec2 temp = startPos;\n\n    float horizontalSteps = abs(endPos.x-startPos.x);\n    float verticalSteps = abs(endPos.y-startPos.y);\n\n    float horizontalSign = sign(endPos.x-startPos.x);\n    float verticalSign = sign(endPos.y-startPos.y);\n    vec3 col = vec3(0.0);\n\n    for(int i=1;float(i)<=n;i++){\n        vec2 dir;\n        if(horizontalSteps+verticalSteps>0.0){\n            if(Vertical(float(i),seed)){\n                if(abs(verticalSteps)>0.0){\n                    dir = verticalSign*vec2(0.0,1.0);\n                    verticalSteps -= 1.0;\n                }\n                else{\n                    dir = horizontalSign*vec2(1.0,0.0);\n                    horizontalSteps -= 1.0;\n                }\n            }\n            else{\n                if(abs(horizontalSteps)>0.0){\n                    dir = horizontalSign*vec2(1.0,0.0);\n                    horizontalSteps -= 1.0;\n                }\n                else{\n                    dir = verticalSign*vec2(0.0,1.0);\n                    verticalSteps -= 1.0;\n                }\n            }\n            temp = temp + dir;\n            list[i] = temp;\n        }\n    }\n    return list;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y*8.;\n    vec3 col = vec3(0);\n    \n    //col = Test(col,uv);\n    //vec2 center1 = vec2(pow(iTime,4.0)-5.0,2.0);\n    //col += LineAni(center1,uv,vec2(2.0,0.0));\n    //col += Run(col,uv,list1,6);\n    //col += Run(col,uv,list2,6);\n    for(int i;i<10;i++){\n        vec2[10] list_1 = InitList(uv,vec2(0.0,0.0),vec2(3.0,3.0),float(i));\n        vec2[10] list_2 = InitList(uv,vec2(0.0,0.0),vec2(-3.0,-3.0),float(i));\n        vec2[10] list_3 = InitList(uv,vec2(0.0,0.0),vec2(3.0,-3.0),float(i));\n        vec2[10] list_4 = InitList(uv,vec2(0.0,0.0),vec2(-3.0,3.0),float(i));\n        col = Run(col,uv,list_1,9);\n        col += Run(col,uv,list_2,9);\n        col += Run(col,uv,list_3,9);\n        col += Run(col,uv,list_4,9);\n    }\n    \n    //col += vec3(1) * Rectangle(uv.y,0.0,1.0);\n    col += BackGround(col,uv);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}