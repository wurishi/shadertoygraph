{"ver":"0.1","info":{"id":"ftGyRy","date":"1661665373","viewed":277,"name":"Yet Another Bloom Shader","username":"QuarksAndLeptons","description":"Bloom shaders have already been done hundreds of times, but I like how this one is subtle yet capable of enhancing the color and value of an image. \n","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["imageprocessing","bloom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2022 Micah Mundy\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Slide the mouse cursor over the image to compare the \n// results of the bloom effect with the original image.\n\n\n// The size of the most significant blur kernel\n// Note: blurring is done for free with mipmaps!\n#define LEVELS 12\n// The size of the least significant blur kernel\n#define BLURSIZE 3\n\n// Uncomment the line below to see how the bloom effect contributes to the image.\n//#define ONLY_SHOW_BLOOM 1\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //float minDim = min(iResolution.x, iResolution.y);\n    //vec2 fc2 = fragCoord - iResolution.xy/2.0;\n\t//vec2 uv = fc2 / vec2(minDim, minDim);\n\t//vec2 uv = fragCoord.xy / vec2(minDim, minDim);\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    \n    //float power = iMouse.x/iResolution.x*3.0;\n    //float threshold = iMouse.y/iResolution.y;\n    //float mixAmount = 0.3;\n    \n    float power = 1.0;\n    float threshold = 2.5;\n    float mixAmount = 0.6;\n    float subAmount = 0.1;\n\t\n\t\n\tvec4 col = vec4(0.0);\n    float highP = 0.0;\n    for(int i = LEVELS; i > BLURSIZE; i-=2){\n        col = col + texture( iChannel0, uv, float(i) );\n        highP = highP + 1.0;\n        col = col * power;\n        highP = highP * power; // TODO calculate highP at compile-time.\n    }\n    col = max(col-vec4(threshold), vec4(0.0)); \n    highP = highP - threshold;\n    \n    col = col / vec4(highP);\n    \n    #ifndef ONLY_SHOW_BLOOM\n    col = col*vec4(mixAmount) + texture( iChannel0, uv) - vec4(subAmount);\n    #endif\n    \n    //col = col * vec4(step(uv.x, iMouse.z/iResolution.x));\n    \n    if(uv.x<iMouse.x/iResolution.x){\n        col = texture( iChannel0, uv);\n    }\n    //col = mix(texture( iChannel0, uv), col, mixAmount);\n    \n\t\n\tfragColor = col;\n}","name":"Image","description":"","type":"image"}]}