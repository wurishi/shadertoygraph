{"ver":"0.1","info":{"id":"l3sSR4","date":"1709397613","viewed":49,"name":"Mold Eraser","username":"rubel","description":"Mold Eraser","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["moldrotbuffer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 pixelisation(vec2 v, float pixelSize) {\n    return vec2(\n        float(int(v.x / pixelSize)) * pixelSize, \n        float(int(v.y / pixelSize)) * pixelSize\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = pixelisation(fragCoord, 3.)/iResolution.xy;\n    fragColor = vec4(texture(iChannel0, uv).xyz, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Was made on a stream https://www.youtube.com/live/cPTxjUyp5tk\n// For the Staying Fresh game - Fight zombie meals, create culinary warriors, and Stay Fresh in this TBS roguelike\n// https://twitter.com/Rubel_NMB\n\nfloat rand(vec2 p) {\n    p = fract(p * vec2(518.91, 391.18));\n    p += dot(p, p + 45.946);\n    return fract(p.x * p.y);\n}\n\nvec2 pixelisation(vec2 v, float pixelSize) {\n    return vec2(\n        float(int(v.x / pixelSize)) * pixelSize, \n        float(int(v.y / pixelSize)) * pixelSize\n    );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;    //(fragCoord-iResolution.xy*0.5)/iResolution.y;\n    vec2 randomVolume = vec2(0.0125, 0.00225); // vert\n    randomVolume = vec2(0.0125, 0.0125);\n    \n    vec2 uvPixeled = pixelisation(fragCoord, 3.)/iResolution.xy;\n    \n    float pixelSize = (1./iResolution.xy).x;\n    \n    if(iFrame < 10) {\n        float col = 0.005 / length(vec2(uv.x - 0.5, uv.y * 2. - 1.));\n        fragColor = vec4(col, col, col, 1.0);\n    } else {\n        float sum = 0.;\n        float r = rand(uvPixeled) * 1.4 + 0.35;\n        for (float i = -pixelSize * 2.; i <= pixelSize * 2.; i+= pixelSize) {\n            float color = texture(iChannel0, vec2(uv.x + i, uv.y)).r;\n            sum += color * r * randomVolume.x;\n        }\n        for (float i = -pixelSize; i <= pixelSize; i+= pixelSize * 2. ) {\n            float color = texture(iChannel0, vec2(uv.x, uv.y + i)).r;\n            sum += color * r * randomVolume.x;\n        }\n        \n        float erase = 0.;\n        if(iMouse.z > 0.5) {\n            //sum += (1. / length((fragCoord.xy - iMouse.xy)/iResolution.y)) * 0.0001;\n            \n            if (length((fragCoord.xy - iMouse.xy)/iResolution.y) < pixelSize * 50.) {\n                sum = 0.;\n                erase = 1.;\n            }\n        }\n        \n        if (sum < 0.002) sum = 0.;\n        \n        sum = sum + texture(iChannel0, uv * 1.00).r * 0.98 - erase;\n        sum = min(sum, 1.);\n        sum = max(0., sum);\n        \n    \n        fragColor = vec4(vec3(sum) , 1.);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}