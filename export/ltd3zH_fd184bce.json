{"ver":"0.1","info":{"id":"ltd3zH","date":"1468045307","viewed":256,"name":"multifractal texture","username":"KukaTails","description":"multifractal texture","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["multifractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Hash(vec2 p)\n{\n    float h = dot(p, vec2(17.1, 311.7));\n    return -1.0 + 2.0 * fract(sin(h) * 4358.5453);\n}\n\nfloat Noise(vec2 p)\n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    \n    return mix(mix(Hash(i + vec2(0.0, 0.0)),\n                   Hash(i + vec2(1.0, 0.0)), u.x),\n               mix(Hash(i + vec2(0.0, 1.0)),\n                   Hash(i + vec2(1.0, 1.0)), u.x), u.y);\n \n}\n\n\nfloat FbmNoise(vec2 p)\n{\n  const float octaves = 6.0;\n  const float lacunarity = 2.0;\n  const float H = 0.010;\n  const float offset = 0.8;\n\n  float value = 1.0;\n  for (float i = 0.0; i < octaves; ++ i) {\n    value *= (Noise(p) + offset) * pow(lacunarity, -H * i);\n    p *= lacunarity;\n\n  }\n  return value;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n  vec2 p = fragCoord.xy / iResolution.xy;\n  vec2 uv = p*vec2(iResolution.x/iResolution.y,1.0);\n  fragColor = vec4(vec3(FbmNoise(10.0 * uv)), 1.0) * vec4(0.2, 0.4, 0.8, 1.0);\n}","name":"Image","description":"","type":"image"}]}