{"ver":"0.1","info":{"id":"DstcD4","date":"1695109441","viewed":70,"name":"Abstract Crystals","username":"Sagittarius0","description":"Multiple crystals-like sections with light shining over it","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["abstract","symmetry","crystals","firstcreation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette(float t){\n    vec3 a = vec3(0.499, 0.048, 0.401);\n    vec3 b = vec3(0.220, 0.000, 0.518);\n    vec3 c = vec3(0.318, 0.559, 0.086);\n    vec3 d = vec3(1.588, 2.052, 5.117);\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat angle_vec2(vec2 vec){\n    return atan(vec.y,vec.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord*2. - iResolution.xy)/iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    for (float i = 0.0; i < 4.0; i++){\n        uv = fract(uv*1.) - 0.5;  // Divide up into multiple repetitions (fractions)\n        float angle = angle_vec2(uv0);\n        uv *= mat2(cos(angle), -sin(angle),sin(angle),cos(angle)); // add symmetry\n        float d = length(vec2(0,0)-uv)+abs(uv.x);\n        d = sin(d-iTime*0.5-i);\n        d = pow(0.1 / abs(d),1.2);\n        vec3 col = palette(length(uv0)+i*0.8+iTime*0.2);\n        finalColor += col*d;\n    }\n    \n    // Output to screen\n    fragColor = vec4(finalColor,1.0);\n}\n\n\n","name":"Image","description":"","type":"image"}]}