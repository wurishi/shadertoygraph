{"ver":"0.1","info":{"id":"DslGzj","date":"1666437426","viewed":95,"name":"Directional Kuwahara Filter, KS","username":"stormsc1","description":"Directional Kuwahara Filter","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["kuwahara"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // sobel operator\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float kernelx[9] = float[9](-1.0f, -2.0f, -1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 2.0f, 1.0f);\n    float kernely[9] = float[9](-1.0f, 0.0f, 1.0f, -2.0f, 0.0f, 2.0f, -1.0f, 0.0f, 1.0f);\n    \n    int i = 0;\n    \n    vec2 texelSize = 1.0f / iResolution.xy;\n\n    float Gx = 0.0f;\n    float Gy = 0.0f;\n\n    for (int x = -1; x <= 1; x++)\n    {\n        for (int y = -1; y <= 1; y++)\n        {\n            if (i == 4)\n            {\n                i++;\n                continue;\n            }\n            \n            vec2 offset = vec2(x, y) * texelSize;\n            vec3 c = texture(iChannel0, uv + offset).xyz;\n            \n            // relative luminance\n            float l = dot(c, vec3(0.2125f, 0.7152f, 0.0722f));\n            \n            Gx += l * kernelx[i];\n            Gy += l * kernely[i];\n            \n            i++;\n        }\n    }\n    \n    float angle = 0.0f;\n    if (abs(Gx) > 0.001f)\n    {\n        angle = atan(Gy / Gx); \n    }\n    \n    float s = sin(angle);\n    float c = cos(angle);\n    \n    // kuwahara\n    vec3 mean[4] = vec3[4](\n        vec3(0.0f, 0.0f, 0.0f),\n        vec3(0.0f, 0.0f, 0.0f),\n        vec3(0.0f, 0.0f, 0.0f),\n        vec3(0.0f, 0.0f, 0.0f)\n    );\n    \n\n    vec3 sigma[4] = vec3[4](\n        vec3(0.0f, 0.0f, 0.0f),\n        vec3(0.0f, 0.0f, 0.0f),\n        vec3(0.0f, 0.0f, 0.0f),\n        vec3(0.0f, 0.0f, 0.0f)\n    );\n    \n    int radius = 5;\n    \n    vec2 offsets[4] = vec2[4](\n        vec2(-radius, -radius),\n        vec2(-radius, 0),\n        vec2(0, -radius),\n        vec2(0, 0)\n    );\n    \n    // for every region\n    for(int i = 0; i < 4; ++i)\n    {\n        // sample x axis\n        for (int j = 0; j <= radius; ++j)\n        {\n            // sample y axis\n            for (int k = 0; k <= radius; ++k)\n            {\n                vec2 pos = vec2(j, k) + offsets[i];\n                //vec2 uvpos = uv + pos/iResolution.xy;\n                vec2 offs = pos * texelSize; \n                offs = vec2(offs.x * c - offs.y * s, offs.x * s + offs.y * c);\n                vec2 uvpos = uv + offs;\n            \n                vec4 col = texture(iChannel0, uvpos);\n                \n                mean[i] += col.xyz;\n                sigma[i] += col.xyz * col.xyz; \n            }\n        }\n    \n    }\n    \n    float n = pow(float(radius + 1), 2.0f);\n\n    // calculate standard deviation\n    float sigma_f;\n    float min = 1.0;\n    for(int i = 0; i < 4; ++i)\n    {\n        mean[i] /= n;\n        sigma[i] = abs(sigma[i] / n - mean[i] * mean[i]);\n        sigma_f = sigma[i].b + sigma[i].y + sigma[i].z;\n        if(sigma_f < min)\n        {\n            min = sigma_f;\n            fragColor = vec4(mean[i], 1.0f);\n        }\n    }\n\n}","name":"Image","description":"","type":"image"}]}