{"ver":"0.1","info":{"id":"slXBzj","date":"1651108459","viewed":72,"name":"Rough wave function collapse tst","username":"Dubswitcher","description":"Trying my hand at a wave function collapse algorithm. Very dirty, possibly highly flawed, but something to play with.\n\nSomething especially interesting is how the result is different each time.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["test","experiment","wfc"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 colramp (float c)\n{\n    return \n    vec3(0.207, 0.254, 0.890)*smoothstep(0.7,1.,c) +\n    vec3(0.125, 0.415, 0.654)*smoothstep(0.9,0.7,c) * smoothstep(0.5,0.7,c) + \n    vec3(0.274, 0.556, 0.262)*smoothstep(0.7,0.6,c) +\n    vec3(0.85,0.83,0.79)*smoothstep(0.2,0.,c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = texture(iChannel0,uv).rgb;\n    col = colramp(1.-pow(col.x,2.));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float pi = 3.141592653589;\n\nfloat hash (in vec2 uv) {\n    vec3 p = vec3(dot(uv.xy,vec2(123.,456.)),dot(uv.xy,vec2(789.,112.)),dot(uv.xy,vec2(345.,678.)));\n    return fract(dot(fract(sin(p*10.)*5000.),vec3(987.,654.,321.)));\n}\n\nfloat stepup(in ivec2 uv, in float t) {\n    vec2 u = vec2(uv)+fract(iTime/100.);\n    return abs(clamp(sign(hash(u)-0.5),t-0.06,t+0.06));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 uv = ivec2(fragCoord);\n    vec3 col = texelFetch(iChannel0,uv,0).rgb;\n    float p = 0., c = 0.;\n    vec2 old = texelFetch(iChannel0,uv,0).xy;\n    if (old.y == 0.) {\n        for (int x = -1; x <= 1; x++){\n            for (int y = -1; y <= 1; y++){                \n                vec2 t = texelFetch(iChannel0,uv+ivec2(x,y),0).xy;\n                if ((x != 0 || y != 0) && t.y == 1.) {\n                    p += t.x;\n                    c += 1.;\n                }\n            }\n        }\n        if (c!=0.) {\n            p/=c; \n            col.x = stepup(uv,p); \n            col.y = 1.;\n        }\n    }\n    \n    if (iMouse.z > 0. || iTime < 0.2) {\n        col = vec3(step(0.99985,hash(vec2(uv)+fract(iTime/128.))));\n        col.r/=2.;\n    }\n    \n    fragColor = vec4(col,1.);\n}","name":"Buffer A","description":"","type":"buffer"}]}