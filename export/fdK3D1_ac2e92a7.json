{"ver":"0.1","info":{"id":"fdK3D1","date":"1631488767","viewed":200,"name":"corrugated sheet SDF","username":"jt","description":"2d SDF used to model a corrugated sheet panel ([url]https://www.shadertoy.com/view/NsVGD1[/url]),\nbased on iq's Parabola Segment - distance 2D [url]https://www.shadertoy.com/view/3lSczz[/url].\n","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["2d","distancefield","sdf","distance","exact","sheet","corrugated"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// corrugated sheet SDF by jt\n// 2d SDF used to model a corrugated sheet panel (https://www.shadertoy.com/view/NsVGD1),\n// based on iq's https://www.shadertoy.com/view/3lSczz Parabola Segment - distance 2D\n\n// source: https://www.shadertoy.com/view/3syGzz\n// Create multiple copies of an object - https://iquilezles.org/articles/distfunctions\nvec2 opRepLim( in vec2 p, in float s, in vec2 lima, in vec2 limb )\n{\n    return p-s*clamp(round(p/s),lima,limb);\n}\n\n// Create infinite copies of an object -  https://iquilezles.org/articles/distfunctions\nvec2 opRep( in vec2 p, in float s )\n{\n    return mod(p+s*0.5,s)-s*0.5;\n}\n\n// https://www.shadertoy.com/view/3lSczz  Parabola Segment - distance 2D\nfloat sdParabola( in vec2 pos, in float wi, in float he )\n{\n    pos.x = abs(pos.x);\n\n    float ik = wi*wi/he;\n    float p = ik*(he-pos.y-0.5*ik)/3.0;\n    float q = pos.x*ik*ik*0.25;\n    float h = q*q - p*p*p;\n\n    float x;\n    if( h>0.0 ) // 1 root\n    {\n        float r = sqrt(h);\n        x = pow(q+r,1.0/3.0) - pow(abs(q-r),1.0/3.0)*sign(r-q);\n    }\n    else        // 3 roots\n    {\n        float r = sqrt(p);\n        x = 2.0*r*cos(acos(q/(p*r))/3.0); // see https://www.shadertoy.com/view/WltSD7 for an implementation of cos(acos(x)/3) without trigonometrics\n    }\n\n    x = min(x,wi);\n\n    return length(pos-vec2(x,he-x*x/ik)) * sign(ik*(pos.y-he)+pos.x*pos.x);\n}\n\nfloat sdWave( vec2 p, float h, float thickness )\n{\n    return 0.5 * (abs(sdParabola( p / 0.5, 1.0, h )) - thickness);\n}\n\nfloat sdPatternHalf(vec2 p, float h, float thickness, float lim )\n{\n    vec2 r = opRepLim(p,2.0,vec2(-lim, 0),vec2(+lim, 0 ));\n    return sdWave( r, h, thickness ) ;\n}\n\nfloat sdCorrugatedSheet(vec2 p, float h, float thickness, float lim )\n{\n    float a = sdPatternHalf(p, h, thickness, lim );\n    p.x += 1.0;\n    p.y *= -1.0;\n    float b = sdPatternHalf(p, h, thickness, lim );\n\n    return min(a, b);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\n    p*=6.0; // zoom\n\n    // sdf\n    float thickness = 0.5 + 0.5 * cos(iTime);\n    float d = sdCorrugatedSheet(p, 0.5, thickness, 2.0);\n\n    // colorize\n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n    col *= 1.0 - exp(-2.0*abs(d));\n    col *= 0.8 + 0.2*cos(40.0*d);\n    col = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.05,abs(d)) );\n\n    fragColor = vec4(col,1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}