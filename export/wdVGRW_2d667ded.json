{"ver":"0.1","info":{"id":"wdVGRW","date":"1569854464","viewed":86,"name":"Julia set animation","username":"3ncryp73d","description":"Animation of the Julia set, moving through different parameters for c","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","julia","math","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 colFromFloat(float f)\n{\n    vec3 col = vec3(0.);\n    \n    col.x = sin(f*5. + 0.5);\n    col.y = sin(f*5.);\n    col.z = sin(f*5. - 0.5);\n    \n    return col*col/distance(vec3(0.), col) * f * 2.;\n}\n\n\nvec2 nonperiodicCurve()\n{\n    \n    float pi = 3.141592653589793238426433832795028841971;\n    \n    vec2 ret = vec2(0.);\n    ret += 0.7*vec2(sin(iTime/10.), cos(iTime/10.));\n    ret += 0.2*vec2(sin(iTime/pi*2.), cos(iTime/pi*2.));\n    \n    \n    return ret;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - iResolution.xy*0.5)/iResolution.y * 2.5; \n\n    // Time varying pixel color\n    vec3 col = vec3(0.);\n    \n    col = vec3(0.);\n    \n    vec2 c = nonperiodicCurve(); //vec2(sin(iTime/10.), cos(iTime/10.)) * sin(iTime / 50.);\n    vec2 z = uv;\n    \n    float l;\n    \n    for (float i = 0.; i < 200.; i++)\n    {\n        z = vec2(z.x*z.x + c.x - z.y*z.y, 2.*z.x*z.y + c.y);\n        \n        if (z.x*z.x + z.y*z.y > 5.) {\n            l = i / 50.;\n            break;\n        }\n    }\n        \n      \n    col = colFromFloat(l),// + ((0.03 < distance(uv, c)) ? vec3(0.) : vec3(1.));\n    \n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}