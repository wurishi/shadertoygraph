{"ver":"0.1","info":{"id":"dsBXzV","date":"1670532401","viewed":59,"name":"Orbiting particles v2","username":"thom_bahm","description":"Very noise-driven; Set speed to very low values (0.005 for example) to see what's going on. Kind of gives the look of particle/anti-particle annihilation which I think is cool. Might look into a realistic annihilation shader.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["particles","noisy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define particleCount 20\n#define particleLife 2\n#define ringCount 3\n#define speed 0.075f\n#define orbit 8.f\n\nvec2 uv;\n\nfloat rand(vec2 p)\n{\n    p  = 50.0*fract( p*0.3183099 );\n    return fract( p.x*p.y*(p.x+p.y) );\n}\n\nfloat noise (vec2 rnduv) {\n    vec2 intCoords = floor(rnduv); //p\n    vec2 frg = fract(rnduv); //w\n    \n    // a,b,c,d each correspond to the vertices of the 4 corners of a tile\n    float f;\n    float a = rand(intCoords + vec2(0,0));\n    float b = rand(intCoords + vec2(1,0));\n    float c = rand(intCoords + vec2(0,1));\n    float d = rand(intCoords + vec2(1,1));\n    \n    // f_i,j where (i,j) are the integer coordinates (x,y)\n    vec2 l = 3.f*frg*frg - 2.f*frg*frg*frg;\n    //l = frg*frg*frg*(frg*(frg*6.0-15.0)+10.0); //Alternative line?\n    f = -1. + 2.*(a + (b-a)*l.x + (c-a)*l.y + (a-b-c+d)*l.x*l.y);\n    return f;\n}\n\n\nfloat drawCircle(vec2 center, float radius)\n{\n    return 1.0 - smoothstep(0.0, radius, length(uv - center));\n}\n\nvec3 drawRing (int num, float r) {\n    float intTime = ceil(iTime);\n    vec3 ring = vec3(0.f);\n    for (int i = 1; i <= num; i++) {\n        float cnt = float(i); // for convenience\n        vec2 c = vec2(cos(iTime*cnt*speed)*orbit, sin(iTime*cnt*speed)*orbit);\n        //c *= float((int(intTime)%10))*vec2(rand(floor(c))); //Line gives different effect\n        c *= (noise(c)+1.);\n        vec3 circle = vec3(1.0, 0.5, 0.0) * drawCircle(c, r);\n        ring += circle;\n\n        //eliminate (or w/ smoothstep invert)a particle if it has been around\n        //for a 'particleLife' number of seconds\n        int life = int(intTime) - i;\n        if (life % particleLife * int(ceil(rand(uv))) == 0) {\n            //using smoothstep results in inverting the 'dead' circles every 'plife' seconds\n            //set speed to 0.001 for example\n            ring-= smoothstep(0.3,1.,circle);\n            //ring -= circle; //simple remove circle\n        }\n    }\n    return ring;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    uv = fragCoord/iResolution.xy;\n    uv -= 0.5; //normalize between <-0.5, 0.5>\n    uv.x *= iResolution.x/iResolution.y;\n    uv *= 50.f; //<-25, 25>\n\n    vec3 ring = vec3(0.f);\n    ring = drawRing(particleCount, 1.);\n    \n    // Output to screen\n    fragColor = vec4(ring,1.0);\n}","name":"Image","description":"","type":"image"}]}