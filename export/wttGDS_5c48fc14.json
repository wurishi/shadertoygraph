{"ver":"0.1","info":{"id":"wttGDS","date":"1577484013","viewed":131,"name":"quasi raytracing","username":"gorgh","description":"my first steps in ray marching","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["firsttry"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define SURF_DIST2 .001\n\n//heavily based on art of code tutorials\n//aspecially https://www.youtube.com/watch?v=Vmb7VGBVZJA\n\n//2d rotation matrix for rotation around one of the axises\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\n\n\n\n//calculation of the distance to the box\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\n//calculating the distance to all elements of the scene\nfloat GetDist(vec3 p) {\n//defining the arbitrary rotated plane    \n   float plane = dot(p,normalize(vec3(1,1,1)))+0.6;\n\n//defining the cube that is twisted and scaled    \n   vec3 bp=p-vec3(0,1,0);\n//arbitrary axis of mirroring the twisted cube    \n    vec3 n=normalize(vec3(1,1,1));\n    bp-=2.*n*min(0.,dot(p,n));\n   \n//scale factor   \n    float scale=mix(1.,3.,smoothstep(-1.,1.,bp.y));\n    bp.xz*=scale;\n//rotation factor    \n    bp.xz*=Rot(smoothstep(0.,1.,bp.y));\n\tfloat box=sdBox(bp,vec3(1,1,1))/scale*0.9;\n    float d=min(plane,box);\n//defining the central sphere    \n    float sph=length(p)-1.2;\n//defining the box    \n    vec3 bx=p-vec3(1,1.2,1);\n//rotating the box    \n    bx.xz*=Rot(iTime);\n//getting the distance to the box    \n    float pbx=sdBox(bx,vec3(0.5,0.5,0.5));\n//calculating all the elements to be displayed   \n    d=min(d,sph);\n    d=min(d,pbx);\n    return d;\n}\n//ray marching loop\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\n//calculating the normal vector perpendicular to the given surface\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\n//calculating the refraction- v is the direction that is about to be mirrored\n// n is the normal of the surface\n// V*2(V,N)N/(N,N)<-dividing by dot product for non-normalised N vectors\nvec3 refraction(vec3 v, vec3 n){\n\n return v-2.*dot(v,n)*n/dot(n,n);\n}\n\n\n//light calculation\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(3, 5, 4);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l)*.5+.5, 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l);\n   // if(p.y<.01 && d<length(lightPos-p)) dif *= .5;\n    \n    return dif;\n}\n\n//camera\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n    \n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 4, -5);\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = R(uv, ro, vec3(0,1,0), 1.);\n\n    float d = RayMarch(ro, rd);\n    \n    if(d<MAX_DIST) {\n    \tvec3 p = ro + rd * d;\n    \tvec3 bounce=GetNormal(p);\n//stepping back a little so the raymarching doesn't stop at the current surface        \n    \tvec3 pV = ro + rd * d*0.99;\n//calculating the mirrored vector        \n        vec3 mirrored=refraction(rd,bounce);\n//calculating the distance to another object starting from the surface of \n//the 1st objecy\n        float bounce_d=RayMarch(pV,mirrored);\n       vec3 p2=p+mirrored*bounce_d;\n    \tfloat dif = GetLight(p2);\n    \tcol = vec3(dif);\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}