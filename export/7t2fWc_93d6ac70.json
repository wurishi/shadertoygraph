{"ver":"0.1","info":{"id":"7t2fWc","date":"1652865679","viewed":90,"name":"uv Manipulation test","username":"QuantumShader","description":"first SDF test","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"st2BWc","parentname":"First 2D SDF test"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdBox(vec2 testPosition, vec2 boxPosition, vec2 boxDim, float roundness)\n{\n    roundness = min(roundness, min(boxDim.x, boxDim.y));\n    \n    vec2 q = abs(testPosition - boxPosition) - (boxDim - vec2(roundness));\n    // changed the last max function to min\n    return length(max(q, vec2(0.))) + min(min(q.x, q.y), 0.) - roundness;\n}\n\nvec3 rgbColor(float r, float g, float b)\n{\n    return vec3(r, g, b) / 255.;\n}\n\nmat2 rot2D(float angle)\n{\n    return mat2(cos(angle), -sin(angle),\n                    sin(angle), cos(angle));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.* fragCoord - iResolution.xy) / iResolution.y;\n    vec2 m = (2.* iMouse.xy - iResolution.xy) / iResolution.y;\n    \n       \n    // initial rotation rotates the entire grid\n    float angle = sin(iTime);\n    uv = rot2D(angle) * uv;\n    \n    // creates the grid\n    uv = sin(uv * 3.*sin(iTime));\n    \n    // rotates each tile in the grid\n    angle = cos(iTime);\n    uv = rot2D(angle) * uv;\n    \n    // get distance to box\n    vec2 boxPos = vec2(0.0, 0.0);\n    vec2 boxDim = vec2(0.5, 0.5);\n    \n    float d = sdBox(uv, boxPos, boxDim, m.y);\n    \n    // separate inner and outer regions\n    vec3 outerColor = rgbColor(43., 45., 66.);\n    vec3 innerColor = rgbColor(239., 35., 60.);\n    \n    vec3 col = outerColor  + sign(d) * (outerColor - innerColor);\n    \n    // make colors darker periodically based on distance \n    col *= 1. + 0.2*cos(100. * d + 10.*iTime);\n    \n    // dark area for small d (multiply with <1 for small d)\n    col *=  1. - exp(-20.*abs(d));\n    \n    // draw white outline where d = 0 (mix only in that region)\n    col = mix(col, vec3(1.), 1.-smoothstep(0., 0.01, abs(d)));\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}