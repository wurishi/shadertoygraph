{"ver":"0.1","info":{"id":"fsVSDt","date":"1726579654","viewed":30,"name":"Mesmerizing Noise","username":"boldo","description":"Mesmerizing noise","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["noise","plasma"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 2D Random\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y ;\n    vec3 col = mix(vec3(1.0, 0.7, 0.0), vec3(0.2, .3, 1.0), noise(uv * 2.0 + iTime));\n    \n    uv.x += sin(noise(uv*2. + iTime)) -.5;\n    uv.y += cos(noise(uv*2. + iTime)) -1.;\n    \n    float d = smoothstep(.6, .2, length(uv)) -1. + smoothstep(.1,.4, length(uv));\n    d *= noise(uv * 5. + iTime) * 4.0;\n    fragColor = vec4(d * col,1.0);\n}","name":"Image","description":"","type":"image"}]}