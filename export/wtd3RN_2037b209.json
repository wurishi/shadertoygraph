{"ver":"0.1","info":{"id":"wtd3RN","date":"1575831708","viewed":155,"name":"Octocat","username":"edubart","description":"GitHub's octocat made with 2D SDFs.","likes":16,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","octocat","github"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592653589793238\n\nfloat sd_circle(vec2 p, float r) {\n    return length(p) - r;\n}\n\nfloat length_n(vec2 p, float n) { p=pow(abs(p), vec2(n)); return pow(p.x+p.y, 1.0/n); }\n\nfloat sd_ellipsoid(vec2 p, vec2 r, float roundness){\n    float k1 = length_n(p/r, roundness);\n    float k2 = length_n(p/(r*r), roundness);\n    return k1*(k1-1.0)/k2;\n}\n\nfloat sd_vesica(vec2 p, float r, float d) {\n    p = abs(p);\n    float b = sqrt(r*r-d*d);\n    return ((p.y-b)*d>p.x*b) ? length(p-vec2(0.0,b))\n                             : length(p-vec2(-d,0.0))-r;\n}\n\nfloat sd_arc(vec2 p, float ta, float tb, float ra, float rb) {\n    vec2 sca = vec2(cos(ta), sin(ta));\n    vec2 scb = vec2(cos(tb), sin(tb));\n    p *= mat2(sca.x,sca.y,-sca.y,sca.x);\n    p.x = abs(p.x);\n    float k = (scb.y*p.x>scb.x*p.y) ? dot(p.xy,scb) : length(p.xy);\n    return sqrt( dot(p,p) + ra*ra - 2.0*ra*k ) - rb;\n}\n\nfloat sd_line(vec2 p, vec2 a, vec2 b){\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nvec2 rotate(vec2 p, float theta) {\n    float cost = cos(theta);\n    float sint = sin(theta);\n    return vec2(p.x*cost - p.y*sint, p.x*sint + p.y*cost);\n}\n\nfloat smin(float a, float b, float k) {\n    float h = max(k - abs(a-b), 0.0)/k;\n    return min(a, b) - h*h*k*(1.0/4.0);\n}\n\nvec3 background(vec2 uv) {\n    vec2 q = abs(floor(uv));\n    vec3 col = vec3(0.39);\n    col += vec3(0.17)*mod(q.x+q.y, 2.0);\n    return col;\n}\n\nvec3 blend(vec3 col, vec3 ocol, float d) {\n    return mix(ocol, col, smoothstep(0.5, 0.0, d));\n}\n\nvec3 map(vec2 p) {\n    float d, d2;\n    vec2 q;\n    p *= 100.0;\n    p.y -= 30.0;\n    vec2 sp = vec2(abs(p.x), p.y);\n\n    // background\n    vec3 ocol = background(p*0.3);\n\n    // water\n    d = sd_ellipsoid(p - vec2(0.0, -97.0), vec2(55.0, 20.0), 2.0);\n    ocol = blend(vec3(0.61,0.85,0.94), ocol, d);\n\n    // head\n    q = sp;\n    d = sd_ellipsoid(q, vec2(55.0, 45.0), 2.4);\n\n    // moustache 1\n    q -= vec2(45.0, -15.0);\n    q.y += q.x*q.x*0.003*sin(iTime*1.0);\n    d2 = sd_line(q, vec2(0.0,0.0), vec2(45.0,0.0)) - 0.2;\n    d = min(d, d2);\n\n    // moustache 2\n    q.y += 6.0;\n    q.y += q.x*q.x*0.003*sin(iTime*2.0);\n    d2 = sd_line(q, vec2(0.0,0.0), vec2(45.0,0.0)) - 0.2;\n    d = min(d, d2);\n\n    // ears\n    q = sp - vec2(32.0,30.0);\n    q = rotate(q, 0.7+sin(iTime)*0.3);\n    d2 = sd_vesica(q, 30.0, 15.0);\n    d = min(d, d2);\n    ocol = blend(vec3(0.12), ocol, d);\n\n    // body\n    q = sp;\n    d = sd_ellipsoid(q - vec2(0.0,-60.0), vec2(27.0, 20.0), 2.0);\n    d2 = sd_ellipsoid(q - vec2(0.0,-70.0), vec2(20.0, 16.0), 2.0);\n    d = max(-d2, d);\n\n    // middle legs\n    q = sp - vec2(6.0, -50.0);\n    q = rotate(q, -(0.5+0.5*sin(iTime))*0.1);\n    q.x -= pow(max(-45.0-q.y, 0.0), 1.9)*0.1;\n    d2 = sd_line(q, vec2(0.0,-50.0), vec2(0.0,0.0)) - 5.0;\n    d = smin(d, d2, 1.0);\n\n    // outer legs\n    q = sp - vec2(22.0, -60.0);\n    q = rotate(q, -(0.5+0.5*cos(iTime))*0.1);\n    q.x -= pow(max(-29.0-q.y, 0.0), 1.9)*0.1;\n    d2 = sd_line(q, vec2(0.0,-35.0), vec2(0.0,0.0)) - 5.0;\n    d = smin(d, d2, 1.0);\n\n    // tail\n    q = p - vec2(-26.0, -60.0);\n    q = rotate(q, PI*0.7);\n    q.x -= sin(q.y*0.123+3.0)*4.0 + sin(q.y*0.1+iTime*10.0);\n    d2 = sd_line(q, vec2(0.0,-40.0), vec2(0.0,0.0)) - 5.0 * smoothstep(-60.0, 0.0, q.y);\n    d = smin(d, d2, 1.0);\n    ocol = blend(vec3(0.12), ocol, d);\n\n    // tail skin\n    d = sd_circle(q - vec2(-2.0, -4.0), 1.3);\n    d = min(d, sd_circle(q - vec2(-2.0, -9.0), 1.2));\n    d = min(d, sd_circle(q - vec2(-2.0, -15.0), 1.1));\n    d = min(d, sd_circle(q - vec2(-2.0, -20.0), 1.0));\n    d = min(d, sd_circle(q - vec2(-1.6, -25.0), 0.9));\n    d = min(d, sd_circle(q - vec2(-1.3, -29.0), 0.8));\n    d = min(d, sd_circle(q - vec2(-0.9, -33.0), 0.7));\n    d = min(d, sd_circle(q - vec2(-0.8, -37.0), 0.6));\n    ocol = blend(vec3(0.61,0.85,0.94), ocol, d);\n\n    // face\n    q = sp;\n    q.y -= -11.0;\n    d = sd_ellipsoid(q - vec2(0.0,-5.0), vec2(40.0, 20.0), 2.9);\n    d = smin(d, sd_circle(q - vec2(21.0,0.0), 20.0), 5.0);\n    ocol = blend(vec3(0.98, 0.79, 0.69), ocol, d);\n\n    // nose\n    d = sd_circle(q - vec2(0.0,-12.0+sin(iTime)*0.5), 2.0);\n\n    // mouth\n    d2 = sd_arc(q - vec2(0.0,-18.0), PI+sin(iTime)*0.3, 0.3, 4.0, 0.4);\n    d = min(d, d2);\n    ocol = blend(vec3(0.67, 0.36, 0.32), ocol, d);\n\n    // eye white ball\n    q = sp;\n    q.y -= -12.0;\n    q.y /= 1.0 - smoothstep(0.98,1.0,sin(iTime*3.0));\n    d = sd_ellipsoid(q - vec2(20.0,0.0), vec2(9.0, 12.0), 2.0);\n    ocol = blend(vec3(1.0), ocol, d);\n\n    // eye retina\n    d = sd_ellipsoid(q - vec2(19.5,0.0), vec2(5.0, 8.0), 2.0);\n    ocol = blend(vec3(0.67, 0.36, 0.32), ocol, d);\n\n    // eye reflection\n    q = p - vec2(-2.0, 0.0);\n    q.x = abs(q.x);\n    d = sd_circle(q - vec2(19.5,-8.0), 1.3);\n    ocol = blend(vec3(1.0), ocol, d);\n\n    return ocol;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec3 col = map(uv);\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}