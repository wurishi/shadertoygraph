{"ver":"0.1","info":{"id":"MfscWl","date":"1721804576","viewed":35,"name":"sampling London","username":"prosumer","description":"postprocessing hw","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["postprocessing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2024 prosumer\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n//ref: https://www.shadertoy.com/view/XdB3zV\n\n// tips by prosumer:\n// The colors red and blue are determined based on the number of color blocks. If you look closely, there is some blue in the red areas,\n// but because there are more red blocks, it appears red. This is also the principle of color display in graphics.\n// The colors red and blue depend on the position and the shade of the color. If the inherent color is darker or if it is located at the top or left side, there will be more red color blocks.\n// So the perception that the high-rise buildings are red and the ground is blue is merely utilizing the illusion of the human eye.\n\n\n#define GAMMA 0.65\n#define REGIONS 5.\n#define LINES 0.5\n#define BASE 2.5\n#define GREEN_BIAS 0.9\n\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n\n    float n = p.x + p.y*57.0 + 113.0*p.z;\n\n    float res = mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                        mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),\n                    mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                        mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);\n    return res;\n}\n\nvec3 OutlineWhyCantIPassASampler(vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv.y = 1.-uv.y;\n  \tvec4 lines= vec4(0.30, 0.59, 0.11, 1.0);\n\n\tlines.rgb = lines.rgb * LINES*1.5;\n \n  \tfloat s11 = dot(texture(iChannel1, uv + vec2(-1.0 / iResolution.x, -1.0 / iResolution.y)), lines);   // LEFT\n  \tfloat s12 = dot(texture(iChannel1, uv + vec2(0, -1.0 / iResolution.y)), lines);             // MIDDLE\n  \tfloat s13 = dot(texture(iChannel1, uv + vec2(1.0 / iResolution.x, -1.0 / iResolution.y)), lines);    // RIGHT\n \n\n  \tfloat s21 = dot(texture(iChannel1, uv + vec2(-1.0 / iResolution.x, 0.0)), lines);                // LEFT\n  \t// Omit center\n  \tfloat s23 = dot(texture(iChannel1, uv + vec2(-1.0 / iResolution.x, 0.0)), lines);                // RIGHT\n \n  \tfloat s31 = dot(texture(iChannel1, uv + vec2(-1.0 / iResolution.x, 1.0 / iResolution.y)), lines);    // LEFT\n  \tfloat s32 = dot(texture(iChannel1, uv + vec2(0, 1.0 / iResolution.y)), lines);              // MIDDLE\n  \tfloat s33 = dot(texture(iChannel1, uv + vec2(1.0 / iResolution.x, 1.0 / iResolution.y)), lines); // RIGHT\n \n  \tfloat t1 = s13 + s33 + (2.0 * s23) - s11 - (2.0 * s21) - s31;\n  \tfloat t2 = s31 + (2.0 * s32) + s33 - s11 - (2.0 * s12) - s13;\n \n  \tvec3 col;\n \n\tif (((t1 * t1) + (t2* t2)) > 0.04) \n\t{\n  \t\tcol = vec3(-1.,-1.,-1.);\n  \t}\n\telse\n\t{\n    \t\tcol = vec3(0.,0.,0.);\n  \t}\n \n  \treturn col;\n}\n\n\nvec3 RecolorForeground(vec3 color)\n{\n\tif(color.g > (color.r + color.b)*GREEN_BIAS)\n\t{\n\t\tcolor.rgb = vec3(0.,0.,0.);\n\t}\n\n\t\n\tcolor.rgb = 0.2126*color.rrr + 0.7152*color.ggg + 0.0722*color.bbb;\n\t\n    if(color .r > 0.75)\n\t{\n\t\tcolor.r *= 0.9;\n\t}\n\telse if(color.r > 0.5)\n\t{\n\t\tcolor.r *= 0.7;\n\t\tcolor.g *=0.9;\n\t}\n\telse if (color.r > 0.25)\n\t{\n\t\tcolor.r *=0.5;\n\t\tcolor.g *=0.75;\n\t}\n\telse\n\t{\n\t\tcolor.r *= 0.25;\n\t\tcolor.g *= 0.5;\n\t}\n\t\n\t\n\treturn color;\n}\n\n\nvec3 Posterize(vec3 color)\n{\n\tcolor = pow(color, vec3(GAMMA, GAMMA, GAMMA));\n\tcolor = floor(color * REGIONS)/REGIONS;\n\tcolor = pow(color, vec3(1.0/GAMMA));\n\treturn color.rgb;\n}\n\nvec3 ReplaceBackground(vec3 color,vec2 uv,vec2 fragCoord)\n{\n\n    color.r = texture(iChannel1,vec2(uv.x,1.-uv.y)).r-0.6;\n\tcolor.r = (0.5-0.5*uv.x+uv.y)*0.75 +color.r;\n\tcolor = Posterize(color.rrr);\n\tcolor.b = 0.;\n\tcolor.g = 0.;\n\tcolor += OutlineWhyCantIPassASampler(fragCoord)/40.;\n\treturn color;\n}\n\nvec3 Outline(vec2 uv)\n{\n  \tvec4 lines= vec4(0.30, 0.59, 0.11, 1.0);\n\n\tlines.rgb = lines.rgb * LINES;\n\tif(iResolution.x < 300.)\n\t{\n\t\tlines /= 4.0;\t// improves thumbnail look\n\t}\n\telse if(iResolution.x > 1000.)\n\t{\n\t\tlines *= 1.5;\n\t}\n\t\n \n  \tfloat s11 = dot(texture(iChannel0, uv + vec2(-1.0 / iResolution.x, -1.0 / iResolution.y)), lines);   // LEFT\n  \tfloat s12 = dot(texture(iChannel0, uv + vec2(0, -1.0 / iResolution.y)), lines);             // MIDDLE\n  \tfloat s13 = dot(texture(iChannel0, uv + vec2(1.0 / iResolution.x, -1.0 / iResolution.y)), lines);    // RIGHT\n \n\n  \tfloat s21 = dot(texture(iChannel0, uv + vec2(-1.0 / iResolution.x, 0.0)), lines);                // LEFT\n  \t// Omit center\n  \tfloat s23 = dot(texture(iChannel0, uv + vec2(-1.0 / iResolution.x, 0.0)), lines);                // RIGHT\n \n  \tfloat s31 = dot(texture(iChannel0, uv + vec2(-1.0 / iResolution.x, 1.0 / iResolution.y)), lines);    // LEFT\n  \tfloat s32 = dot(texture(iChannel0, uv + vec2(0, 1.0 / iResolution.y)), lines);              // MIDDLE\n  \tfloat s33 = dot(texture(iChannel0, uv + vec2(1.0 / iResolution.x, 1.0 / iResolution.y)), lines); // RIGHT\n \n  \tfloat t1 = s13 + s33 + (2.0 * s23) - s11 - (2.0 * s21) - s31;\n  \tfloat t2 = s31 + (2.0 * s32) + s33 - s11 - (2.0 * s12) - s13;\n \n  \tvec3 col;\n \n\tif (((t1 * t1) + (t2* t2)) > 0.04) \n\t{\n  \t\tcol = vec3(-1.,-1.,-1.);\n  \t}\n\telse\n\t{\n    \tcol = vec3(0.,0.,0.);\n  \t}\n \n  \treturn col;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec3 color = normalize(texture(iChannel0,uv)).rgb*BASE;\t\n\tcolor = Posterize(color);\n\tvec3 background = ReplaceBackground(color,uv,fragCoord);\n\tcolor.rgb += Outline(uv);\n\tcolor = RecolorForeground(color)+ background;\n\t//color = texture(iChannel0,vec2(uv.x, uv.y)).rgb;\n\tfragColor = vec4(color,1.);\n}","name":"Image","description":"","type":"image"}]}