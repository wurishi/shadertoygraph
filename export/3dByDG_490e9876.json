{"ver":"0.1","info":{"id":"3dByDG","date":"1588872643","viewed":61,"name":"Hw9 - Subsurface Scattering","username":"vmoniqb","description":"hw9","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raycasting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float FOVY = 3.14159 * 0.25;\nconst int RAY_STEPS = 256;\n\nconst float AO_DIST = 0.085;\nconst float AO_KVAL = 2.0;\n\nconst float SHADOW_HARDNESS = 6.0;\n\n// The larger the DISTORTION, the smaller the glow\nconst float DISTORTION = 0.2;\n// The higher GLOW is, the smaller the glow of the subsurface scattering\nconst float GLOW = 2.0;\n// The higher the BSSRDF_SCALE, the brighter the scattered light\nconst float BSSRDF_SCALE = 4.0;\n// Boost the shadowed areas in the subsurface glow with this\nconst float AMBIENT = 0.25;\n\n    \nstruct Intersection\n{\n    float t;\n    vec3 color;\n    vec3 p;\n    int object;\t// Assign every object in scene a unique ID int\n};\n    \n\n    \nvoid pR(inout vec2 p, float a)\n{\n\tp = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\nvec3 rotatePtY(vec3 pt, float a)\n{    \n    pR(pt.yz, 0.);\n    pR(pt.xz, a);\n    pR(pt.xy, 0.);\n    \n    return pt;\n}\n\nvec3 rotatePtX(vec3 pt, float a)\n{    \n    pR(pt.yz, a);\n    pR(pt.xz, 0.);\n    pR(pt.xy, 0.);\n    \n    return pt;\n}\n\n// 2D rotation about the y-axis\nvec3 rotateY(vec3 p, float a) {\n    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);\n}\n\n\nvoid rayCast(vec3 eye, vec3 ref, vec2 ndc, out vec3 dir) {    \n    // Compute camera axis\n    vec3 F = ref - eye;\n    vec3 R = normalize(cross(F, vec3(0,1,0)));\n    vec3 U = normalize(cross(R, F));\n    \n    vec3 V = U * length(F) * tan(FOVY * 0.5);\n    vec3 H = R * length(F) * tan(FOVY * 0.5) * float(iResolution.x) / iResolution.y;\n    \n    vec3 p = ref + ndc.x * H + ndc.y * V; \n    \n    dir = normalize(p - eye);\n}\n\n    \n// SHAPE SDFs\nfloat sphere(vec3 p, float r, vec3 c) {\n\treturn distance(p, c) - r;\n}\n\nfloat cube(vec3 p, vec3 c) {\n    return length(max(abs(p) - c, 0.0));\n}\n\nfloat squarePlane(vec3 p, vec4 n)\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\n\nfloat torus(vec3 p, vec2 t)\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q) - t.y;\n}\n\n\n#define SPHERE_SDF\t \tsphere(pos + vec3(-5.0, 0.0, 0.0), 4.0, vec3(0.0, 0.0, 0.0))\n#define SPHERE_ID\t\t1\n#define CUBE_SDF\t\tcube(rotatePtY(pos + vec3(0.0, 1.5, 6.0), 0.5), vec3(1.5, 3., 1.5))\n#define CUBE_ID\t\t\t2\n#define TORUS_SDF\t\ttorus(rotatePtX(rotatePtY(pos + vec3(0.0, 0.2, -6.0), -0.4), -0.7), vec2(2.0, 0.75))\n#define TORUS_ID\t\t3\n#define FLOOR_SDF\t\tsquarePlane(pos + vec3(0.0, 2.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0))\n#define FLOOR_ID\t\t4\n#define LIGHT_SDF\t\tsphere(pos + vec3(-0.5, 0.0, 0.0), 2.5, lightPos)\n#define LIGHT_ID\t\t5\n\nvoid sceneMap3D(vec3 pos, out float t, out int obj, vec3 lightPos) {\n    t = SPHERE_SDF;\n    obj = SPHERE_ID;\n    \n    float t2;\n    if ((t2 = CUBE_SDF) < t) {\n    \tt = t2;\n      \tobj = CUBE_ID;\n    }\n    \n    if ((t2 = TORUS_SDF) < t) {\n    \tt = t2;\n      \tobj = TORUS_ID;\n    }\n    \n    if ((t2 = FLOOR_SDF) < t) {\n    \tt = t2;\n      \tobj = FLOOR_ID;\n    }\n    \n    if ((t2 = LIGHT_SDF) < t) {\n    \tt = t2;\n    \tobj = LIGHT_ID;\n    }\n}\n\n\nfloat sceneMap3D(vec3 pos, vec3 lightPos) {\n    float t = SPHERE_SDF;\n    \n    float t2;\n    if ((t2 = CUBE_SDF) < t) {\n    \tt = t2;\n    }\n    \n    if ((t2 = TORUS_SDF) < t) {\n    \tt = t2;\n    }\n    \n    if ((t2 = FLOOR_SDF) < t) {\n    \tt = t2;\n    }\n    \n    if ((t2 = LIGHT_SDF) < t) {\n    \tt = t2;\n    }\n    \n    return t;\n}\n\n\nfloat shadowMap3D(vec3 pos) {\n    float t = SPHERE_SDF;\n    \n    float t2;\n    if ((t2 = CUBE_SDF) < t) {\n    \tt = t2;\n    }\n    \n    if ((t2 = TORUS_SDF) < t) {\n    \tt = t2;\n    }\n    \n    if ((t2 = FLOOR_SDF) < t) {\n    \tt = t2;\n    }\n    \n    return t;\n}\n\n\nvec3 computeNormal(vec3 pos, vec3 lightPos) {\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize( vec3( sceneMap3D(pos + epsilon.yxx, lightPos) - sceneMap3D(pos - epsilon.yxx, lightPos),\n                            sceneMap3D(pos + epsilon.xyx, lightPos) - sceneMap3D(pos - epsilon.xyx, lightPos),\n                            sceneMap3D(pos + epsilon.xxy, lightPos) - sceneMap3D(pos - epsilon.xxy, lightPos)));\n}\n\n\nvoid march(vec3 origin, vec3 dir, out float t, out int hitObj, vec3 lightPos) {\n    t = 0.001;\n    \n    for (int i = 0; i < RAY_STEPS; ++i) {\n    \tvec3 pos = origin + t * dir;\n        float m; // Minimum distance from this point to an object in the scene\n        sceneMap3D(pos, m, hitObj, lightPos);\n        if (m < 0.01) {\n        \treturn;\n        }\n        t += m;\n    }\n\t// We hit nothing\n    t = -1.0;\n    hitObj = -1;\n}\n\n\nfloat fiveTapAO(vec3 p, vec3 n, float k) {\n    float aoSum = 0.0;\n    for(float i = 0.0; i < 5.0; ++i) {\n        float coeff = 1.0 / pow(2.0, i);\n        aoSum += coeff * (i * AO_DIST - shadowMap3D(p + n * i * AO_DIST));\n    }\n    return 1.0 - k * aoSum;\n}\n\n\nfloat softShadow(vec3 dir, vec3 origin, float min_t, float k) {\n    float res = 1.0;\n    float t = min_t;\n    for(int i = 0; i < RAY_STEPS; ++i) {\n        float m = shadowMap3D(origin + t * dir);\n        if(m < 0.0001) {\n            return 0.0;\n        }\n        res = min(res, k * m / t);\n        t += m;\n    }\n    return res;\n}\n\n\nfloat subsurfaceColor(vec3 lightDir, vec3 n, vec3 view, float thin) {\n\tvec3 scatterDir = lightDir + n * DISTORTION;\n\tfloat lightReachingEye = pow(clamp(dot(view, -scatterDir), 0.0, 1.0), GLOW) * BSSRDF_SCALE;\n\tfloat attenuation = max(0.0, dot(n, lightDir) + dot(view, -lightDir));\n\tfloat totalLight = attenuation * (lightReachingEye + AMBIENT) * thin;\n    return totalLight;\n}\n\nvoid contrast( inout vec3 color, in float c) {\n    float t = 0.5 - c * 0.5; \n    color.rgb = color.rgb * c + t;\n}\n\nvec3 computeMaterial(int hitObj, vec3 p, vec3 n, vec3 lightVec, vec3 view, float thin) {\n    float lambert = max(0.0, dot(n, lightVec));\n    \n    switch(hitObj) {\n        // Sphere\n        case SPHERE_ID:\n        vec3 color1 = vec3(1.0, 0.5, 1.2) * vec3(1.0, 0.7, 0.4) * max(0.0, dot(n, lightVec)) * softShadow(lightVec, p, 0.1, SHADOW_HARDNESS);\n        color1 = color1 + vec3(0.6, 1.0, 0.75) * subsurfaceColor(lightVec, n, view, thin) * vec3(1.0, 0.88, 0.7);\n        //contrast(color1, 1.5);\n        return color1;\n        break;\n        // Cube\n        case CUBE_ID:\n        vec3 color2 = vec3(1.0, 0.88, 0.7) * vec3(1.0, 0.7, 0.5) * lambert * softShadow(lightVec, p, 0.1, SHADOW_HARDNESS);\n        return color2 + vec3(1.0, 0.5, 0.6) * subsurfaceColor(lightVec, n, view, thin) * vec3(1.0, 0.88, 0.7);\n        break;\n        // Torus\n        case TORUS_ID:\n        vec3 color3 = vec3(1.0, 0.88, 0.7) * vec3(1.0, 0.65, 0.45) * max(0.0, dot(n, lightVec)) * softShadow(lightVec, p, 0.1, SHADOW_HARDNESS);\n        return color3 + vec3(0.4, 0.4, 0.8) * subsurfaceColor(lightVec, n, view, thin) * vec3(1.0, 0.88, 0.7);\n        break;\n        // Box\n        case FLOOR_ID:\n        vec4 color4 = texture(iChannel0, vec2(p.xz / 10.0));\n        return vec3(1.0, 1.0, 1.0) * vec3(color4) * max(0.0, dot(n, lightVec)) * softShadow(lightVec, p, 0.1, SHADOW_HARDNESS);\n        break;\n        // Light\n        case LIGHT_ID:\n        return vec3(1.0, 0.88, 0.7);\n        break;\n        // Background\n        case -1:\n        return vec3(0.0);\n        break;\n    }\n    return vec3(1.0);\n}\n\n\nIntersection sdf3D(vec3 dir, vec3 eye, vec3 lightPos) {\n\tfloat t;\n    int hitObj;\n    march(eye, dir, t, hitObj, lightPos);\n    \n    vec3 isect = eye + t * dir;\n    vec3 nor = computeNormal(isect, lightPos);\n    vec3 lightDir = normalize(lightPos - isect);\n    float thickness = fiveTapAO(isect, -nor, AO_KVAL);\n        \n    vec3 surfaceColor = computeMaterial(hitObj, isect, nor, lightDir, normalize(eye - isect), thickness);\n        \n    return Intersection(t, surfaceColor, isect, hitObj);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec3 lightPos = rotateY(vec3(12.0, 4.0, -6.0), iTime * 0.5);\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // Convert to range [-1,1]\n    uv = uv * 2.0 - vec2(1.0, 1.0);\n    \n    vec3 eye = rotateY(vec3(0.0, 0.0, 15.0), sin(30.0) * 3.14159 * 0.5);\n    vec3 ref = vec3(0, 0, 0);\n    vec3 rayDir;\n    \n    rayCast(eye, ref, uv, rayDir);\n    \n    Intersection isect = sdf3D(rayDir, eye, lightPos);\n\n    // Output to screen\n    fragColor = vec4(isect.color, 1.);\n}\n","name":"Image","description":"","type":"image"}]}