{"ver":"0.1","info":{"id":"ltjyDy","date":"1510073796","viewed":171,"name":"Font Matrix is ¡¡HEAVY!!","username":"theGiallo","description":"Experiment on font matrix. FAIL.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["font"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NO_ARRAY_ACCESS 1\n#define NO_ARRAY_AT_ALL 1\n\n\n\t#define C_space 32.\n    #define C_ESCL 33.\n    #define C_QUOT 34.\n    #define C_HASH 35.\n    #define C_DOLL 36.\n    #define C_PERC 37.\n    #define C_AND 38.\n    #define C_APOS 39.\n    #define C_LPAR 40.\n    #define C_RPAR 41.\n    #define C_STAR 42.\n    #define C_PLUS 43.\n    #define C_COMM 44.\n    #define C_MINU 45.\n    #define C_DOT 46.\n    #define C_SLASH 47.\n    #define C_0 48.\n    #define C_1 49.\n    #define C_2 50.\n    #define C_3 51.\n    #define C_4 52.\n    #define C_5 53.\n    #define C_6 54.\n    #define C_7 55.\n    #define C_8 56.\n    #define C_9 57.\n    #define C_COL 58.\n    #define C_SCOL 59.\n    #define C_LD 60.\n    #define C_EQ 61.\n    #define C_GD 62.\n    #define C_QUES 63.\n    #define C_AT 64.\n    #define C_A 65.\n    #define C_B 66.\n    #define C_C 67.\n    #define C_D 68.\n    #define C_E 69.\n    #define C_F 70.\n    #define C_G 71.\n    #define C_H 72.\n    #define C_I 73.\n    #define C_J 74.\n    #define C_K 75.\n    #define C_L 76.\n    #define C_M 77.\n    #define C_N 78.\n    #define C_O 79.\n    #define C_P 80.\n    #define C_Q 81.\n    #define C_R 82.\n    #define C_S 83.\n    #define C_T 84.\n    #define C_U 85.\n    #define C_V 86.\n    #define C_W 87.\n    #define C_X 88.\n    #define C_Y 89.\n    #define C_Z 90.\n    #define C_LSB 91.\n    #define C_BSL 92.\n    #define C_RSB 93.\n    #define C_CAR 94.\n    #define C_UND 95.\n    #define C_GRAV 96.\n    #define C_a 97.\n    #define C_b 98.\n    #define C_c 99.\n    #define C_d 100.\n    #define C_e 101.\n    #define C_f 102.\n    #define C_g 103.\n    #define C_h 104.\n    #define C_i 105.\n    #define C_j 106.\n    #define C_k 107.\n    #define C_l 108.\n    #define C_m 109.\n    #define C_n 110.\n    #define C_o 111.\n    #define C_p 112.\n    #define C_q 113.\n    #define C_r 114.\n    #define C_s 115.\n    #define C_t 116.\n    #define C_u 117.\n    #define C_v 118.\n    #define C_w 119.\n    #define C_x 120.\n    #define C_y 121.\n    #define C_z 122.\n    #define C_LCB 123.\n    #define C_VBAR 124.\n    #define C_RCB 125.\n    #define C_TILD 126.\n\nfloat\nchar_DF( float char, vec2 char_uv )\n{\n    vec2 ld = vec2( mod( char, 16. ), 15. - floor( char / 16. ) ) / 16.;\n    vec2 luv = ld + clamp( char_uv/16., 0.,1./16.);\n\treturn textureLod(iChannel0, vec2(luv.x,luv.y), 0. ).w;\n}\n\n#define LINES_COUNT 16\n#define LINES_LENGTH 32\n#define TEXT_SIZE ( LINES_COUNT * LINES_LENGTH )\n#if !NO_ARRAY_AT_ALL\nfloat text_page[TEXT_SIZE];\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    #if 0\n    for ( int i = 0; i != TEXT_SIZE; ++i )\n    {\n        text_page[i] = C_space;\n    }\n    #endif\n    \n    #define SETC(GCx, GCy,C) text_page[ GCx + GCy * LINES_LENGTH] = C - 32.;\n    \n\t#if !NO_ARRAY_AT_ALL\n    for ( int x = 0; x != LINES_LENGTH; ++x )\n    for ( int y = 0; y != LINES_COUNT;  ++y )\n    {\n        SETC(x,y,C_A)\n    }\n    SETC(4,1,C_h)\n    SETC(5,1,C_e)\n    SETC(6,1,C_l)\n    SETC(7,1,C_l)\n    SETC(8,1,C_o)\n    #endif\n    \n    vec2 text_chars_size = vec2( LINES_LENGTH, LINES_COUNT );\n    vec2 glyph_size = iResolution.xy / text_chars_size;\n\n    vec2 fragCUV = fragCoord.xy / iResolution.xy * text_chars_size;\n    vec2 char_coord = floor( fragCUV );\n    int char_id = int(char_coord.x) + int(char_coord.y) * LINES_LENGTH;\n    vec2 glyph_uv = fragCUV - char_coord;\n    glyph_uv = ( glyph_uv + vec2(.5,.2) ) * vec2(.5,.7);\n    #if NO_ARRAY_ACCESS\n    float char = 65.;\n    #else\n    float char = text_page[char_id] + 32.;\n    #endif\n    float cd = char_DF( char, glyph_uv );\n    fragColor += 1.0 - step( 0.5, cd );\n}","name":"Image","description":"","type":"image"}]}