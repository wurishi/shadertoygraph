{"ver":"0.1","info":{"id":"4fyGRw","date":"1712516807","viewed":154,"name":"Analogue Mandelbrot","username":"MisterSirCode","description":"What happens if you take an average of a julia library the size of your screen?... Well you get this... Its sortof a ghostly mandelbrot.\nNumber of julias = Approximately Screen Width * Height * 3.14159... Optionally multiply by Seconds and FPS.","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["fractal","julia","mandelbrot"],"hasliked":0,"parentid":"MfSXDG","parentname":"The Julia Library"},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec4 fractal = texture(iChannel0, fragCoord / iResolution.xy);\n    \n    fragColor = vec4(vec3(pow(sqrt(fractal.x * 20.0) / 2.0, 2.0)) * vec3(0.4, 1.0, 1.3), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec4 pr = texture(iChannel0, fragCoord / iResolution.xy);\n    float ct = pr.w; // grab current time from last frame\n    if (iResolution.xy != pr.xy)\n        ct = 0.0;\n    ct += 0.01;\n    fragColor = vec4(iResolution.xy, 0.0, ct);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec2 hash21(float p) {\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec3 sampler(vec2 z, vec2 c, float itr) {\n    float l = 0.0;\n    for (l = 0.0; l < itr; l += 1.0) {\n        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n        if(dot(z, z) > 65536.0) break;\n    }\n    l = l - log2(log2(dot(z,z))) + 4.0; // Comment this out to remove ghost edge\n    return vec3(l, z);\n}\n\nvec2 diskPt(vec2 p) {\n    return sqrt(p.x) * vec2(sin(6.2832*p.y), cos(6.2832*p.y));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    const float itr = 100.0;\n    float res = iResolution.y * 3.14159;\n\n    vec4 curres = texture(iChannel0, fragCoord / iResolution.xy);\n    vec4 pr = texture(iChannel1, fragCoord / iResolution.xy);\n    float ct = pr.w; // grab current time from last frame\n    if (curres.w < 0.1)\n        ct = 0.0;\n    vec2 uv = (((2. * fragCoord - iResolution.xy) / iResolution.y) + vec2(0.15, 0)) * 1.2;\n    uv.x -= 0.5;\n    \n    // Stuff\n    uv.y += 1.0 / res / 2.0;\n    uv += 1.0 / res * diskPt(hash21(mod(iTime, 1000.)));\n    vec2 puv = floor(uv * res) / res;    \n    // Comment Out these two lines and uncomment the normal scale to remove ghost edge... do the same in mandelbrot function\n    float ref = pow(clamp(-sqrt(sampler(vec2(0.0), puv, itr).x / 100.0) + 0.3, 0.0, 8.0) * 16.0, 4.0);\n    float scale = 2.0 + ref;\n    //float scale = 2.0;\n    vec2 muv = mod(uv, 1.0 / res) * res * scale - (scale / 2.0);\n    // End\n    \n    vec3 fr = sampler(muv, puv, itr);\n    fr.x /= itr;\n    if (dot(fr.yz, fr.yz) < 65536.0) fr.x = 0.0;\n    vec3 cfr = mix(fr, pr.xyz, .99);\n    cfr = mix(fr, cfr, clamp(ct, 0.0, 1.0));\n    \n    ct += 0.01;\n    fragColor = vec4(cfr, ct);\n}","name":"Buffer B","description":"","type":"buffer"}]}