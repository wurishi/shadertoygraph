{"ver":"0.1","info":{"id":"ddGBWw","date":"1698260176","viewed":34,"name":"Better Moving Blobs","username":"Cesium_137","description":"I implemented a less slow noise function which gains about 8-15 fps\nI decided to make a new version because the old one seems to have less seeds with a solid color and more variance","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["blobs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 col = texture(iChannel0, uv).xyz;\n    \n    fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5*(a-b)/k, 0., 1.);\n    return mix(a, b, h) - k*h*(1.0-h);\n}\n\nfloat f(float state){\n    state = mod(state,1000.);\n    return fract(0.051 * state * state);\n}\n\nfloat rng(float state, float seed){\n    return fract(1534.*f(14.*state+12.*seed));\n}\n\nvec2 rng2(float state, float seed){\n    return 2.*vec2(rng(state, seed), rng(state + .5, seed + .7))-1.;\n}\n\nvec3 rgb2hsv(float r, float g, float b){\n    float cmax = max(max(r, g), b);\n    float cmin = min(min(r, g), b);\n    float delta = cmax - cmin;\n    float hue;\n    float saturation;\n    float value;\n    \n    if(cmax == r){\n        hue = 60. * mod((g - b) / delta, 6.);\n    }\n    if(cmax == g){\n        hue = 60. * ((b - r) / delta + 2.);\n    }\n    if(cmax == b){\n        hue = 60. * ((r - g) / delta + 4.);\n    }\n    \n    \n    if(cmax == 0.){\n        saturation = 0.;\n    }\n    if(cmax != 0.){\n        saturation = delta / cmax;\n    }\n    \n    value = cmax;\n    \n    return vec3(hue, saturation, value);\n    \n}\n\n\nvec3 hsv2rgb(float hue, float saturation, float value){\n    \n    float C = value * saturation;\n    float X = C * (1. - abs( mod( hue / 60., 2. ) - 1.) );\n    float m = value - C;\n    \n    vec3 rgb;\n    \n    if(hue >= 0. && hue < 60.){rgb = vec3(C,X,0.);}\n    if(hue >= 60. && hue < 120.){rgb = vec3(X,C,0.);}\n    if(hue >= 120. && hue < 180.){rgb = vec3(0.,C,X);}\n    if(hue >= 180. && hue < 240.){rgb = vec3(0.,X,C);}\n    if(hue >= 240. && hue < 300.){rgb = vec3(X,0.,C);}\n    if(hue >= 300. && hue < 360.){rgb = vec3(C,0.,X);}\n    \n    rgb = vec3(rgb.x + m, rgb.y + m, rgb.z + m);\n    \n    return rgb;\n    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float dist = 2.;\n    float seed = floor(iDate.w/7.)*7.;\n    float time = iDate.w-seed;\n    vec3 col = vec3(0.);\n    vec2 uv = fragCoord / iResolution.y;\n    vec2 velocity = vec2(0.);\n    \n    for(int i = 0; i <= 400; i++){\n        velocity = 0.04*rng2(float(i),seed);\n        vec2 point = 1.2*vec2(rng(float(i)-.7,seed),rng(float(i)-.3,seed))-.1;\n        point += velocity * time;\n        point.x *= iResolution.x / iResolution.y;\n        \n        col += vec3(rng(0.8*float(i+4),seed),rng(0.5*float(i+1),seed),rng(0.74*float(i+2),seed)) * dist * dist;\n        dist = smin(dist,length(uv-point),.03);\n    }\n    col *= smoothstep(.13,-0.13,dist);\n    col = vec3(pow(col.x,.7),pow(col.y,.7),pow(col.z,.7));\n    \n    col = rgb2hsv(col.x, col.y, col.z);\n    col.y *= 5.;\n    col.z *= 0.5;\n    col = hsv2rgb(col.x, col.y, col.z);\n    \n    fragColor = vec4(col,1.);\n}","name":"Buffer A","description":"","type":"buffer"}]}