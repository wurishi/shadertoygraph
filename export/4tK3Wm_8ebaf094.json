{"ver":"0.1","info":{"id":"4tK3Wm","date":"1474990487","viewed":468,"name":"demosplash2016-cxw-02","username":"cxw","description":"Part 02: functions and some other useful things\nIntro to democoding using ShaderToy\nBy cxw/Incline - Demosplash 2016","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["tutorial","demoparty"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ^^^^ check out those shader inputs!\n\nprecision highp int;    //play it safe.  Also covers\nprecision highp float;  //vectors and matrices.\n\nvec4 do_color(in float time, in vec2 coords)\n{\n    vec4 retval;\n    retval.r = coords.x;\n    retval.g = coords.y;\n    retval.b = 0.5+0.5*sin(time);\n    retval.a = 1.0;\n    return retval;\n\n    // Exactly the same as the more concise:\n    //return vec4(coords,0.5+0.5*sin(time),1.0);\n\n    // Note: we just found out where the coordinate origin is!\n    // Debug with colors rather than printf().\n\n} //do_color\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = do_color(t, uv);\n    // Why should you use functions?  How about this:\n    //fragColor = do_color(t*15.0, uv);\n}\n\n// vi: set ts=4 sts=4 sw=4 et ai: //\n\n","name":"Image","description":"","type":"image"}]}