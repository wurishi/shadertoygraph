{"ver":"0.1","info":{"id":"ldlBRf","date":"1497355381","viewed":106,"name":"CellNoise","username":"EugenBr","description":"Cellular noise with no texture sampling","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int Seed = 0;\nconst int GridSize = 5;\nconst int MaxIndex = GridSize - 1;\nconst float NormUInt16 = 0.00001526;\n\nint coordHash(ivec2 block)\n{\n\tint result = Seed;\n    result += block.x;\n    result += (result << 10);\n    result ^= (result >> 6 );\n    result += block.y;\n    result += (result << 10);\n    result ^= (result >> 6 );\n    return result;\n}\n\nint nextRandom(int prev)\n{\n\treturn (((prev * 1103515245 + 12345) % 2147483647) & 0x7fffffff) % 65536;\n}\n\nfloat fpNearest(ivec2 block, vec2 offset)\n{\n    int seed = coordHash(block) ^ Seed;\n    \n    int x_int = nextRandom(seed);\n    int y_int = nextRandom(x_int);\n    vec2 featurePoint = vec2(float(x_int), float(y_int)) * NormUInt16;\n    float result = length(featurePoint - offset);\n    \n    x_int = nextRandom(y_int);\n    y_int = nextRandom(x_int);\n    featurePoint = vec2(float(x_int), float(y_int)) * NormUInt16;\n    result = min(result, length(featurePoint - offset));\n\t\n    return clamp(result, 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy /*+ vec2(-fract(iTime * 0.1), 0.0)*/;\n    \n    vec2 gridCoord = uv * float(GridSize);\n    ivec2 block = ivec2(floor(gridCoord));\n    vec2 blockOffset = fract(gridCoord);\n    float noiseValue = fpNearest(block, blockOffset);\n    \n    ivec4 nblock = ivec4(\n        (block.x == 0) ? MaxIndex : block.x - 1,\n    \t(block.x == MaxIndex) ? 0 : block.x + 1,\n        (block.y == 0) ? MaxIndex : block.y - 1,\n    \t(block.y == MaxIndex) ? 0 : block.y + 1\n    );\n    vec4 offs = blockOffset.xxyy + vec4(1.0, -1.0, 1.0, -1.0);\n    \n\n    noiseValue = min(noiseValue, fpNearest(ivec2(block.x, nblock.w), vec2(blockOffset.x, offs.w)));\n    noiseValue = min(noiseValue, fpNearest(ivec2(block.x, nblock.z), vec2(blockOffset.x, offs.z)));\n    noiseValue = min(noiseValue, fpNearest(ivec2(nblock.y, block.y), vec2(offs.y, blockOffset.y)));\n    noiseValue = min(noiseValue, fpNearest(ivec2(nblock.x, block.y), vec2(offs.x, blockOffset.y)));\n    noiseValue = min(noiseValue, fpNearest(nblock.yw, vec2(offs.y, offs.w)));\n    noiseValue = min(noiseValue, fpNearest(nblock.yz, vec2(offs.y, offs.z)));\n    noiseValue = min(noiseValue, fpNearest(nblock.xw, vec2(offs.x, offs.w)));\n    noiseValue = min(noiseValue, fpNearest(nblock.xz, vec2(offs.x, offs.z)));\n    \n    noiseValue = clamp(noiseValue, 0.0, 1.0);\n    vec3 c1 = (1.0 - noiseValue) * vec3(1.0, 0.0, 0.0);\n    vec3 c2 = noiseValue * vec3(1.0, 1.0, 0.0);\n    fragColor = vec4(c1 + c2, 1.0);\n}","name":"Image","description":"","type":"image"}]}