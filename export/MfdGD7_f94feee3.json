{"ver":"0.1","info":{"id":"MfdGD7","date":"1711808933","viewed":18,"name":"TP1_BAH_Mamadou12201052","username":"bahMamadou","description":"rendue du tp1","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["tpnote1"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modeling - 2023.02.06\n// Eric Galin\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(vec2 m,vec2 p,out vec3 ro,out vec3 rd)\n{\n  float a=3.*3.14*m.x;\n  float le=3.5;\n  \n  // Origin\n  /*ro=vec3(20.,70.,40.);\n  ro*=Rz(a);*/\n  ro=vec3(75.,10.,20);\n  ro*=Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(0.,0.,1.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  rd=normalize(p.x*u+p.y*v+le*w);\n}\n\n// Primitives\n\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\nfloat Sphere(vec3 p,vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n\n// Fonction : Plan\n// Description : Calcul de la distance signée d'un point à un plan défini par son centre et sa normale.\n// Paramètres :\n//   - p : point dont on veut calculer la distance au plan\n//   - c : centre du plan\n//   - normal : vecteur normal au plan\n// Retourne : la distance signée du point au plan\nfloat Plan(vec3 p, vec3 c, vec3 normal) {\n    return dot(p - c, normal); \n}\n\n\n// Fonction : Cercle\n// Description : Calcul de la distance d'un point à un cercle dans le plan défini par une normale.\n// Paramètres :\n//   - p : point dont on veut calculer la distance au cercle\n//   - c : centre du cercle\n//   - normal : vecteur normal au plan du cercle\n//   - r : rayon du cercle\n// Retourne : la distance du point au cercle\nfloat Cercle(vec3 p, vec3 c, vec3 normal, float r) {\n    float h = dot((p - c), normal);      // Calcul de la hauteur du point par rapport au cercle\n    float l = sqrt(length(p - c) * length(p - c) - (h * h));  // Calcul de la longueur entre le point et le cercle\n    float m = l - r; // On retranche le rayon\n    float d = sqrt((h * h) + (m * m)); // Distance entre le point et le cercle\n    return d;\n}\n\n\n// Fonction : Tore\n// Description : Calcul de la distance d'un point à un tore en 3D.\n// Paramètres :\n//   - p : point dont on veut calculer la distance au tore\n//   - c : centre du tore\n//   - normal : vecteur normal au plan du tore\n//   - R : grand rayon du tore\n//   - r : petit rayon du tore\n// Retourne : la distance du point au tore\nfloat Tore(vec3 p, vec3 c, vec3 normal, float R, float r) {\n    return Cercle(p, c, normal, R) - r; // On retranche r pour retirer la partie pleine du cercle\n}\n\n\n// Fonction : Segment\n// Description : Calcul de la distance d'un point à un segment de droite en 3D.\n// Paramètres :\n//   - p : point dont on veut calculer la distance au segment\n//   - a : extrémité du segment\n//   - b : autre extrémité du segment\n// Retourne : la distance du point au segment\nfloat Segment(vec3 p, vec3 a, vec3 b) {\n    vec3 u = (b - a) / length(b - a);\n    float d;\n    float l;\n    if (dot((p - a), u) < 0.) {\n        d = length(p - a);\n    } else if (dot(p - b, u) > 0.) {\n        d = length(p - b);\n    } else {\n        l = dot((p - a), u);\n        d = sqrt(length(p - a) * length(p - a) - (l * l));\n    }\n    return d;\n}\n\n\n// Fonction : Capsule\n// Description : Calcul de la distance d'un point à une capsule en 3D.\n// Paramètres :\n//   - p : point dont on veut calculer la distance à la capsule\n//   - a : extrémité de la capsule\n//   - b : autre extrémité de la capsule\n//   - r : rayon de la capsule\n// Retourne : la distance du point à la capsule\nfloat Capsule(vec3 p, vec3 a, vec3 b, float r) {\n    return Segment(p, a, b) - r;\n}\n\n\n\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n  return min(a,b);\n}\n\nfloat InterSection(float a,float b)\n{\n    return max(a,b);\n}\n\n\nfloat Difference(float a,float b)\n{\n    return max(a,-b);\n}\n\n\n\n// Fonction : Boxe\n// Description : Calcule le champ potentiel d'un objet boîte défini par plusieurs plans en intersection.\n// Paramètres :\n//   - p : point\n// Retourne : la distance du point à la boîte\nfloat Boxe(vec3 p) {\n    float p1 = Plan(p, vec3(0, 0, 0), vec3(0, 0, 1)); // Plan dessus\n    float p2 = Plan(p, vec3(10, 0, 0), vec3(1, 0, 0)); // Plan gauche\n    float p3 = Plan(p, vec3(-10, 0, 0), vec3(-1, 0, 0)); // Plan droite\n    float p4 = Plan(p, vec3(0, 10, 0), vec3(0, 1, 0)); // Plan devant \n    float p5 = Plan(p, vec3(0, -10, 0), vec3(0, -1, 0)); // Plan derrière\n    float p6 = Plan(p, vec3(0, 0, -10), vec3(0, 0, -1)); // Plan dessous\n    float boxRes = InterSection(p1, InterSection(p2, InterSection(p3, InterSection(p4, InterSection(p5, p6)))));\n    return boxRes;\n}\n\n// Fonction : Cylindre\n// Description : Crée un cylindre à partir d'une capsule.\n// Paramètres :\n//   - p : point\n//   - a : extrémité du cylindre\n//   - b : autre extrémité du cylindre\n//   - r : rayon du cylindre\n// Retourne : la distance du point au cylindre\nfloat Cylindre(vec3 p, vec3 a, vec3 b, float r) {\n    float Cap = Capsule(p, a, b, r);\n    float Plan1 = Plan(p, a, normalize(a - b)); // Plan pour couper l'extrémité a orienté a-b\n    float Plan2 = Plan(p, b, normalize(b - a)); // Plan pour couper l'extrémité b orienté b-a\n    float res = InterSection(InterSection(Cap, Plan2), Plan1);\n    return res;\n}\n\n\n\n// a : Un angle\n// Faire une rotation matricielle autour de z\n\nmat3 rz (float a)\n{\n    float sa=sin(a);\n    float ca=cos(a);\n    return mat3 (ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\n// Faire une rotation matricielle autour de x\n\nmat3 rx(float a)\n{\n    float sa=sin(a);\n    float ca=cos(a);\n    return mat3(1.,0.,0.,0.,ca,-sa,0.,sa,ca);\n}\n\n\n// Faire une rotation matricielle autour de y\n\nmat3 ry(float a)\n{\n    float sa=sin(a);\n    float ca=cos(a);\n    return mat3(ca,0.,sa,0.,1.,0.,-sa,0.,ca);\n}\n\n\n//ROTATION X\n\nvec3 RotationX (vec3 p, float angle)\n{\n    return p*rx(radians(angle));\n}\n\n\n//ROTATION Y\n\nvec3 RotationY (vec3 p, float angle)\n{\n    return p*ry(radians(angle));\n}\n\n\n//ROTATION z\n\nvec3 RotationZ (vec3 p, float angle)\n{\n    return p*ry(radians(angle));\n}\n\n// Fonction : Blend\n// Description : Applique un mélange entre deux valeurs en fonction d'un rayon de mélange.\n// Paramètres :\n//   - val1 : première valeur\n//   - val2 : deuxième valeur\n//   - r : rayon de mélange\n// Retourne : le résultat du mélange entre val1 et val2\nfloat Blend(float val1, float val2, float r) {\n    float h = max(r - abs(val1 - val2), 0.) / r;\n    float resultat = (1. / 6.) * r * (h * h * h);\n    return Union(val1, val2) - resultat;\n}\n\n\n\n//Forme Complexe\n\n//Boule creux\n// Fonction : Bole\n// Description : Crée un bol creux en soustrayant un intérieur d'une sphère à l'extérieur d'une autre sphère.\n// Paramètres :\n//   - p : point\n// Retourne : la distance du point au bol\nfloat Bole(vec3 p) {\n    float s = Sphere(p, vec3(0, 0, 23), 8.);\n    float p1 = Plan(p, vec3(0, 0, 23), vec3(0, 0, 1));\n    float s1 = Sphere(p, vec3(0, 0, 23), 7.5);\n    float p2 = Plan(p, vec3(0, 0, 23), vec3(0, 0, 1));\n    float inter = InterSection(s1, p2);\n    float ext = InterSection(s, p1);\n    float bol = Difference(ext, inter);\n    return bol;\n}\n\n// Fonction : Glace\n// Description : Crée un modèle de verre de glace \n// Paramètres :\n//   - p : point\n// Retourne : la distance du point à la glace\nfloat Glace(vec3 p) {\n    float piedDuVerre = Capsule(p, vec3(0, 0, 0), vec3(0, 0, 15), 0.8);\n    float cylindre = Cylindre(p, vec3(0, 0, 0), vec3(0, 0, 1), 10.);\n    float pied = Blend(piedDuVerre, cylindre, 10.); // Pied du verre de la glace\n    float bole = Bole(p);\n    float glace = Blend(pied, bole, 4.5); // Mélange du pied et du bol\n   \n    return glace;\n}\n\n\n// Fonction : Atome\n// Description : Crée un modèle d'atome en combinant des sphères et des tores pour représenter les orbites des électrons.\n// Paramètres :\n//   - p : point\n// Retourne : la distance du point à l'atome\nfloat Atome(vec3 p) {\n    // Calcul des tores pour les différentes orbites de l'atome\n    float T1 = Tore(p, vec3(0., 0., 0.), normalize(vec3(0, 1, -1)), 15., 0.3);\n    float T2 = Tore(p, vec3(0., 0., 0.), normalize(vec3(0, 1, 1)), 15., 0.3);\n    float T3 = Tore(p, vec3(0., 0., 0.), normalize(vec3(0, 0, 1)), 15., 0.3);\n    \n    // Calcul des sphères pour le noyau et les électrons\n    float v = Union(\n        Union(Sphere(p, vec3(0., 0., 2.), 2.25), Sphere(p, vec3(-2., 0., -1.), 2.25)),\n        Sphere(p, vec3(2., 0., -1.), 2.25)\n    );\n    float Electron1 = Sphere(p, vec3(13., 5., 5.), 1.25);\n    float Electron2 = Sphere(p, vec3(-13., -5., 5.), 1.25);\n    float Electron3 = Sphere(p, vec3(11., -10., 0.), 1.25);\n    float Electron4 = Sphere(p, vec3(-11., 10., 0.), 1.25);\n    \n    // Union de tous les éléments pour former l'atome\n    float T = Union(T1, Union(T2, Union(v, T3)));\n    float atom = Union(T, Union(Electron1, Union(Electron2, Union(Electron3, Electron4))));\n    \n    return atom;\n}\n\n\n\n// Fonction : Colonne\n// Description : Crée une colonne en empilant des cylindres les uns sur les autres.\n// Paramètres :\n//   - p : point\n// Retourne : la distance du point à la colonne\nfloat Colonne(vec3 p) {\n    float height = 0.;\n    float radius = 4.; // Rayon de base de la colonne\n    float result = 1000.; // Valeur arbitrairement grande pour initialiser le résultat\n    for (int i = 0; i < 5; ++i) {\n        float cyl = Cylindre(p, vec3(0., 0., height), vec3(0., 0., height + 5.), radius);\n        result = Union(result, cyl);\n        height += 6.; // Hauteur de chaque cylindre\n        radius -= 0.5; // Réduction du rayon pour simuler le rétrécissement vers le haut\n    }\n    return result;\n}\n\n// Fonction : Escalier\n// Description : Crée un escalier en empilant des boîtes les unes sur les autres.\n// Paramètres :\n//   - p : point\n// Retourne : la distance du point à l'escalier\nfloat Escalier(vec3 p) {\n    float height = 0.;\n    float width = 10.; // Largeur de la première boîte\n    float depth = 10.; // Profondeur de la première boîte\n    float result = 1000.; // Valeur arbitrairement grande pour initialiser le résultat\n    for (int i = 0; i < 5; ++i) {\n        float box = Boxe(p - vec3(0., 0., height)); // Soustraire la hauteur pour empiler\n        result = Union(result, box);\n        height += 5.; // Hauteur de chaque boîte\n        width -= 1.; // Réduction de la largeur\n        depth -= 1.; // Réduction de la profondeur\n    }\n    return result;\n}\n\n// Fonction : Monument\n// Description : Crée un monument avec des colonnes, des plateformes et des escaliers.\n// Paramètres :\n//   - p : point\n// Retourne : la distance du point au monument\nfloat Monument(vec3 p) {\n    float platform = Boxe(p - vec3(0., 0., 25.)); // Plateforme à la base\n    float column1 = Colonne(p + vec3(-20., -20., 0.)); // Colonne 1\n    float column2 = Colonne(p + vec3(20., -20., 0.)); // Colonne 2\n    float stairs = Escalier(p + vec3(0., -40., 0.)); // Escalier\n    float result = Union(Union(platform, column1), Union(column2, stairs));\n    return result;\n}\n//Fin\n\nfloat object(vec3 p)\n{\n  \n /* float v=Union(\n    Union(Sphere(p,vec3(0.,2.,2.),2.25),\n    Sphere(p,vec3(3.,0.,-1.),3.)),\n    Sphere(p,vec3(3.,0.,5.),3.75)\n  );*/\n\n  \n  float v=Sphere(p,vec3(0.,2.,-1),2.25);\n  float C=Cercle(p,vec3(0.,2.,-1),vec3 (0,1,0),10.);\n  \n  //Forme Complexe\n  float B=Boxe(p);;\n  float A=Atome(p);\n  float G=Glace(p);\n  float M=Monument(p);\n  float E=Escalier(p);\n  float Co=Colonne(p);\n  return Co;\n  \n\n}  \n\n\n// Analysis of the scalar field\n\nconst int Steps=200;// Number of steps\nconst float Epsilon=.01;// Marching epsilon\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  float v=object(p);\n  n.x=object(vec3(p.x+eps,p.y,p.z))-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z))-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps))-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o,vec3 u,float e,out bool h,out int s)\n{\n  h=false;\n  \n  // Start at the origin\n  float t=0.;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=o+t*u;\n    float v=object(p);\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Lighting\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),d.z*.5+.5);\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n  bool h;\n  int s;\n  float t=SphereTrace(p+Epsilon*n,l,200.,h,s);\n  if(!h)\n  {\n    return 1.;\n  }\n  return 0.;\n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p,vec3 n,vec3 e)\n{\n  // Point light\n  const vec3 lp=vec3(5.,10.,25.);\n  \n  // Light direction to point light\n  vec3 l=normalize(lp-p);\n  \n  // Ambient color\n  vec3 ambient=.25+.25*background(n);\n  \n  // Shadow computation\n  float shadow=Shadow(p,n,l);\n  \n  // Phong diffuse\n  vec3 diffuse=.35*clamp(dot(n,l),0.,1.)*vec3(1.,1.,1.);\n  \n  // Specular\n  vec3 r=reflect(e,n);\n  vec3 specular=.15*pow(clamp(dot(r,l),0.,1.),35.)*vec3(1.,1.,1.);\n  vec3 c=ambient+shadow*(diffuse+specular);\n  return c;\n}\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n  float t=float(n)/(float(Steps-1));\n  return.5+mix(vec3(.05,.05,.5),vec3(.65,.39,.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel,out bool pip)\n{\n  // Pixel coordinates\n  vec2 p=(-iResolution.xy+2.*pixel)/iResolution.y;\n  if(pip==true)\n  {\n    const float fraction=1./4.;\n    // Recompute pixel coordinates in sub-picture\n    if((pixel.x<iResolution.x*fraction)&&(pixel.y<iResolution.y*fraction))\n    {\n      p=(-iResolution.xy*fraction+2.*pixel)/(iResolution.y*fraction);\n      pip=true;\n    }\n    else\n    {\n      pip=false;\n    }\n  }\n  return p;\n}\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)\n{\n  // Picture in picture on\n  bool pip=true;\n  \n  // Pixel\n  vec2 pixel=Pip(pxy,pip);\n  \n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n  \n  // Camera\n  vec3 ro,rd;\n  Ray(m,pixel,ro,rd);\n  \n  // Trace ray\n  \n  // Hit and number of steps\n  bool hit;\n  int s;\n  \n  float t=SphereTrace(ro,rd,200.,hit,s);\n  \n  // Shade background\n  vec3 rgb=background(rd);\n  \n  if(hit)\n  {\n    // Position\n    vec3 p=ro+t*rd;\n    \n    // Compute normal\n    vec3 n=ObjectNormal(p);\n    \n    // Shade object with light\n    rgb=Shade(p,n,rd);\n  }\n  \n  // Uncomment this line to shade image with false colors representing the number of steps\n  if(pip==true)\n  {\n    rgb=ShadeSteps(s);\n  }\n  \n  color=vec4(rgb,1.);\n}\n\n","name":"Image","description":"","type":"image"}]}