{"ver":"0.1","info":{"id":"Wt3XRH","date":"1580348058","viewed":224,"name":"Dynamic Delaunay 3","username":"rory618","description":"Drawing the 3rd order voronoi diagram of a Delaunay triangulation of dynamic particles. Mouse to interact.","likes":15,"published":1,"flags":32,"usePreview":0,"tags":["2d","voronoi","particles","tracking","triangulation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":2,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    O = texture(iChannel3,I/R.xy);\n    \n\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec4 A(int i){\n    return texture(iChannel0, (vec2((i-1)%int(R.x),(i-1)/int(R.x))+.5)/R.xy);\n}\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    O = texture(iChannel0, I/R.xy);\n    O.zw = mat2(O.zw,-O.w,O.z) * cos(3.14159 * vec2(0,.5) + .008*sin(iTime+I.x/10.));\n    \n    O.xy = mod(O.xy,R.xy);\n    vec4 r = rand4(int(I.x) + int(I.y)*2048 + iFrame*2048*2048);\n    if(iFrame<3){\n        O.xy = I.xy*vec2(1,N);\n        O.zw =  .0025*cos(6.283*(vec2(0,.25)+r.z));\n        \n    }\n    \n    vec4 a = texture(iChannel1, (.5+floor(O.xy))/R.xy);\n    \n    vec2 ns = vec2(0);\n    vec2 df = vec2(0);\n    for(int i = 0; i < 4; i++){\n        vec4 n = A(cvt(a[i]));\n        ns += n.zw/4.;\n        vec2 D = mod( O.xy - n.xy + R.xy/2., R.xy ) - R.xy/2.;\n        if(length(D)>.005){\n        \tdf += normalize(D)*(1./(length(D)+.03));\n        }\n    }\n    O.zw+=df/25.;\n    O.zw = mix(O.zw,ns,.1);\n    if(length(O.zw)>.001)\n    \tO.zw = mix(O.zw,normalize(O.zw)/4.,.05);\n    O.zw += randn(r.xy)/1e2;\n    if(iMouse.z>0.){\n        vec2 D = O.xy-iMouse.xy;\n        O.zw += normalize(D)*(1./(length(D)+.03));\n    }\n    O.xy += O.zw;\n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec4 A(int i){\n    return texture(iChannel0, (vec2((i-1)%int(R.x),(i-1)/int(R.x))+.5)/R.xy);\n}\n\n\n\n\nvoid list_insert(inout ivec4 i, inout vec4 s, int i_, float s_){\n\tivec4 ri;\n    vec4 rs;\n    if(i_ == 0) return;\n    if(any(equal(ivec4(i_),i))) return;\n    if(s_<s[0]) {\n        i = ivec4(i_,i.xyz);\n        s = vec4(s_,s.xyz);\n    } else if(s_<s[1]) {\n        i = ivec4(i.x,i_,i.yz);\n        s = vec4(s.x,s_,s.yz);\n    } else if(s_<s[2]) {\n        i = ivec4(i.xy,i_,i.z);\n        s = vec4(s.xy,s_,s.z);\n    } else if(s_<s[3]) {\n        i = ivec4(i.xyz,i_);\n        s = vec4(s.xyz,s_);\n    }\n}\n\n\n\n\n\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    \n    int j = 1;//+(iFrame%5);j  *= j ;       //using a variable offset each frame prevents most fast moving particles from getting lost\n    \t\t\t\t\t\t\t\t\t\t//letting them get lost looks nicer here\n    \n    #define score(e) dot2(  mod(A(e).xy-I +R.xy/2.,R.xy)-R.xy/2. )\n    O = texture(iChannel1, I/R.xy);\n    vec4 a = texture(iChannel1, fract((I+vec2(j,0))/R.xy));\n    vec4 b = texture(iChannel1, fract((I+vec2(0,j))/R.xy));\n    vec4 c = texture(iChannel1, fract((I-vec2(j,0))/R.xy));\n    vec4 d = texture(iChannel1, fract((I-vec2(0,j))/R.xy));\n    ivec4 i = ivec4(0);\n    ivec4 i0 = ivec4(cvt(O.x),cvt(O.y),cvt(O.z),cvt(O.w));\n    ivec4 ia = ivec4(cvt(a.x),cvt(a.y),cvt(a.z),cvt(a.w));\n    ivec4 ib = ivec4(cvt(b.x),cvt(b.y),cvt(b.z),cvt(b.w));\n    ivec4 ic = ivec4(cvt(c.x),cvt(c.y),cvt(c.z),cvt(c.w));\n    ivec4 id = ivec4(cvt(d.x),cvt(d.y),cvt(d.z),cvt(d.w));\n    vec4 s = vec4(1e9);\n    vec4 s0 = vec4(score(i.x),score(i.y),score(i.z),score(i.w));\n    for(int k = 0; k < 4; k++){\n        list_insert(i, s, i0[k], score(i0[k]));\n        list_insert(i, s, ia[k], score(ia[k]));\n        list_insert(i, s, ib[k], score(ib[k]));\n        list_insert(i, s, ic[k], score(ic[k]));\n        list_insert(i, s, id[k], score(id[k]));\n    }\n    int r = IHash(int(I.x) + int(I.y)*2048 + iFrame*2048*2048);\n    int i_ = 1+r%(int(R.x)*int(R.y)/N);\t\t\t\t//Modify max number of particles here\n    list_insert(i, s, i_, score(i_));\n    O = vec4(cvt(i.x),cvt(i.y),cvt(i.z),cvt(i.w));\n    \n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define R iResolution\n#define N 50\nint IHash(int a){\n\ta = (a ^ 61) ^ (a >> 16);\n\ta = a + (a << 3);\n\ta = a ^ (a >> 4);\n\ta = a * 0x27d4eb2d;\n\ta = a ^ (a >> 15);\n\treturn a;\n}\n\nfloat Hash(int a){\n\treturn float(IHash(a)) / float(0x7FFFFFFF);\n}\nvec4 rand4(int seed){\n    return vec4(Hash(seed^0x34F85A93),\n                Hash(seed^0x85FB93D5),\n                Hash(seed^0x6253DF84),\n                Hash(seed^0x25FC3625));\n}\nvec3 rand3(int seed){\n    return vec3(Hash(seed^0x348CD593),\n                Hash(seed^0x8593FD5),\n                Hash(seed^0x62A5D384));\n}\nvec2 rand2(int seed){\n    return vec2(Hash(seed^0x348C5F93),\n                Hash(seed^0x8593D5BB));\n}\n\n\nvec2 randn(vec2 randuniform){\n    vec2 r = randuniform;\n    r.x = sqrt(-2.*log(1e-9+abs(r.x)));\n    r.y *= 6.28318;\n    r = r.x*vec2(cos(r.y),sin(r.y));\n    return r;\n}\n\nfloat dot2(vec2 x){\n    return dot(x,x);\n}\n\nint cvt(float x){\n    return int(x);\n    //return floatBitsToInt(x) ^ 0x8593D5BB ;\n}\n\nfloat cvt(int x){\n    return float(x);\n    //return intBitsToFloat(x ^ 0x8593D5BB);\n}\n\nvec2 circumscenter(vec2 ax, vec2 bx, vec2 cx, vec2 R){\n    \n    vec2 a = vec2(0.);\n    vec2 b = bx - ax;\n    vec2 c = cx - ax;\n    //b = mod(b+R.xy/2.,R.xy)-R.xy/2.;\n    //c = mod(c+R.xy/2.,R.xy)-R.xy/2.;\n    \n    vec3 X = vec3(a.x, b.x, c.x);\n    vec3 Y = vec3(a.y, b.y, c.y);\n    vec3 D = X*X+Y*Y;\n    float sx = determinant( mat3(D,Y,vec3(1)))/2.;\n    float sy = determinant( mat3(X,D,vec3(1)))/2.;\n    \n    return ax+vec2(sx,sy)/determinant( mat3(X,Y,vec3(1)));\n}\n\n\n//IQ sdTriangle \nfloat sdTriangle( in vec2 px, in vec2 p0x, in vec2 p1x, in vec2 p2x, in vec2 R )\n{\n    vec2 p = vec2(0);\n    vec2 p0 = p0x - px;\n    vec2 p1 = p1x - px;\n    vec2 p2 = p2x - px;\n    \n    //p0 = mod(p0+R.xy/2.,R.xy)-R.xy/2.;\n    //p1 = mod(p1+R.xy/2.,R.xy)-R.xy/2.;\n    //p2 = mod(p2+R.xy/2.,R.xy)-R.xy/2.;\n    if(p0==p1 || p1==p2 || p2==p0) return 1e9;\n    \n    vec2 e0 = p1-p0, e1 = p2-p1, e2 = p0-p2;\n    vec2 v0 = p -p0, v1 = p -p1, v2 = p -p2;\n\n    vec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\n    vec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\n    vec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\n    \n    float s = sign( e0.x*e2.y - e0.y*e2.x );\n    vec2 d = min(min(vec2(dot(pq0,pq0), s*(v0.x*e0.y-v0.y*e0.x)),\n                     vec2(dot(pq1,pq1), s*(v1.x*e1.y-v1.y*e1.x))),\n                     vec2(dot(pq2,pq2), s*(v2.x*e2.y-v2.y*e2.x)));\n\n    return -sqrt(d.x)*sign(d.y);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":2,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"vec4 A(int i){\n    return texture(iChannel0, (vec2((i-1)%int(R.x),(i-1)/int(R.x))+.5)/R.xy);\n}\nvec4 B(int i){\n    return texture(iChannel1, (vec2((i-1)%int(R.x),(i-1)/int(R.x))+.5)/R.xy);\n}\n\nbool sameCollection(vec3 a, vec3 b){\n    return any(equal(a.xyz,vec3(b.x))) && \n           any(equal(a.xyz,vec3(b.y))) && \n           any(equal(a.xyz,vec3(b.z)));\n}\n\nvoid list_insert(inout ivec4 i, inout vec4 s, int i_, float s_){\n\tivec4 ri;\n    vec4 rs;\n    if(i_ == 0) return;\n    \n    if(any(equal(ivec4(i_),i))) return;\n    vec3 tri = B(i_).xyz;\n    if( sameCollection(B(i[0] ).xyz,tri) ||\n        sameCollection(B(i[1] ).xyz,tri) ||\n        sameCollection(B(i[2] ).xyz,tri) ||\n        sameCollection(B(i[3] ).xyz,tri) ) return;\n    \n    if(s_<s[0]) {\n        i = ivec4(i_,i.xyz);\n        s = vec4(s_,s.xyz);\n    } else if(s_<s[1]) {\n        i = ivec4(i.x,i_,i.yz);\n        s = vec4(s.x,s_,s.yz);\n    } else if(s_<s[2]) {\n        i = ivec4(i.xy,i_,i.z);\n        s = vec4(s.xy,s_,s.z);\n    } else if(s_<s[3]) {\n        i = ivec4(i.xyz,i_);\n        s = vec4(s.xyz,s_);\n    }\n}\n\nfloat score(int e, vec2 I){\n    vec4 t = B(e);\n    vec2 a = A(cvt(t.x)).xy;\n    vec2 b = A(cvt(t.y)).xy;\n    vec2 c = A(cvt(t.z)).xy;\n    vec2 cc = circumscenter(a,b,c,R.xy);\n    vec4 v = texture(iChannel1,cc/R.xy);\n    if(!sameCollection(v.xyz,t.xyz) ){\n          \n        return 1e9;\n    }\n    \n    return sdTriangle(I,a, b, c,R.xy);\n}\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    \n    int j = 1;//+(iFrame%5);j  *= j ;       //using a variable offset each frame prevents most fast moving particles from getting lost\n    \t\t\t\t\t\t\t\t\t\t//letting them get lost looks nicer here\n    \n  //  #define score(e) dot2(  mod(A(e).xy-I +R.xy/2.,R.xy)-R.xy/2. )\n    O = texture(iChannel2, I/R.xy);\n    vec4 a = texture(iChannel2, fract((I+vec2(j,0))/R.xy));\n    vec4 b = texture(iChannel2, fract((I+vec2(0,j))/R.xy));\n    vec4 c = texture(iChannel2, fract((I-vec2(j,0))/R.xy));\n    vec4 d = texture(iChannel2, fract((I-vec2(0,j))/R.xy));\n    ivec4 i = ivec4(0);\n    ivec4 i0 = ivec4(cvt(O.x),cvt(O.y),cvt(O.z),cvt(O.w));\n    ivec4 ia = ivec4(cvt(a.x),cvt(a.y),cvt(a.z),cvt(a.w));\n    ivec4 ib = ivec4(cvt(b.x),cvt(b.y),cvt(b.z),cvt(b.w));\n    ivec4 ic = ivec4(cvt(c.x),cvt(c.y),cvt(c.z),cvt(c.w));\n    ivec4 id = ivec4(cvt(d.x),cvt(d.y),cvt(d.z),cvt(d.w));\n    vec4 s = vec4(1e9);\n    vec4 s0 = vec4(score(i.x,I),score(i.y,I),score(i.z,I),score(i.w,I));\n    for(int k = 0; k < 4; k++){\n        list_insert(i, s, i0[k], score(i0[k],I));\n        list_insert(i, s, ia[k], score(ia[k],I));\n        list_insert(i, s, ib[k], score(ib[k],I));\n        list_insert(i, s, ic[k], score(ic[k],I));\n        list_insert(i, s, id[k], score(id[k],I));\n    }\n    int r = IHash(int(I.x) + int(I.y)*2048 + iFrame*2048*2048);\n    int i_ = 1+r%(int(R.x)*int(R.y));\t\t\t\n    list_insert(i, s, i_, score(i_,I));\n    i_ = 1+int(I.x) + int(I.y)*int(R.x);\t\t\t\t\n    list_insert(i, s, i_, score(i_,I));\n    O = vec4(cvt(i.x),cvt(i.y),cvt(i.z),cvt(i.w));\n    \n}","name":"Buffer D","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":2,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"vec4 B(int i){\n    return texture(iChannel1, (vec2((i-1)%int(R.x),(i-1)/int(R.x))+.5)/R.xy);\n}\n\nbool keyIsDown( float key ) {\n    return texture( iChannel3, vec2(key,0.75) ).x > .5;\n}\n\nvec4 A(int i){\n    return texture(iChannel0, (vec2((i-1)%int(R.x),(i-1)/int(R.x))+.5)/R.xy);\n}\n\nvoid vline(inout float d, vec2 a, vec2 b, vec2 I){\n    vec2 Ip = I-a;\n    vec2 bp = b-a;\n    bp = mod(bp + R.xy/2.,R.xy)-R.xy/2.;\n    Ip = mod(Ip + R.xy/2.,R.xy)-R.xy/2.;\n    \n    vec2 mp = bp/2.;\n    vec2 norm = normalize(bp);\n    float dist = abs(dot(norm,Ip-mp));\n    d = min(d,dist);\n}\n\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    O = vec4(0);\n    vec4 t2 = texture(iChannel3, I/R.xy);\n    t2 = B(cvt(t2.x));\n    vec4 t = texture(iChannel1, I/R.xy);\n    vec4 t0 = texture(iChannel2, I/R.xy);\n    vec4 a = A(cvt(t.x));\n    vec4 b = A(cvt(t.y));\n    vec4 c = A(cvt(t.z));\n    vec4 d = A(cvt(t.w));\n    \n    vec4 tri = B(cvt(t0.z));\n    \n    vec4 a0 = A(cvt(tri.x));\n    vec4 b0 = A(cvt(tri.y));\n    vec4 c0 = A(cvt(tri.z));\n    vec4 d0 = A(cvt(tri.w));\n    \n    vec2 va = (a0.zw+b0.zw+c0.zw+d0.zw)/4.;\n    \n    float z = 1e7;\n    \n    \n    float cd0 = abs(sdTriangle(I,a0.xy, b0.xy, c0.xy,R.xy));\n    z = max(0., cd0);\n    \n    \n    \n    //vline(z,a.xy,b.xy,I);\n    //vline(z,b.xy,c.xy,I);\n    //vline(z,c.xy,d.xy,I);\n    \n    /*vec4 tt = t0;\n    O.x = min(tt.x,min(tt.y,tt.z));\n    if(floor(tt.x+.5)==floor(O.x+.5)) O.yz = vec2(min(tt.y,tt.z), max(tt.y,tt.z));\n    if(floor(tt.y+.5)==floor(O.x+.5)) O.yz = vec2(min(tt.z,tt.x), max(tt.z,tt.x));\n    if(floor(tt.z+.5)==floor(O.x+.5)) O.yz = vec2(min(tt.x,tt.y), max(tt.x,tt.y));\n    O /= R.x*R.y/30.;*/\n    // tri = B(cvt(t0.z));\n    \n    /*O.x = min(tri.x,min(tri.y,tri.z));\n    if(floor(tri.x+.5)==floor(O.x+.5)) O.yz = vec2(min(tri.y,tri.z), max(tri.y,tri.z));\n    if(floor(tri.y+.5)==floor(O.x+.5)) O.yz = vec2(min(tri.z,tri.x), max(tri.z,tri.x));\n    if(floor(tri.z+.5)==floor(O.x+.5)) O.yz = vec2(min(tri.x,tri.y), max(tri.x,tri.y));\n    \n    O.z = O.z - O.y;\n    O.y = O.y - O.x;*/\n    O = tri;\n    \n    \n    O/= R.x*R.y/float(N);\n    O = .5+.5*cos(vec4(4.5,4.35,6.5,0)*O+4. );\n    \n    \n    //O = min(O.zyxw,vec4(z));\n    O = min(vec4(1),O.zyxw);\n    O = mix(O, texture(iChannel3,(I-va/4.)/R.xy),.9);\n    \n\n}","name":"Buffer C","description":"","type":"buffer"}]}