{"ver":"0.1","info":{"id":"DddfRl","date":"1697537287","viewed":56,"name":"Poincare 3 infinity","username":"Crystalize","description":"Poincare disc model fun! :D","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["poincarediscmodel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define P 4.\n#define Q 5.\n\n#define iters 100\n\n#define TWOPI 6.2831853\n#define PI 3.1415926\n#define S23 0.2679491\n#define R vec2(1,0)\n\nvec2 cmul(vec2 z, vec2 c) {\n    return vec2(z.x * c.x - z.y * c.y, z.x * c.y + z.y * c.x);\n}\n\nvec2 cdiv(vec2 z, vec2 c) {\n    float r = dot(c, c);\n    return vec2(z.x * c.x + z.y * c.y, z.y * c.x - z.x * c.y) / r;\n}\n\nvec2 conj(vec2 z) {\n    return vec2(z.x, -z.y);\n}\n\nvec2 hypershift(vec2 z, vec2 s) {\n    return cdiv(z + s, cmul(z,conj(s))+vec2(1.0,0.0));\n}\n\nvec2 cpow(vec2 z, vec2 p) {\n    float a = atan(z.y, z.x);\n    float lnr = 0.5 * log(dot(z,z));\n    float m = exp(p.x * lnr - p.y * a);\n    float angle = p.x * a + p.y * lnr;\n    return vec2(cos(angle), sin(angle)) * m;\n}\n\nvec2 cabs(vec2 z, vec2 p) {\n    return cpow(cpow(z,p), cdiv(R,p));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 u = 2.0 * (fragCoord.xy - 0.5*iResolution.xy) / -iResolution.y;\n    float r = PI/3.;\n    vec3 c = vec3(1);\n    float t = iTime * 0.25;\n    u = hypershift(u,R*0.4);\n    u = cmul(u,vec2(cos(t),sin(t)));\n    \n    for(int i = 0; i < 10; i++) {\n    \n    u = hypershift(u,-R*S23);\n    c -= u.x<0.?0.:0.05;\n    u.x = abs(u.x);\n    u = hypershift(-u,R*S23);\n    u = cmul(-u,vec2(cos(r),sin(r)));\n    u = hypershift(u,-R*S23);\n    c -= u.x<0.?0.:0.1;\n    u.x = abs(u.x);\n    u = hypershift(-u,R*S23);\n    }\n    u /= -S23;\n    u = -cabs(u,3.*R);\n    u = hypershift(u,R*S23);\n    vec3 col = u.x < 0. && u.y > -1. && u.y < 1. ? c : dot(u,u)>1.?vec3(0,0,0.2):vec3(0,0,0.6);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}