{"ver":"0.1","info":{"id":"XtjyzR","date":"1507266798","viewed":170,"name":"Revealing Glass","username":"Lunck","description":"Applies a parametric blur kernel to foreground, and other kernels to the hidden image. A re-sizable \"reveal\" lens shows the hidden image, and by clicking the mouse it can be dragged around. ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","mouse","kernel","reveal","parametricblur"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*-----CHANGE TO INCREASE/DECREASE BLUR------- */\nconst float n = 5.0;\n\n\nconst float matN = 1.0/(n*n); //determines the intensity of the blur\nhighp int coordN = int(n/2.0 - 1.0); //determines the pixel scan length\nhighp int intN = int(n); //just converts n to an int\n\nmat3 blur = mat3\n(\n\tmatN, matN, matN,\n    matN, matN, matN,\n    matN, matN, matN    \n);\nmat3 sharpen = mat3\n(\n\t0, -3, 0,\n\t-3, 13, -3,\n\t0, -3, 0\n);\nmat3 outline = mat3\n(\n\t-3, -3, -3,\n\t-3, 24, -3,\n\t-3, -3, -3\n);\nmat3 emboss = mat3\n(\n\t-2, -1, 0,\n\t-1, 1, 1,\n\t0, 1, 2\n);\n\n\nvec3 texturePixSpace(int x, int y, in vec2 fragCoord, int channelNum, in sampler2D tex)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy * iChannelResolution[channelNum].xy;\n\tuv = (uv + vec2(x, y)) / iChannelResolution[channelNum].xy ;\n\treturn texture(tex, uv).xyz;\n}\n\nvec3 applyKernel(in vec2 fragCoord, mat3 kernel, int channelNum, in sampler2D tex)//PARAMETRIC BLUR or ANY OTHER EFFECT\n{\n\tvec3 sum = vec3 (0.0, 0.0, 0.0);\n    if (kernel == blur)//APPLIES BLUR\n    {\n\t\tfor(int i = 0; i < intN; i++)\n\t\t{\n\t\t\tfor(int j = 0; j < intN; j++)\n\t\t\t{\n\t\t\t\tsum += texturePixSpace(i-coordN, j-coordN, fragCoord, channelNum, tex) * kernel[i][j];\n\t\t\t}\n\t\t}\n\treturn sum;\n    }\n    else //APPLIES WHATEVER ELSE\n    {\n\t\tvec3 sum = vec3 (0.0, 0.0, 0.0);\n\t\tfor(int i = 0; i < 3; i++)\n\t\t{\n\t\t\tfor(int j = 0; j < 3; j++)\n\t\t\t{\n\t\t\t\tsum += texturePixSpace(i-1, j-1, fragCoord, channelNum, tex) * kernel[i][j];\n\t\t\t}\n\t\t}\n\t\treturn sum;                \n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n/*------CHANGE THE REVEAL RADIUS------*/\n    float radius = 0.1;\n/*------CHANGE THE KERNEL TYPE--------*/\n\tmat3 kernel = sharpen;    \n    //mat3 kernel = outline;\n    //mat3 kernel = emboss;\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n\tvec2 mouse = iMouse.xy/iResolution.xy ; //gets mouse click\n    mouse.x *= iResolution.x / iResolution.y; //normalizes mouse click position\n    \n    vec3 image;    \n    \n    if (length(mouse - uv) < radius)\n    \timage = applyKernel(fragCoord.xy, kernel, 1, iChannel1); //draws inside of reveal\n\telse\n\t\timage = applyKernel(fragCoord.xy, blur, 0, iChannel0); //drwas outside of reveal\n\n\t    \n    fragColor = vec4(image, 1.0);\n}","name":"Image","description":"","type":"image"}]}