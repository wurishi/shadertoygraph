{"ver":"0.1","info":{"id":"Mdy3Rt","date":"1455814427","viewed":252,"name":"Noise Pixelate","username":"daniel_slaney","description":"Pixelates a source image.","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["procedural","noise","pixelate"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":" \n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  { \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\nfloat dnoise(vec3 v)\n{\n    return snoise(v) > 0.0 ? 1.0 : 0.0;\n}\n\nfloat ddnoise(vec3 v, float f1, float f2)\n{\n    return snoise(v*f1)/f1 + snoise(v*f2)/f2;\n}\n\nfloat quantf(float x, float d)\n{\n    return floor(x * d) / d;\n}\n\nvec2 quantv2(vec2 v, float dx, float dy)\n{\n    return vec2(quantf(v.x, dx), quantf(v.y, dy));\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\tvec2 quv = quantv2(fragCoord.xy / iResolution.xy, 48., 27.);\n    float qdst = distance(quv, vec2(0.5, 0.5)) * (0.5/0.70710678) + 0.5;\n    vec3 quvt = vec3(quv.x*5.0, quv.y*5.0, iTime / 2.);\n\t//fragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n    //fragColor = 0.5 * (1.0 + snoise(uv*mod(iTime, 30.0))) * vec4(1,1,1,1);\n    //fragColor = 0.5 * (1.0 + ddnoise(quvt, dst, 2.5, 5.0)) * vec4(1,1,1,1);\n    float n = 0.5 * (1.0 + ddnoise(quvt, 2.5, 5.0));\n    float p = n * qdst;\n    float s = abs(sin(iTime));\n    p = p > (0.2 + 0.5 * s) ? 1.0: 0.0;\n    fragColor = vec4(p, p, p, 1);\n    fragColor = vec4(n,n,n,1);\n    //fragColor = vec4(qdst, qdst, qdst, 1);\n \n    const vec2 yoff = vec2(1.618033988, -3.14159);\n    const vec2 zoff = vec2(2.71828, 0.123456789101112131415);\n    \n    float rx = rand(quv);\n    float ry = rand(quv + yoff);\n    float rz = rand(quv + zoff);\n    vec2 roff = 0.2 * (1.0-s) * n * (vec2(rx, ry) - 0.5);\n    \n    vec2 quvoff = quv + roff;\n    \n    vec4 s1 = texture(iChannel0, uv);\n    vec4 s2 = texture(iChannel0, uv + roff);\n    vec4 rc = vec4(1. + 0.05 * vec3(rx, ry, rz), 1);\n    fragColor = mix(s1, s2 * rc, p);\n    fragColor = mix(s1, s2, p);\n    //fragColor = rc;\n    //fragColor = vec4(rx, ry, rz, 1);\n}","name":"Image","description":"","type":"image"}]}