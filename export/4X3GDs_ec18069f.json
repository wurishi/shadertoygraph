{"ver":"0.1","info":{"id":"4X3GDs","date":"1717112535","viewed":33,"name":"bae #015 ~ Spectra","username":"BretHudson","description":"Pretty colors","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define rot2D(a) mat2(cos(a), sin(a), -sin(a), cos(a))\n#define PI 3.141592\n\n// kudos to https://www.shadertoy.com/view/XljGzV\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat hash(vec2 p)\n{\n    p = fract(p * vec2(123.345, 734.637));\n    p += dot(p, p + 45.32);\n    return fract(p.x * p.y);\n}\n\nfloat sdBox(vec3 p, vec3 b)\n{\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.)) + min(max(q.x, max(q.y, q.z)), 0.);\n}\n\nfloat drawShape(vec3 p)\n{\n    float d = length(p) - .3;\n    d = sdBox(p, vec3(.45));\n    return smoothstep(.01, .0, d);\n}\n\nfloat sin01(float t)\n{\n    return (sin(t) + 1.) * .5;\n}\n\nvec3 map(vec3 uv)\n{\n    vec3 p = vec3(uv.x, 0, uv.z);\n    \n    vec2 gv = fract(uv.xz) - .5;\n    vec2 id = floor(uv.xz);\n    \n    vec3 col = vec3(0);\n    \n    #if 0\n    col.rg = abs(id) * .3;\n    return col;\n    #endif\n    \n    for (int y = -1; y <= 1; ++y)\n    {\n        for (int x = -1; x <= 1; ++x)\n        {\n            vec2 offset = vec2(x, y);\n            float n = hash(id.xx + offset);\n            \n            vec3 c = 1.-hsv2rgb(vec3(fract(n * 87.78) + mod(id.y, 100.) / 20., .53, 1.));\n            \n            vec2 pos = vec2(n, fract(n * 73.9));\n            \n            pos = vec2(0.);\n            \n            n *= 50.;\n            n += iTime * .5;\n            float height = clamp(sin01(n * 4.) * .9 + .5, 0., 1.);\n            \n            vec2 _p = gv - offset - pos;\n            vec3 p3 = vec3(_p.x, 0, _p.y);\n            float d = drawShape(p3);\n            col += c * d * pow(height, 1. / 2.2);\n        }\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.x;\n\n    vec3 col = vec3(1);\n    \n    uv *= 4.;\n    uv.y += 20. + sin(iTime * .2) * 5.;\n    uv *= rot2D(sin(uv.x + uv.y) * .1);\n    uv *= rot2D(.3);\n    uv.x += iTime * 1.;\n    //uv.y += iTime * .5;\n    \n    col -= map(vec3(uv.x, 0, uv.y));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}