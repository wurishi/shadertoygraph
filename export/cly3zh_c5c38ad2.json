{"ver":"0.1","info":{"id":"cly3zh","date":"1683866720","viewed":101,"name":"Posterization w/ BilateralFilter","username":"Nardello1","description":"Bilateral filtering twice with a sharpening convolution for a posterization effect. The bilateral filter can be heavily optimized, might come back to it in the future.","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["postprocessing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid makeKernel(inout vec3 cell[9], vec2 uv)\n{\n    float w = 1.0 / iResolution.x;\n    float h = 1.0 / iResolution.y;\n    \n    cell[0] = texture(iChannel0, uv + vec2(-w, -h)).rgb;\n    cell[1] = texture(iChannel0, uv + vec2(0.0, -h)).rgb;\n    cell[2] = texture(iChannel0, uv + vec2(w, -h)).rgb;\n    cell[3] = texture(iChannel0, uv + vec2(-w, 0.0)).rgb;\n    cell[4] = texture(iChannel0, uv).rgb;\n    cell[5] = texture(iChannel0, uv + vec2(w, 0.0)).rgb;\n    cell[6] = texture(iChannel0, uv + vec2(-w, h)).rgb;\n    cell[7] = texture(iChannel0, uv + vec2(0.0, h)).rgb;\n    cell[8] = texture(iChannel0, uv + vec2(w, h)).rgb;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 col = texture(iChannel0, uv);\n\n    \n    // Set up kernel data\n    vec3 cell[9];\n    makeKernel(cell, uv);\n    \n    // Perform unsharpen convolution\n    vec3 sharp = (0.0 * cell[0]) + (-1.0 * cell[1]) + (0.0 * cell[2]) +\n                    (-1.0 * cell[3]) + (5.0 * cell[4]) + (-1.0 * cell[5]) +\n                    (0.0 * cell[6]) + (-1.0 * cell[7]) + (0.0 * cell[8]);\n    \n    sharp.rgb = pow(sharp.rgb, vec3(GAMMA));   \n    \n    fragColor = vec4(sharp, 1.0);\n    //fragColor = col;\n\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 col = texture(iChannel0, uv);\n    col.rgb = pow(col.rgb, vec3(1.0 / GAMMA));\n    \n    float kernel = KERNEL_SIZE;\n    float sigma_r = 2.0 * pow(SIGMA_R, 2.0);\n    float sigma_d = 2.0 * pow(SIGMA_D, 2.0);\n    \n    vec4 intensityWeightSum = vec4(0.0);\n    vec4 weightSum = vec4(0.0);\n    \n    for(float i = -kernel; i < kernel; i++)\n    {\n         for(float j = -kernel; j < kernel; j++)\n         {\n             vec2 newCoords = vec2(i, j);\n             vec2 newUV = uv + (newCoords / iResolution.xy);\n             vec4 sampleCol = texture(iChannel0, newUV);\n             sampleCol.rgb = pow(sampleCol.rgb, vec3(1.0 / GAMMA));\n             \n             vec4 dI = vec4((sampleCol - col) * 255.0);\n             vec4 w = exp((-dot(newCoords, newCoords) / sigma_d) - (dI * dI / sigma_r));\n             \n             intensityWeightSum += w * sampleCol;\n             weightSum += w;\n         }\n    }\n\n    // Output to screen\n    fragColor = vec4((intensityWeightSum / weightSum).rgb, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 col = texture(iChannel0, uv);\n    \n    float kernel = KERNEL_SIZE;\n    float sigma_r = 2.0 * pow(SIGMA_R, 2.0);\n    float sigma_d = 2.0 * pow(SIGMA_D, 2.0);\n    \n    vec4 intensityWeightSum = vec4(0.0);\n    vec4 weightSum = vec4(0.0);\n    \n    for(float i = -kernel; i < kernel; i++)\n    {\n         for(float j = -kernel; j < kernel; j++)\n         {\n             vec2 newCoords = vec2(i, j);\n             vec2 newUV = uv + (newCoords / iResolution.xy);\n             vec4 sampleCol = texture(iChannel0, newUV);\n             \n             vec4 dI = vec4((sampleCol - col) * 255.0);\n             vec4 w = exp((-dot(newCoords, newCoords) / sigma_d) - (dI * dI / sigma_r));\n             \n             intensityWeightSum += w * sampleCol;\n             weightSum += w;\n         }\n    }\n\n    // Output to screen\n    fragColor = vec4((intensityWeightSum / weightSum).rgb, 1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define SIGMA_R 10.0\n#define SIGMA_D 5.0\n#define KERNEL_SIZE 5.0\n#define GAMMA 2.2\n\n","name":"Common","description":"","type":"common"}]}