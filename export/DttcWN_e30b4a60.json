{"ver":"0.1","info":{"id":"DttcWN","date":"1699220972","viewed":65,"name":"Simple 2D SDF Blending","username":"lassiter","description":"using union and simple color blending","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["simple","sdf"],"hasliked":0,"parentid":"-1","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdfBox(vec2 p, vec2 size)\n{\n    vec2 d = abs(p) - size;  \n\treturn length(max(d, vec2(0))) + min(max(d.x, d.y), 0.0);\n}\n\nfloat sdfCircle(vec2 p, float size)\n{\n    return distance(p/0.5, vec2(size,size));\n}\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  \n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n       \n    vec4 col = vec4(1.,1.,1.,1.);\n    vec4 background = vec4(1.,1.,0.,1.);\n    \n    // sdf box\n    float f = sdfBox(uv + sin(vec2(iTime*100.,0.)/100.), vec2(0.2, 0.2));\n    vec4 teal = vec4(0.0,1.0,1.0,1.0);\n    //f = smoothstep(0.0,.05,f);\n    float inveseF = 1.0-f;\n    vec4 colorBox = teal * inveseF;\n    \n\n    float n = sdfCircle(uv/3.0,0.);\n    //float n = length(uv);\n    //n-.05;\n    //n = smoothstep(0.0,.01,n);\n    float inverseN = 1.0 - n;\n    vec4 red = vec4(1.0,0.0,1.0,1.0);\n    vec4 colorCircle = red * inverseN;\n    \n    \n    vec4 finalColor = .3/mix(colorCircle,colorBox,.5);\n    vec4 mask = vec4(1.) *  smoothstep(3./iResolution.y,0.,opSmoothUnion(n,f,.3) - .1 );\n    fragColor = mask* finalColor;\n    \n    //fragColor = vec4(n,n,n,1.0);\n    //fragColor = mask;\n \n}","name":"Image","description":"","type":"image"}]}