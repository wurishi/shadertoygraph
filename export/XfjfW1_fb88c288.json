{"ver":"0.1","info":{"id":"XfjfW1","date":"1724880116","viewed":78,"name":"Strawberry Fields","username":"jorge2017a2","description":"//Name Piano:\n//The Beatles - Strawberry Fields Forever - Piano Tutorial + SHEETS\n//https://www.youtube.com/watch?v=9QEuMMISh8A\n","likes":8,"published":1,"flags":8,"usePreview":0,"tags":["sound","audio","song","gpusound","strawberryfields","beatles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//por jorge2017a2\n\n//referencia\n//https://iquilezles.org/articles/distfunctions2d\n///\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n\n#define S(d,b) smoothstep(antialiasing(1.5),0. , d - (b) )\n#define S2(d,b) smoothstep(8.0*antialiasing(1.5),0.,d - (b) )\n#define S3(d,b) smoothstep(0.25/antialiasing(0.5),0. , d - (b) )\n\n\n#define opU2(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\n#define HALFPI 1.5707\n\n#define PI acos(-1.)\n#define PIH (PI*.5)\n#define TAU (PI*2.)\n#define TWO_PI 6.2831\n\n\n\nfloat sdCircle( vec2 p, float r )\n{ return length(p) - r;}\n\n\nfloat divf(float a, float b)\n{\n    //evita crash por 1/0.0 =Infinito=error, en compilar\n    if(b==0.0)\n    {b=0.00001;}\n    return a/b;\n}\n\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{  vec2 pa = p-a, ba = b-a;\n    float h = clamp( divf( dot(pa,ba),dot(ba,ba)), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n\nfloat Sdf_I(float distA, float distB) { return max(distA, distB);}\nfloat Sdf_U(float distA, float distB) { return min(distA, distB);}\nfloat Sdf_D(float distA, float distB) { return max(distA, -distB);}\n\n\nvec3 DFB(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S3( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0),S3(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\n\nvec3 DFS(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S( distObj,0.0)); return colOut;\n  return colOut;\n}\n\n\n///oneshade    \nvec2 Rotate(in vec2 p, in vec2 o, in float r) \n{   float c = cos(r), s = sin(r);  return (p - o) * mat2(c, -s, s, c) + o;  }\n\n\nvec3 s(vec2 p, vec3 colout)\n{\n\n    \nvec2 A,B, med,pr;\nfloat dfin;\nfloat  r1,ang, he ;\n\nA=vec2(0.1180556,0.78125);\nB=vec2(0.21875,0.8333333);\nfloat d1=sdSegment(p,A,B);\ncolout= DFB(vec3(0.0), colout, d1);\n\nA=vec2(0.1180556,0.78125);\nB=vec2(0.125,0.6944444);\nfloat d2=sdSegment(p,A,B);\ncolout= DFB(vec3(0.0), colout, d2);\n\nA=vec2(0.2048611,0.6944444);\nB=vec2(0.125,0.6944444);\nfloat d3=sdSegment(p,A,B);\ncolout= DFB(vec3(0.0), colout, d3);\n\nA=vec2(0.2048611,0.6944444);\nB=vec2(0.2083333,0.5972222);\nfloat d4=sdSegment(p,A,B);\ncolout= DFB(vec3(0.0), colout, d4);\n\nA=vec2(0.1701389,0.5659722);\nB=vec2(0.2083333,0.5972222);\nfloat d5=sdSegment(p,A,B);\ncolout= DFB(vec3(0.0), colout, d5);\n\nA=vec2(0.1701389,0.5659722);\nB=vec2(0.1145833,0.5833333);\nfloat d6=sdSegment(p,A,B);\ncolout= DFB(vec3(0.0), colout, d6);\n\n\n    return colout;\n}\n\n\n\nvec3 o(vec2 p, vec3 colout)\n{\nvec2 A,B, med,pr;\nfloat dfin;\nfloat  r1,ang, he ;\n\nA=vec2(0.3229167,0.6423611);\nr1=0.05555556;\nfloat d1=sdCircle(p-A,r1);\nd1=abs(d1)-0.001;\ncolout= DFB(vec3(0.0), colout, d1);\nreturn colout;\n} \n\n\nvec3 u(vec2 p, vec3 colout)\n{\n\nvec2 A,B, med,pr;\nfloat dfin;\nfloat  r1,ang, he ;\n\nA=vec2(0.4270833,0.7430556);\nB=vec2(0.4340278,0.6388889);\nfloat d1=sdSegment(p,A,B);\ncolout= DFB(vec3(0.0), colout, d1);\n\nA=vec2(0.4722222,0.6284722);\nB=vec2(0.4340278,0.6388889);\nfloat d2=sdSegment(p,A,B);\ncolout= DFB(vec3(0.0), colout, d2);\n\nA=vec2(0.4722222,0.6284722);\nB=vec2(0.4930556,0.6875);\nfloat d3=sdSegment(p,A,B);\ncolout= DFB(vec3(0.0), colout, d3);\n\nA=vec2(0.5,0.7361111);\nB=vec2(0.4930556,0.6875);\nfloat d4=sdSegment(p,A,B);\ncolout= DFB(vec3(0.0), colout, d4);\n    return colout;\n}\n\n\n\nvec3 n(vec2 p, vec3 colout)\n{\nvec2 A,B, med,pr;\nfloat dfin;\nfloat  r1,ang, he ;\n\nA=vec2(0.53125,0.71875);\nB=vec2(0.5416667,0.6111111);\nfloat d1=sdSegment(p,A,B);\ncolout= DFB(vec3(0.0), colout, d1);\n\nA=vec2(0.53125,0.71875);\nB=vec2(0.6180556,0.6145833);\nfloat d2=sdSegment(p,A,B);\ncolout= DFB(vec3(0.0), colout, d2);\n\nA=vec2(0.6284722,0.7326389);\nB=vec2(0.6180556,0.6145833);\nfloat d3=sdSegment(p,A,B);\ncolout= DFB(vec3(0.0), colout, d3);\n\nreturn colout;\n}\n\n\nvec3 d(vec2 p, vec3 colout)\n{\n\nvec2 A,B, med,pr;\nfloat dfin;\nfloat  r1,ang, he ;\n\nA=vec2(0.6909722,0.7291667);\nB=vec2(0.6493056,0.6006944);\nfloat d1=sdSegment(p,A,B);\ncolout= DFB(vec3(0.0), colout, d1);\n\nA=vec2(0.6909722,0.7291667);\nB=vec2(0.7430556,0.7013889);\nfloat d2=sdSegment(p,A,B);\ncolout= DFB(vec3(0.0), colout, d2);\n\nA=vec2(0.75,0.6458333);\nB=vec2(0.7430556,0.7013889);\nfloat d3=sdSegment(p,A,B);\ncolout= DFB(vec3(0.0), colout, d3);\n\nA=vec2(0.75,0.6458333);\nB=vec2(0.6909722,0.5902778);\nfloat d4=sdSegment(p,A,B);\ncolout= DFB(vec3(0.0), colout, d4);\n\nA=vec2(0.6458333,0.5972222);\nB=vec2(0.6909722,0.5902778);\nfloat d5=sdSegment(p,A,B);\ncolout= DFB(vec3(0.0), colout, d5);\n\n    return colout;\n}\n\nvec3 soundLtr(vec2 p, vec3 colout)\n{\n    \n    colout=s(p,colout);\n    colout=o(p,colout);\n    colout=u(p,colout);\n    colout=n(p,colout);\n    colout=d(p,colout);\n    \n    return colout;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    vec2 uv = ( 2. * fragCoord - iResolution.xy ) / iResolution.y;\n    uv-=vec2(-0.5,-0.15);\n    float esc=0.95;\n    uv*=esc;\n    vec2 q=uv;\n\n    vec3 col = vec3(0.5);\n    if(uv.x<0.5)\n    {\n    vec3 col2 = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    col*=col2+col;\n    }\n  \n     col= soundLtr(uv, col);\n     col= soundLtr((uv-vec2(0.25,0.0))*2.0, col);\n     col= soundLtr((uv-vec2(-0.5,-1.5))*0.5, col);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//Referencia de sonido \n//IQ,AeroShark333, Gaz ,etc. muchos :)\n\n//Name Piano:\n//The Beatles - Strawberry Fields Forever - Piano Tutorial + SHEETS\n//https://www.youtube.com/watch?v=9QEuMMISh8A\n\n#define PI acos(-1.)\n#define PIH (PI*.5)\n#define TAU (PI*2.)\n#define TWO_PI 6.2831\n\n\nconst float ttotal=54.0; \nconst float pi = 3.1415927;\nconst float tau = 6.283185;\nfloat ms;\nfloat mresp;\nfloat mtime;\nfloat mtempo;\n\n\n//https://www.shadertoy.com/view/ss3cDN\n// Created by AeroShark333\nfloat squareWave750( float f, float x)\n{ return (min(1.0, floor( 4.0 * floor( f * x ) - floor( 4.0 * f * x ) + 3.0 ))); }\n\nfloat squareWave500( float f, float x)\n{ return (floor( 2.0 * floor( f * x ) - floor( 2.0 * f * x ) + 1.0 )); }\n\nfloat squareWave250( float f, float x)\n{ return (max(0.0, floor( 4.0 * floor( f * x ) - floor( 4.0 * f * x ) + 1.0 ))); }\n\nvec2 squareWave250( vec2 f, float x)\n{ return (max(vec2(0.0), floor( 4.0 * floor( f * x ) - floor( 4.0 * f * x ) + 1.0 ))); }\n\nfloat triangleWave500( float q, float x)\n{ float f = 1.0-2.0*abs(0.5-mod(q*x,1.0));  return (f); }\n\nfloat triangleWave250( float q, float x)\n{ float f = max(0.0,1.0-2.0*abs(0.5-2.0*mod(q*x,1.0))); return (f); }\n\nfloat convertBassFreq (float f)\n{ return (f/2.0); }\n\nfloat  sawf(float t , float freq)\n{  return fract(t * freq) - 0.5; }\n\nfloat wave1( float x, float dxdt, in vec2 v, float t , float w)\n{   float f2;\n    float sampleX=0.0;\n    float f=w;\n    float v1,v2;\n    v1=squareWave250(f,t);\n    v2=triangleWave250(f,t);\n    sampleX =v1*v2*exp(-2.5*t);\n    f2=(sampleX+sawf(t,f));\n    float fx=f2*1.5;\n    return fx;\n}\n\n\nfloat D3(float ton, float tid, float toff)\n{   vec3 n3;\n    float resp;\n    n3=vec3(ton,tid, toff);\n    \n    \n    if(ms>=ton && ms<=toff)\n    {      // lower one octave\n      //n3.y -=12.; //12 notas\n      //n3.y +=12.; //12 notas\n\n      // compute note frequency and time  \n      float f = 440.0*pow( 2.0, float(n3.y-69.)/12.0 );\n      float t = mtime - float(n3.x)/mtempo;\n      if( n3.x==0.0 ) return 0.0;\n\n      // prepare wave parameters\n      float w = tau*f;\n      \n      float dwdt = w/iSampleRate; // derivative\n\n      // mix between bandlimited and raw saw waves  \n      vec2 v = smoothstep(-0.2,0.2,sin(t*vec2(1.0,0.5)) );\n      // build instrument\n\n      float f1,y;\n      f1=wave1(w*t,1.00*dwdt,v,t,w);\n      float wf  = 0.4*f1;\n      y=f1*wf;\n      float offset=n3.x;\n       y*=exp(-1.0/n3.z * (t -offset) );\n        \n       mresp+=y;\n    }\n    \n}\n\n\n\nfloat SoundIq(float time)\n{ ///referencia de notas musicales... iq \n  time = mod( time+1.0, ttotal);\n // tune\n  float tempo = 0.45;\n  float s = time*tempo;\n vec3 n3=vec3(0.0);\n \n //variables globales\n ms=s;\n mresp=0.0;\n mtime=time;\n mtempo=tempo;\n\n\nD3(0.000,41.0,0.500); D3(0.000,45.0,0.125); D3(0.000,48.0,0.125); D3(0.250,45.0,0.375); D3(0.250,48.0,0.375); D3(0.500,40.0,1.000);\n D3(0.500,45.0,0.625); D3(0.500,48.0,0.625); D3(0.750,45.0,0.875); D3(0.750,48.0,0.875); D3(1.000,39.0,1.938); D3(1.000,45.0,1.125);\n D3(1.000,48.0,1.125); D3(1.250,45.0,1.500); D3(1.250,48.0,1.500); D3(1.500,43.0,1.750); D3(1.500,46.0,1.750); D3(1.750,42.0,2.000);\n D3(1.750,45.0,2.000); D3(2.000,38.0,2.500); D3(2.125,43.0,2.250); D3(2.250,46.0,2.500); D3(2.500,36.0,3.000); D3(2.625,41.0,2.750);\n D3(2.750,45.0,3.000); D3(3.000,34.0,3.125); D3(3.000,39.0,3.125); D3(3.000,43.0,3.125); D3(3.250,38.0,3.750); D3(3.250,41.0,3.750);\n D3(3.250,34.0,5.500); D3(3.500,22.0,4.750); D3(3.500,29.0,5.500); D3(3.750,50.0,3.875); D3(3.875,50.0,4.000); D3(4.000,51.0,4.125);\n D3(4.125,50.0,4.375); D3(4.375,46.0,4.813); D3(4.813,22.0,5.063); D3(4.813,41.0,4.938); D3(4.938,43.0,5.063); D3(5.063,22.0,5.313);\n D3(5.063,48.0,5.188); D3(5.188,46.0,5.563); D3(5.313,22.0,5.563); D3(5.563,17.0,6.500); D3(5.563,24.0,6.500); D3(5.563,29.0,5.813);\n D3(5.563,41.0,6.063); D3(5.563,44.0,6.063); D3(5.813,29.0,6.063); D3(6.063,29.0,6.313); D3(6.063,44.0,6.250); D3(6.250,46.0,6.438);\n D3(6.313,29.0,6.563); D3(6.438,48.0,6.563); D3(6.563,17.0,7.500); D3(6.563,24.0,7.500); D3(6.563,29.0,6.813); D3(6.563,36.0,7.313);\n D3(6.563,39.0,7.313); D3(6.563,41.0,7.313); D3(6.813,29.0,7.063); D3(7.063,29.0,7.313); D3(7.313,29.0,7.563); D3(7.375,36.0,7.563);\n D3(7.375,39.0,7.563); D3(7.375,41.0,7.563); D3(7.563,26.0,8.500); D3(7.563,31.0,8.500); D3(7.563,19.0,7.813); D3(7.563,38.0,8.063);\n D3(7.563,41.0,8.063); D3(7.563,43.0,8.063); D3(7.813,19.0,8.063); D3(8.063,19.0,8.313); D3(8.063,44.0,8.250); D3(8.250,46.0,8.438);\n D3(8.313,19.0,8.563); D3(8.438,47.0,8.563); D3(8.563,19.0,8.813); D3(8.563,26.0,9.500); D3(8.563,31.0,9.500); D3(8.563,38.0,8.813);\n D3(8.563,41.0,8.813); D3(8.813,19.0,9.063); D3(8.813,38.0,9.063); D3(8.813,41.0,9.063); D3(9.063,19.0,9.313); D3(9.063,38.0,9.313);\n D3(9.063,41.0,9.313); D3(9.313,19.0,9.563); D3(9.313,38.0,9.438); D3(9.313,41.0,9.438); D3(9.438,41.0,9.563); D3(9.563,15.0,9.938);\n D3(9.563,27.0,9.938); D3(9.563,43.0,9.813); D3(9.563,46.0,9.813); D3(9.563,53.0,9.688); D3(9.688,51.0,9.813); D3(9.813,43.0,10.063);\n D3(9.813,46.0,10.063); D3(9.813,50.0,9.938); D3(9.938,17.0,10.063); D3(9.938,29.0,10.063); D3(9.938,48.0,10.063); D3(10.063,19.0,10.313);\n D3(10.063,31.0,10.313); D3(10.063,43.0,10.313); D3(10.063,46.0,10.125); D3(10.125,48.0,10.188); D3(10.188,50.0,10.563); D3(10.313,23.0,10.375);\n D3(10.313,43.0,10.563); D3(10.313,47.0,10.563); D3(10.375,24.0,10.438); D3(10.438,26.0,10.688); D3(10.563,43.0,10.813); D3(10.563,47.0,10.813);\n D3(10.688,19.0,11.063); D3(10.813,43.0,11.063); D3(10.813,47.0,11.063); D3(11.063,15.0,11.438); D3(11.063,27.0,11.438); D3(11.063,39.0,11.438);\n D3(11.063,43.0,11.438); D3(11.063,50.0,11.188); D3(11.188,46.0,11.313); D3(11.438,15.0,11.688); D3(11.438,26.0,11.688); D3(11.438,39.0,11.813);\n D3(11.438,43.0,11.813); D3(11.438,50.0,11.563); D3(11.563,46.0,11.688); D3(11.688,24.0,11.813); D3(11.813,22.0,12.813); D3(11.813,38.0,12.813);\n D3(11.813,41.0,12.813); D3(11.813,48.0,11.938); D3(11.938,46.0,12.313); D3(12.875,29.0,13.375); D3(12.875,33.0,13.125); D3(12.875,36.0,13.125);\n D3(12.875,41.0,13.375); D3(12.875,45.0,13.375); D3(12.875,48.0,13.063); D3(13.063,48.0,13.250); D3(13.125,33.0,13.375); D3(13.125,36.0,13.375);\n D3(13.250,48.0,13.375); D3(13.375,28.0,13.875); D3(13.375,33.0,13.625); D3(13.375,36.0,13.625); D3(13.375,40.0,13.875); D3(13.375,45.0,13.875);\n D3(13.375,48.0,13.563); D3(13.563,48.0,13.750); D3(13.625,33.0,13.875); D3(13.625,36.0,13.875); D3(13.750,48.0,13.875); D3(13.875,29.0,14.875);\n D3(13.875,33.0,14.125); D3(13.875,36.0,14.125); D3(13.875,39.0,14.625); D3(13.875,45.0,14.625); D3(13.875,48.0,14.250); D3(14.125,33.0,14.375);\n D3(14.125,36.0,14.375); D3(14.250,48.0,14.875); D3(14.375,34.0,14.625); D3(14.625,33.0,14.938); D3(14.625,42.0,14.938); D3(14.688,45.0,14.938);\n D3(14.938,31.0,15.438); D3(14.938,34.0,15.188); D3(14.938,38.0,15.188); D3(15.063,46.0,15.188); D3(15.188,34.0,15.438); D3(15.188,38.0,15.438);\n D3(15.188,46.0,15.313); D3(15.313,46.0,15.438); D3(15.438,29.0,15.938); D3(15.438,33.0,15.688); D3(15.438,36.0,15.688); D3(15.438,50.0,15.563);\n D3(15.563,48.0,15.688); D3(15.688,33.0,15.938); D3(15.688,36.0,15.938); D3(15.688,46.0,15.813); D3(15.813,45.0,15.938); D3(15.938,27.0,16.875);\n D3(15.938,31.0,16.188); D3(15.938,34.0,16.188); D3(15.938,39.0,16.875); D3(15.938,46.0,16.000); D3(16.000,45.0,16.063); D3(16.063,43.0,16.438);\n D3(16.188,31.0,16.438); D3(16.188,34.0,16.438); D3(16.438,31.0,16.688); D3(16.438,34.0,16.688); D3(16.688,31.0,16.938); D3(16.688,34.0,16.938);\n D3(16.938,27.0,17.438); D3(16.938,31.0,17.188); D3(16.938,34.0,17.188); D3(17.063,46.0,17.188); D3(17.188,31.0,17.438); D3(17.188,34.0,17.438);\n D3(17.188,46.0,17.250); D3(17.250,46.0,17.375); D3(17.375,45.0,17.625); D3(17.438,29.0,17.938); D3(17.438,33.0,17.688); D3(17.438,36.0,17.688);\n D3(17.625,43.0,17.688); D3(17.688,33.0,17.938); D3(17.688,36.0,17.938); D3(17.688,41.0,17.813); D3(17.813,50.0,17.938); D3(17.938,34.0,18.188);\n D3(17.938,38.0,18.188); D3(17.938,41.0,18.188); D3(17.938,46.0,18.063); D3(18.063,46.0,18.125); D3(18.125,46.0,18.188); D3(18.188,46.0,18.250);\n D3(18.188,33.0,18.438); D3(18.188,36.0,18.438); D3(18.188,41.0,18.438); D3(18.250,48.0,18.313); D3(18.313,46.0,18.375); D3(18.375,45.0,18.438);\n D3(18.438,31.0,18.688); D3(18.438,34.0,18.688); D3(18.438,38.0,18.688); D3(18.438,43.0,18.688); D3(18.688,29.0,18.938); D3(18.688,33.0,18.938);\n D3(18.688,36.0,18.938); D3(18.688,41.0,18.938); D3(18.688,45.0,18.938); D3(18.938,27.0,19.438); D3(18.938,31.0,19.188); D3(18.938,34.0,19.188);\n D3(18.938,39.0,19.438); D3(18.938,43.0,19.438); D3(19.063,46.0,19.188); D3(19.188,31.0,19.438); D3(19.188,34.0,19.438); D3(19.188,46.0,19.250);\n D3(19.250,46.0,19.438); D3(19.438,29.0,19.938); D3(19.438,33.0,19.688); D3(19.438,36.0,19.688); D3(19.438,41.0,19.938); D3(19.438,48.0,19.500);\n D3(19.500,46.0,19.625); D3(19.625,45.0,19.813); D3(19.688,33.0,19.938); D3(19.688,36.0,19.938); D3(19.813,46.0,19.938); D3(19.938,27.0,20.438);\n D3(19.938,31.0,20.188); D3(19.938,34.0,20.188); D3(19.938,39.0,20.438); D3(19.938,43.0,20.438); D3(19.938,46.0,20.438); D3(20.438,22.0,20.688);\n D3(20.438,29.0,22.938); D3(20.438,34.0,22.938); D3(20.438,38.0,20.938); D3(20.438,41.0,20.938); D3(20.688,22.0,20.938); D3(20.938,22.0,22.250);\n D3(21.188,50.0,21.313); D3(21.313,50.0,21.438); D3(21.438,51.0,21.563); D3(21.563,50.0,21.813); D3(21.813,46.0,22.313); D3(22.313,41.0,22.438);\n D3(22.313,22.0,22.563); D3(22.438,43.0,22.563); D3(22.563,22.0,22.813); D3(22.563,48.0,22.688); D3(22.688,46.0,23.063); D3(22.813,22.0,23.063);\n\n\n\n\n\n  return mresp;\n}\n\nvec2 mainSound( in int samp, float time )\n{ float t1=mod(time, ttotal);\n  float y= SoundIq(t1)*0.5;\n  return vec2(y);\n}   \n","name":"Sound","description":"","type":"sound"}]}