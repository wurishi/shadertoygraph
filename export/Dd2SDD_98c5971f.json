{"ver":"0.1","info":{"id":"Dd2SDD","date":"1670329889","viewed":55,"name":"rotating mandelbrot","username":"atkurtul","description":"mandelbrot","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool InCircle(vec2 p, vec2 o, float r)\n{\n    return length(p - o) <= r;\n}\n\n\nvec2 mul(vec2 a, vec2 b)\n{\n    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);\n}\n\n\nvec2 mandelbrot(vec2 a, vec2 c)\n{\n    return mul(a, a) + c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(1,1,1,1.0);\n    \n    vec2 UV = (2.0 * uv - 1.0) * 2.0 * vec2(1, iResolution.y/iResolution.x);\n    \n    UV = vec2(cos(iTime) * UV.x - sin(iTime) * UV.y, cos(iTime) * UV.y + sin(iTime) * UV.x);\n    \n    vec2 re = UV;\n    for(int i = 0; i < 128; ++i)\n    {\n        re = mandelbrot(re, UV);\n    }\n    if(length(re) > 0.01) fragColor = vec4(0.0);\n    else fragColor = vec4(1.0);\n}","name":"Image","description":"","type":"image"}]}