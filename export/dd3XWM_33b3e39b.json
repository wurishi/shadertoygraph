{"ver":"0.1","info":{"id":"dd3XWM","date":"1679908457","viewed":198,"name":"Bilaterial Filtering by Chat GPT","username":"jaszunio15","description":"Just asked Chat GPT about different denoising techniques used in image processing. It proposed median filter, gaussian filter and bilaterial filter. I didn't know about the last one, so asked about glsl implementation. Here it is.","likes":4,"published":1,"flags":0,"usePreview":1,"tags":["denoising","chatgpt","bilaterialfilter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nJust asked Chat GPT about different denoising techniques used in image processing. \nHe proposed median filter, gaussian filter and bilaterial filter. \nI didn't know about the last one, so asked about glsl implementation and to explain the parameters.\n\nAlso docummentation written by chat GPT:\n\nsigmaR: \nThis parameter controls how much the filter considers color differences when filtering. \nIt specifies the standard deviation of the Gaussian function in the range domain. \nA larger sigma range means that pixels with more different colors are less likely to \nbe smoothed together.\n\nsigmaS: \nThis parameter controls the size of the filter's window. It specifies the standard \ndeviation of the Gaussian function in the spatial domain. A larger sigma spatial \nmeans that more neighboring pixels are taken into account when filtering, resulting \nin a wider filter window.\n\nkernelSize: \nThis parameter determines the size of the filter kernel. It is usually set to an \nodd value (e.g. 3, 5, 7) to ensure that there is a central pixel in the kernel. The size\nof the kernel affects the smoothness of the output image. A larger kernel size typically\nresults in a smoother image, but at the expense of increased computational cost.\n\n\nIn summary, the bilateral filter is a non-linear, edge-preserving smoothing filter \nthat takes into account both color differences and spatial proximity between pixels. \nThe sigma_range and sigma_spatial parameters control how much weight is given to these \ntwo factors, and the kernelSize parameter determines the size of the filter kernel.\n*/\n\nvec4 SampleBilaterialFilter(sampler2D tex, vec2 texelSize, vec2 uv, float sigmaS, float sigmaR, float kernelSize)\n{\n    vec4 color = texture(tex, uv);\n    vec4 sum = vec4(0.0);\n    float weightSum = 0.0;\n\n    for(float x = -kernelSize; x <= kernelSize; x++) \n    {\n        for(float y = -kernelSize; y <= kernelSize; y++) \n        {\n            vec2 offset = vec2(x, y) * texelSize;\n            vec4 neighborColor = texture(tex, uv + offset);\n            float spatialWeight = exp(-(x * x + y * y) / (2.0 * sigmaS * sigmaR));\n            float rangeWeight = exp(-(length(neighborColor.rgb - color.rgb) / (sqrt(2.0) * sigmaR)));\n            float weight = spatialWeight * rangeWeight;\n            sum += neighborColor * weight;\n            weightSum += weight;\n        }\n    }\n    \n    return sum / weightSum;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n\n    vec4 originalColor = texture(iChannel0, uv);\n    \n    // I've multiplied the texel size by 1.5 because the noise is not pixel size, but larger, \n    // just gives better results in this case.\n    vec4 filteredColor = SampleBilaterialFilter(iChannel0, vec2(1.5) / iChannelResolution[0].xy, uv, 5.0, 0.2, 3.0);\n    \n    float mousePosX = abs(iMouse.x) > 2.0 ? iMouse.x : (sin(iTime) * 0.5 + 0.5) * iResolution.x;\n    \n    if (abs(mousePosX) > fragCoord.x)\n        fragColor = filteredColor;\n    else \n        fragColor = originalColor;\n        \n    fragColor += smoothstep(1.0, 0.5, abs(abs(mousePosX) - fragCoord.x));\n}","name":"Image","description":"","type":"image"}]}