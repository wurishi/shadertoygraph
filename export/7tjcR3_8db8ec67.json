{"ver":"0.1","info":{"id":"7tjcR3","date":"1650050419","viewed":144,"name":"2x2 pixel deinterleaving for RT","username":"Tara","description":"1. Downsamples the image to half resolution by selecting a random pixel in each 2x2 block.\n2. Put the lowres pixel back into the hires texture where it came from.\nThe original image is reconstructed after 4 frames.\nThis is useful for realtime ray tracing.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["raytracing","checkerboard","upsampling","downsampling","temporal","2x2","pixelselection","temporalupsampling","deinterleaving"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":2,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Upsample halfres to fullre by selecting the pixel that was used for downsampling,\n// and don't update the other pixels\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n#ifdef SHOW_GROUND_TRUTH\n    if(fragCoord.x > iMouse.x)\n    {\n        vec2 uv = fragCoord / (iChannelResolution[1].xy);\n        //fragColor.r = texture(iChannel1, uv + 0.0).r;\n        //fragColor.g = texture(iChannel1, uv + 0.1).r;\n        //fragColor.b = texture(iChannel1, uv + 0.2).r;\n        fragColor = texture(iChannel1, uv);\n        return;\n     }\n#endif\n\n    // The lowres texture pixel this hires pixel is in:\n    vec2 fragCoord_lowres = fragCoord * 0.5;\n    \n    int selected_pixel_id = get_random_pixel_id(fragCoord_lowres, iFrame, iChannel2);\n    int pixel_id = get_pixel_id(fragCoord);\n    if(selected_pixel_id != pixel_id)\n    {\n    #ifdef SHOW_PATTERN\n        fragColor = vec4(0.0);\n        return;\n    #else\n        discard;\n    #endif\n    }\n    \n    vec2 offset = get_pixel_offset(selected_pixel_id, FULL_RES_IMAGE_DIMENSIONS);\n    \n    vec2 uv = fragCoord / FULL_RES_IMAGE_DIMENSIONS;\n    uv *= 0.5; // This is only necessary because the lowres image doesn't fill the whole texture.\n    fragColor = texture(iChannel0, uv - offset);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Render fullres image\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iChannelResolution[0].xy;\n\n    //fragColor.r = texture(iChannel0, uv + 0.0).r;\n    //fragColor.g = texture(iChannel0, uv + 0.1).r;\n    //fragColor.b = texture(iChannel0, uv + 0.2).r;\n    \n    fragColor = texture(iChannel0, uv);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Downsample fullres to halfres by selecting a random pixel in each 2x2 block\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int selected_pixel_id = get_random_pixel_id(fragCoord, iFrame, iChannel1);\n    \n    vec2 offset = get_pixel_offset(selected_pixel_id, FULL_RES_IMAGE_DIMENSIONS);\n    \n    vec2 uv = fragCoord / HALF_RES_IMAGE_DIMENSIONS;\n    fragColor = texture(iChannel0, uv + offset);\n    \n    // Discard half of the frame buffer:\n    if((fragCoord.x > iResolution.x / 2.0)||\n       (fragCoord.y > iResolution.y / 2.0))\n    {\n        fragColor = vec4(0.0);\n        return;\n    }\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// User settings: //////////////////////////////\n// Show ground truth at mouse click position.\n#define SHOW_GROUND_TRUTH\n#define SHOW_PATTERN\n\n// 2x2 grid\n#define GRID 0\n\n// Bad random function\n#define RAND 1\n\n// Interleaved Gradient Noise\n#define IGN 2\n\n// Blue noise\n#define BLUE 3\n\n#define DECORRELATION_MODE BLUE\n\n\n// Do not modify: //////////////////////////////\n#define FULL_RES_IMAGE_DIMENSIONS (iChannelResolution[0].xy)\n#define HALF_RES_IMAGE_DIMENSIONS (iChannelResolution[0].xy * 0.5)\n\nfloat random(vec2 coordinate)\n{\n    // Source: http://stackoverflow.com/questions/12964279/whats-the-origin-of-this-glsl-rand-one-liner\n    return(fract(sin(dot(coordinate.xy, vec2(12.9898, 78.2332))) * 43758.5453));\n}\n\n// Interleaved Gradient Noise\n// \"p\" must be rounded to the nearest integer.\nfloat ign(vec2 p)\n{\n\t// Source: \"Using Blue Noise for Ray Traced Soft Shadows\" - Alaon Wolfe, NVIDIA\n\t// https://www.springerprofessional.de/en/using-blue-noise-for-ray-traced-soft-shadows/19538270\n\n\treturn(fract(52.9829189 *\n\t\t\t\t fract(0.06711056 * p.x +\n\t\t\t\t\t   0.00583715 * p.y)));\n}\n\nint get_random_pixel_id(vec2 fragCoord, int frame_index, sampler2D noise_texture)\n{\n    fragCoord = floor(fragCoord);\n    \n#if DECORRELATION_MODE == GRID\n    float rng = 0.0;\n#elif DECORRELATION_MODE == RAND\n    float rng = random(fragCoord);\n#elif DECORRELATION_MODE == IGN\n    float rng = ign(fragCoord);\n#elif DECORRELATION_MODE == BLUE\n    float rng = texture(noise_texture, fragCoord / 1024.0).r;\n#endif\n    \n    rng = fract(rng + float(frame_index) / 4.0);\n    return(int(rng * 4.0));\n}\n\nint get_pixel_id(vec2 fragCoord)\n{\n    int pixel_id = (int(fragCoord.y) % 2) * 2 +\n                   (int(fragCoord.x) % 2);\n                   \n    return(pixel_id);\n}\n\nvec2 get_pixel_offset(int pixel_id, vec2 hires_image_resolution)\n{\n    vec2 offset = vec2(0.5) / (hires_image_resolution);\n  \n    if((pixel_id == 0)||(pixel_id == 2))\n    {\n        offset.x = -offset.x;\n    }\n    \n    if(pixel_id < 2)\n    {\n        offset.y = -offset.y;\n    }\n    \n    return(offset);\n}","name":"Common","description":"","type":"common"}]}