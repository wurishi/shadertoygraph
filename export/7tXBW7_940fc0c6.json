{"ver":"0.1","info":{"id":"7tXBW7","date":"1651004536","viewed":178,"name":"RPS Automaton","username":"Spi3lot","description":"Rock Paper Scissors Automaton - Watch cells play rock paper scissors against each other","likes":3,"published":3,"flags":32,"usePreview":0,"tags":["automata","cellular","paper","rock","moore","automaton","scissors","rps"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// [0; 8]\n#define NEIGHBOR_THRESHOLD 3\n\n#define R vec3(0.0, 1.0, 1.0)\n#define P vec3(1.0, 0.0, 1.0)\n#define S vec3(1.0, 1.0, 0.0)\n\n\nvec3 getColorFromNoise(float white)\n{\n    return (white < 0.333) ? R : ((white < 0.666) ? P : S);\n}\n\nvec3 getWinner(ivec2 coord)\n{\n    vec3 me;\n    int r = 0;\n    int p = 0;\n    int s = 0;\n\n    for (int j = -1; j <= 1; j++)\n    {\n        for (int i = -1; i <= 1; i++)\n        {\n            vec3 rps = texelFetch(iChannel0, coord + ivec2(i, j), 0).rgb;\n\n            if (i == j && j == 0)\n                me = rps;\n            else if (rps == R)\n                r++;\n            else if (rps == P)\n                p++;\n            else if (rps == S)\n                s++;\n        }\n    }\n\n    if (me == R)\n        return (p >= NEIGHBOR_THRESHOLD) ? P : R;\n    else if (me == P)\n        return (s >= NEIGHBOR_THRESHOLD) ? S : P;\n    else if (me == S)\n        return (r >= NEIGHBOR_THRESHOLD) ? R : S;\n\n    return vec3(0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 coord = ivec2(fragCoord);\n    vec3 col;\n\n    if (iFrame < 100) {\n        vec2 uv = fragCoord / iResolution.xy;\n        float white = texture(iChannel1, uv).r;\n        \n        col = getColorFromNoise(white);\n    }\n    else {\n        col = getWinner(coord);\n    }\n\n    fragColor = vec4(col, 1.0);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}