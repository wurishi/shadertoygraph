{"ver":"0.1","info":{"id":"lfBXWR","date":"1706194529","viewed":120,"name":"Madelbrot - zoom in walkthrough","username":"johndoe2024","description":"Zoom in the walk through Mandelbrot Set.\n(UPDATED)\n\nMouse and Keyboard:\n  Mouse outside Circle: move the circle\n  Mouse inside Circle : move within the circle\n  UP|PAGEUP : Zoom in (max x256)\n  DOWN|PAGEDOWN : Zoom out (min x1)\n  SPACE|ESC : Reset Zoom x1","likes":1,"published":1,"flags":48,"usePreview":0,"tags":["2d","fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 coloring(float gray) {\n    return COLOR_MANDELBROT_EDGE * sin(gray*.5*PI);\n}\n\nvec3 mandelbrot(vec2 c) {\n    vec2 z = c;\n    for (int i = 0; i < LOOP; i++) {\n        if (length(z) >= 2.) {\n            return coloring(float(i)/float(LOOP));\n        }\n        // Z' = Z^2 + C\n        z = vec2(z.x*z.x - z.y*z.y, 2.*z.x*z.y) + c;\n    }\n    return COLOR_MANDELBROT_BACK;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from -2 to 2)\n    vec2 uv = UV_SCALE * (-iResolution.xy + 2.*fragCoord.xy)/iResolution.x;\n    // Pixel size in UV\n    float uv_pixel = UV_SCALE*2./iResolution.x;\n\n    // Mouse\n    vec2 mouse_uv = UV_SCALE * (-iResolution.xy + 2.*iMouse.xy)/iResolution.x;\n    float mouse_r = distance(mouse_uv, uv);\n\n    // Read BufferA\n    //   xy=center, z=zoom\n    vec3 bufA = texelFetch(iChannel0, ivec2(0, 0), 0).xyz;\n    vec2 center_uv = bufA.xy;\n    float scale = exp2(bufA.z);\n\n    // Read BufferB\n    //   xy=scaled_uv\n    vec2 bufB = texelFetch(iChannel1, ivec2(fragCoord), 0).xy;\n    vec2 scaled_uv = bufB.xy;\n\n    //----------------\n    // Mini Map Area\n    // Screen size in UV\n    vec2 uv_max = vec2(UV_SCALE, UV_SCALE*iResolution.y/iResolution.x);\n    vec2 minimap_box    = uv_max * MINIMAP_SIZE;\n    vec2 minimap_center = uv_max - minimap_box*.5;\n    if (all(greaterThan(uv, uv_max - minimap_box))) {\n        // Mini Map UV\n        vec2 minimap_uv = UV_SCALE/MINIMAP_SIZE * (uv-minimap_center);\n        vec3 color = mandelbrot(minimap_uv);\n        color = clamp((color+COLOR_MINIMAP_BACK)/(1.+COLOR_MINIMAP_BACK), 0., 1.);\n        // Mini Map Circle\n        vec2 minimap_center = center_uv/(UV_SCALE/MINIMAP_SIZE) + minimap_center;\n        float r  = distance(minimap_center, uv);\n        float rd = uv_pixel; // Anti-Alias : 1pixel\n        float on_circle = smoothstep(r,r+rd, MINIMAP_SIZE*CIRCLE_RADIUS/UV_SCALE);\n        // center shifted\n        vec2 minimap_shifted = -1. * (mouse_uv - center_uv) / UV_SCALE*MINIMAP_SIZE/scale;\n        vec2 minimap_mouse = minimap_center + minimap_shifted;\n        r = distance(minimap_mouse, uv);\n        float on_scaled = smoothstep(r,r+rd, MINIMAP_SIZE*CIRCLE_RADIUS/UV_SCALE/scale);\n        color = clamp(color + .5*(on_circle+on_scaled)*COLOR_MINIMAP_CIRCLE, 0., 1.);\n        fragColor = vec4(color, 1.);\n        return;\n    }\n\n\n    //----------\n    // Main Area\n    // Draw mandelbrot set\n    vec3 color = mandelbrot(scaled_uv);\n    float center_r = distance(center_uv, uv);\n    // Draw circle\n    float R  = CIRCLE_RADIUS;\n    float Rd = 2.*uv_pixel; // Anti-Alias : 2pixel\n    float on_circle = smoothstep(R-Rd, R, center_r) - smoothstep(R, R+Rd, center_r);\n    color = mix(color, COLOR_CIRCLE, on_circle);\n\n    fragColor = vec4(color, 1.);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// -------------------\n// BufferA\n//   xy=center, z=zoom\n\nconst float ZOOM_SPEED = .1;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from -2 to 2)\n    vec2 uv       = UV_SCALE * (-iResolution.xy + 2.*fragCoord.xy)/iResolution.x;\n    // Mouse\n    vec2 mouse_uv = UV_SCALE * (-iResolution.xy + 2.*iMouse.xy)/iResolution.x;\n\n    // Read BufferA\n    //   xy=center, z=zoom\n    vec3 bufA = texelFetch(iChannel0, ivec2(0, 0), 0).xyz;\n\n    // Zoom\n    // 2^0(=x1) ... 2^8(=x256)\n    bufA.z += ZOOM_SPEED*(keyDown(KEY_PAGEUP)-keyDown(KEY_PAGEDOWN));\n    bufA.z += ZOOM_SPEED*(keyDown(KEY_UP)-keyDown(KEY_DOWN));\n    float reset = (1. - keyClick(KEY_SPACE)) * (1. - keyClick(KEY_ESC));\n    bufA.z *= reset;\n    bufA.z = clamp(bufA.z, 0., 8.);\n    float scale = exp2(bufA.z);\n\n    // Circle\n    if (reset == 0.) {\n        bufA.xy = mouse_uv;\n    } else if (all(notEqual(iMouse.xy, iMouse.zw))) {\n        // (Drag)\n        // Keep position\n    } else {\n        // (Click)\n        // Move to click position\n        vec2 center_uv = bufA.xy;\n        float center_r = distance(mouse_uv, center_uv);\n        if (center_r > CIRCLE_RADIUS || bufA.z == 0.) {\n            // Outside\n            bufA.xy = mouse_uv;\n        } else {\n            // Inside\n            // Read BufferB\n            //   xy=scaled_uv\n            vec2 scaled_uv = texelFetch(iChannel1, ivec2(iMouse.xy), 0).xy;\n            bufA.xy = scaled_uv;\n        }\n    }\n\n    // Write BufferA\n    fragColor = vec4(bufA, 1.);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const float CIRCLE_RADIUS = 1.00; // \nconst float UV_SCALE = 2.;        // UV (u = -2 ... 2) \nconst int LOOP = 256;             // Mandelbrot loop\nconst float MINIMAP_SIZE = 0.5;   // Size of mini map box \nconst vec3 COLOR_MANDELBROT_EDGE = vec3(1.0, 1.0, 1.0);\nconst vec3 COLOR_MANDELBROT_BACK = vec3(0.0, 0.0, 0.1);\nconst vec3 COLOR_CIRCLE          = vec3(1.0, 0.0, 0.0);\nconst vec3 COLOR_MINIMAP_CIRCLE  = vec3(0.5, 0.0, 0.0);\nconst vec3 COLOR_MINIMAP_BACK    = vec3(0.1, 0.1, 0.1);\n\nconst float PI  = 3.141592;\n\n\n// Keyboard\n//\n// FYI: LEFT:37  UP:38  RIGHT:39  DOWN:40   PAGEUP:33  PAGEDOWN:34  END : 35  HOME: 36\n// Modifiers: SHIFT: 16 CTRL: 17 ALT: 18\n// Advice:  Mode: keyToggle(key)  Action: keydown(key)+keyclick(modifier)\nconst int KEY_ESC      = 27;\nconst int KEY_SPACE    = 32;\nconst int KEY_PAGEUP   = 33;\nconst int KEY_PAGEDOWN = 34;\nconst int KEY_LEFT     = 37;\nconst int KEY_UP       = 38;\nconst int KEY_RIGHT    = 39;\nconst int KEY_DOWN     = 40;\n#define keyToggle(ascii)  texelFetch(iChannel2,ivec2(ascii,2),0).x\n#define keyClick(ascii)   texelFetch(iChannel2,ivec2(ascii,1),0).x\n#define keyDown(ascii)    texelFetch(iChannel2,ivec2(ascii,0),0).x\n#define shift             texelFetch(iChannel2,ivec2(16,0),0).x\n#define ctrl              texelFetch(iChannel2,ivec2(17,0),0).x\n#define alt               texelFetch(iChannel2,ivec2(18,0),0).x\n#define modifier          ( int(shift) +2*int(ctrl) + 4*int(alt) )\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//---------------\n// BufferB\n//   xy=scaled_uv\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from -2 to 2)\n    vec2 uv = UV_SCALE * (-iResolution.xy + 2.*fragCoord.xy)/iResolution.x;\n    // Mouse\n    vec2 mouse_uv = UV_SCALE * (-iResolution.xy + 2.*iMouse.xy)/iResolution.x;\n    float mouse_r = distance(mouse_uv, uv);\n\n    // Read BufferA\n    //   xy=center, z=zoom\n    vec3 bufA = texelFetch(iChannel0, ivec2(0, 0), 0).xyz;\n    vec2 center_uv = bufA.xy;\n    float center_r = distance(center_uv, uv);\n    float scale = exp2(bufA.z);\n\n    // Scaled UV\n    // Shift center postion\n    vec2 shift_uv = -1. * (mouse_uv - center_uv) / scale;\n    vec2 scaled_uv = (center_r <= CIRCLE_RADIUS) ? mix(center_uv+shift_uv, uv+shift_uv, 1./scale) : uv;\n\n    // Write BufferB\n    fragColor = vec4(scaled_uv, 1., 1.);\n}","name":"Buffer B","description":"","type":"buffer"}]}