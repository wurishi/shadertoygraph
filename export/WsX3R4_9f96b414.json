{"ver":"0.1","info":{"id":"WsX3R4","date":"1545402316","viewed":461,"name":"Snake Knot","username":"gaz","description":"3d","likes":15,"published":1,"flags":8,"usePreview":0,"tags":["knot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 a,b,o;\n\nvec3 rotate(vec3 p,vec3 n,float a)\n{\n\tn = normalize(n);\n    vec3 v = cross(p, n), u = cross(v, n); \n    return u * cos(a) + v * sin(a) + n * dot(p, n);   \n}\n\nmat3 lookat(vec3 e, vec3 t)\n{\n\tvec3 w = normalize(t-e);\n\tvec3 u = normalize(cross(w,vec3(0,1,0)));\n    return mat3(u, cross(u,w), w);\n}\n\nvec2 randomVec(float n) \n{\n    float a = sin(mod(n, 6.283)) * 6.283;\n    return vec2(cos(a), sin(a));    \n} \n\nvec2 randomWalk(float t)\n{\n    vec2 p = vec2(0);\n    float n = 23532.682;\n    for (int i=0; i<6; i++)\n    {\n    \tp += randomVec(n) * cos(t)+  randomVec(n*2.356) * sin(t);\n    \tn +=12.78; t *= 1.36456;\n    }\n    return p;\n}\n\nvec3 knot(float t)\n{\n  t *= 6.283;\n\treturn vec3(\n    sin(t)+2.0*sin(2.0*t),\n    cos(t)-2.0*cos(2.0*t),\n    -sin(3.0*t)\n  );\n}\n\nvec3 snake(float t)\n{\n\tt+=sin(iTime*0.3);\n\tt*=6.283;\n\treturn vec3(\n\t\tsin(2.0*sin(iTime*0.5)*t+0.5*sin(iTime*0.5)*sin(2.0*t)),\n\t\tcos(2.0*sin(iTime*0.5)*t+0.2*sin(3.0*t)),\n\t\tsin(t+0.5*sin(sin(iTime*3.0)*2.0*t)));\n}\n\nvec3 func(float t) {\n\treturn rotate(\n\t\tmix(snake(t),knot(t)*0.3,min(1.0,pow(fract(iTime*0.3),2.0)+0.2)),\n\t\tvec3(1), iTime*0.8)*5.0;\n}  \n\nfloat map(vec3 p)\n{\n   \tvec3 ba = b - a;\n   \tfloat h = clamp(dot(p-a, ba) / dot(ba, ba), 0.0, 1.0);\n  \tp -= a + ba * h;\n   \tvec3 w = normalize(ba);\n    vec3 u = normalize(cross(o, w));\n   \tp *= mat3(u, cross(w, u), w);\n    float de =  length(max(abs(p.xy)-vec2(0.3),0.0));\n    return length(max(vec2(de, abs(p.z)),0.0))-0.3;\n}\n\nvec3 calcNormal(vec3 p){\n \tvec2 e = vec2(1, -1) * 0.002;\n  \treturn normalize(\n    \te.xyy*map(p+e.xyy)+e.yyx*map(p+e.yyx)+ \n    \te.yxy*map(p+e.yxy)+e.xxx*map(p+e.xxx)\n\t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n\tvec3 rd = normalize(vec3(p,2));\n\tvec3 ro = vec3(0,0,15.0+randomWalk(iTime*5.0).x*2.0);\n\trd = lookat(ro, vec3(randomWalk(iTime*5.)*.3, 0.0)) * rd;\n\tvec3 col = vec3(0.5);\n\tfloat z=50.0;\n\tfloat itr =100.0;\n\tfor (float j=0.0; j<itr;j++)\n\t{\n\t\ta= func(j/itr);\n\t\tb =func((j+1.0)/itr);\n\t\to= a+(b-a)/2.0;\n\t\tfloat offset = 0.7;\n\t\tif (\n\t\t\tall(\n\t\t\t\tgreaterThan(\n\t\t\t\t\tvec2(length(cross(b-a,normalize(o-rd)))/2.0+offset,offset),\n\t\t\t\t\tvec2(\n\t\t\t\t\t\tlength(cross(rd,o-ro)),\n\t\t\t\t\t\tabs(dot(o-ro,normalize(cross(rd,normalize(b-a)))))\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t{\n\t\t\tfloat ITR = 100.0;\n\t\t\tvec3 d =ro;\n\t\t\tfloat t=0.0,x;\n\t\t\tfloat i;\n \t\t\tfor( i = 0.0; i < ITR; i++)\n  \t\t\t{\n\t    \t\tt += x =map(d);\n       \t\t\tif(x < 0.001 || t > 30.0) break;\n\t\t\t\td+=rd*x;\n  \t\t\t}\n  \t\t\tif(x < 0.001)\n  \t\t\t{\n\t\t\t\tfloat s = dot(rd, d-ro);\n\t\t\t\tif(s<z)\n\t\t\t\t{\n\t\t\t\t \tvec3 nor = calcNormal(d);\n\t\t\t\t\tvec3 li = normalize(vec3(0.9,0.5,0.2));\n\t\t\t\t\tcol=  pow(1.0 - i / ITR, 3.0)*(vec3(1)); \n\t\t\t\t\tcol *= clamp(dot(nor, li), 0.3, 1.0);\n        \t\t\tcol *= max(0.5 + 0.5 * nor.y, 0.0);\n        \t\t\tcol += pow(clamp(dot(\n                        reflect(normalize(d - ro), nor), li), 0.0, 1.0), 20.0);\n       \t\t\t\tcol = clamp(col,0.0,1.0);\n\t\t\t\t\tcol = pow(col, vec3(2,2,1.5)*0.5); \n\t\t\t\t\tz=s;\n\t\t\t\t}\n\n\t\t\t}\t\n\t\t}\n\t}   \n    col *= sin(p.y * 300.0 - iTime * 5.0) * 0.2 + 0.9;\n    col *= max(2.4 - length(p), 0.0);\n\tfragColor=vec4(col,1);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define BPM 140.\n#define A (15./BPM)\n\nfloat adsr(float t, float a, float d, float s, float r, float gt)\n{  \n    return max(0.0,\n    \tmin(1.0, t/max(1e-4, a)) \n        - min((1.0 - s) ,max(0.0, t - a)*(1.0 - s)/max(1e-4, d))\n        - max(0.0, t - gt)*s/max(1e-4, r));\n}\n\nfloat noise(float t)\n{\n    return fract(sin(t*45678.0)*1234.5)*2.0-1.0;\n}\n\nfloat square(float f)\n{\n\treturn sign(fract(f)-0.5);\n}\n\nfloat kick(float t){\n\treturn sin(315.0*t-10.0*exp(-50.0*t))*adsr(t,0.0, 0.3, 0.0, 0.0, 0.0);\n\t\t\t+0.2*square(50.0*t)* adsr(t,0.0, 0.05, 0.0, 0.0, 0.0);\n}\n\nfloat snare(float t)\n{\n    return noise(t)*adsr(t,0.01, 0.1, 0.0, 0.0, 0.0);\n}\n\nfloat closeHihat(float t)\n{\n    return noise(t)*adsr(t,0.0, 0.03, 0.0, 0.0, 0.0);\n}\n\nfloat openHihat(float t)\n{\n    return noise(t)*adsr(t,0.0, 0.05, 0.5, 0.03, 0.03);\n}\n\nfloat sequence(int s,float t)\n{\n  float n =mod(t,A);\n  for(int i=0;i<16;i++){\n    if((s>>(int(t/A)-i)%16&1)==1)break;\n    n+=A;\n  }\n  return n;\n}\n\n#define Rhythm2Int(v,a)v=0;for(int i=0;i<16;i++)v+=a[i]<<i;\n\nvec2 mainSound( in int samp, float time )\n{   \n    \n    int[4] r_kick;       // int[](0x0c05,0x0c05,0x0405,0x0c0c)\n    int[4] r_snare;      // int[](0x9290,0x9290,0x4290,0x4292)\n    int[4] r_closeHihat; // int[](0x5555,0x5555,0x5555,0x5155)\n    int[4] r_openHihat;  // int[](0x0000,0x0000,0x0000,0x0400)\n    int[4] r_velocity;   // int[](0x3030,0x3030,0x3030,0x3030)\n        \n    Rhythm2Int( r_kick[0],       int[]( 1,0,1,0, 0,0,0,0, 0,0,1,1, 0,0,0,0 ))\n    Rhythm2Int( r_snare[0],      int[]( 0,0,0,0, 1,0,0,1, 0,1,0,0, 1,0,0,1 ))\n    Rhythm2Int( r_closeHihat[0], int[]( 1,0,1,0, 1,0,1,0, 1,0,1,0, 1,0,1,0 ))\n    Rhythm2Int( r_openHihat[0],  int[]( 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0 ))\n    Rhythm2Int( r_velocity[0],   int[]( 0,0,0,0, 1,1,0,0, 0,0,0,0, 1,1,0,0 ))\n        \n    Rhythm2Int( r_kick[1],       int[]( 1,0,1,0, 0,0,0,0, 0,0,1,1, 0,0,0,0 ))\n    Rhythm2Int( r_snare[1],      int[]( 0,0,0,0, 1,0,0,1, 0,1,0,0, 1,0,0,1 ))\n    Rhythm2Int( r_closeHihat[1], int[]( 1,0,1,0, 1,0,1,0, 1,0,1,0, 1,0,1,0 ))\n    Rhythm2Int( r_openHihat[1],  int[]( 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0 ))\n    Rhythm2Int( r_velocity[1],   int[]( 0,0,0,0, 1,1,0,0, 0,0,0,0, 1,1,0,0 ))\n\n    Rhythm2Int( r_kick[2],       int[]( 1,0,1,0, 0,0,0,0, 0,0,1,0, 0,0,0,0 ))\n    Rhythm2Int( r_snare[2],      int[]( 0,0,0,0, 1,0,0,1, 0,1,0,0, 0,0,1,0 ))\n    Rhythm2Int( r_closeHihat[2], int[]( 1,0,1,0, 1,0,1,0, 1,0,1,0, 1,0,1,0 ))\n    Rhythm2Int( r_openHihat[2],  int[]( 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0 ))\n    Rhythm2Int( r_velocity[2],   int[]( 0,0,0,0, 1,1,0,0, 0,0,0,0, 1,1,0,0 ))\n\n    Rhythm2Int( r_kick[3],       int[]( 0,0,1,1, 0,0,0,0, 0,0,1,1, 0,0,0,0 ))\n    Rhythm2Int( r_snare[3],      int[]( 0,1,0,0, 1,0,0,1, 0,1,0,0, 0,0,1,0 ))\n    Rhythm2Int( r_closeHihat[3], int[]( 1,0,1,0, 1,0,1,0, 1,0,0,0, 1,0,1,0 ))\n    Rhythm2Int( r_openHihat[3],  int[]( 0,0,0,0, 0,0,0,0, 0,0,1,0, 0,0,0,0 ))\n    Rhythm2Int( r_velocity[3],   int[]( 0,0,0,0, 1,1,0,0, 0,0,0,0, 1,1,0,0 ))\n    \n    int i = int(floor(time/(A*16.)))&3;\n    int velocity = r_velocity[i]>>(int(floor(time/A))&15)&1;\n    float vol = 0.2 *(1.0+0.5*float(velocity));\n    return vec2(\n        0.0\n\t\t+0.4 * kick(sequence(       r_kick[i],       time))\n       \t+0.3 * snare(sequence(      r_snare[i],      time))\n       \t+vol * closeHihat(sequence( r_closeHihat[i], time))\n        +vol * openHihat(sequence(  r_openHihat[i],  time))\n    );\n}\n","name":"Sound","description":"","type":"sound"}]}