{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"channel":1,"type":"texture","id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// \"Portal\" 2 Menu Box Flip\n// Copyleft {c} 2015 Michael Pohoreski\n\n// In case you are wondering about these \"ShaderToy #define Shims\" ...\n// my original WebGL shader had these uniforms and varyings.\n// We can use a simple shim to make it ShaderToy Friendly. :-)\n//precision mediump float;                      \n//uniform mediump float     unTime;             \n//uniform mediump float     unDuration;         \n//uniform         sampler2D utDiffuse1;         \n//uniform         sampler2D utDiffuse2;         \n//uniform lowp    vec2      uvResolution;       \n//varying lowp    vec2      vvTexCoord;         \n#define vvTexCoord fragCoord.xy / iResolution.xy\n#define unTime     iTime\n#define unDuration 10.0\n#define utDiffuse1 iChannel0\n#define utDiffuse2 iChannel1\n\n\nconst float n = 8.;                              // number boxes\nconst float s = 1. / n;                          // box size in texels\nconst float pi = 3.14159265358979;               \nconst float _90 = 0.5 * pi;                      // 90 degrees\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {                                    \n    vec2  p = vvTexCoord;                        \n    p.y = 1. - p.y; // Shader Toy\n//  float t = min( 1., 2. *     unTime                 / unDuration); // one-time\n    float t = min( 1., 2. * mod(unTime,0.5*unDuration) / unDuration); // repeat\n    vec2  b = mod( p, s );                       // offset in box\n    vec2  i = floor( p / s );                    // box#\n    float cells = (2.*n - 2.);                   \n    float delay = (i.x + i.y) / cells;           \n    t -= 0.5*delay;                              \n    float a = _90*t;                             // 90 degrees * t\n    float rate = (cells - (i.x + i.y)) / cells;  \n    rate *= n/2.;                                // how fast first cell turns\n    rate += n/2.;                                // how fast last cell turns: min 2.0\n    a *= rate;                                   \n    a = min( _90, a );                           \n    a = max( 0.0, a );                           \n    float ca = cos(a);                           \n    float sa = sin(a);                           \n    const float w = 0.5*s;                       // half box size in world space\n    vec2 l = vec2( -w,  w );                     // pre top-left\n    vec2 m = vec2(  w,  w );                     // pre top-right\n    vec2 r = vec2(  w, -w );                     // pre bot-right\n    vec2 L = vec2( l.x*ca - l.y*sa, l.x*sa+ l.y*ca );// post top-left\n    vec2 M = vec2( m.x*ca - m.y*sa, m.x*sa+ m.y*ca );// post top-right\n    vec2 R = vec2( r.x*ca - r.y*sa, r.x*sa+ r.y*ca ); // post bot-right\n    float Fx = b.x - w;                          \n    if( Fx < M.x ) {                             \n        float dx = Fx - L.x;                     \n        float dy = tan(a)*dx;                    // y1-y0=m(x1-x0)\n        float d = sqrt( (dx*dx) + (dy*dy) );     \n        p.x = i.x*s + d;                         \n        fragColor = texture(utDiffuse1,p);  \n    } else {                                     // image2 rotating towards\n        float ex = Fx - M.x;                     \n        float ey = tan(a + _90)*ex;              \n        float e = sqrt( (ex*ex) + (ey*ey) );     \n        p.x = i.x*s + e;                         \n        fragColor = texture(utDiffuse2,p);  \n    }                                            \n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4tX3W4","date":"1421900324","viewed":2112,"name":"Portal 2 Menu Box Flip","username":"MichaelPohoreski","description":"My implementation of the Portal 2 Menu Box Flip transition.\nChanged default to be repeat","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["2d","vfx","box"],"hasliked":0,"parentid":"","parentname":""}}