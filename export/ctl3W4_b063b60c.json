{"ver":"0.1","info":{"id":"ctl3W4","date":"1671766331","viewed":80,"name":"3d sphere 2","username":"andrerm2k","description":"3d sphere with raymarch and rotation tricks","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarch","sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nmat3 lookAtMatrix(vec3 from, vec3 to)\n{\n    vec3 forward = normalize(to - from);\n    vec3 right = normalize(cross(forward, vec3(0.0, 1.0, 0.0)));\n    vec3 up = cross(right, forward);\n    return mat3(right, up, forward);\n}\n\nfloat sdf(vec3 position) {\n    return length(position) - 1.0;\n}\n\nvec3 normal(vec3 position)\n{\n    float epsilon = 0.001;\n    vec3 gradient = vec3(\n        sdf(position + vec3(epsilon, 0, 0)) - sdf(position + vec3(-epsilon, 0, 0)),\n        sdf(position + vec3(0, epsilon, 0)) - sdf(position + vec3(0, -epsilon, 0)),\n        sdf(position + vec3(0, 0, epsilon)) - sdf(position + vec3(0, 0, -epsilon)));\n    return normalize(gradient);\n}\n\nfloat raycast(vec3 rayOrigin, vec3 rayDirection)\n{\n    int stepCount = 128 * 3;\n    float maximumDistance = 5.0;\n    float t = 0.0;\n    for (int i = 0; i < stepCount; i++)\n    {\n        if (t > maximumDistance)\n        {\n            break;\n        }\n        vec3 currentPosition = rayOrigin + rayDirection * t;\n        float d = sdf(currentPosition);\n        if (d < 0.0001)\n        {\n            return t;\n        }\n        t += d;\n    }\n    return 0.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float delta = (1.0/5.0) * (1.0/60.0) * (2.0 * 3.1415);\n    float time = delta * float(iFrame);\n    vec3 cameraPosition = vec3(sin(time), 0.0, cos(time));\n\n    vec3 targetPosition = vec3(0.0);\n    vec3 rayOrigin = vec3(0.0, 0.0, 4.0);\n    \n    mat3 eyeTransform = lookAtMatrix(cameraPosition, targetPosition);\n    rayOrigin = eyeTransform * rayOrigin;\n    \n    mat3 cameraTransform = lookAtMatrix(rayOrigin, targetPosition);\n    vec3 result = vec3(0.0);\n    const float quality = 3.0;\n    ivec2 sampleCount = ivec2(quality, quality);\n    for (int y = 0; y < sampleCount.y; y++)\n    {\n        for (int x = 0; x < sampleCount.x; x++)\n        {\n            vec2 uv = fragCoord + (vec2(float(x), float(y)) / vec2(sampleCount) - 0.5);\n            \n            uv = uv / iResolution.xy;\n            uv = (uv * 2.0) - 1.0;\n            uv.x *= iResolution.x / iResolution.y;\n            \n            vec3 rayDirection = normalize(vec3(uv, 1.5));\n            rayDirection = cameraTransform * rayDirection;\n            float t = raycast(rayOrigin, rayDirection);\n            vec3 color = vec3(0.0);\n            if (t > 0.0)\n            {\n                vec3 position = rayOrigin + rayDirection * t;\n                vec3 n = normal(position);\n                vec3 lightPosition = 1.0 * normalize(vec3(1.0, 1.0, 1.0));\n                \n                // diffuse\n                vec3 diffuseColor = 1.0 * normalize(vec3(1.0, 0.0, 0.0));\n                float diffuseAngle = max(dot(n, lightPosition), 0.0);\n                color = diffuseColor * diffuseAngle; // arrow\n                \n                // ambient\n                vec3 ambientColor = 0.1 * normalize(vec3(1, 1, 2));\n                color += ambientColor * ((n.y + 1.0) * 0.5);\n                \n                // specular\n                float specularStrength = 30.0;\n                vec3 specularColor = ambientColor;//normalize(vec3(1.0, 1.0, 1.0));\n                vec3 reflectDir = reflect(lightPosition, n);\n                float spec = pow(max(dot(rayDirection, reflectDir), 0.0), 32.0);\n                vec3 specular = specularStrength * spec * specularColor;\n                color += specular;\n            }\n            // gamma\n            color = sqrt(color);\n            result += color;\n        }\n    }\n    result /= float(sampleCount.x * sampleCount.y);\n    fragColor = vec4(result, 1.0);\n}","name":"Image","description":"","type":"image"}]}