{"ver":"0.1","info":{"id":"ft2yDR","date":"1649487825","viewed":310,"name":"Accumulation-based Motion Blur","username":"novogrammer","description":"Accumulation-based Motion Blur Study","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["blur","motion","accumulation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Copy from Buffer A\n    vec4 col =texture(iChannel0,uv);\n\n    // Output to screen\n    fragColor = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n\nconst float targetTime = 0.1;\n// weight after targetTime seconds.\nconst float targetWeight = 0.5;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    /*\n    pow(weight, iFrameRate * targetTime) = targetWeight\n    log(targetWeight) / log(weight) = iFrameRate * targetTime\n    log(targetWeight) / (iFrameRate * targetTime) = log(weight)\n    exp(log(targetWeight) / (iFrameRate * targetTime)) = weight\n    */\n\n    float weight = exp(log(targetWeight) / (iFrameRate * targetTime));\n    \n    vec4 col = \n        mix(\n            texture(iChannel0,uv),\n            texture(iChannel1,uv),\n            weight\n        );\n\n    fragColor = col;\n}","name":"Buffer A","description":"","type":"buffer"}]}