{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"cubemap","id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}},{"channel":1,"type":"texture","id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"vec3 ambientColor = vec3(0.8, 0.6, 0.4);\nvec3 diffuseColor = vec3(1.6, 1.2, 0.8);\nvec3 specularColor = vec3(1.2, 0.75, 0.3);\nvec3 light1Dir = normalize(vec3(0.45, 0.15, -1.0));\nvec3 light2Dir = normalize(vec3(-1.55, 0.3, 1.5));\n\nconst float sphereRadius = 1.0;\nvec3 spherePos = vec3(0.0, sphereRadius, 0.5);\n\nfloat raytraceSphere(in vec3 ro, in vec3 rd, float tmin, float tmax) {\n    vec3 ce = ro - spherePos;\n    float b = dot(rd, ce);\n    float c = dot(ce, ce) - (sphereRadius * sphereRadius);\n    float t = b * b - c;\n    if (t > tmin) {\n        t = -b - sqrt(t);\n        if (t < tmax)\n            return t;\n    }\n    return -1.0;\n}\n\nfloat specular(in vec3 rd, in vec3 norm, in vec3 lightDir, float roughness, float fresnel) {\n\n    float NdotL = dot(norm, lightDir);\n    float NdotV = dot(norm, -rd);\n\n    float spe = 0.0;\n    if (NdotL > 0.0 && NdotV > 0.0) {\n\n        vec3 h = normalize(-rd + lightDir);\n\n        float NdotH = max(dot(norm, h), 0.0);\n        float VdotH = max(dot(-rd, h), 0.000001);\n        float LdotH = max(dot(lightDir, h), 0.000001);\n\n        // Beckmann distrib\n        float cos2a = NdotH * NdotH;\n        float tan2a = (cos2a - 1.0) / cos2a;\n        float r = max(roughness, 0.01);\n        float r2 = r * r;\n        float D = exp(tan2a / r2) / (r2 * cos2a * cos2a);\n\n        // Fresnel term - Schlick approximation\n        float F = fresnel + (1.0 - fresnel) * pow(1.0 - VdotH, 5.0);\n\n        // Geometric attenuation term\n        float G = min(1.0, (2.0 * NdotH / VdotH) * min(NdotV, NdotL));\n\n        // Cook Torrance\n        spe = D * F * G / (4.0 * NdotV * NdotL);\n    }\n\n    return spe;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 p = (-iResolution.xy + 2.0 * fragCoord.xy) / iResolution.y;\n\n    vec3 eye = vec3(0.0, 1.0, 2.0);\n    vec2 rot = 6.2831 * (vec2(0.6 + iTime * 0.025, sin(iTime * 0.1) * 0.06) + vec2(1.0, 0.0) * (iMouse.xy - iResolution.xy * 0.5) / iResolution.x);\n    eye.yz = cos(rot.y) * eye.yz + sin(rot.y) * eye.zy * vec2(-1.0, 1.0);\n    eye.xz = cos(rot.x) * eye.xz + sin(rot.x) * eye.zx * vec2(1.0, -1.0);\n\n    vec3 ro = eye;\n    vec3 ta = vec3(0.0, 1.0, 0.0);\n\n    vec3 cw = normalize(ta - eye);\n    vec3 cu = normalize(cross(vec3(0.0, 1.0, 0.0), cw));\n    vec3 cv = normalize(cross(cw, cu));\n    mat3 cam = mat3(cu, cv, cw);\n\n    vec3 rd = cam * normalize(vec3(p.xy, 1.0));\n\n    vec3 color = texture(iChannel0, rd).xyz;\n\n    float tmin = 0.1;\n    float tmax = 50.0;\n    float t = raytraceSphere(ro, rd, tmin, tmax);\n    if (t > tmin) {\n        vec3 pos = ro + rd * t;\n        vec3 norm = normalize(pos - spherePos);\n        float occ = 0.5 + 0.5 * norm.y;\n\n        float roughness = 0.15;\n        float fresnel = 0.85;\n\n        float amb = clamp(0.5 + 0.5 * norm.y, 0.0, 1.0);\n        float dif1 = clamp(dot(light1Dir, norm), 0.0, 1.0);\n        float spe1 = specular(rd, norm, light1Dir, roughness, fresnel);\n        float dif2 = clamp(dot(light2Dir, norm), 0.0, 1.0);\n        float spe2 = specular(rd, norm, light2Dir, roughness, fresnel);\n        float fre = fresnel + (1.0 - fresnel) * pow(1.0 - dot(norm, -rd), 5.0);\n\n        vec3 light1Color = dif1 * diffuseColor * occ;\n        light1Color += dif1 * spe1 * specularColor * occ;\n        vec3 light2Color = dif2 * diffuseColor * occ;\n        light2Color += dif2 * spe2 * specularColor * occ;\n\n        vec3 cub = texture(iChannel0, reflect(rd, norm)).xyz;\n        cub = mix(cub, vec3(0.4, 0.6, 0.8), 0.25);\n        vec2 uv = vec2(atan(norm.x, norm.z), acos(norm.y));\n        color = texture(iChannel1, uv).xyz * occ;\n        color += amb * ambientColor * occ;\n        color += light1Color;\n        color += light2Color;\n        color *= pow(cub, vec3(5.0)) * fre;\n\n        vec3 gamma = vec3(1.0 / 2.2);\n        color = pow(color, gamma);\n    }\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ltf3D2","date":"1425200709","viewed":417,"name":"Metal Sphere","username":"jimmikaelkael","description":"An attempt of metal sphere. 2 directional lights with Cook Torrance specular.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["sphere","metal","cook","torrance"],"hasliked":0,"parentid":"","parentname":""}}