{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"\n#define PI 3.1415926535\n\n#define ROT2(ANG) mat2(cos(ANG),sin(ANG),-sin(ANG),cos(ANG))\n\n#define max3(A,B,C) max(max(A,B),C)\n\nfloat sdSphere(vec3 p,float s) {\n    return length(p)-s;\n}\n\nfloat sdBox(vec3 p,vec3 s) // box by distance from middle\n{\n    p = abs(p) - s;\n    return max3(p.x,p.y,p.z);\n}\n\nfloat sdBox(vec3 p,vec3 a,vec3 b) { // box by 2 corners\n    return sdBox(p-(a+b)/2.,abs(b-a)/2.);\n}\n\nfloat sdGrid(vec3 p,int w,int h,float spc,float thk) {\n    float d = 1e9, t;\n    for ( int x=0;x<=w;++x) {\n        t = sdBox(p,vec3(float(x)*spc,0,0),vec3(float(x)*spc+thk,float(h)*spc+thk,thk));\n        if ( t < d ) d = t;\n    }\n    for ( int y=0;y<=h;++y) {\n        t = sdBox(p,vec3(0,float(y)*spc,0),vec3(float(w)*spc+thk,float(y)*spc+thk,thk));\n        if ( t < d ) d = t;\n    }\n    return d;\n}\n\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r ) // https://www.shadertoy.com/view/Xds3zN from iq\n{\n\tvec3 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h ) - r;\n}\n\n#define T(SDF) if ( (tmp = SDF) < hit.x ) hit = vec2(tmp,clr); clr += 1.;\n#define C(SDF,CLR) if ( (tmp = SDF) < hit.x ) hit = vec2(tmp,CLR);\n\nint recur = 0;\nvec2 DistA(vec3 p) {\n    vec2 hit = vec2(100000,0);\n    float tmp, clr = 0.;\n    C(sdSphere(p-vec3(-10,0,0),2.),1999.)\n    C(sdSphere(p-vec3(-9.88,0,0),1.9),1330.)\n    C(sdSphere(p-vec3(-9.45,0,0),1.5),1000.)\n    C(sdGrid((p-vec3(0,-5,-5)).yzx,9,12,1.,.2),1005.)\n    C(sdCapsule(p,vec3(-9,0,0),vec3(5,sin(iTime*5.)*7.,cos(iTime*.5)*7.),.1),1800.)\n    return hit;\n}\n \nvec2 Dist(vec3 p) {\n    vec2 hit = vec2(-p.z+100.,1353.), tmp;\n    \n    p.x += 3.;\n    \n    p.yz *= ROT2(-.5);\n    p.xz *= ROT2(1.5);\n    p.xz *= ROT2(sin(iTime*.5)*.5-1.);\n\n    tmp = DistA(p);\n    if ( tmp.x < hit.x ) hit = tmp;\n    \n    p.xz *= ROT2(-PI/3.);\n    p *= 2.;\n    p -= vec3(10,0,20);\n    tmp = DistA(p);\n    tmp.x /= 2.;\n    if ( tmp.x < hit.x ) hit = tmp;\n\n    p.xz *= ROT2(-PI/3.);\n    p *= 2.;\n    p -= vec3(10,0,20);\n    tmp = DistA(p);\n    tmp.x /= 4.;\n    if ( tmp.x < hit.x ) hit = tmp;\n    \n    p.xz *= ROT2(-PI/3.);\n    p *= 2.;\n    p -= vec3(10,0,20);\n    tmp = DistA(p);\n    tmp.x /= 8.;\n    if ( tmp.x < hit.x ) hit = tmp;\n\n    p.xz *= ROT2(-PI/3.);\n    p *= 2.;\n    p -= vec3(0,0,20);\n    tmp = DistA(p);\n    tmp.x /= 16.;\n    if ( tmp.x < hit.x ) hit = tmp;\n    \n    return hit;\n}\n\nvec4 March(vec3 beg,vec3 dir) {\n    float dist = 0.;\n    vec3 pos;\n    #define LIMIT 100\n    for ( int stps = 0; stps <= LIMIT; ++stps ) {\n        pos = beg + dir * dist;\n        vec2 obj = Dist( pos );\n        dist += obj.x;\n        if ( obj.x < .001 || stps == LIMIT ) return vec4( pos, obj.y );\n    }\n    return vec4( pos, 90. );\n}\n\nvec3 Normal(vec3 pt) {\n    float delta = .001; // large delta gives rounded corners\n    vec3 norm = Dist(pt).x - vec3(\n        Dist(pt-vec3(delta, 0., 0.)).x, \n        Dist(pt-vec3( 0.,delta, 0.)).x, \n        Dist(pt-vec3( 0., 0.,delta)).x );\n    return normalize( norm );\n}\n\nfloat pow2n(float i,int n)\n{\n  while ( n-- > 0 ) i *= i;\n  return i;\n}\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy;\n    vec2 uv = (U+U-R) / min(R.x,R.y);  // -1 ... +1\n    uv /= 7.;\n    \n    vec3 cam = vec3( 0, 0, -64.);\n    vec3 camdir = normalize( vec3( uv, 1. ) );\n    \n    vec4 hit = March( cam, camdir );\n    vec3 norm = Normal(hit.xyz);\n    \n    vec3 light = vec3( 0, 10, -10 );\n    vec3 dir = normalize( light - hit.xyz );\n    float difu = dot( norm, dir );\n    \n    difu = .5 + .5*difu;\n    \n    #define col4(X) ( .5 + .3 * sin( vec4(0,21,23,0) + (X) ) )\n    vec4 clr = \n      hit.w >= 1000.\n        ?  vec4( int(hit.w)/100%10, int(hit.w)/10%10, int(hit.w)%10, 10 ) / 10.\n        : col4(hit.w*.4);\n    O = sqrt(clr);\n    O *= difu + pow2n(difu,9);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"McKfDt","date":"1734629185","viewed":149,"name":"How shaders work","username":"dray","description":"You compute a 3D projection on the screen of a scene of a ...\n\n(joke)","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","sdf","joke"],"hasliked":0,"parentid":"","parentname":""}}