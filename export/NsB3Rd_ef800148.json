{"ver":"0.1","info":{"id":"NsB3Rd","date":"1653472119","viewed":123,"name":"Fire Cube XNikon","username":"xnikon","description":"mda","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["cg"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0,uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0,uv) + texture(iChannel1,uv);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rr","filepath":"/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","previewfilepath":"/media/ap/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","type":"volume","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// менять текстуры внизу (iChannel0,....)\n\nconst float INF = 1e10;\nvec3 randDir; \nvec3 flamecol;\nvec3 CAMERA_POS = vec3(1,1.2,-6); //тут меняешь позицию камеры (лучше не трогать)\nvec3 LIGHT1_POS = vec3(0.85,1.4,4); // тут меняешь позицию освещения луны\nconst float LIGHT1_RADIUS = 0.5; \nvec3 LIGHT1_COLOR = vec3(0,0.4,1); //цвет осв 2\nvec3 LIGHT2_POS = vec3(-2.2,1.4,4);// тут меняешь позицию освещения зеленое - позицию\nconst float LIGHT2_RADIUS = 0.55; \nconst vec3 LIGHT2_COLOR = vec3(1.1,0.7,0.7); //цвет осв 1\nconst int EMISSION = 0; \nconst int DIFFUSE = 1; \nconst int REFLECTION = 2;\nconst int REFRACTION = 3; \nconst float GLASS_N = 1.5; \nconst float AIR_N = 1.0;\nconst float DIAMOND_N = 2.5;\nconst float WATER_N = 1.0; \nconst float EPS = 0.0000001; \n\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\nfloat t = (-1.2 - pos.y) / dir.y;\n    if ( t<=0.0) { \n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz,worldPos.xz) >= 100.0){\n        return INF;\n    }\n    normal = vec3(0,1,0);\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) { \n    float a = dot(dir, dir);\n    float b = dot(pos,dir);\n    float c = dot(pos,pos) - r*r;\n    float D = b * b - a*c; \n    if (D < 0.0) { \n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if ( t > 0.0){\n        normal = normalize(pos + t * dir);\n        return t; \n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) { \n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceTriangle(vec3 vertex0, vec3 vertex1, vec3 vertex2, vec3 pos, vec3 dir, out vec3 N)\n{\n    vec3 edge1 = vertex1 - vertex0;\n    vec3 edge2 = vertex2 - vertex0;\n    vec3 h = cross(dir, edge2);\n    float a = dot(edge1, h);\n    if (a > -EPS && a < EPS) return INF;\n    float f = 1.0/a;\n    vec3 s = pos - vertex0;\n    float u = f * dot(s, h);\n    if (u < 0.0 || u > 1.0) return INF;\n    vec3 q = cross(s, edge1);\n    float v = f * dot(dir, q);\n    if (v < 0.0 || u + v > 1.0) return INF;\n    float t = f * dot(edge2, q);\n    if (t < EPS) return INF;\n    vec3 v1 = vertex2 - vertex0;\n    vec3 v2 = vertex1 - vertex0;\n    N = normalize(cross(v1,v2));\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 1.0) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 1.0;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    } \n    return INF;\n}\n\nfloat traceCube(vec3 pos, vec3 dir, out vec3 normal){\n       vec3 vertexes[8];\n    float rot = 0.0;\n    float e = 1.5;\n    vec3 c = vec3(0, -0.245, 0);\n    vec3 ex = vec3(e/2.0 * cos(rot), 0, e/2.0 * sin(rot));\n    vec3 ey = vec3(0, e/2.0, 0);\n    vec3 ez = vec3(-e/2.0 * sin(rot), 0, e/2.0 * cos(rot));\n    vertexes[0] = c - ex - ey + ez;\n    vertexes[1] = c - ex + ey + ez;\n    vertexes[2] = c + ex + ey + ez;\n    vertexes[3] = c + ex - ey + ez;\n    vertexes[4] = c + ex - ey - ez;\n    vertexes[5] = c + ex + ey - ez;\n    vertexes[6] = c - ex + ey - ez;\n    vertexes[7] = c - ex - ey - ez;\n    float t = INF;\n    vec3 t1norm;\n    vec3 t2norm;\n    vec3 t3norm;\n    vec3 t4norm;\n    vec3 t5norm;\n    vec3 t6norm;\n    vec3 t7norm;\n    vec3 t8norm;\n    vec3 t9norm;\n    vec3 t10norm;\n    vec3 t11norm;\n    vec3 t12norm;\n    float t1 = traceTriangle(vertexes[0], vertexes[1], vertexes[3], pos, dir, t1norm);\n    if (t1 < t && t > 0.0) {\n        t = t1;\n        normal = t1norm;\n    }\n    float t2 = traceTriangle(vertexes[1], vertexes[2], vertexes[3], pos, dir, t2norm);\n    if (t2 < t && t > 0.0) {\n        t = t2;\n        normal = t2norm;\n    }\n    float t3 = traceTriangle(vertexes[2], vertexes[3], vertexes[4], pos, dir, t3norm);\n    if (t3 < t && t > 0.0) {\n        t = t3;\n        normal = t3norm;\n    }\n    float t4 = traceTriangle(vertexes[2], vertexes[4], vertexes[5], pos, dir, t4norm);\n    if (t4 < t && t > 0.0) {\n        t = t4;\n        normal = t4norm;\n    }\n    float t5 = traceTriangle(vertexes[4], vertexes[5], vertexes[6], pos, dir, t5norm);\n    if (t5 < t && t > 0.0) {\n        t = t5;\n        normal = t5norm;\n    }\n    float t6 = traceTriangle(vertexes[4], vertexes[6], vertexes[7], pos, dir, t6norm);\n    if (t6 < t && t > 0.0) {\n        t = t6;\n        normal = t6norm;\n    }\n    float t7 = traceTriangle(vertexes[6], vertexes[7], vertexes[1], pos, dir, t7norm);\n    if (t7 < t && t > 0.0) {\n        t = t7;\n        normal = t7norm;\n    }\n    float t8 = traceTriangle(vertexes[0], vertexes[1], vertexes[7], pos, dir, t8norm);\n    if (t8 < t && t > 0.0) {\n        t = t8;\n        normal = t8norm;\n    }\n    float t9 = traceTriangle(vertexes[1], vertexes[2], vertexes[6], pos, dir, t9norm);\n    if (t9 < t && t > 0.0) {\n        t = t9;\n        normal = t9norm;\n    }\n    float t10 = traceTriangle(vertexes[6], vertexes[2], vertexes[5], pos, dir, t10norm);\n    if (t10 < t && t > 0.0) {\n        t = t10;\n        normal = t10norm;\n    }\n    float t11 = traceTriangle(vertexes[0], vertexes[4], vertexes[7], pos, dir, t11norm);\n    if (t11 < t && t > 0.0) {\n        t = t11;\n        normal = t11norm;\n    }\n    float t12 = traceTriangle(vertexes[0], vertexes[3], vertexes[4], pos, dir, t12norm);\n    if (t12 < t && t > 0.0) {\n        t = t12;\n        normal = t12norm;\n    }\n    \n    \n    if (t < INF) {\n        normal = normalize(normal);\n    }\n    \n    return t;  \n}\n\nfloat noise(vec3 p) {\n\tvec3 i = floor(p);\n\tvec4 a = dot(i, vec3(1, 57, 21)) + vec4(0, 57, 21, 78);\n\tvec3 f = cos((p-i)*acos(-1.0))*(-0.5) + 0.5;\n\ta = mix(sin(cos(a)*a),sin(cos(1.0 + a)*(1.0 + a)), f.x);\n\ta.xy = mix(a.xz, a.yw, f.y);\n\treturn mix(a.x, a.y, f.z);\n}\n\nfloat flame(vec3 p)\n{\n    float d = length(vec3(0, 1, 0) - p*vec3(1, 0.7, 1)) - 1.0;\n\treturn d + (noise(p + vec3(0, 5, 0)) + noise(p * 3.0)* 0.7)* 0.25 *(p.y) ;\n}\n\nvec4 raymarch(vec3 org, vec3 dir)\n{\n\tfloat d = 0.0, glow = 0.0, eps = 0.02;\n\tvec3  p = org;\n\tbool glowed = false;\n    float k = 64.0;\n\t\n\tfor(int i = 0; i < int(k); i++)\n\t{\n\t\td = min(150.0 - length(p), abs(flame(p))) + eps;\n\t\tp += d * dir;\n\t\tif (d > eps)\n\t\t{\n            glowed = glowed || flame(p) < 0.0;\n\t\t\tglow = glowed ? float(i)/k : 0.0;\n\t\t}\n\t}\n\treturn vec4(p,glow);\n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    vec3 CubeNorm;\n    float CubeT = traceCube(pos, dir, CubeNorm);\n    if (CubeT < dist)\n        return true;\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n    vec3 L1Norm;\n    float light1T = traceSphere(pos - LIGHT1_POS, dir, LIGHT1_RADIUS, L1Norm);\n    return (light1T < dist);\n    vec3 L2Norm;\n    float light2T = traceSphere(pos - LIGHT2_POS, dir, LIGHT2_RADIUS, L2Norm);\n    return (light2T < dist);\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 20.0f / distSq1;\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 10.0f / distSq2;\n    vec3 toLight_fire = vec3(0,0, 0) - pos;\n    float dist_fire = dot(toLight_fire, toLight_fire);\n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + max(0.0, dot(normal, normalize(toLight_fire))) * flamecol *0.3 + \n        + texture(iChannel1, normal).rgb * 0.1\n    );\n}\n\nvec3 refraction(vec3 v, vec3 normal,float n1, float n2)\n{\n    if(dot(v,normal)<0.0){\n        normal = -normal;\n    }\n    float cosA=dot(v,normal);\n    float sinA=sqrt(1.0-cosA*cosA);\n    vec3 tang = normalize(v-cosA*normal);\n    float sinB = sinA/n2*n1;\n    float cosB = sqrt(1.0-sinB*sinB);\n    return sinB*tang + cosB*normal;\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    float val = iTime;\n    vec4 LIGHT_COLOR = vec4(0,0,0,0) / float(iFrame + 1);\n    vec3 N;\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    vec3 randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord- iResolution.xy * 0.5 + (randVals.xy - 0.5)*2.0) / iResolution.x;\n    vec3 front = normalize(vec3(-CAMERA_POS));\n    vec3 up = vec3(0,1,0);\n    vec3 right = normalize(cross(front,up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y); \n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N * GLASS_N);\n    float n1 = AIR_N;\n    float n2 = GLASS_N;\n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    vec3 colorMult = vec3(1, 1, 1);\n    \n    for (int i = 0; i < 10; ++i){\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal; \n        vec4 color2;\n        vec3 planeNorm;\n        float nEnter = GLASS_N;\n        float planetT = tracePlane(curPos, curDir, planeNorm);\n        if (planetT < t) {\n            t = planetT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0,worldPos.xz * 0.2).rgb;\n            normal = planeNorm;\n            if (randVals.y < 0.125){\n                materialType = REFLECTION;\n            }\n        }\n        vec3 L1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, L1Norm);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            vec3 worldPos = t * curDir + curPos;\n            color = 2.0*LIGHT1_COLOR;\n            normal = L1Norm;\n        }\n        vec3 L2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, L2Norm);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = L2Norm;\n        }   \n        vec3 CubeNorm;\n        float CubeT = traceCube(curPos, curDir, CubeNorm);\n        if (CubeT < t) {\n            t = CubeT;\n            normal = CubeNorm;\n            materialType = REFLECTION;\n            materialType = REFRACTION;\n                if (randVals.x < GLASS_R*2.0) {\n                    materialType = REFLECTION;\n                }else{     \n                    materialType = REFRACTION;\n                    if (dot(curDir, normal) > 0.0){\n                        n1 = AIR_N;\n                    }else{\n                        n2 = GLASS_N;\n                    }\n                }\n        }\n        vec3 cylNorm; \n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) { \n            t = cylT;\n            materialType = DIFFUSE; \n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel3,worldPos.xz*worldPos.y).rgb;\n            normal = cylNorm;\n            materialType = DIFFUSE;\n        }     \n        if (t != INF){\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) { \n                fragColor.rgb = color* colorMult;\n                break;\n            }else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal)* colorMult;\n                break;\n            }else if (materialType == REFLECTION){\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            }else if (materialType == REFRACTION) {\n                curPos += curDir * t;\n                curDir = refraction(curDir, normal, n1, n2);\n                curPos = worldPos + curDir * 1e-5;\n                if (n1 == AIR_N && n2 == GLASS_N){\n                    vec4 p = raymarch(curPos + vec3(1.2,4.2, -9), curDir);\n                    float glow = p.w;\n                    flamecol = mix(vec3(0.1, 0.6, 1), vec3(1, 0.5, 0.1), p.y * 0.018 + 2.5) ;\n                    color += mix(vec3(0), flamecol, pow(glow * 2.0, 4.0));\n                    colorMult += mix(vec3(0.1,0.1,0.0), flamecol, pow(glow * 2.0, 4.0));\n                }\n                float tmp = n1; \n                n1 = n2;\n                n2 = tmp; \n            }\n        }else{\n            fragColor.rgb = texture(iChannel1, curDir).rgb * 0.65 * colorMult; \n            \n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}