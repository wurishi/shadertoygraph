{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// Compare the inigo ellipse and the \"operator ellipse\" by Denis\n//\n// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Analytical distance to an 2D ellipse, which is more complicated than it seems. It ends up being\n// a quartic equation, which can be resolved through a cubic, then a quadratic. Some steps through the\n// derivation can be found in this article: \n//\n// https://iquilezles.org/articles/ellipsedist\n//\n\n\n\nfloat sdEllipse( vec2 p, in vec2 ab )\n{\n\tp = abs( p ); if( p.x > p.y ){ p=p.yx; ab=ab.yx; }\n\t\n\tfloat l = ab.y*ab.y - ab.x*ab.x;\n\t\n    float m = ab.x*p.x/l; \n\tfloat n = ab.y*p.y/l; \n\tfloat m2 = m*m;\n\tfloat n2 = n*n;\n\t\n    float c = (m2 + n2 - 1.0)/3.0; \n\tfloat c3 = c*c*c;\n\n    float q = c3 + m2*n2*2.0;\n    float d = c3 + m2*n2;\n    float g = m + m*n2;\n\n    float co;\n\n    if( d<0.0 )\n    {\n        float p = acos(q/c3)/3.0;\n        float s = cos(p);\n        float t = sin(p)*sqrt(3.0);\n        float rx = sqrt( -c*(s + t + 2.0) + m2 );\n        float ry = sqrt( -c*(s - t + 2.0) + m2 );\n        co = ( ry + sign(l)*rx + abs(g)/(rx*ry) - m)/2.0;\n    }\n    else\n    {\n        float h = 2.0*m*n*sqrt( d );\n        float s = sign(q+h)*pow( abs(q+h), 1.0/3.0 );\n        float u = sign(q-h)*pow( abs(q-h), 1.0/3.0 );\n        float rx = -s - u - c*4.0 + 2.0*m2;\n        float ry = (s - u)*sqrt(3.0);\n        float rm = sqrt( rx*rx + ry*ry );\n        float p = ry/sqrt(rm-rx);\n        co = (p + 2.0*g/rm - m)/2.0;\n    }\n\n    float si = sqrt( 1.0 - co*co );\n \n    vec2 closestPoint = vec2( ab.x*co, ab.y*si );\n\t\n    return length(closestPoint - p ) * sign(p.y-closestPoint.y);\n}\n\nfloat sdCircle( vec2 p, in float r )\n{\n    return length(p)-r;\n}\n\n\nfloat sdEllipse2( vec2 p, in vec2 ab )\n{\n    p.y=p.y/(ab.y/ab.x);\n    return sdCircle(p,ab.x)*(ab.y/ab.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n\t\n    \n    vec2 m = iMouse.xy/iResolution.xy;\n\tm.x *= iResolution.x/iResolution.y;\n\t\n    float d ;\n    if (uv.x<0.0)\n        d=sdEllipse2(uv, vec2(0.3,0.3)*m + vec2(1.0,0.5)  );\n   \telse\n\t\td = sdEllipse( uv, vec2(0.3,0.3)*m + vec2(1.0,0.5)  );\n    \n\tvec3 col = clamp( abs(d), 0.0, 1.0 ) * (vec3(0.8) + vec3(-0.2,0.0,0.2)*sign(d) );\n\tcol = mix( col, vec3(1.0,0.5,0.1), 1.0-smoothstep(abs(d),0.0,0.003));\n\tcol *= 1.0 + 0.1*sin( 157.1*d );\n\t\n\tfragColor = vec4( col, 1.0 );;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Md2XWK","date":"1416218423","viewed":230,"name":"Ellipse2","username":"denis","description":"comparing the 2 ellipse","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["ellipse"],"hasliked":0,"parentid":"","parentname":""}}