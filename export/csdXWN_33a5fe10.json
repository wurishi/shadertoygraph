{"ver":"0.1","info":{"id":"csdXWN","date":"1679841926","viewed":277,"name":"Processing Data","username":"StefanPijnacker","description":"My first crude attempt at a shader. Started learning about shaders 2 weeks ago and I wanted to try out what I've learned. \nThe idea is inspired by the Ikeda patterns.\n\nCC0: Processing Data","likes":14,"published":1,"flags":32,"usePreview":0,"tags":["2d","monochrome"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    \n    vec2 offset = abs(uv.yx) / vec2(25., 3.2);\n    uv = uv + uv * offset * offset;\n    uv = uv * 0.5 + 0.5;\n    \n    vec3 tex = texture(iChannel0, uv).rgb;\n    vec2 center = vec2(0.5, 0.5);\n    vec2 dir = uv - center;\n\n    float s = (length(dir) * 0.27);\n    vec2 rO = vec2(0.01, 0.00);\n    vec2 gO = vec2(0.01, 0.01);\n    vec2 bO = vec2(-0.01, -0.01);\n    \n    vec3 c;\n    c.r = texture(iChannel0, uv + (rO * s)).r;\n    c.g = texture(iChannel0, uv + (gO * s)).g;\n    c.b = texture(iChannel0, uv + (bO * s)).b;\n\n    fragColor = vec4(vec3(c),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float N21(vec2 uv)\n{\n    return fract(sin(uv.x * 21.281 + uv.y * 93.182) * 5821.92);\n}\n\nfloat line(vec2 uv)\n{\n    return smoothstep(0.0, 0.05, uv.x) - smoothstep(0.0, 0.95, uv.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 scale = vec2(256, 64);\n    \n    vec2 lUV = fract(uv * scale);\n    vec2 gID = floor(uv * scale);\n\n    float rowNoise = N21(vec2(0.0, gID.y));\n    float dir = ((rowNoise * 2.0) - 1.0) + 0.2;\n    gID.x += floor(iTime * dir * 30.);\n    \n    float cellNoise = N21(gID);\n    float drawBlock = float(cellNoise > 0.28);\n    int even = int(gID.y) % 2;\n\n    vec3 col = vec3(line(lUV)) * drawBlock * float(even);\n    col *= fract(sin(gID.y)) + 0.24;\n    col *= vec3(0.024,0.996,0.541);\n    \n    fragColor = vec4(vec3(col),1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}