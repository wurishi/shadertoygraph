{"ver":"0.1","info":{"id":"DlByRh","date":"1691449918","viewed":124,"name":"random lines fork","username":"jolle","description":"trying to reduce aliasing with multiple samples, jitter and blurs","likes":16,"published":1,"flags":32,"usePreview":0,"tags":["lines"],"hasliked":0,"parentid":"dsXSDs","parentname":"random lines from glslbox"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uvs = 1. / iResolution.xy;\n    vec2 uv = fragCoord * uvs;\n    float b = abs(uv.y - .5) * 8. * uvs.y;  \n    fragColor = pow((\n        texture(iChannel0, uv) +\n        texture(iChannel0, uv + vec2(0, b * 2.)) +\n        texture(iChannel0, uv + vec2(0, b)) +\n        texture(iChannel0, uv - vec2(0, b)) +\n        texture(iChannel0, uv - vec2(0, b * 2.))) * .2 * 1.8, vec4(0.8));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uvs = 1. / iResolution.xy;\n    float t = iTime;\n\n    const int numSamples = 4;\n    vec4 new = vec4(0);\n    for (int s = 0; s < numSamples; ++s)\n    {\n        vec2 jitter = fract(sin((t + dot(vec3(s, fragCoord.xy), vec3(.37, .07, .03))) * vec2(14897.34, 35897.69)));\n        vec2 uv = ((fragCoord.xy + jitter.xy) * uvs - vec2(1.5, .5)) * 13.;\n\n        float e = 0.0;\n        for (float i = 1.0; i <= 45.0; i += 1.0)\n            e += 0.005 / abs((i / 500.0) + tan((t / 3.0) + 0.05 * i * uv.x * (sin(i / 3.0 + t / 32.0 + uv.x * 0.5))) + 2.5 * uv.y);\n        new += min(vec4(1), vec4(e / vec3(16, 3, 1.4), 1));\n    }\n    new /= float(numSamples);\n\n    vec2 uv = fragCoord * uvs;\n    float b = abs(uv.y - .5) * 4. * uvs.y;\n    fragColor = iFrame == 0 ? new : \n        (mix(texture(iChannel0, uv), new, 0.5) +\n        texture(iChannel0, uv + vec2(0, b)) +\n        texture(iChannel0, uv - vec2(0, b))) * .33;\n}\n","name":"Buffer A","description":"","type":"buffer"}]}