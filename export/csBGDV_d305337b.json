{"ver":"0.1","info":{"id":"csBGDV","date":"1668114721","viewed":181,"name":"[phreax] knkn","username":"phreax","description":"Did you ever notice how many words there are starting with kn?\nIt's quite probable derived from (indo-)germanic origin and used for things that are small, round and thick like knee, knot, knuckle, knife ","likes":23,"published":1,"flags":64,"usePreview":0,"tags":["raymarching","torus","knots"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Mt2XW1","filepath":"https://soundcloud.com/chill-vibe-592419656/adam-by-nature-calmness-of","previewfilepath":"https://soundcloud.com/chill-vibe-592419656/adam-by-nature-calmness-of","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* Creative Commons Licence Attribution-NonCommercial-ShareAlike \n   phreax 2021\n*/\n\n#define PI 3.141592\n#define SIN(x) (sin(x)*.5+.5)\n#define PHI 1.618033988749895\n\n\nfloat tt, g_mat;\nfloat g_gl = 0.;\n\n\n// from https://mercury.sexy/hg_sdf/\n#define GDFVector3 normalize(vec3(1, 1, 1 ))\n#define GDFVector4 normalize(vec3(-1, 1, 1))\n#define GDFVector5 normalize(vec3(1, -1, 1))\n#define GDFVector6 normalize(vec3(1, 1, -1))\n\n#define GDFVector7 normalize(vec3(0, 1, PHI+1.))\n#define GDFVector8 normalize(vec3(0, -1, PHI+1.))\n#define GDFVector9 normalize(vec3(PHI+1., 0, 1))\n#define GDFVector10 normalize(vec3(-PHI-1., 0, 1))\n#define GDFVector11 normalize(vec3(1, PHI+1., 0))\n#define GDFVector12 normalize(vec3(-1, PHI+1., 0))\n\n#define GDFVector13 normalize(vec3(0, PHI, 1))\n#define GDFVector14 normalize(vec3(0, -PHI, 1))\n#define GDFVector15 normalize(vec3(1, 0, PHI))\n#define GDFVector16 normalize(vec3(-1, 0, PHI))\n#define GDFVector17 normalize(vec3(PHI, 1, 0))\n#define GDFVector18 normalize(vec3(-PHI, 1, 0))\n\n#define fGDFBegin float d = 0.;\n#define fGDF(v) d = max(d, abs(dot(p, v)));\n#define fGDFEnd return d - r;\n\n\nfloat icosahedron(vec3 p, float r) {\n    fGDFBegin\n    fGDF(GDFVector3) fGDF(GDFVector4) fGDF(GDFVector5) fGDF(GDFVector6)\n    fGDF(GDFVector7) fGDF(GDFVector8) fGDF(GDFVector9) fGDF(GDFVector10)\n    fGDF(GDFVector11) fGDF(GDFVector12)\n    fGDFEnd\n}\n\nmat2 rot2(float a) { return mat2(cos(a), sin(a), -sin(a), cos(a)); }\n\n\n// by Nusan\nfloat curve(float t, float d) {\n  t/=d;\n  return mix(floor(t), floor(t)+1., pow(smoothstep(0.,1.,fract(t)), 10.));\n}\n\nfloat box(vec3 p, vec3 r) {\n    vec3 d = abs(p) - r;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat rect( vec2 p, vec2 b, float r ) {\n    vec2 d = abs(p) - (b - r);\n    return length(max(d, 0.)) + min(max(d.x, d.y), 0.) - r;\n}\n\nvec3 transform(vec3 p) {\n\n    float a = PI*.5 + iTime;\n    p.xz *= rot2(a);\n    p.xy *= rot2(a);\n    \n    return p;\n}\n\n\nfloat map(vec3 p) {\n\n    vec3 bp = p;\n    \n    // rotate\n    float b = PI*.5;\n    p.xz *= rot2(b);\n    p.xy *= rot2(b);\n\n    // torus\n    float r1 = mix(1.0, 2., SIN(tt));\n \n    vec2 cp = vec2(length(p.xz) - r1, p.y);\n    \n    float rev = 2.5;\n    \n    // torus knots by BigWings\n    float a = atan(p.z, p.x);\n  \n  cp.x -= .5; \n    \n    cp *= rot2(rev*a);\n    cp = abs(cp) -.2;\n\n    cp = abs(cp) - mix(.2, .4, SIN(tt));\n    cp *= rot2(-rev*a-tt);\n    \n    cp = abs(cp) - .33*SIN(-tt*.25); \n    \n    float kn = rect(cp, vec2(mix(.07, .12, SIN(.5*tt))), .02);\n    \n    float pl = box(bp-vec3(0, 0, 1.), vec3(10, 10, .1));\n\n    g_gl += .018/(.1+pow(abs(kn), 8.));  // glow\n    \n    p = transform(p);\n    \n    float ic = icosahedron(p, .33);\n    \n    g_mat = kn < ic ? 0. : 1.;\n    \n    float d = min(ic, kn);\n    \n    g_mat = d <  pl ? g_mat : 2.;\n    \n    d = min (d, pl);\n    return .8*d;\n}\n\n// from iq\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n    float res = 1.0;\n    float ph = 1e20;\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t);\n        if( h<0.001 )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    \n    vec3 ro = vec3(0, .0, -5),\n         rd = normalize(vec3(uv, .7)),\n         lp = vec3(-1., 4., -10);\n         \n    vec3 p = ro;\n    vec3 col;\n    \n    float t, d = 0.1;\n    \n    tt = (iTime + 7.4)*.5 ;  \n    tt = tt+2.*curve(tt, 2.);\n    \n    float mat = 0.,\n          gl  = 0.;\n    \n    for(float i=.0; i<200.; i++) {\n    \n        d = map(p);\n        mat = g_mat;\n        gl = g_gl;\n        \n        if(d < 0.0001 || t > 100.) break;\n        \n        t += d;\n        p += rd*d;\n    }\n    vec2 e = vec2(0.0035, -0.0035);\n     \n    vec3 al = vec3(0.949,0.620,0.510);\n    if(d < 0.001) {\n         vec3 n = normalize( e.xyy*map(p+e.xyy) + e.yyx*map(p+e.yyx) +\n                            e.yxy*map(p+e.yxy) + e.xxx*map(p+e.xxx));\n        \n       \n        vec3 l = normalize(lp-p);\n        float dif = max(dot(n, l), .0);\n        float spe = pow(max(dot(reflect(-rd, n), -l), .0),40.);\n        \n        float sss = smoothstep(0., 1., map(p + l * .4)) / .4;\n        float shd = softshadow(p, l, 0.01, 2., 15.0);\n\n        if(mat != 2.) {\n            col +=  al*mix(1., dif, .8) + .2*spe +  + .2*al*sss;\n        } else {\n            col = vec3(0.702,0.796,0.820);\n        }\n        col *= mix(.8, 1., shd);\n     \n    }\n\n    \n    if(mat != 1.) {\n      col += (.1-.18*pow(dot(uv, uv), .2))*gl*vec3(1.000,0.714,0.522);\n      col += (.08-.22*pow(dot(uv, uv), .57))*gl*vec3(1.000,0.714,0.522);\n    }\n    col *= mix(.1, .9, (1.5-pow(dot(uv, uv), .8)));\n    col = pow(col, vec3(.6));\n    \n   \n    // Output to screen\n    fragColor = vec4(col, 1.0 - t * 0.3);\n}","name":"Image","description":"","type":"image"}]}