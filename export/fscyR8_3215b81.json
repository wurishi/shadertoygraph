{"ver":"0.1","info":{"id":"fscyR8","date":"1652995467","viewed":210,"name":"Collapsed Hypercube","username":"Hyeve","description":"This is the result of an thought I had about a way of displaying 4D objects - what if you collapsed all of their 4D states into a single 3D space? This is not quite the way I wanted to do it originally, but it is interesting.","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","reflections","4d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\nvec2 uv;\nvec3 ss,oc,gl;\nvec4 fc,cc,cp,cn,cr;\nfloat tt,cd,sd,md,io,oa,td,tc;\nint es=0,ec;\n\nfloat smin(float a, float b, float k){float h=clamp(0.5+0.5*(b-a)/k,0.,1.);return mix(b,a,h)-k*h*(1.-h);}\n\n\nfloat gy(vec4 p, vec3 s)\n{\n    return (abs(dot(sin(p*s.x),cos((p*s.y).wzxy)))-s.z)/(max(s.x,s.y)*1.8);\n}\n\n\nfloat bx(vec4 p,vec4 s)\n{\n    vec4 q=abs(p)-s; return min(max(q.x,max(q.y,max(q.z,q.w))),0.)+length(max(q,0.));\n}\n\n\n\nfloat d4(vec4 p, float sx)\n{\n      \n     p.xw *= rot(tt*0.4);\n     p.yw *= rot(tt*0.3);\n     p.zw *= rot(tt*0.2);\n    \n     vec4 s = vec4(4.+sx);\n     float e = 0.9;\n     float c = 1.1;\n    \n     float sv = bx(p, s);\n     sv = max(sv, -bx(p, vec4(s.x*c,s.y*e,s.z*e,s.w*e)));\n     sv = max(sv, -bx(p, vec4(s.x*e,s.y*c,s.z*e,s.w*e)));\n     sv = max(sv, -bx(p, vec4(s.x*e,s.y*e,s.z*c,s.w*e)));\n     sv = max(sv, -bx(p, vec4(s.x*e,s.y*e,s.z*e,s.w*c)));\n     \n     \n     return sv;\n}\n\nfloat mp(vec4 p)\n{\n\t\tvec4 pp = p;\n\t\n        float num = 5.;\n        float offset = 4.;        \n        \n        float sx = 0.;\n        sd = d4(p,sx);\n        \n        for(float i = -offset; i < offset; i += offset / (num/2.))\n        {\n            sd = min(sd,d4(p+vec4(0.,0.,0.,i),sx));\n        }\n    \n    \n        sd=abs(sd)-0.001;\n\n        vec3 gc = normalize(p*p).xwz;\n        gl += exp(-sd*0.5)*gc*0.15;\n\n\t\tif(sd<0.01)\n\t\t{\t\n\t\t\tio=-1.;\n            oa=0.2;\n\t\t\toc=vec3(0.5,0.7,1.);\n\t\t\t\n\t\t\tss=vec3(0);\n\t\t\tec=2;\t\n\n\t\t}\n\t\treturn sd;\n}\n\nvoid nm(){mat4 k=mat4(cp,cp,cp,cp)-mat4(.001);cn=normalize(mp(cp)-vec4(mp(k[0]),mp(k[1]),mp(k[2]),mp(k[3])));cn=normalize(cn);}\n\nfloat tr(vec4 ro, vec4 rd)\n{cd=0.;md=64.;for(tc=1.;tc<512.;tc++){mp(cp=ro+rd*cd);cd+=sd;td+=sd;\nif(sd<md&&sd<cd-0.06)md=sd;if(sd<0.0001||cd>64.)break;}nm();return cd;}\n\nvoid px(vec4 rd)\n{\n  cc.rgb=vec3(0.5,0.5,0.8)+length(pow(abs(rd.xyz+vec3(0,0,0)),vec3(10)))*vec3(0.5)+gl/tc;\n  if(cd>64.){cc.a=1.;return;}cc.a=oa;\n    vec4 ld = -normalize(cp+cn-vec4(0.,10,-5, 0));\n  float df=clamp(length(cn*ld),0.,1.),\n\tsp=(1.-length(cross(rd.xyz,(cn*ld).xyz)))*0.3,\n\tao=min(mp(cp+cn*0.3)-0.3,0.3)*0.8;\n  vec3 fr=pow(1.-abs(dot(rd,-cn)),3.)*mix(cc.rgb,vec3(0.1),0.3)*0.5;\n  cc.rgb=(oc*(df+fr+ss)+fr+sp+ao+gl/tc);tr(cp+cn*0.06,ld);\n\tfloat sh=1.-mix(1.-clamp(md/0.06,0.,1.),clamp(dot(cn,-ld),0.,1.),0.1)*(io>0.?oa:1.)*0.3;\n\tcc.rgb=mix(mix(vec3(sh),oc,0.1),cc.rgb,sh)*sh;\n}\n\n\nvoid render(vec2 frag, vec2 res, float time, out vec4 col)\n{\n  uv=vec2(frag.x/res.x,frag.y/res.y);\n  uv-=0.5;uv/=vec2(res.y/res.x,1);\n\ttt=mod(time,256.);\n\t\n  vec4 ro=vec4(cos(tt*0.1),0,-15.+sin(tt*0.2)*3., 0. ),rd=normalize(vec4(uv*0.9,1., 0.));\n\t\n\t\n\tfor(int i=0;i<4;i++)\n  {\n\t\tfloat d=tr(ro,rd);\n\t\tro=cp-cn*(io<0.?-0.01:0.01);\n\t\tcr=refract(rd,cn,i%2==0?1./io:io);\n\t\ti=io<0.?i+1:i;\n    if((length(cr)==0.&&es<=0)||io<0.)\n\t\t{cr=reflect(rd,cn);es=(io<0.?es:ec);}\n\t\tpx(rd); if(max(es,0)%3==0&&d<64.)rd=cr;es--;\n\t\tfc=fc+vec4(cc.rgb*cc.a,cc.a)*(1.-fc.a);\n\t\tif(fc.a>=1.)break;\n  }\n  col = fc/fc.a;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    render(fragCoord.xy,iResolution.xy,iTime,fragColor);\n}","name":"Image","description":"","type":"image"}]}