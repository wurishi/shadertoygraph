{"ver":"0.1","info":{"id":"tlfyRM","date":"1591647799","viewed":91,"name":"muñeca--v3","username":"jorge2017a1","description":"muñeca--v3","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["muecav3"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//por jorge2017a1-\n\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n\n#define PI 3.14159265358979323846264\n\n\n#define PI2 6.28318530717\n#define TriplePI (3.0 * PI)\n#define DoublePI (2.0 * PI)\n#define HalfPI (PI / 2.0)\n\n\n\nvec3 light_pos1   ;\nvec3 light_color1 ;\nvec3 light_pos2   ;\nvec3 light_color2 ;\n\n\n\n//Torus function\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\n\n//Sphere function\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\n//Box function\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\nfloat sdCylinder( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\nfloat sdCone( in vec3 p, in vec2 c, float h )\n{\n  // c is the sin/cos of the angle, h is height\n  // Alternatively pass q instead of (c,h),\n  // which is the point at the base in 2D\n  vec2 q = h*vec2(c.x/c.y,-1.0);\n    \n  vec2 w = vec2( length(p.xz), p.y );\n  vec2 a = w - q*clamp( dot(w,q)/dot(q,q), 0.0, 1.0 );\n  vec2 b = w - q*vec2( clamp( w.x/q.x, 0.0, 1.0 ), 1.0 );\n  float k = sign( q.y );\n  float d = min(dot( a, a ),dot(b, b));\n  float s = max( k*(w.x*q.y-w.y*q.x),k*(w.y-q.y)  );\n  return sqrt(d)*sign(s);\n}\n\n//-------------------------------------\n\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\n\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\nfloat dot2(vec2 p)\n{\n  \n  return p.x*p.x+p.y*p.y ;\n}   \n\nfloat sdCappedCone( vec3 p, float h, float r1, float r2 )\n{\n  vec2 q = vec2( length(p.xz), p.y );\n  vec2 k1 = vec2(r2,h);\n  vec2 k2 = vec2(r2-r1,2.0*h);\n  vec2 ca = vec2(q.x-min(q.x,(q.y<0.0)?r1:r2), abs(q.y)-h);\n  vec2 cb = q - k1 + k2*clamp( dot(k1-q,k2)/dot2(k2), 0.0, 1.0 );\n  float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;\n  return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\n\n///---------------------------------------\nfloat sdCylinderYZ( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.yz),p.x)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\nfloat sdCylinderXZ( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\nfloat sdCylinderXY( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.xy),p.z)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\n\n\nfloat intersectSDF(float distA, float distB) {\n    return max(distA, distB);\n}\n\nfloat unionSDF(float distA, float distB) \n{\n    return min(distA, distB);\n}\n\nfloat differenceSDF(float distA, float distB) \n{\n    return max(distA, -distB);\n}\n\n\nvec2 opU(vec2 d1, vec2 d2 ) {\n  vec2 resp;\n    if (d1.x < d2.x){ \n        resp = d1;\n    }\n    else\n    {\n        resp = d2;\n    }\n     \n   return resp; \n}\n\nvec3 rotate_y(vec3 v, float angle)\n{\n\tfloat ca = cos(angle); float sa = sin(angle);\n\treturn v*mat3(\n\t\tca, 0.0, -sa,\n\t\t0.0, 1.0, 0.0,\n\t\tsa, 0.0, ca);\n}\n\nvec3 rotate_x(vec3 v, float angle)\n{\n\tfloat ca = cos(angle); float sa = sin(angle);\n\treturn v*mat3(\n\t\t1.0, 0.0, 0.0,\n\t\t0.0, ca, -sa,\n\t\t0.0, sa, ca);\n}\n\n\nvec3 rotate_z(vec3 v, float angle)\n{\n\tfloat ca = cos(angle); \n    float sa = sin(angle);\n\treturn v*mat3(\n\t\tca, -sa, 0.0,\n\t\tsa, ca, 0.0,\n\t\t0.0, 0.0, 1.0);\n}\n\n\n\n///-----------------------------------------\n\n\nvec3 LightShading(vec3 N,vec3 L,vec3 V,vec3 color)\n{\n    vec3 diffuse = max(0.,dot(N,-L))*color;\n    vec3 specular = pow(max(0.,dot(N,normalize(-L-V))),100.)*vec3(1.,1.,1.); \n    return diffuse + specular;\n}\n\n//-------------------------------------------------\n\nfloat hash( in vec2 p ) \n{\n    return fract(sin(p.x*15.32+p.y*35.78) * 43758.23);\n}\n\nvec2 hash2(vec2 p)\n{\n\treturn vec2(hash(p*.754),hash(1.5743*p.yx+4.5891))-.5;\n}\n\n\nvec2 noise2(vec2 x)\n{\n    vec2 add = vec2(1.0, 0.0);\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    \n    return mix(mix( hash2(p),          hash2(p + add.xy),f.x),\n                    mix( hash2(p + add.yx), hash2(p + add.xx),f.x),f.y);\n    \n}\n\nmat2 rotate(float a) \n{\n\tfloat c = cos(a);\n\tfloat s = sin(a);\n\treturn mat2(c, s, -s, c);\n}\n\n\n\n\n//----------------\n///https://www.shadertoy.com/view/wsjBD3\n//----------------------------------------------------Ð’Ñ€Ð°Ñ‰ÐµÐ½Ð¸Ðµ Ð´ÐµÑ‚Ð°Ð»Ð¸\nvec2 rotate(vec2 v, float a) {\n   return vec2(cos(a)*v.x + sin(a)*v.y, -sin(a)*v.x + cos(a)*v.y);\n}\n//----------------------------------------------------\n\n\n// polynomial smooth min (k = 0.1);\nfloat smin2( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\n\t\n// power smooth min (k = 8);\nfloat smin3( float a, float b, float k )\n{\n    a = pow( a, k ); b = pow( b, k );\n    return pow( (a*b)/(a+b), 1.0/k );\n}\n\n\n// exponential smooth min (k = 32);\nfloat smin( float a, float b, float k )\n{\n    float res = exp( -k*a ) + exp( -k*b );\n    return -log( res )/k;\n}\n\nfloat softmin(float f1, float f2, float val)\n{\n      float e = max(val - abs(f1 - f2), 0.0);\n      return min(f1, f2) - e*e*0.25 / val;     \n}\n\n\n\nfloat sminb( float a, float b, float k )\n{\n    float res = exp( -k*a ) + exp( -k*b );\n    return -log( res )/k;\n}\n\nfloat smaxb(float x, float y, float k)\n{\n    return log( exp(x) + exp(y) )/k;\n}\n\n\n\nfloat sdEllipsoid( vec3 p, vec3 r )\n{\n  float k0 = length(p/r);\n  float k1 = length(p/(r*r));\n  return k0*(k0-1.0)/k1;\n}\n\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n  vec3 q = abs(p);\n  return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n\n\nvec2 manos(vec3 p)\n{   \n    vec2 res=vec2(1000.0,0.0);\n\tfloat sdpalma= sdBox(  p-vec3(0.0,  0.1,0.0), vec3(0.65,0.5,0.25) );\n    float sddedo1= sdBox(  p-vec3(0.5,  1.0,0.0), vec3(0.125,0.4,0.125) );\n    float sddedo2= sdBox(  p-vec3(0.2,  1.0,0.0), vec3(0.125,0.6,0.125) );\n    float sddedo3= sdBox(  p-vec3(-0.1, 1.0,0.0), vec3(0.125,0.5,0.125) );\n    float sddedo4= sdBox(  p-vec3(-0.4, 1.0,0.0), vec3(0.125,0.4,0.125) );\n    \n    res=opU(res, vec2(sdpalma, 16.0));\n    res=opU(res, vec2(sddedo1, 16.0));\n    res=opU(res, vec2(sddedo2, 16.0));\n    res=opU(res, vec2(sddedo3, 16.0));\n    res=opU(res, vec2(sddedo4, 16.0));\n    \n    return res;\n}   \n\n\nvec2 Cabeza(vec3  p )\n{\t\n    vec2 res=vec2(1000.0,0.0);\n    //cabeza\n    float sd1cabeza=sdEllipsoid(p, vec3(1.5,2.0,2.0));\n    res=opU(res, vec2(sd1cabeza, 16.0));\n    \n    \n\t\n    \n    //sombrero\n    vec3 pp=p;\n    \n    \n    float y=2.5*cos(iTime)-1.0;\n    float sdc1A= sdCappedCone(pp-vec3(0.0,6.5+y,0.0), 3.0, 2.0, 0.1 );\n    float sdc2A= sdCappedCone(pp-vec3(0.0,4.5+y,0.0), 0.5, 2.0, 1.5 );\n    float sdc2B =sdCylinderXZ(  pp-vec3(0.0,3.9+y,0.0), vec2(3.0,0.18) );\n    float dif= differenceSDF( sdc2B,sdc1A); \n    res=opU(res, vec2(sdc1A, 0.0));\n    res=opU(res, vec2(sdc2A, 2.0));\n    res=opU(res, vec2(dif, 2.0));\n    \n    \n    \n    //ojos\n    float sd2=sdEllipsoid(p-vec3(-0.345,0.0,-1.75), vec3(0.5,0.25,0.25));\n    res=opU(res, vec2(sd2, 1.0));\n    \n    \n    \n    \n    \n    \n    \n    float sd3=sdEllipsoid(p-vec3(0.345,0.0,-1.75), vec3(0.5,0.25,0.25));\n    res=opU(res, vec2(sd3, 1.0));\n    \n    \n    \n    //pupila izq\n    float sd4= sdSphere(p- vec3(0.5,0.0,0.-2.0), 0.125 );\n    res=opU(res, vec2(sd4, 3.0));\n    \n    \n    \n    //pupila der\n    float sd5= sdSphere(p- vec3(-0.5,0.0,0.-2.0), 0.125 );\n    res=opU(res, vec2(sd5, 3.0));\n    \n    \n    \n    //Iris izq\n    float sd6= sdSphere(p- vec3(0.5,0.0,0.-2.05), 0.08 );\n    res=opU(res, vec2(sd6, 0.0));\n    \n    //Iris der\n    float sd7= sdSphere(p- vec3(-0.5,0.0,0.-2.05), 0.08 );\n    res=opU(res, vec2(sd7, 0.0));\n    \n    \n    \n    ///Nariz\n    \n    vec3 p1=p;\n    mat2 m2= rotate(40.0);\n    mat2 m3= rotate(1.0);\n    \n    \n    p1.zy=m2*p1.zy;\n    p1.xy=m3*p1.xy;\n    \n    \n    p1.x=p1.x-1.0;\n    p1.y=p1.y-0.35;\n    p1.z=p1.z-4.5;\n    \n    \n    \n    float  sd8= sdTriPrism( p1-vec3(0.0,-1.0,-3.0), vec2(0.25,0.25) );\n    res=opU(res, vec2(sd8, 16.0));\n    \n    \n    \n    //labios\n    float sd9=sdEllipsoid(p-vec3(0.0,-1.0,-1.75), vec3(0.5,0.125,0.125));\n    res=opU(res, vec2(sd9, 2.0));\n    \n    \n    \n    \n    //pelo 1\n    float sd10=sdEllipsoid(p, vec3(1.6,2.1,2.1));\n    float sd11=sdEllipsoid(p-vec3(0.0,-0.5,-0.5), vec3(1.4,2.1,2.1));\n    float sdpelo=1000.0;\n  \n    sdpelo= differenceSDF(sd10, sd11); \n    \n    //pestanas\n    float sd12=sdEllipsoid(p-vec3(0.5,0.35,-1.5), vec3(0.5,0.1,0.5));\n    float sd13=sdEllipsoid(p-vec3(-0.5,0.35,-1.5), vec3(0.5,0.1,0.5));\n    res=opU(res, vec2(sd12, 2.0));\n    res=opU(res, vec2(sd13, 2.0));\n    \n    \n    \n    res=opU(res, vec2(sdpelo, 0.0));\n    \n    \n    \n    float sd14=sdEllipsoid(p-vec3(0.85,-2.0,1.0), vec3(0.2,1.0,0.025));\n    float sd15=sdEllipsoid(p-vec3(1.4,-1.5,1.0), vec3(0.2,1.0,0.025));\n    \n    float sd16=sdEllipsoid(p-vec3(-0.85,-2.0,1.0), vec3(0.2,1.0,0.025));\n    float sd17=sdEllipsoid(p-vec3(-1.4,-1.5,1.0), vec3(0.2,1.0,0.025));\n    \n    res=opU(res, vec2(sd14, 0.0));\n    res=opU(res, vec2(sd15, 0.0));\n    res=opU(res, vec2(sd16, 0.0));\n    res=opU(res, vec2(sd17, 0.0));\n    \n    \n    \n    \n    \n    return res;\n}\n\n///------------------------------\n\nfloat GetDist(vec3 p  ) \n{\t\n\n    float d, dif1, dif2;\n    vec2 res;\n    vec3 pp, p2,p3;\n    \n    \n    pp=p;\n    //p.xyz=pp.zyx;    \n   \n    pp=p;\n    p2=p;\n    p3=p;\n    \n \n    float planeDist1 = p.y+10.5;  //piso inf\n    float planeDist2 = 30.0-p.y;  //piso sup\n    float planeDist3 = p.x+30.0; //pared izq\n    float planeDist4 = 30.0-p.x;  //pared der\n    float planeDist5 = -p.z+40.0;  //pared atras\n    float planeDist6 = p.z+40.0;  //pared atras\n   \n    \n    res = vec2(9999, 0);\n    \n   \n\t\n    //res =opU(res, vec2(planeDist1,32)); //inf\n    res =opU(res, vec2(planeDist1,1)); //inf\n    res =opU(res, vec2(planeDist2,2)); \n    res =opU(res, vec2(planeDist3,3)); \n    res =opU(res, vec2(planeDist4,4)); \n    res =opU(res, vec2(planeDist5,5)); \n    res =opU(res, vec2(planeDist6,6)); \n    \n \tfloat t;\n    t=iTime;\n   \n \n     float sdifcuerpo;\n    float sdb1= sdBox( p- vec3(0.0,2.0,0.0), vec3(2.0,4.5,0.5) );\n    \n    \n  \n\t\n    p2 = rotate_y(p2, cos(iTime/1.)*.25);  \n    vec2 c1= Cabeza(p2-vec3(0.0,8.0,0.0) );\n    res =opU(res, c1);  \n    \n    sdifcuerpo=sdb1;\n    \n    //busto\n    float sds1= sdSphere(p-vec3(-1.0,3.0,-0.125), 1.0 );\n    float sds2= sdSphere(p-vec3(1.0,3.0,-0.125), 1.0 );\n    \n    res =opU(res, vec2(sds1,7 ));  \n    res =opU(res, vec2(sds2,7 ));  \n    \n    \n   \n    \n    \n    \n    //curva cintura \n    float sds3= sdCylinderXY( p-vec3(-5.0,1.5,0.0), vec2(3.5,1.0) );\n    float sds4= sdCylinderXY( p-vec3(5.0,1.5,0.0) , vec2(3.5,1.0) );\n    \n    sdifcuerpo= differenceSDF(sdifcuerpo, sds3);\n    sdifcuerpo= differenceSDF(sdifcuerpo, sds4);\n    \n    \n    //curva cuello\n    float sds5= sdCylinderXY( p-vec3(-2.0,6.5,0.0), vec2(1.5,1.0) );\n    float sds6= sdCylinderXY( p-vec3(2.0,6.5,0.0) , vec2(1.5,1.0) );\n    \n    sdifcuerpo= differenceSDF(sdifcuerpo, sds5);\n    sdifcuerpo= differenceSDF(sdifcuerpo, sds6);\n    \n    \n    \n   \n    \n    //piernas\n    float sds7= sdCylinderXZ( p-vec3(-1.0,-5.0,0.0), vec2(0.5,3.0) );\n    float sds8= sdCylinderXZ( p-vec3(1.0,-5.0,0.0), vec2(0.5,3.0) );\n   \n    //sdifcuerpo=min(sdifcuerpo,sds7);\n    //sdifcuerpo=min(sdifcuerpo, sds8);\n    \n    res=opU(res, vec2(sds7,16.0));\n    res=opU(res, vec2(sds8,16.0));\n    \n    \n    \n    \n    //--brazos\n    float sds10= sdSphere(p-vec3(-2.5,4.2,0.0), 0.8 );\n    float sds11= sdSphere(p-vec3(2.5,4.2,0.0), 0.8 );\n    \n    \n   \n    \n    vec3 q;\n    float angRotH=-abs(cos(abs(-1.0+iTime/8.0))) ;\n    q = p.zyx-vec3(0.0,4.0,0.0);\n    q.xy = q.xy * cos (angRotH) * vec2 (1., 1.) + q.yx * sin (angRotH) * vec2 (-1., 1.);\n    q.xy -= vec2 (0.0, 2.0 );\n    pp=q.zyx;\n    \n    \n    float sds12= sdCylinderXZ( pp-vec3(-2.85,1.0,0.0), vec2(0.5,3.0) );\n    float sds13= sdCylinderXZ( pp-vec3(2.85,1.0,0.0), vec2(0.5,3.0) );\n    \n    \n    \n    vec2 m1= manos(pp-vec3(2.8,3.8,0.0));\n    vec2 m2= manos(pp-vec3(-2.8,3.8,0.0));\n    res =opU(res, m1);\n    res =opU(res, m2);  \n    \n    \n   \n    \n    sdifcuerpo= smin( sdifcuerpo , sds10 , 32.0 );\n    sdifcuerpo= smin( sdifcuerpo , sds11 , 32.0 );\n    sdifcuerpo= smin( sdifcuerpo , sds12 , 32.0 );\n    sdifcuerpo= smin( sdifcuerpo , sds13 , 32.0 );\n    \n   \n    res =opU(res, vec2(sdifcuerpo,7 ));  \n    \n    \n    d = res.x;\n    mObj.dist = res.x;\n    mObj.tipo = res.y;\n    \n    return d;\n}\n\n\n\n//---------actualizacion por Shane---28-may-2020    ...gracias\nfloat RayMarch(vec3 ro, vec3 rd) \n{\n\t\n    // The extra distance might force a near-plane hit, so\n    // it's set back to zero.\n    float dO = 0.; \n    //Determines size of shadow\n    for(int i=0; i<MAX_STEPS; i++) \n    {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n       \n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n        dO += dS;\n        \n    }\n    \n    return dO;\n}\n\n\n\n\n//---------------------------------------------------\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    //Texture of white and black in image\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\n\n\n\n\nfloat GetLightPar(vec3 p, vec3 plig) {\n    vec3 lightPos = plig;\n    //Determine movement of light ex. shadow and light direction and diffusion\n    //lightPos.xz += vec2(1, 2);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l );\n    if(d<length(lightPos-p)) dif *= .1;\n    \n    return dif;\n}\n\n\nfloat saturate(float f)\n{\n\treturn clamp(f,0.0,1.0);\n}\n\n\n//----------------------------------------------------\n\n// Single rotation function - return matrix\nmat2 r2(float a){ \n  float c = cos(a); float s = sin(a); \n  return mat2(c, s, -s, c); \n}\n//--------------------\n\n// iMouse pos function - take in a vec3 like ro\n// simple pan and tilt and return that vec3\nvec3 get_mouse(vec3 ro) \n{\n    float x = iMouse.xy==vec2(0) ? -.2 :\n    \t(iMouse.y / iResolution.y * .5 - 0.25) * PI;\n    float y = iMouse.xy==vec2(0) ? .0 :\n    \t-(iMouse.x / iResolution.x * 1.0 - .5) * PI;\n    float z = 0.0;\n\n    ro.zy *= r2(x);\n    ro.zx *= r2(y);\n    \n    return ro;\n}\n\n\n\n\n\n\n\n// phong shading\nvec3 p_shadingv2( vec3 v, vec3 n, vec3 eye, vec3 plight_pos1,  vec3 plight_color1 )\n{\n\t\n    \n\tfloat shininess = 1.25;\n    \n\t\n\tvec3 final = vec3( 0.0 );\n\t\n\tvec3 ev = normalize( v - eye );\n\tvec3 ref_ev = reflect( ev, n );\n\t\n\t\tvec3 vl = normalize( plight_pos1 - v );\n\t\n\t\tfloat diffuse  = max( 0.0, dot( vl, n ) );\n\t\tfloat specular = max( 0.0, dot( vl, ref_ev ) );\n\t\tspecular = pow( specular, shininess );\n\t\t\n\t\t\n        final += plight_color1 * ( diffuse + specular );\n    \n\n    return (final);\n}\n\n\n\nvec3 srgb(float r, float g, float b) {\n    return vec3(r*r,g*g,b*b);\n}\n\n\n\n// phong shading\nvec3 p_shadingv3( vec3 pos, vec3 normal, vec3 ro, vec3 rd, vec3 plight_pos1,  vec3 plight_color1 )\n{\n\t// ...add lights here...\n   //col2= p_shadingv2( p, nor, ro, light_pos1, light_color1 )*colobj;\n  \n    \n    \n\tfloat shininess = 1.25;\n    \n\t\n\tvec3 final = vec3( 0.0 );\n\t\n\tvec3 ev = normalize( pos - ro );\n\tvec3 ref_ev = reflect( ev, normal );\n\t\n\t\n\t\tvec3 vl = normalize( plight_pos1 - pos );\n\t\n\t\tfloat diffuse  = max( 0.0, dot( vl, normal ) );\n\t\tfloat specular = max( 0.0, dot( vl, ref_ev ) );\n\t\tspecular = pow( specular, shininess );\n\t\t\n\t\t\n        final += plight_color1 * ( diffuse + specular );\n        \n    \n    \n\tvec3 color = vec3(1.0);\n    color = color * 0.75 + 0.25;\n   \n    color *= normal * .25 + .75;\n    \n    \n    float ambient2 = 0.1;\n    float diffuse2 = 0.5 * -dot(normal,rd);\n    float specular2 = 1.0 * max(0.0, -dot(rd, reflect(rd,normal)));\n    \n    color *= vec3(ambient2 + diffuse2 + pow(specular2,5.0));\n\n    color *= smoothstep(12.0,6.0,length(pos));\n    \n    \n    vec3 colf =(final+color)/2.2;\n   \n    return colf;\n}\n\n\n\n\n\n\n\n\n\n///---------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\t\n    itime=iTime;\n    float t,t1;\n    t=iTime*2.0;\n    t1=iTime;\n   \n    \n \n light_pos1   = vec3(-4.0, 12.0, -15.0 ); \n light_color1 = vec3( 1.0 );\n\n light_pos2   = vec3( 2.0, 10.0, 0.0 );\n light_color2 = vec3( 1.0, 1.0, 1.0 );\n    \n    vec3 ro = vec3(0.0,9.0,-20.0+10.0*cos(iTime*2.0));\n    \n \t\n\t//ro = get_mouse(ro);\n\n    vec3 rd = normalize( vec3(uv,1.0));\n    \n    \n    vec3 col = vec3(0);\n    \n    TObj Obj;\n    \n    mObj.uv=uv;\n    mObj.rd=rd;\n    mObj.ro=ro;\n\n\t \n    \n    float d = RayMarch(ro, rd);\n    Obj=mObj;\n    \n  \n    vec3 p = (ro + rd * d ); \n    glpRoRd=p;\n    mObj.p=p;\n    \n    float dif=0.8;\n  \n    \n    mObj.dist =d;\n    vec3 colobj;\n    \n    vec3 nor= GetNormal( p);\n    \n  \n    \n    \n    colobj=getSphereColor(int( Obj.tipo));\n    if (Obj.tipo!=16.0 && Obj.tipo!=1.0)\n    colobj=colobj*getSphereColor(139);\n    \n    \n  float dif1=1.0;\n   \n    \n    /*\n \tfloat dif1= GetLightPar(p,light_pos1);\n    dif1+= GetLightPar(p,light_pos2);\n     dif1= (dif1 )/2.0;\n    */\n    \n    \n    vec3 col2;\n\n   col2= p_shadingv3( p, nor, ro,rd, light_pos1, light_color1 )*colobj;\n   col2+= p_shadingv3( p, nor, ro,rd, light_pos2, light_color2 )*colobj;\n  \n    col=(col2)*dif1;\n  \n    col = pow(col, vec3(1.0/2.2));  \n    \n    fragColor = vec4(col,1.0);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"///------------------------------------\nstruct TObj\n{\n    float tipo;\n    float dist;\n    vec3 normal;\n    vec3 ro;\n    vec3 rd;\n    vec2 uv;\n    vec3 color;\n    vec3 p;\n    vec3 rf;\n};\n\n\n\n    \nTObj mObj;\nvec3 glpRoRd;\nvec2 gres2;\nfloat itime;\n\n\n//-ooooooooooooooooooooooooooooooooooooooooooooooooooooo\n//https://www.shadertoy.com/view/XlBXWw\nvec2 hash22(vec2 p) { \n    float n = sin(dot(p, vec2(41, 289)));\n    return fract(vec2(262144, 32768)*n); \n    \n}\n\nfloat Voronoi(vec2 p)\n{\t\n    // Partitioning the 2D space into repeat cells.\n    vec2 ip = floor(p); // Analogous to the cell's unique ID.\n    p -= ip; // Fractional reference point within the cell (fract(p)).\n    float d = 1.;\n    \n    for (int i = -1; i <= 1; i++){\n\t    for (int j = -1; j <= 1; j++){\n\t    \n     \t    vec2 cellRef = vec2(i, j); // Base cell reference point.\n            \n            vec2 offset = hash22(ip + cellRef); // 2D offset.\n            \n            // Vector from the point in the cell to the offset point.\n            vec2 r = cellRef + offset - p; \n            float d2 = dot(r, r); // Squared length of the vector above.\n            \n            d = min(d, d2); // If it's less than the previous minimum, store it.\n        }\n    }\n    \n    // In this case, the distance is being returned, but the squared distance\n    // can be used too, if preferred.\n    return sqrt(d); \n}\n///oooooooooooooooooooooooooooooooooooooooooooooooooooooo\n\n\n//----------------\n///https://www.shadertoy.com/view/wsjBD3\n\nfloat sdcirclevec2(vec2 p, float r) {\n  return length(p) - r;\n}\n\nvec2 mod2(inout vec2 p, vec2 size) \n{\n  vec2 c = floor((p + size*0.5)/size);\n  p = mod(p + size*0.5,size) - size*0.5;\n  return c;\n}\n\nvec2 hashvec2(vec2 p) {\n  p = vec2(dot (p, vec2 (127.1, 311.7)), dot (p, vec2 (269.5, 183.3)));\n  return -1. + 2.*fract (sin (p)*43758.5453123);\n}\n\nfloat noise1(vec2 p)\n{\n   const float cellWidth     = 1.0;\n  vec2 n = mod2(p, vec2(cellWidth));\n  vec2 hh = hashvec2(sqrt(2.0)*(n+1000.0));\n  hh.x *= hh.y;\n  \n  float r = 0.225*cellWidth;\n \n  float d = sdcirclevec2(p, 2.0*r);\n  \n  float h = hh.x*smoothstep(0.0, r, -d);\n\n  return h*0.25;\n}\n\n//--------------------------------\n    \n\n\nfloat random() \n{\n\treturn fract(sin(dot(mObj.uv, vec2(12.9898, 78.233)) ) * 43758.5453);\n}\n\n\n\n\n\nvec3 checkerBoard(float u, float v, float interval)\n{\n    float uu = floor(u/interval*2.0);\n    float vv = floor(v/interval*2.0);\n    float p =mod(uu+vv,2.0);\n    return vec3(0.1+0.9*p);\n}\n\n\n\n\n//-------------------\n//IQs noise\nfloat noise(vec3 rp) {\n    vec3 ip = floor(rp);\n    rp -= ip; \n    vec3 s = vec3(7, 157, 113);\n    vec4 h = vec4(0.0, s.yz, s.y + s.z) + dot(ip, s);\n    rp = rp * rp * (3.0 - 2.0 * rp); \n    h = mix(fract(sin(h) * 43758.5), fract(sin(h + s.x) * 43758.5), rp.x);\n    h.xy = mix(h.xz, h.yw, rp.y);\n    return mix(h.x, h.y, rp.z); \n}\n\n\n\n\n\n///-----------------------------------------\n//----------------------------------------------------\n\n\nvec3 getSphereColor(int i)\n{\n    \n    float m;\n        \nif (i==0 ) { return vec3(0,0,0)/255.0; }\nif (i==1 ) { return vec3(255.,255.,255.)/255.0; }\nif (i==2 ) { return vec3(255,0,0)/255.0; }\nif (i==3 ) { return vec3(0,255,0)/255.0; }\nif (i==4 ) { return vec3(0,0,255)/255.0; }\nif (i==5 ) { return vec3(255,255,0)/255.0; }\nif (i==6 ) { return vec3(0,255,255)/255.0; }\nif (i==7 ) { return vec3(255,0,255)/255.0; }\nif (i==8 ) { return vec3(192,192,192)/255.0; }\nif (i==9 ) { return vec3(128,128,128)/255.0; }\nif (i==10 ) { return vec3(128,0,0)/255.0; }\nif (i==11 ) { return vec3(128,128,0)/255.0; }\nif (i==12 ) { return vec3(0,128,0)/255.0; }\nif (i==13 ) { return vec3(128,0,128)/255.0; }\nif (i==14 ) { return vec3(0,128,128)/255.0; }\nif (i==15 ) { return vec3(0,0,128)/255.0; }\n    \nif (i==16 ) { return vec3(255, 204, 188)/255.0; }\n\n      \n    if(i== 139 )\n    {\n     \n           vec3 p = glpRoRd;\n           vec3 marbleP = p*2.0;\n    \n            marbleP.x += sin(p.y*1.0)*0.12;\n            marbleP.z += sin(p.y*1.0)*0.1;\n            marbleP.y += sin(p.x*1.0)*0.13;\n            marbleP.y += sin(p.z*1.0)*0.14;\n\n            marbleP.y += sin(p.x*0.3)*0.5;\n            marbleP.y += sin(p.z*0.5)*0.6;\n\n            marbleP.x += sin(p.y*2.0)*0.11;\n            marbleP.z += sin(p.y*2.0)*0.13;\n            marbleP.y += sin(p.x*2.0)*0.12;\n            marbleP.y += sin(p.z*2.0)*0.15;\n\t\t\t\n            marbleP.x *= 1.15;\n            marbleP.z *= 1.18;\n            marbleP.y *= 1.150;\n\t\t\t\n        \n            float marbleAmtA = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtA = pow(1.0-marbleAmtA,5.0);\n\n            marbleP = p;\n\t\t\t\n        /*\n            marbleP.x += sin(p.y*21.0)*0.12;\n            marbleP.z += sin(p.y*23.0)*0.1;\n            marbleP.y += sin(p.x*22.0)*0.13;\n            marbleP.y += sin(p.z*24.0)*0.14;\n\n            marbleP.y += sin(p.x*1.2)*0.5;\n            marbleP.y += sin(p.z*1.4)*0.6;\n*/\n            marbleP.x += sin(p.y*150.0)*0.011;\n            marbleP.z += sin(p.y*162.0)*0.013;\n            marbleP.y += sin(p.x*145.0)*0.012;\n            marbleP.y += sin(p.z*153.0)*0.015;\n\n            marbleP.x *= 0.2;\n            marbleP.z *= 0.3;\n            marbleP.y *= 0.10;\n\n            float marbleAmtB = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtB = pow(1.0-marbleAmtB,9.0);\n            marbleAmtB = 1.0-(1.0-marbleAmtB*0.3);\n\n            float marbleAmt = marbleAmtA + marbleAmtB;\n            marbleAmt = clamp(marbleAmt,0.2,1.0);\n\t\t\tvec3 surfaceColor;\n            \n    \t\n        \tsurfaceColor = mix(vec3(0.4,0.4,0.6),vec3(0.50,0.1,0.2),marbleAmtA);\n        \n        \treturn surfaceColor;\t\n        \n\t\t\t}  \n    \n    \n    if (i==140)\n    { \n        vec2 p=mObj.p.xz;\n        float vo= Voronoi(p);\n     \tvec3 col= mix( vec3(0.25, 0.25, 0.25)*vo, vec3(0.26,0.54,1.0),vo); \n        return col;\n    } \n    \n    \n    if (i==141)\n    { \n        vec2 p=mObj.p.xz;\n        float vo= Voronoi(p);\n        float no1= noise1(p);\n        vo=vo*no1*10.5;\n     \tvec3 col= mix( vec3(0.25, 0.25, 0.25)*vo, vec3(0.26,0.54,1.0),vo); \n        return col;\n    } \n\n\n}\n\n///--------------------------------------------\n\n","name":"Common","description":"","type":"common"}]}