{"ver":"0.1","info":{"id":"fs2SRh","date":"1619640218","viewed":61,"name":"RGBalls314","username":"Domain314","description":"learning raymarching and messing around with the outcome of ArtOfCode's/BigWIngs Tutorial:\nhttps://www.youtube.com/watch?v=PGtv-dBi2wE","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100    // int\n#define MAX_DIST 100.    // float\n#define SURF_DIST .01\n#define THIRD_2PI 2.0943951023    // third of pi*2.\n\n// vec4 s = (xPos, yPos, zPos, radius)\nfloat sdSphere(vec3 p, vec4 s) {\n    return length(p-s.xyz)-s.w;\n}\n\nfloat GetDist(vec3 p, vec4 s) {\n    float sphereDist = sdSphere(p, s);\n        \n    float planeDist= p.y;\n    \n    float d = min(sphereDist, planeDist);\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, vec4 s) {\n    float dO = 0.;\n    for(int i = 0; i < MAX_STEPS; i++){\n        vec3 p = ro + rd*dO;\n        float dS = GetDist(p, s);\n        dO += dS;\n        if (dO > MAX_DIST || dS < SURF_DIST) break;\n    }    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p, vec4 s) {\n    float d = GetDist(p, s);\n    vec2 e = vec2(.01, 0.);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy, s), \n        GetDist(p-e.yxy, s), \n        GetDist(p-e.yyx, s));\n    return normalize(n);\n}\n\nfloat GetLight(vec3 p, vec4 s) {\n    vec3 lightPos = vec3(0., 5., 1.);\n    lightPos.xz += vec2(sin(iTime), cos(iTime))*3.;\n    vec3 l = normalize(lightPos - p);\n    vec3 n = GetNormal(p, s);\n    \n    float dif = dot(n, l);\n    float d = RayMarch(p+n*SURF_DIST*2., l, s);\n    if (d < length(lightPos-p)) dif *=.15;\n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0.);\n    \n    vec3 ro = vec3(.5, 1., 0.);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1.));\n\n    float t = iTime;\n\n    vec4 s = vec4(sin(t)*2., 1., 6., 1.+(sin(t)*0.25+0.25));\n    float r = RayMarch(ro, rd, s);    \n    vec3 p = ro + rd * r;   \n    float rdif = GetLight(p, s);    \n    col.r = rdif;\n    \n    // pft = pi-factored-time\n    float pft = sin(t+THIRD_2PI)*2.;\n    s = vec4(pft, 1., 6.-(pft*2.), 1.+(pft*0.25+0.25));\n    r = RayMarch(ro, rd, s);    \n    p = ro + rd * r;   \n    rdif = GetLight(p, s);    \n    col.b = rdif;\n    \n    pft = sin(t+THIRD_2PI*2.)*2.;\n    s = vec4(-pft, 1., 6.-(pft*2.), 1.+(pft*0.25+0.25));\n    r = RayMarch(ro, rd, s);    \n    p = ro + rd * r;   \n    rdif = GetLight(p, s);    \n    col.g = rdif;\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}