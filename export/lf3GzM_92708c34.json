{"ver":"0.1","info":{"id":"lf3GzM","date":"1711483864","viewed":57,"name":"Mark Rothko painting Ex.","username":"billrockx","description":"The Book of Shader exercise cap. 11\nMake a composition of rectangles, colors and noise that resembles some of the complexity of a Mark Rothko painting.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["tbos"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 2D Random\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nfloat box( vec2 st,  vec2 size){\n    float w =  4.5/iResolution.y;\n    size = 0.5 - size * 0.5;\n    st = smoothstep(0., w, min(st, 1.0 - st) - size );\n    return st.x * st.y;\n}\n\nvec3 sc(float param, vec2 pos, vec3 dc) {\n    return step(1., 1.0 - param) * vec3(0.205,0.000,0.000) +\n        step(.1, param)* dc * (1.0-noise(pos)*0.5);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord.xy/iResolution.y;\n    vec3 color = vec3(0.0);\n    vec2 tes = vec2(0.0);\n    vec2 pos = vec2(0.0);\n    float b0 = 0.0;\n\n    st *= vec2(3.0, 1.0);\n    tes = floor(st);\n    st = fract(st);\n    \n    pos = vec2(st*vec2(18.0, 54.0));\n    b0 = box(st, vec2(noise(pos)));\n    pos = vec2(st*vec2(15.0, 45.0));\n    b0 += box(st, vec2(noise(pos)));\n    \n    if (mod(tes.x, 3.0) < 1.0) {\n        pos = vec2(st * vec2(4.0, 12.0));\n        color = sc(b0, pos, vec3(0.355,0.007,0.020));\n    }\n    else if (mod(tes.x, 3.0) < 2.0) {\n        pos = vec2(st * vec2(30.0, 500.0));\n        color = sc(b0, pos, vec3(0.355,0.007,0.020));\n    }\n    else if (mod(tes.x, 3.0) < 3.0) {\n        pos = vec2(st * vec2(10.0, 30.0));\n        b0 *= box(st, vec2(noise(pos)));\n        pos = vec2(st * vec2(3.0, 12.0));\n        color = sc(b0, pos, vec3(0.900,0.738,0.129));\n    }\n    else {\n        color = vec3(0.0);\n    }\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}