{"ver":"0.1","info":{"id":"XtdyR2","date":"1533302415","viewed":104,"name":"MCO_Grayscale","username":"mcihanozer","description":"Turning textures into black and white and back into its original colors based on time","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["texture","gray","grey","mco"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float getPixelColor(const float pixelColor, const float lumiCoef)\n{\n    // We can use y = ax + b, where y is the fragment color and x is time\n    return ( (pixelColor - lumiCoef) * abs( sin(iTime * 0.3f) ) + lumiCoef  );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 coord2d = fragCoord.xy / iResolution.xy;\n    \n    vec3 luminosity = vec3(0.2125, 0.7154, 0.0721);\n    vec4 textureColor = texture(iChannel0, coord2d.xy);\n    float lumiCoef = dot(luminosity, textureColor.xyz);\n\n    // Luminosity coeficient - if you only want black and white\n    //textureColor.r = lumiCoef;\n    //textureColor.g = lumiCoef;\n    //textureColor.b = lumiCoef;\n    \n    textureColor.r = getPixelColor(textureColor.r, lumiCoef);\n    textureColor.g = getPixelColor(textureColor.g, lumiCoef);\n    textureColor.b = getPixelColor(textureColor.b, lumiCoef);\n    \n    normalize(textureColor);\n    \n    fragColor = textureColor;\n}","name":"Image","description":"","type":"image"}]}