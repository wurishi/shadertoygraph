{"ver":"0.1","info":{"id":"wt3GW8","date":"1576137932","viewed":172,"name":"Melting Effect","username":"ankd","description":"back buffer feedback and move texture coordinate","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["effect"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = gl_FragCoord.xy / iResolution.xy; \n    fragColor = vec4(texture(iChannel0, uv).rgb, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const float PI = acos(-1.);\n\nfloat usin(in float x) { return 0.5+0.5*sin(x); }\n\nvec3 hsv(in float h, in float s, in float v){ return ((clamp(abs(fract(h+vec3(0.,2.,1.)/3.)*6.-3.)-1., 0., 1.)-1.)*s+1.)*v; }\n\n\nmat2 rotate(in float r){ float c=cos(r),s=sin(r); return mat2(c,-s,s,c); }\nvec2 rotate(in vec2 p, in float r){ return rotate(r) * p; }\nvec3 rotate(in vec3 p, in vec3 r) {\n    p.xy = rotate(p.xy, r.z);\n    p.yz = rotate(p.yz, r.x);\n    p.zx = rotate(p.zx, r.y);\n    return p;\n}\n\n\nfloat hash(in float v) { return fract(sin(v)*43768.5453); }\nfloat hash(in vec2 v) { return fract(sin(dot(v, vec2(12.9898, 78.233)))*43768.5453); }\n\nfloat noise(float v){\n\tfloat i=floor(v), f=fract(v), u=f*f*f*(10.0+f*(-15.0+6.0*f));\n\treturn mix(hash(i), hash(i+1.), u);\n}\nfloat noise(in vec2 v) {\n    vec2 i=floor(v), f=fract(v), u=f*f*f*(10.0+f*(-15.0+6.0*f));\n    return mix(\n            mix(hash(i+vec2(0.,0.)), hash(i+vec2(1.,0.)), u.x),\n            mix(hash(i+vec2(0.,1.)), hash(i+vec2(1.,1.)), u.x),\n            u.y\n        );\n}\nfloat noise(in vec3 v) {\n    vec3 i=floor(v), f=fract(v), u=f*f*f*(10.0+f*(-15.0+6.0*f));\n    float n = i.x + 53.*i.y + 117.*i.z;\n    return mix(\n            mix(mix(hash(n+0.), hash(n+1.), u.x), mix(hash(n+53.), hash(n+54.), u.x), u.y),\n            mix(mix(hash(n+117.), hash(n+118.), u.x), mix(hash(n+170.), hash(n+171.), u.x), u.y),\n            u.z\n        );\n}\n\n// Some useful functions\n#define mod289(x) (x-floor(x*(1.0/289.0))*289.0)\n// #define permute(x) (mod289(((x*34.0)+1.0)*x))\n// vec4 taylorInvSqrt(vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; }\n// vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n// vec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n//\n// Description : GLSL 2D simplex noise function\n//      Author : Ian McEwan, Ashima Arts\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License :\n//  Copyright (C) 2011 Ashima Arts. All rights reserved.\n//  Distributed under the MIT License. See LICENSE file.\n//  https://github.com/ashima/webgl-noise\n//\nfloat snoise(vec2 v) {\n\n    // Precompute values for skewed triangular grid\n    const vec4 C = vec4(0.211324865405187,\n                        // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,\n                        // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,\n                        // -1.0 + 2.0 * C.x\n                        0.024390243902439);\n                        // 1.0 / 41.0\n\n    // First corner (x0)\n    vec2 i  = floor(v + dot(v, C.yy));\n    vec2 x0 = v - i + dot(i, C.xx);\n\n    // Other two corners (x1, x2)\n    vec2 i1 = vec2(0.0);\n    i1 = (x0.x > x0.y)? vec2(1.0, 0.0):vec2(0.0, 1.0);\n    vec2 x1 = x0.xy + C.xx - i1;\n    vec2 x2 = x0.xy + C.zz;\n\n    // Do some permutations to avoid\n    // truncation effects in permutation\n    i = mod289(i);\n    vec3 p = permute(\n            permute( i.y + vec3(0.0, i1.y, 1.0))\n                + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(\n                        dot(x0,x0),\n                        dot(x1,x1),\n                        dot(x2,x2)\n                        ), 0.0);\n\n    m = m*m ;\n    m = m*m ;\n\n    // Gradients:\n    //  41 pts uniformly over a line, mapped onto a diamond\n    //  The ring size 17*17 = 289 is close to a multiple\n    //      of 41 (41*7 = 287)\n\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n\n    // Normalise gradients implicitly by scaling m\n    // Approximation of: m *= inversesqrt(a0*a0 + h*h);\n    m *= 1.79284291400159 - 0.85373472095314 * (a0*a0+h*h);\n\n    // Compute final noise value at P\n    vec3 g = vec3(0.0);\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * vec2(x1.x,x2.x) + h.yz * vec2(x1.y,x2.y);\n    return 130.0 * dot(m, g);\n}\n\nvec4 permute(vec4 x) { return mod289(((x*34.0)+1.0)*x); }\nvec4 taylorInvSqrt(vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; }\nfloat snoise(vec3 v){\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n  // First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n  // Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n  // Permutations\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n  // Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n  //Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n  // Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\nfloat fbm(in vec3 p) {\n\tfloat res = 0.;\n\tres += 0.5000*snoise(p); p = rotate(p, vec3(0.3*PI))*2.02;\n\tres += 0.2500*snoise(p); p = rotate(p, vec3(0.3*PI))*2.03;\n\tres += 0.1250*snoise(p); p = rotate(p, vec3(0.3*PI))*2.01;\n\tres += 0.0625*snoise(p);\n\treturn res;\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec4 reset(in vec2 uv) {\n    return texture(iChannel1, uv);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = gl_FragCoord.xy / iResolution.xy;\n    vec4 tex;\n    if(iFrame==0) {\n        tex = reset(uv);\n    } else {\n        float f = fbm(vec3(uv*3., iTime*0.09));\n        float angle = sign(f);\n\n        float v = .01*fbm(vec3(uv*7., 10.+iTime*0.2+f));\n\n        uv += angle<0. ? vec2(v, 0.) : vec2(0., v);\n        uv = fract(uv);\n\n        vec3 HSV = texture(iChannel0, uv).rgb;\n        tex = vec4(HSV, 1.);\n\t    \n        float r = 0.5+0.5*fbm(vec3(uv*.7, iTime*0.13));\n        r = smoothstep(0.45, 0.55, r);\n        tex = mix(tex, reset(uv), r);\n    }\n    \n    fragColor = tex;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// post effect\n// - hsv to rgb\n// - tone\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = gl_FragCoord.xy / iResolution.xy;\n    vec3 tex = texture(iChannel0, uv).rgb;\n    vec3 col = tex;\n    \n    // hsv to rgb\n    col = hsv(col.r, col.g, col.b);\n    \n    \n    col = col*2.-1.;\n    vec3 s = sign(col);\n    col = abs(col);\n    \n    float tone = 3.;\n    col = (1.+floor(col*tone)) / tone;\n    \n    col *= s;\n    col = 0.5+0.5*col;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}