{"ver":"0.1","info":{"id":"3tsyDf","date":"1593299275","viewed":55,"name":"eyelash rendering","username":"meteotrix","description":"testing a bunch of eyelash rendering things for FFT diffraction purposes. It's rendered in inverted colours for a compositing trick.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["implicit"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec3 col = vec3 (0.2, 0.2, 0.2); //grey background\n    \n    vec2 uv = fragCoord/iResolution.xy; \n    uv.x = uv.x*1.777 - 0.38; //squarify UVs\n    \n    //if(uv.y <0.5)  uv.y = 1.0-uv.y; //mirror UVs vertically\n    \n    vec2 uv1 = uv.xy;\n    \n    //vertical offset\n    if (uv1.y < 0.5) uv1.y = 1.0 - uv1.y;\n    //float y_offset = sin(iTime)*0.05 - 0.1;\n    //uv1.y += y_offset;\n\n    float distance_to_upperlashes_center = distance(vec2(uv1.x, uv1.y * 2.0 + sin(iTime*2.0)*0.5), vec2(0.5, 1.9));\n\n    //if (distance_to_upperlashes_center < 0.4)\n    {\n        vec2 uv2 = uv1.xy;\n        \n        //curve lashes\n        //uv2.x = (uv2.x-0.5) * (1.0 - uv2.y*3.0) +0.5;        \n\n        float angle_around_center = (/*(iTime*0.5) +*/ 1.0 + acos(dot(normalize(uv2.xy - vec2(0.5, 0.5 + 0.5)), vec2(1, 0))));\n\n        //draw lashes\n        if (abs(fract((angle_around_center - 0.03 ) * 8.0 )) < 0.4 - distance_to_upperlashes_center )\n        {\n            col = vec3(1, 1, 1);\n            //col = vec3(abs(fract((angle_around_center - 0.03 ) * 16.0))*2.0);\n        }\n    }\n    \n    //black background\n    if (distance(uv.xy, vec2(0.5)) > 0.3 + sin(iTime*0.5)*0.01)\t\t\n        col = vec3(0, 0, 0);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}