{"ver":"0.1","info":{"id":"XccSRH","date":"1713540915","viewed":35,"name":"Chromatic Whirl","username":"1Noxah","description":":","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["shader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Improved palette function with a different set of colors and modulation\nvec3 palette(float t) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 0.5, 0.0);  // Slightly altered for a warmer color range\n    vec3 d = vec3(0.20, 0.40, 0.60);  // Changed for different hue shifts\n\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\n// Main rendering function with original transformations and effects\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    uv.x *= iResolution.x / iResolution.y;  // Compensate for non-square aspect ratios\n\n    vec3 finalColor = vec3(0.0);\n    vec2 center = vec2(0.5, 0.5);  // Center the effect\n\n    for (float i = 0.0; i < 3.0; i++) {  // Fewer iterations for a slightly different effect\n        vec2 p = uv * 1.5 - center;\n        float len = length(p);\n        float angle = atan(p.y, p.x);\n\n        // Rotate and scale the UV coordinates differently\n        uv = 0.5 + 0.3 * vec2(cos(angle + len + iTime * 0.1), sin(angle + len + iTime * 0.1));\n\n        // Distance-based color modulation\n        float d = 0.3 / (len + 0.01);\n        vec3 col = palette(len + iTime * 0.2);\n\n        finalColor += col * d;\n    }\n\n    fragColor = vec4(finalColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}