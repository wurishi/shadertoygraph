{"ver":"0.1","info":{"id":"l3jBzt","date":"1729851267","viewed":42,"name":"First Dither","username":"Redstone118","description":"Dithers and limits colour palette","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["simple"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 Dither(vec3 InColour, vec2 Pos, float Count);\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    float Size=5.;\n    col=Dither(col,fragCoord/Size,4.);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\nvec3 Dither(vec3 InColour, vec2 Pos, float Count){\n    mat4 Dith;\n    Dith[0]=vec4(0,8,2,10);\n    Dith[1]=vec4(12,4,14,16);\n    Dith[2]=vec4(3,11,1,9);\n    Dith[3]=vec4(15,7,13,5);\n    Dith/=16.*Count;\n    \n    return floor((InColour+Dith[int(Pos.x)%4][int(Pos.y)%4])*Count)/Count;\n}","name":"Image","description":"","type":"image"}]}