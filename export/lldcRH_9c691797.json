{"ver":"0.1","info":{"id":"lldcRH","date":"1531636297","viewed":106,"name":"Fourier Transform Visualizer","username":"tbabb","description":"Visualizes the Fourier transform. \n\nTop: f(t). Right: F(s).\n\nHorizontal axis: Time\nVertical axis: Freq\n\n- Drag to adjust f(t)'s center and spread in x and y.\n- Hold space and drag to adjust the frequency of f(t) and global phase.\n- Hold `a` to see F^-1(F)","likes":0,"published":1,"flags":48,"usePreview":0,"tags":["math","visualization","fourier"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define CENTER_PT vec2(0,0)\n#define WINDOW_W  32.\n\n\nstruct GaussianPulse {\n    float spread;\n    float ctr;\n    float freq;\n    float phase;\n};\n\n\nvec2 frag2field_coord(in vec2 xy) {\n    vec2 uv = xy/iResolution.xy;\n    return WINDOW_W * (uv - 0.5) + CENTER_PT;\n}\n\n    \nGaussianPulse readParams() {\n    vec4 bufdat  = texelFetch(iChannel0, ivec2(1,1), 0);\n    float ctr    = bufdat.x;\n    float spread = (0.5 * bufdat.y + iResolution.y / 2.);\n    float phase  = bufdat.z;\n    float freq   = bufdat.w;\n    vec2 ab = frag2field_coord(vec2(ctr,   freq));\n    vec2 cd = frag2field_coord(vec2(phase, spread));\n    ctr     =  ab.x;\n    freq    = -ab.y;\n    phase   =  cd.x;\n    float b = max(cd.y, sqrt(0.001));\n    spread  = 1. / (b*b);\n    return GaussianPulse(spread, ctr, freq, phase);\n}\n\n\nvec2 cmult(vec2 a, vec2 b) {\n    return vec2(\n        a.x * b.x - a.y * b.y,\n        a.x * b.y + a.y * b.x);\n}\n    \n    \nvec3 complex2color(in vec2 c) {\n    vec3 POS_I = vec3(1.,0.7,0.);\n    vec3 NEG_I = vec3(1.) - POS_I;\n    vec3 realcolor  = mix(vec3(0.), vec3(1.), c.x * 0.5 + 0.5);\n    vec3 cplexcolor = 2. * mix(NEG_I, POS_I, c.y * 0.5 + 0.5);\n    return 0.5 * realcolor * cplexcolor;\n}\n\nvec2 f(float x, GaussianPulse p) {\n    float q = x - p.ctr;\n    float envelope = exp(-p.spread * q * q);\n    float real  = cos(p.freq * x) * envelope;\n    float imag  = sin(p.freq * x) * envelope;\n    vec2  phase = vec2(cos(p.phase), sin(p.phase));\n    return cmult(phase, vec2(real, imag));\n}\n\n\nvec2 F(float x, GaussianPulse p) {\n    float q = p.freq + x;\n\tfloat envelope = exp(-q * q / (4. * p.spread));\n    float real = cos(p.ctr * (p.freq + x)) * envelope;\n    float imag = sin(p.ctr * (p.freq + x)) * envelope;\n    vec2 phase = vec2(cos(p.phase), sin(p.phase));\n    return cmult(phase, vec2(real, imag));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspect = iResolution.y / iResolution.x;\n    vec2 uv  = fragCoord/iResolution.xy;\n    vec2 xy  = frag2field_coord(fragCoord);\n    vec2 mxy = frag2field_coord(iMouse.xy);\n    if (iMouse.xy == vec2(0.)) {\n        mxy = 2. * vec2(cos(iTime), sin(iTime));\n    }\n    \n    GaussianPulse pulse = readParams();\n    \n    float k0 = mxy.x;\n    float w  = (xy.x - k0);\n    float alpha = 1. / max(mxy.y * mxy.y, 0.001);\n    vec2 f_t = f(xy.x, pulse);\n    vec2 F_t = F(xy.y, pulse);\n    \n\t\n    vec2 C = vec2(0);\n    if (uv.y > 1. - 0.05) {\n        C = f_t;\n    } else if (uv.x > 1. - 0.05 * aspect) {\n        C = F_t;\n    } else {\n        bool aDown = texelFetch(iChannel1, ivec2(65,0), 0).x > 0.;\n        vec2 coeff = aDown ? F_t : f_t;\n        float  sgn = aDown ? -1. : 1.;\n        vec2 z = vec2(cos(xy.x * xy.y), sin(sgn * xy.x * xy.y));\n        C = cmult(coeff, z);\n    }\n    \n    vec3 outcolor = complex2color(C);\n    \n    // uncomment to see alternate complex color visualization:\n    // outcolor = vec3(C * 0.5 + 0.5, 0.5);\n    \n    fragColor = vec4(pow(outcolor, vec3(1./2.2)), 1.);\n    \n    // draw axis hairlines\n    vec2 dx = 0.5 * (frag2field_coord(vec2(1.)) - frag2field_coord(vec2(0.)));\n    if (abs(xy.y) <= dx.y || abs(xy.x) <= dx.x) {\n        fragColor *= 0.9;\n    }\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // start with previous state\n    vec2 uv   = fragCoord / iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n    vec2 xy   = fragCoord - vec2(0.5); // align with integer grid\n    \n    vec4 base = texelFetch(iChannel0, ivec2(0,0), 0);\n    \n    // initialize\n    if (iFrame <= 0) {\n        // components: ctr, spread, phase, freq\n        vec2 r = iResolution.xy;\n        fragColor  = vec4(0.5, 0.125, 0.5, 0.5);\n        fragColor *= vec4(r, r);\n    }\n    \n    vec2 mcl  = iMouse.zw; // click pos\n    vec2 mxy  = iMouse.xy; // pointer pos\n    vec2 muv  = mcl / iResolution.xy;\n    bool down = mcl.x >= 0.;\n    \n    if (down && xy != vec2(0.,0.)) {\n        // writing to the \"current state\" pixel(s)\n        vec2 dxy = mxy - mcl;\n        vec2 minc = vec2(0., 0.);\n        vec2 maxc = iResolution.xy;\n        bool spaceDown = texelFetch(iChannel1, ivec2(32,0), 0).x > 0.;\n        if (!spaceDown) {\n            fragColor.xy = clamp(base.xy + dxy, minc, maxc);\n        } else {\n            fragColor.zw = base.zw + dxy;\n            fragColor.w  = clamp(fragColor.w, 0., iResolution.y);\n        }\n    } else if (!down && xy == vec2(0., 0.)) {\n        // writing to the \"base state\" pixel.\n        // use the last \"current state\".\n        fragColor = texelFetch(iChannel0, ivec2(1,0), 0);\n    }\n}","name":"Buf A","description":"","type":"buffer"}]}