{"ver":"0.1","info":{"id":"Ds3yRj","date":"1695219887","viewed":52,"name":"Intro Shader - RA2","username":"Nemecys","description":"Kishimisu\n\nhttps://www.youtube.com/watch?v=f4s1h2YETNY","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["intro","kishimisu"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Fork of \"Intro Shader - RA\" by Nemecys. https://shadertoy.com/view/csdyRB\n// 2023-09-20 12:32:24\n\n\n// cosine based palette, 4 vec3 params\n/* Gradient art made using the RGB curves http://dev.thi.ng/gradients/\n*/\n    vec3 palette( in float t)\n{ \n    vec3 a = vec3(0.308, 0.528, 0.638);\n    vec3 b = vec3(-0.832, 0.388, 0.500);\n    vec3 c = vec3(0.468, 0.968, 0.968);\n    vec3 d = vec3(0.168, 0.558, 0.718);\n\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n \n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n\n \n // vec2 uv = fragCoord / iResolution.xy * 2.0 - 1.0 ;\n   \n   /* Define Variables */\n   vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n   \n   /* Bank UV space before fract repetition */\n   vec2 uv0 = uv;\n   vec3 finalColor = vec3(0.0);\n   \n   \n   for (float i = 0.0; i < 3.1; i++)\n   {\n      \n   /* Fract - Takes only the digits after the decimal point - creating repetion within clip space \n   Use https://graphtoy.com/ to visualise these functions  = fract(x)\n   */\n   \n                           //uv *= 2.0;\n   uv = fract(uv * .8) -.5;\n                           //uv -= 0.5;\n   \n   float expo = exp(-length(uv0));\n   float d = length(uv)*expo;\n   \n   \n   /* Gradient Color is mapped against the orignal UV's before they are tiled */\n   vec3 col = palette(length(uv0) + i*.04 + sin(iTime*0.8));\n   \n\n   \n\n   /* Take the X (Width) of the UV's Multiply them by the current aspect ratio of the canvas\n      which is width divided by height\n   */\n\n                           // uv.x *= iResolution.x / iResolution.y;\n   \n   /* Vec data can assume coordinates e.g. U and V auto populate R and G as it contains 2 values\n    fragColor = vec4(uv.x, uv.y, 0.0, 1.0);\n\n                             uv = uv - 0.5; \n                             uv = uv * 2.0;\n                             uv = (uv - 0.5) * 2.0'\n                             uv = uv * 2.0 - 1.0 \n                             */\n\n\n        d = sin(d*8.0 + sin(iTime*0.8)/2.+0.8)/8.;\n        d = abs(d);\n        \n        \n        /* By using GraphToy you can better understand the RANGE of the data being created by your functions\n        Use this as a way to visualise if your math exists within the clipspace of the shader (-1, 1)\n        \n                            d = smoothstep (0.0, 0.1, d)\n        */\n        \n                            //d = 0.01/d;\n        d = pow(0.01 /d, 1.5);\n        \n        /* In Unreal you can do this with a multiply node or using OneMinus and Multiplying it by the low end value 0.02 \n        */\n        \n        // FinalColor is ADDED to the original Color Palette + Length math to allow for additive changes\n        finalColor += col * d;\n        \n                                // col *= d;\n        /* Taking the RGB output and Multiplying by the Mask we created */\n       \n        }\n        \n   fragColor = vec4(finalColor,1.0);\n   \n\n    \n}","name":"Image","description":"","type":"image"}]}