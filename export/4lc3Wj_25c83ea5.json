{"ver":"0.1","info":{"id":"4lc3Wj","date":"1471468719","viewed":285,"name":"Color mixing","username":"Egomeh","description":"Wanted to se what happens when colors er interpolated in different spaces, maybe someone else might find it interesting : )","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["interpolation","colorspace"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// http://stackoverflow.com/questions/15095909/from-rgb-to-hsv-in-opengl-glsl\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\n// http://stackoverflow.com/questions/15095909/from-rgb-to-hsv-in-opengl-glsl\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n// like step with two edges\nfloat range(float min, float max, float value)\n{\n    return step(min, value) - step(max, value);\n}\n\n// normalize [-1;1] -> [0;1]\nvec3 nrm(vec3 i)\n{\n\treturn (i + 1.) * .5;   \n}\n\n\n#define BLUE    vec3(0.16862745098039217, 0.3058823529411765, 0.9294117647058824)\n#define RED     vec3(0.9294117647058824, 0.23529411764705882, 0.43137254901960786)\n#define ORANGE  vec3(0.8509803921568627, 0.35294117647058826, 0.1843137254901961)\n#define SKYBLUE vec3(0.396078431372549, 0.6078431372549019, 0.9294117647058824)\n#define YELLOW  vec3(0.9254901960784314, 0.9294117647058824, 0.09411764705882353)\n#define WHITE  vec3(1., 1., 1.)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // make colors appear in order they are written.\n    uv.y = 1. - uv.y;\n\t\n    float t = iTime;\n    \n    vec3 one, other;\n    float tm = fract(t * .05);\n    if(tm < .15)\n    {\n        one = RED;\n        other = ORANGE;\n    }\n    else if(tm < .3)\n    {\n     \tone = RED;\n        other = SKYBLUE;\n    }\n    else if(tm < .45)\n    {\n     \tone = RED;\n        other = YELLOW;\n    }\n    else if(tm < .6)\n    {\n     \tone = RED;\n        other = YELLOW;\n    }\n    else if(tm < .75)\n    {\n     \tone = RED;\n        other = WHITE;\n    }\n    else if(tm < .9)\n    {\n     \tone = ORANGE;\n        other = SKYBLUE;\n    }\n    else if(tm < 1.)\n    {\n     \tone = ORANGE;\n        other = YELLOW;\n    }\n    else\n    {\n     \tone = RED;\n        other = BLUE;\n    }\n    \n    vec3 blend      = mix(one, other, uv.x);\n    vec3 blend_square = sqrt(mix(one*one, other*other, uv.x));\n    vec3 blend_gamma = pow(mix(pow(one,vec3(2.2)), pow(other,vec3(2.2)), uv.x), vec3(1./2.2));\n    vec3 blend_hsv  = hsv2rgb(mix(rgb2hsv(one), rgb2hsv(other),uv.x));\n    vec3 add = one + other;\n    vec3 add_square = sqrt(one*one + other*other);\n    \n    vec3 added = sqrt(mix(one*one, other*other, uv.x));\n    float added_luma = max(rgb2hsv(one).z, rgb2hsv(other).z);\n    added_luma = (rgb2hsv(one).z + rgb2hsv(other).z) * 0.5;\n    added = rgb2hsv(added);\n    added.z = added_luma;\n    added = hsv2rgb(added);\n    \n    \n    vec3 add_hsv = added;\n    vec3 min_rgb = min(one, other);\n    vec3 sub_order_hsv = hsv2rgb(rgb2hsv(max(one, other)) - rgb2hsv(min(one, other)));\n    vec3 sub_order = max(one, other) - min(one, other);\n    \n    \n    vec3 col = vec3(0.);\n    col += blend * range(0., .1, uv.y);\n    col += blend_square * range(.1,.2, uv.y);\n    col += blend_gamma * range(.2,.3, uv.y);\n    col += blend_hsv * range(.3, 0.4, uv.y);\n    col += add * range(.4, .5, uv.y);\n    col += add_square * range(.5, .6, uv.y);\n    col += add_hsv * range(.6, .7, uv.y);\n    col += min_rgb * range(.7, .8, uv.y);\n    col += sub_order_hsv * range(.8, .9, uv.y);\n    col += sub_order * range(.9, 1., uv.y);\n    \n    \n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}