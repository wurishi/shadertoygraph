{"ver":"0.1","info":{"id":"sltGzH","date":"1636193410","viewed":117,"name":"Snake on a Plane","username":"komrad36","description":"CLICK VIEWPORT to focus\nARROW KEYS to move\nENTER or SPACE to restart","likes":3,"published":1,"flags":48,"usePreview":0,"tags":["game","interactive","snake"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"const uint kRows = 8u;\nconst uint kCols = 10u;\nconst float kGameTick = 100e-3;","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    fragColor = vec4(vec3(0.82), 1.0);\n    uint size = min(uint(iResolution.x) / kCols, uint(iResolution.y) / kRows);\n    uvec2 xy = uvec2(fragCoord.x, iResolution.y - fragCoord.y);\n    if (any(greaterThanEqual(xy, size * uvec2(kCols, kRows))))\n        return;\n    uvec2 cell = xy / size;\n    uint i = cell.y * kCols + cell.x;\n    uvec2 border = xy % size;\n    border = min(border, size - border);\n    float b = float(min(border.x, border.y));\n    vec2 f = texelFetch(iChannel0, ivec2(cell), 0).xw;\n    uvec2 t = uvec2(floatBitsToUint(f.x), floatBitsToUint(f.y));\n    uint state = t.x & 3u;\n    uint pickup = (t.x >> 16u) & 0x3FFFu;\n    uint d = t.y & 0x3FFFu;\n    fragColor.xyz = mix(vec3(1.0, 0.2, 0.2), vec3(0.25, 0.0, 1.0), sqrt(float(d-1u) / float(kRows * kCols)));\n    fragColor.xyz = state == 1u && d == 1u ? vec3(1.0, 0.8, 0.0) : fragColor.xyz;\n    fragColor.xyz = state == 2u ? vec3(0.2, 0.2, 1.0) : fragColor.xyz;\n    fragColor.xyz = b <= 0.05 * float(size) || d == 0u ? vec3(0.0) : fragColor.xyz;\n    fragColor.xyz = state != 2u && i == pickup && b > 0.39 * float(size) ? vec3(0.2, 1.0, 0.2) : fragColor.xyz;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define F2U(x) floatBitsToUint(x)\n#define U2F(x) uintBitsToFloat(x)\n\nconst uint kCells = kRows * kCols;\n\nuvec2 XY(uint k)\n{\n    return uvec2(k % kCols, k / kCols);\n}\n\nuint K(uvec2 xy)\n{\n    return xy.y * kCols + xy.x;\n}\n\nuint Urand(uint m)\n{\n    return uint(fract(sin(mod((iTime + 0.9273) * 91.3458, 6.283185307)) * 47453.5453) * float(m) + 0.5);\n}\n\nuvec2 Move(uvec2 xy, uint d)\n{\n    return uvec2(xy.x + uint(d == 2u) - uint(d == 0u), xy.y + uint(d == 3u) - uint(d == 1u));\n}\n\nuint GetDist(uvec2 xy)\n{\n    return F2U(texelFetch(iChannel0, ivec2(xy), 0).w) & 0x3FFFu;\n}\n\nuint GetHead(uvec2 xy)\n{\n    return F2U(texelFetch(iChannel0, ivec2(xy), 0).y) & 3u;\n}\n\nuint GetTail(uvec2 xy)\n{\n    return F2U(texelFetch(iChannel0, ivec2(xy), 0).w) >> 30u;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    uvec2 xy = uvec2(fragCoord.x, fragCoord.y);\n    if (any(greaterThanEqual(xy, uvec2(kCols, kRows))))\n        return;\n\n    uint res = uint(iResolution.x) + uint(iResolution.y);\n    vec4 f = texelFetch(iChannel0, ivec2(xy), 0);\n    uvec4 tex = uvec4(F2U(f.x), F2U(f.y), F2U(f.z), F2U(f.w));\n\n    if (iFrame == 0 || ((tex.w >> 16u) & 0x3FFFu) != res ||\n        max(texelFetch(iChannel1, ivec2(13, 1), 0).x,\n            texelFetch(iChannel1, ivec2(32, 1), 0).x) != 0.0)\n    {\n        uint x = ((Urand(kCells - 2u) + 1u) << 16u) | (3u << 30u);\n        uint y = (1u << 16u) | (3u << 30u);\n        uint z = F2U(iTime + 2.0 * kGameTick);\n        uint w = uint(xy == uvec2(0, 0)) | (4u << 13u) | (res << 16u);\n        fragColor = vec4(U2F(x), U2F(y), U2F(z), U2F(w));\n        return;\n    }\n\n    uint state = tex.x & 3u;\n    uvec2 head = XY((tex.x >> 2u) & 0x3FFFu);\n    uvec2 pickup = XY((tex.x >> 16u) & 0x3FFFu);\n    uint newDir = tex.x >> 30u;\n    uvec2 tail = XY((tex.y >> 2u) & 0x3FFFu);\n    uint cellHead = tex.y & 3u;\n    uint cellsOn = (tex.y >> 16u) & 0x3FFFu;\n    uint reqDir = tex.y >> 30u;\n    float nextGameTime = abs(U2F(tex.z));\n    uint dir = ((tex.z >> 31u) | ((tex.w >> 13u) & ~1u)) & 7u;\n    uint cellTail = (tex.w >> 30u) & 3u;\n    uint cellDist = tex.w & 0x3FFFu;\n\n    for (uint i = 0u; i < 4u; ++i)\n        reqDir = bool(texelFetch(iChannel1, ivec2(37u + i, 1u), 0).x) ? i : reqDir;\n\n    newDir = bool(min(reqDir - dir, reqDir - (dir ^ 2u))) ? reqDir : newDir;\n\n    if (iTime >= nextGameTime && state == 0u)\n    {\n        nextGameTime += kGameTick;\n        dir = newDir;\n        cellHead = head == xy ? dir : cellHead;\n        uvec2 newHead = Move(head, dir);\n        state = uint(newHead.x >= kCols ||\n            newHead.y >= kRows ||\n            (GetDist(newHead) != 0u && newHead != tail));\n        if (state == 0u)\n        {\n            if (newHead != pickup)\n            {\n                cellDist = tail == xy ? 0u : cellDist;\n                tail = tail == head ? newHead : Move(tail, GetHead(tail));\n            }\n\n            head = newHead;\n\n            if (head == pickup)\n            {\n                ++cellsOn;\n                state = cellsOn == kCells ? 2u : state;\n                if (state == 0u)\n                {\n                    uint c = Urand(kCells - cellsOn - 1u);\n                    for (uint k = 0u; k < kCells; ++k)\n                    {\n                        pickup = c == 0u ? XY(k) : pickup;\n                        c -= uint(GetDist(XY(k)) == 0u && XY(k) != head);\n                    }\n                }\n            }\n\n            uvec2 p = head != tail ? Move(head, dir ^ 2u) : head;\n            uint c = head != tail ? 2u : 1u;\n            for (uint k = 0u; k < kCells - 1u; ++k)\n            {\n                cellDist = p == xy ? c : cellDist;\n                c += uint(p != tail);\n                p = p != tail ? Move(p, GetTail(p)) : p;\n            }\n\n            cellTail = head == xy ? dir ^ 2u : cellTail;\n            cellDist = head == xy ? 1u : cellDist;\n        }\n    }\n\n    uint x = state | (K(head) << 2u) | (K(pickup) << 16u) | (newDir << 30u);\n    uint y = cellHead | (K(tail) << 2u) | (cellsOn << 16u) | (reqDir << 30u);\n    uint z = F2U(nextGameTime) | (dir << 31u);\n    uint w = cellDist | ((dir & ~1u) << 13u) | (res << 16u) | (cellTail << 30u);\n    fragColor = vec4(U2F(x), U2F(y), U2F(z), U2F(w));\n}","name":"Buffer A","description":"","type":"buffer"}]}