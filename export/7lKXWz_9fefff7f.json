{"ver":"0.1","info":{"id":"7lKXWz","date":"1640711532","viewed":89,"name":"PCB maker","username":"dirkadirkadan","description":"Makes pcb from image / video. View in full screen. Adjust vars in Common.","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["pcb"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat texcol(vec2 uv) {\n    vec3 tcol = texture(iChannel0,uv).rgb;\n    float intensity = .333*(tcol.r+tcol.g+tcol.b);\n    \n    return intensity;\n}\n\nbool lineActive(vec2 g_center, vec2 offset) {\n    return \n       (texture(iChannel0, g_center+offset).g > .8 &&\n        texture(iChannel0, g_center).g > .8);\n}\n\n// Wire direction styles\n#define UP_RIGHT   0\n#define DOWN_RIGHT 1\n#define VERTICAL   2\n#define HORIZONTAL 3\n#define NONE       4\n\nint getLineType(vec2 uv) {\n    int idx=NONE;\n    float gridsize = GRID_SIZE;\n    float dd = 1./GRID_SIZE;\n    vec2 g_center = floor(vec2(uv*gridsize))/gridsize+.5*vec2(dd);\n \n    if (lineActive(g_center, vec2(dd,  -dd))) idx = UP_RIGHT;\n    if (lineActive(g_center, vec2(-dd, -dd))) idx = DOWN_RIGHT;\n    if (lineActive(g_center, vec2(0,   -dd))) idx = VERTICAL;\n    if (lineActive(g_center, vec2(-dd, 0)))   idx = HORIZONTAL;\n    \n    return idx;\n}\n\n// Detects whether wire should exist here and renders wire line\nvec3 drawLine(vec2 uv) {\n    float gridsize = GRID_SIZE;\n    \n    vec2 gv = fract(uv*gridsize);\n    \n    // 5 styles\n    float forms[5];    \n    \n    float dthk = .24;\n    float sthk = .16;\n    \n    forms[UP_RIGHT] = smoothstep(dthk, -0.02, abs(gv.x+gv.y-1.));\n    forms[DOWN_RIGHT] = smoothstep(dthk, -0.02, abs(gv.x-gv.y));\n    forms[HORIZONTAL] = step(1.-sthk, gv.y+.15);\n    forms[VERTICAL] = step(1.-sthk, gv.x+.15);\n    forms[NONE] = 0.;\n    \n    float val = .5;\n    \n    int idx=NONE;\n    float dd = 1./gridsize;\n    vec2 g_center = floor(vec2(uv*gridsize))/gridsize+.5*vec2(dd);\n\n    idx = getLineType(uv);\n//    if (texcol(g_center) > .8 && idx == 4) idx = 0;\n\n    float form = forms[idx];\n    form = pow(form,.05);\n    \n    // Scheme colors\n    vec3 bkg = vec3(1., 82., 66.)/255.;\n    vec3 wir = vec3(157., 205., 168.)/255.;\n    vec3 blk = vec3(.0, .0, .0);\n\n    float which = step(.5, fract(uv.x+uv.y));\n    which = step(.065, form);\n\n    return which*wir+(1.-which)*bkg;\n\n}\n\nvec3 drawContact(vec2 uv) {\n    vec3 col = vec3(0.);\n    float gridsize = GRID_SIZE*2.;\n    float dd = 1./gridsize;\n    \n    bool contact = false;\n        vec2 g_center = floor(vec2(uv*gridsize))/gridsize+.5*vec2(dd);\n\n    if (getLineType(uv) == NONE) {\n        contact = contact || (getLineType(uv+vec2(0, -dd)) == VERTICAL);\n        contact = contact || (getLineType(uv+vec2(0, dd)) == VERTICAL);\n        contact = contact || (getLineType(uv+vec2(dd, 0)) == HORIZONTAL);\n        contact = contact || (getLineType(uv+vec2(-dd, 0)) == HORIZONTAL);\n        contact = contact || (getLineType(uv+vec2(dd)) == DOWN_RIGHT);\n        contact = contact || (getLineType(uv+vec2(-dd)) == DOWN_RIGHT);\n        contact = contact || (getLineType(uv+vec2(-dd, dd)) == UP_RIGHT);\n        contact = contact || (getLineType(uv+vec2(dd, -dd)) == UP_RIGHT);\n\n    }\n\n    if (contact) {\n        vec2 u2 = (uv-g_center+vec2(-dd, -dd))*10.;\n        float val = GRID_SIZE*11.*length(uv-g_center);\n        col += max(0., 1.-pow(1.-(val-.8),2.))*vec3(.8, .75, .69);\n    }\n\n\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Subdivide image into grid\n    float gridsize = GRID_SIZE;\n    vec2 gv = fract(uv*gridsize);\n    \n    vec3 col = vec3(0.);\n\n    // Draw wire line\n    col += drawLine(uv);\n    \n    // Draw grid if enabled\n    col += DRAW_GRID*.1*(step(.9, gv.x) + step(.9, gv.y));\n\n    // Draw solder contact points\n    col += drawContact(uv);\n\n    // Fill in block if enabled\n    if (getLineType(uv) < 4) col += DRAW_BLOCKS*vec3(1.);\n    \n    // Allow video / edges bleedthrough if enabled\n    col = mix(col, texture(iChannel1,uv).rgb, VIDEO_BLEEDTHROUGH);\n    col = mix(col, texture(iChannel0, uv).rgb, RAW_EDGES);\n    \n//    col += .4*(pow(col,vec3(.25))*sin(5.*dot(uv,uv)));\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float texcol(vec2 uv) {\n    vec3 tcol = texture(iChannel0,uv).rgb;\n    float intensity = .333*(tcol.r+tcol.g+tcol.b);\n    \n    return intensity;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float d=1./GRID_SIZE;\n    \n    // Laplacian edge detection\n    float intensity = -4.*texcol(uv)+\n                          texcol(uv+vec2(d, 0.))+\n                          texcol(uv+vec2(-d,0.))+\n                          texcol(uv+vec2(0., d))+\n                          texcol(uv+vec2(0.,-d));\n    intensity = step(EDGE_THRESHOLD, intensity);\n    \n    vec3 col = vec3(intensity);\n\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define EDGE_THRESHOLD .045\n#define GRID_SIZE 100.\n#define DRAW_GRID 0.\n#define DRAW_BLOCKS 0.\n#define VIDEO_BLEEDTHROUGH .0\n#define RAW_EDGES .0\n","name":"Common","description":"","type":"common"}]}