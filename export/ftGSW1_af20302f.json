{"ver":"0.1","info":{"id":"ftGSW1","date":"1640563977","viewed":73,"name":"Mandelbrot Voyage","username":"imagicien","description":"Drag to pan.\n\nThings I want to add:\n- Controlling zoom with the keyboard/mouse\n- Nice color palette\n- Better resolution? (how?)\n- Antialising?\n\nI saw I'm not the first one doing a Mandelbrot Explorer, but who cares, it's fun to experiment with it! :)","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/////////////////////////////////\n// Memory Management\n/////////////////////////////////\nvec4 load(in vec2 fragCoordRead)\n{\n    return texture(iChannel0, (0.5 + fragCoordRead) / iChannelResolution[0].xy, -100.0 );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const vec2 storage_data = vec2(1., 0.);\n    vec2 data = load(storage_data).xy;\n    \n    float zoom = exp(iTime * 0.3 - 2.);\n    \n    float ratio = iResolution.y/iResolution.x;\n    vec2 uv = fragCoord/iResolution.x;\n    uv -= vec2(0.5, 0.5 * ratio);\n    uv *= 1. / zoom;\n\n#define MANDELBROT 1\n#if MANDELBROT\n    // Mandelbrot\n    uv += vec2(0.42884, -0.231345); // Position with kinda interesting details\n    vec2 z = vec2(0.);\n    vec2 c = uv - data;\n#else\n    // Julia\n    vec2 z = uv;\n    vec2 c = data;\n#endif\n    \n    int max_iter = 1000;\n    float inside = 1.0;\n    int i = 0;\n    for (; i < max_iter; i++) {\n        z = vec2(\n            z.x * z.x - z.y * z.y,\n            2. * z.x * z.y\n        ) + c;\n        if (dot(z,z) > 256.) {\n            break;\n        }\n    }\n    \n    float smooth_i = float(i);\n    smooth_i -= log2(log2(dot(z,z))) - 4.0; \n    float shade = 0.04 * pow(zoom, -0.3);\n    inside = smooth_i * shade;\n    \n    vec3 col = vec3(inside);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/////////////////////////////////\n// Memory Management\n// from https://www.shadertoy.com/view/Xst3zX\n/////////////////////////////////\nvec4 load(in vec2 fragCoordRead)\n{\n    return texture(iChannel0, (0.5 + fragCoordRead) / iChannelResolution[0].xy, -100.0 );\n}\n\nfloat isInside( vec2 p, vec2 c ) \n{ \n    vec2 d = abs(p-0.5-c) - 0.5; return -max(d.x,d.y); \n}\n\nvoid store( in vec2 fragCoordWrite, in vec4 value, inout vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = (isInside(fragCoord, fragCoordWrite) > 0.0) ? value : fragColor;\n}\n/////////////////////////////////\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const vec2 storage_mouse = vec2(0., 0.);\n    const vec2 storage_data = vec2(1., 0.);\n\n    vec2 mouse = iMouse.xy / iResolution.xx;\n    \n    vec2 oldMouse = load(storage_mouse).xy;\n    \n    // Store mouse pos\n    vec4 newMouse = vec4(mouse.x, mouse.y, 0., 0.);\n    store(storage_mouse, newMouse, fragColor, fragCoord);\n    \n    // Persistent data\n    vec2 oldData = load(storage_data).rg;\n\n    vec2 deltaMouse = mouse - oldMouse;\n    bool isClickFrame = iMouse.w > 0.;\n    deltaMouse *= float(!isClickFrame);\n    \n    float zoom = exp(iTime * 0.3 - 2.);\n    vec2 deltaData = deltaMouse / zoom;\n    vec2 newData = oldData + deltaData;\n    vec4 newData_ = vec4(newData.x, newData.y, 0., 0.);\n    store(storage_data, newData_, fragColor, fragCoord);\n}","name":"Buffer A","description":"","type":"buffer"}]}