{"ver":"0.1","info":{"id":"lX2XzV","date":"1710844510","viewed":42,"name":"colorShift","username":"muluo","description":"test","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["mhxy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 linear2rgb(vec3 In)\n{\n\tvec3 sRGBLo = In * 12.92;\n    vec3 sRGBHi = (pow(max(abs(In), 1.192092896e-07), vec3(1.0 / 2.4, 1.0 / 2.4, 1.0 / 2.4)) * 1.055) - 0.055;\n    if (all(lessThan(In, vec3(0.0031308))))\n    {\n        return sRGBLo;\n    }\n       \n    return sRGBHi;\n}\n\nvec3 rgb2linear(vec3 In)\n{\n\tvec3 linearRGBLo = In / 12.92;;\n    vec3 linearRGBHi = pow(max(abs((In + 0.055) / 1.055), 1.192092896e-07), vec3(2.4, 2.4, 2.4));\n    return (all(lessThan(In, vec3(0.04045)))) ? linearRGBLo : linearRGBHi;\n}\n\n\nvec3 colorShift(vec3 adjColor, vec3 tintColor)\n{\n\t// adjColor = linear2rgb(adjColor);\n\t\n\tfloat h = tintColor.r / 360.0;\n\tfloat s = tintColor.g / 100.0;\n\tfloat l = tintColor.b / 100.0;\n\t\n\tfloat cMin = min(min(adjColor.r, adjColor.g), adjColor.b);\n    float cMax = max(max(adjColor.r, adjColor.g), adjColor.b);\n    float delta = cMax - cMin;\n    float value = cMax + cMin;\n    float E = 0.01;\n\n    // Shift hue\n    float deltaR=(((cMax - adjColor.r)/6.)+(delta/2.))/delta;\n    float deltaG=(((cMax - adjColor.g)/6.)+(delta/2.))/delta;\n    float deltaB=(((cMax - adjColor.b)/6.)+(delta/2.))/delta;\n\n    float hue = 0.0;\n    float saturation = 0.0;\n    float lightness = value / 2.0;\n\n    if (delta > 0.0)\n    {         \n        if(cMax - adjColor.r < E)\n        {\n            hue = deltaB - deltaG;\n        }\n        else if(cMax - adjColor.g < E)\n        {\n            hue = (1./3.) + deltaR - deltaB;\n        }\n        else\n        { \n            hue = (2./3.) + deltaG - deltaR;\n        }\n        hue = fract(hue);\n\n        if (lightness < 0.5)\n        {\n            saturation = delta / value;\n        }\n        else\n        {\n            saturation = delta / (2.0 - value);\n        }\n    }\n\n    hue = fract(hue + h);\n\t\t\n    vec3 rgb = clamp((vec3(abs(hue * 6.0 - 3.0) - 1.0, 2.0 - abs(hue * 6.0 - 2.0), 2.0 - abs(hue * 6.0 - 4.0))), 0.0, 1.0);\n\t\n    float C = (1.0 - abs(2.0 * lightness - 1.0)) * saturation;\n    // adjColor = (rgb - 0.5) * C + lightness;\n\t\n\t// Shift saturation\n\tif (delta > E)\n    {\n        float a = 0.0;\n        if (s >= 0.0)\n        {\n            if ((s + saturation) >= 1.0)\n            {\n                a = saturation;\n            }\n            else\n            {\n                a = 1.0 - s;\n            }\n            a = 1.0 / a - 1.0;\n            adjColor = adjColor + (adjColor - lightness) * a;\n        }\n        else\n        {\n            a = s;\n            adjColor = lightness + (adjColor - lightness) * (1.0 + a);\n        }\n    }\n\t\n\t// Shift lightness\n\tif (l > 0.0)\n    {\n        adjColor = adjColor * (1.0 - l) + l;\n    }\n    else if (l < 0.0)\n    {\n        adjColor = adjColor + adjColor * l;\n    }\n\t\n\tadjColor = rgb2linear(adjColor);\n\t\n\treturn adjColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    // vec2 uv = fragCoord/iResolution.xy;\n    vec4 color = texture(iChannel0, fragCoord / iResolution.xy);\n    // 通常是[0, 1]\n    \n    // 124: (((0, 127, 127),), ((14, 178, 140),), ((212, 153, 114),), ((155, 159, 76),), ((177, 159, 140),), ((29, 140, 108),)),\n    vec3 outColor = colorShift(vec3(color.r, color.g, color.b), vec3(155.0 * 360.0 / 255.0, 159.0 * 100.0 / 255.0, 76.0 * 100.0 / 255.0));\n\n    // Time varying pixel color\n    // vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(outColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}