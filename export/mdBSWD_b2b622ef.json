{"ver":"0.1","info":{"id":"mdBSWD","date":"1670297142","viewed":92,"name":"julia set i think","username":"tawkko","description":"yay\n\nslide the mouse around on the screen to change the angle","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["myfirstshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI     3.14159265f\n\n\nint inMandelbrot(float ca, float cb, float juliaTheta) {\n\n  int iterations = 500;\n  float infinitySquared = 10000.0f;\n  float juliaR = 0.7885;\n  //float juliaR = PI / 3.0f;\n\n\n  // let goesToInfinity = false;\n  // let lifespan = 0;\n  float za = ca;\n  float zb = cb;\n  //zb = -0.8f;\n  for (int i = 0; i < iterations; i++) {\n  \n    // uncomment for mandelbrot\n    //float newZa = za * za - zb * zb + ca;\n    //float newZb = 2.0f * za * zb + cb;\n    \n    // uncomment for julia set\n    ///*\n    float newZa = za * za - zb * zb;\n    float newZb = 2.0f * za * zb;\n    newZa += juliaR * cos(juliaTheta);\n    newZb += juliaR * sin(juliaTheta);\n    //*/\n\n    if (newZa * newZa + newZb * newZb > infinitySquared) {\n      return i;\n      // goesToInfinity = true;\n      // break;\n    }\n    za = newZa;\n    zb = newZb;\n  }\n  return -1;\n  // return goesToInfinity;\n  \n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    //vec2 uv = fragCoord/iResolution.xy;\n    \n    //float zoom = cos(iTime * PI / 4.0f) + 1.3f;\n    float zoom = 0.5f;\n    \n    //float zoom = 2.0f;\n    \n    //vec2 uv = (fragCoord/iResolution.xy - 1.0f/2.0f) * (3.0f) / zoom;\n    vec2 uv = (fragCoord-iResolution.xy*0.5) / iResolution.y / zoom;\n    //float juliaTheta = PI/4.0f + iTime / 1.0f;\n    //float juliaTheta = PI/4.0f + iTime / (cos(iTime) + 6.0f) ;\n    float juliaTheta = PI/1.0f + (iMouse.x - iResolution.x/2.0f) / iResolution.x * 3.0f;\n\n\n    \n    \n      //let posX = (x - width/2) / (250);\n      // let poxY = (y - 0.21101*(400 + zoom) - height/2) / (400 + zoom);\n      //let poxY = (y - height/2) / (250);\n      int lifespan = inMandelbrot(uv.x, uv.y, juliaTheta);\n      // let innit = false;\n      // console.log(innit);\n\n      //colorMode(HSB);\n      \n      // let c = color(map(lifespan, 0, iterations, 0, 255), 255, 255);\n      //vec3 c = 0.5 + 0.5*cos( 0.5f * (float(lifespan) + vec3(0,2,4)) );\n      //vec3 c = 0.5 + 0.5*cos( 0.1f * (float(lifespan) + vec3(0,1,2)) );\n      //vec3 c = 0.5 + 0.5*cos( 0.6f * (float(lifespan) * 2.5f + vec3(5, 3, 2)) );\n      vec3 c = 0.5 + 0.5*cos( 0.6f * (float(lifespan) * 0.5f + vec3(5, 3, 2)) );\n      //vec3 c = 0.5 + 0.5*cos( 0.5f * (float(lifespan) * 0.5f + vec3(1, 0, -10)) );\n\n      if (lifespan == -1) {\n        c = vec3(0.0f, 0.0f, 0.0f);\n      }\n\n    \n    \n    \n    /*\n    vec3 col = vec3(0, 0, 0);\n    if (uv.y < 0.0f) {\n        col.r = 0.0f;\n    }\n    else {\n        col.r = 1.0f;\n    }\n    */\n    \n    //col.r = (uv.x + 1.0f) / 2.0f;//x should be from -1 to 1\n    \n    \n    fragColor = vec4(c,1.0);\n\n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\np5.disableFriendlyErrors = true;\n\nlet zoom = 1;\n// let zoomVel = 1;\n// let zoomAcc = 0.3;\nlet zoomMult = 1.05;\n\nlet pixelSlider;\nlet pixelSize = 3;\n\nlet iterations = 100;\n\nlet juliaTheta;\nlet juliaR = 0.7885;\n\nfunction setup() {\n  createCanvas(1000, 700);\n  pixelDensity(1);\n  juliaTheta = PI/4;\n\n  pixelSlider = createSlider(1, 5, 3);\n\n  frameRate(20);\n}\n\nfunction draw() {\n  background(220);\n\n  loadPixels();\n  pixelSize = pixelSlider.value();\n\n  for (let y = 0; y < height; y += pixelSize) {\n    for (let x = 0; x < width; x += pixelSize) {\n\n      // let posX = (x - 0.74*(400 + zoom) - width/2) / (400 + zoom);\n      // let posX = (x - 0.5*300 - width/2) / (300);\n      let posX = (x - width/2) / (250);\n      // let poxY = (y - 0.21101*(400 + zoom) - height/2) / (400 + zoom);\n      let poxY = (y - height/2) / (250);\n      let lifespan = inMandelbrot(posX, poxY);\n      // let innit = false;\n      // console.log(innit);\n\n      colorMode(HSB);\n      \n      let c = color(map(lifespan, 0, iterations, 0, 255), 255, 255);\n      if (lifespan == -1) {\n        c = color(\"white\");\n      }\n\n      let index = 4 * (x + y * width);\n      // pixels[index] = innit ? 200 : 0;\n      // pixels[index + 1] = innit ? 200 : 0;\n      // pixels[index + 2] = innit ? 200 : 0;\n\n      for (let i = 0; i < pixelSize; i++) {\n        for (let j = 0; j < pixelSize; j++) {\n          pixels[index + 4 * (i + j * width)] = red(c);\n          pixels[index + 4 * (i + j * width) + 1] = green(c);\n          pixels[index + 4 * (i + j * width) + 2] = blue(c);\n        }\n      }\n    }\n  }\n  \n  updatePixels();\n  zoom *= zoomMult;\n  // zoom += zoomVel;\n  // zoomVel += zoomAcc;\n  // zoomAcc += 0.1;\n  filter(INVERT);\n  juliaTheta += PI/80;\n}\n\n\nfunction inMandelbrot(ca, cb) {\n\n\n  let infinitySquared = 500;\n\n  // let goesToInfinity = false;\n  // let lifespan = 0;\n  let za = ca;\n  let zb = cb;\n  for (let i = 0; i < iterations; i++) {\n    // newZa = za * za - zb * zb + ca;\n    // newZb = 2 * za * zb + cb;\n    newZa = za * za - zb * zb;\n    newZb = 2 * za * zb;\n\n    newZa += juliaR * Math.cos(juliaTheta);\n    newZb += juliaR * Math.sin(juliaTheta);\n\n    if (newZa * newZa + newZb * newZb > infinitySquared) {\n      return i;\n      // goesToInfinity = true;\n      // break;\n    }\n    za = newZa;\n    zb = newZb;\n  }\n  return -1;\n  // return goesToInfinity;\n  \n}\n\nfunction mousePressed() {\n  zoom += 100;\n  zoomMult += 0.01;\n}\n*/","name":"Image","description":"","type":"image"}]}