{"ver":"0.1","info":{"id":"XfcGDN","date":"1711674958","viewed":43,"name":"Fork L2 - TP3 - Mamadou 945","username":"Mamadou","description":"TP4 - Shadowing","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["shadowing"],"hasliked":0,"parentid":"4XBSR1","parentname":"L2 - TP3 - Shadows"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modeling - 2024.02.06\n// Eric Galin\n\n// Constant for number of steps\nconst int Steps = 200;  // Number of steps for ray marching\n// Epsilon for ray marching\nconst float Epsilon = 0.01;  // Small value to prevent self-intersection\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n    float sa = sin(a); \n    float ca = cos(a);\n    return mat3(ca, sa, 0.0, -sa, ca, 0.0, 0.0, 0.0, 1.0);\n}\n\nstruct Ray {\n    vec3 ro; // Ray origin\n    vec3 rd; // Direction\n};\n\n// Compute a point on the ray\n// ray : Ray\n// t   : depth\nvec3 Point(Ray ray, float t)\n{\n    return ray.ro + t * ray.rd;\n}\n\n// Compute the ray\n//     m : Mouse position\n//     p : Pixel\nRay CreateRay(vec2 m, vec2 p)\n{\n    float a = 3.0 * 3.14 * m.x; \n    float le = 3.5;\n  \n    // Origin\n    vec3 ro = vec3(35.0, 0.0, 10.0) * Rz(a);\n  \n    // Target point\n    vec3 ta = vec3(0.0, 0.0, 3.0);\n  \n    // Orthonormal frame\n    vec3 w = normalize(ta - ro);\n    vec3 u = normalize(cross(w, vec3(0.0, 0.0, 1.0)));\n    vec3 v = normalize(cross(u, w));\n    vec3 rd = normalize(p.x * u + p.y * v + le * w);\n    return Ray(ro, rd);\n}\n\n// Primitives\n\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\nfloat Sphere(vec3 p, vec3 c, float r)\n{\n    return length(p - c) - r;\n}\n\n// Plane\n// p : point\n// c : center of skeleton\n// n : Normal\nfloat Plane(vec3 p, vec3 c, vec3 n)\n{\n    return dot(p - c, n);\n}\n\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a, float b)\n{\n    return min(a, b);\n}\n\n// Union, extension to four sub-trees\n// a,b,c : field function of left and right sub-trees\nfloat Union(float a, float b, float c, float d)\n{\n    return min(min(a, b), min(c, d));\n}\n\n// Difference\n// a,b : field function of left and right sub-trees\nfloat Difference(float a, float b)\n{\n    return max(a, -b);\n}\n\n// Potential field of the object\n// p : point\n/*float object(vec3 p)\n{\n    float v = Sphere(p, vec3(3.0, 0.0, 4.0), 4.0);\n\n    v = Union(v,\n              Sphere(p, vec3(3.0, 0.0, 4.0), 4.0));\n\n    float d = Union(\n        Sphere(p, vec3(5.0, 1.0, 5.0), 3.0),\n        Sphere(p, vec3(-1.0, 1.0, 6.0), 3.0),\n        Sphere(p, vec3(-1.0, 2.0, 2.0), 2.0),\n        Sphere(p, vec3(1.0, 1.0, 6.0), 3.0));\n    v = Difference(v, d);\n\n    v = Union(v,\n              Plane(p, vec3(0.0, 0.0, -1.0), vec3(0.0, 0.0, 1.0)));\n\n    return v;\n}*/\n\n\n\n\n// Potential field of the object\n// p : point\n/*float object(vec3 p)\n{\n    float v = Sphere(p, vec3(3.0, 0.0, 4.0), 4.0);\n\n    v = Union(v,\n              Sphere(p, vec3(-3.0, 0.0, 6.0), 2.0));\n\n    float d = Union(\n        Sphere(p, vec3(5.0, 1.0, 5.0), 3.0),\n        Sphere(p, vec3(-1.0, 1.0, 6.0), 3.0),\n        Sphere(p, vec3(-1.0, 2.0, 2.0), 2.0),\n        Sphere(p, vec3(1.0, 1.0, 6.0), 3.0));\n    v = Difference(v, d);\n\n    v = Union(v,\n              Plane(p, vec3(0.0, 0.0, -1.0), vec3(0.0, 0.0, 1.0)));\n\n    return v;\n}*/\n\n\n\n// Potential field of the object\n// p : point\n/*float Sphere1(vec3 p)\n{\n    return Sphere(p, vec3(3.0, 0.0, 4.0), 6.0);\n}\n\nfloat Sphere2(vec3 p)\n{\n    return Sphere(p, vec3(-3.0, 0.0, 8.0), 3.0);\n}\n\nfloat Sphere3(vec3 p)\n{\n    return Sphere(p, vec3(5.0, 2.0, 12.0), 3.0);\n}\n\nfloat Sphere4(vec3 p)\n{\n    return Sphere(p, vec3(-1.0, 1.0, 16.0), 3.0);\n}\n\nfloat Sphere5(vec3 p)\n{\n    return Sphere(p, vec3(-1.0, 2.0, 20.0), 3.0);\n}\n\nfloat Sphere6(vec3 p)\n{\n    return Sphere(p, vec3(1.0, 1.0, 24.0), 3.0);\n}\n\nfloat object(vec3 p)\n{\n    float v = Sphere1(p);\n\n    v = Union(v, Sphere2(p));\n    v = Union(v, Sphere3(p));\n    v = Union(v, Sphere4(p));\n    v = Union(v, Sphere5(p));\n    v = Union(v, Sphere6(p));\n\n    v = Union(v, Sphere(p, vec3(0.0, 4.0, 28.0), 1.5));\n    v = Union(v, Sphere(p, vec3(4.0, 3.0, 32.0), 2.5));\n    v = Union(v, Sphere(p, vec3(-4.0, 2.0, 36.0), 2.0));\n\n    v = Difference(v, Plane(p, vec3(0.0, -2.0, 0.0), vec3(0.0, 1.0, 0.0)));\n\n    return v;\n}*/\n\nfloat Sphere1(vec3 p)\n{\n    return Sphere(p, vec3(3.0, 0.0, 4.0), 10.0); // Rayon agrandi à 10.0\n}\n\nfloat Sphere2(vec3 p)\n{\n    return Sphere(p, vec3(-3.0, 0.0, 8.0), 6.0); // Rayon agrandi à 6.0\n}\n\nfloat Sphere3(vec3 p)\n{\n    return Sphere(p, vec3(5.0, 2.0, 12.0), 6.0); // Rayon agrandi à 6.0\n}\n\nfloat Sphere4(vec3 p)\n{\n    return Sphere(p, vec3(-1.0, 1.0, 16.0), 6.0); // Rayon agrandi à 6.0\n}\n\nfloat Sphere5(vec3 p)\n{\n    return Sphere(p, vec3(-1.0, 2.0, 20.0), 6.0); // Rayon agrandi à 6.0\n}\n\nfloat Sphere6(vec3 p)\n{\n    return Sphere(p, vec3(1.0, 1.0, 24.0), 6.0); // Rayon agrandi à 6.0\n}\n\nfloat object(vec3 p)\n{\n    float v = Sphere1(p);\n\n    v = Union(v, Sphere2(p));\n    v = Union(v, Sphere3(p));\n    v = Union(v, Sphere4(p));\n    v = Union(v, Sphere5(p));\n    v = Union(v, Sphere6(p));\n\n    v = Union(v, Sphere(p, vec3(0.0, 4.0, 28.0), 3.5)); // Rayon agrandi à 3.5\n    v = Union(v, Sphere(p, vec3(4.0, 3.0, 32.0), 5.0)); // Rayon agrandi à 5.0\n    v = Union(v, Sphere(p, vec3(-4.0, 2.0, 36.0), 4.0)); // Rayon agrandi à 4.0\n\n    v = Difference(v, Plane(p, vec3(0.0, -2.0, 0.0), vec3(0.0, 1.0, 0.0)));\n\n    return v;\n}\n\n\n\n\n\n\n// Function to calculate hard shadows\nfloat Shadow(const vec3 fragCoord, const vec3 lightPosition, float objectRadius) {\n    // Shadow radius\n    float shadowRadius = 0.0; // Adjust as needed for your scene\n\n    // Light direction\n    vec3 lightDir = normalize(lightPosition - fragCoord);\n\n    // Ray step size\n    float stepSize = 0.01; // Adjust as needed for your scene\n\n    // Traverse ray from light towards pixel\n    for (float t = stepSize; t < shadowRadius; t += stepSize) {\n        // Position on the ray\n        vec3 pointOnRay = fragCoord + t * lightDir;\n\n        // Distance from point on ray to light source\n        float distanceToLight = length(pointOnRay - lightPosition);\n\n        // If distance is less than object radius, point is in shadow\n        if (distanceToLight < objectRadius) {\n            return 0.0; // Point in shadow\n        }\n    }\n\n    return 1.0; // Point lit\n}\n\n// Fonction Fibonacci pour générer les points sur une sphère\nvec3 FibonacciSpherePoint(int i, int n) {\n    float phi = float(i) * (3.1415926535897932384626433832795 / ((1.0 + sqrt(5.0)) / 2.0));\n    float y = 1.0 - float(i) / float(n - 1) * 2.0;\n    float radius = sqrt(1.0 - y * y);\n\n    float x = cos(phi) * radius;\n    float z = sin(phi) * radius;\n\n    return vec3(x, y, z);\n}\n\n\n\n\n\nvec3 ObjectNormal(vec3 p)\n{\n    const float eps = 0.001;\n    vec3 n;\n    float v = object(p);\n    n.x = object(vec3(p.x + eps, p.y, p.z)) - v;\n    n.y = object(vec3(p.x, p.y + eps, p.z)) - v;\n    n.z = object(vec3(p.x, p.y, p.z + eps)) - v;\n    return normalize(n);\n}\n\nfloat SphereTrace(Ray ray, float e, out bool h, out int s)\n{\n    h = false;\n    float t = 0.0;\n  \n    for (int i = 0; i < Steps; i++)\n    {\n        s = i;\n        vec3 p = Point(ray, t);\n        float v = object(p);\n      \n        if (v < 0.0)\n        {\n            h = true;\n            break;\n        }\n      \n        t += max(Epsilon, v);\n      \n        if (t > e)\n        {\n            break;\n        }\n    }\n  \n    return t;\n}\n\nvec3 Background(vec3 d)\n{\n    return mix(vec3(0.45, 0.55, 0.99), vec3(0.65, 0.69, 0.99), d.z * 0.5 + 0.5);\n}\n\nfloat SoftShadow(vec3 fragCoord, vec3 lightPosition, float objectRadius, int n) {\n    float shadow = 0.0;\n    float radius = 0.1; // Rayon pour tester l'ombre douce, ajusté\n\n    // Générer les points sur une sphère avec la suite de Fibonacci\n    for (int i = 0; i < n; i++) {\n        vec3 pointOnSphere = FibonacciSpherePoint(i, n);\n        vec3 pointOnRay = fragCoord + radius * pointOnSphere;\n\n        // Distance au point de lumière\n        float distanceToLight = length(pointOnRay - lightPosition);\n\n        // Si la distance est inférieure au rayon de l'objet, ajouter à l'ombre\n        if (distanceToLight < objectRadius) {\n            shadow += 1.0;\n        }\n    }\n\n    // Normaliser l'ombre en fonction du nombre de points et retourner une valeur dans [0, 1]\n    shadow /= float(n);\n    return clamp(shadow, 0.0, 1.0);\n}\n\nvec3 Shade(vec3 p, vec3 n, vec3 e)\n{\n    const vec3 lp = vec3(5.0, 10.0, 20.0); // Position de la lumière, ajustée\n    vec3 l = normalize(lp - p);\n    vec3 ambient = vec3(0.25) + vec3(0.25) * Background(n);\n    float shadow = SoftShadow(p, lp, 0.2, 500); // Nombre de points pour l'ombre douce, ajusté\n    vec3 diffuse = vec3(0.35) * clamp(dot(n, l), 0.0, 1.0) * vec3(1.0);\n    vec3 r = reflect(e, n);\n    vec3 specular = vec3(0.15) * pow(clamp(dot(r, l), 0.0, 1.0), 35.0) * vec3(1.0);\n    vec3 c = ambient + shadow * (diffuse + specular);\n    return c;\n}\n\n\nvoid mainImage(out vec4 color, in vec2 fragCoord)\n{\n    // Dimensions de l'écran\n    vec2 resolution = iResolution.xy;\n\n    // Nombre de points à générer\n    int numPoints = 200;\n\n    // Rayon de la sphère\n    float sphereRadius = 1.0;\n\n    // Couleur de base\n    vec3 baseColor = vec3(0.0, 0.0, 0.0);\n\n    // Calculer le point de la sphère avec Fibonacci\n    for (int i = 0; i < numPoints; ++i)\n    {\n        // Générer le point sur la sphère\n        vec3 pointOnSphere = FibonacciSpherePoint(i, numPoints);\n\n        // Convertir le point 3D en coordonnées écran 2D\n        vec2 screenCoord = pointOnSphere.xy * sphereRadius * 0.5 + vec2(0.5);\n\n        // Dessiner le point\n        if (length(screenCoord - fragCoord.xy / resolution) < 1.0 / resolution.x)\n        {\n            color = vec4(1.0); // Afficher en blanc\n            return;\n        }\n    }\n\n    color = vec4(baseColor, 1.0); // Fond noir\n}\n\n\n\n\n/*void mainImage(out vec4 color, in vec2 pxy)  \n{\n    // Pixel\n    vec2 pixel = (-iResolution.xy + 2.0 * pxy) / iResolution.y;\n\n    // Mouse\n    vec2 m = iMouse.xy / iResolution.xy;\n  \n    // Camera\n    Ray ray = CreateRay(m, pixel);\n  \n    // Hit and number of steps\n    bool hit;\n    int s;\n  \n    // Trace ray\n    float t = SphereTrace(ray, 75.0, hit, s);\n  \n    // Shade background\n    vec3 rgb = Background(ray.rd);\n  \n    if (hit)\n    {\n        // Position\n        vec3 p = Point(ray, t);\n    \n        // Compute normal\n        vec3 n = ObjectNormal(p);\n    \n        // Calculate shadow\n        float shadow = Shadow(p, vec3(5.0, 10.0, 20.0), 0.2); // Adjust parameters as needed\n    \n        // Shade object with light\n        rgb = Shade(p, n, ray.rd) * (1.0 - shadow); // Apply shadow\n        \n        // Alternatively, if you want to just apply the shadow without modifying the object's color:\n        // rgb *= (1.0 - shadow);\n    }\n    \n    color = vec4(rgb, 1.0);\n}*/\n\n\n","name":"Image","description":"","type":"image"}]}