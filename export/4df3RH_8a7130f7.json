{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"float nrand(vec2 n) {\n\t\n  return fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = vec2(0,1)+vec2(1,-1)*fragCoord.xy / iResolution.xy;\n\tvec2 uv2 = uv;\n    uv.x = mod( uv.x, 0.25 );\n\tuv.x -= 0.15*iTime;\n\n\tvec2 seed = uv2+fract(iTime);\n\tfloat nrnd = nrand(seed);\n\tfloat srnd = nrnd-0.5;\n\t\n\tconst int num_samples = 4;\n\tconst float num_samples_f = float(num_samples);\n\t\n\tvec2 dist = vec2(30.0,0) / iResolution.xy;\n\tvec2 p0 = uv - 0.5*dist;\n\tvec2 p1 = uv + 0.5*dist;\n\tvec2 stepvec = (p1-p0)/(num_samples_f-1.0);\n\tvec2 p;\n\n\tconst float MIP_BIAS = -10.0; //note: always sample mip0\n\t\n\t\n\t//regular bandy\n\tp = p0;\n\tvec4 sum_bandy = texture( iChannel0, p, MIP_BIAS );\n\tfor(int i=1;i<num_samples;++i)\n\t{\n\t\tp+=stepvec;\n\t\tsum_bandy += texture( iChannel0, p, MIP_BIAS );\n\t}\n\tsum_bandy /= num_samples_f;\n\t\n\t\n\t//2x2 ordered dithering\n\tconst vec4 D2 = 0.25 * vec4( 3, 1, 0, 2 );\n\tconst vec4 tgt = vec4(0,1,2,3);\n\tvec2 ij = floor(mod( fragCoord.xy, vec2(2.0) ));\n\tfloat idx = ij.x + 2.0*ij.y;\n\tvec4 m = step( abs(vec4(idx)-tgt), vec4(0.5) ) * D2;\n\tfloat d = m.x+m.y+m.z+m.w;\n\tp = p0 + d * stepvec;\n\tvec4 sum_ordered = texture( iChannel0, p, MIP_BIAS );\n\tfor(int i=1;i<num_samples;++i)\n\t{\n\t\tp+=stepvec;\n\t\tsum_ordered += texture( iChannel0, p, MIP_BIAS );\n\t}\n\tsum_ordered /= num_samples_f;\n\n\t\n\t//noise offset\n\tp = p0 + srnd*stepvec;\n\tvec4 sum_noisy = texture( iChannel0, p, MIP_BIAS );\n\tfor(int i=1;i<num_samples;++i)\n\t{\n\t\tp+=stepvec;\n\t\tsum_noisy += texture( iChannel0, p, MIP_BIAS );\n\t}\n\tsum_noisy /= num_samples_f;\n\n    //noise per sample\n    /*\n\tp = p0;\n\tvec4 sum_noisy = vec4(0.0);\n\tfor(int i=0;i<num_samples;++i)\n\t{\n\t\tp+=stepvec;\n        vec2 nr = (0.5-nrand( seed + float(i) )) * stepvec;\n\t\tsum_noisy += texture( iChannel0, p + nr, MIP_BIAS );\n\t}\n\tsum_noisy /= num_samples_f;\n\t*/\n\n\t\n\t//dither offset, better texcache util\n\tp = p0+0.5*step(nrnd,0.5) * stepvec;\n\tvec4 sum_dither = texture( iChannel0, p, MIP_BIAS );\n\tfor(int i=1;i<num_samples;++i)\n\t{\n\t\tp+=stepvec;\n\t\tsum_dither += texture( iChannel0, p, MIP_BIAS );\n\t}\n\tsum_dither /= num_samples_f;\n\n\t\n\tfloat l = uv2.x;\n\tvec4 outcol = vec4(0.0);\n\tif ( l<(1.0/4.0)) outcol = sum_bandy;\n\telse if ( l<2.0/4.0 ) outcol = sum_ordered;\n\telse if ( l<3.0/4.0 ) outcol = sum_dither;\n\telse outcol = sum_noisy;\n\n\t//note: pure input\n\t//outcol = texture( iChannel0, uv, MIP_BIAS );\n\t\t\n\t//note: increase contrast to view artefacts\n\t//outcol.rgb = 4.0*outcol.rgb - 2.0;\n\n\t//note lines\n\toutcol += step(abs(l-(1.0/4.0)),0.002);\n\toutcol += step(abs(l-(2.0/4.0)),0.002);\n\toutcol += step(abs(l-(3.0/4.0)),0.002);\n\t\n\tfragColor = outcol;\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4df3RH","date":"1362131492","viewed":4720,"name":"jittering: Blur aliasing","username":"hornet","description":"Alleviating banding via dithering and noise\nFrom left to right:\n- ordinary equidistant sampling\n- 2x2 ordered dithering offsets\n- 2step random-dithering offsets (switch between two offsets randomly per pixel)\n- random offset per pixel","likes":38,"published":1,"flags":0,"usePreview":1,"tags":["noise","blur","banding"],"hasliked":0,"parentid":"","parentname":""}}