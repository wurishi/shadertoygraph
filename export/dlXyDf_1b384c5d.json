{"ver":"0.1","info":{"id":"dlXyDf","date":"1691286732","viewed":178,"name":"Sea of Bubbles","username":"andrew741","description":"A bubbly sea with rays of light breaking through the surface, and dozens of fish in the background.\n\nUse the mouse to look around.","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["sea","water","light","ocean","underwater","bubbles","blue","fish","lightrays","animal","animals"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// a bunch of random parameters\n#define AmbientColor vec3(0.05, 0.125, 0.15)\n#define Itterations 12.\n\n// bubble parameters\n#define BubbleColor vec3(0.7, 0.85, 1.)\n#define CellSize vec2(18., 18.)\n#define BubbleOffsetStrength 8.\n#define BubbleSeed 5.\n\n// fish parameters\n#define FishOffsetStrength vec2(10., 15)\n#define CellSizeFish vec2(25., 35.)\n\n// sunray parameters\n#define MaxSunRayDepth 10.\n#define SunRaySeed 60.\n\n// the matrix for the hash function (weights from the origonal Hash function)\n#define HashMat  mat3( vec3(127.1,311.7, 74.7), vec3(269.5,183.3,246.1),vec3(113.5,271.9,124.6))\n#define HashMat2 mat2( vec2(127.1, 311.7), vec2(269.5, 183.3))\n\n// this hash is from someone elses shader (with some modifactions)\nvec3 Hash(vec3 p) {  return fract(sin(p * HashMat ) * 43758.5453123) * 2. - 1.;  }\nvec2 Hash(vec2 p) {  return fract(sin(p * HashMat2) * 43758.5453123) * 2. - 1.;  }\n\n// from another persons shader\nfloat Perlin(vec3 x)\n{\n    // grid\n    vec3 i = floor(x);\n    vec3 w = fract(x);\n    \n    // cubic interpolant\n    vec3 u = w*w*(3.0-2.0*w);\n    vec3 du = 6.0*w*(1.0-w);\n    \n    // gradients\n    vec3 ga = Hash( i+vec3(0.0,0.0,0.0) );\n    vec3 gb = Hash( i+vec3(1.0,0.0,0.0) );\n    vec3 gc = Hash( i+vec3(0.0,1.0,0.0) );\n    vec3 gd = Hash( i+vec3(1.0,1.0,0.0) );\n    vec3 ge = Hash( i+vec3(0.0,0.0,1.0) );\n\tvec3 gf = Hash( i+vec3(1.0,0.0,1.0) );\n    vec3 gg = Hash( i+vec3(0.0,1.0,1.0) );\n    vec3 gh = Hash( i+vec3(1.0,1.0,1.0) );\n    \n    // projections\n    float va = dot( ga, w-vec3(0.0,0.0,0.0) );\n    float vb = dot( gb, w-vec3(1.0,0.0,0.0) );\n    float vc = dot( gc, w-vec3(0.0,1.0,0.0) );\n    float vd = dot( gd, w-vec3(1.0,1.0,0.0) );\n    float ve = dot( ge, w-vec3(0.0,0.0,1.0) );\n    float vf = dot( gf, w-vec3(1.0,0.0,1.0) );\n    float vg = dot( gg, w-vec3(0.0,1.0,1.0) );\n    float vh = dot( gh, w-vec3(1.0,1.0,1.0) );\n\t\n    // interpolations\n    return va + u.x*(vb-va) + u.y*(vc-va) + u.z*(ve-va) + u.x*u.y*(va-vb-vc+vd) + u.y*u.z*(va-vc-ve+vg) + u.z*u.x*(va-vb-ve+vf) + (-va+vb+vc-vd+ve-vf-vg+vh)*u.x*u.y*u.z;\n}\n\n// multiple layers of perlin noise (to provide more detail to it)\nfloat Fractal(vec3 p)\n{\n    float perlin  = Perlin(p      ) * 0.4 ;\n    perlin       += Perlin(p * 2. ) * 0.27;\n    perlin       += Perlin(p * 4. ) * 0.17;\n    perlin       += Perlin(p * 8. ) * 0.1 ;\n    perlin       += Perlin(p * 16.) * 0.06;\n    return pow(max(perlin * 2. - 0.05, 0.), 0.5);\n}\n\n// rotates a 2d point based on an angle\nvec2 rot2D(vec2 v, float a)\n{\n    float sa = sin(a);\n    float ca = cos(a);\n    return v * mat2(ca, -sa, sa, ca);\n}\n\n// renders a bubble (just a circle subtracted from a larger cirlce)\nfloat Bubble(vec2 uv, float size, float rot, float seed)\n{\n    // getting the new position\n    vec3 cell = vec3(floor(uv * size / CellSize), seed);\n    vec3 hash = Hash(cell);\n    float offset = Perlin(cell + vec3(0., 0., iTime * 0.2));\n    vec2 np = rot2D(mod(uv * size, CellSize) - CellSize*0.5, rot) + hash.xy*BubbleOffsetStrength*vec2(offset, 1.);\n    \n    // rendering the bubble\n    float len = length(np);\n    return max(smoothstep(1., 0.8, len) - smoothstep(0.8, 0.5, len), 0.);\n}\n\n// renders a fish (elipse plus weird function I made)\nfloat Fish(vec2 uv, float size, float displacement)\n{\n    // getting the new position\n    vec3 cell = vec3(floor(uv * size / CellSizeFish), 0.);\n    vec3 hash = Hash(cell);\n    vec2 np = mod(uv * size, CellSizeFish) - CellSizeFish*0.5 + hash.xy*FishOffsetStrength;\n    np += vec2(0., sin(np.x*2. + displacement)*0.125);\n    \n    // rendering the bubble\n    float body = smoothstep(1., 0.9, length(np*vec2(0.5, 1.)));\n    float tail = np.x - 2. + pow(max(abs(np.y) - 0.2, 0.) / (np.x - 1.5), 21.);\n    \n    float fish = body;\n    if (np.x > 1.5) fish = max(fish, smoothstep(1., 0.9, tail));\n    \n    return fish * (hash.z * 0.5 + 1.);\n}\n\n// the main shader\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // getting the uv coord\n    float zoom = 24.;\n    vec2 mouseOffset = smoothstep(0., 1., iMouse.xy/iResolution.xy) * vec2(30., 8.);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y * zoom;\n    \n    // the pixel size for antialiasing\n    float pixelSize = zoom / iResolution.y * 1.5;\n    \n    // drawing the background water + fish\n    float depthDarken = smoothstep(-0.5, 0.6, fragCoord.y/iResolution.y);\n    vec3 col = AmbientColor * depthDarken;\n    float fish = Fish( uv + vec2(iTime,                  0.), 2., iTime*2.);\n    fish      += Fish(-uv + vec2(iTime, -CellSizeFish.x*0.5), 2., iTime*2.);\n    col += depthDarken*0.1*min(fish, 1.);\n    \n    // looping through the layers of bubbles\n    float stepSize = 1./Itterations;\n    vec2 bubbleOffset = vec2(0., iTime);\n    for (float i = stepSize; i <= 1.+stepSize; i+=stepSize)\n    {\n        // the itteration number\n        float itteration = i*Itterations;\n        \n        // sun rays\n        if (itteration < MaxSunRayDepth)\n        {\n            float sunRayLength = Fractal(vec3((uv.x - mouseOffset.x*i + uv.y*0.3) * 0.3, iTime*0.1, itteration + SunRaySeed));\n            if (uv.y > (1.-sunRayLength) * 35. - 18.) col *= i*0.3+1.;\n        }\n        \n        // rendering the bubble layer\n        vec3 hash = Hash(vec3(itteration, itteration, BubbleSeed));\n        col += depthDarken * BubbleColor * i *\n            Bubble(uv - (bubbleOffset+mouseOffset)*i + itteration*CellSize*hash.x, (1.-i)+1., 0., itteration);\n    }\n    \n    // the final color\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}