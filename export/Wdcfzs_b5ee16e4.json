{"ver":"0.1","info":{"id":"Wdcfzs","date":"1605744189","viewed":66,"name":"ps_JuliaSet","username":"p_schneider","description":"This shader targets to achieve a mathematical render of Julia's Set fractals, beeing a subset of the\nwell known Mandelbrot Set.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["sdf","juliaset","fractals"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nThis documentation refers to the GitHub Repo: https://github.com/pedrotrschneider/shader-fractals\n\n(PT - Br) Documentação em português começa na linha 8.\n(En) English documentation starts on line 29.\n\n(PT - Br)\nDocumentação em português:\nEste é um shader voltado para a renderização matemática de fractais do Conjunto de Julia, tratando-se de\num subconjunto do Conjunto de Mandelbrot.\n\nPara a construção desse shader foram utilizadas diversas fontes:\n- The Art of Code: https://www.youtube.com/channel/UCcAlTqd9zID6aNX3TzwxJXg\n- The Coding Train: https://www.youtube.com/channel/UCvjgXvBlbQiydffZU7m1_aw\n- Sebastian Lague: https://www.youtube.com/user/Cercopithecan\n\nEste shader está sob a licença MIT.\nCheque \"License.txt\" para detalhes sobre a licensa.\n\nInstruções para compilar:\n- Entre no site https://www.shadertoy.com\n- No canto superior direito, clique em \"new\". Você será redirecionado para uma página com uma caixa\nde texto onde voce pode escrever e uma tela.\n- Apague todo o conteúdo da caixa de texto.\n- Copie este código e cole-o diretamente na ciaxa de texto.\n- Se nada mudar, aperte \"alt\" + \"enter\" e o shader deve compilar.\n\n(En)\nEnglish documentation:\nThis shader targets to achieve a mathematical render of Julia's Set fractals, beeing a subset of the\nwell known Mandelbrot Set.\n\nFor the creation of this shader, several resources were used:\n- The Art of Code: https://www.youtube.com/channel/UCcAlTqd9zID6aNX3TzwxJXg\n- The Coding Train: https://www.youtube.com/channel/UCvjgXvBlbQiydffZU7m1_aw\n- Sebastian Lague: https://www.youtube.com/user/Cercopithecan\n\nThis shader in under the MIT license.\nRefer to \"LICENSE.txt\" for the details of the license.\n\nInstructions to compile:\n- Follow this url: https://www.shadertoy.com.\n- On the upper right portion of the screen, click on the \"new\" button. You will be redirected to a page\nwith a text box you can write on and a screen.\n- Delete all the text on the text box.\n- Copy this code and paste it on the text box.\n- If nothing happnes, press \"alt\" + \"enter\" and the shader should compile.\n*/\n\n#define RECURSION_LIMIT 10000.0\n#define PI 3.141592653589793238\n\n// Method for the mathematical construction of the julia set\nfloat juliaSet (vec2 c, vec2 constant) {\n  float recursionCount = 0.0;\n\n  vec2 z = c;\n\n  for (float i = 0.0; i < RECURSION_LIMIT; i++) {\n    z = vec2 (z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + constant;\n\n    if (length (z) > 2.0) {\n      break;\n    }\n\n    recursionCount++;\n  }\n\n  return recursionCount;\n}\n\n// Main method of the sahder\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n  const vec2[6] constants = vec2[] (\n    vec2 (-0.7176, -0.3842),\n    vec2 (-0.4, -0.59), // <-- !!!!!!\n    vec2 (0.34, -0.05), // <-- !!!!!!\n    vec2 (0.355, 0.355), // <-- !!!!!!\n    vec2 (-0.54, 0.54),\n    vec2 (0.355534, -0.337292)\n  );\n\n  vec2 uv = 2.0 * (fragCoord - 0.5 * iResolution.xy) / iResolution.y; // Normalized pixel coordinates (from 0 to 1)\n  vec2 uv2 = uv; // Creates a copy of the uvs for coloring\n  vec3 col = vec3 (1.0); // Color to be drawn on the screen\n\n  float a = PI / 3.0; // rotation angle [rad]\n  vec2 U = vec2 (cos (a), sin (a)); // U basis vector (new x axis)\n  vec2 V = vec2 (-U.y, U.x); // V basis vector (new y axis)\n  uv = vec2 (dot (uv, U), dot (uv, V)); // Rotationg the uv\n  uv *= 0.9;\n\n  vec2 c = uv;\n  float recursionCount = juliaSet (c, constants[3]);\n  float f = recursionCount / RECURSION_LIMIT;\n\n  float offset = 0.5;\n  vec3 saturation = vec3 (1.0, 1.0, 1.0);\n  float totalSaturation = 1.0;\n  float ff = pow (f, 1.0 - (f * 1.0));\n  col.r = smoothstep (0.0, 1.0, ff) * (uv2.x * 0.5 + 0.3);\n  col.b = smoothstep (0.0, 1.0, ff) * (uv2.y * 0.5 + 0.3);\n  col.g = smoothstep (0.0, 1.0, ff) * (-uv2.x * 0.5 + 0.3);\n  col.rgb *= 5000.0 * saturation * totalSaturation;\n\n  fragColor = vec4 (col.rgb, 1.0); // Outputs the result color to the screen\n}","name":"Image","description":"","type":"image"}]}