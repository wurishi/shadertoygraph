{"ver":"0.1","info":{"id":"NtcSD8","date":"1654986941","viewed":102,"name":"Meta Squircles","username":"Temulgeh","description":"mmmmmmmm sweet metaballs","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["metaballs"],"hasliked":0,"parentid":"7tcGWl","parentname":"Sweet Metaballs"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535897932384626433832795\n\n\nfloat aa_abs_radius = 0.5;\nfloat field_rel_radius = 0.15;\nfloat orbit_size = 0.5;\nfloat orbit_time = 4.0;\n\n\nfloat linearStep(float a, float b, float t)\n{\n    return (t - a) / (b - a);\n}\n\n\nfloat smoothStart3(float t)\n{\n    return t * t * t;\n}\n\n\nfloat smoothStop3(float t)\n{\n    float complementary = 1.0 - t;\n    return 1.0 - complementary * complementary;\n}\n\n\nfloat smoothStep3(float t)\n{\n    return mix(smoothStart3(t), smoothStop3(t), t);\n}\n\n\nfloat field(vec2 center, float radius, vec2 point)\n{\n    vec2 difference = abs(point - center);\n    float x = difference.x;\n    float y = difference.y;\n    return smoothStep3(\n        clamp(\n            linearStep(\n                radius + field_rel_radius,\n                radius - field_rel_radius,\n                (\n                    pow(pow(x, 5.0) + pow(y, 5.0), 1.0/5.0)\n                )\n            ),\n            0.0,\n            1.0\n        )\n    );\n}\n\n\n// this function also has the effect of bluring the transition\n// which looks cool imo so i'm keeping it\n// yes i'm aware the blurring depends on the resolution but shhhh\nfloat threshold(float value)\n{\n    float smoothing_distance = aa_abs_radius / iResolution.y / field_rel_radius;\n    return smoothstep(\n        0.5 - smoothing_distance,\n        0.5 + smoothing_distance,\n        value\n    );\n}\n\n\nvoid mainImage(out vec4 frag_color, in vec2 frag_coord)\n{\n    vec2 uv = frag_coord / iResolution.xy;\n    vec2 scaled_coords = frag_coord / iResolution.y;\n    vec2 scaled_res = iResolution.xy / iResolution.y;\n    vec2 center = scaled_res * 0.5;\n    \n    float alpha = 0.0;\n    alpha += field(center, 0.15, scaled_coords);\n    \n    float pos_x = sin(iTime * 2.0 * PI / orbit_time) * orbit_size;\n    //float pos_y = sin(iTime * 4.0 * PI / orbit_time) * orbit_size * 0.5;\n    float pos_y = 0.0;\n    alpha += field(center + vec2(pos_x, pos_y), 0.15, scaled_coords);\n    \n    alpha = threshold(alpha);\n    \n    vec3 color = vec3(uv, 1.0);\n    color = vec3(1.0) - (vec3(1.0) - color) * (1.0 - alpha);\n    frag_color = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}