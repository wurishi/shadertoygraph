{"ver":"0.1","info":{"id":"MltcRn","date":"1531339999","viewed":324,"name":"London Wood","username":"belfry","description":"Another fft experiment. Still trying to figure out how to make good use of it.","likes":7,"published":1,"flags":64,"usePreview":0,"tags":["fft","bumpmapping","lights","soundcloud"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"ltSSRR","filepath":"https://soundcloud.com/nurseryrhymesabc/london-bridge-is-falling","previewfilepath":"https://soundcloud.com/nurseryrhymesabc/london-bridge-is-falling","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float gray(vec3 col) {\n    return (col.r + col.g + col.b) / 3.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = abs(fragCoord/iResolution.xy * 2. - 1.);\n    vec3 col2 = texture(iChannel2, uv).rgb;\n    vec3 col = texture(iChannel0, uv).rgb;\n    float grayScale = gray(col);\n    float dx = gray(texture(iChannel0, uv + vec2(1./iResolution.x, 0.)).rgb) - grayScale;\n    float dy = gray(texture(iChannel0, uv + vec2(0., 1./iResolution.y)).rgb) - grayScale;\n    vec3 normal = normalize(vec3(-dx, -dy, .2));\n    uv = fragCoord/iResolution.xy;\n    vec3 pixelPos = vec3(2. * uv - 1., 0.);\n    vec3 camPos = vec3(0., 0., 1.);\n    vec3 camDir = normalize(camPos - pixelPos);\n    float numLights = 20.;\n    vec3 lighting = vec3(0.1);\n    float tau = 6.28;\n    for (float i = 0.; i < numLights; i++) {\n        float fft = 0.1 + texture(iChannel1, vec2(i / numLights, 0.)).r * 1.5;\n        float t = i / numLights * tau;\n        vec3 lightPos = vec3(fft * vec2(cos(t + iTime * 0.2), sin(t + iTime * 0.1)), .2);\n        vec3 lightDir = lightPos - pixelPos;\n        float lightDist = length(lightDir);\n        lightDir /= lightDist;\n        float diffIntensity = 0.2 * fft;\n        float specIntensity = 0.6 * fft;\n        float diffuse = dot(normal, lightDir) * diffIntensity;\n        float specular = pow(dot(normal, normalize(lightDir + camDir)), 32.) * specIntensity;\n        vec3 lightColor = vec3(sin(t), cos(t), sin(2. * t)) * 0.5 + 0.5;\n        float lightRadius = 0.3 + fft;\n        lighting += lightColor * (diffuse + specular) * max(0., lightRadius - lightDist) / lightDist;\n    }\n    fragColor = vec4(lighting * col2, 1.);\n}","name":"Image","description":"","type":"image"}]}