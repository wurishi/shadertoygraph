{"ver":"0.1","info":{"id":"tdjyRm","date":"1586363944","viewed":562,"name":"Alien Lifeforms","username":"julianlumia","description":"I really need to learn writing more efficient code or buy a better GPU :p  Im getting 6 fps in the small screen;(","likes":15,"published":1,"flags":32,"usePreview":0,"tags":["light"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define T(uv) texture(iChannel0,uv)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy);\n\n    \n    float f = length(uv  - 0.5);\n    fragColor.x = T(uv + f*0.002).x;\n    fragColor.y = T(uv -f*0.002).y;\n    fragColor.z = T(uv-f*0.002).z;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n#define MAX_STEPS 64\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\nvec2 condmin(in vec2 d1, in vec2 d2) {\nreturn vec2(min(d1.x, d2.x), mix(d1.y, d2.y, step(d2.x, d1.x)));\n}\n\nfloat sdOctahedron( vec3 p, float s)\n{\n p = abs(p);\n return (p.x+p.y+p.z-s)*0.57735027;\n}\n\nmat2 Rot(float a) {\n float s = sin(a);\n float c = cos(a);\n return mat2(c, -s, s, c);\n}\n\n\n\nfloat displacement(vec3 p, float scale)\n{\n    return sin(scale*p.x)*sin(scale*p.y)*sin(scale*p.z);\n}\n\n\nfloat smin( float a, float b, float k ) {\n float h = clamp( 0.5+0.5*(b-a)/k, 0., 1. );\n return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat sdSphere(vec3 p, float s)\n{\n return length(p) - s;\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n p = abs(p)-s;\n return length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat g1;\nfloat g2;\nfloat g3;\nfloat g4;\nfloat g5;\n\nmat3 rotate( in vec3 v, in float angle)\n{\n\tfloat c = cos(radians(angle));\n\tfloat s = sin(radians(angle));\n\t\n\treturn mat3(c + (1.0 - c) * v.x * v.x, (1.0 - c) * v.x * v.y - s * v.z, (1.0 - c) * v.x * v.z + s * v.y,\n\t\t(1.0 - c) * v.x * v.y + s * v.z, c + (1.0 - c) * v.y * v.y, (1.0 - c) * v.y * v.z - s * v.x,\n\t\t(1.0 - c) * v.x * v.z - s * v.y, (1.0 - c) * v.y * v.z + s * v.x, c + (1.0 - c) * v.z * v.z\n\t\t);\n}\n\nconst float PI = 3.14159265;\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\n\nvec3 spherepos;\nvec2 GetDist(vec3 p) {\n vec2 d;\n d = vec2(p.y +2.75,3);\n vec3 size3 = vec3(3.3,3.5,3.5);\n vec3 pos = vec3(0,0.,.0);\n vec3 p4 = p;\n p4 -=vec3(-0.,2.,-0.5);\n float the = iTime *.5;\n the = iTime *.2;\n p4.zx *= -mat2(cos(the), -sin(the), sin(the), cos(the));\n vec2 box11 = vec2((sdOctahedron(p4, 1.2)),5.);\n vec3 p6 = p-vec3(-0,-2.,.5);\n p6.x = abs(p6.x)-3.;\n vec2 box12 = vec2((sdBox(p6, vec3(.1,.5,.1))),5.);\n vec3 p7 = p-vec3(sin(p.z*0.7)*0.2,-2.7,-.5);\n p7.z = mod(p7.z , 2.) - 1.;\n vec2 box13 = vec2((sdBox(p7, vec3(.5,.5,.5))),3.);   \n vec2 box10 = vec2((sdBox(p, vec3(4.5,.3,.4))),5.);\n box10 = condmin(box12,box10);\n float displacement = sin(1.5*p.x+ iTime*0.4)*sin(1.2*p.y+ iTime)*cos(.5*p.z+ iTime);\n box10.x += displacement;\n spherepos = vec3(-0.0,9.,-5);\n float box9 = (sdSphere(p-spherepos, .1));\n vec2 box;\n vec3 p2 = p;\n the = (iTime*0.2);\n float s =10.;\n float two = ((dot(sin(p2.zxy+iTime*0.6)*5., cos(p2.zxy*4.+iTime))));\n d.x = mix(d.x,two,sin(p.x*0.4+iTime)*0.01);\n p2.x= (abs(p2.x)-3.);\n p2.zy *= -mat2(cos(the), -sin(the), sin(the), cos(the));\n for(int i=0; i<4; i++)\n {\n  vec3 size = size3;\n  p2.zy *= -mat2(cos(the), -sin(the), sin(the), cos(the));\n  float o = (2.);\n  the = (sin(iTime*0.2));\n  p2.xy *= -mat2(cos(the), -sin(the), sin(the), cos(the));\n  p2 = rotate( normalize( vec3(1.,2., -3. )),120.)*p2;\n  box = vec2(sdBox(p2, vec3(.38*size)),3);\n  vec2 box2 = vec2(sdBox(p2, vec3(0.4,.4,1.)*size),1);\n  vec2 box3 = vec2(sdBox(p2, vec3(.4,1.,.4)*size),1);\n  vec2 box4 = vec2(sdBox(p2, vec3(1.,.4,.4)*size),1);\n  box.x = max( box.x,-box2.x);\n  box.x = max(box.x,-box3.x);\n  box.x = max(box.x,-box4.x);\n  if( box.x < d.x)\n   {\n    d = condmin(d,box);\n   }\n  }\n    \n d.x = mix(d.x,box10.x,-.045);\n two = ((dot(sin(p2.zxy*3.+0.), cos(p2.zxy*8.+iTime))));\n box10.x = mix(box10.x,two,.09);\n box10 = vec2(box10.x,5);\n d = condmin(d,box13); \n d = condmin(d,box11); \n box10.x = smin(d.x,box10.x,1.);\n g5 +=.4/(.15+pow(abs(box11.x),2.));\n g2 +=.04/(.05+pow(abs(box.x),6.));\n g4 +=0.1/(4.+pow(abs(box10.x),6.));\n g3 +=1./(10.+box9*box9);\n d = condmin(d,box10);\n return d;\n}\n\n\nvec2 RayMarch(vec3 ro, vec3 rd) {\nvec2 h, t=vec2( 0.);   \nfor (int i=0; i<MAX_STEPS; i++) \n{   \nh = GetDist(ro + t.x * rd);\nif(h.x<SURF_DIST||abs(t.x)>MAX_DIST) break;\nt.x+=h.x *1.;\nt.y=h.y;\n}\nif(t.x>MAX_DIST) \nt.x=100.;\nt.x +=h.x*1.;\nreturn t;\n}\nfloat marchCount;\n\n\nfloat traceRef(vec3 o, vec3 r){\n    \n float t = 0.0;\n marchCount = 0.0;\n float dO = 0.;  \n for (int i = 0; i < 60; i++)\n {\n  vec3 p = o + r * t;   \n  float d = GetDist (p).x;\n  if(d<.002 || (t)>100.) break;\n  t += d * .2;\n  marchCount+= 1./d*.5;\n }    \n return t;\n}\n\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n vec3 f = normalize(l-p),\n r = normalize(cross(vec3(0,1,0), f)),\n u = cross(f,r),\n c = p+f*z,\n i = c + uv.x*r + uv.y*u,\n d = normalize(i-p);\n return d;\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr ){\n vec3 cw = normalize(ta-ro);\n vec3 cp = vec3(sin(cr), cos(cr),0.0);\n vec3 cu = normalize( cross(cw,cp) );\n vec3 cv = cross(cu,cw);\n return mat3( cu, cv, cw );\n}\n\nvec3 GetNormal(vec3 p){\nvec2 e = vec2(.00035, -.00035); \nreturn normalize(\n e.xyy * GetDist(p + e.xyy).x + \n e.yyx * GetDist(p + e.yyx).x + \n e.yxy * GetDist(p + e.yxy).x + \n e.xxx * GetDist(p + e.xxx).x);\n}\n\nconst float PI2 = 3.14159265359;\n#define HASHSCALE1 .1031\nfloat hash(float p)\n{\n\tvec3 p3  = fract(vec3(p) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//AO code from: https://www.shadertoy.com/view/4sdGWN\n//by XT95\nvec3 randomSphereDir(vec2 rnd)\n{\n float s = rnd.x*PI*2.;\n float t = rnd.y*2.-1.;\n return vec3(sin(s), cos(s), t) / sqrt(1.0 + t * t);\n}\nvec3 randomHemisphereDir(vec3 dir, float i)\n{\n vec3 v = randomSphereDir( vec2(hash(i+1.), hash(i+2.)) );\n return v * sign(dot(v, dir));\n}\n\nfloat ambientOcclusion( in vec3 p, in vec3 n, in float maxDist, in float falloff )\n{\n const int nbIte = 32;\n const float nbIteInv = 1./float(nbIte);\n const float rad = 1.-1.*nbIteInv; \n float ao = 0.0;\n for( int i=0; i<nbIte; i++ )\n {\n  float l = hash(float(i))*maxDist;\n vec3 rd = normalize(n+randomHemisphereDir(n, l )*rad)*l;\n  ao += (l - max(GetDist( p + rd ),0.).x) / maxDist * falloff;\n }\t\n return clamp( 1.-ao*nbIteInv, 0., 1.);\n}\n//----------\n\nfloat shadow(vec3 r0, vec3 rd, float maxDist)\n{\n float d = .1;\n float shadow = 1.0;\n while(d < maxDist)\n {\n  float t = GetDist(r0 + d * rd).x;\n  if(t < 0.02) return 0.0;\n  d += t;\n  shadow = min(shadow,50.0 * (t / d));\n }\n return shadow;\n}\n\nfloat GetLight(vec3 p) {\n vec3 lightPos = vec3(spherepos);\n vec3 l = normalize(lightPos-p);\n vec3 n = GetNormal(p);\n float dif = clamp(dot(n, l)*.5+.5, 0., 1.);\n float d = RayMarch(p+n*SURF_DIST*1., l).x;\n return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\nvec2 uv =( 2. * fragCoord.xy - iResolution.xy ) / iResolution.y;\nvec2 m = iMouse.xy/iResolution.xy;\n\nvec3 eye = 1.0*vec3(0.,-.5,6.);\nvec3 col;\nvec2 d;\nvec3 hoek = vec3(0,-1.,0.);  \nfloat   the = (iTime*1.);\nmat3 camera = setCamera( eye, hoek,0.);\nfloat fov = 1.2;\nvec3 dir = camera * normalize(vec3(uv, fov));\nvec3 p;\nvec3 n;\nvec3 focalPoint = eye + (dir * 1.);\nvec3 shiftedRayOrigin = eye;\nvec3 shiftedRay = (focalPoint - shiftedRayOrigin);\n d = RayMarch(shiftedRayOrigin, shiftedRay);\nfloat t =d.x *1.;\nvec3  shiftedRayOrigin2 = shiftedRayOrigin;\nvec3  shiftedRay2= shiftedRay;\nif(t<MAX_DIST) {\n shiftedRayOrigin2 += shiftedRay2 * t;\n vec3 sn = GetNormal(shiftedRayOrigin2);\n shiftedRay2 = reflect(shiftedRay2, sn);\n if(d.y==3.) traceRef(shiftedRayOrigin2 +  shiftedRay2*.1, shiftedRay2);\n if(d.y==5.) traceRef(shiftedRayOrigin2 +  shiftedRay2*.1, shiftedRay2);\n if(d.y==7.) traceRef(shiftedRayOrigin2 +  shiftedRay2*.1, shiftedRay2);\n p = shiftedRayOrigin + shiftedRay * t;\n n= GetNormal(p.xyz);\n float a = ambientOcclusion(p,n, 20.,1.5);\n vec3 lp =    spherepos*.9;\n const int numIter = 40;\n vec3 vD = shiftedRay;\n vD = normalize(vD);\n float stepSize = length(p - shiftedRayOrigin) / float(numIter);\n vec3 vO = shiftedRayOrigin + stepSize * vD;\n float accum = 0.0;\n for(int i = 0; i  < numIter; ++i)\n  {\n\tvec3 ld = normalize(lp - vO);\n\tfloat shad = shadow(vO, ld, 2.5);\n\tfloat d = dot(vO, vO);\n\taccum += (.001 / d ) * shad;\n\tvO += stepSize * vD;\n   }\n  vec3   color= vec3(1., 1., 1.);\n col +=g5*vec3(0.02)*vec3(1.,.5,.0)*1.;    \n col +=g2*vec3(0.02)*vec3(.2,.5,.6)*.4;    \n col +=g4*vec3(0.1)*vec3(1.,.6,0.6)*.1;    \n col*= a*1.5; \n col *= marchCount * vec3(.4, .4,0.4) * 0.005;\n float dif = GetLight(p);\n col *= vec3(dif)+1.;\n vec3 sky = vec3(1., 1., 1.);\n col *= mix(sky, col, 10./(t*t/1./1.*1.+1.5));   \n col += g3 * color;   \n if(d.y==5.) col+= vec3(sin(p.z*1.+iTime)*cos(p.x*.3+iTime*0.2)*3.,0,1);\n col *= accum * color *16.;\n }\n col*=1.3;\n col=smoothstep(0.0,3.,col);\n col=pow(col, vec3(0.4545));\n fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}