{"ver":"0.1","info":{"id":"NdKSzd","date":"1635215159","viewed":183,"name":"Gaussian Filtered Square Wave","username":"oneshade","description":"Testing a gaussian filtered square wave.","likes":10,"published":3,"flags":8,"usePreview":0,"tags":["filter","approximation","waveform","gaussian","squarewave"],"hasliked":0,"parentid":"NdyXW1","parentname":"Gaussian Filtered Saw Wave"},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.desmos.com/calculator/xdlx1yoiyt\n\n// Modified version of font loader from https://www.shadertoy.com/view/ltcXzs\nvoid drawChar(inout vec3 color, in vec3 charColor, in vec2 p, in vec2 pos, in vec2 size, in int char) {\n    p = (p - pos) / size + 0.5;\n    if (all(lessThan(abs(p - 0.5), vec2(0.5)))) {\n        float val = textureGrad(iChannel0, p / 16.0 + fract(vec2(char, 15 - char / 16) / 16.0), dFdx(p / 16.0), dFdy(p / 16.0)).r;\n        color = mix(color, charColor, val);\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Default shader\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 color = 0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0.0, 2.0, 4.0));\n    fragColor = vec4(color, 1.0);\n\n    // Correct aspect ratio\n    uv.x *= iResolution.x / iResolution.y;\n    uv = (uv - 0.5) * 1.5 + 0.5; // Scale 1.5x\n\n    float unit = 3.0 / iResolution.y; // 2x pixel size\n\n    float w = 0.501 - 0.5 * cos(0.25 * iTime); // Filter width\n    float x = uv.x + iTime;\n\n    // Graph\n    float y = gsquare(x, w);\n    float dydx = (gsquare(x + 0.001, w) - y) / 0.001;\n    float dist = abs(uv.y - y) / sqrt(1.0 + dydx * dydx);\n    fragColor.rgb = mix(fragColor.rgb, vec3(0.0), smoothstep(unit, 0.0, dist));\n\n    // Undo scale\n    uv = (uv - 0.5) / 1.5 + 0.5;\n\n    // \"Sound In\" notification\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.3, 0.3), vec2(0.1), 83); // S\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.4, 0.3), vec2(0.1), 79); // O\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.5, 0.3), vec2(0.1), 85); // U\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.6, 0.3), vec2(0.1), 78); // N\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.7, 0.3), vec2(0.1), 68); // D\n\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.9, 0.3), vec2(0.1), 73); // I\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(1.0, 0.3), vec2(0.1), 78); // N\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 mainSound(int samp, float time) {\n    return vec2(makeNoise(time));\n}","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"// Error function approximation\nfloat erf(in float x) {\n    return sign(x) * sqrt(1.0 - exp2(-1.787776 * x * x));\n}\n\n// Gaussian filtered square wave\n// Works for filter widths between 0 and 1.5\n// Increase k to allow for larger filter widths\nconst float k = 5.0; // k → ∞\nfloat gsquare(in float x, in float w) {\n    x = mod(x, 2.0);\n    float y = 0.0;\n    float s = 1.0 - 2.0 * mod(k, 2.0);\n    for (float n=-k; n <= k; n++) {\n        y += s * erf((x - n) / w);\n        s = -s;\n    }\n\n    return (1.0 - y) / 2.0;\n}\n\nfloat makeNoise(in float time) {\n    return 0.25 * gsquare(time * 200.0, 0.501 - 0.5 * cos(0.25 * time));\n}","name":"Common","description":"","type":"common"}]}