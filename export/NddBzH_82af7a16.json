{"ver":"0.1","info":{"id":"NddBzH","date":"1668020128","viewed":54,"name":"Area element","username":"Sent","description":"Box in diff coords. Smoothstep will be distorted","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["polar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rect(vec2 st, vec2 bl, vec2 tr) {\n    bl = step(bl,st);       // bottom-left\n\ttr = step(vec2(1.)-tr,1.-st);   // top-right\n\treturn (bl.x * bl.y * tr.x * tr.y);\n}\n\nfloat rect(vec2 st, vec2 bl, vec2 tr, float blur) {\n    if (blur <= 0.) {\n        return rect(st, bl, tr);\n    }\n    \n    float b = blur/2.;\n    bl = smoothstep(bl-b, bl+b,st);       // bottom-left\n\ttr = smoothstep(tr+b, tr-b, st);   // top-right\n\treturn (bl.x * bl.y * tr.x * tr.y);\n}\n\nvec2 vec2ar(float ar, float x, float y) {return vec2(ar*x, y);}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 st = fragCoord/iResolution.xy;\n    float aspect = iResolution.x/iResolution.y;\n    st.x *= aspect;\n    \n    // polar\n    vec2 toCenter = vec2ar(aspect, 0.5, 0.5)-st;\n    float phi = atan(toCenter.y,toCenter.x)/3.14159265359/2.;\n    float r = length(toCenter);\n    vec2 rp = vec2(r, phi);\n\n    // box / area element\n    vec3 col = vec3(1.);\n    col *= rect(rp, vec2(.3, 0.), vec2(.6, .5), .01);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}