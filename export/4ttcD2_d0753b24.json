{"ver":"0.1","info":{"id":"4ttcD2","date":"1534168273","viewed":272,"name":"Thing_11","username":"balkhan","description":" ","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","lookat"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rr","filepath":"/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","previewfilepath":"/media/ap/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","type":"volume","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n* License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n* Created by bal-khan\n*/\n\nvec2    march(vec3 pos, vec3 dir);\nvoid    rotate(inout vec2 v, float angle);\nvec3    calcNormal( in vec3 pos, float e, vec3 dir);\nfloat   mylength(vec2 p);\nfloat   mylength(vec3 p);\nvec3\tcameraLookAt(vec3 target, vec3 camPos, vec3 up, vec2 uv, float camNear);\n\nfloat   t;          // time\nvec3    ret_col;    // torus color\nvec3    h;          // light amount\n\n#define I_MAX       200.\n#define E           0.0001\n#define FAR         100.\n#define PI          3.14159\n#define TAU         PI*2.\n\n/*\n* Leon's mod polar from : https://www.shadertoy.com/view/XsByWd\n*/\n\nvec2 modA (vec2 p, float count) {\n    float an = TAU/count;\n    float a = atan(p.y,p.x)+an*.5;\n    a = mod(a, an)-an*.5;\n    return vec2(cos(a),sin(a))*length(p);\n}\n\n/*\n* end mod polar\n*/\n\n// transition function\nfloat   trans(float start, float time, float speed)\n{\n    return 1. - clamp(exp(-time*speed*2.718+start*speed*2.718), .0, 1. );\n}\n\nvoid mainImage(out vec4 c_out, in vec2 f)\n{\n    t  = iTime*.125;\n    vec3    col = vec3(0., 0., 0.);\n    vec2\tR = iResolution.xy,\n            uv  = vec2(f-R/2.) / R.y;\n    vec3    dir;\n    vec3    pos = vec3(.0, .0, 60.0);\n    float\tphi = 160.;\n    pos = vec3(-0., 0., phi*.5+0.);\n    \n    vec3 OA,AB,BC; // triangle points\n    float ta = mod(iTime+0., 68.);\n    OA *= .0;\n    AB *= .0;\n    BC *= .0;\n    \n    OA = vec3(\n    .0,.0,\n        trans(.0, ta, .06125)*-phi\n    );\n    \n    // sqrt(3) == 1.732\n    AB = vec3(\n        (1.732*.5)*-phi\n        ,\n        .0\n        ,\n        phi*.5\n        )\n        *\n        trans(20.0, ta, .06125)\n        ;\n    \n    BC = vec3(\n        (1.732*.5)*phi\n        ,\n        .0\n        ,\n        phi*.5\n        )\n        *\n        trans(40.0, ta, .06125)\n        ;\n    \n    pos += OA+AB+BC;\n    pos += vec3(.0,20.0,.0)-trans(.0, iTime, .25)*vec3(.0,20.0,.0);\n    \n    vec3    target = pos + vec3(.0, .0, -2.);\n    \n    vec3 look;\n    look = OA+AB+BC;\n    \n    dir = cameraLookAt(target, pos, vec3(.0, 1., .0), uv, 1.);\n    rotate(dir.yz, 1.57-1.57*trans(.0, iTime, .05));\n\n    h*=0.;\n    rotate(dir.xy, sin(iTime*.5)*.25);\n    vec2    inter = (march(pos, dir));\n    ret_col = vec3(.90, .82, .70);\n    col.xyz = ret_col*(1.-inter.x*.005);\n    col += h*.005;\n    c_out =  vec4(col,1.0);\n}\n\nfloat   scene(vec3 p)\n{  \n    float   var;\n    float   mind = 1e5;\n    float   cage = 1e5;\n\n    p.x += 45.;\n    p.xz = modA(p.xz, 3.);\n    p.x -= 45.;\n    vec3 op = p;\n    float carve;\n    \n    float text3 = 1.*(texture(iChannel0, floor(p.xyz)*.0515306125-vec3(0.+1.0*iTime,.0,.0)*.025).x);\n    carve = 0.+text3*3.0;\n    \n    p = op;\n    carve = max(carve, -(length(p.xy)-4.) );\n\n    p = op;\n    p.yx = modA(p.yx, 5.);\n    p.y -= 1.;\n    \n    float ten0 = mylength(p.xy)-.2;\n    p.z = fract(p.z*.25)-.5;\n    p.z /= .25;\n\n    float cubes = max(max(abs(p.x)-1.20, abs(p.y-(2.+.5*sin(( (atan(op.x,op.y)*5.)/5.+iTime)+1.0*iTime+floor(op.z*.25)/.25 )) )-.1 ), abs(p.z)-1.5);\n\n    cubes = abs(cubes)+.0025;\n    ten0 = cubes;\n    h += vec3(.2, .51, .25)*1./max(.01, ten0*ten0*1000. + .25);\n    p = op;\n    rotate(p.xy, 1.9+.0*p.z*.205 );\n    p.yx = modA(p.yx, 5.);\n    p.y -= 3.;\n    p.x = max(abs(fract(p.z)-.5 ), max(abs(p.x), abs(p.y)))-.5125;\n    float ten1 = length(p.xy)-.02;\n    float ten2 = min(ten0, ten1);\n\n    p=op;\n    \n    float ten3 = .0;\n    vec3 pp = p;\n\n    pp.xyz = fract(pp.xyz*1.)-.5;\n    ten3 = max(ten3, (mylength(pp.xyz)+.0+carve*.5-.5+.0*.1250025*(1./max(carve*carve + .25, .05)) ) );\n    ten3 = abs(ten3)+.005;\n\n    h += vec3(.25, .15,.1)*1./max(.01, ten3*ten3*12. + .05005101);\n    ten3 = max(.05, ten3)+.0;\n    \n    mind = min(mind, ten2);\n    mind = min(mind, ten3);\n    \n    return (mind);\n}\n\nvec2    march(vec3 pos, vec3 dir)\n{\n    vec2    dist = vec2(0.0, 0.0);\n    vec3    p = vec3(0.0, 0.0, 0.0);\n    vec2    s = vec2(0.0, 0.0);\n    vec3    dirr;\n\n        for (float i = -1.; i < I_MAX; ++i)\n        {\n            dirr = dir;\n            p = pos + dirr * dist.y;\n            dist.x = scene(p);\n            dist.y += dist.x*.2; // makes artefacts disappear\n            if (log(dist.y*dist.y/dist.x/1e5)>0. || dist.x < E || dist.y > FAR)\n            {\n                break;\n            }\n            s.x++;\n    }\n    s.y = dist.y;\n    return (s);\n}\n\n// Utilities\n\nfloat   mylength(vec2 p)\n{\n    float   ret;\n\n    ret = max(abs(p.x), abs(p.y));\n    //ret = max( abs(p.x)+.5*abs(p.y), abs(p.y)+.5*abs(p.x) );\n    \n    return ret;\n}\n\nfloat   mylength(vec3 p)\n{\n    float   ret;\n\n    ret = max(max(abs(p.x), abs(p.y)), abs(p.z));\n    //ret = max( abs(p.x)+.5*abs(p.y), abs(p.y)+.5*abs(p.x) );\n    //ret = max(abs(p.z)+.5*abs(p.x), ret);\n    return ret;\n}\n\nvoid rotate(inout vec2 v, float angle)\n{\n    v = vec2(cos(angle)*v.x+sin(angle)*v.y,-sin(angle)*v.x+cos(angle)*v.y);\n}\n\nvec2    rot(vec2 p, vec2 ang)\n{\n    float   c = cos(ang.x);\n    float   s = sin(ang.y);\n    mat2    m = mat2(c, -s, s, c);\n    \n    return (p * m);\n}\n\nvec3    camera(vec2 uv)\n{\n    float       fov = 1.;\n    vec3        forw  = vec3(0.0, 0.0, -1.0);\n    vec3        right = vec3(1.0, 0.0, 0.0);\n    vec3        up    = vec3(0.0, 1.0, 0.0);\n\n    return (normalize((uv.x) * right + (uv.y) * up + fov * forw));\n}\n\nvec3 cameraLookAt(vec3 target, vec3 camPos, vec3 up, vec2 uv, float camNear)\n{\n    vec3 axisZ = normalize(target - camPos);\n    vec3 axisX = cross(axisZ, up);\n    vec3 axisY = cross(axisX, axisZ);\n    return normalize(axisX * uv.x + axisY * uv.y + camNear * axisZ); \n}\n\nvec3 calcNormal( in vec3 pos, float e, vec3 dir)\n{\n    vec3 eps = vec3(e,0.0,0.0);\n\n    return normalize(vec3(\n           march(pos+eps.xyy, dir).y - march(pos-eps.xyy, dir).y,\n           march(pos+eps.yxy, dir).y - march(pos-eps.yxy, dir).y,\n           march(pos+eps.yyx, dir).y - march(pos-eps.yyx, dir).y ));\n}","name":"Image","description":"","type":"image"}]}