{"ver":"0.1","info":{"id":"4XGSRc","date":"1720234149","viewed":58,"name":"2-step Separated Gaussian blur","username":"shanebenlolo","description":"blurred image generated using 2 1D Gaussian passes. Separability means that a 2D convolution can be reduced to two 1D convolutions (one among rows and one among columns)","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["convolution","gaussian","buffer"],"hasliked":0,"parentid":"3dsGzs","parentname":"simple buffer example"},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Image - Final Display\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    // Display the result from Buffer B\n    fragColor = texture(iChannel0, uv);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Buffer A - Horizontal Gaussian Blur\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float radius = abs(sin(iTime) * 10.0);\n    float sigma = 5.0;\n    float norm = 0.0;\n    vec4 gaussSum = vec4(0.0);\n    float pi = 3.14159265359;\n\n    // Horizontal blur\n    for(int x = -int(radius); x <= int(radius); x++) {\n        float weight = exp(-float(x * x) / (2.0 * sigma * sigma)) / (sqrt(2.0 * pi) * sigma);\n        vec2 offset = vec2(float(x) / iResolution.x, 0.0);\n        gaussSum += texture(iChannel0, uv + offset) * weight;\n        norm += weight;\n    }\n\n    fragColor = gaussSum / norm;\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Buffer B - Vertical Gaussian Blur\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    float radius = abs(sin(iTime) * 10.0);\n    float sigma = 5.0;\n    float norm = 0.0;\n    vec4 gaussSum = vec4(0.0);\n    float pi = 3.14159265359;\n\n    // Vertical blur\n    for(int y = -int(radius); y <= int(radius); y++) {\n        float weight = exp(-float(y * y) / (2.0 * sigma * sigma)) / (sqrt(2.0 * pi) * sigma);\n        vec2 offset = vec2(0.0, float(y) / iResolution.y);\n        gaussSum += texture(iChannel0, uv + offset) * weight;\n        norm += weight;\n    }\n\n    fragColor = gaussSum / norm;\n}\n","name":"Buffer B","description":"","type":"buffer"}]}