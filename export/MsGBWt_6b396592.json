{"ver":"0.1","info":{"id":"MsGBWt","date":"1530997344","viewed":95,"name":"Pixelation Test 2","username":"Firzen_","description":"Seeing what I can do with pixelation","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["pixelation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float activeSquare(vec2 squareIndex)\n{\n    if(cos(squareIndex.x)*sin(0.2f*squareIndex.x+0.1*squareIndex.y+1.*iTime)>0.5)\n        return 0.;\n    return mod(squareIndex.x+squareIndex.y + floor(2.*iTime),2.);\n}\n\nfloat pullDown(vec2 uv)\n{\n    vec2 spherePos = vec2(0.5,0.)+0.25*vec2(cos(iTime),sin(iTime));\n    float radius = 0.1f;\n    float distortion = max(0.,1.-pow(length(spherePos-uv),2.));\n    return distortion;\n}\n\nvec3 squareColor(vec2 square)\n{\n    return 0.5 + 0.5*cos(3.*floor(iTime)+square.xyx+vec3(0,2,4));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float scale = 20.;\n    // Normalized pixel coordinates (from 0 to 1)\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    uv.y += pullDown(uv);\n    \n    vec2 intUV = floor(scale*uv);\n\n    // Time varying pixel color\n    vec3 col = squareColor(intUV);\n\n    // Output to screen\n    fragColor = vec4(col,1.0)*activeSquare(intUV);\n}","name":"Image","description":"","type":"image"}]}