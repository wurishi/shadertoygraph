{"ver":"0.1","info":{"id":"XljfW1","date":"1515600154","viewed":119,"name":"ノイズのテスト","username":"tenonno","description":"test","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// シェーダでランダムな値を生成する\nfloat hash(vec2 p) {\n    p  = 50.0*fract( p*0.3183099 + vec2(0.71,0.113));\n    return -1.0+2.0*fract( p.x*p.y*(p.x+p.y) );\n}\n\n// ノイズを生成する\nfloat noise(in vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n\tvec2 u = f * f * (3.0 - 2.0 * f);\n    return mix(\n        mix(hash(i + vec2(0.0, 0.0)),\n            hash(i + vec2(1.0, 0.0)), u.x),\n        mix(hash(i + vec2(0.0, 1.0)),\n            hash(i + vec2(1.0, 1.0)), u.x), u.y\n    );\n}\n\nfloat _noise(in vec2 uv) {\n    float f = 0.0;\n\tuv *= 8.0;\n    mat2 m = mat2(1.6, 1.2, -1.2, 1.6);\n\tf = 0.5000*noise( uv );\n    uv = m * uv;\n\tf += 0.2500 * noise(uv);\n    uv = m * uv;\n\tf += 0.1250 * noise(uv);\n    uv = m * uv;\n\tf += 0.0625 * noise(uv);\n    uv = m * uv;\n\tf = 0.5 + 0.5 * f;\t\n    return f;\n}\n\n\n// -----------------------------------------------\n\n\n\n// fragColor: 出力する色\n// fragCoord: 画面の UV 座標\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    // 画面左上が 0, 0 で右下が 1, 1 の座標\n    vec2 p = fragCoord / iResolution.xy * vec2(iResolution.x / iResolution.y, 1.0);\n\n    // ノイズの色 ( R, G, B )\n    vec3 color = vec3(1, 0, 1);\n        \n    \n    // 座標に適当な時間を足す（時間にあわせてノイズの位置を変えるため）\n    p += vec2(iTime * 100.0);\n\t\n    \n    // ノイズを横に引き延ばす\n    p.x *= 0.03;\n    \n    // 座標からノイズを取得する\n    float f = _noise(p * 3.0);\n    \n    // f に 0.0 ～ 1.0 の範囲でノイズが入る\n    \n    // ノイズの暗い部分を切り捨てて鮮明にする\n    f -= 0.65;\n    // 適当に明るくする\n    f *= 13.0;\n    \n    // 色を 0.0 ～ 1.0 の範囲に直しておく\n    f = clamp(f, 0.0, 1.0);\n    \n    \n    // 動画の色を取得する\n    vec3 movie = texture(iChannel0, fragCoord / iResolution.xy).xyz;\n\n\t// 動画にノイズを重ねる\n\tfragColor.xyz = mix(movie.xyz, color, vec3(f));\n}","name":"Image","description":"","type":"image"}]}