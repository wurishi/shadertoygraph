{"ver":"0.1","info":{"id":"lsKBzt","date":"1530138499","viewed":373,"name":"Voronoi particles","username":"rory618","description":"Use mouse to pull particles around.","likes":12,"published":1,"flags":48,"usePreview":0,"tags":["2d","voronoi","greyscale","stochastic","routing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 o, in vec2 i )\n{\n\tvec2 uv = i/R.xy;\n    o = vec4(0);\n    \n    //for(int j = 0; j < 10; j++){//Rendering pass is just the last layer pass\n        \n        vec4 r = hash44(vec4(F,i,0));\n        r.zw = randn(r.zw);\n        float id;\n        \n\n                id = texture(iChannel1,(i)/R.xy).w;\n\n\n            \n        if(id >= 0.){\n            vec2 t = getParticle(id,R,iChannel0);\n        \tfloat d = dist(i-t*R.xy);\n            d = clamp(1.-d,0.,1.);\n \t\t    o = exp(-vec4(dist(i-t*R.xy)/30.));\n        }\n    //}\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define R iResolution\n#define F iFrame\n\nfloat particles = 1e3;\n\nfloat dist(vec2 r){\n    \n    vec2 d2 = vec2( max(abs(r.x)*0.866025-r.y*0.5,+r.y), \n\t\t\t\t        step(0.0,0.5*abs(r.x)-0.866025*r.y)*(1.0+step(0.0,r.x)) );\n    \n    return d2.x;\n}\n    \nvec4 hash44(vec4 p4)\n{\n\tp4 = fract(p4  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+19.19);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\n//Convert uniform random to normal\nvec2 randn(vec2 randuniform){\n    vec2 r = randuniform;\n    r.x = sqrt(-2.*log(r.x));\n    r.y *= 6.28318;\n    r = r.x*vec2(cos(r.y),sin(r.y));\n    return r;\n}\n\n//This function defines the location of each particle. In other shaders I have used\n//A buffer instead, which is good for storing particles that are acting more complex.\n//But this is fastest.\nvec2 getParticle(float id, vec3 R, sampler2D C){\n    vec4 r = hash44(vec4(1,3,7,13)*id);\n    return texture(C,r.xy).xy;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\nThe idea behind stochastic routing is to route information to all relevant \ndestinations by passing everything through a series of layers, taking a stochastic\npath, such that the information gets closer and closer to the destination over \neach layer. For graphics, the destination is one of the pixels rendered in image,\nand the information is the parameters of an obect to be drawn. In this example, a \npoint is stored as a vec2 and rendered as a gaussian.\n\nEach layer of computation, stored in channels x,y,z,w of this buffer, randomly\nsamples 10 points stored in the previous layer. Only the one closest to the fragCoord\nis saved, this satisfies that information gets closer to the destination over \neach layer. This is why normal distributions with shrinking sigma over the layers \nis used.\n\nAn id tag is passed through the channel output, which enables using one buffer to\nget a lot of passes in by pipelining through xyzw. Even more than 4 passes would be \npossible by using only 16 bits or so to store the tag to get twice the passes.\n\nNear the latter layers, the id tags become closer in fragCoord space to the pixels \nthat the associeted particles will be affected, so the final rendering pass only needs\nto scan a few nearby locations in order to find every relevant particle.\n\n\n*/\nvoid mainImage( out vec4 o, in vec2 i )\n{\n    o = texture(iChannel1,i/R.xy);\n    \n    \n    //Set the current best distance to infinity ish\n    float d=1e9;\n    for(int j = 0; j < 10; j++){\n        vec4 r = hash44(vec4(j,F,i));\n        float id = floor(r.x * particles)+.5;\n        vec2 t = getParticle(id,R,iChannel0);//Uniformly sample one of the particles\n\n        float dp = dist(i-t*R.xy);\n        //compute the length to see if it is closer than the current champion\n        if(abs(dp)<abs(d)){\n            d = dp;\n            o.x = id;//Output the nearest points ID\n        }\n    }\n    //Repeat for each getParticle->x->y->z->w\n    d=1e9;\n    for(int j = 0; j < 10; j++){\n        vec4 r = hash44(vec4(j,F,i));\n        //Sample using a shrinking normal distribution\n        float id = texture(iChannel1,(i+randn(r.zw)*27.)/R.xy)[j==0?1:0];\n        vec2 t = getParticle(id,R,iChannel0);\n\n        float dp = dist(i-t*R.xy);\n        \n        if(abs(dp)<abs(d)){\n            d = dp;\n            o.y = id;\n        }\n    }\n    \n    d=1e9;\n    for(int j = 0; j < 10; j++){\n        vec4 r = hash44(vec4(j,F,i));\n        float id = texture(iChannel1,(i+randn(r.zw)*9.)/R.xy)[j==0?2:1];\n        vec2 t = getParticle(id,R,iChannel0);\n\n        float dp = dist(i-t*R.xy);\n        \n        if(abs(dp)<abs(d)){\n            d = dp;\n            o.z = id;\n        }\n    }\n    d=1e9;\n    \n    for(int j = 0; j < 10; j++){\n        vec4 r = hash44(vec4(j,F,i));\n        float id = texture(iChannel1,(i+randn(r.zw)*3.)/R.xy)[j==0?3:2];\n        vec2 t = getParticle(id,R,iChannel0);\n\n        float dp = dist(i-t*R.xy);\n        \n        if(abs(dp)<abs(d)){\n            d = dp;\n            o.w = id;\n        }\n    }\n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\n\nvoid mainImage( out vec4 o, in vec2 i )\n{\n    vec2 uv = i/R.xy;\n    vec4 r = hash44(vec4(floor(i),F,0));\n    o = texture(iChannel0,uv);\n    if(iFrame<3){\n        o.xy = r.xy;\n    }\n    o.zw /= 1.001;\n    //o.xy = fract(o).xy;\n    o.xy += o.zw/R.xy;\n    //o.zw += .01*vec2(sin(o.y*10.),cos(o.x*10.))/1e3;\n    if(iMouse.z > 0.){\n        vec2 d = (iMouse.xy-o.xy*R.xy);\n        o.zw += d/(pow(length(d),2.));\n        o.zw *= 1.-exp(-.4*length(d));\n    }\n}","name":"Buffer B","description":"","type":"buffer"}]}