{"ver":"0.1","info":{"id":"fldGRr","date":"1635615437","viewed":94,"name":"MFSDF test","username":"RodzLabs","description":"Testing new Material Maker library by Paulo Falcao.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* Generated by Material Maker */\n\n#define SEED_VARIATION 0.0\n\n//---\n\nfloat rand(vec2 x) {\n    return fract(cos(mod(dot(x, vec2(13.9898, 8.141)), 3.14)) * 43758.5453);\n}\n\nvec2 rand2(vec2 x) {\n    return fract(cos(mod(vec2(dot(x, vec2(13.9898, 8.141)),\n\t\t\t\t\t\t      dot(x, vec2(3.4562, 17.398))), vec2(3.14))) * 43758.5453);\n}\n\nvec3 rand3(vec2 x) {\n    return fract(cos(mod(vec3(dot(x, vec2(13.9898, 8.141)),\n\t\t\t\t\t\t\t  dot(x, vec2(3.4562, 17.398)),\n                              dot(x, vec2(13.254, 5.867))), vec3(3.14))) * 43758.5453);\n}\n\nvec3 rgb2hsv(vec3 c) {\n\tvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n\tvec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\n\tvec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\n\n\tfloat d = q.x - min(q.w, q.y);\n\tfloat e = 1.0e-10;\n\treturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c) {\n\tvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n\tvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n\treturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat param_rnd(float minimum, float maximum, float seed) {\n\treturn minimum+(maximum-minimum)*rand(vec2(seed));\n}\nfloat rand31(vec3 p) {\n\treturn fract(sin(dot(p,vec3(127.1,311.7, 74.7)))*43758.5453123);\n}\nvec3 rand33(vec3 p){\n\tp = vec3( dot(p,vec3(127.1,311.7, 74.7)),\n\t\t\t  dot(p,vec3(269.5,183.3,246.1)),\n\t\t\t  dot(p,vec3(113.5,271.9,124.6)));\n\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat tex3d_fbm_value(vec3 coord, vec3 size, float seed) {\n\tvec3 o = floor(coord)+rand3(vec2(seed, 1.0-seed))+size;\n\tvec3 f = fract(coord);\n\tfloat p000 = rand31(mod(o, size));\n\tfloat p001 = rand31(mod(o + vec3(0.0, 0.0, 1.0), size));\n\tfloat p010 = rand31(mod(o + vec3(0.0, 1.0, 0.0), size));\n\tfloat p011 = rand31(mod(o + vec3(0.0, 1.0, 1.0), size));\n\tfloat p100 = rand31(mod(o + vec3(1.0, 0.0, 0.0), size));\n\tfloat p101 = rand31(mod(o + vec3(1.0, 0.0, 1.0), size));\n\tfloat p110 = rand31(mod(o + vec3(1.0, 1.0, 0.0), size));\n\tfloat p111 = rand31(mod(o + vec3(1.0, 1.0, 1.0), size));\n\tvec3 t = f * f * (3.0 - 2.0 * f);\n\treturn mix(mix(mix(p000, p100, t.x), mix(p010, p110, t.x), t.y), mix(mix(p001, p101, t.x), mix(p011, p111, t.x), t.y), t.z);\n}\n\nfloat tex3d_fbm_value_nowrap(vec3 coord, vec3 size, float seed) {\n\tvec3 o = floor(coord)+rand3(vec2(seed, 1.0-seed))+size;\n\tvec3 f = fract(coord);\n\tfloat p000 = rand31(o);\n\tfloat p001 = rand31(o + vec3(0.0, 0.0, 1.0));\n\tfloat p010 = rand31(o + vec3(0.0, 1.0, 0.0));\n\tfloat p011 = rand31(o + vec3(0.0, 1.0, 1.0));\n\tfloat p100 = rand31(o + vec3(1.0, 0.0, 0.0));\n\tfloat p101 = rand31(o + vec3(1.0, 0.0, 1.0));\n\tfloat p110 = rand31(o + vec3(1.0, 1.0, 0.0));\n\tfloat p111 = rand31(o + vec3(1.0, 1.0, 1.0));\n\tvec3 t = f * f * (3.0 - 2.0 * f);\n\treturn mix(mix(mix(p000, p100, t.x), mix(p010, p110, t.x), t.y), mix(mix(p001, p101, t.x), mix(p011, p111, t.x), t.y), t.z);\n}\n\nfloat tex3d_fbm_perlin(vec3 coord, vec3 size, float seed) {\n\tvec3 o = floor(coord)+rand3(vec2(seed, 1.0-seed))+size;\n\tvec3 f = fract(coord);\n\tvec3 v000 = normalize(rand33(mod(o, size))-vec3(0.5));\n\tvec3 v001 = normalize(rand33(mod(o + vec3(0.0, 0.0, 1.0), size))-vec3(0.5));\n\tvec3 v010 = normalize(rand33(mod(o + vec3(0.0, 1.0, 0.0), size))-vec3(0.5));\n\tvec3 v011 = normalize(rand33(mod(o + vec3(0.0, 1.0, 1.0), size))-vec3(0.5));\n\tvec3 v100 = normalize(rand33(mod(o + vec3(1.0, 0.0, 0.0), size))-vec3(0.5));\n\tvec3 v101 = normalize(rand33(mod(o + vec3(1.0, 0.0, 1.0), size))-vec3(0.5));\n\tvec3 v110 = normalize(rand33(mod(o + vec3(1.0, 1.0, 0.0), size))-vec3(0.5));\n\tvec3 v111 = normalize(rand33(mod(o + vec3(1.0, 1.0, 1.0), size))-vec3(0.5));\n\tfloat p000 = dot(v000, f);\n\tfloat p001 = dot(v001, f - vec3(0.0, 0.0, 1.0));\n\tfloat p010 = dot(v010, f - vec3(0.0, 1.0, 0.0));\n\tfloat p011 = dot(v011, f - vec3(0.0, 1.0, 1.0));\n\tfloat p100 = dot(v100, f - vec3(1.0, 0.0, 0.0));\n\tfloat p101 = dot(v101, f - vec3(1.0, 0.0, 1.0));\n\tfloat p110 = dot(v110, f - vec3(1.0, 1.0, 0.0));\n\tfloat p111 = dot(v111, f - vec3(1.0, 1.0, 1.0));\n\tvec3 t = f * f * (3.0 - 2.0 * f);\n\treturn 0.5 + mix(mix(mix(p000, p100, t.x), mix(p010, p110, t.x), t.y), mix(mix(p001, p101, t.x), mix(p011, p111, t.x), t.y), t.z);\n}\n\nfloat tex3d_fbm_perlin_nowrap(vec3 coord, vec3 size, float seed) {\n\tvec3 o = floor(coord)+rand3(vec2(seed, 1.0-seed))+size;\n\tvec3 f = fract(coord);\n\tvec3 v000 = normalize(rand33(o)-vec3(0.5));\n\tvec3 v001 = normalize(rand33(o + vec3(0.0, 0.0, 1.0))-vec3(0.5));\n\tvec3 v010 = normalize(rand33(o + vec3(0.0, 1.0, 0.0))-vec3(0.5));\n\tvec3 v011 = normalize(rand33(o + vec3(0.0, 1.0, 1.0))-vec3(0.5));\n\tvec3 v100 = normalize(rand33(o + vec3(1.0, 0.0, 0.0))-vec3(0.5));\n\tvec3 v101 = normalize(rand33(o + vec3(1.0, 0.0, 1.0))-vec3(0.5));\n\tvec3 v110 = normalize(rand33(o + vec3(1.0, 1.0, 0.0))-vec3(0.5));\n\tvec3 v111 = normalize(rand33(o + vec3(1.0, 1.0, 1.0))-vec3(0.5));\n\tfloat p000 = dot(v000, f);\n\tfloat p001 = dot(v001, f - vec3(0.0, 0.0, 1.0));\n\tfloat p010 = dot(v010, f - vec3(0.0, 1.0, 0.0));\n\tfloat p011 = dot(v011, f - vec3(0.0, 1.0, 1.0));\n\tfloat p100 = dot(v100, f - vec3(1.0, 0.0, 0.0));\n\tfloat p101 = dot(v101, f - vec3(1.0, 0.0, 1.0));\n\tfloat p110 = dot(v110, f - vec3(1.0, 1.0, 0.0));\n\tfloat p111 = dot(v111, f - vec3(1.0, 1.0, 1.0));\n\tvec3 t = f * f * (3.0 - 2.0 * f);\n\treturn 0.5 + mix(mix(mix(p000, p100, t.x), mix(p010, p110, t.x), t.y), mix(mix(p001, p101, t.x), mix(p011, p111, t.x), t.y), t.z);\n}\n\nfloat tex3d_fbm_cellular(vec3 coord, vec3 size, float seed) {\n\tvec3 o = floor(coord)+rand3(vec2(seed, 1.0-seed))+size;\n\tvec3 f = fract(coord);\n\tfloat min_dist = 3.0;\n\tfor (float x = -1.0; x <= 1.0; x++) {\n\t\tfor (float y = -1.0; y <= 1.0; y++) {\n\t\t\tfor (float z = -1.0; z <= 1.0; z++) {\n\t\t\t\tvec3 node = 0.4*rand33(mod(o + vec3(x, y, z), size)) + vec3(x, y, z);\n\t\t\t\tfloat dist = sqrt((f - node).x * (f - node).x + (f - node).y * (f - node).y + (f - node).z * (f - node).z);\n\t\t\t\tmin_dist = min(min_dist, dist);\n\t\t\t}\n\t\t}\n\t}\n\treturn min_dist;\n}\n\nfloat tex3d_fbm_cellular_nowrap(vec3 coord, vec3 size, float seed) {\n\tvec3 o = floor(coord)+rand3(vec2(seed, 1.0-seed))+size;\n\tvec3 f = fract(coord);\n\tfloat min_dist = 3.0;\n\tfor (float x = -1.0; x <= 1.0; x++) {\n\t\tfor (float y = -1.0; y <= 1.0; y++) {\n\t\t\tfor (float z = -1.0; z <= 1.0; z++) {\n\t\t\t\tvec3 node = 0.4*rand33(o + vec3(x, y, z)) + vec3(x, y, z);\n\t\t\t\tfloat dist = sqrt((f - node).x * (f - node).x + (f - node).y * (f - node).y + (f - node).z * (f - node).z);\n\t\t\t\tmin_dist = min(min_dist, dist);\n\t\t\t}\n\t\t}\n\t}\n\treturn min_dist;\n}\nvec3 v4v4_rotate(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\nfloat wave3d_constant(float x) {\n\treturn 1.0;\n}\n\nfloat wave3d_sine(float x) {\n\treturn 0.5-0.5*cos(3.14159265359*2.0*x);\n}\n\nfloat wave3d_triangle(float x) {\n\tx = fract(x);\n\treturn min(2.0*x, 2.0-2.0*x);\n}\n\nfloat wave3d_sawtooth(float x) {\n\treturn fract(x);\n}\n\nfloat wave3d_square(float x) {\n\treturn (fract(x) < 0.5) ? 0.0 : 1.0;\n}\n\nfloat wave3d_bounce(float x) {\n\tx = 2.0*(fract(x)-0.5);\n\treturn sqrt(1.0-x*x);\n}\n\nfloat mix3d_mul(float x, float y, float z) {\n\treturn x*y*z;\n}\n\nfloat mix3d_add(float x, float y, float z) {\n\treturn min(x+y+z, 1.0);\n}\n\nfloat mix3d_max(float x, float y, float z) {\n\treturn max(max(x, y), z);\n}\n\nfloat mix3d_min(float x, float y, float z) {\n\treturn min(min(x, y), z);\n}\n\nfloat mix3d_xor(float x, float y, float z) {\n\tfloat xy = min(x+y, 2.0-x-y);\n\treturn min(xy+z, 2.0-xy-z);\n}\n\nfloat mix3d_pow(float x, float y, float z) {\n\treturn pow(pow(x, y), z);\n}vec4 mfsdf3d_smooth_complex_union(vec4 a, vec4 b, float k, float shift,float colorContrast,float colorSmooth) {\n\t\n    k=clamp(k,0.01,1.0);\n    float h = max( k-abs(a.w-b.w), 0.0 )/k;\n\th=h*h*k*0.25;\n\t\n\tfloat invs=(1.0/colorContrast)/k; \n\tcolorSmooth=1.0/colorSmooth;\n\tvec3 c=mix(a.xyz,b.xyz,clamp((a.w*colorSmooth+shift+0.5-colorSmooth*0.5)*invs,0.0,1.0));\n\t\n\treturn vec4(c,min( a.w, b.w ) - h);\n}\n\nvec4 mfsdf3d_smooth_complex_subtraction(vec4 a, vec4 b, float k, float shift,float colorSmooth,float colorContrast) {\n\n    k=clamp(k,0.01,1.0);\n    float h = max( k-abs(-a.w-b.w), 0.0 )/k;\n\th=h*h*k*0.25;\n\t\n\tfloat invs=(1.0/colorContrast)/k; \n\tcolorSmooth=1.0/colorSmooth;\n\tvec3 c=mix(a.xyz,b.xyz,clamp((a.w*colorSmooth+shift+0.5-colorSmooth*0.5)*invs,0.0,1.0));\n\t\n\treturn vec4(c,max( -a.w, b.w ) + h);\n}\n\nvec4 mfsdf3d_smooth_complex_intersection(vec4 a, vec4 b, float k, float shift,float colorSmooth,float colorContrast) {\n\n    k=clamp(k,0.01,1.0);\n    float h = max( k-abs(a.w-b.w), 0.0 )/k;\n\th=h*h*k*0.25;\n\n\tfloat invs=(1.0/colorContrast)/k; \n\tcolorSmooth=1.0/colorSmooth;\n\tvec3 c=mix(a.xyz,b.xyz,clamp((a.w*colorSmooth+shift+0.5-colorSmooth*0.5)*invs+1.0,0.0,1.0));\n\t\n\treturn vec4(c,max( a.w, b.w ) + h);\n    //return vec4(mix(a.xyz,b.xyz,clamp(a.w*invs/k+1.0-shift*invs/k,0.0,1.0)),max( a.w, b.w ) + h);\n}const float PI=3.14159265359;\n\nvec2 equirectangularMap(vec3 dir) {\n\tvec2 longlat = vec2(atan(dir.y,dir.x),acos(dir.z));\n \treturn longlat/vec2(2.0*PI,PI);\n}\n\n\n//Simple HDRI START\n\n//Hash without Sine Dave_Hoskins\n//https://www.shadertoy.com/view/4djSRW \nfloat Simple360HDR_hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat Simple360HDR_noise(vec2 v){\n  vec2 v1=floor(v);\n  vec2 v2=smoothstep(0.0,1.0,fract(v));\n  float n00=Simple360HDR_hash12(v1);\n  float n01=Simple360HDR_hash12(v1+vec2(0,1));\n  float n10=Simple360HDR_hash12(v1+vec2(1,0));\n  float n11=Simple360HDR_hash12(v1+vec2(1,1));\n  return mix(mix(n00,n01,v2.y),mix(n10,n11,v2.y),v2.x);\n}\n\nfloat Simple360HDR_noiseOct(vec2 p){\n  return\n    Simple360HDR_noise(p)*0.5+\n    Simple360HDR_noise(p*2.0+13.0)*0.25+\n    Simple360HDR_noise(p*4.0+23.0)*0.15+\n    Simple360HDR_noise(p*8.0+33.0)*0.10+\n    Simple360HDR_noise(p*16.0+43.0)*0.05;\n}\n\nvec3 Simple360HDR_skyColor(vec3 p){\n\tvec3 s1=vec3(0.2,0.5,1.0);\n\tvec3 s2=vec3(0.1,0.2,0.4)*1.5;\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)-0.5)*vec3(1.0);\n\tfloat d=length(p);\n    return mix(s2+v,s1+v*(12.0/max(d,20.0)),clamp(d*0.1,0.0,1.0));\n}\n\nvec3 Simple360HDR_floorColor(vec3 p){\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)*0.5+0.25)*vec3(0.7,0.5,0.4);\n    return v;\n}\n\nvec3 Simple360HDR_renderHDR360(vec3 rd, vec3 sun){\n    vec3 col;\n\tvec3 p;\n\tvec3 c;\n\tif (rd.y>0.0) {\n        p=rd*(5.0/rd.y);\n        c=Simple360HDR_skyColor(p);\n    } else {\n        p=rd*(-10.0/rd.y);\n        c=Simple360HDR_floorColor(p);\n\t\tc=mix(c,vec3(0.5,0.7,1.0),clamp(1.0-sqrt(-rd.y)*3.0,0.0,1.0));\n\t}\n\tvec3 skycolor=vec3(0.1,0.45,0.68);\n\tfloat d=length(p);\n\t\n\tfloat ds=clamp(dot(sun,rd),0.0,1.0);\n\tvec3 sunc=(ds>0.9997?vec3(2.0):vec3(0.0))+pow(ds,512.0)*4.0+pow(ds,128.0)*vec3(0.5)+pow(ds,4.0)*vec3(0.5);\n    if (rd.y>0.0){\n\t\tc+=vec3(0.3)*pow(1.0-abs(rd.y),3.0)*0.7;\n\t} \n    return c+sunc;\n}\n\nvec3 Simple360HDR_make360hdri(vec2 p, vec3 sun){\n    float xPI=3.14159265359;\n    vec2 thetaphi = ((p * 2.0) - vec2(1.0)) * vec2(xPI,xPI/2.0); \n    vec3 rayDirection = vec3(cos(thetaphi.y) * cos(thetaphi.x), sin(thetaphi.y), cos(thetaphi.y) * sin(thetaphi.x));\n    return Simple360HDR_renderHDR360(rayDirection,sun);\n}\n//Simple HDRI END\n\nconst float p_o22148_CamX = 2.500000000;\nconst float p_o22148_CamY = 0.410000000;\nconst float p_o22148_CamZ = 8.080000000;\nconst float p_o22148_LookAtX = -0.993000000;\nconst float p_o22148_LookAtY = 0.515000000;\nconst float p_o22148_LookAtZ = -2.500000000;\nconst float p_o22148_CamD = 1.500000000;\nconst float p_o22148_CamZoom = 1.000000000;\nconst float p_o22148_SunX = 2.500000000;\nconst float p_o22148_SunY = 2.500000000;\nconst float p_o22148_SunZ = 2.500000000;\nconst float p_o22148_AmbLight = 0.000000000;\nconst float p_o22148_AmbOcclusion = 1.000000000;\nconst float p_o22148_Shadow = 0.457000000;\nconst float p_o22148_Gamma = 1.300000000;\nconst float p_o252591_k = 0.378000000;\nconst float p_o252591_shift = 0.000000000;\nconst float p_o252591_colorSmooth = 1.000000000;\nconst float p_o252591_colorContrast = 0.000000000;\nconst float p_o30069_BaseColor_r = 1.000000000;\nconst float p_o30069_BaseColor_g = 1.000000000;\nconst float p_o30069_BaseColor_b = 1.000000000;\nconst float p_o30069_BaseColor_a = 1.000000000;\nconst float p_o30069_Metallic = 1.000000000;\nconst float p_o30069_Specular = 0.500000000;\nconst float p_o30069_Roughness = 0.000000000;\nconst float p_o30069_Emission = 96.799000000;\nconst float p_o30069_Normal = 0.000000000;\nconst float p_o30069_Alpha = 0.000000000;\nconst float p_o30069_AmbientOcclusion = 1.000000000;\nconst float p_o30069_scale = 1.000000000;\nconst float p_o220169_g_0_pos = 0.000000000;\nconst float p_o220169_g_0_r = 0.000000000;\nconst float p_o220169_g_0_g = 0.578125000;\nconst float p_o220169_g_0_b = 0.429077148;\nconst float p_o220169_g_0_a = 1.000000000;\nconst float p_o220169_g_1_pos = 1.000000000;\nconst float p_o220169_g_1_r = 0.000000000;\nconst float p_o220169_g_1_g = 0.078125000;\nconst float p_o220169_g_1_b = 0.039672852;\nconst float p_o220169_g_1_a = 1.000000000;\nvec4 o220169_g_gradient_fct(float x) {\n  if (x < p_o220169_g_0_pos) {\n    return vec4(p_o220169_g_0_r,p_o220169_g_0_g,p_o220169_g_0_b,p_o220169_g_0_a);\n  } else if (x < p_o220169_g_1_pos) {\n    return mix(vec4(p_o220169_g_0_r,p_o220169_g_0_g,p_o220169_g_0_b,p_o220169_g_0_a), vec4(p_o220169_g_1_r,p_o220169_g_1_g,p_o220169_g_1_b,p_o220169_g_1_a), ((x-p_o220169_g_0_pos)/(p_o220169_g_1_pos-p_o220169_g_0_pos)));\n  }\n  return vec4(p_o220169_g_1_r,p_o220169_g_1_g,p_o220169_g_1_b,p_o220169_g_1_a);\n}\nconst float seed_o218870 = 0.000000000;\nconst float p_o218870_scale_x = 8.000000000;\nconst float p_o218870_scale_y = 8.000000000;\nconst float p_o218870_scale_z = 8.000000000;\nconst float p_o218870_iterations = 1.000000000;\nconst float p_o218870_persistence = 0.500000000;\nfloat o218870_fbm(vec3 coord, vec3 size, int octaves, float persistence, float seed, float _seed_variation_) {\n\tfloat normalize_factor = 0.0;\n\tfloat value = 0.0;\n\tfloat scale = 1.0;\n\tfor (int i = 0; i < octaves; i++) {\n\t\tvalue += tex3d_fbm_cellular_nowrap(coord*size, size, seed) * scale;\n\t\tnormalize_factor += scale;\n\t\tsize *= 2.0;\n\t\tscale *= persistence;\n\t}\n\treturn value / normalize_factor;\n}\nvec3 o30069_input_BaseColor_tex3d(vec4 p, float _seed_variation_) {\nfloat o218870_0_1_tex3d_gs = o218870_fbm((p).xyz, vec3(p_o218870_scale_x, p_o218870_scale_y, p_o218870_scale_z), int(p_o218870_iterations), p_o218870_persistence, float((seed_o218870+_seed_variation_)), _seed_variation_);\nvec3 o220169_0_1_tex3d = o220169_g_gradient_fct(dot(vec3(o218870_0_1_tex3d_gs), vec3(1.0))/3.0).rgb;\n\nreturn o220169_0_1_tex3d;\n}\nfloat o30069_input_Metallic_tex3d(vec4 p, float _seed_variation_) {\n\nreturn 1.0;\n}\nfloat o30069_input_Specular_tex3d(vec4 p, float _seed_variation_) {\n\nreturn 1.0;\n}\nfloat o30069_input_Roughness_tex3d(vec4 p, float _seed_variation_) {\n\nreturn 1.0;\n}\nvec3 o30069_input_Emission_tex3d(vec4 p, float _seed_variation_) {\n\nreturn vec3(1.0,1.0,1.0);\n}\nvec3 o30069_input_Normal_tex3d(vec4 p, float _seed_variation_) {\n\nreturn vec3(0.0,1.0,0.0);\n}\nfloat o30069_input_Alpha_tex3d(vec4 p, float _seed_variation_) {\n\nreturn 1.0;\n}\nfloat o30069_input_AmbientOcclusion_tex3d(vec4 p, float _seed_variation_) {\n\nreturn 1.0;\n}\nconst float p_o36040_l = 0.320000000;\nfloat o112765_input_obj3d(vec3 p, float _seed_variation_) {\nvec3 o36040_0_p = (p);\no36040_0_p.x -= clamp(o36040_0_p.x, -p_o36040_l, p_o36040_l);\nfloat o36040_0_1_sdf3d = length(o36040_0_p)-(0.2+0.1*sin(iTime))*1.0;\n\nreturn o36040_0_1_sdf3d;\n}\nconst float p_o152951_x = 0.382000000;\nconst float p_o152951_y = 0.673000000;\nconst float p_o152951_z = 0.000000000;\nconst float p_o145115_ax = 59.000000000;\nconst float p_o145115_az = 18.000000000;\nvec4 o112765_input_trans3d(vec4 p, float _seed_variation_) {\nvec4 o129370_0_1_v4v4 = (vec4(vec3(abs((vec4(v4v4_rotate((vec4((p).xyz-vec3(p_o152951_x, p_o152951_y, p_o152951_z),(p).w)).xyz, -vec3(p_o145115_ax, (iTime*10.0), p_o145115_az)*0.01745329251), (vec4((p).xyz-vec3(p_o152951_x, p_o152951_y, p_o152951_z),(p).w)).w)).xy),(vec4(v4v4_rotate((vec4((p).xyz-vec3(p_o152951_x, p_o152951_y, p_o152951_z),(p).w)).xyz, -vec3(p_o145115_ax, (iTime*10.0), p_o145115_az)*0.01745329251), (vec4((p).xyz-vec3(p_o152951_x, p_o152951_y, p_o152951_z),(p).w)).w)).z),(vec4(v4v4_rotate((vec4((p).xyz-vec3(p_o152951_x, p_o152951_y, p_o152951_z),(p).w)).xyz, -vec3(p_o145115_ax, (iTime*10.0), p_o145115_az)*0.01745329251), (vec4((p).xyz-vec3(p_o152951_x, p_o152951_y, p_o152951_z),(p).w)).w)).w));\nvec4 o124762_0_1_v4v4 = o129370_0_1_v4v4;\nvec4 o145115_0_1_v4v4 = o124762_0_1_v4v4;\nvec4 o152951_0_1_v4v4 = o145115_0_1_v4v4;\n\nreturn o152951_0_1_v4v4;\n}\nfloat o112765_input_custombool(vec2 uv, float _seed_variation_) {\n\nreturn min((uv).x,(uv).y);\n}\nfloat for_fold_o112765(vec4 p, float _seed_variation_) {\n  for(int i=0;i<6;i++){\n    p=o112765_input_trans3d(p, _seed_variation_);\n  }\n  return o112765_input_obj3d(p.xyz, _seed_variation_)/p.w;\n}\n\nfloat for_min_o112765(vec4 p, float _seed_variation_) {\n  float d=o112765_input_obj3d(p.xyz, _seed_variation_);\n  float m=min(999999.0,d);\n  for(int i=0;i<6;i++){\n    p=o112765_input_trans3d(p, _seed_variation_);\n\td=o112765_input_obj3d(p.xyz, _seed_variation_);\n\tm=min(m,d/p.w);\n  }\n  return m;\n}\n\nfloat for_custom_o112765(vec4 p, float _seed_variation_) {\n  float d=o112765_input_obj3d(p.xyz, _seed_variation_);\n  float m=o112765_input_custombool(vec2(999999.0,d), _seed_variation_);\n  for(int i=0;i<6;i++){\n    p=o112765_input_trans3d(p, _seed_variation_);\n\td=o112765_input_obj3d(p.xyz, _seed_variation_);\n\tm=o112765_input_custombool(vec2(m,d/p.w), _seed_variation_);\n  }\n  return m;\n}float o30069_input_sdf3d(vec3 p, float _seed_variation_) {\nfloat o112765_0_1_sdf3d = for_min_o112765(vec4((p),1.0), _seed_variation_);\n\nreturn o112765_0_1_sdf3d;\n}\n// 0 - SDF                    (0,0,0,sdf)\n// 1 - BaseColor              (r,g,b,sdf) linear (0-1) \n// 2 - Metallic               (v,0,0,sdf)\n// 4 - Specular               (v,0,0,sdf)\n// 5 - Roughness              (v,0,0,sdf)\n//13 - Emission\t              (r,g,b,sdf) linear (0-infinite)\n//14 - Normal                 (x,y,z,sdf)\n//15 - Alpha                  (v,0,0,sdf)\n//19 - Ambient Occlusion      (v,0,0,sdf) \n//999 - Table ID - Identifies this table (0,0,0,0)\n\nvec4 PBRObjectMaker_o30069(vec4 uv, float _seed_variation_) {\n\tfloat sdf=o30069_input_sdf3d(uv.xyz/p_o30069_scale, _seed_variation_)*p_o30069_scale;\n\t//19 - Ambient Occlusion\n\tif (uv.w>18.5) {\n\t\treturn vec4(p_o30069_AmbientOcclusion*o30069_input_AmbientOcclusion_tex3d(vec4(uv.xyz,19.0), _seed_variation_),0.0,0.0,sdf);\n\t} else\n\t//15 - Alpha\n\tif (uv.w>14.5) {\n\t\treturn vec4(p_o30069_Alpha*o30069_input_Alpha_tex3d(vec4(uv.xyz,15.0), _seed_variation_),0.0,0.0,sdf);\n\t} else\n\t//14 - Normal\n\tif (uv.w>13.5) {\n\t\treturn vec4(p_o30069_Normal*o30069_input_Normal_tex3d(vec4(uv.xyz,14.0), _seed_variation_),sdf);\n\t} else\n\t//13 - Emission\n\tif (uv.w>12.5) {\n\t\treturn vec4(p_o30069_Emission*o30069_input_Emission_tex3d(vec4(uv.xyz,13.0), _seed_variation_),sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5) {\n\t\treturn vec4(p_o30069_Roughness*o30069_input_Roughness_tex3d(vec4(uv.xyz,5.0), _seed_variation_),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4(p_o30069_Specular*o30069_input_Specular_tex3d(vec4(uv.xyz,4.0), _seed_variation_),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5) {\n\t\treturn vec4(p_o30069_Metallic*o30069_input_Metallic_tex3d(vec4(uv.xyz,2.0), _seed_variation_),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4(vec4(p_o30069_BaseColor_r, p_o30069_BaseColor_g, p_o30069_BaseColor_b, p_o30069_BaseColor_a).rgb*o30069_input_BaseColor_tex3d(vec4(uv.xyz,1.0), _seed_variation_),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}const float p_o304294_az = 0.000000000;\nconst float p_o51021_BaseColor_r = 1.000000000;\nconst float p_o51021_BaseColor_g = 1.000000000;\nconst float p_o51021_BaseColor_b = 1.000000000;\nconst float p_o51021_BaseColor_a = 1.000000000;\nconst float p_o51021_Metallic = 0.000000000;\nconst float p_o51021_Specular = 0.000000000;\nconst float p_o51021_Roughness = 1.000000000;\nconst float p_o51021_Emission = 96.799000000;\nconst float p_o51021_Normal = 0.000000000;\nconst float p_o51021_Alpha = 0.000000000;\nconst float p_o51021_AmbientOcclusion = 1.000000000;\nconst float p_o51021_scale = 1.000000000;\nconst float p_o278148_g_0_pos = 0.295868475;\nconst float p_o278148_g_0_r = 1.000000000;\nconst float p_o278148_g_0_g = 0.000000000;\nconst float p_o278148_g_0_b = 0.000000000;\nconst float p_o278148_g_0_a = 1.000000000;\nconst float p_o278148_g_1_pos = 0.692562589;\nconst float p_o278148_g_1_r = 0.000000000;\nconst float p_o278148_g_1_g = 0.000000000;\nconst float p_o278148_g_1_b = 0.000000000;\nconst float p_o278148_g_1_a = 1.000000000;\nvec4 o278148_g_gradient_fct(float x) {\n  if (x < p_o278148_g_0_pos) {\n    return vec4(p_o278148_g_0_r,p_o278148_g_0_g,p_o278148_g_0_b,p_o278148_g_0_a);\n  } else if (x < p_o278148_g_1_pos) {\n    return mix(vec4(p_o278148_g_0_r,p_o278148_g_0_g,p_o278148_g_0_b,p_o278148_g_0_a), vec4(p_o278148_g_1_r,p_o278148_g_1_g,p_o278148_g_1_b,p_o278148_g_1_a), ((x-p_o278148_g_0_pos)/(p_o278148_g_1_pos-p_o278148_g_0_pos)));\n  }\n  return vec4(p_o278148_g_1_r,p_o278148_g_1_g,p_o278148_g_1_b,p_o278148_g_1_a);\n}\nconst float seed_o271080 = 0.000000000;\nconst float p_o271080_scale_x = 2.000000000;\nconst float p_o271080_scale_y = 2.000000000;\nconst float p_o271080_scale_z = 2.000000000;\nconst float p_o271080_iterations = 1.000000000;\nconst float p_o271080_persistence = 0.500000000;\nfloat o271080_fbm(vec3 coord, vec3 size, int octaves, float persistence, float seed, float _seed_variation_) {\n\tfloat normalize_factor = 0.0;\n\tfloat value = 0.0;\n\tfloat scale = 1.0;\n\tfor (int i = 0; i < octaves; i++) {\n\t\tvalue += tex3d_fbm_perlin_nowrap(coord*size, size, seed) * scale;\n\t\tnormalize_factor += scale;\n\t\tsize *= 2.0;\n\t\tscale *= persistence;\n\t}\n\treturn value / normalize_factor;\n}\nvec3 o51021_input_BaseColor_tex3d(vec4 p, float _seed_variation_) {\nfloat o271080_0_1_tex3d_gs = o271080_fbm((p).xyz, vec3(p_o271080_scale_x, p_o271080_scale_y, p_o271080_scale_z), int(p_o271080_iterations), p_o271080_persistence, float((seed_o271080+_seed_variation_)), _seed_variation_);\nvec3 o278148_0_1_tex3d = o278148_g_gradient_fct(dot(vec3(o271080_0_1_tex3d_gs), vec3(1.0))/3.0).rgb;\n\nreturn o278148_0_1_tex3d;\n}\nfloat o51021_input_Metallic_tex3d(vec4 p, float _seed_variation_) {\n\nreturn 1.0;\n}\nfloat o51021_input_Specular_tex3d(vec4 p, float _seed_variation_) {\n\nreturn 1.0;\n}\nfloat o51021_input_Roughness_tex3d(vec4 p, float _seed_variation_) {\n\nreturn 1.0;\n}\nvec3 o51021_input_Emission_tex3d(vec4 p, float _seed_variation_) {\n\nreturn vec3(1.0,1.0,1.0);\n}\nvec3 o51021_input_Normal_tex3d(vec4 p, float _seed_variation_) {\n\nreturn vec3(0.0,1.0,0.0);\n}\nfloat o51021_input_Alpha_tex3d(vec4 p, float _seed_variation_) {\n\nreturn 1.0;\n}\nfloat o51021_input_AmbientOcclusion_tex3d(vec4 p, float _seed_variation_) {\n\nreturn 1.0;\n}\nconst float p_o313831_Distort = 0.167000000;\nconst float p_o313831_Correction = 0.000000000;\nconst float p_o313831_Bound = 0.000000000;\nconst float p_o240845_R = 2.010000000;\nconst float p_o240845_r = 0.740000000;\nfloat o313831_input_sdf(vec3 p, float _seed_variation_) {\nvec2 o240845_0_q = vec2(length((p).xy)-p_o240845_R,(p).z);\nfloat o240845_0_1_sdf3d = length(o240845_0_q)-p_o240845_r;\n\nreturn o240845_0_1_sdf3d;\n}\nconst float p_o318294_x_scale = 2.000000000;\nconst float p_o318294_y_scale = 2.000000000;\nconst float p_o318294_z_scale = 2.000000000;\nfloat o318294_fct(vec3 uv, float _seed_variation_) {\n\treturn mix3d_max(wave3d_triangle(p_o318294_x_scale*uv.x), wave3d_triangle(p_o318294_y_scale*uv.y), wave3d_triangle(p_o318294_z_scale*uv.z));\n}vec3 o313831_input_tex3d(vec4 p, float _seed_variation_) {\nvec3 o318294_0_1_tex3d = vec3(o318294_fct((p).xyz, _seed_variation_));\n\nreturn o318294_0_1_tex3d;\n}\n//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_o313831(vec3 p, float _seed_variation_) {  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=o313831_input_sdf(p+e.xyy, _seed_variation_);\n  float v2=o313831_input_sdf(p+e.yyx, _seed_variation_);\n  float v3=o313831_input_sdf(p+e.yxy, _seed_variation_);\n  float v4=o313831_input_sdf(p+e.xxx, _seed_variation_);\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nfloat distortByNormal_o313831(vec3 uv, float _seed_variation_) {\n    float d=o313831_input_sdf(uv, _seed_variation_);\n\tif (d<=abs(p_o313831_Distort*(p_o313831_Bound+1.0))+0.01){\n\t\tvec3 n=normal_o313831(uv, _seed_variation_);\n\t\tvec3 s=o313831_input_tex3d(vec4(uv,0.0), _seed_variation_);\n\t\treturn o313831_input_sdf(uv-(n*s*p_o313831_Distort), _seed_variation_);\n\t} else return d;\n}\nfloat o51021_input_sdf3d(vec3 p, float _seed_variation_) {\nfloat o313831_0_1_sdf3d = distortByNormal_o313831((p), _seed_variation_)/(1.0+p_o313831_Distort*p_o313831_Correction);\n\nreturn o313831_0_1_sdf3d;\n}\n// 0 - SDF                    (0,0,0,sdf)\n// 1 - BaseColor              (r,g,b,sdf) linear (0-1) \n// 2 - Metallic               (v,0,0,sdf)\n// 4 - Specular               (v,0,0,sdf)\n// 5 - Roughness              (v,0,0,sdf)\n//13 - Emission\t              (r,g,b,sdf) linear (0-infinite)\n//14 - Normal                 (x,y,z,sdf)\n//15 - Alpha                  (v,0,0,sdf)\n//19 - Ambient Occlusion      (v,0,0,sdf) \n//999 - Table ID - Identifies this table (0,0,0,0)\n\nvec4 PBRObjectMaker_o51021(vec4 uv, float _seed_variation_) {\n\tfloat sdf=o51021_input_sdf3d(uv.xyz/p_o51021_scale, _seed_variation_)*p_o51021_scale;\n\t//19 - Ambient Occlusion\n\tif (uv.w>18.5) {\n\t\treturn vec4(p_o51021_AmbientOcclusion*o51021_input_AmbientOcclusion_tex3d(vec4(uv.xyz,19.0), _seed_variation_),0.0,0.0,sdf);\n\t} else\n\t//15 - Alpha\n\tif (uv.w>14.5) {\n\t\treturn vec4(p_o51021_Alpha*o51021_input_Alpha_tex3d(vec4(uv.xyz,15.0), _seed_variation_),0.0,0.0,sdf);\n\t} else\n\t//14 - Normal\n\tif (uv.w>13.5) {\n\t\treturn vec4(p_o51021_Normal*o51021_input_Normal_tex3d(vec4(uv.xyz,14.0), _seed_variation_),sdf);\n\t} else\n\t//13 - Emission\n\tif (uv.w>12.5) {\n\t\treturn vec4(p_o51021_Emission*o51021_input_Emission_tex3d(vec4(uv.xyz,13.0), _seed_variation_),sdf);\n\t} else\n\t//5 - Roughness\n\tif (uv.w>4.5) {\n\t\treturn vec4(p_o51021_Roughness*o51021_input_Roughness_tex3d(vec4(uv.xyz,5.0), _seed_variation_),0.0,0.0,sdf);\n\t} else\n\t//4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4(p_o51021_Specular*o51021_input_Specular_tex3d(vec4(uv.xyz,4.0), _seed_variation_),0.0,0.0,sdf);\n\t} else\n\t//2 - Metallic\n\tif (uv.w>1.5) {\n\t\treturn vec4(p_o51021_Metallic*o51021_input_Metallic_tex3d(vec4(uv.xyz,2.0), _seed_variation_),0.0,0.0,sdf);\n\t} else\n\t//1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4(vec4(p_o51021_BaseColor_r, p_o51021_BaseColor_g, p_o51021_BaseColor_b, p_o51021_BaseColor_a).rgb*o51021_input_BaseColor_tex3d(vec4(uv.xyz,1.0), _seed_variation_),sdf);\n\t} else\n\t//0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}const float seed_o265866 = 0.000000000;\nconst float p_o265866_scale_x = 8.000000000;\nconst float p_o265866_scale_y = 8.000000000;\nconst float p_o265866_scale_z = 8.000000000;\nconst float p_o265866_iterations = 1.000000000;\nconst float p_o265866_persistence = 0.500000000;\nfloat o265866_fbm(vec3 coord, vec3 size, int octaves, float persistence, float seed, float _seed_variation_) {\n\tfloat normalize_factor = 0.0;\n\tfloat value = 0.0;\n\tfloat scale = 1.0;\n\tfor (int i = 0; i < octaves; i++) {\n\t\tvalue += tex3d_fbm_value(coord*size, size, seed) * scale;\n\t\tnormalize_factor += scale;\n\t\tsize *= 2.0;\n\t\tscale *= persistence;\n\t}\n\treturn value / normalize_factor;\n}\nvec4 o22148_input_mfsdf(vec4 p, float _seed_variation_) {\nvec4 o30069_0_1_v4v4 = PBRObjectMaker_o30069((p), _seed_variation_);\nvec4 o51021_0_1_v4v4 = PBRObjectMaker_o51021((vec4(v4v4_rotate((p).xyz, -vec3((iTime*20.0), (iTime*57.0), p_o304294_az)*0.01745329251), (p).w)), _seed_variation_);\nvec4 o304294_0_1_v4v4 = o51021_0_1_v4v4;\nfloat o265866_0_1_tex3d_gs = o265866_fbm((p).xyz, vec3(p_o265866_scale_x, p_o265866_scale_y, p_o265866_scale_z), int(p_o265866_iterations), p_o265866_persistence, float((seed_o265866+_seed_variation_)), _seed_variation_);\nvec4 o252591_0_1_v4v4 = mfsdf3d_smooth_complex_union(o30069_0_1_v4v4, o304294_0_1_v4v4,p_o252591_k,-p_o252591_shift-(o265866_0_1_tex3d_gs*0.5),max((1.0-p_o252591_colorContrast),0.001),max(p_o252591_colorSmooth,0.001));\n\nreturn o252591_0_1_v4v4;\n}\nvec3 o22148_input_hdri(vec2 uv, float _seed_variation_) {\n\nreturn Simple360HDR_make360hdri(vec2((uv).x,-(uv).y+1.0),normalize(vec3(-p_o22148_SunX,p_o22148_SunY,-p_o22148_SunZ)));\n}\n\n//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_o22148(vec3 p, float _seed_variation_) {  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=o22148_input_mfsdf(vec4(p+e.xyy,0.0), _seed_variation_).w;\n  float v2=o22148_input_mfsdf(vec4(p+e.yyx,0.0), _seed_variation_).w;\n  float v3=o22148_input_mfsdf(vec4(p+e.yxy,0.0), _seed_variation_).w;\n  float v4=o22148_input_mfsdf(vec4(p+e.xxx,0.0), _seed_variation_).w;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid march_o22148(inout float d,inout vec3 p,float dS, vec3 ro, vec3 rd, float _seed_variation_) {\n    for (int i=0; i < 500; i++) {\n    \tp = ro + rd*d;\n        dS = o22148_input_mfsdf(vec4(p,0.0), _seed_variation_).w;\n        d += dS;\n        if (d > 50.0 || abs(dS) < 0.0001) break;\n    }\n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcAO_o22148( in vec3 pos, in vec3 nor , float _seed_variation_) {\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ ){\n        float h = 0.001 + 0.25*float(i)/4.0;\n        float d = o22148_input_mfsdf(vec4( pos + h*nor ,0.0), _seed_variation_).w;\n        occ += (h-d)*sca;\n        sca *= 0.98;\n    }\n    return clamp( 1.0 - 1.6*occ, 0.0, 1.0 );    \n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcSoftshadow_o22148( in vec3 ro, in vec3 rd, in float mint, in float tmax, float _seed_variation_) {\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    for( int i=0; i<32; i++ ){\n\t\tfloat h = o22148_input_mfsdf(vec4( ro + rd*t ,0.0), _seed_variation_).w;\n        res = min( res, 10.0*h/t );\n        t += h;\n        if( res<0.0001 || t>tmax ) break;  \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 raymarch_o22148(vec2 uv, float _seed_variation_) {\n    uv-=0.5;\n\tvec3 cam=vec3(p_o22148_CamX,p_o22148_CamY,p_o22148_CamZ)*p_o22148_CamZoom;\n\tvec3 lookat=vec3(p_o22148_LookAtX,p_o22148_LookAtY,p_o22148_LookAtZ);\n\tvec3 ray=normalize(lookat-cam);\n\tvec3 cX=normalize(cross(vec3(0.0,1.0,0.0),ray));\n\tvec3 cY=normalize(cross(cX,ray));\n\tvec3 rd = normalize(ray*p_o22148_CamD+cX*uv.x+cY*uv.y);\n\tvec3 ro = cam;\n\t\n\tfloat d=0.;\n\tvec3 p=vec3(0);\n\tfloat dS=0.0;\n\tmarch_o22148(d,p,dS,ro,rd, _seed_variation_);\n\t\n    vec3 color=vec3(0.0);\n\tvec3 objColor=o22148_input_mfsdf(vec4(p,1.0), _seed_variation_).xyz;   // 1 - BaseColor (r,g,b,sdf) linear (0-1) \n\tfloat objSpecular=o22148_input_mfsdf(vec4(p,4.0), _seed_variation_).x*0.2;  // 4 - Specular  (v,0,0,sdf)\n\tfloat objRoughness=o22148_input_mfsdf(vec4(p,5.0), _seed_variation_).x; // 5 - Roughness (v,0,0,sdf)\n\tvec3 light=normalize(vec3(p_o22148_SunX,p_o22148_SunY,p_o22148_SunZ));\n\tif (d<50.0) {\n\t    vec3 n=normal_o22148(p, _seed_variation_);\n\t\tfloat l=clamp(dot(-light,-n),0.0,1.0);\n\t\tvec3 ref=normalize(reflect(rd,-n));\n\t\tfloat r=clamp(dot(ref,light),0.0,1.0);\n\t\tfloat cAO=mix(1.0,calcAO_o22148(p,n, _seed_variation_),p_o22148_AmbOcclusion);\n\t\tfloat shadow=mix(1.0,calcSoftshadow_o22148(p,light,0.05,5.0, _seed_variation_),p_o22148_Shadow);\n\t\tcolor=min(vec3(max(shadow,p_o22148_AmbLight)),max(l,p_o22148_AmbLight))*max(cAO,p_o22148_AmbLight)*objColor+4.0*pow(r,pow(256.0,(1.0-objRoughness)))*objSpecular;\n\t\t//reflection\n\t\td=0.01;\n\t\tmarch_o22148(d,p,dS,p,ref, _seed_variation_);\n\t\tvec3 objColorRef=vec3(0);\n\t\tif (d<50.0) {\n\t\t\tobjColorRef=o22148_input_mfsdf(vec4(p,1.0), _seed_variation_).xyz;\n\t\t\tn=normal_o22148(p, _seed_variation_);\n\t\t\tl=clamp(dot(-light,-n),0.0,1.0);\n\t\t\tobjColorRef=max(l,p_o22148_AmbLight)*objColorRef;\n\t\t} else {\n\t\t\tobjColorRef=o22148_input_hdri(equirectangularMap(ref.xzy), _seed_variation_).xyz;\n\t\t}\n\t\tcolor=mix(color,objColorRef,objSpecular);\n\t} else {\n\t\tcolor=o22148_input_hdri(equirectangularMap(rd.xzy), _seed_variation_).xyz;\n\t}\n\treturn pow(color,vec3(1.0/p_o22148_Gamma));\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\nfloat minSize = min(iResolution.x, iResolution.y);\nfloat _seed_variation_ = SEED_VARIATION;\nvec2 UV = vec2(0.0, 1.0) + vec2(1.0, -1.0) * (fragCoord-0.5*(iResolution.xy-vec2(minSize)))/minSize;\nvec3 o22148_0_1_rgb = raymarch_o22148((UV), _seed_variation_);\nfragColor = vec4(o22148_0_1_rgb, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}