{"ver":"0.1","info":{"id":"Wt3BWN","date":"1612713363","viewed":198,"name":"Deadmau5 SDF shader","username":"lumic","description":"There's another shader with more visualizations (and morph with disney)\nhttps://www.shadertoy.com/view/ttcBWr","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["disney","deadmau5"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159265359;\n\nvec2 squareFrame(vec2 screenSize, vec2 coord) {\n  vec2 position = 2.0 * (coord.xy / screenSize.xy) - 1.0;\n  position.x *= screenSize.x / screenSize.y;\n  return position;\n}\n\nfloat circle(vec2 p, float r) {\n  return length(p) - r;\n}\n\nfloat ellipse( in vec2 p, in vec2 ab )\n{\n    p = abs(p); if( p.x > p.y ) {p=p.yx;ab=ab.yx;}\n    float l = ab.y*ab.y - ab.x*ab.x;\n    float m = ab.x*p.x/l;      float m2 = m*m; \n    float n = ab.y*p.y/l;      float n2 = n*n; \n    float c = (m2+n2-1.0)/3.0; float c3 = c*c*c;\n    float q = c3 + m2*n2*2.0;\n    float d = c3 + m2*n2;\n    float g = m + m*n2;\n    float co;\n    if( d<0.0 )\n    {\n        float h = acos(q/c3)/3.0;\n        float s = cos(h);\n        float t = sin(h)*sqrt(3.0);\n        float rx = sqrt( -c*(s + t + 2.0) + m2 );\n        float ry = sqrt( -c*(s - t + 2.0) + m2 );\n        co = (ry+sign(l)*rx+abs(g)/(rx*ry)- m)/2.0;\n    }\n    else\n    {\n        float h = 2.0*m*n*sqrt( d );\n        float s = sign(q+h)*pow(abs(q+h), 1.0/3.0);\n        float u = sign(q-h)*pow(abs(q-h), 1.0/3.0);\n        float rx = -s - u - c*4.0 + 2.0*m2;\n        float ry = (s - u)*sqrt(3.0);\n        float rm = sqrt( rx*rx + ry*ry );\n        co = (ry/sqrt(rm-rx)+2.0*g/rm-m)/2.0;\n    }\n    vec2 r = ab * vec2(co, sqrt(1.0-co*co));\n    return length(r-p) * sign(p.y-r.y);\n}\n\n\nvec2 rotate(vec2 p, float deg) {\n    float r = length(p);\n    float angle = atan(p.y, p.x);\n    float radians = angle + deg / 360.0 * (2.0 * PI);\n    return vec2(r * cos(radians), r * sin(radians));\n}\n\nfloat combine( float d1, float d2 ) { return min(d1,d2); }\nfloat difference( float d1, float d2 ) { return max(d1,-d2); }\nfloat intersect( float d1, float d2 ) { return max(d1,d2); }\n\nfloat smoothIntersect( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) + k*h*(1.0-h); \n}\n\nfloat mixer() {\n    return (sin(iTime * 1.5) + 1.0) * 0.5;\n}\n\nfloat ear(vec2 p, float angle, float scale, vec2 e) {\n    return ellipse(rotate(p * scale, -angle), e);\n}\n\nfloat eye(vec2 p, float angle) {\n    float d = 1.75;\n    vec2 pr = rotate(p, angle);\n    return smoothIntersect(        \n        circle(pr * d, 0.25),\n        circle(pr * d - vec2(0, 0.25), 0.35), 0.05);\n}\n\nfloat deadmau5(vec2 p) {\n    float headSize = 0.45;\n    float face = circle(p, headSize);\n\n    float earAngle = 40.0; \n    vec2 ellipseAB = vec2(0.42, 0.37);\n    float earInvScale = 0.94;\n    \n    face = combine(face, ear(p - vec2(0.5, 0.48), earAngle, earInvScale, ellipseAB));\n    face = combine(face, ear(p - vec2(-0.5, 0.48), -earAngle, earInvScale, ellipseAB));\n    \n    float fullmouth = circle(p, 0.4);\n    float mouth = difference(fullmouth, circle(p - vec2(0, 9.95), 10.0));\n    face = difference(face, mouth);\n    \n    face = difference(face, eye(p - vec2(0.22, 0.21), 45.0));\n    face = difference(face, eye(p - vec2(-0.22, 0.21), -45.0));\n    \n    return face;\n}\n\n\nfloat draw_solid(float d) {\n  return smoothstep(0.0, 3.0 / iResolution.y, max(0.0, d));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  float t = 0.0f;\n  vec2 uv = squareFrame(iResolution.xy, fragCoord);\n  float d;\n  vec3 col;\n  vec2 ro = vec2(iMouse.xy / iResolution.xy) * 2.0 - 1.0;\n  ro.x *= squareFrame(iResolution.xy, iResolution.xy).x;\n\n  vec2 rd = normalize(-ro);\n\n  vec2 offset = vec2(0, -0.15);\n  d = deadmau5(uv - offset);\n\n  col = vec3(draw_solid(d));\n\n  fragColor.rgb = col;\n  fragColor.a   = 1.0;\n}","name":"Image","description":"","type":"image"}]}