{"ver":"0.1","info":{"id":"sdtXRX","date":"1633646859","viewed":45,"name":"lucasteles/study1","username":"lucasteles","description":"Following https://www.youtube.com/watch?v=u5HAYVHsasc&t=116s","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// isso é um pixel shader, ou fragment shader, é basicamente um \n// foreach pra cada pixel da tela\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // converter screen-space para clip space\n    // resolucao da tela é 1280x720 (screen space)\n    // shaders lidam om clip-splace. que vai de 0 até 1\n    // por isso dividir a uv (cordenada do pixel atual) pelo tamanho da tela\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // centraliza o circulo,0.5 é metade da tela\n    // o valor é aplicado aos dois componentes do vetor\n    uv -= .5;\n    \n    // a tela é wide, entao multiplicamos o x pelo aspect ratio para nao distorcer a imagem\n    uv.x *= iResolution.x/iResolution.y;\n    \n    \n    // calula o modulo/distancia/tanho do vetor relativo ao centro\n    float dist = length(uv);\n    \n    //assim ficaria degrade de claro pra escuro a partir do centro\n    //float center = dist;\n    \n    \n    // a ideia aqui é cravar entre 0 e 1 pra tirar o degrade\n    //\n    // varias formas de fazer a mesma coisa, if, ternario, ou cast de bool pra float\n    //\n    //float center = (dist < .3) ? 1. : .0;\n    //float center=0.;if (dist < .3) center = 1.; else center = .0;\n    //float center = float (dist < .3);\n    \n    \n    // smoothstep remove hard edges do circulo, faz um mini degrade entre o\n    // tamanho de r dando uma suavisada nas bordas\n    float r = 0.3;\n    float center = smoothstep(r,r - .02, dist);\n    \n    // cria um vec4 a partir de um vec3\n    // vec3(float) cria um vetor de tamanho 3 com 3 componentes iguais\n    // voce pode passar um vec3 no construtor de um vec4, ele preenche os 3 primeiros componentes\n    // a cor precisa ser um vec4, o ultimo componente é o alpha\n    fragColor = vec4(vec3(center),1.0);\n    \n   \n}","name":"Image","description":"","type":"image"}]}