{"ver":"0.1","info":{"id":"Xtd3D4","date":"1469304174","viewed":452,"name":"Pritty colours :)","username":"frutbunn","description":"Nothing new, but it's amazing the difference changing a few things can make - only new thing here is some slight changes to the starfield - works much better in the distance now.","likes":14,"published":1,"flags":64,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3zn","filepath":"/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","previewfilepath":"/media/ap/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"MsBXWD","filepath":"https://soundcloud.com/demoscenedelights/daft-punk-digital-love-sabrepulse-chiptune-remix","previewfilepath":"https://soundcloud.com/demoscenedelights/daft-punk-digital-love-sabrepulse-chiptune-remix","type":"musicstream","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS \t\t\t125\n#define MAX_DISTANCE \t\t9.5\n#define MARCHING_STEP_INC \t.27\n#define EPSILON \t\t\t.01\n\n#define PI 3.14159265358979323846\n#define TIMER(sec, min, max) (((mod(iTime, (sec)) * ((max) - min)) / (sec)) + (min))\n\nint mode = 0;\nfloat rz, rx, ry;\nfloat b[4];\nfloat o[4];\nfloat scol[7];\n\nvec3 final_color = vec3(0.);\nfloat current_depth = 1.;\nvec3 current_color = vec3(0.);\n\n#define MAX_DISPLACE\t \t.25\n#define MAX_COLOR_BLEED\t\t.1\nvoid colorize(in float depth, in vec3 color) {\n    float c = smoothstep(depth-MAX_COLOR_BLEED, depth+MAX_COLOR_BLEED, current_depth);\n\tfloat d = smoothstep(depth-MAX_DISPLACE, depth+MAX_DISPLACE, current_depth);\n    \n\tcurrent_depth= depth*(d) + current_depth*(1.-d);\n\tcurrent_color = (1.-c)*current_color + (c)*color;\n}\n\nvec4 texCube(in sampler2D sam, in vec3 p, in vec3 n, in float k ) {\n\tvec4 x = texture( sam, p.yz );\n\tvec4 y = texture( sam, p.zx );\n\tvec4 z = texture( sam, p.xy );\n    vec3 w = pow( abs(n), vec3(k) );\n\treturn (x*w.x + y*w.y + z*w.z) / (w.x+w.y+w.z);\n}\n\nmat2 mm2(in float a) {float c = cos(a), s = sin(a);return mat2(c,s,-s,c);}\n\n#define K 12.\nfloat smin(in float a, in float bb ) {\n    float res = exp( -K*a ) + exp( -K*bb ); return -log( res )/K;\n}\n\nfloat sdTorus(in vec3 p, in vec2 t){vec2 q = vec2(length(p.xz)-t.x,p.y); return length(q)-t.y;}\nvec3 opTwist(in vec3 p, in float d){float  c = cos(d*p.y+d); float  s = sin(d*p.y+d); mat2   m = mat2(c,-s,s,c); return vec3(m*p.xz,p.y);}\n\nfloat scene(in vec3 p) {\n    \n    p*=1. + scol[0]*.1;\n    \n    vec3 tmp = p;\n    tmp*=2. - scol[2]*.35;\n    \n    o[0] = sdTorus(tmp, vec2(1.+scol[2], .15)) - cos(1.5*tmp.x)*cos(1.5*tmp.y)*cos(1.5*tmp.z);\n    o[2] = sdTorus(tmp, vec2(1.+scol[4], .15)) - sin(1.5*tmp.x)*sin(1.5*tmp.y)*sin(1.5*tmp.z);\n    \n    tmp = p;  \n    tmp.xy*=mm2(PI*.5);\n\n    o[1] = sdTorus(tmp, vec2(1.+scol[3], .15)) - cos(1.5*tmp.x)*cos(1.5*tmp.y)*cos(1.5*tmp.z);\n    o[3] = sdTorus(tmp, vec2(1.+scol[5], .15)) - sin(1.5*tmp.x)*sin(1.5*tmp.y)*sin(1.5*tmp.z);\n\n    return smin(o[0], smin(o[1], smin(o[2], o[3])));\n}\n\nfloat rayMarch(in vec3 origin, in vec3 ray) {\n\tfloat t = 0.;\n\tfor (int i=0; i < MAX_STEPS; i++) {\n\t\tfloat d = scene(origin + ray*t);\n        if (d < EPSILON) break;\n        t += d*MARCHING_STEP_INC;\n        if (t > MAX_DISTANCE) break;\n\t}\n    return t;\n}\n\nfloat ambientOcculation(in vec3 origin, in vec3 ray) {\n    const float delta = 0.1;\n    const int samples = 6;\n    float r = 0.;\n    for (int i=1; i <= samples; i++) {\n        float t = delta * float(i);\n        float d = scene(origin + ray*t);\n        float len = abs(t - d);\n        r += len * pow(2.0, -float(i));\n    }\n    return r;\n}\n\nfloat shadowSample(in vec3 origin, in vec3 ray) {\n    float r = 1.;\n    float t = 1.;\n    const int samples = 6;\n    for (int i=0; i <= samples; i++) {\n        float d = scene(origin + ray*t);\n        r = min(r, 16.0*d/t);\n        t += d;\n    }\n    return max(0., r);\n}\n\nvec3 getNormal(in vec3 p, in float ep) {\n\tfloat d0 = scene(p);\n\tfloat dX = scene(p - vec3(ep, 0.0, 0.0));\n\tfloat dY = scene(p - vec3(0.0, ep, 0.0));\n\tfloat dZ = scene(p - vec3(0.0, 0.0, ep));\n\n\treturn normalize(vec3(dX-d0, dY-d0, dZ-d0));\n}\n\nfloat f1(in float x) {\n    return sqrt(1.-(x-1.)*(x-1.));\n\n}\n\nvec3 interference(in vec2 uv, in vec3 s, in float d) {\n    vec2 uv2 = uv - d;\n    s *= abs (.12/sin(uv2.y) ); \n    return s;\n}\n\n\nvec3 starfield(in vec2 uv) {\n    vec3 col = vec3(.0);    \n    vec3 ray = vec3(uv*.8, sin(TIMER(2., -PI, PI))+PI*.5);\n\tray.xy*=mm2(TIMER(10. ,0., -PI*2.));\n    \n    vec3 t = ray/max(abs(ray.x), abs(ray.y));\n    vec3 p = 1.*t+.5;\n       \n    for(int i=0; i<3; i++) {\n        float n = fract(sin(dot((vec2(floor(p.xy*30.334))), vec2(12.9898, 78.233)))*43758.5453)+.5;\n        float z = fract(cos(n)-sin(n)-iTime*.2);       \n        float d = 60.*z-p.z;\n        \n        float j = max(0., 1.5-2.*length(fract(p.xy)-.5));\n        vec3 c = sin(max(vec3(0), vec3(1.0-abs(d))*(1./t.z*2.)) )*1.5;\n        \n        \n        col += (1.-z)*c*j*1.2 * b[3];\n        p += t;\n    }\n    col = max(vec3(0.), min(vec3(1.), col));\n\n    return col;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord.xy / iResolution.xy) - vec2(.5);\n    vec2 uv_crt2 = uv;\n    \n    float curvature = length(uv*.5 * uv*.5);\n    uv = uv*curvature + uv*.935;\n    \n    vec2 uv_crt = uv;\n \n    uv.x *= iResolution.x/iResolution.y;\n    \n    #\tdefine MM 6.0\n    scol[0]=texture(iChannel2, vec2(0., 0.25) ).x;     scol[0]=f1(clamp(1.*scol[0]*scol[0], 0., 1.)); scol[0]*=MM*scol[0]*scol[0];\n    scol[1]=texture(iChannel2, vec2(.17*1., 0.25) ).x; scol[1]=f1(clamp(1.*scol[1]*scol[1], 0., 1.)); scol[1]*=MM*scol[1]*scol[1];\n    scol[2]=texture(iChannel2, vec2(.17*2., 0.25) ).x; scol[2]=f1(clamp(1.*scol[2]*scol[2], 0., 1.)); scol[2]*=MM*scol[2]*scol[2];\n    scol[3]=texture(iChannel2, vec2(.17*3., 0.25) ).x; scol[3]=f1(clamp(1.*scol[3]*scol[3], 0., 1.)); scol[3]*=MM*scol[3]*scol[3];\n    scol[4]=texture(iChannel2, vec2(.17*4., 0.25) ).x; scol[4]=f1(clamp(1.*scol[4]*scol[4], 0., 1.)); scol[4]*=MM*scol[4]*scol[4];\n    scol[5]=texture(iChannel2, vec2(.17*5., 0.25) ).x; scol[5]=f1(clamp(1.*scol[5]*scol[5], 0., 1.)); scol[5]*=MM*scol[5]*scol[5];\n    scol[6]=texture(iChannel2, vec2(.99, 0.25) ).x;    scol[6]=f1(clamp(1.*scol[6]*scol[6], 0., 1.)); scol[6]*=MM*scol[6]*scol[6];    \n\n    b[0] = (scol[1]+scol[1]+scol[0])* .25;\n    b[1] = (scol[3]+scol[3]+scol[2])* .15;\n    b[2] = (scol[4]+scol[5]+scol[4])* .3;\n    b[3] = (scol[2]+scol[6]+scol[6])* .25;\n\n    \n    if(b[0]>1.2) mode = 1;\n    if(b[2]>1.) uv*=.3+b[2]*.8;\n    \n    \n\tvec3 eye = vec3(0., 0., -5.);    \n    vec3 light = vec3(3., -1.5, -6.);    \n  \n    vec3 ray = vec3(vec2(uv.x, uv.y), 1.);\n    \n    float depth;\n\n    rz = TIMER(10. ,0., PI*2.);\n    rx = TIMER(5. ,0., PI*2.);\n    ry = TIMER(4. ,0., PI*2.);\n    \n    eye.zx*=mm2(rx); eye.xy*=mm2(rz); eye.zy*=mm2(ry);\n    light.zx*=mm2(rx); light.xy*=mm2(rz); light.zy*=mm2(ry);\n   \tray.zx*=mm2(rx); ray.xy*=mm2(rz); ray.zy*=mm2(ry);\n    \n    depth = rayMarch(eye, ray);   \n\tif (depth < MAX_DISTANCE) {\n    \tcolorize(o[0], vec3(1.*scol[0], 1.*scol[6], 1.*scol[4]));\n        colorize(o[2], vec3(1.*scol[1], 1.*scol[5], 0.));\n        \n    \tcolorize(o[1], vec3(0., .5*scol[6], 1.*scol[2]));\n    \tcolorize(o[3], vec3(1.*scol[2], 0., .5*scol[3]));\n        \n        \n\t\tvec3 p = (eye + ray*depth);\n\t\tfloat d_ep=length(p - depth);\n\t\tvec3 p_normal = getNormal(p, d_ep*d_ep*EPSILON*.1);\n\t\t        \n        vec3 light_dir = -normalize(light-p);\n        vec3 reflected_light_dir = reflect(-light_dir, -p_normal);\n        \n        float shadow = shadowSample(p, -light_dir);\n        \n#\t\tdefine J .003\n\t\tfloat attenuation = 1./(1. + J*pow( length(light-p), 2.0));\n       \tattenuation*=max(1., 1.+shadow);\n                \n        float ambient = 1.0 - ambientOcculation(p, -ray);\n        ambient = pow(max(ambient, 0.), 8.);\t\t        \n        float diffuse = max(0., dot(light_dir, p_normal));        \n        float lighting = (max(1., diffuse*.3 + ambient*.7) )*attenuation;\n       \n        vec3 reflectioncolor = texture(iChannel1, reflect(ray, p_normal)).rgb;      \n        vec3 texcol = texCube(iChannel0, p, p_normal, .1 ).rgb * lighting;\n\n        current_color*=.09; \n        \n        final_color = (clamp(mix(current_color+vec3(.0), reflectioncolor*2.7, max(0., 1.+(dot(-p_normal, ray)))), 0., 1.)+current_color)*lighting;\n        final_color = final_color + texcol*.20;\n \n        final_color *= max(dot(p_normal,ray*.7),0.);\n        \n        \n        final_color = final_color + interference(uv_crt, final_color, (b[0]+b[2])*.75); //.75\n        \n\t} else {       \n        final_color = vec3(.42, .4, .4);\n                \n        final_color = starfield(uv);\n    }\n    \n\n\n    final_color=min(vec3(1.), max(vec3(0.), final_color));\n    \n    float mm = 9.;  \n    float l = 1. - min(1., curvature*mm);\n    final_color *= l;\n    \n    float y = uv_crt.y;\n    float showScanlines = 1.;\n    if (iResolution.y<280.) showScanlines = 0.;\n    float s = 1. - smoothstep(360., 1440., iResolution.y) + 1.;\n    float j = cos(y*iResolution.y*s)*.1; //.2 \n    final_color = abs(showScanlines-1.)*final_color + showScanlines*(final_color - final_color*j);   \n    \n    float cm = max(0.0, 1. - 2.*max(abs(uv_crt.x), abs(uv_crt.y) ) );\n    cm = min(cm*200., 1.);\n    final_color *= cm;\n\n    final_color = max(vec3(0.), min(vec3(1.), final_color));\n    fragColor = vec4(pow(final_color, vec3(1.05)), 1.);\n\n}\n","name":"Image","description":"","type":"image"}]}