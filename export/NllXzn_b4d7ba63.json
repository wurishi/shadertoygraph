{"ver":"0.1","info":{"id":"NllXzn","date":"1625072505","viewed":52,"name":"Raymarching Basics Distance","username":"RossBorchers","description":"You know it!\nhttps://www.youtube.com/watch?v=PGtv-dBi2wE","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["newbie","basicraymarching","artofcode"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define SURFACE_DIST 0.01\n\nfloat GetDist(vec3 ro, vec3 p)\n{\n    //Distance to plane. flat on ground.\n    float dPlane = p.y;\n    \n    //Distance to sphere.\n    //distance of camera to sphere position minus radius\n    //xyz, radius\n    vec4 sphere= vec4(0, 1, 6, 1);\n    float dSphere = length(p-sphere.xyz)-sphere.w;\n    \n    float dMarch = min(dPlane, dSphere);\n    return dMarch;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd)\n{\n    //Distance from origin.\n    float dO = 0.0;\n    \n    //Delimit max steps to avoid infinate loop\n    for(int i = 0; i < MAX_STEPS; i++)\n    {\n        //new point to evaluate. camera origin + current distance from origin * ray direction \n        vec3 p = ro+(dO*rd);\n        \n        //Get current distance to scene (sphere trace)\n        float dS = GetDist(ro, p);\n        \n        //increment distnace for next iteration\n        dO += dS;\n        \n        //exit if we are close to surface or we are too far away from camera.\n        if(dS<SURFACE_DIST || dO > MAX_DIST)\n        {\n            break;\n        }\n    }\n    \n    //return the distance that we either exited early or at scene object.\n    return dO;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1). Center on middle of screen.\n    vec2 uv = (fragCoord-0.5f*iResolution.xy)/iResolution.y;\n\n    // Basic camera model.\n    vec3 ro = vec3(0,1,0);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    \n    //get closest point in scene... move forward to that point. Iterativley find distance.\n    \n    float d = RayMarch(ro, rd);\n    d/=10.0;\n    vec3 col = vec3(d);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}