{"ver":"0.1","info":{"id":"Msfyzr","date":"1486686858","viewed":171,"name":"Skybox Test","username":"yumcyawiz","description":"test","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdSphere(vec3 p, float r) {\n    return length(p) - r;\n}\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\n\nfloat smin(float a, float b, float k) {\n    float r = exp(-k*a) + exp(-k*b);\n    return -log(r)/k;\n}\n        \n\nfloat df(vec3 p) {\n    float s1 = sdSphere(p, 1.0);\n    return s1;\n}\n\n\nvec3 calcNormal(vec3 p) {\n    float eps = 0.0001;\n    return normalize(vec3(\n        df(p + vec3(eps, 0, 0)) - df(p - vec3(eps, 0, 0)),\n        df(p + vec3(0, eps, 0)) - df(p - vec3(0, eps, 0)),\n        df(p + vec3(0, 0, eps)) - df(p - vec3(0, 0, eps))\n        ));\n}\n\n\nstruct Ray {\n    vec3 from;\n    vec3 rayDir;\n    vec3 hitPos;\n    vec3 hitNormal;\n    float t;\n    int steps;\n    bool hit;\n};\n    \nconst int maxSteps = 100;\n\nRay trace(vec3 from, vec3 rayDir) {\n    vec3 p = vec3(0);\n    vec3 hitNormal = vec3(0);\n    float t = 0.01;\n    int steps = 0;\n    bool hit = false;\n    for(int i = 0; i < maxSteps; i++) {\n        p = from + t*rayDir;\n        float d = df(p);\n        if(d < 0.001) {\n            hit = true;\n            hitNormal = calcNormal(p);\n            steps = i;\n            break;\n        }\n        t += d;\n    }\n    return Ray(from, rayDir, p, hitNormal, t, steps, hit);\n}\nRay trace2(vec3 from, vec3 rayDir) {\n    vec3 p = vec3(0);\n    vec3 hitNormal = vec3(0);\n    float t = 0.01;\n    int steps = 0;\n    bool hit = false;\n    for(int i = 0; i < 100; i++) {\n        p = from + t*rayDir;\n        float d = df(p);\n        if(-d < 0.001) {\n            hit = true;\n            hitNormal = calcNormal(p);\n            steps = i;\n            break;\n        }\n        t += -d;\n    }\n    return Ray(from, rayDir, p, hitNormal, t, steps, hit);\n}\n\n\nvec3 refl(vec3 v, vec3 n) {\n    return v + length(-v + n)*n;\n}\nvec3 refr(vec3 v, vec3 n, float n1, float n2) {\n    vec3 omega_t = n1/n2*(v + dot(-v, n)*n);\n    vec3 omega_l = -sqrt(1.0 - pow(length(omega_t), 2.0))*n;\n    return omega_t + omega_l;\n}\n\n\nvec3 shading(vec3 from, vec3 rayDir) {\n    Ray tr = trace(from, rayDir);\n    if(tr.hit == false) {\n        return vec3(texture(iChannel0, tr.rayDir));\n    }\n    \n    float n1 = 1.0;\n    float n2 = 1.4;\n    vec3 r = refl(tr.rayDir, tr.hitNormal);\n    vec3 r2 = refr(tr.rayDir, tr.hitNormal, n1, n2);\n    Ray tr2 = trace2(tr.hitPos, r2);\n    r2 = refr(r2, -tr2.hitNormal, n2, n1);\n    float f0 = pow((n1 - n2)/(n1 + n2), 2.0);\n    float fresnel = f0 + (1.0 - f0)*pow(1.0 - dot(-tr.rayDir, tr.hitNormal), 5.0);\n    return vec3(mix(texture(iChannel0, r), texture(iChannel0, r2), 1.0 - fresnel)) * (1.0 - float(tr.steps)/float(maxSteps));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (2.0*fragCoord.xy - iResolution.xy) / iResolution.y;\n    \n    float t = 0.5*iTime;\n    vec3 camPos = vec3(2.0*cos(t), 0, 2.0*sin(t));\n    vec3 camFront = normalize(-camPos);\n    vec3 camUp = vec3(0, 1, 0);\n    vec3 camRight = cross(camFront, camUp);\n    float focus = 1.0;\n    \n    vec3 rayDir = normalize(uv.x*camRight + uv.y*camUp + focus*camFront);\n\tfragColor = vec4(shading(camPos, rayDir), 1.0);\n}","name":"Image","description":"","type":"image"}]}