{"ver":"0.1","info":{"id":"lsBBD1","date":"1506707631","viewed":193,"name":"abstract_fractal3d_0","username":"balkhan","description":"done after reading iq's \"monster\" shader","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","kifs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n* License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n* Created by bal-khan\n*/\n\n#define I_MAX\t50\n#define E\t\t0.01\n\n#define I 12.\n\nfloat\tsdHexPrism( vec3 p, vec2 h );\nfloat\tsdBox( vec3 p, vec3 b );\nfloat\tdistanceToL;\nvoid\trotate(inout vec2 v, float angle);\nfloat\tsdTorus( vec3 p, vec2 t );\nvec2\tmarch(vec3 pos, vec3 dir);\nvec3\tcamera(vec2 uv);\nvec3\tblackbody(float Temp);\nfloat\tscene(vec3 p);\n\nfloat\taa;\nmat2\tma;\n\nvec3\tlight_pos;\nvec3\th;\nfloat\tt; // time\n\nfloat\tii,m;\n\nvoid mainImage(out vec4 o, in vec2 f )\n{\n    h *= 0.;\n    o.xyz *= 0.;\n    t = iTime*.5;\n    vec2 R = iResolution.xy,\n          uv  = vec2(f-R/2.) / R.y;\n\tvec3\tdir = camera(uv);\n    vec3\tpos = vec3(.0, .0, 1.0);\n    vec2\tinter = (march(pos, dir));\n    if (inter.y < 20.)\n        o.xyz += vec3( abs(sin(t*1.+ii*.1+m+1.04)), abs(sin(t*1.+ii*.1+m+2.09)), abs(sin(t*1.+ii*.1+m+3.14)))*(1.-inter.x*.05);\n\n    o.xyz += h;\n}\n\nfloat\tscene(vec3 p)\n{\n    distanceToL = 1e3;\n    float r2,k=1.;\n    ii=0.;\n    m = r2 = 1e5;\n    aa = t*.025;\n    p.z+=6.;\n    rotate(p.zx, t+1.57+0.*iTime);\n    rotate(p.zy, t+1.57+0.*iTime);\n\n    for(float\ti = -1.; i < I; ++i)\n    {\n        ++ii;\n\t\t//r2 = min(r2, sdTorus(p, vec2(.521,.12) )); // torus based variant, comment 2 next lines if using \n\t\tr2= min(r2, sdHexPrism(p, vec2(.3,.3)) );\n\t\tdistanceToL = sdHexPrism(p, vec2(.3, .0))*32.;\n\t\taa=aa+.5/(i+2.);\n        if (mod(i, 3.) == 0.)\n        {\n            ma = mat2(cos(aa+1.*ii*.25),sin(aa+1.*ii*.25), -sin(aa+1.*ii*.25), cos(aa+1.*ii*.25) );\n\t        p.xy*=ma;\n\t        p.xy = abs(p.xy)-.125;\n\t\t\tp.z -= .2;\n        }\n        else if (mod(i, 3.) == 1.)\n        {\n            ma = mat2(cos(aa*3.+1.04+1.*ii*.1),sin(aa*3.+1.04+1.*ii*.1), -sin(aa*3.+1.04+1.*ii*.1), cos(aa*3.+1.04+1.*ii*.1) );\n\t        p.yz*=ma;\n\t        p.zy = abs(p.zy)-.125;\n            p.x -= .2;\n        }\n        else if (mod(i, 3.) == 2.)\n        {\n            ma = mat2(cos(aa*2.+2.08+1.*ii*.5),sin(aa*2.+2.08+1.*ii*.5), -sin(aa*2.+2.08+1.*ii*.5), cos(aa*2.+2.08+1.*ii*.5) );\n            p.zx*=ma;\n\t        p.xz = abs(p.xz)-.125;\n\t       \tp.y -= .2;\n        }\n\tm = min(m, log(sdBox(p,vec3(.0612510))/(k*k) ) );\n    k *= 1.125;\n    }\n    return r2;\n}\n\nvec3 evaluateLight(in vec3 pos)\n{\n    vec3\tlightCol;\n    lightCol = vec3(1.,.7,.2);\n    return (\n        \tlightCol * 1.0/(distanceToL*distanceToL)\n        \t)*(.25);\n}\n\nvec2\tmarch(vec3 pos, vec3 dir)\n{\n    vec2\tdist = vec2(0.0);\n    vec3\tp = vec3(0.0);\n    vec2\ts = vec2(0.0);\n\n    for (int i = 0; i < I_MAX; ++i)\n    {\n    \tp = pos + dir * dist.y;\n        dist.x = scene(p);\n        dist.y += dist.x;\n        h += evaluateLight(p);\n        if (dist.x < E || dist.y > 20.)\n        {\n           break;\n        }\n        s.x++;\n    }\n    s.y = dist.y;\n    return (s);\n}\n\n// Utilities\n\nfloat\tmylength(vec2 p)\n{\n    float\tret = 0.;\n \tp = p*p*p*p;\n    ret = pow(p.x+p.y, 1./4.);\n    \n    return (ret);\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n\tvec2 q = vec2(length(p.zy)-t.x,p.x);\n\n    return length(q)-t.y;\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max((q.x*0.866025+q.y*0.5),q.y)-h.x);\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\n\n\nvec3\tcamera(vec2 uv)\n{\n    float   fov = 1.;\n\tvec3    forw  = vec3(0.0, 0.0, -1.0);\n\tvec3    right = vec3(1.0, 0.0, 0.0);\n\tvec3    up    = vec3(0.0, 1.0, 0.0);\n\n    return (normalize((uv.x) * right + (uv.y) * up + fov * forw));\n}\n\nvoid rotate(inout vec2 v, float angle)\n{\n\tv = vec2(cos(angle)*v.x+sin(angle)*v.y,-sin(angle)*v.x+cos(angle)*v.y);\n}\n","name":"Image","description":"","type":"image"}]}