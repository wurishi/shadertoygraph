{"ver":"0.1","info":{"id":"cdtGDs","date":"1678056133","viewed":139,"name":"Room Acoustics (FDTD)","username":"pajunen","description":"Implementation of https://www.youtube.com/watch?v=xgJJwmrX568. You can draw walls.","likes":10,"published":1,"flags":32,"usePreview":0,"tags":["waves","wavefunction","fdtd"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nvec3 heatmap(float x) {\n    return vec3(sin(x * PI / 2.), x*x, mix(sin(x * 2. * PI), x , .6));\n}\n\nfloat sigmoid(float x, float k) {\n    return 1. - (1. / (1. + exp(k * x)));\n}\n\nvec3 getColor(float value) {\n    float contrast = 10.0;\n    float clamped  = sigmoid(value, contrast);\n    return heatmap(clamped);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    ivec2 pos = ivec2(fragCoord);\n    float u0 = texelFetch(iChannel0, pos, 0).x;\n    float wall = texelFetch(iChannel0, pos, 0).z;\n    \n    if (wall > 0.0) {\n        fragColor = vec4(1.);\n    } else {\n        fragColor = vec4(getColor(u0), 1.);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI 3.14159265359\n\nfloat wall(ivec2 pos) {\n    if (pos.x < 0 || int(iResolution.x) <= pos.x || pos.y < 0 || int(iResolution.y) <= pos.y) return 1.0;\n    return texelFetch(iChannel1, pos, 0).x;\n}\n\nfloat u2(ivec2 pos) {\n    return texelFetch(iChannel0, pos, 0).y;\n}\n\nfloat u1(ivec2 pos) {\n    return texelFetch(iChannel0, pos, 0).x;\n}\n\nbool isEdge(ivec2 pos) {\n    return (\n        pos.x == 0 ||\n        pos.y == 0 ||\n        pos.x == int(iResolution.x) - 1 ||\n        pos.y == int(iResolution.y) - 1\n    );\n}\n\nfloat neighborCount(ivec2 pos) {\n    if (wall(pos) == 0.0) return 4.0;\n    \n    return 4.0 - (\n        wall(pos - ivec2(1,0)) +\n        wall(pos + ivec2(1,0)) +\n        wall(pos - ivec2(0,1)) +\n        wall(pos + ivec2(0,1))\n    );\n}\n\n#define R (iResolution.y / 4.)\n#define R2 5.0\n#define V .2\n#define f 20.0\n#define f2 10.0\n\nfloat u0(ivec2 pos) {\n    float tMod = mod(f * iTime, 2. * PI * f2);\n    \n    vec2 srcPos = iResolution.xy / 2. + R * vec2(cos(V * iTime), sin(V * iTime));\n    \n    vec2 relativePos = (vec2(pos) - srcPos);\n    float d2 = dot(relativePos, relativePos);\n    \n    vec2 relativePosMouse = (vec2(pos) - iMouse.xy);\n    float d2Mouse = dot(relativePosMouse, relativePosMouse);\n    \n    if (tMod < 2. * PI && (d2 < R2*R2)) {\n        return 3.*sin(tMod)*sin(.5*tMod)*sin(.5*tMod);\n    }\n \n    if (wall(pos) > 0.0) return 0.0;\n\n    float K = neighborCount(pos);\n\n    float t0 = (2. - .5 * K) * u1(pos);\n    float t1 = u1(pos - ivec2(1,0));\n    float t2 = u1(pos + ivec2(1,0));\n    float t3 = u1(pos - ivec2(0,1));\n    float t4 = u1(pos + ivec2(0,1));\n    \n    return 0.999 *(t0 + 0.5 * (t1 + t2 + t3 + t4) - u2(pos));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    ivec2 pos = ivec2(fragCoord);\n    fragColor = vec4(u0(pos), u1(pos), wall(pos), 0.0);\n    //fragColor = vec4(wall(pos),0.0, 0.0, 0.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"bool isEdge(ivec2 pos) {\n    return (\n        pos.x == 0 ||\n        pos.y == 0 ||\n        pos.x == int(iResolution.x) - 1 ||\n        pos.y == int(iResolution.y) - 1\n    );\n}\n\nbool boxHit(ivec2 pos) {\n    return (100 < pos.x && pos.x < 200 && 100 < pos.y && pos.y < 200);\n}\n\nbool diskHit(vec2 pos) {\n    vec2 diskPos = vec2(iResolution.x / 2. + 0.33 * iResolution.x * sin(.5 * 800.0 / iResolution.x * iTime),iResolution.y - iResolution.y / 4.);\n    vec2 delta = pos - diskPos;\n    float R = iResolution.x / 8.;\n    return dot(delta, delta) < R*R;\n}\n\nbool nearMouse(vec2 pos) {\n    vec2 d = pos - iMouse.xy;\n    float d2 = dot(d, d);\n    return d2 < 10. * 10.;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    ivec2 pos = ivec2(fragCoord);\n    \n\n\n    fragColor = texelFetch(iChannel0, pos, 0);\n    if (nearMouse(vec2(pos))) {\n        fragColor.x = 1.;\n    }\n\n}\n\n    //if (isEdge(pos) || boxHit(pos) || diskHit(vec2(pos))) {\n    //    fragColor = vec4(1.0,0.0,0.0,0.0);\n    //} else {\n    //    fragColor = vec4(0.0,0.0,0.0,0.0);\n    //}","name":"Buffer B","description":"","type":"buffer"}]}