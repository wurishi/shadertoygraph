{"ver":"0.1","info":{"id":"4tjyRt","date":"1509749907","viewed":259,"name":"Weyl classic sum C2 gnoise","username":"MBR","description":"gradient noise variant","likes":6,"published":1,"flags":48,"usePreview":0,"tags":["gradientnoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// LICENSE: http://unlicense.org/\n\n// NOTE: This requires 32-bit integer support\n\n// This is part test bed (rotation vector part to work on some\n// outstanding defects in my constants) and part example.\n// 1) intial hash of the four corners needs: 2 int mul, 2 int adds, 4 xors\n// 2) integer scalar per corner: 4 more int mul to finalize (1) all four\n// 3) as many of (2) as we have good MLCG constants use as finalizer\n// 4) as many scalars as needed by using the same MLCG constant to form\n//    a standard sequence.\n\nconst float PI = 3.1415927410125732421875;\n\n// Set of independent Weyl constants (WIP)\nconst ivec2 weyl = ivec2(0x6a09e667, //0x3504f333,\n                         0x703e132b);\n\n// MLCG constants from L'Ecuyer (table has three so fourth from LCG)\nconst ivec4 mlcg = ivec4(741103597,1597334677,747796405,2891336453);\n\nvec4 sum_c2_0(vec4 t) { t = 1.0-t; return t*t*t; }\n\n\n//***************************************************************\n//** Weyl sequence based white noise generation helper functions\n//***************************************************************\n\n// Given uniform grid cell coord 'c' return the\n// XOR of the two Weyl sequences as signed integers\nivec4 weyl_grid(ivec2 c)\n{\n  ivec2 c0 = weyl*c;\n  ivec2 c1 = weyl+c0;\n    \n  // XOR combine: (c00, c10, c01, c11)\n  return ivec4(c0.x^c0.y, c1.x^c0.y, c0.x^c1.y, c1.x^c1.y);\n}\n\nivec4 weyl_grid_i32(ivec2 c) { return mlcg.x*weyl_grid(c); }\n\n#define S2F_V (1.0/2147483648.0)\n#define S2F(X) S2F_V*vec4(X)\n\nvec4 weyl_grid_pm1(vec2 c) { return S2F(weyl_grid_i32(ivec2(c))); }\n\n\n#if 1\nvoid weyl_grid_pm1(vec2 c, out vec4 h0, out vec4 h1)\n{\n   ivec4 h = weyl_grid(ivec2(c));\n   h0 = S2F(mlcg.x*h);\n   h1 = S2F(mlcg.y*h);\n}\n#else\n// sigh..temp hack\nvoid weyl_grid_pm1(vec2 c, out vec4 h0, out vec4 h1)\n{\n   ivec4 h = weyl_grid(ivec2(c));\n   \n   // adding this extra mix step has temp hack\n   h ^= (h >> 16);\n    \n   ivec4 i0 = mlcg.x*h;\n   ivec4 i1 = mlcg.y*h;\n    \n   h0 = S2F(i0);\n   h1 = S2F(i1);\n}\n#endif\n\n// gradient noise variant based on mod of:\n// briansharpe.wordpress.com/2012/03/09/modifications-to-classic-perlin-noise\n// * classic style noise vectors. here is using sin/cos of random angle,\n//   Sharpe uses normalized point on square.\n// * explict summation instead of lerp based\nfloat gnoise_0(vec2 p)\n{\n  vec2 c  = floor(p);                 // cell coordinate\n  vec4 a  = PI*weyl_grid_pm1(c);      // random angle per coord\n  vec4 vx = cos(a);                   // x of rand unit vect per coord\n  vec4 vy = sin(a);                   // y of rand unit vect per coord\n  vec4 d  = p.xyxy - vec4(c,c+1.0);   // vectors of offset per coord\n  vec4 r  = vx*d.xzxz+vy*d.yyww;      // dot of random vectors\n  vec4 d2 = d*d;                      // squared distances per component\n    \n  d2 = d2.xzxz + d2.yyww;             // complete squared distances   \n  r *= (64.0/27.0);                   // scale to range\n  \n  // sum up the contributations\n  return dot(sum_c2_0(min(vec4(1.0), d2)), r);\n}\n\n// generate one more scalar per coord and use that\n// as a rotation rate for the vector.\nfloat gnoise_1(vec2 p)\n{\n  vec2 c  = floor(p);\n  vec4 a,da;\n    \n  weyl_grid_pm1(c,a,da);\n    \n  a *= PI;\n  da = 2.0*PI*da*iTime;\n    \n  vec4 vx = cos(a+da);\n  vec4 vy = sin(a+da);\n  vec4 d  = p.xyxy - vec4(c,c+1.0);\n  vec4 r  = vx*d.xzxz+vy*d.yyww;\n  vec4 d2 = d*d;\n    \n  d2 = d2.xzxz + d2.yyww;   \n  r *= (64.0/27.0);\n  \n  // sum up the contributations\n  return dot(sum_c2_0(min(vec4(1.0), d2)), r);\n}\n\n\n\n//===============================================================\n// visualization stuff below here\n\n\n//======Start shared code for state\n#define pz_stateYOffset 0.0\n#define pz_stateBuf 0\n#define pz_stateSample(x) texture(iChannel0,x)\nvec2 pz_realBufferResolution;\nvec2 pz_originalBufferResolution;\n\nvoid pz_initializeState() {\n    pz_realBufferResolution     = iChannelResolution[pz_stateBuf].xy;\n    pz_originalBufferResolution = pz_stateSample(.5/pz_realBufferResolution).xy;\n}\n\nvec2 pz_nr2vec(float nr) {\n    return vec2(mod(nr, pz_originalBufferResolution.x)\n                      , pz_stateYOffset+floor(nr / pz_originalBufferResolution.x))+.5;\n}\n\nvec4 pz_readState(float nr) {\n    return pz_stateSample(pz_nr2vec(nr)/pz_realBufferResolution);\n}\n\nfloat pz_resetCount() { return pz_readState(1.).z;   }\nvec3 pz_position()    { return pz_readState(3.).xyz; }\n\nvec2 pz_initializeState(vec2 fragCoord) {\n    pz_initializeState();\n    \n    vec3 position = pz_position();\n    fragCoord -= 0.5*iResolution.xy;\n    fragCoord *= position.z;\n    fragCoord += (0.5 + position.xy) * iResolution.xy ;\n    return fragCoord;\n}\n//======End shared code for state\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  int   t = int(fragCoord.x) - int(0.5*iResolution.x);\n  fragCoord = pz_initializeState(fragCoord);\n    \n  vec2  p = fragCoord.xy ;\n  float r;\n  \n  if (t < 0)\n    r = 0.5*(gnoise_0(.100*(p-.5*vec2(iResolution)))+1.0);\n  else if (t > 1)\n    r = 0.5*(gnoise_1(.100*(p-.5*vec2(iResolution)))+1.0);\n    \n  vec4  c = vec4(vec3(r),1.0);\n    \n  fragColor = c;\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// copy of:  https://www.shadertoy.com/view/XdG3Dh\n\n//======Start shared code for state\n#define pz_stateYOffset 0.0\n#define pz_stateBuf 0\n#define pz_stateSample(x) texture(iChannel0,x)\nvec2 pz_realBufferResolution;\nvec2 pz_originalBufferResolution;\n\nvoid pz_initializeState() {\n    pz_realBufferResolution     = iChannelResolution[pz_stateBuf].xy;\n    pz_originalBufferResolution = pz_stateSample(.5/pz_realBufferResolution).xy;\n}\n\nvec2 pz_nr2vec(float nr) {\n    return vec2(mod(nr, pz_originalBufferResolution.x)\n                      , pz_stateYOffset+floor(nr / pz_originalBufferResolution.x))+.5;\n}\n\nvec4 pz_readState(float nr) {\n    return pz_stateSample(pz_nr2vec(nr)/pz_realBufferResolution);\n}\n\nfloat pz_resetCount() {\n    return pz_readState(1.).z;\n}\n\nvec3 pz_position() {\n    return pz_readState(3.).xyz;\n}\n\nvec2 pz_initializeState(vec2 fragCoord) {\n    pz_initializeState();\n    \n    vec3 position = pz_position();\n    fragCoord -= 0.5*iResolution.xy;\n    fragCoord *= position.z;\n    fragCoord += (0.5 + position.xy) * iResolution.xy ;\n    return fragCoord;\n}\n//======End shared code for state\n\n//======Defines for state behaviour\n#define pz_resetOnMove 1\n#define pz_kinetic 0.95\n\nbool pz_checkCell(float nr, vec2 coord) {\n    return distance(pz_nr2vec(nr),coord)<=0.5;\n}\n\n// Keyboard constants definition\nconst float KEY_BSP   = 8.5/256.0;\nconst float KEY_SP    = 32.5/256.0;\nconst float KEY_LEFT  = 37.5/256.0;\nconst float KEY_UP    = 38.5/256.0;\nconst float KEY_RIGHT = 39.5/256.0;\nconst float KEY_DOWN  = 40.5/256.0;\nconst float KEY_A     = 65.5/256.0;\nconst float KEY_B     = 66.5/256.0;\nconst float KEY_C     = 67.5/256.0;\nconst float KEY_D     = 68.5/256.0;\nconst float KEY_E     = 69.5/256.0;\nconst float KEY_F     = 70.5/256.0;\nconst float KEY_G     = 71.5/256.0;\nconst float KEY_H     = 72.5/256.0;\nconst float KEY_I     = 73.5/256.0;\nconst float KEY_J     = 74.5/256.0;\nconst float KEY_K     = 75.5/256.0;\nconst float KEY_L     = 76.5/256.0;\nconst float KEY_M     = 77.5/256.0;\nconst float KEY_N     = 78.5/256.0;\nconst float KEY_O     = 79.5/256.0;\nconst float KEY_P     = 80.5/256.0;\nconst float KEY_Q     = 81.5/256.0;\nconst float KEY_R     = 82.5/256.0;\nconst float KEY_S     = 83.5/256.0;\nconst float KEY_T     = 84.5/256.0;\nconst float KEY_U     = 85.5/256.0;\nconst float KEY_V     = 86.5/256.0;\nconst float KEY_W     = 87.5/256.0;\nconst float KEY_X     = 88.5/256.0;\nconst float KEY_Y     = 89.5/256.0;\nconst float KEY_Z     = 90.5/256.0;\nconst float KEY_COMMA = 188.5/256.0;\nconst float KEY_PER   = 190.5/256.0;\nconst float KEY_ADD   = 107.5/256.0;\nconst float KEY_SUBS  = 109.5/256.0;\nconst float KEY_EQUAL = 187.5/256.0;\nconst float KEY_MINUS = 189.5/256.0;\n\nbool checkKey(float key)\n{\n\treturn texture(iChannel1, vec2(key, 0.25)).x > 0.5;\n}\n\nbool checkKey(float key1, float key2)\n{\n    return checkKey(key1) || checkKey(key2);\n}\n\nbool checkKey(float key1, float key2, float key3)\n{\n    return checkKey(key1) || checkKey(key2) || checkKey(key3);\n}\n\nvoid pz_mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    pz_initializeState();\n    fragColor = pz_stateSample(fragCoord/pz_realBufferResolution);\n    if (fragCoord.x < 1. \n     && fragCoord.y < 1.) {\n        //Lets store the initial buffersize at pos0 and use that for addressing\n        if (pz_originalBufferResolution.x == 0.0)\n            fragColor = vec4(pz_realBufferResolution,1.0,1.0);\n        \n    } else if (pz_checkCell(1.,fragCoord)) {\n        \n        // Use postion 1 to trigger screen size changes so we can clear other buffers on going fullscreen\n        if (distance(fragColor.xy,pz_realBufferResolution)>1.0 \n#if pz_resetOnMove            \n            || pz_readState(3.).w > 0.0\n#endif            \n           ) {\n            fragColor.xy = pz_realBufferResolution;\n            fragColor.z = 60.0;\n        } else {\n            if (fragColor.z > 0.0)\n                fragColor.z -= 1.0;\n        }\n        \n    } else if (pz_checkCell(2.,fragCoord)) {\n        // Store mouse delta if keydown\n        if (iMouse.w>0.5) {\n            if (fragColor.x>0.0) {\n                fragColor.zw = fragColor.xy - iMouse.xy;\n            } else {\n                fragColor.zw = vec2(0.0);\n            }\n            fragColor.xy = iMouse.xy;\n        } else {\n            \n            fragColor.xy = vec2(-1.,-1.);\n#ifdef pz_kinetic\n            fragColor.zw = length(fragColor.zw)>0.1?fragColor.zw*pz_kinetic:vec2(0.0,0.0);\n#else                             \n            fragColor.zw = vec2(0.0,0.0);\n#endif                             \n        }\n        \n    } else if (pz_checkCell(3.,fragCoord)) { \n        // Handle keyboard moves\n        vec2 delta = vec2( checkKey(KEY_LEFT ,KEY_A,KEY_Q)?-0.02:\n                           checkKey(KEY_RIGHT,KEY_D      )? 0.02:0.0\n                         , checkKey(KEY_DOWN ,KEY_S      )?-0.02:\n                           checkKey(KEY_UP   ,KEY_W,KEY_Z)? 0.02:0.0);\n        float factor = checkKey(KEY_SUBS, KEY_MINUS)?1.01:\n                       checkKey(KEY_ADD , KEY_EQUAL)?0.99:1.0;\n        if (fragColor.z<0.0000001)\n            fragColor.z = 1.0;\n        \n        //Update transform state\n        vec2 mouseDelta = pz_readState(2.).zw;\n        fragColor.z *= factor;\n        fragColor.xy += delta *  fragColor.z; //Add keyboard move\n        fragColor.xy += mouseDelta / iResolution.xy *  fragColor.z; //Add mouse delta\n        \n        //Store movement in w\n        fragColor.w = abs(factor-1.0)*3. + length(delta) + length(mouseDelta);\n                \n    } else\n        fragColor = vec4(0.,0.,0.,1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    pz_mainImage( fragColor, fragCoord );\n    \n    // Add multiple state handlers here\n}\n","name":"Buf A","description":"","type":"buffer"}]}