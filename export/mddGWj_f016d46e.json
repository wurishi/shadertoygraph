{"ver":"0.1","info":{"id":"mddGWj","date":"1677864307","viewed":55,"name":"Lodded noise test","username":"ianertson","description":"Even smoother noise using lod","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["noise","lod"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R (iResolution.xy)\n#define T (iTime)\n#define M_PI (3.14159265359)\n#define TAU (M_PI * 2.0)\n\n\nvec3 noise(in vec2 p, in float seed, in float lod) { \n    return textureLod(iChannel3, (p + (seed*10.0029281835))/256., lod).xyz;\n}\n\nvec3 noise(in vec2 p, in float seed, in float lod, in float freq, in float warp, const in int levels) {\n    float div = 0.0;\n    float amp = 1.0;\n    vec3 n = vec3(0.0);\n    for (int i = 0; i < levels; i++) {\n        n += amp * noise(p*freq, seed, lod); div += amp; amp /= 2.0; freq *= 2.0; lod /= 2.;\n        p += (vec2(n.x, n.y)*2.0-1.0)*warp;\n        seed += n.z*warp;\n    }\n    return n / div;\n}\n\nvec3 snoise(in vec2 p, in float seed, in float lod) {\n    vec2 id = floor(p); vec2 lv = fract(p); lv = lv*lv*(3.0-2.0*lv);\n    return mix(\n        mix(noise(id, seed, lod), noise(id + vec2(1, 0), seed, lod), lv.x),\n        mix(noise(id + vec2(0, 1), seed, lod), noise(id + vec2(1, 1), seed, lod), lv.x),\n     lv.y);\n}\n\nvec3 snoise(in vec2 p, in float seed, in float lod, in float freq, in float warp, const in int levels) {\n    float div = 0.0;\n    float amp = 1.0;\n    vec3 n = vec3(0.0);\n    for (int i = 0; i < levels; i++) {\n        n += amp * snoise(p*freq, seed, lod); div += amp; amp /= 2.0; freq *= 2.0; lod /= 2.;\n        p += (vec2(n.x, n.y)*2.0-1.0)*warp;\n        seed += n.z*warp;\n    }\n    return n / div;\n}\n\n\nvoid mainImage( out vec4 O, in vec2 fc )\n{\n    vec3 col = vec3(0.0);\n    vec2 uv = fc/R.xy;\n    \n    uv *= 10.;\n\n    col += snoise(uv + (vec2(cos(T*0.5), sin(T*0.5))*6.), 1.693998324+cos(T*4.), 2., 3.3, 0.6, 5);\n    \n    O = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}