{"ver":"0.1","info":{"id":"sdjGz3","date":"1618176073","viewed":118,"name":"Re-making a cornell box","username":"lindayukeyi","description":"I remade a cornell box using SDF and ray marching. \nPlus, I added DOF and AO\nPlus, I added indirect lighting.\nPlus, I added volume rendering. Ref: https://www.shadertoy.com/view/4sjfzw","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float invPi = 0.31830988618;\nvec3 sunDirection = normalize(vec3(0, 7.45, -1.0));\n\n// 3D Noise by IQ\nfloat Noise3D( in vec3 pos )\n{\n    vec3 p = floor(pos);\n    vec3 f = fract(pos);\n    f = f * f * (3.0 - 2.0 * f);\n    vec2 uv = (p.xy + vec2(37.0, 17.0) * p.z) + f.xy;\n    vec2 rg = textureLod( iChannel1, (uv + 0.5) / 256.0, 0.0).yx;\n    return -1.0 + 2.0 * mix( rg.x, rg.y, f.z );\n}\n\nfloat ComputeFBM( in vec3 pos )\n{\n    float amplitude = 0.25;\n    float sum = 0.0;\n    for(int i = 0; i < 3; i++)\n    {\n        sum += Noise3D(pos) * amplitude;\n        amplitude *= 0.2;\n        pos *= 4.0;\n    }\n    sum -= pos.y / 1200.0;\n    sum *= 8.0; // Probably need to tweak this if the raymarching steps/step size are changed\n    return clamp(sum, 0.0, 1.0);\n}\n\n// Henyey-Greenstein\nfloat Phase( in float g, in float theta )\n{\n    return 0.25 * invPi * (1.0 - g * g) / (1.0 + g * g - 2.0 * g * pow(theta, 1.5));\n}\n\nvec3 ShadeBackground( in vec2 uv )\n{\n    \n    return texture(iChannel0, uv).xyz;\n}\n\nvec4 RaymarchScene( in vec3 origin, in vec3 dir, in vec2 uv )\n{\n    // Volume properties\n    float scatteringCoeff = 0.5;\n    float t = 0.1;\n    float dt;\n    vec3 pos;\n    vec3 accumColor = vec3(0.0);\n    float transmittance = 1.0;\n    \n    for(int i = 0; i < 50; i++)\n    {\n        pos = origin + t * dir + vec3(0.0, 0.0, -iTime);\n        \n        float density = ComputeFBM(pos);\n        transmittance *= exp(-scatteringCoeff * density * dt);\n        \n        // Evaluate incident lighting here\n        vec3 incidentLight = vec3(0.0);\n        \n        // Compute samples toward light source\n        const float numSamples = 1.0;\n        float stepSize = 0.1;\n        vec3 light = vec3(0.6, 0.55, 0.4) * 50.0;\n        float accumDensity = 0.0;\n        for(float j = 1.0; j <= numSamples; j += 1.0)\n        {\n            accumDensity += ComputeFBM(pos + stepSize * j * sunDirection) * stepSize;\n        }\n        accumDensity /= numSamples;\n        incidentLight = light * exp(-scatteringCoeff * accumDensity * stepSize);\n        \n        accumColor += scatteringCoeff * density * Phase(scatteringCoeff, abs(dot(dir, sunDirection))) * incidentLight * transmittance * dt;\n        \n        if (transmittance <= 0.01)\n        {\n            break;\n        }\n        \n        dt = max(0.04, 0.02 * t);\n        t += dt;\n    }\n    \n    // Shade the sky\n    vec3 backgroundColor = ShadeBackground(uv);\n    \n    return vec4(transmittance * backgroundColor + accumColor, 1.0);\n}\n\nvec3 CastRay( in vec2 sp, in vec3 origin )\n{\n    // Compute local camera vectors\n    vec3 refPoint = origin + vec3(0.0, 0.0, -1.0);\n    vec3 camLook = normalize(refPoint - origin);\n    vec3 camRight = normalize(cross(camLook, vec3(0, 1, 0)));\n    vec3 camUp = normalize(cross(camRight, camLook));\n    \n    vec3 rayPoint = refPoint + sp.x * camRight + sp.y * camUp;\n    return normalize(rayPoint - origin);\n}\n\nvec3 ToneMap( in vec3 color )\n{\n    return 1.0 - exp(-2.0 * color);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 screenPoint = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n        vec2 uv = fragCoord/iResolution.xy;\n\n    // Compute ray direction\n    vec3 rayOrigin = vec3(0.0, 0.4,-5);\n    vec3 rayDirection = CastRay(screenPoint, rayOrigin);\n    \n    // Raymarch the fbm\n    vec4 finalColor = RaymarchScene(rayOrigin, rayDirection, uv);\n    \n    fragColor = vec4(ToneMap(finalColor.xyz), 1.0);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// This pass is used for generate indirect lighting\n\nconst int RAY_STEPS = 256;\nconst float HALF_PI = 3.14159 * 0.5;\nconst vec3 LIGHT_POS = vec3(0, 7.45, -1);\nconst float FOCAL_LENGTH = 30.0;\nconst float FOCAL_RANGE = 30.0;\nconst float AO_DIST = 0.15;\nconst float FIVETAP_K = 2.0;\nconst int sampleN = 100;\n\n\n//Rotates the camera around the Y-axis\nvec3 rotateY(vec3 p, float a) {\n    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);\n}\n\n//Primitive SDFs\n#define BACK_WALL_SDF plane(pos, vec4(0.0, 0.0, -1.0, 6.0))\n#define LEFT_WALL_SDF plane(pos, vec4(-1.0, 0.0, 0.0, 5.0))\n#define RIGHT_WALL_SDF plane(pos, vec4(1.0, 0.0, 0.0, 5.0))\n#define CEILING_SDF plane(pos, vec4(0.0, -1.0, 0.0, 7.5))\n#define FLOOR_SDF plane(pos, vec4(0.0, 1.0, 0.0, 2.0))\n#define TALL_BOX_SDF box(rotateY(pos + vec3(1.5, 0.0, -2.0), -65.0 * 3.14159 / 180.0), vec3(1.0, 2.0, 1.2))\n#define SMALL_BOX_SDF box(rotateY(pos + vec3(-1.5, 1.0, 0.0), 65.0 * 3.14159 / 180.0), vec3(1.0, 1.0, 1.0))\n\n//Primtives IDs\n#define BACK_WALL 0\n#define LEFT_WALL 1\n#define RIGHT_WALL 2\n#define CEILING 3\n#define FLOOR 4\n#define TALL_BOX 5\n#define SMALL_BOX 6\n\nstruct Intersection\n{\n    float t;\n    vec3 color;\n    vec3 p;\n    int object;\n};\n\n\nfloat sphere(vec3 p, float r, vec3 c)\n{\n    return distance(p, c) - r;\n}\n\n// Box with side lengths b\nfloat box(vec3 p, vec3 b)\n{\n  return length(max(abs(p) - b, 0.0));\n}\n\nfloat plane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\n\n// Random number generated is found on \n// https://www.shadertoy.com/view/4tl3z4\nfloat hash1(inout float seed) {\n    return fract(sin(seed += 0.1)*43758.5453123);\n}\n\nvec2 hash2(inout float seed) {\n    return fract(sin(vec2(seed+=0.1,seed+=0.1))*vec2(43758.5453123,22578.1459123));\n}\n\nvec3 hash3(inout float seed) {\n    return fract(sin(vec3(seed+=0.1,seed+=0.1,seed+=0.1))*vec3(43758.5453123,22578.1459123,19642.3490423));\n}\n\nvec3 cosWeightedRandomHemisphereDirection( const vec3 n, inout float seed ) {\n  \tvec2 r = hash2(seed);\n    \n\tvec3  uu = normalize( cross( n, vec3(0.0,1.0,1.0) ) );\n\tvec3  vv = cross( uu, n );\n\t\n\tfloat ra = sqrt(r.y);\n\tfloat rx = ra*cos(6.2831*r.x); \n\tfloat ry = ra*sin(6.2831*r.x);\n\tfloat rz = sqrt( 1.0-r.y );\n\tvec3  rr = vec3( rx*uu + ry*vv + rz*n );\n    \n    return normalize( rr );\n}\n\nfloat seed;\nfloat rnd() { return fract(sin(seed++)*43758.5453123); }\n\n\nvoid raycast(vec2 uv, out vec3 dir, out vec3 eye, out vec3 ref) {\n    //eye = rotateY(vec3(0.0, 0.0, 15.0), sin(iTime * 0.1) * 3.14159 * 0.5);\n    eye = vec3(0, 4.5, -35);\n    ref = vec3(0, 2.8, 0);\n    \n    \n    float len = tan(19.5 / 360.0 * 3.1415926) * length(eye - ref);\n    vec3 H = normalize(cross(vec3(0.0, 1.0, 0.0), ref - eye));\n    vec3 V = normalize(cross(H, eye - ref));\n    V *= len;\n    H *= len * iResolution.x / iResolution.y;\n    vec3 p = ref + uv.x * H + uv.y * V;\n    dir = normalize(p - eye);\n}\n\nvoid sceneMap3D(vec3 pos, out float t, out int obj) {\n    t = BACK_WALL_SDF;\n    obj = BACK_WALL;\n    \n    float t2;\n    if((t2 = LEFT_WALL_SDF) < t) {\n        t = t2;\n        obj = LEFT_WALL;\n    }\n    if((t2 = RIGHT_WALL_SDF) < t) {\n        t = t2;\n        obj = RIGHT_WALL;\n    }\n    if((t2 = CEILING_SDF) < t) {\n        t = t2;\n        obj = CEILING;\n    }\n    if((t2 = FLOOR_SDF) < t) {\n        t = t2;\n        obj = FLOOR;\n    } \n    if ((t2 = TALL_BOX_SDF) < t) {\n    \tt = t2;\n        obj = TALL_BOX;\n    }\n    if ((t2 = SMALL_BOX_SDF) < t) {\n    \tt = t2;\n        obj = SMALL_BOX;\n    }\n}\n\n\nfloat sceneMap3D(vec3 pos) {\n    float t = BACK_WALL_SDF;\n    \n    float t2;\n    if((t2 = LEFT_WALL_SDF) < t) {\n        t = t2;\n    }\n    if((t2 = RIGHT_WALL_SDF) < t) {\n        t = t2;\n    }\n    if((t2 = CEILING_SDF) < t) {\n        t = t2;\n    }\n    if((t2 = FLOOR_SDF) < t) {\n        t = t2;\n    }  \n    if ((t2 = TALL_BOX_SDF) < t) {\n    \tt = t2;\n    }\n    if ((t2 = SMALL_BOX_SDF) < t) {\n    \tt = t2;\n    }\n    \n    return t;\n}\n\nvoid march(vec3 origin, vec3 dir, out float t, out int hitObj)\n{\n    t = 0.001;\n    for(int i = 0; i < RAY_STEPS; ++i)\n    {\n        vec3 pos = origin + t * dir;\n    \tfloat m;\n        sceneMap3D(pos, m, hitObj);\n        if(m < 0.01)\n        {\n            return;\n        }\n        t += m;\n    }\n    t = -1.0;\n    hitObj = -1;\n}\n\nvec3 computeNormal(vec3 pos)\n{\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize( vec3( sceneMap3D(pos + epsilon.yxx) - sceneMap3D(pos - epsilon.yxx),\n                            sceneMap3D(pos + epsilon.xyx) - sceneMap3D(pos - epsilon.xyx),\n                            sceneMap3D(pos + epsilon.xxy) - sceneMap3D(pos - epsilon.xxy)));\n}\n\n// This is where you give your objects in the scene materials\nvec3 computeMaterial(int hitObj, vec3 p, vec3 n, vec3 lightVec) {\n    float lambert = dot(n, lightVec) + 0.2;\n    \n    switch(hitObj) {\n        case BACK_WALL:\n        case CEILING:\n        case FLOOR:\n        case TALL_BOX:\n        case SMALL_BOX:\n        return vec3(0.85, 0.81, 0.78) * lambert;\n        break;\n        case RIGHT_WALL:\n        return vec3(0.63, 0.065, 0.05) * lambert;\n        break;\n        case LEFT_WALL:\n        return vec3(0.065, 0.63, 0.05) * lambert;\n        break;\n        case -1:\n        return vec3(0., 0., 0.);\n        break;\n    }\n    return vec3(0., 0., 0.);\n}\n\nfloat fiveTapAO(vec3 p, vec3 n, float k) {\n    float aoSum = 0.0;\n    for(float i = 0.0; i < 5.0; ++i) {\n        float coeff = 1.0 / pow(2.0, i);\n        aoSum += coeff * (i * AO_DIST - sceneMap3D(p + n * i * AO_DIST));\n    }\n    return 1.0 - k * aoSum;\n}\n\nIntersection sdf3D(vec3 dir, vec3 eye)\n{\n    float t;\n    int hitObj;\n    march(eye, dir, t, hitObj);\n\n    vec3 isect = eye + t * dir;\n    vec3 nor = computeNormal(isect);\n    vec3 lightDir = normalize(LIGHT_POS - isect);\n\n    \n    vec3 sdfColor = computeMaterial(hitObj, isect, nor, normalize(LIGHT_POS - isect));\n    float ao = fiveTapAO(isect, nor, FIVETAP_K);\n    vec3 finalColor = sdfColor;\n        \n    return Intersection(t, finalColor, isect, hitObj);\n}\n\n\nIntersection firstBounce(vec3 dir, vec3 eye, vec2 p) {\n    float t;\n    int hitObj;\n    march(eye, dir, t, hitObj);\n    \n    vec3 isect = eye + t * dir;\n    vec3 nor = computeNormal(isect);\n    vec3 indirectColor = vec3(0.0, 0.0, 0.0);\n    \n    vec3 boundDir;\n    for(int i = 0; i < sampleN; i++) {\n        float seed = rnd();\n        boundDir = cosWeightedRandomHemisphereDirection(nor,seed);\n        Intersection secondBounce = sdf3D(boundDir, isect + 0.01 * nor);\n        indirectColor += secondBounce.color;\n        \n    }\n    indirectColor /= float(sampleN);\n    return Intersection(t, indirectColor, isect, hitObj);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // [-1, 1]\n    vec2 uv2 = 2.0 * uv - vec2(1.0);\n        vec3 dir, eye, ref;\n    vec2 p = -1.0 + 2.0 * (fragCoord.xy) / iResolution.xy;\n    p.x *= iResolution.x/iResolution.y;\n    raycast(uv2, dir, eye, ref);\n  \tIntersection isect = firstBounce(dir, eye, p);\n    float distAlongCamZ = abs(dot(normalize(ref - eye), (isect.p - eye)));\n    float dofZ = min(1.0, abs(distAlongCamZ - FOCAL_LENGTH * abs(cos(iTime))) / FOCAL_RANGE);\n    dofZ = pow(dofZ, 0.5);   \n    //if(dofZ != 1.0) dofZ = 0.0;\n    fragColor = vec4(isect.color, dofZ);\n    //fragColor = vec4(dofZ, 0.0, 0.0, 0.0);\n}\n\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// This pass is used for blurring indirect lighting from pass A\n\n// from https://www.shadertoy.com/view/XdfGDH\nfloat normpdf(in float x, in float sigma)\n{\n\treturn 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // from https://www.shadertoy.com/view/XdfGDH\n    const int mSize = 11;\n    const int kSize = (mSize-1)/2;\n    float kernel[mSize];\n    vec3 final_color = vec3(0.0);\n\n    //create the 1-D kernel\n    float sigma = 20.0;\n    float Z = 0.0;\n    for (int j = 0; j <= kSize; ++j) {\n        kernel[kSize+j] = kernel[kSize-j] = normpdf(float(j), sigma);\n    }\n\n    //get the normalization factor (as the gaussian has been clamped)\n    for (int j = 0; j < mSize; ++j) {\n        Z += kernel[j];\n    }\n    \n    //read out the texels\n    for (int i=-kSize; i <= kSize; ++i) {\n        for (int j=-kSize; j <= kSize; ++j) {\n            final_color += kernel[kSize+j]*kernel[kSize+i]*texture(iChannel0, (fragCoord.xy+vec2(float(i),float(j))) / iResolution.xy).rgb;\n\n        }\n    }\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 unblurredColor = texture(iChannel0, uv);\n\n    fragColor = vec4(mix(unblurredColor.rgb, final_color/(Z*Z), unblurredColor.a), 1.0);\n    \n    //fragColor = vec4(final_color/(Z*Z), 1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"const int RAY_STEPS = 256;\nconst float HALF_PI = 3.14159 * 0.5;\nconst vec3 LIGHT_POS = vec3(0, 7.45, -1);\nconst float FOCAL_LENGTH = 30.0;\nconst float FOCAL_RANGE = 30.0;\nconst float AO_DIST = 0.15;\nconst float FIVETAP_K = 2.0;\nconst int sampleN = 100;\n\n\n//Rotates the camera around the Y-axis\nvec3 rotateY(vec3 p, float a) {\n    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);\n}\n\n//Primitive SDFs\n#define BACK_WALL_SDF plane(pos, vec4(0.0, 0.0, -1.0, 6.0))\n#define LEFT_WALL_SDF plane(pos, vec4(-1.0, 0.0, 0.0, 5.0))\n#define RIGHT_WALL_SDF plane(pos, vec4(1.0, 0.0, 0.0, 5.0))\n#define CEILING_SDF plane(pos, vec4(0.0, -1.0, 0.0, 7.5))\n#define FLOOR_SDF plane(pos, vec4(0.0, 1.0, 0.0, 2.0))\n#define TALL_BOX_SDF box(rotateY(pos + vec3(1.5, 0.0, -2.0), -65.0 * 3.14159 / 180.0), vec3(1.0, 2.0, 1.2))\n#define SMALL_BOX_SDF box(rotateY(pos + vec3(-1.5, 1.0, 0.0), 65.0 * 3.14159 / 180.0), vec3(1.0, 1.0, 1.0))\n\n//Primtives IDs\n#define BACK_WALL 0\n#define LEFT_WALL 1\n#define RIGHT_WALL 2\n#define CEILING 3\n#define FLOOR 4\n#define TALL_BOX 5\n#define SMALL_BOX 6\n\nstruct Intersection\n{\n    float t;\n    vec3 color;\n    vec3 p;\n    int object;\n};\n\n\nfloat sphere(vec3 p, float r, vec3 c)\n{\n    return distance(p, c) - r;\n}\n\n// Box with side lengths b\nfloat box(vec3 p, vec3 b)\n{\n  return length(max(abs(p) - b, 0.0));\n}\n\nfloat plane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\n\nvoid raycast(vec2 uv, out vec3 dir, out vec3 eye, out vec3 ref) {\n    //eye = rotateY(vec3(0.0, 0.0, 15.0), sin(iTime * 0.1) * 3.14159 * 0.5);\n    eye = vec3(0, 4.5, -35);\n    ref = vec3(0, 2.8, 0);\n    \n    \n    float len = tan(19.5 / 360.0 * 3.1415926) * length(eye - ref);\n    vec3 H = normalize(cross(vec3(0.0, 1.0, 0.0), ref - eye));\n    vec3 V = normalize(cross(H, eye - ref));\n    V *= len;\n    H *= len * iResolution.x / iResolution.y;\n    vec3 p = ref + uv.x * H + uv.y * V;\n    dir = normalize(p - eye);\n}\n\nvoid sceneMap3D(vec3 pos, out float t, out int obj) {\n    t = BACK_WALL_SDF;\n    obj = BACK_WALL;\n    \n    float t2;\n    if((t2 = LEFT_WALL_SDF) < t) {\n        t = t2;\n        obj = LEFT_WALL;\n    }\n    if((t2 = RIGHT_WALL_SDF) < t) {\n        t = t2;\n        obj = RIGHT_WALL;\n    }\n    if((t2 = CEILING_SDF) < t) {\n        t = t2;\n        obj = CEILING;\n    }\n    if((t2 = FLOOR_SDF) < t) {\n        t = t2;\n        obj = FLOOR;\n    } \n    if ((t2 = TALL_BOX_SDF) < t) {\n    \tt = t2;\n        obj = TALL_BOX;\n    }\n    if ((t2 = SMALL_BOX_SDF) < t) {\n    \tt = t2;\n        obj = SMALL_BOX;\n    }\n}\n\n\nfloat sceneMap3D(vec3 pos) {\n    float t = BACK_WALL_SDF;\n    \n    float t2;\n    if((t2 = LEFT_WALL_SDF) < t) {\n        t = t2;\n    }\n    if((t2 = RIGHT_WALL_SDF) < t) {\n        t = t2;\n    }\n    if((t2 = CEILING_SDF) < t) {\n        t = t2;\n    }\n    if((t2 = FLOOR_SDF) < t) {\n        t = t2;\n    }  \n    if ((t2 = TALL_BOX_SDF) < t) {\n    \tt = t2;\n    }\n    if ((t2 = SMALL_BOX_SDF) < t) {\n    \tt = t2;\n    }\n    \n    return t;\n}\n\nvoid march(vec3 origin, vec3 dir, out float t, out int hitObj)\n{\n    t = 0.001;\n    for(int i = 0; i < RAY_STEPS; ++i)\n    {\n        vec3 pos = origin + t * dir;\n    \tfloat m;\n        sceneMap3D(pos, m, hitObj);\n        if(m < 0.01)\n        {\n            return;\n        }\n        t += m;\n    }\n    t = -1.0;\n    hitObj = -1;\n}\n\nvec3 computeNormal(vec3 pos)\n{\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize( vec3( sceneMap3D(pos + epsilon.yxx) - sceneMap3D(pos - epsilon.yxx),\n                            sceneMap3D(pos + epsilon.xyx) - sceneMap3D(pos - epsilon.xyx),\n                            sceneMap3D(pos + epsilon.xxy) - sceneMap3D(pos - epsilon.xxy)));\n}\n\n// This is where you give your objects in the scene materials\nvec3 computeMaterial(int hitObj, vec3 p, vec3 n, vec3 lightVec) {\n    float lambert = dot(n, lightVec) + 0.2;\n    \n    switch(hitObj) {\n        case BACK_WALL:\n        case CEILING:\n        case FLOOR:\n        case TALL_BOX:\n        case SMALL_BOX:\n        return vec3(0.85, 0.81, 0.78) * lambert;\n        break;\n        case RIGHT_WALL:\n        return vec3(0.63, 0.065, 0.05) * lambert;\n        break;\n        case LEFT_WALL:\n        return vec3(0.065, 0.63, 0.05) * lambert;\n        break;\n        case -1:\n        return vec3(0., 0., 0.);\n        break;\n    }\n    return vec3(0., 0., 0.);\n}\n\nfloat fiveTapAO(vec3 p, vec3 n, float k) {\n    float aoSum = 0.0;\n    for(float i = 0.0; i < 5.0; ++i) {\n        float coeff = 1.0 / pow(2.0, i);\n        aoSum += coeff * (i * AO_DIST - sceneMap3D(p + n * i * AO_DIST));\n    }\n    return 1.0 - k * aoSum;\n}\n\nIntersection sdf3D(vec3 dir, vec3 eye)\n{\n    float t;\n    int hitObj;\n    march(eye, dir, t, hitObj);\n\n    vec3 isect = eye + t * dir;\n    vec3 nor = computeNormal(isect);\n    vec3 lightDir = normalize(LIGHT_POS - isect);\n\n    \n    vec3 sdfColor = computeMaterial(hitObj, isect, nor, normalize(LIGHT_POS - isect));\n    float ao = fiveTapAO(isect, nor, FIVETAP_K);\n    vec3 finalColor = sdfColor * ao;\n        \n    return Intersection(t, finalColor, isect, hitObj);\n}\n\nvec3 ToneMap( in vec3 color )\n{\n    return 1.0 - exp(-2.0 * color);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // [-1, 1]\n    vec2 uv2 = 2.0 * uv - vec2(1.0);\n        vec3 dir, eye, ref;\n    vec2 p = -1.0 + 2.0 * (fragCoord.xy) / iResolution.xy;\n    p.x *= iResolution.x/iResolution.y;\n    raycast(uv2, dir, eye, ref);\n  \tIntersection isect = sdf3D(dir, eye);\n    vec4 indirectColor = texture(iChannel0, (fragCoord.xy / iResolution.xy));\n \n     // Indirect lighting is diminishing so I add a parameter here\n    fragColor = vec4((indirectColor.rgb * 0.3) + isect.color, indirectColor.w);\n}\n\n","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"// This pass is used for blurring pass C\n\n// from https://www.shadertoy.com/view/XdfGDH\nfloat normpdf(in float x, in float sigma)\n{\n\treturn 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // from https://www.shadertoy.com/view/XdfGDH\n    const int mSize = 11;\n    const int kSize = (mSize-1)/2;\n    float kernel[mSize];\n    vec3 final_color = vec3(0.0);\n\n    //create the 1-D kernel\n    float sigma = 20.0;\n    float Z = 0.0;\n    for (int j = 0; j <= kSize; ++j) {\n        kernel[kSize+j] = kernel[kSize-j] = normpdf(float(j), sigma);\n    }\n\n    //get the normalization factor (as the gaussian has been clamped)\n    for (int j = 0; j < mSize; ++j) {\n        Z += kernel[j];\n    }\n    \n    //read out the texels\n    for (int i=-kSize; i <= kSize; ++i) {\n        for (int j=-kSize; j <= kSize; ++j) {\n            final_color += kernel[kSize+j]*kernel[kSize+i]*texture(iChannel0, (fragCoord.xy+vec2(float(i),float(j))) / iResolution.xy).rgb;\n\n        }\n    }\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 unblurredColor = texture(iChannel0, uv);\n\n    fragColor = vec4(mix(unblurredColor.rgb, final_color/(Z*Z), texture(iChannel1, uv).a), 1.0);\n    \n    //fragColor = vec4(final_color/(Z*Z), 1.0);\n}","name":"Buffer D","description":"","type":"buffer"}]}