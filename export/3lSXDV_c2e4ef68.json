{"ver":"0.1","info":{"id":"3lSXDV","date":"1567071126","viewed":527,"name":"Learning Raymarching 002","username":"raphaelameaume","description":"raymarching, learning","likes":3,"published":1,"flags":0,"usePreview":0,"tags":[],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdVerticalCapsule( vec3 p, float h, float r )\n{\n    p.y -= clamp( p.y, 0.0, h );\n    return length( p ) - r;\n}\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nfloat opSmoothSubstraction( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h); }\n\nfloat opSmoothIntersection( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) + k*h*(1.0-h); }\n\n// rotation matrix\nmat4 rotate( vec3 v, float angle )\n{\n    float s = sin( angle );\n    float c = cos( angle );\n    float ic = 1.0 - c;\n\n    return mat4( v.x*v.x*ic + c,     v.y*v.x*ic - s*v.z, v.z*v.x*ic + s*v.y, 0.0,\n                 v.x*v.y*ic + s*v.z, v.y*v.y*ic + c,     v.z*v.y*ic - s*v.x, 0.0,\n                 v.x*v.z*ic - s*v.y, v.y*v.z*ic + s*v.x, v.z*v.z*ic + c,     0.0,\n\t\t\t     0.0,                0.0,                0.0,                1.0 );\n}\n\n\n\nfloat map(in vec3 pos)\n{\t\n    vec3 spherePos = vec3(0.5 * cos(iTime), 0.5 * sin(iTime), 0.);\n    float sphere = sdSphere(pos - spherePos, 0.45);\n    \n    \n    float box = sdBox(pos, vec3(0.2, 0.2, 0.2));\n                      \n    //float d = opSmoothUnion(sphere, box, 0.3);\n    \n    vec3 caps = vec3(pos.x - 0.4, pos.y, pos.z - 0.4);\n    \n    float scale = 0.4 + (sin(iTime) + 1.) * 0.25;\n    scale = 1.0;\n    \n    caps = caps / scale;\n   \n    \n    \n    vec3 c = vec3(4., 1., 1.); \n    caps = mod(caps,c)-0.5*c;\n    //caps.y -= iTime;\n    \n    \n    float d = sdVerticalCapsule(caps, 1., 0.05) * scale;\n    \n    \n    vec3 boxes = vec3(pos.x - 0.4, pos.y - 0.4 + iTime, pos.z - 0.4);\n    boxes = mod(boxes,c)-0.5*c;\n    \n  \tfloat d2 = sdBox(boxes, vec3(0.1));\n    \n    d = opSmoothUnion(d, d2, 0.1);\n  \n    \n    \n    float ground = pos.y - (-0.25);\n                      \n    \n    \n    return min(d, d);\n}\n\nvec3 calcNormal(in vec3 pos)\n{\n    vec2 e = vec2(0.0001, 0.0);\n\treturn normalize(vec3(map(pos+e.xyy)-map(pos-e.xyy),\n                          map(pos+e.yxy)-map(pos-e.yxy),\n                          map(pos+e.yyx)-map(pos-e.yyx)));\n}\n\nfloat castRay(in vec3 ro, vec3 rd)\n{\n    float t = 0.0;\n    float limit = 30.0;\n    \n    for (int i=0; i <100; i++)\n    {\n    \tvec3 pos = ro + t*rd;\n        \n        float h = map(pos);\n        \n        if(h<0.001) break;\n        \n        \n        t += h;\n        \n        if (t > limit) break;\n    }\n    \n    if (t>limit) t = -1.0;\n    \n    return t;\n}\n\nmat3 setCamera(in vec3 ro, in vec3 ta, float cr)\n{\n    vec3 cw = normalize(ta - ro);\n    vec3 cp = vec3(sin(cr), cos(cr), 0.0);\n    vec3 cu = normalize(cross(cw, cp));\n    vec3 cv = cross(cu, cw);\n    \n    return mat3(cu, cv, cw);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 p = (2.0 * fragCoord-iResolution.xy)/iResolution.y;\n    \n    \n    \n    float an = 10.57 * iMouse.x / iResolution.x;\n    vec3 ta =  vec3(0.0, 0.0, 2.0 - iTime);\n    vec3 ro = ta + vec3(1.3 * cos(an), 0., 1.3 * sin(an));\n    \n    \n    mat3 ca = setCamera(ro, ta, 0.0);\n    \n    vec3 rd = ca * normalize(vec3(p, -2) - vec3(0., 0.0, 0.));\n\tvec3 col = vec3(0.6, 0.7, 0.9) - 0.5;\n    \n    vec3 fogColor = vec3(0.0, 0.0, 0.);\n    col = fogColor;\n    \n    float t = castRay(ro, rd);\n    \n    \n    if (t > 0.0)\n    {\n        vec3 pos = ro + t * rd;\n        vec3 nor = calcNormal(pos);\n        \n        vec3 mate = vec3(0.18);\n        \n        vec3 sunDir = normalize(vec3(0.8, 0.2, 0.2));\n        float sunDif = clamp(dot(nor, sunDir), 0.0, 1.0);\n        float skyDif = clamp(0.5 + 0.5 *dot(nor, vec3(0.0, 1.0, 0.0)), 0.0, 1.0);\n        float sunShadow = step(castRay(pos + nor*0.001, sunDir), 0.0);\n        sunShadow = 1.0;\n        float bounceDif = clamp(0.5 + 0.5 *dot(nor, vec3(0.0, -1.0, 0.0)), 0.0, 1.0);\n        \n        // main light\n        col = mate * vec3(7.0, 5.0, 3.0) * sunDif*sunShadow;\n        // sky light\n        col += mate * vec3(0.5, 0.8, 0.9) * skyDif;\n\t\t// bounce light\n        //col += mate * vec3(0.7, 0.3, 0.2) * bounceDif;\n        \n   \t    float fogNear = 9.0;\n        float fogFar = 20.0;\n    \n\t    float fogAmount = clamp(smoothstep(fogNear, fogFar, t * 2.0), 0., 1.) * 1.;\n    \n    \tcol = mix(col, fogColor, fogAmount);\n        \n    }\n    \n\n    \n    col = pow(col, vec3(0.4545));\n                        \n                    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}