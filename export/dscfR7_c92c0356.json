{"ver":"0.1","info":{"id":"dscfR7","date":"1696974511","viewed":38,"name":"test_raymarch_tutosession","username":"Pikso","description":"bla","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["la"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdf_plane(vec3 p, float h){\n    return p.y - h;\n}\n\nfloat sdf_sphere(vec3 p,  float r){\n    return length(p) - r;\n}\n\nfloat map(vec3 p){\n\n    vec3 rep = vec3(10.);\n    p = mod(p+rep*0.5, rep) - rep*0.5;\n\n    float plane = sdf_plane(p, -1.);\n    float sphere = sdf_sphere(p - vec3(0., -0.5, 5.), 1.0);\n    \n    float r = sphere;\n    return r;\n}\n/*\nvec3 lookAt(vec3 viewDir, vec2 uv)\n{\n    // r pour `right`\n    // on calcule un vecteur perpendiculaire au plan formé par\n    // le vecteur `viewDir` et un vecteur qui pointe vers le haut\n    // cross == produit vectoriel, sert surtout à obtenir un\n    // vecteur perpendiculaire à 2 autres vecteurs\n    vec3 r = normalize(cross(viewDir, vec3(0.,1.,0.)));\n    // u pour `up`\n    // on calcule un vecteur perpendiculaire au plan formé par\n    // le vecteur `viewDir` et le vecteur `r` précédemment calculé\n    vec3 u = normalize(cross(viewDir, r));\n    // on retourne le vecteur viewDir translaté en `r` et en `u` en fonction\n    // de l'espace uv\n    return normalize(viewDir + (r*uv.x + u*uv.y)*1.);\n}\n*/\n\n\nfloat march(vec3 camPos, vec3 camDir){\n    camDir = normalize(camDir);\n    vec3 p = camPos; \n    float d = 0.0;\n\n    for (int i = 0; i < 128; i++){\n        p = camPos + camDir*d; \n        d += map(p);\n        \n        if (d < 0.0001){\n            break;\n        }\n    }\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    // repère orthonormé centré\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    \n    vec3 camPos = vec3(0., 0., 0.);\n    vec3 camDir = vec3(uv.x, uv.y, 1.);\n    \n    float ray = march(fract(camPos), camDir);\n    // init de la couleur en sortie (noir)\n    vec3 color = vec3(ray)/100.;\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}