{"ver":"0.1","info":{"id":"3lSBRy","date":"1599165037","viewed":155,"name":"Minimalism #11","username":"Flopine","description":"Eleventh piece of a shader serie about minimalism, how to do small and quick artwork that are about composition and animation.","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["2d","animation","face","minimalism","daily"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan and slerpy for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n\n#define PI acos(-1.)\n#define TAU 6.2831853\n\n#define time(speed) fract(iTime*speed)\n#define AnimInOutExpoLoop(speed) easeInOutExpo(abs(-1.+2.*time(speed)))\n\n#define AAstep(thre, val) smoothstep(-.7,.7,(val-thre)/min(0.07,fwidth(val-thre)))\n#define circle(puv,s) (length(puv)-s)\n#define square(puv,s) (max(abs(puv.x),abs(puv.y))-s)\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define xor(a,b) ((1.-b)*a+(1.-a)*b)\n\nfloat easeInOutExpo(float x) \n{\n    return x == 0.\n        ? 0.\n        : x == 1.\n            ? 1.\n            : x < 0.5 ? pow(2., 20. * x - 10.) / 2.\n                : (2. - pow(2., -20. * x + 10.)) / 2.;\n}\n\nfloat frame (vec2 uv)\n{\n    uv.y += 0.25;\n    float thick = 0.005;\n    vec2 offsets[10] = vec2[]\n        (\n            vec2(0.,0.), // nose \n            vec2(-0.13,-0.05), // nose sides\n            vec2(-0.34, -0.5), // eyes\n            vec2(-0.05, 0.25), // upper lip\n            vec2(0.,0.37), // bottom lip\n            vec2(0.,0.62), // chin \n            vec2(-0.45,0.12), // chicks\n            vec2(0.,-0.95), // forehead\n            vec2(0., 0.10), // jaw\n            vec2(-0.6,-0.65) // temple\n        );\n    \n    float anim = AnimInOutExpoLoop(0.2);\n    \n    // nose\n \tfloat mask = AAstep(thick*1.8,abs(circle(uv+offsets[0]*anim,0.1)));\n    // bottom lip\n    mask *= AAstep(thick*2.2,abs(circle(uv+offsets[4]*anim,0.08)));\n    // chin\n    mask *= AAstep(thick*2.,abs(circle(uv+offsets[5]*anim,0.15)));\n    // forehead\n    mask *= AAstep(thick*1.5,abs(circle(uv+offsets[7]*anim,.4)));\n    // jaw\n    mask *= AAstep(thick,abs(circle(uv+offsets[8]*anim,0.5)));\n    \n    \n    uv.x = abs(uv.x);\n    // nose sides\n    mask *= AAstep(thick,abs(circle(uv+offsets[1]*anim,0.06)));\n    // eyes\n    mask *= AAstep(thick*1.5,abs(circle(uv+offsets[2]*anim,0.15)));\n    mask *= AAstep(thick*0.7,abs(circle(uv+offsets[2]*anim,0.06)));\n    // upper lip\n    mask *= AAstep(thick*1.8,abs(circle(uv+offsets[3]*anim,0.05)));\n    // chicks\n    mask *= AAstep(thick*1.5,abs(circle(uv+offsets[6]*anim,0.3)));\n    // temple\n    mask *= AAstep(thick,abs(circle(uv+offsets[9]*anim,0.42)));\n   \n    uv *= rot(PI/4.);\n    mask = xor(mask,AAstep(0.01,square(uv,0.6)));\n    \n    return mask;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(frame(uv*1.2));\n    col = xor(col,vec3(0.,0.1,0.1));\n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}