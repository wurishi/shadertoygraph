{"ver":"0.1","info":{"id":"tsBczt","date":"1587157658","viewed":311,"name":"Sorting: experiment 1","username":"metalim","description":"An experiment, combining horizontal and vertical odd-even sort.\nDoesn't seem to make any sense at the moment. But is fun to watch at full screen.\nR - reset\nD - difference\nclick - difference\n","likes":2,"published":3,"flags":48,"usePreview":0,"tags":["sort","sorting","parallel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\n==================== Sorting series ====================\n\nhttps://www.shadertoy.com/view/tsByzt - odd-even sorting network (aka parallel bubble sort).\nhttps://www.shadertoy.com/view/tsBczt - odd-even horizontal-vertical experiment.\nhttps://www.shadertoy.com/view/tdByzd - (2^N)-1 comb sorting network.\nhttps://www.shadertoy.com/view/tsScWG - Leonardo comb sorting network.\n\nPress 'R' to Reset.\nHold 'D' or hold left mouse button to check neighbour Difference. To see how much sorted it is.\n\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    if (iMouse.z>0. && iMouse.x<fragCoord.x || texelFetch(iChannel1,ivec2(68,0),0).r>0.)\n        fragColor = lum(texelFetch(iChannel0,ivec2(fragCoord),0)) < lum(texelFetch(iChannel0,ivec2(fragCoord)-ivec2(1,0),0)) ? vec4(0.) : vec4(1.);\n    else\n\t    fragColor = texelFetch(iChannel0,ivec2(fragCoord),0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// common\n\nvec4 get(int index)\n{\n    return get(index, iChannel0, iResolution);\n}\n\nvec4 compareAndSwap(int i, int j, int isSecond, int size)\n{\n    return compareAndSwap(i, j, isSecond, size, iChannel0, iResolution);\n}\n\n/////////////////////////////////////////////////////////////////////////\n// sorting\n\n#define switch_after 2\n#define shift_right_when_vertical 1\n\nvec4 update(int i, int size, int frame)\n{\n    int width = int(iResolution.x);\n    int vertical = frame/switch_after%2;\n\n    int isSecond = (i+frame)%2;\n    int j = i + 1 - isSecond*2;\n\n    if (vertical!=0)\n    {\n        isSecond = (i/width+frame)%2;\n        j = i + (width + shift_right_when_vertical) * (1 - isSecond*2);\n    }\n\n    return compareAndSwap(i, j, isSecond, size);\n}\n\n/////////////////////////////////////////////////////////////////////////\n// common\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int index = int(fragCoord.x)+int(iResolution.x)*int(fragCoord.y);\n    if (iFrame<60 || get(0,iChannel2,iResolution).xy != iResolution.xy || texelFetch(iChannel3,ivec2(82,0),0).r>0.)\n        fragColor = vec4(init(iChannel1, fragCoord/iResolution.xy).rgb,0.);\n    else\n    {\n        int frame = int(texelFetch(iChannel0,ivec2(fragCoord),0).a*256.);\n        fragColor = update(index, int(iResolution.x)*int(iResolution.y), frame);\n    \tfragColor.a = float(frame+1)/256.;\n\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(iResolution,0.);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"//#define BW\n\nvec4 get(int index, sampler2D chan, vec3 res) {\n    ivec2 p;\n    p.x = index%int(res.x);\n    p.y = index/int(res.x);\n    return texelFetch(chan,p,0);\n}\n\nfloat lum(vec4 c)\n{\n    return dot(c.rgb*vec3(0.3,0.59,0.11),vec3(1.));\n}\n\n\nvec4 bw(vec4 col)\n{\n    col.r = (col.r+col.g+col.b)/3.;\n    return col.rrra;\n}\n\nvec4 init(sampler2D chan, vec2 uv)\n{\n    vec4 col = texture(chan, uv);\n#ifdef BW\n    return bw(col);\n#else\n    return col;\n#endif\n}\n\nbool isSorted(vec4 a, vec4 b)\n{\n    return lum(a) <= lum(b);\n}\n\nvec4 compareAndSwap(int i, int j, int isSecond, int size, sampler2D chan, vec3 res)\n{\n    vec4 a = get(i, chan, res);\n\tif (j<0 || j>=size) return a;\n    vec4 b = get(j, chan, res);\n\n    if (isSecond!=0)\n    {\n        // note we have to keep the order of comparison, or we will lose pixels!\n        // as we can have less(a,b)==less(b,a), both false.\n        if (isSorted(b,a)) return a;\n        return b;\n    }\n    if (isSorted(a,b)) return a;\n    return b;\n}\n","name":"Common","description":"","type":"common"}]}