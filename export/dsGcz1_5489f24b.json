{"ver":"0.1","info":{"id":"dsGcz1","date":"1695776673","viewed":31,"name":"00GraphicsClassLesson09","username":"foodini","description":"00GraphicsClassLesson9","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["random","conway"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Things to try;\n// * Slow it down....\n// * Make pixels != cells. IOW, make cells nxn pixels for n != 1.\n// * Make color depend upon neighbor count.\n// * Make it respond to mouse input.\n// * HEX GRID!!!!\n//   * Live: 0-1 neighbors -> death, 2 neighbors -> survive, >2 neighbors -> death\n//   * Dead: ==2 neighbors -> life, else no change.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor=texelFetch(iChannel0, ivec2(fragCoord), 0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    srand(fragCoord, iResolution, iFrame);\n    \n    if(iFrame == 0) {\n        if(random() > 0.5) {\n            fragColor = vec4(1.0);\n        }\n    } else {\n        ivec2 int_pos = ivec2(fragCoord);\n        fragColor = texelFetch(iChannel0, int_pos, 0);\n        \n        if(random() < 0.00001) {\n            fragColor = vec4(1.0) - fragColor;\n        }\n        \n        float len = length(fragCoord - iMouse.xy);\n        if(iMouse.z > 0.0 && len < 15.0 && len > 14.0) {\n            fragColor = vec4(1.0);\n            return;\n        }\n        \n        int neighbor_count = 0;\n        for(int dx=-1; dx<=1; dx++) {\n            for(int dy=-1; dy<=1; dy++) {\n                if(dx != 0 || dy != 0) {\n                    if(texelFetch(iChannel0, int_pos + ivec2(dx, dy), 0).x > 0.0) {\n                        neighbor_count += 1;\n                    }\n                }\n            }\n        }\n        if(fragColor.r > 0.0) { // If this is currently a live cell...\n            if(neighbor_count < 2) {\n                fragColor = vec4(0.0); \n                return; // died of lonliness\n            }\n            if(neighbor_count < 4) {\n                fragColor = vec4(1.0); \n                return; // remains alive\n            }\n            fragColor = vec4(0.0); \n            return; // died of starvation\n        } else {\n            if(neighbor_count == 3) {\n                fragColor = vec4(1.0); \n                return;\n            }\n            fragColor = vec4(0.0); \n            return;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"//Adapted from: https://gist.github.com/keijiro/24f9d505fac238c9a2982c0d6911d8e3\nuint rand_seed;\n\nuint hash()\n{\n    rand_seed ^= 2747636419u;\n    rand_seed *= 2654435769u;\n    rand_seed ^= rand_seed >> 16;\n    rand_seed *= 2654435769u;\n    rand_seed ^= rand_seed >> 16;\n    rand_seed *= 2654435769u;\n    return rand_seed;\n}\n\nfloat random()\n{\n    return float(hash()) / 4294967295.0; // 2^32-1\n}\n\nvoid srand(vec2 fragCoord, vec3 iResolution, int iFrame){\n    rand_seed = uint(fragCoord.y*iResolution.x + fragCoord.x)+uint(iFrame)*uint(iResolution.x)*uint(iResolution.y);\n}\n","name":"Common","description":"","type":"common"}]}