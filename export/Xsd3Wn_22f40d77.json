{"ver":"0.1","info":{"id":"Xsd3Wn","date":"1449004119","viewed":272,"name":"test particles","username":"WQS33","description":"implicit surface particle ","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["particles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"#define PARTICLE_NUMBER 50\n\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\nfloat wave(vec3 p, float q)\n{\n    float dis =length(p);\n    float X = p.y- sin(dis-iTime)*q;\n    return X;\n}\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\nfloat blob7(float d1, float d2, float d3, float d4, float d5, float d6, float d7)\n{\n    float k = 2.0;\n\treturn -log(exp(-k*d1)+exp(-k*d2)+exp(-k*d3)+exp(-k*d4)+exp(-k*d5)+exp(-k*d6)+exp(-k*d7))/k;\n}\n\nfloat blob4(float d1, float d2, float d3, float d4)\n{\n    float k = 2.0;\n\treturn -log(exp(-k*d1)+exp(-k*d2)+exp(-k*d3)+exp(-k*d4))/k;\n}\n\nfloat smin( float a, float b )\n{\n\t//if( gUseMin ) return min(a,b);\n\t\n\t\n    float k = 0.06;\n\tfloat h = clamp( 0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n\treturn mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec2 map(in vec3 pos){\n    vec2 res=opU( vec2( sdPlane(     pos), 1.0 ),\n\t                vec2( sdSphere(    pos-vec3( 0.0,0.25, 0.0), 0.45 ), 16.9 ) );\n    res =opU( res,\n            vec2( sdSphere(    pos-vec3( 2.0,0.25, 1.2), 0.35 ), 26.9 ));\n    res =opU( res,\n            vec2( sdSphere(    pos-vec3( 2.0,0.75, 0.6), 0.51 ), 16.9 ));\n    return res;\n}\n\nfloat bolbmap(in vec3 pos){\n\n   //float res = blob4(sdPlane(pos),sdSphere(    pos-vec3( 0.0,0.25+sin(iTime*0.3), 0.0+sin(-iTime*0.2)), 0.45 ),sdSphere(    pos-vec3( 2.0+sin(iTime*0.1),0.25, 1.0), 0.15 ),\n                //sdSphere(    pos-vec3( 2.0,1.25+sin(iTime*0.3), 0.3), 0.51 ));\n    float res = blob4(wave(pos, 0.2),sdSphere(    pos-vec3( 0.0,0.25+abs(sin(iTime*0.4))-3.0, 0.0), 0.45 ),sdSphere(    pos-vec3( 2.0+sin(iTime*0.1),0.25, 1.0), 0.15 ),\n                sdSphere(    pos-vec3( 2.0,1.25+sin(iTime*0.3), 0.3), 0.51 ));\n    return res;\n}\n\n\n\n\nvec2 castRayBolb(in vec3 ro, in vec3 rd){\n    float tmin = 1.0;\n    float tmax = 20.0;\n    float precis = 0.002;\n    float t = tmin;\n    float m = -1.0;\n    for( int i=0; i<50; i++ )\n    {\n\t    float h = bolbmap( ro+rd*t );\n        if( h<precis || t>tmax ) break;\n        t += h;\n\t    //m = res.y;\n    }\n\n    if( t>tmax ) m=-1.0;\n    m=0.5;\n    return vec2( t, m );\n}\n\nvec2 castRay(in vec3 ro, in vec3 rd){\n    float tmin = 1.0;\n    float tmax = 20.0;\n    float precis = 0.002;\n    float t = tmin;\n    float m = -1.0;\n    for( int i=0; i<50; i++ )\n    {\n\t    vec2 res = map( ro+rd*t );\n        if( res.x<precis || t>tmax ) break;\n        t += res.x;\n\t    m = res.y;\n    }\n\n    if( t>tmax ) m=-1.0;\n    return vec2( t, m );\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = bolbmap( aopos );\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nvec3 calBlobNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    bolbmap(pos+eps.xyy) - bolbmap(pos-eps.xyy),\n\t    bolbmap(pos+eps.yxy) - bolbmap(pos-eps.yxy),\n\t    bolbmap(pos+eps.yyx) - bolbmap(pos-eps.yyx) );\n\treturn normalize(nor);\n}\n\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = bolbmap( ro + rd*t );\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\nvec3 render( in vec3 ro, in vec3 rd )\n{\n    vec3 col = vec3(0.8, 0.9, 1.0);\n    vec2 res =castRayBolb(ro,rd);\n    //vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    if( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calBlobNormal( pos );\n        vec3 ref = reflect( rd, nor );\n        \n        // material        \n\t\t//col = 0.45 + 0.3*sin( vec3(0.05,0.08,0.70) );\n        col =  vec3(0.4,0.4,0.90) ;\n\n        // lighitng        \n        float occ = calcAO( pos, nor );\n\t\tvec3  lig = normalize( vec3(-0.6, 0.7, -0.5) );\n\t\tfloat amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n        float dom = smoothstep( -0.1, 0.1, ref.y );\n        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n\t\tfloat spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);\n        dif *= softshadow( pos, lig, 0.02, 2.5 );\n        dom *= softshadow( pos, ref, 0.02, 2.5 );\n\n\t\tvec3 brdf = vec3(0.0);\n        brdf += 1.20*dif*vec3(1.00,0.90,0.60);\n\t\tbrdf += 1.20*spe*vec3(1.00,0.90,0.60)*dif;\n        brdf += 0.30*amb*vec3(0.50,0.70,1.00)*occ;\n        brdf += 0.40*dom*vec3(0.50,0.70,1.00)*occ;\n        brdf += 0.30*bac*vec3(0.25,0.25,0.25)*occ;\n        brdf += 0.40*fre*vec3(1.00,1.00,1.00)*occ;\n\n        brdf += 0.40*fre*vec3(1.00,1.00,1.00);\n\t\tbrdf += 0.02;\n\t\tcol = col*brdf;\n\n    \tcol = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0003*t*t ) );\n\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = 15.0 + iTime;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 p=-1.0+2.0*uv;\n    p.x *= iResolution.x/iResolution.y;\n    vec2 mo = iMouse.xy/iResolution.xy;\n    \n    // camera\t\n\tvec3 ro = vec3( -0.5+3.5*cos(0.1*time + 6.0*mo.x), 1.0 + 2.0*mo.y, 0.5 + 3.5*sin(0.1*time + 6.0*mo.x) );\n\tvec3 ta = vec3( -0.5, -0.4, 0.5 );\n\t\n\t// camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, 0.0 );\n    \n    // ray direction\n\tvec3 rd = ca * normalize( vec3(p.xy,2.0) );\n    //\n    vec3 col = render( ro, rd );\n\n\tcol = pow( col, vec3(0.4545) );\n\n    \n\t//fragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n    fragColor=vec4( col, 1.0 );\n}","name":"","description":"","type":"image"}]}