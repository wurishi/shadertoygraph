{"ver":"0.1","info":{"id":"clGBWR","date":"1717646932","viewed":48,"name":"Just Music Visualisation","username":"HexPrism33","description":"A simple Music Visualiser","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["musicvisual"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGzn","filepath":"/media/a/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3","previewfilepath":"/media/ap/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 Chakra(vec2 uv)\n{\n    // the sound texture is 512x2\n    int tx = int(uv.x*512.0);\n    \n\t// first row is frequency data (48Khz/4 in 512 texels, meaning 23 Hz per texel)\n\tfloat fft  = 0.;\n    \n    for(int i =0; i<512;i+=1)\n    {\n        fft  +=  texelFetch( iChannel0, ivec2(i,0), 0 ).x;\n    }\n    \n    fft = fft/512.0;\n    \n    //return vec4(fft/512.0);\n    uv *= 0.8;\n    vec2 polar = vec2(atan(uv.x,uv.y),length(uv));    \n    uv = vec2(polar.x /6.2831 + .5 + fft + polar.y,polar.y + abs(sin(iTime)*fft)*0.2);\n    float x = uv.x * 11.;\n    //So basically it kinda creates a sign wave pattern\n    float m = min(fract(x),fract(1.-x));\n     \n    float c = smoothstep(0.,.1,m*.5 * (fft) + .2 - uv.y);\n    vec3 _c = mix(vec3(.8,.2,.0), vec3(.2,.0,.9) , polar.y*2.);\n    return vec4(_c,c);\n}\n\n \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord.xy - .5 * iResolution.xy) /iResolution.y;\n    vec3 c = vec3(0.);\n    vec4 AChakra = Chakra(uv);\n    c = mix(c,AChakra.xyz,AChakra.a);\n\n    fragColor = vec4(vec3(c),1.0);\n}","name":"Image","description":"","type":"image"}]}