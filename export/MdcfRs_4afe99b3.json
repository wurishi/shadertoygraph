{"ver":"0.1","info":{"id":"MdcfRs","date":"1532375953","viewed":108,"name":"Quadratic 3-phase advection","username":"olano","description":"Based on https://www.shadertoy.com/view/XsdXWn, but using a quadratic blend instead of cosine blend.\n\nQuadratic weighting equations: https://www.desmos.com/calculator/k2koi8yh7z","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["texture","advection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    float tt = iTime / 3.;\n\tvec2 uv = U / iResolution.xy - .5;\n    float v = 3./(.01+length(uv));\n    \n    float t = fract(0.5 + 1.5*tt);\n    float s = 1. - t;\n\n    float t0 = 2. * t - 3.;\n    float t1 = 2. * t - 1.;\n    float t2 = 2. * t + 1.;\n\n    vec3 tx0 = texture(iChannel0, uv * rot(t0 * v * 0.05)).rgb;\n    vec3 tx1 = texture(iChannel0, uv * rot(t1 * v * 0.05)).rgb;\n    vec3 tx2 = texture(iChannel0, uv * rot(t2 * v * 0.05)).rgb;\n\n    float w0 = 0.5*t*t;\n    float w1 = s*t + 0.5;\n    float w2 = 0.5*s*s;\n\n    O.xyz = tx0 * w0 + tx1 * w1 + tx2 * w2;\n    O.w = 1.;\n}","name":"Image","description":"","type":"image"}]}