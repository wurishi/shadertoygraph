{"ver":"0.1","info":{"id":"ctsfWM","date":"1693193606","viewed":106,"name":"Polar Rings","username":"BenO","description":"overusing polar coordinates","likes":13,"published":1,"flags":32,"usePreview":1,"tags":["polarcoordinates"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = texture(iChannel0, uv).xyz;\n    \n    // compute normals from contrast\n    vec3 n = vec3(0.,0.,1.);\n    n.x = texture(iChannel0, uv + vec2(-0.001, 0.)).x-texture(iChannel0, uv + vec2(0.001, 0.)).x;\n    n.y = texture(iChannel0, uv + vec2(0., -0.001)).x-texture(iChannel0, uv + vec2(0., 0.001)).x;\n    n = normalize(n);\n    \n    // make a bunch of lights with specular\n    for(int i=0; i<5; i++)\n    {\n        float lpx = min(cos(iTime+cos(float(i)*.8)*5.) *3., 0.);\n        float lpy = sin(iTime+cos(float(i)*.8)*5.) * 2.;\n        vec3 lp = vec3(lpx + sin(float(i)), lpy, 1.);\n        vec3 ld = lp - vec3(uv, 0.);\n        float lds = 1.-(1./length(ld));\n        float lgh = clamp(dot(ld, n), 0., 1.);\n        col = col * clamp(lgh * pow(lds*1.9,1.), 0.8, 1.1);\n        vec3 dr = vec3(uv, 0.) - vec3(0.5,0.5,1.);\n        vec3 hd = normalize(ld - dr);\n        float sp = max(dot(hd, n), 0.);\n        sp = pow(sp, 100.) * .4;    \n        col += min(sp, 0.73) * vec3(0.75 * sin(float(i)),0.7,0.95);\n    }\n    \n    // add red light\n    vec3 lp2 = vec3(1.2, 1.5, .2);\n    vec3 ld2 = lp2 - vec3(uv, 0.);\n    float lds2 = length(ld2);\n    float lgh2 = dot(ld2, n);\n    col += vec3(.5,0.1,0.) * pow(lds2 * 0.5, 6.);\n    \n    fragColor = vec4(col, 1.0); \n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// atan2 function\nfloat a2(vec2 uvz)\n{\n    float at = ((atan(-uvz.y, -uvz.x) / 3.1415) * .5) + .5;\n    return at;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    vec2 cuv = vec2(uv.x - iResolution.x / iResolution.y / 2., uv.y - 0.5);\n\n    // polar values\n    float r = sqrt(cuv.x * cuv.x + cuv.y * cuv.y);\n    float a = a2(vec2(cuv.x, cuv.y));\n    r = fract(r*2.-iTime*0.05);\n    a = fract(a*2.+iTime*0.1);\n        \n    vec3 c = vec3(0.,0.,0.);\n    float ls = 6.;\n    \n    // make rings and offset values with radial slices\n    for(int i=0; i<int(ls); i++)\n    {\n        float l = float(i)/ls;\n        a = fract(a+iTime*0.1*sin(l*1.5));\n        float w = 0.2+sin(l*0.17);\n        float sl = smoothstep(0.,0.01, a) - smoothstep(0.2+w,0.21+w, a);\n        float a2 = fract(a+iTime*l*0.01*sin(l*0.3)+0.77);\n        float a3 = fract(a+iTime*l*0.03*sin(l*0.3)+0.4);\n        float sl2 = smoothstep(0.,0.02, a2) - smoothstep(0.2+w,0.21+w, a2);\n        float sl3 = smoothstep(0.,0.02, a3) - smoothstep(0.2+w+0.2,0.21+w+0.2, a3);\n        float nl = smoothstep(l+0.01+sl2*0.03, l+0.02+sl2*0.03, r);\n        float nln = smoothstep(l+(1./ls)-sl3*0.03, l+(1./ls)+0.02-sl3*0.03, r);\n        float a4 = fract(a+iTime*l*0.02*sin(l*0.2)+0.5);\n        float sl4 = smoothstep(0.01,0.05, a4) - smoothstep(0.2+w+0.2,0.2+w+0.26, a4);\n        float l1 = smoothstep(l+0.07+sl4*0.1, l+0.071+sl4*0.1, r);\n        float l2 = smoothstep(l+0.08+sl4*0.1, l+0.082+sl4*0.1, r);\n        float ln = max(l1-l2,0.);\n        float c1 = (nl - nln) * (1.-ln*0.2);\n        c1 = mix(c1*2., c1*2., sl);\n        c += c1 * texture(iChannel0, vec2(l,.5)).xxx;\n        nl = nln;\n    }\n        \n    fragColor = vec4(c,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}