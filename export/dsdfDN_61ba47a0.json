{"ver":"0.1","info":{"id":"dsdfDN","date":"1697203758","viewed":174,"name":"rnd alternating T blocks circles","username":"jt","description":"Checkerboard tiling of alternating (horizontal vs. vertical) rantom (double-T-) crossings.\nFunction returns minimum and maximum corners of rectangle containing the given point and its tile id.\n","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["sdf","random","distance","t","double","block","euclidean","exact","id","alternating","irregular","asymmetric"],"hasliked":0,"parentid":"ftcfWf","parentname":"Asymmetric Blocks SDF"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/dsdfDN rnd alternating T blocks circles, 2023 by jt\n// based on https://www.shadertoy.com/view/ftcfWf Asymmetric Blocks SDF\n\n// Originally inspired by https://www.shadertoy.com/view/Ws3GRs Asymmetric Blocks by Shane.\n// Checkerboard tiling of alternating (horizontal vs. vertical) random (double-T-) crossings.\n// Function returns minimum and maximum corners of rectangle containing the given point and its id.\n\n// For transition to regular tiling see https://www.shadertoy.com/view/cd2XR3 Limited Asymmetric Blocks SDF.\n\n// 3d variant: https://www.shadertoy.com/view/dscfDl asymmetric blocks bounce spheres\n\n// tags: sdf, random, distance, t, double, block, euclidean, exact, id, alternating, irregular, asymmetric\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2,\n// implementing Chris Wellons https://nullprogram.com/blog/2018/07/31/\nuint triple32(uint x)\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bbU;\n    x ^= x >> 11;\n    x *= 0xac4c1b51U;\n    x ^= x >> 15;\n    x *= 0x31848babU;\n    x ^= x >> 14;\n    return x;\n}\n\nfloat hash(uint x)\n{\n    return float(triple32(x)) / float(0xffffffffU);\n}\n\nfloat hash(uvec2 v)\n{\n    //return hash(v.x + triple32(v.y));\n    return mix(0.2, 0.8, hash(v.x + triple32(v.y)));\n}\n\nfloat hash(ivec2 v)\n{\n    return hash(uvec2(v));\n}\n\nfloat hash0(ivec2 v)\n{\n    return hash(0u+2u*uvec2(v));\n}\n\nfloat hash1(ivec2 v)\n{\n    return hash(1u+2u*uvec2(v));\n}\n\n// TODO: optimize this\nvec2 hash2(ivec2 v)\n{\n    return vec2(hash0(v), hash1(v));\n}\n\nfloat interior_box(vec2 p, vec2 p0, vec2 p1)\n{\n    vec2 d = abs(p-(p1+p0)/2.0)-(p1-p0)/2.0;\n    return min(max(d.x,d.y),0.0);\n}\n\nstruct block\n{\n    vec2 p0, p1;\n    ivec2 id;\n};\n/*\nblock make_block(vec2 v0, vec2 v1, ivec2 tile, bvec2 o)\n{\n    return\n        block\n        (\n            v0 + vec2(o) - 1.0, v1 + vec2(o),\n            tile + ivec2(o)\n        );\n}\n\n// possibly faster variant (computations only done if really required) but confusing\n// Inspired by https://www.shadertoy.com/view/Ws3GRs Asymmetric Blocks by Shane,\n// and also by https://www.shadertoy.com/view/tsVGRz Oddtiles (optimized) by stb.\n// Checkerboard tiling of alternating (horizontal vs. vertical) random (double-T-) crossings.\n// Returns minimum and maximum corners of rectangle containing the given point an tile id.\nblock blocks(vec2 p) // https://www.shadertoy.com/view/dsdfDN rnd alternating T blocks circles\n{\n    vec2 q = fract(p); // local coordinates inside tile\n    ivec2 tile = ivec2(floor(p)); // global coordinates of tile\n    //bool flip = (tile.x % 2) == (tile.y % 2); // XXX breaks on windows XXX\n    bool flip = (tile.x & 1) == (tile.y & 1);\n    \n    ivec2 ow = ivec2(-1, 0); // offset for west tile\n    ivec2 oe = ivec2(+1, 0); // offset for east tile\n    ivec2 os = ivec2( 0,-1); // offset for south tile\n    ivec2 on = ivec2( 0,+1); // offset for north tile\n\n    ivec2 osw = ivec2(0,0); // offset for south-west tile\n    ivec2 onw = ivec2(0,1); // offset for north-west tile\n    ivec2 ose = ivec2(1,0); // offset for south-east tile\n    ivec2 one = ivec2(1,1); // offset for north-east tile\n\n    if(flip) // vertical line goes through\n    {\n        vec2 l = vec2(hash0(tile), 0); // x-coordinate of vertical line through this tile\n        vec2 le = vec2(0, hash1(tile+oe)); // y-coordinate of horizontal line through east tile\n        vec2 lw = vec2(0, hash1(tile+ow)); // y-coordinate of horizontal line through west tile\n\n        if(q.x < l.x)\n            if(q.y < lw.y) return make_block(vec2(hash0(tile+osw*2-1), 0)+vec2(0, hash1(tile+os)), l+lw, tile, osw); // south-west: x-coordinate of vertical line through south-west tile, y-coordinate of horizontal line through south tile, y-coordinate of horizontal line through west tile\n            else           return make_block(vec2(hash0(tile+onw*2-1), 0)+lw, l+vec2(0, hash1(tile+on)), tile, onw); // north-west: x-coordinate of vertical line through north-west tile, y-coordinate of horizontal line through north tile, y-coordinate of horizontal line through west tile\n        else\n            if(q.y < le.y) return make_block(l+vec2(0, hash1(tile+os)), vec2(hash0(tile+ose*2-1), 0)+le, tile, ose); // south-east: x-coordinate of vertical line through south-east tile, y-coordinate of horizontal line through south tile, y-coordinate of horizontal line through east tile\n            else           return make_block(l+le, vec2(hash0(tile+one*2-1), 0)+vec2(0, hash1(tile+on)), tile, one); // north-east: x-coordinate of vertical line through north-east tile, y-coordinate of horizontal line through north tile, y-coordinate of horizontal line through east tile\n    }\n    else // horizontal line goes through\n    {\n        vec2 l = vec2(0, hash1(tile)); // y-coordinate of horizontal line through this tile\n        vec2 ls = vec2(hash0(tile+os), 0); // x-coordinate of horizontal line through south tile\n        vec2 ln = vec2(hash0(tile+on), 0); // x-coordinate of vertical line through north tile\n\n        if(q.y < l.y)\n            if(q.x < ls.x) return make_block(vec2(hash0(tile+ow), 0)+vec2(0, hash1(tile+osw*2-1)), ls+l, tile, osw); // south-west: y-coordinate of horizontal line through south-west tile, x-coordinate of vertical line through west tile, x-coordinate of vertical line through south tile\n            else           return make_block(ls+vec2(0, hash1(tile+ose*2-1)), vec2(hash0(tile+oe), 0)+l, tile, ose); // south-east: y-coordinate of horizontal line through south-east tile, x-coordinate of vertical line through east tile, x-coordinate of vertical line through south tile\n        else\n            if(q.x < ln.x) return make_block(vec2(hash0(tile+ow), 0)+l, ln+vec2(0,hash1(tile+onw*2-1)), tile, onw); // north-west: y-coordinate of horizontal line through north-west tile, x-coordinate of vertical line through west tile, x-coordinate of vertical line through north tile\n            else           return make_block(ln+l, vec2(hash0(tile+oe), 0)+vec2(0,hash1(tile+one*2-1)), tile, one); // north-east: y-coordinate of horizontal line through north-east tile, x-coordinate of vertical line through east tile, x-coordinate of vertical line through north tile\n    }\n\n    return block(vec2(0), vec2(0), ivec2(0)); // this should never be reached\n}\n*/\nvec2 select(bool flip, vec2 v)\n{\n    return flip ? vec2(v.x, 0) : vec2(0, v.y);\n}\n\nvec4 select(bool flip, vec4 v)\n{\n    return flip ? vec4(v.x, 0, v.z, 0) : vec4(0, v.y, 0, v.w);\n}\n\nvec4 swap(bool flip, vec4 v)\n{\n    return flip ? v.zwxy : v;\n}\n\n// Somewhat compact variant - at the cost of readability.\n// Inspired by https://www.shadertoy.com/view/Ws3GRs Asymmetric Blocks by Shane,\n// and also by https://www.shadertoy.com/view/tsVGRz Oddtiles (optimized) by stb.\n// Checkerboard tiling of alternating (horizontal vs. vertical) random (double-T-) crossings.\n// Returns minimum and maximum corners of rectangle containing the given point an tile id.\nblock blocks(vec2 p) // https://www.shadertoy.com/view/dsdfDN rnd alternating T blocks circles\n{\n    vec2 q = fract(p); // local coordinates inside tile\n    ivec2 tile = ivec2(floor(p)); // global coordinates of tile\n    //bool flip = (tile.x % 2) == (tile.y % 2); // XXX breaks on windows XXX\n    bool flip = (tile.x & 1) == (tile.y & 1); // false: horizontal line goes through, true: vertical line goes through\n\n    vec2 l = hash2(tile); // x/y-coordinate of vertical/horizontal line through this tile\n\n    // /NE\\\n    // \\WS/\n    mat2 Mx =\n        mat2\n        (\n            hash0(tile+ivec2( 0,+1)), // x-coordinate of vertical line through north tile\n            hash0(tile+ivec2(-1, 0)), // x-coordinate of vertical line through west tile\n            hash0(tile+ivec2(+1, 0)), // x-coordinate of vertical line through east tile\n            hash0(tile+ivec2( 0,-1)) // x-coordinate of vertical line through south tile\n        );\n    mat2 My =\n        mat2\n        (\n            hash1(tile+ivec2( 0,+1)), // y-coordinate of horizontal line through north tile\n            hash1(tile+ivec2(-1, 0)), // y-coordinate of horizontal line through west tile\n            hash1(tile+ivec2(+1, 0)), // y-coordinate of horizontal line through east tile\n            hash1(tile+ivec2( 0,-1)) // y-coordinate of horizontal line through south tile\n        );\n\n    bvec2 o =\n        flip\n        ?\n        bvec2(q.x < l.x, q.x < l.x ? q.y < /*west*/My[0][1] : q.y < /*east*/My[1][0])\n        :\n        bvec2(q.y < l.y ? q.x < /*south*/Mx[1][1] : q.x < /*north*/Mx[0][0], q.y < l.y);\n\n    vec2 ll = hash2(tile+ivec2(not(o))*2-1);\n\n    vec4 minmax =\n        vec4\n        (\n            vec2(Mx[int(o.y)][int(o.y)], My[int(o.y)][int(o.y)]), // south-north\n            vec2(Mx[int(!o.x)][int(o.x)], My[int(!o.x)][int(o.x)]) // west-east\n        );\n\n    minmax = select(!flip, minmax);\n    minmax = swap(flip?!o.y:o.x, minmax);\n    minmax += swap(flip?o.x:o.y, vec4(select(flip, l),select(flip, ll)));\n\n    return\n        block\n        (\n            minmax.xy + vec2(not(o)) - 1.0, minmax.zw + vec2(not(o)),\n            tile + ivec2(not(o))\n        );\n}\n/*\n// original\n// Inspired by https://www.shadertoy.com/view/Ws3GRs Asymmetric Blocks by Shane.\n// Checkerboard tiling of alternating (horizontal vs. vertical) random (double-T-) crossings.\n// Returns minimum and maximum corners of rectangle containing the given point an tile id.\nblock blocks(vec2 p) // https://www.shadertoy.com/view/dsdfDN rnd alternating T blocks circles\n{\n    vec2 q = fract(p); // local coordinates inside tile\n    ivec2 tile = ivec2(floor(p)); // global coordinates of tile\n    //bool flip = (tile.x % 2) == (tile.y % 2); // XXX breaks on windows XXX\n    bool flip = (tile.x & 1) == (tile.y & 1);\n    if(flip) // vertical line goes through\n    {\n        float x = hash(0+2*(tile)); // x-coordinate of vertical line through this tile\n        float xsw = hash(0+2*(tile+ivec2(-1,-1))); // x-coordinate of vertical line through south-west tile\n        float xnw = hash(0+2*(tile+ivec2(-1,+1))); // x-coordinate of vertical line through north-west tile\n        float xse = hash(0+2*(tile+ivec2(+1,-1))); // x-coordinate of vertical line through south-east tile\n        float xne = hash(0+2*(tile+ivec2(+1,+1))); // x-coordinate of vertical line through north-east tile\n        float yw = hash(1+2*(tile+ivec2(-1, 0))); // y-coordinate of horizontal line through west tile\n        float ye = hash(1+2*(tile+ivec2(+1, 0))); // y-coordinate of horizontal line through east tile\n        float ys = hash(1+2*(tile+ivec2( 0,-1))); // y-coordinate of horizontal line through south tile\n        float yn = hash(1+2*(tile+ivec2( 0,+1))); // y-coordinate of horizontal line through north tile\n\n        if(q.x < x)\n        {\n            if(q.y < yw) return\n                block\n                (\n                    vec2(xsw-1.0, ys-1.0), vec2(x, yw), // south-west\n                    ivec2(tile.x + 0, tile.y + 0)\n                );\n            else return\n                block\n                (\n                    vec2(xnw-1.0, yw), vec2(x, yn+1.0), // north-west\n                    ivec2(tile.x + 0, tile.y + 1)\n                );\n        }\n        else\n        {\n            if(q.y < ye) return\n                block\n                (\n                    vec2(x, ys-1.0), vec2(xse+1.0, ye), // south-east\n                    ivec2(tile.x + 1, tile.y + 0)\n                );\n            else return\n                block\n                (\n                    vec2(x, ye), vec2(xne+1.0, yn+1.0), // north-east\n                    ivec2(tile.x + 1, tile.y + 1)\n                );\n        }\n    }\n    else // horizontal line goes through\n    {\n        float y = hash(1+2*(tile)); // x-coordinate of horizontal line through this tile\n        float ysw = hash(1+2*(tile+ivec2(-1,-1))); // y-coordinate of horizontal line through south-west tile\n        float ynw = hash(1+2*(tile+ivec2(-1,+1))); // y-coordinate of horizontal line through north-west tile\n        float yse = hash(1+2*(tile+ivec2(+1,-1))); // y-coordinate of horizontal line through south-east tile\n        float yne = hash(1+2*(tile+ivec2(+1,+1))); // y-coordinate of horizontal line through north-east tile\n        float xw = hash(0+2*(tile+ivec2(-1, 0))); // x-coordinate of vertical line through west tile\n        float xe = hash(0+2*(tile+ivec2(+1, 0))); // x-coordinate of vertical line through east tile\n        float xs = hash(0+2*(tile+ivec2( 0,-1))); // x-coordinate of vertical line through south tile\n        float xn = hash(0+2*(tile+ivec2( 0,+1))); // x-coordinate of vertical line through north tile\n\n        if(q.y < y)\n        {\n            if(q.x < xs) return\n                block\n                (\n                    vec2(xw-1.0, ysw-1.0), vec2(xs, y), // south-west\n                    ivec2(tile.x + 0, tile.y + 0)\n                );\n            else return\n                block\n                (\n                    vec2(xs, yse-1.0), vec2(xe+1.0, y), // south-east\n                    ivec2(tile.x + 1, tile.y + 0)\n                );\n        }\n        else\n        {\n            if(q.x < xn) return\n                block\n                (\n                    vec2(xw-1.0, y), vec2(xn, ynw+1.0), // north-west\n                    ivec2(tile.x + 0, tile.y + 1)\n                );\n             else return\n                block\n                (\n                    vec2(xn, y), vec2(xe+1.0, yne+1.0), // north-east\n                    ivec2(tile.x + 1, tile.y + 1)\n                );\n        }\n    }\n}\n*/\nfloat circle(vec2 p, vec2 c, float r)\n{\n    return length(p - c) - r;\n}\n/*\nfloat bounce(float t) // [0..1]\n{\n    return 1.0-2.0*abs(fract(t)-0.5);\n}\n*/\nfloat bounce(float t) // [-1..+1]\n{\n    return 1.0-4.0*abs(fract(t)-0.5);\n}\n\nvec2 bounce(vec2 t) // [-1..+1]\n{\n    return 1.0-4.0*abs(fract(t)-0.5);\n}\n\nfloat map(vec2 p)\n{\n    block b = blocks(p);\n    vec2 c = (b.p1 + b.p0) / 2.0;\n    vec2 d = (b.p1 - b.p0) / 2.0;\n    //float r = min(d.x, d.y);\n    float r = min(d.x, d.y)/2.0;\n    vec2 o = d - r;\n    float distbox = interior_box(fract(p), b.p0, b.p1);\n    //float distcirc = circle(fract(p), c, r);\n    //float distcirc = circle(fract(p), c+o*cos(iTime), r);\n    float distcirc = circle(fract(p), c+o*bounce(o.yx*iTime/5.0), r); // animated\n    //return distbox;\n    //return distcirc;\n    return min(-distbox, distcirc);\n    //return min(-distbox, abs(distcirc));\n}\n\nvec3 colorcode(ivec2 id)\n{\n    //return vec3(hash(id)); // randomize\n    return vec3((id.x & 1) != (id.y & 1));\n    //return vec3(vec2(id%4)/3.0,0.0);\n}\n\n#define scale 2.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    vec2 m = (2.0 * iMouse.xy - iResolution.xy) / iResolution.y;\n\n    float d = map(p*scale)/scale;\n\n    // sdf visualization by iq\n    vec3 col = vec3(1.0) - sign(d) * vec3(0.1, 0.4, 0.7);\n    col *= 1.0 - exp(-24.0 * abs(d));\n    col *= 0.8 + 0.2 * cos(240.0*d);\n    col = mix(col, vec3(1.0), 1.0 - smoothstep(0.0, 0.01, abs(d)));\n\n    if(iMouse.z > 0.001)\n    {\n        col *= mix(vec3(0.5), vec3(1.0), colorcode(blocks(p*scale).id)); // visualize ids\n        // sdf visualization by iq\n        d = map(m*scale)/scale;\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0 - smoothstep(0.0, 0.005, abs(length(p - m) - abs(d)) - 0.0025));\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0 - smoothstep(0.0, 0.005, length(p - m) - 0.015));\n    }\n\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}