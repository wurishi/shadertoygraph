{"ver":"0.1","info":{"id":"WtsfWl","date":"1598062567","viewed":72,"name":"HexPrism-v4-sound-tract","username":"jorge2017a1","description":"HexPrism-v4-sound-tract","likes":2,"published":1,"flags":8,"usePreview":0,"tags":["hexprismv4soundtract"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//por jorge2017a1-\n\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n\n\nvec3 light_pos1   ;\nvec3 light_color1 ;\nvec3 light_pos2   ;\nvec3 light_color2 ;\n\n#define  mangulo 45.0\n    \n\n//Sphere function\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\n//Box function\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\n\n\n\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\nfloat sdCylinderYZ( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.yz),p.x)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\nfloat sdCylinderXZ( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\nfloat sdCylinderXY( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.xy),p.z)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\n///---------------------------------------\nfloat intersectSDF(float distA, float distB) {\n    return max(distA, distB);\n}\n\nfloat unionSDF(float distA, float distB) \n{\n    return min(distA, distB);\n}\n\nfloat differenceSDF(float distA, float distB) \n{\n    return max(distA, -distB);\n}\n\n\nvec2 opU(vec2 d1, vec2 d2 ) {\n  vec2 resp;\n    if (d1.x < d2.x){ \n        resp = d1;\n    }\n    else\n    {\n        resp = d2;\n    }\n     \n   return resp; \n}\n///------------------------------------\n\n\nvec3 rotate_y(vec3 v, float angle)\n{\n\tfloat ca = cos(angle); float sa = sin(angle);\n\treturn v*mat3(\n\t\tca, 0.0, -sa,\n\t\t0.0, 1.0, 0.0,\n\t\tsa, 0.0, ca);\n}\n\nvec3 rotate_x(vec3 v, float angle)\n{\n\tfloat ca = cos(angle); float sa = sin(angle);\n\treturn v*mat3(\n\t\t1.0, 0.0, 0.0,\n\t\t0.0, ca, -sa,\n\t\t0.0, sa, ca);\n}\n\n\nvec3 rotate_z(vec3 v, float angle)\n{\n\tfloat ca = cos(angle); \n    float sa = sin(angle);\n\treturn v*mat3(\n\t\tca, -sa, 0.0,\n\t\tsa, ca, 0.0,\n\t\t0.0, 0.0, 1.0);\n}\n\n///-----------------------------------------\n\n\nvec3 LightShading(vec3 Normal,vec3 toLight,vec3 toEye,vec3 color)\n{\n    vec3 toReflectedLight=reflect(-toLight, Normal);\n    vec3 diffuse = max(0.,dot(Normal,-toLight))*color;\n    //vec3 specular = pow(max(0.,dot(Normal,normalize(-toLight-V))),100.)*vec3(1.,1.,1.); \n    float specularf=max(dot(toReflectedLight, toEye),0.0);\n    specularf=pow(specularf, 100.0);\n    vec3 specular =specularf*vec3(1.0);\n    \n    return diffuse + specular;\n}\n\n\n\n///-----------------------------------\nvec2 rotate(vec2 v, float a) {\n   return vec2(cos(a)*v.x + sin(a)*v.y, -sin(a)*v.x + cos(a)*v.y);\n}\n//----------------------------------------------------\n\nmat2 rotate(float a) \n{\n\tfloat c = cos(a);\n\tfloat s = sin(a);\n\treturn mat2(c, s, -s, c);\n}\n\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n  const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n  p = abs(p);\n  p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\n  vec2 d = vec2(\n       length(p.xy-vec2(clamp(p.x,-k.z*h.x,k.z*h.x), h.x))*sign(p.y-h.x),\n       p.z-h.y );\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\nvec2 mitadHexprism( vec3 p , vec2 b)\n{   \n    vec2 res=vec2(9999.0,-1.0);\n    \n    \n    vec3 q=p;\n      q=rotate_x(q, radians(90.0));\n\n    //14,3.0\n    float ancho=b.x;\n    float alto=b.y;\n    float profundo=ancho*3.141516;\n    \n    //mitad hexprism\n    float sdhp2= sdHexPrism( q-vec3(0.0,0.0,0.0), vec2(ancho,alto));\n    float sdhp3= sdHexPrism( q-vec3(0.0,0.0,0.0), vec2(ancho-3.0,alto+ 0.2));\n    float sdb1= sdBox(p- vec3(0.0,0.0,-profundo-0.5), vec3(ancho+2.0,alto+1.0,profundo) );\n    \n    float dif= differenceSDF(sdhp2, sdhp3);     \n    dif= differenceSDF(dif, sdb1);     \n    \n    res =opU(res, vec2(dif,23.0));     \n    return res;\n}\n    \n    \n///------------------------\nfloat GetDist(vec3 p  ) \n{\t\n\n    float d, dif1, dif2;\n    vec2 res;\n    vec3 pp,p1, p2,p3; \n    res = vec2(9999, 0);\n    \n    p.y=p.y+12.0;\n    \n\n    float planeDist1 = p.y+3.0;  //piso inf\n    float planeDist2 = 30.0-p.y;  //piso sup\n    float planeDist3 = p.x+30.0; //pared izq\n    float planeDist4 = 30.0-p.x;  //pared der\n    float planeDist5 = -p.z+40.0;  //pared atras\n    float planeDist6 = p.z+40.0;  //pared atras\n       \n    res =opU(res, vec2(planeDist1,26)); //inf\n    res =opU(res, vec2(planeDist2,26)); \n    res =opU(res, vec2(planeDist3,26)); \n    res =opU(res, vec2(planeDist4,26)); \n  \tres =opU(res, vec2(planeDist5,26)); \n  \n    \n    \n    vec3 q=p;\n      q=rotate_x(q, radians(90.0));\n    float sdhp1= sdHexPrism( q-vec3(0.0,0.0,0.0), vec2(7.0,3.0));\n    \n    \n    float sdhp2;\n    float sdhp3;\n    float sdb1;\n    float dif;\n        \n    \n    //mitad hexprism\n     sdhp2= sdHexPrism( q-vec3(0.0,0.0,0.0), vec2(14.0,3.0));\n     sdhp3= sdHexPrism( q-vec3(0.0,0.0,0.0), vec2(11.0,3.2));\n     sdb1= sdBox(p- vec3(0.0,0.0,-7.5), vec3(16.0,4.0,7.0) );\n     dif= differenceSDF(sdhp2, sdhp3);     \n    dif= differenceSDF(dif, sdb1);     \n    res =opU(res, vec2(dif,106.0));     \n    \n    \n    \n    res =opU(res, vec2(sdhp1,108.0));     \n    \n    \n    //hexprism n2 //correcion por @dila\n    //sdhp2= sdHexPrism( q-vec3(0.0,0.0,3.0), vec2(17.0,6.0));\n    // hexprisma n2\n    sdhp2 = sdHexPrism (q-vec3 (0.0,0.0,3.0), vec2 (17.0,4.0));\n    \n    \n    sdhp3= sdHexPrism( q-vec3(0.0,0.0,3.0), vec2(14.0,6.2));\n    sdb1= sdBox(p- vec3(0.0,3.0,-11.5), vec3(20.0,6.5,9.0) );\n    dif= differenceSDF(sdhp2, sdhp3);     \n    dif= differenceSDF(dif, sdb1);     \n    res =opU(res, vec2(dif,104.0));     \n    \n    \n    \n    //hexprism n3\n    sdhp2= sdHexPrism( q-vec3(0.0,0.0,6.0), vec2(24.0,9.0));\n    sdhp3= sdHexPrism( q-vec3(0.0,0.0,6.0), vec2(21.0,10.2));\n    sdb1= sdBox(p- vec3(0.0,5.0,-12.5), vec3(28.0,12.5,12.0) );\n    dif= differenceSDF(sdhp2, sdhp3);     \n    dif= differenceSDF(dif, sdb1);\n    res =opU(res, vec2(dif,107.0));     \n    \n    float sdcy1= sdCylinderXZ(p-vec3(0.0,0.0,0.0), vec2(0.5,14.0) );\n    res =opU(res, vec2(sdcy1,14.0));     \n    \n    float sdsp1= sdSphere(p- light_pos1, 1.5 );\n    \n    res =opU(res, vec2(sdsp1,1.0));     \n    \n    \n    res =opU(res, vec2(1.0,0.0)); \n    \n    \n    d = res.x;\n    mObj.dist = res.x;\n    mObj.idcolor = res.y;\n    \n    return d;\n}\n\n\n\n//---------actualizacion por Shane---28-may-2020    ...gracias\nfloat RayMarch(vec3 ro, vec3 rd) \n{\n\t\n    // The extra distance might force a near-plane hit, so\n    // it's set back to zero.\n    float dO = 0.; \n    //Determines size of shadow\n    for(int i=0; i<MAX_STEPS; i++) \n    {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        \n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n        dO += dS;\n        \n    }\n    \n    return dO;\n}\n\n\n\n\n//---------------------------------------------------\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    //Texture of white and black in image\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\n\n\n\n\nfloat GetLightPar(vec3 p, vec3 plig) {\n    vec3 lightPos = plig;\n    //Determine movement of light ex. shadow and light direction and diffusion\n   \n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l );\n    if(d<length(lightPos-p)) dif *= .1;\n    \n    return dif;\n}\n\n\nfloat saturate(float f)\n{\n\treturn clamp(f,0.0,1.0);\n}\n\n\n//----------------------------------------------------\n\n//Creado por dr2 en 2020-07-28\n//https://www.shadertoy.com/view/3lfBz8\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\n\n//Creado por dr2 en 2020-07-28\n//https://www.shadertoy.com/view/3lfBz8\nvec3 getMouse(vec3 ro)\n{    \n     vec4 mPtr = iMouse;\n  mPtr.xy = mPtr.xy / iResolution.xy - 0.5;\n  float tCur = iTime;\n    \n  float az = 0.;\n  float el = -0.15 * PI;\n\n    az += 2. * PI * mPtr.x;\n    el += PI * mPtr.y;\n \n    \n    \n  mat3 vuMat = StdVuMat (el, az);\n\treturn ro*vuMat;\n}\n\n\n//-------------------------------\nvec3 getColorTex( vec3 p, vec3 nor,  int i)\n{\n    \n\tif (i==100 ) { return tex3D(iChannel0, p/32., nor); }\n\tif (i==101 ) { return tex3D(iChannel1, p/32., nor); }\n\tif (i==102 ) { return tex3D(iChannel2, p/32., nor); }\n\tif (i==103 ) { return tex3D(iChannel3, p/32., nor); }\n    \n    if (i==104 ) { return tex3D(iChannel0, p/32., nor)*vec3(0.3,0.45,1.0); }\n    if (i==105 ) { return tex3D(iChannel0, p/32., nor)*vec3(0.8, 0.7,  0.88); }\n    if (i==106 ) { return tex3D(iChannel0, p/32., nor*0.5)* vec3(0.42, 0.85, 0.98);  }\n    if (i==107 ) { return tex3D(iChannel0, p/32., nor)* vec3(1.0,0.85,0.9);  }\n    if (i==108 ) { return tex3D(iChannel0, p/32., nor)* floor_colorv2(mObj.p)*4.0;  }\n    \n    \n    \n}\n\n\nvec3 Getluz(vec3 p, vec3 ro, vec3 rd,  vec3 nor , vec3 colobj ,vec3 plight_pos, vec3 plight_color)\n{   \n     \n    vec3 lightPos = plight_pos;\n    float intensity=1.0;\n\tconst float shininess = 100.0;\n\tvec3 l = normalize( p-lightPos);\n    vec3 v = normalize( p-ro);\n    vec3 h = normalize(v + l);\n    float diff = dot(nor, l);\n    float spec = max(0.0, pow(dot(nor, h), shininess)) * float(diff > 0.0);\n\tvec3 result = LightShading(nor,l,v, colobj)*intensity*plight_color;\n    \n  \n    return result;\n}\n    \n\n\n//------------------------------------------------\n\nvec3 GetColorYsurface(inout vec3 p, inout vec3 n, inout vec3 rd, int opmat)\n{\n   \tvec3 colobj;\n    \n    \n    if (opmat<100)\n\t\t{ colobj=getColor(int( opmat)); }\n    \n    \n    \n    if ( float( opmat)>=100.0  && float( opmat)<=199.0 ) \n \t{  vec3 coltex=getColorTex(p, n, int( opmat));\n        colobj=coltex;\n\t}\n\n    \n    return colobj;\n}\n\nvec3 GetLight( vec3 vLightPos, vec3 vLightColour, const in vec3 vRayOrigin,  const in vec3 vRayDir )\n{    \n    vec3 vToLight = vLightPos - vRayOrigin;\n    float fPointDot = dot(vToLight, vRayDir);\n    fPointDot = clamp(fPointDot, 0.0, 100.0);\n\n    vec3 vClosestPoint = vRayOrigin + vRayDir * fPointDot;\n    float fDist = length(vClosestPoint - vLightPos);\n\treturn sqrt(vLightColour * 0.5 / (fDist * fDist));    \n}\n\n\nvec3 GetSource0Pos(float t)\n{\n    return vec3(0.0, 0.0, 0.0);\n    //return light_pos1;\n}\n\nvec3 GetSource1Pos(float t)\n{\n    return vec3(mod(t * 10.0, 50.0) - 25.0, 0.0, -5.0);\n}\n\nvec3 GetSceneColour( const in vec3 vRayOrigin,  const in vec3 vRayDir )\n{\n    vec3 vResult = vec3(0.0);\n\n    vec3 d = vec3(1.0, 1.0, 3.0) / vRayDir;\n   \n\tfloat t = -d.y;\n    \n    \n \n    vec3 vLight0Colour = mix(vec3(1.0, 1.0, 0.1), vec3(0.1, 0.05, 0.0),  floor(fract(iTime) * 2.0)) * 10.0;\n    vResult += GetLight(GetSource0Pos(iTime), vLight0Colour, vRayOrigin, vRayDir);\n    \n    \n\n    vec3 vLight1Colour = vec3(1.0) * 10.0;\n    //vec3 vLight1Colour = mix(vec3(0.2, 0.9, 2.0), vec3(0.0, 0.25, 0.5),  floor(fract(iTime + 0.5) * 2.0)) * 10.0;\n    vResult += GetLight(GetSource1Pos(iTime), vLight1Colour, vRayOrigin, vRayDir);\n\n    return vResult;\n}\n\n///---------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\t\n    itime=iTime;\n    float t;\n    t=mod(iTime*2.0,100.0);\n   \n    \n \n\n light_pos1 = vec3(0.0,12.5,0.0);\n\tlight_color1= mix(vec3(1.0, 1.0, 0.1), vec3(0.1, 0.05, 0.0),  floor(fract(iTime) * 2.0)) * 10.0;\n   //light_color1 = vec3( 1.0 ,0.0,0.0);\n\n light_pos2   = vec3( 5.0, 2.0, -5.0 );\n light_color2 = vec3( 1.0, 1.0, 1.0 );\n \n    \n    \n\n    vec3 ro=vec3(0.0-3.0*cos(t),-3.0+3.0*sin(t),-25.0-3.0*sin(t));\n    //ro= getMouse(ro);\n    vec3 rd=normalize(vec3(uv,1.0));\n    \n    \n    vec3 col = vec3(0);\n    \n    TObj Obj;\n    \n    mObj.uv=uv;\n    mObj.rd=rd;\n    mObj.ro=ro;\n\n\t \n    \n    float d = RayMarch(ro, rd);\n    Obj=mObj;\n    \n  \n    vec3 p = (ro + rd * d ); \n    \n    mObj.p=p;\n    mObj.dist =d;\n    vec3 nor= GetNormal( p);\n    mObj.normal=nor;\n  \n    vec3 colobj;\n    colobj=GetColorYsurface( p, nor, rd,  int( Obj.idcolor));\n    \n\n  float dif1=1.0;\n   vec3 col2,col3;\n    \n    vec3 result;\n    \n    \n    \n    result += GetSceneColour(ro, rd);\n    \n    result/=1.25;\n    col3=result*colobj;\n    \n    \n     \n  \n    col= col3*dif1;\n    \n  \t\n    //sugerencia por dean_the_coder,\n    //col *= 1.0 - pow(d / 100.0, 1.5);\n    col *= 1.0 - pow(d / 100.0, 3.5);\n    \n    \n    col = pow(col, vec3(0.31454));  \n    \n    fragColor = vec4(col,1.0);\n\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"///------------------------------------\nstruct TObj\n{\n    float idcolor;\n    float dist;\n    vec3 normal;\n    vec3 ro;\n    vec3 rd;\n    vec2 uv;\n    vec3 color;\n    vec3 p;\n    vec3 rf;\n   \n};\n\n\nTObj mObj;\nvec3 glpRoRd;\nvec2 gres2;\nfloat itime;\n\n\n\n#define PI 3.14159265358979323846264\n#define PI2 6.28318530717\n#define TriplePI (3.0 * PI)\n#define DoublePI (2.0 * PI)\n#define HalfPI (PI / 2.0)\n\n\n\n\nvec3 hsv(vec3 c)\n{\n    vec4 k=vec4(1.,2./3.,1./3.,3.);\n    vec3 p=abs(fract(c.xxx+k.xyz)*6.-k.www);\n    return c.z*mix(k.xxx,clamp(p-k.xxx,0.,1.),c.y);\n}\n\n\n\n///Gracias por la Ayuda de SHane...16-jun-2020\n// Creditos a Shane por su funcion tex3D\n// Tri-Planar blending function. Based on an old Nvidia writeup:\n// GPU Gems 3 - Ryan Geiss: http://http.developer.nvidia.com/GPUGems3/gpugems3_ch01.html\nvec3 tex3D( sampler2D tex, in vec3 p, in vec3 n ){    \n    \n    // Ryan Geiss effectively multiplies the first line by 7. It took me a while to realize that \n    // it's largely redundant, due to the division process that follows. I'd never noticed on \n    // account of the fact that I'm not in the habit of questioning stuff written by Ryan Geiss. \n    n = max(n*n - .2, .001); // max(abs(n), 0.001), etc.\n    n /= dot(n, vec3(1)); \n    //n /= length(n); \n    \n    // Texure samples. One for each plane.\n    vec3 tx = texture(tex, p.yz).xyz;\n    vec3 ty = texture(tex, p.zx).xyz;\n    vec3 tz = texture(tex, p.xy).xyz;\n    \n    // Multiply each texture plane by its normal dominance factor.... or however you wish\n    // to describe it. For instance, if the normal faces up or down, the \"ty\" texture sample,\n    // represnting the XZ plane, will be used, which makes sense.\n    \n    // Textures are stored in sRGB (I think), so you have to convert them to linear space \n    // (squaring is a rough approximation) prior to working with them... or something like that. \n    // Once the final color value is gamma corrected, you should see correct looking colors.\n    return mat3(tx*tx, ty*ty, tz*tz)*n; // Equivalent to: tx*tx*n.x + ty*ty*n.y + tz*tz*n.z;\n\n}\n\n\n\n\n\n\n\nvec3 checkerBoard(float u, float v, float interval)\n{\n    float uu = floor(u/interval*2.0);\n    float vv = floor(v/interval*2.0);\n    float p =mod(uu+vv,2.0);\n    return vec3(0.1+0.9*p);\n}\n\n\nvec3 floor_color(vec3 norm, vec3 pos)\n{\n     vec3 flcolor1 = vec3(0.25);\n\t vec3 flcolor2 = vec3(0.95);\n    \n\tvec3 ocol = mix(flcolor1, flcolor2, mod(floor(pos.x)+floor(pos.z), 2.0));\n    return ocol;\n}\n\n\nvec3 floor_colorv2(vec3 p)\n{   \n float checker = clamp(sin(p.x)*sin(p.y)*sin(p.z+itime*4.0), 0.0, 1.0);\n        return vec3(0.4, 0.4, 0.4) * checker + vec3(0.1, 0.2, 0.2);\n}\n\n//----------------------------------------\nvec3 getColorTres(float hexx)\n{\n    \n    vec3 colors[3];\n    float nbcols=3.0;\n    colors[0] = vec3(.95, .88, .75);\n    colors[1] = vec3(.45, .65, .9);\n    colors[2] = vec3(.6, .9, .3);\n    \n    int colnr = int(mod(hexx, nbcols));\n    \n    \n    vec3 color2 = colnr==0?colors[0]:(colnr==1?colors[1]:colors[2]);\n    \n    return color2;\n}\n\n///-----------------------------------------\n//----------------------------------------------------\n\n\nvec3 getColor(int i)\n{\n    \n    float m;\nif (i==-2 ) { return mObj.color; }       \nif (i==0 ) { return vec3(0,0,0)/255.0; }\nif (i==1 ) { return vec3(255.,255.,255.)/255.0; }\nif (i==2 ) { return vec3(255,0,0)/255.0; }\nif (i==3 ) { return vec3(0,255,0)/255.0; }\nif (i==4 ) { return vec3(0,0,255)/255.0; }\nif (i==5 ) { return vec3(255,255,0)/255.0; }\nif (i==6 ) { return vec3(0,255,255)/255.0; }\nif (i==7 ) { return vec3(255,0,255)/255.0; }\nif (i==8 ) { return vec3(192,192,192)/255.0; }\nif (i==9 ) { return vec3(128,128,128)/255.0; }\nif (i==10 ) { return vec3(128,0,0)/255.0; }\nif (i==11 ) { return vec3(128,128,0)/255.0; }\nif (i==12 ) { return vec3(0,128,0)/255.0; }\nif (i==13 ) { return vec3(128,0,128)/255.0; }\nif (i==14 ) { return vec3(0,128,128)/255.0; }\nif (i==15 ) { return vec3(0,0,128)/255.0; }\n    \nif (i==16 ) { return vec3(255, 204, 188)/255.0; }\nif (i==17 ) { return vec3(0.8, 0.8, 0.8); }\nif (i==18 ) { return vec3(0.5, 0.5, 0.8); }\n\n    if(i== 19 )\n    {  return vec3(1, 0.5, 0);    } \n    if(i== 20 )\n    { return vec3(1.0, 1.0, 1.0); } \n    if(i== 21 )\n    {  return vec3(247./255., 168./255.,  184./255.);  } \n    if(i== 22 )\n    { return vec3(0, 1, 1);} \n    if(i== 23 )\n    { return vec3(85./255., 205./255., 252./255.); } \n    \n    \n    if(i== 24 )\n    { return floor_color(mObj.normal, mObj.p); } \n    \n    if(i== 25 )\n    { return floor_color(mObj.normal, mObj.p)*getColorTres(mObj.p.x); } \n    //{ return floor_color(mObj.normal, mObj.p)*getColorTres(length( mObj.p)); } \n    \n    if(i== 26 )\n    { return  floor_colorv2(mObj.p);} \n    \n    \n    if (i== 27 )\n    {\n    \tvec3 col = vec3(0.4, 0.75, 1.0) - vec3(0.02, 0.03, 0.01)*1.7 * mObj.p.y;\n        return col;\n    } \n    \n      \n   \n    \n    //////// Colorization\n\n}\n\n///--------------------------------------------\n\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"//referencia de sonido\n// Remnant X\n// by David Hoskins.\n//https://www.shadertoy.com/view/4sjSW1\n\n//y modificado por jorgeflores\n\n#define TAU  6.28318530718\n\nfloat n1 = 0.0;\nfloat n2 = 0.0;\nfloat n3 = 0.0;\nfloat n4 = 0.0;\nfloat fb_lp = 0.0;\nfloat fb_hp = 0.0;\nfloat hp = 0.0;\nfloat p4=1.0e-24;\n\nfloat gTime;\nfloat beat;\n\n\n#define N(a, b) if(t > a){x = a; n = b;}\n#define K(a) if(t > a) x = a;\n#define BRING_IN\n\n#define _sample (1.0 / iSampleRate)\n\n// Low pass resonant filter...\nfloat Filter(float inp, float cut_lp, float res_lp)\n{\n\tfb_lp \t= res_lp+res_lp/(1.0-cut_lp + 1e-20);\n\tn1 \t\t= n1+cut_lp*(inp-n1+fb_lp*(n1-n2))+p4;\n\tn2\t\t= n2+cut_lp*(n1-n2);\n    return n2;\n}\n\n//----------------------------------------------------------------------------------\nfloat Tract(float x, float f, float bandwidth)\n{\n    float ret = sin(TAU * f * x) * exp(-bandwidth * 2.14159265359 * x);\n    return ret;\n}\n\n//----------------------------------------------------------------------------------\nfloat Hash(float p)\n{\n\tvec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\n\treturn fract(p2.x * p2.y * 3.4337) * .5;\n}\n\n//----------------------------------------------------------------------------------\nfloat Noise(float time, float pitch)\n{\n    float ret = Hash(floor(time * pitch));\n\treturn ret;\n}\n\n//----------------------------------------------------------------------------------\nfloat noteMIDI(float n)\n{\n\treturn 440.0 * exp2((n - 69.0) / 12.0);\n}\n\n//----------------------------------------------------------------------------------\nfloat Saw(float time, float pitch)\n{\n    float f1 = fract(time * pitch);\n    float f2 = fract(time * pitch * .99);\n    float f3 = fract(time * pitch * 2.01);\n    float f4 = fract(time * pitch * 4.01);\n    return (f1+f2*.7+f3*.4+f4*.3)*.8 - 1.0;\n}\n\n\n\n\n\n//----------------------------------------------------------------------------------\nfloat Leadv3()\n{\n    float n;\n    float x = 0.0;\n    \n    //#ifdef BRING_IN\n\t//if (beat < 16.0) return 0.0;\n    //#endif\n\n    float t = mod(beat+.15, 32.0);\n    \n    N(0.0, 58.0);\n    N(7.0, 58.0);\n    N(11.0, 95.0);\n    N(14.0, 95.0);\n    N(16.0, 85.0)\n    N(18.0, 80.0);\n    N(20.0, 82.0);\n   \n\n    float p = noteMIDI(float(n));\n    \n    t = t-x;\n    float vib = sin(TAU*6.0*gTime) * smoothstep(0.3, 2.0, t) * .001;\n    float vol = exp(-t*.2) * smoothstep(0.0, .4, t) * .05;\n    float t1 = 650.0  + sin(gTime*TAU*.312)*100.0;\n    float t2 = 600.0 + sin(gTime*TAU*.313)*200.0;\n    \n    \n    // Vocal tract simulating varying vowel sounds...\n\tfloat s = Tract(mod(gTime+vib, 1.0 / p), t1, 220.0);\n   \ts += Tract(mod(gTime+vib, 1.0 / p), t2, 220.0);\n   \t\n    // Octave down harmony...\n    \n  \ts += Tract(mod(gTime+vib, 2.0 / p), t1, 90.0);\n   \ts += Tract(mod(gTime+vib, 2.0 / p), t2, 120.0);\n   \ts += Tract(mod(gTime+vib, 2.0 / p), 2500.0, 160.0);\n    \n    s += Tract(mod(gTime+vib, 2.0 / p), 1500.0, 110.0);\n\n    s+= (Noise(t, t1)+ Noise(t, t2))*.75;\n\n    return s * vol;\n}\n\n\n\n\n//----------------------------------------------------------------------------------\nvec2 mainSound( in int samp,float time)\n{\n\tgTime = time;\n\tbeat = time * 1.5;\n    \n   \tvec2 audio = vec2(0.0, 0.0);\n    \n  \n    float lead =Leadv3();\n\n  \n    audio += vec2(lead);\n    \n    return clamp(audio * 1.5 * smoothstep(180.0, 172.0, time) * smoothstep(0.0, 1.0, time), -1.0, 1.0);\n    \n    //return vec2(0.0); // Disabled.\n}","name":"Sound","description":"","type":"sound"}]}