{"ver":"0.1","info":{"id":"lf3SWr","date":"1713783918","viewed":77,"name":"3d_spirals","username":"mkundera","description":"setting up a framework for playing with spirals in 3d","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["spiral"],"hasliked":0,"parentid":"4XjGDm","parentname":"ray_marching_spiral"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159\n\nfloat DistLine(vec3 ro, vec3 rd, vec3 p){\n    return length(cross(p-ro,rd))/length(rd); \n    //using the fact that the area of a parallelogram is given by the norm of the cross product\n    // of the vectors defining its consequent sides, and that it is also given by the base\n    // times the height, we can isolate the distance to the \n}\n\nfloat DrawPoint(vec3 ro, vec3 rd, vec3 p){\n    float d = DistLine(ro, rd, p);\n    d = smoothstep(0.05,0.04, d);\n    return d;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= .5; // centered coordinates\n    uv.x *= iResolution.x/iResolution.y; // keep aspect ratio\n    \n    vec3 ro = vec3(0., 0., -2.); // ray origin (distance from camera to center of screen)\n    vec3 rd = vec3(uv.x , uv.y, 0.) - ro; //ray intersection with the screen\n    \n    \n    \n    \n    \n    float d = 0.;\n    float ta = t;\n    float tb = t;\n    float tc = t;\n    float imax = 15.;\n    vec3 spiral = vec3(0.);\n    float j_adjusted = 0.;\n    \n    for (float j=0.; j < imax - 7.; j++){\n        \n        j_adjusted = (j - 3.)/4.;\n        for(float i=0.; i < imax; i++){\n\n            ta = t+ i/(imax) * PI*4.;\n\n            tb = t + i/(imax) * PI*4.;\n\n            tc = t + i/(imax) *PI*4.0;\n\n            float z = 4. + 2.*cos(1.*tc);\n\n            spiral = vec3( 0.7*sin(1.*ta),j_adjusted + 0.1*sin(2.*tb), z);\n\n            if(spiral.z > -1.9){\n                d += DrawPoint(ro, rd, spiral);\n            }\n        }\n    }\n      \n    // Output to screen\n    fragColor = vec4(d);\n    //fragColor += vec4(0.,0.,a, 1.);\n}","name":"Image","description":"","type":"image"}]}