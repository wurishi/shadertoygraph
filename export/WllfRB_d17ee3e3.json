{"ver":"0.1","info":{"id":"WllfRB","date":"1597055488","viewed":1358,"name":"Alpha Clip 1 bit dissolve","username":"nebbul","description":"1 bit alpha transition with edge glow\n\nProbably don't want to use animated procedural noise for this as pixels that already disappeared will reappear as the animation of the noise progresses","likes":19,"published":1,"flags":0,"usePreview":0,"tags":["transition","dissolve","alpha","clip"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// background grid from https://www.shadertoy.com/view/XtBfzz\n\nconst float N = 2.0; // grid ratio\nfloat gridTexture( in vec2 p )\n{\n    // coordinates\n    vec2 i = step( fract(p), vec2(1.0/N) );\n    //pattern\n    //return (1.0-i.x)*(1.0-i.y);   // grid (N=10)\n    \n    // other possible patterns are these\n    //return 1.0-i.x*i.y;           // squares (N=4)\n    return 1.0-i.x-i.y+2.0*i.x*i.y; // checker (N=2)\n}\n\n#define mask_tile 0.3\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    // UVs of the main Color texture\n\tvec2 uv = fragCoord.xy/iResolution.xy;\n\n    // color textures\n    vec4 clrA = texture(iChannel0, uv);\n    \n    // background grid\n    vec4 clrBG = 0.2 * vec4(1., 1., 1., 1.) * gridTexture(fragCoord.xy/iResolution.xx * vec2(5., 5.)) + 0.6;\n    \n    // set this to fade the alpha (0-1)\n    float t = (sin(iTime) + 1.) / 2.;\n    \n\t// set these to increase/decrease the edge width\n    float edge_width_start = 0.15; // width at the start of the dissolve (alpha = 1)\n    float edge_width_end = 0.05; // width at the end of the dissolve (alpha = 0)\n    \n    float edge_width = mix(edge_width_start, edge_width_end, smoothstep(0., 1., t)); // \n    \n    // increase the alpha range by the edge width so we are not left with only glowy edges \n    float myAlpha = mix(0. - edge_width, 1., t); \n    \n    // fade mask uv\n    vec2 uv_mask = fragCoord.xy/iResolution.xy;\n    \n    // fade mask texture\n    // use a linear texture that has values between 0-1\n    vec4 alphaTex = texture(iChannel1, uv_mask * mask_tile);\n\n    // alpha mask (1-bit)\n    float a = step(alphaTex.r, myAlpha);\n\n    // edge mask which is a slightly progressed version of the alpha\n    // this mask doesn't need to be 1 bit as it will just be added to the color\n    float edge = smoothstep(alphaTex.r - edge_width, alphaTex.r, myAlpha);\n\n    vec4 edgeColor = vec4(0., 0.1, 1.0, 1.0);\n    edgeColor *= edge * 10.;\n    \n    // add edge color to the color\n    clrA += edgeColor;\n\n    fragColor = mix(clrA, clrBG, a);\n}","name":"Image","description":"","type":"image"}]}