{"ver":"0.1","info":{"id":"4lKcRW","date":"1535344421","viewed":232,"name":"Kaleidopetals","username":"efairbanks","description":"Just some practice writing a ray marcher off my noggin. I deliberately used a low number of steps because I like how it the errors look.","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","kaleidoscopic","lofi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 look(vec2 xy, vec3 origin, vec3 target)\n{\n\tvec3 up=normalize(vec3(0.,1.,0.));\n    vec3 fwd=normalize(target-origin);\n    vec3 right=normalize(cross(fwd,up));\n    up=normalize(cross(fwd,right));\n    return normalize(fwd+right*xy.x+up*xy.y);\n}\nfloat map(vec3 p)\n{\n    for(int i=0;i<6;i++)\n    {\n        p-=0.33;\n        float d=atan(p.y,p.x);\n        float m=length(p.yx);\n        d+=0.6;\n        p.y=sin(d)*m;\n        p.x=cos(d)*m;\n        d=atan(p.z,p.x);\n        m=length(p.zx);\n        d+=0.7;\n        p.z=sin(d)*m;\n        p.x=cos(d)*m;\n        p=abs(p);\n    }\n    return length(p)-.2;\n}\n#define MAX_DISTANCE 5.\nfloat march(vec3 origin, vec3 ray)\n{\n    float t=.2;\n    for(int i=0;i<17; i++)\n    {\n\t\tfloat d=map(origin+ray*t);\n        if(d<0.001||d>=MAX_DISTANCE) break;\n        t+=d;\n    }\n    return min(t,MAX_DISTANCE);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv=(uv-0.5)*2.;\n\tuv.x=uv.x*iResolution.x/iResolution.y;   \n    vec3 camera=vec3(sin(iTime),sin(iTime),cos(iTime))*2.;\n\tfloat shade=1.-march(camera,look(uv,camera,vec3(0.)))/MAX_DISTANCE;\n    shade=pow(shade,3.);\n    fragColor = vec4(vec3(shade)*vec3(2.*shade,0.7,1.),1.0);\n}","name":"Image","description":"","type":"image"}]}