{"ver":"0.1","info":{"id":"X3GXRh","date":"1719937997","viewed":68,"name":"painterly effect","username":"sp3ctre","description":"painterly effect","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["imageprocessing","artistic","multipass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// use mouse click to drage the effect slider\n\n//posterization and post processing pass\nfloat slider = 0.5;\nfloat posterizeLvl=8.;\nfloat saturation =1.5;\nfloat brightness = -0.09;\nfloat contrast = .75;\nfloat gamma = .65;\n\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 texelSize = 1./iChannelResolution[0].xy;\n    slider = iMouse.x/iResolution.x;\n    \n    vec3 lumaVec = vec3(0.2126,0.7152,0.0722);\n\n    // hue posterization\n    vec3 col = texture(iChannel0,uv).xyz;\n    col = rgb2hsv(col);\n    col.x = floor(col.x*posterizeLvl+0.5)/posterizeLvl;\n    // color noise and hue shift\n    col.x += dot(texture(iChannel1,uv).xyz, lumaVec)/1.5 - 0.1;\n    col = hsv2rgb(col);\n//    col = floor(col*posterizeLvl+0.5)/posterizeLvl;\n    \n    // post processing\n    col=(col-0.5)*contrast +0.5+brightness;\n    float value = dot (col, lumaVec);\n    col = mix (vec3(value,value,value), col, saturation);\n    col = pow(col, vec3(gamma, gamma ,gamma));\n\n    // slider\n    if (uv.x < slider){   \n        fragColor = vec4(col,1.);\n//       fragColor = convolve(bbkernel, uv, texelSize);\n//       fragColor = Convolve(laplacekernel, uv, texelSize);\n    }else {\n       fragColor = texture(iChannel0, uv);\n    }\n    if (abs(uv.x - slider) < 0.001) fragColor = vec4(0,0.,0.,1.);//vec4(0.,0.,0.,1.);\n    \n    \n    \n//    arr = float[5](0.999,0.,0.5,0.25,0.75);\n//    arr = float[5](0.,0.25,0.5,0.75,0.99);\n//    radixSort(arr);\n//    fragColor = vec4(arr[int(iMouse.x/iResolution.x*5.)],0.,0.,1.);\n   \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// use mouse click to drag the effect slider\n\n//denoise pass\nfloat slider = 0.5;\nconst int denoise = 3;\nconst int denoiseKernelSize = (denoise*2+1)*(denoise*2+1);\n\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid countSort(inout float arr[denoiseKernelSize], float exp){\n    int count[10];\n    float outArr[denoiseKernelSize];\n    \n    for(int i=0; i<denoiseKernelSize; i++){\n        count[int(mod(arr[i]*exp,10.))]++;\n    }\n    \n    for (int i=1; i<10; i++){\n        count[i] += count[i-1];\n    }\n    \n    for (int i=denoiseKernelSize-1; i>=0; i--){\n        outArr[count[int(mod(arr[i]*exp,10.))] - 1] = arr[i];\n        count[int(mod(arr[i]*exp,10.))]--;\n    }\n    \n    for (int i=0; i<denoiseKernelSize; i++){\n        arr[i] = outArr[i];\n    }\n}\n\nvoid radixSort(inout float arr[denoiseKernelSize]){\n    for (float i=1000.;i>=10.;i/=10.){\n        countSort(arr, i);\n    }\n}\n\nfloat findmedian(vec2 uv, vec2 texelSize){\n    float lumaArr[(denoise*2+1)*(denoise*2+1)];\n    int index=0;\n    //create sorted array lumaArr\n    for (int i=-denoise; i<=denoise; i++){\n        for (int j=-denoise; j<=denoise; j++){\n            vec4 col = texture(iChannel0, uv + vec2(texelSize.x * float(j),texelSize.y * float(i)));\n            float colLuma = rgb2hsv(col.xyz).z;\n            lumaArr[index] = colLuma;\n/*            for (int k=index; k>0; k--){\n                if (lumaArr[k-1] < colLuma) break;\n                lumaArr[k] = lumaArr[k-1];\n                lumaArr[k-1] = colLuma;\n            } */\n            index++;\n        }\n    }\n    radixSort(lumaArr);\n    \n    return lumaArr[(denoiseKernelSize-1)/2];\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 texelSize = 1./iResolution.xy;\n    slider = iMouse.x/iResolution.x;\n    \n    vec3 lumaVec = vec3(0.2126,0.7152,0.0722);\n\n    float bbkernel[9] = float[9](1.,1.,1.,1.,1.,1.,1.,1.,1.);\n    float laplacekernel[9] = float[9](0.,-1.,0.,-1.,4.,-1.,0.,-1.,0.);\n    \n\n    vec3 hsvcol = rgb2hsv(texture(iChannel0,uv).xyz);\n    hsvcol.z = findmedian(uv, texelSize);\n\n\n    if (uv.x < slider){   \n        fragColor = vec4(hsv2rgb(hsvcol),1.);\n//       fragColor = convolve(bbkernel, uv, texelSize);\n//       fragColor = Convolve(laplacekernel, uv, texelSize);\n    }else {\n       fragColor = texture(iChannel0, uv);\n    }\n    if (abs(uv.x - slider) < 0.001) fragColor = vec4(0,0.,0.,1.);//vec4(0.,0.,0.,1.);\n    \n    \n    \n//    arr = float[5](0.999,0.,0.5,0.25,0.75);\n//    arr = float[5](0.,0.25,0.5,0.75,0.99);\n//    radixSort(arr);\n//    fragColor = vec4(arr[int(iMouse.x/iResolution.x*5.)],0.,0.,1.);\n   \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// use mouse click to drage the effect slider\n\n//sharpening pass\nfloat sharpness = 2.;\nfloat slider = 0.5;\n\nvec4 convolve(float kernel[9], vec2 uv, vec2 texelSize){\n    vec4 col; \n    int index = 0;\n    float weight;\n    for (float i=-1.; i<=1.; i++){\n        for (float j=-1.; j<=1.; j++){\n            col += texture(iChannel0, uv + vec2(texelSize.x * j,texelSize.y * i)) * kernel[index];\n            index++;\n            weight += kernel[index];\n        }\n    }\n    return col/weight;\n}\n\nvec4 Convolve(float kernel[9], vec2 uv, vec2 texelSize){\n    vec4 col; \n    int index = 0;\n    for (float i=-1.; i<=1.; i++){\n        for (float j=-1.; j<=1.; j++){\n            col += texture(iChannel0, uv + vec2(texelSize.x * j,texelSize.y * i)) * kernel[index];\n            index++;\n        }\n    }\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 texelSize = 1./iResolution.xy*sharpness;\n    slider = iMouse.x/iResolution.x;\n    \n    vec3 lumaVec = vec3(0.2126,0.7152,0.0722);\n\n    float bbkernel[9] = float[9](1.,1.,1.,1.,1.,1.,1.,1.,1.);\n    float laplacekernel[9] = float[9](0.,-1.,0.,-1.,4.,-1.,0.,-1.,0.);\n    float hbfkernel[9] = float[9](0., -1., 0., -1., 5., -1., 0., -1., 0.);\n\n\n    if (uv.x < slider){   \n//        fragColor = vec4(hsv2rgb(hsvcol),1.);\n//       fragColor = convolve(bbkernel, uv, texelSize);\n       fragColor = Convolve(hbfkernel, uv, texelSize);\n    }else {\n       fragColor = texture(iChannel0, uv);\n    }\n    if (abs(uv.x - slider) < 0.001) fragColor = vec4(0,0.,0.,1.);//vec4(0.,0.,0.,1.);\n    \n    \n    \n//    arr = float[5](0.999,0.,0.5,0.25,0.75);\n//    arr = float[5](0.,0.25,0.5,0.75,0.99);\n//    radixSort(arr);\n//    fragColor = vec4(arr[int(iMouse.x/iResolution.x*5.)],0.,0.,1.);\n   \n}","name":"Buffer B","description":"","type":"buffer"}]}