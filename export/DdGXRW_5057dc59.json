{"ver":"0.1","info":{"id":"DdGXRW","date":"1680837206","viewed":110,"name":"Feynman's Lost Lecture","username":"curtisjhu","description":"Turning Circle's into Ellipses. A simple way of visualizing all the tangential velocities of a body in an elliptical orbit.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["math"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265\n\nfloat drawLine (vec2 p1, vec2 p2, vec2 uv, float w)\n{\n    float percent = dot(p1-p2, uv-p2)/(length(p1-p2)*length(p1-p2));\n    percent = clamp(percent, 0.0, 1.0);\n    vec2 closestPoint = percent*(p1-p2) + p2;\n    return length(closestPoint - uv);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0*fragCoord - iResolution.xy) /iResolution.y;\n    \n    float stage1 = 1.0;\n    float stage2 = stage1 + 2.0;\n    float stage3 = stage2 + 2.0;\n    float totalAnimationTime = stage3 + 15.0; // make sure + length of final stage\n    float time = mod(iTime, totalAnimationTime);\n    \n    vec3 col = vec3(0.0);\n    \n    float w = 0.02;\n    float r = 0.9;\n    float isCircle = smoothstep(r, r+0.01, length(uv)) * smoothstep(r+w+0.01, r+w, length(uv) );\n    if (isCircle > 0.0)\n        col = vec3(0.0, 0.7, 1.0);\n    \n    \n    if (time > stage1) {\n        vec2 foci = vec2(0.5, 0.0);\n        float isFoci = 1.0 - smoothstep(0.03, 0.032, length(uv - foci));\n        \n        float totalLines = 50.0;\n        \n        if (time > stage2 && time < stage3) {\n            float transition = clamp((time - stage2) / 3.0, 0.0, 1.0);\n            \n            for (float ang = 0.0; ang < 2.0*PI; ang += PI/totalLines) {\n                vec2 p = r*vec2(cos(ang), sin(ang));\n                col += smoothstep(4.0/iResolution.y, 0.0, drawLine(p, foci, uv, 0.007));\n                \n                // without antialiasing\n                // if (drawLine(p, foci, uv, 0.007) > 0.0)\n                  //  col = vec3(1.0) * transition;\n            }\n        }\n        \n        if (time > stage3) {\n            float duration = 5.0;\n            float percent = clamp((time-stage3)/duration, 0.0, 1.0);\n            \n\n            for (float ang = 0.0, i = 0.0; ang < 2.0*PI; ang += PI/totalLines, i++) {\n                vec2 p = r*vec2(cos(ang), sin(ang));\n                vec2 p2 = foci;\n                \n                vec2 midPoint = (length(p-foci)/2.0)*normalize(p-foci) + foci;\n                \n                float rotateAng = percent*PI/2.0;\n                mat2 rotate = mat2( vec2(cos(rotateAng), sin(rotateAng)),\n                                    vec2(-sin(rotateAng), cos(rotateAng))\n                                  );\n                p = rotate*(p-midPoint) + midPoint;\n                p2 = rotate*(p2-midPoint) + midPoint;\n                \n                col += smoothstep(4.0/iResolution.y, 0.0, drawLine(p, p2, uv, 0.007));\n                \n                // without antialiasing\n                // if (drawLine(p, p2, uv, 0.005) > 0.0)\n                    // col = vec3(1.0);\n            }\n        }\n        \n        \n        if (isFoci > 0.0) {\n            float transition = clamp((time - stage1) / 3.0, 0.0, 1.0);\n            col = vec3(1.0, 0.2, 0.0) * transition;\n        }\n        \n    }\n\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}