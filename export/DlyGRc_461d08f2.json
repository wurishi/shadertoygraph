{"ver":"0.1","info":{"id":"DlyGRc","date":"1684344064","viewed":48,"name":"Simplex Bayer Attempt","username":"izutionix","description":"anyone know why the dither gradient stays at 0.5 in the middle? (if I don't use the workaround) (line 67-75)\nforked from [url]https://www.shadertoy.com/view/MttSDs[/url] by ptrgags","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["triangles","simplex","simplexgrid"],"hasliked":0,"parentid":"ctyGRc","parentname":"Fork Simplex Grid izutionix"},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// forked from ptrgags's https://www.shadertoy.com/view/MttSDs\n\n#define PI 3.1415\n\n\n#define iterBayerMat 15\n// https://www.shadertoy.com/view/ltsyWl\n#define bayer2x2(a) (4-(a).x-((a).y<<1))%4\n// return bayer matrix (bitwise operands for speed over compatibility)\nfloat GetBayerFromCoordLevel(vec2 pixelpos) {\n    ivec2 p=ivec2(pixelpos);\n    int a=0;\n    for(int i=0; i<iterBayerMat; i++) {\n        a += bayer2x2(p >> (iterBayerMat-1-i) & 1) << (2*i);\n    }\n    return float(a)/float(2<<(iterBayerMat*2-1));\n}\n/*\\*/\n\nvec2 rhombi(vec2 point) {\n    mat2 transform = mat2(\n        1.0, 0.0,\n        //cot(60°), csc(60°)\n        1.0 / tan(PI / 3.0), 1.0 / sin(PI / 3.0)\n    );\n    return transform * point;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mouse_uv = iMouse.xy / iResolution.xy;\n    \n    if (dot(mouse_uv, vec2(1.))==0.) // if no mouse\n        mouse_uv = .5+.5*cos(vec2(iTime,0.5));\n    \n    //screen space -> uv space\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    //Fix aspect ratio\n    float aspect = iResolution.x / iResolution.y;\n    uv.x *= aspect;\n    \n    //Pan around with the mouse\n    //uv += mouse_uv;\n    \n    //How many rhombus-shaped cells to make\n    float scale = iResolution.x/13.;\n    \n    //skew space\n    uv = rhombi(uv);\n    \n    //Scale up space from [0.0, 1.0] -> [0.0, num_boxes]\n    uv *= scale;\n    \n    //Get the (x, y) indices of the box.\n    //box as in container. these 'boxes' are rhombi!\n    vec2 box = floor(uv);\n    \n    //Get the UV coordinates within the current rhombus\n    vec2 box_uv = fract(uv);\n    \n    box.x += 0.5*step(box_uv.y, box_uv.x); // makes the rombi actually triangles\n    box *= 2.;\n    \n    float dithering = GetBayerFromCoordLevel(box);\n    \n    #define weirdfix\n    // Idk why but if this is turned off the middle half of the pattern stays at 0.5 plz help\n    #ifdef weirdfix\n        if (dithering < 0.25)\n            dithering *= 4.;\n        else\n            dithering = 4.*(dithering-0.5);\n        dithering *= 0.5;\n    #endif\n    \n    // mouse controls threshold:\n    fragColor = vec4(dithering < mouse_uv.x);\n    \n    // video controls threshold:\n    //fragColor = vec4(dithering < pow(texture(iChannel0, fragCoord/iResolution.xy).r, 2.2));\n    \n    // video, attempting to 'triangle'-pixelate:\n    //fragColor = vec4(dithering < pow(texture(iChannel0, (box*inverse(rhombitransform)/scale/vec2(aspect,1.))).r, 2.2));\n    \n    // display the threshold map:\n    //fragColor = vec4(pow(dithering, 2.));\n    \n\t//fragColor = vec4(box / scale, 0.0, 1.0);\n}","name":"Image","description":"","type":"image"}]}