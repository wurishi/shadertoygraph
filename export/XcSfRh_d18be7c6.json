{"ver":"0.1","info":{"id":"XcSfRh","date":"1724616536","viewed":26,"name":"chiral voxel subdivision of cube","username":"jt","description":"Subdivide cube into three axial cuboids and six chiral cuboids (quantized into voxels).\nThis variant is suitable for use in a voxel-grid.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["voxels","cube","subdivision","cuboid","chiral","axial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/XcSfRh chiral voxel subdivision of cube, 2024 jt\n\n// Subdivide cube into three axial cuboids and six chiral cuboids (quantized into voxels).\n// This variant is suitable for use in a voxel-grid.\n\n// tags: voxels, cube, cuboid, subdivision, axial, chiral\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvec3 hash33(vec3 p3) // Hash without Sine by Dave_Hoskins https://www.shadertoy.com/view/4djSRW\n{\n    p3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\n//#define hashi(x)   lowbias32(x)\n#define hashi(x)   triple32(x) \n#define hash(x)  ( float( hashi(x) ) / float( 0xffffffffU ) )\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2\n// implementation of Chris Wellons' https://nullprogram.com/blog/2018/07/31/\n//bias: 0.17353355999581582 ( very probably the best of its kind )\nuint lowbias32(uint x)\n{\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return x;\n}\n\n// bias: 0.020888578919738908 = minimal theoretic limit\nuint triple32(uint x)\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bbU;\n    x ^= x >> 11;\n    x *= 0xac4c1b51U;\n    x ^= x >> 15;\n    x *= 0x31848babU;\n    x ^= x >> 14;\n    return x;\n}\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\n// https://www.shadertoy.com/view/DtjyWD integer division - rounding down\nint div_floor(int a, int b) // vector version thanks to Fabrice\n{\n    int    S = (sign(abs(a*b))-sign(a*b))/2; // 0 if a*b >= 0\n    return S * ((1 - abs(a)) / abs(b) - 1)+(1-S)*(a / b); // emulates ()?:\n}\n\n// this implementation avoids operator % for stability on windows XXX differs from original at 0 ? XXX\n// https://www.shadertoy.com/view/DtjyWD integer modulo strictly positive\nint mod_positive(int a, int b) // vector version thanks to Fabrice\n{\n    return a - div_floor(a, b) * b;\n}\n\n// https://www.shadertoy.com/view/DtjyWD integer division - rounding down\nivec3 div_floor(ivec3 a, ivec3 b) // vector version thanks to Fabrice\n{\n    ivec3  S = (sign(abs(a*b))-sign(a*b))/2; // 0 if a*b >= 0\n    return S * ((1 - abs(a)) / abs(b) - 1)+(1-S)*(a / b); // emulates ()?:\n}\n\n// this implementation avoids operator % for stability on windows XXX differs from original at 0 ? XXX\n// https://www.shadertoy.com/view/DtjyWD integer modulo strictly positive\nivec3 mod_positive(ivec3 a, ivec3 b) // vector version thanks to Fabrice\n{\n    return a - div_floor(a, b) * b;\n}\n\nstruct subdivision_result\n{\n    ivec3 p;\n    ivec3 q;\n    uint index;\n};\n\nsubdivision_result chirally_subdivided_cube(ivec3 v, ivec3 p, ivec3 q, int n) // https://www.shadertoy.com/view/XcSfRh chiral voxel subdivision of cube (jt)\n{\n    ivec3 d = div_floor(v, ivec3(n));\n    //if(any(lessThan(d, ivec3(-1))) || any(greaterThanEqual(d, ivec3(1)))) return 0u;\n    if(any(lessThan(d, ivec3(0))) || any(greaterThanEqual(d, ivec3(1)))) return subdivision_result(ivec3(0), ivec3(0), 0u);\n\n    //bvec3 m = equal(d % 1, ivec3(1));\n    bvec3 m = equal(d&1, ivec3(1));\n\n    //v = v % 3; // XXX WARNING: NEGATIVE % BREAKS ON WINDOWS? XXX\n    v = mod_positive(v, ivec3(n)); // NOTE: Need strictly positive modulo here (why isn't that a built-in operator?!)\n\n    // mirror every other cube\n    if(m.x) v.x = n-1 - v.x;\n    if(m.y) v.y = n-1 - v.y;\n    if(m.z) v.z = n-1 - v.z;\n\n    // axis\n    if(v.x < p.x && v.y < p.y && v.z < p.z) return subdivision_result(ivec3(0), p, 8u);\n    if(v.x >= p.x && v.y >= p.y && v.z >= p.z && v.x < q.x && v.y < q.y && v.z < q.z) return subdivision_result(p, q, 7u);\n    if(v.x >= q.x && v.y >= q.y && v.z >= q.z) return subdivision_result(q, ivec3(n), 15u);\n\n    // chiral\n    if(v.z < p.z && v.x >= p.x && v.y < q.y) return subdivision_result(ivec3(p.x,0,0), ivec3(n,q.y,q.z), 1u);\n    if(v.x < p.x && v.y >= p.y && v.z < q.z) return subdivision_result(ivec3(0,p.y,0), ivec3(p.x,n,q.z), 2u);\n    if(v.y < p.y && v.z >= p.z && v.x < q.x) return subdivision_result(ivec3(0,0,p.z), ivec3(q.x,p.y,n), 4u);\n    // chiral\n    if(v.z >= q.z && v.y >= p.y && v.x < q.x) return subdivision_result(ivec3(0,p.y,q.z), ivec3(q.x,n,n), 6u);\n    if(v.y >= q.y && v.x >= p.x && v.z < q.z) return subdivision_result(ivec3(p.x,q.y,0), ivec3(n,n,q.z), 3u);\n    if(v.x >= q.x && v.z >= p.z && v.y < q.y) return subdivision_result(ivec3(q.x,0,p.z), ivec3(n,q.y,n), 5u);\n\n    return subdivision_result(ivec3(0), ivec3(0), 0u);\n}\n\nivec3 quantize(ivec3 n, vec3 unit) // input n, 0 <= unit < 1, output (1,..,n-1)\n{\n    return ivec3((floor(unit*vec3(n-1))+1.0));\n}\n\nsubdivision_result chirally_subdivided_cube_random(ivec3 v, ivec3 seed0, ivec3 seed1, int n)\n{\n    if(true) // let voxel influence randomness\n    {\n        ivec3 d = div_floor(v, ivec3(n));\n        seed0 ^= d;\n        seed1 ^= d;\n    }\n    ivec3 a = quantize(ivec3(n-1), hash33(vec3(seed0)));\n    ivec3 b = a+quantize(n-a, hash33(vec3(seed1)));\n    return chirally_subdivided_cube(v, a, b, n);\n}\n\n#define BLACK vec3(0)\n#define RED vec3(1,0,0)\n#define GREEN vec3(0,1,0)\n#define YELLOW vec3(1,1,0)\n#define BLUE vec3(0,0,1)\n#define MAGENTA vec3(1,0,1)\n#define CYAN vec3(0,1,1)\n#define WHITE vec3(1,1,1)\n#define DARKGREY vec3(1.0/3.0)\n#define REDGREY vec3(0.5,0,0)\n#define GREENGREY vec3(0,0.5,0)\n#define YELLOWGREY vec3(0.5,0.5,0)\n#define BLUEGREY vec3(0,0,0.5)\n#define MAGENTAGREY vec3(0.5,0,0.5)\n#define CYANGREY vec3(0,0.5,0.5)\n#define LIGHTGREY vec3(2.0/3.0)\n\n#define COLORS vec3[](BLACK,RED,GREEN,YELLOW,BLUE,MAGENTA,CYAN,WHITE,DARKGREY,REDGREY,GREENGREY,YELLOWGREY,BLUEGREY,MAGENTAGREY,CYANGREY,LIGHTGREY)\n\nvec3 code(uint c)\n{\n    //return COLORS[c % 16u]; // NOTE: % seems to breaks on windows for negative int - uint ok? XXX\n    return COLORS[c & 15u];\n}\n\n#define MAX_RAY_STEPS 64\n\nvoid mainImage(out vec4 fragColor, in vec2 I)\n{\n    bool demo = max(iMouse.x, iMouse.y) < 5.0;\n    vec2 R = iResolution.xy;\n    //I = 2.0 * I.xy / R - 1.0;\n    //I.x *= R.x / R.y;\n    I = (2.0 * I - R) / R.y; // thanks Fabrice for reminding me (repeatedly) to use this nice one-liner :D\n    vec3 rd = normalize(vec3(I.x, 2.0, I.y)); // must be normalized!\n    vec3 ro = vec3(0.0,-25.0, 0.0);\n\n    float mx = -2.0 * pi * float(iMouse.x) / R.x;\n    float my = -pi / 2.0 + pi * float(iMouse.y) / R.y;\n    //mx = !demo ? mx : +pi / 4.0 + 2.0 * pi * fract(iTime * 0.01);\n    mx = !demo ? mx : +pi / 2.0 + 2.0 * pi * fract(iTime * 0.01);\n    my = !demo ? my : -pi / 5.0;\n\n    mat3 M = yaw_pitch_roll(mx, my, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n    \n    int n = 6;\n    ro += float(n)/2.0;\n\n    vec3 color = vec3(0.0);\n\n    {\n        // Based on https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4 (somewhat reduced)\n        // \"The raycasting code is somewhat based around a 2D raycasting toutorial found here:\n        //  http://lodev.org/cgtutor/raycasting.html\" (fb39ca4)\n        bvec3 mask;\n        ivec3 cell = ivec3(floor(ro));\n        vec3 dd = 1.0 / abs(rd);\n        ivec3 rs = ivec3(sign(rd));\n        vec3 sd = (sign(rd) * (vec3(cell) - ro) + (sign(rd) * 0.5) + 0.5) * dd;\n        for (int i = 0; i < MAX_RAY_STEPS; i++)\n        {\n            ivec3 seed0 = ivec3(floor(iTime)*2.0+0.0);\n            ivec3 seed1 = ivec3(floor(iTime)*2.0+1.0);\n            subdivision_result q = chirally_subdivided_cube_random(cell, seed0, seed1, n);\n\n            //uint q = filling_space_with_two_cubes(cell, ivec3(1,2,1), ivec3(2,4,5), n);\n            //uint q = filling_space_with_two_cubes(cell, ivec3(4), ivec3(5), n);\n            //if(q > 0u && (1.0 - fract(iTime/9.0)) * 9.0 < float(q))\n            //if(q > 0u && (1.0 - fract(iTime/15.0)) * 15.0 <= float(q))\n            if(q.index > 0u)\n            {\n                color = code(q.index);\n                break;\n            }\n\n            mask = lessThanEqual(sd.xyz, min(sd.yzx, sd.zxy));\n            sd += vec3(mask) * dd;\n            cell += ivec3(vec3(mask)) * rs;\n        }\n\n        color *= mask.x ? vec3(0.25) : mask.y ? vec3(0.5) : mask.z ? vec3(1.0) : vec3(0.0);\n    }\n\n    fragColor = vec4(sqrt(color), 1.0); // gamma corrected\n}\n","name":"Image","description":"","type":"image"}]}