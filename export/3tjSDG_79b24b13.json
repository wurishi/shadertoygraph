{"ver":"0.1","info":{"id":"3tjSDG","date":"1566950371","viewed":79,"name":"Color from Trig","username":"gressettd","description":"Experimenting with an idea that pattern functions return \"color control\" info, different perspectives on the same pattern. This drives the color mapping functions. This should increase the complexity / richness of even simple patterns, in this case trig.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["wave","color"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float scale = 1.0;\n\nvec4 ComputeWaveGradientRGB(float t, vec4 bias, vec4 scale, vec4 freq, vec4 phase)\n{\n\tvec4 rgb = bias + scale * cos(6.28 * (freq * t + phase));\n\treturn vec4(clamp(rgb.xyz,0.0,1.0), 1.0);\n}\n\n\nvec4 ComputeWaveGradientPattern(\n\tvec2 p,\n\tint hv,\n\tfloat bias, float scale, float freq, float phase)\n{\n\tfloat ts = (float(hv) * p.x) + (1.0 - float(hv) * p.y);\n\tfloat tc = (float(hv) * p.y) + (1.0 - float(hv) * p.x);\n\tfloat svalue = bias + (scale * sin(6.28 * (freq * ts + phase)));\n\tfloat cvalue = bias + (scale * cos(6.28 * (freq * tc + phase)));\n\tfloat angle = atan(p.y, p.x);\n\tfloat angleBand = (0.5 * cos(10.0 * 6.28 * angle)) + 1.0;\n\treturn vec4(svalue,cvalue,angle,angleBand);\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= float(iResolution.x) / float(iResolution.y);\n    \n    uv *= 1.0 / scale;\n\n    float maxRes = max(float(iResolution.x), float(iResolution.y));\n    \n    float tm = iTime *0.31;\n    \n    \n    \n    vec4 bias = vec4(0.350,0.906,0.689,1.0);\n    vec4 scale = vec4(0.772,0.114,0.263,1.0);\n    vec4 freq = vec4(0.077,0.368,1.016,1.0);\n    vec4 phase = vec4(3.859,3.252,5.857,1.0);\n    \n    vec4 pattern = ComputeWaveGradientPattern(uv + (iTime), \n                                              0,\n                                              (bias.x *tm),\n                                              (scale.x * tm),\n                                              freq.x,\n                                              phase.x);\n        \n    \n    \n    vec4 baseColor = ComputeWaveGradientRGB((pattern.x * tm),bias,scale, freq, phase);\n\tvec4 accent0 = ComputeWaveGradientRGB((pattern.y * tm),bias,scale, freq, phase);\n    vec4 accent1 = ComputeWaveGradientRGB(fract(pattern.z*tm),bias,scale, freq, phase);\n    vec4 accent2 = ComputeWaveGradientRGB(fract(pattern.w*tm),bias,scale, freq, phase);\n    \n    \n    vec4 finalColor = (baseColor + accent0 + accent1 + accent2) / 4.0;\n    fragColor = finalColor;\n}","name":"Image","description":"","type":"image"}]}