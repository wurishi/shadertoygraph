{"ver":"0.1","info":{"id":"7sVyDW","date":"1654947333","viewed":119,"name":"Heart particles","username":"SergeyVol","description":"Heart particles\nFor add meme background check comments in code\nBaseline: https://www.shadertoy.com/view/ssBSzW","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["particles","hearts"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// For adding meme background do ctrl + shift + j on your browser\n// And do that:\n// gShaderToy.SetTexture(3, {mSrc:'https://www.meme-arsenal.com/memes/4868b933b9abecfe6e39fdfcef2d423d.jpg?dl=0', mType:'texture', mID:1, mSampler:{ filter: 'mipmap', wrap: 'repeat', vflip:'true', srgb:'false', internal:'byte' }});\n\nfloat getHeart(vec2 uv, vec2 offset)\n{\n    uv -= offset;\n    uv.y *= HEART_HEIGHT;\n    uv.y -= sqrt(clamp(abs(uv.x) + 0.01, 0.0, 0.1)) * 0.3;\n    float radius = HEART_RADUIS + pow(sin(2.0 + uv.y * 1.0) * 0.2 + 0.2, 2.0)* -0.4;\n    float circle = 1.0 - step(radius,length(uv)); \n    return circle;\n}\n\nfloat transparency(float timeCreate)\n{\n    float delta = iTime - timeCreate;\n    return clamp(1.0 - pow(delta / LIVE_TIME, TRANS_POW), 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel3, uv);\n\n    for (int i = 0; i < BUFFER_SIZE; ++i) {\n        vec4 particleData = texelFetch(iChannel0, ivec2(i, 0), 0);\n        if (particleData.w == 0.0) {\n            continue;\n        }\n        vec2 pos = decode_vec2(particleData.x);\n        float dist = length(pos - uv);\n        if (dist < DRAW_RADUIS) {\n            float heart = getHeart(uv, pos);\n            vec3 color = vec3(\n                random(vec2(particleData.z, 7.0)),\n                random(vec2(particleData.z, 17.0)),\n                random(vec2(particleData.z, 357.0))\n            );\n            float trans = transparency(particleData.z);\n            vec3 heartColor =  vec3(heart) * color * trans;\n            if (heartColor != vec3(0.0))\n                fragColor.rgb = tosRGB(mix(fromsRGB(heartColor), fromsRGB(fragColor.rgb), 1.0 - trans));\n        }\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 particlesData = texelFetch(iChannel1, ivec2(fragCoord), 0);\n    vec2 pos = decode_vec2(particlesData.x);\n    vec2 vel = decode_vec2(particlesData.y);\n    \n    pos += vel * iTimeDelta * VEL_MODIF;\n    pos.x += sin((iTime + particlesData.z) * POS_FREQ) * POS_AMPL;\n    vel.y += iTimeDelta * ACCEL_Y;\n    vel.x += sin((iTime + particlesData.z) * VEL_FREQ) * VEL_AMPL;\n    if (pos.x > 1.0 || pos.x < 0.0)\n        vel.x = -vel.x;\n    \n    particlesData.x = encode_vec2(pos);\n    particlesData.y = encode_vec2(vel);\n    uint bufferBegin = uint(texelFetch(iChannel0, ivec2(0, 0), 0));\n    uint bufferEnd = uint(texelFetch(iChannel0, ivec2(1, 0), 0));\n    uint idx = uint(fragCoord.x);\n    bool commonFill = idx >= bufferBegin && idx < bufferEnd;\n    bool overflowFill = bufferBegin > bufferEnd && (idx >= bufferBegin || idx < bufferEnd);\n    if (commonFill || overflowFill) {\n        vec2 pos = vec2(random(vec2(fragCoord.x, 5.0)), SPAWN_START_Y);\n        vec2 vel = vec2(random(vec2(fragCoord.x, 164.0)) * 2.0 - 1.0, 0.0);\n        particlesData = vec4(encode_vec2(pos), encode_vec2(vel), iTime, 1);\n    }\n    fragColor = particlesData;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const float QUANT_COUNT = 65536.0 - 1.0;\nconst float SRGB_POWER = 2.2;\nconst int BUFFER_SIZE = 800;\nconst int FRAME_SPAWN = 2;\nconst float SPAWN_COUNT = 1.0;\nconst float SPAWN_START_Y = -0.15;\nconst float VEL_MODIF = 0.2;\nconst float ACCEL_Y = 0.5;\nconst float POS_FREQ = 2.0;\nconst float VEL_FREQ = 1.0;\nconst float POS_AMPL = 0.002;\nconst float VEL_AMPL = 0.001;\nconst float DRAW_RADUIS = 0.2;\nconst float LIVE_TIME = 5.0;\nconst float TRANS_POW = 4.0;\nconst float HEART_RADUIS = 0.1;\nconst float HEART_HEIGHT = 0.8;\n\n\nfloat encode_vec2(vec2 v) {\n    v = clamp(v, vec2(-3.0), vec2(3.0));\n    v /= 3.0;\n    v *= 0.5;\n    v += 0.5;\n    v *= QUANT_COUNT;\n    return uintBitsToFloat(uint(v.x) << 16 | uint(v.y));\n}\n\nvec2 decode_vec2(float vi) {\n    vec2 v = vec2(floatBitsToUint(vi) >> 16u, floatBitsToUint(vi) & 0xFFFFu);\n    v /= QUANT_COUNT;\n    v -= 0.5;\n    v *= 2.0;\n    v *= 3.0;\n    return v;\n}\n\nfloat random(vec2 uv)\n{\n    return fract(sin(dot(uv,vec2(12.9898,78.233)))*43758.5453123);\n}\n\nvec3 fromsRGB(vec3 color) \n{\n    return pow(color, vec3(SRGB_POWER));\n}\n\nvec3 tosRGB(vec3 color)\n{\n    return pow(color, vec3(1.0 / SRGB_POWER));\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    uvec2 coords = uvec2(fragCoord);\n    if (coords.y == 0u && coords.x < 2u) {\n        if (iFrame % FRAME_SPAWN == 0 && coords.x == 1u) {\n            fragColor.x = float(int(texelFetch(iChannel0, ivec2(0, 0), 0).x + SPAWN_COUNT) % BUFFER_SIZE);\n        } else {\n            fragColor.x = texelFetch(iChannel0, ivec2(1, 0), 0).x;\n        }\n    }\n}","name":"Buffer B","description":"","type":"buffer"}]}