{"ver":"0.1","info":{"id":"l3syzs","date":"1726584452","viewed":19,"name":"Particle Gravity","username":"dackdel","description":"Trying to recreate https://i.giphy.com/media/v1.Y2lkPTc5MGI3NjExNDhlZzMybTY1bWJ1NTRjeDJwdGk5cjc3Ymhpbzk0bHI0a3JmdjN2bSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/upXLotyTCXLRkwNVhT/giphy.gif this. Any help is appreciated. Counter clock-wise is intentional","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["particle","gravity"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalize the fragment coordinates\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = uv * 2.0 - 1.0; // Transform uv to range [-1, 1]\n\n    vec3 color = vec3(0.0); // Initialize black background\n\n    // Center of rotation\n    vec2 center = vec2(0.0);\n\n    // Parameters for the particles\n    float numParticles = 200.0;  \n    float baseRadius = 0.5;      // Base radius of the circle\n    float innerRadius = baseRadius * 0.05; // Minimum radius on the bottom, closer to center\n    float speedBase = 0.5;       // Base speed of the rotation\n    float particleSize = 0.005;  // Size of the particles\n\n    // Iterate over all particles\n    for (float i = 0.0; i < numParticles; ++i) {\n        // Unique weight for each particle\n        float weight = fract(sin(i * 91.345 + 78.233) * 43758.5453);\n\n        // Compute angle for the current particle\n        float angle = i * 2.0 * PI / numParticles;\n\n        // Determine particle position without movement\n        vec2 staticPos = center + baseRadius * vec2(cos(angle), sin(angle));\n\n        // Gravity and speed modulation based on vertical position\n        float gravityEffect = 1.0 - smoothstep(-1.0, 1.0, staticPos.y);\n        float speed = mix(speedBase, speedBase * 5.0, gravityEffect);\n\n        // Adjust angle based on speed and time\n        angle += iTime * speed;\n\n        // Adjust radius based on gravity effect to be closer when moving south\n        float radius = mix(baseRadius, innerRadius, pow(gravityEffect, 3.0));\n\n        // Particle position in the circle with adjusted gravity\n        vec2 pos = center + radius * vec2(cos(angle), sin(angle));\n\n        // Draw the particle as a white dot\n        float dist = length(uv - pos);\n        color += vec3(1.0) * smoothstep(particleSize, 0.0, dist);\n    }\n\n    // Output the final color\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}