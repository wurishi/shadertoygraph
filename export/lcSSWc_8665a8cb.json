{"ver":"0.1","info":{"id":"lcSSWc","date":"1706881689","viewed":75,"name":"Shader Art Tutorial Part #2","username":"Smiley98","description":"such wow","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["art"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 95% of this shader is not mine. Full credit to the original author and his amazing content.\n// Source shader: https://www.shadertoy.com/view/mtyGWy\n// Source tutorial: https://youtu.be/f4s1h2YETNY\n\n//https://iquilezles.org/articles/palettes/\n// We can encode multiple frequencies into periodic functions,\n// and then decode them to get an rgb value!\nvec3 palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat sdStar5(in vec2 p, in float r, in float rf)\n{\n    const vec2 k1 = vec2(0.809016994375, -0.587785252292);\n    const vec2 k2 = vec2(-k1.x,k1.y);\n    p.x = abs(p.x);\n    p -= 2.0*max(dot(k1,p),0.0)*k1;\n    p -= 2.0*max(dot(k2,p),0.0)*k2;\n    p.x = abs(p.x);\n    p.y -= r;\n    vec2 ba = rf*vec2(-k1.y,k1.x) - vec2(0,1);\n    float h = clamp( dot(p,ba)/dot(ba,ba), 0.0, r );\n    return length(p-ba*h) * sign(p.y*ba.x-p.x*ba.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // aspect-corrected uvs within [-1, 1]\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    // copy of original uv so we can sample global distance relative to centre (before space repetition)\n    vec2 uv0 = uv;\n    \n    // Accumulate colour onto a black background\n    vec3 finalColor = vec3(0.0);\n    \n    // Increase/decrease the iteration count to control number of repetitions\n    for (float i = 0.0; i < 4.0; i++) {\n        // Repeat space then re-centre uvs\n        uv = fract(uv * 1.5) - 0.5;\n        \n        // Combining x^2 and e^-x^2\n        //float d = length(uv) * exp(-length(uv0));\n        float d = sdStar5(uv, 0.5, 0.4);\n        \n        // Animate colours based on distance, iteration count, and time\n        vec3 col = palette(length(uv0) + i*.4 + iTime*.4);\n        \n        // Create ripples\n        d = sin(d*8. + iTime)/8.;\n        d = abs(d);\n        d = pow(0.01 / d, 1.2);\n        \n        // Attenuate colour based on restricted logarithmic curve\n        finalColor += col * clamp(log(d), 0.01, 0.8);\n    }\n        \n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}