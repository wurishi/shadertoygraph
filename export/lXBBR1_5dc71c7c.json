{"ver":"0.1","info":{"id":"lXBBR1","date":"1729182337","viewed":48,"name":"Plastic Ratio Bluish Noise Gen","username":"chronos","description":"Plastic Ratio Bluish Noise Gen","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["noise","blue","monte","carlo","plastic","ratio","quasi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    Plastic Ratio Bluish Noise Gen by chronos\n    --------------------------------------------\n    \n    Concept: Started from thinking about 'inverting' the plastic ratio sequence.\n    \n    Similar to trying to invert the golden ratio sequence\n    \n    f = fract(i/golden + .5)\n    \n    Obviously, the fract() and irrationality makes this hard, so I thought about just brute-forcing it:\n    Try as many i as possible and use the closest.\n    \n    Then I of course realized that that's just the voronoi diagram of these points, colored by their index.\n    \n    So that's what I'm generating there, and normalizng the index / color to be in the range [0, 1]\n    \n    I kinda already did this in:\n        https://www.shadertoy.com/view/MXdGR7  ('The Plastic Ratio')\n    \n    \n    ---------------------------------------------------------------------------------------------------------------\n    \n        self link: https://www.shadertoy.com/view/lXBBR1\n*/\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(ivec2(fragCoord) - ivec2(iResolution.x/2. - iResolution.y/2., 0))/iResolution.y;\n    float ps = 1./iResolution.y;\n    \n    vec3 col = vec3(0);\n\n    col += texelFetch(iChannel0, ivec2(fragCoord) - ivec2(iResolution.x/2. - iResolution.y/2., 0), 0).rrr / min(float(iFrame) * candidates_per_frame, total_num_candidates);\n    \n    col *= step(uv.x, 1.) * step(0., uv.x);\n    \n    #if 0\n    col = pow(col, vec3(1./2.2));\n    #endif\n    \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float current_result = 0.;\n    vec2 p = (fragCoord.xy);\n    if(iFrame > 0) \n    {\n        current_result = texelFetch(iChannel0, ivec2(fragCoord), 0).r;\n    }\n    \n    float current_num_candidates = float(iFrame) * candidates_per_frame;\n    \n    if(current_num_candidates < total_num_candidates) // Not 100% sure whether it is best to use \n    for(float i = 0.;  i < candidates_per_frame; i++)\n    {\n        float candidate = float(iFrame) * candidates_per_frame + i;\n\n        vec2 p_candidate = fract(plastic * candidate +.5) * iResolution.y;\n        vec2 p_current = fract(plastic * current_result +.5) * iResolution.y;\n\n        //if(length(p - p_candidate) < length(p - p_current))\n        vec2 d_candidate = p - p_candidate;\n        vec2 d_current = p - p_current;\n        if(dot(d_candidate, d_candidate) < dot(d_current, d_current))\n        {\n            current_result = candidate;\n        }\n    }\n    \n    fragColor = vec4(current_result,0.0,0.0,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const float p1 = 0.7548776662466927; // reciprocal of plastic number\nconst float p2 = 0.5698402909980532; // reciprocal of squared plastic number\nconst vec2 plastic = vec2(p1, p2);\n\nconst float candidates_per_frame = 500.;\nconst float total_num_candidates = 120000.; // seems to run out of precision after this, so it will just stagnate and bias towards black\n\n\n\n\n","name":"Common","description":"","type":"common"}]}