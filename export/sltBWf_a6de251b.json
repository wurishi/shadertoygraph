{"ver":"0.1","info":{"id":"sltBWf","date":"1663769505","viewed":54,"name":"Flower Animation 3","username":"essaar","description":"Try to match the given flower patterns!\n\nBrownie points: how do you change the color of the flower from the center?","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["circle"],"hasliked":0,"parentid":"fltfWj","parentname":"Flower Animation 2"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * @author rah, inspired by jonobr1 / http://jonobr1.com/\n */\n\n/* \n * Output circle colors at given center pos and radius\n */\nvec4 circle(vec2 uv, vec2 center, float radius, vec3 color)\n{\n    // Get distance of point from center, get difference from given radius\n\tfloat d = length(center - uv) - radius;\n\tfloat t = clamp(d, 0.0, 1.0);\n    \n    // If point is smaller than radius, set color alpha to 1, otherwise 0\n\treturn vec4(color, 1.0 - t);\n}\n\nvec4 circle(vec2 uv, vec2 center, float radius, vec3 color, vec3 color2)\n{\n    vec2 uvCenter = (2.0f * uv - iResolution.xy);\n    // Get distance of point from center, get difference from given radius\n\tfloat d = length(center - uv) - radius;\n\tfloat t = clamp(d, 0.0, 1.0);\n    \n    // If point is smaller than radius, set color alpha to 1, otherwise 0\n    vec3 newColor = mix(color2, color, length(center - uv)/radius);\n\treturn vec4(newColor, 1.0 - t);\n}\n\n/*\n * Your work here!\n */\nfloat computeRadius(vec2 uv)\n{\n    float radius = 0.25 * iResolution.y;\n    \n    // Centered uv\n    vec2 uvCenter = (2.0f * uv - iResolution.xy);\n    // Get pixel angle around the center\n    float a = atan(uvCenter.x,uvCenter.y);\n    \n    // offset\n    a = 120.0 * triangleWave(sin(a * 4.0), 0.9, 2.0);\n    \n    // weight\n    float t = sin(iTime);\n    \n    // mix\n    radius = radius + (a * t);\n    \n    return radius;\n}\n\nfloat computeRadius2(vec2 uv)\n{\n    float radius = 0.25 * iResolution.y;\n    \n    // Centered uv\n    vec2 uvCenter = (2.0f * uv - iResolution.xy);\n    // Get pixel angle around the center\n    float a = atan(uvCenter.x,uvCenter.y);\n    \n    // offset\n    a = 200.0 * triangleWave(a * 5.0, 0.79, 2.0);\n    \n    // weight\n    float t = sin(iTime);\n    \n    // mix\n    radius = radius + (a * t);\n    \n    return radius;\n}\n\nfloat computeRadius3(float radius)\n{   \n    // offset\n    float a = 20.0;\n    \n    // weight\n    float t = sin(iTime);\n    \n    // mix\n    radius = radius + (a * t);\n    \n    return radius;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 uv = fragCoord.xy;\n\tvec2 center = iResolution.xy * 0.5;\n    \n    // Colors\n    vec3 lightYellow = rgb(255.0, 255.0, 210.0);\n\tvec3 lightYellow2 = rgb(250.0, 220.0, 170.0);\n\tvec3 red = rgb(225.0, 50.0, 70.0);\n\tvec3 red2 = rgb(250.0, 178.0, 75.0);\n\tvec3 darkYellow = rgb(225.0, 150.0, 70.0);\n\tvec3 green = rgb(137.0, 181.0, 136.0);\n\tvec3 green2 = rgb(63.0, 149.0, 104.0);\n    \n    // Background layer\n\tvec4 layer1 = vec4(mix(green2, green, fract(triangleWave(uv.y / 100.0, 1.0, 1.5))), 1.0);\n    \n    // rotate uvs\n    uv = rotatePoint2d(uv, center, iTime) + center;\n    \n    // Rotate flower\n    vec2 uv2 = rotatePoint2d(uv, center, 1.2 * iTime) + center;\n    \n\tfloat radius = computeRadius(uv);\n\tfloat radius2 = computeRadius2(uv2);\n    float radiusCenter = computeRadius3(30.0);\n\t\n\t// Circle1\n\tvec4 layer2 = circle(uv, center, radius, red, red2);\n    \n\t// Circle2\n\tvec4 layer3 = circle(uv2, center, radius2, darkYellow, lightYellow);\n    \n    // Center\n    vec4 layerCenter = circle(uv, center, radiusCenter, lightYellow, darkYellow);\n\t\n\t// Blend the two\n\tfragColor = mix(layer1, layer3, layer3.a);\n\tfragColor = mix(fragColor, layer2, layer2.a);\n\tfragColor = mix(fragColor, layerCenter, layerCenter.a);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\n * Toolbox functions! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */ \nfloat bias(float t, float b) {\n    return (t / ((((1.0/b) - 2.0)*(1.0 - t))+1.0));\n}\n\n/*\n * Basic Utilities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */\nfloat triangleWave(float x, float freq, float amp) {\n    return abs(mod((x * freq), amp) - (0.5 * amp));\n}\n\n/* \n * Rotate an input point about some center by angle\n */\nvec2 rotatePoint2d(vec2 uv, vec2 center, float angle)\n{\n    vec2 rotatedPoint = vec2(uv.x - center.x, uv.y - center.y);\n    float newX = cos(angle) * rotatedPoint.x - sin(angle) * rotatedPoint.y;\n    rotatedPoint.y = sin(angle) * rotatedPoint.x + cos(angle) * rotatedPoint.y;\n    rotatedPoint.x = newX;\n    return rotatedPoint;\n}\n\n/*\n * Make a vec3 color from rgb values [0, 255]\n */\nvec3 rgb(float r, float g, float b)\n{\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n\nvec2 tile(vec2 _st, float _zoom){\n  _st *= _zoom;\n  return fract(_st);\n}","name":"Common","description":"","type":"common"}]}