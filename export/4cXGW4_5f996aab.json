{"ver":"0.1","info":{"id":"4cXGW4","date":"1703043399","viewed":30,"name":"Kishimisu raymarch by leocb","username":"leocb","description":"as seen here: https://www.youtube.com/watch?v=khblXafu7iA","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","tutorial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Sphere SDF\nfloat sdSphere(vec3 p, float radius){\n    return length(p) - radius;\n}\n\n// Box SDF\nfloat sdBox(vec3 p, vec3 size){\n    vec3 q = abs(p) - size;\n    return length(max(q, 0.)) + min(max(q.x,max(q.y,q.z)),0.);\n}\n\n// Octahedron SDF\nfloat sdOctahedron(vec3 p, float s){\n   p = abs(p);\n   return (p.x + p.y + p.z - s) * .57735027;\n}\n\n// Smooth minimum\nfloat smin(float a, float b, float k){\n    float h = max(k-abs(a-b),0.)/k;\n    return min(a,b)-h*h*h*k*(1./6.);\n}\n\n// Pallete\nvec3 palette(float t)\n{\n    vec3 a = vec3(.5);\n    vec3 b = vec3(.5);\n    vec3 c = vec3(1.);\n    vec3 d = vec3(.263,.416,.557);\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n// 3D Rotation (oh no, here comes the quartenions, don't it?)\n// Rodrigues' rotation formula\nvec3 rot3D (vec3 p, vec3 axis, float angle){\n    return mix(dot(axis, p)*axis, p, cos(angle)) + cross(axis, p) * sin(angle);\n}\n\n// 2D rotation\nmat2 rot2D (float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\n\n// Distance to scene\nfloat map(vec3 p){\n    p.z += iTime * .4; // forward movement\n    p.xy = (fract(p.xy) - .5); // space repetition (spacing: 1)\n    p.z = mod(p.z, .25) - .125; // space repetition (spacing: .25)\n    float box = sdOctahedron(p, .15); // Cube SDF\n    \n    return box;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy)/iResolution.y;\n    vec2 m = (iMouse.xy * 2. - iResolution.xy)/iResolution.y;\n    \n    // initialize\n    float fovMult = 1.;\n    vec3 ro = vec3(0,0,-3); //ray origin\n    vec3 rd = normalize(vec3(uv * fovMult, 1)); // ray direction\n    vec3 col = vec3(0); // final pixel color\n    \n    float t = 0.; // total distance traveled by the ray\n    \n    \n    // Default circular motion if mouse is not pressed\n    if (iMouse.z < 0.) m = vec2(cos(iTime*.2), sin(iTime*.2));\n       \n    // Raymarch\n    int i;\n    for (i = 0; i < 80; i++){\n    \n        vec3 p = ro + rd * t; // position along the ray\n        \n        p.xy *= rot2D(t*.2 * m.x);\n        p.y += sin(t*(m.y+1.)*.5)*.35; // wiggle wiggle wiggle\n\n        \n        float d = map(p); // current distance to the scene\n\n        t += d; // \"march\" the ray\n        \n        if (d < .001 || d > 100.) break; // exit early if close enough or too far\n    }\n    \n    // Coloring\n    col = palette(t*.04 + float(i)*.005);\n    \n    fragColor = vec4(col, 1.0);\n    \n    \n}","name":"Image","description":"","type":"image"}]}