{"ver":"0.1","info":{"id":"DsBXWz","date":"1670121478","viewed":135,"name":"irregular sub-voxel block layout","username":"jt","description":"Variant of [url=https://www.shadertoy.com/view/DdlXDS]Irregular City Block Layout[/url] accelerated by hybrid voxel-ray-casting / ray-marching.\n(Artifacts appear when the camera is inside the geometry).","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["city","blocks","urban","architecture","construction","building","layout","irregular","asymmetric","development","planning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/DsBXWz irregular sub-voxel block layout by jt\n// based on https://www.shadertoy.com/view/DdlXDS Irregular City Block Layout\n// (based on https://www.shadertoy.com/view/ftcfWf Asymmetric Blocks SDF)\n// accelerated using https://www.shadertoy.com/view/NstSR8 Cast Voxels March Sub-Objects\n// (voxel-marching originally based on https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4\n//  with loop optimization by kzy, DDA based on http://lodev.org/cgtutor/raycasting.html\n//  with raymarching subobjects addon by jt).\n\n// Thanks to Shane for the irregular grid idea explained in https://www.shadertoy.com/view/Ws3GRs Asymmetric Blocks :)\n\n// tags: city, blocks, urban, architecture, construction, building, layout, irregular, asymmetric, development, planning\n\n// The MIT License\n// Copyright (c) 2022 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// NOTE: Artifacts appear when the camera is inside the geometry.\n\n#define pi 3.1415926\n\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2,\n// implementing Chris Wellons https://nullprogram.com/blog/2018/07/31/\nuint triple32(uint x)\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bbU;\n    x ^= x >> 11;\n    x *= 0xac4c1b51U;\n    x ^= x >> 15;\n    x *= 0x31848babU;\n    x ^= x >> 14;\n    return x;\n}\n\nuint uhash(uvec2 v)\n{\n    return triple32(v.x + triple32(v.y));\n}\n\nfloat hash(uint x)\n{\n    return float(triple32(x)) / float(0xffffffffU);\n}\n\nfloat hash(uvec2 v)\n{\n    //return hash(v.x + triple32(v.y));\n    return mix(0.2, 0.8, hash(v.x + triple32(v.y)));\n}\n\nfloat hash(ivec2 v)\n{\n    return hash(uvec2(v));\n}\n\nfloat box( in vec2 p, in vec2 b ) // https://iquilezles.org/articles/distfunctions2d/ by iq\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat box2(vec2 p, vec2 p0, vec2 p1, float r) // min-max box\n{\n    return box(p-(p1+p0)/2.0, (p1-p0)/2.0-r)-r;\n}\n\n// Idea from https://www.shadertoy.com/view/Ws3GRs Asymmetric Blocks by Shane.\n// Checkerboard tiling of alternating (horizontal vs. vertical) (double-T-) crossings.\n// Implementation my own since I prefer writing code to reading code ;-)\nfloat blocks_reduced(ivec2 tile, vec2 local, float r) // see https://www.shadertoy.com/view/DdlXDS Irregular City Block Layout for more condensed versions\n{\n    vec2 c = vec2(hash(tile)); // offset of vertical/horizontal line through this tile\n    vec2 sw = vec2(hash(tile+ivec2(-1,-1))); // offset of vertical/horizontal line through south-west tile\n    vec2 nw = vec2(hash(tile+ivec2(-1,+1))); // offset of vertical/horizontal line through north-west tile\n    vec2 se = vec2(hash(tile+ivec2(+1,-1))); // offset of vertical/horizontal line through south-east tile\n    vec2 ne = vec2(hash(tile+ivec2(+1,+1))); // offset of vertical/horizontal line through north-east tile\n    vec2 w = vec2(hash(tile+ivec2(-1, 0))); // offset of horizontal/vertical line through west tile\n    vec2 e = vec2(hash(tile+ivec2(+1, 0))); // offset of horizontal/vertical line through east tile\n    vec2 s = vec2(hash(tile+ivec2( 0,-1))); // offset of horizontal/vertical line through south tile\n    vec2 n = vec2(hash(tile+ivec2( 0,+1))); // offset of horizontal/vertical line through north tile\n    //bool flip = (tile.x % 2) == (tile.y % 2); // XXX breaks on windows XXX\n    bool flip = (tile.x & 1) == (tile.y & 1);\n    if(flip) // vertical line goes through\n    {\n        return\n            min\n            (\n                min\n                (\n                    box2(local, vec2(sw.x-1.0, s.y-1.0), vec2(c.x, w.y), r), // south-west\n                    box2(local, vec2(nw.x-1.0, w.y), vec2(c.x, n.y+1.0), r) // north-west\n                ),\n                min\n                (\n                    box2(local, vec2(c.x, s.y-1.0), vec2(se.x+1.0, e.y), r), // south-east\n                    box2(local, vec2(c.x, e.y), vec2(ne.x+1.0, n.y+1.0), r) // north-east\n                )\n            );\n    }\n    else // horizontal line goes through\n    {\n        return\n            min\n            (\n                min\n                (\n                    box2(local, vec2(w.x-1.0, sw.y-1.0), vec2(s.x, c.y), r), // south-west\n                    box2(local, vec2(w.x-1.0, c.y), vec2(n.x, nw.y+1.0), r) // north-west\n                ),\n                min\n                (\n                    box2(local, vec2(s.x, se.y-1.0), vec2(e.x+1.0, c.y), r), // south-east\n                    box2(local, vec2(n.x, c.y), vec2(e.x+1.0, ne.y+1.0), r) // north-east\n                )\n            );\n    }\n}\n\nfloat extrude_blocks(ivec2 tile, vec3 local, float b, float h, float s)\n{\n    float dp = abs(local.z - h/2.0) - h/2.0; // distance to plane\n    float df = blocks_reduced(tile.xy, local.xy, 0.2); // distance to 2d SDF\n    df = abs(-abs(df) + s + b) - b;\n    //return max(df, dp); // 3dify - not an exact distance field\n\n    // Correct SDF, as suggested by iq - thanks!\n    vec2 w = vec2(df, dp);\n    return min(max(w.x, w.y), 0.0) + length(max(w, 0.0));\n\n    //return min(max(df, dp), 0.0) + length(max(vec2(df, dp), 0.0)); // rewritten to compare to incorrect approach\n}\n\nfloat map(ivec3 tile, vec3 local)\n{\n    float b = 0.05; // building width\n    float h = 0.2; // building height\n    float s = 0.1; // street width\n    return extrude_blocks(tile.xy, local,b,h,s) - 0.01;\n    //return min(local.z, extrude_blocks(tile.xy, local,b,h,s) - 0.0);\n}\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\n// https://iquilezles.org/articles/intersectors\nvec2 boxIntersection( in vec3 ro, in vec3 rd, vec3 boxSize )\n{\n    vec3 m = 1.0/rd;\n    vec3 n = m*ro;\n    vec3 k = abs(m)*boxSize;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n    float tN = max( max( t1.x, t1.y ), t1.z );\n    float tF = min( min( t2.x, t2.y ), t2.z );\n    if( tN>tF || tF<0.0) return vec2(-1.0);\n    return vec2( tN, tF );\n}\n\nfloat checker(vec3 p)\n{\n    //return step(0.5, length(1.0 - abs(2.0 * fract(p) - 1.0))); // dots\n    return step(0.0, sin(pi * p.x + pi/2.0)*sin(pi *p.y + pi/2.0)*sin(pi *p.z + pi/2.0));\n    //return step(0.0, sin(p.x)*sin(p.y)*sin(p.z));\n}\n\n#define MAX_ITER 200u\n#define MAX_DIST 1000.0\n#define EPSILON 0.001\n\n// raymarch subobject\nfloat march(ivec3 tile, vec3 ro, vec3 rd, float tmin, float tmax)\n{\n    uint i;\n    float t;\n    for(t = tmin, i = 0u; t < tmax && i < MAX_ITER; i++)\n    {\n        float h = map(tile, ro + rd * t);\n        if(h < EPSILON)\n            return t;\n        t += h;\n    }\n    return MAX_DIST;\n}\n\n// based on https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal(ivec3 tile, vec3 local)\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return normalize(k.xyy * map(tile, local + k.xyy * h) +\n                     k.yyx * map(tile, local + k.yyx * h) +\n                     k.yxy * map(tile, local + k.yxy * h) +\n                     k.xxx * map(tile, local + k.xxx * h));\n}\n\nvec4 process_subobject(ivec3 tile, vec3 ro, vec3 rd, float tmin, float tmax)\n{\n    float d = march(tile, ro, rd, tmin, tmax);\n    vec3 n = normal(tile, ro + rd * d);\n    return vec4(n, d);\n}\n\n// \"The raycasting code is somewhat based around a 2D raycasting toutorial found here:\n//  http://lodev.org/cgtutor/raycasting.html\" (fb39ca4)\n\n#define MAX_RAY_STEPS 64\n\nvoid mainImage(out vec4 fragColor, in vec2 I)\n{\n    vec2 R = iResolution.xy;\n    //I = 2.0 * I.xy / R - 1.0;\n    //I.x *= R.x / R.y;\n    I = (2.0 * I - R) / R.y;\n    vec3 ray_dir = normalize(vec3(I.x, 2.0, I.y)); // must be normalized!\n    vec3 ray_pos = vec3(0.0,-4.0, 0.0);\n\n    float mx = -2.0 * pi * float(iMouse.x) / float(iResolution.x);\n    float my = -pi / 2.0 + pi * float(iMouse.y) / float(iResolution.y);\n    mx = (iMouse.x > 5.0) ? mx : 2.0 * pi * fract(iTime * 0.01);\n    my = (iMouse.y > 5.0) ? my : -pi / 6.0;\n\n    mat3 M = yaw_pitch_roll(mx, my, 0.0);\n    ray_pos = M * ray_pos;\n    ray_dir = M * ray_dir;\n\n    vec3 color = vec3(0.0);\n    vec4 result = vec4(vec3(0.0), MAX_DIST);\n\n    {\n        vec3 delta_dist = 1.0 / abs(ray_dir);\n        ivec3 ray_step = ivec3(sign(ray_dir));\n        ivec3 map_pos = ivec3(floor(ray_pos + 0.0));\n        vec3 side_dist = (sign(ray_dir) * (vec3(map_pos) - ray_pos) + (sign(ray_dir) * 0.5) + 0.5) * delta_dist;\n\n        for (int i = 0; i < MAX_RAY_STEPS; i++)\n        //for (int i = min(iFrame,0); i < MAX_RAY_STEPS; i++) // prevent unrolling loop to prevent crash\n        {\n            if(map_pos.z == 0)\n            {\n                // Near bounding-box side can be reconstructed from dda, howvever we need far bounding-box side, too.\n                // float d = length(vec3(mask) * (sideDist - deltaDist)) / length(rayDir);\n                // It appears to be easier to just do the box-intersection here (potential for optimization).\n                vec2 bounds = boxIntersection(ray_pos - vec3(map_pos) - vec3(0.5), ray_dir, vec3(0.5) ); // bounding box\n                if(min(abs(map_pos.x), min(abs(map_pos.y),abs(map_pos.z))) > 5) // explicit sky-box (letting loop run-out without hitting a wall causes blocky artifacts)\n                    break;\n                //result = process_subobject(map_pos, ray_pos - vec3(map_pos) - vec3(0.5), ray_dir, bounds.x, bounds.y);\n                result = process_subobject(map_pos, ray_pos - vec3(map_pos), ray_dir, bounds.x, bounds.y);\n                if(result.w > 0.0 && result.w < bounds.y)\n                {\n                    color = vec3(1.0);\n                    color *= 0.5 + 0.5 * normalize(result.xyz);\n                    vec3 dst = ray_pos + ray_dir * result.w;\n                    //color *= vec3(0.5 + 0.5 * checker(dst));\n\n                    vec3 fogcolor = vec3(0.25, 0.4, 0.5); // fog\n                    //vec3 fogcolor = vec3(0.75, 0.6, 0.3); // smog\n                    color *= mix(fogcolor, color, exp(-result.w * result.w / 200.0)); // fog for depth impression & to suppress flickering\n\n                    break;\n                }\n            }\n\n            // Core of https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting\n            bvec3 mask = lessThanEqual(side_dist.xyz, min(side_dist.yzx, side_dist.zxy));\n            side_dist += vec3(mask) * delta_dist;\n            map_pos += ivec3(vec3(mask)) * ray_step;\n        }\n    }\n\n    vec3 ambient = vec3(0.1);\n    vec3 lightdir = normalize(vec3(3.0, 2.0, 1.0));\n    color *= mix(ambient, vec3(1.0), clamp(dot(lightdir, result.xyz), 0.0, 1.0));\n\n    fragColor.rgb = sqrt(color);\n}\n","name":"Image","description":"","type":"image"}]}