{"ver":"0.1","info":{"id":"Xl3Gzf","date":"1470450238","viewed":155,"name":"Noise Terrain","username":"SteamSid","description":"it does that!\nThanks to FabriceNeyret2 for some simplifications!","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 compAlpha(vec4 i1, vec4 i2);\nvec3 toVec3(vec4 v);\n\nvoid mainImage( out vec4 O,  vec2 U )\n{\n\tU /= iResolution.xy;\n\tO = compAlpha( texture(iChannel0, U),\n                   texture(iChannel1, U)\n                 );\n}\n\nvec4 compAlpha(vec4 i1, vec4 i2)\n{\n    vec4 col;\n    \n    if(i1.a > i2.a) col = i1;\n    else col = i2;\n    if(i1.a == i2.a) col = i1;\n    \n    return col;\n}\n\nvec3 toVec3(vec4 v)\n{\n    return v.xyz;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float noise( in vec2 p);\nfloat doNoise( in vec2 p );\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 col;\n    float n = doNoise(vec2(fragCoord.x, 0.0) / 100.0);\n    if(fragCoord.y < (n * 60.0) + 80.0)\n    {\n        col = vec4((100.0 / 255.0), (204.0 / 255.0), (102.0 / 255.0), 1.0);\n        \n        if(fragCoord.y < (n * 60.0) + 70.0) col = vec4((176.0 / 255.0), (150.0 / 255.0), (77.0 / 255.0), 1.0);\n        if(fragCoord.y < (n * 60.0) + 20.0) col = vec4((158.0 / 255.0), (158.0 / 255.0), (158.0 / 255.0), 1.0);\n    }\n    else\n    {\n        col = vec4(0.0);\n    }\n    fragColor = col;\n}\n\n//Noise by IQ \n//https://www.shadertoy.com/view/lsf3WH\nfloat hash( vec2 p )\n{\n\tfloat h = dot(p,vec2(127.1,311.7));\n    return -1.0 + 2.0*fract(sin(h)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( hash( i + vec2(0.0,0.0) ), \n                     hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ), \n                     hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\n//Modified to be easier to use\n//input the Position and Octave\nfloat doNoise( in vec2 p )\n{\n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n    \n    float r = 0.5000*noise( p ); p = m*p;\n    \n    for(int i = 1; i < 5; ++i)\n    {\n        float i_float = float(i);\n        \n        r += (0.5000/i_float)*noise( p ); p = m*p;\n    }\n    \n    return 0.5 + 0.5*r;\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,0.0,0.0);\n}","name":"Buf B","description":"","type":"buffer"}]}