{"ver":"0.1","info":{"id":"fdX3DB","date":"1616436420","viewed":95,"name":"#WillstallChallenge day 3","username":"ja6kjak","description":"followed this tutorial: https://www.youtube.com/watch?v=Ff0jJyyiVyw&list=PLGmrMu-IwbgtMxMiV3x4IrHPlPmg7FD-P\n","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","beginner","willstallchallege"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n\n// smooth min from https://www.cl.cam.ac.uk/teaching/1718/FGraphics/1.%20Ray%20Marching%20and%20Signed%20Distance%20Fields.pdf\nfloat smin(float a, float b) {\nfloat k = 0.2;\nfloat h = clamp(0.5+ 0.5 *(b-a) /k, 0.,1.);\n\nreturn mix(b,a,h) - k * h *(1. -h);\n\n}\n\n// rotation copied from: https://www.shadertoy.com/view/Wtl3zN\nvec3 rotation(vec3 point, vec3 axis, float angle){\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    mat4 rot= mat4(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,oc * axis.y * axis.z - axis.x * s,  0.0,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n                0.0,0.0,0.0,1.0);\n    return (rot*vec4(point,1.)).xyz;\n}\n\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r) {\n    vec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    //t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t*ab;\n    //distance between point p to point c\n    float x = length(p-c)-r;\n    float y = (abs(t-.5)-.5)*length(ab);\n    // exterior distance\n    float e = length(max(vec2(x, y),0.0));\n    float i = min(max(x,y),0.);\n    return e + i;\n    \n}\n\n\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r) {\n    vec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t*ab;\n    //distance between point p to point c\n    return length(p-c)-r;\n    \n}\n\nfloat sdTorus(vec3 p, vec2 r) {\n    float x = length(p.xz) - r.x;\n    return length(vec2(x, p.y))-r.y;\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    return length(max(abs(p)-s, 0.));\n}\n\nfloat GetDist(vec3 p) {\n    // sphere    position  radius\n   vec4 s = vec4(0,1,6,1);\n   vec3 cubePos = rotation(p - vec3(0.,1.,6), vec3(0.,.5,0.5), iTime);\n   \n   float sphereDist = length(p-s.xyz) - s.w;\n   float planeDist = p.y;\n   \n   float td = sdTorus(p-vec3(.0,.2,6), vec2(1.5, .3));\n   float td2 = sdTorus(cubePos, vec2(1.5,.3));\n   float bdrotate = sdBox(cubePos, vec3(.95));\n   \n   float d = smin(td, planeDist);\n   d= smin(d, bdrotate);\n   d = smin(d, td2);\n   return d;\n   \n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n    // distance from origin\n    float dO=0.;\n    \n    // Ray marching loop\n    for(int i=0; i<MAX_STEPS; i++) {\n        // start at ray origin then march in certain distance in ray direction\n        vec3 p = ro + rd *dO;\n        float dS = GetDist(p);\n        dO += dS;\n        //HIT!!\n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    }\n    return dO;\n}\n\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n         GetDist(p-e.xyy),\n         GetDist(p-e.yxy),\n         GetDist(p-e.yyx));\n         \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(0, 5, 6);\n    lightPos.xz += vec2(sin(iTime), cos(iTime)) * 2.;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0. , 1.);\n    //shadows\n    float d = RayMarch(p+n*SURF_DIST*2., l);\n    if(d<length(lightPos-p)) dif *= .1;\n    return dif;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    // ray origin\n    vec3 ro = vec3(0, 2, 0);\n    // ray direction\n    vec3 rd = normalize(vec3(uv.x, uv.y-.2, 1));\n   \n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd * d;\n    \n    //difuse lighting\n    float dif = GetLight(p);\n    vec3 col = vec3(.1, dif, .3);\n    \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}