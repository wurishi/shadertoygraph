{"ver":"0.1","info":{"id":"Xtcczs","date":"1554940800","viewed":1120,"name":"Yet Another Black Hole","username":"crocidb","description":"Inspired by the #EHTBlackHole, I created a black hole shader.","likes":16,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot_dist(float s, float d)\n{\n    float angularspeed = s * pow(d, 8.0);\n    float cas = cos(angularspeed);\n    float sas = sin(angularspeed);\n    return mat2(vec2(cas, -sas), vec2(sas, cas));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 ring_color = vec3(0.976, 0.447, 0.023);\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    float ratio = iResolution.y/iResolution.x;\n    uv.y *= ratio;\n    \n    vec2 center = (iResolution.xy * .5f) / iResolution.xy;\n    //center = iMouse.xy / iResolution.xy;\n    center.y *= ratio;\n    \n    float _dist = distance(uv, center);\n    float _s = .15;\n    float _a = .005;\n    vec2 uvp = uv + min(texture(iChannel2, _s * vec2(uv.x + iTime * .1, uv.y + iTime * -.3)).r,\n                        texture(iChannel2, _s * vec2(uv.x + iTime * -.3, uv.y + iTime * .2)).r) * _a * pow(1. - _dist, 5.);\n    \n    float dist = distance(uvp, center);\n    float idist = 1.0 - dist;\n    vec2 dir = normalize(uv - center);\n    \n    // Mask\n    float m = step(.06, dist);\n    m *= smoothstep(.065, .08, dist);\n    m = (1.0 - dist * 1.6) * 2. * m;\n\tfloat mask = m;\n    \n    // Phases\n    float speed = -0.06;\n    float phase1 = fract(iTime * speed + .5);\n    float phase2 = fract(iTime * speed);\n    \n    float pidist = pow(idist, 2.3);\n    vec2 uv1 = (dir * pidist * .2) + phase1 * dir;\n    vec2 uv2 = (dir * pidist * .2) + phase2 * dir;\n    \n    // Samplings\n    float lerp = abs((.5 - phase1) / .5);\n    float sampling1 = texture(iChannel0, uv1 * rot_dist(2.4, idist)).r;\n    float sampling2 = texture(iChannel0, uv2 * rot_dist(2.4, idist)).r;\n    \n    float sampling3 = texture(iChannel0, uv1 * 2. * rot_dist(2.6, idist)).g;\n    float sampling4 = texture(iChannel0, uv2 * 2. * rot_dist(2.6, idist)).g;\n    \n    float sampling5 = texture(iChannel1, uv1 * rot_dist(4.6, idist) * .4).r;\n    float sampling6 = texture(iChannel1, uv2 * rot_dist(4.6, idist) * .6).r;\n    \n    float stars = (1. - smoothstep(0.22, 0.34, mix(sampling3, sampling4, lerp))) * 0.4;\n    \n    vec3 sp = mix(sampling1, sampling2, lerp) * vec3(1.);\n    sp *= 0.2;\n   \tsp += stars * vec3(0.13, 0.31, 0.46);\n    sp += smoothstep(0.26, 0.14, mix(sampling5, sampling6, lerp)) * vec3(0.7) * pow(idist, 8.) * ring_color;\n    \n    vec3 finalSamp = sp;\n    vec3 col = ring_color * pow(1.0 - dist, 7.);\n    float ring = pow(smoothstep(.32, .08, dist * 1.5) * 3.5, 2.8) + 1.;\n\n    \n    \n    fragColor = vec4(finalSamp * mask + 1.2 * ring * mask * finalSamp * col, 1.);\n}","name":"Image","description":"","type":"image"}]}