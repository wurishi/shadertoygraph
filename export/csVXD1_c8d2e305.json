{"ver":"0.1","info":{"id":"csVXD1","date":"1681072673","viewed":60,"name":"cos(x + 11.) is almost sin(x)","username":"Oneleven","description":"...and so are x+344 and x+721\nJust saw Fabrice used cos(x+vec2(0,11)) to compute sin and cos in one operation, and got curious what else you can use instead of PI/2\nThis is of course useless, since 11 is the shortest one, but it was fun to research.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sin","approximation","cos"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592\n\nvoid mainImage( out vec4 O, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uv2=uv;\n    \n    uv.y=uv.y*2.0 - 1.0;\n    uv.x*=2.0*PI;\n    \n    O.rgb = abs(vec3(cos(uv.x)       - uv.y,   //just regular cos\n                    (cos(uv.x + 11.) - uv.y),  //sinus via offset by 11 radians. Try to put there different integers\n                    (sin(uv.x)       - uv.y)));//regular sin. Overlaps with offseted cos\n\n    O.rgb = smoothstep(0.005, 0.00, O.rgb);\n\n    //=====================//\n    uv2.x=floor(uv2.x* 800.0);\n    uv2.y=uv2.y*4.0 - 2.0;\n    \n    //White histogram of differences for each integer\n    float dif = sin(iTime) - cos(iTime + uv2.x);\n    vec3 O2 = vec3(step(uv2.y, dif));\n    if (uv2.y <0.0) O2=(1. - O2);\n    O2*=0.25;\n    \n    //Stable green lines are the integers that aproximate PI/2 good enough\n    if (abs(dif) <= 0.005) O2+=vec3(0.0,0.7,0.3);\n    O.rgb+=O2;\n}","name":"Image","description":"","type":"image"}]}