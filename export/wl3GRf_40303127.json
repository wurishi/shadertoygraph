{"ver":"0.1","info":{"id":"wl3GRf","date":"1577039999","viewed":306,"name":"Caleb's Mandelbrot","username":"shademyeyes","description":"Mandelbrot set.  My first shader.","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_ITER 50\n\nfloat sq (float n) {\n    return n * n;\n}\n    \n\nbool mandelbrot (vec2 c) {\n    // o = orbiter (i.e. point that we're tracking to see if it escapes)\n\tvec2 o = vec2(0.0);\n    \n    for (int i = 0 ; i < MAX_ITER ; i++) {\n        float x = sq(o.x) - sq(o.y) + c.x;\n        float y = 2.0 * o.x * o.y + c.y;\n        \n        if (sq(x) + sq(y) > sq(2.0)) {\n            return false;\n        }\n        \n        o = vec2(x,y);\n    }\n    \n    return true;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.y;\n    vec2 fc = uv * 4.0 - 2.0;\n    \n    if (mandelbrot(fc)) {\n    \t// Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    } else {\n        fragColor = vec4(1.0,1.0,1.0,1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}