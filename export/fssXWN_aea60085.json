{"ver":"0.1","info":{"id":"fssXWN","date":"1646118528","viewed":53,"name":"rayforlimon","username":"limonskislinkoy","description":"1","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst int MAX_OBJ=20;\nconst int LEN_OBJ=15;\nconst int MAX_REFLECT=10;\nconst int COUNT_LIGHTS=1;\nint ID_LIGHTS[COUNT_LIGHTS];\n\nconst vec4 dark=vec4(0.0,0.0,0.0,0.0);\nconst vec4 nebo=vec4(52.0/255.0,192.0/255.0,235.0/255.0,1.0);\n\nconst float pi=3.1415;\n\n\nvec3 player_pos;\n\n\nvec2 player_dir_angle;\n\nfloat objects[MAX_OBJ*LEN_OBJ];\n\n\n\n\n\n\n\n\n\n\n\n\nvec4 mix_color(in vec4 col1,in vec4 col2, float mat, float light_str){\n\tvec4 col= (mat*col1+(1.0-mat)*col2)*light_str;\n\treturn col;\n}\n\nvec3 triIntersect( in vec3 ro, in vec3 rd, in vec3 v0, in vec3 v1, in vec3 v2 )\n{\n    vec3 v1v0 = v1 - v0;\n    vec3 v2v0 = v2 - v0;\n    vec3 rov0 = ro - v0;\n    vec3  n = cross( v1v0, v2v0 );\n    vec3  q = cross( rov0, rd );\n    float d = 1.0/dot( rd, n );\n    float u = d*dot( -q, v2v0 );\n    float v = d*dot(  q, v1v0 );\n    float t = d*dot( -n, rov0 );\n    if( u<0.0 || v<0.0 || (u+v)>1.0 ) t = -1.0;\n    return vec3( t, u, v );\n}\n\nvec2 sphIntersect( in vec3 ro, in vec3 rd, in vec3 ce, float ra )\n{\n    vec3 oc = ro - ce;\n    float b = dot( oc, rd );\n    float c = dot( oc, oc ) - ra*ra;\n    float h = b*b - c;\n    if( h<0.0 ) return vec2(-1.0); // no intersection\n    h = sqrt( h );\n    return vec2( -b-h, -b+h );\n}\n\n\n\nfloat Mat_shadow( in vec3 ro,in int id){\n\t//return true;\n\tfloat coef=1.0;\n\tfloat maxcoef=-2.0;\n\tfor (int light_i=0; light_i<COUNT_LIGHTS;light_i++){\n\t\tint light_id=ID_LIGHTS[light_i];\n\t\tbool intercept = false;\n\t\tfor(int i=0; i < MAX_OBJ; i++)\n\t\t\t{\n\t\t\tif (i==light_id){continue;}\n\n\n\t\t\tif ( i==id){\n\t\t\t\tif (objects[id*LEN_OBJ]==1.0){\n\t\t\t\t\tvec3 normala  = normalize (ro-vec3(objects[id*LEN_OBJ+1],objects[id*LEN_OBJ+2],objects[id*LEN_OBJ+3]));\n\t\t\t\t\tvec3 rd =  normalize(vec3(objects[light_id*LEN_OBJ+1],objects[light_id*LEN_OBJ+2],objects[light_id*LEN_OBJ+3])-ro);\n\n\t\t\t\t\tcoef = (dot(rd,normala)+1.0)/2.0;\n\t\t\t\t\tif(coef>maxcoef){\n\t\t\t\t\t\tmaxcoef=coef;\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t\n\t\t\t\t}\n\n\n\t\t\t\tif (objects[id*LEN_OBJ]==2.0){\n\t\t\t\t\tvec3 normala = cross(\n\t\t\t\t\tvec3(objects[id*LEN_OBJ+4],objects[id*LEN_OBJ+5],objects[id*LEN_OBJ+6])-vec3(objects[id*LEN_OBJ+1],objects[id*LEN_OBJ+2],objects[id*LEN_OBJ+3]),\n\t\t\t\t\tvec3(objects[id*LEN_OBJ+7],objects[id*LEN_OBJ+8],objects[id*LEN_OBJ+9])-vec3(objects[id*LEN_OBJ+1],objects[id*LEN_OBJ+2],objects[id*LEN_OBJ+3])\n\t\t\t\t\t);\n\t\t\t\t\tnormala=normalize(normala);\n\t\t\t\t\tvec3 rd =  normalize(vec3(objects[light_id*LEN_OBJ+1],objects[light_id*LEN_OBJ+2],objects[light_id*LEN_OBJ+3])-ro);\n\t\t\t\t\tfloat sovector=dot(rd,normala);\n\t\t\t\t\tcoef = ( (sovector)+1.0)/2.0;\n\t\t\t\t\tif(coef>maxcoef){\n\t\t\t\t\t\tmaxcoef=coef;\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\n\n\n\n\t\t\tif (objects[i*LEN_OBJ] == 1.0)//                                                                             *CIRCLE*\n\t\t\t\t{\n\t\t\t\t \n\t\t\t\t\tvec4 sph;\n\t\t\t\t\tsph.xyz=vec3(objects[i*LEN_OBJ+1],objects[i*LEN_OBJ+2],objects[i*LEN_OBJ+3]);\n\t\t\t\t\tsph.w=objects[i*LEN_OBJ+4];\n\t\t\t\t\tvec3 rd =  normalize(vec3(objects[light_id*LEN_OBJ+1],objects[light_id*LEN_OBJ+2],objects[light_id*LEN_OBJ+3])-ro);\n\t\t\t\t\tvec2 cross1=sphIntersect(ro,rd,sph.xyz,sph.w);\n\t\t\t\t\tif ((cross1.x>=0.0 && cross1.y>=0.0))\n\t\t\t\t\t\t{\n\t\t\t\t\t\tintercept=true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t}\n\t\t\tif (objects[i*LEN_OBJ] == 2.0)//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*TRIANGLE*\n\t\t\t\t{\n\t\t\t\t\t\tvec3 p1,p2,p3;\n\t\t\t\t\t\tvec3 rd =  normalize(vec3(objects[light_id*LEN_OBJ+1],objects[light_id*LEN_OBJ+2],objects[light_id*LEN_OBJ+3])-ro);\n\t\t\t\t\t\tp1=vec3(objects[i*LEN_OBJ+1],objects[i*LEN_OBJ+2],objects[i*LEN_OBJ+3]);\n\t\t\t\t\t\tp2=vec3(objects[i*LEN_OBJ+4],objects[i*LEN_OBJ+5],objects[i*LEN_OBJ+6]);\n\t\t\t\t\t\tp3=vec3(objects[i*LEN_OBJ+7],objects[i*LEN_OBJ+8],objects[i*LEN_OBJ+9]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tvec3 cross1=triIntersect(ro,rd,p1,p2,p3);\n\t\t\t\t\t\tif (cross1.x>0.0){\n\t\t\t\t\t\t\tintercept=true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t}\n\n\t\t\t}\n\t\tif (!intercept){\n\t\t\treturn maxcoef;\n\t\t}\n\t\t\n\t}\n\treturn 0.0;\n\t\n}\n\n\nmat2 rotate(float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\treturn mat2(c, -s, s, c);\n}\n\n\nvec4 Raycast(in vec3 player_pos, in vec3 p_dir, vec4 res, float light_str){   //\t\t\t\t\t\t\t\t\t\t*******************MAIN RAYCAST**********************\n\tint idmin=-1;\n\tint lastid=-1;\n\tvec3 ro=player_pos;\n\tvec3 rd= p_dir;\n\tfloat mat=1.0;\n\tfloat zerkalo=0.0;\n\tfloat mat_prev;\n\n\tvec4 colorp=res;\n\tfor (int c_reflect=0; c_reflect<MAX_REFLECT; c_reflect++)\n\t{\n\t\tfloat lmin=10001.0;\n\t\tidmin =-1;\n\t\t\n\t\tfor(int i=0; i < MAX_OBJ; i++)\n\t\t{\t\n\t\t\t\tif (i!=lastid){\n\t\t\t\t\tif (objects[i*LEN_OBJ] == 1.0) //\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*CIRCLE*\n\t\t\t\t\t{\n\t\t\t\t\t\t\tvec4 sph;\n\t\t\t\t\t\t\tsph.xyz=vec3(objects[i*LEN_OBJ+1],objects[i*LEN_OBJ+2],objects[i*LEN_OBJ+3]);\n\t\t\t\t\t\t\tsph.w=objects[i*LEN_OBJ+4];\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tvec2 cross1=sphIntersect(ro,rd,sph.xyz,sph.w);\n\t\t\t\t\t\t\tif (cross1.x>=0.0 && cross1.y>=0.0 && cross1.x<lmin && cross1.y<lmin){\n\t\t\t\t\t\t\t\tcolorp=vec4(objects[i*LEN_OBJ+5],objects[i*LEN_OBJ+6],objects[i*LEN_OBJ+7],1.0);\n\t\t\t\t\t\t\t\tidmin=i;\n\t\t\t\t\t\t\t\tif (objects[i*LEN_OBJ+9]==0.0){lmin=cross1.x;}\n\t\t\t\t\t\t\t\telse{lmin=cross1.y;}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\n\t\t\t\t\tif (objects[i*LEN_OBJ] == 2.0)//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*TRIANGLE*\n\t\t\t\t\t{\n\t\t\t\t\t\t\tvec3 p1,p2,p3;\n\n\t\t\t\t\t\t\tp1=vec3(objects[i*LEN_OBJ+1],objects[i*LEN_OBJ+2],objects[i*LEN_OBJ+3]);\n\t\t\t\t\t\t\tp2=vec3(objects[i*LEN_OBJ+4],objects[i*LEN_OBJ+5],objects[i*LEN_OBJ+6]);\n\t\t\t\t\t\t\tp3=vec3(objects[i*LEN_OBJ+7],objects[i*LEN_OBJ+8],objects[i*LEN_OBJ+9]);\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tvec3 cross1=triIntersect(ro,rd,p1,p2,p3);\n\t\t\t\t\t\t\tif (cross1.x>0.0 && cross1.x<lmin){\n\t\t\t\t\t\t\t\tcolorp=vec4(objects[i*LEN_OBJ+10],objects[i*LEN_OBJ+11],objects[i*LEN_OBJ+12],1.0);\n\t\t\t\t\t\t\t\tidmin=i;\n\t\t\t\t\t\t\t\tlmin=cross1.x;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\n\t\t}\n\t\tif (idmin!=-1){\tlastid=idmin;}\n\t\t\n\n\t\tif ((idmin==-1)){\n\t\t\tif (c_reflect==0){return nebo;}\n\t\t\telse{\n\t\t\t\tres=mix_color( res,nebo, mat_prev , light_str);\n\t\t\t\treturn res;\n\t\t\t}\n\t\t\t\n\t\t\t/*if (End_of_ray_with_lights(ro, lastid)==true){\n\t\t\t\treturn res;\n\t\t\t}\n\t\t\telse{\n\t\t\treturn nebo;s\n\t\t\t}*/\n\t\t}\n\t\telse{\n\t\t\t\n\n\t\t\tvec3 crosspoint=ro+(lmin*rd);\n\t\t\tvec3 normal=vec3(0.0);\n\t\t\tif (objects[lastid*LEN_OBJ] == 1.0){\n\t\t\t\t normal=crosspoint-vec3(objects[lastid*LEN_OBJ+1],objects[lastid*LEN_OBJ+2],objects[lastid*LEN_OBJ+3]); // only for circles\n\t\t\t}  //normals\n\t\t\tif (objects[lastid*LEN_OBJ] == 2.0){ // only for triangles\n\t\t\t\t normal = cross(\n\t\t\t\tvec3(objects[lastid*LEN_OBJ+4],objects[lastid*LEN_OBJ+5],objects[lastid*LEN_OBJ+6])-vec3(objects[lastid*LEN_OBJ+1],objects[lastid*LEN_OBJ+2],objects[lastid*LEN_OBJ+3]),\n\t\t\t\tvec3(objects[lastid*LEN_OBJ+7],objects[lastid*LEN_OBJ+8],objects[lastid*LEN_OBJ+9])-vec3(objects[lastid*LEN_OBJ+1],objects[lastid*LEN_OBJ+2],objects[lastid*LEN_OBJ+3])\n\t\t\t\t);\n\t\t\t}\n\t\t\t\n\t\t\tnormal= normalize(normal);\n\t\t\tvec3 ray_reflect= reflect(rd,normal);\n\n\t\t\tfloat k_prelom=0.0;\n\t\t\tif (objects[lastid*LEN_OBJ] == 1.0){\n\t\t\t\tk_prelom = objects[lastid*LEN_OBJ+9];\n\t\t\t\tif ( k_prelom!= 0.0){\n\t\t\t\tray_reflect=normal;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tro=crosspoint;\n\t\t\trd=normalize(ray_reflect);\n\t\t\tbool is_light=false;\n\t\t\tfor (int il=0;il<COUNT_LIGHTS;il++){\n\t\t\t\tif (lastid==ID_LIGHTS[il]){is_light=true;}\n\t\t\t}\n\t\t\t\n\t\t\tif (objects[lastid*LEN_OBJ] == 1.0){ mat=objects[lastid*LEN_OBJ+8]; zerkalo=objects[lastid*LEN_OBJ+9]; }\n\t\t\tif (objects[lastid*LEN_OBJ] == 2.0){ mat=objects[lastid*LEN_OBJ+13]; zerkalo=objects[lastid*LEN_OBJ+14]; }\n\n\t\t\t\n\t\t\t\n\n\t\t\t\n\t\t\t\n\n\t\t\tif (c_reflect!=MAX_REFLECT)\n\t\t\t{\n\t\t\t\tif(c_reflect>0){\n\t\t\t\t\tres=mix_color(colorp,res,mat,1.0);\n\t\t\t\t}\n\n\t\t\t\tmat_prev=mat;\n\t\t\t\tif (is_light){\n\t\t\t\t\treturn res;\n\t\t\t\t\t}\n\n\t\t\t\tcolorp=Mat_shadow(crosspoint,lastid)*colorp;\n\t\t\t\tres=mix_color(colorp, dark, mat , light_str);\n\t\t\t\t\n\t\t\t\tlight_str=light_str*(1.0-mat);\n\t\t\t\tif (light_str==0.0){return res;}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn res;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t}\n\n\t//return res;\n\t/*\n\tif (End_of_ray_with_lights(ro, lastid)==true){\n\t\treturn res;\n\t}\n\telse{\n\t\treturn nebo;\n\t}*/\n\t\n}\n\n\n\nvoid mainImage(out vec4 colorout, in vec2 fragCoord ) {\n\tint fov = 180;                                   //comment if you wanna change fov\n\n\tID_LIGHTS[0]=9;\n    player_pos.x=-8.0;\n    player_pos.y=0.0;\n    player_pos.z=1.0;\n\n    player_dir_angle.x=pi/4.0;\n    player_dir_angle.y=0.0;\n\n    \n    \n    int k_id = 0;\n    objects[0] = 1.0;//type                          # 1 #  CIRCLE RED\n    objects[1] = 0.0;//x\n    objects[2] = 0.0;//y\n    objects[3] = 1.0;//z\n    objects[4] = 1.0;//ra\n\n    objects[5] = 1.0;//r\n    objects[6] = 0.0;//g\n    objects[7] = 0.0;//b\n\n    objects[8] = 0.0;// mat\n    objects[9] = 0.0;// prosrachnost\n\n\n    k_id = 1;\n    objects[LEN_OBJ * k_id + 0] = 2.0;//type            # 2 # TRIANGLE2 AREA\n\n    objects[LEN_OBJ * k_id + 1] = 0.0;//point 1 x\n    objects[LEN_OBJ * k_id + 2] = -10.0;//point 1 y\n    objects[LEN_OBJ * k_id + 3] = 0.0; //point 1 z\n\n    objects[LEN_OBJ * k_id + 4] = -10.0;//point 2 x\n    objects[LEN_OBJ * k_id + 5] = 0.0;//point 2 y\n    objects[LEN_OBJ * k_id + 6] = 0.0; //point 2 z\n\n    objects[LEN_OBJ * k_id + 7] = -10.0;//point 3 x\n    objects[LEN_OBJ * k_id + 8] = -10.0;//point 3 y\n    objects[LEN_OBJ * k_id + 9] = 0.0; //point 3 z\n\n    objects[LEN_OBJ * k_id + 10] = 0.2;//r\n    objects[LEN_OBJ * k_id + 11] = 0.2;//g\n    objects[LEN_OBJ * k_id + 12] = 0.2;//b\n\n    objects[LEN_OBJ * k_id + 13] = 1.0;// mat\n    objects[LEN_OBJ * k_id + 14] = 0.0;// \n\n\n\n\n    k_id = 2;\n    objects[LEN_OBJ * k_id + 0] = 2.0;//type            # 3 # TRIANGLE2 AREA\n\n    objects[LEN_OBJ * k_id + 1] = 0.0;//point 1 x\n    objects[LEN_OBJ * k_id + 2] = 0.0;//point 1 y\n    objects[LEN_OBJ * k_id + 3] = 0.0; //point 1 z\n\n    objects[LEN_OBJ * k_id + 4] = -10.0;//point 2 x\n    objects[LEN_OBJ * k_id + 5] = 0.0;//point 2 y\n    objects[LEN_OBJ * k_id + 6] = 0.0; //point 2 z\n\n    objects[LEN_OBJ * k_id + 7] = 0.0;//point 3 x\n    objects[LEN_OBJ * k_id + 8] = -10.0;//point 3 y\n    objects[LEN_OBJ * k_id + 9] = 0.0; //point 3 z\n\n    objects[LEN_OBJ * k_id + 10] = 0.2;//r\n    objects[LEN_OBJ * k_id + 11] = 0.2;//g\n    objects[LEN_OBJ * k_id + 12] = 0.2;//b\n\n    objects[LEN_OBJ * k_id + 13] = 1.0;// mat\n    objects[LEN_OBJ * k_id + 14] = 0.0;// zerkalo\n\n    k_id = 3;\n    objects[LEN_OBJ * k_id + 0] = 2.0;//type            # 5 # TRIANGLE2 AREA\n\n    objects[LEN_OBJ * k_id + 1] = +10.0;//point 1 x\n    objects[LEN_OBJ * k_id + 2] = -10.0;//point 1 y\n    objects[LEN_OBJ * k_id + 3] = 0.0; //point 1 z\n\n    objects[LEN_OBJ * k_id + 4] = +10.0;//point 2 x\n    objects[LEN_OBJ * k_id + 5] = 0.0;//point 2 y\n    objects[LEN_OBJ * k_id + 6] = 0.0; //point 2 z\n\n    objects[LEN_OBJ * k_id + 7] = 0.0;//point 3 x\n    objects[LEN_OBJ * k_id + 8] = 0.0;//point 3 y\n    objects[LEN_OBJ * k_id + 9] = 0.0; //point 3 z\n\n    objects[LEN_OBJ * k_id + 10] = 1.0;//r\n    objects[LEN_OBJ * k_id + 11] = 1.0;//g\n    objects[LEN_OBJ * k_id + 12] = 1.0;//b\n\n    objects[LEN_OBJ * k_id + 13] = 1.0;// mat\n    objects[LEN_OBJ * k_id + 14] = 0.0;// zerkalo\n\n\n\n    k_id = 4;\n    objects[LEN_OBJ * k_id + 0] = 2.0;//type            # 4 # TRIANGLE2 AREA\n\n    objects[LEN_OBJ * k_id + 1] = 0.0;//point 1 x\n    objects[LEN_OBJ * k_id + 2] = 0.0;//point 1 y\n    objects[LEN_OBJ * k_id + 3] = 0.0; //point 1 z\n\n    objects[LEN_OBJ * k_id + 4] = 0.0;//point 2 x\n    objects[LEN_OBJ * k_id + 5] = -10.0;//point 2 y\n    objects[LEN_OBJ * k_id + 6] = 0.0; //point 2 z\n\n    objects[LEN_OBJ * k_id + 7] = 10.0;//point 3 x\n    objects[LEN_OBJ * k_id + 8] = -10.0;//point 3 y\n    objects[LEN_OBJ * k_id + 9] = 0.0; //point 3 z\n\n    objects[LEN_OBJ * k_id + 10] = 1.0;//r\n    objects[LEN_OBJ * k_id + 11] = 1.0;//g\n    objects[LEN_OBJ * k_id + 12] = 1.0;//b\n\n    objects[LEN_OBJ * k_id + 13] = 1.0;// mat\n    objects[LEN_OBJ * k_id + 14] = 0.0;// zerkalo\n\n\n    k_id = 5;\n    objects[LEN_OBJ * k_id + 0] = 2.0;//type            # 6 # TRIANGLE2 AREA\n\n    objects[LEN_OBJ * k_id + 1] = 10.0;//point 1 x\n    objects[LEN_OBJ * k_id + 2] = 10.0;//point 1 y\n    objects[LEN_OBJ * k_id + 3] = 0.0; //point 1 z\n\n    objects[LEN_OBJ * k_id + 4] = 0.0;//point 2 x\n    objects[LEN_OBJ * k_id + 5] = 10.0;//point 2 y\n    objects[LEN_OBJ * k_id + 6] = 0.0; //point 2 z\n\n    objects[LEN_OBJ * k_id + 7] = 0.0;//point 3 x\n    objects[LEN_OBJ * k_id + 8] = 0.0;//point 3 y\n    objects[LEN_OBJ * k_id + 9] = 0.0; //point 3 z\n\n    objects[LEN_OBJ * k_id + 10] = 0.2;//r\n    objects[LEN_OBJ * k_id + 11] = 0.2;//g\n    objects[LEN_OBJ * k_id + 12] = 0.2;//b\n\n    objects[LEN_OBJ * k_id + 13] = 1.0;// mat\n    objects[LEN_OBJ * k_id + 14] = 0.0;// zerkalo\n\n\n\n    k_id = 6;\n    objects[LEN_OBJ * k_id + 0] = 2.0;//type            # 7 # TRIANGLE2 AREA\n\n    objects[LEN_OBJ * k_id + 1] = 10.0;//point 1 x\n    objects[LEN_OBJ * k_id + 2] = 0.0;//point 1 y\n    objects[LEN_OBJ * k_id + 3] = 0.0; //point 1 z\n\n    objects[LEN_OBJ * k_id + 4] = 10.0;//point 2 x\n    objects[LEN_OBJ * k_id + 5] = 10.0;//point 2 y\n    objects[LEN_OBJ * k_id + 6] = 0.0; //point 2 z\n\n    objects[LEN_OBJ * k_id + 7] = 0.0;//point 3 x\n    objects[LEN_OBJ * k_id + 8] = 0.0;//point 3 y\n    objects[LEN_OBJ * k_id + 9] = 0.0; //point 3 z\n\n    objects[LEN_OBJ * k_id + 10] = 0.2;//r\n    objects[LEN_OBJ * k_id + 11] = 0.2;//g\n    objects[LEN_OBJ * k_id + 12] = 0.2;//b\n\n    objects[LEN_OBJ * k_id + 13] = 1.0;// mat\n    objects[LEN_OBJ * k_id + 14] = 0.0;// zerkalo\n\n\n    k_id = 7;\n    objects[LEN_OBJ * k_id + 0] = 2.0;//type            # 8 # TRIANGLE2 AREA\n\n    objects[LEN_OBJ * k_id + 1] = 0.0;//point 1 x\n    objects[LEN_OBJ * k_id + 2] = 0.0;//point 1 y\n    objects[LEN_OBJ * k_id + 3] = 0.0; //point 1 z\n\n    objects[LEN_OBJ * k_id + 4] = 0.0;//point 2 x\n    objects[LEN_OBJ * k_id + 5] = 10.0;//point 2 y\n    objects[LEN_OBJ * k_id + 6] = 0.0; //point 2 z\n\n    objects[LEN_OBJ * k_id + 7] = -10.0;//point 3 x\n    objects[LEN_OBJ * k_id + 8] = 0.0;//point 3 y\n    objects[LEN_OBJ * k_id + 9] = 0.0; //point 3 z\n\n    objects[LEN_OBJ * k_id + 10] = 1.0;//r\n    objects[LEN_OBJ * k_id + 11] = 1.0;//g\n    objects[LEN_OBJ * k_id + 12] = 1.0;//b\n\n    objects[LEN_OBJ * k_id + 13] = 1.0;// mat\n    objects[LEN_OBJ * k_id + 14] = 0.0;// zerkalo\n\n\n\n    k_id = 8;\n    objects[LEN_OBJ * k_id + 0] = 2.0;//type            # 9 # TRIANGLE2 AREA\n\n    objects[LEN_OBJ * k_id + 1] = 0.0;//point 1 x\n    objects[LEN_OBJ * k_id + 2] = 10.0;//point 1 y\n    objects[LEN_OBJ * k_id + 3] = 0.0; //point 1 z\n\n    objects[LEN_OBJ * k_id + 4] = -10.0;//point 2 x\n    objects[LEN_OBJ * k_id + 5] = 10.0;//point 2 y\n    objects[LEN_OBJ * k_id + 6] = 0.0; //point 2 z\n\n    objects[LEN_OBJ * k_id + 7] = -10.0;//point 3 x\n    objects[LEN_OBJ * k_id + 8] = 0.0;//point 3 y\n    objects[LEN_OBJ * k_id + 9] = 0.0; //point 3 z\n\n    objects[LEN_OBJ * k_id + 10] = 1.0;//r\n    objects[LEN_OBJ * k_id + 11] = 1.0;//g\n    objects[LEN_OBJ * k_id + 12] = 1.0;//b\n\n    objects[LEN_OBJ * k_id + 13] = 1.0;// mat\n    objects[LEN_OBJ * k_id + 14] = 0.0;// zerkalo\n\n    k_id = 9;\n    objects[LEN_OBJ * k_id + 0] = 1.0;//type                          # 10 #  CIRCLE LIGHT\n    objects[LEN_OBJ * k_id + 1] = 8.0;//x\n    objects[LEN_OBJ * k_id + 2] = 0.0;//y\n    objects[LEN_OBJ * k_id + 3] = 2.0;//z\n    objects[LEN_OBJ * k_id + 4] = 1.0;//ra\n\n    objects[LEN_OBJ * k_id + 5] = 1.0;//r\n    objects[LEN_OBJ * k_id + 6] = 1.0;//g\n    objects[LEN_OBJ * k_id + 7] = 1.0;//b\n    objects[LEN_OBJ * k_id + 8] = 1.0;// mat\n    objects[LEN_OBJ * k_id + 9] = 0.0;// zerkalo\n\n\n\n\n\n    k_id = 10;\n    objects[LEN_OBJ * k_id + 0] = 2.0;//type            # 11 # TRIANGLE  wall 1 1\n\n    objects[LEN_OBJ * k_id + 1] = -5.0;//point 1 x\n    objects[LEN_OBJ * k_id + 2] = -5.0;//point 1 y\n    objects[LEN_OBJ * k_id + 3] = 0.0; //point 1 z\n\n    objects[LEN_OBJ * k_id + 4] = -5.0;//point 2 x\n    objects[LEN_OBJ * k_id + 5] = -5.0;//point 2 y\n    objects[LEN_OBJ * k_id + 6] = 5.0; //point 2 z\n\n    objects[LEN_OBJ * k_id + 7] = -5.0;//point 3 x\n    objects[LEN_OBJ * k_id + 8] = 5.0;//point 3 y\n    objects[LEN_OBJ * k_id + 9] = 0.0; //point 3 z\n\n    objects[LEN_OBJ * k_id + 10] = 1.0;//r\n    objects[LEN_OBJ * k_id + 11] = 1.0;//g\n    objects[LEN_OBJ * k_id + 12] = 1.0;//b\n\n    objects[LEN_OBJ * k_id + 13] = 1.0;// mat\n    objects[LEN_OBJ * k_id + 14] = 0.0;// zerkalo\n\n    k_id = 11;\n    objects[LEN_OBJ * k_id + 0] = 2.0;//type            # 12 # TRIANGLE  wall 1 2\n\n    objects[LEN_OBJ * k_id + 1] = -5.0;//point 1 x\n    objects[LEN_OBJ * k_id + 2] = -5.0;//point 1 y\n    objects[LEN_OBJ * k_id + 3] = 5.0; //point 1 z\n\n    objects[LEN_OBJ * k_id + 4] = -5.0;//point 2 x\n    objects[LEN_OBJ * k_id + 5] = 5.0;//point 2 y\n    objects[LEN_OBJ * k_id + 6] = 5.0; //point 2 z\n\n    objects[LEN_OBJ * k_id + 7] = -5.0;//point 3 x\n    objects[LEN_OBJ * k_id + 8] = 5.0;//point 3 y\n    objects[LEN_OBJ * k_id + 9] = 0.0; //point 3 z\n\n    objects[LEN_OBJ * k_id + 10] = 1.0;//r\n    objects[LEN_OBJ * k_id + 11] = 1.0;//g\n    objects[LEN_OBJ * k_id + 12] = 1.0;//b\n\n    objects[LEN_OBJ * k_id + 13] = 1.0;// mat\n    objects[LEN_OBJ * k_id + 14] = 0.0;// zerkalo\n\n\n\n\n    k_id = 12;\n    objects[LEN_OBJ * k_id + 0] = 2.0;//type            # 13 # TRIANGLE  wall 2 1\n\n    objects[LEN_OBJ * k_id + 1] = 5.0;//point 1 x\n    objects[LEN_OBJ * k_id + 2] = -5.0;//point 1 y\n    objects[LEN_OBJ * k_id + 3] = 0.0; //point 1 z\n\n    objects[LEN_OBJ * k_id + 4] = 5.0;//point 2 x\n    objects[LEN_OBJ * k_id + 5] = -5.0;//point 2 y\n    objects[LEN_OBJ * k_id + 6] = 5.0; //point 2 z\n\n    objects[LEN_OBJ * k_id + 7] = 5.0;//point 3 x\n    objects[LEN_OBJ * k_id + 8] = 5.0;//point 3 y\n    objects[LEN_OBJ * k_id + 9] = 0.0; //point 3 z\n\n    objects[LEN_OBJ * k_id + 10] = 1.0;//r\n    objects[LEN_OBJ * k_id + 11] = 1.0;//g\n    objects[LEN_OBJ * k_id + 12] = 1.0;//b\n\n    objects[LEN_OBJ * k_id + 13] = 1.0;// mat\n    objects[LEN_OBJ * k_id + 14] = 0.0;// zerkalo\n\n\n\n    k_id = 13;\n    objects[LEN_OBJ * k_id + 0] = 2.0;//type            # 14 # TRIANGLE  wall 2 2\n\n    objects[LEN_OBJ * k_id + 1] = 5.0;//point 1 x\n    objects[LEN_OBJ * k_id + 2] = -5.0;//point 1 y\n    objects[LEN_OBJ * k_id + 3] = 5.0; //point 1 z\n\n    objects[LEN_OBJ * k_id + 4] = 5.0;//point 2 x\n    objects[LEN_OBJ * k_id + 5] = 5.0;//point 2 y\n    objects[LEN_OBJ * k_id + 6] = 5.0; //point 2 z\n\n    objects[LEN_OBJ * k_id + 7] = 5.0;//point 3 x\n    objects[LEN_OBJ * k_id + 8] = 5.0;//point 3 y\n    objects[LEN_OBJ * k_id + 9] = 0.0; //point 3 z\n\n    objects[LEN_OBJ * k_id + 10] = 1.0;//r\n    objects[LEN_OBJ * k_id + 11] = 1.0;//g\n    objects[LEN_OBJ * k_id + 12] = 1.0;//b\n\n    objects[LEN_OBJ * k_id + 13] = 1.0;// mat\n    objects[LEN_OBJ * k_id + 14] = 0.0;// zerkalo\n\n    \n\n\n\n    k_id = 14;\n    objects[LEN_OBJ * k_id + 0] = 2.0;//type            # 15 # TRIANGLE2 AREA                        ///STENA3\n\n    objects[LEN_OBJ * k_id + 1] = 10.0;//point 1 x\n    objects[LEN_OBJ * k_id + 2] = 10.0;//point 1 y\n    objects[LEN_OBJ * k_id + 3] = 0.0; //point 1 z\n\n    objects[LEN_OBJ * k_id + 4] = 10.0;//point 2 x\n    objects[LEN_OBJ * k_id + 5] = 10.0;//point 2 y\n    objects[LEN_OBJ * k_id + 6] = 10.0; //point 2 z\n\n    objects[LEN_OBJ * k_id + 7] = -10.0;//point 3 x\n    objects[LEN_OBJ * k_id + 8] = 10.0;//point 3 y\n    objects[LEN_OBJ * k_id + 9] = 0.0; //point 3 z\n\n    objects[LEN_OBJ * k_id + 10] = 1.0;//r\n    objects[LEN_OBJ * k_id + 11] = 1.0;//g\n    objects[LEN_OBJ * k_id + 12] = 1.0;//b\n\n    objects[LEN_OBJ * k_id + 13] = 0.0;// mat\n    objects[LEN_OBJ * k_id + 14] = 0.0;// zerkalo\n\n\n\n\n\n\n    k_id = 15;\n    objects[LEN_OBJ * k_id + 0] = 2.0;//type            # 16 # TRIANGLE2 AREA\n\n    objects[LEN_OBJ * k_id + 1] = 10.0;//point 1 x\n    objects[LEN_OBJ * k_id + 2] = 10.0;//point 1 y\n    objects[LEN_OBJ * k_id + 3] = 10.0; //point 1 z\n\n    objects[LEN_OBJ * k_id + 4] = -10.0;//point 2 x\n    objects[LEN_OBJ * k_id + 5] = 10.0;//point 2 y\n    objects[LEN_OBJ * k_id + 6] = 10.0; //point 2 z\n\n    objects[LEN_OBJ * k_id + 7] = -10.0;//point 3 x\n    objects[LEN_OBJ * k_id + 8] = 10.0;//point 3 y\n    objects[LEN_OBJ * k_id + 9] = 0.0; //point 3 z\n\n    objects[LEN_OBJ * k_id + 10] = 1.0;//r\n    objects[LEN_OBJ * k_id + 11] = 1.0;//g\n    objects[LEN_OBJ * k_id + 12] = 1.0;//b\n\n    objects[LEN_OBJ * k_id + 13] = 0.0;// mat\n    objects[LEN_OBJ * k_id + 14] = 0.0;// zerkalo\n    \n\n\n    k_id = 16;\n    objects[LEN_OBJ * k_id + 0] = 2.0;//type            # 17 # TRIANGLE2 AREA                             ///STENA1\n\n    objects[LEN_OBJ * k_id + 1] = -10.0;//point 1 x\n    objects[LEN_OBJ * k_id + 2] = -10.0;//point 1 y\n    objects[LEN_OBJ * k_id + 3] = 0.0; //point 1 z\n\n    objects[LEN_OBJ * k_id + 4] = -10.0;//point 2 x\n    objects[LEN_OBJ * k_id + 5] = -10.0;//point 2 y\n    objects[LEN_OBJ * k_id + 6] = 10.0; //point 2 z\n\n    objects[LEN_OBJ * k_id + 7] = 10.0;//point 3 x\n    objects[LEN_OBJ * k_id + 8] = -10.0;//point 3 y\n    objects[LEN_OBJ * k_id + 9] = 0.0; //point 3 z\n\n    objects[LEN_OBJ * k_id + 10] = 1.0;//r\n    objects[LEN_OBJ * k_id + 11] = 1.0;//g\n    objects[LEN_OBJ * k_id + 12] = 1.0;//b\n\n    objects[LEN_OBJ * k_id + 13] = 1.0;// mat\n    objects[LEN_OBJ * k_id + 14] = 0.0;// zerkalo\n\n\n\n    k_id = 17;\n    objects[LEN_OBJ * k_id + 0] = 2.0;//type            # 18 # TRIANGLE2 AREA\n\n    objects[LEN_OBJ * k_id + 1] = -10.0;//point 1 x\n    objects[LEN_OBJ * k_id + 2] = -10.0;//point 1 y\n    objects[LEN_OBJ * k_id + 3] = 10.0; //point 1 z\n\n    objects[LEN_OBJ * k_id + 4] = 10.0;//point 2 x\n    objects[LEN_OBJ * k_id + 5] = -10.0;//point 2 y\n    objects[LEN_OBJ * k_id + 6] = 10.0; //point 2 z\n\n    objects[LEN_OBJ * k_id + 7] = 10.0;//point 3 x\n    objects[LEN_OBJ * k_id + 8] = -10.0;//point 3 y\n    objects[LEN_OBJ * k_id + 9] = 0.0; //point 3 z\n\n    objects[LEN_OBJ * k_id + 10] = 1.0;//r\n    objects[LEN_OBJ * k_id + 11] = 1.0;//g\n    objects[LEN_OBJ * k_id + 12] = 1.0;//b\n\n    objects[LEN_OBJ * k_id + 13] = 1.0;// mat\n    objects[LEN_OBJ * k_id + 14] = 0.0;// zerkalo\n\n\n\n\n\n\n\n\n\n\n    k_id = 18;\n    objects[LEN_OBJ * k_id + 0] = 2.0;//type            # 19 # TRIANGLE2 AREA                             ///STENA2\n\n    objects[LEN_OBJ * k_id + 1] = 10.0;//point 1 x\n    objects[LEN_OBJ * k_id + 2] = -10.0;//point 1 y\n    objects[LEN_OBJ * k_id + 3] = 0.0; //point 1 z\n\n    objects[LEN_OBJ * k_id + 4] = 10.0;//point 2 x\n    objects[LEN_OBJ * k_id + 5] = -10.0;//point 2 y\n    objects[LEN_OBJ * k_id + 6] = 10.0; //point 2 z\n\n    objects[LEN_OBJ * k_id + 7] = 10.0;//point 3 x\n    objects[LEN_OBJ * k_id + 8] = 10.0;//point 3 y\n    objects[LEN_OBJ * k_id + 9] = 10.0; //point 3 z\n\n    objects[LEN_OBJ * k_id + 10] = 1.0;//r\n    objects[LEN_OBJ * k_id + 11] = 1.0;//g\n    objects[LEN_OBJ * k_id + 12] = 1.0;//b\n\n    objects[LEN_OBJ * k_id + 13] = 1.0;// mat\n    objects[LEN_OBJ * k_id + 14] = 0.0;// zerkalo\n\n\n\n\n\n\n    k_id = 19;\n    objects[LEN_OBJ * k_id + 0] = 2.0;//type            # 20 # TRIANGLE2 AREA\n\n    objects[LEN_OBJ * k_id + 1] = 10.0;//point 1 x\n    objects[LEN_OBJ * k_id + 2] = -10.0;//point 1 y\n    objects[LEN_OBJ * k_id + 3] = 0.0; //point 1 z\n\n    objects[LEN_OBJ * k_id + 4] = 10.0;//point 2 x\n    objects[LEN_OBJ * k_id + 5] = 10.0;//point 2 y\n    objects[LEN_OBJ * k_id + 6] = 10.0; //point 2 z\n\n    objects[LEN_OBJ * k_id + 7] = 10.0;//point 3 x\n    objects[LEN_OBJ * k_id + 8] = 10.0;//point 3 y\n    objects[LEN_OBJ * k_id + 9] = 0.0; //point 3 z\n\n    objects[LEN_OBJ * k_id + 10] = 1.0;//r\n    objects[LEN_OBJ * k_id + 11] = 1.0;//g\n    objects[LEN_OBJ * k_id + 12] = 1.0;//b\n\n    objects[LEN_OBJ * k_id + 13] = 1.0;// mat\n    objects[LEN_OBJ * k_id + 14] = 0.0;// zerkalo\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\n\tvec2 p = gl_FragCoord.xy / iResolution.xy;\n\tvec2 angle_view;\n\tangle_view.x=(p.x-0.5)*2.0;\n\tangle_view.y=(p.y-0.5)*2.0 / (iResolution.x/iResolution.y);\n\t\n\n\tvec3 p_dir;\n\tp_dir.x = 1.0;\n\tp_dir.y = angle_view.x;\n\tp_dir.z = angle_view.y;\n\tp_dir =normalize(p_dir);\n\n\tvec4 res= nebo;\n\tp_dir.zx *= rotate(-player_dir_angle.y);\n\tp_dir.xy *= rotate(player_dir_angle.x);\n\n\t\n\t\n\n\t\n\n\tres = Raycast(player_pos,p_dir,vec4(1.0),1.0);\n\tcolorout = res;\n}","name":"Image","description":"","type":"image"}]}