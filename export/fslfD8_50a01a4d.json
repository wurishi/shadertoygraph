{"ver":"0.1","info":{"id":"fslfD8","date":"1644803007","viewed":101,"name":"Simple 3d camera implement ","username":"chenxiaoleizi","description":"Simple 3d implement","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/4dfBRf\n// https://www.youtube.com/watch?v=PBxuVlp7nuM\n\nfloat rayPoint(vec3 ro, vec3 rd, vec3 p){\n    float s = length(cross(p - ro, rd));\n    float d = s / length(rd);\n    return smoothstep(0.05, 0.04, d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (2.0*fragCoord - iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0);\n    \n    \n    vec3 lookAt = vec3(0.);\n    // Ray origin (camera position)\n    vec3 ro = vec3(cos(iTime)*2.0, 1.0, sin(iTime)*2.0);\n    float zoom = 1.0;\n    \n    vec3 forward = normalize(lookAt - ro);\n    vec3 right = cross(vec3(0., 1., 0.), forward);\n    vec3 up = cross(forward, right);\n    vec3 center = ro + forward*zoom;\n    \n    vec3 st = center + uv.x*right + uv.y*up;\n    vec3 rd = st - ro;\n    \n    // Create 8 point at cube corner\n    vec3 p1 = vec3(0.5, 0.5, 0.5);\n    vec3 p2 = vec3(-0.5, 0.5, 0.5);\n    vec3 p3 = vec3(-0.5, 0.5, -0.5);\n    vec3 p4 = vec3(0.5, 0.5, -0.5);\n    vec3 p5 = vec3(0.5, -0.5, 0.5);\n    vec3 p6 = vec3(-0.5, -0.5, 0.5);\n    vec3 p7 = vec3(-0.5, -0.5, -0.5);\n    vec3 p8 = vec3(0.5, -0.5, -0.5);\n    col += rayPoint(ro, rd, p1);\n    col += rayPoint(ro, rd, p2);\n    col += rayPoint(ro, rd, p3);\n    col += rayPoint(ro, rd, p4);\n    col += rayPoint(ro, rd, p5);\n    col += rayPoint(ro, rd, p6);\n    col += rayPoint(ro, rd, p7);\n    col += rayPoint(ro, rd, p8);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}