{"ver":"0.1","info":{"id":"XXcGRj","date":"1716714553","viewed":41,"name":"Raymarching 3D Example","username":"omansounds","description":"Raymarching example with example functions.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Sphere sdf function\nfloat sdSphere( vec3 p, float s) {\n    return length(p) -s;\n}\n\n// Box sdf function\nfloat sdBox ( vec3 p, vec3 b ) {\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\n}\n\n// Smooth Union\nfloat smin( float a, float b, float k ) {\n    float h = max(k - abs(a-b), 0.0) / k;\n    return min(a, b) - h * h * h * k * (1.0 / 6.0);\n}\n\n// 3D Rotation\nvec3 rot3D(vec3 p, vec3 axis, float angle) {\n    //Rodrigues' rotation formula\n    return mix(dot(axis, p) * axis, p, cos(angle)) + cross(axis, p) * sin(angle);\n}\n\n// 2D Rotation \nmat2 rot2D(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\nfloat map(vec3 p) {\n    vec3 spherePos = vec3(sin(iTime) * 3., 0, 0);   // Sphere pos\n    float sphere = sdSphere(p - spherePos, 1.);     // Sphere SDF\n    \n    vec3 q = p;\n    \n    q.y -= iTime * 0.4;                   // Moves the cubes\n    \n    q = fract(q) - 0.5;                   // Space Repetition\n    \n    float box = sdBox(q, vec3(.1));       // Cube SDF\n    \n    float ground = p.y + 0.75;            // Ground SDF\n    \n    return smin(ground, smin(sphere, box, 2.), 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    \n    // Initialization\n    vec3 ro = vec3(0, 0, -3);             // Ray origin\n    vec3 rd = normalize(vec3(uv, 1));     // Ray direction\n    vec3 col = vec3(0);\n    \n    float t = 0.;                         // Total distance travelled\n\n    \n    // Raymarching\n    for (int i = 0; i < 80; i++) {\n        vec3 p = ro + rd * t;             // Posiiton along the ray\n        \n        float d = map(p);                 // Current distance to the scene\n        \n        t += d;                           // March the rays\n        \n        col = vec3(i) / 80.;\n        \n        if (d < .001 || t > 100.) break;  // Early Stop\n\n    }\n    \n    // Coloring\n    col = vec3(t * 0.05);         // Lower the float value to see further away\n    \n    fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}