{"ver":"0.1","info":{"id":"3lXfRS","date":"1706892308","viewed":120,"name":"Line Distorsion","username":"mathieu_h","description":"This shader generates a pattern based on a heightmap and a line. Click and drag to change the angle of the line.","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["line2dspacetransformdistorsion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float pi = 3.14159265359;\n\nfloat line(vec2 uv, float phi)\n{\n    float l = 0.;\n    float x = uv.x;\n    float y = uv.y;\n    \n    l = sin(phi)*x + cos(phi)*y - cos(phi)*x + sin(phi)*y;\n    l = abs(l);\n    l *= 333.;\n    l = clamp(l,0.,1.);\n    l = 1.- l;\n    \n    return l;\n}    \n\nvec2 mapScreen(vec2 uv)\n{\n    float ratio = iResolution.x/iResolution.y;\n    uv /= iResolution.xy;\n\tuv *= vec2(ratio,1.0);\n\tuv -= vec2(ratio*.5,.5);\n    return uv;\n}\n\nfloat getRotation(vec2 uv)\n{\n    float phi = 0.;\n    float upper = sign(-uv.y);\n    uv = normalize(uv);   \n    phi = upper *acos(dot(uv,vec2(1.,0.)));\n    phi += (1./4.)*pi; \n    return phi;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Screen space mapping\n\tvec2 uv = mapScreen(fragCoord);\n\tvec2 um = mapScreen(iMouse.xy);\n    \n    // Dot Grid\n    float size = 0.1;\n    vec2 uv_tiles = mod(uv+size*.5,size)-vec2(0.5)*size;\n    float dot_grid = 1.0 - clamp(dot(uv_tiles,uv_tiles)*100000.,0.,1.);\n    \n    // Sample Texture\n    float h = texture(iChannel0,uv).r;\n    vec2 pos = vec2(0.0);\n    \n    //Multipos UV\n    vec2 hatch = uv - mod(uv.x-.5,1.)*uv;\n    float rot = getRotation(um);\n    float line = line(hatch,  rot - h);\n    vec3 col = vec3(dot_grid + line);\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,1.0,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}