{"ver":"0.1","info":{"id":"Nd2cD1","date":"1643457358","viewed":97,"name":"Szumperlina","username":"Sztakler","description":"Simple shader based on The Art of Code tutorial\n","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["artofcodenoisegraph"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float distance_to_line(vec2 from, vec2 line_segment_start, vec2 line_segment_end) {\n    vec2 pa = from - line_segment_start;\n    vec2 ba = line_segment_end - line_segment_start;\n    \n    float t = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    \n    return length(pa - ba*t);\n}\n\nfloat N21(vec2 point) {\n    point = fract(point * vec2(233.32, 851.73));\n    point += dot(point, point + 23.45);\n    \n    return fract(point.x * point.y);\n}\n\nvec2 N22(vec2 point) {\n    float n = N21(point);\n    float m = N21(point + n);\n    return vec2(n, m);\n}\n\nvec2 get_position(vec2 id, vec2 offset) {\n    vec2 noise = N22(id + offset) * iTime;\n    return offset + sin(noise) * 0.4;\n}\n\nfloat draw_line(vec2 from, vec2 line_start, vec2 line_end) {\n    float dist = distance_to_line(from, line_start, line_end);\n    return smoothstep(0.01, 0.001, dist) * smoothstep(1.5, 0.8, length(line_start - line_end));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float distance = distance_to_line(uv, vec2(0.0, 0.0), vec2(1.0, 1.0));\n\n    //float m = smoothstep(0.001, 0.0001, distance);\n    float m = 0.0;\n   \n    uv *= 10.0;\n    vec2 gv = fract(uv) - vec2(0.5, 0.5);\n    vec2 grid_id = floor(uv);    \n    \n    \n    // Draw a dot\n    /*\n    vec2 dot_position = get_position(grid_id, vec2(0, 0));\n    float dot_distance = length(gv - dot_position);\n    m = smoothstep(0.1, 0.05, dot_distance);\n    */\n    \n    vec2 positions[9];\n    int i = 0;\n    for (int y = -1; y <= 1; y++) {\n        for (int x = -1; x <= 1; x++) {\n            positions[i] = get_position(grid_id, vec2(x, y));\n            i++;\n        } \n    }\n\n    // Draw lines inside the grid cell\n    for (int i = 0; i < 9; i++) {\n        m += draw_line(gv, positions[4], positions[i]);\n        \n        // Draw sparkles\n        vec2 grid_line = positions[i] - gv;\n        // Sparkles fade out due to inverse square law\n        float sparkle = 1.0 / (length(grid_line * 100.0) * length(grid_line * 10.0));\n        m += sparkle;\n    }\n    \n    // Draw four more lines between two neighbouring cells diagonally\n    m += draw_line(gv, positions[1], positions[3]);\n    m += draw_line(gv, positions[1], positions[5]);\n    m += draw_line(gv, positions[7], positions[3]);\n    m += draw_line(gv, positions[7], positions[5]);\n\n    \n    vec3 col = vec3(m);\n    \n    //if (gv.x > 0.48 || gv.y > 0.48)\n      //  col = vec3(1, 0, 0);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}