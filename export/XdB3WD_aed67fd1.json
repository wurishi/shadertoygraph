{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"code":"//digital - First Rotozoomer!\n//This classic demo effect realized for practice\n\nvec4 rotozoom(sampler2D chan, vec2 pos, float zoom, float rot)\n{\n\t// we are looking for a UV in texture space.\n\tvec2 uv = pos;\n\t\n\t// vertically flip the image to account for bottom-left origin\n\tuv.y = iResolution.y - uv.y - 0.5;\n\t\n\t// multiply by a 2D rotation matrix (http://en.wikipedia.org/wiki/Rotation_matrix)\n\t// and zoom at the same time\n\tuv *= mat2(cos(rot), -sin(rot), sin(rot), cos(rot))*zoom;\n\n    // assumes that the texture sampling allows for mod'ed ST coordinates\n\treturn vec4(texture(chan, uv/iChannelResolution[0].xy));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord.xy - fragCoord.xy/2.0;\n\tfloat rot = iTime/5.0;\n\tfloat zoom = 10.5 - 4.5*sin(iTime/2.0);\n\t\n\t// grab and draw the texel\t\n\tfragColor = rotozoom(iChannel0, p, zoom, rot);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XdB3WD","date":"1390716891","viewed":229,"name":"First Rotozoomer","username":"digital","description":"Perspective correct rotozoomer. Maintains image aspect ratio.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["rotozoom"],"hasliked":0,"parentid":"","parentname":""}}