{"ver":"0.1","info":{"id":"cdjXzW","date":"1669981238","viewed":89,"name":"Sweet Donut & Phong Reflection","username":"veronikawilliams","description":"Nice Torus with Phong Reflection","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["nicetorusphongreflection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Модель отражения Фонга\n/* состоит из \nокружающего освещения, диффузного отражения\n(ламбертовское отражение) и зеркального отражения\n\n*/\n\nconst int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float PRECISION = 0.001;\n\nfloat sdSphere(vec3 p, float r, float R, vec3 offset)\n{\n    return sqrt((R - sqrt(p.x * p.x + p.y * p.y)) * (R - sqrt(p.x * p.x + p.y * p.y)) + p.z * p.z)  - r; \n}\n\nfloat sdFloor(vec3 p) {\n  return p.y + 2.;\n}\n\nfloat sdScene(vec3 p) {\n  float co = min(sdSphere(p, .4, 1., vec3(0, 0, -2)), sdFloor(p));\n // float co = sdSphere(p, 1., vec3(0, 0, 0));\n  return co;\n}\n\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n  float depth = MIN_DIST;\n\n  for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n    vec3 p = ro + depth * rd;\n    float d = sdScene(p);\n    depth += d;\n    if (d < PRECISION || depth > MAX_DIST) break;\n  }\n\n  return depth;\n}\n\nvec3 calcNormal(vec3 p) {\n    vec2 e = vec2(1.0, -1.0) * 0.0005;\n    return normalize(\n      e.xyy * sdScene(p + e.xyy) +\n      e.yyx * sdScene(p + e.yyx) +\n      e.yxy * sdScene(p + e.yxy) +\n      e.xxx * sdScene(p + e.xxx));\n}\n\nmat3 camera(vec3 cameraPos, vec3 lookAtPoint) {\n\tvec3 cd = normalize(lookAtPoint - cameraPos); // camera direction\n\tvec3 cr = normalize(cross(vec3(0, 1, 0), cd)); // camera right\n\tvec3 cu = normalize(cross(cd, cr)); // camera up\n\t\n\treturn mat3(-cr, cu, -cd);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n  vec3 backgroundColor = vec3(0.835, 1, 1);\n  vec3 col = vec3(0);\n\n  vec3 lp = vec3(0); // lookat point (aka camera target)\n  vec3 ro = vec3(0, 0, 4);\n\n  vec3 rd = camera(ro, lp) * normalize(vec3(uv, -1)); // ray direction\n\n  float d = rayMarch(ro, rd);\n  \n  if (d > MAX_DIST) {\n  \n      col = backgroundColor;\n      \n  } else {\n      \n      vec3 p = ro + rd * d; // point on surface found by ray marching\n      vec3 normal = calcNormal(p); // surface normal\n\n      // light\n      vec3 lightPosition = vec3(cos(iTime), 2, sin(iTime));\n      vec3 lightDirection = normalize(lightPosition - p);\n\n      // ambient\n      float k_a = 0.7;\n      vec3 i_a = vec3(0.7, 0., 0.8);\n      vec3 ambient = k_a * i_a;\n\n      // diffuse\n      float k_d = 0.5;\n      float dotLN = clamp(dot(lightDirection, normal), 0., 1.);\n      vec3 i_d = vec3(1., 0., 0.);\n      vec3 diffuse = k_d * dotLN * i_d;\n      \n      // specular\n      float k_s = 0.6;\n      float dotRV = clamp(dot(reflect(lightDirection, normal), -rd), 0., 1.);\n      vec3 i_s = vec3(1, 1, 1);\n      float alpha = 10.;\n      vec3 specular = k_s * pow(dotRV, alpha) * i_s;\n\n      vec3 newRayOrigin = p + normal * PRECISION * 2.;\n      float shadowRayLength = rayMarch(newRayOrigin, lightDirection); // cast shadow ray to the light source\n      if (shadowRayLength < length(lightPosition - newRayOrigin)) ambient *= 0.3; // if the shadow ray hits the sphere, set the diffuse reflection to zero, simulating a shadow\n\n\n      // final sphere color\n      col = ambient + diffuse + specular;\n      \n  }\n\n  fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}