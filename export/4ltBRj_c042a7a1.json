{"ver":"0.1","info":{"id":"4ltBRj","date":"1540327963","viewed":166,"name":"iris_","username":"cardinalsine","description":"More abstract doodling.","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["abstract"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define PHI 1.61803398875\n\n// time (uniform)\n#define u_t iTime\n// resolution (uniform)\n#define u_res iResolution\n\n\nfloat fibonacciHash(float x) {\n    return mod((1./PHI)*x,1.);\n}\n\nfloat cosInterp(float x, float p0, float p1) {\n    return p0+(p1-p0)*0.5*(1.-cos(PI*fract(x)));\n}\n\nfloat distanceDet(vec2 p) {\n    float d0 = distance(vec2(-1.,1.), p.xy),\n    \t  d1 = distance(vec2(1.,1.), p.xy),\n    \t  d2 = distance(vec2(-1.,1.), p.xy),\n          d3 = distance(vec2(-1.,-1.), p.xy);\n\t\n    mat2 m0 = mat2(d0, d1,\n                   d2, d3);\n    \n    return determinant(m0);\n}\n\nfloat fHashNoiseF(float x) {\n    // integer part of coordinates\n    float x_i = floor(x);\n    \n    // hash\n    float x0 = fibonacciHash(x_i),\n    \t  x1 = fibonacciHash(x_i+1.);\n    \n    float fx = cosInterp(x, x0, x1);\n    return fx;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (2.*(fragCoord/iResolution.xy)-1.)*(iResolution.xy/iResolution.yy);\n    //uv = 2.*mod(vec2(0.5)+uv.xy*cos(1.*exp2(uv.x*uv.y)+iTime), 1.)-1.;\n    \n    float x_co = fHashNoiseF(1.*(distanceDet(uv.xy-2.)+u_t/16.));\n    float y_co = fHashNoiseF(1.*(distanceDet(uv.yx-2.)));\n\n    vec3 col = vec3(0.);\n\tvec3 colOffset = vec3(0.,0.5,1.)*(1.-distance(vec2(0.), uv.xy))*(0.5+0.5*sin(4.*iTime));\n    \n    float env = clamp((1.-pow(distance(vec2(0.,0.),uv.xy/2.), 4.)),0.,1.);\n    float gaussian2d = (exp(-1.*((uv.x*uv.x)+(uv.y*uv.y))));    \n         \n    float sum = 0.;\n    float a = 0.;\n    \n    for (float i=1.; i<96.; i++) {\n        a = (1./i)*(0.75+0.25*(x_co+y_co));\n        sum += a;\n        col += a*cos(14.*i*gaussian2d+2.*iTime+(2.*a*colOffset));\n    }\n    col = (1./sum)*(1.+col)*env;\n    //col = sqrt(col);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}