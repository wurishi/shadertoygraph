{"ver":"0.1","info":{"id":"4sycRW","date":"1521322221","viewed":1901,"name":"Solar Flare","username":"Xor","description":"I was playing around with my [url=https://www.shadertoy.com/view/4d2fzw]eclipse shader[/url] and came up with this. What do you think?\n\n4/8/22 Golfed down to 486 chars (from 592) and cleaned up the code.","likes":13,"published":1,"flags":0,"usePreview":1,"tags":["sun","light","space","flare"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 O,vec2 I)\n{\n    //Centered coordinates.\n    vec2 r = iResolution.xy,\n    p = (I+I-r)*1.1/r.y;\n    \n    //Initialize floats.\n    float t=iTime, d=dot(p,p), i = 1., l;\n    //Iterate through radii.\n    for(O -= O; i<1.7; i+=.01)\n    {\n        //Calculate rotating rays.\n        vec3 s = vec3(p*mat2(cos(i*.1+vec4(0,11,33,0))), sqrt(i-d));\n        //Sample texture with filter.\n    \tO += pow(texture(iChannel0,s.xy/sqrt(s.z)-.1*t),i*4.-vec4(3));\n    }\n    //Create edge glow and attenuation in space.\n\tO *= vec4(65,40,25,1)/4e3/(abs(d-1.)+.2);\n    //Calculate disk distance for solar flares.\n    l = 1.5-length(p+p.y*.4+.1*cos(p.x*6.+.2*t));\n    \n    //Added center glow.\n    O += vec4(2,1,.5,0)*( exp(-d) +\n\t//Calculate the solar flares (math magic).\n    .1*smoothstep(.8, 1., cos(t/8.+p.x+p.y*.4)) *\n    (cos(p.y*8.+t)*.3+.7) * exp(cos(p.x+p.y*.4+t)\n    -abs((cos(l*38.+p.x*17.+t+t)*.1+.9)*l)/.1) );\n}\n\n///Original 2018 version (592 chars):\n/*\nvoid mainImage(out vec4 O,vec2 I)\n{\n    O = vec4(0);\n    //Centered coordinates.\n    vec2 P = (I-.5*iResolution.xy)*2.2/iResolution.y;\n    //Iterate for radius.\n    for(float i = 1.;i<1.7;i+=.01)\n    {\n        //Calculate twisting sphere rays.\n        vec3 R = vec3(P,sqrt(i-dot(P,P)));\n        R.xy *= mat2(cos(i*.1),sin(i*.1),sin(i*.1),-cos(i*.1));\n        //Add light rays.\n    \tO += .025*pow(texture(iChannel0,R.xy/sqrt(R.z)-.1*iTime),vec4(i*4.-3.));\n    }\n    //Create edge glow and attenuation in space.\n\tO *= vec4(.65,.4,.25,1)/(abs(dot(P,P)-1.)+.2),pow(1.-sqrt(max(1.-dot(P,P),0.)),2.);\n    //Calculate disk distance for solar flares.\n    float D = 1.5-length(P+P.y*.4+.1*cos(P.x*6.+.2*iTime));\n    \n    //Added center glow.\n    O += vec4(2,1,.5,0)*(exp(-dot(P,P)) +\n\t//Calculate the solar flares.\n    .1*smoothstep(.8,1.,cos(iTime/8.+P.x+P.y*.4))*(cos(P.y*8.+iTime)*.3+.7)*exp(cos(P.x+P.y*.4+iTime)\n    -10.*abs((cos(D*38.+P.x*17.+2.*iTime)*.1+.9)*D)));\n}\n*/","name":"Image","description":"","type":"image"}]}