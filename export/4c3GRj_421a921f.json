{"ver":"0.1","info":{"id":"4c3GRj","date":"1711880385","viewed":41,"name":"Flashing bounds","username":"oubenruing","description":"Flashing bounds","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["flashingbounds"],"hasliked":0,"parentid":"lcd3WN","parentname":"Flashing points"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Map a floating point value to color\nvec3 mapValueToColor(float value) {\n   // Generate color using cosine function\n   vec3 col = 0.5 + 0.2 * cos((value + vec3(0, 2, 4)));\n   return col;\n}\n\n// Calculate Fourier series\nfloat fourierSeries(int n, float max, float time) {\n    float result = 0.0;\n    for (int i = 1; i <= n; i += 2) {\n        result += max * (1.0 / float(i)) * sin(float(i) * time);\n    }\n    return result;\n}\n\n// Calculate the position of the light point\nvec2 calculateLightPoint(vec2 pos, float time, float x) {\n    float ratio = iResolution.x / iResolution.y;\n    return pos + vec2(fourierSeries(12, 0.5, time * x - 0.75), fourierSeries(12, 0.5, time * x + 0.75));\n}\n\n// Flashing effect function\nfloat flashing(float time) {\n    return 0.6 + 0.2 * sin(2.0 * time) * sin(time);\n}\n\n// Lighting function\nfloat lighting(vec2 fragCoord, vec2 position) {\n    return 1.0 / abs(sqrt(distance(fragCoord, position) * 0.5));\n}\n\n// Render light points at a specific time\nvec3 renderPointsAtTime(vec2 fragCoord, float currentTime) {\n    float scale = iResolution.x / 800.0;\n    vec3 color = vec3(0, 0, 0);\n    vec2 position = vec2(0.5, 0.5);\n    \n    for (float i = 1.0; i < 6.0; i++) {\n        float time = currentTime * (4.1 - i * 0.6);\n        float lightingEffect = lighting(fragCoord, calculateLightPoint(position, time, i * 0.13)) * flashing(time);\n        vec3 newColor = lightingEffect * mix(mapValueToColor(currentTime * (i + 1.0) / 2.0), vec3(0.02, 0.01, 0.02), 0.95);\n        color = max(color, newColor);\n    }\n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalize pixel coordinates to [0, 1]\n    vec2 uv = fragCoord / iResolution.xy;\n   \n    // Final color value\n    vec3 color = vec3(0, 0, 0);\n\n    // Loop through time axis for rendering\n    for (float i = 0.0; i < 10.0; i++) {\n        float currentTime = iTime - i * 0.02;\n        vec3 newColor = renderPointsAtTime(uv, currentTime) * ((10.0 - i) / 10.0);\n        color = max(color, newColor);\n    }\n    \n    // Output to the screen\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"","name":"Common","description":"","type":"common"}]}