{"ver":"0.1","info":{"id":"Mccfzj","date":"1733263008","viewed":32,"name":"full visible spectrum in sRGB","username":"artefox","description":"full visible spectrum in sRGB\ni dont really think its accurate idk","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fullvisiblespectruminsrgb"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Approximate CIE color matching functions for wavelengths in nm (380-780nm range)\nvec3 wavelengthToXYZ(float wavelength) {\n    float x, y, z;\n\n    if (wavelength >= 380.0 && wavelength <= 780.0) {\n        // Approximation of CIE color matching functions\n        if (wavelength < 440.0) {\n            x = -(wavelength - 440.0) / (440.0 - 380.0);\n            y = 0.0;\n            z = 1.0;\n        } else if (wavelength < 490.0) {\n            x = 0.0;\n            y = (wavelength - 440.0) / (490.0 - 440.0);\n            z = 1.0;\n        } else if (wavelength < 510.0) {\n            x = 0.0;\n            y = 1.0;\n            z = -(wavelength - 510.0) / (510.0 - 490.0);\n        } else if (wavelength < 580.0) {\n            x = (wavelength - 510.0) / (580.0 - 510.0);\n            y = 1.0;\n            z = 0.0;\n        } else if (wavelength < 645.0) {\n            x = 1.0;\n            y = -(wavelength - 645.0) / (645.0 - 580.0);\n            z = 0.0;\n        } else {\n            x = 1.0;\n            y = 0.0;\n            z = 0.0;\n        }\n\n        // Scale intensity to mimic the eye's sensitivity curve\n        float intensity = 0.0;\n        if (wavelength >= 380.0 && wavelength < 420.0)\n            intensity = 0.3 + 0.7 * (wavelength - 380.0) / (420.0 - 380.0);\n        else if (wavelength >= 420.0 && wavelength < 645.0)\n            intensity = 1.0;\n        else if (wavelength >= 645.0 && wavelength <= 780.0)\n            intensity = 0.3 + 0.7 * (780.0 - wavelength) / (780.0 - 645.0);\n\n        //x *= intensity;\n        //y *= intensity;\n        //z *= intensity;\n    } else {\n        x = y = z = 0.0; // Wavelength out of visible range\n    }\n\n    // Normalize XYZ values for the D65 illuminant\n    return vec3(x * 0.49, y * 0.42, z * 0.31);\n}\n\n// Transform CIE XYZ to linear RGB\nvec3 xyzToLinearRGB(vec3 xyz) {\n    return vec3(\n        3.2406 * xyz.x - 1.5372 * xyz.y - 0.4986 * xyz.z,\n       -0.9689 * xyz.x + 1.8758 * xyz.y + 0.0415 * xyz.z,\n        0.0557 * xyz.x - 0.2040 * xyz.y + 1.0570 * xyz.z\n    );\n}\n\n// Apply gamma correction to linear RGB\nvec3 gammaCorrect(vec3 color) {\n    return vec3(\n        color.r <= 0.0031308 ? 12.92 * color.r : 1.055 * pow(color.r, 1.0 / 2.4) - 0.055,\n        color.g <= 0.0031308 ? 12.92 * color.g : 1.055 * pow(color.g, 1.0 / 2.4) - 0.055,\n        color.b <= 0.0031308 ? 12.92 * color.b : 1.055 * pow(color.b, 1.0 / 2.4) - 0.055\n    );\n}\n\n// Convert a wavelength (in nm) to gamma-corrected sRGB\nvec3 wavelengthToSRGB(float wavelength) {\n    // Step 1: Convert Wavelength to CIE XYZ using approximate color matching functions\n    vec3 xyz = wavelengthToXYZ(wavelength);\n\n    // Step 2: Convert CIE XYZ to linear RGB\n    vec3 linearRGB = xyzToLinearRGB(xyz);\n    linearRGB = max(linearRGB, vec3(0.0));\n\n    // Step 3: Gamma correct to sRGB\n    vec3 srgb = gammaCorrect(linearRGB);\n\n    return srgb;\n}\n\nvoid spectrum(inout vec3 color, vec3 newColor, vec2 uv, float minimum, float maximum) {\n    color = uv.y >= minimum && uv.y <= maximum ? newColor : color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec3 col = vec3(0.0);\n    spectrum(col, wavelengthToSRGB(uv.x * 200.0 + 426.0), uv, 0.25, 0.75);\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}