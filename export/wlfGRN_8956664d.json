{"ver":"0.1","info":{"id":"wlfGRN","date":"1569397748","viewed":267,"name":"RGB Glow Blur","username":"Canysway","description":"sample of RGB blur","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["blur","rgb"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 red = texture(iChannel0, uv).rgb;\n    vec3 green = texture(iChannel1, uv).rgb;\n    vec3 blue = texture(iChannel2, uv).rgb;\n    vec3 origin = texture(iChannel3, uv).rgb;\n    fragColor = vec4((red + green + blue + origin * .3), 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int blur_size = 20;\nconst float blur_width = 1.;\n\nfloat gauss(float x, float e){\n    return exp(-pow(x, 2.)/e);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 color = texture(iChannel0, uv);\n    fragColor = vec4(color.r, 0.,0., 1.);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"const int blur_size = 30;\nconst float blur_width = 4.;\n\nfloat gauss(float x, float e){\n    return exp(-pow(x, 2.)/e);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 pixval = vec4(0.);\n   \tfloat tot = 0.;\n\n\tint nb = 2*blur_size+1;\n\n   \tfor (int x=0; x<nb; x++){\n       float x2 = blur_width*float(x-blur_size);\n       vec2 ipos = uv + vec2(x2/iResolution.x, 0.);\n       float g = gauss(x2, float(400*blur_size)*(0.3));\n       pixval+= g*texture(iChannel0, ipos + vec2(0., .01));\n       tot+= g;\n   \t}\n    vec4 color = pixval/tot;\n    fragColor = vec4(0., color.g, 0., 1.);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"const int blur_size = 25;\nconst float blur_width = 3.;\n\nfloat gauss(float x, float e){\n    return exp(-pow(x, 2.)/e);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 pixval = vec4(0.);\n   \tfloat tot = 0.;\n\n\tint nb = 2*blur_size+1;\n\n   \tfor (int x=0; x<nb; x++){\n       float x2 = blur_width*float(x-blur_size);\n       vec2 ipos = uv + vec2(x2/iResolution.x, 0.);\n       float g = gauss(x2, float(400*blur_size)*(0.3));\n       pixval+= g*texture(iChannel0, ipos + vec2(0., .01));\n       tot+= g;\n   \t}\n    vec4 color = pixval/tot;\n    fragColor = vec4(0., 0., color.b, 1.);\n}","name":"Buffer C","description":"","type":"buffer"}]}