{"ver":"0.1","info":{"id":"MlBSDm","date":"1476280453","viewed":692,"name":"Rock the London","username":"starea","description":"test of homography and projective texture using the London texture","likes":9,"published":3,"flags":0,"usePreview":0,"tags":["2d","homography"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// @starea, Ruofei Du.\n\nconst float kPI = 3.141592654;\n\nstruct C_Ray {\n    vec3 vOrigin;\n    vec3 vDir;\n};\n\nvoid GetCameraRay( const in vec3 vPos, const in vec3 vForwards, const in vec3 vWorldUp, const in vec2 fragCoord, out C_Ray ray)\n{\n    vec2 vUV = ( fragCoord.xy / iResolution.xy );\n    vec2 vViewCoord = vUV * 2.0 - 1.0;\t\n\n    ray.vOrigin = vPos;\n\n    vec3 vRight = normalize(cross(vWorldUp, vForwards));\n    vec3 vUp = cross(vRight, vForwards);\n        \n    ray.vDir = normalize( vRight * vViewCoord.x + vUp * vViewCoord.y + vForwards);    \n}\n\nvoid GetCameraRayLookat( const in vec3 vPos, const in vec3 vInterest, const in vec2 fragCoord, out C_Ray ray)\n{\n\tvec3 vForwards = normalize(vInterest - vPos);\n\tvec3 vUp = vec3(0.0, 1.0, 0.0);\n\n\tGetCameraRay(vPos, vForwards, vUp, fragCoord, ray);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    C_Ray ray;\n    // adjust this for distance and edge distrotion.\n    \n\tfloat zPosition = 3.0; \n    vec3 vCameraPos = vec3(0.0, 0.0, zPosition);\n\tvCameraPos.x += sin(iTime * 5.0) * 0.5;\n\t\n\tvec3 vCameraIntrest = vec3(0.0, 0.0, 20.0);\n\tGetCameraRayLookat( vCameraPos, vCameraIntrest, fragCoord, ray);\n\n    float fHitDist = 100.0; // Raymarch(ray);\n\tvec3 vHitPos = ray.vOrigin + ray.vDir * fHitDist;\n\tvec3 vProjPos = vHitPos;\n\t\t\n\tfloat fProjectionDist = 0.5;\n\tvec2 vUV = vec2(((vProjPos.xy) * fProjectionDist) / vProjPos.z);\n\t\n\tvec2 vProjectionOffset = vec2(0.5, 0.5);\n\tvUV += vProjectionOffset;\n\t\t\n    // flip the texture coordinates\n\tvUV.y = 1.0 - vUV.y;\n    //float scale = 0.9; \n    //vUV = (((vUV * 2.0) - 1.0) * scale + scale) * 0.5; \n    \n\tvec3 vResult = texture(iChannel0, vUV).rgb;\n\t\n\tfragColor = vec4(vResult, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}