{"ver":"0.1","info":{"id":"MfyXDc","date":"1715907302","viewed":51,"name":"RGB each gradients color change","username":"nasino","description":"Pleaze look in `transferColor`.\nThis will replace r,g,b of sc to rt, gt, bt with keeping brightness.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","pixelart","colorpallet"],"hasliked":0,"parentid":"XcKSR3","parentname":"grass blocks"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R iResolution\n\nuint pixels[] = uint[](\n  0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0xff000080U,0xff000080U,0xff000080U,0xff000080U,0xff000080U,0xff000080U,0xff000080U,0xff000080U,0xff000080U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0xff000080U,0xff000080U,0xff7f7fffU,0xff0000ffU,0xff0000ffU,0xff0000ffU,0xff0000ffU,0xff0000ffU,0xff0000ffU,0xff0000ffU,0xffa9a9ffU,0xffd4d4ffU,0xff7f7fffU,0xff000080U,0xff000080U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0xff000080U,0xff0000ffU,0xff7f7fffU,0xff0000ffU,0xff00009fU,0xff00009fU,0xff00009fU,0xff00009fU,0xff00009fU,0xff00009fU,0xff00009fU,0xff00009fU,0xff00009fU,0xff00009fU,0xff0000dfU,0xff0000bfU,0xff0000ffU,0xff0000dfU,0xff000080U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0xff000080U,0xff7f7fffU,0xff7f7fffU,0xff0000dfU,0xff00009fU,0xff0000dfU,0xff00ff00U,0xff00ff00U,0xff00ff00U,0xff00ff00U,0xff00ff00U,0xff164570U,0xff7fff7fU,0xffa9ffa9U,0xffffffffU,0xffffffffU,0xff00b500U,0xff0000dfU,0xff00009fU,0xff0000bfU,0xff0000ffU,0xff0000ffU,0xff000080U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0xff000080U,0xff7f7fffU,0xff0000ffU,0xff0000dfU,0xff00009fU,0xff0000dfU,0xff00b500U,0xff00da00U,0xff00ff00U,0xff00ff00U,0xff00ff00U,0xff00ff00U,0xff00ff00U,0xffd4ffffU,0xff164570U,0xffa9ffa9U,0xffffffffU,0xffffffffU,0xff00b500U,0xff009000U,0xff00b500U,0xff0000dfU,0xff00009fU,0xff0000bfU,0xff0000dfU,0xff0000dfU,0xff000080U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0xff000080U,0xffa9a9ffU,0xff00009fU,0xff0000dfU,0xff00b500U,0xff00b500U,0xff00b500U,0xff00da00U,0xff00ff00U,0xff00ff00U,0xff00ff00U,0xff00ff00U,0xff164570U,0xffffffffU,0xff7fffffU,0xffa9ffa9U,0xffffffffU,0xffffffffU,0xff00b500U,0xff009000U,0xff009000U,0xff00b500U,0xff00b500U,0xff0000dfU,0xff00009fU,0xff0000dfU,0xff000080U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0xff000080U,0xffa9a9ffU,0xff0000dfU,0xff00da00U,0xff00b500U,0xff00b500U,0xff00b500U,0xff00da00U,0xff00ff00U,0xff00ff00U,0xff00ff00U,0xff00ff00U,0xff164570U,0xff7fffffU,0xff06d0dbU,0xffa9ffa9U,0xffd4ffd4U,0xffffffffU,0xff00b500U,0xff009000U,0xff009000U,0xff00b500U,0xff00da00U,0xff00da00U,0xff00009fU,0xff0000bfU,0xff000080U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0xff000080U,0xffa9a9ffU,0xff0000dfU,0xff00ff00U,0xff00b500U,0xff00b500U,0xff00b500U,0xff00da00U,0xff00ff00U,0xff00ff00U,0xff00ff00U,0xff164570U,0xff00ffffU,0xff00ffffU,0xff00ffffU,0xff164570U,0xffd4ffd4U,0xffffffffU,0xff00b500U,0xff009000U,0xff009000U,0xff00b500U,0xff00da00U,0xff00da00U,0xff00009fU,0xff0000bfU,0xff000080U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0xff000080U,0xff7f7fffU,0xff0000dfU,0xff00ff00U,0xff00b500U,0xff00b500U,0xff00b500U,0xff00da00U,0xff00ff00U,0xff164570U,0xff00ffffU,0xff570000U,0xffff0000U,0xffff0000U,0xffd50000U,0xff570000U,0xffffffffU,0xff164570U,0xff00b500U,0xff009000U,0xff009000U,0xff00b500U,0xff00da00U,0xff00da00U,0xff00009fU,0xff0000bfU,0xff000080U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0xff000080U,0xff7f7fffU,0xff0000dfU,0xff00ff00U,0xff00b500U,0xff00b500U,0xff00b500U,0xff00da00U,0xff00ff00U,0xff00ffffU,0xff570000U,0xffff0000U,0xffd50000U,0xffff6262U,0xffffa9a9U,0xffff6262U,0xff570000U,0xffa9ffffU,0xff00b500U,0xff009000U,0xff009000U,0xff00b500U,0xff00da00U,0xff00da00U,0xff00009fU,0xff0000bfU,0xff000080U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0xff000080U,0xff0000ffU,0xff0000dfU,0xff00ff00U,0xff00b500U,0xff00b500U,0xff00b500U,0xff00da00U,0xff164570U,0xff00ffffU,0xffd50000U,0xffab0000U,0xffab0000U,0xffffd4d4U,0xffffffffU,0xffffa9a9U,0xffff0000U,0xff00ffffU,0xff164570U,0xff009000U,0xff009000U,0xff00b500U,0xff00da00U,0xff00da00U,0xff00009fU,0xff0000bfU,0xff000080U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0xff000080U,0xff7f7fffU,0xff0000dfU,0xff00da00U,0xff00da00U,0xff00b500U,0xff00da00U,0xff00da00U,0xff164570U,0xff0ba2b7U,0xffd50000U,0xffab0000U,0xffab0000U,0xffffa9a9U,0xffffd4d4U,0xffff6262U,0xffff0000U,0xff0ba2b7U,0xff164570U,0xff009000U,0xff00b500U,0xff00b500U,0xff00b500U,0xff00da00U,0xff00009fU,0xff0000bfU,0xff000080U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0xff000080U,0xff7f7fffU,0xff0000dfU,0xff00da00U,0xff00da00U,0xff00b500U,0xff00da00U,0xff00da00U,0xff164570U,0xff164570U,0xffd50000U,0xff810000U,0xff810000U,0xff810000U,0xff810000U,0xffd50000U,0xffff0000U,0xff164570U,0xff164570U,0xff009000U,0xff00b500U,0xff00b500U,0xff00b500U,0xff00da00U,0xff00009fU,0xff0000bfU,0xff000080U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0xff000080U,0xff0000ffU,0xff0000dfU,0xff00da00U,0xff00da00U,0xff00b500U,0xff00da00U,0xff00da00U,0xff164570U,0xff00ffffU,0xffd50000U,0xff570000U,0xff570000U,0xff810000U,0xff810000U,0xffd50000U,0xffd50000U,0xff00ffffU,0xff164570U,0xff009000U,0xff00b500U,0xff00b500U,0xff00b500U,0xff00da00U,0xff00009fU,0xff0000bfU,0xff000080U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0xff000080U,0xff0000ffU,0xff0000dfU,0xff00da00U,0xff00da00U,0xff00b500U,0xff00da00U,0xff00da00U,0xff00da00U,0xff00ffffU,0xff570000U,0xffd50000U,0xffab0000U,0xff810000U,0xff810000U,0xffd50000U,0xff570000U,0xff00ffffU,0xff00b500U,0xff009000U,0xff00b500U,0xff00b500U,0xff00b500U,0xff00da00U,0xff00009fU,0xff0000bfU,0xff000080U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0xff000080U,0xff0000ffU,0xff0000dfU,0xff00da00U,0xff00da00U,0xff00b500U,0xff00da00U,0xff00da00U,0xff00da00U,0xff164570U,0xff00ffffU,0xff570000U,0xffd50000U,0xffd50000U,0xffd50000U,0xff570000U,0xff00ffffU,0xff164570U,0xff00b500U,0xff00b500U,0xff00b500U,0xff00b500U,0xff00b500U,0xff00da00U,0xff00009fU,0xff0000bfU,0xff000080U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0xff000080U,0xff0000ffU,0xff0000dfU,0xff00da00U,0xff00da00U,0xff00b500U,0xff00da00U,0xff00da00U,0xff00da00U,0xff00da00U,0xff00b500U,0xff164570U,0xff00ffffU,0xff00ffffU,0xff00ffffU,0xff164570U,0xff00da00U,0xffd4ffd4U,0xff00b500U,0xff00b500U,0xff00b500U,0xff00b500U,0xff00b500U,0xff00da00U,0xff00009fU,0xff0000bfU,0xff000080U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0xff000080U,0xff0000ffU,0xff0000dfU,0xff00da00U,0xff00da00U,0xff00b500U,0xff00da00U,0xff00da00U,0xff00da00U,0xff164570U,0xff164570U,0xff164570U,0xff06d0dbU,0xffffffffU,0xff117393U,0xff164570U,0xff164570U,0xff164570U,0xff00b500U,0xff00b500U,0xff00b500U,0xff00b500U,0xff00b500U,0xff00da00U,0xff00009fU,0xff0000bfU,0xff000080U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0xff000080U,0xff0000ffU,0xff0000dfU,0xff00da00U,0xff00da00U,0xff00b500U,0xff00da00U,0xff00da00U,0xff06d0dbU,0xff117393U,0xff0ba2b7U,0xffa9ffffU,0xff164570U,0xff164570U,0xff164570U,0xff06d0dbU,0xff0ba2b7U,0xff117393U,0xff06d0dbU,0xff00b500U,0xff00b500U,0xff00b500U,0xff00b500U,0xff00da00U,0xff00009fU,0xff0000bfU,0xff000080U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0xff000080U,0xff0000ffU,0xff0000dfU,0xff00da00U,0xff00da00U,0xff00b500U,0xff00da00U,0xff00da00U,0xff164570U,0xff164570U,0xff00da00U,0xff164570U,0xff06d0dbU,0xff164570U,0xff06d0dbU,0xff164570U,0xff7fff7fU,0xff164570U,0xff164570U,0xff00b500U,0xff00b500U,0xff00b500U,0xff00b500U,0xff00da00U,0xff00009fU,0xff0000bfU,0xff000080U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0xff000080U,0xff0000ffU,0xff0000ffU,0xff00b500U,0xff00da00U,0xff00da00U,0xff00da00U,0xff00da00U,0xff00da00U,0xff00da00U,0xff00da00U,0xff00ff00U,0xff06d0dbU,0xffffffffU,0xff06d0dbU,0xff00ff00U,0xff7fff7fU,0xff7fff7fU,0xff00b500U,0xff00b500U,0xff00b500U,0xff00b500U,0xff00da00U,0xff00b500U,0xff0000ffU,0xff0000bfU,0xff000080U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0xff000080U,0xff0000ffU,0xff7f7fffU,0xff00009fU,0xff00b500U,0xff00b500U,0xff00b500U,0xff00da00U,0xff00da00U,0xff00ff00U,0xff00ff00U,0xff00ff00U,0xff0ba2b7U,0xff117393U,0xff0ba2b7U,0xff7fff7fU,0xffa9ffa9U,0xffa9ffa9U,0xff009000U,0xff009000U,0xff00b500U,0xff00da00U,0xff00da00U,0xff00009fU,0xff0000ffU,0xff0000dfU,0xff000080U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0xff00009fU,0xff0000dfU,0xff0000ffU,0xff7f7fffU,0xff00b500U,0xff00b500U,0xff00da00U,0xff00da00U,0xff00ff00U,0xff00ff00U,0xff00ff00U,0xff00ff00U,0xff164570U,0xff00ff00U,0xff7fff7fU,0xffa9ffa9U,0xff7fff7fU,0xff00b500U,0xff009000U,0xff009000U,0xff00b500U,0xff0000dfU,0xff0000dfU,0xff0000dfU,0xff00009fU,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0xff000080U,0xff0000dfU,0xff0000ffU,0xff7f7fffU,0xff00009fU,0xff00da00U,0xff00da00U,0xff00ff00U,0xffffff00U,0xffffff00U,0xffffff00U,0xffff00ffU,0xffff00ffU,0xffff7fffU,0xffffa9ffU,0xff7fff7fU,0xff00b500U,0xff009000U,0xff00009fU,0xff0000ffU,0xff0000dfU,0xff0000dfU,0xff000080U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0xff0000dfU,0xff0000dfU,0xff7f7fffU,0xff00009fU,0xff00da00U,0xff00da00U,0xffe7f0f4U,0xffe7f0f4U,0xffe7f0f4U,0xffe7f0f4U,0xffe7f0f4U,0xfff0fbffU,0xfff0fbffU,0xff7fff7fU,0xff009000U,0xff00009fU,0xff0000ffU,0xff0000dfU,0xff00009fU,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0xff000080U,0xff0000dfU,0xff0000ffU,0xff0000ffU,0xff00da00U,0xffff00ffU,0xffff00ffU,0xffff00ffU,0xffffff00U,0xffffff00U,0xffffff7fU,0xffffffa9U,0xff00b500U,0xff0000dfU,0xff0000dfU,0xff0000bfU,0xff000080U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0xff000080U,0xff0000dfU,0xff0000ffU,0xff0000ffU,0xff00da00U,0xff00ff00U,0xff00ff00U,0xff00ff00U,0xff00ff00U,0xff7fff7fU,0xff00da00U,0xff7f7fffU,0xff0000bfU,0xff0000bfU,0xff000080U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0xff0000dfU,0xff0000ffU,0xff0000ffU,0xff00009fU,0xff00ff00U,0xff00ff00U,0xff00ff00U,0xff00009fU,0xffd4d4ffU,0xff0000bfU,0xff0000dfU,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0xff0000dfU,0xff0000ffU,0xff0000ffU,0xff00009fU,0xff00009fU,0xff00009fU,0xffffffffU,0xff0000dfU,0xff0000dfU,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0xff000080U,0xff0000dfU,0xff0000ffU,0xff0000ffU,0xff0000ffU,0xff0000dfU,0xff000080U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0xff000080U,0xff0000dfU,0xff0000dfU,0xff0000dfU,0xff000080U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0xff000080U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U,0x00000000U\n);\n\n\n\nuint getPixel32(vec2 uv) {\n    ivec2 coord = clamp(ivec2(floor(uv * 32.0)), ivec2(0), ivec2(32));\n    return pixels[clamp((32*32-1)-(coord.x + 32*coord.y), 0, 32*32-1)];\n}\n\nvec3 getPixel(vec2 uv) {\n    if (uv.x > 1.0 || uv.y > 1.0 || uv.x < 0.0 || uv.y < 0.0) return vec3(0.0);\n    uint pixel = getPixel32(uv);\n    uint r = (pixel >> (0U * 8U)) & 0xFFU;\n    uint g = (pixel >> (1U * 8U)) & 0xFFU;\n    uint b = (pixel >> (2U * 8U)) & 0xFFU;\n    return vec3(r, g, b) / float(0xFF);\n}\n\nvec3 randomColor(float r1, float r2, float smin, float smax) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 hsv = vec3(fract(iTime * 0.3 + r1), mix(smin, smax, fract(iTime * 0.01 + r2)), 1.0);\n    vec3 p = abs(fract(hsv.xxx + K.xyz) * 6.0 - K.www);\n    return hsv.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), hsv.y);\n}\n\n/*\n  Red  + Black: (x,0,0) => (x*A.r, x*A.g, x*A.b);\n  Red  + White: (1,x,x) => (x + (1-x)*A.r, x + (1-x)*A.g, x + (1-x)*A.b);\n  Green+ Black: (0,y,0) => (y*B.r, y*B.g, y*B.b);\n  Green+ White: (y,1,y) => (y + (1-y)*B.r, y + (1-y)*B.g, y + (1-y)*B.b);\n  Blue + Black: (0,0,z) => (z*C.r, z*C.g, z*C.b);\n  Blue + White: (z,z,1) => (z + (1-z)*C.r, z + (1-z)*C.g, z + (1-z)*C.b);\n  Others:       (x,y,z) => (x,y,z);\n*/\n\nvec3 transferColor(vec3 sc, vec3 rt, vec3 gt, vec3 bt) {\n    float mn = min(sc.r, min(sc.g, sc.b)); // minimum of r,g,b\n    vec3 hlt = vec3(mn, mn, mn); // highlight\n    vec3 hue = sc.rgb - mn;\n\n    // test hue if the two of r,g,b are 0.\n    float d1 = (1. - hue.r) * (1. - hue.g) * (1. - hue.b);            \n    float d2 = hue.r + hue.g + hue.b;                \n    float flag = step(d1 + d2, 1.0);\n\n    vec3 rgb = mix(sc, rt * hue.r + gt * hue.g + bt * hue.b + hlt, flag);\n\n    return rgb;\n}\n\nvec3 getBlocks(vec2 uv) {\n    float k1 = 4.0;\n    vec2 id = floor(uv*k1);\n    float k2 = 1.0;\n    vec2 lv = fract(uv*k1)*k2;\n    vec3 col = getPixel((lv-(k2*0.5))+0.5);    \n    vec3 rt = randomColor(fract(id.y * id.x * 0.1), fract(id.x * 0.1), 0.5, 1.0);\n    vec3 gt = randomColor(fract(id.x * .4), fract(id.y * .25), 0.2, 0.9);\n    vec3 bt = randomColor(fract(id.y * .1 + id.x * .2), 0.0, 1.0, 1.0);\n    return transferColor(col, rt, gt, bt);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord - 0.5 * R.xy) / R.y;\n    vec3 col = getBlocks(uv);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}