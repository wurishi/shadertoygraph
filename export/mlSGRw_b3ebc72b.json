{"ver":"0.1","info":{"id":"mlSGRw","date":"1673004748","viewed":120,"name":"Noisy polka dots","username":"xXxShaderG0DxXx","description":"noisy polka dots","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["dotsbasic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"// Fork of \"polka dots\" by meetar. https://shadertoy.com/view/ldXSRs\n// 2023-01-06 11:32:02\n\nconst float rad = 0.15;\nconst vec2 mid = vec2(0.5);\nconst ivec2 reps = ivec2(96, 96);\nconst float angle = 45.0;\nconst float RADIANS = angle * 0.0174532;\n// rotation matrix\nmat2 rot = mat2(vec2(cos(RADIANS), -sin(RADIANS)), vec2(sin(RADIANS), cos(RADIANS)));\n\n/* discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n/* skew constants for 3d simplex functions */\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\n/* 3d simplex noise */\nfloat simplex3d(vec3 p) {\n\t /* 1. find current tetrahedron T and it's four vertices */\n\t /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n\t /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n\t \n\t /* calculate s and x */\n\t vec3 s = floor(p + dot(p, vec3(F3)));\n\t vec3 x = p - s + dot(s, vec3(G3));\n\t \n\t /* calculate i1 and i2 */\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t /* x1, x2, x3 */\n\t vec3 x1 = x - i1 + G3;\n\t vec3 x2 = x - i2 + 2.0*G3;\n\t vec3 x3 = x - 1.0 + 3.0*G3;\n\t \n\t /* 2. find four surflets and store them in d */\n\t vec4 w, d;\n\t \n\t /* calculate surflet weights */\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n\t w = max(0.6 - w, 0.0);\n\t \n\t /* calculate surflet components */\n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.0), x3);\n\t \n\t /* multiply d by w^4 */\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t /* 3. return the sum of the four surflets */\n\t return dot(d, vec4(52.0));\n}\n\n/* const matrices for 3d rotation */\nconst mat3 rot1 = mat3(-0.37, 0.36, 0.85,-0.14,-0.93, 0.34,0.92, 0.01,0.4);\nconst mat3 rot2 = mat3(-0.55,-0.39, 0.74, 0.33,-0.91,-0.24,0.77, 0.12,0.63);\nconst mat3 rot3 = mat3(-0.71, 0.52,-0.47,-0.08,-0.72,-0.68,-0.7,-0.45,0.56);\n\n/* directional artifacts can be reduced by rotating each octave */\nfloat simplex3d_fractal(vec3 m) {\n    return   0.5333333*simplex3d(m*rot1);\n\n}\n\nfloat random (vec2 st, float seed)  {\n    return fract(sin(dot(st.xy,vec2(seed, 0.233)))*43761.777);\n}\n\n\n\n// blue secondary\nvec3 colorA = vec3(0.486, 0.69, 0.996);\n// red, primary\nvec3 colorB = vec3(0.909, 0.258, 0.0);\n\n// yellow, tertiary\nvec3 colorC = vec3(1.0, 0.83, 0.356);\n\nfloat quadraticInOut(float t) {\n  float p = 2.0 * t * t;\n  return t < 0.5 ? p : -p + (4.0 * t) - 1.0;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\t// the uv.. we are calling it p for pixel\n\tvec2 p = fragCoord.xy / iResolution.xy;\n\t// account for non square image aspect\n\tp.y *= float(iResolution.y )/ float(iResolution.x);\n\t//rotating the whole scene\t\n\n\t\n\t\n\t// q is just an offset - .5\n\tvec2 q = p - vec2(0.5, 0.5);\n\t\n\t\n\t//=====================\n\t// wave\n\t//=====================\n\t\n\t// creates a repeating 0-1 range\n\tvec2 repeat = vec2(fract(q.x * float(reps.x)), fract(q.y * float(reps.y)) );\t\n\t\n\t// holds the color\n\tvec3 col = vec3(0.671,0.671,0.671);\n\t\n\tvec2 distFromMid = repeat - mid;\n\t\n\t// drawing circles based on distance from center of each cell\n\tfloat dist = length(distFromMid);\n\t// aliased method\n\tfloat circ = dist < rad ? 1.0 : 0.0;\n\t// anti-aliased\n\t//float sharpness = 50.;\n\t//float circ = rad * sharpness - dist * sharpness;\n\t// for black on white, subtract rad from dist\n\t\n\tcol *= vec3(circ);\n    \n    \n    vec2 mousePos = iMouse.xy / iResolution.x;\n\tvec2 pNoise = fragCoord.xy/iResolution.x;\n\tvec3 p3 = vec3(pNoise, iTime*0.35);\n\t\n\tfloat value;\n\t\n    // increase the amount of circles here\n    value = simplex3d_fractal(p3*1.2+1.0);\n    \n    // mess around with what colors you want most\n\tvalue = 0.15 + 1.5*value;\n    \n    // if px position is near mousepos\n    // increase value\n    \n    float distNoise = pow(distance(mousePos, pNoise), 1.0);\n    distNoise = 1.0 - quadraticInOut(distNoise+0.3);\n    \n   value += distNoise*0.2;\n    \n   vec3 dotColor = vec3(value);\n    \n \n   \n   // added a bit of grain on top\n   dotColor += random(pNoise, iTime * 100.0) * 0.04;\n   \n   col = (col*0.3) + (dotColor * col);\n   \n            \n\tfragColor = vec4(\n\t\t\tcol,\n\t\t\t1.0);\n           \n    \n\t// fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}