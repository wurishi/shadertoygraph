{"ver":"0.1","info":{"id":"ttsyRr","date":"1591309739","viewed":185,"name":"[TWITCH] Peek-a-boomer","username":"Flopine","description":"A piece to enjoy with the sound from 20syl <3 \nHeavily inspired by this clip for C2C made in 2012: https://www.youtube.com/watch?v=YwmbbcMHiQ0\nMade during a twitch live, you can watch them here: https://www.twitch.tv/flopine","likes":6,"published":1,"flags":64,"usePreview":0,"tags":["2d","raymarching","refraction","motiongraphic","twitch","20syl"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XlB3R3","filepath":"https://soundcloud.com/20syl/peek-a-boomer-36","previewfilepath":"https://soundcloud.com/20syl/peek-a-boomer-36","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan and slerpy for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n\n// A PIECE TO ENJOY WITH THE SOUND OF 20SYL <3 \n\n#define PI acos(-1.)\n#define TAU 6.28\n#define BPM (100./60.)\n\n#define AAstep(thre, val) smoothstep(-.7,.7,(val-thre)/min(.07,fwidth(val-thre)))\n#define sblur 1.05\n#define tri(puv, s) AAstep(0.005,equitri(puv,s))\n#define wiret(puv,s) AAstep(0.03, abs(equitri(puv,s)))\n\n#define time(speed) fract(iTime*speed)\n#define animswitch(speed) floor(sin(time(speed)*TAU)+1.)\n\n\n// TOOLS ////////////////////////////////////////\nmat2 rot (float a)\n{return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nvoid mo (inout vec2 p, vec2 d)\n{\n    p = abs(p)-d;\n    if (p.y>p.x) p = p.yx;\n}\n\nfloat stmin (float a, float b, float k, float n)\n{\n    float st = k/n;\n    float u = b-k;\n    return min(min(a,b),0.5*(u+a+abs(mod(u-a+st,2.*st)-st)));\n}\n\nfloat hash21 (vec2 x)\n{return fract(sin(dot(x,vec2(122,21.1)))*1245.2);}\n\n// 2D //////////////////////////////////////////\nfloat equitri (vec2 p, float r)\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p=vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nfloat pattern1 (vec2 uv)\n{\n    float d = 1e10;\n    float s = 0.1;\n    for (int i = 0; i<5; i++)\n    {\n        s += 0.3;\n        d = min(d, wiret(uv, s));\n    }\n    return clamp(1.-d,0.,1.);\n}\n\nfloat trapez (vec2 uv)\n{\n    vec2 tuv = uv*rot(PI);\n    tuv += vec2(.2/3.*sqrt(1.25)*cos(PI/6.), .2/3.*sqrt(1.25)*sin(PI/6.))*1.6;\n    return tri(uv, .1) * tri(tuv,.1);\n}\n\nfloat trapezes (vec2 uv)\n{\n    vec2 uu = uv;\n    uv.y = abs(uv.y)-.05;\n    uv.x = abs(uv.x)-0.1;\n    float d = trapez(uv);\n    d += (uu.x>=0. && uu.y<=0. || uu.x<=0. && uu.y >=0.) ? .5:0.;\n    return clamp(d,0.,1.);\n}\n\nfloat pattern2 (vec2 uv)\n{\n    vec2 per = (animswitch(BPM)<=0.) ? vec2(.6,.3) : vec2(.7,.4);\n    uv = mod(uv,per)-per*.5;\n    return trapezes(uv);\n}\n\n// 3D //////////////////////////////////////////\nfloat box (vec3 p, vec3 c)\n{\n    vec3 q = abs(p)-c;\n    return min(0., max(q.x,max(q.y,q.z))) + length(max(q,0.));\n}\n\nfloat cyl (vec3 p, float r, float h)\n{return max(length(p.xy)-r,abs(p.z)-h);}\n\nfloat pillars (vec3 p)\n{\n    p.z -= 5.;\n    mo(p.xz, vec2(3., 1.));\n    float per = 4.;\n    float id = floor(p.y/per);\n    p.y = mod(p.y,per)-per*.5;\n    p.xy *= rot(hash21(vec2(id*0.8))*0.3);\n    return cyl(p.yzx, 0.4, 8.);\n}\n\nfloat SDF (vec3 p)\n{return stmin(-box(p, vec3(8.,20.,8.)),pillars(p),0.5,4.);}\n\nvec3 getnorm(vec3 p)\n{\n    vec2 eps = vec2(0.01,0.);\n    return normalize(SDF(p)-vec3(SDF(p-eps.xyy),SDF(p-eps.yxy),SDF(p-eps.yyx)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n\n    bool scene = animswitch(BPM/10.)<= 0.;\n    uv = (animswitch(BPM*.5)<=0.) ? uv : abs(uv)-.4;\n    float dither = hash21(uv);\n\n    vec3 ro = vec3(0.,-3.+time(0.2)*16.,-5.),\n        rd = normalize(vec3(uv,1.)),\n        p = ro,\n        l = normalize(vec3(0.,-1.,-1.)),\n        col = vec3(0.);\n    float shad;\n\n    for (float i=0.; i<64.; i++)\n    {\n        float d =SDF(p);\n        if (d<0.1)\n        {\n            shad = i/64.;\n            break;\n        }\n        d *= .9 +dither*.1;\n        if (scene) rd += pattern2(uv*2.)*0.02;\n        p += d*rd;\n    }\n\n    vec3 n = getnorm(p);\n    col = vec3(floor((dot(l,n)*.5+.5)*5.)/5.);\n    col *= (1.-shad);\n\n    float mult = (animswitch(BPM)<=0.) ? 1.:3.;\n    if (!scene) col = mix(1.-col, col, pattern1(uv*mult));\n\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}