{"ver":"0.1","info":{"id":"M3KSWW","date":"1719973655","viewed":36,"name":"Heronian Triangle Fractal Soup","username":"robfast","description":"A strange fractal based on the Heronian Triangle parameterization equations","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","modular","herontriangle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Define constants\n#define PI 3.14159265359\n\n// Helper functions\nfloat m(float t) { return 2.0 + sin(t); }\nfloat n(float t) { return 1.0 + cos(t); }\nfloat k(float t) { return 1.0 + sin(2.0 * t); }\n\n// Heronian triangle area calculation\nfloat heronianArea(float t, float x, float y) {\n    float m_val = m(t + x);\n    float n_val = n(t + y);\n    float k_val = k(t + x + y);\n    \n    float a = n_val * (m_val * m_val + k_val * k_val);\n    float b = m_val * (n_val * n_val + k_val * k_val);\n    float c = (m_val + n_val) * (m_val * n_val - k_val * k_val);\n    float s = (a + b + c) * 0.5;\n    \n    return sqrt(s * (s - a) * (s - b) * (s - c));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalize pixel coordinates\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    // Camera setup\n    vec3 ro = vec3(0.0, -3.0, -3.0); // Camera position\n    vec3 ta = vec3(0.0, 0.0, 0.0);  // Target position\n    float zoom = 1.0;\n    \n    // Camera-to-world matrix\n    vec3 ww = normalize(ta - ro);\n    vec3 uu = normalize(cross(ww, vec3(0.0, 1.0, 0.0)));\n    vec3 vv = normalize(cross(uu, ww));\n    vec3 rd = normalize(uv.x*uu + uv.y*vv + zoom*ww);\n\n    // Raymarch\n    float t = 0.0;\n    float tmax = 20.0;\n    float h = 0.0;\n    \n    for(int i = 0; i < 100; i++) {\n        vec3 p = ro + t * rd;\n        float time = iTime * 0.02; // Slow down the animation\n        h = heronianArea(time, p.x, p.z) * 0.5 - p.y;\n        if(h < 0.001 || t > tmax) break;\n        t += h * 0.5;\n    }\n    \n    // Coloring\n    vec3 col = vec3(0.0);\n    if(t < tmax) {\n        vec3 p = ro + t * rd;\n        float f = heronianArea(iTime * 0.2, p.x, p.z);\n        col = 0.5 + 0.5 * cos(f * 5.0 + vec3(0,2,4));\n    }\n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}