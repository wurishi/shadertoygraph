{"ver":"0.1","info":{"id":"7t3GRn","date":"1635573797","viewed":68,"name":"Ray_Marching_Learning1","username":"zyz414275148","description":"My personal ray marching learning work.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define LIGHT_POS vec3(0, 5, 6)\n\n#define MAX_STEP 100\n#define MAX_DIS 100.0\n#define SUR_DIS .01\n\nfloat GetDist(vec3 p)\n{\n    vec4 sphere = vec4(0, 1, 6, 1);\n    \n    float dis_plane = p.y;\n    float dis_sphere = length(p - sphere.xyz) - sphere.w;\n    \n    return min(dis_plane, dis_sphere);\n}\n\nvec3 GetNormal(vec3 p)\n{\n    float d_pos = GetDist(p);\n    \n    vec2 tinyVal = vec2(0.01, 0);\n    \n    vec3 n = d_pos - vec3\n    (\n        GetDist(p - tinyVal.xyy),\n        GetDist(p - tinyVal.yxy),\n        GetDist(p - tinyVal.yyx)\n    );\n    \n    return normalize(n);\n}\n\nfloat RayMarching(vec3 ro, vec3 rd)\n{\n    float resultD = 0.0;\n    \n    for(int i = 0; i < MAX_STEP; i++)\n    {\n        vec3 p = ro + rd * resultD;\n        float dis = GetDist(p);\n        \n        resultD += dis;\n        \n        if(resultD >= MAX_DIS || dis <= SUR_DIS) break;\n    }\n    \n    return resultD;\n}\n\nfloat GetLightIntensity(vec3 p)\n{\n    vec3 lightPos = LIGHT_POS;\n    lightPos.xz += vec2(sin(iTime), cos(iTime)) * 8.0;\n    \n    vec3 lightDir = normalize(lightPos - p);\n    vec3 normalDir = GetNormal(p);\n    \n    float dotInt = dot(lightDir, normalDir);\n    \n    float shadow_Rm = RayMarching(p + normalDir * SUR_DIS * 1.1, normalize(lightPos - p));\n    float realDis = length(p - lightPos);\n    \n    if(realDis > shadow_Rm) dotInt *= 0.5;\n    \n    return clamp(dotInt, 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy * 0.5)/iResolution.y;\n\n    vec3 ro = vec3(0, 1, 0);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n\n    float rm = RayMarching(ro, rd);\n\n    vec3 pos = ro + rd * rm;\n\n    vec3 col = vec3(rm);\n    \n    col = vec3(GetLightIntensity(pos), GetLightIntensity(pos), GetLightIntensity(pos));\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}