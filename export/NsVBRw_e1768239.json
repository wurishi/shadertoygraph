{"ver":"0.1","info":{"id":"NsVBRw","date":"1657870816","viewed":194,"name":"Spectrum Effect","username":"tuanlq89","description":"First GLSL","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["helloglsl"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"precision highp float;\n            \n\n            uniform float touchX;\n            uniform float touchY;\n            \n            #define iMouse vec2(touchX,touchY)\n            uniform float width;\n            uniform float height;\n            \n            \n            float sat( float t ) {\n                return clamp( t, 0.0, 1.0 );\n            }\n            \n            vec2 sat( vec2 t ) {\n                return clamp( t, 0.0, 1.0 );\n            }\n            \n            float remap  ( float t, float a, float b ) {\n                return sat( (t - a) / (b - a) );\n            }\n            \n            float linterp( float t ) {\n                return sat( 1.0 - abs( 2.0*t - 1.0 ) );\n            }\n            \n            vec3 spectrum_offset( float t ) {\n                vec3 ret;\n                float lo = step(t,0.5);\n                float hi = 1.0-lo;\n                float w = linterp( remap( t, 1.0/6.0, 5.0/6.0 ) );\n                float neg_w = 1.0-w;\n                ret = vec3(lo,1.0,hi) * vec3(neg_w, w, neg_w);\n                return pow( ret, vec3(1.0/2.2) );\n            }\n            \n            float rand( vec2 n ) {\n                return fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n            }\n            \n            float srand( vec2 n ) {\n                return rand(n) * 2.0 - 1.0;\n            }\n            \n            float mytrunc( float x, float num_levels ) {\n                return floor(x*num_levels) / num_levels;\n            }\n            \n            vec2 mytrunc( vec2 x, float num_levels ) {\n                return floor(x*num_levels) / num_levels;\n            }\n            \n    void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n                vec2 mouse = iMouse.x==0.?iResolution.xy:iMouse.xy;\n                float amountx = 0.0-mouse.x/iResolution.x*1.0;\n                float amounty = 0.0+mouse.y/iResolution.y*1.0;\n                vec2 uv = fragCoord.xy / iResolution.xy;\n                uv.y = uv.y;\n                float time = mod(iTime*100.0, 32.0)/110.0;\n                float gnm = sat( amountx );\n                float rnd0 = rand( mytrunc( vec2(time, time), 6.0 ) );\n                float r0 = sat((1.0-gnm)*0.7 + rnd0);\n                float rnd1 = rand( vec2(mytrunc( uv.x, uv.y ), time) );\n                float r1 = 0.5 - 0.5 * gnm + rnd1;\n                r1 = 1.0 - max( 0.0, ((r1<1.0) ? r1 : 0.9999999) );\n                float rnd2 = rand( vec2(mytrunc( uv.y, uv.x ), time) );\n                float r2 = sat( rnd2 );\n                float rnd3 = rand( vec2(mytrunc( uv.y, uv.x ), time) );\n                float r3 = (1.0-sat(rnd3+0.8)) - 0.1;\n                float pxrnd = rand( uv + time );\n                float ofs = 0.05 * r2 * amountx * ( rnd0 > 0.5 ? 1.0 : -1.0 );\n                ofs += 0.5 * pxrnd * ofs;\n                uv.y += 0.1 * r3 * amountx;\n                const int NUM_SAMPLES = 10;\n                const float RCP_NUM_SAMPLES_F = 1.0 / float(NUM_SAMPLES);\n                vec4 sum = vec4(0.0);\n                vec3 wsum = vec3(0.0);\n                \n                for( int i=0; i<NUM_SAMPLES; ++i ) {\n                    float t = float(i) * RCP_NUM_SAMPLES_F;\n                    uv.x = sat( uv.x + ofs * t );\n                    vec4 samplecol = texture( iChannel0, uv, -10.0 );\n                    vec3 s = spectrum_offset( t );\n                    samplecol.rgb = samplecol.rgb * s;\n                    sum += samplecol;\n                    wsum += s;\n                }\n                sum.rgb /= wsum;\n                sum.a *= RCP_NUM_SAMPLES_F;\n                fragColor.a = sum.a;\n                fragColor.rgb = sum.rgb;\n            }","name":"Image","description":"","type":"image"}]}