{"ver":"0.1","info":{"id":"MtscD8","date":"1504693749","viewed":96,"name":"test warp","username":"gilesruscoe","description":"test for a friend","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["stuff"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Constants\n//The amount of warp at the edges\nconst float RadialDifference = 1.5;\n//The global amount of warp\nconst float WarpAmount = -0.5;\n//Size of Sprite in pixels\nconst float SpriteSize = 40.0 / 256.0;\nconst float SpriteAnimSpeed = 10.0;\nconst float SpriteFrames = 6.0;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Shadertoy only, shouldnt be needed in godot\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    //Put uv's into centered coordinates\n    uv = uv * 2.0 - 1.0;\n    //Calc warp multiplier based on distance from center\n    float WarpMulti = length(uv) * RadialDifference;\n    //Construct rotation matrix\n    float cosX = cos(WarpAmount + WarpMulti);\n    float sinY = sin(WarpAmount + WarpMulti);\n    mat2x2 rotMat;\n    rotMat[0] = vec2(cosX, -sinY);\n    rotMat[1] = vec2(sinY, cosX);\n    //Apply rotation matrix\n    uv = uv * rotMat;\n    //Put uv's back into 0 to 1 space for sampling sprite correctly\n    uv = uv * 0.5 + 0.5;\n    //Sprite Frame Sampling\n    //Divide X by number of sprites\n    uv.x = uv.x / SpriteFrames;\n    //Interate sprites\n    int uvStep = int(mod(iTime * SpriteAnimSpeed, SpriteFrames));\n    float curFrame = SpriteSize * float(uvStep);\n    uv.x = uv.x + curFrame;\n    //Sampler the sprite with warped UVs\n    vec4 tex = texture(iChannel0, uv);\n    //Mask out the frames that bleed in after warping\n    tex = mix(tex, vec4(1.0, 1.0, 1.0, 0.0), max(step(uv.x, curFrame), 1.0 - step(uv.x, curFrame + SpriteSize)));\n\tfragColor = tex;\n}","name":"Image","description":"","type":"image"}]}