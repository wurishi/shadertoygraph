{"ver":"0.1","info":{"id":"tsVfRK","date":"1607545436","viewed":149,"name":"Colored Voronoi","username":"oneshade","description":"My second voronoi shader. Now with colors.","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["voronoi","colored"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 GetPoint(in vec2 cell) {\n    return 0.5 + 0.5 * vec2(sin(cell.x - cell.y + iTime), sin(cell.x) * cos(cell.x + cell.y * iTime));\n}\n\nvec3 GetColor(in vec2 cell) {\n    return vec3(fract(sin(cell.x * 4647.543 + cell.y * 2435.32) * 9658.65),\n                fract(cos(cell.x * 672.7963 + cell.y * 9873.35) * 124.355),\n                fract(sin(cell.x * 9446.745 + cell.y * 772.345) * 8755.64));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n    vec2 cellLocation = floor(uv);\n\n    float minDist = 1000000.0;\n    vec3 color = vec3(0.0, 0.0, 0.0);\n    for (int i=-1; i < 2; i++) {\n        for (int j=-1; j < 2; j++) {\n            vec2 curCellLocation = cellLocation + vec2(i, j);\n            vec2 curCellPoint = curCellLocation + GetPoint(curCellLocation);\n            float curDist = length(uv - curCellPoint);\n            if (curDist < minDist) {\n                color = GetColor(curCellLocation);\n                minDist = curDist;\n            }\n        }\n    }\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}