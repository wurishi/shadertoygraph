{"ver":"0.1","info":{"id":"Xdd3Rr","date":"1447774440","viewed":2005,"name":"ReversibleTonemapForResolve","username":"TimothyLottes","description":"Fast reversible tonemap for resolve. ","likes":8,"published":1,"flags":0,"usePreview":1,"tags":["tonemap","reversible","resolve"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"//\n// FAST REVERSIBLE TONEMAP FOR RESOLVE\n//\n\n//\n//\n\n// Using HLSL terms in this GLSL shader.\n#define float2 vec2\n#define float3 vec3\n\n// A portable fall-back for GCN's V_MAX3_F32 instruction.\n// This max3() instruction is supported by the following extension in GLSL,\n//   https://www.opengl.org/registry/specs/AMD/shader_trinary_minmax.txt\nfloat max3(float x, float y, float z) { return max(x, max(y, z)); }\n\n// A GLSL version of HLSL rcp().\nfloat rcp(float x) { return 1.0 / x; }\n\n//\n//\n\n// Can toggle on/off to see effect.\n#if 1\n\n// Apply this to tonemap linear HDR color \"c\" after a sample is fetched in the resolve.\n// Note \"c\" 1.0 maps to the expected limit of low-dynamic-range monitor output.\nfloat3 Tonemap(float3 c) { return c * rcp(max3(c.r, c.g, c.b) + 1.0); }\n\n// When the filter kernel is a weighted sum of fetched colors,\n//   it is more optimal to fold the weighting into the tonemap operation.\nfloat3 TonemapWithWeight(float3 c, float w) { return c * (w * rcp(max3(c.r, c.g, c.b) + 1.0)); }\n    \n// Apply this to restore the linear HDR color before writing out the result of the resolve.\nfloat3 TonemapInvert(float3 c) { return c * rcp(1.0 - max3(c.r, c.g, c.b)); }\n\n#else\n\nfloat3 Tonemap(float3 c) { return c; }\nfloat3 TonemapWithWeight(float3 c, float w) { return c*w; }\nfloat3 TonemapInvert(float3 c) { return c; }\n\n#endif \n\n//\n//\n//\n//\n\n// Simulated resolve-like operation using Tonemap() and TonemapInvert().\n// The final output is shown without any kind of tonemapper to be clear. \n\n// How bright the scene gets in peak (64 = 6 stops brighter).\n#define RANGE 64.0\n\n// Corrections for shadertoy's lack of sRGB support.\nfloat Linear1(float c) { return(c <= 0.04045) ? c / 12.92 : pow((c + 0.055) / 1.055, 2.4); }\nfloat3 Linear3(float3 c){ return float3(Linear1(c.r), Linear1(c.g), Linear1(c.b)); }\nfloat Srgb1(float c){ return(c < 0.0031308 ? c * 12.92 : 1.055 * pow(c, 0.41666) - 0.055); }\nfloat3 Srgb3(float3 c){ return float3(Srgb1(c.r), Srgb1(c.g), Srgb1(c.b)); }\n    \n// Return a linear sample from a test image at a specific sub-pixel offset.\n// Scale by a brightness which is a function of changing time.\nfloat3 Fetch(float2 uv, float2 off) {\n  float2 p = uv + off * 0.5;  \n  p += float2(p.y / 3.0, p.x / 2.0);\n  float b = (pow(fract(iTime / 8.0), 8.0) + 0.5 / RANGE) * RANGE;\n  float s = sin(p.x * p.x * (1.0/4096.0)) > 0.0 ? b * 0.5 : 0.0;  \n  float t = sin(p.y * p.y * (1.0/4096.0)) > 0.0 ? b * 0.5 : 0.0;  \n  return Linear3(texture(iChannel0, uv / iResolution.xy).rgb) * (s + t); }\n\n\n// Run a simple lowpass filter \"resolve\".\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  float2 uv = fragCoord.xy;\n  fragColor.rgb = Srgb3(TonemapInvert(\n    TonemapWithWeight(Fetch(uv, float2(-1.0, -1.0)), 1.0 / 16.0) +\n    TonemapWithWeight(Fetch(uv, float2( 0.0, -1.0)), 2.0 / 16.0) +\n    TonemapWithWeight(Fetch(uv, float2( 1.0, -1.0)), 1.0 / 16.0) +\n    TonemapWithWeight(Fetch(uv, float2(-1.0,  0.0)), 2.0 / 16.0) +\n    TonemapWithWeight(Fetch(uv, float2( 0.0,  0.0)), 4.0 / 16.0) +\n    TonemapWithWeight(Fetch(uv, float2( 1.0,  0.0)), 2.0 / 16.0) +\n    TonemapWithWeight(Fetch(uv, float2(-1.0,  1.0)), 1.0 / 16.0) +\n    TonemapWithWeight(Fetch(uv, float2( 0.0,  1.0)), 2.0 / 16.0) +\n    TonemapWithWeight(Fetch(uv, float2( 1.0,  1.0)), 1.0 / 16.0))); }\n","name":"","description":"","type":"image"}]}