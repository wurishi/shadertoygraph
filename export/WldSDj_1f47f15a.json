{"ver":"0.1","info":{"id":"WldSDj","date":"1581720349","viewed":122,"name":"Bouncing Pillars","username":"creikey","description":"Bouncing pillars kind of like https://www.youtube.com/watch?v=H81Tdrmz2LA , performance could be improved","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["3d","illusion","bouncing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST 0.01\n\n#define CAMERA_DIST 3.0\n#define CAMERA_HEIGHT 2.0\n#define BOXES 2.0\n#define BOX_WIDTH 0.2\n\nfloat fmod(float a, float b) { if(a<0.0) { return b - mod(abs(a), b); } return mod(a, b); }\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nstruct ray {\n    vec3 pos;\n    vec3 dir;\n};\n\nray create_camera_ray(vec2 uv, vec3 camPos, vec3 lookAt, float zoom){\n    vec3 f = normalize(lookAt - camPos);\n    vec3 r = cross(vec3(0.0,1.0,0.0),f);\n    vec3 u = cross(f,r);\n    vec3 c=camPos+f*zoom;\n    vec3 i=c+uv.x*r+uv.y*u;\n    vec3 dir=i-camPos;\n    return ray(camPos,normalize(dir));\n}\n\nfloat calculateBoxDist(vec3 p, float x, float z)\n{\n    x -= fmod(x, BOX_WIDTH);\n    z -= fmod(z, BOX_WIDTH);\n    \n    float sin_offset = pow(distance(vec2(x, z), vec2(0.0)), 3.0);\n    return sdBox(p - vec3(x, 0.3*(sin(iTime*3.0 + sin_offset)+1.0), z), vec3(BOX_WIDTH, 0.4, BOX_WIDTH));\n}\n\nfloat GetDist(vec3 p) {\n    vec4 sphere = vec4(0, 1, 6, 1);\n    \n    /*float boxDist = MAX_DIST;\n    for(float x = -BOXES/2.0; x<BOXES/2.0; x += BOX_WIDTH) {\n        for(float z = -BOXES/2.0; z<BOXES/2.0; z += BOX_WIDTH) {\n            \n            //boxDist = min(calculateBoxDist(p, x, z), boxDist);\n            float sin_offset = pow(distance(vec2(x, z), vec2(0.0)), 3.0);\n    \t\tfloat curBoxDist = sdBox(p - vec3(x, 0.3*(sin(iTime*3.0 + sin_offset)+1.0), z), vec3(BOX_WIDTH, 0.4, BOX_WIDTH));\n            boxDist = min(curBoxDist, boxDist);\n            \n        }\n    }*/\n    \n    float boxDist = MAX_DIST;\n    if(p.x > -BOXES/2.0 && p.x < BOXES/2.0 && p.z > -BOXES/2.0 && p.z < BOXES/2.0)\n    {\n     \t\n    \tfor(float x = p.x - BOX_WIDTH*3.0; x < p.x + BOX_WIDTH*3.0; x += BOX_WIDTH) {\n        \tfor(float z = p.z - BOX_WIDTH*3.0; z < p.z + BOX_WIDTH*3.0; z += BOX_WIDTH) {\n            \tboxDist = min(calculateBoxDist(p, x, z), boxDist);\n        \t}\n    \t}\n    }\n    \n    float planeDist = p.y;\n    \n    float d = min(boxDist, planeDist);\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p);\n    vec2 e = vec2(0.01, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(0, 5, 6);\n    \n    lightPos.xz += vec2(sin(iTime), cos(iTime))*2.;\n    \n    vec3 l = normalize(lightPos - p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    \n    float d = RayMarch(p+n*SURF_DIST*2., l);\n    if(d < length(lightPos-p)) dif *= .1;\n    \n    return dif;\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // where 0.0 is the center\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    vec3 col = vec3(0);\n    \n    ray r = create_camera_ray(uv, vec3(cos(iTime)*CAMERA_DIST, CAMERA_HEIGHT, sin(iTime)*CAMERA_DIST), vec3(0.0), 1.0);\n    \n    vec3 ro = r.pos;\n    vec3 rd = r.dir;\n    \n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd * d;\n    \n    float diffuse = GetLight(p);\n   \n    col = vec3(diffuse);\n    \n    //col = GetNormal(p);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}