{"ver":"0.1","info":{"id":"NlySzt","date":"1641248052","viewed":61,"name":"Genuary 2022 - Space","username":"zchwtsn","description":"Inspired from The Strokes \"At The Door\" music video.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["space"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    fragColor = vec4\n    (\n    \ttexture(iChannel0, uv - .0012).r,\n    \ttexture(iChannel0, uv).g,\n    \ttexture(iChannel0, uv + .0012).b,\n    \t1.0\n    );\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//rng\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(123.34, 456.21));\n    p += dot(p,p+45.32);\n    return fract(p.x*p.y);\n}\n\nmat2 Rot(float a) {\n    float s = sin(a), c = cos(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nfloat circle(vec2 uv, float r, float amt) {\n    float d = length(uv);\n    return smoothstep(r,r-amt,d);\n}\n\nfloat Star(vec2 uv, float n) {\n    //star\n    float d = length(uv)*map(n,0.,1.,.5,1.);\n    //float m = .03/d;\n    float m = smoothstep(.1,.05,d);\n    \n    \n    //smoothen across borders\n    m *= smoothstep(.5, .2, d/2.);\n    \n    return m;\n}\n\nfloat SmoothNoise(vec2 uv) {\n    vec2 lv = fract(uv);\n    vec2 id = floor(uv);\n    \n    lv = lv*lv*(3.-2.*lv);\n    \n    float bl = Hash21(id);\n    float br = Hash21(id+vec2(1,0));\n    float b = mix(bl, br, lv.x);\n    \n    float tl = Hash21(id+vec2(0,1));\n    float tr = Hash21(id+vec2(1,1));\n    float t = mix(tl, tr, lv.x);\n    \n    return mix(b, t, lv.y);\n}\n\nfloat SmoothNoise2(vec2 uv) {\n    float c = SmoothNoise(uv*4.);\n    \n    // don't make octaves exactly twice as small\n    // this way the pattern will look more random and repeat less\n    c += SmoothNoise(uv*8.2)*.5;\n    c += SmoothNoise(uv*16.7)*.25;\n    c += SmoothNoise(uv*32.4)*.125;\n    c += SmoothNoise(uv*64.5)*.0625;\n    \n    c /= 2.;\n    \n    return c;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    float burst = max(0.,1.-abs(uv.x*uv.y*100.));\n    uv*=Rot(3.1415/4.);\n    burst += max(0.,1.-abs(uv.x*uv.y*100.)-.5);\n    float rays = circle(uv,.5,.3)+circle(uv,.38,.1)/1.5+burst;\n    float blackhole = circle(uv,.3,.08);\n    \n    \n    uv *= 15.; //goes from -2.5 to 2.5\n\n\n    vec3 col = vec3(0);\n    \n    \n    //grid of boxes\n    vec2 gv = fract(uv)-.5; //subtract middle point;\n    vec2 id = floor(uv); // ids every box\n    \n    \n    //iterate through each boxes local neighborhood to get glow values\n    for(int y=-1;y<=1;y++) {\n        for(int x=-1;x<=1;x++) {\n            vec2 offs = vec2(x, y);\n        \n            float n = Hash21(id+offs); //random between 0-1\n    \n            //adding star with random location( minusing random coords from gv)\n            float star = Star(gv-offs-vec2(n-.5, fract(n*10.)-.5),Hash21(id+offs));\n            float size = fract(n*123.76);\n            \n            vec3 color = vec3(.5,.4,.9)+SmoothNoise2(uv/10.)*2.;\n            \n            col += SmoothNoise2(uv/10.)/10.*vec3(.5,.4,.9)/1.3;\n            \n            col += star*size*color-blackhole;\n        }\n    \n    }\n    \n    //col.rg = gv;\n    col+=rays*vec3(.8,.8,.5);\n\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}