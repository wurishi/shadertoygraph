{"ver":"0.1","info":{"id":"fdXGRX","date":"1616330309","viewed":95,"name":"DistanceShader","username":"Gallo","description":"Distance to the closes point with non black color.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["distance"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Distance to the closest non-black pixel\n\n#define PI 3.14159265359\n\n#define KERNEL_SIZE 32\n\n#define MODE_EUCLIDEAN 0\n#define MODE_CHEBYSHEV 1\n#define MODE_MANHATTAN 2\n\n//Change the mode here\n#define DIST_MODE MODE_CHEBYSHEV\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.yy;\n    vec2 rel = 1.0 / iResolution.yy;\n    \n    float stepValue = 0.9;\n    \n    // Time varying pixel color\n    float col = texture(iChannel0, uv).r;\n    col = step(stepValue, col );\n    \n    float size = 0.0;\n    size = float(KERNEL_SIZE);\n    \n    if((fragCoord.x > iResolution.x * 0.5) && col < 0.001)\n    {\n        vec2 closestCoord = uv + vec2(2000, 2000);\n        float closestLength = length(uv - closestCoord);\n        float closestColor = 0.0;\n\n        for(int y = -KERNEL_SIZE; y <= int(size); ++y)\n        {\n            for(int x = -KERNEL_SIZE; x <= int(size); ++x)\n            {\n                vec2 nbcoord = uv + (vec2(x, y) * rel);\n                float nblength = length(uv - nbcoord);\n                if(nblength < closestLength)\n                {\n                    float nbcol = step(stepValue, texture(iChannel0, nbcoord).r);\n                    if(nbcol > 0.001)\n                    {\n                        closestLength = nblength;\n                        closestCoord = nbcoord;\n                        closestColor = nbcol;\n                    }\n                }\n            }\n        }\n        \n        float maxLength = rel.x * float(KERNEL_SIZE);\n        \n#if DIST_MODE == MODE_CHEBYSHEV\n        vec2 closestRelative = abs(closestCoord - uv); \n        float closestManhattan = max(closestRelative.x, closestRelative.y);\n        col = closestColor * (1.0 - (closestManhattan / (maxLength)));\n#elif DIST_MODE == MODE_MANHATTAN\n        maxLength *= 0.9;\n        //TODO: mahattan should give a chebyshev pattern but aligned to x/y instead of diagonals\n        vec2 closestRelative = maxLength - (rotate2d(0.25 * PI) * abs(closestCoord - uv)).xy; \n        float closestManhattan = (min(closestRelative.x, closestRelative.y)) / maxLength;\n        col = closestColor * (closestManhattan);\n#else\n        col = closestColor * (1.0 - (closestLength / maxLength));\n#endif\n    }\n    \n    // Output to screen\n    fragColor = vec4(col, col, col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,1.0,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}