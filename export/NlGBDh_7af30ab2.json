{"ver":"0.1","info":{"id":"NlGBDh","date":"1664386955","viewed":94,"name":"Damaged VCR CIS 566","username":"nmoon","description":"Simulating a damaged VCR playing a video","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["chromaticaberration"],"hasliked":0,"parentid":"stGBWR","parentname":"Damaged VCR puzzle"},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Hint, it's a few lines of code, and makes use of a tan function :)\n    vec2 warpedUv = uv;\n    \n    float sinVal = sin(((iTime * 0.125) - (uv.y * 1.0f)) * 5.5f);\n    if (sinVal > 0.97) {\n        sinVal = sin(uv.y * 1000.0);\n        if (sinVal > 0.5) {\n            float tanVal = tan(uv.x + 1.5707 - (iTime * 2.0)) / 100.0f;\n            float tanVal2 = tan(uv.y + 1.5707 - (iTime * 40.75)) / 100.0f;\n            warpedUv += vec2(tanVal + (sin(iTime * 2.0 + pow(uv.y,0.125f)) / 20.0f), tanVal2);\n        }\n    }\n    \n    \n    \n    vec2 offset1 = vec2(-0.01f, 0.01f);\n    vec2 offset2 = vec2(0.005f, 0.0f);\n    vec2 offset3 = vec2(-0.01f, -0.01f);\n    \n    float r = texture(iChannel0, warpedUv + offset1).r;\n    float g = texture(iChannel0, warpedUv + offset2).g;\n    float b = texture(iChannel0, warpedUv + offset3).b;\n                          \n    vec3 col = vec3(r, g, b);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}