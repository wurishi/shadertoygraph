{"ver":"0.1","info":{"id":"sscGRS","date":"1630046855","viewed":97,"name":"3D BÃ©zier Curve (Revise)","username":"wylm","description":"The orgin version is in https://www.shadertoy.com/view/ss33D7.  Revising by the remarks of @FabriceNeyret2.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["beziercurve"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SAMPLE_SIZE 30\n\nfloat t(){\n    return abs(cos(iTime));\n}\n\nfloat line(vec2 uv, vec2 p1, vec2 p2)\n{\n    float wid = 0.005;\n    vec2 dir0 = p2 -p1;\n    vec2 dir1 = uv - p1;\n    float h = clamp(dot(dir0, dir1)/dot(dir0, dir0), 0.0, 1.0);\n    return (length(dir1 - dir0 * h) - wid * 0.5);\n}\n\nfloat point(vec2 uv, vec2 p, float r){\n    vec2 offset = uv - p;\n    return sqrt((offset.x * offset.x) + (offset.y * offset.y)) - r;\n}\n\n\nvec2 line_pos(float t, vec2 b0, vec2 b1, vec2 b2){\n    vec2 r0 = mix(b0, b1, t);\n    vec2 r1 = mix(b1, b2, t);\n    return mix(r0, r1, t);\n}\n\nvec4 render(float d){\n    float stroke = fwidth(d) * 1.0;\n    float anti = fwidth(d) * 0.5;\n    vec4 strokeLayer = vec4(vec3(0.05), 1.0-smoothstep(-anti, anti, d - stroke));\n    vec4 colorLayer = vec4(vec3(0.1), 1.0-smoothstep(-anti, anti, d));\n\n    if (stroke < 0.000001) {\n    \treturn colorLayer;\n    }\n    return vec4(mix(strokeLayer.rgb, colorLayer.rgb, colorLayer.a), strokeLayer.a);\n}\n\n\nvec4 draw_line(vec2 uv, vec2 p1, vec2 p2)\n{\n    float d = line(uv,p1,p2);\n    return render(d);\n}\n\nvec4 draw_point(vec2 uv, vec2 p, float r )\n{\n    float d = point(uv,p,r);\n    return render(d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord.xy/iResolution.xy - vec2(0.5);\n    uv.x *= iResolution.x/iResolution.y;\n    \n    // Time varying pixel color\n    vec3 col = vec3(0.8);\n    \n    vec2 apexes[9];\n    vec4 layer;\n    \n    apexes[0] = vec2(-0.65 + 0.1*sin(iTime),-0.25 - 0.1*sin(iTime));\n    apexes[1] = vec2(-0.1,0.);\n    apexes[2] = vec2(0.25 + 0.1*cos(iTime),-0.35+ 0.1*cos(iTime));\n    apexes[3] = vec2(-0.4,0.25);\n    apexes[4] = vec2(0.15,0.35+0.1*t());\n    apexes[5] = vec2(0.5,0.2);\n    apexes[6] = vec2(-0.2,0.1+0.1*cos(iTime));\n    apexes[7] = vec2(0.25,0.15+0.1*t());\n    apexes[8] = vec2(0.7 + 0.1*sin(iTime),0. + 0.1*sin(iTime));\n    \n#if 1\n    //draw line\n    for(int i = 1; i < 9; i+=2){\n        int p1 = i-3 < 0 ? 0 : i-3;\n        int p2 = 3-i < 0 ? i-1 : i+1;\n        int p3 = i+3 < 8 ? i+3 : 8;\n        \n        layer = draw_line(uv,apexes[p1],apexes[i]);\n        col = mix(col, layer.rgb,layer.a);\n        layer = draw_line(uv,apexes[i],apexes[p2]);\n        col = mix(col, layer.rgb,layer.a);\n        layer = draw_line(uv,apexes[i],apexes[p3]);\n        col = mix(col, layer.rgb,layer.a);\n    }\n    \n    // draw point\n    for(int i = 0; i < 9; i++){\n        layer = draw_point(uv,apexes[i],0.02);\n        col = mix(col, layer.rgb,layer.a);\n    }\n#endif\n\n    // traverse y axis\n    float pm = 1./float(SAMPLE_SIZE);\n    for(int i = 0; i<=SAMPLE_SIZE; i+=1){\n        vec2 c0 = line_pos(pm*float(i), apexes[0], apexes[3], apexes[6]);\n        vec2 c1 = line_pos(pm*float(i), apexes[1], apexes[4], apexes[7]);\n        vec2 c2 = line_pos(pm*float(i), apexes[2], apexes[5], apexes[8]);\n        \n        // traverse x axis\n        for(int j = 0; j<=SAMPLE_SIZE; j+=1){\n            vec2 p = line_pos(pm*float(j), c0, c1, c2);\n            layer = draw_point(uv,p,0.002);\n            col = mix(col, layer.rgb,layer.a);\n        }\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}