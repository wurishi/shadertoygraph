{"ver":"0.1","info":{"id":"MdKSRz","date":"1462652257","viewed":155,"name":"Rising Sun Simulator 2017","username":"Egomeh","description":"A jiggly rising sun! : D","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvec3 sample_(vec2 uv)\n{\n    vec3 ret;\n    \n    vec4 tex = texture(iChannel1, uv);\n    \n    vec3 red0 = vec3(66.0,  13.0,  9.0) / 255.0;\n    vec3 red1 = vec3(226.0,  37.0,  43.0) / 255.0;\n    vec3 red = mix(red1, red0, tex.x / 4.0);\n    \n    vec3 yellow0 = vec3(250.0,  243.0,  245.0) / 255.0;\n    vec3 yellow1 = vec3(239.0,  253.0,  9.0) / 255.0;\n    vec3 yellow = mix(yellow0, yellow1, tex.y);\n  \n    float textureLookup = texture(iChannel0, vec2(.5 ,.5)).r;\n    if (textureLookup > 0.5)\n    {\n        ret = red;\n    }\n    else\n    {\n        ret = yellow;\n    }\n    \n    float edge = texture(iChannel0, uv).r;\n    return ret;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    fragColor = vec4(texture(iChannel0, uv).r);\n    return;\n   \n    bool onEdge =  texture(iChannel0,uv).r == 1.0;\n    if (onEdge)\n    {\n        \n        vec2 up = vec2(0,1) / iResolution.xy;\n        vec2 right = vec2(1,0) / iResolution.xy;\n        \n        vec3 s0 = sample_(uv);\n        \n        vec3 s1 = sample_(uv + up);\n        vec3 s2 = sample_(uv + right);\n        vec3 s3 = sample_(uv - up);\n        vec3 s4 = sample_(uv - right);\n        \n        vec3 s5 = sample_(uv + up + right);\n        vec3 s6 = sample_(uv - up - right);\n        vec3 s7 = sample_(uv + right - up);\n        vec3 s8 = sample_(uv - right + up);\n        \n        vec3 sum = s0 + (s1 + s2 + s3+ s4) * 1.0 + (s5 + s6 + s7 + s8);\n        sum = sum / 9.0;\n        \n    \tfragColor = vec4(sum,1);\n        //fragColor = vec4(sample(uv),1);\n    }\n    else\n    {\n        fragColor = vec4(sample_(uv),1);\n    }\n    \n    \n    //vec4 texture = texture(iChannel1,uv);\n    //fragColor = vec4(texture.rgb,1.) + vec4(0,0,texture(iChannel0,uv).r,0);\n\t\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGzn","filepath":"/media/a/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3","previewfilepath":"/media/ap/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float radius = 0.1;\nconst float PI = 3.14159265358979323846;\nconst int fans = 12;\nconst float startFans = 9.85;\n\n\nvec2 inFan(vec2 center, vec2 pos, float time)\n{\n    \n    if(length(pos - center) > log(iTime - startFans) * 1.0)\n        return vec2(0,0);\n    \n    float sliceAngle = PI / float(fans);\n    float angle = iTime * 0.5;\n    for (int i = 0; i < fans; i++)\n    {\n        \n        vec2 up = vec2(0,-1);\n        \n        float mAngle = float(i) * sliceAngle * 2.0 + angle;\n        vec2 rotated = vec2( up.x * cos(mAngle) - up.y * sin(mAngle), \n                             up.x * sin(mAngle) + up.y * cos(mAngle));\n        \n        float cang = (dot(normalize(pos - center), rotated) + 1.0) * PI * float(fans);\n        vec2 centerToPos = pos - center;\n        \n        vec2 proj = center + dot(pos - center, rotated);\n        float rd = length(center - proj);\n        float offset = 1.0 - texture( iChannel0, vec2(0.1 / length(rd)) ).x * 2.0  ;\n       \n        float amt = offset * (0.5 / length(rd)) * 0.5;\n        if ( cang < sliceAngle + amt )\n        {\n            return vec2(cang < sliceAngle + amt, length(centerToPos));\n        }\n        \n        \n    }\n\treturn vec2(0,0);\n}\n\nvec2 inCircle(vec2 center, vec2 pos, float time)\n{\n    vec2  cp = normalize(pos - center);\n    float dp = (dot(cp, vec2(0,1)) + 1.0) / 2.0;\n    float m  = step( 0.0, dot( cp, vec2(1,0) ) );\n    float lookup = dp / 10.0;\n    float offset = texture( iChannel0, vec2(lookup, 0.1) ).x / 20.0;\n    float rad = smoothstep(0.0, 1.0, clamp(time / 8.0, 0.0, 1.0));\n    return vec2(length(center - pos) < rad *(radius + (offset)), length(center - pos));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspect = iResolution.x / iResolution.y;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 screenPos = uv;\n    \n    vec2 mouseUV;\n    if (iMouse.z > 0.0)\n    {\n        mouseUV = iMouse.xy / iResolution.xy;\n    }\n    else\n    {\n        mouseUV = vec2(0.75, 0.75);\n    }\n    \n    screenPos.x *= aspect;\n    mouseUV.x *= aspect;\n    \n    float soundSample = (sin(iTime / 10.0) + 1.0) / 2.0;\n    vec4 color = texture( iChannel0, vec2(length(vec2(screenPos - mouseUV)), soundSample) );\n    \n    \n    float mTime = iTime;\n    \n    vec2 col;\n   \tcol = max(inCircle(mouseUV, screenPos, mTime), inFan(mouseUV, screenPos, mTime));\n\n    \n    fragColor = vec4( vec2(color.x,color.y) / 1.5, col.x, true);\n    \n\n    \n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n   \n    vec2 up = uv + vec2(0,-1) / iResolution.xy;\n    vec2 right = uv + vec2(1,0) / iResolution.xy;\n    \n    float s0 = texture(iChannel0,uv).z;\n    float s1 = texture(iChannel0,up).z;\n    float s2 = texture(iChannel0,right).z;\n    \n    vec2 delta = abs(vec2(s0 - s1, s0 - s2));\n    \n    fragColor = vec4(step(0.01, length(delta)), 0, 0 ,1.);\n}\n","name":"Buffer B","description":"","type":"buffer"}]}