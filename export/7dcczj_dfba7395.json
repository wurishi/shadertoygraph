{"ver":"0.1","info":{"id":"7dcczj","date":"1653731302","viewed":57,"name":"prueba blinphong","username":"kripto99","description":"BlinnPhong demo (building)","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["blinnphong"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n//Struct de material\nstruct Material\n{\n    vec3 ka;\n    vec3 kd;\n    vec3 ks;\n    float refractionIndex;\n    float shininess;\n    float alpha;\n};\n\n//Struct de llum\nstruct Light\n{\n    vec3 ia;\n    vec3 id;\n    vec3 is;\n    vec3 position;\n    vec3 coefs;\n    int tipus;\n    vec3 direction;\n    float angle;\n\n};\n\n\n//Struct mat/dist\nstruct Hit\n{\n    vec3 point;\n    vec3 normal;\n    float dist;\n    Material mat;\n    float type;\n};\n\nMaterial material(float id){\n    Material mat;\n    if(id > 0.5){\n        mat.ka = vec3(0.2,0.3,0.4);\n        mat.ks = vec3(0.5,0.2,0.1);\n        mat.kd = vec3(0.1,0.5,0.8);\n        mat.shininess = 0.3;\n    }\n    else{\n        mat.ka = vec3(0.7,0.7,0.2);\n        mat.ks = vec3(0.1,0.6,0.7);\n        mat.kd = vec3(0.6,0.2,0.1);\n        mat.shininess = 0.2;\n    }\n    return mat;\n\n}\n\nvec3 ambientGlobal = vec3 (0.2,0.3,0.4);\n\n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat smin( float a, float b, float k ) {\n    float h = clamp( 0.5+0.5*(b-a)/k, 0., 1. );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r) {\n\tvec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t*ab;\n    \n    return length(p-c)-r;\n}\n\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r) {\n\tvec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t*ab;\n    \n    float x = length(p-c)-r;\n    float y = (abs(t-.5)-.5)*length(ab);\n    float e = length(max(vec2(x, y), 0.));\n    float i = min(max(x, y), 0.);\n    \n    return e+i;\n}\n\nfloat sdTorus(vec3 p, vec2 r) {\n\tfloat x = length(p.xz)-r.x;\n    return length(vec2(x, p.y))-r.y;\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\n\nfloat GetDist(vec3 p) {\n    float plane = p.y;\n    float box = sdBox(p-vec3(0,1,0), vec3(1));\n    float torus = sdTorus (p-vec3(2,4,2), vec2(0.5,0.5));\n   \n    \n    float d = min(plane,min( box,torus));\n    return d;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nHit RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    Hit hit;\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        \n        dO += dS;\n        if(dO>MAX_DIST || dS<SURF_DIST){\n            hit.dist = dO;\n            hit.mat = material(1.);\n            hit.normal = GetNormal(p);\n            break;\n        }\n    }\n    \n    return hit;\n}\n\n\n\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvec3 computeShadow(Light light, vec3 p){\n    \n    //Radi de la llum, serveix per ferla mes o menys soft.\n    float lrad = 0.05;\n    //Vector normalitzar objecte/llum\n    vec3 toLight = normalize(light.position - p);\n    //Distancia objecte/Llum\n    float distToLight = length(light.position - p);\n    float d, t=lrad*0.1;\n    //Comencem amb el shadow a 0.\n    float ShadowValue=0.;\n    for(int j=0; j<128; j++)\n    {\n        d = GetDist(p + t*toLight);\n        \n        ShadowValue = max(0.5+(-d)*distToLight/(2.*lrad*t), ShadowValue);\n        \n        if(ShadowValue >= 1.){break;}\n        \n        t += max(d, lrad*t/distToLight);\n        \n        if(t >= distToLight) break;\n    }\n    \n    return vec3(1.-clamp(ShadowValue, 0.,1.));\n    \n    \n}\n\nvec3 BlinnPhong(Light light, Material mat, vec3 surfaceNormal, vec3 viewerDir, vec3 ligthDir, vec3 p)\n{\n    //Normalized surface-normal vector\n    vec3 Norm = normalize(surfaceNormal);\n    \n    //Normalized surface-obs vector\n    vec3 V = normalize(viewerDir);\n    \n    //Normalized surface-light vector\n    vec3 L = normalize(ligthDir);\n    \n    //Agafem el shadow en aquesta posició.\n    vec3 shadow = computeShadow(light,p);\n    \n    \n    //Afegim llum ambient.\n    vec3 ambLight = ambientGlobal * mat.ka;\n    \n    //Creem llum difusa i espec a 0\n    vec3 difLight = vec3(0.0,0.0,0.0);\n    vec3 specLight = vec3(0.0,0.0,0.0);\n    \n    //Distancia de l'objecte a la llum\n    float distLlumObj = length(ligthDir);\n    //Creem l'atenuació de la llum\n    float atenuacio = 1.0 / (light.coefs.x + light.coefs.y * distLlumObj+ light.coefs.z * distLlumObj * distLlumObj);\n    \n    \n    //Component difusa\n    float factorLlum = max(dot(Norm,L),0.0);\n    vec3 Id = light.id;\n    vec3 Kd = mat.kd;\n    difLight += Id*Kd*factorLlum*atenuacio*shadow;\n    \n    //Component especular\n    vec3 aux = L + V;\n    if(length(aux)>0.01) {\n        vec3 H = normalize(aux);\n        vec3 Is = light.is;\n        vec3 Ks = mat.ks;\n        factorLlum = max(dot(Norm,H),0.0);\n        factorLlum = pow(factorLlum, mat.shininess);\n        specLight += Ks*Is*factorLlum*atenuacio*shadow;\n    }\n    \n    //Component ambient\n    vec3 Ia = light.ia;\n    vec3 Ka = mat.ka;\n    ambLight += Ia*Ka;\n    \n    return ambLight + difLight + specLight;\n    \n\n    \n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    Light llum;\n    llum.ia = vec3(0.1,0.1,0.1);\n    llum.id = vec3(0.4,0.6,0.2);\n    llum.is = vec3(0.2,0.2,0.3);\n    llum.position = vec3(0., 5., 5.);\n    llum.coefs = vec3(0.9,0.7,0.3);\n        \n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n    \n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 4, -5);\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = R(uv, ro, vec3(0,1,0), 1.);\n\n    Hit hit = RayMarch(ro, rd);\n    float d = hit.dist;\n    if(d<MAX_DIST) {\n    \tvec3 p = ro + rd * d;\n    \n        //Agafem la normal del hit\n        vec3 Normal = hit.normal;\n        //Creem el vector director de la llum\n        vec3 lightVect = normalize(llum.position - p);\n        \n        //Fem BLinnPhong.\n    \tcol = BlinnPhong(llum, hit.mat, Normal, -rd, lightVect, p);\n    }\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}