{"ver":"0.1","info":{"id":"XXXcWH","date":"1726071156","viewed":20,"name":"Trippy Carousel","username":"CavoX5","description":"a","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float colors = 7.;\nfloat zoom = 1.;\n\nfloat pi = 3.14159;\n\n//Credit: https://www.shadertoy.com/view/XcKSRd \nvec3 plane2sphere(vec2 p) {\n    float r = length(p);\n    float c = 2.*r / (dot(p, p)+1.);\n    return vec3(p*c/r, sin(2.*atan(r) - pi / 2.));\n}\nvec3 rotate(vec3 v, float xz, float yz) {\n    float c1 = cos(yz);\n    float s1 = sin(yz);\n    float c2 = cos(xz);\n    float s2 = sin(xz);\n    vec3 u = vec3(v.x, c1*v.y-s1*v.z, c1*v.z+s1*v.y);\n    return vec3(c2*u.x-s2*u.z, u.y, c2*u.z+s2*u.x);\n}\n\nbool range(float val,float targ,float rang){\n    return abs(val - targ) - rang < 0.;\n}\nvec3 palette(float t)\n{\n    vec3 a = vec3(0.5,0.5,0.5);\n    vec3 b = vec3(0.5,0.5,0.5);\n    vec3 c = vec3(1.,1.,1.);\n    vec3 d = vec3(0.333,0.666,1.);\n    \n    return a + b * cos(6.28318 * (c * t + d));\n}\nfloat zig(float x){\n    return (mod(x,2.) - 1.) * sign(mod(x,4.) - 2.);\n}\nfloat zag(float x,float r,float a,float s){\n    return (sin(a) * -r) / \n        sin(2. * pi - sin(a) - (zig(s * x) * pi / s));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord * 2. / iResolution.xy - 1.;\n    uv.x *= iResolution.x / iResolution.y;    \n    uv /= zoom;\n    \n    \n    vec2 mouse = iTime * vec2(0.2,0.3) * .1; //iMouse.xy == vec2(0) ? vec2(0.2*iTime, 0.) : (iMouse.xy * 2.0 - iResolution.xy) / iResolution.y;\n    vec3 v = rotate(plane2sphere(uv), -8.*mouse.x, 8.*mouse.y);\n    vec2 p = vec2(atan(v.y, v.x), asin(v.z)) / (pi / 2.);\n    \n    vec2 pol = vec2(mod(.5 + ((p.x + 2.) / 4.),1.), 1. - abs(p.y));\n    \n    float[] values = float[](\n        abs(sin(pol.x * pi * 9. - iTime * 1.2)) * .15 + .1,\n        zig(pol.x * 44. + iTime * 2.3) * .05 + .32 + (sin(iTime * 2.) * 0.03),\n        zig(pol.x * 52. - iTime * 1.5) * .08 + .38 + (cos(iTime * 2.) * 0.03),\n        (-abs(sin(pol.x * pi * 17. + iTime * 3.7)) + 1.) * 0.15 + .42 + (sin(iTime * 2. + pi/2.) * 0.05),\n        abs(sin(pol.x * pi * 28. - iTime * 7.2)) * .03 + .68,\n        zig(pol.x * 60. + iTime * 2.5) * .3 + 0.6,\n        cos((pol.x * 60. + iTime * 2.5 + 60./2.) * pi / 2. ) * .02 + 0.84,\n        zag(pol.x,0.80,1.2,80.)\n    );\n    \n    bool[] conds = bool[](\n        pol.y <= 0.01,\n        pol.y <= 0.05,\n        pol.y <= 0.08,\n        pol.y <= 0.1,\n        pol.y <= values[0] - .02,\n        range(pol.y,values[0], .02),\n        pol.y <= 0.19,\n        pol.y <= 0.21,\n        pol.y <= values[1] -0.03,\n        pol.y <= values[1],\n        \n        -sin(pol.x * pi * 16. + sin(iTime) * 6.4 + iTime * 3.) * 0.1 + 0.35 > pol.y && \n        pol.y > sin(pol.x * pi * 16. + sin(iTime) * 7.5 + iTime * 3.) * 0.1 + 0.45,\n        \n        -sin(pol.x * pi * 16. + sin(iTime) * 6.4 + iTime * 3.) * 0.1 + 0.37 > pol.y && \n        pol.y > sin(pol.x * pi * 16. + sin(iTime) * 7.5 + iTime * 3.) * 0.1 + 0.43,\n        \n        range(mod(pol.x + iTime * -0.3, 0.04),0., 0.002) && pol.y <= values[6] - 0.03,\n        pol.y <= values[2] -0.03,\n        pol.y <= values[2],\n        range(mod(pol.x + iTime * 0.1 + p.y * 0.2, 0.1),0., 0.01),\n        pol.y <= values[3] -0.03,\n        pol.y <= values[3],\n        \n        pol.y <= 0.62,\n        pol.y <= 0.65,\n        pol.y <= values[4],\n        pol.y <= values[5],\n        pol.y <= values[6] - 0.03,\n        pol.y <= values[6],\n        pol.y <= values[7] - 0.05,\n        pol.y <= values[7],\n        pol.y <= 0.96\n    );\n    \n    float coloffset = iTime * 3. + pol.x * colors  + pol.y * colors;\n    if(p.y > 0.){\n        coloffset += 0.5 * colors;\n    }\n    \n    vec3 col = palette((float(conds.length()) + coloffset) / colors) ;\n    for(int i = 0; i < conds.length(); i++){\n        if(conds[i]){\n            col = palette((float(i) + coloffset) / colors ) ;\n            break;\n        }\n    }\n    \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}