{"ver":"0.1","info":{"id":"mlfSzj","date":"1675060644","viewed":103,"name":"Polar Unit Circle 3","username":"ChunderFPV","description":"This version is probably a bit more 'proper' than the last one.\nMouse x to transform between cartesian and polar.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["trig","polar","transform"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define CST(a) vec3(cos(a), sin(a), tan(a))\n#define L(v) smoothstep(l*min(fwidth(v), 1.), 0., abs(v))\n#define CL(v) step(max(0., v), min(v, 1.))\n#define P(v) max(0., 1.-length(v/fwidth(v)/p))\n#define PT(s) uv*(1.-mx)+vec2(a*mx, r*mx*s); x = u.x, y = u.y\n\n// quick funcs (wave, length, point)\n#define QW(w) L(y-w)*q*i\n#define QL(v) L(x-t)*CL(y/(v))*.6*i\n#define QP(v) P(vec2(t-x, y-(v)))*2.*i\n#define Q(w,v) QW(w) + QL(v) + QP(v)\n\nvoid mainImage(out vec4 RGBA, in vec2 XY)\n{\n    vec3 c = vec3(0), // colors\n         c_arc = vec3(.0, .9, .0),\n         c_sin = vec3(.9, .1, .0),\n         c_cos = vec3(.0, .5, .9),\n         c_tan = vec3(.9, .7, .6),\n         c_csc = vec3(.9, .6, .9),\n         c_sec = vec3(.1, .7, .7),\n         c_cot = vec3(.9, .6, .0),\n         w, v, i;\n    \n    vec2 R = iResolution.xy,\n         uv = (XY-.5*R)/R.y*5., // screen coords\n         g, u;\n    \n    float mx = clamp(iMouse.x/R.x*2.-.5, 0., 1.),\n          PI = 3.14159,\n          t = mod(iTime, PI*2.)-PI,\n          xp = sign(uv.x),\n          yp = sign(uv.y),\n          a = atan(uv.y, uv.x),\n          r = length(uv),\n          l = 2.,  // line size\n          p = 4.,  // point size\n          x, y, q;\n    \n    u = PT(1.); // polar transform\n    g = max(vec2(0), 1.-abs(fract(u+.5)-.5)/fwidth(u)/2.); // grid\n    c += max(g.x, g.y)*.3; // grid lines\n    c += min(g.x, g.y)*.6; // grid points\n    c.b += L(y)*.5;        // x axis\n    w = CST(x); // cos, sin, tan\n    v = CST(t);\n    q = CL(abs(x)/PI);     // clamp to +-pi\n    c += L(y-1.) * .3 * q; // unit circle\n    i = c_arc;                  // set color\n    c += L(y-1.) * i * CL(x/t); // arc length\n    c += QP(1.); // arc point\n    \n    u = PT(xp); // x polarized\n    i = c_cos;\n    c += Q(w.x, v.x); // cosine\n    i = c_sec;\n    c += Q(1./w.x, 1./v.x); // secant\n    \n    u = PT(yp); // y polarized\n    i = c_sin;\n    c += Q(w.y, v.y); // sine\n    i = c_csc;\n    c += Q(1./w.y, 1./v.y); // cosecant\n    \n    u = PT(xp*yp); // xy polarized\n    i = c_tan;\n    c += Q(w.z, v.z); // tangent\n    i = c_cot;\n    c += Q(1./w.z, 1./v.z); // cotangent\n    \n    RGBA = vec4(c, 1.);\n}","name":"Image","description":"","type":"image"}]}