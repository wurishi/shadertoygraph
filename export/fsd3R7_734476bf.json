{"ver":"0.1","info":{"id":"fsd3R7","date":"1629413871","viewed":118,"name":"2D Landmasses and weather","username":"Pelegefen","description":"2D Landmasses, generated using FBM functions described by iq(inigo quilez) on his blog.\nthe wheater, clouds, are a mix between volume and fbm noise.\n\ni've also made a 3D version - https://www.shadertoy.com/view/Ndd3z7","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise","value","generation","landmass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash(vec2 p)  // thanks to iq\n{\n    p  = 50.0*fract( p*0.3183099 + vec2(0.71,0.113));\n    return -1.0+2.0*fract( p.x*p.y*(p.x+p.y) );\n}\n\nfloat noise( in vec2 p )// thanks to iq\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( hash( i + vec2(0.0,0.0) ), \n                     hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ), \n                     hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}\nfloat pattern( in vec2 p )\n{\n    vec2 q = vec2( noise( p + vec2(0.0,0.0) ),\n                   noise( p + vec2(5.2,1.3) ) );\n\n    vec2 r = vec2( noise( p + 8.0*q + vec2(1.7,9.2) ),\n                   noise( p + 8.0*q + vec2(8.3,2.8) ) );\n\n    return noise( p + 8.0*r );\n}\nvec4 Terrain(vec2 uv){\n\n\nfloat f = 0.0;\n   \n       \tuv *= 5.0;\n        mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n\t\tf  = 0.5000*noise( uv ); uv = m*uv;\n\t\tf += 0.2500*noise( uv ); uv = m*uv;\n\t\tf += 0.1250*noise( uv ); uv = m*uv;\n\t\tf += 0.0625*noise( uv ); uv = m*uv;\n        \n     \n        \n        \n      vec4 landCol = vec4(\n       sin(f*.75)*.5+.5,\n       sin(f)   *.5+.5,\n       sin(f*.1)*.5+.5,\n       1.);\n       \n       landCol *= vec4(.4 + f,.7+ f,.1,1.);\n       \n       \n       vec4 colorLand = vec4(landCol / pow(f , smoothstep(.2,.21,f)));\n       \n       float c = smoothstep(.1,.4,f);\n      // colorLand = mix(\n       vec4 color = vec4(.05,c,.6,1.) + (f*.5); \n       \n       \n        color = max(color , colorLand);\n       return color -= c;\n       \n       }\n       \n       \n       \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n     vec3 col;\n     vec2 p = fragCoord.xy / iResolution.xy;\n\n\tvec2 uv = p*vec2(iResolution.x/iResolution.y,1.0) + iTime * .1;\n\tuv -= (iMouse.xy / iResolution.xy);\n\tvec4 color = Terrain(uv*2.);\n    \n    //atmosphere winds\n    float f = min(\n    noise((uv * 1.5) - iTime * 0.1 ),\n    pattern((uv * 1.) + noise(uv * 2.5) + iTime* .15 )\n    );\n    \n    //clouds\n    f += pattern(uv + iTime * .1);\n    f = max(f * .5,noise(uv  * 10. + iTime)) * color.b;\n    \n    \n    color =max(color, vec4(f));\n    // Output to screen\n    fragColor = color;\n}","name":"Image","description":"","type":"image"}]}