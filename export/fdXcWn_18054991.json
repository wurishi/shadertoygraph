{"ver":"0.1","info":{"id":"fdXcWn","date":"1641916876","viewed":186,"name":"Planetary Orbit","username":"peremoya2000","description":"A shader planetarium with a sun, 3 planets and a moon. All done through raymarching and very rudimentary material shading.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","interactive","space","planets"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float fovzoom = .9;\n\n//blur background to dissimulate seams\nvec3 texBlur(vec2 uv){\n    vec4 tex;\n    lowp float div;\n    float span = pow(abs(fract(uv.x)-.5),1.15)*.015;\n    span=max(0.0015,min(span,.005));\n    for (float i=-span; i<span; i+=.0005){\n        for (float j=-span; j<span; j+=.0005){\n           ++div;\n           tex+=texture(iChannel0,uv+vec2(j,i)); \n        }\n    }\n    tex/=div;\n    return .7*tex.xyz;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    //Calculate render parameters\n    vec3 sun = vec3(0),\n    planet = vec3(sin(2.+iTime*.05)*200.,0,cos(2.f+iTime*.05)*200.),\n    planet2 = vec3(sin(iTime*.8)*100.,0,cos(iTime*.8f)*110.),\n    planet3 = vec3(sin(iTime*.02-2.)*500.,0,cos(iTime*.02-2.)*450.),\n    moon = planet + vec3(sin(iTime*.9)*2.4,0,cos(iTime*.9)*2.4),\n    camPos;\n    vec2 mousePos;\n    if (iMouse.z>.1){\n        //Normalized mouse position (from -1 to 1)\n        mousePos = (iMouse.xy-.5*iResolution.xy)/iResolution.y;\n        //Move camera\n        camPos = planet+vec3(mousePos.x,1.-mousePos.y,-4);\n    }else{\n        camPos = planet+vec3(0,1,-4);\n    }   \n    vec3 f = normalize(planet-camPos),\n    u = vec3(0,1,0),\n    r = cross(f,u),\n    sCenter = camPos+f*fovzoom,\n    screenPoint = sCenter + uv.x * r + uv.y * u,\n    rayDir = normalize(screenPoint-camPos);\n    \n    //Raymarch for spheres\n    vec3 ray;\n    float rayL, rayStep;   \n    for (int i=0; i<100; ++i){\n        ray = camPos + rayDir * rayL;\n        rayStep = min(length(ray.xyz) - 50., \n        min(length(planet-ray.xyz) - 1.,\n        min(length(planet2-ray.xyz)-1.5,\n        min(length(planet3-ray.xyz)-2.,\n        length(moon-ray.xyz)-.2))));\n        if(rayStep<.001 || rayStep>660.) break;\n        rayL += rayStep;\n    }\n    \n    vec3 col = vec3(0);\n    vec2 pUV = vec2(0);\n    float diffuse;\n    if(rayStep<.001){    \n        //Identify object\n        vec3 p[5] = vec3[](vec3(0),planet,planet2,planet3,moon);\n        int id = getHitPlanet(ray, p);\n        vec3 obj = p[id];\n        \n        //Calculate uvs\n        pUV.x = sin(atan(ray.x-obj.x,ray.z-obj.z))*.5+.5;\n        pUV.y = (acos(ray.y)*.5+.5); \n        \n        if(id!=0){\n            //Diffuse lighting\n            vec3 normal = normalize(ray-obj);\n            diffuse = max(dot(normal,-normalize(obj)),-.15);\n            vec3 reflectionRay;\n            float specular;\n            switch(id){\n                case 1:\n                    //Planet\n                    reflectionRay = reflect(normalize(obj),normal);\n                    vec3 albedo=vec3(fracNoise(pUV));\n                    if(length(albedo)>.89){\n                        //Land\n                        albedo=mix(vec3(.9,.8,0),vec3(.8,.5,0),fracNoise(pUV*3.));\n                        specular = pow(max(0.f,dot(-f,reflectionRay)),10.);\n                        col=.1+.8*diffuse*albedo+specular*.2;\n                    }else{\n                        //Sea\n                        albedo*=vec3(1,0,1);\n                        specular = pow(max(0.f,dot(-f,reflectionRay)),20.);\n                        col=.1+.6*diffuse*albedo+specular*.4;\n                    }\n                    //Clouds\n                    vec2 uvOffset = .13*vec2(fracNoise(pUV+iTime*.023));\n                    vec3 clouds = vec3(min(.9,1.5*smoothstep(.4,.6,fracNoise(pUV+uvOffset))*pow(fracNoise(pUV+iTime*.013),1.5)));\n                    clouds*=max(.1,min(diffuse,.8));\n                    col+=clouds;\n                    break;\n                case 2:\n                    //Planet2\n                    col=.15+diffuse*vec3(1,.45+sin((pUV.y)*16.)*.2,.2);\n                    break;\n                case 3:\n                    //Planet3\n                    reflectionRay = reflect(normalize(obj),normal);\n                    specular = pow(max(0.f,dot(-f,reflectionRay)),5.);\n                    col=.8*diffuse*vec3(0,.5,.6+sin((pUV.y)*20.)*.4)+specular*.2;\n                    break;\n                case 4:\n                    //Moon\n                    pUV.y = (acos(ray.y*4.9)*.5+.5);\n                    float orbitPos=dot(normalize(ray-planet),-normalize(ray));\n                    float occlussion = smoothstep(-.88,-.65,orbitPos);\n                    col=.15+diffuse*vec3(fracNoise(pUV)+.08*sin(pUV.y*50.));\n                    col*=occlussion;\n                    break;\n            }\n        }else{\n            //Shade sun\n            pUV.y = (acos(ray.y/50.)*.5+.5); \n            vec3 normal = normalize(ray-obj);\n            diffuse = max(dot(normal,normalize(camPos)),0.);\n            float fresnel = pow(1.-diffuse,4.)*1.1;\n            vec2 uvOffset = vec2(sin(iTime*.1)+cos(iTime*.07),sin(iTime*.02))+vec2(fracNoise(pUV));\n            col=min(1.8*vec3(1,.8-fracNoise(pUV+uvOffset)*.2,.5)*(diffuse+fresnel),1.);\n        }\n    }else{\n        //Background\n        col=texBlur((uv+mousePos)*.25+.5);\n        //Add sun glare\n        float sunprox = pow(max(0.0, min(dot(rayDir, -normalize(camPos))+fracNoise(rayDir.xy)*.02, 1.0)), 20.);\n        vec3 suncolor = vec3(1.5, 1.1, 0.5);\n        col+=suncolor*sunprox;\n    }\n    \n    //Postprocessing\n    vec3 sSunPos = reflect(normalize(camPos),f);\n    sSunPos.y*=-1.; sSunPos.x*=1.2;\n    vec2 sp = sSunPos.xy/sSunPos.z;\n    float oc = smoothstep(0.35, 0.4, length(sp* vec2(1,.6))) * step(0.,-camPos.z);\n    float flare;\n    flare += 0.09 * lensFlare( uv, -0.32* sp, 0.07);\n    flare += 0.1  * lensFlare( uv, -0.42 * sp, 0.01);\n    flare += 0.16 * lensFlare( uv, -0.55 * sp, 0.1);\n    flare += 0.09 * lensFlare( uv, -.7 * sp, 0.03);\n    flare += 0.09 * lensFlare( uv, -0.78 * sp, 0.0001);\n    flare *= oc;\n    col += flare*vec3(1.5, 1.1, 0.5)*fracNoise(uv);\n\n    // Output to screen   \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//Get body closest to ray hit and return the id\nint getHitPlanet(vec3 hitPos,vec3[5] points){\n    float minDist=99999.;\n    int id;\n    for (int i=0; i<5; ++i){\n        float d = length(points[i]-hitPos);\n        if (d<minDist) {\n           minDist=d;\n           id=i;\n        }\n    }\n    return id;\n}\n\n//Draw lens flare\nfloat lensFlare( vec2 uv, vec2 c, float r){\n    float l = length( uv - c );\n    r+=pow(length(uv),1.4)*.1;\n    return smoothstep(r+.02,r,l);\n}\n\n//noise from iq's www.shadertoy.com/view/lsf3WH\nfloat hash(vec2 p) {\n    p  = 50.0*fract( p*0.3183099 + vec2(0.71,0.113));\n    return -1.0+2.0*fract( p.x*p.y*(p.x+p.y) );\n}\nfloat noise( in vec2 p ){\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( hash( i + vec2(0.0,0.0) ), \n                     hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ), \n                     hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}\nfloat fracNoise(vec2 uv){\n    uv *= 8.0;\n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n\tfloat fr  = 0.5000*noise( uv ); \n    uv = m*uv;\n\tfr += 0.2500*noise( uv ); uv = m*uv;\n\tfr += 0.1250*noise( uv ); uv = m*uv;\n\tfr += 0.0625*noise( uv ); uv = m*uv;\n    fr = 0.5 + 0.5*fr;\n    return fr;\n}","name":"Common","description":"","type":"common"}]}