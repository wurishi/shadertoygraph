{"ver":"0.1","info":{"id":"M323Dm","date":"1708551153","viewed":69,"name":"Debugging uv grid - distortion","username":"therepo90","description":"This is a debugging grid based on UVs, so you can use to see how your space is bended","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["distortion","debug"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":" \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n// map space to -1,1\n   vec2 uv = ((fragCoord /  iResolution.xy)-0.5)*2.;\n     float ar= iResolution.x / iResolution.y; // aspect ratio\n     uv.x*=ar; // narrow the space so square is a square.\n     \n  vec2 mouse =  ((iMouse.xy /  iResolution.xy)-0.5)*2.;\n  mouse.x*=ar;\n    \n    // some fancy stuff to presentation\n    uv.x+=sin(iTime)*.4;\n    uv.y+=cos(iTime)*.2;\n    uv.x*=abs(1.+sin(3.14+iTime)*.2);\n    uv.y*=abs(1.+cos(iTime)*.2);\n    \n    vec3 col=vec3(0.110,0.110,0.251);\n   \n    // distort\n   \tfloat d = distance(mouse, uv);\n    float p = 0.2 * (1.0 / (d * d));\n    uv =  mix(uv, mouse, p);\n    \n    //draw circe\n     col+=smoothstep(0.9,0.5,length(uv))*vec3(1.,0.,0.)*5.;\n     col=col*5.;\n\n// show grid\n    vec3 gridCol = vec3(.7,.7,.7);\n    float sq = grid2d(uv, ar);\n    vec3 finalGridCol=gridCol*sq*.8;\n    \n    fragColor = vec4(mix(col,finalGridCol,0.9), 1.); \n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":" float sq2d(vec2 uv, vec2 center, vec2 size)\n{  \n// top right, bottom left\n    vec2 tr = vec2(center.x + size.x * 0.5, center.y + size.y * 0.5);\n    vec2 bl = vec2(center.x - size.x * 0.5, center.y - size.y * 0.5);\n    \n    // insides\n    vec2 tr2=tr*0.9;\n    vec2 bl2=bl*0.9;\n    \n    //check if coors inside a square\n    float r = step(bl.x, uv.x) *\n                         step(uv.x, tr.x) *\n                         step(bl.y, uv.y) *\n                         step(uv.y, tr.y);\n                         \n                         //insides of a square\n  float r2 = step(bl2.x, uv.x) *\n                         step(uv.x, tr2.x) *\n                         step(bl2.y, uv.y) *\n                         step(uv.y, tr2.y);\n //remove insides\n    r-=r2; \n    \n   return clamp(r,0.,1.);\n}\n\nfloat grid2d(vec2 uv, float ar)\n{\n    \n    float size = 0.1; // square side\n    vec2 vsize = vec2(size, size);\n    float space = 0.01; \n    vec2 center=vec2(0.);\n    // dont know why its working but it works - maybe you can enlighten me\n    // in comment lol.\n    // repeat the space(tiling)\n    uv.x=mod(uv.x-.5,size+space)-size*.5;\n    uv.y=mod(uv.y-.5,size+space)-size*.5; \n    return sq2d(uv, center, vec2(vsize));\n}\n","name":"Common","description":"","type":"common"}]}