{"ver":"0.1","info":{"id":"WldGD7","date":"1576563840","viewed":79,"name":"Noise in 2d","username":"yp3y5akh0v","description":"Noise in 2d","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise","rand"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI radians(180.)\n\nfloat rand(vec2 uv) {\n    return fract(sin(dot(sin(uv), vec2(12.9898, 78.233))) * 143758.5453);\n}\n\nmat2 rot(float a) {\n\tfloat ca = cos(a);\n    float sa = sin(a);\n    return mat2(ca, -sa, sa, ca);\n}\n\nfloat noise(vec2 uv, float scale) {\n    vec2 uvs = uv * scale;\n\tvec2 id = floor(uvs);\n    vec2 q = smoothstep(0., 1., fract(uvs));\n    vec2 e = vec2(1, 0);\n     \n    float rsx = mix(rand(id), rand(id + e.xy), q.x);\n    float rnx = mix(rand(id + e.yx), rand(id + e.xx), q.x);\n    \n    return mix(rsx, rnx, q.y);\n}\n\nfloat snoise(vec2 uv, float scale, float steps) {\n\tfloat s = 0., sk = 0.; \n    for (float i = 0.; i < steps; i++) {\n        float k = pow(2., i);\n    \ts += noise(uv, scale * k) / k;\n        sk += 1. / k;\n        uv *= rot(2. * PI * (i + 1.) / steps);\n    } \n    return smoothstep(0., 1., s / sk);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 uv = fragCoord / iResolution.y;\n    float r = snoise(uv, 8., 32.);\n\tvec3 col = vec3(r);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}