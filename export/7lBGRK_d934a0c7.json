{"ver":"0.1","info":{"id":"7lBGRK","date":"1624240052","viewed":99,"name":"Phased-Array Beamforming","username":"axon","description":"Adjustable Illustration of Phased-Array Beamforming.","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["physics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * Illustration of Phased-Array Beamforming.\n */\n\nconst float ANTENNA_COUNT = 23.0;\nconst float ANTENNA_POWER = 1.0;\nconst float ANTENNA_GAP = 3.0;\n\nconst float PHASE_OFFSET = 0.4;\nconst float SPEED = 10.0;\nconst float FREQUENCY = 1.0;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n  float score = 0.5;\n\n  for (float i = 0.0; i < ANTENNA_COUNT; i++) {\n    vec2 source = vec2(\n      ((iResolution.x - ANTENNA_COUNT * ANTENNA_GAP) / 2.0) + i * ANTENNA_GAP,\n      iResolution.y * 0.1\n    );\n\n    float deltaX = source.x - fragCoord.x;\n    float deltaY = source.y - fragCoord.y;\n\n    float distanceToCircle = sqrt(deltaX * deltaX + deltaY * deltaY);\n    float wave = (\n      (ANTENNA_POWER / ANTENNA_COUNT / 2.0) *\n      sin(\n        FREQUENCY * distanceToCircle / 3.0\n        - iTime * SPEED\n        + i * PHASE_OFFSET\n      )\n    );\n\n    score += distanceToCircle < ANTENNA_GAP * 0.3 ? 20.0 : wave;\n  }\n\n  fragColor = score > 10.0\n      ? vec4(0, 0.1, 0.8, 0.0)\n      : vec4(score, score, score, 0.0);\n}\n","name":"Image","description":"","type":"image"}]}