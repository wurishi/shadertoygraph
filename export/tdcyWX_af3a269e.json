{"ver":"0.1","info":{"id":"tdcyWX","date":"1601840653","viewed":317,"name":"sound by Yutaka","username":"jorge2017a1","description":"sound by Yutaka","likes":7,"published":1,"flags":8,"usePreview":0,"tags":["soundbyyutaka"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Lightning\n// By: Brandon Fogerty\n// bfogerty at gmail dot com \n// xdpixel.com\n\n\n// MORE MODS BY 27\n\n// And then by some guy called Hugh.\n\nfloat Hash( vec2 p)\n{\n\tvec3 p2 = vec3(p.xy,1.);\n\treturn fract(sin(dot(p2,vec3(37.1,61.7, 12.4)))*375.85453123);\n}\n\nfloat noise(in vec2 p)\n{\n\tvec2 i = floor(p);\n\tvec2 f = fract(p);\n\tf *= f * (3.-2.*f);\n\n\treturn mix(mix(Hash(i + vec2(0.,0.)), Hash(i + vec2(1.,0.)),f.x),\n               mix(Hash(i + vec2(0.,1.)), Hash(i + vec2(1.,1.)),f.x),\n               f.y);\n}\n\nfloat fbm(vec2 p)\n{\n\tfloat v = 0.;\t\n\tfloat n = 2.8;\n\tfloat c = 4.;\n\tfor(float f = 1.; f>=0.; f++) {\n\t\tif (f > c) break;\n\t\tv += noise(p*f)*(n-f)/(n*n);\n\t}\n\treturn v;\n}\n\n\n\n\nfloat message(vec2 U) { // to alter in the icon with the alter message\n    vec4 T = vec4(0);   // or: initMsg;\n    Cc(83);Cc(111);Cc(117);Cc(110);Cc(100);Cc(32);Cc(105);Cc(110);Cc(115);Cc(105);Cc(100);Cc(101); // message \"Sound inside\"\n    return length(T.yz)==0. ? -1. : T.x; // or: endMsg;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\tvec2 uv = ( fragCoord.xy / iResolution.xy ) * 2.0 - 1.0;\n\tuv.x *= iResolution.x/iResolution.y;\n\t\t\n\tvec3 finalColor = vec3( 0.0 );\n\tfloat i = 1.;\n\tfloat hh = .1;\n\t\n\tfloat t = abs(1. / ((uv.y - fbm( uv + (iTime*3.)/i))*75.));\n\tfinalColor +=  t * vec3( hh+.1, .5, 2. );\n\t\n\n    float u = abs(1. / ((uv.x - fbm( uv + (iTime*3.5)/i))*75.));\n\tfinalColor +=  u * vec3( 2., .5, hh+.1 );\n\t\n\tfloat v = abs(1. / ((uv.x + uv.y - fbm( uv + (iTime*5.)/i))*75.));\n\tfinalColor +=  v * vec3( hh+.1, 2., .5 );\n\t\n\tfloat w = abs(1. / ((uv.x - uv.y - fbm( uv + (iTime*4.5)/i))*75.));\n\tfinalColor +=  w * vec3( .7, .7, hh+.1 );\n\t\n\tfloat x = abs(1. / ((uv.x*sin(iTime) - uv.y*cos(iTime) - fbm( uv + (iTime*4.)/i))*75.));\n\tfinalColor +=  x * vec3( .5, hh, .5 );\n\t\n    \n        \n    if (iResolution.y<2000.)\n    {\n        float c=message((fragCoord/iResolution.y-vec2(.1,.2))*8.);\n        if(c>=0.)\n        {\n            fragColor=vec4(c);\n            return;\n        }\n    }\n    \n    \n    \n\tfragColor = vec4( finalColor, 1.0 );\n\n}\n  ","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//#version 450\n//by Yutaka Sato \n\n#define PI 3.1415926535\n#define A 0.0\n#define B 2.0\n#define C 3.0\n#define D 5.0\n#define E 7.0\n#define F 8.0\n#define G 10.0\n\nvec2 out_sample;\n\n//================================================\n// Utils\n//================================================\nfloat rand(vec2 co)\n{\n\treturn fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat calcHertz(float scale)\n{\n    return 441.0 * pow(2.0, scale / 12.0) * PI;\n}\n\nfloat calcHertz(float octave, float note)\n{\n    return calcHertz(octave * 12.0 + note);\n}\n\nfloat rect(float time)\n{\n    return sign(fract(time / PI / 2.0) - 0.5);\n}\n\n//================================================\n// Sound\n//================================================\n//#define Sin1(u, v) ret += clamp(sin(time * calcHertz(u, v)) * (1 - localTime + sin(time * 80.0) * 0.1), -0.3, 0.3);\n#define Rect1(u, v) ret += rect(time * calcHertz(u, v)) * (1.0 - localTime);\n\n\nvoid Sin1(float u, float v, float time, float localTime,  inout float  ret)\n{\n        ret += clamp(sin(time * calcHertz(u, v)) * (1.0 - localTime + sin(time * 80.0) * 0.1), -0.3, 0.3);\n}\n\n\n\n\nfloat strings(float time)\n{\n    float loopTime = mod(time, 8.0);\n    float localTime = mod(time * 2.0, 1.0);\n    float ret = 0.0;\n\n    if (loopTime < 2.0)\n    {\n        Sin1(0.0,F,time,localTime,ret);\n        Sin1(0.0,C,time,localTime,ret);\n        Sin1(0.0, G,time,localTime,ret);\n    }\n    else if (loopTime < 4.0)\n    {\n        Sin1(0.0, E,time,localTime,ret);\n        Sin1(0.0, C,time,localTime,ret);\n        Sin1(0.0, G,time,localTime,ret);\n    }\n    else if (loopTime < 6.0)\n    {\n        Sin1(0.0, D,time,localTime,ret);\n        Sin1(0.0, C,time,localTime,ret); \n        Sin1(0.0, G,time,localTime,ret);\n    }\n    else \n    {\n        Sin1(0.0, E,time,localTime,ret); \n        Sin1(0.0, C,time,localTime,ret); \n        Sin1(0.0, G,time,localTime,ret);\n    }\n    return ret;\n}\n\nfloat base(float time)\n{\n    float loopTime = mod(time, 8.0);\n    float localTime = 0.0;\n    if (mod(loopTime, 2.0) < 1.0)\n    {\n        localTime = mod(time * 2.0, 1.0);\n    }\n    else\n    {\n        localTime = mod(time * 2.0 + 0.5, 1.0);\n    }\n    \n    float ret = 0.0;\n\n    if (loopTime < 2.0)\n    {\n        Rect1(-2.0, F)\n    }\n    else if (loopTime < 4.0)\n    {\n        Rect1(-2.0, E)\n    }\n    else if (loopTime < 6.0)\n    {\n        Rect1(-2.0, D)\n    }\n    else \n    {\n        Rect1(-2.0, E)\n    }\n    return ret;\n}\n\nfloat poly(float time)\n{\n    float loopTime = mod(time * 8.0, 8.0);\n    float localTime = mod(time * 8.0, 1.0);\n    float ret = 0.0;\n\n    if (loopTime < 1.0)\n    {\n        Sin1(1.0, G,time,localTime,ret); \n    }\n    else if (loopTime < 2.0)\n    {\n        Sin1(2.0, D,time,localTime,ret); \n    }\n    else if (loopTime < 3.0)\n    {\n        Sin1(2.0, F,time,localTime,ret); \n    }\n    else if (loopTime < 4.0)\n    {\n        Sin1(2.0, G,time,localTime,ret); \n    }\n    else if (loopTime < 5.0)\n    {\n        Sin1(3.0, C,time,localTime,ret); \n    }\n    else if (loopTime < 6.0)\n    {\n        Sin1(2.0, G,time,localTime,ret); \n    }\n    else if (loopTime < 7.0)\n    {\n        Sin1(2.0, E,time,localTime,ret); \n    }\n    else if (loopTime < 8.0)\n    {\n        Sin1(2.0, C,time,localTime,ret); \n    }\n    return ret;\n}\n\nvec2 noiseSound(float time)\n{\n    float loopTime = mod(time, 4.0);\n    vec2 ret;\n    if (loopTime < 2.0)\n    {\n        ret.x = rand(vec2(time * 100.0, 0.0)) * 0.1;\n        ret.y = rand(vec2(time * 100.0, 1.0)) * 0.1;\n    }\n    else if (loopTime < 3.0)\n    {\n        float t = max(1.0 - (loopTime - 2.0) * 2.0, 0.0) * 0.2;\n        ret.x = rand(vec2(time * 100.0, 0.0)) * t;\n        ret.y = rand(vec2(time * 100.0, 1.0)) * t;\n    }\n    return ret;\n}\n\nfloat bassDrum(float time)\n{\n    float localTime = mod(time * 4.0, 2.0);\n    float ret;\n    ret += rect(max(0.0, 1.0 - localTime * 2.0) * localTime * 300.0) * max(0.0, 1.0 - localTime * 4.0);\n    return ret;\n}\n\nvec2 mainSound( in int samp,float time)\n{\n    vec2 sound = vec2(0.0);\n    if (time < 16.0)\n    {\n        sound += strings(time) * vec2(0.55, 0.6);\n    }\n    else if (time < 32.0)\n    {\n        sound += strings(time) * vec2(0.55, 0.6);\n        sound += base(time) * vec2(0.4, 0.38);\n    }\n    else if (time < 48.0)\n    {\n        sound += strings(time) * vec2(0.55, 0.6);\n        sound += base(time) * vec2(0.4, 0.38);\n        sound += poly(time) * vec2(0.2, 0.3);\n    }\n    else if (time < 64.0)\n    {\n        sound += strings(time) * vec2(0.55, 0.6);\n        sound += base(time) * vec2(0.4, 0.38);\n        sound += poly(time) * vec2(0.2, 0.3);\n        sound += bassDrum(time) * 0.4;\n    }\n    else if (time < 80.0)\n    {\n        sound += strings(time) * vec2(0.55, 0.6);\n        sound += base(time) * vec2(0.4, 0.38);\n    }\n    else if (time < 96.)\n    {\n        sound += strings(time) * vec2(0.55, 0.6);\n    }\n    sound += noiseSound(time);\n    sound = clamp(sound, -vec2(1), vec2(1));\n    return vec2(sound);\n}\n","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"#define Cc(c) U.x-=.5; T+= U.x<.0||U.x>1.||U.y<0.||U.y>1. ?vec4(0): textureGrad(iChannel3, U/16. + fract( vec2(c, 15-c/16) / 16.), dFdx(U/16.),dFdy(U/16.) )\n#define initMsg vec4 T = vec4(0)\n#define endMsg  return length(T.yz)==0. ? 0. : T.x\n\n","name":"Common","description":"","type":"common"}]}