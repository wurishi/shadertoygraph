{"ver":"0.1","info":{"id":"lcKGWR","date":"1712618917","viewed":28,"name":"test22vids","username":"alexvr","description":"test2","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["vids"],"hasliked":0,"parentid":"XcK3zm","parentname":"test2vids"},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float kernel = 3.0;\nconst float weight = 1.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec3 sum = vec3(0);\n    float pixelSize = 1.0 / iResolution.x; \n    \n    // Horizontal Blur\n    vec3 accumulation = vec3(0);\n    vec3 weightsum = vec3(0);\n    for (float i = -kernel; i <= kernel; i++){\n        accumulation += texture(iChannel0, uv + vec2(i * pixelSize, 0.0)).xyz * weight;\n        weightsum += weight;\n    }\n    \n    sum = accumulation / weightsum;\n    \n    fragColor = vec4(sum, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float hash(in vec2 uv)\n{\n    float seed = dot(uv, vec2(71.33, 852.381));\n    return fract(38351.43*sin(14.13*seed));\n}\n\nmat4 saturationMatrix( float saturation )\n{\n    vec3 luminance = vec3( 0.3086, 0.6094, 0.0820 );\n    float oneMinusSat = 1.0 - saturation;\n    vec3 red = vec3( luminance.x * oneMinusSat );\n    red+= vec3( saturation, 0, 0 );\n    vec3 green = vec3( luminance.y * oneMinusSat );\n    green += vec3( 0, saturation, 0 );\n    vec3 blue = vec3( luminance.z * oneMinusSat );\n    blue += vec3( 0, 0, saturation );\n    \n    return mat4( red,     0,\n                 green,   0,\n                 blue,    0,\n                 0, 0, 0, 1 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = fragCoord / iResolution.xy;\n    \n    //chromatic abberation\n    vec2 d = abs((uv - 0.5) * 2.0);\n    d = pow(d, vec2(2.0, 2.0));\n        \n    vec4 r = texture(iChannel0, uv - d * 0.015);\n    vec4 g = texture(iChannel0, uv);\n    vec4 b = texture(iChannel0, uv);\n    \n    fragColor = vec4(r.r, g.g, b.b, 1.0);\n    \n        //add noise\n    uv+=hash(uv*iTime);\n    fragColor += hash(uv)*0.38; \n    \n\n      //add VHS\n    float u_speed = .5; \n    float streakAmount = 1.0;\n    for (int i = 0; i < 10; ++i) {\n        float t = float(i) / 10.0; // Position of each streak as a fraction\n        float stripePos = mod(uv.y + t + iTime * u_speed, 1.0); // Calculate the moving position of the streak over time\n        streakAmount += smoothstep(0.002, 0.0, abs(stripePos - uv.y)); // Increment the streak amount based on proximity to the current streak\n    }\n\n    float trackingLinePos = mod(iTime * 0.1, 1.0); // Position of the tracking line\n    streakAmount += smoothstep(0.5, 0.02, abs(trackingLinePos - uv.y)) * hash(vec2(trackingLinePos, uv.x)) * 2.0; // VHS tracking effect with added noise\n        fragColor*=streakAmount;\n                \n    //change saturation\n    float saturation = .93;\n    fragColor*= saturationMatrix( saturation );\n                \n                \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec3 sum = vec3(0);\n    float pixelSize = 1.0 / iResolution.y; \n    \n    // Vertical Blur\nconst float kernel = 4.0;\nconst float weight = 1.0;\n    \n    vec3 accumulation = vec3(0);\n    vec3 weightsum = vec3(0);\n    for (float i = -kernel; i <= kernel; i++){\n        accumulation += texture(iChannel0, uv + vec2(0.0, i * pixelSize)).xyz * weight;\n        weightsum += weight;\n    }\n    \n    sum = accumulation / weightsum;\n    \n    fragColor = vec4(sum, 1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}