{"ver":"0.1","info":{"id":"7dXSWM","date":"1619427180","viewed":75,"name":"323_shakhvorostov_v5v0","username":"Cordeth","description":"homework","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["icosahedron"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rr","filepath":"/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","previewfilepath":"/media/ap/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","type":"volume","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst float EPS = 1e-5;\nconst vec3 CAMERA_POS = vec3(3.7, 1.2, -6.);\n\nstruct Light {\n    vec3 pos;\n    float radius;\n    vec3 color;\n    float intensity;\n};\n\n#define LIGHTCOUNT 2\n\nLight Lights[LIGHTCOUNT] = Light[LIGHTCOUNT](\n    Light(vec3(.7, 1.5, 2), .5, vec3(.1, .4, 1), 15.0f),\n    Light(vec3(-1.3, .5, -.5), .25, vec3(.1, 1, .2), 5.0f)\n);\n\nvec3 randDir;\n\nconst vec3 ICOS_COLOR = vec3(.85, .4, 1.2);\n\nconst int EMISSION = 0;\nconst int DIFFUSE = 1;\nconst int REFLECTION = 2;\nconst int REFRACTION = 3;\n\nconst float GLASS_N = 1.5;\nconst float AIR_N = 1.;\n\n#define VERTEXCOUNT 12\n#define TRIANGLECOUNT 20\n#define PHI 1.618\n\nvec3 vertices[VERTEXCOUNT] = vec3[VERTEXCOUNT] (\n    vec3(-1.,  PHI, 0.),\n    vec3( 1.,  PHI, 0.),\n    vec3(-1., -PHI, 0.),\n    vec3( 1., -PHI, 0.),\n    \n    vec3(0., -1.,  PHI),\n    vec3(0.,  1.,  PHI),\n    vec3(0., -1., -PHI),\n    vec3(0.,  1., -PHI),\n    \n    vec3( PHI, 0., -1.),\n    vec3( PHI, 0.,  1.),\n    vec3(-PHI, 0., -1.),\n    vec3(-PHI, 0.,  1.));\n\n\n\n    \n/*struct Tri3D {\n    vec3 a;\n    vec3 b;\n    vec3 c;\n};*/\n\nfloat inTriangle(vec3 a, vec3 b, vec3 c, vec3 pos) {\n    float ab = step(0., dot(cross(b - a, pos - a),\n                            cross(b - a, c - a)));\n    float bc = step(0., dot(cross(c - b, pos - b),\n                            cross(c - b, a - b)));\n    float ca = step(0., dot(cross(a - c, pos - c),\n                            cross(a - c, b - c)));\n    return ab * bc * ca;\n}\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    // (CAMERA_POS + t * viewVec).y == -1\n    // t = (-1 - CAMERA_POS.y) / viewVec.y;\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceTriangle(vec3 pos, vec3 dir, vec3 a, vec3 b, vec3 c, out vec3 normal) {\n    vec3 ba = b - a,\n         ca = c - a,\n         ap = a - pos;\n    normal = normalize(cross(ba, ca));\n    \n    float normalViewAngle = dot(dir, normal);\n    if (abs(normalViewAngle) < EPS) {\n        return INF;\n    }\n    \n    float dist = dot(ap, normal) / normalViewAngle;\n    \n    if (dist < 0.) {\n        return INF;\n    }\n    \n    vec3 hitPos = pos + dir * dist;\n    if (inTriangle(a, b, c, hitPos) < EPS) {\n        return INF;\n    }\n    \n    vec3 dirCheck = a + EPS * normal;\n    if (dot(dirCheck, dirCheck) < dot(a, a)) {\n        normal = -normal;\n    }\n    \n    return dist;\n}\n\n#define TRACE_TRI(a, b, c) curDist = traceTriangle(pos, dir, vertices[a] * scale_, vertices[b] * scale_, vertices[c] * scale_, curNorm) \n#define CHECK_DIST if (curDist < dist) { dist = curDist; normal = curNorm;}\n\nfloat traceIcosahedron(vec3 pos, vec3 dir, float scale_, out vec3 normal) {\n    vec3 curNorm;\n    float curDist, dist = INF;\n    /*for (int i = 0; i < TRIANGLECOUNT; ++i) {\n        Tri3D curTri = Tri3D(vertices[triangles[3 * i]],\n                             vertices[triangles[3 * i + 1]],\n                             vertices[triangles[3 * i + 2]]);                             \n        curDist = traceTriangle(pos, dir, curTri, curNorm);\n        if (curDist < dist) {\n            dist = curDist;\n            normal = curNorm;\n        }\n    }*/\n    \n    TRACE_TRI(5 , 11 , 0); CHECK_DIST\n    TRACE_TRI(1 , 5 , 0); CHECK_DIST\n    TRACE_TRI(7 , 1 , 0); CHECK_DIST\n    TRACE_TRI(10 , 7 , 0); CHECK_DIST\n    TRACE_TRI(11 ,10 , 0); CHECK_DIST\n    \n    TRACE_TRI(9 , 5 , 1); CHECK_DIST\n    TRACE_TRI(4 , 11 , 5); CHECK_DIST\n    TRACE_TRI(2 , 10 , 11); CHECK_DIST\n    TRACE_TRI(6 , 7 , 10); CHECK_DIST\n    TRACE_TRI(8 , 1 , 7); CHECK_DIST\n    \n    TRACE_TRI(4 , 9 , 3); CHECK_DIST\n    TRACE_TRI(2 , 4 , 3); CHECK_DIST\n    TRACE_TRI(6 , 2 , 3); CHECK_DIST\n    TRACE_TRI(8 , 6 , 3); CHECK_DIST\n    TRACE_TRI(9 , 8 , 3); CHECK_DIST\n    \n    TRACE_TRI(5 , 9 , 4); CHECK_DIST\n    TRACE_TRI(11 , 4 , 2); CHECK_DIST\n    TRACE_TRI(10 , 2 , 6); CHECK_DIST\n    TRACE_TRI(7 , 6, 8); CHECK_DIST\n    TRACE_TRI(1 , 8, 9); CHECK_DIST\n    \n    \n    return dist;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1. - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 1.) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 1.;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 result = vec3(1.), dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 icosNorm, cylNorm;\n    \n    float icosT = traceIcosahedron(pos, dir, .7, icosNorm);\n    if (icosT < dist) {\n        return true;\n    }\n    \n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return cylT < dist;\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 intensity = texture(iChannel1, normal).rgb * .1;\n    for (int i = 0; i < LIGHTCOUNT; ++i) {\n        vec3 toLight = Lights[i].pos - pos;\n        float distSq = dot(toLight, toLight);\n        float att = isOccluded(pos, Lights[i].pos + randDir * Lights[i].radius)\n                   ? 0. : Lights[i].intensity / distSq;\n        intensity += max(0.0, dot(normal, normalize(toLight)))\n                   * att * Lights[i].color;\n    }\n    return color * intensity;\n}\n\nfloat fireSdf(vec3 pos) {\n    return length(pos) - 0.85;\n}\n\nfloat BeerLambert(float absorptionCoefficient, float distanceTraveled) {\n    return exp(-absorptionCoefficient * distanceTraveled);\n}\n\nvec4 sampleFire(vec3 pos, vec3 dir) {\n    const float MARCH_SIZE = .1;\n    float ABSORPTION = 32.2;\n    float opacity = 1.;\n    vec3 fireCurPos;\n    vec3 fire = vec3(0.0);\n    for (int i = 0; i < 111; ++i) {\n        vec3 fireCurPos = pos + dir * MARCH_SIZE * float(i);\n        float sdf = fireSdf(fireCurPos);\n        if (sdf < 0.0) {\n            float prevOpacity = opacity;\n            opacity *= BeerLambert(ABSORPTION * (texture(iChannel3, fireCurPos * 0.2).x\n            + texture(iChannel3, fireCurPos * 0.4).x\n            + texture(iChannel3, fireCurPos * 0.8).x\n            + texture(iChannel3, fireCurPos * 1.6).x\n            ) * 0.25 * abs(sdf), MARCH_SIZE);\n            float absorbtion = prevOpacity - opacity;\n            vec3 fireColor = texture(iChannel3, fireCurPos * .45).rgb * 5.7;\n            fire += vec3(absorbtion) * vec3(fireColor.x * 2.28 + .3, fireColor.y, 0.);\n        }\n    }\n    return vec4(fire,  1. - opacity);\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nvec3 refraction(vec3 v, vec3 normal, out float n1, float n2) {\n    if (dot(v, normal) < 0.) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1. - pow2(cosA));\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    if (sinB > 1.) {\n        n1 -= .1;\n        return reflect(v, normal);\n    }\n    float cosB = sqrt(1. - pow2(sinB));\n    return sinB * tang + cosB * normal;\n}\n\nfloat rand(float frame) {\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    bool b = false;\n    vec3 randVals = vec3(\n         rand(float(iFrame)),\n         rand(float(iFrame + 5)),\n         rand(float(iFrame + 15))\n    );\n    randDir = normalize(randVals - .5);\n    vec2 uv = (fragCoord - iResolution.xy * .5\n              + (randVals.xy - .5)) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    vec3 curPos = CAMERA_POS,\n         curDir = viewVec;\n    float GLASS_R = pow2(AIR_N - GLASS_N)\n                  / pow2(AIR_N + GLASS_N);\n    float n1 = AIR_N;\n    float n2 = GLASS_N;\n    float mult = 1.;\n    vec3 colorMult = vec3(1, 1, 1);\n    vec3 colorBuf = vec3(0.);\n    for (int i = 0; i < 10; ++i) {\n        float dist = INF;\n        int materialType;\n        vec3 color, normal;\n\n        vec3 planeNorm;\n        float planeDist = tracePlane(curPos, curDir, planeNorm);\n        if (planeDist < dist) {\n            dist = planeDist;\n            normal = planeNorm;\n            vec3 worldPos = dist * curDir + curPos;\n            \n            if (randVals.y < .1) {\n                materialType = REFLECTION;\n                color = vec3(1, 1, 1);\n            } else {\n                materialType = DIFFUSE;\n                color = texture(iChannel0, worldPos.xz * .1).rgb;    \n            }\n        }\n        \n        vec3 lightNorm;\n        float lightDist;\n        for (int i = 0; i < LIGHTCOUNT; ++i) {\n            lightDist = traceSphere(curPos - Lights[i].pos, curDir, Lights[i].radius, lightNorm);\n            if (lightDist < dist) {\n                dist = lightDist;\n                materialType = EMISSION;\n                color = Lights[i].color;\n                normal = lightNorm;\n            }\n        }\n        \n        vec3 icosNorm;\n        float icosDist = traceIcosahedron(curPos, curDir, .7, icosNorm);\n        if (icosDist < dist) {\n            dist = icosDist;\n            normal = icosNorm;\n            \n            if (randVals.x < GLASS_R) {\n                materialType = REFLECTION;\n            } else {\n                materialType = REFRACTION;\n                vec4 fire = sampleFire(curPos, curDir);\n                colorBuf += fire.rgb * fire.a * mult * .1;\n                mult *= 1. + fire.a; \n            }\n        }\n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < dist) {\n            dist = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = dist * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n        if (dist != INF) {\n            vec3 worldPos = curPos + curDir * dist;\n            if (materialType == EMISSION) {\n                colorBuf += color * colorMult;\n                break;\n            } else if (materialType == DIFFUSE) {\n                colorBuf += computeLight(worldPos, color, normal) * colorMult;\n                break;\n            } else if (materialType == REFLECTION) {\n                if (dot(curDir, normal) < 0.) {\n                    normal = -normal;\n                }\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * EPS;\n            } else if (materialType == REFRACTION) {\n                float tmp = n1;\n                curDir = refraction(normalize(curDir + randVals * EPS),\n                                    normalize(normal), n1, n2);\n                curPos = worldPos + curDir * EPS;\n                if (n1 == tmp) {\n                    n1 = n2;\n                    n2 = tmp;\n                } else {\n                    n1 = tmp;\n                }\n            }\n        } else {\n            colorBuf += .1 * texture(iChannel1, curDir).rgb * colorMult;\n        }\n    }\n    fragColor = vec4(colorBuf, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}