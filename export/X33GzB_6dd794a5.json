{"ver":"0.1","info":{"id":"X33GzB","date":"1716629064","viewed":65,"name":"{Spherical Game of Life}","username":"inverse_transpose","description":"game of life","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["raytracing","gameoflife"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float iSphere(in vec3 ro, in vec3 rd, in vec3 sc, in float r)\n{\n    vec3 oc = ro - sc;\n    float b = dot(rd, oc);\n    float c = dot(oc, oc) - r*r;\n    float t = b*b - c;\n    \n    if (0.0 > t)\n        return -1.0;\n        \n    float g = sqrt(t);\n    return min((-b + g), (-b - g));\n}\n\nfloat iPlaneQ(in vec3 ro, in vec3 rd, in vec3 n, in vec3 q)\n{\n    vec3 nn = normalize(n);\n    return -dot(nn, ro - q) / dot(nn, rd);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.0*fragCoord/iResolution.xy-1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    const float radius = 1.25;\n    vec3 sc = vec3(0.0, 0.0, -1.6);\n    vec3 ro = vec3(0.0, 0.0,  1.0);\n    vec3 rd = normalize(vec3(uv.x, uv.y, -1.0));\n    \n    float st = sin(iTime*0.05);\n    float ct = cos(iTime*0.05);\n    float M = 100000.0;\n    float t = iSphere(ro, rd, sc, radius);\n    vec3 col = vec3(.9);\n    mat3 mat = mat3(\n        ct, 0.0, st,\n        0.0, 1.0, 0.0,\n       -st, 0.0, ct\n    );\n    if (!(0.0 > t))\n    {\n        M = t;\n        vec3 p = ro + t*rd;\n        vec3 n = normalize(mat*(p - sc));\n        vec2 tuv = vec2(atan(n.z / n.x), acos(n.y));\n        col = texture(iChannel0, tuv).rgb;\n    }\n    \n    const vec3 pn = vec3(0.0, 1.0, 0.0);\n    t = iPlaneQ(ro, rd, pn, vec3(0.0, -1.25, 0.0));\n    if (!(0.0 > t) && t < M)\n    {\n        vec3 p = ro + t*rd;\n        vec3 fs = normalize(mat*(p - sc));\n        float d = length(p - sc);\n        vec2 tuv = vec2(atan(fs.z / fs.x), acos(fs.y));\n        col = mix(vec3(.9), vec3(texture(iChannel0, tuv).rgb), (1.2/(d*d)));\n    }\n    \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float getPixelState(in vec2 uv, in sampler2D buffer, in vec2 iResolution)\n{\n    float result = 0.0;\n    \n    int nr = 0;\n    for (float i = -1.0; i <= 1.0; i += 1.0)\n    for (float j = -1.0; j <= 1.0; j += 1.0)\n    {\n        float value = texture(buffer, uv+(vec2(i,j)/iResolution.xy)).r;\n        nr += value > 0.0 ? 1 : 0;\n    }\n\n    bool alive = texture(buffer, uv).r > 0.0;\n\n    if (alive)\n    {\n        if (2 > nr || 3 < nr)\n            result = 0.0;\n        if (3 <= nr && 4 >= nr)\n            result = 1.0;\n    }\n    else\n    {\n          if (3 == nr)\n            result = 1.0;\n    }\n    \n    return result;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 col = vec3(0);\n    if (1.0 > iTime)\n    {\n        float r0 = texture(iChannel2, uv).r;\n        fragColor.r = r0 < 0.4 ? 1.0 : 0.0;\n    }\n    else\n    if (0 != iFrame % 20)\n    {\n        fragColor.r = texture(iChannel0, uv).r;\n    }\n    else\n    {\n        fragColor.r = getPixelState(uv, iChannel1, iResolution.xy);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    fragColor.r = texture(iChannel0, uv).r;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 previous = texture(iChannel1, uv)*.981;\n    vec4 current  = texture(iChannel0, uv);\n    \n    fragColor = max(previous, current);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 id_col = floor((uv*10.0)+10.0);\n    #define SZ 0.04\n    vec2 gv = fract(fragCoord*SZ)-.5;\n\n#define CALIVE vec3(.1)+vec3(id_col.x*0.0525, .1, id_col.y*0.0425)\n#define CDEAD vec3(.0125)\n\n    float value = texture(iChannel0,uv*SZ).r;\n    vec3 col = mix(CDEAD,CALIVE,value*value);\n    col*=smoothstep(0.1,0.0,length(gv)-0.35);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Buffer D","description":"","type":"buffer"}]}