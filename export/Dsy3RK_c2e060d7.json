{"ver":"0.1","info":{"id":"Dsy3RK","date":"1678920835","viewed":141,"name":"Importance Sampling Visualized","username":"enuyeel","description":"Importance Sampling Visualized by Yune '23 (twitter: @yuneismyname / website: https://yuneismyname.com)\n\nA visual representation of isotropic Trowbridge-Reitz (GGX) importance sampling; from 'Pre-Filtered Environment Map' proposed in [Karis13].\n    '","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["camera","cubemap","pbr","ggx","isotropic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Importance Sampling Visualized\n// by Yune 2023 (twitter: @yuneismyname / website: https://yuneismyname.com)\n// https://www.shadertoy.com/view/Dsy3RK\n\n/*\n    A visual representation of isotropic Trowbridge-Reitz (GGX) importance \n    sampling; 'Pre-Filtered Environment Map' part of the 'Split Sum Appro-\n    ximation' proposed in [Karis13]. \n    \n    This demonstration visualizes 4 things:\n        - macrosurface normal (longer line segment) in white\n        - light vectors (shorter line segment) in whichever color sampled\n        from the cubemap; it's deduced from the given macrosurface normal, \n        and half vector derived from importance sampling. \n        - weighted sum of radiance (sphere's color)\n        - roughness^2 value\n    \n    References:\n        \n        - [Karis13] Brian Karis. 2013. Real Shading in Unreal Engine 4. \n        https://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf\n        \n        - [Vries18] Joey de Vries. 2018. Specular IBL. \n        https://learnopengl.com/PBR/IBL/Specular-IBL\n        \n    TODO:\n        - \n        \n    Updated:\n*/\n\n#define PI 3.1415926535897932384626433832795028841971693993751058209749445923078164062\n#define MAXROUGHNESS 1.\n#define LINELENGTH 1.25\n#define LINERADIUS 0.05\n#define SPHERERAD  0.25\n#define ANIMESPEED 0.1\n#define SAMPLESIZE 32u\n#define CAMDISTANCE 3.\n#define CAMROTSPEED 0.25\n#define MAXDISTANCE LINELENGTH + CAMDISTANCE + LINERADIUS\n\nfloat roughness = 0.;\n\n// -----------------------------------------------------\n//[Vries18]\nfloat VanDerCorput(uint n, uint base)\n{\n    float invBase = 1.0 / float(base);\n    float denom   = 1.0;\n    float result  = 0.0;\n\n    for(uint i = 0u; i < 32u; ++i)\n    {\n        if(n > 0u)\n        {\n            denom   = mod(float(n), 2.0);\n            result += denom * invBase;\n            invBase = invBase / 2.0;\n            n       = uint(float(n) / 2.0);\n        }\n    }\n\n    return result;\n}\n\nvec2 HammersleyNoBitOps(uint i, uint N)\n{\n    return vec2(float(i)/float(N), VanDerCorput(i, 2u));\n}\n\nvec3 ImportanceSampleGGX(vec2 Xi, vec3 N/*, float roughness*/)\n{\n    //float a = roughness*roughness;\n    float a = roughness;\n\t\n    //\\phi=2\\pi\\cdot\\xi_\\phi\n    float phi = 2.0 * PI * Xi.x;\n    \n    //\\theta=cos^{-1}\\sqrt{\\frac{1-\\xi_\\theta}{\\xi_\\theta(\\alpha^2-1)+1}}\n    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));\n    float sinTheta = sqrt(1.0 - cosTheta*cosTheta);\n\t\n    //from spherical coordinates to cartesian coordinates\n    vec3 H;\n    H.x = cos(phi) * sinTheta;\n    H.y = cosTheta;\n    H.z = sin(phi) * sinTheta;\n\t\n    //from tangent-space vector to world-space sample vector;\n    //if N coincides exactly with vec3(0.0, 1.0, 0.0), set\n    //its up to vec3(1.0, 0.0, 0.0), which should give us\n    //same local axes\n    vec3 up        = abs(N.y) < 0.999 ? vec3(0.0, 1.0, 0.0) : vec3(1.0, 0.0, 0.0);\n    vec3 tangent   = normalize(cross(up, N));\n    vec3 bitangent = cross(N, tangent);\n\t\n    vec3 sampleVec = tangent * H.z + bitangent * H.x + N * H.y;\n    return normalize(sampleVec);\n}\n// -----------------------------------------------------\n\nstruct HitInfo\n{\n    float d;\n    vec3 color;\n};\n\nvoid sdf( vec3 re, inout HitInfo hi )\n{\n    hi.d = MAXDISTANCE;\n    \n    float azi = iTime;\n    float pol = abs(PI - mod(iTime, PI * 2.));\n    float sinpol = sin(pol);\n\n    vec3 N = vec3(cos(azi) * sinpol, cos(pol), sin(azi) * sinpol);\n    \n    //half vector visualization\n    float dp = sdCapsule(re, N * (SPHERERAD + LINELENGTH), N * SPHERERAD, LINERADIUS / 2.);\n    if (dp < hi.d)\n    {\n        hi.d = dp;\n        hi.color = vec3(1.); \n    }\n    \n    vec3 prefilteredColor = vec3(0.);\n    float totalWeight = 0.;\n    \n    //[Vries18]\n    for (uint i = 0u; i < SAMPLESIZE; ++i)\n    {\n        vec2 Xi = HammersleyNoBitOps(i, SAMPLESIZE);\n        vec3 H = ImportanceSampleGGX(Xi, N/*, roughness*/);\n        vec3 L = normalize(2. * dot(N, H) * H - N);\n        \n        //only the ones residing inside the hemisphere\n        float NdotL = max(dot(N, L), 0.0);\n        if(NdotL > 0.0)\n        {\n            //each line segment's (capsule's) color represents the radiance (sampled from cubemap)\n            dp = sdCapsule(re, L * (SPHERERAD + LINELENGTH / 2.), L * SPHERERAD, LINERADIUS);\n            vec3 tx = texture(iChannel0, L).rgb;\n            \n            if (dp < hi.d)\n            {\n                hi.d = dp;\n                hi.color = tx; \n            }\n        \n            prefilteredColor += tx * NdotL;\n            totalWeight      += NdotL;\n        }\n    }\n    prefilteredColor /= totalWeight;\n    \n    //sphere's color represents the weighted sum of radiance\n    dp = sdSphere(re, SPHERERAD);\n    if (dp < hi.d)\n    {\n        hi.d = dp;\n        hi.color = prefilteredColor;\n    }\n    \n    //was originally trying to draw cube sphere,\n    //but it's too ugly and uninformative ;)\n    /*\n    float dp = sdSphere(re, 1.);\n    if (dp < hi.d)\n    {\n        hi.d = dp;\n        vec3 dp = abs(re);\n        if (dp.r > dp.g && dp.r > dp.b)\n            hi.color = vec3(1., 0., 0.);\n        else if (dp.g > dp.b && dp.g > dp.r)\n            hi.color = vec3(0., 1., 0.);\n        else\n            hi.color = vec3(0., 0., 1.);\n    }\n    */\n}\n\nvec3 render( vec3 ro, vec3 rd )\n{\n    vec3 color = vec3(0.0);\n\n    float t = 0.;\n    vec3 re = ro + t * rd;\n    bool isHit = false;\n    HitInfo hi;\n    \n    for (int i = 0; i < 64; ++i)\n    {\n        float th = t * 0.001;\n\n        sdf(re, hi);\n\n        if (hi.d < th)\n        {\n            isHit = true;\n            break;\n        }\n\n        t += hi.d;\n        if (t > MAXDISTANCE)\n            break;\n        \n        re = ro + t * rd;\n    }\n    \n    if (isHit)\n        color = hi.color;\n    else\n        color = texture(iChannel0, rd).rgb; \n       \n    return color;\n}\n\n//[https://www.shadertoy.com/view/Mt2GWD]\n//'96-bit 8x12 Font' by @Flyguy\nfloat text(vec2 uv)\n{\n    float col = 0.0;\n    \n    print_pos = vec2(res.x / 2. - STRWIDTH(17.0) / 2., 2.0);\n    \n    TEXT_MODE = INVERT;\n    col += char(ch_r,uv);\n    col += char(ch_o,uv);\n    col += char(ch_u,uv);\n    col += char(ch_g,uv);\n    col += char(ch_h,uv);\n    col += char(ch_n,uv);\n    col += char(ch_e,uv);\n    col += char(ch_s,uv);\n    col += char(ch_s,uv);\n    col += char(ch_pow,uv);\n    col += char(ch_2,uv);\n    \n    col += char(ch_spc,uv);\n    col += char(ch_col,uv);\n    col += char(ch_spc,uv);\n    col += print_number(roughness,uv);  \n\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    roughness = abs(MAXROUGHNESS - mod(iTime * ANIMESPEED, MAXROUGHNESS * 2.));\n    roughness *= roughness;\n    \n    //[-1, 1]\n    vec2 uv = ((fragCoord - 0.5) / iResolution.xy) * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec3 rd;\n    vec3 ro;\n\n    //[https://www.shadertoy.com/view/MsXGz4]\n    //'Cubemaps' by @iq\n    if (iMouse.z > 0.) //if mouse input exists\n    {\n        //[-1, 1]\n        vec2 mo = 2. * iMouse.xy / iResolution.xy - 1.;\n\n        //azimuthal angle\n        float azi = -PI / 2. + PI * mo.x;\n        //polar angle (clamped)\n        float pol = clamp( (PI / 2.) * (1. - mo.y), 0.2, PI - 0.2 );\n\n        //vec3(0., 0., -1.) by default\n        vec3 f = normalize(vec3(sin(pol)*cos(azi), cos(pol), sin(pol)*sin(azi)));\n        vec3 t = normalize(cross( f, vec3(0.0,1.0,0.0) ));\n        vec3 bt = normalize(cross(t,f));\n        rd = normalize( uv.x * t + uv.y * bt + f );\n        ro = CAMDISTANCE * -f;\n    }\n    else\n    {\n        rd = normalize(vec3(uv, -1.));\n        rd *= rotationMatrixY(-iTime * CAMROTSPEED);\n        ro = vec3(0., 0., CAMDISTANCE);\n        ro *= rotationMatrixY(-iTime * CAMROTSPEED);        \n    }\n    \n    vec2 x = sphIntersect(ro, rd, vec3(0.), SPHERERAD + LINELENGTH + LINERADIUS);\n\n    vec3 color = vec3(0.);\n\n    if (x.x > 0.)\n        color = render(ro + rd * x.x, rd);\n    else\n        color = texture(iChannel0, rd).rgb;\n    \n    res = iResolution.xy / DOWN_SCALE; \n    color += text(floor(fragCoord.xy / DOWN_SCALE));\n\n    fragColor = vec4(color, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"mat3 rotationMatrixY(float rad)\n{\n    //* RH y axis CCW rotation\n    //* |  cos(Ry) 0 sin(Ry) |\n    //* |        0 1       0 |\n    //* | -sin(Ry) 0 cos(Ry) |\n\n    float c = cos(rad);\n    float s = sin(rad);\n\n    return mat3(vec3(  c, 0.0,  -s),\n                vec3(0.0, 1.0, 0.0),\n                vec3(  s, 0.0,   c));\n}\n\n//[https://iquilezles.org/articles/intersectors/]\n//by @iq\nvec2 sphIntersect( in vec3 ro, in vec3 rd, in vec3 ce, float ra )\n{\n    vec3 oc = ro - ce;\n    float b = dot( oc, rd );\n    vec3 qc = oc - b*rd;\n    float h = ra*ra - dot( qc, qc );\n    if( h<0.0 ) return vec2(-1.0); // no intersection\n    h = sqrt( h );\n    return vec2( -b-h, -b+h );\n}\n\n//[https://iquilezles.org/articles/distfunctions/]\n//by @iq\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\n//[https://iquilezles.org/articles/distfunctions/]\n//by @iq\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\n//[https://www.shadertoy.com/view/Mt2GWD]\n//'96-bit 8x12 Font' by @Flyguy\n\n#define DOWN_SCALE 1.0\n\n#define MAX_INT_DIGITS 4\n\n#define CHAR_SIZE vec2(8, 12)\n#define CHAR_SPACING vec2(8, 12)\n\n#define STRWIDTH(c) (c * CHAR_SPACING.x)\n#define STRHEIGHT(c) (c * CHAR_SPACING.y)\n\n#define NORMAL 0\n#define INVERT 1\n#define UNDERLINE 2\n\nint TEXT_MODE = NORMAL;\n\n/*\n--------\n-###----\n##-##---\n##-##---\n-###----\n#####-#-\n##-####-\n##--##--\n##-###--\n-###-##-\n--------\n--------\n\n00000000\n01110000\n11011000\n11011000\n01110000\n11111010\n11011110\n11001100\n11011100\n01110110\n00000000\n00000000\n\n//Broken up into 4 8x3 (24 bit) chunks for each component of the vec4.\n//Hexadecimal is being used to reduce clutter in the code but decimal still works.\n\n00000000\n01110000 -> 00000000 01110000 11011000 -> 0x0070D8\n11011000\n\n11011000\n01110000 -> 11011000 01110000 11111010 -> 0xD870FA\n11111010\n\n11011110\n11001100 -> 11011110 11001100 11011100 -> 0xDECCDC\n11011100\n\n01110110\n00000000 -> 01110110 00000000 00000000 -> 0x760000\n00000000\n\nvec4(0x0070D8,0xD870FA,0xDECCDC,0x760000)\n*/\n\n//Automatically generated from the 8x12 font sheet here:\n//http://www.massmind.org/techref/datafile/charset/extractor/charset_extractor.htm\n\nvec4 ch_spc = vec4(0x000000,0x000000,0x000000,0x000000);\nvec4 ch_exc = vec4(0x003078,0x787830,0x300030,0x300000);\nvec4 ch_quo = vec4(0x006666,0x662400,0x000000,0x000000);\nvec4 ch_hsh = vec4(0x006C6C,0xFE6C6C,0x6CFE6C,0x6C0000);\nvec4 ch_dol = vec4(0x30307C,0xC0C078,0x0C0CF8,0x303000);\nvec4 ch_pct = vec4(0x000000,0xC4CC18,0x3060CC,0x8C0000);\nvec4 ch_amp = vec4(0x0070D8,0xD870FA,0xDECCDC,0x760000);\nvec4 ch_apo = vec4(0x003030,0x306000,0x000000,0x000000);\nvec4 ch_lbr = vec4(0x000C18,0x306060,0x603018,0x0C0000);\nvec4 ch_rbr = vec4(0x006030,0x180C0C,0x0C1830,0x600000);\nvec4 ch_ast = vec4(0x000000,0x663CFF,0x3C6600,0x000000);\nvec4 ch_crs = vec4(0x000000,0x18187E,0x181800,0x000000);\nvec4 ch_com = vec4(0x000000,0x000000,0x000038,0x386000);\nvec4 ch_dsh = vec4(0x000000,0x0000FE,0x000000,0x000000);\nvec4 ch_per = vec4(0x000000,0x000000,0x000038,0x380000);\nvec4 ch_lsl = vec4(0x000002,0x060C18,0x3060C0,0x800000);\nvec4 ch_0 = vec4(0x007CC6,0xD6D6D6,0xD6D6C6,0x7C0000);\nvec4 ch_1 = vec4(0x001030,0xF03030,0x303030,0xFC0000);\nvec4 ch_2 = vec4(0x0078CC,0xCC0C18,0x3060CC,0xFC0000);\nvec4 ch_3 = vec4(0x0078CC,0x0C0C38,0x0C0CCC,0x780000);\nvec4 ch_4 = vec4(0x000C1C,0x3C6CCC,0xFE0C0C,0x1E0000);\nvec4 ch_5 = vec4(0x00FCC0,0xC0C0F8,0x0C0CCC,0x780000);\nvec4 ch_6 = vec4(0x003860,0xC0C0F8,0xCCCCCC,0x780000);\nvec4 ch_7 = vec4(0x00FEC6,0xC6060C,0x183030,0x300000);\nvec4 ch_8 = vec4(0x0078CC,0xCCEC78,0xDCCCCC,0x780000);\nvec4 ch_9 = vec4(0x0078CC,0xCCCC7C,0x181830,0x700000);\nvec4 ch_col = vec4(0x000000,0x383800,0x003838,0x000000);\nvec4 ch_scl = vec4(0x000000,0x383800,0x003838,0x183000);\nvec4 ch_les = vec4(0x000C18,0x3060C0,0x603018,0x0C0000);\nvec4 ch_equ = vec4(0x000000,0x007E00,0x7E0000,0x000000);\nvec4 ch_grt = vec4(0x006030,0x180C06,0x0C1830,0x600000);\nvec4 ch_que = vec4(0x0078CC,0x0C1830,0x300030,0x300000);\nvec4 ch_ats = vec4(0x007CC6,0xC6DEDE,0xDEC0C0,0x7C0000);\nvec4 ch_A = vec4(0x003078,0xCCCCCC,0xFCCCCC,0xCC0000);\nvec4 ch_B = vec4(0x00FC66,0x66667C,0x666666,0xFC0000);\nvec4 ch_C = vec4(0x003C66,0xC6C0C0,0xC0C666,0x3C0000);\nvec4 ch_D = vec4(0x00F86C,0x666666,0x66666C,0xF80000);\nvec4 ch_E = vec4(0x00FE62,0x60647C,0x646062,0xFE0000);\nvec4 ch_F = vec4(0x00FE66,0x62647C,0x646060,0xF00000);\nvec4 ch_G = vec4(0x003C66,0xC6C0C0,0xCEC666,0x3E0000);\nvec4 ch_H = vec4(0x00CCCC,0xCCCCFC,0xCCCCCC,0xCC0000);\nvec4 ch_I = vec4(0x007830,0x303030,0x303030,0x780000);\nvec4 ch_J = vec4(0x001E0C,0x0C0C0C,0xCCCCCC,0x780000);\nvec4 ch_K = vec4(0x00E666,0x6C6C78,0x6C6C66,0xE60000);\nvec4 ch_L = vec4(0x00F060,0x606060,0x626666,0xFE0000);\nvec4 ch_M = vec4(0x00C6EE,0xFEFED6,0xC6C6C6,0xC60000);\nvec4 ch_N = vec4(0x00C6C6,0xE6F6FE,0xDECEC6,0xC60000);\nvec4 ch_O = vec4(0x00386C,0xC6C6C6,0xC6C66C,0x380000);\nvec4 ch_P = vec4(0x00FC66,0x66667C,0x606060,0xF00000);\nvec4 ch_Q = vec4(0x00386C,0xC6C6C6,0xCEDE7C,0x0C1E00);\nvec4 ch_R = vec4(0x00FC66,0x66667C,0x6C6666,0xE60000);\nvec4 ch_S = vec4(0x0078CC,0xCCC070,0x18CCCC,0x780000);\nvec4 ch_T = vec4(0x00FCB4,0x303030,0x303030,0x780000);\nvec4 ch_U = vec4(0x00CCCC,0xCCCCCC,0xCCCCCC,0x780000);\nvec4 ch_V = vec4(0x00CCCC,0xCCCCCC,0xCCCC78,0x300000);\nvec4 ch_W = vec4(0x00C6C6,0xC6C6D6,0xD66C6C,0x6C0000);\nvec4 ch_X = vec4(0x00CCCC,0xCC7830,0x78CCCC,0xCC0000);\nvec4 ch_Y = vec4(0x00CCCC,0xCCCC78,0x303030,0x780000);\nvec4 ch_Z = vec4(0x00FECE,0x981830,0x6062C6,0xFE0000);\nvec4 ch_lsb = vec4(0x003C30,0x303030,0x303030,0x3C0000);\nvec4 ch_rsl = vec4(0x000080,0xC06030,0x180C06,0x020000);\nvec4 ch_rsb = vec4(0x003C0C,0x0C0C0C,0x0C0C0C,0x3C0000);\nvec4 ch_pow = vec4(0x10386C,0xC60000,0x000000,0x000000);\nvec4 ch_usc = vec4(0x000000,0x000000,0x000000,0x00FF00);\nvec4 ch_a = vec4(0x000000,0x00780C,0x7CCCCC,0x760000);\nvec4 ch_b = vec4(0x00E060,0x607C66,0x666666,0xDC0000);\nvec4 ch_c = vec4(0x000000,0x0078CC,0xC0C0CC,0x780000);\nvec4 ch_d = vec4(0x001C0C,0x0C7CCC,0xCCCCCC,0x760000);\nvec4 ch_e = vec4(0x000000,0x0078CC,0xFCC0CC,0x780000);\nvec4 ch_f = vec4(0x00386C,0x6060F8,0x606060,0xF00000);\nvec4 ch_g = vec4(0x000000,0x0076CC,0xCCCC7C,0x0CCC78);\nvec4 ch_h = vec4(0x00E060,0x606C76,0x666666,0xE60000);\nvec4 ch_i = vec4(0x001818,0x007818,0x181818,0x7E0000);\nvec4 ch_j = vec4(0x000C0C,0x003C0C,0x0C0C0C,0xCCCC78);\nvec4 ch_k = vec4(0x00E060,0x60666C,0x786C66,0xE60000);\nvec4 ch_l = vec4(0x007818,0x181818,0x181818,0x7E0000);\nvec4 ch_m = vec4(0x000000,0x00FCD6,0xD6D6D6,0xC60000);\nvec4 ch_n = vec4(0x000000,0x00F8CC,0xCCCCCC,0xCC0000);\nvec4 ch_o = vec4(0x000000,0x0078CC,0xCCCCCC,0x780000);\nvec4 ch_p = vec4(0x000000,0x00DC66,0x666666,0x7C60F0);\nvec4 ch_q = vec4(0x000000,0x0076CC,0xCCCCCC,0x7C0C1E);\nvec4 ch_r = vec4(0x000000,0x00EC6E,0x766060,0xF00000);\nvec4 ch_s = vec4(0x000000,0x0078CC,0x6018CC,0x780000);\nvec4 ch_t = vec4(0x000020,0x60FC60,0x60606C,0x380000);\nvec4 ch_u = vec4(0x000000,0x00CCCC,0xCCCCCC,0x760000);\nvec4 ch_v = vec4(0x000000,0x00CCCC,0xCCCC78,0x300000);\nvec4 ch_w = vec4(0x000000,0x00C6C6,0xD6D66C,0x6C0000);\nvec4 ch_x = vec4(0x000000,0x00C66C,0x38386C,0xC60000);\nvec4 ch_y = vec4(0x000000,0x006666,0x66663C,0x0C18F0);\nvec4 ch_z = vec4(0x000000,0x00FC8C,0x1860C4,0xFC0000);\nvec4 ch_lpa = vec4(0x001C30,0x3060C0,0x603030,0x1C0000);\nvec4 ch_bar = vec4(0x001818,0x181800,0x181818,0x180000);\nvec4 ch_rpa = vec4(0x00E030,0x30180C,0x183030,0xE00000);\nvec4 ch_tid = vec4(0x0073DA,0xCE0000,0x000000,0x000000);\nvec4 ch_lar = vec4(0x000000,0x10386C,0xC6C6FE,0x000000);\n\nvec2 res = vec2(0);\nvec2 print_pos = vec2(0);\n\n//Extracts bit b from the given number.\n//Shifts bits right (num / 2^bit) then ANDs the result with 1 (mod(result,2.0)).\nfloat extract_bit(float n, float b)\n{\n    b = clamp(b,-1.0,24.0);\n\treturn floor(mod(floor(n / pow(2.0,floor(b))),2.0));   \n}\n\n//Returns the pixel at uv in the given bit-packed sprite.\nfloat sprite(vec4 spr, vec2 size, vec2 uv)\n{\n    uv = floor(uv);\n    \n    //Calculate the bit to extract (x + y * width) (flipped on x-axis)\n    float bit = (size.x-uv.x-1.0) + uv.y * size.x;\n    \n    //Clipping bound to remove garbage outside the sprite's boundaries.\n    bool bounds = all(greaterThanEqual(uv,vec2(0))) && all(lessThan(uv,size));\n    \n    float pixels = 0.0;\n    pixels += extract_bit(spr.x, bit - 72.0);\n    pixels += extract_bit(spr.y, bit - 48.0);\n    pixels += extract_bit(spr.z, bit - 24.0);\n    pixels += extract_bit(spr.w, bit - 00.0);\n    \n    return bounds ? pixels : 0.0;\n}\n\n//Prints a character and moves the print position forward by 1 character width.\nfloat char(vec4 ch, vec2 uv)\n{\n    if( TEXT_MODE == INVERT )\n    {\n      //Inverts all of the bits in the character.\n      ch = pow(2.0,24.0)-1.0-ch;\n    }\n    if( TEXT_MODE == UNDERLINE )\n    {\n      //Makes the bottom 8 bits all 1.\n      //Shifts the bottom chunk right 8 bits to drop the lowest 8 bits,\n      //then shifts it left 8 bits and adds 255 (binary 11111111).\n      ch.w = floor(ch.w/256.0)*256.0 + 255.0;  \n    }\n\n    float px = sprite(ch, CHAR_SIZE, uv - print_pos);\n    print_pos.x += CHAR_SPACING.x;\n    return px;\n}\n\n\n//Returns the digit sprite for the given number.\nvec4 get_digit(float d)\n{\n    d = floor(d);\n    \n    if(d == 0.0) return ch_0;\n    if(d == 1.0) return ch_1;\n    if(d == 2.0) return ch_2;\n    if(d == 3.0) return ch_3;\n    if(d == 4.0) return ch_4;\n    if(d == 5.0) return ch_5;\n    if(d == 6.0) return ch_6;\n    if(d == 7.0) return ch_7;\n    if(d == 8.0) return ch_8;\n    if(d == 9.0) return ch_9;\n    return vec4(0.0);\n}\n\n//Prints out the given number starting at pos.\nfloat print_number(float number, vec2 uv)\n{\n    float result = 0.0;\n    \n\tfor(int i = 3;i >= -1;i--)\n    {\n        float digit = mod( number / pow(10.0, float(i)) , 10.0);\n        \n        if(i == -1) //Add a decimal point.\n        {\n            result += char(ch_per,uv);\n        }\n        \n        if(abs(number) > pow(10.0, float(i)) || i == 0) //Clip off leading zeros.\n        {\n        \tresult += char(get_digit(digit),uv);\n        }\n    }   \n    return result;\n}","name":"Common","description":"","type":"common"}]}