{"ver":"0.1","info":{"id":"fs33R4","date":"1629200859","viewed":276,"name":"xor pattern animated","username":"hikiko","description":"based on a xor pattern","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["xor"],"hasliked":0,"parentid":"Nd33R4","parentname":"xor pattern test"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float M_PI = 3.14;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int xor = (int(fragCoord.x) ^ int(fragCoord.y));\n    \n    float r = float((xor * 2) & 0xff) / 255.0 * 0.3;\n    float g = float((xor * 4) & 0xff) / 255.0 * 0.7;\n\tfloat b = float((xor * 8) & 0xff) / 255.0 * 0.6;\n    \n    vec3 col = vec3(b * atan(r * cos(iTime + M_PI / 3.0), b * sin(iTime - M_PI / 2.0) + 0.0001), \n    g * atan(r * cos(iTime - M_PI / 4.0), g * sin(iTime + M_PI * 4.0 / 3.0) + 0.0004),\n    b * atan(b * sin(iTime + M_PI / 2.0), g * cos(iTime + M_PI / 2.0)) + 0.0004);\n    \n    fragColor = vec4(mix(col.x * atan(iTime * 0.8 + M_PI / 8.0, col.y), 1.0, cos(g * b - M_PI / r / 2.0)), col.y, col.z, 1.0);\n}","name":"Image","description":"","type":"image"}]}