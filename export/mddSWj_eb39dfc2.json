{"ver":"0.1","info":{"id":"mddSWj","date":"1680457991","viewed":96,"name":"Fork lr94/Matri UFELE 394","username":"UFELE","description":"Matrix Text Effect","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["text"],"hasliked":0,"parentid":"3d2fRd","parentname":"lr94/MatrixText"},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// probably only needed for serious optimization\n//const float sixteenth = 1. / 16.;\n#define EPSILON 0.01\n#define SHARPNESS 0.1\n\nfloat rand(float x)\n{\n    return fract(sin(x) * 100000.0);\n}\n\nfloat rand2(vec2 st)\n{\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\n}\n\n/* Returns an ASCII character identifier for one of the uppercase letters.\n * Use x to sample the RNG\n */\nint randCapLetter(float x)\n{\n    int letter = int(rand(x) * 25.);\n    return letter + 65;\n}\n\nint randCapLetter(vec2 x)\n{\n    int letter = int(rand2(x) * 25.);\n    return letter + 65;\n}\n\nint randHackerSymbol(vec2 x)\n{\n    int letter = int(rand2(x) * 210.);\n    return letter + 35;\n}\n\n/* Takes an ASCII character identifier, and a uv in the range (0, 1).\n * Returns 1.0 if uv is inside the character centered at (0.5, 0.5), 0.0 otherwise.\n */\nfloat character(int index, highp vec2 uv)\n{\n    // Prevents drawing characters other than the one selected\n    uv = clamp(uv, 0., 1.);\n    // Translate index to an x, y coordinate on the texture from 0 to 15\n    vec2 charPos = vec2(mod(float(index), 2.), 2 - index / 2);\n    // Scale and translate to select only the desired character\n    vec2 uvTex = uv / 16. + charPos / 16.;\n    vec4 texSample = texture(iChannel0, uvTex);\n    // Eliminate magic line; ensure output is between 0 and 1\n    return clamp(texSample.x * (1.+SHARPNESS) - SHARPNESS, 0., 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // Place uv = (0, 0) at the center of the screen\n    uv -= 0.5;\n    // scale by aspect ratio on the x axis\n    uv.x *= iResolution.x/iResolution.y;\n    \n    // Use a seperate uv coordinate to do spacial transformations\n    highp vec2 uvChar = uv;\n    // Scale and scroll\n    uvChar *= 45.;\n    //float scrollSpeed = 10. + 5. * cos(floor(uvChar.x) + sin(iTime));\n    float scrollSpeed = 1. * iTime + sin(iTime + floor(uvChar.x));\n    uvChar.y += scrollSpeed;\n    // Divide into horizontal stripes of space and store the coordinates of each stripe in cell\n    vec2 cell = floor(uvChar);\n    uvChar.xy = fract(uvChar.xy);\n    // Center the column. Space transformations have to be done in reverse. (+ -> -, * -> /)\n    //uvChar.x += .5;\n    // Sample the color using a random letter per stripe and the transformed uv\n    float char = character(randHackerSymbol(cell.xy), vec2(uvChar.x, uvChar.y));\n   \t\n    char = mix(char, 0., uv.y + 0.5);\n    float rainingChar = mix(0., char, (mod((1.-uv.y+.5)*10.-scrollSpeed+rand(cell.x)*50., 10.)/10.-.5)*2.);\n    vec3 col = vec3(0., rainingChar, 0.);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}