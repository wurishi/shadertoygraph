{"ver":"0.1","info":{"id":"MtdBDN","date":"1539729710","viewed":173,"name":"pink edges","username":"vooku","description":"animation for cyberpunk virtual space","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["pink","cyberpunk"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 PINK = vec3(0.9, 0, 0.67);\nconst vec3 YELLOW = vec3(1.0, 0.92, 0.0);\nconst float SPEED = 1.0 / 2.0;\nconst float AMP = 5.0;\n\nfloat dist (vec2 q, vec2 a, vec2 b) {\n\tfloat num = abs((b.y - a.y) * q.x - (b.x - a.x) * q.y + b.x * a.y - b.y * a.x);\n    float denom = distance(a, b);\n    return num / denom;  \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy * 2.0 - 1.0;\n    \n    vec2 a = vec2(-0.5, -0.9);\n    vec2 b = vec2(0.5, -0.9);\n    vec2 c = vec2(0.0, 0.9);\n   \n    float anim = sin(iTime * SPEED) / 2.0 + 0.5;\n    \n    //float d = min(min(distance(uv, a), distance(uv, b)), distance(uv, c));\n    float d = min(min(dist(uv, a, c), dist(uv, b, c)), dist(uv, a, b));\n    vec3 inside = mix(vec3(0), YELLOW, anim);\n    vec3 clearColor = vec3(0.1, 0, 0);\n    vec3 col = mix(texture(iChannel0, uv + vec2(0, iTime * SPEED * 0.25)).xyz, PINK, 0.8);\n    col = mix(col, inside, d * AMP);\n    float alpha = (col.x + col.y + col.z) / 3.0 * float(inTriangle(uv, a, b, c));\n    fragColor = vec4(mix(clearColor, col, alpha), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/**\n * Thanks to Christer Ericson â€“ Real-Time Collision Detection\n * Using barycentric coords and solving resulting equations with Cramer's rule\n */\nbool inTriangle(vec2 p, vec2 a, vec2 b, vec2 c) {\n    vec2 v0 = b - a;\n    vec2 v1 = c - a;\n    vec2 v2 = p - a;\t\n    \n    float d00 = dot(v0, v0);\n    float d01 = dot(v0, v1);\n    float d11 = dot(v1, v1);\n    float d20 = dot(v2, v0);\n    float d21 = dot(v2, v1);\n    \n    float denom = d00 * d11 - d01 * d01;\n    float v = (d20 * d11 - d21 * d01) / denom;\n    float w = (d00 * d21 - d01 * d20) / denom;        \n    \n    return (v >= 0.0 && w >= 0.0 && v + w < 1.0);\n}","name":"Common","description":"","type":"common"}]}