{"ver":"0.1","info":{"id":"X3VGDV","date":"1718258222","viewed":92,"name":"Linear Gradient Scroll","username":"mrducky","description":"Infinite gradient","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["gradient"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalize the fragment coordinates to range from 0 to 1\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    // Define the colors for the gradient\n    vec4 topColor = vec4(1, 0, 0.0, 1.0); // Red color for the top\n    vec4 middleColor = vec4(1, 0.49, 0.31, 1.0); // Orange color for the middle\n    vec4 bottomColor = vec4(1.0, 1.0, 0, 1.0); // Yellow color for the bottom\n    \n    // Calculate the animation offset\n    float speed = 0.5; // Adjust the speed as needed\n    float offset = mod(2.0 * speed, 1.0);\n    \n    // Apply the offset to the y coordinate\n    float adjustedY = mod(uv.y + offset, 1.0);\n    \n    // Adjusted Y value to ensure equal distribution of colors\n    float segment = 1.0 / 3.0;\n    float normalizedY = adjustedY / segment;\n    float mixFactor = mod(normalizedY, 1.0);\n    int segmentIndex = int(floor(normalizedY));\n    \n    // Interpolate between the colors based on the segment\n    if (segmentIndex == 0) {\n        fragColor = mix(bottomColor, middleColor, mixFactor);\n    } else if (segmentIndex == 1) {\n        fragColor = mix(middleColor, topColor, mixFactor);\n    } else {\n        fragColor = mix(topColor, bottomColor, mixFactor); // Seamless transition back to bottom color\n    }\n}","name":"Image","description":"","type":"image"}]}