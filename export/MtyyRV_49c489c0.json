{"ver":"0.1","info":{"id":"MtyyRV","date":"1536918283","viewed":142,"name":"Molecular Buffet","username":"aparadja","description":"Contains no actual molecules","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float flatten(float x, float d) {\n    if (x > 0.0) return max(0.0, x - d);\n    return min(0.0, x + d);\n}\n\nfloat mapPill(vec3 position, float radius, float stretch, out vec3 normal, out float ao) {\n    vec3 q = fract(position) - 0.5;\n    \n    float pulse = sin(iTime * 6.0 + position.x + position.y + position.z);\n    radius -= pulse * 0.03;\n    stretch += pulse * 0.06;\n\n    float angle = (iTime * 2.0 + position.x + position.y + position.z) / 2.0;\n    mat2 rotation = mat2(-cos(angle), sin(angle), sin(angle), cos(angle));\n    q.xz *= rotation;\n    q.yz *= rotation;\n\n    vec3 s;\n    vec3 a = abs(q);\n    if (a.x > a.y && a.x > a.z)\n        s = vec3(flatten(q.x, stretch), q.yz);\n    else if (a.y > a.z)\n    \ts = vec3(q.x, flatten(q.y, stretch), q.z);\n    else\n    \ts = vec3(q.xy, flatten(q.z, stretch));\n    ao = 1.3 * radius / length(q);\n    normal = normalize(s);\n    normal.yz *= inverse(rotation);\n    normal.xz *= inverse(rotation);\n    return length(s) - radius;\n}\n\nfloat trace(vec3 origin, vec3 ray, out vec3 normal, out float ao) {\n    float t = 0.0;\n    for (int i = 0; i < 128; i++) {\n        vec3 p = origin + ray * t;\n        t += mapPill(p, 0.1, 0.2, normal, ao) * 1.0;\n    }\n    return t;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y; \n    vec3 ray = normalize(vec3(uv, 1.45) + vec3(0, -0.2, 0));\n    float angle = iTime / 3.0;\n    mat2 rotation = mat2(-cos(angle), sin(angle), sin(angle), cos(angle));\n    ray.xz *= rotation;\n    vec3 origin = vec3(cos(iTime/13.0) * 14.0, iTime * 0.3, 0);\n    vec3 normal;\n    float ao;\n    float depth = trace(origin, ray, normal, ao);\n    vec3 light = vec3(0, -1, 0);\n    vec3 fog = vec3(1.0 / (1.0 + depth * depth * 0.2));\n    float diffuse = max(0.0, dot(-light, normal));\n    vec3 sun = vec3(0.1, 0.9, 0.4);\n    vec3 ambient = vec3(0.1, 0.2, 0.3);\n    float occlusion = max(0.0, 1.0 - ao);\n    \n    vec3 col = fog * occlusion * (ambient + sun * diffuse + 1.7 * pow(diffuse, 24.0));\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}