{"ver":"0.1","info":{"id":"ttSfRy","date":"1599199668","viewed":65,"name":"Spinning Squares","username":"kowbell","description":"Fork of DonKarlssonSan's \"Spinning Squares - Antialias\" (https://www.shadertoy.com/view/XsVyzc)\n\nThis version makes it \"recursive\"","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["recursive","square","spin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/** Fork of DonKarlssonSan's \"Spinning Squares - Antialias\" (https://www.shadertoy.com/view/XsVyzc) */\n\n#define MOUSE (iMouse.xy/iResolution.xy)\n#define TIME (iTime*1.0)\n#define ROTSPEED 0.3\n#define ITERATIONS 64\n#define SIZEMIN 0.01\n#define SIZEMAX 0.5\n\n// TODO this feels too sensitive... check your math again!\n#define ITER_ROTATE_OFFSET (TIME * 0.0003)\n//#define ITER_ROTATE_OFFSET ((TIME + MOUSE.y) * MOUSE.x)\n\n#define lerp(a, b, x) (a + (b - a) * x)\n#define rotate(a)  mat2(cos(a), -sin(a), sin(a), cos(a))\n\nconst vec3 colors[3] = vec3[3](\n    vec3(1., 0., 0.),\n    vec3(0., 1., 0.),\n    vec3(0., 0., 1.)\n);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    for (int iter = 0; iter < ITERATIONS; iter++)\n    {\n        float size = lerp(SIZEMIN, SIZEMAX, float(iter) / float(ITERATIONS));\n        float smoothness = 0.001 / iResolution.x;\n        vec2 uv = (fragCoord.xy -0.5 * iResolution.xy) / iResolution.x;\n        uv *= rotate((TIME + (float(iter) * ITER_ROTATE_OFFSET)) * ROTSPEED);\n\n        uv = abs(uv);\n        float d = max(uv.x, uv.y);\n        vec4 sqcol = vec4(\n            mix (fragColor.xyz,\n                colors[iter % colors.length()],\n                smoothstep(size, size - smoothness, d)), \n            1.0);\n        \n        fragColor = \n        \tmix(sqcol, fragColor, float(length(fragColor.xyz) > 0.0));\n            \n    }\n\n}","name":"Image","description":"","type":"image"}]}