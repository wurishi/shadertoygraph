{"ver":"0.1","info":{"id":"McjBzc","date":"1725340951","viewed":39,"name":"Breathing MAE Illusion ","username":"SirShart","description":"Illusion","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["illusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\n// Function to create a crystalline pattern\nfloat crystalPattern(vec2 uv, float time) {\n    float scale = 8.0;\n    uv *= scale;\n\n    // Crystal growth pattern based on distance and time\n    float angle = atan(uv.y, uv.x);\n    float radius = length(uv);\n    \n    float crystal = cos(radius * 12.0 - time * 4.0) + sin(angle * 8.0 + time * 3.0);\n    crystal = pow(abs(crystal), 2.0);  // Sharpen the crystalline edges\n    \n    return crystal;\n}\n\n// Function to create chromatic aberration effect\nvec3 chromaticAberration(vec2 uv, float time) {\n    float crystalR = crystalPattern(uv + vec2(0.01, 0.0), time);\n    float crystalG = crystalPattern(uv, time);\n    float crystalB = crystalPattern(uv - vec2(0.01, 0.0), time);\n\n    return vec3(crystalR, crystalG, crystalB);\n}\n\n// Function to add dynamic pulsing effect\nfloat pulseEffect(float crystal, float time) {\n    return crystal * (0.7 + 0.3 * sin(time * 5.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalize and center coordinates\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // Apply time-based scaling to enhance the crystal's growth effect\n    float time = iTime * 0.6;\n    uv *= 1.0 + 0.2 * sin(time * 2.0);\n    \n    // Generate chromatic aberration effect for the crystal pattern\n    vec3 crystalColor = chromaticAberration(uv, time);\n    \n    // Apply pulse effect to create a pulsating crystal formation\n    crystalColor *= pulseEffect(crystalColor.g, time);\n    \n    // Output final color\n    fragColor = vec4(crystalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}