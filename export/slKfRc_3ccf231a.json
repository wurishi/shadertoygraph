{"ver":"0.1","info":{"id":"slKfRc","date":"1664978943","viewed":184,"name":"Cellular Mazes","username":"MysteryPancake","description":"Inspired by Conway's Game of Life, I found interesting mazes emerge from a 3x3 kernel.","likes":6,"published":3,"flags":32,"usePreview":0,"tags":["noise","cellular","pattern","cell","maze","gameoflife","automaton","pebble"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord / gridSize), 0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define cell(offset) texelFetch(iChannel0, ivec2(fragCoord) + offset, 0).x\nconst int resetAfter = 64;\n\nfloat rand(vec2 p) {\n    return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    // Skip invisible pixels\n    if (fragCoord.x * gridSize > iResolution.x || fragCoord.y * gridSize > iResolution.y) discard;\n\n    if (iFrame % resetAfter == 0) {\n    \n        // Initialize values, random noise\n        fragColor = vec4(vec3(rand(fragCoord / iResolution.xy)), 1.0);\n        \n    } else {\n    \n        // Sample current pixel directly\n        float self = texelFetch(iChannel0, ivec2(fragCoord), 0).x;\n\n        // Sum of neighbours, 3 x 3 kernel\n        float sum = cell(ivec2(-1,  1)) + cell(ivec2(0,  1)) + cell(ivec2(1,  1))\n                  + cell(ivec2(-1,  0))                      + cell(ivec2(1,  0))\n                  + cell(ivec2(-1, -1)) + cell(ivec2(0, -1)) + cell(ivec2(1, -1));\n                 \n        // Swap pattern every 64 frames\n        float offset = sum > float((1 + iFrame / resetAfter) % 8) ? -0.1 : 0.1;\n        fragColor = vec4(vec3(clamp(self + offset, 0.0, 1.0)), 1.0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const float gridSize = 8.0;","name":"Common","description":"","type":"common"}]}