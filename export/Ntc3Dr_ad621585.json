{"ver":"0.1","info":{"id":"Ntc3Dr","date":"1635954777","viewed":172,"name":"Right Triangle SDF","username":"TheTurk","description":"Distance function for a right triangle. This is the basis for a right triangular prism ([url]https://www.shadertoy.com/view/slcGWn[/url]).","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["distancefield","sdf","triangle","distance","primitive","wedge","righttriangle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float triangle(vec2 position, float halfWidth, float halfHeight) {\n    vec2 e = vec2(halfWidth, -halfHeight);\n    vec2 d = position - e * clamp(dot(position, e) / dot(e, e), -1.0, 1.0);\n    if (max(d.x, d.y) > 0.0) {\n       return length(d);\n    }\n    position += vec2(halfWidth, halfHeight);\n    if (max(position.x, position.y) > 0.0) {\n        return -min(length(d), min(position.x, position.y));\n    }\n    return length(position);\n}\n\n/*\n// alternative version without branching\nfloat triangle(vec2 position, float halfWidth, float halfHeight) {\n    vec2 e = vec2(halfWidth, -halfHeight);\n    vec2 d1 = vec2(-halfWidth - position.x, max(abs(position.y) - halfHeight, 0.0));\n    vec2 d2 = position - e * clamp(dot(position, e) / dot(e, e), -1.0, 1.0);\n    vec2 d3 = vec2(max(abs(position.x) - halfWidth, 0.0), -halfHeight - position.y); \n    return sqrt(min(min(dot(d1, d1), dot(d2, d2)), dot(d3, d3))) * sign(max(max(max(d1.x, d2.x), d2.y), d3.y));\n}\n*/\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 position = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n\n    float halfWidth = 0.7;\n    float halfHeight = 0.4;\n    float d = triangle(position, halfWidth, halfHeight);\n\n    // same colorization that Inigo Quilez uses in his shaders\n    vec3 color = vec3(1.0) - sign(d) * vec3(0.1, 0.4, 0.7); \n    color *= 1.0 - exp(-4.0 * abs(d)); \n\tcolor *= 0.8 + 0.2 * cos(120.0 * d);\n    color = mix(color, vec3(1.0), 1.0 - smoothstep(0.0, 3.0, (abs(d) - 0.003) * iResolution.y));\n    if (iMouse.z > 0.0) {\n        vec2 mousePosition = (2.0 * iMouse.xy - iResolution.xy) / iResolution.y;\n        float d = triangle(mousePosition, halfWidth, halfHeight);\n        color = mix(color, vec3(1.0, 1.0, 0.0), 1.0 - smoothstep(0.0, 3.0, abs(length(position - mousePosition) - abs(d)) * iResolution.y - 1.0));\n    }\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}