{"ver":"0.1","info":{"id":"MfBSRR","date":"1707153367","viewed":84,"name":"depth test","username":"BlueMoonJune","description":"showing rendering meshes with depth testing","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["test","depth"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 light = vec3(0.5, -0.5, 1.5);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n    light.x = sin(iTime)*0.5;\n    light.z = cos(iTime)*0.5;\n\n    fragColor = texture(iChannel1, uv).xxxx;\n    //fragColor.y = 0.0;\n    float curDepth = 0.0;\n    bool firstRendered = false;\n\n    float t = iTime;\n    mat4 rot = mat4(\n        sin(t),  0, cos(t), 0,\n        0,       1, 0,      0,\n        -cos(t), 0, sin(t), 0,\n        0,       0, 0,      1\n    );\n    float tV = sin(iTime)*0.5+asin(1.0);\n    mat4 tilt = mat4(\n        1, 0, 0, 0,\n        0, sin(tV), cos(tV), 0,\n        0, -cos(tV), sin(tV), 0,\n        0, 0, 0, 1\n    );\n    mat4 off = mat4(\n        0.5,  0.0,  0.0, -0.9,\n        0.0,  -0.5,  0.0, -0.5,\n        0.0,  0.0,  -0.5,  0.0,\n        0.0,  0.0,  0.0,  1.0\n    );\n    \n    mat4 trans = rot * tilt * -off;\n    \n    mat3 basis = mat3(trans);\n\n    for (int t = 0; t < indices.length(); t += 3) {\n        bool inTri = true;\n        vec3 a = apMat(triVert(t, 0), trans);\n        vec3 b = apMat(triVert(t, 1), trans);\n        vec3 c = apMat(triVert(t, 2), trans);\n        float det = (b.y-c.y)*(a.x-c.x) + (c.x-b.x)*(a.y-c.y);\n        float l1 = ((b.y-c.y)*(uv.x-c.x)+(c.x-b.x)*(uv.y-c.y)) / det;\n        float l2 = ((c.y-a.y)*(uv.x-c.x)+(a.x-c.x)*(uv.y-c.y)) / det;\n        float l3 = 1.0 - l1 - l2;\n        vec3 bary = vec3(l1, l2, l3);\n        if (l1 > 0.0 && l2 > 0.0 && l3 > 0.0) {\n            vec3 pos = apMat(interpTri(vertices, t, bary), trans);\n            if (!firstRendered || pos.z <= curDepth) {\n                //vec2 uv = interpTri(uvs, t, bary);\n                float light = 1.0;\n                fragColor = interpTri(colors, t, bary) * light;\n                firstRendered = true;\n                curDepth = pos.z;\n            }\n        }\n        \n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define vertCount 24\nvec3[] vertices = vec3[] (\n    // Front face\n    vec3(-0.5, -0.5, 0.5),  // Vertex 1\n    vec3( 0.5, -0.5, 0.5),  // Vertex 2\n    vec3( 0.5,  0.5, 0.5),  // Vertex 3\n    vec3(-0.5,  0.5, 0.5),  // Vertex 4\n    \n    // Back face\n    vec3(-0.5, -0.5, -0.5),  // Vertex 5\n    vec3( 0.5, -0.5, -0.5),  // Vertex 6\n    vec3( 0.5,  0.5, -0.5),  // Vertex 7\n    vec3(-0.5,  0.5, -0.5),  // Vertex 8\n\n    // Right face\n    vec3(0.5, -0.5,  0.5),  // Vertex 9\n    vec3(0.5, -0.5, -0.5),  // Vertex 10\n    vec3(0.5,  0.5, -0.5),  // Vertex 11\n    vec3(0.5,  0.5,  0.5),  // Vertex 12\n\n    // Left face\n    vec3(-0.5, -0.5, -0.5),  // Vertex 13\n    vec3(-0.5, -0.5,  0.5),  // Vertex 14\n    vec3(-0.5,  0.5,  0.5),  // Vertex 15\n    vec3(-0.5,  0.5, -0.5),  // Vertex 16\n\n    // Top face\n    vec3(-0.5, 0.5,  0.5),  // Vertex 17\n    vec3( 0.5, 0.5,  0.5),  // Vertex 18\n    vec3( 0.5, 0.5, -0.5),  // Vertex 19\n    vec3(-0.5, 0.5, -0.5),  // Vertex 20\n\n    // Bottom face\n    vec3(-0.5, -0.5, -0.5),  // Vertex 21\n    vec3( 0.5, -0.5, -0.5),  // Vertex 22\n    vec3( 0.5, -0.5,  0.5),  // Vertex 23\n    vec3(-0.5, -0.5,  0.5)   // Vertex 24\n);\n\nvec3[] normals = vec3[](\n    // Front face\n    vec3(0.0, 0.0, 1.0),  // Vertex 1\n    vec3(0.0, 0.0, 1.0),  // Vertex 2\n    vec3(0.0, 0.0, 1.0),  // Vertex 3\n    vec3(0.0, 0.0, 1.0),  // Vertex 4\n\n    // Back face\n    vec3(0.0, 0.0, -1.0),  // Vertex 5\n    vec3(0.0, 0.0, -1.0),  // Vertex 6\n    vec3(0.0, 0.0, -1.0),  // Vertex 7\n    vec3(0.0, 0.0, -1.0),  // Vertex 8\n\n    // Right face\n    vec3(1.0, 0.0, 0.0),  // Vertex 9\n    vec3(1.0, 0.0, 0.0),  // Vertex 10\n    vec3(1.0, 0.0, 0.0),  // Vertex 11\n    vec3(1.0, 0.0, 0.0),  // Vertex 12\n\n    // Left face\n    vec3(-1.0, 0.0, 0.0),  // Vertex 13\n    vec3(-1.0, 0.0, 0.0),  // Vertex 14\n    vec3(-1.0, 0.0, 0.0),  // Vertex 15\n    vec3(-1.0, 0.0, 0.0),  // Vertex 16\n\n    // Top face\n    vec3(0.0, 1.0, 0.0),  // Vertex 17\n    vec3(0.0, 1.0, 0.0),  // Vertex 18\n    vec3(0.0, 1.0, 0.0),  // Vertex 19\n    vec3(0.0, 1.0, 0.0),  // Vertex 20\n\n    // Bottom face\n    vec3(0.0, -1.0, 0.0),  // Vertex 21\n    vec3(0.0, -1.0, 0.0),  // Vertex 22\n    vec3(0.0, -1.0, 0.0),  // Vertex 23\n    vec3(0.0, -1.0, 0.0)   // Vertex 24\n);\n\nvec4[] colors = vec4[vertCount] (\n    vec4(0, 1, 1, 1),\n    vec4(0, 0, 1, 1),\n    vec4(1, 0, 1, 1),\n    vec4(1, 1, 1, 1),\n    vec4(0, 0, 1, 1),\n    vec4(0, 1, 1, 1),\n    vec4(1, 1, 1, 1),\n    vec4(1, 0, 1, 1),\n    vec4(0, 0, 1, 1),\n    vec4(0, 1, 1, 1),\n    vec4(1, 1, 1, 1),\n    vec4(1, 0, 1, 1),\n    vec4(0, 0, 1, 1),\n    vec4(0, 1, 1, 1),\n    vec4(1, 1, 1, 1),\n    vec4(1, 0, 1, 1),\n    vec4(1, 1, 1, 1),\n    vec4(1, 0, 1, 1),\n    vec4(1, 1, 1, 1),\n    vec4(1, 0, 1, 1),\n    vec4(0, 0, 1, 1),\n    vec4(0, 1, 1, 1),\n    vec4(0, 0, 1, 1),\n    vec4(0, 1, 1, 1)\n);\n\n/*\nvec3[] normals = vec3[vertCount] (\n    vec3(-1, -1, -1),\n    vec3( 1, -1, -1),\n    vec3(-1,  1, -1),\n    vec3( 1,  1, -1),\n    vec3(-1, -1,  1),\n    vec3( 1, -1,  1),\n    vec3(-1,  1,  1),\n    vec3( 1,  1,  1),\n    vec3(-1, -1, -1),\n    vec3( 1, -1, -1),\n    vec3(-1,  1, -1),\n    vec3( 1,  1, -1),\n    vec3(-1, -1,  1),\n    vec3( 1, -1,  1),\n    vec3(-1,  1,  1),\n    vec3( 1,  1,  1)\n);\n*/\n/*\nvec2[] uvs = vec2[vertCount] (\n    vec2(0.0, 0.0),\n    vec2(1.0, 0.0),\n    vec2(0.0, 1.0),\n    vec2(1.0, 1.0),\n    vec2(0.0, 0.0),\n    vec2(1.0, 0.0),\n    vec2(0.0, 1.0),\n    vec2(1.0, 1.0)\n);\n*/\n\nint[] indices = int[](\n    // Front face\n    0, 1, 2,\n    2, 3, 0,\n\n    // Back face\n    4, 5, 6,\n    6, 7, 4,\n\n    // Right face\n    8, 9, 10,\n    10, 11, 8,\n\n    // Left face\n    12, 13, 14,\n    14, 15, 12,\n\n    // Top face\n    16, 17, 18,\n    18, 19, 16,\n\n    // Bottom face\n    20, 21, 22,\n    22, 23, 20\n);\n\n/*\nint[] indices = int[] (\n    0, 1, 2, 1, 2, 3,\n    4, 5, 6, 5, 6, 7,\n    0, 1, 4, 1, 4, 5,\n    0, 2, 4, 2, 4, 6,\n    1, 3, 5, 3, 5, 7,\n    2, 3, 6, 3, 6, 7,\n    \n    8, 9,10, 9,10,11,\n   12,13,14,13,14,15,\n    8, 9,12, 9,12,13,\n    8,10,12,10,12,14,\n    9,11,13,11,13,15,\n   10,11,14,11,14,15\n);\n*/\n\nvec3 triVert(int tri, int i) {\n    \n\n    return vertices[indices[tri+i]];\n}\n\nvec2 interpTri(vec2[vertCount] data, int tri, vec3 bary) {\n    vec2 a = data[indices[tri+0]];\n    vec2 b = data[indices[tri+1]];\n    vec2 c = data[indices[tri+2]];\n    return a*bary.x+b*bary.y+c*bary.z;   \n}\n\nvec3 interpTri(vec3[vertCount] data, int tri, vec3 bary) {\n    vec3 a = data[indices[tri+0]];\n    vec3 b = data[indices[tri+1]];\n    vec3 c = data[indices[tri+2]];\n    return a*bary.x+b*bary.y+c*bary.z;   \n}\n\nvec4 interpTri(vec4[vertCount] data, int tri, vec3 bary) {\n    vec4 a = data[indices[tri+0]];\n    vec4 b = data[indices[tri+1]];\n    vec4 c = data[indices[tri+2]];\n    return a*bary.x+b*bary.y+c*bary.z;   \n}\n\nvec3 apMat(vec3 vec, mat4 mat) {\n    return (vec4(vec, 1.0) * mat).xyz;\n}\n\n","name":"Common","description":"","type":"common"}]}