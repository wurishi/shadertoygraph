{"ver":"0.1","info":{"id":"MXlXDn","date":"1709390252","viewed":151,"name":"CARTOON STARS","username":"archon","description":"hi","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["cartoon","star","universe"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n\nfloat Hash21(vec2 p) {\n    p = fract(p * vec2(123.34, 456.21));\n    p += dot(p, p + 45.32);\n    return fract(p.x * p.y);\n}\n\nvec3 star(vec2 uv, float size) {\n    float t = length(uv); \n    float m = 0.12 / t; \n    \n    float angle = radians(180.0) + iTime * radians(9.0);\n      mat2 rotate = mat2(cos(angle), -sin(angle),\n      sin(angle), cos(angle));\n      uv = rotate * uv;\n    \n    size = 0.2;\n    uv.x = abs(uv.x);\n    float w = 10.0/iResolution.y ;\n    float a = 6.2832 / 5.;\n    float d1 = dot(uv, vec2(sin(a), cos(a)));\n    a = 3. * 6.2832 / 5.;\n    float d2 = dot(uv, vec2(sin(a), cos(a)));\n    float d3 = dot(uv, vec2(0, 1));\n    a = 2. * 6.2832 /5.;\n    float d4 = dot(uv, vec2(sin(a), cos(a)));\n    float d = min(max(d1, d2), max(uv.y, d4));\n    float s = smoothstep(w, -w, d - size * m);\n    m *= smoothstep(2., 0.1, d * m);\n    \n    float brig = 0.4;\n    \n    // Color de la estrella (opcional, se puede eliminar si no se quiere establecer un color fijo)\n    vec3 starColor = vec3(1.0, 1.0, 1.0); // Blanco\n    \n    // Aplica brillo multiplicando por un factor de brillo\n    vec3 finalColor = starColor * brig * s;\n    \n    return finalColor;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    uv *= 10.0; // Aumentar la escala\n\n    // Time varying pixel color\n    vec2 gv = fract(uv) - 0.5;\n    float d = length(uv);\n    vec2 id = floor(uv);\n\n    vec3 col = vec3(0);\n\n    for (int y = -1; y <= 2; y++) {\n        for (int x = -1; x < 2; x++) {\n            float t = length(uv);\n            float m = .01/t;\n            vec2 offs = vec2(x, y);\n            float n = Hash21(id + offs);\n            // twinkle THANKS FABRICENEYRET2\n             if ( cos(1e3*length(id + offs)+ 0.2*iTime + n ) >.99 ) continue;\n            \n            float size = fract(n * 345.32);\n            \n            //star color bri\n            \n            float brillo = 1.0; \n            \n            vec3 Star = star(gv - offs - vec2(n, fract(n * 324.0)) + 0.1, smoothstep(.1, .2, size));\n            vec3 starcolor = sin(vec3(0.2,0.3,0.9)*fract(n*2345.2)*6.2831 * iTime)* .5 + .9 * brillo;\n            starcolor += starcolor*vec3(1.,.5,.1 + size);\n            col += Star * size * starcolor;\n        }\n    }\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}