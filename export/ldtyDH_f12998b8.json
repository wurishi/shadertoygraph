{"ver":"0.1","info":{"id":"ldtyDH","date":"1518773416","viewed":254,"name":"Colorizer","username":"JoshuaBatty","description":"Colorizer","likes":1,"published":1,"flags":2,"usePreview":0,"tags":["colorizer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float eps = 0.0000001;\n\nvec3 rgb2hsv( in vec3 c)\n{\n    vec4 k = vec4(0.0, -1.0/3.0, 2.0/3.0, -1.0);\n    vec4 p = mix(vec4(c.zy, k.wz), vec4(c.yz, k.xy), (c.z<c.y) ? 1.0 : 0.0);\n    vec4 q = mix(vec4(p.xyw, c.x), vec4(c.x, p.yzx), (p.x<c.x) ? 1.0 : 0.0);\n    float d = q.x - min(q.w, q.y);\n    return vec3(abs(q.z + (q.w - q.y) / (6.0*d+eps)), d / (q.x+eps), q.x);\n}\n\nvec3 rgb2hsl( vec3 col )\n{\n    float minc = min( col.r, min(col.g, col.b) );\n    float maxc = max( col.r, max(col.g, col.b) );\n    vec3  mask = step(col.grr,col.rgb) * step(col.bbg,col.rgb);\n    vec3 h = mask * (vec3(0.0,2.0,4.0) + (col.gbr-col.brg)/(maxc-minc + eps)) / 6.0;\n    return vec3( fract( 1.0 + h.x + h.y + h.z ),              // H\n                 (maxc-minc)/(1.0-abs(minc+maxc-1.0) + eps),  // S\n                 (minc+maxc)*0.5 );                           // L\n}\n\nvec3 hsl2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n\tvec4 colours[8];\n\tcolours[0] = vec4(0.255,0.745,0.670,1.0); // aqua\n\tcolours[1] = vec4(0.235,0.596,0.807,1.0); // blue\n\tcolours[2] = vec4(0.545,0.411,0.827,1.0); // light pu\n\tcolours[3] = vec4(0.149,0.133,0.384,1.0); // dark pur\n\tcolours[4] = vec4(0.305,0.658,0.239,1.0); // green\n\tcolours[5] = vec4(0.494,0.098,0.286,1.0); // mitch ma\n\tcolours[6] = vec4(0.000,0.607,0.490,1.0); // aqua gre\n\tcolours[7] = vec4(0.784,0.180,0.152,1.0); // orange\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 tex = texture(iChannel0,uv).rgb;\n\n    vec3 hsl = rgb2hsl(tex);\n    \n    vec3 final_tex;\n    \n    int closest = 0;\n    float closest_diff = 1000.0;\n    vec3 closest_hsl = vec3(0.0);\n    float closest_hue = 0.0;\n    float closest_sat = 0.0;\n    for(int i = 0; i < 8; i++){\n    \tvec3 colours_hsl = rgb2hsl(colours[i].rgb); \n        \n        float hue_diff = abs(colours_hsl.r - hsl.r);\n        hue_diff = min(hue_diff, abs(hue_diff - 1.0));\n        float diff = hue_diff\n            + abs(colours_hsl.g - hsl.g)\n            + abs(colours_hsl.b - hsl.b);\n        if (diff < closest_diff) {\n            closest = i;\n            closest_diff = diff;\n            closest_hsl = colours_hsl;\n        }\n    }\n    \n    hsl.r = closest_hsl.r;\n    hsl.g = closest_hsl.g;\n    //hsl.b = closest_hsl.b;\n    final_tex = hsl2rgb(hsl);\n    //final_tex = colours[closest].rgb;\n    //final_tex = tex;\n    // Output to screen\n    fragColor = vec4(final_tex,1.0);\n}","name":"Image","description":"","type":"image"}]}