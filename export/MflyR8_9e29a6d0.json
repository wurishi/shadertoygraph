{"ver":"0.1","info":{"id":"MflyR8","date":"1720794407","viewed":39,"name":"4D Raymarching Experiment","username":"cancrizans","description":"Not clean, not efficient, not even sure if correct. Hypercubic lattice of duocylinders ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","4d","hypercube","duocylinder"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float spheres_DE(vec3 p){\n    vec3 fp = fract(p) - 0.5;\n    \n    return sqrt(dot(fp,fp)) - 0.2;\n\n}\n\nfloat spheres_4DE(vec4 p){\n    vec4 fp = fract(p) - 0.5;\n    \n    return sqrt(dot(fp,fp)) - 0.2;\n\n}\n\nfloat duocyl_4DE(vec4 p){\n    vec4 fp = fract(p) - 0.5;\n    \n    float dxy = length(fp.xy) - 0.2;\n    float dzw = length(fp.wz) - 0.2;\n    return max(dxy,dzw);\n\n}\n\nconst int MAXIT = 60;\nconst float INVMAXIT = 2.0/float(MAXIT);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - iResolution.xy*.5)/iResolution.y;\n\n    vec4 point = vec4(3.0*cos(iTime*0.0324),0.0,0.0,5.*sin(iTime*0.04));\n    \n    float ang = iTime*0.1;\n    float ang2 = iTime * 0.0663;\n    \n    float s = sin(ang);\n    float c = cos(ang);\n    float s_2 = sin(ang2);\n    float c_2  = cos(ang2);\n    \n    vec4 dir = normalize(vec4(\n            uv.x * c_2 + s * s_2,\n            uv.y,\n            c,\n            s * c_2 - uv.x * s_2\n            ));\n    float dist = 0.0;\n    \n    \n    int it = 0;\n    for(; it < MAXIT; it++){\n        float DE = duocyl_4DE(point);\n        if(DE < 0.0001)break;\n        \n        \n        \n        point += dir * DE;\n        dist += DE;\n    }\n    \n    \n    float fog = exp( - float(max(it-5,0)) * INVMAXIT );\n    \n    \n    \n    \n\n\n    // Time varying pixel color\n    vec3 col = vec3(fog,fog,fog);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}