{"ver":"0.1","info":{"id":"4ty3zw","date":"1473716938","viewed":200,"name":"flyingnoisylines","username":"Zoz","description":"them curves","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","lines"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.14159\n#define time iTime\nmat3 rotz(float t){\n     return mat3( cos(t),  -sin(t), 0,\n       \t          sin(t),   cos(t), 0,\n\t\t  \t\t  0,        0 ,     1);\n}\nmat3 roty(float t){\n    return  mat3( cos(t),  0,  sin(t),\n     \t    \t  0,       1,  0,\n           \t      -sin(t), 0,  cos(t)); \n\n}\n\nmat3 rotx(float t){\n     return mat3( 1, 0 ,      0,\n            \t  0, cos(t), -sin(t),\n\t   \t  \t      0, sin(t),  cos(t));\n}\n\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n\nfloat noise( in vec2 p ) {\n    vec2 i = floor( p );\n    vec2 f = fract( p );\t\n\tvec2 u = f*f*(3.0-2.0*f);\n    return -1.0+2.0*mix( mix( rand( i + vec2(0.0,0.0) ), \n                     rand( i + vec2(1.0,0.0) ), u.x),\n                mix( rand( i + vec2(0.0,1.0) ), \n                     rand( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\nfloat sdLine( vec3 p, vec3 a, vec3 b, float r )\n{\n    p.y -= noise(p.xz);\n    //p.y -= noise(p.xz * 10.) * .1;\n    \n    //jumpy jump\n    float R = .5 + .2 * sin(iTime * 5.);\n    //float x = mod(p.x + iTime, 20. + p.z) - .5 * 20.;\n    float x = 0.;\n    //p.y -= abs(R/2. - abs(.5 * x)) - abs(0.5 * x) + R/2.;\n    \n    //sdLine\n    p.z = mod(p.z, 2.) - .5 * 2.;\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\nfloat map(vec3 p) {\n\tfloat k = 1.3, r = 0.03;\n    //noisy intro and outro\n    float x = rand(vec2(p.z)) * 10.;\n    \n    //start and end point\n    vec3 p1 = vec3(3. - mod(time * 10., 52.) + x, -1.5, 0.);\n    vec3 p2 = vec3(0., 1., 0.);\n    vec3 p3 = vec3(40. - mod(time * 10., 52.) + x, -1.5, 0.);\n    \n\n    k = min(k, sdLine(p, p1, p3, r + .1 * sin(time + p.x)));\n    return k;\n}\n\nfloat render(vec3 o, vec3 r) {\n \tfloat k = 0.;\n    for (int i = 0; i < 40; i++) {\n     \tvec3 p = o + r * k;\n        float m = map(p);\n        k += m * .5;\n    }\n    return k;\n}\n\nvec3 shade(vec3 o, vec3 r, float k) {\n    vec3 p = o + r * k;\n    \n    vec3 c = vec3(1. / (k * k *.012));\n    c = mix(vec3(0.), c, smoothstep(20., 17., k));\n    return c * normalize(vec3(p.x, p.y, 0.) + 2.);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 o = vec3(0., 0., -2.);\n    vec3 r = normalize(vec3(uv, 2.));\n    \n  \t//o *= roty(pi /4.);\n    //\tr *= roty(pi /4.);\n\n    \n    float k = render(o, r);\n    \n\n\tfragColor = vec4(shade(o, r, k), 1.);\n}","name":"Image","description":"","type":"image"}]}