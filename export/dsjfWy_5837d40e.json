{"ver":"0.1","info":{"id":"dsjfWy","date":"1690112939","viewed":34,"name":"hexagon_pattern_art_of_code","username":"Andrej730","description":"ref https://www.youtube.com/watch?v=VmrIDyYiJBA","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["hexagon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec2 D = vec2(1, 1.73); // hexagon diagonal\nconst vec2 R = D * 0.5; // hexagon radius\n\nfloat HexDist(vec2 p) {\n    // returns the distance from the hexagon center\n\tp = abs(p);\n    \n    float c = dot(p, normalize(D));\n    c = max(c, p.x); // не строчка, а отвал пизды.\n    return c;\n}\n\nvec4 HexCoords(vec2 uv) {\n    // return hex uv and hex cell id\n    // fract(x) == mod(x, 1)\n    vec2 a = mod(uv, D) - R;\n    vec2 b = mod(uv-R, D) - R;\n    \n    // smarter than compiler, hehe\n    vec2 gv = dot(a, a) < dot(b,b) ? a : b;\n    \n    // clockwise angle\n    float x = atan(gv.x, gv.y);\n    \n    // since we know hexagon radius value\n    // we invert the distance from the center\n    // to get the distance from the edge\n    float y = R.x - HexDist(gv);\n\n    vec2 id = uv-gv;\n    return vec4(x, y, id.x,id.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    uv *= 5.;\n    \n    // col += step(HexDist(b), .2);\n    vec4 hc = HexCoords(uv);\n    \n    // Q: why middle line is changing that way?\n    float c = smoothstep(.01, 0.03, hc.y * sin(hc.z*hc.w+iTime));\n    \n    col += c;\n    \n    // col = vec3(hc.z*hc.w); // Q: why it becomes brighter?\n    fragColor = vec4(col,1.0);\n}\n\n// Q: why he choosing this triangle and then flipping it??\n// https://youtu.be/VmrIDyYiJBA?t=305\n","name":"Image","description":"","type":"image"}]}