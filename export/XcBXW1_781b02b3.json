{"ver":"0.1","info":{"id":"XcBXW1","date":"1706244445","viewed":35,"name":"zy ray marching test","username":"xu_wenjun118","description":"ray marching ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define SURF_DIST 0.01\n\nfloat GetDist(vec3 p) {\n    // 定义球的位置和半径\n    vec4 s = vec4(0, 1, 6, 1);\n    // 到球的距离\n    float sphereDist = length(p - s.xyz) - s.w;\n    // 到平面的距离\n    float planeDist = p.y;\n    float d = min(sphereDist, planeDist);\n    return d;\n    \n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n    float d0 = 0.0;\n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd * d0;\n        float ds = GetDist(p);\n        d0 += ds;\n        if (d0 > MAX_DIST || ds < SURF_DIST) {\n            break;\n        }\n    }\n    return d0;\n}\n\n// 法线计算参考这篇文章https://iquilezles.org/articles/normalsSDF/\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p);\n    vec2 e = vec2(0.01, 0);\n    vec3 n = vec3(\n        d - GetDist(p - e.xyy),\n        d - GetDist(p - e.yxy),\n        d - GetDist(p - e.yyx)\n    );\n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n    // 定义光源位置\n    vec3 lightPos = vec3(0, 5, 6);\n    lightPos.xz += vec2(sin(iTime), cos(iTime)) * 2.0;\n    vec3 l = normalize(lightPos - p);\n    vec3 n = GetNormal(p);\n    float dif = clamp(dot(l, n), 0.0, 1.0);\n    // 计算点沿着光源的距离\n    // 注意这里要加一个偏移，因为p点已经是交点了，如果不加偏移会有问题\n    float d = RayMarch(p + n * SURF_DIST * 1.1, l);\n    // 如果距离小于点到光源的距离，则说明该点在阴影中\n    if (d < length(lightPos - p)) dif *= 0.1;\n    \n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    // 定义相机的位置\n    vec3 ro = vec3(0, 1, 0);\n    // 定义光线的方向\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1.0));\n    float d = RayMarch(ro, rd);\n    vec3 p = ro + rd * d;\n    float dif = GetLight(p);\n    vec3 col = vec3(dif * 0.5, dif * 1.0, dif * 1.0);\n   \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}