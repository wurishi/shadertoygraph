{"ver":"0.1","info":{"id":"wltfRH","date":"1612277689","viewed":56,"name":"2d-hex2.frag","username":"jorge2017a1","description":"2d-hex2.frag","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2dhex2frag"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//\n// Hexagon outlines\n//\n\nconst vec2 T0 = vec2( 0.0, 0.0 );\nconst vec2 T1 = vec2( 0.25 * sqrt(3.0), 0.25 );\nconst vec2 T2 = vec2( 0.25 * sqrt(3.0), -0.25 );\nconst vec2 T3 = T1 + T2;\nconst mat2 B = mat2( T1, T2 );\nconst mat2 CB = inverse( B );\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 wpos=uv*4.00;\n    vec4 col;\n    \n\tvec2 p = CB * wpos;\n\tvec2 fp = floor(p);\n\tvec2 r = p - fp;\n\n\tif( r.x + r.y > 1.0 ) {\n\t\tr = vec2(1.0,1.0) - r;\n\t}\n\t\t\n\tvec2 sr = B * r;\n\n\tfloat d1 = distance( sr, vec2( 0.0, 0.0 ) );\n\tfloat d2 = distance( sr, T1 );\n\tfloat d3 = distance( sr, T2 );\n\tfloat dmin = min( min(d1,d2), d3 );\n\n\tfloat ds = max( max( min(d1,d2), min(d2,d3) ), min(d1,d3) );\n\n\tif( abs(dmin - ds) < 0.05 ) {\n\t\tcol = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t} else {\n\t\tcol = vec4( 1.0, 1.0, 1.0, 1.0 );\n\t}\n    \n    fragColor = col;\n}\n\n\n","name":"Image","description":"","type":"image"}]}