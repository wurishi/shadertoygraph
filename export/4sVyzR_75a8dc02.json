{"ver":"0.1","info":{"id":"4sVyzR","date":"1520841253","viewed":664,"name":"Fast surface blur","username":"rinsor","description":"Itterative surface blur based on Gaussian blur. Press space to reset. Drag mouse left/right to see original and blured image","likes":3,"published":1,"flags":48,"usePreview":0,"tags":["blur","image"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0,uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Sobel edge detection from https://gist.github.com/Hebali/6ebfc66106459aacee6a9fac029d0115\n#define texture2D texture\n\nvoid make_kernel(inout vec4 n[9], sampler2D tex, vec2 coord)\n{\n\tfloat w = 1.0 / iResolution.x;\n\tfloat h = 1.0 / iResolution.y;\n\n\tn[0] = texture2D(tex, coord + vec2( -w, -h));\n\tn[1] = texture2D(tex, coord + vec2(0.0, -h));\n\tn[2] = texture2D(tex, coord + vec2(  w, -h));\n\tn[3] = texture2D(tex, coord + vec2( -w, 0.0));\n\tn[4] = texture2D(tex, coord);\n\tn[5] = texture2D(tex, coord + vec2(  w, 0.0));\n\tn[6] = texture2D(tex, coord + vec2( -w, h));\n\tn[7] = texture2D(tex, coord + vec2(0.0, h));\n\tn[8] = texture2D(tex, coord + vec2(  w, h));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec4 n[9];\n\tmake_kernel( n, iChannel0, fragCoord/iResolution.xy );\n\n\tvec4 sobel_edge_h = n[2] + (2.0*n[5]) + n[8] - (n[0] + (2.0*n[3]) + n[6]);\n  \tvec4 sobel_edge_v = n[0] + (2.0*n[1]) + n[2] - (n[6] + (2.0*n[7]) + n[8]);\n\tvec4 sobel = sqrt((sobel_edge_h * sobel_edge_h) + (sobel_edge_v * sobel_edge_v));\n    \n    fragColor = vec4(clamp((sobel.rgb),0.0,1.0),1.0);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"bool space() {\n    return texture(iChannel3, vec2(32.5/256.0, 0.5) ).x > 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 init = texture(iChannel2,uv);\n    vec3 result;\n    if(init == vec4(0.0)|| space()){\n        result = fastSurfaceBlur(iChannel0,iChannel1,fragCoord/iResolution.xy,vec2(1.0/iResolution.x,0.0)).rgb;\n    }\n    else{\n        result = fastSurfaceBlur(iChannel2,iChannel1,fragCoord/iResolution.xy,vec2(1.0/iResolution.x,0.0)).rgb;\n    } \n    fragColor = vec4(result.rgb,1.0);\n}\n","name":"Buf B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define kernelSize 5\n#define halfKernelSize 2\n\n#define blurStrength 1.0\n#define blurEdge 0.3\n\nvec3 fastSurfaceBlur( sampler2D inputColor, sampler2D inputEdge, vec2 uv, vec2 blurStep)\n{\n\t// Normalized gauss kernel\n\tfloat blurKernel[kernelSize] = float[kernelSize](\n\t\t0.06136, 0.24477, 0.38774, 0.24477, 0.06136\n   \t);\n\t\n\tvec3 result = blurEdge*blurKernel[halfKernelSize]*texture(inputColor,uv).rgb;\n\tfloat norma = blurEdge*blurKernel[halfKernelSize];\n\t\n\tfloat mainEdge = texture(inputEdge,uv).x;\n\t\n\t// Right direction\n\tfloat weight = blurEdge;\n\tfor(int i = 1; i<halfKernelSize; i++){\n\t\tvec2 currentPos = uv+float(i)*blurStep;\n\t\t\n\t\tweight-=abs(texture(inputEdge,currentPos).x-mainEdge)/blurStrength;\n\t\tif(weight<=0.0) break;\n\t\t\n\t\tfloat coef = weight*blurKernel[halfKernelSize+i];\n\t\tresult+=coef*texture(inputColor,currentPos).rgb;\n\t\tnorma+=coef;\n\t}\n\t// Left direction\n\tweight = blurEdge;\n\tfor(int i = 1; i<halfKernelSize; i++){\n\t\tvec2 currentPos = uv-float(i)*blurStep;\n\t\t\n\t\tweight-=abs(texture(inputEdge,currentPos).x-mainEdge)/blurStrength;\n\t\tif(weight<=0.0) break;\n\t\t\n\t\tfloat coef = weight*blurKernel[halfKernelSize-i];\n\t\tresult+=coef*texture(inputColor,currentPos).rgb;\n\t\tnorma+=coef;\n\t}\n    return result/norma;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 originColor = texture(iChannel0,uv).rgb;\n    vec3 bluredColor = fastSurfaceBlur(iChannel2,iChannel1,fragCoord/iResolution.xy,vec2(0.0,1.0/iResolution.y)).rgb;\n    \n    float edge = texture(iChannel1,uv).r;\n    edge = pow(edge,2.0);\n    bluredColor = mix(bluredColor,originColor,edge);\n    \n\tvec3 finalColor = fragCoord.x>iMouse.x?originColor:bluredColor;\n    fragColor = vec4(finalColor,1.0);\n}","name":"Buf C","description":"","type":"buffer"}]}