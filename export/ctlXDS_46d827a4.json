{"ver":"0.1","info":{"id":"ctlXDS","date":"1675297448","viewed":110,"name":"Lambert W function","username":"scholarius","description":"The real-valued branches of LambertW function.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["approximation","function","lambertw"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// The real-valued branches of LambertW function:\n// x returns the principal branch\n// y returns the -1 branch\n\n// Relevant Wiki:\n// https://en.wikipedia.org/wiki/Lambert_W_function\n\n// I adapted the iteration scheme from here (eq 14):\n// https://analyticphysics.com/Special%20Functions/Analytic%20Approximations%20to%20the%20Lambert%20W%20Function.htm\n\n// See also: Wright Omega approximation\n// https://www.shadertoy.com/view/ctlXDS\n\n\nvec2 lambertW( float x )\n{\n    vec2 y;\n    y.x = x < 2. ? x / ( 1. + x ) : log(x) - log( log(x) );\n    y.y = log(-x) - log( -log(-x) );\n    for( int i = 0; i < 6; ++i )\n        y = x * ( 1. + y ) / ( x + exp(y) );\n    return y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 4. * ( fragCoord - iResolution.xy / 2. ) / iResolution.y;\n    uv.y--;\n\tfloat x = uv.x;    \n    vec2 y = lambertW(x);\n    vec2 invddx = x + exp(y);\n    \n    vec3 d = vec3(1.);\n    d.x = min( d.x, .875 + .03125 * iResolution.y * abs( uv.y - round( uv.y * 10. ) / 10. ) );\n    d.x = min( d.x, .875 + .03125 * iResolution.y * abs( uv.x - round( uv.x * 10. ) / 10. ) );\n    d.x = min( d.x, .5 + .125 * iResolution.y * abs( uv.y - round( uv.y ) ) );\n    d.x = min( d.x, .5 + .125 * iResolution.y * abs( uv.x - round( uv.x ) ) );\n\n    if( x >= -exp( -1. ) )\n        d.y = min( d.y, -.5 + .25 * iResolution.y * abs( y.x - uv.y ) * min( 1., abs( invddx.x ) ) );  \n\n    if( x >= -exp( -1. ) && x < 0. )\n        d.z = min( d.z, -.5 + .25 * iResolution.y * abs( y.y - uv.y ) * min( 1., abs( invddx.y ) ) );  \n\n    fragColor.xyz = vec3( clamp( 0., 1., d.x ) );\n    fragColor.xyz = mix( vec3(1,0,0), fragColor.xyz, clamp( d.y, 0., 1. ) );\n    fragColor.xyz = mix( vec3(0,.5,1), fragColor.xyz, clamp( d.z, 0., 1. ) );\n    fragColor.xyz = pow( fragColor.xyz, vec3(0.4545) );\n}\n","name":"Image","description":"","type":"image"}]}