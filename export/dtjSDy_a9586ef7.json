{"ver":"0.1","info":{"id":"dtjSDy","date":"1676555760","viewed":213,"name":"Rymrchng⛳️","username":"01000001","description":"shadr smol\n\nSee https://www.shadertoy.com/view/NltfzM for explanation","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["golf","minified"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*// New version by spalmer. -57 !!!!!!!!!!!!!!!\nvoid mainImage(out vec4 o, vec2 p)\n{\n    vec3 q = iResolution, d = normalize(vec3(p - .5 * q.xy, q.y));\n    for (q = -4./q; q.z < 0. && (o.w = length(q) - 1.0) > .01; q += d * o.w);\n    o = q.zzzz + 1.;\n} \n//*/ // but slightly different\n\n\n//*\n// Original by me, helped by Dave_Hoskins\nvoid mainImage(out vec4 O, vec2 U){\n    float a=2.,d=a,f=0.;\n    vec2 u = (U-iResolution.xy/a)/iResolution.y*a;\n    vec3 p,v = vec3(u.x,1,u.y);\n\n    for(int i=0; i++<99 && f<5. && d>1e-4;\n        p = v*f,\n        d = length(p-vec3(0,a,0))-1.,\n        f += d\n    )\n    O = vec4(f*a-a);\n}\n//*/","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\nChat GPT's attempts to golf the code as small as mine from https://www.shadertoy.com/view/NltfzM\n\nRemove all comments and golf this glsl shadertoy code as small as possible \n\nint m=200;float M=2.,mD=.001;float DF(vec3 p){return length(p)-1.;}void mainImage(out vec4 c,in vec2 f){vec2 u=(f-.5*iResolution.xy)/iResolution.y*2.;float dp=0.;vec3 d=vec3(0.,-2.,0.),v=vec3(u.x,1.,u.y);for(int i=0;i<m;++i){vec3 p=d+v*dp;float dd=DF(p);dp+=dd;if(dp>M||dd<mD)break;}c=vec4(vec3(dp*2.-2.),1.);}\n\n\nYes this works!  Bravo!  This is 310 characters long, do you think you can get it smaller?  As a human, my record is 211 characters.\n\nVery smart. Unfortunately, it creates an error\n'/' : wrong operand types - no operation '/' exists that takes a left-hand operand of type 'in highp 2-component vector of float' and a right operand of type 'uniform highp 3-component vector of float' (or there is no acceptable conversion)\n\n\nfloat D(vec2 p){return length(p)-1.;}void mainImage(out vec4 c,in vec2 f){float m=2.,d=0.,md=.001;vec2 o=vec2(0.,-2.),v=2.*f/iResolution.y-1.;for(int i=0;i<200;++i){float di=D(o+v*d);d+=di;if(d>m||di<md)break;}c=vec4(vec3(d*2.-2.),1.);}\n\n\n\nGood one. This is 236 characters long, even shorter than the first one! it compiles fine, but the sphere is shifted almost off the screen\n\nfloat D(vec2 p){return length(p)-1.;}void mainImage(out vec4 c,in vec2 f){float m=2.,d=0.,md=.001;vec2 o=vec2(0.,-2.),v=vec2(f.x,1.),w=vec2(f.y,1.);v=normalize(v)*w.y;o=2.*f/iResolution.y-1.;for(int i=0;i<200;++i){float di=D(o+v*d);d+=di;if(d>m||di<md)break;}c=vec4(vec3(d*2.-2.),1.);}\n\n\n\nAt this point I gave up. \n\nHuman: 2\n   AI: 1\n\n:D\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/","name":"Common","description":"","type":"common"}]}