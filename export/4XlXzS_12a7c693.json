{"ver":"0.1","info":{"id":"4XlXzS","date":"1709740093","viewed":44,"name":"Mandelbrot Julia","username":"dipwr","description":"Mandelbrot","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"4XsXRS","parentname":"Mandelbrot Diego"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//UI constants:\nconst bool holdMouseToVisualize = false;\n\n//fractal constants:\nvec2 pos = vec2(-0.5,0);\n\nconst int subSteps = 2; //side of perfect square\n\nconst float mandelbrotZoom = float(1);\nconst float juliaZoom = float(3);\n\nconst int mandelbrotIterations = 100;\nconst int juliaIterations = 100;\n\nconst float mandelbrotSaturation = float(1);\nconst float juliaSaturation = float(1.5);\n\nvec2 coordXY(vec2 fragCoord) {\n  vec2 uv = fragCoord.xy / iResolution.xy;\n  \n  float aspectRatio = iResolution.x / iResolution.y;\n\n  vec2 center = (uv - 0.5);\n  center.x *= aspectRatio;\n\n  return center;\n}\n\nfloat fractal(vec2 z, vec2 c, int iterations){\n\n    for (int iteration = 0; iteration < iterations; iteration++) {\n\n      // z <- z^2 + c\n      float real = z.x * z.x - z.y * z.y + c.x;\n      float imaginary = 2.0 * z.x * z.y + c.y;\n  \n      z.x = real;\n      z.y = imaginary;\n\n      if (z.x * z.x + z.y * z.y > 4.0) {\n        return float(iterations-iteration)/float(iterations);\n        break;\n      }\n    }\n    return 0.0;\n}\n\nvec4 subStep(vec2 fragCoord){\n\n  bool mouseDown = false;\n  vec2 mousePos = vec2(0,0);\n  if((iMouse/iResolution.x).z > 0.0 || !holdMouseToVisualize){\n    mouseDown = true;\n    mousePos = iMouse.xy;\n  }\n  \n  float mResultAcc = 0.0;\n  float jResultAcc = 0.0;\n\n  for (int i = 0; i < subSteps*subSteps; i++){\n    \n    float subSize = 1.0/float(subSteps);\n    \n    float subXSize = subSize * float(i % subSteps);\n    float subYSize = subSize * floor(float(i) / float(subSteps));\n    \n    vec2 subCoord = vec2(fragCoord.x + subXSize, fragCoord.y + subYSize);\n    \n    vec2 coordinate = coordXY(subCoord);\n  \n    vec2 z = vec2(0.0, 0.0);\n    vec2 c = coordinate * exp2(mandelbrotZoom) + pos;\n    \n    mResultAcc += fractal(z, c, mandelbrotIterations);\n    \n    if (mouseDown){\n        z = coordinate * juliaZoom;\n        c = coordXY(mousePos) * exp2(mandelbrotZoom) + pos;\n        \n        jResultAcc += fractal(z, c, juliaIterations);\n    }\n    \n  }\n  float mandelbrotColor = (mResultAcc / float(subSteps*subSteps)) * mandelbrotSaturation;\n  float juliaColor = (jResultAcc / float(subSteps*subSteps)) * juliaSaturation;\n  return vec4(0, mandelbrotColor, juliaColor, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n  fragColor = subStep(fragCoord);\n}\n","name":"Image","description":"","type":"image"}]}