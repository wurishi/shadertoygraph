{"ver":"0.1","info":{"id":"lsKSRh","date":"1462958392","viewed":819,"name":"What a World","username":"Draedrus","description":"A world generation, sorry for the code, this is a total trash.\nShader crashes often with Google Chrome.\nOptions : line 5 to 196\nFeatures :\n- Procedural terrain, forests, sky, moon, sun\n- Water (Reflective, Refractive)\n- Cheap clouds\n- (soft)shadows","likes":6,"published":1,"flags":0,"usePreview":1,"tags":["procedural","3d","raymarching","water","sky","aurora","world","islands","forests"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/***********************************************************************\n * author: pierre.plans@gmail.com\n ***********************************************************************/\n\n/**\n * CAMERA BEHAVIOUR RELATED CONSTANTS\n **/\n// By default, the camera is fixed at CAMPOS position and looks straight forward\n// perform a flight over the world\n//#define USE_MARCH\n// camera rotation around TARGETPOS using CAMROTSPEED+CAMDIST, disable USE_MARCH\n//#define SET_CAMERA_TARGET_ROTATION\n// default camera rotation (look around)\n//#define SET_CAMERA_DEFAULT_ROTATION\n// setup the camera to see the sundawn\n#define SET_CAMERA_SUNDOWN\n// setup the camera to see the sunrise\n//#define SET_CAMERA_SUNRISE\n\n//#define SET_NIGHT\n\n/**\n * RENDERING OPTION GLOBALS\n **/\n// wanna see only the depth camera ? Okay !\n//#define USE_DEPTHMODE\n// make the setting more realistic with a few computing performance\n#define USE_SOFTSHADOWS\n// this makes shader crashing under firefox\n//#define USE_SOFTSHADOWS_ON_REFLECTION\n// defines if the algorithm will use a rotating (X axis) light around 0.0, 0.0, 0.0\n// using LIGHTSPEED\n#define USE_LIGHTMOVING\n// defines if the algorithm will use a rotating (Y axis) moon around 0.0, 0.0, 0.0\n// using MOONSPEED\n//#define USE_MOONMOVING\n// defines if the clouds are animated or not, using CLOUDSPEED\n#define USE_ANIMATECLOUDS\n// defines that the algorithm will perform water reflection (costs a lot)\n#define USE_WATER_REFLECTION\n// defines that the algorithm will perform water refraction (costs a few)\n#define USE_WATER_REFRACTION\n// defines that the algorithm will perform day&night simulation\n#define USE_DAYANDNIGHT\n// defines that the algorithm will use a better noise for the star generation\n//#define USE_HD_STARNOISE\n// defines if the algorithm will draw the sun\n#define DRAW_SUN\n// defines if the algorithm will draw the moon\n#define DRAW_MOON\n// old looking lighting without moon light and not accurate lighting\n//#define OLDLIGHTING\n#define USE_BOREALS\n// define if we are going to have more rocks or not\n#define USE_MORE_ROCKY\n// have the mountains noise different from terrain one\n#define USE_HD_MOUNTAIN\n// USE_HD_MOUNTAIN_NOISE has a priority over USE_FAST_HD_TERRAIN_NOISE, so chose only one\n// Use a voronoi 3D noise for the rocky bump map (costs a lot)\n//#define USE_HD_MOUNTAIN_NOISE\n// Use a voronoi 2D noise for the rocky bump map (costs a little bit less than USE_HD_TERRAIN_NOISE)\n#define USE_FAST_HD_MOUNTAIN_NOISE\n// USE_HD_TERRAIN_NOISE has a priority over USE_FAST_HD_TERRAIN_NOISE, so chose only one\n// Use a simplex 3D noise for the terrain bump map (costs a lot)\n//#define USE_HD_TERRAIN_NOISE\n// Use a simplex 2D noise for the terrain bump map (costs a little bit less than USE_HD_TERRAIN_NOISE)\n#define USE_FAST_HD_TERRAIN_NOISE\n\n#define RAYMARCHING_NUM_STEPS 40\n#define RAYMARCHING_REFL_NUM_STEPS 20\n#define RAYMARCHING_REFR_NUM_STEPS 20\n#define SOFTSHADOW_STEPS 8\n\n#define SAND_OCTAVES 6\n#define SAND_GRAINS 1\n#define CAMDIST 8.0\n#define CAMROTSPEED 0.2\n#define LIGHTSPEED 1.0\n#define MOONSPEED 0.5\n#define CLOUDSPEED 0.1\n#define AURORABOREALISSPEED 3.0\n#define FAR 100.0\n#define NEAR 0.002\n\n#define OCTAVES 2\n\n// 0.4 default only for OLDLIGHTING\n#define VAR_REFL_OVER_REFR_PERCT 0.5\n\n#define VAR_MOUNTAIN_LEVEL 5.0\n#define VAR_MOUNTAIN_AMP 8.0\n#define VAR_MOUNTAIN_FREQ 0.2\n#define VAR_MOUNTAIN_LIGHTING_KD 0.4\n#define VAR_MOUNTAIN_LIGHTING_KS 1.5\n/*\n\tA variation I liked, with greater islands/continents\n\n#define VAR_TERRAIN_LEVEL 9.0\n#define VAR_TERRAIN_AMP 12.5\n#define VAR_TERRAIN_FREQ 0.05\n*/\n/*\n\tDefault variation\n#define VAR_TERRAIN_LEVEL 5.0\n#define VAR_TERRAIN_AMP 8.5\n#define VAR_TERRAIN_FREQ 0.2\n*/\n// 5.0\n#define VAR_TERRAIN_LEVEL 5.0\n// 8.5\n#define VAR_TERRAIN_AMP 8.5\n// 0.2\n#define VAR_TERRAIN_FREQ 0.2\n#define VAR_TERRAIN_LIGHTING_KD 1.0\n#define VAR_TERRAIN_LIGHTING_KS 0.0\n#define VAR_TREE_LIGHTING_KD 1.0\n#define VAR_TREE_LIGHTING_KS 0.0\n\n#define VAR_WATER_LEVEL 0.0\n// 0.08 - 0.1 is a good value for VAR_WATER_AMP\n#define VAR_WATER_AMP 0.08\n#define VAR_WATER_FREQ 1.2\n#define VAR_WATER_SPEED 0.8\n#define VAR_WATER_LIGHTING_KD 0.4\n#define VAR_WATER_LIGHTING_KS 1.0\n\n#define VAR_FRESNEL_BIAS 0.2\n#define VAR_FRESNEL_SCALE 1.0\n#define VAR_FRESNEL_POW 2.0\n\n// old\n//#define VAR_MOONRADIUS 1.0\n#define VAR_MOONRADIUS 200.0\n\n#define CAMPOS vec3(0.0, 10.0, 10.0)\n#define TARGETPOS vec3(0.0, 1.0, 0.0)\n// old\n#define ASTRALMAXDIST 4000.0\n//#define MOONPOS vec3(-10.0, 20.0, 50.0)\n#define MOONPOS normalize(vec3(4000.0, 400.0, 2000.0))*ASTRALMAXDIST\n#define LIGHTPOS normalize(vec3(-2000.0, 2000.0, -2000.0))*ASTRALMAXDIST\n\n//#define COLORROCK vec3(0.5, 0.5, 0.6)\n#define COLORROCK vec3(0.8, 0.8, 0.7)\n#define COLORGRASS vec3(0.5, 0.7, 0.5)\n#define COLORTREE vec3(0.0, 0.2, 0.0)\n#define COLORSAND vec3(0.9, 0.9, 0.5)\n#define COLORWATER vec3(0.1, 0.5, 0.7)\n#define COLORSKYDAY vec3(0.5, 0.5, 1.0)\n#define COLORSKYDAWN vec3(1.0, 0.6, 0.5)\n#define COLORSKYNIGHT vec3(0.1, 0.2, 0.4)\n\n#define TYPE_TERRAIN 0.0\n#define TYPE_WATER 1.0\n#define TYPE_TREES 2.0\n#define TYPE_MOUNTAIN 3.0\n\nstruct Light {\n    vec3 o;\n    vec3 d;\n    vec4 diffuseColor;\n    float shininess;\n\tfloat power;\n};\n    \n#ifdef OLDLIGHTING\n\nLight _light = Light(\n    LIGHTPOS,\n    normalize(TARGETPOS-LIGHTPOS),\n    vec4(1.0, 1.0, 1.0, 1.0),\n    16.01,\n    1.5);\n\nLight _moon = Light(\n    MOONPOS,\n    normalize(TARGETPOS-MOONPOS),\n    vec4(1.0, 1.0, 1.0, 1.0),\n    2.01,\n    1.5);\n\n#else\n\nLight _light = Light(\n    LIGHTPOS,\n    normalize(TARGETPOS-LIGHTPOS),\n    vec4(1.0, 1.0, 0.7, 1.0),\n    16.0,\n    1.0);\n\nLight _moon = Light(\n    MOONPOS,\n    normalize(TARGETPOS-MOONPOS),\n    vec4(1.0, 1.0, 1.0, 1.0),\n    16.01,\n    4.0);\n\n#endif\n\n/*******************\n * TOOLS\n *******************/\n\nvec2 UVTwist(in vec2 uv, float a) {\n    float cA = cos(a+iTime);\n    float sA = sin(a+iTime);\n\treturn uv*mat2(cA, -sA, sA, cA);   \n}\n\nvec3 RotXV3(in vec3 P, float A)\n{\n    float cA = cos(A), sA = sin(A);\n    return P*mat3(1.0, 0.0, 0.0, 0.0, cA, -sA, 0.0, sA, cA);\n}\nvec3 RotYV3(in vec3 P, float A)\n{\n    float cA = cos(A), sA = sin(A);\n    return P*mat3(cA, 0.0, -sA, 0.0, 1.0, 0.0, sA, 0.0, cA);\n}\nvec3 RotZV3(in vec3 P, float A)\n{\n    float cA = cos(A), sA = sin(A);\n    return P*mat3(cA, -sA, 0.0, sA, cA, 0.0, 0.0, 0.0, 1.0);\n}\n\nfloat IntersectSphere(vec3 ro, vec3 rd, vec3 sc, float sr) {\n    vec3 Z = ro-sc;\n    float B = 2.0 * dot(rd, Z);\n    float C = Z.x*Z.x+Z.y*Z.y+Z.z*Z.z-sr*sr;\n    float D = B*B - 4.0*C;\n    float d = -1.0;\n    if(D>=0.0) {\n        if(C>0.0) {\n            d = (-B-sqrt(D))/2.0;\n        }else{\n            d = (-B+sqrt(D))/2.0;\n        }\n    }\n    return d;\n}\n\n/********************\n * NOISES\n ********************/\n\nfloat hash1D(float x) {\n\treturn fract(((x+124.2394943)*134.400594)*((x+7.13571113)*1.13497));\n}\n\nfloat hash2D(vec2 x) {\n\treturn fract(sin(dot(x, vec2(13.454, 7.405)))*12.3043);\n}\n\nfloat hash3D(vec3 x) {\n\treturn fract(dot(x, vec3(0.4955, 490.4294, 0.40594))*13.4959451);    \n}\n\nfloat voronoi2D(vec2 uv) {\n    vec2 fl = floor(uv);\n    vec2 fr = fract(uv);\n    float res = 1.0;\n    for( int j=-1; j<=1; j++ ) {\n        for( int i=-1; i<=1; i++ ) {\n            vec2 p = vec2(i, j);\n            float h = hash2D(fl+p);\n            vec2 vp = p-fr+h;\n            float d = dot(vp, vp);\n            \n            res +=1.0/pow(d, 8.0);\n        }\n    }\n    return pow( 1.0/res, 1.0/16.0 );\n}\n\nfloat voronoi3D(vec3 uv) {\n    vec3 fl = floor(uv);\n    vec3 fr = fract(uv);\n    float res = 1.0;\n    for(int k=-1;k<=1;k++)\n    for( int j=-1; j<=1; j++ ) {\n        for( int i=-1; i<=1; i++ ) {\n            vec3 p = vec3(i, j, k);\n            float h = hash3D(fl+p);\n            vec3 vp = p-fr+h;\n            float d = dot(vp, vp);\n            \n            res +=1.0/pow(d, 8.0);\n        }\n    }\n    return pow( 1.0/res, 1.0/16.0 );\n}\n\n/**\n * noise and smoothNoise function were inspired by common knowledge found in internet.\n **/\nfloat hash2(float x) {\n    return fract(sin(x)*556858.4905705783);\n}\n\n/**\n * Inspired from a noisy function in \"Seascape\" by TDM\n **/\nfloat smoothNoise(vec3 x) {\n    vec3 p = floor(x);\n    vec3 n = fract(x);\n    vec3 f = n*n*(3.0-2.0*n);\n    float winy = 157.0;\n    float winz = 113.0;\n    \n    float wx = p.x+winy*p.y+winz*p.z;\n    return mix(\n        \tmix(\n                mix(hash2(wx+0.0)     , hash2(wx+1.0), f.x),\n                mix(hash2(wx+0.0+winy), hash2(wx+1.0+winy), f.x),\n                f.y),\n        \tmix(\n                mix(hash2(wx+0.0+winz)     , hash2(wx+1.0+winz), f.x),\n                mix(hash2(wx+0.0+winy+winz), hash2(wx+1.0+winy+winz), f.x),\n                f.y)\n        , f.z);\n}\n\nfloat noise3D(vec3 x) {\n    vec3 p = floor(x);\n    vec3 n = fract(x);\n    vec3 f = n*n*(3.0-2.0*n);\n    float winx = 1.0;\n    float winy = 1.0;\n    float winz = 1.0;\n    \n    return mix(\n        \tmix(\n                mix(hash3D(p)     \t\t\t\t  , hash3D(p+vec3(winx, 0.0, 0.0)), f.x),\n                mix(hash3D(p+vec3(0.0, winy, 0.0)), hash3D(p+vec3(winx, winy, 0.0)), f.x),\n                f.y),\n        \tmix(\n                mix(hash3D(p+vec3(0.0, 0.0, winz)), hash3D(p+vec3(winx, 0.0, winz)), f.x),\n                mix(hash3D(p+vec3(0.0, winy, winz)), hash3D(p+vec3(winx, winy, winz)), f.x),\n                f.y),\n        \tf.z);\n}\n\nfloat waterNoise(vec2 x) {\n    vec2 p = floor(x);\n    vec2 n = fract(x);\n    vec2 f = n*n*(3.0-2.0*n);\n    float winx = 1.0;\n    float winy = 1.0;\n    \n    return mix(\n                mix(hash2D(p)     , hash2D(p+vec2(winx, 0.0)), f.x),\n                mix(hash2D(p+vec2(0.0, winy)), hash2D(p+vec2(winx, winy)), f.x),\n                f.y);\n}\n\nfloat noise1D(float x) {\n    float p = floor(x);\n    float n = fract(x);\n    float f = n*n*(3.0-2.0*n);\n    float winx = 1.0;\n    float winy = 2.0;\n    \n    return mix(\n                mix(hash1D(p)     , hash1D(p+winx), f),\n                mix(hash1D(p+winy), hash1D(p+winx+winy), f),\n                f);\n}\n\n// Simplex 2D noise\n// sources: Ian McEwan - https://github.com/ashima/webgl-noise/blob/master/src/noise2D.glsl\n// sources: Patricio Gonzalez Vivo - https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\nvec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\nfloat snoise(vec2 v){\n    const vec4 C = vec4(0.211324865405187, 0.366025403784439,\n                        -0.577350269189626, 0.024390243902439);\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n    vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    i = mod(i, 289.0);\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n                     + i.x + vec3(0.0, i1.x, 1.0 ));\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n                            dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n    vec3 g = vec3(0.0);\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n//  Simplex 3D Noise \n//  by Ian McEwan, Ashima Arts\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat snoise(vec3 v){ \n    const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n    const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n    // First corner\n    vec3 i  = floor(v + dot(v, C.yyy) );\n    vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n    // Other corners\n    vec3 g = step(x0.yzx, x0.xyz);\n    vec3 l = 1.0 - g;\n    vec3 i1 = min( g.xyz, l.zxy );\n    vec3 i2 = max( g.xyz, l.zxy );\n\n    //  x0 = x0 - 0. + 0.0 * C \n    vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n    vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n    vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n    // Permutations\n    i = mod(i, 289.0 ); \n    vec4 p = permute( permute( permute( \n        i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n                              + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n                     + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n    // Gradients\n    // ( N*N points uniformly over a square, mapped onto an octahedron.)\n    float n_ = 1.0/7.0; // N=7\n    vec3  ns = n_ * D.wyz - D.xzx;\n\n    vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n    vec4 x_ = floor(j * ns.z);\n    vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n    vec4 x = x_ *ns.x + ns.yyyy;\n    vec4 y = y_ *ns.x + ns.yyyy;\n    vec4 h = 1.0 - abs(x) - abs(y);\n\n    vec4 b0 = vec4( x.xy, y.xy );\n    vec4 b1 = vec4( x.zw, y.zw );\n\n    vec4 s0 = floor(b0)*2.0 + 1.0;\n    vec4 s1 = floor(b1)*2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0.0));\n\n    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n    vec3 p0 = vec3(a0.xy,h.x);\n    vec3 p1 = vec3(a0.zw,h.y);\n    vec3 p2 = vec3(a1.xy,h.z);\n    vec3 p3 = vec3(a1.zw,h.w);\n\n    //Normalise gradients\n    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n\n    // Mix final noise value\n    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n    m = m * m;\n    return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                 dot(p2,x2), dot(p3,x3) ) );\n}\n\n/**\n * This one is inspired by IQ code from this website.\n **/\nfloat fbm2D(vec2 p) {\n    float total = 0.0;\n    #ifdef USE_ANIMATECLOUDS\n    \tp.y += iTime*CLOUDSPEED;\n    #endif\n    total  = 0.5000* snoise(p); p = p*2.0;\n    total += 0.2500* snoise(p); p = p*2.0;\n    total += 0.1250* snoise(p); p = p*2.0;\n    total += 0.0625* snoise(p); p = p*2.0;\n    return total;\n}\n\nfloat fbm3D(vec3 p) {\n    float total = 0.0;\n    /*total += 0.5000*smoothNoise(p*2.0);\n    total += 0.2500*smoothNoise(p*2.01);\n    total += 0.1250*smoothNoise(p*2.02);\n    total += 0.0625*smoothNoise(p*2.04);*/\n    #ifdef USE_ANIMATECLOUDS\n    \tp.y += iTime*CLOUDSPEED;\n    #endif\n    total  = 0.5000* noise3D(p); p = p*2.0;\n    total += 0.2500* noise3D(p); p = p*2.0;\n    total += 0.1250* noise3D(p); p = p*2.0;\n    total += 0.0625* noise3D(p); p = p*2.0;\n    return total;\n}\n\nfloat fbm3DTerrain(vec3 p) {\n    float total = 0.0;\n    #ifdef USE_HD_TERRAIN_NOISE\n    total  = 0.5000* snoise(p); p = p*2.0;\n    total += 0.2500* snoise(p); p = p*2.0;\n    total += 0.1250* snoise(p); p = p*2.0;\n    total += 0.0625* snoise(p); p = p*2.0;\n    #else\n    \t#ifdef USE_FAST_HD_TERRAIN_NOISE\n        p*=0.8;\n        total  = 0.5000* snoise(p.xz); p = p*2.0;\n        total += 0.2500* snoise(p.xz); p = p*2.0;\n        total += 0.1250* snoise(p.xz); p = p*2.0;\n        total += 0.0625* snoise(p.xz); p = p*2.0;\n   \t \t#else\n        total  = 0.5000* noise3D(p); p = p*2.0;\n        total += 0.2500* noise3D(p); p = p*2.0;\n        total += 0.1250* noise3D(p); p = p*2.0;\n        total += 0.0625* noise3D(p); p = p*2.0;\n    \t#endif\n    #endif\n    return total;\n}\n\nfloat fbm3DMountain(vec3 p) {\n    float total = 0.0;\n    #ifdef USE_HD_MOUNTAIN_NOISE\n    p*=2.0;\n    total  = 0.5000* voronoi3D(p); p = p*2.0;\n    total += 0.2500* voronoi3D(p); p = p*2.0;\n    total += 0.1250* voronoi3D(p); p = p*2.0;\n    total += 0.0625* voronoi3D(p); p = p*2.0;\n    #else\n    \t#ifdef USE_FAST_HD_MOUNTAIN_NOISE\n        p*=2.0;\n        total  = 0.5000* voronoi2D(p.xz); p = p*2.0;\n        total += 0.2500* voronoi2D(p.xz); p = p*2.0;\n        total += 0.1250* voronoi2D(p.xz); p = p*2.0;\n        total += 0.0625* voronoi2D(p.xz); p = p*2.0;\n   \t \t#else\n        total  = 0.5000* waterNoise(p.xz); p = p*2.0;\n        total += 0.2500* waterNoise(p.xz); p = p*2.0;\n        total += 0.1250* waterNoise(p.xz); p = p*2.0;\n        total += 0.0625* waterNoise(p.xz); p = p*2.0;\n    \t#endif\n    #endif\n    return total;\n}\n\nfloat perlin(vec3 V) {\n    float total = 0.0;\n    for(int i=2;i<OCTAVES+2;i++) {\n        total += (1.0/float(i))*smoothNoise(V);\n        V*=2.0+(float(i)/100.0);\n    }\n    return total;\n}\n\n/**\n * PRIMITIVES\n **/\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nfloat sdSphere( vec3 p, float r )\n{\n    return length(p)-r;\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\nfloat udBox( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) +\n         length(max(d,0.0));\n}\n\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max((q.x*0.866025+q.y*0.5),q.y)-h.x);\n}\n\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n\nfloat sdCappedCone( in vec3 p, in vec3 c )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    vec2 v = vec2( c.z*c.y/c.x, -c.z );\n    vec2 w = v - q;\n    vec2 vv = vec2( dot(v,v), v.x*v.x );\n    vec2 qv = vec2( dot(v,w), v.x*w.x );\n    vec2 d = max(qv,0.0)*qv/vv;\n    return sqrt( dot(w,w) - max(d.x,d.y) )* sign(max(q.y*v.x-q.x*v.y,w.y));\n}\n\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat udTriangle( vec3 p, vec3 a, vec3 b, vec3 c )\n{\n    vec3 ba = b - a; vec3 pa = p - a;\n    vec3 cb = c - b; vec3 pb = p - b;\n    vec3 ac = a - c; vec3 pc = p - c;\n    vec3 nor = cross( ba, ac );\n\n    return sqrt(\n    (sign(dot(cross(ba,nor),pa)) +\n     sign(dot(cross(cb,nor),pb)) +\n     sign(dot(cross(ac,nor),pc))<2.0)\n     ?\n     min( min(\n     dot2(ba*clamp(dot(ba,pa)/dot2(ba),0.0,1.0)-pa),\n     dot2(cb*clamp(dot(cb,pb)/dot2(cb),0.0,1.0)-pb) ),\n     dot2(ac*clamp(dot(ac,pc)/dot2(ac),0.0,1.0)-pc) )\n     :\n     dot(nor,pa)*dot(nor,pa)/dot2(nor) );\n}\n\n/**\n * (Distance, Type) with Type =\n * 0.0 == Nthg\n **/\n\n/***********************\n * PRIMITIVE OPERATIONS\n ***********************/\n\n// polynomial smooth min (k = 0.1);\nvec2 polsmin( vec2 a, vec2 b, float k )\n{\n    float h = clamp( 0.5+0.5*(b.x-a.x)/k, 0.0, 1.0 );\n    return vec2(mix( b.x, a.x, h ) - k*h*(1.0-h), floor(mix( b.y, a.y, h )*2.0));\n}\n\n// polynomial smooth min (k = 0.1);\nvec2 polsmax( vec2 a, vec2 b, float k )\n{\n    float h = clamp( 0.5+0.5*(b.x-a.x)/k, 0.0, 1.0 );\n    return vec2(mix( b.x, a.x, 1.0-h ) - k*h*(1.0-h), floor(mix( b.y, a.y, 1.0-h )*2.0));\n}\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\nvec2 opI( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x>d2.x) ? d1 : d2;\n}\n\nvec2 opS( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<-d2.x) ? d1 : d2;\n}\n\n/*******************\n * MAP ACTUAL ELEMENTS\n *******************/\n\nfloat heightMap(vec3 p, float s, float f) {\n    float h = 0.0;\n    float a = s;\n    for(int i=0;i<4;++i) {\n        h += waterNoise(p.xz*f)*a;\n        //h += (1.0-voronoi2D(p.xz*f))*a;\n        a *= 0.22;\n        f *= 1.9;\n    }\n    return h;\n}\n\nfloat heightMapWater(vec3 p, float s) {\n    float h = 0.0;\n    float a = s;\n    float f = VAR_WATER_FREQ;\n    for(int i=0;i<10;++i) {\n        h += waterNoise(p.xz*f+iTime*VAR_WATER_SPEED)*a;\n        h -= waterNoise(p.xz*f-iTime*VAR_WATER_SPEED)*a;\n        a *= 0.6;\n        f *= 1.4;\n    }\n    return h;\n}\n\nfloat heightMapMountain(vec3 p, float s, float f) {\n    float h = 0.0;\n    float a = s;\n    for(int i=0;i<6;++i) {\n        h += waterNoise(p.xz*f)*a;\n        //h += (1.0-voronoi2D(p.xz*f))*a;\n        a *= 0.22;\n        f *= 1.9;\n    }\n    return h;\n}\n\nfloat mapWater(vec3 p, float a) {\n    return sdPlane(p)+heightMapWater(p, a);\n}\n\nfloat mapTerrain(vec3 p, float hm, float fbm) {\n    float t = sdPlane(p)+hm+fbm;\n    return t;\n}\n\nfloat mapMountain(vec3 p, float hm, float fbm) {\n    float t = sdPlane(p)+hm+fbm;\n    return t;\n}\n\nfloat mapTrees(vec3 p, float hm, float fbm) {\n    /*p.x = sin(p.x)+1.0;\n    p.z = cos(p.z)+1.0;*/\n    vec3 m = vec3(0.2, 0.2, 0.1);// ok\n    //vec3 m = vec3(0.2+fract(p.x)*0.2, 0.2+fract(p.y)*0.2, 0.1+fract(p.z)*0.1);// noisy\n    vec3 p2 = mod(p-vec3(0.0, 0.2, 0.0), m)-0.5*m;\n    return sdPlane(p)+hm+fbm+sdSphere(p2, 0.2);\n}\n\nvec2 mapWorld(vec3 p, float s) {\n    float hmTerrain = heightMap(p, s, VAR_TERRAIN_FREQ);\n    #ifdef USE_HD_MOUNTAIN\n    float hmMountain = heightMapMountain(p-vec3(0.0, VAR_MOUNTAIN_LEVEL, 0.0), VAR_MOUNTAIN_AMP, VAR_MOUNTAIN_FREQ);\n    float fbmMountain = fbm3DMountain(p*0.5);\n    #endif\n    float fbmTerrain = fbm3DTerrain(p*0.5);\n    float t = mapTerrain(p, hmTerrain, fbmTerrain);\n    float ts = mapTrees(p, hmTerrain, fbmTerrain);\n    /*if(waterNoise(p.xz*0.3)>0.5 &&\n       p.y>=(VAR_WATER_LEVEL-(VAR_TERRAIN_LEVEL-1.0-noise3D(p)))) {\n        return opU(vec2(t, TYPE_TERRAIN), vec2(ts, TYPE_TREES));\n    #ifdef USE_MORE_ROCKY\n    }else if((waterNoise(p.xz*0.5)*0.5+waterNoise(p.xz*8.0))>0.8) {\n    #else\n    }else if(waterNoise(p.xz*8.0)>0.8) {\n    #endif\n        #ifdef USE_HD_MOUNTAIN\n        return opU(vec2(mapMountain(p, hmMountain, fbmMountain), TYPE_MOUNTAIN), vec2(t, TYPE_TERRAIN));\n        #else\n        return vec2(min(t, mapMountain(p, hmTerrain, fbmTerrain)), TYPE_MOUNTAIN);\n        #endif\n    }else{\n        return vec2(t, TYPE_TERRAIN);\n    }*/\n    if(waterNoise(p.xz*0.3)>0.5 &&\n       p.y>=(VAR_WATER_LEVEL-(VAR_TERRAIN_LEVEL-1.0-noise3D(p)))) {\n        return opU(vec2(t, TYPE_TERRAIN), vec2(ts, TYPE_TREES));\n    }\n    else\n    {\n        return opU(vec2(t, TYPE_TERRAIN),\n        \t#ifdef USE_HD_MOUNTAIN\n        \tvec2(mapMountain(p, hmMountain, fbmMountain), TYPE_MOUNTAIN)\n        \t#else\n        \tvec2(mapMountain(p, hmTerrain, fbmTerrain)+(1.0-2.0*waterNoise(p.xz)), TYPE_MOUNTAIN)\n        \t#endif\n                );\n    }\n}\n\nfloat heightMapSand(vec3 p, float s) {\n    float h = 0.0;\n    float a = s;\n    float f = 0.2;\n    for(int i=0;i<SAND_OCTAVES;++i) {\n        h += snoise(p.xz*f)*a;\n        a *= 0.22;\n        f *= 1.9;\n    }\n    for(int i=0;i<SAND_GRAINS;++i) {\n        h += hash3D(p.xyz*f)*a;\n        a *= 0.22;\n        f *= 1.9;\n    }\n    return h;\n}\n\nfloat mapSand(vec3 p, float s) {\n\treturn sdPlane(p)+heightMapSand(p, s);\n}\n\n\n/*******************\n * MAP ACTUAL\n *******************/\n\nvec2 map(vec3 p) {\n    vec2 d = vec2(-1.0, -1.0);\n    //d = vec2(mapTerrain(p-vec3(0.0, VAR_TERRAIN_LEVEL, 0.0), VAR_TERRAIN_AMP), TYPE_TERRAIN);\n    d = mapWorld(p-vec3(0.0, VAR_TERRAIN_LEVEL, 0.0), VAR_TERRAIN_AMP);\n    d = opU(vec2(mapWater(p-vec3(0.0, VAR_WATER_LEVEL, 0.0), VAR_WATER_AMP), TYPE_WATER), d);\n    return d;\n}\n\nvec2 mapRefl(vec3 p) {\n    return mapWorld(p-vec3(0.0, VAR_TERRAIN_LEVEL, 0.0), VAR_TERRAIN_AMP);\n}\n\n\nvec2 mapUnderWater(vec3 p) {\n    float hmTerrain = heightMap(p-vec3(0.0, VAR_TERRAIN_LEVEL, 0.0), VAR_TERRAIN_AMP, VAR_TERRAIN_FREQ);\n    return vec2(mapTerrain(p-vec3(0.0, VAR_TERRAIN_LEVEL, 0.0), hmTerrain, 0.0), TYPE_TERRAIN);\n}\n\nvec3 mapNormal(vec3 pt, float e) {\n    vec3 normal;\n    normal.y = map(pt).x;\n    normal.x = map(vec3(pt.x+e,pt.y,pt.z)).x - normal.y;\n    normal.z = map(vec3(pt.x,pt.y,pt.z+e)).x - normal.y;\n    normal.y = e;\n    return normalize(normal);\n}\n\nvec3 mapNormalRefl(vec3 pt, float e) {\n    vec3 normal;\n    normal.y = mapRefl(pt).x;\n    normal.x = mapRefl(vec3(pt.x+e,pt.y,pt.z)).x - normal.y;\n    normal.z = mapRefl(vec3(pt.x,pt.y,pt.z+e)).x - normal.y;\n    normal.y = e;\n    return normalize(normal);\n}\n\nvec3 mapUnderWaterNormal(vec3 pt, float e) {\n    vec3 normal;\n    normal.y = mapUnderWater(pt).x;    \n    normal.x = mapUnderWater(vec3(pt.x+e,pt.y,pt.z)).x - normal.y;\n    normal.z = mapUnderWater(vec3(pt.x,pt.y,pt.z+e)).x - normal.y;\n    normal.y = e;\n    return normalize(normal);\n}\n\n\n/**********************\n * RAYMARCHING\n **********************/\n\nvec2 raymarch(vec3 ro, vec3 rd, in float tmin, in float tmax) {\n    vec2 m = vec2(-1.0, -1.0);\n    vec2 res = vec2(tmin, -1.0);\n\tfor( int i=0; i<RAYMARCHING_NUM_STEPS; i++ )\n\t{\n        m = map(ro + res.x*rd);\n\t\tif( abs(m.x)<tmin || res.x>tmax ) break;\n\t\tres.x += 0.5*m.x;\n        res.y = m.y;\n\t}\n    if( res.x>tmax ) res.y=-1.0;\n\treturn res;\n}\n\n// the reflection one\nvec2 raymarchRefl(vec3 ro, vec3 rd, in float tmin, in float tmax) {\n    vec2 m = vec2(-1.0, -1.0);\n    vec2 res = vec2(tmin, -1.0);\n\tfor( int i=0; i<RAYMARCHING_REFL_NUM_STEPS; i++ )\n\t{\n        m = mapRefl(ro + res.x*rd);\n\t\tif( abs(m.x)<tmin || res.x>tmax ) break;\n\t\tres.x += 0.5*m.x;\n        res.y = m.y;\n\t}\n    if( res.x>tmax ) res.y=-1.0;\n\treturn res;\n}\n\nvec2 raymarchUnderWater(vec3 ro, vec3 rd, in float tmin, in float tmax) {\n    vec2 m = vec2(-1.0, -1.0);\n    vec2 res = vec2(tmin, -1.0);\n\tfor( int i=0; i<RAYMARCHING_REFR_NUM_STEPS; i++ )\n\t{\n        m = mapUnderWater(ro + res.x*rd);\n\t\tif( abs(m.x)<tmin || res.x>tmax ) break;\n\t\tres.x += /*0.5**/m.x;\n        res.y = m.y;\n\t}\n    if( res.x>tmax ) res.y=-1.0;\n\n\treturn res;\n}\n\n/************************\n * RENDERING\n ************************/\n\nfloat shadow( in vec3 ro, in vec3 rd, float k )\n{\n    float res = 1.0;\n    float t = NEAR;\n    for(int i = 0; i<SOFTSHADOW_STEPS;i++) {\n        float h = map(ro + rd*t).x;\n        if( h<NEAR || t>FAR)\n            break;\n        res = min( res, k*h/t );\n        t += h;\n    }\n    return res;\n}\n\nfloat Fresnel(vec3 I, vec3 n, float fBias, float fScale, float fPow)\n{\n    return fBias + fScale * pow(1.0 + dot(I, n), fPow);\n}\n\nfloat clouds(in vec3 ro, in vec3 rd)\n{\n    float sum = 0.0;\n    rd = rd*100.0;\n    sum = pow(fbm3D(ro*0.4+rd/rd.y*0.6), 4.0)*10.0;\n    sum *= rd.y/length(rd);\n    return sum;\n}\n\nvec3 lighting(vec3 rd, vec3 n, float Kd, float Ks) {\n    vec3 lightingComp = vec3(0.0);\n    float lopy = _light.o.y/ASTRALMAXDIST;//_light.o.y/length(_light.o);\n    float limit = 0.15;\n    #ifdef SET_NIGHT\n    lopy = -1.0;\n    #endif\n    float blendingP = clamp(0.5*(sin(lopy*3.14/2.0)+1.0), 0.0, 1.0);\n    \n    vec3 lightingCompDay = Kd*max(0.0, dot(-_light.d, n))*_light.diffuseColor.rgb;\n    if(Ks>0.0)\n    {\n        float sT = dot(rd, -reflect(_light.d, n));\n        lightingCompDay += Ks*pow(sT, _light.shininess);\n    }\n    vec3 lightingCompNight = Kd*max(0.0, dot(-_moon.d, n))*_moon.diffuseColor.rgb;\n    if(Ks>0.0)\n    {\n        float sT = max(0.0, dot(rd, -reflect(_moon.d, n)));\n        lightingCompNight += Ks*pow(sT, _moon.shininess);\n    }\n    lightingComp = mix(lightingCompNight, lightingCompDay, blendingP);\n    /*if(lopy>=0.0) {\n        // day\n        if(lopy>limit)\n        {\n    \t\tfloat lDT = max(0.0, dot(-_light.d, n));\n            lightingComp = Kd*lDT*_light.diffuseColor.rgb;\n            if(Ks>0.0)\n            {\n            \tfloat sT = max(0.0, dot(rd, -reflect(_light.d, n)));\n                lightingComp+=Ks*pow(sT, _light.shininess);\n            }\n        }\n        // sundown\n        else\n        {\n            vec3 lightingCompDay = Kd*max(0.0, dot(-_light.d, n))*_light.diffuseColor.rgb;\n            if(Ks>0.0)\n            {\n            \tfloat sT = dot(rd, -reflect(_light.d, n));\n                lightingCompDay+=Ks*pow(sT, _light.shininess);\n            }\n            vec3 lightingCompNight = Kd*max(0.0, dot(-_moon.d, n))*_moon.diffuseColor.rgb;\n            if(Ks>0.0)\n            {\n            \tfloat sT = max(0.0, dot(rd, -reflect(_moon.d, n)));\n                lightingCompNight+=Ks*pow(sT, _moon.shininess);\n            }\n            //lopy = clamp(lopy*(1.0/limit), 0.0, 1.0);\n            //lopy = clamp(sin(lopy*3.14/2.0), 0.0, 1.0);\n            lightingComp = mix(lightingCompNight, lightingCompDay, blendingP);\n        }\n    }\n    else\n    {\n        lopy = abs(lopy);\n        // night\n        if(lopy>limit)\n        {\n    \t\tfloat lNT = max(0.0, dot(-_moon.d, n));\n            lightingComp = Kd*lNT*_moon.diffuseColor.rgb;\n            if(Ks>0.0)\n            {\n            \tfloat sT = max(0.0, dot(rd, -reflect(_moon.d, n)));\n                lightingComp+=Ks*pow(sT, _moon.shininess);\n            }\n        }\n        // sunrise\n        else\n        {\n            vec3 lightingCompDay = Kd*max(0.0, dot(-_light.d, n))*_light.diffuseColor.rgb;\n            if(Ks>0.0)\n            {\n            \tfloat sT = max(0.0, dot(rd, -reflect(_light.d, n)));\n                lightingCompDay+=Ks*pow(sT, _light.shininess);\n            }\n            vec3 lightingCompNight = Kd*max(0.0, dot(-_moon.d, n))*_moon.diffuseColor.rgb;\n            if(Ks>0.0)\n            {\n            \tfloat sT = max(0.0, dot(rd, -reflect(_moon.d, n)));\n                lightingCompNight+=Ks*pow(sT, _moon.shininess);\n            }\n            //lopy = clamp(lopy*(1.0/limit), 0.0, 1.0);\n            //lopy = clamp(sin(lopy*3.14/2.0), 0.0, 1.0);\n            lightingComp = mix(lightingCompDay, lightingCompNight, blendingP);\n        }\n    }*/\n    return clamp(lightingComp, 0.0, 1.0);\n}\n\nfloat fractWave(float x)\n{\n    return abs(2.0*fract(x-0.5));\n}\n\nvec3 getSkyColor(vec3 ro, vec3 rd, vec2 uv, bool isStarsNeeded) {\n    vec3 color = vec3(0.0);\n    float c = max(0.0, clouds(ro, rd));\n    #ifdef USE_DAYANDNIGHT\n        // day & night\n        float lopy = _light.o.y/ASTRALMAXDIST;//_light.o.y/length(_light.o);\n        #ifdef SET_NIGHT\n        lopy = -1.0;\n        #endif\n        if(lopy>0.0) {\n            if(lopy>0.4) color = COLORSKYDAY;\n            else{\n                color = mix(COLORSKYDAWN, COLORSKYDAY, lopy*2.5);\n            }\n        }else{ // the night\n            vec3 colorSkyNight = vec3(0.0);\n            vec3 _c = COLORSKYNIGHT;\n            \n\n            #ifdef USE_BOREALS\n            float T = iTime*AURORABOREALISSPEED;\n            /*float bf = cos(rd.x*8.0+T)*(rd.y+0.4)*sin(rd.y*8.0+T);\n            bf = clamp(bf, 0.0, 1.0);\n            bf *= pow(1.0+bf, 4.0)-1.0;\n            vec3 colorBoreals = smoothstep(vec3(0.0, 1.0, 0.4), vec3(0.6, 0.2, 0.5), vec3(uv.y-0.3));\n            colorBoreals *= bf;\n            colorBoreals *= waterNoise((uv.xx+0.002*waterNoise(uv.yy*100.0))*100.0)*1.0;\n            \n            colorBoreals = mix(COLORSKYNIGHT, colorBoreals, 0.5);\n            _c = mix(COLORSKYNIGHT, colorBoreals, rd.y+0.4);*/\n            vec3 rdp = (ro+rd*100.0);\n            rdp /= rdp.y;\n            //float bf = max(0.0, sin((rdp.z+cos(rdp.x+T))*1.0+T)); // not bad\n            float bf = max(0.0, sin((rdp.z+cos(rdp.x+T))*0.5)); // not bad\n            if(bf>0.0)\n            {\n                vec3 colorBoreals = mix(vec3(0.6, 0.2, 0.5), vec3(0.0, 1.0, 0.4), 2.0*(bf-0.5));\n                _c = mix(COLORSKYNIGHT, colorBoreals, (uv.y-0.3)*(uv.y-0.3)*(pow(1.0+bf, 2.0)-1.0));\n            \t//_c = colorBoreals;\n            }\n            #endif\n            \n            if(rd.y>-0.1 && isStarsNeeded)\n            {\n                #ifdef USE_HD_STARNOISE\n                    vec2 _uv = (uv+rd.xz*0.01)*100.0/rd.y;//rd.xz*100.0/rd.y;\n                    float tf = iTime*0.001;\n                    float starnoise = mix(mix(mix(\n                                    1.0-step(waterNoise(_uv+vec2(0.0, 0.0)+tf), 0.96),\n                                    1.0-step(waterNoise(_uv+vec2(0.05, 0.0)+tf), 0.96),\n                                    0.5),\n                                    1.0-step(waterNoise(_uv+vec2(0.0, 0.05)+tf), 0.96),\n                                    0.5),\n                                    1.0-step(waterNoise(_uv+vec2(0.05, 0.05)+tf), 0.96),\n                                    0.5\n                                );\n                #else\n                    vec2 _uv = rd.xz*10.0/rd.y;\n                    float starnoise = 1.0-step(hash2D(_uv), 0.999);\n                #endif\n                colorSkyNight = mix(_c, vec3(1.0), starnoise*(1.0-c));\n            }\n            else // midnight more or less\n            {\n                colorSkyNight = _c;\n            }\n            lopy = abs(lopy);\n            if(lopy>0.4) color = colorSkyNight;\n            else{\n                color = mix(COLORSKYDAWN, colorSkyNight, lopy*2.5);\n            }\n        }\n    #else\n    \tcolor = COLORSKYDAY;\n    #endif\n    \n    color = mix(vec3(1.0), color, uv.y+0.4);\n    color = mix(color, vec3(1.0), c);\n    \n    #ifdef DRAW_SUN\n    float d = IntersectSphere(ro, rd, _light.o, 2000.0);\n    if(d>0.0) {\n        vec3 ps = ro+d*rd;\n        vec3 ns = normalize(ps-_light.o);\n        float a = max(0.0, dot(-rd, ns));\n        color += vec3(1.0, 1.0, 0.0)*pow(a, 8.0);\n    }\n    #endif\n    #ifdef DRAW_MOON\n    \n    float dm = IntersectSphere(ro, rd, _moon.o, VAR_MOONRADIUS);\n    if(dm>0.0) {\n        float time = normalize(_light.o).y;\n        vec3 ps = ro+dm*rd;\n        vec3 ns = normalize(ps-MOONPOS);\n        float a = max(0.0, dot(-rd, ns));\n        float ac = a*3.0;\n        float cf = max(0.3, 0.8-max(perlin(ps*2.0*(1.0/VAR_MOONRADIUS)), 0.3));\n        vec3 colorm = _moon.diffuseColor.rgb*3.0/*ac*/*cf;\n        if(time<-0.2)\n            color = mix(color, colorm, clamp(pow(1.0+a, 2.0)-1.0, 0.0, 1.0));\n        else if(time<=0.2)\n        {\n            float _a = (time+0.2)*2.5;\n            color = mix(color, mix(colorm, vec3(1.0)*3.0*cf, _a), mix(a, 0.1*a, _a));\n        }\n        else\n        {\n            color = mix(color, _moon.diffuseColor.rgb*3.0*cf, 0.1*a);\n        }\n    }\n    #endif\n    color *= abs(uv.y);\n    return color;\n}\n\nvec3 rendering(vec3 ro, vec3 rd, vec2 rm, vec2 uv) {\n    vec3 p = ro+rd*rm.x;\n    vec3 n = vec3(0.0);\n    vec3 color = vec3(0.0);\n    #ifdef USE_DEPTHMODE\n    color.r = color.g = color.b = (FAR-rm.x)/(FAR-NEAR);\n    //color.rgb *= max(0.0, dot(-_light.d, n))*1.0/(0.3*length(p - _light.o));\n    #else\n    if(rm.x>NEAR && rm.x<FAR) {\n        n = normalize(mapNormal(p, 0.001));\n        #ifdef OLDLIGHTING\n        float lT = dot(-_light.d, n);\n        #endif\n        if(rm.y==TYPE_TERRAIN) {\n            color = mix(COLORSAND,\n                        COLORGRASS*(hash2D(p.xz)+8.0)*0.09,\n                        min(1.0, max(0.0, (p.y+VAR_WATER_LEVEL)*VAR_TERRAIN_LEVEL*0.2))\n                       );\n            color *= max(0.4, hash3D(p));\n            #ifdef OLDLIGHTING\n            color *= lT*_light.power;\n            #else\n            color += lighting(rd, n, VAR_TERRAIN_LIGHTING_KD, VAR_TERRAIN_LIGHTING_KS);\n            #endif\n        }else if(rm.y==TYPE_TREES) {\n            \n            if(p.y<VAR_WATER_LEVEL+0.1)\n            \tcolor = COLORSAND;\n            else{\n                color = COLORTREE*hash2D(p.xz);\n            }\n            \n        \t#ifdef OLDLIGHTING\n            color *= lT*_light.power;\n            #else\n            color += lighting(rd, n, VAR_TREE_LIGHTING_KD, VAR_TREE_LIGHTING_KS);\n            #endif\n        }else if(rm.y == TYPE_MOUNTAIN) {\n            color = COLORROCK*max(0.8, hash3D(p));\n            #ifdef OLDLIGHTING\n             color *= lT*_light.power;\n            #else\n            color += lighting(rd, n, VAR_MOUNTAIN_LIGHTING_KD, VAR_MOUNTAIN_LIGHTING_KS);\n            #endif\n        }else if(rm.y==TYPE_WATER) {\n\t\t\t#ifdef USE_WATER_REFRACTION\n            vec3 rfc = refract(rd, n, 1.33);\n            // refraction\n            vec2 rmr = raymarchUnderWater(p, rfc, NEAR, FAR);\n            vec3 rcolor = vec3(0.0);;\n        \tif(rmr.y==TYPE_TERRAIN) {\n                rcolor = COLORSAND;\n                #ifdef OLDLIGHTING\n                rcolor *= lT*_light.power;\n                #else\n                rcolor += lighting(rfc, n, VAR_TERRAIN_LIGHTING_KD, VAR_TERRAIN_LIGHTING_KS);\n                #endif\n                rcolor *= (FAR-rmr.x)/(FAR-NEAR);\n            }\n            #endif\n\t\t\t#ifdef USE_WATER_REFLECTION\n                #if !defined(USE_WATER_REFRACTION)\n                vec2 rmr = vec2(-1.0, -1.0);\n            \tvec3 rcolor = vec3(0.0);\n                #endif\n                // reflection\n                vec3 rxcolor = vec3(0.0);\n            \tvec3 rdr = normalize(reflect(rd, n));\n            \tvec3 rxp = p;//+vec3(0.0, 0.08, 0.0);\n                rmr = raymarchRefl(p, rdr, NEAR, FAR);\n            \trxp = rxp+rdr*rmr.x;\n        \t\tvec3 rxn = normalize(mapNormalRefl(rxp, 0.001));\n            \n    \t\t\tif(rmr.x>NEAR && rmr.x<FAR)\n                {\n                    if(rmr.y==TYPE_TERRAIN) {\n                        rxcolor = mix(COLORSAND,\n                            COLORGRASS*(hash2D(rxp.xz)+8.0)*0.09,\n                            min(1.0, max(0.0, (rxp.y+VAR_WATER_LEVEL)*VAR_TERRAIN_LEVEL*0.2))\n                           );\n                        #ifdef OLDLIGHTING\n                        rxcolor *= lT*_light.power;\n                        #else\n                        rxcolor += lighting(rdr, rxn, VAR_TERRAIN_LIGHTING_KD, VAR_TERRAIN_LIGHTING_KS);\n                        #endif\n\n                    }else if(rmr.y==TYPE_TREES) {\n                        rxcolor = COLORTREE*hash2D(rxp.xz);//vec3(hash(p.xz), hash(p.zy), 0.0)*pl+lT;\n                        #ifdef OLDLIGHTING\n                        rxcolor *= lT*_light.power;\n                        #else\n                        rxcolor += lighting(rdr, rxn, VAR_TREE_LIGHTING_KD, VAR_TREE_LIGHTING_KS);\n                        #endif\n                    }else if(rmr.y == TYPE_MOUNTAIN)\n                    {\n                        rxcolor = COLORROCK*max(0.8, hash2D(rxp.xz));\n                        #ifdef OLDLIGHTING\n                        rxcolor *= lT*_light.power;\n                        #else\n                        rxcolor += lighting(rdr, rxn, VAR_MOUNTAIN_LIGHTING_KD, VAR_MOUNTAIN_LIGHTING_KS);\n                        #endif\n                    }\n        \t\t\tcolor *= max(0.2, 1.0-2.0*clouds(rxp, vec3(rdr.x, -rdr.y, rdr.z)));\n                    #ifdef USE_SOFTSHADOWS_ON_REFLECTION\n                    if(_light.o.y>0.0)\n                        rxcolor *= shadow(rxp, normalize(_light.o-rxp), _light.power);\n                    else\n                        rxcolor *= shadow(rxp, normalize(_moon.o-rxp), _moon.power);\n                    #endif\n                    // MIXING\n                    rxcolor = mix(rxcolor, getSkyColor(rxp, rdr, uv, false), max(0.0, 1.0-(FAR-rmr.x)/(FAR-NEAR)));\n                }\n            \telse\n                {\n                    rxcolor = getSkyColor(rxp, rdr, uv, true);\n                }\n            \trxcolor = clamp(rxcolor, 0.0, 1.0);\n            #endif\n\n            float fresnel = Fresnel(rd, n, VAR_FRESNEL_BIAS, VAR_FRESNEL_SCALE, VAR_FRESNEL_POW);\n            \n            #if defined(USE_WATER_REFRACTION) && defined(USE_WATER_REFLECTION)\n            \t#ifdef OLDLIGHTING\n           \t\trcolor = mix(rcolor, rxcolor, VAR_REFL_OVER_REFR_PERCT);\n            \t#else\n            \trcolor = mix(rcolor, rxcolor, fresnel);\n            \t#endif\n            #else\n            \t#if defined(USE_WATER_REFLECTION)\n            \t\trcolor = rxcolor;\n            \t#endif\n            #endif\n            // lT, 0.2, 0.4\n            #if defined(USE_WATER_REFRACTION) || defined(USE_WATER_REFLECTION)\n            \t#ifdef OLDLIGHTING\n            \tcolor = mix(COLORWATER, rcolor, fresnel);\n            \t#else\n            \tcolor = COLORWATER+rcolor;\n            \t#endif\n                #ifdef OLDLIGHTING\n                float spec = 0.0;\n            \tfloat sT = dot(rd, -reflect(_light.d, n));\n                if(sT>0.0)\n                    spec = pow(sT, _light.shininess);\n                color *= lT*_light.power+spec;\n                #else\n                color += lighting(rd, n, VAR_WATER_LIGHTING_KD, VAR_WATER_LIGHTING_KS);\n                #endif\n            #else\n            \tcolor = COLORWATER;\n                #ifdef OLDLIGHTING\n                float spec = 0.0;\n            \tfloat sT = dot(rd, -reflect(_light.d, n));\n                if(sT>0.0)\n                    spec = pow(sT, _light.shininess);\n                color *= lT*_light.power+spec;\n                #else\n                color += lighting(rd, n, VAR_WATER_LIGHTING_KD, VAR_WATER_LIGHTING_KS);\n                #endif\n            #endif\n        }\n        color *= (FAR-rm.x)/(FAR-NEAR);\n\n        color *= max(0.2, 1.0-2.0*clouds(ro, vec3(rd.x, -rd.y, rd.z)));\n        #ifdef USE_SOFTSHADOWS\n        //p+=vec3(0.0, 0.05, 0.0);\n        if(_light.o.y>0.0)\n        \tcolor *= shadow(p, normalize(_light.o-p), _light.power);\n        else\n        \tcolor *= shadow(p, normalize(_moon.o-p), _moon.power);\n        #endif\n\n        // MIXING WITH SKY COLOR\n        color = mix(color, getSkyColor(ro, rd, uv, false), max(0.0, 1.0-(FAR-rm.x)/(FAR-NEAR)));\n        color = clamp(color, 0.0, 1.0);\n    }else{\n        color = getSkyColor(ro, rd, uv, true);\n    }\n    #endif\n    return clamp(color, 0.0, 1.0);\n}\n\n// the camera construction method is inspired by the one from IQ\nmat3 setCamera( in vec3 origin, in vec3 target, vec3 viewUp )\n{\n\tvec3 cw = normalize(target-origin);\n\tvec3 cu = normalize( cross(cw,viewUp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid camPos(float t, in vec3 rdi, in vec3 roi, out vec3 ro, out vec3 rd) {\n    mat3 rotX = mat3(\n        1.0, 0.0, 0.0,\n        0.0, cos(t), -sin(t),\n        0.0, sin(t), cos(t));\n    mat3 rotY = mat3(\n        cos(t), 0.0, sin(t),\n        0.0, 1.0, 0.0,\n        -sin(t), 0.0, cos(t));\n    mat3 rotZ = mat3(\n        cos(t), sin(t), 0.0,\n        -sin(t), cos(t), 0.0,\n    \t0.0, 0.0, 1.0);\n    \n    ro = roi;\n\trd = normalize(rdi*rotY);\n}\n\nvoid lightPos(float t, out vec3 lPos) {\n    mat3 rotX = mat3(\n        1.0, 0.0, 0.0,\n        0.0, cos(t), -sin(t),\n        0.0, sin(t), cos(t));\n    mat3 rotY = mat3(\n        cos(t), 0.0, sin(t),\n        0.0, 1.0, 0.0,\n        -sin(t), 0.0, cos(t));\n    mat3 rotZ = mat3(\n        cos(t), -sin(t), 0.0,\n        sin(t), cos(t), 0.0,\n    \t0.0, 0.0, 1.0);\n    lPos = lPos*rotZ*rotX;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy /iResolution.xy;\n    vec2 pixel = -1.0 + 2.0*uv;// vec2(iResolution.x*0.6, iResolution.y);\n\tpixel.x *= iResolution.x/iResolution.y;\n    \n    vec2 mv = -1.0 + 2.0*iMouse.xy/iResolution.xy+vec2(1.0, 0.0);\n    float Time = mod(iTime*CAMROTSPEED, 360.0);\n    pixel.x *= 0.6;\n\n    \n    vec3 ro = CAMPOS;\n    vec3 rd = normalize(vec3(pixel, 1.0));\n    \n    #ifdef SET_CAMERA_TARGET_ROTATION\n    ro.x = TARGETPOS.x+cos(Time*CAMROTSPEED)*CAMDIST;\n    ro.z = TARGETPOS.z+sin(Time*CAMROTSPEED)*CAMDIST;\n    mat3 ca = setCamera(ro, TARGETPOS, vec3(0.0, 1.0, 0.0));\n    rd = ca*normalize(vec3(pixel.xy, 2.0));\n    #else\n    \t#ifdef USE_MARCH\n    \tvec3 campath = vec3(\n            cos(iTime*CAMROTSPEED)*CAMDIST,\n            0.0,\n            sin(iTime*CAMROTSPEED)*CAMDIST+Time*30.0);\n        ro += campath;\n        mat3 ca = setCamera(ro, ro+campath, vec3(0.0, 1.0, 0.0));\n        rd = ca*normalize(vec3(pixel.xy, 2.0));\n    \t#else\n            mat3 ca = setCamera(ro, ro+vec3(0.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0));\n            rd = ca*normalize(vec3(pixel.xy, 2.0));\n    \t#endif\n    #endif\n    #ifdef SET_CAMERA_DEFAULT_ROTATION\n        rd = RotYV3(rd, Time*CAMROTSPEED);\n    #endif\n    #ifdef SET_CAMERA_SUNDOWN\n    \trd = RotYV3(rd, -1.0);\n    #endif\n    #ifdef SET_CAMERA_SUNRISE\n    \trd = RotYV3(rd, 3.10);\n    #endif\n\n    vec2 rm = vec2(FAR, -1.0);\n    if(rd.y<.0)\n        rm = raymarch(ro, rd, NEAR, FAR);\n    #ifdef USE_LIGHTMOVING\n    \t_light.o = RotXV3(RotZV3(_light.o, Time*LIGHTSPEED), Time*LIGHTSPEED);\n    #endif\n    #ifdef USE_MOONMOVING\n    \t_moon.o = RotYV3(_moon.o, Time*MOONSPEED);\n    #endif\n    _light.d = normalize(ro+rd*rm.x-_light.o);\n    _moon.d = normalize(ro+rd*rm.x-_moon.o);\n    \n    \n    vec3 color = rendering(ro, rd, rm, uv);\n    #ifdef CLOUDS\n    float m = raymarchClouds(ro, rd, NEAR, FAR);\n    if((ro+m*rd).y<7.5) color = mix(color, vec3(0.0), 0.5);\n    else color = mix(color, vec3(1.0)*(FAR-m)/(FAR-NEAR), 0.5);\n    #endif\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}