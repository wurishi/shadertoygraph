{"ver":"0.1","info":{"id":"ssyGD1","date":"1631465699","viewed":83,"name":"Drawing the Mandelbrot Set","username":"GCScholar","description":"The Mandelbrot Set is made from all the points INSIDE the yellow border","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// HOW THE MANDELBROT SET IS DRAWN:\n//\n// A point C, in the Complex Plane, is in the Mandelbrot Set if, given the sequence:\n//\n//                        Z(n+1) = Zn^2 + C, starting with Z0 = 0\n// \n// the module |Zn| for n->Inf is LIMITED.\n//\n// There's a property that says that if |Zn| became at any point in the sequence > 2, \n// the sequence will go to infinity for that C. \n//\n// This can be used to test a point in the complex plane: if, after a few iterations, \n// Zn becomes > 2, it's not belong to the set.\n\n\n#define MAX_ITERATIONS 1000\n\n// Return 0 if C is in the Mandelbrot Set\n// otherwise the (number of iterations)/(max iterations), (i.e. how fast goes to infinity) \nfloat IsInMandelbrotSet(vec2 C)\n{\n    vec2 Zn = vec2(0.,0.);\n    for(int i=0; i<MAX_ITERATIONS; i++) \n    {\n        // Square of a complex number\n        // Zn^2 = (Zn.x + i*Zn.y) * (Zn.x + i*Zn.y) = Zn.x^2 + 2*Zn.x*Zn.y*i + Zn.y^2\n        vec2 ZnSquare;\n        ZnSquare.x = Zn.x*Zn.x - Zn.y*Zn.y; // Real Part of Zn^2\n        ZnSquare.y = 2.*Zn.x*Zn.y;          // Imaginary part of Zn^2\n        \n        // Z(n+1) = Zn^2 + C\n        Zn = ZnSquare + C;\n        if(length(Zn) > 2.) return float(i)/float(MAX_ITERATIONS);\n    }\n    return 0.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   // Convert pixel coordinates to [-2,2]x[-2,2]\n    vec2 U = ( 2. * fragCoord - iResolution.xy ) / iResolution.y;\n    \n    // Movement and scale\n    U = (U+vec2(-0.3,0.))*1.2*(1.1+0.05*sin(iTime))+vec2(0.02*sin(iTime),0.04*sin(iTime)); \n    \n    // Get a color from the palette\n    vec3 col = pal( IsInMandelbrotSet(U) * 200. * -0.1 + 0.03*sin(iTime), vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(2.0,1.0,0.0),vec3(0.5,0.20,0.25) );\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Tnx Inigo Quilez for palette function, see https://www.shadertoy.com/view/ll2GD3\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}","name":"Common","description":"","type":"common"}]}