{"ver":"0.1","info":{"id":"fdtyzr","date":"1665598600","viewed":125,"name":"Line-Line 2D intersection","username":"jaszunio15","description":"Line-line intersection algorithm. I used it couple of times when prototyping.\nLine is defined by the origin point and a direction.\n\nPosting this in case you find it useful for some reason.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["line","intersection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float DrawLine(vec2 uv, vec2 origin, vec2 direction, float width)\n{\n    float pixelSize = fwidth(uv.x);\n    vec2 tangent = normalize(vec2(-direction.y, direction.x));\n    return smoothstep(width * pixelSize + pixelSize * 0.5, width * pixelSize - pixelSize * 0.5, abs(dot(uv - origin, tangent)));\n}\n\nfloat DrawPoint(vec2 uv, vec2 coord, float size)\n{\n    float pixelSize = fwidth(uv.x);\n    return smoothstep(size * pixelSize + pixelSize * 0.5, size * pixelSize - pixelSize * 0.5, distance(uv, coord));\n}\n\nvec2 LineIntersection(vec2 origin1, vec2 direction1, vec2 origin2, vec2 direction2)\n{\n    vec2 tangent1 = vec2(-direction1.y, direction1.x);\n    \n    float distanceToLine1 = dot(origin2 - origin1, tangent1);\n    float origin2ExtensionDistance = distanceToLine1 / dot(-tangent1, direction2);\n    \n    return origin2ExtensionDistance * direction2 + origin2;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy)/iResolution.y;\n    \n    vec2 origin1 = vec2(cos(iTime * 0.5), sin(iTime * 0.4)) * 0.8;\n    vec2 direction1 = normalize(vec2(sin(iTime * 0.2), cos(iTime * 0.25)));\n    \n    vec2 origin2 = vec2(sin(iTime * 0.58), cos(iTime * 0.41)) * 0.8;\n    vec2 direction2 = normalize(vec2(cos(iTime * 0.4), sin(iTime * 0.4)));\n    \n    float line1 = DrawLine(uv, origin1, direction1, 1.0);\n    float line2 = DrawLine(uv, origin2, direction2, 1.0);\n    \n    vec2 intersection = LineIntersection(origin1, direction1, origin2, direction2);\n    \n    // Output to screen\n    fragColor = vec4(0.5, 1.0, 1.0, 1.0) * (line1 + DrawPoint(uv, origin1, 5.0));\n    fragColor += vec4(1.0, 0.5, 0.5, 1.0) * (line2 + DrawPoint(uv, origin2, 5.0));       \n    fragColor += vec4(0.0, 1.0, 0.0, 1.0) * (DrawPoint(uv, intersection, 7.0));       \n    fragColor -= vec4(0.0, 1.0, 0.0, 1.0) * (DrawPoint(uv, intersection, 5.0));   \n\n}","name":"Image","description":"","type":"image"}]}