{"ver":"0.1","info":{"id":"clfyRj","date":"1690915922","viewed":37,"name":"Fork torus and sphere throwshade","username":"throwshade","description":"torus and sphere","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sphere"],"hasliked":0,"parentid":"tdKXW1","parentname":"torus and sphere"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n\nfloat smin(float a, float b, float k) {\n    \n    // Compute the difference between the two values.\n    // This is used to interpolate both values inside the range (-k, k).\n    // Smaller ranges give a better approximation of the min function.\n    float h = a - b;\n    \n    // The interval [-k, k] is mapped to [0, 1],\n    // and clamping takes place only after this transformation.\n    \n    // Map [-k, k] to [0, 1] and clamp if outside the latter.\n    h = clamp(0.5 + 0.5*h/k, 0.0, 1.0);    \n    \n    // Linearly interpolate the input values using h inside (0, 1).\n    // The second term ensures continuous derivatives at the boundaries of [0,1],\n    // but this is not completely obvious! See my blog post for details.\n    return mix(a, b, h) - k*h*(1.0-h);    \n}\nfloat Torus(vec3 p, vec2 r, vec3 rot){\n    // Apply yaw, pitch, and roll rotations\n    float c1 = cos(rot.x);\n    float s1 = sin(rot.x);\n    float c2 = cos(rot.y);\n    float s2 = sin(rot.y);\n    float c3 = cos(rot.z);\n    float s3 = sin(rot.z);\n    \n    mat3 yawMatrix = mat3(c1, 0, -s1,\n                          0, 1, 0,\n                          s1, 0, c1);\n    \n    mat3 pitchMatrix = mat3(1, 0, 0,\n                            0, c2, s2,\n                            0, -s2, c2);\n    \n    mat3 rollMatrix = mat3(c3, s3, 0,\n                           -s3, c3, 0,\n                           0, 0, 1);\n    \n    p = yawMatrix * pitchMatrix * rollMatrix * p;\n    \n    // Calculate distance to the torus\n    float x = length(p.xz) - r.x;\n    return length(vec2(x, p.y)) - r.y;\n}\n\nfloat GetDist(vec3 p) {\n\tvec4 s = vec4(0, 1, 6, 1);\n    \n    float sphereDist =  length(p-s.xyz)-s.w;\n    float planeDist = p.y;\n    float td = Torus(p-vec3(0,1,6), vec2(1.5, .3), vec3(0, 3.0*normalize(iMouse.xy)));\n    \n    float d = smin(sphereDist, planeDist, 0.8);\n    d = smin(d,td,0.8);\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(0, 5, 6);\n   \n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l);\n    if(d<length(lightPos-p)) dif *= .1;\n    \n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n  \n    vec3 col = vec3(0);\n     \n    vec3 ro = vec3(0, 3, 0);\n    vec3 rd = normalize(vec3(uv.x, uv.y-0.3, 1));\n\n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd * d;\n    \n    float dif = GetLight(p);\n    col = vec3(dif);\n    \n    \n    fragColor = vec4(col,2.0);\n    \n}\n\n\n","name":"Image","description":"","type":"image"}]}