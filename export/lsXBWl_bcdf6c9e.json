{"ver":"0.1","info":{"id":"lsXBWl","date":"1499181454","viewed":339,"name":"Shaded Horses (Smooth)","username":"Ultraviolet","description":"[WIP]\nAfter a lot of trial and errors, I eventually managed to pull a smooth shaded version of this one: https://www.shadertoy.com/view/lsXfDf\nMouse to zoom and rotate light.","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["3d","escher","tiling","horses","reproduction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float M_PI = 3.1415972;\n\n// (half) contour\nconst vec2 vert[] = vec2[](vec2(0,0),\n                             vec2(-0.066934,0.073242), \n                             vec2(-0.096244,0.12762), \n                             vec2(-0.066934,0.22177), \n                             vec2(-0.056485,0.33263), \n                             vec2(0.094141,0.38494), \n                             vec2(0.19246,0.44143), \n                             vec2(0.11297,0.52929), \n                             vec2(-0.033483,0.56905), \n                             vec2(-0.056485,0.53974), \n                             vec2(0.043933,0.47909), \n                             vec2(-0.060658,0.40167), \n                             vec2(-0.16735,0.53557), \n                             vec2(-0.094141,0.65271), \n                             vec2(0.077416,0.67992), \n                             vec2(0.14435,0.83265), \n                             vec2(0.24477,0.95607), \n                             vec2(0.30963,1.0439), \n                             vec2(0.1548,1.0544), \n                             vec2(0.0,1), \n                             vec2(0.079487,1.09), \n                             vec2(0.014655,1.1422), \n                             vec2(0.03138,1.2531), \n                             vec2(0.16318,1.2803), \n                             vec2(0.24894,1.3096), \n                             vec2(0.3117,1.3159), \n                             vec2(0.32846,1.364), \n                             vec2(0.36819,1.318), \n                             vec2(0.4456,1.3054), \n                             vec2(0.61923,1.2824), \n                             vec2(0.61506,1.2197), \n                             vec2(0.66527,1.136), \n                             vec2(0.7092,1.092), \n                             vec2(0.70502,1.0649), \n                             vec2(0.63806,0.9749), \n                             vec2(0.48953,0.8452), \n                             vec2(0.4456,0.71758), \n                             vec2(0.54185,0.68409), \n                             vec2(0.64854,0.66319), \n                             vec2(0.62133,0.77196), \n                             vec2(0.74896,0.85775), \n                             vec2(0.88493,0.93096), \n                             vec2(1.0,1.0));\n\n\n// details (represented as 1 single contour for simplicity)\nconst vec2 det[] = vec2[](\n                            vec2(0.90106,-0.082627),\n                            vec2(1.0248,0.0075632),\n                            vec2(0.90311,-0.079755),\n                            vec2(0.77286,-0.17864),\n                            vec2(0.68331,-0.25935),\n                            vec2(0.6938,-0.34666),\n                            vec2(0.65268,-0.33832),\n                            vec2(0.54527,-0.31598),\n                            vec2(0.44902,-0.28249),\n                            vec2(0.49295,-0.15487),\n                            vec2(0.55592,-0.10055),\n                            vec2(0.50339,-0.09118),\n                            vec2(0.55527,-0.10103),\n                            vec2(0.64418,-0.024416),\n                            vec2(0.51365,-0.01939),\n                            vec2(0.64148,-0.025166),\n                            vec2(0.70729,0.063619),\n                            vec2(0.52041,0.056996),\n                            vec2(0.70844,0.064794),\n                            vec2(0.71262,0.091974),\n                            vec2(0.66869,0.1359),\n                            vec2(0.52323,0.11563),\n                            vec2(0.66969,0.13964),\n                            vec2(0.61848,0.21959),\n                            vec2(0.51691,0.20233),\n                            vec2(0.61918,0.21823),\n                            vec2(0.62265,0.28235),\n                            vec2(0.44889,0.30528),\n                            vec2(0.51704,0.23839),\n                            vec2(0.5199,0.15744),\n                            vec2(0.52367,0.064497),\n                            vec2(0.51128,-0.050781),\n                            vec2(0.49314,-0.15332),\n                            vec2(0.51149,-0.05024),\n                            vec2(0.52346,0.064667),\n                            vec2(0.52052,0.15831),\n                            vec2(0.51594,0.23975),\n                            vec2(0.44902,0.30536),\n                            vec2(0.37142,0.31567),\n                            vec2(0.37547,0.28106),\n                            vec2(0.36137,0.26746),\n                            vec2(0.37519,0.28121),\n                            vec2(0.37161,0.31791),\n                            vec2(0.33188,0.36394),\n                            vec2(0.32632,0.34797),\n                            vec2(0.34413,0.31933),\n                            vec2(0.34757,0.2892),\n                            vec2(0.33379,0.26771),\n                            vec2(0.34748,0.29045),\n                            vec2(0.3442,0.32047),\n                            vec2(0.32571,0.34736),\n                            vec2(0.31512,0.31584),\n                            vec2(0.30578,0.28931),\n                            vec2(0.30406,0.26799),\n                            vec2(0.32059,0.22776),\n                            vec2(0.32034,0.21043),\n                            vec2(0.32035,0.22748),\n                            vec2(0.26329,0.23816),\n                            vec2(0.24109,0.26012),\n                            vec2(0.22483,0.24894),\n                            vec2(0.23993,0.25952),\n                            vec2(0.25707,0.27098),\n                            vec2(0.30386,0.26814),\n                            vec2(0.30433,0.28921),\n                            vec2(0.31554,0.31352),\n                            vec2(0.25236,0.30956),\n                            vec2(0.1666,0.28025),\n                            vec2(0.034805,0.25308),\n                            vec2(0.030179,0.22242),\n                            vec2(0.077108,0.22381),\n                            vec2(0.074181,0.2043),\n                            vec2(0.030134,0.22326),\n                            vec2(0.018075,0.14218),\n                            vec2(0.084837,0.089569),\n                            vec2(0.11915,0.097959),\n                            vec2(0.082915,0.089903),\n                            vec2(-0.0025677,-6.5609e-05),\n                            vec2(0.15822,0.054315),\n                            vec2(0.31362,0.043885),\n                            vec2(0.3884,0.07841),\n                            vec2(0.43726,0.15746),\n                            vec2(0.38916,0.079136),\n                            vec2(0.31305,0.043865),\n                            vec2(0.24819,-0.043995),\n                            vec2(0.14777,-0.16742),\n                            vec2(0.080888,-0.32135),\n                            vec2(0.074893,-0.36311),\n                            vec2(0.080845,-0.32015),\n                            vec2(-0.090715,-0.34736),\n                            vec2(-0.16393,-0.4645),\n                            vec2(-0.057235,-0.5984),\n                            vec2(0.047355,-0.52098),\n                            vec2(-0.0099704,-0.48725),\n                            vec2(-0.098806,-0.54886),\n                            vec2(-0.0094202,-0.48841),\n                            vec2(-0.055624,-0.46084),\n                            vec2(-0.099665,-0.4635),\n                            vec2(-0.055028,-0.46012),\n                            vec2(-0.035162,-0.43163),\n                            vec2(-0.042237,-0.39288),\n                            vec2(-0.033727,-0.43134),\n                            vec2(0.11639,-0.47077),\n                            vec2(0.19626,-0.55953),\n                            vec2(0.21725,-0.49512),\n                            vec2(0.19588,-0.55863),\n                            vec2(0.097565,-0.61512),\n                            vec2(-0.053055,-0.66743),\n                            vec2(-0.063505,-0.77829),\n                            vec2(-0.092815,-0.87244),\n                            vec2(-0.063505,-0.92682),\n                            vec2(0.0034248,-1.0038),\n                            vec2(0.082915,-0.91383),\n                            vec2(0.039776,-0.88191),\n                            vec2(-0.037953,-0.95721),\n                            vec2(0.040105,-0.8818),\n                            vec2(0.015333,-0.86276),\n                            vec2(-0.013385,-0.87653),\n                            vec2(0.015834,-0.8629),\n                            vec2(0.031838,-0.7511),\n                            vec2(0.0063407,-0.71769),\n                            vec2(0.031542,-0.75074),\n                            vec2(0.1666,-0.72348),\n                            vec2(0.25236,-0.69417),\n                            vec2(0.31512,-0.68789),\n                            vec2(0.34387,-0.57387),\n                            vec2(0.32896,-0.64211),\n                            vec2(0.37161,-0.68582),\n                            vec2(0.44902,-0.69837),\n                            vec2(0.623,-0.72085),\n                            vec2(0.66386,-0.65508),\n                            vec2(0.6213,-0.72581),\n                            vec2(0.61848,-0.78414),\n                            vec2(0.66869,-0.86783),\n                            vec2(0.71262,-0.91176),\n                            vec2(0.70844,-0.93894),\n                            vec2(0.64148,-1.0289),\n                            vec2(0.49295,-1.1586),\n                            vec2(0.44902,-1.2862),\n                            vec2(0.4925,-1.3022),\n                            vec2(0.51582,-1.2356),\n                            vec2(0.47125,-1.2109),\n                            vec2(0.51602,-1.2353),\n                            vec2(0.55933,-1.1526),\n                            vec2(0.70232,-1.0529),\n                            vec2(0.77397,-0.95581),\n                            vec2(0.71159,-0.91187),\n                            vec2(0.77337,-0.95437),\n                            vec2(0.7009,-1.0515),\n                            vec2(0.55852,-1.1528),\n                            vec2(0.51422,-1.2402),\n                            vec2(0.62801,-1.2606),\n                            vec2(0.51456,-1.2401),\n                            vec2(0.49324,-1.3029),\n                            vec2(0.54276,-1.3205),\n                            vec2(0.65196,-1.3406),\n                            vec2(0.62475,-1.2318),\n                            vec2(0.75238,-1.146),\n                            vec2(0.88835,-1.0728),\n                            vec2(1.0034,-1.0038),\n                            vec2(0.93723,-0.92682),\n                            vec2(0.90792,-0.87244),\n                            vec2(0.93723,-0.77829),\n                            vec2(0.94768,-0.66743),\n                            vec2(1.0983,-0.61512),\n                            vec2(1.1966,-0.55863),\n                            vec2(1.1171,-0.47077),\n                            vec2(1.0153,-0.44313),\n                            vec2(1.1081,-0.51535),\n                            vec2(1.0797,-0.56628),\n                            vec2(0.97079,-0.62794),\n                            vec2(1.0796,-0.5657),\n                            vec2(1.1076,-0.51499),\n                            vec2(1.0156,-0.44376),\n                            vec2(0.97068,-0.43101),\n                            vec2(0.94768,-0.46032),\n                            vec2(1.0481,-0.52097),\n                            vec2(0.9435,-0.59839),\n                            vec2(0.83681,-0.46449),\n                            vec2(0.75549,-0.50029),\n                            vec2(0.66622,-0.48935),\n                            vec2(0.75619,-0.4978),\n                            vec2(0.83779,-0.46475),\n                            vec2(0.90486,-0.34559),\n                            vec2(0.80353,-0.33633),\n                            vec2(0.91002,-0.34735),\n                            vec2(1.08,-0.31943),\n                            vec2(1.101,-0.27377),\n                            vec2(0.87067,-0.27214),\n                            vec2(1.0966,-0.2737),\n                            vec2(1.1446,-0.16405),\n                            vec2(0.97482,-0.16882),\n                            vec2(1.1485,-0.16741),\n                            vec2(1.2466,-0.042572),\n                            vec2(1.0354,-0.060845),\n                            vec2(1.2489,-0.043995),\n                            vec2(1.3138,0.043865),\n                            vec2(1.1545,0.054315));\n\n\n\n// tiles to explore for creating the base shape\nconst vec2 textureTiles[] = vec2[](vec2(0.0), \n                                   vec2(0.0, 1.0), \n                                   vec2(-1.0, 0.0), \n                                   vec2(-1.0, 1.0));\n\n// tiles to explore for creating the details\nconst vec2 detailTiles[] = vec2[](vec2(0.0), \n                                  vec2(0.0,-1.0), \n                                  vec2(0.0,-2.0), \n                                  vec2(1.0,-1.0), \n                                  vec2(-1.0,-1.0));\n\nvec2 PointLineProj(vec2 p, vec2 p0, vec2 p1)\n{\n    vec2 d = p1 - p0;\n\n    float t = dot(p - p0, d) / dot(d, d);\n    \n    vec2 proj = (1.0-t)*p0 + t*p1;\n    \n    return proj;\n}\n\nfloat PointLineDistance2(vec2 p, vec2 p0, vec2 p1)\n{\n    vec2 proj = PointLineProj(p, p0, p1);\n    \n    return dot(proj-p, proj-p);\n}\n\nfloat PointLineDistance(vec2 p, vec2 p0, vec2 p1)\n{\n    return sqrt(PointLineDistance2(p, p0, p1));\n}\n\nvec2 PointSegProj(vec2 p, vec2 p0, vec2 p1)\n{\n    vec2 d = p1 - p0;\n        \n    float t = clamp(dot(p - p0, d) / dot(d, d), 0.0, 1.0);\n\n    vec2 proj = (1.0-t)*p0 + t*p1;\n    \n    return proj;\n}\n\nfloat PointSegDistance2(vec2 p, vec2 p0, vec2 p1)\n{\n    vec2 proj = PointSegProj(p, p0, p1);\n    \n    return dot(proj-p, proj-p);\n}\n\n\nvec2 PointSegDirection(vec2 p, vec2 p0, vec2 p1)\n{\n    vec2 proj = PointSegProj(p, p0, p1);\n    \n    return proj-p;\n}\n\n\n\nfloat horizontalDistance(vec2 p, vec2 p0, vec2 p1)\n{\n    if(p.y < min(p0.y, p1.y) || p.y > max(p0.y, p1.y))\n        return 100000000.0*sign(p1.y-p0.y);\n    \n    float h = p.y-p0.y;\n    float slope = (p1.x-p0.x)/(p1.y-p0.y);\n    float l = p.x-h*slope - p0.x;\n    \n    return l*sign(p1.y-p0.y);\n}\n\n\n\nfloat verticalDistance(vec2 p, vec2 p0, vec2 p1)\n{\n    if(p.x < min(p0.x, p1.x) || p.x > max(p0.x, p1.x))\n        return 100000000.0*sign(p1.x-p0.x);\n    \n    float h = p.x-p0.x;\n    float slope = (p1.y-p0.y)/(p1.x-p0.x);\n    float l = p.y-h*slope - p0.y;\n    \n    return l*sign(p1.x-p0.x);\n}\n\n\nfloat escherTextureX(vec2 p)\n{\n    vec2 pp = vec2(mod(p.x+0.5, 1.0)-0.5, mod(p.y,2.0));\n    \n    float d = 1000.0;\n    \n    for(int i=0; i<19; ++i)\n    \tif(abs(horizontalDistance(pp, vert[i], vert[i+1])) < abs(d))\n        {\n            d = horizontalDistance(pp, vert[i], vert[i+1]);\n        }\n    \n    pp = vec2(mod(p.x+0.5, 1.0)-0.5, mod(p.y-1.0,2.0));\n    \n    for(int i=0; i<19; ++i)\n    \tif(abs(horizontalDistance(pp, vert[i], vert[i+1])) < abs(d))\n        {\n            d = horizontalDistance(pp, vert[i], vert[i+1]);\n        }\n    \n    float val = smoothstep(0.0, 1.0, d/0.05);\n    val = d;\n    \n    \n    if(mod(p.x-0.5, 2.0)-1.0 > 0.)\n        val = -val;\n    \n    return val;\n}\n\n\nfloat escherTextureY(vec2 p)\n{\n    vec2 pp = vec2(mod(p.x, 2.0), mod(p.y-.5, 1.0)+0.5);\n    \n    float d = 1000.0;\n    for(int i=19; i<vert.length()-1; ++i)\n    \tif(abs(verticalDistance(pp, vert[i], vert[i+1])) < abs(d))\n            d=verticalDistance(pp, vert[i], vert[i+1]);\n    \n\n    pp = vec2(mod(p.x-1.0, 2.0), mod(p.y-.5, 1.0)+0.5);\n    for(int i=19; i<vert.length()-1; ++i)\n    \tif(abs(verticalDistance(pp, vert[i], vert[i+1])) < abs(d)) \n            d=verticalDistance(pp, vert[i], vert[i+1]);\n    \n    float val = smoothstep(0.0, 1.0, d/0.05);\n    val = d;\n    \n    if(mod(p.y-0.5, 2.0)-1.0 > 0.)\n        val = -val;\n    \n    return val;\n}\n\n\nfloat escherTexture(vec2 p, float pixel_size)\n{\n    float x = escherTextureX(p);\n    float y = escherTextureY(p);\n    \n    x = smoothstep(-1.0, 1.0, x/pixel_size);\n    y = smoothstep(-1.0, 1.0, y/pixel_size);\n    \n    float d = x+y - 2.0 * x*y;\n    \n    return d;\n}\n\n\nfloat escherTextureContour(vec2 p, float linewidth, float pixel_size)\n{\n    vec2 pp = mod(p,1.0);\n    \n    float d = 10000000.0;\n    for(int i=0; i<vert.length(); ++i)\n    {       \n        for(int j=0; j<textureTiles.length(); ++j)\n        {\n            d = min(d, PointSegDistance2(pp+textureTiles[j], vert[i], vert[(i+1)%vert.length()]));\n        }\n    }\n    \n    d = smoothstep(0.0, 1.0, (sqrt(d)-linewidth)/pixel_size);\n    \n    return d;\n}\n\n\nfloat escherDetails(vec2 p, float linewidth, float pixel_size)\n{\n    vec2 pp = mod(p,1.0);\n    \n    float d = 10000000.0;\n    for(int i=0; i<det.length()-1; ++i)\n    {\n        for(int j=0; j<detailTiles.length(); ++j)\n        {\n            d = min(d, PointSegDistance2(pp+detailTiles[j], det[i], det[i+1]));\n        }\n    }\n    \n    d = smoothstep(0.0, 1.0, (sqrt(d)-linewidth)/pixel_size);\n    \n    return d;\n}\n\nvoid ClosestSeg(vec2 p, out int i_min, out int j_min)\n{\n    \n    vec2 pp = mod(p,1.0);\n    \n    float d = 10000000.0;\n\n    float d_temp;\n    \n    for(int i=0; i<vert.length()-1; ++i)\n    {\n        \n        for(int j=0; j<textureTiles.length(); ++j)\n        {\n            d_temp = PointSegDistance2(pp+textureTiles[j], vert[i], vert[i+1]);\n            if(d_temp < d)\n            {\n                d = d_temp;\n                i_min = i;\n                j_min = j;\n            }\n        }\n    }\n}\n\nvoid ClosestSegDetail(vec2 p, out int i_min, out int j_min)\n{\n    \n    vec2 pp = mod(p,1.0);\n    \n    float d = 10000000.0;\n\n    float d_temp;\n    \n    for(int i=0; i<det.length()-1; ++i)\n    {\n        \n        for(int j=0; j<detailTiles.length()-1; ++j)\n        {\n            d_temp = PointSegDistance2(pp+textureTiles[j], det[i], det[i+1]);\n            if(d_temp < d)\n            {\n                d = d_temp;\n                i_min = i;\n                j_min = j;\n            }\n        }\n    }\n}\n\nfloat getClosestContourSegDistance(vec2 p)\n{\n    p = mod(p,1.0);\n    int i,j;\n    ClosestSeg(p, i, j);\n    return sqrt(PointSegDistance2(p+textureTiles[j], vert[i], vert[i+1]));\n}\n\nvec3 escherNormalSmooth(vec2 p)\n{\n    float d = getClosestContourSegDistance(p);\n    \n    float coef = 0.9*d;\n    vec2 dx = vec2(0.0, 1.0);\n    vec2 dy = vec2(1.0, 0.0);\n    \n    vec2 n = vec2(getClosestContourSegDistance(p+coef*dx) - getClosestContourSegDistance(p-coef*dx),\n                  getClosestContourSegDistance(p+coef*dy) - getClosestContourSegDistance(p-coef*dy));\n    \n    \n    //float alpha = M_PI/4.0;\n    //return vec3(normalize(n)*cos(alpha), sin(alpha));\n    return vec3(normalize(vec3(n, 0.25)));\n    //return vec3(normalize(vec3(normalize(n), 1.0)));\n}\n\nfloat getClosestDetailSegDistance(vec2 p)\n{\n    p = mod(p,1.0);\n    int i,j;\n    ClosestSegDetail(p, i, j);\n    return sqrt(PointSegDistance2(p+textureTiles[j], det[i], det[i+1]));\n}\n\nvec3 escherDetailNormalSmooth(vec2 p)\n{\n    float d = getClosestDetailSegDistance(p);\n    \n    float coef = 0.9*d;\n    vec2 dx = vec2(0.0, 1.0);\n    vec2 dy = vec2(1.0, 0.0);\n    \n    vec2 n = vec2(getClosestDetailSegDistance(p+coef*dx) - getClosestDetailSegDistance(p-coef*dx),\n                  getClosestDetailSegDistance(p+coef*dy) - getClosestDetailSegDistance(p-coef*dy));\n    \n    float alpha = M_PI/4.0;\n    return vec3(normalize(n)*cos(alpha), sin(alpha));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.y;\n    \n    uv -= vec2(0.5* iResolution.x / iResolution.y, 0.5);\n    float zoom = 3.5;\n    zoom = 5.0*iMouse.x / iResolution.x;\n    if(iMouse.x < 5.0)\n        zoom = 4.0 + sin(iTime);\n    \n    uv *= zoom;\n    \n    float pixel_size = 1.5*zoom/iResolution.y;\n    float t = escherTexture(uv, pixel_size);\n    \n\tfragColor = vec4(vec3(t),1.0);\n    \n    \n    //vec3 lightDir = vec3(-iResolution.xy/iResolution.y*0.5+iMouse.xy/ iResolution.y, 1.0);\n    //lightDir = lightDir/length(lightDir);\n    float alpha = M_PI / 3.0;\n    float beta = iMouse.y/ iResolution.y * 2.0*M_PI;\n    if(iMouse.y < 5.0)\n        beta = iTime;\n    vec3 lightDir = vec3(cos(alpha)*cos(beta), cos(alpha)*sin(beta), sin(alpha));\n    \n    //vec3 n = escherNormal(uv);\n    vec3 n = escherNormalSmooth(uv);\n    //vec3 n_det = escherDetailNormal(uv);\n    vec3 n_det = escherDetailNormalSmooth(uv);\n    float blend = 0.0;\n    n = (1.0-blend)*n + blend*n_det;\n    n = n/length(n);\n    n = n*vec3(vec2(2.0*t-1.0), 1.0);\n    float s = 0.15 + 0.85 * (dot(n, lightDir));\n    \n    float spec = 0.5;\n    float shin = 64.0;\n\tfragColor = vec4(vec3(0.8, vec2(0.8-0.5*t)) * s + spec * vec3(pow(s, shin)),1.0);\n\n    float line = escherTextureContour(uv, 0.002, pixel_size);\n\tfragColor = fragColor*line;\n    \n    float details = escherDetails(uv, 0.0002, pixel_size);\n\tfragColor = fragColor*details;\n}","name":"Image","description":"","type":"image"}]}