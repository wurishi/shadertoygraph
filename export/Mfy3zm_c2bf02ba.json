{"ver":"0.1","info":{"id":"Mfy3zm","date":"1712547223","viewed":30,"name":"rotate_and_spin","username":"rookie_dork","description":"reading about matrices in Book of Shaders","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["bookofshaders"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n     \n    uv*=5.0;\n    \n    uv = fract(uv);\n\n    vec2 mover= vec2(sin(iTime), cos(iTime));\n    \n    uv +=mover *0.3;\n    \n    uv.x-=0.5;\n    uv.y-=0.5;\n    uv = rotate2d( iTime*3.14 ) *uv;\n    \n    uv+=0.5;\n\n    // Time varying pixel color\n    vec3 col = vec3(uv.x,uv.y,0.0);\n\n    float corner = step(0.4,uv.x) * step(0.4, uv.y);\n    corner *=  (1.0 - step(0.6,uv.x)) * (1.0 - step(0.6,uv.y));\n    \n    col = vec3(corner);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}