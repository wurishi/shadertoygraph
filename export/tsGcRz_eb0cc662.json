{"ver":"0.1","info":{"id":"tsGcRz","date":"1602107516","viewed":407,"name":"Strange water on glass","username":"savegor","description":"Trying to paint flowing water.. Well, the shader is really heavy and the effect is not so good, but I don't want to continue this\n:/ Very slow for fullscreen..","likes":13,"published":1,"flags":32,"usePreview":0,"tags":["water","particles","effect"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 distortion = texture(iChannel3, fragCoord / iResolution.xy);\n    \n    vec2 rain_shift = distortion.xy * 0.5;\n    \n    float light = rain_shift.x + rain_shift.y;\n    fragColor = texture(iChannel1, (fragCoord + rain_shift.xy) / iResolution.xy);\n    fragColor += max(light * 0.006, 0.0);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float noise(vec2 st) {\n    return fract(0.0123 * sin(st.x + iTime) * st.y * iTime);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,1.0,1.0);\n    \n    vec4 next_state = vec4(0.0, 0.0, 0.0, 0.0);\n    \n    vec2 sum_vel = vec2(0.0, 0.0);\n    float ng_count = 0.0;\n    for(float shifti = -1.0; shifti < 1.01; shifti += 1.0) {\n        for(float shiftj = -1.0; shiftj < 1.01; shiftj += 1.0) {\n            vec2 crd = fragCoord + vec2(shifti, shiftj);\n          \n            vec2 uv = crd / iResolution.xy;\n            \n            vec4 ng = texture(iChannel0, uv);\n            \n            vec2 cur_move = ng.xy + ng.zw;\n            \n            vec2 diff = abs(fragCoord - cur_move);\n            \n            sum_vel += ng.zw;\n            ng_count += float(abs(ng.z) + abs(ng.w) > 0.0);\n                \n            if(diff.x <= 1.0 && diff.y <= 1.0) {\n                next_state.xy = cur_move; // coord\n                next_state.zw = ng.zw;    // velocity\n            }\n        };\n    }\n    \n\tvec2 aver_vel = sum_vel / ng_count;\n    next_state.zw = 0.1 * next_state.zw + 0.9 * aver_vel;\n   \n    // water from top\n    if(abs(fragCoord.y - iResolution.y) < 0.9 && abs(fragCoord.x - 0.5 * iResolution.x) < 0.5 * iResolution.x) {\n        vec2 dir = vec2(noise(fragCoord.xx) - 0.5, noise(fragCoord.yx) - 0.5);\n        dir = normalize(dir);\n        dir *= float(sin( fragCoord.x * 0.2) < 0.5);\n    \tnext_state = vec4(fragCoord.x, fragCoord.y, dir);   \n    }\n    \n    if(distance(fragCoord.xy, iMouse.xy) < 90.0 && iMouse.z > 0.0) {\n\n    \tnext_state.zw = -next_state.zw;\n        next_state.zw += vec2(noise(fragCoord), noise(fragCoord.yx));\n        next_state.zw = 1.6 * normalize(next_state.zw);\n    }\n    \n\tnext_state.zw = mix(next_state.zw, vec2(0.0, -1.0), 0.01);\n    next_state.zw = normalize(next_state.zw);\n    \n\t// car_wipers\n    float w_speed = 0.3;\n    vec2 wipers_center = vec2(iResolution.x * 0.5, 0.0);\n    \n    float time = float(iFrame) / 60.0;\n    float w_angle = 3.1415 * (0.5 + 0.5 * sin(w_speed * time)); //from zero to pi\n\t        \n    float derivative = sign(cos(w_speed * time));\n        \n    vec2 wdiff = fragCoord - wipers_center;\n    \n    float cur_angle = atan(wdiff.y, wdiff.x);\n    \n    float wdist = length(wdiff);\n    \n    if(length(wdiff) < iResolution.y * 0.9 && abs(cur_angle - w_angle) < 0.2) {\n        vec2 dv = vec2(-wdiff.y, wdiff.x) * derivative;\n        next_state.zw = mix(next_state.zw, normalize(dv), 0.3);\n\n    }\n    \n    \n    fragColor = next_state;\n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"float noise(vec2 st) {\n    return fract(sin(st.x + iTime) * st.y * iTime);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,1.0,1.0);\n    \n    vec4 next_state = vec4(0.0, 0.0, 0.0, 0.0);\n    \n    for(float shifti = -1.0; shifti < 1.01; shifti += 1.0) {\n        for(float shiftj = -1.0; shiftj < 1.01; shiftj += 1.0) {\n            vec2 crd = fragCoord + vec2(shifti, shiftj);\n\n            vec2 uv = crd / iResolution.xy;\n            \n            vec4 ng = texture(iChannel0, uv);\n            \n            vec2 cur_move = ng.xy + ng.zw;\n                        \n            vec2 diff = abs(fragCoord - cur_move);\n            \n            if(diff.x <= 1.0 && diff.y <= 1.0) {\n                next_state.xy = cur_move; // coord\n                next_state.zw = ng.zw;    // velocity\n            }\n        };\n    }\n\n    fragColor = next_state;\n    \n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 prevValue = texture(iChannel1, fragCoord / iResolution.xy);\n    \n    float lightness = 0.0;\n    \n    for(float shifti = -2.0; shifti < 2.01; shifti += 1.0) {\n        for(float shiftj = -2.0; shiftj < 2.01; shiftj += 1.0) {\n            vec2 uv = (fragCoord + vec2(shifti, shiftj)) / iResolution.xy;\n            vec4 photon = texture(iChannel0, uv);\n            float cur_vel = length(photon.zw);\n            lightness += cur_vel * 0.09 / distance(fragCoord, photon.xy);\n        }\n    }\n\t\n    fragColor = prevValue + lightness;\n    \n    fragColor -= vec4(0.1);\n    \n    fragColor = max(vec4(0.0), fragColor);\n    fragColor = min(vec4(2.0), fragColor);\n    \n    fragColor = mix(vec4(0.3, 0.5, 0.6, 1.0), fragColor, 1.0);\n\n}","name":"Buffer D","description":"","type":"buffer"},{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 prevValue = texture(iChannel1, fragCoord / iResolution.xy);\n    \n    float density = 0.0;\n    \n    vec2 distortion = vec2(0.0, 0.0);\n    for(float shifti = -2.0; shifti < 2.01; shifti += 1.0) {\n        for(float shiftj = -2.0; shiftj < 2.01; shiftj += 1.0) {\n            vec2 shift = vec2(shifti, shiftj);\n            vec2 uv = (fragCoord + shift) / iResolution.xy;\n            vec4 buf = texture(iChannel0, uv);\n            float density = buf.x;\n            distortion -= density * shift;\n       }\n    }\n\t \n    fragColor = vec4(distortion, 0.0, 0.0);\n\n}","name":"Buffer C","description":"","type":"buffer"}]}