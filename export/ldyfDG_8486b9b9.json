{"ver":"0.1","info":{"id":"ldyfDG","date":"1530214184","viewed":701,"name":"Interactive Waves","username":"felipunkerito","description":"Move the mouse to play with it\nAlmost couldn't get this simple example to work!","likes":9,"published":3,"flags":32,"usePreview":0,"tags":["2d","paint"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Output to screen\n    fragColor = texture( iChannel0, vec2( fragCoord / iResolution.xy ) );\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define SPEED 10.0\n\nfloat rand( float a )\n{\n\n    return fract( sin( a * 46581.56 ) + 6894.15 );\n\n}\n\nfloat dis( vec2 uv, float t, float dif )\n{\n\n\n    return distance( uv, vec2(  rand( t + t ),  rand( t ) * dif ) );\n\n}\n\nfloat logSpi( vec2 uv, vec2 mou )\n{\n    \n    float dis = length( uv - mou );\n    float ang = atan( uv.x, uv.y );\n    \n    float lr = 12.0 * log( dis );\n        \n    float f = cos( ang - lr + iTime );\n    \n    //f = smoothstep( 0.1, 0.1 - 0.005, f );\n    \n    return f;\n\n}\n\n// This is taken from my own shader https://www.shadertoy.com/view/llfBzl\nfloat tri( float dis, float dec, float fre, float amp, float spe )\n{\n\n\treturn exp( -dec * dis ) * sin( dis * fre + ( -iTime * spe ) ) * amp;\n    \n}\n\n// This function returns the center of the uv coordinates and relates it to the mouse position \nfloat dis( vec2 uv, vec2 mou )\n{\n    \n\treturn length( uv - mou );\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 p = fragCoord / iResolution.y;\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 mou = iMouse.xy / iResolution.y;\n    \n    /*vec2 p = fragCoord / iResolution.xy;\n    float dif = iResolution.y < iResolution.x ? iResolution.y / iResolution.x : iResolution.x / iResolution.y;\n    p.y *= dif;*/\n    \n    float dist = dis( p, mou );\n    float amp = 1.4;\n    float dec = 45.0;\n    float fre = 400.0;\n    float spe = 5.0;\n    \n    if( iMouse.z < 0.1 ) \n    {\n    \t\n        dist = dis( p, vec2( 0.9 + sin( iTime * 5.0 ) * 0.5, 0.5 - cos( iTime * 5.0 ) * 0.5 ) );\n        \n    }\n    \n    float t = float( int( iTime * SPEED ) );\n    float r = rand( t );\n    \n    //float col = smoothstep( r * 0.025, r * 0.025 - 0.001, dis( p, t, dif ) );\n    float col = tri( dist, dec, fre, amp, spe );\n    \n    float xpi = 1.0 / iResolution.x;\n    float ypi = 1.0 / iResolution.y;\n    \n    vec4 center = texture( iChannel0, uv );\n    float top = texture( iChannel0, vec2( uv.x, uv.y + ypi ) ).r;\n\tfloat rig = texture( iChannel0, vec2( uv.x + xpi, uv.y ) ).r;\n    float lef = texture( iChannel0, vec2( uv.x - xpi, uv.y ) ).r;\n    float dow = texture( iChannel0, vec2( uv.x, uv.y - ypi ) ).r;\n    \n    float red = -(center.a - 0.5) * 2.0 + (top + lef + rig + dow - 2.0);\n    red += col; // mouse\n    red *= 0.98; // damping\n    red *= step(0.1, iTime); // hacky way of clearing the buffer\n    red = 0.5 + red * 0.5;\n    red = clamp(red, 0., 1.);\n    \n    //fragColor = vec4( vec3( mix( vec4( 0, 0, 0, center.r ), vec4( red, 0.1, 0.0, center.r ), col ) ), 1 );\n    \n    fragColor = vec4( mix( vec3( red, 0.1, 0.4 ), vec3( 0.2, col, red ), col ), center.r );\n    \n}","name":"Buffer A","description":"","type":"buffer"}]}