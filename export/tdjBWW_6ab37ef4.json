{"ver":"0.1","info":{"id":"tdjBWW","date":"1590086209","viewed":94,"name":"Trig Functions on Vec3","username":"jasonzil","description":"To better understand the default shader's behavior, I experimented with how trigonometry operations work with vec3's inside. This helped me get a better sense of how to use swizzling on vectors to write shorter code in with trig functions.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["trigonometry"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\t\n    //Default shader value\n    vec3 defaultCol =  .5 + 0.3*cos(iTime+uv.yxy+vec3(1,0,0));\n    \n    /*This shader documents the behavior of trigonometry functions on vector3 types\n\t* Trigonometry functions are the common sin(), cos(), and tan() functions\n\t* I felt it was non obvious what was happening so here it is in multiple forms.\n\t* The main take away is trig functions always\n\t\ttrig(vec3(a,b,c))\n\t\t\treturns vec3(trig(a),trig(b),trig(c)) & works in radians\n\t*/\n    \n    /* Example vec3's to practice math\n\t* redSheetHorizontal: creates a moving red gradient in the x axis\n\t* greenSheetVertical: creates a moving green gradient in the y axis\n\t* mixedSheets: combines both of the above \n\t* mixedSheetsSwizzle: performs all of them with a swizzle and offsets\n\t\t\t\t\t\t  the extra value because a vec2 cannot operate with a \n\t\t\t\t\t\t  vec3 in basic math\n\t*/\n    \n    vec3 redSheetHorizontal = vec3(uv.x,0.0,0.0) + vec3(iTime,0.0,0.0);\n    vec3 greenSheetVertical = vec3(0.0,uv.y,0.0) + vec3(0.0,iTime,0.0);\n    vec3 mixedSheets = vec3(uv.x,uv.y,0.0) + vec3(iTime,iTime, 0.0 );\n    vec3 mixedSheetsSwizzle = uv.xyx + vec3( iTime, iTime ,-uv.x);\n    \n    //copy any of the above vec3 values into this sin function\n    vec3 col = sin(redSheetHorizontal);  \n    \n    //Absolute value removes the negative color values\n    //You can also copy the defaultCol from the default shader into here.\n    col = abs(col);\n\n    // Output to screen\n    fragColor = vec4(defaultCol,1.0);\n}","name":"Image","description":"","type":"image"}]}