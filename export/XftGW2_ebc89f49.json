{"ver":"0.1","info":{"id":"XftGW2","date":"1712149314","viewed":85,"name":"3D SDF - Colouring","username":"MerryGusmas","description":" Ln.121 - Ln.142","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["material"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2018 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Cylinder intersection: https://www.shadertoy.com/view/4lcSRn\n// Cylinder bounding box: https://www.shadertoy.com/view/MtcXRf\n// Cylinder distance:     https://www.shadertoy.com/view/wdXGDr\n\n// List of other 3D SDFs: https://www.shadertoy.com/playlist/43cXRl\n//\n// and https://iquilezles.org/articles/distfunctions\n\nfloat numIterations = 2.0;\nfloat glowModifier = .04;\nfloat fractionMultiplier = 3.;\nfloat burstModifier = 10.0;\nfloat speedModifier = 5.;\nfloat highlightModifier = 1.0;\n\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r)\n{\n    vec3  ba = b - a;\n    vec3  pa = p - a;\n    float baba = dot(ba,ba);\n    float paba = dot(pa,ba);\n    float x = length(pa*baba-ba*paba) - r*baba;\n    float y = abs(paba-baba*0.5)-baba*0.5;\n    float x2 = x*x;\n    float y2 = y*y*baba;\n    \n    float d = (max(x,y)<0.0)?-min(x2,y2):(((x>0.0)?x2:0.0)+((y>0.0)?y2:0.0));\n    \n    return sign(d)*sqrt(abs(d))/baba;\n}\n\n// vertical cylinder\nfloat sdCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(r,h);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat map( in vec3 pos )\n{\n    return sdCylinder(pos, vec3(-0.2,-0.3,-0.1), vec3(0.3,0.3,0.4), 0.2 );\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    const float eps = 0.0005;\n    return normalize( e.xyy*map( pos + e.xyy*eps ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*eps ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*eps ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*eps ) );\n}\n    \n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 3\n#endif\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // camera movement\t\n    float an = 0.5 * (iTime - 10.0);\n    vec3 ro = vec3(1.0 * cos(an), 0.4, 1.0 * sin(an));\n    vec3 ta = vec3(0.0, 0.0, 0.0);\n    // camera matrix\n    vec3 ww = normalize(ta - ro);\n    vec3 uu = normalize(cross(ww, vec3(0.0, 1.0, 0.0)));\n    vec3 vv = normalize(cross(uu, ww));\n\n    vec3 tot = vec3(0.0);\n\n#if AA>1\n    for (int m = 0; m < AA; m++)\n        for (int n = 0; n < AA; n++)\n        {\n            // pixel coordinates\n            vec2 o = vec2(float(m), float(n)) / float(AA) - 0.5;\n            vec2 p = (-iResolution.xy + 2.0 * (fragCoord + o)) / iResolution.y;\n#else    \n    vec2 p = (-iResolution.xy + 2.0 * fragCoord) / iResolution.y;\n#endif\n\n            // create view ray\n            vec3 rd = normalize(p.x * uu + p.y * vv + 1.5 * ww);\n\n            // raymarch\n            const float tmax = 3.0;\n            float t = 0.0;\n            for (int i = 0; i < 256; i++)\n            {\n                vec3 pos = ro + t * rd;\n                float h = map(pos);\n                if (h < 0.0001 || t > tmax)\n                    break;\n                t += h;\n            }\n\n\n            // shading/lighting\t\n            vec3 col = vec3(0.0);\n            if (t < tmax)\n            {\n                vec3 pos = ro + t * rd;\n                vec3 nor = calcNormal(pos);\n                float dif = clamp(dot(nor, vec3(0.57703)), 0.0, 1.0);\n                float amb = 0.5 + 0.5 * dot(nor, vec3(0.0, 1.0, 0.0));\n                \n                //Colour handling until line 142\n                vec2 uv = pos.xz;\n                vec2 uvOrigin = uv;\n                vec3 finalColour = vec3(0.0);\n\n                for (float i = 0.0; i < numIterations; i++){\n                    uv = fract(uv * fractionMultiplier) - 0.5;\n\n                    float d = length(uv);\n\n                    vec3 colour = palette( 1.0, vec3(0.5,0.2,1.0),vec3(1.0,0.1,0.5),vec3(1.0,0.1,0.5),vec3(0.1,1.0,0.1));\n\n                    d = sin(d*burstModifier + (iTime * speedModifier)) / burstModifier;\n                    d = abs(d);\n\n                    d = pow(glowModifier / d, highlightModifier);\n\n\n                    finalColour += colour * d;\n                }\n\n                fragColor = vec4(finalColour, 1.0);                \n                col = finalColour;\n            }\n\n            // gamma        \n            col = sqrt(col);\n            tot += col;\n\n#if AA>1\n        }\n    tot /= float(AA * AA);\n#endif\n\n    fragColor = vec4(tot, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}