{"ver":"0.1","info":{"id":"4cs3Rs","date":"1703378847","viewed":211,"name":"Flamished Fractalited Formings","username":"leon","description":"the kind of shapes I like","likes":24,"published":3,"flags":32,"usePreview":0,"tags":["weird"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Flamished Fractalited Formings\n// leon denise 2023-12-24\n\n// render pass\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 map = texture(iChannel0, uv);\n    \n    // dim (clean the seams)\n    map.r -= 0.1;\n    \n    // blured normal\n    #define T(u) textureLod(iChannel0, uv+u, 4.).r\n    vec3 ep = vec3(10./iChannelResolution[0].xy,0);\n    vec3 normal = normalize(vec3(T(-ep.xz)-T(ep.xz), T(-ep.zy)-T(ep.zy), map.r));\n    \n    // lighting\n    float light = dot(normal, normalize(vec3(0,1,1)))*.5+.5;\n    vec3 color = vec3(light*light);\n    \n    // stencil\n    color *= smoothstep(.0,.01,map.r);\n    \n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Flamished Fractalited Formings\n// leon denise 2023-12-24\n\n// feedback displace pass\n\nfloat gyroid (vec3 seed) { return dot(sin(seed),cos(seed.yzx)); }\n\n// crazy noise\nfloat fbm (vec2 pos)\n{\n    vec3 p = vec3(pos, iTime*.1);\n    float result = 0., a = .5;\n    for (int i = 0; i < 3; ++i, a /= 2.) {\n        result += abs(gyroid(p/a)*a);\n    }\n    result = sin(result*6.283+iTime*.5-length(pos));\n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n    // curl noise\n    vec2 e = vec2(1./iResolution.y,0);\n    vec2 curl = vec2(fbm(p+e.xy)-fbm(p-e.xy), fbm(p+e.yx)-fbm(p-e.yx)) / (2.*e.x);\n    curl = vec2(curl.y, -curl.x);\n    \n    // spawn shape\n    float dist = abs(length(p)-.5);\n    float mask = smoothstep(.01, 0., dist);\n    \n    // displace\n    curl *= 0.005;\n    vec4 frame = texture(iChannel0, uv + curl);\n\n    // feedback\n    mask = max(mask, frame.r - iTimeDelta);\n    \n    fragColor = vec4(mask, curl, 1);\n}","name":"Buffer A","description":"","type":"buffer"}]}