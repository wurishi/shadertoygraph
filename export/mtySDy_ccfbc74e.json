{"ver":"0.1","info":{"id":"mtySDy","date":"1686322758","viewed":91,"name":"Playing #1","username":"matheusgirola","description":"#1 experiment with patterns","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// cosine based palette, 4 vec3 params\nvec3 palette( float t )\n{\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(2.0, 1.0, 0.0);\n    vec3 d = vec3(1.9, 0.20, 0.25);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord*2.0 - iResolution.xy)/iResolution.xy;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    \n    float d = length(uv);\n    \n    for (float i = 0.0; i <3.0 ; i++){\n        uv = fract(uv*2.5) - 0.5;\n\n        d = sin(d*3. + iTime)/3.;\n        \n        // playing with the three above lines made interesting patterns to explore\n        //d = abs(d);\n        //d = pow(0.01/d, 1.001);\n        d = 0.05/d;\n        //----\n\n        vec3 col = palette(length(uv) + i*1.2 + 0.4*iTime);\n\n        float r = 0.2 + 0.8*cos( atan(uv.y,uv.x)*10.0  + i*20. + 20.0*d);\n\n        col *= smoothstep(r, r+0.09, d);\n        \n        finalColor += col * d;\n        \n        }\n\n     // Output to screen\n     fragColor = vec4(finalColor,1.0);\n    }","name":"Image","description":"","type":"image"}]}