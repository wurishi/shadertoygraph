{"ver":"0.1","info":{"id":"4fdBzf","date":"1733340502","viewed":81,"name":"square in color","username":"nayk","description":"source generate by chatGpt","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["color"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Нормализуем координаты фрагмента\n    vec2 uv = fragCoord/iResolution.xy;\nuv*=2.1;\n vec2 uv2 = fragCoord/iResolution.xy;\n \n    // Преобразуем плоские координаты в сферические\n    float lon = uv.x * 3.14159265359; // Долгота\n    float lat = uv.y * 3.14159265359 / 2.0; // Широта\n\n\n\n    // Цвет фона\n    vec3 bgColor = vec3(0.2, 0.3, 0.4);\n uv2.xy*=vec2(fract(log(length(uv2.xy))+iTime*0.25));\n    // Координаты здания\n    vec2 buildingPos = vec2(0.5, 0.2);\n    vec2 buildingSize = vec2(0.3, 0.4);\n\n    // Проверка попадания в здание\n    vec2 dist = abs(uv2- buildingPos) - buildingSize/2.0;\n    float buildingMask = 1.0 - smoothstep(0.0, 0.02, max(dist.x, dist.y));\n\n    // Цвет здания\n    vec3 buildingColor = vec3(0.8, 0.7, 0.6);\n\n    // Окна\n    vec2 windowSize = vec2(0.02, 0.04);\n    vec2 windowSpacing = vec2(0.03, 0.05);\n      float numWindowsX =   float(buildingSize.x / windowSpacing.x);\n    float numWindowsY =   float(buildingSize.y / windowSpacing.y);\n\n    // Цикл по окнам\n    for(float i = 0.; i < numWindowsX; i++){\n        for(float j = 0.; j < numWindowsY; j++){\n            vec2 windowPos = buildingPos - buildingSize/2.0 + vec2(windowSpacing.x*(i+0.5), windowSpacing.y*(j+0.5));\n            vec2 distToWindow = abs(uv2-windowPos)-windowSize/2.0;\n            float windowMask = 1.0 - smoothstep(0.0,0.01, max(distToWindow.x, distToWindow.y));\n            buildingMask -= windowMask * buildingMask ; // Уменьшаем яркость внутри окон\n        }\n    }\n\n    // Смешивание цветов\n    vec3 finalColor = mix(bgColor, buildingColor, buildingMask);\n\n\n    // Вычисляем координаты на сфере\n    vec3 sphereCoord = vec3(\n        cos(lat+sin(iTime)) * cos(lon+cos(iTime)),\n        cos(lat) * sin(lon),\n        sin(lat+cos(iTime))\n    );\n\n    // Простое отображение сферы (можно изменить на более сложную функцию)\n    vec3 color = sphereCoord * 0.5+0.1*sin(iTime) + 0.5;\n\n    // Вывод цвета\n    fragColor = vec4(color+finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}