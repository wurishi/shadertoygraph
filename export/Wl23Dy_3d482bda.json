{"ver":"0.1","info":{"id":"Wl23Dy","date":"1560983361","viewed":413,"name":"A 2d line","username":"vchizhov","description":"A simple example of drawing a 2d line.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["line","distance","hessenormalform","hyperplane"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalized pixel coordinates in [-1,1]^2\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 ndc = 2.0*uv-vec2(1.0);\n    \n    \n    float aspectRatio = iResolution.x/iResolution.y;\n    vec2 res = vec2(aspectRatio,1.0); // don't stretch out the screen\n    \n    ndc *= res; // rescale ndc to account for the aspect ratio\n\n    // first line point (note that coordinates are originally given in [-1,1]^2 and then\n    // remapped to account for stretching)\n    vec2 v0 = res * vec2(-cos(iTime),-sin(iTime));\n    //vec2 v0 = res*vec2(-1,-1);\n    \n    // second line point - reflected around (0,0)\n    vec2 v1 = -v0;\n    // normalized direction from v0 to v1\n    vec2 dir = normalize(v1-v0);\n    \n    \n    // pixel normalized coordinates (aspect ratio preserved)\n    vec2 p = ndc;\n    // some point on the line\n    vec2 c = v0;\n    // unit length normal of the line\n    vec2 n = vec2(-dir.y,dir.x);\n    // signed distance from p to the line\n    float dist = dot(p-v0, n);\n    \n    // thickness of the line\n    float thickness = 0.01 + 0.04*abs(sin(2.0*iTime));\n    //vec3 col = vec3(abs(dist)<thickness);\n    vec3 col = vec3(1.0-smoothstep(abs(dist), 0.0, thickness));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}