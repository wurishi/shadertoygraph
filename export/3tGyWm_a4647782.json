{"ver":"0.1","info":{"id":"3tGyWm","date":"1611098942","viewed":263,"name":"ink drops","username":"dtsmio","description":"ink drops","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["noise","ink"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535\n\n\nfloat noi( in vec2 p )\n{\n    return 0.5*(cos(6.2831*p.x) + cos(6.2831*p.y));\n}\n\n//3D simplex noise from: https://www.shadertoy.com/view/XsX3zB\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\nvec3 random3(vec3 c) {\n    float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n    vec3 r;\n    r.z = fract(512.0*j);\n    j *= .125;\n    r.x = fract(512.0*j);\n    j *= .125;\n    r.y = fract(512.0*j);\n    return r-0.5;\n}\n\nfloat simplex3d(vec3 p) {\n\t vec3 s = floor(p + dot(p, vec3(F3)));\n\t vec3 x = p - s + dot(s, vec3(G3));\n\t \n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \n\t vec3 x1 = x - i1 + G3;\n\t vec3 x2 = x - i2 + 2.0*G3;\n\t vec3 x3 = x - 1.0 + 3.0*G3;\n\t \n\t vec4 w, d;\n\t \n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t w = max(0.6 - w, 0.0);\n\t \n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.0), x3);\n\t \n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t return dot(d, vec4(52.0));\n}\n\nfloat fbm(vec3 p)\n{\n\tfloat f = 0.0;\t\n\tfloat frequency = 1.0;\n\tfloat amplitude = 0.5;\n\tfor (int i = 0; i < 5; i++)\n\t{\n\t\tf += simplex3d(p * frequency) * amplitude;\n\t\tamplitude *= 0.5;\n\t\tfrequency *= 2.0 + float(i) / 100.0;\n\t}\n\treturn abs(min(f, 1.0));\n}\n\n\nfloat nsin(float a) // a = (-0.5:0.5)\n{\n    return sin(a * PI * 2.) * 0.5 + 0.5;\n}\n\nfloat ink(vec2 uv, float time, float prog)\n{\n\tfloat a = atan(uv.y, uv.x) / PI / 2.;\n    \n    float f1 = fbm(vec3(nsin(a) * 0.5, 0., time));\n    f1 += fbm(vec3(nsin(a + 0.4) * 2.5, 1., time)) * 0.5;\n    \n    float f2 = fbm(vec3(nsin(a) * 25.5, 2., time));\n    f2 += fbm(vec3(nsin(a + 0.4) * 15.5, 3., time)) * 0.5;\n    \n    float mn = prog + f1 * 6. * prog;\n    float mx = mn + (0.1 + f2 * 1.) * prog;\n    \n    return 1. - smoothstep(mn, mx, length(uv));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    vec3 col = vec3(0.);\n    \n    float time = iTime * 0.01;\n    uv *= 5.;\n    uv.x += fbm(vec3(uv.x, uv.y, time * 20.)) * 0.5;\n    \n    \n    vec3 res = vec3(0);\n    for (float i = 0.; i < 10.; i++)\n    {\n        float prog = (smoothstep(0., 0.8, fract(time * 10.) - i * 0.05));\n        float size = 2.5 * pow(prog, 3.);\n        res += ink(uv + vec2(4., 2.) * vec2(sin(i * 1264.), cos(i * 12645.)), \n                (time + i) * 8., size) * 1.;\n    }\n    \n    \n    col = res;\n    \n    fragColor = vec4(col,1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}