{"ver":"0.1","info":{"id":"4llBzX","date":"1513317464","viewed":215,"name":"Circular Texture Spin","username":"jacwilso","description":"Wrapping a texture to be circular and portioning the display.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["texture","firstshadertoy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    // limit rendering to the lower left of the screen\n    float size = iResolution.x/2.0;\n    // circular radius\n    const float radius = 0.5f;\n    // distance from center to outer edge border\n    const float maxRadius = distance(vec2(radius), vec2(0.0));\n    // speed of rotation [degrees/second]\n    const float rotationSpeed = 50.0;\n    const float PI = 3.1415926535;\n    \n    if (fragCoord.x > size || fragCoord.y > size)\n    {\n        fragColor = vec4(0.0);\n        return;\n    }\n    \n    // Calculate uv\n\tvec2 uv = fragCoord/size;\n\n    // Shift uv\n    uv -= radius;\n\t\n    // Convert to polar\n    float r = 1.0 + (distance(uv, vec2(0.0)) / maxRadius);\n\tfloat theta = atan(uv.y, uv.x) / (2.0 * PI);\n    \n    // Spin - add angle\n\ttheta += radians(iTime * rotationSpeed);\n\n    uv = vec2(theta, r);\n\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"}]}