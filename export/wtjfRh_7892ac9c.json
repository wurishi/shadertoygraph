{"ver":"0.1","info":{"id":"wtjfRh","date":"1598338218","viewed":108,"name":"animated worley noise","username":"soggymongoose","description":"animated worley noise, let me know if you have questions and have comments about how badly this is implemented ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","noise","tutorial","worley"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//number of points to be randomly placed to create the distance field (keep a float)\n#define pNum 50. \n\nvec2 random12(float uv) { //what other random number generator should I be using\n    return vec2(fract(sin(uv*523.72342)*2323.51231),fract(cos(uv*383.23563)*6248.35731));\n}\n\nfloat random21(vec2 uv) {\n    return fract(sin(dot(uv,vec2(12.541,73.652)))*45231.62423);\n}\n\nvec2 random22(vec2 uv) {\n    return vec2(fract(sin(dot(uv,vec2(14.541,68.674)))*73451.54923),\n                fract(cos(dot(uv,vec2(20.784,84.356)))*62234.85234)); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n\n\t//create points for comparison\n    vec2[int(pNum)] points; \n    for (float i = 0.; i < pNum; i++) {\n    \tpoints[int(i)] = vec2(random12(i) - .5);\n        //move dots to fix my bad random number method\n        points[int(i)].x *= 1.3;\n        points[int(i)].y *= .6;\n        \n        //animate points\n    \tif (random21(points[int(i)]) > .5) {\n      \t\tpoints[int(i)] += 0.1*sin(iTime + 3.2831*points[int(i)]);\n    \t} else {\n        \tpoints[int(i)] += 0.1*cos(iTime + 4.2831*points[int(i)]);\n    \t}\n    }\n    \n\t//calculate smallest distance from every point\n    float minDist = 2.;\n    \n    for (float i = 0.; i < pNum; i++) {\n    \tfloat tempDist = distance(points[int(i)],uv);\n        \n        if (tempDist < minDist) {\n           minDist = tempDist;\n        }\n    }\n    \n    //add blue background and invert color\n    vec3 col = vec3(max(smoothstep(.5,.0,minDist),.5));\n    \n    col -= vec3(1.-126./255.,1.-249./255.,0.)+.2;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}