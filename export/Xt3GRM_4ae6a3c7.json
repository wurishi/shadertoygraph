{"ver":"0.1","info":{"id":"Xt3GRM","date":"1468274845","viewed":872,"name":"Hall of CSG and AO","username":"geoff","description":"A field of cube - spheres. Only shading is ambient occlusion and an exponential fog.","likes":6,"published":3,"flags":0,"usePreview":0,"tags":["csg","spheretracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_ITER 1000\n#define MAX_DIST 100.0\n#define EPSILON 0.0001\n#define AO_SAMPLES 25\n#define AO_STRENGTH 1.0\n\nvec3 camPos = vec3(0.0, 0.5, iTime * 2.0);\n\nfloat map(vec3 p){\n    vec3 q = vec3(mod(p.x, 8.0) - 4.0, p.y, mod(p.z, 8.0) - 4.0);\n    float cube = length(max(abs(q) - 2.0,0.0));\n    float sphere = length(q) - 2.5;\n    return min(-p.y + 2.0, min(p.y + 2.0, max(-sphere, cube)));\n}\n\nfloat trace(vec3 ro, vec3 rd){\n \tfloat t = 0.0;\n    float d = 0.0;\n    for(int iter = 0; iter < MAX_ITER; iter++){\n        d = map(ro + rd * t);\n        if(d < EPSILON){\n            break;\n        }\n        if(t > MAX_DIST){\n        \tt = 0.0;\n            break;\n    \t}\n        t += d;\n    }\n    return t;\n}\n\n\nmat3 rotY(float d){\n    float c = cos(d);\n    float s = sin(d);\n    \n    return mat3(  c, 0.0,  -s,\n                0.0, 1.0, 0.0,\n                  s, 0.0,   c);\n}\n\nvec3 normal(vec3 p){\n    return vec3(map(vec3(p.x + EPSILON, p.yz)) - map(vec3(p.x - EPSILON, p.yz)),\n                map(vec3(p.x, p.y + EPSILON, p.z)) - map(vec3(p.x, p.y - EPSILON, p.z)),\n                map(vec3(p.xy, p.z + EPSILON)) - map(vec3(p.xy, p.z - EPSILON)));\n}\n\nfloat occlusion(vec3 ro, vec3 rd){\n    float k = 1.0;\n    float d = 0.0;\n    float occ = 0.0;\n    for(int i = 0; i < AO_SAMPLES; i++){\n        d = map(ro + 0.1 * k * rd);\n        occ += 1.0 / pow(2.0, k) * (k * 0.1 - d);\n        k += 1.0;\n    }\n    return 1.0 - clamp(AO_STRENGTH * occ, 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec3 ro = camPos;\n    vec3 rd = normalize(vec3(uv, 1.0));\n    rd *= rotY(iTime / 3.0);\n    float d = trace(ro, rd);\n    vec3 col;\n    if(d == 0.0){\n        col = vec3(0.0);\n    }else{\n        vec3 x = ro + (rd * d);\n        vec3 n = normalize(normal(x)); \n        col = vec3(occlusion(x, n));\n        col *= vec3(1.0 / exp(d * 0.08));\n    }\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}