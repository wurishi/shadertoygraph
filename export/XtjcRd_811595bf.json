{"ver":"0.1","info":{"id":"XtjcRd","date":"1509803973","viewed":235,"name":"Simple Underwater shader","username":"Lunatunny","description":"A very simple shader that you can slap onto your videogame for an easy underwater effect. You can replace iTime with any variable that increases constantly.\n\nEdit: now it's a simple demon effect","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","game","video","water","wavy","underwater","videogame"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    //Adjustable values.\n    float progress = iTime; //You can replace iTime with any variable that constantly increases\n    float waveSize = 0.01; //How extreme the wavyness is\n    float ripple = 50.0; //How \"rippley\" it is.\n    float zoom = (waveSize*3.0) + 1.0; // Zoom correction\n    \n    //We make our UV coords for the texture.\n    vec2 uv = fragCoord.xy.xy / iResolution.xy;\n \t//We offset the y by the x + progress\n    uv.y-=sin(((progress * 0.1) +uv.x) * ripple)*waveSize;\n    //We do the reverse for x. I used cosine instead to make the uv.y and uv.x sync differently\n    uv.x-=cos(((progress * 0.1) +uv.y) * ripple)*waveSize;\n    //To avoid glitchy borders from offsetting the texture\n    //We need to zoom in a bit and re-center the texture.\n    uv.xy /= vec2(zoom,zoom);\n    uv.xy += vec2((zoom-1.0)/2.0,(zoom-1.0)/2.0);\n    //Grab the rgb from our uv coord\n    vec3 tex1 = texture(iChannel0, uv).rgb;\n\tvec3 tex2 = texture(iChannel1, fragCoord.xy.xy / iResolution.xy).rgb;\n    \n    fragColor = vec4(tex1/vec3(2.0)+tex2,0.0);\n}","name":"Image","description":"","type":"image"}]}