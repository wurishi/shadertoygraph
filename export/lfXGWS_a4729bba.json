{"ver":"0.1","info":{"id":"lfXGWS","date":"1703428996","viewed":59,"name":"star and cosmos","username":"nayk","description":"sun,colorful,stars,space","likes":2,"published":1,"flags":1,"usePreview":0,"tags":["sun","colorful","space","stars"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*original https://www.shadertoy.com/view/lslyRn https://www.shadertoy.com/view/4tyfWy https://www.shadertoy.com/view/DdGfRc https://www.shadertoy.com/view/dt3GzB*/\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n#define iTime (iTime*0.75)\n\n#define r(p) mat2(cos(round((atan(p.y,p.x)+k)/f)*f-k + vec4(0,33,11,0)))\n\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam; // the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.1-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.04,1.);\t\n}\nfloat nice_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n\nvec3 palette( float t ) {\n    vec3 a = vec3(0.5,0.5,0.5);\n    vec3 b = vec3(0.5,0.5,0.5);\n    vec3 c = vec3(1.0,1.0,1.0);\n    vec3 d = vec3(0.3,0.20,0.20);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n// Triangle Formula\nfloat tri( in vec2 p, in float r )\n{\n    const float k = sqrt(1.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)*sign(p.y);\n}\n// Rotate\nmat2 rotate(float angle) {\n    return mat2(cos(angle), -sin(angle),\n                sin(angle), cos(angle));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,1.);\n\tfloat time=iTime*speed+.25;\nvec4 O =fragColor;\nvec2  F  =  fragCoord;\n float t = iTime * 0.5;\n    // Shape Amount      \n    float m = 50.0;\n    // Triangles Sharpness (0.0 For Circle)\n    float p = 0.30;\n    // Middle Triangle Size\n    float n = 0.65;\n\n    // Normalized pixel coordinates\n     \n        vec2 uvR = rotate(t*0.3) * uv;\n        vec3 fcol = vec3(0.0);\n        vec3 dcol = vec3(0.0);\n    \n    // Triangle & Triangles (IDK how it's work)\n        float tr = tri(uvR.xy,p);\n        vec3 col = palette(tr + t);\n        tr = sin(tr * m + t*10.0)/m;\n        tr = abs(tr);\n        float o = fract(tr * .0035); \n        float oo = 1. + o * 5.00; \n        uv = rotate(oo * iTime) * uv;\n        float d = abs(tri(uv,n));\n        float dc = length(uv);\n    // Final Touchs\n        tr = 0.001 / tr; //Brightness of Triangles\n        d = 0.0129 / d; //Brightness of middle Triangle\n        dc = 0.099 / dc; //Brightness of middle Circle\n        fcol += col * d +  + (tr / sin(iTime / 3.0));\n        dcol += col * (tr + dc) ;\nuv *= 2.0 * ( cos(iTime * 2.0) -2.5);\n    float f = 0.11156, d2 = f, k = iTime*f, t2;\n    vec4  p2, a = O *= t = 0.;\n    \n    vec2 R = iResolution.xy;\n    vec2 textSamp =  F/1024.+fract(k/20.);\n    vec4 sv = normalize(vec4((F+F-R)/R.y, 1, 0));\n    \n    for (float i=0.;i<6e1;i++) {\n        if(d <= .01) break;\n        p2.z -= 2.+0.11*0.5*cos(iTime);\n        p2.zx *= r(p2.xz);\n        p2.yx *= r(p2.xy);\n        \n        a += smoothstep(.002, .0, length(p2.yz) - .025) *\n             smoothstep( 1., .0, length(p2)    -  1.) *\n             (1. + cos(k+k + t+t + vec4(0,1,1,0)));\n             \n        t += d = min(max(length(p2) - 1., .05 - length(p2.yz)),\n                 .1 + texture(iChannel0, textSamp).r*.126);\n        p2 = t*sv;\n    }\n                 \n    O = .5*mix(O+.3, a, exp(-t*.1));\n\t//mouse rotation\n\t\n\tvec3 from=vec3(1.,.5,0.5)*O.xyz+fcol;\n\tfrom+=vec3(time*2.,time,-2.);\n\t float anim = sin(iTime * 12.0) * 0.1 + 1.0;    \n\n   \n\t\n\tmainVR(fragColor, fragCoord, from, dir);\t\n     fragColor*= vec4(nice_star(uv,anim) * vec3(0.55,0.5,0.15), 1.0);\n    fragColor+=O;\n}\n","name":"Image","description":"","type":"image"}]}