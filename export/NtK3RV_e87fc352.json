{"ver":"0.1","info":{"id":"NtK3RV","date":"1638198102","viewed":332,"name":"Eclipse - Ending the golden age","username":"LilBensson","description":"A stylized eclipse inspired by Berserk fanart. Originally made as a background for a school project.","likes":19,"published":1,"flags":0,"usePreview":0,"tags":["eclipse","berserk"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2x2 rotate(float a)\n{\n    float c = cos(a);\n    float s = sin(a);\n    \n    return mat2x2(c, s, -s, c);\n}\n\nuint wang_hash(uint seed)\n{\n\tseed = uint(seed ^ uint(61)) ^ uint(seed >> uint(16));\n    seed *= uint(9);\n    seed = seed ^ (seed >> 4);\n    seed *= uint(0x27d4eb2d);\n    seed = seed ^ (seed >> 15);\n    \n    return seed;\n}\n\n// Semi-random float [0, 1) from 1D position\nfloat randomFloat(float state)\n{\n\treturn float(wang_hash(uint(state))) / 4294967296.0;\n}\n\n// Semi-random floats from 2D position\nvec2 randomFloat(vec2 state)\n{\n\treturn vec2(\n        randomFloat(state.x + state.y * 1024.0), \n        randomFloat(state.x * 512.0 + state.y * 2048.0)\n    );\n}\n\nfloat perlinNoiseOctave(vec2 p)\n{\n\tfloat offsetStep = 1.0;\n    float gridSize = 10.0;\n    \n    vec2 id = floor(p * gridSize);\n    \n    // Random corners\n    float upperLeft  = randomFloat(id + vec2(0.0, 0.0)).x;\n    float upperRight = randomFloat(id + vec2(offsetStep, 0.0)).x;\n    float lowerLeft  = randomFloat(id + vec2(0.0, offsetStep)).x;\n    float lowerRight = randomFloat(id + vec2(offsetStep, offsetStep)).x;\n    \n    // Bicubic interpolation\n    vec2 st = smoothstep(0.0, 1.0, fract(p * gridSize));\n    float upperMix = mix(upperLeft, upperRight, st.x);\n    float lowerMix = mix(lowerLeft, lowerRight, st.x);\n    float finalMix = mix(upperMix, lowerMix, st.y);\n    \n\treturn finalMix;\n}\n\nfloat perlinNoise(vec2 p)\n{\n    float currentNoise = 0.0;\n    \n    // Add octaves\n    for(float i = 0.0; i < 5.0; i += 1.0)\n        currentNoise += perlinNoiseOctave(p*pow(2.0, i))/pow(2.0, i+1.0);\n    \n    // Returns value from 0 to 0.96875    \n    return currentNoise;\n}\n\nvec3 getCol(vec3 viewDir)\n{\n    vec3 col = vec3(0.0);\n    \n    vec2 uv = viewDir.xy;\n    float lenUV = length(uv);\n    \n    // Red falloff\n    col = mix(vec3(0.8, 0.05, 0.05), col, lenUV);\n    \n    // Red shine\n    float redShineRadius = lenUV + perlinNoise(vec2((atan(uv.y, uv.x) + 4.0) * 1.0, iTime * 0.01)) * 0.8 + 0.1;\n    col = mix(vec3(0.8, 0.05, 0.05), col, clamp(redShineRadius, 0.0, 1.0));\n    \n    // Yellow shine\n    float yellowHaloRadius = \n        perlinNoise(vec2(cos(atan(uv.y, uv.x)), sin(atan(uv.y, uv.x))) + vec2(4.0, 2.0 + iTime * 0.05)) * \n        0.02 + 0.42;\n    vec3 shineCol = mix(vec3(0.95, 0.95, 0.3), vec3(0.7, 0.0, 0.0), clamp(lenUV * 7.0 - 2.7, 0.0, 1.0));\n    col += shineCol * smoothstep(yellowHaloRadius, yellowHaloRadius-0.03, lenUV);\n    \n    // Overinterpolate to keep colors around origin\n    col = mix(vec3(0.50, 0.98, 0.98), col, lenUV * 2.0);\n    \n    // Red sun halo\n    col = mix(col, vec3(0.8, 0.05, 0.05), smoothstep(0.41, 0.39, lenUV));\n    \n    // Moon shadow\n    float moonRadius = 0.38 + perlinNoise(vec2(sin(atan(uv.y, uv.x)) + 3.0, 0.0)) * 0.02;\n    col = mix(col, vec3(0.1, 0.02, 0.02), smoothstep(moonRadius, moonRadius - 0.04, lenUV));\n\n    // Fog\n    uv *= rotate(0.3);\n    col = mix(col, vec3(0.6, 0.2, 0.2), perlinNoise(uv + vec2(iTime * 0.05, 0.0) + vec2(4.0)) * pow(1.0 - uv.y*uv.y, 4.0) * 0.8 * min(lenUV*1.5, 1.0));\n    col = mix(col, vec3(0.6, 0.2, 0.2), perlinNoise(uv + vec2(iTime * 0.01, 0.0) + vec2(2.0)) * pow(1.0 - uv.y*uv.y, 4.0) * 0.8 * min(lenUV*1.5, 1.0));\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y;\n\n    vec3 viewDir = normalize(vec3(uv, 0.3));\n    vec3 col = getCol(viewDir);\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}