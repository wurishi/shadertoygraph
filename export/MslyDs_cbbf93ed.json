{"ver":"0.1","info":{"id":"MslyDs","date":"1490464631","viewed":213,"name":"Very Basic Raymarcher","username":"TechEpic","description":"My first 3D shader, all advice is GREATLY appreciated.\n\nChangelog:\n-IQ's noise for ground\n-Marching distance optimization","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarcher"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define height 0.0\n#define rend 3000.0\nbool roughGround = true; //Whether or not to use IQ's Noise for ground height\nint tex = -1;\nvec3 col = vec3(0.0);\n//IQ's Noise\nfloat pn( in vec3 p )\n{\n    vec3 ip = floor(p);\n    p = fract(p);\n    p *= p*(3.0-2.0*p);\n    vec2 uv = (ip.xy+vec2(37.0,17.0)*ip.z) + p.xy;\n    uv = textureLod( iChannel2, (uv+ 0.5)/256.0, 0.0 ).yx;\n    return mix( uv.x, uv.y, p.z );\n}\nbool check(vec3 coord) {\n\tcoord.z -= 300.0;\n    if(abs(coord.x) < 50.0 && abs(coord.z) < 50.0 && abs(coord.y) < 50.0) {\n        tex = 0;\n        return true;\n    }\n    if(roughGround) {\n     \tif(coord.y < pn(vec3(coord.x/50.0,coord.z/50.0,0.0))*25.0-100.0) {\n        \ttex = 1;\n       \t \treturn true;\n    \t}\n    } else {\n    \tif(coord.y < -85.0) {\n            tex = 1;\n        \treturn true;\n        \t}\n    \t}\n    return false;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.x;\n    uv.x -= 0.5;\n    uv.y -= iResolution.y/iResolution.x/2.0;\n    col = vec3(0.0,0.7,1.0);\n    vec3 rp = vec3(cos(iTime)*200.0,height,0.0);\n    vec3 rv = vec3(uv,0.5);\n    rv = normalize(rv)/5.0;\n    float dist = 0.0;\n    while(dist < rend && !check(rp)) {\n        dist++;\n        rp += rv;\n        float c = length(rv);\n        if(c < 1.0) {\n        \tc = 1.0;\n        }\n        rv *= c*1.000539;\n    }\n    float castdist = dist;\n    dist = 0.0;\n    if(tex == 1) {\n    \tcol = texture(iChannel1,vec2(rp.xz)/400.0).xyz;\n    }\n    if(tex == 0) {\n    \tcol = texture(iChannel0,(vec2(rp.x+rp.z,rp.y))/100.0).xyz;\n    }\n     \n    rv = vec3(0.2,1.0,0.3);\n   \trv = normalize(rv)/2.0;\n    rp += rv*5.0;\n    while(dist < rend/3.0 && !check(rp)) {\n        dist++;\n        rp += rv;\n    }\n    if(dist < rend/3.0) {\n    \tcol /= 2.0;\n    }\n    castdist *= castdist;\n   \tcol = vec3(mix(col.x,0.0,castdist/(rend*rend)),mix(col.y,0.7,castdist/(rend*rend)),mix(col.z,1.0,castdist/(rend*rend)));\n\tfragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}