{"ver":"0.1","info":{"id":"fsdfRN","date":"1656149603","viewed":54,"name":"my first shader.","username":"pifragile","description":"first experiments","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["squares"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float square(vec2 st, vec2 p, float w, float b) {\n    vec2 width = normalize(iResolution.yx) * w;\n    p -= width * 0.5;\n    vec2 bl = vec2(1.001, 0.998) - step(p, st);\n    vec2 tr = step(p + width, st);\n    float pct = bl.x + bl.y + tr.x + tr.y;\n    vec2 bl2 = step(p + vec2(b),st);\n\tvec2 tr2 = 1.0 - step(p + width - vec2(b),st);  \n    \n    pct += bl2.x * bl2.y * tr2.x * tr2.y;\n    return pct;\n}\n\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord.xy/iResolution.xy;\n    vec3 color = vec3(1.0);\n\tfor(float i = 0.0; i < 50.0; i++) {\n    vec2 pos = vec2(random(vec2(pow(i, 3.14))), random(vec2(pow(i, 1.987))));\n    pos *= sin(iTime) * 0.5;\n    pos += vec2(0.5);\n    \n\tfloat pct = square(st, pos, 0.2, abs(cos(iTime)) * 0.01 + 0.001);\n    \n    color *= vec3(pct);\n    }\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}