{"ver":"0.1","info":{"id":"tsyczt","date":"1603465631","viewed":79,"name":"SphereTraceHomework","username":"csongor31","description":"droid control ships","likes":3,"published":1,"flags":48,"usePreview":0,"tags":["spheretrace"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float focus = 5.;\n\nfloat f(float d)\n{\n    if(d<focus)\n        return (focus-d)*20./focus;\n    else\n        return atan(d-focus)/pi*2.*20.;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float pdist=texelFetch(iChannel0,ivec2(fragCoord),0).w;\n    fragColor = vec4(0);\n    \n    \n    float d = 0.;//f(pdist);\n    \n    //f(0)=20, f(focus)=0, f(inf)=20.\n    \n    int k= int(clamp(d,0.,20.));\n    \n    for(int x = -k ; x <= k; ++x) for(int y = -k ; y <= k; ++y)\n    \tfragColor += texelFetch(iChannel0, ivec2(fragCoord)+ivec2(x,y), 0)*2.0;\n\tfragColor /= float((2*k+1)*(2*k+1));\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//This file contains the code for the scene\n\nconst float pi = 3.1415926535897932384626433832795;\n\n//\tPRIMITIVES are from\n//\thttps://iquilezles.org/articles/distfunctions\n\nfloat sdSphere( vec3 p, float s )\n{\n\treturn length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n\tvec3 d = abs(p) - b;\n\treturn length(max(d,0.0))+min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat sdCappedTorus(in vec3 p, in vec2 sc, in float ra, in float rb)\n{\n  p.x = abs(p.x);\n  float k = (sc.y*p.x>sc.x*p.y) ? dot(p.xy,sc) : length(p.xy);\n  return sqrt( dot(p,p) + ra*ra - 2.0*ra*k ) - rb;\n}\n\n// ROTATION MATRICES\n\nmat3 rotateX(float angle)\n{\n \treturn mat3(1, 0,\t\t   0, \n                0, cos(angle), -sin(angle),\n                0, sin(angle), cos(angle));\n}\n\nmat3 rotateY(float angle)\n{\n \treturn mat3( cos(angle), 0, sin(angle), \n                 0, \t\t 1, 0,\n                -sin(angle), 0, cos(angle));\n}\n\nmat3 rotateZ(float angle)\n{\n \treturn mat3(cos(angle), -sin(angle), 0, \n                sin(angle), cos(angle),  0,\n                0, \t\t\t0, \t\t\t 1);\n}\n\n// DROID Control ship \n\nfloat sdControlShip(in vec3 p)\n{\n    p-=vec3(0,0,2);\n    float f = sdSphere(p-vec3(0,0.5,0), 1.5);\n    float g = sdBox(p-vec3(2,0.5,0),vec3(1,1,0.5));\n    float h = sdCappedTorus((p-vec3( -1.3,0.8,0))*rotateZ(pi/2.)*rotateY(pi/2.), vec2(sin(pi/3.),cos(2.*pi/3.)), 5., 0.6);\n    return min(h,min(f,g));\n}\n\n///SDF\n\nfloat sdf(in vec3 p, float t)\n{   \n    float d = p.y-2.;\n    \n    //t = 0.; // stop moving\n    \n    for (int i = 0; i < 4; ++i)\n    {\n        d = min ( sdControlShip( \n            \t\t(p * rotateY(t/2.) * rotateY( ( float(i)*pi )/2. ) - vec3(-8, 5. + 2.* sin(t + pi * (float(i % 2)) ),-2.0))),\n             \t  d );\n    }\n    \n    return d;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":2,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// This file contains the \n// ---- SPHERE TRACING ----\n\nstruct Ray\n{\n\tvec3 P;\n\tfloat Tmin;\n\tvec3 V;\n\tfloat Tmax;\n};\n\nstruct TraceResult\n{\n    float T;\t\t// Distance taken on ray\n    int flags;\t\t// bit 0:   distance condition:     true if travelled to far t > t_max\n                    // bit 1:   surface condition:      true if distance to surface is small < error threshold\n};                  // bit 2:   iteration condition:    true if took too many iterations\n\nstruct SphereTraceDesc\n{\n    float epsilon;  //Stopping distance to surface\n    int maxiters;   //Maximum iteration count\n};\n\nTraceResult sphere_trace(in Ray ray, in SphereTraceDesc params)\n{\n    TraceResult ret = TraceResult(ray.Tmin, 0);\n    float d;\n    \n    int i = 0; do\n    {\n        d = sdf(ray.P+ret.T*ray.V, iTime);\n        ret.T+=d;\n        ++i;\n    } while (\n\t\tret.T < ray.Tmax &&       \t\t\t// Stay within bound box\n\t\td\t  > params.epsilon * ret.T &&\t// Stop if cone is close to surface\n\t\ti     < params.maxiters\t        \t// Stop if too many iterations\n\t);\n    \n    ret.flags =  int(ret.T >= ray.Tmax)\n              | (int(d <= params.epsilon* ret.T)  << 1)\n              | (int(i >= params.maxiters) << 2);\n    return ret;\n}\n\n//RELAXED SPHERE TRACE\nTraceResult relaxed_sphere_trace(in Ray ray, in SphereTraceDesc params)\n{\n    TraceResult ret = TraceResult(ray.Tmin, 0);\n    \n    float d, r_next;\n    float omega = 1.6;\n    float r = sdf(ray.P+ret.T*ray.V, iTime);\n    \n    int i = 0; do\n    {\n        d = omega * r;\n        r_next = sdf( ray.P + ( ret.T + d ) * ray.V, iTime );\n        \n        if ( r + r_next < d ) //fallback\n        {\n            d = r;\n            r_next = sdf( ray.P + ( ret.T + d ) * ray.V, iTime );\n        }\n        \n        ret.T += d;\n        r = r_next;\n        ++i;\n        \n    } while (\n\t\tret.T \t\t< ray.Tmax &&       \t\t\t// Stay within bound box\n\t\td\t\t\t> params.epsilon * ret.T &&\t\t// Stop if cone is close to surface\n\t\ti     \t\t< params.maxiters\t        \t// Stop if too many iterations\n\t);\n    \n    ret.flags =  int(ret.T  >= ray.Tmax)\n              | (int(d \t\t<= params.epsilon* ret.T)  << 1)\n              | (int(i  \t>= params.maxiters) << 2);\n    return ret;\n}\n\n//ENHANCED SPHERE TRACE\nTraceResult enhanced_sphere_trace(in Ray ray, in SphereTraceDesc params)\n{\n    TraceResult ret = TraceResult(ray.Tmin, 0);\n    \n    float r_next;\n    float omega = 0.9;\n    float d = 0., r_prev = 0., r = 0.;\n    \n    int i = 0; do\n    {\n        if(d + r_prev - r < 0.00001)\n        {\n            d = 1000000.;\n        }\n        else\n        {\n            d = r + omega * r * ( ( d - r_prev + r ) / ( d + r_prev - r ) );\n        }\n        \n        r_next = sdf( ray.P + ( ret.T + d ) * ray.V, iTime );\n        \n        if ( r + r_next < d ) //fallback\n        {\n            d = r;\n            r_next = sdf( ray.P + ( ret.T + d ) * ray.V, iTime );\n        }\n        \n        ret.T += d;\n        r_prev = r;\n        r = r_next;\n        ++i;\n        \n    } while (\n\t\tret.T \t\t< ray.Tmax &&       \t\t\t// Stay within bound box\n\t\tr_next\t\t> params.epsilon * ret.T &&\t\t// Stop if cone is close to surface\n\t\ti     \t\t< params.maxiters\t        \t// Stop if too many iterations\n\t);\n    \n    ret.flags =  int(ret.T  >= ray.Tmax)\n              | (int(r_next\t<= params.epsilon* ret.T)  << 1)\n              | (int(i  \t>= params.maxiters) << 2);\n    return ret;\n}\n\n//SELECT SPHERE TRACE\nconst int sphere_trace_selector = 2; // 1 -> relaxed, 2 -> enhanced, other -> normal\n\nTraceResult sphere_trace_select(in Ray ray, in SphereTraceDesc params)\n{\n    switch ( sphere_trace_selector )\n    {\n        case 1:  return relaxed_sphere_trace( ray, params );\n        case 2:  return enhanced_sphere_trace( ray, params );\n        default: return sphere_trace( ray, params );\n    }\n    \n}\n\n// ---- SHADING ---- (todo!)\n\nvec3 normal(const in vec3 p)\n{\n    const float eps=0.001;\n    vec3 plus = vec3(sdf(p+vec3(eps,0,0), iTime),sdf(p+vec3(0,eps,0), iTime),sdf(p+vec3(0,0,eps), iTime));\n    vec3 minu = vec3(sdf(p-vec3(eps,0,0), iTime),sdf(p-vec3(0,eps,0), iTime),sdf(p-vec3(0,0,eps), iTime));\n    return normalize(plus-minu);\n}\n\nvec4 missColor(Ray ray)\n{\n    return vec4(texture(iChannel2, ray.V).xyz,1.);\n}\nvec4 errorColor(Ray ray, float t)\n{\n    return vec4(1.,0.,0.,1.);\n}\nvec4 hitColor(Ray ray,float t)\n{\n    vec3 p = ray.P + ray.V*t;\n    vec3 n = normal(p);\n    \n \n    vec3 lightPos=vec3(10.,10.,10.);\n    \n    vec3 v = -ray.V;\n    vec3 l = normalize(lightPos-p);\n    \n      //diffuse\n    float costheta = max(dot(n,l),0.);\n    vec3 k_d = vec3(1./pi);\n    \n    //specular\n    vec3 toLight = normalize(lightPos - p);\n    vec3 toEye = -ray.V;\n    vec3 k_s = vec3(0.4);\n    \n    Ray shadow_ray = Ray(p, 0.05, l, distance(p,lightPos));\n    \n    SphereTraceDesc params = SphereTraceDesc(0.006, 64);\n    TraceResult result = sphere_trace_select(shadow_ray, params);\n    \n    \n    vec3 h = normalize(toLight+toEye);\n    float si = pow(clamp(dot(h,n),0.,1.),160.);\n    \n    //sum\n    vec3 col = (k_d + si*k_s)*costheta;\n    \n    if(bool(result.flags&2)) col = vec3(0); //arnyek\n    if(bool(result.flags&4)) col = vec3(0,1,0); //arnyek\n    \n    return vec4(col,1.);\n}\n\n// ---- CAMERA and EVENTs ----\n// Common key codes (WASD instead of arrows)\n\nconst int KeyLeft  = 65;\nconst int KeyRight = 68;\nconst int KeyUp    = 87;\nconst int KeyDown  = 83;\n\n#define isKeyHeld(k)  (texelFetch(iChannel1, ivec2(k,0), 0).x > 0.)\n\nconst vec3 EyeStartPosition = vec3(-30,10.1,1);\n\nRay Camera(vec2 fragCoord, out vec3 eye, out vec2 data2)\n{\n    /*\n        We will use the first 2 pixels of the buffer to store the information we need.\n        Every pixel contains 4 channels (floats), for RGBA. We can exploit this in the following way:\n            pixel0 = (empty, cameraX, cameraY, cameraZ)\n            pixel1 = (empty, empty, U, V)\n        where \n            cameraX, cameraY and cameraZ describe the position of the camera respectively\n            U,V give the current rotation of the camera in spherical coordinates\n\t*/\n    \n    // Ray generation\n    eye = texelFetch(iChannel0, ivec2(0,0), 0).yzw+EyeStartPosition;\t\t// camera position\n    data2 = texelFetch(iChannel0, ivec2(1,0), 0).zw;\t// spherical coordinates\n    vec2 uv\t= abs(data2);\n    \n   \tif(iMouse.z>0. || data2.x >= 0.)\t//mouse held or was held last frame\n        uv += (abs(iMouse.zw)-abs(iMouse.xy))*0.01;\n    \n    vec3 w = vec3(cos(uv.x)*cos(-uv.y),\n                  \t\t\tsin(-uv.y),\n                  sin(uv.x)*cos(-uv.y));\n    vec3 u = normalize(cross(vec3(0,1,0),w));\n\tvec3 v = cross(w,u);\n    \n    vec2 px = (fragCoord/iResolution.xy*2.-1.)*1.*normalize(iResolution.xy);\n    \n    // Keyboard and mouse handling:\n\tfloat speed = 0.2;\n    if (isKeyHeld(KeyLeft )) eye -= u*speed;\n    if (isKeyHeld(KeyRight)) eye += u*speed;\n    if (isKeyHeld(KeyUp   )) eye += w*speed;\n    if (isKeyHeld(KeyDown )) eye -= w*speed;\n    \n    if(iMouse.z>=0.)\t\t//mouse held\n        data2 = abs(data2.xy);\n\telse if(data2.x >= 0.)\t//mouse released\n        data2 = -mod(uv,2.*pi);\n    \n    // Ray generation\n    return Ray(eye,\t\t\t\t\t\t\t//V\n               0.5,\t\t\t\t\t\t\t//minT\n               normalize(w+px.x*u+px.y*v),\t//P\n               500.);\t\t\t\t\t\t//maxT\n}\n\n// ---- MAIN ----\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Generate ray from pixel\n    vec3 eye; vec2 data; // this will be saved into first two pixels\n    Ray ray = Camera(fragCoord, eye, data);\n    \n    // Set epsilon and maximum iteration\n    \n    SphereTraceDesc params = SphereTraceDesc(0.006, 64);\n    \n    // Raytrace\n    TraceResult result = sphere_trace_select(ray, params);\n    \n    /* //Debug\n\tfragColor=vec4(0.,0.,0.,1.); //debug\n    if(bool(result.flags & 1)) fragColor.r=1.;\n    if(bool(result.flags & 2)) fragColor.g=1.;\n    if(bool(result.flags & 4)) fragColor.b=1.;\n    */\n    if(bool(result.flags & 1))    fragColor = missColor(ray);    \n    else if(bool(result.flags&2)) fragColor = hitColor(ray, result.T);\n    else \t        \t\t\t  fragColor = errorColor(ray, result.T);\n\n\n    vec4 prev = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    fragColor = 0.3*prev + 0.7*fragColor;\n        fragColor.w = result.T;\n\n    // First two pixels are reserved\n    if(fragCoord.x == 0.5 && fragCoord.y == 0.5) // pixel (0,0)\n        fragColor.yzw = eye-EyeStartPosition;\n    if(fragCoord.x == 1.5 && fragCoord.y == 0.5) //pixel (1,0)\n        fragColor.zw = data;\n}","name":"Buffer A","description":"","type":"buffer"}]}