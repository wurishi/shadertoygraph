{"ver":"0.1","info":{"id":"WtySDd","date":"1584036552","viewed":564,"name":"Sinusoidal Junk 2","username":"tantalum","description":"Started out as an attempt to re-create the PS3 home screen, turned into something completely different","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["sin","trippy","periodic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n\n\n    // Output to screen\n    fragColor = texture(iChannel0,uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n\nuniform vec2 resolution;\nuniform float time;\n\n//Can't remember original source, almost identical to https://www.gamedev.net/forums/topic/645131-color-saturation-in-glsl/\nvec3 czm_sat(vec3 rgb, float adjustment){\n\tconst vec3 W = vec3(0.2125, 0.7154, 0.0721);\n\tvec3 intensity = vec3(dot(rgb, W));\n\treturn mix(intensity, rgb, adjustment);\n}\n\nvec3 shiftHue(vec3 col, float hueAdjust)\n{\n\tconst vec3 k = vec3(0.57735, 0.57735, 0.57735);\n\tfloat cosAngle = cos(hueAdjust);\n\treturn col * cosAngle + cross(k, col) * sin(hueAdjust) + k * dot(k, col) * (1.0 - cosAngle);\n}\n\nfloat rand(float n)\n{\n\treturn fract(sin(n) * 43758.5453123);\n}\n\nfloat rand(vec2 n)\n{\n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(vec2 n) {\n\tconst vec2 d = vec2(0.0, 1.0);\n\tvec2 b = floor(n);\n\tvec2 f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n\nvec3 hsv2rgb(vec3 c) {\nvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n//Normalized sin, formats output to 0.0-1.0\nfloat nsin(float x){\nreturn 0.5*sin(x)+0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    \n  vec2 uv = (fragCoord.xy / iResolution.xy).yx;\n\n  float ttime=0.15*iTime;\n  float ctime=0.003*iTime;\n  float htime=0.12*iTime;\n\n  //attempt to create a random seed from the date\n  float seed = fract(iDate.z+0.4979+ceil((iDate.w-iTimeDelta)*0.016666));\n    \n  //Uncomment for a specific seed\n  //seed = 0.33334;\n  float srand = seed*tau;\n\n  uv.x-=0.5;\n  uv*=5.0;\n  uv.x*=2.0;\n\n\n  int STEPS = 32;\n  float acc = 0.0;\n  float stime = 0.5*sin(ttime*0.79)+0.5;\n  for(int i = 1;i<STEPS;i++){\n  float dt = (float(STEPS)/float(i))*1.5*stime*0.51;\n  float ii = float(i)*1.8;\n  float amp = ((ii*0.05)-cos(time*0.7+uv.y));\n  vec2 s = vec2(sin(ttime+dt+uv.y+ii*srand-(acc*4.5591*cos(iTime*0.5+uv.y)))*1.0*amp, uv.y);\n  s += vec2(sin((ttime+ttime+dt+uv.x-uv.y+ii)*0.75)*0.25*amp, 0.0);\n  float dist = clamp(1.009-(distance(uv,s)),0.0,1.0);\n  dist*=dist*dist;\n  acc+=dist*amp*0.01*clamp(ii*0.02,1.0,20.0);\n  }\n\n  float o = (nsin(acc*tau));\n  vec3 c = vec3(o,o*o*o,o*o*o*o*o*o);\n  fragColor = vec4(shiftHue(c*c,rand(seed)*tau+htime),1.0);\n \n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define tau 6.283185","name":"Common","description":"","type":"common"}]}