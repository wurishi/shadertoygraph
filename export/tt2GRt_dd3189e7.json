{"ver":"0.1","info":{"id":"tt2GRt","date":"1560784778","viewed":90,"name":"sphere of destiny","username":"shigawire","description":"sphere","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 Q(vec3 axis, float ang) {\n    float halfang = ang/2.0;\n    return normalize(vec4(axis*sin(halfang),cos(halfang)));\n}\n\nvec3 rotq(vec3 pt, vec4 q) {\n\treturn pt+2.0*cross(q.xyz, cross(q.xyz,pt) + q.w*pt);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy*2.0-1.0;\n    uv.x *= iResolution.x/iResolution.y;\n\n    vec2 origin = vec2(cos(iTime),sin(iTime));\n    // A sphere is the points where\n    // x**2 + y**2 + z**2 - r**2 = 0\n    // r=1 .'. r**2=1. Calculate max(z) for current x,y on the sphere\n    float z = clamp( sqrt(1.0-((uv.x*uv.x)+(uv.y*uv.y))), 0.0,1.0);\n    \n    // 3d rot\n    vec3 pos = rotq(vec3(uv,z), Q(vec3(2.0,1.0,0.0),sin(iTime)/2.0));\n    uv = pos.xy; z=pos.z;\n    \n    // Time varying pixel color\n\t//vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec3 col=vec3(0.8);\n    col *= z;\n\n    // Output to screen\n    fragColor = vec4(clamp(col,0.0,1.0) ,1.0);\n}","name":"Image","description":"","type":"image"}]}