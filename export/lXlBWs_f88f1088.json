{"ver":"0.1","info":{"id":"lXlBWs","date":"1729131010","viewed":32,"name":"Fork Damaged VC geant 011","username":"geant","description":"Simulating a damaged VCR playing a video","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["chromaticaberration"],"hasliked":0,"parentid":"stGBWR","parentname":"Damaged VCR puzzle"},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Hint, it's a few lines of code, and makes use of a tan function :)\n    vec2 warpedUv = uv;\n    \n    float boundTime = fract(1.0 * iTime);\n    \n    float windSize = 0.055;\n    float bBound = max(0.0, boundTime - windSize);\n    float tBound = min(1.0, boundTime + windSize);\n        \n    if (uv.y < tBound && uv.y > bBound)\n    {\n        float y = (uv.y - bBound) / (tBound - bBound);\n    \n        warpedUv.x -= 0.25 * pow(0.01 * tan(y), 0.5);\n        \n        warpedUv.x -= 0.04 * fract(50.0 * tan(-20.0 * uv.y));\n    }\n    \n    float offset = 0.01 + 0.005 * (sin(100.0 * iTime) * 0.5 + 0.50);\n    \n    vec2 offset1 = vec2(0.00, -offset);\n    vec2 offset2 = vec2(-offset, -offset);\n    vec2 offset3 = vec2(offset, offset);\n\n    \n    float r = texture(iChannel0, warpedUv + offset1).r;\n    float g = texture(iChannel0, warpedUv + offset2).g;\n    float b = texture(iChannel0, warpedUv + offset3).b;\n                              \n    vec3 col = vec3(r, g, b);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}