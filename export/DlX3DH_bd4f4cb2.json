{"ver":"0.1","info":{"id":"DlX3DH","date":"1671668357","viewed":155,"name":"triangular prism intersection","username":"jt","description":"Calculate barycentric coordinates and distance to an infinite triangular prism aligned along the z-axis.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["intersection","prism","barycentric","infinite","triangular"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/DlX3DH triangular prism intersection by jt\n\n// Calculate barycentric coordinates and distance to infinite triangular prism aligned along the z-axis.\n\n// tags: intersection, prism, barycentric, infinite, triangular\n\n// The MIT License\n// Copyright (c) 2022 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define pi 3.1415926\n#define DIST_MAX 1000.0\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n/*\n// https://en.wikipedia.org/wiki/Barycentric_coordinate_system#Edge_approach\nvec3 barycentric(vec2 a, vec2 b, vec2 c, vec2 p)\n{\n    float d = (b.y - c.y) * (a.x - c.x) + (c.x - b.x) * (a.y - c.y);\n    float alpha = ((b.y - c.y) * (p.x - c.x)+(c.x - b.x) * (p.y - c.y)) / d;\n    float beta = ((c.y - a.y) * (p.x - c.x) + (a.x - c.x) * (p.y - c.y)) / d;\n    float gamma = 1.0 - alpha - beta;\n    return vec3(alpha, beta, gamma);\n}\n*/\n/*\n// https://en.wikipedia.org/wiki/Barycentric_coordinate_system#Edge_approach\nvec3 barycentric(vec2 r1, vec2 r2, vec2 r3, vec2 r)\n{\n    vec3 lambda;\n    lambda.xy = inverse(mat2(r1.x-r3.x,r1.y-r3.y,r2.x-r3.x,r2.y-r3.y)) * (r-r3);\n    lambda.z = 1.0 - lambda.x - lambda.y;\n    return lambda;\n}\n*/\nvec4 triangular_prism_intersection(vec2 ro, vec2 rd, vec2 a, vec2 b, vec2 c)\n{\n    vec2 ba = b - a; vec2 nba = vec2(-ba.y, ba.x);\n    vec2 cb = c - b; vec2 ncb = vec2(-cb.y, cb.x);\n    vec2 ac = a - c; vec2 nac = vec2(-ac.y, ac.x);\n\n    vec4 rab, rbc, rca; float t;\n    rab.w = dot(a - ro, nba)/dot(rd, nba); if(rab.w < 0.0) rab.w = DIST_MAX; t = dot(ro + rd * rab.w - a, ba)/dot(ba,ba); if(t < 0.0 || t > 1.0) rab.w = DIST_MAX; else rab.xyz = vec3(1.0-t,t,0.0);\n    rbc.w = dot(b - ro, ncb)/dot(rd, ncb); if(rbc.w < 0.0) rbc.w = DIST_MAX; t = dot(ro + rd * rbc.w - b, cb)/dot(cb,cb); if(t < 0.0 || t > 1.0) rbc.w = DIST_MAX; else rbc.xyz = vec3(0.0,1.0-t,t);\n    rca.w = dot(c - ro, nac)/dot(rd, nac); if(rca.w < 0.0) rca.w = DIST_MAX; t = dot(ro + rd * rca.w - c, ac)/dot(ac,ac); if(t < 0.0 || t > 1.0) rca.w = DIST_MAX; else rca.xyz = vec3(t,0.0,1.0-t);\n\n    //float d = min(min(rab.w, rbc.w), rca.w);\n    //return vec4(barycentric(a, b, c, ro + rd * d), d);\n    \n    if(rab.w < rbc.w && rab.w < rca.w) return rab;\n    if(rbc.w < rca.w) return rbc;\n    return rca;\n}\n\nvec4 triangular_prism_intersection(vec3 ro, vec3 rd, vec2 a, vec2 b, vec2 c)\n{\n    return triangular_prism_intersection(ro.xy, rd.xy, a, b, c);\n}\n\nvec2 triangular_prism_normal_from_barycentric2(vec2 a, vec2 b, vec2 c, vec3 q)\n{\n    if(q.x < q.y && q.x < q.z) return normalize(vec2(b.y-c.y,c.x-b.x));\n    if(q.y < q.z) return normalize(vec2(c.y-a.y,a.x-c.x));\n    return normalize(vec2(a.y-b.y,b.x-a.x));\n}\n\nvec3 triangular_prism_normal_from_barycentric3(vec2 a, vec2 b, vec2 c, vec3 q)\n{\n    return vec3(triangular_prism_normal_from_barycentric2(a, b, c, q), 0.0);\n}\n\nfloat checker(vec2 p)\n{\n    return step(0.0, sin(pi * p.x + pi/2.0)*sin(pi *p.y + pi/2.0));\n}\n\nfloat checker(vec3 p)\n{\n    return step(0.0, sin(pi * p.x + pi/2.0)*sin(pi *p.y + pi/2.0)*sin(pi *p.z + pi/2.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 I)\n{\n    bool demo = max(iMouse.x, iMouse.y) < 10.0;\n    vec2 R = iResolution.xy;\n    //I = 2.0 * I.xy / R - 1.0;\n    //I.x *= R.x / R.y;\n    I = (2.0 * I - R) / R.y;\n    vec3 rd = normalize(vec3(I.x, 2.0, I.y)); // must be normalized!\n    //vec3 ro = vec3(0.0,-0.0, 0.0); // inside view\n    vec3 ro = vec3(0.0,-5.0, 0.0); // outside view\n    //vec3 ro = vec3(0.0,fract(iTime/10.0)<0.5 ? -5.0 : 0.0, 0.0); // alternate outside/inside view\n\n    float mx = -2.0 * pi * float(iMouse.x) / float(iResolution.x);\n    float my = -pi / 2.0 + pi * float(iMouse.y) / float(iResolution.y);\n    mx = !demo ? mx : +pi / 4.0 + 2.0 * pi * fract(iTime * 0.01);\n    my = !demo ? my : fract(iTime/10.0)<0.5 ? -pi / 6.0 : pi/2.0;\n\n    mat3 M = yaw_pitch_roll(mx, my, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n\n    //vec3 lightdir = normalize(vec3(1.0, 2.0, 3.0));\n    vec3 lightpos = 2.0 * vec3(cos(iTime),sin(iTime), 0.0);\n    vec3 color = vec3(0.0);\n    vec3 ext = vec3(1.0, sqrt(3.0), 1.0);\n\n    ro.z -= ext.z / 2.0;\n\n    vec2 a = vec2(-1,-0.25); vec2 b = vec2(0,+1); vec2 c = vec2(+1,-0.25);\n    vec4 result = triangular_prism_intersection(ro, rd, a, b, c);\n\n    if(result.w < DIST_MAX)\n    {\n        vec3 dst = ro + result.w * rd;\n        vec3 lightdiff = lightpos - dst;\n        vec3 lightdir = normalize(lightdiff);\n        vec3 normal = triangular_prism_normal_from_barycentric3(a, b, c, result.xyz);\n        float ambient = 0.1;\n        float diffuse = 5.0 * max(0.0, dot(normal, lightdir)) / dot(lightdiff, lightdiff);\n        color = vec3(1);\n        color *= result.xyz;\n        //color *= normal * 0.5 + 0.5;\n        float t = result.z < result.y && result.z < result.x ? result.x : result.y < result.x ? result.z : result.y;\n        color *= mix(vec3(0.2), vec3(1.0), checker(vec2(t, dst.z)));\n        //color *= mix(vec3(0.2), vec3(1.0), checker(dst));\n        color *= (diffuse + ambient);\n    }\n\n    // Output to screen\n    fragColor = vec4(sqrt(color),1.0);\n}\n","name":"Image","description":"","type":"image"}]}