{"ver":"0.1","info":{"id":"slyGzV","date":"1638000269","viewed":88,"name":"blending no overlap","username":"wnu","description":"If you have notes on how to make this better please comment, the blending is good when centers of circles are closer than 0.5, but not otherwise","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["blending"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nfloat smax(float a, float b, float r){\n    return ((a+b) + sqrt((a-b)*(a-b) + r))/2.;\n}\n\nfloat blend(float s1, float s2){\n    return smoothstep(0.,1.,1.-(s1 - s2 + 1.)/2.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 R = iResolution.xy;\n    vec2 uv = fragCoord/R;\n    uv -= 0.5;\n    uv.x *= R.x/R.y;\n\n    vec2 p1 = vec2(0.,0.);\n    vec2 p2 = vec2(sin(iTime/2.)/2.,0.);\n    vec2 p3 = vec2(0.,sin(iTime/2.)/2.);\n    \n    vec2 uv1 = uv-p1;\n    vec2 uv2 = uv-p2;\n    vec2 uv3 = uv-p3;\n    \n    float l1 = length(uv1);\n    float l2 = length(uv2);\n    float l3 = length(uv3);\n    \n    float s1 = smoothstep(0.5,0.,l1);\n    float s2 = smoothstep(0.5,0.,l2);\n    float s3 = smoothstep(0.5,0.,l3);\n   \n    \n    float sm1 = SmoothMax(s1,s2,0.5);\n    float sm2 = SmoothMax(sm1,s3,0.5);\n    \n    //float sa = 1.-(s1 - s2 + 1.)/2.;\n    //float sa2 = 1.-(sm1 - s3 + 1.)/2.;\n    \n    float sa = blend(s1,s2);\n    float sa2 = blend(sm1,s3);\n    \n\n    vec3 c1 = vec3(1.,0.,0.);\n    vec3 c2 = vec3(0.,1.,0.);\n    vec3 c3 = vec3(0.,0.,1.);\n   \n    \n    vec3 c = mix(c1,c2,sa);\n    c = mix(c,c3,sa2);\n    \n    \n    vec3 col = vec3(c*sm2);\n    \n    col = pow(col, vec3(1.0/2.2));\n    \n    //Can certainly be improved but its not so bad\n    //Want to make slope when touching result from how far into each other they touch\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}