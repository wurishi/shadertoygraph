{"ver":"0.1","info":{"id":"ddVGW1","date":"1678477218","viewed":144,"name":"Fork sampling ","username":"Carandiru","description":"found something interesting....","likes":3,"published":3,"flags":32,"usePreview":0,"tags":["raytracing","dithering","phylotaxis"],"hasliked":0,"parentid":"mdKGWh","parentname":"sampling fork Phylotaxis"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// fork, thought - really good visualization of sampling, the area sampled, and the resulting effect of the sampling positions.\n// + the # of samples doubles every 10s \n// + the distance between samples is decreasing for an interval every 10s\n\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 2\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 tot = vec3(0.0);\n#if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (2.0*(fragCoord+o)-iResolution.xy)/iResolution.xy;\n#else    \n        vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.xy;\n#endif\n        \n        float d = textureLod(iChannel1, p * 0.5f + 0.5f, 0.0).r;\n        \n        // linear\n        tot += vec3(d);\n#if AA>1\n    }\n    tot /= float(AA*AA);\n#endif\n\n    float dither = textureLod(iChannel0, fragCoord.xy / 1024.0f, 0.0).r;\n    \n    // to gamma space & dither\n    tot = sqrt(tot) + dither * (7.0f/255.0f);\n    \n\tfragColor = vec4( tot, 1.0 );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// found something interesting\n\nvec3 eval(vec2 uv, vec2 cen){\n    float sdf = length(uv - cen);\n    // Time varying pixel color\n    float c0 = step(sdf, 0.25);\n    float c1 = 1.0 - step(sdf, 0.15);\n    vec3 col = vec3(1.0 - c0*c1);\n    \n    return col;\n}\n\n//float rand(float co) { return fract(sin(co*(91.3458)) * 47453.5453); }\n//float rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }\n//float rand(vec3 co){ return rand(co.xy+rand(co.z)); }\nvec2 randv2(vec2 co){ \n\n   return( textureLod(iChannel0, (co * iResolution.xy) / 1024.0f, 0.0f).rg - 0.5f );\n   //return vec2(rand(co), rand(co + vec2(7607.0, 6211.0))) - vec2(0.5); \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pxy = 1.0f /iResolution.xy;\n    vec2 uv = fragCoord*pxy;\n    uv = uv * 2.0f - 1.0f;\n    uv.y *= iResolution.y/iResolution.x;\n    \n    \n    int N = 16;\n    const float interval = 10.0f;\n    const float hh = 1.001f;\n    float t0 = iTime + 2000.0f;\n    float tt = iTime + 40.0f;\n    \n    N = N * (int(t0/interval) + 1);\n    float next = mod(t0,interval);\n    tt = next/interval * tt;\n   // tt /= float(N) / 512.0f; // slow down \n    \n    // prevent performance problem:\n    if ( iTimeDelta > (1.0f/30.0f) )\n        N = 16; // reset\n\n    float c = 0.0025;\n    float minDiff = 1.;\n    vec2 last = vec2(0);\n\n    for(float i = 1.; i < float(N); i++) {\n        float angle = 137.5009 * i + t0*0.00001f;\n        float radius = c * sqrt(i*tt);\n        float x = last.x = radius * cos(angle) - last.x * hh;\n        float y = last.y = radius * sin(angle) - last.y * hh;\n\n        vec2 pos = (vec2(x, y) * iResolution.xy + 0.5f) / iResolution.xy;\n        float diff = distance(pos, uv) * 1000.0f * (1.0f - (i / float(N)));\n        if(diff < minDiff) {\n            minDiff = diff;\n        }\n    }\n\n    minDiff = smoothstep(0., .5, minDiff);\n    minDiff = minDiff * minDiff;\n    \n    float lastDiff = textureLod(iChannel1, fragCoord.xy/iResolution.xy, 0.0f).x;\n    \n    minDiff = min(minDiff, lastDiff + 1000.000f);\n    \n    fragColor = vec4(minDiff, 0, 0, 1);\n}","name":"Buffer A","description":"","type":"buffer"}]}