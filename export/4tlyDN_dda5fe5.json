{"ver":"0.1","info":{"id":"4tlyDN","date":"1504878624","viewed":763,"name":"Color to Grayscale","username":"aureliendrouet","description":"Colorimetric (luminance-preserving) conversion to grayscale","likes":2,"published":1,"flags":0,"usePreview":1,"tags":["grayscale"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy / iResolution.xy);\n    vec3 gammaColor = texture(iChannel0, uv).xyz;\n    // ungamma (should be 2.2 but...)\n    vec3 color = pow(gammaColor, vec3(2.0));\n    // grayscale conversion\n    float gray = dot(color, vec3(0.2126, 0.7152, 0.0722));\n    // regamma\n    float gammaGray = sqrt(gray);\n    fragColor = vec4(gammaGray, gammaGray, gammaGray, 1.0);\n}","name":"Image","description":"","type":"image"}]}