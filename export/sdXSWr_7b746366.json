{"ver":"0.1","info":{"id":"sdXSWr","date":"1618475869","viewed":62,"name":"Mandelbrot 0002","username":"larrytheking","description":"Simple mandelbrot with zoom","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int   c_MaxIterations = 256;\nconst float c_Threshold = 10000.0;\n\nconst vec2  c_ZoomTarget = vec2(0.2134,0.6899);\nconst float c_ZoomRange[2] = float[2](0.5, 10000.0);\n\nconst vec3  c_Gradient[2] = vec3[2](vec3(0.8, 0.9, 1.0), vec3(0, 0, 0.1));\n\nvec2 complexSquare(in vec2 c)\n{\n    return vec2(c.x * c.x - c.y * c.y, 2.0 * c.x * c.y);\n}\n\nint Mandelbrot(in vec2 c, in float threshold, in int maxIterations, out vec2 z)\n{\n    int iteration = 0;\n    z = vec2(0, 0);\n\n    do {\n        z = complexSquare(z) + c;\n    } while(++iteration < maxIterations && length(z) < threshold);\n\n    return iteration;\n}\n\nvec3 ColorizeIteration(in int iteration, in int maxIterations)\n{\n    float alpha = 1.0 - float(iteration) / float(maxIterations);\n  \n    vec3 color = mix(c_Gradient[0], c_Gradient[1], alpha * alpha * alpha);\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n    \n    float alpha = 0.5 + 0.5 * sin(0.25 * iTime);\n    \n    float zoom = mix(c_ZoomRange[0], c_ZoomRange[1], alpha * alpha * alpha);\n    \n    vec2 x = (uv - 0.5) / zoom - c_ZoomTarget;\n\n    vec2 z;\n    int iteration = Mandelbrot(x, c_Threshold, c_MaxIterations, z);\n\n    vec3 col = ColorizeIteration(iteration, c_MaxIterations);\n        \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}