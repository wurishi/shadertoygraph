{"ver":"0.1","info":{"id":"XdGfzG","date":"1666833777","viewed":75,"name":"tutorial-ml-01","username":"rockes","description":"https://gamedevelopment.tutsplus.com/tutorials/a-beginners-guide-to-coding-graphics-shaders--cms-23313\n\nreferences\nhttps://www.johndcook.com/blog/2009/08/24/algorithms-convert-color-grayscale/\nhttps://www.shadertoy.com/view/llBGWc\nwatch?v=rlgbtoqfSM0","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tutorial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void example1(out vec4 fragColor, vec2 fragCoord) {\n    vec2 xy = fragCoord.xy; //We obtain our coordinates for the current pixel\n    vec4 solidRed = vec4(0,0.0,0.0,1.0);//This is actually black right now\n    if(xy.x > 300.0){//Arbitrary number, we don't know how big our screen is!\n        solidRed.r = 1.0;//Set its red component to 1.0\n    }\n    fragColor = solidRed;\n}\n\nvoid example1_challenge(out vec4 fragColor, vec2 fragCoord) {\n    vec2 xy = fragCoord.xy; //We obtain our coordinates for the current pixel\n    xy.x = xy.x / iResolution.x; //We divide the coordinates by the screen size\n    xy.y = xy.y / iResolution.y;\n    // Now x is 0 for the leftmost pixel, and 1 for the rightmost pixel\n    vec4 solidRed = vec4(0,0.0,0.0,1.0); //This is actually black right now\n    //if(xy.y > 0.5){ //horizontal\n    //if(xy.x > 0.5){ //vertical\n    if(xy.x > xy.y){ //diagonal\n        solidRed.r = 1.0; //Set its red component to 1.0\n        solidRed.g = xy.x; //gradient\n    }\n    fragColor = solidRed;\n}\n\nvoid example2( out vec4 fragColor, vec2 fragCoord ) {\n    vec2 xy = fragCoord.xy / iResolution.xy;//Condensing this into one line\n    vec4 texColor = texture(iChannel0,xy);//Get the pixel at xy from iChannel0\n    texColor.b = xy.x;\n    fragColor = texColor;//Set the screen pixel to that color\n}\n\nvoid example2_challenge( out vec4 fragColor, vec2 fragCoord ) {\n    vec2 xy = fragCoord.xy / iResolution.xy;//Condensing this into one line\n    vec4 texColor = texture(iChannel0,xy);//Get the pixel at xy from iChannel0\n    //https://www.johndcook.com/blog/2009/08/24/algorithms-convert-color-grayscale/\n    texColor.rgb = vec3((texColor.r + texColor.g + texColor.b) / 3.);\n    fragColor = texColor;//Set the screen pixel to that color\n}\n\nvoid example3( out vec4 fragColor, vec2 fragCoord ) {\n    vec2 xy = fragCoord.xy / iResolution.xy; // Condensing this into one line\n    vec4 texColor = texture(iChannel1,xy); // Get the pixel at xy from iChannel0\n    texColor.r *= abs(sin(iTime));\n    texColor.g *= abs(cos(iTime));\n    texColor.b *= abs(sin(iTime) * cos(iTime));\n    fragColor = texColor; // Set the screen pixel to that color\n}\n\nvoid example3_challenge( out vec4 fragColor, vec2 fragCoord ) {\n    vec2 xy = fragCoord.xy / iResolution.xy; // Condensing this into one line\n    vec4 texColor = texture(iChannel1,xy); // Get the pixel at xy from iChannel0\n\tvec3 blacknwhite = vec3((texColor.r + texColor.g + texColor.b) / 3.);\n    vec3 mixture = mix( texColor.rgb, blacknwhite, abs(sin(iTime)) );\n    texColor.rgb = mixture;\n    fragColor = texColor; // Set the screen pixel to that color\n}\n\nvoid final_challenge( out vec4 fragColor, vec2 fragCoord ) {\n    vec2 xy = fragCoord.xy / iResolution.xy;\n    vec4 texColor = texture(iChannel1,xy);\n    //https://www.shadertoy.com/view/llBGWc\n    float threshold = 0.55;\n    vec4 greenScreen = vec4(0.,1.,0.,1.);\n    vec3 diff = texColor.rgb - greenScreen.rgb;\n    if(dot(diff, diff) < threshold) {\n        //texColor.rgb = vec3(1.,0.,0.); //change green to red\n        texColor = texture(iChannel2, xy);\n    }\n    fragColor = texColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\t//example1(fragColor, fragCoord);\n    //example1_challenge(fragColor, fragCoord);\n    //example2(fragColor, fragCoord);\n    //example2_challenge(fragColor, fragCoord);\n    //example3(fragColor, fragCoord);\n    //example3_challenge(fragColor, fragCoord);\n    final_challenge(fragColor, fragCoord);\n}","name":"Image","description":"","type":"image"}]}