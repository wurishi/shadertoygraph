{"ver":"0.1","info":{"id":"ldK3Dc","date":"1456887338","viewed":454,"name":"Square Circle Dance","username":"vamoss","description":"Original work http://49.media.tumblr.com/0913449568032fe45a5310854426eb2e/tumblr_nmjnksPbul1tcuj64o1_400.gif","likes":24,"published":1,"flags":0,"usePreview":0,"tags":["circle","illusion","square","dance","rythm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nOriginal work\nhttp://49.media.tumblr.com/0913449568032fe45a5310854426eb2e/tumblr_nmjnksPbul1tcuj64o1_400.gif\n*/\n\n#define PI 3.14159265359\n\nfloat circle(in vec2 _st, in float _radius){\n    vec2 dist = _st-vec2(0.5);\n\tfloat angle = atan(dist.y, dist.x);\n    if(angle<-PI/2.0) return 0.0;\n    else if(angle>0.0 && angle<PI/2.0) return 0.0;\n    return 1.-smoothstep(_radius-(_radius*0.01),\n                         _radius+(_radius*0.01),\n                         dot(dist,dist)*4.0);\n}\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nfloat easeInOutExpo(float t, float b, float c, float d) {\n\tt /= d/2.0;\n\tif (t < 1.0) return c/2.0 * pow( 2.0, 10.0 * (t - 1.0) ) + b;\n\tt--;\n\treturn c/2.0 * ( -pow( 2.0, -10.0 * t) + 2.0 ) + b;\n}\n\nfloat easeInOutQuad(float t, float b, float c, float d) {\n\tt /= d/2.0;\n\tif (t < 1.0) return c/2.0*t*t + b;\n\tt--;\n\treturn -c/2.0 * (t*(t-2.0) - 1.0) + b;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.y;\n    vec2 zoom = vec2(8.0, 8.0);\n    vec2 index = floor(zoom * uv)/zoom;\n    uv *= zoom;\n    \n    \n    float behavior = 0.0;    \n    uv.x += step(1., mod(uv.y,2.0));\n    behavior = step(1., mod(uv.x,2.0));\n    \n    float totalColors = 8.0;\n    float cIndex = floor((index.x+index.y)*totalColors);\n    cIndex = mod(cIndex, totalColors);\n    vec3 color = vec3(0.0);\n    if(cIndex==0.0) color = vec3(0.92, 0.35, 0.20);\n    else if(cIndex==1.0) color = vec3(0.50, 0.77, 0.25);\n    else if(cIndex==2.0) color = vec3(0.00, 0.63, 0.58);\n    else if(cIndex==3.0) color = vec3(0.08, 0.45, 0.73);\n    else if(cIndex==4.0) color = vec3(0.38, 0.18, 0.55);\n    else if(cIndex==5.0) color = vec3(0.76, 0.13, 0.52);\n    else if(cIndex==6.0) color = vec3(0.91, 0.13, 0.36);\n    else if(cIndex==7.0) color = vec3(0.96, 0.71, 0.17);\n    \n    uv = fract(uv);\n    \n    //crazy result\n    //uv /= 2.0;\n    \n    float frame = iTime/3.0;\n    if(iMouse.x>0.0) frame *= 5.0 * (iMouse.x / iResolution.x);//velocity\n        \n    float loop = fract(frame);\n    \n    float freq = 0.0;\n        \n    float angle = 0.0;\n    if(behavior==0.0) {\n        if(loop<0.5)\n        \tangle = PI/2.0*easeInOutExpo(loop*2.0, 0.0, 1.0, 1.0);\n        else\n        \tangle = PI/2.0+PI/2.0*easeInOutExpo((loop-0.5)*2.0, 0.0, 1.0, 1.0);\n    }else{\n        angle = PI/2.0*easeInOutQuad((sin(frame*PI*4.0)+1.0)/2.0, 0.0, 1.0, 1.0);\n    }\n    \n    uv -= vec2(0.5);\n    uv = rotate2d( angle ) * uv;\n    uv += vec2(0.5);\n    \n    vec3 circ = vec3(circle(uv,1.0));\n    \n    color *= circ;\n    \n\tfragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}