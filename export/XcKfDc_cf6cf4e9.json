{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"float Hash_0(vec2 p_0)\n{\n    vec2 _S1 = fract(sin(p_0 * 123.45600128173828125) * 567.8900146484375);\n    vec2 randP_0 = _S1 + dot(_S1, _S1 * 34.56000137329101562);\n    return fract(randP_0.x * randP_0.y);\n}\n\nfloat bg_0(vec2 p_1)\n{\n    vec2 _S2 = p_1;\n    const vec4 _S3 = vec4(0.0, 11.0, 33.0, 0.0);\n    vec4 _S4 = cos(radians(10.0 * iTime) - _S3);\n    mat2x2 _S5;\n    _S5[0] = _S4.xy;\n    _S5[1] = _S4.zw;\n    vec2 _S6 = (((_S5) * (p_1)));\n    _S2 = vec2(log(length(_S6)), atan(_S6.y / _S6.x));\n    _S2[0] = _S2[0] - iTime * 0.25;\n    vec2 _S7 = _S2 * 12.69999980926513672;\n    vec2 id_0 = floor(_S7);\n    _S2 = fract(_S7) - 0.5;\n    float n_0 = Hash_0(id_0) * 0.5;\n    float n_1 = n_0 + n_0;\n    bool _S8;\n    if(n_1 < 0.5)\n    {\n        _S8 = true;\n    }\n    else\n    {\n        _S8 = n_1 >= 0.80000001192092896;\n    }\n    if(_S8)\n    {\n        float dir_0;\n        if(n_1 >= 0.80000001192092896)\n        {\n            dir_0 = 1.0;\n        }\n        else\n        {\n            dir_0 = -1.0;\n        }\n        vec4 _S9 = cos(radians(dir_0 * 45.0) - _S3);\n        mat2x2 _S10;\n        _S10[0] = _S9.xy;\n        _S10[1] = _S9.zw;\n        vec2 _S11 = (((_S10) * (_S2)));\n        _S2 = _S11;\n        _S2[0] = abs(_S11.x) - 0.35499998927116394;\n    }\n    return max(- (_S2.x + 0.02500000037252903), _S2.x - 0.02500000037252903);\n}\n\nfloat sdBox_0(vec2 p_2, vec2 b_0)\n{\n    vec2 d_0 = abs(p_2) - b_0;\n    return length(max(d_0, vec2(0.0))) + min(max(d_0.x, d_0.y), 0.0);\n}\n\nfloat sdRoundedBox_0(vec2 p_3, vec2 b_1, vec4 r_0)\n{\n    vec4 _S12 = r_0;\n    vec2 _S13;\n    if(p_3.x > 0.0)\n    {\n        _S13 = _S12.xy;\n    }\n    else\n    {\n        _S13 = _S12.zw;\n    }\n    _S12.xy = _S13;\n    float _S14;\n    if(p_3.y > 0.0)\n    {\n        _S14 = _S12.x;\n    }\n    else\n    {\n        _S14 = _S12.y;\n    }\n    _S12[0] = _S14;\n    vec2 q_0 = abs(p_3) - b_1 + _S12.x;\n    return min(max(q_0.x, q_0.y), 0.0) + length(max(q_0, vec2(0.0))) - _S12.x;\n}\n\nfloat charP_0(vec2 p_4)\n{\n    vec2 _S15 = p_4 - vec2(0.0, 0.02999999932944775);\n    return min(sdBox_0(p_4, vec2(0.01499999966472387, 0.07999999821186066)), max(- _S15.x, abs(sdRoundedBox_0(_S15, vec2(0.07999999821186066, 0.03500000014901161), vec4(0.03500000014901161, 0.03500000014901161, 0.0, 0.0))) - 0.01499999966472387)) - 0.00300000002607703;\n}\n\nfloat opSmoothSubtraction_0(float d1_0, float d2_0, float k_0)\n{\n    float h_0 = clamp(0.5 - 0.5 * (d2_0 + d1_0) / k_0, 0.0, 1.0);\n    return mix(d2_0, - d1_0, h_0) + k_0 * h_0 * (1.0 - h_0);\n}\n\nfloat charY_0(vec2 p_5)\n{\n    vec2 _S16 = p_5 - vec2(0.0, 0.02999999932944775);\n    float a_0 = radians(-30.0);\n    vec2 _S17 = vec2(cos(a_0), sin(a_0));\n    return min(sdBox_0(p_5 + vec2(0.0, 0.05000000074505806), vec2(0.01499999966472387, 0.02999999932944775)), opSmoothSubtraction_0(- dot(p_5 - vec2(0.02700000070035458, 0.0), _S17), opSmoothSubtraction_0(dot(_S16 - vec2(0.01400000043213367, 0.0), _S17), sdBox_0(_S16, vec2(0.07999999821186066, 0.05000000074505806)), 0.00300000002607703), 0.00300000002607703)) - 0.00300000002607703;\n}\n\nfloat py_0(vec2 p_6)\n{\n    vec2 _S18 = p_6 * 0.2800000011920929;\n    vec4 _S19 = cos(radians(-90.0) - vec4(0.0, 11.0, 33.0, 0.0));\n    mat2x2 _S20;\n    _S20[0] = _S19.xy;\n    _S20[1] = _S19.zw;\n    vec2 _S21 = (((_S20) * (_S18)));\n    return min(charP_0(_S21 - vec2(-0.05999999865889549, 0.0)), charY_0(_S21 - vec2(0.05999999865889549, 0.0)));\n}\n\nfloat largeP_0(vec2 p_7)\n{\n    vec2 _S22 = p_7 * 0.25;\n    vec4 _S23 = cos(radians(-90.0) - vec4(0.0, 11.0, 33.0, 0.0));\n    mat2x2 _S24;\n    _S24[0] = _S23.xy;\n    _S24[1] = _S23.zw;\n    return charP_0((((_S24) * (_S22))));\n}\n\nfloat mod2_0(float a_1, float b_2)\n{\n    return a_1 - b_2 * floor(a_1 / b_2);\n}\n\nfloat dots_0(vec2 p_8)\n{\n    vec2 _S25 = p_8;\n    vec2 _S26 = p_8 - iTime * 0.10000000149011612;\n    _S25 = _S26;\n    _S25[0] = mod2_0(_S26.x, 0.10000000149011612) - 0.05000000074505806;\n    _S25[1] = mod2_0(_S25.y, 0.10000000149011612) - 0.05000000074505806;\n    return length(_S25) - 0.02999999932944775;\n}\n\nfloat largeY_0(vec2 p_9)\n{\n    vec2 _S27 = p_9 * 0.25;\n    vec4 _S28 = cos(radians(-90.0) - vec4(0.0, 11.0, 33.0, 0.0));\n    mat2x2 _S29;\n    _S29[0] = _S28.xy;\n    _S29[1] = _S28.zw;\n    return charY_0((((_S29) * (_S27))));\n}\n\nfloat stripes_0(vec2 p_10, float dir_1, float space_0, float s_0)\n{\n    vec4 _S30 = cos(radians(30.0) - vec4(0.0, 11.0, 33.0, 0.0));\n    mat2x2 _S31;\n    _S31[0] = _S30.xy;\n    _S31[1] = _S30.zw;\n    vec2 _S32 = (((_S31) * (p_10)));\n    _S32[0] = _S32[0] + iTime * 0.10000000149011612 * dir_1;\n    _S32[0] = mod2_0(_S32.x, space_0) - space_0 * 0.5;\n    return max(abs(_S32).x - s_0, abs(_S32).y - 20.0);\n}\n\nfloat pys_0(vec2 p_11, float n_2)\n{\n    vec2 _S33 = p_11;\n    _S33[1] = _S33[1] + iTime * n_2 * 0.30000001192092896 + 0.5;\n    float _S34 = _S33.y;\n    _S33[1] = ((((_S34) < 0.0) ? -mod(-(_S34),abs((1.0))) : mod((_S34),abs((1.0))))) - 0.5;\n    vec2 _S35 = _S33 * 2.0;\n    vec2 _S36 = (abs(_S35) - 0.5) * vec2(float((int(sign((_S35.x))))), float((int(sign((_S35.y))))));\n    _S33 = _S36;\n    return py_0(_S36);\n}\n\nfloat draw_0(vec2 p_12)\n{\n    vec2 _S37 = p_12;\n    float time_0 = iTime;\n    vec4 _S38 = cos(radians(10.0 * iTime) - vec4(0.0, 11.0, 33.0, 0.0));\n    mat2x2 _S39;\n    _S39[0] = _S38.xy;\n    _S39[1] = _S38.zw;\n    vec2 _S40 = (((_S39) * (p_12)));\n    _S37 = vec2(log(length(_S40)), atan(_S40.y / _S40.x));\n    _S37[0] = _S37[0] - time_0 * 0.20000000298023224;\n    vec2 _S41 = _S37 * 2.53999996185302734;\n    float n_3 = clamp(Hash_0(floor(_S41)), 0.20000000298023224, 1.0);\n    vec2 _S42 = fract(_S41) - 0.5;\n    _S37 = _S42;\n    float d_1 = py_0(_S42);\n    float d_2;\n    if(n_3 <= 0.60000002384185791)\n    {\n        float d_3 = mix(d_1, largeP_0(_S37), clamp(sin(3.0 * time_0 * n_3), 0.0, 1.0));\n        if(n_3 >= 0.5)\n        {\n            d_2 = min(max(dots_0(_S37), d_3), abs(d_3) - 0.0020000000949949);\n        }\n        else\n        {\n            d_2 = d_3;\n        }\n    }\n    else\n    {\n        bool _S43;\n        if(n_3 >= 0.60000002384185791)\n        {\n            _S43 = n_3 < 0.89999997615814209;\n        }\n        else\n        {\n            _S43 = false;\n        }\n        if(_S43)\n        {\n            d_2 = max(stripes_0(_S37, -1.0, 0.05000000074505806, 0.00499999988824129), mix(d_1, largeY_0(_S37), clamp(sin(3.0 * time_0 * n_3), 0.0, 1.0)));\n        }\n        else\n        {\n            if(n_3 >= 0.89999997615814209)\n            {\n                d_2 = pys_0(_S37, n_3 * 0.5);\n            }\n            else\n            {\n                d_2 = d_1;\n            }\n        }\n    }\n    return d_2;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float _S44 = float(iResolution.y);\n    vec2 p_13 = (vec2(fragCoord.xy) - 0.5 * vec2(iResolution.xy)) / _S44;\n    const vec3 col_0 = vec3(0.0, 0.0, 0.0);\n    vec3 col_1 = mix(mix(mix(col_0, vec3(0.30000001192092896, 0.30000001192092896, 0.30000001192092896), vec3(1.0 - smoothstep(-1.20000004768371582, 1.20000004768371582, bg_0(p_13) * _S44))), vec3(1.0, 1.0, 1.0), vec3(1.0 - smoothstep(-1.20000004768371582, 1.20000004768371582, draw_0(p_13) * _S44))), col_0, vec3(1.0 - smoothstep(0.0, 0.30000001192092896, length(p_13) - 0.05000000074505806)));\n    fragColor = vec4(col_1.x, col_1.y, col_1.z, 1.0);\n    return;\n}\n\n/*\noriginal slang code for the Slang playground\nimport playground;\n\n#define T getTime()\n#define Rot(a) float2x2(cos(a - float4(0,11,33,0)))\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define PUV(p) float2(log(length(p)),atan(p.y/p.x))\n\nfloat mod2(float a, float b) {\n    return a - b * floor(a / b);\n}\n\nfloat Hash(float2 p){\n    float2 randP = fract(sin(p*123.456)*567.89);\n    randP += dot(randP,randP*34.56);\n    float n = fract(randP.x*randP.y); \n    return n;\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions2d/\nfloat sdBox( float2 p, in float2 b )\n{\n    float2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions2d/\nfloat sdRoundedBox( float2 p, in float2 b, float4 r )\n{\n    r.xy = (p.x>0.0)?r.xy : r.zw;\n    r.x  = (p.y>0.0)?r.x  : r.y;\n    float2 q = abs(p)-b+r.x;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r.x;\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat opSmoothSubtraction( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return lerp( d2, -d1, h ) + k*h*(1.0-h);\n}\n\nfloat stripes(float2 p, float dir, float space, float s){\n    float2 prevP = p;\n    \n    p = mul(p,Rot(radians(30.)));\n    p.x += T*0.1*dir;\n    p.x = mod2(p.x,space)-(space*0.5);\n    \n    float d = B(p,float2(s,20.));\n    return d;\n}\n\nfloat dots(float2 p){\n    float space = 0.1;\n    p -= T*0.1;\n    p.x = mod2(p.x,space)-(space*0.5);\n    p.y = mod2(p.y,space)-(space*0.5);\n    float d = length(p)-0.03;\n    return d;\n}\n\nfloat charP(float2 p){\n    float d = sdBox(p,float2(0.015,0.08));\n    p -= float2(0.0,0.03);\n    float d2 = abs(sdRoundedBox(p,float2(0.08,0.035),float4(0.035,0.035,0.0,0.0)))-0.015;\n    d2 = max(-p.x,d2);\n    d = min(d,d2);\n    return d-0.003;\n}\n\nfloat charY(float2 p){\n    float2 prevP = p;\n    p += float2(0.0,0.05);\n    float d = sdBox(p,float2(0.015,0.03));\n    p = prevP;\n    p -= float2(0.0,0.03);\n    float d2 = sdBox(p,float2(0.08,0.05));\n    \n    float a = radians(-30.0);\n    p -= float2(0.014,0.0);\n    d2 = opSmoothSubtraction(dot(p,float2(cos(a),sin(a))),d2,0.003);\n    p = prevP;\n    p -= float2(0.027,0.0);\n    d2 = opSmoothSubtraction(-dot(p,float2(cos(a),sin(a))),d2,0.003);\n    d = min(d,d2);\n    return d-0.003;\n}\n\nfloat py(float2 p){\n    p*=0.28;\n    p = mul(p,Rot(radians(-90.0)));\n\n    float2 prevP = p;\n    p -= float2(-0.06,0.0);\n    float d = charP(p);\n    p = prevP;\n    p -= float2(0.06,0.0);\n    float d2 = charY(p);\n    d = min(d,d2);\n    return d;\n}\n\nfloat largeP(float2 p){\n    p*=0.25;\n    p = mul(p,Rot(radians(-90.0)));\n    float d = charP(p);\n    return d;\n}\n\nfloat largeY(float2 p){\n    p*=0.25;\n    p = mul(p,Rot(radians(-90.0)));\n    float d = charY(p);\n    return d;\n}\n\nfloat pys(float2 p, float n){\n    float time = T;\n    p.y += time*n*0.3;\n    p.y+=0.5;\n    p.y = fmod(p.y,1.0)-0.5;\n    p*=2.0;\n    float2 prevP = p;\n    p = abs(p)-0.5;\n    p*=float2(sign(prevP.x),sign(prevP.y));\n    float d = py(p);\n    return d;\n}\n\nfloat bg(float2 p){\n    p = mul(p,Rot(radians(10.*T)));\n    p = PUV(p);\n    \n    p.x-=T*0.25;\n    \n    p*=2.54*5.;\n    float2 id = floor(p);\n    \n    p = fract(p)-0.5;\n    \n    float n = Hash(id);\n    \n    float lineW = 0.1;\n    n*=0.5;\n    n += Hash(id)*0.5;\n    if(n<0.5 || n>=0.8){\n        float dir = (n>=0.8)?1.0:-1.0;\n        p = mul(p,Rot(radians(dir*45.0)));\n        p.x = abs(p.x);\n        p.x-=0.355;\n        lineW = 0.1;\n    }\n    lineW*=0.5;\n    float d = max(-(p.x+(lineW*0.5)),(p.x-(lineW*0.5)));\n    return d;\n}\n\nfloat draw(float2 p){\n    float time = T;\n    p = mul(p,Rot(radians(10.*time)));\n    p = PUV(p);\n    p.x-=time*0.2;\n    p*=2.54;\n    float2 id = floor(p);\n    float n = clamp(Hash(id),0.2,1.0);\n    p = fract(p)-0.5;\n\n    float d = py(p);\n    if(n<=0.6){\n        d = lerp(d,largeP(p),clamp(sin(3.*time*n),0.0,1.0));\n        if(n>=0.5){\n            float d2 = d;\n            d = max(dots(p),d);\n            d = min(d,abs(d2)-0.002);\n        }\n    } else if(n>=0.6 && n<0.9) {\n        d = lerp(d,largeY(p),clamp(sin(3.*time*n),0.0,1.0));\n        d = max(stripes(p,-1.0,0.05,0.005),d);\n    } else if(n>=0.9) {\n        d = pys(p,n*0.5);\n    }\n    \n    return d;\n}\n\nfloat4 imageMain(uint2 dispatchThreadID, int2 screenSize)\n{\n    float2 p = (dispatchThreadID.xy - 0.5 * screenSize.xy) / (float)screenSize.y;\n    float3 col = float3(0.0,0.0,0.0);\n    float d = bg(p);\n    col = lerp(col,float3(0.3,0.3,0.3),1.0-smoothstep(-1.2,1.2, d*(float)screenSize.y));\n    d = draw(p);\n    col = lerp(col,float3(1.0,1.0,1.0),1.0-smoothstep(-1.2,1.2, d*(float)screenSize.y));\n    d = length(p)-0.05;\n    col = lerp(col,float3(0.0,0.0,0.0),1.0-smoothstep(0.,0.3,d));\n\n    return float4(col.r, col.g, col.b, 1.0);\n}\n\n*/","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XcKfDc","date":"1734534317","viewed":197,"name":"NVIDIA SLANG TEST","username":"yasuo","description":"This shader code was converted from Slang to GLSL using NVIDIA SLANG. Please note that it is highly experimental, so specific code-level comments are not necessary.","likes":13,"published":3,"flags":0,"usePreview":0,"tags":["nvidia","slang"],"hasliked":0,"parentid":"","parentname":""}}