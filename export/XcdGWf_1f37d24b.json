{"ver":"0.1","info":{"id":"XcdGWf","date":"1715284642","viewed":41,"name":"AK FYP14: Basic Fractal","username":"AKHC","description":"A simple beginner fractal made up of a repeating circle, used to familiarize myself with the nature of fractals.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdPentagon( in vec2 p, in float r )\n{\n    const vec3 k = vec3(0.809016994,0.587785252,0.726542528);\n    p.x = abs(p.x);\n    p -= 2.0*min(dot(vec2(-k.x,k.y),p),0.0)*vec2(-k.x,k.y);\n    p -= 2.0*min(dot(vec2( k.x,k.y),p),0.0)*vec2( k.x,k.y);\n    p -= vec2(clamp(p.x,-r*k.z,r*k.z),r);    \n    return length(p)*sign(p.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float angle = sin(iTime) * 0.2;\n    vec2 uv = fragCoord / iResolution.xy * 2.0 - 1.;\n    \n    vec4 col = vec4(1.);\n    \n    for(float i = 0.0; i < 132.; i++)\n    {\n        uv = abs(uv);\n        uv -= 0.5;\n        //uv *= 1.1;\n    \n        uv *= mat2(\n            cos(angle), -sin(angle),\n            sin(angle), cos(angle));\n   \n    \n    }\n    \n    \n\n    //float len = length(normalCoord);\n    //float d = smoothstep(sdPentagon(uv, 0.2), 0., 0.4);\n    float d = sdPentagon(uv, 0.5);\n    col = d > 0. ? vec4(1.000,0.639,0.969,0.) : vec4(0.302,1.000,0.569,0.);\n    col*= 1. - exp(-2.0 * d);\n    col += exp(2.0 * d);\n    \n    //fragColor = vec4(length(normalCoord + vec2(0.8, 0.3)),\n    //                length(normalCoord + vec2(-0.4, -0.6)),\n    //                length(normalCoord + vec2(-0.1, 0.9)),1.0);\n    \n    fragColor = col;\n    \n}","name":"Image","description":"","type":"image"}]}