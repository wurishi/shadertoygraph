{"ver":"0.1","info":{"id":"lcSBz3","date":"1725340644","viewed":27,"name":"Late Night Special ","username":"SirShart","description":"Under the Surface","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["psychedelic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\n// Function to convert from cartesian to polar coordinates\nvec2 toPolar(vec2 uv) {\n    float r = length(uv);\n    float theta = atan(uv.y, uv.x);\n    return vec2(r, theta);\n}\n\n// Function to create a sinusoidal pattern\nfloat patternFunction(vec2 uv) {\n    return sin(10.0 * uv.x) * cos(10.0 * uv.y) + sin(10.0 * (uv.x + uv.y));\n}\n\n// Function to create a kaleidoscopic effect\nvec3 kaleidoscope(vec2 uv, float segments) {\n    float angle = atan(uv.y, uv.x);\n    float radius = length(uv);\n    \n    angle = mod(angle, 2.0 * PI / segments);\n    angle = abs(angle);\n\n    uv = vec2(radius * cos(angle), radius * sin(angle));\n    \n    // Apply a sinusoidal pattern\n    float pattern = patternFunction(uv * 5.0);\n\n    // Dynamic color based on pattern and time\n    float hue = mod(pattern * 0.5 + iTime * 0.1, 1.0);\n    float saturation = 0.8 + 0.2 * sin(iTime + radius * 10.0);\n    float value = 0.6 + 0.4 * cos(iTime + radius * 10.0);\n    \n    return vec3(hue, saturation, value);  // Return HSV color\n}\n\n// Function to convert HSV to RGB\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0/3.0, 1.0/3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalize and center coordinates\n    vec2 uv = fragCoord.xy / iResolution.xy - 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // Rotate and zoom for more dynamic patterns\n    uv *= 2.0;\n    float rotation = sin(iTime * 0.3) * PI / 4.0;\n    uv = vec2(uv.x * cos(rotation) - uv.y * sin(rotation),\n              uv.x * sin(rotation) + uv.y * cos(rotation));\n    \n    // Convert to polar coordinates\n    vec2 polar = toPolar(uv);\n    \n    // Create kaleidoscope pattern\n    vec3 hsvColor = kaleidoscope(polar, 10.0);\n    \n    // Convert HSV to RGB\n    vec3 rgbColor = hsv2rgb(hsvColor);\n    \n    // Output final color\n    fragColor = vec4(rgbColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}