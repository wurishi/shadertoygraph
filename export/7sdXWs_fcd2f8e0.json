{"ver":"0.1","info":{"id":"7sdXWs","date":"1634208078","viewed":142,"name":"Darts and Kites","username":"incription","description":"Darts and Kites! Example of a penrose tiling. Change N to increase detail. Distance fields from IQ","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["tiling","penrose","aperiodic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ANGLE_ONE 0.628319\n#define ANGLE_TWO  1.88496\n#define PI         3.14159\n#define GOLDEN_RATIO 1.61803398875\n#define N 11\n#define scale (.02*(sin(iTime/3.)+2.))\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat sdTriangle( in vec2 p, in vec2 p0, in vec2 p1, in vec2 p2 )\n{\n    vec2 e0 = p1-p0, e1 = p2-p1, e2 = p0-p2;\n    vec2 v0 = p -p0, v1 = p -p1, v2 = p -p2;\n    vec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\n    vec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\n    vec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\n    float s = sign( e0.x*e2.y - e0.y*e2.x );\n    vec2 d = min(min(vec2(dot(pq0,pq0), s*(v0.x*e0.y-v0.y*e0.x)),\n                     vec2(dot(pq1,pq1), s*(v1.x*e1.y-v1.y*e1.x))),\n                     vec2(dot(pq2,pq2), s*(v2.x*e2.y-v2.y*e2.x)));\n    return -sqrt(d.x)*sign(d.y);\n}\n\nvec3 sdShape( in vec2 p, in vec2 p0, in vec2 p1, in vec2 p2, in vec3 shapeCol, in vec3 lineCol, in float thickness ) {\n    vec3 col = lineCol;\n    \n    if(sdTriangle(p, p0, p1, p2) < 0.) col = shapeCol;\n    \n    if(min(sdSegment(p, p0, p1), sdSegment(p, p0, p2)) < thickness) col = lineCol;\n    \n    return col;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy - .5;\n    uv.x *= iResolution.x / iResolution.y;\n    uv *= scale;\n    uv += vec2(sin(iTime/10.), cos(iTime/10.)) *0.1;\n    vec3 col = vec3(1);\n   \n    int v = clamp(int(5.0 * (atan(uv.x, uv.y) + PI) / PI), 0, 9);\n    float offset = ANGLE_ONE /2. + float(v)/10. * PI * 2.;\n    \n    \n    \n    vec2 a = vec2(0.0, 0.0);\n    vec2 b = a + vec2(sin(ANGLE_ONE / 2. + PI + offset), cos(ANGLE_ONE / 2. + PI + offset)) * 0.3;\n    vec2 c = a + vec2(sin(PI - ANGLE_ONE / 2. + offset), cos(PI - ANGLE_ONE / 2. + offset)) * 0.3;\n    \n    if(v%2==0) {vec2 _ = b; b = c; c = _;}\n    float d;\n    bool blue = false;\n    \n    for(int i=0;i<N;i++) {\n        if(blue)\n        {\n            vec2 q = b + (a - b) / GOLDEN_RATIO;\n            vec2 r = b + (c - b) / GOLDEN_RATIO;\n            if(sdTriangle(uv, r, c, a) < 0.) { b = c; c = a; a = r; }\n            else if(sdTriangle(uv, r, q, a) < 0.) { blue = false; b = q; c = a; a = r; }\n            else { c = b; b = r; a = q; }\n        } else {\n            vec2 p = a + (b - a) / GOLDEN_RATIO;\n            if(sdTriangle(uv, c, p, b) < 0.) { a = c; c = b; b = p; }\n            else { blue = true; b = c; c = a; a = p; }\n        }\n        \n    }\n    \n    vec3 sCol = mix(vec3(0.859,0.263,0.263), vec3(0.306,0.306,0.792), float(blue));\n    vec3 lCol = vec3(0.353,0.325,0.325);\n    \n    col = sdShape(uv, a, b, c, sCol, lCol, 0.0001*11./(float(N)));\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}