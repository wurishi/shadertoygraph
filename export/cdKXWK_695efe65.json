{"ver":"0.1","info":{"id":"cdKXWK","date":"1681638237","viewed":43,"name":"Mostly Danilo's","username":"Grendor","description":"just playing around","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["seizurewarpbadstar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// http://www.pouet.net/prod.php?which=57245\n// Credits to 'Danilo Guanabara'\n\n#define t iTime\n#define r iResolution.xy\n#define NUM_PARTICLES 1000\n\n// Perlin-like noise function\nvec2 hash2(vec2 p) {\n    p = vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3)));\n    return fract(sin(p) * 43758.5453123);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec3 c = vec3(0);\n    float l, z = t;\n    float speedVariation = t; // Add a varying speed over time\n    // Create two centers rotating around each other\n    float angle = 0.01 * (t * 55.001 * t);\n    float radius =  1. - (t * 0.04347826086956521739130434782609); // Decrease orbit radius over time\n    if (t > 23.) {\n        radius=0.0;\n        angle=0.0;\n    }\n\n    float angularSpeed = (t* (2.5/ radius)) ;\n    vec2 center1 = vec2(cos(angle), sin(angle)) * radius;\n    vec2 center2 = vec2(cos(angle + 3.14159), sin(angle + 3.14159))  * radius;\n\n    vec2 uv = fragCoord.xy / r;\n    uv -= 0.5;\n    uv.x *= r.x / r.y;\n\n\n\n    // Combine particle intensity with the original effect\n    l = min(length(uv - center1), length(uv - center2)); // Choose the minimum distance\n    uv += uv / l * (sin(l * speedVariation)) * abs(tan(t+hash2(uv).x)) ;\n    c = vec3((.038 - (t * 0.001)) / length(mod(uv, 1.) - 0.5));\n\n    // Interpolate between greyscale and the original effect\n    // c = mix(vec3(dot(c, vec3(0.599 + (1.1 * hash2(uv).x) , 0.787- (0.2 * hash2(uv).y), 0.114))), c, uv.y * uv.x);\n\n    // Flare up at the last moment\n    if (t > 25.) {\n        float flare = smoothstep(25., 32.0, t);\n        c += vec3(0.99, 0.65, 0.65) * flare;\n    }\n\n\n\nc = clamp(c, 0., 1.); // Clamp color values to [0, 1] range\nfragColor = vec4(c / l, 1.0 - t * 0.01); // Decrease alpha over time\n}","name":"Image","description":"","type":"image"}]}