{"ver":"0.1","info":{"id":"cdcBRN","date":"1698428696","viewed":157,"name":"Shifting Carpet","username":"TheBen27","description":"Color-mapped RPS automata. Very resolution-dependent.\n\nR - reset\nA - increase resolution\nS - decrease resolution\n\nChange categories in Common\nChange starting pattern in Buffer B","likes":6,"published":3,"flags":48,"usePreview":0,"tags":["animated","automata","rps"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// DISPLAY\n\nfloat mirroredSmooth(float x, float c, float w) {\n    return clamp(smoothstep(1.0, 0.0, abs(x - c) / w), 0.0, 1.0);\n}\n\nvec3 colorFromValue(int value) {\n  float factor = float(value) / float(totalCategories);\n  const float center = 0.5;\n  const float spread = 0.1;\n  const float width = 0.4;\n  return vec3(\n      mirroredSmooth(factor, center - spread, width),\n      mirroredSmooth(factor, center, width),\n      mirroredSmooth(factor, center + spread, width)\n  );\n}\n\nint getValue(ivec2 pos) {\n    return int(texelFetch(iChannel0, pos, 0).r);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(colorFromValue(getValue(ivec2(fragCoord))), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define KEY_A 65\n#define KEY_D 68\n#define KEY_R 82\n\n// STATE\n\nbool getKeyHeld(int code) {\n    return texelFetch(iChannel1, ivec2(code, 0), 0 ).x > 0.0;\n}\n\nbool getKeyPress(int code) {\n    return texelFetch(iChannel1, ivec2(code, 1), 0 ).x > 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    if (fragCoord.y > 1.0) {\n        return;\n    }\n    \n    int varIndex = int(fragCoord.x);\n    if (iFrame == 0) {\n        // initialize variables\n        if (varIndex == VAR_QUALITY) {\n            fragColor = vec4(2.0, 0.0, 0.0, 0.0);\n        } else {\n            fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        }\n        return;\n    }\n    \n    // Update variables\n    float last = getVar(iChannel0, varIndex);\n    float next = last;\n    \n    // Update quality\n    if (varIndex == VAR_QUALITY) {\n        if (getKeyPress(KEY_A)) {\n            next = max(1.0, last / 2.0);\n        } else if (getKeyPress(KEY_D)) {\n            next = min(32.0, last * 2.0);\n        }\n    }\n    \n    fragColor = vec4(next, 0.0, 0.0, 0.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define VAR_QUALITY 1\n\n// CONFIGURATION\n\n// odd number\nconst int totalCategories = 111;\n\n// STATE\n\nfloat getVar(sampler2D sampler, int index) {\n    return texelFetch(sampler, ivec2(index, 0), 0).r;\n}\n\n// NOISE\n\nfloat rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat rand1(float n){return fract(sin(n) * 43758.5453123);}\n\nvec3 getCellInfo(vec2 cellIndex) {\n    float x = rand(cellIndex);\n    float y = rand1(x);\n    float v = rand1(y);\n    \n    return vec3(x, y, v);\n}\n\nfloat voronoiDistance(vec2 a, vec2 b) {\n    return abs(a.x - b.x) + abs(a.y - b.y);\n}\n\nvec2 voronoi(vec2 uv) {\n    vec2 pos = uv;\n    vec2 innerPos = mod(pos, 1.0);\n    vec2 index = floor(pos);\n \n    float minDistance = 3.0;\n    float minValue = -1.0;\n    for (float x = -1.0; x <= 1.0; x += 1.0) {\n        for (float y = -1.0; y <= 1.0; y += 1.0) {\n            vec2 offset = vec2(x, y);\n            vec3 cellInfo = getCellInfo(index + offset);\n            vec2 cellPos = cellInfo.xy;\n            float cellValue = cellInfo.z;\n            float cellDistance = voronoiDistance(innerPos, cellPos + offset);\n            if (cellDistance < minDistance) {\n                minDistance = cellDistance;\n                minValue = cellValue;\n            }\n        }\n    }\n    return vec2(minDistance, minValue);\n}\n\n// INTEGER MODULO\n\nint pmod(int x, int m) {\n  return x - ((x / m) * m);\n}\n\nint umod(int x, int m) {\n  int positive = pmod(x, m);\n  int negative = m - pmod((-x), m);\n  return x >= 0 ? positive : negative;\n}\n\nivec2 umod2(ivec2 v, ivec2 m) {\n  return ivec2(umod(v.x, m.x), umod(v.y, m.y));\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// 0 - random\n// 1 - circle\n// 2 - stripes\n// 3 - voronoi value\n// 4 - voronoi distance\n#define START 1\n\n// CELLS\nconst int cellTimeStep = 1;\nconst int lossThreshold = -2;\n\nint getCellSize() {\n    return int(getVar(iChannel2, VAR_QUALITY));\n}\n\nint sampleValue(ivec2 coord) {\n    return int(texelFetch(iChannel0, coord, 0).r);\n}\n\nint battle(int self, int other) {\n  const int center = (totalCategories - 1) / 2;\n  int difference = self - center;\n  int newOther = umod(other - difference, totalCategories);\n  return sign(center - newOther);\n}\n\nint battleWithNeighbor(int value, ivec2 coord) {\n  return battle(value, sampleValue(coord));\n}\n\nint initialValue(ivec2 coord) {\n#if START==0\n    // noise\n    return int(float(totalCategories) * rand(vec2(coord) / iResolution.xy));\n#endif\n#if START==1\n    // circle\n    vec2 center = iResolution.xy / float(getCellSize()) / 2.0;\n    int dist = int(distance(vec2(coord), center));\n    return umod(dist, totalCategories);    \n#endif\n#if START==2\n    // stripes\n    return umod((coord.x + coord.y) / 4, totalCategories);\n#endif\n#if START==3\n    // voronoi value\n    // vec4(voronoi(4.0 * vec2(fragCoord / iResolution.xy)).y, 0.0, 0.0, 1.0);\n    return int(float(totalCategories) * voronoi(24.0 * vec2(coord) / iResolution.xy).y);\n#endif\n#if START==4\n    // voronoi distance\n    // vec4(voronoi(4.0 * vec2(fragCoord / iResolution.xy)).y, 0.0, 0.0, 1.0);\n    return int(float(totalCategories) * voronoi(12.0 * vec2(coord) / iResolution.xy).x);\n#endif\n}\n\nbool reset() {\n    // R key\n    return texelFetch( iChannel1, ivec2(82,0), 0 ).x > 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 coord = ivec2(fragCoord) / getCellSize();\n    \n    if (iFrame <= 1 || reset()) {\n      fragColor = vec4(initialValue(coord), 0.0, 0.0, 1.0);\n      return;\n    }\n    \n    if (umod(iFrame, cellTimeStep) != 0) {\n      fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n      return;\n    }\n    \n    int last = sampleValue(ivec2(fragCoord));\n    int score = 0;\n    for (int x = -1; x <= 1; x++) {\n      for (int y = -1; y <= 1; y++) {\n        if (x != 0 || y != 0) {\n          score += battleWithNeighbor(last, umod2(coord * getCellSize() + getCellSize() * ivec2(x, y), ivec2(iResolution)));\n        }\n      }\n    }\n    \n    int new = last;\n    if (score <= lossThreshold) {\n      new = umod(new - 1, totalCategories);\n    }\n    \n    fragColor = vec4(float(new), 0.0, 0.0, 1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}