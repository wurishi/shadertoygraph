{"ver":"0.1","info":{"id":"3sj3Dw","date":"1549228964","viewed":102,"name":"ABC neon","username":"monada","description":"  ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":[],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592\n#define T_PI 2. * PI\n#define h_PI PI / 2.0\n\nfloat sdLine( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat sdCircle( vec2 p, float r )\n{\n  return abs( length(p) - r );\n}\n\n\n\nfloat sdCircle( vec2 p, vec2 c, float r )\n{   \n    vec2 v = p - c;\n    \n    float d = abs( length( p - c ) - r );\n    \n    if( v.x > 0. )\n    {\n \t\treturn d;\n    }\n    \n //   return d + r;\n    \n    float v1 =\n        sdLine(\n        \tp,\n            vec2( c.x, c.y + r ),\n            vec2( c.x, c.y - r )\n    );\n    \n    \n    vec2 p1 = vec2( c.x, c.y + r );\n    vec2 p2 = vec2( c.x, c.y - r );\n    \n    vec2 p2_p1 = p2 - p1;\n    vec2 p_p1 = p  - p1;\n    \n//    float a = dot( p2_p1, p__p1 );\n\n    float d1 = distance( p, p1 );\n    float d2 = distance( p, p2 );\n    \n    return min( d1, d2 );\n}\n\nvec2 rotate2d( vec2 p, float a )\n{\n    float _c = cos( a );\n    float _s = sin( a );\n    \n    return mat2(\n        _c, -_s,\n        _s, _c ) * p;\n}\n\n\n\nfloat inter( float x, float y, float a )\n{\n\treturn x * ( 1.0 - a ) + y * a;   \n}\n\nvec2 inter( vec2 p1, vec2 p2, float a )\n{\n    return vec2(\n        inter( p1.x, p2.x, a ),\n        inter( p1.y, p2.y, a )\n    );\n}\n\nfloat C( vec2 p, float a )\n{\n   \n    vec2 p1 = vec2( 0.0, 0.5 );\n    vec2 p2 = vec2( 0.0, -0.5 );\n    vec2 p1_p2_center = vec2( 0.0, 0.0 );\n    \n    float v = 0.18;\n    \n    vec2 ip = vec2( 1.0 - p.x, p.y );\n //   ip = rotate2d( ip, pow( 1.0 - a, 2.4 ) );\n    \n    float c1 = sdCircle(\n        ip,\n        vec2( -0.2, 0.0 ),\n        0.5\n    );\n    \n\n    vec2 p3 = vec2( 1.0, 0.45 );\n    vec2 p4 = vec2( 0.72, -0.1 );\n    \n    c1 *= sdLine(\n        p,\n        inter( p4, p3, a ),\n        p4\n    ); \n    \n    float r = pow( c1, v );\n    return r;\n}\n    \n\nfloat B( vec2 p, float a )\n{\n    vec2 p1 = vec2( -0.05, 0.5 );\n    vec2 p2 = vec2( -0.05, -0.5 );\n    vec2 p1_p2_center = vec2( -0.05, 0.0 );\n    \n    float v = 0.1;\n    \n    float l1 = sdLine(\n        p,\n        inter( p1_p2_center, p1, a ),\n        inter( p1_p2_center, p2, a )\n    );\n    \n  \n    vec2 p3 = vec2 ( -0.1, 0.5 );\n    vec2 p4 = vec2 ( 0.1, 0.5 );\n    \n    float l2 = sdLine(\n        p,\n        p3,\n        inter( p3, p4, a )\n    );\n    \n    l1 *= l2;\n    \n    vec2 p5 = vec2 ( -0.1, -0.5 );\n    vec2 p6 = vec2 ( 0.1, -0.5 );\n    \n    float l3 = sdLine(\n        p,\n        p5,\n        inter( p5, p6, a )\n    );\n    \n    l1 *= l3;\n    \n    float c1 = sdCircle(\n        p,\n        vec2( 0.05, 0.3 ),\n      //  inter( 0.0, 0.2, a )\n        0.2\n   \t);\n    \n    l1 *= c1;\n    \n    float c2 = sdCircle(\n        vec2( p.x, p.y ),\n        vec2( 0.05, -0.2 ),\n     //   inter( 0.0, 0.3, a )\n        0.3\n    );\n    \n    c2 *= 0.3;\n    \n    l1 *= c2;\n    \n    \n    vec2 p7 = vec2( 0.05, 0.5 );\n    vec2 p8 = vec2( 0.05, -0.5 );\n    \n    l1 *= sdLine( p, p7, p8 );\n    \n    vec2 p9 = vec2( -0.1, 0.5 );\n    vec2 p10 = vec2( -0.1, -0.1 );\n    \n    l1 *= sdLine( p, p9, p10 ); \n    \n    vec2 p11 = vec2( 0.0, -0.1 );\n    vec2 p12 = vec2( 0.0, -0.5 );\n    \n    l1 *= sdLine( p, p11, p12 ); \n    \n    float r = pow( l1, v );\n    \n    return r;\n}\n\n// A\nfloat A( vec2 p, float a )\n{\n    float v = 0.18;\n    \n    \n    vec2 p1 = vec2( 0.0, 0.5 );\n    vec2 p2 = vec2( 0.5, -0.5 );\n    vec2 current_p2 = inter( p1, p2, a );\n    float l1 = sdLine( p, p1, current_p2 );\n    l1 = pow( l1, v );\n    \n    \n    vec2 p3 = vec2( -0.5, -0.5 );\n    vec2 p4 = vec2(  0.0,  0.5 );\n    \n    vec2 current_p4 = inter( p3, p4, a );\n    float l2 = sdLine( p, p3, current_p4 );\n    l2 = pow( l2, v );\n    \n    \n    vec2 p5 = vec2( -0.1, 0.3 );\n    vec2 p6 = vec2(  0.5, -0.5 );\n    \n    p = rotate2d( p, a * T_PI );\n    \n  vec2 current_p6 = inter( p5, p6, smoothstep( 0.0, 1.0, a ) );\n//    vec2 current_p6 = inter( p5, p6, a );\n    float l3 = sdLine( p, p5, current_p6 );\n    l3 = pow( l3, v );\n    \n    return l1 * l2 * l3;\n} \n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec3 hsv2rgb( float h, float s, float v )\n{\n    return vec3( h, s, v );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\t\n    vec2 uvOrigin = uv;\n    \n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    \n//    uv = rotate2d( uv, iTime * 0.1 );\n    \n    float a = mod( iTime, h_PI );\n    a = sin( iTime );\n    \n    a = smoothstep( 0.0, 1.0, 1.0 - a );\n    \n    if( a < 0.0 )\n    {\n        a = 1.0;\n    }\n    \n   // a = exp( -0.50 * a );\n    \n    float res = 1.;\n    \n    vec2 Apos = vec2( 0.8, 0.0 );\n    float Av = A( uv + Apos, a );\n\n  //  Av = 1.0 - Av;\n    Av = pow( Av, 1.4 );\n    \n    res *= Av;\n    \n    \n    vec3 col = vec3( res );\n\n    col *= vec3( 2.8, 1.9, 2.1 );\n    col = col * col * col *  3.0  - col * col * col;\n    \n    col *= 0.4;\n    \n    vec2 Bpos = vec2( 0.1, 0.0 );\n    float Bv = B( uv + Bpos, a );\n\n    \n //   Bv = 1.0 - Bv;\n    Bv = pow( Bv, 1.2 );\n    \n    \n    vec3 col2 = vec3( Bv );\n\n    col2 *= vec3( 1.3, 1.1, 1.3 );\n    col2 = col2 * col2 * col2 *  3.0  - col2 * col2;\n   \n    \n //   col2 = abs( col2 );\n    \n    col *= col2;\n    \n    vec2 Cpos = vec2( 0.3, 0.0 );\n    float Cv = C( uv + Cpos, a );\n    \n  //  Cv = pow( Cv, 0.2 );\n  \n    \n  //  Cv = 1.0 - Cv;\n    \n    vec3 col3 = vec3( Cv );\n\n    col3 *= vec3( 2.1, 2.1, 2.3 );\n    col3 = col3 * col3 * col3 *  3.0  - col3 * col3;\n   \n    \n    col3 = abs( col3 );\n    \n    Cv = pow( Cv, 1.1 );\n    \n    Cv = smoothstep( 0., 1.0, Cv );\n    \n   // Cv *= 0.9502;\n    \n    float r = 1.0 - Av * Bv * Cv;\n    \n    r = pow( r, 2.1 );\n   \n    col = vec3( r );\n \n    col *= vec3( 1.8 + pow( uvOrigin.x, 0.4 ), 1.9, 2.1 + uv.y ) + hsv2rgb( uv.x, 0.5, 0.5 );\n    col = col * col * col *  3.0  - col * col * col;\n    \n    col *= 0.034;\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}