{"ver":"0.1","info":{"id":"ttV3zm","date":"1592689538","viewed":82,"name":"Gamma vs Linear","username":"gabrielmuller","description":"Rendering a point light and a diffuse sphere with perspective\n\nLeft is gamma space, right is linear space.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["gamma"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define COLOR vec3(1., .7, .5)\n\n#define SPEED .5\n#define AMBIENT 0.1\n#define LIGHT_DISTANCE 5.\n#define LIGHT_INTENSITY 16.\n#define HDR\n\n#define RADIUS 1.\n#define CENTER vec3(0)\n\n#define CAMERA_POS vec3(0., 0., -3.)\n\n#define GAMMA 2.2\n\nfloat brightnessAt(in vec3 intersection, in vec3 lightPos, in float ambient) {\n\tvec3 normal = normalize(intersection - CENTER);\n    vec3 intersectionToLight = lightPos - intersection;\n    vec3 lightDir = normalize(intersectionToLight);\n    float distance = length(intersectionToLight);\n    float intensity = LIGHT_INTENSITY / (distance*distance);\n\n    return (dot(normal, lightDir) * intensity) * (1.-ambient) + ambient;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float minResolution = min(iResolution.x*.5, iResolution.y);\n    vec2 uv = (fragCoord - 0.5 * vec2(iResolution.x*.5, iResolution.y)) / minResolution;\n    vec2 half_uv = vec2(uv.x + .5, uv.y);\n    half_uv.x = fract(half_uv.x) - .5;\n    vec3 direction = normalize(vec3(half_uv, -1.));\n    vec3 toCenter = CENTER - CAMERA_POS;\n    \n    float projection = dot(toCenter, direction);\n    float radiusSegment = sqrt(dot(toCenter, toCenter) - projection*projection);\n    float radicand = RADIUS * RADIUS - radiusSegment * radiusSegment;\n    float time = iTime * SPEED;\n\n    vec3 lightPos = vec3(cos(time), sin(time), abs(sin(time *.618))) * LIGHT_DISTANCE;\n    \n    bool linear = uv.x > .5;\n    // Ambient is compensated for better comparison\n    float exponent = linear ? GAMMA : 1.;\n    float ambient = pow(AMBIENT, exponent);\n    float maxBrightness = 1.;\n#ifdef HDR\n    vec3 brightestPoint = normalize(lightPos - CENTER) * RADIUS;\n    maxBrightness = brightnessAt(brightestPoint, lightPos, ambient);\n#endif\n    vec3 finalColor;\n    if (radicand > 0.) {\n        float halfChord = sqrt(radicand);\n        vec3 intersection = CAMERA_POS + (projection - halfChord) * direction;\n\n        float brightness = brightnessAt(intersection, lightPos, ambient) / maxBrightness;\n        vec3 albedo = COLOR;\n\n        albedo = pow(albedo, vec3(exponent));\n        finalColor = brightness * albedo;\n    } else {\n        finalColor = pow(texture(iChannel0, uv).rgb, vec3(exponent));\n        finalColor = finalColor * ambient / maxBrightness;\n    }\n    finalColor = pow(finalColor, vec3(1./exponent));\n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}