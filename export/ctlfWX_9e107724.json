{"ver":"0.1","info":{"id":"ctlfWX","date":"1693525227","viewed":35,"name":"Variating Julia set","username":"c0b0w","description":"Varition from my precedent Mandelbro set fractal : https://www.shadertoy.com/view/dtfBzX","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["factal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 multiplicationVectorielle(vec2 a, vec2 b) {\n    mat2 matriceA = mat2(a.x, a.y, -a.y, a.x);\n    return matriceA * b;\n}\n\n// Inigo Quilez : https://iquilezles.org/articles/palettes/\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ) \n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n// Zn+1 = Z^2n + C\nvec2 computeNext(vec2 current, vec2 c) {\n    vec2 z = multiplicationVectorielle(current, current) + c;\n    return z;\n}\n\nfloat mod2(vec2 z) {\n    return z.x * z.x + z.y * z.y;\n}\n\n// -1.417022285618, 0.0099534\nfloat fractal(vec2 uv, float N) {\n    float nb_iterations = N;\n    float i = 0.; \n    vec2 z = vec2(uv*2.); // Important pour Julia, z commence à uv\n    // vec2 c = vec2(-1.317, -0.668);  // accelerate from 1.5 sec and 17.35 || 22.5 ==> 38.5\n    vec2 c = vec2(-1.417, 0.01);\n    \n    float speed = 0.3; \n    //speed = mod(iTime, 3.) < 1. ? 0.1 : 0.3; // mod <=> %\n    \n    // Variation de c au cours du temps\n    c += vec2(0.8 * sin(speed * iTime) + cos(speed * iTime), -0.8 * sin(speed * iTime));\n    // c += vec2(0.8 * sin(speed * 3.3) + cos(speed * 3.3), -0.8 * sin(speed * 3.3));\n\n    \n    while(i < nb_iterations && mod2(z) < 4.) {\n        z = computeNext(z, c);\n        i ++;\n    }\n    \n    // smooth-iteration-count formula Inigo Quilez : https://iquilezles.org/articles/msetsmooth/\n    float mod = sqrt(mod2(z)); \n    float smooth_iteration = i - log2(max(1., log2(mod)));\n    \n    return i;\n    \n}\n\n\n// palette colors values : http://dev.thi.ng/gradients/ \nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy; // range : <0, 1>\n    uv -= 0.5; // draw from the center, range : <-0.5,0.5> \n    uv.x *= iResolution.x/iResolution.y; // range x : <−0.888, 0.888> -- y : <-0.5, 0.5>\n    \n    float N = 64.;\n    float iteration = fractal(uv, N);\n\n    \n    vec3 col = vec3(iteration/N);\n    // col = palette(iteration, vec3(2., 0.2, 0.), vec3(0., 0.5, 0.), vec3(0., -0.66, 0.0), vec3(0., 0.333, 0.));\n    // col = palette(iteration/N, vec3(0.948, 0.218, 0.000), vec3(0.028, 0.418, 0.000), vec3(-0.672, -1.612, 0.000), vec3(0.000, 0.248, 0.000));\n    // col = palette(iteration/N, vec3(0.861, 0.637, 0.733), vec3(0.029, 0.547, 0.999), vec3(1.150, 0.705, 0.209), vec3(3.379, 2.591, 5.729));\n    // col = palette(iteration/N, vec3(0.168, 0.498, -0.112), vec3(0.138, -0.582, 0.532), vec3(-1.112, 1.448, 1.001), vec3(0.918, 0.638, 0.918));\n    \n    col = palette(iteration/N, vec3(0.278, 0.168, -0.222), vec3(-0.752, 0.808, -1.142), vec3(1.608, 0.998, 1.001), vec3(0.198, 1.308, 0.918));\n    // col = palette(iteration/N, vec3(0.168, 0.278, 0.500), vec3(0.000, 0.500, 0.500), vec3(1.778, 1.000, 1.000), vec3(0.000, 0.333, 0.667));\n    if (iteration == N) col = vec3(0.); // Interior in black\n    \n    fragColor = vec4(col,1.0); // Output to screen\n}","name":"Image","description":"","type":"image"}]}