{"ver":"0.1","info":{"id":"clGcDd","date":"1700781943","viewed":93,"name":"simple tatami square","username":"jt","description":"A square tiled with tatamis / dominos / \"dimers\".","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["square","tiling","tatami","domino","dimer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/clGcDd simple tatami square, 2023 by jt\n\n// A square tiled with tatamis / dominos / \"dimers\".\n\n// Read about tatami tilings while looking up\n// https://en.wikipedia.org/wiki/Domino_tiling\n// (and lozenge tilings).\n\n// Some articles about tatami-tilings:\n// https://www.kurims.kyoto-u.ac.jp/~kyodo/kokyuroku/contents/pdf/1691-01.pdf\n// https://mathoverflow.net/questions/103165/monomer-dimer-tatami-tilings-need-better-relationships-with-other-math-summary\n// Possibly also in: Knuth, The Art of Computer Programming, Volume 4A Combinatorial Algorithms, Part 1\n\n// tags: square, tiling, tatami, domino, dimer\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvec3 hash32(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\n// Input: 2d integer grid position\n// Output: unique 2d integer tatami id\nivec2 simple_tatami_square(ivec2 t) // https://www.shadertoy.com/view/clGcDd simple tatami square, 2023 by jt\n{\n    bool flip = max(t.x,-1-t.x) < abs(t.y+(t.y < 0 ? 1 : 0));\n    if(flip) t.xy = ivec2(-t.y,t.x);\n    t.y = (t.y+(t.x<0 ? t.x&1 : ~(t.x&1)))>>1;\n    if(flip) t.xy = ivec2(t.y,-t.x);\n    return t;\n}\n\nbool edge(vec2 I)\n{\n    float e = 0.1;\n    ivec2 a = simple_tatami_square(ivec2(floor(I-e)));\n    ivec2 b = simple_tatami_square(ivec2(floor(I+e)));\n    return any(not(equal(a, b)));\n}\n\nvoid mainImage(out vec4 o, in vec2 I)\n{\n    vec2 R = iResolution.xy;\n    I = (2.0 * I - R) / R.y; // thanks to Fabrice\n    vec3 c = vec3(0);\n    if(all(lessThan(abs(I), vec2(1))))\n    {\n        I *= 10.0;\n        ivec2 t = ivec2(floor(I));\n        ivec2 id = simple_tatami_square(t);\n        c = hash32(vec2(id));\n        if(edge(I)) c *= 0.0;\n    }\n\n    o = vec4(c, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}