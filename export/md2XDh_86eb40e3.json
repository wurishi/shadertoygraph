{"ver":"0.1","info":{"id":"md2XDh","date":"1670363039","viewed":154,"name":"Britney Galore","username":"ilia87","description":"A britney spears fractal. Use WASD to move","likes":2,"published":3,"flags":48,"usePreview":0,"tags":["menger","britney"],"hasliked":0,"parentid":"7tKfWm","parentname":"BoxRayMarch1"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MENGER_STEPS 6\n\nconst vec3 ambientColor = vec3(1.0,0,0);\nconst vec3 diffuseColor = vec3(0,1.0,0);\nconst vec3 specularColor = vec3(1.0,1.0,1.0);\nconst float shininessVal = 3.0;\nconst float Ka = 0.3;\nconst float Kd = 0.6;\nconst float Ks = 0.4;\nconst vec3 boxPos = vec3(0,0,0);\nvec3 boxWidth = vec3(3.);\nconst float SMALL_DIST = .0001;\n\n\nfloat sdBox(vec3 p, vec3 boxWidth)\n{\n    vec3 q = abs(p) - boxWidth;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdBox2d(vec2 p, vec2 boxWidth)\n{\n    vec2 q = abs(p) - boxWidth;\n    return length(max(q,0.0)) + min(max(q.x,q.y),0.0);\n}\n\nfloat sdCross(vec3 p, vec3 crossWidth)\n{\n    return min(min(\n        sdBox2d(p.xy,crossWidth.xy),\n        sdBox2d(p.yz,crossWidth.yz)),\n        sdBox2d(p.zx,crossWidth.zx));\n}\n\nfloat GetDist(vec3 pos)\n{\n    vec3 p = pos;\n    p -= boxPos;\n    float b = sdBox(p, boxWidth);\n    float d = b;\n    vec3 crossWidth = boxWidth * .333333333333;\n    for ( int i=0;i<MENGER_STEPS;++i)\n    {\n        float c = sdCross(p,crossWidth);\n        d = max(d,-c);\n        p += crossWidth;\n        p = mod(p,2.*crossWidth);\n        p -= crossWidth;\n        crossWidth *= .3333333333333;\n    }    \n    \n    return d;\n}\n\nvec3 GetNormal(vec3 p)\n{\n    const vec2 e = vec2(0.001,0.);\n    return normalize(GetDist(p) - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx)));\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, float dist0)\n{\n    float dist = dist0;\n    for (int iStep = 0;iStep < 150;++iStep)\n    {\n        float ddist = GetDist(ro+rd*dist);\n        dist += ddist;\n    }\n    return dist;\n}\n\nvec3 Phong(vec3 pos, vec3 N, vec3 L, vec3 camPos)\n{\n    //vec3 L = lightSrc-pos;\n    //float lightDist = length(L);\n    //L /= lightDist;\n    float lambertian = max(dot(N, L), 0.0);\n    float specular = 0.0;\n    if(lambertian > 0.0) {\n      vec3 R = reflect(-L, N);      // Reflected light vector\n      vec3 V = normalize(camPos-pos); // Vector to viewer\n      // Compute the specular term\n      float specAngle = max(dot(R, V), 0.0);\n      specular = pow(specAngle, shininessVal);\n    }\n    return Ka * ambientColor +\n                   (Kd * lambertian * diffuseColor +\n                   Ks * specular * specularColor)\n                   ;// /pow(lightDist * lightDistFact,lightDistPow);\n}\n\nvec4 SampleCell(vec2 uv, ivec2 cellNum)\n{\n    vec2 cellSize = floor(iResolution.xy / vec2(numCells));\n    int buffNum = cellNum.x / numCells.x;\n    cellNum.x -= buffNum*numCells.x;\n    if ( buffNum == 0)\n        return texelFetch(iChannel1,ivec2((vec2(cellNum)+uv)*cellSize),0);\n    else if (buffNum == 1)\n        return texelFetch(iChannel2,ivec2((vec2(cellNum)+uv)*cellSize),0);\n    else\n        return texelFetch(iChannel3,ivec2((vec2(cellNum)+uv)*cellSize),0);\n}\n\nvec3 MengerColor(vec3 p)\n{\n    vec3 cmap[6] = vec3[6](\n        vec3(1,0,0),\n        vec3(0,1,0),\n        vec3(0,0,1),\n        vec3(.6,.6,0),\n        vec3(.6,0,.6),\n        vec3(0,.6,.6));\n    p -= boxPos;\n    float b = sdBox(p, boxWidth);\n    if (b > SMALL_DIST )\n        return vec3(0);\n    vec3 crossWidth = boxWidth * .333333333333;\n    for ( int i=0;i<MENGER_STEPS;++i)\n    {\n        float c = sdCross(p,crossWidth);\n        if ( abs(c)<SMALL_DIST)\n        {\n            vec2 p2;\n            vec2 c2;\n            int dir;\n            if      (abs(p.z-crossWidth.z)<SMALL_DIST || abs(p.z+crossWidth.z)<SMALL_DIST)\n            {\n                p2 = p.xy;\n                c2 = crossWidth.xy;\n                dir = 0;\n            }\n            else if (abs(p.x-crossWidth.x)<SMALL_DIST || abs(p.x+crossWidth.x)<SMALL_DIST)\n            {\n                p2 = p.yz;\n                c2 = crossWidth.yz;\n                dir = 1;\n            }\n            else if (abs(p.y-crossWidth.y)<SMALL_DIST || abs(p.y+crossWidth.y)<SMALL_DIST)\n            {\n                p2 = p.zx;\n                c2 = crossWidth.zx;\n                dir = 2;\n            }\n            else\n            {\n                return vec3(0,0,1);\n            }\n            //p2 = abs(p2);\n            p2 += c2;\n            //p2 = mod(p,c2);\n            vec2 uv = fract(p2/c2*.5);\n            //vec2 uv = mod(p2,c2)/c2;\n            //return vec3(uv,0.);\n            //return texture(iChannel2,1.-uv.yx).xyz;\n            return SampleCell(1.-uv.yx,ivec2((MENGER_STEPS-i-1)*3+dir,0)).xyz;\n            //p/=crossWidth;\n            //if ( \n            //return cmap[i%6];\n        }\n        p += crossWidth;\n        p = mod(p,2.*crossWidth);\n        p -= crossWidth;\n        crossWidth *= .3333333333333;\n    }\n    return vec3(1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    mat3 camRot = GetCamRot(iMouse,iResolution);\n\n    //mat2 R = Rotation(iTime*.3);\n    vec3 camPos = GetCamPos(iChannel0);\n    //camPos.xz *= R;\n    \n    vec3 rd;\n    rd.xy = (fragCoord*2.0 - iResolution.xy) / iResolution.x;\n    rd.z = 1.0;\n    //rd.xz *= R;\n    rd = camRot * rd;\n    vec3 ro = camPos;\n    rd = normalize(rd);\n    float dist = RayMarch(ro,rd,0.);\n    //if(  dist < -1.)\n    //{\n    //    fragColor.xyz=vec3(1,0,0);\n    //    return;\n    //    \n    //}\n    vec3 p = ro + rd*dist;\n    float finalDist = GetDist(p);\n    if (finalDist<SMALL_DIST)\n    {\n        vec3 n = GetNormal(p);\n        //fragColor = vec4(Phong(p,n,normalize(vec3(3,2,-3)),camPos),1);\n        //fragColor.xyz = .5*MengerColor(p) + .5*fragColor.xyz;\n        fragColor.xyz = MengerColor(p);\n    }\n    else\n    {\n        fragColor = vec4(0,0,0,1);\n    }    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.);\n    if (iFrame < 10 )\n        return;\n    if (int(fragCoord.x) > 0 || int(fragCoord.y) > 0)\n        return;\n    vec3 camPos = GetCamPos(iChannel0);\n    mat3 camRot = GetCamRot(iMouse,iResolution);\n    float speed = .02;\n    if ( texelFetch(iChannel3,ivec2(87,0),0).x != 0. )\n    {\n        camPos += camRot[2]*speed;\n    }\n    if ( texelFetch(iChannel3,ivec2(83,0),0).x != 0. )\n    {\n        camPos -= camRot[2]*speed;\n    }\n    if ( texelFetch(iChannel3,ivec2(65,0),0).x != 0. )\n    {\n        camPos -= camRot[0]*speed;\n    }\n    if ( texelFetch(iChannel3,ivec2(68,0),0).x != 0. )\n    {\n        camPos += camRot[0]*speed;\n    }\n    fragColor.xyz = camPos;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\nmat2 Rotation(float angle)\n{\n    return mat2(cos(angle),-sin(angle),sin(angle),cos(angle));\n}\n\nmat3 Rotation3(float theta, float phi, float psi)\n{\n    float ct = cos(theta);\n    float st = sin(theta);\n    float cp = cos(phi);\n    float sp = sin(phi);\n    float cs = cos(psi);\n    float ss = sin(psi);\n    return \n        mat3(cp,0,-sp,0,1,0,sp,0,cp) *\n        mat3(1,0,0,0,ct,-st,0,st,ct) *\n        mat3(cs,-ss,0,ss,cs,0,0,0,1);\n        \n}\n\nmat3 GetCamRot(vec4 iMouse, vec3 iResolution)\n{\n    return Rotation3(\n        (.5+iMouse.y/iResolution.y)*radians(180.),\n        -iMouse.x/iResolution.x*radians(360.),\n        0.);\n}\n\nvec3 GetCamPos(sampler2D s)\n{\n    return texelFetch(s,ivec2(0,0),0).xyz;\n}\n\nconst ivec2 numCells = ivec2(6,4);\nconst int frameDilution = 3;\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if ( iFrame%frameDilution != 0)\n    {\n        fragColor = texelFetch(iChannel0,ivec2(fragCoord),0);\n        return;\n    }\n    vec2 cellSize = floor(iResolution.xy / vec2(numCells));\n    fragColor = vec4(0,0,0,1);\n    vec2 cellCoord = floor(fragCoord/cellSize);\n    vec2 coordInCell = fragCoord - cellCoord*cellSize;\n    \n    if ( cellCoord.x == 0. && cellCoord.y == 0.)\n    {\n        fragColor = texture(iChannel2,coordInCell/cellSize);\n        return;\n    }\n    ivec2 prevCell = ivec2(cellCoord);\n    prevCell.y--;\n    if (prevCell.y < 0)\n    {\n        prevCell.y = numCells.y-1;\n        prevCell.x--;\n    }\n    fragColor = texelFetch(iChannel0,prevCell * ivec2(cellSize) + ivec2(coordInCell),0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if ( iFrame%frameDilution != 0)\n    {\n        fragColor = texelFetch(iChannel0,ivec2(fragCoord),0);\n        return;\n    }\n    vec2 cellSize = floor(iResolution.xy / vec2(numCells));\n    fragColor = vec4(0,0,0,1);\n    vec2 cellCoord = floor(fragCoord/cellSize);\n    vec2 coordInCell = fragCoord - cellCoord*cellSize;\n    \n    if ( cellCoord.x == 0. && cellCoord.y == 0.)\n    {\n        fragColor = texelFetch(iChannel1,(numCells-ivec2(1,1))*ivec2(cellSize) + ivec2(coordInCell),0);\n        return;\n    }\n    ivec2 prevCell = ivec2(cellCoord);\n    prevCell.y--;\n    if (prevCell.y < 0)\n    {\n        prevCell.y = numCells.y-1;\n        prevCell.x--;\n    }\n    fragColor = texelFetch(iChannel0,prevCell * ivec2(cellSize) + ivec2(coordInCell),0);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if ( iFrame%frameDilution != 0)\n    {\n        fragColor = texelFetch(iChannel0,ivec2(fragCoord),0);\n        return;\n    }\n    vec2 cellSize = floor(iResolution.xy / vec2(numCells));\n    fragColor = vec4(0,0,0,1);\n    vec2 cellCoord = floor(fragCoord/cellSize);\n    vec2 coordInCell = fragCoord - cellCoord*cellSize;\n    \n    if ( cellCoord.x == 0. && cellCoord.y == 0.)\n    {\n        fragColor = texelFetch(iChannel1,(numCells-ivec2(1,1))*ivec2(cellSize) + ivec2(coordInCell),0);\n        return;\n    }\n    ivec2 prevCell = ivec2(cellCoord);\n    prevCell.y--;\n    if (prevCell.y < 0)\n    {\n        prevCell.y = numCells.y-1;\n        prevCell.x--;\n    }\n    fragColor = texelFetch(iChannel0,prevCell * ivec2(cellSize) + ivec2(coordInCell),0);\n}","name":"Buffer D","description":"","type":"buffer"}]}