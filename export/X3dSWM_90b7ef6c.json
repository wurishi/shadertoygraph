{"ver":"0.1","info":{"id":"X3dSWM","date":"1719202912","viewed":92,"name":"Radial Rainbows","username":"Johnathaniel","description":"Just a random thing I made.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["rainbow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159265;\n\nconst vec2 freq_range = vec2(1., 2. * PI); // frequency range for r1\nconst vec2 amp_range  = vec2(1., 1.);      // amplitude range for r1\nconst int num_waves   = 5;                 // number of waves for r2\nconst float dampening = 1.;                // \nconst float speed     = 0.25;              // how fast the image changes\nconst int num_sectors = 5;                 // number of radial sectors\nconst float pole_size = 100.;              // \n\n// pseudorandom number generator\nfloat rand(inout vec2 seed) {\n    seed += 1.;\n    \n    float x = fract(seed.x);\n    float s0 = fract(sin(dot(floor(seed - 1.), vec2(12.9898, 78.233))) * 43758.5453);\n    float s1 = fract(sin(dot(floor(seed),      vec2(12.9898, 78.233))) * 43758.5453);\n    float s2 = fract(sin(dot( ceil(seed),      vec2(12.9898, 78.233))) * 43758.5453);\n    float s3 = fract(sin(dot( ceil(seed + 1.), vec2(12.9898, 78.233))) * 43758.5453);\n    \n    float r1 = 0.5 * (s2 - s0);\n    float r2 = 0.5 * (s3 - s1);\n    \n    return (((2. * (s1 - s2) + r1 + r2) * x - 3. * (s1 - s2) - 2. * r1 - r2) * x + r1) * x + s1;\n}\n\n// sine wave with random amplitude, phase, and frequency\nfloat r1(inout vec2 seed, float x) {\n    x *= ((freq_range.y - freq_range.x) * rand(seed) + freq_range.x);\n    x += 2. * PI * rand(seed);\n    return ((amp_range.y - amp_range.x) * rand(seed) + amp_range.x) * sin(x);\n}\n\n// fourier series\nfloat r2(inout vec2 seed, float x) {\n    float value = 0.;\n    for (int i = 0; i < num_waves; i++)\n        value += r1(seed, x);\n    return atan(dampening * value) / dampening; // atan to reduce the higher values\n}\n\n// gives the fourier series sharp points\nfloat r3(inout vec2 seed, float x) {\n    return (abs(r2(seed, x)) * r2(seed, x) + abs(r2(seed, x)) * r2(seed, x));\n}\n\n// hue from angle\nvec3 color(float theta) {\n    return sqrt(0.5 + cos(theta - PI * vec3(0, 1, 2) * 2. / 3.) / 2.);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 seed = vec2(speed * iTime);\n    \n    // center origin and convert to polar coordinates\n    vec2 coord = (2. * fragCoord - iResolution.xy) / iResolution.y;\n    coord = vec2(length(coord), atan(coord.x, -coord.y) / 2.);\n    \n    float theta = 0.;\n    for (int i = 0; i < num_sectors; i++)\n        theta += r3(seed, coord.x) * pow(sin(coord.y + float(i) * PI / float(num_sectors)), 2.);\n    \n    fragColor = vec4(color((1. - exp(-pole_size * coord.x * coord.x)) * theta), 0);\n}","name":"Image","description":"","type":"image"}]}