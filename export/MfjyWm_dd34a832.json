{"ver":"0.1","info":{"id":"MfjyWm","date":"1727447970","viewed":45,"name":"crystal march","username":"pb","description":"isolating fractal artifacts and domain repeating them","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["raymarch","4d"],"hasliked":0,"parentid":"X3VXzG","parentname":"mandelbox4d"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//philip.bertani@gmail.com\n\nvoid mainImage(out vec4 O, vec2 u) {\n    vec2 R = iResolution.xy,\n        uv = u/R;\n\n    O *= 0.;\n\n    float[] gk1s = float[](\n        0.003765, 0.015019, 0.023792, 0.015019, 0.003765,\n        0.015019, 0.059912, 0.094907, 0.059912, 0.015019,\n        0.023792, 0.094907, 0.150342, 0.094907, 0.023792,\n        0.015019, 0.059912, 0.094907, 0.059912, 0.015019,\n        0.003765, 0.015019, 0.023792, 0.015019, 0.003765\n    );\n\n    //golfed by fabriceneyret2\n    for (int k; k < 25; k++)      \n        O += gk1s[k] * texture(iChannel0, uv + ( vec2(k%5,k/5) - 2. ) / R );\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define rot(x) mat2(cos(x+vec4(0,11,33,0)))\n\n//formula for creating colors;\n#define H(h)  (  cos(  h*8e3 + 7.*vec3(1,2,.5)   )*.8 + .5 )\n\n//formula for mapping scale factor \n#define M(c)  log(1.+c)\n\n#define R iResolution\n\n\nvoid mainImage( out vec4 O, vec2 U) {\n  \n    O = vec4(0);\n    \n    vec3 c=vec3(0);\n    vec4 rd = normalize( vec4(U-.5*R.xy, .65*R.y, R.y))*100.;\n    \n    float sc,dotp,dotp2,totdist=0., tt=iTime, t=0.;\n    \n    for (float i=0.; i<70.; i++) {\n        \n        vec4 p = vec4( rd*totdist);\n       \n        \n        p.xyz += vec3(150.*iTime,500,-1000.+ 150.*iTime); \n       \n       \n        p.xz *= rot( 1.5);\n           \n        p.yzw = p.xyz;\n        \n        sc = 1.; \n       \n        float s = 2000.-250.;\n        vec4 id = round(p/s);\n        p -= s*id;\n        \n        float uid = 20.*id.x + 30.*id.y + 50.*id.z + 70.*id.w;\n       \n        p.zw *= rot(tt/7.);\n        \n            \n        vec4 w = p;\n       \n        float dd = .55;\n        \n        for (float j=0.; j<5.; j++) {\n          \n            p = abs(p-1.)*.9;\n       \n            dotp = max(1./dot(w-vec4(-dd),w-vec4(-dd)),.2);\n            \n            sc *= dotp; \n            \n            p = p * dotp - .9; \n            \n            w = .97-exp(-p*p) ;\n                    \n        }\n         \n        float dist = abs( 1.-length(p) )/sc ;  //funky distance estimate\n        float stepsize = dist/100. +  5e-3;     \n        totdist += stepsize;                  //move the distance along rd\n        \n        //accumulate color, fading with distance and iteration count\n        c +=\n              \n           + .1 * H(w.xyz + M(sc) + uid) *  exp(-i*i*stepsize*stepsize);\n    }\n    \n    c = 1. - exp(-c*c);\n    O = ( vec4(c,0) );\n               \n}","name":"Buffer A","description":"","type":"buffer"}]}