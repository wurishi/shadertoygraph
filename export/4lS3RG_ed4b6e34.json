{"ver":"0.1","info":{"id":"4lS3RG","date":"1429773737","viewed":388,"name":"Normal Derivatives Vs gradient","username":"kuranes","description":"Mouse X split between the gradient (left ,5 texFetch) and derivatives (right, 1 texFetch, 2x2 blocks resulting much like dxt5 normal compression artifacts) ","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["normal","derivatives"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// 5 texfetch, handling current point spikiness\n#define PRECISE \n// 4 texfetch, nothandling current point\n//#define STANDARD \n\nconst float heightInvScale = 1.0;\nconst vec4 rgb2lum = vec4(0.2126, 0.7152, 0.0722, 0.0);\n\nfloat sampleHeight(const in vec2 coord)\n{\n    \n    return dot(texture(iChannel0, coord), rgb2lum);\n} \n   \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 step = 1.0 / iResolution.xy;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n     \n    // all in one vec3\n    // once all computation derivation computed\n    // that's the same as each sampleHeight() call\n    // divided by heightScale\n    vec3 dHdUV;\n    dHdUV.z = heightInvScale;\n    \n    float split = uv.x - iMouse.x*step.x;\n    if (split > 0.0)   \n    {      \n      float h0 = sampleHeight(uv);\n        \n      dHdUV.x = -dFdx(h0);\n      dHdUV.y = -dFdy(h0);\n    }\n    else\n    {   \n    \tvec2 du = vec2(step.x, 0.0);\n    \tvec2 dv = vec2(0.0, step.y);\n\t\t\n        \n\t\tfloat d1 = sampleHeight(uv + du);\n\t\tfloat d2 = sampleHeight(uv - du);\n\t\tfloat d3 = sampleHeight(uv + dv);\n\t\tfloat d4 = sampleHeight(uv - dv);\n        \n#if defined(PRECISE) \n        //5 TEXFETCH and + 2 ALU \n        \tfloat d0 = sampleHeight(uv);\n\t\t\tdHdUV.x = ((d2 - d0) + (d0 - d1)) * (0.5);\n\t\t\tdHdUV.y = ((d4 - d0) + (d0 - d3)) * (0.5);\n#elif defined (STANDARD)\n        //4 TEXFETCH\n        \tdHdUV.x = (d2 - d1) ;\n        \tdHdUV.y = (d4 - d3) ;\n\n#endif\n        \n        \n        \n    }\n    \n    vec3 normal = normalize(dHdUV);\n   \n    float splitBar = abs(split - 0.001) < 0.001 ? 0.0: 0.9;\n\tfragColor = vec4(splitBar *(0.5 + 0.5 * normal)  , 1.0);\n}","name":"","description":"","type":"image"}]}