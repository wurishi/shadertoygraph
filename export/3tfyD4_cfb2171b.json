{"ver":"0.1","info":{"id":"3tfyD4","date":"1592068218","viewed":434,"name":"ClassiX_Matrix","username":"TRASHTRASH","description":"This pattern is my \"Hello World\" each time I start a new language or framework.","likes":18,"published":1,"flags":0,"usePreview":0,"tags":["2d","grid","random","textures","matrix","beep","boop","trashtrashscifi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//created by TRASHTRASH aka Joshua deLorimier\n\n#define iter 40.0\n#define scaleSpeed 3.0\n#define satSpeed 4.2\n\n// Dave Hoskins - https://www.shadertoy.com/view/4djSRW\n//noise\nfloat N2(vec2 p) {\t\n\tvec3 p3  = fract(vec3(p.xyx) * vec3(443.897, 441.423, 437.195));\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    //create coordinates \n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n    \n    //iterate to make grid\n    uv*=iter;\n    //give ID's for each square\n\tvec2 gv=fract(uv)-0.5;\n    vec2 id=floor(uv);\n    //random values\n    float ran = N2(id);\n    float ran2 = N2(id+64.0);\n    //offset each grid\n    vec2 d = abs(gv) - (abs(sin((iTime*scaleSpeed)*ran)*0.5)-0.05);\n    //draw the square\n    float rect = min(max(d.x, d.y),0.0) + length(max(d, 0.));\n\tfloat r = step(0., rect);\n    //combine square and offset to the color var\n\tvec3 col = vec3(1.-r)*vec3(abs(sin((iTime*satSpeed)*ran2))*.8);\n    //add green color\n    col *= vec3(.3,.8,0.4);\n    //draw to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}