{"ver":"0.1","info":{"id":"csX3DH","date":"1666042779","viewed":119,"name":"RayMarching IFS fractal","username":"legoushque","description":"My version of classic raymarching fractal :)\nidk how to color it yet, but i added ambient occlusion and 'stroke'","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","fractal"],"hasliked":0,"parentid":"7lGBWc","parentname":"legoushque RM template"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define TAU 6.283185\n#define PI 3.141592\n#define S smoothstep\n#define T iTime\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\n\nfloat GetDist(vec3 p, inout vec3 orbit) {\n    vec3 v = vec3(cos(iTime*.12)*sin(iTime*0.73)*4. + 5., 5.+(sin(iTime*1.23)+0.5)*5., 3.+(cos(iTime*0.24)+0.5)*5.);\n    vec3 n = normalize(v);\n    float scale = 2.;\n    p *= scale;\n    \n    for(int i = 0; i < 10; i++){\n    \n        p = abs(p);\n        float lp = length(p);\n        if(orbit.x > lp) orbit.x = lp;\n        if(orbit.y < lp/scale) orbit.y = lp/scale;\n        \n        \n        p -= 2.*n*max(0., dot(n, p-n*0.6));\n        scale *= 2.;\n        p *= 2.;\n        p += n;\n        \n    }\n    \n    float d = sdBox(p, vec3(10, 10, 10))/scale;\n    \n    return d;\n}\n\nfloat GetDist(vec3 p){\n    vec3 fake;\n    return GetDist(p, fake);\n\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, inout int i, inout float mindist, inout vec3 orbit) {\n\tfloat dO=0.;\n    mindist = length(ro);\n    orbit += mindist;\n    for(i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p, orbit);\n        orbit.z = fract(orbit.z + length(p));\n        if(dS < mindist) mindist = dS;\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    orbit = fract(orbit);\n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(.001, 0);\n    vec3 n = GetDist(p) - \n        vec3(GetDist(p-e.xyy), GetDist(p-e.yxy),GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\nvec3 square_bezier(vec3 a, vec3 b, vec3 c, float t){\n    return mix(mix(a, b, t), mix(a, b, t), t);\n\n}\n\nvec3 BG(vec3 rd){\n    vec3 a = vec3(0.1, 0.6, 0.2);\n    vec3 b = vec3(0.2, 0.1, 0.8);\n    return mix(a, b, dot(rd, vec3(0, 1, 0)) * 0.5 + 0.5);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = (iMouse.xy-.5*iResolution.xy)/iResolution.xy;\n\n    vec3 ro = vec3(cos(iTime)*3., 1., 3.*sin(iTime));\n    ro.yz *= Rot(-m.y*PI+1.);\n    ro.xz *= Rot(-m.x*TAU);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 1.);\n    vec3 col = vec3(0);\n    int i = 0;\n    float mindist;\n    vec3 orbit_trap;\n    float d = RayMarch(ro, rd, i, mindist, orbit_trap);\n    float iter = float(i)/float(MAX_STEPS);\n    vec3 a = vec3(0.7, 0.1, 0.1);\n    vec3 b = vec3(0.1, 0.1, 0.7);\n    vec3 c = vec3(0.1, 0.5, 0.1);\n    col += BG(rd);\n    col *= S(SURF_DIST*10., SURF_DIST*20., mindist);\n    \n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n\n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        col = vec3(1)*pow(1.-iter, 5.)*(sin(orbit_trap*TAU+iTime)*0.3+0.5);\n    }\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}