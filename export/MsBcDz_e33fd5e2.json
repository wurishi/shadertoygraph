{"ver":"0.1","info":{"id":"MsBcDz","date":"1491598354","viewed":154,"name":"STAD 0004","username":"tpen","description":"Shadertoy-a-day, entry #4!\n\nYou can probably guess by now that I like circles a lot.\n\nShadertoy version of http://imgur.com/gallery/R5Kty3B","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d","circles","stad","copyagif","shadereveryday"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/MsBcDz\n// based on http://imgur.com/gallery/R5Kty3B\n\nconst float NUMBER_OF_CIRCLES = 12.0;\nconst float PI = 3.14159265359;\nconst float MOTION_BLUR = 5.0;\nconst float MAX_T = 4.0;\n\nfloat circle(vec2 p, vec2 center, float exRadius, float inRadius)\n{\n    float d = distance(p, center);\n    float aaf = fwidth(d);\n    \n    return smoothstep(inRadius - aaf, inRadius, d)\n        -smoothstep(exRadius - aaf, exRadius, d);\n}\n\nfloat circleEx(vec2 p, vec2 center, float exRadius, float inRadius, float t, float speed, float minBorder)\n{\n    float regCircle = circle(p, center, exRadius, max(exRadius-minBorder,inRadius));\n\n    vec2 diff = p - center;\n    float angle = atan(diff.y, diff.x);\n    \n    float ret = 0.0;\n\n    float recExRadius = (exRadius-inRadius)*0.5;\n    float recInRadius = min(recExRadius-minBorder, recExRadius * inRadius / exRadius);\n    float xradius = inRadius + recExRadius;\n    \n    for (float i = 0.0; i < NUMBER_OF_CIRCLES; i++)\n    {\n        float a = -t*speed + i / NUMBER_OF_CIRCLES * PI * 2.0;\n       \n        vec2 cpos = center + vec2(cos(a), sin(a)) * xradius;\n        \n        float c = circle(p, cpos, recExRadius, recInRadius);\n        ret = max(ret, c);\n    }\n    \n    return mix(ret,regCircle,pow(smoothstep(3.0,4.0,speed),2.0));\n}\n\nfloat circleExMB(vec2 p, vec2 center, float exRadius, float inRadius, float t, float speed, float minBorder)\n{\n   \tfloat ret = 0.0;\n    for (float i = -MOTION_BLUR; i <= MOTION_BLUR; i += 1.0)\n    {\n        float t2 = t + (i / MOTION_BLUR) * speed * 0.1 * 0.05;\n        ret += circleEx(p, center, exRadius, inRadius, t2, speed, minBorder);\n    }\n    return ret / (MOTION_BLUR * 2.0 + 1.0);\n}\n\nfloat pattern(vec2 p, float t)\n{    \n    float factor = smoothstep(0.0, 1.0, (1.0 - (t / MAX_T)));\n    float radius = 5.0 * factor;\n    float width = 2.0/3.0 * factor;\n    float minBorder = 0.05;\n    radius = max(radius, width);\n    radius = max(radius,1.0/3.0);\n    width = max(width, minBorder);\n    float tx = t;\n    float speed = t;\n\tfloat d = circleExMB(p, vec2(0.0, 1.0/3.0 - radius), radius, radius - width, tx, speed, minBorder);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = 2.0 * fragCoord.xy / iResolution.xy - vec2(1.0);\n    uv.x *= iResolution.x / iResolution.y;\n    \n    float time = mod(iTime * 0.5, MAX_T);\n    \n    float d = pattern(uv, time);\n    \n    fragColor = vec4(vec3(1.0 - d), 1.0);\n}","name":"Image","description":"","type":"image"}]}