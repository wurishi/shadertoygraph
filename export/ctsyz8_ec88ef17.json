{"ver":"0.1","info":{"id":"ctsyz8","date":"1690399465","viewed":115,"name":"Loading black and white neon","username":"Arkitu","description":"edit : upgraded to use iDate[3] instead of iTime so that it is in sync even if it runs on different devices at the same time","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["loading","neon"],"hasliked":0,"parentid":"DtlcR8","parentname":"Neon loading"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.1415926535897932384626433832795;\n\n//const float CIRCLE_COUNT = 10.;\nconst float GLOBAL_RADIUS = .5;\n\n/*\n\nfragColor : output (r, g, b, a)\nfragCoor : position du pixel (x, y)\niTime : timestamp actuel en secondes\niResolution : résolution de l'écran\n\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float CIRCLE_COUNT = (sin(iDate[3]/2.))*150.;\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n\n    vec3 baseColor = vec3(1.);\n\n    vec3 color = vec3(.0);\n\n    float unitAngle = (2.*PI)/CIRCLE_COUNT;\n    for (float i = 0.; i < abs(CIRCLE_COUNT); i++) {\n        if (i == 0.) {\n            continue;\n        }\n        float angle = (1.01)*i + unitAngle * i;\n        vec2 center = vec2(cos(angle), sin(angle))*GLOBAL_RADIUS;\n        float a = (sin(.001/(length(uv-center) - ((sin(iDate[3]+(1.*i)))/10.)))/2.);\n        color += baseColor*a;\n    }\n    \n\n    fragColor = vec4(color, 1.);\n}","name":"Image","description":"","type":"image"}]}