{"ver":"0.1","info":{"id":"tdjBW1","date":"1589984236","viewed":118,"name":"fork-Waveform-based sounds-v3","username":"jorge2017a1","description":"fork-Waveform-based sounds-v3","likes":5,"published":1,"flags":8,"usePreview":0,"tags":["forkwaveformbasedsoundsv3"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"///Resonant Lowpass Sawtooth\n\n// --- access to the image of ascii code c\n//#define C(c) U.x-=.5; T+= U.x<.0||U.x>1.||U.y<0.||U.y>1. ?vec4(0): texture( iChannel3, U/16. + fract( vec2(c, 15-c/16) / 16.))\n//#define C(c) U.x-=.5; T+= U.x<.0||U.x>1.||U.y<0.||U.y>1. ?vec4(0): textureLod( iChannel3, U/16. + fract( vec2(c, 15-c/16) / 16.), \\\n//                                                                               log2(length(fwidth(U/16.*iResolution.xy))) )\n  #define C(c) U.x-=.5; T+= U.x<.0||U.x>1.||U.y<0.||U.y>1. ?vec4(0): textureGrad(iChannel3, U/16. + fract( vec2(c, 15-c/16) / 16.), dFdx(U/16.),dFdy(U/16.) )\n#define initMsg vec4 T = vec4(0)\n#define endMsg  return length(T.yz)==0. ? 0. : T.x\n\nfloat message(vec2 U) { // to alter in the icon with the alter message\n    vec4 T = vec4(0);   // or: initMsg;\n    C(83);C(111);C(117);C(110);C(100);C(32);C(105);C(110);C(115);C(105);C(100);C(101); // message \"Sound inside\"\n    return length(T.yz)==0. ? -1. : T.x; // or: endMsg;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    //  if (iResolution.y<200.) to display only in the icon \n    if (iResolution.y<2000.) {float c=message((fragCoord/iResolution.y-vec2(.1,.2))*8.);if(c>=0.){fragColor=vec4(c);return;}}\n\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n\t//fragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n    fragColor = vec4(0.0,0.0,0.0,1.0);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"///version modificada por jorge2017a1 ---jorge.f.p.\n\n/// sonido original por\n///https://www.shadertoy.com/view/wdlfDs   //Created by jetp250 in 2020-05-12\n    \n\n//tambien referencia   \n//https://www.shadertoy.com/view/tsjfzD    //Created by friol in 2020-05-19\n\n\n\n// General settings\n#define STEREO_SEPARATION 1.0\n#define BPM 140.0\n#define PITCH 1.0\n#define VOLUME 0.15\n#define PANNING_AMT 0.0\n#define PANNING_SPEED 0.0\n// one of 'fsquare', 'fsaw', 'fsin' or 'ftriangle'\n#define PANNING_WAVE_FUNC fsquare\n// End of general settings\n\n#define C1 32.7032\n#define Db1 34.6478\n#define D1 36.7081\n#define Eb1 38.8909\n#define E1 41.2034\n#define F1 44.6535\n#define Gb1 46.2493\n#define G1 48.9994\n#define Ab1 51.9131\n#define A1 55.0000\n#define Bb1 58.2705\n#define B1 61.7354\n\n#define C2 65.4064\n#define Db2 69.2957\n#define D2 73.4162\n#define Eb2 77.7817\n#define E2 82.4069\n#define F2 87.3071\n#define Gb2 92.4986\n#define G2 97.9989\n#define Ab2 103.826\n#define A2 110.0000\n#define Bb2 116.541\n#define B2 123.471\n\n#define C3 130.813\n#define Db3 138.591\n#define D3 146.832\n#define Eb3 155.563\n#define E3 164.813\n#define F3 174.614\n#define Gb3 184.997\n#define G3 195.998\n#define Ab3 207.652\n#define A3 220.00\n#define Bb3 233.082\n#define B3 246.942\n\n#define C4 261.626\n#define Db4 277.183\n#define D4 293.665\n#define Eb4 311.127\n#define E4 329.628\n#define F4 349.228\n#define Gb4 369.994\n#define G4 391.995\n#define Ab4 415.305\n#define A4 440.000\n#define Bb4 466.164\n#define B4 493.883\n\n#define C5 523.251\n#define Db5 554.365\n#define D5 587.330\n#define Eb5 622.254\n#define E5 659.225\n#define F5 698.456\n#define Gb5 739.989\n#define G5 783.991\n#define Ab5 830.609\n#define A5 880.000\n#define Bb5 932.328\n#define B5 987.767\n\n#define C6 1046.50\n#define Db6 1108.73\n#define D6 1174.66\n#define Eb6 1244.51\n#define E6 1318.51\n#define F6 1396.91\n#define Gb6 1479.98\n#define G6 1567.98\n#define Ab6 1661.22\n#define A6 1760.00\n#define Bb6 1864.66\n#define B6 1975.53\n\n#define BEATS_IN_BAR 4.0\n#define SONG_LENGTH_BARS 4.0\n#define SONG_LENGTH_BEATS (BEATS_IN_BAR * SONG_LENGTH_BARS)\n\n#define WHOLE_NOTE 4.0\n#define HALF_NOTE 2.5\n#define QUARTER_NOTE 1.0\n#define EIGHTH_NOTE 0.5\n\n#define TWO_PI 6.2831\n\n\n// Beats per second\nconst float BPS = BPM / 60.0;\n\nfloat _t = 0.0;\n\n\n// crude vowel-\"A\" instrument\nfloat voc(float t, float f, float formant)\n{\n    float x = fract(t * f) / f;\n    return (sin(x * 6. * formant) * .4 + sin(x * 12. * formant) + sin(x * 26. * formant) * .2) * min(x * 1000., 1.) * exp(x * -200.);\n}\n\n\nfloat fade(float t, float p) {\n\treturn exp(-3.0 * fract((_t - t)/SONG_LENGTH_BEATS)*(SONG_LENGTH_BEATS/p));   \n}\n\nfloat _get_t(float hz) {\n\treturn hz * _t / BPS * PITCH;   \n}\n\nfloat fsin(float hz) {\n    return sin(TWO_PI * _get_t(hz));\n}\n\nfloat fsaw(float hz) {\n\tfloat t = _get_t(hz);\n    return 2.0 * (t - floor(0.5 + t));\n}\n\nfloat ftriangle(float hz) {\n\treturn 2.0 * abs(fsaw(hz)) - 1.0;   \n}\n\nfloat fsquare(float hz) {\n\tfloat t = _get_t(hz);\n    return 2.0 * (2.0 * floor(t) - floor(2.0 * t)) + 1.0;\n}\n\nfloat lead(float note, float pos, float len) {\n    float falloff = fade(pos, len);\n\tfloat wave = 0.0;\n    //wave += fsin(note) * falloff;\n    wave += fsquare(note) * falloff;\n    wave += fsquare(note*1.005) * falloff;\n    \n    //float voc(float t, float f, float formant)\n    wave += voc(_t, 300.0, 400.0) * falloff;\n    wave += voc(_t, 300.0*1.005, 400.0*1.005) * falloff;\n    \n    //wave += ftriangle(note) * falloff;\n    \n    return wave * 0.5;\n}\n\nfloat filler(float note, float pos, float len) {\n    float falloff = fade(pos, len);\n    float wave = 0.0;\n    wave += ftriangle(note) * falloff;\n    \n    return wave;\n}\n\nfloat bass(float note, float pos, float len) {\n\tfloat falloff = fade(pos, len);\n    float wave = 0.0;\n    wave += ftriangle(note) * falloff;\n    \n    \n    return wave * 2.0;\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\nfloat snare(float pos) {\n\treturn rand(vec2(pos, _t)) * fade(pos, 0.15) * 2.0;\n}\n\nfloat getSong() {\n    float song = 0.0;\n    \n    for (int i = 0; i < 16; ++i) {\n        float fi = float(i) * 1.0;\n        song += snare(fi);\n        song += snare(fi + 0.5);\n        song += snare(fi + 0.75);\n    }\n    \n    song += bass(D3, 0.0, HALF_NOTE);\n    song += filler(D4, 0.0, HALF_NOTE);\n    song += filler(F4, 0.0, HALF_NOTE);\n    song += lead(D4, 0.0, HALF_NOTE);\n    song += lead(F4, 0.0, HALF_NOTE);\n    \n    song += bass(D3, 1.0, HALF_NOTE);\n    song += lead(D4, 1.0, HALF_NOTE);\n    song += lead(F4, 1.0, HALF_NOTE);\n    \n    song += filler(C4, 2.0, HALF_NOTE);\n    song += filler(E4, 2.0, HALF_NOTE);\n    song += bass(C3, 2.0, HALF_NOTE);\n    song += lead(C4, 2.0, HALF_NOTE);\n    song += lead(E4, 2.0, HALF_NOTE);\n    song += lead(G4, 2.0, HALF_NOTE);\n    \n    song += bass(C3, 3.0, HALF_NOTE);\n    song += lead(C4, 3.0, HALF_NOTE);\n    song += lead(E4, 3.0, HALF_NOTE);\n    song += lead(G4, 3.0, HALF_NOTE);\n    \n    song += filler(F4, 3.5, HALF_NOTE);\n    song += filler(A4, 3.5, HALF_NOTE);\n    song += bass(F3, 3.5, HALF_NOTE);\n    song += lead(F4, 3.5, HALF_NOTE);\n    song += lead(A4, 3.5, HALF_NOTE);\n    \n    song += lead(F4, 4.5, HALF_NOTE);\n    song += lead(A4, 4.5, HALF_NOTE);\n    \n    song += bass(F3, 5.0, HALF_NOTE);\n    song += lead(F4, 5.5, HALF_NOTE);\n    song += lead(A4, 5.5, HALF_NOTE);\n\n    song += filler(F4, 6.0, HALF_NOTE);\n    song += filler(A4, 6.0, HALF_NOTE);\n\n    song += bass(F3, 6.0, HALF_NOTE);\n    song += lead(F4, 6.5, HALF_NOTE);\n    song += lead(A4, 6.5, HALF_NOTE);\n    \n    song += bass(F3, 7.0, HALF_NOTE);\n    song += lead(F4, 7.5, HALF_NOTE);\n    song += lead(A4, 7.5, HALF_NOTE);\n    song += lead(C5, 7.5, HALF_NOTE);\n    \n    song += filler(F4, 8.0, HALF_NOTE);\n    song += filler(Bb4, 8.0, HALF_NOTE);\n    song += filler(D5, 8.0, HALF_NOTE);\n    song += bass(Bb2, 8.0, HALF_NOTE);\n    song += lead(F4, 8.0, HALF_NOTE);\n    song += lead(Bb4, 8.0, HALF_NOTE);\n    song += lead(D5, 8.0, HALF_NOTE);\n    \n    song += bass(Bb2, 9.0, HALF_NOTE);\n    song += lead(F4, 9.0, HALF_NOTE);\n    song += lead(Bb4, 9.0, HALF_NOTE);\n    song += lead(D5, 9.0, HALF_NOTE);\n    \n    song += bass(Bb2, 10.0, HALF_NOTE);\n    song += lead(F4, 10.0, HALF_NOTE);\n    song += lead(Bb4, 10.0, HALF_NOTE);\n    song += lead(D5, 10.0, HALF_NOTE);\n    \n    song += bass(Bb2, 11.0, HALF_NOTE);\n    song += lead(F4, 11.0, HALF_NOTE);\n    song += lead(Bb4, 11.0, HALF_NOTE);\n    song += lead(C5, 11.0, HALF_NOTE);\n    \n    song += filler(F4, 11.5, HALF_NOTE);\n    song += filler(Bb4, 11.5, HALF_NOTE);\n    song += filler(D5, 11.5, HALF_NOTE);\n    song += bass(Bb2, 11.5, HALF_NOTE);\n    song += lead(F4, 11.5, HALF_NOTE);\n    song += lead(Bb4, 11.5, HALF_NOTE);\n    song += lead(D5, 11.5, HALF_NOTE);\n    \n    song += bass(Bb2, 13.0, HALF_NOTE);\n    song += lead(F4, 12.5, HALF_NOTE);\n    song += lead(Bb4, 12.5, HALF_NOTE);\n    song += lead(D5, 12.5, HALF_NOTE);\n    \n    song += bass(Bb2, 14.0, HALF_NOTE);\n    song += lead(F4, 13.5, HALF_NOTE);\n    song += lead(Bb4, 13.5, HALF_NOTE);\n    song += lead(D5, 13.5, HALF_NOTE);\n    \n    song += bass(C3, 15.0, HALF_NOTE);\n    song += lead(F4, 14.5, HALF_NOTE);\n    song += lead(A4, 14.5, HALF_NOTE);\n    song += lead(C5, 14.5, HALF_NOTE);\n    \n    song += lead(F4, 15.5, HALF_NOTE);\n    song += lead(A4, 15.5, HALF_NOTE);\n    song += lead(C5, 15.5, HALF_NOTE);\n    \n    return song;\n}\n\n\nvec2 applyPanning(vec2 freqs) {\n    float wave = PANNING_WAVE_FUNC(_t * (PANNING_SPEED)) * .5 + .5;\n    float shift1 = 1.0 - PANNING_AMT + wave * PANNING_AMT;\n    float shift2 = 1.0 - PANNING_AMT - wave * PANNING_AMT;\n    \n    return vec2(shift1 * freqs.x, shift2 * freqs.y);\n}\n\nvec2 postProcess(vec2 freqs) {\n \treturn applyPanning(freqs) * VOLUME;\n}\n\nvec2 mainSound( in int samp,float time) {\n    //time = float(int(4096.0 * time))/4096.0;\n    _t = mod(time * BPS, SONG_LENGTH_BEATS);\n    \n    if (abs(STEREO_SEPARATION) < 0.0001) {\n    \treturn postProcess(vec2(getSong()));   \n    }\n    _t -= 0.01 * STEREO_SEPARATION;\n    float f1 = getSong();\n    _t += 0.02 * STEREO_SEPARATION;\n\tfloat f2 = getSong();\n    \n    // Revert to what it originally was\n    _t -= 0.01 * STEREO_SEPARATION;\n    \n    return postProcess(vec2(f1, f2));\n}","name":"Sound","description":"","type":"sound"}]}