{"ver":"0.1","info":{"id":"lllSRX","date":"1438639065","viewed":229,"name":"Twisted Links","username":"felixfaire","description":"This is my first ever 3D / raymarched shader (be kind). Heavily unoptimised, the most basic of lighting and complete with some lovely aliasing effects.\n\nJust an experimenting with space warping and dist function operations. Hopefully more to come!","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","twist","chain","link"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"uniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\nconst float pi = 3.141592;\n\nconst int steps = 256;\nconst float epsilon = 0.0001;\nconst vec3 skyColour = vec3( 0.1 );\n\nfloat nearPlane = 2.0;\nfloat farPlane = 5.5;\n\nfloat RING_RADIUS = 0.2;\nfloat RING_THICKNESS = 0.8;\nfloat SMOOTHING = 0.05;\nfloat TWIST = 2.0;\n\nvoid rotateY( inout vec3 v, float t )\n{\n\tv *= mat3(cos(t), 0.0, -sin(t),\n                \t0.0, 1.0, 0.0,\n                \tsin(t), 0.0, cos(t));\n}\n\nvoid rotateX( inout vec3 v, float t )\n{\n\tv *= mat3(1.0, 0.0, 0.0,\n                  0.0, cos(t), -sin(t),\n                  0.0, sin(t), cos(t));\n}\n\nvoid repeatX( inout vec3 v, float amount )\n{\n\tv.x = mod(v.x, amount) - amount*0.5;\t\n}\n\n//repeat around y axis n times\nvoid angleRepeatY(inout vec3 p, float n) {\n\tfloat w = 2.0*pi/n;\n\tfloat a = atan(p.z, p.x);\n\tfloat r = length(p.xz);\n\ta = mod(a+pi*.5, w)+pi-pi/n;\n\tp.xz = r*vec2(cos(a),sin(a));\n}\n\n// polynomial smooth min (k = 0.1);\nfloat smin( float a, float b, float k )\n{\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min( a, b ) - h*h*k*(1.0/4.0);\n}\n\nfloat smax(float a,float b, float k)\n{\n    return -smin(-a,-b,k);\n}\n\nfloat getDist( vec3 p )\n{\n\tfloat plane = p.y + 0.4;\n\t\n\trotateY( p, -iMouse.x * 0.005 + iTime * 0.2 );\n\t\n\tangleRepeatY(p, 5.0);\n\t\n\trotateX( p, max(0.0, (-p.x - RING_RADIUS)) * TWIST);\n\t\n\trepeatX( p, 0.5 );\n\t\n\tfloat d = 0.0;\n\tfloat ring1 = 0.0;\n\tfloat ring2 = 0.0;\n\t\n\tfloat sphere1 = length( p - vec3(0.0, 0.0, 0.0) ) - RING_RADIUS;\n\tfloat sphere2 = length( p - vec3(0.0, 0.0,   RING_RADIUS * RING_THICKNESS) ) - RING_RADIUS;\n\tfloat sphere3 = length( p - vec3(0.0, 0.0,  -RING_RADIUS * RING_THICKNESS) ) - RING_RADIUS;\n\t\n\trotateX( p, pi * 0.5);\n\tp.x = mod( p.x, 0.5 ) - 0.25;\n\t\n\tfloat sphere4 = length( p - vec3(0.0, 0.0, 0.0) ) - RING_RADIUS;\n\tfloat sphere5 = length( p - vec3(0.0, 0.0,   RING_RADIUS * RING_THICKNESS) ) - RING_RADIUS;\n\tfloat sphere6 = length( p - vec3(-0.0, 0.0, -RING_RADIUS * RING_THICKNESS) )  - RING_RADIUS;\n    \n\tring1 = smax(sphere1, - sphere2, SMOOTHING);\n\tring1 = smax(ring1, -sphere3, SMOOTHING);\n\tring2 = smax(sphere4, - sphere5, SMOOTHING);\n\tring2 = smax(ring2, - sphere6, SMOOTHING);\n\td = min( min(ring1, ring2), plane);\n\t\n\treturn d;\n}\n\nvec3 getNormal( vec3 p ) \n{\n\tvec2 e = vec2(0.006, 0.0);\n\treturn (vec3( getDist(p+e.xyy), getDist(p+e.yxy), getDist(p+e.yyx)) - getDist(p)) / e.x;\n}\n\nfloat angleBetween( vec3 a, vec3 b )\n{\n\treturn 1.0 - acos( dot(a, b) / (length(a) * length(b)) ) / pi;\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t\n\tvec2 c = fragCoord.xy / iResolution.xy;\n\tc = c * 2.0 - 1.0;\n\tc.x *= iResolution.x / iResolution.y;\n\tc.x *= 0.9;\n\tvec3 col = vec3( 0.1 );\n\t\n\tvec3 o = vec3( 0.0, 1.2 + 0.6 * sin(iTime * 0.3), -2.0 );\n\tvec3 ro = vec3( c.x, c.y, 0.0 ) - o;\n\t\n\tro = normalize(ro);\n\t\n\tfloat t = 0.0;\n\tfor (int i = 0; i < steps; i++)\n\t{\n\t\tvec3 p = o + t * ro;\n\t\tif (length(t*ro) > farPlane) break;\n\t\t\n\t\tfloat d = getDist( p );\n\t\t\n\t\tif (abs(d) < epsilon)\n\t\t{\n\t\t\tfloat fog = smoothstep( nearPlane, farPlane, length(t*ro));\n\t\t\tfloat backLight = angleBetween( ro, getNormal( p ) );\n\t\t\tbackLight *= backLight;\n\t\t\tcol += backLight * 3.0;\n            col = mix( col + 0.01 * float(i) * vec3( 0.6, 0.6, 0.2), skyColour, fog );\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tt += d;\n\t}\n\t\n\tfragColor = vec4( col, 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}