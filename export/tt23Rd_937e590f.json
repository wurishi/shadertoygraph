{"ver":"0.1","info":{"id":"tt23Rd","date":"1561217723","viewed":397,"name":"Spring Has Sprung","username":"blackle","description":"shader for a 512b exe gfx","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["helix","spring","coil"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\n//set SAMPLES to 4. for the party version\n#define SAMPLES 1.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates (from -1 to 1)\n    vec4 cogl_tex_coord_in = vec4(vec2(0.0,1.0)+vec2(1.0,-1.0)*fragCoord/iResolution.xy,0.0,1.0);\n\tfor (float j=0.;j<SAMPLES;j++){\n\tfor (float k=0.;k<SAMPLES;k++){\n    vec3 cameraOrigin = vec3(16.0, 0.0, 4.0);\n    vec3 cameraDirection=normalize(cameraOrigin+cameraOrigin.xyx*(cogl_tex_coord_in*2.0-1.0+k/1000.).x*0.08 + cameraOrigin.zxy*cameraOrigin.yxy*(cogl_tex_coord_in*2.0-1.0+j/800.).y*0.004);\n\n    for (fragColor.w = 0.; fragColor.w < 300.; fragColor.w++) {\n        cameraOrigin=cameraOrigin-cameraDirection*(length(vec3(\n        asin(sin(atan(normalize(cameraOrigin).y/normalize(cameraOrigin).x)-acos(normalize(cameraOrigin).z)*9.0))/9.0 //distance to coils on surface of sphere\n        ,length(cameraOrigin)-1.0,0)) //distance to surface of sphere\n        -0.05);\n    }\n    fragColor.xyz += clamp(sin((sin(length(cameraOrigin)*35.)+1.4)*(cameraOrigin*0.4+.6)),0.,1.)/(SAMPLES*SAMPLES);\n  }\n}\n}","name":"Image","description":"","type":"image"}]}