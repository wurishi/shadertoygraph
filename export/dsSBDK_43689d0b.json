{"ver":"0.1","info":{"id":"dsSBDK","date":"1690141358","viewed":34,"name":"assign5_test","username":"APRS","description":"1","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//============================================================================\n// PROJECT ID:\n//\n// GROUP NUMBER:14\n//\n// STUDENT NAME:CHEN XUEAN\n// NUS User ID.:t0930123\n//\n// STUDENT NAME:DING CHANG\n// NUS User ID.:t0930359\n//\n// STUDENT NAME:LU SHUYU\n// NUS User ID.:t0930183\n//\n// COMMENTS TO GRADER:\n//\n//============================================================================\n\n\n// FRAGMENT SHADER FOR SHADERTOY\n// Run this at https://www.shadertoy.com/new\n// See documentation at https://www.shadertoy.com/howto\n\n// Your browser must support WebGL 2.0.\n// Check your browser at https://webglreport.com/?v=2\n\n\n//============================================================================\n// Constants.\n//============================================================================\n\nconst float PI = 3.1415926536;\n\nconst vec3 BACKGROUND_COLOR = vec3( 0.1, 0.2, 0.6 );\n\n// Vertical field-of-view angle of camera. In radians.\nconst float FOVY = 50.0 * PI / 180.0;\n\n// Use this for avoiding the \"epsilon problem\" or the shadow acne problem.\nconst float DEFAULT_TMIN = 10.0e-4;\n\n// Use this for tmax for non-shadow ray intersection test.\nconst float DEFAULT_TMAX = 10.0e6;\n\n// Equivalent to number of recursion levels (0 means ray-casting only).\n// We are using iterations to replace recursions.\nconst int NUM_ITERATIONS = 2;\n\n// Constants for the scene objects.\nconst int NUM_LIGHTS = 3;\nconst int NUM_MATERIALS = 6;\nconst int NUM_PLANES = 2;\nconst int NUM_SPHERES = 6;\n\n\n//============================================================================\n// Define new struct types.\n//============================================================================\nstruct Ray_t {\n    vec3 o;  // Ray Origin.\n    vec3 d;  // Ray Direction. A unit vector.\n};\n\nstruct Plane_t {\n    // The plane equation is Ax + By + Cz + D = 0.\n    float A, B, C, D;\n    int materialID;\n};\n\nstruct Sphere_t {\n    vec3 center;\n    float radius;\n    int materialID;\n};\n\nstruct Light_t {\n    vec3 position;  // Point light 3D position.\n    vec3 I_a;       // For Ambient.\n    vec3 I_source;  // For Diffuse and Specular.\n};\n\nstruct Material_t {\n    vec3 k_a;   // Ambient coefficient.\n    vec3 k_d;   // Diffuse coefficient.\n    vec3 k_r;   // Reflected specular coefficient.\n    vec3 k_rg;  // Global reflection coefficient.\n    float n;    // The specular reflection exponent. Ranges from 0.0 to 128.0.\n};\n\n//----------------------------------------------------------------------------\n// The lighting model used here is similar to that shown in\n// Lecture Topic B08 (Basic Ray Tracing). Here it is computed as\n//\n//     I_local = SUM_OVER_ALL_LIGHTS {\n//                   I_a * k_a +\n//                   k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ]\n//               }\n// and\n//     I = I_local  +  k_rg * I_reflected\n//----------------------------------------------------------------------------\n\n\n//============================================================================\n// Global scene data.\n//============================================================================\nPlane_t Plane[NUM_PLANES];\nSphere_t Sphere[NUM_SPHERES];\nLight_t Light[NUM_LIGHTS];\nMaterial_t Material[NUM_MATERIALS];\nvec3 trackedSpherePosition;\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Initializes the scene.\n/////////////////////////////////////////////////////////////////////////////\nvoid InitScene()\n{\n    // Horizontal plane.\n    Plane[0].A = 0.0;\n    Plane[0].B = 1.0;\n    Plane[0].C = 0.0;\n    Plane[0].D = 0.0;\n    Plane[0].materialID = 0;\n\n    // Vertical plane.\n    Plane[1].A = 0.0;\n    Plane[1].B = 0.0;\n    Plane[1].C = 1.0;\n    Plane[1].D = 3.5;\n    Plane[1].materialID = 0;\n\n    // Center bouncing sphere.\n    // Sun\n    Sphere[0].center = vec3( 0.0, 1.5, 0.0 );\n    Sphere[0].radius = 0.7;\n    Sphere[0].materialID = 1;\n    \n    mat3 matRotation1 = mat3(0.5, 0.866025, 0,\n                        -0.866025, 0.5, 0,\n                        0, 0, 1);\n\n    // Small satelite\n    Sphere[1].center = matRotation1 * vec3( 0.28 * cos(6.7*iTime), 0, 0.28 * sin(6.7*iTime) )+vec3( 3.0 * cos(PI/2.0*iTime), 0.0, 3.0 * sin(PI/2.0*iTime) )+vec3(0,1.5,0);\n    Sphere[1].radius = 0.04;\n    Sphere[1].materialID = 2;\n    \n    mat3 matRotation2 = mat3(0.5, 0, -0.866025,\n                        0, 1, 0,\n                        0.866025, 0, 0.5);\n    \n    // Earth\n    Sphere[2].center = matRotation2 * vec3( 2.0 * cos(1.0*iTime), 0.0, 2.0 * sin(1.0*iTime) )+vec3(0,1.5,0);\n    trackedSpherePosition = Sphere[2].center;\n    Sphere[2].radius = 0.1;\n    Sphere[2].materialID = 2;\n    \n    // Green planet\n    Sphere[3].center = vec3( 1.25 * cos(5.55*iTime), 0.0, 1.25 * sin(5.55*iTime) )+vec3(0,1.5,0);\n    Sphere[3].radius = 0.08;\n    Sphere[3].materialID = 5;\n    \n    // Moon\n    Sphere[4].center = vec3( 0.3 * cos(5.0*iTime), 0.0, 0.3 * sin(5.0*iTime) )+Sphere[2].center;\n    Sphere[4].radius = 0.03;\n    Sphere[4].materialID = 4;\n    \n    // Purple planet\n    Sphere[5].center = vec3( 3.0 * cos(PI/2.0*iTime), 0.0, 3.0 * sin(PI/2.0*iTime) )+vec3(0,1.5,0);\n    Sphere[5].radius = 0.12;\n    Sphere[5].materialID = 3;\n\n    // Silver material.\n    Material[0].k_d = vec3( 0.5, 0.5, 0.5 );\n    Material[0].k_a = 0.2 * Material[0].k_d;\n    Material[0].k_r = 2.0 * Material[0].k_d;\n    Material[0].k_rg = 0.5 * Material[0].k_r;\n    Material[0].n = 64.0;\n\n    // Gold material.\n    Material[1].k_d = vec3( 0.8, 0.7, 0.1 );\n    Material[1].k_a = 0.2 * Material[1].k_d;\n    Material[1].k_r = 2.0 * Material[1].k_d;\n    Material[1].k_rg = 0.5 * Material[1].k_r;\n    Material[1].n = 64.0;\n\n    // Blue plastic material.\n    Material[2].k_d = vec3( 0.0, 0.3, 0.8 );\n    Material[2].k_a = 0.2 * Material[2].k_d;\n    Material[2].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[2].k_rg = 0.5 * Material[2].k_r;\n    Material[2].n = 128.0;\n    \n    //purple plastic material.\n    Material[3].k_d = vec3( 0.5, 0.1, 0.8 );\n    Material[3].k_a = 0.2 * Material[3].k_d;\n    Material[3].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[3].k_rg = 0.5 * Material[3].k_r;\n    Material[3].n = 128.0;\n    \n    //dark plastic material.\n    Material[4].k_d = vec3( 0.05, 0.05, 0 );\n    Material[4].k_a = 0.2 * Material[4].k_d;\n    Material[4].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[4].k_rg = 0.5 * Material[4].k_r;\n    Material[4].n = 128.0;\n    \n    //green plastic material.\n    Material[5].k_d = vec3( 0.2, 0.7, 0.2 );\n    Material[5].k_a = 0.2 * Material[4].k_d;\n    Material[5].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[5].k_rg = 0.5 * Material[4].k_r;\n    Material[5].n = 128.0;\n\n    // Light 0.\n    Light[0].position = vec3( 4.0, 8.0, -3.0 );\n    Light[0].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[0].I_source = vec3( 1.0, 1.0, 1.0 );\n\n    // Light 1.\n    Light[1].position = vec3( Sphere[5].center.x, 6.0, Sphere[5].center.z );\n    Light[1].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[1].I_source = vec3( 1.0, 1.0, 1.0 );\n    \n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is such an intersection, outputs the value of t, the position\n// of the intersection (hitPos) and the normal vector at the intersection\n// (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax,\n                     out float t, out vec3 hitPos, out vec3 hitNormal )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n\n    // We have a hit -- output results.\n    t = t0;\n    hitPos = ray.o + t0 * ray.d;\n    hitNormal = normalize( N );\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is one or two such intersections, outputs the value of the\n// smaller t, the position of the intersection (hitPos) and the normal\n// vector at the intersection (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax,\n                      out float t, out vec3 hitPos, out vec3 hitNormal )\n{\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n\n    Ray_t sray = Ray_t(ray.o - sph.center, ray.d);\n    float a = 1.0, b = 2.0 * dot(sray.o, sray.d), c = dot(sray.o, sray.o) - sph.radius * sph.radius;\n    float delta = b * b - 4.0 * a * c;\n\n    if (delta < -DEFAULT_TMIN) return false;\n    else if(delta < DEFAULT_TMIN) {\n        float t0 = -b / (a * 2.0);\n        if (t0 < tmin || t0 > tmax) return false;\n        t = t0;\n        hitPos = sray.o + t0 * sray.d;\n        hitNormal = normalize( hitPos );\n        hitPos += sph.center;\n        return true;\n    } else {\n        delta = sqrt(delta);\n        float t1 = (-b - delta) / (a * 2.0), t2 = (-b + delta) / (a * 2.0);\n        if ((t1 < tmin || t1 > tmax) && (t2 < tmin || t2 > tmax)) return false;\n        if ( t1 < tmin || t1 > tmax ) t = t2;\n        else if ( t2 < tmin || t2 > tmax ) t = t1;\n        else t = min(t1, t2);\n        hitPos = sray.o + t * sray.d;\n        hitNormal = normalize( hitPos );\n        hitPos += sph.center;\n        return true;\n    }\n\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax )\n{\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n\n    Ray_t sray = Ray_t(ray.o - sph.center, ray.d);\n    float a = 1.0, b = 2.0 * dot(sray.o, sray.d), c = dot(sray.o, sray.o) - sph.radius * sph.radius;\n    float delta = b * b - 4.0 * a * c;\n\n    if (delta < -DEFAULT_TMIN) return false;\n    else if(delta < DEFAULT_TMIN) {\n        float t0 = -b / (a * 2.0);\n        if (t0 < tmin || t0 > tmax) return false;\n        return true;\n    } else {\n        delta = sqrt(delta);\n        float t1 = (-b - delta) / (a * 2.0), t2 = (-b + delta) / (a * 2.0);\n        if ((t1 < tmin || t1 > tmax) && (t2 < tmin || t2 > tmax)) return false;\n        return true;\n    }\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes (I_a * k_a) + k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ].\n// Input vectors L, N and V are pointing AWAY from surface point.\n// Assume all vectors L, N and V are unit vectors.\n/////////////////////////////////////////////////////////////////////////////\nvec3 PhongLighting( in vec3 L, in vec3 N, in vec3 V, in bool inShadow,\n                    in Material_t mat, in Light_t light )\n{\n    if ( inShadow ) {\n        return light.I_a * mat.k_a;\n    }\n    else {\n        vec3 R = reflect( -L, N );\n        float N_dot_L = max( 0.0, dot( N, L ) );\n        float R_dot_V = max( 0.0, dot( R, V ) );\n        float R_dot_V_pow_n = ( R_dot_V == 0.0 )? 0.0 : pow( R_dot_V, mat.n );\n\n        return light.I_a * mat.k_a +\n               light.I_source * (mat.k_d * N_dot_L + mat.k_r * R_dot_V_pow_n);\n    }\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Casts a ray into the scene and returns color computed at the nearest\n// intersection point. The color is the sum of light from all light sources,\n// each computed using Phong Lighting Model, with consideration of\n// whether the interesection point is being shadowed from the light.\n// If there is no interesection, returns the background color, and outputs\n// hasHit as false.\n// If there is intersection, returns the computed color, and outputs\n// hasHit as true, the 3D position of the intersection (hitPos), the\n// normal vector at the intersection (hitNormal), and the k_rg value\n// of the material of the intersected object.\n/////////////////////////////////////////////////////////////////////////////\nvec3 CastRay( in Ray_t ray,\n              out bool hasHit, out vec3 hitPos, out vec3 hitNormal, out vec3 k_rg )\n{\n    // Find whether and where the ray hits some object.\n    // Take the nearest hit point.\n\n    bool hasHitSomething = false;\n    float nearest_t = DEFAULT_TMAX;   // The ray parameter t at the nearest hit point.\n    vec3 nearest_hitPos;              // 3D position of the nearest hit point.\n    vec3 nearest_hitNormal;           // Normal vector at the nearest hit point.\n    int nearest_hitMatID;             // MaterialID of the object at the nearest hit point.\n\n    float temp_t;\n    vec3 temp_hitPos;\n    vec3 temp_hitNormal;\n    bool temp_hasHit;\n\n    /////////////////////////////////////////////////////////////////////////////\n    // TASK:\n    // * Try interesecting input ray with all the planes and spheres,\n    //   and record the front-most (nearest) interesection.\n    // * If there is interesection, need to record hasHitSomething,\n    //   nearest_t, nearest_hitPos, nearest_hitNormal, nearest_hitMatID.\n    /////////////////////////////////////////////////////////////////////////////\n\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n\n    for ( int i = 0; i < NUM_PLANES; i++ ) {\n        if ( IntersectPlane(Plane[i], ray, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal) ) {\n            hasHitSomething = true;\n            if ( temp_t < nearest_t ) {\n                nearest_t = temp_t;\n                nearest_hitPos = temp_hitPos;\n                nearest_hitNormal = temp_hitNormal;\n                nearest_hitMatID = Plane[i].materialID;\n            }\n        }\n    }\n\n    for ( int i = 0; i < NUM_SPHERES; i++ ) {\n        if ( IntersectSphere(Sphere[i], ray, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal) ) {\n            hasHitSomething = true;\n            if ( temp_t < nearest_t ) {\n                nearest_t = temp_t;\n                nearest_hitPos = temp_hitPos;\n                nearest_hitNormal = temp_hitNormal;\n                nearest_hitMatID = Sphere[i].materialID;\n            }\n        }\n    }\n\n    // One of the output results.\n    hasHit = hasHitSomething;\n    if ( !hasHitSomething ) return BACKGROUND_COLOR;\n\n    vec3 I_local = vec3( 0.0 );  // Result color will be accumulated here.\n\n    /////////////////////////////////////////////////////////////////////////////\n    // TASK:\n    // * Accumulate lighting from each light source on the nearest hit point.\n    //   They are all accumulated into I_local.\n    // * For each light source, make a shadow ray, and check if the shadow ray\n    //   intersects any of the objects (the planes and spheres) between the\n    //   nearest hit point and the light source.\n    // * Then, call PhongLighting() to compute lighting for this light source.\n    /////////////////////////////////////////////////////////////////////////////\n\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n\n    Ray_t Shadowray;\n    Shadowray.o = nearest_hitPos;\n\n    for ( int i = 0; i < NUM_LIGHTS; i++ ) {\n        hasHitSomething = false;\n        Shadowray.d = normalize(Light[i].position - Shadowray.o);\n        float tLight = dot(Light[i].position - Shadowray.o, Light[i].position - Shadowray.o);\n        for (int j = 0; j < NUM_PLANES; j++ ) {\n            if ( IntersectPlane(Plane[j], Shadowray, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal) ) {\n                if ( temp_t * temp_t < tLight) hasHitSomething = true;\n            }\n        }\n        for (int j = 0; j < NUM_SPHERES; j++ ) {\n            if ( IntersectSphere(Sphere[j], Shadowray, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal) ) {\n                if ( temp_t * temp_t < tLight) hasHitSomething = true;\n            }\n        }\n        I_local += PhongLighting(Shadowray.d, nearest_hitNormal, -ray.d, hasHitSomething, Material[nearest_hitMatID], Light[i]);\n    }\n\n    // Populate output results.\n    hitPos = nearest_hitPos;\n    hitNormal = nearest_hitNormal;\n    k_rg = Material[nearest_hitMatID].k_rg;\n\n    return I_local;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Execution of fragment shader starts here.\n// 1. Initializes the scene.\n// 2. Compute a primary ray for the current pixel (fragment).\n// 3. Trace ray into the scene with NUM_ITERATIONS recursion levels.\n/////////////////////////////////////////////////////////////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    InitScene();\n\n    int posMode = 1; // 1: Lock the Earth; 2: Lock the Sun; 3: Stay\n    if ( iMouse.z > 0.0 ) {\n        posMode = 3;\n    }\n\n    // Scale pixel 2D position such that its y coordinate is in [-1.0, 1.0].\n    vec2 pixel_pos = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n\n    // Position the camera.\n    mat3 matRotation3 = mat3(0.866025, 0, -0.5,\n                        0, 1, 0,\n                        0.5, 0, 0.866025);\n\n    vec3 cam_pos, cam_lookat;\n\n    switch ( posMode ) {\n        case 1:\n            cam_pos = matRotation3 * vec3(trackedSpherePosition.x * 1.6, 1.7, trackedSpherePosition.z * 1.6);\n            cam_lookat = trackedSpherePosition;\n            break;\n        case 2:\n            cam_pos = matRotation3 * vec3(trackedSpherePosition.x * 1.6, 1.7, trackedSpherePosition.z * 1.6);\n            cam_lookat = Sphere[0].center;\n            break;\n        case 3:\n            cam_pos = vec3( 3.0, 1.5, 3.0 );\n            cam_lookat = Sphere[0].center;\n            break;\n        default:\n            cam_pos = matRotation3 * vec3(trackedSpherePosition.x * 1.6, 1.7, trackedSpherePosition.z * 1.6);\n            cam_lookat = trackedSpherePosition;\n            break;\n    }\n\n    vec3 cam_up_vec = vec3( 0.0, 1.0, 0.0 );\n\n    // Set up camera coordinate frame in world space.\n    vec3 cam_z_axis = normalize( cam_pos - cam_lookat );\n    vec3 cam_x_axis = normalize( cross(cam_up_vec, cam_z_axis) );\n    vec3 cam_y_axis = normalize( cross(cam_z_axis, cam_x_axis));\n\n    // Create primary ray.\n    float pixel_pos_z = -1.0 / tan(FOVY / 2.0);\n    Ray_t pRay;\n    pRay.o = cam_pos;\n    pRay.d = normalize( pixel_pos.x * cam_x_axis  +  pixel_pos.y * cam_y_axis  +  pixel_pos_z * cam_z_axis );\n\n\n    // Start Ray Tracing.\n    // Use iterations to emulate the recursion.\n\n    vec3 I_result = vec3( 0.0 );\n    vec3 compounded_k_rg = vec3( 1.0 );\n    Ray_t nextRay = pRay;\n\n    for ( int level = 0; level <= NUM_ITERATIONS; level++ )\n    {\n        bool hasHit;\n        vec3 hitPos, hitNormal, k_rg;\n\n        vec3 I_local = CastRay( nextRay, hasHit, hitPos, hitNormal, k_rg );\n\n        I_result += compounded_k_rg * I_local;\n\n        if ( !hasHit ) break;\n\n        compounded_k_rg *= k_rg;\n\n        nextRay = Ray_t( hitPos, normalize( reflect(nextRay.d, hitNormal) ) );\n    }\n\n    fragColor = vec4( I_result, 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}