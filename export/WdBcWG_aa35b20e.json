{"ver":"0.1","info":{"id":"WdBcWG","date":"1587218001","viewed":64,"name":"test-wave-pared-","username":"jorge2017a1","description":"test-wave-pared-","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["testwavepared"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//por jorge2017a1---\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define PI 3.14159265358979323846264\n\n\n#define PI2 6.28318530717\n#define TriplePI (3.0 * PI)\n#define DoublePI (2.0 * PI)\n#define HalfPI (PI / 2.0)\n\n///------------------------------------\nstruct TObj\n{\n    float tipo;\n    float dist;\n    vec3 normal;\n    vec3 ro;\n    vec3 rd;\n    vec2 uv;\n    vec3 color;\n    vec3 p;\n};\n\n\n\n    \nTObj mObj;\nvec3 glpRoRd;\nvec2 gres2;\n\n\n\n\nvec3 ambientColor = vec3(0.05, 0.15, 0.2);\nvec3 diffuseColor = vec3(0.2, 0.6, 0.8);\nvec3 specularColor = vec3(1.0, 1.0, 1.0);\nvec3 lightDir = normalize(vec3(0.0, 4.0, 5.0));\nvec3 spherePos = vec3(0.0, 0.5, 0.0);\n\n\n//Torus function\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n//Sphere function\nfloat sdSphere( vec3 p, float s1 )\n{\n   vec4 s = vec4(0, s1, 9, s1);\n   return  length(p-s.xyz)-s.w;   \n}\n//Box function\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\n\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\n\n\n\nfloat intersectSDF(float distA, float distB) {\n    return max(distA, distB);\n}\n\nfloat unionSDF(float distA, float distB) \n{\n    return min(distA, distB);\n}\n\nfloat differenceSDF(float distA, float distB) \n{\n    return max(distA, -distB);\n}\n\n\nvec2 opU(vec2 d1, vec2 d2 ) {\n  vec2 resp;\n    if (d1.x < d2.x){ \n        resp = d1;\n    }\n    else\n    {\n        resp = d2;\n    }\n     \n   return resp; \n}\n\n\n\n\n///---------------------------------------------\n\n\nvec3 LightShading(vec3 N,vec3 L,vec3 V,vec3 color)\n{\n    vec3 diffuse = max(0.,dot(N,-L))*color;\n    vec3 specular = pow(max(0.,dot(N,normalize(-L-V))),100.)*vec3(1.,1.,1.); \n    return diffuse + specular;\n}\n\n    \n    \n//-------------------------------------------------\n\n\n\nfloat GetDist(vec3 p  ) \n{\t\n\n \n    \n    \n    \n      float d;\n    float dif1;\n    float dif2;\n    \n    d=999.9;\n \n    \n   vec3 pp;\n    pp=p;\n    \n \n    float planeDist1 = p.y-1.0;  //piso inf\n    float planeDist1sup = 20.0-p.y;  //piso sup\n    float planeDist2 = p.x+10.0; //pared izq\n    float planeDist3 = 10.0-p.x;  //pared der\n    float planeDist4 = -p.z+30.0;  //pared atras\n   \n    \n    vec2 res;\n    res = vec2(9999, 0);\n   \n    \n    float sdsp1 =sdSphere( p- vec3(0.0,3.0,0.), 4.0 );\n  \tres =opU(res, vec2(sdsp1,4));\n    \n    float sdb1 = sdRoundBox(p-vec3(10.0,3.0,5.0), vec3(2.0), 0.2 );\n    res =opU(res, vec2(sdb1,7));\n  \n  \n    vec3 p3;\n    p3 =p+vec3(0.,-3.0,0.);\n    float c2 = 8.;\n    p3.y+=sin(p3.x*0.5)-1.0;\n    p3.x=mod(p3.x,2.0)-1.0;\n    float sdb3= sdBox(p3- vec3(0.0,0.0,20.0) , vec3(10.0,6.0,2.0) );\n \tres=opU(res, vec2(sdb3,9 ));\n    \n    \n    vec3 p4;\n    p4 =p+vec3(0.,-3.0,0.);\n    p4.y+=sin(p4.x*0.5+5.0)-1.0;\n    p4.x=mod(p4.x,2.0)-1.0;\n    float sdb4= sdBox(p4- vec3(0.0,-3.0,15.0) , vec3(10.0,6.0,2.0) );\n \tres=opU(res, vec2(sdb4,3 ));\n    \n    vec3 p5;\n    p5 =p+vec3(0.,-3.0,0.);\n    p5.y+=sin(p5.x*0.5+5.0)-1.0;\n    p5.x=mod(p5.x,2.0)-1.0;\n    float sdb5= sdBox(p5- vec3(0.0,0.0,25.0) , vec3(10.0,8.0,2.0) );\n \tres=opU(res, vec2(sdb5,3 ));\n    \n\n    res =opU(res, vec2(planeDist1,4));\n    res =opU(res, vec2(planeDist4,8));\n   \n\t    \n\n    d = res.x;\n    mObj.dist = res.x;\n    mObj.tipo = res.y;\n    \n    return d;\n}\n\n\n\n///----------------------------------------------------------\n\n\n\nfloat RayMarch(vec3 ro, vec3 rd)\n{\n\tfloat dO=0.2;\n    //Determines size of shadow\n    \n    for(int i=0; i<MAX_STEPS; i++) \n    {\n    \tvec3 p = ro + rd*dO;\n        \n        float dS = GetDist(p);\n        \n        dO += dS;\n        if(dO>MAX_DIST || dS<SURF_DIST) \n        {\n            //mObj.dist=dO; \t\n            mObj.p=p; \t\n            gres2 = vec2(dO,dS); \n            break;\n    \t}    \n        \n    }\n    \n    return dO;\n}\n\n\n\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    //Texture of white and black in image\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\n\nfloat GetLightPar(vec3 p, vec3 plig) {\n    vec3 lightPos = plig;\n    //Determine movement of light ex. shadow and light direction and diffusion\n    //lightPos.xz += vec2(1, 2);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l );\n    if(d<length(lightPos-p)) dif *= .1;\n    \n    return dif;\n}\n\n\nfloat saturate(float f)\n{\n\treturn clamp(f,0.0,1.0);\n}\n\nvec3 calcLuz(vec3 p, vec3 origin, vec3 l, vec3 n )\n{\n    \n    vec3 idiffuse=vec3(0.8);\n    vec3 ispecular=vec3(0.7);\n    vec3 lightcolor=vec3(0.7,0.8,0.5);\n    \n    vec3 v = normalize(origin-p);\n\tvec3 h = normalize(l+v);\n\tfloat NdotL = saturate(dot(n,l));\n\tfloat NdotH = saturate(dot(n,h));\n\tvec3 diffuse = NdotL*idiffuse;\n\tvec3 spec = 0.18 * pow(NdotH,40.0) * ispecular;\n\tvec3 color;\n\t\n    color = (diffuse+spec) * lightcolor;\n    return  color;\n}\n    \n\n#define offset1 4.7\n#define offset2 4.6\n//----------------------------------------------------\n\n// Single rotation function - return matrix\nmat2 r2(float a){ \n  float c = cos(a); float s = sin(a); \n  return mat2(c, s, -s, c); \n}\n//--------------------\n\n// iMouse pos function - take in a vec3 like ro\n// simple pan and tilt and return that vec3\nvec3 get_mouse(vec3 ro) {\n    float x = iMouse.xy==vec2(0) ? -.2 :\n    \t(iMouse.y / iResolution.y * .5 - 0.25) * PI;\n    float y = iMouse.xy==vec2(0) ? .0 :\n    \t-(iMouse.x / iResolution.x * 1.0 - .5) * PI;\n    float z = 0.0;\n\n    ro.zy *= r2(x);\n    ro.zx *= r2(y);\n    \n    return ro;\n}\n\n//----------------------------------------------------\n\n\nvec3 getSphereColor(int i)\n{\n    \n    float m;\n        \n\tif(i==0 )\n    {\n    \n        \n        return vec3(0.0);\n    }\n    \n    if(i== 1 )\n    {\n        \n        return vec3(1, 0.5, 0);\n        } \n    if(i== 2 )\n    {\n        return vec3(1.0, 1.0, 1.0);\n        } \n    if(i== 3 )\n    {\n        return vec3(247./255., 168./255.,  184./255.); \n       } \n    if(i== 4 )\n    {\n        \n        return vec3(0, 1, 1);\n        } \n    if(i== 5 )\n    {\n        return vec3(85./255., 205./255., 252./255.);\n        } \n    if(i== 6 )\n    {\n        \n        return  vec3(0.5, 0.8, 0.9);\n        } \n        \n    if(i== 7 )\n    {\n        return vec3(1.0, 1.0, 1.0);\n       } \n    if(i== 8 )\n    {\n       \n        \n        return vec3(0.425, 0.56, 0.9); \n       } \n    if(i== 9 )\n    {\n        \n        return vec3(0.5, 0.6, 0.6); \n     } \n    if(i== 10 )\n    {\n        return vec3(0.0, 1.0, 0.0);\n    } \n    \n    if(i== 11 )\n    {\n        return vec3(0.25, 0.25, 0.25);\n    } \n    \n     if(i== 15 )\n    {\n    \t\treturn vec3(1.0,0.0,1.);\n       } \n     if(i== 16 )\n    {\n    \t\treturn vec3(1.0,1.0,0.0);\n     } \n    \n    \n}\n\n///--------------------------------------------\n\n\n// phong shading\nvec3 p_shading( vec3 v, vec3 n, vec3 eye, vec3 pcol ) {\n\t// ...add lights here...\n\t\n\tfloat shininess = 16.0;\n\t\n\tvec3 final = vec3( 0.0 );\n\t\n\tvec3 ev = normalize( v - eye );\n\tvec3 ref_ev = reflect( ev, n );\n\t\n\t// light 0\n\t{\n\t\tvec3 light_pos   = vec3( 20.0, 20.0, 20.0 );\n\t\tvec3 light_color = vec3( 1.0, 0.7, 0.7 );\n\t\n\t\tvec3 vl = normalize( light_pos - v );\n\t\n\t\tfloat diffuse  = max( 0.0, dot( vl, n ) );\n\t\tfloat specular = max( 0.0, dot( vl, ref_ev ) );\n\t\tspecular = pow( specular, shininess );\n\t\t\n\t\tfinal += light_color * ( diffuse + specular ); \n\t}\n\t\n\t// light 1\n\t{\n\t\tvec3 light_pos   = vec3( -20.0, -20.0, -20.0 );\n\t\tvec3 light_color = vec3( 0.3, 0.2, 1.0 );\n\t\n\t\tvec3 vl = normalize( light_pos - v );\n\t\n\t\tfloat diffuse  = max( 0.0, dot( vl, n ) );\n\t\tfloat specular = max( 0.0, dot( vl, ref_ev ) );\n\t\tspecular = pow( specular, shininess );\n\t\t\n\t\tfinal += light_color * ( diffuse + specular ); \n\t}\n\n\t//return final*pcol*0.5;\n    return (final*pcol)/1.5;\n}\n\n///---------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n   \n    \n    vec3 ro = vec3(0.0,10.0+5.*cos(iTime),-20.0);\n    //ro = get_mouse(ro);\n    vec3 rd = normalize( vec3(uv,1.0));\n    \n    \n    vec3 col = vec3(0);\n    \n    TObj Obj;\n    \n    mObj.uv=uv;\n    mObj.rd=rd;\n    mObj.ro=ro;\n\n\t  vec3 rLuz=vec3(0.5, 3.5, 4.5);\n    \n    float d = RayMarch(ro, rd);\n    Obj=mObj;\n    \n  \n    vec3 p = (ro + rd * d ); \n    glpRoRd=p;\n    mObj.p=p;\n   \n    float dif = GetLightPar(p,vec3(-5.0,15.0,-10.0));\n    \n    \n    mObj.dist =d;\n    vec3 colobj;\n    colobj=getSphereColor(int( Obj.tipo));\n    \n    \n    \n \n    vec3 nor= GetNormal( p);\n    \n \n   \n    vec3 col2 =  p_shading( p, nor, ro ,colobj);\n    \n    //col= col2;\n    col= col2*dif*1.25;\n    \n    col = pow(col, vec3(1.0/2.2));  \n    \n    fragColor = vec4(col,1.0);\n\n}","name":"Image","description":"","type":"image"}]}