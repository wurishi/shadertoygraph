{"ver":"0.1","info":{"id":"ltyyD1","date":"1535996161","viewed":1894,"name":"temporal 2d global illumination","username":"Good","description":"Now it runs much faster and has motion blur )\n\nfork from https://www.shadertoy.com/view/lldcDf","likes":31,"published":1,"flags":32,"usePreview":0,"tags":["2d","sdf","gi","motionblur","temporal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    \n   vec2 uv = fragCoord.xy / iResolution.xy;\n   fragColor = texture(iChannel0, uv);   \n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define SAMPLES 30.0\n#define TIMESPAN 20.0\n\nvoid scene(in vec2 pos, out vec3 color, out float dist) {\n    dist = 100.0; color = vec3(0,0,0);\n    AddObj(dist, color, boxSDF(pos - vec2(-3,1), vec2(1,1)), vec3(1.+sin(iTime)));\n    AddObj(dist, color, sphereSDF(pos - vec2(3,1), 1.+sin(iTime/5.)/2.), vec3(2,2,1));\n    AddObj(dist, color, sphereSDF(pos - vec2(3.3*sin(iTime*2.5),-2.0+sin(iTime*5.0)), 0.5), vec3(0,.2,.2));\n    AddObj(dist, color, boxSDF(pos - vec2(0,2), vec2(1.5,0.25)), vec3(.5,.1,.1));\n}\n\nvoid trace(vec2 p, vec2 dir, out vec3 c) {\n    \n    float d;\n    for (;;) {\n        scene(p, c, d);\n        if (d < 0.01) return;\n        if (d > 9.0) break;\n        p += dir * d;\n    }\n    c = vec3(0,0,0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    \n   vec2 uv = fragCoord.xy / iResolution.xy;\n   vec3 prevCol = texture(iChannel0, uv).rgb;\n    \n   uv = fragCoord-iResolution.xy/2.f;\n   uv /= iResolution.y/10.f;\n    \n    vec3 col = vec3(0,0,0);\n    for (float i = 0.0; i < SAMPLES; i++) {\n        float t;\n        vec3 c;                \n        t = (i + random(uv+i+fract(iTime))) / SAMPLES * 2. * 3.1415;\n        trace(uv, vec2(cos(t), sin(t)), c);\n        col += c;\n        \n    }\n    col /= SAMPLES;   \n    float st = 1.0/TIMESPAN;\n    col = prevCol*(1.0-st)+col*st;\n    \n    fragColor = vec4(col,1.0);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"float sphereSDF(vec2 p, float size) {\n\treturn length(p) - size;\n}\n\nfloat boxSDF(vec2 p, vec2 size) {\n\tvec2 r = abs(p) - size;\n    return min(max(r.x, r.y),0.) + length(max(r,vec2(0,0)));\n}\n\n\nvoid AddObj(inout float dist, inout vec3 color, float d, vec3 c) {\n    if (dist > d) {dist = d; color = c; }\n}\n\nfloat random (in vec2 _st) {\n    return fract(sin(dot(_st.xy,\n        vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n","name":"Common","description":"","type":"common"}]}