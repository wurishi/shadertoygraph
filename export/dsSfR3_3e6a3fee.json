{"ver":"0.1","info":{"id":"dsSfR3","date":"1689958790","viewed":42,"name":"SDF -  Round Inset","username":"JohnKaz","description":"Based on https://www.shadertoy.com/view/3ltSW2 by iq\n\nRound inset, distances are pretty accurate.\nAgain based on Mercury's SDF functions https://mercury.sexy/hg_sdf/\n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","distancefield","sdf","distance","union"],"hasliked":0,"parentid":"dsSBR3","parentname":"SDF - Chamfer Inset"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright © 2023 João Desager\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// chamfered inset\n\n// SDF primitives taken from:\n// and iquilezles.org/articles/distfunctions2d\n\n\nfloat sdCircle( in vec2 p, in float r ) \n{\n    return length(p)-r;\n}\n\nfloat sdCircle2( in vec2 p, in vec2 o, in float r ) \n{\n    return length(p-o)-r;\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n// based on https://mercury.sexy/hg_sdf/\nfloat sdRoundInsetCorner(in vec2 p, in float r, in float depth)\n{\n    float a = p.x;\n    float b = p.y;\n    \n\tvec2 u = max(vec2(r + a,r - b), vec2(0));\n\tfloat subR = min(-r, max (a, -b)) + length(u);\n    \n    return min(a+depth, subR);\n}\n\n// based on https://mercury.sexy/hg_sdf/\nfloat opInsetRound(in float a, in float b, in float r, in float depth)\n{\n\tvec2 u = max(vec2(r + a,r - b), vec2(0));\n\tfloat subR = min(-r, max (a, -b)) + length(u);\n    \n    return min(a+depth, subR);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    \n    vec2 pos = p;\n    pos.y -= 0.5;\n    pos.x -= 0.7;\n    float d1 = sdBox( pos, vec2(0.5, 0.4) );\n    \n    float r_offset = (0.5+0.5*sin(iTime))*0.5;\n    \n    float d = opInsetRound( sdBox( p, vec2(1.0, 0.5) ), d1, r_offset/2.0, r_offset);\n    \n    //uncomment to visualize the corner SDF\n    //d = sdRoundInsetCorner(p, 0.2, 0.3);\n    \n\t// coloring, iq style\n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n    col *= 1.0 - exp(-6.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(150.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(d)) );\n\n    if( iMouse.z>0.001 )\n    {\n    pos = m;\n    pos.y -= 0.5;\n    pos.x -= 0.7;\n\tfloat d1 = sdBox( pos, vec2(0.5, 0.4) );\n    d = opInsetRound(sdBox( m, vec2(1.0, 0.5) ), d1, r_offset/2.0, r_offset);\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}