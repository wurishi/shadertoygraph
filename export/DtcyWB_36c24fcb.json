{"ver":"0.1","info":{"id":"DtcyWB","date":"1710379670","viewed":102,"name":"Minkowski Rounded Box Collision","username":"PureAsbestos","description":"Detects whether two rounded AABBs are colliding by checking if the rounded box which represents their Minkowski difference contains the origin. More general than colliding squares and circles. Easily extends to 3D rounded boxes, spheres, capsules, etc.","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["collision","sdf","circle","rectangle","box","aabb","minkowski","rect","rounded"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nstruct Box {\n    vec2 position;\n    vec2 halfSize;\n    float cornerRadius;\n};\n\n\nfloat boxDist(Box b) {\n   vec2 position = abs(b.position) - b.halfSize + b.cornerRadius;\n   return length(max(position, 0.0)) + min(max(position.x, position.y), 0.0) - b.cornerRadius;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/min(iResolution.x,iResolution.y);\n    vec2 mouse = iMouse.xy/min(iResolution.x,iResolution.y);\n\n\n    Box box1 = Box(uv-vec2(0.5,0.5), vec2(0.1, 0.2), 0.02);\n    Box box2 = Box(uv-mouse, vec2(0.08, 0.08), 0.08);\n\n    float box1dist = boxDist(box1);\n    float box2dist = boxDist(box2);\n    \n    Box collisionBox = Box(box1.position-box2.position, box1.halfSize+box2.halfSize, box1.cornerRadius+box2.cornerRadius);\n\n    float collisionDist = boxDist(collisionBox);\n\n    vec3 color = min(box1dist, box2dist) <= 0.0? vec3(1): vec3(0);\n    \n    if (collisionDist <= 0.0) {\n        color.gb = vec2(0);\n    }\n    \n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}