{"ver":"0.1","info":{"id":"Nd3Xz4","date":"1632708289","viewed":90,"name":"Let The Questions Begin!","username":"Geotale","description":"From PMD\nCode might seem weird, that's because it was written in Scratch first\nUsed Desmos to get all data, from background colors (or, specifically, how to lerp between them), to getting the long functions for the sine wave patterns\nStill unfinished...","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["pokemon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NATIVEFPS 30.0\n#define NATIVEWIDTH 256.0\n#define NATIVEHEIGHT 192.0\n\n\n#define TYPE 1\n// Types:\n// 0: Rescue Team\n// 1: Explorers\n\n// More attention to detail was put into Explorers', so\n// Rescue Team's background may be inaccurate\n// Even still, I tried to put in as much detail as\n// I could without going replotting and graphing the\n// entire background again.\n\n\n// I'd like to see this on mobile as well\n// It just so happens that Safari doesn't support WebGL2\n// Is anyone suprised, though?\n// If you want better code, uncomment this below line\n//#define WEBGL2\n\nvec3 col = vec3(0.0);\nvec2 uv = vec2(0.0);\n\n#ifdef WEBGL2\n    const vec3 bgCols[] = vec3[](vec3(81, 149, 249) / 255.0, vec3(249, 159, 253) / 255.0, vec3(233, 0, 0) / 255.0, vec3(253, 255, 81) / 255.0, vec3(20, 255, 9) / 255.0, vec3(22, 255, 253) / 255.0, vec3(81, 149, 249) / 255.0);\n    const int bgTimes[] = int[](0, 38, 77, 149, 183, 221, 253);\n#endif\n\nvoid update(float top, float bottom, float adj){\n#if TYPE == 0\n    if(uv.x < top && uv.x > bottom)\n        col = mix(col, vec3(1.0), 1.0 - adj);\n#else\n    if(uv.y < top && uv.y > bottom)\n        col = mix(col, vec3(1.0), 1.0 - adj);\n#endif\n}\n\nvoid renderLine(float bgTop, float bgBottom){\n    update(bgTop, bgBottom, 0.92);\n#if TYPE == 0\n    update(bgTop - 6.0 / NATIVEHEIGHT, bgBottom + 6.0 / NATIVEHEIGHT, 0.91);\n    update(bgTop - 13.0 / NATIVEHEIGHT, bgBottom + 13.0 / NATIVEHEIGHT, 0.93);\n    update(bgTop - 18.0 / NATIVEHEIGHT, bgBottom + 18.0 / NATIVEHEIGHT, 0.91);\n    update(bgTop - 33.0 / NATIVEHEIGHT, bgBottom + 33.0 / NATIVEHEIGHT, 0.90);\n    update(bgTop - 45.0 / NATIVEHEIGHT, bgBottom + 45.0 / NATIVEHEIGHT, 0.90);\n#else\n    update(bgTop - 6.0 / NATIVEWIDTH, bgBottom + 6.0 / NATIVEWIDTH, 0.91);\n    update(bgTop - 13.0 / NATIVEWIDTH, bgBottom + 13.0 / NATIVEWIDTH, 0.93);\n    update(bgTop - 18.0 / NATIVEWIDTH, bgBottom + 18.0 / NATIVEWIDTH, 0.91);\n    update(bgTop - 33.0 / NATIVEWIDTH, bgBottom + 33.0 / NATIVEWIDTH, 0.90);\n    update(bgTop - 45.0 / NATIVEWIDTH, bgBottom + 45.0 / NATIVEWIDTH, 0.90);\n#endif\n}\n\nvoid drawBGBack(float time){\n#if TYPE == 0\n    float x = uv.y / 1.3 - (1.0 / NATIVEHEIGHT) * (time * NATIVEFPS);\n#else\n    float x = uv.x - (1.0 / NATIVEWIDTH) * (time * NATIVEFPS);\n#endif\n\n    float bgTop = (-0.0426433 + 0.0394222 * sin(radians(1902.35 * (x + -27.6116)))) * (2.28179 + 0.0862196 * sin(radians(809.264 * (x + -0.757424)))) + (-0.00474197 + -0.00264045 * sin(radians(1416.44 * (x + 1477.3)))) * (9.38588 + 5.07275 * sin(radians(493.459 * (x + 0.0721132))));\n\n#if TYPE == 0\n    bgTop = 0.9 * (bgTop + 0.5) + 0.5;\n    float bgBottom = bgTop - 0.68;\n#else\n    bgTop++;\n    float bgBottom = bgTop - 0.7093;\n#endif\n\n    renderLine(bgTop, bgBottom);\n}\n\nvoid drawBGFront(float time){\n#if TYPE == 0\n    float x = uv.y / 1.3 + (1.0 / NATIVEHEIGHT) * (time * NATIVEFPS);\n#else\n    float x = uv.x + (1.0 / NATIVEWIDTH) * (time * NATIVEFPS);\n#endif\n\n    float bgTop = (-0.110044 + -0.0397038 * sin(radians(1901.41 * (x + -27.6445)))) * (2.2744 + 0.0124096 * sin(radians(659.047 * (x + -0.289466)))) + (0.00243566 + 0.00133353 * sin(radians(1405.64 * (x + 1488.2)))) * (13.9209 + 7.81294 * sin(radians(458.99 * (x + -0.00861981))));\n\n#if TYPE == 0\n    bgTop = 0.9 * (bgTop + 0.5) + 0.5;\n    float bgBottom = bgTop - 0.531975;\n#else\n    bgTop++;\n    float bgBottom = bgTop - 0.7093;\n#endif\n\n    renderLine(bgTop, bgBottom);\n}\n\nvoid initBG(float time){\n    float bgTime = mod(NATIVEFPS * time, 253.0);\n\n#ifdef WEBGL2\n    int bgTimeInt = int(bgTime);\n    int bgItem = 0;\n\n    while(bgTimes[bgItem] <= bgTimeInt)\n        bgItem++;\n    bgItem--;\n    \n    float bgLerp = (bgTime - float(bgTimes[bgItem])) / (float(bgTimes[bgItem + 1] - bgTimes[bgItem]));\n    col = mix(bgCols[bgItem], bgCols[bgItem + 1], bgLerp);\n#else\n    vec3 bgCol = vec3(81, 149, 249) / 255.0;\n    vec3 nextCol = vec3(249, 159, 253) / 255.0;\n\n    float closeTime = 0.0;\n    float nextTime = 38.0;\n\n    if(bgTime > 38.0){\n        bgCol = nextCol;\n        closeTime = nextTime;\n        nextTime = 77.0;\n        nextCol = vec3(233, 0, 0) / 255.0;\n        if(bgTime > 77.0){\n            bgCol = nextCol;\n            closeTime = nextTime;\n            nextTime = 149.0;\n            nextCol = vec3(253, 255, 81) / 255.0;\n            if(bgTime > 149.0){\n                bgCol = nextCol;\n                closeTime = nextTime;\n                nextTime = 183.0;\n                nextCol = vec3(20, 255, 9) / 255.0;\n                if(bgTime > 183.0){\n                    bgCol = nextCol;\n                    closeTime = nextTime;\n                    nextTime = 221.0;\n                    nextCol = vec3(22, 255, 253) / 255.0;\n                    if(bgTime > 221.0){\n                        bgCol = nextCol;\n                        closeTime = nextTime;\n                        nextTime = 253.0;\n                        nextCol = vec3(81, 149, 249) / 255.0;\n                    }\n                }\n            }\n        }\n    }\n\n    float bgLerp = (bgTime - closeTime) / (nextTime - closeTime);\n    col = mix(bgCol, nextCol, bgLerp);\n#endif\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    uv = fragCoord / iResolution.xy;\n\n#if TYPE == 0\n    initBG(iTime + 6.1);\n    drawBGBack(iTime + 6.1);\n    drawBGFront(iTime + 6.1);\n#else\n    initBG(iTime + 2.5);\n    drawBGBack(iTime + 2.5);\n    drawBGFront(iTime + 2.5);\n#endif\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}