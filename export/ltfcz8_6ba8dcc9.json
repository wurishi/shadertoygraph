{"ver":"0.1","info":{"id":"ltfcz8","date":"1503360986","viewed":374,"name":"MR-MRF Texture Synthesis","username":"rory618","description":"Generate a texture starting from a low resolution and increasing, in order to generate structure at all scales.","likes":11,"published":1,"flags":32,"usePreview":0,"tags":["2d","random","field","multi","resolution","markov","mrf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 o, in vec2 i )\n{\n\to = texelFetch(iChannel0,ivec2(i),0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int size = 2;\n\nvec4 hash44(vec4 p4){\n    p4 = fract(sin(p4)  * vec4(443.897, 441.423, 437.195, 444.129)/8.);\n    p4 += dot(p4, p4.wzxy+19.19);    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\nfloat error(float w, vec2 i, vec2 uvp){\n    float e = 0.;\n    for(int dx = -size; dx <= size; dx++){\n        for(int dy = -size; dy <= size; dy++){\n            vec2 d = vec2(dx,dy);\n            \n            vec4 a = texelFetch(iChannel1,ivec2(i+d),0);\n            vec4 ap = texelFetch(iChannel1,ivec2(i+d)/2,0);\n            \n            vec4 b = texelFetch(iChannel1,ivec2(mod(uvp*w+d,w)+vec2(0,w)),0);\n            e += length(a-b);\n            if(w>8.)\n            e += length(ap-b);\n        }\n    }\n    return e/float(size*size);\n}\n\nvoid mainImage( out vec4 o, in vec2 i )\n{\n    \n    float level = floor(log(max(i.x,i.y))/log(2.));\n    if(level >= floor(log(iResolution.y)/log(2.)) ) return;\n    //if(level <= 1.) return;\n    float w = pow(2.,level);\n    vec2 uv = fract(i/w);\n    if(i.x<w){\n        o = texture(iChannel0,uv);\n    } else if(i.y<w) {\n        if(iFrame==0){\n            o = hash44(vec4(uv,iTime,level));\n        } else {\n            o = texelFetch(iChannel1,ivec2(i),0);\n            \n            vec2 tuv = texelFetch(iChannel1,ivec2(i+vec2(0,w)),0).xy;\n            o = mix(o,texelFetch(iChannel1,ivec2(tuv*w+vec2(0,w)),0),.025);\n            \n            \n        }\n    } else {\n        if(iFrame==0){\n            o = hash44(vec4(level,uv,iTime));\n            o.z = error(w,i-vec2(0,w),o.xy);\n        } else {\n            \n            o = texelFetch(iChannel1,ivec2(i),0);\n            o.z = error(w,i-vec2(0,w),o.xy);\n            \n            vec2 uvp = hash44(vec4(iTime,level,uv)).zw;\n            float ep = error(w,i-vec2(0,w),uvp);\n            if(ep<o.z){o.xy = uvp;o.z = ep;}\n            \n            if(level>4.){\n            \n            vec4 u = texelFetch(iChannel1,ivec2(i+vec2(0,1)),0);\n            vec4 d = texelFetch(iChannel1,ivec2(i+vec2(0,-1)),0);\n            vec4 l = texelFetch(iChannel1,ivec2(i+vec2(-1,0)),0);\n            vec4 r = texelFetch(iChannel1,ivec2(i+vec2(1,0)),0);\n            \n            uvp = fract(u.xy-vec2(0,1)/w);\n            ep = 1.1*error(w,i-vec2(0,w),uvp);\n            if(ep<o.z){o.xy = uvp;o.z = ep;}\n            \n            uvp = fract(d.xy-vec2(0,-1)/w);\n            ep = 1.1*error(w,i-vec2(0,w),uvp);\n            if(ep<o.z){o.xy = uvp;o.z = ep;}\n            \n            uvp = fract(l.xy-vec2(-1,0)/w);\n            ep = 1.1*error(w,i-vec2(0,w),uvp);\n            if(ep<o.z){o.xy = uvp;o.z = ep;}\n            \n            uvp = fract(r.xy-vec2(1,0)/w);\n            ep = 1.1*error(w,i-vec2(0,w),uvp);\n            if(ep<o.z){o.xy = uvp;o.z = ep;}\n                \n            }\n            \n            \n        }\n    }\n}","name":"Buf A","description":"","type":"buffer"}]}