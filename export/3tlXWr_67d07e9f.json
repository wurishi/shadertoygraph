{"ver":"0.1","info":{"id":"3tlXWr","date":"1562589489","viewed":373,"name":"Linear Smoothstep Cubic","username":"johannski","description":"Quick test for interpolation types\nFrom top to bottom:\n1. Linear\n2. Smoothstep\n3. SmoothstepÂ²\n4. Cubic InOut","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["smoothstep","cubic","tween"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float cubicInOut(float k) {\n    if ((k *= 2.0) < 1.0) {\n        return 0.5 * k * k * k;\n    }\n\n    return 0.5 * ((k -= 2.0) * k * k + 2.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float r = 0.5;\n    if(uv.y > 0.75) {\n        r = uv.x;\n    } else if(uv.y > 0.5) {\n        r = smoothstep(0.0, 1.0, uv.x);\n    } else if(uv.y > 0.25) {\n        r = smoothstep(0.0, 1.0, smoothstep(0.0, 1.0, uv.x));\n    } else {\n        r = cubicInOut(uv.x);\n    }\n    vec3 col = vec3(r);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}