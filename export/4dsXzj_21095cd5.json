{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"//Procedural Ordering by nimitz (twitter: @stormoid)\n\n/*\t\n\tDemonstration of a simple way to have multiple objects ordered\n\tby an arbitrary function, in this case depth. The nice thing about\n\tthis algorithm is that the \"sorting\" is completely parametric\n\tso the complexity doesn't increase with the number of objects at all.\n\n\tThere might be some way to make the algorithm more general?\n*/\n\n\n//Number of objects to order\n#define NUM_OBJ 11.\n\n//If defined, the darkest layer is the one on top\n//and so on, with the bottom being lightest.\n//#define COLOR_BY_LAYER\n\n//Fixed alpha value (otherwise modulated by time)\n//#define ALPHA 0.5\n\n\n\n#define time iTime\nmat2 mm2(in float theta){float c = cos(theta);float s = sin(theta);return mat2(c,-s,s,c);}\n\n//the function which defines the ordering\nfloat f (const in float x)\n{\n\treturn mod(time-x,NUM_OBJ);\n}\n\nvec4 star(in vec2 p, const in float x, const in float num)\n{\n\tp.x+=sin(num*1.)*.25+sin(time*0.4+num*3.)*0.3;\n\tp.y+=sin(num*2.)*0.1+cos(time*0.5)*0.09;\n\tp = p/exp(x*.4-3.);\n\t\n\tp *= mm2(time*0.6+num*2.);\n\t\n\t//I knew i would find a use for my pentagon function at some point :)\n\t//two subtracted inverted pentagons -> 5 pointed star\n\tvec2 q = abs(p);\n\tfloat pen1 = max(max(q.x*1.176-p.y*0.385, q.x*0.727+p.y), -p.y*1.237);\n\tfloat pen2 = max(max(q.x*1.176+p.y*0.385, q.x*0.727-p.y), p.y*1.237)*0.619;\n\tfloat a = (pen1-pen2)*4.;\n\t\n\t//animation of the \"send to back\"\n\tfloat mx = clamp(0.1+1./x*0.05,0.,10.);\n\ta = 1.-smoothstep(0.1,mx,a);\n\t\n\tvec3 col = a*(sin((vec3(.19,5.,2.)*(num+1.04)*8.01))*0.5+0.6);\n\treturn vec4(col,a);\n}\t\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//setup coordinates\n\tvec2 p = fragCoord.xy / iResolution.xy-0.5;\n\tp.x *= iResolution.x/iResolution.y;\n\tvec3 col = vec3(1);\n\tfloat r = length(p);\n\t\n\tfor(float i = 0.;i<NUM_OBJ;i++)\n\t{\n\t\t//sart by getting an integer value for the current item placement\n\t\tfloat num = floor(f(i));\n\t\t\n\t\t//call the ordering function again to process based on newly defined order\n\t\tfloat x = f(num);\n\t\t\n\t\t//draw stuff\n\t\tvec4 nw = star(p,x,num);\n\t\t\n\t\t//blend\n\t\t#ifdef COLOR_BY_LAYER\n\t\tcol = col*(1.-smoothstep(0.,1.,nw.a))+vec3(0.1,0.2,0.3);\n\t\t#else\n\t\t#ifdef ALPHA\n\t\tcol = mix(col,nw.rgb,nw.a*ALPHA);\n\t\t#else\n\t\tcol = mix(col,nw.rgb,nw.a*(sin(time*0.22)*0.4+0.55));\n\t\t#endif\n\t\t#endif\n\t}\n\t\n\tcol = clamp(col,0.,1.);\n\t//vignetting\n\tcol *= 1.-smoothstep(.4,1.8,r);\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4dsXzj","date":"1404274647","viewed":928,"name":"Procedural Ordering","username":"nimitz","description":"I needed that behavior for a shader and I realized that this isn't as straightforward as I thought it would be, so here's a quickie illustrating the technique.\n\nOrdered by size here. Which allows for ordered transparency among other things.","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d","transparency","sorting","order","ordering"],"hasliked":0,"parentid":"","parentname":""}}