{"ver":"0.1","info":{"id":"X3fXWN","date":"1709496413","viewed":61,"name":"Wa shedau shada...","username":"BetaSoftCologne","description":"-> Hell !!!","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["flashcube"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","previewfilepath":"/media/ap/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float TAU = 6.2831;\n\nfloat sampleMusic()\n{\n\treturn 0.5 * (\n\t\t//texture( iChannel0, vec2( 0.01, 0.25 ) ).x + \n\t\t//texture( iChannel0, vec2( 0.07, 0.25 ) ).x + \n\t\ttexture( iChannel0, vec2( 0.15, 0.25 ) ).x + \n\t\ttexture( iChannel0, vec2( 0.30, 0.25 ) ).x);\n}\n\n\n// by iq\nfloat box(in vec3 pos, in float size) {\n    vec3 q = abs(pos) - size;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nmat2 rotMatDeg(float theta) {\n    return mat2(cos(theta), -sin(theta), sin(theta), cos(theta));\n}\n\n\nvec3 bar(in vec2 uv, float vol) {\n    // make polar\n    vec2 st = vec2(atan(uv.x, uv.y), length(uv));\n    \n\tfloat s = sin(iTime);\n    uv = vec2(st.x/TAU + s*vol*0.5, st.y);\n    \n    float f = 10.;\n    float g = .5 + 0.2*sin(iTime*0.1*vol);\n    \n    // zig-zag\n    float x = uv.x*f;\n    float a = min(fract(x), 1.-fract(x));\n    float b = smoothstep(0.75, 0.1, a*0.7 + g-uv.y);\n    return vec3(b/vol, b+a*vol, vol*b-a);\n}\n\nvec4 renderScene(in vec3 pos, in vec2 pix) {\n#if 1\n    // repeat domain\n    float rx = 0.8;\n    float ry = 0.8;\n    float rz = 10.5;\n   pos.x = mod(pos.x + rx, rx * 2.) - rx;\n    pos.y = mod(pos.y + ry, ry * 2.) - ry;\n    //pos.z = mod(pos.z + rz, rz * 2.) - rz;\n#endif\n\n    float second = iDate.w;\n    float f = fract(second);\n    float g = 0.2 * abs(sin(iTime * 5.));\n    \n    // rotating box\n    float a = (mod(iTime, 3.1415926));\n    mat2 rot = rotMatDeg(a);\n    vec2 xz = pos.xz*rot;\n    vec3 bpos = vec3(xz.s, pos.y, xz.t);\n    a = box(bpos, 0.5);\n\n    // \n    float d = min(a,a);\n    float c = abs(a); // * exp(pos.y) - pos.x; \n\n    float m = sampleMusic();\n\n    vec3 e = bar(pos.xy / m, m*2.);\n    return vec4(e, d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalize pixel coordinates (-1 to 1)\n    vec2 uv = (fragCoord.xy-.5*iResolution.xy) / iResolution.y;\n\n    // ray origin is a bit outside of the screen\n    // i.e. at the tip of your nose\n    vec3 origin = vec3(0.,0.,3.);\n\n    // ray direction points towards a point on a plane that is\n    // representative of the current pixel in fragCoord  \n    vec3 direction = normalize(vec3(uv.xy, -1.5));\n\n    // ray-march the scene\n    float max = 38.0;\n    vec3 col = vec3(0.0235, 0.0471, 0.1608);\n    float dist, t = 0.;\n    vec4 result;\n    for (int i=0; i<20; i++) {\n        vec3 ray = origin + t*direction;\n\n        result = renderScene(ray, uv);\n\n        // the distance is in the a-component\n        dist = result.a;\n        if (dist < 0.001) break; // we hit something!\n\n        // advance the current distance   \n        t += dist;\n        // until we went too far\n        if (t>max) break;\n    }\n    \n    if (t<max) {\n        // still in the scene, so we must have hit something. \n        // extract the color of the object that was hit\n        col = result.rgb;\n        \n    } else {\n        col = vec3(1., 1., 0.)* 0.8*bar(uv, 0.5);\n    } \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}