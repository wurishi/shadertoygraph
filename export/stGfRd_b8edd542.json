{"ver":"0.1","info":{"id":"stGfRd","date":"1665124677","viewed":73,"name":"Math Series: Parent Functions","username":"nllorcajr","description":"Summary: A basic study and visualization of math functions used commonly in game development.\nIm new here in shadertoy, for any mistake, or needs improvement, \nyour constructive feedback is highly appreciated!","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["math"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author: Noel Llorca Jr, Technical Artist, Ubisoft PHL\n\n// Summary: A basic study and visualization of math functions used commonly in game development.\n// Im new here in shadertoy, for any mistake, or needs improvement, \n// your constructive feedback is highly appreciated!\n\n// Parameters: Size1, Size2, UV, function, background, linecolor\nvec3 DrawLine(float s1, float s2,vec2 st, float fn, vec3 c1,  vec3 c2)\n{\n  float line = smoothstep( fn - s1, fn, st.y) - smoothstep( fn, fn + s2, st.y);\n  return c1  * (1. - line) + line * c2;\n}\n\nvec3 TimeLine(float s1, float s2,vec2 st, float fn, vec3 c1,  vec3 c2)\n{\n  float line = smoothstep( fn - s1, fn, st.x) - smoothstep( fn, fn + s2, st.x);\n  return c1  * (1. - line) + line * c2;\n}\n\nvec3 AnimDot (float size1, float size2, vec2 uv, float fn, float pos, vec3 c0, vec3 c1)\n{\n    float t = 1. - smoothstep(size1, size2, length(uv - vec2(fn, pos) )); \n    return c0  * (1. - t) + t * c1;\n}\n\n// linear \nfloat linearFn (float b)\n{\n    return b;\n}   \n// quadratic\nfloat quadraticFn (float b)\n{\n    return b * b;\n} \n// cubic\nfloat cubicFn (float b)\n{\n    return b * b * b;\n} \n// absolute value\nfloat absoluteFn (float b)\n{\n    return (abs(b -.5)/.5) ;\n} \n// sqrtRoot\nfloat sqrtRootFn (float b)\n{\n    return sqrt(b);\n} \n// reciprocal\nfloat reciprocalFn (float b)\n{\n    return 1./b; \n} \n// myFunction\nfloat exponentialClampStep (float u, float k)\n{\n    float curve = (u * u  * (u / (k) * -1. + 2.));\n    return clamp((curve), 0., 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Colors\n    vec3 color = vec3(.23);\n    vec3 Color2 = vec3(1.000,0.867,0.584);\n    vec3 Color3 = vec3(1.000,0.459,0.600);\n    vec3 Color4 = vec3(0.976,0.580,0.494);\n    vec3 Color5 = vec3(0.953,0.961,0.816);\n    vec3 Color6 = vec3(1.000,0.000,0.635);\n    vec3 Color7 = vec3(1.000,0.000,0.000);\n    vec3 Color8 = vec3(0.824,0.988,0.678);    \n    vec3 Dot = vec3(0.859,0.859,0.859);\n    vec3 TimeColor = vec3(0.820,0.820,0.820); \n\n    // Time and Speed\n    float tl = min(1.,fract(iTime / 3.5)); //interesting       \n       \n    // TODO: experiment with time speed? \n    //float tl = clamp(0., 1., abs(sin(iTime))); //interesting \n    //float tl = clamp(0., 1., abs(sin( linearFn +iTime))); //interesting    \n     \n    // MATH VISUALIZATION HERE:\n   \n    // linear f(x) = x \n    color = DrawLine(.01, .01, uv, linearFn(uv.x), color, TimeColor); \n    color = DrawLine(.005, .005, uv, linearFn(tl), color, TimeColor);    \n    color = vec3(AnimDot(.01,.01, uv, tl , linearFn(uv.x), color, TimeColor )); //along the curve\n    color = vec3(AnimDot(.02,.02, uv, linearFn( tl) , .1, color, TimeColor )); //time vis in 1D\n    \n    // quadratic f(x) = x*x\n    color = DrawLine(.01, .01, uv, quadraticFn(uv.x), color, Color3);  \n    color = DrawLine(.005, .005, uv, quadraticFn(tl), color, Color3);    \n    color = vec3(AnimDot(.01,.01, uv, tl , quadraticFn(uv.x), color, Dot )); \n    color = vec3(AnimDot(.02,.02, uv, quadraticFn(tl) , .12, color, Color3 )); \n    \n    // cubic f(x) = x*x*x  \n    color = DrawLine(.01, .01, uv, cubicFn(uv.x), color, Color4); \n    color = DrawLine(.005, .005, uv, cubicFn(tl), color, Color4);  \n    color = vec3(AnimDot(.01,.01, uv, tl , cubicFn(uv.x), color, Dot )); \n    color = vec3(AnimDot(.02,.02, uv, cubicFn(tl) , .13, color, Color4 )); \n    \n    // TO FIX!\n    // absolute f(x) = |x|   \n    //color = DrawLine(.01, .01, uv, absoluteFn(uv.x), color, Color5); \n    //color = DrawLine(.005, .005, uv, absoluteFn(tl), color, Color5); \n    //color = vec3(AnimDot(.02,.02, uv, tl , absoluteFn(tl), color, Dot )); \n    //color = vec3(AnimDot(.02,.02, uv, absoluteFn(tl) , .14, color, Color5 )); \n    \n    // square root f(x) = sqrt(x)     \n    color = DrawLine(.01, .01, uv, sqrtRootFn(uv.x), color, Color6); \n    color = DrawLine(.005, .005, uv, sqrtRootFn(tl), color, Color6);   \n    color = vec3(AnimDot(.01,.01, uv, tl , sqrtRootFn(uv.x), color, Dot )); \n    color = vec3(AnimDot(.02,.02, uv, sqrtRootFn(tl) , .15, color, Color6 )); \n   \n    // reciprocal f(x) = 1/x     \n    color = DrawLine(.01, .01, uv, reciprocalFn(uv.x), color, Color7);\n    color = DrawLine(.005, .005, uv, reciprocalFn(tl), color, Color7);\n    color = vec3(AnimDot(.01,.01, uv, tl , reciprocalFn(uv.x), color, Dot )); \n    color = vec3(AnimDot(.02,.02, uv, reciprocalFn(tl) , .16, color, Color7 )); \n    \n    // expClampStepFn Dot     \n    color = DrawLine(.01, .01, uv, exponentialClampStep(uv.x, 1.), color, Color8);  \n    color = DrawLine(.005, .005, uv, exponentialClampStep(tl, 1.), color, Color8);  \n    color = vec3(AnimDot(.01,.01, uv, tl , exponentialClampStep(uv.x, 1.), color, Dot )); \n    color = vec3(AnimDot(.02,.02, uv, exponentialClampStep(tl, 1.) , .17, color, Color8 )); \n    \n    //Vertical Line (Time Color)\n    color = TimeLine(.002, .002, uv, linearFn(tl), color, TimeColor);  \n    \n    // Finally render!\n    fragColor  = vec4(color, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}