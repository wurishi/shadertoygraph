{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"float planet (vec3 p) {\n \treturn length(p + vec3(16.0, 4.0, -33.0)) - 32.0;   \n}\n\nmat2 rotate (float angle) {\n \treturn mat2(cos(angle), -sin(angle),\n                sin(angle), cos(angle));   \n}\n\nfloat field (vec3 p) {\n    float sph = length(p) - 1.0;\n    float cil = length(vec2(abs(p.y), p.z) - vec2(1.125, -0.45)) - 0.055;\n    float final = sph;\n    if (abs(p.x) < 0.85)\n    \tfinal = min(sph, cil);\n    return min(final, planet(p));\n}\n\nfloat move (float x) {\n    #define STEP(A, X, H) A/(1.0+exp((X-x)*H))\n    x = mod(x, 16.0);\n    float h = 0.0;\n    h += STEP(1.0, 1.0, 24.0);\n    h += STEP(-0.5, 3.0, 24.0);\n    h += STEP(-1.0, 5.0, 24.0);\n    h += STEP(0.5, 8.0, 24.0);\n    h += STEP(-0.75, 12.0, 24.0);\n    h += STEP(1.25, 14.0, 24.0);\n    h += STEP(-0.5, 15.0, 24.0);\n \treturn h;   \n}\n\nvec3 normal (vec3 p) {\n\tvec2 eps = vec2(0.0001, 0.0);\n    return normalize(vec3(\n    \tfield(p+eps.xyy) - field(p-eps.xyy),\n    \tfield(p+eps.yxy) - field(p-eps.yxy),\n    \tfield(p+eps.yyx) - field(p-eps.yyx)\n    ));\n}\n\nvec4 eye (vec2 uv) {\n    vec4 orange = vec4(252.0/255.0, 148.0/255.0, 28.0/255.0, 0.0);\n    vec4 color = vec4(0.0);\n\tuv.x += 0.5 * move(iTime);\n    uv.y += 0.5 * move(iTime*2.0 + 42.0);\n    float bottomLid = -0.5 - 0.5 * move(iTime * 1.0 + 128.0);\n    float topLid = 0.25 - 0.75 * move(iTime * 2.0 + 128.0);\n    if (uv.y < bottomLid || 1.0 - uv.y < topLid) {\n        if (uv.y < bottomLid - 0.1 || 1.0 - uv.y < topLid - 0.1)\n\t        color = vec4(vec3(0.7), 1.0);\n        //else color = vec4(1.0);\n    } else {\n        if (abs(length(uv) - 0.65) < 0.2 && mod(atan(uv.x, uv.y)/(2.0*3.141592) + iTime * 0.025, 0.05) < 0.02)\n            color = orange;\n        float glow = clamp(cos(3.141592*(length(uv)-0.65)/0.70*0.5), 0.0, 1.0);\n        color += orange * pow(glow, 2.0) * (0.1 + sin(iTime * 32.0) * 0.05);\n        color += orange * pow(glow, 8.0) * 0.5;\n    }\n    \n            color = mix(vec4(1.0), color, smoothstep(0.0, 0.05, abs(uv.y+topLid-1.05)-0.05));\n            color = mix(vec4(1.0), color, smoothstep(0.0, 0.05, abs(1.0 - uv.y+bottomLid-1.05)-0.05));\n\n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv = uv * 2.0 - 1.0;\n    float aspect = iResolution.x / iResolution.y;\n    uv.x *= aspect;\n    vec3 ro = vec3(uv, -1.0);\n    vec3 rd = normalize(vec3(uv, 1.0));\n    vec3 color = vec3(1.0);vec3(mix(sqrt(uv.y * 0.5+0.5), 1.0, 0.25));\n    vec2 uv2 = fragCoord.xy / iResolution.xy;\n    float h = 0.0;\n    float last = 9999.0;\n    for (int i = 0; i < 200; ++i) {\n        vec3 p = ro + h * rd;\n        if (p.z < 2.0) {\n            p.xy *= rotate(sin(iTime) * 0.2);\n            p.xz *= rotate(cos(iTime) * 0.1);\n            p.yz *= rotate(sin(iTime) * 0.2);\n            p.x += sin(iTime * 0.5) * 0.5;\n        }\n        vec3 oldP = p;\n        float dist = field(p);\n        h += max(dist, 0.01);\n        if (h < 2.0) {\n            if (dist < 0.05)\n                last = dist;  \n            else {\n                if (last < 0.05) {\n                    color = vec3(0.0);\n                    break;\n                } else last = 9999.0;\n            }\n        }\n        if (h > 16.0) break;\n        if (dist < 0.0) {\n            vec3 n = normal(p);\n            float diffuse = clamp(dot(n, normalize(vec3(1.75, 1.5, -1.75))), 0.1, 1.0);\n            float smDiff = diffuse;\n           // diffuse = mix(0.5, 1.0, diffuse);\n            diffuse = mix(0.5, 1.0, smoothstep(0.3, 0.3125, diffuse));\n            if (p.z > 2.0) {\n                float look = clamp(dot(-normalize(p), n), 0.0, 1.0);\n                color = vec3(0.6, 0.4, 0.7) * pow(look, 1.5);\n                color += pow(1.0 - look, 2.0) * vec3(1.0, 0.6, 1.0) * 0.7;\n                color += pow(1.0 - look, 4.0) * vec3(1.0, 0.6, 1.0) * 0.7;\n                color += pow(1.0 - look, 6.0) * vec3(1.0, 0.6, 1.0) * 0.7;\n            } else if (abs(p.y) < 1.0) {\n                color = vec3(0.9) * diffuse;\n                vec2 off = vec2(0.0);\n                off.x += 0.25 * move(iTime);\n                off.y += 0.25 * move(iTime*2.0+42.0);\n                float topE = (abs(p.y) -0.5)*0.15/0.5+0.1;\n                float rad = length(p.xy + off);\n                if (abs(p.x) < 0.04) color = vec3(0.1) * diffuse;\n                if (abs(abs(p.x) - 0.5) < 0.04) color = vec3(0.5)*diffuse;\n                if (abs(p.y) > 0.5 && abs(p.x) < topE) color = vec3(0.1) * diffuse;\n                vec3 grunge = texture(iChannel0,vec2(0.5, 0.2)*(p.xy*0.5+0.5)).rgb;\n                color *= mix(0.75, 1.0, grunge.r);\n                if (rad < 0.6) color *= clamp((rad-0.5)/0.1, 0.0, 1.0);\n                if (rad < 0.5) color = vec3(1.0) * diffuse*smDiff;\n                //if (rad < 0.325) color = vec3(0.1)*diffuse;\n                //if (rad < 0.275) {\n                    vec4 eyeC = eye((p.xy+off)/0.275);\n                   // color = eyeC.rgb;\n                    if (eyeC.a > 0.5) eyeC.rgb *= diffuse;\n                    color = mix(eyeC.rgb, color, smoothstep(0.0, 0.05, length(p.xy+off)-0.275));\n                //}\n                color = mix(vec3(0.125*diffuse), color, smoothstep(0.0, 0.0075, abs(rad - 0.3) - 0.023));\n\n                \n                color = mix(vec3(0.0), color, smoothstep(0.0, 0.0075, abs(length(p.xy+off)-0.5) - 0.025));\n                \n                //if (diffuse < 0.125) diffuse = 0.5;\n                //else diffuse = 1.0;\n                \n                \n                float back = clamp(dot(n, vec3(-1.0, 0.0, 0.75)), 0.0, 1.0);\n                color += vec3(1.0, 0.5, 1.0) * pow(back, 1.0);\n                color += vec3(1.0, 0.5, 1.0) * pow(back, 3.0);\n               \n            } else color = vec3(0.1)*diffuse;   \n            break;\n        }\n    }\n    color += smoothstep(0.0, 1.0, pow(uv.x*0.5+0.5, 3.0));\n   \tcolor.r = clamp(color.r, 0.0, 1.0);\n    color.g = clamp(color.g, 0.0, 1.0);\n    color.b = clamp(color.b, 0.0, 1.0);\n    uv2 = uv2 * 2.0 - 1.0;\n    color *= smoothstep(1.65, 1.65 - 0.75, length(uv2));\n    fragColor = vec4(sqrt(color), 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Mlj3RR","date":"1426693017","viewed":1327,"name":"[NV15] space core","username":"germangb","description":"\"SPACE SPACE SPACE SPACE SPACE SPACE SPACE\"\n- Space core from Portal 2","likes":20,"published":1,"flags":0,"usePreview":0,"tags":["space","portal","core"],"hasliked":0,"parentid":"","parentname":""}}