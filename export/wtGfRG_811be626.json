{"ver":"0.1","info":{"id":"wtGfRG","date":"1653639098","viewed":49,"name":"Julia's inkblot","username":"AGemstone","description":"Based on Julia set","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//mandelbrot is zn+1 = zn**2 + c\n\nvec2 impow(vec2 num, float power){\n\n    \n    float d = sqrt(num.x * num.x + num.y * num.y);\n    float r = pow(d, power);\n    float nfx = r * cos(power * atan(num.y / num.x));\n    float nfy = r * sin(power * atan(num.y / num.x));\n    vec2 result = vec2(nfx, nfy);\n    \n    return result;\n}\n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int MAX_ITER = 50 ;\n    //int(iTime*1.);\n    // Normalized pixel coordinates (from 0 to 1)\n    float margin = 3.5;\n    vec2 uv= margin*(fragCoord-0.5*iResolution.xy)/iResolution.y;\n    //uv.y += 0.1;\n    //uv.x -= 1.8;\n\n    // Time varying pixel color\n    vec3 col = vec3(0.0);\n    float fx = uv.x*uv.x;\n    float fy = uv.y*uv.y;\n    vec2 z = vec2(fx,fy);\n    for(int i = 1; i <= MAX_ITER;i++){\n    float normal_i = float(i+1)/float(MAX_ITER);\n    vec2 pp = vec2(0.0);\n    pp = impow((z.xy),abs(uv.x) + abs(uv.y));\n        //pp = impow((z.xy),2.0)*uv.x*uv.y;\n        //for (int j = 0; j <= 2; j+=1){\n        //    pp += impow(z, float(j)+sin(iTime*0.1)*sin(iTime*0.1)*float(MAX_ITER));\n        //}\n        pp += vec2(-(1.0-normal_i)*tan(iTime*0.5),\n                    (1.0-normal_i)*tan(-iTime*0.5));\n        float tmp = pp.x*cos(iTime) - pp.y * sin(iTime);\n        pp.x = pp.y*cos(iTime) + pp.x * sin(iTime);\n        pp.y = tmp;\n        //float d = sqrt(pp.x * pp.x + pp.y * pp.y);\n        //col = vec3(d*iResolution.x);\n        float d = abs(pp.x) + abs(pp.y);\n        if(d >= margin/2.){\n            col = vec3(normal_i,\n                       (sin(iTime) * 0.5+0.5) * normal_i,\n                       (cos(iTime) * 0.5+0.5) * normal_i);\n         //   break;\n        }\n        z = pp.xy;\n    }\n        \n    // Output to screen\n    fragColor = vec4(vec3(1.)-normalize(col), 1.0);\n}","name":"Image","description":"","type":"image"}]}