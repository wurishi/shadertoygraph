{"ver":"0.1","info":{"id":"mttcRN","date":"1698964639","viewed":39,"name":"KR - Hidden Complexity 3","username":"kallanreed","description":"Added a smoothstep to my previous shader here: https://www.shadertoy.com/view/csdBWj\nI just love the bloom effect it gives the output.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["cycle","loop","rotation","neon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 pal(float i)\n{\n    vec3 a = vec3(0.953, 0.508, 0.344);\n    vec3 b = vec3(0.669, 0.549, 0.979);\n    vec3 c = vec3(0.106, 0.338, 1.057);\n    vec3 d = vec3(5.044, 5.470, 3.429);\n    \n    return a + b * cos(c * i + d);\n}\n\n\nmat2 makeRotation(float angleInRadians) {\n    float c = cos(angleInRadians);\n    float s = sin(angleInRadians);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdCross(in vec2 p, in vec2 b, float r) \n{\n    p = abs(p);\n    p = (p.y > p.x) ? p.yx : p.xy;\n    vec2  q = p - b;\n    float k = max(q.y, q.x);\n    vec2  w = (k > 0.0) ? q : vec2(b.y - p.x, -k);\n    return sign(k) * length(max(w, 0.0)) + r;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    uv += vec2(cos(iTime * 0.25), -sin(iTime * -0.33)) * 0.5;\n    vec2 uv0 = uv;\n    vec3 final = vec3(0.0);\n      \n    for (float i = 0.0; i < 3.0; i++)\n    {\n        mat2 mr = makeRotation(iTime / 5.0);\n        uv = fract(uv * 1.2 * -(cos(0.23 * iTime) + sin(0.17 * iTime))) - 0.5;\n        vec4 ch0 = texture(iChannel0, -mr * uv0);\n\n        float d = length(uv) / 0.88 + sdCross(mr * uv0, vec2(.8, .2), 0.1 * i);\n        vec3 col = pal(length(uv0) + (i * 0.6) - iTime * 0.73);\n\n        d = cos(d * 8.0 + sin(1.23 * iTime) * 2.0);\n        d = abs(d);\n    \n        d = 0.02 / d;\n        d = smoothstep(0.0, 0.25 + abs(sin(0.4 * iTime) * cos(0.3 * iTime)), d);\n        final += col * d * (ch0.xxx * 3.0);\n    }\n    \n    // Output to screen\n    fragColor = vec4(final, 1.0);\n}","name":"Image","description":"","type":"image"}]}