{"ver":"0.1","info":{"id":"3lyczW","date":"1610542790","viewed":426,"name":"Simple Water Wave Simulation","username":"niels747","description":"Experimenting wit simple staggered pressure and velocity grids. As you can see, I like simple code!\nAdded some surface reflection to give it a real water look.\nMouse changes lighting angle and produces waves. should really be controlled separately","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["wavesimulation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 wave = texture(iChannel1,uv);\n    \n    vec4 image = texture(iChannel3,uv + wave.xy/100.0);\n    \n    vec2 normMouse = iMouse.xy / iResolution.xy;\n    \n    float light = 0.0;\n    \n    vec2 lightAngle = vec2(-0.5+normMouse.x,-0.5+normMouse.y);\n    light += pow(max(length(lightAngle) - length(wave.xy - lightAngle),0.0)/(length(lightAngle)+0.02),4.0); // light reflection\n    \n    fragColor = vec4(image.x + light,image.y + light,image.z + light,1.0); // image with water view\n    //fragColor = vec4(wave.z, 0.0,-wave.z, 1.0); // pressure view\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\nx = horizontal velocity\ny = vertical velocity\nz = pressure\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 center =  fragCoord/iResolution.xy;\n    vec2 right  = (fragCoord + vec2(1,0))/iResolution.xy;\n    vec2 up     = (fragCoord + vec2(0,1))/iResolution.xy;\n    \n    vec4 t = texture(iChannel0,center);\n    \n    // velocity changes proportional to pressure gradient across point\n    t.x += texture(iChannel0,center).z - texture(iChannel0,right).z; \n    t.y += texture(iChannel0,center).z - texture(iChannel0,up).z; \n    \n    \n    // mouse makes waves\n    if(length(iMouse.xy - fragCoord) < 10.1 && iMouse.z > 0.5){\n        t.z += 0.2;\n    }\n\n    // optional sine wave sources\n    if(length(vec2(100,250) - fragCoord) < 5.0){ // top left \n        t.z += sin(iTime*8.0)*0.1;\n    }\n    if(length(vec2(100,150) - fragCoord) < 5.0){ // bottem left \n        t.z += sin(iTime*8.0)*0.1;\n    }\n\n    fragColor = vec4(t.x ,t.y,t.z,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"/*\nx = horizontal velocity\ny = vertical velocity\nz = pressure\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 center =  fragCoord/iResolution.xy;\n    vec2 left   =  (fragCoord + vec2(-1,0))/iResolution.xy;\n    vec2 down   = (fragCoord + vec2(0,-1))/iResolution.xy;\n\nvec4 t = texture(iChannel0,center);\n   \n   // pressure changes proportional to the net inflow - outflow of the cell\n   t.z += (texture(iChannel0,left).x - texture(iChannel0,center).x + texture(iChannel0,down).y - texture(iChannel0,center).y) *0.499; // multiplier has to be < 0.5\n   \n   t.z *= 0.998; // optional dissapation factor\n    \n   fragColor = vec4(t.x, t.y, t.z, 1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}