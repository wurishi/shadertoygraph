{"ver":"0.1","info":{"id":"fsdyDj","date":"1654084711","viewed":49,"name":"Nonuniform Cubic B-Spline","username":"Envy24","description":"BufferA - drawing spline\nBufferB - drawing control points\nBufferC - drawind dashed convex hull\nImage - mixing and coloroing\n\nFour passes used for better readability of code.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["spline","curve","cubic","interpolation","bspline","open"],"hasliked":0,"parentid":"NljBRt","parentname":"Nonuniform B-Spline (DeBoor)"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 O, in vec2 SC )\n{\n    vec4 spline      = TEXF0(SC);\n    vec4 knot        = TEXF1(SC);\n    vec4 convex_hull = TEXF2(SC);\n    \n    float min = MIN3(spline.r, knot.r, convex_hull.r);\n    \n    O = \n        min == 1.0 ?\n            vec4(1) :                            // Background color\n            min == spline.r ?\n                vec4(0, spline.r, spline.r, 1) : // Spline color\n                min == knot.r ?\n                    vec4(0, knot.r, 0, 1) :      // Knot color\n                    vec4(convex_hull);           // Convex hull  color\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define R                           iResolution\n#define TO_CENTERED_NDC(SC)       ( ((SC)+(SC)-R.xy) / R.y )         // in range x=[-AR; AR], y=[-1.0; 1.0]\n#define INITIALLY_FAR               9e30\n#define TEXF0(SC)                 ( texelFetch(iChannel0, ivec2(SC), 0) )\n#define TEXF1(SC)                 ( texelFetch(iChannel1, ivec2(SC), 0) )\n#define TEXF2(SC)                 ( texelFetch(iChannel2, ivec2(SC), 0) )\n#define MIN3(a, b, c)             ( min(min((a), (b)), (c)) )\n#define NMY                       ( iMouse.y / R.y )                 // in range [0.0; 1.0]\n#define LMB_IS_HOLD               ( iMouse.z > 0.0 )\n\n#define RANDOM\n\nconst int order = 4; // Cubic\nconst int num_of_ctrls = max(order, 6);\nconst int num_of_knots = num_of_ctrls + order;\nfloat knots[num_of_knots] = float[num_of_knots](\n    // Constrain: knots[n - 1] <= knots[n] <= knots[n + 1].\n    //0.0, 1.0, 2.0, 3.0, 4.0,   5.0, 6.0, 7.0, 8.0, 9.0  // uniform\n    0.0, 2.1, 2.2, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0      // nonuniform\n    /* Adjusting some knots leads to disconnected spline */\n);\n\n//vec2 ctrls[num_of_ctrls];\n/**/\nvec2 ctrls[num_of_ctrls] = vec2[num_of_ctrls](\n    vec2( -1.1, -0.2),\n    vec2( -1.5, -0.3),\n    //vec2( -1.0, -0.9),\n    vec2(-0.33,  0.9),\n    vec2( 0.33,  0.9),\n    //vec2(  1.0, -0.9),\n    vec2(  1.5, -0.3),\n    vec2(  1.1, -0.2) \n);\n/**/\n\nfloat circleSQSDF(\n    in vec2 S,           // sample coordinates\n    in vec2 C,           // circle center\n    in float r,          // circle radius\n    in float smoothness) // AA parameter\n{\n    // Sample coordinates relative to circle center.\n    float _x = S.x - C.x; float _y = S.y - C.y;\n    \n    // Signed distance of areas (squared distancies).\n    float sds = _x * _x + _y *_y - r * r;\n    \n    float ss = smoothness * smoothness;\n    \n    // Smoothstep interpolation.\n    return smoothstep(-ss, ss, sds);\n    //return smoothstep(-ss, ss, sds * sds); // outline\n}\n\n/* \n    Returns random vec2([-1.0; 1.0], [-1.0; 1.0]).\n*/\nvec2 vector2HashUI32(\n    const uint x,\n    const uint y)\n{\n    // Pick some enthropy source values.\n    // Try different values.\n    const uint entropy0 = 123u;\n    const uint entropy1 = 456u;\n    const uint entropy2 = 789u;\n\n    // Use linear offset method to mix coordinates.\n    uint value0 = y * entropy2 + x;\n    uint value1 = x * entropy2 + y;\n\n    // Calculate hash.\n\tvalue0 += entropy1; value0 *= 445593459u; value0 ^= entropy0;\n    value1 += entropy1; value1 *= 445593459u; value1 ^= entropy0;\n    \n    // 2.0f / 4294967295.0f = 4.6566128730773926e-10\n\n    return \n        vec2(\n            float(value0 * value0 * value0) * 4.6566128730773926e-10f - 1.0f,\n            float(value1 * value1 * value1) * 4.6566128730773926e-10f - 1.0f);\n}\n\nvoid randomize_ctrls(float time)\n{\n    time *= 0.5;\n    float t = fract(time);\n    uint T = uint(time);\n\n    for (int k = 0; k < num_of_ctrls; ++k)\n    {\n        uint x = T + uint(k);\n        uint y = 2u * T + uint(k * 2);\n        vec2 c = vector2HashUI32(x, y);\n        vec2 n = vector2HashUI32(x + 1u, y + 2u);\n    \n        ctrls[k] = c * (1. - t) + n * t;\n    }\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec2 nonuniformCubicBSplineSegment(\n    in vec2[4] ctrls,\n    in float[6] knots,\n    in float u)\n{\n    float D[5] = float[5](\n        knots[1] - knots[0],\n        knots[2] - knots[1],\n        knots[3] - knots[2],\n        knots[4] - knots[3],\n        knots[5] - knots[4]\n    );\n    \n    float t = (u - knots[2]) / D[2];\n    float dd = D[2] * D[2];\n    \n    float aDenom = ((D[0]+D[1]+D[2])*(D[1]+D[2]));\n    float a = aDenom == 0.0 ? 0.0 : dd / aDenom;\n    \n    float bDenom = ((D[1]+D[2]+D[3])*(D[1]+D[2]));\n    float b = bDenom == 0.0 ? 0.0 : dd / bDenom;\n    \n    float cDenom = ((D[1]+D[2]+D[3])*(D[2]+D[3]));\n    float c = cDenom == 0.0 ? 0.0 : dd / cDenom;   \n    \n    float dDenom = ((D[2]+D[3]+D[4])*(D[3]+D[4]));\n    float d = dDenom == 0.0 ? 0.0 : dd / dDenom;   \n    \n    float eDenom = ((D[1]+D[2]+D[3])*(D[1]+D[2]));\n    float e = eDenom == 0.0 ? 0.0 : (D[1] * D[2]) / eDenom;\n    \n    float fDenom = ((D[1]+D[2]+D[3])*(D[1]+D[2]));\n    float f = fDenom == 0.0 ? 0.0 : (D[1] * D[1]) / fDenom;\n    \n    vec4 T =  vec4(t*t*t, t*t, t, 1.);\n    mat4 M = mat4(   -a,      a+b+c, -b-c-d,  d,\n                   3.*a, -3.*a-3.*b,   3.*b,  0.,\n                  -3.*a,  3.*a-3.*e,   3.*e,  0.,\n                      a,     1.-a-f,      f,  0.);\n    \n    T = M * T;\n\n    return ctrls[0]*T.x + ctrls[1]*T.y + ctrls[2]*T.z + ctrls[3]*T.w;\n}\n\nvec2 find_closest_curve_point_to_pixel(\n    in vec2[num_of_ctrls] ctrls,\n    in vec2 NDC)\n{\n    vec2 closestP = vec2(0);\n    float minSqDist = INITIALLY_FAR;\n\n    const int num_of_points = 100;\n    \n\tfloat tMin = knots[order - 1];\n\tfloat tMax = knots[num_of_knots - order];\n\tfloat dt = (tMax - tMin) / float(num_of_points);\n\n    int num_of_segments = num_of_ctrls - 3;\n    for (int s = 0; s < num_of_segments; ++s)\n    {\n        vec2 _ctrls[4] = vec2[4](\n            ctrls[s], ctrls[s + 1], ctrls[s + 2], ctrls[s + 3]\n        );\n        \n        const int o = 1;\n        float _knots[6] = float[6](\n            knots[s + o], knots[s + 1 + o], knots[s + 2 + o],\n            knots[s + 3 + o], knots[s + 4 + o], knots[s + 5 + o]\n        );\n\n        for (float t = _knots[2]; t <= _knots[3]; t += dt)\n        {\n            vec2 P = nonuniformCubicBSplineSegment(_ctrls, _knots, t);\n\n            vec2 diff = P - NDC;\n            float sqDist = dot(diff, diff);\n\n            minSqDist = min(minSqDist, sqDist);\n\n            closestP = \n                minSqDist == sqDist ? \n                    P :\n                    closestP;\n        }\n    }\n    \n    return closestP;\n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    vec2 NDC = TO_CENTERED_NDC(SC);\n\n#ifdef RANDOM\n    randomize_ctrls(iTime);\n#endif\n\n    O = vec4(circleSQSDF(\n        find_closest_curve_point_to_pixel(ctrls, NDC),\n        NDC,\n        0.01,\n        0.011));\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec2 find_closest_control_point_to_pixel(\n    in vec2[num_of_ctrls] ctrls,\n    in vec2 NDC)\n{\n    vec2 closestP = vec2(0);\n    float minSqDist = INITIALLY_FAR;\n\n    for (int k = 0; k < num_of_ctrls; ++k)\n    {\n        vec2 diff = ctrls[k] - NDC;\n        float sqDist = dot(diff, diff);\n       \n        minSqDist = min(minSqDist, sqDist);\n        \n        closestP = \n            minSqDist == sqDist ? \n                ctrls[k] :\n                closestP;\n    }\n    \n    return closestP;\n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    vec2 NDC = TO_CENTERED_NDC(SC);\n\n#ifdef RANDOM\n    randomize_ctrls(iTime);\n#endif\n\n    O = vec4(circleSQSDF(\n        find_closest_control_point_to_pixel(ctrls, NDC),\n        NDC,\n        0.02,\n        0.018));\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"4sXGR8","channel":0}],"code":"vec2 find_closest_convex_hull_point_to_pixel(\n    in vec2[num_of_ctrls] ctrls,\n    in vec2 NDC)\n{\n    vec2 closestP = vec2(0);\n    float minSqDist = INITIALLY_FAR;\n    \n    int num_of_lines = num_of_ctrls - 1; // 2 knots per line\n     \n    for (int l = 0; l < num_of_lines; ++l)\n    {\n        for (float t = 0.; t <= 1.; t += 0.1)\n        {\n            vec2 P = ctrls[l] * (1. - t) + ctrls[l + 1] * t;\n\n            vec2 diff = P - NDC;\n            float sqDist = dot(diff, diff);\n\n            minSqDist = min(minSqDist, sqDist);\n\n            closestP = \n                minSqDist == sqDist ? \n                    P :\n                    closestP;\n        }\n    }\n    \n    return closestP;\n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    vec2 NDC = TO_CENTERED_NDC(SC);\n\n#ifdef RANDOM\n    randomize_ctrls(iTime);\n#endif\n\n    O = vec4(circleSQSDF(\n        find_closest_convex_hull_point_to_pixel(ctrls, NDC),\n        NDC,\n        0.008,\n        0.0088));\n}","name":"Buffer C","description":"","type":"buffer"}]}