{"ver":"0.1","info":{"id":"slVBDy","date":"1665929093","viewed":211,"name":"Foot in a puddle","username":"coposuke","description":"The wave equation.\n\n// Mouse Left : Add wave","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["wave","puddle","footstep"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":2,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//\n// Puddle\n//\n\nvec3 mapNormal(sampler2D iChannel, int iChannelIndex, vec2 uv)\n{\n    float noise = textureLod(iChannel3, uv.yx * 0.1, 0.0).r;\n    noise *= 5.0;\n    \n    vec3 e = vec3(1.0 / iChannelResolution[iChannelIndex].xy, 0.0);\n    return normalize(vec3(\n        texture(iChannel, uv + e.xz).r - texture(iChannel, uv - e.xz).r,\n        texture(iChannel, uv + e.zy).r - texture(iChannel, uv - e.zy).r,\n        -1.0 * (noise + 0.5)\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 pixel = 1.0 / iResolution.xy;\n    vec2 offset = vec2(0.0, 1.0);\n    \n    float mask = texture(iChannel0, uv).z;\n    vec3 normal = normalize(vec3(\n        texture(iChannel0, uv - pixel * offset.yx).x - texture(iChannel0, uv + pixel * offset.yx).x,\n        texture(iChannel0, uv - pixel * offset.xy).x - texture(iChannel0, uv + pixel * offset.xy).x,\n        -5e-2\n    ));\n\n    vec3 rayDir = vec3(0.0, 0.0, 1.0);\n    rayDir = refract(rayDir, normal, 1.0 / 1.333);\n    \n    vec2 mapUV = fragCoord / min(iResolution.x, iResolution.y) * 1.5;\n    vec3 rayPos = rayDir * 1.0 / rayDir.z;\n    rayPos.xy = mapUV + rayPos.xy * 5e-2;\n    \n    // Albedo\n    fragColor = texture(iChannel1, rayPos.xy);\n\n    // Wet\n    fragColor *= clamp(1.0 - mask, 0.45, 0.5);\n    float wetMask = 1.0 - pow(textureLod(iChannel3, uv * 0.2, 0.8).r, 3.0);\n    wetMask = max(wetMask, mask);\n\n    // Environment\n    normal = mix(mapNormal(iChannel1, 1, rayPos.xy), normal, mask);\n    rayDir = vec3(0.0, 0.0, 1.0);\n    rayDir = normalize(vec3((fragCoord * 2.0 - iResolution.xy) / iResolution.y, 5.0));\n    rayDir = reflect(rayDir, normal);\n    vec4 reflectColor = textureLod(iChannel2, rayDir.yzx * vec3(1,-1,1), 3.0);\n    fragColor.rgb += reflectColor.rgb * 0.2 * wetMask;\n\n    // Speculer\n    vec3 lightDir = normalize(vec3(0.2, -0.2, 1.0));\n    float dotVL = dot(rayDir, lightDir);\n    float speculer = pow(clamp(abs(dotVL), 0.0, 1.0), 50.0) * 0.15;\n    speculer = pow(speculer, 1.0 / 2.2);\n    fragColor += vec4(speculer * wetMask);\n    \n    // Debug\n    //fragColor.rgb = normal * 10.0;\n    //fragColor.rgb = vec3(wetMask);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Wave (1st pass, D -> A)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 info = wave(fragCoord, iResolution, iChannel0);\n    info.xz += add(fragCoord, iResolution, iFrame, iMouse);\n    fragColor = vec4(info.xy * info.z, clamp(info.z, 0.0, 1.0), 0.0);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"//\n// Wave Equation\n//\n\nconst float S2 = 0.33;\nconst int CONVSIZE = 1;\nconst float CONVOLUSION3x3_4NH[9] = float[9] // S2 < 0.5\n(\n    0.0, 1.0, 0.0,\n    1.0,-4.0, 1.0,\n    0.0, 1.0, 0.0\n);\nconst float CONVOLUSION3x3_8HN[9] = float[9] // S2 < 0.33\n(\n    1.0, 1.0, 1.0,\n    1.0,-8.0, 1.0,\n    1.0, 1.0, 1.0\n);\nconst float CONVOLUSION5x5[25] = float[25] // S2 < 0.12\n(\n    1.0, 1.0,  1.0, 1.0, 1.0,\n    1.0, 1.0,  1.0, 1.0, 1.0,\n    1.0, 1.0,-24.0, 1.0, 1.0,\n    1.0, 1.0,  1.0, 1.0, 1.0,\n    1.0, 1.0,  1.0, 1.0, 1.0\n);\n\nvec3 wave(in vec2 fragCoord, in vec3 iResolution, in sampler2D iChannel0)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 offset = 1.0 / iResolution.xy;\n\n    float acc = 0.0;\n    for(int x = -CONVSIZE; x <= CONVSIZE; ++x)\n    {\n        for(int y = -CONVSIZE; y <= CONVSIZE; ++y)\n        {\n            float c = texture(iChannel0, uv + offset * vec2(x, y)).x;\n            float cv = CONVOLUSION3x3_8HN[x + CONVSIZE + (y + CONVSIZE) * (2 * CONVSIZE + 1)];\n            acc += c * cv;\n        }\n    }\n    acc *= S2;\n\n    vec4 current = texture(iChannel0, uv);\n    \n    float vel = current.y;\n    vel += acc;\n    vel *= 0.98; // attenuation\n    \n    float height = current.x;\n    height += vel;\n    \n    float mask = smoothstep(0.45, 0.4, distance(uv + sin(uv.x * 15.0) * 0.05, vec2(0.5)));\n    return vec3(height, vel, mask);\n}\n\n//\n//\n// Add Wave\n//\n//\n\nconst float PI = 3.141592;\nconst float TAU = PI * 2.0;\n\nvec2 hash(in vec2 v)\n{\n    return fract(sin(vec2(dot(vec2(12.9898, 78.233), v), dot(vec2(8.233, 12.9898), v))) * 43758.5453);\n}\n\nmat2 rotate(float angle)\n{\n    float s = sin(angle), c = cos(angle);\n    return mat2(c, s, -s, c);\n}\n\nfloat footstep(vec2 uv)\n{\n    uv.x += cos(uv.y * 1.5) * 0.1;\n    uv.x *= 2.5;\n    float dist = length(uv) + sin(uv.y * TAU + 2.0) * 0.1 - 0.5;\n    dist = max(dist, 0.2 - abs(uv.y + 0.2 - uv.x * 0.01) * 2.0);\n    return dist;\n}\n\nfloat tiremark(vec2 uv)\n{\n    uv *= vec2(1.2, 6.0);\n    uv += vec2(0.5, 0.0);\n    \n    vec2 uvLocal = fract(uv) * 2.0 - 1.0;\n    vec2 uvID = floor(uv);\n    \n    uvLocal.y += cos(uv.x * PI * 0.8 + 0.3);\n    \n    float dist = 0.0;\n    dist = max(dist, smoothstep(0.1, 0.0, abs(uvLocal.x)));\n    dist = max(dist, smoothstep(0.1, 0.0, abs(uvLocal.x - 0.5)));\n    dist = max(dist, smoothstep(0.1, 0.0, abs(uvLocal.x + 0.5)));\n    dist = max(dist, smoothstep(0.65, 0.7, abs(uv.x - 0.5)));\n\n    dist = max(dist, smoothstep(0.1, 0.0, abs(fract(uvLocal.y - 0.5) - 0.5) - 0.05) * float(abs(uvLocal.x) < 0.5));\n    dist = max(dist, smoothstep(0.1, 0.0, abs(fract(uvLocal.y - 0.25) - 0.2) - 0.0) * float(abs(uvLocal.x) + abs(uvID.x) > 0.5));\n    return dist;\n}\n\nvec2 add(in vec2 fragCoord, in vec3 iResolution, in int iFrame, in vec4 iMouse)\n{\n    float height = 0.0;\n    float mask = 0.0;\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    vec2 uvLocal = vec2(0.0);\n    vec2 uvID = vec2(0.0);\n    \n    // Tire\n    for(int i = min(0, iFrame); i < 2; i++)\n    {\n        const vec2 TIRE_SIZE = vec2(1.0, 2.0);\n        float index = float(i) / 2.0;\n        vec2 uvRotated = uv * rotate(index * PI);\n        uvLocal = fract(uvRotated * TIRE_SIZE) * 2.0 - 1.0;\n        uvID = floor(uvRotated * TIRE_SIZE);\n        \n        float time = float(iFrame) / 20.0 - uvID.x * 2.0 - uvLocal.x - 40.0;\n        time -= index * 200.0;\n        time = mod(time, 200.0);\n\n        float h = smoothstep(0.0, 0.1, time) * smoothstep(6.1, 6.0, time);\n        h *= smoothstep(1.1, 1.0, time) + smoothstep(5.0, 5.1, time);\n        h *= smoothstep(0.1, 0.0, tiremark(uvLocal * rotate(-PI * 0.5))) * 0.05;;\n            \n        if(uvID.y == -1.0)\n        {\n            height = min(height + h, 0.1);\n            mask = min(mask, -step(0.05, h));\n        }\n    }\n    \n    float tireTime = mod(float(iFrame) / 20.0 - 40.0, 100.0);\n    tireTime = step(tireTime, 0.0) + step(15.0, tireTime);\n    \n    // Footstep\n    for(int i = min(0, iFrame); i < (0.0 < tireTime ? 12 : 0); i++)\n    {\n        const vec2 SIZE = vec2(2.0, 4.0);\n        float index = float(i) / 12.0;\n        vec2 uvRotated = uv * rotate(index * TAU + 0.2);\n        uvLocal = (fract(uvRotated * SIZE) * 2.0 - 1.0) / vec2(1.0, SIZE.y / SIZE.x);\n        uvID = floor(uvRotated * SIZE);\n\n        if(mod(uvID.x + uvID.y, 2.0) == 0.0)\n        {\n            uvLocal.y *= mod(uvID.y, 2.0) == 0.0 ? 1.0 : -1.0;\n            uvLocal.y += 0.35;\n\n            float time = float(iFrame) / 60.0 - uvID.x * 0.5 - uvLocal.x * 0.1 - 1.5;\n            time -= floor(uvID.y * 0.5 - 0.5) * 30.0;\n            time -= index * 200.0;\n            time = mod(time, 200.0);\n\n            float h = smoothstep(0.1, 0.0, footstep(uvLocal * rotate(-PI * 0.5))) * 0.1;\n            h *= step(0.4, time) * step(time, 1.0);\n\n            height = min(height + h, 0.1);\n            mask = min(mask, -step(0.1, h));\n        }\n    }\n\n    // Rain\n    const float RAIN_SIZE = 20.0;\n    uvLocal = fract(uv * RAIN_SIZE);\n    uvID = hash(floor(uv * RAIN_SIZE)) * RAIN_SIZE;\n    vec2 uvNoise = hash(uvID + float(iFrame) + 1.0);\n    vec2 uvDrop = hash(uvID + float(-iFrame) - 1.0);\n    \n    if (uvNoise.x + uvNoise.y < 1e-2)\n        height += smoothstep(1.0, 0.0, distance(uvLocal, uvDrop)) * 0.1;\n        \n    // Mouse\n    if (iMouse.z > 0.0)\n        height += smoothstep(10.0, 0.0, distance(fragCoord, iMouse.xy)) * 0.5;\n    \n    return vec2(height, mask);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Wave (2st pass, A -> B)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 info = wave(fragCoord, iResolution, iChannel0);\n    info.xz += add(fragCoord, iResolution, iFrame, iMouse);\n    fragColor = vec4(info.xy * info.z, clamp(info.z, 0.0, 1.0), 0.0);\n}\n","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// Wave (2st pass, B -> C)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 info = wave(fragCoord, iResolution, iChannel0);\n    info.xz += add(fragCoord, iResolution, iFrame, iMouse);\n    fragColor = vec4(info.xy * info.z, clamp(info.z, 0.0, 1.0), 0.0);\n}\n","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"// Wave (2st pass, C -> D)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 info = wave(fragCoord, iResolution, iChannel0);\n    info.xz += add(fragCoord, iResolution, iFrame, iMouse);\n    fragColor = vec4(info.xy * info.z, clamp(info.z, 0.0, 1.0), 0.0);\n}\n","name":"Buffer D","description":"","type":"buffer"}]}