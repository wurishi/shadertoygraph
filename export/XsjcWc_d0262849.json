{"ver":"0.1","info":{"id":"XsjcWc","date":"1494149573","viewed":165,"name":"wobbly sphere diffuse","username":"anclin","description":"wobbly sphere diffuse","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["wobblyspherediffuse"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float remap(float value, float inputMin, float inputMax, float outputMin, float outputMax)\n{\n    return (value - inputMin) * ((outputMax - outputMin) / (inputMax - inputMin)) + outputMin;\n}\n\nvec2 M(){\n    float aspectRatio = iResolution.x / iResolution.y;\n\tfloat mx = (iMouse.x / iResolution.x - 0.5) * 2.0;\n    float my = (iMouse.y / iResolution.y - 0.5) * 2.0;\n    return vec2(mx,my);\n}\n\nvec3 LightDirection(vec2 xy){\n    float R = 1.0;\n    float sensitivity = 1.0;\n    float x = xy.x * sensitivity;\n    float y = xy.y * sensitivity;\n    float var = R*R - x*x - y*y;\n\tfloat z = sqrt( var );\n    if( var < 0.0 )\n        z = 0.0;\n    return normalize(vec3(x,y,z));  \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float R = 0.5;\n    float atten = 1.1;\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float aspectRatio = iResolution.x / iResolution.y;\n    \n    uv -= 0.5;\n    uv.x *= aspectRatio;\n    \n    float x = uv.x;\n    float y = uv.y;\n    \n    // region wobbly\n    float t = iTime * 2.0;\n    float freq = 10.0;\n    float amplitude = remap( sin(t), -1.0, 1.0, 0.01, 0.04);\n    float waves = sin(y * freq + t*5.0) + cos(x * freq + t*2.0);\n    waves = (waves + 1.0) *  0.5; //normalize 0-1\n    \n    R += waves * amplitude - 0.05;\n    // endof wobbly\n    \n    float nx = x;\n    float ny = y;\n    float nz = sqrt( R*R - x*x - y*y );\n    vec3 n = vec3(nx,ny,nz);\n    \n    vec3 color = vec3(0);\n    \n    float d = sqrt( dot( uv, uv ) );\n    float mask = d < R ? 1.0 : 0.0;\n    \n    vec3 lightDirection = LightDirection( M() );\n    \n    float diffuse = dot(n,lightDirection);\n\tdiffuse = max(0.0, diffuse) * atten;\n    \n    \n    float rim = 1.0 - dot(n, vec3(0,0,1) ) * 3.0;\n\trim = max(0.0, rim);\n    vec3 rimColor = vec3(1,0,0) * 0.2;\n    \n    \n    vec3 lightColor = vec3(0.9, 0.9, 0.7);\n    vec3 ambientColor = vec3(0.11, 0.13, 0.15);\n    color += vec3(lightColor * diffuse + rim * rimColor + ambientColor);\n    \n    color *= mask;\n    \n    fragColor = vec4(color,1);\n    \n    // DEBUG\n\t//fragColor = vec4(n,1);\n\n}","name":"Image","description":"","type":"image"}]}