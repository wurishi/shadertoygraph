{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","sampler":{"filter":"nearest","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"\n// Deform - square tunnel : REDUX\n// Modifications by Stanley Hayes\n// Original Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n//Hsv conversion from http://ploobs.com.br/?p=1499\nvec3 Hue(float a)\n{\n\tvec3 K = vec3(3,2,1)/3.;\n\treturn clamp(abs(fract(vec3(a)+K)*6. - vec3(3.)) - K.xxx, 0., 1.);\n}\n\nvec3 HSVtoRGB(vec3 HSV)\n{\n    return vec3(((Hue(HSV.x) - 1.0) * HSV.y + 1.0) * HSV.z);\n}\n\n// Shader Begin\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalized coordinates (-1 to 1 vertically)\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n\n    // --- FROM IQ ----\n    // modified distance metric. Usually distance = (xÂ² + yÂ²)^(1/2). By replacing all the \"2\" numbers\n    // by 32 in that formula we can create distance metrics other than the euclidean. The higher the\n    // exponent, then more square the metric becomes. More information here:    \n    // http://en.wikipedia.org/wiki/Minkowski_distance\n    \n    //Makes everything a little trippy\n    float crayStationsCoef = .01;     \n    \n    p.x +=  sin(pow(iTime,.5))*crayStationsCoef*10.0;    \n    //p.y +=  cos(iTime)*crayStationsCoef*10.0;\n    // angle of each pixel to the center of the screen\n    float a = atan(p.y,p.x) + iTime * sin(iTime)*.002 + iMouse.x * .0001;\n    \n    \n    float exp = 1.; // makes this a box if you see it fit\n    //Mink.. Calculation \n    float r = pow( pow(p.x*p.x,exp) + pow(p.y*p.y,exp), 1.0/(exp * 2.0) ) + sin(iTime)*crayStationsCoef;\n    a += pow(r,.5); \n           \n    // index texture by angle and radious, and animate along radius    \n    vec2 uv = vec2(0.5/r + 0.5*iTime + iMouse.y,                    a/3.1416 );\n\n    // Lighting\n    r -= sin(iTime)*.05;\n    \n    // fetch color and darken in the center\n    vec3 col =  texture( iChannel0, uv ).xyz * r;\n    \n    //Lerp in Cray Mode\n    col = (crayStationsCoef) * HSVtoRGB(vec3(col.r, 1.0, 1.0)) + col *(1.-crayStationsCoef); \t\n    col *= (sin(uv.x*5.0)*1.0 + 1.0) * .7;\n    \n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XtX3DN","date":"1421966312","viewed":502,"name":"Deform - tunnel : REDUX","username":"StanRee","description":"Based on of iq's older posts","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["tunnel","endless"],"hasliked":0,"parentid":"","parentname":""}}