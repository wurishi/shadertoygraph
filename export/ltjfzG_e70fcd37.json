{"ver":"0.1","info":{"id":"ltjfzG","date":"1517260115","viewed":94,"name":"2D Distance Fields Draft v2","username":"demicuz","description":"Just having fun with stuff","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["notagsitsadraft"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI radians(180.)\n\nvec2 m;  // mouse\nfloat t; // time\n\nfloat sdCircle(vec2 p, float r) \n{\n    return length(p) - r;\n}\n\nfloat sdBox(vec2 p, vec2 dim)\n{\n    p = abs(p);\n    dim /= 2.;\n    \n    float inDist  = min(-min(dim.x - p.x, dim.y - p.y), .0);\n    float outDist = length(max(vec2(.0), p - dim));\n    \n    return inDist + outDist;\n}\n\nfloat sdPill(vec2 p, vec2 dim)\n{\n    // TODO optimize this\n    \n    dim *= .5;\n    float w, h;  // HALF width and height\n    \n    if (dim.y > dim.x)\n    {\n        p = mat2(0., 1., -1., 0.) * p;  // rotate by 90 degrees\n        \n        w = dim.y;\n        h = dim.x;\n    } else {\n        w = dim.x;\n        h = dim.y;\n    }\n    \n    // This approach is wrong. It lies about inner distance.\n    float c1Dist  = sdCircle(p + vec2(w - h, .0), h);\n    float c2Dist  = sdCircle(p + vec2(h - w, 0.), h);\n    float boxDist = sdBox(p, vec2(2.*(w - h), 2.*h));\n    \n    return min(min(c1Dist, c2Dist), boxDist);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    m = iMouse.xy / iResolution.xy;\n    t = iTime;\n    float ratio = iResolution.x / iResolution.y;\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy - vec2(.5);\n    uv.x *= ratio;\n    uv *= 20.;\n    \n    //vec2 circlePos = vec2(5.*sin(t/1.5), 4.*cos(1.3*t+2.));\n    vec2 circlePos = vec2(.0);\n    float circleDist = sdCircle(uv - circlePos, 2.);\n    float circle = step(circleDist, .0);\n    \n    \n    //vec2 boxPos = vec2(3.*sin(t+.3), -4.*cos(t))*2.;\n    vec2 boxPos = vec2(m.x-.5, m.y-.5)*20.;\n    boxPos.x *= ratio;\n    float boxDist = sdBox(uv - boxPos, vec2(1., 4.));\n    float box = step(boxDist, .0);\n    \n    vec2 pillPos = vec2(3.*sin(t+.3), -4.*cos(t));\n    float pillDist = sdPill(uv - pillPos, vec2(m.x*10., m.y*10.));\n    float pill = step(pillDist, .0);\n    \n    //float dist = min(circleDist, boxDist);\n    float dist = pillDist;\n    vec3 c1 = vec3(fract(dist));\n    vec3 c2 = vec3(box + pill);\n    \n    float line = abs(1. / abs(boxDist - circleDist));\n    \n    line *= .01;\n    \n    vec3 color = mix(c1, c2, .7) + line;\n    \n\tfragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}