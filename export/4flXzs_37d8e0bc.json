{"ver":"0.1","info":{"id":"4flXzs","date":"1705603146","viewed":59,"name":"mandelbrot_glsl_2_shadertoy","username":"Lee_Shadertoy","description":"opengl glsl to shadertoy","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["learnshadertoy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec2 center = vec2(0.0, 0.0);\nconst float scale = 1.0;\nconst int max_iterations = 100;\n\nvec2 cmult(vec2 z1, vec2 z2) \n{\n  return vec2(z1.x*z2.x - z1.y*z2.y, z1.x*z2.y + z1.y*z2.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 gidx = fragCoord;\n    vec2 size = iResolution.xy;\n    vec2 uv = (2.0 * gidx - size) / size.y;\n    \n    vec2 c = center + scale * uv;\n    vec2 z = vec2(0, 0);\n    int iter_diverge = max_iterations;\n    for(int i = 0; i < max_iterations; ++i)\n    {\n       z = cmult(z, z) + c;\n       if(length(z) > 2.0) \n       {\n          iter_diverge = i;\n          break;\n       }\n    }\n    \n    vec3 color = vec3(iter_diverge / max_iterations);\n    fragColor = vec4(color,1.0);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    //vec2 uv = fragCoord/iResolution.xy;\n    //vec2 size = iResolution.xy;\n    \n\n    // Output to screen\n    //fragColor = vec4(uv,0.0,1.0);\n}","name":"Image","description":"","type":"image"}]}