{"ver":"0.1","info":{"id":"tl3GR8","date":"1575555643","viewed":393,"name":"Constant luma color chart.","username":"Bananaft","description":"Comparison of different methods of color spill/hdr desaturation.\nFull discussion:\nhttps://twitter.com/Bananaft/status/1202202291367006209\n\nCheck comments in main function.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["color","tonemapping"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float TonemapFloat( float x )\n{\n\treturn 1.0f - exp( -x ); // can change the tonemap function here \n}\n\nvec3 TonemapFloat3( vec3 x )\n{\n    vec3 r;\n    r.x = TonemapFloat( x.x );\n    r.y = TonemapFloat( x.y );\n    r.z = TonemapFloat( x.z );\n    \n    return r;\n}\n\nvec3 Reinhard(vec3 color, float white)\n{\n\treturn color / (1. + color) * (1.+1./white);\n}\n\nvec3 whitePreservingLumaBasedReinhardToneMapping(vec3 color)\n{\n\tfloat white = 2.;\n\tfloat luma = dot(color, vec3(0.2126, 0.7152, 0.0722));\n\tfloat toneMappedLuma = luma * (1. + luma / (white*white)) / (1. + luma);\n\tcolor *= toneMappedLuma / luma;\n//\tcolor = pow(color, vec3(1. / 2.2));\n\treturn color;\n}\n\nfloat GetBT709Luminance( vec3 c )\n{\n    return dot( c, vec3(0.2126f, 0.7152f, 0.0722f) );\n}\n\nvec3 TonemapProcess( vec3 c )\n{\n    float YOrig = GetBT709Luminance( c );\n    \n    // Sort of hue preserving tonemap by scaling the original color by the original and tonempped luminance\n    float YNew = GetBT709Luminance( whitePreservingLumaBasedReinhardToneMapping( c ) );\n    vec3 result = c * YNew / YOrig;\n    \n    float desaturated = GetBT709Luminance( result );\n        \n\t// Stylistic desaturate based on luminance - we want pure primary red to desaturate _slightly_ when bright\n\tfloat sdrDesaturateSpeed = 0.2f;\n\tfloat stylisticDesaturate = TonemapFloat( YOrig * sdrDesaturateSpeed );\n    \n    \n\tfloat stylisticDesaturateScale = 0.8f; // never fully desaturate bright colors\n\tstylisticDesaturate *= stylisticDesaturateScale;    \n    \n    result = mix( result, vec3(desaturated), stylisticDesaturate );\n    \n    return result;\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nconst float eps = 0.0000001;\n\nvec3 rgb2hsv( in vec3 c)\n{\n    vec4 k = vec4(0.0, -1.0/3.0, 2.0/3.0, -1.0);\n    vec4 p = mix(vec4(c.zy, k.wz), vec4(c.yz, k.xy), (c.z<c.y) ? 1.0 : 0.0);\n    vec4 q = mix(vec4(p.xyw, c.x), vec4(c.x, p.yzx), (p.x<c.x) ? 1.0 : 0.0);\n    float d = q.x - min(q.w, q.y);\n    return vec3(abs(q.z + (q.w - q.y) / (6.0*d+eps)), d / (q.x+eps), q.x);\n}\n\nfloat smootherstep(float edge0, float edge1, float x)\n{\n\tx = clamp((x - edge0)/(edge1 - edge0), 0.0, 1.0);\n\treturn x*x*x*(x*(x*6.0 - 15.0) + 10.0);\n}\n\nvec3 adjust_out_of_gamut_maxcomp(vec3 c)\n{\n    const float BEGIN_SPILL = 1.0;\n    const float END_SPILL = 4.0;\n    const float MAX_SPILL = 0.9; //note: <=1\n    \n    float mc = max(c.r, max(c.g, c.b));\n    float t = MAX_SPILL * smootherstep( 0.0, END_SPILL-BEGIN_SPILL, mc-BEGIN_SPILL );\n    return mix( c, vec3(mc), t);\n}\n\nconst vec3 LumWeights = vec3(0.2126, 0.7152, 0.0722);\n\nconst mat3 sRGB_2_AP0 = mat3(\n    0.4397010, 0.3829780, 0.1773350,\n    0.0897923, 0.8134230, 0.0967616,\n    0.0175440, 0.1115440, 0.8707040\n);\nconst mat3 AP0_2_sRGB = mat3(\n    2.52169, -1.13413, -0.38756,\n    -0.27648, 1.37272, -0.09624,\n    -0.01538, -0.15298, 1.16835\n);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 c = hsv2rgb(vec3(uv.x,1.,1.0));\n    float lum = dot(c, LumWeights);\n    c = c * (pow(uv.y,2.)/lum * 8.);\n    \n    int x = int(floor(fract(uv.x/12.+iTime/14.) * 14.));\n    //x=12;\n    \n    switch (x)\n    {\n       // No tonemap, no gamma\n       case 0: break;   \n       // Luminance of no tonemap no gamma\n       case 1: \n       \t\t    c = clamp(c,0.,1.);\n        \t\tlum = dot(c, LumWeights);\n        \t\tc = vec3(lum);\n        \t\tbreak;\n        // Tonemap and gamma\n        case 2:\n                c = whitePreservingLumaBasedReinhardToneMapping(c);\n                c = pow(c, vec3(1. / 2.2));\n                c = clamp(c,0.,1.);\n        \t\tbreak;\n        // Luminance tonemap and gamma\n        case 3:\n        \t\tc = whitePreservingLumaBasedReinhardToneMapping(c);\n                c = clamp(c,0.,1.);\n        \t\tlum = dot(c, LumWeights);\n        \t\tc = vec3(lum);\n        \t\tc = pow(c, vec3(1. / 2.2));\n        \t\tbreak;\n        // Paul Malin's method \n        //https://twitter.com/Bananaft/status/1202358736238587906\n        //https://www.shadertoy.com/view/ls2fRt\n        //https://www.shadertoy.com/view/wld3zn\n        case 4:\n        \t\tc = TonemapProcess(c);\n        \t\tc = pow(c, vec3(1. / 2.2));\n                c = clamp(c,0.,1.);\n        \t\tbreak;\n        // Luminance of Paul Malin's method \n        case 5:\n        \t\tc = TonemapProcess(c);\n                c = clamp(c,0.,1.);\n            \tlum = dot(c, LumWeights);\n        \t\tc = vec3(lum);\n        \t\tc = pow(c, vec3(1. / 2.2));\n        \t\tbreak;\n        \n      \t// Decrease saturation\n        case 6:\n\t\t\t\tc = rgb2hsv(c);\n        \t\tc.y *= 0.94;\n        \t\tc = hsv2rgb(c);\n        \t\tc = clamp(c,0.,1.);\n        \t\tc = pow(c, vec3(1. / 2.2));\n        \t\tbreak;\n        \n       \tcase 7:\n\t\t\t\tc = rgb2hsv(c);\n        \t\tc.y *= 0.94;\n        \t\tc = hsv2rgb(c);\n        \t\tc = clamp(c,0.,1.);\n        \t\tlum = dot(c, LumWeights);\n      \t\t\tc = vec3(lum);\n        \t\tc = pow(c, vec3(1. / 2.2));\n        \t\tbreak;\n        \n        // Minimum component\n        case 8:\n\t\t\t\t\n        \t\tlum = dot(c, LumWeights);\n        \t\tc = vec3(max(c.r, LumWeights.r*lum*0.5),max(c.g, LumWeights.g*lum*0.5),max(c.b, LumWeights.b*lum*0.5));\n        \t\tc = clamp(c,0.,1.);\n        \t\tc = pow(c, vec3(1. / 2.2));\n        \t\tbreak;\n        \n       \tcase 9:\n\t\t\t\tlum = dot(c, LumWeights);\n        \t\tc = vec3(max(c.r, LumWeights.r*lum*0.5),max(c.g, LumWeights.g*lum*0.5),max(c.b, LumWeights.b*lum*0.5));\n        \t\tc = clamp(c,0.,1.);\n        \t\tlum = dot(c, LumWeights);\n      \t\t\tc = vec3(lum);\n        \t\tc = pow(c, vec3(1. / 2.2));\n        \t\tbreak;\n        \n        \n        // Mikkel Gjoel's\n        //https://twitter.com/pixelmager/status/1202525285498920961\n        //https://www.shadertoy.com/view/3ldGRn\n        case 10:\n        \t\tc = whitePreservingLumaBasedReinhardToneMapping(c);\n        \t\tc = adjust_out_of_gamut_maxcomp(c);\n        \t\tc = pow(c, vec3(1. / 2.2));\n                c = clamp(c,0.,1.);\n        \t\tbreak;\n        \n        // Luminance of Mikkel Gjoel's\n        case 11:\n        \t\tc = whitePreservingLumaBasedReinhardToneMapping(c);\n        \t\tc = adjust_out_of_gamut_maxcomp(c);\n                c = clamp(c,0.,1.);\n        \t\tlum = dot(c, LumWeights);\n        \t\tc = vec3(lum);\n        \t\tc = pow(c, vec3(1. / 2.2));\n        \t\tbreak;\n        // ACES color space:\n         case 12:\n        \t\tc = c * sRGB_2_AP0;\n                c = Reinhard( c , 8. );\n                c = c * AP0_2_sRGB;\n        \t\tc = pow(c, vec3(1. / 2.2));\n        \t\tbreak;\n        case 13:\n        \t\tc = c * sRGB_2_AP0;\n                c = Reinhard( c , 8. );\n                c = c * AP0_2_sRGB;\n        \t\tc = clamp(c,0.,1.);\n        \t\tlum = dot(c, LumWeights);\n        \t\tc = vec3(lum);\n        \t\tc = pow(c, vec3(1. / 2.2));\n        \t\tbreak;\n \n\n    }\n    fragColor = vec4(c,1.0);\n}","name":"Image","description":"","type":"image"}]}