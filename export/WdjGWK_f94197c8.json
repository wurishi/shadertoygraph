{"ver":"0.1","info":{"id":"WdjGWK","date":"1550002870","viewed":296,"name":"Ray Cast Sphere","username":"nils2317","description":"ARR Homework","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["school"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 cameraCenter = vec3(0.0, 0.0, 0.0);\nvec3 sphereCenter = vec3(0.0, 0.0, 10.0);\n\nfloat imagePlaneDist = 1.0;\nfloat sphereRadius = 2.0;\n\nfloat lightIntensity = 0.2;\nvec3 lightPos = vec3(5.0, 5.0, 6.0);\n\nfloat sphereIntersect(vec3 ray, vec3 dir, vec3 center, float radius)\n{\n\tvec3 rc = ray-center;\n\tfloat c = dot(rc, rc) - (radius*radius);\n\tfloat b = dot(dir, rc);\n\tfloat d = b*b - c;\n\tfloat t = -b - sqrt(abs(d));\n\tfloat st = step(0.0, min(t,d));\n\treturn mix(-1.0, t, st);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = (uv * 2.0) - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // Ray moves towards current pixel on camera plane\n    vec3 imagePlanePixel = vec3(uv.x, uv.y, cameraCenter.z + imagePlaneDist);\n    \n    vec3 rayDir = normalize(imagePlanePixel - cameraCenter);\n    \n    float t = sphereIntersect(cameraCenter, rayDir, sphereCenter, sphereRadius);    \n    \n    vec3 hit = cameraCenter + rayDir*t;\n\tvec3 normal = normalize(hit - sphereCenter);\n    \n    vec3 lightDir = normalize(lightPos - hit);\n    lightIntensity = max(0.0, dot(lightDir, normal)) * lightIntensity + 0.04;\n    \n    // pixel color\n    vec3 col = vec3(0, t,0) * lightIntensity;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}