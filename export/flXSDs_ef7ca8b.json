{"ver":"0.1","info":{"id":"flXSDs","date":"1626774921","viewed":112,"name":"Meteorite?maybe","username":"TheoWU","description":"Practising ray marching. \nGet this result somehow. I feel cool though.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["practice"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    Camera cam;\n    cam.camPos = vec3(0.,0.,0.);\n    cam.lookAt = vec3(0.,0.,2.);\n    cam.zoom = 1.0;\n    Ray ray = getRay(uv,cam);\n    Light L;\n    L.pos = vec3(0.0+2.*sin(iTime),5.0,6.0+2.*cos(iTime));\n    float d = rayMarching(ray);\n    vec3 p = ray.ori + ray.dir * d;\n    float dif = getLight(p,L);\n    vec3 n = getNormal(p);\n    vec3 col = vec3(dif);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const int Maxstep = 100;\nconst float Mindist = 0.01;\nconst float Maxdist = 100.0;\nconst float Surfdist = 0.1;\n\nstruct Ray{\n    vec3 ori, dir; \n};\nstruct Camera{\n    vec3 camPos;\n    vec3 lookAt;\n    float zoom;\n};\n\nstruct Sphere{\n    vec3 c;\n    float r;\n};\nstruct Plane{\n    float d;\n};\nstruct Light{\n    vec3 pos;\n};\nfloat random (in vec2 xy) {\n    return fract(sin(dot(xy,vec2(12.9898,78.233)))*43758.5453123);\n}\nfloat noise (in vec2 xy) {\n    vec2 i = floor(xy);\n    vec2 f = fract(xy);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +(c - a)* u.y * (1.0 - u.x) +(d - b) * u.x * u.y;\n}\nfloat fbm (in vec2 xy) {\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(100.0);\n    // Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5),-sin(0.5), cos(0.5));\n    for (int i = 0; i < 10; ++i) {\n        v += a * noise(xy);\n        xy = rot * xy * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\n\nfloat getDist(vec3 p){\n    Sphere s1,s2,s3;\n    Plane p1;\n    p1.d = p.y - -1.;\n    s1.c = vec3(1.0,0.0,5.0);\n    s1.r = 1.5;\n    s2.c = vec3(-1.0,0.0,5.0);\n    s2.r = 0.5;\n    s3.c = vec3(0.0,0.0,5.0);\n    s3.r = 2.0;\n    float d1 = length(p-s1.c)-s1.r;\n    float d2 = length(p-s2.c)-s2.r;\n    float d3 = length(p-s3.c)-s3.r;\n    float k = 1.5;\n    float h1 = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    float d12 = mix(d1,d2,h1)- k*h1*(1.0-h1);\n    float h2 = clamp( 0.5 + 0.5*(d3-d12)/k, 0.0, 1.0 );\n    float d123 = mix(d12,d3,h2)- k*h2*(1.0-h2);\n    float dp1 = p1.d;\n    float d = min(d123,dp1);\n    return d+fbm(p.xy);\n}\nfloat rayMarching(Ray r){\n    float d=0.0;\n    vec3 p;\n    for(int i=0; i < Maxstep; i++){\n        p = r.ori + r.dir * d;\n        float d1 = getDist(p);\n        d += d1;\n        if(d > Maxdist || d1 < Mindist){\n            break;\n        }\n    }\n    return d;\n}\n\nvec3 getNormal(vec3 p){\n    float d = getDist(p);\n    vec2 e = vec2(.01,0.);\n    vec3 n = d - vec3(getDist(p-e.xyy),getDist(p-e.yxy),getDist(p-e.yyx));\n    return normalize(n);\n}\nfloat getLight(vec3 p, Light L){\n    vec3 l = normalize(L.pos - p);\n    vec3 n = getNormal(p);\n    Ray r;\n    r.ori = p+n*Surfdist;\n    r.dir = l;\n    float d = rayMarching(r);\n    \n    float diffuse = clamp(dot(n,l),0.0,1.0);\n    if(length(L.pos - p)>d){\n        diffuse = 0.0;\n    }\n    float specular = 0.0;\n    return diffuse + specular;\n}\n\nRay getRay(vec2 uv, Camera cam){\n    Ray r;\n    r.ori = cam.camPos;\n    \n    vec3 forth = normalize(cam.lookAt-cam.camPos);\n    vec3 right = cross(vec3(0,1,0),forth);\n    vec3 up = cross(forth,right);\n    \n    vec3 center = r.ori + forth * cam.zoom;\n    vec3 inter = center + uv.x * right + uv.y * up;\n    r.dir = normalize(inter - r.ori);\n    return r;\n}\n\n","name":"Common","description":"","type":"common"}]}