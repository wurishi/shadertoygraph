{"ver":"0.1","info":{"id":"4sGBWW","date":"1529018847","viewed":268,"name":"Fire Shader Learning Test","username":"crocidb","description":"Just some test I'm doing.\n\nThe SNOISE function I grabbed from here: https://www.shadertoy.com/view/lsf3RH","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["fire"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// SNOISE function from: https://www.shadertoy.com/view/lsf3RH\nfloat snoise(vec3 uv, float res)\n{\n\tconst vec3 s = vec3(1e0, 1e2, 1e3);\n\t\n\tuv *= res;\n\t\n\tvec3 uv0 = floor(mod(uv, res))*s;\n\tvec3 uv1 = floor(mod(uv+vec3(1.), res))*s;\n\t\n\tvec3 f = fract(uv); f = f*f*(3.0-2.0*f);\n\n\tvec4 v = vec4(uv0.x+uv0.y+uv0.z, uv1.x+uv0.y+uv0.z,\n\t\t      \t  uv0.x+uv1.y+uv0.z, uv1.x+uv1.y+uv0.z);\n\n\tvec4 r = fract(sin(v*1e-1)*1e3);\n\tfloat r0 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\t\n\tr = fract(sin((v + uv1.z - uv0.z)*1e-1)*1e3);\n\tfloat r1 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\t\n\treturn mix(r0, r1, f.z)*2.-1.;\n}\n\nfloat noise(vec2 uv, float baseres)\n{\n    float n = 0.0;\n    for (int i = 0; i < 7; i++)\n    {\n        float v = pow(2.0, float(i));\n        n += (1.5 / v) * snoise(vec3(uv + vec2(1.,1.) * (float(i) / 17.), 1), v * baseres);\n    }\n    \n    \n    return clamp((1.0 - n) * .5, 0., 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy);\n    \n    // Tweaking vars\n    vec4 color = vec4(0.925, 0.291, 0.023, 1.0);\n    vec2 tiling = vec2(1.0, .6);\n    vec2 speed1 = vec2(0.05, -0.32);\n    vec2 speed2 = vec2(-0.10, -0.39);\n    float ss_min = 0.2;\n    float ss_max = ss_min + 0.5;\n    float noise_sz = 8.0f;\n    \n    // Tiled UV\n    vec2 tuv = vec2(mod(uv.x * tiling.x, 1.0), mod(uv.y * tiling.y, 1.0));\n    \n    // Samplings\n    vec2 uv1 = tuv + (speed1 * iTime);\n    vec2 uv2 = tuv + (speed2 * iTime);\n    \n    // Mask\n    vec2 uvt = vec2(uv.x, pow(1.0 - uv.y, 2.2));\n    vec2 nuvt = (uvt * 2.0) - 1.0;    \n    float v = 1. - length(nuvt);\n    v = ((v * .6) + (pow(v, 4.3) * 4.55));\n    \n    float samplings = noise(uv1, noise_sz) * noise(uv2, noise_sz);\n    float mask = pow(v, 1.2) * samplings;\n    float amask = smoothstep(ss_min, ss_max, mask);\n\n    // Output to screen\n    fragColor = color + (color * pow((1.0 - uv.y), 3.0) * .3);\n    fragColor += samplings * .3;\n    fragColor *= (2. * amask);\n}","name":"Image","description":"","type":"image"}]}