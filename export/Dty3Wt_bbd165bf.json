{"ver":"0.1","info":{"id":"Dty3Wt","date":"1684831382","viewed":107,"name":"Fork Collision Detection SDF RB","username":"sasa42","description":"Since SDFs give the distace to a surface they are great for collision detection! Click to see the distance field.\n\nExtended with rounded Box from https://www.shadertoy.com/view/ctGGWt","likes":9,"published":1,"flags":32,"usePreview":0,"tags":["2d","sdf","collisiondetection"],"hasliked":0,"parentid":"wdKfzw","parentname":"Collision Detection With SDFs"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float movingDisk(in vec2 p, in vec2 o, in float r, in vec2 v, in float dt) {\n    vec2 p0 = p - o, p1 = v * dt;\n\n    float a = dot(p1, p1);\n    float b = dot(p0, p1);\n    float c = dot(p0, p0) - r * r;\n\n    float h = b * b - a * c;\n    \n    if (h > 0.0) {\n        vec2 t = clamp((vec2(-1.0, 1.0) * sqrt(h) - b) / a, 0.0, 1.0);\n        return t.y - t.x;\n    }\n\n    return 0.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    float unit = 2.0 / iResolution.y;\n    vec2 ballPos = getBallPos();\n\n    float distanceField = mapEnvironment(uv);\n    fragColor = vec4(0.0, 0.0, smoothstep(unit, 0.0, distanceField), 1.0);\n    \n    if (iMouse.z > 0.0) {\n        fragColor.rgb = mix(fragColor.rgb, vec3(1.0, 1.0, 1.0), 0.5 * sin(distanceField * 400.0));\n    }\n\n    fragColor.r += movingDisk(uv, ballPos, BALL_RADIUS, getBallVel(), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define BALL_RADIUS 0.05\n\n#define getBallPos() texelFetch(iChannel0, ivec2(0, 0), 0).xy\n#define getBallVel() texelFetch(iChannel0, ivec2(1, 0), 0).xy\n\nvec2 trans = vec2(-0.2, 0.0);\nvec2 halfSize = vec2(0.35, 0.2);\nfloat cornerRadius = 0.03;\nvec2 shear = vec2(0.0,0.3);\n    \nfloat box(vec2 position, vec2 halfSize, float cornerRadius, vec2 shear) \n{\n    // Applies the shear transformation to the position\n    position.xy = mat2(1.0, shear.x, shear.y, 1.0) * (position.xy - trans);\n\n    // Calculates the distance from the position to the edges of the box\n    position.xy = abs(position.xy) - halfSize + vec2(cornerRadius);\n\n    return length(max(position, 0.0)) + min(max(position.x, position.y), 0.0) - cornerRadius;\n}\n    \nfloat mapEnvironment(in vec2 p) \n{\n    vec2 q1 = abs(p) - vec2(0.75, 0.4);\n    vec2 q2 = abs(p + vec2(0.35, 0.0)) - 0.25;\n    float wall = -length(max(q1, 0.0)) - min(max(q1.x, q1.y), 0.0);\n    \n    //float box = length(max(q2, 0.0)) + min(max(q2.x, q2.y), 0.0);\n    float box = box(p.xy, halfSize, cornerRadius, shear);\n    \n    float ball = length(p - vec2(0.4, 0.0)) - 0.2;\n    //return min(wall, min(box, ball));\n    return min(wall, box);\n}\n\nvec2 getNormal(in vec2 p) {\n    return normalize(vec2(mapEnvironment(p + vec2(0.001, 0.0)) - mapEnvironment(p - vec2(0.001, 0.0)),\n                          mapEnvironment(p + vec2(0.0, 0.001)) - mapEnvironment(p - vec2(0.0, 0.001))));\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    ivec2 iFragCoord = ivec2(fragCoord);\n    fragColor = vec4(0.0);\n    if (iFrame == 0 && iFragCoord == ivec2(1, 0)) {\n        fragColor = vec4(0.02, 0.01, 0.0, 0.0);\n    }\n\n    if (iFrame > 0) {\n        if (iFragCoord.y == 0 && iFragCoord.x < 2) {\n            vec2 ballPos = getBallPos();\n            vec2 ballVel = getBallVel();\n\n            ballPos += ballVel;\n\n            float distToEnv = mapEnvironment(ballPos);\n            if (distToEnv < BALL_RADIUS) {\n                    vec2 hitNormal = getNormal(ballPos);\n                    ballPos += hitNormal * (BALL_RADIUS - distToEnv);\n                    ballVel = reflect(ballVel, hitNormal);\n            }\n\n            if (iFragCoord.x == 0) fragColor = vec4(ballPos, 0.0, 1.0);\n            if (iFragCoord.x == 1) fragColor = vec4(ballVel, 0.0, 1.0);\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}