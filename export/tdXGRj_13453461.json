{"ver":"0.1","info":{"id":"tdXGRj","date":"1547598059","viewed":429,"name":"You're Gonna Carry That Weight","username":"robalan","description":"Music - Memory by Yoko Kanno\n\nInspired by the image from Cowboy Bebop of a rose fallen in a puddle.\n\nThis is my first shader aside from a couple experiments, so comments and suggestions from more seasoned coders are appreciated.","likes":13,"published":1,"flags":40,"usePreview":1,"tags":["raymarching","music"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Thanks to Inigo Quilez for all his raymarching tutorials and resources!\n\n#define BRICK_TEX 1\n#define WATER_TEX 2\n#define FLOWER_TEX 3\n#define STEM_TEX 4\n#define LEAF_TEX 5\n\n#define PI      3.14159265359\n#define PI2     6.28318530718\n\nfloat opSmoothUnion(in float d1, in float d2, in float k)\n{ \n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nvec3 opBendX(in vec3 p, in float f)\n{\n    float c = cos(f);\n    float s = sin(f);\n    mat3  m = mat3(1.0,0.0,0.0,0.0,c,-s,0.0,s,c);\n    return vec3(m*p);\n}\n\nvec3 opBendY(in vec3 p, in float f)\n{\n    float c = cos(f);\n    float s = sin(f);\n    mat3  m = mat3(c,0.0,-s,0.0,1.0,0.0,s,0.0,c);\n    return vec3(m*p);\n}\n\nvec4 df_min(in vec4 d1, in vec4 d2) {\n\treturn (d1.x < d2.x) ? d1 : d2;\n}\n\nfloat onion(in float d, in float h) { return abs(d)-h; }\n\nfloat sphere(in vec3 p, in float r) { return length(p)-r; }\n\nfloat round_box (in vec3 p, in vec3 b, in float r) { return length(max(abs(p)-b, 0.0))-r; }\n\nfloat brick (in vec3 p, in vec3 s, in vec3 b)\n{\n    p += s;\n    float edge = (pow(abs(p.x)/b.x,4.0) + pow(abs(p.z)/b.z,4.0))/8.0 + 0.03;\n    return round_box(p,b,0.5) + texture(iChannel1, (p.xz)/50.0).x * edge;\n}\n\nfloat sdCapsule(in vec3 p, in vec3 a, in vec3 b, in float r )\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\nfloat sdTriPrism(in vec3 p, in vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n\nvec4 leaf (in vec3 p, in float l, in float w ) {\n    float loz = max(sphere(p + vec3(0., 0., l-w), l), sphere(p - vec3(0., 0., l-w), l));\n    float sheet = opSmoothUnion(round_box(p,vec3(l,0.01,l),0.01),sdCapsule(p,vec3(-l*0.45,0.0,0.0),vec3(l,0.0,0.0),0.07),0.05);\n    return vec4(max(loz, sheet), 5.0, p.x/l, p.z);\n}\n\nfloat bricks(in vec3 p)\n{\n    if( p.z < -9.5 ) {\n        float brick11 = brick(p, vec3(-1.0,2.0,13.0), vec3(6.0,1.0,3.0));\n        float brick12 = brick(p, vec3(12.0,2.0,13.0), vec3(6.0,1.0,3.0));\n        return min(brick11, brick12);\n    }\n    else if( p.z < -3.5 ) {\n        float brick21 = brick(p, vec3(6.0,2.0,6.5), vec3(6.0,1.0,2.5));\n        float brick22 = brick(p, vec3(22.0,2.0,6.5), vec3(9.0,1.0,2.5));\n        float row2a = min(brick21, brick22);\n        float brick23 = brick(p, vec3(-7.0,2.0,6.5), vec3(6.0,1.0,2.5));\n        return min(row2a, brick23);\n    }\n    else if( p.z < 3.5 ) {\n        float brick31 = brick(p, vec3(12.0,2.0,0.0), vec3(5.0,1.0,3.0));\n        float brick33 = brick(p, vec3(24.0,2.0,0.0), vec3(6.0,1.0,3.0));\n        float brick34 = brick(p, vec3(-12.0,2.0,0.0), vec3(5.0,1.0,3.0));\n        float row3b = min(brick33, brick34);\n        return min(brick31, row3b);\n    }\n    else if( p.z < 10.5 ) {\n        float brick41 = brick(p, vec3(7.0,2.0,-7.0), vec3(3.0,1.0,3.0));\n        float brick42 = brick(p, vec3(19.0,2.0,-7.0), vec3(8.0,1.0,3.0));\n        float row4a = min(brick41, brick42);\n        float brick44 = brick(p, vec3(-16.0,2.0,-7.0), vec3(6.0,1.0,3.0));\n        return min(row4a, brick44);\n    }\n    else if( p.z < 17.5 ) {\n        float brick51 = brick(p, vec3(7.0,2.0,-14.0), vec3(7.0,1.0,3.0));\n        float brick52 = brick(p, vec3(-7.0,2.0,-14.0), vec3(6.0,1.0,3.0));\n        return min(brick51, brick52);\n    }\n    else if( p.z < 25.25 ) {\n        float brick61 = brick(p, vec3(1.0,2.0,-21.5), vec3(6.0,1.0,3.5));\n        float brick62 = brick(p, vec3(-12.0,2.0,-21.5), vec3(6.0,1.0,3.5));\n        return min(brick61, brick62);\n    }\n    else {\n        float row7 = brick(p, vec3(-8.0,2.0,-28.5), vec3(6.0,1.0,3.0));\n    \treturn row7;\n    }\n}\n\nvec4 leaves(in vec3 p) {\n    if( p.x < 0.0 ) {\n        vec3 q = opBendX(p*mat3(0.87,0.0,-0.5,0.0,1.0,0.0,0.5,0.0,0.87) + vec3(6.4,0.,-4.4), p.x/3.0);\n        vec4 leaf1 = leaf(q, 4., 0.9);\n        q = opBendX(p*mat3(0.87,0.0,0.5,0.0,1.0,0.0,-0.5,0.0,0.87) + vec3(0.8,0.,-5.6), (abs(p.x)+3.0)/3.0);\n        vec4 leaf2 = leaf(q, 4.3, 0.9);\n        return df_min(leaf1,leaf2);\n    } else {\n        vec3 q = opBendX(p*mat3(-1.0,0.0,-0.0,0.0,1.0,0.0,0.0,0.0,-1.0) + vec3(4.6,0.,7.8), (p.x+3.0)/-4.0);\n        vec4 leaf3 = leaf(q, 3., 0.9);\n        q = opBendX(p*mat3(-0.5,0.0,0.87,0.0,1.0,0.0,-0.87,0.0,-0.5) + vec3(-4.2,0.,5.1), (abs(p.x)-3.0)/3.0);\n        vec4 leaf4 = leaf(q, 4.3, 0.9);\n        return df_min(leaf3,leaf4);\n    }\n}\n\nvec4 map(in vec3 p)\n{\n    float petals = max(onion(onion(onion(onion(sphere(p + vec3(0.0,0.0,2.2), 0.7),0.4),0.2),0.1),0.05),\n                       sphere(p + vec3(0.0,0.0,1.3), 1.5) - 0.2*abs(sin(2.0*p.x)) - 0.2*abs(sin(2.0*p.y)));\n    float ball = sphere(p, 1.8);\n    vec4 bulb = vec4(opSmoothUnion(petals, ball, 1.1), 3, vec2(p.y/p.x, p.z));\n    vec3 q = opBendX(opBendY(p,p.z/70.0),p.z/900.0);\n    float stem1 =sdCapsule(q,vec3(0.,0.,0.),vec3(0.,0.,20.),0.20);\n    float stem2 = sdCapsule(opBendY(q+vec3(0.,0.,-7.),p.x/4.0),vec3(0.),vec3(-0.6,0.0,-1.6),0.08);\n    float topstem = opSmoothUnion(stem1, stem2, 0.15);\n    float stem3 = sdCapsule(q,vec3(0.,0.,10.),vec3(1.,0.,8.5),0.08);\n    float stem4 = sdCapsule(q, vec3(1.,0.,8.5),vec3(2.5,0.,7.8),0.06);\n    float botstem = opSmoothUnion(stem3, stem4, 0.05);\n    float mainstem = opSmoothUnion(topstem, botstem, 0.15);\n    float thorns = min(sdCapsule(q, vec3(0.,0.,12.),vec3(-0.65,0.,11.55),0.02),\n                       sdCapsule(q, vec3(0.,0.,15.),vec3(0.65,0.,14.55),0.02));\n    float sepalud = sdTriPrism(opBendX(vec3(q.x, abs(q.y/1.2), q.z), abs(q.y)/-2.0) + vec3(0.0,0.0,-1.8), vec2(0.5, 0.02));\n    float sepallr = sdTriPrism(opBendX(vec3(q.y, abs(q.x/1.2), q.z), abs(q.x)/-2.0) + vec3(0.0,0.0,-1.8), vec2(0.5, 0.02));\n    float sepals = min(sepalud, sepallr);\n    float extrabits = min(thorns, sepals);\n    vec4 thornystem = vec4(opSmoothUnion(mainstem, extrabits, 0.35), 4, vec2(0.0));\n    vec4 stem = df_min(thornystem, leaves(q));\n    vec4 flower = df_min(bulb, stem);\n    vec4 puddle = vec4(p.y - texture(iChannel0, (p.xz+vec2(10.0,10.0))/20.0).x/5. + 1.0, 2, vec2(0.0));\n    vec3 brickq = p * mat3(0.866,0.0,0.5,0.0,1.0,0.0,-0.5,0.0,0.866);\n    vec4 bricks = vec4(bricks(brickq), 1, brickq.xz);\n    vec4 ground = df_min(puddle, bricks);\n    vec4 d = df_min(flower,ground);\n\t\n\treturn d;\n}\n\nvec4 intersect(in vec3 ro, in vec3 rd)\n{\n    float t = 0.0;\n\tfloat eps = 0.015;\n\tvec4 h = vec4(1.0);\n    float res = -1.0;\n\tvec3 mat = vec3(0.0);\n\tfor(int i=0; i<70; i++){\n        if (h.x > 12.0) {\n\t\t\tcontinue;\n\t\t}\n\t\telse if( h.x < eps) {\n\t\t\tres = t;\n\t\t\tmat = h.yzw;\n\t\t\tcontinue;\n\t\t}\n        else {\n            h = map(ro + rd*t);\n            t += h.x;\n        }\n    }\n    return vec4(res,mat);\n}\n\nvec3 calcNormal(in vec3 pos){\n    vec3  eps = vec3(.05,0.0,0.0);\n    vec3 nor;\n    nor.x = map(pos+eps.xyy).x - map(pos-eps.xyy).x;\n    nor.y = map(pos+eps.yxy).x - map(pos-eps.yxy).x;\n    nor.z = map(pos+eps.yyx).x - map(pos-eps.yyx).x;\n    return normalize(nor);\n}\n\nvec3 skyCol(in vec3 rd, in vec3 sunpos){\n    vec3 col = vec3(0.2, 0.2, 0.25);\n    float sun = max(pow(clamp(dot(rd,sunpos),0.0,1.0),16.0),0.0);\n    col += vec3(0.4)*sun;\n    return col;\n}\n\nvec3 lamb(in vec3 pos, in vec3 norm, in vec3 light){\n    vec4 res = intersect(pos+0.02*norm,light);\n    float shadow = res.x <= 0.0 ? 1.0 : 0.4;\n    float dif1 = max(0.4 + 0.6*dot(norm,light),0.0);\n    vec3 col  = vec3(0.2,0.2,0.3);\t\t\t\t\t\t//ambient\n    col += dif1*vec3(1.0,0.97,0.85) * shadow;\t\t\t//point light (shadowed)\n    col += 1.0*(0.5+0.5*norm.y)*vec3(0.1,0.15,0.2);\t\t//sky\n    return col;\n}\n\nvec3 getMat(in int t, in vec2 uv)\n{\n    if(t == BRICK_TEX) return mix(texture(iChannel2, uv/10.0).xyz,vec3(0.15,0.35,0.4),0.3);\n    if(t == WATER_TEX) return vec3(0.6,0.6,0.65);\n    if(t == FLOWER_TEX) {\n        float angle = atan(uv.x);\n        float lobes = pow(abs(0.735 - mod(angle,1.57)),3.0);\n        return mix(vec3(0.4,0.11,0.12), vec3(0.0), lobes);\n    }\n    if(t == STEM_TEX) return vec3(0.18, 0.2, 0.18);\n    if(t == LEAF_TEX) {\n        float veins = 0.8-clamp(8.0*sin(25.0*uv.x + 4.0*abs(uv.y) + 6.0)-7.0,0.0,0.4);\n        return mix(vec3(0.09,0.1,0.09), vec3(0.18, 0.2, 0.18), veins);\n    }\n}\n\t\t\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 p = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n    p.x *= iResolution.x/iResolution.y;\n\n    // light\n    vec3 light = normalize(vec3(-1.0,0.5,-0.3));\n    vec3 lightcol = skyCol(normalize(vec3(-1.0,0.5,-0.3)),light);\n\n    // camera\n    vec3 ro = vec3(6.0,9.3,0.2*sin(0.2*iTime)-0.5); //origin\n    vec3 ww = normalize(vec3(0.0,-0.5,1.5) - ro);\n    vec3 uu = normalize(cross( vec3(0.0,1.0,0.0), ww ));\n    vec3 vv = normalize(cross(ww,uu));\n    vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n    vec3 col = vec3(0.0);\n    vec4 res = intersect(ro,rd);\n    float tmat = res.x;\n    if( tmat>0.0 )\n    {\n        vec3 pos = ro + tmat*rd;\n        vec3 nor = calcNormal(pos);\n        int matIndex = int(res.y);\n\t\t\n        col = lamb(pos, nor, light);\n        col *= lightcol;\n        col *= getMat(matIndex, res.zw);\n        \n        if (matIndex == WATER_TEX || matIndex == BRICK_TEX) {\n        \tvec3 rr = reflect(rd,nor);\n            vec4 rres = intersect(pos+0.05*rr,rr);\n            float rmat = rres.x;\n            vec3 rcol = vec3(1.0);\n\n            if (rmat>0.0) {\n                vec3 rpos = pos + rmat*rr;\n                vec3 rnor = calcNormal(rpos);\n                int rmatIndex = int(rres.y);\n\n                rcol *= lamb(rpos, rnor, light);\n                rcol *= getMat(rmatIndex, rres.zw);\n            } else {\n                rcol *= skyCol(rr,light);\n            }\n\n            if (matIndex == WATER_TEX) col *= rcol;\n            else if (matIndex == BRICK_TEX) col = (col*7.0 + rcol) / 8.0;\n        }\n    } else {\n        col = skyCol(rd,light);\n    }\n    col *= vec3(1.1,1.0,1.2); //grading\n    vec2 uv = (fragCoord.xy - 0.5*iResolution.xy) / iResolution.xy;\n    vec3 rc3 = vec3(uv.x, uv.y+0.3, 1.0) * mat3(1.0,0.0,0.0,0.0,1.0,0.0,0.0,1.35,1.0);\n    vec2 rc = vec2(rc3.x/rc3.z*3.0,rc3.y/rc3.z/50.0+iTime);\n    float rain = clamp(texture(iChannel3,rc,1.0).x - 0.8, 0.0,1.0);\n    col += 0.8*vec3(rain);\n    float vignette = dot(uv,uv);\n    fragColor = mix(vec4(col,1.0),vec4(0.0,0.0,0.0,1.0),vignette);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pos = fragCoord.xy / iResolution.xy;\n    float ring = 0.0;\n    for (float i=0.0; i<1.0; i+=0.01) {\n        float seed = floor((iTime-i)/0.01);\n        vec2 point = vec2(rand(vec2(seed, 0.5)), rand(vec2(0.5, seed)));\n        float d = distance(pos, point);\n        float r1 = abs(d-i/5.0);\n        float r2 = abs(d+0.02-i/5.0);\n        if (r1 < 0.007) ring += 4.0*(0.007-r1)*pow(1.0-i,2.0);\n        if (r2 < 0.007) ring += 12.0*(0.007-r2)*pow(1.0-i,2.0);\n    }\n    fragColor = vec4(vec3(ring),1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// Sequencer code modified from \"Music - Pirates\" by Inigo Quilez\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n//----------------------------------------------------------------------------------------\n\n#define PI  3.14159265359\n#define PI2 6.28318530718\n\n// main instrument\nfloat music_box (float freq, float time)\n{\n    float y = 0.0;\n    y += 0.55*sin(1.0*PI2*freq*time)*exp(-2.0*time);\n    y += 0.08*sin(5.3*PI2*freq*time)*exp(-3.3*time);\n    y += 0.03*sin(12.7*PI2*freq*time)*exp(-5.2*time);\n    y += 0.01*sin(22.5*PI2*freq*time)*exp(-7.0*time);\n    y += 0.003*sin(33.5*PI2*freq*time)*exp(-10.0*time);\n\treturn y;\t\n}\n\nvec2 rain (float time) //Thanks to Dave_Hoskins for the idea to use mipmapping for sound filtering\n{\n    vec2 pos = vec2(time * 4.0 * PI, time * 17.0);\n    vec2 hi = (texture(iChannel0, pos, -20.0).xy);\n    vec2 lo = (texture(iChannel0, pos, -7.2).xy);\n    vec2 wind = (0.04*sin(time/PI2) + 0.07*sin(time) + 0.04*sin(PI*time) + 0.3) * texture(iChannel1, pos, -12.0).xy;\n    return 3.0*(hi-lo) + 0.8*wind;\n}\n\n//----------------------------------------------------------------------------------------\n  #define D(a) x=(t>float(a))?t-float(a):x;\n//----------------------------------------------------------------------------------------\n\nfloat notes (float t)\n{\n  float x = 0.0;\n  float y = 0.0;\n  t = mod(t-2000.0,90000.0);\n\n  // Ab3\n  x = 0.0;\n  D(23850) D(27010) D(36700)\n  y += music_box( 208.0, x/1000.0 );\n\n  // Bb3\n  x = 0.0;\n  D(29995)\n  y += music_box( 233.0, x/1000.0 );\n\n  // Db4\n  x = 0.0;\n  D(37995)\n  y += music_box( 277.0, x/1000.0 );\n\n  // Eb4\n  x = 0.0;\n  D(20980) D(33000) D(35502)\n  y += music_box( 311.0, x/1000.0 );\n\n  // F4\n  x = 0.0;\n  D(  850) D( 6880) D(37990) D(43950)\n  y += music_box( 349.0, x/1000.0 );\n\n  // Gb4\n  x = 0.0;\n  D(21020) D(23930) D(26995) D(35495) D(36695) D(42595)\n  y += music_box( 370.0, x/1000.0 );\n    \n  // G4\n  x = 0.0;\n  D( 6980) D(34200) D(41895)\n  y += music_box( 391.0, x/1000.0 );\n  \n  // Ab4\n  x = 0.0;\n  D(41195)\n  y += music_box( 415.0, x/1000.0);\n  \n  // A4\n  x = 0.0;\n  D( 4000) D( 9995) D(23980) D(29980) D(32990) D(40495) D(47095)\n  y += music_box( 440.0, x/1000.0 );\n\n  // Bb4\n  x = 0.0;\n  D(  990) D( 6990) D(12930) D(15950) D(35500) D(38000) D(42600) D(44040) D(50700)\n  y += music_box( 466.0, x/1000.0 );\n\n  // B4\n  x = 0.0;\n  D(26960) D(41900)\n  y += music_box( 494.0, x/1000.0 );\n  \n  // C5\n  x = 0.0;\n  D(24005) D(36705) D(41200)\n  y += music_box( 523.0, x/1000.0 );\n\n  // Db5\n  x = 0.0;\n  D(12960) D(15980) D(21040) D(22500) D(33030) D(35505) D(38004) D(40500)\n  y += music_box( 554.0, x/1000.0 );\n\n  // D5\n  x = 0.0;\n  D(30000)\n  y += music_box( 587.0, x/1000.0 );\n\n  // Eb5\n  x = 0.0;\n  D( 1000) D( 4005) D( 7000) D(10000) D(23000) D(37050) D(44090) D(47090) D(50800)\n  y += music_box( 622.0, x/1000.0 );\n  \n  // E5 (Fb5)\n  x = 0.0;\n  D(30005) D(36702) D(42607)\n  y += music_box( 659.0, x/1000.0 );\n\n  // F5\n  x = 0.0;\n  D( 3995) D(13000) D(21030) D(24000) D(28000) D(30800) D(33015) D(41907) D(47100)\n  y += music_box( 698.0, x/1000.0 );\n\n  // Gb5\n  x = 0.0;\n  D(15000) D(41207)\n  y += music_box( 740.0, x/1000.0 );\n\n  //G5\n  x = 0.0;\n  D(16000) D(40507) D(41903)\n  y += music_box( 784.0, x/1000.0 );\n  \n  //Ab5\n  x = 0.0;\n  D(17977) D(28650) D(42603)\n  y += music_box( 831.0, x/1000.0 );\n  \n  // A5\n  x = 0.0;\n  D(10010) D(40503)\n  y += music_box( 880.0, x/1000.0 );\n\n  // Bb5\n  x = 0.0;\n  D(17350) D(19810) D(29100) D(30800) D(32100) D(34800) D(41203)\n  y += music_box( 932.0, x/1000.0 );\n  \n  // B5\n  x = 0.0;\n  D(30009)\n  y += music_box( 988.0, x/1000.0 );\n\n  // C6\n  x = 0.0;\n  D(13005) D(16450) D(16900) D(17980) D(18820)\n  y += music_box(1046.0, x/1000.0 );\n  \n  // Db6\n  x = 0.0;\n  D( 9990) D(11860) D(18400) D(30400) D(33000)\n  y += music_box(1109.0, x/1000.0 );\n    \n  // D6\n  x = 0.0;\n  D(    0) D( 3000) D( 6100) D( 9000) D(43200) D(46100) D(49250)\n  y += music_box(1174.0, x/1000.0 );\n  \n  // E6\n  x = 0.0;\n  \n  y += music_box(1318.0, x/1000.0 );\n  \n  // F6\n  x = 0.0;\n  D( 1005) D( 7020) D(10000) D(10800) D(44100) D(50860)\n  y += music_box(1396.0, x/1000.0 );\n  \n  // Ab6\n  x = 0.0;\n  D(10400)\n  y += music_box(1661.0, x/1000.0 );\n  return y;\n}\n\nvec2 mainSound ( in int samp,float time)\n{\t\n    vec2 y = vec2(0.0);\n    y += vec2(0.5,0.5)*notes(time*1000.0);\n    y *= 0.4;\n    y += 0.1*rain(time);\n\treturn y;\n}","name":"Sound","description":"","type":"sound"}]}