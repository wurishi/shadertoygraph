{"ver":"0.1","info":{"id":"XcVGRD","date":"1712491210","viewed":64,"name":"Screen Distance to UV Distance","username":"FatalSleep","description":"Had trouble converting a 1D distance from pixel/screen space to UV space. Math from Graphics Programming discord user \"criver.\" Uses 1/2 standard height of shadertoy 225 pixels to check that the distance converted to/from UV space is accurate.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["distances"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 225 is 1/2 standard Shadertoy output height (800 x 450).\n#define USER_DISTANCE 225.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 center = vec2(0.5, 0.5);\n    vec2 offset = center;\n    \n    // Convert Pixel distance to UV distance respective of resolution.\n    vec2 d = normalize((center * iResolution.xy) - iMouse.xy);\n    vec2 dxy = iResolution.xy * d;\n    float t = USER_DISTANCE / length(dxy);\n    vec2 circle = center + (t * d);\n    // \"circle,\" here is in UV space (yellow circle).\n    //////////////////////////////////////////////////////////////////\n    \n    vec4 outcolor = vec4(0.0, 0.0, 0.0, 0.0);\n    \n    // Output Target Radius (red).\n    if (length(fragCoord.xy - (center * iResolution.xy)) <= USER_DISTANCE+1.0\n    && length(fragCoord.xy - (center * iResolution.xy)) >= USER_DISTANCE-1.0)\n        outcolor = vec4(1.0, 0.0, 0.0, 1.0);\n    // Output Center circle (aqua).\n    if (length(fragCoord.xy - (center * iResolution.xy)) < 16.0) outcolor = vec4(0.0, 1.0, 1.0, 1.0);\n    \n    // Output Offset circle (yellow)--this is the standard scaled circle.\n    if (length(fragCoord.xy - (circle * iResolution.xy)) < 16.0) outcolor = vec4(1.0, 1.0, 0.0, 0.0);\n    fragColor = outcolor;\n}","name":"Image","description":"","type":"image"}]}