{"ver":"0.1","info":{"id":"ctdBzH","date":"1700952835","viewed":43,"name":"Simple 2D Shadow","username":"QDestTM","description":"Use mouse for moving light source.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["light","shadows"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define time iTime / 2.0\n\nconst vec2 center = vec2(0.0);\n\nconst float samples = 180.0; // Sampling steps\nconst float brightness = 5.0; // Light source brightness\n\nconst float l = -0.1; // Rect left margin ( -0.5 to 0.0 )\nconst float b = -0.1; // Rect bottom margin ( -0.5 to 0.0 )\nconst float r = 0.4; // Rect right margin ( 0.0 to 0.5 )\nconst float t = 0.4; // Rect top margin ( 0.0 to 0.5 )\n\n\nfloat light(float d) {\n    return 0.01 / d * brightness;\n}\n\nfloat rect(vec2 uv) {\n    return   step(l, uv.x)\n           * step(b, uv.y)\n           * step(r, 0.5 - uv.x)\n           * step(t, 0.5 - uv.y);    \n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 guv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y; // Global uv\n    vec2 muv; // Mouse uv\n    \n    // Demo animation\n    if (iMouse.xy == center) {\n        muv = center + vec2( sin(time) / 2.0, cos(time) / 2.0 );\n    } else {\n        muv = (iMouse.xy - 0.5 * iResolution.xy) / iResolution.y;\n    }\n    \n    // Distances\n    float dl = distance(muv, guv); // Distance from mouse to current pos\n\n    // Shapes\n    float rectangle = rect(guv);\n    float lightsrc = light(dl);\n    \n    // Shadow processing\n    float shadow = 1.0;    \n    float istep = 1.0 / samples;\n    \n    vec2 ruv; float rct, lgt, dp; // For shadows: uv, rect, light and distance\n    \n    for ( float i = 0.0; i <= 1.0; i += istep ) {\n        ruv = mix(guv, muv, i);\n        dp = distance(muv, ruv);\n           \n        lgt = 1.0 - min( light(dp), 1.0 );\n        rct = rect(ruv) * lgt;\n        \n        shadow -= rct; i += rct;\n    }\n    \n    \n    // Color processing\n    vec4 color = vec4(0.0);\n    \n    color += rectangle;\n    color += lightsrc * shadow;\n\n    // Output to screen\n    fragColor = color;\n}","name":"Image","description":"","type":"image"}]}