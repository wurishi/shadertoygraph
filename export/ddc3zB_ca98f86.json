{"ver":"0.1","info":{"id":"ddc3zB","date":"1677454902","viewed":223,"name":"Spirals of Eternia","username":"Hyeve","description":"Fully new HSV colour mapping, with shifting on hue and saturation by brightness, plus celshading, all fully configurable on a per-object basis. Originally designed with pixel art shaders in mind, it looks great at high res too.","likes":17,"published":1,"flags":32,"usePreview":0,"tags":["3d","raymarching","transparency","glass","crystal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//See the common tab for fps control.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define pi 3.1415926535\n#define DTR 0.01745329\n#define ang(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define vmin(a, b) (a.x < b.x ? a : b)\n#define decim(a, b) (floor((a)*(b))/(b))\n\nvec2 uv=vec2(0);\nvec3 cp,cn,cr,ss,oc,gl=vec3(0),vb,ro,rd,so,ld,no,on,lp;\nvec4 fc=vec4(0),cc=vec4(0),vs,hs,sp;\nfloat tt,cd,sd,md,io,oa,td=0.,li;\nint sk,sc;\n\n//3D Shapes\nfloat bx(vec3 p,vec3 s){vec3 q=abs(p)-s;return min(max(q.x,max(q.y,q.z)),0.)+length(max(q,0.));}\n\n//Maths\nfloat h11 (float a){return fract(sin((a)*12.9898)*43758.5453123);}\nvec3 rot(vec3 a, vec3 r){a.zy*=ang(r.x);a.xz*=ang(r.y);a.yx*=ang(r.z);return a;}\nfloat sharp(float inp, float sca){return 1.-pow(1.-pow(inp,sca),sca*2.);}\nvec3 thsv(vec3 c){vec4 K=vec4(0.,-1./3.,2./3.,-1.),p=mix(vec4(c.bg,K.wz),vec4(c.gb,K.xy),step(c.b,c.g)),\nq=mix(vec4(p.xyw,c.r),vec4(c.r,p.yzx),step(p.x,c.r));float d=q.x-min(q.w,q.y);\nreturn vec3(abs(q.z+(q.w-q.y)/(6.*d)),d/(q.x),q.x);}\nvec3 trgb(vec3 c){vec4 K=vec4(1.,2./3.,1./3.,3.);vec3 p=abs(fract(c.xxx+K.xyz)*6.-K.www);\nreturn c.z*mix(K.xxx,clamp(p-K.xxx,0.,1.),c.y);}\n\n//SDF Maths\nfloat smin(float a, float b, float k){float h=clamp(0.5+0.5*(b-a)/k,0.,1.);return mix(b,a,h)-k*h*(1.-h);}\n\nfloat shatter(vec3 p, float d, vec4 t)\n{\n\tfor(float i=0.;i<t.x;i++)\n\t{\n    p=rot(p,vec3(t.y+i,t.y*0.5+i,t.y+t.y-i));\n\t\tfloat c=mod(i,3.)==0.?p.x:mod(i,3.)==1.?p.y:p.z;\n\t\tc=abs(c-t.w)-t.z;d=smin(d,-c,-0.1);\n\t}\n\treturn d; \n}\n\n\nfloat mp(vec3 p)\n{\t\t\n    vec3 pp = p;\n  \n    p=rot(p,vec3(tt*0.1));\n  \n    float sw = sharp(cos(tt*1.5)*0.5+0.5,8.);\n  \n    float base = length(p)-5.-(sin(tt)+2.);\n    base = mix(base, bx(p,vec3(5)), sw);\n  \n    sd = abs(base)-(sin(tt*0.5)*0.4+0.5);\n  \n    sd = shatter(p, sd, vec4(6,tt*0.15,cos(tt)*0.48+0.5,0.));\n  \n    float inner = mix(length(p) - 3.-(sin(tt)+2.), bx(p,vec3(2.5))-0.5, sw);\n  \n    sd = min(sd, inner);\n \n    p = pp;\n    \n    float rezd = 50.;\n    \n    float zid = floor((p.z+rezd*0.5)/rezd);\n    \n    \n    float r = length(p.xy);\n    float a = atan(p.x,p.y)+tt*0.2;\n    \n    float count = 20.;\n    float num = 6.282 / count;\n    \n    float cell = mod(floor(a / num + num*0.5) + count*0.5, count);\n    \n    a = mod(a+num*0.5, num)-num*0.5;\n    \n    vec2 pos = vec2(sin(a), cos(a)) * r;\n    \n    p.xy = pos;\n   \n    p.z += cell*4.+cos(h11(cell)*3.14+tt);\n\n  \n\n    p.z = mod(p.z + rezd*0.5 - tt*3., rezd) - rezd*0.5;\n\n    float omix = cos(h11(cell)*30.+tt*0.3)*0.5+0.5;\n\n    float outer = length(p-vec3(1.8,35.+sin(h11(cell)*3.14+tt*0.5)*3.,0.)) - 1.9 - (sin(h11(cell)*3.14+tt)*0.5+1.);\n    float outer2 =  bx(p-vec3(1.8,35.+sin(h11(cell)*3.14+tt*0.5)*3.,0.), vec3(1.8)) - (sin(h11(cell)*3.14+tt)*0.5+1.);\n    outer = mix(outer, outer2, omix);\n\n    sd = min(sd, outer);\n  \n  \n    gl += exp(-sd * 0.1) * 5e-4;\n  \n    sd = abs(sd) - 0.001;\n  \n\t\tif(sd<0.05)\n\t\t{\t\n      no = vec3(0,0,0);\n\t\t\tio=1.8;\n\t\t\toc=mix(vec3(1.,0.7,0.9), vec3(1.,0.9,0.7), outer<sd+0.06?omix:sw);\n\t\t\toa=inner<sd+0.06?1.:pow(length(pp.xy*0.13),5.);\n\t\t\tss=vec3(0);\n      sp=vec4(0.1,5.,0.,0.3);\n      lp = vec3(0,5,-20);\n      sk = 1;\n      vs = vec4(0.5,1.,0.6, 0);\n      hs = vec4(2.,0.8,1.3,0.8);\n\t\t}\n    \n    vs.w = mix(8.,16.,cos(tt*0.3)*0.5+0.5);\n    \n\t\treturn sd;\n}\n\nvoid nm(){mat3 k=mat3(cp,cp,cp)-mat3(.001);cn=on=normalize(mp(cp)-vec3(mp(k[0]),mp(k[1]),mp(k[2])));cn=rot(cn,no);cn=dot(cn,-rd)>0.?cn:reflect(cn,rd);}\n  \n  \nvoid tr(vec4 i){for(li=cd=0.,md=64.;li+cd<i.x;li++,td+=sd*i.w){cd+=mp(cp=ro+on*i.y+(i.w>0.?rd:-ld)*cd)*i.z;if(sd<md&&cd<128.)md=sd;if(sd<(i.w>0.?1e-4:1e-2))break;}md/=.5;cp-=rd*.005;nm();}\nvoid tr(vec3 o, vec3 d){for(li=cd=0.;li<12.;li++){cd+=mp(o+d*cd);if(cd<1e-3||cd>32.)break;}}  \n \nvec3 tone(vec4 b, float d){\n  vec3 r=thsv(b.rgb);\n  r.z=decim(pow(max(b.w*r.z+vs.z,0.),vs.x)*vs.y-d,vs.w);\n  r.x+=pow(1.-min(r.z*0.5,1.),hs.x)*hs.y*(r.x>.19&&r.x<.69?1.:-1.);\n  r.y+=pow(1.-min(r.z*0.5,1.),hs.z)*hs.w;r.y*=2.-r.z;\n  return trgb(r);\n}\n\nvoid px(vec3 rd)\n{\n  vec3 bg=cc.rgb=decim(vec3(0.5,0.6,1.)+pow(length(uv),3.)*0.5,vs.w);\n\tif(cd<128.){cc.a=oa;ld=normalize(cp-lp);\n\tfloat df=max(dot(cn,-ld),0.),ps=pow(max(1.-length(cross(rd+ld,cn)),0.),sp.y)*sp.x,\n\tfo=exp(-pow(0.01*td,5.)),ao=0.,\n\tfr=max(pow(1.-abs(dot(rd,-cn)),3.),1e-4);vec3 sc=oc;float sh=0.;\n  if(sp.w>0.){tr(cp+on*0.005,on);ao=(1.-pow(clamp(cd/24.,0.,1.),0.1))*sp.w;}\n  if(sp.z>0.){tr(vec4(256,0.5,0.4,0));sh=max(pow(1.-clamp(md,0.,1.),1.5),0.)*sp.z;}\n\n    \n\n  \n  cc.rgb=tone(vec4(sc+(fr*mix(cc.rgb,oc,0.))+ss,df+(ps*max(1.-sh,0.))+fr*0.5),sh+ao);\n  cc.rgb=mix(bg,cc.rgb,fo);\n  \n    \n     \n    }else {cc.a=1.;}cc.rgb+=gl;\n\tcc.rgb*=max(max(cc.r,max(cc.g,cc.b)),1.);\n}\n\nvoid render(vec2 frag, vec2 res, float time, out vec4 col)\n{\n  uv=vec2(frag.x/res.x,frag.y/res.y);\n  uv-=0.5;uv/=vec2(res.y/res.x,1);\n\ttt=mod(time, 100.);\n  \n  ro=vec3(0,0,-20);\n  rd = normalize(vec3(uv, 1));\n  \n\tfor(int i=0;i<12;i++)\n  {\n\t\ttr(vec4(256,0,1,1));ro=cp-cn*(io<0.?-0.01:0.01);\n\t\tcr=refract(rd,cn,i%2==0?1./io:io);\n    if(io<0.)cr=reflect(rd,cn);px(rd);\n\t\tif(length(cr)!=0.)rd=cr;\n\t\tif(sc<1) fc=fc+vec4(cc.rgb*cc.a,cc.a)*(1.-fc.a);\n\t\tif(fc.a>=1.)break;sc=sc==0?io<0.?0:sk:sc-1;\n  }\n  col=fc/fc.a;\n\t\n\tcol *= 1.-pow(length(uv), 5.)*0.5;\n\tcol = pow(col,vec4(0.9));\n\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(mod(float(iFrame), 60./FPS) < 1. || iFrame < 5) render(fragCoord.xy,iResolution.xy,iTime,fragColor);\n    else fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"//fps control for performance. Assumes the refresh rate of your monitor is 60hz\n//(120hz monitor set to 30 here will actually run at 60fps)\n#define FPS 60.","name":"Common","description":"","type":"common"}]}