{"ver":"0.1","info":{"id":"fdBBzc","date":"1646738689","viewed":146,"name":"Mirror Repeat","username":"KrankerApfel","description":"try to reproduce GL_MIRROR_REPEAT","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["mirrortextureclamp"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* Author : Tom \"KrankerApfel\" .R\n   \n   I reproduce GL_MIRROR_REPEAT texture clamp behaviour, i.e. \n   if the normalized pixel coordinate is outside [0,1], everything is\n   mirrored.\n\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    // just to show uv outside [0,1] \n    uv*=5.;\n    // texture isn't mirrored if uv.x and uv.y are both even number.\n    vec2 noMirror = step(   vec2(0.1), \n                             vec2( mod(floor(uv.x),2.), mod(floor(uv.y),2.)) \n                            ); \n                            \n    uv = mix( 1.-uv,uv,noMirror);\n    vec4 tex = texture(iChannel0, uv);\n\n    // Output to screen\n    fragColor = tex;\n}","name":"Image","description":"","type":"image"}]}