{"ver":"0.1","info":{"id":"tdffRS","date":"1588476834","viewed":205,"name":"Simple sphere field","username":"dust","description":"teeny sphere repetition example shader","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["procedural","raymarching","sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 rDir(vec2 pixPos,\n          vec2 viewSizes)\n{\n    vec3 dir = vec3(pixPos - (viewSizes * 0.5),\n                \tviewSizes.y / tan(1.62 * 0.5));\n    return normalize(dir);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //float zOffs = sin(iTime * 1.5f)\n    vec3 ro = vec3(0.0f, 0.0f, -10.5f);\n    vec3 rd = rDir(fragCoord,\n                   iResolution.xy);\n    float eps = 0.0001f;\n    const float maxDist = 16.0f;\n    float t = 1.0f;\n    float dt = 0.0f;\n    vec3 rgb = vec3(0.25f);\n    float stepCtr = 0.0f; // Iteration counter for benchmarking\n    float frq = 2.0f; // Sphere origins every four units\n    float spacing = frq * 0.5f; // Two-unit spacing between spheres\n    t = 0.0f;\n    while (stepCtr < 64.0f)\n    {\n    \tvec3 p = ro + rd * t;       \n    \tp = mod(p, vec3(frq)) - vec3(spacing);\n    \tdt = length(p - vec3(0,0,0)) - 0.5f;\n    \tif (dt < eps)\n    \t{\n    \t    rgb = vec3(stepCtr * 0.0025f) * (stepCtr * 0.1f);\n    \t    rgb = vec3(1.0) - rgb;\n    \t\tbreak; \n    \t}\n    \telse\n    \t{ t += dt; }\n    \tstepCtr += 1.0f;\n    }\n    // Output to screen\n    fragColor = vec4(rgb,1.0);\n}","name":"Image","description":"","type":"image"}]}