{"ver":"0.1","info":{"id":"mlf3RX","date":"1672132479","viewed":74,"name":"Simple_FBM_Drawer","username":"jynwang","description":"referenced from @Envy24","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SCALE (6.)\n#define UNIT (0.005 * SCALE)\n#define SMAA(d)     ( smoothstep(UNIT, 0., d) )\n#define SPEED 1.\n\nfloat fbm( in float x, in float H )\n{    \n    float G = exp2(-H);\n    float f = 1.0;\n    float a = 1.0;\n    float t = 0.0;\n    for( int i = 0; i < 4; i++ )\n    {\n        t += a*sin(f*x);\n        f *= 2.;\n        a *= G;\n    }\n    return t;\n}\n\nfloat f(float x) { return fbm(x, .5); }\n\nfloat dfdx(float x) { return (f(x+UNIT) - f(x)) / UNIT; }\n\nfloat saturate(float x) {\n\n   return x < 0. ? 0. : min(x, 1.);\n}\n\nfloat SMAA_RAW(float x) {\n\n   float a = UNIT;\n   float b = 0.;\n   float t = saturate((x - a) / (b - a));\n   return 3. * t * t - 2. * t * t * t;\n\n}\n\n\nfloat vertical_line(vec2 uv, float x0) { return SMAA_RAW(abs(uv.x-x0)); }\nfloat horizontal_line(vec2 uv, float y0) { return SMAA_RAW(abs(uv.y-y0)); }\n\n\n\nfloat draw_explicit_func(vec2 uv, float fx, float dfdx)\n{\n    float sdf = uv.y - fx, dsdx = sqrt(1.0 + dfdx * dfdx); \n    return SMAA_RAW(abs(sdf) / dsdx );\n                           \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord.xy / iResolution.xy * SCALE;\n    vec2 center = iMouse.xy / iResolution.xy * SCALE;\n    \n    vec3 color = vec3(1);\n    \n    // draw line\n    color = mix(color, vec3(0), vertical_line(uv, center.x));\n    color = mix(color, vec3(0), horizontal_line(uv, center.y));\n    \n    // draw func\n    uv.x += iTime * SPEED;\n    color = mix(color, vec3(1,0,0), draw_explicit_func(uv - center, f(uv.x - center.x), dfdx(uv.x - center.x)));\n    \n    fragColor = vec4(color, 1);\n}","name":"Image","description":"","type":"image"}]}