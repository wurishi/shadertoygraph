{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"cubemap","id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"#define PI\t3.14159265359\n#define PIH\t(PI/2.0)\n#define PI2\t(PI*2.0)\n\nvec3 target;\nvec3 forward = vec3(0.0, 0.0, -1.0);\n\nvec4 quaternion(vec3 p, float a)\n{\n\treturn vec4(p*sin(a/2.0),cos(a/2.0));\n}\n\nvec3 qtransform(vec4 q, vec3 v)\n{\n\treturn v+2.0*cross(cross(v,q.xyz)-q.w*v,q.xyz);\n}\n\nvec3 hsv(float h, float s, float v)\n{\n  return mix(vec3(1.0),clamp((abs(fract(\n    h+vec3(3.0, 2.0, 1.0)/3.0)*6.0-3.0)-1.0), 0.0, 1.0),s)*v;\n}\n\nvec3 course(float a)\n{\n\treturn vec3(\n\t\tcos(a),\n\t\tsin(2.0*a),\n\t\t0.15*sin(a)\n\t);\n}\n\nfloat udBox(vec3 p, vec3 b)\n{\n\treturn length(max(abs(p)-b, 0.0));\n}\n\nfloat de(vec3 p)\n{\t\n\tconst int steps = 100;\n\tvec3 range = vec3(1.0, 1.0, 0.15);\n\tfloat radius = 0.03;\n\tfloat o = 0.05;\n\trange += radius;\n\tif (abs(p.x) > range.x){return udBox(p, range-o);}\n\tif (abs(p.y) > range.y){return udBox(p, range-o);}\n\tif (abs(p.z) > range.z){return udBox(p, range-o);}\n\tfloat d = length(p);\n\tfor (int i=0; i < steps; i++)\n\t{\n\t\tfloat a = float(i)*PI2/float(steps);\n\t\tvec3 b = course(a)-p;\n        d = min(d, dot(b, b));\n\t}\n\td = sqrt(d);\n\treturn d-radius;\n}\t\n\nfloat de2(vec3 p)\n{\n\tp -= target;\n\tvec4 q = quaternion(forward, iTime);\n\tp = qtransform(q, p);\n\treturn udBox(p, vec3(0.05));\n}\n\nvec2 map(vec3 p)\n{\n\tfloat d0 = de(p);\n\tfloat d1 = de2(p);\n\tfloat c = 0.0;\n\tif (d0 < d1){c = 1.0;}\n\tfloat d = min(d0, d1);\n\treturn vec2(d, c);\n}\n\nvec3 calcNormal(vec3 p)\n{\t\n\tvec3 eps = vec3(0.0001, 0.0, 0.0);\n\tvec3 nor = vec3(\n\t\tmap(p+eps.xyy).x-map(p-eps.xyy).x,\n\t\tmap(p+eps.yxy).x-map(p-eps.yxy).x,\n\t\tmap(p+eps.yyx).x-map(p-eps.yyx).x\n\t);\n\treturn normalize(nor);    \n}\n\nvec3 render(vec3 ro, vec3 rd)\n{\n\tfloat t = 0.0;\n\tvec2 d;\n\tvec3 p = ro;\n\tfor(int i = 0; i < 64; ++i)\n\t{\n\t\td = map(p);\n\t\tt += d.x;\n\t\tp = ro+t*rd;\n\t}\n\tif(abs(d.x) < 0.001)\n\t{\n\t\tvec3 col = vec3(0.6, 0.8, 0.5);\n\t\tif (d.y < 1.0){col = hsv(0.1*iTime, 1.0, 1.0);}\n\t\tvec3 nor = calcNormal(p);\n\t\tvec3 l =normalize(-forward);\n\t\tfloat c = dot(l, nor);\n\t\treturn c*col;\n\t}else{\n\t\treturn texture(iChannel0, p.xzy).rgb;\n\t}\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat time = -0.3*iTime;\n\tvec2 p = (fragCoord.xy*2.0-iResolution.xy)/iResolution.y;\n\tvec3 rd = normalize(vec3(p, -1.5));\n\tvec3 ro = course(time);\n\tro.z += 0.15;\n\ttarget = course(time-0.3);\n\ttarget.z += 0.1;\n\tvec3 diff = normalize(target-ro);\n\tvec3 axis = cross(forward, diff);\n\tfloat angle = acos(dot(forward, diff));\n\tvec4 q = quaternion(axis, angle);\n\trd = qtransform(q, rd);\n\tforward = qtransform(q, forward);\n\tq = quaternion(forward, atan(axis.x, axis.y)-PIH);\n\trd = qtransform(q, rd);\n\tfragColor=vec4(render(ro, rd), 1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MdB3zV","date":"1390917039","viewed":592,"name":"Run away Box","username":"gaz","description":"3d","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching"],"hasliked":0,"parentid":"","parentname":""}}