{"ver":"0.1","info":{"id":"msscR2","date":"1687368261","viewed":108,"name":"Squircle - Dist approx","username":"Poisson","description":"A complicated way to approximate squircle distance by using polar coordinates and trigonometry","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["2d","distancefield","math","sdf","sin","circle","approximation","cos","square","distance","trig","squircle","trigonometry","maths","tan"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// squircle sdf function\n// r is the size\n// n is power\n\n/* Derivation:\n\nEquation of a squircle:\n\nx^n + y^n = R^n\n\nConvert to polar:\n\nx = r*cos(θ)\ny = r*sin(θ)\n\n(r*cos(θ))^n + (r*sin(θ))^n = R^n\nr^n * (cos(θ)^n + sin(θ)^n) = R^n\n\n               R^n\nr^n = ---------------------\n       cos(θ)^n + sin(θ)^n\n       \n                 R\nr = -----------------------------\n     sqrt^n(cos(θ)^n + sin(θ)^n)\n\nNow, we have the polar equation of a squircle\nLet's convert it in parametric\n\np(t) = (r*sin(t), r*cos(t))\n\nWe can finally compute the distance form the point p to the squircle:\n\n                 R\nr = -----------------------------\n     sqrt^n(cos(t)^n + sin(t)^n)\n     \nq = r*(sin(t), cos(t))\nd = length(p - q)\n\nBut what is t?\nt is the angle of the vector from the origin to p\nso :\nt = atan(p.x/p.y)\n\nWith this, we can simplify the point q:\n\nq = (sin(atan(p.x/p.y), cos(atan(p.x/p.y)))\n\nsin(atan(x)) = x/sqrt(1+x^2)\ncos(atan(x)) = 1/sqrt(1+x^2)\n\nx = p.x/p.y\nq = (x/sqrt(1+x^2), 1/sqrt(x^2))\n\nThis simplify to:\n\nx = p.x/p.y\nh = 1/sqrt(1+x^2)\n                 R\nr = ----------------------\n     sqrt^n(h^n + (xh)^n)\n     \nq = r*(x*h, h)\nd = length(p - q)\n\nThis simplify again to:\n\nx = p.x/p.y\nh = 1/sqrt(1+x^2)\n               1\nr = ----------------------\n     sqrt^n(h^n + (xh)^n)\n\n///////////////////////////////////////\n//                                   //\n// d = r*(sqrt^n(p.x^n + p.y^n) - R) //\n//                                   //\n///////////////////////////////////////\n\n*/\n\nfloat sdSquircle(vec2 p, float r, float n) {\n    p = abs(p);\n    float x = p.x/p.y; // tangent of the angle\n    float h = 1./sqrt(1.+x*x); // cos of the angle\n    float k = 1./pow(pow(h*x,n) + pow(h,n), 1./n); // squircle polar function\n\n    return k*(pow(pow(p.x,n) + pow(p.y,n), 1./n) - r);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.*fragCoord - iResolution.xy) / iResolution.y;\n    vec2 m = (2.*iMouse.xy - iResolution.xy) / iResolution.y;\n    \n    float r = .75;\n    float n = 3.+1.5*cos(2.*iTime);\n\tfloat d = sdSquircle(p, r, n);\n    \n\t// coloring\n    vec3 col = (d>0.) ? vec3(.9,.6,.3) : vec3(.55,.85,1);\n    col *= 1.-exp(-8.*abs(d));\n\tcol *= .8 + .2*cos(125.*d);\n\tcol = mix(col, vec3(1), smoothstep(.01,0.,abs(d)));\n\n    if (iMouse.z>0.) {\n        d = sdSquircle(m, r, n);\n        col = mix(col, vec3(1,1,0), smoothstep(.01,0., abs(length(p-m)-abs(d))-.0025));\n        col = mix(col, vec3(1,1,0), smoothstep(.01,0., length(p-m)-.015));\n    }\n    \n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}