{"ver":"0.1","info":{"id":"tl3BWS","date":"1613339061","viewed":44,"name":"Soap Film Simulation","username":"mherreshoff","description":"Soup film simulation (colors are realistic, pattern of motion is not.)","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["simulation","film","soap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    vec2 R = iResolution.xy, uv = U/R;\n    \n    float thickness = 1000.*texture(iChannel0, uv).x;\n    O = soapBubbleColor(thickness, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI 3.14159\n\n#define hash33(p) fract(sin( (p) * mat3( 127.1,311.7,74.7 , 269.5,183.3,246.1 , 113.5,271.9,124.6) ) *43758.5453123)\n\nvec3 smoothNoise (vec3 v) {\n  vec3 lo = floor(v);\n  vec2 o = vec2(0, 1);\n  vec3 f = mod(v, 1.0);\n  //f = f * f * (3.0 - 2.0 * f);\n#define F(sw) hash33(floor(lo + o.sw + 0.5))\n  vec3 lower = mix(mix(F(xxx), F(yxx), f.x), mix(F(xyx), F(yyx), f.x), f.y);\n  vec3 upper = mix(mix(F(xxy), F(yxy), f.x), mix(F(xyy), F(yyy), f.x), f.y);\n  return mix(lower, upper, f.z);\n}\n\n#define OCTAVES 2\nvec3 fbm(vec3 v, float h) {\n  vec3 total = vec3(0.0);\n  float scale = 1.0, scaleStep = .75;\n  for (int i = 0; i < OCTAVES; i++) {\n    scale *= scaleStep;\n    total += smoothNoise(scale*v);\n  }\n  return total/float(OCTAVES);\n}\n\n\n// http://www.efg2.com/Lab/ScienceAndEngineering/Spectra.htm\nvec4 waveLengthToRGB(float Wavelength) {\n    float Gamma = .8;\n    float factor;\n    float Red, Green, Blue;\n\n    if((Wavelength >= 380.) && (Wavelength < 440.)) {\n        Red = -(Wavelength - 440.) / (440. - 380.);\n        Green = 0.0;\n        Blue = 1.0;\n    } else if((Wavelength >= 440.) && (Wavelength < 490.)) {\n        Red = 0.0;\n        Green = (Wavelength - 440.) / (490. - 440.);\n        Blue = 1.0;\n    } else if((Wavelength >= 490.) && (Wavelength < 510.)) {\n        Red = 0.0;\n        Green = 1.0;\n        Blue = -(Wavelength - 510.) / (510. - 490.);\n    } else if((Wavelength >= 510.) && (Wavelength < 580.)) {\n        Red = (Wavelength - 510.) / (580. - 510.);\n        Green = 1.0;\n        Blue = 0.0;\n    } else if((Wavelength >= 580.) && (Wavelength < 645.)) {\n        Red = 1.0;\n        Green = -(Wavelength - 645.) / (645. - 580.);\n        Blue = 0.0;\n    } else if((Wavelength >= 645.) && (Wavelength < 781.)) {\n        Red = 1.0;\n        Green = 0.0;\n        Blue = 0.0;\n    } else {\n        Red = 0.0;\n        Green = 0.0;\n        Blue = 0.0;\n    }\n\n    // Let the intensity fall off near the vision limits\n\n    if((Wavelength >= 380.) && (Wavelength < 420.)) {\n        factor = 0.3 + 0.7 * (Wavelength - 380.) / (420. - 380.);\n    } else if((Wavelength >= 420.) && (Wavelength < 701.)) {\n        factor = 1.0;\n    } else if((Wavelength >= 701.) && (Wavelength < 781.)) {\n        factor = 0.3 + 0.7 * (780. - Wavelength) / (780. - 700.);\n    } else {\n        factor = 0.0;\n    }\n\n\n    vec3 rgb = vec3(Red, Green, Blue) * factor;\n    return vec4(pow(rgb, vec3(Gamma)), factor);\n }\n \n \n\n// Formula from: https://soapbubble.dk/en/articles/thin-film-interference\nvec4 soapBubbleColor(float thickness, float cos_theta_t) {\n    float gamma = 2.0;\n    vec4 color = vec4(0);\n    #define N 10\n    #define MU 1.0\n    for (int i = 0; i <= N; i++) {\n        float lambda = 400.0+300.0*float(i)/float(N);\n        vec4 c = waveLengthToRGB(lambda);\n        color += pow(c, vec4(gamma))*abs(cos((2.*PI/lambda)*MU*thickness*cos_theta_t + .5*PI));\n    }\n    \n    color /= float(N);\n    color = pow(color, vec4(1./gamma));\n    return color;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    vec2 R = iResolution.xy, uv = U/R;\n    vec3 current1 = fbm(vec3(30.*uv, iTime*2.), 0.4)-.5;\n    vec3 current2 = fbm(vec3(30.*uv+vec2(1.,0), iTime*2.), 0.4)-.5;\n    vec3 current = mix(current2, current1, uv.x);\n    vec2 prevPos =  uv+.01*current.xy;\n    prevPos.y = clamp(prevPos.y, 0., 1.);\n    prevPos.x = mod(prevPos.x, 1.);\n    vec4 prev = texture(iChannel0, prevPos);\n    \n    if (iFrame < 10) O = vec4(1.-uv.y,0,0,0);\n    else O = vec4(mix(prev.x, 1.-uv.y, 0.01),0,0,0);\n}","name":"Buffer A","description":"","type":"buffer"}]}