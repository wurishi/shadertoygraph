{"ver":"0.1","info":{"id":"tsKyRd","date":"1603983284","viewed":332,"name":"CirlesInHexGrid","username":"Arseny","description":"Just fun","likes":16,"published":3,"flags":0,"usePreview":0,"tags":["procedural","2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 colorA = vec3(255., 252., 167.) / 255.;\nconst vec3 colorB = vec3(117., 252., 167.) / 255.;\nconst vec3 colorC = vec3(167., 247., 255.) / 255.;\n\nconst vec3 cols[3] = vec3[3](colorA, colorB, colorC);\n\n\n// https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 p)\n{\n    p += vec2(523.124, 244.155);\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat sDistToArc(vec2 uv, vec2 A, vec2 B, float d){ \n    vec2 v = B - A;\n    vec2 n = normalize(vec2(-v.y, v.x));\n    vec2 c = A + v / 2.;\n    float l = length(v) / 2.;\n    vec2 p;\n    p.x = dot(normalize(v), uv - c);\n    if (abs(d) < 1e-6){\n        return abs(p.x) > l ?\n            1e9\n            : dot(n, uv - c);\n    }\n    float h = (l * l) / 2. / d - d / 2.;\n    p.y = dot(n, uv - c) + h;\n    return (d * p.y < 0. || abs(p.x) > l) ?\n        1e9\n        : (length(p) - abs(h + d)) * sign(d);\n}\n\nfloat getD(vec2 id){\n    float d = 1./sqrt(3.) - .5,\n          k = 1.2;\n    \n#define get(op)  floor( hash12( vec2( hash12(id), op(iTime*k) ) ) * 2.)\n                 \n    return d * ( mix( get(floor), get(ceil), fract(iTime*k) ) * 2. - 1. );\n}\n\nfloat getDist(vec2 lv, vec2 A, vec2 B, vec2 id){\n    float s = sign((A - B).x + (A - B).y);\n    return sDistToArc(lv, A, B, getD(id + (A + B) / 2.) * s);\n}\n\nvec3 TriCoord(vec2 uv){\n    vec2 id;\n    const float sqrt3 = sqrt(3.);\n    vec2 v = normalize(vec2(3., sqrt3));\n    id.y = floor(uv.y / sqrt3 * 2.) * sqrt3 / 2. + sqrt3 / 4.;\n    id.x = floor(dot(uv, v) / sqrt3 * 2.) - id.y / sqrt3 + 0.5;\n    float h = sqrt3 / 6.;\n    vec2 lv = uv - id;\n    float d = sqrt(0.25 + h * h) - 0.5;\n    vec2 LC = vec2(-0.25, h / 2.);\n    vec2 RC = vec2(0.25, -h / 2.);\n    vec2 LLC = vec2(-0.75, -h / 2.);\n    vec2 RDC = vec2(0.25, -h / 2. - h * 2.);\n    vec2 RRC = vec2(0.75, h / 2.);\n    vec2 UC = vec2(-0.25, h / 2. + h * 2.);\n    float dd = abs(getDist(lv, RC, LC, id));\n    dd = min(dd, abs(getDist(lv, LC, LLC, id)));\n    dd = min(dd, abs(getDist(lv, RC, RDC, id)));\n    dd = min(dd, abs(getDist(lv, RRC, RC, id)));\n    dd = min(dd, abs(getDist(lv, UC, LC, id)));\n    dd *= 40.;\n    dd = min(dd, 1.);\n    if (getDist(lv, LC, RC, id) < 0. || getDist(lv, LLC, LC, id) < 0. || getDist(lv, RC, RDC, id) < 0.){\n        return cols[int(mod(id.x + mod(id.y, 2.), 3.))] * dd;\n    }\n    if (getDist(lv, RC, LC, id) < 0. || getDist(lv, RRC, RC, id) < 0. || getDist(lv, LC, UC, id) < 0.){\n        return cols[int(mod(id.x + mod(id.y, 2.) + 2., 3.))] * dd;\n    }\n    return cols[int(mod(id.x + mod(id.y, 2.) + 1., 3.))] * dd;\n    return vec3(dd * 20.);\n}\n\nvoid mainImage( out vec4 ans, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\t\n    ans.rgb = TriCoord(uv * 5.);\n}","name":"Image","description":"","type":"image"}]}