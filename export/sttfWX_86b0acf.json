{"ver":"0.1","info":{"id":"sttfWX","date":"1663753948","viewed":67,"name":"my_ray_marching","username":"VRLegendre","description":"学习raymarching建模","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define Max_steps 100\n#define Max_dist 100.\n#define Surf_dist 0.01\n\nfloat GetDist(vec3 p) { //p为光路步进过程的一个位置\n    vec4 s = vec4(0, 1, 6, 1);//定义球的位置\n    \n    float sphereDist = length(p - s.xyz) - s.w;\n    float planeDist = p.y;\n    \n    float d = min(sphereDist, planeDist);//地板距离和球距离 取最小值\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n     float d0 = 0.;\n     \n     for(int i=0;i<Max_steps;i++){\n         vec3 p = ro +rd*d0;\n         float ds = GetDist(p);\n         d0 += ds;\n         if(d0>Max_dist || ds<Surf_dist)break;//超过最远的步进距离，或者已经步进到足够进的点，返回。\n         \n     }\n     \n     return d0;\n}\n\nvec3 GetNormal(vec3 p){\n    float d = GetDist(p);\n    vec2 e = vec2(.01,0);\n    \n    vec3 n = d - vec3(\n            GetDist(p-e.xyy),\n            GetDist(p-e.yxy),\n            GetDist(p-e.yyx)\n            );  //微分近似求物体表面法线。\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p){//根据点p获得漫反射光\n    vec3 lightPos = vec3(0,5,6);\n    lightPos.xz += vec2(sin(iTime),cos(iTime));\n    \n    vec3 l = normalize(lightPos - p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n,l),0.0,1.);\n    \n    float d = RayMarch(p + n * Surf_dist, l);//计算是否在阴影中。 这里加入一个微小的法线方向位移。\n    if(d<length(lightPos - p)) dif *=0.1;\n    \n    return dif;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{//把屏幕uv从0 - 1，转移到-0.5 - 0.5？\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 1, 0);\n    vec3 rd = normalize(vec3(uv.x, uv.y,1));\n\n    float d=RayMarch(ro,rd);\n    \n    vec3 p = ro + rd * d;//p点为光线物体交点\n    \n    float diffuse = GetLight(p);\n    \n    \n    col = vec3(diffuse);\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}