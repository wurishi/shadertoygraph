{"ver":"0.1","info":{"id":"3dsfzl","date":"1588877492","viewed":407,"name":"Understanding Coordinates","username":"zktosu","description":"understand point, color, coordinates, relation between pixels and coloring etc.","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["vector","points","coordinate","relations"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord/iResolution.y; //[x,y] -> (0..1<, 0..1) 1:1 aspect ratio.\n    vec2 mv = iMouse.xy/iResolution.y;\n    \n   \n    vec3 col = vec3(uv.xy, 0.0); // (r, g , 0) - Color: Hor.-> red, Vert.-> green\n    \n    // Create a cirle as mouse pointer!\n    col = vec3(distance(uv, mv));\n\n    // float r1 = (uv.y - mv.y)* 5.0 * (1.0 + abs(sin(iTime))); // done!\n    // float g1 = (uv.x - mv.x)* 5.0 * (1.0 + abs(sin(iTime))); // done!\n    \n    vec2 c1 = (uv.yx - mv.yx)* 10.0 * (1.0 + abs(sin(iTime)) ); // abs(sin(iTime)) -> scaler! \n    \n    // imagine vectors as height information.\n    // using operation \t\t+ get higher, \n    // \t\t\t\twith\t- get lower.\n    // linear combinations makes black and white, on and off, etc.\n    // for instance:\n    col.xy = mod(c1,4.0) * 4.0; // multiply mod by 4 to get the brightness back!\n    // combinational operation!\n    col = (smoothstep(0.01, 0.09, col) - smoothstep(0.09, 0.17, col));\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}