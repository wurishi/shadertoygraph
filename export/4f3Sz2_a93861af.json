{"ver":"0.1","info":{"id":"4f3Sz2","date":"1714509607","viewed":55,"name":"SDF 2D CornerBox","username":"Fluffy35","description":"A 2D SDF of a Box with corners","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float SDF_2D_CornerBox(in vec2 uv, in vec2 p, in vec2 s, in vec2 c)\n{\n    uv = abs(uv-p);\n    \n    // Segment AB\n    vec2 a  = vec2(c.x*s.x,s.y);\n    vec2 b  = vec2(s.x,c.y*s.y);\n    vec2 ab = b-a;\n    vec2 at = uv-a;\n    \n    // Box\n    vec2 d  = uv-s;\n    \n    // H projection over AB of length l\n    float l = clamp(dot(ab,at)/dot(ab,ab),0.0,1.0);\n    vec2 h  = a+ab*l;\n    vec2 ht = uv-h;\n    \n    // Interior Corner Mask\n    float imask = length(ht)*max(sign(ht.x),sign(ht.y));\n    \n    // Exterior Corner Mask\n    float emask = step(s.x*c.x,uv.x)*step(s.y*c.y,uv.y);\n    \n    // HT => Minimum vector between the point h and UV\n    return max(min(0.0, imask), min(0.0, max(d.x,d.y)))                  // Interior\n         + max(0.0, imask*emask) + length(max(vec2(0.0),d*(1.0-emask))); // Exterior\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    // from IQ\n    vec2 uv = (2.0*fragCoord - iResolution.xy)/iResolution.y;\n    vec2 ra = 0.4 + 0.3*cos( iTime + vec2(0.0,1.57) + 0.0 );\n    // vec2 c  = ra;\n    \n    vec2 c = vec2(0.5, 0.5*iResolution.x/iResolution.y);\n\n    // SDF of a Diamond in a Box of size c\n    float d = SDF_2D_CornerBox(uv, vec2(0.), ra, c);\n    \n    // vec3 col = vec3(exp(-abs(d)*10.));\n    \n    // from IQ\n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-2.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(140.0*d);\n\tcol  = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.02,abs(d)) );\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}