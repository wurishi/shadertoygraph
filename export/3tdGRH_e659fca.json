{"ver":"0.1","info":{"id":"3tdGRH","date":"1655715391","viewed":94,"name":"Landscape Weird","username":"csblo","description":"landscape","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["raytracing","landscape"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 screenUV(vec2 uv)\n{\n    vec2 resizeUV = uv / iResolution.x;\n    return vec2(resizeUV.x - 0.5, resizeUV.y - (iResolution.y / iResolution.x * 0.5)); \n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = screenUV(fragCoord);\n    \n    \n    \n    vec3 ray = vec3(uv, 1.);\n    ray.x += iTime * 0.01;\n        \n    vec3 light = vec3(0.4, 0.4, 0.8);\n    \n    // plane\n    vec3 n = vec3(0., 1., 0.);\n    //vec3 p0 = vec3(0., 0., 0.3);\n    vec3 p0 = vec3(0., 0., 0.);\n    //compute line-plane intersection\n    float d = dot(p0, n) / dot(ray, n);\n    // get hit point\n    //vec3 p = ray * d;\n    \n    vec3 col = vec3(0);\n    \n    // check if intersect\n    if (dot(ray, n) < 0. /*&& p.z < 10.*/)\n    {\n        \n        /*\n        float h = texture(iChannel0, uv).r;\n        float hx = texture(iChannel0, vec2(uv.x + 0.1, uv.y)).r;\n        float hy = texture(iChannel0, vec2(uv.x, uv.y + 0.1)).r;\n        vec3 px = vec3(p.x - 0.1, hx, p.z - 0.1);\n        vec3 py = vec3(p.x + 0.1, hy, p.z + 0.1);\n        vec3 slopex = px - p;\n        vec3 slopey = py - p;\n        vec3 cnormal = normalize(cross(slopex, slopey));\n        */\n        vec3 fogp = vec3(texture(iChannel2, uv * 3.).r);\n        \n        for (float i = d; i < d + 200.; i+= 0.1)\n        {\n            vec3 a = ray * i;\n            // get h for x,z\n            //float h = textureLod(iChannel0, vec2(a.xz), 6.0).r * 1.;\n            \n            float h = textureLod(iChannel0, vec2(a.xz * 0.05), 1.0).x * 1.;\n            //h+=rand(a.xz) * 0.02;\n            \n            \n            if (a.y < -h)\n            {\n                \n                float hx = textureLod(iChannel0, vec2(a.x + 0.1, a.y), 1.).x;\n                float hy = textureLod(iChannel0, vec2(a.x, a.y + 0.1), 1.).x;\n                \n                //hx+=rand(a.xz) * 0.02;\n                //hy+=rand(a.xz) * 0.02;\n                \n                //h = floor(fract(h * 20.) * 10. );\n                //h = floor(h * 5.) / 5.;\n                \n                vec3 px = vec3(a.x - 0.1, h - hx, a.z - 0.1);\n                vec3 py = vec3(a.x + 0.1, h - hy, a.z + 0.1);\n                vec3 slopex = px - a;\n                vec3 slopey = py - a;\n                vec3 cnormal = normalize(cross(slopex, slopey));\n                \n                vec3 fog = vec3(a.z / 15.) * fogp;\n                \n                //col = vec3(textureLod(iChannel0, vec2(a.xz) + p0.xz, 1.)) /** dot(cnormal, -light) * 2.*/;\n                \n                col = vec3(1. - h) /*+ fog * 2.*/;\n                \n                col *= dot(cnormal, -light) * 2.;\n                \n                //col = vec3(h);\n                break;\n            }\n        }\n        \n        \n       \t//col = vec3(texture(iChannel1, vec2(p.x, p.z))) /** dot(cnormal, -light)*/;\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    uv = floor(uv * 2.) / 2.;\n    \n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    //col = floor(col * 30.) / 30.;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}