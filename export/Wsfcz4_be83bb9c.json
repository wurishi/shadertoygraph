{"ver":"0.1","info":{"id":"Wsfcz4","date":"1584217099","viewed":165,"name":"Birdfield","username":"stb","description":"Might as well post this here :)","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["2d","parallax","birds"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Birdfield aka \"tweetfield\"\n// originally posted to: http://glslsandbox.com/e#61022.0\n\nfloat s, c;\n#define rotate(p, a) mat2(c=cos(a), s=-sin(a), -s, c) * p\n#define rotateTo(p, a) mat2(c=a.y, s=a.x, -s, c) * p\n\n#define res iResolution.xy\n\n// hash without sine\n// https://www.shadertoy.com/view/4djSRW\n#define MOD3 vec3(.1031, .11369, .13787) // int range\n#define MOD4 vec4(.1031, .11369, .13787, .09987) // int range\nfloat hash11(float p) {\n\tvec3 p3  = fract(vec3(p) * MOD3);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\nvec4 hash42(vec2 p) {\n\tvec4 p4 = fract(vec4(p.xyxy) * MOD4);\n    p4 += dot(p4, p4.wzxy+19.19);\n\treturn fract(vec4((p4.x + p4.y)*p4.z, (p4.x + p4.z)*p4.y, (p4.y + p4.z)*p4.w, (p4.z + p4.w)*p4.x));\n}\n\nfloat ellipse(in vec2 p, float a, float r1, float r2) {\n    float f;\n    vec2 d = vec2(sin(a), cos(a));\n    float pl1 = dot(p, d);\n    float pl2 = dot(p, vec2(d.y, -d.x));\n    return sqrt(pl1*pl1/r1+pl2*pl2/r2);\n}\n\nvec2 bird(in vec2 p, float t) {\n    // initial transforms\n    float Y = p.y;\n    p.y -= 1.;\n    p *= 4.;\n    \n    // inits\n    float f = 1.;\n    vec3 o = vec3(-1., 0., 1.);\n    vec2 p2 = p + vec2(0., .4+.1*cos(5.4*t));\n    \n    // head\n    f = min(f, ellipse(p2, 0., 1., 1.)-1.);\n    \n    // head tuft\n    f = min(f, ellipse(p2-o.yz, 2.4, 1., .2)-.5);\n    f = min(f, ellipse(p2-vec2(-.3, .9), 2., 1., .15)-.35);\n    \n    // beak cutout\n    f = max(f, -ellipse(p2-o.zy*1.25, 0., 1., 1.)+.4);\n    \n    // beak\n    f = min(f, ellipse(p2-.5*o.zy, 1.2+.2*cos(20.*t), 2., .1)-.75);\n    f = min(f, ellipse(p2-.5*o.zy, 2.-.2*cos(20.*t), 2., .1)-.75);\n    \n    // neck\n    f = min(f, ellipse(p2+1.1*o.yz, 0., 2., 2.)-.15);\n    \n    // body\n    f = min(f, ellipse(p+2.75*o.yz, 0., 1., .5)-1.);\n    f = min(f, ellipse(p+3.35*o.yz, 0., .75, 1.)-.8);\n    \n    // wings\n    f = min(f, ellipse(p+vec2(.5, 1.9), 1.5+.25*cos(5.4*t), 1.5, .2)-.75);\n    f = min(f, ellipse(p+vec2(-.5, 1.9), -1.5+-.25*cos(5.4*t), 1.5, .2)-.75);\n    \n    // feet\n    f = min(f, ellipse(p+vec2(.35, 4.), -.2, .5, 1.)-.3);\n    f = min(f, ellipse(p+vec2(-.35, 4.), .2, .5, 1.)-.3);\n    \n    // transfer majority of shape to mask\n    float mask = f;\n    \n    // and clear f\n    f = 0.;\n    \n    // eyes\n    f = max(f, -ellipse(p2, 0., 1., 1.)+.45);\n    f = min(f, ellipse(p2, 0., 1., 1.)-.2);\n    f = max(f, -ellipse(p2-.17*o.yz, 0., 1., 1.)+.15);\n    \n    // aa-esque\n    f = smoothstep(0., 32./res.y, f);\n    mask = smoothstep(0., 64./res.y, mask);\n    \n    //f = .1 + .9*f;\n    \n    //f = clamp(f, 0., 1.);\n    //mask = clamp(mask, 0., 1.);\n    \n    return vec2(f, mask);\n}\n\nvec2 birdstrip(in vec3 p, float time) {\n    vec4 rv = hash42(floor(p.xz));\n    \n    // plane\n    float pf = min(1., 1.5*p.y+.05);\n    \n    // repeat x\n    p.x = fract(p.x) - .5;\n    \n    // random x offset\n    p.x += .35*(.5-rv.z);\n    \n    // random flip left/right\n    if(rv.x<.5) p.x *= -1.;\n    \n    // random size\n    p *= 1.5*(1. - .2*rv.y);\n    \n    // return minimum of bird and plane\n    return min(bird(p.xy, time+rv.x), vec2(1., pf));\n    \n    //return bird(p.xy, time+rv.x);\n}\n\nvoid mainImage( out vec4 fo, in vec2 fc ) {\n\t// inits\n    vec2 p = (fc-res/2.) / res.y;\n\t\n    // initial transforms\n    p.y += .35;\n    \n    // camera position & direction\n    vec3 cpos = vec3( 0., 1.7, 0.);\n    vec3 cdir = vec3(p-vec2(0., .95), 1.);\n    \n    // ofsset camera by time\n    cpos.x += .3*iTime;\n    \n    // step through the planes!\n\tfloat f=0.;\n    float alpha = 1.;\n    const float I = 20.;\n    for(float i = 1.; i<=I; i++) {\n        // step camera position forward\n        cpos += .75*cdir;\n        \n        // offset x by random from z\n        cpos.x += hash11(cpos.z);\n        \n        // shape: value and mask\n        vec2 shape = birdstrip(cpos, iTime);\n        \n        // update alpha\n        alpha -= 1.-shape.y;\n        \n        // break if alpha becomes useless\n        if(alpha<0.) break;\n        \n        // blend in value\n        f = mix(i/I+shape.x, max(f,shape.x), 1.-alpha);\n    }\n    \n    f *= 1.5;\n    \n    fo = vec4(vec3(f) * vec3(1.5, 1.25, 1.), 1.);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","name":"Image","description":"","type":"image"}]}