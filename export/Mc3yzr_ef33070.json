{"ver":"0.1","info":{"id":"Mc3yzr","date":"1730153860","viewed":11,"name":"CSYE7270-BVE-Assignment4-2995983","username":"AnirudhV1997","description":"Basic shader, for Assignment 4. Combines Ambient, Diffuse, Specular, Fresnel, and Random Noise effects.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["basic","specular","shader","ambient","diffuse","fresnel","randomnoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Sphere properties\n    vec3 sphereCenter = vec3(0.0, 0.0, 5.0);\n    float sphereRadius = 1.0;\n\n    // Light properties\n    vec3 lightPos = vec3(1.5, 2.0, 2.0);\n    vec3 lightColor = vec3(1.0, 0.8, 0.6);\n\n    // Camera properties\n    vec3 cameraPos = vec3(0.0, 0.0, 0.0);\n    vec3 rayDir = normalize(vec3(uv, 1.5));\n\n    // Calculate intersection with the sphere\n    vec3 oc = cameraPos - sphereCenter;\n    float b = dot(oc, rayDir);\n    float c = dot(oc, oc) - sphereRadius * sphereRadius;\n    float h = b * b - c;\n\n    vec3 color = vec3(0.0); // Initial color\n\n    if (h > 0.0) {\n        float t = -b - sqrt(h);\n        vec3 hitPoint = cameraPos + t * rayDir;\n        vec3 normal = normalize(hitPoint - sphereCenter);\n\n        // Ambient Effect\n        vec3 ambient = vec3(0.05, 0.05, 0.1); // Soft ambient light\n        color += ambient;\n\n        // Diffuse Effect\n        vec3 lightDir = normalize(lightPos - hitPoint);\n        float diff = max(dot(normal, lightDir), 0.0);\n        vec3 diffuse = diff * lightColor * vec3(0.4, 0.5, 0.9);\n        color += diffuse;\n\n        // Specular Effect\n        vec3 viewDir = normalize(cameraPos - hitPoint);\n        vec3 reflectDir = reflect(-lightDir, normal);\n        float spec = pow(max(dot(viewDir, reflectDir), 0.0), 15.0);\n        vec3 specular = spec * lightColor * vec3(1.0);\n        color += specular;\n\n        // Fresnel Effect\n        float fresnel = pow(1.0 - dot(viewDir, normal), 3.0);\n        vec3 fresnelColor = mix(color, vec3(1.0, 1.0, 1.0), fresnel);\n        color = mix(color, fresnelColor, 0.5);\n\n        // Random Effect (subtle noise)\n        float noise = fract(sin(dot(hitPoint.xy, vec2(12.9898, 78.233))) * 43758.5453);\n        color += noise * 0.05 * color;\n    }\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}