{"ver":"0.1","info":{"id":"WdSBRV","date":"1590335165","viewed":164,"name":"Audible Quadratic Value Noise","username":"spalmer","description":"just so we can hear the noise I made over at Quadratic Filter [url]https://shadertoy.com/view/wdjcz1[/url]","likes":5,"published":1,"flags":8,"usePreview":0,"tags":["sound","valuenoise","quadratic","gpusound"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float graph(float g, float v)\n{\n    return clamp(.5 - .5 * iResolution.y * abs(v - g) \n        / (1. + iResolution.y * abs(dFdx(g)))\n        , 0., 1.);\n}\n\nvoid mainImage(out vec4 o, vec2 p)\n{\n    const float showfreqmul = 1e2; //2e3; // only good for the textures\n    vec2 R = iResolution.xy,\n         uv = p/R;\n \tvec2 f = foolery(iTime);\n    float u = (uv.x + iTime) * showfreqmul * freq / NR / R.x * f.y\n        , g = (noise_quadratic(NZ, NR, u) * 2. - 1.) * f.x * .5 + .5;\n    g = graph(g , uv.y);\n    vec3 c = vec3(g);\n    c = pow(c, vec3(1./2.2));\n    o = vec4(c,1);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"vec2 mainSound( in int samp,float time)\n{\n \tvec2 f = foolery(time);\n    // convert unsigned noise texture signal samples\n    // to monaural stereo reconstructed signed noise signal\n    return vec2(noise_quadratic(NZ, NR, NR * freq * time * f.y) * 2. - 1.) * gain * f.x;\n}\n\n","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"// 1d version of paniq's biquadratic filter https://shadertoy.com/view/wtXXDl\n// originally from Quadratic Filter https://shadertoy.com/view/wdjcz1\n// so we can hear it!\n\n// we need 1D noise, but only have 2D noise textures available.\nconst float\n  v = 0. // which row of the noise texture to use\n, gain = .5 //.3 //1. // master volume - very quiet by default because it's really noisy!\n, freq = 5e2 // base frequency in hz\n;\n\n// channel 0 is white noise, hi res\n// channel 1 is blue  noise, hi res\n// channel 2 is white noise, lo res\n// channel 3 is bayer noise, very lo res\n\n#define NZ iChannel1\n#define NR 1. //iChannelResolution[1].x\n\n// I think the blue noise in Channel 1 sounds like machinery :)\n\n// fetches work on all 4 channels\nvec4 fetch(sampler2D ch, int nr, int q)\n{\n    q %= nr;\n    return texelFetch(ch, ivec2(q, v), 0);\n}\n\n// given 3 vec4 samples x, interpolate quadratically\nvec4 filter_quadratic(mat3x4 x, float q, out vec4 gradient)\n{\n    float q0 = .5 * (q+1.), q1 = .5 * q;\n\tgradient = mix(x[1], x[2], q) - mix(x[0], x[1], q);\n    return mix(mix(x[0], x[1], q0), mix(x[1], x[2], q1), q);\n}\n\n// abstracts the sampling from texture for the quadratic filter\nmat3x4 fetch3(sampler2D ch, float res, float u, out float q)\n{\n\tconst ivec3 _ = ivec3(-1, 0, 1);\n    u *= res;\n    int t = int(u), r = int(res);\n    q = u - float(t);\n    return mat3x4(\n      fetch(ch, r, t + _.x)\n    , fetch(ch, r, t + _.y)\n    , fetch(ch, r, t + _.z)\n      );\n}\n\nvec4 fetch_quadratic(sampler2D ch, float res, float u) \n{\n    vec4 g; float q;\n    mat3x4 x = fetch3(ch, res, u, q);\n    return filter_quadratic(x, q, g);\n}\n\n// see iq's https://shadertoy.com/view/llGSzw\n// integer hash copied from Hugo Elias\nfloat hash1(uint n) \n{\n\tn = (n << 13) ^ n;\n    n = n * (n * n * 15731u + 789221u) + 1376312589u;\n    return float(n & uvec3(0x7fffffffu)) / float(0x7fffffff);\n}\n\nfloat alu_noise_quadratic(float q)\n{\n    vec4 g; uint i = uint(floor(q));\n    float n0 = hash1(i-1u), n1 = hash1(i), n2 = hash1(i+1u);\n    return filter_quadratic(mat3x4(vec4(n0), vec4(n1), vec4(n2)), fract(q), g).x;\n}\n\nfloat noise_quadratic(sampler2D ch, float res, float u)\n{\n    return\n        //sin(0.41 * 3.141516 * alu_noise_quadratic(u)); // jorge mod from comments\n        alu_noise_quadratic(u); //\n    \t//fetch_quadratic(ch, res, u).x; //\n}\n\nvec2 foolery(float t)\n{\n    return vec2(\n          max(0., sin(2.41 * 3.141596 * t)) // gain factor\n        , sin(.07 * 3.141596 * t) * .8 + 1. // freq multiplier\n        );\n}\n    ","name":"Common","description":"","type":"common"}]}