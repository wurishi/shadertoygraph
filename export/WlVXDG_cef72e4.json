{"ver":"0.1","info":{"id":"WlVXDG","date":"1583565645","viewed":124,"name":"Dynamic Branch Demo","username":"fallingcat","description":"This demo is used to show the performance hit when using dynamic branch with branch divergence in one wavefront.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["performance","branch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//----------------------------------------------------------------------------------------------------------------------------------\n// This demo is used to show the performance hit when using dynamic branch with branch divergence in one wavefront.\n// The both sides of branch have the same computation so basically only one side will be executed in perfect world.\n// So changing tile size should not affact the fps. \n// But actually if you change the tile size to 2 or 4, the fps will drop a lot.\n// The reason of the performance drop is taht when divergence happens in one wavefront, the GPU will flatten the branching and\n// execute all possible paths then pick the final result.\n// So in our case, when tile size is small, there are more wavefronts are flattened and cause the performance hit.\n// \n// Result on my RTX 2070 Max-Q\n//\n// -------------+-----------+---------\n// Tile size\t|loop times\t|fps \n// -------------+-----------+---------\n// 64\t\t\t|128\t\t|25\n// -------------+-----------+---------\n// 4\t\t\t|128\t\t|13\n// -----------------------------------\n// \n// 2020/03/07 by fallingcat @ Taiwan\n//----------------------------------------------------------------------------------------------------------------------------------\n\n#define TILE_SIZE  \t\t64.0\n#define LOOP_TIMES\t\t64\n\nvec3 Blur(sampler2D t, vec2 uv)\n{\n    vec3 Color = textureLod(t, uv, 0.0).xyz;\n    float V = length(Color);\n    Color += textureLod(t, uv + vec2(0.01, 0.0), 0.0).xyz;\n    V += length(Color);\n    Color += textureLod(t, uv + vec2(0.0, 0.01), 0.0).xyz;\n    V += length(Color);\n    Color += textureLod(t, uv + vec2(-0.01, 0.0), 0.0).xyz;\n    V += length(Color);\n    Color += textureLod(t, uv + vec2(-0.0, -0.01), 0.0).xyz;\n    V += length(Color);\n        \n    return (Color / V * sin(iTime));    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = vec3(0, 0, 0);\n    \n    float CondX = float(int(fragCoord.x/TILE_SIZE));\n    float CondY = float(int(fragCoord.y/TILE_SIZE));\n    \n    if ((mod(CondX,2.0) == 0.0 && mod(CondY,2.0) == 0.0) || (mod(CondX, 2.0) == 1.0 && mod(CondY, 2.0) == 1.0))\n    {\n    \tfor (int i = 0; i<LOOP_TIMES; i++)\n        {\n        \tcol += Blur(iChannel0, uv).xyz;\n            uv += vec2(0.001, 0.001);\n        \tcol += Blur(iChannel1, uv).xyz;\n            uv += vec2(0.001, 0.001);\n        \tcol += Blur(iChannel2, uv).xyz;\n            uv += vec2(0.001, 0.001);\n        \tcol += Blur(iChannel3, uv).xyz;\n            uv += vec2(0.001, 0.001);\n        }\n        col /= float(LOOP_TIMES);\n    }\n    else\n    {\n        for (int i = 0; i<LOOP_TIMES; i++)\n        {\n            col += Blur(iChannel0, 1.0 - uv).xyz;\n            uv += vec2(0.001, 0.001);\n            col -= Blur(iChannel1, 1.0 - uv).xyz;\n            uv += vec2(0.001, 0.001);\n            col += Blur(iChannel2, 1.0 - uv).xyz;\n            uv += vec2(0.001, 0.001);\n            col -= Blur(iChannel3, 1.0 - uv).xyz;\n            uv += vec2(0.001, 0.001);\n        }\n        col /= float(LOOP_TIMES);\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}