{"ver":"0.1","info":{"id":"slBBDz","date":"1652033879","viewed":65,"name":"Seed (i tried)","username":"LiukRast","description":"Graphical demonstration of a simple pseudo-random number generator. You input a number, a random number between 0 & 1 will come out. The graphical demonstration shows the same generator made with 3 inputs (x, y and a seed)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["circles","loop","mathematic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 bg = vec3(0,0,0);\n    vec3 c = vec3(cos(iTime)+1.0,0,1.0-cos(iTime));\n    vec3 result = bg;\n    \n    float x = fragCoord.x/((cos(iTime/10.0)+2.0)*15.0);\n    float y = fragCoord.y/((cos(iTime/10.0)+2.0)*15.0);\n    \n    float randomNumber = 129.397;\n    \n   \n    float eq = circles(vec2(x,y), randomNumber, iTime);\n   \n    \n    if(eq >= 0.0) {\n    result = c * eq;\n    }\n\n    // Output to screen\n    fragColor = vec4(result,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float loop2(float x) {\n    float linear = (x-1.0)/2.0;\n    float base = floor(linear);\n    return ((linear-base)*2.0)-1.0;\n}\n\nfloat rawSeed(float seed) {\n    float f = 3.14151098209873986 * 162.0;\n    float linear = (seed + f) * f;\n    float base = floor(linear);\n    return base - linear;\n}\n\nfloat baseFloor(float n) {\n    return floor((n+1.0)/2.0);\n}\n\nfloat seed2D(vec2 seed2D, float seed) {\n    float x = seed2D.x;\n    float y = seed2D.y;\n    \n    return rawSeed(baseFloor(x)) * rawSeed(baseFloor(y)) * rawSeed(seed);\n}\n\nfloat seedF(float seed) {\n    return rawSeed(rawSeed(rawSeed(seed)));\n}\n\nfloat circles(vec2 position, float seed,float time) {\n    float x = position.x;\n    float y = position.y;\n    \n    float circle = pow(loop2(x), 2.0) + pow(loop2(y), 2.0);\n    \n    float finalSeed = pow(seedF(seed2D(position, seed)), 2.0);\n    \n    float radius = 0.5*(cos(time+finalSeed*200.0)+1.0);\n    \n    return radius - circle;\n}","name":"Common","description":"","type":"common"}]}