{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"video","id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}},{"channel":1,"type":"texture","id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"//Mirros is a line y=Ax+b\n#define speed1 0.\n#define speed2 0.\n\nmat3 gx = mat3(\n\t 1.0,  2.0,  1.0,\n\t 0.0,  0.0,  0.0,\n\t-1.0, -2.0, -1.0\n);\n\nmat3 gy = mat3(\n\t-1.0, 0.0, 1.0,\n\t-2.0, 0.0, 2.0,\n\t-1.0, 0.0, 1.0\n);\n\nvec3 edgeColor = vec3(1.0, 0.5, 0.75);\n\nfloat intensity(vec3 pixel) {\n\treturn (pixel.r + pixel.g + pixel.b) / 3.0;\n}\n\nfloat pixelIntensity(vec2 uv, vec2 d) {\n\tvec3 pix = texture(iChannel0, uv + d*2. / iResolution.xy).rgb;\n\treturn intensity(pix);\n}\n\n\nfloat convolv(mat3 a, mat3 b) {\n\tfloat result = 0.0;\n\n\tfor (int i=0; i<3; i++) {\n\t\tfor (int j=0; j<3; j++) {\n\t\t\tresult += a[i][j] * b[i][j];\n\t\t}\n\t}\n\n\treturn result;\n}\n\nfloat sobel(vec2 uv) {\n\tmat3 pixel = mat3(0.0);\n\n\tfor (int x=-1; x<2; x++) {\n\t\tfor (int y=-1; y<2; y++) {\n\t\t\tpixel[x+1][y+1] = pixelIntensity(uv, vec2(float(x), float(y)));\n\t\t}\n\t}\n\n\tfloat x = convolv(gx, pixel);\n\tfloat y = convolv(gy, pixel);\n\n\treturn sqrt(x * x + y * y);\n}\n\n\n\n//Returns the shortest path from P to the line through P0 and P1\nvec2 shortestPath(vec2 P, vec2 P0, vec2 P1){\n\tvec2 w = P-P0;\n\tvec2 vL = P1-P0;\n\tvec2 d = w - (dot(w,vL)/dot(vL,vL))*vL;\n\treturn d;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\t\n\t\n\tfloat height = iResolution.y;\n\tbool above = (fragCoord.y > height/2.);\n\tvec2 P = fragCoord.xy / iResolution.xy;\n\t//float mirror = uv.x*MIRROR_A + MIRROR_B;\n\t\n\tvec2 P0 = vec2(0., 0.);\n\tvec2 P1 = vec2(1., 1.);\n\tvec2 normal_to_mirror_line = shortestPath(P,P0,P1);\n\t\n\tfloat under =  -normal_to_mirror_line.y;\n    under = clamp(under*100000., 0.,1.);\n\tvec2 mirrored_uv = abs(P - 2.*normal_to_mirror_line*under);\n\tvec2 uv = P;\n\t\n\t//Do tha chalk\n\t\n\tfloat width = .01;\n\tvec4 pixel = texture(iChannel0, vec2(mirrored_uv.x, mirrored_uv.y));\n\tvec4 right = texture(iChannel0, vec2(mirrored_uv.x+width, mirrored_uv.y));\n\tvec4 up = texture(iChannel0, vec2(mirrored_uv.x, mirrored_uv.y+width));\n\tfloat pixelSum = pixel.r+pixel.g+pixel.b;\n\tfloat rightSum = right.r+right.g+right.b;\n\tfloat upSum = up.r+up.g+up.b;\n\tfloat edge = abs(pixelSum-rightSum)+abs(pixelSum-upSum);\n\n\t\n\tfloat s = sobel(mirrored_uv);\n\tedge = clamp(edge,0.,1.);\n\t\n\tfloat blackboard = texture(iChannel1,uv).r;\n\t\n\t//float color = max(edge,0.)*(blackboard*.3)+blackboard*.3;\n\tfloat chalk_color = max(s,0.)*(blackboard)+blackboard*.3;\n\t\n\tvec4 color = texture(iChannel0, mirrored_uv)*(1.-under)+under*vec4(chalk_color);\n\t//color = vec4(color.rgb*under,1);\n\t\n\tfragColor = color;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ldXXW7","date":"1402149062","viewed":209,"name":"Mirror chalkboard","username":"lionleaf","description":"mirror chalkboard","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["mirror"],"hasliked":0,"parentid":"","parentname":""}}