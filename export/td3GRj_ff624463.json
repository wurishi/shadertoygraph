{"ver":"0.1","info":{"id":"td3GRj","date":"1568844054","viewed":98,"name":"Truchet Pattern","username":"prozacgod","description":"Been years since I've posted here, but wanted to do some more, Truchet pattern - based somewhat loosely on \"The Art of Code\" example from youtube.\n\nhttps://www.youtube.com/watch?v=2R7h76GoIJM\n\nhttps://www.shadertoy.com/view/3lBXWK","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["truchet"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash(vec2 v) {\n    v = fract(v * vec2(234.23556, 992.111));\n    v += dot(v, v+34.67);\n    \n    return fract(v.x*v.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // vec2 uv = fragCoord - (iResolution.xy/iResolution.y);\n    float scale = 10.0;\n    float ratio = iResolution.x / iResolution.y;\n    vec2 uv = ((fragCoord.xy - (iResolution.xy/2.0)) / iResolution.y) * scale;\n        \n    \n\t// rotate whole field of view\n    \n    float a = iTime * 0.1;    \n    uv = mat2(cos(a), sin(a), -sin(a), cos(a)) *\n        (\n            uv - vec2( 0.5, 0.5)\n        ) +\n        vec2( 0.5, 0.5);\n    \n    \n    vec3 col = vec3(0.0,0.0,0.0);\n   \n    // create the floating circles..\n    \n    float dist = 1.0;\n    for (int i = 0; i < 100; i++) {\n        vec2 pos = vec2(\n            (hash(vec2(i)) - 0.5) * scale * ratio,\n            (hash(vec2(i, 234.444)) - 0.5) * scale\n        );\n        \n        \n        float radius = (hash(vec2(i, 90234.4534))) / 1.0;\n        \n        // radius changes over time, scaled to a random number for max size and time ratio\n        radius = radius + ((sin(iTime * 4.0 * hash(vec2(i, 1111.23532))) + 1.0) / 2.0 * hash(vec2(i, 9911.232)));\n        \n        vec2 pathrad = vec2(\n\t\t\thash(vec2(i, 1111.23532)),\n            hash(vec2(i, 9111.23532))\n        ) * 10.0;\n        \n        float pathSpeed = hash(vec2(i, 6711.23532)) * 0.1;\n            \n        pos = pos + (vec2(sin(iTime * pathSpeed), cos(iTime * pathSpeed)) * pathrad);\n     \t\n        if (distance(uv, pos) < radius) {\n        \tfloat d = distance(uv, pos) / radius;\n            if (d < dist) {\n                dist = d;\n            }\n        }\n    }    \n    \n    col.x = 1.0-dist;\n    \n    // Truchet calculation\n    \n    vec2 c_uv = fract(uv);\n   \n    float direction = hash(floor(uv)) > 0.5 ? 1.0 : 0.0;\n    \n    // direction = 1.0;\n    // + abs(sin(iTime * 2.0) / 20.0) +\n    \n    float thickness = 0.1 + (dist / 10.0);\n    \n    float d1 = distance(c_uv, vec2(0.0, direction));\n        if (d1 > (0.5 - thickness) && d1 < (0.5 + thickness)) {\n        col = vec3(0.0, 1.0, 0.0);\n    }\n    \n    float d2 = distance(c_uv, vec2(1.0, 1.0-direction));    \n    if (d2 > (0.5 - thickness) && d2 < (0.5 + thickness)) {\n        col = vec3(0.0, 1.0, 0.0);\n    }\n    \n        \n    if (c_uv.x < 0.02) {\n\t\t//col = vec3(1.0, 1.0, 1.0);\n    }\n    \n    if (c_uv.y < 0.02) {\n\t\t//col = vec3(1.0, 1.0, 1.0);\n    }    \n   \n            \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}