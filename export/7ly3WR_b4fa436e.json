{"ver":"0.1","info":{"id":"7ly3WR","date":"1637463950","viewed":71,"name":"Sierpiński Triangle","username":"Zyansheep","description":"Renders Sierpiński triangle using waterfall coordinates.\n","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["triangle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Simple \"NAND\" algorithm w/ Waterfall Coordinates from this awesome video: https://www.youtube.com/watch?v=5nuYD2M2AX8\n\nconst float FractalDegree = 8.;\n\nfloat distToLine(vec2 pt1, vec2 pt2, vec2 testPt)\n{\n  vec2 lineDir = pt2 - pt1;\n  vec2 perpDir = vec2(lineDir.y, -lineDir.x);\n  vec2 dirToPt1 = pt1 - testPt;\n  return dot(normalize(perpDir), dirToPt1);\n}\nfloat getLineIntersectionProp(vec2 p0, vec2 dir, vec2 p2, vec2 p3) \n{\n    vec2 dir_rot = vec2(dir.y, -dir.x);\n    float t = dot(p0 - p2, dir_rot) / dot(p3 - p2, dir_rot);\n    return clamp(t, 0.0, 1.0);\n} \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 top_point = vec2(iResolution.x / 2.0, iResolution.y);\n    float side_len_half = iResolution.y / 1.73205080757; // 1.73205080757 = sqrt(3);\n    \n    vec2 left_point = vec2(top_point.x - side_len_half, 0);\n    vec2 right_point = vec2(top_point.x + side_len_half, 0);\n    \n    float left_prop = getLineIntersectionProp(fragCoord, top_point - left_point, top_point, right_point);\n    float right_prop = getLineIntersectionProp(fragCoord, top_point - right_point, top_point, left_point);\n    \n    // Render Points\n    /*if (distance(fragCoord, top_point) < 10.0) { fragColor = vec4(1.0); return; }\n    if (distance(fragCoord, left_point) < 10.0) { fragColor = vec4(1.0); return; }\n    if (distance(fragCoord, right_point) < 10.0) { fragColor = vec4(1.0); return; }*/\n    \n    // Render Background\n    if (distToLine(top_point, left_point, fragCoord) < 0.0 || distToLine(right_point, top_point, fragCoord) < 0.0) { fragColor = vec4(0.0); return; }\n    \n    int a = int(left_prop * pow(2.0, FractalDegree));\n    int b = int(right_prop * pow(2.0, FractalDegree));\n    \n    float col = ((a & b) == 0) ? 1.0 : 0.0;\n    fragColor = vec4(col);\n}","name":"Image","description":"","type":"image"}]}