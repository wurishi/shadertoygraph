{"ver":"0.1","info":{"id":"msBGWG","date":"1668069907","viewed":166,"name":"Chutes and Ladders Probability","username":"oneshade","description":"Using matrices to calculate the probability of landing on a particular square in a game of Chutes and Ladders.","likes":6,"published":3,"flags":32,"usePreview":0,"tags":["matrices","probability","markovchains","chutesandladders"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Reference: https://www.datagenetics.com/blog/november12011/\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy * 10.0;\n\n    // Visualize transition matrix\n    //vec3 color = texelFetch(iChannel0, ivec2(uv * 10.0), 0).rgb;\n    //color += 0.2 * smoothstep(200.0 / iResolution.x, 0.0, abs(fract(uv.x * 10.0 + 0.5) - 0.5));\n    //color += 0.2 * smoothstep(200.0 / iResolution.y, 0.0, abs(fract(uv.y * 10.0 + 0.5) - 0.5));\n    //fragColor = vec4(color, 1.0);\n\n    ivec2 ij = ivec2(uv);\n    if (ij.y % 2 == 1) ij.x = 9 - ij.x; // Rows wind back and forth\n    vec3 color = texelFetch(iChannel1, ivec2(10 * ij.y + ij.x, 0), 0).rgb;\n\n    // Normalize to improve visibility\n    float maxVal = 0.0;\n    for (int n=0; n < 100; n++) {\n        maxVal = max(maxVal, texelFetch(iChannel1, ivec2(n, 0), 0).x);\n    }\n\n    // Grid\n    color.r += smoothstep(20.0 / iResolution.x, 0.0, abs(fract(uv.x + 0.5) - 0.5));\n    color.r += smoothstep(20.0 / iResolution.y, 0.0, abs(fract(uv.y + 0.5) - 0.5));\n\n    fragColor = vec4(color / maxVal, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    int i = int(fragCoord.x);\n    int j = int(fragCoord.y);\n    fragColor = vec4(0.0);\n    if (i < 100 && j < 100) {\n        if (iFrame == 0) {\n            bool isSlide = false;\n            int dest;\n            for (int idx=0; idx < 19; idx++) {\n                if (slides[idx].x == i) {\n                    isSlide = true;\n                    dest = slides[idx].y;\n                    break;\n                }\n            }\n\n            if (isSlide) {\n                if (j == dest) {\n                    fragColor = vec4(1.0); // Instantly jump to a different square\n                }\n            }\n\n            else {\n                if (j >= i + 1 && j < i + 7) {\n                    fragColor = vec4(1.0); // Advance forward amount rolled on the die\n                }\n\n                if (i > 93 && j == i) {\n                    fragColor = vec4(i - 93); // Must get exact amount to finish\n                }\n\n                fragColor /= 6.0;\n            }\n        }\n\n        if (iFrame > 0) {\n            fragColor = texelFetch(iChannel0, ivec2(i, j), 0);\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const ivec2[19] slides = ivec2[19](\n    ivec2( 0, 37),\n    ivec2( 3, 13),\n    ivec2( 8, 30),\n    ivec2(15,  5),\n    ivec2(20, 41),\n    ivec2(27, 83),\n    ivec2(35, 43),\n    ivec2(47, 25),\n    ivec2(48, 10),\n    ivec2(50, 66),\n    ivec2(55, 52),\n    ivec2(61, 18),\n    ivec2(63, 59),\n    ivec2(70, 90),\n    ivec2(79, 99),\n    ivec2(86, 23),\n    ivec2(92, 72),\n    ivec2(94, 74),\n    ivec2(97, 77)\n);","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    int i = int(fragCoord.x);\n    fragColor = vec4(0.0);\n    if (int(fragCoord.y) == 0 && i < 100) {\n        if (iFrame == 0) {\n            // Initial probability distribution\n            if (i < 6) {\n                fragColor = vec4(1.0 / 6.0);\n            }\n        }\n\n        if (iFrame > 0) {\n            if (iFrame % 60 == 0) {\n                // Multiply by transition matrix\n                for (int n=0; n < 100; n++) {\n                    fragColor += texelFetch(iChannel0, ivec2(n, i), 0) * texelFetch(iChannel1, ivec2(n, 0), 0);\n                }\n            }\n\n            else {\n                fragColor = texelFetch(iChannel1, ivec2(i, 0), 0);\n            }\n        }\n    }\n}","name":"Buffer B","description":"","type":"buffer"}]}