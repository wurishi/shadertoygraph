{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"texture","id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"//Escaping Fleet by eiffie (another test of aa methods, not turned on by default)\n\n//#define HI_QUAL\n#define USE_TEXTURE\n\n#ifdef HI_QUAL\n\t#define FudgeFactor 0.75\n\t#define MarchSteps 96\n\t#define ShadowSteps 12\n\t#define AOSteps 5\n#else\n\t#define FudgeFactor 1.0\n\t#define MarchSteps 64\n\t#define ShadowSteps 10\n\t#define AOSteps 4\n#endif\n\n#define time iTime\n#define size iResolution\n#define tex iChannel0\n\n#define PI 3.14159\n#define ONE_OVER_PI 0.31831\n\nconst vec3 LightColor=vec3(8.0),SkyColor=vec3(0.1,0.16,0.27);\n\nfloat PixelSize,st;\n\nfloat rnd(vec2 co){return fract(sin(dot(co,vec2(123.42,117.853)))*412.453);}\nfloat noyz(vec2 p){\n\tvec2 c=floor(p),f=fract(p),v=vec2(1.0,0.0);\n\treturn mix(mix(rnd(c),rnd(c+v.xy),f.x),mix(rnd(c+v.yx),rnd(c+v.xx),f.x),f.y);\n}\nvec4 texturef(vec2 p){\n#ifdef USE_TEXTURE\n\treturn texture(tex,p);\n#else\n\tfloat n=noyz(p*256.0);\n\tp=sin(p*3.0+2.4*sin(p.yx*3.4));\n\tn+=0.5+0.5*(p.x*p.y);\n\treturn vec4(0.5)+vec4(0.25*n,0.0,0.25*n,0.0);\n#endif\n}\n\nconst float mr=0.13, SCALE = -1.7;\nvec4 scale=vec4(SCALE,SCALE,SCALE,abs(SCALE));\nconst vec4 p0=vec4(2.0,-0.32,2.48,1.0);\nfloat DE(in vec3 z0){//amazing box by tglad\n\tvec4 z = vec4(z0,1.0),zG;\n\tfor (int n = 0; n < 5; n++) {\n\t\tz.xyz=clamp(z.xyz, -1.0, 1.0) *2.0-z.xyz;\n\t\tz*=scale/clamp(dot(z.xyz,z.xyz),mr,1.0);\n\t\tif(n==3)zG=z;\n\t\tz+=p0;\n\t}\n\tfloat dG=(length(max(abs(zG.xyz)-vec3(0.8,4.2,0.0),0.0))-0.01)/zG.w;\n\treturn min(dG,(length(max(abs(z.xyz)-vec3(4.4,0.9,1.5),0.0))-0.01)/z.w);\n}\nstruct matl{vec4 col;vec4 prp;}m;// prp=rough, spec, metal\nfloat CE(in vec3 z0){//amazing box by tglad\n\tvec4 z = vec4(z0,1.0),zG;\n\tfor (int n = 0; n < 5; n++) {\n\t\tz.xyz=clamp(z.xyz, -1.0, 1.0) *2.0-z.xyz;\n\t\tz*=scale/clamp(dot(z.xyz,z.xyz),mr,1.0);\n\t\tif(n==3)zG=z;\n\t\tz+=p0;\n\t}\n\tfloat dG=length(max(abs(zG.xyz)-vec3(0.8,4.2,0.0),0.0))/zG.w;\n\tfloat dS=length(max(abs(z.xyz)-vec3(4.4,0.9,1.5),0.0))/z.w;\n\tvec4 col=texturef(10.0*z0.xy+5.0*z0.zz)+vec4(sin(z.xyz)*0.1,0.0),prp=vec4(1.0,0.5,1.0,0.2);\n\tif(dS<dG){dS-=col.r*0.01/z.w;}\n\telse {col=col.brga;dG-=col.r*0.01/zG.w;col.r+=0.5;prp=vec4(0.14,0.22,1.0,0.1);}\n\tm.col+=col;m.prp+=prp;\n\treturn min(dS,dG);\n}\n\nvec3 getBackground( in vec3 rd ){\n\tfloat d=max(0.0,dot(rd,vec3(0.0,1.0,0.0)));\n\tvec3 bcol=SkyColor+rd*0.1+LightColor*d*0.05;\n\tfloat y=1.0-abs(rd.y),a=0.44+atan(rd.x,rd.z);\n\tvec2 pt=vec2(a+sin(7.0*y+a*10.0+time*0.25)*0.05*y,rd.y+time*0.25);\n\tbcol*=texturef(pt).rgb;\n\tbcol+=LightColor*pow(d,110.0+st*100.0)*0.25;\n\treturn bcol;\n}\n\nfloat shadao(vec3 ro, vec3 rd, float px, float max_dist){//pretty much IQ's SoftShadow\n\tfloat res=1.0,d,t=2.0*px;\n\tfor(int i=0;i<ShadowSteps;i++){\n\t\td=max(0.0,DE(ro+rd*t)*1.5);\n\t\tif(t+d>max_dist)break;\n\t\tt+=d;\n\t\tres=min(res,3.0*d/t);\n\t}\n\treturn res;\n}\n\nfloat fakeAO(vec3 ray, vec3 norm, float ao_eps) {//from rrrola\n\tfloat ao=1.0,w=0.1/ao_eps,dist=2.0*ao_eps,d;\n\tfor (int i=0; i<AOSteps; i++) {\n\t\td = DE(ray + norm*dist);\n\t\tao -= (dist-d) * w; \n\t\tw *= 0.5; dist = dist*2.0 - ao_eps;\n\t}\n  \treturn clamp(ao, 0.0, 1.0);\n}\n\n//const float mspec=1.5,mspecExp=1.0;\nfloat pow5(float v){float tmp = v*v;return tmp*tmp*v;}\n\nvec3 shade(in vec3 ro, in vec3 rd, in float t, in vec3 color){\n\tfloat px=PixelSize*t;\n\tvec2 e=vec2(0.5*px,0.0);\n\tfloat ds=DE(ro+rd*t);\n\tro+=rd*(t+ds-px);\n\tm.col=vec4(0.0);m.prp=vec4(0.0);//clear material before taking samples\n\tfloat d0=CE(ro);\n\tvec3 dn=vec3(CE(ro-e.xyy),CE(ro-e.yxy),CE(ro-e.yyx));\n\tvec3 dp=vec3(CE(ro+e.xyy),CE(ro+e.yxy),CE(ro+e.yyx));\n\tm.col*=0.143;m.prp*=0.143;\n\tvec3 N=(dp-dn)/(length(dp-vec3(d0))+length(vec3(d0)-dn));\n\tvec3 L=normalize(vec3(-0.11,0.74,0.19)),H=normalize(L-rd),col=m.col.rgb*m.prp.a;\n#define MF 0.001\n \tfloat h=max(MF,dot(N,H)),d=max(MF,dot(L,H)),l=max(MF,dot(N,L)),v=max(MF,dot(N,-rd));\n\tfloat rf=max(MF,m.prp.x),frk=.5+2.*d*d*rf;        \n\tvec3 diff=m.col.rgb*ONE_OVER_PI*(1.+(frk-1.)*pow5(1.-l))*(1.+(frk-1.)*pow5(1.-v));\n\tfloat a=rf*rf,dv=h*h*(a-1.)+1.,D=a/(PI*dv*dv),k=rf/2.,G=l/(l*(1.-k)+k)*v/(v*(1.-k)+k);\n\tvec3 F0=m.prp.y*mix(vec3(1.),m.col.rgb,m.prp.z);\n\tvec3 F=F0+(1.-F0)*pow5(1.-d);\n\tvec3 spec=clamp(D*F*G/(4.*l*v),0.0,1.0);\n\tfloat shad=0.0;\n\tif(l>MF)shad=shadao(ro,L,px,10.0);\n\th*=0.05;\n\tcol+=clamp(diff+spec+vec3(-0.05+h,0.0,0.05-h),0.0,1.0)*l*shad*LightColor;\n\t//col+=(m.col*vec3(0.4+0.2*h,0.5,0.6-0.2*h) + m.prp.y *4.0* (1.0-v)*pow( h, 1.0/rf))*shad*LightColor*l;//(l*0.5+0.5);\n\tfloat ao=fakeAO(ro,N,px);\n#ifdef HI_QUAL\n\tvec3 bcol=getBackground(reflect(rd,N));\n#else\n\tvec3 bcol=L*pow(max(0.0,d),110.0+st*100.0);\n#endif\n\treturn mix(ao*col*(1.25-0.25*st),color,clamp(ds/px,0.0,1.0));\n}\n\nvec3 scene( vec3 ro, vec3 rd, vec2 fragCoord )\n{// find color and distance of scene\n\t//march\n\tfloat t=DE(ro)*rnd(fragCoord.xy)*0.75;\n\tfloat d,dm=100.0,tm=0.0,MIN_DIST=PixelSize*0.001,od=1000.0;//distances\n\tvec4 hit=vec4(-1.0);//we will grab up to 4 depths that are local mins\n\tfor(int i=0;i<MarchSteps;i++){\n\t\td=DE(ro+rd*t)*FudgeFactor;\n#ifdef HI_QUAL\n\t\tif(d<od){\n\t\t\tif(d<0.5*PixelSize*t && hit.x<0.0){//we want to draw this edge, it occludes the pixel\n\t\t\t\thit=vec4(hit.yzw,t);//push\n\t\t\t}\n\t\t}\n\t\tod=d;\n#endif\n\t\tif(d<dm){tm=t;dm=d;}//and save the max occluder\n\t\tt+=d;\n\t\tif(t>10.0 || d<MIN_DIST)break;\n\t}\n\t//we have saved the edges but there is also a min or final surface\n\tif(tm>hit.w && dm<PixelSize*(tm-dm)){//if minimum has not been saved\n\t\tif(hit.x>0.0)hit=hit.wxyz;//write over the last entry, not the first\n\t\thit.x=tm-dm;hit=hit.yzwx;\n\t}\n#ifdef HI_QUAL\n\tif(od<PixelSize*(t-d) && hit.x<0.0){//save final distance if we have room\n\t\thit.x=t-d;hit=hit.yzwx;\t\n\t}\n#endif\n\t//color the background \n\tvec3 col=getBackground(rd);\n\t\n\t//add in the object(s)\n#ifdef HI_QUAL\n\tfor(int i=0;i<4;i++){//play back the hits and mix the color samples\n#endif\n\t\thit=hit.wxyz;//pop\n\t\tif(hit.x>0.0)col=shade(ro,rd,hit.x,col);\n#ifdef HI_QUAL\n\t}\n#endif\n\t\n\treturn clamp(col,0.0,1.0);\n}\n\t \nmat3 lookat(vec3 fw,vec3 up){\n\tfw=normalize(fw);vec3 rt=normalize(cross(fw,normalize(up)));return mat3(rt,cross(rt,fw),fw);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tst=sin(time*2.5);\n\tvec3 ro=vec3(sin(time*0.02)*2.31,-0.00521,0.05113);\n\tvec3 dr=vec3((2.0*fragCoord.xy-size.xy)/size.y,2.0);\n\tvec3 rd=normalize(dr);\n\tPixelSize=2.5/(size.y*dot(rd,dr));\n\tvec3 fw=mix(vec3(sin(time*0.1),cos(time*0.27),sin(time*0.13)),-ro,clamp(dot(ro,ro)*0.12,0.0,1.0));\n\tfloat d=DE(ro);\n\tfw=mix(vec3(sign(sin(time*0.02+1.57)),0.0,0.0),fw,smoothstep(-0.025,0.04,d*d));\n\trd=lookat(fw,vec3(0.3+0.5*sin(time*0.23),1.0,0.4))*rd;\n\t//ro=eye;rd=normalize(dir);\n\tvec3 color=scene(ro,rd,fragCoord);\n\tif(color!=color)color=vec3(0.0,1.0,0.0);\n\tfragColor = vec4(color,1.0);\n}\n\n","name":"Image","description":"","type":"image"},{"outputs":[{"channel":0,"id":"XsfGRr"}],"inputs":[],"code":"//garbage but i thought it should make noise\nfloat rand(float t){return fract(sin(t*342.12427)*1531.2341);}\n// note number to frequency  from https://www.shadertoy.com/view/ldfSW2\nfloat ntof(float n){return 440.0 * pow(2.0, (n - 69.0) / 12.0);}\nfloat saw(float t){return fract(t+0.5)-0.5;}\nfloat scale(float note){float n2=mod(note,12.0);if(n2==1.0||n2==4.0||n2==6.0||n2==9.0||n2==11.0)note-=-1.0;return note;}\n\n#define bps 0.79577\n\nvec2 mainSound( in int samp,float time)\n{\n    float b=floor(time*bps);\n    float t=fract(time*bps);\n\tfloat n=58.0+floor(sin(b)*24.0);\n    float f=ntof(scale(n));\n    float e=sin(time*2.5);\n    float a=saw(f*time)+saw(f*(time+sin(time*10.0)*0.001)*1.5)*0.5+saw(f*time*1.75)*0.125;\n    return vec2((0.1+0.2*saw(ntof(36.0)*time))*a*e*e+0.1*(1.0-pow(e,0.25))*rand(time));\n}","name":"Sound","description":"","type":"sound"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":true,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MlX3zr","date":"1417890774","viewed":774,"name":"Escaping Fleet","username":"eiffie","description":"Trapped between a dying sun and a black hole they left their doomed world behind. ","likes":13,"published":1,"flags":8,"usePreview":0,"tags":["aa","amazingbox"],"hasliked":0,"parentid":"","parentname":""}}