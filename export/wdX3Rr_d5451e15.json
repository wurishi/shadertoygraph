{"ver":"0.1","info":{"id":"wdX3Rr","date":"1544705199","viewed":421,"name":"outline shader test","username":"KeyJ","description":"demonstration of how to add an outline around contours of an image with transparency","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","test","postprocessing","outline"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Demonstration how to add a (possibly colored) outline\n// around the edges of a texture with an alpha channel,\n// made because mog asked for it.\n//\n// The implementation is rather \"brute force\",\n// using an (2N+1)x(2N+1) box maximum filter,\n// but at moderate outline widths, it does the job.\n//\n// Note that the outline width can only be integer,\n// and the outline is only anti-aliased if the original\n// object's contours are.\n//\n// -- KeyJ^trbl\n    \nconst vec3 outlineColor = vec3(.9, .3, .0);\n\nvec4 get(in vec2 fc) {\n    // sample from the input texture\n    // the coordinate is in screen pixels,\n    // so it has to be converted into texture space first:\n    return textureLod(iChannel0, fc / iResolution.xy * vec2(2.,7.), 0.);\n    // the scaling by vec2(2,7) at the end    (here: ^^^^^^^^^^^^^)\n    // is only here to make the Nyan Cat image appear at a reasonable size\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // use Shadertoy's default animated gradient as a background\n    vec3 background = 0.5 + 0.5*cos(.25*iTime+(fragCoord/iResolution.xy).xyx+vec3(0,2,4));\n\n    // set the filter size (N); here, we make it dynamic\n    // to show the effect, but in practice, it's usually\n    // either a constant or a uniform parameter\n    int size = int(length(fragCoord-iResolution.xy*(.5+.5*sin(.7*iTime+vec2(1.,5.))))/100.0);\n    \n    // determine the maximum alpha value in the (2N-1)x(2N-1) region        \n    float amax = 0.;\n    for (int dy = -size; dy <= size;  ++dy) {\n\t    for (int dx = -size; dx <= size;  ++dx) {\n            amax = max(amax, get(fragCoord + vec2(dx, dy)).a);\n        }\n    }\n\n    // combine the final color of the overlay texture\n    vec4 img = get(fragCoord);\n    vec4 result = vec4(mix(outlineColor, img.rgb, img.a), amax);\n    \n    // finally, compose the overlay with the background\n    fragColor = vec4(mix(background, result.rgb, result.a),1.0);\n}\n","name":"Image","description":"","type":"image"}]}