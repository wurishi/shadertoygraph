{"ver":"0.1","info":{"id":"XlySWh","date":"1483994498","viewed":121,"name":"Rond qui change de couleur","username":"Damon","description":"Shader 1","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Falloff : attenuation en fonction de la distance\n// x : distance\n// r : distance limite\n// a : coefficient de ponderation\nfloat Falloff(in float x,in float r,in float a)\n{\n    if (x<r)\n    {\n        float t = x / r;\n        return a*(1.0-t*t)*(1.0-t*t)*(1.0-t*t);\n    }\n    else \n    {\n        return 0.0;\n    }\n}\n\n// Cercle\n// c  : Centre\n// r  : Rayon\n// cc : Couleur cercle\n// uv : position pixel\n// old : ancienne couleur\nvec4 Circle(in vec2 c,in float r,in vec4 cc, in vec2 uv)\n{\n  float l=length(uv-c);\n  vec2 time = vec2(sin(0.5*iTime),cos(0.5*iTime));\n\n  // Dans le cercle si distance < rayon\n  if (l<r)\n  {\n     if (abs(l-r)<0.05)\n     {\n     return vec4(0.4,0.4,0.4,0.4)*time.x;\n      }\n      \n    return Falloff(l,r,1.0)*cc*time.x;\n  }\n  // Else ancienne couleur\n  else\n  {\n    return vec4(0.0);\n  }\n}\n\nvec2 RandomPoint(in int k)\n{\n    return vec2(cos(219.0*float(k)),sin(137.0*float(k)));\n}\n\nfloat RandomRadius(in int k)\n{\n    return 0.5+0.25*sin(300.0*float(k));\n}\nfloat RandomOffset(in int k)\n{\n    return 3.14*(1.0+sin(500.0*float(k)));\n}\n\n// Image \nvoid mainImage( out vec4 c, in vec2 p )\n{\n  // CoordonnÃ©es sur [.,.] x [-0.5,0.5]\n  vec2 uv = (p - .5*iResolution.xy ) / iResolution.y;\n  // Fond\n  // c = vec4(vec3(0.5)+uv.xyx/4.0,1.0);\n  c=vec4(0.5,0.5,0.75,1.0);  \n  for (int k=0;k<10;k++)\n  {\n  vec2 q=RandomPoint(k) + RandomRadius(k)*vec2(sin(0.5*iTime),cos(0.5*iTime+RandomOffset(k)));\n    \n  c = c+Circle(q,0.2,vec4(0.90,0.0,0.5,1),uv);\n   }\n}\n\n\n","name":"Image","description":"","type":"image"}]}