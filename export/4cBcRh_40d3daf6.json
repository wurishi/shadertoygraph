{"ver":"0.1","info":{"id":"4cBcRh","date":"1721876245","viewed":30,"name":"fun water sim","username":"abe4747","description":"Messing around with fluids from davidar (https://www.shadertoy.com/view/7t3SDf) and chronos (https://www.shadertoy.com/view/XcfcDl)","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["water"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"M {\n    vec4 ret = A();\n       \n    float cm = A().z;\n    vec4 col = vec4(1.0, 1.0, 0.0, 1.0);\n    float s = smoothstep(0.0, 2.0, cm);\n    float red = s;\n    float blue = 1.0 - s;\n    \n    vec3 c = mix(vec3(.0, .01, .0), vec3(0.2, 1.0, 1.0), s);\n    c *= s;\n    vec3 imabum = s <= 0.0 ? vec3(0.0, 0.0, 0.0) : c;\n    float bob = step(0.01, cm);\n    vec3 bobtwo = bob * vec3(1.0, 1.0, 1.0);\n    col = vec4(imabum, 1.0);\n    vec4 color = vec4(bobtwo, 1.0);\n    r = col;\n    //r = 1.-A().zzzz;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define M void mainImage(out vec4 r, vec2 u)\n#define A(i) texelFetch(iChannel0,ivec2(i+u),0)","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define M void mainImage(out vec4 r, vec2 u)\n#define A(i) texelFetch(iChannel0,ivec2(i+u),0) \n\nM {\n\n    float mass = 0.0;\n    vec2 new_velocity = vec2(0.0);\n    //r *= 0.;\n    for(vec2 i = vec2(-7); ++i.x < 7.;) for(i.y = -7.; ++i.y < 7.;) {\n        vec4 neighbor = A(i);\n        vec2 n_velocity = vec2(neighbor.xy);              // neighbour velocity\n        float n_mass = neighbor.z;\n        vec2 n_destination = n_velocity+i;\n        vec2 fluid_forces = -n_destination * (n_mass - 1.);\n        float kernel = exp(-dot(n_destination,n_destination)) / 3.14;\n        float mass_transport = n_mass * kernel;\n        \n        mass += mass_transport;\n        new_velocity += (n_velocity + fluid_forces) * mass_transport;\n\n        //vec2 v = A(i).xy;\n        //r += A(i).z                                // neighbour mass\n        //        * exp(-dot(v+i,v+i)) / 3.14        // normalised Gaussian\n        //        * vec4(mix(v+v+i, v, A(i).z),1,1); // velocity contribution\n    }\n    new_velocity *= mass == 0. ? 0. : 1./mass;\n    //new_velocity = clamp(new_velocity, -7.*.95, 7.*.95);\n    \n    r.z = mass;\n    r.xy = new_velocity;\n\n    //r.xy = r.xy / (r.z + .000001);\n    if(iFrame % 1000 == 1) {\n        vec2 m = 4.*u/iResolution.xy-2.;\n        r += vec4(m,1,0) * exp(-dot(m,m));\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}