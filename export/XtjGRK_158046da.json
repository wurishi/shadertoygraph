{"ver":"0.1","info":{"id":"XtjGRK","date":"1430358229","viewed":108,"name":"Untitled #2","username":"kindofsleepy","description":"More practice","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"\tvec2 vUv = ( gl_FragCoord.xy / iResolution.xy );\n    vec4 texture1 = texture(iChannel0, vUv, -0.8);\n\nvec2 barrelDistortion(vec2 coord, float amt) {\n\t\n\tvec2 cc = coord - 0.5;\n\tfloat dist = dot(cc, cc);\n\t//return coord + cc * (dist*dist)  * amt;\n\treturn coord + cc * dist * amt * 29.0;\n\n}\n\n\nfloat nrand( vec2 n ) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec3 mod289(vec3 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n#define PI 3.141592653589793\n#define R 4.\nvec3 sirpinski(){\t\nvec2 uv = ( gl_FragCoord.xy / iResolution.xy );\n\tuv \t\t= uv * 2. - 1.;\n\tuv.x \t\t*= iResolution.x/iResolution.y;\n\t\t\n\t\n\tfloat t \t= sqrt(2.)/0.4;\n\tvec3 uvw\t= vec3((t*uv.x-uv.y), -(t*uv.x+uv.y), uv.y*2.);\n\t\t\n\tvec3 f \t\t= vec3(0.);\n\t\n\tvec3 r \t\t= vec3(0.);\t\n\t\n\tfloat e \t= .25;\n\tfor(float i = 1.; i <= R; i++)\n\t{\n\t\tf \t= 1.-vec3((mod(e * uvw.x, 1.) < .5 ^^ mod(e * uvw.y, 1.) < .5));\n\t\t\n\t\tf \t*= fract(uvw*e);\n\t\t\n\t\tr\t+= abs(f/i*2.5)-.25;\n\t\t\n\t\te \t*= 2.;\t//(mouse.x-.5)*32.;\t\n\t}\n\t\n\tr\t*= r/R;\n\t\n\tvec4 a2=texture(iChannel3, vUv);\n\tvec4 sound = texture(iChannel3, barrelDistortion(vUv,1.6));\n\t\n\n    return r;\n}\n// thank you internet for this random function\nvec2 rand22(in vec2 p)\n{\n\treturn fract(vec2(sin(p.x * 591.32 + p.y * 154.077), cos(p.x * 391.32 + p.y * 49.077)));\n}\n\n// i just faked the vec3 version frin the one above by adding random numbers, no idea if it's \"correct\"\nvec3 rand33(in vec3 p)\n{\n\treturn fract(vec3(sin(p.x * 591.32 + p.y * 154.077 + p.z * 712.223 ), cos(p.x * 391.32 + p.y * 49.077 + p.z * 401.326), cos (p.x * 1010.22 + p.y * 27.311 + p.z* 131.44)));\n}\n\nfloat dst(vec3 r) {\n\t//return max(abs(r.x), abs(r.y));\n\treturn length(r);\n}\n\nvec3 voronoi(in vec3 x)\n\t{\n\tvec3 n = floor(x); // grid cell id\n\tvec3 f = fract(x); // grid internal position\n\tvec3 mg; // shortest distance...\n\tvec3 mr; // ..and second shortest distance\n\tfloat md = 5.0, md2 = 1.0;\n\tfor(int j = -1; j <= 1; j ++)\n\t\t{\n\t\tfor(int i = -1; i <= 1; i ++)\n\t\t\t{\n\t\t\t\tfor(int k = -1; k <= 1; k ++)\n\t\t\t\t{\t\n\t\t\t\t\tvec3 g = vec3(float(i), float(j), float(k)); // cell id\n\t\t\t\t\tvec3 o = rand33(n + g); // offset to edge point\n\t\t\t\t\tvec3 r = g + o - f;\n\t\t\t\t\t\n\t\t\t\t\tfloat d = dst(r); // distance to the edge\n\t\t\t\t\t\n\t\t\t\t\tif(d < md)\n\t\t\t\t\t\t{\n\t\t\t\t\t\tmd2 = md; md = d; \n\t\t\t\t\t\t\tmr = r; mg = g;\n\t\t\t\t\t\t}\n\t\t\t\t\telse if(d < md2)\n\t\t\t\t\t\t{\n\t\t\t\t\t\tmd2 = d;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\treturn vec3((n + mg).xy, md);\n\t}\n// Classic Perlin noise\nfloat cnoise(vec3 P)\n{\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n  return 2.2 * n_xyz;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 p = ( fragCoord.xy / iResolution.xy );\n\n\n   \tfloat col = 0.0;\n\n    float noise = cnoise(vec3(p*10.,iTime));\n    vec3 pinski = vec3(sin(iTime)*0.4,sin(noise) * 0.05,noise) / sirpinski();\n\tfragColor = vec4(vec3(voronoi(pinski)), 1.0) * texture1;\n\n}","name":"","description":"","type":"image"}]}