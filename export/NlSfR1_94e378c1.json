{"ver":"0.1","info":{"id":"NlSfR1","date":"1659841103","viewed":89,"name":"take turns expanding","username":"HaleyHalcyon","description":"aoeuaoeueao","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["spiralblocksstairs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// I don't call it \"TAU\" because it's actually just 2 pi\n#define TURN 6.283185\n// Converts a color hex code into vec3 representation\n// e.g. if you want pure magenta, HEX(0xFF00FF) results in vec3(1., 0., 1.)\n#define HEX(x) vec3((ivec3(x) >> ivec3(16, 8, 0)) & 255) / 255.\n\n// Converts a saw wave [0, 1) into a triangle wave [0, 1].\n// 0 -> 0, 0.5 -> 1, 1 -> 0\nfloat zigzag(float x) {\n    return 1. - (abs(1. - 2. * x));\n}\n\n// Smooth interpolation I used back when I did perlin noise stuff.\nfloat fade(float t) {\n    return t * t * t * (t * (t * 6. - 15.) + 10.);\n}\n\n// Smooth stepping effect. Used for the expanding parts of the rings.\n// From 0.0 to FADE_THRES:\n//   fade(x^2), where fade() is defined above, and\n//   x is t / FADE_THRES (i.e. it goes from 0 to 1).\n// From FADE_THRES to 1.0:\n//   constant.\n\n// default 0.65\n#define FADE_THRES 0.65\nfloat steppedFade(float t) {\n    return mix(\n        fade(t/FADE_THRES * t/FADE_THRES), 0.0,\n        step(FADE_THRES, t)\n    );\n}\n\n// Returns one of three predefined colors based on the fractional portion of x.\n// It does some smoothing, but since it's used after the angle value is stepped,\n// it results in jaggies here. I used this for making a .GIF file, so this was ideal anyway.\n#define COLOR_SMOOTHING 1.5\nvec3 colorize(float x) {\n    float factor = fract(x) * 3.0;\n    float dx = 0.5;\n    float f0 = smoothstep(0., dx * COLOR_SMOOTHING, factor);\n    float f1 = smoothstep(0., dx * COLOR_SMOOTHING, factor - 1.);\n    float f2 = smoothstep(0., dx * COLOR_SMOOTHING, factor - 2.);\n    return (\n        HEX(0x009BE8) * (f0 - f1) +\n        HEX(0xEB0072) * (f1 - f2) +\n        HEX(0xfff100) * (f2 - f0 + 1.)\n    );\n}\n\n// The \"zoom level\" of the entire thing. Smaller is more spaced out.\n// default 1.5\n#define SCALE 1.5\n// The number of slices in the circle. Should be a multiple of 3,\n// or else the left edge will have the wrong color\n// default 30.\n#define SLICES (10. * 3.)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // time loops every 2.0 seconds\n    float t = fract(iTime / 2.0);\n    \n    // Normalized pixel coordinates (0 at center, 1 at edges)\n    vec2 uv = (2. * fragCoord - iResolution.xy);\n    \n    // convert to log-polar coordinates,\n    // the angle in (-0.5, 0.5]\n    vec2 rt = vec2(\n        log(length(uv)) * SCALE,\n        atan(uv.y, uv.x) / TURN\n    );\n    \n    // find the closest angle slice\n    float angleStep = floor(rt.y * SLICES - 0.5);\n    \n    // get the time offset for the current angle slice\n    float fadeFactor = steppedFade(\n        fract(-t - angleStep / SLICES)\n    );\n    \n    // get the brightness of the current angle slice,\n    // based on the time offset, distance, and time\n    float stripeLevel = zigzag(\n        fract(\n            3. * fadeFactor\n            + rt.x + 1. * t\n        )\n    );\n    \n    // threshold without antialias\n    //stripeLevel = step(0.5, stripeLevel);\n    // buggy antialiased threshold (comment out line above to test)\n    float stripeSmooth = min(0.1, fwidth(stripeLevel));\n    stripeLevel = smoothstep(-stripeSmooth, stripeSmooth, stripeLevel - .5);\n    \n    // get the color of the current slice, or pure black if stripeLevel is 0\n    vec3 sliceColor = mix(\n    HEX(0x010a31),\n    colorize(angleStep / 3.0),\n    stripeLevel);\n    \n    // radar-like bright ray (commented out by default)\n//    sliceColor = sliceColor * (1. + 0.15 * fadeFactor) + 0.25 * max(0.0, 1.0 - 3.0 * (1.0 - fadeFactor));\n\n    // Output to screen\n    fragColor = vec4(sliceColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}