{"ver":"0.1","info":{"id":"sddBzl","date":"1657038296","viewed":366,"name":"Kaleidoscopic Warp Tunnel","username":"Hyeve","description":"I mean... ","likes":16,"published":1,"flags":32,"usePreview":0,"tags":["3d","raymarching","transparency","glass","reflections","crystal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//See the common tab for fps control.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define DTR 0.01745329\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\n\nvec2 uv=vec2(0);\nvec3 cp,cn,cr,ss,oc,gl=vec3(0),vb,ro,rd,so,ld;\nvec4 fc=vec4(0),cc=vec4(0);\nfloat tt,cd,sd,md,io,oa,td=0.,li;\nint es=0,ec=0,fi=1;\n\n\nfloat bx(vec3 p,vec3 s){vec3 q=abs(p)-s;return min(max(q.x,max(q.y,q.z)),0.)+length(max(q,0.));}\nfloat cy(vec3 p, vec2 s){p.y+=s.x/2.;p.y-=clamp(p.y,0.,s.x);return length(p)-s.y;}\nfloat tor(vec3 p,vec2 t){return length(vec2(length(p.xz)-t.x,p.y))-t.y;}\nfloat gy(vec3 p, vec3 s){return (abs(dot(sin(p*s.x),cos((p*s.y).zxy)))-s.z)/(max(s.x,s.y)*1.8);}\nfloat smin(float a, float b, float k){float h=clamp(0.5+0.5*(b-a)/k,0.,1.);return mix(b,a,h)-k*h*(1.-h);}\n\nfloat h11 (float a){return fract(sin((a)*12.9898)*43758.5453123);}\n\n#define pi 3.1415926535\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ){\n    return a + b*cos(2.*pi*(c*t+d));\n}\n\nvec3 mpal(vec3 pt)\n{\n\t\tvec3 e = vec3(0.5); return pal(length(vec3(pt.z,sin(pt.y)*0.5,cos(pt.x)*0.5)), e*0.8,e-0.1,e,vec3(0.11,0.33,0.66));\n}\n\nfloat mid()\n{\n\tfloat s = pow(sin(tt)*0.5+0.5,1.5);\n\treturn sin(s + tt*0.1)*pi;\n}\n\nfloat mp(vec3 p)\n{\t\n\t\tvec3 pp = p;\n\t\n\t\tp.xy *= rot(tt*0.1);\n\t\tp.xy += sin(p.z*0.1);\n\t\n\t\tp.z += tt*4.;\n\t\tp.z=mod(p.z,30.)-15.;\n\t\n\t\tfor(float i = 0.; i < 4.; i++)\n\t\t{\n\t\t\tp.xy = abs(p.xy) - 1.7;\n\t\t\tp.xy *= rot(i + tt*0.1);\n\t\t\tp.z=abs(p.z)-3.;\n\t\t}\n\t\t\n\t\t\n\t\tsd = bx(p,vec3(1.5,1.5,1));\n\t\tsd = max(-cy(pp.yzx, vec2(100,5)),sd);\n\t\tsd = min(sd,bx(pp+vec3(0,0,-15),vec3(10,10,1)));\n\t\t//sd = min(sd, length(pp-vec3(0,0,-50))-5.);\n\t\n\t\tsd=abs(sd)-0.001;\n\t\n\n\t\t\n\t\tif(sd<0.01)\n\t\t{\t\n\t\t\tio=-1. + length(pp.xy)*0.35 > 1. ? length(pp.xy)*0.5 : -1.;\n\t\t\toc=vec3(0.);\n\t\t\toa=0.2;\n\t\t\tss=mpal(vec3(p.xy,mid())) * (sin(p.x + p.y*1.1 + p.z*1.3)*0.5+0.5);\n\t\t\tec=2;\t\n\n\t\t}\n\t\treturn sd;\n}\n\nvoid nm(){mat3 k=mat3(cp,cp,cp)-mat3(.001);cn=normalize(mp(cp)-vec3(mp(k[0]),mp(k[1]),mp(k[2])));cn=normalize(cn);}\nvoid shtr(){so=cp+cn*0.05;md=64.;for(li=cd=0.;cd<64.;li++,cd+=mp(cp=ro+cn*0.05-ld*cd)){if(sd<md&&sd<cd)md=sd;if(sd<0.001||li>64.)break;}}\nvoid tr(){for(li=cd=0.;cd<128.;){li++;cd+=mp(cp=ro+rd*cd);td+=sd;if(sd<0.0001||li>512.)break;}nm();}\n\n\nvoid px(vec3 rd)\n{\n  vec3 bg=cc.rgb=mpal(vec3(2,0,mid()))*0.5 -pow(length(uv),4.)*0.8+gl;\n\tif(cd<128.)\n\t{cc.a=oa;ld=normalize(cp-vec3(0, 0, -40));\n\tfloat df=max(dot(cn,-ld),0.),sp=max(1.-length(cross(rd+ld,cn)),0.)*(1.2-oa),\n\tfo = exp(-pow(0.001*td,10.)),ao=1.-clamp(mp(cp+cn*.1)/.1,0.,1.);\n\tvec3 fr=pow(1.-abs(dot(rd,-cn)),3.)*mix(cc.rgb,oc,0.);\n  cc.rgb=(oc*df+fr+sp+ss)-ao*0.;\n\tshtr();cc.rgb-=(1.-clamp(md/0.05,0.,1.))*0.3;\n\tcc.rgb = mix(bg, cc.rgb, fo);}\n\telse cc.a=1.;cc.rgb+=gl;\n\tcc.rgb*=max(max(cc.r,max(cc.g,cc.b)),1.);\n}\n\nvoid render(vec2 frag, vec2 res, float time, out vec4 col)\n{\n  uv=vec2(frag.x/res.x,frag.y/res.y);\n  uv-=0.5;uv/=vec2(res.y/res.x,1);\n\ttt=mod(time+10.,100.);\n\t\n  ro=vec3(cos(tt)*0.3,sin(tt)*0.3,-45. + (length(uv)+0.1)*pow(sin(tt)*0.5+0.5,1.5)*50.);\n\trd=normalize(vec3(uv*(cos(tt*0.5)*0.1+0.9),1.));\n\t\n\tfor(int i=0;i<10;i++)\n  {\n\t\ttr();ro=cp-cn*(io<0.?-0.01:0.01);\n\t\tcr=refract(rd,cn,i%2==0?1./io:io);\n    if((length(cr)==0.&&es<=0)||io<0.)\n\t\t{i++;cr=reflect(rd,cn);es=(io<0.?es:ec);}\n\t\tpx(rd);if(max(es,0)%3==0) rd=cr;\n\t\tes--;fc=fc+vec4(cc.rgb*cc.a,cc.a)*(1.-fc.a);\n\t\tif(fc.a>=1.)break;\n  }\n  col=fc/fc.a;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(mod(float(iFrame), 60./FPS) < 1. || iFrame < 5) render(fragCoord.xy,iResolution.xy,iTime,fragColor);\n    else fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"//fps control for performance. Assumes the refresh rate of your monitor is 60hz\n//(120hz monitor set to 30 here will actually run at 60fps)\n#define FPS 30.","name":"Common","description":"","type":"common"}]}