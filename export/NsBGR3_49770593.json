{"ver":"0.1","info":{"id":"NsBGR3","date":"1617704465","viewed":54,"name":"noise function test","username":"KeyJ","description":"Test of four different 2D -> 1D noise functions. Each quadrant shows a different approach.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// test of four different 2D noise functions\n\n\n// helper function\nfloat uint2float(uint x) {\n    return uintBitsToFloat((x & 0x007FFFFFu) | 0x3F800000u) - 1.0;\n}\n\n\n// [UPPER LEFT] the ubiquitous formula of unknown origin\nfloat randSin(vec2 xy){\n  return fract(sin(dot(xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n\n// [UPPER RIGHT] static.frag by Spatial, https://stackoverflow.com/a/17479300/15564070\nuint hash(uint x) {\n    x += (x << 10u);\n    x ^= (x >>  6u);\n    x += (x <<  3u);\n    x ^= (x >> 11u);\n    x += (x << 15u);\n    return x;\n}\nfloat randSpatial(vec2 xy) {\n    uvec2 u = floatBitsToUint(xy);\n    return uint2float(hash(u.x ^ hash(u.y)));\n}\n\n\n// [LOWER LEFT] dcerisano \"Gold Noise\", adapted from https://www.shadertoy.com/view/ltB3zD\nconst float PHI = 1.61803398874989484820459;\nfloat randGold(vec2 xy) {\n    return fract(tan(distance(xy * PHI, xy) * 13.37) * xy.x);\n}\n\n\n// [LOWER RIGHT] Inigo Quilez, adapted from https://www.shadertoy.com/view/XlXcW4\nfloat randQuilez(vec2 xy) {\n    const uint k = 1103515245u;\n    uvec3 x = uvec3(floatBitsToUint(xy), 0x13375EEDu);\n    x = ((x >> 8u) ^ x.yzx) * k;\n    x = ((x >> 8u) ^ x.yzx) * k;\n//    x = ((x >> 8u) ^ x.yzx) * k;  // <- enable this if RGB output is desired\n    return uint2float(x.r);\n}\n\n\n// test harness\nvoid mainImage(out vec4 fragColor, vec2 xy) {\n    bvec2 quadrant = lessThan(xy, 0.5 * iResolution.xy);\n    float n = (quadrant.y) ? (quadrant.x ? randGold(xy)       // lower left\n                                         : randQuilez(xy))    // lower right\n                           : (quadrant.x ? randSin(xy)        // upper left\n                                         : randSpatial(xy));  // upper right\n    fragColor = vec4(vec3(n), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}