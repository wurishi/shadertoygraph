{"ver":"0.1","info":{"id":"XX2XRm","date":"1710400482","viewed":29,"name":"TP3 Broillet Virgile","username":"Virgile1301","description":"TP3","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["tp3"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int Steps = 200;      // Number of steps\nconst float Epsilon = 0.01; // Marching epsilon\n\nvec3 Rotate(vec3 p, vec3 ax, float angle)\n{\n    float c = cos(angle);\n    float s = sin(angle);\n    float t = 1.0 - c;\n    \n    // creation of a 3*3 rotation matrix\n    mat3 rotationMatrix = mat3(\n        t * ax.x * ax.x + c, t * ax.x * ax.y - s * ax.z, t * ax.x * ax.z + s * ax.y,\n        t * ax.x * ax.y + s * ax.z, t * ax.y * ax.y + c,     t * ax.y * ax.z - s * ax.x,\n        t * ax.x * ax.z - s * ax.y, t * ax.y * ax.z + s * ax.x, t * ax.z * ax.z + c\n    );\n\n    return rotationMatrix * p;\n}\n\n// Primitives\n\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\nfloat Sphere(vec3 p,vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n// Plane\n// p : point\n// c : center of skeleton\n// n : Normal\nfloat Plane(vec3 p,vec3 c,vec3 n)\n{\n  return dot(p-c,n);\n}\n\n\n\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n  return min(a,b);\n}\n\n// Union, extension to four sub-trees\n// a,b,c : field function of left and right sub-trees\nfloat Union(float a,float b,float c,float d)\n{\n  return min(min(a,b),min(c,d));\n}\n\n\n// Difference\n// a,b : field function of left and right sub-trees\nfloat Difference(float a,float b)\n{\n  return max(a,-b);\n}\n\nfloat Inter(float a, float b){\n    return max(a,b);\n}\n\n// Box (could be a cube orr a rectangle)\n// p: point\n// c: center of the box\n// r: radius\n// x: length of the box\n// y: width of the box\n// z: height of the box\nfloat Box(vec3 p, vec3 c, float r, float x, float y, float z)\n{\n  vec3 p1 = c + vec3(r+x,0,0);\n  vec3 p2 = c + vec3(-r-x,0,0);\n  vec3 p3 = c + vec3(0,r+y,0);\n  vec3 p4 = c + vec3(0,-r-y,0);\n  vec3 p5 = c + vec3(0,0,r+z);\n  vec3 p6 = c + vec3(0,0,-r-z);\n  float plan1 = Plane(p, p1, vec3(1.,0,0));\n  float plan2 = Plane(p, p2, vec3(-1.,0,0));\n  float plan3 = Plane(p, p3, vec3(0,1.,0));\n  float plan4 = Plane(p, p4, vec3(0,-1.,0));\n  float plan5 = Plane(p, p5, vec3(0,0,1.));\n  float plan6 = Plane(p, p6, vec3(0,0,-1.));\n  \n  float v = Inter(plan6,Inter(plan5,Inter(plan4,Inter(plan3,Inter(plan1,plan2)))));\n  \n  return v;\n  \n}\n\n\n// Create Fences on the 9 colomns building\n//p :point\n//cBody: center of the body\n//FBar: Fisrt bar\n//MBar: Middle bar\n//LBar: Last Bar\n//LSphere: Sphere on the left of the body\n//RSphere: Sphere on the right of the body\n//h :hight of the fence\nfloat Fence(vec3 p, vec3 cBody, vec3 FBar, vec3 MBar, vec3 LBar, vec3 LSphere, vec3 RSphere, float h){\n    \n    vec3 PointRotate =  Rotate(vec3(p.x,p.y,p.z), vec3(0.0,0.0,1.0), 0.);\n    \n    float LeftSphere = Sphere(p, LSphere, 0.5);\n    float RightSphere = Sphere(p, RSphere, 0.5);\n    float bar0 = Box(p, FBar, 3., -2.8, -2.8, h);\n    float bar1 = Box(p, MBar, 3., -2.8, -2.8, h);\n    float bar2 = Box(p, LBar, 3., -2.8, -2.8, h);\n    \n    float bars = Union(Union(bar0, bar1), bar2);\n    \n    float body0 = Union(bars, Difference(Box(PointRotate, cBody, 3., -2.7, 0., h), \n                    Box(PointRotate, cBody, 2.5, 1., -0.1, h*0.9)));    \n        \n        \n    float fence = Union(Union(body0, RightSphere), LeftSphere);\n    \n    return fence;\n}\n\n\n\n// Potential field of the object\n// p : point\nfloat object(vec3 p)\n{\n    float v = Sphere(p, vec3(3.0, 0.0, 6.0), 4.0);\n    v = Union(v, Sphere(p, vec3(0.0, 2.0, 3.0), 3.0));\n\n    float d = Union(\n        Sphere(p, vec3(5.0, 1.0, 5.0), 3.0),\n        Sphere(p, vec3(-1.0, 1.0, 6.0), 3.0),\n        Sphere(p, vec3(-1.0, 2.0, 2.0), 2.0),\n        Sphere(p, vec3(1.0, 1.0, 6.0), 2.0)\n    );\n    \n    float fence0 = Fence(vec3(p.x,p.y,p.z+9.), vec3(0,2.5,5), vec3(0.,1,5), vec3(0.,2.5,5), vec3(0.,3.8,5), vec3(0,-0.1,6.8), vec3(0,5.2,6.8), -1.6);\n\n\n    v = Difference(v, d);\n    v = Union(fence0 ,Union(v, Plane(p, vec3(0.0, 0.0, -6.0), vec3(0.0, 0.0, 1.0))));\n    \n    \n\n\n  return v;\n}\n\n// Analysis of the scalar field --------------------------------------------------------------------------\n\n// Calculate object normal\n// p : point\nvec3 ObjectNormal(in vec3 p )\n{\n  const float eps=.001;\n  vec3 n;\n  float v=object(p);\n  n.x=object(vec3(p.x+eps,p.y,p.z))-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z))-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps))-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance \n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o, vec3 u, float e,out bool h,out int s)\n{\n  h = false;\n\n    // Start at the origin\n    float t=0.0;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = object(p);\n    // Hit object\n      if (v < 0.0)\n      {\n          s=i;\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += max(Epsilon,v);\n      // Escape marched too far away\n      if (t>e)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(0.65,0.75,0.995),vec3(0.652,0.697,0.995), d.z*0.5+0.5);\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n    bool h;\n    int s;\n    float t = SphereTrace(p,l,100.0,h,s);\n    if (!h)\n    {\n     return 1.0;\n    }\n    return 0.0; \n}\n\nconst float PI = 3.14159265359;\n\n// Fonction pour calculer le i-ème point d'une série de n sur une sphère\nvec3 FibonacciPoint(int i, int n) {\n    float phi = PI * (3.0 - sqrt(5.0)); // Angle d'or\n    float y = 1.0 - (float(i) / float(n - 1)) * 2.0; // Coordonnée y\n    float radius = sqrt(1.0 - y * y); // Rayon du cercle de base\n    \n    float theta = phi * float(i); // Angle pour la projection\n    \n    float x = cos(theta) * radius; // Coordonnée x\n    float z = sin(theta) * radius; // Coordonnée z\n    \n    return vec3(x, y, z);\n}\n\n// SoftSHadow\n// Je ne comprends pas pouquoi cette fonction me génère plusieurs ombres\n// comme si il y a avait plusieurs sources lumineuses...\n//\nfloat SoftShadow(vec3 p, vec3 nor, vec3 light, int nb) \n{\n       float l = 0.0;\n\n        for (int i = 0; i < nb; i++){\n            vec3 si = FibonacciPoint(i, nb);\n            l += Shadow(p, si, light);\n        }\n        \n        float result = l / float(nb);\n        return l / 40.;\n}\n\nvec3 Background(vec3 d)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),d.z*.5+.5);\n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p,vec3 n,vec3 e)\n{\n  // Point light\n  const vec3 lp=vec3(-60.,5.,50.);\n  \n  // Light direction to point light\n  vec3 l=normalize(lp-p);\n  \n  // Ambient color\n  vec3 ambient=.25+.25*Background(n);\n  \n  // Shadow computation \n  float shadow = SoftShadow(p+0.01*n,n, l, 40);\n  \n  // Phong diffuse\n  vec3 diffuse=.35*clamp(dot(n,l),0.,1.)*vec3(1.,1.,1.);\n  \n  // Specular\n  vec3 r=reflect(e,n);\n  vec3 specular=.15*pow(clamp(dot(r,l),0.,1.),35.)*vec3(1.,1.,1.);\n  vec3 c=ambient+shadow*(diffuse+specular);\n  return c;\n}\n\n// Picture in picture ------------------------------------------------------------------------------\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n   float t=float(n)/(float(Steps-1));\n   return 0.5+mix(vec3(0.05,0.05,0.5),vec3(0.65,0.39,0.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel, out bool pip)\n{\n    // Pixel coordinates\n    vec2 p = (-iResolution.xy + 2.0*pixel)/iResolution.y;\n   if (pip==true)\n   {    \n    const float fraction=1.0/4.0;\n    // Recompute pixel coordinates in sub-picture\n    if ((pixel.x<iResolution.x*fraction) && (pixel.y<iResolution.y*fraction))\n    {\n        p=(-iResolution.xy*fraction + 2.0*pixel)/(iResolution.y*fraction);\n        pip=true;\n    }\n       else\n       {\n           pip=false;\n       }\n   }\n   return p;\n}\n\n\n// Image\nvoid mainImage( out vec4 color, in vec2 pxy )\n{\n    // Picture in picture on\n    bool pip=true;\n    \n   // Pixel\n     vec2 pixel=Pip(pxy, pip);\n    \n    // Mouse\n    vec2 m=iMouse.xy/iResolution.xy;\n\n    // Camera\n    vec3 ro,rd;\n    Ray(m,pixel,ro,rd);\n\n  // Trace ray\n\n  // Hit and number of steps\n  bool hit;\n  int s;\n\n  float t = SphereTrace(ro, rd, 100.0,hit, s);\n  \n    // Position \n    vec3 pt = ro + t * rd;\n    \n  // Shade background\n  vec3 rgb = background(rd);\n\n  if (hit)\n  {\n    // Compute normal\n    vec3 n = ObjectNormal(pt);\n\n    // Shade object with light\n    rgb = Shade(pt, n, rd);\n  }\n\n  // Uncomment this line to shade image with false colors representing the number of steps\n  if (pip==true)\n  {\n      rgb = ShadeSteps(s); \n  }\n\n\n  color=vec4(rgb, 1.0);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Camera -----------------------------------------------------------------------\n\n\n\n// Rotation matrix around x axis\n// a : Angle\nmat3 Rx(float a)\n{\n  float sa = sin(a);\n  float ca = cos(a);\n  return mat3(1., 0., 0.,\n              0., ca, sa,\n              0., -sa, ca);\n}\n\n\n// Rotation matrix around y axis\n// a : Angle\nmat3 Ry(float a)\n{\n  float sa = sin(a);\n  float ca = cos(a);\n  return mat3(ca, 0., -sa,\n              0., 1., 0.,\n              sa, 0., ca);\n}\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,  sa, 0.\n             ,-sa, ca, 0.\n             ,0.,  0., 1.);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(vec2 m,vec2 p,out vec3 ro,out vec3 rd)\n{\n  float a=3.*3.14*m.x;\n  float le=3.5;\n  \n  // Origin\n  ro=vec3(45.,0.,25.);\n  ro*=Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(0.,0.,1.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  rd=normalize(p.x*u+p.y*v+le*w);\n}","name":"Common","description":"","type":"common"}]}