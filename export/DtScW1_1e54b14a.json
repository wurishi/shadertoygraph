{"ver":"0.1","info":{"id":"DtScW1","date":"1691695780","viewed":61,"name":"perlin vectors","username":"suwqymncwec","description":"perlin vectors","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["perlin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define Pi 3.14159\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 st = fragCoord.xy/iResolution.xy;\n    st.x *= iResolution.x/iResolution.y;\n    vec2 uv = st;\n    \n    float size = 24.;\n    float sf = pow((size-distance(vec2(.5)*size, st*size))/size,2.);\n    float s = size-distance(vec2(.5)*size, floor(st*size));\n    \n    vec2 sv = floor(uv*size)/size;\n    // sv += u_time;\n    sv *= 1.5;\n    uv = fract(uv*size);\n    vec3 feed = vec3(sv.x, sv.y, iTime);\n    feed = sv.xyx+iTime/2.;\n    uv = rotateUV(uv, cnoise(feed)*Pi, vec2(.5));\n    \n    float sc = .06+(1.-s/size)/50.;\n    float fr = line(.65, .125, sc, uv);\n    \n    vec3 color = vec3(fr);\n    \n    fragColor = vec4(color,1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nvec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\nfloat cnoise(vec3 P){\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod(Pi0, 289.0);\n  Pi1 = mod(Pi1, 289.0);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 / 7.0;\n  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 / 7.0;\n  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n  return 2.2 * n_xyz;\n}\n\n\nvec2 rotateUV(vec2 uv, float rotation, vec2 mid) {\n    return vec2(\n      cos(rotation) * (uv.x - mid.x) + sin(rotation) * (uv.y - mid.y) + mid.x,\n      cos(rotation) * (uv.y - mid.y) - sin(rotation) * (uv.x - mid.x) + mid.y\n    );\n}\n\n// https://github.com/kbinani/colormap-shaders\nvec3 colormap(float v, float vmin, float vmax) {\n   vec3 c = vec3(1.);\n   float dv;\n   if (v < vmin) v = vmin;\n   if (v > vmax) v = vmax;\n   dv = vmax - vmin;\n   if (v < (vmin + 0.25 * dv)) {\n      c.r = 0.;\n      c.g = 4. * (v - vmin) / dv;\n   } else if (v < (vmin + 0.5 * dv)) {\n      c.r = 0.;\n      c.b = 1. + 4. * (vmin + 0.25 * dv - v) / dv;\n   } else if (v < (vmin + 0.75 * dv)) {\n      c.r = 4. * (v - vmin - 0.5 * dv) / dv;\n      c.b = 0.;\n   } else {\n      c.g = 1. + 4. * (vmin + 0.75 * dv - v) / dv;\n      c.b = 0.;\n   }\n   return c;\n}\n\nfloat line(float w, float h, float smooth_, vec2 uv) {\n    vec2 wh2 = vec2(w,h)/2.;\n    vec2 a = vec2(.5)+wh2;\n    vec2 b = vec2(.5)-wh2;\n    vec2 f = smoothstep(a, a+smooth_, uv)-smoothstep(b, b+smooth_, uv);\n    float fr = 1.-f.x*f.y;\n    return fr;\n}","name":"Common","description":"","type":"common"}]}