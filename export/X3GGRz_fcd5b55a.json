{"ver":"0.1","info":{"id":"X3GGRz","date":"1717213771","viewed":130,"name":"LMS Tonemapper","username":"justjohn","description":"A simple tonemapper that's applied per-component in the LMS color space using a generalized Reinhard curve (see https://www.desmos.com/calculator/o65tynw25b).","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["tonemapper","tonemap","srgb","lms","perceptual"],"hasliked":0,"parentid":"dlGBDD","parentname":"ZCAM Tonemapper"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    MIT License\n\n    Copyright (c) 2024 John Payne\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n*/\n\nvec3 tonemap(vec3 sRGB)\n{\n    // NOTE: Tune these params based on your use case.\n    // Desmos graph: https://www.desmos.com/calculator/cvt2brlyl3\n    const float EXPOSURE = 2.11;\n    const float CONTRAST = 1.93;\n    const float RANGE = 1.50;\n    \n    const mat3 sRGB_to_LMS = transpose(mat3(\n        0.31399022, 0.63951294, 0.04649755,\n        0.15537241, 0.75789446, 0.08670142,\n        0.01775239, 0.10944209, 0.87256922));\n\n    const mat3 LMS_to_sRGB = transpose(mat3(\n        5.47221206, -4.6419601 ,  0.16963708,\n       -1.1252419 ,  2.29317094, -0.1678952 ,\n        0.02980165, -0.19318073,  1.16364789));\n        \n    const vec3 sRGB_to_Y = vec3(0.2126729, 0.7151522, 0.0721750);\n    \n    // Apply tonescale in LMS\n    \n    vec3 LMS = sRGB_to_LMS * sRGB;\n    \n    LMS = pow(EXPOSURE * LMS, vec3(CONTRAST / RANGE));\n    LMS = LMS / (LMS + 1.0);\n    LMS = pow(LMS, vec3(RANGE));\n    \n    sRGB = LMS_to_sRGB * LMS;\n    \n    // Apply gamut mapping in sRGB\n    \n    float Y = dot(sRGB_to_Y, sRGB);\n    if (Y > 1.0)\n        return vec3(1.0);\n        \n    float minimum = min(sRGB.r, min(sRGB.g, sRGB.b));\n    if (minimum < 0.0)\n        sRGB = mix(sRGB, vec3(Y), -minimum / (Y - minimum));\n    \n    float maximum = max(sRGB.r, max(sRGB.g, sRGB.b));\n    if (maximum > 1.0)\n        sRGB = mix(sRGB, vec3(Y), (1.0 - maximum) / (Y - maximum));\n    \n    return sRGB;\n}\n\nvec3 gamma_correct(vec3 linear)\n{\n\tbvec3 cutoff = lessThan(linear, vec3(0.0031308));\n\tvec3 higher = 1.055 * pow(linear, vec3(1.0 / 2.4)) - 0.055;\n\tvec3 lower = linear * 12.92;\n\treturn mix(higher, lower, cutoff);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord / iResolution.xy;\n    vec2 position = vec2(uv.x - iTime * 0.2, 1.0 * uv.y);\n\n    vec3 sRGB = pow(sin(position.x * 4.0 + vec3(0.0, 1.0, 2.0) * 3.1415 * 2.0 / 3.0) * 0.5 + 0.5, vec3(2.0)) * (exp(abs(position.y) * 4.0) - 1.0);;\n\n    sRGB = uv.x < 0.5 ? sRGB : tonemap(sRGB);\n\n\tfragColor = vec4(gamma_correct(sRGB), 1.0);\n}","name":"Image","description":"","type":"image"}]}