{"ver":"0.1","info":{"id":"stKBWt","date":"1666104089","viewed":142,"name":"Voronoi Improvisation - E.Moret","username":"eliottmoret","description":"Having fun figuring out voronoi","likes":8,"published":1,"flags":32,"usePreview":0,"tags":["voronoi","improvisation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define A(uv) texture(iChannel0, uv).r\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 pos = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    vec3 col = vec3(0.);\n    vec2 e = vec2(0.001, 0.);\n    \n    vec3 normal = normalize(vec3\n    (\n    -(A(uv - e.xy) - A(uv + e.xy)),\n    0.025,\n    A(uv - e.yx) - A(uv + e.yx)    \n    ));\n    \n    vec2 mouse = (iMouse.xy-.5*iResolution.xy)/iResolution.y;\n    \n    vec3 pointLight = vec3(mouse.x,.5,mouse.y);\n    \n    vec3 lightVec = (pointLight - vec3(pos.x, A(uv)*.2, pos.y));  \n    vec3 lightDir = normalize(lightVec);\n    float lightDist = length(lightVec);    \n    \n    float result = dot(normal, lightDir);\n    result = pow(result, 1./2.2);\n    col = result * vec3(0.7,0.05,0.05); \n    \n    col *= (1./(lightDist*lightDist)) * .25;\n    \n    fragColor = vec4(col,0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define UI0 1597334673U\n#define UI1 3812015801U\n#define UI2 uvec2(UI0, UI1)\n#define UIF (1.0 / float(0xffffffffU))\nvec2 hash22(vec2 p)\n{\n\tuvec2 q = uvec2(ivec2(p))*UI2;\n\tq = (q.x ^ q.y) * UI2;\n\treturn vec2(q) * UIF;\n}\n\nvec2 rot(vec2 pos, float a)\n{\n    mat2 ROT = mat2(cos(a), sin(a), -sin(a), cos(a));\n    return vec2(ROT*pos);\n}\n\nvec2 getDist(vec2 uv, float size, vec2 offset)\n{\n    vec2 fracUv = fract(uv*size);\n    \n    //X = Rotation ; Y = Offset\n    vec2 id = hash22(floor(uv*size) - offset);\n    \n    id.x += iTime*.2;\n    \n    vec2 coord = fracUv - rot(vec2(1.,0.), id.x * 6.28318) * pow(id.y, 1./2.) * 0.5;\n    return coord - .5  + offset;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    uv += vec2(iTime*.2);\n    \n    float size = 5.;\n    \n    vec2 fracUv = fract(uv*size);\n    vec2 id = hash22(floor(uv*size));\n\n    float circle = 999.;\n    vec2 offset = vec2(0.,0.);\n    \n    for(float i=-1.;i<2.;i++)\n    {\n        for(float j=-1.;j<2.;j++)\n        {\n            offset = vec2(i,j);\n            circle = min(circle, length(getDist(uv, size, offset)));\n        }\n    }\n    \n    vec3 col = vec3(circle * 0.9);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}