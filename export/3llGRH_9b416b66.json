{"ver":"0.1","info":{"id":"3llGRH","date":"1555637865","viewed":124,"name":"Raymarching Beginner","username":"batman","description":"My discovery of a basic raymarching setup.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["basic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ITERATIONS 64\n#define MAX_DISTANCE 200.\n#define MIN_DISTANCE .001\n\nfloat sdSphere(vec3 pos, vec3 center, float r) {\n \treturn length(pos-center) - r;\n}\n\nfloat sdFloor(vec3 pos) {\n \treturn pos.y;\n}\n\nfloat sdScene(vec3 pos) {\n \treturn min(sdFloor(pos),sdSphere(pos, vec3(0.,0.5,-3.), .5));\n}\n\nvec3 grad(vec3 pos) {\n \tvec2 e = vec2(0.,0.1);\n    return normalize(vec3(\n        sdScene(pos + e.yxx) - sdScene(pos - e.yxx), \n        sdScene(pos + e.xyx) - sdScene(pos - e.xyx), \n        sdScene(pos + e.xxy) - sdScene(pos - e.xxy)\n    ));\n}\n\nfloat castray(vec3 ro, vec3 rd) {\n    float d = 1.;\n  \tfloat inc;\n    for(int i=0; i< ITERATIONS;i++) {\n        vec3 p = ro + d * rd;\n     \tinc = sdScene(p);\n        d += inc;\n        if(d > MAX_DISTANCE || inc <= MIN_DISTANCE) break;\n    }\n    return d;\n}\n\nfloat getDiffuse(vec3 p, float dist) {\n   vec3 lightPos = vec3(0.+3.*sin(iTime), 4.,-3.+3.*cos(iTime));\n   vec3 lightV = normalize(lightPos - p);\n   vec3 n = grad(p);\n   float d = dot(lightV,n); \n   // shadows\n    float rayToLight = castray(p, lightV);\n    if(rayToLight < length(lightPos-p)) d *=0.1;\n    return d;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord /iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n    vec3 camPos = vec3(0.,.5,0.);\n\tvec3 ro = camPos + vec3(0.,0.,1.);\n    vec3 rd = normalize(camPos + vec3(uv,0.) - ro);\n    float dist = castray(ro, rd);\n    vec3 p = ro + rd * dist;\n    float diff = getDiffuse(p, dist);\n    vec3 shade = diff*vec3(1.0,0.,0.);\n    if(diff>0.) shade += pow(diff,5.)*vec3(0.,1.,0.);\n    vec3 col = shade;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}