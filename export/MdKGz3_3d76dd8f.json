{"ver":"0.1","info":{"id":"MdKGz3","date":"1455691820","viewed":165,"name":"distance field triangle","username":"ypn","description":"triangle","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["triangle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define res iResolution.xy\n#define PI 3.14159265359\n\nvec2 rotate(vec2 o, float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return vec2(c * o.x - s * o.y, s * o.x + c * o.y);\n}\n\n\nvoid mainImage( out vec4 O, in vec2 U)\n{\n\tvec2 uv = (U.xy - res / 2.0) / res.y * 2.;\n    float t = mod(iTime, 2.0);\n    \n    float d = 0.;\n    if (t > 0.2) {\n    \td = uv.x + 0.2;\n    }\n    if (t > 0.4) {\n\t    d = max(d, rotate(uv, PI * 2./3.).x + 0.2);\n    }\n    if (t > 0.6) {\n        d = max(d, rotate(uv, -PI * 2./3.).x + 0.2);\n    }\n    if (t > 0.8) {\n    \td = smoothstep(0.8, 0.81, d);\n    }\n\tO = vec4(vec3(d),1.0);\n}","name":"Image","description":"","type":"image"}]}