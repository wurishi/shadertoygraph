{"ver":"0.1","info":{"id":"WttfWs","date":"1613848089","viewed":186,"name":"Spring Puddles, Sleeping Bugs","username":"gunthern","description":"A simple 2d pattern.","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["2d","pattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float plot(in vec2 uv, in float pct) {\n    return smoothstep(pct-.01, pct, uv.y) - smoothstep(pct, pct+.01, uv.y);\n}\n\nfloat circle(in vec2 uv, in float radius, in vec2 center) {\n    vec2 l = uv - center;\n    return 1.0 - smoothstep(radius - (radius * .05),\n                            radius + (radius * .05),\n                            dot(l,l) * 4.0);\n}\n\nfloat box (in vec2 uv, in vec2 size, in vec2 center){\n    size = vec2(0.5) - size*.5;\n    vec2 st = smoothstep (size, size+vec2(0.005), uv - center);\n    st *= smoothstep (size, size+vec2(0.005),vec2(1.0) - (uv - center));\n    float box = st.x * st.y;\n\treturn box;\n}\n\nfloat plus (in vec2 uv, in float size, in vec2 center){\n    float box0 = box(uv, vec2(size,size*0.25), center);\n    float box1 = box(uv, vec2(size*0.25,size), center);\n    return box0 + box1;\n}\n\n//from the book of shaders\nvec2 rotate2D (vec2 uv, float angle) {\n    uv -= 0.5;\n    uv =  mat2(cos(angle),-sin(angle),\n                sin(angle),cos(angle)) * uv;\n    uv += 0.5;\n    return uv;\n}\n\n//from the book of shaders, ch.09\nvec2 rotateTilePattern(vec2 uv){\n\n    float PI = 3.14159265;\n\n    //  Scale the coordinate system by 2x2\n    uv *= 2.0;\n\n    //  Give each cell an index number\n    //  according to its position\n    float index = 0.0;\n    index += step(1., mod(uv.x,2.0));\n    index += step(1., mod(uv.y,2.0))*2.0;\n\n    //      |\n    //  2   |   3\n    //      |\n    //--------------\n    //      |\n    //  0   |   1\n    //      |\n\n    // Make each cell between 0.0 - 1.0\n    uv = fract(uv);\n\n    // Rotate each cell according to the index\n    if(index == 1.0){\n        //  Rotate cell 1 by 90 degrees\n        uv = rotate2D(uv,PI*0.5);\n    } else if(index == 2.0){\n        //  Rotate cell 2 by -90 degrees\n        uv = rotate2D(uv,PI*-0.5);\n    } else if(index == 3.0){\n        //  Rotate cell 3 by 180 degrees\n        uv = rotate2D(uv,PI);\n    }\n\n    return uv;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    //Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    vec3 color = vec3(0.95,0.97,0.93);\n    color = clamp(color,0.0,1.0);\n    \n    //tile\n    vec2 uvUntiled = uv;\n    uv *= 1.5;\n    uv = fract(uv);\n    uv = rotateTilePattern(uv);\n    \n    //grid\n    color -= plus(uv, 0.06, vec2(0.0));\n    color -= plus(uv, 0.06, vec2(0.0,0.5));\n    color -= plus(uv, 0.06, vec2(0.0,-0.5));\n    color -= plus(uv, 0.06, vec2(0.5,-0.5));\n    color -= plus(uv, 0.06, vec2(-0.5,-0.5));\n    color -= plus(uv, 0.06, vec2(-0.5,0.5));\n    color -= plus(uv, 0.06, vec2(-0.5,0.0));\n    color -= plus(uv, 0.06, vec2(0.5,0.0));\n    color -= plus(uv, 0.06, vec2(0.5,0.5));\n    color = clamp(color,0.0,1.0);\n    \n    //boxes\n    color -= vec3(box(uv, vec2(.0125,.5), vec2(-0.13,0.2)));\n    color -= vec3(box(uv, vec2(.4,.0125), vec2(-0.1,0.1)));\n    color -= vec3(box(uv, vec2(.4,.0125), vec2(-0.25,0.35)));\n    color -= vec3(box(uv, vec2(.32,.0125), vec2(0.3,0.25)));\n    color -= vec3(box(uv, vec2(.0125,.35), vec2(0.14,0.2)));\n    color -= vec3(box(uv, vec2(.0125,.275), vec2(0.4,0.175)));\n    color -= vec3(box(uv, vec2(.125,.0125), vec2(0.42,0.075)));\n    color -= vec3(box(uv, vec2(.0125,.295), vec2(0.35,-0.2)));\n    color -= vec3(box(uv, vec2(.155,.0125), vec2(0.37,-0.41)));\n    color -= vec3(box(uv, vec2(.0125,.16), vec2(0.42,-0.375)));\n    color -= vec3(box(uv, vec2(.1,.0125), vec2(0.125,-0.11)));\n    color -= vec3(box(uv, vec2(.1,.0125), vec2(0.135,-0.14)));\n    color -= vec3(box(uv, vec2(.1,.0125), vec2(0.115,-0.08)));\n    color -= vec3(box(uv, vec2(.0125,.175), vec2(-0.14,-0.32)));\n    color -= vec3(box(uv, vec2(.155,.0125), vec2(-0.11,-0.36)));\n    color -= vec3(box(uv, vec2(.0125,.255), vec2(-0.36,-0.2)));\n    color = clamp(color,0.0,1.0);\n    \n    //circles\n    \n    color -= vec3(circle(uv,0.0475,vec2(0.4 + sin(iTime*.06)*.08,0.6)));\n    color += vec3(circle(uv,0.04,vec2(0.4 + sin(iTime*.06)*.08,0.6))) * vec3(.2,.8,.85);\n    color = clamp(color,0.0,1.0);\n    \n    color -= vec3(circle(uv,0.0275 + sin(iTime*.075)*.01,vec2(0.2 + sin(iTime*.06)*.1,0.85)));\n    color += vec3(circle(uv,0.0225 + sin(iTime*.075)*.01,vec2(0.2 + sin(iTime*.06)*.1,0.85))) * vec3(.85,.8,.35);\n    color = clamp(color,0.0,1.0);\n    \n    color -= vec3(circle(uv,0.0375,vec2(0.72 + sin(iTime*.068)*.01,0.72 + cos(iTime*.068)*.02)));\n    color += vec3(circle(uv,0.0315,vec2(0.72 + sin(iTime*.068)*.01,0.72 + cos(iTime*.068)*.02))) * vec3(.85,.8,.35);\n    color = clamp(color,0.0,1.0);\n    \n    color -= vec3(circle(uv,0.0085,vec2(0.9 + sin(iTime*.58)*.01,0.9 + cos(iTime*.38)*.01)));\n    color += vec3(circle(uv,0.006,vec2(0.9 + sin(iTime*.58)*.01,0.9 + cos(iTime*.38)*.01))) * vec3(.2,.8,.85);\n    color = clamp(color,0.0,1.0);\n    \n    color -= vec3(circle(uv,0.014,vec2(0.9,0.65 + cos(iTime*.48)*.01)));\n    color += vec3(circle(uv,0.0105,vec2(0.9,0.65 + cos(iTime*.48)*.01))) * vec3(.2,.8,.85);\n    color = clamp(color,0.0,1.0);\n    \n    color -= vec3(circle(uv,0.02,vec2(0.85 + sin(iTime*.34)*.01,0.36)));\n    color += vec3(circle(uv,0.016,vec2(0.85 + sin(iTime*.34)*.01,0.36))) * vec3(.85,.8,.35);\n    color = clamp(color,0.0,1.0);\n    \n    color -= vec3(circle(uv,0.0035,vec2(0.86 + sin(iTime*.35)*.026,0.06)));\n    color += vec3(circle(uv,0.002,vec2(0.86 + sin(iTime*.35)*.026,0.06))) * vec3(.2,.8,.85);\n    color = clamp(color,0.0,1.0);\n    \n    color -= vec3(circle(uv,0.01,vec2(0.62 + sin(iTime*.25)*.01,0.1 + cos(iTime*.2)*.015)));\n    color += vec3(circle(uv,0.007,vec2(0.62 + sin(iTime*.25)*.01,0.1 + cos(iTime*.2)*.015))) * vec3(.2,.8,.85);\n    color = clamp(color,0.0,1.0);\n    color -= clamp(vec3(circle(uv,0.03,vec2(0.62,0.1))) - clamp(vec3(circle(uv,0.024,vec2(0.62,0.1))) + (1. - vec3(box(rotate2D(uv,.1 + sin(iTime)*.04 - .1), vec2(.17,.17), vec2(0.2,-0.32)))),0.0,1.0),0.0,1.0);\n    color = clamp(color,0.0,1.0);\n    \n    color -= vec3(circle(uv,0.006,vec2(0.6 + sin(iTime*.24)*.01,0.25)));\n    color += vec3(circle(uv,0.004,vec2(0.6 + sin(iTime*.24)*.01,0.25))) * vec3(.4 * cos(iTime)*.4,.8,.45*sin(iTime) + .1);\n    color = clamp(color,0.0,1.0);\n    \n    color -= vec3(circle(uv,0.016,vec2(0.14,0.27 + sin(iTime*.24)*.02)));\n    color += vec3(circle(uv,0.012,vec2(0.14,0.27 + sin(iTime*.24)*.02))) * vec3(.2,.8,.85);\n    color = clamp(color,0.0,1.0);\n    \n    color -= vec3(circle(uv,0.01,vec2(0.38 + sin(iTime*.44)*.01,0.17 + cos(iTime*.48)*.01)));\n    color += vec3(circle(uv,0.007,vec2(0.38 + sin(iTime*.44)*.01,0.17 + cos(iTime*.48)*.01))) * vec3(.85,.8,.35);\n    color = clamp(color,0.0,1.0);\n    \n    color -= vec3(circle(uv,0.00275,vec2(0.1,0.1)));\n    color += vec3(circle(uv,0.0015,vec2(0.1,0.1))) * vec3(.85,.8,.35);\n    color = clamp(color,0.0,1.0);\n    \n    color -= vec3(circle(uv,0.002,vec2(0.275,0.375)));\n    color += vec3(circle(uv,0.001,vec2(0.275,0.375))) * vec3(.2,.8,.85);\n    color = clamp(color,0.0,1.0);\n    \n    //squiggles\n    float rotationSquiggle1 = 2.5 + sin(iTime*.33)*.275;\n    vec2 uvSquiggle1 = uv + vec2(0.04,-0.2);\n    color -= plot(rotate2D(uvSquiggle1, rotationSquiggle1), (sin(rotate2D(uvSquiggle1, rotationSquiggle1).x*150. + sin(iTime*3.))*.01 + 0.355)) * box(rotate2D(uvSquiggle1, rotationSquiggle1), vec2(0.1,1.0), vec2(.0,-0.1));\n    color = clamp(color,0.0,1.0);\n    \n    float rotationSquiggle2 = 1.575 + sin(iTime*.2)*.2;\n    vec2 uvSquiggle2 = uv + vec2(-0.15,-0.05);\n    color -= plot(rotate2D(uvSquiggle2, rotationSquiggle2), (sin(rotate2D(uvSquiggle2, rotationSquiggle2).x*220. + sin(iTime*4.))*.01 + 0.355)) * box(rotate2D(uvSquiggle2, rotationSquiggle2), vec2(0.075,1.0), vec2(.0,-0.1));\n    color = clamp(color,0.0,1.0);\n    \n    float rotationSquiggle3 = 0. + sin(iTime*.36)*.12;\n    vec2 uvSquiggle3 = uv + vec2(0.42,-0.3);\n    color -= plot(rotate2D(uvSquiggle3, rotationSquiggle3), (sin(rotate2D(uvSquiggle3, rotationSquiggle3).x*120. + sin(iTime*5.))*.01 + 0.355)) * box(rotate2D(uvSquiggle3, rotationSquiggle3), vec2(0.075,1.0), vec2(.0,-0.1));\n    color = clamp(color,0.0,1.0);\n    \n    float rotationSquiggle4 = 1.5 + sin(iTime*.46)*.12;\n    vec2 uvSquiggle4 = uv + vec2(-0.07,0.23);\n    color -= plot(rotate2D(uvSquiggle4, rotationSquiggle4), (sin(rotate2D(uvSquiggle4, rotationSquiggle4).x*120. + sin(iTime*4.))*.01 + 0.355)) * box(rotate2D(uvSquiggle4, rotationSquiggle4), vec2(0.095,1.0), vec2(.0,-0.1));\n    color = clamp(color,0.0,1.0);\n    \n    float rotationSquiggle5 = .8 + sin(iTime*.46)*.12;\n    vec2 uvSquiggle5 = uv + vec2(.2,0.05);\n    color -= plot(rotate2D(uvSquiggle5, rotationSquiggle5), (sin(rotate2D(uvSquiggle5, rotationSquiggle5).x*220. + sin(iTime*3.))*.01 + 0.355)) * box(rotate2D(uvSquiggle5, rotationSquiggle5), vec2(0.095,1.0), vec2(.0,-0.1));\n    color = clamp(color,0.0,1.0);\n\n    //Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}