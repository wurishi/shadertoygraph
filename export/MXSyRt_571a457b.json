{"ver":"0.1","info":{"id":"MXSyRt","date":"1727564203","viewed":87,"name":"Rock Paper Scissors Spock Lizard","username":"rattlehead","description":"Configurable number of elements (in the \"Common\" tab). Mouse click resets the state, the more right you click, the more elements are used!\n3.0: Rock, Paper, Scissors\n4.0: Rock, Paper, Scissors, Well\n5.0: Rock, Paper, Scissors, Lizard, Spock\n","likes":9,"published":1,"flags":32,"usePreview":0,"tags":["2d","mouse","buffer","cellularautomata","rockpaperscissors"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// code_31\n// Rock, Paper, Scissors\n// Rock, Paper, Scissors, Well\n// Rock, Paper, Scissors, Spock, Lizard\n//\n////////////////////////////////////\n//\n// Image\n//\n// Setup:\n// iChannel0: Buffer A\n//\n////////////////////////////////////\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n\n    float value = texelFetch(iChannel0, ivec2(fragCoord / CELL_SIZE), 0).r;\n    vec3 col = vec3(0);\n    col += vec3(1.0, 0.0, 0.0) * smoothstep(0.55, 0.45, abs(value - 0.0));\n    col += vec3(0.0, 0.8, 0.0) * smoothstep(0.55, 0.45, abs(value - 1.0));\n    col += vec3(0.0, 0.0, 1.0) * smoothstep(0.55, 0.45, abs(value - 2.0));\n    col += vec3(1.0, 0.5, 0.0) * smoothstep(0.55, 0.45, abs(value - 3.0));\n    col += vec3(0.0, 1.0, 1.0) * smoothstep(0.55, 0.45, abs(value - 4.0));\n    col += vec3(1.0, 0.0, 1.0) * smoothstep(0.55, 0.45, abs(value - 5.0));\n    col += vec3(1.0, 1.0, 1.0) * smoothstep(0.55, 0.45, abs(value - 6.0));\n\n    // lower saturation a bit\n    col = mix(vec3(0.7), col, 0.6);\n\n    // make cells circular\n    #ifdef CIRCULAR_CELLS\n        vec2 g = fract(fragCoord * 1.0 / CELL_SIZE) - 0.5;\n        col.rgb *= smoothstep(0.6, 0.3, length(g));\n    #endif\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// code_31\n// Rock, Paper, Scissors\n// Rock, Paper, Scissors, Well\n// Rock, Paper, Scissors, Spock, Lizard\n//\n////////////////////////////////////\n//\n// Common\n//\n////////////////////////////////////\n\n// activate circular cells\n// only recognizable as circles if CELL_SIZE is large, e.g. >= 9.0\n#define CIRCULAR_CELLS\n\n// size of the cells\n#define CELL_SIZE 4.0\n\n// slowing down simulation by delaying each step by this many frames\n#define SIM_STEP_DELAY 5\n\n// how many neighbors a cell has to lose to in order to be taken over\n#define BEATEN_BY 3\n\n// number of elements\n// 1 = One color, nothing happens\n// 2 = One dominates the other, converges rapidly to mono-colored\n// 3 = Rock, Paper, Scissors\n// 4 = Rock, Paper, Scissors, Well\n// 5 = Rock, Paper, Scissors, Spock, Lizard\n#define NUM_ELEMENTS 5.0\n\n\n// Pseudo-random value from 2D-Vector\nfloat rnd(vec2 p)\n{\n    p = fract(sin(p * 123.456) * 321.913);\n    p *= dot(p, p + vec2(12.34, 14.43));\n    return fract(p.x + p.y);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// code_31\n// Rock, Paper, Scissors\n// Rock, Paper, Scissors, Well\n// Rock, Paper, Scissors, Spock, Lizard\n//\n////////////////////////////////////\n//\n// Buffer A\n//\n// Setup:\n// iChannel0: Buffer A\n// iChannel1: random texture\n//\n////////////////////////////////////\n\n#define ROCK 0\n#define PAPER 1\n#define SCISSORS 2\n#define SPOCK 3\n#define LIZARD 4\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 mouse = iMouse.xy / iResolution.xy;\n\n    float value = 1.0;\n\n    if (iMouse.z > 0.0) {\n        // initialize\n        float numElements = 3. + floor(3. * iMouse.x / iResolution.x);\n        value = floor(rnd(uv + iMouse.xy) * numElements);\n    } else if (iFrame < 2) {\n        // initialize\n        value = floor(rnd(uv) * NUM_ELEMENTS);\n    } else if ((iFrame % SIM_STEP_DELAY) != 0) {\n        // just output the current state\n        value = texelFetch(iChannel0, ivec2(fragCoord), 0).r;\n    } else {\n        // do simulation step\n        int count[5];\n        int me = int(texelFetch(iChannel0, ivec2(fragCoord), 0).r);\n\n        for (int y = -1; y <= 1; y++) {\n            for (int x = -1; x <= 1; x++) {\n                int op = int(texelFetch(iChannel0, ivec2(fragCoord) + ivec2(x, y), 0).r);\n                count[op]++;\n            }\n        }\n\n        if (me == ROCK && count[PAPER] + count[SPOCK] < BEATEN_BY\n            || me == SCISSORS && count[ROCK] + count[SPOCK] >= BEATEN_BY && count[ROCK] >= count[SPOCK]\n            || me == LIZARD && count[ROCK] + count[SCISSORS] >= BEATEN_BY && count[ROCK] >= count[SCISSORS])\n            value = float(ROCK);\n        else if (me == PAPER && count[SCISSORS] + count[LIZARD] < BEATEN_BY\n            || me == SPOCK && count[PAPER] + count[LIZARD] >= BEATEN_BY && count[PAPER] >= count[LIZARD]\n            || me == ROCK && count[PAPER] + count[SPOCK] >= BEATEN_BY && count[PAPER] >= count[SPOCK])\n            value = float(PAPER);\n        else if (me == SCISSORS && count[SPOCK] + count[ROCK] < BEATEN_BY\n            || me == LIZARD && count[SCISSORS] + count[ROCK] >= BEATEN_BY && count[SCISSORS] >= count[ROCK]\n            || me == PAPER && count[SCISSORS] + count[LIZARD] >= BEATEN_BY && count[SCISSORS] >= count[LIZARD])\n            value = float(SCISSORS);\n        else if (me == SPOCK && count[LIZARD] + count[PAPER] < BEATEN_BY\n            || me == ROCK && count[SPOCK] + count[PAPER] >= BEATEN_BY && count[SPOCK] >= count[PAPER]\n            || me == SCISSORS && count[SPOCK] + count[ROCK] >= BEATEN_BY && count[SPOCK] >= count[ROCK])\n            value = float(SPOCK);\n        else if (me == LIZARD && count[ROCK] + count[SCISSORS] < BEATEN_BY\n            || me == PAPER && count[LIZARD] + count[SCISSORS] >= BEATEN_BY && count[LIZARD] >= count[SCISSORS]\n            || me == SPOCK && count[LIZARD] + count[PAPER] >= BEATEN_BY && count[LIZARD] >= count[PAPER])\n            value = float(LIZARD);\n        else value = 7.0;\n    }\n\n    fragColor = vec4(value);\n}","name":"Buffer A","description":"","type":"buffer"}]}