{"ver":"0.1","info":{"id":"clSfWt","date":"1694600688","viewed":27,"name":"Mandelbrot-with-zoom","username":"Neervana","description":"Just your run-of-the-mill mandelbrot shader, for some reason I went for gamma correction to still preserve some details, any other power function would have worked but at least this one is familiar!\n\nIf you have any ideas for a smoother zoom, tell me!","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv = (uv - 0.5F) * 2.0F;\n    \n    float zoom = (0.5 + 0.5 * sin(0.1F * iTime));\n    vec2 scaleCenter = vec2(0.35);\n    uv = (uv - scaleCenter) * zoom + scaleCenter;\n\n    vec2 z = uv; // respect naming conventions\n    \n    const float max_it = 1024.0F;\n    \n    float i;\n    for(i = 0.0F; i < max_it; ++i) {\n        \n        float real_part = z.x * z.x - z.y * z.y + uv.x;\n        float imaginary_part = 2.0F * z.x * z.y + uv.y;\n        \n        z = vec2(real_part, imaginary_part);\n        if (length(z) > 4.0F)\n        {\n            break;\n        }\n        \n    }\n    \n    float lum = i / max_it;\n    float c = pow(lum, 1. / 2.2);\n    \n    fragColor = vec4(vec3(c), 1.0F);\n    \n}","name":"Image","description":"","type":"image"}]}