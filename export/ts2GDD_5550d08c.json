{"ver":"0.1","info":{"id":"ts2GDD","date":"1548953972","viewed":174,"name":"Infinite Tetration","username":"YsmrRy","description":"a^a^a^a^a^a^a^...\n\nConvergence and divergence of infinite tetration on Gauss plane. (the coordinate corresponds to a)\nbibliography:\n(1) https://www.ajimatics.com/entry/2018/12/01/070000\n(2) http://paulbourke.net/fractals/tetration/","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float iter = 256.0;\nconst float cx = -1.0, cy = 0.0;\n\nfloat atan2(in float y, in float x){\n    return x == 0.0 ? sign(y)*3.14159265358979/2.0 : atan(y, x);\n}\n\nfloat f( float x ) {\n\treturn x*x;    \n}\n\nvec3 hsv(float h, float s, float v){\n    vec4 t = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(vec3(h) + t.xyz) * 6.0 - vec3(t.w));\n    return v * mix(vec3(t.x), clamp(p - vec3(t.x), 0.0, 1.0), s);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n\n    float x = ((uv.x-0.5)*3.0-cx)*(1.0/f(iTime))+cx, y = (uv.y*3.0-cy)*(1.0/f(iTime))+cy;\n    float r = sqrt(x*x+y*y), theta = atan2(y,x);\n    float itrX = x, itrY = y;\n    float a = 3.0;\n    \n    float i;\n    for( i = 0.0; i < iter; ++i )\n    {\n        float tmpX = itrX, tmpY = itrY;\n        \n        itrX = pow(r,tmpX)*exp(-tmpY*theta)*cos(tmpY+tmpX*theta);\n        itrY = pow(r,tmpX)*exp(-tmpY*theta)*sin(tmpY+tmpX*theta);\n       \n        if( length(vec2(itrX-x,itrY-y)) > 30.0 )\n        \tbreak;\n    }\n\n    // Output to screen\n    fragColor = vec4(vec3((10.0*i)/iter),1.0);\n    //fragColor = vec4(vec3(1.0-length(vec2(itrX-x,itrY-y))/10000.0),1.0);\n}","name":"Image","description":"","type":"image"}]}