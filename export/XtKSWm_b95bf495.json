{"ver":"0.1","info":{"id":"XtKSWm","date":"1484609385","viewed":1049,"name":"Colorful FBM Domain Warping","username":"Homaniac","description":"Inspired by http://thebookofshaders.com/13/ and https://iquilezles.org/articles/warp/warp.htm\n\nA large part of the coloring effect is due to the fact that I unintentionally did not normalize the output of the fbm function to be between 0 and 1.","likes":38,"published":1,"flags":0,"usePreview":0,"tags":["fbm","ice","domainwarping"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat random (in vec2 st) { \n  return fract(sin(dot(st.xy,\n                       vec2(12.9898,78.233)))* \n               43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n  vec2 i = floor(st);\n  vec2 f = fract(st);\n\n  // Four corners in 2D of a tile\n  float a = random(i);\n  float b = random(i + vec2(1.0, 0.0));\n  float c = random(i + vec2(0.0, 1.0));\n  float d = random(i + vec2(1.0, 1.0));\n\n  vec2 u = f * f * (3.0 - 2.0 * f);\n\n  return mix(a, b, u.x) + \n      (c - a)* u.y * (1.0 - u.x) + \n      (d - b) * u.x * u.y;\n}\n\n#define OCTAVES 16\nfloat fbm (in vec2 st) {\n  // Initial values\n  float value = 0.0;\n  float amplitude = 1.;\n  float frequency = 2.;\n  //\n  // Loop of octaves\n  for (int i = 0; i < OCTAVES; i++) {\n    value += amplitude * noise(st);\n    st *= 3.;\n    amplitude *= .5;\n  }\n  return value;\n}\n\nfloat fbmWarp2(in vec2 st, out vec2 q, out vec2 r)  {\n  q.x = fbm(st + vec2(0.0,0.0));\n  q.y = fbm(st + vec2(5.2,1.3));\n\n  r.x = fbm( st + 4.0*q + vec2(1.7,9.2) + 0.7*iTime);\n  r.y = fbm( st + 4.0*q + vec2(8.3,2.8) + 0.7*iTime);\n\n  return fbm( st + 4.0*r);\n}\n\nvec3 hsb2rgb( in vec3 c ){\n  vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                           6.0)-3.0)-1.0,\n                   0.0,\n                   1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb);\n  return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 st = gl_FragCoord.xy/iResolution.xy;\n  st.x *= iResolution.x/iResolution.y;\n\n  vec3 color = vec3(0.0);\n  vec2 q = vec2(0.);\n  vec2 r = vec2(0.);\n  float height = fbmWarp2(st*10., q, r);\n\n  color += hsb2rgb(vec3(0.3,1.0 - (0.5*sin(iTime) + 0.5),height));\n  color = mix(color, hsb2rgb(vec3(0.0,q.x,0.2 + (0.2*sin(0.7*iTime) + 0.2))), length(q));\n  color = mix(color, hsb2rgb(vec3(0.58,r.x,0.0 + (0.25*sin(0.3*iTime) + 0.25))), r.y);\n\n  fragColor = vec4(color,1.0);\n}\n","name":"Image","description":"","type":"image"}]}