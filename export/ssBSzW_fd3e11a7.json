{"ver":"0.1","info":{"id":"ssBSzW","date":"1619860959","viewed":126,"name":"Particles1","username":"Shcherbakov","description":"Shader was written on stream: https://www.youtube.com/watch?v=d1_bTyoQChU \nIn Demo mode (see DEMO_MODE define) shader spawns particles in random positions every 5 frames.\n","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["particles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.x;\n\n    /*for (int i = 0; i < 800; ++i) {\n        #if SALUTE\n        float radius = 0.02;\n        #else\n        float radius = 0.03;\n        #endif\n        vec4 particleData = texelFetch(iChannel0, ivec2(i, 0), 0);\n        if (particleData.w == 0.0) {\n            continue;\n        }\n        vec2 pos = decode_vec2(particleData.x);\n        float dist = length(pos - uv);\n        if (dist < radius) {\n            float lum = pow(1.0 - dist / radius, 3.0);\n            vec3 color = vec3(\n                random(vec2(i, 7.0)),\n                random(vec2(i, 17.0)),\n                random(vec2(i, 357.0))\n            );\n            fragColor.rgb += vec3(lum) * color;\n        }\n    }*/\n    \n    vec2 offset = vec2(0, 0);\n    vec2 scale = vec2(0.5, 0.5);\n    vec2 coord = fragCoord / iResolution.xy;\n    for (int i = 0; i < MIPS_COUNT; ++i) {\n        fragColor += texture(iChannel3, coord * scale + offset);\n        offset += scale;\n        scale *= 0.5;\n    }\n    fragColor /= float(MIPS_COUNT);\n    \n    fragColor += texture(iChannel2, fragCoord / iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 particlesData = texelFetch(iChannel1, ivec2(fragCoord), 0);\n    vec2 pos = decode_vec2(particlesData.x);\n    vec2 vel = decode_vec2(particlesData.y);\n    #if !SALUTE\n    if (pos.y < 0.0) {\n        vel.y = -vel.y;\n        vel.y *= 0.75;\n    }\n    #endif\n    pos += vel * iTimeDelta * 0.2;\n    vel.y -= iTimeDelta * 2.0;\n    particlesData.x = encode_vec2(pos);\n    particlesData.y = encode_vec2(vel);\n    uint bufferBegin = uint(texelFetch(iChannel0, ivec2(0, 0), 0));\n    uint bufferEnd = uint(texelFetch(iChannel0, ivec2(1, 0), 0));\n    uint idx = uint(fragCoord.x);\n    bool commonFill = idx >= bufferBegin && idx < bufferEnd;\n    bool overflowFill = bufferBegin > bufferEnd && (idx >= bufferBegin || idx < bufferEnd);\n    if (commonFill || overflowFill) {\n        vec2 pos = iMouse.xy / iResolution.x;\n        #if DEMO_MODE\n            pos = vec2(random(vec2(iTime, 0)), random(vec2(0, iTime)));\n        #endif\n        #if SALUTE\n        vec2 vel = vec2(sin(fragCoord.x), cos(fragCoord.x));\n        #else\n        vec2 vel = vec2(random(vec2(fragCoord.x, 5.0)), random(fragCoord)) * 2.0 - 1.0;\n        #endif\n        particlesData = vec4(encode_vec2(pos), encode_vec2(vel), iTime, 1);\n    }\n    fragColor = particlesData;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    uvec2 coords = uvec2(fragCoord);\n    if (coords.y == 0u && coords.x < 2u) {\n        #if DEMO_MODE\n        if (iFrame % 5 == 0 && coords.x == 1u) {\n        #else\n        if (iMouse.z > 0.0 && coords.x == 1u) {\n        #endif\n        #if SALUTE\n        float spawnCount = 25.0;\n        #else\n        float spawnCount = 5.0;\n        #endif\n            fragColor.x = float(int(texelFetch(iChannel0, ivec2(0, 0), 0).x + spawnCount) % 800);\n        } else {\n            fragColor.x = texelFetch(iChannel0, ivec2(1, 0), 0).x;\n        }\n    }\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.x;\n\n    for (int i = 0; i < 800; ++i) {\n        #if SALUTE\n        float radius = 0.01;\n        #else\n        float radius = 0.03;\n        #endif\n        vec4 particleData = texelFetch(iChannel0, ivec2(i, 0), 0);\n        if (particleData.w == 0.0) {\n            continue;\n        }\n        vec2 pos = decode_vec2(particleData.x);\n        float dist = length(pos - uv);\n        if (dist < radius) {\n            float lum = pow(1.0 - dist / radius, 3.0);\n            vec3 color = vec3(\n                random(vec2(particleData.z, 7.0)),\n                random(vec2(particleData.z, 17.0)),\n                random(vec2(particleData.z, 357.0))\n            );\n            fragColor.rgb += vec3(lum) * color;\n        }\n    }\n    #if SALUTE\n    fragColor += texture(iChannel1, fragCoord / iResolution.xy) * 0.8;\n    #endif\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (fragCoord.x < iResolution.x / 2.0 && fragCoord.y < iResolution.y / 2.0) {\n        fragColor = texture(iChannel0, fragCoord.xy * 2.0 / iResolution.xy);\n    }\n    vec2 src_lb = vec2(0, 0);\n    vec2 src_size = vec2(0.5, 0.5);\n    vec2 dst_lb = src_size;\n    vec2 dst_size = src_size * 0.5;\n    vec2 coord = fragCoord / iResolution.xy;\n    for (int i = 1; i < MIPS_COUNT; ++i) {\n        bool inArea = true;\n        if (coord.x > dst_lb.x + dst_size.x || coord.y > dst_lb.y + dst_size.y) {\n            inArea = false;\n        }\n        if (coord.x < dst_lb.x || coord.y < dst_lb.y) {\n            inArea = false;\n        }\n        if (inArea) {\n          vec2 sampleCoord = (coord - dst_lb) / dst_size * src_size + src_lb;\n          fragColor = texture(iChannel1, sampleCoord);\n        }\n        src_lb += src_size;\n        src_size *= 0.5;\n        dst_lb += dst_size;\n        dst_size *= 0.5;\n    }\n}","name":"Buffer D","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const float QUANT_COUNT = 65536.0 - 1.0;\n\nfloat encode_vec2(vec2 v) {\n    v = clamp(v, vec2(-3.0), vec2(3.0));\n    v /= 3.0;\n    v *= 0.5;\n    v += 0.5;\n    v *= QUANT_COUNT;\n    return uintBitsToFloat(uint(v.x) << 16 | uint(v.y));\n}\n\nvec2 decode_vec2(float vi) {\n    vec2 v = vec2(floatBitsToUint(vi) >> 16u, floatBitsToUint(vi) & 0xFFFFu);\n    v /= QUANT_COUNT;\n    v -= 0.5;\n    v *= 2.0;\n    v *= 3.0;\n    return v;\n}\n\nfloat random(vec2 uv)\n{\n    return fract(sin(dot(uv,vec2(12.9898,78.233)))*43758.5453123);\n}\n\n#define SALUTE 1\n#define DEMO_MODE 1\n\nconst int MIPS_COUNT = 10;","name":"Common","description":"","type":"common"}]}