{"ver":"0.1","info":{"id":"tsB3Ww","date":"1548984575","viewed":120,"name":"Mandelbrot Fractal Renderer -","username":"levkruglyak","description":"An interactive mandelbrot rendered using complex numbers.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define bailout 200.\nfloat mandelbrot( vec2 c ){\n    int iterations = int(iTime)*10+100;\n    \n    vec2 z = vec2(0);\n    for (int i = 0; i < iterations; i++) {\n        if (dot(z,z) > bailout * bailout) {\n        \treturn float(i)/float(iterations);   \n        }\n        z = vec2(z.x*z.x - z.y*z.y, 2.*z.x*z.y) + c;\n    }\n    \n    return 1.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 shift =iResolution.xy/2.;\n    vec2 center = vec2(1.39389,0.10990);\n    float zoom = iTime*iTime*iTime;\n    vec2 uv = (fragCoord-shift.y)/(zoom*iResolution.y) - center;\n    float outp = mandelbrot(uv);\n    fragColor = vec4(vec3(outp),1.0);\n}\n","name":"Image","description":"","type":"image"}]}