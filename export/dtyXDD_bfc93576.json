{"ver":"0.1","info":{"id":"dtyXDD","date":"1686095323","viewed":46,"name":"Weird Triangle Fractional","username":"Bannarama23","description":"I made this shader when I was trying to make a trippy equilateral triangle. ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["time","triangle","color","shader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette (float t) {\n\n    vec3 a = vec3(0.628, 0.500, 0.500);   \n    vec3 b = vec3(-2.312, 1.518, -2.222);\n    vec3 c = vec3(-0.972, 0.228, 1.000);\n    vec3 d = vec3(0.000, 0.333, 0.667);\n    \n    return a + b * cos(6.28318 * (c * t + d));\n\n}\n\nfloat sdEquilateralTriangle( in vec2 p, in float r )\n{\n    const float k = sqrt(2.0);\n    p.x = abs(p.x) - r + 0.2;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    uv.x *= 2.5;\n    uv.y *= 2.5;\n    \n    vec2 uv0 = uv;\n\n    // Time varying pixel color\n    \n    \n    vec3 finalColor = vec3(0.812,0.486,0.875); \n    \n    uv = fract(uv * 1.5) - 0.5;\n    \n    float d = sdEquilateralTriangle(uv, 1.0 );\n    \n    vec3 col = (d > 0.0) ? vec3(0.549,0.000,1.000) * (+ 0.5 + 0.5) * cos(iTime+uv.xyx+vec3(0,2,4)) : vec3(0.286,0.596,0.831) * 0.5 + 0.5 * cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    //col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}