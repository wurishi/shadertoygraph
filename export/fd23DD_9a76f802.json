{"ver":"0.1","info":{"id":"fd23DD","date":"1617452003","viewed":138,"name":"2D Tree Fractal","username":"edubart","description":"2D Tree Fractal","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal","tree"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#define USE_MOUSE\n\n#define PI 3.141592653589793238\n\nvec2 rotate2(vec2 p, vec2 sc) {\n    return vec2(p.x*sc.y - p.y*sc.x, p.x*sc.x + p.y*sc.y);\n}\n\nfloat sd_box(vec2 p, vec2 b) {\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat fractal_tree(vec2 p, int iters, float a, float f, float w) {\n    float r = f;\n    p.y = p.y - r;\n    float d = 1000.0;\n    vec2 sc = vec2(sin(a), cos(a));\n    for(int i=0;i<iters;++i) {\n      float b = w*r;\n      d = min(sd_box(p, vec2(b, r+b*0.5)), d);\n      p = vec2(abs(p.x), p.y - r);\n      r = r * f;\n      p = p - r*sc;\n      p = rotate2(p, sc);\n    }\n    return d;\n}\n\nvoid mainImage(out vec4 color, in vec2 coord) {\n    vec2 uv = 2.0*(coord-0.5*iResolution.xy)/iResolution.y;\n#ifdef USE_MOUSE\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    float branch_angle = mouse.x*PI/2.0;\n    float branch_factor = mouse.y;\n    float w = 0.1;\n#else\n    float t = iTime;\n    float branch_angle = PI/4.0 + sin(t)*PI/4.0;\n    float branch_factor = 0.5;\n    float w = branch_angle / (PI*4.0);\n#endif\n    uv.y = uv.y + 1.0;\n    float d = fractal_tree(uv, 9, branch_angle, branch_factor, w);\n    float linewidth = 4.0/iResolution.y;\n    vec3 col = vec3(smoothstep(0.0, linewidth, d) );\n    color = vec4(col,1);\n}\n","name":"Image","description":"","type":"image"}]}