{"ver":"0.1","info":{"id":"3dBSDR","date":"1553329935","viewed":181,"name":"test: fbm","username":"takumifukasawa","description":"ref.\nhttps://thebookofshaders.com/13/?lan=jp\nhttps://iquilezles.org/articles/warp/warp.htm\n","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["fbm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// ref.\n// https://thebookofshaders.com/13/?lan=jp\n// https://iquilezles.org/articles/warp\n\n#define OCTAVES 6\n\n// Get random value\nfloat random(in vec2 st)\n{\n    return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nfloat fbm(in vec2 st) {\n  float value = 0.;\n  float amp = .5;\n  float freq = 0.;\n\n  for(int i = 0; i < OCTAVES; i++) {\n    value += amp * noise(st);\n    st *= 2.1;\n    amp *= .4;\n  }\n  return value;\n}\n\nfloat pattern(in vec2 p) {\n  float f = 0.;\n  vec2 q = vec2(\n    fbm(p + iTime * .2 + vec2(0.)),\n    fbm(p + iTime * .30 + vec2(2.4, 4.8))\n  );\n  vec2 r = vec2(\n    fbm(q + iTime * .3 + 4. * q + vec2(3., 9.)),\n    fbm(q + iTime * .2 + 8. * q + vec2(2.4, 8.4))\n  );\n  f = fbm(p + r * 2. + iTime * .09);\n  return f;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  // fix aspect uv\n  vec2 uv = (fragCoord.xy - .5 * iResolution.xy);\n  uv = 2. * uv.xy / iResolution.y;\n\n  vec3 color = vec3(0.);\n  color += pattern(uv);\n\n  fragColor = vec4(color, 1.);\n}","name":"Image","description":"","type":"image"}]}