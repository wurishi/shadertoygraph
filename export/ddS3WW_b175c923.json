{"ver":"0.1","info":{"id":"ddS3WW","date":"1667673032","viewed":75,"name":"menger sponge raymarcher","username":"lolucky","description":"wasd z space and shift to move.\nI wanted to add more pleasant shading and coloring, but didn't know how ","likes":3,"published":1,"flags":48,"usePreview":0,"tags":["raymarching","fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sd_box(vec3 p) {\n    vec3 q = abs(p) - 1.;\n    return length(max(q,0.)) + min(0.,max(max(q.x,q.y),q.z));\n}\n\nfloat sd_neg_box(vec2 p) {\n    vec2 q = abs(p) - 1.;\n    return max(q.x,q.y);\n}\n\nfloat sd_neg_cross(vec3 p) {\n    return min(min(\n        sd_neg_box(p.xy),\n        sd_neg_box(p.yz)),\n        sd_neg_box(p.zx)\n    );\n}\n\nfloat N = 5.;\nvec2 sdf(vec3 p) { // x: dist, y: material\n    vec2 res = vec2(0,0);\n    res.x = sd_box(p);\n    float s = 1.;\n    for (int i = 0; i < int(N); i++) {\n        s *= 3.;\n        float d_cross = -sd_neg_cross(mod(p*s+3.,6.)-3.) / s;\n        if (d_cross > res.x) {\n            res.x = d_cross;\n            res.y = float(i+1)/N;\n        }\n    }\n    return res;\n}\n\n/////////////////////////////////////////////////////////\n\nvec3 Norm(vec3 p) {\n    vec2 e = vec2(.0001, 0);\n    return normalize(sdf(p).x - vec3(sdf(p-e.xyy).x, sdf(p-e.yxy).x, sdf(p-e.yyx).x));\n}\n\nvec2 Intersect(vec3 pos, vec3 dir) {\n    float t = 0.;\n    for (int i = 0; i < 500 && t < 5.; i ++) {\n        vec2 res = sdf(pos + dir * t);\n        t += res.x;\n        if (res.x < .000001) return vec2(t, res.y);\n    }\n    return vec2(-1);\n}\n\nvec3 c1 = vec3(1,.8,.5);\nvec3 c2 = vec3(.25,.2,.6);\nvec3 c3 = vec3(.05,.05,.1);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n\n    vec3 pos = vec3(0, 0, -1.5)+load(pos_idx).xyz;\n    vec3 dir = normalize(Rot(load(m_idx).xy) * vec3(uv, 1));\n    \n    vec2 hit = Intersect(pos, dir);\n    float t = hit.x;\n    \n    if (t == -1.) {\n        fragColor = vec4(c3, 1);\n        return;\n    }\n\n    vec3 p = pos + t * dir;\n    vec3 n = Norm(p);\n    vec3 r = reflect(dir, n);\n    float dif = dot(n, normalize(vec3(-1,3,-2)))*.5+.5;\n    fragColor = vec4(mix(c1,c2,hit.y)*dif,1);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define load(P) texelFetch(iChannel3, ivec2(P), 0)\nconst ivec2 m_idx = ivec2(0,0);\nconst ivec2 pos_idx = ivec2(1,0);\n\nconst float pi = radians(180.);\n\nmat3 Rot(vec2 m) {\n    vec2 s = sin(m);\n    vec2 c = cos(m);\n    return mat3(c.x, 0.0, -s.x, 0.0, 1.0, 0.0, s.x, 0.0, c.x)\n         * mat3(1.0, 0.0, 0.0, 0.0, c.y, s.y, 0.0, -s.y, c.y);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define store(P, V) if (all(equal(ivec2(fragCoord), P))) fragColor = V\n#define key(K)  .1*step(0.5, texelFetch(iChannel0, ivec2(K, 0), 0).x)\n\nconst int KEY_SP    = 32;\nconst int KEY_SHIFT = 16;\nconst int KEY_Z     = 90;\nconst int KEY_W     = 87;\nconst int KEY_A     = 65;\nconst int KEY_S     = 83;\nconst int KEY_D     = 68;\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\n\nconst float mv_speed1 = .01;\nconst float mv_speed2 = .5;\nconst float pan_speed = .5;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n    if(fragCoord.x >= 2. || fragCoord.y >= 1.)\n        return;\n    \n    fragColor = load(fragCoord);\n    \n    if(iTime == 0.0 || iFrame == 0) {\n        fragColor = vec4(0.);\n        store(pos_idx, vec4(0, 0, 0 , 0));\n        store(m_idx, vec4(0, 0, 0, 1));\n        return;\n    }\n    \n    vec3 pos = load(pos_idx).xyz;\n    vec2   m = load(m_idx).xy;\n    \n    store(pos_idx, vec4(pos + Rot(vec2(m.x,0)) * mix(mv_speed1, mv_speed2, key(KEY_SHIFT))\n        * vec3(key(KEY_D)-key(KEY_A), key(KEY_SP)-key(KEY_Z), key(KEY_W)-key(KEY_S)),\n    0));\n    \n    m.y = clamp(m.y, -pi*.5, pi*.5);\n    store(m_idx, vec4(\n        m + pan_speed * vec2(key(KEY_RIGHT)-key(KEY_LEFT), key(KEY_DOWN)-key(KEY_UP)),\n    0, 0));\n}","name":"Buffer A","description":"","type":"buffer"}]}