{"ver":"0.1","info":{"id":"DsGfWR","date":"1698090519","viewed":344,"name":"Morphing polygon","username":"felipetovarhenao","description":"Morphing polygonal spirals","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["sdf","light","polygon","spirals"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nAuthor: Felipe Tovar-Henao [www.felipe-tovar-henao.com]\nTitle: Morphing polygon\n*/\n\n\n#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n#define NUM_RINGS 25.\n#define NUM_SHAPES 5.\n#define SKIP 3.\n\nvec2 adjustViewport(in vec2 uv,in vec2 r){\n\treturn(uv*2.-r)/(r.x<r.y?r.x:r.y);\n}\n\nvec3 gradient(in float t,in vec3 a,in vec3 b,in vec3 c,in vec3 d){\n\treturn a+b*cos(TWO_PI*(c*t+d));\n}\n\n/*\nFrom: https://iquilezles.org/articles/distfunctions2d/\n*/\nfloat polygon(in vec2 p,in float r,in int n){\n\tfloat an=PI/float(n);\n\tvec2 acs=vec2(cos(an),sin(an));\n\t\n\tfloat bn=mod(atan(p.x,p.y),2.*an)-an;\n\tp=length(p)*vec2(cos(bn),abs(sin(bn)));\n\t\n\tp-=r*acs;\n\tp.y+=clamp(-p.y,0.,r*acs.y);\n\treturn length(p)*sign(p.x);\n}\n\nfloat random1D(in vec2 uv,in int seed){\n    return fract(sin(dot(uv.xy,vec2(12.9898,78.233))+float(seed))*43758.5453123);\n}\n\nfloat valueNoise(in vec2 uv,in int seed){\n    vec2 x=floor(uv);\n    vec2 m=fract(uv);\n    \n    float bl=random1D(x,seed);\n    float br=random1D(x+vec2(1.,0.),seed);\n    float tl=random1D(x+vec2(0.,1.),seed);\n    float tr=random1D(x+vec2(1.,1.),seed);\n    \n    vec2 cf=smoothstep(vec2(0.),vec2(1.),m);\n    \n    float tm=mix(tl,tr,cf.x);\n    float bm=mix(bl,br,cf.x);\n    \n    return mix(bm,tm,cf.y);\n}\n\nmat2 rot2(in float a){\n    float c=cos(a);\n    float s=sin(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat cosine(in float x,in float s){\n    float y=cos(fract(x)*PI);\n    return floor(x)+.5-(.5*pow(abs(y),1./s)*sign(y));\n}\n\nvec2 cosine(in vec2 p,in float s){\n    return vec2(cosine(p.x,s),cosine(p.y,s));\n}\n\nfloat fold(in float x){\n    return abs(mod(x+1.,2.)-1.);\n}\n\nvec2 fold(in vec2 p){\n    return vec2(fold(p.x),fold(p.y));\n}\n\nfloat scale(in float x,in float a,in float b,in float c,in float d){\n\treturn(x-a)/(b-a)*(d-c)+c;\n}\n\nfloat poly(in vec2 uv,in float s,in int n,in int n2,in float m){\n\tfloat p1=polygon(uv,s,n);\n\tfloat p2=polygon(uv,s,n2);\n\tfloat p=mix(p1,p2,m);\n\tp=abs(p);\n\tfloat l=scale(sin(iTime*2.),-1.,1.,.0012,.0017);\n\treturn l/p;\n}\n\nfloat edgeDist(in float r,in float n,in float a){\n\tfloat t=PI/n;\n\tfloat f=fold((.5+a/TWO_PI*n)*2.);\n\treturn r*cos(t)/cos(t*f);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\tvec2 uv=adjustViewport(fragCoord.xy,iResolution.xy);\n\tuv=(fold(uv))-.25;\n\t\n\tfloat t=cosine(iTime*.25,3.);\n\tfloat r=1.;\n\tfloat ti=floor(t)*SKIP;\n\tfloat N1=mod(ti,NUM_SHAPES)+3.;\n\tfloat N2=mod(ti-(NUM_SHAPES-SKIP),NUM_SHAPES)+3.;\n\tfloat an=t*.08+valueNoise(vec2(t*2.34351,t*3.257),0);\n\t\n\tfloat d=.0;\n\tfloat m=fract(t);\n\tfloat u=dot(uv,uv);\n\tvec3 col=vec3(0);\n\t\n\tvec3 c1=vec3(1.,.5,.7)*scale(cos(t),-1.,1.,1.25,1.);\n\tvec3 c2=vec3(.5);\n\tvec3 c3=vec3(.7,.85,.6);\n\tvec3 c4=vec3(.8,1.,.333);\n\t\n\tfloat hp=length(uv)+t;\n\tfor(float i=.0;i<NUM_RINGS;i++){\n\t\tfloat w=poly(uv*rot2(an*i),r,int(N1),int(N2),m);\n\t\tfloat h=sin(pow(2.,i)+hp)*.5+.5;\n\t\tcol+=gradient(h+t,c1,c2,c3,c4)*w;\n\t\tr=mix(edgeDist(r,N1,an),edgeDist(r,N2,an),m);\n\t}\n\tcol+=u*.05;\n\t\n\tfragColor=vec4(col,1.);\n}\n\n","name":"Image","description":"","type":"image"}]}