{"ver":"0.1","info":{"id":"ctV3Wc","date":"1684791385","viewed":70,"name":"Poolish","username":"technochroma","description":"Original code Acid Beach by jarble https://www.shadertoy.com/view/3syyDD - just learning some Book of Shaders https://thebookofshaders.com/05/ shaping functions. This is basically a gnarl with fract chopping it up to accentuate the fractally look.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["rainbow","candy","melting","gnarl","crunch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Poolish by technochroma\n// original code Acid Beach by jarble https://www.shadertoy.com/view/3syyDD\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n#define AA 5 \n    vec3 col;\n    float t;\n    \n    for(int c=0;c<12;c++){\n\t    vec2 uv = (fragCoord*10.0-iResolution.xy)/iResolution.y;\n        t = iTime;\n        for(int i=3;i<5;i++)\n        {\n            uv /= 1.4;\n            uv += cos(col.yx);\n        \tuv += float(i) + (cos(uv.x)*sin(uv.y)+cos(uv.y)*cos(iTime)+cos(iTime)*cos(uv.x));\n        }\n     col[c] = (tan(uv.x+uv.y+iTime));\n\t}\n    \n    fragColor = vec4(col,1.0);\n    vec2 uv = fragCoord; \n    // small bit of anti-aliasing (fixed 2)\n    // drop this in voidmain after fragcolor\n    \n\tvec2 of = vec2(0.3);\n\n    #ifdef AA\n\tconst float aa = float(AA);\n    #else\n    const float aa = 1.0;\n\n\t\n\tfor(float i = 0.0; i < aa - 1.0; i++) {\n\n\t\t// super-sample around the center of the pixel.\n\t\tvec2 p = (-iResolution.xy + 2.0*(uv + of))/iResolution.y;\n        col += render(p);\n\t\tof *= r(3.14159/8.0);\n        \n        \t}\n\t\n\tcol /= aa;\n\t\n\tcol += 0.2*clamp(col, 0.0, 0.5);\n\tcol = pow(col, vec3(1.0/2.2));\n        \n    #endif \n}","name":"Image","description":"","type":"image"}]}