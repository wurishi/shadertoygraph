{"ver":"0.1","info":{"id":"fsXyWM","date":"1642134042","viewed":70,"name":"Sampled function plot","username":"pavleeto","description":"Test Sampling approach for plotting a function\nTaken from these shaders and articles:\n\nhttp://blog.hvidtfeldts.net/index.php/2011/07/plotting-high-frequency-functions-using-a-gpu/\nhttps://www.shadertoy.com/view/4sB3zz\nhttps://www.shadertoy.com/view/4scSz4","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["line","plot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float func(float x)\n{\n    return cos(iTime*x*3.1415);\n    // return x*x;\n\n    // smoothstep btw\n    float t = min(max(0.0, x), 1.0);\n    return -2.*t*t*t + 3.*t*t;\n}\n\nint is_pos_above_func(vec2 pos)\n{\n    return (pos.y - func(pos.x) > 0.0) ? 1 : 0;\n}\n\nvec2 screen_to_uv(vec2 screen)\n{\n    // -0.5 to 0.5, aspect correction\n    vec2 uv = (screen - 0.5*iResolution.xy)/iResolution.y;\n    \n    // scale and translate\n    uv *= 10.0;\n    uv += vec2(0.0, 0.0);\n    return uv;\n}\n\nfloat proximity_to_func(vec2 screen)\n{\n    // number of samples per coordinate\n    int sample_s = 7;\n    int half_s = sample_s/2;\n    \n    // step in screen coordinates\n    // this keeps line width constant\n    float step_s = 0.5;\n\n    // count how many samples are above the function\n    int cnt = 0;\n    for (int i=0; i<sample_s*sample_s; ++i)\n    {\n        vec2 newpos = screen_to_uv(screen + vec2(\n            float(-half_s + i%sample_s) * step_s, \n            float(-half_s + i/sample_s) * step_s\n        ));\n        cnt += is_pos_above_func(newpos);\n    }\n    \n    // if our pixel is exactly on the plot,\n    // half of pixels are above and\n    // half of pixels are below the function plot\n    int s_by_2 = sample_s*sample_s / 2;\n    return 1.0 - (float(abs(s_by_2 - cnt)) / float(s_by_2));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Output to screen\n    \n    float color = proximity_to_func(fragCoord);\n    \n    fragColor = vec4(color, color, 0.2 ,1.0);\n}","name":"Image","description":"","type":"image"}]}