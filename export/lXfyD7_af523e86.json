{"ver":"0.1","info":{"id":"lXfyD7","date":"1728329030","viewed":23,"name":"Test11231415_3","username":"bakk42","description":"Im still trying to do my hw","likes":1,"published":1,"flags":48,"usePreview":0,"tags":["killme"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rotate(in vec2 vec, in float angle)\n{\n    return mat2(cos(angle), sin(angle), -sin(angle), cos(angle)) * vec;\n}\n\nfloat Circle(vec2 centre_coord, float r,float offset_x) {\n    float x = centre_coord.x - offset_x;\n    float y = centre_coord.y;\n\n    float d = length(vec2(x, y)) - r;\n    \n    return smoothstep(0., 0.01, -d);\n}\n\nfloat Rectangle( vec2 pos, vec2 size, vec2 cur, float a)\n{\n    cur = rotate(cur, a);\n    vec2 k = cur - pos;\n  vec2 d = abs(k)-size;\n  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat dot2(in vec2 v ) { return dot(v,v); }\nfloat sdTrapezoid( in vec2 p, in float r1, float r2, float he )\n{\n    vec2 k1 = vec2(r2,he);\n    vec2 k2 = vec2(r2-r1,2.0*he);\n    p.x = abs(p.x);\n    vec2 ca = vec2(p.x-min(p.x,(p.y<0.0)?r1:r2), abs(p.y)-he);\n    vec2 cb = p - k1 + k2*clamp( dot(k1-p,k2)/dot2(k2), 0.0, 1.0 );\n    float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;\n    return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\n\n\n/*float ship (vec2 uv, float offset) {\n    float box1 = sdBox(vec2(uv.x-0.55-offset, uv.y - 0.2), vec2(0.05, 0.08));\n    float box2 = sdTrapezoid(vec2(uv.x-0.5-offset, uv.y - 0.1), 0.07, 0.15, 0.06);\n    float box3 = sdBox(vec2(uv.x-0.58-offset, uv.y - 0.25), vec2(0.01, 0.18));\n    \n    float res = min (box3, min(box1, box2));\n    return res;\n\n}*/\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy; // <0, 1>\n    uv.x *= iResolution.x/iResolution.y; // fix aspect ratio\n    uv.y-= 0.1;\n    \n    //vec3 col = drawScene(uv);\n    vec3 col = vec3(1);\n\n    \n    float offset = texelFetch( iChannel0, ivec2(0,0), 0 ).x;\n    float height = texelFetch( iChannel0, ivec2(0,0), 0 ).w;\n    float platform_pos = texelFetch( iChannel0, ivec2(0,0), 0 ).z;\n\n\n\n    //float circle = Circle(uv, 0.1, offset);\n    //float s = ship(uv, offset);\n    \n    float box1 = sdBox(vec2(uv.x-0.55-offset, uv.y - 0.2), vec2(0.05, 0.08));\n    float box2 = sdTrapezoid(vec2(uv.x-0.5-offset, uv.y - 0.1), 0.07, 0.15, 0.06);\n    float box3 = sdBox(vec2(uv.x-0.58-offset, uv.y - 0.34), vec2(0.01, 0.05));\n    \n    float platform = Rectangle(vec2(0), vec2(80., 20.), rotate(fragCoord - vec2(platform_pos, height), 5.*iTime), 1.);\n    \n\n    //col = mix(col, 0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0,2,4)), s);\n    col = mix( vec3(0, 1 ,1), col, smoothstep(0., 0.01, box1));\n    col = mix( vec3(0, 1 ,0), col, smoothstep(0., 0.01, box2));\n    col = mix( vec3(1, 0 ,0), col, smoothstep(0., 0.01, box3));\n    col = mix(vec3(0, 0 ,0), col, step(0., platform));\n\n\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nconst int KEY_LEFT  = 37;\nconst int KEY_RIGHT = 39;\n\nfloat circle_speed = 0.01;\nvec2 circle_position;\n\n\nfloat platform_speed = 1.;\nfloat platform_pos;\nfloat height;\nfloat starting_height = 450.;\nfloat starting_pos = 1.;\n\n\n\nfloat handleKeyboard(float offset) {\n    \n    float left = texelFetch(iChannel1, ivec2(KEY_LEFT, 0), 0).x * (-1.);\n    float right = texelFetch(iChannel1, ivec2(KEY_RIGHT, 0), 0).x * 1.;\n    offset += circle_speed * (left + right);\n    return offset;\n\n    \n\n}\n\nfloat random(){\n\nreturn mix(25., 935., fract(sin(iTime) * 91.3458 * 43758.5453));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   float offset = texelFetch( iChannel0, ivec2(0, 0), 0).x;\n   offset = handleKeyboard(offset);\n    \n   if (iFrame != 0) {\n        height = texelFetch( iChannel0, ivec2(0, 0), 0).w;\n        platform_speed = texelFetch( iChannel0, ivec2(0, 0), 0).y; \n        platform_pos = texelFetch( iChannel0, ivec2(0, 0), 0).z;\n        height -= platform_speed * (240./iFrameRate);\n    } else { height = starting_height; platform_pos = starting_pos; } \n    \n    \n    \n   if (height <= 20.) {\n        height = starting_height;\n        platform_pos = random();\n    }\n   \n   \n\n    \n   fragColor = vec4(offset, platform_speed, platform_pos, height); //xyzw\n}\n","name":"Buffer A","description":"","type":"buffer"}]}