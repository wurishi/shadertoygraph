{"ver":"0.1","info":{"id":"mscyzn","date":"1694660270","viewed":18,"name":"Fork Flower puz Keyu Lab 1-3","username":"keyulu","description":"Try to match the given flower patterns!\n\nBrownie points: how do you change the color of the flower from the center?","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["circle"],"hasliked":0,"parentid":"NsVBzy","parentname":"Flower puzzle"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * @author rah, inspired by jonobr1 / http://jonobr1.com/\n */\n\n/* \n * Output circle colors at given center pos and radius\n */\nvec4 circle(vec2 uv, vec2 center, float radius, vec3 color)\n{\n    // Get distance of point from center, get difference from given radius\n\tfloat d = length(center - uv) - radius;\n\tfloat t = clamp(d, 0.0, 1.0);\n    \n    // If point is smaller than radius, set color alpha to 1, otherwise 0\n\treturn vec4(color, 1.0 - t);\n}\n\n/*\n * Your work here!\n */\nfloat triangle(float x, float freq, float amp) {\n    float scaledX = x * freq;\n    float modTerm = mod(scaledX, amp);\n    float halfAmp = 0.5f * amp;\n    float diff = modTerm - halfAmp;\n    float result = abs(diff);\n    return result;\n}\n\nfloat computeRadius(vec2 uv)\n{\n    float pi = 3.14159;\n    float baseRadius = 0.2 * iResolution.y;\n\n    // Centered uv\n    vec2 uvCenter = (2.0f * uv - iResolution.xy) / iResolution.y;\n    float a = atan(uvCenter.y, uvCenter.x);\n\n    float timeFactor = sin(iTime) * 0.5;\n    float triangleInput = (a + pi) / (2. * pi);\n    float triangleValue = triangle(triangleInput, 20., 4.);\n    float complexFactor = sin(10.0 * a + iTime) * cos(10.0 * a - iTime);\n    \n    float radius = baseRadius * (timeFactor * triangleValue + complexFactor);\n\n    float resolutionFactor = iResolution.y * 0.1;\n    radius += resolutionFactor;\n\n    return radius;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 uv = fragCoord.xy;\n\tvec2 center = iResolution.xy * 0.5;\n\tfloat radius = computeRadius(uv);\n    \n    // Background layer\n\t//vec4 layer1 = vec4(rgb(255.0, 215.0, 210.0), 1.0);\n\t\n\t// Circle\n\t//vec3 red = rgb(225.0, 50.0, 70.0);\n\t//vec4 layer2 = circle(uv, center, radius, red);\n\t\n\t// Blend the two\n\t//fragColor = mix(layer1, layer2, layer2.a);\n  \n\n    // Background layer\n    vec4 layer1 = vec4(vec3(0.8, 0.85, 1.0), 1.0);\n\n    // Dynamic color animation\n    vec3 dynamicColor = vec3(sin(iTime) * 0.5 + 0.5, cos(iTime) * 0.5 + 0.5, sin(iTime + 3.14) * 0.5 + 0.5);\n\n    // Circle\n    vec4 layer2 = circle(uv, center, radius, dynamicColor);\n\n    // Blend the two\n    fragColor = mix(layer1, layer2, layer2.a);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\n * Toolbox functions! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */ \nfloat bias(float t, float b) {\n    return (t / ((((1.0/b) - 2.0)*(1.0 - t))+1.0));\n}\n\n/*\n * Basic Utilities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */\n\n\n/* \n * Rotate an input point about some center by angle\n */\nvec2 rotatePoint2d(vec2 uv, vec2 center, float angle)\n{\n    vec2 rotatedPoint = vec2(uv.x - center.x, uv.y - center.y);\n    float newX = cos(angle) * rotatedPoint.x - sin(angle) * rotatedPoint.y;\n    rotatedPoint.y = sin(angle) * rotatedPoint.x + cos(angle) * rotatedPoint.y;\n    rotatedPoint.x = newX;\n    return rotatedPoint;\n}\n\n/*\n * Make a vec3 color from rgb values [0, 255]\n */\nvec3 rgb(float r, float g, float b)\n{\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n","name":"Common","description":"","type":"common"}]}