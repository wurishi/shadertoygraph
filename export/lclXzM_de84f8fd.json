{"ver":"0.1","info":{"id":"lclXzM","date":"1705357937","viewed":88,"name":"Van Damma Popierdolilo 3","username":"bugmenot","description":"Color of a pixel = direction to the nearest empty pixel (green component = horizontal, blue = vertical)","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"XffXR7","parentname":"Van Damm grid unfinished"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define cellContainsWhite(col) \\\n    (col[0] < 0.5)\n\n#define checkPixel(nearest, location) \\\n    if (isEmpty(texture(iChannel0, location/iResolution.xy))) { \\\n        nearest = location; \\\n    }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    vec3 col = texture(iChannel0, q).rgb;\n    \n    vec2 cell = floor(fragCoord / cellSize);\n    vec2 currentCellLoc = (cell+0.5) * cellSize +0.5;\n    \n    \n    vec2 nearestCellLoc = vec2(-1, -1);\n    float nearestCellDist = 999999.;\n    for (float y = cellSize/2.; y < iResolution.y; y+=cellSize) {\n        for (float x = cellSize/2.; x < iResolution.x; x+=cellSize) {\n            vec2 location = vec2(x, y);\n            vec4 pixel = texture(iChannel0, location/iResolution.xy).rgba;\n            float distDot = dot(location-fragCoord, location-fragCoord);\n            if (cellContainsWhite(pixel) && distDot < nearestCellDist) {\n                nearestCellDist = distDot;\n                //nearestCellLoc = floor(location / cellSize)*cellSize;\n                nearestCellLoc = location;\n            }\n        }\n    }\n    \n    \n    if (nearestCellLoc.x == -1.) {\n        fragColor = vec4(0.,1.,1.,1.);\n        return;\n    }\n    nearestCellDist = distance(nearestCellLoc, fragCoord);\n    \n    vec2 nearest = vec2(-1, -1);\n    float nearestDist = 9999.;\n    float searchFrom = nearestCellDist - cellSize*1.;\n    if (searchFrom < 0.) {\n        searchFrom = 0.;\n    }\n    float searchTo = nearestCellDist + cellSize*1.;\n    if (searchTo < 0.) {\n        searchTo = 0.;\n    }\n    \n    for (float r = searchFrom; r <= searchTo; r++) {\n        float scanXto = r/sqrt(2.);\n        for (float x = 0.; x <= scanXto; x+=1.) {\n            float y = sqrt(pow(r, 2.) - pow(x, 2.));\n            vec2 loc = vec2(x, y) + fragCoord;\n            checkPixel(nearest, loc);\n            loc = vec2(x, -y) + fragCoord;\n            checkPixel(nearest, loc);\n            loc = vec2(-x, y) + fragCoord;\n            checkPixel(nearest, loc);\n            loc = vec2(-x, -y) + fragCoord;\n            checkPixel(nearest, loc);\n            loc = vec2(y, x) + fragCoord;\n            checkPixel(nearest, loc);\n            loc = vec2(y, -x) + fragCoord;\n            checkPixel(nearest, loc);\n            loc = vec2(-y, x) + fragCoord;\n            checkPixel(nearest, loc);\n            loc = vec2(-y, -x) + fragCoord;\n            checkPixel(nearest, loc);\n\n            if (nearest.x != -1.) {\n                nearestDist = distance(nearest, fragCoord);\n                break;\n            }\n        }\n        if (nearest.x != -1.) {\n            break;\n        }\n    }\n    \n    \n    vec2 diff = (1.+normalize(fragCoord-nearest)*-1.)/2.;\n    vec4 res = vec4(0.,diff, 0.);\n    \n    //uncomment if you wanna see the black and white \"source\" image\n    /*\n    if (isEmpty(col)) {\n        res = vec4(1., 1., 1, 1.);\n    } else {\n        res = vec4(0., 0., 0, 1.);\n    }\n    //*/\n    \n    fragColor = res;\n\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 cell = floor(fragCoord / cellSize);\n    vec2 cellLocation = cell * cellSize+0.5;\n    \n    bool containsWhite = false;\n    for (float y = cellLocation.y; y < cellLocation.y+cellSize; y++) {\n        for (float x = cellLocation.x; x < cellLocation.x+cellSize; x++) {\n            vec2 q = vec2(x, y) / iResolution.xy;\n            vec4 col = texture(iChannel0, q).rgba;\n            if (isEmpty(col)) {\n                containsWhite = true;\n            }\n        }\n    }\n    \n    vec2 q = fragCoord / iResolution.xy;\n    vec4 col = texture(iChannel0, q).rgba;\n    fragColor = col;\n    \n    \n    if (containsWhite) {\n        fragColor[3] = 1.0;\n    } else {\n\n        fragColor[3] = 0.0;\n    }\n    \n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define cellSize 16.\n\n#define isEmpty(col) \\\n    (col[0] < .5)\n","name":"Common","description":"","type":"common"}]}