{"ver":"0.1","info":{"id":"NttfDM","date":"1663171883","viewed":47,"name":"Spinning Flower Lab01","username":"loganlo4","description":"Lab01 Part 2","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["flower"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * @author rah, inspired by jonobr1 / http://jonobr1.com/\n */\n\n/* \n * Output circle colors at given center pos and radius\n */\nvec4 circle(vec2 uv, vec2 center, float radius, vec3 color)\n{\n    // Get distance of point from center, get difference from given radius\n    //vec2 uv_r = rotatePoint2d(uv, center, iTime / (2.0 * 3.14));\n\tfloat d = length(center - uv) - radius;\n\tfloat t = clamp(d, 0.0, 1.0);\n    \n    // If point is smaller than radius, set color alpha to 1, otherwise 0\n\treturn vec4(color, 1.0 - t);\n}\n\n/*\n * Your work here!\n */\nfloat computeRadius(vec2 uv)\n{\n    //Let's pass in the angle! as the input to a sin function!\n    \n    float radius = 0.25 * iResolution.y;\n    \n    // Centered uv\n    vec2 uvCenter = (2.0f * uv - iResolution.xy);\n    // Get pixel angle around the center\n    float a = atan(uvCenter.x,uvCenter.y);\n    \n    float triangleWeight = sin(iTime);\n    \n    \n    float tempRadius = triangleWeight * triangleWave(a, 1.256 * 0.625, 1.0) * 0.35 * iResolution.y + radius;\n    \n    return tempRadius;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 uv = fragCoord.xy;\n    \n\n\tvec2 center = iResolution.xy * 0.5;\n    uv = rotatePoint2d(uv, center, iTime) + 0.5 * iResolution.xy;\n    \n\tfloat radius = computeRadius(uv);\n    \n    // Background layer\n\tvec4 layer1 = vec4(rgb(255.0, 255.0, 210.0), 1.0);\n\t\n    \n\t// Circle\n\tvec3 red = rgb(225.0, 50.0, 70.0);\n    \n\tvec4 layer2 = circle(uv, center, radius, red);\n\t\n\t// Blend the two\n\tfragColor = mix(layer1, layer2, layer2.a);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\n * Toolbox functions! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */ \nfloat bias(float t, float b) {\n    return (t / ((((1.0/b) - 2.0)*(1.0 - t))+1.0));\n}\n\n/*\n * Basic Utilities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */\n\n//iTime, 360, 2\n\n//\n/* \n * Rotate an input point about some center by angle\n */\nvec2 rotatePoint2d(vec2 uv, vec2 center, float angle)\n{\n    vec2 rotatedPoint = vec2(uv.x - center.x, uv.y - center.y);\n    float newX = cos(angle) * rotatedPoint.x - sin(angle) * rotatedPoint.y;\n    rotatedPoint.y = sin(angle) * rotatedPoint.x + cos(angle) * rotatedPoint.y;\n    rotatedPoint.x = newX;\n    return rotatedPoint;\n}\n\n/*\n * Make a vec3 color from rgb values [0, 255]\n */\nvec3 rgb(float r, float g, float b)\n{\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n\n\n//\nfloat easeInOutExpo(float x) {\nreturn x == 0.0\n  ? 0.0\n  : x == 1.0\n  ? 1.0\n  : x < 0.5 ? pow(2.0, 20.0 * x - 10.0) / 2.0\n  : (2.0 - pow(2.0, -20.0 * x + 10.0)) / 2.0;\n}\n\nfloat easeInSine(float x) {\n  return 1.0 - cos((x * 3.14) / 2.0);\n}\n\nfloat triangleWave(float x, float frequency, float amplitude) {\n    return abs(mod((x * frequency), amplitude) - (0.5 * amplitude));\n}\n\n\n","name":"Common","description":"","type":"common"}]}