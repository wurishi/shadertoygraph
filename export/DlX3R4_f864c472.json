{"ver":"0.1","info":{"id":"DlX3R4","date":"1719845933","viewed":43,"name":"Terrain03984","username":"Proger","description":"_","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.1415926535;\nfloat Scale = 0.5;\nfloat Offset = 1.;\nfloat shadowI = 0.2;\nvec3 colorO = vec3(1);\nfloat gi = 1.;\n\n\nfloat rand(vec2 c){\n return fract(sin(dot(c.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat noise(vec2 p, float freq ){\n float unit = 800./freq;\n vec2 ij = floor(p/unit);\n vec2 xy = mod(p,unit)/unit;\n xy = 3.*xy*xy-2.*xy*xy*xy;\n xy = .5*(1.-cos(PI*xy));\n float a = rand((ij+vec2(0.,0.)));\n float b = rand((ij+vec2(1.,0.)));\n float c = rand((ij+vec2(0.,1.)));\n float d = rand((ij+vec2(1.,1.)));\n float x1 = mix(a, b, xy.x);\n float x2 = mix(c, d, xy.x);\n return mix(x1, x2, xy.y);\n}\n\nfloat pNoise(vec2 p, int res){\n float persistance = .5;\n float n = 0.;\n float normK = 0.;\n float f = 4.;\n float amp = 1.;\n int iCount = 0;\n for (int i = 0; i<50; i++){\n  n+=amp*noise(p, f);\n  f*=2.;\n  normK+=amp;\n  amp*=persistance;\n  if (iCount == res) break;\n  iCount++;\n }\n float nf = n/normK;\n return nf*nf*nf*nf;\n}\nmat2 mrot(float a){\n float c = cos(a);\n float s = sin(a);\n return mat2(c,-s,s,c);\n}\n\nfloat getDist(vec3 p){\n  p *= .25;\n  p.x += iTime;\n  float h = pNoise(p.xz*60., 2)*3.;\n  h -= pNoise(p.xz*160., 5)*1.;\n  float c = h/.7;\n  if(h < 0.) {h = 0.;}\n  return p.y - h;\n}\nvec3 getNormal(vec3 p){\n vec2 e = vec2(0.01,0);\n float d = getDist(p);\n vec3 n = vec3(\n   d - getDist(p-e.xyy),\n   d - getDist(p-e.yxy),\n   d - getDist(p-e.yyx)\n );\n return normalize(n);\n}\n\nvec3 RayMarch(vec3 ro, vec3 rd){\n float dO = 0.0;\n while(true){\n  vec3 p = ro + rd*dO;\n  float ds = getDist(p);\n  dO += ds;\n  gi += 1.;\n  if(dO > 120.) break;\n  if(ds < 0.01) return vec3(p);\n  }\n  return vec3(0);\n}\n\nfloat getLight(vec3 p, vec3 lp){\n  return dot(lp, getNormal(p));\n}\n\nfloat shadow(vec3 light, vec3 p){\n  float r = 1.;\n  vec3 rm = RayMarch(p+getNormal(p)*0.01, normalize(light-p));\n  if(length(rm) != 0.)r=shadowI;\n  return r;\n}\nvec3 sky = vec3(0.7,0.7, 1);\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n  float m = min(iResolution.y,iResolution.x);\n  vec2 uv = ((fragCoord.xy-.5*iResolution.xy) / m);\n  vec3 color = vec3(1);\n  vec3 light = normalize(vec3(15.,30,-15.));\n  vec3 ro = vec3(0, 0, -30);\n  vec3 rd = normalize(vec3(uv.xy, 1.));\n  float ay = iMouse.y / iResolution.x * PI * 3. - PI * 1.5;\n  float ax = iMouse.x / iResolution.x * PI * 3. - PI * 1.5;\n  rd.yz *= mrot(-ay);\n  rd.xz *= mrot(-ax);\n  ro.yz *= mrot(-ay);\n  ro.xz *= mrot(-ax);\n  vec3 d = RayMarch(ro,rd);\n  float df = max(getLight(d, light),shadowI);\n  color = vec3(df);\n  float cf = dot(getNormal(d), vec3(0, 1., 0));\n  if(d.y > 0.05){\n    if(cf > 0.85) color *= vec3(0, 1., 0);\n    else color *= color *= vec3(0.6, 0.4, 0);\n  } else color *= vec3(0.3, 0.4, 1);\n  color = mix(color, sky, min(length(d-ro)/100., 1.));\n  if(d==vec3(0)) color = sky;\n  fragColor = vec4(color,1);\n}","name":"Image","description":"","type":"image"}]}