{"ver":"0.1","info":{"id":"NsfSWj","date":"1619201147","viewed":370,"name":"odd structures","username":"sukupaper","description":"I just found how stereographic projection works and its formula ~ I'm pretty bad at maths, so I'm proud to myself for this result :'D","likes":24,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","domainrepetition","repetition","structures"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author: paperu\n// Title: odd structures\n\nconst float P = 6.28318;\n\nfloat t;\nint matId;\nvec3 map, pOffset;\n\nmat2 rot(in float a) { return mat2(cos(a), sin(a), -sin(a), cos(a)); }\n\nfloat box(in vec3 p, in float s, in float r) { return length(max(abs(p) - s, 0.)) - r; }\nfloat ibox(in vec3 p, in float s) { p = abs(p) - s; return min(max(p.y, p.z), min(max(p.x, p.y), max(p.x, p.z))); }\n\nfloat df(in vec3 p) {\n    p += pOffset;\n    \n    vec3 pp = map = mod(p, 4.) - 2.;\n    p = mod(p - .5, 1.) - .5;\n    \n    float b1 = max(box(p, .45, .02), -ibox(p, .4));\n    p = abs(p) - .5;\n    float b2 = max(box(p, .15, .01), -ibox(p, .125));\n    float b3 = max(box(pp, 1.3, .01), -ibox(pp, 1.25));\n    \n    float d = min(min(b1, b2), b3);\n    matId = d == b1 ? 1 : d == b2 ? 2 : 3;\n    return d;\n}\n\nstruct rmRes { vec3 pos; int it; bool hit; };\nrmRes rm(in vec3 c, in vec3 r) {\n    rmRes res; res.pos = c, res.hit = true, res.it = 0;\n    for(int i = 0; i < 25; i++) {\n        float d, dd;\n        if((d = df(res.pos)) < .0001) return res;\n        res.pos += d*(r += r*d*.075);\n        mat2 rt = rot(d*.25); r.xy *= rt, r.xz *= rt, r.yz *= rt;\n        res.it++;\n    }\n    res.hit = false;\n    return res;\n}\n\nvec3 plane2sphere(in vec2 p) {\n    float t = -4./(dot(p,p) + 4.);\n    return vec3(-p*t, 1. + 2.*t);\n}\n\nfloat anim1(in float x, in float off, in float steps) {\n    x += off;\n    return (1. - min(mod(floor(x + 1.), steps), 1.))*smoothstep(0., 1., fract(x)) + floor(x/steps);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 st = (fragCoord.xy - .5*iResolution.xy)/iResolution.x;\n    \n    t = iTime*.5 + .75;\n    float a[6];\n    for(int i = 0; i < 6; i++)\n        a[i] = anim1(t, float(i), 6.);\n    pOffset = vec3(a[1] + a[5], a[0] - a[3], a[2] - a[4]);\n    \n    vec3 c = vec3(0., 0., -5.), r = plane2sphere(st*P*1.5);\n    mat2 rt = rot(t*.75); r.xy *= rt, r.xz *= rt, r.yz *= rt;\n    \n    rmRes res = rm(c,r);\n    \n    vec3 color = vec3(0.);\n    if(res.hit) {\n        color = matId == 1 ? vec3(.174, .239, .765)\n            : matId == 2 ? vec3(1., .23, .249)\n            : vec3(1., .681, .049)*step(.5,fract((map.x + map.y + map.z)*10.));\n    }\n    float dist = distance(res.pos, c);\n    color += dist*.025;\n    color -= pow(max(0., float(res.it)*.0225),2.);\n\tcolor = mix(color, color.ggg, min(1., dist*dist*dist*.08));\n    \n    fragColor = vec4(color, 1.);\n}","name":"Image","description":"","type":"image"}]}