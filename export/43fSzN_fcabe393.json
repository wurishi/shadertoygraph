{"ver":"0.1","info":{"id":"43fSzN","date":"1732703997","viewed":31,"name":"FX42","username":"audifax","description":"Trying some FX","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fx"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define threshold 0.55\n#define padding 0.2\n\n//this is a basic Pseudo Random Number Generator\nfloat hash(in float n)\n{\n    return fract(sin(n)*43758.5453123);\n}\n\n#define PI 3.1415926535897932384626433832795\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 xy = -1. + 2. * uv;\n\n    vec3 center = .5 * vec3( sin(iTime), 1.61, cos(.5*iTime) );\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    vec4 col = texture(iChannel0, uv);\n    \n    float l = 2.;\n    float count = 100.;\n    vec3 pp = vec3(0.);\n    for(float i=0.;i<count;i++) {\n        float angle = sin( iTime * .00003 ) + hash(i) * PI * 2.;\n        float radius = sqrt(hash(angle)) * .5;\n    \tvec2 p = vec2( center.x + cos( angle ) * radius, center.z + sin( angle ) * radius );\n        \n        float di = distance(xy, p);\n        l = min(l, di);\n        if (l == di) {\n            pp.xy = p;\n            pp.z = i / count * xy.x * xy.y;\n        }\n        \n    }\n    \n\n    // Output to screen\n    //fragColor = vec4(vec3(.5) + pp, 1.);\n    vec3 shade = vec3( 1. ) * ( 1. - max( 0.0, abs(dot( pp, center )) ) );\n    //vec3 shade = vec3( abs( dot( pp, center ) ) );\n\n    //vec4 greenScreen = vec4(0.,1.,0.,1.);\n    \n    //vec3 diff = col.xyz - greenScreen.xyz;\n    //float fac = smoothstep(threshold-padding,threshold+padding, dot(diff,diff));\n    \n    //fragColor = mix(col, vec4(pp+shade, 1.), 1.-fac);\n    \n    fragColor = vec4(shade + pp, 1.);\n}","name":"Image","description":"","type":"image"}]}