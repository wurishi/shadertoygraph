{"ver":"0.1","info":{"id":"llBfDD","date":"1515793433","viewed":103,"name":"11/2018","username":"rimina","description":"This shader is part of my daily shader challenge. Today I tried out something simple: tiling.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["tiling","dailyshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define STEPS 64\n#define PIXELR 0.5/iResolution.x\n#define FAR 80.0\n\nconst vec3 FOG_COLOR = vec3(0.5, 0.45, 0.55);\n\n//Distance functions and helpper functions from Mercury's SDF library\n//http://mercury.sexy/hg_sdf/\n\n// Sign function that doesn't return 0\nfloat sgn(float x) {\n\treturn (x < 0.0)?-1.0:1.0;\n}\n\n// Maximum/minumum elements of a vector\nfloat vmax3(vec3 v) {\n\treturn max(max(v.x, v.y), v.z);\n}\n\n// Box: correct distance to corners\nfloat fBox(vec3 p, vec3 b) {\n\tvec3 d = abs(p) - b;\n\treturn length(max(d, vec3(0.0))) + vmax3(min(d, vec3(0.0)));\n}\n\nfloat sdf(vec3 p){\n    return fBox(p, vec3(1.0));\n}\n\n//calculate normals for objects\nvec3 normals(vec3 p){\n\tvec3 eps = vec3(PIXELR, 0.0, 0.0 );\n    return normalize(vec3(\n        sdf(p+eps.xyy) - sdf(p-eps.xyy),\n        sdf(p+eps.yxy) - sdf(p-eps.yxy),\n        sdf(p+eps.yyx) - sdf(p-eps.yyx)\n    ));\n}\n\nfloat march(vec3 ro, vec3 rd){\n    float t = 0.0;\n    vec3 p = ro;\n    for(int i = 0; i < STEPS; ++i){\n        float d = sdf(p);\n        p += rd*d;\n        t += d;\n        \n        if(d < PIXELR || t >= FAR){\n            break;\n        }\n    }\n    \n\treturn t;\n}\n\n//https://iquilezles.org/articles/fog\nvec3 fog(vec3 col, vec3 p, vec3 ro, vec3 rd, vec3 ld){\n    float dist = length(p-ro);\n\tfloat sunAmount = max( dot( rd, ld ), 0.0 );\n\tfloat fogAmount = 1.0 - exp( -dist*0.06);\n\tvec3  fogColor = mix(vec3(0.2), vec3(0.8, 0.7, 0.2), pow(sunAmount, 3.0));\n    return mix(col, fogColor, fogAmount);\n}\n\nvec3 color(vec3 p, vec3 ld, vec3 rd){\n    vec3 n = normals(p);\n\n    float lambertian = max(dot(n, ld), 0.0);\n\n    float angle = max(dot(reflect(rd, ld), n), 0.0);\n    float specular = pow(angle, 10.0);\n    \n   \tvec3 col = vec3(0.7, 0.6, 0.2)+\n        lambertian*vec3(0.2) +\n        specular*vec3(0.7, 0.6, 0.7);\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    //Tiling space..\n    vec2 q = uv *3.0;\n    q = fract(q);\n    q = -1.0+2.0*q;\n    q.x *= iResolution.x/iResolution.y;\n    \n    vec3 ro = vec3(3.0*cos(iTime*0.5), 0.0, 3.0*sin(iTime*0.5));\n    vec3 rt = vec3(0.0, 0.0, 0.0);\n    \n    vec3 z = normalize(rt-ro);\n    vec3 x = normalize(cross(z, vec3(0.0, 1.0, 0.0)));\n    vec3 y = normalize(cross(x, z));\n    vec3 rd = normalize(mat3(x, y, z)*vec3(q, radians(50.0)));\n    \n    float t = march(ro, rd);\n    vec3 p = ro+rd*t;\n    \n    vec3 ld = (rt-ro)/distance(ro,rt);\n    \n    vec3 col = vec3(0.0);\n    if(t <= FAR){\n        col = color(p, rd, ld);\n    }\n    col = fog(col, p, ro, rd, ld);\n    \n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}