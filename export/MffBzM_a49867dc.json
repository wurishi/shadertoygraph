{"ver":"0.1","info":{"id":"MffBzM","date":"1723592441","viewed":23,"name":"Field Wave","username":"AlancitoBalanza","description":"Field wave","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["wave"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265358979323846\n\n// perlin noise taken from https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\nfloat rand(vec2 c){\n\treturn fract(sin(dot(c.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat noise(vec2 p, float freq ){\n\tfloat unit = 1.0/freq;\n\tvec2 ij = floor(p/unit);\n\tvec2 xy = mod(p,unit)/unit;\n\t//xy = 3.*xy*xy-2.*xy*xy*xy;\n\txy = .5*(1.-cos(PI*xy));\n\tfloat a = rand((ij+vec2(0.,0.)));\n\tfloat b = rand((ij+vec2(1.,0.)));\n\tfloat c = rand((ij+vec2(0.,1.)));\n\tfloat d = rand((ij+vec2(1.,1.)));\n\tfloat x1 = mix(a, b, xy.x);\n\tfloat x2 = mix(c, d, xy.x);\n\treturn mix(x1, x2, xy.y);\n}\n\nfloat pNoise(vec2 p, int res){\n\tfloat persistance = .5;\n\tfloat n = 0.;\n\tfloat normK = 0.;\n\tfloat f = 4.;\n\tfloat amp = 1.;\n\tint iCount = 0;\n\tfor (int i = 0; i<50; i++){\n\t\tn+=amp*noise(p, f);\n\t\tf*=2.;\n\t\tnormK+=amp;\n\t\tamp*=persistance;\n\t\tif (iCount == res) break;\n\t\tiCount++;\n\t}\n\tfloat nf = n/normK;\n\treturn nf*nf*nf*nf;\n}\n\nfloat exponentialOut(float t) {\n    return t == 1.0 ? t : 1.0 - pow(2.0, -10.0 * t);\n}\n\nfloat balls(vec2 fragCoord, float size, vec2 offset, float threshold)\n{\n    float val = smoothstep(threshold * 1.2, threshold * 0.7, length(fract((fragCoord.xy + offset) / size).xy - 0.5));\n\n    return val;\n}\n\n#define SIZE 80.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float time = iTime * 0.75;\n    //float time = iTime * 6.0;\n    int stepN = int(time) % 3;\n    float anim = exponentialOut(fract(time));\n\n    vec2 ball1offset = vec2(0);\n    vec2 ball2offset = vec2(SIZE / 2.0);\n    \n    float minthresh = 0.15;\n    float maxthresh = 0.25;\n    float ball1thresh = 0.25;\n    float ball2thresh = 0.15;\n    \n    if (stepN == 0) {\n        ball1offset.x += anim * SIZE;\n    } else if (stepN == 1) {\n        ball2offset.y += anim * SIZE;\n    } else if (stepN == 2) {\n        ball1thresh = mix(minthresh, maxthresh, 1.0-anim);\n        ball2thresh = mix(minthresh, maxthresh, anim);\n        ball1offset -= vec2(anim * SIZE / 2.0);\n        ball2offset -= vec2(anim * SIZE / 2.0);\n    }\n    \n    float cursorTime = iTime * 0.1;\n    \n    vec2 offset = (vec2(pNoise(vec2(cursorTime, 0.0), 5), pNoise(vec2(cursorTime, 1.0), 5)) - 0.1) * 2000.0;\n    \n    float scale = 4.0 / pow(length(fragCoord - iResolution.xy / 2.0 + offset), 0.25);\n    //scale = smoothstep(0.8, 1.0, scale);\n\n    float ball1 = balls(fragCoord, SIZE, ball1offset, ball1thresh * scale);\n\n    float ball2 = balls(fragCoord, SIZE, ball2offset, ball2thresh * scale);\n\n    // Time varying pixel color\n    //vec3 col = vec3(val);\n    vec3 col = ball1 * (0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4))) + ball2 * (0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4)));\n\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}