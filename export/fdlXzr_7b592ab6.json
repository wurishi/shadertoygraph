{"ver":"0.1","info":{"id":"fdlXzr","date":"1618707194","viewed":192,"name":"327_Biryukov_v1v0","username":"TheFieryLynx","description":"CMCMSU","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["fireincube"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1); \n\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst float GLASS_N = 1.5;\nconst float AIR_N = 1.0;\n\nconst vec3 CAMERA_POS = vec3(0, 2.28, -12);\nconst int LIGHT_NUM = 3;\n\nconst int EMISSION = 0;\nconst int DIFFUSE = 1;\nconst int REFLECTION = 2;\nconst int REFRACTION = 3;\n\nstruct Cube {\n    vec3 a;\n    vec3 b;\n    vec3 c;\n    vec3 d;\n    vec3 a1;\n    vec3 b1;\n    vec3 c1;\n    vec3 d1;\n};\n\nstruct Light {\n    vec3 pos;\n    float radius;\n    vec3 color;\n    float intensity;\n};\n\nCube cube = Cube(\n    vec3(-1.5, -1.5, -1.5),\n    vec3(-1.5, -1.5, 1.5),\n    vec3(1.5, -1.5, 1.5),\n    vec3(1.5, -1.5, -1.5),\n    \n    vec3(-1.5, 1.5, -1.5),\n    vec3(-1.5, 1.5, 1.5),\n    vec3(1.5, 1.5, 1.5),\n    vec3(1.5, 1.5, -1.5)\n);\n\nLight lights[LIGHT_NUM] = Light[LIGHT_NUM](\n    Light(vec3(-3.4, 0.5, 4), 0.35, vec3(0.7, 0.3, 1), 40.0),\n    Light(vec3(2, 0.5, 3), 0.5, vec3(1, 1, 1), 60.0),\n    Light(vec3(-3.4, 0.5, -7), 0.5, vec3(1, 1, 0), 10.0)\n);\n\nvec3 randDir;\nvec3 randVals;\n\nvec3 rotate ( vec3 p, vec3 r )\n{\n\tp = vec3( p.x*cos(r.y)+p.z*sin(r.y), p.y,-p.x*sin(r.y)+p.z*cos(r.y) );\n    return p;\n}\n\nfloat pow2(float x)\n{\n    return x * x;\n}\n\nbool equals(float a, float b)\n{\n    if (abs(a - b) < 0.0001) {\n        return true;\n    }\n    return false;\n}\n\n\nfloat rand(float frame) \n{\n    return fract(sin(dot(vec3(frame), vec3(12.9898, 78.233, 45.5432))) * 43758.5453);\n}\n\nfloat norm(vec3 v)\n{\n    return sqrt(pow2(v.x) + pow2(v.y) + pow2 (v.z));\n}\n              \nfloat tracePlane (vec3 pos, vec3 dir, out vec3 normal)\n{\n    normal = vec3(0, 1, 0);\n    float t = (-2.0 - pos.y)/dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0){\n        return INF;\n    }  \n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal)\n{\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    \n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n    \n}\n\nfloat traceSphereForFire(vec3 pos, vec3 dir, float r, out vec3 normal)\n{\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - pow2(r + randDir.x);\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    \n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat snoise(vec3 uv, float res)\n{\n\tconst vec3 s = vec3(1e0, 1e2, 1e3);\n\tuv *= res;\n\tvec3 uv0 = floor(mod(uv, res))*s;\n\tvec3 uv1 = floor(mod(uv+vec3(1.), res))*s;\n\tvec3 f = fract(uv); \n\tf = f*f*(3.0-2.0*f);\n\tvec4 v = vec4(uv0.x+uv0.y+uv0.z, uv1.x+uv0.y+uv0.z,\n\t              uv0.x+uv1.y+uv0.z, uv1.x+uv1.y+uv0.z);\n\tvec4 r = fract(sin(v*1e-1)*1e3);\n\tfloat r0 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\tr = fract(sin((v + uv1.z - uv0.z)*1e-1)*1e3);\n\tfloat r1 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\treturn mix(r0, r1, f.z)*2.-1.;\n}\n\nvec3 burn(vec2 p) \n{\n\tfloat color1 = 4.0 - (3.*length(2.5*p));\n    \n\tvec3 coord = vec3(atan(p.x,p.y)/6.2832+.5, length(p)*.4, .5);\n\tfor(int i = 1; i <= 3; i++)\n\t{\n\t\tfloat power = pow(2.0, float(i));\n\t\tcolor1 += 0.5*(1.5 / power) * snoise(coord + vec3(0.,.05, .01), power*16.);\n\t}\n\tcolor1 *= 0.6;\n\treturn vec3( color1, pow(max(color1,0.),2.)*0.4, pow(max(color1,0.),3.)*0.40);\n}\n\nvec3 drawFire(vec2 p) {\n  vec3 color = burn(p);\n  return mix(vec3(1.0, 0.9, 0.9), color, 0.6);\n}\n\nfloat traceCube(vec3 pos, vec3 dir, out vec3 normal) \n{ \n    vec3 min = cube.a;\n    vec3 max = cube.c1;\n\n    float tmin = (min.x - pos.x) / dir.x; \n    float tmax = (max.x - pos.x) / dir.x; \n \n    if (tmin > tmax) {\n        float tmp = tmin;\n        tmin = tmax;\n        tmax = tmp;\n    }\n  \n    float tymin = (min.y - pos.y) / dir.y; \n    float tymax = (max.y - pos.y) / dir.y; \n \n    if (tymin > tymax) {\n        float tmp = tymin;\n        tymin = tymax;\n        tymax = tmp;\n    }\n   \n    if ((tmin > tymax) || (tymin > tmax)) \n        return INF; \n \n    if (tymin > tmin) \n        tmin = tymin; \n \n    if (tymax < tmax) \n        tmax = tymax; \n \n    float tzmin = (min.z - pos.z) / dir.z; \n    float tzmax = (max.z - pos.z) / dir.z; \n \n    if (tzmin > tzmax) {\n        float tmp = tzmin;\n        tzmin = tzmax;\n        tzmax = tmp;\n    }\n    \n    if ((tmin > tzmax) || (tzmin > tmax)) \n        return INF; \n \n    if (tzmin > tmin) \n        tmin = tzmin; \n \n    if (tzmax < tmax) \n        tmax = tzmax; \n    \n    float t = tmin;\n    if (t < 0.0) {\n        t = tmax;\n        if (t < 0.0) {\n            return INF;\n        }\n    }\n    \n    vec3 point = t * dir + pos;\n    if (equals(point.z, cube.a.z) && equals(point.z, cube.d.z) && \n            equals(point.z, cube.a1.z) && equals(point.z, cube.d1.z)) {\n        normal = vec3(0, 0, -1);\n    }\n    if (equals(point.x, cube.a.x) && equals(point.x, cube.b.x) && \n            equals(point.x, cube.a1.x) && equals(point.x, cube.b1.x)) {\n        normal = vec3(-1, 0, 0);\n    }\n    if (equals(point.z, cube.b.z) && equals(point.z, cube.c.z) && \n            equals(point.z, cube.b1.z) && equals(point.z, cube.c1.z)) {\n        normal = vec3(0, 0, 1);\n    }\n    if (equals(point.x, cube.c.x) && equals(point.x, cube.d.x) && \n            equals(point.x, cube.d1.x) && equals(point.x, cube.c1.x)) {\n        normal = vec3(1, 0, 0);\n    }\n    if (equals(point.y, cube.a1.y) && equals(point.y, cube.b1.y) && \n            equals(point.y, cube.c1.y) && equals(point.y, cube.d1.y)) {\n        normal = vec3(0, 1, 0);\n    }\n    if (equals(point.y, cube.a.y) && equals(point.y, cube.b.y) && \n            equals(point.y, cube.c.y) && equals(point.y, cube.d.y)) {\n        normal = vec3(0, -1, 0);\n    }\n    return t; \n} \n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal)\n{\n    float R = 2.5;\n    float H = 0.5;\n    float y = -1.5;\n    float t = (y - pos.y)/dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < R * R) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    float a = dot(dir.xz, dir.xz);\n    if (a == 0.0) {\n        return INF;\n    }\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - R * R;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    \n   \n    if (t <= 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y < y && worldPos.y > y - H) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    \n    t = (-b + sqrt(D)) / a;\n    if (t <= 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y < y && worldPos.y > y - H) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n   \n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2, out bool isReflected)\n{\n    isReflected = false;\n    if(dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    if(sinB > 1.0) {\n        isReflected = true;\n        return reflect(v, normal);\n    }\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nbool isOccluded(vec3 pos, vec3 target)\n{\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 cylinderNorm;\n    float cylinderT = traceCylinder(pos, dir, cylinderNorm);\n    if (cylinderT < dist) {\n        return true;\n    }\n    return false;\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal)\n{\n    vec3 k;\n    \n    for (int i = 0; i < LIGHT_NUM; ++i) {\n        vec3 toLight = lights[i].pos - pos;\n        float distSq = dot(toLight, toLight);\n        float att = isOccluded(pos, lights[i].pos + randDir * lights[i].radius) ? 0.0 : lights[i].intensity / distSq;\n        k += max(0.0, dot(normal, normalize(toLight))) * att * lights[i].color\n        + texture(iChannel1, normal).rgb * 0.1;\n    }\n    vec3 toFire = vec3(0, 0, 0) - pos;\n    float distSq = dot(toFire, toFire);\n    float att = 6.0 / distSq;\n    k += max(0.0, dot(normal, normalize(toFire))) * att * vec3(1.0, 0.65, 0.9)\n    + texture(iChannel1, normal).rgb * 0.1;\n    \n    return color * k;\n}\n\nfloat fogSdf(vec3 pos)\n{\n    return length(pos) - 1.9;\n}\n\nfloat BeerLambert(float absorptionCoefficient, float distanceTraveled)\n{\n    return exp(-absorptionCoefficient * distanceTraveled);\n}\n\nvec4 sampleFog(vec3 pos, vec3 dir)\n{\n    float t = fogSdf(pos);\n    const float MARCH_SIZE = 0.01;\n    float opacity = 0.4;\n    float absorption = 10.0;\n    float totalAbs = 0.05;\n    for (int i = 0; i < 50; ++i) {\n        vec3 curPos = pos + (float(i) * MARCH_SIZE + t) * dir;\n        float sdf = fogSdf(curPos);\n        if (sdf < 0.0) {\n            float prevOpacity = opacity;\n            opacity *= BeerLambert(absorption * (\n            texture(iChannel3, curPos * 0.2).x\n            + texture(iChannel3, curPos * 0.4).x\n            + texture(iChannel3, curPos * 0.8).x\n            + texture(iChannel3, curPos * 1.6).x\n            ) * 0.25 * abs(sdf), MARCH_SIZE);\n            float absorptionLastStep = prevOpacity - opacity;\n            totalAbs += absorptionLastStep;\n        }\n    }\n    return vec4(vec3(2, 2, 2) * totalAbs, 1.0 - opacity);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5) * 2.0) / iResolution.x;\n    randDir = normalize(randVals - 0.5);\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3 (0,1,0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right*uv.x + up*uv.y);\n    \n    vec3 multColor = vec3(1.0, 1.0, 1.0);;\n    float mult = 1.0;\n    \n    vec3 planeNorm;\n    vec3 camera_pos = CAMERA_POS;\n    \n    float n1 = AIR_N;\n    float n2 = GLASS_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    \n    //camera_pos = rotate(camera_pos, vec3(iTime * TIMESCALE));\n    //viewVec = rotate(viewVec, vec3(iTime*TIMESCALE));\t\n    \n    float rotation_val = -0.5;\n    camera_pos = rotate(camera_pos, vec3(rotation_val));\n    viewVec = rotate(viewVec, vec3(rotation_val));\t\n    \n    vec3 curPos = camera_pos;\n    vec3 curDir = viewVec;\n    \n    for (int i = 0; i < 10; ++i) {\n        vec3 normal;\n        float t = INF;\n        int materialType = EMISSION;\n        vec3 color;\n//PLANE\n        float planeT = tracePlane (curPos, curDir, planeNorm);\n        if (true) {\n            if (planeT < t) {\n                t = planeT;\n                vec3 worldPos = t * curDir + curPos;\n                int a = 0;\n                int n_x = int(worldPos.x / 1.0) + 1;\n                int n_z = int(worldPos.z / 1.0) + 1;\n                if (worldPos.x < 0.0 && worldPos.z >= 0.0 || worldPos.x > 0.0 && worldPos.z < 0.0) {\n                    a = 1;\n                }\n                if ((n_x + n_z + a) % 2 == 0) {\n                    materialType = DIFFUSE;\n                    color = texture(iChannel0, worldPos.xz * 0.2).rgb;\n                } else {\n                    materialType = DIFFUSE;\n                    color = texture(iChannel2, worldPos.xz * 0.1).rgb;\n                }\n                normal = planeNorm;\n            } \n        }\n//LIGHT\n        if (true) {\n            for (int i = 0; i < LIGHT_NUM; ++i) {\n                vec3 lnorm;\n                float lightT = traceSphere(curPos - lights[i].pos + randVals * 0.1, curDir, lights[i].radius, lnorm);\n                if (lightT < t) {\n                    t = lightT;\n                    materialType = EMISSION;\n                    color = lights[i].color;\n                    normal = lnorm;\n                }\n            }\n        }\n//CYLINDER    \n        vec3 cylinderNorm;\n        float cylinderT = traceCylinder(curPos, curDir, cylinderNorm);\n        if (true) {\n            if (cylinderT < t) {\n                t = cylinderT;\n                vec3 worldPos = t * curDir + curPos;\n                materialType = DIFFUSE;\n                normal = cylinderNorm;\n                if (normal == vec3(0, 1, 0) || normal == vec3(0, -1, 0)) {\n                    color =  texture(iChannel2, worldPos.xz).rgb;\n                } else {\n                    color = texture(iChannel2, worldPos.yz).rgb;\n                }\n            }\n        }\n      \n//CUBE       \n        vec3 cubeNorm;\n        float cubeT = traceCube(curPos, curDir, cubeNorm);\n        if (true) {\n            if (cubeT < t) {\n                t = cubeT;\n                normal = cubeNorm;\n                if (randVals.x  < GLASS_R) {\n                    materialType = REFLECTION;\n                } else {\n                    materialType = REFRACTION;\n                } \n            }\n        }\n        \n//FIRE\n        vec3 fireNorm;\n        float fireT = traceSphereForFire(curPos, curDir, 1.0, fireNorm);\n        if (true) {\n            if (fireT < t) {\n                t = fireT;\n                normal = fireNorm;\n                vec3 worldPos = t * curDir + curPos;\n                color = drawFire(uv * sqrt(dot(CAMERA_POS, CAMERA_POS) / 250.0) * 3.50);\n                materialType = EMISSION;\n\n            }\n         }\n        \n        if (t != INF){\n            vec3 worldPos = t * curDir + curPos;\n            if (materialType == EMISSION) {\n                fragColor.rgb = color;\n                break;\n            } else if (materialType == DIFFUSE){\n                fragColor.rgb += mult * computeLight(worldPos, color, normal);\n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n                \n                fragColor.rgb += mult * computeLight(worldPos, color, normal);\n                \n            } else if (materialType == REFRACTION) {\n                bool isReflected;\n                curDir = refraction(curDir, normal, n1, n2, isReflected);\n                curPos = worldPos + curDir * 1e-5;\n                \n                vec4 fog = sampleFog(curPos, curDir);\n                fragColor.rgb += fog.rgb * fog.a * mult;\n                mult *= 1.0 - fog.a;\n                \n                if (!isReflected) {\n                    float tmp = n1;\n                    n1 = n2;\n                    n2 = tmp;\n                }    \n            }\n        } else {\n            fragColor += mult * texture(iChannel1, curDir) * 0.4;\n            break;\n        }\n    }\n\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}