{"ver":"0.1","info":{"id":"wdKGzz","date":"1569630980","viewed":98,"name":"Ranges","username":"guk","description":"Divide 0-1 float range into quantized ranges, some shading effect to make it look like sphere, + modifying length function to make it morphing","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["ranges"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// divide the range into n intervals (n = quants)\nfloat map_quant_dist(float val_norm, float start, float end, int quants) {\n    float val = mix(start, end, val_norm);\n    float scaled = val*float(quants);\n    float rem = scaled - floor(scaled);\n    float shading = (pow(rem, 0.4 * (1.0 - 0.3 * sin(iTime)))) * (1.0 - rem * 0.3); // 1.0\n    return shading * floor(scaled) / float(quants-1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    float aspect = iResolution.x / iResolution.y;\n    uv.x = uv.x * aspect;\n    // center around x\n    uv += vec2(-aspect / 2.0, 0.0);\n\n    float len = length(uv) * pow(uv.y, 0.5 * sin(iTime * 0.4));\n    float len_dist = map_quant_dist(len, 1.0, 0.0, 6);\n    \n    fragColor = vec4(len_dist * vec3(0.2, 0.4, 0.7), 1.0);\n}","name":"Image","description":"","type":"image"}]}