{"ver":"0.1","info":{"id":"MfcBR4","date":"1732960931","viewed":10,"name":"SDF of Symmetric Difference","username":"jttninjacode","description":"SDF of Symmetric Difference.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["cheatsheet"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdf_of_rect(vec2 point, vec2 center, vec2 size) {\n    vec2 half_size = size * 0.5;\n    vec2 delta = abs(point - center) - half_size;\n\n    float outside_dist = length(vec2(max(delta.x, 0.0), max(0.0, delta.y)));\n    float inside_dist = min(max(delta.x, delta.y), 0.0);\n\n    return outside_dist + inside_dist;\n}\n\nfloat sdf_of_circle(vec2 point, vec2 center, float radius) {\n    return abs(length(point - center)) - radius;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Adaptively select the shortest axis's bounds as -0.5 to 0.5.\n    float min_axis = min(iResolution.x, iResolution.y);\n    vec2 coord = (fragCoord - iResolution.xy / 2.0) / min_axis;\n    \n    vec2 rect_center = vec2(0.0);\n    vec2 rect_size = vec2(0.4, 0.9);\n    \n    vec2 circle_center = vec2(0);\n    float circle_radius = 0.3;\n    \n    float rect_dist = sdf_of_rect(coord, rect_center, rect_size);\n    float circle_dist = sdf_of_circle(coord, circle_center, circle_radius);\n\n    bool pred = -rect_dist * circle_dist >= 0.0;\n    \n    vec3 color = pred ? vec3(1.0) : vec3(0.0);\n\n    // Output to screen\n    fragColor = vec4(color ,1.0);\n}","name":"Image","description":"","type":"image"}]}