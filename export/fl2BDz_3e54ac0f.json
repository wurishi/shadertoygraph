{"ver":"0.1","info":{"id":"fl2BDz","date":"1677710774","viewed":56,"name":"PaxAmericana","username":"Uffe55","description":"Pax Americana","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["control","rotation","pax"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define MAX_STEPS 80\n#define MAX_DIST 60.\n#define SURF_DIST .005\n#define PI2 = 6.28318\n\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nvec3 RotTPR(vec3 p,float a,float b,float c)\n{\n    p.xz *= Rot(a);   p.yz *= Rot(b);   p.xy *= Rot(c);\n    return p;\n}\nfloat sdSegment(vec3 p,vec3 a,vec3 b,float R)\n{\n    float h = min(1.0,\n                max(0.0,\n                dot(p-a,b-a) / dot(b-a,b-a)));\n\n    return length(p-a-(b-a)*h)-R;\n    \n}\n\nfloat sdBox(vec3 p , vec3 s){\n  \n    p = abs(p)-s;  \n    return length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\nfloat sdSquareFrame3(vec3 p, vec3 bOut,vec3 bIn)\n{\n    float dist = 1000.0;\n        dist = min(dist, sdBox(p,bOut));\n        dist = max(dist, -sdBox(p,bIn));\n\n    return dist;\n}\nfloat sdBoxFrame3(vec3 p, vec3 bOut,vec3 bIn)\n{\n    float dist = 1000.0;\n        dist = min(dist, sdBox(p,bOut));\n        dist = max(dist, -sdBox(p,bIn));\n\n    return dist;\n}\n\nfloat sdAxisLines(vec3 p, float segLen, vec3 position ,float spRadius)\n{\n    p += position;\n    float dist = 1000.0;\n   \n    vec3 k1 = vec3(segLen,0,0),k2=vec3(0,segLen,0),k3=vec3(0,0,segLen); \n    dist= min(dist,sdSegment (p,k1,-k1,0.03));\n    dist= min(dist,sdSegment (p,k2,-k2,0.03));\n    dist= min(dist,sdSegment (p,k3,-k3,0.03));\n    //sphere\n   dist= min(dist,length(p) - spRadius);\n   p.y-=spRadius;\n   dist= min(dist,length(p) - 0.3);\n    vec3 offs = vec3(0.0,1.6,0.0);\n    vec3 boxSize = vec3(1.3,0.5,1.2);\n      dist=min(dist,sdBox( p+offs , boxSize));\n return dist;\n\n\n}\n\nfloat getCordaLen(float radius ,float sides, out float outAddRadius){\n    \n    float phi = 6.283185307/(sides*2.0);  //half angle\n    float x = radius - radius * cos(phi);\n    x *= x;\n    float y = radius*sin(phi);\n    y*=y;\n    //out-variable\n    outAddRadius =sqrt(radius*radius-y );\n   float len= sqrt(x+y);\n    \n    return len;\n }\n\nfloat sdPoly(vec3 p, float sides, float radius)\n{\n    float theta = 6.283185307/sides;\n    float dist =1000.0;  \n    vec3 p1 =p; vec3 p2;\n    float sphereRadius = radius;\n  \n    //rotate space  \n     p1.xy *= Rot(-0.15*iTime); //roll+0.7853980.785398+\n     p1.yz *= Rot( 0.4); //phi\n    \n\n     float width = 0.415;float thic =0.1;\n     \n     float outAddRadius = 0.0;//+thic\n     float len =  getCordaLen (sphereRadius+thic +thic, sides, outAddRadius);\n     float translateDist = outAddRadius+thic;\n     vec3 boxSize = vec3( thic, width, len);\n    \n      for(float i=1.0; i<sides +1.0;i++)\n      {\n           p2=p1;\n         \n           p2.xz *= Rot(0.50*iTime + i * theta);//rotate theta in local space\n           p2.x -= translateDist;\n             \n           dist  = min(dist,sdBox(p2,boxSize));\n          \n           //p2.x += translateDist+translateDist;\n           //dist  = min(dist,sdBox(p2,boxSize));\n             \n      }\n   \n    return dist;\n\n\n}\n\n\nfloat counter=0.0;\n //Coordinat lines, sphere, polygon \nfloat Sceen(vec3 p)\n{\n    float dist =1000.0;   float sphereRadius = 1.;  \n    float segLen= sphereRadius+1.4 ;//, outT;\n                   \n    vec3 p1 =p; vec3 p2;\n    \n    float sides = 5.0;\n    \n    sides=floor(sides);\n    dist = min(dist,sdAxisLines(p,segLen,vec3(0.0),sphereRadius));\n    dist = min(dist,sdPoly( p, sides , 3.0));\n   \n    return dist;\n}\n//Outer frame and planet orbiter\nfloat Sceen2(vec3 p)\n{\n\n    float dist =1000.0;   float radius = 1.;  \n    float segLen= radius+.80; float radius2 = 5.8;//+0.5*iTime\n    float width = .35;\n     vec3 spO =vec3( radius2,width, radius2);\n     \n     vec3 boxOut = vec3( radius2,width, radius2);\n     vec3 boxIn = vec3( radius2-width*0.5,width+width, radius2-width*0.5);\n    vec3 p1 =p; vec3 p2;\n\n    //rotate frame localspace \n    p1=p;\n   \n    p1.xy *= Rot(iTime*0.034 ); //roll1\n    p1.yz *= Rot(0.392699 ); //phi \n  \n    p1.xz *= Rot(iTime*0.08 );//tetha 0.628318\n   dist = min(dist, sdSquareFrame3( p1,  boxOut, boxIn));\n  \n    vec3 posOrb=p1; //inherit rot so planets follow the frame\n   vec3 posOrb2 = p1;  \n   vec3 posOrb3 = p1;\n    posOrb.xz *=Rot(-0.785398); //rotate -45 deg relative frame\n    posOrb.x +=  radius2 * 1.414;// translate in the rotated x direction\n    posOrb.xy *= Rot(iTime); //roll\n    posOrb.x +=2.0 +cos(iTime )+1.0;\n    dist= min(dist ,length(posOrb)-0.2); //planet orbiting frame\n    ///////////////////////////////////\n    posOrb2.xz *=Rot(0.785398); //rotate 45 deg relative frame\n    posOrb2.x +=  radius2 * 1.414;//9.195; // translate in the rotated x direction\n    posOrb2.xy *= Rot(iTime); //roll\n    posOrb2.x +=1.50;\n    dist= min(dist ,length(posOrb2)-0.15); //planet orbiting frame\n    ///////////////////////////\n    \n    \n    posOrb3.x +=  -radius2 ;//9.195; // translate in the rotated x direction\n    posOrb3.xy *= Rot(iTime*1.); //roll\n   \n    posOrb3.x += 1.7;\n    \n    posOrb3.xy *= Rot(-iTime*1.);//undo last rotation\n    posOrb3.xz *= Rot(0.523598);//tilt moon orbit\n    \n     \n    posOrb3.yz *= Rot(-iTime*4.5);\n    dist= min(dist ,length(posOrb3)-0.4); //planet orbiting frame \n    //dist= min(dist ,sdBox(posOrb3 , vec3 (0.4)));\n  \n    posOrb3.y +=0.9;\n    dist= min(dist ,length(posOrb3)-0.1); //moon orbiting\n    \nreturn dist;\n}\n//Inner frame\nfloat SceenTPR(vec3 p)  //Order of rotation tetha phi rho\n{\n\n    float dist =1000.0;  \n    float radius2 = 4.0;\n    float width = 0.2;\n\n    vec3 boxOut = vec3( radius2 ,radius2,  width  );\n    vec3 boxIn = vec3( radius2-width*0.5,  radius2-width*0.5 ,width+width );\n  \n    // Angles \n    float tetha = 0.51,\n          phi   = 0.8785398,\n          rho   = -0.5*iTime;\n   \n\n \n   p = RotTPR( p,tetha,phi,rho);\n   \n   dist = min(dist, sdSquareFrame3( p,  boxOut, boxIn));\n     \n    \nreturn dist;\n}\n\n\nfloat GetDist(vec3 p) {\n       \n       float d=1000.0;\n       d= min(d,Sceen(p));    //Coordinat lines, sphere, n sided polygon\n       d= min(d,Sceen2(p));   //Outer frame\n       //d= min(d,SceenTPR(p)); //Inner frame\n    \n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        d = normalize( c + uv.x*r + uv.y*u);\n    return d;\n}\nfloat GetLight(vec3 p) {\n    \n    vec3 lightPos = vec3(9, 13, 20);\n    //lightPos.xz += vec2(sin(iTime), cos(iTime))*2.;\n    vec3 lig = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, lig), 0.0, 1.);\n   \n    float d = RayMarch(p+n*SURF_DIST*2., lig);\n    if(d<length(lightPos-p)) dif *= .2;\n   \n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(2.0, 1.0, -45.0);\n    ro.yz *= Rot(-m.y*1.9+1.5);\n    ro.xz *= Rot(-m.x*6.2831);\n  \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 3.0);\n   \n    vec3 col = vec3(0.); \n    vec2 nuv= -uv;\n    \n    //col=vec3(nuv.y,nuv.y, nuv.y);      \n    //col=vec3(0.52-nuv.y-0.1, 0.01-nuv.y+0.1 , 0.2+ nuv.y);\n    //col=vec3(0.4-nuv.y-0.1, 0.05-nuv.y , 0.5- nuv.y*0.2);//+ nuv.y*0.1)\n    col=vec3(-uv.y*0.5 +.5,-uv.y,.3);\n    float d = RayMarch(ro, rd);\n\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        float dif=GetLight( p);\n        col = vec3(0.95*dif,dif,0.9*dif);\n    }\n   \n    fragColor = vec4(col,1.0);\n \n}","name":"Image","description":"","type":"image"}]}