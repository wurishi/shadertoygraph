{"ver":"0.1","info":{"id":"MsGGRG","date":"1454990163","viewed":442,"name":"Glass blob","username":"bit2shift","description":"Just messing around with reflect() and refract().","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","glass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float FOV = 90.0;\nconst int STEPS = 128;\nconst float EPSY = 0.001;\n\nfloat map(vec3 p)\n{\n    float t = (4.0 * sin(iTime / 4.0));\n    return (length(p) - 4.0) + sin(t * p.x) * sin(t * p.y) * sin(t * p.z);\n}\n\nfloat diff(vec3 p, vec3 h)\n{\n    return (map(p + h) - map(p - h)) / (2.0 * length(h));\n}\n\nvec3 norm(vec3 p)\n{\n    mat3 e = mat3(EPSY);\n    float x = diff(p, e[0]);\n    float y = diff(p, e[1]);\n    float z = diff(p, e[2]);\n    return normalize(vec3(x, y, z));\n}\n\nvec3 march(vec3 origin, vec3 direction)\n{\n    for(int i = 0; i < STEPS; i++)\n    {\n        float dist = map(origin);\n        if(dist < EPSY)\n            break;\n        else\n            origin += (direction * dist);\n    }\n    return origin;\n}\n\nmat3 rotY(float angle)\n{\n    float cs = cos(radians(angle));\n    float sn = sin(radians(angle));\n    \n    vec3 c0 = vec3(cs, 0, -sn);\n    vec3 c1 = vec3( 0, 1,   0);\n    vec3 c2 = vec3(sn, 0,  cs);\n    return mat3(c0, c1, c2);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = ((2.0 * fragCoord) - iResolution.xy) / min(iResolution.x, iResolution.y) * tan(radians(FOV) / 2.0);\n    \n    mat3 rot = rotY(iTime * 20.0);\n    vec3 origin = rot * vec3(0, 0, -8.0);\n    vec3 direction = rot * normalize(vec3(uv, 1));\n    \n    vec3 p = march(origin, direction);\n    if(map(p) < EPSY)\n    {\n        vec3 n = norm(p);\n        vec3 fl = reflect(direction, n);\n        vec3 fr = refract(direction, n, (1.0 / 1.1));\n        fragColor = mix(texture(iChannel0, fl), texture(iChannel0, fr), 0.80);\n    }\n    else\n        fragColor = texture(iChannel0, direction);\n}\n","name":"Image","description":"","type":"image"}]}