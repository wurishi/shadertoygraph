{"ver":"0.1","info":{"id":"DlGSz3","date":"1686232963","viewed":71,"name":"Warping simplex ocean","username":"ReasonMaster","description":"Tried to make a flow field, ended up making this haha","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["simplexsimplexnoisenoiseoceanwaterorganicnatureflow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\n\nfloat snoise(vec2 v){\n  const vec4 C = vec4(0.211324865405187, 0.366025403784439,\n           -0.577350269189626, 0.024390243902439);\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod(i, 289.0);\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n  + i.x + vec3(0.0, i1.x, 1.0 ));\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n    dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    \n    float angle = (snoise(uv * 2.) + 1.) / abs(uv.y * ((sin(iTime) * 6.) - 10.));\n    float res = (iTime * .1) + 1.;\n    float neighborAngles[] = float[]((snoise(vec2(uv.x,       uv.y + res) * 2.) + 1.5) / 3.,\n                                     (snoise(vec2(uv.x,       uv.y - res) * 2.) + 1.5) / 3.,\n                                     (snoise(vec2(uv.x + res, uv.y      ) * 2.) + 1.5) / 3.,\n                                     (snoise(vec2(uv.x - res, uv.y      ) * 2.) + 1.5) / 3.);\n    \n    float closest = neighborAngles[0];\n    for (int i = 1; i < 4; i++) {\n        if (abs(angle - neighborAngles[i]) < abs(angle - closest)) {\n            closest = neighborAngles[i];\n        }\n    }\n    \n    closest = pow(closest, 3.) + .16;\n    vec3 col = vec3(.15, closest, closest);\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}