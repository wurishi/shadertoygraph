{"ver":"0.1","info":{"id":"tlSBD3","date":"1599988591","viewed":227,"name":"3 - Fur","username":"Krabcode","description":"mouse x = disheveledness\nmouse y = wind strength\n","likes":9,"published":1,"flags":32,"usePreview":0,"tags":["displacement","fbm","hash","backbuffer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define res iResolution\n#define t float(iFrame)\n#define tau 6.28318\n\n// Hash without Sine by David Hoskins (MIT License)\nfloat hash12(vec2 p)\n{\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\nfloat hash13(vec3 p3)\n{\n    p3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 backbufferFaded(vec2 uv, float mult){\n    return texture(iChannel0, uv).rgb * mult;\n}\n\nfloat noiseSample(vec2 uv){\n    return texture(iChannel1, uv).r;\n}\n\nfloat fbm(vec2 uv){\n    uv.y += t*.001;\n    float sum = 0.;\n    float freq = 0.02;\n    float amp = 1.;\n    for(int i = 0; i < 5; i++){\n        sum += noiseSample(uv*freq)*amp;\n        freq *= 2.5;\n        amp *= .5;\n    }\n\treturn sum;\n}\n\nvec2 wind(vec2 uv, float mag, float angleRange){\n    float windNoise = fbm(uv);\n    float windAngle = angleRange*windNoise;\n    vec2 windOffset = vec2(cos(windAngle), sin(windAngle))*mag;\n    return windOffset;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / res.xy;\n    vec2 cv = (fragCoord.xy - .5 * res.xy) / res.y;\n    vec2 cm =  (iMouse.xy-.5*res.xy) / res.y;\n    vec2 um = iMouse.xy / res.xy;\n    if(length(um) < .001){\n      um = vec2(.5);   \n    }\n    \n    float hash = hash13(vec3(cv.xy*1000., 0));\n    hash *= step(hash, .05);\n    hash *= smoothstep(0.5,.45, length(cv));\n    \n    vec3 col = hash*2. + backbufferFaded(\n        uv+wind(uv, .0001+um.y*0.0001, tau*.1+um.x*10.),\n        .995); // fade mult\n    \n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}