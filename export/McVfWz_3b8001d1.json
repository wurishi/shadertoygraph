{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"texture","id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"code":"#define PI 3.14159265359\n\nfloat maxdist = 50.0;\nfloat det = 0.001;\nvec3 objcol;\n\nmat2 rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c,s,-s,c);\n}\n\n//  Función de Iñigo Quilez\n//  https://www.shadertoy.com/view/MsS3Wc\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\n// Función de Iñigo Quilez\n// Sacada de https://www.shadertoy.com/view/MsXGWr\nvec3 texturize( sampler2D sa, vec3 p, vec3 n )\n{\n    vec3 x = texture( sa, p.yz ).xyz;\n    vec3 y = texture( sa, p.zx ).xyz;\n    vec3 z = texture( sa, p.xy ).xyz;\n    return x*abs(n.x) + y*abs(n.y) + z*abs(n.z);\n}\n\n// Primitivas de Iñigo Quilez\n// https://iquilezles.org/articles/distfunctions/\nfloat sphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat torus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat deathStar( in vec3 p2, in float ra, float rb, in float d )\n{\n  float a = (ra*ra - rb*rb + d*d)/(2.0*d);\n  float b = sqrt(max(ra*ra-a*a,0.0));\n    \n  vec2 p = vec2( p2.x, length(p2.yz) );\n  if( p.x*b-p.y*a > d*max(b-p.y,0.0) )\n    return length(p-vec2(a,b));\n  else\n    return max( (length(p          )-ra),\n               -(length(p-vec2(d,0))-rb));\n}\n\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\nfloat rhombus(vec3 p, float la, float lb, float h, float ra)\n{\n  p = abs(p);\n  vec2 b = vec2(la,lb);\n  float f = clamp( (ndot(b,b-2.0*p.xz))/dot(b,b), -1.0, 1.0 );\n  vec2 q = vec2(length(p.xz-0.5*b*vec2(1.0-f,1.0+f))*sign(p.x*b.y+p.z*b.x-b.x*b.y)-ra, p.y-h);\n  return min(max(q.x,q.y),0.0) + length(max(q,0.0));\n}\n\n// Cuerpo del pez\nfloat fishBody(vec3 p, float size) {\n    float body = sphere(p, size);\n    float disp =  sin(13.0 * p.x) * sin(10.0 * p.y) * sin(2.0 * p.z);\n    return min(body, body + disp);\n}\n\n// Boca del pez\nfloat fishMouth(vec3 p, float size) {\n    vec3 p2=p;\n    p2.z += 4.5;\n    p2.yz *= rot(1.5);\n    return torus(p2/(size/3.0), vec2(0.15, 0.06)) * (size/4.0);\n}\n\n// Ojos del pez\nfloat fishEyes(vec3 p, float size) {\n    vec3 p3 = p;\n    p3.z += 4.0;\n    p3.x += 1.0;\n    p3.y -= 0.5;\n    p3.xz *= rot(5.0);\n    float eye1 = deathStar(p3/size, 0.5, 0.3, 0.64)*size;\n    \n    vec3 p4 = p3;\n    p4.z -= 1.7;\n    p4.x -= 1.0;\n    float eye2 = deathStar(p4/size, 0.5, 0.3, 0.64)*size;\n    \n    return min(eye1, eye2);\n}\n\n// Aletas del pez\nfloat fishWings(vec3 p, float size) {\n    vec3 p5 = p;\n    p5.yz *= rot(1.8);\n    p5.xz *= rot(0.9);\n    p5.x -= 1.0;\n    p5.z += 3.0;\n    p5.y += 1.5;\n    p5.xz = abs(p5.xz);\n    float wing1 = rhombus(p5/(size/5.0), 3.0, 1.4, 0.1, 0.7) * (size/5.0);\n    \n    vec3 p6 = p;\n    p6.yz *= rot(1.8);\n    p6.xz *= rot(-0.9);\n    p6.y -= 3.0;\n    p6.z += 4.5;\n    p6.x -= 0.0;\n    \n    float wing2 = rhombus(p6/(size/4.0), 3.0, 1.4, 0.1, 0.7) * (size/4.0);\n    return min(wing1, wing2);\n}\n\nfloat de(vec3 p) {\n    float size = sin(iTime) + 3.0;\n\n    float body = fishBody(p, size);\n    \n    float mouth = fishMouth(p, size);\n    \n    float eyes = fishEyes(p, size/5.0 + 0.4);\n    \n    float wings = fishWings(p, size);\n    \n    float d = min(min(body, eyes), min(wings, mouth));\n    \n    vec4 tx = texture(iChannel0, vec2(float(p.x),1.0 - float(p.y)));\n    \n    // Valores de color estáticos\n    float val1 = -1.;\n    float val2 = -0.66;\n    float val3 = 0.408;\n    float val4 = -0.5;\n    float val5 = 0.7;\n    float val6 = 1.0;\n    \n    if (abs(d-eyes) < 1.0) objcol = hsb2rgb(vec3(val4, val5, val6));\n    if (abs(d-wings) < 1.0) objcol = hsb2rgb(texturize(iChannel0, p*0.05 + 0.5, vec3(1.0, 1.0, 0.5)));\n    if (abs(d-body) < 0.1) objcol = hsb2rgb(vec3(val1, val2 + p.y, val3 - sin(p.y)));\n    \n    return d;\n}\n\nvec3 normal(vec3 p) {\n    vec2 d=vec2(0.,det);\n    return normalize(vec3(de(p+d.yxx),de(p+d.xyx),de(p+d.xxy))-de(p));\n}\n\n// Sombreado\nvec3 shade(vec3 p, vec3 dir) {\n    vec3 n=normal(p);\n    vec3 lightdir = normalize(vec3(3.,1.,-1.));\n    float amb = 0.1;\n    float dif=max(0.,dot(lightdir, n))*0.7;\n    vec3 ref = reflect(lightdir, n);\n    float spe = pow(max(0.,dot(dir,ref)),30.)*0.7;\n    return objcol*(amb+dif)+spe;\n}\n\nvec3 march(vec3 from, vec3 dir)\n{\n    vec3 p, col=vec3(0.0);\n    float totdist=0.0, d;\n    for (int i=0; i<100; i++) \n    {\n        p=from+dir*totdist;\n        d=de(p);\n        if (d<det || totdist>maxdist) break;\n        totdist+=d;\n    }\n    if (d<det) {\n        p-=det*dir;\n        col=shade(p,dir);\n    } \n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec3 dir = normalize(vec3(uv, 3.0));\n    vec3 from = vec3(0.0, 0.0, -15.0);\n    vec3 c = march(from, dir);\n    fragColor = vec4(c, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"McVfWz","date":"1733970493","viewed":38,"name":"fishy wishy","username":"fdemar","description":"fish attempt","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","fish"],"hasliked":0,"parentid":"","parentname":""}}