{"ver":"0.1","info":{"id":"l3SBWy","date":"1729873521","viewed":122,"name":"Zero-Player Pong","username":"hectobreak","description":"Small joke-y shader I wrote. Nothing serious, I just found the idea amusing and easy to implement.","likes":6,"published":3,"flags":0,"usePreview":0,"tags":["game","animation","joke"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float racket_size = 0.2;\nfloat w_offset;\nvec3 color = vec3(1.0, 1.4, 1.5);\n\nfloat sdBox( in vec2 p, in vec2 b ) {\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat ping(float time){\n    return abs(1.0 - mod(time, 2.0));\n}\n\nfloat ball_y(float time){\n    return ping(0.4 * time + 0.152132);\n}\n\nfloat jiggle(float time){\n    float s1 = sin(4.0 * time);\n    float s2 = s1 * s1;\n    float s4 = s2 * s2;\n    float s8 = s4 * s4;\n    float s10 = s8 * s2;\n    return 2.0 * (min(1.0, 2.0 * mod(time * 0.5, 1.0)) + floor(0.5 * time)) + 0.1 * s10;\n}\n\n\nfloat sdf( vec2 pos ){\n    float racket_1_pos = min(1.0 - racket_size, max(0.0, ball_y(jiggle(iTime) - 1.0) - racket_size/2.0)) + racket_size/2.0;\n    float racket_2_pos = min(1.0 - racket_size, max(0.0, ball_y(jiggle(iTime - 1.0)) - racket_size/2.0)) + racket_size/2.0;\n    \n    float dist = sdBox( pos - vec2(-w_offset/2.0, racket_1_pos - 0.5), vec2(0.01, racket_size/2.0) );\n    dist = min(dist, sdBox( pos - vec2(w_offset/2.0, racket_2_pos - 0.5), vec2(0.01, racket_size/2.0) ));\n    dist = min(dist, sdBox(pos - vec2((ping(iTime) - 0.5)*w_offset, ball_y(iTime) - 0.5), vec2(0.01, 0.01)));\n    \n    for(int i = 0; i < 10; ++i){\n        float y = float(i) / 9.0 - 0.5;\n        dist = min(dist, sdBox(pos - vec2(0.0, y), vec2(0.003, 0.025)));\n    }\n    \n    dist = min(dist, max(sdBox(pos - vec2(0.2, 0.3), vec2(0.05, 0.1)), -sdBox(pos - vec2(0.2, 0.3), vec2(0.043, 0.09))));\n    dist = min(dist, max(sdBox(pos - vec2(-0.2, 0.3), vec2(0.05, 0.1)), -sdBox(pos - vec2(-0.2, 0.3), vec2(0.043, 0.09))));\n    \n    return dist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    w_offset = iResolution.x / iResolution.y * 0.9;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - iResolution.xy/2.0)/iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = color * smoothstep(0.01, 0.0, sdf(uv));\n    if(mod(-fragCoord.y - 8.0 * iTime, 20.0) < 10.0) \n        col += 0.03 * smoothstep(0.0, 5.0, mod(-fragCoord.y - 8.0 * iTime, 20.0)) * color;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}