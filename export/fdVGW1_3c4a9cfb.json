{"ver":"0.1","info":{"id":"fdVGW1","date":"1631491487","viewed":47,"name":"cahn allen","username":"Benstyle","description":"a cahn allen simulation using shaders","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["cahnallen"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n\n    // Output to screen\n    fragColor = texture(iChannel0,uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n#define epsilon 0.00001\n\n#define kappa 0.000005\n\n#define gamma 0.2\n\n#define dt 0.001\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    bool bFullReset = FullReset;\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float phi = texture(iChannel0,uv).x;\n    \n    \n    if(bFullReset){\n        \n        phi = 2.*texture(iChannel1,uv).x;\n        \n        \n    \n        //phi =  2. - 2.*cos(uv.x*10.)*sin(uv.y*10.) ;\n        //phi = smoothstep( 0.,1.,uv.x);\n    }\n    \n    \n    \n    float g_prime = 200.*phi*(4.*phi*phi - 6.*phi + 2.);// + 250.*(iMouse.y/iResolution.y - .5) ;// + (iMouse.y/iResolution.y)*500. ;\n    \n    \n    float laplace_phi = (texture(iChannel0,uv - vec2(1,0)*epsilon ).x + texture(iChannel0,uv + vec2(1,0)*epsilon).x -\n                         2.*texture(iChannel0, uv)).x/(epsilon*epsilon)\n                         +\n                         (texture(iChannel0,uv - vec2(0,1)*epsilon).x + texture(iChannel0,uv + vec2(0,1)*epsilon).x -\n                         2.*texture(iChannel0, uv).x)/(epsilon*epsilon);\n    \n    \n    phi = clamp(phi - dt*gamma*(g_prime - kappa*laplace_phi), -.2,1.2 );\n    \n    \n    \n    fragColor = vec4(phi,phi,phi,0.); \n\n\n\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\n\n\nbool FullResetImpl(int iFrame)\n{\n    return iFrame < 4; \n}\n\n\n#define FullReset FullResetImpl(iFrame)\n","name":"Common","description":"","type":"common"}]}