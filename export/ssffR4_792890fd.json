{"ver":"0.1","info":{"id":"ssffR4","date":"1644539317","viewed":69,"name":"mandel bisexual lighting","username":"galactustrombone","description":"Starter code for UTCG shaders workshop competition","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["utcg2022"],"hasliked":0,"parentid":"fsBcWd","parentname":"UTCG Competition starter"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float M_PI = 3.14159265358979323846264338327950288;\n\n// Mandelbrot set\nfloat mandel (float cx, float cy) {\n\tfloat x = 0.;\n\tfloat y = 0.;\n\tfloat i;\n\tfor (i = 0.; i < 64.; i++) {\n\t\tif ((x*x + y*y) > 4.) {\n\t\t  break;\n\t\t}\n\t\tfloat xtemp = x*x - y*y + cx;\n\t\ty = 2.*x*y + cy;\n\t\tx = xtemp;\n\t}\n\treturn sqrt(i / 64.);\n}\n\n// 2d rotation matrix: rot(angle) * vector will rotate the vector by angle clockwise\nmat2 rot(float angle)\n{\n    return mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n}\n\n// return true if point is inside circle with given centre and radius\nbool isInCircle(vec2 centre, float radius, vec2 point)\n{\n    return length(point - centre) < radius;\n}\n\n// ---------------- helpers above ----------------\n\nfloat func(vec2 uv)\n{\n    float v = sin(uv.y * 4. + iTime / 2.);\n    return 0.5 + 0.5 * v;\n}\n\nfloat func2(vec2 uv)\n{\n    return 0.5 + 0.5 * sin(2. * uv.x + cos(5. * uv.y + sin(9. * uv.x + iTime / 2.)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // pixel coordinates from centre - centre is (0, 0)\n    vec2 uv = (fragCoord - vec2(iResolution.x, iResolution.y) / 2.) / iResolution.y;\n    \n    vec3 red = vec3(1, 0.2, 0.5);\n    vec3 blue = vec3(0, 0.4, 0.8);\n    vec3 col = mix(red, blue, func(uv));\n    \n    vec3 col2 = mix(col, vec3(1), mandel(2. * uv.x, 2. * uv.y));\n    \n    // Output to screen\n    fragColor = vec4(col2, 1.0);\n}","name":"Image","description":"","type":"image"}]}