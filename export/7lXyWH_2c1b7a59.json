{"ver":"0.1","info":{"id":"7lXyWH","date":"1647905169","viewed":109,"name":"Real-time fractal zoom","username":"Bedhead","description":"This is a real time fractal zoom program. ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrotset"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//zoom in on this point\nvec2 c = vec2(-1.595905, 0);\n\n\n//distance function\nfloat dist(vec2 x)\n{\n    return sqrt((x.x * x.x) + (x.y * x.y));\n}\n\n\n//lerp\nfloat lerp(float a, float b, float x)\n{\n    return x * (b - a) + a;\n}\n\n\n//function for seeing if a point is in the mandelbrot set\nbool pointInMandelbrotSet(vec2 c)\n{\n    vec2 z = c;\n    vec2 pastZ = c;\n    \n    for(int i = 0; i<10; i++){\n        z.x = pastZ.x * pastZ.x - pastZ.y * pastZ.y + c.x;\n        z.y = 2.0 * pastZ.x * pastZ.y + c.y;\n        if(dist(z) > 2.0){\n            return false;\n        }\n        \n        pastZ = z;\n    }\n    \n    return true;\n}\n\n\n//function for coloring the mandelbrot set\nvec3 colorMandelbrotSet(vec2 c)\n{\n    //past z and z variables\n    vec2 z = c;\n    vec2 pastZ = c;\n    \n    //this will run 500 iterations of the mandelbrot set\n    for(float i = 0.0; i<500.0; i++){\n        //update z\n        z.x = pastZ.x * pastZ.x - pastZ.y * pastZ.y + c.x;\n        z.y = 2.0 * pastZ.x * pastZ.y + c.y;\n        \n        \n        if(dist(z) > 2.0){\n            //simple coloring\n            return vec3(0, abs(sin(i/2.0))/75.0*(i+1.0), abs(cos(i/2.0))/75.0*(i+1.0));\n        }\n        \n        pastZ = z;\n    }\n    \n    //return the color black if the point is in the mandelbrot set\n    return vec3(0, 0, 0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float T = iTime-3.0 + 1.0;\n    float s = 2.0/max(T*T*T, 1.0);\n\n    \n    //modified normal coordinate\n    vec2 uv = vec2((fragCoord.x+iResolution.x/4.0 - iResolution.x/2.0)/min(iResolution.x, iResolution.y), fragCoord.y/min(iResolution.x, iResolution.y));\n    \n    //point in space\n    vec2 p = vec2(lerp(-s, s, uv.x) + c.x, lerp(s, -s, uv.y) + c.y);\n\n    vec3 col = colorMandelbrotSet(p);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}