{"ver":"0.1","info":{"id":"DdlSWM","date":"1669023786","viewed":73,"name":"[k] HSV Color Picker","username":"panzerboiler","description":"Just verifying the possibility to render the thing in a shader.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["color"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// because http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl is often down\n\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n/*\n    // color shift\n    vec3 hsv = rgb2hsv(fragColor.rgb);\n    hsv.x = fract(hsv.x + iMouse.x / iResolution.x);\n    fragColor.rgb = hsv2rgb(hsv);\n*/\n\nfloat aastep(float threshold, float value) {\n  #ifdef GL_OES_standard_derivatives\n    float afwidth = length(vec2(dFdx(value), dFdy(value))) * 0.70710678118654757;\n    return smoothstep(threshold-afwidth, threshold+afwidth, value);\n  #else\n    return step(threshold, value);\n  #endif  \n}\n\n// https://www.shadertoy.com/view/WdlSRB\n// Coordinates are at pixel center, thus the .5.\n\n// Draw exactly one pixel in order to explore Shadertoy, fragCoord, and WebGL.\n// Make sure your browser isn't scaling (zoomed in or out), otherwise you\n// won't see exactly 1 pixel.\n\n// fragCoord gives position of pixel center.\n// The equality comparison to works because there are exact representations\n// for all floats ending in .5 between [-8388607.5, 8388607.5].\n// You can try this out for yourself here:\n// https://www.h-schmidt.net/FloatConverter/IEEE754.html\nconst vec2 pixelPosition = vec2(100.5, 100.5);\nconst vec4 color = vec4(1., 1., 1., 1.);\nconst vec4 background = vec4(0., 0., 0., 1.);\n\n/*\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(fragCoord == pixelPosition ? color : background);\n}\n*/\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    float hue = iMouse.z / iResolution.x;\n    vec3 hsv = vec3(hue, uv);\n    col = hsv2rgb(hsv);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n    vec2 p = (2.0*fragCoord - iResolution.xy ) / iResolution.y;\n    //vec2 m = (iMouse.xy / iResolution.xy);\n    vec2 m = (2.0*iMouse.xy - iResolution.xy) / iResolution.y;\n    //float d = length(uv-m) - 0.1;\n    //vec2 one_px = vec2( 1.0 ) / iResolution.xy;\n    // Non mi è chiara questa cosa, ancora diocane...\n    // Come facciamo a tornare ad avere la dimensione precisa di 1px?\n    float s = 32.0 / iResolution.y;\n    float d = length(p-m) - s;\n    //fragColor.rgb = mix(vec3(fract(iTime*2.)<0.5?0.0:1.0), fragColor.rgb, smoothstep(-0.001,0.001,d));\n    fragColor.rgb = mix(vec3(fract(iTime*2.)<0.5?0.0:1.0), fragColor.rgb, aastep(0.0,d));\n    // Non è un cazzo smooth...\n    /*\n    if ( d < -8.0 / iResolution.y ) // questa è la metà di 8 pixels, visto che siamo solo su interno.\n    {\n        fragColor.rgb = hsv2rgb(vec3(hue, uv.xy));//vec3(1.0);\n    }\n    */\n    // Ora è bello smooth, deh.\n    fragColor.rgb = mix(hsv2rgb(vec3(hue, uv.xy)), fragColor.rgb, aastep(-8.0 / iResolution.y,d));\n    //fragColor.rgb = vec3(d);\n    \n    // Interessante che le coordinate dei fragments sono nel centro\n    // dei pixels, pertanto sempre .5 .5. Torna come cosa.\n    // Mi chiedo come siano le coordinate del mouse passate da shadertoy.\n    // Stassa situazione?\n    \n    // Exactly one pixel\n    if ( fragCoord == pixelPosition + vec2(100.0) )\n        fragColor = vec4(vec3(fract(iTime*4.)<0.5?0.0:1.0), 1.0);\n    \n    // one fat pixel\n    if ( lessThanEqual(abs(fragCoord - pixelPosition),vec2(4.0)) == bvec2(true,true) )\n        fragColor = vec4(vec3(fract(iTime*4.)<0.5?0.0:1.0), 1.0);\n}","name":"Image","description":"","type":"image"}]}