{"ver":"0.1","info":{"id":"tsyyDt","date":"1604001559","viewed":72,"name":"Stuck between magnetic fields","username":"eimink","description":"This is only a test. Or is it.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["testing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by eimink\n// Based on https://www.shadertoy.com/view/MdfGRX by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nfloat hash12(vec2 p){\n\treturn fract(sin(dot(p, vec2(3.9898, 78.233))) * 803758.5453);\n}\n\nfloat noiseMod( in vec3 x )\n{\n    vec3 p = floor(x);\n\treturn hash12(p.xy);\n}\n\nvec4 map( vec3 p )\n{\n\tfloat den = 0.3 - p.y;\n\n    // invert space\t\n\tp = -9.0*p/dot(p,p);\n\n    // twist space\t\n\tfloat co = cos(den - 0.45*iTime);\n\tfloat si = sin(den - 1.25*iTime);\n\tp.xz = mat2(si,-co,-si,co)*p.xz;\n\n    // smoke\t\n\tfloat f;\n\tvec3 q = p                          - vec3(0.0,1.0,0.0)*iTime;;\n    f  = 0.40000*noiseMod( q ); q = q*3.02 - vec3(0.0,1.0,1.0)*iTime;\n    f += 0.25000*noiseMod( q ); q = q*2.03 - vec3(1.0,1.0,1.0)*iTime;\n    f += 0.12500*noiseMod( q ); q = q*2.01 - vec3(1.0,1.0,0.0)*iTime;\n    f += 0.06250*noiseMod( q ); q = q*1.02 - vec3(0.0,1.0,1.0)*iTime;\n    f += 0.03125*noiseMod( q );\n\n\tden = clamp( den +4.0*f, 0.0, 3.0+2.0*sin(iTime) );\n\t\n\tvec3 col = mix( vec3(1.0,0.9,0.8), vec3(0.4,0.15,0.1), den );\n\t\n\treturn vec4( col, den );\n}\n\nvec3 raymarch( in vec3 ro, in vec3 rd, in vec2 pixel )\n{\n\tvec4 sum = vec4( 0.0 );\n\n\tfloat t = 0.0;\n\n    // dithering\t\n\tt += 0.07*hash12(pixel);\n\t\n\tfor( int i=0; i<100; i++ )\n\t{\n\t\tif( sum.a > 0.99 ) break;\n\t\t\n\t\tvec3 pos = ro + t*rd;\n\t\tvec4 col = map( pos );\n\t\t\n\t\tcol.xyz *= mix( 3.1*vec3(0.2,0.5,1.05), vec3(0.48,0.53,1.5), clamp( (pos.y-0.2)/2.0, 0.0, 1.0 ) );\n\t\t\n\t\tcol.a *= 0.3;\n\t\tcol.rgb *= col.a;\n\n\t\tsum = sum + col*(1.0 - sum.a);\t\n\n\t\tt += 0.05;\n\t}\n\n\treturn clamp( sum.xyz, 0.0, 1.0 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 1.7*q;\n    p.x *= iResolution.x/ iResolution.y;\n\t\n    // camera\n    vec3 ro = 3.0*normalize(vec3(0.2,.4 - 1.0*(-.1), 0.3));\n\tvec3 ta = vec3(sin(iTime), cos(iTime), 0.1);\n\tfloat cr = 0.3 * hash12(ro.xy);\t\t\n\t\n\t// build ray\n    vec3 ww = normalize( ta - ro);\n    vec3 uu = normalize(cross( vec3(cr,cr,0.0), ww ));\n    vec3 vv = normalize(cross(ww,uu));\n    vec3 rd = normalize( p.x*uu + p.y*vv + 2.0*ww );\n\t\n    // raymarch\t\n\tvec3 col = raymarch( ro, rd, fragCoord );\n\t\n\t// contrast and vignetting\t\n\tcol = col*0.5 + 0.5*col*col*(3.0-2.0*col);\n\tcol *= 0.25 + 0.75*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.1 );\n\t\n    fragColor = vec4( col, 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}