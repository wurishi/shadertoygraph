{"ver":"0.1","info":{"id":"XfsGDH","date":"1703063908","viewed":44,"name":"Planetary Gear","username":"KaleyGoode","description":"See Also: Clock with Planetary Gears: https://www.shadertoy.com/view/Xcs3DH\n\n3 Planetary Gears\nTeeth:\n  14 sun\n  28 planets\n  70 ring\nRelative speeds:\n  -4 sun\n   1 carrier\n   2 ring\n","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["gears","specular","ambient","drive","planetary","cogs","sphereical","hemisphericallighting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Inspired by:\n//  https://www.shadertoy.com/view/MsGczV\n// which was inspired by:\n//  http://cmdrkitten.tumblr.com/post/172173936860\n\n// Values from:\n//  https://www.thecatalystis.com/gears/\n// which was inspired by:\n//  http://jsbin.com/oresos/latest\n// which was inspired by:\n//  http://www.thingiverse.com/thing:5505\n// and:\n//  http://grabcad.com/questions/tutorial-how-to-model-involute-gears-in-solidworks-and-show-design-intent\n#define      planets  3.\n#define  planetTeeth 28.\n#define    ringTeeth 70.\n#define     sunTeeth 14.\n#define carrierSpeed .25\n#define   ringRadius .85  // of the canvas height\n#define    pinRadius .07\n#define  toothHeight .1 // [.01, .15]\n#define  toothCurve  2.  // [.25, 3.]\n#define        zoom  2.  // 2. fills canvas height with a small border\n#define   background vec3(.1)        // RGB colour\n#define   foreground vec3(.95,.7,.2) // RGB colour\n#define  pi 3.14159265359\n#define tau (2.*pi)\n\nstruct Gear {\n  float gearR; // Gear radius\n  float diskR; // Inner or outer border radius\n  float teeth; // Tooth count\n  vec3  color; // Colour (background then output at uv)\n  float t;     // Time\n};\nfloat   Signed(float x)          {return 2.* x-1. ;} // Unsigned Unit Interval [ 0,1] to   Signed UI [-1,1]\nfloat Unsigned(float x)          {return .5*(x+1.);} //   Signed Unit Interval [-1,1] to Unsigned UI [ 0,1]\nfloat Lower   (float n, float t) {return clamp(n* t       ,0.,1.);} // if n=5, returns the lower fifth spread out to [0,1]\nfloat Upper   (float n, float t) {return clamp(n*(t-1.)+1.,0.,1.);} // t-(n-1)/n; if n=5, returns the upper fifth spread out to [0,1]\nfloat Upper3  (float n, float t) {return pow(Upper(n,t),3.);} // if n=5, the upper fifth is spread out to [0,1]. That result is then cubed and returned.\n\nvoid DrawGear(Gear g, inout vec3 color, vec2 uv, float antialias) {\n  float r = length(uv);\n  float a = atan(uv.y, uv.x);\n  float p = g.gearR // Gear polar function:\n          - .5*toothHeight // Make gears with internal or external teeth have the same thickness\n          + toothHeight / (1. + exp(toothCurve*sin(g.t + g.teeth*a)));\n  float gear = r-p;\n  float disk = r-g.diskR; //      Pinions:           Ring:\n  float t = (g.gearR > g.diskR) ? max(-disk, gear) : max(disk, -gear);\n  float d = smoothstep(antialias,-antialias, t);\n  color = mix(color, g.color, d);\n}\n\nvoid mainImage(out vec4 o, in vec2 fragCoord) {\n  float t = carrierSpeed*iTime,\n      rPx = .5*min(iResolution.x, iResolution.y); // Radius in pixels\n  vec2 uv = (fragCoord.xy-.5*iResolution.xy)/rPx;\n  const float scale = ringRadius / ringTeeth,\n       planetRadius =    scale * planetTeeth,\n          sunRadius =    scale *    sunTeeth,\n           sunSpeed = -planetTeeth,\n          ringSpeed =    ringTeeth+planetTeeth+sunTeeth,\n        planetSpeed =    ringTeeth,\n      carrierRadius =    ringRadius*(sunTeeth+planetTeeth)/ringTeeth,\n          ringOuter = .1+ringRadius;\n  float   antialias = length(fwidth(uv));\n  Gear   ringGear   = Gear(  ringRadius,ringOuter ,  ringTeeth, foreground, 0.);\n  Gear planetGear   = Gear(planetRadius, pinRadius,planetTeeth, foreground, 0.);\n  Gear    sunGear   = Gear(   sunRadius, pinRadius,   sunTeeth, foreground, 0.);\n  vec3 color = background; // Background Color in, and Output from DrawGear as the return\n  ringGear.t = ringSpeed*t; DrawGear(ringGear,color, uv, antialias);\n   sunGear.t =  sunSpeed*t; DrawGear( sunGear,color, uv, antialias);\n  for(float i=1.; i<=planets; ++i) {\n    t += tau/planets; // Evenly-space the planet gears around the ring\n    planetGear.t = 4.*i+planetSpeed*t; // The 4xi sychronises the cogs\n    DrawGear(planetGear, color, uv+carrierRadius*vec2(cos(t),sin(-t)), antialias);\n  }\n  if(length(uv) < 1.) {\n    float x = uv.x, // x,y are Unsigned Unit Intervals [0,1]\n          y =-uv.y,\n          z = sqrt(abs(1.-dot(uv,uv))), // Get the third coordinate using a spherical model\n    ambient  = Upper3( 5., Unsigned(( 2.*x     +6.*z)/ 7. ))  // take the Upper fifth and spread it\n             + Upper3( 3., Unsigned((    x+4.*y+6.*z)/ 8.5)), // take the Upper third and spread it\n    specular = Upper3(15., Unsigned((-6.*x-3.*y+9.*z)/11.7))\n             + Upper3(17., Unsigned((-3.*x-6.*y+9.*z)/11.3));\n    color = mix(color,max(.5*(color+ambient),specular),.5);\n  }\n  o = vec4(color,1.);\n}\n","name":"Image","description":"","type":"image"}]}