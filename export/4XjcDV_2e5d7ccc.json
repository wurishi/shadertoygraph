{"ver":"0.1","info":{"id":"4XjcDV","date":"1727741192","viewed":40,"name":"region growing fire, use mouse","username":"MSchaefer","description":"A region growing shader, use the mouse to paint the image.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["mouse","fire","regiongrowing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 fire = texture(iChannel0, uv);\n    \n    vec4 wood = texture(iChannel1, uv);\n    \n    wood.x = smoothstep(wood.x, fire.x, 0.5);\n    wood.y = smoothstep(wood.y, fire.y, 0.5);\n    wood.z = smoothstep(wood.z, fire.z, 0.5);\n   \n    //fragColor = fire; \n    fragColor = vec4(wood.x, wood.y, wood.z, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float M_E = 2.71828182845904523536028747135266250;\nvec2 offset [8];\n\nfloat sigmoid(float f)\n{\n    return 1. / (1. + pow(M_E, -f));\n}\n\n\nvec2 getUvOffset(vec2 fragCoord, vec2 offset) {\n    return (fragCoord.xy + offset) / iResolution.xy;\n}\n\nbool mouseClick() {\n   return iMouse.z>0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy / iResolution.xy;\n\tvec2 uv = p * vec2(iResolution.x/iResolution.y,1.0);\n    vec2 uvReal = fragCoord/iResolution.xy;\n    \n\t\n    if(iFrame < 10 ){\n        fragColor = vec4(0., 0., 0., 0.); //texture(iChannel1, uv);\n    } else {\n        // 0 1 2\n        // 3 4 5\n        // 6 7 8\n      offset[0] = getUvOffset(fragCoord, vec2(-1.,-1.));\n      offset[1] = getUvOffset(fragCoord, vec2(0.,-1.));\n      offset[2] = getUvOffset(fragCoord, vec2(1.,-1.));\n      offset[3] = getUvOffset(fragCoord, vec2(-1.,0.));\n      //offset[4] = getUvOffset(fragCoord, vec2(0.,0.));\n      offset[4] = getUvOffset(fragCoord, vec2(1.,0.));    \n      offset[5] = getUvOffset(fragCoord, vec2(-1.,1.));\n      offset[6] = getUvOffset(fragCoord, vec2(0.,1.));\n      offset[7] = getUvOffset(fragCoord, vec2(1.,1.));\n      \n      float col = texture(iChannel0, getUvOffset(fragCoord, vec2(0.,0.))).x; //0.0;\n      float counter = 1.0;\n      \n      for (int i = 0; i < 8; i++) {\n          float neighborColor = texture(iChannel0, offset[i]).x;\n          if (neighborColor > 0.2) {\n              col += texture(iChannel0, offset[i]).x;\n              counter += 1.;\n          } \n      }\n \n      col = col / counter;\n      col = col + (0.0015 * (counter - 1.0));\n      \n      float mouseY = iMouse.y / iResolution.y;\n      float mouseX = iMouse.x / iResolution.x;\n      \n      if(mouseClick() \n          && mouseY < uvReal.y && mouseY + 0.01 > uvReal.y\n          && mouseX < uvReal.x && mouseX + 0.01 > uvReal.x\n          ) {\n          col = 1.0;\n      }\n      \n      fragColor = vec4(col, col, col, 1.);\n    }\n}\n\n//------------------------------\n// Use this alternative code instead\n/*\n\nconst float M_E = 2.71828182845904523536028747135266250;\nvec2 offset [8];\n\nfloat sigmoid(float f)\n{\n    return 1. / (1. + pow(M_E, -f));\n}\n\n\nvec2 getUvOffset(vec2 fragCoord, vec2 offset) {\n    return (fragCoord.xy + offset) / iResolution.xy;\n}\n\nbool mouseClick() {\n   return iMouse.z>0.0;\n}\n\nfloat fade(float value, float start, float end)\n{\n    return (clamp(value,start,end)-start)/(end-start);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy / iResolution.xy;\n\tvec2 uv = p * vec2(iResolution.x/iResolution.y,1.0);\n    vec2 uvReal = fragCoord/iResolution.xy;\n    \n\t\n    if(iFrame < 10 ){\n        fragColor = vec4(0., 0., 0., 0.); //texture(iChannel1, uv);\n    } else {\n        // 0 1 2\n        // 3 4 5\n        // 6 7 8\n      offset[0] = getUvOffset(fragCoord, vec2(-1.,-1.));\n      offset[1] = getUvOffset(fragCoord, vec2(0.,-1.));\n      offset[2] = getUvOffset(fragCoord, vec2(1.,-1.));\n      offset[3] = getUvOffset(fragCoord, vec2(-1.,0.));\n      //offset[4] = getUvOffset(fragCoord, vec2(0.,0.));\n      offset[4] = getUvOffset(fragCoord, vec2(1.,0.));    \n      offset[5] = getUvOffset(fragCoord, vec2(-1.,1.));\n      offset[6] = getUvOffset(fragCoord, vec2(0.,1.));\n      offset[7] = getUvOffset(fragCoord, vec2(1.,1.));\n      \n      float col = texture(iChannel0, getUvOffset(fragCoord, vec2(0.,0.))).x; //0.0;\n      float counter = 1.0;\n      \n      for (int i = 0; i < 8; i++) {\n          float neighborColor = texture(iChannel0, offset[i]).x;\n          if (neighborColor > 0.2) {\n              col += texture(iChannel0, offset[i]).x;\n              counter += 1.;\n          } \n      }\n \n      col = col / counter;\n      col = col + (0.0015 * (fade(counter, 0.0, 1.0) - 1.0));\n      \n      float mouseY = iMouse.y / iResolution.y;\n      float mouseX = iMouse.x / iResolution.x;\n      \n      if(mouseClick() \n          && mouseY < uvReal.y && mouseY + 0.01 > uvReal.y\n          && mouseX < uvReal.x && mouseX + 0.01 > uvReal.x\n          ) {\n          col = 1.0;\n      }\n      \n      fragColor = vec4(col, col, col, 1.);\n    }\n}\n*/","name":"Buffer A","description":"","type":"buffer"}]}