{"ver":"0.1","info":{"id":"Wt2yDG","date":"1595262766","viewed":914,"name":"Simple color gradient","username":"Baruch","description":"Creates color values based on a linear input from 0 to 1. The result: see image. This can be helpful for coloring graphs etc.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["color","rgb","rainbow","valuetorgb"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Copyright (c) 2020, Daniel Bi≈üar\n// License CC BY 4.0\n\n// get rgb color from input value\n// low values = blue, middle = green, high = red\nvec3 yToRgb(float y)\n{    \n    float r, g, b;\n    \n    // functions where created based on the default linear equation\n    // f(x) = mx + b, where m is the slope and b the intersection point\n    // with the x axis f(0) = b ;)\n    // you can view the graph of the functions here: \n    // https://iquilezles.org/apps/graphtoy/?f3(x)=1-abs(x*2-1)&f4(x)=clamp(1-x*2,%200,%201)&f6(x)=clamp((x-0.5)*2,%200,%201)\n    \n    b = clamp(1.0-y*2.0, 0.0, 1.0);\n    g = 1.0-abs(y*2.0-1.0);\n    r = clamp((y-0.5)*2.0, 0.0, 1.0);\n    \n    return vec3(r, g, b);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;    \n    vec3 rgb = yToRgb(uv.y);    \n    \n    //fragColor = vec4(rgb.x, rgb.y, rgb.z, 1.0);    \n    // comment from: FabriceNeyret2\n    fragColor = vec4( pow( rgb, vec3(1./2.2)) , 1);\n}\n\n","name":"Image","description":"","type":"image"}]}