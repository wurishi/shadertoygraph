{"ver":"0.1","info":{"id":"fds3DN","date":"1615990342","viewed":219,"name":"1. Smoothstep Circle","username":"Sp3cim4n","description":"Learning shader magic","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["circle","learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //1. get uv coordinates of the pixel.\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //2. center the uv coordinate to viewport.\n    uv -= vec2(0.5);\n    //3. eliminate uv stretching.\n    uv.x *= iResolution.x/iResolution.y;\n    \n    //4. get distance of the pixel(u,v) from uv center(0,0).\n    float d = length(uv);\n    \n    //input, radius of the circle.\n    float r = 0.3;\n    //output, resulting color of pixel.\n    float c = 0.;\n    \n    //5a. transition harshly from white to black, with distance.\n    //if(d < r) c = 1.f; else c = 0.f;\n    \n    //input, smoothing radius, does not respects resolution.\n    //float s = 0.01;\n    \n    //input, smoothing radius. does respect resolution.\n    float s = 1./iResolution.y; \n    \n    //5b. transition smoothly from white to black, with distance.\n    c = smoothstep(r, r - s, d);\n        \n    fragColor = vec4(vec3(c), 1.);\n}","name":"Image","description":"","type":"image"}]}