{"ver":"0.1","info":{"id":"43jfDw","date":"1729535373","viewed":102,"name":"Spirolicious","username":"workingclasshacker","description":"A play on the classic spirograph","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["spirographmod"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy; // Normalize coordinates\n    uv = uv * 2.0 - 1.0; // Center the coordinates\n \n    uv.x *= iResolution.x / iResolution.y;\n    float time = mod(iTime, 3.14159*69.);\n    \n    float R = 0.9;\n    float r = 0.1+sin(time*.01)*.1/cos(length(uv)*.1-R); \n    float d = sin(time); \n    float drawSpeed = .5; \n    \n    float spinSpeed = .5; \n    time = time * spinSpeed;\n    \n  \n    float drawLimit = min(time * drawSpeed, 30.0); // Max draw time is 40\n    \n  \n    mat2 rotation = mat2(cos(time), -sin(time), sin(time), cos(time));\n    \n  \n    vec3 color = vec3(0.0);\n    \n\n    for (float t = 0.0; t < drawLimit; t += 0.08) {\n     \n        float x = (R + r) * cos(t) - d * cos((R + r) / r * t);\n        float y = (R + r) * sin(t) - d * sin((R + r) / r * t);\n        \n        vec2 spiroPos = rotation * vec2(x, y);\n        \n        float dist = length(uv - spiroPos);\n        \n        float fade = exp(-20.0 * dist) * (sin(iTime * 12.0)*.5+2.0) * smoothstep(0.0, 1.0, sin(t / 5.0 + iTime));\n        \n        vec3 lineColor = vec3(0.0, 0.6, 1.0); \n        \n        color += fade * lineColor;\n    }\n    \n    for (float t = 0.0; t < drawLimit; t += 0.08) {\n     \n        float x = (R + r) * cos(t*3.14159) - d * cos(3.14159*(R + r) / r * t);\n        float y = (R + r) * sin(t*3.14159) - d * sin(3.14159*(R + r) / r * t);\n        \n        vec2 spiroPos = rotation * vec2(x, y);\n        \n        float dist = length(uv - spiroPos);\n        \n        float fade = exp(-20.0 * dist) * (sin(iTime * 12.0)*.5+2.0) * smoothstep(0.0, 1.0, sin(t / 5.0 + iTime));\n        \n        vec3 lineColor = vec3(0.7, 0.2, 1.0); \n        \n        color += fade * lineColor;\n    }\n    \n    float radialFade = 1.0 - length(uv) * 0.5; \n    color *= radialFade;\n    \n    // Output the final color with full opacity\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}