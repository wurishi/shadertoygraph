{"ver":"0.1","info":{"id":"fd2XWz","date":"1620035746","viewed":106,"name":"SDF Rounding","username":"eliottmoret","description":"Box SDF rounding with size compensation","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sdf","rounding"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdRoundBox(in vec2 p, in vec2 b , in float r)\n{\n    vec2 d = abs(p)-(b-r); //Subtract r to compensate rounding\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0) - r; // subtract r to shift distance, for rounding\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n\n    float box = sdRoundBox(uv, vec2(.1, .1), (sin(iTime*5.)+0.5*0.5) * 0.04);\n    \n    box = smoothstep(0.0,0.004, box);\n    \n    vec3 col = vec3(box);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}