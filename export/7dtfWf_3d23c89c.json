{"ver":"0.1","info":{"id":"7dtfWf","date":"1657385681","viewed":62,"name":"test-voronoi-droplets-2","username":"elementbound","description":"voronoi","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// MIT License\n/*\nCopyright 2022 elementbound\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nNOTE: Please see the Common tab for some MIT-licensed methods I've used\nCommissioned by Nash Muhandez, check out Twitter: https://twitter.com/NashMuhandes\nFeel free to check out my musings as well: https://twitter.com/elementbound\n*/\n\n// Set whether or not to loop the animation\n// NOTE: If it's set to 0, you'll have to reset the time after DURATION seconds have passed\n#define LOOP 1\n\n// #define PIXELATE_DISTORT\n// #define PIXELATE_DROPLETS\n// #define PIXELATE_WARP\n\n// Pixel size for pixelation\nconst float PIXEL_SIZE = 4.0;\n// Droplet size relative to screen\nconst vec2 DROP_SIZE = vec2(0.0625, 0.125) * 2.0;\n// Droplet life relative to DURATION\nconst vec2 DROP_LIFE = vec2(0.125, 1.0);\n// Drop rim smoothness - the smaller the value, the sharper the drop rim\nconst float DROP_RIM = 1.0 / 512.0;\n// Drop limit multiplier - the larger the value, the sharper the cutoff\n// This is an extra multiplier applied to the drops so their effect doesn't extend over their own cell\nconst float DROP_LIMITER = 1.0;\n// Drop distortion strength - the larger the value, the more turbulent the distort on the inside of the drops\nconst float DROP_DISTORT_STRENGTH = 0.125;\n// Trail smoothness - the larger the value, the smoother the edges of drop trails\nconst float TRAIL_SMOOTH = 1.0 / 128.0;\n// Trail darkness - the larger the value, the darker the inside of the trails\nconst float TRAIL_DARKEN = 0.05;\n// Distortion frequency - smaller values make the drop paths and shapes more turbulent\nconst vec2 DISTORT_SIZE = vec2(0.125);\n// Distortion strength relative to screen - larger values give drops weirder shapes\nconst float DISTORT_STRENGTH = 0.04;\n// Blur samples - note that this is squared, i.e. 8 samples result in 64 texture samples\n// Decrease this for better performance, at the cost of worse blurs\nconst int BLUR_SAMPLES = 8;\n// Blur size relative to screen\nconst float BLUR_SIZE = 1.0 / 64.;\n// Screen warp frequency - smaller values make for more turbulent screen warp\n// NOTE: xy is relative to screen, z is relative to time\nconst vec3 WARP_FREQ = vec3(.25, .25, .5);\n// Screen warp strength - larger values make for larger distortions in warping\nconst float WARP_STRENGTH = 0.0625f;\n\n// Effect strength\n// NOTE: This is set automatically depending on LOOP\n// NOTE: To set manually, you can decrease the value from 1 to 0 as the effect fades away\nfloat FADE = 1.;\n// Effect duration in seconds\n// NOTE: This is used to calculate FADE if LOOP is 0\nconst float DURATION = 4.0;\n\nfloat ease(float t) {\n    return pow(t, 0.125);\n}\n\nfloat easeInOut(float t) {\n    return 1.0 - pow(2.0 * t - 1.0, 8.0);\n}\n\nfloat smin(float a, float b, float k) {\n    float h = a - b;\n    h = clamp((1.0 + h/k) / 2.0, 0.0, 1.0);\n    return mix(a, b, h) - k*h*(1.0-h);\n}\n\nvec2 pixelate(vec2 uv) {\n    float aspect = iResolution.x / iResolution.y;\n    vec2 l = vec2(PIXEL_SIZE * aspect, PIXEL_SIZE);\n    vec2 a = uv * iResolution.xy;\n    vec2 p = round(a / l) * l;\n    return p / iResolution.xy;\n}\n\nfloat smoothVoronoi(vec2 p, vec2 size, float smoothness) {\n    p /= size;\n    vec2 c = floor(p);\n    \n    vec2 centers[9];\n    centers[0] = c + vec2( 0.0,  0.0); centers[0] += hash22(centers[0]);\n    centers[1] = c + vec2( 0.0, +1.0); centers[1] += hash22(centers[1]);\n    centers[2] = c + vec2( 0.0, -1.0); centers[2] += hash22(centers[2]);\n    centers[3] = c + vec2(+1.0,  0.0); centers[3] += hash22(centers[3]);\n    centers[4] = c + vec2(+1.0, +1.0); centers[4] += hash22(centers[4]);\n    centers[5] = c + vec2(+1.0, -1.0); centers[5] += hash22(centers[5]);\n    centers[6] = c + vec2(-1.0,  0.0); centers[6] += hash22(centers[6]);\n    centers[7] = c + vec2(-1.0, +1.0); centers[7] += hash22(centers[7]);\n    centers[8] = c + vec2(-1.0, -1.0); centers[8] += hash22(centers[8]);\n    \n    float d = length(p - centers[0]);\n    vec2 cc = centers[0];\n    \n    for(int i = 1; i < 9; ++i) {\n        d = smin(d, length(p - centers[i]), smoothness);\n    }\n    \n    return d;\n}\n\nvoid droplets(in vec2 p, out float dropSDF, out float trailSDF, out float dropAlpha, out float trailAlpha, out vec3 dropNormal) {\n    p.y += hash11(floor(p.x / DROP_SIZE.x)) * DROP_SIZE.y;\n    \n    vec2 cellID = floor(p / DROP_SIZE);\n    vec2 cellPos = p - cellID * DROP_SIZE;\n    \n    float dropR = mix(0.25, 0.75, hash12(cellID)) * min(DROP_SIZE.x, DROP_SIZE.y) / 2.0 * pow(FADE, 0.5);\n    float dropLife = mix(DROP_LIFE.x, DROP_LIFE.y, hash12(cellID)) * DURATION;\n\n    #if LOOP\n    float t = clamp(fract(iTime / dropLife), 0.0, 1.0);\n    #else\n    float t = clamp(iTime / dropLife, 0.0, 1.0);\n    #endif\n    float st = ease(t);\n\n    vec2 dropHash = hash22(cellID);\n    vec2 dropStart = vec2(dropHash.x, mix(0.66, 1.0, dropHash.y));\n    dropStart = mix(vec2(dropR), DROP_SIZE - vec2(dropR), dropHash);\n    \n    vec2 dropEnd = vec2(dropHash.x, mix(0.0, 0.125, dropHash.y));\n    dropEnd = mix(vec2(dropR), DROP_SIZE - vec2(dropR), dropEnd);\n    \n    vec2 dropCenter = mix(dropStart, dropEnd, t);\n    \n    vec2 trail = line_segment(cellPos, dropStart, dropCenter);\n    \n    float cst = pow(trail.y, 0.25);\n    if (cellPos.y < dropCenter.y) \n       cst = 0.0;\n        \n    dropSDF = length(cellPos - dropCenter) - dropR * st;\n    trailSDF = trail.x - dropR * cst;\n    trailSDF = max(trailSDF, -dropSDF);\n    dropAlpha = easeInOut(t);\n    // trailAlpha = (1.0 - clamp(trailSDF / TRAIL_SMOOTH, 0.0,1.0)) * st;\n    trailAlpha = clamp(-trailSDF / TRAIL_SMOOTH, 0.0, 1.0) * cst * st;\n    \n    dropNormal = normalize(vec3(\n        normalize(cellPos - dropCenter),\n        abs(dropSDF) / DROP_RIM\n    ));\n    \n    // Fade normals\n    dropNormal = mix(dropNormal, vec3(0,0,1),\n        clamp(pow(length(cellPos - dropCenter) / (DROP_LIMITER * dropR), 8.0), 0.0, 1.0)\n    );\n}\n\nvec4 blur(vec2 uv, vec2 size) {\n    vec4 c = vec4(0);\n\n    for (int x = 0; x < BLUR_SAMPLES; ++x) {\n        for (int y = 0; y < BLUR_SAMPLES; ++y) {\n            vec2 o = vec2(x, y) / vec2(BLUR_SAMPLES);\n            o = 1.0 - 2.0 * o;\n            o *= size;\n            c += texture(iChannel0, uv + o);\n        }\n    }\n    \n    return c / float(BLUR_SAMPLES * BLUR_SAMPLES);\n}\n\nvec3 warp(vec3 p, vec3 size) {\n    vec3 cell = floor(p / size);\n    vec3 f = fract(p / size);\n    \n    vec3 corners[8];\n    corners[0] = hash33(cell + vec3(0., 0., 0.));\n    corners[1] = hash33(cell + vec3(1., 0., 0.));\n    corners[2] = hash33(cell + vec3(0., 1., 0.));\n    corners[3] = hash33(cell + vec3(1., 1., 0.));\n    corners[4] = hash33(cell + vec3(0., 0., 1.));\n    corners[5] = hash33(cell + vec3(1., 0., 1.));\n    corners[6] = hash33(cell + vec3(0., 1., 1.));\n    corners[7] = hash33(cell + vec3(1., 1., 1.));\n    \n    vec3 result = mix(\n        mix(\n            mix(corners[0], corners[1], f.x),\n            mix(corners[2], corners[3], f.x),\n            f.y),\n        mix(\n            mix(corners[4], corners[5], f.x),\n            mix(corners[6], corners[7], f.x),\n            f.y),\n        // (1.0 -cos(f.z * 3.14159265)) / 2.0);\n        f.z);\n        \n    result = -1.0 + 2.0 * result;\n    result = normalize(result);\n        \n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    #if !LOOP\n    FADE = 1. - clamp(iTime / DURATION, 0.0, 1.0);\n    #endif\n\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 pres = iResolution.xy / PIXEL_SIZE;\n    \n    float mind = min(iResolution.x, iResolution.y);\n    float maxd = max(iResolution.x, iResolution.y);\n    vec2 auv = fragCoord / vec2(mind);\n    auv.x -= (maxd - mind) / mind / 2.0;\n    \n    vec2 aspect = vec2(maxd / mind, 1.0);\n\n    float dropSDF, trailSDF, dropAlpha, trailAlpha;\n    vec3 dropNormal;\n    \n    #ifdef PIXELATE_DISTORT\n    vec2 distort = vec2(\n        1.0 - 2.0 * smoothVoronoi(pixelate(auv), DISTORT_SIZE, 0.25),\n        1.0 - 2.0 * smoothVoronoi(pixelate(auv) + vec2(4765,3243), DISTORT_SIZE, 0.25)\n    ) * DISTORT_STRENGTH;\n    #else\n    vec2 distort = vec2(\n        1.0 - 2.0 * smoothVoronoi(auv, DISTORT_SIZE, 0.25),\n        1.0 - 2.0 * smoothVoronoi(auv + vec2(4765,3243), DISTORT_SIZE, 0.25)\n    ) * DISTORT_STRENGTH;\n    #endif\n    \n    #ifdef PIXELATE_DROPLETS\n    droplets(pixelate(auv) + distort, dropSDF, trailSDF, dropAlpha, trailAlpha, dropNormal);\n    #else\n    droplets(auv + distort, dropSDF, trailSDF, dropAlpha, trailAlpha, dropNormal);\n    #endif\n    \n    float specular = dot(dropNormal, normalize(vec3(1.0)));\n    specular = pow(specular, 8.0);\n    \n    float warpTime = iTime * FADE * FADE;\n    #ifdef PIXELATE_WARP\n    vec3 warpDistort =\n        warp(vec3(pixelate(auv), warpTime), WARP_FREQ) * 3.0 +\n        warp(vec3(pixelate(auv) * 2.0, warpTime + 6.0), WARP_FREQ) * 2.0 +\n        warp(vec3(pixelate(auv) * 4.0, warpTime + 24.0), WARP_FREQ) * 1.0;\n    #else\n    vec3 warpDistort =\n        warp(vec3(auv, warpTime), WARP_FREQ) * 3.0 +\n        warp(vec3(auv * 2.0, warpTime + 6.0), WARP_FREQ) * 2.0 +\n        warp(vec3(auv * 4.0, warpTime + 24.0), WARP_FREQ) * 1.0;\n    #endif\n        \n    warpDistort = normalize(warpDistort) * WARP_STRENGTH * FADE;\n    \n    // Distort composite\n    fragColor = texture(iChannel0, uv + mix(dropNormal.xy * DROP_DISTORT_STRENGTH, warpDistort.xy, clamp(dropSDF * 1024., 0., 1.)));\n    float blurAlpha = trailAlpha;\n    if (blurAlpha > 0.0) {\n        fragColor = mix(fragColor, blur(uv, BLUR_SIZE * aspect) * vec4(1.0 - TRAIL_DARKEN), blurAlpha);\n    }\n    fragColor += vec4(specular);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Hash without Sine\n// MIT License...\n/* Copyright (c)2014 David Hoskins.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.*/\n\n//----------------------------------------------------------------------------------------\n//  1 out, 1 in...\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\n//----------------------------------------------------------------------------------------\n//  1 out, 2 in...\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//----------------------------------------------------------------------------------------\n//  1 out, 3 in...\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n//----------------------------------------------------------------------------------------\n// 1 out 4 in...\nfloat hash14(vec4 p4)\n{\n\tp4 = fract(p4  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.x + p4.y) * (p4.z + p4.w));\n}\n\n//----------------------------------------------------------------------------------------\n//  2 out, 1 in...\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n//----------------------------------------------------------------------------------------\n///  2 out, 2 in...\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n//----------------------------------------------------------------------------------------\n///  2 out, 3 in...\nvec2 hash23(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\n//----------------------------------------------------------------------------------------\n//  3 out, 1 in...\nvec3 hash31(float p)\n{\n   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n   p3 += dot(p3, p3.yzx+33.33);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n\n\n//----------------------------------------------------------------------------------------\n///  3 out, 2 in...\nvec3 hash32(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\n//----------------------------------------------------------------------------------------\n///  3 out, 3 in...\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 1 in...\nvec4 hash41(float p)\n{\n\tvec4 p4 = fract(vec4(p) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n    \n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 2 in...\nvec4 hash42(vec2 p)\n{\n\tvec4 p4 = fract(vec4(p.xyxy) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n\n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 3 in...\nvec4 hash43(vec3 p)\n{\n\tvec4 p4 = fract(vec4(p.xyzx)  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 4 in...\nvec4 hash44(vec4 p4)\n{\n\tp4 = fract(p4  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\n// The MIT License\n// Copyright © 2020 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Signed distance and line segment\n\n// Segment:              https://www.shadertoy.com/view/3tdSDj\n// and many more here:   https://iquilezles.org/articles/distfunctions2d\n\n// NOTE: Original code was modified to return both distance FROM segment and ALONG segment\n\nvec2 line_segment(in vec2 p, in vec2 a, in vec2 b) {\n\tvec2 ba = b - a;\n\tvec2 pa = p - a;\n\tfloat h = clamp(dot(pa, ba) / dot(ba, ba), 0., 1.);\n\treturn vec2(length(pa - h * ba), h);\n}","name":"Common","description":"","type":"common"}]}