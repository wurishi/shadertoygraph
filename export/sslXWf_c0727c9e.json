{"ver":"0.1","info":{"id":"sslXWf","date":"1619401530","viewed":113,"name":"RayTracer CG-2","username":"MorALeo","description":"Выполнена база: куб(вариант 1), внутри вода(вариант 6) + антиалиасинг, окружение в виде текстурированного куб-мапа, motion blur.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["raytracing","cube","water"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame+1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst vec3 CAMERA_POS = vec3(-2.2, 2.0, -9);\nconst vec3 LIGHT1_POS = vec3(-3, 1, 3);\nconst float LIGHT1_RADIUS = 0.5;\nconst vec3 LIGHT1_COLOR = vec3(1,1,0);\nvec3 LIGHT2_POS = vec3(1, 0.8, -2);\nconst float LIGHT2_RADIUS = 0.25;\nconst vec3 LIGHT2_COLOR = vec3(1,1,1);\nconst vec3 CUBE_POS = vec3(0, 0.25, 0);\nconst float MARCH_SIZE = 0.01;\nconst float NOIZE_AMPLITUDE = 0.2;\n\nstruct Cube {\n    vec3 p[3];\n};\n\nstruct Square {\n    vec3 v[4];\n};\n\nCube cube = Cube(vec3[3](\n    vec3(-1.0, -1.0, -1.0), \n    vec3(1.0, -1.0, -1.0), \n    vec3(-1.0, -1.0, 1.0)\n));\n\n// t - расстояние от положения камеры до плоскости y = -1\n// (CAMERA_POS + t * viewVec).y == -1\n// t = (-1 - CAMERA_POS.y) / viewVec.y\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal)\n{\n    float t = (-1.0 - pos.y) / dir.y;\n    normal = vec3(0, 1, 0);\n    if (t <= 0.0) return INF;\n    vec3 worldPos = t * dir + pos;\n    //if (worldPos.z - 0.5 * worldPos.x>=10.0) return INF;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) return INF;\n    else return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal)\n{\n    // dot(pos + t * dir, pos + t * dir) == r * r\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r\n    // t * t + 2 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float b = dot(pos, dir);\n    float D = b * b - dot(pos, pos) + r * r;\n    if (D < 0.0) return INF;\n    float t = -b - sqrt(D);\n    if (t > 0.0)\n    {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) return INF;\n    else\n    {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n}\n\nfloat trace_side(vec3 pos, vec3 dir, vec3 v0, vec3 v1, vec3 v2, out vec3 normal) \n{\n    normal = normalize(cross(v2 - v0, v1 - v0));\n    float d = dot(normal, dir);\n    if (abs(d) <  0.0001f)\n    {\n        return INF;\n    }\n    float t = dot(v0 - pos, normal) / d;\n    if (t < 0.0) return INF;\n    else return t;\n}\n\n#define orient(a, b, c, normal) dot(cross(b - a, c - a), normal)\n\nfloat tracesquare(vec3 pos, vec3 dir, Square s, out vec3 normal)\n{\n    float t = trace_side(pos, dir, s.v[0], s.v[1], s.v[3], normal);\n    if (t == INF)\n    {\n        return INF;\n    }\n    vec3 q = pos + dir * t;\n    float o1 = orient(q, s.v[0], s.v[1], normal);\n    float o2 = orient(q, s.v[1], s.v[2], normal);\n    float o3 = orient(q, s.v[2], s.v[3], normal);\n    float o4 = orient(q, s.v[3], s.v[0], normal);\n    if ((o1 * o2 > 0.0) && (o2 * o3 > 0.0) && (o3 * o4 > 0.0))\n    {\n        return t;\n    }\n    else return INF;\n}\n\nfloat traceCube(vec3 pos, vec3 dir, Cube cube, out vec3 normal) \n{\n    vec3 v0 = cube.p[0];\n    vec3 v1 = cube.p[1];\n    vec3 v2 = cube.p[2];\n    vec3 a = v2 - v0;\n    vec3 b = v1 - v0;\n    vec3 c = normalize(cross(a, b)) * length(a);\n    vec3 v3 = v2 + b;\n    vec3 v4 = v0 + c;\n    vec3 v5 = v4 + b;\n    vec3 v6 = v4 + a;\n    vec3 v7 = v6 + b;\n    Square s1 = Square(vec3[4](v0, v1, v3, v2));\n    Square s2 = Square(vec3[4](v0, v4, v6, v2));\n    Square s3 = Square(vec3[4](v3, v6, v7, v3));\n    Square s4 = Square(vec3[4](v3, v7, v5, v1));\n    Square s5 = Square(vec3[4](v1, v5, v4, v0));\n    Square s6 = Square(vec3[4](v4, v5, v7, v6));\n    Square s[6] = Square[6](s1, s2, s3, s4, s5, s6);\n    float t = INF;\n    vec3 tmpnormal;\n    for (int i = 0; i < s.length(); i++)\n    {\n        float tt = tracesquare(pos, dir, s[i], tmpnormal);\n        if ( tt < t)\n        {\n            t = tt;\n            normal = tmpnormal;\n        }\n    }\n    return t;\n}\n\nfloat traceStand(vec3 pos, vec3 dir, float r, out vec3 normal)\n{\n    float tableT = (-0.75 - pos.y) / dir.y;\n    if (tableT < 0.0)\n    {\n        return INF;\n    }\n    vec3 finalPos = pos + dir * tableT;\n    if (dot(finalPos.xz, finalPos.xz) < r * r)\n    {\n        normal = vec3(0, 1, 0);\n        return tableT;\n    }\n    float b = dot(pos.xz, dir.xz);\n    float a = dot(dir.xz, dir.xz);\n    float D = b * b - (dot(pos.xz, pos.xz) - r * r) * a;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = (-b  - sqrt(D)) / a;\n    if (pos.y + t * dir.y < -0.75)\n    {\n        vec3 worldPos = pos + t * dir;\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal)\n{\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = 20.0f / distSq1;\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = 10.0f / distSq2;\n    return color * (max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR + texture(iChannel1, normal).rgb * 0.1);\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2)\n{\n    if (dot(v, normal) < 0.0) normal = -normal;\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA * n2 / n1;\n    if(sinB > 1.0) { \n        return reflect(v, normal); \n    }\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nfloat pow2(float x)\n{\n    return x * x;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\nfloat fogSdf(vec3 pos) {\n    return length(pos) - 1.0;\n}\n\nfloat beerLambert(float absorpCoef, float travDist) {\n    return exp(-absorpCoef * travDist);\n}\n\nvec4 sampleFog(vec3 pos, vec3 dir)\n{\n    float t = fogSdf(pos);\n    float opacity = 1.0;\n    float absorption = 7.0;\n    float totalAbs = 0.0;\n    for (int i = 0; i < 50; ++i) \n    {\n        vec3 curPos = pos + (float(i) * MARCH_SIZE + t) * dir;\n        float sdf = fogSdf(curPos);\n        if (sdf < 0.0) \n        {\n            float prevOpacity = opacity;\n            opacity *= beerLambert(absorption * (texture(iChannel3, curPos * 0.2).x + texture(iChannel3, curPos * 0.4).x\n                                               + texture(iChannel3, curPos * 0.8).x + texture(iChannel3, curPos * 1.6).x) * 0.25 * abs(sdf), MARCH_SIZE);\n            float absorptionLastStep = prevOpacity - opacity;\n            totalAbs += absorptionLastStep;\n        }\n    }\n    return vec4(vec3(0, 3, 4) * totalAbs, 1.0 - opacity);\n}\n\nfloat waterSdf(vec3 pos) \n{\n    float displacement = (sin(27.0 * pos.x) * sin(27.0 * pos.y) * sin(27.0 * pos.z) + 0.5) * NOIZE_AMPLITUDE;\n    return length(pos) - (0.15 + displacement);\n}\n\nvec3 waterSdfNormal(vec3 pos) \n{\n    const float e = 0.01;\n    return normalize(vec3(waterSdf(vec3(pos.x + e, pos.y, pos.z)) - waterSdf(vec3(pos.x - e, pos.y, pos.z)),\n                          waterSdf(vec3(pos.x, pos.y + e, pos.z)) - waterSdf(vec3(pos.x, pos.y - e, pos.z)),\n                          waterSdf(vec3(pos.x, pos.y, pos.z  + e)) - waterSdf(vec3(pos.x, pos.y, pos.z - e))));\n}\n\nfloat traceWater(vec3 pos, vec3 dir, out vec3 normal, int tmp)\n{\n    float t = waterSdf(pos);\n    if (tmp == 0)\n    {\n      for (int i = 0; i < 150; i++) \n      {\n            vec3 curPos = pos + (float(i) * MARCH_SIZE + t) * dir;\n            float sdf = waterSdf(curPos);\n            if (sdf < 0.0) \n            {\n                normal = waterSdfNormal(curPos);\n                return float(i) * MARCH_SIZE + t;\n            }\n      }  \n    } \n    else \n    {\n        for (int i = 0; i < 150; i++)\n        {\n            vec3 curPos = pos + (float(i) * MARCH_SIZE) * dir;\n            float sdf = waterSdf(curPos);\n            if (sdf > 0.0) \n            {\n                normal = waterSdfNormal(curPos);\n                return float(i) * MARCH_SIZE;\n            }\n        }\n    }\n    return INF;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    //перенесем центр координат в центр экрана, обе оси от -0,5 до 0,5\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5) * 2.0) / iResolution.x;\n    \n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    LIGHT2_POS = LIGHT2_POS + vec3(0, 1, 0) * randVals.x * 0.1;\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    \n    const float AIR_N = 1.0;\n    const float GLASS_N = 1.5;\n    float n1 = AIR_N;\n    float n2 = GLASS_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    const float WATER_N = 1.33;\n    float WATER_R = pow2(GLASS_N - WATER_N) / pow2(GLASS_N + WATER_N);\n    \n    for (int i = 0; i < 10; i++)\n    {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        vec3 planeNorm;\n        bool is_water = false;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t)\n        {\n            is_water = false;\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + CAMERA_POS;\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb;\n            normal = planeNorm;\n        }\n        vec3 standNorm;\n        float standT = traceStand(curPos, curDir, 3.0, standNorm);\n        if (standT < t)\n        {\n            is_water = false;\n            t = standT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + CAMERA_POS;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = standNorm;\n        }\n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t)\n        {\n            is_water = false;\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t)\n        {\n            is_water = false;\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n        vec3 waterNorm;\n        float waterT = traceWater(curPos, normalize(curDir + randVals * 0.02), waterNorm, 0);\n        if (waterT < t) \n        {\n            t = waterT;\n            normal = waterNorm;\n            is_water = true;\n            float randomValue = randVals.x;\n            \n            vec3 newNormal = normal;\n            if (dot(normalize(curDir + randVals * 0.02), newNormal) < 0.0) \n            {\n                newNormal = -newNormal;\n            }\n            if (randomValue < WATER_R)\n            {\n                materialType = REFLECTION;\n                is_water = false;\n            } \n            else \n            {\n                materialType = REFRACTION;\n                n2 = WATER_N;\n            }\n        }\n        vec3 cubeNorm;\n        float cubeT = traceCube(curPos - CUBE_POS, curDir, cube, cubeNorm);\n        if (cubeT < t)\n        {\n            is_water = false;\n            t = cubeT;\n            normal = cubeNorm;\n            if (randVals.x < GLASS_R)\n            {\n                materialType = REFLECTION;\n            }\n            else\n            {\n                materialType = REFRACTION;\n            }\n        }\n        if (t != INF)\n        {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION)\n            { \n                fragColor.rgb = color;\n                break;\n            }\n            else if (materialType == DIFFUSE)\n            {\n                fragColor.rgb = computeLight(worldPos, color, normal);\n                break;\n            }\n            else if (materialType == REFLECTION)\n            {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            }\n            else if (materialType == REFRACTION)\n            {\n                if (!is_water) \n                {\n                   curDir = refraction(normalize(curDir), normalize(normal), n1, n2);\n                } \n                else \n                {\n                    curDir = refraction(normalize(curDir + randVals * 0.02), normalize(normal), n1, n2);\n                }\n                curPos = worldPos + curDir * 1e-5;\n                float tmp = n1;\n                n1 = n2;\n                if (is_water) \n                {\n                    n2 = GLASS_N;\n                    float waterOut;\n                    vec3 waterNormal;\n                    waterOut = traceWater(curPos, curDir, waterNormal, 1);\n                    curPos = curPos + (waterOut + 1e-5) * curDir;\n                    vec3 newNormal = waterNormal;\n                    if (dot(curDir, newNormal) < 0.0) \n                    {\n                        newNormal = -newNormal;\n                    }\n                    if (randVals.y < WATER_R) \n                    {\n                        curDir = reflect(curDir, waterNormal);\n                    } \n                    else \n                    {\n                        curDir = refraction(curDir, waterNormal, n1, n2);\n                    }\n                    n1 = n2;\n                }\n                else n2 = tmp;\n            }\n        }\n        else fragColor = texture(iChannel1, curDir);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv)+texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}