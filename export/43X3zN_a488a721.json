{"ver":"0.1","info":{"id":"43X3zN","date":"1707187067","viewed":62,"name":"Integer Color Swatch","username":"berelium","description":"All the integer colors... ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["simple","color","rgb","normal","all","colortheory"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R 0.25\n#define bias 10. / iResolution.x\n//#define sRGB\n\n// Distance field of a circle @iquilez\nfloat sdCircle( in vec2 uv, in vec2 p, in float r) {\n    return length(uv - p) - r;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Map coordinates to [-1, 1]\n    vec2 uv = (2. * fragCoord.xy - iResolution.xy) / iResolution.y;\n\n    // Setup distance fields\n    float d1 = sdCircle(uv, vec2(0, R), R);\n    float d2 = sdCircle(uv, vec2(-R, -R), R);\n    float d3 = sdCircle(uv, vec2(R, -R), R);\n    \n    // Apply coloring\n    vec3 col = vec3(0);\n    col += smoothstep(R, R - bias, d1) * vec3(1,0,0);\n    col += smoothstep(R, R - bias, d2) * vec3(0,1,0);\n    col += smoothstep(R, R - bias, d3) * vec3(0,0,1);\n\n    \n#ifdef sRGB\n    col = pow(col, vec3(1.0/2.2));\n#endif\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}