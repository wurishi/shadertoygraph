{"ver":"0.1","info":{"id":"dt3fzn","date":"1700860173","viewed":124,"name":"Stripey Torus rainbow MK II","username":"tekano","description":"unbelievably efficient  optimised version from genius FabriceNeyret2  my mind is blown on how deep thier understanding of shader writing and efficiency is.  https://www.shadertoy.com/view/DlcfRr  for original version and comments \n","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","golfcode","optimised"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// code optimized and golf gamed reduced by the fabulous @FabriceNeyret2 https://www.shadertoy.com/user/FabriceNeyret2\n// original version and comment additions can be found here https://www.shadertoy.com/view/DlcfRr\n\n\nvoid mainImage(out vec4 O, vec2 u) {\n    vec3 R = iResolution,\n         P = vec3(0, 0, -4),\n         D = normalize(vec3( vec2(.8,1)*(u+u-R.xy)/R.x , .5 ) );\n         \n    float d = 1., a, i;\n    for ( ; i++ < 64. && abs(d)>.01; P += d * D )\n        d = 3. - length( vec2( length(P.xz)-4., P.y) );\n    \n    a =  atan(P.z, P.x)\n       + atan(P.y, length(P.xz) - 4.)\n       + iTime;\n    d = sin(16.*a);\n    O = smoothstep(-1.,1.,d/fwidth(d))\n      * (  .5 + .5 * cos( a - vec4(0,21,23,0) )  );\n}","name":"Image","description":"","type":"image"}]}