{"ver":"0.1","info":{"id":"mtscW7","date":"1690849669","viewed":136,"name":"Field flow 2","username":"ChunderFPV","description":"Another one just for fun.","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["grid","flow","field","transform","magnetic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define A(a) mat2(cos((a)+vec4(0,11,33,0)))  // rotate\n#define H(a) (cos(vec3(0,1,2)+(a)*6.3)*.5+.5)  // hue\n#define P(v) max(c, R.y/700./length((u.xy-p)/fwidth(u.xy))*v)  // points\n\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    float s = 3., // scale\n          l = 20., // overlap loop (detail)\n          t = iTime/60., // sec per int\n          a = sin(6.3*t*2.), // oscillate with time\n          r = a*.5+.5,\n          i = 0.,\n          f;\n    vec2 R = iResolution.xy,\n         m = (iMouse.xy-.5*R)/R.y*4.,\n         p;\n    vec3 u = normalize(vec3((U-.5*R)/R.y, 1)),\n         c = vec3(0),\n         k;\n    \n    if (iMouse.z > 0.)  // on click\n        u.yz *= A(m.y), // pitch\n        u.xz *= A(m.x); // yaw\n    \n    u.xy *= A(t*3.14); // rotate with time\n    u *= (s+a)*1.5; // oscillate scale\n    u.xy = (u.xy*u.xy+u.yx*u.yx-a)/u.yx; // transform\n    u.zx = u.zx*r+(u.zx*u.yz)*(1.-r);    // trans2\n    k = H(min(abs(u.x), 1./abs(u.x))+t)*.4+.3; // color gradient\n    \n    // points\n    for (; i++<l;) // cell overlap loop\n        p.x = round((u.x-i)/l)*l+i,\n        f = sin(6.3*p.x*t),\n        p.y = round(u.y-f)+f,\n        c = P(k*.8),\n        p.y = f,\n        c = P(k.brg*2.);\n    \n    c += k*(abs(u.x/u.y)/250.); // lighten horizon\n    \n    // subtle gradient\n    c += (sin(u.x*6.3)*.5+.5) // gradient\n       * min(1., 10./abs(u.x)) // darken horizon\n       * (1.-r) // oscillate brightness\n       * k*.1; // color\n    \n    // light bars (denominator of t + multiples)\n    c += pow(1.-abs(sin(u.x*3.14)), 2.) // grid\n       * max(0., 1.-abs(sin(3.14*round(u.x)*t))*s) // darken non-frac\n       * min(1., 10./abs(u.x)) // darken horizon\n       * r // oscillate brightness\n       * k.gbr; // color\n    \n    C = vec4(c+c*c, 1);\n}","name":"Image","description":"","type":"image"}]}