{"ver":"0.1","info":{"id":"NtXSDj","date":"1626528154","viewed":197,"name":"Gumowski-Mira Attractor","username":"Kamoshika","description":"reference (Japanese article):\nhttps://ja.wikipedia.org/wiki/%E3%82%B0%E3%83%A2%E3%82%A6%E3%82%B9%E3%82%AD%E3%83%BC%E3%83%BB%E3%83%9F%E3%83%A9%E3%81%AE%E5%86%99%E5%83%8F","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["attractor"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Click mouse to clear the screen.\n// Parameters change depending on mouse coordinates.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define X (fragColor.x)\n#define Y (fragColor.y)\n#define Z (fragColor.z)\n\nfloat fsnoise(vec2 c) {\n    return fract(sin(dot(c, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    \n    float a = 0.009 + mouse.y * 0.001;\n    float s = 0.05;\n    float m = -0.801 + mouse.x * 1.5;\n    \n    ivec2 co = ivec2(fragCoord);\n    fragColor = texelFetch(iChannel0, co, 0);\n    \n    // Stores the time since the last mouse click\n    if(iMouse.z > 0.0) {\n        Z = 0.0;\n    } else {\n        Z += 0.016667;\n    }\n    \n    if(iFrame == 0 || iMouse.z > 0.0) {\n        // Initialize the coordinates\n        float n = fsnoise(fragCoord);\n        float theta = n * 5e2;\n        float r = n * 3.0 + 1.0;\n        X = cos(theta) * r;\n        Y = sin(theta) * r;\n    } else {\n        // Calculate the coordinates from the previous coordinates\n        float tmp = Y + a * Y * (1. - s * Y * Y) + m * X + 2. * (1. - m) * X * X / (1. + X * X);\n        Y = -X + m * tmp + 2. * (1. - m) * tmp * tmp / (1. + tmp * tmp);\n        X = tmp;\n    } \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define POINT_SIZE 0.03\n#define CONVERGENCE_TIME 0.16667\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    uv *= 12.0;\n    uv -= vec2(-2.0, 1.0);\n    \n    vec3 color = vec3(0);\n    \n    // Get the coordinates of the points and draw them\n    for(int i=0; i<30; i++) {\n        for(int j=0; j<30; j++) {\n            vec2 pos = texelFetch(iChannel0, ivec2(i, j), 0).xy;\n            color += smoothstep(POINT_SIZE, 0.0, distance(uv, pos));\n        }\n    }\n    \n    float dTime = texelFetch(iChannel0, ivec2(0, 0), 0).z;\n    if(iMouse.z > 0.0) {\n        // Clear the screen\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    } else if(dTime > CONVERGENCE_TIME) {\n        // When enough time has passed and the points are close to the attractor, draw the points\n        fragColor = vec4(color, 1.0) + texture(iChannel1, fragCoord/iResolution.xy);\n    }\n}","name":"Buffer B","description":"","type":"buffer"}]}