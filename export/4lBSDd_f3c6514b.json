{"ver":"0.1","info":{"id":"4lBSDd","date":"1447222903","viewed":136,"name":"Infinigrid Take One","username":"jakedowns","description":"Followed a few tuts. Scrounged around in some source code.\nTrying to take an idea to proof without reference.\nNot quite what I was going for. But I'm learning...\nPractice makes.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","grid","beginner"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"vec2 o2d(vec2 min, vec2 max, float cycle, vec3 iR)\n{\n    float x = 0.;\n    \n    // True oscillator (cos) (linear)\n    float m = (max.x * iR.x)* max.x;\n    x = (cos(cycle * iTime) * m) + m;\n    \n    float y = 0.;\n    \n\treturn vec2(x,y);\n}\n\nvec2 o2dT(vec2 min, vec2 max, float cycle, vec3 iR)\n{\n    float x = 0.;\n    \n    // Tangent oscillator (ease-in)\n    x = (tan((cycle*0.3) * iTime) * (max.x*iR.x));\n    x = x + (iR.x * max.x);\n    if(x < iR.x * min.x){\n        x = iR.x * min.x;\n    }\n    \n    float y = 0.;\n    \n    y = (tan((cycle*0.3) * iTime) * (max.y*iR.y));\n    y = y + (iR.y * max.y);\n    if(y < iR.y * min.y){\n        y = iR.y * min.y;\n    }\n    \n\treturn vec2(x,y);\n}\n\nbool lineCheck( float bound, float bound2, float lineW )\n{   \n    return (bound > (bound2-(lineW*0.75)) && bound < (bound2+(lineW*0.75))) ? true : false;\n}\n\nvoid mainImage( out vec4 p, in vec2 fC )\n{\n    vec3 iR = iResolution;\n\tvec2 uv = fC.xy / iR.xy;\n    vec4 bg = vec4(vec3(0.), 1.);\n\n\tp = bg;\n    \n    vec2 midXY = .5 * iR.xy;\n    float lW = 1.; // 1px line width\n    \n    vec2 o2dY1 = o2d(vec2(.5,.0), vec2(.5,.0), 2., iR);\n    vec2 o2dY2 = o2d(vec2(.5,.0), vec2(.4,.0), 2., iR);\n    vec2 o2dY3 = o2d(vec2(.5,.0), vec2(.3,.0), 2., iR);\n    vec2 o2dY4 = o2d(vec2(.5,.0), vec2(.2,.0), 2., iR);\n    vec2 o2dY5 = o2d(vec2(.5,.0), vec2(.1,.0), 2., iR);\n    \n    vec2 o2dY6  = o2dT(vec2(.5,.0), vec2(.5,.0), 2., iR);\n    vec2 o2dY7  = o2dT(vec2(.5,.0), vec2(.4,.0), 2., iR);\n    vec2 o2dY8  = o2dT(vec2(.5,.0), vec2(.3,.0), 2., iR);\n    vec2 o2dY9  = o2dT(vec2(.5,.0), vec2(.2,.0), 2., iR);\n    vec2 o2dY10 = o2dT(vec2(.5,.0), vec2(.1,.0), 2., iR);\n    \n    vec2 o2dX1  = o2dT(vec2(.0,-5.0), vec2(.0,.0), 2., iR);\n    vec2 o2dX2  = o2dT(vec2(.0,-4.0), vec2(.0,.1), 2., iR);\n    vec2 o2dX3  = o2dT(vec2(.0,-3.0), vec2(.0,.2), 2., iR);\n    vec2 o2dX4  = o2dT(vec2(.0,-2.0), vec2(.0,.3), 2., iR);\n    vec2 o2dX5  = o2dT(vec2(.0,-1.0), vec2(.0,.4), 2., iR);\n    \n    vec2 o2dX6  = o2dT(vec2(.0,-5.0), vec2(.0,.5), 2., iR);\n    vec2 o2dX7  = o2dT(vec2(.0,-4.0), vec2(.0,.6), 2., iR);\n    vec2 o2dX8  = o2dT(vec2(.0,-3.0), vec2(.0,.7), 2., iR);\n    vec2 o2dX9  = o2dT(vec2(.0,-2.0), vec2(.0,.8), 2., iR);\n    vec2 o2dX10 = o2dT(vec2(.0,-1.0), vec2(.0,.9), 2., iR);\n    \n\tvec2 o2dX11 = o2dT(vec2(.0,-5.0), vec2(.0,1), 2., iR);\n    vec2 o2dX12 = o2dT(vec2(.0,-4.0), vec2(.0,1.1), 2., iR);\n    vec2 o2dX13 = o2dT(vec2(.0,-3.0), vec2(.0,1.2), 2., iR);\n    vec2 o2dX14 = o2dT(vec2(.0,-2.0), vec2(.0,1.3), 2., iR);\n    vec2 o2dX15 = o2dT(vec2(.0,-1.0), vec2(.0,1.4), 2., iR);\n\n    \n    if(\n        lineCheck(fC.x, midXY.x, lW)\n     || lineCheck(fC.y, midXY.y, lW)\n     || lineCheck(fC.x, o2dY1.x, lW)\n     || lineCheck(fC.x, o2dY2.x, lW)\n     || lineCheck(fC.x, o2dY3.x, lW)\n     || lineCheck(fC.x, o2dY4.x, lW)\n     || lineCheck(fC.x, o2dY5.x, lW)\n        \n     || lineCheck(fC.x, o2dY6.x,  lW)\n     || lineCheck(fC.x, o2dY7.x,  lW)\n     || lineCheck(fC.x, o2dY8.x,  lW)\n     || lineCheck(fC.x, o2dY9.x,  lW)\n     || lineCheck(fC.x, o2dY10.x, lW)\n        \n     || lineCheck(fC.y, o2dX1.y, lW)\n     || lineCheck(fC.y, o2dX2.y, lW)\n     || lineCheck(fC.y, o2dX3.y, lW)\n     || lineCheck(fC.y, o2dX4.y, lW)\n     || lineCheck(fC.y, o2dX5.y, lW)\n\n     || lineCheck(fC.y, o2dX6.y,  lW)\n     || lineCheck(fC.y, o2dX7.y,  lW)\n     || lineCheck(fC.y, o2dX8.y,  lW)\n     || lineCheck(fC.y, o2dX9.y,  lW)\n     || lineCheck(fC.y, o2dX10.y, lW)\n        \n     || lineCheck(fC.y, o2dX11.y,  lW)\n     || lineCheck(fC.y, o2dX12.y,  lW)\n     || lineCheck(fC.y, o2dX13.y,  lW)\n     || lineCheck(fC.y, o2dX14.y,  lW)\n     || lineCheck(fC.y, o2dX15.y,  lW)\n    ){\n        float r = sin((uv.x + uv.y) + iTime);\n        float g = tan((uv.x + uv.y) + iTime);\n        float b = cos((uv.x + uv.y) + iTime);\n    \tp = vec4(vec3(r, g, b), 1.);\n    }\n}","name":"","description":"","type":"image"}]}