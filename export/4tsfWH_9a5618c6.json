{"ver":"0.1","info":{"id":"4tsfWH","date":"1511793500","viewed":267,"name":"Gamma-adjusted color-blending","username":"jt","description":"Comparing sRGB (top),\ngamma-adjusted blending (center lines: gamma 2.4, 2.2, 2.0)\nwith simple linear interpolation (bottom line).\nSimplified explanation:Minute-Physics video \"Computer color is broken\" [url]https://www.youtube.com/watch?v=LKnqECcg6Gw[/url]","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["color","blending","gamma","adjusted"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 sRGBtoLinear(vec3 c)\n{\n    float a = 0.055;\n    return mix(c / 12.92, pow((c + a) / (1.0 + a), vec3(2.4)), step(0.04045, c));\n}\n\nvec3 linearTosRGB(vec3 c)\n{\n    float a = 0.055;\n    return mix(12.92 * c, (1.0 + a) * pow(c, vec3(1.0 / 2.4)) - a, step(0.00313008, c));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 a = vec3(1.0,0.0, (0.5 + 0.5 * sin(iTime)) * uv.y);\n    vec3 b = vec3(0.0,1.0, (0.5 + 0.5 * sin(iTime)) * uv.y);\n    float s = smoothstep(0.4,0.6,uv.x);\n    // Blending with sRGB gamma adjustment (https://en.wikipedia.org/wiki/SRGB)\n    vec3 CsRGB = linearTosRGB(s * sRGBtoLinear(a) + (1.0 - s) * sRGBtoLinear(b));\n    // Blending with simplified gamma adjustment\n    vec3 C22 = sqrt(s * pow(a, vec3(2.2)) + (1.0 - s) * pow(b, vec3(2.2)));\n    vec3 C20 = sqrt(s * pow(a, vec3(2.0)) + (1.0 - s) * pow(b, vec3(2.0)));\n    // Blending without gamma adjustment\n    vec3 c = s * a + (1.0 - s) * b;\n    fragColor.a = 1.0;\n\tfragColor.rgb = mix(mix(c, C20, step(0.25, uv.y)), mix(C22, CsRGB, step(0.75, uv.y)), step(0.5, uv.y));\n}\n","name":"Image","description":"","type":"image"}]}