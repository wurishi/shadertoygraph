{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"channel":1,"type":"texture","id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"const float grad_step = 0.1;\nconst vec3 dx = vec3( grad_step, 0.0, 0.0 );\nconst vec3 dy = vec3( 0.0, grad_step, 0.0 );\nconst vec3 dz = vec3( 0.0, 0.0, grad_step );\nconst vec3 posTor = vec3(-0.5,0,1);\nconst vec3 posSph = vec3(0.85,0.25,-1.5);\nconst vec3 posBox = vec3(0,-0.75,0);\nconst vec2 dimTorus = vec2(0.5, 0.15);\nconst vec3 dimBox = vec3(2, 0.1, 3);\nconst float dimSphere = 0.5;\nconst int maxSteps = 64;\nvec3 lightPos0;\n\nfloat sdTorus( vec3 p, vec2 t ) {\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat sdSphere( vec3 p, float s ) {\n  return length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b ) {\n    vec3 d = abs(p)-b;\n    return min(max(d.x,max(d.y,d.z)),0.0)+length(max(d,0.0));\n}\n\nvec3 gradientTorus(vec3 pos) {\n\treturn normalize (\n\t\tvec3(\n\t\t\tsdTorus( pos + dx, dimTorus ) - sdTorus( pos - dx, dimTorus ),\n\t\t\tsdTorus( pos + dy, dimTorus ) - sdTorus( pos - dy, dimTorus ),\n\t\t\tsdTorus( pos + dz, dimTorus ) - sdTorus( pos - dz, dimTorus )\t\t\t\n\t\t)\n\t);\n}\n\nvec3 gradientBox(vec3 pos) {\n\treturn normalize (\n\t\tvec3(\n\t\t\tsdBox( pos + dx, dimBox ) - sdBox( pos - dx, dimBox ),\n\t\t\tsdBox( pos + dy, dimBox ) - sdBox( pos - dy, dimBox ),\n\t\t\tsdBox( pos + dz, dimBox ) - sdBox( pos - dz, dimBox )\t\t\t\n\t\t)\n\t);\n}\n\nvec3 gradientSphere(vec3 pos) {\n\treturn normalize (\n\t\tvec3(\n\t\t\tsdSphere( pos + dx, dimSphere ) - sdSphere( pos - dx, dimSphere ),\n\t\t\tsdSphere( pos + dy, dimSphere ) - sdSphere( pos - dy, dimSphere ),\n\t\t\tsdSphere( pos + dz, dimSphere ) - sdSphere( pos - dz, dimSphere )\t\t\t\n\t\t)\n\t);\n}\n\nvec3 shading( vec3 v, vec3 n, vec3 eye ) {\n\tfloat shininess = 16.0;\n\tfloat ambient = 0.3;\n\t\n\tvec3 final = vec3( 0.0 );\n\t\n\tvec3 ev = normalize( v - eye );\n\tvec3 ref_ev = reflect( ev, n );\n\t\n\t{\n\t\tvec3 light_color = vec3( 1, 1, 1.0 );\n\t\n\t\tvec3 vl = normalize( lightPos0 - v );\n\t\n\t\tfloat diffuse  = max( 0.0, dot( vl, n ) );\n\t\tfloat specular = max( 0.0, dot( vl, ref_ev ) );\n\t\tspecular = pow( specular, shininess );\n\t\t\n\t\tfinal += ambient + light_color * diffuse + specular ; \n\t}\n\n\treturn final;\n}\n\nfloat softshadow( vec3 ro, vec3 rd, float k, vec3 hack) {\n    float res = 1.0;\n\tfloat t = 0.0;\n    for(int i = 0; i < maxSteps; ++i) {\t\n\t\tvec3 p = ro + rd * t;\n\t\tfloat dTor = sdTorus(p - posTor, dimTorus) + hack.x;\n\t\tfloat dSph = sdSphere(p - posSph, dimSphere) + hack.y;\n\t\tfloat dBox = sdBox(p - posBox, dimBox) + hack.z;\n\t\tfloat d = min(min(dTor, dSph),dBox);\n\t\tif( d<0.0001 ) {\n            return 0.0;\n\t\t}\n        res = min( res, k*d/t );\n        t += d;\n    }\n    return res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    lightPos0 = vec3( sin(iTime*2.0)*5.0, 10.0, cos(iTime*2.0)*5.0 );\n    \n\tvec3 eye = vec3(0.0 + (iMouse.x-iResolution.x/2.0)/100.0 , 1.0 + (iMouse.y-iResolution.y/2.0)/100.0, -10);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = vec3(1, 0, 0);\n\tvec3 plane = vec3(0, 0, -3);\n\n    float u = fragCoord.x * 2.0 / iResolution.y - 1.75;\n    float v = fragCoord.y * 2.0 / iResolution.y - 1.0;\n\tvec3 ro = plane + right * u + up * v;\n\tvec3 rd = normalize(ro-eye);\n\n    vec4 color = vec4(0.2); // Background\n\n\tfloat t = 0.0;\n    for(int i = 0; i < maxSteps; ++i) {\n\t\tvec3 p = ro + rd * t;\n\t\tfloat dTor = sdTorus(p - posTor, dimTorus);\n\t\tfloat dSph = sdSphere(p - posSph, dimSphere);\n\t\tfloat dBox = sdBox(p - posBox, dimBox);\n\t\tfloat d = min(min(dTor, dSph),dBox);\n        if(d < 0.01) {\n\t\t\tif(d==dTor) {\n\t\t\t\tvec3 n = gradientTorus(p - posTor);\n\t\t\t\tcolor=vec4(shading(p, n, eye), 1.0)*(texture(iChannel0,  vec2(atan(n.z,n.x)/6.28, atan(length(n)-dimTorus.x,n.y)/6.28))) * softshadow(p, normalize(lightPos0-p), 8.0, vec3(100,0,0));\n\t\t\t}else if(d==dSph) {\n\t\t\t\tvec3 n = gradientSphere(p - posSph);\n\t\t\t\tcolor=vec4(shading(p, n, eye), 1.0)*(texture(iChannel1,  vec2(atan(n.z,n.x)/6.28, acos(n.y/length(n))/3.14))) * softshadow(p, normalize(lightPos0-p), 8.0, vec3(0,100,0));\n\t\t\t} else {\n\t\t\t\tvec3 n = gradientBox(p - posBox);\n\t\t\t\tcolor=vec4(shading(p, n, eye), 1.0)* vec4(0.5, 0.6, 0.6, 1.0) * softshadow(p, normalize(lightPos0-p), 8.0, vec3(0,0,100));\n\t\t\t}\n\t\t\tbreak;\n        }\n\t\tt += d;\n    }\n\tfragColor = color;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ld23Ry","date":"1390472567","viewed":199,"name":"comgr_u9_ray_marching","username":"GabrielZ","description":"Ray Marching Distance Fields","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","distancefield"],"hasliked":0,"parentid":"","parentname":""}}