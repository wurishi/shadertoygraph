{"ver":"0.1","info":{"id":"cdBSWV","date":"1670990438","viewed":159,"name":"Snow shader","username":"TuttiMarcella","description":"This was an exercice from the book of shaders that somehow from 4.00 AM to 5.00 AM transformed into rectangular snow.\n\nHappy holidays everyone~","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["random"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SOGLIA 0.95\nfloat random(vec2 point){\n\n       return fract(sin(dot(point,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\nfloat random(float x){\n    \n    return fract(sin(x) * 10000.0);\n\n}\n\nfloat inBorder(vec2 pixel,float thick){\n    //vec2 pixel = fragCoord / iResolution.xy;\n    vec2 lb = smoothstep(vec2(0.0),vec2(thick),pixel);\n    vec2 tr = smoothstep(vec2(0.0),vec2(thick),vec2(1.0) - pixel);\n    return lb.x * lb.y * tr.x * tr.y;\n}\n\nfloat pattern(vec2 speed,vec2 coordinate){\n    \n    vec2 displacement = floor(speed + coordinate);\n    float value = random(displacement);\n    return step(SOGLIA,value);\n\n}\n//snow can be controlled with the mouse\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    uv *= vec2(400.,200.); //subdivide in grid   -> resolution\n    vec2 ipos = floor(uv);\n    vec2 fpos = fract(uv);\n    vec3 color = vec3(0.0);\n    //color = vec3(pattern(vec2(0.0,float(iFrame) * -0.05 * random(ipos.y)),ipos));\n    //color.r = pattern(vec2(0.0,random(ipos) * float(iFrame) * 0.05 + 0.2),ipos);\n    //color.g = pattern(vec2(0,random(ipos) * float(iFrame) * 0.05),ipos);\n    //color.b = pattern(vec2(0,random(ipos) * float(iFrame) * 0.05 - 0.2),ipos);\n    //color.r = step(0.5,random(ipos.y));\n    color = vec3(1.0) * smoothstep(0.0,-1.0,-uv.y / 200.);\n    color *= pattern(vec2(0.0,random(ipos.x) * float(iFrame) * mouse.y + 0.1),ipos);\n    \n    fragColor = vec4(color,1.0);\n    \n    \n    //color += vec3(1.0) * borders.x * borders.y * tr.x * tr.y;\n    \n    \n   \n}","name":"Image","description":"","type":"image"}]}