{"ver":"0.1","info":{"id":"wtdSz7","date":"1580684753","viewed":92,"name":"V0GravelesV2","username":"jorge2017a1","description":"V0GravelesV2","likes":3,"published":1,"flags":8,"usePreview":0,"tags":["v0gravelesv2"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Referencia por  jorge2017a1 (jorge F.P)\n\n//https://www.shadertoy.com/view/3sfXzf\n//https://www.shadertoy.com/view/ldfSW2\n//https://www.shadertoy.com/view/Msy3WK\n\n//--------------------------------------------------\n#define DOWN_SCALE 1.0\n\n#define MAX_INT_DIGITS 4\n\n#define CHAR_SIZE vec2(8, 12)\n#define CHAR_SPACING vec2(8, 12)\n\n#define STRWIDTH(c) (c * CHAR_SPACING.x)\n#define STRHEIGHT(c) (c * CHAR_SPACING.y)\n\n#define NORMAL 0\n#define INVERT 1\n#define UNDERLINE 2\nint TEXT_MODE = NORMAL;\n\n//---------------------------------\nvec4 ch_s = vec4(0x000000,0x0078CC,0x6018CC,0x780000);\nvec4 ch_S = vec4(0x0078CC,0xCCC070,0x18CCCC,0x780000);\n//----------------------------------------------------\n\nvec2 res = vec2(0);\nvec2 print_pos = vec2(0);\n\n\n//Extracts bit b from the given number.\n//Shifts bits right (num / 2^bit) then ANDs the result with 1 (mod(result,2.0)).\nfloat extract_bit(float n, float b)\n{\n    b = clamp(b,-1.0,24.0);\n\treturn floor(mod(floor(n / pow(2.0,floor(b))),2.0));   \n}\n\n//Returns the pixel at uv in the given bit-packed sprite.\nfloat sprite(vec4 spr, vec2 size, vec2 uv)\n{\n    uv = floor(uv);\n    \n    //Calculate the bit to extract (x + y * width) (flipped on x-axis)\n    float bit = (size.x-uv.x-1.0) + uv.y * size.x;\n    \n    //Clipping bound to remove garbage outside the sprite's boundaries.\n    bool bounds = all(greaterThanEqual(uv,vec2(0))) && all(lessThan(uv,size));\n    \n    float pixels = 0.0;\n    pixels += extract_bit(spr.x, bit - 72.0);\n    pixels += extract_bit(spr.y, bit - 48.0);\n    pixels += extract_bit(spr.z, bit - 24.0);\n    pixels += extract_bit(spr.w, bit - 00.0);\n    \n    return bounds ? pixels : 0.0;\n}\n\n//Prints a character and moves the print position forward by 1 character width.\nfloat char(vec4 ch, vec2 uv)\n{\n    if( TEXT_MODE == INVERT )\n    {\n      //Inverts all of the bits in the character.\n      ch = pow(2.0,24.0)-1.0-ch;\n    }\n    if( TEXT_MODE == UNDERLINE )\n    {\n      //Makes the bottom 8 bits all 1.\n      //Shifts the bottom chunk right 8 bits to drop the lowest 8 bits,\n      //then shifts it left 8 bits and adds 255 (binary 11111111).\n      ch.w = floor(ch.w/256.0)*256.0 + 255.0;  \n    }\n\n    float px = sprite(ch, CHAR_SIZE, uv - print_pos);\n    print_pos.x += CHAR_SPACING.x;\n    return px;\n}\n\n\n//---------------------------------------------------\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) \n{\n\n    vec2 uv = (iResolution.xy - 2. * fragCoord.xy) / iResolution.y;\n\n    int samp;\n    float f = mainSound( 0,iTime).x;\n\n    vec3 color2 =uv.y + .5 * cos(tau * asin(uv.x) + vec3(0, f * 1.57, f * 3.14) + iTime);\n\t\n    \n    vec3 color=uv.y +  vec3(f+0.2, f * 2.57, f * 0.14);\n    \n    vec3 colletra;\n    \n    vec3 col = vec3(1);\n    colletra += char(ch_S,uv);\n    \n    color *= mix(vec3(0.2),vec3(0,1,0),colletra);\n    fragColor.rgb = 1.0 - sqrt(color+color2);\n    \n    \n    \n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//!\n//!\n//!------sonido common\n\n//Referencia por  jorge2017a1 (jorge F.P)\n\n//https://www.shadertoy.com/view/3sfXzf\n//https://www.shadertoy.com/view/ldfSW2\n//https://www.shadertoy.com/view/Msy3WK","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"//por  jorge2017a1 (jorge F.P)\n//Referencia \n\n//https://www.shadertoy.com/view/3sfXzf\n//https://www.shadertoy.com/view/ldfSW2\n//https://www.shadertoy.com/view/Msy3WK\n\n#define NSPC 256\n\n#define pi2 6.283185307179586476925286766559\n\n#define tau 7.77777\n\n// hard clipping distortion\nfloat dist(float s, float d)\n{ //https://www.shadertoy.com/view/ldfSW2\n\treturn clamp(s * d, -1.0, 1.0);\n}\nvec2 dist(vec2 s, float d)\n{\n\treturn clamp(s * d, -1.0, 1.0);\n}\n\n// quantize\nfloat quan(float s, float c)\n{\n\treturn floor(s / c) * c;\n}\n\n// my resonant lowpass filter's frequency response\nfloat _filter(float h, float cut, float res)\n{\n\tcut -= 20.0;\n\tfloat df = max(h - cut, 0.0), df2 = abs(h - cut);\n\treturn exp(-0.005 * df * df) * 0.5 + exp(df2 * df2 * -0.1) * 2.2;\n}\n\n// hash\nfloat nse(float x)\n{\n\treturn fract(sin(x * 110.082) * 19871.8972);\n\t//return fract(sin(x * 110.082) * 13485.8372);\n}\nfloat nse_slide(float x)\n{\n\tfloat fl = floor(x);\n\treturn mix(nse(fl), nse(fl + 1.0), smoothstep(0.0, 1.0, fract(x)));\n}\n\n// note number to frequency\nfloat ntof(float n)\n{\n\treturn 440.0 * pow(2.0, (n - 69.0) / 12.0);\n}\n\n// tb303 core\nvec2 synth(float tseq, float t)\n{\n\tvec2 v = vec2(0.0);\n\t\n\tfloat tnote = fract(tseq);\n\tfloat dr = 0.26;\n\tfloat amp = smoothstep(0.05, 0.0, abs(tnote - dr - 0.05) - dr) * exp(tnote * -1.0);\n\tfloat seqn = nse(floor(tseq));\n\t//float seqn = nse_slide(tseq);\n\tfloat n = 20.0 + floor(seqn * 38.0);//50.0 + floor(time * 2.0);\n\tfloat f = ntof(n);\n\t\n    float sqr = smoothstep(0.0, 0.01, abs(mod(t * 9.0, 64.0) - 20.0) - 20.0);\n    \n\tfloat base = f;//50.0 + sin(sin(t * 0.1) * t) * 20.0;\n\tfloat flt = exp(tnote * -1.5) * 50.0 + pow(cos(t * 1.0) * 0.5 + 0.5, 4.0) * 80.0 - 0.0;\n\tfor(int i = 0; i < NSPC; i ++)\n\t{\n\t\tfloat h = float(i + 1);\n\t\tfloat inten = 1.0 / h;\n\t\t//inten *= sin((pow(h, sin(t) * 0.5 + 0.5) + t * 0.5) * pi2) * 0.9 + 0.1;\n\t\t\n\t\tinten = mix(inten, inten * mod(h, 2.0), sqr);\n\t\t\n\t\tinten *= exp(-1.0 * max(2.0 - h, 0.0));// + exp(abs(h - flt) * -2.0) * 8.0;\n\t\t\n\t\tinten *= _filter(h, flt, 4.0);\n\t\t\n\t\t\n\t\tv.x += inten * sin((pi2 + 0.01) * (t * base * h));\n\t\tv.y += inten * sin(pi2 * (t * base * h));\n\t}\n\t\n\t\n\tfloat o = v.x * amp;//exp(max(tnote - 0.3, 0.0) * -5.0);\n\t\n\t//o = dist(o, 2.5);\n\t\n\treturn vec2(dist(v * amp, 2.0));\n}\n\n// heavy 909-ish bassdrum\nfloat kick(float tb, float time)\n{\n\ttb = fract(tb / 4.0) * 0.5;\n\tfloat aa = 5.0;\n\ttb = sqrt(tb * aa) / aa;\n\t\n\tfloat amp = exp(max(tb - 0.15, 0.0) * -10.0);\n\tfloat v = sin(tb * 100.0 * pi2) * amp;\n\tv = dist(v, 4.0) * amp;\n\tv += nse(quan(tb, 0.001)) * nse(quan(tb, 0.00001)) * exp(tb * -20.0) * 2.5;\n\treturn v;\n}\n\n// 909-ish open hihat\nfloat hat(float tb)\n{\n\ttb = fract(tb / 4.0) * 0.5;\n\tfloat aa = 4.0;\n\t//tb = sqrt(tb * aa) / aa;\n\treturn nse(sin(tb * 4000.0) * 0.0001) * smoothstep(0.0, 0.01, tb - 0.25) * exp(tb * -5.0);\n}\n\nfloat gate1(float t)\n{\n\t#define stp 0.0625\n\tfloat v;\n\tv = abs(t - 0.00 - 0.015) - 0.015;\n\tv = min(v, abs(t - stp*1. - 0.015) - 0.015);\n\tv = min(v, abs(t - stp*2. - 0.015) - 0.015);\n\tv = min(v, abs(t - stp*4. - 0.015) - 0.015);\n\tv = min(v, abs(t - stp*6. - 0.015) - 0.015);\n\tv = min(v, abs(t - stp*8. - 0.05) - 0.05);\n\tv = min(v, abs(t - stp*11. - 0.05) - 0.05);\n\tv = min(v, abs(t - stp*14. - 0.05) - 0.05);\n\t\n\treturn smoothstep(0.001, 0.0, v);\n}\n\n//// \n\nfloat Square(float x)\n{\n    return sign(sin(x));\n}\n\nfloat instrument(float freq, float time, float release)\n{\n    freq = 440.0*pow(freq/440.0,1.003); // spread\n    \n    float ph = 1.0;\n    ph *= sin(6.2831*freq*time);\n    ph *= 0.2+0.8*max(0.0,6.0-0.01*freq);\n    ph *= exp(-time*freq*0.2);\n    \n    float y = 0.0;\n    y += 0.70*Square(1.00*6.2831*freq*time+ph)*exp(-0.5*release*freq*time);\n    y += 0.20*Square(2.01*6.2831*freq*time+ph)*exp(-0.5*release*freq*time);\n    y += 0.20*Square(3.01*6.2831*freq*time+ph)*exp(-0.5*release*freq*time);\n    y += 0.16*Square(4.01*6.2831*freq*time+ph)*exp(-0.5*release*freq*time);\n    y += 0.13*Square(5.01*6.2831*freq*time+ph)*exp(-0.5*release*freq*time);\n    y += 0.10*Square(6.01*6.2831*freq*time+ph)*exp(-0.5*release*freq*time);\n    y += 0.09*Square(8.01*6.2831*freq*time+ph)*exp(-0.5*release*freq*time);\n    y += 0.07*Square(9.01*6.2831*freq*time+ph)*exp(-0.5*release*freq*time);\n\n    y += 0.45*y*y*y;\n       \n    y *= 1.0 + 1.5*exp(-8.0*time);\n    y *= clamp( time/0.004, 0.0, 1.0 );\n\n    y *= 2.5-1.5*clamp( log2(freq)/10.0,0.0,1.0);\n\treturn y;\t\n}\n\n//-----------------------------------------------------\nfloat sawWave(float time, float freq)\n{\n    return fract(freq*time) * 2.0 - 1.0;\n}\n\nfloat superSawWave(float time, float freq)\n{\n\tfloat a = sawWave(time, freq*1.001) * 0.125;\n    float b = sawWave(time+0.25, freq*1.002) * 0.125;   \n\tfloat c = sawWave(time+0.5, freq*0.999) * 0.125;   \n\tfloat d = sawWave(time+0.75, freq*0.998) * 0.125;   \n    float m = sawWave(time+1.0, freq) * 0.5;   \n\n    return (a + b + c + d + m);\n}\n\n//-----------------------------------------------------\nfloat instrumentSawWave(float freq, float time, float release)\n{\n    freq = 440.0*pow(freq/440.0,1.003); // spread\n    \n    float ph = 1.0;\n    ph *= sin(6.2831*freq*time);\n    ph *= 0.2+0.8*max(0.0,6.0-0.01*freq);\n    ph *= exp(-time*freq*0.2);\n    \n    float y = 0.0;\n    y += 0.70*superSawWave(time+ph,1.00*6.2831*freq)*exp(-0.5*release*freq*time);\n    y += 0.20*superSawWave(time+ph,2.01*6.2831*freq*time+ph)*exp(-0.5*release*freq*time);\n    y += 0.20*superSawWave(time+ph,3.01*6.2831*freq)*exp(-0.5*release*freq*time);\n    y += 0.16*superSawWave(time+ph,4.01*6.2831*freq)*exp(-0.5*release*freq*time);\n    y += 0.13*superSawWave(time+ph,5.01*6.2831*freq)*exp(-0.5*release*freq*time);\n    y += 0.10*superSawWave(time+ph,6.01*6.2831*freq)*exp(-0.5*release*freq*time);\n    y += 0.09*superSawWave(time+ph,8.01*6.2831*freq)*exp(-0.5*release*freq*time);\n    y += 0.07*superSawWave(time+ph,9.01*6.2831*freq)*exp(-0.5*release*freq*time);\n\n    y += 0.45*y*y*y;\n       \n    y *= 1.0 + 1.5*exp(-8.0*time);\n    y *= clamp( time/0.004, 0.0, 1.0 );\n\n    y *= 2.5-1.5*clamp( log2(freq)/10.0,0.0,1.0);\n\treturn y;\t\n}\n\n//--------------------------------------------------------\n\nfloat Music(float time)\n{\n    float music = instrument(50.0, time, .05);\n    \n    music += kick(mod(time * 9.0, 16.0), time) * .65;\n    music += kick(mod(time * 6.0, 16.0), time) * .65;\n    \n    music += hat(mod(time * 4.5, 16.0) - 5.0);\n    music += hat(mod(time * 4.5, 16.0) - 4.0);\n    \n    \n    music += instrument( 6.0, mod(time * 9.0, 16.0), .07) * .15;\n    music += instrument( 9.0, mod(time * 9.0, 16.0), .07) * .15;\n    music += instrument(13.0, mod(time * 9.0, 64.0), .07) * .15;\n    music += instrument(17.0, mod(time * 9.0, 64.0), .07) * .15;\n    \n    \n    \n    music += instrumentSawWave(6.0, mod(time * 8.0, 8.0), .0127) * .15;\n    music += instrumentSawWave(12.0, mod(time * 8.0, 16.0), .0127) * .15;\n    \n    \n    \n    return music;\n}\n\nfloat Effects(float time)\n{\n    float effects = 0.0;\n    return effects;\n}\n\nvec2 mainSound( in int samp,float time)\n{\n    float music = Music(time);\n    float effects = Effects(time);\n    return vec2(music + effects) * clamp(time / 4.0, 0.0, 1.0);\n}","name":"Common","description":"","type":"common"}]}