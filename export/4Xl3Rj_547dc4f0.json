{"ver":"0.1","info":{"id":"4Xl3Rj","date":"1710273748","viewed":95,"name":"Lumirefraction","username":"jcarrano","description":"The luminance represents the thickness of a layer of clear material, and light is refracted from the image below.","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["refraction"],"hasliked":0,"parentid":"4ffSz4","parentname":"Egg Carton Halftone in CMYK"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define REFRACTION_INDEX 1.5\n#define BASE_DEPTH 100.0\n#define HEIGHT_FACTOR 100.0\n#define HEIGHT_FACTOR2 10.0\n#define VIEW_DISTANCE_FACTOR 100.0\n#define HIGHLIGHT 3.0\n\nfloat gray(vec4 pix)\n{\n    return 0.333 * (pix.r + pix.g + pix.b);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //versors in uv space\n    vec2 nu = vec2(1.0/iResolution.x, 0.0);\n    vec2 nv = vec2(0.0, 1.0/iResolution.y);\n    \n    vec4 pix = texture(iChannel0, uv);\n    float h = gray(pix);\n    \n    vec2 surface_gradient = vec2(\n      //  dFdx(h),dFdy(h)\n     \t    gray(texture(iChannel0, uv + nu)) - gray(texture(iChannel0, uv - nu)), // dh/dx\n            gray(texture(iChannel0, uv + nv)) - gray(texture(iChannel0, uv - nv)) // dh/dy\n    );\n    \n    // GLSL refraction\n    // first we need to compute the surface normal\n    vec3 normal = normalize(vec3(surface_gradient*HEIGHT_FACTOR2, 1.0));\n    vec3 incident = normalize(vec3(fragCoord-iResolution.xy/2.0, -iResolution.x*VIEW_DISTANCE_FACTOR));\n    vec2 exit_vector = refract(incident, normal, 1.0/REFRACTION_INDEX).xy;\n    \n    vec2 exit_displacement = exit_vector*((BASE_DEPTH + h*HEIGHT_FACTOR2*HEIGHT_FACTOR)/iResolution.xy);\n    \n    float highlight = 1.0 + dot(vec2(0.707,0.707), surface_gradient)*HIGHLIGHT;\n    \n    fragColor.rgb = texture(iChannel0, uv + exit_displacement).rgb * highlight;\n    fragColor.a = 1.0;\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Remove the green screen and transform it to an alpha channel (premultiplied).\n\nvec4 removeGreenScreen(vec4 col)\n{\n    float greenness = col.g - max(col.r, col.b);\n    float mask = (1.0 - smoothstep(0.0, 0.1, greenness));\n    \n    return vec4(col.rgb * mask, mask*col.a);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 color = texture(iChannel0, fragCoord.xy/iResolution.xy);\n    fragColor = removeGreenScreen(color);\n}","name":"Buffer A","description":"","type":"buffer"}]}