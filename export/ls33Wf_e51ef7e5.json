{"ver":"0.1","info":{"id":"ls33Wf","date":"1452464585","viewed":411,"name":"Accumulated quadratic graph","username":"zachernuk","description":"A first stab at the quadratic graph accumulation portion of the Hough Transform in GLSL. Now all I need is the feature detection, the Gauss row reduction and the blob tracking!  Easy!","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["gpgpu","vision","hough","radon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define lineColor  vec4(0.1, 0.4,0.2,1.0)\n#define bgColor vec4(0.0,0.0,0.0, 1.0)\n#define gridLineColor vec4(0.1,0.3,0.1, 1.0)\n\n#define NUM_LINES 120\n\n#define black vec4(0.,0., 0.,1.0)\n\n#define GRIDLINES\n#define SCALE 4.\n#define OFFSET vec2(-2.2, 1.3)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // Establish the scale & aspect ratio for the graph. \n\tvec2 gUV = (fragCoord.xy/iResolution.xy*SCALE)+OFFSET; \n    gUV.x*=iResolution.x/iResolution.y;\n\tfragColor = vec4(0.,0.,0.,1.);\n\n    for(int i =0;i<NUM_LINES;i++) {\n        \n        //  Getting arbitrary values for a,b and c to drive the quadratics;\n        //  it may be necessary to use more bytes of input data for enough precision here:\n\t\tfloat f = float(i)/float(NUM_LINES);\n    \tvec2 sampler = vec2((float(i*4)+iTime*.1)/iChannelResolution[0].y,0.3)+iMouse.xy/100.;\n    \tvec4 _sample = texture(iChannel0, sampler);\n        float a = _sample.r*11.-3.1;\n        float b = _sample.g*13.-4.5;\n        float c = _sample.b*10.-0.0;\n\n        float func = gUV .x*gUV .x*a+gUV .x*b+c;\n\t    float fDist = abs(gUV .y-0.5-func);\n      \tfDist = smoothstep(0., 0.023, fDist);\n      \tfragColor += mix( lineColor,black, fDist);\n    }\n    \n\n    #ifdef GRIDLINES\n        gUV = fract(gUV);\n        float minxy = min(gUV.x, gUV.y);\n        float smoothMin = smoothstep(0., 0.03,minxy);\n        vec4 baseColor = mix( gridLineColor,bgColor, smoothMin);\n        fragColor = mix(baseColor,lineColor, fragColor.g*2.);\n    #endif\n}","name":"Image","description":"","type":"image"}]}