{"ver":"0.1","info":{"id":"4lKXDt","date":"1486504686","viewed":188,"name":"Political Map","username":"Longinus","description":"3d Worley with cell Ids for closest two. cell Ids are calculated same for some clusters. Clustering needs improving.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["3d","perlin","worley","combined"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rnd(float x) { return fract(1000.*sin(234.56*x)); }\nvec3 rnd3(float x) { return vec3(rnd(x),rnd(x+.1),rnd(x+.2)); }\nfloat hash(float x,float y,float z) { return (x+432.432*y-1178.65*z); }\nfloat hash(vec3 v) { return dot(v,vec3(1., 32.432, -1178.65)); }\n    \nvec4 Worley(vec3 uvw) {\n    \n   vec3 uvwi = floor(uvw);\t\t\t\t\t\t\t// cell coords\n   float dmin = 1e9, d2min=1e9, nmin=-1., nmin2=-1.;\n    \n    for (int i=-1; i<=1; i++)\t\t\t\t\t\t// visit neighborhood\n      for (int j=-1; j<=1; j++)\t\t\t\t\t\t// to find the closest point\n          for (int k=-1; k<=1; k++) \n          {\n              vec3 c = uvwi + vec3(float(i),float(j),float(k)); // neighbor cells\n              float n = hash(c);\t \t\t\t\t\t\t\t// cell ID\n              vec3 p = c + rnd3(n+.1);\t\t\t\t\t\t\t// random point in cell\n              float n2 = hash(floor(c/2.0));\n              float d = length(p-uvw);\t\t\t\t\t\t\t// dist to point\n              if (d<dmin) { d2min=dmin; dmin=d; nmin2=nmin; nmin=n2; }\t\t// 2 closest dists\n              else if (d<d2min) { d2min=d; nmin2=n2; }\n          }\n\treturn vec4(dmin,d2min,nmin, nmin2);\t\t\t// 2 closest dists + 2 closest ID\n}\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec2 fade(vec2 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat cnoise(vec2 P)\n{\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n  Pi = mod289(Pi); // To avoid truncation effects in permutation\n  vec4 ix = Pi.xzxz;\n  vec4 iy = Pi.yyww;\n  vec4 fx = Pf.xzxz;\n  vec4 fy = Pf.yyww;\n\n  vec4 i = permute(permute(ix) + iy);\n\n  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;\n  vec4 gy = abs(gx) - 0.5 ;\n  vec4 tx = floor(gx + 0.5);\n  gx = gx - tx;\n\n  vec2 g00 = vec2(gx.x,gy.x);\n  vec2 g10 = vec2(gx.y,gy.y);\n  vec2 g01 = vec2(gx.z,gy.z);\n  vec2 g11 = vec2(gx.w,gy.w);\n\n  vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\n  g00 *= norm.x;  \n  g01 *= norm.y;  \n  g10 *= norm.z;  \n  g11 *= norm.w;  \n\n  float n00 = dot(g00, vec2(fx.x, fy.x));\n  float n10 = dot(g10, vec2(fx.y, fy.y));\n  float n01 = dot(g01, vec2(fx.z, fy.z));\n  float n11 = dot(g11, vec2(fx.w, fy.w));\n\n  vec2 fade_xy = fade(Pf.xy);\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n  return 2.3 * n_xy;\n}\n\n// Classic Perlin noise, periodic variant\nfloat pnoise(vec2 P, vec2 rep)\n{\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n  Pi = mod(Pi, rep.xyxy); // To create noise with explicit period\n  Pi = mod289(Pi);        // To avoid truncation effects in permutation\n  vec4 ix = Pi.xzxz;\n  vec4 iy = Pi.yyww;\n  vec4 fx = Pf.xzxz;\n  vec4 fy = Pf.yyww;\n\n  vec4 i = permute(permute(ix) + iy);\n\n  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;\n  vec4 gy = abs(gx) - 0.5 ;\n  vec4 tx = floor(gx + 0.5);\n  gx = gx - tx;\n\n  vec2 g00 = vec2(gx.x,gy.x);\n  vec2 g10 = vec2(gx.y,gy.y);\n  vec2 g01 = vec2(gx.z,gy.z);\n  vec2 g11 = vec2(gx.w,gy.w);\n\n  vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\n  g00 *= norm.x;  \n  g01 *= norm.y;  \n  g10 *= norm.z;  \n  g11 *= norm.w;  \n\n  float n00 = dot(g00, vec2(fx.x, fy.x));\n  float n10 = dot(g10, vec2(fx.y, fy.y));\n  float n01 = dot(g01, vec2(fx.z, fy.z));\n  float n11 = dot(g11, vec2(fx.w, fy.w));\n\n  vec2 fade_xy = fade(Pf.xy);\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n  return 2.3 * n_xy;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 uvw = vec3(2.*(fragCoord.xy / iResolution.y-vec2(.919,.715)), .00*iTime);\n    float a = .02*iTime,c=cos(a),s=sin(a); uvw.xy *= mat2(c,-s,s,c);\t// rotate\n    uvw *= 2.*(.97+.25*vec3(vec2(cos(.20*iTime)),0.));\t\t\t\t\t// zoom\n\n    vec4 wor = Worley(uvw*2.0);\n    vec3 col =rnd3(wor.z)/16.0+0.5;\n    vec3 ccol = (abs(wor.x-wor.y) >0.02 || wor.z==wor.w)?col:vec3(0.0,0.0,0.0);\n    float n = cnoise(uvw.xy/2.0)+0.5*cnoise(uvw.xy)+0.25*cnoise(uvw.xy*2.0);\n    vec3 landsea = n<0.04?vec3(0.5,0.5,0.85):(n>0.06)?ccol:vec3(0,0,0);\n\tfragColor = vec4(landsea,1.0); //vec4(ccol,1.0);\n}","name":"Image","description":"","type":"image"}]}