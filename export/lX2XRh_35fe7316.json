{"ver":"0.1","info":{"id":"lX2XRh","date":"1711761934","viewed":60,"name":"Nationsim2","username":"numpyhard","description":"Supposed to be a nation fighting simulation that's kind of organic, and unnecessarily complicated (that's how I make novel things usually).","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["mask","infection","epidemic"],"hasliked":0,"parentid":"43fSWM","parentname":"SIR sim w/ imitation vaccination"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n\n    // \n    if(iMouse.x/iResolution.x<.5){\n\n        fragColor = vec4(vec3(.33*(.2+log(1.+fragColor.y)), 0., fragColor.z),1.);\n        return;\n    }\n\n    vec3 col = vec3(0.,0.,1.);\n    if(fragColor.w>0.){\n    \n        if(fragColor.x==0.)col = vec3(1.,0.,0.);\n        else col = vec3(0.,1.,0.);\n        //if(fragColor.w>fragColor.y)col = vec3(0.5,.5,1.);\n\n        \n        fragColor = vec4(col*(.1+log(1.+fragColor.w)),1.);\n        return;\n    }\n    fragColor = vec4(0.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec2 neighbours[8] = vec2[8](vec2(-1.), vec2(-1.,0.), vec2(-1.,1.), vec2(0., -1.), vec2(0., 1.), vec2(1., -1.), vec2(1., 0.), vec2(1.));\n\n\n\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec4 read(vec2 p) {\n\treturn texture(iChannel0, p/iResolution.xy).xyzw;\n}\n\nvec4 pool(vec2 p) {\n  vec4 acc = vec4(0.0);\n  for (int y=-1; y<=1; ++y)   \n  for (int x=-1; x<=1; ++x) {\n    acc += read(p + vec2(x, y)).xyzw;\n  }\n  return acc;\n}\n\nfloat random(vec2 px){\n    return hash13(vec3(3.*px+vec2(521.3, 0.), mod(1772.*iTime+19.*iDate.w,137.) ));\n}\n\nfloat fermi(float diff, float beta){\n    return 1./(1.+exp(-beta*diff));\n}\n\nfloat stair(float x){ //return 0 if x<0, return 1 if x>1 else return x\n    if(x<0.)return 0.;\n    return min(1., x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 xy ){\n    if (iFrame == 0) {\n        fragColor = vec4(0.);\n        return;\n    }if(iFrame == 1 && texture(iChannel1, xy/iResolution.xy).x>0. && random(xy+vec2(-35.))<1.1){\n        int nation = int(floor(2.*random(xy)));\n        fragColor = vec4(nation,0.,0.,2.);\n        return;\n    }\n    fragColor = read(xy);\n    \n\n    // Flux diffusion\n    if(fragColor.w>0.){\n        float d=0.;\n        float t=1.;\n        float m=0.;\n        for(int i=0; i<8; i++){\n            vec4 neigh = read(xy+neighbours[i]);\n            if(neigh.w>0. && fragColor.x==neigh.x){\n                d += (neigh.y)*fermi(fragColor.z-neigh.z,500.);\n                d -= (fragColor.y)*fermi(neigh.z-fragColor.z,500.);\n                t += 1.;\n                m = max(m, neigh.z);\n            }\n        }\n        fragColor.z += 1.3*stair(m-fragColor.z);\n        fragColor.y += .5*d/t;\n    }\n    \n    //Attack signal diffusion\n    if(fragColor.w>0.){\n        float avg;\n        float t=0.;\n        for(int x=-1;x<=1;x++){for(int y=-1;y<=1;y++){\n            vec4 neigh = read(xy+vec2(x,y));\n            if(neigh.w>0.){\n                avg += neigh.z;\n                t++;\n            }\n        }\n            \n        }\n        fragColor.z = avg/t;\n    }\n    \n    //fragColor.z*=.999;\n    \n    \n    // Add resource\n    if(texture(iChannel1, xy/iResolution.xy).x>0.){\n        fragColor.y += 10.5;\n        //if(fragColor.x==1.)fragColor.y+=10.;\n    }\n    \n    // Gain/lose strength from flux;\n    if(fragColor.w>0.){\n        fragColor.w += (fragColor.y-fragColor.w)*.8;\n        fragColor.y -= max(0.,fragColor.y-fragColor.w)*.8;\n        //fragColor.z -= min(fragColor.y-500.,0.);\n        //fragColor.z += max(0.00,pow(fragColor.w-fragColor.y*.2,.02));\n    }\n    \n    \n    int x = int(floor(8.*random(xy+vec2(8782.))));\n    vec4 neighbour = read(xy+neighbours[x]);\n    // neighbour attacks xy.\n    if(neighbour.x!=fragColor.x){\n        if(neighbour.w>0. && fragColor.w >0.){\n            float d = fermi(fragColor.w-neighbour.w, 30.)*random(xy+vec2(37.));\n            fragColor.w *= d;\n        }\n    }if(neighbour.w<=0.){\n        float d = fermi(fragColor.w+1., 30.)*random(xy+vec2(37.));\n        fragColor.w *= d;\n    }\n    \n    // This non random index gives some advantage\n    for(int i=0;i<8;i++){\n        x = int(floor(8.*random(xy+neighbours[i]+vec2(8782.))));\n        if(neighbours[x]+neighbours[i]==vec2(0.)){\n            \n            neighbour = read(xy+neighbours[i]);\n            \n            if(fragColor.w<=0. && neighbour.w >0. && random(xy+vec2(-87))<fermi(neighbour.w-fragColor.w,1.)){\n                fragColor.x = neighbour.x;\n                fragColor.w = .05;\n                fragColor.z = 0.2;\n                continue;\n            }\n            \n            if(neighbour.x!=fragColor.x && neighbour.w>0. && fragColor.w>0.){\n                float d = fermi(fragColor.w-neighbour.w, 30.)*random(xy+vec2(37.));\n                fragColor.w *= d;\n                fragColor.z += 1.;\n            }\n        }\n    }\n    if(fragColor.w <= 0.01) fragColor.w = 0.;\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define flux_freq 0.001\n#define flux_freq2 0.5\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n#define MOD3 vec3(.1031,.11369,.13787)\n\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return -1.0 + 2.0 * fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\nfloat perlin_noise(vec3 p)\n{\n    vec3 pi = floor(p);\n    vec3 pf = p - pi;\n    \n    vec3 w = pf * pf * (3.0 - 2.0 * pf);\n    \n    return \tmix(\n        \t\tmix(\n                \tmix(dot(pf - vec3(0, 0, 0), hash33(pi + vec3(0, 0, 0))), \n                        dot(pf - vec3(1, 0, 0), hash33(pi + vec3(1, 0, 0))),\n                       \tw.x),\n                \tmix(dot(pf - vec3(0, 0, 1), hash33(pi + vec3(0, 0, 1))), \n                        dot(pf - vec3(1, 0, 1), hash33(pi + vec3(1, 0, 1))),\n                       \tw.x),\n                \tw.z),\n        \t\tmix(\n                    mix(dot(pf - vec3(0, 1, 0), hash33(pi + vec3(0, 1, 0))), \n                        dot(pf - vec3(1, 1, 0), hash33(pi + vec3(1, 1, 0))),\n                       \tw.x),\n                   \tmix(dot(pf - vec3(0, 1, 1), hash33(pi + vec3(0, 1, 1))), \n                        dot(pf - vec3(1, 1, 1), hash33(pi + vec3(1, 1, 1))),\n                       \tw.x),\n                \tw.z),\n    \t\t\tw.y);\n}\n\nfloat noise(vec2 p){\n    return .5*perlin_noise(vec3(p*0.01, iDate.w))\n        +.25*perlin_noise(vec3(p*0.04+vec2(567.), iDate.w))\n        +.125*perlin_noise(vec3(p*0.16+vec2(267.), iDate.w))\n        +.125*perlin_noise(vec3(p*0.32+vec2(267.), iDate.w))\n        +.3;\n\n}\n\nfloat random(vec2 px){\n    return hash13(vec3(3.*px+vec2(521.3, 0.), iDate.w ));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(iFrame==0){\n        fragColor = vec4(0.0,0.0,0.0,1.0);\n        if(random(fragCoord)<flux_freq){\n            if(random(fragCoord+vec2(67.))<flux_freq2)fragColor.x = 1.;\n        }\n        fragColor.y = noise(fragCoord);\n        return;\n    }\n    \n    fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n    \n}","name":"Buffer B","description":"","type":"buffer"}]}