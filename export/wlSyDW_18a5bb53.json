{"ver":"0.1","info":{"id":"wlSyDW","date":"1597835320","viewed":150,"name":"Terrain raycast","username":"0xAA55","description":"Try to do some terrain raycast","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["raycast"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\nMIT LICENSE\n\nCopyright (c) 2020 0xAA55\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n*/\n\n// Render the scene\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 RefData = texture(iChannel0, vec2(0.5));\n    vec4 CurData = texture(iChannel0, fragCoord / iResolution.xy);\n    \n    const vec2 BlurDir = normalize(vec2(-1.0, 1.0));\n    float BlurCount = 0.0;\n    vec3 BlurColor = vec3(0);\n    float ResoRatio = length(iResolution.xy) / MapScale;\n    float BlurDist = (CurData.w - RefData.w) * DOF_Radius * ResoRatio;\n    for(int i = -DOF_BlurCount; i <= DOF_BlurCount; i++)\n    {\n        BlurCount ++;\n        BlurColor += texture(iChannel0, (fragCoord + vec2(BlurDir) * vec2(i) * BlurDist) / iResolution.xy).rgb;\n    }\n    \n    BlurColor /= BlurCount;\n    fragColor = vec4(BlurColor, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\n\nMIT LICENSE\n\nCopyright (c) 2020 0xAA55\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n*/\n\nconst float Pi = 3.14159265358979323846264;\nconst float Epsilon = 0.000001;\n\nconst float MapScale = 512.0;\nconst float MapTexScale = 5.0; // Magnitude scaling\nconst float AltScale = 120.0; // Altitude scaling\nconst float MinDistThreshold = 0.05; // The minimum distance value of how to determine if a ray hits the terrain\nconst float StepLengthModifier = 0.95;\nconst int MaxIterSteps = 160; // Higher for quality, lower for FPS\nconst float MaxDOV = 500.0; // Max depth of view\nconst vec3 FogColor = vec3(0.8, 0.9, 1.0); // The color of the sky\nconst vec3 LightDir = vec3(0.5, -0.5, 0.5); // The direction of the light\nconst vec3 Ambient = vec3(0.08, 0.09, 0.1); // The ambient lighting for the shadow\nconst float CameraWobble = 20.0;\nconst float CameraWobbleSpeed = 0.1;\nconst float CameraAlt = AltScale * 0.75 - CameraWobble;\nconst float TerrainShineness = 20.0;\nconst int DOF_BlurCount = 5;\nconst float DOF_Radius = 1.0 / (MaxDOV * 0.5);\n\nfloat Altitude(vec4 Sample)\n{\n    // If your map is very spiky, change the power value higher.\n    return AltScale * pow(length(Sample.rgb) / length(vec3(1)), 1.0);\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\n\nMIT LICENSE\n\nCopyright (c) 2020 0xAA55\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n*/\n\n// You can put your code here to do some additional shading for the input texture.\n// This buffer is the source of the altitude map\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord * 1.0 / iResolution.xy) * 1.0;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"/*\n\nMIT LICENSE\n\nCopyright (c) 2020 0xAA55\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n*/\n\n// Higher for precise map raycasting and more adaptive to the dynamic changing altitude map (e.g. Video as the altitude map)\n// Lower for more FPS. K-map generation is slower.\n// For the static altitude map (A texture, rather than a video), change SEARCH_RADIUS to 1\n#define SEARCH_RADIUS 2\n\nconst int SearchRadius = SEARCH_RADIUS;\n\n// K-map generation\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float MaxK = 0.5;\n    vec2 MaxKPos = fragCoord;\n    float ThisAlt = Altitude(texture(iChannel0, fragCoord / iResolution.xy));\n    \n    // First, calculate the K-value from nearby pixels\n    const int SR = SearchRadius;\n    for(int y = -SR; y <= SR; y++)\n    {\n    \tfor(int x = -SR; x <= SR; x++)\n        {\n            if(x == 0 && y == 0) continue;\n            vec2 xy = vec2(x, y);\n            vec2 CurPosition = (fragCoord + vec2(xy));\n            \n            float CurAltDiff = Altitude(texture(iChannel0, CurPosition / iResolution.xy)) - ThisAlt;\n            float CurDist = length(xy);\n            \n            // Ratio of height difference to distance, is the K-value\n            float K = CurAltDiff / CurDist;\n            if(K > MaxK)\n            {\n                MaxK = K;\n                MaxKPos = CurPosition;\n            }\n        }\n    }\n    \n    // Then, collect the previous K-value result from the nearby pixels, expand the highest ratio to all the map frame by frame.\n    for(int y = -SR; y <= SR; y++)\n    {\n    \tfor(int x = -SR; x <= SR; x++)\n        {\n            if(x == 0 && y == 0) continue;\n            vec2 xy = vec2(x, y);\n            vec2 CurPosition = (fragCoord + vec2(xy));\n            // Nearby pixel K-value and the corresponding coordinate\n            vec4 Data = texture(iChannel1, CurPosition / iResolution.xy);\n            \n            vec2 Position = Data.xy;\n            float AltDiff = Altitude(texture(iChannel0, Position / iResolution.xy)) - ThisAlt;\n            float Dist = distance(fragCoord, Position);\n            if(Dist > 0.5) // Not grabbing current data back from the nearby\n            {\n                float K = AltDiff / Dist;\n                if(K > MaxK)\n                {\n                    MaxK = K;\n                    MaxKPos = Position;\n                }\n            }\n        }\n    }\n    \n    // Output the K-value map\n    fragColor = vec4(MaxKPos, MaxK, ThisAlt);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":3,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"/*\n\nMIT LICENSE\n\nCopyright (c) 2020 0xAA55\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n*/\n\n// Raycast to the map, returns 0 if not cast.\nint MapRaycast(in vec3 Orig, in vec3 Ray, in float MaxDist, out vec3 CastPos, out float CastDist, out float MinStepLen)\n{\n    float RayHorz = length(Ray.xz);\n    if(RayHorz <= Epsilon)\n    {\n        CastPos.y = texture(iChannel0, Orig.xz / MapScale).w;\n        CastDist = Orig.y - CastPos.y;\n        return 1;\n    }\n    \n    float RayK = -Ray.y / RayHorz;\n    CastDist = 0.0;\n    MinStepLen = 100000.0;\n    \n    // Move the orig forward the ray direction and check if it's near enough to the terrain\n    for(int s = 0; s < MaxIterSteps; s++)\n    {\n        float StepLength = 0.0;\n        float Alt = texture(iChannel0, Orig.xz / MapScale).w;\n    \tfloat MapK = texture(iChannel0, Orig.xz / MapScale).z * length(iResolution.xy) / MapScale;\n    \tfloat K = RayK + MapK;\n        \n        // The ray is going away from the map\n        if(RayK < 0.0 && -RayK > MapK)\n        {\n            return 0;\n        }\n        \n        // Calculate the step length to move the orig forward\n        if(K > Epsilon)\n        {\n            StepLength = (Orig.y - Alt) / RayHorz / K;\n            StepLength = max(StepLength * StepLengthModifier, MinDistThreshold);\n            MinStepLen = min(MinStepLen, StepLength);\n        }\n        else\n        {\n            // Infinite step length, the ray is parallel to the map plane and it would never cast to the terrain\n            return 0;\n        }\n        \n        // Do the move\n        Orig += Ray * StepLength;\n        CastDist += StepLength;\n        \n        // Check if near enough\n        if(Orig.y <= Alt + MinDistThreshold)\n        {\n\t\t\tif(StepLength <= MinDistThreshold) break;\n            else\n            {\n                StepLength *= -0.5;\n                Orig += Ray * StepLength;\n                CastDist += StepLength;\n            }\n        }\n        \n        // Check if far enough to give up\n        if(CastDist > MaxDist)\n        {\n            CastDist = MaxDist;\n            return 0;\n        }\n    }\n    \n    CastPos = Orig;\n    return 1;\n}\n\n// Get the normal from the altitude map\nvec3 GetNormal(in vec2 OrigXZ)\n{\n    float Alt1 = texture(iChannel0, (OrigXZ - vec2(1.0, 0.0)) / MapScale).w;\n    float Alt2 = texture(iChannel0, (OrigXZ + vec2(1.0, 0.0)) / MapScale).w;\n    float Alt3 = texture(iChannel0, (OrigXZ - vec2(0.0, 1.0)) / MapScale).w;\n    float Alt4 = texture(iChannel0, (OrigXZ + vec2(0.0, 1.0)) / MapScale).w;\n    return normalize(vec3(Alt1 - Alt2, 2.0, Alt3 - Alt4));\n}\n\n// Render the scene\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // The rotation of the camera\n    float PitchAngle = Pi * 0.15 + Pi * 0.05 * sin(Pi * 0.06 * iTime);\n    float YawAngle = Pi * 0.01 * iTime;\n    mat3 RayRotYaw = mat3\n    (\n        vec3(cos(YawAngle), 0.0, -sin(YawAngle)),\n        vec3(0.0, 1.0, 0.0),\n        vec3(sin(YawAngle), 0.0, cos(YawAngle))\n    );\n    mat3 RayRotPitch = mat3\n    (\n        vec3(1.0, 0.0, 0.0),\n        vec3(0.0, cos(PitchAngle), -sin(PitchAngle)),\n        vec3(0.0, sin(PitchAngle), cos(PitchAngle))\n    );\n    \n    // Create rays from the screen pixels\n    vec3 StartRay = vec3(fragCoord / iResolution.xy * 2.0 - 1.0, 2.0);\n    StartRay.x = StartRay.x * iResolution.x / iResolution.y;\n    StartRay = normalize(StartRay);\n    StartRay *= RayRotPitch;\n    StartRay *= RayRotYaw;\n    \n    // Prepare raycast to the scene\n    vec3 Orig = vec3(5.0 + cos(iTime * Pi * 0.01) * 500.0, CameraAlt + sin(iTime * Pi * CameraWobbleSpeed) * CameraWobble, 5.0 + sin(iTime * Pi * 0.01) * 500.0);\n    float CamPosAlt = texture(iChannel0, Orig.xz / MapScale).w;\n    Orig.y = max(Orig.y, CamPosAlt + 5.0);\n    vec3 Ray = StartRay;\n    vec3 CastPos = Orig;\n    float CastDist = 0.0;\n    float MinStepLen;\n    vec3 Diffuse = FogColor;\n    vec3 Specular = vec3(0);\n    vec3 NLD = normalize(LightDir);\n    vec3 Color = FogColor;\n    vec3 SkyColor = mix(FogColor, texture(iChannel1, Ray).rgb, pow(max(Ray.y, 0.0), 0.75));\n    \n    // Begin raycast to the scene\n    if(MapRaycast(Orig, Ray, MaxDOV, CastPos, CastDist, MinStepLen) != 0)\n    {\n        // Cast color\n        vec3 CastColor = texture(iChannel3, CastPos.xz * MapTexScale / MapScale).xyz;\n        vec3 MetallicColor = texture(iChannel2, CastPos.xz / MapScale).xyz;\n\n        // Cast normal\n        vec3 Normal = GetNormal(CastPos.xz);\n        float NdL = dot(Normal, -NLD);\n        Diffuse = vec3(max(NdL, 0.0));\n        \n        vec3 Halfway = -normalize(Ray + NLD);\n        Specular = texture(iChannel1, reflect(Ray, Normal)).rgb * min(pow(max(dot(Normal, Halfway), 0.0), TerrainShineness), 1.0);\n        \n        // Add some shadow\n        if(NdL > 0.0)\n        {\n            float Shadow = 0.0;\n            float ShadowDist;\n            vec3 ShadowCastPos;\n            if(MapRaycast(CastPos + (Normal * 1.5 - NLD) * 2.0 * MinDistThreshold, -NLD, MaxDOV, ShadowCastPos, ShadowDist, MinStepLen) != 0)\n            {\n                // Shadowed\n                Shadow = clamp(ShadowDist * 0.5 - MinDistThreshold * 1.5 + NdL * 10.0, 0.0, 1.0);\n            }\n            else\n            {\n                // Soft shadow\n                // I don't know how to implement soft shadow.\n                // So there's no soft shadow.\n                // Sorry.\n            }\n            Diffuse *= 1.0 - Shadow;\n            Specular *= 1.0 - Shadow;\n        }\n        // Add some fog\n        Color = mix((Diffuse + Ambient) * CastColor + Specular * MetallicColor, SkyColor, CastDist / MaxDOV);\n    }\n    else\n    {\n        Color = SkyColor;\n    }\n    \n    fragColor = vec4(Color, CastDist);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"/*\n\nMIT LICENSE\n\nCopyright (c) 2020 0xAA55\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n*/\n\n// Render the scene\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 RefData = texture(iChannel0, vec2(0.5));\n    vec4 CurData = texture(iChannel0, fragCoord / iResolution.xy);\n    \n    const vec2 BlurDir = normalize(vec2(1.0, 1.0));\n    float BlurCount = 0.0;\n    vec3 BlurColor = vec3(0);\n    float ResoRatio = length(iResolution.xy) / MapScale;\n    float BlurDist = (CurData.w - RefData.w) * DOF_Radius * ResoRatio;\n    for(int i = -DOF_BlurCount; i <= DOF_BlurCount; i++)\n    {\n        BlurCount ++;\n        BlurColor += texture(iChannel0, (fragCoord + vec2(BlurDir) * vec2(i) * BlurDist) / iResolution.xy).rgb;\n    }\n    \n    BlurColor /= BlurCount;\n    fragColor = vec4(BlurColor, CurData.w);\n}","name":"Buffer D","description":"","type":"buffer"}]}