{"ver":"0.1","info":{"id":"Xs3SWH","date":"1458918036","viewed":429,"name":"scanning shader prototype","username":"danielguttenberg","description":"simple shader to visualise that a scanning operation is currently being performed","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["sobel","edgedetection","scanline"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float RGB2Luminance(in vec3 rgb)\n{\n    return 0.2126 * rgb.r + 0.7152 * rgb.g + 0.0722 * rgb.b;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // common stuff\n\tvec2 uv = gl_FragCoord.xy / iResolution.xy;\n\tvec2 pixelSize = vec2(1.0) / iResolution.xy;\n\n    // sobel stuff\n    float tl = RGB2Luminance(texture(iChannel0, uv + -pixelSize.xy).rgb);\n    float t = RGB2Luminance(texture(iChannel0, uv + vec2(0.0, -pixelSize.y)).rgb);\n    float tr = RGB2Luminance(texture(iChannel0, uv + vec2(pixelSize.x, -pixelSize.y)).rgb);\n\n    float cl = RGB2Luminance(texture(iChannel0, uv + vec2(-pixelSize.x, 0.0)).rgb);\n\tfloat c = RGB2Luminance(texture(iChannel0, uv).rgb);\n    float cr = RGB2Luminance(texture(iChannel0, uv + vec2(pixelSize.x, 0.0)).rgb);\n\n    float bl = RGB2Luminance(texture(iChannel0, uv + vec2(-pixelSize.x, pixelSize.y)).rgb);\n\tfloat b = RGB2Luminance(texture(iChannel0, uv + vec2(0.0, pixelSize.y)).rgb);\n    float br = RGB2Luminance(texture(iChannel0, uv + vec2(pixelSize.x, pixelSize.y)).rgb);\n\n    float sobelX = tl * -1.0 + tr * 1.0 + cl * -2.0 + cr * 2.0 + bl * -1.0 + br * 1.0;\n    float sobelY = tl * -1.0 + t * -2.0 + tr * -1.0 + bl * 1.0 + b * 2.0 + br * 1.0;\n\n    float sobel = sqrt(sobelX * sobelX + sobelY * sobelY);\n\n    // scanline stuff\n    float scanlineX = sin(iTime * 2.0) * 0.5 + 0.5;\n    vec4 textureColor = texture(iChannel0, uv);\n    float pixelWidth = 1.0 / iResolution.x;\n    float fragCoordX = gl_FragCoord.x / float(iResolution.x);\n\n    const float scanWindowsWidthInPixels = 200.0;\n\n    float distanceToScanline = clamp(0.0, pixelWidth * scanWindowsWidthInPixels, distance(scanlineX, fragCoordX)) / (pixelWidth * scanWindowsWidthInPixels);\n\n    if (scanlineX > fragCoordX - pixelWidth * scanWindowsWidthInPixels && scanlineX < fragCoordX + pixelWidth * scanWindowsWidthInPixels)\n    {\n        if (sobel < 0.7)\n        {\n            fragColor = vec4(mix(vec3(c), textureColor.rgb, smoothstep(0.4, 0.6, distanceToScanline)), 1.0);\n        }\n        else\n        {\n            fragColor = vec4(mix(vec3(1.0, 140.0/255.0, 10.0/255.0), textureColor.rgb, smoothstep(0.1, 0.9, distanceToScanline)), 1.0);\n        }\n    }\n    else\n    {\n\t\tfragColor = vec4(vec3(textureColor), 1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}