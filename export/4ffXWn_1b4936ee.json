{"ver":"0.1","info":{"id":"4ffXWn","date":"1705104995","viewed":92,"name":"Ray Tracing- Accumulation","username":"UsamagorQ","description":"this is actually super fun\n\nThis now actually simulates light paths.","likes":1,"published":3,"flags":32,"usePreview":0,"tags":["raytracing","rays","sphere","balls"],"hasliked":0,"parentid":"MclXR7","parentname":"Ray tracing - bouncing rays"},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec4 oldRender = texture(iChannel1, uv);\n    fragColor = vec4(texture(iChannel1, uv).rgb, 1.);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"uint seed;\nint maxBounceCount = 15;\nfloat raysPerPixel = 20.;\n// Random number generator\nfloat random() {\n    seed = seed * 747796405u + 2891336453u;\n    uint result = ((seed >> ((seed >> 28) + 4U)) ^ seed) * 277803737u;\n    result = (result >> 22) ^ result;\n    return float(result) / 4294967295.0;\n}\n\n// Ray structure\nstruct Ray {\n    vec3 origin;\n    vec3 dir;\n};\n\n// Material structure\nstruct Material {\n    vec3 color;\n    vec3 emissionColor;\n    float emissionStrength;\n};\n\n// Sphere structure\nstruct Sphere {\n    vec3 position;\n    float radius;\n};\n\n// Structure to hold hit information\nstruct HitInfo {\n    bool didHit;\n    float dst;\n    vec3 hitPoint;\n    vec3 normal;\n    Material material;\n};\n\n// Function to check ray-sphere intersection\nHitInfo RaySphere(Ray ray, vec3 sphereCenter, float sphereRadius) {\n    HitInfo hitInfo;\n    vec3 offsetRayOrigin = ray.origin - sphereCenter;\n\n    float a = dot(ray.dir, ray.dir);\n    float b = 2. * dot(offsetRayOrigin, ray.dir);\n    float c = dot(offsetRayOrigin, offsetRayOrigin) - sphereRadius * sphereRadius;\n    float discriminant = b * b - 4. * a * c;\n\n    if (discriminant >= 0.) {\n        float dst = (-b - sqrt(discriminant)) / (2. * a);\n\n        if (dst >= 0.) {\n            hitInfo.didHit = true;\n            hitInfo.dst = dst;\n            hitInfo.hitPoint = ray.origin + ray.dir * dst;\n            hitInfo.normal = normalize(hitInfo.hitPoint - sphereCenter);\n        }\n    }\n\n    return hitInfo;\n}\n\n// Function to check ray-sphere intersections for a scene\nHitInfo Scene(Ray ray) {\n    HitInfo closestHit;\n    closestHit.dst = 1e8;\n\n    HitInfo hitInfo;\n\n    // Call RaySphere for each sphere in the scene\n    hitInfo = RaySphere(ray, vec3(10., 5., 9.), 3.);\n    if (hitInfo.didHit && hitInfo.dst < closestHit.dst) {\n        closestHit = hitInfo;\n        closestHit.material = Material(vec3(0., -150., 0.), vec3(1.), 14.); // Green Sphere (Light)\n    }\n\n    hitInfo = RaySphere(ray, vec3(1., 0.3, 0.), 0.5);\n    if (hitInfo.didHit && hitInfo.dst < closestHit.dst) {\n        closestHit = hitInfo;\n        closestHit.material = Material(vec3(0., 0., 1.), vec3(0.), 0.);  // Blue Sphere\n    }\n    \n    hitInfo = RaySphere(ray, vec3(-1., -1., -2.), 1.);\n    if (hitInfo.didHit && hitInfo.dst < closestHit.dst) {\n        closestHit = hitInfo;\n        closestHit.material = Material(vec3(0.1, 0.1, 1), vec3(0.), 0.); // Light purple sphere\n    }\n    \n    hitInfo = RaySphere(ray, vec3(0.3, -0.3, -0.5), 0.25);\n    if (hitInfo.didHit && hitInfo.dst < closestHit.dst) {\n        closestHit = hitInfo;\n        closestHit.material = Material(vec3(75/255, 255/255 , 100/255), vec3(0.), 0.); //light green Green Sphere\n    }\n    \n    hitInfo = RaySphere(ray, vec3(0.25, -1., -1.35), 0.35);\n    if (hitInfo.didHit && hitInfo.dst < closestHit.dst) {\n        closestHit = hitInfo;\n        closestHit.material = Material(vec3(255./255.,0. ,115./255. ), vec3(0.), 0.); // pink sphere\n    }\n    \n\n    return closestHit;\n}\nvec3 randomDirection()\n{\nfloat x = random();\nfloat y = random();\nfloat z = random();\nreturn normalize(vec3(x, y, z));\n}\nvec3 randomHemisphereDirection(vec3 normal)\n{\nvec3 dir = randomDirection();\nreturn dir * sign(dot(normal, dir));\n}\nvec3 GetEnvironmentLight(HitInfo hitinfo)\n{\nvec3 bottom = vec3(105./255.);\nvec3 top = vec3(112./255.,128./255.,144./255.);\nif((hitinfo.hitPoint.y) < iResolution.y)\n{\nreturn bottom;\n}\nelse\n{\nreturn top;\n}\n}\nvec3 Trace(Ray ray)\n{\n    vec3 rayColor = vec3(1.);\n    \n    vec3 incomingLight = vec3(0.);\nfor(int i = 0; i<maxBounceCount; i++)\n{\n    \n    HitInfo hitinfo = Scene(ray);\n    \n    if(hitinfo.didHit) {\n \n        ray.origin = hitinfo.hitPoint;\n        ray.dir = randomHemisphereDirection(hitinfo.normal);\n        Material material = hitinfo.material;\n        vec3 emittedLight = material.emissionColor * material.emissionStrength;\n        float lightStrength = dot(hitinfo.normal, ray.dir);\n        incomingLight += emittedLight * rayColor;\n        rayColor *= material.color * lightStrength *2.;\n                       }\nelse {\n    incomingLight += GetEnvironmentLight(hitinfo) * rayColor;\n    break;\n    }\n}\nreturn incomingLight;\n}\n// Main function for rendering\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Initialize ray and seed\n    Ray ray;\n    ray.origin = vec3(0, 0.5, 5);\n    seed = floatBitsToUint(texture(iChannel0, fragCoord / iResolution.xy).x + iTime);\n\n    // Generate a random offset\n    vec2 of = -0.5 + vec2(random(), random());\n\n    // Calculate the pixel position in normalized device coordinates\n    vec2 p = (2.0 * (fragCoord + of) - iResolution.xy) / iResolution.y;\n\n    // Calculate the direction from the camera to the view point\n    vec3 viewPoint = vec3(p, 1.);\n    ray.dir = normalize(viewPoint - ray.origin);\n    vec3 totalIncomingLight;\n    for (int rayIndex = 0; rayIndex < int(raysPerPixel); rayIndex++)\n    {\n    totalIncomingLight += Trace(ray);\n    }\n    vec3 pixelCol = totalIncomingLight / raysPerPixel;\n    // Set the pixel color based on the material color from the scene\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 old = texture(iChannel1,uv);\n    vec4 new = vec4(pixelCol, 1.);\n    float weight = 1.0/(float(iFrame) + 1.);\n    vec4 accumulatedAverage = old * (1. - weight) + new * weight;\n    fragColor = vec4(accumulatedAverage);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}