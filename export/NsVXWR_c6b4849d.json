{"ver":"0.1","info":{"id":"NsVXWR","date":"1634482054","viewed":117,"name":"Depth Tiles","username":"spalmer","description":"experimenting with basic cone tracing one depth lod to hopefully accelerate overall ray marching significantly.\n","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["cone","lod","depth","march","trace"],"hasliked":0,"parentid":"ss3SW8","parentname":"Depth Mips"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// experiment in depth cone tracing lod mipmaps\n// the idea is to move the brunt of the looping\n// into one low-resolution 8x8 tiled lod, saving total work.\n\n#define ch iChannel0\n\nvoid image(inout vec4 o, vec2 p)\n{\n    vec2 r = iResolution.xy;\n    // you can see even in fullscreen that this is still fairly efficient\n    vec3 pos = camPos(iTime);\n    mat3 ori = camOri(iTime);\n  #if 1\n    // march highest detail using low-detail BufferA as hint to save steps\n    float d0 = depth(ch, r, iTime, min(iFrame, 0) + STEPS, p, 0, 3, .5, 1., pos, ori);\n  #else\n    // highest detail without any acceleration, \n    // doesn't use Buffer A :(  for perf comparison\n    float d0 = depth(ch, r, iTime, min(iFrame, 0) + STEPS+STEPS, p, 0, 0, .0, 1., pos, ori);\n  #endif\n    o += vec4(vec3(d0),1);\n    return;\n}\n\n#define LOD(p, n) vec4(pow(texelFetch(ch, ivec2(p*exp2(-n)), 0).x, .9-.5),0,0,1)\n\n\nvoid mainImage(out vec4 o, vec2 p)\n{\n    vec2 r = iResolution.xy;\n    o = vec4(0);\n    for (float j = 1.; (j -= 1./float(AA)) > 0.; ) // supersample antialias mostly to stress perf\n        image(o, p + sqrt(j) * sin(j * 10.16641 - vec2(0,11))); // vogel disc\n    o /= o.w;\n   #if 0\n    // blend low detail over\n    o = mix(o, LOD(p,3.), .4);\n    //if (o.x <= o.y) o = vec4(1,0,1,1); // detect errors where LOD depth > actual depth\n   #elif 0\n   // window to BufferA LOD around mouse position\n   if (iMouse.z > 0.)\n       o = mix(o, LOD(p,3.), exp2(-1e2 * max(0., distance(p,iMouse.xy) / r.y - .3)));\n   #elif 1\n    // low detail overlay in lower-left, best for unattended\n    if (all(lessThan(p, .5*r)))\n        o = LOD(p,2.);\n   #endif\n   o = sqrt(o); // gamma\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// overall quality\n#define STEPS 64\n// increase to really show difference in perf\n#define AA 8\n\n// crazy iq test scene from http://shadertoy.com/view/wlGcWG really needs more iterations than the others\nvec3 dSceneiq(vec3 p)\n{\n\tfloat scale = 1.;\n    float orb = 10000.;\n    for (int i=0; i<6; ++i)\n\t{\n\t\tp = -1. + 2.*fract(.5*p+.5);\n        p -= sign(p)*.04;\n        float r2 = dot(p,p);\n\t\tfloat k = .95/r2;\n\t\tp     *= k;\n\t\tscale *= k;\n        orb = min(orb, r2);\n\t}\n    float d1 = sqrt(min(min(dot(p.xy,p.xy), dot(p.yz,p.yz)), dot(p.zx,p.zx))) - .02;\n    float d2 = abs(p.y);\n    float dmi = d2;\n    float adr = .7*floor((.5*p.y+.5)*8.);\n    if (d1<d2) \n    {\n        dmi = d1;\n        adr = 0.;\n    }\n    return vec3(.5*dmi/scale, adr, orb);\n}\n\n#if 1\n// neat test scene by jt from http://shadertoy.com/view/ddsGz2\n\n/*\nMIT License, as in http://shadertoy.com/terms\nCopyright (c) 2022 Jakob Thomsen\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\nfloat column(vec2 p, float s)\n{\n    p = abs(p);\n    float t = 1. - s;\n    return s-length(vec2(min(p.x,s)-s,max(t,p.y)-t))+min(max(0.,p.x-s), max(0.,1.-p.y-s));\n}\n\nfloat reservoirjt(vec3 p)\n{\n    p = mod(p+vec3(0,0,1),2.)-1.; // repeat\n    return column(vec2(length(p.xy), p.z), .5)-.1;\n}\n#endif\n\nfloat dScene(vec3 q)\n{\n//    return dSceneiq(q + 1.).x;\n    return reservoirjt(q.xzy);\n// thanks blackle!  http://shadertoy.com/view/WtByzV\n    return min(.5 - abs(q.y), length(.5 - fract(q.xz)) - .1);\n//    return min(.5 - abs(q.y), length(.5 - vec3(fract(q.xz),abs(q.y)).xzy) - .4); // slightly different\n}\n\n// sa = blah blah something about sine of angle // sqrt(max(0., 1.-ca*ca)), \nfloat march(vec3 o, vec3 d, float t, float e, float sa, int iter)\n{\n    float h = 9e9;\n    for (int i = iter; i-- > 0 && t < e && abs(h) > t * sa; ) {\n        h = dScene(t * d + o);\n        t += .9 * h;\n    }\n    return t;\n}\n// TODO for debugging I want to count how many total iterations (in all contributing LODs)\n// went to computing this pixel, so can get an idea of work saved by lods.\n\n// why not hard-code tile size 8x8 here, why taking arbitrary lod?\n// making toy more complicated than need be.\n\nfloat depth(sampler2D inch, vec2 r, float time, int steps, vec2 p,\n    int lod, int lod2, float gi, float go, vec3 o, mat3 O)\n{\n    vec2 rl = ceil(r / float(1<<lod))\n    , rp = p / float(1<<lod2);\n    if (any(lessThan(rl, p))) discard; //return 0.;\n    vec3 d = normalize(O * vec3(p - .5*rl, rl.y));\n    float t = 0., pixelsin = 1.2/rl.y; // use size of pixel at this lod\n    if (gi > 0.)\n        t = pow(texelFetch(inch, ivec2(rp), 0).x, -1./gi);\n    t = march(o, d, t, 1e2, pixelsin, steps);\n    return pow(t, -go);\n}\n\n// for using sin intrinsic as a spinor producer e^(i * a) = sin(R + a) where a is angle in radians, i is imaginary unit i*i=-1\n//const vec2 R = vec2(0, .5*acos(-1.)); // acos(-1)=pi\nconst vec2 R = vec2(0, acos(0.)); // acos(0)=pi/2\n\nvec3 camPos(float time)\n{\n    return vec3(.3 * sin(R + .06*time) + .2 * sin(R + .13*time),.3*sin(.1*time));\n}\n\nmat3 camOri(float time)\n{\n    vec3 r = vec3(sin(R + .3*sin(.21*time)), 0);\n    return mat3(r.yxz, r.xyz * vec3(1,-1,1), vec3(0,0,1)); // roll\n    //return mat3(1);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 o, vec2 p)\n{\n    //if (iFrame == 0) { o = vec4(1); return; }\n    o = vec4(depth(iChannel0, iResolution.xy, iTime, min(iFrame, 0) + STEPS, p, 3, 3, .0, .5,\n        camPos(iTime), camOri(iTime)));\n}","name":"Buffer A","description":"","type":"buffer"}]}