{"ver":"0.1","info":{"id":"cddSRM","date":"1679579218","viewed":417,"name":"ðŸŽ¶ neon lights tunnel","username":"wj","description":"The result of playing with mrange's \"Electric Eel Universe\" - to create something audio reactive.\n\nalso see http://www.wothke.ch/playmod/index.php?file=/$Emulator%20Tests/MODLAND/Delitracker%20Custom/-%20unknown/hqc%20intro.cus&emulator=UADE&tab=fx&fxid=8","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["audioreactive"],"hasliked":0,"parentid":"cdV3DW","parentname":"Electric Eel Universe"},"renderpass":[{"inputs":[{"id":"4dfGzn","filepath":"/media/a/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3","previewfilepath":"/media/ap/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"neon lights tunnel\" by wj\n// based on: mrange's \"Electric Eel Universe\": https://www.shadertoy.com/view/cdV3DW\n// license: CC-BY-NC-SA\n\n#define PI              3.141592654\n#define TAU             (2.0*PI)\n#define TIME            iTime\n#define RESOLUTION      iResolution\n#define ROT(a)          mat2(cos(a), sin(a), -sin(a), cos(a))\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(float co) {\n  return fract(sin(co*12.9898) * 13758.5453);\n}\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nfloat mod1(inout float p, float size) {\n  float halfsize = size*0.5;\n  float c = floor((p + halfsize)/size);\n  p = mod(p + halfsize, size) - halfsize;\n  return c;\n}\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/intersectors/intersectors.htm\n// infinite cylinder defined by a base point cb, a normalized axis ca and a radious cr\nvec2 rayCylinder(vec3 ro, vec3 rd, vec3 cb, vec3 ca, float cr) {\n  vec3  oc = ro - cb;\n  float card = dot(ca,rd);\n  float caoc = dot(ca,oc);\n  float a = 1.0 - card*card;\n  float b = dot( oc, rd) - caoc*card;\n  float c = dot( oc, oc) - caoc*caoc - cr*cr;\n  float h = b*b - a*c;\n  if( h<0.0 ) return vec2(-1.0); //no intersection\n  h = sqrt(h);\n  return vec2(-b-h,-b+h)/a;\n}\n\n// License: Unknown, author: Unknown, found: shadertoy somewhere, don't remember where\nfloat dfcos(float x) {\n  return sqrt(x*x+1.0)*0.8-1.8;\n}\n\n// License: Unknown, author: Unknown, found: shadertoy somewhere, don't remember where\nfloat dfcos(vec2 p, float freq) {\n  float x = p.x;\n  float y = p.y;\n  x *= freq;\n    \n  float x1 = abs(mod(x+PI,TAU)-PI);\n  float x2 = abs(mod(x   ,TAU)-PI);\n    \n  float a = 0.18*freq;\n    \n  x1 /= max( y*a+1.0-a,1.0);\n  x2 /= max(-y*a+1.0-a,1.0);\n  return (mix(-dfcos(x2)-1.0,dfcos(x1)+1.0,clamp(y*0.5+0.5,0.0,1.0)))/max(freq*0.8,1.0)+max(abs(y)-1.0,0.0)*sign(y);\n}\n\nvec3 skyColor(vec3 ro, vec3 rd) {\n  const vec3 l = normalize(vec3(0.0, 0., -1.0));\n\n// vec3 baseCol = HSV2RGB(vec3(0.96, 0.95, .0025));\n\n    float vu = texture( iChannel0, vec2(.0, 0.01)).x ;\n    vec3 baseCol = HSV2RGB(vec3(vu*1.83, 0.95, .0025));   // cycle hue\n    baseCol *= vu;                                        // adapt size\n      \n  return baseCol/(1.00001+dot(rd, l));\n}\n\nvec3 color(vec3 ww, vec3 uu, vec3 vv, vec3 ro, vec2 p) {\n  const float rdd = 2.0;\n  const float mm = 4.0;\n  const float rep = 27.0;\n\n  vec3 rd = normalize(-p.x*uu + p.y*vv + rdd*ww);\n  \n  // \"sky\" also creates the sun in the center\n  vec3 skyCol = skyColor(ro, rd);\n\n// rotation speed\n  rd.yx *= ROT(.1*TIME);\n    \n\n  vec3 col = skyCol;\n\n  // I read somewhere that if you call atan in a shader you got no business writing shader code.\n  //  I even call it in a loop :)\n  float a = atan(rd.y, rd.x);\n  \n  for(float i = 0.0; i < mm; ++i) {\n  \n    float ma = a;\n    float sz = rep+i*6.0;\n    float slices = TAU/sz; \n    float na = mod1(ma, slices);\n\n    float h1 = hash(na+13.0*i+123.4);   // number of \"eels\" (lower is more)\n    float h2 = fract(h1*3677.0);        // color sequence/freq on eel\n    float h3 = fract(h1*8677.0);\n\n    float tr = mix(0.5, 3.0, h1);       // parallax effect (\"layer\" distance)\n    \n\n    // cylinder: base point ro, a normalized axis ca and a radius tr\n    vec2 tc = rayCylinder(ro, rd, ro, vec3(0.0, 0.0, 1.0), tr);\n    \n    \n    \n    vec3 tcp = ro + tc.y*rd;// wave freq\n\n    if (i == 2.) tcp *= 2.;// added: smaller blocks\n\n    \n    vec2 tcp2 = vec2(tcp.z, atan(tcp.y, tcp.x));\n  \n    float zz = mix(0.025, 0.05, sqrt(h1))*rep/sz;\n    float tnpy = mod1(tcp2.y, slices);\n    float fo = smoothstep(0.5*slices, 0.25*slices, abs(tcp2.y));\n    \n    // wiggle speed\n//    tcp2.x += -h2*TIME;\n    tcp2.x += -h2*TIME * 3.;\n\n\n    tcp2.y *= tr*PI/4.0;// width of the eels\n    \n     float vu2 = (i == 3.0) ? 0.8 - ((texture( iChannel0, vec2(.0, 0.8)).x ))*0.7 : 1.;\n     tcp2.y*= vu2;\n\n    \n    tcp2/=zz;\n    float d = dfcos(tcp2, 2.0*zz);   // wiggle freq\n//    float d = tcp2.y;              // straight rays instead of wiggles\n    d = abs(d);\n    \n    \n    float vu3 = (i == 2.0) ? 0.3 - ((texture( iChannel0, vec2(.0, 0.3)).x ))*.5 : 1.;\n    d *= zz*vu3;// \"smaller\" -> blur more\n\n    vec3 bcol = (1.0+cos(vec3(0.0, 1.0, 2.0)+TAU*h3+0.5*h2*h2*tcp.z))*0.00005;\n    bcol /= max(d*d, 0.000+5E-7*tc.y*tc.y);\n    \n    \n    bcol *= exp(-0.04*tc.y*tc.y);    \n//    bcol *= smoothstep(-0.5, 1.0, sin(mix(0.125, 1.0, h2)*tcp.z) );\n    bcol *= smoothstep(-1.0, 2.0, sin(mix(0.125, 1.0, h2)*tcp.z) );\n \n    float dz = (i == 1.0) ? texture( iChannel0, vec2(.0, 0.1)).x * 5.0 : 0.0; // displace \"eel\"\n    bcol *= smoothstep(-0.5, 1.0, sin(mix(0.125, 1.0, h2*6.)*(tcp.z + dz)));\n\n    bcol *= fo;// not much difference\n\n    col += bcol;\n  }\n\n  return col;\n}\n\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nvec3 sRGB(vec3 t) {\n  return mix(1.055*pow(t, vec3(1./2.4)) - 0.055, 12.92*t, step(t, vec3(0.0031308)));\n}\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\nvec3 effect(vec2 p, vec2 pp) {\n  float tm = 1.5*TIME+12.3;\n  \n  vec3 ro   = vec3(0.0, 0.0, tm);// zoom speed\n  vec3 dro  = normalize(vec3(0., 0.0, 3.0));\n  \n  tm*=5.; // added: move \"sun\" faster\n  \n  dro.xz *= ROT(0.2*sin(0.05*tm));\n  dro.yz *= ROT(0.2*sin(0.05*tm*sqrt(0.5)));\n  \n  const vec3 up = vec3(0.0,1.0,0.0);\n  vec3 ww = normalize(dro);\n  vec3 uu = normalize(cross(up, ww));\n  vec3 vv = (cross(ww, uu));\n  vec3 col = color(ww, uu, vv, ro, p);\n  \n  col -= 0.125*vec3(0.0, 1.0, 2.0).yzx*length(pp);\n  \n  col = aces_approx(col);\n  col = sRGB(col);\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n\n  vec3 col = effect(p, pp);\n  fragColor = vec4(col, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}