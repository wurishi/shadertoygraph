{"ver":"0.1","info":{"id":"7slXD2","date":"1619295954","viewed":173,"name":"Line Abbreation","username":"reaxt","description":"Another new daily!\nmess around with the values in main function for fun","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["basic","beginner","glitch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535897932384626433832795\n\nfloat exponentialOut(float t) {\n  return t == 1.0 ? t : 1.0 - pow(2.0, -10.0 * t);\n}\n\nfloat quadraticInOut(float t) {\n  float p = 2.0 * t * t;\n  return t < 0.5 ? p : -p + (4.0 * t) - 1.0;\n}\nfloat rand(vec2 c){\n\treturn fract(sin(dot(c.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat cubicInOut(float t) {\n  return t < 0.5\n    ? 4.0 * t * t * t\n    : 0.5 * pow(2.0 * t - 2.0, 3.0) + 1.0;\n}\n\n\nfloat noise1(vec2 p, float freq ){\n\tfloat unit = iResolution.x/freq;\n\tvec2 ij = floor(p/unit);\n\tvec2 xy = mod(p,unit)/unit;\n\t//xy = 3.*xy*xy-2.*xy*xy*xy;\n\txy = .5*(1.-cos(PI*xy));\n\tfloat a = rand((ij+vec2(0.,0.)));\n\tfloat b = rand((ij+vec2(1.,0.)));\n\tfloat c = rand((ij+vec2(0.,1.)));\n\tfloat d = rand((ij+vec2(1.,1.)));\n\tfloat x1 = mix(a, b, xy.x);\n\tfloat x2 = mix(c, d, xy.x);\n\treturn mix(x1, x2, xy.y);\n}\n\nfloat pNoise1(vec2 p, int res){\n\tfloat persistance = .5;\n\tfloat n = 0.;\n\tfloat normK = 0.;\n\tfloat f = 4.;\n\tfloat amp = 1.;\n\tint iCount = 0;\n\tfor (int i = 0; i<50; i++){\n\t\tn+=amp*noise1(p, f);\n\t\tf*=2.;\n\t\tnormK+=amp;\n\t\tamp*=persistance;\n\t\tif (iCount == res) break;\n\t\tiCount++;\n\t}\n\tfloat nf = n/normK;\n\treturn nf*nf*nf*nf;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    float divAmount = 0.05;\n    float timeDivision = 3.;\n    float pulseDistance = 0.4;\n    float noiseMultiplier = 1.2;\n    float blend = 0.75;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 ruv = uv;\n    vec2 buv = uv;\n\n    //video\n    bool black = false;\n\n    \n    //make pulse move\n    float h = mod(iTime/timeDivision, pulseDistance);\n    h = abs((h*2.)-pulseDistance);\n    float pulseAmount = cubicInOut(h);\n    //\n    float noiseAmount = pulseAmount*noiseMultiplier;\n    pulseAmount += mod(rand(vec2(uv.x, iTime)), noiseAmount);\n\n    vec4 video = texture(iChannel0, uv);\n    float point = mod(uv.y, (divAmount * 2.));\n    if(point > divAmount) {\n        ruv.x += pulseAmount;\n        buv.x -= pulseAmount;\n        if(1. < uv.x) {\n            black = true;\n        }\n    } else {\n        ruv.x -= pulseAmount;\n        buv.x += pulseAmount;\n        if(0. > uv.x) {\n            black = true;\n        }\n\n    }\n    \n    vec4 video2 = texture(iChannel0, uv);\n    if(black) {\n        video2 = vec4(0.,0.,0.,0.);\n    }\n    video2.x = texture(iChannel0, ruv).x;\n    video2.y = texture(iChannel0, buv).y;\n \n    // Output to screen\n    fragColor = mix(video, video2, blend);\n}","name":"Image","description":"","type":"image"}]}