{"ver":"0.1","info":{"id":"mdt3z7","date":"1677105401","viewed":94,"name":"Moire Acid","username":"Mojomajor","description":"accidental macrodose üòµ‚Äçüí´","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","fbm","moire"],"hasliked":0,"parentid":"md2SWz","parentname":"moire fractal test"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define time iTime*1.\n\nfloat noise(vec2 st){\n    return fract(sin(dot(vec2(12.23,74.343),st))*43254.);  \n}\n\n#define pi acos(-1.)\nfloat noise2D(vec2 st){\n  \n  //id,fract\n  vec2 id =floor(st);\n  vec2 f = fract(st);\n  \n  //nachbarn\n  float a = noise(id);\n  float b = noise(id + vec2(1.,0.));\n  float c = noise(id + vec2(0.,1.));\n  float d = noise(id + vec2(1.));\n  \n  \n  //f\n  f = smoothstep(0.,1.,f);\n  \n  //mix\n  float ab = mix(a,b,f.x);\n  float cd = mix(c,d,f.x);\n  return mix(ab,cd,f.y);\n}\n\nmat2 rot45 = mat2(0.707,-0.707,0.707,0.707);\n\nmat2 rot(float a){\n  float s = sin(a); float c = cos(a);\n  return mat2(c,-s,s,c);\n}\nfloat fbm(vec2 st, float N, float rt){\n    st*=3.;\n \n  float s = .5;\n  float ret = 0.;\n  for(float i = 0.; i < N; i++){\n     \n      ret += noise2D(st)*s; st *= 2.9; s/=2.; st *= rot((pi*(i+1.)/N)+rt*8.);\n      st.x += iTime/10.;\n  }\n  return ret;\n  \n}\n#define tau 6.2831\nvec2 hash( vec2 p )\n{\n    //p = mod(p, 4.0); // tile\n    p = vec2(dot(p,vec2(127.1,311.7)),\n             dot(p,vec2(269.5,183.3)));\n    \n    return fract(sin(p)*18.5453);\n}\n\n// return distance, and cell id\nvec2 voronoi( in vec2 x )\n{\n    vec2 n = floor( x );\n    vec2 f = fract( x );\n\n\tvec3 m = vec3( 8.0 );\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2  g = vec2( float(i), float(j) );\n        vec2  o = hash( n + g );\n      //vec2  r = g - f + o;\n\t    vec2  r = g - f + (0.5+0.5*sin(time+tau*o));\n\t\tfloat d = dot( r, r );\n        if( d<m.x )\n            m = vec3( d, o );\n    }\n\n    return vec2( sqrt(m.x), m.y+m.z );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n// calculate screen coordinates\nvec2 uv = fragCoord.xy / iResolution.xy;\nuv -= 0.5;\nuv.x *= iResolution.x / iResolution.y;\nuv*=.9;\n// calculate moire pattern\nvec2 moire = vec2(length(uv), atan(uv.x, uv.y));\n;\n\nfloat zeroToOne = sin(time/30.)*0.5+0.5;\n\n// calculate fractal geometry\nfloat fractal = 0.0;\nfloat fbmm=fbm(uv,5.,15.*moire.y/10000.*zeroToOne);\nfloat vor = voronoi(uv).x;\nfor(int i = 5; i < 70; i++)\n{\n    fractal += .25/fbmm * abs(sin(moire.x * 5.0 + time))*vor;\n}\n\n// calculate psychedelic colors\nvec3 color = vec3(0.0, 0.0, 0.0);\ncolor += vec3(1.0, 0.5, 0.0) * sin(moire.y * 12.0 + fractal);\ncolor += vec3(0.0, 1.0, 0.5) * cos(moire.x * 24.0 + fractal);\ncolor += vec3(0.5, 0.0, 1.0) * sin(moire.y * 24.0 + fractal);\n\n // vignette\n uv = fragCoord.xy / iResolution.xy;\n uv *=  1.0 - uv.yx;   //vec2(1.0)- uv.yx; -> 1.-u.yx; Thanks FabriceNeyret !\n\n    float zeroToOneFast = sin(time)*0.5+0.5;\n     uv*=0.3+zeroToOneFast;\n float vig = uv.x*uv.y * 20.; // multiply with sth for intensity\n    \n vig = pow(vig, 0.25); // change pow for modifying the extend of the  vignette\n\n  // output final color\n  fragColor = (vec4(color, 1.0)*vec4(vig));\n  //fragColor = vec4(vig);\n}","name":"Image","description":"","type":"image"}]}