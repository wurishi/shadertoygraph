{"ver":"0.1","info":{"id":"NsBSDh","date":"1623074376","viewed":149,"name":"feedback fern","username":"stduhpf","description":"using previous frame to create a recursive IFS. You can create a lot of different shapes by tweaking some parameters.","likes":19,"published":1,"flags":32,"usePreview":0,"tags":["ifs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = texture(iChannel0,uv).rgb;\n\n    fragColor = vec4(1.-col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const vec2 orig = vec2(.5,.1);\n\nconst vec2 lStem = vec2(0.,.1);\n\nconst float o0 = 1.;\n      float a0 = 1.075;\nconst vec2 scale0 = vec2(.9,.89);\n\nconst float o1 = .25;\nconst float a1 = .85;\nconst vec2 scale1 = vec2(.55,.25);\n\nconst float o2 = .5;\nconst float a2 = -.7;\nconst vec2 scale2 = vec2(.24,.25);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 col = vec3(0);\n\n\n    vec2 uv2 = uv;\n    \n    a0*=(cos(iTime*1.)*.5+.25*cos(iTime*1.0151324));\n    \n    vec2 m = iMouse.xy/iResolution.xy;\n    if(m.x<=0.)\n        m.x = .5+.05*sin(iTime*.5);\n    \n    a0 = ((m.x-.5)*acos(-1.));\n    mat2 rot0 = mat2(cos(a0),-sin(a0),sin(a0),cos(a0));  \n    uv2 = (uv-orig-lStem*o0)*rot0/scale0 + orig; \n    if(uv2 == fract(uv2))\n    col = max(col,texture(iChannel0,uv2).rgb);\n    \n    const mat2 rot1 = mat2(cos(a1),-sin(a1),sin(a1),cos(a1));  \n    uv2 = (uv-orig-lStem*o1)*rot1/scale1 + orig; \n    if(uv2 == fract(uv2))\n    col = max(col,texture(iChannel0,uv2).rgb);\n    \n    const mat2 rot2 = mat2(cos(a2),-sin(a2),sin(a2),cos(a2));  \n    uv2 = (uv-orig-lStem*o2)*rot2/scale2 + orig; \n    if(uv2 == fract(uv2))\n    col = max(col,texture(iChannel0,uv2).rgb);\n \n    vec2 pa = uv - orig, ba = lStem;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    vec3 stem = vec3(1.-smoothstep(.003,.003+1.5/iResolution.x,length( pa - ba*h )));\n    col = max(col,stem);\n    if(iFrame%40==0)\n    col*=vec3(1.,1.-stem.r,1.);\n    \n    \n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}