{"ver":"0.1","info":{"id":"NtlyDf","date":"1648826202","viewed":60,"name":"CGFS Ch 2","username":"mnopqr1","description":"Graphics programming from scratch, chapter 2\nAdapted from https://gabrielgambetta.com/computer-graphics-from-scratch/","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define INFTY 99999.99\n\n\nstruct Ray\n{\n    vec3 origin;\n    vec3 direction;\n};\n\nstruct Sphere\n{\n    vec3 center;\n    float radius;\n    vec3 color;\n};\n\n\nstruct Scene\n{\n    Sphere[3] spheres;\n    vec3 bgcolor;\n};\n\nfloat[2] intersectRaySphere(Ray ray, Sphere sphere) {\n    float[2] ts = float[2](INFTY,INFTY);\n    float r = sphere.radius;\n    vec3 CO = ray.origin - sphere.center;\n\n    float a = dot(ray.direction, ray.direction);\n    float b = 2.0f * dot(CO, ray.direction);\n    float c = dot(CO, CO) - r * r;\n\n    float D = b * b - 4.0f * a * c;\n    if (D < 0.0f) return ts;\n\n    ts[0] = (-b + sqrt(D)) / (2.0f * a);\n    ts[1] = (-b - sqrt(D)) / (2.0f * a);\n    \n    return ts;\n}\n\nvec3 traceRay(Scene scene, Ray ray, float t_min, float t_max) {\n    float closest_t = INFTY;\n    int closest_sphere_id = -1;\n    for (int i = 0; i < scene.spheres.length(); i++) {\n        float[2] ts = intersectRaySphere(ray, scene.spheres[i]);\n        for (int k = 0; k < 2; k++) {\n            if (t_min < ts[k] && ts[k] < t_max && ts[k] < closest_t) {\n                closest_t = ts[k];\n                closest_sphere_id = i;\n            }\n        }\n    }\n\n    if (closest_sphere_id == -1) {\n        return scene.bgcolor;\n    }\n\n    return scene.spheres[closest_sphere_id].color;\n}\n\nScene initScene() {\n    Sphere sp1 = Sphere(vec3(0,-1.0,3.0), 1.0f, vec3(1.0,0,0));\n    Sphere sp2 = Sphere(vec3(2.0,0,4.0), 1.0f, vec3(0,0,1.0));\n    Sphere sp3 = Sphere(vec3(-2.0,0,4.0), 1.0f, vec3(0,1.0,0));\n    return Scene(Sphere[3](sp1,sp2,sp3),\n               vec3(0.6824, 0.9647, 1.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -0.5 to 0.5)\n    vec2 uv = fragCoord/iResolution.xy - vec2(0.5);\n    \n    vec2 viewport = vec2((iResolution.x)/(iResolution.y), 1.0);\n    \n    vec3 abc = vec3(uv * viewport, 1.0);\n\n    Scene scene = initScene();\n\n    Ray ray = Ray(vec3(0,0,0), abc);\n    vec3 col = traceRay(scene, ray, 1.0f, INFTY);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}