{"ver":"0.1","info":{"id":"sdBGDc","date":"1618033345","viewed":61,"name":"SJT","username":"Lanyi","description":"Test","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float beehive = 1. - texture(iChannel0, fragCoord / iChannelResolution[0].xy).g;\n    float c1 = texture(iChannel1, fragCoord / iChannelResolution[1].xy).r;\n    float c2 = texture(iChannel2, fragCoord / iChannelResolution[2].xy).r;\n    \n    \n    float factor = (c1 + c2 * 2.);\n    float bee = beehive * pow(factor, 2.);\n    fragColor.xyz = vec3(0.1, 0.9, 1.) * min(1., c1 + bee);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\n\nThis is public domain. Do what you please with it :)\n\n*/\nconst float scale = 4.;\nconst float SIN60 = 0.86602540378443864676372317075294;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    // Aspect ratio\n    //float aspect = iResolution.x / iResolution.y;\n    \n    // Subpixel size\n    float sx = 1. / 4. / iResolution.x;\n    float sy = 1. / 4. / iResolution.x;\n    \n    // Color accum\n    vec4 color = vec4(0,0,0,1);\n    \n    // Oversample\n    for(int i = 0; i < 4; i++)\n    {\n        for(int j = 0; j < 4; j++)\n        {    \n            // Tex space\n            vec2 uv = fragCoord/iResolution.y;\n\n            // Subpixel offset\n            uv.x += sx * float(j);\n            uv.y += sy * float(i);\n            \n            // Correct\n            //uv.x *= aspect;\n            \n            // Overall scale\n            uv *= vec2(scale/SIN60,scale);\n\n            // Offset columns\n            uv.y += floor(uv.x) * 0.5;\n\n            // Tile, tex-space -> Tile space\n            vec2 q = mod(uv,1.);\n            q *= 2.;\n            q -= 1.0;\n            q *= vec2(1.1,1.2);\n            q = abs(q);\n\n            // Signed distance\n            float d = max((q.x*SIN60+q.y*0.5),q.y);\n\n            // Choose color\n            color += d > 1. ? vec4(1,0,0,1) : vec4(1,1,0,1);\n        }\n    }\n    \n    color *= (1./16.);\n    fragColor = color;\n} ","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float beehive = 1. - texture(iChannel0, fragCoord / iChannelResolution[0].xy).g;\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 square = vec2(min(iResolution.x, iResolution.y));\n    vec2 uv = fragCoord/square;\n    // uv = mod(uv, vec2(1.));\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    col.b = beehive;\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n    \n    \n    \n    vec2 coords = uv - vec2(0.5);\n    float speed = iTime / 5.;\n    \n    float diff = (mod(speed - length(coords), 1.)  - 0.5 ) * 2.;\n    fragColor.xyz = vec3(pow(diff, 16.) +  pow(max(-diff, .0), 2.) / 4.);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float beehive = 1. - texture(iChannel0, fragCoord / iChannelResolution[0].xy).g;\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 square = vec2(min(iResolution.x, iResolution.y));\n    vec2 uv = fragCoord/square;\n    // uv = mod(uv, vec2(1.));\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    col.b = beehive;\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n    \n    \n    \n    vec2 coords = uv - vec2(0.5);\n    float speed = iTime / 2.5;\n    \n    float diff = (mod(speed - 2. * length(coords), 1.)  - 0.5 ) * 2.;\n    fragColor.xyz = vec3(pow(diff, 16.) +  pow(max(-diff, .0), 2.) / 4.);\n}","name":"Buffer C","description":"","type":"buffer"}]}