{"ver":"0.1","info":{"id":"WtfXWl","date":"1564554279","viewed":72,"name":"my test sphere","username":"domorin","description":"sphere","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float circle(vec2 uv)\n{\n    return float(length(uv) <= 1.0);\n}\n\nvec3 normal(vec2 uv)\n{\n    return vec3(uv.x, uv.y, (1.0 - length(uv)) * 2.0);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));    \n    \n    \n    float x = 0.0 + sin(iTime) * 2.5;\n    float y = 2.5;\n    float z = 0.0 + cos(iTime) * 2.5;\n        \n    \n    \n    vec3 pixel_normal = normalize(normal(uv));\n    \n    vec3 light_source = normalize(vec3(x, y, z));\n    \n    float light = max(dot(pixel_normal, light_source), 0.0);\n    \n    \n\t//col *= light; \n    \n    col = mix(vec3(0.0, 0.0, 0.0), col, light * 1.25);\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0) * circle(uv);\n}","name":"Image","description":"","type":"image"}]}