{"ver":"0.1","info":{"id":"mtXXR4","date":"1674360233","viewed":118,"name":"S3 Painting","username":"mattdeeds","description":"The canvas represents a UV mapping of a sphere.  Click to draw a circle on the sphere.  The resulting shape on the canvas is not exactly a circle.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["paint","skysphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415927\n\nvec2 toThetaRho(in vec2 uv) {\n  return vec2(\n    (uv.x - 0.5) * 2.0 * PI,\n    (uv.y - 0.5) * 1.0 * PI);\n\n}\n\nvec3 toS3(in vec2 tr) {\n  return vec3(\n    cos(tr.y) * cos(tr.x),\n    sin(tr.y),\n    cos(tr.y) * sin(tr.x));\n}\n\n\nvec3 background(in vec3 xyz) {\n  vec3 sky = 0.5 + 0.5* xyz;\n  if (xyz.y < 0.0) {\n    float a = xyz.y + 0.1 * sin(xyz.y * 100.0);\n    return \n      mix(vec3(0.5, 0.5, 1.0), vec3(0.1, 0.3, 1.0), a)\n      + 0.5 * sky;\n  }\n  float h = 0.2 * (1.0 + sin(xyz.x * 12.0 + 64.0) * cos(xyz.z * 27.0 + 31.0));\n  if (xyz.y < h) {\n    float a = xyz.y + 0.01 * sin(xyz.y * 100.0);\n    return mix(vec3(0.3, 0.2, 0.1), vec3(1.0, 1.0, 1.0), 2.0 * a);\n  }\n  return sky;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 tr = toThetaRho(uv);\n    vec3 xyz = toS3(tr);\n    vec3 col = background(xyz);\n    \n    vec2 mxy = iMouse.xy / iResolution.xy;\n    if( iMouse.z <= 0.0 )  {\n      mxy = vec2(0.5 * sin(iTime) + 0.5, 0.5 * cos(iTime * 1.938) + 0.5);\n    }\n    vec3 mxyz = toS3(toThetaRho(mxy));\n    \n    \n    float d = length(mxyz - xyz);\n    float intensity = smoothstep(0.20, 0.125, d);\n    col = max(col, vec3(intensity));\n   \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}