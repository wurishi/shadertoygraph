{"ver":"0.1","info":{"id":"4lV3WW","date":"1474660684","viewed":177,"name":"Single distance-based stripe","username":"jdavid_1385","description":"A simple example of how to use distance functions to get simple gradient effects","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d","distance"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float DistToLine(vec2 pt1, vec2 pt2, vec2 testPt)\n{\n  vec2 lineDir = pt2 - pt1;\n  vec2 perpDir = vec2(lineDir.y, -lineDir.x);\n  vec2 dirToPt1 = pt1 - testPt;\n  return abs(dot(normalize(perpDir), dirToPt1));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy = fragCoord.xy / iResolution.xy;//Condensing this into one line\n    xy.y = 1.0 - xy.y;\n    fragColor = vec4(0.0,0.0,0.0,1.0);\n    // Get the distance to the line passing through the line x=y\n    fragColor.b = DistToLine(vec2(0.0, 0.0), vec2(1.0, 1.0), xy) * 2.0;\n}","name":"Image","description":"","type":"image"}]}