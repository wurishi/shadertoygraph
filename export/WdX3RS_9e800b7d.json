{"ver":"0.1","info":{"id":"WdX3RS","date":"1546614443","viewed":273,"name":"Doom Fire","username":"twitchingace","description":"Uncomment the first line to only update the effect every third frame.\nVaguely recreating the fire effect seen in DOOM. As described at: http://fabiensanglard.net/doom_fire_psx/","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["fire","demo","doom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 colours[37];\nvoid initColours(){\n    colours[0]  = vec3(0.03, 0.03, 0.03);\n    colours[1]  = vec3(0.12, 0.03, 0.03);\n    colours[2]  = vec3(0.18, 0.06, 0.03);    \n    colours[3]  = vec3(0.28, 0.06, 0.03);\n    colours[4]  = vec3(0.34, 0.09, 0.03);    \n    colours[5]  = vec3(0.40, 0.12, 0.03);    \n    colours[6]  = vec3(0.47, 0.12, 0.03);\n    colours[7]  = vec3(0.56, 0.15, 0.03);    \n    colours[8]  = vec3(0.62, 0.18, 0.03);\n    colours[9]  = vec3(0.69, 0.25, 0.03);    \n    colours[10] = vec3(0.75, 0.28, 0.03);\n    colours[11] = vec3(0.78, 0.28, 0.03);    \n    colours[12] = vec3(0.87, 0.31, 0.03);    \n    colours[13] = vec3(0.87, 0.34, 0.03);\n    colours[14] = vec3(0.87, 0.34, 0.03);\n    colours[15] = vec3(0.84, 0.37, 0.03);\n    colours[16] = vec3(0.84, 0.40, 0.06);\n    colours[17] = vec3(0.81, 0.44, 0.06);\n    colours[18] = vec3(0.81, 0.47, 0.06);\n    colours[19] = vec3(0.81, 0.50, 0.06);    \n    colours[20] = vec3(0.81, 0.53, 0.09);\n    colours[21] = vec3(0.78, 0.53, 0.09);    \n    colours[22] = vec3(0.78, 0.56, 0.09);    \n    colours[23] = vec3(0.78, 0.59, 0.12);\n    colours[24] = vec3(0.78, 0.59, 0.12);\n    colours[25] = vec3(0.75, 0.59, 0.12);\n    colours[26] = vec3(0.75, 0.59, 0.12);\n    colours[27] = vec3(0.75, 0.65, 0.15);\n    colours[28] = vec3(0.75, 0.65, 0.15);    \n    colours[29] = vec3(0.75, 0.69, 0.18);\n    colours[30] = vec3(0.72, 0.69, 0.18);    \n    colours[31] = vec3(0.72, 0.72, 0.18);\n    colours[32] = vec3(0.72, 0.72, 0.22);\n    colours[33] = vec3(0.81, 0.81, 0.44);\n    colours[34] = vec3(0.87, 0.87, 0.62);\n    colours[35] = vec3(0.94, 0.94, 0.78);\n    colours[36] = vec3(1.00, 1.00 , 1.00);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    initColours();\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n   \tvec3 col = colours[int(texture(iChannel0, uv).x / 2.)];\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//#define lowerFramerate\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat spreadColour(vec2 uv) {\n    int r = int(rand(vec2(cos(iTime * 1.4) * 5.4 + 1.5*uv.y, 1.3 * uv.x)) * 3.0);\n    int r2 = int(rand(vec2(sin(iTime * 2.2) + 0.4*uv.x, 1.3)) * 4.0) + 1;\n    \n    vec2 fireUV = uv - vec2(float(r2)/iResolution.x, 1./iResolution.y);\n\treturn max(0., texture(iChannel0, fireUV).x - (float(r)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    #ifdef lowerFramerate\n    if (mod(float(iFrame), 3.) != 0.) {\n        vec2 uv = fragCoord/iResolution.xy;\n        fragColor = texture(iChannel0, uv);\n    \treturn;\n    }\n    #endif\n\n    float x = mod(fragCoord.x, 5.);\n    fragCoord.x -= x;\n    float y = mod(fragCoord.y, 4.);\n    fragCoord.y -= y; \n    vec2 uv = fragCoord/iResolution.xy;\n    \n    \n    if (uv.y <= (1./iResolution.y)) {\n        fragColor = vec4(vec3(36.*2.), 1.0);\n    } else { \n        if (iFrame == 0) {\n        \tfragColor = vec4(vec3(0.),1.0);\n        } \n        else {\n            float val = spreadColour(uv);\n    \t\tfragColor = vec4(vec3(val),1.0);\n        }\n                \n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}