{"ver":"0.1","info":{"id":"Nt2XWK","date":"1628640993","viewed":91,"name":"FunLight","username":"SteelFlame","description":"Use mouse to drag light","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["light"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 lerp(vec4 a, vec4 b, float c) {\n    return a+(b-a)*c;\n}\nfloat lerp(float a, float b, float c) {\n    return a+(b-a)*c;\n}\n\nvec2 raySphereDst(vec2 position, float radius, vec2 rayOrigin, vec2 rayDirection, bool isTwoSide) {\n    vec2 delta = position-rayOrigin;\n    float b = 2. * dot(normalize(rayDirection),delta);\n    float c = dot(delta,delta)-radius*radius;\n\n    float D = b*b-4.*c;\n    if (D >= 0.) {\n        float t1 = (b-sqrt(D))/2.;\n        float t2 = (b+sqrt(D))/2.;\n        if (!isTwoSide)\n            if (t1 < 0. && t2 < 0.) return vec2(0,0);\n        return vec2((b-sqrt(D))/2.,(b+sqrt(D))/2.);\n    }\n    return vec2(0,0);\n}\nfloat rayLineDst(vec2 p1, vec2 p2, vec2 origin, vec2 direction, float thickness) {\n    vec2 lineNormal = normalize(vec2(p1.y-p2.y,p2.x-p1.x));\n    float t = dot(p1-origin,lineNormal)/dot(direction,lineNormal);\n    vec2 pos = origin+direction*t;\n    float alongLineT = dot(p1-pos,-normalize(p2-p1));\n    if (alongLineT < 0. || alongLineT > length(p2-p1)) return 0.;\n    return t;\n}\nvec4 getLight(float dst, vec2 lightPosition, vec2 uv, vec2 objectPosition) {\n    \n    vec2 directionToLight = normalize(lightPosition-uv);\n    if (dst > 0. && dst < length(lightPosition-uv)) {\n        //return vec4(0);\n        vec2 pointOnCircle = uv+directionToLight*dst;\n        vec2 normal = normalize(pointOnCircle-objectPosition);\n        float c = dot(normal,-directionToLight);\n        return lerp(vec4(.05/(length(lightPosition-uv))),vec4(0.),exp(c*c*.5)-1.);\n    } else {\n        return vec4(.05/(length(lightPosition-uv)));\n    }\n}\n\nvec2 lightPosition = vec2(0.5,0.5);\nvec2 position = vec2(0.4,0.4);\nfloat radius = 0.06;\n\nvec2 line[2];\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    line[0] = vec2(0.1,0.1);\n    line[1] = vec2(0.3,0.2);\n\n\n\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    lightPosition = iMouse.xy/iResolution.xy;\n\n    //radius = abs(sin(iTime*1.2))*.2;\n\n    vec2 directionToLight = normalize(lightPosition-uv);\n    vec2 dst = raySphereDst(position,radius,uv,directionToLight, false);\n    vec4 a = getLight(dst.x, lightPosition, uv, position);\n    \n    dst.x = rayLineDst(line[0],line[1],uv,directionToLight,1.);\n    //fragColor = getLight(dst.x, lightPosition, uv, (line[0]+line[1])/2.);\n    fragColor = a;\n    if (length(uv-position) < radius) {\n        fragColor = vec4(.709,.211,0.,1.);\n        fragColor /= length(uv-lightPosition)*4.;\n    }\n    \n}","name":"Image","description":"","type":"image"}]}