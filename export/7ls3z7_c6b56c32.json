{"ver":"0.1","info":{"id":"7ls3z7","date":"1621847998","viewed":628,"name":"Lenia 1 (simplest)","username":"Chakazul","description":"continuous cellular automata: Lenia\n- simplest version: single channel, single kernel with single ring\n- showing species: the Orbium\nhttps://chakazul.github.io/lenia.html","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["automata","life","cellular","continuous","artificial","lenia"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// modified from SmoothLife by davidar - https://www.shadertoy.com/view/Msy3RD\n\nconst float R = 15.;       // space resolution = kernel radius\nconst float T = 10.;       // time resolution = number of divisions per unit time\nconst float dt = 1./T;     // time step\nconst float mu = 0.14;     // growth center\nconst float sigma = 0.014; // growth width\nconst float rho = 0.5;     // kernel center\nconst float omega = 0.15;  // kernel width\n\nfloat bell(float x, float m, float s)\n{\n    return exp(-(x-m)*(x-m)/s/s/2.);  // bell-shaped curve\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n\n    float sum = 0.;\n    float total = 0.;\n    for (int x=-int(R); x<=int(R); x++)\n    for (int y=-int(R); y<=int(R); y++)\n    {\n        float r = sqrt(float(x*x + y*y)) / R;\n        vec2 txy = mod((fragCoord + vec2(x,y)) / iResolution.xy, 1.);\n        float val = texture(iChannel0, txy).r;\n        float weight = bell(r, rho, omega);\n        sum += val * weight;\n        total += weight;\n    }\n    float avg = sum / total;\n\n    float val = texture(iChannel0, uv).r;\n    float growth = bell(avg, mu, sigma) * 2. - 1.;\n    float c = clamp(val + dt * growth, 0., 1.);\n\n    if (iFrame < 1) // || iMouse.z > 0.\n        c = 0.013 + noise(fragCoord/R + mod(iDate.w,1.)*100.);\n    if (iMouse.z > 0.) {\n        float d = length((fragCoord.xy - iMouse.xy) / iResolution.xx);\n        if (d <= R/iResolution.x)\n        \tc = 0.02 + noise(fragCoord/R + mod(iDate.w,1.)*100.);\n    }\n\n    fragColor = vec4(c,c,c,1.);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// Noise simplex 2D by iq - https://www.shadertoy.com/view/Msf3WH\n\nvec2 hash( vec2 p )\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\n","name":"Common","description":"","type":"common"}]}