{"ver":"0.1","info":{"id":"DsjXDm","date":"1670408341","viewed":58,"name":"Waterlike Trip","username":"demensdeum","description":"Waterlike trip shader by ChatGPT","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["trip","chatgpt","waterlike"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Helper functions\n\n// Calculates the normal at a given UV coordinate\nfloat field(vec2 uv){\n    return texture(iChannel0, uv).r;\n}\n\nvec3 getNormal(vec2 uv) {\n    // Calculate the size of a single pixel in UV space\n    vec2 pix = vec2(1.0 / iResolution.x, 1.0 / iResolution.y);\n\n    // Sample the height field at the current UV coordinate and its neighboring pixels\n    float center = field(uv);\n    float left = field(uv - pix.xy);\n    float right = field(uv + pix.xy);\n    float bottom = field(uv - pix.yx);\n    float top = field(uv + pix.yx);\n\n    // Calculate the normal by taking the cross product of the vectors pointing to the left and top neighboring pixels\n    return normalize(cross(vec3(pix.x, 0.0, left - center), vec3(0.0, pix.y, top - center)));\n}\n\n// Calculates the reflection vector\nvec3 getReflection(vec3 I, vec3 N)\n{\n    return reflect(I, N);\n}\n\n// Main function\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Calculate UV coordinates\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    // Calculate wave displacement\n    float displacement = sin(uv.x * 20.0 + iTime) * 0.1;\n\n    // Calculate wave distortion\n    vec2 distortedUV = uv + vec2(displacement, 0.0);\n\n    // Sample texture\n    vec3 tex = texture(iChannel0, distortedUV).rgb;\n\n    // Calculate normal\n    vec3 normal = getNormal(distortedUV);\n\n    // Calculate lighting\n    vec3 light = vec3(0.0, 0.0, 1.0) * max(dot(normal, vec3(0.0, 0.0, 1.0)), 0.0);\n\n    // Calculate reflection\n    vec3 reflection = getReflection(normalize(vec3(0.0, 0.0, 1.0)), normal);\n\n    // Calculate final color\n    vec3 color = tex + light + reflection * 0.5;\n\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}