{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"texture","id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"code":"//Reference\n//https://www.youtube.com/watch?v=GTIwxin62FU\n\n// Grab from https://www.shadertoy.com/view/4djSRW\n#define MOD3 vec3(.1031,.11369,.13787)\n#define INTERVAL 3.\n#define FAC max(pow(mod(iTime, INTERVAL) / INTERVAL, 10.)-0.1, 0.)\n#define SEED hash(floor(iTime/INTERVAL))\n#define RADIUS 0.5\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\n\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return -1.0 + 2.0 * fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\n\nfloat simplex_noise(vec3 p)\n{\n    const float K1 = 0.333333333;\n    const float K2 = 0.166666667;\n    \n    vec3 i = floor(p + (p.x + p.y + p.z) * K1);\n    vec3 d0 = p - (i - (i.x + i.y + i.z) * K2);\n    \n    // thx nikita: https://www.shadertoy.com/view/XsX3zB\n    vec3 e = step(vec3(0.0), d0 - d0.yzx);\n\tvec3 i1 = e * (1.0 - e.zxy);\n\tvec3 i2 = 1.0 - e.zxy * (1.0 - e);\n    \n    vec3 d1 = d0 - (i1 - 1.0 * K2);\n    vec3 d2 = d0 - (i2 - 2.0 * K2);\n    vec3 d3 = d0 - (1.0 - 3.0 * K2);\n    \n    vec4 h = max(0.6 - vec4(dot(d0, d0), dot(d1, d1), dot(d2, d2), dot(d3, d3)), 0.0);\n    vec4 n = h * h * h * h * vec4(dot(d0, hash33(i)), dot(d1, hash33(i + i1)), dot(d2, hash33(i + i2)), dot(d3, hash33(i + 1.0)));\n    \n    return dot(vec4(31.316), n);\n}\n\nvec2 noise( in vec3 x )\n{\n    return vec2( simplex_noise(x), simplex_noise(x+vec3(1.0)) );\n}\n\nvec2 fbm (in vec3 x){\n  vec2 r;\n  for(int i=0; i<4; i++){\n    r += noise(x).xy/pow(2.,float(i));\n    x *= 2.0;\n  }\n  return r;\n}\n\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\nvec2 hash21(float p) {\n    vec3 p3 = fract(vec3(p) * HASHSCALE3);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract(vec2((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y));\n}\n\nvec3 hash31(float p) {\n\tvec3 h = vec3(127.231,491.7,718.423) * p;\t\n    return fract(sin(h)*435.543);\n}\n\nfloat hash( float n ) {\n    return fract(sin(n)*43758.5453123);\n}\n\n\n\nfloat map(vec2 p, float fac, float seed){\n  float d = sdCircle( p,  RADIUS );\n  for(int i=0; i<10; i++){\n    vec3 h = hash31(float(i)+seed);\n    vec2 off = (h.xy-0.5)*10.;\n    float d2 = sdCircle( p+off*0.1, (1.+0.4)*h.z*fac);\n    d = max(-d2, d);\n  }\n  return d;\n}\n\n//main\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  //normalize pixel coordinates\n  vec2 uv         = fragCoord / iResolution.yy;\n  vec2 p = uv*2.0-1.0;\n  float div = 2.;\n  uv.y += sin(iTime*0.5+floor(uv*div).x)*1.;\n  p = fract(uv*div)*2.0-1.0;\n  float id = floor(uv*div).x*div+floor(uv*div).y;\n  \n  float fac = max(pow(mod(iTime+id*0.2, INTERVAL) / INTERVAL, 10.)-0.1, 0.);\n  float seed = hash(floor((iTime)/INTERVAL)+id*0.2);\n  //p += hash21(id+seed+iTime)*0.5;\n  \n  p += sin((iTime+id+seed)+vec2(0.,1.))*0.3;\n\n  p += fbm(vec3(p*1.,seed+id))*fac*0.5;\n  p += fbm(vec3(p*0.3,seed+id))*fac*3.;\n  float d = map(p, fac, seed);\n  vec3 col = vec3(0.059,0.09,0.165);\n  if(d < 0.0){\n    col = vec3(0.404,0.91,0.976);\n    //get normal of sphere by 2D coordinate\n    float r = length(p)/RADIUS;\n    vec2 _n = p/RADIUS;\n    vec3 n = vec3(_n, sqrt(1.-r*r));\n    vec3 ld = normalize(vec3(-0.5,1.,1.0));\n    float diff = max(dot(n,ld),0.0);\n    float spec = pow(max(0., dot(reflect(-ld,n),vec3(0.,0.,1.))), 32.);\n    col += col*(smoothstep(0.1, 0.1, diff)*0.1+smoothstep(0.2, 0.2, spec));\n    //col *= hash31(seed)*0.2+0.8;\n    //col *= smoothstep(0.1, 0.1, diff);\n  }\n  \n  \n  fragColor = vec4(col, 1.);\n}\n\n//*Feedback\n//!Extra layer? Particle?\n//! Radial\n//! Sharp edge unnatural\n//! Better easing\n\n\n\n//!Grab Diffusion Color from Actual 3D render or estimation.","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XcyBDc","date":"1734507563","viewed":61,"name":"Popping Bubbles","username":"Nekodigi","description":"A pseudo-popping effect, created with distortion and subtraction modeling.\nBased on https://www.youtube.com/watch?v=GTIwxin62FU","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["game","effect","bubble","cell","anime","pop","burst"],"hasliked":0,"parentid":"","parentname":""}}