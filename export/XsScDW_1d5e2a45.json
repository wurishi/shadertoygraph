{"ver":"0.1","info":{"id":"XsScDW","date":"1492004517","viewed":228,"name":"Lines and overlapping","username":"KyleNetherland","description":"Draw lines and show where they overlap.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["collision","lines","class","extra"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"vec2 Line1Start = vec2(0.5,0.0);\nvec2 Line1End = vec2(0.5,1.0);\n\nvec2 Line2Start = vec2(0.4,0.0);\nvec2 Line2End = vec2(0.4,0.8);\n\nfloat LineWidth = 0.02;\n\nvec3 Line1Color = vec3(0.0,1.0,0.0);\nvec3 Line2Color = vec3(0.0,0.0,1.0);\nvec3 OverlapColor = vec3(1.0,0.0,0.0);\n\nbool drawLine(vec2 point1, vec2 point2, vec2 pos)\n{\npos -= point1;\npoint2 -= point1;\n\n//the change in y over the change in x\nfloat m = (point1.y - point2.y)/(point1.x - point2.x);\n//b from y = mx + b\nfloat b = point1.y - m*point1.x;\n\n\nvec2 line = vec2((pos.y-b)/m, pos.x*m+b);\n//taken from luutifa for equation of line, predictable though, understandable as \n// the equation of a line is (x,y) and y = mx + b so \n// x = y-b/m\n\n//used for check in between two different positions for line width\nfloat lineSizeHalf = LineWidth/2.0;\n\n//the check to see if it's between two positions\nif ((pos.y > line.y-lineSizeHalf && pos.y < line.y+lineSizeHalf) \n|| (pos.x > line.x-lineSizeHalf && pos.x < line.x+lineSizeHalf))\n{\nreturn true;\n}\nelse\nreturn false;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\nint overlap = 0;\n\nvec2 uv = fragCoord.xy / iResolution.xy;\n\nvec3 color = vec3(0.0);\n\n//line 1\n\nif (drawLine(Line1Start,Line1End,uv))\n{\ncolor = Line1Color;\noverlap++;//if its in the first line\n}\n//line2\n\nif (drawLine(Line2Start,Line2End,uv) )\n{\ncolor = Line2Color;\noverlap++; //and in the second line\n}\n\nif(overlap == 2)\n{\ncolor = OverlapColor; //change color.\n}\n\nfragColor = vec4 (color, 1.0);\n}","name":"Image","description":"","type":"image"}]}