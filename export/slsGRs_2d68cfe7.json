{"ver":"0.1","info":{"id":"slsGRs","date":"1622667398","viewed":99,"name":"Perlin Noise 3D __","username":"Envy24","description":"perlin, noise, random","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["noise","perlin","random"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* playlist: https://www.shadertoy.com/playlist/sXfSDS */\n\n/* \n    Returns random vector\n     vector.x = [-1.0; 1.0];\n     vector.y = [-1.0; 1.0];\n     vector.z = [-1.0; 1.0];\n*/\nvec3 vector3HashUI32(\n    const uint x,\n    const uint y,\n    const uint z)\n{\n    // Pick some enthropy source values.\n    // Try different values.\n    const uint enthropy0 = 1200u;\n    const uint enthropy1 = 4500u;\n    const uint enthropy2 = 6700u;\n    const uint enthropy3 = 8900u;\n\n    // Use linear offset method to mix coordinates.\n    uint value0 = z * enthropy3 * enthropy2 + y * enthropy2 + x;\n    uint value1 = y * enthropy3 * enthropy2 + x * enthropy2 + z;\n    uint value2 = x * enthropy3 * enthropy2 + z * enthropy2 + y;\n\n    // Calculate hash.\n\tvalue0 += enthropy1; value0 *= 445593459u; value0 ^= enthropy0;\n    value1 += enthropy1; value1 *= 445593459u; value1 ^= enthropy0;\n    value2 += enthropy1; value2 *= 445593459u; value2 ^= enthropy0;\n\n    // 2.0f / 4294967295.0f = 4.6566128730773926e-10\n\n    return vec3(\n        float(value0 * value0 * value0) * 4.6566128730773926e-10f - 1.0f,\n        float(value1 * value1 * value1) * 4.6566128730773926e-10f - 1.0f,\n        float(value2 * value2 * value2) * 4.6566128730773926e-10f - 1.0f);\n}\n\nfloat PerlinNoise3D(float u, float v, float w)\n{\n    // Fractial part.\n    float fractU = u - floor(u);\n    float fractV = v - floor(v);\n    float fractW = w - floor(w);\n\n    // Integer part.\n    u = floor(u);\n    v = floor(v);\n    w = floor(w);\n\n    // Smoothstep.\n    float tU = fractU * fractU * (3.0f - 2.0f * fractU);\n    float tV = fractV * fractV * (3.0f - 2.0f * fractV);\n    float tW = fractW * fractW * (3.0f - 2.0f * fractW);\n\n    // Random gradient vectors.\n    vec3 gradient0 = vector3HashUI32(uint(u),        uint(v),        uint(w));\n    vec3 gradient1 = vector3HashUI32(uint(u + 1.0f), uint(v),        uint(w));     \n    vec3 gradient2 = vector3HashUI32(uint(u),        uint(v + 1.0f), uint(w));\n    vec3 gradient3 = vector3HashUI32(uint(u + 1.0f), uint(v + 1.0f), uint(w));\n    vec3 gradient4 = vector3HashUI32(uint(u),        uint(v),        uint(w + 1.0f));\n    vec3 gradient5 = vector3HashUI32(uint(u + 1.0f), uint(v),        uint(w + 1.0f));\n    vec3 gradient6 = vector3HashUI32(uint(u),        uint(v + 1.0f), uint(w + 1.0f));\n    vec3 gradient7 = vector3HashUI32(uint(u + 1.0f), uint(v + 1.0f), uint(w + 1.0f));\n\n    // Distance vectors.\n    vec3 distance0 = vec3(fractU,        fractV,        fractW);\n    vec3 distance1 = vec3(fractU - 1.0f, fractV,        fractW);\n    vec3 distance2 = vec3(fractU,        fractV - 1.0f, fractW);\n    vec3 distance3 = vec3(fractU - 1.0f, fractV - 1.0f, fractW);\n    vec3 distance4 = vec3(fractU,        fractV,        fractW - 1.0f);\n    vec3 distance5 = vec3(fractU - 1.0f, fractV,        fractW - 1.0f);\n    vec3 distance6 = vec3(fractU,        fractV - 1.0f, fractW - 1.0f);\n    vec3 distance7 = vec3(fractU - 1.0f, fractV - 1.0f, fractW - 1.0f);\n\n    // Dot products.\n    float dotProduct0 = gradient0.x * distance0.x + gradient0.y * distance0.y + gradient0.z * distance0.z;\n    float dotProduct1 = gradient1.x * distance1.x + gradient1.y * distance1.y + gradient1.z * distance1.z;\n    float dotProduct2 = gradient2.x * distance2.x + gradient2.y * distance2.y + gradient2.z * distance2.z;\n    float dotProduct3 = gradient3.x * distance3.x + gradient3.y * distance3.y + gradient3.z * distance3.z;\n    float dotProduct4 = gradient4.x * distance4.x + gradient4.y * distance4.y + gradient4.z * distance4.z;\n    float dotProduct5 = gradient5.x * distance5.x + gradient5.y * distance5.y + gradient5.z * distance5.z;\n    float dotProduct6 = gradient6.x * distance6.x + gradient6.y * distance6.y + gradient6.z * distance6.z;\n    float dotProduct7 = gradient7.x * distance7.x + gradient7.y * distance7.y + gradient7.z * distance7.z;\n\n    // Trilinear filter.\n    return\n        dotProduct0 * (1.0f - tU) * (1.0f - tV) * (1.0f - tW) +\n        dotProduct1 * tU          * (1.0f - tV) * (1.0f - tW) +\n        dotProduct2 * (1.0f - tU) * tV          * (1.0f - tW) +\n        dotProduct3 * tU          * tV          * (1.0f - tW) +\n        dotProduct4 * (1.0f - tU) * (1.0f - tV) * tW +\n        dotProduct5 * tU          * (1.0f - tV) * tW +\n        dotProduct6 * (1.0f - tU) * tV          * tW +\n        dotProduct7 * tU          * tV          * tW;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv;\n    \n    if (fragCoord.x < iResolution.x * 0.5 && fragCoord.y < iResolution.y * 0.5) { uv = fragCoord/iResolution.xy * 3.0f; }\n    else if (fragCoord.x >= iResolution.x * 0.5 && fragCoord.y < iResolution.y * 0.5) { uv = fragCoord/iResolution.xy * 6.0f; }\n    else if (fragCoord.x > iResolution.x * 0.5 && fragCoord.y >= iResolution.y * 0.5) { uv = fragCoord/iResolution.xy * 9.0f; }\n    else { uv = fragCoord/iResolution.xy * 12.0f; }\n\n    float _u = uv.x + iMouse.x * 0.1f;\n    float _v = uv.y + iMouse.y * 0.1f;\n    float _w = iTime * 0.5f;\n\n    // Fractal Brownian Motion.\n    float gray = PerlinNoise3D(_u,     _v,          _w)           * 3.6f;\n    gray += PerlinNoise3D(_u * 2.3f,   _v * 1.84f,  _w * 1.84f )  * 1.62f;\n    gray += PerlinNoise3D(_u * 4.32f,  _v * 4.32f,  _w * 4.32f)   * 0.07f;\n    gray += PerlinNoise3D(_u * 8.672f, _v * 7.672f, _w * 7.672f)  * 0.07f;\n    gray += PerlinNoise3D(_u * 16.62f, _v * 17.72f, _w * 13.62f)  * 0.08f;\n    gray += PerlinNoise3D(_u * 37.72f, _v * 35.72f, _w * 32.72f)  * 0.07f;\n    gray += PerlinNoise3D(_u * 64.72f, _v * 66.72f, _w * 46.72f)  * 0.07f;\n    gray += 1.5f;\n    gray *= 0.23f;\n   \n\n    // Output to screen\n    fragColor = vec4(vec3(gray),1.0);\n}","name":"Image","description":"","type":"image"}]}