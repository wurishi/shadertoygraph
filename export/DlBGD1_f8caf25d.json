{"ver":"0.1","info":{"id":"DlBGD1","date":"1673205328","viewed":91,"name":"Genuary 2023 day 4,5,7,8","username":"qw","description":"trying to catch up on genuary - being 5 days behind... so, tackling 4 themes at once... intersection, debug view &  \"Sample a color palette from your favorite movie\" & Signed Distance Function\nVisualising the intersection of a ray & a sphere","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["ray","sphere","intersection","genuary2023"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool IntersectSphere(in vec4 sphere, in vec3 origin, in vec3 dir,\nout vec3 t1, out vec3 t2)\n{\n    vec3 OtoC = sphere.xyz - origin;\n    float L = length(OtoC);\n    float tc = dot(dir, OtoC);\n    if( tc <= 0.0f ) { t1 = t2 = vec3(0); return false;}\n    \n    float d = sqrt( (L*L) - (tc*tc) );\n    \n    float radius = sphere.w;\n    if( d >= radius) { t1 = t2 = vec3(0); return false;}\n    \n    float t1c = sqrt( (radius*radius) - (d*d) );\n    \n    t1 = origin + (dir * (tc - t1c) );\n    t2 = origin + (dir * (tc + t1c) );\n    return true;\n}\n\n// credit: iq\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n\tvec3 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h ) - r;\n}\n\n// credit: iq\nfloat capIntersect( in vec3 ro, in vec3 rd, in vec3 pa, in vec3 pb, in float r )\n{\n    vec3  ba = pb - pa;\n    vec3  oa = ro - pa;\n\n    float baba = dot(ba,ba);\n    float bard = dot(ba,rd);\n    float baoa = dot(ba,oa);\n    float rdoa = dot(rd,oa);\n    float oaoa = dot(oa,oa);\n\n    float a = baba      - bard*bard;\n    float b = baba*rdoa - baoa*bard;\n    float c = baba*oaoa - baoa*baoa - r*r*baba;\n    float h = b*b - a*c;\n    if( h>=0.0 )\n    {\n        float t = (-b-sqrt(h))/a;\n        float y = baoa + t*bard;\n        // body\n        if( y>0.0 && y<baba ) return t;\n        // caps\n        vec3 oc = (y<=0.0) ? oa : ro - pb;\n        b = dot(rd,oc);\n        c = dot(oc,oc) - r*r;\n        h = b*b - c;\n        if( h>0.0 ) return -b - sqrt(h);\n    }\n    return -1.0;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - iResolution.xy * .5) / iResolution.y;\n    vec3 col = vec3(0.3);\n\n    vec3 rayOrigin = vec3(0, 1.5f, -1);\n    vec3 rayDir = normalize(vec3(uv.x, uv.y, 1));\n    \n    vec4 sphere = vec4(1.5 * cos(iTime*0.3),1.0, 3.0 + (-sin(iTime*.3)), 0.8);\n    \n    vec3 t1;\n    vec3 t2;\n    if( IntersectSphere(sphere, rayOrigin, rayDir, t1, t2) )\n    {\n        col = mix(col,vec3(.6), length(t2-t1)/(sphere.w*2.));\n    }\n\n    vec3 interRayOrig = vec3(3.4,0.3,3.4);\n    vec3 interRayEnd = sphere.xyz + vec3(0.,sphere.w*sin(iTime), 0.);\n\n    if( IntersectSphere(sphere, interRayOrig, normalize(interRayEnd-interRayOrig), t1, t2) )\n    {\n        float intersectionDist = capIntersect( rayOrigin, rayDir, interRayOrig, t2, 0.02 );\n        if( intersectionDist > 0.)\n        {\n            col = vec3(.7);\n        }\n\n        vec3 halfBetweenT1andT2 = (t1 + t2) *.5;\n        \n        float centerToHalfwayBetweenT1andT2LineDist = \n                capIntersect( rayOrigin, rayDir, sphere.xyz, halfBetweenT1andT2, 0.02 );\n        if( centerToHalfwayBetweenT1andT2LineDist > 0.)\n        {\n            col = vec3(.3);\n        }\n        \n        float tHalfPoinDist = capIntersect( rayOrigin, rayDir, halfBetweenT1andT2, halfBetweenT1andT2, 0.08 );\n        if( tHalfPoinDist > 0. )\n        {\n            col = vec3(.4);\n        }\n        \n        float sphereCenterDist = capIntersect( rayOrigin, rayDir, sphere.xyz, sphere.xyz, 0.05 );\n        \n        if( sphereCenterDist > 0. )\n        {\n            col = vec3(.95);\n        }\n    \n        float t1PoinDist = capIntersect( rayOrigin, rayDir, t1, t1, 0.08 );\n        float t2PoinDist = capIntersect( rayOrigin, rayDir, t2, t2, 0.08 );\n\n        if( t1PoinDist > 0. || t2PoinDist > 0. )\n        {\n            col = vec3(.1);\n        }\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}