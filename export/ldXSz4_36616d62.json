{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"video","id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"// Maps into DawnBringer's 4-bit (16 color) palette http://www.pixeljoint.com/forum/forum_posts.asp?TID=12795\n// Also see the amazing ASCII shadertoy: https://www.shadertoy.com/view/lssGDj\n\nfloat hash(vec2 p) { return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); }\n\n\nfloat compare(vec3 a, vec3 b) {\n\t// Increase saturation\n\ta = max(vec3(0.0), a - min(a.r, min(a.g, a.b)) * 0.25);\n\tb = max(vec3(0.0), b - min(b.r, min(b.g, b.b)) * 0.25);\n\ta*=a*a;\n\tb*=b*b;\n\tvec3 diff = (a - b);\n\treturn dot(diff, diff);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tconst float pixelSize = 4.0;\n\tvec2 c = floor(fragCoord.xy / pixelSize);\n\tvec2 coord = c * pixelSize;\n\tvec3 src = texture(iChannel0, coord / iResolution.xy).rgb;\n\t\n\t// Track the two best colors\n\tvec3 dst0 = vec3(0), dst1 = vec3(0);\n\tfloat best0 = 1e3, best1 = 1e3;\n#\tdefine TRY(R, G, B) { const vec3 tst = vec3(R, G, B); float err = compare(src, tst); if (err < best0) { best1 = best0; dst1 = dst0; best0 = err; dst0 = tst; } }\n\n\tTRY(0.078431, 0.047059, 0.109804);\n    TRY(0.266667, 0.141176, 0.203922);\n    TRY(0.188235, 0.203922, 0.427451);\n    TRY(0.305882, 0.290196, 0.305882);\n    TRY(0.521569, 0.298039, 0.188235);\n    TRY(0.203922, 0.396078, 0.141176);\n    TRY(0.815686, 0.274510, 0.282353);\n    TRY(0.458824, 0.443137, 0.380392);\n    TRY(0.349020, 0.490196, 0.807843);\n    TRY(0.823529, 0.490196, 0.172549);\n    TRY(0.521569, 0.584314, 0.631373);\n    TRY(0.427451, 0.666667, 0.172549);\n    TRY(0.823529, 0.666667, 0.600000);\n    TRY(0.427451, 0.760784, 0.792157);\n    TRY(0.854902, 0.831373, 0.368627);\n    TRY(0.870588, 0.933333, 0.839216);\n#\tundef TRY\t\n\n\tbest0 = sqrt(best0); best1 = sqrt(best1);\n\tfragColor = vec4(mod(c.x + c.y, 2.0) >  (hash(c * 2.0 + fract(sin(vec2(floor(iTime), floor(iTime * 1.7))))) * 0.75) + (best1 / (best0 + best1)) ? dst1 : dst0, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ldXSz4","date":"1397355504","viewed":1849,"name":"DawnBringer","username":"morgan3d","description":"Reduces to pixel art using DawnBringer's 16-color palette plus dithering. Might be neat as a post-processing effect on another shader.","likes":32,"published":1,"flags":0,"usePreview":0,"tags":["palette","pixelart"],"hasliked":0,"parentid":"","parentname":""}}