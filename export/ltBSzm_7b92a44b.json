{"ver":"0.1","info":{"id":"ltBSzm","date":"1537862162","viewed":202,"name":"Color interpolation on triangles","username":"nide","description":"Left: quad, right: quad from 2 triangles.\nRight side shows the result of interpolation on 3 barycentric coordinates. Only 3 colors are taken into consideration for each of the triangles.\nJust something beginners in graphics programming stumble across","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["triangles","beginner","opengl"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"\nfloat bilinearTriangle(vec2 texcoord, float sample0, float sample1, float sample2, float sample3)\n{\n    float x1 = texcoord.x;\n    float x2 = 1.0 - texcoord.x;\n    float y1 = texcoord.y;\n    float y2 = 1.0 - texcoord.y;\n    \n    float fsample = 0.0;\n    float side = step(1.0, texcoord.x+texcoord.y);\n    float side1 = 1.0-side;\n    \n    fsample += sample2*x2*y1*(side1);\n    fsample += sample0*x2*y2*(side1);\n    fsample += sample1*x1*y2*(side1);\n    \n    fsample += sample3*x1*y1*(side);\n    fsample += sample2*x2*y1*(side);\n    fsample += sample1*x1*y2*(side);\n    return fsample;\n}\nfloat bilinearQuad(vec2 texcoord, float sample0, float sample1, float sample2, float sample3)\n{\n    float x1 = texcoord.x;\n    float x2 = 1.0 - texcoord.x;\n    float y1 = texcoord.y;\n    float y2 = 1.0 - texcoord.y;\n    \n    float fsample = 0.0;\n    \n    fsample += sample3*x1*y1;\n    fsample += sample2*x2*y1;\n    fsample += sample0*x2*y2;\n    fsample += sample1*x1*y2;\n    \n    return fsample;\n}\n\nfloat isInside(vec2 pos, vec2 bottomLeft, vec2 topRight) {\n    vec2 v = step(bottomLeft, pos)-step(topRight, pos);\n    return v.x*v.y;\n}\nvoid quad(in vec2 fragCoord, in vec2 uv, vec2 pos, float size, out float inside, out vec2 quadUv) {\n    float aspectRatio = iResolution.y/iResolution.x;\n    vec2 vsize = vec2(size*aspectRatio, size);\n    vec2 v0 = pos + vsize;\n    quadUv = (uv-pos) / vsize;\n    inside = isInside(uv, pos, v0);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspectRatio = iResolution.y/iResolution.x;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float inside1;\n    vec2 quadUV1;\n    quad(fragCoord, uv, vec2(0.1, 0.25), 0.5, inside1, quadUV1);\n    float inside2;\n    vec2 quadUV2;\n    quad(fragCoord, uv, vec2(0.6, 0.25), 0.5, inside2, quadUV2);\n    \n    \n    float timebase = iTime;\n    float time = iTime*2.15;\n    float time2 = iTime*0.55;\n    float sampleTL = clamp(sin(time+0.0), 0.0, 1.0);\n    float sampleTR = clamp(sin(time+3.14*0.5), 0.0, 1.0);\n    float sampleBR = clamp(sin(time+3.14*0.5*2.0), 0.0, 1.0);\n    float sampleBL = clamp(sin(time+3.14*0.5*3.0), 0.0, 1.0);\n    \n    \n    float interpolated1 = bilinearQuad(quadUV1, sampleBL, sampleBR, sampleTL, sampleTR);\n    float interpolated2 = bilinearTriangle(quadUV2, sampleBL, sampleBR, sampleTL, sampleTR);\n    \n    vec3 background = vec3(0,0,1);\n    vec3 outColor = mix(background, vec3(interpolated1), inside1); \n    outColor = mix(outColor, vec3(interpolated2), inside2); \n    \n\tfragColor = vec4(outColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}