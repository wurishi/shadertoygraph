{"ver":"0.1","info":{"id":"lttXRj","date":"1481409641","viewed":475,"name":"Raymarching Christmas Tree ðŸŽ„","username":"micantre","description":"Overlapping sets of spheres produced using some primitive ray marching in order to promote the holiday spirit.  Merry Christmas!","likes":7,"published":1,"flags":64,"usePreview":0,"tags":["christmastreelightssnow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"ldB3DD","filepath":"https://soundcloud.com/underthechristmastree/bing-crosby-its-beginning-to","previewfilepath":"https://soundcloud.com/underthechristmastree/bing-crosby-its-beginning-to","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SNOW_INTENSITY .05\n#define SNOW_FALL_SPEED 1.0\n\nfloat map(vec3 p, float time)\n{\n    vec3 q = fract(p) * 2.0 - 1.0;\n    \n    // length of the point minus the radius of the sphere...\n    float radius = 0.25;\n    \n    // spheres get bigger and smaller depending on time\n    radius = (sin(time)*.05 + .1);\n    \n    return length(q) - radius;  //0.25;\n}\n\nfloat trace(vec3 origin, vec3 ray, float time)\n{\n    float t = 0.0;\n    for(int i = 0; i < 32; i++)\n    {\n        vec3 p = origin + ray*t;\n        float d = map(p, time);\n        t+= d * 0.5;\n    }\n    return t;\n}\n\nfloat snowMap(vec3 p)\n{\n    vec3 q = fract(p) * 2.0 - 1.0;\n    \n    // length of the point minus the radius of the sphere...\n    float radius = 0.25;\n    \n    // spheres get bigger and smaller depending on time\n    radius = SNOW_INTENSITY;\n\n    return length(q) - radius;  //0.25;\n}\n\nfloat snowTrace(vec3 origin, vec3 ray)\n{\n    float t = 0.0;\n    for(int i = 0; i < 32; i++)\n    {\n        vec3 p = origin + ray*t;\n        float d = snowMap(p);\n        t+= d * 0.5;\n    }\n    return t;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv*2.0 - 1.0; // between -1 and +1\n    \n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 ray = normalize(vec3(uv, 1.0));\n        \n    vec3 origin = vec3(0., 0.7, 0.); // camera location\n    \n    // GREEN LIGHTS\n    // rotation\n    float the = .7;\n    ray.xz *= mat2(cos(the), -sin(the), sin(the), cos(the));\n\n    float t = trace(origin, ray, iTime);\n    \n    float fog1 = 1.0/ (1. + t*t*0.1);\n    \n    // RED LIGHTS\n    // rotation\n    the = .2;\n    ray.xz *= mat2(cos(the), -sin(the), sin(the), cos(the));\n    origin = vec3(0., 0.4, 0.);\n\n    t = trace(origin, ray, iTime + 1.5);\n    \n    float fog2 = 1.0/ (1. + t*t*0.1);\n    \n    // BLUE LIGHTS\n    // rotation\n    the = .4;\n    ray.xz *= mat2(cos(the), -sin(the), sin(the), cos(the));\n\torigin = vec3(0., 0.2, 0.);\n    \n    t = trace(origin, ray, iTime + 3.5);\n    \n    float fog3 = 1.0/ (1. + t*t*0.1);\n    \n    \n    // combine all of the colors\n    vec3 fc = vec3(fog2, fog1,fog3);\n    if(uv.y > 1. - 2.5*uv.x || uv.y > 1. + 2.5*uv.x)\n    {\n        fc = vec3(0.);\n    }\n    \n    // now let's do the 2 snow things\n    uv = fragCoord.xy / iResolution.xy;\n    uv = uv*2.0 - 1.0; // between -1 and +1\n    uv.x *= iResolution.x / iResolution.y;\n    \n    //snow 1\n    ray = normalize(vec3(uv, 1.0));\n    \n    the = 1.0;\n    ray.xz *= mat2(cos(the), -sin(the), sin(the), cos(the));\n    \n    origin = vec3(0., iTime*.75*SNOW_FALL_SPEED, iTime*.75*SNOW_FALL_SPEED); // camera location\n    \n    t = snowTrace(origin, ray);\n    \n    float fogSnow1 = 1.0/ (1. + t*t*0.1);\n    \n    //snow 2\n    ray = normalize(vec3(uv, 1.0));\n    \n    the = -2.0;\n    ray.xz *= mat2(cos(the), -sin(the), sin(the), cos(the));\n    \n    origin = vec3(0., iTime*0.5*SNOW_FALL_SPEED, iTime*0.5*SNOW_FALL_SPEED); // camera location\n    \n    t = snowTrace(origin, ray);\n    \n    float fogSnow2 = 1.0/ (1. + t*t*0.1);\n    \n    \n    \n    vec3 snowFogColor = vec3(fogSnow1) + vec3(fogSnow2);\n    \n    \n    fc += snowFogColor;\n    \n    \n    \n    \n    fragColor = vec4(fc,1.0);\n}","name":"Image","description":"","type":"image"}]}