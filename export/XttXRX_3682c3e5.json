{"ver":"0.1","info":{"id":"XttXRX","date":"1481039382","viewed":367,"name":"Peanut Butter Jelly Time","username":"balkhan","description":"My first skeleton animated body.\nWanted to add an fbm to the color of the banana to make it more like a real one but I got lazy :)","likes":15,"published":1,"flags":64,"usePreview":0,"tags":["raymarch","time","jelly","banana","peanut","butter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsB3WD","filepath":"https://soundcloud.com/lori-15/peanut-butter-jelly-time","previewfilepath":"https://soundcloud.com/lori-15/peanut-butter-jelly-time","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define I_MAX\t100\n#define E\t\t0.002\n\n/*\n* License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n*/\n\nvoid\tinit_vars();\nfloat\tletters(vec3 p);\nvec3\tgive_color(float inter);\nfloat\tde(vec3 pos);\nfloat\tde(vec3 pos, vec4 rad);\nfloat\tsdTorus( vec3 p, vec2 t );\nvec4\tmarch(vec3 pos, vec3 dir);\nvec3\tcamera(vec2 uv);\nvec3\tcalcNormal(in vec3 pos, float e, vec3 dir);\nfloat\tsmin(float a, float b, float k);\nvec2\trot(vec2 p, vec2 ang);\nvec2\tuv;\nvec4\tpeanut_butter_jelly_time(vec3 pos, vec3 dir);\n\n/*\n* Distances\n*/\n\n\tfloat\trigt_eye;\n\tfloat\tleft_eye;\n    float\trigt_pup;\n    float\tleft_pup;\n    float\triga_leg;\n    float\tlefa_leg;\n    float\trigb_leg;\n    float\tlefb_leg;\n\tfloat\trigt_arm;\n    float\trigt_brm;\n\tfloat\tleft_arm;\n    float\tleft_brm;\n\tfloat\tleft_fot;\n\tfloat\trigt_fot;\n\tfloat\tleft_had;\n\tfloat\trigt_had;\n\tfloat\tup_cap;\n\tfloat\tbt_cap;\n\tfloat\tmouth;\n\n/*\n* Skeleton\n*/\n\n\tvec3\ta_arm_rigt;\n\tvec3\ta_arm_left;\n\tvec3\tb_arm_rigt;\n\tvec3\tb_arm_left;\n\n\tvec3\ta_leg_rigt;\n\tvec3\ta_leg_left;\n\tvec3\tb_leg_left;\n\tvec3\tb_leg_rigt;\n\n/*\n* Distance functions taken from iq\n*/\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n\tvec3 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h ) - r;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n\tvec2 q = vec2(length(p.xy)-t.x,p.z);\n\n    return length(q)-t.y;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n\tinit_vars(); // init skeleton and distances\n    uv  = fragCoord.xy / iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n\tvec3\tdir = camera(uv);\n    vec4\tcol = vec4(0.0);\n    vec3\tpos = vec3(.0, .0, -10.0);\n\n    vec4\tinter = (march(pos, dir));\n\n    vec3\tv = pos+inter.w*dir;\n\tvec3\tobj_color;\n    if (inter.w <= 17.)\n\t{\n        obj_color = give_color(inter.y);\n        /*\n\t\t* taken from here : https://www.shadertoy.com/view/XsB3Rm\n\t\t*/\n        vec3\tn = calcNormal(pos, E, dir);\n        vec3\tev = normalize(v - pos);\n\t\tvec3\tref_ev = reflect(ev, n);\n        vec3\tlight_pos   = vec3(-20.0, 10.0, -25.0);\n\n        vec3\tvl = normalize(light_pos - v);\n\t\tfloat\tdiffuse  = max(0.0, dot(vl, n));\n\t\tfloat\tspecular = pow(max(0.0, dot(vl, ref_ev)), 42.);\n        col.xyz = obj_color * (diffuse + specular);\n    }\n    // letters\n    else\n    {\n        col = peanut_butter_jelly_time(pos, dir);\n    }\n   \tfragColor = col;\n}\n\nfloat\tscene(vec3 p)\n{\n    float\tt = sin(iTime);\n    float\tct = cos(1.3+ .75*t);\n    float\tst = sin(1.3+ .75*t);\n    float\tmind = 1e5;\n\n    mat2\trotmat = mat2(ct, st, -st, ct);\n    p.xz *= rotmat;\n    p.x += .5*sin(15.*iTime);\n    p.y += .75*sin(.7+20.*iTime);\n\n    rigt_eye = length(p+vec3(-1.5, -0.4, .4))-.3;\n    left_eye = length(p+vec3(-1.5, -0.4, -.4))-.3;\n    rigt_pup = length(p+vec3(-1.25,-0.4,0.4))-.1;\n    left_pup = length(p+vec3(-1.25,-0.4,-0.4))-.1;\n\n    mouth = sdTorus(vec3((p.y+.3),p.z-.05,(p.x-1.2)-cos(0.4-p.y))+vec3(0.), vec2(.5,.35));\n\n    riga_leg = sdCapsule(vec3(p.x-1.,p.y+1.,p.z+1.), a_leg_rigt, vec3(.8,-.25,.6) , .15);\n    lefa_leg = sdCapsule(vec3(p.x-1.,p.y+1.,p.z-1.), a_leg_left, vec3(.8,-.25,-.6) , .15);\n    rigb_leg = sdCapsule(vec3(p.x-1.,p.y+1.,p.z+1.), a_leg_rigt, b_leg_rigt , .15);\n    lefb_leg = sdCapsule(vec3(p.x-1.,p.y+1.,p.z-1.), a_leg_left, b_leg_left , .15);\n\n    rigt_arm = sdCapsule(vec3(p.x-1.,p.y+1.,p.z+1.), a_arm_rigt, vec3(1.5,.8,.46) , .15);\n    rigt_brm = sdCapsule(vec3(p.x-1.,p.y+1.,p.z+1.), a_arm_rigt, b_arm_rigt , .15);\n    left_arm = sdCapsule(vec3(p.x-1.,p.y+1.,p.z-1.), a_arm_left, vec3(1.5,.8,-.46) , .15);\n    left_brm = sdCapsule(vec3(p.x-1.,p.y+1.,p.z-1.), a_arm_left, b_arm_left , .15);\n\n\tleft_had = length(vec3(p.x-1.,p.y+1.,p.z-1.)-b_arm_left) - 0.4;\n\trigt_had = length(vec3(p.x-1.,p.y+1.,p.z+1.)-b_arm_rigt) - 0.4;\n    left_fot = length(vec3(p.x-1.,p.y*1.5+2.5,p.z-1.)-b_leg_left) - 0.7;\n\trigt_fot = length(vec3(p.x-1.,p.y*1.5+2.5,p.z+1.)-b_leg_rigt) - 0.7;\n\n    up_cap = sdCapsule(vec3(p.y-2.4, p.z, p.x-.6), vec3(-.3, -.0, .33), vec3(.1, .0, -.31), .15);\n    bt_cap = sdCapsule(vec3(p.y+2.4, p.z, p.x-.6), vec3(.3, -.0, .33), vec3(.1, .0, .0), .15);\n\n    // 3 lanes above are the banana corpse, comment the if to reveal the cheat\n    mind = sdTorus(p, vec2(2.4, cos(-(p.y)/1.50)));\n    if (p.x < -.45)\n        mind = 2.;\n    // assembling shapes together\n    mind = min(mind, rigt_eye);\n    mind = min(mind, left_eye);\n    mind = min(mind, rigt_pup);\n    mind = min(mind, left_pup);\n\n    mind = min(mind, riga_leg);\n    mind = min(mind, lefa_leg);\n\tmind = min(mind, rigb_leg);\n\tmind = min(mind, lefb_leg);\n\n    mind = min(mind, rigt_arm);\n    mind = min(mind, rigt_brm);\n    mind = min(mind, left_arm);\n    mind = min(mind, left_brm);\n    mind = min(mind, left_fot);\n\tmind = min(mind, rigt_fot);\n\tmind = min(mind, left_had);\n    mind = min(mind, rigt_had);\n    mind = min(mind, up_cap);\n    mind = min(mind, bt_cap);\n\n\t//carving comes last\n    mind = max(mind, -mouth);\n\n    return(mind);\n}\n\nvec4\tmarch(vec3 pos, vec3 dir)\n{\n    vec2\tdist = vec2(0.0);\n    vec3\tp = vec3(0.0);\n    vec4\tstep = vec4(0.0);\n\n    for (int i = -1; i < I_MAX; ++i)\n    {\n    \tp = pos + dir * dist.y;\n        dist.x = scene(p);\n        dist.y += dist.x;\n        if (dist.x < E || dist.y > 20.)\n           break;\n        step.x++;\n    }\n    step.y = dist.x;\n    step.w = dist.y;\n    return (step);\n}\n\nvec3\tgive_color(float inter)\n{\n\tvec3\tret = vec3(1.,1.,0.3);\n    \n\t// magic\n    if (mouth / inter < E)\n        ret = vec3(1.,0.,0.);\n  \tif (rigt_eye < 2.*E || left_eye < 2.*E)\n        ret = vec3(1.,1.,1.);\n    if (rigt_pup < 2.*E || left_pup < 2.*E)\n        ret = vec3(0.,0.,0.);\n\tif (left_arm < 2.*E || left_brm < 2.*E || rigt_arm < 2.*E || rigt_brm < 2.*E \n        || lefb_leg < 2.*E || rigb_leg < 2.*E || lefa_leg < 2.*E || riga_leg < 2.*E)\n        ret = vec3(0.2,0.2,0.2);\n\tif (left_fot < 2.*E || rigt_fot < 2.*E || left_had < 2.*E || rigt_had < 2.*E)\n        ret = vec3(1.,1.,1.);\n    \n    return (ret);\n}\n\nvec4\tpeanut_butter_jelly_time(vec3 pos, vec3 dir) // march letters\n{\n\tvec4\tret = vec4(0.,0.,0.,1.);\n\n\tvec2\tdist = vec2(0.0);\n    vec3\tp = vec3(0.0);\n    vec4\tstep = vec4(0.0);\n\n    dir.x += 0.054*cos(2.8+iTime/5.); // makes text moove\n    for (int i = -1; i < 2; ++i) // low iteration give nice blurr\n    {\n    \tp = pos + dir * dist.y;\n        p.x -=.7;\n        dist.x = letters(p);\n        dist.y += dist.x;\n        if (dist.x < E || dist.y > 17.)\n           break;\n        step.x++;\n    }\n    step.y = dist.x;\n    step.w = dist.y;\n    \n    ret.x = 1.-step.y;\n    ret.y = 1.-step.y;\n    ret.z = 1. -step.w/float(15.);\n    return (ret);\n}\n\n//taken from an iq shader\nvec3 calcNormal( in vec3 pos, float e, vec3 dir)\n{\n    vec3 eps = vec3(e,0.0,0.0);\n\n\treturn normalize(vec3(\n           march(pos+eps.xyy, dir).w - march(pos-eps.xyy, dir).w,\n           march(pos+eps.yxy, dir).w - march(pos-eps.yxy, dir).w,\n           march(pos+eps.yyx, dir).w - march(pos-eps.yyx, dir).w ));\n}\n\nvec3\tcamera(vec2 uv)\n{\n    float   fov = 1.;\n\tvec3    forw  = vec3(0.0, 0.0, 1.0);\n\tvec3    right = vec3(1.0, 0.0, 0.0);\n\tvec3    up    = vec3(0.0, 1.0, 0.0);\n\n    return (normalize((uv.x-1.) * right + (uv.y-0.5) * up + fov * forw));\n}\n\nvoid\tinit_vars()\n{\n\trigt_eye = 1e5;\n\tleft_eye = 1e5;\n\tmouth = 1e5;\n\trigt_pup = 1e5;\n\tleft_pup = 1e5;\n\triga_leg = 1e5;\n\tlefa_leg = 1e5;\n\trigb_leg = 1e5;\n\tlefb_leg = 1e5;\n\trigt_arm = 1e5;\n\trigt_brm = 1e5;\n\tleft_arm = 1e5;\n\tleft_brm = 1e5;\n\tleft_fot = 1e5;\n\trigt_fot = 1e5;\n\tleft_had = 1e5;\n\trigt_had = 1e5;\n\tup_cap = 1e5;\n\tbt_cap = 1e5;\n\ta_arm_rigt = vec3(1.+.25*sin(2.*iTime), -.25+.125*sin(3.*iTime), -.9+.5*sin(2.*iTime));\n\ta_arm_left = vec3(1.+.25*sin(2.*iTime), -.25+.125*sin(3.*iTime), .9-.5*sin(2.*iTime));\n\tb_arm_rigt = vec3(.2,.3+.5+.5*sin(17.*iTime),-1.5+.5*sin(5.*iTime));\n\tb_arm_left = vec3(.2,.3+.5+.5*sin(17.*iTime),1.5-.5*sin(5.*iTime));\n\ta_leg_rigt = vec3(.5+0.25*sin(0.3+4.*iTime), -.70, -.1275+.25*cos(20.*iTime));\n\ta_leg_left = vec3(.5-0.25*sin(0.3+4.*iTime), -.70, .1275-.25*cos(20.*iTime));\n\tb_leg_left = vec3(.4,-2.25,.6+0.35*sin(0.3+40.*iTime));\n\tb_leg_rigt = vec3(.4,-2.25,-.6+0.35*sin(0.3+40.*iTime));\n}\n\n//https://iquilezles.org/articles/smin\nfloat smin( float a, float b, float k )\n{\n\tfloat res = exp( -k*a ) + exp( -k*b );\n    return -log( res )/k;\n}\n\n/*\n* trying to hide this at the end\n*/\n\nfloat\tletters(vec3 p) // this was painfull (and ugly)\n{\n\tfloat\tmind = 1e5;\n\n\tmind = min(mind, sdCapsule(p, vec3(-9.2, 4., 0.), vec3(-9.2, 3., 0.), .15));\n    mind = smin(mind, sdTorus(p-vec3(-8.8, 3.7, 0.), vec2(0.25, 0.15)), 40.3);         // p\n\n    mind = min(mind, sdCapsule(p, vec3(-8., 4., 0.), vec3(-8., 3., 0.), .1));\n    mind = min(mind, sdCapsule(p, vec3(-8., 3.5, 0.), vec3(-7.2, 3.5, 0.), .1));\n    mind = min(mind, sdCapsule(p, vec3(-8., 4., 0.), vec3(-7.2, 4., 0.), .1));\n    mind = min(mind, sdCapsule(p, vec3(-8., 3., 0.), vec3(-7.2, 3., 0.), .1)); // E\n    \n    mind = min(mind, sdCapsule(p, vec3(-6.4, 4., 0.), vec3(-6.8, 3., 0.), .1));\n    mind = min(mind, sdCapsule(p, vec3(-6.4, 4., 0.), vec3(-6., 3., 0.), .1));\n    mind = min(mind, sdCapsule(p, vec3(-6.3, 3.3, 0.), vec3(-6.5, 3.3, 0.), .1)); // A\n    \n    mind = min(mind, sdCapsule(p, vec3(-5.6, 4., 0.), vec3(-5.6, 3., 0.), .1));\n    mind = min(mind, sdCapsule(p, vec3(-5.6, 4., 0.), vec3(-5., 3., 0.), .1));\n\tmind = min(mind, sdCapsule(p, vec3(-5., 4., 0.), vec3(-5., 3., 0.), .1)); // N\n    \n    mind = min(mind, sdCapsule(p, vec3(-4.4, 4., 0.), vec3(-4.4, 3., 0.), .1));\n    mind = min(mind, sdCapsule(p, vec3(-4.4, 3., 0.), vec3(-3.8, 3., 0.), .1));\n    mind = min(mind, sdCapsule(p, vec3(-3.8, 4., 0.), vec3(-3.8, 3., 0.), .1)); // U\n    \n    mind = min(mind, sdCapsule(p, vec3(-3., 4., 0.), vec3(-3., 3., 0.), .1));\n    mind = min(mind, sdCapsule(p, vec3(-3.4, 4., 0.), vec3(-2.6, 4., 0.), .1)); // T\n\n    mind = min(mind, sdCapsule(p, vec3(-9.4, 1., 0.), vec3(-9.4, 2., 0.), .1));\n    mind = min(mind, sdTorus(p - vec3(-9.2, 1.8, 0.), vec2(0.25, 0.051)));\n    mind = min(mind, sdTorus(p - vec3(-9.2, 1.2, 0.), vec2(0.25, 0.061)));  // B\n    \n    mind = min(mind, sdCapsule(p, vec3(-8.4, 2., 0.), vec3(-8.4, 1., 0.), .05));\n    mind = min(mind, sdCapsule(p, vec3(-8.4, 1., 0.), vec3(-7.8, 1., 0.), .05));\n    mind = min(mind, sdCapsule(p, vec3(-7.8, 2., 0.), vec3(-7.8, 1., 0.), .05)); // U\n    \n    mind = min(mind, sdCapsule(p, vec3(-7., 2., 0.), vec3(-7., 1., 0.), .1));\n    mind = min(mind, sdCapsule(p, vec3(-7.4, 2., 0.), vec3(-6.6, 2., 0.), .1)); // T\n    \n    mind = min(mind, sdCapsule(p, vec3(-6., 2., 0.), vec3(-6., 1., 0.), .1));\n    mind = min(mind, sdCapsule(p, vec3(-6.4, 2., 0.), vec3(-5.6, 2., 0.), .1)); // T\n    \n    mind = min(mind, sdCapsule(p, vec3(-5., 2., 0.), vec3(-5., 1., 0.), .1));\n    mind = min(mind, sdCapsule(p, vec3(-5., 1.5, 0.), vec3(-4.2, 1.5, 0.), .1));\n    mind = min(mind, sdCapsule(p, vec3(-5., 2., 0.), vec3(-4.2, 2., 0.), .1));\n    mind = min(mind, sdCapsule(p, vec3(-5., 1., 0.), vec3(-4.2, 1., 0.), .1)); // E\n    \n    mind = min(mind, sdCapsule(p, vec3(-3.8, 1., 0.), vec3(-3.8, 2., 0.), .1));\n    mind = min(mind, sdTorus(p - vec3(-3.5, 1.8, 0.), vec2(0.3, 0.1)));\n    mind = min(mind, sdCapsule(p, vec3(-3.8, 1.6, 0.), vec3(-3.2, 1., 0.), .1)); // R\n\n    mind = min(mind, sdCapsule(p, vec3(-7.8, 0.5, 0.), vec3(-7.2, 0.5, 0.), .1));\n    mind = min(mind, sdCapsule(p, vec3(-7.5, 0.5, 0.), vec3(-7.5, -0.5, 0.), .1));\n    mind = min(mind, sdCapsule(p, vec3(-7.9, -0.5, 0.), vec3(-7.5, -0.5, 0.), .1));\n    mind = min(mind, sdCapsule(p, vec3(-7.9, -0.5, 0.), vec3(-7.9, -0.3, 0.), .1)); // J\n    \n    mind = min(mind, sdCapsule(p, vec3(-7., -0.5, 0.), vec3(-7., 0.5, 0.), .1));\n    mind = min(mind, sdCapsule(p, vec3(-7., 0.5, 0.), vec3(-6.2, 0.5, 0.), .1));\n    mind = min(mind, sdCapsule(p, vec3(-7., -0.5, 0.), vec3(-6.2, -0.5, 0.), .1));\n    mind = min(mind, sdCapsule(p, vec3(-7., 0., 0.), vec3(-6.2, 0., 0.), .1)); // E\n    \n\tmind = min(mind, sdCapsule(p, vec3(-5.8, 0.5, 0.), vec3(-5.8, -.5, 0.), .1));\n    mind = min(mind, sdCapsule(p, vec3(-5.8, -0.5, 0.), vec3(-5.4, -.5, 0.), .1)); // L\n\n  \tmind = min(mind, sdCapsule(p, vec3(-5., 0.5, 0.), vec3(-5., -.5, 0.), .1));\n    mind = min(mind, sdCapsule(p, vec3(-5., -0.5, 0.), vec3(-4.6, -.5, 0.), .1)); // L\n    \n    mind = min(mind, sdCapsule(p, vec3(-3.4, 0.5, 0.), vec3(-3.8, -.0, 0.), .1));\n    mind = min(mind, sdCapsule(p, vec3(-4.2, 0.5, 0.), vec3(-3.8, -.0, 0.), .1));\n    mind = min(mind, sdCapsule(p, vec3(-3.8, 0.0, 0.), vec3(-3.8, -.5, 0.), .1)); // Y\n    \n    mind = min(mind, sdCapsule(p, vec3(2., 3.5, 0.), vec3(2., 2.0, 0.), .1));\n    mind = min(mind, sdCapsule(p, vec3(1.3, 3.5, 0.), vec3(2.6, 3.5, 0.), .1)); // T\n    \n    mind = min(mind, sdCapsule(p, vec3(2.6, 2.5, 0.), vec3(2.6, 2.0, 0.), .1));\n    mind = min(mind, length(p-vec3(2.6, 2.9, 0.)) - .1); // I\n    \n\tmind = min(mind, sdCapsule(p, vec3(3., 3.1, 0.), vec3(3., 2.3, 0.), .1));\n\tmind = min(mind, sdCapsule(p, vec3(3., 3.1, 0.), vec3(3.4, 2.7, 0.), .1));\n    mind = min(mind, sdCapsule(p, vec3(3.8, 3.1, 0.), vec3(3.4, 2.7, 0.), .1));\n    mind = min(mind, sdCapsule(p, vec3(3.8, 3.1, 0.), vec3(3.8, 2.3, 0.), .1)); // M\n\n    mind = min(mind, sdCapsule(p, vec3(4.2, 2., 0.), vec3(4.2, 3.5, 0.), .1));\n    mind = min(mind, sdCapsule(p, vec3(4.2, 2., 0.), vec3(5.2, 2., 0.), .1));\n    mind = min(mind, sdCapsule(p, vec3(4.2, 2.7, 0.), vec3(5.2, 2.7, 0.), .1));\n    mind = min(mind, sdCapsule(p, vec3(4.2, 3.5, 0.), vec3(5.2, 3.5, 0.), .1)); // E\n\n    return (mind);\n}\n","name":"Image","description":"","type":"image"}]}