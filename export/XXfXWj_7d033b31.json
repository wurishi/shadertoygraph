{"ver":"0.1","info":{"id":"XXfXWj","date":"1728579183","viewed":30,"name":"[live] Fractal Malder ","username":"kukovisuals","description":"mandelbrot","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* \n   Property of Kuko Visuals \n   This shader code is intended for non-commercial use only.\n*/\n\nfloat calculateMandelbrotSet(vec2 complexPoint, out float edgeFactor, float iTime) {\n    const float escapeRadius = 256.0;\n    float iterationCount = 0.0;\n    vec2 z = vec2(0.0);\n    edgeFactor = 1.0; // Initialize edge factor\n    float m = 1.0;\n    complexPoint += 0.000005 * vec2(sin(5.0 * complexPoint.y + iTime), cos(1.0 * complexPoint.x + iTime));\n    \n    for (int i = 0; i < 512; i++) {\n        z = vec2(z.x * z.x - z.y * z.y, 2.0*z.x*z.y) + complexPoint;\n        if(dot(z, z) > (escapeRadius * escapeRadius)) break;\n        iterationCount += 1.0;\n\n        float currentEdgeFactor1 = abs(z.x) + 0.5 * fract(max(abs(z.x), abs(z.y)) * 0.06 + iTime * 0.04 + float(i) * 30.02);\n        edgeFactor = min(edgeFactor, currentEdgeFactor1);\n        m = min(m, abs(z.y));\n    }\n\n    // Apply the exponential scaling to edgeFactor to enhance visibility\n    edgeFactor = exp(-16.0 * edgeFactor) * 4.6;\n\n    if(iterationCount > 511.0) return 0.0;\n\n    // Smooth iteration count\n    float smoothIterationCount = iterationCount - log2(log2(dot(z,z))) + 4.0 +m*.2;;\n\n    return smoothIterationCount;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    vec2 normalizedCoords = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n    // Oscillation zoom effect with range from 0.0001 to 0.1\n    float zoomFactor = 0.01 + 0.00599 * (0.5 + 0.5 * sin(iTime * 0.05));\n     // Center of the zoom\n    vec2 zoomCenter = vec2(-0.796, 0.1614);\n\n    // Adjust coordinates based on the zoom factor\n    vec2 adjustedCoords = (normalizedCoords - zoomCenter) * zoomFactor + zoomCenter;\n\n    // Rotation effect\n    float angle = iTime * 0.05; // Adjust for a subtle rotation\n    mat2 rotMat = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n\n    // Apply rotation around the zoom center\n    vec2 rotatedCoords = rotMat * (adjustedCoords - zoomCenter) + zoomCenter;\n\n    float edgeFactor;\n\n    float iteration = calculateMandelbrotSet(rotatedCoords, edgeFactor, iTime);\n\n     // Define colors for the edge effect\n    vec3 baseColor = vec3(0.0, 0.0, 0.0); // Black for the Mandelbrot set\n    vec3 edgeColorBlue = vec3(0.0, 0.4, 0.6); // Blue for the edge\n    vec3 edgeColorGreen = vec3(0.0, 0.3, 0.5); // Green for the edge\n\n    // Apply edge color based on edgeFactor\n    vec3 color = mix(baseColor, edgeFactor < 0.5 ? edgeColorBlue : edgeColorGreen, clamp(edgeFactor, 0.0, 1.0));\n    //color += 0.5 + 0.5 * cos(0.0 + iteration * 0.04 + vec3(0.4, 0.0, 0.0));\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}