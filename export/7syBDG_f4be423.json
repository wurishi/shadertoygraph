{"ver":"0.1","info":{"id":"7syBDG","date":"1658775761","viewed":98,"name":"Simple labyrinth 2","username":"maze_maze","description":"A procedurally generated labyrinth\nThis is a slightly modified version of this the labyrinth I created before https://www.shadertoy.com/view/NdyfDy","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["procedural","hash","maze","labyrinth"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Noise function from my other post https://www.shadertoy.com/view/fdKBDV\n#define N(P) (P.x * 676769 ^ P.y * 53769) * 676769\n\nvoid mainImage(out vec4 C, in vec2 U) {\n\tivec2 I = ivec2(U / 8. + iTime * 4.),\n        F = I / 2,\n        J = I & 1,\n        K = 1 - J;\n\t\n\tC = vec4(J.x & J.y | N(F) * (K.x & J.y) | (1 - N(F)) * (J.x & K.y));\n}\n\n/* 165 chars\n\nvoid mainImage(out vec4 C, in vec2 U) {\n\tivec2 I = ivec2(U) / 8,\n        F = I / 2,\n        J = I & 1,\n        K = 1 - J;\n        \n    int V = (F.x * 676769 ^ F.y * 53769) * 676769;\n\t\n\tC = vec4(J.x & J.y | V * (K.x & J.y) | (1 - V) * (J.x & K.y));\n}\n\n*/\n\n/* The original\n\n// Noise function from my other post https://www.shadertoy.com/view/fdyBDy\nfloat noise2D(uvec2 pos) {\n\treturn float((pos.x * 68657387u ^ pos.y * 361524851u + pos.x) % 890129u) / 890128.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tuvec2 uv = uvec2(fragCoord / 8.0 + iTime * 4.0);\n\t\n\t// uv with the negative numbers\n\t// uvec2 uv = uvec2(ivec2(floor(fragCoord / 8.0 + iTime * 4.0 - 128.0)));\n\n\tuvec2 uv2 = uv / 2u;\n\tbool xo = bool(uv.x & 1u);\n\tbool yo = bool(uv.y & 1u);\n\t\n\tfragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\tif (xo && yo) {\n\t\tfragColor = vec4(1.0);\n\t} else if (noise2D(uv2) > 0.5) {\n\t\tif (!xo && yo) { // Horizontal corridor\n\t\t\tfragColor = vec4(1.0);\n\t\t}\n\t} else {\n\t\tif (xo && !yo) { // Vertiacal corridor\n\t\t\tfragColor = vec4(1.0);\n\t\t}\n\t}\n}\n\n*/","name":"Image","description":"","type":"image"}]}