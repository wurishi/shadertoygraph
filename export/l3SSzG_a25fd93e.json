{"ver":"0.1","info":{"id":"l3SSzG","date":"1710737528","viewed":74,"name":"glowing dotted cube","username":"akr51","description":"I'm not happy with the glow effect, think it could be better. Anyone know how to make it more bright and powerful?","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n\nvec3 rot3(vec3 axis, vec3 p, float theta)\n{\n\n\n    return mix(dot(axis, p) * axis, p, cos(theta)) + cross(axis, p) * sin(theta);\n\n}\n\n\nfloat cube(vec3 p, vec3 shape, vec3 position)\n{\n \n    p -= position;\n    p = abs(p) - shape;\n   \n \n    return length(max(p, 0.0)) + min(max(p.x, max(p.y, p.z)), 0.0);\n\n}\n\n\n\n\nfloat scene(vec3 origin, vec3 direction, float tt)\n{\n    int iterations = 64;\n    float d = 0.0;\n    float t = 0.0;\n    float raymax = 16.0;\n    \n    for (int i = 0; i < iterations; ++i)\n    {\n    \n        \n        vec3 p = origin + t * direction;\n        \n        p = rot3(vec3(0.0, 1.0, 0.0), p, tt);\n        p = rot3(vec3(0.0, 0.0, 1.0), p, tt * 0.75);\n        \n        float d = cube(p, vec3(0.2), vec3(0.0));\n        \n        if (d < 0.01)\n        {\n        \n\n            break;\n            \n        \n        }\n        \n        if (d > raymax)\n        {\n        \n            return 0.001;\n            break;\n        \n        \n        }\n        \n        t += d;\n    \n    }\n\n    return t;\n\n}\n\n\n\n\nvec3 noise3(float t)\n{\n\n    \n    return tan(vec3(sin(t * 252.0 + iTime), sin(t * 142.0 + iTime), sin(t * 1042.0 + iTime))) * 0.0125;\n\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    \n    vec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n    uv.x *= (iResolution.x / iResolution.y);\n    \n    vec3 origin    = vec3(0.0, 0.1, -1.0);\n    vec3 fixation  = vec3(uv, 1.0);\n    vec3 direction = normalize(fixation - origin); \n    \n    vec3 color = vec3(0.01);\n   \n    float t = 0.0;\n    \n    float tt = iTime * 0.5;\n    \n    float d = 0.0;\n    float f = 0.0;\n    for (int i = 0; i < 23; i++)\n    {\n    \n        d += scene(origin + noise3(f), direction, tt);\n        f += 1.1;\n    }\n    \n    \n    d /= 10.0;\n    \n    color.g = pow(0.6 / distance(vec3(uv * 0.6, -1.0), origin * d), 7.0);\n    uv.x = sin(uv.x * 24.0 + iTime) * 3.0 + uv.x;\n    uv.y = cos(uv.y * 24.0 + iTime) * 3.0 + uv.y;\n    color += pow(0.8 / distance(vec3(uv * 0.6, -1.0), origin * d), 23.0);\n    \n    fragColor = vec4(color, 1.0);\n    \n}","name":"Image","description":"","type":"image"}]}