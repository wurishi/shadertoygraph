{"ver":"0.1","info":{"id":"ltSSRz","date":"1440971930","viewed":258,"name":"Waved and sphered and shaded tex","username":"Seyro97","description":"This is the first time I do this. I think that this result is nice","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["texture","shaded","waved","sphered"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"#define M_2_PI 0.63661977236\n#define M_PI2  1.57079632679\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 uv = fragCoord / iResolution.xy;\n    vec2 mousePos = iMouse.xy / iResolution.xy;\n    \n    // Sphere properties:\n    float radio = 0.2;\n    \n    uv.y *= iResolution.y / iResolution.x;\n    mousePos.y *= iResolution.y / iResolution.x;\n    \n    uv.x += 0.0023*sin(120.0*uv.y + 3.9*iTime); // Wave Effect\n    uv.x -= 0.0022*sin(240.0*uv.x - 7.8*iTime);\n    \n    uv.y -= 0.0023*sin(150.0*uv.y + 5.2*iTime);\n    uv.y -= 0.0021*sin(75.0*uv.y - 2.6*iTime);\n    \n    if(length(uv - mousePos) <= radio) { // Sphere Effect\n        float newLength;\n        vec3 sphereNormal;\n\t\tvec3 rayDirection;\n\t\tfloat angle;\n        \n        uv -= mousePos;\n        \n        sphereNormal.x = uv.x;\n\t\tsphereNormal.y = uv.y;\n\t\tsphereNormal.z = sqrt(radio*radio - length(uv)*length(uv));\n        \n        newLength = radio * (1.0 - M_2_PI*acos(length(uv)/radio));\n\t\tuv /= length(uv);\n\t\tuv *= newLength;\n\t\tuv += mousePos;\n        \n        rayDirection = vec3(-mousePos + vec2(0.5, 0.5 * iResolution.y / iResolution.x), 0.1);\n\t\t\n\t\tangle = acos(((sphereNormal.x * rayDirection.x) + (sphereNormal.y * rayDirection.y) + (sphereNormal.z * rayDirection.z)) / (length(sphereNormal) * length(rayDirection)));\n\t\t\n\t\tif(angle <= M_PI2)\n\t\t\tfragColor = texture(iChannel0, uv);\n\t\telse\n\t\t\tfragColor = vec4(0.5 * texture(iChannel0, uv).rgb, 1.0);\n    } else {\n    \tuv = fragCoord / iResolution.xy;\n        uv.y *=  iResolution.y / iResolution.x;\n        fragColor = texture(iChannel0, uv);\n    }\n}","name":"","description":"","type":"image"}]}