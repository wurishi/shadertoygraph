{"ver":"0.1","info":{"id":"llGcWw","date":"1536496891","viewed":635,"name":"yuv <-> rgb reprojection","username":"pyBlob","description":"Left side shows YUV(0..1, -.6 .. +.6) -> RGB conversion and that most of the yuv-values produce invalid rgb-values.\nIt renders slices of the RGB cube with constant Y sweeping back and forth.\n\nRight side is RGB -> YUV (low contrast, because not all used).","likes":1,"published":3,"flags":32,"usePreview":0,"tags":["color","space","rgb","yuv"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// SDTV with BT.601 tables\n// taken from https://en.wikipedia.org/wiki/YUV\n\nmat3 yuv = mat3(\n    0.299, 0.587, 0.114,\n    -0.14713, -0.28886, 0.436,\n    0.615, -0.51499, -0.10001\n);\n\nmat3 rgb = mat3(\n    1, 0, 1.13983,\n    1, -0.39465, -0.58060,\n    1, 2.03211, 0\n);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float time = sin(iTime)*0.5+0.5;\n    \n    uv.x *= 2.;\n    vec3 col;\n\n    if (uv.x < 1.)\n    {\n        col = vec3(uv, time);\n        col = col.zxy;\n        col.yz -= .5;\n        col.yz *= 1.2;\n        col = col * rgb;\n    }\n    else\n    {\n        uv.x -= 1.;\n\n        float a = atan(uv.y, uv.x);\n        col = vec3(uv, time);\n        col = col * yuv;\n        col.yz /= 1.2;\n        col.yz += .5;\n        col = col.yzx;\n    }\n    \n    float fmax = max(col.x, max(col.y, col.z));\n    float fmin = min(col.x, min(col.y, col.z));\n    if (fmax > 1. || fmin < 0.)\n        col = mix(vec3(0.5), texture(iChannel0, fragCoord/iResolution.xy).xyz, 0.999);\n\n    fragColor = vec4(col, 1);\n}","name":"Buffer A","description":"","type":"buffer"}]}