{"ver":"0.1","info":{"id":"DdXBz4","date":"1688482101","viewed":93,"name":"Flood Fill Selector","username":"luckyballa","description":"Playing with flooding :)\n\nSelect mask you want to fill with the mouse ","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["2d","paper","flooding","floodfill","segmantation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n\n    vec4 normal = getNormal(uv * 10.0);\n    uv += normal.xy * 0.0025;  \n    float l = normal.w * 0.01 + 0.99;  \n\n    vec3 val = texture(iChannel0, uv, 2.0).xyz;\n    vec3 valB = texture(iChannel0, uv, 0.0).xyz;\n    vec3 col = vec3(0.7);\n    float shape = val.z <= 0.1 ? 1.0 : 0.0;\n    col = mix(col , vec3(0.85), shape);\n    float v = smoothstep(0.0, 0.2, valB.y);\n    col = mix(col , vec3(1.0, 0.5, 0.0) * shape, v);\n    col += v * ((1.0 - shape) - vec3(abs(val.z - valB.z)) * 0.5) * 0.85;\n    col += val.x;\n    col += noise(uv * 1000.0) * 0.1;\n    col *= l;\n\n    fragColor = vec4(col, 1.0);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 val = texelFetch(iChannel0, ivec2(fragCoord), 0).xy;\n    vec2 uv = fragCoord / iResolution.xy; \n    vec2 p = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 m = (iMouse.xy-.5*iResolution.xy)/iResolution.y;\n\n    val.x = length(p - m) < 0.01 ? 1.0 : 0.0;\n    \n    float maxVal = 0.0;\n    float neighborRadius = 4.0; \n    for(int dx = 0; dx < 8; dx++){\n        if (maxVal == 1.0) { break; }\n        for(int dy= 0; dy < 8; dy++){\n            if(dx==0 && dy==0) continue; \n\n            vec2 off = round(vec2(dx, dy) / 2.0);\n            vec2 dSign = vec2(dx % 2 == 0 ? -1.0 : 1.0, dy % 2 == 0 ? 1.0 : -1.0);\n            vec2 neighborCoord = fragCoord + off * dSign * neighborRadius;\n            vec2 neighbor = texelFetch(iChannel0, ivec2(neighborCoord), 0).xy;\n            vec2 uv = (neighborCoord / iResolution.xy); \n            vec2 p = (neighborCoord-.5*iResolution.xy) / iResolution.y;\n\n            if (mask(iChannel2, p, uv, 0.1, iTime) < 0.1) {\n                if (neighbor.x == 1.0) {\n                    val.y = 1.0;\n                    maxVal = val.y;\n                    break;\n                } else if (neighbor.y > 0.0) {\n                    maxVal = max(maxVal, neighbor.y * 0.96);\n                }\n             }\n        }\n    }\n    \n    if (val.x == 0.0) {\n        val.y = maxVal;\n    }\n    \n    fragColor = vec4(val, mask(iChannel2, p, uv, 0.1, iTime), 0.0);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"float rand(vec2 n) {\n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);     \n}      \n\n float noise(vec2 n) { \n  \tconst vec2 d = vec2(0., 1.0); \n \tvec2 b = floor(n),  f = smoothstep(vec2(0.1), vec2(1), fract(n));\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n\nfloat fbm(vec2 n) {\n    float sm = 3.0;\n    float total = 0.0, amplitude = 1.0 - sm;\n    for (int i = 0; i < 3; i++) {\n        total += noise(n) * amplitude;\n        n += n;\n        amplitude *= 0.5 * (1. - sm);\n    }\n    return total;\n}\n\nvec4 getNormal(vec2 uv) {\n  vec2 st = vec2(0.5);\n  float height = fbm(uv);\n  vec2 dxy = height - vec2(fbm(uv + vec2(st.x, 0.) ),  fbm(uv + vec2(0., st.y) ) );\n    \n  return vec4(normalize(vec3(dxy * 2. / st, 1.)), height);\n}\n\n#define s(x, y) step(y, x)\nfloat greenScreen(sampler2D ch, vec2 uv){\n    vec3 x = texture(ch, uv).xyz;\n \n\tvec2 c = s(vec2(x.g - x.r * x.y, x.g), 0.4);\n    \n    return c.x * c.y;\n}\n\n\nfloat mask(sampler2D ch, vec2 p, vec2 uv, float r, float t) {\n    float m = greenScreen(ch, uv);\n    float c = length(p - 0.25 + vec2(sin(t) * 0.1));\n    c = min(c, length(p + vec2(0.5, -0.25) + vec2(cos(t) * 0.2, sin(t * 2.0) * 0.2) ) + 0.05);\n\n    return min(m, c);\n}\n\n","name":"Common","description":"","type":"common"}]}