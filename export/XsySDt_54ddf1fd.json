{"ver":"0.1","info":{"id":"XsySDt","date":"1467267481","viewed":96,"name":"L2 - Gr","username":"bradleygriffith","description":"L2","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["shader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 when_eq(vec4 x, vec4 y) {\n  return 1.0 - abs(sign(x - y));\n}\n\nfloat when_eq(float x, float y) {\n  return 1.0 - abs(sign(x - y));\n}\n\n\nvec4 when_neq(vec4 x, vec4 y) {\n  return abs(sign(x - y));\n}\n\nfloat when_neq(float x, float y) {\n  return abs(sign(x - y));\n}\n\n\nvec4 when_gt(vec4 x, vec4 y) {\n  return max(sign(x - y), 0.0);\n}\n\nfloat when_gt(float x, float y) {\n  return max(sign(x - y), 0.0);\n}\n\n\nvec4 when_lt(vec4 x, vec4 y) {\n  return max(sign(y - x), 0.0);\n}\n\nfloat when_lt(float x, float y) {\n  return max(sign(y - x), 0.0);\n}\n\n\nvec4 when_ge(vec4 x, vec4 y) {\n  return 1.0 - when_lt(x, y);\n}\n\nfloat when_ge(float x, float y) {\n  return 1.0 - when_lt(x, y);\n}\n\n\nvec4 when_le(vec4 x, vec4 y) {\n  return 1.0 - when_gt(x, y);\n}\n\nfloat when_le(float x, float y) {\n  return 1.0 - when_gt(x, y);\n}\n\n\n\nfloat brightness (vec4 cSample) {\n\treturn sqrt(0.299 * pow(cSample.r, 2.0) + 0.587 * pow(cSample.g, 2.0) + 0.114 * pow(cSample.b, 2.0));\n}\n\n\nvec4 darkest(vec4 a, vec4 b) {\n    float bA = brightness(a);\n    float bB = brightness(b);\n    \n    // Bypass conditionals.\n    // `when_` functions return 0 or 1...\n\treturn (a * when_gt(bB, bA)) + (b * when_gt(bA, bB)) + (a * when_eq(bB, bA));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.y / iResolution.x;\n    \n    const int bleedWeight = 5;\n    \n    vec4 baseSample = texture(iChannel0, uv);\n    vec4 darkestSample = texture(iChannel0, uv);\n    vec2 stepUv = vec2(0.0);\n    vec4 stepSample = vec4(0.0);\n    \n    \n    for (int x = -bleedWeight; x <= bleedWeight; x++)\n    {\n        for (int y = -bleedWeight; y <= bleedWeight; y++)\n        {\t\n            stepUv = vec2(float(x), float(y)) / iResolution.xy;\n\n            stepSample = texture(iChannel0, (uv + stepUv));\n            \n            float absX = abs(float(x));\n            float absY = abs(float(y));\n            float stepOffsetX = float((bleedWeight - int(absX)) / bleedWeight);\n            float stepOffsetY = float((bleedWeight - int(absY)) / bleedWeight);\n            darkestSample = darkest(darkestSample, mix(baseSample, stepSample, (stepOffsetX + stepOffsetY) / 2.0));\n        } \n    }\n        \n\n\tfragColor = darkestSample;//texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"}]}