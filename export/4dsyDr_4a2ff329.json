{"ver":"0.1","info":{"id":"4dsyDr","date":"1487778538","viewed":137,"name":"GRAPROG - Midterms","username":"acmojado","description":"GRAPROG - Midterms (Patterns)\nUnity, Chaos, Simplicity\n\nhab merci pls i tried :(","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["patterns"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n// Select the pattern\n#define patternSelect 1\n\nfloat createPolygon(vec2 uv, int sides)\n{\n\t// Angle and radius from the current pixel\n\tfloat a = atan(uv.x,uv.y)+PI;\n\tfloat r = TWO_PI/float(sides);\n  \n\t// Shaping function that modulate the distance\n\tfloat dist = cos(floor(.5+a/r)*r-a)*length(uv);\n    \n    float value = 1. - smoothstep(0.4,0.41, dist * 3.);\n    return value;\n}\n\nfloat createPolygon2(vec2 uv, int sides)\n{\n    \n\t// Angle and radius from the current pixel\n\tfloat a = atan(uv.x,uv.y)+PI;\n\tfloat r = TWO_PI/float(sides);\n  \t\n\t// Shaping function that modulate the distance\n\tfloat dist = cos(floor(3.+a/r)*r-a)*length(uv);\n    \n    \n    float value = 1. - smoothstep(0.4,0.41, dist * 3.);\n    return value;\n}\n\nfloat createCircle(vec2 circle, vec2 uv, float radius, float parts)\n{\n    float dist = distance(circle,uv)*2.;\n    uv -= circle;\n    float angle = atan(uv.y, uv.x);\n    \n   \tangle += sin(cos(iTime)) * 3.;\n    radius = cos(parts*angle);\n        \n    float value = 1. - step(radius,dist);\n \n    return value;\n}\n\nfloat createCircle2(vec2 circle, vec2 uv, float radius, float parts)\n{\n    float dist = distance(circle,uv);\n    uv -= circle;\n    float angle = atan(uv.y, uv.x);\n    \n    radius = cos(parts*angle);\n    radius += sin(iTime);\n    radius -= cos((iTime)*3.);\n        \n    float value = 1. - step(radius,dist);\n \n    return value;\n}\n\nfloat createCircle3(vec2 circle, vec2 uv, float radius, float parts)\n{\n\tfloat dist = distance(circle, uv);\n    uv -= circle;\n    float angle = atan(uv.y, uv.x);\n    \n    radius += cos(tan(iTime));\n    \n    float value = 1. - step(radius,dist);\n    \n    return value;\n}\n\nfloat createCircle4(vec2 circle, vec2 uv, float radius, float parts)\n{\n\tfloat dist = distance(circle, uv);\n    uv -= circle;\n    float angle = atan(uv.y, uv.x);\n    \n\tangle += abs(sin(iTime));\n    radius -= floor(sin(parts*angle));\n    \n    float value = 1. - step(radius,dist);\n    \n    return value;\n}\n\nmat2 rotate2d(float angle)\n{\n\treturn mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n}\n\nmat2 scale2d(vec2 value)\n{\n\treturn mat2(value.x, 0, 0, value.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x / iResolution.y;\n    vec3 bgColor = vec3(0.0);\n    \n    if (patternSelect == 1)\n    {\n        uv *= 3.0;\n        vec2 tileID = floor(uv);\n        uv = fract(uv);\n    \tuv.x *= ratio;\n        \n        vec2 pos = vec2(0.5 * ratio,0.5);\n    \tuv -= pos;\n \t\tuv *= scale2d(vec2(abs(sin(iTime*2.) + 1.7)));\n        \n        bgColor = createPolygon(uv, 3) * vec3(1.0,0.0,0.0);\n        \n        uv *= pos * vec2(1.,2.);\n        uv *= scale2d(vec2(sin(iTime*2.) + 1.7));\n        uv *= rotate2d(abs(iTime));\n        \n        bgColor += createPolygon(uv,3) * vec3(0.0,0.0,1.0);\n    }\n    \n    else if (patternSelect == 2)\n    {\n        bgColor += vec3(0.2,0.2,0.2);\n        uv *= 3.0;\n        vec2 tileID = floor(uv);\n        uv = fract(uv);\n    \tuv.x *= ratio;\n        \n        vec2 pos = vec2(0.5 * ratio,0.5);\n    \tuv -= pos;\n        \n        \n        if(tileID.x == 0. && tileID.y == 0. ||\n       \ttileID.x == 1. && tileID.y == 1. ||\n       \ttileID.x == 2. && tileID.y == 2. ||\n       \ttileID.x == 2. && tileID.y == 0. ||\n       \ttileID.x == 0. && tileID.y == 2.)\n    \t{\n        \tuv *= rotate2d(iTime * -3.);\n            \n            \n            uv *= scale2d(vec2(2.,2.));\n        \tuv *= rotate2d(iTime * 1.2);\n        \tbgColor += createPolygon(uv, 3) * vec3 (1.,1.,1.);\n        }\n        \n        uv *= scale2d(vec2(sin(iTime)));\n        bgColor += createPolygon(uv, 15) * vec3(0.0,1.0,1.0);\n    }\n    \n    else if (patternSelect == 3)\n    {\n     \tuv *= 3.0;\n        vec2 tileID = floor(uv);\n        uv = fract(uv);\n    \tuv.x *= ratio;\n        \n        vec2 pos = vec2(0.5 * ratio,0.5);\n        \n        if(tileID.x == 0. && tileID.y == 0. || tileID.x == 1. && tileID.y == 2. || tileID.x == 2. && tileID.y == 0.)\n        {\n           uv = pos;\n           bgColor = vec3(0.,0.,0.);\n            \n           //bgColor += createPolygon(vec2(0.5 * ratio, 0.5), 3) * vec3(1.,1.,1.);\n        }\n        \n        bgColor += createCircle(vec2(0.5 * ratio,0.5), uv, 2., 3.) * vec3(1.0,1.0,1.0);                                 \n    }\n    \n \telse if (patternSelect == 4)\n    {\n        uv *= 6.;\n        uv = fract(uv);\n    \tuv.x *= ratio;\n        uv.y *= ratio;\n        \n        bgColor = createCircle2(vec2(1., 1.), uv, 0., 4.) * vec3(0.,0.7,1.);\n    }\n    \n    else if (patternSelect == 5)\n    {\n        uv *= 2.;\n        uv = fract(uv);\n        uv.x *= ratio;\n        \n        bgColor = createCircle3(vec2(0.5 * ratio , 0.5), uv, 0.01, 0.) * vec3(1.,0.7,0.3);\n    }\n    \n    else if (patternSelect == 6)\n    {\n        uv *= 100.;\n        uv = fract(uv);\n        uv.x *= ratio;\n        \n        uv *= rotate2d(abs(sin(iTime) * 2.));\n    \tuv *= scale2d(vec2(1., 1.));\n       \n        bgColor = createPolygon2(uv, 3) * vec3(1.,0.,0.);\n    }\n    \n    else if (patternSelect == 7)\n    {\n        \n    }\n    \n    else if (patternSelect == 8)\n    {\n        \n    }\n    \n    else if (patternSelect == 9)\n    {\n        \n    }\n    \n    else if (patternSelect == 10)\n    {\n        \n    }\n    \n    fragColor = vec4(bgColor,1.0);\n     \n}","name":"Image","description":"","type":"image"}]}