{"ver":"0.1","info":{"id":"MsyBRK","date":"1529505190","viewed":290,"name":"Particules 2D with buffer","username":"FlorianDuf","description":"Trying to do a particules system on shadertoy.\nTo use my particule system :\nIn Image Tab, you can find a comment : //////////// Control ////////////\nand tweak control inside.\nSame for Buff A table","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["particules2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//////////// Control ////////////\n\n#define numberParticules 900.0\n\n/////////////////////////////////\n\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\n\n\nbool point(in vec2 p, in vec2 pRef, in float distMax)\n{\n    return distance(p, pRef) <= distMax;\n}\n\nvec4 background(in vec2 p)\n{\n\treturn mix(vec4(0.1, 0.6, 0.8, 1.0), vec4(0.0), 0.4*distance(p, vec2(0.0, 0.0)));   \n}\n\n\nfloat displayPoint(in float dist, in  float distMax)\n{\n   if ( dist <= distMax )\n       return 0.0;\n   else\n       return 1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 xy = -1.0 + 2.0*fragCoord.xy/iResolution.xy;\n    vec2 uv = xy * vec2(iResolution.x/iResolution.y, 1.0);\n    \n    vec4 displayImage = vec4(0.0); background(uv);\n\n\n    \n    for (float i = 0.0; i< numberParticules; ++i)\n    {\n        \n    \t\n        vec2 pointParticule=texture(iChannel0, vec2(i*0.001, 0.0)).xy;\n\n        if ( point (uv, pointParticule, 1.0) )\n        {\n            vec4 color = abs(0.25 * sin(0.151152*iTime) + 1.5) * vec4(hash(i),hash(i*0.2258), hash(i*56.0654), 1.0);\n            displayImage = mix(color, displayImage,pow(1.6*distance(pointParticule, uv),0.005));//vec4(hash(i),hash(i*0.2258), hash(i*56.0654), 1.0) ;//vec4(1.0);\n            displayImage = mix(color, displayImage,displayPoint(distance(pointParticule, uv), 0.004));\n        }\n    \n    }    \n    \n    // Output to screen\n    fragColor =displayImage;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define pi 3.1415926535898\n\n//////////// Control ////////////\n\n#define factorSpeed 0.01\n\n#define factorAngle 0.1\n\n////////////////////////////////\n\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\n\nbool tick(in float itime, in float tempo)\n{\n   \n    float time = itime / tempo;\n    \n    if ( time / floor(time) <= 1.01 )\n    {\n        return true;\n    }\n    else\n    {\n    \treturn false;  \n    }\n}\n\nfloat signRandom(in float seed)\n{\n    float randNum = sin(hash(seed*120.565454)*10.0);\n    if (randNum == 0.0)\n        randNum == 1.0;\n    return randNum / abs(randNum);\n}\n\nvec2 dirRandom(in float seed, in float dist)\n{\n\tfloat x = signRandom(seed) * hash(seed*0.114245);\n    float y = signRandom(seed) * hash(seed* 0.252424);\n    \n    return normalize(vec2(x,y)) * dist;\n}\n\nvec2 rotation2D(in vec2 v, in float angle)\n{\n\treturn vec2(cos(angle) * v.x  - sin(angle) * v.y, sin(angle) * v.x + cos(angle) * v.y);    \n}\n\nvec2 dirRandom2(in float seed, in vec2 oldDir, in float dist)\n{\n    float facteur = factorAngle;\n\tfloat angle = pi* hash(seed * 0.0455214);\n    angle = angle - pi/2.0;\n    \n    angle *= facteur;\n    \n    angle *= pi;\n    return normalize(rotation2D(oldDir, angle)) * dist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n    vec2 uv = fragCoord.xy/iResolution.xy;\n    if (iTime <= 0.02)\n    {\n        vec2 dir = dirRandom(uv.x, 0.01);\n    \tfragColor = vec4(0.0,0.0,dir.x, dir.y);\n    }\n    else\n    {\n        float tickTmp = 0.0;\n        if ( tick(iTime, 0.001) )\n        {\n        \t   tickTmp = 1.0;\n        }\n        \n    \t\n\n        vec4 pointData = texture(iChannel0, vec2(uv.x, uv.y));\n        vec2 pointParticule=pointData.xy;\n        vec2 pointDir = pointData.zw;\n\n        float boundX = iResolution.x/iResolution.y;\n        float boundY = 1.0;\n        if ( pointParticule.y <= -boundY )\n        {\n            pointDir = vec2(0,1.0) - pointDir;\n        }\n        if ( pointParticule.y >= boundY )\n        {\n\n            pointDir = vec2(0,-1.0) - pointDir;\n        }\n        if ( pointParticule.x >= boundX )\n        {\n\n            pointDir = vec2(-1.0,0.0) - pointDir;\n        }\n        if ( pointParticule.x <= -boundX )\n        {\n\n            pointDir = vec2(1.0,0.0) - pointDir;\n        }\n        vec2 newDir = dirRandom2(iTime * fragCoord.x, pointDir, factorSpeed);\n        pointParticule = pointParticule + newDir * tickTmp;\n\n        fragColor = vec4(pointParticule.x, pointParticule.y, newDir.x, newDir.y);\n\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}