{"ver":"0.1","info":{"id":"ttSfDR","date":"1598641774","viewed":196,"name":"Neurons shader","username":"alenmemenduf","description":"Cool shader that looks like neurons\ntutorial from Art of Code: https://www.youtube.com/watch?v=KGJUl8Teipk","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["tutorial","neurons","artofcode"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* \n   I used this tutorial:\n   https://www.youtube.com/watch?v=KGJUl8Teipk\n\n   from Art of Code in order to learn more about Shaders.\n   All rights for the code go to him. Go check him out, he's nice! :)\n*/\n#define S(a, b, t) smoothstep(a, b, t)\n\nfloat DistLine(vec2 p,vec2 a,vec2 b){\n    vec2 pa = p-a;\n    vec2 ba = b-a;\n    float t = clamp(dot(pa,ba)/dot(ba,ba),0.,1.);\n    return length(pa - ba*t);\n} // function that returns distance to line from a to b.\n\nfloat Line(vec2 p, vec2 a, vec2 b){\n\tfloat d = DistLine(p,a,b);\n    float m = S(0.03,0.01,d);\n    float d2 = length(a-b);\n    m *= S(1.2,.8,d2)*.3 + S(0.05,0.03,abs(d2 - 0.75));\n    return m;\n} // function that draws a line from a to b.\n\nfloat N21(vec2 point){\n\tpoint = fract(point * vec2(233.34,851.73));\n    point+= dot(point, point + 23.45);\n    return fract(point.x*point.y);\n} // function that returns a pseudo-random number.\n\nvec2 N22(vec2 p){\n\tfloat n = N21(p);\n    return vec2(n,N21(p+n));\n} // function that returns a vector of 2 pseudo-random numbers.\n\nvec2 GetPos(vec2 id, vec2 offs, float speedMultiplier){\n    return offs + sin(N22(id + offs) * iTime * speedMultiplier) * 0.4;\n} // returns position of point in it's grid.\n\nfloat Layer(vec2 uv){\n    float m = 0.;\n\tvec2 gv = fract(uv) - 0.5;\n    vec2 id = floor(uv);\n    \n    float speedMultiplier = 0.7;\n    vec2 p[9];\n    int i = 0;\n    for(float y=-1.; y<=1.; y++){\n        for(float x=-1.; x<=1.; x++){\n            p[i++] = GetPos(id,vec2(x,y), speedMultiplier);\n        }\n    }\n    \n    for(int i=0;i<9;i++){\n    \tm += Line(gv, p[4],p[i]);\n        \n        vec2 j = (p[i] - gv) *20.;\n        float sparkle = 1./dot(j,j);\n        m+= sparkle*(sin((iTime+fract(p[i].x))*10.)*.5+.5);\n    }\n    \n    m += Line(gv,p[1],p[3]);\n    m += Line(gv,p[1],p[5]);\n    m += Line(gv,p[3],p[7]);\n    m += Line(gv,p[5],p[7]);\n    \n    return m;\n} // function that returns a layer.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 mouse = (iMouse.xy/iResolution.xy) - .5;\n    \n    float gradient = uv.y;\n    float m = 0.;\n    float t = iTime * .1;\n    \n    // rotation\n    float s = sin(t);\n    float c = cos(t);\n    mat2 rot = mat2(c,-s,s,c);\n    uv *= rot;\n    mouse *= rot;\n    \n    // drawing each layer, we have X layers and we iterrate the for with 1/X\n    for(float i=0.;i<1.;i+=1./4.){\n    \tfloat z = fract(i+t);\n        float size = mix(10.,.5,z);\n        float fade = S(0.,0.4,z) * S(1.,.7,z);\n        m += Layer(uv*size + i*20. - mouse) * fade;\n    }\n    \n    vec3 base = sin(t*10.*vec3(.245,.845,.567))*.4 +.6;\n    vec3 col = m*base;\n    col -= gradient*base;\n    \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}