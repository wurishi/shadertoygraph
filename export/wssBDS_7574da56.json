{"ver":"0.1","info":{"id":"wssBDS","date":"1589020157","viewed":239,"name":"Orbit trapping","username":"MeHigh_","description":"Julia set","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["antialiasing","fractals","orbit"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define AA 5\n#define PI 3.14159\n\nfloat fractal(vec2 z, vec2 b) {\n\tfloat trap1 = 1e20;\n    \n    for(int i = 0; i < 128; ++i) {\n    \tz = vec2(z.x * z.x - z.y * z.y, 2. * z.x * z.y) + b;\n        trap1 = min(trap1,abs(dot(z.xyx, z.yxy)));\n        //trap1 = min(trap1, dot(z, z));\n        //trap1 = min(trap1, abs(z.y));\n    }\n\treturn trap1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec3 col = vec3(0.);\n    float t = iTime;\n    for(int m = 0; m < AA; ++m) \n    for(int n = 0; n < AA; ++n) \n    {\n    float aspect = 4. / 3.;\n    vec2 uv = aspect * (2. * (fragCoord + vec2(float(m), float(n)) / float(AA)) - iResolution.xy)/iResolution.y;\n    uv = vec2(0.53, -.2)  + uv * pow( 0.8, 30.0*(0.5+0.5*cos(0.05*t)) );\n    \n    float f = fractal(uv, vec2(-0.8,  .256));\n    f = 1. + log(f * 2.) / 4.;\n    \n\tcol += smoothstep(.2, -.2, vec3(f*f, f, f*f*f));    \n    col += smoothstep(.25, -.25, vec3(f, .5 * f*f, 0.1*f));\n    }\n    \n    //gamma correction\n    //col = pow(col, vec3(.4545));\n    col /= float(AA*AA);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}