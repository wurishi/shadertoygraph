{"ver":"0.1","info":{"id":"WlsyWs","date":"1593449788","viewed":145,"name":"Unordered dithering","username":"tachiweasel","description":"Dithering to simulate alpha transparency without a regular dither pattern","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["dither","dithering","alpha"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://gist.github.com/badboy/6267743\nuint hash32shift(uint key){\n  key = ~key + (key << 15); // key = (key << 15) - key - 1;\n  key = key ^ (key >> 12);\n  key = key + (key << 2);\n  key = key ^ (key >> 4);\n  key = key * 2057u; // key = (key + (key << 3)) + (key << 11);\n  key = key ^ (key >> 16);\n  return key;\n}\n\nvoid mainImage(out vec4 outFragColor, in vec2 fragCoord) {\n    uint hash = hash32shift(uint(fragCoord.x));\n    hash = hash32shift(hash ^ uint(fragCoord.y));\n\n    float alpha = sin(iTime * 1.5) * 0.5 + 0.5;\n    uint threshold = uint(alpha * 4294967295.0);\n\n    vec2 uv = fragCoord / iResolution.xy;\n    vec4 color;\n    if (hash < threshold)\n        color = texture(iChannel0, uv);\n   \telse\n        color = texture(iChannel1, uv);\n\n    // Output to screen\n    outFragColor = color;\n}\n","name":"Image","description":"","type":"image"}]}