{"ver":"0.1","info":{"id":"cllGD7","date":"1671863416","viewed":59,"name":"Quadratic Bezier but lame","username":"pavleeto","description":"Draw quadratic Bezier curve\nCredit goes to The Art of Code:\nhttps://www.youtube.com/watch?v=a4zMX6dDVXI","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sdf","bezier"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float segment(vec2 uv, vec2 st, vec2 en)\n{\n    float t = clamp(dot(uv-st, en-st) / dot(en-st, en-st), 0., 1.); \n    return smoothstep(0.0, 0.01, - (length(uv - st - t * (en-st)) - 0.02));\n}\n\nfloat circle(vec2 uv, vec2 c)\n{\n    return smoothstep(0.001, 0.0, length(uv - c) - 0.05);\n}\n\nvec2 bz(vec2 st, vec2 en, vec2 ct, float t)\n{\n    return mix(mix(st, ct, t), mix(ct, en, t), t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // center 0.0 and aspect ratio fix\n    vec2 uv = (fragCoord-iResolution.xy/2.0)/iResolution.x;\n    uv *= 10.0; // zoom out\n\n    vec2 A = vec2(-2.0,  0.0);\n    vec2 B = vec2(-0.0, -2.0);\n    vec2 C = 2.0 * vec2(cos(iTime*1.5), sin(iTime*1.5));\n\n    vec3 col = vec3(0.0) ;\n    col += vec3(1.0, 0.0, 0.0) * circle(uv, A);\n    col += vec3(0.0, 1.0, 0.0) * circle(uv, B);\n    col += vec3(0.0, 0.0, 1.0) * circle(uv, C);\n    \n    const int N_SEGS = 25;\n    vec2 cur = vec2(0.0);\n    vec2 prev = A;\n    for (int i=1; i<=25; ++i)\n    {\n        float t = float(i) / float(N_SEGS);\n        cur = bz(A, B, C, t);\n        //col += segment(uv, prev, cur);\n        col = max(col, segment(uv, prev, cur));\n        //prev = cur;\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}