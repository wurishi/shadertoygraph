{"ver":"0.1","info":{"id":"tdcBDs","date":"1606250543","viewed":347,"name":"Playing paradox","username":"Carandiru","description":"watch for at least 100 seconds (fork of https://www.shadertoy.com/view/MtX3Ws)\n\neveryone, everything\nis in paradox with itself\nthis maintains the universal balance\nso it can exist\n\nthe least have the greatest\nthe greatest have the least","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["3d","fractal","volumetric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rr","filepath":"/media/a//media/previz/cubemap00.png","previewfilepath":"/media/ap//media/previz/cubemap00.png","type":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// watch for at least 100 seconds (fork of https://www.shadertoy.com/view/MtX3Ws)\n\n// everyone, everything\n// is in paradox with itself\n// this maintains the universal balance\n// so it can exist\n\n// Fork of \"Playing marble\" by guil. https://shadertoy.com/view/MtX3Ws\n// 2020-11-24 19:32:26\n\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Created by S. Guillitte 2015\n\nfloat zoom=1.;\n\nvec2 cmul( vec2 a, vec2 b )  { return vec2( a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x ); }\nvec2 csqr( vec2 a )  { return vec2( a.x*a.x - a.y*a.y, 2.*a.x*a.y  ); }\n\n\nmat2 rot(float a) {\n\treturn mat2(cos(a),sin(a),-sin(a),cos(a));\t\n}\n\nvec2 iSphere( in vec3 ro, in vec3 rd, in vec4 sph )//from iq\n{\n\tvec3 oc = ro - sph.xyz;\n\tfloat b = dot( oc, rd );\n\tfloat c = dot( oc, oc ) - sph.w*sph.w;\n\tfloat h = b*b - c;\n\tif( h<0.0 ) return vec2(-1.0);\n\th = sqrt(h);\n\treturn vec2(-b-h, -b+h );\n}\n\nfloat map(in vec3 p, in vec3 rd) {\n\t\n\tfloat res = 0.;\n\t\n    vec3 c = p;\n\tfor (int i = 0; i < 10; ++i) {\n        \n        vec3 nor = p * 0.5f;\n        nor = reflect(rd, normalize(nor)); \n        \n        nor = texture(iChannel0, nor).xyz;\n        \n        res += abs(dot(nor,c));\n        \n\t}\n\treturn res/2.;\n}\n\n\n\nvec3 raymarch( in vec3 ro, vec3 rd, vec2 tminmax )\n{\n    float t = tminmax.x;\n    float dt = .02;\n    //float dt = .2 - .195*cos(iTime*.05);//animated\n    vec3 col= vec3(0.);\n    float c = 0.;\n    for( int i=0; i<64; i++ )\n\t{\n        t+=dt*exp(-2.*c);\n        if(t>tminmax.y)break;\n        vec3 pos = ro+t*rd;\n        \n        c = map(ro+t*rd, rd);               \n        \n        col = .99*col+ .08*vec3(c*c, c*c*c, c);//blue\n    }    \n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat time = iTime;\n    vec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x/iResolution.y;\n    vec2 m = vec2(0.);\n\tif( iMouse.z>0.0 )m = iMouse.xy/iResolution.xy*3.14;\n    m-=.5;\n\n    // camera\n\n    vec3 ro = zoom*vec3(4.);\n    ro.yz*=rot(m.y);\n    ro.xz*=rot(m.x+ 0.1*time);\n    vec3 ta = vec3( 0.0 , 0.0, 0.0 );\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    vec3 rd = normalize( p.x*uu + p.y*vv + 4.0*ww );\n\n    \n    vec2 tmm = iSphere( ro, rd, vec4(0.,0.,0.,2.) );\n\n\t// raymarch\n    vec3 col = raymarch(ro,rd,tmm);\n    if (tmm.x<0.)col = texture(iChannel0, rd).rgb;\n    else {\n        vec3 nor=(ro+tmm.x*rd)/2.;\n        nor = reflect(rd, nor);        \n        float fre = pow(.5+ clamp(dot(nor,rd),0.0,1.0), 5. );\n        col += texture(iChannel0, nor).rgb * fre;\n    \n    }\n\t\n\t// shade\n    \n    col =  .5 *(log(1.+col));\n    col = clamp(col,0.,1.);\n    fragColor = vec4( col, 1.0 );\n\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dX3Rr","channel":0}],"code":"void mainCubemap( out vec4 fragColor, in vec2 fragCoord, in vec3 rayOri, in vec3 rayDir )\n{\n    vec2 uv = rayDir.xy / (rayDir.z);//sin(rayDir.xy + rayDir.z) - cos(rayDir.xy + rayDir.z);\n \n    float tT = iTime + 4.0f;\n    float shade = texture(iChannel0, (normalize(uv + vec2(tT,tT))/tT) * 0.5f + 0.5f).r;\n    \n    shade = 0.16f * shade;\n    \n    // Output to cubemap\n    fragColor = vec4(vec3(shade),1.0);\n}","name":"Cube A","description":"","type":"cubemap"}]}