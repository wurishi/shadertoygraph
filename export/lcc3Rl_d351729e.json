{"ver":"0.1","info":{"id":"lcc3Rl","date":"1712029656","viewed":15,"name":"Project 3: Hard","username":"mirae","description":"oop","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["school"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Background\n    vec3 bottomLeftColor = vec3(4.0 / 255.0, 255.0 / 255.0, 128.0 / 255.0);\n    vec3 topRightColor = vec3(1.0 / 255.0, 129.0 / 255.0, 255.0 / 255.0);\n    \n    vec2 normalizedCoords = fragCoord.xy / iResolution.xy;\n    float gradientRatio = (normalizedCoords.x + normalizedCoords.y) / 2.0;\n    vec3 backgroundColor = mix(bottomLeftColor, topRightColor, gradientRatio);\n\n    fragColor.rgb = backgroundColor;\n    \n    // Number of tiles \n    const int tilesX = 10;\n    const int tilesY = 10;\n    \n    // Size of tiles\n    float tileSizeX = 1.0 / float(tilesX);\n    float tileSizeY = 1.0 / float(tilesY);\n    \n    // UV coordinates \n    int tileX = int(fragCoord.x / tileSizeX);\n    int tileY = int(fragCoord.y / tileSizeY);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv.x = fract(uv.x * float(tilesX));\n    uv.y = fract(uv.y * float(tilesY));\n    \n    // Size of square\n    float sizex = 0.5 * tileSizeY; \n    float sizey = 0.9 * tileSizeY;\n    \n    sizex *= 6.0; \n    sizey *= 6.0; \n    \n    vec2 center = vec2(0.5); \n    vec2 fromCenter = abs(uv - center);\n    \n    float isInside = step(fromCenter.x, sizex / 2.0) * step(fromCenter.y, sizey / 2.0);\n    \n    // White sqaures\n    fragColor.rgb = mix(backgroundColor, vec3(1.0), isInside);\n    \n    // Alpha channel to opaque\n    fragColor.a = 1.0;\n}","name":"Image","description":"","type":"image"}]}