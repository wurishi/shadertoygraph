{"ver":"0.1","info":{"id":"MXVGWw","date":"1717749094","viewed":45,"name":"spiral galaxy new","username":"nnew","description":"return pls nayk account=(\ncopypast","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal","spiral"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*from  https://www.shadertoy.com/view/XXKGzz https://www.shadertoy.com/view/ldBXDD https://www.shadertoy.com/view/XXKGzz*/\nconst float a=1.0;\nconst float b=.1759;\nconst float PI=3.14159265359;\n#define THICKNESS .11\n#define ARMS 4.\n#define GRID 96.\n#define COLORS 2.\n#define STARS 2.\n#define SPEED 1.5\n\nmat2 Rot(float a){\n    float s= sin(a), c=cos(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat Hash21(vec2 p){\n    p = fract(p*vec2(123.34,456.821));\n    p += dot(p,p+45.32);\n    return fract(p.x*p.y);\n}\n\nfloat spiralSDF(vec2 p,vec2 c, float phase){\n    p = p - c;\n    float t=atan(p.y, p.x) + phase;\n    float r=length(p.xy);\n    float n=(log(r/a)/b-t)/(2.*PI);\n\n    // Cap the spiral\n    float upper_r=a*exp(b*(t+2.*PI*ceil(n)));\n    float lower_r=a*exp(b*(t+2.*PI*floor(n)));\n    return min(abs(upper_r-r),abs(r-lower_r));\n}\n\n\n\nfloat Star(vec2 uv, float m, float size){\n    vec2 center = uv+vec2(fract(m),fract(m*20.));\n    float l = length((center));\n    float v = 1.;\n    // vertical trail\n    v += max(0.,1.-abs(center.x*132.));\n    // horizontal trail\n    v += max(0.,1.-abs(center.y*132.));\n    \n    float brightness = ((sin(iTime+6.283*fract(m*132.4))/2.+.5)*.01+.008)*size;\n    v *= brightness/l;\n    // add falloff\n    v*= smoothstep(.5,0.1,l);\n    v = max(0.,v);\n    return v;\n}\n\nvoid mainImage(out vec4 O,vec2 I)\n{\n    vec2 R=iResolution.xy;\n    \n    \n    vec4 o =O; \n    vec2 u =I;\n    vec2 v2 = iResolution.xy,\n         w = u = .2*(u+u-v2)/v2.y;    \n         \n    vec4 z = o = vec4(1,2,3,0);\n     \n    for (float a = .5, t = iTime, i; \n         ++i < 19.; \n         o += (1. + cos(z+t)) \n            / length((1.+i*dot(v2,v2)) \n                   * sin(1.5*u/(.5-dot(u,u)) - 9.*u.yx + t))\n         )  \n        v2 = cos(++t - 7.*u*pow(a += .03, i)) - 5.*u,         \n        \n        u += tanh(40. * dot(u *= mat2(cos(i + .02*t - vec4(0,11,33,0)))\n                           ,u)\n                      * cos(1e2*u.yx + t)) / 2e2\n           + .2 * a * u\n           + cos(4./exp(dot(o,o)/1e2) + t) / 3e2;\n              \n    o = pow(1.-exp(-o*o*o/4e2), .3*z/z) \n      - dot(w-=u,w) / 250.;\n      \n      \n    \n    vec2 uv=(2.*I-R)/R.y;\n    vec2 c = vec2(0.0,0.0);\n    mat2 rotation = Rot(-3.14159/12.);\n    // pixelate\n    uv = (uv*GRID)/GRID;\n       // pixel position normalised to [-1, 1]\n\tvec2 cPos = -1.0 + 2.0 * I.xy / iResolution.xy;\n    \n    // distance of current pixel from center\n\tfloat cLength = length(cPos);\n\n\tuv+= (cPos/cLength)*cos(cLength*1.0-iTime*4.0) * 0.03;\n   \n    float n = (Hash21(uv));\n    \n    float r = length(uv);\n    \n    vec2 uv0 = uv;\n\n    \n    float t=1.0-THICKNESS;\n    float v=0.;    \n    float phase = 2.*3.14159/ARMS;\n    for(float i = 0.;i<ARMS;i++){\n        float d = 01.-spiralSDF(uv,vec2(c),.3*SPEED*iTime+phase*i);\n     \n        float spiral = smoothstep(t,1.,d);//;pow(d, 1.32) / 0.23;\n       \n        float falloff = smoothstep(.3,.5,1.-length(uv)+.5);\n        \n        falloff *=(cos((2.1323*SPEED*iTime+phase*i))*.8 + 1.2);\n     \n        spiral *= falloff;\n        v += spiral;\n    }\n\n    \n    float beam = smoothstep(0.93,1.,max(0.,1.-length(uv.x)));\n    beam*= sin((SPEED*.4*iTime+5.6-abs(-4.-uv.y))*3.14)/8.+.75;\n    float trim = max(0.,(1.-length((uv.y-.9)/6.)));\n    v+=(beam*trim)*(.8+sin(iTime/25.)/8.);\n\n    float star = 0.;\n\n    for(float layer = 0.;layer<STARS;layer++){\n        vec2 uv1 = fract(uv0*(layer+1.))-1.; \n        vec2 id = floor(uv0*(layer+1.));\n        for(int y=-1;y<=1;y++){\n            for(int x=-1;x<=1;x++){\n                vec2 starOffset = vec2(x,y);\n                float m = Hash21(id+starOffset+layer/STARS);\n                float brightness = (1.-layer/STARS);\n                v += Star(uv1-starOffset,m,brightness)*2.5;\n            }\n        }\n    }\n    \n  \n    v*=n*2.9+.5;\n    \n    \n    float colorOffset = COLORS/(COLORS+1.);\n \n    vec3 col = texture(iChannel0,uv.xy).xyz;\n    v = floor(v*COLORS+colorOffset)/COLORS;\n    O.rgb = vec3(v*vec3(0.0,0.2,2.4)+col*o.xyz);\n   \n  \n    \n}\n","name":"Image","description":"","type":"image"}]}