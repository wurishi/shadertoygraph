{"ver":"0.1","info":{"id":"MlKXDy","date":"1485841870","viewed":88,"name":"mouse reveal","username":"connor_breen","description":"use mouse to reveal a different image\n","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["mouse","filters"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Originally by Nikos Papadopoulos, 4rknova / 2015\n// Heavily modified by Dr. Sajid Farooq, 2016\n//more filters added by Connor Breen\n//The blur matrix. Since there are 9 pixels, each weight is 1/9 = 0.111 \n// to ensure that each pixel is averaged properly\n\nfloat radius = 100.0;\n\nmat3 blur = mat3(\n 0.111, 0.111, 0.111, // first column (not row!)\n 0.111, 0.111, 0.111, // second column\n 0.111, 0.111, 0.111 // third column\n);\n\nmat3 edgeDetection = mat3(\n -1.0, -1.0, -1.0, // first column (not row!)\n -1.0, 8, -1.0, // second column\n -1.0, -1.0, -1.0 // third column\n);\n\nmat3 sharpen = mat3(\n 0., -1, 0.0, // first column (not row!)\n -1, 5, -1, // second column\n 0., -1, 0.0 // third column\n);\n\nmat3 supersharpen = mat3(\n 0., -5, 0.0, // first column (not row!)\n -5, 21, -5, // second column\n 0.,-5, 0.0 // third column\n);\n//add sampler2d to this\nvec3 sample2(const int x, const int y, in vec2 fragCoord, sampler2D tex, vec3 res)\n{\n vec2 uv = fragCoord.xy / iResolution.xy * res.xy;\n uv = (uv + vec2(x, y)) / res.xy ;\n return texture(tex, uv).xyz;\n}\nvec3 filtery(in vec2 fragCoord, mat3 kernel, sampler2D tex, vec3 res)\n{\n vec3 sum = sample2(-1, -1, fragCoord, tex, res) * kernel[0][0]\n + sample2(-1, 0, fragCoord, tex, res) * kernel[0][1]\n + sample2(-1, 1, fragCoord, tex, res) * kernel[0][2]\n + sample2( 0, -1, fragCoord, tex, res) * kernel[1][0]\n + sample2( 0, 0, fragCoord, tex, res) * kernel[1][1]\n + sample2( 0, 1, fragCoord, tex, res) * kernel[1][2]\n + sample2( 1, -1, fragCoord, tex, res) * kernel[2][0]\n + sample2( 1, 0, fragCoord, tex, res) * kernel[2][1]\n + sample2( 1, 1, fragCoord, tex, res) * kernel[2][2];\n \n return sum;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//vec2 uv = fragCoord.xy / iResolution.xy * res.xy;\n\t//uv = (uv + vec2(x, y)) / res.xy ;\n\n \tvec2 fc = fragCoord.xy;\n \n \t//vec3 cf = filter(fc, blur);\n \tvec3 cf = filtery(fc, blur, iChannel0, iChannelResolution[0]);\n \tvec3 cf2 = filtery(fc, sharpen, iChannel1, iChannelResolution[1]);\n \t\n    if (distance(iMouse.xy, fragCoord.xy) < radius)\n        fragColor = vec4(cf2,1);\n    else\n        fragColor = vec4(cf,1);\n    \n}","name":"Image","description":"","type":"image"}]}