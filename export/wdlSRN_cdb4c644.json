{"ver":"0.1","info":{"id":"wdlSRN","date":"1550770222","viewed":62,"name":"Ray Marched Sponge C0x61","username":"Confession","description":"Ray marched Menger sponge","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define FOW 0.3\n#define ZFAR 10000.0\n#define MAX_ITER 128\n#define MIN_DISTANCE 0.001\nstruct ray \n{\n\tvec3 d;\n    float pd;\n    vec3 p;\n    float min_d;\n    float i;\n};\n    \nstruct camera\n{\n\tvec3 p;\n    vec3 f;\n    vec3 u;\n    vec3 r;\n    vec3 lu;\n};\n\nfloat sphere(vec3 p)\n{\n\treturn length(p) - 0.5;\n}\n\nfloat cube(vec3 p)\n{\n\treturn length(vec3(max(max(p.x, -p.x)-1.0, 0.0), max(max(p.y, -p.y)-1.0, 0.0), max(max(p.z, -p.z)-1.0, 0.0)));\n}\n\nfloat thorus(vec3 p, float r, float r1)\n{\n\treturn length(p - vec3(normalize(p.xy)*r, 0.0)) - r1;\n}\n\nfloat cylinder(vec3 p, float h, float r)\n{\n\treturn length(vec2(max(max(p.y - h, -p.y - h), 0.0), max(length(p.xz)-r, 0.0)));\n}\n\nfloat capsule(vec3 p, float h, float r)\n{\n\treturn min(max(length(vec3(p.x, max(p.y - h, -p.y - h), p.z))-r, 0.0), cylinder(p, h, r));\n}\n\nfloat diff(float a, float b)\n{\n\treturn max(a, -b);\n}\n\nfloat DE(vec3 p)\n{\n    float d = cube(p);\n    for(int i = 0; i < 4; i++)\n    {\n\t\td = diff(d, min(min(cube(p / vec3(1./3., 3.0, 1./3.))-0.1, cube(p / vec3(1./3., 1./3.0, 3.))-0.1), cube(p / vec3(3., 1./3.0, 1./3.))-0.1));\n    \tp = p/2.0 + 0.5;\n        p *= 3.0;\n        p = mod(p,1.0);\n        p = p * 2.0 - 1.0;\n    }\n    return d;\n}\n    \nray march(ray r, float d)\n{\n\tr.p += r.d * d;\n    r.pd += d;\n    return r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.0 * fragCoord/iResolution.xy - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    vec3 col = vec3(0.0);\n    float h = 0.0;\n\tcamera c;\n    //c.p = vec3(iTime * 0.5, iTime, iTime);\n    //c.f = vec3(sin(iTime*0.1), 0.0, cos(iTime*0.1));\n    c.p = vec3(sin(iTime*0.3)*2.4, 0.0, cos(iTime*0.3)*2.4);\n    c.f = normalize(-c.p);\n    c.u = vec3(0.0, 1.0, 0.0);\n    c.r = normalize(cross(c.u, c.f));\n    c.lu = normalize(cross(c.f, c.r));\n    \n    ray r;\n    r.min_d = ZFAR;\n    r.p = c.p;\n    r.d = normalize(c.r * uv.x + c.lu * uv.y + c.f);\n    r.pd = 0.0;\n    float d = 1.0;\n    \n    for(int i = 0; i < MAX_ITER; i++)\n    {\n        if(d < MIN_DISTANCE || r.pd > ZFAR) \n        {\n        \tcol += 0.02;\n            break;\n        }\n    \tr = march(r, d);\n    \td = DE(r.p);\n        if(d > r.min_d)h += 0.001/pow(d, 1.0); \n        if(r.min_d > d) \n        {\n        r.min_d = d;  \n        }\n        \n    } \n    col = clamp(col, 0.0,1.0);\n    col *= mod(r.p, 6.0);\n    col += h;\n   \tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}