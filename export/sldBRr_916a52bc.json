{"ver":"0.1","info":{"id":"sldBRr","date":"1662573100","viewed":155,"name":"Computer Graphics - Task I","username":"VNR","description":"The first homework for Computer Graphics course in MIPT GameDev master program. You can drag mouse to change camera view.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define EPSILON 0.01\n#define HALF_CUBE_EDGE 1.\n\nconst vec3 eye = vec3(0., 0., 5.);\nvec3 diffuseColor = vec3(1.00, 0.530, 0.694);\nvec3 highlightColor = vec3(1);\nvec3 ambientColor = vec3(0.895, 0.343, 0.980);\n\nmat2 planeRotate(float angle) {\n    float sine = sin(angle);\n    float cosine = cos(angle);\n    return mat2(cosine, -sine, sine, cosine);\n}\n\n\nfloat sdfRoundedBox(vec3 pos, vec3 size, float r) {\n    vec3 q = abs (pos) - (size - r);\n\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0) - r;\n}\n\nfloat sdfTorus(vec3 pos, vec2 radii) {\n    float x = length(pos.xz) - radii.x;\n    return length(vec2(x, pos.y)) - radii.y;\n}\n\nfloat smoothUnion(float d1, float d2, float k) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\nfloat smoothSubtraction(float d1, float d2, float k) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h); \n}\n\nfloat getDistance(vec3 pos) {\n    vec3 cubePosition = pos-vec3(0, 1.65*HALF_CUBE_EDGE, 0.);\n    cubePosition.xy *= planeRotate(iTime);\n    cubePosition.yz *= planeRotate(iTime);    \n    float boxDist = sdfRoundedBox(cubePosition, vec3(HALF_CUBE_EDGE), 0.2);\n    \n    vec3 torusPosition = cubePosition-vec3(0, HALF_CUBE_EDGE, 0.);\n    float torusTop = sdfTorus(torusPosition, vec2(0.5, 0.125));\n    \n    torusPosition += vec3(0, 2.*HALF_CUBE_EDGE, 0.);\n    float torusBottom = sdfTorus(torusPosition, vec2(0.5, 0.125));\n    \n    torusPosition -= vec3(0, 2.*HALF_CUBE_EDGE, 0.);\n    torusPosition.xy *= planeRotate(3.14/2.);\n    torusPosition += vec3(-HALF_CUBE_EDGE, HALF_CUBE_EDGE, 0.);\n    float torusLeft = sdfTorus(torusPosition, vec2(0.5, 0.125));\n    \n    torusPosition += vec3(0, -2.*HALF_CUBE_EDGE, 0.);\n    float torusRight = sdfTorus(torusPosition, vec2(0.5, 0.125));\n    \n    torusPosition.yz *= planeRotate(3.14/2.);\n    torusPosition += vec3(0, HALF_CUBE_EDGE, HALF_CUBE_EDGE);\n    float torusFront = sdfTorus(torusPosition, vec2(0.5, 0.125));\n    \n    torusPosition += vec3(0, -2. * HALF_CUBE_EDGE, 0);\n    float torusBack = sdfTorus(torusPosition, vec2(0.5, 0.125));\n    \n    float planeDist = pos.y;\n    \n    float dist = smoothSubtraction(torusTop, boxDist, 0.1);\n    dist = smoothSubtraction(torusBottom, dist, 0.1);\n    dist = smoothSubtraction(torusLeft, dist, 0.1);\n    dist = smoothSubtraction(torusRight, dist, 0.1);\n    dist = smoothSubtraction(torusFront, dist, 0.1);\n    dist = smoothSubtraction(torusBack, dist, 0.1);\n    dist = min(dist, planeDist);\n    return dist;\n}\n\nfloat rayMarching(vec3 rayOrigin, vec3 rayDir) {\n    float distFromOrigin = 0.;\n    \n    for (int i = 0; i < MAX_STEPS; ++i) {\n        vec3 pos = rayOrigin + rayDir * distFromOrigin;\n        float distToScene = getDistance(pos);\n        distFromOrigin += distToScene;\n        if (distFromOrigin > MAX_DIST || distToScene < EPSILON) break;\n    }\n    \n    return distFromOrigin;\n}\n\nvec3 getNormal(vec3 pos, float accuracy) {\n    float dist = getDistance(pos);\n    vec2 delta = vec2(accuracy / 2., 0);\n    \n    vec3 n1 = vec3(\n        getDistance(pos + delta.xyy),\n        getDistance(pos + delta.yxy),\n        getDistance(pos + delta.yyx)\n    );\n    \n    vec3 n2 = vec3(\n        getDistance(pos - delta.xyy),\n        getDistance(pos - delta.yxy),\n        getDistance(pos - delta.yyx)\n    );\n    \n    return normalize(n1 - n2);\n}\n\nfloat ambientOcclusion(in vec3 pos, in vec3 normal)\n{\n    float occ = .0;\n    float sca = 1.;\n    for (int i = 0; i < 5; i++) {\n        float h = .01+.12*float(i)/4.;\n        float d = getDistance(pos+h*normal);\n        occ += (h-d)*sca;\n        sca *= .95;\n        if (occ > .35) \n            break;\n    }\n    return clamp(1.-3.*occ, 0., 1.)*(.5+.5*normal.y);\n}\n\n\nvec3 getColor(vec3 position) {\n    vec3 lightPos = vec3(0, 8, 3);\n    vec3 lightVec = normalize(lightPos - position);\n    vec3 n = getNormal(position, 0.01);\n    \n    float diffusedLightValue = clamp(dot(n, lightVec), 0., 1.);\n    float dist = rayMarching(position + n * EPSILON * 2., lightVec);\n    if (dist < length(lightPos - position))\n        diffusedLightValue *= 0.2;\n\n    vec3 v = normalize(eye - position);\n    vec3 h = normalize(lightVec + v);\n    float hn = max(.0, dot(h, n));\n    float sp = pow(hn, 70.);\n    \n    vec3 color =\n        diffuseColor * vec3(diffusedLightValue)\n        + highlightColor * sp\n        + 0.4 * ambientColor * ambientOcclusion(position, n);\n    return color;\n}\n\nvec3 getRayDirection(vec2 uv, vec3 rayOrigin, vec3 lookAtPoint, float zoom) {\n    vec3 forwardVector = normalize(lookAtPoint - rayOrigin);\n    vec3 right = cross(vec3(0,1,0), forwardVector);\n    vec3 up = cross(forwardVector, right);\n    vec3 screenCenter = forwardVector * zoom;\n    vec3 screenIntersectionPoint = screenCenter + uv.x*right + uv.y*up;\n    vec3 direction = normalize(screenIntersectionPoint);\n    return direction;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord -.5*iResolution.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n    \n    vec3 color = vec3(0.);\n    \n    vec3 rayOrigin = vec3(0., 7., 4.);\n    vec3 lookAtPoint = vec3(0, 2.*HALF_CUBE_EDGE, 0);\n    \n    rayOrigin.yz *= planeRotate(clamp(-m.y * 3.14, -1.9, -1.5));\n    rayOrigin.xz *= planeRotate(-m.x*6.28);            \n    rayOrigin.xz *= planeRotate(-iTime/2.);\n    \n    vec3 rayDirection = getRayDirection(\n        uv, rayOrigin, lookAtPoint, 1.\n    );\n    \n    float dist = rayMarching(rayOrigin, rayDirection);    \n    vec3 pos = rayOrigin + rayDirection * dist;\n    \n    color =  getColor(pos);     \n    color = pow(color, vec3(0.75));    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}