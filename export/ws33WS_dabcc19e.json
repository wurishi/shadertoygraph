{"ver":"0.1","info":{"id":"ws33WS","date":"1569185074","viewed":88,"name":"CopperBars - Amiga","username":"Gallo","description":"copperbarrs","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["copperbars"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//Original shader: https://www.shadertoy.com/view/MsfBz4\n\n// Computes the copperbar colors for the [uv] pixel.\nvec4 copperbar(in vec2 uv,\n               in float base,\n               in float height,\n               in float offset,\n               in float frequency, \n               in float amplitude,\n               in vec3 innerColor) \n{\n    float alpha = (offset) * frequency; // Offset and scale current time.\n    float position = base + (sin(alpha) * amplitude) ; // Get the copperbar middle position.\n    float ratio = abs(uv.y - position) / height; // Normalized (to height) distance.\n    if (ratio > 1.0) { // Pixel is beyond copperbar limit, set to black.\n        return vec4(0.0);\n    }\n    return vec4(innerColor, 1.0 - pow(ratio, 3.0)); // Mix to generate a gradient.\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    /*vec2 cMult = iResolution.xy / (vec2(400.0, 225.0));\n    vec2 coord = trunc(fragCoord / cMult) * cMult;\n\tvec2 tc = coord/iResolution.xy * vec2(iResolution.x / iResolution.y, 1.0);\n    */\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.3*cos(iTime+uv.xyx+vec3(0,2,4));\n\t\n    float lTime = trunc(iTime * 28.0 ) / 28.0; //remove for demo and use iTime\n    for(int i = 0; i < 12; ++i)\n    {\n        float fi = float(i);\n    \tvec4 cb = copperbar(uv + ((uv.x < 0.97) ? vec2(0.0, 0.003) : vec2(0.0)), 0.6, 0.01 + (float(i) * 0.0008), (fi * 0.08) + lTime, 2.2, 0.25, vec3(0.8 - (fi * 0.01), 0.0 + (fi * 0.05), 0.0));\n    \tcol  = mix(col, cb.xyz, mix(0.4, 1.0, (fi+1.0)/12.0)  *cb.a);\n    }\n    \n    //float lPalette = 24.0;\n    //col = trunc(col * 1.12 * lPalette) / lPalette;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}