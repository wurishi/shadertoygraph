{"ver":"0.1","info":{"id":"MdsyWS","date":"1489716227","viewed":172,"name":"Ray Marching Algorithm","username":"DanielArgento","description":"My First implementation of a ray marching algorithm ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sphereRadius = 0.25;\nconst int iterations = 32;\n\n\n/*Takes a position in 3D space and tels you the distance to the nearest surface of the object\nthat the function defines\n\nIf this float returns:\n1 - outside the object\n0 - on the surface of the object\n-1 - inside the object */\n\nfloat map(vec3 p)\n{\n    \n    //transform the space into a repeating coordinate system\n    vec3 q = fract(p) * 2.0 - 1.0;\n    \n    \n\treturn length(q) - sphereRadius;\n}\n\n//The marching algorithm \n//needs an origin and a ray to march along\n float rayMarch(vec3 o, vec3 r)\n{\n\t//the intersection, this is what's determined when marching\n    float t = 0.0;\n    \n    for(int i = 0; i < iterations; ++i)\n    {\n        vec3 p = o + r * t; //where we are along the ray\n        float d = map(p);\n        t += d * 0.5; //accumulate t until we find the intersection\n    }\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    //Transform texcoords so they go from -1 - 1\n    uv = uv * 2.0 - 1.0;\n    \n    //Fix aspect ratio or image will blur\n    uv.x *= iResolution.x / iResolution.y;\n    \n    //Create the ray we will march on\n    //must be normalized or the ray will poke through geometry when close to camera\n    vec3 r = normalize(vec3(uv, 1.0)); //add z value (FOV) to project uv into 3D space  \n                     \n    vec3 o = vec3(0.0, 0.0, iTime);//set origin back from sphere\n                       \n    float t = rayMarch(o, r); //find the intersection\n                       \n                       \n    //the further away an object is, the darker it gets (VERY HACKEY CODE)                   \n    float fog = 1.0 / (1.0 + t * t * 0.1);\n                       \n    vec3 fc = vec3(fog);\n        \n\tfragColor = vec4(fc,1.0);\n}","name":"Image","description":"","type":"image"}]}