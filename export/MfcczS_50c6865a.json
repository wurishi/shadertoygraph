{"ver":"0.1","info":{"id":"MfcczS","date":"1730799292","viewed":137,"name":"NotSoGreeeen - Audio Visualizer","username":"NotSoGreeeen","description":"A quick foray into sampling audio, turned out to be simpler than I had expected, might make more complicated things later.","likes":2,"published":3,"flags":32,"usePreview":0,"tags":["music","audio","new","audiovisualizer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //uv coordinates\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //color so the visualizer isn't bland (the base one from a new shader)\n    vec3 timeVary = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    //the audio visualizer(Buffer A)\n    vec3 col = texture(iChannel0, uv).xyz;\n    \n    //Add in some spacing between each bar\n    if (mod(uv.x * 31., 1.) < .1) {\n        col = vec3(0.);\n    }\n    \n    //Make the actual visualizer (not to be confused with the fade) darker than the fade\n    if (col.x > .9) {\n        col *= timeVary * vec3(0.557,0.582,0.518);\n    }\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sXGzn","filepath":"/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","previewfilepath":"/media/ap/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\nThis is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to http://unlicense.org/\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //uv coordinates\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    //previous frame\n    vec3 col = texture(iChannel1, uv).xyz;\n    \n    //uv changes for music sampling\n    uv.x = floor(uv.x * 31.) / 31.;\n    uv.y -= .5;\n\n    //color so the visualizer isn't so bland\n    vec3 timeVary = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    //make the color brighter if it's decaying\n    col *= clamp(timeVary * 2., 0., 1.) * .9;\n    \n    //display the audio\n    if (texture(iChannel0, vec2(uv.x, uv.y)).x > uv.y + .5) {\n        col = vec3(1.);\n    }\n\n    fragColor = vec4(col, 1.);\n}","name":"Buffer A","description":"","type":"buffer"}]}