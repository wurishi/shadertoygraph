{"ver":"0.1","info":{"id":"clS3D1","date":"1673205718","viewed":106,"name":"ArrJeeBee","username":"blurryroots","description":"Color and such.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","simple","color","rgb"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Shadertoy Educational License\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n// You are free however, to incorporate this work within the Shadertoy\n// ecosystem, e.g. by forking.\n// This work may incorporate other permissivly shared, educational work,\n// which is attributed appropriatly. Please do so as well.\n// Thanks to https://www.shadertoy.com/user/iq for inspiring this license.\n\n#define WITH_TEXTURE 0\n#define WITH_INVERT 1\n#define WITH_BOUNCE 0\n#define WITH_BREATH 1\n\n#define R iResolution\nconst float pi = 355. / 113.;\n\nfloat sdf_circle (vec2 uv, vec2 p, float r) {\n    float si = r / length (uv - p);\n    float s = smoothstep (1.5 * fwidth (si), 0., 1. - si);\n    return s;\n}\n\nfloat cgrad (vec2 uv, vec2 p, float r) {\n    return 1. - pow (length (uv - p), r);\n}\n\nfloat psin (float t) {\n    return 0.5 * (1. + sin (pi * t - pi/2.));\n}\n\nvec2 P (float angle) {\n    return vec2 (sin (angle), cos (angle));\n}\n\nvoid mainImage (out vec4 C, in vec2 F) {\n    vec2 U = F / R.xy;\n    vec2 Un = (F - 0.5*R.xy) / max (R.x, R.y);\n    float r = R.x / R.y;    \n    float t = iTime;\n    \n    float offset = 0.0777;\n    vec2 pb = vec2 (offset);\n    \n    #if WITH_BREATH\n    {\n        float p = 1./3.;\n        pb *= p + (1.-p) * psin (t/pi);\n    }\n    #endif\n    \n    #if WITH_BOUNCE\n    {\n        float tt = pi/2.\n            + (pi/2.)* (iTime/2.)\n            ;\n        pb *= P (tt);\n    }\n    #endif\n\n    float size = 0.1;\n    vec3 angles = pi * vec3 (4./3., 0., 2./3.); \n    vec3 c;\n    c.r = sdf_circle (Un, pb * P (angles.r), size);\n    c.g = sdf_circle (Un, pb * P (angles.g), size);\n    c.b = sdf_circle (Un, pb * P (angles.b), size);\n\n    #if WITH_INVERT\n    if ((0.5*pi) < mod (t, 1.5*pi)) {\n        c = (clamp (c.r+c.b+c.g, 0., 1.))*(1.-c);\n    }\n    #endif\n    \n    #if WITH_TEXTURE\n    vec3 tx = texture (iChannel0, U).rgb;\n    c *= tx;\n    #endif\n\n    C = vec4 (c, 1.);\n}","name":"Image","description":"","type":"image"}]}