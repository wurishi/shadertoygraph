{"ver":"0.1","info":{"id":"dd2yRm","date":"1687595016","viewed":116,"name":"Pott's Model","username":"johnhearn","description":"Phase transition in the 4 state Pott's model, a generalisation of the Ising model to more than 2 states. Space to randomise.\nhttps://gitpages.physik.uni-wuerzburg.de/marqov/webmarqov/post/2020-05-03-potts-example/","likes":7,"published":1,"flags":48,"usePreview":0,"tags":["physics","ca","ising"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 glow(in float i) {\n    float r = 46. * log(i*255.) / 255.;\n    float g = i;\n    float b = 1.55 * (exp(i*255./50.)-1.) / 255.;\n    return vec3(r, g, b);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float val = texture(iChannel0, uv).x/(float(q)-1.);\n    fragColor = vec4(glow(val) , 1);   \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float rand(float co) { return fract(sin(co*(91.3458)) * 47453.5453); }\nfloat rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }\nint randn(float rnd, int n) { return int(round(float(n)*rnd)); }\n\nint val2state(in ivec2 xy) {\n    return int(texelFetch(iChannel0, xy, 0).x);\n}\n\nfloat state2val(in int state) {\n    return float(state);\n}\n\nbool reset() {\n    return texture(iChannel3, vec2(32.5/256.0, 0.5) ).x > 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    ivec2 site = ivec2(fragCoord);\n    ivec2 size = ivec2(iResolution.xy);\n\n    vec2 xy = fragCoord.xy / iResolution.xy;\n    float J = 2.;\n    float h = 0.001;\n    float T = log(1.+sqrt(float(q)))*2. + xy.x/0.85;\n        \n    ivec2 n = ivec2(0, 1);\n    ivec2 e = ivec2(1, 0);\n    ivec2 s = ivec2(0, -1);\n    ivec2 w = ivec2(-1, 0);\n    \n    int state_n =  val2state(site+n);\n    int state_e =  val2state(site+e);\n    int state_s =  val2state(site+s);\n    int state_w =  val2state(site+w);\n\n    float time = iTime+iDate.z;\n    float rnd = rand(xy*(time+1.));\n\n    int state = val2state(site);\n    float Hc = -h*float(state);\n    if (state_n == state) Hc+=J;\n    if (state_s == state) Hc+=J;\n    if (state_e == state) Hc+=J;\n    if (state_w == state) Hc+=J;\n\n    int test_state = (state+randn(rnd,q))%q;\n    float Ht = -h*float(test_state);\n    if (state_n == test_state) Ht+=J;\n    if (state_s == test_state) Ht+=J;\n    if (state_e == test_state) Ht+=J;\n    if (state_w == test_state) Ht+=J;\n    \n    float DE = Hc - Ht;\n    \n    if (DE < 0. || exp(-DE/T) > rnd) state = test_state;\n    \n    float new_state = (iFrame<2 || reset()) ? state2val(int(rnd*100.)%q) : state2val(state);\n    \n    fragColor = vec4(new_state);\n}\n\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define q 4\n\n","name":"Common","description":"","type":"common"}]}