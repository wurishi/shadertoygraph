{"ver":"0.1","info":{"id":"WdGBzK","date":"1607455039","viewed":210,"name":"Ellipse fast Distance to point","username":"pvimont","description":"Test ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["distance","ellipse"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fast distance to ellpsoid evalutor (should work for any dims !!)\n\n// Dont work for hightly squized ellipsoid\n// Inner evaluation is bad\n// For evalution to sdf, return value should be minimized (* 0.9 for example)\n\n#if 1 // -> fast\n#define ITERS  0\n#define SPEED  1.0\n\n#else //->  more acurate\n#define ITERS  2\n#define SPEED  0.25\n#endif\n\n\n\nfloat sdEllipse( vec2 Point2, in vec2 ScAx )\n{\n    vec2 ScAxRad = ScAx;\n\n    vec2 PIN = normalize(Point2 / (ScAxRad));\n    ScAxRad += dot(Point2 - PIN * ScAxRad,PIN) *SPEED;\n\n    for (int i = 0 ; i < ITERS ; i ++)\n    {\n        PIN = normalize(Point2 / (ScAxRad));\n        ScAxRad += dot(Point2 - PIN * ScAxRad,PIN) *SPEED;\n    }\n\n\tPIN = normalize(Point2 / (ScAxRad));\n    ScAxRad += dot(Point2 - PIN * ScAxRad,PIN);\n    \n\t\n    float Ret = (ScAxRad.x-ScAx.x);\n    \n    return Ret;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\t\n    vec2 m = iMouse.xy/iResolution.xy;\n\tm.x *= iResolution.x/iResolution.y;\n\t\n\tfloat d = sdEllipse( uv, vec2(0.3,0.3)*m*2.0 + 1.*vec2(0.5,0.5) *0.025 );\n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-2.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(120.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.02,abs(d)) );\n\n\tfragColor = vec4( col, 1.0 );;\n}","name":"Image","description":"","type":"image"}]}