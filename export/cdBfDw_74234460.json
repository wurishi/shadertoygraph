{"ver":"0.1","info":{"id":"cdBfDw","date":"1689851913","viewed":47,"name":"Inuk's raymarcher","username":"inuk","description":"this is my first raymarcher, please help me in the comments ðŸ˜€","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["reflection","sdf","raymarcher","help","roughness"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\nfragColor= texelFetch(iChannel1,ivec2(fragCoord),0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0,ivec2(fragCoord),0);\n    \n    if(ivec2(fragCoord)==ivec2(0,0)){\n        fragColor=vec4(rand(fragColor.xyz),0);\n    }\n    \n    if(ivec2(fragCoord)==ivec2(1,0)){\n        if(iMouse.w<0.0&&iMouse.z>0.0){\n            fragColor+=texelFetch(iChannel0,ivec2(2,0),0);\n        }\n    }\n    \n    if(ivec2(fragCoord)==ivec2(2,0)){\n        if(iMouse.w<0.0&&iMouse.z>0.0){\n            fragColor=vec4(iMouse.xy-texelFetch(iChannel0,ivec2(3,0),0).xy,0,0);\n        }\n    }\n    \n    if(ivec2(fragCoord)==ivec2(3,0)){\n        fragColor=vec4(iMouse.xy,0,0);\n    }\n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"float smin(float a, float b, float k) {\nif(abs(k)>0.){\n    float h = clamp(0.5 + 0.5 * (a - b) / k, 0.0, 1.0);\n    return mix(a, b, h) - k * h * (1.0 - h);\n   }else{return min(a,b);}\n}\nfloat smax(float a, float b, float k) {\nif(k>0.){\n    return smin(b, a, -k);}\n    else {return max(a,b);}\n}\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(vec3(1, 0, 0), vec3(0, c, -s), vec3(0, s, c));\n}\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(vec3(c, 0, s), vec3(0, 1, 0), vec3(-s, 0, c));\n}\nmat3 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(vec3(c, -s, 0), vec3(s, c, 0), vec3(0, 0, 1));\n}\nmat3 identity() {\n    return mat3(vec3(1, 0, 0), vec3(0, 1, 0), vec3(0, 0, 1));\n}\nfloat dis(vec3 v1, vec3 v2) {\n    return length(v1 - v2);\n}\n\n// Simple 3D Raytracer\n// ================================\n\n\n\n\n\n// Constants\nconst float PI = acos(-1.);\nconst float tiny = 0.001;\nconst int MAXITER = 500;\nconst vec3 lightCol = vec3(0.8, 0.6, 0.4);\n\n//vars\nfloat dist;\nvec3 random;\nvec2 uv;\nfloat r;\nvec3 pos;\nvec3 lightPos;\nvec3 color;\nvec3 cpos;\nvec2 mmoved;\nvec2 mpos = vec2(PI / 4.);\nfloat currdist;\nint mat;\nfloat specular;\nfloat roughness;\nfloat metallic;\nvec3 point;\n\nfloat sphere(vec3 spherePos, float sphereSize, vec3 pos, int co) {\n    float cd = dis(spherePos, pos) - sphereSize;\n    if(abs(cd) <= dist) {\n        mat = co;\n    }\n    return cd;\n}\n\nfloat plane(float height, vec3 pos, int co) {\n    float cd = pos.y - height;\n    if(abs(cd) <= dist) {\n        mat = co;\n    }\n    return cd;\n}\n\nfloat box(vec3 boxPos, vec3 size, vec3 pos, float r, int co) {\n    vec3 q = abs(boxPos - pos) - size;\n    float cd = length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0) - r;\n    if(cd <= dist) {\n        mat = co;\n    }\n    return cd;\n}\nfloat ocean(float height, float ws, vec3 pos) {\nvec3 tp = pos;\n  vec3 q = abs(vec3(0.0,-3.0,0.0)-tp) - vec3(2);\n    float cd = length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0) - 0.2+((texture(iChannel3,(iTime+pos.xz)/40.0).r/10.0)+(texture(iChannel3,(2.0*iTime+pos.xz)/20.0).g/20.0));\n    if(cd <= dist) {\n        mat = 4;\n    }\n    return cd;\n}\n\n\n\n\n  //THE OBJECTS\n  //=================================\n\nfloat allobj(vec3 pos) {\n    dist = 999.9;\n    dist = smin(dist, sphere(vec3(-0.5, 0.9, 0.0), 1.0, pos, 1),0.);\n    dist = smax(dist, -sphere(vec3(-0.5, 1.9, 0.0), 1.0, pos, 1), 0.25);\n    dist = smax(dist, -sphere(vec3(-0.5, 1.0, 0.0), 0.4, pos, 1), 0.01);\n    dist = smin(dist, sphere(vec3(1.0, 0.55, 0.0), 0.5, pos, 3),0.);\n    dist = smin(dist, box(vec3(0.0, -0.5, 0.0), vec3(1.0, 0.5, 0.75), pos, 0.1, 2),0.);\n    return dist;\n}\n\n  //=================================\n#define s 0.0001\nvec3 getNormal(vec3 p) {\n    float n = (allobj(p));\n    return normalize(vec3(n-allobj(p - vec3(s, 0.0, 0.0)), n-allobj(p - vec3(0.0, s, 0.0)), n-allobj(p - vec3(0.0, 0.0, s))));\n}\n\nint c;\nfloat distraveled;\nvec3 hitColo;\nfloat ray(vec3 origin, vec3 direction, float MAXD) {\n    c = 0;\n    pos = origin;\n    distraveled = 0.0;\n    r = 1.0;\n    while(c < MAXITER) {\n        c++;\n        allobj(pos);\n        r = min(r, float(24.0 * (dist / distraveled)));\n        r = clamp(r, 0., 1.);\n        if(abs(dist) <= tiny || distraveled >= MAXD) {\n\n            break;\n        }\n        distraveled += dist;\n        pos += direction * dist;\n    }\n    return distraveled;\n}\n\n\n\nfloat fresnel;\nvoid getFresnel(in vec3 normal, in vec3 direction) {\nfresnel = clamp(pow(1.0 - dot(normal, -direction), 5.0),0.0,1.0);\n} \nvec3 colo;\nvec3 materials(vec3 poss, vec3 dir) {\n//THE MATERIALS\n//===================================\n    allobj(poss);\n    if(dist > tiny) {\n    \n        colo.x = -1.;\n        return texture(iChannel0, dir).xyz;\n    } else {\n        getFresnel(getNormal(poss), dir);\n        if(mat == 1) {\n            colo = vec3(0.3, 0.4, 1);\n            specular = 1.0;\n            metallic = fresnel + 0.5;\n            roughness = 0.1;\n        } else if(mat == 2) {\n            colo = vec3(1, 0.4, 0.2);\n            specular = 1.0;\n            metallic = fresnel + 0.85;\n            roughness = 0.6;\n        } else if(mat == 3) {\n            colo = vec3(1, 1.0, 1.0);\n            specular = 0.6;\n            metallic = 1.0;\n            roughness = 1.0;\n        } else if(mat == 4) {\n            colo = mix(vec3(0.0,0.0,1.0),vec3(0.2,0.5,0.7),fresnel);\n            specular = 1.0;\n            metallic = fresnel + 0.2;\n            roughness = 0.0;\n        }\n        metallic=clamp(metallic,0.0,1.0);\n        specular=clamp(specular,0.0,1.0);\n        roughness=clamp(roughness,0.0,1.0);\n\n        return colo;\n    }\n}\n//=================================\nfloat calcSpec(float shiny, vec3 lightCol, vec3 normal, vec3 point, vec3 lightPos) {\n    vec3 ldir = normalize(lightPos - point);\n    float spec = pow(max(dot(reflect(-ldir, normal), normalize(cpos)), 0.0), 1.0+99.0*(1.0-roughness)) * shiny;\n    return spec;\n}\nint b = 1;\nfloat light;\nfloat lighth;\nfloat lDis;\nfloat amb;\nfloat ambh;\nfloat sray;\nvec3 rd;\nvec3 ref;\nvec3 refl;\nvec3 normal;\nfloat softS;\nfloat softSh;\n\nvoid getThings(in vec3 point,in vec3 direction){\n        normal = getNormal(point);\n        getFresnel(normal, direction);\n        amb = 0.5 + 0.25 * dot(normal, vec3(0., 1., 0.));\n        light=clamp(dot(normal,lightPos), 0.0,1.0);\n        sray = ray(point + normal * 0.01, normalize(lightPos - point), lDis);\n        if(distraveled<lDis){softSh=0.;}else{ softSh = r;}\n        light *= softSh;\n        light /= lDis*lDis / 50.;\n        rd = reflect(direction, normal);\n        materials(point,direction);\n        rd=normalize(rd+random*roughness*0.9);\n        \n        refl = texture(iChannel0, rd).xyz;\n}\n\nvec3 calcRef(vec3 direction,vec3 normal,float metallic,float roughness){\n        vec3 ref2;\n        float refRay=ray(point+normal*0.01,rd,99.9);\n        if(refRay<99.9){\n            materials(pos,rd);\n            getThings(pos,rd);\n            ref2=colo;\n            vec3 totalLight = vec3(0.85, 0.75, 0.6) * ambh + lightCol * lighth;\n            vec3 Scolor=mix(vec3(1),ref2,metallic);\n            ref2 *= mix(totalLight, refl, metallic);\n            ref2 += vec3(softS*Scolor*calcSpec(specular, lightCol, getNormal(point), point, lightPos));\n        }\n        else{ref2=refl;}\n        return ref2;\n}\n\nvec3 raymarch(vec3 origin, vec3 direction, vec2 co) {\n    color = texture(iChannel0, direction).rgb;\n    ray(origin, direction, 999.0);\n    \n    point = pos;\n    if(abs(dist) < tiny) {\n        lightPos = vec3(9.0 * sin(iTime * 0.7), 1. + 1. * cos(iTime * 2.), 6. * cos(iTime * 0.7));\n        lDis = dis(point, lightPos);\n        \n        \n        getThings(point,direction);\n        lighth=light;\n        softS=softSh;\n        ambh=amb;\n        color = materials(point, direction);\n        refl = calcRef(direction,normal,metallic,roughness);\n        ray(point + getNormal(point) * 0.01, rd, 69.1);\n        materials(point,direction);\n        vec3 totalLight = vec3(0.85, 0.75, 0.6) * ambh + lightCol * lighth;\n        vec3 Scolor=mix(vec3(1),color,metallic);\n        color *= mix(totalLight, refl, metallic);\n        color += vec3(softS*Scolor*calcSpec(specular, lightCol, getNormal(point), point, lightPos));\n    }\n\n    return color;\n}\n\nvec3 rotate(vec3 v, float angleX, float angleY, float angleZ) {\n    float cosX = cos(angleX);\n    float sinX = sin(angleX);\n    float cosY = cos(angleY);\n    float sinY = sin(angleY);\n    float cosZ = cos(angleZ);\n    float sinZ = sin(angleZ);\n\n    mat3 rotationMatrix = mat3(cosX * cosY, cosX * sinY, -sinX, sinX * cosY, sinX * sinY, cosX, 0.0, 0.0, 1.0);\n\n    vec3 rotated = rotationMatrix * v;\n\n    return rotated;\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec4 old=texelFetch(iChannel3,ivec2(fragCoord),0);\n    mpos = 7.0 * (iMouse.xy - iResolution.xy / 2.0);\n    mpos=7.0*texelFetch(iChannel2,ivec2(1,0),0).xy;\n    uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    random=vec3(rand(texelFetch(iChannel2,ivec2(0,0),0).rgb+vec3(uv.xy,iTime)))-vec3(0.5);\n    vec3 direction = normalize(vec3(uv, 1.0));\n    cpos = vec3(0, 0, -4.5);\n    float xAngle = (mpos.y - iResolution.y / 2.0) / iResolution.y;\n    float yAngle = -(mpos.x - iResolution.x / 2.0) / iResolution.x;\n    float zAngle = 0.0;\n    mat3 rotation = rotateX(xAngle);\n    direction = rotation * direction;\n    cpos = rotation * cpos;\n    rotation = rotateY(yAngle);\n    direction = rotation * direction;\n    cpos = rotation * cpos;\n    rotation = rotateZ(zAngle);\n    direction = rotation * direction;\n    cpos = rotation * cpos;\n\n  // Calculate the color.\n    color = raymarch(cpos, direction, fragCoord);\n    color=clamp(pow(color,vec3(0.4545)),0.0,1.0);\n\n  // Set the fragment color.\n    if(iMouse.w>0.0||iMouse.z<0.0){\n    fragColor = mix(old,vec4(color, 1.0),0.15);}\n    else{\n    fragColor = mix(old,vec4(color, 1.0),0.65);}\n}\n","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"vec3 rand(vec3 p){\np = vec3( dot(p,vec3(127.1,311.7, 74.7)),\n\t\t\t  dot(p,vec3(269.5,183.3,246.1)),\n\t\t\t  dot(p,vec3(113.5,271.9,124.6)));\n\n\treturn fract(sin(p)*43758.5453123);\n}","name":"Common","description":"","type":"common"}]}