{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"cubemap","id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}},{"channel":1,"type":"texture","id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"#define time iTime\n#define EPSILON .0001\nconst float PI=3.14159265;\nconst int MAX_ITER = 120;\n#define GLOWED\n\nvec3 lightDir       =normalize(vec3(1., 1., 1.)); \nstruct mat\n{\n  float typeMat;        \n     \n};\nmat materialMy = mat(0.0);\nvec3 colGlow = vec3(0.);\nvec3 pc = vec3(0.);\n vec3 col1 = vec3(0.065, 0.4, 1.);\n vec3 col2 = vec3(1., 0.65,0.56);\nfloat radius = 0.4;\nfloat radius2 = 0.8;//radius * 2.;\n//-----------------------------\nvec3 getNormal(in vec3 p);\nfloat renderFunction(in vec3 pos);\nfloat render(in vec3 posOnRay, in vec3 rayDir);\nvec4 getColorPixel(inout vec3 ro, vec3 rd, inout vec3 normal, float dist, float typeColor);\n//-----------------------------\n//----------------------------------------------------\n//https://iquilezles.org/articles/distfunctions\n//----------------------------------------------------\nfloat dSphere(vec3 p, float r)\n{\n   return length(p) - r;\n}\n//----------------------------------------------------\n//-------------------------------------------------- \nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n//--------------------------------------------------\nfloat doubleCapsuleY(vec3 p, float r, float h)\n{\n    p.y -= clamp(p.y, 0.0, h * 3.);\n    return max(length(p) - r ,  abs(p.z)- r * 0.5);\n}\n\n//----------------------------------------------------\nfloat sdHeart(in vec3 pos, in float r, in float d) \n{\n    pos.x = abs(pos.x);\n    pos.xy = sqrt(2.) * 0.5 *mat2(1.,-1.,1.,1.)*pos.xy;\n    return  doubleCapsuleY(pos-vec3(r, 0, 0), r, d);\n}\n//------------------------------------------\nfloat distMat(inout float curDist, float dist, in float typeMat)\n{\n   float res = curDist;\n   if (dist < curDist) \n   {\n      materialMy.typeMat     = typeMat;\n      res                    = dist;\n     return res;\n   }\n   return curDist;\n}\n\n//--------------------------------------------------\nfloat myObject(in vec3 p)\n{\np = -p;\n   float d =  1.0;\n   materialMy.typeMat = 0.0;\n   vec3 pos = p;\n\n//----------------------------------Ð“Ð¸Ñ€Ð»ÑÐ½Ð´Ð°\nconst float maxl=14.; //24.;\n float angle = PI * (15. * sin(time  * 0.1)) /  maxl;\nfloat cf=sin(time  * 0.1)*0.5+0.5;\nfor(float i= 0.0;i<maxl;i++)\n{\n   pos = p + vec3(0., -1., 0.);\n   float  width = i* angle; \n   float w1 = 2.5 * (1.0-i/maxl);\n//https://www.shadertoy.com/view/4dlGRn\n   pos +=vec3(\n    sin(width) * w1, /* Ð¨Ð¸Ñ€Ð¸Ð½Ð° Ð¾ÑÐ½Ð¾Ð²Ð°Ð½Ð¸Ñ Ð¿Ð¾ X  */\n    i/maxl * 4., /*Ð’Ñ‹ÑÐ¾Ñ‚Ð° ÐºÐ¾Ð½ÑƒÑÐ° */\n    cos(width) * w1);  /* Ð¨Ð¸Ñ€Ð¸Ð½Ð° Ð¾ÑÐ½Ð¾Ð²Ð°Ð½Ð¸Ñ Ð¿Ð¾ Z */\n float  sh =  dSphere(pos, radius); \n\n float hr =  sdHeart(pos, radius ,radius2); \n//https://www.shadertoy.com/view/MsX3zr \nd = distMat(d,  mix(sh,hr,cf),  2.0); \n\n//-------------\n float c = 1. / length(pos)- 0.5;\n//https://www.shadertoy.com/view/4dlGRn\n pc+=vec3(\n          (sin(i*5.0+time*10.0)*0.5 + 0.5) * c,\n          (cos(i*3.0+time*8.0)*0.5 + 0.5) * c,\n          (sin(i*6.0+time*9.0)*0.5 + 0.5) * c ); \n\n}\n  pc=pc/maxl; \n//  pc=pc/maxl * 2.; \n    pc=smoothstep(0.0,1.0,pc);\n \n//----------------------------------\n/*\n   pos = p + vec3(0., -8., -6.) ;    \n//https://www.shadertoy.com/view/4ts3WN   \nfloat scale = 3.;   \nvec3 col = texture( iChannel1, 0.15 * pos.xz ).xyz;\nfloat dist = dot(col,vec3(0.09));   \nfloat y = 1. - smoothstep(0., 1., dist) * scale;\n  \n   d =  distMat(d,   udRoundBox( pos, vec3(12, 1.-y, 7. ), 0.5),  1.0);          \n*/\n   return d; \n}\n//-------------------------------------------------\n// Ð²Ñ‹Ð²Ð¾Ð´ Ð¾Ð±ÑŠÐµÐºÑ‚Ð°\nfloat renderFunction(in vec3 pos)\n{\n    return  myObject(pos);    \n}\n//------------------------------------------------- \nvec3 getNormal(in vec3 p)\n{\n\nconst float precis = 0.001;\n    vec3  eps = vec3(precis,0.0,0.0);\n    vec3 nor;\n    nor.x = renderFunction(p+eps.xyy) - renderFunction(p-eps.xyy);\n    nor.y = renderFunction(p+eps.yxy) - renderFunction(p-eps.yxy);\n    nor.z = renderFunction(p+eps.yyx) - renderFunction(p-eps.yyx);\n    return normalize(nor);\n\n}\n//-------------------------------------------------\nvec3 getLighting(in vec3 ro, in vec3 rd ,in vec3 norm, in vec3 lightDir, in vec4 color)\n{\n    vec3 col = vec3(0.);\n\n    vec3 ref = reflect( rd, norm );\n    float rim = 0.04+0.96*pow( clamp( 1.0 + dot(norm,rd), 0.0, 1.0 ), 4.0 );\n    col += mix( vec3(0.05,0.02,0.0), 1.2*vec3(0.8,0.9,1.0), 0.5 + 0.5*norm.y );\n    col *= 1.0 + 1.5*vec3(0.7,0.5,0.3)*pow( clamp( 1.0 + dot(norm,rd), 0.0, 1.0 ), 2.0 );\n    col += 27. *clamp(0.3 + 2. * norm.y, 0.0,1.0)* pow(texture( iChannel0, ref ).xyz,vec3(2.2));//*(rim);\n    col *= color.rgb;\n    col = pow( col, vec3(0.5) );\n   return col ;    \n}\n\n//----------------------------------------------------------------------\nvec4 getColorPixel(inout vec3 ro, vec3 rd, inout vec3 normal, float dist, float typeColor)\n{\n\n  vec4 color = vec4(1.);\n  vec3 hitPos = ro + rd * dist;\n  normal = normalize(getNormal(hitPos));  \n  float diffuse = max(0.0, dot(normal, -lightDir)) * 0.5 + 0.5;\n//----------------------------------\n   if (materialMy.typeMat == 0.0) \n     color.rgb = texture( iChannel0, rd ).xyz;\n   else if (materialMy.typeMat == 1.0)    \n        color.rgb = texture( iChannel1, 0.15 * hitPos.xz ).xyz;\n   else if (materialMy.typeMat == 2.0)  \n        color.rgb = colGlow;\n       \n   if(materialMy.typeMat !=0. )\n      color.rgb =  getLighting(hitPos, rd, normal, lightDir, color);\n    \n    ro = hitPos;\n    \n    color.rgb = mix(color.rgb, colGlow, 0.5);\n  return color;\n}\n\n//-------------------------------------------------\nfloat render(in vec3 posOnRay, in vec3 rayDir)\n{ \n  float t = 0.0;\n  float maxDist = 30.;\n  float d = 0.1; \n  float opacity = 0.;\n  for(int i=0; i<MAX_ITER; ++i)\n  {\n //  vec3 ro = posOnRay + t*rayDir;\n //    d = renderFunction(ro); \n    if (abs(d) <EPSILON || t > maxDist) \n         break;\n    t += d;\n    vec3 ro = posOnRay + t*rayDir;    \n     d = renderFunction(ro);       \n    //----------------------\n    if(materialMy.typeMat == 2.)\n    {\n\n #ifdef GLOWED\n        float  clarity = smoothstep(0.4, 0., sqrt( d ));\n        col2.r =  pow(col2.r, cos(time ));\n        vec4 currCol = vec4(mix(vec3(col1), col2,  clarity *  clarity),  clarity);\n        colGlow +=  (1. -  clarity) * currCol.rgb * currCol.a ;\n        colGlow += pc.rgb;          \n  #else\n\t\tcolGlow += pc.rgb; \n  #endif         \n    \n    }\n    //----------------------\n\n  }\n   return t;\n}\n//------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pos     =  fragCoord.xy / iResolution.xy * 2. - 1.;\n    pos.x *= iResolution.x / iResolution.y;  \n\n    float t = time* 0.1;\n    vec3 camP =  vec3(0., 3, 9.);\n    vec3 camUp = vec3(0. , 1., 0.);\n    vec3 camDir = normalize(-camP);\n    vec3 u = normalize(cross(camUp,camDir));\n    vec3 v = cross(camDir,u);\n    vec3 rayDir = normalize(camDir * 2. + pos.x * u + pos.y * v);  \n\n   vec4 color    = vec4(1.0);\n    vec3 normal   = vec3(1.0);\n    vec3 posOnRay = camP; \n    float path = 0.;\n  //--------------------------- \n     path =  render(posOnRay, rayDir);  \n     color = getColorPixel(posOnRay, rayDir, normal, path, materialMy.typeMat); \n    // ----------------------------------------------------------------------\n    // POST PROCESSING\n    // Gamma correct\n    color.rgb = pow(color.rgb , vec3(0.45));\n    // Contrast adjust - cute trick learned from iq\n     color.rgb  = mix( color.rgb , vec3(dot(color.rgb ,vec3(0.333))), -0.6 );\n\n     fragColor =  color;\n\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4llGWB","date":"1424855716","viewed":541,"name":"Glow...","username":"Lio","description":"Attempt to create a glow\nsource : https://www.shadertoy.com/view/MtlGzX","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","smoothstep"],"hasliked":0,"parentid":"","parentname":""}}