{"ver":"0.1","info":{"id":"DdsfRr","date":"1688405275","viewed":89,"name":"shader name already taken","username":"8kun","description":"source: https://youtu.be/f4s1h2YETNY?t=1013","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["onetag"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    This is free and unencumbered software released into the public domain.\n\n    Anyone is free to copy, modify, publish, use, compile, sell, or\n    distribute this software, either in source code form or as a compiled\n    binary, for any purpose, commercial or non-commercial, and by any\n    means.\n\n    In jurisdictions that recognize copyright laws, the author or authors\n    of this software dedicate any and all copyright interest in the\n    software to the public domain. We make this dedication for the benefit\n    of the public at large and to the detriment of our heirs and\n    successors. We intend this dedication to be an overt act of\n    relinquishment in perpetuity of all present and future rights to this\n    software under copyright law.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n    IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n    OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n    OTHER DEALINGS IN THE SOFTWARE.\n\n    For more information, please refer to <http://unlicense.org/>\n*/\n\n\n\nvoid main(out vec4 color, in vec2 coord) {\n\n    color = compute(coord, res.xy, t);\n}\n\n\n\n// #################################\n// ########### FOR UNITY ###########\n// #################################\n\n/*\nShader \"ShaderToy/DdsfRr\" {\nProperties {\n\t[MainColor]\n\tColorA (\"Color (A)\", Color) = (0.5, 0.5, 0.5)\n\tColorB (\"Color (B)\", Color) = (0.5, 0.5, 0.5)\n\tColorC (\"Color (C)\", Color) = (1.0, 1.0, 1.0)\n\tColorD (\"Color (D)\", Color) = (0.263, 0.416, 0.557)\n\t[Space(10)][Header(Offset)]\n\tOffsetX (\"Horizontal\", Float) = 0.0\n\tOffsetY (\"Vertical\", Float) = 0.0\n\t[Space(20)][Toggle] Zoom (\"Zoom\", Int) = 1\n\t[Header(Scale)]\n\tScaleX (\"Horizontal\", Range(0.1, 10.0)) = 1.0\n\tScaleY (\"Vertical\", Range(0.1, 10.0)) = 1.0\n}\nSubShader {\nTags {\n\t\"RenderType\"=\"Opaque\"\n}\nPass {\nHLSLPROGRAM\n#include \"UnityShaderUtilities.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#include \"UnityInstancing.cginc\"\n#include \"UnityCG.cginc\"\n\n#pragma fragment fragment_shader\n#pragma multi_compile_instancing\n#pragma target 3.0\n#pragma vertex vertex_shader\n\ntypedef struct appdata {\n\n\tfloat4 position : POSITION0;\n\tfloat2 uv_map : TEXCOORD0;\n\n\tUNITY_VERTEX_INPUT_INSTANCE_ID\n\n} object_t;\n\ntypedef struct vertex_output {\n\n\tfloat4 position : SV_POSITION0;\n\tfloat2 uv_map : TEXCOORD0;\n\t\n\tUNITY_VERTEX_INPUT_INSTANCE_ID\n\tUNITY_VERTEX_OUTPUT_STEREO\n\n} vertex_t;\n\ntypedef struct fragment_output {\n\n\tfloat3 target0 : SV_TARGET0;\n\n} fragment_t;\n\nUNITY_INSTANCING_BUFFER_START(ArtBuff)\n\tUNITY_DEFINE_INSTANCED_PROP(float3, ColorA)\n\tUNITY_DEFINE_INSTANCED_PROP(float3, ColorB)\n\tUNITY_DEFINE_INSTANCED_PROP(float3, ColorC)\n\tUNITY_DEFINE_INSTANCED_PROP(float3, ColorD)\n\tUNITY_DEFINE_INSTANCED_PROP(float, OffsetX)\n\tUNITY_DEFINE_INSTANCED_PROP(float, OffsetY)\n\tUNITY_DEFINE_INSTANCED_PROP(float, ScaleX)\n\tUNITY_DEFINE_INSTANCED_PROP(float, ScaleY)\n\tUNITY_DEFINE_INSTANCED_PROP(uint, Zoom)\nUNITY_INSTANCING_BUFFER_END(ArtBuff)\n\nvertex_t vertex_shader(in object_t mesh) {\n\n    UNITY_SETUP_INSTANCE_ID(mesh);\n\n\tvertex_t _output;\n\n\tUNITY_INITIALIZE_OUTPUT(vertex_t, _output);\n\tUNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(_output);\n\tUNITY_TRANSFER_INSTANCE_ID(mesh, _output);\n\n\t_output.position = UnityObjectToClipPos(mesh.position);\n\t_output.uv_map = mesh.uv_map;\n\n\treturn _output;\n}\n\nfloat3 palette(float time) {\n\n\tconst float3 _color_a = UNITY_ACCESS_INSTANCED_PROP(ArtBuff, ColorA);\n\tconst float3 _color_b = UNITY_ACCESS_INSTANCED_PROP(ArtBuff, ColorB);\n\tconst float3 _color_c = UNITY_ACCESS_INSTANCED_PROP(ArtBuff, ColorC);\n\tconst float3 _color_d = UNITY_ACCESS_INSTANCED_PROP(ArtBuff, ColorD);\n\n\treturn _color_a + _color_b * cos(UNITY_TWO_PI * (_color_c + time + _color_d));\n}\n\nfragment_t fragment_shader(in vertex_t environment) {\n\n\tUNITY_SETUP_INSTANCE_ID(environment);\n\n\tfragment_t _output;\n\n\tUNITY_INITIALIZE_OUTPUT(fragment_t, _output);\n\t\n\tconst float2 _lossy_scale = {\n\t\tlength(unity_ObjectToWorld._m00_m10_m20),\n\t\tlength(unity_ObjectToWorld._m01_m11_m21)\n\t};\n\n\tfloat2 _local_scale = {\n\t\tUNITY_ACCESS_INSTANCED_PROP(ArtBuff, ScaleX),\n\t\tUNITY_ACCESS_INSTANCED_PROP(ArtBuff, ScaleY)\n\t};\n\n\tconst float2 _offset = { \n\t\tUNITY_ACCESS_INSTANCED_PROP(ArtBuff, OffsetX),\n\t\tUNITY_ACCESS_INSTANCED_PROP(ArtBuff, OffsetY)\n\t};\n\n\tif (UNITY_ACCESS_INSTANCED_PROP(ArtBuff, Zoom) > 0) {\n\t\t_local_scale.y = _local_scale.x;\n\t}\n\t\n\tconst float2 _uv = _offset + (environment.uv_map-0.5) * (_lossy_scale/_local_scale);\n\n\tfloat d = length(_uv);\n\tfloat3 col = palette(d);\n\n\td = sin(d * 8.0 + _Time.y) / 8.0;\n\td = abs(d);\n\n\td = 0.02 / d;\n\tcol *= d;\n\t\n\t_output.target0 = col;\n\n\treturn _output;\n}\nENDHLSL\n}\n}\n}\n*/\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\n    This is free and unencumbered software released into the public domain.\n\n    Anyone is free to copy, modify, publish, use, compile, sell, or\n    distribute this software, either in source code form or as a compiled\n    binary, for any purpose, commercial or non-commercial, and by any\n    means.\n\n    In jurisdictions that recognize copyright laws, the author or authors\n    of this software dedicate any and all copyright interest in the\n    software to the public domain. We make this dedication for the benefit\n    of the public at large and to the detriment of our heirs and\n    successors. We intend this dedication to be an overt act of\n    relinquishment in perpetuity of all present and future rights to this\n    software under copyright law.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n    IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n    OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n    OTHER DEALINGS IN THE SOFTWARE.\n\n    For more information, please refer to <http://unlicense.org/>\n*/\n\n\n\n#define main mainImage\n#define res iResolution\n#define t iTime\n#define TWO_PI 6.28318530718F\n\nvec3 palette(in float time) {\n\n\tconst vec3 a = vec3(0.5, 0.5, 0.5);\n\tconst vec3 b = vec3(0.5, 0.5, 0.5);\n\tconst vec3 c = vec3(1.0, 1.0, 1.0);\n\tconst vec3 d = vec3(0.263, 0.416, 0.557);\n\n\treturn a + b * cos(TWO_PI * (c + time + d));\n}\n\nvec4 compute(in vec2 coord, in vec2 res, in float t) {\n\n    vec2 uv = (coord * 2.0 - res.xy) / res.y;\n    \n\t// float d = length(uv) * exp(-length(uv));\n    float d = length(uv);\n    \n\tvec3 col = palette(d);\n\td = sin(d * 8.0 + t) / 8.0;\n\td = abs(d);\n\td = 0.02 / d;\n\tcol *= d;\n    \n    return vec4(col, 1.0);\n}\n","name":"Common","description":"","type":"common"}]}