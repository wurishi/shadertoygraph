{"ver":"0.1","info":{"id":"mddXWs","date":"1680691550","viewed":93,"name":"Sdf experimenten","username":"victorbisaev","description":"Experiments with Sdf for beginners","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["sdfglowbeam"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.1415;\n\nfloat rand(vec2 co)\n{\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat opOnion(in float p, in float r) {\n    return abs(p) - r;\n}\n\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdHexagon( vec2 p, float s, float r ) \n{\n    const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n    p = abs(p);\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    p -= vec2(clamp(p.x, -k.z*s, k.z*s), s);\n    return length(p)*sign(p.y) - r;\n}\n\nfloat sdStar(in vec2 p, in float r, in float rf)\n{\n    const vec2 k1 = vec2(0.809016994375, -0.587785252292);\n    const vec2 k2 = vec2(-k1.x,k1.y);\n\n    // repeat domain 5x\n    p.x = abs(p.x);\n    p -= 2.0*max(dot(k1,p),0.0)*k1;\n    p -= 2.0*max(dot(k2,p),0.0)*k2;\n    p.x = abs(p.x);\n    \n    // draw triangle\n    p.y -= r;\n    vec2 ba = rf*vec2(-k1.y,k1.x) - vec2(0,1);\n\tfloat h = clamp( dot(p,ba)/dot(ba,ba), 0.0, r );\n    return length(p-ba*h) * sign(p.y*ba.x-p.x*ba.y);\n}\n\n\nconst float minSize = 0.010;\nconst float maxSize = 0.077;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uvn = uv;\n    uv -= vec2(0.5, 0.5);\n    float aspect = iResolution.x/iResolution.y;\n    uv.x *= aspect;\n\n    // Time varying pixel color\n//    float speed = \n    vec3 color = vec3(0);\n\n    for (int i = 0; i < 112; ++i)\n    {\n        float col;\n    \n        float r1 = rand(vec2(float(i)*0.1, 0.) ) - 0.5;\n        float r2 = rand(vec2(float(i)*0.25, 0.1) );\n        float r3 = rand(vec2(float(i)*0.75, 0.6) );\n        \n        float speed = 0.35+(r3 * 0.65);\n        \n        vec2 zenter = vec2( fract((iTime+10.) * speed) , (1.-(maxSize*2.))*r1 );\n        vec2 zenterPos = vec2(mix(-maxSize-0.5 , 0.5+maxSize, zenter.x) * aspect, zenter.y);\n\n    //    float v = 1.-abs(sdCircle( uv, 0.01+abs(0.48*sin(iTime))));\n    //    float v = 1.- abs(opOnion( sdBox( uv, vec2( 0.4 , 0.4/*0.01+abs(0.2*pow( sin(iTime) , 4.0 ) ) */) ) , 0.008+pow(sin(iTime), 2.)*0.018 ) );\n        float size = minSize + r2*(maxSize - minSize);\n\n// box\n//        size *= pow(1. - abs(zenter.y), 4.)*2.;\n//        float v = 1.- abs(sdBox( uv-zenterPos, vec2( size , size) ) );\n\n// hexagon\n//        size *= pow(1. - abs(zenter.y), 2.)*1.;\n//        float v = 1.- abs(sdHexagon( uv-zenterPos, size , 0.9*size ) );\n\n// start\n        size *= pow(1. - abs(r1), 2.)*1.;\n        float v = 1.- abs(sdStar( uv-zenterPos, size , 0.6 ) );\n\n\n        col = smoothstep(0.91, 0.999, v);\n        col -= smoothstep(0.97, 0.999, v) * 0.7;\n        col += smoothstep(0.99, 0.999, v) * 1.2;\n        ;\n//        col = vec3(0);\n        \n        float finalpos = mix(0.4, 0.98, pow(1. - abs(r1) , 3.));\n\n        col *= finalpos-zenter.x;\n        \n        // add the current item to final picture\n//        color = max(color, col);\n        color += col;\n        \n    }\n    // Output to screen\n    color = mix( vec3(0) , vec3(0.55, 0.2, 1.0 ) , color.r );\n\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}