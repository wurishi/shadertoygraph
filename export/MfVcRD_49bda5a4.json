{"ver":"0.1","info":{"id":"MfVcRD","date":"1731591330","viewed":88,"name":"nautilus gear stuff","username":"jonasfrey","description":"i am to bad at mathematics to figure out the correct formulas. for any of you math cracks there, see this as a challenge","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["gear"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float f_n_sd_linear(\n    vec2 o_trn\n){\n    float n_d_circle = length(o_trn);\n    float n_tau = radians(360.);\n    float n_ang_nor = atan(o_trn.x, o_trn.y)/n_tau;\n    float n_d = n_d_circle*5.+n_ang_nor;\n    //n_d = abs(n_d-.5);\n    //n_d = 1.-n_d;\n    return n_d;\n\n}\nfloat f_n_sd_nautilus(\n    vec2 o_trn\n){\n    float n_d_circle = length(o_trn);\n    float n_tau = radians(360.);\n    float n_angle_normalized = atan(o_trn.x, o_trn.y)/n_tau;\n    float n_angle_radians = n_angle_normalized * n_tau;\n    float n_golden_number = (1. + pow(5., 0.5)) / 2.0;\n    float k = log(n_golden_number);\n    float n_r_0 = .10;\n    float n_d = length(o_trn);\n    float n_radius = 0.5;\n    n_radius = n_r_0 * exp(k * n_angle_radians);\n\n    n_d = (n_d-n_radius);\n    //n_d = n_radius;\n    //n_d = abs(n_d-.5);\n    //n_d = 1.-n_d;\n    return n_d;\n\n}\nvec2 f_o_rotd(vec2 o_trn, float n_ang_nor){\n    float n_tau = radians(360.);\n    float n_sin = sin(n_ang_nor*n_tau);\n    float n_cos = cos(n_ang_nor*n_tau);\n    mat2 o_matr = mat2(\n        n_cos, -n_sin, \n        n_sin, n_cos\n    );\n    return o_trn*o_matr;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float n_scl_min = min(iResolution.x, iResolution.y);\n    vec2 o_trn = (fragCoord.xy-iResolution.xy*.5)/n_scl_min;\n    vec2 o2 = (fragCoord.xy / iResolution.xy)*vec2(2.,1.);\n    float nb = floor(o2.x);\n    o2 = fract(o2);\n    o_trn = o2;\n    o_trn.x = o_trn.x *1.;\n    float n = floor(o_trn.x);\n    o_trn = fract(o_trn);\n    o_trn-=0.5;\n    float n_d_circle = length(o_trn);\n    float nt = iTime*.2;\n    float n_dist = 0.12;\n    \n\n    if(nb == 0.){\n        vec2 o_trn1 = f_o_rotd(o_trn-vec2(0., -n_dist),  nt);\n        vec2 o_trn2 = f_o_rotd(o_trn-vec2(0., n_dist), -nt+.5);\n        float n_d1 = smoothstep(0.03, 0.0,  (f_n_sd_nautilus(o_trn1)));\n        float n_d2 = smoothstep(0.03, 0.0,  (f_n_sd_nautilus(o_trn2)));\n        n_d1 = clamp(n_d1, 0., 1.);\n        n_d2 = clamp(n_d2, 0., 1.);\n        fragColor = vec4(n_d1+n_d2);\n    }else{\n        float nt = iTime*.2;\n        float n_dist = 0.19;\n        vec2 o_trn1 = f_o_rotd(o_trn-vec2(0., -n_dist),  nt);\n        vec2 o_trn2 = f_o_rotd(o_trn-vec2(0., n_dist), -nt+.51);\n        float n_d1 = smoothstep(1., .95, f_n_sd_linear(o_trn1));\n        float n_d2 = smoothstep(1., .95, f_n_sd_linear(o_trn2));\n        n_d1 = clamp(n_d1, 0., 1.);\n        n_d2 = clamp(n_d2, 0., 1.);\n        fragColor = vec4(n_d1+n_d2);\n    }\n}","name":"Image","description":"","type":"image"}]}