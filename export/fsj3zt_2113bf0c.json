{"ver":"0.1","info":{"id":"fsj3zt","date":"1618553958","viewed":99,"name":"XNikon Pyramid-Fire","username":"xnikon","description":"Created by NIKONOV MAXIM 316 \nVK : https://vk.com/xnikon\nE-MAIL : nikon.mv.cmc@gmail.com","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["unknown"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGzn","filepath":"/media/a/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3","previewfilepath":"/media/ap/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3","type":"music","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0,uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\n- Работа выполнена студентом 316 группы Никоновым Максимом Викторовичем\n- Контакты в описании \n- Вариант Пирамида с огнем \n- Для проверки отражения пирамиды расскоментировать 535 строчку \n*/\n\n\nconst float INF = 1e10;\nvec3 CAMERA_POS = vec3(1,1.2,-6);\nvec3 LIGHT1_POS = vec3(-3,1.5,5);\nconst float LIGHT1_RADIUS = 0.5; // для сферы - источника света 1\nvec3 LIGHT1_COLOR = vec3(1,1,1);\n\nvec3 LIGHT2_POS = vec3(1,1.5,-1); // последнее 6 тоже хорошо\nconst float LIGHT2_RADIUS = 0.55; // для сферы - источника света 2 \nconst vec3 LIGHT2_COLOR = vec3(0.1,0.7,0.4);\n\n\nvec3 sphere_pos = vec3(-2.2,-0.2,1);\nvec3 sphere_col = vec3(1, 2.75, 1.75);\n\nvec3 fire_pos = vec3(1,1.4,-2);\nvec3 flamecol;\n\nconst int EMISSION = 0; //для материалов\nconst int DIFFUSE = 1; \nconst int REFLECTION = 2;\nconst int REFRACTION = 3; \nconst float GLASS_N = 1.5; \nconst float AIR_N = 1.0;\nconst float DIAMOND_N = 2.5;\n\nconst float EPS = 0.0000001; //для трассировки пирамиды\n\nvec3 randDir; //для теней\n\n/*\nstruct Triangle {\n    vec3 vertecies[3];\n};\n\nstruct Pyramid {\n    vec3 vertecies[5];\n};\n*/\n\nfloat noise(vec3 p) {\n\tvec3 i = floor(p);\n\tvec4 a = dot(i, vec3(1, 57, 21)) + vec4(0, 57, 21, 78);\n\tvec3 f = cos((p-i)*acos(-1.0))*(-0.5) + 0.5;\n\ta = mix(sin(cos(a)*a),sin(cos(1.0 + a)*(1.0 + a)), f.x);\n\ta.xy = mix(a.xz, a.yw, f.y);\n\treturn mix(a.x, a.y, f.z);\n}\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\nfloat t = (-1.2 - pos.y) / dir.y;\n    if ( t<=0.0) { \n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz,worldPos.xz) >= 100.0){\n        return INF;\n    }\n    normal = vec3(0,1,0);\n    return t;\n}\n\n/*\nfloat tracePlane2(vec3 camPos, vec3 dir, out vec3 N) {\n    float t = (-1.0 - camPos.y)/ dir.y;\n    vec3 worldPos = t * dir + camPos;\n    if (t < 0.0 || dot(worldPos.xz, worldPos.xz) > 100.0) return INF;\n    N = vec3(0, 1, 0);\n    return t;\n}\n*/\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) { \n    float a = dot(dir, dir);\n    float b = dot(pos,dir);\n    float c = dot(pos,pos) - r*r;\n    float D = b * b - a*c; \n    if (D < 0.0) { \n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if ( t > 0.0){\n        normal = normalize(pos + t * dir);\n        return t; \n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) { \n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\n/*\nfloat traceTriangle(vec3 A, vec3 B, vec3 C, vec3 pos, vec3 dir, out vec3 normal)\n{\n    vec3 edge0 = B - A;\n    vec3 edge1 = C - B;\n    vec3 edge2 = A - C;\n    vec3 norm = normalize(cross(edge0,edge1));\n    float normalViewAngle = dot(dir, norm);\n    if(abs(normalViewAngle)<EPS){\n        return INF;\n    }\n    float t = dot(A - pos,norm)/normalViewAngle;\n    if(t<0.0){\n        return INF;\n    }\n    vec3 hitPos = pos+t*dir;\n    float square = length(cross(edge0,edge1));\n    vec3 toHitVecs[3] = vec3[3](\n        hitPos - A,\n        hitPos - B,\n        hitPos - C\n    );\n    float testSq[3] = float[3](\n        length(cross(toHitVecs[0],edge0)),\n        length(cross(toHitVecs[1],edge1)),\n        length(cross(toHitVecs[2],edge2))\n    );\n    if(abs(square - testSq[0] - testSq[1] - testSq[2]) < EPS){\n        normal = norm;\n        return t;\n    }\n    return INF;\n}\n*/\n\n\nfloat traceTriangle(vec3 vertex0, vec3 vertex1, vec3 vertex2, vec3 pos, vec3 dir, out vec3 N)\n{\n    vec3 edge1 = vertex1 - vertex0;\n    vec3 edge2 = vertex2 - vertex0;\n    vec3 h = cross(dir, edge2);\n    float a = dot(edge1, h);\n    if (a > -EPS && a < EPS) return INF;\n    float f = 1.0/a;\n    vec3 s = pos - vertex0;\n    float u = f * dot(s, h);\n    if (u < 0.0 || u > 1.0) return INF;\n    vec3 q = cross(s, edge1);\n    float v = f * dot(dir, q);\n    if (v < 0.0 || u + v > 1.0) return INF;\n    float t = f * dot(edge2, q);\n    if (t < EPS) return INF;\n    vec3 v1 = vertex2 - vertex0;\n    vec3 v2 = vertex1 - vertex0;\n    N = normalize(cross(v1,v2));\n    return t;\n}\n\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 0.5) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    // начало комментирования\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 0.5;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    // конец комментрования просто ковер \n    return INF;\n}\n\nfloat tracePy(vec3 pos, vec3 dir, out vec3 normal){\n    float ang = 0.5;\n    mat2 rot = mat2(cos(ang), sin(ang), -sin(ang), cos(ang));\n    vec2 pyrXZ1 = rot * vec2(1, -1);\n    vec2 pyrXZ2 = rot * vec2(1, 1);\n    vec2 pyrXZ3 = rot * vec2(-1, 1);\n    vec2 pyrXZ4 = rot * vec2(-1, -1);\n    vec3 norm = vec3(0,sqrt(1.0),0);\n    vec3 dotx1 = vec3(pyrXZ1.x, -0.99, pyrXZ1.y);\n    vec3 dotx2 = vec3(pyrXZ2.x, -0.99, pyrXZ2.y);\n    vec3 dotx3 = vec3(pyrXZ3.x, -0.99, pyrXZ3.y);\n    vec3 dotx4 = vec3(pyrXZ4.x, -0.99, pyrXZ4.y);\n    \n    float t = INF;\n    \n    vec3 t1norm;\n    float t1 = traceTriangle(dotx1, dotx2,norm, pos, dir, t1norm);\n    if (t1 < t && t1 > 0.0) {\n        t = t1;\n        normal = t1norm;\n    }\n    \n    vec3 t2norm;\n    float t2 = traceTriangle(dotx2, dotx3,norm, pos, dir, t2norm);\n    if (t2 < t && t2 > 0.0) {\n        t = t2;\n        normal = t2norm;\n    }\n    \n    vec3 t3norm;\n    float t3 = traceTriangle(dotx3, dotx4,norm, pos, dir, t3norm);\n    if (t3 < t && t3 > 0.0) {\n        t = t3;\n        normal = t3norm;\n    }\n    \n    vec3 t4norm;\n    float t4 = traceTriangle(dotx4, dotx1,norm, pos, dir, t4norm);\n    if (t4 < t && t4 > 0.0) {\n        t = t4;\n        normal = t4norm;\n    }\n    \n    vec3 t5norm;\n    float t5 = traceTriangle(dotx1, dotx2, dotx3, pos, dir, t5norm);\n    if (t5 < t && t > 0.0) {\n        t = t5;\n        normal = t5norm;\n    }\n    \n    vec3 t6norm;\n    float t6 = traceTriangle(dotx3, dotx4, dotx1, pos, dir, t6norm);\n    if (t6 < t && t > 0.0) {\n        t = t6;\n        normal = t6norm;\n    }\n    \n    if (t < INF) {\n        normal = normalize(normal);\n    }\n    \n    return t;  \n    \n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 pyNorm;\n    float pyT = tracePy(pos, dir, pyNorm);\n    if (pyT < dist)\n        return true;\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n    \n    vec3 L1Norm;\n    float light1T = traceSphere(pos - LIGHT1_POS, dir, LIGHT1_RADIUS, L1Norm);\n    return (light1T < dist);\n    \n    vec3 L2Norm;\n    float light2T = traceSphere(pos - LIGHT2_POS, dir, LIGHT2_RADIUS, L2Norm);\n    return (light2T < dist);\n}\n\n\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 20.0f / distSq1;\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 10.0f / distSq2;\n    \n    vec3 toLight_fire = fire_pos - pos;\n    float dist_fire = dot(toLight_fire, toLight_fire);\n    \n    \n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + max(0.0, dot(normal, normalize(toLight_fire))) * flamecol *0.6 + \n        + texture(iChannel1, normal).rgb * 0.1\n    );\n}\n\n\nvec3 refraction(vec3 v, vec3 normal,float n1, float n2)\n{\n    if(dot(v,normal)<0.0){\n        normal = -normal;\n    }\n    float cosA=dot(v,normal);\n    float sinA=sqrt(1.0-cosA*cosA);\n    vec3 tang = normalize(v-cosA*normal);\n    float sinB = sinA/n2*n1;\n    float cosB = sqrt(1.0-sinB*sinB);\n    return sinB*tang + cosB*normal;\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\n\n/*\nvec3 planeThrough3Points(vec3 p1, vec3 p2, vec3 p3, out float move) {\n    vec3 p1p2 = p1 - p2;\n    vec3 p1p3 = p1 - p3;\n    \n    vec3 normal = cross(p1p2, p1p3);\n    move = dot(normal, p1);\n    return normal;\n}\n*/\n\n/*\nfloat traceTriangle(vec3 dot1, vec3 dot2, vec3 dot3,vec3 pos, vec3 dir, out vec3 normal) {\n    \n    float move;\n    \n    vec3 norm = planeThrough3Points(dot1, dot2, dot3, move);\n    \n    // dot(pos + t * dir, norm) == move\n    // t = (move - dot(pos, norm)) / dot(dir, norm)\n    \n    float divider = dot(dir, norm);\n    float div = move - dot(pos, norm);\n    \n    /*if (divider < 1e-12) {\n        return INF;\n    }//конец коммента\n    \n    float t = div / divider;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    \n   \n    vec3 v1 = normalize(dot1 - worldPos);\n    vec3 v2 = normalize(dot2 - worldPos);\n    vec3 v3 = normalize(dot3 - worldPos);\n    \n    float angle12 = acos(dot(v1, v2));\n    float angle13 = acos(dot(v1, v3));\n    float angle23 = acos(dot(v2, v3));\n    \n    if (abs(angle12 + angle13 + angle23 - radians(360.0)) < 1e-3) {\n        normal = normalize(norm);\n        float angle = acos(dot(normalize(dir), normal));\n        if (angle < radians(90.0)) {\n            normal = -normalize(norm);\n        }\n        return t;\n    } else {\n        return INF;\n    }\n    \n}\n*/ \n\nfloat fogSdf(vec3 pos)\n{\n    pos = pos - vec3(1,1.4,-6);\n    return length(pos) - 0.3;\n}\n\nfloat BeerLambert(float absorptionCoefficient, float distanceTraveled)\n{\n    return exp(-absorptionCoefficient * distanceTraveled);\n}\n\nvec4 sampleFog(vec3 pos, vec3 dir)\n{\n    float t = fogSdf(pos);\n    const float MARCH_SIZE = 0.01;\n    float opacity = 1.0;\n    float absorption = 10.0;\n    float totalAbs = 0.0;\n    for (int i = 0; i < 50; ++i) {\n        vec3 curPos = pos + (float(i) * MARCH_SIZE) * dir;\n        float sdf = fogSdf(curPos);\n        if (sdf < 0.0) {\n            return vec4(1,0,1,0);\n            \n            float prevOpacity = opacity;\n            opacity *= BeerLambert(absorption * (\n            texture(iChannel2, curPos * 0.2).x\n            + texture(iChannel2, curPos * 0.4).x\n            + texture(iChannel2, curPos * 0.8).x\n            + texture(iChannel2, curPos * 1.6).x\n            ) * 0.25 * abs(sdf), MARCH_SIZE);\n            float absorptionLastStep = prevOpacity - opacity;\n            totalAbs += absorptionLastStep;\n            \n        }\n    }\n    //return vec4(1,0,0,0);\n    return vec4(vec3(5, 2, 5) * totalAbs, 1.0 - opacity);\n}\n\n\nfloat flame(vec3 p)\n{\n    float d = length(vec3(0, 1, 0) - p*vec3(1, 0.7, 1)) - 1.0;\n\treturn d + (noise(p + vec3(0, 5, 0)) + noise(p * 3.0)* 0.7)* 0.25 *(p.y) ;\n}\n\nvec4 raymarch(vec3 org, vec3 dir)\n{\n\tfloat d = 0.0, glow = 0.0, eps = 0.02;\n\tvec3  p = org;\n\tbool glowed = false;\n    float k = 64.0;\n\t\n\tfor(int i = 0; i < int(k); i++)\n\t{\n\t\td = min(150.0 - length(p), abs(flame(p))) + eps;\n\t\tp += d * dir;\n\t\tif (d > eps)\n\t\t{\n            glowed = glowed || flame(p) < 0.0;\n\t\t\tglow = glowed ? float(i)/k : 0.0;\n\t\t}\n\t}\n\treturn vec4(p,glow);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec4 LIGHT_COLOR = vec4(0,0,0,0) / float(iFrame + 1);\n    vec3 N;\n    float val = iTime;\n    //CAMERA_POS = vec3(6.0 * sin(val / 2.0), 1.2, 6.0 * cos(val / 2.0));\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    vec3 randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord- iResolution.xy * 0.5 + (randVals.xy - 0.5)*2.0) / iResolution.x; //блюр\n    vec3 front = normalize(vec3(-CAMERA_POS));\n    vec3 up = vec3(0,1,0);\n    vec3 right = normalize(cross(front,up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y); \n    vec3 LIGHT1_POS = vec3(-3,1.5,5) + vec3(0,1,0)* randVals.x *0.1; //блюр - доп балл \n    //vec3 LIGHT1_POS = vec3(-3,1.5,5) \n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N * GLASS_N);\n    float n1 = AIR_N;\n    float n2 = GLASS_N;\n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    vec3 colorMult = vec3(1, 1, 1);\n    \n    for (int i = 0; i < 10; ++i){\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal; \n        vec4 color2;\n        vec3 planeNorm;\n        \n        float nEnter = GLASS_N;\n        \n        float planetT = tracePlane(curPos, curDir, planeNorm);\n        if (planetT < t) {\n            t = planetT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0,worldPos.xz * 0.2).rgb;\n            normal = planeNorm;\n            if (randVals.y < 0.125){\n                materialType = REFLECTION;\n            }\n        }\n        \n        \n        vec3 L1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, L1Norm);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            vec3 worldPos = t * curDir + curPos;\n            color = 2.0*LIGHT1_COLOR * texture(iChannel3,(worldPos.yx* worldPos.z) * 0.01).rgb;\n            normal = L1Norm;\n        }\n        \n        vec3 L2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, L2Norm);\n        if (light2T < t) {\n            t = light2T;\n            n1 = AIR_N;\n            n2 = AIR_N;\n            //materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = L2Norm;\n            materialType = REFRACTION;\n            //if (randVals.x < 2.0*GLASS_R) {\n            //    materialType = REFLECTION;\n            //}else{     \n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0){\n                    n1 = AIR_N;\n                }else{\n                    n2 = AIR_N;\n                }\n            //}\n        }\n        \n        \n        //uncomment для отражения пирамиды\n        \n        /*\n        vec3 L3Norm;\n        float light3T = traceSphere(curPos - sphere_pos, curDir, 0.223, L3Norm);\n        if (light3T < t) {\n            t = light3T;\n            materialType = EMISSION;\n            vec3 worldPos = t * curDir + curPos;\n            color = 2.0*LIGHT1_COLOR * texture(iChannel3,(worldPos.yx* worldPos.z) * 0.01).rgb;\n            normal = L3Norm;\n        }\n        */\n        \n        \n        \n        vec3 pyNorm;\n        float pyT = tracePy(curPos, curDir, pyNorm);\n        if (pyT < t) {\n            t = pyT;\n            normal = pyNorm;\n            materialType = REFLECTION;\n            \n            //color = reflect(curDir, normal);\n            \n            materialType = REFRACTION;\n                if (randVals.x < GLASS_R*2.0) {\n                materialType = REFLECTION;\n            }else{     \n                materialType = REFRACTION;\n                \n                if (dot(curDir, normal) > 0.0){\n                    n1 = AIR_N;\n                }else{\n                    n2 = GLASS_N;\n                }\n                \n            }\n        }\n        \n\n        vec3 cylNorm; \n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) { \n            t = cylT;\n            materialType = DIFFUSE; \n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel3,worldPos.xz*worldPos.y).rgb;\n            normal = cylNorm;\n            materialType = DIFFUSE;\n        }\n        if (t != INF){\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) { \n                fragColor.rgb = color* colorMult;\n                break;\n            }else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal)* colorMult;\n                break;\n            }else if (materialType == REFLECTION){\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            }else if (materialType == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, n2);\n                curPos = worldPos + curDir * 1e-5;\n                if (n1 == AIR_N && n2 == GLASS_N){\n                    vec4 p = raymarch(curPos + vec3(2.0, 5.0, -8), curDir);\n                    float glow = p.w;\n                    flamecol = mix(vec3(0.1, 0.6, 1), vec3(1, 0.5, 0.1), p.y * 0.018 + 2.5) ;\n                    color += mix(vec3(0), flamecol, pow(glow * 2.0, 4.0));\n                    colorMult += mix(vec3(0.1,0.1,0.0), flamecol, pow(glow * 2.0, 4.0));\n                }\n                float tmp = n1; \n                n1 = n2;\n                n2 = tmp; \n            }\n        }else{\n            fragColor.rgb = texture(iChannel1, curDir).rgb * 0.65 * colorMult * vec3(0.6,0.7,0.4); // доп баллы за cubmap\n            \n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0,uv) + texture(iChannel1,uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}