{"ver":"0.1","info":{"id":"4cj3z3","date":"1704473113","viewed":58,"name":"Cheap Voronoi/Worley noise","username":"LudoCrypt","description":"My attempt at doing a voronoi/worley noise algorithm. I call it 'cheap' since it only checks 4 distances instead of 9. For low jitter values it should be perfect, but even 1.0 jitter has slight artifacts every now and then. Use this however you like!","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["voronoi","noise","worley"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define HRT sqrt(2.0) / 2.0\n\nfloat hash(vec2 p) {\n    return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x))));\n}\n\nvec2 voronoiCell(ivec2 p) {\n    float v1 = hash(vec2(p));\n    float v2 = hash(vec2(v1, 1.0));\n    vec2 o = vec2(v1, v2) - 0.5;\n    return o;\n}\n\nfloat voronoiConfigured(vec2 p, ivec2 gridSize, vec2 jitter) {\n    vec2 r = floor(2.0 * mod(vec2(gridSize) * p, 1.0)) * 2.0 - 1.0;\n\n    vec2 rp = p * vec2(gridSize);\n    vec2 cp = floor(rp);\n\n    ivec2 p1 = ivec2(cp);\n    ivec2 p2 = ivec2(cp + vec2(r.x, 0));\n    ivec2 p3 = ivec2(cp + vec2(0, r.y));\n    ivec2 p4 = ivec2(cp + r);\n\n    vec2 h1 = cp + (voronoiCell(p1) * jitter * HRT) + 0.5;\n    vec2 h2 = cp + (voronoiCell(p2) * jitter * HRT) + 0.5;\n    vec2 h3 = cp + (voronoiCell(p3) * jitter * HRT) + 0.5;\n    vec2 h4 = cp + (voronoiCell(p4) * jitter * HRT) + 0.5;\n\n    float d1 = dot(rp - h1, rp - h1);\n    float d2 = dot(rp - h2 - vec2(r.x, 0), rp - h2 - vec2(r.x, 0));\n    float d3 = dot(rp - h3 - vec2(0, r.y), rp - h3 - vec2(0, r.y));\n    float d4 = dot(rp - h4 - r, rp - h4 - r);\n\n    float v = d1;\n    \n    if (d2 < v) {\n        v = d2;\n    }\n\n    if (d3 < v) {\n        v = d3;\n    }\n\n    if (d4 < v) {\n        v = d4;\n    }\n\n    return sqrt(v);\n}\n\nfloat voronoi(vec2 p) {\n    return voronoiConfigured(p, ivec2(16, 16), vec2(1.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n\n    fragColor = vec4(voronoi(uv), 0.0, 0.0, 1.0);\n}","name":"Image","description":"","type":"image"}]}