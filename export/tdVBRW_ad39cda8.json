{"ver":"0.1","info":{"id":"tdVBRW","date":"1606722747","viewed":58,"name":"Turtle simple","username":"iuryBorgesRodrigues","description":"turtle","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sdf","turtle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define AA 2\n\nmat3 rotate_x(float a){float sa = sin(a); float ca = cos(a); return mat3(1.,.0,.0,    .0,ca,sa,   .0,-sa,ca);}\nmat3 rotate_y(float a){float sa = sin(a); float ca = cos(a); return mat3(ca,.0,sa,    .0,1.,.0,   -sa,.0,ca);}\nmat3 rotate_z(float a){float sa = sin(a); float ca = cos(a); return mat3(ca,sa,.0,    -sa,ca,.0,  .0,.0,1.);}\n\n    \nstruct CameraState\n{\n    vec3 vPos;\n    vec3 vTarget;\n    float fFov;\n};\n    \n\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\nfloat sdRoundCone( vec3 p, float r1, float r2, float h )\n{\n  vec2 q = vec2( length(p.xz), p.y );\n    \n  float b = (r1-r2)/h;\n  float a = sqrt(1.0-b*b);\n  float k = dot(q,vec2(-b,a));\n    \n  if( k < 0.0 ) return length(q) - r1;\n  if( k > a*h ) return length(q-vec2(0.0,h)) - r2;\n        \n  return dot(q, vec2(a,b) ) - r1;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdCone( in vec3 p, in vec2 c, float h )\n{\n  // c is the sin/cos of the angle, h is height\n  // Alternatively pass q instead of (c,h),\n  // which is the point at the base in 2D\n  vec2 q = h*vec2(c.x/c.y,-1.0);\n    \n  vec2 w = vec2( length(p.xz), p.y );\n  vec2 a = w - q*clamp( dot(w,q)/dot(q,q), 0.0, 1.0 );\n  vec2 b = w - q*vec2( clamp( w.x/q.x, 0.0, 1.0 ), 1.0 );\n  float k = sign( q.y );\n  float d = min(dot( a, a ),dot(b, b));\n  float s = max( k*(w.x*q.y-w.y*q.x),k*(w.y-q.y)  );\n  return sqrt(d)*sign(s);\n}\nfloat sdEllipsoid( vec3 p, vec3 r )\n{\n  float k0 = length(p/r);\n  float k1 = length(p/(r*r));\n  return k0*(k0-1.0)/k1;\n}\n\nfloat sdCappedCone( vec3 p, float h, float r1, float r2 )\n{\n  vec2 q = vec2( length(p.xz), p.y );\n  vec2 k1 = vec2(r2,h);\n  vec2 k2 = vec2(r2-r1,2.0*h);\n  vec2 ca = vec2(q.x-min(q.x,(q.y<0.0)?r1:r2), abs(q.y)-h);\n  vec2 cb = q - k1 + k2*clamp( dot(k1-q,k2)/dot2(k2), 0.0, 1.0 );\n  float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;\n  return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\n\n\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\nfloat opSmoothSubtraction( float d1, float d2, float k )\n{\n    float h = max(k-abs(-d1-d2),0.0);\n    return max(-d1, d2) + h*h*0.25/k;\n\t//float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n\t//return mix( d2, -d1, h ) + k*h*(1.0-h);\n}\n\nfloat opSmoothUnion( float d1, float d2, float k )\n{\n    float h = max(k-abs(d1-d2),0.0);\n    return min(d1, d2) - h*h*0.25/k;\n\t//float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n\t//return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat sdVerticalCapsule( vec3 p, float h, float r )\n{\n  p.y -= clamp( p.y, 0.0, h );\n  return length( p ) - r;\n}\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\n\nvec2 plane( vec3 p)\n{\n    \n    float x = float(int(mod(p.x*5.0,2.0)+1.00));\n    float z = float(int(mod(p.z*5.0,2.0)+1.00));\n    float check = abs(x-z)*-0.1;\n\treturn vec2(p.y,check);\n}\n\n\nvec2 map( in vec3 p, float atime )\n{\n\tp/=vec3(0.5);\n\n    vec3 p1=p;\n    vec3 p2=p;\n  \tp2.x/=1.5;\n  \tp2.z+=sin(p2.y)*sin(-p2.y*-1.5);\n    \n    p2.z/=0.5;\n    \n    vec3 p3=p;\n    \n    p3.x/=1.5;\n    \n    \n    p3.z+=0.05;\n    p3.y-=0.2;\n    p3*=rotate_y(-3.2);\n  \tp3.z+=sin(p3.y)*sin(-p3.y*-1.5);\n    \n    p3.z/=0.5;\n    \n    \n    p1.z+=0.1;\n    \n    p1*=rotate_y(-3.2);\n    \n    p1.z+=0.1;\n    \n    \n    vec3 p4=p;\n    \n    float casco= sdEllipsoid(p1,vec3(0.3,0.4,0.3));\n    float casco2= sdEllipsoid(p1+vec3(0.0,0.1,-0.12),vec3(0.2,0.25,0.25));\n    \n    \n    \n    \n    float casco3= sdBox(p2,vec3(0.1,0.1,0.01))-0.1;\n    p2.y+=0.2;\n    float casco4= sdBox(p2,vec3(0.1,0.1,0.01))-0.1;\n    \n    \n   \n    \n    float casco5= sdBox(p3,vec3(0.1,0.1,0.01))-0.1;\n    \n    \n    \n    \n    float barriga= sdEllipsoid(p1,vec3(0.3,0.4,0.3));\n    vec3 p5=p;\n    p5/=vec3(1.0,2.0,1.0);\n    p5+=vec3(0.0,-0.15,-0.15);\n    p5*=rotate_x(0.7);\n    float pescoco=sdVerticalCapsule(p5,0.1,0.05);\n    vec3 p6=p;\n    p6.y-=0.6;\n    p6.z-=0.25;\n    p6*=rotate_x(-0.5);\n    float cabeca=sdBox(p6,vec3(0.05,0.02,0.05))-0.1;\n    p6.y-=0.03;\n    p6*=rotate_x(-1.5);\n    float cabeca2=sdCappedCylinder(p6,0.1,0.1);\n    \n    vec3 p7=vec3(abs(p.x),p.yz);\n    \n    p7.x-=0.13;\n    p7.y-=0.62;\n    p7.z-=0.25;\n    float olhos=sdSphere(p7,0.08);\n    p7.x-=0.05;\n    float olhos2=sdSphere(p7,0.04);\n    \n    vec3 p8=p;\n    p8.y-=0.5;\n    p8.z-=0.25;\n   \n    float boca=sdBox(p8,vec3(0.05,0.02,0.04))-0.05;\n   \n    \n    \n    vec3 p9=vec3(abs(p.x),p.yz);\n    p9.x-=0.25;\n    p9.y-=0.2;\n    p9.z-=0.1;\n    p9/=vec3(0.5);\n\n    \n    float braco=sdCappedCone(p9.zxy,0.05,0.05,0.1)-0.1;\n    \n   \n    \n    \n    p9.x-=0.1;\n    p9.y-=0.1;\n    p9.z-=0.2;\n    p9*=rotate_x(0.5);\n    float braco2=sdRoundCone(p9,0.1,0.2,0.3);\n    \n    \n    vec3 p10=vec3(abs(p.x),p.yz);\n    p10.x-=0.3;\n    p10.y+=0.1;\n    p10.z-=0.1;\n    p10/=vec3(0.5);\n    \n    \n    \n    \n     \n    float perna=sdCappedCone(p10.zxy,0.05,0.05,0.1)-0.1;\n    \n    \n    p10.x-=0.1;\n    p10.y+=0.1;\n    p10.z-=0.2;\n    p10*=rotate_x(2.0);\n    \n    float perna2=sdRoundCone(p10,0.1,0.2,0.3);\n   \n    braco=opSmoothUnion(braco,braco2,0.2);\n    perna=opSmoothUnion(perna,perna2,0.2);\n    \n    \n    cabeca=opSmoothUnion(cabeca,cabeca2,0.1);\n    cabeca=opSmoothUnion(cabeca,boca,0.01);\n  \n    \n    \n    casco=max(casco,-p1.z);\n    casco2=max(casco2,-p1.z+0.0);\n    casco=opSmoothUnion(casco,casco2,0.1);\n    casco3=opSmoothUnion(casco3,casco4,0.12);\n    casco3=opSmoothUnion(casco3,casco5,0.12);\n    \n    casco=opSmoothUnion(casco,casco3,0.05);\n  \n    \n    vec2 res = vec2( casco*0.4, 1.0 );\n   \n    res = opU(res,vec2(p.y+0.45,1.0));\n\tres = opU(res,vec2(barriga*0.6,2.5));\n    res = opU(res,vec2(pescoco*0.6,2.5));\n    res = opU(res,vec2(cabeca*0.5,1.0));\n    res = opU(res,vec2(olhos,0.2));\n    res = opU(res,vec2(olhos2*0.5,0.1));\n    res = opU(res,vec2(braco*0.2,1.0));\n    res = opU(res,vec2(perna*0.2,1.0));\n   \n    \n    return res;\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd, float time )\n{\n    vec2 res = vec2(-1.0,-1.0);\n\n    float tmin = 0.5;\n    float tmax = 20.0;\n    \n    float t = tmin;\n    for( int i=0; i<512 && t<tmax; i++ )\n    {\n        vec2 h = map( ro+rd*t, time );\n        if( h.x<0.001 )\n        { \n            res = vec2(t,h.y); \n            break;\n        }\n        t += h.x;\n    }\n    \n    return res;\n}\n\nvec3 calcNormal( in vec3 pos, float time )\n{\n/*\n    vec2 e = vec2(0.0005,0.0);\n    return normalize( vec3( \n        map( pos + e.xyy, time ).x - map( pos - e.xyy, time ).x,\n\t\tmap( pos + e.yxy, time ).x - map( pos - e.yxy, time ).x,\n\t\tmap( pos + e.yyx, time ).x - map( pos - e.yyx, time ).x ) );\n*/\n    vec3 n = vec3(0.0);\n    for( int i=min(iFrame,0); i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*map(pos+0.0005*e,time).x;\n    }\n    return normalize(n);    \n}\n\nfloat calcOcclusion( in vec3 pos, in vec3 nor, float time )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.11*float(i)/4.0;\n        vec3 opos = pos + h*nor;\n        float d = map( opos, time ).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 2.0*occ, 0.0, 1.0 );\n}\n\nvec3 render( in vec3 ro, in vec3 rd, float time )\n{ \n    // sky dome\n    vec3 col = textureLod(iChannel0,rd,0.0).rgb;\n    \n    vec2 res = castRay(ro,rd, time);\n    if( res.y>-0.5 )\n    {\n        float t = res.x;\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos, time );\n        vec3 ref = reflect( rd, nor );\n        \n\t\tcol = vec3(0.2);\n        float ks = 1.0;\n\n        if( res.y==3.5 ) \n        { \n            col = vec3(0.4,0.5,0.6);\n        } \n        else if( res.y==2.5 ) \n        { \n            col = vec3(0.0,255.0,0.0)/255.0;\n        }\n        else if( res.y==0.2 ) \n        { \n            col = vec3(1.0);\n        }\n        else if( res.y==2.0 )\n        { \n            col = vec3(1.0);\n        }\n        else if( res.y==0.1 )\n        { \n            col = vec3(0.0);\n        }\n\t\telse // terrain\n        {\n            col = vec3(0.05,0.09,0.02);\n        }\n        \n        // lighting\n        vec3  sun_lig = normalize( vec3(0.6, 0.35, 0.5) );\n        float sun_dif = clamp(dot( nor, sun_lig ), 0.0, 1.0 );\n        vec3  sun_hal = normalize( sun_lig-rd );\n        float sun_sha = step(castRay( pos+0.001*nor, sun_lig,time ).y,0.0);\n\t\tfloat sun_spe = ks*pow(clamp(dot(nor,sun_hal),0.0,1.0),8.0)*sun_dif*(0.04+0.96*pow(clamp(1.0+dot(sun_hal,rd),0.0,1.0),5.0));\n\t\tfloat sky_dif = sqrt(clamp( 0.5+0.5*nor.y, 0.0, 1.0 ));\n        float bou_dif = sqrt(clamp( 0.1-0.9*nor.y, 0.0, 1.0 ))*clamp(1.0-0.1*pos.y,0.0,1.0);\n\n\t\tvec3 lin = vec3(0.0);\n        lin += sun_dif*vec3(8.10,6.00,4.20)*sun_sha;\n        lin += sky_dif*vec3(0.50,0.70,1.00);\n        lin += bou_dif*vec3(0.40,1.00,0.40);\n\t\tcol = col*lin;\n\t\tcol += sun_spe*vec3(8.10,6.00,4.20)*sun_sha;\n        col*=textureLod(iChannel0,rd,0.0).rgb;\n        \n        col = mix( col, vec3(0.5,0.7,0.9), 1.0-exp( -0.0001*t*t*t ) );\n    }\n\n    return col;\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv =          ( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nmat3 rotx(float a) { mat3 rot; rot[0] = vec3(1.0, 0.0, 0.0); rot[1] = vec3(0.0, cos(a), -sin(a)); rot[2] = vec3(0.0, sin(a), cos(a)); return rot; }\nmat3 roty(float a) { mat3 rot; rot[0] = vec3(cos(a), 0.0, sin(a)); rot[1] = vec3(0.0, 1.0, 0.0); rot[2] = vec3(-sin(a), 0.0, cos(a)); return rot; }\n#define PI 3.14159\nmat3 rotation;\n\nvec4 LoadVec4( sampler2D sampler, in vec2 vAddr )\n{\n    return texelFetch( sampler, ivec2(vAddr), 0 );\n}\nbool AtAddress( vec2 p, vec2 c ) { return all( equal( floor(p), floor(c) ) ); }\n\nvoid StoreVec4( in vec2 vAddr, in vec4 vValue, inout vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = AtAddress( fragCoord, vAddr ) ? vValue : fragColor;\n}\n\nvoid Cam_LoadState( out CameraState cam, sampler2D sampler, vec2 addr )\n{\n    vec4 vPos = LoadVec4( sampler, addr + vec2(0,0) );\n    cam.vPos = vPos.xyz;\n    vec4 targetFov = LoadVec4( sampler, addr + vec2(1,0) );\n    cam.vTarget = targetFov.xyz;\n    cam.fFov = targetFov.w;\n}\n\nvoid Cam_StoreState( vec2 addr, const in CameraState cam, inout vec4 fragColor, in vec2 fragCoord )\n{\n    StoreVec4( addr + vec2(0,0), vec4( cam.vPos, 0 ), fragColor, fragCoord );\n    StoreVec4( addr + vec2(1,0), vec4( cam.vTarget, cam.fFov ), fragColor, fragCoord );    \n}\n\nmat3 Cam_GetWorldToCameraRotMatrix( const CameraState cameraState )\n{\n    vec3 vForward = normalize( cameraState.vTarget - cameraState.vPos );\n\tvec3 vRight = normalize( cross(vec3(0, 1, 0), vForward) );\n\tvec3 vUp = normalize( cross(vForward, vRight) );\n    \n    return mat3( vRight, vUp, vForward );\n}\n\nvec2 Cam_GetViewCoordFromUV( const in vec2 vUV )\n{\n\tvec2 vWindow = vUV * 2.0;\n\tvWindow.x *= iResolution.x / iResolution.y;\n\n\treturn vWindow;\t\n}\n\nvoid Cam_GetCameraRay( const vec2 vUV, const CameraState cam, out vec3 vRayOrigin, out vec3 vRayDir )\n{\n    vec2 vView = Cam_GetViewCoordFromUV( vUV );\n    vRayOrigin = cam.vPos;\n    float fPerspDist = 1.0 / tan( radians( cam.fFov ) );\n    vRayDir = normalize( Cam_GetWorldToCameraRotMatrix( cam ) * vec3( vView, fPerspDist ) );\n}\n\nvec2 Cam_GetUVFromWindowCoord( const in vec2 vWindow )\n{\n    vec2 vScaledWindow = vWindow;\n    vScaledWindow.x *= iResolution.y / iResolution.x;\n\n    return vScaledWindow * 0.5 + 0.5;\n}\n\nvec2 Cam_WorldToWindowCoord(const in vec3 vWorldPos, const in CameraState cameraState )\n{\n    vec3 vOffset = vWorldPos - cameraState.vPos;\n    vec3 vCameraLocal;\n\n    vCameraLocal = vOffset * Cam_GetWorldToCameraRotMatrix( cameraState );\n\t\n    vec2 vWindowPos = vCameraLocal.xy / (vCameraLocal.z * tan( radians( cameraState.fFov ) ));\n    \n    return vWindowPos;\n}\n\n#define ZERO (min(iFrame,0))\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    \t vec3 tot = vec3(0.0);\n\n    for( int m=ZERO; m<AA; m++ )\n    for( int n=ZERO; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5; \n\t\n\t\n    vec2 p = (-iResolution.xy + 2.0*fragCoord+o)/iResolution.y;\n   \n        \n          vec2 m2 = iMouse.xy / iResolution.xy;\n    m2.y *= -1.0;\n    m2 -= vec2(0.5);\n\n    float time = iTime;\n\n    time *= 0.9;\n        \n        \n float fAngle = (iMouse.x / iResolution.x) * radians(360.0);\n    float fElevation = (iMouse.y / iResolution.y) * radians(90.0);\n\n    if ( iMouse.x <= 0.0 )\n    {\n        fAngle = -2.3;\n        fElevation = 0.5;\n    }\n\n    float fDist = 6.0;\n    \n  \n    //float p0 = texture(iChannel0,vec2(0.0,0.0)).g;\n    \n\n   CameraState cam;\n    \n   \n   \n  \tcam.vPos = vec3(sin(fAngle) * fDist * cos(fElevation),sin(fElevation) * fDist,cos(fAngle) * fDist * cos(fElevation));\n    cam.vTarget = vec3(0,0.0,0);\n    cam.fFov = 3.0;\n    \n        // camera\t\n    float an = 10.57;\n    vec3  ta = vec3( 0.0, 0.0, 0.4);\n     vec3 ro = vec3(0.0,0.0,2.9)+vec3(0.0,0.0,0.0);\n    vec3 rd = normalize(vec3(p,-2.0));\n   \n    Cam_GetCameraRay( vec2(p.x,p.y/0.6), cam, ro, rd );\n   \n        \n  \t\n        \n\t// initial mouse position\n    if(iMouse.xy == vec2(0.0))\n    {\n        m2= vec2(0.0, 8.0);\n    }\n\n    rotation = mat3(1.0);\n    rotation = rotx(m2.y * 10.0);\n    rotation *= rotx(PI * 0.5);\n    rotation *= roty(m2.x * 10.0);\n    \n   \n\t\n    mat3 ca = setCamera( ro, ta, 0.0 );\n\n   \n\n    vec3 col = render( ro, rd, time );\n\n    col = pow( col, vec3(0.4545) );\n\n    tot += col;\n    }\n     tot /= float(AA*AA);\n    fragColor = vec4(tot,1.0);\n}\n","name":"Image","description":"","type":"image"}]}