{"ver":"0.1","info":{"id":"lcf3DX","date":"1704446075","viewed":16,"name":"random squares","username":"kywi","description":"first random project","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//////////////////////////////////////////////////////////////////////\nuint seed = 0u;\nvoid hash(){\n    seed ^= 2747636419u;\n    seed *= 2654435769u;\n    seed ^= seed >> 16;\n    seed *= 2654435769u;\n    seed ^= seed >> 16;\n    seed *= 2654435769u;\n}\nvoid initRandomGenerator(vec2 fragCoord){\n    seed = uint(fragCoord.y*iResolution.x + fragCoord.x)+uint(iFrame)*uint(iResolution.x)*uint(iResolution.y);\n}\n\nfloat random(){\n    hash();\n    return float(seed)/4294967295.0;\n}\n/////////////////////////////////////////////////////////////////////\n\nvec3 getColor(float t) {\n    vec3 a = vec3(0.650, 0.500, 0.310); \n    vec3 b = vec3(-0.650, 0.500, 0.600);\n    vec3 c = vec3(0.333, 0.278, 0.278);\n    vec3 d = vec3(0.660, 0.000, 0.667);\n    \n    return a + b * cos(6.28318*(c*t + d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    initRandomGenerator(fragCoord);\n    float offset = random();\n    \n    float size = .2;\n    float gridRows=2.0;\n    float gridCols=.0;\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord / iResolution.xy)*2. -1.;\n    float ratio = iResolution.x / iResolution.y;\n    uv.x *= ratio;\n    vec2 uvv = uv;\n    float uv0 = length(uv);\n    //uv = fract(uv * 2.) - .5;\n    uv = fract(uv) *2. -1.;\n    vec2 res = iResolution.xy;\n    res = fract(res) -.5;\n    float d = length(uv);\n    //d = floor(length(uv));\n    float slice =  ceil(abs(uvv.x)) * sign(uvv.x)+ ceil(abs(uvv.y)) * sign(uvv.y) + sign(uvv.x);\n    \n    size = cos(slice + size + (iTime)  * 2. - 2.)/3.;\n    \n    float offset1 = cos(slice + log(iTime));\n    d = length(uv.xy + offset1);\n    \n    \n    float e = (abs(uv.x + offset1) - size < 0.02) && (abs(uv.y + offset1) - size < 0.02) ? 1.0 : 0.0;\n    // Time varying pixel color\n    \n    vec3 col =e * getColor(d + slice);// * getColor(uv0 + iTime);\n    //vec3 col = slice * vec3(.5,.5,.5);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}