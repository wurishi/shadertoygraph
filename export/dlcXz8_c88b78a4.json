{"ver":"0.1","info":{"id":"dlcXz8","date":"1685009722","viewed":29,"name":"Ellipse_Drawing-1","username":"rahulnaskar","description":"This shader is aimed to demonstrate drawing of ellipse.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["ellipse"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool DrawEllipse(vec2 center, vec2 uv, float a, float b, float size, float thickness)\n{\n    float a_ = a * size;\n    float b_ = b * size;\n    float distOuter = pow(uv.x - center.x, 2.0) / (a_ * a_) + pow(uv.y - center.y, 2.0) / (b_ * b_);\n    float distInner = distOuter * (1. - thickness);\n    return size - thickness > distInner && size - thickness < distOuter;\n}\n\nfloat DistanceFromCenterOfEllipse(vec2 center, vec2 uv, float a, float b, float size)\n{\n    float a_ = a * size;\n    float b_ = b * size;\n    float distOuter = pow(uv.x - center.x, 2.0) / (a_ * a_) + pow(uv.y - center.y, 2.0) / (b_ * b_);\n    return abs(length(uv) - distOuter);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x -= .5;\n    uv.x *= iResolution.x / iResolution.y;\n    uv.y -= .5;\n\n    float col = 0.;\n    vec2 center = vec2(.0, .0);\n\n    col = DrawEllipse(center, uv, .5, .4, 1., .99999) ? (1. - col) : 0.;\n\n    \n    bool distance1 = DrawEllipse(uv, uv * .01, .8, .2, 1., .03);\n    if (distance1) {\n        col = (1. - col);\n    }\n    \n    bool distance2 = DrawEllipse(uv, uv * .01, .8, .2, 1., .03);\n    if (distance2 && DistanceFromCenterOfEllipse(uv, uv * .01, .8, .2, 1.) > .03)  {\n        vec2 timePos = vec2(cos(iTime), sin(iTime));\n        float angle = acos(dot(normalize(timePos),normalize(uv)));\n        col = angle < .01 ? (1. - col * .3) : col;\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,col,col,0.0);\n}","name":"Image","description":"","type":"image"}]}