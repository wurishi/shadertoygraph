{"ver":"0.1","info":{"id":"lltXWB","date":"1481542369","viewed":487,"name":"stochastic rasterization","username":"rapso","description":"modified version of https://www.shadertoy.com/view/lldSWS\nbasic idea:\nyou exploit caches|rasterizer by rendering regular sub-frames;you jitter time for MB;view for DoF;screenoffset for AA;skip rendering of object for simulated transparency","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["stochastic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    //DBG direct input\n    //fragColor = texture( iChannel0, uv ); return;\n    \n    const int NUM_IMG_HZ = 4;\n    const int NUM_IMG_VT = 4;\n    vec2 tuv = vec2(NUM_IMG_HZ,NUM_IMG_VT) * uv;\n    vec2 juv = fract( tuv );\n    \n    //DBG single\n    //fragColor = texture( iChannel0, uv / vec2(NUM_IMG_HZ,NUM_IMG_VT) ); return;\n    \n    vec2 subFrame = floor( mod(fragCoord.xy, vec2(NUM_IMG_HZ,NUM_IMG_VT) ) );\n    vec2 luv = ( subFrame + uv ) / vec2(NUM_IMG_HZ,NUM_IMG_VT);\n    vec3 c = texture( iChannel1, luv ).rgb;\n    \n    //c /= float(NUM_IMG_HZ+NUM_IMG_VT);\n    \n\tfragColor = vec4( c, 1.0 );\n    \n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvec3 img( vec2 uv, float in_time )\n{\n    //note: purposefully aliased circle\n    const vec2 ctr = vec2(0.88, 0.5);\n    const float r = 0.45;\n    const float w = 0.015;\n    float d0 = length( ctr - uv ) - r;\n    float d1 = length( ctr - uv ) - r+w;\n    float c0 = step(d0,0.0) * step(0.0, d1);\n\n    //note: purposefully aliased line\n    float t = 6.28 * in_time / 5.0;\n    vec2 v = vec2( cos(t), sin(t) );\n    vec2 vd = uv - ctr;\n    float ld = dot(v, vd);\n    vec3 c1 = vec3( step( ld, 0.25*w ) * step( -0.25*w, ld ) );\n    c1 *= step( length(vd), r ); //note: limit to circle\n    vec2 vo = vec2(-v.y, v.x );\n    c1 *= step( dot(vo,vd), 0.0 ); //note: cut half\n    c1 *= vec3(1.0, 0.3, 0.1);\n\n    return vec3(c0+c1);\n}\n\nfloat hash(in ivec2 c)\n{\n    int x = 0x3504f333*c.x*c.x + c.y;\n    int y = 0xf1bbcdcb*c.y*c.y + c.x;\n\n    return float(x*y)*(2.0/8589934592.0)+0.5;\n}\nfloat hash( vec2 v )\n{\n    //return hash( ivec2(1024.0*v) );\n    return fract(sin(dot(v,vec2(4334.3423,7168.98)))*4234.423);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspect = iResolution.x / iResolution.y;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    const float frametime = 1.0/60.0;\n    const int NUM_IMG_HZ = 4;\n    const int NUM_IMG_VT = 4;\n    const float NUM_IMG_HZ_F = float(NUM_IMG_HZ);\n\tconst float NUM_IMG_VT_F = float(NUM_IMG_VT);\n    vec2 tuv = vec2(NUM_IMG_HZ,NUM_IMG_VT) * uv;\n    vec2 juv = fract( tuv );\n    juv *= vec2( aspect, 1.0 );\n    \n    float tile_idx01 = (floor(tuv.x) + floor(tuv.y)*NUM_IMG_HZ_F) / float(NUM_IMG_HZ_F*NUM_IMG_VT_F);\n    \n    //float bayer = texture( iChannel0, uv / iChannelResolution[0].xy * iResolution.xy, -10.0).r;\n    //fragColor = vec4(vec3(bayer), 1.0 ); return;\n        \n    float FILTERWIDTH = 4.0 / iResolution.x;\n    float TIME_WIDTH = 2.0 * frametime;\n            vec2 seed = uv*0.0 + tile_idx01;// + fract(iTime);\n            vec3 jitter = vec3( hash(seed),\n                                hash(seed+0.1337),\n                                hash(seed+0.3141)) - 0.5;\n    \n    vec3 c;\n    //for ( int i=0; i<NUM_IMG_HZ; ++i )\n    {\n        //for ( int j=0; j<NUM_IMG_VT; ++j )\n        {\n            \n            //TODO: better sample-distributions\n            vec2 luv = juv + jitter.xy * FILTERWIDTH;\n            float lt = iTime;// + jitter.z * TIME_WIDTH;\n             \n           \tc = img( luv, lt ); \n        }\n    }\n    \n    fragColor = vec4(c,1.0);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 s_0 = texture( iChannel0, uv );\n    vec4 s_1 = texture( iChannel1, uv );\n    \n    //TODO: some rejection\n    //note: with history buffer\n    fragColor = mix( s_0, s_1, 0.9 );\n}","name":"Buf B","description":"","type":"buffer"}]}