{"ver":"0.1","info":{"id":"dl2XDt","date":"1676831917","viewed":151,"name":"hyperboloid cooling tower","username":"jt","description":"Attempt to produce a [url=https://en.wikipedia.org/wiki/Cooling_tower#Hyperboloid_cooling_tower]hyperboloid cooling tower[/url] like structure by revolution of iq's [url=https://www.shadertoy.com/view/DtjXDG]Hyperbola - distance[/url].\n","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["tower","hyperbola","construction","concrete","structure","hyperboloid","building","cooling","engineering"],"hasliked":0,"parentid":"4tjXWt","parentname":"Simple Concrete Material"},"renderpass":[{"inputs":[],"outputs":[],"code":"// https://www.shadertoy.com/view/dl2XDt hyperboloid cooling tower by jt\n// based on https://www.shadertoy.com/view/4tjXWt Simple Concrete Material\n// using iq's https://www.shadertoy.com/view/DtjXDG Hyperbola - distance\n\n// tags: tower, hyperbola, hyperboloid, construction, concrete, structure, building, cooling, engineering\n\n// A simple hyperboloid cooling tower like structure with concrete material by rotating a hyperbola.\n\n\n// iq's https://www.shadertoy.com/view/DtjXDG Hyperbola - distance\n\n// The MIT License\n// Copyright © 2023 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Distance to a Hyerbola, which is just the y(x)=k/x curve rotated 45 degrees.\n//\n// Minimizing the distance squared D² = (x-t)²+(y-k/t)² produces\n//\n// t⁴ - xt³ + kyt - k² = 0\n//\n// which can be solved with the quartic formula, as described in Wikipedia:\n// https://en.wikipedia.org/wiki/Quartic_equation. I followed the\n// section \"Summary of Ferrari's method\" and simplified a lot of things\n// (complex branches to reals, trigonometrics, constant unfolding, etc)\n// until I got this expression.\n//\n// Based on https://www.shadertoy.com/view/ftcyW8\n//\n// List of some other 2D distances: https://www.shadertoy.com/playlist/MXdSRf\n// and iquilezles.org/articles/distfunctions2d\n\n// https://www.shadertoy.com/view/DtjXDG Hyperbola - distance by iq\nfloat sdHyberbola( in vec2 p, in float k, in float he ) // k in (0,inf)\n{\n    // symmetry and rotation\n    p = abs(p);\n    p = vec2(p.x-p.y,p.x+p.y)/sqrt(2.0);\n\n    // distance to y(x)=k/x by finding t in such that t⁴ - xt³ + kyt - k² = 0\n    float x2 = p.x*p.x/16.0;\n    float y2 = p.y*p.y/16.0;\n    float r = k*(4.0*k - p.x*p.y)/12.0;\n    float q = (x2 - y2)*k*k;\n    float h = q*q + r*r*r;\n    float u;\n    if( h<0.0 )\n    {\n        float m = sqrt(-r);\n        u = m*cos( acos(q/(r*m))/3.0 );\n    }\n    else\n    {\n        float m = pow(sqrt(h)-q,1.0/3.0);\n        u = (m - r/m)/2.0;\n    }\n    float w = sqrt( u + x2 );\n    float b = k*p.y - x2*p.x*2.0;\n    float t = p.x/4.0 - w + sqrt( 2.0*x2 - u + b/w/4.0 );\n\n    // comment this line out for an infinite hyperbola\n    t = max(t,sqrt(he*he*0.5+k)-he/sqrt(2.0));\n\n    // distance from t\n    float d = length( p-vec2(t,k/t) );\n\n    // sign\n    //return p.x*p.y < k ? d : -d; // original\n    return d; // don't need the side in this shader\n}\n\n/*\nfloat hyperboloid_cooling_tower(vec3 p)\n{\n    float s = 1.5;\n    vec2 q = vec2(length(p.xy), p.z);\n    return sdHyberbola(q*s, s, s)/s;\n}\n*/\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b ) // https://iquilezles.org/articles/distfunctions2d/\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat line(vec2 p, float a, float b) // specialized sdSegment to x-axis only (but still 2d)\n{\n    float pax = p.x - a;\n    float bax = b - a;\n    float h = clamp((pax*bax)/(bax*bax), 0.0, 1.0);\n    return length(vec2(pax - bax*h, p.y));\n}\n\nfloat hyperboloid_cooling_tower(vec3 p, float h)\n{\n    //float o = sqrt(2.0); // max/\"needle\"\n    float o = 1.0;\n    vec2 q = vec2(length(p.xy), p.z);\n    q.x += o;\n    //return sdHyberbola(q, 1.0, 1.0) - h;\n    return p.z < 0.0 ? abs(sdHyberbola(q, 1.0, 1.0)) - h : abs(sdSegment(vec2(length(p.xy), p.z), vec2(sqrt(2.0)-o-h, 0), vec2(sqrt(2.0)-o+h, 0)));\n    //return p.z < 0.0 ? abs(sdHyberbola(q, 1.0, 1.0)) - h : abs(line(vec2(length(p.xy), p.z), sqrt(2.0)-o-h, sqrt(2.0)-o+h));\n}\n\nfloat halfspace(vec3 p)\n{\n    return p.z;\n}\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n#define ITER_MAX 200u\n\nfloat map(vec3 p)\n{\n    float scale = 2.0;\n    float d = DIST_MAX;\n    d = min(d, halfspace(p));\n    float t = hyperboloid_cooling_tower(p / scale + vec3(0,0,-1), 0.02) * scale;\n    d = min(d, t);\n    return d;\n}\n\n// https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n#define MOD3 vec3(.1031,.11369,.13787)\n//#define MOD3 vec3(443.8975,397.2973, 491.1871)\nfloat hash31(vec3 p3)\n{\n    p3  = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return -1.0 + 2.0 * fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 hash33(vec3 p3)\n{\n    p3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return -1.0 + 2.0 * fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\n\n// https://www.shadertoy.com/view/4sc3z2\n// Noise Lab (3D) by candycat\nfloat perlin_noise(vec3 p)\n{\n    vec3 pi = floor(p);\n    vec3 pf = p - pi;\n\n    vec3 w = pf * pf * (3.0 - 2.0 * pf);\n\n    return  mix(\n                mix(\n                    mix(dot(pf - vec3(0, 0, 0), hash33(pi + vec3(0, 0, 0))),\n                        dot(pf - vec3(1, 0, 0), hash33(pi + vec3(1, 0, 0))),\n                        w.x),\n                    mix(dot(pf - vec3(0, 0, 1), hash33(pi + vec3(0, 0, 1))),\n                        dot(pf - vec3(1, 0, 1), hash33(pi + vec3(1, 0, 1))),\n                        w.x),\n                    w.z),\n                mix(\n                    mix(dot(pf - vec3(0, 1, 0), hash33(pi + vec3(0, 1, 0))),\n                        dot(pf - vec3(1, 1, 0), hash33(pi + vec3(1, 1, 0))),\n                        w.x),\n                    mix(dot(pf - vec3(0, 1, 1), hash33(pi + vec3(0, 1, 1))),\n                        dot(pf - vec3(1, 1, 1), hash33(pi + vec3(1, 1, 1))),\n                        w.x),\n                    w.z),\n                w.y);\n}\n\n// https://www.shadertoy.com/view/4sc3z2\n// Noise Lab (3D) by candycat\nfloat simplex_noise(vec3 p)\n{\n    const float K1 = 0.333333333;\n    const float K2 = 0.166666667;\n\n    vec3 i = floor(p + (p.x + p.y + p.z) * K1);\n    vec3 d0 = p - (i - (i.x + i.y + i.z) * K2);\n\n    // thx nikita: https://www.shadertoy.com/view/XsX3zB\n    vec3 e = step(vec3(0.0), d0 - d0.yzx);\n    vec3 i1 = e * (1.0 - e.zxy);\n    vec3 i2 = 1.0 - e.zxy * (1.0 - e);\n\n    vec3 d1 = d0 - (i1 - 1.0 * K2);\n    vec3 d2 = d0 - (i2 - 2.0 * K2);\n    vec3 d3 = d0 - (1.0 - 3.0 * K2);\n\n    vec4 h = max(0.6 - vec4(dot(d0, d0), dot(d1, d1), dot(d2, d2), dot(d3, d3)), 0.0);\n    vec4 n = h * h * h * h * vec4(dot(d0, hash33(i)), dot(d1, hash33(i + i1)), dot(d2, hash33(i + i2)), dot(d3, hash33(i + 1.0)));\n\n    return dot(vec4(31.316), n);\n}\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal( vec3 p )\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*map( p + k.xyy*h ) +\n                      k.yyx*map( p + k.yyx*h ) +\n                      k.yxy*map( p + k.yxy*h ) +\n                      k.xxx*map( p + k.xxx*h ) );\n}\n\nfloat trace(vec3 ro, vec3 rd, float t0, float t1)\n{\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON)\n            return t;\n        t += h;\n    }\n    return t1;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat shadow( in vec3 ro, in vec3 rd, float t0, float t1 )\n{\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++)\n    {\n        float h = map(ro + rd*t);\n        if( h<EPSILON )\n            return 0.0;\n        t += h;\n    }\n    return 1.0;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow(vec3 ro, in vec3 rd, float t0, float t1, float k)\n{\n    float res = 1.0;\n    float ph = 1e20;\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++)\n    {\n        float h = map(ro + rd*t);\n        if( h < EPSILON )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor );\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\nvec3 material(vec3 p)\n{\n    vec3 color = vec3(0.0);\n    vec3 color0 = mix(vec3(0.45), vec3(0.55), simplex_noise(p*vec3(20.0, 20.0, 1.0)));\n    //vec3 color0 = mix(vec3(0.4), vec3(0.6), perlin_noise(p*vec3(20.0, 20.0, 1.0)));\n    vec3 color1 = mix(vec3(0.4), vec3(0.6), simplex_noise(p*vec3(50.0, 50.0, 50.0)));\n    //vec3 color1 = mix(vec3(0.4), vec3(0.6), perlin_noise(p*vec3(50.0, 50.0, 50.0)));\n    color = mix(color0, color1, 0.75);\n    return color;\n}\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    //I = 2.0 * I.xy / R - 1.0;\n    //I.x *= R.x / R.y;\n    I = (2.0 * I - R) / R.y; // concise scaling thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : 1.25 * pi / 2.0;\n\n    vec3 ro = vec3(0.0, 0.0,-5.0);\n    vec3 rd = normalize(vec3(I.xy, 2.0)); // NOTE: omitting normalization results in clipped edges artifact\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n\n    ro.z += 0.5;\n\n    float dist = trace(ro, rd, 0.0, DIST_MAX);\n    vec3 dst = ro + rd * dist;\n    vec3 n = normal(dst);\n\n    vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n    vec3 ambient = vec3(0.4);\n    float brightness = max(dot(lightdir, n), 0.0);\n    if(brightness > 0.0)\n        brightness *= shadow(ro + rd * dist + n * 0.01, lightdir, 0.0, DIST_MAX);\n        //brightness *= softshadow(ro + rd * dist + n * 0.01, lightdir, 0.0, DIST_MAX, 20.0);\n    //vec3 color = (n * 0.5 + 0.5);\n    vec3 color = mix(vec3(0.1), vec3(material(dst)), step(-1.0, dst.z));\n    color *= mix(vec3(0.25), vec3(1), step(0.01, dst.z)); // quick hack to color ground differently\n    color = (ambient * calcAO(dst, n) + brightness) * color;\n\n    fragColor = mix(vec4(color, 1.0), vec4(0.0), step(DIST_MAX, dist));\n    fragColor = sqrt(fragColor); // approximate gamma\n}\n","name":"Image","description":"","type":"image"}]}