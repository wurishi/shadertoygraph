{"ver":"0.1","info":{"id":"Ws2Szd","date":"1554739244","viewed":157,"name":"cam filter edge detection","username":"gagarinloops","description":"simple edge detection","likes":1,"published":1,"flags":2,"usePreview":0,"tags":["boxfilter","edgedetection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// Fork of \"box filter edge detection\" by danielmarg. https://shadertoy.com/view/Mdl3z4\n// 2019-04-08 15:55:41\n\nconst float kernelWidth = 3.;\nconst float kernelHeight = 3.;\nconst float kernelSize = kernelWidth * kernelHeight;\n\nvec2 getUV(vec2 fragCoord) {\n\treturn vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tfloat kernel[(int(kernelWidth * kernelHeight))];\n\tkernel[0] = -31.;\n\tkernel[1] = -1.;\n\tkernel[2] = 21.;\n\tkernel[3] = 12.;\n\tkernel[4] =  -8.;\n\tkernel[5] = -2.;\n\tkernel[6] = -2.;\n\tkernel[7] = -1.;\n\tkernel[8] = 11.;\n\t\n\tvec4 result = vec4(0.);\n\tvec2 uv = getUV(fragCoord);\n\t\n\tfor(float y = 0.; y < kernelHeight; ++y) {\n\t\tfor(float x = 0.; x < kernelWidth; ++x) {\n\t\t\tresult += texture(iChannel0, vec2(uv.x + (float(int(x - kernelWidth / 2.)) / iResolution.x), \n\t\t\t\t\t\t\t\t\t\t\t\tuv.y + (float(int(y - kernelHeight / 2.)) / iResolution.y)))\n\t\t\t\t\t\t\t\t\t\t   * kernel[int(x + (y * kernelWidth))];\n\t\t}\n\t}\n\t\n\tfragColor = result;\n}","name":"Image","description":"","type":"image"}]}