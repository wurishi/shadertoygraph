{"ver":"0.1","info":{"id":"msGyR3","date":"1696369603","viewed":76,"name":"Downsampling blur","username":"googl4","description":"Averages out to ~14.5 samples per full res pixel with the 4 passes at 1.5 downscale factor used here.","likes":0,"published":1,"flags":32,"usePreview":1,"tags":["blur"],"hasliked":0,"parentid":"MdyBzG","parentname":"Kawase blur"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 res = iChannelResolution[0].xy;\n    \n    // also needs to be changed in the other passes\n    // higher downscale factor = lower quality, wider radius\n    float downscale = 1.5;\n    \n    vec3 col;\n    \n    if( uv.x < 0.25 ) {\n        col = texture( iChannel0, uv / pow( downscale, 1.0 ) ).rgb;\n        \n    } else if( uv.x < 0.5 ) {\n        col = texture( iChannel1, uv / pow( downscale, 2.0 ) ).rgb;\n        \n    } else if( uv.x < 0.75 ) {\n        col = texture( iChannel2, uv / pow( downscale, 3.0 ) ).rgb;\n        \n    } else {\n        col = texture( iChannel3, uv / pow( downscale, 4.0 ) ).rgb;\n    }\n    \n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float weights[9] = float[9](\n    1.0, 2.0, 1.0,\n    2.0, 3.0, 2.0,\n    1.0, 2.0, 1.0\n);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 res = iChannelResolution[0].xy;\n    \n    uv *= 1.5;\n    \n    vec3 col = vec3( 0.0 );\n    \n    for( int i = 0; i < 9; i++ ) {\n        int xoff = i % 3 - 1;\n        int yoff = i / 3 - 1;\n        \n        vec3 s = texture( iChannel0, uv + vec2( xoff, yoff ) / res ).rgb;\n        \n        col += s * ( 1.0 / 9.0 ); // ( weights[i] / 15.0 );\n    }\n    \n    if( uv.x > 1.0 || uv.y > 1.0 ) {\n        col = vec3( 1.0, 0.0, 1.0 );\n    }\n    \n    fragColor = vec4( col, 1.0 );\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"const float weights[9] = float[9](\n    1.0, 2.0, 1.0,\n    2.0, 3.0, 2.0,\n    1.0, 2.0, 1.0\n);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 res = iChannelResolution[0].xy;\n    \n    uv *= 1.5;\n    \n    vec3 col = vec3( 0.0 );\n    \n    for( int i = 0; i < 9; i++ ) {\n        int xoff = i % 3 - 1;\n        int yoff = i / 3 - 1;\n        \n        vec3 s = texture( iChannel0, uv + vec2( xoff, yoff ) / res ).rgb;\n        \n        col += s * ( 1.0 / 9.0 ); // ( weights[i] / 15.0 );\n    }\n    \n    if( uv.x > 1.0 || uv.y > 1.0 ) {\n        col = vec3( 1.0, 0.0, 1.0 );\n    }\n    \n    fragColor = vec4( col, 1.0 );\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"const float weights[9] = float[9](\n    1.0, 2.0, 1.0,\n    2.0, 3.0, 2.0,\n    1.0, 2.0, 1.0\n);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 res = iChannelResolution[0].xy;\n    \n    uv *= 1.5;\n    \n    vec3 col = vec3( 0.0 );\n    \n    for( int i = 0; i < 9; i++ ) {\n        int xoff = i % 3 - 1;\n        int yoff = i / 3 - 1;\n        \n        vec3 s = texture( iChannel0, uv + vec2( xoff, yoff ) / res ).rgb;\n        \n        col += s * ( 1.0 / 9.0 ); // ( weights[i] / 15.0 );\n    }\n    \n    if( uv.x > 1.0 || uv.y > 1.0 ) {\n        col = vec3( 1.0, 0.0, 1.0 );\n    }\n    \n    fragColor = vec4( col, 1.0 );\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"const float weights[9] = float[9](\n    1.0, 2.0, 1.0,\n    2.0, 3.0, 2.0,\n    1.0, 2.0, 1.0\n);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 res = iChannelResolution[0].xy;\n    \n    uv *= 1.5;\n    \n    vec3 col = vec3( 0.0 );\n    \n    for( int i = 0; i < 9; i++ ) {\n        int xoff = i % 3 - 1;\n        int yoff = i / 3 - 1;\n        \n        vec3 s = texture( iChannel0, uv + vec2( xoff, yoff ) / res ).rgb;\n        \n        col += s * ( 1.0 / 9.0 ); // ( weights[i] / 15.0 );\n    }\n    \n    if( uv.x > 1.0 || uv.y > 1.0 ) {\n        col = vec3( 1.0, 0.0, 1.0 );\n    }\n    \n    fragColor = vec4( col, 1.0 );\n}","name":"Buffer D","description":"","type":"buffer"}]}