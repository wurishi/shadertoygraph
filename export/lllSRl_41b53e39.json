{"ver":"0.1","info":{"id":"lllSRl","date":"1439052674","viewed":180,"name":"raymarching + phong","username":"jnalanko","description":"asdfasdfa","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["asdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"float sdf(vec3 p){\n    p.y -= sin(iTime+sin(p.x));\n\treturn sqrt(p.z*p.z + p.y*p.y) - 1.0;   \n}\n\nvec3 get_normal(vec3 pos)\n{\n\tvec3 eps = vec3(0.01,0,0);\n\treturn normalize(vec3(\n\t\tsdf(pos + eps.xyy) - sdf(pos - eps.xyy),\n\t\tsdf(pos + eps.yxy) - sdf(pos - eps.yxy),\n\t\tsdf(pos + eps.yyx) - sdf(pos - eps.yyx)\n\t));\n}\n\n// Clamped dot\nfloat cdot(vec3 a, vec3 b){\n    return max(0.0,dot(a,b));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // Fix coordinate system\n    float aspect_ratio = 16.0/9.0;\n\tvec2 pixel_pos = fragCoord.xy / iResolution.xy; // [0,1]\n    pixel_pos -= vec2(0.5,0.5); // [-1/2, 1/2]\n    pixel_pos *= vec2(2,2); // [-1,1]\n    pixel_pos.x *= aspect_ratio;\n    \n    // Raymarch\n    vec3 ray = vec3(pixel_pos.x, pixel_pos.y,-1);\n    vec3 v_0 = vec3(0,0,5); // Camera position\n    vec3 pos = v_0;\n    for(int step = 0; step < 30; step++){\n  \t\tpos += ray * sdf(pos)*0.98;\n    }\n    \n    // Phong: k_s * cos(alpha)^q * intensity / r^2\n    float sun_intensity = 70.0;\n    //vec3 sun = vec3(30.0 * sin(iTime),20,30.0*cos(iTime));\n    vec3 sun = vec3(0,0,50);\n    float k_s = 20.0;\n    float q = 2.0;    \n    \n    if(sdf(pos) > 0.1) // No hit\n        fragColor = vec4(0.1,0.1,0.3,1);\n    else{\n        vec3 surface = pos;\n        vec3 normal = get_normal(surface);\n        vec3 l = surface - sun; // Sun to surface\n        float intensity_at_surface = sun_intensity / dot(l,l); // Inverse square decay\n        \n    \tvec3 l_prime = l + 2.0*dot(l,normal)*normal;\n        vec3 to_camera = v_0 - surface;\n        float cos_angle = cdot(-l_prime, to_camera)/(length(l_prime) * length(to_camera));\n        float specular = k_s * pow(cos_angle,q) * intensity_at_surface;\n        float diffuse = 0.2 * cdot(normal, -l) * intensity_at_surface;\n        float ambient = 0.05;\n        vec3 light = vec3(clamp(diffuse + specular + ambient,0.0,1.0));\n        fragColor = vec4(light.x*0.2, light.y, light.z,1);\n    }\n\n}\n\n","name":"","description":"","type":"image"}]}