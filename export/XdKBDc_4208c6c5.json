{"ver":"0.1","info":{"id":"XdKBDc","date":"1530837536","viewed":154,"name":"Liquid Metal Block","username":"rkibria","description":"Fake metal looking effect.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nThanks to\n\nhttp://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/\nhttps://iquilezles.org/articles/distfunctions\n\n*/\n\n#define MAX_MARCHING_STEPS 99\n#define EPSILON 0.07\n#define MAX_DIST 100.0\n\nfloat udBox( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\n\nfloat sdf( vec3 p )\n{\n\tfloat d = udBox( p, vec3(4.5, 0.6, 4.5) ) ;\n    float k1 = 1.4 + (sin(0.9*iTime)+1.)/2. * 1.4;\n    float k2 = 1.3 + 0.2*sin(0.5*iTime);\n    d += 0.005 * length(p)\n        * (k2 + sin(-1.1 + k1 * p.x + 0.5 * p.y))\n        * (k2 + cos(0.6 - k1 * p.y))\n        * (k2 + sin(0.5 - k1 * p.z))\n        * sin(iTime * 3.);\n\treturn d;\n}\n\nvec3 estimateNormal(vec3 p) {\n    return normalize(vec3(\n        sdf(vec3(p.x + EPSILON, p.y, p.z)) - sdf(vec3(p.x - EPSILON, p.y, p.z)),\n        sdf(vec3(p.x, p.y + EPSILON, p.z)) - sdf(vec3(p.x, p.y - EPSILON, p.z)),\n        sdf(vec3(p.x, p.y, p.z  + EPSILON)) - sdf(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n\nvec3 lighting(in vec3 pos, in vec3 n)\n{\n    vec3 c = (n + 1.) / 2.;\n    vec3 a = vec3( 0.05 + max(0., dot(n, vec3(1., 0.5, 0.5)) ) );\n    a = a / ( 5. + pos.z );\n    return mix(a, c, 0.05);\n}\n\nvec3 march(in vec2 uv, in vec3 eye, in vec3 ray)\n{\n    float depth = 0.0;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        vec3 pos = eye + depth * ray;\n        float dist = sdf( pos );\n        if( dist < EPSILON ) {\n            return lighting( pos, estimateNormal( pos ) );\n        }\n\n        depth += dist;\n\n        if ( depth >= MAX_DIST ) {\n            return mix( vec3(0.3), vec3( 0., 0., 1. ), uv.y );\n        }\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = ( fragCoord - .5 * iResolution.xy ) / iResolution.x;\n    vec3 col = vec3( 0 );\n    \n    vec3 eye = vec3(0., 1.5, -15.);\n    vec3 ray = normalize( vec3( uv, 1. ) );\n\n    col = march( uv, eye, ray );\n    \n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}