{"ver":"0.1","info":{"id":"ftyBRh","date":"1663971294","viewed":143,"name":"text renderer","username":"jt","description":"Another text renderer. Intended to be used for projects outside of shadertoy, where the text can be provided externally either by the text array (otherwise the array could be replaced by an integer texture). Runs fast [b]iff[/b] array already initialized.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["text","renderer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/ftyBRh text renderer by jt\n\n// license: MIT license (as in https://www.shadertoy.com/terms)\n\n/*\n\nCopyright (c) 2022 Jakob Thomsen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/ \n\n#define TEXT_COLUMNS 20u\n#define TEXT_LINES 10u\n\n#define UPPER 32u\n#define LOWER 64u\n\n// Write TEXT_COLUMNS x TEXT_LINES in a rectangle (a, b).\nfloat write_text(uint text[TEXT_LINES*TEXT_COLUMNS], vec2 a, vec2 b, vec2 p)\n{\n\n    p.y = 1.0 - p.y; // the text-coordinate system starts at the upper left corner\n    p = clamp(p, a, b);\n    //if (p.x < a.x || p.x > b.x || p.y < a.y || p.y > b.y)\n    //    return 0.0;\n\n    //if(any(lessThan(p, a + vec2(0.005)))) return 1.0;\n    //if(any(greaterThan(p, b - vec2(0.005)))) return 1.0;\n    p -= a;\n\n    p /= b - a;\n\n    p *= vec2(TEXT_COLUMNS, TEXT_LINES);\n\n    vec2 local = fract(p);\n    local.x = (local.x * 0.5) + 0.25;\n    local.y = 1.0 - local.y;\n    uvec2 tile = uvec2(floor(p));\n    uint index = tile.x + tile.y * TEXT_COLUMNS;\n    //return (tile.x & 1u) == (tile.y & 1u) ? vec4(1) : vec4(0);\n    uint c = text[index] + 32u; // NOTE: using offset 32 so zeroed array results in blanks (clearing entire array is too slow!)\n\t//return texture(iChannel0, local/16. + fract(vec2(c, 15u - c/16u) / 16.0)).x; // NOTE: line artifacts when mipmapping enabled\n\treturn textureLod(iChannel0, local/16.0 + fract(vec2(c, 15u - c/16u) / 16.0), 0.0).x; // NOTE: immune to line-artifacts even with mipmapping\n    //return textureGrad(iChannel0, local/16.0 + fract(vec2(c, 15u-c/16u) / 16.0), dFdx(p/16.0), dFdy(p/16.0)).x; // from https://www.shadertoy.com/view/llySRh iResolution, iMouse, iDate, etc by FabriceNeyret2\n    //return texture(iChannel0, local/16.0 + fract(vec2(c, 15u - c/16u) / 16.0)).a; // XXX why is this broken?! XXX\n}\n\nvoid mainImage( out vec4 fragColor, vec2 fragCoord )\n{\n    uint text[TEXT_LINES*TEXT_COLUMNS]; // ideally the text would be provided by some external source or even stored in a texture - filling the entire array is very slow!\n    \n    /* waaaay to slow!!!\n    for(uint i = 0u; i < TEXT_LINES*TEXT_COLUMNS; i++)\n    {\n        text[i] = 32u;\n    }\n    */\n    text[0u * TEXT_COLUMNS + 0u] = UPPER + 8u;\n    text[0u * TEXT_COLUMNS + 1u] = LOWER + 5u;\n    text[0u * TEXT_COLUMNS + 2u] = LOWER + 12u;\n    text[0u * TEXT_COLUMNS + 3u] = LOWER + 12u;\n    text[0u * TEXT_COLUMNS + 4u] = LOWER + 15u;\n    text[0u * TEXT_COLUMNS + 5u] = 0u;\n    text[0u * TEXT_COLUMNS + 6u] = UPPER + 23u;\n    text[0u * TEXT_COLUMNS + 7u] = LOWER + 15u;\n    text[0u * TEXT_COLUMNS + 8u] = LOWER + 18u;\n    text[0u * TEXT_COLUMNS + 9u] = LOWER + 12u;\n    text[0u * TEXT_COLUMNS + 10u] = LOWER + 4u;\n    text[0u * TEXT_COLUMNS + 11u] = 1u;\n    text[1u * TEXT_COLUMNS + 0u] = UPPER + 20u;\n    text[1u * TEXT_COLUMNS + 1u] = LOWER + 5u;\n    text[1u * TEXT_COLUMNS + 2u] = LOWER + 19u;\n    text[1u * TEXT_COLUMNS + 3u] = LOWER + 20u;\n    text[1u * TEXT_COLUMNS + 4u] = 1u;\n\n    fragCoord /= iResolution.xy;\n\n    fragColor = vec4(0);\n    fragColor = max(fragColor, vec4(write_text(text, vec2(0.0, 0.0), vec2(0.4, 0.5), fragCoord)));\n    fragColor = max(fragColor, vec4(write_text(text, vec2(0.2, 0.4), vec2(0.8, 0.9), fragCoord)));\n}\n","name":"Image","description":"","type":"image"}]}