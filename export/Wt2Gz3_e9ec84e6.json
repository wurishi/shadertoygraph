{"ver":"0.1","info":{"id":"Wt2Gz3","date":"1560521928","viewed":1017,"name":"visualize UV & Polar coordinates","username":"boomji","description":"shader that visualizes UV & Polar coordinates","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["tutorial","spiral","radial","twirl","polarcordinates"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#ifdef GL_ES\nprecision mediump float;\n#endif\n#define PI_2 6.2831 \n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    float rings = 10.0;\n    \n    // Get the fragcoords / UV cordinates of the image \n    vec2 uv = gl_FragCoord.xy;\n    \n    // Normalize UV map going from Zero to One i.e divide the frag coordinates by the maximum image width & height\n    uv = gl_FragCoord.xy/iResolution.xy;\n    \n    // Offset cordinates to center 0.5\n    uv -= vec2(0.5,0.5);\n    \n    // set Image aspect to square or you will get an oval gradient instaed of a circular gradient    \n    uv *= iResolution.xy  / iResolution.y;\n        \n    // now our coordinates go from 0 - 0.5 and 0 to - 0.5. We want to remap cordinates going from -1 to +1 so we multiply by 2 \n    uv*=2.0;\n    \n    //Get Distance and Angle of each pixel\n    float pixel_distance = length(uv) ;\n    float pixel_angle  = atan(uv.x,uv.y);\n    \n    //Angle to each pixel gives us values between 0 - 360 but we generally use Radiansfor rotation so we divide by 2PI radians = 6.2831\n    //but this will only give us results from 0 to 0.5 (180 degrees) so we add another half 0.5 to give us a full sweep\n    //pixel_angle = pixel_angle / 3.14159265 * 2.0 ; //PI_2 +  0.5  ;\n    pixel_angle = pixel_angle / PI_2 +  0.5 ;\n\n\n    // Visualise ST \n\t// vec3 viz_st = vec3(uv.x);\n     vec3 viz_st = vec3( pixel_distance );\n    // vec3 viz_st = vec3( pixel_angle );\n    \n    // Time based ST\n    // vec3 viz_st = vec3( sin(pixel_angle * iTime ) );\n\t// vec3 viz_st = vec3( pixel_distance * sin(iTime) );\n    // vec3 viz_st = vec3( sin (pixel_distance * rings + iTime + pixel_angle )   ); \n    \n\tfragColor = vec4(viz_st,1.0);   \n    \n    // Now lets a\n    \n    // FINAL COLOR\n    //fragColor = vec4(uv.x,uv.y,0.0,1.0);\n}\n\n\n\n","name":"Image","description":"","type":"image"}]}