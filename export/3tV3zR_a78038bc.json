{"ver":"0.1","info":{"id":"3tV3zR","date":"1578130056","viewed":737,"name":"Bluenoise Checker Reconstruction","username":"Carandiru","description":"update:\ntemporal\n\nupdate:\nsimplified, added some options to common tab\n\nthis solves the hole filling problem and reconstructs the \noriginal source texture with minimal to zero \"checkerboard\" pattern imprint\n\nusing blue noise and rotated grid sampling","likes":6,"published":3,"flags":32,"usePreview":0,"tags":["checkerboard","checker","bluenoise","temporal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// checkerboard gpu 2x2 quad hole filling - carandiru\n// http://bit.ly/supersinfulsilicon\n\n// Bluenoise Checker Reconstruction by Jason Tully is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.\n// Based on a work at https://www.shadertoy.com/view/3tV3zR.\n// Permissions beyond the scope of this license may be available at http://bit.ly/supersinfulsilicon.\n\n// checkout common tab for options\n//\n\n// 2x2 checkerboard matching gpu quad layout\n// for stencil mask\n// has an alternating checkerboard, so only one checkerboard is used/viewable per frame\n// so the holes are purposely black like a cleared render target.\n    \n// spatial blending of input at any given time\n// with filling of the \"holes\" extremely well using 1 channels of blue noise\n// and rotated grid sampling (see buffer C)\n\n// this solves the hole filling problem and reconstructs the \n// original source texture with minimal to zero \"checkerboard\" pattern imprint\n\n// common tab for changing the swap interval\n\n#define ZOOM_SCALE 0.33f\n  \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy);\n\n// not defined ...\n#ifndef SHOW_INPUT_TO_RECONSTRUCT\n     // after reconstruction\n\tfragColor = texture(iChannel0, (uv + ZOOM_SCALE * 2.0f) * ZOOM_SCALE );\n#else \n     // before reconstruction\n    fragColor = texture(iChannel3, (uv + ZOOM_SCALE * 2.0f) * ZOOM_SCALE );\n#endif\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Bluenoise Checker Reconstruction by Jason Tully is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.\n// Based on a work at https://www.shadertoy.com/view/3tV3zR.\n// Permissions beyond the scope of this license may be available at http://bit.ly/supersinfulsilicon.\n\n\n// scene - simulated alternating checkerboard \"stenciled\" rendering\n\n// real-world eg.) scene is rendered with stencil mask\n// stencil mask alternates every interval (frame)\n\n// ##adjustable: change the interval in common tab from time to frame!\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uvec2 uFragCoord = uvec2(floor(fragCoord.xy));\n    \n    bool checker_tile_quad = bool( (uFragCoord.x & QUAD) - (uFragCoord.y & QUAD) );\n    \n    float alternating = mix( float(ODD checker_tile_quad),\n                             float(EVEN checker_tile_quad), \n                             0 == (int(INTERVAL) & 1)\n                           );\n    \n    \n    vec4 sampling = texture(iChannel0, uv);\n    vec4 checkered_now;\n#ifdef TEMPORAL_BLENDING_ON\n    checkered_now = mix(sampling, texture(iChannel1, uv), alternating);\n#else\n    checkered_now = sampling * alternating;\n#endif\n    \n    fragColor = checkered_now;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"//#define ANIMATE\t\t// animate bluenoise (alternate channel of bluenoise used over time) - optional\n\n#define INTERVAL float(iTime)\t\t// scale it, replace with iTime....\n\n#define BLUENOISE_TEX_SZ (128.0f)\t// too show that a smaller bn texture can be used and repeated\n\n#define TEMPORAL_BLENDING_ON\n// for temporal blending to work properly the interval must be per frame\n#ifdef TEMPORAL_BLENDING_ON\n#undef INTERVAL\n#define INTERVAL float(iFrame)\n#endif\n\n//#define SHOW_INPUT_TO_RECONSTRUCT\n\n\n#define EVEN !\n#define ODD\n#define QUAD 2U\n\n\n\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":2,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// Bluenoise Checker Reconstruction by Jason Tully is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.\n// Based on a work at https://www.shadertoy.com/view/3tV3zR.\n// Permissions beyond the scope of this license may be available at http://bit.ly/supersinfulsilicon.\n\n\n// spatial \"reconstruction\" applied to checkered input\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy);\n  \n#ifdef ANIMATE\n    uint channel = uint(fract(iTime) * 1000.0f) & 1U; // 2 channels of blue noise only needed\n    float bluenoise = textureLod(iChannel2,fragCoord / BLUENOISE_TEX_SZ, 0.0f)[channel];\n#else\n    float bluenoise = textureLod(iChannel2,fragCoord / BLUENOISE_TEX_SZ, 0.0f).r;\n#endif\n    \n    // important to scale blue noise like this\n    bluenoise = bluenoise * 0.5f + 0.5f;\n    \n    vec4 color;\n    \n    // rotated grid uv offsets\n    vec2 uvOffsets = (vec2(0.125f, 0.375f) + bluenoise) / iResolution.xy;\n\n    {\n        // 2x2 rotated grid\n        color  = textureLod(iChannel0, uv + uvOffsets * vec2(-1,-1), 0.0f);\n        color += textureLod(iChannel0, uv + uvOffsets * vec2(-1, 1), 0.0f);\n        color += textureLod(iChannel0, uv + uvOffsets * vec2( 1,-1), 0.0f);\n        color += textureLod(iChannel0, uv + uvOffsets * vec2( 1, 1), 0.0f);\n\n#ifdef TEMPORAL_BLENDING_ON\n        color *= 0.25f; // needed\n#else\n        color *= 0.5f; // needed\n#endif\n    }\n       \n\tfragColor = color;  // comment out a color to see output activity toggling \n}","name":"Buffer C","description":"","type":"buffer"}]}