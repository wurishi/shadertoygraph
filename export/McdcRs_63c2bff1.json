{"ver":"0.1","info":{"id":"McdcRs","date":"1731153006","viewed":200,"name":"🍎🙂","username":"Nguyen2007","description":"🙂","likes":15,"published":3,"flags":0,"usePreview":0,"tags":[],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define cbrt(x) sign(x) * pow(abs(x), 1. / 3.)\n\nfloat sdEllipse(vec2 p, vec2 ab)\n{\n    p = abs(p); if(p.x > p.y) { p = p.yx; ab = ab.yx; }\n    \n    float l = ab.y * ab.y - ab.x * ab.x,\n          m = ab.x * p.x / l,      m2 = m * m,\n          n = ab.y * p.y / l,      n2 = n * n,\n          c = (m2 + n2 - 1.) / 3., c3 = c * c * c,\n          q = c3 + m2 * n2 * 2.,\n          d = c3 + m2 * n2,\n          g = m + m * n2, co;\n          \n    if(d < 0.)\n    {\n        float h = acos(q / c3) / 3.,\n              s = cos(h) + 2.,\n              t = sin(h) * sqrt(3.);\n        \n        vec2 r = sqrt(m2 - c * vec2(s + t, s - t));\n        \n        co = .5 * (r.y + sign(l) * r.x + abs(g) / r.x / r.y - m);\n    }\n    else\n    {\n        float h = 2. * m * n * sqrt(d),\n              s = cbrt(q + h),\n              u = cbrt(q - h),\n              rx = 2. * m2 - s - u - c * 4.,\n              ry = (s - u) * sqrt(3.),\n              rm = sqrt(rx * rx + ry * ry);\n        \n        co = .5 * (ry / sqrt(rm - rx) - m) + g / rm;\n    }\n    \n    vec2 r = ab * vec2(co, sqrt(1. - co * co));\n    \n    return length(r - p) * sign(p.y - r.y);\n}\n\nfloat sdMoon(vec2 p, float d, float ra, float rb)\n{\n    p.x = abs(p.x);\n    \n    float a = .5 * (ra * ra - rb * rb + d * d) / d,\n          b = sqrt(max(ra * ra - a * a, 0.));\n          \n    return p.y * b - p.x * a > d * max(b - p.x, 0.) ? length(p - vec2(b, a))\n                                                    : max(length(p) - ra, rb - length(p - vec2(0, d)));\n}\n\nfloat face(vec2 p)\n{\n    p.x = abs(p.x);\n    \n    return min(sdEllipse(p - vec2(.15, .095), vec2(.05, .075)),\n               sdMoon(p - vec2(0, .03), .116, .28, .37) - .005);\n}\n\n#define AA(d) smoothstep(-1., 1., (d) / length(vec2(dFdx(d), dFdy(d))))\n\nvec3 screen(vec3 a, vec3 b)\n{\n    return a + b - a * b;\n}\n\nvec3 smile(vec2 p)\n{\n    vec2 q = p -= .5, r = p;\n         q.y += .02;\n         r.y -= .01;\n         \n    vec3 a = vec3(1.03318,  1.0115, .269633),\n         b = vec3(1.42421, .666447, 1.23014),\n         c = vec3(13.7743, 1.01125, 2.90418),\n         col = clamp(a - .1 / pow(b - length(p), c), 0., 1.);\n    \n    col = mix(col, vec3(1), max(vec3(2.4, 3, 2) * p.y - vec3(.07, -.1, .09), 0.) * AA(.455 - length(p)));\n    \n    col = screen(col, vec3(pow(col.x, 2.6) * 1.5 * smoothstep(.8, .5, length(p - vec2(0, .45))),\n                           pow(col.x, 1.4) * .9 * smoothstep(.9, 0., length(p - vec2(0, .45))),\n                           (.8 * col.x - .6) * 1.8 * smoothstep(.3, 0., length(p - vec2(0, .45)))));\n    \n    col = mix(col, vec3(1,0.933,0.404), smoothstep(.01, -.02, face(q)));\n    \n    col = mix(col, vec3(0.827,0.639,0.051), smoothstep(.01, -.02, face(r)));\n    \n    col = mix(mix(vec3(0.643,0.396,0.027), vec3(0.369,0.161,0.008), smoothstep(-.037, .027, face(q))),\n              col, AA(face(p)));\n    \n    if (p.y < 0.) col = mix(vec3(0.408,0.196,0.012), col, AA(face(p)));\n    \n    return col * AA(.5 - length(p));\n}\n\nvoid mainImage(out vec4 O, vec2 I)\n{\n    vec2 uv = pow(5., 1. - min(.2 * iTime, .9)) * (I - .5 * iResolution.xy) / iResolution.y + .5;\n    O = vec4(smile(uv), 1);\n    //O = 5. * abs(O - texture(iChannel0, (uv - .5) * .9 + .5)).zzzz;\n    //O = texture(iChannel0, (uv - .5) * .9 + .5);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\nint _N = 3;\n#define mainImage mainImage0(out vec4 O, vec2 U);        \\\nvoid mainImage(out vec4 O, vec2 U) {                     \\\n    vec4 o; O = vec4(0);                                 \\\n    for (int k=0; k < _N*_N; k++ )                       \\\n      { mainImage0(o,U+vec2(k%_N-_N/2,k/_N-_N/2)/float(_N)); O += o; }  \\\n    O /= float(_N*_N);                                   \\\n} \\\nvoid mainImage0\n*/","name":"Common","description":"","type":"common"}]}