{"ver":"0.1","info":{"id":"WsXGRl","date":"1547121634","viewed":86,"name":"Simple Sierpinski","username":"naxius","description":"First attempt at fractals","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractals"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.14159265\n\nbool intriangle(vec2 a, vec2 b, vec2 p){\n    if(atan(p.y-a.y,p.x-a.x)>pi/3.){\n    return false;}\n    else if(atan(b.y-p.y,b.x-p.x)<-pi/3.){\n    return false;}\n    return true;\n}\n\nvec2 getcoords(vec2 z){\n    if(!intriangle(vec2(0.),vec2(1.,0.),z)){\n        return vec2(1.,1.);\n    }\n    else if(z.y>sqrt(3.)/4.){\n       return 2.*z-vec2(0.5,sqrt(3.)/2.);}\n    else if(intriangle(vec2(0.),vec2(.5,0.),z)){\n       return 2.*z;}\n\telse if(intriangle(vec2(.5,0.),vec2(1.,0.),z)){\n       return 2.*z-vec2(1.,0.);}\n    else{\n    \treturn vec2(1.,1.);}\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col =vec3(0.);\n    int counter = 5;\n    for(int i=0;i<counter;i++){\n        uv=getcoords(uv);\n\n    }   \n    // Output to screen\n\tfragColor = vec4( intriangle( vec2(0), vec2(1,0), uv) );\n}    ","name":"Image","description":"","type":"image"}]}