{"ver":"0.1","info":{"id":"ds3GDM","date":"1677882449","viewed":62,"name":"TP1_","username":"samirhff1","description":"TP1 bho","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["bho"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modeling - 2023.02.06\n// Eric Galin\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(vec2 m,vec2 p,out vec3 ro,out vec3 rd)\n{\n  float a=3.*3.14*m.x;\n  float le=3.5;\n  \n  // Origin\n  ro=vec3(30.,-10.,15.);\n  ro*=Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(0.,0.,1.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  rd=normalize(p.x*u+p.y*v+le*w);\n}\n\n// Primitives\n\n\n\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\nfloat Sphere(vec3 p,vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n// Cube \n// p : point\n// c : center \n// r : radius\nfloat Cube(vec3 p,vec3 c,float r)\n{\n   vec3 q = abs(p-c) - vec3(r);\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n\n// Boxe\n// p : center \n// b : size box\nfloat Box(vec3 p, vec3 b)\n{\n    vec3 d = abs(p) - b;\n    return length(max(d, 0.0)) + min(max(d.x, max(d.y, d.z)), 0.0);\n}\n\n//Capsule\n// p : point\n// a : debut capsule\n// b : fin capsule\n// r : radius\nfloat Capsule( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\n\n//Cilindre\n// p : point\n// a : debut capsule\n// b : fin capsule\n// r : radius\nfloat Cylinder( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3 ab= b - a;\n  vec3 ap = p- a;\n  \n  float t = dot(ab,ap)/ dot(ab,ab);\n  t=clamp(t,0.,1.);\n  \n  vec3 c= a+ t*ab;\n  \n  float x = length(p-c) - r ;\n  float y = (abs(t-.5) - 5.) *length(ab);\n  float e = length(max(vec2(x,y),0.));\n  float i = min(max(x,y), 0.);\n  \n  return e+i;\n}\n\n//Tore horizontale\n//p: centre\n//t: rayon\nfloat TorusH( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xy)-t.x,p.z);\n  return length(q)-t.y;\n}\n\n\n//Tore verticale\n//p: centre\n//t: rayon\nfloat TorusV( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\n\n// Terrain heightfield\n// x : Position in the plane\nfloat Surface( in vec2 p )\n{\n\treturn 1.*cos(p.y+iTime)-5.0;\n} \n\n// Implicit surface defining the terrain\n// p : Point\nfloat ImplicitTerrain(in vec3 p)\n{\n    float z = Surface( p.xy );\n    float h = (p.z - z)/2.0; // Lipschitz is defined as a constant 2.0\n    return h;\n}\n\n\n\n\n\n\n\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n  return min(a,b);\n}\n\n// Union\n// a : field function of left sub-tree\n// b : field function of right sub-tree\nfloat Intersection(float a,float b)\n{\n    return max(a,b);\n}\n\n\nfloat Difference(float d1, float d2) {\n  return max(d1, -d2);\n}\n\n//rotote\n//p point\n// axis axe\n//angle  \nvec3 Rotate(vec3 p, vec3 axis, float angle) {\n    float c = cos(angle);\n    float s = sin(angle);\n    float t = 1.0 - c;\n    vec3 q = vec3(\n        p.x * (axis.x * axis.x * t + c) + p.y * (axis.x * axis.y * t - axis.z * s) + p.z * (axis.x * axis.z * t + axis.y * s),\n        p.x * (axis.y * axis.x * t + axis.z * s) + p.y * (axis.y * axis.y * t + c) + p.z * (axis.y * axis.z * t - axis.x * s),\n        p.x * (axis.z * axis.x * t - axis.y * s) + p.y * (axis.z * axis.y * t + axis.x * s) + p.z * (axis.z * axis.z * t + c)\n    );\n    return q;\n}\n\n\n\n\n\n// Potential field of the object\n// p : point\nfloat object(vec3 p)\n{\n  float v = Difference(Cube(p, vec3 (0.,0.,6),6.),Cube(p, vec3 (0.,0.,7),5.));\n  v = Difference(v, Cube(p, vec3 (8.,0.,6),6.));\n  //yeux\n  v=Difference(v, Sphere(p, vec3 (-5.5,3.,8),1.));\n  v=Difference(v, Sphere(p, vec3 (-5.5,-3.,8),1.));\n  //noise\n  v= Union(v, Intersection(Capsule(p, vec3 (-6.,0.,6), vec3 (-6.,0.,8),1.),Cube(p, vec3 (-6.,0.,5.33),3. ))); ;\n  //jambe\n  v= Union (v,Cylinder(p, vec3 (-4.,3.,-5.), vec3 (-5.,3.,3.),1.));\n  v= Union (v,Cylinder(p, vec3 (-4.,-3.,-5.), vec3 (-5.,-3.,3.),1.));\n  //pied\n  v= Union (v, Cylinder(p, vec3 (-4.,-3.,-5.), vec3 (-5.,-5.,-5.),1.5));\n  v= Union (v, Cylinder(p, vec3 (-4.,3.,-5.), vec3 (-5.,5.,-5.),1.5));\n  //bouche\n  v= Difference (v , Capsule(p, vec3 (-6.,-3.,3), vec3 (-6.,3.,3),1.));\n  //bras\n  v= Union(v, Cylinder(p, vec3 (-3.,-7.,5.5), vec3 (-5.  + 3.0*cos(iTime),-9.,1.5 + 0.50*cos(iTime)),1.)); \n \n  v= Union(v, Cylinder(p, vec3 (-3.,7.,5.5), vec3 (-5.  + 3.0*cos(iTime),9.,1.5 + 0.50*cos(iTime)),1.));\n  v= Union(v, Sphere(p, vec3 (-3.,-6.,6.5),1.));\n  v= Union(v, Sphere(p, vec3 (-3.,6.,6.5),1.));\n  \n  //gros escalier\n  v= Union (v, Intersection(Cube(p, vec3 (8.,0.,-5.),6.),Cube(p, vec3 (3.,0.,-5.),6.)));\n  v= Union(v,Union(Cube(p, vec3 (9.5,0.,-6),5.),Cube(p, vec3 (14.,0.,-6),4.)));\n  v= Union(v,Union(Cube(p, vec3 (18,0.,-6),3.),Cube(p, vec3 (22.,0.,-6),2.)));\n  \n  //balustrade exterieur\n      //droit\n  v=Union(v, Capsule(p,vec3(8.5,5.5,3),vec3(2,5.5,3),0.1));\n  v=Union(v, Capsule(p,vec3(8.5,5.5,3),vec3(8.5,5.5,0), 0.07));\n      //gauche\n  v=Union(v, Capsule(p,vec3(8.5,-5.5,3),vec3(2,-5.5,3),0.1)); \n  v=Union(v, Capsule(p,vec3(8.5,-5.5,3),vec3(8.5,-5.5,0), 0.07));\n      //en face\n  v=Union(v, Difference(Capsule(p,vec3(8.5,-5.5,3),vec3(8.5,5.5,3),0.1), Box(p - vec3(8.5,0,3),vec3 (0.2,1.5,1))));\n  v=Union(v, Capsule(p,vec3(8.5,-1.5,3),vec3(8.5,-1.5,0), 0.07));\n  v=Union(v, Capsule(p,vec3(8.5,1.5,3),vec3(8.5,1.5,0), 0.07));\n  //etage+escalier+mur\n  v=Union(v,Box(p- vec3(-3.,0.,9),vec3 (2.,0.2,3.)));\n  v=Difference(v,Box(p- vec3(-4.,0.,8.),vec3 (1.,0.2,1.5)));\n  v= Union(v,Box(p- vec3(-3.,0.,6),vec3 (2.,6.,0.3)));\n  v= Union(v,Box(p- vec3(-0.7,4.,5),vec3 (0.5,1.5,0.3)));\n  v= Union(v,Box(p- vec3(0,4.,4),vec3 (0.5,1.5,0.3)));\n  v= Union(v,Box(p- vec3(0.7,4.,3),vec3 (0.5,1.5,0.3)));\n  \n  //balustrade\n      //en face\n  v=Union(v, Capsule(p,vec3(-1.15,-4.75,8),vec3(-1.15,2.3,8),0.15));\n  for(int i=0;i<=7;i++){\n      v=Union(v, Cylinder(p,vec3(-1.15,-4.75,8)+ vec3(0,i,0),vec3(-1.15,-4.75,6)+ vec3(0,i,0),0.1));\n  }  \n      //lateral\n  v=Union(v, Capsule(p,vec3(2,2.8,4),vec3(-1.15,2.8,8),0.15));\n  for(float i=0.;i<=5.0;i++){\n      v=Union(v, Cylinder(p,vec3(-1.15,2.8,8)+ (vec3(3.05,0,-4))/5.0* i,vec3(-1.15,2.8,6)+ (vec3(3.05,0,-4))/5.0* i,0.1));\n  } \n  \n  //barre pour lustre\n  v= Union(v,Capsule(p,vec3(-3.,-2.5,11.),vec3(-3.,2.5,11.),0.1));\n  \n  //lustre droite\n  v=Union(v, TorusH(p-vec3(-3.,2.5,10.5 + 0.5*cos(iTime)),vec2 (1,0.2)));\n  v=Union(v,Cylinder(p,vec3(-3.,2.5,10.5 + 0.5*cos(iTime)),vec3(-3.,2.5,11.5 + 0.5*cos(iTime)),0.1));\n      //raie\n  v=Union(v,Cylinder(p, vec3(-3.,3.5,10.5 + 0.5*cos(iTime)), vec3(-3.,2.5,10.5 + 0.5*cos(iTime)),0.1));\n  \n  \n  //lustre gauche\n  v=Union(v, TorusH(p-vec3(-3.,-2.5,10.5 + 0.5*cos(iTime)),vec2 (1,0.2)));\n  v=Union(v,Cylinder(p,vec3(-3.,-2.5,10.5+ 0.5*cos(iTime)\n),vec3(-3.,-2.5,11.5+ 0.5*cos(iTime)\n),0.1));\n      //raie\n  v=Union(v,Cylinder(p, vec3(-3.,-3.5,10.5 + 0.5*cos(iTime)\n), vec3(-3.,-2.5,10.5 + 0.5*cos(iTime)\n),0.1));\n  \n  v = Union(v, Sphere(p, vec3(-5.5,-3.+0.5*cos(iTime),8.+0.5*sin(iTime)), 0.3));\n  v = Union(v, Sphere(p, vec3(-5.5,3.+0.5*cos(iTime),8.+0.5*sin(iTime)), 0.3));\n  \n  v = Union(v, ImplicitTerrain(p - vec3(0,-1000,0)));\n  \n  //terre\n  v= Union(v,  Sphere(p,vec3(0.,0.,-1005.),1000.)\n  );\n  \n  return v;\n}\n\n\n\n\n\n// Analysis of the scalar field\n\nconst int Steps=200;// Number of steps\nconst float Epsilon=.01;// Marching epsilon\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  float v=object(p);\n  n.x=object(vec3(p.x+eps,p.y,p.z))-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z))-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps))-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o,vec3 u,float e,out bool h,out int s)\n{\n  h=false;\n  \n  // Start at the origin\n  float t=0.;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=o+t*u;\n    float v=object(p);\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Lighting\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),d.z*.5+.5);\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n  bool h;\n  int s;\n  float t=SphereTrace(p+Epsilon*n,l,100.,h,s);\n  if(!h)\n  {\n    return 1.;\n  }\n  return 0.;\n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p,vec3 n,vec3 e)\n{\n  // Point light\n  const vec3 lp=vec3(1000.,0.,1005.);\n  \n  // Light direction to point light\n  vec3 l=normalize(lp-p);\n  \n  // Ambient color\n  vec3 ambient=.25+.25*background(n);\n  \n  // Shadow computation\n  float shadow=Shadow(p,n,l);\n  \n  // Phong diffuse\n  vec3 diffuse=.35*clamp(dot(n,l),0.,1.)*vec3(1.,1.,1.);\n  \n  // Specular\n  vec3 r=reflect(e,n);\n  vec3 specular=.15*pow(clamp(dot(r,l),0.,1.),35.)*vec3(1.,1.,1.);\n  vec3 c=ambient+shadow*(diffuse+specular);\n  return c;\n}\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n  float t=float(n)/(float(Steps-1));\n  return.5+mix(vec3(.05,.05,.5),vec3(.65,.39,.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel,out bool pip)\n{\n  // Pixel coordinates\n  vec2 p=(-iResolution.xy+2.5*pixel)/iResolution.y;\n  if(pip==true)\n  {\n    const float fraction=1./4.;\n    // Recompute pixel coordinates in sub-picture\n    if((pixel.x<iResolution.x*fraction)&&(pixel.y<iResolution.y*fraction))\n    {\n      p=(-iResolution.xy*fraction+2.*pixel)/(iResolution.y*fraction);\n      pip=true;\n    }\n    else\n    {\n      pip=false;\n    }\n  }\n  return p;\n}\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)\n{\n  // Picture in picture on\n  bool pip=true;\n  \n  // Pixel\n  vec2 pixel=Pip(pxy,pip);\n  \n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n  \n  // Camera\n  vec3 ro,rd;\n  Ray(m,pixel,ro,rd);\n  \n  // Trace ray\n  \n  // Hit and number of steps\n  bool hit;\n  int s;\n  \n  float t=SphereTrace(ro,rd,100.,hit,s);\n  \n  // Shade background\n  vec3 rgb=background(rd);\n  \n  if(hit)\n  {\n    // Position\n    vec3 p=ro+t*rd;\n    \n    // Compute normal\n    vec3 n=ObjectNormal(p);\n    \n    // Shade object with light\n    rgb=Shade(p,n,rd);\n  }\n  \n  // Uncomment this line to shade image with false colors representing the number of steps\n  if(pip==true)\n  {\n    rgb=ShadeSteps(s);\n  }\n  \n  color=vec4(rgb,1.);\n}\n\n","name":"Image","description":"","type":"image"}]}