{"ver":"0.1","info":{"id":"XtXBDs","date":"1513854108","viewed":963,"name":"4-Color Gradient","username":"unycone","description":"Tried to reproduce AfterEffects' 4-color gradient effect.","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["interpolation","gradation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n    // parameters\n\n    vec2 p[4];\n    p[0] = vec2(0.1, 0.9);\n    p[1] = vec2(0.9, 0.9);\n    p[2] = vec2(0.5, 0.1);\n    p[3] = vec2(cos(iTime), sin(iTime)) * 0.4 + vec2(0.5, 0.5);\n    \n    vec3 c[4];\n    c[0] = vec3(1.0, 0.0, 0.0);\n    c[1] = vec3(0.0, 1.0, 0.0);\n    c[2] = vec3(0.0, 0.0, 1.0);\n    c[3] = vec3(1.0, 1.0, 0.0);\n\n    float blend = 2.0;\n    \n    // calc IDW (Inverse Distance Weight) interpolation\n    \n    float w[4];\n    vec3 sum = vec3(0.0);\n    float valence = 0.0;\n    for (int i = 0; i < 4; i++) {\n        float distance = length(uv - p[i]);\n        if (distance == 0.0) { distance = 1.0; }\n        float w =  1.0 / pow(distance, blend);\n        sum += w * c[i];\n        valence += w;\n    }\n    sum /= valence;\n    \n    // apply gamma 2.2 (Approx. of linear => sRGB conversion. To make perceptually linear gradient)\n\n    sum = pow(sum, vec3(1.0/2.2));\n    \n    // output\n    \n\tfragColor = vec4(sum.xyz, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}