{"ver":"0.1","info":{"id":"4fSGzw","date":"1703944895","viewed":32,"name":"TORPEDO CURVE","username":"tsakal","description":" polar plot on grid","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["grid","polarplot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float E = exp(1.),\n            pi = acos(-1.),\n            deg = pi/180.,\n            tau = 2.*pi,\n            phi = (1.+sqrt(5.))/2.;\nconst vec3 COBALT = vec3(  0.,  71., 171.)/255.,\n           PAPER  = vec3(212., 212., 222.)/255.,\n           PAPER1 = vec3(240., 240., 224.)/255.,\n           PAPER2 = vec3(224., 240., 240.)/255.,\n           xyCOLOR = vec3( 32.,  32.,  32.)/255.;\nfloat T, lTHICK = phi, RATIO, SCALE = 1.5;\n//========================\nvec3 shadePoint(vec3 col, vec3 col1, float fValue, float width) {\n    col = mix( col, col1, smoothstep( width, .0, abs(fValue)/fwidth(fValue) ) );\n    return col;\n}\n//========================\nvec3 plotAxis(vec3 col, vec3 col1, vec2 uv, float width) {\n    col = shadePoint(col, col1, uv.y, width); // x-axis\n    col = shadePoint(col, col1, uv.x, width); // y-axis\n    return col;\n}\n//========================\nfloat sms(float a, float b, vec2 v, float coef) {\n  v *= coef;\n  return (smoothstep(a, b, 2.*abs(mod(v.x, 1.)-.5))\n        + smoothstep(a, b, 2.*abs(mod(v.y, 1.)-.5)))/coef;\n}\n//========================\nvec3 plotGrid(vec2 P, vec3 PAPER1, vec3 PAPER2) {\n  float one =  1., ONE = one*length(fwidth(P))\n      , two =  2., TWO = two*ONE\n      , ten = 10., TEN = ten*ONE;\n  vec2 One = vec2(1./one),\n  \t   Two = vec2(1./two),\n       Ten = vec2(1./ten),\n       fillMod = floor(P / One); // /One or /Two or /Ten\n  float c1=2., c2=2., oddness = fract((fillMod.x + fillMod.y) / c1) * c2;\n  vec3 col = mix(PAPER1, PAPER2, smoothstep(0., 1., oddness));\n  col *= 1.-sms(1.-ONE,1.,P,one);\n  col *= 1.-sms(1.-TWO,1.,P,two);\n  col *= 1.-sms(1.-TEN,1.,P,ten);\n  return col;\n}\n//========================\nfloat polarPlot(vec2 p, float s) {\n  float r = length(p),\n        t = atan(p.y, p.x),\n        pp, a, m, n;\n  a=.575*SCALE*(s+.575*(1.+sin(T)));\n  m=1.;\n  n=2.;\n  pp=a*cos(m*t)*cos(n*t)-r; // TORPEDO CURVE // https://mathcurve.com/courbes2d.gb/torpille/torpille.shtml\n  return pp;\n}\n//========================\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = (-iResolution.xy + 2.0*fragCoord.xy) / iResolution.y;\n  RATIO = iResolution.x / iResolution.y;\n  uv *= SCALE;\n  uv.x += SCALE * RATIO * .75;\n  T = iTime;\n  vec3 COL = vec3(1.);\n  COL = plotGrid(uv, PAPER1, PAPER2);\n  COL = plotAxis(COL, xyCOLOR, abs(uv), lTHICK);\n  float rounds, i;\n  for (rounds = 5., i=0.;i<rounds;i++) {\n    COL = shadePoint(COL, COBALT, polarPlot(uv, i), lTHICK);\n  }\n  fragColor = vec4(COL, 1.);\n}","name":"Image","description":"","type":"image"}]}