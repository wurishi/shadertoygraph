{"ver":"0.1","info":{"id":"ttKBDR","date":"1614204066","viewed":621,"name":"TikTok time warp scan filter","username":"TambakoJaguar","description":"Just a small simulation of the TikTok Time Warp Scan Filter. I think I'm not the only one who did it but wanted to try ;)","likes":4,"published":1,"flags":34,"usePreview":0,"tags":["time","line","filter","warp","scan","funny","vertical","tiktok"],"hasliked":0,"parentid":"XsfyDH","parentname":"Strip photography"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0,uv);\n    \n    float scanpos = getScanPos(iFrame);\n    if (scanpos<1.)\n    {\n        float scanline = smoothstep(scanWidth*0.5, 0., uv.y - scanpos)*smoothstep(-scanWidth*0.5, 0., uv.y - scanpos);\n        fragColor = mix(fragColor, vec4(scanColor, 0.), scanline);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float scanpos = getScanPos(iFrame);\n    \n    if (uv.y<scanpos && scanpos<=1.)\n       fragColor = vec4(texture(iChannel0,vec2(uv.x, uv.y)));\n    else\n       fragColor = vec4(texture(iChannel1,vec2(uv.x, uv.y)));\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"float scanTime = 10.;\nfloat pauseTime = 3.5;\nvec3 scanColor = vec3(0.4, 1., 0.85);\nfloat scanWidth = 0.037;\n\nfloat getScanPos(int iFrame)\n{\n    return mod(1. - float(iFrame)/(50.*scanTime), (scanTime + pauseTime)/scanTime);\n}","name":"Common","description":"","type":"common"}]}