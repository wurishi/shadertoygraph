{"ver":"0.1","info":{"id":"tllfzB","date":"1597625866","viewed":567,"name":"The Corner","username":"Kali","description":"Fake 3D projection of a \"square cousin\" 2D kaliset fractal with orbit trap coloring.","likes":34,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal","3dprojection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define r iResolution.xy\nvec3 f(vec2 p) {\n    p.y+=cos(iTime*.25)*.3; // move camera up and down;\n    p.x=abs(p.x+.3); // offset and mirror x axis\n    p*=mat2(.7,.7,-.7,.7); // rotate ~45deg\n    float y=1.-abs(p.y*3.),l=1.-length(p), m=1e2; // used for: y=horizon, l=light, m=orbit trap\n\tp=fract(vec2(p.x/p.y,1./p.y+iTime*1.*sign(p.y))*.5); // 3D projection, tiling and and forward movement\n    for (int i=0; i<18; i++) p=abs(p*1.5)/(p.x*p.y)-2.,m=min(m,abs(p.y)+abs(.5-fract(p.x*.5+iTime))); // fractal & orbit trap\n    m=exp(-10.*m); // something like inverting and compressing the orbit trap result\n    return mix(min(vec3(1.),vec3(m,m*m,m*m*m)*3.+p.x*p.x*.1),vec3(1,.5,.3),y)+l*l*l*.8; // coloring\n}\nvoid mainImage(out vec4 c, vec2 p)\n{\n    c=vec4(0);\n    vec2 u = (p-r*.5)/r.y,d;\n    // antialiasing\n    for (float i=-4.; i<4.; i++) for (float j=-4.; j<4.; j++) d=vec2(i,j)*.2/r,c.rgb+=f(u+d)/64.;\n}","name":"Image","description":"","type":"image"}]}