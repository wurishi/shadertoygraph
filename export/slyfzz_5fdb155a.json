{"ver":"0.1","info":{"id":"slyfzz","date":"1663921534","viewed":68,"name":"Mandelbrot - Gavin","username":"whereisgavin","description":"A simple fractal generator defaulted to F(z) = z^2 + c\nThanks to FabriceNeyret2 for the tips!","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 cMult(vec2 z1, vec2 z2)\n{\n    return mat2( z1, -z1.y, z1.x ) * z2;\n}\n\nvec2 F(vec2 z, vec2 c)\n{\n    return cMult(z, z) + c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    //vec2 uv = fragCoord/iResolution.xy;\n    //uv = (uv - 0.5) * 2.0;\n    //float aspectRatio = iResolution.y / iResolution.x;\n    //uv.x = uv.x / aspectRatio;\n    \n    //Thanks FabriceNeyret2 for quicker UV!\n    vec2 uv = ( 2.* fragCoord - iResolution.xy ) / iResolution.y;\n    \n    //Zooming\n    float speed = 20.0;\n    float zoom = iTime / 10.0f;\n    zoom =  0.5 + zoom * zoom * speed;\n    \n    //Center Point\n    vec2 point = vec2(-0.77568377, 0.13646737);\n    \n    //Transform\n    vec3 transform = vec3(point, zoom);\n    uv /= transform.z;\n    uv += transform.xy;\n    \n    //Calculate F(z) = z^2 + c\n    float maxIterations = 200.0;\n    float numIterations = 0.0;\n    float threshold = 400.0;\n    \n    vec2 z = vec2(0.0, 0.0);\n    vec2 c = vec2(uv.x, uv.y);\n    \n    float magnitude = 0.0;\n    while (magnitude < threshold)\n    {\n        z = F(z, c);\n        numIterations = numIterations + 1.0;\n        if (numIterations > maxIterations) break;\n        magnitude = length(z);\n    }\n    \n    float value = 1.0 - (numIterations / maxIterations);\n    \n    //Color\n    //vec3 col = vec3(value); // grayscale\n    vec3 col = vec3(0.9 * value, 1.2 * value * value, value); // soft purple\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}