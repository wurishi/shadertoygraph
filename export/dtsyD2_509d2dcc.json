{"ver":"0.1","info":{"id":"dtsyD2","date":"1691233200","viewed":105,"name":"Simple Water Ripple Effect ES","username":"edelweiss","description":"i used https://www.shadertoy.com/view/wdtyDH# but modified the code to use it with opengl es\nclick to create wave","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["water","ripple"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    fragColor = texture(iChannel0, uv) * vec4(2) - vec4(1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float delta = 1.4;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame == 0 || iFrame == 1) {fragColor = vec4(0.5); return;}\n\n    float pressure = texture(iChannel0, fragCoord.xy / iResolution.xy).x;\n    float pVel = texture(iChannel0, fragCoord.xy / iResolution.xy).y;\n\n    float pright = texture(iChannel0, (fragCoord.xy + vec2(1., 0.)) / iResolution.xy).x;\n    float pleft = texture(iChannel0, (fragCoord.xy + vec2(-1., 0.)) / iResolution.xy).x;\n    float pup = texture(iChannel0, (fragCoord.xy + vec2(0., 1.)) / iResolution.xy).x;\n    float pdown = texture(iChannel0, (fragCoord.xy + vec2(0., -1.)) / iResolution.xy).x;\n    \n    pressure = pressure * 2.0 - 1.0;\n    pVel = pVel * 2.0 - 1.0;\n    pright = pright * 2.0 - 1.0;\n    pleft = pleft * 2.0 - 1.0;\n    pup = pup * 2.0 - 1.0;\n    pdown = pdown * 2.0 - 1.0;\n\n    // Apply horizontal wave function\n    pVel += delta * (-2.0 * pressure + pright + pleft) / 4.0;\n    // Apply vertical wave function (these could just as easily have been one line)\n    pVel += delta * (-2.0 * pressure + pup + pdown) / 4.0;\n\n    // Change pressure by pressure velocity\n    pressure += delta * pVel;\n\n    // \"Spring\" motion. This makes the waves look more like water waves and less like sound waves.\n    pVel -= 0.005 * delta * pressure;\n\n    // Velocity damping so things eventually calm down\n    pVel *= 1.0 - 0.002 * delta;\n\n    // Pressure damping to prevent it from building up forever.\n    pressure *= 0.999;\n\n    //x = pressure. y = pressure velocity. Z and W = X and Y gradient\n    float x = pressure;\n    float y = pVel;\n    float z = (pright - pleft) / 2.0;\n    float w = (pup - pdown) / 2.0;\n\n    x = x * 0.5 + 0.5;\n    y = y * 0.5 + 0.5;\n    z = z * 0.5 + 0.5;\n    w = w * 0.5 + 0.5;\n\n    fragColor.xyzw = vec4(x, y, z, w);\n\n    if (iMouse.z > 1.0) {\n        float dist = distance(fragCoord.xy, iMouse.xy);\n        if (dist <= 20.0) {\n            float addedX = (fragColor.x * 2.0 - 1.0) + (1.0 - dist / 20.0);\n            addedX = addedX * 0.5 + 0.5;\n            fragColor.x = addedX;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}