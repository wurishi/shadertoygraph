{"ver":"0.1","info":{"id":"XlXfzX","date":"1512594428","viewed":129,"name":"Boing short sphere tracing.","username":"gyabo","description":"Simple shader ;-)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["spheretracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float map(vec3 p) {\n\tfloat t = length(mod(p, 2.0) - 1.0) - 0.1;\n\tt = min(t, length(mod(p.xz, 2.0) - 1.0) - 0.03);\n\tt = min(t, length(mod(p.yz, 2.0) - 1.0) - 0.03);\n\treturn min(t, length(mod(p.xy, 2.0) - 1.0) - 0.03);\n}\n\n\nvec2 rot(vec2 p, float a) {\n\treturn vec2(\n\t\tp.x * cos(a) - p.y * sin(a),\n\t\tp.x * sin(a) + p.y * cos(a));\n\t\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\tvec2 uv = ( gl_FragCoord.xy / iResolution.xy ) * 2.0 - 1.0;\n\n\tvec3 dir = normalize(vec3(uv, 1.0));\n\tdir.xz= rot(dir.xz, iTime * 0.1);\n    dir.yx= rot(dir.yx, iTime * 0.1);\n\n\tvec3 pos = vec3(0, 0, iTime);\n\tfloat t = 0.0;\n\tfor(int i = 0;  i < 100; i++) {\n\t\tfloat k = map(dir * t + pos);\n\t\tif(k < 0.1) break;\n\t\tt += 1.0;\n\t}\n\tvec3 ip = dir * t + pos;\n\n\tfragColor = vec4(t * 0.01) + map(ip + 0.1) + dir.xyzz * 0.7;\n}","name":"Image","description":"","type":"image"}]}