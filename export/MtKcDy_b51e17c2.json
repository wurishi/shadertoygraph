{"ver":"0.1","info":{"id":"MtKcDy","date":"1537626332","viewed":131,"name":"Satisfying cube pattern","username":"Caesar","description":"I was playing around with shadertoy(great name btw) and this was the effect. Even though it is quite simple it looks very satisfying. ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["cube","colorful","animation","pattern","satisfying"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool inRange(float val, vec2 range){\n\tif(val >= range.x && val <= range.y)\n        return true;\n    return false;\n}\n\nbool inQuad(vec2 pos, vec2 size){\n\tif(inRange(pos.x, vec2(0.0, size.x)) && inRange(pos.y, vec2(0.0, size.y)))\n        return true;\n    return false;\n}\n\nbool inQuad(vec2 pos, vec2 off, vec2 size){\n\tif(inRange(pos.x, vec2(off.x, off.x+size.x)) && inRange(pos.y, vec2(off.y, off.y+size.y)))\n        return true;\n    return false;\n}\n\nfloat oscillate(vec2 range, float speed, float offset){\n\tfloat d = range.y-range.x;\n    \n    d *= (sin(offset+iTime*speed)/2.0 + 0.5);\n    \n    return range.x + d;\n}\n\nvec3 drawQuad(vec2 pos, vec2 quadSize, vec2 offset, vec3 color){\n\tif(inQuad(pos, offset, quadSize))\n        return color;\n    return vec3(0, 0, 0);\n}\n\n\n    vec2 quadSize = vec2(0.25, 0.25);\n    float speed = 0.2;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspectRatio = iResolution.y/iResolution.x;\n    uv.y *= aspectRatio;\n    float scale = 0.3;\n    uv /= scale;\n\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    vec2 offset = vec2(0, 0);        \n    vec3 color = vec3(0, 0, 0);\n    float stage = 0.0;\n    \n    for(int i = 0; i < 60; i++){\n        offset.x = -1.0 + float(i)*0.1 + oscillate(vec2(0.0, 1.0-quadSize.x), speed, stage);\n        stage += 3.14/1.0;\n        \n        for(int j = 0; j < 30; j++){\n            offset.y = -1.0 + float(j)*0.1 + oscillate(vec2(0.0, 1.0-quadSize.x), speed, 0.0);\n            \n        \tif(inQuad(uv, offset, quadSize)){\n        \t\tif(length(color) > 0.0)\n                    color = vec3(0, 0, 0);\n             \telse\n               \t\tcolor = col;\n        \t}\n        }\n    }\n    \n    fragColor = vec4(color, 1);\n}","name":"Image","description":"","type":"image"}]}