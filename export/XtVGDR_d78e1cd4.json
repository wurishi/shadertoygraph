{"ver":"0.1","info":{"id":"XtVGDR","date":"1474179358","viewed":523,"name":"Black Flower","username":"Zeliss","description":"I felt like making something interesting with just black and white.","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["2d","circles","flower","animation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159265358979; //Probably enough precision?\nconst float TAU = 2.0 * PI;\n\n//Returns how much coord is within a circle centered at circle_pos. [0, 1]\nfloat circle(vec2 circle_pos, vec2 coord)\n{\n    float circ_rad = 70.0;\n    float circ_blur = 1.0;\n    float dist = distance(circle_pos, coord);\n    return smoothstep(circ_rad + circ_blur, circ_rad - circ_blur, dist); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 black = vec4(0.0, 0.0, 0.0, 1.0);\n    vec4 white = vec4(1.0, 1.0, 1.0, 1.0);\n    \n    vec2 center = iResolution.xy * vec2(0.5);\n    float t = iTime;\n    float d = 70.0*sin(t/PI); //Distance of each circle from the center. (Can be pos/neg)\n    \n    const float MAX_CIRCLES = 9.0; //Max number of circles.\n    float num_circles = MAX_CIRCLES/2.0 + MAX_CIRCLES/2.0*cos(t/PI) + 0.01; //Current number of circles.\n    float circles = 0.0; //The total number of circles this pixel is in.\n    \n    for (float f = 0.0; f < MAX_CIRCLES; f++) {\n        if (f < num_circles) { //Wish I could have non-const number of loop iterations :(\n        \tfloat ap = t + f/num_circles * TAU; //Angular position of each circle, [0, tau]\n        \tvec2 newCirclePos = center + d*vec2(cos(ap), sin(ap));\n        \tcircles += circle(newCirclePos, fragCoord); //If this pixel is in the new circle, circles increases.\n        }\n    }\n    \n    circles = (cos(circles*PI)+1.0)/2.0; //Smoothly interpolate between odd and even values.\n    fragColor = mix(black, white, circles);\n}","name":"Image","description":"","type":"image"}]}