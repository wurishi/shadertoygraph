{"ver":"0.1","info":{"id":"MdG3WR","date":"1454583467","viewed":837,"name":"Jelly making machine","username":"TambakoJaguar","description":"The comment of knighty on \"Colored glass lamp\" (ldKGRD), gave me the idea of this scene, I took the lamp one as base.\nNot really optimized, but it's usable.\nComments welcome.","likes":32,"published":1,"flags":32,"usePreview":0,"tags":["voronoi","glass","transparent","reflections","jelly","refractions","smoothminimum","multipass","texturebuffer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGzn","filepath":"/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","previewfilepath":"/media/ap/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","type":"cubemap","channel":2,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\"Jelly making machine\" by Emmanuel Keller aka Tambako - February 2016\nLicense Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\nContact: tamby@tambako.ch\n*/\n\n// Much code adapted from https://www.shadertoy.com/view/Xds3zN, thanks iq to let us use it! :)\n\n#define pi 3.141593\n\n// Switches, you can play with them!\n#define specular\n//#define shadow\n#define reflections\n//#define ambocc\n#define ss_scatering\n//#define show_jelly_texture\n//#define show_not_finished\n//#define jelly_not_transparent;\n\nstruct Lamp\n{\n  vec3 position;\n  vec3 color;\n  float intensity;\n  float attenuation;\n};\n\nstruct RenderData\n{\n  vec3 col;\n  vec3 pos;\n  vec3 norm;\n  int objnr;\n};\n    \nLamp lamps[3];\n\n// Every object of the scene has its ID\n#define SKY_OBJ         0\n#define JELLY_OBJ       1\n#define SLIME_OBJ       2\n#define CONTAINER_OBJ   3\n#define RODS_OBJ        4\n\nfloat slp = -1.;\n\n// Campera options\nvec3 campos;\nvec3 camtarget = vec3(0., 0.1, 0.);\nvec3 camdir;\nfloat fov = 5.;\n\n// Ambient light\nconst vec3 ambientColor = vec3(0.3);\nconst float ambientint = 0.05;\n\n// Shading options\nconst float specint = 0.45;\nconst float specshin = 12.;\nconst float aoint = 0.5;\nconst float aoMaxdist = 15.;\nconst float aoFalloff = 1.1;\nconst float shi = 0.85;\nconst float shf = 0.4;\nconst float ssstrmr = 0.7;\nconst float sssInt = 0.25;\nconst vec3 sssColor = vec3(1.);\n    \n// Tracing options\nconst float normdelta = 0.001;\nconst float maxdist = 40.;\nconst int nbref = 2;\nconst int nbrefr = 5;\nconst float glass_ior = 1.5;\n\n// Antialias. Change from 1 to 2 or more AT YOUR OWN RISK! It may CRASH your browser while compiling!\nconst float aawidth = 0.6;\nconst int aasamples = 1;\n\n// 1D hash function\nfloat hash( float n ){\n\treturn fract(sin(n)*3538.5453);\n}\n\n// 2D hash function\nvec2 hash2( vec2 n ){\n\treturn fract(vec2(sin(n.x)*3538.5453, sin(n.y)*2753.8256));\n}\n\n// Union operation from iq\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\n// Difference operation from iq\nfloat opS( float d1, float d2 )\n{\n    return max(-d2,d1);\n}\n\n\n// From https://iquilezles.org/articles/smin\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec2 rotateVec(vec2 vect, float angle)\n{\n    vec2 rv;\n    rv.x = vect.x*cos(angle) - vect.y*sin(angle);\n    rv.y = vect.x*sin(angle) + vect.y*cos(angle);\n    return rv;\n}\n\n// Gets the bump of the jelly parts\nfloat getJellyBump(vec2 uv)\n{\n    return sqrt(smoothstep(0.07, 0.97, texture(iChannel0, uv).a));\n}\n\n// Gets the color of the jelly parts\nvec3 getJellyColor(vec2 uv)\n{\n    return mix(texture(iChannel0, uv).rgb, vec3(0.8), smoothstep(texture(iChannel0, uv).a, 0.07, 1.0));\n}\n\n// Converts the position in the world to the 2D mapping coordinates of the texture of the jelly parts (Buf C)\nvec2 getJellyMPos(vec3 pos)\n{\n    return pos.xy*vec2(0.1, 0.2) + vec2(0.5);\n}\n\n// From https://www.shadertoy.com/view/Xds3zN\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\n// From https://www.shadertoy.com/view/Xds3zN\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\n// From https://www.shadertoy.com/view/Xds3zN\nfloat sdCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n// Distance mapping of jelly\nfloat map_jelly(vec3 pos)\n{\n    vec2 hmp = getJellyMPos(pos);\n    float hm = 0.8*getJellyBump(hmp)*smoothstep(0.95, 0.7, abs(pos.x/6.))*smoothstep(1., 0.8, abs(pos.y/2.5));\n    float posz2 = pow(abs(pos.z), 1.9) + 0.04;\n    //float res = max(sdBox(pos, vec3(7., 2.5, 2.)), 1.1*posz2*smoothstep(0., 0.2, hm) - hm + 0.16) + smoothstep(0., 2.5, abs(pos.z));\n    float res = 1.1*posz2*smoothstep(0., 0.2, hm) - hm + 0.1 + smoothstep(0.0, 2.25, abs(pos.z));\n    return res;\n}\n\nfloat map_container(vec3 pos)\n{\n    pos.y+= 2.8;\n    float outside = udRoundBox(pos, vec3(5.5, 1.5, 2.), 0.6);\n    float inside = udRoundBox(pos, vec3(5.35, 1.35, 1.85), 0.6);\n    float bottom = max(max(outside, -inside), pos.y - 1.);\n    \n    pos.y-= 4.3;\n    outside = udRoundBox(pos, vec3(5., 0.8, 1.), 0.45);\n    inside = udRoundBox(pos, vec3(4.9, 0.35, 0.9), 0.45);\n    float top = max(max(outside, -inside), - pos.y + 0.25);\n    \n    pos.y-= 5.4;\n    float top2 = udRoundBox(pos, vec3(2.8, 4., 0.7), 0.3);\n    return min(bottom, smin(top, top2, 0.45));\n}\n\nfloat map_rods(vec3 pos)\n{\n    pos.y+= 0.1;\n    for (int i = 0; i < 7; ++i)\n    {\n    \tpos.x=abs(pos.x);\n    \tpos.x-=0.61;\n    }\n    return sdCylinder(pos, vec2(0.13, 2.75));   \n}\n\nvec2 map_slime(vec3 pos)\n{\n    pos.y+= 2.8;\n    float slime = udRoundBox(pos, vec3(5.35, 1.35, 1.85), 0.6);\n    return vec2(max(slime, pos.y -0.45), SLIME_OBJ);\n}\n\nvec2 map(vec3 pos)\n{\n    float jelly = map_jelly(pos);\n    float container = map_container(pos);\n    float rods = map_rods(pos);\n    vec2 res = opU(vec2(jelly, JELLY_OBJ), vec2(container, CONTAINER_OBJ));\n    res = opU(res, vec2(rods, RODS_OBJ));\n    res = opU(res, map_slime(pos));\n    return res;\n}\n\nvec2 map_ns(vec3 pos)\n{\n    float jelly = map_jelly(pos);\n    float container = map_container(pos);\n    float rods = map_rods(pos);\n    vec2 res = opU(vec2(jelly, JELLY_OBJ), vec2(container, CONTAINER_OBJ));\n    res = opU(res, vec2(rods, RODS_OBJ));\n    return res;\n}\n\nfloat map_smooth(vec3 pos)\n{\n    return smin(map_slime(pos).x, 0.95*map_ns(pos).x, clamp(0., 1., 1. + clamp(0.1*pos.y, -0.3, 1.) - 0.7*smoothstep(2., 6.5, 0.17*pow(abs(pos.x), 2.) + 6.*smoothstep(0.3, 2.3, abs(pos.z)))));\n    //return min(map_slime(pos).x, 0.9*map_ns(pos).x);\n}\n\n// Main tracing function\nvec2 trace(vec3 cam, vec3 ray, float maxdist, bool inside, bool bounding) \n{\n    float t = 1.;\n    float objnr = 0.;\n    vec3 pos;\n    float dist;\n    float dist2;\n    \n  \tfor (int i = 0; i < 75; ++i)\n    {\n    \tpos = ray*t + cam;\n        vec2 res = map_ns(pos);\n        dist = inside?-map(pos).x:map_smooth(pos);\n        if (dist>maxdist || abs(dist)<0.00004)\n            break;\n        t+= dist*1.05;\n        objnr = abs(res.y);\n  \t}\n    if (slp==-1.)\n       slp = smoothstep(0.01, 0.2, pow(map_ns(pos).x - 0.35*map(pos).x, 0.5)*clamp(-1. - pos.y, 0., 1.));\n    \n  \treturn vec2(t, objnr);\n}\n\nvec3 getNormal(vec3 pos, float e, bool inside)\n{  \n    vec3 n = vec3(0.0);\n    for( int i=0; i<4; i++ )\n    {\n        vec3 e2 = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e2*map_smooth(pos + e*e2);\n    }\n    return (inside?-1.:1.)*normalize(n);\n}\n\n// Gets the color of the jelly for given position\nvec3 jelly_color(vec3 pos)\n{\n    vec2 hmp = getJellyMPos(pos);\n    return getJellyColor(hmp);\n}\n\n// Gets the color of the container for given position\nvec3 container_color(vec3 pos)\n{\n    return vec3(0.65);\n}\n\n// Gets the color of the slime for given position\nvec3 slime_color(vec3 pos)\n{\n    return vec3(0.95, 0.9, 0.75);\n}\n\n// Gets the color of the slime for given position\nvec3 rods_color(vec3 pos)\n{\n    return vec3(0.55);\n}\n\n// Gets the color of the sky\nvec3 sky_color(vec3 ray)\n{\n\tvec3 rc = 1.5*texture(iChannel1, ray).rgb;\n    return rc;\n}\n\n// Gets the color of the sky\nvec3 sky_color_s(vec3 ray)\n{\n\tvec3 rc = 0.2 + vec3(4.5, 4.9, 4.5)*texture(iChannel2, ray).rgb;\n    return rc;\n}\n\n// Combines the colors\nvec3 getColor(vec3 norm, vec3 pos, int objnr)\n{\n   #ifdef jelly_not_transparent\n   vec3 jellycol = jelly_color(pos);\n   #else\n   vec3 jellycol = vec3(0);\n   #endif\n   vec3 col = objnr==JELLY_OBJ?jellycol:(\n              objnr==CONTAINER_OBJ?container_color(pos):(\n              objnr==RODS_OBJ?rods_color(pos):sky_color(pos)));\n\n   return mix(col, slime_color(pos), slp);\n   //return vec3(slp);\n   //smoothstep(0.0, 0.5, slp)\n}\n\n// Gets the flares of the lamps (kind of non-reflective specular...)\nvec3 getFlares(vec3 ray)\n{\n\tvec3 rc = vec3(0.);\n    #ifdef bulb\n    rc+= 1.6*clamp(normalize(lamps[1].color)*lamps[1].intensity*specint*pow(max(0.0, dot(ray, normalize(lamps[1].position - campos))), 150.), 0., 1.);\n    #endif\n    return rc;\n}\n\n// From https://www.shadertoy.com/view/Xds3zN, but I changed the code\nfloat softshadow(vec3 ro, vec3 rd, float mint, float tmax)\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for(int i=0; i<50; i++)\n    {\n    \tfloat h = map(ro + rd*t).x;\n        res = min(res, 10.0*h/t + 0.02*float(i));\n        t += 0.8*clamp(h, 0.01, 0.35);\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nfloat calcAO( in vec3 p, in vec3 n, float maxDist, float falloff )\n{\n\tfloat ao = 0.0;\n\tconst int nbIte = 5;\n\tfor( int i=0; i<nbIte; i++ )\n\t{\n\t\tfloat l = hash(float(i))*maxDist;\n\t\tvec3 rd = n*l;\n\t\tao += (l - map(p + rd.x).x) / pow(1.+l, falloff);\n\t}\n\treturn clamp( 1.35*(1.-ao/float(nbIte)), 0., 1.);\n}\n\n// Fresnel reflectance factor through Schlick's approximation: https://en.wikipedia.org/wiki/Schlick's_approximation\nfloat fresnel(vec3 ray, vec3 norm, float n2)\n{\n   float n1 = 1.; // air\n   float angle = acos(-dot(ray, norm));\n   float r0 = dot((n1-n2)/(n1+n2), (n1-n2)/(n1+n2));\n   float r = r0 + (1. - r0)*pow(1. - cos(angle), 5.);\n   return r;\n}\n\n// Shading of the objects pro lamp\nvec3 lampShading(Lamp lamp, vec3 norm, vec3 pos, vec3 ocol, int objnr, int lampnr)\n{\n\tvec3 pl = normalize(lamp.position - pos);\n    float dlp = distance(lamp.position, pos);\n    vec3 pli = pl/pow(1. + lamp.attenuation*dlp, 2.);\n      \n    // Diffuse shading\n    vec3 col = ocol*lamp.color*lamp.intensity*clamp(dot(norm, pli), 0., 1.);\n    \n    // Specular shading\n    #ifdef specular\n    if (dot(norm, lamp.position - pos) > 0.0)\n        col+= lamp.color*lamp.intensity*specint*pow(max(0.0, dot(reflect(pl, norm), normalize(pos - campos))), specshin);\n    #endif\n    \n    // Softshadow\n    #ifdef shadow\n    col*= shi*softshadow(pos, normalize(vec3(lamp.position.x, 4.9, lamp.position.z) - pos), shf, 100.) + 1. - shi;\n    #endif\n    \n \t// Sub surface scattering from https://www.shadertoy.com/view/MdXSzX\n    #ifdef ss_scatering\n\n\t\tfloat transmission = map(pos + pl*ssstrmr).x/ssstrmr;\n\t\tvec3 sssLight = sssColor*lamp.color*smoothstep(0.0,1.0,transmission);\n        float sssInt2 = sssInt*slp;\n    \tcol = col*(1. - sssInt2) + sssInt2*sssLight;\n\n    #endif\n    \n    return col;\n}\n\n// Shading of the objects over all lamps\nvec3 lampsShading(vec3 norm, vec3 pos, vec3 ocol, int objnr)\n{\n    vec3 col = vec3(0.);\n    for (int l=0; l<3; l++) // lamps.length()\n        col+= lampShading(lamps[l], norm, pos, ocol, objnr, l);\n    \n    return col;\n}\n\n// Sets the position of the camera with the mouse and calculates its direction\nvoid setCamera()\n{\n   vec2 iMouse2;\n   if (iMouse.x==0. && iMouse.y==0.)\n      iMouse2 = iResolution.xy*vec2(0.52, 0.65);\n   else\n      iMouse2 = iMouse.xy;\n   \n   campos = vec3(-20.*cos(0.4 + 2.2*iMouse2.x/iResolution.x),\n                 20.*cos(2.*iMouse2.y/iResolution.y),\n                 20.*sin(0.4 + 2.2*iMouse2.x/iResolution.x)*sin(2.*iMouse2.y/iResolution.y));\n   camdir = camtarget-campos;   \n}\n\n// From https://www.shadertoy.com/view/lsSXzD, modified\nvec3 GetCameraRayDir(vec2 vWindow, vec3 vCameraDir, float fov)\n{\n\tvec3 vForward = normalize(vCameraDir);\n\tvec3 vRight = normalize(cross(vec3(0.0, 1.0, 0.0), vForward));\n\tvec3 vUp = normalize(cross(vForward, vRight));\n    \n\tvec3 vDir = normalize(vWindow.x * vRight + vWindow.y * vUp + vForward * fov);\n\n\treturn vDir;\n}\n\n// Tracing and rendering a ray\nRenderData trace0(vec3 tpos, vec3 ray, float maxdist, bool inside, bool bounding)\n{\n    vec2 tr = trace(tpos, ray, maxdist, inside, bounding);\n    float tx = tr.x;\n    int objnr = int(tr.y);\n    vec3 col;\n    vec3 pos = tpos + tx*ray;\n    vec3 norm;\n    \n    lamps[0] = Lamp(vec3(-2., 5., 20.), vec3(1., 1., 1.), 1.8, 0.01);\n    lamps[1] = Lamp(vec3(-5., 3, -12.), vec3(1., .95, .75), 0.9, 0.01);\n    lamps[2] = Lamp(vec3(16., 5., -8.), vec3(1., .4, .4), 0.4, 0.01);\n    \n    if (tx<maxdist)\n    {\n        norm = getNormal(pos, normdelta, inside);\n        col = getColor(norm, pos, objnr);\n      \n        // Shading\n        col = ambientColor*ambientint + lampsShading(norm, pos, col, objnr);\n        \n        // Ambient occlusion\n        #ifdef ambocc\n        col*= 1. - aoint + aoint*vec3(calcAO(pos, norm, aoMaxdist, aoFalloff));\n        //col = vec3(calcAO(pos, norm, 7., 1.1));\n        #endif\n    }\n    else\n    {\n        objnr = SKY_OBJ;\n        col = sky_color(ray);\n    }\n    return RenderData(col, pos, norm, objnr);\n}\n\n// Gets the light darkening of the glass in function of the color and thickness\nvec3 getGlassDens(vec3 pos, vec3 ray)\n{\n    vec3 posr = pos;\n    vec3 glasscol = jelly_color(posr);\n    vec2 hmp = getJellyMPos(posr);\n    float cgh = 1.5*getJellyBump(hmp);\n    return pow(glasscol, 0.12 + 2.*vec3(pow(cgh, 2.)));\n}\n\n// Main render function with reflections\nvec4 render(vec2 fragCoord)\n{   \n  vec2 uv = fragCoord.xy / iResolution.xy; \n  uv = uv*2.0 - 1.0;\n  uv.x*= iResolution.x / iResolution.y;\n\n  vec3 ray = GetCameraRayDir(uv, camdir, fov);\n  \n  RenderData traceinf = trace0(campos, ray, maxdist, false, true);\n  vec3 col = traceinf.col; // + getFlares(ray);\n  #ifdef reflections\n  for (int i=0; i<nbref; i++)\n  {\n      vec3 refray = reflect(ray, traceinf.norm);\n  \t  if (traceinf.objnr==RODS_OBJ)\n      {     \n          RenderData traceinf_ref = trace0(traceinf.pos, refray, 20., false, true);\n          float r = mix(0.75, 0., smoothstep(0.7, 0.9, slp));\n          col = mix(col, col*traceinf_ref.col, r);  \n\n          ray = refray;\n          traceinf = traceinf_ref;\n      }\n      if (traceinf.objnr==CONTAINER_OBJ)\n      {\n          float r = mix(0.7, 0., slp);\n          col = mix(mix(col, getColor(traceinf.norm, traceinf.pos, traceinf.objnr), r), col*sky_color_s(refray), r);\n      }\n      /*if (traceinf.objnr!=CONTAINER_OBJ && traceinf.objnr!=SKY_OBJ)\n      {\n          float r = 0.1*slp*clamp(1.1*fresnel(ray, traceinf.norm, 1.8), 0., 1.);\n          col = mix(mix(col, getColor(traceinf.norm, traceinf.pos, traceinf.objnr), r), col*sky_color_s(refray), r);\n      }*/\n  }\n  #endif\n  #ifdef jelly_not_transparent\n  return vec4(col, 1.0);\n  #endif\n  bool inside = true;\n  float cior = glass_ior;\n  vec3 cdens;\n  vec3 glassf = vec3(1.);\n  if (traceinf.objnr==JELLY_OBJ && slp<0.99)\n  {\n  \t\tvec3 norm = traceinf.norm;\n        vec3 ray_r = refract(ray, traceinf.norm, 1./glass_ior);\n        vec3 ray_r2;\n        \n        int n2;\n        for (int n=0; n<nbrefr; n++)\n        {\n            vec3 posr = traceinf.pos;\n            cdens = getGlassDens(traceinf.pos, ray);\n        \ttraceinf = trace0(traceinf.pos, ray_r, 20., inside, false);\n                \n            if (inside)\n                glassf*= cdens;\n            else\n                traceinf.col+= getFlares(ray_r);\n\n            col+= traceinf.col*glassf*(1. - slp);\n            col = clamp(col, 0., 1.);\n            \n            if (traceinf.objnr==JELLY_OBJ)\n            {\n      \t\t    ray_r2 = refract(ray_r, traceinf.norm, cior);\n        \t    if (length(ray_r2)!=0.)\n                {\n                    inside = !inside;\n                    cior = 1./cior;\n                    \n                    if (!inside)\n                    {\n                        col+= sky_color(ray_r2)*glassf;\n                        break;\n                    }\n                }\n                else\n                    ray_r2 = reflect(ray_r, traceinf.norm);\n            }\n            else\n            {\n                if (traceinf.objnr==SLIME_OBJ)\n                   col = glassf*traceinf.col*(1. - slp);\n                break;\n            }\n            ray_r = ray_r2;\n            n2 = n;\n        }\n        if (n2==nbrefr-1)\n            #ifdef show_not_finished\n            col = vec3(1., 0., 1.);\n      \t\t#else\n            col+= sky_color(ray_r2)*glassf;\n      \t\t#endif\n  }\n\n  return vec4(col, 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    setCamera();\n    \n    // Antialiasing.\n    vec4 vs = vec4(0.);\n    for (int j=0;j<aasamples ;j++)\n    {\n       float oy = float(j)*aawidth/max(float(aasamples-1), 1.);\n       for (int i=0;i<aasamples ;i++)\n       {\n          float ox = float(i)*aawidth/max(float(aasamples-1), 1.);\n          vs+= render(fragCoord + vec2(ox, oy));\n       }\n    }\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    #ifdef show_jelly_texture\n    fragColor = vec4(3.5*getJellyBump(uv)*getJellyColor(uv), 0);\n    #else\n    fragColor = vs/vec4(aasamples*aasamples);\n    //fragColor = vec4(slp);\n    #endif\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec2 lss = vec2(5.8, 3.1);\n\nfloat hash( float n )\n{\n    return fract(sin(n)*753.5453123);\n}\n\nvec2 hash2( vec2 p )\n{\n    // procedural white noise\t\n\treturn fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\n// From https://www.shadertoy.com/view/4sfGzS\nfloat noise(vec3 x)\n{\n    //x.x = mod(x.x, 0.4);\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\t\n    float n = p.x + p.y*157.0 + 113.0*p.z;\n    return mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                   mix( hash(n+157.0), hash(n+158.0),f.x),f.y),\n               mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                   mix( hash(n+270.0), hash(n+271.0),f.x),f.y),f.z);\n}\n\nconst mat3 m = mat3( 0.00,  0.80,  0.60,\n                    -0.80,  0.36, -0.48,\n                    -0.60, -0.48,  0.64 );\n\n// From https://www.shadertoy.com/view/4sfGzS\nfloat noise2(vec3 pos)\n{\n    vec3 q = 8.0*pos;\n    float f  = 0.5000*noise( q ); q = m*q*2.01;\n    f += 0.2500*noise( q ); q = m*q*2.02;\n    f += 0.1250*noise( q ); q = m*q*2.03;\n    f += 0.0625*noise( q ); q = m*q*2.01;\n    return f;\n}\n\nvec4 voronoi(vec2 x)\n{\n    vec2 n = floor(x);\n    vec2 f = fract(x);\n\n    //----------------------------------\n    // first pass: regular voronoi\n    //----------------------------------\n\tvec2 mg, mr;\n    float id = 0.0;\n    vec2 g, o, r;\n\n    float md = 8.0;\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        g = vec2(float(i),float(j));\n\t\to = hash2(n + g);\n        vec2 r = g + o - f;\n        \n        float d = dot(r,r);\n\n        if( d<md )\n        {\n            id = dot(n + g, vec2(13., 23.));\n            md = d;\n            mr = r;\n            mg = g;\n        }\n    }\n    \n    if ((mg + x*2.).x<0.6) return vec4(0);\n    if ((mg + x + 5.).x>11.) return vec4(0);\n\n    //----------------------------------\n    // second pass: distance to borders\n    //----------------------------------\n    md = 8.0;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        g = mg + vec2(float(i),float(j));\n\t\to = hash2( n + g );\n        vec2 r = g + o - f;\n\n        if( dot(mr-r,mr-r)>0.00001 )\n        md = min( md, dot( 0.5*(mr+r), normalize(r-mr) ) );\n    }\n\n    return vec4(md, mr, id);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv.x-= 0.015;\n    uv.y-= 0.05*iTime;\n    \n    float noiseh = noise2(vec3(0.22*uv*lss + vec2(0., 0.3), 0.15*iTime)*0.9);\n    uv+= 0.08*noiseh;\n    vec4 vorv = voronoi(uv*lss);\n    float bumpheight = 1.9*vorv.x + 0.02;\n    \n    vec3 vorc;\n    if (mod(vorv.w, 8.)==0.) vorc = vec3(0.8, 0.1, 0.1);\n    if (mod(vorv.w, 8.)==1.) vorc = vec3(0.02, 0.7, 0.1);\n    if (mod(vorv.w, 8.)==2.) vorc = vec3(0.1, 0.2, 0.8);\n    if (mod(vorv.w, 8.)==3.) vorc = vec3(0.75, 0.75, 0.05);\n    if (mod(vorv.w, 8.)==4.) vorc = vec3(0.7, 0.32, 0.72);\n    if (mod(vorv.w, 8.)==5.) vorc = vec3(0.2, 0.8, 0.8);\n    if (mod(vorv.w, 8.)==6.) vorc = vec3(0.9, 0.9, 0.9);\n    if (mod(vorv.w, 8.)==7.) vorc = vec3(0.8, 0.72, 0.6);\n    \n    fragColor = vec4(vorc, bumpheight);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"const int blur_size = 8;\nconst float blur_width = 1.;\n\nfloat gauss(float x, float e)\n{\n    return exp(-pow(x, 2.)/e); \n}\n\n// Horizontal blurring\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 pos = fragCoord.xy / iResolution.xy;\n   vec4 pixval = vec4(0.);\n   float tot = 0.;\n    \n   const int nb = 2*blur_size+1;\n   \n   for (int x=0; x<nb; x++)\n   { \n       float x2 = blur_width*float(x-blur_size);\n       vec2 ipos = pos + vec2(x2/iResolution.x, 0.);\n       float g = gauss(x2, float(20*blur_size)*0.5);\n       pixval+= g*texture(iChannel0, ipos);\n       tot+= g;\n   }\n   fragColor = pixval/tot;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"const int blur_size = 8;\nconst float blur_width = 1.;\n\nfloat gauss(float x, float e)\n{\n    return exp(-pow(x, 2.)/e); \n}\n\n// Vertical blurring\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 pos = fragCoord.xy / iResolution.xy;\n   vec4 pixval = vec4(0.);\n   float tot = 0.;\n    \n   const int nb = 2*blur_size+1;\n   \n   for (int x=0; x<nb; x++)\n   { \n       float x2 = blur_width*float(x-blur_size);\n       vec2 ipos = pos + vec2(0., x2/iResolution.x);\n       float g = gauss(x2, float(20*blur_size)*0.5);\n       pixval+= g*texture(iChannel0, ipos);\n       tot+= g;\n   }\n   fragColor = pixval/tot;\n}","name":"Buffer C","description":"","type":"buffer"}]}