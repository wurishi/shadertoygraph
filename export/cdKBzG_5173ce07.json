{"ver":"0.1","info":{"id":"cdKBzG","date":"1698335361","viewed":66,"name":"Fork PDE02563 - 2","username":"lindealle","description":"implementation","likes":0,"published":3,"flags":32,"usePreview":0,"tags":["pde"],"hasliked":0,"parentid":"cstSz7","parentname":"PDE02563"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 grad(vec2 uv) {\n    // Compute the gradient of the. channel used for shading\n    \n    vec4 buffer_up = texture(iChannel0, vec2(uv.x, uv.y + 1.0 / iResolution.y));\n    vec4 buffer_down = texture(iChannel0, vec2(uv.x, uv.y - 1.0 / iResolution.y));\n    vec4 buffer_left = texture(iChannel0, vec2(uv.x + 1.0 / iResolution.x, uv.y));\n    vec4 buffer_right = texture(iChannel0, vec2(uv.x - 1.0 / iResolution.x, uv.y));\n    \n    // divide by 4, managable range\n    return vec2(buffer_left.y-buffer_right.y, buffer_up.y-buffer_down.y) / 2.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 g = grad(uv);\n    vec3 t1 = vec3(1,0,20.0*g.x);\n    vec3 t2 = vec3(0,1,20.0*g.y);\n    vec3 N = normalize(cross(t1,t2));\n    vec3 L = normalize(vec3(1,3,5));\n    float illum = (0.4+0.4*smoothstep(0.97,0.98, dot(N,L)) + 0.2 * max(0.0, dot(N,L)));\n\n    float substance = 2.0*texture(iChannel0, uv).g;\n    // Output to screen\n    fragColor = illum*vec4(0.8, 0.8, 0.1, 0.0) + (1.0-substance)*vec4(0.6, 0.4, 0.1, 0.0);\n\n   //fragColor = vec4(1.0)-vec4(1.0,0.8,0.6,0.0)*texture(iChannel0, uv).g;\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec4 lap(vec2 uv) {\n    // Compute the Laplacian of all four elements of iChannel0\n\n    vec4 buffer = texture(iChannel0, uv);\n    vec4 buffer_up = texture(iChannel0, vec2(uv.x, uv.y + 1.0 / iResolution.y));\n    vec4 buffer_down = texture(iChannel0, vec2(uv.x, uv.y - 1.0 / iResolution.y));\n    vec4 buffer_left = texture(iChannel0, vec2(uv.x + 1.0 / iResolution.x, uv.y));\n    vec4 buffer_right = texture(iChannel0, vec2(uv.x - 1.0 / iResolution.x, uv.y));\n    \n    // divide by 4, managable range\n    return (buffer_up + buffer_down + buffer_left + buffer_right - 4.0 * buffer) / 4.0;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 BufferA = texture(iChannel0, uv);\n\n    // Suggested time step\n    float dt = 0.5;\n\n    /* Wave simulation constants */\n    float d = 0.999;\n    float c = 1.4;\n\n    /* Mitosis */\n    float Da = 1.0;\n    float Db = 0.5;\n    float k = 0.06507;\n    float f = 0.04938;\n    /**/\n       \n    float A = texture(iChannel0, uv).r;\n    float B = texture(iChannel0, uv).g;\n    \n    // INSERT CODE TO UPDATE A and B INSTEAD OF THE LINES BELOW ---> \n    \n    float Ap = A; // velocity\n    float Bp = B; // height\n    \n    // vec4 delta = d * c * c * lap(uv);\n    // Ap += delta.y * dt;\n    // Bp += Ap * dt;\n    \n    vec4 delta = lap(uv);\n    Ap += dt * (Da * delta.x - A*B*B + f*(1.0-A));\n    Bp += dt * (Db * delta.y + A*B*B - (k+f)*B);\n    \n    // <----------\n    \n    vec2 V = fragCoord - iMouse.zw;\n    if (iTime < 0.2)\n        fragColor = vec4(0, 0, 0, 0);\n    else\n        fragColor = exp(-0.1*dot(V,V)) * vec4(0,1.0,0,0) + vec4(Ap, Bp, 0.0, 0.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}