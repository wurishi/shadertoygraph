{"ver":"0.1","info":{"id":"DdVBRD","date":"1697991879","viewed":184,"name":"Playing with Sine","username":"berelium","description":"A sine wave as a function of time. Moving the mouse on the x-axis will adjust the frequency of the wave within a range. Also, multiple waves can be rendered/played by disabling the mouse. Use fullscreen for best effect. Play with the vars in Common!\n","likes":0,"published":1,"flags":8,"usePreview":0,"tags":["waves","mouse","wave","interactive","pi","sine","ssaa","frequency","phase","multimode"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// By commenting #define MOUSE in Common, the program will use an array of predetermined frequencies to play N amount\n// of frequencies, set by the user in Common. If the mouuse is disabled, the sound part of the shader will also play the frequencies given.\n\n// Sine as a function of time\nfloat wave(in vec2 uv, in float amp, in float freq, in float phase) {\n    return (amp / 4.0) * sin(((PI2 * freq) * (uv.x - iTime)) + phase);\n}\n\n// Function to super sample a wave a given amount of times\nvec3 sampleWave(in vec2 uv, in float samples, in float amp, in float freq, in float phase) {\n    vec3 col = vec3(0);\n    float w, o = 0.0;\n    \n    for(float i = 0.0; i < samples; i++) {\n        vec2 p = uv + (vec2(i / samples) - 0.5) / iResolution.xy;\n        w = wave(p, amp, freq, phase);\n        o = pow(1.0 - sqrt(abs(p.y - w)), 10.0);\n        col += vec3(o);\n    }\n\n    col /= samples;\n    \n    return col;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Setup UV\n    vec2 aspect = vec2(1.0, iResolution.y / iResolution.x);\n    vec2 fragment = fragCoord.xy / iResolution.xy - vec2(0.5);\n    vec2 uv = zoomFactor * aspect * fragment;\n    \n    \n    // Create wave\n    float amplitude = 270. / iResolution.y; // 270px\n    float frequency = 0.0;\n    float phase     = 0.0;\n    \n    \n    // If we are using the mouse\n    #ifdef MOUSE\n        frequency = (iMouse.x / iResolution.x) * freqLimit;\n        if(iMouse.x == 0.0 && iMouse.y == 0.0) {\n            frequency = defFreq;\n        }\n    #endif\n\n\n    // Render wave\n    vec3 col = vec3(0);\n    \n    // If SSAA, attempt to sample the wave multiple times and average the color.\n    #ifdef SSAA\n        // If not using the mouse, use predetermined frequencies instead.\n        #ifndef MOUSE\n            for(int i = 0; i < n_F; i++) {\n                col += sampleWave(uv, NUM_SAMPLES, amplitude, freqs[i], phase);\n            }\n        #else\n            col = sampleWave(uv, NUM_SAMPLES, amplitude, frequency, phase);\n        #endif\n    // Otherwise, sample the wave once.\n    #else\n        #ifndef MOUSE\n            for(int i = 0; i < n_F; i++) {\n                col += sampleWave(uv, 1.0, amplitude, freqs[i], phase);\n            }\n        #else\n            col = sampleWave(uv, 1.0, amplitude, frequency, phase);\n        #endif\n    #endif\n   \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI  3.14159265358979323846264338327950288\n#define PI2 6.28318530717958647692528676655900576\n\n// Comment MOUSE to use the predefined frequencies below (also plays them as a sound shader, may need to rewind)\n#define MOUSE\n// Comment SSAA to toggle supersampling anti-aliasing\n#define SSAA\n// Tune NUM_SAMPLES to adjust the number of samples for each wave\n#define NUM_SAMPLES 25.0\n\nfloat zoomFactor = 1.0;           // Zoom factor, higher val == zoom out\nconst int n_F = 2;                // Number of freqs and frequencies to use ifndef MOUSE\nfloat freqs[n_F] = float[n_F](80.0, 81.0); \nfloat defFreq = 2.0;              // Initial frequency ifdef MOUSE\nfloat freqLimit = 100.0;          // Max frequency ifdef MOUSE\n","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[],"code":"vec2 mainSound( int samp, float time )\n{\n    vec2 wave = vec2(0);\n    \n    #ifndef MOUSE\n    for(int i = 0; i < n_F; i++) {\n        wave += vec2(sin(PI2 * freqs[i] * time));\n    }\n    #else\n        vec2 uv = vec2(time, 0.5);\n        vec3 sineColor = texture(iChannel0, uv).xyz;\n        wave = vec2(sineColor.x, sineColor.y);\n    #endif\n    \n    return wave;\n}","name":"Sound","description":"","type":"sound"}]}