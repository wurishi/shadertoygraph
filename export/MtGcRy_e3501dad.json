{"ver":"0.1","info":{"id":"MtGcRy","date":"1536770859","viewed":512,"name":"Rolling Ball of Lava","username":"jonnyjedjedi","description":"More travels in the wonderful world of learning Shaderland stuff. Thank you Mr Gonzalez and Mr Quilez, et al for the fantastic online resources.","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["ballrollingvoronoinoisefbmrandomlavamagma"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst float NoiseResolution = 4.0; //  0.4\nconst float Lacunarity = 2.0; // 2.0 // intuitive measure of gappiness / heterogenity or variability\nconst float Gain = 0.6; // 0.6\nconst float Ball_rad = 0.45; // 0.45\nconst float Ball_roll_spd = 0.5; // 0.5\nconst float Dark_lava_spd = 0.05; // 0.05\nconst float Dark_island_spd = 0.5; // 0.5\n\n\n// Let's get random numbers\nvec2 random2D(vec2 p) {\n\treturn fract(sin(vec2(dot(p, vec2(127.1, 311.7)),\n                          dot(p, vec2(269.5, 183.3))))*43758.5453);\n}\n\nfloat random1D(vec2 p) {\n    return fract(sin(dot(p.xy,vec2(12.9898,78.233))) * 43758.5453123);\n}\n\n\n// Add a bit of noise\nfloat noise2D(vec2 _pos) {\t\n    vec2 i = floor(_pos); \t\t// integer\n\tvec2 f = fract(_pos); \t\t// fraction\n\n// define the corners of a tile\n\tfloat a = random1D(i);\n\tfloat b = random1D(i + vec2(1.0, 0.0));\n\tfloat c = random1D(i + vec2(0.0, 1.0));\n\tfloat d = random1D(i + vec2(1.0, 1.0));\n\n\t// smooth Interpolation\n\tvec2 u = smoothstep(0.0, 1.0, f);\n    \n\t// lerp between the four corners\n\treturn mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\n// fractal brownian motion\nfloat fbm(vec2 _pos) {\n\t_pos.y += iTime * Ball_roll_spd;\n\t_pos.x += sin(iTime * Ball_roll_spd);\n\tfloat ts = iTime * Dark_lava_spd;\n\tfloat val = 0.0;\n\tfloat amp = 0.4;\n    \n\t// Loop of octaves\n\tfor (int i = 0; i < 4; ++i) // set octave number to 4\n\t{\n\t\tval += amp * noise2D(_pos+ts);\n\t\t_pos *= Lacunarity;\n\t\tamp *= Gain;\n\t}\n\treturn val;\n}\n\nfloat voronoiIQ(vec2 _pos) {\n\t_pos.y += iTime * Ball_roll_spd;\n\t_pos.x += sin(iTime * Ball_roll_spd);\n\tvec2 p = floor(_pos);\n\tvec2  f = fract(_pos);\n\tfloat res = 0.0; \n\tfor (int j = -1; j <= 1; j++)\n\t\tfor (int i = -1; i <= 1; i++)\n\t\t{\n\t\t\tvec2 b = vec2(i, j);\n\t\t\tvec2 pnt = random2D(p + b);\n\t\t\tpnt = 0.5 + 0.5*sin((iTime * Dark_island_spd) + 6.2831*pnt);\n\t\t\tvec2 r = vec2(b) - f + pnt;\n\t\t\tfloat d = dot(r, r);\n\t\t\tres += exp(-32.0*d); // quickly decaying exponential \n\t\t}\n   return -(1.0 / 32.0)*log(res);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat r = 0.0;\n\tfloat g = 0.0;\n\tfloat b = 0.0;\n    vec3 color = vec3(0.0, 0.0, 0.0);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n\tvec2 uv = fragCoord.xy / iResolution.y;\n\tvec2 pos1 = uv.xy - vec2(0.825, 0.5) ; // center what being drawn\n    vec3 pos = vec3(pos1, sqrt(Ball_rad*Ball_rad - pos1.x*pos1.x - pos1.y*pos1.y)/ NoiseResolution);\n    \n \tfloat dist = distance(pos.xy, vec2(0.0, 0.0));\n\tpos /= vec3(1.0*pos.z, 1.0*pos.z, 0.0);\n\n    \n\tif (dist > (Ball_rad - Ball_rad * 0.125)) {\n        color = vec3(0.0, 0.0, 0.0);\n\t    color.r += 1.0-smoothstep(Ball_rad - Ball_rad * 0.35, Ball_rad + 0.125, dist);\n} \n    else {\n       \tcolor.rg = vec2(voronoiIQ(pos.xy));\n\t\tcolor.r += 0.25+fbm(pos.xy);\n}\n    \n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}