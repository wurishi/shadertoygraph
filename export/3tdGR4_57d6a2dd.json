{"ver":"0.1","info":{"id":"3tdGR4","date":"1576930644","viewed":110,"name":"Codevember19 - Colors","username":"z0rg","description":"My participation to codevember ","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["colors","abstract","codevember"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nconst float PI = 3.14159265;\nmat2 r2d(float a){float sa = sin(a);float ca=cos(a);return mat2(ca,sa,-sa,ca);}\n\nfloat sat(float a)\n{\n  return clamp(a,0.,1.);\n}\nfloat lenny(vec2 uv)\n{\n  return abs(uv.x)+abs(uv.y);\n}\nfloat sdf_cir(vec2 uv,float r)\n{\n  return length(uv)-r;\n}\n\nfloat _union(float a, float b)\n{\n  return max(a,b);\n}\n\nvec4 rdr(vec2 uv, float tim)\n{\n  float sharp = 5.;\n  float sz = 0.1;\n  float a = 1.-sat(sdf_cir(uv-vec2(sin(tim),sin(tim*2.)*0.5)*0.3,sz)*sharp);\n  vec3 cola = 0.8*vec3(0.,1.,1.)*min(1.,a*100.);\n\n  float b = 1.-sat(sdf_cir((uv-vec2(sin(-tim+1.),sin(tim*2.+3.)*0.5)*0.3),sz)*sharp);\n  vec3 colb = 1.2*vec3(1.,0.75,.4)*min(1.,b*100.);\n\nfloat c = 1.-sat(sdf_cir((r2d(PI/2.)*uv-vec2(sin(tim+0.8),sin(tim*2.)*0.5)*0.3),sz)*sharp);\n  vec3 colc = vec3(1.,0.,.3)*min(1.,c*100.);\n\n\n  return vec4(cola+colb+colc,a+b+c);\n}\n\nvec3 rdrblur(vec2 uv)\n{\n  const int blurSamples = 8;\n  float iTimeSp = 0.1;\n  vec3 col = vec3(.42,.4,.4)*.6;\ncol *= 1.-sat(lenny(uv*.5));\n\n  vec3 acc;\n  float opa = 0.;\n  for (int i= 0; i<blurSamples;++i)\n  {\n    vec4 rdrCol = rdr(uv, iTime-float(i)*iTimeSp);\n    acc += rdrCol.xyz;\n    opa = max(opa, rdrCol.w)*float(blurSamples-i)/8.;\n  }\n\n  return mix(col,acc, sat(opa)*0.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = fragCoord.xy / iResolution.xx;\n  uv -= vec2(.5)*(iResolution.xy/iResolution.xx);\n  vec3 col ;\nuv *= 2.5;\n\n  //cyan vec3(0.,1.,1.)\n  // mangenta vec3(1.,0.,.3)\n  // yellow vec3(1.,0.65,.3)\n  col = mix(col, vec3(1.,0.65,.3), sat((1.-length(uv)*8.)*30.));\n  col = rdrblur(uv);\n  col += rdrblur(mod(2.*abs(uv*vec2(1.*uv.y,abs(uv.x))),0.5)*2.)*0.5;\n\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}