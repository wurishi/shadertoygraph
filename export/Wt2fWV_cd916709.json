{"ver":"0.1","info":{"id":"Wt2fWV","date":"1599892550","viewed":134,"name":"Planetary gears_1","username":"Jiaqi","description":"Simple animation using a gear polar function discovered mostly by chance. \n\nStill have problem in line 122","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["2d","gear"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Planetary gears\" by None. https://shadertoy.com/view/-1\n// 2020-09-12 06:32:45\n\n// Fork of \"Planetary gears\" by AntoineC. https://shadertoy.com/view/MsGczV\n// 2020-09-12 06:31:43\n//https://www.youtube.com/watch?v=9c1CyklAN5A\n\n// Inspired by:\n//  http://cmdrkitten.tumblr.com/post/172173936860\n\n\n#define Pi 3.14159265359\n\nstruct Gear\n{\n    float t;\t\t\t// Time\n    float gearR;\t\t// Gear radius\n    float teethH;\t\t// Teeth height\n    float teethR;\t\t// Teeth \"roundness\"\n    float teethCount;\t// Teeth count\n    float diskR;\t\t// Inner or outer border radius\n    vec3 color;\t\t\t// Color\n};\n\n    \n    \nfloat GearFunction(vec2 uv, Gear g)\n{\n    float r = length(uv);\n    float a = atan(uv.y, uv.x);\n    \n    // Gear polar function:\n    //  A sine squashed by a logistic function gives a convincing\n    //  gear shape!\n    float p = g.gearR-0.5*g.teethH + \n              g.teethH/(1.0+exp(g.teethR*sin(g.t + g.teethCount*a)));\n\n    float gear = r - p;\n    float disk = r - g.diskR;\n    \n    return g.gearR > g.diskR ? max(-disk, gear) : max(disk, -gear);\n}\n\n\nfloat GearDe(vec2 uv, Gear g)\n{\n    // IQ's f/|Grad(f)| distance estimator:\n    float f = GearFunction(uv, g);\n    vec2 eps = vec2(0.0001, 0);\n    vec2 grad = vec2(\n        GearFunction(uv + eps.xy, g) - GearFunction(uv - eps.xy, g),\n        GearFunction(uv + eps.yx, g) - GearFunction(uv - eps.yx, g)) / (2.0*eps.x);\n    \n    return (f)/length(grad);\n}\n\n\n\nfloat GearShadow(vec2 uv, Gear g)\n{\n    float r = length(uv+vec2(0.1));\n    float de = r - g.diskR + 0.0*(g.diskR - g.gearR);\n    float eps = 0.4*g.diskR;\n    return smoothstep(eps, 0., abs(de));\n}\n\n\nvoid DrawGear(inout vec3 color, vec2 uv, Gear g, float eps)\n{\n\tfloat d = smoothstep(eps, -eps, GearDe(uv, g));\n    float s = 1.0 - 0.7*GearShadow(uv, g);\n    color = mix(s*color, g.color, d);\n}\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = 0.5*iTime;\n    float t1 = 0.5*iTime;\n\n    vec2 uv = 2.0*(fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    float eps = 2.0/iResolution.y;\n\n    // Scene parameters;\n\tvec3 base = vec3(0.95, 0.7, 0.2);\n    const float count = 5.0;\n    \n    float teethCount_outer=66.0;\n    float teethCount_inner=16.0;\n    float gearR_outer = 0.8;\n    float gearR_inner = gearR_outer*teethCount_inner/teethCount_outer;\n    \n    float gearR_sun   = gearR_outer-2.0*gearR_inner;\n    float teethCount_sun  = floor(gearR_sun/gearR_inner*teethCount_inner);\n\n    Gear sun = Gear(0.0, gearR_sun, 0.05, 4.0, teethCount_sun, gearR_sun/1.5, base);\n\n    Gear outer = Gear(0.0, gearR_outer, 0.05, 4.0, teethCount_outer, gearR_outer*1.1, base);\n    Gear inner = Gear(0.0, gearR_inner, 0.05, 4.0, teethCount_inner, gearR_inner/1.5, base);\n    \n    \n    // Draw inner gears back to front:\n    vec3 color = vec3(0.0);\n    for(float i=0.0; i<count; i++)\n    {\n        t += 2.0*Pi/count;\n        inner.t = (outer.gearR-inner.gearR)*(outer.teethCount/outer.gearR)*t;\n        inner.color = base/3.0;//*(0.35 + 0.6*i/(count-1.0));\n        DrawGear(color, uv+(outer.gearR-inner.gearR)*vec2(cos(t),sin(t)), inner, eps);    }\n    \n    \n    \n    \n    // Draw outer gear:\n    DrawGear(color, uv, outer, eps);\n    ////\n    // Draw sun gear:\n    //t1 += 2.0*Pi/1.0;\n    sun.t = -inner.t/(outer.teethCount/sun.teethCount+1.0)*5.0;\n    sun.color = base *2.0 ;\n    DrawGear(color, uv, sun , eps);\n\n    \n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}