{"ver":"0.1","info":{"id":"4ccBzs","date":"1733361141","viewed":28,"name":"First Mandelbrot attempt","username":"Aurnyx","description":"more red means the value diverged along the x axis, more green means it diverged along the i axis","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float zoomRate = 3.0f; //higher is slower\nconst float targetX = -0.74868f; //the x coord being zoomed in on\nconst float targetY = 0.049864f; //the y coord being zoomed in on\nconst float cellWidth = 0.005f; //the coord distance between each pixel\nconst int maxSteps = 1000; //the max iterations of the mandelbrot formula to go through, higher increases resolution\nconst float startZoom = 2.0f; // lower is a greater starting zoom;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float zoomcalc = startZoom/(pow(iTime/zoomRate,iTime/zoomRate));\n    float zoom;\n    if(iTime/zoomRate < 1.0f) zoom = startZoom;\n    else zoom = zoomcalc;\n    int steps = int(float(maxSteps) * (1.0f - pow((0.45f*zoom), 2.0f)));\n    // Normalized pixel coordinates (from 0 to 1)\n    // vec2 uv = fragCoord/iResolution.xy;\n    float x = fragCoord.x - (iResolution.x / 2.0f);\n    float y = fragCoord.y - (iResolution.y / 2.0f);\n    float mandelX = targetX + (x * (zoom * cellWidth));\n    float mandelY = targetY + (y * (zoom * cellWidth));\n    float currentX = mandelX;\n    float currentB = mandelY;\n    float nextX;\n    float absDist;\n    for (int i = 0; i < steps; i++) {\n        nextX = (currentX * currentX) + ((currentB * currentB) * -1.0f);\n        currentB = ((currentX * currentB) * 2.0f) + mandelY;\n        currentX = nextX + mandelX;\n        absDist =(abs(currentX) + abs(currentB));\n        // if ((abs(currentX)>=2.1)||(abs(currentB)>=2.1)) {\n        if (absDist >= 2.01f) {\n            float red = (1.0f - (pow(absDist-2.01f, 2.0f) / 2.0f)) * abs(currentX);\n            float green = (1.0f - (pow(absDist-2.01f, 2.0f) / 2.0f)) * abs(currentB);\n            float blue = absDist/8.0f;\n            fragColor = vec4(red, green, blue, 1.0f);\n            return;\n        }\n    }\n    // Time varying pixel color\n    // vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,1,0));\n\n    // Output to screen\n    //fragColor = vec4(col,1.0);\n    fragColor = vec4(0, 0, 0, 1.0f);\n}","name":"Image","description":"","type":"image"}]}