{"ver":"0.1","info":{"id":"mstGRs","date":"1680287201","viewed":43,"name":"Cilia Test","username":"camelspaced","description":"Testing out ways to draw a cell movement \"cilia\" using shader","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["graphics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float TENDRIL_COUNT = 10.;\nconst float MAX_LENGTH = 0.5;\nconst float SPEED = 20.;\n\nfloat random (float x) {\n    return fract(sin(x)*100000.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n        \n    float cilia; \n        \n    //Get \"bands\" each is a cilia\n    float bandNumber = floor(uv.y * TENDRIL_COUNT);\n    float band = mod(uv.y * TENDRIL_COUNT , 1.);\n    \n    //Introduce some per band variation\n    float randomPerBand = random(bandNumber + 2.); //0 and 1 values cause weired results\n    float randomPerBand2 = random(bandNumber + 2. + 11.); //0 and 1 values cause weired results\n\n    //Vary length\n    float halfRand = randomPerBand * MAX_LENGTH;\n    float distanceToEnd = max(0.0, halfRand - uv.x) / halfRand;\n\n    //Curve up and down over time, randomized by band\n    float curve = pow(1. - distanceToEnd, 2.);\n    curve = mix(0., curve, cos((iTime + randomPerBand2) * SPEED) );\n        \n    //Center around the \"curve\" value, to get the shape of the tendril\n    float bandNormalized = (band * 2.0) - 1.0 - curve;\n    float centered = 1. - abs(bandNormalized);\n    \n    //Taper and fade edges\n    float varyWidth = max(0.5, randomPerBand2) * 3.;\n    centered -=  1. - (centered * varyWidth * distanceToEnd);\n\n    cilia = max(0., centered);\n\n     // Output to screen\n    fragColor = vec4(cilia, cilia, cilia, 1.0);\n}","name":"Image","description":"","type":"image"}]}