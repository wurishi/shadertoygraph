{"ver":"0.1","info":{"id":"tsyGDz","date":"1569999341","viewed":334,"name":"shadetober #01 (ring)","username":"percentcer","description":"Inktober, but with shaders","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["inktober","shadertober","shadetober","inktober2019"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float ring(vec2 uv, vec2 pos, float outer, float inner) {\n    pos *= vec2(sin(iTime * 3.), cos(iTime));\n    pos.x += 0.5;\n    outer *= cos(iTime);\n    inner *= sin(iTime);\n    \n    // calculate distance from ring\n    float d = distance(uv, pos);\n    float imul = step(inner, d);\n    float omul = 1.0 - step(outer, d);\n    \n    return imul * omul;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // is it inside a ring\n    float draw = ring(uv, vec2(0.5, 0.5), 0.5, 0.4);\n    draw += ring(uv, vec2(1.5, 0.5), 0.5, 0.4);\n    draw += ring(uv, vec2(1.5, 1.5), 0.5, 0.2);\n    draw += ring(uv, vec2(2.0, 0.2), 0.5, 0.4);\n    \n    // Output to screen\n    fragColor = draw * vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}