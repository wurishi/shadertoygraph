{"ver":"0.1","info":{"id":"7sf3z2","date":"1616259975","viewed":319,"name":"Fluid colors","username":"rmdms","description":"Hope this will inspires someone","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["colors","fluid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n|--------------------------------------------------------------------------\n| RÃ©my Dumas\n|--------------------------------------------------------------------------\n|\n| Twitter: @remsdms\n| Portfolio: remydumas.fr\n|\n*/\n\n#ifdef GL_ES\nprecision mediump float;\n#endif  \n\n/*\n|--------------------------------------------------------------------------\n| Map\n|--------------------------------------------------------------------------\n|\n| ...\n|\n*/\n\nfloat map(vec2 p) {\n    return length(p) - 0.2;\n}\n\n\n/*\n|--------------------------------------------------------------------------\n| Main\n|--------------------------------------------------------------------------\n|\n| Sandbox and sometimes something good\n|\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n  vec3 col;\n  vec3 color = vec3(1.,1.,1.);\n\n  for(float j = 0.0; j < 4.0; j++){\n      for(float i = 1.; i < 8.0; i++){\n          uv.x += (1.0 * (0.2 / (i + j) * sin(i * atan(iTime) * 2.0 * uv.y + (iTime * 0.1) + i * j)));\n          uv.y+= (1.0 * (1.0 / (i + j) * cos(i * 0.6 * uv.x + (iTime * 0.25) + i * j)));\n      }\n      col[int(j)] = -1.0 * (uv.x * uv.y);\n  }\n  \n\n  vec3 bg = vec3(1.,1.,1.);\n  color = mix(\n    col,\n    bg,\n    1.0-smoothstep(0.0,abs(sin(iTime*0.05)*3.0),map(uv))\n  );   \n\n  fragColor = vec4(vec3(color), 1.);\n}","name":"Image","description":"","type":"image"}]}