{"ver":"0.1","info":{"id":"Xsd3DB","date":"1452030293","viewed":13132,"name":"Wave Propagation Effect","username":"tomkh","description":"A simple water propagation effect based on PolyCube version [url]http://polycu.be/edit/?h=W2L7zN[/url]","likes":220,"published":1,"flags":32,"usePreview":0,"tags":["water","feedback","multipass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//\n// A simple water effect by Tom@2016\n//\n// based on PolyCube version:\n//    http://polycu.be/edit/?h=W2L7zN\n//\n// As people give me too much credit for this one,\n// it's based on: http://freespace.virgin.net/hugo.elias/graphics/x_water.htm\n// A very old Hugo Elias water tutorial :)\n//\n// Note:\n//   I could use one buffer only as in https://www.shadertoy.com/view/4sd3WB\n//   with a clever trick to utilize two channels\n//   and keep buffer A in x/r and buffer B in y/g.\n//   However, now I render every second simulation step,\n//   so the animation is more dynamic.\n//\n// Here is 1-buffer version for comparison:\n//   https://www.shadertoy.com/view/4dK3Ww\n//\n\n#define TEXTURED 1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 q = fragCoord.xy/iResolution.xy;\n\n#if TEXTURED == 1\n    \n    vec3 e = vec3(vec2(1.)/iResolution.xy,0.);\n    float p10 = texture(iChannel0, q-e.zy).x;\n    float p01 = texture(iChannel0, q-e.xz).x;\n    float p21 = texture(iChannel0, q+e.xz).x;\n    float p12 = texture(iChannel0, q+e.zy).x;\n    \n    // Totally fake displacement and shading:\n    vec3 grad = normalize(vec3(p21 - p01, p12 - p10, 1.));\n    vec4 c = texture(iChannel1, fragCoord.xy*2./iChannelResolution[1].xy + grad.xy*.35);\n    vec3 light = normalize(vec3(.2,-.5,.7));\n    float diffuse = dot(grad,light);\n    float spec = pow(max(0.,-reflect(light,grad).z),32.);\n    fragColor = mix(c,vec4(.7,.8,1.,1.),.25)*max(diffuse,0.) + spec;\n    \n#else\n    \n    float h = texture(iChannel0, q).x;\n    float sh = 1.35 - h*2.;\n    vec3 c =\n       vec3(exp(pow(sh-.75,2.)*-10.),\n            exp(pow(sh-.50,2.)*-20.),\n            exp(pow(sh-.25,2.)*-10.));\n    fragColor = vec4(c,1.);\n\n#endif\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//\n// A simple water effect by Tom@2016\n//\n// based on PolyCube version:\n//    http://polycu.be/edit/?h=W2L7zN\n//\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec3 e = vec3(vec2(1.)/iResolution.xy,0.);\n   vec2 q = fragCoord.xy/iResolution.xy;\n   \n   vec4 c = texture(iChannel0, q);\n   \n   float p11 = c.x;\n   \n   float p10 = texture(iChannel1, q-e.zy).x;\n   float p01 = texture(iChannel1, q-e.xz).x;\n   float p21 = texture(iChannel1, q+e.xz).x;\n   float p12 = texture(iChannel1, q+e.zy).x;\n   \n   float d = 0.;\n    \n   if (iMouse.z > 0.) \n   {\n      // Mouse interaction:\n      d = smoothstep(4.5,.5,length(iMouse.xy - fragCoord.xy));\n   }\n   else\n   {\n      // Simulate rain drops\n      float t = iTime*2.;\n      vec2 pos = fract(floor(t)*vec2(0.456665,0.708618))*iResolution.xy;\n      float amp = 1.-step(.05,fract(t));\n      d = -amp*smoothstep(2.5,.5,length(pos - fragCoord.xy));\n   }\n\n   // The actual propagation:\n   d += -(p11-.5)*2. + (p10 + p01 + p21 + p12 - 2.);\n   d *= .99; // dampening\n   d *= min(1.,float(iFrame)); // clear the buffer at iFrame == 0\n   d = d*.5 + .5;\n   \n   fragColor = vec4(d, 0, 0, 0);\n}\n","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//\n// A simple water effect by Tom@2016\n//\n// based on PolyCube version:\n//    http://polycu.be/edit/?h=W2L7zN\n//\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec3 e = vec3(vec2(1.)/iResolution.xy,0.);\n   vec2 q = fragCoord.xy/iResolution.xy;\n   \n   vec4 c = texture(iChannel0, q);\n   \n   float p11 = c.x;\n   \n   float p10 = texture(iChannel1, q-e.zy).x;\n   float p01 = texture(iChannel1, q-e.xz).x;\n   float p21 = texture(iChannel1, q+e.xz).x;\n   float p12 = texture(iChannel1, q+e.zy).x;\n   \n   float d = 0.;\n    \n   if (iMouse.z > 0.) \n   {\n      // Mouse interaction:\n      d = smoothstep(4.5,.5,length(iMouse.xy - fragCoord.xy));\n   }\n   else\n   {\n      // Simulate rain drops\n      float t = iTime*2.;\n      vec2 pos = fract(floor(t)*vec2(0.456665,0.708618))*iResolution.xy;\n      float amp = 1.-step(.05,fract(t));\n      d = -amp*smoothstep(2.5,.5,length(pos - fragCoord.xy));\n   }\n\n   // The actual propagation:\n   d += -(p11-.5)*2. + (p10 + p01 + p21 + p12 - 2.);\n   d *= .99; // dampening\n   d *= min(1.,float(iFrame)); // clear the buffer at iFrame == 0\n   d = d*.5 + .5;\n   \n   fragColor = vec4(d, 0, 0, 0);\n}\n","name":"Buf B","description":"","type":"buffer"}]}