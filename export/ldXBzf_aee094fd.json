{"ver":"0.1","info":{"id":"ldXBzf","date":"1497560518","viewed":173,"name":"Ray tracing in the forest","username":"adambene","description":"Basic ray tracer including several lighting models: diffuse, specular, ambient, refraction, reflection.\nUse mouse to rotate.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","raytracer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define t (iTime )\n#define PI 3.141592654\n\nmat4 rotate(vec3 a, float phi)\n{\n    a = normalize(a);\n    float s = sin(phi);\n    float c = cos(phi);\n    float oc = 1.0 - c;\n    \n    return mat4(oc * a.x * a.x + c,        oc * a.x * a.y - a.z * s,  oc * a.z * a.x + a.y * s,  0.0,\n                oc * a.x * a.y + a.z * s,  oc * a.y * a.y + c,        oc * a.y * a.z - a.x * s,  0.0,\n                oc * a.z * a.x - a.y * s,  oc * a.y * a.z + a.x * s,  oc * a.z * a.z + c,        0.0,\n                0.0,                       0.0,                       0.0,                       1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    mat4 rot = rotate(vec3(0, 1, 0), t / 2.);\n    if (iMouse.z > .5) {\n        rot = rotate(vec3(0, 1, 0), t / 2. + 2. * PI * iMouse.x / iResolution.x);\n    }\n    \n    const vec4 amb = vec4(.3,.3,.3,0.);\n\n    vec3 sphere_pos = vec3(sin(2. * t), cos(2. * t), 0);\n\tconst float sphere_r = .7;\n    vec4 sphere_color = vec4(1,.6,.6,0);\n\n    vec3 light_pos = vec3(0, 40., 50.);\n    vec4 light_color = vec4(1, 1, 1, 0);\n\n    vec3 cam_pos = (vec4(0, 0, -4, 0) * rot).xyz;\n\n    vec2 uv = (fragCoord.xy - iResolution.xy / 2.) / iResolution.y;\n    vec4 canvas = vec4(uv.x, uv.y, -3, 0) * rot;\n\n    vec3 ray_dir = canvas.xyz - cam_pos;\n    \n    vec3 l = ray_dir / length(ray_dir),\n         o = cam_pos,\n         c = sphere_pos;\n\n    float r = sphere_r;\n    \n    float dd = pow(dot(l, o - c), 2.) - pow(length(o - c), 2.) + pow(r, 2.);\n    float d = -1.;\n    if (dd > 0.) {\n\t\td = -dot(l, o - c) + sqrt(dd);\n    }\n    \n    vec3 x = o + d * l;\n    vec3 n = normalize(x - sphere_pos);\n    \n    vec3 ld = normalize(x - light_pos);\n    \n    vec3 cd = normalize(cam_pos - x);\n\n    float intensity = max(0., dot(ld, -n));\n    float spect = clamp(pow(dot(normalize(ld + cd), n), 20.), 0., 1.);\n\n    vec4 color = .7 * intensity * (sphere_color * light_color)\n               + .7 * spect * light_color\n               + .3 * amb * sphere_color\n               + .8 * vec4(texture(iChannel0, refract(cd, n, .75)).rgb, 0.)\n               + .7 * vec4(texture(iChannel0, reflect(cd, n)).rgb, 0.);\n    \n    vec3 bg = texture(iChannel0, cd).rgb;\n    fragColor = (dd <= 0.) ? vec4(bg, 0) : color;\n}","name":"Image","description":"","type":"image"}]}